
ucosii_animation_exercises_p1.elf:     file format elf32-littlenios2
ucosii_animation_exercises_p1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001a27c memsz 0x0001a27c flags r-x
    LOAD off    0x0001b29c vaddr 0x0001a29c paddr 0x0001c124 align 2**12
         filesz 0x00001e88 memsz 0x00001e88 flags rw-
    LOAD off    0x0001dfac vaddr 0x0001dfac paddr 0x0001dfac align 2**12
         filesz 0x00000000 memsz 0x00007454 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00019600  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a54  00019848  00019848  0001a848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001e88  0001a29c  0001c124  0001b29c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00007454  0001dfac  0001dfac  0001dfac  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00025400  00025400  0001d124  2**0
                  CONTENTS
  7 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM 00000000  09000000  09000000  0001d124  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001d124  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001098  00000000  00000000  0001d148  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0003037d  00000000  00000000  0001e1e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b275  00000000  00000000  0004e55d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ea0d  00000000  00000000  000597d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000038cc  00000000  00000000  000681e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000055b5  00000000  00000000  0006baac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000178aa  00000000  00000000  00071061  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  0008890c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018c0  00000000  00000000  00088930  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  0008f8c1  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0008f8c7  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0008f8cc  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0008f8cd  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0008f8ce  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0008f8d2  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0008f8d6  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0008f8da  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0008f8e3  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0008f8ec  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000f  00000000  00000000  0008f8f5  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000005a  00000000  00000000  0008f904  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     001d2080  00000000  00000000  0008f95e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
00019848 l    d  .rodata	00000000 .rodata
0001a29c l    d  .rwdata	00000000 .rwdata
0001dfac l    d  .bss	00000000 .bss
00025400 l    d  .SDRAM	00000000 .SDRAM
09000000 l    d  .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM	00000000 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ucosii_animation_exercises_p1_bsp//obj/HAL/src/crt0.o
00000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 utils.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 impure.c
0001a29c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00019d7e l     O .rodata	00000010 zeroes.4404
0000306c l     F .text	000000bc __sbprintf
00019d8e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000327c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004dac l     F .text	00000008 __fp_unlock
00004dc0 l     F .text	0000019c __sinit.part.1
00004f5c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
0001a6e0 l     O .rwdata	00000020 lc_ctype_charset
0001a6c0 l     O .rwdata	00000020 lc_message_charset
0001a700 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00019dbc l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00008358 l     F .text	000000fc __sprint_r.part.0
00019ef0 l     O .rodata	00000010 blanks.4348
00019ee0 l     O .rodata	00000010 zeroes.4349
000098e4 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000d5a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000d6ac l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000d6d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000d7c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000d8a4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000d990 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0000db5c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001c098 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000dda8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0001c09c l     O .rwdata	00000004 lockid
0001e014 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0001c0a0 l     O .rwdata	00000004 lockid
0001e01c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0000f7d8 l     F .text	00000048 OS_InitMisc
0000f820 l     F .text	0000006c OS_InitRdyList
0000f98c l     F .text	000000e4 OS_InitTCBList
0000f6f8 l     F .text	000000e0 OS_InitEventList
0000f88c l     F .text	00000080 OS_InitTaskIdle
0000f90c l     F .text	00000080 OS_InitTaskStat
0000fbfc l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00011880 l     F .text	000000f0 OS_FlagTaskRdy
00011644 l     F .text	0000015c OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001592c l     F .text	00000034 alt_dev_reg
0001ace8 l     O .rwdata	0000106c JTAG_UART
0001bd54 l     O .rwdata	00000030 AV_Config
0001bd84 l     O .rwdata	00000030 Audio_Subsystem_Audio
0001bdb4 l     O .rwdata	0000002c Char_LCD_16x2
0001bde0 l     O .rwdata	0000002c IrDA
0001be0c l     O .rwdata	00000038 PS2_Port
0001be44 l     O .rwdata	00000038 PS2_Port_Dual
0001be7c l     O .rwdata	0000002c Serial_Port
0001bea8 l     O .rwdata	00000034 USB
0001bedc l     O .rwdata	0000005c VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA
0001bf38 l     O .rwdata	0000005c VGA_Subsystem_VGA_Pixel_DMA
0001bf94 l     O .rwdata	0000005c Video_In_Subsystem_Video_In_DMA
0001bff0 l     O .rwdata	00000044 VGA_Subsystem_VGA_Pixel_RGB_Resampler
0001c034 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000165a0 l     F .text	000002a0 altera_avalon_jtag_uart_irq
00016840 l     F .text	00000100 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00017010 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001850c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00018770 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00018a30 l     F .text	0000003c alt_get_errno
00018a6c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000034 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001e080 g     O .bss	00000004 alt_instruction_exception_handler
0000799c g     F .text	00000074 _mprec_log10
0001c0ee g     O .rwdata	00000002 OSTaskNameSize
00007a88 g     F .text	0000008c __any_on
00009e80 g     F .text	00000054 _isatty_r
00019dc8 g     O .rodata	00000028 __mprec_tinytens
0000daa0 g     F .text	000000bc alt_main
00000cec g     F .text	000000c0 _puts_r
0001dfac g     O .bss	00000004 video_resolution
00025300 g     O .bss	00000100 alt_irq
00017bcc g     F .text	00000060 alt_up_ps2_disable_read_interrupt
00009ed4 g     F .text	00000060 _lseek_r
0001209c g     F .text	000000cc OS_MemInit
0001c124 g       *ABS*	00000000 __flash_rwdata_start
000158cc g     F .text	00000060 OSTimeSet
00017174 g     F .text	00000040 alt_up_character_lcd_send_cmd
0000c0cc g     F .text	00000088 .hidden __eqdf2
0000e44c g     F .text	00000610 OSEventPendMulti
00025400 g       *ABS*	00000000 __alt_heap_start
00019078 g     F .text	00000024 OSTaskCreateHook
0001c0c6 g     O .rwdata	00000002 OSMboxEn
0000eab4 g     F .text	0000004c OSIntEnter
0000a0ec g     F .text	0000009c _wcrtomb_r
00008218 g     F .text	0000005c __sseek
000050fc g     F .text	00000010 __sinit
00009f94 g     F .text	00000140 __swbuf_r
000179e4 g     F .text	00000034 read_CE_bit
0001c0d6 g     O .rwdata	00000002 OSQEn
00005bc4 g     F .text	0000007c _setlocale_r
00004f64 g     F .text	00000068 __sfmoreglue
0000e120 g     F .text	000000cc __malloc_unlock
000190e0 g     F .text	00000020 OSTaskStatHook
00017d6c g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
00018260 g     F .text	00000090 alt_up_rs232_read_fd
0001e024 g     O .bss	00000001 OSLockNesting
0001c114 g     O .rwdata	00000002 OSDataSize
0001e025 g     O .bss	00000001 OSRunning
00006894 g     F .text	0000015c memmove
00019120 g     F .text	00000020 OSInitHookBegin
0001c10c g     O .rwdata	00000002 OSTmrSize
000050e4 g     F .text	00000018 _cleanup
00006b18 g     F .text	000000a8 _Balloc
0001dfb0 g     O .bss	00000004 screen_x
0001e028 g     O .bss	00000004 OSIdleCtr
0000c154 g     F .text	000000dc .hidden __gtdf2
00018e28 g     F .text	00000024 altera_nios2_gen2_irq_init
00018ef8 g       .text	00000000 OSStartTsk
00017100 g     F .text	00000074 get_DDRAM_addr
0000ff3c g     F .text	000002d4 OS_TCBInit
0001e0ac g     O .bss	00002000 task_key_press_stk
00000000 g     F .entry	0000001c __reset
0001c112 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001c0b2 g     O .rwdata	00000002 OSEventSize
0001e02c g     O .bss	00000001 OSPrioHighRdy
00009e24 g     F .text	0000005c _fstat_r
0001909c g     F .text	00000024 OSTaskDelHook
0001e000 g     O .bss	00000004 errno
00008194 g     F .text	00000008 __seofread
00018ed8 g       .text	00000000 OSStartHighRdy
00014368 g     F .text	000001e4 OSTaskCreateExt
000111bc g     F .text	00000060 OSFlagPendGetFlagsRdy
0001c0f2 g     O .rwdata	00000002 OSTaskStatStkSize
000103a0 g     F .text	000002e4 OSFlagAccept
000126d4 g     F .text	000000b8 OSQFlush
00012168 g     F .text	00000140 OSQAccept
0001e00c g     O .bss	00000004 alt_argv
00024060 g       *ABS*	00000000 _gp
000141bc g     F .text	000001ac OSTaskCreate
00013ccc g     F .text	000004f0 OSTaskChangePrio
0001e020 g     O .bss	00000004 alt_heapsem
00010210 g     F .text	00000190 OSDebugInit
0001454c g     F .text	00000344 OSTaskDel
0001ab68 g     O .rwdata	00000180 alt_fd_list
000220ac g     O .bss	00000370 OSFlagTbl
0000f4d8 g     F .text	000000b8 OS_EventTaskRemove
0001dfb4 g     O .bss	00000004 SEM_read_KEYs
000186ac g     F .text	00000090 alt_find_dev
0000674c g     F .text	00000148 memcpy
0001c0dc g     O .rwdata	00000002 OSRdyTblSize
0001731c g     F .text	00000050 alt_up_character_lcd_write_fd
00004db4 g     F .text	0000000c _cleanup_r
0000d3b8 g     F .text	000000dc .hidden __floatsidf
00018834 g     F .text	0000007c alt_io_redirect
0000c230 g     F .text	000000f4 .hidden __ltdf2
00019848 g       *ABS*	00000000 __DTOR_END__
000178b4 g     F .text	00000090 alt_up_irda_write_fd
000181ec g     F .text	00000074 alt_up_rs232_read_data
00000dac g     F .text	00000014 puts
00019418 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000e1ec g     F .text	00000120 OSEventNameGet
0001c0c0 g     O .rwdata	00000002 OSFlagMax
00008078 g     F .text	00000074 __fpclassifyd
000078f8 g     F .text	000000a4 __ratio
0000eb00 g     F .text	000000f8 OSIntExit
000098c8 g     F .text	0000001c __vfiprintf_internal
0001c0fa g     O .rwdata	00000002 OSTCBSize
0001e02d g     O .bss	00000001 OSPrioCur
0001dfb8 g     O .bss	00000004 KEY2_flag
000176b0 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
00016a98 g     F .text	000002b8 altera_avalon_jtag_uart_read
0000ae7c g     F .text	00000064 .hidden __udivsi3
0000d800 g     F .text	000000a4 isatty
0001c0e0 g     O .rwdata	00000002 OSStkWidth
00019e18 g     O .rodata	000000c8 __mprec_tens
0001c0d4 g     O .rwdata	00000002 OSPtrSize
00005c40 g     F .text	0000000c __locale_charset
0001c0b4 g     O .rwdata	00000002 OSEventTblSize
00017650 g     F .text	00000060 alt_up_irda_disable_read_interrupt
00018e4c g       .text	00000000 OSCtxSw
00019388 g     F .text	00000090 alt_icache_flush
0001dffc g     O .bss	00000004 __malloc_top_pad
0001e030 g     O .bss	00000004 OSTCBList
0001e004 g     O .bss	00000004 alt_fd_list_lock
0001c070 g     O .rwdata	00000004 __mb_cur_max
00005c70 g     F .text	0000000c _localeconv_r
00006f24 g     F .text	0000003c __i2b
00005580 g     F .text	000004bc __sfvwrite_r
0002241c g     O .bss	00000c30 OSMemTbl
0001e034 g     O .bss	00000001 OSTickStepState
000080ec g     F .text	00000054 _sbrk_r
0001c0d8 g     O .rwdata	00000002 OSQMax
0002304c g     O .bss	00000800 OSTaskStatStk
00011cd8 g     F .text	000000f0 OSMemNameGet
0001c0b8 g     O .rwdata	00000002 OSFlagEn
00009f34 g     F .text	00000060 _read_r
0001c0fe g     O .rwdata	00000002 OSTimeTickHookEn
00012b84 g     F .text	00000168 OSQPost
00011970 g     F .text	000000a4 OS_FlagUnlink
0001c090 g     O .rwdata	00000004 alt_max_fd
00018168 g     F .text	00000044 alt_up_rs232_check_parity
0001dfbc g     O .bss	00000004 col_offset
0000fac4 g     F .text	00000068 OS_MemCopy
0000fb2c g     F .text	000000d0 OS_Sched
00009b18 g     F .text	000000f0 _fclose_r
00011be8 g     F .text	000000f0 OSMemGet
00014b78 g     F .text	000001b4 OSTaskNameSet
00017a18 g     F .text	00000030 read_num_bytes_available
00004d7c g     F .text	00000030 fflush
0001dff8 g     O .bss	00000004 __malloc_max_sbrked_mem
0001e038 g     O .bss	00000004 OSCtxSwCtr
000200ac g     O .bss	00002000 task_disp_vga_char_stk
00019100 g     F .text	00000020 OSTimeTickHook
000188b0 g     F .text	00000180 alt_irq_register
0001c0c2 g     O .rwdata	00000002 OSFlagNameSize
00017980 g     F .text	00000034 read_RI_bit
0000f590 g     F .text	00000100 OS_EventTaskRemoveMulti
0000af38 g     F .text	000008ac .hidden __adddf3
0000f388 g     F .text	00000150 OS_EventTaskWaitMulti
000076a0 g     F .text	0000010c __b2d
0001c0da g     O .rwdata	00000002 OSQSize
0000a84c g     F .text	00000538 .hidden __umoddi3
0000d9cc g     F .text	000000d4 lseek
00013634 g     F .text	0000020c OSSemPend
0001c068 g     O .rwdata	00000004 _global_impure_ptr
00007b14 g     F .text	00000564 _realloc_r
0001c0c4 g     O .rwdata	00000002 OSLowestPrio
00025400 g       *ABS*	00000000 __bss_end
00019180 g     F .text	00000024 OSTCBInitHook
0001c10a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00018d20 g     F .text	00000108 alt_tick
0000a2d4 g     F .text	00000578 .hidden __udivdi3
00009d80 g     F .text	00000024 _fputwc_r
0001c0ac g     O .rwdata	00000002 OSEventEn
00019df0 g     O .rodata	00000028 __mprec_bigtens
00006d08 g     F .text	00000104 __s2b
0001c106 g     O .rwdata	00000002 OSTmrCfgNameSize
0000d494 g     F .text	000000a8 .hidden __floatunsidf
000073e0 g     F .text	00000060 __mcmp
00017a7c g     F .text	0000002c read_data_byte
0000511c g     F .text	00000018 __fp_lock_all
000117a0 g     F .text	000000e0 OS_FlagInit
00018c84 g     F .text	0000009c alt_alarm_stop
000179b4 g     F .text	00000030 read_RE_bit
0001c0e8 g     O .rwdata	00000002 OSTaskIdleStkSize
00000724 g     F .text	00000168 Check_KEYs
0001e074 g     O .bss	00000004 alt_irq_active
0001326c g     F .text	000000b0 OSSemAccept
0000088c g     F .text	00000094 VGA_text
00011edc g     F .text	000000d8 OSMemPut
00011a14 g     F .text	000001d4 OSMemCreate
0001e03c g     O .bss	00000004 OSIdleCtrMax
000176f0 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d8 alt_irq_handler
0001ab40 g     O .rwdata	00000028 alt_dev_null
0001c0fc g     O .rwdata	00000002 OSTicksPerSec
0001dfc0 g     O .bss	00000004 KEY_val
000175bc g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
00018e4c g       .text	00000000 OSIntCtxSw
00017c2c g     F .text	00000074 alt_up_ps2_write_data_byte
000184ec g     F .text	00000020 alt_dcache_flush_all
00006e0c g     F .text	00000068 __hi0bits
0000d338 g     F .text	00000080 .hidden __fixdfsi
0001e040 g     O .bss	00000004 OSTCBFreeList
0001c124 g       *ABS*	00000000 __ram_rwdata_end
00013840 g     F .text	0000016c OSSemPendAbort
0001c088 g     O .rwdata	00000008 alt_dev_list
0000dde4 g     F .text	000000f8 write
0001c100 g     O .rwdata	00000002 OSVersionNbr
0001a29c g       *ABS*	00000000 __ram_rodata_end
0000d714 g     F .text	000000b0 fstat
00000cc8 g     F .text	00000024 fprintf
000182f0 g     F .text	00000094 alt_up_rs232_write_fd
0001dfc4 g     O .bss	00000004 res_offset
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000c230 g     F .text	000000f4 .hidden __ledf2
0001c0a8 g     O .rwdata	00000004 OSEndiannessTest
00007158 g     F .text	00000140 __pow5mult
0000846c g     F .text	0000145c ___vfiprintf_internal_r
0001dff0 g     O .bss	00000004 __nlocale_changed
0000aee0 g     F .text	00000058 .hidden __umodsi3
0001c0ba g     O .rwdata	00000002 OSFlagGrpSize
00025400 g       *ABS*	00000000 end
00017f5c g     F .text	00000098 alt_up_ps2_write_fd
0001772c g     F .text	00000044 alt_up_irda_check_parity
00016468 g     F .text	00000138 altera_avalon_jtag_uart_init
0000fd94 g     F .text	000000dc OS_TaskStat
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
00019848 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0001708c g     F .text	00000074 alt_avalon_timer_sc_init
0000d53c g     F .text	00000064 .hidden __clzsi2
00016d50 g     F .text	000002c0 altera_avalon_jtag_uart_write
0000510c g     F .text	00000004 __sfp_lock_acquire
00006668 g     F .text	000000e4 memchr
0000fa70 g     F .text	00000054 OS_MemClr
00017228 g     F .text	0000007c alt_up_character_lcd_write
00000e58 g     F .text	000021f8 ___vfprintf_internal_r
00018f1c g     F .text	0000015c OSTaskStkInit
00005270 g     F .text	00000310 _free_r
00019848 g     O .rodata	00000051 clear_row_text
00005c4c g     F .text	00000010 __locale_mb_cur_max
0000f0e0 g     F .text	00000198 OS_EventTaskRdy
0001dfc8 g     O .bss	00000004 screen_y
00019694 g     F .text	00000180 __call_exitprocs
0001e044 g     O .bss	00000001 OSCPUUsage
0001dfec g     O .bss	00000004 __mlocale_changed
0001c074 g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	0000003c _start
0001e078 g     O .bss	00000004 _alt_tick_rate
0001278c g     F .text	0000028c OSQPend
00015438 g     F .text	00000104 OSTimeDly
00007298 g     F .text	00000148 __lshift
0001e07c g     O .bss	00000004 _alt_nticks
0000db98 g     F .text	000000fc read
00015998 g     F .text	0000096c alt_sys_init
0001746c g     F .text	0000008c alt_up_character_lcd_shift_display
0001957c g     F .text	00000118 __register_exitproc
0001e045 g     O .bss	00000001 OSTaskCtr
00017e78 g     F .text	00000058 alt_up_ps2_clear_fifo
0001812c g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00000920 g     F .text	00000138 VGA_box
0001553c g     F .text	00000160 OSTimeDlyHMSM
00006f60 g     F .text	000001f8 __multiply
000174f8 g     F .text	0000008c alt_up_character_lcd_erase_pos
00016940 g     F .text	00000068 altera_avalon_jtag_uart_close
0001a29c g       *ABS*	00000000 __ram_rwdata_start
00019848 g       *ABS*	00000000 __ram_rodata_start
0001e084 g     O .bss	00000028 __malloc_current_mallinfo
0001c0ae g     O .rwdata	00000002 OSEventMax
000077ac g     F .text	0000014c __d2b
000139ac g     F .text	00000110 OSSemPost
0000ec84 g     F .text	000000dc OSSchedUnlock
00016304 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000192ac g     F .text	000000dc alt_get_fd
0001e048 g     O .bss	00000004 OSMemFreeList
0000edd0 g     F .text	000000b0 OSStatInit
00011580 g     F .text	000000c4 OSFlagQuery
0001dfcc g     O .bss	00000004 KEY1_flag
0001c0e4 g     O .rwdata	00000002 OSTaskCreateExtEn
00009a00 g     F .text	00000054 _close_r
0001dfd0 g     O .bss	00000004 pos_y
00019500 g     F .text	0000007c memcmp
0000f0c0 g     F .text	00000020 OS_Dummy
000163c4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00000b10 g     F .text	00000190 get_data_bits
00025400 g       *ABS*	00000000 __alt_stack_base
00016414 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000175f4 g     F .text	0000005c alt_up_irda_enable_read_interrupt
00003128 g     F .text	00000154 __swsetup_r
0002384c g     O .bss	000001e0 OSQTbl
0000b7e4 g     F .text	000008e8 .hidden __divdf3
00004fcc g     F .text	00000118 __sfp
00007a10 g     F .text	00000078 __copybits
0001a738 g     O .rwdata	00000408 __malloc_av_
00005118 g     F .text	00000004 __sinit_lock_release
0001e04c g     O .bss	00000004 OSTCBHighRdy
0000c324 g     F .text	00000718 .hidden __muldf3
00008140 g     F .text	00000054 __sread
0001e050 g     O .bss	00000004 OSQFreeList
0001808c g     F .text	00000060 alt_up_rs232_disable_read_interrupt
000191a4 g     F .text	00000108 alt_find_file
00018548 g     F .text	000000a4 alt_dev_llist_insert
0000e000 g     F .text	00000120 __malloc_lock
00000ca0 g     F .text	00000028 _fprintf_r
0000dcf8 g     F .text	000000b0 sbrk
0000e30c g     F .text	00000140 OSEventNameSet
00004d20 g     F .text	0000005c _fflush_r
00009a54 g     F .text	000000c4 _calloc_r
0001e054 g     O .bss	00000001 OSRdyGrp
00000284 g     F .text	000001b0 Task_read_KEYs
0001dfac g       *ABS*	00000000 __bss_start
000069f0 g     F .text	00000128 memset
0001dfd4 g     O .bss	00000001 err
000004bc g     F .text	00000268 main
0001e010 g     O .bss	00000004 alt_envp
0001dff4 g     O .bss	00000004 __malloc_max_total_mem
00000434 g     F .text	00000088 Task_VGA_char
00016364 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000a0d4 g     F .text	00000018 __swbuf
0001a01c g     O .rodata	00000100 OSUnMapTbl
0001c0de g     O .rwdata	00000002 OSSemEn
000173e0 g     F .text	0000008c alt_up_character_lcd_shift_cursor
0001121c g     F .text	00000364 OSFlagPost
00008274 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
00009c08 g     F .text	00000014 fclose
0000f278 g     F .text	00000110 OS_EventTaskWait
00017e08 g     F .text	00000070 alt_up_ps2_read_data_byte
0000fe70 g     F .text	000000cc OS_TaskStatStkChk
00014890 g     F .text	00000150 OSTaskDelReq
0001dfd8 g     O .bss	00000004 pos_x
0000347c g     F .text	00001688 _dtoa_r
00005e5c g     F .text	0000080c _malloc_r
0000a248 g     F .text	00000030 __ascii_wctomb
0001c094 g     O .rwdata	00000004 alt_errno
0000ed60 g     F .text	00000070 OSStart
0000dfa0 g     F .text	00000060 __env_unlock
00005a3c g     F .text	000000c4 _fwalk
00014d2c g     F .text	000001d4 OSTaskResume
00011fb4 g     F .text	000000e8 OSMemQuery
0001c0f0 g     O .rwdata	00000002 OSTaskStatEn
00017770 g     F .text	00000040 alt_up_irda_write_data
0001c0ca g     O .rwdata	00000002 OSMemMax
00012cec g     F .text	00000170 OSQPostFront
00017ff4 g     F .text	0000003c alt_up_ps2_open_dev
0000ad84 g     F .text	00000084 .hidden __divsi3
0001e055 g     O .bss	00000003 OSRdyTbl
0001c0a4 g     O .rwdata	00000002 OSDebugEn
000171ec g     F .text	0000003c alt_up_character_lcd_open_dev
0000514c g     F .text	00000124 _malloc_trim_r
00017b70 g     F .text	0000005c alt_up_ps2_enable_read_interrupt
00019848 g       *ABS*	00000000 __CTOR_END__
0001c0bc g     O .rwdata	00000002 OSFlagNodeSize
0001c104 g     O .rwdata	00000002 OSTmrCfgMax
000171b4 g     F .text	00000038 alt_up_character_lcd_init
0000827c g     F .text	000000dc strcmp
000122a8 g     F .text	000001ac OSQCreate
000149e0 g     F .text	00000198 OSTaskNameGet
00019848 g       *ABS*	00000000 __flash_rodata_start
00012e5c g     F .text	0000020c OSQPostOpt
0000ee80 g     F .text	00000220 OSTimeTick
0001c0ec g     O .rwdata	00000002 OSTaskMax
00019848 g       *ABS*	00000000 __DTOR_LIST__
0001331c g     F .text	000000d8 OSSemCreate
0001c110 g     O .rwdata	00000002 OSTmrWheelSize
0001dfdc g     O .bss	00000004 KEY3_flag
00018384 g     F .text	0000003c alt_up_rs232_open_dev
0000c0cc g     F .text	00000088 .hidden __nedf2
0001c0e6 g     O .rwdata	00000002 OSTaskDelEn
00013abc g     F .text	00000110 OSSemQuery
00012454 g     F .text	00000280 OSQDel
00012a18 g     F .text	0000016c OSQPendAbort
00015960 g     F .text	00000038 alt_irq_init
0000dc94 g     F .text	00000064 alt_release_fd
00017a48 g     F .text	00000034 read_data_valid
00017584 g     F .text	00000038 alt_up_character_lcd_cursor_off
00019f00 g     O .rodata	00000100 .hidden __clz_tab
0001dfe8 g     O .bss	00000004 _PathLocale
00017d08 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
000194b4 g     F .text	00000014 atexit
000099a0 g     F .text	00000060 _write_r
0000ebf8 g     F .text	0000008c OSSchedLock
00005c7c g     F .text	00000018 setlocale
00010684 g     F .text	00000104 OSFlagCreate
0001c06c g     O .rwdata	00000004 _impure_ptr
0001e008 g     O .bss	00000004 alt_argc
00004b04 g     F .text	0000021c __sflush_r
0001c064 g     O .rwdata	00000002 clear_text
0001864c g     F .text	00000060 _do_dtors
00005c68 g     F .text	00000008 __locale_cjk_lang
0001c0b6 g     O .rwdata	00000002 OSEventMultiEn
09000000 g       *ABS*	00000000 __alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00010788 g     F .text	00000248 OSFlagDel
0001e058 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
0000763c g     F .text	00000064 __ulp
00010c44 g     F .text	00000578 OSFlagPend
0001c102 g     O .rwdata	00000002 OSTmrEn
00005134 g     F .text	00000018 __fp_unlock_all
0001c080 g     O .rwdata	00000008 alt_fs_list
0000fc70 g     F .text	00000074 OS_StrCopy
00018030 g     F .text	0000005c alt_up_rs232_enable_read_interrupt
000181ac g     F .text	00000040 alt_up_rs232_write_data
0001c0cc g     O .rwdata	00000002 OSMemNameSize
00019140 g     F .text	00000020 OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
0001c0f8 g     O .rwdata	00000002 OSTCBPrioTblMax
00005c94 g     F .text	0000000c localeconv
0001c0f4 g     O .rwdata	00000002 OSTaskStatStkChkEn
0001c0c8 g     O .rwdata	00000002 OSMemEn
0001c0d2 g     O .rwdata	00000002 OSMutexEn
0001c124 g       *ABS*	00000000 _edata
0001dfe0 g     O .bss	00000004 KEY0_flag
00025400 g       *ABS*	00000000 _end
0001e05c g     O .bss	00000001 OSIntNesting
00009c1c g     F .text	00000164 __fputwc
00000248 g       *ABS*	00000000 __ram_exceptions_end
000169a8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0001569c g     F .text	000001d4 OSTimeDlyResume
00010af8 g     F .text	0000014c OSFlagNameSet
00014f00 g     F .text	000001c0 OSTaskStkChk
0001c0ce g     O .rwdata	00000002 OSMemSize
0000819c g     F .text	0000007c __swrite
0001c078 g     O .rwdata	00000004 __malloc_trim_threshold
00005c5c g     F .text	0000000c __locale_msgcharset
0001e060 g     O .bss	00000004 OSTCBCur
000194c8 g     F .text	00000038 exit
000177b0 g     F .text	00000074 alt_up_irda_read_data
0001c0d0 g     O .rwdata	00000002 OSMemTblSize
00005b00 g     F .text	000000c4 _fwalk_reent
00017aa8 g     F .text	000000c8 alt_up_ps2_init
00007440 g     F .text	000001fc __mdiff
0000ae08 g     F .text	00000074 .hidden __modsi3
00000a58 g     F .text	000000b8 resample_rgb
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00005110 g     F .text	00000004 __sfp_lock_release
0000ea5c g     F .text	00000058 OSInit
000152a4 g     F .text	00000124 OSTaskQuery
000172a4 g     F .text	00000078 alt_up_character_lcd_string
000131c4 g     F .text	000000a8 OS_QInit
0000fce4 g     F .text	00000054 OS_StrLen
00017944 g     F .text	0000003c alt_up_irda_open_dev
00011dc8 g     F .text	00000114 OSMemNameSet
0001c0ea g     O .rwdata	00000002 OSTaskProfileEn
0001e064 g     O .bss	00000004 OSTime
00023a2c g     O .bss	00000800 OSTaskIdleStk
00019814 g     F .text	00000034 _exit
000183c0 g     F .text	0000012c alt_alarm_start
000109d0 g     F .text	00000128 OSFlagNameGet
00015870 g     F .text	0000005c OSTimeGet
00005ca0 g     F .text	000001bc __smakebuf_r
00017ca0 g     F .text	00000068 alt_up_ps2_wait_for_ack
00000dc0 g     F .text	00000098 strlen
000190c0 g     F .text	00000020 OSTaskSwHook
00018b30 g     F .text	00000154 open
0002422c g     O .bss	00000b40 OSEventTbl
0000c154 g     F .text	000000dc .hidden __gedf2
00024d6c g     O .bss	00000540 OSTCBTbl
00013bcc g     F .text	00000100 OSSemSet
0001c07c g     O .rwdata	00000004 __wctomb
00008454 g     F .text	00000018 __sprint_r
0001873c g     F .text	00000034 alt_icache_flush_all
0001736c g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0001c118 g     O .rwdata	00000004 alt_priority_mask
000133f4 g     F .text	00000240 OSSemDel
0001e068 g     O .bss	00000004 OSFlagFreeList
0001c0b0 g     O .rwdata	00000002 OSEventNameSize
00003050 g     F .text	0000001c __vfprintf_internal
0001e06c g     O .bss	00000001 OSStatRdy
000252ac g     O .bss	00000054 OSTCBPrioTbl
0000a278 g     F .text	0000005c _wctomb_r
0000dedc g     F .text	000000c4 __env_lock
00017ed0 g     F .text	0000008c alt_up_ps2_read_fd
0001c0f6 g     O .rwdata	00000002 OSTaskSwHookEn
0000ca3c g     F .text	000008fc .hidden __subdf3
00017824 g     F .text	00000090 alt_up_irda_read_fd
0001c060 g     O .rwdata	00000002 text_disp
00006e74 g     F .text	000000b0 __lo0bits
0001c11c g     O .rwdata	00000008 alt_alarm_list
0001c0be g     O .rwdata	00000002 OSFlagWidth
000185ec g     F .text	00000060 _do_ctors
000180ec g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000a188 g     F .text	000000c0 wcrtomb
0000d5dc g     F .text	000000d0 close
0001e018 g     O .bss	00000004 alt_envsem
0001e070 g     O .bss	00000004 OSIdleCtrRun
0000f0a0 g     F .text	00000020 OSVersion
0001c108 g     O .rwdata	00000002 OSTmrCfgWheelSize
0000d90c g     F .text	00000084 alt_load
000153c8 g     F .text	00000070 OS_TaskStkClr
0001c0e2 g     O .rwdata	00000002 OSTaskCreateEn
0000f690 g     F .text	00000068 OS_EventWaitListInit
00009da4 g     F .text	00000080 fputwc
00019160 g     F .text	00000020 OSTaskIdleHook
00005114 g     F .text	00000004 __sinit_lock_acquire
0001dfe4 g     O .bss	00000004 rgb_status
00006be8 g     F .text	00000120 __multadd
000150c0 g     F .text	000001e4 OSTaskSuspend
00006bc0 g     F .text	00000028 _Bfree
0000fd38 g     F .text	0000005c OS_TaskIdle
0001c10e g     O .rwdata	00000002 OSTmrTblSize
00013068 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	000eab40 	call	eab4 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000b4 	movhi	r2,2
 140:	1094c004 	addi	r2,r2,21248
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	1094c004 	addi	r2,r2,21248
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	000eb000 	call	eb00 <OSIntExit>
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a80817 	ldw	r2,-24544(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a80817 	ldw	r2,-24544(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     248:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     24c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     250:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     254:	d6901814 	ori	gp,gp,16480
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     258:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     25c:	10b7eb14 	ori	r2,r2,57260

    movhi r3, %hi(__bss_end)
     260:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     264:	18d50014 	ori	r3,r3,21504

    beq r2, r3, 1f
     268:	10c00326 	beq	r2,r3,278 <_start+0x30>

0:
    stw zero, (r2)
     26c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     274:	10fffd36 	bltu	r2,r3,26c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     278:	000d90c0 	call	d90c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     27c:	000daa00 	call	daa0 <alt_main>

00000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     280:	003fff06 	br	280 <alt_after_alt_main>

00000284 <Task_read_KEYs>:
#define TASK_VGA_CHAR_PRIORITY 2

/* Prints "Hello World" and sleeps for three seconds */
void
Task_read_KEYs(void* pdata)
{
     284:	defffc04 	addi	sp,sp,-16
     288:	dfc00315 	stw	ra,12(sp)
     28c:	df000215 	stw	fp,8(sp)
     290:	df000204 	addi	fp,sp,8
     294:	e13fff15 	stw	r4,-4(fp)
  debug("Started: Task_read_KEYs");
     298:	d0a00317 	ldw	r2,-32756(gp)
     29c:	10800317 	ldw	r2,12(r2)
     2a0:	01c00a44 	movi	r7,41
     2a4:	018000b4 	movhi	r6,2
     2a8:	31a62704 	addi	r6,r6,-26468
     2ac:	014000b4 	movhi	r5,2
     2b0:	29662b04 	addi	r5,r5,-26452
     2b4:	1009883a 	mov	r4,r2
     2b8:	0000cc80 	call	cc8 <fprintf>
  KEY0_flag, KEY1_flag, KEY2_flag, KEY3_flag = 0, 0, 0, 0;
     2bc:	d027df15 	stw	zero,-24708(gp)

  for (;;) {
    OSSemPend(SEM_read_KEYs, 0, &err);
     2c0:	d0a7d517 	ldw	r2,-24748(gp)
     2c4:	d1a7dd04 	addi	r6,gp,-24716
     2c8:	000b883a 	mov	r5,zero
     2cc:	1009883a 	mov	r4,r2
     2d0:	00136340 	call	13634 <OSSemPend>

    debug("%u: \tHello from Task_read_KEYs", OSTime);
     2d4:	d0a00317 	ldw	r2,-32756(gp)
     2d8:	10c00317 	ldw	r3,12(r2)
     2dc:	d0a80117 	ldw	r2,-24572(gp)
     2e0:	d8800015 	stw	r2,0(sp)
     2e4:	01c00bc4 	movi	r7,47
     2e8:	018000b4 	movhi	r6,2
     2ec:	31a62704 	addi	r6,r6,-26468
     2f0:	014000b4 	movhi	r5,2
     2f4:	29663504 	addi	r5,r5,-26412
     2f8:	1809883a 	mov	r4,r3
     2fc:	0000cc80 	call	cc8 <fprintf>
    Check_KEYs(&KEY0_flag, &KEY1_flag, &KEY2_flag, &KEY3_flag);
     300:	d1e7df04 	addi	r7,gp,-24708
     304:	d1a7d604 	addi	r6,gp,-24744
     308:	d167db04 	addi	r5,gp,-24724
     30c:	d127e004 	addi	r4,gp,-24704
     310:	00007240 	call	724 <Check_KEYs>
    VGA_text(pos_x, pos_y, clear_text); /* clearing previous text */
     314:	d0a7de17 	ldw	r2,-24712(gp)
     318:	d0e7dc17 	ldw	r3,-24720(gp)
     31c:	d1a00104 	addi	r6,gp,-32764
     320:	180b883a 	mov	r5,r3
     324:	1009883a 	mov	r4,r2
     328:	000088c0 	call	88c <VGA_text>

    if (KEY0_flag) {
     32c:	d0a7e017 	ldw	r2,-24704(gp)
     330:	10000d26 	beq	r2,zero,368 <Task_read_KEYs+0xe4>
      debug("MOVE RIGHT");
     334:	d0a00317 	ldw	r2,-32756(gp)
     338:	10800317 	ldw	r2,12(r2)
     33c:	01c00d04 	movi	r7,52
     340:	018000b4 	movhi	r6,2
     344:	31a62704 	addi	r6,r6,-26468
     348:	014000b4 	movhi	r5,2
     34c:	29664104 	addi	r5,r5,-26364
     350:	1009883a 	mov	r4,r2
     354:	0000cc80 	call	cc8 <fprintf>
      ++pos_x;
     358:	d0a7de17 	ldw	r2,-24712(gp)
     35c:	10800044 	addi	r2,r2,1
     360:	d0a7de15 	stw	r2,-24712(gp)
      KEY0_flag = 0;
     364:	d027e015 	stw	zero,-24704(gp)
    }

    if (KEY1_flag) {
     368:	d0a7db17 	ldw	r2,-24724(gp)
     36c:	10000d26 	beq	r2,zero,3a4 <Task_read_KEYs+0x120>
      debug("MOVE DOWN");
     370:	d0a00317 	ldw	r2,-32756(gp)
     374:	10800317 	ldw	r2,12(r2)
     378:	01c00e84 	movi	r7,58
     37c:	018000b4 	movhi	r6,2
     380:	31a62704 	addi	r6,r6,-26468
     384:	014000b4 	movhi	r5,2
     388:	29664804 	addi	r5,r5,-26336
     38c:	1009883a 	mov	r4,r2
     390:	0000cc80 	call	cc8 <fprintf>
      ++pos_y;
     394:	d0a7dc17 	ldw	r2,-24720(gp)
     398:	10800044 	addi	r2,r2,1
     39c:	d0a7dc15 	stw	r2,-24720(gp)
      KEY1_flag = 0;
     3a0:	d027db15 	stw	zero,-24724(gp)
    }

    if (KEY2_flag) {
     3a4:	d0a7d617 	ldw	r2,-24744(gp)
     3a8:	10000d26 	beq	r2,zero,3e0 <Task_read_KEYs+0x15c>
      debug("MOVE UP");
     3ac:	d0a00317 	ldw	r2,-32756(gp)
     3b0:	10800317 	ldw	r2,12(r2)
     3b4:	01c01004 	movi	r7,64
     3b8:	018000b4 	movhi	r6,2
     3bc:	31a62704 	addi	r6,r6,-26468
     3c0:	014000b4 	movhi	r5,2
     3c4:	29664e04 	addi	r5,r5,-26312
     3c8:	1009883a 	mov	r4,r2
     3cc:	0000cc80 	call	cc8 <fprintf>
      --pos_y;
     3d0:	d0a7dc17 	ldw	r2,-24720(gp)
     3d4:	10bfffc4 	addi	r2,r2,-1
     3d8:	d0a7dc15 	stw	r2,-24720(gp)
      KEY2_flag = 0;
     3dc:	d027d615 	stw	zero,-24744(gp)
    }

    if (KEY3_flag) {
     3e0:	d0a7df17 	ldw	r2,-24708(gp)
     3e4:	10000d26 	beq	r2,zero,41c <Task_read_KEYs+0x198>
      debug("MOVE LEFT");
     3e8:	d0a00317 	ldw	r2,-32756(gp)
     3ec:	10800317 	ldw	r2,12(r2)
     3f0:	01c01184 	movi	r7,70
     3f4:	018000b4 	movhi	r6,2
     3f8:	31a62704 	addi	r6,r6,-26468
     3fc:	014000b4 	movhi	r5,2
     400:	29665404 	addi	r5,r5,-26288
     404:	1009883a 	mov	r4,r2
     408:	0000cc80 	call	cc8 <fprintf>
      --pos_x;
     40c:	d0a7de17 	ldw	r2,-24712(gp)
     410:	10bfffc4 	addi	r2,r2,-1
     414:	d0a7de15 	stw	r2,-24712(gp)
      KEY3_flag = 0;
     418:	d027df15 	stw	zero,-24708(gp)
    }

    OSSemPost(SEM_read_KEYs);
     41c:	d0a7d517 	ldw	r2,-24748(gp)
     420:	1009883a 	mov	r4,r2
     424:	00139ac0 	call	139ac <OSSemPost>
    OSTimeDly(1);
     428:	01000044 	movi	r4,1
     42c:	00154380 	call	15438 <OSTimeDly>
  }
     430:	003fa306 	br	2c0 <Task_read_KEYs+0x3c>

00000434 <Task_VGA_char>:
}

/* Display Character using VGA Output */
void
Task_VGA_char(void* pdata)
{
     434:	defffc04 	addi	sp,sp,-16
     438:	dfc00315 	stw	ra,12(sp)
     43c:	df000215 	stw	fp,8(sp)
     440:	df000204 	addi	fp,sp,8
     444:	e13fff15 	stw	r4,-4(fp)
  debug("Started: Task_VGA_char");
     448:	d0a00317 	ldw	r2,-32756(gp)
     44c:	10800317 	ldw	r2,12(r2)
     450:	01c01504 	movi	r7,84
     454:	018000b4 	movhi	r6,2
     458:	31a62704 	addi	r6,r6,-26468
     45c:	014000b4 	movhi	r5,2
     460:	29665a04 	addi	r5,r5,-26264
     464:	1009883a 	mov	r4,r2
     468:	0000cc80 	call	cc8 <fprintf>

  for (;;) {
    debug("%u: \tHello from Task_VGA_char", OSTime);
     46c:	d0a00317 	ldw	r2,-32756(gp)
     470:	10c00317 	ldw	r3,12(r2)
     474:	d0a80117 	ldw	r2,-24572(gp)
     478:	d8800015 	stw	r2,0(sp)
     47c:	01c015c4 	movi	r7,87
     480:	018000b4 	movhi	r6,2
     484:	31a62704 	addi	r6,r6,-26468
     488:	014000b4 	movhi	r5,2
     48c:	29666404 	addi	r5,r5,-26224
     490:	1809883a 	mov	r4,r3
     494:	0000cc80 	call	cc8 <fprintf>
    VGA_text(pos_x, pos_y, text_disp);
     498:	d0a7de17 	ldw	r2,-24712(gp)
     49c:	d0e7dc17 	ldw	r3,-24720(gp)
     4a0:	d1a00004 	addi	r6,gp,-32768
     4a4:	180b883a 	mov	r5,r3
     4a8:	1009883a 	mov	r4,r2
     4ac:	000088c0 	call	88c <VGA_text>

    OSTimeDly(1);
     4b0:	01000044 	movi	r4,1
     4b4:	00154380 	call	15438 <OSTimeDly>
  }
     4b8:	003fec06 	br	46c <Task_VGA_char+0x38>

000004bc <main>:
}

/* The main function creates two task and starts multi-tasking */
int
main(void)
{
     4bc:	defff604 	addi	sp,sp,-40
     4c0:	dfc00915 	stw	ra,36(sp)
     4c4:	df000815 	stw	fp,32(sp)
     4c8:	df000804 	addi	fp,sp,32

  /* ***************************** Initialization *****************************
   */

  KEY0_flag, KEY1_flag, KEY2_flag, KEY3_flag = 0, 0, 0, 0;
     4cc:	d027df15 	stw	zero,-24708(gp)

  /* ************************ Semaphores Initialization ***********************
   */

  SEM_read_KEYs = OSSemCreate(1);
     4d0:	01000044 	movi	r4,1
     4d4:	001331c0 	call	1331c <OSSemCreate>
     4d8:	d0a7d515 	stw	r2,-24748(gp)

  /* **************************** VGA Display Setup ***************************
   */

  video_resolution = (int*)(PIXEL_BUF_CTRL_BASE + 0x8);
     4dc:	00bfc834 	movhi	r2,65312
     4e0:	108c0a04 	addi	r2,r2,12328
     4e4:	d0a7d315 	stw	r2,-24756(gp)
  rgb_status = (int*)(RGB_RESAMPLER_BASE);
     4e8:	00bfc834 	movhi	r2,65312
     4ec:	108c0404 	addi	r2,r2,12304
     4f0:	d0a7e115 	stw	r2,-24700(gp)

  screen_x = *video_resolution & 0xFFFF;
     4f4:	d0a7d317 	ldw	r2,-24756(gp)
     4f8:	10800017 	ldw	r2,0(r2)
     4fc:	10bfffcc 	andi	r2,r2,65535
     500:	d0a7d415 	stw	r2,-24752(gp)
  screen_y = (*video_resolution >> 16) & 0xFFFF;
     504:	d0a7d317 	ldw	r2,-24756(gp)
     508:	10800017 	ldw	r2,0(r2)
     50c:	1004d43a 	srli	r2,r2,16
     510:	d0a7da15 	stw	r2,-24728(gp)

  /* letter initially positioned at the centre of screen */
  pos_x = 40;
     514:	00800a04 	movi	r2,40
     518:	d0a7de15 	stw	r2,-24712(gp)
  pos_y = 30;
     51c:	00800784 	movi	r2,30
     520:	d0a7dc15 	stw	r2,-24720(gp)

  int db = get_data_bits(*rgb_status & 0x3F);
     524:	d0a7e117 	ldw	r2,-24700(gp)
     528:	10800017 	ldw	r2,0(r2)
     52c:	10800fcc 	andi	r2,r2,63
     530:	1009883a 	mov	r4,r2
     534:	0000b100 	call	b10 <get_data_bits>
     538:	e0bffe15 	stw	r2,-8(fp)

  /* check if resolution is smaller than the standard 320 x 240 */
  res_offset = (screen_x == 160) ? 1 : 0;
     53c:	d0a7d417 	ldw	r2,-24752(gp)
     540:	10802820 	cmpeqi	r2,r2,160
     544:	10803fcc 	andi	r2,r2,255
     548:	d0a7d915 	stw	r2,-24732(gp)

  /* check if number of data bits is less than the standard 16-bits */
  col_offset = (db == 8) ? 1 : 0;
     54c:	e0bffe17 	ldw	r2,-8(fp)
     550:	10800220 	cmpeqi	r2,r2,8
     554:	10803fcc 	andi	r2,r2,255
     558:	d0a7d715 	stw	r2,-24740(gp)

  /* update color */
  short background_color = resample_rgb(db, INTEL_BLUE);
     55c:	015c7144 	movi	r5,29125
     560:	e13ffe17 	ldw	r4,-8(fp)
     564:	0000a580 	call	a58 <resample_rgb>
     568:	e0bfff0d 	sth	r2,-4(fp)

  /* clearing all characters from the screen */
  for (int i = 0; i < 60; i++)
     56c:	e03ffd15 	stw	zero,-12(fp)
     570:	00000806 	br	594 <main+0xd8>
    VGA_text(0, i, clear_row_text);
     574:	018000b4 	movhi	r6,2
     578:	31a61204 	addi	r6,r6,-26552
     57c:	e17ffd17 	ldw	r5,-12(fp)
     580:	0009883a 	mov	r4,zero
     584:	000088c0 	call	88c <VGA_text>

  /* update color */
  short background_color = resample_rgb(db, INTEL_BLUE);

  /* clearing all characters from the screen */
  for (int i = 0; i < 60; i++)
     588:	e0bffd17 	ldw	r2,-12(fp)
     58c:	10800044 	addi	r2,r2,1
     590:	e0bffd15 	stw	r2,-12(fp)
     594:	e0bffd17 	ldw	r2,-12(fp)
     598:	10800f10 	cmplti	r2,r2,60
     59c:	103ff51e 	bne	r2,zero,574 <main+0xb8>
    VGA_text(0, i, clear_row_text);

  /* displaying character for the first time */
  VGA_text(pos_x, pos_y, text_disp);
     5a0:	d0a7de17 	ldw	r2,-24712(gp)
     5a4:	d0e7dc17 	ldw	r3,-24720(gp)
     5a8:	d1a00004 	addi	r6,gp,-32768
     5ac:	180b883a 	mov	r5,r3
     5b0:	1009883a 	mov	r4,r2
     5b4:	000088c0 	call	88c <VGA_text>

  VGA_box(0, 0, STANDARD_X, STANDARD_Y, 0); // clear the screen
     5b8:	d8000015 	stw	zero,0(sp)
     5bc:	01c03c04 	movi	r7,240
     5c0:	01805004 	movi	r6,320
     5c4:	000b883a 	mov	r5,zero
     5c8:	0009883a 	mov	r4,zero
     5cc:	00009200 	call	920 <VGA_box>
  VGA_box(31 * 4, 28 * 4, 49 * 4 - 1, 32 * 4 - 1, background_color);
     5d0:	e0bfff0f 	ldh	r2,-4(fp)
     5d4:	d8800015 	stw	r2,0(sp)
     5d8:	01c01fc4 	movi	r7,127
     5dc:	018030c4 	movi	r6,195
     5e0:	01401c04 	movi	r5,112
     5e4:	01001f04 	movi	r4,124
     5e8:	00009200 	call	920 <VGA_box>

  /* **************************************************************************
   */

  printf("MicroC/OS-II Licensing Terms\n");
     5ec:	010000b4 	movhi	r4,2
     5f0:	21266f04 	addi	r4,r4,-26180
     5f4:	0000dac0 	call	dac <puts>
  printf("============================\n");
     5f8:	010000b4 	movhi	r4,2
     5fc:	21267704 	addi	r4,r4,-26148
     600:	0000dac0 	call	dac <puts>

  printf("Micrium\'s uC/OS-II is a real-time operating system (RTOS) available "
     604:	010000b4 	movhi	r4,2
     608:	21267f04 	addi	r4,r4,-26116
     60c:	0000dac0 	call	dac <puts>
         "in source code.\n");

  printf("This is not open-source software.\n");
     610:	010000b4 	movhi	r4,2
     614:	21269404 	addi	r4,r4,-26032
     618:	0000dac0 	call	dac <puts>

  printf("This RTOS can be used free of charge only for non-commercial "
     61c:	010000b4 	movhi	r4,2
     620:	21269d04 	addi	r4,r4,-25996
     624:	0000dac0 	call	dac <puts>
         "purposes and academic projects,\n");

  printf("any other use of the code is subject to the terms of an end-user "
     628:	010000b4 	movhi	r4,2
     62c:	2126b504 	addi	r4,r4,-25900
     630:	0000dac0 	call	dac <puts>
         "license agreement\n");

  printf("for more information please see the license files included in the "
     634:	010000b4 	movhi	r4,2
     638:	2126ca04 	addi	r4,r4,-25816
     63c:	0000dac0 	call	dac <puts>
         "BSP project or contact Micrium.\n");

  printf("Anyone planning to use a Micrium RTOS in a commercial product must "
     640:	010000b4 	movhi	r4,2
     644:	2126e304 	addi	r4,r4,-25716
     648:	0000dac0 	call	dac <puts>
         "purchase a commercial license\n");

  printf("from the owner of the software, Silicon Laboratories Inc.\n");
     64c:	010000b4 	movhi	r4,2
     650:	2126fc04 	addi	r4,r4,-25616
     654:	0000dac0 	call	dac <puts>

  printf("Licensing information is available at:\n");
     658:	010000b4 	movhi	r4,2
     65c:	21270b04 	addi	r4,r4,-25556
     660:	0000dac0 	call	dac <puts>

  printf("Phone: +1 954-217-2036\n");
     664:	010000b4 	movhi	r4,2
     668:	21271504 	addi	r4,r4,-25516
     66c:	0000dac0 	call	dac <puts>

  printf("Email: sales@micrium.com\n");
     670:	010000b4 	movhi	r4,2
     674:	21271b04 	addi	r4,r4,-25492
     678:	0000dac0 	call	dac <puts>

  printf("URL: www.micrium.com\n\n\n");
     67c:	010000b4 	movhi	r4,2
     680:	21272204 	addi	r4,r4,-25464
     684:	0000dac0 	call	dac <puts>

  OSTaskCreateExt(Task_read_KEYs,
     688:	d8000415 	stw	zero,16(sp)
     68c:	d8000315 	stw	zero,12(sp)
     690:	00820004 	movi	r2,2048
     694:	d8800215 	stw	r2,8(sp)
     698:	008000b4 	movhi	r2,2
     69c:	10b82b04 	addi	r2,r2,-8020
     6a0:	d8800115 	stw	r2,4(sp)
     6a4:	00800044 	movi	r2,1
     6a8:	d8800015 	stw	r2,0(sp)
     6ac:	01c00044 	movi	r7,1
     6b0:	018000b4 	movhi	r6,2
     6b4:	31802a04 	addi	r6,r6,168
     6b8:	000b883a 	mov	r5,zero
     6bc:	01000034 	movhi	r4,0
     6c0:	2100a104 	addi	r4,r4,644
     6c4:	00143680 	call	14368 <OSTaskCreateExt>
                  task_key_press_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(Task_VGA_char,
     6c8:	d8000415 	stw	zero,16(sp)
     6cc:	d8000315 	stw	zero,12(sp)
     6d0:	00820004 	movi	r2,2048
     6d4:	d8800215 	stw	r2,8(sp)
     6d8:	008000b4 	movhi	r2,2
     6dc:	10802b04 	addi	r2,r2,172
     6e0:	d8800115 	stw	r2,4(sp)
     6e4:	00800084 	movi	r2,2
     6e8:	d8800015 	stw	r2,0(sp)
     6ec:	01c00084 	movi	r7,2
     6f0:	018000b4 	movhi	r6,2
     6f4:	31882a04 	addi	r6,r6,8360
     6f8:	000b883a 	mov	r5,zero
     6fc:	01000034 	movhi	r4,0
     700:	21010d04 	addi	r4,r4,1076
     704:	00143680 	call	14368 <OSTaskCreateExt>
                  TASK_VGA_CHAR_PRIORITY,
                  task_disp_vga_char_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSStart();
     708:	000ed600 	call	ed60 <OSStart>
  return 0;
     70c:	0005883a 	mov	r2,zero
}
     710:	e037883a 	mov	sp,fp
     714:	dfc00117 	ldw	ra,4(sp)
     718:	df000017 	ldw	fp,0(sp)
     71c:	dec00204 	addi	sp,sp,8
     720:	f800283a 	ret

00000724 <Check_KEYs>:
extern unsigned KEY_val;
extern int KEY0_flag, KEY1_flag, KEY2_flag, KEY3_flag;

void
Check_KEYs(int* KEY0_ptr, int* KEY1_ptr, int* KEY2_ptr, int* KEY3_ptr)
{
     724:	defff904 	addi	sp,sp,-28
     728:	dfc00615 	stw	ra,24(sp)
     72c:	df000515 	stw	fp,20(sp)
     730:	df000504 	addi	fp,sp,20
     734:	e13ffc15 	stw	r4,-16(fp)
     738:	e17ffd15 	stw	r5,-12(fp)
     73c:	e1bffe15 	stw	r6,-8(fp)
     740:	e1ffff15 	stw	r7,-4(fp)

  KEY_val = *(KEY_ptr);
     744:	00bfc834 	movhi	r2,65312
     748:	10801404 	addi	r2,r2,80
     74c:	10800017 	ldw	r2,0(r2)
     750:	d0a7d815 	stw	r2,-24736(gp)

  if (KEY_val == KEY0) {
     754:	d0a7d817 	ldw	r2,-24736(gp)
     758:	10800058 	cmpnei	r2,r2,1
     75c:	10000c1e 	bne	r2,zero,790 <Check_KEYs+0x6c>
    debug("KEY0 Pressed!"); // check KEY0
     760:	d0a00317 	ldw	r2,-32756(gp)
     764:	10800317 	ldw	r2,12(r2)
     768:	01c00544 	movi	r7,21
     76c:	018000b4 	movhi	r6,2
     770:	31a72804 	addi	r6,r6,-25440
     774:	014000b4 	movhi	r5,2
     778:	29672a04 	addi	r5,r5,-25432
     77c:	1009883a 	mov	r4,r2
     780:	0000cc80 	call	cc8 <fprintf>
    KEY0_flag = 1;
     784:	00800044 	movi	r2,1
     788:	d0a7e015 	stw	r2,-24704(gp)
     78c:	00002c06 	br	840 <Check_KEYs+0x11c>
  } else if (KEY_val == KEY1) // check KEY1
     790:	d0a7d817 	ldw	r2,-24736(gp)
     794:	10800098 	cmpnei	r2,r2,2
     798:	10000c1e 	bne	r2,zero,7cc <Check_KEYs+0xa8>
  {
    debug("KEY1 Pressed!");
     79c:	d0a00317 	ldw	r2,-32756(gp)
     7a0:	10800317 	ldw	r2,12(r2)
     7a4:	01c00644 	movi	r7,25
     7a8:	018000b4 	movhi	r6,2
     7ac:	31a72804 	addi	r6,r6,-25440
     7b0:	014000b4 	movhi	r5,2
     7b4:	29673104 	addi	r5,r5,-25404
     7b8:	1009883a 	mov	r4,r2
     7bc:	0000cc80 	call	cc8 <fprintf>
    KEY1_flag = 1;
     7c0:	00800044 	movi	r2,1
     7c4:	d0a7db15 	stw	r2,-24724(gp)
     7c8:	00001d06 	br	840 <Check_KEYs+0x11c>
  } else if (KEY_val == KEY2) // check KEY2
     7cc:	d0a7d817 	ldw	r2,-24736(gp)
     7d0:	10800118 	cmpnei	r2,r2,4
     7d4:	10000c1e 	bne	r2,zero,808 <Check_KEYs+0xe4>
  {
    debug("KEY2 Pressed!");
     7d8:	d0a00317 	ldw	r2,-32756(gp)
     7dc:	10800317 	ldw	r2,12(r2)
     7e0:	01c00744 	movi	r7,29
     7e4:	018000b4 	movhi	r6,2
     7e8:	31a72804 	addi	r6,r6,-25440
     7ec:	014000b4 	movhi	r5,2
     7f0:	29673804 	addi	r5,r5,-25376
     7f4:	1009883a 	mov	r4,r2
     7f8:	0000cc80 	call	cc8 <fprintf>
    KEY2_flag = 1;
     7fc:	00800044 	movi	r2,1
     800:	d0a7d615 	stw	r2,-24744(gp)
     804:	00000e06 	br	840 <Check_KEYs+0x11c>
  } else if (KEY_val == KEY3) // check KEY3
     808:	d0a7d817 	ldw	r2,-24736(gp)
     80c:	10800218 	cmpnei	r2,r2,8
     810:	10000b1e 	bne	r2,zero,840 <Check_KEYs+0x11c>
  {
    debug("KEY3 Pressed!");
     814:	d0a00317 	ldw	r2,-32756(gp)
     818:	10800317 	ldw	r2,12(r2)
     81c:	01c00844 	movi	r7,33
     820:	018000b4 	movhi	r6,2
     824:	31a72804 	addi	r6,r6,-25440
     828:	014000b4 	movhi	r5,2
     82c:	29673f04 	addi	r5,r5,-25348
     830:	1009883a 	mov	r4,r2
     834:	0000cc80 	call	cc8 <fprintf>
    KEY3_flag = 1;
     838:	00800044 	movi	r2,1
     83c:	d0a7df15 	stw	r2,-24708(gp)
  }

  if (KEY_val)
     840:	d0a7d817 	ldw	r2,-24736(gp)
     844:	10000b26 	beq	r2,zero,874 <Check_KEYs+0x150>
    debug("KEY_value: %d", KEY_val);
     848:	d0a00317 	ldw	r2,-32756(gp)
     84c:	10c00317 	ldw	r3,12(r2)
     850:	d0a7d817 	ldw	r2,-24736(gp)
     854:	d8800015 	stw	r2,0(sp)
     858:	01c00984 	movi	r7,38
     85c:	018000b4 	movhi	r6,2
     860:	31a72804 	addi	r6,r6,-25440
     864:	014000b4 	movhi	r5,2
     868:	29674604 	addi	r5,r5,-25320
     86c:	1809883a 	mov	r4,r3
     870:	0000cc80 	call	cc8 <fprintf>
    
}
     874:	0001883a 	nop
     878:	e037883a 	mov	sp,fp
     87c:	dfc00117 	ldw	ra,4(sp)
     880:	df000017 	ldw	fp,0(sp)
     884:	dec00204 	addi	sp,sp,8
     888:	f800283a 	ret

0000088c <VGA_text>:
/*******************************************************************************
 * Subroutine to send a string of text to the video monitor
 ******************************************************************************/
void
VGA_text(int x, int y, char* text_ptr)
{
     88c:	defffa04 	addi	sp,sp,-24
     890:	df000515 	stw	fp,20(sp)
     894:	df000504 	addi	fp,sp,20
     898:	e13ffd15 	stw	r4,-12(fp)
     89c:	e17ffe15 	stw	r5,-8(fp)
     8a0:	e1bfff15 	stw	r6,-4(fp)
  int offset;
  volatile char* char_buf = (char*)FPGA_CHAR_BASE; // video character buffer
     8a4:	00824034 	movhi	r2,2304
     8a8:	e0bffc15 	stw	r2,-16(fp)

  /* assume that the text string fits on one line */
  offset = (y << 7) + x;
     8ac:	e0bffe17 	ldw	r2,-8(fp)
     8b0:	100691fa 	slli	r3,r2,7
     8b4:	e0bffd17 	ldw	r2,-12(fp)
     8b8:	1885883a 	add	r2,r3,r2
     8bc:	e0bffb15 	stw	r2,-20(fp)
  while (*(text_ptr)) {
     8c0:	00000c06 	br	8f4 <VGA_text+0x68>
    *(char_buf + offset) = *(text_ptr); // write to the character buffer
     8c4:	e0bffb17 	ldw	r2,-20(fp)
     8c8:	e0fffc17 	ldw	r3,-16(fp)
     8cc:	1885883a 	add	r2,r3,r2
     8d0:	e0ffff17 	ldw	r3,-4(fp)
     8d4:	18c00003 	ldbu	r3,0(r3)
     8d8:	10c00005 	stb	r3,0(r2)
    ++text_ptr;
     8dc:	e0bfff17 	ldw	r2,-4(fp)
     8e0:	10800044 	addi	r2,r2,1
     8e4:	e0bfff15 	stw	r2,-4(fp)
    ++offset;
     8e8:	e0bffb17 	ldw	r2,-20(fp)
     8ec:	10800044 	addi	r2,r2,1
     8f0:	e0bffb15 	stw	r2,-20(fp)
  int offset;
  volatile char* char_buf = (char*)FPGA_CHAR_BASE; // video character buffer

  /* assume that the text string fits on one line */
  offset = (y << 7) + x;
  while (*(text_ptr)) {
     8f4:	e0bfff17 	ldw	r2,-4(fp)
     8f8:	10800003 	ldbu	r2,0(r2)
     8fc:	10803fcc 	andi	r2,r2,255
     900:	1080201c 	xori	r2,r2,128
     904:	10bfe004 	addi	r2,r2,-128
     908:	103fee1e 	bne	r2,zero,8c4 <VGA_text+0x38>
    *(char_buf + offset) = *(text_ptr); // write to the character buffer
    ++text_ptr;
    ++offset;
  }
}
     90c:	0001883a 	nop
     910:	e037883a 	mov	sp,fp
     914:	df000017 	ldw	fp,0(sp)
     918:	dec00104 	addi	sp,sp,4
     91c:	f800283a 	ret

00000920 <VGA_box>:
 * Takes in points assuming 320x240 resolution and adjusts based on differences
 * in resolution and color bits.
 ******************************************************************************/
void
VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
     920:	defff404 	addi	sp,sp,-48
     924:	df000b15 	stw	fp,44(sp)
     928:	df000b04 	addi	fp,sp,44
     92c:	e13ffb15 	stw	r4,-20(fp)
     930:	e17ffc15 	stw	r5,-16(fp)
     934:	e1bffd15 	stw	r6,-12(fp)
     938:	e1fffe15 	stw	r7,-8(fp)
     93c:	e0800117 	ldw	r2,4(fp)
     940:	e0bfff0d 	sth	r2,-4(fp)
  int pixel_buf_ptr = *(int*)PIXEL_BUF_CTRL_BASE;
     944:	00bfc834 	movhi	r2,65312
     948:	108c0804 	addi	r2,r2,12320
     94c:	10800017 	ldw	r2,0(r2)
     950:	e0bff715 	stw	r2,-36(fp)
  int pixel_ptr, row, col;

  int x_factor = 0x1 << (res_offset + col_offset);
     954:	d0e7d917 	ldw	r3,-24732(gp)
     958:	d0a7d717 	ldw	r2,-24740(gp)
     95c:	1885883a 	add	r2,r3,r2
     960:	00c00044 	movi	r3,1
     964:	1884983a 	sll	r2,r3,r2
     968:	e0bff815 	stw	r2,-32(fp)
  int y_factor = 0x1 << (res_offset);
     96c:	d0a7d917 	ldw	r2,-24732(gp)
     970:	00c00044 	movi	r3,1
     974:	1884983a 	sll	r2,r3,r2
     978:	e0bff915 	stw	r2,-28(fp)

  x1 = x1 / x_factor;
     97c:	e0fffb17 	ldw	r3,-20(fp)
     980:	e0bff817 	ldw	r2,-32(fp)
     984:	1885283a 	div	r2,r3,r2
     988:	e0bffb15 	stw	r2,-20(fp)
  x2 = x2 / x_factor;
     98c:	e0fffd17 	ldw	r3,-12(fp)
     990:	e0bff817 	ldw	r2,-32(fp)
     994:	1885283a 	div	r2,r3,r2
     998:	e0bffd15 	stw	r2,-12(fp)
  y1 = y1 / y_factor;
     99c:	e0fffc17 	ldw	r3,-16(fp)
     9a0:	e0bff917 	ldw	r2,-28(fp)
     9a4:	1885283a 	div	r2,r3,r2
     9a8:	e0bffc15 	stw	r2,-16(fp)
  y2 = y2 / y_factor;
     9ac:	e0fffe17 	ldw	r3,-8(fp)
     9b0:	e0bff917 	ldw	r2,-28(fp)
     9b4:	1885283a 	div	r2,r3,r2
     9b8:	e0bffe15 	stw	r2,-8(fp)

  /* assume that the box coordinates are valid */
  for (row = y1; row <= y2; row++)
     9bc:	e0bffc17 	ldw	r2,-16(fp)
     9c0:	e0bff515 	stw	r2,-44(fp)
     9c4:	00001c06 	br	a38 <VGA_box+0x118>
    for (col = x1; col <= x2; ++col) {
     9c8:	e0bffb17 	ldw	r2,-20(fp)
     9cc:	e0bff615 	stw	r2,-40(fp)
     9d0:	00001306 	br	a20 <VGA_box+0x100>
      pixel_ptr =
        pixel_buf_ptr + (row << (10 - res_offset - col_offset)) + (col << 1);
     9d4:	d0a7d917 	ldw	r2,-24732(gp)
     9d8:	00c00284 	movi	r3,10
     9dc:	1887c83a 	sub	r3,r3,r2
     9e0:	d0a7d717 	ldw	r2,-24740(gp)
     9e4:	1885c83a 	sub	r2,r3,r2
     9e8:	e0fff517 	ldw	r3,-44(fp)
     9ec:	1886983a 	sll	r3,r3,r2
     9f0:	e0bff717 	ldw	r2,-36(fp)
     9f4:	1887883a 	add	r3,r3,r2
     9f8:	e0bff617 	ldw	r2,-40(fp)
     9fc:	1085883a 	add	r2,r2,r2
  y2 = y2 / y_factor;

  /* assume that the box coordinates are valid */
  for (row = y1; row <= y2; row++)
    for (col = x1; col <= x2; ++col) {
      pixel_ptr =
     a00:	1885883a 	add	r2,r3,r2
     a04:	e0bffa15 	stw	r2,-24(fp)
        pixel_buf_ptr + (row << (10 - res_offset - col_offset)) + (col << 1);
      *(short*)pixel_ptr = pixel_color; // set pixel color
     a08:	e0bffa17 	ldw	r2,-24(fp)
     a0c:	e0ffff0b 	ldhu	r3,-4(fp)
     a10:	10c0000d 	sth	r3,0(r2)
  y1 = y1 / y_factor;
  y2 = y2 / y_factor;

  /* assume that the box coordinates are valid */
  for (row = y1; row <= y2; row++)
    for (col = x1; col <= x2; ++col) {
     a14:	e0bff617 	ldw	r2,-40(fp)
     a18:	10800044 	addi	r2,r2,1
     a1c:	e0bff615 	stw	r2,-40(fp)
     a20:	e0bff617 	ldw	r2,-40(fp)
     a24:	e0fffd17 	ldw	r3,-12(fp)
     a28:	18bfea0e 	bge	r3,r2,9d4 <VGA_box+0xb4>
  x2 = x2 / x_factor;
  y1 = y1 / y_factor;
  y2 = y2 / y_factor;

  /* assume that the box coordinates are valid */
  for (row = y1; row <= y2; row++)
     a2c:	e0bff517 	ldw	r2,-44(fp)
     a30:	10800044 	addi	r2,r2,1
     a34:	e0bff515 	stw	r2,-44(fp)
     a38:	e0bff517 	ldw	r2,-44(fp)
     a3c:	e0fffe17 	ldw	r3,-8(fp)
     a40:	18bfe10e 	bge	r3,r2,9c8 <VGA_box+0xa8>
    for (col = x1; col <= x2; ++col) {
      pixel_ptr =
        pixel_buf_ptr + (row << (10 - res_offset - col_offset)) + (col << 1);
      *(short*)pixel_ptr = pixel_color; // set pixel color
    }
}
     a44:	0001883a 	nop
     a48:	e037883a 	mov	sp,fp
     a4c:	df000017 	ldw	fp,0(sp)
     a50:	dec00104 	addi	sp,sp,4
     a54:	f800283a 	ret

00000a58 <resample_rgb>:
/* ************************************************************************** */
/*               Resamples 24-bit color to 16-bit or 8-bit color              */
/* ************************************************************************** */
int
resample_rgb(int num_bits, int color)
{
     a58:	defffd04 	addi	sp,sp,-12
     a5c:	df000215 	stw	fp,8(sp)
     a60:	df000204 	addi	fp,sp,8
     a64:	e13ffe15 	stw	r4,-8(fp)
     a68:	e17fff15 	stw	r5,-4(fp)
  if (num_bits == 8) {
     a6c:	e0bffe17 	ldw	r2,-8(fp)
     a70:	10800218 	cmpnei	r2,r2,8
     a74:	1000121e 	bne	r2,zero,ac0 <resample_rgb+0x68>

    color = (((color >> 16) & 0x000000E0) | ((color >> 11) & 0x0000001C) |
     a78:	e0bfff17 	ldw	r2,-4(fp)
     a7c:	1005d43a 	srai	r2,r2,16
     a80:	10c0380c 	andi	r3,r2,224
     a84:	e0bfff17 	ldw	r2,-4(fp)
     a88:	1005d2fa 	srai	r2,r2,11
     a8c:	1080070c 	andi	r2,r2,28
     a90:	1886b03a 	or	r3,r3,r2
             ((color >> 6) & 0x00000003));
     a94:	e0bfff17 	ldw	r2,-4(fp)
     a98:	1005d1ba 	srai	r2,r2,6
     a9c:	108000cc 	andi	r2,r2,3
int
resample_rgb(int num_bits, int color)
{
  if (num_bits == 8) {

    color = (((color >> 16) & 0x000000E0) | ((color >> 11) & 0x0000001C) |
     aa0:	1884b03a 	or	r2,r3,r2
     aa4:	e0bfff15 	stw	r2,-4(fp)
             ((color >> 6) & 0x00000003));

    color = (color << 8) | color;
     aa8:	e0bfff17 	ldw	r2,-4(fp)
     aac:	1004923a 	slli	r2,r2,8
     ab0:	e0ffff17 	ldw	r3,-4(fp)
     ab4:	1884b03a 	or	r2,r3,r2
     ab8:	e0bfff15 	stw	r2,-4(fp)
     abc:	00000f06 	br	afc <resample_rgb+0xa4>

  } else if (num_bits == 16) {
     ac0:	e0bffe17 	ldw	r2,-8(fp)
     ac4:	10800418 	cmpnei	r2,r2,16
     ac8:	10000c1e 	bne	r2,zero,afc <resample_rgb+0xa4>

    color = (((color >> 8) & 0x0000F800) | ((color >> 5) & 0x000007E0) |
     acc:	e0bfff17 	ldw	r2,-4(fp)
     ad0:	1005d23a 	srai	r2,r2,8
     ad4:	10fe000c 	andi	r3,r2,63488
     ad8:	e0bfff17 	ldw	r2,-4(fp)
     adc:	1005d17a 	srai	r2,r2,5
     ae0:	1081f80c 	andi	r2,r2,2016
     ae4:	1886b03a 	or	r3,r3,r2
             ((color >> 3) & 0x0000001F));
     ae8:	e0bfff17 	ldw	r2,-4(fp)
     aec:	1005d0fa 	srai	r2,r2,3
     af0:	108007cc 	andi	r2,r2,31

    color = (color << 8) | color;

  } else if (num_bits == 16) {

    color = (((color >> 8) & 0x0000F800) | ((color >> 5) & 0x000007E0) |
     af4:	1884b03a 	or	r2,r3,r2
     af8:	e0bfff15 	stw	r2,-4(fp)
             ((color >> 3) & 0x0000001F));
  }

  return color;
     afc:	e0bfff17 	ldw	r2,-4(fp)
}
     b00:	e037883a 	mov	sp,fp
     b04:	df000017 	ldw	fp,0(sp)
     b08:	dec00104 	addi	sp,sp,4
     b0c:	f800283a 	ret

00000b10 <get_data_bits>:
/*                 Finds the number of data bits from the mode                */
/* ************************************************************************** */

int
get_data_bits(int mode)
{
     b10:	defffe04 	addi	sp,sp,-8
     b14:	df000115 	stw	fp,4(sp)
     b18:	df000104 	addi	fp,sp,4
     b1c:	e13fff15 	stw	r4,-4(fp)
  switch (mode) {
     b20:	e0bfff17 	ldw	r2,-4(fp)
     b24:	10800ea8 	cmpgeui	r2,r2,58
     b28:	1000591e 	bne	r2,zero,c90 <get_data_bits+0x180>
     b2c:	e0bfff17 	ldw	r2,-4(fp)
     b30:	100690ba 	slli	r3,r2,2
     b34:	00800034 	movhi	r2,0
     b38:	1082d204 	addi	r2,r2,2888
     b3c:	1885883a 	add	r2,r3,r2
     b40:	10800017 	ldw	r2,0(r2)
     b44:	1000683a 	jmp	r2
     b48:	00000c30 	cmpltui	zero,zero,48
     b4c:	00000c90 	cmplti	zero,zero,50
     b50:	00000c90 	cmplti	zero,zero,50
     b54:	00000c90 	cmplti	zero,zero,50
     b58:	00000c90 	cmplti	zero,zero,50
     b5c:	00000c90 	cmplti	zero,zero,50
     b60:	00000c90 	cmplti	zero,zero,50
     b64:	00000c38 	rdprs	zero,zero,48
     b68:	00000c90 	cmplti	zero,zero,50
     b6c:	00000c90 	cmplti	zero,zero,50
     b70:	00000c90 	cmplti	zero,zero,50
     b74:	00000c90 	cmplti	zero,zero,50
     b78:	00000c90 	cmplti	zero,zero,50
     b7c:	00000c90 	cmplti	zero,zero,50
     b80:	00000c90 	cmplti	zero,zero,50
     b84:	00000c90 	cmplti	zero,zero,50
     b88:	00000c90 	cmplti	zero,zero,50
     b8c:	00000c40 	call	c4 <OSCtxSw_SWITCH_PC+0x84>
     b90:	00000c48 	cmpgei	zero,zero,49
     b94:	00000c90 	cmplti	zero,zero,50
     b98:	00000c50 	cmplti	zero,zero,49
     b9c:	00000c90 	cmplti	zero,zero,50
     ba0:	00000c90 	cmplti	zero,zero,50
     ba4:	00000c58 	cmpnei	zero,zero,49
     ba8:	00000c90 	cmplti	zero,zero,50
     bac:	00000c60 	cmpeqi	zero,zero,49
     bb0:	00000c90 	cmplti	zero,zero,50
     bb4:	00000c90 	cmplti	zero,zero,50
     bb8:	00000c90 	cmplti	zero,zero,50
     bbc:	00000c90 	cmplti	zero,zero,50
     bc0:	00000c90 	cmplti	zero,zero,50
     bc4:	00000c90 	cmplti	zero,zero,50
     bc8:	00000c90 	cmplti	zero,zero,50
     bcc:	00000c90 	cmplti	zero,zero,50
     bd0:	00000c90 	cmplti	zero,zero,50
     bd4:	00000c90 	cmplti	zero,zero,50
     bd8:	00000c90 	cmplti	zero,zero,50
     bdc:	00000c90 	cmplti	zero,zero,50
     be0:	00000c90 	cmplti	zero,zero,50
     be4:	00000c90 	cmplti	zero,zero,50
     be8:	00000c90 	cmplti	zero,zero,50
     bec:	00000c90 	cmplti	zero,zero,50
     bf0:	00000c90 	cmplti	zero,zero,50
     bf4:	00000c90 	cmplti	zero,zero,50
     bf8:	00000c90 	cmplti	zero,zero,50
     bfc:	00000c90 	cmplti	zero,zero,50
     c00:	00000c90 	cmplti	zero,zero,50
     c04:	00000c90 	cmplti	zero,zero,50
     c08:	00000c90 	cmplti	zero,zero,50
     c0c:	00000c68 	cmpgeui	zero,zero,49
     c10:	00000c70 	cmpltui	zero,zero,49
     c14:	00000c78 	rdprs	zero,zero,49
     c18:	00000c90 	cmplti	zero,zero,50
     c1c:	00000c90 	cmplti	zero,zero,50
     c20:	00000c90 	cmplti	zero,zero,50
     c24:	00000c80 	call	c8 <OSCtxSw_SWITCH_PC+0x88>
     c28:	00000c90 	cmplti	zero,zero,50
     c2c:	00000c88 	cmpgei	zero,zero,50
    case 0x0:
      return 1;
     c30:	00800044 	movi	r2,1
     c34:	00001606 	br	c90 <get_data_bits+0x180>
    case 0x7:
      return 8;
     c38:	00800204 	movi	r2,8
     c3c:	00001406 	br	c90 <get_data_bits+0x180>
    case 0x11:
      return 8;
     c40:	00800204 	movi	r2,8
     c44:	00001206 	br	c90 <get_data_bits+0x180>
    case 0x12:
      return 9;
     c48:	00800244 	movi	r2,9
     c4c:	00001006 	br	c90 <get_data_bits+0x180>
    case 0x14:
      return 16;
     c50:	00800404 	movi	r2,16
     c54:	00000e06 	br	c90 <get_data_bits+0x180>
    case 0x17:
      return 24;
     c58:	00800604 	movi	r2,24
     c5c:	00000c06 	br	c90 <get_data_bits+0x180>
    case 0x19:
      return 30;
     c60:	00800784 	movi	r2,30
     c64:	00000a06 	br	c90 <get_data_bits+0x180>
    case 0x31:
      return 8;
     c68:	00800204 	movi	r2,8
     c6c:	00000806 	br	c90 <get_data_bits+0x180>
    case 0x32:
      return 12;
     c70:	00800304 	movi	r2,12
     c74:	00000606 	br	c90 <get_data_bits+0x180>
    case 0x33:
      return 16;
     c78:	00800404 	movi	r2,16
     c7c:	00000406 	br	c90 <get_data_bits+0x180>
    case 0x37:
      return 32;
     c80:	00800804 	movi	r2,32
     c84:	00000206 	br	c90 <get_data_bits+0x180>
    case 0x39:
      return 40;
     c88:	00800a04 	movi	r2,40
     c8c:	00000006 	br	c90 <get_data_bits+0x180>
  }
}
     c90:	e037883a 	mov	sp,fp
     c94:	df000017 	ldw	fp,0(sp)
     c98:	dec00104 	addi	sp,sp,4
     c9c:	f800283a 	ret

00000ca0 <_fprintf_r>:
     ca0:	defffe04 	addi	sp,sp,-8
     ca4:	2809883a 	mov	r4,r5
     ca8:	300b883a 	mov	r5,r6
     cac:	dfc00015 	stw	ra,0(sp)
     cb0:	d9c00115 	stw	r7,4(sp)
     cb4:	d9800104 	addi	r6,sp,4
     cb8:	00030500 	call	3050 <__vfprintf_internal>
     cbc:	dfc00017 	ldw	ra,0(sp)
     cc0:	dec00204 	addi	sp,sp,8
     cc4:	f800283a 	ret

00000cc8 <fprintf>:
     cc8:	defffd04 	addi	sp,sp,-12
     ccc:	dfc00015 	stw	ra,0(sp)
     cd0:	d9800115 	stw	r6,4(sp)
     cd4:	d9c00215 	stw	r7,8(sp)
     cd8:	d9800104 	addi	r6,sp,4
     cdc:	00030500 	call	3050 <__vfprintf_internal>
     ce0:	dfc00017 	ldw	ra,0(sp)
     ce4:	dec00304 	addi	sp,sp,12
     ce8:	f800283a 	ret

00000cec <_puts_r>:
     cec:	defff604 	addi	sp,sp,-40
     cf0:	dc000715 	stw	r16,28(sp)
     cf4:	2021883a 	mov	r16,r4
     cf8:	2809883a 	mov	r4,r5
     cfc:	dc400815 	stw	r17,32(sp)
     d00:	dfc00915 	stw	ra,36(sp)
     d04:	2823883a 	mov	r17,r5
     d08:	0000dc00 	call	dc0 <strlen>
     d0c:	10c00044 	addi	r3,r2,1
     d10:	d8800115 	stw	r2,4(sp)
     d14:	008000b4 	movhi	r2,2
     d18:	10a74e04 	addi	r2,r2,-25288
     d1c:	d8800215 	stw	r2,8(sp)
     d20:	00800044 	movi	r2,1
     d24:	d8800315 	stw	r2,12(sp)
     d28:	00800084 	movi	r2,2
     d2c:	dc400015 	stw	r17,0(sp)
     d30:	d8c00615 	stw	r3,24(sp)
     d34:	dec00415 	stw	sp,16(sp)
     d38:	d8800515 	stw	r2,20(sp)
     d3c:	80000226 	beq	r16,zero,d48 <_puts_r+0x5c>
     d40:	80800e17 	ldw	r2,56(r16)
     d44:	10001426 	beq	r2,zero,d98 <_puts_r+0xac>
     d48:	81400217 	ldw	r5,8(r16)
     d4c:	2880030b 	ldhu	r2,12(r5)
     d50:	10c8000c 	andi	r3,r2,8192
     d54:	1800061e 	bne	r3,zero,d70 <_puts_r+0x84>
     d58:	29001917 	ldw	r4,100(r5)
     d5c:	00f7ffc4 	movi	r3,-8193
     d60:	10880014 	ori	r2,r2,8192
     d64:	20c6703a 	and	r3,r4,r3
     d68:	2880030d 	sth	r2,12(r5)
     d6c:	28c01915 	stw	r3,100(r5)
     d70:	d9800404 	addi	r6,sp,16
     d74:	8009883a 	mov	r4,r16
     d78:	00055800 	call	5580 <__sfvwrite_r>
     d7c:	1000091e 	bne	r2,zero,da4 <_puts_r+0xb8>
     d80:	00800284 	movi	r2,10
     d84:	dfc00917 	ldw	ra,36(sp)
     d88:	dc400817 	ldw	r17,32(sp)
     d8c:	dc000717 	ldw	r16,28(sp)
     d90:	dec00a04 	addi	sp,sp,40
     d94:	f800283a 	ret
     d98:	8009883a 	mov	r4,r16
     d9c:	00050fc0 	call	50fc <__sinit>
     da0:	003fe906 	br	d48 <_puts_r+0x5c>
     da4:	00bfffc4 	movi	r2,-1
     da8:	003ff606 	br	d84 <_puts_r+0x98>

00000dac <puts>:
     dac:	008000b4 	movhi	r2,2
     db0:	10b01b04 	addi	r2,r2,-16276
     db4:	200b883a 	mov	r5,r4
     db8:	11000017 	ldw	r4,0(r2)
     dbc:	0000cec1 	jmpi	cec <_puts_r>

00000dc0 <strlen>:
     dc0:	208000cc 	andi	r2,r4,3
     dc4:	10002026 	beq	r2,zero,e48 <strlen+0x88>
     dc8:	20800007 	ldb	r2,0(r4)
     dcc:	10002026 	beq	r2,zero,e50 <strlen+0x90>
     dd0:	2005883a 	mov	r2,r4
     dd4:	00000206 	br	de0 <strlen+0x20>
     dd8:	10c00007 	ldb	r3,0(r2)
     ddc:	18001826 	beq	r3,zero,e40 <strlen+0x80>
     de0:	10800044 	addi	r2,r2,1
     de4:	10c000cc 	andi	r3,r2,3
     de8:	183ffb1e 	bne	r3,zero,dd8 <strlen+0x18>
     dec:	10c00017 	ldw	r3,0(r2)
     df0:	01ffbff4 	movhi	r7,65279
     df4:	39ffbfc4 	addi	r7,r7,-257
     df8:	00ca303a 	nor	r5,zero,r3
     dfc:	01a02074 	movhi	r6,32897
     e00:	19c7883a 	add	r3,r3,r7
     e04:	31a02004 	addi	r6,r6,-32640
     e08:	1946703a 	and	r3,r3,r5
     e0c:	1986703a 	and	r3,r3,r6
     e10:	1800091e 	bne	r3,zero,e38 <strlen+0x78>
     e14:	10800104 	addi	r2,r2,4
     e18:	10c00017 	ldw	r3,0(r2)
     e1c:	19cb883a 	add	r5,r3,r7
     e20:	00c6303a 	nor	r3,zero,r3
     e24:	28c6703a 	and	r3,r5,r3
     e28:	1986703a 	and	r3,r3,r6
     e2c:	183ff926 	beq	r3,zero,e14 <strlen+0x54>
     e30:	00000106 	br	e38 <strlen+0x78>
     e34:	10800044 	addi	r2,r2,1
     e38:	10c00007 	ldb	r3,0(r2)
     e3c:	183ffd1e 	bne	r3,zero,e34 <strlen+0x74>
     e40:	1105c83a 	sub	r2,r2,r4
     e44:	f800283a 	ret
     e48:	2005883a 	mov	r2,r4
     e4c:	003fe706 	br	dec <strlen+0x2c>
     e50:	0005883a 	mov	r2,zero
     e54:	f800283a 	ret

00000e58 <___vfprintf_internal_r>:
     e58:	deffb804 	addi	sp,sp,-288
     e5c:	dfc04715 	stw	ra,284(sp)
     e60:	ddc04515 	stw	r23,276(sp)
     e64:	dd404315 	stw	r21,268(sp)
     e68:	d9002c15 	stw	r4,176(sp)
     e6c:	282f883a 	mov	r23,r5
     e70:	302b883a 	mov	r21,r6
     e74:	d9c02d15 	stw	r7,180(sp)
     e78:	df004615 	stw	fp,280(sp)
     e7c:	dd804415 	stw	r22,272(sp)
     e80:	dd004215 	stw	r20,264(sp)
     e84:	dcc04115 	stw	r19,260(sp)
     e88:	dc804015 	stw	r18,256(sp)
     e8c:	dc403f15 	stw	r17,252(sp)
     e90:	dc003e15 	stw	r16,248(sp)
     e94:	0005c700 	call	5c70 <_localeconv_r>
     e98:	10800017 	ldw	r2,0(r2)
     e9c:	1009883a 	mov	r4,r2
     ea0:	d8803415 	stw	r2,208(sp)
     ea4:	0000dc00 	call	dc0 <strlen>
     ea8:	d8803715 	stw	r2,220(sp)
     eac:	d8802c17 	ldw	r2,176(sp)
     eb0:	10000226 	beq	r2,zero,ebc <___vfprintf_internal_r+0x64>
     eb4:	10800e17 	ldw	r2,56(r2)
     eb8:	1000f926 	beq	r2,zero,12a0 <___vfprintf_internal_r+0x448>
     ebc:	b880030b 	ldhu	r2,12(r23)
     ec0:	10c8000c 	andi	r3,r2,8192
     ec4:	1800061e 	bne	r3,zero,ee0 <___vfprintf_internal_r+0x88>
     ec8:	b9001917 	ldw	r4,100(r23)
     ecc:	00f7ffc4 	movi	r3,-8193
     ed0:	10880014 	ori	r2,r2,8192
     ed4:	20c6703a 	and	r3,r4,r3
     ed8:	b880030d 	sth	r2,12(r23)
     edc:	b8c01915 	stw	r3,100(r23)
     ee0:	10c0020c 	andi	r3,r2,8
     ee4:	1800c126 	beq	r3,zero,11ec <___vfprintf_internal_r+0x394>
     ee8:	b8c00417 	ldw	r3,16(r23)
     eec:	1800bf26 	beq	r3,zero,11ec <___vfprintf_internal_r+0x394>
     ef0:	1080068c 	andi	r2,r2,26
     ef4:	00c00284 	movi	r3,10
     ef8:	10c0c426 	beq	r2,r3,120c <___vfprintf_internal_r+0x3b4>
     efc:	d8c00404 	addi	r3,sp,16
     f00:	050000b4 	movhi	r20,2
     f04:	d9001e04 	addi	r4,sp,120
     f08:	a5275f84 	addi	r20,r20,-25218
     f0c:	d8c01e15 	stw	r3,120(sp)
     f10:	d8002015 	stw	zero,128(sp)
     f14:	d8001f15 	stw	zero,124(sp)
     f18:	d8003315 	stw	zero,204(sp)
     f1c:	d8003615 	stw	zero,216(sp)
     f20:	d8003815 	stw	zero,224(sp)
     f24:	1811883a 	mov	r8,r3
     f28:	d8003915 	stw	zero,228(sp)
     f2c:	d8003a15 	stw	zero,232(sp)
     f30:	d8002f15 	stw	zero,188(sp)
     f34:	d9002815 	stw	r4,160(sp)
     f38:	a8800007 	ldb	r2,0(r21)
     f3c:	10027b26 	beq	r2,zero,192c <___vfprintf_internal_r+0xad4>
     f40:	00c00944 	movi	r3,37
     f44:	a821883a 	mov	r16,r21
     f48:	10c0021e 	bne	r2,r3,f54 <___vfprintf_internal_r+0xfc>
     f4c:	00001406 	br	fa0 <___vfprintf_internal_r+0x148>
     f50:	10c00326 	beq	r2,r3,f60 <___vfprintf_internal_r+0x108>
     f54:	84000044 	addi	r16,r16,1
     f58:	80800007 	ldb	r2,0(r16)
     f5c:	103ffc1e 	bne	r2,zero,f50 <___vfprintf_internal_r+0xf8>
     f60:	8563c83a 	sub	r17,r16,r21
     f64:	88000e26 	beq	r17,zero,fa0 <___vfprintf_internal_r+0x148>
     f68:	d8c02017 	ldw	r3,128(sp)
     f6c:	d8801f17 	ldw	r2,124(sp)
     f70:	45400015 	stw	r21,0(r8)
     f74:	1c47883a 	add	r3,r3,r17
     f78:	10800044 	addi	r2,r2,1
     f7c:	d8c02015 	stw	r3,128(sp)
     f80:	44400115 	stw	r17,4(r8)
     f84:	d8801f15 	stw	r2,124(sp)
     f88:	00c001c4 	movi	r3,7
     f8c:	1880a716 	blt	r3,r2,122c <___vfprintf_internal_r+0x3d4>
     f90:	42000204 	addi	r8,r8,8
     f94:	d9402f17 	ldw	r5,188(sp)
     f98:	2c4b883a 	add	r5,r5,r17
     f9c:	d9402f15 	stw	r5,188(sp)
     fa0:	80800007 	ldb	r2,0(r16)
     fa4:	1000a826 	beq	r2,zero,1248 <___vfprintf_internal_r+0x3f0>
     fa8:	84400047 	ldb	r17,1(r16)
     fac:	00bfffc4 	movi	r2,-1
     fb0:	85400044 	addi	r21,r16,1
     fb4:	d8002785 	stb	zero,158(sp)
     fb8:	0007883a 	mov	r3,zero
     fbc:	000f883a 	mov	r7,zero
     fc0:	d8802915 	stw	r2,164(sp)
     fc4:	d8003115 	stw	zero,196(sp)
     fc8:	0025883a 	mov	r18,zero
     fcc:	01401604 	movi	r5,88
     fd0:	01800244 	movi	r6,9
     fd4:	02800a84 	movi	r10,42
     fd8:	02401b04 	movi	r9,108
     fdc:	ad400044 	addi	r21,r21,1
     fe0:	88bff804 	addi	r2,r17,-32
     fe4:	28830436 	bltu	r5,r2,1bf8 <___vfprintf_internal_r+0xda0>
     fe8:	100490ba 	slli	r2,r2,2
     fec:	01000034 	movhi	r4,0
     ff0:	21040004 	addi	r4,r4,4096
     ff4:	1105883a 	add	r2,r2,r4
     ff8:	10800017 	ldw	r2,0(r2)
     ffc:	1000683a 	jmp	r2
    1000:	00001b18 	cmpnei	zero,zero,108
    1004:	00001bf8 	rdprs	zero,zero,111
    1008:	00001bf8 	rdprs	zero,zero,111
    100c:	00001b38 	rdprs	zero,zero,108
    1010:	00001bf8 	rdprs	zero,zero,111
    1014:	00001bf8 	rdprs	zero,zero,111
    1018:	00001bf8 	rdprs	zero,zero,111
    101c:	00001bf8 	rdprs	zero,zero,111
    1020:	00001bf8 	rdprs	zero,zero,111
    1024:	00001bf8 	rdprs	zero,zero,111
    1028:	000012ac 	andhi	zero,zero,74
    102c:	00001a54 	movui	zero,105
    1030:	00001bf8 	rdprs	zero,zero,111
    1034:	00001174 	movhi	zero,69
    1038:	000012d4 	movui	zero,75
    103c:	00001bf8 	rdprs	zero,zero,111
    1040:	00001314 	movui	zero,76
    1044:	00001320 	cmpeqi	zero,zero,76
    1048:	00001320 	cmpeqi	zero,zero,76
    104c:	00001320 	cmpeqi	zero,zero,76
    1050:	00001320 	cmpeqi	zero,zero,76
    1054:	00001320 	cmpeqi	zero,zero,76
    1058:	00001320 	cmpeqi	zero,zero,76
    105c:	00001320 	cmpeqi	zero,zero,76
    1060:	00001320 	cmpeqi	zero,zero,76
    1064:	00001320 	cmpeqi	zero,zero,76
    1068:	00001bf8 	rdprs	zero,zero,111
    106c:	00001bf8 	rdprs	zero,zero,111
    1070:	00001bf8 	rdprs	zero,zero,111
    1074:	00001bf8 	rdprs	zero,zero,111
    1078:	00001bf8 	rdprs	zero,zero,111
    107c:	00001bf8 	rdprs	zero,zero,111
    1080:	00001bf8 	rdprs	zero,zero,111
    1084:	00001bf8 	rdprs	zero,zero,111
    1088:	00001bf8 	rdprs	zero,zero,111
    108c:	00001bf8 	rdprs	zero,zero,111
    1090:	00001354 	movui	zero,77
    1094:	00001410 	cmplti	zero,zero,80
    1098:	00001bf8 	rdprs	zero,zero,111
    109c:	00001410 	cmplti	zero,zero,80
    10a0:	00001bf8 	rdprs	zero,zero,111
    10a4:	00001bf8 	rdprs	zero,zero,111
    10a8:	00001bf8 	rdprs	zero,zero,111
    10ac:	00001bf8 	rdprs	zero,zero,111
    10b0:	000014b0 	cmpltui	zero,zero,82
    10b4:	00001bf8 	rdprs	zero,zero,111
    10b8:	00001bf8 	rdprs	zero,zero,111
    10bc:	000014bc 	xorhi	zero,zero,82
    10c0:	00001bf8 	rdprs	zero,zero,111
    10c4:	00001bf8 	rdprs	zero,zero,111
    10c8:	00001bf8 	rdprs	zero,zero,111
    10cc:	00001bf8 	rdprs	zero,zero,111
    10d0:	00001bf8 	rdprs	zero,zero,111
    10d4:	00001934 	movhi	zero,100
    10d8:	00001bf8 	rdprs	zero,zero,111
    10dc:	00001bf8 	rdprs	zero,zero,111
    10e0:	00001994 	movui	zero,102
    10e4:	00001bf8 	rdprs	zero,zero,111
    10e8:	00001bf8 	rdprs	zero,zero,111
    10ec:	00001bf8 	rdprs	zero,zero,111
    10f0:	00001bf8 	rdprs	zero,zero,111
    10f4:	00001bf8 	rdprs	zero,zero,111
    10f8:	00001bf8 	rdprs	zero,zero,111
    10fc:	00001bf8 	rdprs	zero,zero,111
    1100:	00001bf8 	rdprs	zero,zero,111
    1104:	00001bf8 	rdprs	zero,zero,111
    1108:	00001bf8 	rdprs	zero,zero,111
    110c:	00001ba4 	muli	zero,zero,110
    1110:	00001b44 	movi	zero,109
    1114:	00001410 	cmplti	zero,zero,80
    1118:	00001410 	cmplti	zero,zero,80
    111c:	00001410 	cmplti	zero,zero,80
    1120:	00001b54 	movui	zero,109
    1124:	00001b44 	movi	zero,109
    1128:	00001bf8 	rdprs	zero,zero,111
    112c:	00001bf8 	rdprs	zero,zero,111
    1130:	00001b60 	cmpeqi	zero,zero,109
    1134:	00001bf8 	rdprs	zero,zero,111
    1138:	00001b70 	cmpltui	zero,zero,109
    113c:	00001a44 	movi	zero,105
    1140:	00001180 	call	118 <alt_irq_handler+0x1c>
    1144:	00001a64 	muli	zero,zero,105
    1148:	00001bf8 	rdprs	zero,zero,111
    114c:	00001a70 	cmpltui	zero,zero,105
    1150:	00001bf8 	rdprs	zero,zero,111
    1154:	00001acc 	andi	zero,zero,107
    1158:	00001bf8 	rdprs	zero,zero,111
    115c:	00001bf8 	rdprs	zero,zero,111
    1160:	00001adc 	xori	zero,zero,107
    1164:	d9003117 	ldw	r4,196(sp)
    1168:	d8802d15 	stw	r2,180(sp)
    116c:	0109c83a 	sub	r4,zero,r4
    1170:	d9003115 	stw	r4,196(sp)
    1174:	94800114 	ori	r18,r18,4
    1178:	ac400007 	ldb	r17,0(r21)
    117c:	003f9706 	br	fdc <___vfprintf_internal_r+0x184>
    1180:	00800c04 	movi	r2,48
    1184:	d9002d17 	ldw	r4,180(sp)
    1188:	d9402917 	ldw	r5,164(sp)
    118c:	d8802705 	stb	r2,156(sp)
    1190:	00801e04 	movi	r2,120
    1194:	d8802745 	stb	r2,157(sp)
    1198:	d8002785 	stb	zero,158(sp)
    119c:	20c00104 	addi	r3,r4,4
    11a0:	24c00017 	ldw	r19,0(r4)
    11a4:	002d883a 	mov	r22,zero
    11a8:	90800094 	ori	r2,r18,2
    11ac:	28029a16 	blt	r5,zero,1c18 <___vfprintf_internal_r+0xdc0>
    11b0:	00bfdfc4 	movi	r2,-129
    11b4:	90a4703a 	and	r18,r18,r2
    11b8:	d8c02d15 	stw	r3,180(sp)
    11bc:	94800094 	ori	r18,r18,2
    11c0:	9802871e 	bne	r19,zero,1be0 <___vfprintf_internal_r+0xd88>
    11c4:	008000b4 	movhi	r2,2
    11c8:	10a75804 	addi	r2,r2,-25248
    11cc:	d8803915 	stw	r2,228(sp)
    11d0:	04401e04 	movi	r17,120
    11d4:	d8802917 	ldw	r2,164(sp)
    11d8:	0039883a 	mov	fp,zero
    11dc:	1001e926 	beq	r2,zero,1984 <___vfprintf_internal_r+0xb2c>
    11e0:	0027883a 	mov	r19,zero
    11e4:	002d883a 	mov	r22,zero
    11e8:	00020506 	br	1a00 <___vfprintf_internal_r+0xba8>
    11ec:	d9002c17 	ldw	r4,176(sp)
    11f0:	b80b883a 	mov	r5,r23
    11f4:	00031280 	call	3128 <__swsetup_r>
    11f8:	1005ac1e 	bne	r2,zero,28ac <___vfprintf_internal_r+0x1a54>
    11fc:	b880030b 	ldhu	r2,12(r23)
    1200:	00c00284 	movi	r3,10
    1204:	1080068c 	andi	r2,r2,26
    1208:	10ff3c1e 	bne	r2,r3,efc <___vfprintf_internal_r+0xa4>
    120c:	b880038f 	ldh	r2,14(r23)
    1210:	103f3a16 	blt	r2,zero,efc <___vfprintf_internal_r+0xa4>
    1214:	d9c02d17 	ldw	r7,180(sp)
    1218:	d9002c17 	ldw	r4,176(sp)
    121c:	a80d883a 	mov	r6,r21
    1220:	b80b883a 	mov	r5,r23
    1224:	000306c0 	call	306c <__sbprintf>
    1228:	00001106 	br	1270 <___vfprintf_internal_r+0x418>
    122c:	d9002c17 	ldw	r4,176(sp)
    1230:	d9801e04 	addi	r6,sp,120
    1234:	b80b883a 	mov	r5,r23
    1238:	00084540 	call	8454 <__sprint_r>
    123c:	1000081e 	bne	r2,zero,1260 <___vfprintf_internal_r+0x408>
    1240:	da000404 	addi	r8,sp,16
    1244:	003f5306 	br	f94 <___vfprintf_internal_r+0x13c>
    1248:	d8802017 	ldw	r2,128(sp)
    124c:	10000426 	beq	r2,zero,1260 <___vfprintf_internal_r+0x408>
    1250:	d9002c17 	ldw	r4,176(sp)
    1254:	d9801e04 	addi	r6,sp,120
    1258:	b80b883a 	mov	r5,r23
    125c:	00084540 	call	8454 <__sprint_r>
    1260:	b880030b 	ldhu	r2,12(r23)
    1264:	1080100c 	andi	r2,r2,64
    1268:	1005901e 	bne	r2,zero,28ac <___vfprintf_internal_r+0x1a54>
    126c:	d8802f17 	ldw	r2,188(sp)
    1270:	dfc04717 	ldw	ra,284(sp)
    1274:	df004617 	ldw	fp,280(sp)
    1278:	ddc04517 	ldw	r23,276(sp)
    127c:	dd804417 	ldw	r22,272(sp)
    1280:	dd404317 	ldw	r21,268(sp)
    1284:	dd004217 	ldw	r20,264(sp)
    1288:	dcc04117 	ldw	r19,260(sp)
    128c:	dc804017 	ldw	r18,256(sp)
    1290:	dc403f17 	ldw	r17,252(sp)
    1294:	dc003e17 	ldw	r16,248(sp)
    1298:	dec04804 	addi	sp,sp,288
    129c:	f800283a 	ret
    12a0:	d9002c17 	ldw	r4,176(sp)
    12a4:	00050fc0 	call	50fc <__sinit>
    12a8:	003f0406 	br	ebc <___vfprintf_internal_r+0x64>
    12ac:	d8802d17 	ldw	r2,180(sp)
    12b0:	d9002d17 	ldw	r4,180(sp)
    12b4:	10800017 	ldw	r2,0(r2)
    12b8:	d8803115 	stw	r2,196(sp)
    12bc:	20800104 	addi	r2,r4,4
    12c0:	d9003117 	ldw	r4,196(sp)
    12c4:	203fa716 	blt	r4,zero,1164 <___vfprintf_internal_r+0x30c>
    12c8:	d8802d15 	stw	r2,180(sp)
    12cc:	ac400007 	ldb	r17,0(r21)
    12d0:	003f4206 	br	fdc <___vfprintf_internal_r+0x184>
    12d4:	ac400007 	ldb	r17,0(r21)
    12d8:	aac00044 	addi	r11,r21,1
    12dc:	8a872826 	beq	r17,r10,2f80 <___vfprintf_internal_r+0x2128>
    12e0:	88bff404 	addi	r2,r17,-48
    12e4:	0009883a 	mov	r4,zero
    12e8:	30867d36 	bltu	r6,r2,2ce0 <___vfprintf_internal_r+0x1e88>
    12ec:	5c400007 	ldb	r17,0(r11)
    12f0:	210002a4 	muli	r4,r4,10
    12f4:	5d400044 	addi	r21,r11,1
    12f8:	a817883a 	mov	r11,r21
    12fc:	2089883a 	add	r4,r4,r2
    1300:	88bff404 	addi	r2,r17,-48
    1304:	30bff92e 	bgeu	r6,r2,12ec <___vfprintf_internal_r+0x494>
    1308:	2005c916 	blt	r4,zero,2a30 <___vfprintf_internal_r+0x1bd8>
    130c:	d9002915 	stw	r4,164(sp)
    1310:	003f3306 	br	fe0 <___vfprintf_internal_r+0x188>
    1314:	94802014 	ori	r18,r18,128
    1318:	ac400007 	ldb	r17,0(r21)
    131c:	003f2f06 	br	fdc <___vfprintf_internal_r+0x184>
    1320:	a809883a 	mov	r4,r21
    1324:	d8003115 	stw	zero,196(sp)
    1328:	88bff404 	addi	r2,r17,-48
    132c:	0017883a 	mov	r11,zero
    1330:	24400007 	ldb	r17,0(r4)
    1334:	5ac002a4 	muli	r11,r11,10
    1338:	ad400044 	addi	r21,r21,1
    133c:	a809883a 	mov	r4,r21
    1340:	12d7883a 	add	r11,r2,r11
    1344:	88bff404 	addi	r2,r17,-48
    1348:	30bff92e 	bgeu	r6,r2,1330 <___vfprintf_internal_r+0x4d8>
    134c:	dac03115 	stw	r11,196(sp)
    1350:	003f2306 	br	fe0 <___vfprintf_internal_r+0x188>
    1354:	18c03fcc 	andi	r3,r3,255
    1358:	18072b1e 	bne	r3,zero,3008 <___vfprintf_internal_r+0x21b0>
    135c:	94800414 	ori	r18,r18,16
    1360:	9080080c 	andi	r2,r18,32
    1364:	10037b26 	beq	r2,zero,2154 <___vfprintf_internal_r+0x12fc>
    1368:	d9402d17 	ldw	r5,180(sp)
    136c:	28800117 	ldw	r2,4(r5)
    1370:	2cc00017 	ldw	r19,0(r5)
    1374:	29400204 	addi	r5,r5,8
    1378:	d9402d15 	stw	r5,180(sp)
    137c:	102d883a 	mov	r22,r2
    1380:	10044b16 	blt	r2,zero,24b0 <___vfprintf_internal_r+0x1658>
    1384:	d9402917 	ldw	r5,164(sp)
    1388:	df002783 	ldbu	fp,158(sp)
    138c:	2803bc16 	blt	r5,zero,2280 <___vfprintf_internal_r+0x1428>
    1390:	00ffdfc4 	movi	r3,-129
    1394:	9d84b03a 	or	r2,r19,r22
    1398:	90e4703a 	and	r18,r18,r3
    139c:	10017726 	beq	r2,zero,197c <___vfprintf_internal_r+0xb24>
    13a0:	b0038326 	beq	r22,zero,21b0 <___vfprintf_internal_r+0x1358>
    13a4:	dc402a15 	stw	r17,168(sp)
    13a8:	dc001e04 	addi	r16,sp,120
    13ac:	b023883a 	mov	r17,r22
    13b0:	402d883a 	mov	r22,r8
    13b4:	9809883a 	mov	r4,r19
    13b8:	880b883a 	mov	r5,r17
    13bc:	01800284 	movi	r6,10
    13c0:	000f883a 	mov	r7,zero
    13c4:	000a84c0 	call	a84c <__umoddi3>
    13c8:	10800c04 	addi	r2,r2,48
    13cc:	843fffc4 	addi	r16,r16,-1
    13d0:	9809883a 	mov	r4,r19
    13d4:	880b883a 	mov	r5,r17
    13d8:	80800005 	stb	r2,0(r16)
    13dc:	01800284 	movi	r6,10
    13e0:	000f883a 	mov	r7,zero
    13e4:	000a2d40 	call	a2d4 <__udivdi3>
    13e8:	1027883a 	mov	r19,r2
    13ec:	10c4b03a 	or	r2,r2,r3
    13f0:	1823883a 	mov	r17,r3
    13f4:	103fef1e 	bne	r2,zero,13b4 <___vfprintf_internal_r+0x55c>
    13f8:	d8c02817 	ldw	r3,160(sp)
    13fc:	dc402a17 	ldw	r17,168(sp)
    1400:	b011883a 	mov	r8,r22
    1404:	1c07c83a 	sub	r3,r3,r16
    1408:	d8c02e15 	stw	r3,184(sp)
    140c:	00005906 	br	1574 <___vfprintf_internal_r+0x71c>
    1410:	18c03fcc 	andi	r3,r3,255
    1414:	1806fa1e 	bne	r3,zero,3000 <___vfprintf_internal_r+0x21a8>
    1418:	9080020c 	andi	r2,r18,8
    141c:	10048a26 	beq	r2,zero,2648 <___vfprintf_internal_r+0x17f0>
    1420:	d8c02d17 	ldw	r3,180(sp)
    1424:	d9002d17 	ldw	r4,180(sp)
    1428:	d9402d17 	ldw	r5,180(sp)
    142c:	18c00017 	ldw	r3,0(r3)
    1430:	21000117 	ldw	r4,4(r4)
    1434:	29400204 	addi	r5,r5,8
    1438:	d8c03615 	stw	r3,216(sp)
    143c:	d9003815 	stw	r4,224(sp)
    1440:	d9402d15 	stw	r5,180(sp)
    1444:	d9003617 	ldw	r4,216(sp)
    1448:	d9403817 	ldw	r5,224(sp)
    144c:	da003d15 	stw	r8,244(sp)
    1450:	04000044 	movi	r16,1
    1454:	00080780 	call	8078 <__fpclassifyd>
    1458:	da003d17 	ldw	r8,244(sp)
    145c:	14041f1e 	bne	r2,r16,24dc <___vfprintf_internal_r+0x1684>
    1460:	d9003617 	ldw	r4,216(sp)
    1464:	d9403817 	ldw	r5,224(sp)
    1468:	000d883a 	mov	r6,zero
    146c:	000f883a 	mov	r7,zero
    1470:	000c2300 	call	c230 <__ledf2>
    1474:	da003d17 	ldw	r8,244(sp)
    1478:	1005be16 	blt	r2,zero,2b74 <___vfprintf_internal_r+0x1d1c>
    147c:	df002783 	ldbu	fp,158(sp)
    1480:	008011c4 	movi	r2,71
    1484:	1445330e 	bge	r2,r17,2954 <___vfprintf_internal_r+0x1afc>
    1488:	040000b4 	movhi	r16,2
    148c:	84275004 	addi	r16,r16,-25280
    1490:	00c000c4 	movi	r3,3
    1494:	00bfdfc4 	movi	r2,-129
    1498:	d8c02a15 	stw	r3,168(sp)
    149c:	90a4703a 	and	r18,r18,r2
    14a0:	d8c02e15 	stw	r3,184(sp)
    14a4:	d8002915 	stw	zero,164(sp)
    14a8:	d8003215 	stw	zero,200(sp)
    14ac:	00003706 	br	158c <___vfprintf_internal_r+0x734>
    14b0:	94800214 	ori	r18,r18,8
    14b4:	ac400007 	ldb	r17,0(r21)
    14b8:	003ec806 	br	fdc <___vfprintf_internal_r+0x184>
    14bc:	18c03fcc 	andi	r3,r3,255
    14c0:	1806db1e 	bne	r3,zero,3030 <___vfprintf_internal_r+0x21d8>
    14c4:	94800414 	ori	r18,r18,16
    14c8:	9080080c 	andi	r2,r18,32
    14cc:	1002d826 	beq	r2,zero,2030 <___vfprintf_internal_r+0x11d8>
    14d0:	d9402d17 	ldw	r5,180(sp)
    14d4:	d8c02917 	ldw	r3,164(sp)
    14d8:	d8002785 	stb	zero,158(sp)
    14dc:	28800204 	addi	r2,r5,8
    14e0:	2cc00017 	ldw	r19,0(r5)
    14e4:	2d800117 	ldw	r22,4(r5)
    14e8:	18048f16 	blt	r3,zero,2728 <___vfprintf_internal_r+0x18d0>
    14ec:	013fdfc4 	movi	r4,-129
    14f0:	9d86b03a 	or	r3,r19,r22
    14f4:	d8802d15 	stw	r2,180(sp)
    14f8:	9124703a 	and	r18,r18,r4
    14fc:	1802d91e 	bne	r3,zero,2064 <___vfprintf_internal_r+0x120c>
    1500:	d8c02917 	ldw	r3,164(sp)
    1504:	0039883a 	mov	fp,zero
    1508:	1805c326 	beq	r3,zero,2c18 <___vfprintf_internal_r+0x1dc0>
    150c:	0027883a 	mov	r19,zero
    1510:	002d883a 	mov	r22,zero
    1514:	dc001e04 	addi	r16,sp,120
    1518:	9806d0fa 	srli	r3,r19,3
    151c:	b008977a 	slli	r4,r22,29
    1520:	b02cd0fa 	srli	r22,r22,3
    1524:	9cc001cc 	andi	r19,r19,7
    1528:	98800c04 	addi	r2,r19,48
    152c:	843fffc4 	addi	r16,r16,-1
    1530:	20e6b03a 	or	r19,r4,r3
    1534:	80800005 	stb	r2,0(r16)
    1538:	9d86b03a 	or	r3,r19,r22
    153c:	183ff61e 	bne	r3,zero,1518 <___vfprintf_internal_r+0x6c0>
    1540:	90c0004c 	andi	r3,r18,1
    1544:	18013b26 	beq	r3,zero,1a34 <___vfprintf_internal_r+0xbdc>
    1548:	10803fcc 	andi	r2,r2,255
    154c:	1080201c 	xori	r2,r2,128
    1550:	10bfe004 	addi	r2,r2,-128
    1554:	00c00c04 	movi	r3,48
    1558:	10c13626 	beq	r2,r3,1a34 <___vfprintf_internal_r+0xbdc>
    155c:	80ffffc5 	stb	r3,-1(r16)
    1560:	d8c02817 	ldw	r3,160(sp)
    1564:	80bfffc4 	addi	r2,r16,-1
    1568:	1021883a 	mov	r16,r2
    156c:	1887c83a 	sub	r3,r3,r2
    1570:	d8c02e15 	stw	r3,184(sp)
    1574:	d8802e17 	ldw	r2,184(sp)
    1578:	d9002917 	ldw	r4,164(sp)
    157c:	1100010e 	bge	r2,r4,1584 <___vfprintf_internal_r+0x72c>
    1580:	2005883a 	mov	r2,r4
    1584:	d8802a15 	stw	r2,168(sp)
    1588:	d8003215 	stw	zero,200(sp)
    158c:	e7003fcc 	andi	fp,fp,255
    1590:	e700201c 	xori	fp,fp,128
    1594:	e73fe004 	addi	fp,fp,-128
    1598:	e0000326 	beq	fp,zero,15a8 <___vfprintf_internal_r+0x750>
    159c:	d8c02a17 	ldw	r3,168(sp)
    15a0:	18c00044 	addi	r3,r3,1
    15a4:	d8c02a15 	stw	r3,168(sp)
    15a8:	90c0008c 	andi	r3,r18,2
    15ac:	d8c02b15 	stw	r3,172(sp)
    15b0:	18000326 	beq	r3,zero,15c0 <___vfprintf_internal_r+0x768>
    15b4:	d8c02a17 	ldw	r3,168(sp)
    15b8:	18c00084 	addi	r3,r3,2
    15bc:	d8c02a15 	stw	r3,168(sp)
    15c0:	90c0210c 	andi	r3,r18,132
    15c4:	d8c03015 	stw	r3,192(sp)
    15c8:	1801a31e 	bne	r3,zero,1c58 <___vfprintf_internal_r+0xe00>
    15cc:	d9003117 	ldw	r4,196(sp)
    15d0:	d8c02a17 	ldw	r3,168(sp)
    15d4:	20e7c83a 	sub	r19,r4,r3
    15d8:	04c19f0e 	bge	zero,r19,1c58 <___vfprintf_internal_r+0xe00>
    15dc:	02400404 	movi	r9,16
    15e0:	d8c02017 	ldw	r3,128(sp)
    15e4:	d8801f17 	ldw	r2,124(sp)
    15e8:	4cc50d0e 	bge	r9,r19,2a20 <___vfprintf_internal_r+0x1bc8>
    15ec:	014000b4 	movhi	r5,2
    15f0:	29676384 	addi	r5,r5,-25202
    15f4:	dc403b15 	stw	r17,236(sp)
    15f8:	d9403515 	stw	r5,212(sp)
    15fc:	9823883a 	mov	r17,r19
    1600:	482d883a 	mov	r22,r9
    1604:	9027883a 	mov	r19,r18
    1608:	070001c4 	movi	fp,7
    160c:	8025883a 	mov	r18,r16
    1610:	dc002c17 	ldw	r16,176(sp)
    1614:	00000306 	br	1624 <___vfprintf_internal_r+0x7cc>
    1618:	8c7ffc04 	addi	r17,r17,-16
    161c:	42000204 	addi	r8,r8,8
    1620:	b440130e 	bge	r22,r17,1670 <___vfprintf_internal_r+0x818>
    1624:	010000b4 	movhi	r4,2
    1628:	18c00404 	addi	r3,r3,16
    162c:	10800044 	addi	r2,r2,1
    1630:	21276384 	addi	r4,r4,-25202
    1634:	41000015 	stw	r4,0(r8)
    1638:	45800115 	stw	r22,4(r8)
    163c:	d8c02015 	stw	r3,128(sp)
    1640:	d8801f15 	stw	r2,124(sp)
    1644:	e0bff40e 	bge	fp,r2,1618 <___vfprintf_internal_r+0x7c0>
    1648:	d9801e04 	addi	r6,sp,120
    164c:	b80b883a 	mov	r5,r23
    1650:	8009883a 	mov	r4,r16
    1654:	00084540 	call	8454 <__sprint_r>
    1658:	103f011e 	bne	r2,zero,1260 <___vfprintf_internal_r+0x408>
    165c:	8c7ffc04 	addi	r17,r17,-16
    1660:	d8c02017 	ldw	r3,128(sp)
    1664:	d8801f17 	ldw	r2,124(sp)
    1668:	da000404 	addi	r8,sp,16
    166c:	b47fed16 	blt	r22,r17,1624 <___vfprintf_internal_r+0x7cc>
    1670:	9021883a 	mov	r16,r18
    1674:	9825883a 	mov	r18,r19
    1678:	8827883a 	mov	r19,r17
    167c:	dc403b17 	ldw	r17,236(sp)
    1680:	d9403517 	ldw	r5,212(sp)
    1684:	98c7883a 	add	r3,r19,r3
    1688:	10800044 	addi	r2,r2,1
    168c:	41400015 	stw	r5,0(r8)
    1690:	44c00115 	stw	r19,4(r8)
    1694:	d8c02015 	stw	r3,128(sp)
    1698:	d8801f15 	stw	r2,124(sp)
    169c:	010001c4 	movi	r4,7
    16a0:	2082a316 	blt	r4,r2,2130 <___vfprintf_internal_r+0x12d8>
    16a4:	df002787 	ldb	fp,158(sp)
    16a8:	42000204 	addi	r8,r8,8
    16ac:	e0000c26 	beq	fp,zero,16e0 <___vfprintf_internal_r+0x888>
    16b0:	d8801f17 	ldw	r2,124(sp)
    16b4:	d9002784 	addi	r4,sp,158
    16b8:	18c00044 	addi	r3,r3,1
    16bc:	10800044 	addi	r2,r2,1
    16c0:	41000015 	stw	r4,0(r8)
    16c4:	01000044 	movi	r4,1
    16c8:	41000115 	stw	r4,4(r8)
    16cc:	d8c02015 	stw	r3,128(sp)
    16d0:	d8801f15 	stw	r2,124(sp)
    16d4:	010001c4 	movi	r4,7
    16d8:	20823c16 	blt	r4,r2,1fcc <___vfprintf_internal_r+0x1174>
    16dc:	42000204 	addi	r8,r8,8
    16e0:	d8802b17 	ldw	r2,172(sp)
    16e4:	10000c26 	beq	r2,zero,1718 <___vfprintf_internal_r+0x8c0>
    16e8:	d8801f17 	ldw	r2,124(sp)
    16ec:	d9002704 	addi	r4,sp,156
    16f0:	18c00084 	addi	r3,r3,2
    16f4:	10800044 	addi	r2,r2,1
    16f8:	41000015 	stw	r4,0(r8)
    16fc:	01000084 	movi	r4,2
    1700:	41000115 	stw	r4,4(r8)
    1704:	d8c02015 	stw	r3,128(sp)
    1708:	d8801f15 	stw	r2,124(sp)
    170c:	010001c4 	movi	r4,7
    1710:	20823616 	blt	r4,r2,1fec <___vfprintf_internal_r+0x1194>
    1714:	42000204 	addi	r8,r8,8
    1718:	d9003017 	ldw	r4,192(sp)
    171c:	00802004 	movi	r2,128
    1720:	20819926 	beq	r4,r2,1d88 <___vfprintf_internal_r+0xf30>
    1724:	d9402917 	ldw	r5,164(sp)
    1728:	d8802e17 	ldw	r2,184(sp)
    172c:	28adc83a 	sub	r22,r5,r2
    1730:	0580310e 	bge	zero,r22,17f8 <___vfprintf_internal_r+0x9a0>
    1734:	07000404 	movi	fp,16
    1738:	d8801f17 	ldw	r2,124(sp)
    173c:	e584140e 	bge	fp,r22,2790 <___vfprintf_internal_r+0x1938>
    1740:	014000b4 	movhi	r5,2
    1744:	29675f84 	addi	r5,r5,-25218
    1748:	dc402915 	stw	r17,164(sp)
    174c:	d9402b15 	stw	r5,172(sp)
    1750:	b023883a 	mov	r17,r22
    1754:	04c001c4 	movi	r19,7
    1758:	a82d883a 	mov	r22,r21
    175c:	902b883a 	mov	r21,r18
    1760:	8025883a 	mov	r18,r16
    1764:	dc002c17 	ldw	r16,176(sp)
    1768:	00000306 	br	1778 <___vfprintf_internal_r+0x920>
    176c:	8c7ffc04 	addi	r17,r17,-16
    1770:	42000204 	addi	r8,r8,8
    1774:	e440110e 	bge	fp,r17,17bc <___vfprintf_internal_r+0x964>
    1778:	18c00404 	addi	r3,r3,16
    177c:	10800044 	addi	r2,r2,1
    1780:	45000015 	stw	r20,0(r8)
    1784:	47000115 	stw	fp,4(r8)
    1788:	d8c02015 	stw	r3,128(sp)
    178c:	d8801f15 	stw	r2,124(sp)
    1790:	98bff60e 	bge	r19,r2,176c <___vfprintf_internal_r+0x914>
    1794:	d9801e04 	addi	r6,sp,120
    1798:	b80b883a 	mov	r5,r23
    179c:	8009883a 	mov	r4,r16
    17a0:	00084540 	call	8454 <__sprint_r>
    17a4:	103eae1e 	bne	r2,zero,1260 <___vfprintf_internal_r+0x408>
    17a8:	8c7ffc04 	addi	r17,r17,-16
    17ac:	d8c02017 	ldw	r3,128(sp)
    17b0:	d8801f17 	ldw	r2,124(sp)
    17b4:	da000404 	addi	r8,sp,16
    17b8:	e47fef16 	blt	fp,r17,1778 <___vfprintf_internal_r+0x920>
    17bc:	9021883a 	mov	r16,r18
    17c0:	a825883a 	mov	r18,r21
    17c4:	b02b883a 	mov	r21,r22
    17c8:	882d883a 	mov	r22,r17
    17cc:	dc402917 	ldw	r17,164(sp)
    17d0:	d9002b17 	ldw	r4,172(sp)
    17d4:	1d87883a 	add	r3,r3,r22
    17d8:	10800044 	addi	r2,r2,1
    17dc:	41000015 	stw	r4,0(r8)
    17e0:	45800115 	stw	r22,4(r8)
    17e4:	d8c02015 	stw	r3,128(sp)
    17e8:	d8801f15 	stw	r2,124(sp)
    17ec:	010001c4 	movi	r4,7
    17f0:	2081ee16 	blt	r4,r2,1fac <___vfprintf_internal_r+0x1154>
    17f4:	42000204 	addi	r8,r8,8
    17f8:	9080400c 	andi	r2,r18,256
    17fc:	1001181e 	bne	r2,zero,1c60 <___vfprintf_internal_r+0xe08>
    1800:	d9402e17 	ldw	r5,184(sp)
    1804:	d8801f17 	ldw	r2,124(sp)
    1808:	44000015 	stw	r16,0(r8)
    180c:	1947883a 	add	r3,r3,r5
    1810:	10800044 	addi	r2,r2,1
    1814:	41400115 	stw	r5,4(r8)
    1818:	d8c02015 	stw	r3,128(sp)
    181c:	d8801f15 	stw	r2,124(sp)
    1820:	010001c4 	movi	r4,7
    1824:	2081d316 	blt	r4,r2,1f74 <___vfprintf_internal_r+0x111c>
    1828:	42000204 	addi	r8,r8,8
    182c:	9480010c 	andi	r18,r18,4
    1830:	90003226 	beq	r18,zero,18fc <___vfprintf_internal_r+0xaa4>
    1834:	d9403117 	ldw	r5,196(sp)
    1838:	d8802a17 	ldw	r2,168(sp)
    183c:	28a1c83a 	sub	r16,r5,r2
    1840:	04002e0e 	bge	zero,r16,18fc <___vfprintf_internal_r+0xaa4>
    1844:	04400404 	movi	r17,16
    1848:	d8801f17 	ldw	r2,124(sp)
    184c:	8c04a20e 	bge	r17,r16,2ad8 <___vfprintf_internal_r+0x1c80>
    1850:	014000b4 	movhi	r5,2
    1854:	29676384 	addi	r5,r5,-25202
    1858:	d9403515 	stw	r5,212(sp)
    185c:	048001c4 	movi	r18,7
    1860:	dcc02c17 	ldw	r19,176(sp)
    1864:	00000306 	br	1874 <___vfprintf_internal_r+0xa1c>
    1868:	843ffc04 	addi	r16,r16,-16
    186c:	42000204 	addi	r8,r8,8
    1870:	8c00130e 	bge	r17,r16,18c0 <___vfprintf_internal_r+0xa68>
    1874:	010000b4 	movhi	r4,2
    1878:	18c00404 	addi	r3,r3,16
    187c:	10800044 	addi	r2,r2,1
    1880:	21276384 	addi	r4,r4,-25202
    1884:	41000015 	stw	r4,0(r8)
    1888:	44400115 	stw	r17,4(r8)
    188c:	d8c02015 	stw	r3,128(sp)
    1890:	d8801f15 	stw	r2,124(sp)
    1894:	90bff40e 	bge	r18,r2,1868 <___vfprintf_internal_r+0xa10>
    1898:	d9801e04 	addi	r6,sp,120
    189c:	b80b883a 	mov	r5,r23
    18a0:	9809883a 	mov	r4,r19
    18a4:	00084540 	call	8454 <__sprint_r>
    18a8:	103e6d1e 	bne	r2,zero,1260 <___vfprintf_internal_r+0x408>
    18ac:	843ffc04 	addi	r16,r16,-16
    18b0:	d8c02017 	ldw	r3,128(sp)
    18b4:	d8801f17 	ldw	r2,124(sp)
    18b8:	da000404 	addi	r8,sp,16
    18bc:	8c3fed16 	blt	r17,r16,1874 <___vfprintf_internal_r+0xa1c>
    18c0:	d9403517 	ldw	r5,212(sp)
    18c4:	1c07883a 	add	r3,r3,r16
    18c8:	10800044 	addi	r2,r2,1
    18cc:	41400015 	stw	r5,0(r8)
    18d0:	44000115 	stw	r16,4(r8)
    18d4:	d8c02015 	stw	r3,128(sp)
    18d8:	d8801f15 	stw	r2,124(sp)
    18dc:	010001c4 	movi	r4,7
    18e0:	2080060e 	bge	r4,r2,18fc <___vfprintf_internal_r+0xaa4>
    18e4:	d9002c17 	ldw	r4,176(sp)
    18e8:	d9801e04 	addi	r6,sp,120
    18ec:	b80b883a 	mov	r5,r23
    18f0:	00084540 	call	8454 <__sprint_r>
    18f4:	103e5a1e 	bne	r2,zero,1260 <___vfprintf_internal_r+0x408>
    18f8:	d8c02017 	ldw	r3,128(sp)
    18fc:	d8803117 	ldw	r2,196(sp)
    1900:	d9002a17 	ldw	r4,168(sp)
    1904:	1100010e 	bge	r2,r4,190c <___vfprintf_internal_r+0xab4>
    1908:	2005883a 	mov	r2,r4
    190c:	d9402f17 	ldw	r5,188(sp)
    1910:	288b883a 	add	r5,r5,r2
    1914:	d9402f15 	stw	r5,188(sp)
    1918:	18019e1e 	bne	r3,zero,1f94 <___vfprintf_internal_r+0x113c>
    191c:	a8800007 	ldb	r2,0(r21)
    1920:	d8001f15 	stw	zero,124(sp)
    1924:	da000404 	addi	r8,sp,16
    1928:	103d851e 	bne	r2,zero,f40 <___vfprintf_internal_r+0xe8>
    192c:	a821883a 	mov	r16,r21
    1930:	003d9b06 	br	fa0 <___vfprintf_internal_r+0x148>
    1934:	18c03fcc 	andi	r3,r3,255
    1938:	1805c11e 	bne	r3,zero,3040 <___vfprintf_internal_r+0x21e8>
    193c:	94800414 	ori	r18,r18,16
    1940:	9080080c 	andi	r2,r18,32
    1944:	10020c26 	beq	r2,zero,2178 <___vfprintf_internal_r+0x1320>
    1948:	d8802d17 	ldw	r2,180(sp)
    194c:	d9002917 	ldw	r4,164(sp)
    1950:	d8002785 	stb	zero,158(sp)
    1954:	10c00204 	addi	r3,r2,8
    1958:	14c00017 	ldw	r19,0(r2)
    195c:	15800117 	ldw	r22,4(r2)
    1960:	20040f16 	blt	r4,zero,29a0 <___vfprintf_internal_r+0x1b48>
    1964:	013fdfc4 	movi	r4,-129
    1968:	9d84b03a 	or	r2,r19,r22
    196c:	d8c02d15 	stw	r3,180(sp)
    1970:	9124703a 	and	r18,r18,r4
    1974:	0039883a 	mov	fp,zero
    1978:	103e891e 	bne	r2,zero,13a0 <___vfprintf_internal_r+0x548>
    197c:	d9002917 	ldw	r4,164(sp)
    1980:	2002c11e 	bne	r4,zero,2488 <___vfprintf_internal_r+0x1630>
    1984:	d8002915 	stw	zero,164(sp)
    1988:	d8002e15 	stw	zero,184(sp)
    198c:	dc001e04 	addi	r16,sp,120
    1990:	003ef806 	br	1574 <___vfprintf_internal_r+0x71c>
    1994:	18c03fcc 	andi	r3,r3,255
    1998:	18059d1e 	bne	r3,zero,3010 <___vfprintf_internal_r+0x21b8>
    199c:	014000b4 	movhi	r5,2
    19a0:	29675304 	addi	r5,r5,-25268
    19a4:	d9403915 	stw	r5,228(sp)
    19a8:	9080080c 	andi	r2,r18,32
    19ac:	10005226 	beq	r2,zero,1af8 <___vfprintf_internal_r+0xca0>
    19b0:	d8802d17 	ldw	r2,180(sp)
    19b4:	14c00017 	ldw	r19,0(r2)
    19b8:	15800117 	ldw	r22,4(r2)
    19bc:	10800204 	addi	r2,r2,8
    19c0:	d8802d15 	stw	r2,180(sp)
    19c4:	9080004c 	andi	r2,r18,1
    19c8:	10019026 	beq	r2,zero,200c <___vfprintf_internal_r+0x11b4>
    19cc:	9d84b03a 	or	r2,r19,r22
    19d0:	10036926 	beq	r2,zero,2778 <___vfprintf_internal_r+0x1920>
    19d4:	d8c02917 	ldw	r3,164(sp)
    19d8:	00800c04 	movi	r2,48
    19dc:	d8802705 	stb	r2,156(sp)
    19e0:	dc402745 	stb	r17,157(sp)
    19e4:	d8002785 	stb	zero,158(sp)
    19e8:	90800094 	ori	r2,r18,2
    19ec:	18045d16 	blt	r3,zero,2b64 <___vfprintf_internal_r+0x1d0c>
    19f0:	00bfdfc4 	movi	r2,-129
    19f4:	90a4703a 	and	r18,r18,r2
    19f8:	94800094 	ori	r18,r18,2
    19fc:	0039883a 	mov	fp,zero
    1a00:	d9003917 	ldw	r4,228(sp)
    1a04:	dc001e04 	addi	r16,sp,120
    1a08:	988003cc 	andi	r2,r19,15
    1a0c:	b006973a 	slli	r3,r22,28
    1a10:	2085883a 	add	r2,r4,r2
    1a14:	9826d13a 	srli	r19,r19,4
    1a18:	10800003 	ldbu	r2,0(r2)
    1a1c:	b02cd13a 	srli	r22,r22,4
    1a20:	843fffc4 	addi	r16,r16,-1
    1a24:	1ce6b03a 	or	r19,r3,r19
    1a28:	80800005 	stb	r2,0(r16)
    1a2c:	9d84b03a 	or	r2,r19,r22
    1a30:	103ff51e 	bne	r2,zero,1a08 <___vfprintf_internal_r+0xbb0>
    1a34:	d8c02817 	ldw	r3,160(sp)
    1a38:	1c07c83a 	sub	r3,r3,r16
    1a3c:	d8c02e15 	stw	r3,184(sp)
    1a40:	003ecc06 	br	1574 <___vfprintf_internal_r+0x71c>
    1a44:	18c03fcc 	andi	r3,r3,255
    1a48:	183e9f26 	beq	r3,zero,14c8 <___vfprintf_internal_r+0x670>
    1a4c:	d9c02785 	stb	r7,158(sp)
    1a50:	003e9d06 	br	14c8 <___vfprintf_internal_r+0x670>
    1a54:	00c00044 	movi	r3,1
    1a58:	01c00ac4 	movi	r7,43
    1a5c:	ac400007 	ldb	r17,0(r21)
    1a60:	003d5e06 	br	fdc <___vfprintf_internal_r+0x184>
    1a64:	94800814 	ori	r18,r18,32
    1a68:	ac400007 	ldb	r17,0(r21)
    1a6c:	003d5b06 	br	fdc <___vfprintf_internal_r+0x184>
    1a70:	d8c02d17 	ldw	r3,180(sp)
    1a74:	d8002785 	stb	zero,158(sp)
    1a78:	1c000017 	ldw	r16,0(r3)
    1a7c:	1cc00104 	addi	r19,r3,4
    1a80:	80041926 	beq	r16,zero,2ae8 <___vfprintf_internal_r+0x1c90>
    1a84:	d9002917 	ldw	r4,164(sp)
    1a88:	2003d016 	blt	r4,zero,29cc <___vfprintf_internal_r+0x1b74>
    1a8c:	200d883a 	mov	r6,r4
    1a90:	000b883a 	mov	r5,zero
    1a94:	8009883a 	mov	r4,r16
    1a98:	da003d15 	stw	r8,244(sp)
    1a9c:	00066680 	call	6668 <memchr>
    1aa0:	da003d17 	ldw	r8,244(sp)
    1aa4:	10045426 	beq	r2,zero,2bf8 <___vfprintf_internal_r+0x1da0>
    1aa8:	1405c83a 	sub	r2,r2,r16
    1aac:	d8802e15 	stw	r2,184(sp)
    1ab0:	1003cc16 	blt	r2,zero,29e4 <___vfprintf_internal_r+0x1b8c>
    1ab4:	df002783 	ldbu	fp,158(sp)
    1ab8:	d8802a15 	stw	r2,168(sp)
    1abc:	dcc02d15 	stw	r19,180(sp)
    1ac0:	d8002915 	stw	zero,164(sp)
    1ac4:	d8003215 	stw	zero,200(sp)
    1ac8:	003eb006 	br	158c <___vfprintf_internal_r+0x734>
    1acc:	18c03fcc 	andi	r3,r3,255
    1ad0:	183f9b26 	beq	r3,zero,1940 <___vfprintf_internal_r+0xae8>
    1ad4:	d9c02785 	stb	r7,158(sp)
    1ad8:	003f9906 	br	1940 <___vfprintf_internal_r+0xae8>
    1adc:	18c03fcc 	andi	r3,r3,255
    1ae0:	1805551e 	bne	r3,zero,3038 <___vfprintf_internal_r+0x21e0>
    1ae4:	014000b4 	movhi	r5,2
    1ae8:	29675804 	addi	r5,r5,-25248
    1aec:	d9403915 	stw	r5,228(sp)
    1af0:	9080080c 	andi	r2,r18,32
    1af4:	103fae1e 	bne	r2,zero,19b0 <___vfprintf_internal_r+0xb58>
    1af8:	9080040c 	andi	r2,r18,16
    1afc:	1002de26 	beq	r2,zero,2678 <___vfprintf_internal_r+0x1820>
    1b00:	d8c02d17 	ldw	r3,180(sp)
    1b04:	002d883a 	mov	r22,zero
    1b08:	1cc00017 	ldw	r19,0(r3)
    1b0c:	18c00104 	addi	r3,r3,4
    1b10:	d8c02d15 	stw	r3,180(sp)
    1b14:	003fab06 	br	19c4 <___vfprintf_internal_r+0xb6c>
    1b18:	38803fcc 	andi	r2,r7,255
    1b1c:	1080201c 	xori	r2,r2,128
    1b20:	10bfe004 	addi	r2,r2,-128
    1b24:	1002d21e 	bne	r2,zero,2670 <___vfprintf_internal_r+0x1818>
    1b28:	00c00044 	movi	r3,1
    1b2c:	01c00804 	movi	r7,32
    1b30:	ac400007 	ldb	r17,0(r21)
    1b34:	003d2906 	br	fdc <___vfprintf_internal_r+0x184>
    1b38:	94800054 	ori	r18,r18,1
    1b3c:	ac400007 	ldb	r17,0(r21)
    1b40:	003d2606 	br	fdc <___vfprintf_internal_r+0x184>
    1b44:	18c03fcc 	andi	r3,r3,255
    1b48:	183e0526 	beq	r3,zero,1360 <___vfprintf_internal_r+0x508>
    1b4c:	d9c02785 	stb	r7,158(sp)
    1b50:	003e0306 	br	1360 <___vfprintf_internal_r+0x508>
    1b54:	94801014 	ori	r18,r18,64
    1b58:	ac400007 	ldb	r17,0(r21)
    1b5c:	003d1f06 	br	fdc <___vfprintf_internal_r+0x184>
    1b60:	ac400007 	ldb	r17,0(r21)
    1b64:	8a438726 	beq	r17,r9,2984 <___vfprintf_internal_r+0x1b2c>
    1b68:	94800414 	ori	r18,r18,16
    1b6c:	003d1b06 	br	fdc <___vfprintf_internal_r+0x184>
    1b70:	18c03fcc 	andi	r3,r3,255
    1b74:	1805341e 	bne	r3,zero,3048 <___vfprintf_internal_r+0x21f0>
    1b78:	9080080c 	andi	r2,r18,32
    1b7c:	1002cd26 	beq	r2,zero,26b4 <___vfprintf_internal_r+0x185c>
    1b80:	d9402d17 	ldw	r5,180(sp)
    1b84:	d9002f17 	ldw	r4,188(sp)
    1b88:	28800017 	ldw	r2,0(r5)
    1b8c:	2007d7fa 	srai	r3,r4,31
    1b90:	29400104 	addi	r5,r5,4
    1b94:	d9402d15 	stw	r5,180(sp)
    1b98:	11000015 	stw	r4,0(r2)
    1b9c:	10c00115 	stw	r3,4(r2)
    1ba0:	003ce506 	br	f38 <___vfprintf_internal_r+0xe0>
    1ba4:	d8c02d17 	ldw	r3,180(sp)
    1ba8:	d9002d17 	ldw	r4,180(sp)
    1bac:	d8002785 	stb	zero,158(sp)
    1bb0:	18800017 	ldw	r2,0(r3)
    1bb4:	21000104 	addi	r4,r4,4
    1bb8:	00c00044 	movi	r3,1
    1bbc:	d8c02a15 	stw	r3,168(sp)
    1bc0:	d8801405 	stb	r2,80(sp)
    1bc4:	d9002d15 	stw	r4,180(sp)
    1bc8:	d8c02e15 	stw	r3,184(sp)
    1bcc:	d8002915 	stw	zero,164(sp)
    1bd0:	d8003215 	stw	zero,200(sp)
    1bd4:	dc001404 	addi	r16,sp,80
    1bd8:	0039883a 	mov	fp,zero
    1bdc:	003e7206 	br	15a8 <___vfprintf_internal_r+0x750>
    1be0:	010000b4 	movhi	r4,2
    1be4:	21275804 	addi	r4,r4,-25248
    1be8:	0039883a 	mov	fp,zero
    1bec:	d9003915 	stw	r4,228(sp)
    1bf0:	04401e04 	movi	r17,120
    1bf4:	003f8206 	br	1a00 <___vfprintf_internal_r+0xba8>
    1bf8:	18c03fcc 	andi	r3,r3,255
    1bfc:	1805061e 	bne	r3,zero,3018 <___vfprintf_internal_r+0x21c0>
    1c00:	883d9126 	beq	r17,zero,1248 <___vfprintf_internal_r+0x3f0>
    1c04:	00c00044 	movi	r3,1
    1c08:	d8c02a15 	stw	r3,168(sp)
    1c0c:	dc401405 	stb	r17,80(sp)
    1c10:	d8002785 	stb	zero,158(sp)
    1c14:	003fec06 	br	1bc8 <___vfprintf_internal_r+0xd70>
    1c18:	014000b4 	movhi	r5,2
    1c1c:	29675804 	addi	r5,r5,-25248
    1c20:	d9403915 	stw	r5,228(sp)
    1c24:	d8c02d15 	stw	r3,180(sp)
    1c28:	1025883a 	mov	r18,r2
    1c2c:	04401e04 	movi	r17,120
    1c30:	9d84b03a 	or	r2,r19,r22
    1c34:	1000fc1e 	bne	r2,zero,2028 <___vfprintf_internal_r+0x11d0>
    1c38:	0039883a 	mov	fp,zero
    1c3c:	00800084 	movi	r2,2
    1c40:	10803fcc 	andi	r2,r2,255
    1c44:	00c00044 	movi	r3,1
    1c48:	10c20f26 	beq	r2,r3,2488 <___vfprintf_internal_r+0x1630>
    1c4c:	00c00084 	movi	r3,2
    1c50:	10fd6326 	beq	r2,r3,11e0 <___vfprintf_internal_r+0x388>
    1c54:	003e2d06 	br	150c <___vfprintf_internal_r+0x6b4>
    1c58:	d8c02017 	ldw	r3,128(sp)
    1c5c:	003e9306 	br	16ac <___vfprintf_internal_r+0x854>
    1c60:	00801944 	movi	r2,101
    1c64:	14407e0e 	bge	r2,r17,1e60 <___vfprintf_internal_r+0x1008>
    1c68:	d9003617 	ldw	r4,216(sp)
    1c6c:	d9403817 	ldw	r5,224(sp)
    1c70:	000d883a 	mov	r6,zero
    1c74:	000f883a 	mov	r7,zero
    1c78:	d8c03c15 	stw	r3,240(sp)
    1c7c:	da003d15 	stw	r8,244(sp)
    1c80:	000c0cc0 	call	c0cc <__eqdf2>
    1c84:	d8c03c17 	ldw	r3,240(sp)
    1c88:	da003d17 	ldw	r8,244(sp)
    1c8c:	1000f71e 	bne	r2,zero,206c <___vfprintf_internal_r+0x1214>
    1c90:	d8801f17 	ldw	r2,124(sp)
    1c94:	010000b4 	movhi	r4,2
    1c98:	21275f04 	addi	r4,r4,-25220
    1c9c:	18c00044 	addi	r3,r3,1
    1ca0:	10800044 	addi	r2,r2,1
    1ca4:	41000015 	stw	r4,0(r8)
    1ca8:	01000044 	movi	r4,1
    1cac:	41000115 	stw	r4,4(r8)
    1cb0:	d8c02015 	stw	r3,128(sp)
    1cb4:	d8801f15 	stw	r2,124(sp)
    1cb8:	010001c4 	movi	r4,7
    1cbc:	2082b816 	blt	r4,r2,27a0 <___vfprintf_internal_r+0x1948>
    1cc0:	42000204 	addi	r8,r8,8
    1cc4:	d8802617 	ldw	r2,152(sp)
    1cc8:	d9403317 	ldw	r5,204(sp)
    1ccc:	11400216 	blt	r2,r5,1cd8 <___vfprintf_internal_r+0xe80>
    1cd0:	9080004c 	andi	r2,r18,1
    1cd4:	103ed526 	beq	r2,zero,182c <___vfprintf_internal_r+0x9d4>
    1cd8:	d8803717 	ldw	r2,220(sp)
    1cdc:	d9003417 	ldw	r4,208(sp)
    1ce0:	d9403717 	ldw	r5,220(sp)
    1ce4:	1887883a 	add	r3,r3,r2
    1ce8:	d8801f17 	ldw	r2,124(sp)
    1cec:	41000015 	stw	r4,0(r8)
    1cf0:	41400115 	stw	r5,4(r8)
    1cf4:	10800044 	addi	r2,r2,1
    1cf8:	d8c02015 	stw	r3,128(sp)
    1cfc:	d8801f15 	stw	r2,124(sp)
    1d00:	010001c4 	movi	r4,7
    1d04:	20832916 	blt	r4,r2,29ac <___vfprintf_internal_r+0x1b54>
    1d08:	42000204 	addi	r8,r8,8
    1d0c:	d8803317 	ldw	r2,204(sp)
    1d10:	143fffc4 	addi	r16,r2,-1
    1d14:	043ec50e 	bge	zero,r16,182c <___vfprintf_internal_r+0x9d4>
    1d18:	04400404 	movi	r17,16
    1d1c:	d8801f17 	ldw	r2,124(sp)
    1d20:	8c00880e 	bge	r17,r16,1f44 <___vfprintf_internal_r+0x10ec>
    1d24:	014000b4 	movhi	r5,2
    1d28:	29675f84 	addi	r5,r5,-25218
    1d2c:	d9402b15 	stw	r5,172(sp)
    1d30:	058001c4 	movi	r22,7
    1d34:	dcc02c17 	ldw	r19,176(sp)
    1d38:	00000306 	br	1d48 <___vfprintf_internal_r+0xef0>
    1d3c:	42000204 	addi	r8,r8,8
    1d40:	843ffc04 	addi	r16,r16,-16
    1d44:	8c00820e 	bge	r17,r16,1f50 <___vfprintf_internal_r+0x10f8>
    1d48:	18c00404 	addi	r3,r3,16
    1d4c:	10800044 	addi	r2,r2,1
    1d50:	45000015 	stw	r20,0(r8)
    1d54:	44400115 	stw	r17,4(r8)
    1d58:	d8c02015 	stw	r3,128(sp)
    1d5c:	d8801f15 	stw	r2,124(sp)
    1d60:	b0bff60e 	bge	r22,r2,1d3c <___vfprintf_internal_r+0xee4>
    1d64:	d9801e04 	addi	r6,sp,120
    1d68:	b80b883a 	mov	r5,r23
    1d6c:	9809883a 	mov	r4,r19
    1d70:	00084540 	call	8454 <__sprint_r>
    1d74:	103d3a1e 	bne	r2,zero,1260 <___vfprintf_internal_r+0x408>
    1d78:	d8c02017 	ldw	r3,128(sp)
    1d7c:	d8801f17 	ldw	r2,124(sp)
    1d80:	da000404 	addi	r8,sp,16
    1d84:	003fee06 	br	1d40 <___vfprintf_internal_r+0xee8>
    1d88:	d9403117 	ldw	r5,196(sp)
    1d8c:	d8802a17 	ldw	r2,168(sp)
    1d90:	28adc83a 	sub	r22,r5,r2
    1d94:	05be630e 	bge	zero,r22,1724 <___vfprintf_internal_r+0x8cc>
    1d98:	07000404 	movi	fp,16
    1d9c:	d8801f17 	ldw	r2,124(sp)
    1da0:	e5838f0e 	bge	fp,r22,2be0 <___vfprintf_internal_r+0x1d88>
    1da4:	014000b4 	movhi	r5,2
    1da8:	29675f84 	addi	r5,r5,-25218
    1dac:	dc403015 	stw	r17,192(sp)
    1db0:	d9402b15 	stw	r5,172(sp)
    1db4:	b023883a 	mov	r17,r22
    1db8:	04c001c4 	movi	r19,7
    1dbc:	a82d883a 	mov	r22,r21
    1dc0:	902b883a 	mov	r21,r18
    1dc4:	8025883a 	mov	r18,r16
    1dc8:	dc002c17 	ldw	r16,176(sp)
    1dcc:	00000306 	br	1ddc <___vfprintf_internal_r+0xf84>
    1dd0:	8c7ffc04 	addi	r17,r17,-16
    1dd4:	42000204 	addi	r8,r8,8
    1dd8:	e440110e 	bge	fp,r17,1e20 <___vfprintf_internal_r+0xfc8>
    1ddc:	18c00404 	addi	r3,r3,16
    1de0:	10800044 	addi	r2,r2,1
    1de4:	45000015 	stw	r20,0(r8)
    1de8:	47000115 	stw	fp,4(r8)
    1dec:	d8c02015 	stw	r3,128(sp)
    1df0:	d8801f15 	stw	r2,124(sp)
    1df4:	98bff60e 	bge	r19,r2,1dd0 <___vfprintf_internal_r+0xf78>
    1df8:	d9801e04 	addi	r6,sp,120
    1dfc:	b80b883a 	mov	r5,r23
    1e00:	8009883a 	mov	r4,r16
    1e04:	00084540 	call	8454 <__sprint_r>
    1e08:	103d151e 	bne	r2,zero,1260 <___vfprintf_internal_r+0x408>
    1e0c:	8c7ffc04 	addi	r17,r17,-16
    1e10:	d8c02017 	ldw	r3,128(sp)
    1e14:	d8801f17 	ldw	r2,124(sp)
    1e18:	da000404 	addi	r8,sp,16
    1e1c:	e47fef16 	blt	fp,r17,1ddc <___vfprintf_internal_r+0xf84>
    1e20:	9021883a 	mov	r16,r18
    1e24:	a825883a 	mov	r18,r21
    1e28:	b02b883a 	mov	r21,r22
    1e2c:	882d883a 	mov	r22,r17
    1e30:	dc403017 	ldw	r17,192(sp)
    1e34:	d9002b17 	ldw	r4,172(sp)
    1e38:	1d87883a 	add	r3,r3,r22
    1e3c:	10800044 	addi	r2,r2,1
    1e40:	41000015 	stw	r4,0(r8)
    1e44:	45800115 	stw	r22,4(r8)
    1e48:	d8c02015 	stw	r3,128(sp)
    1e4c:	d8801f15 	stw	r2,124(sp)
    1e50:	010001c4 	movi	r4,7
    1e54:	20818e16 	blt	r4,r2,2490 <___vfprintf_internal_r+0x1638>
    1e58:	42000204 	addi	r8,r8,8
    1e5c:	003e3106 	br	1724 <___vfprintf_internal_r+0x8cc>
    1e60:	d9403317 	ldw	r5,204(sp)
    1e64:	00800044 	movi	r2,1
    1e68:	18c00044 	addi	r3,r3,1
    1e6c:	1141530e 	bge	r2,r5,23bc <___vfprintf_internal_r+0x1564>
    1e70:	dc401f17 	ldw	r17,124(sp)
    1e74:	00800044 	movi	r2,1
    1e78:	40800115 	stw	r2,4(r8)
    1e7c:	8c400044 	addi	r17,r17,1
    1e80:	44000015 	stw	r16,0(r8)
    1e84:	d8c02015 	stw	r3,128(sp)
    1e88:	dc401f15 	stw	r17,124(sp)
    1e8c:	008001c4 	movi	r2,7
    1e90:	14416b16 	blt	r2,r17,2440 <___vfprintf_internal_r+0x15e8>
    1e94:	42000204 	addi	r8,r8,8
    1e98:	d8803717 	ldw	r2,220(sp)
    1e9c:	d9003417 	ldw	r4,208(sp)
    1ea0:	8c400044 	addi	r17,r17,1
    1ea4:	10c7883a 	add	r3,r2,r3
    1ea8:	40800115 	stw	r2,4(r8)
    1eac:	41000015 	stw	r4,0(r8)
    1eb0:	d8c02015 	stw	r3,128(sp)
    1eb4:	dc401f15 	stw	r17,124(sp)
    1eb8:	008001c4 	movi	r2,7
    1ebc:	14416916 	blt	r2,r17,2464 <___vfprintf_internal_r+0x160c>
    1ec0:	45800204 	addi	r22,r8,8
    1ec4:	d9003617 	ldw	r4,216(sp)
    1ec8:	d9403817 	ldw	r5,224(sp)
    1ecc:	000d883a 	mov	r6,zero
    1ed0:	000f883a 	mov	r7,zero
    1ed4:	d8c03c15 	stw	r3,240(sp)
    1ed8:	000c0cc0 	call	c0cc <__eqdf2>
    1edc:	d8c03c17 	ldw	r3,240(sp)
    1ee0:	1000bc26 	beq	r2,zero,21d4 <___vfprintf_internal_r+0x137c>
    1ee4:	d9403317 	ldw	r5,204(sp)
    1ee8:	84000044 	addi	r16,r16,1
    1eec:	8c400044 	addi	r17,r17,1
    1ef0:	28bfffc4 	addi	r2,r5,-1
    1ef4:	1887883a 	add	r3,r3,r2
    1ef8:	b0800115 	stw	r2,4(r22)
    1efc:	b4000015 	stw	r16,0(r22)
    1f00:	d8c02015 	stw	r3,128(sp)
    1f04:	dc401f15 	stw	r17,124(sp)
    1f08:	008001c4 	movi	r2,7
    1f0c:	14414316 	blt	r2,r17,241c <___vfprintf_internal_r+0x15c4>
    1f10:	b5800204 	addi	r22,r22,8
    1f14:	d9003a17 	ldw	r4,232(sp)
    1f18:	df0022c4 	addi	fp,sp,139
    1f1c:	8c400044 	addi	r17,r17,1
    1f20:	20c7883a 	add	r3,r4,r3
    1f24:	b7000015 	stw	fp,0(r22)
    1f28:	b1000115 	stw	r4,4(r22)
    1f2c:	d8c02015 	stw	r3,128(sp)
    1f30:	dc401f15 	stw	r17,124(sp)
    1f34:	008001c4 	movi	r2,7
    1f38:	14400e16 	blt	r2,r17,1f74 <___vfprintf_internal_r+0x111c>
    1f3c:	b2000204 	addi	r8,r22,8
    1f40:	003e3a06 	br	182c <___vfprintf_internal_r+0x9d4>
    1f44:	010000b4 	movhi	r4,2
    1f48:	21275f84 	addi	r4,r4,-25218
    1f4c:	d9002b15 	stw	r4,172(sp)
    1f50:	d9002b17 	ldw	r4,172(sp)
    1f54:	1c07883a 	add	r3,r3,r16
    1f58:	44000115 	stw	r16,4(r8)
    1f5c:	41000015 	stw	r4,0(r8)
    1f60:	10800044 	addi	r2,r2,1
    1f64:	d8c02015 	stw	r3,128(sp)
    1f68:	d8801f15 	stw	r2,124(sp)
    1f6c:	010001c4 	movi	r4,7
    1f70:	20be2d0e 	bge	r4,r2,1828 <___vfprintf_internal_r+0x9d0>
    1f74:	d9002c17 	ldw	r4,176(sp)
    1f78:	d9801e04 	addi	r6,sp,120
    1f7c:	b80b883a 	mov	r5,r23
    1f80:	00084540 	call	8454 <__sprint_r>
    1f84:	103cb61e 	bne	r2,zero,1260 <___vfprintf_internal_r+0x408>
    1f88:	d8c02017 	ldw	r3,128(sp)
    1f8c:	da000404 	addi	r8,sp,16
    1f90:	003e2606 	br	182c <___vfprintf_internal_r+0x9d4>
    1f94:	d9002c17 	ldw	r4,176(sp)
    1f98:	d9801e04 	addi	r6,sp,120
    1f9c:	b80b883a 	mov	r5,r23
    1fa0:	00084540 	call	8454 <__sprint_r>
    1fa4:	103e5d26 	beq	r2,zero,191c <___vfprintf_internal_r+0xac4>
    1fa8:	003cad06 	br	1260 <___vfprintf_internal_r+0x408>
    1fac:	d9002c17 	ldw	r4,176(sp)
    1fb0:	d9801e04 	addi	r6,sp,120
    1fb4:	b80b883a 	mov	r5,r23
    1fb8:	00084540 	call	8454 <__sprint_r>
    1fbc:	103ca81e 	bne	r2,zero,1260 <___vfprintf_internal_r+0x408>
    1fc0:	d8c02017 	ldw	r3,128(sp)
    1fc4:	da000404 	addi	r8,sp,16
    1fc8:	003e0b06 	br	17f8 <___vfprintf_internal_r+0x9a0>
    1fcc:	d9002c17 	ldw	r4,176(sp)
    1fd0:	d9801e04 	addi	r6,sp,120
    1fd4:	b80b883a 	mov	r5,r23
    1fd8:	00084540 	call	8454 <__sprint_r>
    1fdc:	103ca01e 	bne	r2,zero,1260 <___vfprintf_internal_r+0x408>
    1fe0:	d8c02017 	ldw	r3,128(sp)
    1fe4:	da000404 	addi	r8,sp,16
    1fe8:	003dbd06 	br	16e0 <___vfprintf_internal_r+0x888>
    1fec:	d9002c17 	ldw	r4,176(sp)
    1ff0:	d9801e04 	addi	r6,sp,120
    1ff4:	b80b883a 	mov	r5,r23
    1ff8:	00084540 	call	8454 <__sprint_r>
    1ffc:	103c981e 	bne	r2,zero,1260 <___vfprintf_internal_r+0x408>
    2000:	d8c02017 	ldw	r3,128(sp)
    2004:	da000404 	addi	r8,sp,16
    2008:	003dc306 	br	1718 <___vfprintf_internal_r+0x8c0>
    200c:	d8802917 	ldw	r2,164(sp)
    2010:	d8002785 	stb	zero,158(sp)
    2014:	103f0616 	blt	r2,zero,1c30 <___vfprintf_internal_r+0xdd8>
    2018:	00ffdfc4 	movi	r3,-129
    201c:	9d84b03a 	or	r2,r19,r22
    2020:	90e4703a 	and	r18,r18,r3
    2024:	103c6b26 	beq	r2,zero,11d4 <___vfprintf_internal_r+0x37c>
    2028:	0039883a 	mov	fp,zero
    202c:	003e7406 	br	1a00 <___vfprintf_internal_r+0xba8>
    2030:	9080040c 	andi	r2,r18,16
    2034:	1001b326 	beq	r2,zero,2704 <___vfprintf_internal_r+0x18ac>
    2038:	d9002d17 	ldw	r4,180(sp)
    203c:	d9402917 	ldw	r5,164(sp)
    2040:	d8002785 	stb	zero,158(sp)
    2044:	20800104 	addi	r2,r4,4
    2048:	24c00017 	ldw	r19,0(r4)
    204c:	002d883a 	mov	r22,zero
    2050:	2801b516 	blt	r5,zero,2728 <___vfprintf_internal_r+0x18d0>
    2054:	00ffdfc4 	movi	r3,-129
    2058:	d8802d15 	stw	r2,180(sp)
    205c:	90e4703a 	and	r18,r18,r3
    2060:	983d2726 	beq	r19,zero,1500 <___vfprintf_internal_r+0x6a8>
    2064:	0039883a 	mov	fp,zero
    2068:	003d2a06 	br	1514 <___vfprintf_internal_r+0x6bc>
    206c:	dc402617 	ldw	r17,152(sp)
    2070:	0441d30e 	bge	zero,r17,27c0 <___vfprintf_internal_r+0x1968>
    2074:	dc403217 	ldw	r17,200(sp)
    2078:	d8803317 	ldw	r2,204(sp)
    207c:	1440010e 	bge	r2,r17,2084 <___vfprintf_internal_r+0x122c>
    2080:	1023883a 	mov	r17,r2
    2084:	04400a0e 	bge	zero,r17,20b0 <___vfprintf_internal_r+0x1258>
    2088:	d8801f17 	ldw	r2,124(sp)
    208c:	1c47883a 	add	r3,r3,r17
    2090:	44000015 	stw	r16,0(r8)
    2094:	10800044 	addi	r2,r2,1
    2098:	44400115 	stw	r17,4(r8)
    209c:	d8c02015 	stw	r3,128(sp)
    20a0:	d8801f15 	stw	r2,124(sp)
    20a4:	010001c4 	movi	r4,7
    20a8:	20826516 	blt	r4,r2,2a40 <___vfprintf_internal_r+0x1be8>
    20ac:	42000204 	addi	r8,r8,8
    20b0:	88026116 	blt	r17,zero,2a38 <___vfprintf_internal_r+0x1be0>
    20b4:	d9003217 	ldw	r4,200(sp)
    20b8:	2463c83a 	sub	r17,r4,r17
    20bc:	04407b0e 	bge	zero,r17,22ac <___vfprintf_internal_r+0x1454>
    20c0:	05800404 	movi	r22,16
    20c4:	d8801f17 	ldw	r2,124(sp)
    20c8:	b4419d0e 	bge	r22,r17,2740 <___vfprintf_internal_r+0x18e8>
    20cc:	010000b4 	movhi	r4,2
    20d0:	21275f84 	addi	r4,r4,-25218
    20d4:	d9002b15 	stw	r4,172(sp)
    20d8:	070001c4 	movi	fp,7
    20dc:	dcc02c17 	ldw	r19,176(sp)
    20e0:	00000306 	br	20f0 <___vfprintf_internal_r+0x1298>
    20e4:	42000204 	addi	r8,r8,8
    20e8:	8c7ffc04 	addi	r17,r17,-16
    20ec:	b441970e 	bge	r22,r17,274c <___vfprintf_internal_r+0x18f4>
    20f0:	18c00404 	addi	r3,r3,16
    20f4:	10800044 	addi	r2,r2,1
    20f8:	45000015 	stw	r20,0(r8)
    20fc:	45800115 	stw	r22,4(r8)
    2100:	d8c02015 	stw	r3,128(sp)
    2104:	d8801f15 	stw	r2,124(sp)
    2108:	e0bff60e 	bge	fp,r2,20e4 <___vfprintf_internal_r+0x128c>
    210c:	d9801e04 	addi	r6,sp,120
    2110:	b80b883a 	mov	r5,r23
    2114:	9809883a 	mov	r4,r19
    2118:	00084540 	call	8454 <__sprint_r>
    211c:	103c501e 	bne	r2,zero,1260 <___vfprintf_internal_r+0x408>
    2120:	d8c02017 	ldw	r3,128(sp)
    2124:	d8801f17 	ldw	r2,124(sp)
    2128:	da000404 	addi	r8,sp,16
    212c:	003fee06 	br	20e8 <___vfprintf_internal_r+0x1290>
    2130:	d9002c17 	ldw	r4,176(sp)
    2134:	d9801e04 	addi	r6,sp,120
    2138:	b80b883a 	mov	r5,r23
    213c:	00084540 	call	8454 <__sprint_r>
    2140:	103c471e 	bne	r2,zero,1260 <___vfprintf_internal_r+0x408>
    2144:	d8c02017 	ldw	r3,128(sp)
    2148:	df002787 	ldb	fp,158(sp)
    214c:	da000404 	addi	r8,sp,16
    2150:	003d5606 	br	16ac <___vfprintf_internal_r+0x854>
    2154:	9080040c 	andi	r2,r18,16
    2158:	10016126 	beq	r2,zero,26e0 <___vfprintf_internal_r+0x1888>
    215c:	d8802d17 	ldw	r2,180(sp)
    2160:	14c00017 	ldw	r19,0(r2)
    2164:	10800104 	addi	r2,r2,4
    2168:	d8802d15 	stw	r2,180(sp)
    216c:	982dd7fa 	srai	r22,r19,31
    2170:	b005883a 	mov	r2,r22
    2174:	003c8206 	br	1380 <___vfprintf_internal_r+0x528>
    2178:	9080040c 	andi	r2,r18,16
    217c:	10003526 	beq	r2,zero,2254 <___vfprintf_internal_r+0x13fc>
    2180:	d9402d17 	ldw	r5,180(sp)
    2184:	d8c02917 	ldw	r3,164(sp)
    2188:	d8002785 	stb	zero,158(sp)
    218c:	28800104 	addi	r2,r5,4
    2190:	2cc00017 	ldw	r19,0(r5)
    2194:	002d883a 	mov	r22,zero
    2198:	18003716 	blt	r3,zero,2278 <___vfprintf_internal_r+0x1420>
    219c:	00ffdfc4 	movi	r3,-129
    21a0:	d8802d15 	stw	r2,180(sp)
    21a4:	90e4703a 	and	r18,r18,r3
    21a8:	0039883a 	mov	fp,zero
    21ac:	983df326 	beq	r19,zero,197c <___vfprintf_internal_r+0xb24>
    21b0:	00800244 	movi	r2,9
    21b4:	14fc7b36 	bltu	r2,r19,13a4 <___vfprintf_internal_r+0x54c>
    21b8:	d8c02817 	ldw	r3,160(sp)
    21bc:	dc001dc4 	addi	r16,sp,119
    21c0:	9cc00c04 	addi	r19,r19,48
    21c4:	1c07c83a 	sub	r3,r3,r16
    21c8:	dcc01dc5 	stb	r19,119(sp)
    21cc:	d8c02e15 	stw	r3,184(sp)
    21d0:	003ce806 	br	1574 <___vfprintf_internal_r+0x71c>
    21d4:	d8803317 	ldw	r2,204(sp)
    21d8:	143fffc4 	addi	r16,r2,-1
    21dc:	043f4d0e 	bge	zero,r16,1f14 <___vfprintf_internal_r+0x10bc>
    21e0:	07000404 	movi	fp,16
    21e4:	e400810e 	bge	fp,r16,23ec <___vfprintf_internal_r+0x1594>
    21e8:	014000b4 	movhi	r5,2
    21ec:	29675f84 	addi	r5,r5,-25218
    21f0:	d9402b15 	stw	r5,172(sp)
    21f4:	01c001c4 	movi	r7,7
    21f8:	dcc02c17 	ldw	r19,176(sp)
    21fc:	00000306 	br	220c <___vfprintf_internal_r+0x13b4>
    2200:	b5800204 	addi	r22,r22,8
    2204:	843ffc04 	addi	r16,r16,-16
    2208:	e4007b0e 	bge	fp,r16,23f8 <___vfprintf_internal_r+0x15a0>
    220c:	18c00404 	addi	r3,r3,16
    2210:	8c400044 	addi	r17,r17,1
    2214:	b5000015 	stw	r20,0(r22)
    2218:	b7000115 	stw	fp,4(r22)
    221c:	d8c02015 	stw	r3,128(sp)
    2220:	dc401f15 	stw	r17,124(sp)
    2224:	3c7ff60e 	bge	r7,r17,2200 <___vfprintf_internal_r+0x13a8>
    2228:	d9801e04 	addi	r6,sp,120
    222c:	b80b883a 	mov	r5,r23
    2230:	9809883a 	mov	r4,r19
    2234:	d9c03c15 	stw	r7,240(sp)
    2238:	00084540 	call	8454 <__sprint_r>
    223c:	d9c03c17 	ldw	r7,240(sp)
    2240:	103c071e 	bne	r2,zero,1260 <___vfprintf_internal_r+0x408>
    2244:	d8c02017 	ldw	r3,128(sp)
    2248:	dc401f17 	ldw	r17,124(sp)
    224c:	dd800404 	addi	r22,sp,16
    2250:	003fec06 	br	2204 <___vfprintf_internal_r+0x13ac>
    2254:	9080100c 	andi	r2,r18,64
    2258:	d8002785 	stb	zero,158(sp)
    225c:	10010e26 	beq	r2,zero,2698 <___vfprintf_internal_r+0x1840>
    2260:	d9002d17 	ldw	r4,180(sp)
    2264:	d9402917 	ldw	r5,164(sp)
    2268:	002d883a 	mov	r22,zero
    226c:	20800104 	addi	r2,r4,4
    2270:	24c0000b 	ldhu	r19,0(r4)
    2274:	283fc90e 	bge	r5,zero,219c <___vfprintf_internal_r+0x1344>
    2278:	d8802d15 	stw	r2,180(sp)
    227c:	0039883a 	mov	fp,zero
    2280:	9d84b03a 	or	r2,r19,r22
    2284:	103c461e 	bne	r2,zero,13a0 <___vfprintf_internal_r+0x548>
    2288:	00800044 	movi	r2,1
    228c:	003e6c06 	br	1c40 <___vfprintf_internal_r+0xde8>
    2290:	d9002c17 	ldw	r4,176(sp)
    2294:	d9801e04 	addi	r6,sp,120
    2298:	b80b883a 	mov	r5,r23
    229c:	00084540 	call	8454 <__sprint_r>
    22a0:	103bef1e 	bne	r2,zero,1260 <___vfprintf_internal_r+0x408>
    22a4:	d8c02017 	ldw	r3,128(sp)
    22a8:	da000404 	addi	r8,sp,16
    22ac:	d9003217 	ldw	r4,200(sp)
    22b0:	d8802617 	ldw	r2,152(sp)
    22b4:	d9403317 	ldw	r5,204(sp)
    22b8:	8123883a 	add	r17,r16,r4
    22bc:	11400216 	blt	r2,r5,22c8 <___vfprintf_internal_r+0x1470>
    22c0:	9100004c 	andi	r4,r18,1
    22c4:	20000d26 	beq	r4,zero,22fc <___vfprintf_internal_r+0x14a4>
    22c8:	d9003717 	ldw	r4,220(sp)
    22cc:	d9403417 	ldw	r5,208(sp)
    22d0:	1907883a 	add	r3,r3,r4
    22d4:	d9001f17 	ldw	r4,124(sp)
    22d8:	41400015 	stw	r5,0(r8)
    22dc:	d9403717 	ldw	r5,220(sp)
    22e0:	21000044 	addi	r4,r4,1
    22e4:	d8c02015 	stw	r3,128(sp)
    22e8:	41400115 	stw	r5,4(r8)
    22ec:	d9001f15 	stw	r4,124(sp)
    22f0:	014001c4 	movi	r5,7
    22f4:	2901e816 	blt	r5,r4,2a98 <___vfprintf_internal_r+0x1c40>
    22f8:	42000204 	addi	r8,r8,8
    22fc:	d9003317 	ldw	r4,204(sp)
    2300:	8121883a 	add	r16,r16,r4
    2304:	2085c83a 	sub	r2,r4,r2
    2308:	8461c83a 	sub	r16,r16,r17
    230c:	1400010e 	bge	r2,r16,2314 <___vfprintf_internal_r+0x14bc>
    2310:	1021883a 	mov	r16,r2
    2314:	04000a0e 	bge	zero,r16,2340 <___vfprintf_internal_r+0x14e8>
    2318:	d9001f17 	ldw	r4,124(sp)
    231c:	1c07883a 	add	r3,r3,r16
    2320:	44400015 	stw	r17,0(r8)
    2324:	21000044 	addi	r4,r4,1
    2328:	44000115 	stw	r16,4(r8)
    232c:	d8c02015 	stw	r3,128(sp)
    2330:	d9001f15 	stw	r4,124(sp)
    2334:	014001c4 	movi	r5,7
    2338:	2901fb16 	blt	r5,r4,2b28 <___vfprintf_internal_r+0x1cd0>
    233c:	42000204 	addi	r8,r8,8
    2340:	8001f716 	blt	r16,zero,2b20 <___vfprintf_internal_r+0x1cc8>
    2344:	1421c83a 	sub	r16,r2,r16
    2348:	043d380e 	bge	zero,r16,182c <___vfprintf_internal_r+0x9d4>
    234c:	04400404 	movi	r17,16
    2350:	d8801f17 	ldw	r2,124(sp)
    2354:	8c3efb0e 	bge	r17,r16,1f44 <___vfprintf_internal_r+0x10ec>
    2358:	014000b4 	movhi	r5,2
    235c:	29675f84 	addi	r5,r5,-25218
    2360:	d9402b15 	stw	r5,172(sp)
    2364:	058001c4 	movi	r22,7
    2368:	dcc02c17 	ldw	r19,176(sp)
    236c:	00000306 	br	237c <___vfprintf_internal_r+0x1524>
    2370:	42000204 	addi	r8,r8,8
    2374:	843ffc04 	addi	r16,r16,-16
    2378:	8c3ef50e 	bge	r17,r16,1f50 <___vfprintf_internal_r+0x10f8>
    237c:	18c00404 	addi	r3,r3,16
    2380:	10800044 	addi	r2,r2,1
    2384:	45000015 	stw	r20,0(r8)
    2388:	44400115 	stw	r17,4(r8)
    238c:	d8c02015 	stw	r3,128(sp)
    2390:	d8801f15 	stw	r2,124(sp)
    2394:	b0bff60e 	bge	r22,r2,2370 <___vfprintf_internal_r+0x1518>
    2398:	d9801e04 	addi	r6,sp,120
    239c:	b80b883a 	mov	r5,r23
    23a0:	9809883a 	mov	r4,r19
    23a4:	00084540 	call	8454 <__sprint_r>
    23a8:	103bad1e 	bne	r2,zero,1260 <___vfprintf_internal_r+0x408>
    23ac:	d8c02017 	ldw	r3,128(sp)
    23b0:	d8801f17 	ldw	r2,124(sp)
    23b4:	da000404 	addi	r8,sp,16
    23b8:	003fee06 	br	2374 <___vfprintf_internal_r+0x151c>
    23bc:	9088703a 	and	r4,r18,r2
    23c0:	203eab1e 	bne	r4,zero,1e70 <___vfprintf_internal_r+0x1018>
    23c4:	dc401f17 	ldw	r17,124(sp)
    23c8:	40800115 	stw	r2,4(r8)
    23cc:	44000015 	stw	r16,0(r8)
    23d0:	8c400044 	addi	r17,r17,1
    23d4:	d8c02015 	stw	r3,128(sp)
    23d8:	dc401f15 	stw	r17,124(sp)
    23dc:	008001c4 	movi	r2,7
    23e0:	14400e16 	blt	r2,r17,241c <___vfprintf_internal_r+0x15c4>
    23e4:	45800204 	addi	r22,r8,8
    23e8:	003eca06 	br	1f14 <___vfprintf_internal_r+0x10bc>
    23ec:	010000b4 	movhi	r4,2
    23f0:	21275f84 	addi	r4,r4,-25218
    23f4:	d9002b15 	stw	r4,172(sp)
    23f8:	d8802b17 	ldw	r2,172(sp)
    23fc:	1c07883a 	add	r3,r3,r16
    2400:	8c400044 	addi	r17,r17,1
    2404:	b0800015 	stw	r2,0(r22)
    2408:	b4000115 	stw	r16,4(r22)
    240c:	d8c02015 	stw	r3,128(sp)
    2410:	dc401f15 	stw	r17,124(sp)
    2414:	008001c4 	movi	r2,7
    2418:	147ebd0e 	bge	r2,r17,1f10 <___vfprintf_internal_r+0x10b8>
    241c:	d9002c17 	ldw	r4,176(sp)
    2420:	d9801e04 	addi	r6,sp,120
    2424:	b80b883a 	mov	r5,r23
    2428:	00084540 	call	8454 <__sprint_r>
    242c:	103b8c1e 	bne	r2,zero,1260 <___vfprintf_internal_r+0x408>
    2430:	d8c02017 	ldw	r3,128(sp)
    2434:	dc401f17 	ldw	r17,124(sp)
    2438:	dd800404 	addi	r22,sp,16
    243c:	003eb506 	br	1f14 <___vfprintf_internal_r+0x10bc>
    2440:	d9002c17 	ldw	r4,176(sp)
    2444:	d9801e04 	addi	r6,sp,120
    2448:	b80b883a 	mov	r5,r23
    244c:	00084540 	call	8454 <__sprint_r>
    2450:	103b831e 	bne	r2,zero,1260 <___vfprintf_internal_r+0x408>
    2454:	d8c02017 	ldw	r3,128(sp)
    2458:	dc401f17 	ldw	r17,124(sp)
    245c:	da000404 	addi	r8,sp,16
    2460:	003e8d06 	br	1e98 <___vfprintf_internal_r+0x1040>
    2464:	d9002c17 	ldw	r4,176(sp)
    2468:	d9801e04 	addi	r6,sp,120
    246c:	b80b883a 	mov	r5,r23
    2470:	00084540 	call	8454 <__sprint_r>
    2474:	103b7a1e 	bne	r2,zero,1260 <___vfprintf_internal_r+0x408>
    2478:	d8c02017 	ldw	r3,128(sp)
    247c:	dc401f17 	ldw	r17,124(sp)
    2480:	dd800404 	addi	r22,sp,16
    2484:	003e8f06 	br	1ec4 <___vfprintf_internal_r+0x106c>
    2488:	0027883a 	mov	r19,zero
    248c:	003f4a06 	br	21b8 <___vfprintf_internal_r+0x1360>
    2490:	d9002c17 	ldw	r4,176(sp)
    2494:	d9801e04 	addi	r6,sp,120
    2498:	b80b883a 	mov	r5,r23
    249c:	00084540 	call	8454 <__sprint_r>
    24a0:	103b6f1e 	bne	r2,zero,1260 <___vfprintf_internal_r+0x408>
    24a4:	d8c02017 	ldw	r3,128(sp)
    24a8:	da000404 	addi	r8,sp,16
    24ac:	003c9d06 	br	1724 <___vfprintf_internal_r+0x8cc>
    24b0:	04e7c83a 	sub	r19,zero,r19
    24b4:	9804c03a 	cmpne	r2,r19,zero
    24b8:	05adc83a 	sub	r22,zero,r22
    24bc:	b0adc83a 	sub	r22,r22,r2
    24c0:	d8802917 	ldw	r2,164(sp)
    24c4:	07000b44 	movi	fp,45
    24c8:	df002785 	stb	fp,158(sp)
    24cc:	10017b16 	blt	r2,zero,2abc <___vfprintf_internal_r+0x1c64>
    24d0:	00bfdfc4 	movi	r2,-129
    24d4:	90a4703a 	and	r18,r18,r2
    24d8:	003bb106 	br	13a0 <___vfprintf_internal_r+0x548>
    24dc:	d9003617 	ldw	r4,216(sp)
    24e0:	d9403817 	ldw	r5,224(sp)
    24e4:	da003d15 	stw	r8,244(sp)
    24e8:	00080780 	call	8078 <__fpclassifyd>
    24ec:	da003d17 	ldw	r8,244(sp)
    24f0:	1000f026 	beq	r2,zero,28b4 <___vfprintf_internal_r+0x1a5c>
    24f4:	d9002917 	ldw	r4,164(sp)
    24f8:	05bff7c4 	movi	r22,-33
    24fc:	00bfffc4 	movi	r2,-1
    2500:	8dac703a 	and	r22,r17,r22
    2504:	20820026 	beq	r4,r2,2d08 <___vfprintf_internal_r+0x1eb0>
    2508:	008011c4 	movi	r2,71
    250c:	b081f726 	beq	r22,r2,2cec <___vfprintf_internal_r+0x1e94>
    2510:	d9003817 	ldw	r4,224(sp)
    2514:	90c04014 	ori	r3,r18,256
    2518:	d8c02b15 	stw	r3,172(sp)
    251c:	20021516 	blt	r4,zero,2d74 <___vfprintf_internal_r+0x1f1c>
    2520:	dcc03817 	ldw	r19,224(sp)
    2524:	d8002a05 	stb	zero,168(sp)
    2528:	00801984 	movi	r2,102
    252c:	8881f926 	beq	r17,r2,2d14 <___vfprintf_internal_r+0x1ebc>
    2530:	00801184 	movi	r2,70
    2534:	88821c26 	beq	r17,r2,2da8 <___vfprintf_internal_r+0x1f50>
    2538:	00801144 	movi	r2,69
    253c:	b081ef26 	beq	r22,r2,2cfc <___vfprintf_internal_r+0x1ea4>
    2540:	d8c02917 	ldw	r3,164(sp)
    2544:	d8802104 	addi	r2,sp,132
    2548:	d8800315 	stw	r2,12(sp)
    254c:	d9403617 	ldw	r5,216(sp)
    2550:	d8802504 	addi	r2,sp,148
    2554:	d9002c17 	ldw	r4,176(sp)
    2558:	d8800215 	stw	r2,8(sp)
    255c:	d8802604 	addi	r2,sp,152
    2560:	d8c00015 	stw	r3,0(sp)
    2564:	d8800115 	stw	r2,4(sp)
    2568:	01c00084 	movi	r7,2
    256c:	980d883a 	mov	r6,r19
    2570:	d8c03c15 	stw	r3,240(sp)
    2574:	da003d15 	stw	r8,244(sp)
    2578:	000347c0 	call	347c <_dtoa_r>
    257c:	1021883a 	mov	r16,r2
    2580:	008019c4 	movi	r2,103
    2584:	d8c03c17 	ldw	r3,240(sp)
    2588:	da003d17 	ldw	r8,244(sp)
    258c:	88817126 	beq	r17,r2,2b54 <___vfprintf_internal_r+0x1cfc>
    2590:	008011c4 	movi	r2,71
    2594:	88829226 	beq	r17,r2,2fe0 <___vfprintf_internal_r+0x2188>
    2598:	80f9883a 	add	fp,r16,r3
    259c:	d9003617 	ldw	r4,216(sp)
    25a0:	000d883a 	mov	r6,zero
    25a4:	000f883a 	mov	r7,zero
    25a8:	980b883a 	mov	r5,r19
    25ac:	da003d15 	stw	r8,244(sp)
    25b0:	000c0cc0 	call	c0cc <__eqdf2>
    25b4:	da003d17 	ldw	r8,244(sp)
    25b8:	10018d26 	beq	r2,zero,2bf0 <___vfprintf_internal_r+0x1d98>
    25bc:	d8802117 	ldw	r2,132(sp)
    25c0:	1700062e 	bgeu	r2,fp,25dc <___vfprintf_internal_r+0x1784>
    25c4:	01000c04 	movi	r4,48
    25c8:	10c00044 	addi	r3,r2,1
    25cc:	d8c02115 	stw	r3,132(sp)
    25d0:	11000005 	stb	r4,0(r2)
    25d4:	d8802117 	ldw	r2,132(sp)
    25d8:	173ffb36 	bltu	r2,fp,25c8 <___vfprintf_internal_r+0x1770>
    25dc:	1405c83a 	sub	r2,r2,r16
    25e0:	d8803315 	stw	r2,204(sp)
    25e4:	008011c4 	movi	r2,71
    25e8:	b0817626 	beq	r22,r2,2bc4 <___vfprintf_internal_r+0x1d6c>
    25ec:	00801944 	movi	r2,101
    25f0:	1442810e 	bge	r2,r17,2ff8 <___vfprintf_internal_r+0x21a0>
    25f4:	d8c02617 	ldw	r3,152(sp)
    25f8:	00801984 	movi	r2,102
    25fc:	d8c03215 	stw	r3,200(sp)
    2600:	8881fe26 	beq	r17,r2,2dfc <___vfprintf_internal_r+0x1fa4>
    2604:	d8c03217 	ldw	r3,200(sp)
    2608:	d9003317 	ldw	r4,204(sp)
    260c:	1901dd16 	blt	r3,r4,2d84 <___vfprintf_internal_r+0x1f2c>
    2610:	9480004c 	andi	r18,r18,1
    2614:	90022b1e 	bne	r18,zero,2ec4 <___vfprintf_internal_r+0x206c>
    2618:	1805883a 	mov	r2,r3
    261c:	18028016 	blt	r3,zero,3020 <___vfprintf_internal_r+0x21c8>
    2620:	d8c03217 	ldw	r3,200(sp)
    2624:	044019c4 	movi	r17,103
    2628:	d8c02e15 	stw	r3,184(sp)
    262c:	df002a07 	ldb	fp,168(sp)
    2630:	e001531e 	bne	fp,zero,2b80 <___vfprintf_internal_r+0x1d28>
    2634:	df002783 	ldbu	fp,158(sp)
    2638:	d8802a15 	stw	r2,168(sp)
    263c:	dc802b17 	ldw	r18,172(sp)
    2640:	d8002915 	stw	zero,164(sp)
    2644:	003bd106 	br	158c <___vfprintf_internal_r+0x734>
    2648:	d8802d17 	ldw	r2,180(sp)
    264c:	d8c02d17 	ldw	r3,180(sp)
    2650:	d9002d17 	ldw	r4,180(sp)
    2654:	10800017 	ldw	r2,0(r2)
    2658:	18c00117 	ldw	r3,4(r3)
    265c:	21000204 	addi	r4,r4,8
    2660:	d8803615 	stw	r2,216(sp)
    2664:	d8c03815 	stw	r3,224(sp)
    2668:	d9002d15 	stw	r4,180(sp)
    266c:	003b7506 	br	1444 <___vfprintf_internal_r+0x5ec>
    2670:	ac400007 	ldb	r17,0(r21)
    2674:	003a5906 	br	fdc <___vfprintf_internal_r+0x184>
    2678:	9080100c 	andi	r2,r18,64
    267c:	1000a826 	beq	r2,zero,2920 <___vfprintf_internal_r+0x1ac8>
    2680:	d9002d17 	ldw	r4,180(sp)
    2684:	002d883a 	mov	r22,zero
    2688:	24c0000b 	ldhu	r19,0(r4)
    268c:	21000104 	addi	r4,r4,4
    2690:	d9002d15 	stw	r4,180(sp)
    2694:	003ccb06 	br	19c4 <___vfprintf_internal_r+0xb6c>
    2698:	d8c02d17 	ldw	r3,180(sp)
    269c:	d9002917 	ldw	r4,164(sp)
    26a0:	002d883a 	mov	r22,zero
    26a4:	18800104 	addi	r2,r3,4
    26a8:	1cc00017 	ldw	r19,0(r3)
    26ac:	203ebb0e 	bge	r4,zero,219c <___vfprintf_internal_r+0x1344>
    26b0:	003ef106 	br	2278 <___vfprintf_internal_r+0x1420>
    26b4:	9080040c 	andi	r2,r18,16
    26b8:	1000921e 	bne	r2,zero,2904 <___vfprintf_internal_r+0x1aac>
    26bc:	9480100c 	andi	r18,r18,64
    26c0:	90013926 	beq	r18,zero,2ba8 <___vfprintf_internal_r+0x1d50>
    26c4:	d9002d17 	ldw	r4,180(sp)
    26c8:	d9402f17 	ldw	r5,188(sp)
    26cc:	20800017 	ldw	r2,0(r4)
    26d0:	21000104 	addi	r4,r4,4
    26d4:	d9002d15 	stw	r4,180(sp)
    26d8:	1140000d 	sth	r5,0(r2)
    26dc:	003a1606 	br	f38 <___vfprintf_internal_r+0xe0>
    26e0:	9080100c 	andi	r2,r18,64
    26e4:	10008026 	beq	r2,zero,28e8 <___vfprintf_internal_r+0x1a90>
    26e8:	d8c02d17 	ldw	r3,180(sp)
    26ec:	1cc0000f 	ldh	r19,0(r3)
    26f0:	18c00104 	addi	r3,r3,4
    26f4:	d8c02d15 	stw	r3,180(sp)
    26f8:	982dd7fa 	srai	r22,r19,31
    26fc:	b005883a 	mov	r2,r22
    2700:	003b1f06 	br	1380 <___vfprintf_internal_r+0x528>
    2704:	9080100c 	andi	r2,r18,64
    2708:	d8002785 	stb	zero,158(sp)
    270c:	10008a1e 	bne	r2,zero,2938 <___vfprintf_internal_r+0x1ae0>
    2710:	d9402d17 	ldw	r5,180(sp)
    2714:	d8c02917 	ldw	r3,164(sp)
    2718:	002d883a 	mov	r22,zero
    271c:	28800104 	addi	r2,r5,4
    2720:	2cc00017 	ldw	r19,0(r5)
    2724:	183e4b0e 	bge	r3,zero,2054 <___vfprintf_internal_r+0x11fc>
    2728:	9d86b03a 	or	r3,r19,r22
    272c:	d8802d15 	stw	r2,180(sp)
    2730:	183e4c1e 	bne	r3,zero,2064 <___vfprintf_internal_r+0x120c>
    2734:	0039883a 	mov	fp,zero
    2738:	0005883a 	mov	r2,zero
    273c:	003d4006 	br	1c40 <___vfprintf_internal_r+0xde8>
    2740:	014000b4 	movhi	r5,2
    2744:	29675f84 	addi	r5,r5,-25218
    2748:	d9402b15 	stw	r5,172(sp)
    274c:	d9402b17 	ldw	r5,172(sp)
    2750:	1c47883a 	add	r3,r3,r17
    2754:	10800044 	addi	r2,r2,1
    2758:	41400015 	stw	r5,0(r8)
    275c:	44400115 	stw	r17,4(r8)
    2760:	d8c02015 	stw	r3,128(sp)
    2764:	d8801f15 	stw	r2,124(sp)
    2768:	010001c4 	movi	r4,7
    276c:	20bec816 	blt	r4,r2,2290 <___vfprintf_internal_r+0x1438>
    2770:	42000204 	addi	r8,r8,8
    2774:	003ecd06 	br	22ac <___vfprintf_internal_r+0x1454>
    2778:	d9002917 	ldw	r4,164(sp)
    277c:	d8002785 	stb	zero,158(sp)
    2780:	203d2d16 	blt	r4,zero,1c38 <___vfprintf_internal_r+0xde0>
    2784:	00bfdfc4 	movi	r2,-129
    2788:	90a4703a 	and	r18,r18,r2
    278c:	003a9106 	br	11d4 <___vfprintf_internal_r+0x37c>
    2790:	010000b4 	movhi	r4,2
    2794:	21275f84 	addi	r4,r4,-25218
    2798:	d9002b15 	stw	r4,172(sp)
    279c:	003c0c06 	br	17d0 <___vfprintf_internal_r+0x978>
    27a0:	d9002c17 	ldw	r4,176(sp)
    27a4:	d9801e04 	addi	r6,sp,120
    27a8:	b80b883a 	mov	r5,r23
    27ac:	00084540 	call	8454 <__sprint_r>
    27b0:	103aab1e 	bne	r2,zero,1260 <___vfprintf_internal_r+0x408>
    27b4:	d8c02017 	ldw	r3,128(sp)
    27b8:	da000404 	addi	r8,sp,16
    27bc:	003d4106 	br	1cc4 <___vfprintf_internal_r+0xe6c>
    27c0:	d8801f17 	ldw	r2,124(sp)
    27c4:	014000b4 	movhi	r5,2
    27c8:	01000044 	movi	r4,1
    27cc:	18c00044 	addi	r3,r3,1
    27d0:	10800044 	addi	r2,r2,1
    27d4:	29675f04 	addi	r5,r5,-25220
    27d8:	41000115 	stw	r4,4(r8)
    27dc:	41400015 	stw	r5,0(r8)
    27e0:	d8c02015 	stw	r3,128(sp)
    27e4:	d8801f15 	stw	r2,124(sp)
    27e8:	010001c4 	movi	r4,7
    27ec:	20805c16 	blt	r4,r2,2960 <___vfprintf_internal_r+0x1b08>
    27f0:	42000204 	addi	r8,r8,8
    27f4:	8800041e 	bne	r17,zero,2808 <___vfprintf_internal_r+0x19b0>
    27f8:	d8803317 	ldw	r2,204(sp)
    27fc:	1000021e 	bne	r2,zero,2808 <___vfprintf_internal_r+0x19b0>
    2800:	9080004c 	andi	r2,r18,1
    2804:	103c0926 	beq	r2,zero,182c <___vfprintf_internal_r+0x9d4>
    2808:	d9003717 	ldw	r4,220(sp)
    280c:	d8801f17 	ldw	r2,124(sp)
    2810:	d9403417 	ldw	r5,208(sp)
    2814:	20c7883a 	add	r3,r4,r3
    2818:	10800044 	addi	r2,r2,1
    281c:	41000115 	stw	r4,4(r8)
    2820:	41400015 	stw	r5,0(r8)
    2824:	d8c02015 	stw	r3,128(sp)
    2828:	d8801f15 	stw	r2,124(sp)
    282c:	010001c4 	movi	r4,7
    2830:	20812116 	blt	r4,r2,2cb8 <___vfprintf_internal_r+0x1e60>
    2834:	42000204 	addi	r8,r8,8
    2838:	0463c83a 	sub	r17,zero,r17
    283c:	0440730e 	bge	zero,r17,2a0c <___vfprintf_internal_r+0x1bb4>
    2840:	05800404 	movi	r22,16
    2844:	b440860e 	bge	r22,r17,2a60 <___vfprintf_internal_r+0x1c08>
    2848:	014000b4 	movhi	r5,2
    284c:	29675f84 	addi	r5,r5,-25218
    2850:	d9402b15 	stw	r5,172(sp)
    2854:	070001c4 	movi	fp,7
    2858:	dcc02c17 	ldw	r19,176(sp)
    285c:	00000306 	br	286c <___vfprintf_internal_r+0x1a14>
    2860:	42000204 	addi	r8,r8,8
    2864:	8c7ffc04 	addi	r17,r17,-16
    2868:	b440800e 	bge	r22,r17,2a6c <___vfprintf_internal_r+0x1c14>
    286c:	18c00404 	addi	r3,r3,16
    2870:	10800044 	addi	r2,r2,1
    2874:	45000015 	stw	r20,0(r8)
    2878:	45800115 	stw	r22,4(r8)
    287c:	d8c02015 	stw	r3,128(sp)
    2880:	d8801f15 	stw	r2,124(sp)
    2884:	e0bff60e 	bge	fp,r2,2860 <___vfprintf_internal_r+0x1a08>
    2888:	d9801e04 	addi	r6,sp,120
    288c:	b80b883a 	mov	r5,r23
    2890:	9809883a 	mov	r4,r19
    2894:	00084540 	call	8454 <__sprint_r>
    2898:	103a711e 	bne	r2,zero,1260 <___vfprintf_internal_r+0x408>
    289c:	d8c02017 	ldw	r3,128(sp)
    28a0:	d8801f17 	ldw	r2,124(sp)
    28a4:	da000404 	addi	r8,sp,16
    28a8:	003fee06 	br	2864 <___vfprintf_internal_r+0x1a0c>
    28ac:	00bfffc4 	movi	r2,-1
    28b0:	003a6f06 	br	1270 <___vfprintf_internal_r+0x418>
    28b4:	008011c4 	movi	r2,71
    28b8:	1440b816 	blt	r2,r17,2b9c <___vfprintf_internal_r+0x1d44>
    28bc:	040000b4 	movhi	r16,2
    28c0:	84275104 	addi	r16,r16,-25276
    28c4:	00c000c4 	movi	r3,3
    28c8:	00bfdfc4 	movi	r2,-129
    28cc:	d8c02a15 	stw	r3,168(sp)
    28d0:	90a4703a 	and	r18,r18,r2
    28d4:	df002783 	ldbu	fp,158(sp)
    28d8:	d8c02e15 	stw	r3,184(sp)
    28dc:	d8002915 	stw	zero,164(sp)
    28e0:	d8003215 	stw	zero,200(sp)
    28e4:	003b2906 	br	158c <___vfprintf_internal_r+0x734>
    28e8:	d9002d17 	ldw	r4,180(sp)
    28ec:	24c00017 	ldw	r19,0(r4)
    28f0:	21000104 	addi	r4,r4,4
    28f4:	d9002d15 	stw	r4,180(sp)
    28f8:	982dd7fa 	srai	r22,r19,31
    28fc:	b005883a 	mov	r2,r22
    2900:	003a9f06 	br	1380 <___vfprintf_internal_r+0x528>
    2904:	d9402d17 	ldw	r5,180(sp)
    2908:	d8c02f17 	ldw	r3,188(sp)
    290c:	28800017 	ldw	r2,0(r5)
    2910:	29400104 	addi	r5,r5,4
    2914:	d9402d15 	stw	r5,180(sp)
    2918:	10c00015 	stw	r3,0(r2)
    291c:	00398606 	br	f38 <___vfprintf_internal_r+0xe0>
    2920:	d9402d17 	ldw	r5,180(sp)
    2924:	002d883a 	mov	r22,zero
    2928:	2cc00017 	ldw	r19,0(r5)
    292c:	29400104 	addi	r5,r5,4
    2930:	d9402d15 	stw	r5,180(sp)
    2934:	003c2306 	br	19c4 <___vfprintf_internal_r+0xb6c>
    2938:	d8c02d17 	ldw	r3,180(sp)
    293c:	d9002917 	ldw	r4,164(sp)
    2940:	002d883a 	mov	r22,zero
    2944:	18800104 	addi	r2,r3,4
    2948:	1cc0000b 	ldhu	r19,0(r3)
    294c:	203dc10e 	bge	r4,zero,2054 <___vfprintf_internal_r+0x11fc>
    2950:	003f7506 	br	2728 <___vfprintf_internal_r+0x18d0>
    2954:	040000b4 	movhi	r16,2
    2958:	84274f04 	addi	r16,r16,-25284
    295c:	003acc06 	br	1490 <___vfprintf_internal_r+0x638>
    2960:	d9002c17 	ldw	r4,176(sp)
    2964:	d9801e04 	addi	r6,sp,120
    2968:	b80b883a 	mov	r5,r23
    296c:	00084540 	call	8454 <__sprint_r>
    2970:	103a3b1e 	bne	r2,zero,1260 <___vfprintf_internal_r+0x408>
    2974:	dc402617 	ldw	r17,152(sp)
    2978:	d8c02017 	ldw	r3,128(sp)
    297c:	da000404 	addi	r8,sp,16
    2980:	003f9c06 	br	27f4 <___vfprintf_internal_r+0x199c>
    2984:	ac400043 	ldbu	r17,1(r21)
    2988:	94800814 	ori	r18,r18,32
    298c:	ad400044 	addi	r21,r21,1
    2990:	8c403fcc 	andi	r17,r17,255
    2994:	8c40201c 	xori	r17,r17,128
    2998:	8c7fe004 	addi	r17,r17,-128
    299c:	00398f06 	br	fdc <___vfprintf_internal_r+0x184>
    29a0:	d8c02d15 	stw	r3,180(sp)
    29a4:	0039883a 	mov	fp,zero
    29a8:	003e3506 	br	2280 <___vfprintf_internal_r+0x1428>
    29ac:	d9002c17 	ldw	r4,176(sp)
    29b0:	d9801e04 	addi	r6,sp,120
    29b4:	b80b883a 	mov	r5,r23
    29b8:	00084540 	call	8454 <__sprint_r>
    29bc:	103a281e 	bne	r2,zero,1260 <___vfprintf_internal_r+0x408>
    29c0:	d8c02017 	ldw	r3,128(sp)
    29c4:	da000404 	addi	r8,sp,16
    29c8:	003cd006 	br	1d0c <___vfprintf_internal_r+0xeb4>
    29cc:	8009883a 	mov	r4,r16
    29d0:	da003d15 	stw	r8,244(sp)
    29d4:	0000dc00 	call	dc0 <strlen>
    29d8:	d8802e15 	stw	r2,184(sp)
    29dc:	da003d17 	ldw	r8,244(sp)
    29e0:	103c340e 	bge	r2,zero,1ab4 <___vfprintf_internal_r+0xc5c>
    29e4:	0005883a 	mov	r2,zero
    29e8:	003c3206 	br	1ab4 <___vfprintf_internal_r+0xc5c>
    29ec:	d9002c17 	ldw	r4,176(sp)
    29f0:	d9801e04 	addi	r6,sp,120
    29f4:	b80b883a 	mov	r5,r23
    29f8:	00084540 	call	8454 <__sprint_r>
    29fc:	103a181e 	bne	r2,zero,1260 <___vfprintf_internal_r+0x408>
    2a00:	d8c02017 	ldw	r3,128(sp)
    2a04:	d8801f17 	ldw	r2,124(sp)
    2a08:	da000404 	addi	r8,sp,16
    2a0c:	d9403317 	ldw	r5,204(sp)
    2a10:	10800044 	addi	r2,r2,1
    2a14:	44000015 	stw	r16,0(r8)
    2a18:	28c7883a 	add	r3,r5,r3
    2a1c:	003b7d06 	br	1814 <___vfprintf_internal_r+0x9bc>
    2a20:	010000b4 	movhi	r4,2
    2a24:	21276384 	addi	r4,r4,-25202
    2a28:	d9003515 	stw	r4,212(sp)
    2a2c:	003b1406 	br	1680 <___vfprintf_internal_r+0x828>
    2a30:	013fffc4 	movi	r4,-1
    2a34:	003a3506 	br	130c <___vfprintf_internal_r+0x4b4>
    2a38:	0023883a 	mov	r17,zero
    2a3c:	003d9d06 	br	20b4 <___vfprintf_internal_r+0x125c>
    2a40:	d9002c17 	ldw	r4,176(sp)
    2a44:	d9801e04 	addi	r6,sp,120
    2a48:	b80b883a 	mov	r5,r23
    2a4c:	00084540 	call	8454 <__sprint_r>
    2a50:	103a031e 	bne	r2,zero,1260 <___vfprintf_internal_r+0x408>
    2a54:	d8c02017 	ldw	r3,128(sp)
    2a58:	da000404 	addi	r8,sp,16
    2a5c:	003d9406 	br	20b0 <___vfprintf_internal_r+0x1258>
    2a60:	010000b4 	movhi	r4,2
    2a64:	21275f84 	addi	r4,r4,-25218
    2a68:	d9002b15 	stw	r4,172(sp)
    2a6c:	d9002b17 	ldw	r4,172(sp)
    2a70:	1c47883a 	add	r3,r3,r17
    2a74:	10800044 	addi	r2,r2,1
    2a78:	41000015 	stw	r4,0(r8)
    2a7c:	44400115 	stw	r17,4(r8)
    2a80:	d8c02015 	stw	r3,128(sp)
    2a84:	d8801f15 	stw	r2,124(sp)
    2a88:	010001c4 	movi	r4,7
    2a8c:	20bfd716 	blt	r4,r2,29ec <___vfprintf_internal_r+0x1b94>
    2a90:	42000204 	addi	r8,r8,8
    2a94:	003fdd06 	br	2a0c <___vfprintf_internal_r+0x1bb4>
    2a98:	d9002c17 	ldw	r4,176(sp)
    2a9c:	d9801e04 	addi	r6,sp,120
    2aa0:	b80b883a 	mov	r5,r23
    2aa4:	00084540 	call	8454 <__sprint_r>
    2aa8:	1039ed1e 	bne	r2,zero,1260 <___vfprintf_internal_r+0x408>
    2aac:	d8802617 	ldw	r2,152(sp)
    2ab0:	d8c02017 	ldw	r3,128(sp)
    2ab4:	da000404 	addi	r8,sp,16
    2ab8:	003e1006 	br	22fc <___vfprintf_internal_r+0x14a4>
    2abc:	00800044 	movi	r2,1
    2ac0:	10803fcc 	andi	r2,r2,255
    2ac4:	00c00044 	movi	r3,1
    2ac8:	10fa3526 	beq	r2,r3,13a0 <___vfprintf_internal_r+0x548>
    2acc:	00c00084 	movi	r3,2
    2ad0:	10fbcb26 	beq	r2,r3,1a00 <___vfprintf_internal_r+0xba8>
    2ad4:	003a8f06 	br	1514 <___vfprintf_internal_r+0x6bc>
    2ad8:	010000b4 	movhi	r4,2
    2adc:	21276384 	addi	r4,r4,-25202
    2ae0:	d9003515 	stw	r4,212(sp)
    2ae4:	003b7606 	br	18c0 <___vfprintf_internal_r+0xa68>
    2ae8:	d8802917 	ldw	r2,164(sp)
    2aec:	00c00184 	movi	r3,6
    2af0:	1880012e 	bgeu	r3,r2,2af8 <___vfprintf_internal_r+0x1ca0>
    2af4:	1805883a 	mov	r2,r3
    2af8:	d8802e15 	stw	r2,184(sp)
    2afc:	1000ef16 	blt	r2,zero,2ebc <___vfprintf_internal_r+0x2064>
    2b00:	040000b4 	movhi	r16,2
    2b04:	d8802a15 	stw	r2,168(sp)
    2b08:	dcc02d15 	stw	r19,180(sp)
    2b0c:	d8002915 	stw	zero,164(sp)
    2b10:	d8003215 	stw	zero,200(sp)
    2b14:	84275d04 	addi	r16,r16,-25228
    2b18:	0039883a 	mov	fp,zero
    2b1c:	003aa206 	br	15a8 <___vfprintf_internal_r+0x750>
    2b20:	0021883a 	mov	r16,zero
    2b24:	003e0706 	br	2344 <___vfprintf_internal_r+0x14ec>
    2b28:	d9002c17 	ldw	r4,176(sp)
    2b2c:	d9801e04 	addi	r6,sp,120
    2b30:	b80b883a 	mov	r5,r23
    2b34:	00084540 	call	8454 <__sprint_r>
    2b38:	1039c91e 	bne	r2,zero,1260 <___vfprintf_internal_r+0x408>
    2b3c:	d8802617 	ldw	r2,152(sp)
    2b40:	d9403317 	ldw	r5,204(sp)
    2b44:	d8c02017 	ldw	r3,128(sp)
    2b48:	da000404 	addi	r8,sp,16
    2b4c:	2885c83a 	sub	r2,r5,r2
    2b50:	003dfb06 	br	2340 <___vfprintf_internal_r+0x14e8>
    2b54:	9080004c 	andi	r2,r18,1
    2b58:	103e8f1e 	bne	r2,zero,2598 <___vfprintf_internal_r+0x1740>
    2b5c:	d8802117 	ldw	r2,132(sp)
    2b60:	003e9e06 	br	25dc <___vfprintf_internal_r+0x1784>
    2b64:	1025883a 	mov	r18,r2
    2b68:	0039883a 	mov	fp,zero
    2b6c:	00800084 	movi	r2,2
    2b70:	003fd306 	br	2ac0 <___vfprintf_internal_r+0x1c68>
    2b74:	07000b44 	movi	fp,45
    2b78:	df002785 	stb	fp,158(sp)
    2b7c:	003a4006 	br	1480 <___vfprintf_internal_r+0x628>
    2b80:	00c00b44 	movi	r3,45
    2b84:	d8c02785 	stb	r3,158(sp)
    2b88:	d8802a15 	stw	r2,168(sp)
    2b8c:	dc802b17 	ldw	r18,172(sp)
    2b90:	d8002915 	stw	zero,164(sp)
    2b94:	07000b44 	movi	fp,45
    2b98:	003a8006 	br	159c <___vfprintf_internal_r+0x744>
    2b9c:	040000b4 	movhi	r16,2
    2ba0:	84275204 	addi	r16,r16,-25272
    2ba4:	003f4706 	br	28c4 <___vfprintf_internal_r+0x1a6c>
    2ba8:	d8c02d17 	ldw	r3,180(sp)
    2bac:	d9002f17 	ldw	r4,188(sp)
    2bb0:	18800017 	ldw	r2,0(r3)
    2bb4:	18c00104 	addi	r3,r3,4
    2bb8:	d8c02d15 	stw	r3,180(sp)
    2bbc:	11000015 	stw	r4,0(r2)
    2bc0:	0038dd06 	br	f38 <___vfprintf_internal_r+0xe0>
    2bc4:	dd802617 	ldw	r22,152(sp)
    2bc8:	00bfff44 	movi	r2,-3
    2bcc:	b0801c16 	blt	r22,r2,2c40 <___vfprintf_internal_r+0x1de8>
    2bd0:	d9402917 	ldw	r5,164(sp)
    2bd4:	2d801a16 	blt	r5,r22,2c40 <___vfprintf_internal_r+0x1de8>
    2bd8:	dd803215 	stw	r22,200(sp)
    2bdc:	003e8906 	br	2604 <___vfprintf_internal_r+0x17ac>
    2be0:	010000b4 	movhi	r4,2
    2be4:	21275f84 	addi	r4,r4,-25218
    2be8:	d9002b15 	stw	r4,172(sp)
    2bec:	003c9106 	br	1e34 <___vfprintf_internal_r+0xfdc>
    2bf0:	e005883a 	mov	r2,fp
    2bf4:	003e7906 	br	25dc <___vfprintf_internal_r+0x1784>
    2bf8:	d9402917 	ldw	r5,164(sp)
    2bfc:	df002783 	ldbu	fp,158(sp)
    2c00:	dcc02d15 	stw	r19,180(sp)
    2c04:	d9402a15 	stw	r5,168(sp)
    2c08:	d9402e15 	stw	r5,184(sp)
    2c0c:	d8002915 	stw	zero,164(sp)
    2c10:	d8003215 	stw	zero,200(sp)
    2c14:	003a5d06 	br	158c <___vfprintf_internal_r+0x734>
    2c18:	9080004c 	andi	r2,r18,1
    2c1c:	0039883a 	mov	fp,zero
    2c20:	10000426 	beq	r2,zero,2c34 <___vfprintf_internal_r+0x1ddc>
    2c24:	00800c04 	movi	r2,48
    2c28:	dc001dc4 	addi	r16,sp,119
    2c2c:	d8801dc5 	stb	r2,119(sp)
    2c30:	003b8006 	br	1a34 <___vfprintf_internal_r+0xbdc>
    2c34:	d8002e15 	stw	zero,184(sp)
    2c38:	dc001e04 	addi	r16,sp,120
    2c3c:	003a4d06 	br	1574 <___vfprintf_internal_r+0x71c>
    2c40:	8c7fff84 	addi	r17,r17,-2
    2c44:	b5bfffc4 	addi	r22,r22,-1
    2c48:	dd802615 	stw	r22,152(sp)
    2c4c:	dc4022c5 	stb	r17,139(sp)
    2c50:	b000bf16 	blt	r22,zero,2f50 <___vfprintf_internal_r+0x20f8>
    2c54:	00800ac4 	movi	r2,43
    2c58:	d8802305 	stb	r2,140(sp)
    2c5c:	00800244 	movi	r2,9
    2c60:	15807016 	blt	r2,r22,2e24 <___vfprintf_internal_r+0x1fcc>
    2c64:	00800c04 	movi	r2,48
    2c68:	b5800c04 	addi	r22,r22,48
    2c6c:	d8802345 	stb	r2,141(sp)
    2c70:	dd802385 	stb	r22,142(sp)
    2c74:	d88023c4 	addi	r2,sp,143
    2c78:	df0022c4 	addi	fp,sp,139
    2c7c:	d8c03317 	ldw	r3,204(sp)
    2c80:	1739c83a 	sub	fp,r2,fp
    2c84:	d9003317 	ldw	r4,204(sp)
    2c88:	e0c7883a 	add	r3,fp,r3
    2c8c:	df003a15 	stw	fp,232(sp)
    2c90:	d8c02e15 	stw	r3,184(sp)
    2c94:	00800044 	movi	r2,1
    2c98:	1100b30e 	bge	r2,r4,2f68 <___vfprintf_internal_r+0x2110>
    2c9c:	d8c02e17 	ldw	r3,184(sp)
    2ca0:	18c00044 	addi	r3,r3,1
    2ca4:	d8c02e15 	stw	r3,184(sp)
    2ca8:	1805883a 	mov	r2,r3
    2cac:	1800ac16 	blt	r3,zero,2f60 <___vfprintf_internal_r+0x2108>
    2cb0:	d8003215 	stw	zero,200(sp)
    2cb4:	003e5d06 	br	262c <___vfprintf_internal_r+0x17d4>
    2cb8:	d9002c17 	ldw	r4,176(sp)
    2cbc:	d9801e04 	addi	r6,sp,120
    2cc0:	b80b883a 	mov	r5,r23
    2cc4:	00084540 	call	8454 <__sprint_r>
    2cc8:	1039651e 	bne	r2,zero,1260 <___vfprintf_internal_r+0x408>
    2ccc:	dc402617 	ldw	r17,152(sp)
    2cd0:	d8c02017 	ldw	r3,128(sp)
    2cd4:	d8801f17 	ldw	r2,124(sp)
    2cd8:	da000404 	addi	r8,sp,16
    2cdc:	003ed606 	br	2838 <___vfprintf_internal_r+0x19e0>
    2ce0:	582b883a 	mov	r21,r11
    2ce4:	d8002915 	stw	zero,164(sp)
    2ce8:	0038bd06 	br	fe0 <___vfprintf_internal_r+0x188>
    2cec:	d8802917 	ldw	r2,164(sp)
    2cf0:	103e071e 	bne	r2,zero,2510 <___vfprintf_internal_r+0x16b8>
    2cf4:	dc002915 	stw	r16,164(sp)
    2cf8:	003e0506 	br	2510 <___vfprintf_internal_r+0x16b8>
    2cfc:	d9002917 	ldw	r4,164(sp)
    2d00:	20c00044 	addi	r3,r4,1
    2d04:	003e0f06 	br	2544 <___vfprintf_internal_r+0x16ec>
    2d08:	01400184 	movi	r5,6
    2d0c:	d9402915 	stw	r5,164(sp)
    2d10:	003dff06 	br	2510 <___vfprintf_internal_r+0x16b8>
    2d14:	d8802104 	addi	r2,sp,132
    2d18:	d8800315 	stw	r2,12(sp)
    2d1c:	d8802504 	addi	r2,sp,148
    2d20:	d8800215 	stw	r2,8(sp)
    2d24:	d8802604 	addi	r2,sp,152
    2d28:	d8800115 	stw	r2,4(sp)
    2d2c:	d8802917 	ldw	r2,164(sp)
    2d30:	d9403617 	ldw	r5,216(sp)
    2d34:	d9002c17 	ldw	r4,176(sp)
    2d38:	d8800015 	stw	r2,0(sp)
    2d3c:	01c000c4 	movi	r7,3
    2d40:	980d883a 	mov	r6,r19
    2d44:	da003d15 	stw	r8,244(sp)
    2d48:	000347c0 	call	347c <_dtoa_r>
    2d4c:	d8c02917 	ldw	r3,164(sp)
    2d50:	da003d17 	ldw	r8,244(sp)
    2d54:	1021883a 	mov	r16,r2
    2d58:	10f9883a 	add	fp,r2,r3
    2d5c:	81000007 	ldb	r4,0(r16)
    2d60:	00800c04 	movi	r2,48
    2d64:	20805e26 	beq	r4,r2,2ee0 <___vfprintf_internal_r+0x2088>
    2d68:	d8c02617 	ldw	r3,152(sp)
    2d6c:	e0f9883a 	add	fp,fp,r3
    2d70:	003e0a06 	br	259c <___vfprintf_internal_r+0x1744>
    2d74:	00c00b44 	movi	r3,45
    2d78:	24e0003c 	xorhi	r19,r4,32768
    2d7c:	d8c02a05 	stb	r3,168(sp)
    2d80:	003de906 	br	2528 <___vfprintf_internal_r+0x16d0>
    2d84:	d8c03217 	ldw	r3,200(sp)
    2d88:	00c07a0e 	bge	zero,r3,2f74 <___vfprintf_internal_r+0x211c>
    2d8c:	00800044 	movi	r2,1
    2d90:	d9003317 	ldw	r4,204(sp)
    2d94:	1105883a 	add	r2,r2,r4
    2d98:	d8802e15 	stw	r2,184(sp)
    2d9c:	10004e16 	blt	r2,zero,2ed8 <___vfprintf_internal_r+0x2080>
    2da0:	044019c4 	movi	r17,103
    2da4:	003e2106 	br	262c <___vfprintf_internal_r+0x17d4>
    2da8:	d9002917 	ldw	r4,164(sp)
    2dac:	d8802104 	addi	r2,sp,132
    2db0:	d8800315 	stw	r2,12(sp)
    2db4:	d9000015 	stw	r4,0(sp)
    2db8:	d8802504 	addi	r2,sp,148
    2dbc:	d9403617 	ldw	r5,216(sp)
    2dc0:	d9002c17 	ldw	r4,176(sp)
    2dc4:	d8800215 	stw	r2,8(sp)
    2dc8:	d8802604 	addi	r2,sp,152
    2dcc:	d8800115 	stw	r2,4(sp)
    2dd0:	01c000c4 	movi	r7,3
    2dd4:	980d883a 	mov	r6,r19
    2dd8:	da003d15 	stw	r8,244(sp)
    2ddc:	000347c0 	call	347c <_dtoa_r>
    2de0:	d8c02917 	ldw	r3,164(sp)
    2de4:	da003d17 	ldw	r8,244(sp)
    2de8:	1021883a 	mov	r16,r2
    2dec:	00801184 	movi	r2,70
    2df0:	80f9883a 	add	fp,r16,r3
    2df4:	88bfd926 	beq	r17,r2,2d5c <___vfprintf_internal_r+0x1f04>
    2df8:	003de806 	br	259c <___vfprintf_internal_r+0x1744>
    2dfc:	d9002917 	ldw	r4,164(sp)
    2e00:	00c04d0e 	bge	zero,r3,2f38 <___vfprintf_internal_r+0x20e0>
    2e04:	2000441e 	bne	r4,zero,2f18 <___vfprintf_internal_r+0x20c0>
    2e08:	9480004c 	andi	r18,r18,1
    2e0c:	9000421e 	bne	r18,zero,2f18 <___vfprintf_internal_r+0x20c0>
    2e10:	1805883a 	mov	r2,r3
    2e14:	18007016 	blt	r3,zero,2fd8 <___vfprintf_internal_r+0x2180>
    2e18:	d8c03217 	ldw	r3,200(sp)
    2e1c:	d8c02e15 	stw	r3,184(sp)
    2e20:	003e0206 	br	262c <___vfprintf_internal_r+0x17d4>
    2e24:	df0022c4 	addi	fp,sp,139
    2e28:	dc002915 	stw	r16,164(sp)
    2e2c:	4027883a 	mov	r19,r8
    2e30:	e021883a 	mov	r16,fp
    2e34:	b009883a 	mov	r4,r22
    2e38:	01400284 	movi	r5,10
    2e3c:	000ae080 	call	ae08 <__modsi3>
    2e40:	10800c04 	addi	r2,r2,48
    2e44:	843fffc4 	addi	r16,r16,-1
    2e48:	b009883a 	mov	r4,r22
    2e4c:	01400284 	movi	r5,10
    2e50:	80800005 	stb	r2,0(r16)
    2e54:	000ad840 	call	ad84 <__divsi3>
    2e58:	102d883a 	mov	r22,r2
    2e5c:	00800244 	movi	r2,9
    2e60:	15bff416 	blt	r2,r22,2e34 <___vfprintf_internal_r+0x1fdc>
    2e64:	9811883a 	mov	r8,r19
    2e68:	b0800c04 	addi	r2,r22,48
    2e6c:	8027883a 	mov	r19,r16
    2e70:	997fffc4 	addi	r5,r19,-1
    2e74:	98bfffc5 	stb	r2,-1(r19)
    2e78:	dc002917 	ldw	r16,164(sp)
    2e7c:	2f006a2e 	bgeu	r5,fp,3028 <___vfprintf_internal_r+0x21d0>
    2e80:	d9c02384 	addi	r7,sp,142
    2e84:	3ccfc83a 	sub	r7,r7,r19
    2e88:	d9002344 	addi	r4,sp,141
    2e8c:	e1cf883a 	add	r7,fp,r7
    2e90:	00000106 	br	2e98 <___vfprintf_internal_r+0x2040>
    2e94:	28800003 	ldbu	r2,0(r5)
    2e98:	20800005 	stb	r2,0(r4)
    2e9c:	21000044 	addi	r4,r4,1
    2ea0:	29400044 	addi	r5,r5,1
    2ea4:	393ffb1e 	bne	r7,r4,2e94 <___vfprintf_internal_r+0x203c>
    2ea8:	d8802304 	addi	r2,sp,140
    2eac:	14c5c83a 	sub	r2,r2,r19
    2eb0:	d8c02344 	addi	r3,sp,141
    2eb4:	1885883a 	add	r2,r3,r2
    2eb8:	003f7006 	br	2c7c <___vfprintf_internal_r+0x1e24>
    2ebc:	0005883a 	mov	r2,zero
    2ec0:	003f0f06 	br	2b00 <___vfprintf_internal_r+0x1ca8>
    2ec4:	d8c03217 	ldw	r3,200(sp)
    2ec8:	18c00044 	addi	r3,r3,1
    2ecc:	d8c02e15 	stw	r3,184(sp)
    2ed0:	1805883a 	mov	r2,r3
    2ed4:	183fb20e 	bge	r3,zero,2da0 <___vfprintf_internal_r+0x1f48>
    2ed8:	0005883a 	mov	r2,zero
    2edc:	003fb006 	br	2da0 <___vfprintf_internal_r+0x1f48>
    2ee0:	d9003617 	ldw	r4,216(sp)
    2ee4:	000d883a 	mov	r6,zero
    2ee8:	000f883a 	mov	r7,zero
    2eec:	980b883a 	mov	r5,r19
    2ef0:	d8c03c15 	stw	r3,240(sp)
    2ef4:	da003d15 	stw	r8,244(sp)
    2ef8:	000c0cc0 	call	c0cc <__eqdf2>
    2efc:	d8c03c17 	ldw	r3,240(sp)
    2f00:	da003d17 	ldw	r8,244(sp)
    2f04:	103f9826 	beq	r2,zero,2d68 <___vfprintf_internal_r+0x1f10>
    2f08:	00800044 	movi	r2,1
    2f0c:	10c7c83a 	sub	r3,r2,r3
    2f10:	d8c02615 	stw	r3,152(sp)
    2f14:	003f9506 	br	2d6c <___vfprintf_internal_r+0x1f14>
    2f18:	d9002917 	ldw	r4,164(sp)
    2f1c:	d8c03217 	ldw	r3,200(sp)
    2f20:	20800044 	addi	r2,r4,1
    2f24:	1885883a 	add	r2,r3,r2
    2f28:	d8802e15 	stw	r2,184(sp)
    2f2c:	103dbf0e 	bge	r2,zero,262c <___vfprintf_internal_r+0x17d4>
    2f30:	0005883a 	mov	r2,zero
    2f34:	003dbd06 	br	262c <___vfprintf_internal_r+0x17d4>
    2f38:	2000211e 	bne	r4,zero,2fc0 <___vfprintf_internal_r+0x2168>
    2f3c:	9480004c 	andi	r18,r18,1
    2f40:	90001f1e 	bne	r18,zero,2fc0 <___vfprintf_internal_r+0x2168>
    2f44:	00800044 	movi	r2,1
    2f48:	d8802e15 	stw	r2,184(sp)
    2f4c:	003db706 	br	262c <___vfprintf_internal_r+0x17d4>
    2f50:	00800b44 	movi	r2,45
    2f54:	05adc83a 	sub	r22,zero,r22
    2f58:	d8802305 	stb	r2,140(sp)
    2f5c:	003f3f06 	br	2c5c <___vfprintf_internal_r+0x1e04>
    2f60:	0005883a 	mov	r2,zero
    2f64:	003f5206 	br	2cb0 <___vfprintf_internal_r+0x1e58>
    2f68:	90a4703a 	and	r18,r18,r2
    2f6c:	903f4e26 	beq	r18,zero,2ca8 <___vfprintf_internal_r+0x1e50>
    2f70:	003f4a06 	br	2c9c <___vfprintf_internal_r+0x1e44>
    2f74:	00800084 	movi	r2,2
    2f78:	10c5c83a 	sub	r2,r2,r3
    2f7c:	003f8406 	br	2d90 <___vfprintf_internal_r+0x1f38>
    2f80:	d8802d17 	ldw	r2,180(sp)
    2f84:	d9002d17 	ldw	r4,180(sp)
    2f88:	ac400043 	ldbu	r17,1(r21)
    2f8c:	10800017 	ldw	r2,0(r2)
    2f90:	582b883a 	mov	r21,r11
    2f94:	d8802915 	stw	r2,164(sp)
    2f98:	20800104 	addi	r2,r4,4
    2f9c:	d9002917 	ldw	r4,164(sp)
    2fa0:	d8802d15 	stw	r2,180(sp)
    2fa4:	203e7a0e 	bge	r4,zero,2990 <___vfprintf_internal_r+0x1b38>
    2fa8:	8c403fcc 	andi	r17,r17,255
    2fac:	00bfffc4 	movi	r2,-1
    2fb0:	8c40201c 	xori	r17,r17,128
    2fb4:	d8802915 	stw	r2,164(sp)
    2fb8:	8c7fe004 	addi	r17,r17,-128
    2fbc:	00380706 	br	fdc <___vfprintf_internal_r+0x184>
    2fc0:	d8c02917 	ldw	r3,164(sp)
    2fc4:	18c00084 	addi	r3,r3,2
    2fc8:	d8c02e15 	stw	r3,184(sp)
    2fcc:	1805883a 	mov	r2,r3
    2fd0:	183d960e 	bge	r3,zero,262c <___vfprintf_internal_r+0x17d4>
    2fd4:	003fd606 	br	2f30 <___vfprintf_internal_r+0x20d8>
    2fd8:	0005883a 	mov	r2,zero
    2fdc:	003f8e06 	br	2e18 <___vfprintf_internal_r+0x1fc0>
    2fe0:	9080004c 	andi	r2,r18,1
    2fe4:	103f811e 	bne	r2,zero,2dec <___vfprintf_internal_r+0x1f94>
    2fe8:	d8802117 	ldw	r2,132(sp)
    2fec:	1405c83a 	sub	r2,r2,r16
    2ff0:	d8803315 	stw	r2,204(sp)
    2ff4:	b47ef326 	beq	r22,r17,2bc4 <___vfprintf_internal_r+0x1d6c>
    2ff8:	dd802617 	ldw	r22,152(sp)
    2ffc:	003f1106 	br	2c44 <___vfprintf_internal_r+0x1dec>
    3000:	d9c02785 	stb	r7,158(sp)
    3004:	00390406 	br	1418 <___vfprintf_internal_r+0x5c0>
    3008:	d9c02785 	stb	r7,158(sp)
    300c:	0038d306 	br	135c <___vfprintf_internal_r+0x504>
    3010:	d9c02785 	stb	r7,158(sp)
    3014:	003a6106 	br	199c <___vfprintf_internal_r+0xb44>
    3018:	d9c02785 	stb	r7,158(sp)
    301c:	003af806 	br	1c00 <___vfprintf_internal_r+0xda8>
    3020:	0005883a 	mov	r2,zero
    3024:	003d7e06 	br	2620 <___vfprintf_internal_r+0x17c8>
    3028:	d8802344 	addi	r2,sp,141
    302c:	003f1306 	br	2c7c <___vfprintf_internal_r+0x1e24>
    3030:	d9c02785 	stb	r7,158(sp)
    3034:	00392306 	br	14c4 <___vfprintf_internal_r+0x66c>
    3038:	d9c02785 	stb	r7,158(sp)
    303c:	003aa906 	br	1ae4 <___vfprintf_internal_r+0xc8c>
    3040:	d9c02785 	stb	r7,158(sp)
    3044:	003a3d06 	br	193c <___vfprintf_internal_r+0xae4>
    3048:	d9c02785 	stb	r7,158(sp)
    304c:	003aca06 	br	1b78 <___vfprintf_internal_r+0xd20>

00003050 <__vfprintf_internal>:
    3050:	008000b4 	movhi	r2,2
    3054:	10b01b04 	addi	r2,r2,-16276
    3058:	300f883a 	mov	r7,r6
    305c:	280d883a 	mov	r6,r5
    3060:	200b883a 	mov	r5,r4
    3064:	11000017 	ldw	r4,0(r2)
    3068:	0000e581 	jmpi	e58 <___vfprintf_internal_r>

0000306c <__sbprintf>:
    306c:	2880030b 	ldhu	r2,12(r5)
    3070:	2ac01917 	ldw	r11,100(r5)
    3074:	2a80038b 	ldhu	r10,14(r5)
    3078:	2a400717 	ldw	r9,28(r5)
    307c:	2a000917 	ldw	r8,36(r5)
    3080:	defee204 	addi	sp,sp,-1144
    3084:	00c10004 	movi	r3,1024
    3088:	dc011a15 	stw	r16,1128(sp)
    308c:	10bfff4c 	andi	r2,r2,65533
    3090:	2821883a 	mov	r16,r5
    3094:	d8cb883a 	add	r5,sp,r3
    3098:	dc811c15 	stw	r18,1136(sp)
    309c:	dc411b15 	stw	r17,1132(sp)
    30a0:	dfc11d15 	stw	ra,1140(sp)
    30a4:	2025883a 	mov	r18,r4
    30a8:	d881030d 	sth	r2,1036(sp)
    30ac:	dac11915 	stw	r11,1124(sp)
    30b0:	da81038d 	sth	r10,1038(sp)
    30b4:	da410715 	stw	r9,1052(sp)
    30b8:	da010915 	stw	r8,1060(sp)
    30bc:	dec10015 	stw	sp,1024(sp)
    30c0:	dec10415 	stw	sp,1040(sp)
    30c4:	d8c10215 	stw	r3,1032(sp)
    30c8:	d8c10515 	stw	r3,1044(sp)
    30cc:	d8010615 	stw	zero,1048(sp)
    30d0:	0000e580 	call	e58 <___vfprintf_internal_r>
    30d4:	1023883a 	mov	r17,r2
    30d8:	10000416 	blt	r2,zero,30ec <__sbprintf+0x80>
    30dc:	d9410004 	addi	r5,sp,1024
    30e0:	9009883a 	mov	r4,r18
    30e4:	0004d200 	call	4d20 <_fflush_r>
    30e8:	10000d1e 	bne	r2,zero,3120 <__sbprintf+0xb4>
    30ec:	d881030b 	ldhu	r2,1036(sp)
    30f0:	1080100c 	andi	r2,r2,64
    30f4:	10000326 	beq	r2,zero,3104 <__sbprintf+0x98>
    30f8:	8080030b 	ldhu	r2,12(r16)
    30fc:	10801014 	ori	r2,r2,64
    3100:	8080030d 	sth	r2,12(r16)
    3104:	8805883a 	mov	r2,r17
    3108:	dfc11d17 	ldw	ra,1140(sp)
    310c:	dc811c17 	ldw	r18,1136(sp)
    3110:	dc411b17 	ldw	r17,1132(sp)
    3114:	dc011a17 	ldw	r16,1128(sp)
    3118:	dec11e04 	addi	sp,sp,1144
    311c:	f800283a 	ret
    3120:	047fffc4 	movi	r17,-1
    3124:	003ff106 	br	30ec <__sbprintf+0x80>

00003128 <__swsetup_r>:
    3128:	008000b4 	movhi	r2,2
    312c:	defffd04 	addi	sp,sp,-12
    3130:	10b01b04 	addi	r2,r2,-16276
    3134:	dc400115 	stw	r17,4(sp)
    3138:	2023883a 	mov	r17,r4
    313c:	11000017 	ldw	r4,0(r2)
    3140:	dc000015 	stw	r16,0(sp)
    3144:	dfc00215 	stw	ra,8(sp)
    3148:	2821883a 	mov	r16,r5
    314c:	20000226 	beq	r4,zero,3158 <__swsetup_r+0x30>
    3150:	20800e17 	ldw	r2,56(r4)
    3154:	10003126 	beq	r2,zero,321c <__swsetup_r+0xf4>
    3158:	8080030b 	ldhu	r2,12(r16)
    315c:	10c0020c 	andi	r3,r2,8
    3160:	1009883a 	mov	r4,r2
    3164:	18000f26 	beq	r3,zero,31a4 <__swsetup_r+0x7c>
    3168:	80c00417 	ldw	r3,16(r16)
    316c:	18001526 	beq	r3,zero,31c4 <__swsetup_r+0x9c>
    3170:	1100004c 	andi	r4,r2,1
    3174:	20001c1e 	bne	r4,zero,31e8 <__swsetup_r+0xc0>
    3178:	1080008c 	andi	r2,r2,2
    317c:	1000291e 	bne	r2,zero,3224 <__swsetup_r+0xfc>
    3180:	80800517 	ldw	r2,20(r16)
    3184:	80800215 	stw	r2,8(r16)
    3188:	18001c26 	beq	r3,zero,31fc <__swsetup_r+0xd4>
    318c:	0005883a 	mov	r2,zero
    3190:	dfc00217 	ldw	ra,8(sp)
    3194:	dc400117 	ldw	r17,4(sp)
    3198:	dc000017 	ldw	r16,0(sp)
    319c:	dec00304 	addi	sp,sp,12
    31a0:	f800283a 	ret
    31a4:	2080040c 	andi	r2,r4,16
    31a8:	10002e26 	beq	r2,zero,3264 <__swsetup_r+0x13c>
    31ac:	2080010c 	andi	r2,r4,4
    31b0:	10001e1e 	bne	r2,zero,322c <__swsetup_r+0x104>
    31b4:	80c00417 	ldw	r3,16(r16)
    31b8:	20800214 	ori	r2,r4,8
    31bc:	8080030d 	sth	r2,12(r16)
    31c0:	183feb1e 	bne	r3,zero,3170 <__swsetup_r+0x48>
    31c4:	1100a00c 	andi	r4,r2,640
    31c8:	01408004 	movi	r5,512
    31cc:	217fe826 	beq	r4,r5,3170 <__swsetup_r+0x48>
    31d0:	800b883a 	mov	r5,r16
    31d4:	8809883a 	mov	r4,r17
    31d8:	0005ca00 	call	5ca0 <__smakebuf_r>
    31dc:	8080030b 	ldhu	r2,12(r16)
    31e0:	80c00417 	ldw	r3,16(r16)
    31e4:	003fe206 	br	3170 <__swsetup_r+0x48>
    31e8:	80800517 	ldw	r2,20(r16)
    31ec:	80000215 	stw	zero,8(r16)
    31f0:	0085c83a 	sub	r2,zero,r2
    31f4:	80800615 	stw	r2,24(r16)
    31f8:	183fe41e 	bne	r3,zero,318c <__swsetup_r+0x64>
    31fc:	80c0030b 	ldhu	r3,12(r16)
    3200:	0005883a 	mov	r2,zero
    3204:	1900200c 	andi	r4,r3,128
    3208:	203fe126 	beq	r4,zero,3190 <__swsetup_r+0x68>
    320c:	18c01014 	ori	r3,r3,64
    3210:	80c0030d 	sth	r3,12(r16)
    3214:	00bfffc4 	movi	r2,-1
    3218:	003fdd06 	br	3190 <__swsetup_r+0x68>
    321c:	00050fc0 	call	50fc <__sinit>
    3220:	003fcd06 	br	3158 <__swsetup_r+0x30>
    3224:	0005883a 	mov	r2,zero
    3228:	003fd606 	br	3184 <__swsetup_r+0x5c>
    322c:	81400c17 	ldw	r5,48(r16)
    3230:	28000626 	beq	r5,zero,324c <__swsetup_r+0x124>
    3234:	80801004 	addi	r2,r16,64
    3238:	28800326 	beq	r5,r2,3248 <__swsetup_r+0x120>
    323c:	8809883a 	mov	r4,r17
    3240:	00052700 	call	5270 <_free_r>
    3244:	8100030b 	ldhu	r4,12(r16)
    3248:	80000c15 	stw	zero,48(r16)
    324c:	80c00417 	ldw	r3,16(r16)
    3250:	00bff6c4 	movi	r2,-37
    3254:	1108703a 	and	r4,r2,r4
    3258:	80000115 	stw	zero,4(r16)
    325c:	80c00015 	stw	r3,0(r16)
    3260:	003fd506 	br	31b8 <__swsetup_r+0x90>
    3264:	00800244 	movi	r2,9
    3268:	88800015 	stw	r2,0(r17)
    326c:	20801014 	ori	r2,r4,64
    3270:	8080030d 	sth	r2,12(r16)
    3274:	00bfffc4 	movi	r2,-1
    3278:	003fc506 	br	3190 <__swsetup_r+0x68>

0000327c <quorem>:
    327c:	defff704 	addi	sp,sp,-36
    3280:	dc800215 	stw	r18,8(sp)
    3284:	20800417 	ldw	r2,16(r4)
    3288:	2c800417 	ldw	r18,16(r5)
    328c:	dfc00815 	stw	ra,32(sp)
    3290:	ddc00715 	stw	r23,28(sp)
    3294:	dd800615 	stw	r22,24(sp)
    3298:	dd400515 	stw	r21,20(sp)
    329c:	dd000415 	stw	r20,16(sp)
    32a0:	dcc00315 	stw	r19,12(sp)
    32a4:	dc400115 	stw	r17,4(sp)
    32a8:	dc000015 	stw	r16,0(sp)
    32ac:	14807116 	blt	r2,r18,3474 <quorem+0x1f8>
    32b0:	94bfffc4 	addi	r18,r18,-1
    32b4:	94ad883a 	add	r22,r18,r18
    32b8:	b5ad883a 	add	r22,r22,r22
    32bc:	2c400504 	addi	r17,r5,20
    32c0:	8da9883a 	add	r20,r17,r22
    32c4:	25400504 	addi	r21,r4,20
    32c8:	282f883a 	mov	r23,r5
    32cc:	adad883a 	add	r22,r21,r22
    32d0:	a1400017 	ldw	r5,0(r20)
    32d4:	2021883a 	mov	r16,r4
    32d8:	b1000017 	ldw	r4,0(r22)
    32dc:	29400044 	addi	r5,r5,1
    32e0:	000ae7c0 	call	ae7c <__udivsi3>
    32e4:	1027883a 	mov	r19,r2
    32e8:	10002c26 	beq	r2,zero,339c <quorem+0x120>
    32ec:	a813883a 	mov	r9,r21
    32f0:	880b883a 	mov	r5,r17
    32f4:	0009883a 	mov	r4,zero
    32f8:	000d883a 	mov	r6,zero
    32fc:	2a000017 	ldw	r8,0(r5)
    3300:	49c00017 	ldw	r7,0(r9)
    3304:	29400104 	addi	r5,r5,4
    3308:	40bfffcc 	andi	r2,r8,65535
    330c:	14c5383a 	mul	r2,r2,r19
    3310:	4010d43a 	srli	r8,r8,16
    3314:	38ffffcc 	andi	r3,r7,65535
    3318:	1105883a 	add	r2,r2,r4
    331c:	1008d43a 	srli	r4,r2,16
    3320:	44d1383a 	mul	r8,r8,r19
    3324:	198d883a 	add	r6,r3,r6
    3328:	10ffffcc 	andi	r3,r2,65535
    332c:	30c7c83a 	sub	r3,r6,r3
    3330:	380ed43a 	srli	r7,r7,16
    3334:	4105883a 	add	r2,r8,r4
    3338:	180dd43a 	srai	r6,r3,16
    333c:	113fffcc 	andi	r4,r2,65535
    3340:	390fc83a 	sub	r7,r7,r4
    3344:	398d883a 	add	r6,r7,r6
    3348:	300e943a 	slli	r7,r6,16
    334c:	18ffffcc 	andi	r3,r3,65535
    3350:	1008d43a 	srli	r4,r2,16
    3354:	38ceb03a 	or	r7,r7,r3
    3358:	49c00015 	stw	r7,0(r9)
    335c:	300dd43a 	srai	r6,r6,16
    3360:	4a400104 	addi	r9,r9,4
    3364:	a17fe52e 	bgeu	r20,r5,32fc <quorem+0x80>
    3368:	b0800017 	ldw	r2,0(r22)
    336c:	10000b1e 	bne	r2,zero,339c <quorem+0x120>
    3370:	b0bfff04 	addi	r2,r22,-4
    3374:	a880082e 	bgeu	r21,r2,3398 <quorem+0x11c>
    3378:	b0ffff17 	ldw	r3,-4(r22)
    337c:	18000326 	beq	r3,zero,338c <quorem+0x110>
    3380:	00000506 	br	3398 <quorem+0x11c>
    3384:	10c00017 	ldw	r3,0(r2)
    3388:	1800031e 	bne	r3,zero,3398 <quorem+0x11c>
    338c:	10bfff04 	addi	r2,r2,-4
    3390:	94bfffc4 	addi	r18,r18,-1
    3394:	a8bffb36 	bltu	r21,r2,3384 <quorem+0x108>
    3398:	84800415 	stw	r18,16(r16)
    339c:	b80b883a 	mov	r5,r23
    33a0:	8009883a 	mov	r4,r16
    33a4:	00073e00 	call	73e0 <__mcmp>
    33a8:	10002616 	blt	r2,zero,3444 <quorem+0x1c8>
    33ac:	9cc00044 	addi	r19,r19,1
    33b0:	a805883a 	mov	r2,r21
    33b4:	000b883a 	mov	r5,zero
    33b8:	11000017 	ldw	r4,0(r2)
    33bc:	89800017 	ldw	r6,0(r17)
    33c0:	10800104 	addi	r2,r2,4
    33c4:	20ffffcc 	andi	r3,r4,65535
    33c8:	194b883a 	add	r5,r3,r5
    33cc:	30ffffcc 	andi	r3,r6,65535
    33d0:	28c7c83a 	sub	r3,r5,r3
    33d4:	300cd43a 	srli	r6,r6,16
    33d8:	2008d43a 	srli	r4,r4,16
    33dc:	180bd43a 	srai	r5,r3,16
    33e0:	18ffffcc 	andi	r3,r3,65535
    33e4:	2189c83a 	sub	r4,r4,r6
    33e8:	2149883a 	add	r4,r4,r5
    33ec:	200c943a 	slli	r6,r4,16
    33f0:	8c400104 	addi	r17,r17,4
    33f4:	200bd43a 	srai	r5,r4,16
    33f8:	30c6b03a 	or	r3,r6,r3
    33fc:	10ffff15 	stw	r3,-4(r2)
    3400:	a47fed2e 	bgeu	r20,r17,33b8 <quorem+0x13c>
    3404:	9485883a 	add	r2,r18,r18
    3408:	1085883a 	add	r2,r2,r2
    340c:	a887883a 	add	r3,r21,r2
    3410:	18800017 	ldw	r2,0(r3)
    3414:	10000b1e 	bne	r2,zero,3444 <quorem+0x1c8>
    3418:	18bfff04 	addi	r2,r3,-4
    341c:	a880082e 	bgeu	r21,r2,3440 <quorem+0x1c4>
    3420:	18ffff17 	ldw	r3,-4(r3)
    3424:	18000326 	beq	r3,zero,3434 <quorem+0x1b8>
    3428:	00000506 	br	3440 <quorem+0x1c4>
    342c:	10c00017 	ldw	r3,0(r2)
    3430:	1800031e 	bne	r3,zero,3440 <quorem+0x1c4>
    3434:	10bfff04 	addi	r2,r2,-4
    3438:	94bfffc4 	addi	r18,r18,-1
    343c:	a8bffb36 	bltu	r21,r2,342c <quorem+0x1b0>
    3440:	84800415 	stw	r18,16(r16)
    3444:	9805883a 	mov	r2,r19
    3448:	dfc00817 	ldw	ra,32(sp)
    344c:	ddc00717 	ldw	r23,28(sp)
    3450:	dd800617 	ldw	r22,24(sp)
    3454:	dd400517 	ldw	r21,20(sp)
    3458:	dd000417 	ldw	r20,16(sp)
    345c:	dcc00317 	ldw	r19,12(sp)
    3460:	dc800217 	ldw	r18,8(sp)
    3464:	dc400117 	ldw	r17,4(sp)
    3468:	dc000017 	ldw	r16,0(sp)
    346c:	dec00904 	addi	sp,sp,36
    3470:	f800283a 	ret
    3474:	0005883a 	mov	r2,zero
    3478:	003ff306 	br	3448 <quorem+0x1cc>

0000347c <_dtoa_r>:
    347c:	20801017 	ldw	r2,64(r4)
    3480:	deffde04 	addi	sp,sp,-136
    3484:	df002015 	stw	fp,128(sp)
    3488:	dcc01b15 	stw	r19,108(sp)
    348c:	dc801a15 	stw	r18,104(sp)
    3490:	dc401915 	stw	r17,100(sp)
    3494:	dc001815 	stw	r16,96(sp)
    3498:	dfc02115 	stw	ra,132(sp)
    349c:	ddc01f15 	stw	r23,124(sp)
    34a0:	dd801e15 	stw	r22,120(sp)
    34a4:	dd401d15 	stw	r21,116(sp)
    34a8:	dd001c15 	stw	r20,112(sp)
    34ac:	d9c00315 	stw	r7,12(sp)
    34b0:	2039883a 	mov	fp,r4
    34b4:	3023883a 	mov	r17,r6
    34b8:	2825883a 	mov	r18,r5
    34bc:	dc002417 	ldw	r16,144(sp)
    34c0:	3027883a 	mov	r19,r6
    34c4:	10000826 	beq	r2,zero,34e8 <_dtoa_r+0x6c>
    34c8:	21801117 	ldw	r6,68(r4)
    34cc:	00c00044 	movi	r3,1
    34d0:	100b883a 	mov	r5,r2
    34d4:	1986983a 	sll	r3,r3,r6
    34d8:	11800115 	stw	r6,4(r2)
    34dc:	10c00215 	stw	r3,8(r2)
    34e0:	0006bc00 	call	6bc0 <_Bfree>
    34e4:	e0001015 	stw	zero,64(fp)
    34e8:	88002e16 	blt	r17,zero,35a4 <_dtoa_r+0x128>
    34ec:	80000015 	stw	zero,0(r16)
    34f0:	889ffc2c 	andhi	r2,r17,32752
    34f4:	00dffc34 	movhi	r3,32752
    34f8:	10c01c26 	beq	r2,r3,356c <_dtoa_r+0xf0>
    34fc:	000d883a 	mov	r6,zero
    3500:	000f883a 	mov	r7,zero
    3504:	9009883a 	mov	r4,r18
    3508:	980b883a 	mov	r5,r19
    350c:	000c0cc0 	call	c0cc <__eqdf2>
    3510:	10002b1e 	bne	r2,zero,35c0 <_dtoa_r+0x144>
    3514:	d9c02317 	ldw	r7,140(sp)
    3518:	00800044 	movi	r2,1
    351c:	38800015 	stw	r2,0(r7)
    3520:	d8802517 	ldw	r2,148(sp)
    3524:	10019e26 	beq	r2,zero,3ba0 <_dtoa_r+0x724>
    3528:	d8c02517 	ldw	r3,148(sp)
    352c:	008000b4 	movhi	r2,2
    3530:	10a75f44 	addi	r2,r2,-25219
    3534:	18800015 	stw	r2,0(r3)
    3538:	10bfffc4 	addi	r2,r2,-1
    353c:	dfc02117 	ldw	ra,132(sp)
    3540:	df002017 	ldw	fp,128(sp)
    3544:	ddc01f17 	ldw	r23,124(sp)
    3548:	dd801e17 	ldw	r22,120(sp)
    354c:	dd401d17 	ldw	r21,116(sp)
    3550:	dd001c17 	ldw	r20,112(sp)
    3554:	dcc01b17 	ldw	r19,108(sp)
    3558:	dc801a17 	ldw	r18,104(sp)
    355c:	dc401917 	ldw	r17,100(sp)
    3560:	dc001817 	ldw	r16,96(sp)
    3564:	dec02204 	addi	sp,sp,136
    3568:	f800283a 	ret
    356c:	d8c02317 	ldw	r3,140(sp)
    3570:	0089c3c4 	movi	r2,9999
    3574:	18800015 	stw	r2,0(r3)
    3578:	90017726 	beq	r18,zero,3b58 <_dtoa_r+0x6dc>
    357c:	008000b4 	movhi	r2,2
    3580:	10a76b04 	addi	r2,r2,-25172
    3584:	d9002517 	ldw	r4,148(sp)
    3588:	203fec26 	beq	r4,zero,353c <_dtoa_r+0xc0>
    358c:	10c000c7 	ldb	r3,3(r2)
    3590:	1801781e 	bne	r3,zero,3b74 <_dtoa_r+0x6f8>
    3594:	10c000c4 	addi	r3,r2,3
    3598:	d9802517 	ldw	r6,148(sp)
    359c:	30c00015 	stw	r3,0(r6)
    35a0:	003fe606 	br	353c <_dtoa_r+0xc0>
    35a4:	04e00034 	movhi	r19,32768
    35a8:	9cffffc4 	addi	r19,r19,-1
    35ac:	00800044 	movi	r2,1
    35b0:	8ce6703a 	and	r19,r17,r19
    35b4:	80800015 	stw	r2,0(r16)
    35b8:	9823883a 	mov	r17,r19
    35bc:	003fcc06 	br	34f0 <_dtoa_r+0x74>
    35c0:	d8800204 	addi	r2,sp,8
    35c4:	d8800015 	stw	r2,0(sp)
    35c8:	d9c00104 	addi	r7,sp,4
    35cc:	900b883a 	mov	r5,r18
    35d0:	980d883a 	mov	r6,r19
    35d4:	e009883a 	mov	r4,fp
    35d8:	8820d53a 	srli	r16,r17,20
    35dc:	00077ac0 	call	77ac <__d2b>
    35e0:	d8800915 	stw	r2,36(sp)
    35e4:	8001651e 	bne	r16,zero,3b7c <_dtoa_r+0x700>
    35e8:	dd800217 	ldw	r22,8(sp)
    35ec:	dc000117 	ldw	r16,4(sp)
    35f0:	00800804 	movi	r2,32
    35f4:	b421883a 	add	r16,r22,r16
    35f8:	80c10c84 	addi	r3,r16,1074
    35fc:	10c2d10e 	bge	r2,r3,4144 <_dtoa_r+0xcc8>
    3600:	00801004 	movi	r2,64
    3604:	81010484 	addi	r4,r16,1042
    3608:	10c7c83a 	sub	r3,r2,r3
    360c:	9108d83a 	srl	r4,r18,r4
    3610:	88e2983a 	sll	r17,r17,r3
    3614:	2448b03a 	or	r4,r4,r17
    3618:	000d4940 	call	d494 <__floatunsidf>
    361c:	017f8434 	movhi	r5,65040
    3620:	01800044 	movi	r6,1
    3624:	1009883a 	mov	r4,r2
    3628:	194b883a 	add	r5,r3,r5
    362c:	843fffc4 	addi	r16,r16,-1
    3630:	d9801115 	stw	r6,68(sp)
    3634:	000d883a 	mov	r6,zero
    3638:	01cffe34 	movhi	r7,16376
    363c:	000ca3c0 	call	ca3c <__subdf3>
    3640:	0198dbf4 	movhi	r6,25455
    3644:	01cff4f4 	movhi	r7,16339
    3648:	3190d844 	addi	r6,r6,17249
    364c:	39e1e9c4 	addi	r7,r7,-30809
    3650:	1009883a 	mov	r4,r2
    3654:	180b883a 	mov	r5,r3
    3658:	000c3240 	call	c324 <__muldf3>
    365c:	01a2d874 	movhi	r6,35681
    3660:	01cff1f4 	movhi	r7,16327
    3664:	31b22cc4 	addi	r6,r6,-14157
    3668:	39e28a04 	addi	r7,r7,-30168
    366c:	180b883a 	mov	r5,r3
    3670:	1009883a 	mov	r4,r2
    3674:	000af380 	call	af38 <__adddf3>
    3678:	8009883a 	mov	r4,r16
    367c:	1029883a 	mov	r20,r2
    3680:	1823883a 	mov	r17,r3
    3684:	000d3b80 	call	d3b8 <__floatsidf>
    3688:	019427f4 	movhi	r6,20639
    368c:	01cff4f4 	movhi	r7,16339
    3690:	319e7ec4 	addi	r6,r6,31227
    3694:	39d104c4 	addi	r7,r7,17427
    3698:	1009883a 	mov	r4,r2
    369c:	180b883a 	mov	r5,r3
    36a0:	000c3240 	call	c324 <__muldf3>
    36a4:	100d883a 	mov	r6,r2
    36a8:	180f883a 	mov	r7,r3
    36ac:	a009883a 	mov	r4,r20
    36b0:	880b883a 	mov	r5,r17
    36b4:	000af380 	call	af38 <__adddf3>
    36b8:	1009883a 	mov	r4,r2
    36bc:	180b883a 	mov	r5,r3
    36c0:	1029883a 	mov	r20,r2
    36c4:	1823883a 	mov	r17,r3
    36c8:	000d3380 	call	d338 <__fixdfsi>
    36cc:	000d883a 	mov	r6,zero
    36d0:	000f883a 	mov	r7,zero
    36d4:	a009883a 	mov	r4,r20
    36d8:	880b883a 	mov	r5,r17
    36dc:	d8800515 	stw	r2,20(sp)
    36e0:	000c2300 	call	c230 <__ledf2>
    36e4:	10028716 	blt	r2,zero,4104 <_dtoa_r+0xc88>
    36e8:	d8c00517 	ldw	r3,20(sp)
    36ec:	00800584 	movi	r2,22
    36f0:	10c27536 	bltu	r2,r3,40c8 <_dtoa_r+0xc4c>
    36f4:	180490fa 	slli	r2,r3,3
    36f8:	00c000b4 	movhi	r3,2
    36fc:	18e78604 	addi	r3,r3,-25064
    3700:	1885883a 	add	r2,r3,r2
    3704:	11000017 	ldw	r4,0(r2)
    3708:	11400117 	ldw	r5,4(r2)
    370c:	900d883a 	mov	r6,r18
    3710:	980f883a 	mov	r7,r19
    3714:	000c1540 	call	c154 <__gedf2>
    3718:	00828d0e 	bge	zero,r2,4150 <_dtoa_r+0xcd4>
    371c:	d9000517 	ldw	r4,20(sp)
    3720:	d8000e15 	stw	zero,56(sp)
    3724:	213fffc4 	addi	r4,r4,-1
    3728:	d9000515 	stw	r4,20(sp)
    372c:	b42dc83a 	sub	r22,r22,r16
    3730:	b5bfffc4 	addi	r22,r22,-1
    3734:	b0026f16 	blt	r22,zero,40f4 <_dtoa_r+0xc78>
    3738:	d8000815 	stw	zero,32(sp)
    373c:	d9c00517 	ldw	r7,20(sp)
    3740:	38026416 	blt	r7,zero,40d4 <_dtoa_r+0xc58>
    3744:	b1ed883a 	add	r22,r22,r7
    3748:	d9c00d15 	stw	r7,52(sp)
    374c:	d8000a15 	stw	zero,40(sp)
    3750:	d9800317 	ldw	r6,12(sp)
    3754:	00800244 	movi	r2,9
    3758:	11811436 	bltu	r2,r6,3bac <_dtoa_r+0x730>
    375c:	00800144 	movi	r2,5
    3760:	1184e10e 	bge	r2,r6,4ae8 <_dtoa_r+0x166c>
    3764:	31bfff04 	addi	r6,r6,-4
    3768:	d9800315 	stw	r6,12(sp)
    376c:	0023883a 	mov	r17,zero
    3770:	d9800317 	ldw	r6,12(sp)
    3774:	008000c4 	movi	r2,3
    3778:	30836726 	beq	r6,r2,4518 <_dtoa_r+0x109c>
    377c:	1183410e 	bge	r2,r6,4484 <_dtoa_r+0x1008>
    3780:	d9c00317 	ldw	r7,12(sp)
    3784:	00800104 	movi	r2,4
    3788:	38827c26 	beq	r7,r2,417c <_dtoa_r+0xd00>
    378c:	00800144 	movi	r2,5
    3790:	3884c41e 	bne	r7,r2,4aa4 <_dtoa_r+0x1628>
    3794:	00800044 	movi	r2,1
    3798:	d8800b15 	stw	r2,44(sp)
    379c:	d8c00517 	ldw	r3,20(sp)
    37a0:	d9002217 	ldw	r4,136(sp)
    37a4:	1907883a 	add	r3,r3,r4
    37a8:	19800044 	addi	r6,r3,1
    37ac:	d8c00c15 	stw	r3,48(sp)
    37b0:	d9800615 	stw	r6,24(sp)
    37b4:	0183a40e 	bge	zero,r6,4648 <_dtoa_r+0x11cc>
    37b8:	d9800617 	ldw	r6,24(sp)
    37bc:	3021883a 	mov	r16,r6
    37c0:	e0001115 	stw	zero,68(fp)
    37c4:	008005c4 	movi	r2,23
    37c8:	1184c92e 	bgeu	r2,r6,4af0 <_dtoa_r+0x1674>
    37cc:	00c00044 	movi	r3,1
    37d0:	00800104 	movi	r2,4
    37d4:	1085883a 	add	r2,r2,r2
    37d8:	11000504 	addi	r4,r2,20
    37dc:	180b883a 	mov	r5,r3
    37e0:	18c00044 	addi	r3,r3,1
    37e4:	313ffb2e 	bgeu	r6,r4,37d4 <_dtoa_r+0x358>
    37e8:	e1401115 	stw	r5,68(fp)
    37ec:	e009883a 	mov	r4,fp
    37f0:	0006b180 	call	6b18 <_Balloc>
    37f4:	d8800715 	stw	r2,28(sp)
    37f8:	e0801015 	stw	r2,64(fp)
    37fc:	00800384 	movi	r2,14
    3800:	1400f736 	bltu	r2,r16,3be0 <_dtoa_r+0x764>
    3804:	8800f626 	beq	r17,zero,3be0 <_dtoa_r+0x764>
    3808:	d9c00517 	ldw	r7,20(sp)
    380c:	01c39a0e 	bge	zero,r7,4678 <_dtoa_r+0x11fc>
    3810:	388003cc 	andi	r2,r7,15
    3814:	100490fa 	slli	r2,r2,3
    3818:	382bd13a 	srai	r21,r7,4
    381c:	00c000b4 	movhi	r3,2
    3820:	18e78604 	addi	r3,r3,-25064
    3824:	1885883a 	add	r2,r3,r2
    3828:	a8c0040c 	andi	r3,r21,16
    382c:	12400017 	ldw	r9,0(r2)
    3830:	12000117 	ldw	r8,4(r2)
    3834:	18037926 	beq	r3,zero,461c <_dtoa_r+0x11a0>
    3838:	008000b4 	movhi	r2,2
    383c:	10a77c04 	addi	r2,r2,-25104
    3840:	11800817 	ldw	r6,32(r2)
    3844:	11c00917 	ldw	r7,36(r2)
    3848:	9009883a 	mov	r4,r18
    384c:	980b883a 	mov	r5,r19
    3850:	da001715 	stw	r8,92(sp)
    3854:	da401615 	stw	r9,88(sp)
    3858:	000b7e40 	call	b7e4 <__divdf3>
    385c:	da001717 	ldw	r8,92(sp)
    3860:	da401617 	ldw	r9,88(sp)
    3864:	ad4003cc 	andi	r21,r21,15
    3868:	040000c4 	movi	r16,3
    386c:	1023883a 	mov	r17,r2
    3870:	1829883a 	mov	r20,r3
    3874:	a8001126 	beq	r21,zero,38bc <_dtoa_r+0x440>
    3878:	05c000b4 	movhi	r23,2
    387c:	bde77c04 	addi	r23,r23,-25104
    3880:	4805883a 	mov	r2,r9
    3884:	4007883a 	mov	r3,r8
    3888:	a980004c 	andi	r6,r21,1
    388c:	1009883a 	mov	r4,r2
    3890:	a82bd07a 	srai	r21,r21,1
    3894:	180b883a 	mov	r5,r3
    3898:	30000426 	beq	r6,zero,38ac <_dtoa_r+0x430>
    389c:	b9800017 	ldw	r6,0(r23)
    38a0:	b9c00117 	ldw	r7,4(r23)
    38a4:	84000044 	addi	r16,r16,1
    38a8:	000c3240 	call	c324 <__muldf3>
    38ac:	bdc00204 	addi	r23,r23,8
    38b0:	a83ff51e 	bne	r21,zero,3888 <_dtoa_r+0x40c>
    38b4:	1013883a 	mov	r9,r2
    38b8:	1811883a 	mov	r8,r3
    38bc:	480d883a 	mov	r6,r9
    38c0:	400f883a 	mov	r7,r8
    38c4:	8809883a 	mov	r4,r17
    38c8:	a00b883a 	mov	r5,r20
    38cc:	000b7e40 	call	b7e4 <__divdf3>
    38d0:	d8800f15 	stw	r2,60(sp)
    38d4:	d8c01015 	stw	r3,64(sp)
    38d8:	d8c00e17 	ldw	r3,56(sp)
    38dc:	18000626 	beq	r3,zero,38f8 <_dtoa_r+0x47c>
    38e0:	d9000f17 	ldw	r4,60(sp)
    38e4:	d9401017 	ldw	r5,64(sp)
    38e8:	000d883a 	mov	r6,zero
    38ec:	01cffc34 	movhi	r7,16368
    38f0:	000c2300 	call	c230 <__ledf2>
    38f4:	10040b16 	blt	r2,zero,4924 <_dtoa_r+0x14a8>
    38f8:	8009883a 	mov	r4,r16
    38fc:	000d3b80 	call	d3b8 <__floatsidf>
    3900:	d9800f17 	ldw	r6,60(sp)
    3904:	d9c01017 	ldw	r7,64(sp)
    3908:	1009883a 	mov	r4,r2
    390c:	180b883a 	mov	r5,r3
    3910:	000c3240 	call	c324 <__muldf3>
    3914:	000d883a 	mov	r6,zero
    3918:	01d00734 	movhi	r7,16412
    391c:	1009883a 	mov	r4,r2
    3920:	180b883a 	mov	r5,r3
    3924:	000af380 	call	af38 <__adddf3>
    3928:	1021883a 	mov	r16,r2
    392c:	d8800617 	ldw	r2,24(sp)
    3930:	047f3034 	movhi	r17,64704
    3934:	1c63883a 	add	r17,r3,r17
    3938:	10031826 	beq	r2,zero,459c <_dtoa_r+0x1120>
    393c:	d8c00517 	ldw	r3,20(sp)
    3940:	db000617 	ldw	r12,24(sp)
    3944:	d8c01315 	stw	r3,76(sp)
    3948:	d9000b17 	ldw	r4,44(sp)
    394c:	20038f26 	beq	r4,zero,478c <_dtoa_r+0x1310>
    3950:	60bfffc4 	addi	r2,r12,-1
    3954:	100490fa 	slli	r2,r2,3
    3958:	00c000b4 	movhi	r3,2
    395c:	18e78604 	addi	r3,r3,-25064
    3960:	1885883a 	add	r2,r3,r2
    3964:	11800017 	ldw	r6,0(r2)
    3968:	11c00117 	ldw	r7,4(r2)
    396c:	d8800717 	ldw	r2,28(sp)
    3970:	0009883a 	mov	r4,zero
    3974:	014ff834 	movhi	r5,16352
    3978:	db001615 	stw	r12,88(sp)
    397c:	15c00044 	addi	r23,r2,1
    3980:	000b7e40 	call	b7e4 <__divdf3>
    3984:	800d883a 	mov	r6,r16
    3988:	880f883a 	mov	r7,r17
    398c:	1009883a 	mov	r4,r2
    3990:	180b883a 	mov	r5,r3
    3994:	000ca3c0 	call	ca3c <__subdf3>
    3998:	d9401017 	ldw	r5,64(sp)
    399c:	d9000f17 	ldw	r4,60(sp)
    39a0:	102b883a 	mov	r21,r2
    39a4:	d8c01215 	stw	r3,72(sp)
    39a8:	000d3380 	call	d338 <__fixdfsi>
    39ac:	1009883a 	mov	r4,r2
    39b0:	1029883a 	mov	r20,r2
    39b4:	000d3b80 	call	d3b8 <__floatsidf>
    39b8:	d9000f17 	ldw	r4,60(sp)
    39bc:	d9401017 	ldw	r5,64(sp)
    39c0:	100d883a 	mov	r6,r2
    39c4:	180f883a 	mov	r7,r3
    39c8:	000ca3c0 	call	ca3c <__subdf3>
    39cc:	1823883a 	mov	r17,r3
    39d0:	d8c00717 	ldw	r3,28(sp)
    39d4:	d9401217 	ldw	r5,72(sp)
    39d8:	a2000c04 	addi	r8,r20,48
    39dc:	1021883a 	mov	r16,r2
    39e0:	1a000005 	stb	r8,0(r3)
    39e4:	800d883a 	mov	r6,r16
    39e8:	880f883a 	mov	r7,r17
    39ec:	a809883a 	mov	r4,r21
    39f0:	4029883a 	mov	r20,r8
    39f4:	000c1540 	call	c154 <__gedf2>
    39f8:	00841d16 	blt	zero,r2,4a70 <_dtoa_r+0x15f4>
    39fc:	800d883a 	mov	r6,r16
    3a00:	880f883a 	mov	r7,r17
    3a04:	0009883a 	mov	r4,zero
    3a08:	014ffc34 	movhi	r5,16368
    3a0c:	000ca3c0 	call	ca3c <__subdf3>
    3a10:	d9401217 	ldw	r5,72(sp)
    3a14:	100d883a 	mov	r6,r2
    3a18:	180f883a 	mov	r7,r3
    3a1c:	a809883a 	mov	r4,r21
    3a20:	000c1540 	call	c154 <__gedf2>
    3a24:	db001617 	ldw	r12,88(sp)
    3a28:	00840e16 	blt	zero,r2,4a64 <_dtoa_r+0x15e8>
    3a2c:	00800044 	movi	r2,1
    3a30:	13006b0e 	bge	r2,r12,3be0 <_dtoa_r+0x764>
    3a34:	d9000717 	ldw	r4,28(sp)
    3a38:	dd800f15 	stw	r22,60(sp)
    3a3c:	dcc01015 	stw	r19,64(sp)
    3a40:	2319883a 	add	r12,r4,r12
    3a44:	dcc01217 	ldw	r19,72(sp)
    3a48:	602d883a 	mov	r22,r12
    3a4c:	dc801215 	stw	r18,72(sp)
    3a50:	b825883a 	mov	r18,r23
    3a54:	00000906 	br	3a7c <_dtoa_r+0x600>
    3a58:	000ca3c0 	call	ca3c <__subdf3>
    3a5c:	a80d883a 	mov	r6,r21
    3a60:	980f883a 	mov	r7,r19
    3a64:	1009883a 	mov	r4,r2
    3a68:	180b883a 	mov	r5,r3
    3a6c:	000c2300 	call	c230 <__ledf2>
    3a70:	1003e816 	blt	r2,zero,4a14 <_dtoa_r+0x1598>
    3a74:	b825883a 	mov	r18,r23
    3a78:	bd83e926 	beq	r23,r22,4a20 <_dtoa_r+0x15a4>
    3a7c:	a809883a 	mov	r4,r21
    3a80:	980b883a 	mov	r5,r19
    3a84:	000d883a 	mov	r6,zero
    3a88:	01d00934 	movhi	r7,16420
    3a8c:	000c3240 	call	c324 <__muldf3>
    3a90:	000d883a 	mov	r6,zero
    3a94:	01d00934 	movhi	r7,16420
    3a98:	8009883a 	mov	r4,r16
    3a9c:	880b883a 	mov	r5,r17
    3aa0:	102b883a 	mov	r21,r2
    3aa4:	1827883a 	mov	r19,r3
    3aa8:	000c3240 	call	c324 <__muldf3>
    3aac:	180b883a 	mov	r5,r3
    3ab0:	1009883a 	mov	r4,r2
    3ab4:	1821883a 	mov	r16,r3
    3ab8:	1023883a 	mov	r17,r2
    3abc:	000d3380 	call	d338 <__fixdfsi>
    3ac0:	1009883a 	mov	r4,r2
    3ac4:	1029883a 	mov	r20,r2
    3ac8:	000d3b80 	call	d3b8 <__floatsidf>
    3acc:	8809883a 	mov	r4,r17
    3ad0:	800b883a 	mov	r5,r16
    3ad4:	100d883a 	mov	r6,r2
    3ad8:	180f883a 	mov	r7,r3
    3adc:	000ca3c0 	call	ca3c <__subdf3>
    3ae0:	a5000c04 	addi	r20,r20,48
    3ae4:	a80d883a 	mov	r6,r21
    3ae8:	980f883a 	mov	r7,r19
    3aec:	1009883a 	mov	r4,r2
    3af0:	180b883a 	mov	r5,r3
    3af4:	95000005 	stb	r20,0(r18)
    3af8:	1021883a 	mov	r16,r2
    3afc:	1823883a 	mov	r17,r3
    3b00:	000c2300 	call	c230 <__ledf2>
    3b04:	bdc00044 	addi	r23,r23,1
    3b08:	800d883a 	mov	r6,r16
    3b0c:	880f883a 	mov	r7,r17
    3b10:	0009883a 	mov	r4,zero
    3b14:	014ffc34 	movhi	r5,16368
    3b18:	103fcf0e 	bge	r2,zero,3a58 <_dtoa_r+0x5dc>
    3b1c:	d8c01317 	ldw	r3,76(sp)
    3b20:	d8c00515 	stw	r3,20(sp)
    3b24:	d9400917 	ldw	r5,36(sp)
    3b28:	e009883a 	mov	r4,fp
    3b2c:	0006bc00 	call	6bc0 <_Bfree>
    3b30:	d9000517 	ldw	r4,20(sp)
    3b34:	d9802317 	ldw	r6,140(sp)
    3b38:	d9c02517 	ldw	r7,148(sp)
    3b3c:	b8000005 	stb	zero,0(r23)
    3b40:	20800044 	addi	r2,r4,1
    3b44:	30800015 	stw	r2,0(r6)
    3b48:	3802aa26 	beq	r7,zero,45f4 <_dtoa_r+0x1178>
    3b4c:	3dc00015 	stw	r23,0(r7)
    3b50:	d8800717 	ldw	r2,28(sp)
    3b54:	003e7906 	br	353c <_dtoa_r+0xc0>
    3b58:	00800434 	movhi	r2,16
    3b5c:	10bfffc4 	addi	r2,r2,-1
    3b60:	88a2703a 	and	r17,r17,r2
    3b64:	883e851e 	bne	r17,zero,357c <_dtoa_r+0x100>
    3b68:	008000b4 	movhi	r2,2
    3b6c:	10a76804 	addi	r2,r2,-25184
    3b70:	003e8406 	br	3584 <_dtoa_r+0x108>
    3b74:	10c00204 	addi	r3,r2,8
    3b78:	003e8706 	br	3598 <_dtoa_r+0x11c>
    3b7c:	01400434 	movhi	r5,16
    3b80:	297fffc4 	addi	r5,r5,-1
    3b84:	994a703a 	and	r5,r19,r5
    3b88:	9009883a 	mov	r4,r18
    3b8c:	843f0044 	addi	r16,r16,-1023
    3b90:	294ffc34 	orhi	r5,r5,16368
    3b94:	dd800217 	ldw	r22,8(sp)
    3b98:	d8001115 	stw	zero,68(sp)
    3b9c:	003ea506 	br	3634 <_dtoa_r+0x1b8>
    3ba0:	008000b4 	movhi	r2,2
    3ba4:	10a75f04 	addi	r2,r2,-25220
    3ba8:	003e6406 	br	353c <_dtoa_r+0xc0>
    3bac:	e0001115 	stw	zero,68(fp)
    3bb0:	000b883a 	mov	r5,zero
    3bb4:	e009883a 	mov	r4,fp
    3bb8:	0006b180 	call	6b18 <_Balloc>
    3bbc:	01bfffc4 	movi	r6,-1
    3bc0:	01c00044 	movi	r7,1
    3bc4:	d8800715 	stw	r2,28(sp)
    3bc8:	d9800c15 	stw	r6,48(sp)
    3bcc:	e0801015 	stw	r2,64(fp)
    3bd0:	d8000315 	stw	zero,12(sp)
    3bd4:	d9c00b15 	stw	r7,44(sp)
    3bd8:	d9800615 	stw	r6,24(sp)
    3bdc:	d8002215 	stw	zero,136(sp)
    3be0:	d8800117 	ldw	r2,4(sp)
    3be4:	10008916 	blt	r2,zero,3e0c <_dtoa_r+0x990>
    3be8:	d9000517 	ldw	r4,20(sp)
    3bec:	00c00384 	movi	r3,14
    3bf0:	19008616 	blt	r3,r4,3e0c <_dtoa_r+0x990>
    3bf4:	200490fa 	slli	r2,r4,3
    3bf8:	00c000b4 	movhi	r3,2
    3bfc:	d9802217 	ldw	r6,136(sp)
    3c00:	18e78604 	addi	r3,r3,-25064
    3c04:	1885883a 	add	r2,r3,r2
    3c08:	14000017 	ldw	r16,0(r2)
    3c0c:	14400117 	ldw	r17,4(r2)
    3c10:	30016316 	blt	r6,zero,41a0 <_dtoa_r+0xd24>
    3c14:	800d883a 	mov	r6,r16
    3c18:	880f883a 	mov	r7,r17
    3c1c:	9009883a 	mov	r4,r18
    3c20:	980b883a 	mov	r5,r19
    3c24:	000b7e40 	call	b7e4 <__divdf3>
    3c28:	180b883a 	mov	r5,r3
    3c2c:	1009883a 	mov	r4,r2
    3c30:	000d3380 	call	d338 <__fixdfsi>
    3c34:	1009883a 	mov	r4,r2
    3c38:	102b883a 	mov	r21,r2
    3c3c:	000d3b80 	call	d3b8 <__floatsidf>
    3c40:	800d883a 	mov	r6,r16
    3c44:	880f883a 	mov	r7,r17
    3c48:	1009883a 	mov	r4,r2
    3c4c:	180b883a 	mov	r5,r3
    3c50:	000c3240 	call	c324 <__muldf3>
    3c54:	100d883a 	mov	r6,r2
    3c58:	180f883a 	mov	r7,r3
    3c5c:	9009883a 	mov	r4,r18
    3c60:	980b883a 	mov	r5,r19
    3c64:	000ca3c0 	call	ca3c <__subdf3>
    3c68:	d9c00717 	ldw	r7,28(sp)
    3c6c:	1009883a 	mov	r4,r2
    3c70:	a8800c04 	addi	r2,r21,48
    3c74:	38800005 	stb	r2,0(r7)
    3c78:	3dc00044 	addi	r23,r7,1
    3c7c:	d9c00617 	ldw	r7,24(sp)
    3c80:	01800044 	movi	r6,1
    3c84:	180b883a 	mov	r5,r3
    3c88:	2005883a 	mov	r2,r4
    3c8c:	39803826 	beq	r7,r6,3d70 <_dtoa_r+0x8f4>
    3c90:	000d883a 	mov	r6,zero
    3c94:	01d00934 	movhi	r7,16420
    3c98:	000c3240 	call	c324 <__muldf3>
    3c9c:	000d883a 	mov	r6,zero
    3ca0:	000f883a 	mov	r7,zero
    3ca4:	1009883a 	mov	r4,r2
    3ca8:	180b883a 	mov	r5,r3
    3cac:	1025883a 	mov	r18,r2
    3cb0:	1827883a 	mov	r19,r3
    3cb4:	000c0cc0 	call	c0cc <__eqdf2>
    3cb8:	103f9a26 	beq	r2,zero,3b24 <_dtoa_r+0x6a8>
    3cbc:	d9c00617 	ldw	r7,24(sp)
    3cc0:	d8c00717 	ldw	r3,28(sp)
    3cc4:	b829883a 	mov	r20,r23
    3cc8:	38bfffc4 	addi	r2,r7,-1
    3ccc:	18ad883a 	add	r22,r3,r2
    3cd0:	00000a06 	br	3cfc <_dtoa_r+0x880>
    3cd4:	000c3240 	call	c324 <__muldf3>
    3cd8:	000d883a 	mov	r6,zero
    3cdc:	000f883a 	mov	r7,zero
    3ce0:	1009883a 	mov	r4,r2
    3ce4:	180b883a 	mov	r5,r3
    3ce8:	1025883a 	mov	r18,r2
    3cec:	1827883a 	mov	r19,r3
    3cf0:	b829883a 	mov	r20,r23
    3cf4:	000c0cc0 	call	c0cc <__eqdf2>
    3cf8:	103f8a26 	beq	r2,zero,3b24 <_dtoa_r+0x6a8>
    3cfc:	800d883a 	mov	r6,r16
    3d00:	880f883a 	mov	r7,r17
    3d04:	9009883a 	mov	r4,r18
    3d08:	980b883a 	mov	r5,r19
    3d0c:	000b7e40 	call	b7e4 <__divdf3>
    3d10:	180b883a 	mov	r5,r3
    3d14:	1009883a 	mov	r4,r2
    3d18:	000d3380 	call	d338 <__fixdfsi>
    3d1c:	1009883a 	mov	r4,r2
    3d20:	102b883a 	mov	r21,r2
    3d24:	000d3b80 	call	d3b8 <__floatsidf>
    3d28:	800d883a 	mov	r6,r16
    3d2c:	880f883a 	mov	r7,r17
    3d30:	1009883a 	mov	r4,r2
    3d34:	180b883a 	mov	r5,r3
    3d38:	000c3240 	call	c324 <__muldf3>
    3d3c:	100d883a 	mov	r6,r2
    3d40:	180f883a 	mov	r7,r3
    3d44:	9009883a 	mov	r4,r18
    3d48:	980b883a 	mov	r5,r19
    3d4c:	000ca3c0 	call	ca3c <__subdf3>
    3d50:	aa000c04 	addi	r8,r21,48
    3d54:	a2000005 	stb	r8,0(r20)
    3d58:	000d883a 	mov	r6,zero
    3d5c:	01d00934 	movhi	r7,16420
    3d60:	1009883a 	mov	r4,r2
    3d64:	180b883a 	mov	r5,r3
    3d68:	a5c00044 	addi	r23,r20,1
    3d6c:	b53fd91e 	bne	r22,r20,3cd4 <_dtoa_r+0x858>
    3d70:	100d883a 	mov	r6,r2
    3d74:	180f883a 	mov	r7,r3
    3d78:	1009883a 	mov	r4,r2
    3d7c:	180b883a 	mov	r5,r3
    3d80:	000af380 	call	af38 <__adddf3>
    3d84:	100d883a 	mov	r6,r2
    3d88:	180f883a 	mov	r7,r3
    3d8c:	8009883a 	mov	r4,r16
    3d90:	880b883a 	mov	r5,r17
    3d94:	1027883a 	mov	r19,r2
    3d98:	1825883a 	mov	r18,r3
    3d9c:	000c2300 	call	c230 <__ledf2>
    3da0:	10000816 	blt	r2,zero,3dc4 <_dtoa_r+0x948>
    3da4:	980d883a 	mov	r6,r19
    3da8:	900f883a 	mov	r7,r18
    3dac:	8009883a 	mov	r4,r16
    3db0:	880b883a 	mov	r5,r17
    3db4:	000c0cc0 	call	c0cc <__eqdf2>
    3db8:	103f5a1e 	bne	r2,zero,3b24 <_dtoa_r+0x6a8>
    3dbc:	ad40004c 	andi	r21,r21,1
    3dc0:	a83f5826 	beq	r21,zero,3b24 <_dtoa_r+0x6a8>
    3dc4:	bd3fffc3 	ldbu	r20,-1(r23)
    3dc8:	b8bfffc4 	addi	r2,r23,-1
    3dcc:	1007883a 	mov	r3,r2
    3dd0:	01400e44 	movi	r5,57
    3dd4:	d9800717 	ldw	r6,28(sp)
    3dd8:	00000506 	br	3df0 <_dtoa_r+0x974>
    3ddc:	18ffffc4 	addi	r3,r3,-1
    3de0:	11824726 	beq	r2,r6,4700 <_dtoa_r+0x1284>
    3de4:	1d000003 	ldbu	r20,0(r3)
    3de8:	102f883a 	mov	r23,r2
    3dec:	10bfffc4 	addi	r2,r2,-1
    3df0:	a1003fcc 	andi	r4,r20,255
    3df4:	2100201c 	xori	r4,r4,128
    3df8:	213fe004 	addi	r4,r4,-128
    3dfc:	217ff726 	beq	r4,r5,3ddc <_dtoa_r+0x960>
    3e00:	a2000044 	addi	r8,r20,1
    3e04:	12000005 	stb	r8,0(r2)
    3e08:	003f4606 	br	3b24 <_dtoa_r+0x6a8>
    3e0c:	d9000b17 	ldw	r4,44(sp)
    3e10:	2000c826 	beq	r4,zero,4134 <_dtoa_r+0xcb8>
    3e14:	d9800317 	ldw	r6,12(sp)
    3e18:	00c00044 	movi	r3,1
    3e1c:	1980f90e 	bge	r3,r6,4204 <_dtoa_r+0xd88>
    3e20:	d8800617 	ldw	r2,24(sp)
    3e24:	d8c00a17 	ldw	r3,40(sp)
    3e28:	157fffc4 	addi	r21,r2,-1
    3e2c:	1d41f316 	blt	r3,r21,45fc <_dtoa_r+0x1180>
    3e30:	1d6bc83a 	sub	r21,r3,r21
    3e34:	d9c00617 	ldw	r7,24(sp)
    3e38:	3802aa16 	blt	r7,zero,48e4 <_dtoa_r+0x1468>
    3e3c:	dd000817 	ldw	r20,32(sp)
    3e40:	d8800617 	ldw	r2,24(sp)
    3e44:	d8c00817 	ldw	r3,32(sp)
    3e48:	01400044 	movi	r5,1
    3e4c:	e009883a 	mov	r4,fp
    3e50:	1887883a 	add	r3,r3,r2
    3e54:	d8c00815 	stw	r3,32(sp)
    3e58:	b0ad883a 	add	r22,r22,r2
    3e5c:	0006f240 	call	6f24 <__i2b>
    3e60:	1023883a 	mov	r17,r2
    3e64:	a0000826 	beq	r20,zero,3e88 <_dtoa_r+0xa0c>
    3e68:	0580070e 	bge	zero,r22,3e88 <_dtoa_r+0xa0c>
    3e6c:	a005883a 	mov	r2,r20
    3e70:	b500b916 	blt	r22,r20,4158 <_dtoa_r+0xcdc>
    3e74:	d9000817 	ldw	r4,32(sp)
    3e78:	a0a9c83a 	sub	r20,r20,r2
    3e7c:	b0adc83a 	sub	r22,r22,r2
    3e80:	2089c83a 	sub	r4,r4,r2
    3e84:	d9000815 	stw	r4,32(sp)
    3e88:	d9800a17 	ldw	r6,40(sp)
    3e8c:	0181810e 	bge	zero,r6,4494 <_dtoa_r+0x1018>
    3e90:	d9c00b17 	ldw	r7,44(sp)
    3e94:	3800b326 	beq	r7,zero,4164 <_dtoa_r+0xce8>
    3e98:	a800b226 	beq	r21,zero,4164 <_dtoa_r+0xce8>
    3e9c:	880b883a 	mov	r5,r17
    3ea0:	a80d883a 	mov	r6,r21
    3ea4:	e009883a 	mov	r4,fp
    3ea8:	00071580 	call	7158 <__pow5mult>
    3eac:	d9800917 	ldw	r6,36(sp)
    3eb0:	100b883a 	mov	r5,r2
    3eb4:	e009883a 	mov	r4,fp
    3eb8:	1023883a 	mov	r17,r2
    3ebc:	0006f600 	call	6f60 <__multiply>
    3ec0:	1021883a 	mov	r16,r2
    3ec4:	d8800a17 	ldw	r2,40(sp)
    3ec8:	d9400917 	ldw	r5,36(sp)
    3ecc:	e009883a 	mov	r4,fp
    3ed0:	1545c83a 	sub	r2,r2,r21
    3ed4:	d8800a15 	stw	r2,40(sp)
    3ed8:	0006bc00 	call	6bc0 <_Bfree>
    3edc:	d8c00a17 	ldw	r3,40(sp)
    3ee0:	18009f1e 	bne	r3,zero,4160 <_dtoa_r+0xce4>
    3ee4:	05c00044 	movi	r23,1
    3ee8:	e009883a 	mov	r4,fp
    3eec:	b80b883a 	mov	r5,r23
    3ef0:	0006f240 	call	6f24 <__i2b>
    3ef4:	d9000d17 	ldw	r4,52(sp)
    3ef8:	102b883a 	mov	r21,r2
    3efc:	2000ce26 	beq	r4,zero,4238 <_dtoa_r+0xdbc>
    3f00:	200d883a 	mov	r6,r4
    3f04:	100b883a 	mov	r5,r2
    3f08:	e009883a 	mov	r4,fp
    3f0c:	00071580 	call	7158 <__pow5mult>
    3f10:	d9800317 	ldw	r6,12(sp)
    3f14:	102b883a 	mov	r21,r2
    3f18:	b981810e 	bge	r23,r6,4520 <_dtoa_r+0x10a4>
    3f1c:	0027883a 	mov	r19,zero
    3f20:	a8800417 	ldw	r2,16(r21)
    3f24:	05c00804 	movi	r23,32
    3f28:	10800104 	addi	r2,r2,4
    3f2c:	1085883a 	add	r2,r2,r2
    3f30:	1085883a 	add	r2,r2,r2
    3f34:	a885883a 	add	r2,r21,r2
    3f38:	11000017 	ldw	r4,0(r2)
    3f3c:	0006e0c0 	call	6e0c <__hi0bits>
    3f40:	b885c83a 	sub	r2,r23,r2
    3f44:	1585883a 	add	r2,r2,r22
    3f48:	108007cc 	andi	r2,r2,31
    3f4c:	1000b326 	beq	r2,zero,421c <_dtoa_r+0xda0>
    3f50:	00c00804 	movi	r3,32
    3f54:	1887c83a 	sub	r3,r3,r2
    3f58:	01000104 	movi	r4,4
    3f5c:	20c2cd0e 	bge	r4,r3,4a94 <_dtoa_r+0x1618>
    3f60:	00c00704 	movi	r3,28
    3f64:	1885c83a 	sub	r2,r3,r2
    3f68:	d8c00817 	ldw	r3,32(sp)
    3f6c:	a0a9883a 	add	r20,r20,r2
    3f70:	b0ad883a 	add	r22,r22,r2
    3f74:	1887883a 	add	r3,r3,r2
    3f78:	d8c00815 	stw	r3,32(sp)
    3f7c:	d9800817 	ldw	r6,32(sp)
    3f80:	0180040e 	bge	zero,r6,3f94 <_dtoa_r+0xb18>
    3f84:	800b883a 	mov	r5,r16
    3f88:	e009883a 	mov	r4,fp
    3f8c:	00072980 	call	7298 <__lshift>
    3f90:	1021883a 	mov	r16,r2
    3f94:	0580050e 	bge	zero,r22,3fac <_dtoa_r+0xb30>
    3f98:	a80b883a 	mov	r5,r21
    3f9c:	b00d883a 	mov	r6,r22
    3fa0:	e009883a 	mov	r4,fp
    3fa4:	00072980 	call	7298 <__lshift>
    3fa8:	102b883a 	mov	r21,r2
    3fac:	d9c00e17 	ldw	r7,56(sp)
    3fb0:	3801211e 	bne	r7,zero,4438 <_dtoa_r+0xfbc>
    3fb4:	d9800617 	ldw	r6,24(sp)
    3fb8:	0181380e 	bge	zero,r6,449c <_dtoa_r+0x1020>
    3fbc:	d8c00b17 	ldw	r3,44(sp)
    3fc0:	1800ab1e 	bne	r3,zero,4270 <_dtoa_r+0xdf4>
    3fc4:	dc800717 	ldw	r18,28(sp)
    3fc8:	dcc00617 	ldw	r19,24(sp)
    3fcc:	9029883a 	mov	r20,r18
    3fd0:	00000206 	br	3fdc <_dtoa_r+0xb60>
    3fd4:	0006be80 	call	6be8 <__multadd>
    3fd8:	1021883a 	mov	r16,r2
    3fdc:	a80b883a 	mov	r5,r21
    3fe0:	8009883a 	mov	r4,r16
    3fe4:	000327c0 	call	327c <quorem>
    3fe8:	10800c04 	addi	r2,r2,48
    3fec:	90800005 	stb	r2,0(r18)
    3ff0:	94800044 	addi	r18,r18,1
    3ff4:	9507c83a 	sub	r3,r18,r20
    3ff8:	000f883a 	mov	r7,zero
    3ffc:	01800284 	movi	r6,10
    4000:	800b883a 	mov	r5,r16
    4004:	e009883a 	mov	r4,fp
    4008:	1cfff216 	blt	r3,r19,3fd4 <_dtoa_r+0xb58>
    400c:	1011883a 	mov	r8,r2
    4010:	d8800617 	ldw	r2,24(sp)
    4014:	0082370e 	bge	zero,r2,48f4 <_dtoa_r+0x1478>
    4018:	d9000717 	ldw	r4,28(sp)
    401c:	0025883a 	mov	r18,zero
    4020:	20af883a 	add	r23,r4,r2
    4024:	01800044 	movi	r6,1
    4028:	800b883a 	mov	r5,r16
    402c:	e009883a 	mov	r4,fp
    4030:	da001715 	stw	r8,92(sp)
    4034:	00072980 	call	7298 <__lshift>
    4038:	a80b883a 	mov	r5,r21
    403c:	1009883a 	mov	r4,r2
    4040:	d8800915 	stw	r2,36(sp)
    4044:	00073e00 	call	73e0 <__mcmp>
    4048:	da001717 	ldw	r8,92(sp)
    404c:	0081800e 	bge	zero,r2,4650 <_dtoa_r+0x11d4>
    4050:	b93fffc3 	ldbu	r4,-1(r23)
    4054:	b8bfffc4 	addi	r2,r23,-1
    4058:	1007883a 	mov	r3,r2
    405c:	01800e44 	movi	r6,57
    4060:	d9c00717 	ldw	r7,28(sp)
    4064:	00000506 	br	407c <_dtoa_r+0xc00>
    4068:	18ffffc4 	addi	r3,r3,-1
    406c:	11c12326 	beq	r2,r7,44fc <_dtoa_r+0x1080>
    4070:	19000003 	ldbu	r4,0(r3)
    4074:	102f883a 	mov	r23,r2
    4078:	10bfffc4 	addi	r2,r2,-1
    407c:	21403fcc 	andi	r5,r4,255
    4080:	2940201c 	xori	r5,r5,128
    4084:	297fe004 	addi	r5,r5,-128
    4088:	29bff726 	beq	r5,r6,4068 <_dtoa_r+0xbec>
    408c:	21000044 	addi	r4,r4,1
    4090:	11000005 	stb	r4,0(r2)
    4094:	a80b883a 	mov	r5,r21
    4098:	e009883a 	mov	r4,fp
    409c:	0006bc00 	call	6bc0 <_Bfree>
    40a0:	883ea026 	beq	r17,zero,3b24 <_dtoa_r+0x6a8>
    40a4:	90000426 	beq	r18,zero,40b8 <_dtoa_r+0xc3c>
    40a8:	94400326 	beq	r18,r17,40b8 <_dtoa_r+0xc3c>
    40ac:	900b883a 	mov	r5,r18
    40b0:	e009883a 	mov	r4,fp
    40b4:	0006bc00 	call	6bc0 <_Bfree>
    40b8:	880b883a 	mov	r5,r17
    40bc:	e009883a 	mov	r4,fp
    40c0:	0006bc00 	call	6bc0 <_Bfree>
    40c4:	003e9706 	br	3b24 <_dtoa_r+0x6a8>
    40c8:	01800044 	movi	r6,1
    40cc:	d9800e15 	stw	r6,56(sp)
    40d0:	003d9606 	br	372c <_dtoa_r+0x2b0>
    40d4:	d8800817 	ldw	r2,32(sp)
    40d8:	d8c00517 	ldw	r3,20(sp)
    40dc:	d8000d15 	stw	zero,52(sp)
    40e0:	10c5c83a 	sub	r2,r2,r3
    40e4:	00c9c83a 	sub	r4,zero,r3
    40e8:	d8800815 	stw	r2,32(sp)
    40ec:	d9000a15 	stw	r4,40(sp)
    40f0:	003d9706 	br	3750 <_dtoa_r+0x2d4>
    40f4:	05adc83a 	sub	r22,zero,r22
    40f8:	dd800815 	stw	r22,32(sp)
    40fc:	002d883a 	mov	r22,zero
    4100:	003d8e06 	br	373c <_dtoa_r+0x2c0>
    4104:	d9000517 	ldw	r4,20(sp)
    4108:	000d3b80 	call	d3b8 <__floatsidf>
    410c:	100d883a 	mov	r6,r2
    4110:	180f883a 	mov	r7,r3
    4114:	a009883a 	mov	r4,r20
    4118:	880b883a 	mov	r5,r17
    411c:	000c0cc0 	call	c0cc <__eqdf2>
    4120:	103d7126 	beq	r2,zero,36e8 <_dtoa_r+0x26c>
    4124:	d9c00517 	ldw	r7,20(sp)
    4128:	39ffffc4 	addi	r7,r7,-1
    412c:	d9c00515 	stw	r7,20(sp)
    4130:	003d6d06 	br	36e8 <_dtoa_r+0x26c>
    4134:	dd400a17 	ldw	r21,40(sp)
    4138:	dd000817 	ldw	r20,32(sp)
    413c:	0023883a 	mov	r17,zero
    4140:	003f4806 	br	3e64 <_dtoa_r+0x9e8>
    4144:	10e3c83a 	sub	r17,r2,r3
    4148:	9448983a 	sll	r4,r18,r17
    414c:	003d3206 	br	3618 <_dtoa_r+0x19c>
    4150:	d8000e15 	stw	zero,56(sp)
    4154:	003d7506 	br	372c <_dtoa_r+0x2b0>
    4158:	b005883a 	mov	r2,r22
    415c:	003f4506 	br	3e74 <_dtoa_r+0x9f8>
    4160:	dc000915 	stw	r16,36(sp)
    4164:	d9800a17 	ldw	r6,40(sp)
    4168:	d9400917 	ldw	r5,36(sp)
    416c:	e009883a 	mov	r4,fp
    4170:	00071580 	call	7158 <__pow5mult>
    4174:	1021883a 	mov	r16,r2
    4178:	003f5a06 	br	3ee4 <_dtoa_r+0xa68>
    417c:	01c00044 	movi	r7,1
    4180:	d9c00b15 	stw	r7,44(sp)
    4184:	d8802217 	ldw	r2,136(sp)
    4188:	0081280e 	bge	zero,r2,462c <_dtoa_r+0x11b0>
    418c:	100d883a 	mov	r6,r2
    4190:	1021883a 	mov	r16,r2
    4194:	d8800c15 	stw	r2,48(sp)
    4198:	d8800615 	stw	r2,24(sp)
    419c:	003d8806 	br	37c0 <_dtoa_r+0x344>
    41a0:	d8800617 	ldw	r2,24(sp)
    41a4:	00be9b16 	blt	zero,r2,3c14 <_dtoa_r+0x798>
    41a8:	10010f1e 	bne	r2,zero,45e8 <_dtoa_r+0x116c>
    41ac:	880b883a 	mov	r5,r17
    41b0:	000d883a 	mov	r6,zero
    41b4:	01d00534 	movhi	r7,16404
    41b8:	8009883a 	mov	r4,r16
    41bc:	000c3240 	call	c324 <__muldf3>
    41c0:	900d883a 	mov	r6,r18
    41c4:	980f883a 	mov	r7,r19
    41c8:	1009883a 	mov	r4,r2
    41cc:	180b883a 	mov	r5,r3
    41d0:	000c1540 	call	c154 <__gedf2>
    41d4:	002b883a 	mov	r21,zero
    41d8:	0023883a 	mov	r17,zero
    41dc:	1000bf16 	blt	r2,zero,44dc <_dtoa_r+0x1060>
    41e0:	d9802217 	ldw	r6,136(sp)
    41e4:	ddc00717 	ldw	r23,28(sp)
    41e8:	018c303a 	nor	r6,zero,r6
    41ec:	d9800515 	stw	r6,20(sp)
    41f0:	a80b883a 	mov	r5,r21
    41f4:	e009883a 	mov	r4,fp
    41f8:	0006bc00 	call	6bc0 <_Bfree>
    41fc:	883e4926 	beq	r17,zero,3b24 <_dtoa_r+0x6a8>
    4200:	003fad06 	br	40b8 <_dtoa_r+0xc3c>
    4204:	d9c01117 	ldw	r7,68(sp)
    4208:	3801bc26 	beq	r7,zero,48fc <_dtoa_r+0x1480>
    420c:	10810cc4 	addi	r2,r2,1075
    4210:	dd400a17 	ldw	r21,40(sp)
    4214:	dd000817 	ldw	r20,32(sp)
    4218:	003f0a06 	br	3e44 <_dtoa_r+0x9c8>
    421c:	00800704 	movi	r2,28
    4220:	d9000817 	ldw	r4,32(sp)
    4224:	a0a9883a 	add	r20,r20,r2
    4228:	b0ad883a 	add	r22,r22,r2
    422c:	2089883a 	add	r4,r4,r2
    4230:	d9000815 	stw	r4,32(sp)
    4234:	003f5106 	br	3f7c <_dtoa_r+0xb00>
    4238:	d8c00317 	ldw	r3,12(sp)
    423c:	b8c1fc0e 	bge	r23,r3,4a30 <_dtoa_r+0x15b4>
    4240:	0027883a 	mov	r19,zero
    4244:	b805883a 	mov	r2,r23
    4248:	003f3e06 	br	3f44 <_dtoa_r+0xac8>
    424c:	880b883a 	mov	r5,r17
    4250:	e009883a 	mov	r4,fp
    4254:	000f883a 	mov	r7,zero
    4258:	01800284 	movi	r6,10
    425c:	0006be80 	call	6be8 <__multadd>
    4260:	d9000c17 	ldw	r4,48(sp)
    4264:	1023883a 	mov	r17,r2
    4268:	0102040e 	bge	zero,r4,4a7c <_dtoa_r+0x1600>
    426c:	d9000615 	stw	r4,24(sp)
    4270:	0500050e 	bge	zero,r20,4288 <_dtoa_r+0xe0c>
    4274:	880b883a 	mov	r5,r17
    4278:	a00d883a 	mov	r6,r20
    427c:	e009883a 	mov	r4,fp
    4280:	00072980 	call	7298 <__lshift>
    4284:	1023883a 	mov	r17,r2
    4288:	9801241e 	bne	r19,zero,471c <_dtoa_r+0x12a0>
    428c:	8829883a 	mov	r20,r17
    4290:	d9000617 	ldw	r4,24(sp)
    4294:	dcc00717 	ldw	r19,28(sp)
    4298:	9480004c 	andi	r18,r18,1
    429c:	20bfffc4 	addi	r2,r4,-1
    42a0:	9885883a 	add	r2,r19,r2
    42a4:	d8800415 	stw	r2,16(sp)
    42a8:	dc800615 	stw	r18,24(sp)
    42ac:	a80b883a 	mov	r5,r21
    42b0:	8009883a 	mov	r4,r16
    42b4:	000327c0 	call	327c <quorem>
    42b8:	880b883a 	mov	r5,r17
    42bc:	8009883a 	mov	r4,r16
    42c0:	102f883a 	mov	r23,r2
    42c4:	00073e00 	call	73e0 <__mcmp>
    42c8:	a80b883a 	mov	r5,r21
    42cc:	a00d883a 	mov	r6,r20
    42d0:	e009883a 	mov	r4,fp
    42d4:	102d883a 	mov	r22,r2
    42d8:	00074400 	call	7440 <__mdiff>
    42dc:	1007883a 	mov	r3,r2
    42e0:	10800317 	ldw	r2,12(r2)
    42e4:	bc800c04 	addi	r18,r23,48
    42e8:	180b883a 	mov	r5,r3
    42ec:	10004e1e 	bne	r2,zero,4428 <_dtoa_r+0xfac>
    42f0:	8009883a 	mov	r4,r16
    42f4:	d8c01615 	stw	r3,88(sp)
    42f8:	00073e00 	call	73e0 <__mcmp>
    42fc:	d8c01617 	ldw	r3,88(sp)
    4300:	e009883a 	mov	r4,fp
    4304:	d8801615 	stw	r2,88(sp)
    4308:	180b883a 	mov	r5,r3
    430c:	0006bc00 	call	6bc0 <_Bfree>
    4310:	d8801617 	ldw	r2,88(sp)
    4314:	1000041e 	bne	r2,zero,4328 <_dtoa_r+0xeac>
    4318:	d9800317 	ldw	r6,12(sp)
    431c:	3000021e 	bne	r6,zero,4328 <_dtoa_r+0xeac>
    4320:	d8c00617 	ldw	r3,24(sp)
    4324:	18003726 	beq	r3,zero,4404 <_dtoa_r+0xf88>
    4328:	b0002016 	blt	r22,zero,43ac <_dtoa_r+0xf30>
    432c:	b000041e 	bne	r22,zero,4340 <_dtoa_r+0xec4>
    4330:	d9000317 	ldw	r4,12(sp)
    4334:	2000021e 	bne	r4,zero,4340 <_dtoa_r+0xec4>
    4338:	d8c00617 	ldw	r3,24(sp)
    433c:	18001b26 	beq	r3,zero,43ac <_dtoa_r+0xf30>
    4340:	00810716 	blt	zero,r2,4760 <_dtoa_r+0x12e4>
    4344:	d8c00417 	ldw	r3,16(sp)
    4348:	9d800044 	addi	r22,r19,1
    434c:	9c800005 	stb	r18,0(r19)
    4350:	b02f883a 	mov	r23,r22
    4354:	98c10626 	beq	r19,r3,4770 <_dtoa_r+0x12f4>
    4358:	800b883a 	mov	r5,r16
    435c:	000f883a 	mov	r7,zero
    4360:	01800284 	movi	r6,10
    4364:	e009883a 	mov	r4,fp
    4368:	0006be80 	call	6be8 <__multadd>
    436c:	1021883a 	mov	r16,r2
    4370:	000f883a 	mov	r7,zero
    4374:	01800284 	movi	r6,10
    4378:	880b883a 	mov	r5,r17
    437c:	e009883a 	mov	r4,fp
    4380:	8d002526 	beq	r17,r20,4418 <_dtoa_r+0xf9c>
    4384:	0006be80 	call	6be8 <__multadd>
    4388:	a00b883a 	mov	r5,r20
    438c:	000f883a 	mov	r7,zero
    4390:	01800284 	movi	r6,10
    4394:	e009883a 	mov	r4,fp
    4398:	1023883a 	mov	r17,r2
    439c:	0006be80 	call	6be8 <__multadd>
    43a0:	1029883a 	mov	r20,r2
    43a4:	b027883a 	mov	r19,r22
    43a8:	003fc006 	br	42ac <_dtoa_r+0xe30>
    43ac:	9011883a 	mov	r8,r18
    43b0:	00800e0e 	bge	zero,r2,43ec <_dtoa_r+0xf70>
    43b4:	800b883a 	mov	r5,r16
    43b8:	01800044 	movi	r6,1
    43bc:	e009883a 	mov	r4,fp
    43c0:	da001715 	stw	r8,92(sp)
    43c4:	00072980 	call	7298 <__lshift>
    43c8:	a80b883a 	mov	r5,r21
    43cc:	1009883a 	mov	r4,r2
    43d0:	1021883a 	mov	r16,r2
    43d4:	00073e00 	call	73e0 <__mcmp>
    43d8:	da001717 	ldw	r8,92(sp)
    43dc:	0081960e 	bge	zero,r2,4a38 <_dtoa_r+0x15bc>
    43e0:	00800e44 	movi	r2,57
    43e4:	40817026 	beq	r8,r2,49a8 <_dtoa_r+0x152c>
    43e8:	ba000c44 	addi	r8,r23,49
    43ec:	8825883a 	mov	r18,r17
    43f0:	9dc00044 	addi	r23,r19,1
    43f4:	9a000005 	stb	r8,0(r19)
    43f8:	a023883a 	mov	r17,r20
    43fc:	dc000915 	stw	r16,36(sp)
    4400:	003f2406 	br	4094 <_dtoa_r+0xc18>
    4404:	00800e44 	movi	r2,57
    4408:	9011883a 	mov	r8,r18
    440c:	90816626 	beq	r18,r2,49a8 <_dtoa_r+0x152c>
    4410:	05bff516 	blt	zero,r22,43e8 <_dtoa_r+0xf6c>
    4414:	003ff506 	br	43ec <_dtoa_r+0xf70>
    4418:	0006be80 	call	6be8 <__multadd>
    441c:	1023883a 	mov	r17,r2
    4420:	1029883a 	mov	r20,r2
    4424:	003fdf06 	br	43a4 <_dtoa_r+0xf28>
    4428:	e009883a 	mov	r4,fp
    442c:	0006bc00 	call	6bc0 <_Bfree>
    4430:	00800044 	movi	r2,1
    4434:	003fbc06 	br	4328 <_dtoa_r+0xeac>
    4438:	a80b883a 	mov	r5,r21
    443c:	8009883a 	mov	r4,r16
    4440:	00073e00 	call	73e0 <__mcmp>
    4444:	103edb0e 	bge	r2,zero,3fb4 <_dtoa_r+0xb38>
    4448:	800b883a 	mov	r5,r16
    444c:	000f883a 	mov	r7,zero
    4450:	01800284 	movi	r6,10
    4454:	e009883a 	mov	r4,fp
    4458:	0006be80 	call	6be8 <__multadd>
    445c:	1021883a 	mov	r16,r2
    4460:	d8800517 	ldw	r2,20(sp)
    4464:	d8c00b17 	ldw	r3,44(sp)
    4468:	10bfffc4 	addi	r2,r2,-1
    446c:	d8800515 	stw	r2,20(sp)
    4470:	183f761e 	bne	r3,zero,424c <_dtoa_r+0xdd0>
    4474:	d9000c17 	ldw	r4,48(sp)
    4478:	0101730e 	bge	zero,r4,4a48 <_dtoa_r+0x15cc>
    447c:	d9000615 	stw	r4,24(sp)
    4480:	003ed006 	br	3fc4 <_dtoa_r+0xb48>
    4484:	00800084 	movi	r2,2
    4488:	3081861e 	bne	r6,r2,4aa4 <_dtoa_r+0x1628>
    448c:	d8000b15 	stw	zero,44(sp)
    4490:	003f3c06 	br	4184 <_dtoa_r+0xd08>
    4494:	dc000917 	ldw	r16,36(sp)
    4498:	003e9206 	br	3ee4 <_dtoa_r+0xa68>
    449c:	d9c00317 	ldw	r7,12(sp)
    44a0:	00800084 	movi	r2,2
    44a4:	11fec50e 	bge	r2,r7,3fbc <_dtoa_r+0xb40>
    44a8:	d9000617 	ldw	r4,24(sp)
    44ac:	20013c1e 	bne	r4,zero,49a0 <_dtoa_r+0x1524>
    44b0:	a80b883a 	mov	r5,r21
    44b4:	000f883a 	mov	r7,zero
    44b8:	01800144 	movi	r6,5
    44bc:	e009883a 	mov	r4,fp
    44c0:	0006be80 	call	6be8 <__multadd>
    44c4:	100b883a 	mov	r5,r2
    44c8:	8009883a 	mov	r4,r16
    44cc:	102b883a 	mov	r21,r2
    44d0:	00073e00 	call	73e0 <__mcmp>
    44d4:	dc000915 	stw	r16,36(sp)
    44d8:	00bf410e 	bge	zero,r2,41e0 <_dtoa_r+0xd64>
    44dc:	d9c00717 	ldw	r7,28(sp)
    44e0:	00800c44 	movi	r2,49
    44e4:	38800005 	stb	r2,0(r7)
    44e8:	d8800517 	ldw	r2,20(sp)
    44ec:	3dc00044 	addi	r23,r7,1
    44f0:	10800044 	addi	r2,r2,1
    44f4:	d8800515 	stw	r2,20(sp)
    44f8:	003f3d06 	br	41f0 <_dtoa_r+0xd74>
    44fc:	d9800517 	ldw	r6,20(sp)
    4500:	d9c00717 	ldw	r7,28(sp)
    4504:	00800c44 	movi	r2,49
    4508:	31800044 	addi	r6,r6,1
    450c:	d9800515 	stw	r6,20(sp)
    4510:	38800005 	stb	r2,0(r7)
    4514:	003edf06 	br	4094 <_dtoa_r+0xc18>
    4518:	d8000b15 	stw	zero,44(sp)
    451c:	003c9f06 	br	379c <_dtoa_r+0x320>
    4520:	903e7e1e 	bne	r18,zero,3f1c <_dtoa_r+0xaa0>
    4524:	00800434 	movhi	r2,16
    4528:	10bfffc4 	addi	r2,r2,-1
    452c:	9884703a 	and	r2,r19,r2
    4530:	1000ea1e 	bne	r2,zero,48dc <_dtoa_r+0x1460>
    4534:	9cdffc2c 	andhi	r19,r19,32752
    4538:	9800e826 	beq	r19,zero,48dc <_dtoa_r+0x1460>
    453c:	d9c00817 	ldw	r7,32(sp)
    4540:	b5800044 	addi	r22,r22,1
    4544:	04c00044 	movi	r19,1
    4548:	39c00044 	addi	r7,r7,1
    454c:	d9c00815 	stw	r7,32(sp)
    4550:	d8800d17 	ldw	r2,52(sp)
    4554:	103e721e 	bne	r2,zero,3f20 <_dtoa_r+0xaa4>
    4558:	00800044 	movi	r2,1
    455c:	003e7906 	br	3f44 <_dtoa_r+0xac8>
    4560:	8009883a 	mov	r4,r16
    4564:	000d3b80 	call	d3b8 <__floatsidf>
    4568:	d9800f17 	ldw	r6,60(sp)
    456c:	d9c01017 	ldw	r7,64(sp)
    4570:	1009883a 	mov	r4,r2
    4574:	180b883a 	mov	r5,r3
    4578:	000c3240 	call	c324 <__muldf3>
    457c:	000d883a 	mov	r6,zero
    4580:	01d00734 	movhi	r7,16412
    4584:	1009883a 	mov	r4,r2
    4588:	180b883a 	mov	r5,r3
    458c:	000af380 	call	af38 <__adddf3>
    4590:	047f3034 	movhi	r17,64704
    4594:	1021883a 	mov	r16,r2
    4598:	1c63883a 	add	r17,r3,r17
    459c:	d9000f17 	ldw	r4,60(sp)
    45a0:	d9401017 	ldw	r5,64(sp)
    45a4:	000d883a 	mov	r6,zero
    45a8:	01d00534 	movhi	r7,16404
    45ac:	000ca3c0 	call	ca3c <__subdf3>
    45b0:	800d883a 	mov	r6,r16
    45b4:	880f883a 	mov	r7,r17
    45b8:	1009883a 	mov	r4,r2
    45bc:	180b883a 	mov	r5,r3
    45c0:	102b883a 	mov	r21,r2
    45c4:	1829883a 	mov	r20,r3
    45c8:	000c1540 	call	c154 <__gedf2>
    45cc:	00806c16 	blt	zero,r2,4780 <_dtoa_r+0x1304>
    45d0:	89e0003c 	xorhi	r7,r17,32768
    45d4:	800d883a 	mov	r6,r16
    45d8:	a809883a 	mov	r4,r21
    45dc:	a00b883a 	mov	r5,r20
    45e0:	000c2300 	call	c230 <__ledf2>
    45e4:	103d7e0e 	bge	r2,zero,3be0 <_dtoa_r+0x764>
    45e8:	002b883a 	mov	r21,zero
    45ec:	0023883a 	mov	r17,zero
    45f0:	003efb06 	br	41e0 <_dtoa_r+0xd64>
    45f4:	d8800717 	ldw	r2,28(sp)
    45f8:	003bd006 	br	353c <_dtoa_r+0xc0>
    45fc:	d9000a17 	ldw	r4,40(sp)
    4600:	d9800d17 	ldw	r6,52(sp)
    4604:	dd400a15 	stw	r21,40(sp)
    4608:	a905c83a 	sub	r2,r21,r4
    460c:	308d883a 	add	r6,r6,r2
    4610:	d9800d15 	stw	r6,52(sp)
    4614:	002b883a 	mov	r21,zero
    4618:	003e0606 	br	3e34 <_dtoa_r+0x9b8>
    461c:	9023883a 	mov	r17,r18
    4620:	9829883a 	mov	r20,r19
    4624:	04000084 	movi	r16,2
    4628:	003c9206 	br	3874 <_dtoa_r+0x3f8>
    462c:	04000044 	movi	r16,1
    4630:	dc000c15 	stw	r16,48(sp)
    4634:	dc000615 	stw	r16,24(sp)
    4638:	dc002215 	stw	r16,136(sp)
    463c:	e0001115 	stw	zero,68(fp)
    4640:	000b883a 	mov	r5,zero
    4644:	003c6906 	br	37ec <_dtoa_r+0x370>
    4648:	3021883a 	mov	r16,r6
    464c:	003ffb06 	br	463c <_dtoa_r+0x11c0>
    4650:	1000021e 	bne	r2,zero,465c <_dtoa_r+0x11e0>
    4654:	4200004c 	andi	r8,r8,1
    4658:	403e7d1e 	bne	r8,zero,4050 <_dtoa_r+0xbd4>
    465c:	01000c04 	movi	r4,48
    4660:	00000106 	br	4668 <_dtoa_r+0x11ec>
    4664:	102f883a 	mov	r23,r2
    4668:	b8bfffc4 	addi	r2,r23,-1
    466c:	10c00007 	ldb	r3,0(r2)
    4670:	193ffc26 	beq	r3,r4,4664 <_dtoa_r+0x11e8>
    4674:	003e8706 	br	4094 <_dtoa_r+0xc18>
    4678:	d8800517 	ldw	r2,20(sp)
    467c:	00a3c83a 	sub	r17,zero,r2
    4680:	8800a426 	beq	r17,zero,4914 <_dtoa_r+0x1498>
    4684:	888003cc 	andi	r2,r17,15
    4688:	100490fa 	slli	r2,r2,3
    468c:	00c000b4 	movhi	r3,2
    4690:	18e78604 	addi	r3,r3,-25064
    4694:	1885883a 	add	r2,r3,r2
    4698:	11800017 	ldw	r6,0(r2)
    469c:	11c00117 	ldw	r7,4(r2)
    46a0:	9009883a 	mov	r4,r18
    46a4:	980b883a 	mov	r5,r19
    46a8:	8823d13a 	srai	r17,r17,4
    46ac:	000c3240 	call	c324 <__muldf3>
    46b0:	d8800f15 	stw	r2,60(sp)
    46b4:	d8c01015 	stw	r3,64(sp)
    46b8:	8800e826 	beq	r17,zero,4a5c <_dtoa_r+0x15e0>
    46bc:	050000b4 	movhi	r20,2
    46c0:	a5277c04 	addi	r20,r20,-25104
    46c4:	04000084 	movi	r16,2
    46c8:	8980004c 	andi	r6,r17,1
    46cc:	1009883a 	mov	r4,r2
    46d0:	8823d07a 	srai	r17,r17,1
    46d4:	180b883a 	mov	r5,r3
    46d8:	30000426 	beq	r6,zero,46ec <_dtoa_r+0x1270>
    46dc:	a1800017 	ldw	r6,0(r20)
    46e0:	a1c00117 	ldw	r7,4(r20)
    46e4:	84000044 	addi	r16,r16,1
    46e8:	000c3240 	call	c324 <__muldf3>
    46ec:	a5000204 	addi	r20,r20,8
    46f0:	883ff51e 	bne	r17,zero,46c8 <_dtoa_r+0x124c>
    46f4:	d8800f15 	stw	r2,60(sp)
    46f8:	d8c01015 	stw	r3,64(sp)
    46fc:	003c7606 	br	38d8 <_dtoa_r+0x45c>
    4700:	00c00c04 	movi	r3,48
    4704:	10c00005 	stb	r3,0(r2)
    4708:	d8c00517 	ldw	r3,20(sp)
    470c:	bd3fffc3 	ldbu	r20,-1(r23)
    4710:	18c00044 	addi	r3,r3,1
    4714:	d8c00515 	stw	r3,20(sp)
    4718:	003db906 	br	3e00 <_dtoa_r+0x984>
    471c:	89400117 	ldw	r5,4(r17)
    4720:	e009883a 	mov	r4,fp
    4724:	0006b180 	call	6b18 <_Balloc>
    4728:	89800417 	ldw	r6,16(r17)
    472c:	89400304 	addi	r5,r17,12
    4730:	11000304 	addi	r4,r2,12
    4734:	31800084 	addi	r6,r6,2
    4738:	318d883a 	add	r6,r6,r6
    473c:	318d883a 	add	r6,r6,r6
    4740:	1027883a 	mov	r19,r2
    4744:	000674c0 	call	674c <memcpy>
    4748:	01800044 	movi	r6,1
    474c:	980b883a 	mov	r5,r19
    4750:	e009883a 	mov	r4,fp
    4754:	00072980 	call	7298 <__lshift>
    4758:	1029883a 	mov	r20,r2
    475c:	003ecc06 	br	4290 <_dtoa_r+0xe14>
    4760:	00800e44 	movi	r2,57
    4764:	90809026 	beq	r18,r2,49a8 <_dtoa_r+0x152c>
    4768:	92000044 	addi	r8,r18,1
    476c:	003f1f06 	br	43ec <_dtoa_r+0xf70>
    4770:	9011883a 	mov	r8,r18
    4774:	8825883a 	mov	r18,r17
    4778:	a023883a 	mov	r17,r20
    477c:	003e2906 	br	4024 <_dtoa_r+0xba8>
    4780:	002b883a 	mov	r21,zero
    4784:	0023883a 	mov	r17,zero
    4788:	003f5406 	br	44dc <_dtoa_r+0x1060>
    478c:	61bfffc4 	addi	r6,r12,-1
    4790:	300490fa 	slli	r2,r6,3
    4794:	00c000b4 	movhi	r3,2
    4798:	18e78604 	addi	r3,r3,-25064
    479c:	1885883a 	add	r2,r3,r2
    47a0:	11000017 	ldw	r4,0(r2)
    47a4:	11400117 	ldw	r5,4(r2)
    47a8:	d8800717 	ldw	r2,28(sp)
    47ac:	880f883a 	mov	r7,r17
    47b0:	d9801215 	stw	r6,72(sp)
    47b4:	800d883a 	mov	r6,r16
    47b8:	db001615 	stw	r12,88(sp)
    47bc:	15c00044 	addi	r23,r2,1
    47c0:	000c3240 	call	c324 <__muldf3>
    47c4:	d9401017 	ldw	r5,64(sp)
    47c8:	d9000f17 	ldw	r4,60(sp)
    47cc:	d8c01515 	stw	r3,84(sp)
    47d0:	d8801415 	stw	r2,80(sp)
    47d4:	000d3380 	call	d338 <__fixdfsi>
    47d8:	1009883a 	mov	r4,r2
    47dc:	1021883a 	mov	r16,r2
    47e0:	000d3b80 	call	d3b8 <__floatsidf>
    47e4:	d9000f17 	ldw	r4,60(sp)
    47e8:	d9401017 	ldw	r5,64(sp)
    47ec:	100d883a 	mov	r6,r2
    47f0:	180f883a 	mov	r7,r3
    47f4:	000ca3c0 	call	ca3c <__subdf3>
    47f8:	1829883a 	mov	r20,r3
    47fc:	d8c00717 	ldw	r3,28(sp)
    4800:	84000c04 	addi	r16,r16,48
    4804:	1023883a 	mov	r17,r2
    4808:	1c000005 	stb	r16,0(r3)
    480c:	db001617 	ldw	r12,88(sp)
    4810:	00800044 	movi	r2,1
    4814:	60802226 	beq	r12,r2,48a0 <_dtoa_r+0x1424>
    4818:	d9c00717 	ldw	r7,28(sp)
    481c:	8805883a 	mov	r2,r17
    4820:	b82b883a 	mov	r21,r23
    4824:	3b19883a 	add	r12,r7,r12
    4828:	6023883a 	mov	r17,r12
    482c:	a007883a 	mov	r3,r20
    4830:	dc800f15 	stw	r18,60(sp)
    4834:	000d883a 	mov	r6,zero
    4838:	01d00934 	movhi	r7,16420
    483c:	1009883a 	mov	r4,r2
    4840:	180b883a 	mov	r5,r3
    4844:	000c3240 	call	c324 <__muldf3>
    4848:	180b883a 	mov	r5,r3
    484c:	1009883a 	mov	r4,r2
    4850:	1829883a 	mov	r20,r3
    4854:	1025883a 	mov	r18,r2
    4858:	000d3380 	call	d338 <__fixdfsi>
    485c:	1009883a 	mov	r4,r2
    4860:	1021883a 	mov	r16,r2
    4864:	000d3b80 	call	d3b8 <__floatsidf>
    4868:	100d883a 	mov	r6,r2
    486c:	180f883a 	mov	r7,r3
    4870:	9009883a 	mov	r4,r18
    4874:	a00b883a 	mov	r5,r20
    4878:	84000c04 	addi	r16,r16,48
    487c:	000ca3c0 	call	ca3c <__subdf3>
    4880:	ad400044 	addi	r21,r21,1
    4884:	ac3fffc5 	stb	r16,-1(r21)
    4888:	ac7fea1e 	bne	r21,r17,4834 <_dtoa_r+0x13b8>
    488c:	1023883a 	mov	r17,r2
    4890:	d8801217 	ldw	r2,72(sp)
    4894:	dc800f17 	ldw	r18,60(sp)
    4898:	1829883a 	mov	r20,r3
    489c:	b8af883a 	add	r23,r23,r2
    48a0:	d9001417 	ldw	r4,80(sp)
    48a4:	d9401517 	ldw	r5,84(sp)
    48a8:	000d883a 	mov	r6,zero
    48ac:	01cff834 	movhi	r7,16352
    48b0:	000af380 	call	af38 <__adddf3>
    48b4:	880d883a 	mov	r6,r17
    48b8:	a00f883a 	mov	r7,r20
    48bc:	1009883a 	mov	r4,r2
    48c0:	180b883a 	mov	r5,r3
    48c4:	000c2300 	call	c230 <__ledf2>
    48c8:	10003e0e 	bge	r2,zero,49c4 <_dtoa_r+0x1548>
    48cc:	d9001317 	ldw	r4,76(sp)
    48d0:	bd3fffc3 	ldbu	r20,-1(r23)
    48d4:	d9000515 	stw	r4,20(sp)
    48d8:	003d3b06 	br	3dc8 <_dtoa_r+0x94c>
    48dc:	0027883a 	mov	r19,zero
    48e0:	003f1b06 	br	4550 <_dtoa_r+0x10d4>
    48e4:	d8800817 	ldw	r2,32(sp)
    48e8:	11e9c83a 	sub	r20,r2,r7
    48ec:	0005883a 	mov	r2,zero
    48f0:	003d5406 	br	3e44 <_dtoa_r+0x9c8>
    48f4:	00800044 	movi	r2,1
    48f8:	003dc706 	br	4018 <_dtoa_r+0xb9c>
    48fc:	d8c00217 	ldw	r3,8(sp)
    4900:	00800d84 	movi	r2,54
    4904:	dd400a17 	ldw	r21,40(sp)
    4908:	10c5c83a 	sub	r2,r2,r3
    490c:	dd000817 	ldw	r20,32(sp)
    4910:	003d4c06 	br	3e44 <_dtoa_r+0x9c8>
    4914:	dc800f15 	stw	r18,60(sp)
    4918:	dcc01015 	stw	r19,64(sp)
    491c:	04000084 	movi	r16,2
    4920:	003bed06 	br	38d8 <_dtoa_r+0x45c>
    4924:	d9000617 	ldw	r4,24(sp)
    4928:	203f0d26 	beq	r4,zero,4560 <_dtoa_r+0x10e4>
    492c:	d9800c17 	ldw	r6,48(sp)
    4930:	01bcab0e 	bge	zero,r6,3be0 <_dtoa_r+0x764>
    4934:	d9401017 	ldw	r5,64(sp)
    4938:	d9000f17 	ldw	r4,60(sp)
    493c:	000d883a 	mov	r6,zero
    4940:	01d00934 	movhi	r7,16420
    4944:	000c3240 	call	c324 <__muldf3>
    4948:	81000044 	addi	r4,r16,1
    494c:	d8800f15 	stw	r2,60(sp)
    4950:	d8c01015 	stw	r3,64(sp)
    4954:	000d3b80 	call	d3b8 <__floatsidf>
    4958:	d9800f17 	ldw	r6,60(sp)
    495c:	d9c01017 	ldw	r7,64(sp)
    4960:	1009883a 	mov	r4,r2
    4964:	180b883a 	mov	r5,r3
    4968:	000c3240 	call	c324 <__muldf3>
    496c:	01d00734 	movhi	r7,16412
    4970:	000d883a 	mov	r6,zero
    4974:	1009883a 	mov	r4,r2
    4978:	180b883a 	mov	r5,r3
    497c:	000af380 	call	af38 <__adddf3>
    4980:	d9c00517 	ldw	r7,20(sp)
    4984:	047f3034 	movhi	r17,64704
    4988:	1021883a 	mov	r16,r2
    498c:	39ffffc4 	addi	r7,r7,-1
    4990:	d9c01315 	stw	r7,76(sp)
    4994:	1c63883a 	add	r17,r3,r17
    4998:	db000c17 	ldw	r12,48(sp)
    499c:	003bea06 	br	3948 <_dtoa_r+0x4cc>
    49a0:	dc000915 	stw	r16,36(sp)
    49a4:	003e0e06 	br	41e0 <_dtoa_r+0xd64>
    49a8:	01000e44 	movi	r4,57
    49ac:	8825883a 	mov	r18,r17
    49b0:	9dc00044 	addi	r23,r19,1
    49b4:	99000005 	stb	r4,0(r19)
    49b8:	a023883a 	mov	r17,r20
    49bc:	dc000915 	stw	r16,36(sp)
    49c0:	003da406 	br	4054 <_dtoa_r+0xbd8>
    49c4:	d9801417 	ldw	r6,80(sp)
    49c8:	d9c01517 	ldw	r7,84(sp)
    49cc:	0009883a 	mov	r4,zero
    49d0:	014ff834 	movhi	r5,16352
    49d4:	000ca3c0 	call	ca3c <__subdf3>
    49d8:	880d883a 	mov	r6,r17
    49dc:	a00f883a 	mov	r7,r20
    49e0:	1009883a 	mov	r4,r2
    49e4:	180b883a 	mov	r5,r3
    49e8:	000c1540 	call	c154 <__gedf2>
    49ec:	00bc7c0e 	bge	zero,r2,3be0 <_dtoa_r+0x764>
    49f0:	01000c04 	movi	r4,48
    49f4:	00000106 	br	49fc <_dtoa_r+0x1580>
    49f8:	102f883a 	mov	r23,r2
    49fc:	b8bfffc4 	addi	r2,r23,-1
    4a00:	10c00007 	ldb	r3,0(r2)
    4a04:	193ffc26 	beq	r3,r4,49f8 <_dtoa_r+0x157c>
    4a08:	d9801317 	ldw	r6,76(sp)
    4a0c:	d9800515 	stw	r6,20(sp)
    4a10:	003c4406 	br	3b24 <_dtoa_r+0x6a8>
    4a14:	d9801317 	ldw	r6,76(sp)
    4a18:	d9800515 	stw	r6,20(sp)
    4a1c:	003cea06 	br	3dc8 <_dtoa_r+0x94c>
    4a20:	dd800f17 	ldw	r22,60(sp)
    4a24:	dcc01017 	ldw	r19,64(sp)
    4a28:	dc801217 	ldw	r18,72(sp)
    4a2c:	003c6c06 	br	3be0 <_dtoa_r+0x764>
    4a30:	903e031e 	bne	r18,zero,4240 <_dtoa_r+0xdc4>
    4a34:	003ebb06 	br	4524 <_dtoa_r+0x10a8>
    4a38:	103e6c1e 	bne	r2,zero,43ec <_dtoa_r+0xf70>
    4a3c:	4080004c 	andi	r2,r8,1
    4a40:	103e6a26 	beq	r2,zero,43ec <_dtoa_r+0xf70>
    4a44:	003e6606 	br	43e0 <_dtoa_r+0xf64>
    4a48:	d8c00317 	ldw	r3,12(sp)
    4a4c:	00800084 	movi	r2,2
    4a50:	10c02916 	blt	r2,r3,4af8 <_dtoa_r+0x167c>
    4a54:	d9000c17 	ldw	r4,48(sp)
    4a58:	003e8806 	br	447c <_dtoa_r+0x1000>
    4a5c:	04000084 	movi	r16,2
    4a60:	003b9d06 	br	38d8 <_dtoa_r+0x45c>
    4a64:	d9001317 	ldw	r4,76(sp)
    4a68:	d9000515 	stw	r4,20(sp)
    4a6c:	003cd606 	br	3dc8 <_dtoa_r+0x94c>
    4a70:	d8801317 	ldw	r2,76(sp)
    4a74:	d8800515 	stw	r2,20(sp)
    4a78:	003c2a06 	br	3b24 <_dtoa_r+0x6a8>
    4a7c:	d9800317 	ldw	r6,12(sp)
    4a80:	00800084 	movi	r2,2
    4a84:	11801516 	blt	r2,r6,4adc <_dtoa_r+0x1660>
    4a88:	d9c00c17 	ldw	r7,48(sp)
    4a8c:	d9c00615 	stw	r7,24(sp)
    4a90:	003df706 	br	4270 <_dtoa_r+0xdf4>
    4a94:	193d3926 	beq	r3,r4,3f7c <_dtoa_r+0xb00>
    4a98:	00c00f04 	movi	r3,60
    4a9c:	1885c83a 	sub	r2,r3,r2
    4aa0:	003ddf06 	br	4220 <_dtoa_r+0xda4>
    4aa4:	e009883a 	mov	r4,fp
    4aa8:	e0001115 	stw	zero,68(fp)
    4aac:	000b883a 	mov	r5,zero
    4ab0:	0006b180 	call	6b18 <_Balloc>
    4ab4:	d8800715 	stw	r2,28(sp)
    4ab8:	d8c00717 	ldw	r3,28(sp)
    4abc:	00bfffc4 	movi	r2,-1
    4ac0:	01000044 	movi	r4,1
    4ac4:	d8800c15 	stw	r2,48(sp)
    4ac8:	e0c01015 	stw	r3,64(fp)
    4acc:	d9000b15 	stw	r4,44(sp)
    4ad0:	d8800615 	stw	r2,24(sp)
    4ad4:	d8002215 	stw	zero,136(sp)
    4ad8:	003c4106 	br	3be0 <_dtoa_r+0x764>
    4adc:	d8c00c17 	ldw	r3,48(sp)
    4ae0:	d8c00615 	stw	r3,24(sp)
    4ae4:	003e7006 	br	44a8 <_dtoa_r+0x102c>
    4ae8:	04400044 	movi	r17,1
    4aec:	003b2006 	br	3770 <_dtoa_r+0x2f4>
    4af0:	000b883a 	mov	r5,zero
    4af4:	003b3d06 	br	37ec <_dtoa_r+0x370>
    4af8:	d8800c17 	ldw	r2,48(sp)
    4afc:	d8800615 	stw	r2,24(sp)
    4b00:	003e6906 	br	44a8 <_dtoa_r+0x102c>

00004b04 <__sflush_r>:
    4b04:	2880030b 	ldhu	r2,12(r5)
    4b08:	defffb04 	addi	sp,sp,-20
    4b0c:	dcc00315 	stw	r19,12(sp)
    4b10:	dc400115 	stw	r17,4(sp)
    4b14:	dfc00415 	stw	ra,16(sp)
    4b18:	dc800215 	stw	r18,8(sp)
    4b1c:	dc000015 	stw	r16,0(sp)
    4b20:	10c0020c 	andi	r3,r2,8
    4b24:	2823883a 	mov	r17,r5
    4b28:	2027883a 	mov	r19,r4
    4b2c:	1800311e 	bne	r3,zero,4bf4 <__sflush_r+0xf0>
    4b30:	28c00117 	ldw	r3,4(r5)
    4b34:	10820014 	ori	r2,r2,2048
    4b38:	2880030d 	sth	r2,12(r5)
    4b3c:	00c04b0e 	bge	zero,r3,4c6c <__sflush_r+0x168>
    4b40:	8a000a17 	ldw	r8,40(r17)
    4b44:	40002326 	beq	r8,zero,4bd4 <__sflush_r+0xd0>
    4b48:	9c000017 	ldw	r16,0(r19)
    4b4c:	10c4000c 	andi	r3,r2,4096
    4b50:	98000015 	stw	zero,0(r19)
    4b54:	18004826 	beq	r3,zero,4c78 <__sflush_r+0x174>
    4b58:	89801417 	ldw	r6,80(r17)
    4b5c:	10c0010c 	andi	r3,r2,4
    4b60:	18000626 	beq	r3,zero,4b7c <__sflush_r+0x78>
    4b64:	88c00117 	ldw	r3,4(r17)
    4b68:	88800c17 	ldw	r2,48(r17)
    4b6c:	30cdc83a 	sub	r6,r6,r3
    4b70:	10000226 	beq	r2,zero,4b7c <__sflush_r+0x78>
    4b74:	88800f17 	ldw	r2,60(r17)
    4b78:	308dc83a 	sub	r6,r6,r2
    4b7c:	89400717 	ldw	r5,28(r17)
    4b80:	000f883a 	mov	r7,zero
    4b84:	9809883a 	mov	r4,r19
    4b88:	403ee83a 	callr	r8
    4b8c:	00ffffc4 	movi	r3,-1
    4b90:	10c04426 	beq	r2,r3,4ca4 <__sflush_r+0x1a0>
    4b94:	88c0030b 	ldhu	r3,12(r17)
    4b98:	89000417 	ldw	r4,16(r17)
    4b9c:	88000115 	stw	zero,4(r17)
    4ba0:	197dffcc 	andi	r5,r3,63487
    4ba4:	8940030d 	sth	r5,12(r17)
    4ba8:	89000015 	stw	r4,0(r17)
    4bac:	18c4000c 	andi	r3,r3,4096
    4bb0:	18002c1e 	bne	r3,zero,4c64 <__sflush_r+0x160>
    4bb4:	89400c17 	ldw	r5,48(r17)
    4bb8:	9c000015 	stw	r16,0(r19)
    4bbc:	28000526 	beq	r5,zero,4bd4 <__sflush_r+0xd0>
    4bc0:	88801004 	addi	r2,r17,64
    4bc4:	28800226 	beq	r5,r2,4bd0 <__sflush_r+0xcc>
    4bc8:	9809883a 	mov	r4,r19
    4bcc:	00052700 	call	5270 <_free_r>
    4bd0:	88000c15 	stw	zero,48(r17)
    4bd4:	0005883a 	mov	r2,zero
    4bd8:	dfc00417 	ldw	ra,16(sp)
    4bdc:	dcc00317 	ldw	r19,12(sp)
    4be0:	dc800217 	ldw	r18,8(sp)
    4be4:	dc400117 	ldw	r17,4(sp)
    4be8:	dc000017 	ldw	r16,0(sp)
    4bec:	dec00504 	addi	sp,sp,20
    4bf0:	f800283a 	ret
    4bf4:	2c800417 	ldw	r18,16(r5)
    4bf8:	903ff626 	beq	r18,zero,4bd4 <__sflush_r+0xd0>
    4bfc:	2c000017 	ldw	r16,0(r5)
    4c00:	108000cc 	andi	r2,r2,3
    4c04:	2c800015 	stw	r18,0(r5)
    4c08:	84a1c83a 	sub	r16,r16,r18
    4c0c:	1000131e 	bne	r2,zero,4c5c <__sflush_r+0x158>
    4c10:	28800517 	ldw	r2,20(r5)
    4c14:	88800215 	stw	r2,8(r17)
    4c18:	04000316 	blt	zero,r16,4c28 <__sflush_r+0x124>
    4c1c:	003fed06 	br	4bd4 <__sflush_r+0xd0>
    4c20:	90a5883a 	add	r18,r18,r2
    4c24:	043feb0e 	bge	zero,r16,4bd4 <__sflush_r+0xd0>
    4c28:	88800917 	ldw	r2,36(r17)
    4c2c:	89400717 	ldw	r5,28(r17)
    4c30:	800f883a 	mov	r7,r16
    4c34:	900d883a 	mov	r6,r18
    4c38:	9809883a 	mov	r4,r19
    4c3c:	103ee83a 	callr	r2
    4c40:	80a1c83a 	sub	r16,r16,r2
    4c44:	00bff616 	blt	zero,r2,4c20 <__sflush_r+0x11c>
    4c48:	88c0030b 	ldhu	r3,12(r17)
    4c4c:	00bfffc4 	movi	r2,-1
    4c50:	18c01014 	ori	r3,r3,64
    4c54:	88c0030d 	sth	r3,12(r17)
    4c58:	003fdf06 	br	4bd8 <__sflush_r+0xd4>
    4c5c:	0005883a 	mov	r2,zero
    4c60:	003fec06 	br	4c14 <__sflush_r+0x110>
    4c64:	88801415 	stw	r2,80(r17)
    4c68:	003fd206 	br	4bb4 <__sflush_r+0xb0>
    4c6c:	28c00f17 	ldw	r3,60(r5)
    4c70:	00ffb316 	blt	zero,r3,4b40 <__sflush_r+0x3c>
    4c74:	003fd706 	br	4bd4 <__sflush_r+0xd0>
    4c78:	89400717 	ldw	r5,28(r17)
    4c7c:	000d883a 	mov	r6,zero
    4c80:	01c00044 	movi	r7,1
    4c84:	9809883a 	mov	r4,r19
    4c88:	403ee83a 	callr	r8
    4c8c:	100d883a 	mov	r6,r2
    4c90:	00bfffc4 	movi	r2,-1
    4c94:	30801426 	beq	r6,r2,4ce8 <__sflush_r+0x1e4>
    4c98:	8880030b 	ldhu	r2,12(r17)
    4c9c:	8a000a17 	ldw	r8,40(r17)
    4ca0:	003fae06 	br	4b5c <__sflush_r+0x58>
    4ca4:	98c00017 	ldw	r3,0(r19)
    4ca8:	183fba26 	beq	r3,zero,4b94 <__sflush_r+0x90>
    4cac:	01000744 	movi	r4,29
    4cb0:	19000626 	beq	r3,r4,4ccc <__sflush_r+0x1c8>
    4cb4:	01000584 	movi	r4,22
    4cb8:	19000426 	beq	r3,r4,4ccc <__sflush_r+0x1c8>
    4cbc:	88c0030b 	ldhu	r3,12(r17)
    4cc0:	18c01014 	ori	r3,r3,64
    4cc4:	88c0030d 	sth	r3,12(r17)
    4cc8:	003fc306 	br	4bd8 <__sflush_r+0xd4>
    4ccc:	8880030b 	ldhu	r2,12(r17)
    4cd0:	88c00417 	ldw	r3,16(r17)
    4cd4:	88000115 	stw	zero,4(r17)
    4cd8:	10bdffcc 	andi	r2,r2,63487
    4cdc:	8880030d 	sth	r2,12(r17)
    4ce0:	88c00015 	stw	r3,0(r17)
    4ce4:	003fb306 	br	4bb4 <__sflush_r+0xb0>
    4ce8:	98800017 	ldw	r2,0(r19)
    4cec:	103fea26 	beq	r2,zero,4c98 <__sflush_r+0x194>
    4cf0:	00c00744 	movi	r3,29
    4cf4:	10c00226 	beq	r2,r3,4d00 <__sflush_r+0x1fc>
    4cf8:	00c00584 	movi	r3,22
    4cfc:	10c0031e 	bne	r2,r3,4d0c <__sflush_r+0x208>
    4d00:	9c000015 	stw	r16,0(r19)
    4d04:	0005883a 	mov	r2,zero
    4d08:	003fb306 	br	4bd8 <__sflush_r+0xd4>
    4d0c:	88c0030b 	ldhu	r3,12(r17)
    4d10:	3005883a 	mov	r2,r6
    4d14:	18c01014 	ori	r3,r3,64
    4d18:	88c0030d 	sth	r3,12(r17)
    4d1c:	003fae06 	br	4bd8 <__sflush_r+0xd4>

00004d20 <_fflush_r>:
    4d20:	defffd04 	addi	sp,sp,-12
    4d24:	dc000115 	stw	r16,4(sp)
    4d28:	dfc00215 	stw	ra,8(sp)
    4d2c:	2021883a 	mov	r16,r4
    4d30:	20000226 	beq	r4,zero,4d3c <_fflush_r+0x1c>
    4d34:	20800e17 	ldw	r2,56(r4)
    4d38:	10000c26 	beq	r2,zero,4d6c <_fflush_r+0x4c>
    4d3c:	2880030f 	ldh	r2,12(r5)
    4d40:	1000051e 	bne	r2,zero,4d58 <_fflush_r+0x38>
    4d44:	0005883a 	mov	r2,zero
    4d48:	dfc00217 	ldw	ra,8(sp)
    4d4c:	dc000117 	ldw	r16,4(sp)
    4d50:	dec00304 	addi	sp,sp,12
    4d54:	f800283a 	ret
    4d58:	8009883a 	mov	r4,r16
    4d5c:	dfc00217 	ldw	ra,8(sp)
    4d60:	dc000117 	ldw	r16,4(sp)
    4d64:	dec00304 	addi	sp,sp,12
    4d68:	0004b041 	jmpi	4b04 <__sflush_r>
    4d6c:	d9400015 	stw	r5,0(sp)
    4d70:	00050fc0 	call	50fc <__sinit>
    4d74:	d9400017 	ldw	r5,0(sp)
    4d78:	003ff006 	br	4d3c <_fflush_r+0x1c>

00004d7c <fflush>:
    4d7c:	20000526 	beq	r4,zero,4d94 <fflush+0x18>
    4d80:	008000b4 	movhi	r2,2
    4d84:	10b01b04 	addi	r2,r2,-16276
    4d88:	200b883a 	mov	r5,r4
    4d8c:	11000017 	ldw	r4,0(r2)
    4d90:	0004d201 	jmpi	4d20 <_fflush_r>
    4d94:	008000b4 	movhi	r2,2
    4d98:	10b01a04 	addi	r2,r2,-16280
    4d9c:	11000017 	ldw	r4,0(r2)
    4da0:	01400034 	movhi	r5,0
    4da4:	29534804 	addi	r5,r5,19744
    4da8:	0005b001 	jmpi	5b00 <_fwalk_reent>

00004dac <__fp_unlock>:
    4dac:	0005883a 	mov	r2,zero
    4db0:	f800283a 	ret

00004db4 <_cleanup_r>:
    4db4:	01400074 	movhi	r5,1
    4db8:	2966c604 	addi	r5,r5,-25832
    4dbc:	0005b001 	jmpi	5b00 <_fwalk_reent>

00004dc0 <__sinit.part.1>:
    4dc0:	defff704 	addi	sp,sp,-36
    4dc4:	00c00034 	movhi	r3,0
    4dc8:	dfc00815 	stw	ra,32(sp)
    4dcc:	ddc00715 	stw	r23,28(sp)
    4dd0:	dd800615 	stw	r22,24(sp)
    4dd4:	dd400515 	stw	r21,20(sp)
    4dd8:	dd000415 	stw	r20,16(sp)
    4ddc:	dcc00315 	stw	r19,12(sp)
    4de0:	dc800215 	stw	r18,8(sp)
    4de4:	dc400115 	stw	r17,4(sp)
    4de8:	dc000015 	stw	r16,0(sp)
    4dec:	18d36d04 	addi	r3,r3,19892
    4df0:	24000117 	ldw	r16,4(r4)
    4df4:	20c00f15 	stw	r3,60(r4)
    4df8:	2080bb04 	addi	r2,r4,748
    4dfc:	00c000c4 	movi	r3,3
    4e00:	20c0b915 	stw	r3,740(r4)
    4e04:	2080ba15 	stw	r2,744(r4)
    4e08:	2000b815 	stw	zero,736(r4)
    4e0c:	05c00204 	movi	r23,8
    4e10:	00800104 	movi	r2,4
    4e14:	2025883a 	mov	r18,r4
    4e18:	b80d883a 	mov	r6,r23
    4e1c:	81001704 	addi	r4,r16,92
    4e20:	000b883a 	mov	r5,zero
    4e24:	80000015 	stw	zero,0(r16)
    4e28:	80000115 	stw	zero,4(r16)
    4e2c:	80000215 	stw	zero,8(r16)
    4e30:	8080030d 	sth	r2,12(r16)
    4e34:	80001915 	stw	zero,100(r16)
    4e38:	8000038d 	sth	zero,14(r16)
    4e3c:	80000415 	stw	zero,16(r16)
    4e40:	80000515 	stw	zero,20(r16)
    4e44:	80000615 	stw	zero,24(r16)
    4e48:	00069f00 	call	69f0 <memset>
    4e4c:	05800074 	movhi	r22,1
    4e50:	94400217 	ldw	r17,8(r18)
    4e54:	05400074 	movhi	r21,1
    4e58:	05000074 	movhi	r20,1
    4e5c:	04c00074 	movhi	r19,1
    4e60:	b5a05004 	addi	r22,r22,-32448
    4e64:	ad606704 	addi	r21,r21,-32356
    4e68:	a5208604 	addi	r20,r20,-32232
    4e6c:	9ce09d04 	addi	r19,r19,-32140
    4e70:	85800815 	stw	r22,32(r16)
    4e74:	85400915 	stw	r21,36(r16)
    4e78:	85000a15 	stw	r20,40(r16)
    4e7c:	84c00b15 	stw	r19,44(r16)
    4e80:	84000715 	stw	r16,28(r16)
    4e84:	00800284 	movi	r2,10
    4e88:	8880030d 	sth	r2,12(r17)
    4e8c:	00800044 	movi	r2,1
    4e90:	b80d883a 	mov	r6,r23
    4e94:	89001704 	addi	r4,r17,92
    4e98:	000b883a 	mov	r5,zero
    4e9c:	88000015 	stw	zero,0(r17)
    4ea0:	88000115 	stw	zero,4(r17)
    4ea4:	88000215 	stw	zero,8(r17)
    4ea8:	88001915 	stw	zero,100(r17)
    4eac:	8880038d 	sth	r2,14(r17)
    4eb0:	88000415 	stw	zero,16(r17)
    4eb4:	88000515 	stw	zero,20(r17)
    4eb8:	88000615 	stw	zero,24(r17)
    4ebc:	00069f00 	call	69f0 <memset>
    4ec0:	94000317 	ldw	r16,12(r18)
    4ec4:	00800484 	movi	r2,18
    4ec8:	8c400715 	stw	r17,28(r17)
    4ecc:	8d800815 	stw	r22,32(r17)
    4ed0:	8d400915 	stw	r21,36(r17)
    4ed4:	8d000a15 	stw	r20,40(r17)
    4ed8:	8cc00b15 	stw	r19,44(r17)
    4edc:	8080030d 	sth	r2,12(r16)
    4ee0:	00800084 	movi	r2,2
    4ee4:	80000015 	stw	zero,0(r16)
    4ee8:	80000115 	stw	zero,4(r16)
    4eec:	80000215 	stw	zero,8(r16)
    4ef0:	80001915 	stw	zero,100(r16)
    4ef4:	8080038d 	sth	r2,14(r16)
    4ef8:	80000415 	stw	zero,16(r16)
    4efc:	80000515 	stw	zero,20(r16)
    4f00:	80000615 	stw	zero,24(r16)
    4f04:	b80d883a 	mov	r6,r23
    4f08:	000b883a 	mov	r5,zero
    4f0c:	81001704 	addi	r4,r16,92
    4f10:	00069f00 	call	69f0 <memset>
    4f14:	00800044 	movi	r2,1
    4f18:	84000715 	stw	r16,28(r16)
    4f1c:	85800815 	stw	r22,32(r16)
    4f20:	85400915 	stw	r21,36(r16)
    4f24:	85000a15 	stw	r20,40(r16)
    4f28:	84c00b15 	stw	r19,44(r16)
    4f2c:	90800e15 	stw	r2,56(r18)
    4f30:	dfc00817 	ldw	ra,32(sp)
    4f34:	ddc00717 	ldw	r23,28(sp)
    4f38:	dd800617 	ldw	r22,24(sp)
    4f3c:	dd400517 	ldw	r21,20(sp)
    4f40:	dd000417 	ldw	r20,16(sp)
    4f44:	dcc00317 	ldw	r19,12(sp)
    4f48:	dc800217 	ldw	r18,8(sp)
    4f4c:	dc400117 	ldw	r17,4(sp)
    4f50:	dc000017 	ldw	r16,0(sp)
    4f54:	dec00904 	addi	sp,sp,36
    4f58:	f800283a 	ret

00004f5c <__fp_lock>:
    4f5c:	0005883a 	mov	r2,zero
    4f60:	f800283a 	ret

00004f64 <__sfmoreglue>:
    4f64:	defffc04 	addi	sp,sp,-16
    4f68:	dc400115 	stw	r17,4(sp)
    4f6c:	2c7fffc4 	addi	r17,r5,-1
    4f70:	8c401a24 	muli	r17,r17,104
    4f74:	dc800215 	stw	r18,8(sp)
    4f78:	2825883a 	mov	r18,r5
    4f7c:	89401d04 	addi	r5,r17,116
    4f80:	dc000015 	stw	r16,0(sp)
    4f84:	dfc00315 	stw	ra,12(sp)
    4f88:	0005e5c0 	call	5e5c <_malloc_r>
    4f8c:	1021883a 	mov	r16,r2
    4f90:	10000726 	beq	r2,zero,4fb0 <__sfmoreglue+0x4c>
    4f94:	11000304 	addi	r4,r2,12
    4f98:	10000015 	stw	zero,0(r2)
    4f9c:	14800115 	stw	r18,4(r2)
    4fa0:	11000215 	stw	r4,8(r2)
    4fa4:	89801a04 	addi	r6,r17,104
    4fa8:	000b883a 	mov	r5,zero
    4fac:	00069f00 	call	69f0 <memset>
    4fb0:	8005883a 	mov	r2,r16
    4fb4:	dfc00317 	ldw	ra,12(sp)
    4fb8:	dc800217 	ldw	r18,8(sp)
    4fbc:	dc400117 	ldw	r17,4(sp)
    4fc0:	dc000017 	ldw	r16,0(sp)
    4fc4:	dec00404 	addi	sp,sp,16
    4fc8:	f800283a 	ret

00004fcc <__sfp>:
    4fcc:	defffb04 	addi	sp,sp,-20
    4fd0:	dc000015 	stw	r16,0(sp)
    4fd4:	040000b4 	movhi	r16,2
    4fd8:	84301a04 	addi	r16,r16,-16280
    4fdc:	dcc00315 	stw	r19,12(sp)
    4fe0:	2027883a 	mov	r19,r4
    4fe4:	81000017 	ldw	r4,0(r16)
    4fe8:	dfc00415 	stw	ra,16(sp)
    4fec:	dc800215 	stw	r18,8(sp)
    4ff0:	20800e17 	ldw	r2,56(r4)
    4ff4:	dc400115 	stw	r17,4(sp)
    4ff8:	1000021e 	bne	r2,zero,5004 <__sfp+0x38>
    4ffc:	0004dc00 	call	4dc0 <__sinit.part.1>
    5000:	81000017 	ldw	r4,0(r16)
    5004:	2480b804 	addi	r18,r4,736
    5008:	047fffc4 	movi	r17,-1
    500c:	91000117 	ldw	r4,4(r18)
    5010:	94000217 	ldw	r16,8(r18)
    5014:	213fffc4 	addi	r4,r4,-1
    5018:	20000a16 	blt	r4,zero,5044 <__sfp+0x78>
    501c:	8080030f 	ldh	r2,12(r16)
    5020:	10000c26 	beq	r2,zero,5054 <__sfp+0x88>
    5024:	80c01d04 	addi	r3,r16,116
    5028:	00000206 	br	5034 <__sfp+0x68>
    502c:	18bfe60f 	ldh	r2,-104(r3)
    5030:	10000826 	beq	r2,zero,5054 <__sfp+0x88>
    5034:	213fffc4 	addi	r4,r4,-1
    5038:	1c3ffd04 	addi	r16,r3,-12
    503c:	18c01a04 	addi	r3,r3,104
    5040:	247ffa1e 	bne	r4,r17,502c <__sfp+0x60>
    5044:	90800017 	ldw	r2,0(r18)
    5048:	10001d26 	beq	r2,zero,50c0 <__sfp+0xf4>
    504c:	1025883a 	mov	r18,r2
    5050:	003fee06 	br	500c <__sfp+0x40>
    5054:	00bfffc4 	movi	r2,-1
    5058:	8080038d 	sth	r2,14(r16)
    505c:	00800044 	movi	r2,1
    5060:	8080030d 	sth	r2,12(r16)
    5064:	80001915 	stw	zero,100(r16)
    5068:	80000015 	stw	zero,0(r16)
    506c:	80000215 	stw	zero,8(r16)
    5070:	80000115 	stw	zero,4(r16)
    5074:	80000415 	stw	zero,16(r16)
    5078:	80000515 	stw	zero,20(r16)
    507c:	80000615 	stw	zero,24(r16)
    5080:	01800204 	movi	r6,8
    5084:	000b883a 	mov	r5,zero
    5088:	81001704 	addi	r4,r16,92
    508c:	00069f00 	call	69f0 <memset>
    5090:	8005883a 	mov	r2,r16
    5094:	80000c15 	stw	zero,48(r16)
    5098:	80000d15 	stw	zero,52(r16)
    509c:	80001115 	stw	zero,68(r16)
    50a0:	80001215 	stw	zero,72(r16)
    50a4:	dfc00417 	ldw	ra,16(sp)
    50a8:	dcc00317 	ldw	r19,12(sp)
    50ac:	dc800217 	ldw	r18,8(sp)
    50b0:	dc400117 	ldw	r17,4(sp)
    50b4:	dc000017 	ldw	r16,0(sp)
    50b8:	dec00504 	addi	sp,sp,20
    50bc:	f800283a 	ret
    50c0:	01400104 	movi	r5,4
    50c4:	9809883a 	mov	r4,r19
    50c8:	0004f640 	call	4f64 <__sfmoreglue>
    50cc:	90800015 	stw	r2,0(r18)
    50d0:	103fde1e 	bne	r2,zero,504c <__sfp+0x80>
    50d4:	00800304 	movi	r2,12
    50d8:	98800015 	stw	r2,0(r19)
    50dc:	0005883a 	mov	r2,zero
    50e0:	003ff006 	br	50a4 <__sfp+0xd8>

000050e4 <_cleanup>:
    50e4:	008000b4 	movhi	r2,2
    50e8:	10b01a04 	addi	r2,r2,-16280
    50ec:	11000017 	ldw	r4,0(r2)
    50f0:	01400074 	movhi	r5,1
    50f4:	2966c604 	addi	r5,r5,-25832
    50f8:	0005b001 	jmpi	5b00 <_fwalk_reent>

000050fc <__sinit>:
    50fc:	20800e17 	ldw	r2,56(r4)
    5100:	10000126 	beq	r2,zero,5108 <__sinit+0xc>
    5104:	f800283a 	ret
    5108:	0004dc01 	jmpi	4dc0 <__sinit.part.1>

0000510c <__sfp_lock_acquire>:
    510c:	f800283a 	ret

00005110 <__sfp_lock_release>:
    5110:	f800283a 	ret

00005114 <__sinit_lock_acquire>:
    5114:	f800283a 	ret

00005118 <__sinit_lock_release>:
    5118:	f800283a 	ret

0000511c <__fp_lock_all>:
    511c:	008000b4 	movhi	r2,2
    5120:	10b01b04 	addi	r2,r2,-16276
    5124:	11000017 	ldw	r4,0(r2)
    5128:	01400034 	movhi	r5,0
    512c:	2953d704 	addi	r5,r5,20316
    5130:	0005a3c1 	jmpi	5a3c <_fwalk>

00005134 <__fp_unlock_all>:
    5134:	008000b4 	movhi	r2,2
    5138:	10b01b04 	addi	r2,r2,-16276
    513c:	11000017 	ldw	r4,0(r2)
    5140:	01400034 	movhi	r5,0
    5144:	29536b04 	addi	r5,r5,19884
    5148:	0005a3c1 	jmpi	5a3c <_fwalk>

0000514c <_malloc_trim_r>:
    514c:	defffb04 	addi	sp,sp,-20
    5150:	dcc00315 	stw	r19,12(sp)
    5154:	04c000b4 	movhi	r19,2
    5158:	dc800215 	stw	r18,8(sp)
    515c:	dc400115 	stw	r17,4(sp)
    5160:	dc000015 	stw	r16,0(sp)
    5164:	dfc00415 	stw	ra,16(sp)
    5168:	2821883a 	mov	r16,r5
    516c:	9ce9ce04 	addi	r19,r19,-22728
    5170:	2025883a 	mov	r18,r4
    5174:	000e0000 	call	e000 <__malloc_lock>
    5178:	98800217 	ldw	r2,8(r19)
    517c:	14400117 	ldw	r17,4(r2)
    5180:	00bfff04 	movi	r2,-4
    5184:	88a2703a 	and	r17,r17,r2
    5188:	8c21c83a 	sub	r16,r17,r16
    518c:	8403fbc4 	addi	r16,r16,4079
    5190:	8020d33a 	srli	r16,r16,12
    5194:	0083ffc4 	movi	r2,4095
    5198:	843fffc4 	addi	r16,r16,-1
    519c:	8020933a 	slli	r16,r16,12
    51a0:	1400060e 	bge	r2,r16,51bc <_malloc_trim_r+0x70>
    51a4:	000b883a 	mov	r5,zero
    51a8:	9009883a 	mov	r4,r18
    51ac:	00080ec0 	call	80ec <_sbrk_r>
    51b0:	98c00217 	ldw	r3,8(r19)
    51b4:	1c47883a 	add	r3,r3,r17
    51b8:	10c00a26 	beq	r2,r3,51e4 <_malloc_trim_r+0x98>
    51bc:	9009883a 	mov	r4,r18
    51c0:	000e1200 	call	e120 <__malloc_unlock>
    51c4:	0005883a 	mov	r2,zero
    51c8:	dfc00417 	ldw	ra,16(sp)
    51cc:	dcc00317 	ldw	r19,12(sp)
    51d0:	dc800217 	ldw	r18,8(sp)
    51d4:	dc400117 	ldw	r17,4(sp)
    51d8:	dc000017 	ldw	r16,0(sp)
    51dc:	dec00504 	addi	sp,sp,20
    51e0:	f800283a 	ret
    51e4:	040bc83a 	sub	r5,zero,r16
    51e8:	9009883a 	mov	r4,r18
    51ec:	00080ec0 	call	80ec <_sbrk_r>
    51f0:	00ffffc4 	movi	r3,-1
    51f4:	10c00d26 	beq	r2,r3,522c <_malloc_trim_r+0xe0>
    51f8:	00c000b4 	movhi	r3,2
    51fc:	18f82104 	addi	r3,r3,-8060
    5200:	18800017 	ldw	r2,0(r3)
    5204:	99000217 	ldw	r4,8(r19)
    5208:	8c23c83a 	sub	r17,r17,r16
    520c:	8c400054 	ori	r17,r17,1
    5210:	1421c83a 	sub	r16,r2,r16
    5214:	24400115 	stw	r17,4(r4)
    5218:	9009883a 	mov	r4,r18
    521c:	1c000015 	stw	r16,0(r3)
    5220:	000e1200 	call	e120 <__malloc_unlock>
    5224:	00800044 	movi	r2,1
    5228:	003fe706 	br	51c8 <_malloc_trim_r+0x7c>
    522c:	000b883a 	mov	r5,zero
    5230:	9009883a 	mov	r4,r18
    5234:	00080ec0 	call	80ec <_sbrk_r>
    5238:	99000217 	ldw	r4,8(r19)
    523c:	014003c4 	movi	r5,15
    5240:	1107c83a 	sub	r3,r2,r4
    5244:	28ffdd0e 	bge	r5,r3,51bc <_malloc_trim_r+0x70>
    5248:	014000b4 	movhi	r5,2
    524c:	29701d04 	addi	r5,r5,-16268
    5250:	29400017 	ldw	r5,0(r5)
    5254:	18c00054 	ori	r3,r3,1
    5258:	20c00115 	stw	r3,4(r4)
    525c:	00c000b4 	movhi	r3,2
    5260:	1145c83a 	sub	r2,r2,r5
    5264:	18f82104 	addi	r3,r3,-8060
    5268:	18800015 	stw	r2,0(r3)
    526c:	003fd306 	br	51bc <_malloc_trim_r+0x70>

00005270 <_free_r>:
    5270:	28004126 	beq	r5,zero,5378 <_free_r+0x108>
    5274:	defffd04 	addi	sp,sp,-12
    5278:	dc400115 	stw	r17,4(sp)
    527c:	dc000015 	stw	r16,0(sp)
    5280:	2023883a 	mov	r17,r4
    5284:	2821883a 	mov	r16,r5
    5288:	dfc00215 	stw	ra,8(sp)
    528c:	000e0000 	call	e000 <__malloc_lock>
    5290:	81ffff17 	ldw	r7,-4(r16)
    5294:	00bfff84 	movi	r2,-2
    5298:	010000b4 	movhi	r4,2
    529c:	81bffe04 	addi	r6,r16,-8
    52a0:	3884703a 	and	r2,r7,r2
    52a4:	2129ce04 	addi	r4,r4,-22728
    52a8:	308b883a 	add	r5,r6,r2
    52ac:	2a400117 	ldw	r9,4(r5)
    52b0:	22000217 	ldw	r8,8(r4)
    52b4:	00ffff04 	movi	r3,-4
    52b8:	48c6703a 	and	r3,r9,r3
    52bc:	2a005726 	beq	r5,r8,541c <_free_r+0x1ac>
    52c0:	28c00115 	stw	r3,4(r5)
    52c4:	39c0004c 	andi	r7,r7,1
    52c8:	3800091e 	bne	r7,zero,52f0 <_free_r+0x80>
    52cc:	823ffe17 	ldw	r8,-8(r16)
    52d0:	22400204 	addi	r9,r4,8
    52d4:	320dc83a 	sub	r6,r6,r8
    52d8:	31c00217 	ldw	r7,8(r6)
    52dc:	1205883a 	add	r2,r2,r8
    52e0:	3a406526 	beq	r7,r9,5478 <_free_r+0x208>
    52e4:	32000317 	ldw	r8,12(r6)
    52e8:	3a000315 	stw	r8,12(r7)
    52ec:	41c00215 	stw	r7,8(r8)
    52f0:	28cf883a 	add	r7,r5,r3
    52f4:	39c00117 	ldw	r7,4(r7)
    52f8:	39c0004c 	andi	r7,r7,1
    52fc:	38003a26 	beq	r7,zero,53e8 <_free_r+0x178>
    5300:	10c00054 	ori	r3,r2,1
    5304:	30c00115 	stw	r3,4(r6)
    5308:	3087883a 	add	r3,r6,r2
    530c:	18800015 	stw	r2,0(r3)
    5310:	00c07fc4 	movi	r3,511
    5314:	18801936 	bltu	r3,r2,537c <_free_r+0x10c>
    5318:	1004d0fa 	srli	r2,r2,3
    531c:	01c00044 	movi	r7,1
    5320:	21400117 	ldw	r5,4(r4)
    5324:	10c00044 	addi	r3,r2,1
    5328:	18c7883a 	add	r3,r3,r3
    532c:	1005d0ba 	srai	r2,r2,2
    5330:	18c7883a 	add	r3,r3,r3
    5334:	18c7883a 	add	r3,r3,r3
    5338:	1907883a 	add	r3,r3,r4
    533c:	3884983a 	sll	r2,r7,r2
    5340:	19c00017 	ldw	r7,0(r3)
    5344:	1a3ffe04 	addi	r8,r3,-8
    5348:	1144b03a 	or	r2,r2,r5
    534c:	32000315 	stw	r8,12(r6)
    5350:	31c00215 	stw	r7,8(r6)
    5354:	20800115 	stw	r2,4(r4)
    5358:	19800015 	stw	r6,0(r3)
    535c:	39800315 	stw	r6,12(r7)
    5360:	8809883a 	mov	r4,r17
    5364:	dfc00217 	ldw	ra,8(sp)
    5368:	dc400117 	ldw	r17,4(sp)
    536c:	dc000017 	ldw	r16,0(sp)
    5370:	dec00304 	addi	sp,sp,12
    5374:	000e1201 	jmpi	e120 <__malloc_unlock>
    5378:	f800283a 	ret
    537c:	100ad27a 	srli	r5,r2,9
    5380:	00c00104 	movi	r3,4
    5384:	19404a36 	bltu	r3,r5,54b0 <_free_r+0x240>
    5388:	100ad1ba 	srli	r5,r2,6
    538c:	28c00e44 	addi	r3,r5,57
    5390:	18c7883a 	add	r3,r3,r3
    5394:	29400e04 	addi	r5,r5,56
    5398:	18c7883a 	add	r3,r3,r3
    539c:	18c7883a 	add	r3,r3,r3
    53a0:	1909883a 	add	r4,r3,r4
    53a4:	20c00017 	ldw	r3,0(r4)
    53a8:	01c000b4 	movhi	r7,2
    53ac:	213ffe04 	addi	r4,r4,-8
    53b0:	39e9ce04 	addi	r7,r7,-22728
    53b4:	20c04426 	beq	r4,r3,54c8 <_free_r+0x258>
    53b8:	01ffff04 	movi	r7,-4
    53bc:	19400117 	ldw	r5,4(r3)
    53c0:	29ca703a 	and	r5,r5,r7
    53c4:	1140022e 	bgeu	r2,r5,53d0 <_free_r+0x160>
    53c8:	18c00217 	ldw	r3,8(r3)
    53cc:	20fffb1e 	bne	r4,r3,53bc <_free_r+0x14c>
    53d0:	19000317 	ldw	r4,12(r3)
    53d4:	31000315 	stw	r4,12(r6)
    53d8:	30c00215 	stw	r3,8(r6)
    53dc:	21800215 	stw	r6,8(r4)
    53e0:	19800315 	stw	r6,12(r3)
    53e4:	003fde06 	br	5360 <_free_r+0xf0>
    53e8:	29c00217 	ldw	r7,8(r5)
    53ec:	10c5883a 	add	r2,r2,r3
    53f0:	00c000b4 	movhi	r3,2
    53f4:	18e9d004 	addi	r3,r3,-22720
    53f8:	38c03b26 	beq	r7,r3,54e8 <_free_r+0x278>
    53fc:	2a000317 	ldw	r8,12(r5)
    5400:	11400054 	ori	r5,r2,1
    5404:	3087883a 	add	r3,r6,r2
    5408:	3a000315 	stw	r8,12(r7)
    540c:	41c00215 	stw	r7,8(r8)
    5410:	31400115 	stw	r5,4(r6)
    5414:	18800015 	stw	r2,0(r3)
    5418:	003fbd06 	br	5310 <_free_r+0xa0>
    541c:	39c0004c 	andi	r7,r7,1
    5420:	10c5883a 	add	r2,r2,r3
    5424:	3800071e 	bne	r7,zero,5444 <_free_r+0x1d4>
    5428:	81fffe17 	ldw	r7,-8(r16)
    542c:	31cdc83a 	sub	r6,r6,r7
    5430:	30c00317 	ldw	r3,12(r6)
    5434:	31400217 	ldw	r5,8(r6)
    5438:	11c5883a 	add	r2,r2,r7
    543c:	28c00315 	stw	r3,12(r5)
    5440:	19400215 	stw	r5,8(r3)
    5444:	10c00054 	ori	r3,r2,1
    5448:	30c00115 	stw	r3,4(r6)
    544c:	00c000b4 	movhi	r3,2
    5450:	18f01e04 	addi	r3,r3,-16264
    5454:	18c00017 	ldw	r3,0(r3)
    5458:	21800215 	stw	r6,8(r4)
    545c:	10ffc036 	bltu	r2,r3,5360 <_free_r+0xf0>
    5460:	008000b4 	movhi	r2,2
    5464:	10b7ff04 	addi	r2,r2,-8196
    5468:	11400017 	ldw	r5,0(r2)
    546c:	8809883a 	mov	r4,r17
    5470:	000514c0 	call	514c <_malloc_trim_r>
    5474:	003fba06 	br	5360 <_free_r+0xf0>
    5478:	28c9883a 	add	r4,r5,r3
    547c:	21000117 	ldw	r4,4(r4)
    5480:	2100004c 	andi	r4,r4,1
    5484:	2000391e 	bne	r4,zero,556c <_free_r+0x2fc>
    5488:	29c00217 	ldw	r7,8(r5)
    548c:	29000317 	ldw	r4,12(r5)
    5490:	1885883a 	add	r2,r3,r2
    5494:	10c00054 	ori	r3,r2,1
    5498:	39000315 	stw	r4,12(r7)
    549c:	21c00215 	stw	r7,8(r4)
    54a0:	30c00115 	stw	r3,4(r6)
    54a4:	308d883a 	add	r6,r6,r2
    54a8:	30800015 	stw	r2,0(r6)
    54ac:	003fac06 	br	5360 <_free_r+0xf0>
    54b0:	00c00504 	movi	r3,20
    54b4:	19401536 	bltu	r3,r5,550c <_free_r+0x29c>
    54b8:	28c01704 	addi	r3,r5,92
    54bc:	18c7883a 	add	r3,r3,r3
    54c0:	294016c4 	addi	r5,r5,91
    54c4:	003fb406 	br	5398 <_free_r+0x128>
    54c8:	280bd0ba 	srai	r5,r5,2
    54cc:	00c00044 	movi	r3,1
    54d0:	38800117 	ldw	r2,4(r7)
    54d4:	194a983a 	sll	r5,r3,r5
    54d8:	2007883a 	mov	r3,r4
    54dc:	2884b03a 	or	r2,r5,r2
    54e0:	38800115 	stw	r2,4(r7)
    54e4:	003fbb06 	br	53d4 <_free_r+0x164>
    54e8:	21800515 	stw	r6,20(r4)
    54ec:	21800415 	stw	r6,16(r4)
    54f0:	10c00054 	ori	r3,r2,1
    54f4:	31c00315 	stw	r7,12(r6)
    54f8:	31c00215 	stw	r7,8(r6)
    54fc:	30c00115 	stw	r3,4(r6)
    5500:	308d883a 	add	r6,r6,r2
    5504:	30800015 	stw	r2,0(r6)
    5508:	003f9506 	br	5360 <_free_r+0xf0>
    550c:	00c01504 	movi	r3,84
    5510:	19400536 	bltu	r3,r5,5528 <_free_r+0x2b8>
    5514:	100ad33a 	srli	r5,r2,12
    5518:	28c01bc4 	addi	r3,r5,111
    551c:	18c7883a 	add	r3,r3,r3
    5520:	29401b84 	addi	r5,r5,110
    5524:	003f9c06 	br	5398 <_free_r+0x128>
    5528:	00c05504 	movi	r3,340
    552c:	19400536 	bltu	r3,r5,5544 <_free_r+0x2d4>
    5530:	100ad3fa 	srli	r5,r2,15
    5534:	28c01e04 	addi	r3,r5,120
    5538:	18c7883a 	add	r3,r3,r3
    553c:	29401dc4 	addi	r5,r5,119
    5540:	003f9506 	br	5398 <_free_r+0x128>
    5544:	00c15504 	movi	r3,1364
    5548:	19400536 	bltu	r3,r5,5560 <_free_r+0x2f0>
    554c:	100ad4ba 	srli	r5,r2,18
    5550:	28c01f44 	addi	r3,r5,125
    5554:	18c7883a 	add	r3,r3,r3
    5558:	29401f04 	addi	r5,r5,124
    555c:	003f8e06 	br	5398 <_free_r+0x128>
    5560:	00c03f84 	movi	r3,254
    5564:	01401f84 	movi	r5,126
    5568:	003f8b06 	br	5398 <_free_r+0x128>
    556c:	10c00054 	ori	r3,r2,1
    5570:	30c00115 	stw	r3,4(r6)
    5574:	308d883a 	add	r6,r6,r2
    5578:	30800015 	stw	r2,0(r6)
    557c:	003f7806 	br	5360 <_free_r+0xf0>

00005580 <__sfvwrite_r>:
    5580:	30800217 	ldw	r2,8(r6)
    5584:	10006726 	beq	r2,zero,5724 <__sfvwrite_r+0x1a4>
    5588:	28c0030b 	ldhu	r3,12(r5)
    558c:	defff404 	addi	sp,sp,-48
    5590:	dd400715 	stw	r21,28(sp)
    5594:	dd000615 	stw	r20,24(sp)
    5598:	dc000215 	stw	r16,8(sp)
    559c:	dfc00b15 	stw	ra,44(sp)
    55a0:	df000a15 	stw	fp,40(sp)
    55a4:	ddc00915 	stw	r23,36(sp)
    55a8:	dd800815 	stw	r22,32(sp)
    55ac:	dcc00515 	stw	r19,20(sp)
    55b0:	dc800415 	stw	r18,16(sp)
    55b4:	dc400315 	stw	r17,12(sp)
    55b8:	1880020c 	andi	r2,r3,8
    55bc:	2821883a 	mov	r16,r5
    55c0:	202b883a 	mov	r21,r4
    55c4:	3029883a 	mov	r20,r6
    55c8:	10002726 	beq	r2,zero,5668 <__sfvwrite_r+0xe8>
    55cc:	28800417 	ldw	r2,16(r5)
    55d0:	10002526 	beq	r2,zero,5668 <__sfvwrite_r+0xe8>
    55d4:	1880008c 	andi	r2,r3,2
    55d8:	a4400017 	ldw	r17,0(r20)
    55dc:	10002a26 	beq	r2,zero,5688 <__sfvwrite_r+0x108>
    55e0:	05a00034 	movhi	r22,32768
    55e4:	0027883a 	mov	r19,zero
    55e8:	0025883a 	mov	r18,zero
    55ec:	b5bf0004 	addi	r22,r22,-1024
    55f0:	980d883a 	mov	r6,r19
    55f4:	a809883a 	mov	r4,r21
    55f8:	90004626 	beq	r18,zero,5714 <__sfvwrite_r+0x194>
    55fc:	900f883a 	mov	r7,r18
    5600:	b480022e 	bgeu	r22,r18,560c <__sfvwrite_r+0x8c>
    5604:	01e00034 	movhi	r7,32768
    5608:	39ff0004 	addi	r7,r7,-1024
    560c:	80800917 	ldw	r2,36(r16)
    5610:	81400717 	ldw	r5,28(r16)
    5614:	103ee83a 	callr	r2
    5618:	0080570e 	bge	zero,r2,5778 <__sfvwrite_r+0x1f8>
    561c:	a0c00217 	ldw	r3,8(r20)
    5620:	98a7883a 	add	r19,r19,r2
    5624:	90a5c83a 	sub	r18,r18,r2
    5628:	1885c83a 	sub	r2,r3,r2
    562c:	a0800215 	stw	r2,8(r20)
    5630:	103fef1e 	bne	r2,zero,55f0 <__sfvwrite_r+0x70>
    5634:	0005883a 	mov	r2,zero
    5638:	dfc00b17 	ldw	ra,44(sp)
    563c:	df000a17 	ldw	fp,40(sp)
    5640:	ddc00917 	ldw	r23,36(sp)
    5644:	dd800817 	ldw	r22,32(sp)
    5648:	dd400717 	ldw	r21,28(sp)
    564c:	dd000617 	ldw	r20,24(sp)
    5650:	dcc00517 	ldw	r19,20(sp)
    5654:	dc800417 	ldw	r18,16(sp)
    5658:	dc400317 	ldw	r17,12(sp)
    565c:	dc000217 	ldw	r16,8(sp)
    5660:	dec00c04 	addi	sp,sp,48
    5664:	f800283a 	ret
    5668:	800b883a 	mov	r5,r16
    566c:	a809883a 	mov	r4,r21
    5670:	00031280 	call	3128 <__swsetup_r>
    5674:	1000eb1e 	bne	r2,zero,5a24 <__sfvwrite_r+0x4a4>
    5678:	80c0030b 	ldhu	r3,12(r16)
    567c:	a4400017 	ldw	r17,0(r20)
    5680:	1880008c 	andi	r2,r3,2
    5684:	103fd61e 	bne	r2,zero,55e0 <__sfvwrite_r+0x60>
    5688:	1880004c 	andi	r2,r3,1
    568c:	10003f1e 	bne	r2,zero,578c <__sfvwrite_r+0x20c>
    5690:	0039883a 	mov	fp,zero
    5694:	0025883a 	mov	r18,zero
    5698:	90001a26 	beq	r18,zero,5704 <__sfvwrite_r+0x184>
    569c:	1880800c 	andi	r2,r3,512
    56a0:	84c00217 	ldw	r19,8(r16)
    56a4:	10002126 	beq	r2,zero,572c <__sfvwrite_r+0x1ac>
    56a8:	982f883a 	mov	r23,r19
    56ac:	94c09336 	bltu	r18,r19,58fc <__sfvwrite_r+0x37c>
    56b0:	1881200c 	andi	r2,r3,1152
    56b4:	10009e1e 	bne	r2,zero,5930 <__sfvwrite_r+0x3b0>
    56b8:	81000017 	ldw	r4,0(r16)
    56bc:	b80d883a 	mov	r6,r23
    56c0:	e00b883a 	mov	r5,fp
    56c4:	00068940 	call	6894 <memmove>
    56c8:	80c00217 	ldw	r3,8(r16)
    56cc:	81000017 	ldw	r4,0(r16)
    56d0:	9005883a 	mov	r2,r18
    56d4:	1ce7c83a 	sub	r19,r3,r19
    56d8:	25cf883a 	add	r7,r4,r23
    56dc:	84c00215 	stw	r19,8(r16)
    56e0:	81c00015 	stw	r7,0(r16)
    56e4:	a0c00217 	ldw	r3,8(r20)
    56e8:	e0b9883a 	add	fp,fp,r2
    56ec:	90a5c83a 	sub	r18,r18,r2
    56f0:	18a7c83a 	sub	r19,r3,r2
    56f4:	a4c00215 	stw	r19,8(r20)
    56f8:	983fce26 	beq	r19,zero,5634 <__sfvwrite_r+0xb4>
    56fc:	80c0030b 	ldhu	r3,12(r16)
    5700:	903fe61e 	bne	r18,zero,569c <__sfvwrite_r+0x11c>
    5704:	8f000017 	ldw	fp,0(r17)
    5708:	8c800117 	ldw	r18,4(r17)
    570c:	8c400204 	addi	r17,r17,8
    5710:	003fe106 	br	5698 <__sfvwrite_r+0x118>
    5714:	8cc00017 	ldw	r19,0(r17)
    5718:	8c800117 	ldw	r18,4(r17)
    571c:	8c400204 	addi	r17,r17,8
    5720:	003fb306 	br	55f0 <__sfvwrite_r+0x70>
    5724:	0005883a 	mov	r2,zero
    5728:	f800283a 	ret
    572c:	81000017 	ldw	r4,0(r16)
    5730:	80800417 	ldw	r2,16(r16)
    5734:	11005736 	bltu	r2,r4,5894 <__sfvwrite_r+0x314>
    5738:	85c00517 	ldw	r23,20(r16)
    573c:	95c05536 	bltu	r18,r23,5894 <__sfvwrite_r+0x314>
    5740:	00a00034 	movhi	r2,32768
    5744:	10bfffc4 	addi	r2,r2,-1
    5748:	9009883a 	mov	r4,r18
    574c:	1480012e 	bgeu	r2,r18,5754 <__sfvwrite_r+0x1d4>
    5750:	1009883a 	mov	r4,r2
    5754:	b80b883a 	mov	r5,r23
    5758:	000ad840 	call	ad84 <__divsi3>
    575c:	15cf383a 	mul	r7,r2,r23
    5760:	81400717 	ldw	r5,28(r16)
    5764:	80800917 	ldw	r2,36(r16)
    5768:	e00d883a 	mov	r6,fp
    576c:	a809883a 	mov	r4,r21
    5770:	103ee83a 	callr	r2
    5774:	00bfdb16 	blt	zero,r2,56e4 <__sfvwrite_r+0x164>
    5778:	8080030b 	ldhu	r2,12(r16)
    577c:	10801014 	ori	r2,r2,64
    5780:	8080030d 	sth	r2,12(r16)
    5784:	00bfffc4 	movi	r2,-1
    5788:	003fab06 	br	5638 <__sfvwrite_r+0xb8>
    578c:	0027883a 	mov	r19,zero
    5790:	0011883a 	mov	r8,zero
    5794:	0039883a 	mov	fp,zero
    5798:	0025883a 	mov	r18,zero
    579c:	90001f26 	beq	r18,zero,581c <__sfvwrite_r+0x29c>
    57a0:	40005a26 	beq	r8,zero,590c <__sfvwrite_r+0x38c>
    57a4:	982d883a 	mov	r22,r19
    57a8:	94c0012e 	bgeu	r18,r19,57b0 <__sfvwrite_r+0x230>
    57ac:	902d883a 	mov	r22,r18
    57b0:	81000017 	ldw	r4,0(r16)
    57b4:	80800417 	ldw	r2,16(r16)
    57b8:	b02f883a 	mov	r23,r22
    57bc:	81c00517 	ldw	r7,20(r16)
    57c0:	1100032e 	bgeu	r2,r4,57d0 <__sfvwrite_r+0x250>
    57c4:	80c00217 	ldw	r3,8(r16)
    57c8:	38c7883a 	add	r3,r7,r3
    57cc:	1d801816 	blt	r3,r22,5830 <__sfvwrite_r+0x2b0>
    57d0:	b1c03e16 	blt	r22,r7,58cc <__sfvwrite_r+0x34c>
    57d4:	80800917 	ldw	r2,36(r16)
    57d8:	81400717 	ldw	r5,28(r16)
    57dc:	e00d883a 	mov	r6,fp
    57e0:	da000115 	stw	r8,4(sp)
    57e4:	a809883a 	mov	r4,r21
    57e8:	103ee83a 	callr	r2
    57ec:	102f883a 	mov	r23,r2
    57f0:	da000117 	ldw	r8,4(sp)
    57f4:	00bfe00e 	bge	zero,r2,5778 <__sfvwrite_r+0x1f8>
    57f8:	9de7c83a 	sub	r19,r19,r23
    57fc:	98001f26 	beq	r19,zero,587c <__sfvwrite_r+0x2fc>
    5800:	a0800217 	ldw	r2,8(r20)
    5804:	e5f9883a 	add	fp,fp,r23
    5808:	95e5c83a 	sub	r18,r18,r23
    580c:	15efc83a 	sub	r23,r2,r23
    5810:	a5c00215 	stw	r23,8(r20)
    5814:	b83f8726 	beq	r23,zero,5634 <__sfvwrite_r+0xb4>
    5818:	903fe11e 	bne	r18,zero,57a0 <__sfvwrite_r+0x220>
    581c:	8f000017 	ldw	fp,0(r17)
    5820:	8c800117 	ldw	r18,4(r17)
    5824:	0011883a 	mov	r8,zero
    5828:	8c400204 	addi	r17,r17,8
    582c:	003fdb06 	br	579c <__sfvwrite_r+0x21c>
    5830:	180d883a 	mov	r6,r3
    5834:	e00b883a 	mov	r5,fp
    5838:	da000115 	stw	r8,4(sp)
    583c:	d8c00015 	stw	r3,0(sp)
    5840:	00068940 	call	6894 <memmove>
    5844:	d8c00017 	ldw	r3,0(sp)
    5848:	80800017 	ldw	r2,0(r16)
    584c:	800b883a 	mov	r5,r16
    5850:	a809883a 	mov	r4,r21
    5854:	10c5883a 	add	r2,r2,r3
    5858:	80800015 	stw	r2,0(r16)
    585c:	d8c00015 	stw	r3,0(sp)
    5860:	0004d200 	call	4d20 <_fflush_r>
    5864:	d8c00017 	ldw	r3,0(sp)
    5868:	da000117 	ldw	r8,4(sp)
    586c:	103fc21e 	bne	r2,zero,5778 <__sfvwrite_r+0x1f8>
    5870:	182f883a 	mov	r23,r3
    5874:	9de7c83a 	sub	r19,r19,r23
    5878:	983fe11e 	bne	r19,zero,5800 <__sfvwrite_r+0x280>
    587c:	800b883a 	mov	r5,r16
    5880:	a809883a 	mov	r4,r21
    5884:	0004d200 	call	4d20 <_fflush_r>
    5888:	103fbb1e 	bne	r2,zero,5778 <__sfvwrite_r+0x1f8>
    588c:	0011883a 	mov	r8,zero
    5890:	003fdb06 	br	5800 <__sfvwrite_r+0x280>
    5894:	94c0012e 	bgeu	r18,r19,589c <__sfvwrite_r+0x31c>
    5898:	9027883a 	mov	r19,r18
    589c:	980d883a 	mov	r6,r19
    58a0:	e00b883a 	mov	r5,fp
    58a4:	00068940 	call	6894 <memmove>
    58a8:	80800217 	ldw	r2,8(r16)
    58ac:	80c00017 	ldw	r3,0(r16)
    58b0:	14c5c83a 	sub	r2,r2,r19
    58b4:	1cc7883a 	add	r3,r3,r19
    58b8:	80800215 	stw	r2,8(r16)
    58bc:	80c00015 	stw	r3,0(r16)
    58c0:	10004326 	beq	r2,zero,59d0 <__sfvwrite_r+0x450>
    58c4:	9805883a 	mov	r2,r19
    58c8:	003f8606 	br	56e4 <__sfvwrite_r+0x164>
    58cc:	b00d883a 	mov	r6,r22
    58d0:	e00b883a 	mov	r5,fp
    58d4:	da000115 	stw	r8,4(sp)
    58d8:	00068940 	call	6894 <memmove>
    58dc:	80800217 	ldw	r2,8(r16)
    58e0:	80c00017 	ldw	r3,0(r16)
    58e4:	da000117 	ldw	r8,4(sp)
    58e8:	1585c83a 	sub	r2,r2,r22
    58ec:	1dad883a 	add	r22,r3,r22
    58f0:	80800215 	stw	r2,8(r16)
    58f4:	85800015 	stw	r22,0(r16)
    58f8:	003fbf06 	br	57f8 <__sfvwrite_r+0x278>
    58fc:	81000017 	ldw	r4,0(r16)
    5900:	9027883a 	mov	r19,r18
    5904:	902f883a 	mov	r23,r18
    5908:	003f6c06 	br	56bc <__sfvwrite_r+0x13c>
    590c:	900d883a 	mov	r6,r18
    5910:	01400284 	movi	r5,10
    5914:	e009883a 	mov	r4,fp
    5918:	00066680 	call	6668 <memchr>
    591c:	10003e26 	beq	r2,zero,5a18 <__sfvwrite_r+0x498>
    5920:	10800044 	addi	r2,r2,1
    5924:	1727c83a 	sub	r19,r2,fp
    5928:	02000044 	movi	r8,1
    592c:	003f9d06 	br	57a4 <__sfvwrite_r+0x224>
    5930:	80800517 	ldw	r2,20(r16)
    5934:	81400417 	ldw	r5,16(r16)
    5938:	81c00017 	ldw	r7,0(r16)
    593c:	10a7883a 	add	r19,r2,r2
    5940:	9885883a 	add	r2,r19,r2
    5944:	1026d7fa 	srli	r19,r2,31
    5948:	396dc83a 	sub	r22,r7,r5
    594c:	b1000044 	addi	r4,r22,1
    5950:	9885883a 	add	r2,r19,r2
    5954:	1027d07a 	srai	r19,r2,1
    5958:	2485883a 	add	r2,r4,r18
    595c:	980d883a 	mov	r6,r19
    5960:	9880022e 	bgeu	r19,r2,596c <__sfvwrite_r+0x3ec>
    5964:	1027883a 	mov	r19,r2
    5968:	100d883a 	mov	r6,r2
    596c:	18c1000c 	andi	r3,r3,1024
    5970:	18001c26 	beq	r3,zero,59e4 <__sfvwrite_r+0x464>
    5974:	300b883a 	mov	r5,r6
    5978:	a809883a 	mov	r4,r21
    597c:	0005e5c0 	call	5e5c <_malloc_r>
    5980:	102f883a 	mov	r23,r2
    5984:	10002926 	beq	r2,zero,5a2c <__sfvwrite_r+0x4ac>
    5988:	81400417 	ldw	r5,16(r16)
    598c:	b00d883a 	mov	r6,r22
    5990:	1009883a 	mov	r4,r2
    5994:	000674c0 	call	674c <memcpy>
    5998:	8080030b 	ldhu	r2,12(r16)
    599c:	00fedfc4 	movi	r3,-1153
    59a0:	10c4703a 	and	r2,r2,r3
    59a4:	10802014 	ori	r2,r2,128
    59a8:	8080030d 	sth	r2,12(r16)
    59ac:	bd89883a 	add	r4,r23,r22
    59b0:	9d8fc83a 	sub	r7,r19,r22
    59b4:	85c00415 	stw	r23,16(r16)
    59b8:	84c00515 	stw	r19,20(r16)
    59bc:	81000015 	stw	r4,0(r16)
    59c0:	9027883a 	mov	r19,r18
    59c4:	81c00215 	stw	r7,8(r16)
    59c8:	902f883a 	mov	r23,r18
    59cc:	003f3b06 	br	56bc <__sfvwrite_r+0x13c>
    59d0:	800b883a 	mov	r5,r16
    59d4:	a809883a 	mov	r4,r21
    59d8:	0004d200 	call	4d20 <_fflush_r>
    59dc:	103fb926 	beq	r2,zero,58c4 <__sfvwrite_r+0x344>
    59e0:	003f6506 	br	5778 <__sfvwrite_r+0x1f8>
    59e4:	a809883a 	mov	r4,r21
    59e8:	0007b140 	call	7b14 <_realloc_r>
    59ec:	102f883a 	mov	r23,r2
    59f0:	103fee1e 	bne	r2,zero,59ac <__sfvwrite_r+0x42c>
    59f4:	81400417 	ldw	r5,16(r16)
    59f8:	a809883a 	mov	r4,r21
    59fc:	00052700 	call	5270 <_free_r>
    5a00:	8080030b 	ldhu	r2,12(r16)
    5a04:	00ffdfc4 	movi	r3,-129
    5a08:	1884703a 	and	r2,r3,r2
    5a0c:	00c00304 	movi	r3,12
    5a10:	a8c00015 	stw	r3,0(r21)
    5a14:	003f5906 	br	577c <__sfvwrite_r+0x1fc>
    5a18:	94c00044 	addi	r19,r18,1
    5a1c:	02000044 	movi	r8,1
    5a20:	003f6006 	br	57a4 <__sfvwrite_r+0x224>
    5a24:	00bfffc4 	movi	r2,-1
    5a28:	003f0306 	br	5638 <__sfvwrite_r+0xb8>
    5a2c:	00800304 	movi	r2,12
    5a30:	a8800015 	stw	r2,0(r21)
    5a34:	8080030b 	ldhu	r2,12(r16)
    5a38:	003f5006 	br	577c <__sfvwrite_r+0x1fc>

00005a3c <_fwalk>:
    5a3c:	defff704 	addi	sp,sp,-36
    5a40:	dd000415 	stw	r20,16(sp)
    5a44:	dfc00815 	stw	ra,32(sp)
    5a48:	ddc00715 	stw	r23,28(sp)
    5a4c:	dd800615 	stw	r22,24(sp)
    5a50:	dd400515 	stw	r21,20(sp)
    5a54:	dcc00315 	stw	r19,12(sp)
    5a58:	dc800215 	stw	r18,8(sp)
    5a5c:	dc400115 	stw	r17,4(sp)
    5a60:	dc000015 	stw	r16,0(sp)
    5a64:	2500b804 	addi	r20,r4,736
    5a68:	a0002326 	beq	r20,zero,5af8 <_fwalk+0xbc>
    5a6c:	282b883a 	mov	r21,r5
    5a70:	002f883a 	mov	r23,zero
    5a74:	05800044 	movi	r22,1
    5a78:	04ffffc4 	movi	r19,-1
    5a7c:	a4400117 	ldw	r17,4(r20)
    5a80:	a4800217 	ldw	r18,8(r20)
    5a84:	8c7fffc4 	addi	r17,r17,-1
    5a88:	88000d16 	blt	r17,zero,5ac0 <_fwalk+0x84>
    5a8c:	94000304 	addi	r16,r18,12
    5a90:	94800384 	addi	r18,r18,14
    5a94:	8080000b 	ldhu	r2,0(r16)
    5a98:	8c7fffc4 	addi	r17,r17,-1
    5a9c:	813ffd04 	addi	r4,r16,-12
    5aa0:	b080042e 	bgeu	r22,r2,5ab4 <_fwalk+0x78>
    5aa4:	9080000f 	ldh	r2,0(r18)
    5aa8:	14c00226 	beq	r2,r19,5ab4 <_fwalk+0x78>
    5aac:	a83ee83a 	callr	r21
    5ab0:	b8aeb03a 	or	r23,r23,r2
    5ab4:	84001a04 	addi	r16,r16,104
    5ab8:	94801a04 	addi	r18,r18,104
    5abc:	8cfff51e 	bne	r17,r19,5a94 <_fwalk+0x58>
    5ac0:	a5000017 	ldw	r20,0(r20)
    5ac4:	a03fed1e 	bne	r20,zero,5a7c <_fwalk+0x40>
    5ac8:	b805883a 	mov	r2,r23
    5acc:	dfc00817 	ldw	ra,32(sp)
    5ad0:	ddc00717 	ldw	r23,28(sp)
    5ad4:	dd800617 	ldw	r22,24(sp)
    5ad8:	dd400517 	ldw	r21,20(sp)
    5adc:	dd000417 	ldw	r20,16(sp)
    5ae0:	dcc00317 	ldw	r19,12(sp)
    5ae4:	dc800217 	ldw	r18,8(sp)
    5ae8:	dc400117 	ldw	r17,4(sp)
    5aec:	dc000017 	ldw	r16,0(sp)
    5af0:	dec00904 	addi	sp,sp,36
    5af4:	f800283a 	ret
    5af8:	002f883a 	mov	r23,zero
    5afc:	003ff206 	br	5ac8 <_fwalk+0x8c>

00005b00 <_fwalk_reent>:
    5b00:	defff704 	addi	sp,sp,-36
    5b04:	dd000415 	stw	r20,16(sp)
    5b08:	dfc00815 	stw	ra,32(sp)
    5b0c:	ddc00715 	stw	r23,28(sp)
    5b10:	dd800615 	stw	r22,24(sp)
    5b14:	dd400515 	stw	r21,20(sp)
    5b18:	dcc00315 	stw	r19,12(sp)
    5b1c:	dc800215 	stw	r18,8(sp)
    5b20:	dc400115 	stw	r17,4(sp)
    5b24:	dc000015 	stw	r16,0(sp)
    5b28:	2500b804 	addi	r20,r4,736
    5b2c:	a0002326 	beq	r20,zero,5bbc <_fwalk_reent+0xbc>
    5b30:	282b883a 	mov	r21,r5
    5b34:	2027883a 	mov	r19,r4
    5b38:	002f883a 	mov	r23,zero
    5b3c:	05800044 	movi	r22,1
    5b40:	04bfffc4 	movi	r18,-1
    5b44:	a4400117 	ldw	r17,4(r20)
    5b48:	a4000217 	ldw	r16,8(r20)
    5b4c:	8c7fffc4 	addi	r17,r17,-1
    5b50:	88000c16 	blt	r17,zero,5b84 <_fwalk_reent+0x84>
    5b54:	84000304 	addi	r16,r16,12
    5b58:	8080000b 	ldhu	r2,0(r16)
    5b5c:	8c7fffc4 	addi	r17,r17,-1
    5b60:	817ffd04 	addi	r5,r16,-12
    5b64:	b080052e 	bgeu	r22,r2,5b7c <_fwalk_reent+0x7c>
    5b68:	8080008f 	ldh	r2,2(r16)
    5b6c:	9809883a 	mov	r4,r19
    5b70:	14800226 	beq	r2,r18,5b7c <_fwalk_reent+0x7c>
    5b74:	a83ee83a 	callr	r21
    5b78:	b8aeb03a 	or	r23,r23,r2
    5b7c:	84001a04 	addi	r16,r16,104
    5b80:	8cbff51e 	bne	r17,r18,5b58 <_fwalk_reent+0x58>
    5b84:	a5000017 	ldw	r20,0(r20)
    5b88:	a03fee1e 	bne	r20,zero,5b44 <_fwalk_reent+0x44>
    5b8c:	b805883a 	mov	r2,r23
    5b90:	dfc00817 	ldw	ra,32(sp)
    5b94:	ddc00717 	ldw	r23,28(sp)
    5b98:	dd800617 	ldw	r22,24(sp)
    5b9c:	dd400517 	ldw	r21,20(sp)
    5ba0:	dd000417 	ldw	r20,16(sp)
    5ba4:	dcc00317 	ldw	r19,12(sp)
    5ba8:	dc800217 	ldw	r18,8(sp)
    5bac:	dc400117 	ldw	r17,4(sp)
    5bb0:	dc000017 	ldw	r16,0(sp)
    5bb4:	dec00904 	addi	sp,sp,36
    5bb8:	f800283a 	ret
    5bbc:	002f883a 	mov	r23,zero
    5bc0:	003ff206 	br	5b8c <_fwalk_reent+0x8c>

00005bc4 <_setlocale_r>:
    5bc4:	30001b26 	beq	r6,zero,5c34 <_setlocale_r+0x70>
    5bc8:	014000b4 	movhi	r5,2
    5bcc:	defffe04 	addi	sp,sp,-8
    5bd0:	29676c04 	addi	r5,r5,-25168
    5bd4:	3009883a 	mov	r4,r6
    5bd8:	dc000015 	stw	r16,0(sp)
    5bdc:	dfc00115 	stw	ra,4(sp)
    5be0:	3021883a 	mov	r16,r6
    5be4:	000827c0 	call	827c <strcmp>
    5be8:	1000061e 	bne	r2,zero,5c04 <_setlocale_r+0x40>
    5bec:	008000b4 	movhi	r2,2
    5bf0:	10a74d04 	addi	r2,r2,-25292
    5bf4:	dfc00117 	ldw	ra,4(sp)
    5bf8:	dc000017 	ldw	r16,0(sp)
    5bfc:	dec00204 	addi	sp,sp,8
    5c00:	f800283a 	ret
    5c04:	014000b4 	movhi	r5,2
    5c08:	29674d04 	addi	r5,r5,-25292
    5c0c:	8009883a 	mov	r4,r16
    5c10:	000827c0 	call	827c <strcmp>
    5c14:	103ff526 	beq	r2,zero,5bec <_setlocale_r+0x28>
    5c18:	014000b4 	movhi	r5,2
    5c1c:	29675704 	addi	r5,r5,-25252
    5c20:	8009883a 	mov	r4,r16
    5c24:	000827c0 	call	827c <strcmp>
    5c28:	103ff026 	beq	r2,zero,5bec <_setlocale_r+0x28>
    5c2c:	0005883a 	mov	r2,zero
    5c30:	003ff006 	br	5bf4 <_setlocale_r+0x30>
    5c34:	008000b4 	movhi	r2,2
    5c38:	10a74d04 	addi	r2,r2,-25292
    5c3c:	f800283a 	ret

00005c40 <__locale_charset>:
    5c40:	008000b4 	movhi	r2,2
    5c44:	10a9b804 	addi	r2,r2,-22816
    5c48:	f800283a 	ret

00005c4c <__locale_mb_cur_max>:
    5c4c:	008000b4 	movhi	r2,2
    5c50:	10b01c04 	addi	r2,r2,-16272
    5c54:	10800017 	ldw	r2,0(r2)
    5c58:	f800283a 	ret

00005c5c <__locale_msgcharset>:
    5c5c:	008000b4 	movhi	r2,2
    5c60:	10a9b004 	addi	r2,r2,-22848
    5c64:	f800283a 	ret

00005c68 <__locale_cjk_lang>:
    5c68:	0005883a 	mov	r2,zero
    5c6c:	f800283a 	ret

00005c70 <_localeconv_r>:
    5c70:	008000b4 	movhi	r2,2
    5c74:	10a9c004 	addi	r2,r2,-22784
    5c78:	f800283a 	ret

00005c7c <setlocale>:
    5c7c:	008000b4 	movhi	r2,2
    5c80:	10b01b04 	addi	r2,r2,-16276
    5c84:	280d883a 	mov	r6,r5
    5c88:	200b883a 	mov	r5,r4
    5c8c:	11000017 	ldw	r4,0(r2)
    5c90:	0005bc41 	jmpi	5bc4 <_setlocale_r>

00005c94 <localeconv>:
    5c94:	008000b4 	movhi	r2,2
    5c98:	10a9c004 	addi	r2,r2,-22784
    5c9c:	f800283a 	ret

00005ca0 <__smakebuf_r>:
    5ca0:	2880030b 	ldhu	r2,12(r5)
    5ca4:	10c0008c 	andi	r3,r2,2
    5ca8:	1800411e 	bne	r3,zero,5db0 <__smakebuf_r+0x110>
    5cac:	deffec04 	addi	sp,sp,-80
    5cb0:	dc000f15 	stw	r16,60(sp)
    5cb4:	2821883a 	mov	r16,r5
    5cb8:	2940038f 	ldh	r5,14(r5)
    5cbc:	dc401015 	stw	r17,64(sp)
    5cc0:	dfc01315 	stw	ra,76(sp)
    5cc4:	dcc01215 	stw	r19,72(sp)
    5cc8:	dc801115 	stw	r18,68(sp)
    5ccc:	2023883a 	mov	r17,r4
    5cd0:	28001c16 	blt	r5,zero,5d44 <__smakebuf_r+0xa4>
    5cd4:	d80d883a 	mov	r6,sp
    5cd8:	0009e240 	call	9e24 <_fstat_r>
    5cdc:	10001816 	blt	r2,zero,5d40 <__smakebuf_r+0xa0>
    5ce0:	d8800117 	ldw	r2,4(sp)
    5ce4:	00e00014 	movui	r3,32768
    5ce8:	10bc000c 	andi	r2,r2,61440
    5cec:	14c80020 	cmpeqi	r19,r2,8192
    5cf0:	10c03726 	beq	r2,r3,5dd0 <__smakebuf_r+0x130>
    5cf4:	80c0030b 	ldhu	r3,12(r16)
    5cf8:	18c20014 	ori	r3,r3,2048
    5cfc:	80c0030d 	sth	r3,12(r16)
    5d00:	00c80004 	movi	r3,8192
    5d04:	10c0521e 	bne	r2,r3,5e50 <__smakebuf_r+0x1b0>
    5d08:	8140038f 	ldh	r5,14(r16)
    5d0c:	8809883a 	mov	r4,r17
    5d10:	0009e800 	call	9e80 <_isatty_r>
    5d14:	10004c26 	beq	r2,zero,5e48 <__smakebuf_r+0x1a8>
    5d18:	8080030b 	ldhu	r2,12(r16)
    5d1c:	80c010c4 	addi	r3,r16,67
    5d20:	80c00015 	stw	r3,0(r16)
    5d24:	10800054 	ori	r2,r2,1
    5d28:	8080030d 	sth	r2,12(r16)
    5d2c:	00800044 	movi	r2,1
    5d30:	80c00415 	stw	r3,16(r16)
    5d34:	80800515 	stw	r2,20(r16)
    5d38:	04810004 	movi	r18,1024
    5d3c:	00000706 	br	5d5c <__smakebuf_r+0xbc>
    5d40:	8080030b 	ldhu	r2,12(r16)
    5d44:	10c0200c 	andi	r3,r2,128
    5d48:	18001f1e 	bne	r3,zero,5dc8 <__smakebuf_r+0x128>
    5d4c:	04810004 	movi	r18,1024
    5d50:	10820014 	ori	r2,r2,2048
    5d54:	8080030d 	sth	r2,12(r16)
    5d58:	0027883a 	mov	r19,zero
    5d5c:	900b883a 	mov	r5,r18
    5d60:	8809883a 	mov	r4,r17
    5d64:	0005e5c0 	call	5e5c <_malloc_r>
    5d68:	10002c26 	beq	r2,zero,5e1c <__smakebuf_r+0x17c>
    5d6c:	80c0030b 	ldhu	r3,12(r16)
    5d70:	01000034 	movhi	r4,0
    5d74:	21136d04 	addi	r4,r4,19892
    5d78:	89000f15 	stw	r4,60(r17)
    5d7c:	18c02014 	ori	r3,r3,128
    5d80:	80c0030d 	sth	r3,12(r16)
    5d84:	80800015 	stw	r2,0(r16)
    5d88:	80800415 	stw	r2,16(r16)
    5d8c:	84800515 	stw	r18,20(r16)
    5d90:	98001a1e 	bne	r19,zero,5dfc <__smakebuf_r+0x15c>
    5d94:	dfc01317 	ldw	ra,76(sp)
    5d98:	dcc01217 	ldw	r19,72(sp)
    5d9c:	dc801117 	ldw	r18,68(sp)
    5da0:	dc401017 	ldw	r17,64(sp)
    5da4:	dc000f17 	ldw	r16,60(sp)
    5da8:	dec01404 	addi	sp,sp,80
    5dac:	f800283a 	ret
    5db0:	288010c4 	addi	r2,r5,67
    5db4:	28800015 	stw	r2,0(r5)
    5db8:	28800415 	stw	r2,16(r5)
    5dbc:	00800044 	movi	r2,1
    5dc0:	28800515 	stw	r2,20(r5)
    5dc4:	f800283a 	ret
    5dc8:	04801004 	movi	r18,64
    5dcc:	003fe006 	br	5d50 <__smakebuf_r+0xb0>
    5dd0:	81000a17 	ldw	r4,40(r16)
    5dd4:	00c00074 	movhi	r3,1
    5dd8:	18e08604 	addi	r3,r3,-32232
    5ddc:	20ffc51e 	bne	r4,r3,5cf4 <__smakebuf_r+0x54>
    5de0:	8080030b 	ldhu	r2,12(r16)
    5de4:	04810004 	movi	r18,1024
    5de8:	84801315 	stw	r18,76(r16)
    5dec:	1484b03a 	or	r2,r2,r18
    5df0:	8080030d 	sth	r2,12(r16)
    5df4:	0027883a 	mov	r19,zero
    5df8:	003fd806 	br	5d5c <__smakebuf_r+0xbc>
    5dfc:	8140038f 	ldh	r5,14(r16)
    5e00:	8809883a 	mov	r4,r17
    5e04:	0009e800 	call	9e80 <_isatty_r>
    5e08:	103fe226 	beq	r2,zero,5d94 <__smakebuf_r+0xf4>
    5e0c:	8080030b 	ldhu	r2,12(r16)
    5e10:	10800054 	ori	r2,r2,1
    5e14:	8080030d 	sth	r2,12(r16)
    5e18:	003fde06 	br	5d94 <__smakebuf_r+0xf4>
    5e1c:	8080030b 	ldhu	r2,12(r16)
    5e20:	10c0800c 	andi	r3,r2,512
    5e24:	183fdb1e 	bne	r3,zero,5d94 <__smakebuf_r+0xf4>
    5e28:	10800094 	ori	r2,r2,2
    5e2c:	80c010c4 	addi	r3,r16,67
    5e30:	8080030d 	sth	r2,12(r16)
    5e34:	00800044 	movi	r2,1
    5e38:	80c00015 	stw	r3,0(r16)
    5e3c:	80c00415 	stw	r3,16(r16)
    5e40:	80800515 	stw	r2,20(r16)
    5e44:	003fd306 	br	5d94 <__smakebuf_r+0xf4>
    5e48:	04810004 	movi	r18,1024
    5e4c:	003fc306 	br	5d5c <__smakebuf_r+0xbc>
    5e50:	0027883a 	mov	r19,zero
    5e54:	04810004 	movi	r18,1024
    5e58:	003fc006 	br	5d5c <__smakebuf_r+0xbc>

00005e5c <_malloc_r>:
    5e5c:	defff504 	addi	sp,sp,-44
    5e60:	dc800315 	stw	r18,12(sp)
    5e64:	dfc00a15 	stw	ra,40(sp)
    5e68:	df000915 	stw	fp,36(sp)
    5e6c:	ddc00815 	stw	r23,32(sp)
    5e70:	dd800715 	stw	r22,28(sp)
    5e74:	dd400615 	stw	r21,24(sp)
    5e78:	dd000515 	stw	r20,20(sp)
    5e7c:	dcc00415 	stw	r19,16(sp)
    5e80:	dc400215 	stw	r17,8(sp)
    5e84:	dc000115 	stw	r16,4(sp)
    5e88:	288002c4 	addi	r2,r5,11
    5e8c:	00c00584 	movi	r3,22
    5e90:	2025883a 	mov	r18,r4
    5e94:	18807f2e 	bgeu	r3,r2,6094 <_malloc_r+0x238>
    5e98:	047ffe04 	movi	r17,-8
    5e9c:	1462703a 	and	r17,r2,r17
    5ea0:	8800a316 	blt	r17,zero,6130 <_malloc_r+0x2d4>
    5ea4:	8940a236 	bltu	r17,r5,6130 <_malloc_r+0x2d4>
    5ea8:	000e0000 	call	e000 <__malloc_lock>
    5eac:	00807dc4 	movi	r2,503
    5eb0:	1441e92e 	bgeu	r2,r17,6658 <_malloc_r+0x7fc>
    5eb4:	8804d27a 	srli	r2,r17,9
    5eb8:	1000a126 	beq	r2,zero,6140 <_malloc_r+0x2e4>
    5ebc:	00c00104 	movi	r3,4
    5ec0:	18811e36 	bltu	r3,r2,633c <_malloc_r+0x4e0>
    5ec4:	8804d1ba 	srli	r2,r17,6
    5ec8:	12000e44 	addi	r8,r2,57
    5ecc:	11c00e04 	addi	r7,r2,56
    5ed0:	4209883a 	add	r4,r8,r8
    5ed4:	04c000b4 	movhi	r19,2
    5ed8:	2109883a 	add	r4,r4,r4
    5edc:	9ce9ce04 	addi	r19,r19,-22728
    5ee0:	2109883a 	add	r4,r4,r4
    5ee4:	9909883a 	add	r4,r19,r4
    5ee8:	24000117 	ldw	r16,4(r4)
    5eec:	213ffe04 	addi	r4,r4,-8
    5ef0:	24009726 	beq	r4,r16,6150 <_malloc_r+0x2f4>
    5ef4:	80800117 	ldw	r2,4(r16)
    5ef8:	01bfff04 	movi	r6,-4
    5efc:	014003c4 	movi	r5,15
    5f00:	1184703a 	and	r2,r2,r6
    5f04:	1447c83a 	sub	r3,r2,r17
    5f08:	28c00716 	blt	r5,r3,5f28 <_malloc_r+0xcc>
    5f0c:	1800920e 	bge	r3,zero,6158 <_malloc_r+0x2fc>
    5f10:	84000317 	ldw	r16,12(r16)
    5f14:	24008e26 	beq	r4,r16,6150 <_malloc_r+0x2f4>
    5f18:	80800117 	ldw	r2,4(r16)
    5f1c:	1184703a 	and	r2,r2,r6
    5f20:	1447c83a 	sub	r3,r2,r17
    5f24:	28fff90e 	bge	r5,r3,5f0c <_malloc_r+0xb0>
    5f28:	3809883a 	mov	r4,r7
    5f2c:	018000b4 	movhi	r6,2
    5f30:	9c000417 	ldw	r16,16(r19)
    5f34:	31a9ce04 	addi	r6,r6,-22728
    5f38:	32000204 	addi	r8,r6,8
    5f3c:	82013426 	beq	r16,r8,6410 <_malloc_r+0x5b4>
    5f40:	80c00117 	ldw	r3,4(r16)
    5f44:	00bfff04 	movi	r2,-4
    5f48:	188e703a 	and	r7,r3,r2
    5f4c:	3c45c83a 	sub	r2,r7,r17
    5f50:	00c003c4 	movi	r3,15
    5f54:	18811f16 	blt	r3,r2,63d4 <_malloc_r+0x578>
    5f58:	32000515 	stw	r8,20(r6)
    5f5c:	32000415 	stw	r8,16(r6)
    5f60:	10007f0e 	bge	r2,zero,6160 <_malloc_r+0x304>
    5f64:	00807fc4 	movi	r2,511
    5f68:	11c0fd36 	bltu	r2,r7,6360 <_malloc_r+0x504>
    5f6c:	3806d0fa 	srli	r3,r7,3
    5f70:	01c00044 	movi	r7,1
    5f74:	30800117 	ldw	r2,4(r6)
    5f78:	19400044 	addi	r5,r3,1
    5f7c:	294b883a 	add	r5,r5,r5
    5f80:	1807d0ba 	srai	r3,r3,2
    5f84:	294b883a 	add	r5,r5,r5
    5f88:	294b883a 	add	r5,r5,r5
    5f8c:	298b883a 	add	r5,r5,r6
    5f90:	38c6983a 	sll	r3,r7,r3
    5f94:	29c00017 	ldw	r7,0(r5)
    5f98:	2a7ffe04 	addi	r9,r5,-8
    5f9c:	1886b03a 	or	r3,r3,r2
    5fa0:	82400315 	stw	r9,12(r16)
    5fa4:	81c00215 	stw	r7,8(r16)
    5fa8:	30c00115 	stw	r3,4(r6)
    5fac:	2c000015 	stw	r16,0(r5)
    5fb0:	3c000315 	stw	r16,12(r7)
    5fb4:	2005d0ba 	srai	r2,r4,2
    5fb8:	01400044 	movi	r5,1
    5fbc:	288a983a 	sll	r5,r5,r2
    5fc0:	19406f36 	bltu	r3,r5,6180 <_malloc_r+0x324>
    5fc4:	28c4703a 	and	r2,r5,r3
    5fc8:	10000a1e 	bne	r2,zero,5ff4 <_malloc_r+0x198>
    5fcc:	00bfff04 	movi	r2,-4
    5fd0:	294b883a 	add	r5,r5,r5
    5fd4:	2088703a 	and	r4,r4,r2
    5fd8:	28c4703a 	and	r2,r5,r3
    5fdc:	21000104 	addi	r4,r4,4
    5fe0:	1000041e 	bne	r2,zero,5ff4 <_malloc_r+0x198>
    5fe4:	294b883a 	add	r5,r5,r5
    5fe8:	28c4703a 	and	r2,r5,r3
    5fec:	21000104 	addi	r4,r4,4
    5ff0:	103ffc26 	beq	r2,zero,5fe4 <_malloc_r+0x188>
    5ff4:	02bfff04 	movi	r10,-4
    5ff8:	024003c4 	movi	r9,15
    5ffc:	21800044 	addi	r6,r4,1
    6000:	318d883a 	add	r6,r6,r6
    6004:	318d883a 	add	r6,r6,r6
    6008:	318d883a 	add	r6,r6,r6
    600c:	998d883a 	add	r6,r19,r6
    6010:	333ffe04 	addi	r12,r6,-8
    6014:	2017883a 	mov	r11,r4
    6018:	31800104 	addi	r6,r6,4
    601c:	34000017 	ldw	r16,0(r6)
    6020:	31fffd04 	addi	r7,r6,-12
    6024:	81c0041e 	bne	r16,r7,6038 <_malloc_r+0x1dc>
    6028:	0000fb06 	br	6418 <_malloc_r+0x5bc>
    602c:	1801030e 	bge	r3,zero,643c <_malloc_r+0x5e0>
    6030:	84000317 	ldw	r16,12(r16)
    6034:	81c0f826 	beq	r16,r7,6418 <_malloc_r+0x5bc>
    6038:	80800117 	ldw	r2,4(r16)
    603c:	1284703a 	and	r2,r2,r10
    6040:	1447c83a 	sub	r3,r2,r17
    6044:	48fff90e 	bge	r9,r3,602c <_malloc_r+0x1d0>
    6048:	80800317 	ldw	r2,12(r16)
    604c:	81000217 	ldw	r4,8(r16)
    6050:	89400054 	ori	r5,r17,1
    6054:	81400115 	stw	r5,4(r16)
    6058:	20800315 	stw	r2,12(r4)
    605c:	11000215 	stw	r4,8(r2)
    6060:	8463883a 	add	r17,r16,r17
    6064:	9c400515 	stw	r17,20(r19)
    6068:	9c400415 	stw	r17,16(r19)
    606c:	18800054 	ori	r2,r3,1
    6070:	88800115 	stw	r2,4(r17)
    6074:	8a000315 	stw	r8,12(r17)
    6078:	8a000215 	stw	r8,8(r17)
    607c:	88e3883a 	add	r17,r17,r3
    6080:	88c00015 	stw	r3,0(r17)
    6084:	9009883a 	mov	r4,r18
    6088:	000e1200 	call	e120 <__malloc_unlock>
    608c:	80800204 	addi	r2,r16,8
    6090:	00001b06 	br	6100 <_malloc_r+0x2a4>
    6094:	04400404 	movi	r17,16
    6098:	89402536 	bltu	r17,r5,6130 <_malloc_r+0x2d4>
    609c:	000e0000 	call	e000 <__malloc_lock>
    60a0:	00800184 	movi	r2,6
    60a4:	01000084 	movi	r4,2
    60a8:	04c000b4 	movhi	r19,2
    60ac:	1085883a 	add	r2,r2,r2
    60b0:	9ce9ce04 	addi	r19,r19,-22728
    60b4:	1085883a 	add	r2,r2,r2
    60b8:	9885883a 	add	r2,r19,r2
    60bc:	14000117 	ldw	r16,4(r2)
    60c0:	10fffe04 	addi	r3,r2,-8
    60c4:	80c0d926 	beq	r16,r3,642c <_malloc_r+0x5d0>
    60c8:	80c00117 	ldw	r3,4(r16)
    60cc:	81000317 	ldw	r4,12(r16)
    60d0:	00bfff04 	movi	r2,-4
    60d4:	1884703a 	and	r2,r3,r2
    60d8:	81400217 	ldw	r5,8(r16)
    60dc:	8085883a 	add	r2,r16,r2
    60e0:	10c00117 	ldw	r3,4(r2)
    60e4:	29000315 	stw	r4,12(r5)
    60e8:	21400215 	stw	r5,8(r4)
    60ec:	18c00054 	ori	r3,r3,1
    60f0:	10c00115 	stw	r3,4(r2)
    60f4:	9009883a 	mov	r4,r18
    60f8:	000e1200 	call	e120 <__malloc_unlock>
    60fc:	80800204 	addi	r2,r16,8
    6100:	dfc00a17 	ldw	ra,40(sp)
    6104:	df000917 	ldw	fp,36(sp)
    6108:	ddc00817 	ldw	r23,32(sp)
    610c:	dd800717 	ldw	r22,28(sp)
    6110:	dd400617 	ldw	r21,24(sp)
    6114:	dd000517 	ldw	r20,20(sp)
    6118:	dcc00417 	ldw	r19,16(sp)
    611c:	dc800317 	ldw	r18,12(sp)
    6120:	dc400217 	ldw	r17,8(sp)
    6124:	dc000117 	ldw	r16,4(sp)
    6128:	dec00b04 	addi	sp,sp,44
    612c:	f800283a 	ret
    6130:	00800304 	movi	r2,12
    6134:	90800015 	stw	r2,0(r18)
    6138:	0005883a 	mov	r2,zero
    613c:	003ff006 	br	6100 <_malloc_r+0x2a4>
    6140:	01002004 	movi	r4,128
    6144:	02001004 	movi	r8,64
    6148:	01c00fc4 	movi	r7,63
    614c:	003f6106 	br	5ed4 <_malloc_r+0x78>
    6150:	4009883a 	mov	r4,r8
    6154:	003f7506 	br	5f2c <_malloc_r+0xd0>
    6158:	81000317 	ldw	r4,12(r16)
    615c:	003fde06 	br	60d8 <_malloc_r+0x27c>
    6160:	81c5883a 	add	r2,r16,r7
    6164:	11400117 	ldw	r5,4(r2)
    6168:	9009883a 	mov	r4,r18
    616c:	29400054 	ori	r5,r5,1
    6170:	11400115 	stw	r5,4(r2)
    6174:	000e1200 	call	e120 <__malloc_unlock>
    6178:	80800204 	addi	r2,r16,8
    617c:	003fe006 	br	6100 <_malloc_r+0x2a4>
    6180:	9c000217 	ldw	r16,8(r19)
    6184:	00bfff04 	movi	r2,-4
    6188:	85800117 	ldw	r22,4(r16)
    618c:	b0ac703a 	and	r22,r22,r2
    6190:	b4400336 	bltu	r22,r17,61a0 <_malloc_r+0x344>
    6194:	b445c83a 	sub	r2,r22,r17
    6198:	00c003c4 	movi	r3,15
    619c:	18805d16 	blt	r3,r2,6314 <_malloc_r+0x4b8>
    61a0:	05c000b4 	movhi	r23,2
    61a4:	008000b4 	movhi	r2,2
    61a8:	10b7ff04 	addi	r2,r2,-8196
    61ac:	bdf01d04 	addi	r23,r23,-16268
    61b0:	15400017 	ldw	r21,0(r2)
    61b4:	b8c00017 	ldw	r3,0(r23)
    61b8:	00bfffc4 	movi	r2,-1
    61bc:	858d883a 	add	r6,r16,r22
    61c0:	8d6b883a 	add	r21,r17,r21
    61c4:	1880ea26 	beq	r3,r2,6570 <_malloc_r+0x714>
    61c8:	ad4403c4 	addi	r21,r21,4111
    61cc:	00bc0004 	movi	r2,-4096
    61d0:	a8aa703a 	and	r21,r21,r2
    61d4:	a80b883a 	mov	r5,r21
    61d8:	9009883a 	mov	r4,r18
    61dc:	d9800015 	stw	r6,0(sp)
    61e0:	00080ec0 	call	80ec <_sbrk_r>
    61e4:	1029883a 	mov	r20,r2
    61e8:	00bfffc4 	movi	r2,-1
    61ec:	d9800017 	ldw	r6,0(sp)
    61f0:	a080e826 	beq	r20,r2,6594 <_malloc_r+0x738>
    61f4:	a180a636 	bltu	r20,r6,6490 <_malloc_r+0x634>
    61f8:	070000b4 	movhi	fp,2
    61fc:	e7382104 	addi	fp,fp,-8060
    6200:	e0800017 	ldw	r2,0(fp)
    6204:	a887883a 	add	r3,r21,r2
    6208:	e0c00015 	stw	r3,0(fp)
    620c:	3500e626 	beq	r6,r20,65a8 <_malloc_r+0x74c>
    6210:	b9000017 	ldw	r4,0(r23)
    6214:	00bfffc4 	movi	r2,-1
    6218:	2080ee26 	beq	r4,r2,65d4 <_malloc_r+0x778>
    621c:	a185c83a 	sub	r2,r20,r6
    6220:	10c5883a 	add	r2,r2,r3
    6224:	e0800015 	stw	r2,0(fp)
    6228:	a0c001cc 	andi	r3,r20,7
    622c:	1800bc26 	beq	r3,zero,6520 <_malloc_r+0x6c4>
    6230:	a0e9c83a 	sub	r20,r20,r3
    6234:	00840204 	movi	r2,4104
    6238:	a5000204 	addi	r20,r20,8
    623c:	10c7c83a 	sub	r3,r2,r3
    6240:	a545883a 	add	r2,r20,r21
    6244:	1083ffcc 	andi	r2,r2,4095
    6248:	18abc83a 	sub	r21,r3,r2
    624c:	a80b883a 	mov	r5,r21
    6250:	9009883a 	mov	r4,r18
    6254:	00080ec0 	call	80ec <_sbrk_r>
    6258:	00ffffc4 	movi	r3,-1
    625c:	10c0e126 	beq	r2,r3,65e4 <_malloc_r+0x788>
    6260:	1505c83a 	sub	r2,r2,r20
    6264:	1545883a 	add	r2,r2,r21
    6268:	10800054 	ori	r2,r2,1
    626c:	e0c00017 	ldw	r3,0(fp)
    6270:	9d000215 	stw	r20,8(r19)
    6274:	a0800115 	stw	r2,4(r20)
    6278:	a8c7883a 	add	r3,r21,r3
    627c:	e0c00015 	stw	r3,0(fp)
    6280:	84c00e26 	beq	r16,r19,62bc <_malloc_r+0x460>
    6284:	018003c4 	movi	r6,15
    6288:	3580a72e 	bgeu	r6,r22,6528 <_malloc_r+0x6cc>
    628c:	81400117 	ldw	r5,4(r16)
    6290:	013ffe04 	movi	r4,-8
    6294:	b0bffd04 	addi	r2,r22,-12
    6298:	1104703a 	and	r2,r2,r4
    629c:	2900004c 	andi	r4,r5,1
    62a0:	2088b03a 	or	r4,r4,r2
    62a4:	81000115 	stw	r4,4(r16)
    62a8:	01400144 	movi	r5,5
    62ac:	8089883a 	add	r4,r16,r2
    62b0:	21400115 	stw	r5,4(r4)
    62b4:	21400215 	stw	r5,8(r4)
    62b8:	3080cd36 	bltu	r6,r2,65f0 <_malloc_r+0x794>
    62bc:	008000b4 	movhi	r2,2
    62c0:	10b7fe04 	addi	r2,r2,-8200
    62c4:	11000017 	ldw	r4,0(r2)
    62c8:	20c0012e 	bgeu	r4,r3,62d0 <_malloc_r+0x474>
    62cc:	10c00015 	stw	r3,0(r2)
    62d0:	008000b4 	movhi	r2,2
    62d4:	10b7fd04 	addi	r2,r2,-8204
    62d8:	11000017 	ldw	r4,0(r2)
    62dc:	9c000217 	ldw	r16,8(r19)
    62e0:	20c0012e 	bgeu	r4,r3,62e8 <_malloc_r+0x48c>
    62e4:	10c00015 	stw	r3,0(r2)
    62e8:	80c00117 	ldw	r3,4(r16)
    62ec:	00bfff04 	movi	r2,-4
    62f0:	1886703a 	and	r3,r3,r2
    62f4:	1c45c83a 	sub	r2,r3,r17
    62f8:	1c400236 	bltu	r3,r17,6304 <_malloc_r+0x4a8>
    62fc:	00c003c4 	movi	r3,15
    6300:	18800416 	blt	r3,r2,6314 <_malloc_r+0x4b8>
    6304:	9009883a 	mov	r4,r18
    6308:	000e1200 	call	e120 <__malloc_unlock>
    630c:	0005883a 	mov	r2,zero
    6310:	003f7b06 	br	6100 <_malloc_r+0x2a4>
    6314:	88c00054 	ori	r3,r17,1
    6318:	80c00115 	stw	r3,4(r16)
    631c:	8463883a 	add	r17,r16,r17
    6320:	10800054 	ori	r2,r2,1
    6324:	9c400215 	stw	r17,8(r19)
    6328:	88800115 	stw	r2,4(r17)
    632c:	9009883a 	mov	r4,r18
    6330:	000e1200 	call	e120 <__malloc_unlock>
    6334:	80800204 	addi	r2,r16,8
    6338:	003f7106 	br	6100 <_malloc_r+0x2a4>
    633c:	00c00504 	movi	r3,20
    6340:	18804a2e 	bgeu	r3,r2,646c <_malloc_r+0x610>
    6344:	00c01504 	movi	r3,84
    6348:	18806e36 	bltu	r3,r2,6504 <_malloc_r+0x6a8>
    634c:	8804d33a 	srli	r2,r17,12
    6350:	12001bc4 	addi	r8,r2,111
    6354:	11c01b84 	addi	r7,r2,110
    6358:	4209883a 	add	r4,r8,r8
    635c:	003edd06 	br	5ed4 <_malloc_r+0x78>
    6360:	3804d27a 	srli	r2,r7,9
    6364:	00c00104 	movi	r3,4
    6368:	1880442e 	bgeu	r3,r2,647c <_malloc_r+0x620>
    636c:	00c00504 	movi	r3,20
    6370:	18808136 	bltu	r3,r2,6578 <_malloc_r+0x71c>
    6374:	11401704 	addi	r5,r2,92
    6378:	10c016c4 	addi	r3,r2,91
    637c:	294b883a 	add	r5,r5,r5
    6380:	294b883a 	add	r5,r5,r5
    6384:	294b883a 	add	r5,r5,r5
    6388:	994b883a 	add	r5,r19,r5
    638c:	28800017 	ldw	r2,0(r5)
    6390:	018000b4 	movhi	r6,2
    6394:	297ffe04 	addi	r5,r5,-8
    6398:	31a9ce04 	addi	r6,r6,-22728
    639c:	28806526 	beq	r5,r2,6534 <_malloc_r+0x6d8>
    63a0:	01bfff04 	movi	r6,-4
    63a4:	10c00117 	ldw	r3,4(r2)
    63a8:	1986703a 	and	r3,r3,r6
    63ac:	38c0022e 	bgeu	r7,r3,63b8 <_malloc_r+0x55c>
    63b0:	10800217 	ldw	r2,8(r2)
    63b4:	28bffb1e 	bne	r5,r2,63a4 <_malloc_r+0x548>
    63b8:	11400317 	ldw	r5,12(r2)
    63bc:	98c00117 	ldw	r3,4(r19)
    63c0:	81400315 	stw	r5,12(r16)
    63c4:	80800215 	stw	r2,8(r16)
    63c8:	2c000215 	stw	r16,8(r5)
    63cc:	14000315 	stw	r16,12(r2)
    63d0:	003ef806 	br	5fb4 <_malloc_r+0x158>
    63d4:	88c00054 	ori	r3,r17,1
    63d8:	80c00115 	stw	r3,4(r16)
    63dc:	8463883a 	add	r17,r16,r17
    63e0:	34400515 	stw	r17,20(r6)
    63e4:	34400415 	stw	r17,16(r6)
    63e8:	10c00054 	ori	r3,r2,1
    63ec:	8a000315 	stw	r8,12(r17)
    63f0:	8a000215 	stw	r8,8(r17)
    63f4:	88c00115 	stw	r3,4(r17)
    63f8:	88a3883a 	add	r17,r17,r2
    63fc:	88800015 	stw	r2,0(r17)
    6400:	9009883a 	mov	r4,r18
    6404:	000e1200 	call	e120 <__malloc_unlock>
    6408:	80800204 	addi	r2,r16,8
    640c:	003f3c06 	br	6100 <_malloc_r+0x2a4>
    6410:	30c00117 	ldw	r3,4(r6)
    6414:	003ee706 	br	5fb4 <_malloc_r+0x158>
    6418:	5ac00044 	addi	r11,r11,1
    641c:	588000cc 	andi	r2,r11,3
    6420:	31800204 	addi	r6,r6,8
    6424:	103efd1e 	bne	r2,zero,601c <_malloc_r+0x1c0>
    6428:	00002406 	br	64bc <_malloc_r+0x660>
    642c:	14000317 	ldw	r16,12(r2)
    6430:	143f251e 	bne	r2,r16,60c8 <_malloc_r+0x26c>
    6434:	21000084 	addi	r4,r4,2
    6438:	003ebc06 	br	5f2c <_malloc_r+0xd0>
    643c:	8085883a 	add	r2,r16,r2
    6440:	10c00117 	ldw	r3,4(r2)
    6444:	81000317 	ldw	r4,12(r16)
    6448:	81400217 	ldw	r5,8(r16)
    644c:	18c00054 	ori	r3,r3,1
    6450:	10c00115 	stw	r3,4(r2)
    6454:	29000315 	stw	r4,12(r5)
    6458:	21400215 	stw	r5,8(r4)
    645c:	9009883a 	mov	r4,r18
    6460:	000e1200 	call	e120 <__malloc_unlock>
    6464:	80800204 	addi	r2,r16,8
    6468:	003f2506 	br	6100 <_malloc_r+0x2a4>
    646c:	12001704 	addi	r8,r2,92
    6470:	11c016c4 	addi	r7,r2,91
    6474:	4209883a 	add	r4,r8,r8
    6478:	003e9606 	br	5ed4 <_malloc_r+0x78>
    647c:	3804d1ba 	srli	r2,r7,6
    6480:	11400e44 	addi	r5,r2,57
    6484:	10c00e04 	addi	r3,r2,56
    6488:	294b883a 	add	r5,r5,r5
    648c:	003fbc06 	br	6380 <_malloc_r+0x524>
    6490:	84ff5926 	beq	r16,r19,61f8 <_malloc_r+0x39c>
    6494:	008000b4 	movhi	r2,2
    6498:	10a9ce04 	addi	r2,r2,-22728
    649c:	14000217 	ldw	r16,8(r2)
    64a0:	00bfff04 	movi	r2,-4
    64a4:	80c00117 	ldw	r3,4(r16)
    64a8:	1886703a 	and	r3,r3,r2
    64ac:	003f9106 	br	62f4 <_malloc_r+0x498>
    64b0:	60800217 	ldw	r2,8(r12)
    64b4:	213fffc4 	addi	r4,r4,-1
    64b8:	1300651e 	bne	r2,r12,6650 <_malloc_r+0x7f4>
    64bc:	208000cc 	andi	r2,r4,3
    64c0:	633ffe04 	addi	r12,r12,-8
    64c4:	103ffa1e 	bne	r2,zero,64b0 <_malloc_r+0x654>
    64c8:	98800117 	ldw	r2,4(r19)
    64cc:	0146303a 	nor	r3,zero,r5
    64d0:	1884703a 	and	r2,r3,r2
    64d4:	98800115 	stw	r2,4(r19)
    64d8:	294b883a 	add	r5,r5,r5
    64dc:	117f2836 	bltu	r2,r5,6180 <_malloc_r+0x324>
    64e0:	283f2726 	beq	r5,zero,6180 <_malloc_r+0x324>
    64e4:	2886703a 	and	r3,r5,r2
    64e8:	5809883a 	mov	r4,r11
    64ec:	183ec31e 	bne	r3,zero,5ffc <_malloc_r+0x1a0>
    64f0:	294b883a 	add	r5,r5,r5
    64f4:	2886703a 	and	r3,r5,r2
    64f8:	21000104 	addi	r4,r4,4
    64fc:	183ffc26 	beq	r3,zero,64f0 <_malloc_r+0x694>
    6500:	003ebe06 	br	5ffc <_malloc_r+0x1a0>
    6504:	00c05504 	movi	r3,340
    6508:	18801236 	bltu	r3,r2,6554 <_malloc_r+0x6f8>
    650c:	8804d3fa 	srli	r2,r17,15
    6510:	12001e04 	addi	r8,r2,120
    6514:	11c01dc4 	addi	r7,r2,119
    6518:	4209883a 	add	r4,r8,r8
    651c:	003e6d06 	br	5ed4 <_malloc_r+0x78>
    6520:	00c40004 	movi	r3,4096
    6524:	003f4606 	br	6240 <_malloc_r+0x3e4>
    6528:	00800044 	movi	r2,1
    652c:	a0800115 	stw	r2,4(r20)
    6530:	003f7406 	br	6304 <_malloc_r+0x4a8>
    6534:	1805d0ba 	srai	r2,r3,2
    6538:	01c00044 	movi	r7,1
    653c:	30c00117 	ldw	r3,4(r6)
    6540:	388e983a 	sll	r7,r7,r2
    6544:	2805883a 	mov	r2,r5
    6548:	38c6b03a 	or	r3,r7,r3
    654c:	30c00115 	stw	r3,4(r6)
    6550:	003f9b06 	br	63c0 <_malloc_r+0x564>
    6554:	00c15504 	movi	r3,1364
    6558:	18801a36 	bltu	r3,r2,65c4 <_malloc_r+0x768>
    655c:	8804d4ba 	srli	r2,r17,18
    6560:	12001f44 	addi	r8,r2,125
    6564:	11c01f04 	addi	r7,r2,124
    6568:	4209883a 	add	r4,r8,r8
    656c:	003e5906 	br	5ed4 <_malloc_r+0x78>
    6570:	ad400404 	addi	r21,r21,16
    6574:	003f1706 	br	61d4 <_malloc_r+0x378>
    6578:	00c01504 	movi	r3,84
    657c:	18802336 	bltu	r3,r2,660c <_malloc_r+0x7b0>
    6580:	3804d33a 	srli	r2,r7,12
    6584:	11401bc4 	addi	r5,r2,111
    6588:	10c01b84 	addi	r3,r2,110
    658c:	294b883a 	add	r5,r5,r5
    6590:	003f7b06 	br	6380 <_malloc_r+0x524>
    6594:	9c000217 	ldw	r16,8(r19)
    6598:	00bfff04 	movi	r2,-4
    659c:	80c00117 	ldw	r3,4(r16)
    65a0:	1886703a 	and	r3,r3,r2
    65a4:	003f5306 	br	62f4 <_malloc_r+0x498>
    65a8:	3083ffcc 	andi	r2,r6,4095
    65ac:	103f181e 	bne	r2,zero,6210 <_malloc_r+0x3b4>
    65b0:	99000217 	ldw	r4,8(r19)
    65b4:	b545883a 	add	r2,r22,r21
    65b8:	10800054 	ori	r2,r2,1
    65bc:	20800115 	stw	r2,4(r4)
    65c0:	003f3e06 	br	62bc <_malloc_r+0x460>
    65c4:	01003f84 	movi	r4,254
    65c8:	02001fc4 	movi	r8,127
    65cc:	01c01f84 	movi	r7,126
    65d0:	003e4006 	br	5ed4 <_malloc_r+0x78>
    65d4:	008000b4 	movhi	r2,2
    65d8:	10b01d04 	addi	r2,r2,-16268
    65dc:	15000015 	stw	r20,0(r2)
    65e0:	003f1106 	br	6228 <_malloc_r+0x3cc>
    65e4:	00800044 	movi	r2,1
    65e8:	002b883a 	mov	r21,zero
    65ec:	003f1f06 	br	626c <_malloc_r+0x410>
    65f0:	81400204 	addi	r5,r16,8
    65f4:	9009883a 	mov	r4,r18
    65f8:	00052700 	call	5270 <_free_r>
    65fc:	008000b4 	movhi	r2,2
    6600:	10b82104 	addi	r2,r2,-8060
    6604:	10c00017 	ldw	r3,0(r2)
    6608:	003f2c06 	br	62bc <_malloc_r+0x460>
    660c:	00c05504 	movi	r3,340
    6610:	18800536 	bltu	r3,r2,6628 <_malloc_r+0x7cc>
    6614:	3804d3fa 	srli	r2,r7,15
    6618:	11401e04 	addi	r5,r2,120
    661c:	10c01dc4 	addi	r3,r2,119
    6620:	294b883a 	add	r5,r5,r5
    6624:	003f5606 	br	6380 <_malloc_r+0x524>
    6628:	00c15504 	movi	r3,1364
    662c:	18800536 	bltu	r3,r2,6644 <_malloc_r+0x7e8>
    6630:	3804d4ba 	srli	r2,r7,18
    6634:	11401f44 	addi	r5,r2,125
    6638:	10c01f04 	addi	r3,r2,124
    663c:	294b883a 	add	r5,r5,r5
    6640:	003f4f06 	br	6380 <_malloc_r+0x524>
    6644:	01403f84 	movi	r5,254
    6648:	00c01f84 	movi	r3,126
    664c:	003f4c06 	br	6380 <_malloc_r+0x524>
    6650:	98800117 	ldw	r2,4(r19)
    6654:	003fa006 	br	64d8 <_malloc_r+0x67c>
    6658:	8808d0fa 	srli	r4,r17,3
    665c:	20800044 	addi	r2,r4,1
    6660:	1085883a 	add	r2,r2,r2
    6664:	003e9006 	br	60a8 <_malloc_r+0x24c>

00006668 <memchr>:
    6668:	208000cc 	andi	r2,r4,3
    666c:	280f883a 	mov	r7,r5
    6670:	10003426 	beq	r2,zero,6744 <memchr+0xdc>
    6674:	30bfffc4 	addi	r2,r6,-1
    6678:	30001a26 	beq	r6,zero,66e4 <memchr+0x7c>
    667c:	20c00003 	ldbu	r3,0(r4)
    6680:	29803fcc 	andi	r6,r5,255
    6684:	30c0051e 	bne	r6,r3,669c <memchr+0x34>
    6688:	00001806 	br	66ec <memchr+0x84>
    668c:	10001526 	beq	r2,zero,66e4 <memchr+0x7c>
    6690:	20c00003 	ldbu	r3,0(r4)
    6694:	10bfffc4 	addi	r2,r2,-1
    6698:	30c01426 	beq	r6,r3,66ec <memchr+0x84>
    669c:	21000044 	addi	r4,r4,1
    66a0:	20c000cc 	andi	r3,r4,3
    66a4:	183ff91e 	bne	r3,zero,668c <memchr+0x24>
    66a8:	020000c4 	movi	r8,3
    66ac:	40801136 	bltu	r8,r2,66f4 <memchr+0x8c>
    66b0:	10000c26 	beq	r2,zero,66e4 <memchr+0x7c>
    66b4:	20c00003 	ldbu	r3,0(r4)
    66b8:	29403fcc 	andi	r5,r5,255
    66bc:	28c00b26 	beq	r5,r3,66ec <memchr+0x84>
    66c0:	20c00044 	addi	r3,r4,1
    66c4:	39803fcc 	andi	r6,r7,255
    66c8:	2089883a 	add	r4,r4,r2
    66cc:	00000306 	br	66dc <memchr+0x74>
    66d0:	18c00044 	addi	r3,r3,1
    66d4:	197fffc3 	ldbu	r5,-1(r3)
    66d8:	31400526 	beq	r6,r5,66f0 <memchr+0x88>
    66dc:	1805883a 	mov	r2,r3
    66e0:	20fffb1e 	bne	r4,r3,66d0 <memchr+0x68>
    66e4:	0005883a 	mov	r2,zero
    66e8:	f800283a 	ret
    66ec:	2005883a 	mov	r2,r4
    66f0:	f800283a 	ret
    66f4:	28c03fcc 	andi	r3,r5,255
    66f8:	1812923a 	slli	r9,r3,8
    66fc:	02ffbff4 	movhi	r11,65279
    6700:	02a02074 	movhi	r10,32897
    6704:	48d2b03a 	or	r9,r9,r3
    6708:	4806943a 	slli	r3,r9,16
    670c:	5affbfc4 	addi	r11,r11,-257
    6710:	52a02004 	addi	r10,r10,-32640
    6714:	48d2b03a 	or	r9,r9,r3
    6718:	20c00017 	ldw	r3,0(r4)
    671c:	48c6f03a 	xor	r3,r9,r3
    6720:	1acd883a 	add	r6,r3,r11
    6724:	00c6303a 	nor	r3,zero,r3
    6728:	30c6703a 	and	r3,r6,r3
    672c:	1a86703a 	and	r3,r3,r10
    6730:	183fe01e 	bne	r3,zero,66b4 <memchr+0x4c>
    6734:	10bfff04 	addi	r2,r2,-4
    6738:	21000104 	addi	r4,r4,4
    673c:	40bff636 	bltu	r8,r2,6718 <memchr+0xb0>
    6740:	003fdb06 	br	66b0 <memchr+0x48>
    6744:	3005883a 	mov	r2,r6
    6748:	003fd706 	br	66a8 <memchr+0x40>

0000674c <memcpy>:
    674c:	defffd04 	addi	sp,sp,-12
    6750:	dfc00215 	stw	ra,8(sp)
    6754:	dc400115 	stw	r17,4(sp)
    6758:	dc000015 	stw	r16,0(sp)
    675c:	00c003c4 	movi	r3,15
    6760:	2005883a 	mov	r2,r4
    6764:	1980452e 	bgeu	r3,r6,687c <memcpy+0x130>
    6768:	2906b03a 	or	r3,r5,r4
    676c:	18c000cc 	andi	r3,r3,3
    6770:	1800441e 	bne	r3,zero,6884 <memcpy+0x138>
    6774:	347ffc04 	addi	r17,r6,-16
    6778:	8822d13a 	srli	r17,r17,4
    677c:	28c00104 	addi	r3,r5,4
    6780:	23400104 	addi	r13,r4,4
    6784:	8820913a 	slli	r16,r17,4
    6788:	2b000204 	addi	r12,r5,8
    678c:	22c00204 	addi	r11,r4,8
    6790:	84000504 	addi	r16,r16,20
    6794:	2a800304 	addi	r10,r5,12
    6798:	22400304 	addi	r9,r4,12
    679c:	2c21883a 	add	r16,r5,r16
    67a0:	2811883a 	mov	r8,r5
    67a4:	200f883a 	mov	r7,r4
    67a8:	41000017 	ldw	r4,0(r8)
    67ac:	1fc00017 	ldw	ra,0(r3)
    67b0:	63c00017 	ldw	r15,0(r12)
    67b4:	39000015 	stw	r4,0(r7)
    67b8:	53800017 	ldw	r14,0(r10)
    67bc:	6fc00015 	stw	ra,0(r13)
    67c0:	5bc00015 	stw	r15,0(r11)
    67c4:	4b800015 	stw	r14,0(r9)
    67c8:	18c00404 	addi	r3,r3,16
    67cc:	39c00404 	addi	r7,r7,16
    67d0:	42000404 	addi	r8,r8,16
    67d4:	6b400404 	addi	r13,r13,16
    67d8:	63000404 	addi	r12,r12,16
    67dc:	5ac00404 	addi	r11,r11,16
    67e0:	52800404 	addi	r10,r10,16
    67e4:	4a400404 	addi	r9,r9,16
    67e8:	1c3fef1e 	bne	r3,r16,67a8 <memcpy+0x5c>
    67ec:	89c00044 	addi	r7,r17,1
    67f0:	380e913a 	slli	r7,r7,4
    67f4:	310003cc 	andi	r4,r6,15
    67f8:	02c000c4 	movi	r11,3
    67fc:	11c7883a 	add	r3,r2,r7
    6800:	29cb883a 	add	r5,r5,r7
    6804:	5900212e 	bgeu	r11,r4,688c <memcpy+0x140>
    6808:	1813883a 	mov	r9,r3
    680c:	2811883a 	mov	r8,r5
    6810:	200f883a 	mov	r7,r4
    6814:	42800017 	ldw	r10,0(r8)
    6818:	4a400104 	addi	r9,r9,4
    681c:	39ffff04 	addi	r7,r7,-4
    6820:	4abfff15 	stw	r10,-4(r9)
    6824:	42000104 	addi	r8,r8,4
    6828:	59fffa36 	bltu	r11,r7,6814 <memcpy+0xc8>
    682c:	213fff04 	addi	r4,r4,-4
    6830:	2008d0ba 	srli	r4,r4,2
    6834:	318000cc 	andi	r6,r6,3
    6838:	21000044 	addi	r4,r4,1
    683c:	2109883a 	add	r4,r4,r4
    6840:	2109883a 	add	r4,r4,r4
    6844:	1907883a 	add	r3,r3,r4
    6848:	290b883a 	add	r5,r5,r4
    684c:	30000626 	beq	r6,zero,6868 <memcpy+0x11c>
    6850:	198d883a 	add	r6,r3,r6
    6854:	29c00003 	ldbu	r7,0(r5)
    6858:	18c00044 	addi	r3,r3,1
    685c:	29400044 	addi	r5,r5,1
    6860:	19ffffc5 	stb	r7,-1(r3)
    6864:	19bffb1e 	bne	r3,r6,6854 <memcpy+0x108>
    6868:	dfc00217 	ldw	ra,8(sp)
    686c:	dc400117 	ldw	r17,4(sp)
    6870:	dc000017 	ldw	r16,0(sp)
    6874:	dec00304 	addi	sp,sp,12
    6878:	f800283a 	ret
    687c:	2007883a 	mov	r3,r4
    6880:	003ff206 	br	684c <memcpy+0x100>
    6884:	2007883a 	mov	r3,r4
    6888:	003ff106 	br	6850 <memcpy+0x104>
    688c:	200d883a 	mov	r6,r4
    6890:	003fee06 	br	684c <memcpy+0x100>

00006894 <memmove>:
    6894:	2005883a 	mov	r2,r4
    6898:	29000b2e 	bgeu	r5,r4,68c8 <memmove+0x34>
    689c:	298f883a 	add	r7,r5,r6
    68a0:	21c0092e 	bgeu	r4,r7,68c8 <memmove+0x34>
    68a4:	2187883a 	add	r3,r4,r6
    68a8:	198bc83a 	sub	r5,r3,r6
    68ac:	30004826 	beq	r6,zero,69d0 <memmove+0x13c>
    68b0:	39ffffc4 	addi	r7,r7,-1
    68b4:	39000003 	ldbu	r4,0(r7)
    68b8:	18ffffc4 	addi	r3,r3,-1
    68bc:	19000005 	stb	r4,0(r3)
    68c0:	28fffb1e 	bne	r5,r3,68b0 <memmove+0x1c>
    68c4:	f800283a 	ret
    68c8:	00c003c4 	movi	r3,15
    68cc:	1980412e 	bgeu	r3,r6,69d4 <memmove+0x140>
    68d0:	2886b03a 	or	r3,r5,r2
    68d4:	18c000cc 	andi	r3,r3,3
    68d8:	1800401e 	bne	r3,zero,69dc <memmove+0x148>
    68dc:	33fffc04 	addi	r15,r6,-16
    68e0:	781ed13a 	srli	r15,r15,4
    68e4:	28c00104 	addi	r3,r5,4
    68e8:	13400104 	addi	r13,r2,4
    68ec:	781c913a 	slli	r14,r15,4
    68f0:	2b000204 	addi	r12,r5,8
    68f4:	12c00204 	addi	r11,r2,8
    68f8:	73800504 	addi	r14,r14,20
    68fc:	2a800304 	addi	r10,r5,12
    6900:	12400304 	addi	r9,r2,12
    6904:	2b9d883a 	add	r14,r5,r14
    6908:	2811883a 	mov	r8,r5
    690c:	100f883a 	mov	r7,r2
    6910:	41000017 	ldw	r4,0(r8)
    6914:	39c00404 	addi	r7,r7,16
    6918:	18c00404 	addi	r3,r3,16
    691c:	393ffc15 	stw	r4,-16(r7)
    6920:	193ffc17 	ldw	r4,-16(r3)
    6924:	6b400404 	addi	r13,r13,16
    6928:	5ac00404 	addi	r11,r11,16
    692c:	693ffc15 	stw	r4,-16(r13)
    6930:	61000017 	ldw	r4,0(r12)
    6934:	4a400404 	addi	r9,r9,16
    6938:	42000404 	addi	r8,r8,16
    693c:	593ffc15 	stw	r4,-16(r11)
    6940:	51000017 	ldw	r4,0(r10)
    6944:	63000404 	addi	r12,r12,16
    6948:	52800404 	addi	r10,r10,16
    694c:	493ffc15 	stw	r4,-16(r9)
    6950:	1bbfef1e 	bne	r3,r14,6910 <memmove+0x7c>
    6954:	79000044 	addi	r4,r15,1
    6958:	2008913a 	slli	r4,r4,4
    695c:	328003cc 	andi	r10,r6,15
    6960:	02c000c4 	movi	r11,3
    6964:	1107883a 	add	r3,r2,r4
    6968:	290b883a 	add	r5,r5,r4
    696c:	5a801e2e 	bgeu	r11,r10,69e8 <memmove+0x154>
    6970:	1813883a 	mov	r9,r3
    6974:	2811883a 	mov	r8,r5
    6978:	500f883a 	mov	r7,r10
    697c:	41000017 	ldw	r4,0(r8)
    6980:	4a400104 	addi	r9,r9,4
    6984:	39ffff04 	addi	r7,r7,-4
    6988:	493fff15 	stw	r4,-4(r9)
    698c:	42000104 	addi	r8,r8,4
    6990:	59fffa36 	bltu	r11,r7,697c <memmove+0xe8>
    6994:	513fff04 	addi	r4,r10,-4
    6998:	2008d0ba 	srli	r4,r4,2
    699c:	318000cc 	andi	r6,r6,3
    69a0:	21000044 	addi	r4,r4,1
    69a4:	2109883a 	add	r4,r4,r4
    69a8:	2109883a 	add	r4,r4,r4
    69ac:	1907883a 	add	r3,r3,r4
    69b0:	290b883a 	add	r5,r5,r4
    69b4:	30000b26 	beq	r6,zero,69e4 <memmove+0x150>
    69b8:	198d883a 	add	r6,r3,r6
    69bc:	29c00003 	ldbu	r7,0(r5)
    69c0:	18c00044 	addi	r3,r3,1
    69c4:	29400044 	addi	r5,r5,1
    69c8:	19ffffc5 	stb	r7,-1(r3)
    69cc:	19bffb1e 	bne	r3,r6,69bc <memmove+0x128>
    69d0:	f800283a 	ret
    69d4:	1007883a 	mov	r3,r2
    69d8:	003ff606 	br	69b4 <memmove+0x120>
    69dc:	1007883a 	mov	r3,r2
    69e0:	003ff506 	br	69b8 <memmove+0x124>
    69e4:	f800283a 	ret
    69e8:	500d883a 	mov	r6,r10
    69ec:	003ff106 	br	69b4 <memmove+0x120>

000069f0 <memset>:
    69f0:	20c000cc 	andi	r3,r4,3
    69f4:	2005883a 	mov	r2,r4
    69f8:	18004426 	beq	r3,zero,6b0c <memset+0x11c>
    69fc:	31ffffc4 	addi	r7,r6,-1
    6a00:	30004026 	beq	r6,zero,6b04 <memset+0x114>
    6a04:	2813883a 	mov	r9,r5
    6a08:	200d883a 	mov	r6,r4
    6a0c:	2007883a 	mov	r3,r4
    6a10:	00000406 	br	6a24 <memset+0x34>
    6a14:	3a3fffc4 	addi	r8,r7,-1
    6a18:	31800044 	addi	r6,r6,1
    6a1c:	38003926 	beq	r7,zero,6b04 <memset+0x114>
    6a20:	400f883a 	mov	r7,r8
    6a24:	18c00044 	addi	r3,r3,1
    6a28:	32400005 	stb	r9,0(r6)
    6a2c:	1a0000cc 	andi	r8,r3,3
    6a30:	403ff81e 	bne	r8,zero,6a14 <memset+0x24>
    6a34:	010000c4 	movi	r4,3
    6a38:	21c02d2e 	bgeu	r4,r7,6af0 <memset+0x100>
    6a3c:	29003fcc 	andi	r4,r5,255
    6a40:	200c923a 	slli	r6,r4,8
    6a44:	3108b03a 	or	r4,r6,r4
    6a48:	200c943a 	slli	r6,r4,16
    6a4c:	218cb03a 	or	r6,r4,r6
    6a50:	010003c4 	movi	r4,15
    6a54:	21c0182e 	bgeu	r4,r7,6ab8 <memset+0xc8>
    6a58:	3b3ffc04 	addi	r12,r7,-16
    6a5c:	6018d13a 	srli	r12,r12,4
    6a60:	1a000104 	addi	r8,r3,4
    6a64:	1ac00204 	addi	r11,r3,8
    6a68:	6008913a 	slli	r4,r12,4
    6a6c:	1a800304 	addi	r10,r3,12
    6a70:	1813883a 	mov	r9,r3
    6a74:	21000504 	addi	r4,r4,20
    6a78:	1909883a 	add	r4,r3,r4
    6a7c:	49800015 	stw	r6,0(r9)
    6a80:	41800015 	stw	r6,0(r8)
    6a84:	59800015 	stw	r6,0(r11)
    6a88:	51800015 	stw	r6,0(r10)
    6a8c:	42000404 	addi	r8,r8,16
    6a90:	4a400404 	addi	r9,r9,16
    6a94:	5ac00404 	addi	r11,r11,16
    6a98:	52800404 	addi	r10,r10,16
    6a9c:	413ff71e 	bne	r8,r4,6a7c <memset+0x8c>
    6aa0:	63000044 	addi	r12,r12,1
    6aa4:	6018913a 	slli	r12,r12,4
    6aa8:	39c003cc 	andi	r7,r7,15
    6aac:	010000c4 	movi	r4,3
    6ab0:	1b07883a 	add	r3,r3,r12
    6ab4:	21c00e2e 	bgeu	r4,r7,6af0 <memset+0x100>
    6ab8:	1813883a 	mov	r9,r3
    6abc:	3811883a 	mov	r8,r7
    6ac0:	010000c4 	movi	r4,3
    6ac4:	49800015 	stw	r6,0(r9)
    6ac8:	423fff04 	addi	r8,r8,-4
    6acc:	4a400104 	addi	r9,r9,4
    6ad0:	223ffc36 	bltu	r4,r8,6ac4 <memset+0xd4>
    6ad4:	393fff04 	addi	r4,r7,-4
    6ad8:	2008d0ba 	srli	r4,r4,2
    6adc:	39c000cc 	andi	r7,r7,3
    6ae0:	21000044 	addi	r4,r4,1
    6ae4:	2109883a 	add	r4,r4,r4
    6ae8:	2109883a 	add	r4,r4,r4
    6aec:	1907883a 	add	r3,r3,r4
    6af0:	38000526 	beq	r7,zero,6b08 <memset+0x118>
    6af4:	19cf883a 	add	r7,r3,r7
    6af8:	19400005 	stb	r5,0(r3)
    6afc:	18c00044 	addi	r3,r3,1
    6b00:	38fffd1e 	bne	r7,r3,6af8 <memset+0x108>
    6b04:	f800283a 	ret
    6b08:	f800283a 	ret
    6b0c:	2007883a 	mov	r3,r4
    6b10:	300f883a 	mov	r7,r6
    6b14:	003fc706 	br	6a34 <memset+0x44>

00006b18 <_Balloc>:
    6b18:	20801317 	ldw	r2,76(r4)
    6b1c:	defffc04 	addi	sp,sp,-16
    6b20:	dc400115 	stw	r17,4(sp)
    6b24:	dc000015 	stw	r16,0(sp)
    6b28:	dfc00315 	stw	ra,12(sp)
    6b2c:	dc800215 	stw	r18,8(sp)
    6b30:	2023883a 	mov	r17,r4
    6b34:	2821883a 	mov	r16,r5
    6b38:	10000f26 	beq	r2,zero,6b78 <_Balloc+0x60>
    6b3c:	8407883a 	add	r3,r16,r16
    6b40:	18c7883a 	add	r3,r3,r3
    6b44:	10c7883a 	add	r3,r2,r3
    6b48:	18800017 	ldw	r2,0(r3)
    6b4c:	10001126 	beq	r2,zero,6b94 <_Balloc+0x7c>
    6b50:	11000017 	ldw	r4,0(r2)
    6b54:	19000015 	stw	r4,0(r3)
    6b58:	10000415 	stw	zero,16(r2)
    6b5c:	10000315 	stw	zero,12(r2)
    6b60:	dfc00317 	ldw	ra,12(sp)
    6b64:	dc800217 	ldw	r18,8(sp)
    6b68:	dc400117 	ldw	r17,4(sp)
    6b6c:	dc000017 	ldw	r16,0(sp)
    6b70:	dec00404 	addi	sp,sp,16
    6b74:	f800283a 	ret
    6b78:	01800844 	movi	r6,33
    6b7c:	01400104 	movi	r5,4
    6b80:	0009a540 	call	9a54 <_calloc_r>
    6b84:	88801315 	stw	r2,76(r17)
    6b88:	103fec1e 	bne	r2,zero,6b3c <_Balloc+0x24>
    6b8c:	0005883a 	mov	r2,zero
    6b90:	003ff306 	br	6b60 <_Balloc+0x48>
    6b94:	01400044 	movi	r5,1
    6b98:	2c24983a 	sll	r18,r5,r16
    6b9c:	8809883a 	mov	r4,r17
    6ba0:	91800144 	addi	r6,r18,5
    6ba4:	318d883a 	add	r6,r6,r6
    6ba8:	318d883a 	add	r6,r6,r6
    6bac:	0009a540 	call	9a54 <_calloc_r>
    6bb0:	103ff626 	beq	r2,zero,6b8c <_Balloc+0x74>
    6bb4:	14000115 	stw	r16,4(r2)
    6bb8:	14800215 	stw	r18,8(r2)
    6bbc:	003fe606 	br	6b58 <_Balloc+0x40>

00006bc0 <_Bfree>:
    6bc0:	28000826 	beq	r5,zero,6be4 <_Bfree+0x24>
    6bc4:	28c00117 	ldw	r3,4(r5)
    6bc8:	20801317 	ldw	r2,76(r4)
    6bcc:	18c7883a 	add	r3,r3,r3
    6bd0:	18c7883a 	add	r3,r3,r3
    6bd4:	10c5883a 	add	r2,r2,r3
    6bd8:	10c00017 	ldw	r3,0(r2)
    6bdc:	28c00015 	stw	r3,0(r5)
    6be0:	11400015 	stw	r5,0(r2)
    6be4:	f800283a 	ret

00006be8 <__multadd>:
    6be8:	defffa04 	addi	sp,sp,-24
    6bec:	dc800315 	stw	r18,12(sp)
    6bf0:	dc400215 	stw	r17,8(sp)
    6bf4:	dc000115 	stw	r16,4(sp)
    6bf8:	2823883a 	mov	r17,r5
    6bfc:	2c000417 	ldw	r16,16(r5)
    6c00:	dfc00515 	stw	ra,20(sp)
    6c04:	dcc00415 	stw	r19,16(sp)
    6c08:	2025883a 	mov	r18,r4
    6c0c:	29400504 	addi	r5,r5,20
    6c10:	0011883a 	mov	r8,zero
    6c14:	28c00017 	ldw	r3,0(r5)
    6c18:	29400104 	addi	r5,r5,4
    6c1c:	42000044 	addi	r8,r8,1
    6c20:	18bfffcc 	andi	r2,r3,65535
    6c24:	1185383a 	mul	r2,r2,r6
    6c28:	1806d43a 	srli	r3,r3,16
    6c2c:	11cf883a 	add	r7,r2,r7
    6c30:	3808d43a 	srli	r4,r7,16
    6c34:	1987383a 	mul	r3,r3,r6
    6c38:	38bfffcc 	andi	r2,r7,65535
    6c3c:	1907883a 	add	r3,r3,r4
    6c40:	1808943a 	slli	r4,r3,16
    6c44:	180ed43a 	srli	r7,r3,16
    6c48:	2085883a 	add	r2,r4,r2
    6c4c:	28bfff15 	stw	r2,-4(r5)
    6c50:	443ff016 	blt	r8,r16,6c14 <__multadd+0x2c>
    6c54:	38000926 	beq	r7,zero,6c7c <__multadd+0x94>
    6c58:	88800217 	ldw	r2,8(r17)
    6c5c:	80800f0e 	bge	r16,r2,6c9c <__multadd+0xb4>
    6c60:	80800144 	addi	r2,r16,5
    6c64:	1085883a 	add	r2,r2,r2
    6c68:	1085883a 	add	r2,r2,r2
    6c6c:	8885883a 	add	r2,r17,r2
    6c70:	11c00015 	stw	r7,0(r2)
    6c74:	84000044 	addi	r16,r16,1
    6c78:	8c000415 	stw	r16,16(r17)
    6c7c:	8805883a 	mov	r2,r17
    6c80:	dfc00517 	ldw	ra,20(sp)
    6c84:	dcc00417 	ldw	r19,16(sp)
    6c88:	dc800317 	ldw	r18,12(sp)
    6c8c:	dc400217 	ldw	r17,8(sp)
    6c90:	dc000117 	ldw	r16,4(sp)
    6c94:	dec00604 	addi	sp,sp,24
    6c98:	f800283a 	ret
    6c9c:	89400117 	ldw	r5,4(r17)
    6ca0:	9009883a 	mov	r4,r18
    6ca4:	d9c00015 	stw	r7,0(sp)
    6ca8:	29400044 	addi	r5,r5,1
    6cac:	0006b180 	call	6b18 <_Balloc>
    6cb0:	89800417 	ldw	r6,16(r17)
    6cb4:	89400304 	addi	r5,r17,12
    6cb8:	11000304 	addi	r4,r2,12
    6cbc:	31800084 	addi	r6,r6,2
    6cc0:	318d883a 	add	r6,r6,r6
    6cc4:	318d883a 	add	r6,r6,r6
    6cc8:	1027883a 	mov	r19,r2
    6ccc:	000674c0 	call	674c <memcpy>
    6cd0:	d9c00017 	ldw	r7,0(sp)
    6cd4:	88000a26 	beq	r17,zero,6d00 <__multadd+0x118>
    6cd8:	88c00117 	ldw	r3,4(r17)
    6cdc:	90801317 	ldw	r2,76(r18)
    6ce0:	18c7883a 	add	r3,r3,r3
    6ce4:	18c7883a 	add	r3,r3,r3
    6ce8:	10c5883a 	add	r2,r2,r3
    6cec:	10c00017 	ldw	r3,0(r2)
    6cf0:	88c00015 	stw	r3,0(r17)
    6cf4:	14400015 	stw	r17,0(r2)
    6cf8:	9823883a 	mov	r17,r19
    6cfc:	003fd806 	br	6c60 <__multadd+0x78>
    6d00:	9823883a 	mov	r17,r19
    6d04:	003fd606 	br	6c60 <__multadd+0x78>

00006d08 <__s2b>:
    6d08:	defff904 	addi	sp,sp,-28
    6d0c:	dc400115 	stw	r17,4(sp)
    6d10:	dc000015 	stw	r16,0(sp)
    6d14:	2023883a 	mov	r17,r4
    6d18:	2821883a 	mov	r16,r5
    6d1c:	39000204 	addi	r4,r7,8
    6d20:	01400244 	movi	r5,9
    6d24:	dcc00315 	stw	r19,12(sp)
    6d28:	dc800215 	stw	r18,8(sp)
    6d2c:	dfc00615 	stw	ra,24(sp)
    6d30:	dd400515 	stw	r21,20(sp)
    6d34:	dd000415 	stw	r20,16(sp)
    6d38:	3825883a 	mov	r18,r7
    6d3c:	3027883a 	mov	r19,r6
    6d40:	000ad840 	call	ad84 <__divsi3>
    6d44:	00c00044 	movi	r3,1
    6d48:	000b883a 	mov	r5,zero
    6d4c:	1880030e 	bge	r3,r2,6d5c <__s2b+0x54>
    6d50:	18c7883a 	add	r3,r3,r3
    6d54:	29400044 	addi	r5,r5,1
    6d58:	18bffd16 	blt	r3,r2,6d50 <__s2b+0x48>
    6d5c:	8809883a 	mov	r4,r17
    6d60:	0006b180 	call	6b18 <_Balloc>
    6d64:	d8c00717 	ldw	r3,28(sp)
    6d68:	10c00515 	stw	r3,20(r2)
    6d6c:	00c00044 	movi	r3,1
    6d70:	10c00415 	stw	r3,16(r2)
    6d74:	00c00244 	movi	r3,9
    6d78:	1cc0210e 	bge	r3,r19,6e00 <__s2b+0xf8>
    6d7c:	80eb883a 	add	r21,r16,r3
    6d80:	a829883a 	mov	r20,r21
    6d84:	84e1883a 	add	r16,r16,r19
    6d88:	a1c00007 	ldb	r7,0(r20)
    6d8c:	01800284 	movi	r6,10
    6d90:	a5000044 	addi	r20,r20,1
    6d94:	100b883a 	mov	r5,r2
    6d98:	39fff404 	addi	r7,r7,-48
    6d9c:	8809883a 	mov	r4,r17
    6da0:	0006be80 	call	6be8 <__multadd>
    6da4:	a43ff81e 	bne	r20,r16,6d88 <__s2b+0x80>
    6da8:	ace1883a 	add	r16,r21,r19
    6dac:	843ffe04 	addi	r16,r16,-8
    6db0:	9c800a0e 	bge	r19,r18,6ddc <__s2b+0xd4>
    6db4:	94e5c83a 	sub	r18,r18,r19
    6db8:	84a5883a 	add	r18,r16,r18
    6dbc:	81c00007 	ldb	r7,0(r16)
    6dc0:	01800284 	movi	r6,10
    6dc4:	84000044 	addi	r16,r16,1
    6dc8:	100b883a 	mov	r5,r2
    6dcc:	39fff404 	addi	r7,r7,-48
    6dd0:	8809883a 	mov	r4,r17
    6dd4:	0006be80 	call	6be8 <__multadd>
    6dd8:	84bff81e 	bne	r16,r18,6dbc <__s2b+0xb4>
    6ddc:	dfc00617 	ldw	ra,24(sp)
    6de0:	dd400517 	ldw	r21,20(sp)
    6de4:	dd000417 	ldw	r20,16(sp)
    6de8:	dcc00317 	ldw	r19,12(sp)
    6dec:	dc800217 	ldw	r18,8(sp)
    6df0:	dc400117 	ldw	r17,4(sp)
    6df4:	dc000017 	ldw	r16,0(sp)
    6df8:	dec00704 	addi	sp,sp,28
    6dfc:	f800283a 	ret
    6e00:	84000284 	addi	r16,r16,10
    6e04:	1827883a 	mov	r19,r3
    6e08:	003fe906 	br	6db0 <__s2b+0xa8>

00006e0c <__hi0bits>:
    6e0c:	20bfffec 	andhi	r2,r4,65535
    6e10:	1000141e 	bne	r2,zero,6e64 <__hi0bits+0x58>
    6e14:	2008943a 	slli	r4,r4,16
    6e18:	00800404 	movi	r2,16
    6e1c:	20ffc02c 	andhi	r3,r4,65280
    6e20:	1800021e 	bne	r3,zero,6e2c <__hi0bits+0x20>
    6e24:	2008923a 	slli	r4,r4,8
    6e28:	10800204 	addi	r2,r2,8
    6e2c:	20fc002c 	andhi	r3,r4,61440
    6e30:	1800021e 	bne	r3,zero,6e3c <__hi0bits+0x30>
    6e34:	2008913a 	slli	r4,r4,4
    6e38:	10800104 	addi	r2,r2,4
    6e3c:	20f0002c 	andhi	r3,r4,49152
    6e40:	1800031e 	bne	r3,zero,6e50 <__hi0bits+0x44>
    6e44:	2109883a 	add	r4,r4,r4
    6e48:	10800084 	addi	r2,r2,2
    6e4c:	2109883a 	add	r4,r4,r4
    6e50:	20000316 	blt	r4,zero,6e60 <__hi0bits+0x54>
    6e54:	2110002c 	andhi	r4,r4,16384
    6e58:	2000041e 	bne	r4,zero,6e6c <__hi0bits+0x60>
    6e5c:	00800804 	movi	r2,32
    6e60:	f800283a 	ret
    6e64:	0005883a 	mov	r2,zero
    6e68:	003fec06 	br	6e1c <__hi0bits+0x10>
    6e6c:	10800044 	addi	r2,r2,1
    6e70:	f800283a 	ret

00006e74 <__lo0bits>:
    6e74:	20c00017 	ldw	r3,0(r4)
    6e78:	188001cc 	andi	r2,r3,7
    6e7c:	10000826 	beq	r2,zero,6ea0 <__lo0bits+0x2c>
    6e80:	1880004c 	andi	r2,r3,1
    6e84:	1000211e 	bne	r2,zero,6f0c <__lo0bits+0x98>
    6e88:	1880008c 	andi	r2,r3,2
    6e8c:	1000211e 	bne	r2,zero,6f14 <__lo0bits+0xa0>
    6e90:	1806d0ba 	srli	r3,r3,2
    6e94:	00800084 	movi	r2,2
    6e98:	20c00015 	stw	r3,0(r4)
    6e9c:	f800283a 	ret
    6ea0:	18bfffcc 	andi	r2,r3,65535
    6ea4:	10001326 	beq	r2,zero,6ef4 <__lo0bits+0x80>
    6ea8:	0005883a 	mov	r2,zero
    6eac:	19403fcc 	andi	r5,r3,255
    6eb0:	2800021e 	bne	r5,zero,6ebc <__lo0bits+0x48>
    6eb4:	1806d23a 	srli	r3,r3,8
    6eb8:	10800204 	addi	r2,r2,8
    6ebc:	194003cc 	andi	r5,r3,15
    6ec0:	2800021e 	bne	r5,zero,6ecc <__lo0bits+0x58>
    6ec4:	1806d13a 	srli	r3,r3,4
    6ec8:	10800104 	addi	r2,r2,4
    6ecc:	194000cc 	andi	r5,r3,3
    6ed0:	2800021e 	bne	r5,zero,6edc <__lo0bits+0x68>
    6ed4:	1806d0ba 	srli	r3,r3,2
    6ed8:	10800084 	addi	r2,r2,2
    6edc:	1940004c 	andi	r5,r3,1
    6ee0:	2800081e 	bne	r5,zero,6f04 <__lo0bits+0x90>
    6ee4:	1806d07a 	srli	r3,r3,1
    6ee8:	1800051e 	bne	r3,zero,6f00 <__lo0bits+0x8c>
    6eec:	00800804 	movi	r2,32
    6ef0:	f800283a 	ret
    6ef4:	1806d43a 	srli	r3,r3,16
    6ef8:	00800404 	movi	r2,16
    6efc:	003feb06 	br	6eac <__lo0bits+0x38>
    6f00:	10800044 	addi	r2,r2,1
    6f04:	20c00015 	stw	r3,0(r4)
    6f08:	f800283a 	ret
    6f0c:	0005883a 	mov	r2,zero
    6f10:	f800283a 	ret
    6f14:	1806d07a 	srli	r3,r3,1
    6f18:	00800044 	movi	r2,1
    6f1c:	20c00015 	stw	r3,0(r4)
    6f20:	f800283a 	ret

00006f24 <__i2b>:
    6f24:	defffd04 	addi	sp,sp,-12
    6f28:	dc000015 	stw	r16,0(sp)
    6f2c:	04000044 	movi	r16,1
    6f30:	dc400115 	stw	r17,4(sp)
    6f34:	2823883a 	mov	r17,r5
    6f38:	800b883a 	mov	r5,r16
    6f3c:	dfc00215 	stw	ra,8(sp)
    6f40:	0006b180 	call	6b18 <_Balloc>
    6f44:	14400515 	stw	r17,20(r2)
    6f48:	14000415 	stw	r16,16(r2)
    6f4c:	dfc00217 	ldw	ra,8(sp)
    6f50:	dc400117 	ldw	r17,4(sp)
    6f54:	dc000017 	ldw	r16,0(sp)
    6f58:	dec00304 	addi	sp,sp,12
    6f5c:	f800283a 	ret

00006f60 <__multiply>:
    6f60:	defffa04 	addi	sp,sp,-24
    6f64:	dcc00315 	stw	r19,12(sp)
    6f68:	dc800215 	stw	r18,8(sp)
    6f6c:	34c00417 	ldw	r19,16(r6)
    6f70:	2c800417 	ldw	r18,16(r5)
    6f74:	dd000415 	stw	r20,16(sp)
    6f78:	dc400115 	stw	r17,4(sp)
    6f7c:	dfc00515 	stw	ra,20(sp)
    6f80:	dc000015 	stw	r16,0(sp)
    6f84:	2829883a 	mov	r20,r5
    6f88:	3023883a 	mov	r17,r6
    6f8c:	94c0050e 	bge	r18,r19,6fa4 <__multiply+0x44>
    6f90:	9007883a 	mov	r3,r18
    6f94:	3029883a 	mov	r20,r6
    6f98:	9825883a 	mov	r18,r19
    6f9c:	2823883a 	mov	r17,r5
    6fa0:	1827883a 	mov	r19,r3
    6fa4:	a0800217 	ldw	r2,8(r20)
    6fa8:	94e1883a 	add	r16,r18,r19
    6fac:	a1400117 	ldw	r5,4(r20)
    6fb0:	1400010e 	bge	r2,r16,6fb8 <__multiply+0x58>
    6fb4:	29400044 	addi	r5,r5,1
    6fb8:	0006b180 	call	6b18 <_Balloc>
    6fbc:	8415883a 	add	r10,r16,r16
    6fc0:	12c00504 	addi	r11,r2,20
    6fc4:	5295883a 	add	r10,r10,r10
    6fc8:	5a95883a 	add	r10,r11,r10
    6fcc:	5807883a 	mov	r3,r11
    6fd0:	5a80032e 	bgeu	r11,r10,6fe0 <__multiply+0x80>
    6fd4:	18000015 	stw	zero,0(r3)
    6fd8:	18c00104 	addi	r3,r3,4
    6fdc:	1abffd36 	bltu	r3,r10,6fd4 <__multiply+0x74>
    6fe0:	9ce7883a 	add	r19,r19,r19
    6fe4:	94a5883a 	add	r18,r18,r18
    6fe8:	89800504 	addi	r6,r17,20
    6fec:	9ce7883a 	add	r19,r19,r19
    6ff0:	a3400504 	addi	r13,r20,20
    6ff4:	94a5883a 	add	r18,r18,r18
    6ff8:	34d9883a 	add	r12,r6,r19
    6ffc:	6c93883a 	add	r9,r13,r18
    7000:	3300422e 	bgeu	r6,r12,710c <__multiply+0x1ac>
    7004:	37c00017 	ldw	ra,0(r6)
    7008:	fbffffcc 	andi	r15,ra,65535
    700c:	78001b26 	beq	r15,zero,707c <__multiply+0x11c>
    7010:	5811883a 	mov	r8,r11
    7014:	681d883a 	mov	r14,r13
    7018:	000f883a 	mov	r7,zero
    701c:	71000017 	ldw	r4,0(r14)
    7020:	40c00017 	ldw	r3,0(r8)
    7024:	73800104 	addi	r14,r14,4
    7028:	217fffcc 	andi	r5,r4,65535
    702c:	2bcb383a 	mul	r5,r5,r15
    7030:	2008d43a 	srli	r4,r4,16
    7034:	1c7fffcc 	andi	r17,r3,65535
    7038:	2c4b883a 	add	r5,r5,r17
    703c:	29cb883a 	add	r5,r5,r7
    7040:	23c9383a 	mul	r4,r4,r15
    7044:	1806d43a 	srli	r3,r3,16
    7048:	280ed43a 	srli	r7,r5,16
    704c:	297fffcc 	andi	r5,r5,65535
    7050:	20c7883a 	add	r3,r4,r3
    7054:	19c7883a 	add	r3,r3,r7
    7058:	1808943a 	slli	r4,r3,16
    705c:	4023883a 	mov	r17,r8
    7060:	180ed43a 	srli	r7,r3,16
    7064:	214ab03a 	or	r5,r4,r5
    7068:	41400015 	stw	r5,0(r8)
    706c:	42000104 	addi	r8,r8,4
    7070:	727fea36 	bltu	r14,r9,701c <__multiply+0xbc>
    7074:	89c00115 	stw	r7,4(r17)
    7078:	37c00017 	ldw	ra,0(r6)
    707c:	f83ed43a 	srli	ra,ra,16
    7080:	f8001f26 	beq	ra,zero,7100 <__multiply+0x1a0>
    7084:	58c00017 	ldw	r3,0(r11)
    7088:	681d883a 	mov	r14,r13
    708c:	581f883a 	mov	r15,r11
    7090:	1811883a 	mov	r8,r3
    7094:	5825883a 	mov	r18,r11
    7098:	000f883a 	mov	r7,zero
    709c:	00000106 	br	70a4 <__multiply+0x144>
    70a0:	8825883a 	mov	r18,r17
    70a4:	7140000b 	ldhu	r5,0(r14)
    70a8:	4010d43a 	srli	r8,r8,16
    70ac:	193fffcc 	andi	r4,r3,65535
    70b0:	2fcb383a 	mul	r5,r5,ra
    70b4:	7bc00104 	addi	r15,r15,4
    70b8:	73800104 	addi	r14,r14,4
    70bc:	2a0b883a 	add	r5,r5,r8
    70c0:	29cb883a 	add	r5,r5,r7
    70c4:	2806943a 	slli	r3,r5,16
    70c8:	94400104 	addi	r17,r18,4
    70cc:	280ad43a 	srli	r5,r5,16
    70d0:	1908b03a 	or	r4,r3,r4
    70d4:	793fff15 	stw	r4,-4(r15)
    70d8:	70ffff17 	ldw	r3,-4(r14)
    70dc:	8a000017 	ldw	r8,0(r17)
    70e0:	1806d43a 	srli	r3,r3,16
    70e4:	413fffcc 	andi	r4,r8,65535
    70e8:	1fc7383a 	mul	r3,r3,ra
    70ec:	1907883a 	add	r3,r3,r4
    70f0:	1947883a 	add	r3,r3,r5
    70f4:	180ed43a 	srli	r7,r3,16
    70f8:	727fe936 	bltu	r14,r9,70a0 <__multiply+0x140>
    70fc:	90c00115 	stw	r3,4(r18)
    7100:	31800104 	addi	r6,r6,4
    7104:	5ac00104 	addi	r11,r11,4
    7108:	333fbe36 	bltu	r6,r12,7004 <__multiply+0xa4>
    710c:	0400090e 	bge	zero,r16,7134 <__multiply+0x1d4>
    7110:	50ffff17 	ldw	r3,-4(r10)
    7114:	52bfff04 	addi	r10,r10,-4
    7118:	18000326 	beq	r3,zero,7128 <__multiply+0x1c8>
    711c:	00000506 	br	7134 <__multiply+0x1d4>
    7120:	50c00017 	ldw	r3,0(r10)
    7124:	1800031e 	bne	r3,zero,7134 <__multiply+0x1d4>
    7128:	843fffc4 	addi	r16,r16,-1
    712c:	52bfff04 	addi	r10,r10,-4
    7130:	803ffb1e 	bne	r16,zero,7120 <__multiply+0x1c0>
    7134:	14000415 	stw	r16,16(r2)
    7138:	dfc00517 	ldw	ra,20(sp)
    713c:	dd000417 	ldw	r20,16(sp)
    7140:	dcc00317 	ldw	r19,12(sp)
    7144:	dc800217 	ldw	r18,8(sp)
    7148:	dc400117 	ldw	r17,4(sp)
    714c:	dc000017 	ldw	r16,0(sp)
    7150:	dec00604 	addi	sp,sp,24
    7154:	f800283a 	ret

00007158 <__pow5mult>:
    7158:	defffa04 	addi	sp,sp,-24
    715c:	dcc00315 	stw	r19,12(sp)
    7160:	dc000015 	stw	r16,0(sp)
    7164:	dfc00515 	stw	ra,20(sp)
    7168:	dd000415 	stw	r20,16(sp)
    716c:	dc800215 	stw	r18,8(sp)
    7170:	dc400115 	stw	r17,4(sp)
    7174:	308000cc 	andi	r2,r6,3
    7178:	3021883a 	mov	r16,r6
    717c:	2027883a 	mov	r19,r4
    7180:	10002f1e 	bne	r2,zero,7240 <__pow5mult+0xe8>
    7184:	2825883a 	mov	r18,r5
    7188:	8021d0ba 	srai	r16,r16,2
    718c:	80001a26 	beq	r16,zero,71f8 <__pow5mult+0xa0>
    7190:	9c401217 	ldw	r17,72(r19)
    7194:	8800061e 	bne	r17,zero,71b0 <__pow5mult+0x58>
    7198:	00003406 	br	726c <__pow5mult+0x114>
    719c:	8021d07a 	srai	r16,r16,1
    71a0:	80001526 	beq	r16,zero,71f8 <__pow5mult+0xa0>
    71a4:	88800017 	ldw	r2,0(r17)
    71a8:	10001c26 	beq	r2,zero,721c <__pow5mult+0xc4>
    71ac:	1023883a 	mov	r17,r2
    71b0:	8080004c 	andi	r2,r16,1
    71b4:	103ff926 	beq	r2,zero,719c <__pow5mult+0x44>
    71b8:	880d883a 	mov	r6,r17
    71bc:	900b883a 	mov	r5,r18
    71c0:	9809883a 	mov	r4,r19
    71c4:	0006f600 	call	6f60 <__multiply>
    71c8:	90001b26 	beq	r18,zero,7238 <__pow5mult+0xe0>
    71cc:	91000117 	ldw	r4,4(r18)
    71d0:	98c01317 	ldw	r3,76(r19)
    71d4:	8021d07a 	srai	r16,r16,1
    71d8:	2109883a 	add	r4,r4,r4
    71dc:	2109883a 	add	r4,r4,r4
    71e0:	1907883a 	add	r3,r3,r4
    71e4:	19000017 	ldw	r4,0(r3)
    71e8:	91000015 	stw	r4,0(r18)
    71ec:	1c800015 	stw	r18,0(r3)
    71f0:	1025883a 	mov	r18,r2
    71f4:	803feb1e 	bne	r16,zero,71a4 <__pow5mult+0x4c>
    71f8:	9005883a 	mov	r2,r18
    71fc:	dfc00517 	ldw	ra,20(sp)
    7200:	dd000417 	ldw	r20,16(sp)
    7204:	dcc00317 	ldw	r19,12(sp)
    7208:	dc800217 	ldw	r18,8(sp)
    720c:	dc400117 	ldw	r17,4(sp)
    7210:	dc000017 	ldw	r16,0(sp)
    7214:	dec00604 	addi	sp,sp,24
    7218:	f800283a 	ret
    721c:	880d883a 	mov	r6,r17
    7220:	880b883a 	mov	r5,r17
    7224:	9809883a 	mov	r4,r19
    7228:	0006f600 	call	6f60 <__multiply>
    722c:	88800015 	stw	r2,0(r17)
    7230:	10000015 	stw	zero,0(r2)
    7234:	003fdd06 	br	71ac <__pow5mult+0x54>
    7238:	1025883a 	mov	r18,r2
    723c:	003fd706 	br	719c <__pow5mult+0x44>
    7240:	10bfffc4 	addi	r2,r2,-1
    7244:	1085883a 	add	r2,r2,r2
    7248:	00c000b4 	movhi	r3,2
    724c:	18e76f04 	addi	r3,r3,-25156
    7250:	1085883a 	add	r2,r2,r2
    7254:	1885883a 	add	r2,r3,r2
    7258:	11800017 	ldw	r6,0(r2)
    725c:	000f883a 	mov	r7,zero
    7260:	0006be80 	call	6be8 <__multadd>
    7264:	1025883a 	mov	r18,r2
    7268:	003fc706 	br	7188 <__pow5mult+0x30>
    726c:	05000044 	movi	r20,1
    7270:	a00b883a 	mov	r5,r20
    7274:	9809883a 	mov	r4,r19
    7278:	0006b180 	call	6b18 <_Balloc>
    727c:	1023883a 	mov	r17,r2
    7280:	00809c44 	movi	r2,625
    7284:	88800515 	stw	r2,20(r17)
    7288:	8d000415 	stw	r20,16(r17)
    728c:	9c401215 	stw	r17,72(r19)
    7290:	88000015 	stw	zero,0(r17)
    7294:	003fc606 	br	71b0 <__pow5mult+0x58>

00007298 <__lshift>:
    7298:	defff904 	addi	sp,sp,-28
    729c:	dd400515 	stw	r21,20(sp)
    72a0:	dcc00315 	stw	r19,12(sp)
    72a4:	302bd17a 	srai	r21,r6,5
    72a8:	2cc00417 	ldw	r19,16(r5)
    72ac:	28800217 	ldw	r2,8(r5)
    72b0:	dd000415 	stw	r20,16(sp)
    72b4:	ace7883a 	add	r19,r21,r19
    72b8:	dc800215 	stw	r18,8(sp)
    72bc:	dc400115 	stw	r17,4(sp)
    72c0:	dc000015 	stw	r16,0(sp)
    72c4:	dfc00615 	stw	ra,24(sp)
    72c8:	9c000044 	addi	r16,r19,1
    72cc:	2823883a 	mov	r17,r5
    72d0:	3029883a 	mov	r20,r6
    72d4:	2025883a 	mov	r18,r4
    72d8:	29400117 	ldw	r5,4(r5)
    72dc:	1400030e 	bge	r2,r16,72ec <__lshift+0x54>
    72e0:	1085883a 	add	r2,r2,r2
    72e4:	29400044 	addi	r5,r5,1
    72e8:	143ffd16 	blt	r2,r16,72e0 <__lshift+0x48>
    72ec:	9009883a 	mov	r4,r18
    72f0:	0006b180 	call	6b18 <_Balloc>
    72f4:	10c00504 	addi	r3,r2,20
    72f8:	0540070e 	bge	zero,r21,7318 <__lshift+0x80>
    72fc:	ad6b883a 	add	r21,r21,r21
    7300:	ad6b883a 	add	r21,r21,r21
    7304:	1809883a 	mov	r4,r3
    7308:	1d47883a 	add	r3,r3,r21
    730c:	20000015 	stw	zero,0(r4)
    7310:	21000104 	addi	r4,r4,4
    7314:	193ffd1e 	bne	r3,r4,730c <__lshift+0x74>
    7318:	8a000417 	ldw	r8,16(r17)
    731c:	89000504 	addi	r4,r17,20
    7320:	a18007cc 	andi	r6,r20,31
    7324:	4211883a 	add	r8,r8,r8
    7328:	4211883a 	add	r8,r8,r8
    732c:	2211883a 	add	r8,r4,r8
    7330:	30002326 	beq	r6,zero,73c0 <__lshift+0x128>
    7334:	02400804 	movi	r9,32
    7338:	4993c83a 	sub	r9,r9,r6
    733c:	000b883a 	mov	r5,zero
    7340:	21c00017 	ldw	r7,0(r4)
    7344:	1815883a 	mov	r10,r3
    7348:	18c00104 	addi	r3,r3,4
    734c:	398e983a 	sll	r7,r7,r6
    7350:	21000104 	addi	r4,r4,4
    7354:	394ab03a 	or	r5,r7,r5
    7358:	197fff15 	stw	r5,-4(r3)
    735c:	217fff17 	ldw	r5,-4(r4)
    7360:	2a4ad83a 	srl	r5,r5,r9
    7364:	223ff636 	bltu	r4,r8,7340 <__lshift+0xa8>
    7368:	51400115 	stw	r5,4(r10)
    736c:	28001a1e 	bne	r5,zero,73d8 <__lshift+0x140>
    7370:	843fffc4 	addi	r16,r16,-1
    7374:	14000415 	stw	r16,16(r2)
    7378:	88000826 	beq	r17,zero,739c <__lshift+0x104>
    737c:	89000117 	ldw	r4,4(r17)
    7380:	90c01317 	ldw	r3,76(r18)
    7384:	2109883a 	add	r4,r4,r4
    7388:	2109883a 	add	r4,r4,r4
    738c:	1907883a 	add	r3,r3,r4
    7390:	19000017 	ldw	r4,0(r3)
    7394:	89000015 	stw	r4,0(r17)
    7398:	1c400015 	stw	r17,0(r3)
    739c:	dfc00617 	ldw	ra,24(sp)
    73a0:	dd400517 	ldw	r21,20(sp)
    73a4:	dd000417 	ldw	r20,16(sp)
    73a8:	dcc00317 	ldw	r19,12(sp)
    73ac:	dc800217 	ldw	r18,8(sp)
    73b0:	dc400117 	ldw	r17,4(sp)
    73b4:	dc000017 	ldw	r16,0(sp)
    73b8:	dec00704 	addi	sp,sp,28
    73bc:	f800283a 	ret
    73c0:	21400017 	ldw	r5,0(r4)
    73c4:	18c00104 	addi	r3,r3,4
    73c8:	21000104 	addi	r4,r4,4
    73cc:	197fff15 	stw	r5,-4(r3)
    73d0:	223ffb36 	bltu	r4,r8,73c0 <__lshift+0x128>
    73d4:	003fe606 	br	7370 <__lshift+0xd8>
    73d8:	9c000084 	addi	r16,r19,2
    73dc:	003fe406 	br	7370 <__lshift+0xd8>

000073e0 <__mcmp>:
    73e0:	20800417 	ldw	r2,16(r4)
    73e4:	28c00417 	ldw	r3,16(r5)
    73e8:	10c5c83a 	sub	r2,r2,r3
    73ec:	1000111e 	bne	r2,zero,7434 <__mcmp+0x54>
    73f0:	18c7883a 	add	r3,r3,r3
    73f4:	18c7883a 	add	r3,r3,r3
    73f8:	21000504 	addi	r4,r4,20
    73fc:	29400504 	addi	r5,r5,20
    7400:	20c5883a 	add	r2,r4,r3
    7404:	28cb883a 	add	r5,r5,r3
    7408:	00000106 	br	7410 <__mcmp+0x30>
    740c:	20800a2e 	bgeu	r4,r2,7438 <__mcmp+0x58>
    7410:	10bfff04 	addi	r2,r2,-4
    7414:	297fff04 	addi	r5,r5,-4
    7418:	11800017 	ldw	r6,0(r2)
    741c:	28c00017 	ldw	r3,0(r5)
    7420:	30fffa26 	beq	r6,r3,740c <__mcmp+0x2c>
    7424:	30c00236 	bltu	r6,r3,7430 <__mcmp+0x50>
    7428:	00800044 	movi	r2,1
    742c:	f800283a 	ret
    7430:	00bfffc4 	movi	r2,-1
    7434:	f800283a 	ret
    7438:	0005883a 	mov	r2,zero
    743c:	f800283a 	ret

00007440 <__mdiff>:
    7440:	28c00417 	ldw	r3,16(r5)
    7444:	30800417 	ldw	r2,16(r6)
    7448:	defffa04 	addi	sp,sp,-24
    744c:	dcc00315 	stw	r19,12(sp)
    7450:	dc800215 	stw	r18,8(sp)
    7454:	dfc00515 	stw	ra,20(sp)
    7458:	dd000415 	stw	r20,16(sp)
    745c:	dc400115 	stw	r17,4(sp)
    7460:	dc000015 	stw	r16,0(sp)
    7464:	1887c83a 	sub	r3,r3,r2
    7468:	2825883a 	mov	r18,r5
    746c:	3027883a 	mov	r19,r6
    7470:	1800141e 	bne	r3,zero,74c4 <__mdiff+0x84>
    7474:	1085883a 	add	r2,r2,r2
    7478:	1085883a 	add	r2,r2,r2
    747c:	2a000504 	addi	r8,r5,20
    7480:	34000504 	addi	r16,r6,20
    7484:	4087883a 	add	r3,r8,r2
    7488:	8085883a 	add	r2,r16,r2
    748c:	00000106 	br	7494 <__mdiff+0x54>
    7490:	40c0592e 	bgeu	r8,r3,75f8 <__mdiff+0x1b8>
    7494:	18ffff04 	addi	r3,r3,-4
    7498:	10bfff04 	addi	r2,r2,-4
    749c:	19c00017 	ldw	r7,0(r3)
    74a0:	11400017 	ldw	r5,0(r2)
    74a4:	397ffa26 	beq	r7,r5,7490 <__mdiff+0x50>
    74a8:	3940592e 	bgeu	r7,r5,7610 <__mdiff+0x1d0>
    74ac:	9005883a 	mov	r2,r18
    74b0:	4023883a 	mov	r17,r8
    74b4:	9825883a 	mov	r18,r19
    74b8:	05000044 	movi	r20,1
    74bc:	1027883a 	mov	r19,r2
    74c0:	00000406 	br	74d4 <__mdiff+0x94>
    74c4:	18005616 	blt	r3,zero,7620 <__mdiff+0x1e0>
    74c8:	34400504 	addi	r17,r6,20
    74cc:	2c000504 	addi	r16,r5,20
    74d0:	0029883a 	mov	r20,zero
    74d4:	91400117 	ldw	r5,4(r18)
    74d8:	0006b180 	call	6b18 <_Balloc>
    74dc:	92400417 	ldw	r9,16(r18)
    74e0:	9b000417 	ldw	r12,16(r19)
    74e4:	12c00504 	addi	r11,r2,20
    74e8:	4a51883a 	add	r8,r9,r9
    74ec:	6319883a 	add	r12,r12,r12
    74f0:	4211883a 	add	r8,r8,r8
    74f4:	6319883a 	add	r12,r12,r12
    74f8:	15000315 	stw	r20,12(r2)
    74fc:	8211883a 	add	r8,r16,r8
    7500:	8b19883a 	add	r12,r17,r12
    7504:	0007883a 	mov	r3,zero
    7508:	81400017 	ldw	r5,0(r16)
    750c:	89c00017 	ldw	r7,0(r17)
    7510:	59800104 	addi	r6,r11,4
    7514:	293fffcc 	andi	r4,r5,65535
    7518:	20c7883a 	add	r3,r4,r3
    751c:	393fffcc 	andi	r4,r7,65535
    7520:	1909c83a 	sub	r4,r3,r4
    7524:	280ad43a 	srli	r5,r5,16
    7528:	380ed43a 	srli	r7,r7,16
    752c:	2007d43a 	srai	r3,r4,16
    7530:	213fffcc 	andi	r4,r4,65535
    7534:	29cbc83a 	sub	r5,r5,r7
    7538:	28c7883a 	add	r3,r5,r3
    753c:	180a943a 	slli	r5,r3,16
    7540:	8c400104 	addi	r17,r17,4
    7544:	84000104 	addi	r16,r16,4
    7548:	2908b03a 	or	r4,r5,r4
    754c:	59000015 	stw	r4,0(r11)
    7550:	1807d43a 	srai	r3,r3,16
    7554:	3015883a 	mov	r10,r6
    7558:	3017883a 	mov	r11,r6
    755c:	8b3fea36 	bltu	r17,r12,7508 <__mdiff+0xc8>
    7560:	8200162e 	bgeu	r16,r8,75bc <__mdiff+0x17c>
    7564:	8017883a 	mov	r11,r16
    7568:	59400017 	ldw	r5,0(r11)
    756c:	31800104 	addi	r6,r6,4
    7570:	5ac00104 	addi	r11,r11,4
    7574:	293fffcc 	andi	r4,r5,65535
    7578:	20c7883a 	add	r3,r4,r3
    757c:	280ed43a 	srli	r7,r5,16
    7580:	180bd43a 	srai	r5,r3,16
    7584:	193fffcc 	andi	r4,r3,65535
    7588:	3947883a 	add	r3,r7,r5
    758c:	180a943a 	slli	r5,r3,16
    7590:	1807d43a 	srai	r3,r3,16
    7594:	2908b03a 	or	r4,r5,r4
    7598:	313fff15 	stw	r4,-4(r6)
    759c:	5a3ff236 	bltu	r11,r8,7568 <__mdiff+0x128>
    75a0:	0406303a 	nor	r3,zero,r16
    75a4:	1a07883a 	add	r3,r3,r8
    75a8:	1806d0ba 	srli	r3,r3,2
    75ac:	18c00044 	addi	r3,r3,1
    75b0:	18c7883a 	add	r3,r3,r3
    75b4:	18c7883a 	add	r3,r3,r3
    75b8:	50d5883a 	add	r10,r10,r3
    75bc:	50ffff04 	addi	r3,r10,-4
    75c0:	2000041e 	bne	r4,zero,75d4 <__mdiff+0x194>
    75c4:	18ffff04 	addi	r3,r3,-4
    75c8:	19000017 	ldw	r4,0(r3)
    75cc:	4a7fffc4 	addi	r9,r9,-1
    75d0:	203ffc26 	beq	r4,zero,75c4 <__mdiff+0x184>
    75d4:	12400415 	stw	r9,16(r2)
    75d8:	dfc00517 	ldw	ra,20(sp)
    75dc:	dd000417 	ldw	r20,16(sp)
    75e0:	dcc00317 	ldw	r19,12(sp)
    75e4:	dc800217 	ldw	r18,8(sp)
    75e8:	dc400117 	ldw	r17,4(sp)
    75ec:	dc000017 	ldw	r16,0(sp)
    75f0:	dec00604 	addi	sp,sp,24
    75f4:	f800283a 	ret
    75f8:	000b883a 	mov	r5,zero
    75fc:	0006b180 	call	6b18 <_Balloc>
    7600:	00c00044 	movi	r3,1
    7604:	10c00415 	stw	r3,16(r2)
    7608:	10000515 	stw	zero,20(r2)
    760c:	003ff206 	br	75d8 <__mdiff+0x198>
    7610:	8023883a 	mov	r17,r16
    7614:	0029883a 	mov	r20,zero
    7618:	4021883a 	mov	r16,r8
    761c:	003fad06 	br	74d4 <__mdiff+0x94>
    7620:	9005883a 	mov	r2,r18
    7624:	94400504 	addi	r17,r18,20
    7628:	9c000504 	addi	r16,r19,20
    762c:	9825883a 	mov	r18,r19
    7630:	05000044 	movi	r20,1
    7634:	1027883a 	mov	r19,r2
    7638:	003fa606 	br	74d4 <__mdiff+0x94>

0000763c <__ulp>:
    763c:	295ffc2c 	andhi	r5,r5,32752
    7640:	00bf3034 	movhi	r2,64704
    7644:	2887883a 	add	r3,r5,r2
    7648:	00c0020e 	bge	zero,r3,7654 <__ulp+0x18>
    764c:	0005883a 	mov	r2,zero
    7650:	f800283a 	ret
    7654:	00c7c83a 	sub	r3,zero,r3
    7658:	1807d53a 	srai	r3,r3,20
    765c:	008004c4 	movi	r2,19
    7660:	10c00b0e 	bge	r2,r3,7690 <__ulp+0x54>
    7664:	18bffb04 	addi	r2,r3,-20
    7668:	01000784 	movi	r4,30
    766c:	0007883a 	mov	r3,zero
    7670:	20800516 	blt	r4,r2,7688 <__ulp+0x4c>
    7674:	010007c4 	movi	r4,31
    7678:	2089c83a 	sub	r4,r4,r2
    767c:	00800044 	movi	r2,1
    7680:	1104983a 	sll	r2,r2,r4
    7684:	f800283a 	ret
    7688:	00800044 	movi	r2,1
    768c:	f800283a 	ret
    7690:	01400234 	movhi	r5,8
    7694:	28c7d83a 	sra	r3,r5,r3
    7698:	0005883a 	mov	r2,zero
    769c:	f800283a 	ret

000076a0 <__b2d>:
    76a0:	defffa04 	addi	sp,sp,-24
    76a4:	dc000015 	stw	r16,0(sp)
    76a8:	24000417 	ldw	r16,16(r4)
    76ac:	dc400115 	stw	r17,4(sp)
    76b0:	24400504 	addi	r17,r4,20
    76b4:	8421883a 	add	r16,r16,r16
    76b8:	8421883a 	add	r16,r16,r16
    76bc:	8c21883a 	add	r16,r17,r16
    76c0:	dc800215 	stw	r18,8(sp)
    76c4:	84bfff17 	ldw	r18,-4(r16)
    76c8:	dd000415 	stw	r20,16(sp)
    76cc:	dcc00315 	stw	r19,12(sp)
    76d0:	9009883a 	mov	r4,r18
    76d4:	2829883a 	mov	r20,r5
    76d8:	dfc00515 	stw	ra,20(sp)
    76dc:	0006e0c0 	call	6e0c <__hi0bits>
    76e0:	00c00804 	movi	r3,32
    76e4:	1889c83a 	sub	r4,r3,r2
    76e8:	a1000015 	stw	r4,0(r20)
    76ec:	01000284 	movi	r4,10
    76f0:	84ffff04 	addi	r19,r16,-4
    76f4:	20801216 	blt	r4,r2,7740 <__b2d+0xa0>
    76f8:	018002c4 	movi	r6,11
    76fc:	308dc83a 	sub	r6,r6,r2
    7700:	9186d83a 	srl	r3,r18,r6
    7704:	18cffc34 	orhi	r3,r3,16368
    7708:	8cc0212e 	bgeu	r17,r19,7790 <__b2d+0xf0>
    770c:	813ffe17 	ldw	r4,-8(r16)
    7710:	218cd83a 	srl	r6,r4,r6
    7714:	10800544 	addi	r2,r2,21
    7718:	9084983a 	sll	r2,r18,r2
    771c:	1184b03a 	or	r2,r2,r6
    7720:	dfc00517 	ldw	ra,20(sp)
    7724:	dd000417 	ldw	r20,16(sp)
    7728:	dcc00317 	ldw	r19,12(sp)
    772c:	dc800217 	ldw	r18,8(sp)
    7730:	dc400117 	ldw	r17,4(sp)
    7734:	dc000017 	ldw	r16,0(sp)
    7738:	dec00604 	addi	sp,sp,24
    773c:	f800283a 	ret
    7740:	8cc00f2e 	bgeu	r17,r19,7780 <__b2d+0xe0>
    7744:	117ffd44 	addi	r5,r2,-11
    7748:	80bffe17 	ldw	r2,-8(r16)
    774c:	28000e26 	beq	r5,zero,7788 <__b2d+0xe8>
    7750:	1949c83a 	sub	r4,r3,r5
    7754:	9164983a 	sll	r18,r18,r5
    7758:	1106d83a 	srl	r3,r2,r4
    775c:	81bffe04 	addi	r6,r16,-8
    7760:	948ffc34 	orhi	r18,r18,16368
    7764:	90c6b03a 	or	r3,r18,r3
    7768:	89800e2e 	bgeu	r17,r6,77a4 <__b2d+0x104>
    776c:	81bffd17 	ldw	r6,-12(r16)
    7770:	1144983a 	sll	r2,r2,r5
    7774:	310ad83a 	srl	r5,r6,r4
    7778:	2884b03a 	or	r2,r5,r2
    777c:	003fe806 	br	7720 <__b2d+0x80>
    7780:	10bffd44 	addi	r2,r2,-11
    7784:	1000041e 	bne	r2,zero,7798 <__b2d+0xf8>
    7788:	90cffc34 	orhi	r3,r18,16368
    778c:	003fe406 	br	7720 <__b2d+0x80>
    7790:	000d883a 	mov	r6,zero
    7794:	003fdf06 	br	7714 <__b2d+0x74>
    7798:	90a4983a 	sll	r18,r18,r2
    779c:	0005883a 	mov	r2,zero
    77a0:	003ff906 	br	7788 <__b2d+0xe8>
    77a4:	1144983a 	sll	r2,r2,r5
    77a8:	003fdd06 	br	7720 <__b2d+0x80>

000077ac <__d2b>:
    77ac:	defff804 	addi	sp,sp,-32
    77b0:	dc000215 	stw	r16,8(sp)
    77b4:	3021883a 	mov	r16,r6
    77b8:	dc400315 	stw	r17,12(sp)
    77bc:	8022907a 	slli	r17,r16,1
    77c0:	dd000615 	stw	r20,24(sp)
    77c4:	2829883a 	mov	r20,r5
    77c8:	01400044 	movi	r5,1
    77cc:	dcc00515 	stw	r19,20(sp)
    77d0:	dc800415 	stw	r18,16(sp)
    77d4:	dfc00715 	stw	ra,28(sp)
    77d8:	3825883a 	mov	r18,r7
    77dc:	8822d57a 	srli	r17,r17,21
    77e0:	0006b180 	call	6b18 <_Balloc>
    77e4:	1027883a 	mov	r19,r2
    77e8:	00800434 	movhi	r2,16
    77ec:	10bfffc4 	addi	r2,r2,-1
    77f0:	808c703a 	and	r6,r16,r2
    77f4:	88000126 	beq	r17,zero,77fc <__d2b+0x50>
    77f8:	31800434 	orhi	r6,r6,16
    77fc:	d9800015 	stw	r6,0(sp)
    7800:	a0002426 	beq	r20,zero,7894 <__d2b+0xe8>
    7804:	d9000104 	addi	r4,sp,4
    7808:	dd000115 	stw	r20,4(sp)
    780c:	0006e740 	call	6e74 <__lo0bits>
    7810:	d8c00017 	ldw	r3,0(sp)
    7814:	10002f1e 	bne	r2,zero,78d4 <__d2b+0x128>
    7818:	d9000117 	ldw	r4,4(sp)
    781c:	99000515 	stw	r4,20(r19)
    7820:	1821003a 	cmpeq	r16,r3,zero
    7824:	01000084 	movi	r4,2
    7828:	2421c83a 	sub	r16,r4,r16
    782c:	98c00615 	stw	r3,24(r19)
    7830:	9c000415 	stw	r16,16(r19)
    7834:	88001f1e 	bne	r17,zero,78b4 <__d2b+0x108>
    7838:	10bef384 	addi	r2,r2,-1074
    783c:	90800015 	stw	r2,0(r18)
    7840:	00900034 	movhi	r2,16384
    7844:	10bfffc4 	addi	r2,r2,-1
    7848:	8085883a 	add	r2,r16,r2
    784c:	1085883a 	add	r2,r2,r2
    7850:	1085883a 	add	r2,r2,r2
    7854:	9885883a 	add	r2,r19,r2
    7858:	11000517 	ldw	r4,20(r2)
    785c:	8020917a 	slli	r16,r16,5
    7860:	0006e0c0 	call	6e0c <__hi0bits>
    7864:	d8c00817 	ldw	r3,32(sp)
    7868:	8085c83a 	sub	r2,r16,r2
    786c:	18800015 	stw	r2,0(r3)
    7870:	9805883a 	mov	r2,r19
    7874:	dfc00717 	ldw	ra,28(sp)
    7878:	dd000617 	ldw	r20,24(sp)
    787c:	dcc00517 	ldw	r19,20(sp)
    7880:	dc800417 	ldw	r18,16(sp)
    7884:	dc400317 	ldw	r17,12(sp)
    7888:	dc000217 	ldw	r16,8(sp)
    788c:	dec00804 	addi	sp,sp,32
    7890:	f800283a 	ret
    7894:	d809883a 	mov	r4,sp
    7898:	0006e740 	call	6e74 <__lo0bits>
    789c:	d8c00017 	ldw	r3,0(sp)
    78a0:	04000044 	movi	r16,1
    78a4:	9c000415 	stw	r16,16(r19)
    78a8:	98c00515 	stw	r3,20(r19)
    78ac:	10800804 	addi	r2,r2,32
    78b0:	883fe126 	beq	r17,zero,7838 <__d2b+0x8c>
    78b4:	00c00d44 	movi	r3,53
    78b8:	8c7ef344 	addi	r17,r17,-1075
    78bc:	88a3883a 	add	r17,r17,r2
    78c0:	1885c83a 	sub	r2,r3,r2
    78c4:	d8c00817 	ldw	r3,32(sp)
    78c8:	94400015 	stw	r17,0(r18)
    78cc:	18800015 	stw	r2,0(r3)
    78d0:	003fe706 	br	7870 <__d2b+0xc4>
    78d4:	01000804 	movi	r4,32
    78d8:	2089c83a 	sub	r4,r4,r2
    78dc:	1908983a 	sll	r4,r3,r4
    78e0:	d9400117 	ldw	r5,4(sp)
    78e4:	1886d83a 	srl	r3,r3,r2
    78e8:	2148b03a 	or	r4,r4,r5
    78ec:	99000515 	stw	r4,20(r19)
    78f0:	d8c00015 	stw	r3,0(sp)
    78f4:	003fca06 	br	7820 <__d2b+0x74>

000078f8 <__ratio>:
    78f8:	defff904 	addi	sp,sp,-28
    78fc:	dc400315 	stw	r17,12(sp)
    7900:	2823883a 	mov	r17,r5
    7904:	d9400104 	addi	r5,sp,4
    7908:	dfc00615 	stw	ra,24(sp)
    790c:	dcc00515 	stw	r19,20(sp)
    7910:	dc800415 	stw	r18,16(sp)
    7914:	2027883a 	mov	r19,r4
    7918:	dc000215 	stw	r16,8(sp)
    791c:	00076a00 	call	76a0 <__b2d>
    7920:	d80b883a 	mov	r5,sp
    7924:	8809883a 	mov	r4,r17
    7928:	1025883a 	mov	r18,r2
    792c:	1821883a 	mov	r16,r3
    7930:	00076a00 	call	76a0 <__b2d>
    7934:	8a000417 	ldw	r8,16(r17)
    7938:	99000417 	ldw	r4,16(r19)
    793c:	d9400117 	ldw	r5,4(sp)
    7940:	2209c83a 	sub	r4,r4,r8
    7944:	2010917a 	slli	r8,r4,5
    7948:	d9000017 	ldw	r4,0(sp)
    794c:	2909c83a 	sub	r4,r5,r4
    7950:	4109883a 	add	r4,r8,r4
    7954:	01000e0e 	bge	zero,r4,7990 <__ratio+0x98>
    7958:	2008953a 	slli	r4,r4,20
    795c:	2421883a 	add	r16,r4,r16
    7960:	100d883a 	mov	r6,r2
    7964:	180f883a 	mov	r7,r3
    7968:	9009883a 	mov	r4,r18
    796c:	800b883a 	mov	r5,r16
    7970:	000b7e40 	call	b7e4 <__divdf3>
    7974:	dfc00617 	ldw	ra,24(sp)
    7978:	dcc00517 	ldw	r19,20(sp)
    797c:	dc800417 	ldw	r18,16(sp)
    7980:	dc400317 	ldw	r17,12(sp)
    7984:	dc000217 	ldw	r16,8(sp)
    7988:	dec00704 	addi	sp,sp,28
    798c:	f800283a 	ret
    7990:	2008953a 	slli	r4,r4,20
    7994:	1907c83a 	sub	r3,r3,r4
    7998:	003ff106 	br	7960 <__ratio+0x68>

0000799c <_mprec_log10>:
    799c:	defffe04 	addi	sp,sp,-8
    79a0:	dc000015 	stw	r16,0(sp)
    79a4:	dfc00115 	stw	ra,4(sp)
    79a8:	008005c4 	movi	r2,23
    79ac:	2021883a 	mov	r16,r4
    79b0:	11000d0e 	bge	r2,r4,79e8 <_mprec_log10+0x4c>
    79b4:	0005883a 	mov	r2,zero
    79b8:	00cffc34 	movhi	r3,16368
    79bc:	843fffc4 	addi	r16,r16,-1
    79c0:	000d883a 	mov	r6,zero
    79c4:	01d00934 	movhi	r7,16420
    79c8:	1009883a 	mov	r4,r2
    79cc:	180b883a 	mov	r5,r3
    79d0:	000c3240 	call	c324 <__muldf3>
    79d4:	803ff91e 	bne	r16,zero,79bc <_mprec_log10+0x20>
    79d8:	dfc00117 	ldw	ra,4(sp)
    79dc:	dc000017 	ldw	r16,0(sp)
    79e0:	dec00204 	addi	sp,sp,8
    79e4:	f800283a 	ret
    79e8:	202090fa 	slli	r16,r4,3
    79ec:	008000b4 	movhi	r2,2
    79f0:	10a78604 	addi	r2,r2,-25064
    79f4:	1421883a 	add	r16,r2,r16
    79f8:	80800017 	ldw	r2,0(r16)
    79fc:	80c00117 	ldw	r3,4(r16)
    7a00:	dfc00117 	ldw	ra,4(sp)
    7a04:	dc000017 	ldw	r16,0(sp)
    7a08:	dec00204 	addi	sp,sp,8
    7a0c:	f800283a 	ret

00007a10 <__copybits>:
    7a10:	297fffc4 	addi	r5,r5,-1
    7a14:	280fd17a 	srai	r7,r5,5
    7a18:	30c00417 	ldw	r3,16(r6)
    7a1c:	30800504 	addi	r2,r6,20
    7a20:	39c00044 	addi	r7,r7,1
    7a24:	18c7883a 	add	r3,r3,r3
    7a28:	39cf883a 	add	r7,r7,r7
    7a2c:	18c7883a 	add	r3,r3,r3
    7a30:	39cf883a 	add	r7,r7,r7
    7a34:	10c7883a 	add	r3,r2,r3
    7a38:	21cf883a 	add	r7,r4,r7
    7a3c:	10c00d2e 	bgeu	r2,r3,7a74 <__copybits+0x64>
    7a40:	200b883a 	mov	r5,r4
    7a44:	12000017 	ldw	r8,0(r2)
    7a48:	29400104 	addi	r5,r5,4
    7a4c:	10800104 	addi	r2,r2,4
    7a50:	2a3fff15 	stw	r8,-4(r5)
    7a54:	10fffb36 	bltu	r2,r3,7a44 <__copybits+0x34>
    7a58:	1985c83a 	sub	r2,r3,r6
    7a5c:	10bffac4 	addi	r2,r2,-21
    7a60:	1004d0ba 	srli	r2,r2,2
    7a64:	10800044 	addi	r2,r2,1
    7a68:	1085883a 	add	r2,r2,r2
    7a6c:	1085883a 	add	r2,r2,r2
    7a70:	2089883a 	add	r4,r4,r2
    7a74:	21c0032e 	bgeu	r4,r7,7a84 <__copybits+0x74>
    7a78:	20000015 	stw	zero,0(r4)
    7a7c:	21000104 	addi	r4,r4,4
    7a80:	21fffd36 	bltu	r4,r7,7a78 <__copybits+0x68>
    7a84:	f800283a 	ret

00007a88 <__any_on>:
    7a88:	20c00417 	ldw	r3,16(r4)
    7a8c:	2805d17a 	srai	r2,r5,5
    7a90:	21000504 	addi	r4,r4,20
    7a94:	18800d0e 	bge	r3,r2,7acc <__any_on+0x44>
    7a98:	18c7883a 	add	r3,r3,r3
    7a9c:	18c7883a 	add	r3,r3,r3
    7aa0:	20c7883a 	add	r3,r4,r3
    7aa4:	20c0192e 	bgeu	r4,r3,7b0c <__any_on+0x84>
    7aa8:	18bfff17 	ldw	r2,-4(r3)
    7aac:	18ffff04 	addi	r3,r3,-4
    7ab0:	1000041e 	bne	r2,zero,7ac4 <__any_on+0x3c>
    7ab4:	20c0142e 	bgeu	r4,r3,7b08 <__any_on+0x80>
    7ab8:	18ffff04 	addi	r3,r3,-4
    7abc:	19400017 	ldw	r5,0(r3)
    7ac0:	283ffc26 	beq	r5,zero,7ab4 <__any_on+0x2c>
    7ac4:	00800044 	movi	r2,1
    7ac8:	f800283a 	ret
    7acc:	10c00a0e 	bge	r2,r3,7af8 <__any_on+0x70>
    7ad0:	1085883a 	add	r2,r2,r2
    7ad4:	1085883a 	add	r2,r2,r2
    7ad8:	294007cc 	andi	r5,r5,31
    7adc:	2087883a 	add	r3,r4,r2
    7ae0:	283ff026 	beq	r5,zero,7aa4 <__any_on+0x1c>
    7ae4:	19800017 	ldw	r6,0(r3)
    7ae8:	3144d83a 	srl	r2,r6,r5
    7aec:	114a983a 	sll	r5,r2,r5
    7af0:	317ff41e 	bne	r6,r5,7ac4 <__any_on+0x3c>
    7af4:	003feb06 	br	7aa4 <__any_on+0x1c>
    7af8:	1085883a 	add	r2,r2,r2
    7afc:	1085883a 	add	r2,r2,r2
    7b00:	2087883a 	add	r3,r4,r2
    7b04:	003fe706 	br	7aa4 <__any_on+0x1c>
    7b08:	f800283a 	ret
    7b0c:	0005883a 	mov	r2,zero
    7b10:	f800283a 	ret

00007b14 <_realloc_r>:
    7b14:	defff604 	addi	sp,sp,-40
    7b18:	dc800215 	stw	r18,8(sp)
    7b1c:	dfc00915 	stw	ra,36(sp)
    7b20:	df000815 	stw	fp,32(sp)
    7b24:	ddc00715 	stw	r23,28(sp)
    7b28:	dd800615 	stw	r22,24(sp)
    7b2c:	dd400515 	stw	r21,20(sp)
    7b30:	dd000415 	stw	r20,16(sp)
    7b34:	dcc00315 	stw	r19,12(sp)
    7b38:	dc400115 	stw	r17,4(sp)
    7b3c:	dc000015 	stw	r16,0(sp)
    7b40:	3025883a 	mov	r18,r6
    7b44:	2800b726 	beq	r5,zero,7e24 <_realloc_r+0x310>
    7b48:	282b883a 	mov	r21,r5
    7b4c:	2029883a 	mov	r20,r4
    7b50:	000e0000 	call	e000 <__malloc_lock>
    7b54:	a8bfff17 	ldw	r2,-4(r21)
    7b58:	043fff04 	movi	r16,-4
    7b5c:	90c002c4 	addi	r3,r18,11
    7b60:	01000584 	movi	r4,22
    7b64:	acfffe04 	addi	r19,r21,-8
    7b68:	1420703a 	and	r16,r2,r16
    7b6c:	20c0332e 	bgeu	r4,r3,7c3c <_realloc_r+0x128>
    7b70:	047ffe04 	movi	r17,-8
    7b74:	1c62703a 	and	r17,r3,r17
    7b78:	8807883a 	mov	r3,r17
    7b7c:	88005816 	blt	r17,zero,7ce0 <_realloc_r+0x1cc>
    7b80:	8c805736 	bltu	r17,r18,7ce0 <_realloc_r+0x1cc>
    7b84:	80c0300e 	bge	r16,r3,7c48 <_realloc_r+0x134>
    7b88:	070000b4 	movhi	fp,2
    7b8c:	e729ce04 	addi	fp,fp,-22728
    7b90:	e1c00217 	ldw	r7,8(fp)
    7b94:	9c09883a 	add	r4,r19,r16
    7b98:	22000117 	ldw	r8,4(r4)
    7b9c:	21c06326 	beq	r4,r7,7d2c <_realloc_r+0x218>
    7ba0:	017fff84 	movi	r5,-2
    7ba4:	414a703a 	and	r5,r8,r5
    7ba8:	214b883a 	add	r5,r4,r5
    7bac:	29800117 	ldw	r6,4(r5)
    7bb0:	3180004c 	andi	r6,r6,1
    7bb4:	30003f26 	beq	r6,zero,7cb4 <_realloc_r+0x1a0>
    7bb8:	1080004c 	andi	r2,r2,1
    7bbc:	10008326 	beq	r2,zero,7dcc <_realloc_r+0x2b8>
    7bc0:	900b883a 	mov	r5,r18
    7bc4:	a009883a 	mov	r4,r20
    7bc8:	0005e5c0 	call	5e5c <_malloc_r>
    7bcc:	1025883a 	mov	r18,r2
    7bd0:	10011e26 	beq	r2,zero,804c <_realloc_r+0x538>
    7bd4:	a93fff17 	ldw	r4,-4(r21)
    7bd8:	10fffe04 	addi	r3,r2,-8
    7bdc:	00bfff84 	movi	r2,-2
    7be0:	2084703a 	and	r2,r4,r2
    7be4:	9885883a 	add	r2,r19,r2
    7be8:	1880ee26 	beq	r3,r2,7fa4 <_realloc_r+0x490>
    7bec:	81bfff04 	addi	r6,r16,-4
    7bf0:	00800904 	movi	r2,36
    7bf4:	1180b836 	bltu	r2,r6,7ed8 <_realloc_r+0x3c4>
    7bf8:	00c004c4 	movi	r3,19
    7bfc:	19809636 	bltu	r3,r6,7e58 <_realloc_r+0x344>
    7c00:	9005883a 	mov	r2,r18
    7c04:	a807883a 	mov	r3,r21
    7c08:	19000017 	ldw	r4,0(r3)
    7c0c:	11000015 	stw	r4,0(r2)
    7c10:	19000117 	ldw	r4,4(r3)
    7c14:	11000115 	stw	r4,4(r2)
    7c18:	18c00217 	ldw	r3,8(r3)
    7c1c:	10c00215 	stw	r3,8(r2)
    7c20:	a80b883a 	mov	r5,r21
    7c24:	a009883a 	mov	r4,r20
    7c28:	00052700 	call	5270 <_free_r>
    7c2c:	a009883a 	mov	r4,r20
    7c30:	000e1200 	call	e120 <__malloc_unlock>
    7c34:	9005883a 	mov	r2,r18
    7c38:	00001206 	br	7c84 <_realloc_r+0x170>
    7c3c:	00c00404 	movi	r3,16
    7c40:	1823883a 	mov	r17,r3
    7c44:	003fce06 	br	7b80 <_realloc_r+0x6c>
    7c48:	a825883a 	mov	r18,r21
    7c4c:	8445c83a 	sub	r2,r16,r17
    7c50:	00c003c4 	movi	r3,15
    7c54:	18802636 	bltu	r3,r2,7cf0 <_realloc_r+0x1dc>
    7c58:	99800117 	ldw	r6,4(r19)
    7c5c:	9c07883a 	add	r3,r19,r16
    7c60:	3180004c 	andi	r6,r6,1
    7c64:	3420b03a 	or	r16,r6,r16
    7c68:	9c000115 	stw	r16,4(r19)
    7c6c:	18800117 	ldw	r2,4(r3)
    7c70:	10800054 	ori	r2,r2,1
    7c74:	18800115 	stw	r2,4(r3)
    7c78:	a009883a 	mov	r4,r20
    7c7c:	000e1200 	call	e120 <__malloc_unlock>
    7c80:	9005883a 	mov	r2,r18
    7c84:	dfc00917 	ldw	ra,36(sp)
    7c88:	df000817 	ldw	fp,32(sp)
    7c8c:	ddc00717 	ldw	r23,28(sp)
    7c90:	dd800617 	ldw	r22,24(sp)
    7c94:	dd400517 	ldw	r21,20(sp)
    7c98:	dd000417 	ldw	r20,16(sp)
    7c9c:	dcc00317 	ldw	r19,12(sp)
    7ca0:	dc800217 	ldw	r18,8(sp)
    7ca4:	dc400117 	ldw	r17,4(sp)
    7ca8:	dc000017 	ldw	r16,0(sp)
    7cac:	dec00a04 	addi	sp,sp,40
    7cb0:	f800283a 	ret
    7cb4:	017fff04 	movi	r5,-4
    7cb8:	414a703a 	and	r5,r8,r5
    7cbc:	814d883a 	add	r6,r16,r5
    7cc0:	30c01f16 	blt	r6,r3,7d40 <_realloc_r+0x22c>
    7cc4:	20800317 	ldw	r2,12(r4)
    7cc8:	20c00217 	ldw	r3,8(r4)
    7ccc:	a825883a 	mov	r18,r21
    7cd0:	3021883a 	mov	r16,r6
    7cd4:	18800315 	stw	r2,12(r3)
    7cd8:	10c00215 	stw	r3,8(r2)
    7cdc:	003fdb06 	br	7c4c <_realloc_r+0x138>
    7ce0:	00800304 	movi	r2,12
    7ce4:	a0800015 	stw	r2,0(r20)
    7ce8:	0005883a 	mov	r2,zero
    7cec:	003fe506 	br	7c84 <_realloc_r+0x170>
    7cf0:	98c00117 	ldw	r3,4(r19)
    7cf4:	9c4b883a 	add	r5,r19,r17
    7cf8:	11000054 	ori	r4,r2,1
    7cfc:	18c0004c 	andi	r3,r3,1
    7d00:	1c62b03a 	or	r17,r3,r17
    7d04:	9c400115 	stw	r17,4(r19)
    7d08:	29000115 	stw	r4,4(r5)
    7d0c:	2885883a 	add	r2,r5,r2
    7d10:	10c00117 	ldw	r3,4(r2)
    7d14:	29400204 	addi	r5,r5,8
    7d18:	a009883a 	mov	r4,r20
    7d1c:	18c00054 	ori	r3,r3,1
    7d20:	10c00115 	stw	r3,4(r2)
    7d24:	00052700 	call	5270 <_free_r>
    7d28:	003fd306 	br	7c78 <_realloc_r+0x164>
    7d2c:	017fff04 	movi	r5,-4
    7d30:	414a703a 	and	r5,r8,r5
    7d34:	89800404 	addi	r6,r17,16
    7d38:	8151883a 	add	r8,r16,r5
    7d3c:	4180590e 	bge	r8,r6,7ea4 <_realloc_r+0x390>
    7d40:	1080004c 	andi	r2,r2,1
    7d44:	103f9e1e 	bne	r2,zero,7bc0 <_realloc_r+0xac>
    7d48:	adbffe17 	ldw	r22,-8(r21)
    7d4c:	00bfff04 	movi	r2,-4
    7d50:	9dadc83a 	sub	r22,r19,r22
    7d54:	b1800117 	ldw	r6,4(r22)
    7d58:	3084703a 	and	r2,r6,r2
    7d5c:	20002026 	beq	r4,zero,7de0 <_realloc_r+0x2cc>
    7d60:	80af883a 	add	r23,r16,r2
    7d64:	b96f883a 	add	r23,r23,r5
    7d68:	21c05f26 	beq	r4,r7,7ee8 <_realloc_r+0x3d4>
    7d6c:	b8c01c16 	blt	r23,r3,7de0 <_realloc_r+0x2cc>
    7d70:	20800317 	ldw	r2,12(r4)
    7d74:	20c00217 	ldw	r3,8(r4)
    7d78:	81bfff04 	addi	r6,r16,-4
    7d7c:	01000904 	movi	r4,36
    7d80:	18800315 	stw	r2,12(r3)
    7d84:	10c00215 	stw	r3,8(r2)
    7d88:	b0c00217 	ldw	r3,8(r22)
    7d8c:	b0800317 	ldw	r2,12(r22)
    7d90:	b4800204 	addi	r18,r22,8
    7d94:	18800315 	stw	r2,12(r3)
    7d98:	10c00215 	stw	r3,8(r2)
    7d9c:	21801b36 	bltu	r4,r6,7e0c <_realloc_r+0x2f8>
    7da0:	008004c4 	movi	r2,19
    7da4:	1180352e 	bgeu	r2,r6,7e7c <_realloc_r+0x368>
    7da8:	a8800017 	ldw	r2,0(r21)
    7dac:	b0800215 	stw	r2,8(r22)
    7db0:	a8800117 	ldw	r2,4(r21)
    7db4:	b0800315 	stw	r2,12(r22)
    7db8:	008006c4 	movi	r2,27
    7dbc:	11807f36 	bltu	r2,r6,7fbc <_realloc_r+0x4a8>
    7dc0:	b0800404 	addi	r2,r22,16
    7dc4:	ad400204 	addi	r21,r21,8
    7dc8:	00002d06 	br	7e80 <_realloc_r+0x36c>
    7dcc:	adbffe17 	ldw	r22,-8(r21)
    7dd0:	00bfff04 	movi	r2,-4
    7dd4:	9dadc83a 	sub	r22,r19,r22
    7dd8:	b1000117 	ldw	r4,4(r22)
    7ddc:	2084703a 	and	r2,r4,r2
    7de0:	b03f7726 	beq	r22,zero,7bc0 <_realloc_r+0xac>
    7de4:	80af883a 	add	r23,r16,r2
    7de8:	b8ff7516 	blt	r23,r3,7bc0 <_realloc_r+0xac>
    7dec:	b0800317 	ldw	r2,12(r22)
    7df0:	b0c00217 	ldw	r3,8(r22)
    7df4:	81bfff04 	addi	r6,r16,-4
    7df8:	01000904 	movi	r4,36
    7dfc:	18800315 	stw	r2,12(r3)
    7e00:	10c00215 	stw	r3,8(r2)
    7e04:	b4800204 	addi	r18,r22,8
    7e08:	21bfe52e 	bgeu	r4,r6,7da0 <_realloc_r+0x28c>
    7e0c:	a80b883a 	mov	r5,r21
    7e10:	9009883a 	mov	r4,r18
    7e14:	00068940 	call	6894 <memmove>
    7e18:	b821883a 	mov	r16,r23
    7e1c:	b027883a 	mov	r19,r22
    7e20:	003f8a06 	br	7c4c <_realloc_r+0x138>
    7e24:	300b883a 	mov	r5,r6
    7e28:	dfc00917 	ldw	ra,36(sp)
    7e2c:	df000817 	ldw	fp,32(sp)
    7e30:	ddc00717 	ldw	r23,28(sp)
    7e34:	dd800617 	ldw	r22,24(sp)
    7e38:	dd400517 	ldw	r21,20(sp)
    7e3c:	dd000417 	ldw	r20,16(sp)
    7e40:	dcc00317 	ldw	r19,12(sp)
    7e44:	dc800217 	ldw	r18,8(sp)
    7e48:	dc400117 	ldw	r17,4(sp)
    7e4c:	dc000017 	ldw	r16,0(sp)
    7e50:	dec00a04 	addi	sp,sp,40
    7e54:	0005e5c1 	jmpi	5e5c <_malloc_r>
    7e58:	a8c00017 	ldw	r3,0(r21)
    7e5c:	90c00015 	stw	r3,0(r18)
    7e60:	a8c00117 	ldw	r3,4(r21)
    7e64:	90c00115 	stw	r3,4(r18)
    7e68:	00c006c4 	movi	r3,27
    7e6c:	19804536 	bltu	r3,r6,7f84 <_realloc_r+0x470>
    7e70:	90800204 	addi	r2,r18,8
    7e74:	a8c00204 	addi	r3,r21,8
    7e78:	003f6306 	br	7c08 <_realloc_r+0xf4>
    7e7c:	9005883a 	mov	r2,r18
    7e80:	a8c00017 	ldw	r3,0(r21)
    7e84:	b821883a 	mov	r16,r23
    7e88:	b027883a 	mov	r19,r22
    7e8c:	10c00015 	stw	r3,0(r2)
    7e90:	a8c00117 	ldw	r3,4(r21)
    7e94:	10c00115 	stw	r3,4(r2)
    7e98:	a8c00217 	ldw	r3,8(r21)
    7e9c:	10c00215 	stw	r3,8(r2)
    7ea0:	003f6a06 	br	7c4c <_realloc_r+0x138>
    7ea4:	9c67883a 	add	r19,r19,r17
    7ea8:	4445c83a 	sub	r2,r8,r17
    7eac:	e4c00215 	stw	r19,8(fp)
    7eb0:	10800054 	ori	r2,r2,1
    7eb4:	98800115 	stw	r2,4(r19)
    7eb8:	a8bfff17 	ldw	r2,-4(r21)
    7ebc:	a009883a 	mov	r4,r20
    7ec0:	1080004c 	andi	r2,r2,1
    7ec4:	1462b03a 	or	r17,r2,r17
    7ec8:	ac7fff15 	stw	r17,-4(r21)
    7ecc:	000e1200 	call	e120 <__malloc_unlock>
    7ed0:	a805883a 	mov	r2,r21
    7ed4:	003f6b06 	br	7c84 <_realloc_r+0x170>
    7ed8:	a80b883a 	mov	r5,r21
    7edc:	9009883a 	mov	r4,r18
    7ee0:	00068940 	call	6894 <memmove>
    7ee4:	003f4e06 	br	7c20 <_realloc_r+0x10c>
    7ee8:	89000404 	addi	r4,r17,16
    7eec:	b93fbc16 	blt	r23,r4,7de0 <_realloc_r+0x2cc>
    7ef0:	b0800317 	ldw	r2,12(r22)
    7ef4:	b0c00217 	ldw	r3,8(r22)
    7ef8:	81bfff04 	addi	r6,r16,-4
    7efc:	01000904 	movi	r4,36
    7f00:	18800315 	stw	r2,12(r3)
    7f04:	10c00215 	stw	r3,8(r2)
    7f08:	b4800204 	addi	r18,r22,8
    7f0c:	21804336 	bltu	r4,r6,801c <_realloc_r+0x508>
    7f10:	008004c4 	movi	r2,19
    7f14:	11803f2e 	bgeu	r2,r6,8014 <_realloc_r+0x500>
    7f18:	a8800017 	ldw	r2,0(r21)
    7f1c:	b0800215 	stw	r2,8(r22)
    7f20:	a8800117 	ldw	r2,4(r21)
    7f24:	b0800315 	stw	r2,12(r22)
    7f28:	008006c4 	movi	r2,27
    7f2c:	11803f36 	bltu	r2,r6,802c <_realloc_r+0x518>
    7f30:	b0800404 	addi	r2,r22,16
    7f34:	ad400204 	addi	r21,r21,8
    7f38:	a8c00017 	ldw	r3,0(r21)
    7f3c:	10c00015 	stw	r3,0(r2)
    7f40:	a8c00117 	ldw	r3,4(r21)
    7f44:	10c00115 	stw	r3,4(r2)
    7f48:	a8c00217 	ldw	r3,8(r21)
    7f4c:	10c00215 	stw	r3,8(r2)
    7f50:	b447883a 	add	r3,r22,r17
    7f54:	bc45c83a 	sub	r2,r23,r17
    7f58:	e0c00215 	stw	r3,8(fp)
    7f5c:	10800054 	ori	r2,r2,1
    7f60:	18800115 	stw	r2,4(r3)
    7f64:	b0800117 	ldw	r2,4(r22)
    7f68:	a009883a 	mov	r4,r20
    7f6c:	1080004c 	andi	r2,r2,1
    7f70:	1462b03a 	or	r17,r2,r17
    7f74:	b4400115 	stw	r17,4(r22)
    7f78:	000e1200 	call	e120 <__malloc_unlock>
    7f7c:	9005883a 	mov	r2,r18
    7f80:	003f4006 	br	7c84 <_realloc_r+0x170>
    7f84:	a8c00217 	ldw	r3,8(r21)
    7f88:	90c00215 	stw	r3,8(r18)
    7f8c:	a8c00317 	ldw	r3,12(r21)
    7f90:	90c00315 	stw	r3,12(r18)
    7f94:	30801126 	beq	r6,r2,7fdc <_realloc_r+0x4c8>
    7f98:	90800404 	addi	r2,r18,16
    7f9c:	a8c00404 	addi	r3,r21,16
    7fa0:	003f1906 	br	7c08 <_realloc_r+0xf4>
    7fa4:	90ffff17 	ldw	r3,-4(r18)
    7fa8:	00bfff04 	movi	r2,-4
    7fac:	a825883a 	mov	r18,r21
    7fb0:	1884703a 	and	r2,r3,r2
    7fb4:	80a1883a 	add	r16,r16,r2
    7fb8:	003f2406 	br	7c4c <_realloc_r+0x138>
    7fbc:	a8800217 	ldw	r2,8(r21)
    7fc0:	b0800415 	stw	r2,16(r22)
    7fc4:	a8800317 	ldw	r2,12(r21)
    7fc8:	b0800515 	stw	r2,20(r22)
    7fcc:	31000a26 	beq	r6,r4,7ff8 <_realloc_r+0x4e4>
    7fd0:	b0800604 	addi	r2,r22,24
    7fd4:	ad400404 	addi	r21,r21,16
    7fd8:	003fa906 	br	7e80 <_realloc_r+0x36c>
    7fdc:	a9000417 	ldw	r4,16(r21)
    7fe0:	90800604 	addi	r2,r18,24
    7fe4:	a8c00604 	addi	r3,r21,24
    7fe8:	91000415 	stw	r4,16(r18)
    7fec:	a9000517 	ldw	r4,20(r21)
    7ff0:	91000515 	stw	r4,20(r18)
    7ff4:	003f0406 	br	7c08 <_realloc_r+0xf4>
    7ff8:	a8c00417 	ldw	r3,16(r21)
    7ffc:	ad400604 	addi	r21,r21,24
    8000:	b0800804 	addi	r2,r22,32
    8004:	b0c00615 	stw	r3,24(r22)
    8008:	a8ffff17 	ldw	r3,-4(r21)
    800c:	b0c00715 	stw	r3,28(r22)
    8010:	003f9b06 	br	7e80 <_realloc_r+0x36c>
    8014:	9005883a 	mov	r2,r18
    8018:	003fc706 	br	7f38 <_realloc_r+0x424>
    801c:	a80b883a 	mov	r5,r21
    8020:	9009883a 	mov	r4,r18
    8024:	00068940 	call	6894 <memmove>
    8028:	003fc906 	br	7f50 <_realloc_r+0x43c>
    802c:	a8800217 	ldw	r2,8(r21)
    8030:	b0800415 	stw	r2,16(r22)
    8034:	a8800317 	ldw	r2,12(r21)
    8038:	b0800515 	stw	r2,20(r22)
    803c:	31000726 	beq	r6,r4,805c <_realloc_r+0x548>
    8040:	b0800604 	addi	r2,r22,24
    8044:	ad400404 	addi	r21,r21,16
    8048:	003fbb06 	br	7f38 <_realloc_r+0x424>
    804c:	a009883a 	mov	r4,r20
    8050:	000e1200 	call	e120 <__malloc_unlock>
    8054:	0005883a 	mov	r2,zero
    8058:	003f0a06 	br	7c84 <_realloc_r+0x170>
    805c:	a8c00417 	ldw	r3,16(r21)
    8060:	ad400604 	addi	r21,r21,24
    8064:	b0800804 	addi	r2,r22,32
    8068:	b0c00615 	stw	r3,24(r22)
    806c:	a8ffff17 	ldw	r3,-4(r21)
    8070:	b0c00715 	stw	r3,28(r22)
    8074:	003fb006 	br	7f38 <_realloc_r+0x424>

00008078 <__fpclassifyd>:
    8078:	00a00034 	movhi	r2,32768
    807c:	10bfffc4 	addi	r2,r2,-1
    8080:	2884703a 	and	r2,r5,r2
    8084:	10000726 	beq	r2,zero,80a4 <__fpclassifyd+0x2c>
    8088:	00fffc34 	movhi	r3,65520
    808c:	019ff834 	movhi	r6,32736
    8090:	28c7883a 	add	r3,r5,r3
    8094:	31bfffc4 	addi	r6,r6,-1
    8098:	30c00536 	bltu	r6,r3,80b0 <__fpclassifyd+0x38>
    809c:	00800104 	movi	r2,4
    80a0:	f800283a 	ret
    80a4:	2000021e 	bne	r4,zero,80b0 <__fpclassifyd+0x38>
    80a8:	00800084 	movi	r2,2
    80ac:	f800283a 	ret
    80b0:	00dffc34 	movhi	r3,32752
    80b4:	019ff834 	movhi	r6,32736
    80b8:	28cb883a 	add	r5,r5,r3
    80bc:	31bfffc4 	addi	r6,r6,-1
    80c0:	317ff62e 	bgeu	r6,r5,809c <__fpclassifyd+0x24>
    80c4:	01400434 	movhi	r5,16
    80c8:	297fffc4 	addi	r5,r5,-1
    80cc:	28800236 	bltu	r5,r2,80d8 <__fpclassifyd+0x60>
    80d0:	008000c4 	movi	r2,3
    80d4:	f800283a 	ret
    80d8:	10c00226 	beq	r2,r3,80e4 <__fpclassifyd+0x6c>
    80dc:	0005883a 	mov	r2,zero
    80e0:	f800283a 	ret
    80e4:	2005003a 	cmpeq	r2,r4,zero
    80e8:	f800283a 	ret

000080ec <_sbrk_r>:
    80ec:	defffd04 	addi	sp,sp,-12
    80f0:	dc000015 	stw	r16,0(sp)
    80f4:	040000b4 	movhi	r16,2
    80f8:	dc400115 	stw	r17,4(sp)
    80fc:	84380004 	addi	r16,r16,-8192
    8100:	2023883a 	mov	r17,r4
    8104:	2809883a 	mov	r4,r5
    8108:	dfc00215 	stw	ra,8(sp)
    810c:	80000015 	stw	zero,0(r16)
    8110:	000dcf80 	call	dcf8 <sbrk>
    8114:	00ffffc4 	movi	r3,-1
    8118:	10c00526 	beq	r2,r3,8130 <_sbrk_r+0x44>
    811c:	dfc00217 	ldw	ra,8(sp)
    8120:	dc400117 	ldw	r17,4(sp)
    8124:	dc000017 	ldw	r16,0(sp)
    8128:	dec00304 	addi	sp,sp,12
    812c:	f800283a 	ret
    8130:	80c00017 	ldw	r3,0(r16)
    8134:	183ff926 	beq	r3,zero,811c <_sbrk_r+0x30>
    8138:	88c00015 	stw	r3,0(r17)
    813c:	003ff706 	br	811c <_sbrk_r+0x30>

00008140 <__sread>:
    8140:	defffe04 	addi	sp,sp,-8
    8144:	dc000015 	stw	r16,0(sp)
    8148:	2821883a 	mov	r16,r5
    814c:	2940038f 	ldh	r5,14(r5)
    8150:	dfc00115 	stw	ra,4(sp)
    8154:	0009f340 	call	9f34 <_read_r>
    8158:	10000716 	blt	r2,zero,8178 <__sread+0x38>
    815c:	80c01417 	ldw	r3,80(r16)
    8160:	1887883a 	add	r3,r3,r2
    8164:	80c01415 	stw	r3,80(r16)
    8168:	dfc00117 	ldw	ra,4(sp)
    816c:	dc000017 	ldw	r16,0(sp)
    8170:	dec00204 	addi	sp,sp,8
    8174:	f800283a 	ret
    8178:	80c0030b 	ldhu	r3,12(r16)
    817c:	18fbffcc 	andi	r3,r3,61439
    8180:	80c0030d 	sth	r3,12(r16)
    8184:	dfc00117 	ldw	ra,4(sp)
    8188:	dc000017 	ldw	r16,0(sp)
    818c:	dec00204 	addi	sp,sp,8
    8190:	f800283a 	ret

00008194 <__seofread>:
    8194:	0005883a 	mov	r2,zero
    8198:	f800283a 	ret

0000819c <__swrite>:
    819c:	2880030b 	ldhu	r2,12(r5)
    81a0:	defffb04 	addi	sp,sp,-20
    81a4:	dcc00315 	stw	r19,12(sp)
    81a8:	dc800215 	stw	r18,8(sp)
    81ac:	dc400115 	stw	r17,4(sp)
    81b0:	dc000015 	stw	r16,0(sp)
    81b4:	dfc00415 	stw	ra,16(sp)
    81b8:	10c0400c 	andi	r3,r2,256
    81bc:	2821883a 	mov	r16,r5
    81c0:	2023883a 	mov	r17,r4
    81c4:	3025883a 	mov	r18,r6
    81c8:	3827883a 	mov	r19,r7
    81cc:	18000526 	beq	r3,zero,81e4 <__swrite+0x48>
    81d0:	2940038f 	ldh	r5,14(r5)
    81d4:	01c00084 	movi	r7,2
    81d8:	000d883a 	mov	r6,zero
    81dc:	0009ed40 	call	9ed4 <_lseek_r>
    81e0:	8080030b 	ldhu	r2,12(r16)
    81e4:	8140038f 	ldh	r5,14(r16)
    81e8:	10bbffcc 	andi	r2,r2,61439
    81ec:	980f883a 	mov	r7,r19
    81f0:	900d883a 	mov	r6,r18
    81f4:	8809883a 	mov	r4,r17
    81f8:	8080030d 	sth	r2,12(r16)
    81fc:	dfc00417 	ldw	ra,16(sp)
    8200:	dcc00317 	ldw	r19,12(sp)
    8204:	dc800217 	ldw	r18,8(sp)
    8208:	dc400117 	ldw	r17,4(sp)
    820c:	dc000017 	ldw	r16,0(sp)
    8210:	dec00504 	addi	sp,sp,20
    8214:	00099a01 	jmpi	99a0 <_write_r>

00008218 <__sseek>:
    8218:	defffe04 	addi	sp,sp,-8
    821c:	dc000015 	stw	r16,0(sp)
    8220:	2821883a 	mov	r16,r5
    8224:	2940038f 	ldh	r5,14(r5)
    8228:	dfc00115 	stw	ra,4(sp)
    822c:	0009ed40 	call	9ed4 <_lseek_r>
    8230:	00ffffc4 	movi	r3,-1
    8234:	10c00826 	beq	r2,r3,8258 <__sseek+0x40>
    8238:	80c0030b 	ldhu	r3,12(r16)
    823c:	80801415 	stw	r2,80(r16)
    8240:	18c40014 	ori	r3,r3,4096
    8244:	80c0030d 	sth	r3,12(r16)
    8248:	dfc00117 	ldw	ra,4(sp)
    824c:	dc000017 	ldw	r16,0(sp)
    8250:	dec00204 	addi	sp,sp,8
    8254:	f800283a 	ret
    8258:	80c0030b 	ldhu	r3,12(r16)
    825c:	18fbffcc 	andi	r3,r3,61439
    8260:	80c0030d 	sth	r3,12(r16)
    8264:	dfc00117 	ldw	ra,4(sp)
    8268:	dc000017 	ldw	r16,0(sp)
    826c:	dec00204 	addi	sp,sp,8
    8270:	f800283a 	ret

00008274 <__sclose>:
    8274:	2940038f 	ldh	r5,14(r5)
    8278:	0009a001 	jmpi	9a00 <_close_r>

0000827c <strcmp>:
    827c:	2144b03a 	or	r2,r4,r5
    8280:	108000cc 	andi	r2,r2,3
    8284:	1000171e 	bne	r2,zero,82e4 <strcmp+0x68>
    8288:	20800017 	ldw	r2,0(r4)
    828c:	28c00017 	ldw	r3,0(r5)
    8290:	10c0141e 	bne	r2,r3,82e4 <strcmp+0x68>
    8294:	027fbff4 	movhi	r9,65279
    8298:	4a7fbfc4 	addi	r9,r9,-257
    829c:	0086303a 	nor	r3,zero,r2
    82a0:	02202074 	movhi	r8,32897
    82a4:	1245883a 	add	r2,r2,r9
    82a8:	42202004 	addi	r8,r8,-32640
    82ac:	10c4703a 	and	r2,r2,r3
    82b0:	1204703a 	and	r2,r2,r8
    82b4:	10000226 	beq	r2,zero,82c0 <strcmp+0x44>
    82b8:	00002306 	br	8348 <strcmp+0xcc>
    82bc:	1000221e 	bne	r2,zero,8348 <strcmp+0xcc>
    82c0:	21000104 	addi	r4,r4,4
    82c4:	20c00017 	ldw	r3,0(r4)
    82c8:	29400104 	addi	r5,r5,4
    82cc:	29800017 	ldw	r6,0(r5)
    82d0:	1a4f883a 	add	r7,r3,r9
    82d4:	00c4303a 	nor	r2,zero,r3
    82d8:	3884703a 	and	r2,r7,r2
    82dc:	1204703a 	and	r2,r2,r8
    82e0:	19bff626 	beq	r3,r6,82bc <strcmp+0x40>
    82e4:	20800003 	ldbu	r2,0(r4)
    82e8:	10c03fcc 	andi	r3,r2,255
    82ec:	18c0201c 	xori	r3,r3,128
    82f0:	18ffe004 	addi	r3,r3,-128
    82f4:	18000c26 	beq	r3,zero,8328 <strcmp+0xac>
    82f8:	29800007 	ldb	r6,0(r5)
    82fc:	19800326 	beq	r3,r6,830c <strcmp+0x90>
    8300:	00001306 	br	8350 <strcmp+0xd4>
    8304:	29800007 	ldb	r6,0(r5)
    8308:	11800b1e 	bne	r2,r6,8338 <strcmp+0xbc>
    830c:	21000044 	addi	r4,r4,1
    8310:	20c00003 	ldbu	r3,0(r4)
    8314:	29400044 	addi	r5,r5,1
    8318:	18803fcc 	andi	r2,r3,255
    831c:	1080201c 	xori	r2,r2,128
    8320:	10bfe004 	addi	r2,r2,-128
    8324:	103ff71e 	bne	r2,zero,8304 <strcmp+0x88>
    8328:	0007883a 	mov	r3,zero
    832c:	28800003 	ldbu	r2,0(r5)
    8330:	1885c83a 	sub	r2,r3,r2
    8334:	f800283a 	ret
    8338:	28800003 	ldbu	r2,0(r5)
    833c:	18c03fcc 	andi	r3,r3,255
    8340:	1885c83a 	sub	r2,r3,r2
    8344:	f800283a 	ret
    8348:	0005883a 	mov	r2,zero
    834c:	f800283a 	ret
    8350:	10c03fcc 	andi	r3,r2,255
    8354:	003ff506 	br	832c <strcmp+0xb0>

00008358 <__sprint_r.part.0>:
    8358:	28801917 	ldw	r2,100(r5)
    835c:	defff604 	addi	sp,sp,-40
    8360:	dd400515 	stw	r21,20(sp)
    8364:	dfc00915 	stw	ra,36(sp)
    8368:	df000815 	stw	fp,32(sp)
    836c:	ddc00715 	stw	r23,28(sp)
    8370:	dd800615 	stw	r22,24(sp)
    8374:	dd000415 	stw	r20,16(sp)
    8378:	dcc00315 	stw	r19,12(sp)
    837c:	dc800215 	stw	r18,8(sp)
    8380:	dc400115 	stw	r17,4(sp)
    8384:	dc000015 	stw	r16,0(sp)
    8388:	1088000c 	andi	r2,r2,8192
    838c:	302b883a 	mov	r21,r6
    8390:	10002e26 	beq	r2,zero,844c <__sprint_r.part.0+0xf4>
    8394:	30800217 	ldw	r2,8(r6)
    8398:	35800017 	ldw	r22,0(r6)
    839c:	10002926 	beq	r2,zero,8444 <__sprint_r.part.0+0xec>
    83a0:	2827883a 	mov	r19,r5
    83a4:	2029883a 	mov	r20,r4
    83a8:	b5c00104 	addi	r23,r22,4
    83ac:	04bfffc4 	movi	r18,-1
    83b0:	bc400017 	ldw	r17,0(r23)
    83b4:	b4000017 	ldw	r16,0(r22)
    83b8:	0039883a 	mov	fp,zero
    83bc:	8822d0ba 	srli	r17,r17,2
    83c0:	8800031e 	bne	r17,zero,83d0 <__sprint_r.part.0+0x78>
    83c4:	00001806 	br	8428 <__sprint_r.part.0+0xd0>
    83c8:	84000104 	addi	r16,r16,4
    83cc:	8f001526 	beq	r17,fp,8424 <__sprint_r.part.0+0xcc>
    83d0:	81400017 	ldw	r5,0(r16)
    83d4:	980d883a 	mov	r6,r19
    83d8:	a009883a 	mov	r4,r20
    83dc:	0009d800 	call	9d80 <_fputwc_r>
    83e0:	e7000044 	addi	fp,fp,1
    83e4:	14bff81e 	bne	r2,r18,83c8 <__sprint_r.part.0+0x70>
    83e8:	9005883a 	mov	r2,r18
    83ec:	a8000215 	stw	zero,8(r21)
    83f0:	a8000115 	stw	zero,4(r21)
    83f4:	dfc00917 	ldw	ra,36(sp)
    83f8:	df000817 	ldw	fp,32(sp)
    83fc:	ddc00717 	ldw	r23,28(sp)
    8400:	dd800617 	ldw	r22,24(sp)
    8404:	dd400517 	ldw	r21,20(sp)
    8408:	dd000417 	ldw	r20,16(sp)
    840c:	dcc00317 	ldw	r19,12(sp)
    8410:	dc800217 	ldw	r18,8(sp)
    8414:	dc400117 	ldw	r17,4(sp)
    8418:	dc000017 	ldw	r16,0(sp)
    841c:	dec00a04 	addi	sp,sp,40
    8420:	f800283a 	ret
    8424:	a8800217 	ldw	r2,8(r21)
    8428:	8c63883a 	add	r17,r17,r17
    842c:	8c63883a 	add	r17,r17,r17
    8430:	1445c83a 	sub	r2,r2,r17
    8434:	a8800215 	stw	r2,8(r21)
    8438:	b5800204 	addi	r22,r22,8
    843c:	bdc00204 	addi	r23,r23,8
    8440:	103fdb1e 	bne	r2,zero,83b0 <__sprint_r.part.0+0x58>
    8444:	0005883a 	mov	r2,zero
    8448:	003fe806 	br	83ec <__sprint_r.part.0+0x94>
    844c:	00055800 	call	5580 <__sfvwrite_r>
    8450:	003fe606 	br	83ec <__sprint_r.part.0+0x94>

00008454 <__sprint_r>:
    8454:	30c00217 	ldw	r3,8(r6)
    8458:	18000126 	beq	r3,zero,8460 <__sprint_r+0xc>
    845c:	00083581 	jmpi	8358 <__sprint_r.part.0>
    8460:	30000115 	stw	zero,4(r6)
    8464:	0005883a 	mov	r2,zero
    8468:	f800283a 	ret

0000846c <___vfiprintf_internal_r>:
    846c:	deffc904 	addi	sp,sp,-220
    8470:	df003515 	stw	fp,212(sp)
    8474:	dd003115 	stw	r20,196(sp)
    8478:	dfc03615 	stw	ra,216(sp)
    847c:	ddc03415 	stw	r23,208(sp)
    8480:	dd803315 	stw	r22,204(sp)
    8484:	dd403215 	stw	r21,200(sp)
    8488:	dcc03015 	stw	r19,192(sp)
    848c:	dc802f15 	stw	r18,188(sp)
    8490:	dc402e15 	stw	r17,184(sp)
    8494:	dc002d15 	stw	r16,180(sp)
    8498:	d9002015 	stw	r4,128(sp)
    849c:	d9c02215 	stw	r7,136(sp)
    84a0:	2829883a 	mov	r20,r5
    84a4:	3039883a 	mov	fp,r6
    84a8:	20000226 	beq	r4,zero,84b4 <___vfiprintf_internal_r+0x48>
    84ac:	20800e17 	ldw	r2,56(r4)
    84b0:	1000cf26 	beq	r2,zero,87f0 <___vfiprintf_internal_r+0x384>
    84b4:	a080030b 	ldhu	r2,12(r20)
    84b8:	10c8000c 	andi	r3,r2,8192
    84bc:	1800061e 	bne	r3,zero,84d8 <___vfiprintf_internal_r+0x6c>
    84c0:	a1001917 	ldw	r4,100(r20)
    84c4:	00f7ffc4 	movi	r3,-8193
    84c8:	10880014 	ori	r2,r2,8192
    84cc:	20c6703a 	and	r3,r4,r3
    84d0:	a080030d 	sth	r2,12(r20)
    84d4:	a0c01915 	stw	r3,100(r20)
    84d8:	10c0020c 	andi	r3,r2,8
    84dc:	1800a926 	beq	r3,zero,8784 <___vfiprintf_internal_r+0x318>
    84e0:	a0c00417 	ldw	r3,16(r20)
    84e4:	1800a726 	beq	r3,zero,8784 <___vfiprintf_internal_r+0x318>
    84e8:	1080068c 	andi	r2,r2,26
    84ec:	00c00284 	movi	r3,10
    84f0:	10c0ac26 	beq	r2,r3,87a4 <___vfiprintf_internal_r+0x338>
    84f4:	da801a04 	addi	r10,sp,104
    84f8:	da801e15 	stw	r10,120(sp)
    84fc:	d8801e17 	ldw	r2,120(sp)
    8500:	da8019c4 	addi	r10,sp,103
    8504:	058000b4 	movhi	r22,2
    8508:	05c000b4 	movhi	r23,2
    850c:	da801f15 	stw	r10,124(sp)
    8510:	1295c83a 	sub	r10,r2,r10
    8514:	b5a7bc04 	addi	r22,r22,-24848
    8518:	bde7b804 	addi	r23,r23,-24864
    851c:	dec01a15 	stw	sp,104(sp)
    8520:	d8001c15 	stw	zero,112(sp)
    8524:	d8001b15 	stw	zero,108(sp)
    8528:	d8002615 	stw	zero,152(sp)
    852c:	d8002315 	stw	zero,140(sp)
    8530:	da802715 	stw	r10,156(sp)
    8534:	d811883a 	mov	r8,sp
    8538:	dd002115 	stw	r20,132(sp)
    853c:	e021883a 	mov	r16,fp
    8540:	80800007 	ldb	r2,0(r16)
    8544:	1003ea26 	beq	r2,zero,94f0 <___vfiprintf_internal_r+0x1084>
    8548:	00c00944 	movi	r3,37
    854c:	8025883a 	mov	r18,r16
    8550:	10c0021e 	bne	r2,r3,855c <___vfiprintf_internal_r+0xf0>
    8554:	00001606 	br	85b0 <___vfiprintf_internal_r+0x144>
    8558:	10c00326 	beq	r2,r3,8568 <___vfiprintf_internal_r+0xfc>
    855c:	94800044 	addi	r18,r18,1
    8560:	90800007 	ldb	r2,0(r18)
    8564:	103ffc1e 	bne	r2,zero,8558 <___vfiprintf_internal_r+0xec>
    8568:	9423c83a 	sub	r17,r18,r16
    856c:	88001026 	beq	r17,zero,85b0 <___vfiprintf_internal_r+0x144>
    8570:	d8c01c17 	ldw	r3,112(sp)
    8574:	d8801b17 	ldw	r2,108(sp)
    8578:	44000015 	stw	r16,0(r8)
    857c:	88c7883a 	add	r3,r17,r3
    8580:	10800044 	addi	r2,r2,1
    8584:	44400115 	stw	r17,4(r8)
    8588:	d8c01c15 	stw	r3,112(sp)
    858c:	d8801b15 	stw	r2,108(sp)
    8590:	010001c4 	movi	r4,7
    8594:	2080760e 	bge	r4,r2,8770 <___vfiprintf_internal_r+0x304>
    8598:	1803821e 	bne	r3,zero,93a4 <___vfiprintf_internal_r+0xf38>
    859c:	da802317 	ldw	r10,140(sp)
    85a0:	d8001b15 	stw	zero,108(sp)
    85a4:	d811883a 	mov	r8,sp
    85a8:	5455883a 	add	r10,r10,r17
    85ac:	da802315 	stw	r10,140(sp)
    85b0:	90800007 	ldb	r2,0(r18)
    85b4:	10044626 	beq	r2,zero,96d0 <___vfiprintf_internal_r+0x1264>
    85b8:	90c00047 	ldb	r3,1(r18)
    85bc:	94000044 	addi	r16,r18,1
    85c0:	d8001d85 	stb	zero,118(sp)
    85c4:	0009883a 	mov	r4,zero
    85c8:	000f883a 	mov	r7,zero
    85cc:	027fffc4 	movi	r9,-1
    85d0:	0023883a 	mov	r17,zero
    85d4:	0029883a 	mov	r20,zero
    85d8:	01401604 	movi	r5,88
    85dc:	01800244 	movi	r6,9
    85e0:	03400a84 	movi	r13,42
    85e4:	03001b04 	movi	r12,108
    85e8:	84000044 	addi	r16,r16,1
    85ec:	18bff804 	addi	r2,r3,-32
    85f0:	28827336 	bltu	r5,r2,8fc0 <___vfiprintf_internal_r+0xb54>
    85f4:	100490ba 	slli	r2,r2,2
    85f8:	02800074 	movhi	r10,1
    85fc:	52a18304 	addi	r10,r10,-31220
    8600:	1285883a 	add	r2,r2,r10
    8604:	10800017 	ldw	r2,0(r2)
    8608:	1000683a 	jmp	r2
    860c:	00008cf4 	movhi	zero,563
    8610:	00008fc0 	call	8fc <VGA_text+0x70>
    8614:	00008fc0 	call	8fc <VGA_text+0x70>
    8618:	00008d14 	movui	zero,564
    861c:	00008fc0 	call	8fc <VGA_text+0x70>
    8620:	00008fc0 	call	8fc <VGA_text+0x70>
    8624:	00008fc0 	call	8fc <VGA_text+0x70>
    8628:	00008fc0 	call	8fc <VGA_text+0x70>
    862c:	00008fc0 	call	8fc <VGA_text+0x70>
    8630:	00008fc0 	call	8fc <VGA_text+0x70>
    8634:	00008efc 	xorhi	zero,zero,571
    8638:	00008f18 	cmpnei	zero,zero,572
    863c:	00008fc0 	call	8fc <VGA_text+0x70>
    8640:	00008800 	call	880 <Check_KEYs+0x15c>
    8644:	00008f28 	cmpgeui	zero,zero,572
    8648:	00008fc0 	call	8fc <VGA_text+0x70>
    864c:	00008d20 	cmpeqi	zero,zero,564
    8650:	00008d2c 	andhi	zero,zero,564
    8654:	00008d2c 	andhi	zero,zero,564
    8658:	00008d2c 	andhi	zero,zero,564
    865c:	00008d2c 	andhi	zero,zero,564
    8660:	00008d2c 	andhi	zero,zero,564
    8664:	00008d2c 	andhi	zero,zero,564
    8668:	00008d2c 	andhi	zero,zero,564
    866c:	00008d2c 	andhi	zero,zero,564
    8670:	00008d2c 	andhi	zero,zero,564
    8674:	00008fc0 	call	8fc <VGA_text+0x70>
    8678:	00008fc0 	call	8fc <VGA_text+0x70>
    867c:	00008fc0 	call	8fc <VGA_text+0x70>
    8680:	00008fc0 	call	8fc <VGA_text+0x70>
    8684:	00008fc0 	call	8fc <VGA_text+0x70>
    8688:	00008fc0 	call	8fc <VGA_text+0x70>
    868c:	00008fc0 	call	8fc <VGA_text+0x70>
    8690:	00008fc0 	call	8fc <VGA_text+0x70>
    8694:	00008fc0 	call	8fc <VGA_text+0x70>
    8698:	00008fc0 	call	8fc <VGA_text+0x70>
    869c:	00008d58 	cmpnei	zero,zero,565
    86a0:	00008fc0 	call	8fc <VGA_text+0x70>
    86a4:	00008fc0 	call	8fc <VGA_text+0x70>
    86a8:	00008fc0 	call	8fc <VGA_text+0x70>
    86ac:	00008fc0 	call	8fc <VGA_text+0x70>
    86b0:	00008fc0 	call	8fc <VGA_text+0x70>
    86b4:	00008fc0 	call	8fc <VGA_text+0x70>
    86b8:	00008fc0 	call	8fc <VGA_text+0x70>
    86bc:	00008fc0 	call	8fc <VGA_text+0x70>
    86c0:	00008fc0 	call	8fc <VGA_text+0x70>
    86c4:	00008fc0 	call	8fc <VGA_text+0x70>
    86c8:	00008d90 	cmplti	zero,zero,566
    86cc:	00008fc0 	call	8fc <VGA_text+0x70>
    86d0:	00008fc0 	call	8fc <VGA_text+0x70>
    86d4:	00008fc0 	call	8fc <VGA_text+0x70>
    86d8:	00008fc0 	call	8fc <VGA_text+0x70>
    86dc:	00008fc0 	call	8fc <VGA_text+0x70>
    86e0:	00008de8 	cmpgeui	zero,zero,567
    86e4:	00008fc0 	call	8fc <VGA_text+0x70>
    86e8:	00008fc0 	call	8fc <VGA_text+0x70>
    86ec:	00008e58 	cmpnei	zero,zero,569
    86f0:	00008fc0 	call	8fc <VGA_text+0x70>
    86f4:	00008fc0 	call	8fc <VGA_text+0x70>
    86f8:	00008fc0 	call	8fc <VGA_text+0x70>
    86fc:	00008fc0 	call	8fc <VGA_text+0x70>
    8700:	00008fc0 	call	8fc <VGA_text+0x70>
    8704:	00008fc0 	call	8fc <VGA_text+0x70>
    8708:	00008fc0 	call	8fc <VGA_text+0x70>
    870c:	00008fc0 	call	8fc <VGA_text+0x70>
    8710:	00008fc0 	call	8fc <VGA_text+0x70>
    8714:	00008fc0 	call	8fc <VGA_text+0x70>
    8718:	00008c04 	movi	zero,560
    871c:	00008c30 	cmpltui	zero,zero,560
    8720:	00008fc0 	call	8fc <VGA_text+0x70>
    8724:	00008fc0 	call	8fc <VGA_text+0x70>
    8728:	00008fc0 	call	8fc <VGA_text+0x70>
    872c:	00008f68 	cmpgeui	zero,zero,573
    8730:	00008c30 	cmpltui	zero,zero,560
    8734:	00008fc0 	call	8fc <VGA_text+0x70>
    8738:	00008fc0 	call	8fc <VGA_text+0x70>
    873c:	00008ac4 	movi	zero,555
    8740:	00008fc0 	call	8fc <VGA_text+0x70>
    8744:	00008ad4 	movui	zero,555
    8748:	00008b10 	cmplti	zero,zero,556
    874c:	0000880c 	andi	zero,zero,544
    8750:	00008ab8 	rdprs	zero,zero,554
    8754:	00008fc0 	call	8fc <VGA_text+0x70>
    8758:	00008e94 	movui	zero,570
    875c:	00008fc0 	call	8fc <VGA_text+0x70>
    8760:	00008eec 	andhi	zero,zero,571
    8764:	00008fc0 	call	8fc <VGA_text+0x70>
    8768:	00008fc0 	call	8fc <VGA_text+0x70>
    876c:	00008bb0 	cmpltui	zero,zero,558
    8770:	42000204 	addi	r8,r8,8
    8774:	da802317 	ldw	r10,140(sp)
    8778:	5455883a 	add	r10,r10,r17
    877c:	da802315 	stw	r10,140(sp)
    8780:	003f8b06 	br	85b0 <___vfiprintf_internal_r+0x144>
    8784:	d9002017 	ldw	r4,128(sp)
    8788:	a00b883a 	mov	r5,r20
    878c:	00031280 	call	3128 <__swsetup_r>
    8790:	1003b11e 	bne	r2,zero,9658 <___vfiprintf_internal_r+0x11ec>
    8794:	a080030b 	ldhu	r2,12(r20)
    8798:	00c00284 	movi	r3,10
    879c:	1080068c 	andi	r2,r2,26
    87a0:	10ff541e 	bne	r2,r3,84f4 <___vfiprintf_internal_r+0x88>
    87a4:	a080038f 	ldh	r2,14(r20)
    87a8:	103f5216 	blt	r2,zero,84f4 <___vfiprintf_internal_r+0x88>
    87ac:	d9c02217 	ldw	r7,136(sp)
    87b0:	d9002017 	ldw	r4,128(sp)
    87b4:	e00d883a 	mov	r6,fp
    87b8:	a00b883a 	mov	r5,r20
    87bc:	00098e40 	call	98e4 <__sbprintf>
    87c0:	dfc03617 	ldw	ra,216(sp)
    87c4:	df003517 	ldw	fp,212(sp)
    87c8:	ddc03417 	ldw	r23,208(sp)
    87cc:	dd803317 	ldw	r22,204(sp)
    87d0:	dd403217 	ldw	r21,200(sp)
    87d4:	dd003117 	ldw	r20,196(sp)
    87d8:	dcc03017 	ldw	r19,192(sp)
    87dc:	dc802f17 	ldw	r18,188(sp)
    87e0:	dc402e17 	ldw	r17,184(sp)
    87e4:	dc002d17 	ldw	r16,180(sp)
    87e8:	dec03704 	addi	sp,sp,220
    87ec:	f800283a 	ret
    87f0:	00050fc0 	call	50fc <__sinit>
    87f4:	003f2f06 	br	84b4 <___vfiprintf_internal_r+0x48>
    87f8:	0463c83a 	sub	r17,zero,r17
    87fc:	d8802215 	stw	r2,136(sp)
    8800:	a5000114 	ori	r20,r20,4
    8804:	80c00007 	ldb	r3,0(r16)
    8808:	003f7706 	br	85e8 <___vfiprintf_internal_r+0x17c>
    880c:	00800c04 	movi	r2,48
    8810:	da802217 	ldw	r10,136(sp)
    8814:	d8801d05 	stb	r2,116(sp)
    8818:	00801e04 	movi	r2,120
    881c:	d8801d45 	stb	r2,117(sp)
    8820:	d8001d85 	stb	zero,118(sp)
    8824:	50c00104 	addi	r3,r10,4
    8828:	54800017 	ldw	r18,0(r10)
    882c:	0027883a 	mov	r19,zero
    8830:	a0800094 	ori	r2,r20,2
    8834:	48030b16 	blt	r9,zero,9464 <___vfiprintf_internal_r+0xff8>
    8838:	00bfdfc4 	movi	r2,-129
    883c:	a096703a 	and	r11,r20,r2
    8840:	d8c02215 	stw	r3,136(sp)
    8844:	5d000094 	ori	r20,r11,2
    8848:	90032b1e 	bne	r18,zero,94f8 <___vfiprintf_internal_r+0x108c>
    884c:	008000b4 	movhi	r2,2
    8850:	10a75804 	addi	r2,r2,-25248
    8854:	d8802615 	stw	r2,152(sp)
    8858:	0039883a 	mov	fp,zero
    885c:	48017b1e 	bne	r9,zero,8e4c <___vfiprintf_internal_r+0x9e0>
    8860:	0013883a 	mov	r9,zero
    8864:	0027883a 	mov	r19,zero
    8868:	dd401a04 	addi	r21,sp,104
    886c:	4825883a 	mov	r18,r9
    8870:	4cc0010e 	bge	r9,r19,8878 <___vfiprintf_internal_r+0x40c>
    8874:	9825883a 	mov	r18,r19
    8878:	e7003fcc 	andi	fp,fp,255
    887c:	e700201c 	xori	fp,fp,128
    8880:	e73fe004 	addi	fp,fp,-128
    8884:	e0000126 	beq	fp,zero,888c <___vfiprintf_internal_r+0x420>
    8888:	94800044 	addi	r18,r18,1
    888c:	a380008c 	andi	r14,r20,2
    8890:	70000126 	beq	r14,zero,8898 <___vfiprintf_internal_r+0x42c>
    8894:	94800084 	addi	r18,r18,2
    8898:	a700210c 	andi	fp,r20,132
    889c:	e001df1e 	bne	fp,zero,901c <___vfiprintf_internal_r+0xbb0>
    88a0:	8c87c83a 	sub	r3,r17,r18
    88a4:	00c1dd0e 	bge	zero,r3,901c <___vfiprintf_internal_r+0xbb0>
    88a8:	01c00404 	movi	r7,16
    88ac:	d8801c17 	ldw	r2,112(sp)
    88b0:	38c3ad0e 	bge	r7,r3,9768 <___vfiprintf_internal_r+0x12fc>
    88b4:	028000b4 	movhi	r10,2
    88b8:	52a7bc04 	addi	r10,r10,-24848
    88bc:	dc002915 	stw	r16,164(sp)
    88c0:	d9801b17 	ldw	r6,108(sp)
    88c4:	da802415 	stw	r10,144(sp)
    88c8:	03c001c4 	movi	r15,7
    88cc:	da402515 	stw	r9,148(sp)
    88d0:	db802815 	stw	r14,160(sp)
    88d4:	1821883a 	mov	r16,r3
    88d8:	00000506 	br	88f0 <___vfiprintf_internal_r+0x484>
    88dc:	31400084 	addi	r5,r6,2
    88e0:	42000204 	addi	r8,r8,8
    88e4:	200d883a 	mov	r6,r4
    88e8:	843ffc04 	addi	r16,r16,-16
    88ec:	3c000d0e 	bge	r7,r16,8924 <___vfiprintf_internal_r+0x4b8>
    88f0:	10800404 	addi	r2,r2,16
    88f4:	31000044 	addi	r4,r6,1
    88f8:	45800015 	stw	r22,0(r8)
    88fc:	41c00115 	stw	r7,4(r8)
    8900:	d8801c15 	stw	r2,112(sp)
    8904:	d9001b15 	stw	r4,108(sp)
    8908:	793ff40e 	bge	r15,r4,88dc <___vfiprintf_internal_r+0x470>
    890c:	1001b51e 	bne	r2,zero,8fe4 <___vfiprintf_internal_r+0xb78>
    8910:	843ffc04 	addi	r16,r16,-16
    8914:	000d883a 	mov	r6,zero
    8918:	01400044 	movi	r5,1
    891c:	d811883a 	mov	r8,sp
    8920:	3c3ff316 	blt	r7,r16,88f0 <___vfiprintf_internal_r+0x484>
    8924:	8007883a 	mov	r3,r16
    8928:	da402517 	ldw	r9,148(sp)
    892c:	db802817 	ldw	r14,160(sp)
    8930:	dc002917 	ldw	r16,164(sp)
    8934:	da802417 	ldw	r10,144(sp)
    8938:	1885883a 	add	r2,r3,r2
    893c:	40c00115 	stw	r3,4(r8)
    8940:	42800015 	stw	r10,0(r8)
    8944:	d8801c15 	stw	r2,112(sp)
    8948:	d9401b15 	stw	r5,108(sp)
    894c:	00c001c4 	movi	r3,7
    8950:	19426016 	blt	r3,r5,92d4 <___vfiprintf_internal_r+0xe68>
    8954:	d8c01d87 	ldb	r3,118(sp)
    8958:	42000204 	addi	r8,r8,8
    895c:	29000044 	addi	r4,r5,1
    8960:	1801b31e 	bne	r3,zero,9030 <___vfiprintf_internal_r+0xbc4>
    8964:	7001c026 	beq	r14,zero,9068 <___vfiprintf_internal_r+0xbfc>
    8968:	d8c01d04 	addi	r3,sp,116
    896c:	10800084 	addi	r2,r2,2
    8970:	40c00015 	stw	r3,0(r8)
    8974:	00c00084 	movi	r3,2
    8978:	40c00115 	stw	r3,4(r8)
    897c:	d8801c15 	stw	r2,112(sp)
    8980:	d9001b15 	stw	r4,108(sp)
    8984:	00c001c4 	movi	r3,7
    8988:	1902650e 	bge	r3,r4,9320 <___vfiprintf_internal_r+0xeb4>
    898c:	10029a1e 	bne	r2,zero,93f8 <___vfiprintf_internal_r+0xf8c>
    8990:	00c02004 	movi	r3,128
    8994:	01000044 	movi	r4,1
    8998:	000b883a 	mov	r5,zero
    899c:	d811883a 	mov	r8,sp
    89a0:	e0c1b31e 	bne	fp,r3,9070 <___vfiprintf_internal_r+0xc04>
    89a4:	8cb9c83a 	sub	fp,r17,r18
    89a8:	0701b10e 	bge	zero,fp,9070 <___vfiprintf_internal_r+0xc04>
    89ac:	01c00404 	movi	r7,16
    89b0:	3f03890e 	bge	r7,fp,97d8 <___vfiprintf_internal_r+0x136c>
    89b4:	00c000b4 	movhi	r3,2
    89b8:	18e7b804 	addi	r3,r3,-24864
    89bc:	d8c02415 	stw	r3,144(sp)
    89c0:	8007883a 	mov	r3,r16
    89c4:	034001c4 	movi	r13,7
    89c8:	e021883a 	mov	r16,fp
    89cc:	da402515 	stw	r9,148(sp)
    89d0:	1839883a 	mov	fp,r3
    89d4:	00000506 	br	89ec <___vfiprintf_internal_r+0x580>
    89d8:	29800084 	addi	r6,r5,2
    89dc:	42000204 	addi	r8,r8,8
    89e0:	180b883a 	mov	r5,r3
    89e4:	843ffc04 	addi	r16,r16,-16
    89e8:	3c000d0e 	bge	r7,r16,8a20 <___vfiprintf_internal_r+0x5b4>
    89ec:	10800404 	addi	r2,r2,16
    89f0:	28c00044 	addi	r3,r5,1
    89f4:	45c00015 	stw	r23,0(r8)
    89f8:	41c00115 	stw	r7,4(r8)
    89fc:	d8801c15 	stw	r2,112(sp)
    8a00:	d8c01b15 	stw	r3,108(sp)
    8a04:	68fff40e 	bge	r13,r3,89d8 <___vfiprintf_internal_r+0x56c>
    8a08:	1002241e 	bne	r2,zero,929c <___vfiprintf_internal_r+0xe30>
    8a0c:	843ffc04 	addi	r16,r16,-16
    8a10:	01800044 	movi	r6,1
    8a14:	000b883a 	mov	r5,zero
    8a18:	d811883a 	mov	r8,sp
    8a1c:	3c3ff316 	blt	r7,r16,89ec <___vfiprintf_internal_r+0x580>
    8a20:	da402517 	ldw	r9,148(sp)
    8a24:	e007883a 	mov	r3,fp
    8a28:	8039883a 	mov	fp,r16
    8a2c:	1821883a 	mov	r16,r3
    8a30:	d8c02417 	ldw	r3,144(sp)
    8a34:	1705883a 	add	r2,r2,fp
    8a38:	47000115 	stw	fp,4(r8)
    8a3c:	40c00015 	stw	r3,0(r8)
    8a40:	d8801c15 	stw	r2,112(sp)
    8a44:	d9801b15 	stw	r6,108(sp)
    8a48:	00c001c4 	movi	r3,7
    8a4c:	19827616 	blt	r3,r6,9428 <___vfiprintf_internal_r+0xfbc>
    8a50:	4cf9c83a 	sub	fp,r9,r19
    8a54:	42000204 	addi	r8,r8,8
    8a58:	31000044 	addi	r4,r6,1
    8a5c:	300b883a 	mov	r5,r6
    8a60:	07018516 	blt	zero,fp,9078 <___vfiprintf_internal_r+0xc0c>
    8a64:	9885883a 	add	r2,r19,r2
    8a68:	45400015 	stw	r21,0(r8)
    8a6c:	44c00115 	stw	r19,4(r8)
    8a70:	d8801c15 	stw	r2,112(sp)
    8a74:	d9001b15 	stw	r4,108(sp)
    8a78:	00c001c4 	movi	r3,7
    8a7c:	1901dd0e 	bge	r3,r4,91f4 <___vfiprintf_internal_r+0xd88>
    8a80:	1002401e 	bne	r2,zero,9384 <___vfiprintf_internal_r+0xf18>
    8a84:	d8001b15 	stw	zero,108(sp)
    8a88:	a2c0010c 	andi	r11,r20,4
    8a8c:	58000226 	beq	r11,zero,8a98 <___vfiprintf_internal_r+0x62c>
    8a90:	8ca7c83a 	sub	r19,r17,r18
    8a94:	04c2f216 	blt	zero,r19,9660 <___vfiprintf_internal_r+0x11f4>
    8a98:	8c80010e 	bge	r17,r18,8aa0 <___vfiprintf_internal_r+0x634>
    8a9c:	9023883a 	mov	r17,r18
    8aa0:	da802317 	ldw	r10,140(sp)
    8aa4:	5455883a 	add	r10,r10,r17
    8aa8:	da802315 	stw	r10,140(sp)
    8aac:	d8001b15 	stw	zero,108(sp)
    8ab0:	d811883a 	mov	r8,sp
    8ab4:	003ea206 	br	8540 <___vfiprintf_internal_r+0xd4>
    8ab8:	a5000814 	ori	r20,r20,32
    8abc:	80c00007 	ldb	r3,0(r16)
    8ac0:	003ec906 	br	85e8 <___vfiprintf_internal_r+0x17c>
    8ac4:	80c00007 	ldb	r3,0(r16)
    8ac8:	1b030926 	beq	r3,r12,96f0 <___vfiprintf_internal_r+0x1284>
    8acc:	a5000414 	ori	r20,r20,16
    8ad0:	003ec506 	br	85e8 <___vfiprintf_internal_r+0x17c>
    8ad4:	21003fcc 	andi	r4,r4,255
    8ad8:	20035e1e 	bne	r4,zero,9854 <___vfiprintf_internal_r+0x13e8>
    8adc:	a080080c 	andi	r2,r20,32
    8ae0:	1002a526 	beq	r2,zero,9578 <___vfiprintf_internal_r+0x110c>
    8ae4:	da802217 	ldw	r10,136(sp)
    8ae8:	50800017 	ldw	r2,0(r10)
    8aec:	da802317 	ldw	r10,140(sp)
    8af0:	5007d7fa 	srai	r3,r10,31
    8af4:	da802217 	ldw	r10,136(sp)
    8af8:	10c00115 	stw	r3,4(r2)
    8afc:	52800104 	addi	r10,r10,4
    8b00:	da802215 	stw	r10,136(sp)
    8b04:	da802317 	ldw	r10,140(sp)
    8b08:	12800015 	stw	r10,0(r2)
    8b0c:	003e8c06 	br	8540 <___vfiprintf_internal_r+0xd4>
    8b10:	21003fcc 	andi	r4,r4,255
    8b14:	2003511e 	bne	r4,zero,985c <___vfiprintf_internal_r+0x13f0>
    8b18:	a080080c 	andi	r2,r20,32
    8b1c:	1000a126 	beq	r2,zero,8da4 <___vfiprintf_internal_r+0x938>
    8b20:	da802217 	ldw	r10,136(sp)
    8b24:	d8001d85 	stb	zero,118(sp)
    8b28:	50800204 	addi	r2,r10,8
    8b2c:	54800017 	ldw	r18,0(r10)
    8b30:	54c00117 	ldw	r19,4(r10)
    8b34:	4802b416 	blt	r9,zero,9608 <___vfiprintf_internal_r+0x119c>
    8b38:	013fdfc4 	movi	r4,-129
    8b3c:	94c6b03a 	or	r3,r18,r19
    8b40:	d8802215 	stw	r2,136(sp)
    8b44:	a128703a 	and	r20,r20,r4
    8b48:	1800a226 	beq	r3,zero,8dd4 <___vfiprintf_internal_r+0x968>
    8b4c:	0039883a 	mov	fp,zero
    8b50:	dd401a04 	addi	r21,sp,104
    8b54:	9006d0fa 	srli	r3,r18,3
    8b58:	9808977a 	slli	r4,r19,29
    8b5c:	9826d0fa 	srli	r19,r19,3
    8b60:	948001cc 	andi	r18,r18,7
    8b64:	90800c04 	addi	r2,r18,48
    8b68:	ad7fffc4 	addi	r21,r21,-1
    8b6c:	20e4b03a 	or	r18,r4,r3
    8b70:	a8800005 	stb	r2,0(r21)
    8b74:	94c6b03a 	or	r3,r18,r19
    8b78:	183ff61e 	bne	r3,zero,8b54 <___vfiprintf_internal_r+0x6e8>
    8b7c:	a0c0004c 	andi	r3,r20,1
    8b80:	18005926 	beq	r3,zero,8ce8 <___vfiprintf_internal_r+0x87c>
    8b84:	10803fcc 	andi	r2,r2,255
    8b88:	1080201c 	xori	r2,r2,128
    8b8c:	10bfe004 	addi	r2,r2,-128
    8b90:	00c00c04 	movi	r3,48
    8b94:	10c05426 	beq	r2,r3,8ce8 <___vfiprintf_internal_r+0x87c>
    8b98:	da801e17 	ldw	r10,120(sp)
    8b9c:	a8bfffc4 	addi	r2,r21,-1
    8ba0:	a8ffffc5 	stb	r3,-1(r21)
    8ba4:	50a7c83a 	sub	r19,r10,r2
    8ba8:	102b883a 	mov	r21,r2
    8bac:	003f2f06 	br	886c <___vfiprintf_internal_r+0x400>
    8bb0:	21003fcc 	andi	r4,r4,255
    8bb4:	2003421e 	bne	r4,zero,98c0 <___vfiprintf_internal_r+0x1454>
    8bb8:	008000b4 	movhi	r2,2
    8bbc:	10a75804 	addi	r2,r2,-25248
    8bc0:	d8802615 	stw	r2,152(sp)
    8bc4:	a080080c 	andi	r2,r20,32
    8bc8:	1000aa26 	beq	r2,zero,8e74 <___vfiprintf_internal_r+0xa08>
    8bcc:	da802217 	ldw	r10,136(sp)
    8bd0:	54800017 	ldw	r18,0(r10)
    8bd4:	54c00117 	ldw	r19,4(r10)
    8bd8:	52800204 	addi	r10,r10,8
    8bdc:	da802215 	stw	r10,136(sp)
    8be0:	a080004c 	andi	r2,r20,1
    8be4:	1001d226 	beq	r2,zero,9330 <___vfiprintf_internal_r+0xec4>
    8be8:	94c4b03a 	or	r2,r18,r19
    8bec:	1002351e 	bne	r2,zero,94c4 <___vfiprintf_internal_r+0x1058>
    8bf0:	d8001d85 	stb	zero,118(sp)
    8bf4:	48022216 	blt	r9,zero,9480 <___vfiprintf_internal_r+0x1014>
    8bf8:	00bfdfc4 	movi	r2,-129
    8bfc:	a0a8703a 	and	r20,r20,r2
    8c00:	003f1506 	br	8858 <___vfiprintf_internal_r+0x3ec>
    8c04:	da802217 	ldw	r10,136(sp)
    8c08:	04800044 	movi	r18,1
    8c0c:	d8001d85 	stb	zero,118(sp)
    8c10:	50800017 	ldw	r2,0(r10)
    8c14:	52800104 	addi	r10,r10,4
    8c18:	da802215 	stw	r10,136(sp)
    8c1c:	d8801005 	stb	r2,64(sp)
    8c20:	9027883a 	mov	r19,r18
    8c24:	dd401004 	addi	r21,sp,64
    8c28:	0013883a 	mov	r9,zero
    8c2c:	003f1706 	br	888c <___vfiprintf_internal_r+0x420>
    8c30:	21003fcc 	andi	r4,r4,255
    8c34:	2003201e 	bne	r4,zero,98b8 <___vfiprintf_internal_r+0x144c>
    8c38:	a080080c 	andi	r2,r20,32
    8c3c:	10004b26 	beq	r2,zero,8d6c <___vfiprintf_internal_r+0x900>
    8c40:	da802217 	ldw	r10,136(sp)
    8c44:	50800117 	ldw	r2,4(r10)
    8c48:	54800017 	ldw	r18,0(r10)
    8c4c:	52800204 	addi	r10,r10,8
    8c50:	da802215 	stw	r10,136(sp)
    8c54:	1027883a 	mov	r19,r2
    8c58:	10022c16 	blt	r2,zero,950c <___vfiprintf_internal_r+0x10a0>
    8c5c:	df001d83 	ldbu	fp,118(sp)
    8c60:	48007216 	blt	r9,zero,8e2c <___vfiprintf_internal_r+0x9c0>
    8c64:	00ffdfc4 	movi	r3,-129
    8c68:	94c4b03a 	or	r2,r18,r19
    8c6c:	a0e8703a 	and	r20,r20,r3
    8c70:	1000cc26 	beq	r2,zero,8fa4 <___vfiprintf_internal_r+0xb38>
    8c74:	98021026 	beq	r19,zero,94b8 <___vfiprintf_internal_r+0x104c>
    8c78:	dc402415 	stw	r17,144(sp)
    8c7c:	dc002515 	stw	r16,148(sp)
    8c80:	9823883a 	mov	r17,r19
    8c84:	9021883a 	mov	r16,r18
    8c88:	dd401a04 	addi	r21,sp,104
    8c8c:	4825883a 	mov	r18,r9
    8c90:	4027883a 	mov	r19,r8
    8c94:	8009883a 	mov	r4,r16
    8c98:	880b883a 	mov	r5,r17
    8c9c:	01800284 	movi	r6,10
    8ca0:	000f883a 	mov	r7,zero
    8ca4:	000a84c0 	call	a84c <__umoddi3>
    8ca8:	10800c04 	addi	r2,r2,48
    8cac:	ad7fffc4 	addi	r21,r21,-1
    8cb0:	8009883a 	mov	r4,r16
    8cb4:	880b883a 	mov	r5,r17
    8cb8:	a8800005 	stb	r2,0(r21)
    8cbc:	01800284 	movi	r6,10
    8cc0:	000f883a 	mov	r7,zero
    8cc4:	000a2d40 	call	a2d4 <__udivdi3>
    8cc8:	1021883a 	mov	r16,r2
    8ccc:	10c4b03a 	or	r2,r2,r3
    8cd0:	1823883a 	mov	r17,r3
    8cd4:	103fef1e 	bne	r2,zero,8c94 <___vfiprintf_internal_r+0x828>
    8cd8:	dc402417 	ldw	r17,144(sp)
    8cdc:	dc002517 	ldw	r16,148(sp)
    8ce0:	9013883a 	mov	r9,r18
    8ce4:	9811883a 	mov	r8,r19
    8ce8:	da801e17 	ldw	r10,120(sp)
    8cec:	5567c83a 	sub	r19,r10,r21
    8cf0:	003ede06 	br	886c <___vfiprintf_internal_r+0x400>
    8cf4:	38803fcc 	andi	r2,r7,255
    8cf8:	1080201c 	xori	r2,r2,128
    8cfc:	10bfe004 	addi	r2,r2,-128
    8d00:	1002371e 	bne	r2,zero,95e0 <___vfiprintf_internal_r+0x1174>
    8d04:	01000044 	movi	r4,1
    8d08:	01c00804 	movi	r7,32
    8d0c:	80c00007 	ldb	r3,0(r16)
    8d10:	003e3506 	br	85e8 <___vfiprintf_internal_r+0x17c>
    8d14:	a5000054 	ori	r20,r20,1
    8d18:	80c00007 	ldb	r3,0(r16)
    8d1c:	003e3206 	br	85e8 <___vfiprintf_internal_r+0x17c>
    8d20:	a5002014 	ori	r20,r20,128
    8d24:	80c00007 	ldb	r3,0(r16)
    8d28:	003e2f06 	br	85e8 <___vfiprintf_internal_r+0x17c>
    8d2c:	8015883a 	mov	r10,r16
    8d30:	0023883a 	mov	r17,zero
    8d34:	18bff404 	addi	r2,r3,-48
    8d38:	50c00007 	ldb	r3,0(r10)
    8d3c:	8c4002a4 	muli	r17,r17,10
    8d40:	84000044 	addi	r16,r16,1
    8d44:	8015883a 	mov	r10,r16
    8d48:	1463883a 	add	r17,r2,r17
    8d4c:	18bff404 	addi	r2,r3,-48
    8d50:	30bff92e 	bgeu	r6,r2,8d38 <___vfiprintf_internal_r+0x8cc>
    8d54:	003e2506 	br	85ec <___vfiprintf_internal_r+0x180>
    8d58:	21003fcc 	andi	r4,r4,255
    8d5c:	2002d41e 	bne	r4,zero,98b0 <___vfiprintf_internal_r+0x1444>
    8d60:	a5000414 	ori	r20,r20,16
    8d64:	a080080c 	andi	r2,r20,32
    8d68:	103fb51e 	bne	r2,zero,8c40 <___vfiprintf_internal_r+0x7d4>
    8d6c:	a080040c 	andi	r2,r20,16
    8d70:	1001f826 	beq	r2,zero,9554 <___vfiprintf_internal_r+0x10e8>
    8d74:	da802217 	ldw	r10,136(sp)
    8d78:	54800017 	ldw	r18,0(r10)
    8d7c:	52800104 	addi	r10,r10,4
    8d80:	da802215 	stw	r10,136(sp)
    8d84:	9027d7fa 	srai	r19,r18,31
    8d88:	9805883a 	mov	r2,r19
    8d8c:	003fb206 	br	8c58 <___vfiprintf_internal_r+0x7ec>
    8d90:	21003fcc 	andi	r4,r4,255
    8d94:	2002c41e 	bne	r4,zero,98a8 <___vfiprintf_internal_r+0x143c>
    8d98:	a5000414 	ori	r20,r20,16
    8d9c:	a080080c 	andi	r2,r20,32
    8da0:	103f5f1e 	bne	r2,zero,8b20 <___vfiprintf_internal_r+0x6b4>
    8da4:	a080040c 	andi	r2,r20,16
    8da8:	10020f26 	beq	r2,zero,95e8 <___vfiprintf_internal_r+0x117c>
    8dac:	da802217 	ldw	r10,136(sp)
    8db0:	d8001d85 	stb	zero,118(sp)
    8db4:	0027883a 	mov	r19,zero
    8db8:	50800104 	addi	r2,r10,4
    8dbc:	54800017 	ldw	r18,0(r10)
    8dc0:	48021116 	blt	r9,zero,9608 <___vfiprintf_internal_r+0x119c>
    8dc4:	00ffdfc4 	movi	r3,-129
    8dc8:	d8802215 	stw	r2,136(sp)
    8dcc:	a0e8703a 	and	r20,r20,r3
    8dd0:	903f5e1e 	bne	r18,zero,8b4c <___vfiprintf_internal_r+0x6e0>
    8dd4:	0039883a 	mov	fp,zero
    8dd8:	4802a626 	beq	r9,zero,9874 <___vfiprintf_internal_r+0x1408>
    8ddc:	0025883a 	mov	r18,zero
    8de0:	0027883a 	mov	r19,zero
    8de4:	003f5a06 	br	8b50 <___vfiprintf_internal_r+0x6e4>
    8de8:	21003fcc 	andi	r4,r4,255
    8dec:	20029f1e 	bne	r4,zero,986c <___vfiprintf_internal_r+0x1400>
    8df0:	a5000414 	ori	r20,r20,16
    8df4:	a080080c 	andi	r2,r20,32
    8df8:	10005e1e 	bne	r2,zero,8f74 <___vfiprintf_internal_r+0xb08>
    8dfc:	a080040c 	andi	r2,r20,16
    8e00:	1001a21e 	bne	r2,zero,948c <___vfiprintf_internal_r+0x1020>
    8e04:	a080100c 	andi	r2,r20,64
    8e08:	d8001d85 	stb	zero,118(sp)
    8e0c:	da802217 	ldw	r10,136(sp)
    8e10:	1002231e 	bne	r2,zero,96a0 <___vfiprintf_internal_r+0x1234>
    8e14:	50800104 	addi	r2,r10,4
    8e18:	54800017 	ldw	r18,0(r10)
    8e1c:	0027883a 	mov	r19,zero
    8e20:	4801a00e 	bge	r9,zero,94a4 <___vfiprintf_internal_r+0x1038>
    8e24:	d8802215 	stw	r2,136(sp)
    8e28:	0039883a 	mov	fp,zero
    8e2c:	94c4b03a 	or	r2,r18,r19
    8e30:	103f901e 	bne	r2,zero,8c74 <___vfiprintf_internal_r+0x808>
    8e34:	00800044 	movi	r2,1
    8e38:	10803fcc 	andi	r2,r2,255
    8e3c:	00c00044 	movi	r3,1
    8e40:	10c05926 	beq	r2,r3,8fa8 <___vfiprintf_internal_r+0xb3c>
    8e44:	00c00084 	movi	r3,2
    8e48:	10ffe41e 	bne	r2,r3,8ddc <___vfiprintf_internal_r+0x970>
    8e4c:	0025883a 	mov	r18,zero
    8e50:	0027883a 	mov	r19,zero
    8e54:	00013d06 	br	934c <___vfiprintf_internal_r+0xee0>
    8e58:	21003fcc 	andi	r4,r4,255
    8e5c:	2002811e 	bne	r4,zero,9864 <___vfiprintf_internal_r+0x13f8>
    8e60:	008000b4 	movhi	r2,2
    8e64:	10a75304 	addi	r2,r2,-25268
    8e68:	d8802615 	stw	r2,152(sp)
    8e6c:	a080080c 	andi	r2,r20,32
    8e70:	103f561e 	bne	r2,zero,8bcc <___vfiprintf_internal_r+0x760>
    8e74:	a080040c 	andi	r2,r20,16
    8e78:	1001d126 	beq	r2,zero,95c0 <___vfiprintf_internal_r+0x1154>
    8e7c:	da802217 	ldw	r10,136(sp)
    8e80:	0027883a 	mov	r19,zero
    8e84:	54800017 	ldw	r18,0(r10)
    8e88:	52800104 	addi	r10,r10,4
    8e8c:	da802215 	stw	r10,136(sp)
    8e90:	003f5306 	br	8be0 <___vfiprintf_internal_r+0x774>
    8e94:	da802217 	ldw	r10,136(sp)
    8e98:	d8001d85 	stb	zero,118(sp)
    8e9c:	55400017 	ldw	r21,0(r10)
    8ea0:	50c00104 	addi	r3,r10,4
    8ea4:	a8024226 	beq	r21,zero,97b0 <___vfiprintf_internal_r+0x1344>
    8ea8:	48021816 	blt	r9,zero,970c <___vfiprintf_internal_r+0x12a0>
    8eac:	480d883a 	mov	r6,r9
    8eb0:	000b883a 	mov	r5,zero
    8eb4:	a809883a 	mov	r4,r21
    8eb8:	d8c02a15 	stw	r3,168(sp)
    8ebc:	da002b15 	stw	r8,172(sp)
    8ec0:	da402c15 	stw	r9,176(sp)
    8ec4:	00066680 	call	6668 <memchr>
    8ec8:	d8c02a17 	ldw	r3,168(sp)
    8ecc:	da002b17 	ldw	r8,172(sp)
    8ed0:	da402c17 	ldw	r9,176(sp)
    8ed4:	10024826 	beq	r2,zero,97f8 <___vfiprintf_internal_r+0x138c>
    8ed8:	1567c83a 	sub	r19,r2,r21
    8edc:	df001d83 	ldbu	fp,118(sp)
    8ee0:	d8c02215 	stw	r3,136(sp)
    8ee4:	0013883a 	mov	r9,zero
    8ee8:	003e6006 	br	886c <___vfiprintf_internal_r+0x400>
    8eec:	21003fcc 	andi	r4,r4,255
    8ef0:	203fc026 	beq	r4,zero,8df4 <___vfiprintf_internal_r+0x988>
    8ef4:	d9c01d85 	stb	r7,118(sp)
    8ef8:	003fbe06 	br	8df4 <___vfiprintf_internal_r+0x988>
    8efc:	da802217 	ldw	r10,136(sp)
    8f00:	54400017 	ldw	r17,0(r10)
    8f04:	50800104 	addi	r2,r10,4
    8f08:	883e3b16 	blt	r17,zero,87f8 <___vfiprintf_internal_r+0x38c>
    8f0c:	d8802215 	stw	r2,136(sp)
    8f10:	80c00007 	ldb	r3,0(r16)
    8f14:	003db406 	br	85e8 <___vfiprintf_internal_r+0x17c>
    8f18:	01000044 	movi	r4,1
    8f1c:	01c00ac4 	movi	r7,43
    8f20:	80c00007 	ldb	r3,0(r16)
    8f24:	003db006 	br	85e8 <___vfiprintf_internal_r+0x17c>
    8f28:	80c00007 	ldb	r3,0(r16)
    8f2c:	82800044 	addi	r10,r16,1
    8f30:	1b423c26 	beq	r3,r13,9824 <___vfiprintf_internal_r+0x13b8>
    8f34:	18bff404 	addi	r2,r3,-48
    8f38:	0013883a 	mov	r9,zero
    8f3c:	30822b36 	bltu	r6,r2,97ec <___vfiprintf_internal_r+0x1380>
    8f40:	50c00007 	ldb	r3,0(r10)
    8f44:	4a4002a4 	muli	r9,r9,10
    8f48:	54000044 	addi	r16,r10,1
    8f4c:	8015883a 	mov	r10,r16
    8f50:	4893883a 	add	r9,r9,r2
    8f54:	18bff404 	addi	r2,r3,-48
    8f58:	30bff92e 	bgeu	r6,r2,8f40 <___vfiprintf_internal_r+0xad4>
    8f5c:	483da30e 	bge	r9,zero,85ec <___vfiprintf_internal_r+0x180>
    8f60:	027fffc4 	movi	r9,-1
    8f64:	003da106 	br	85ec <___vfiprintf_internal_r+0x180>
    8f68:	a5001014 	ori	r20,r20,64
    8f6c:	80c00007 	ldb	r3,0(r16)
    8f70:	003d9d06 	br	85e8 <___vfiprintf_internal_r+0x17c>
    8f74:	da802217 	ldw	r10,136(sp)
    8f78:	d8001d85 	stb	zero,118(sp)
    8f7c:	50c00204 	addi	r3,r10,8
    8f80:	54800017 	ldw	r18,0(r10)
    8f84:	54c00117 	ldw	r19,4(r10)
    8f88:	4801ca16 	blt	r9,zero,96b4 <___vfiprintf_internal_r+0x1248>
    8f8c:	013fdfc4 	movi	r4,-129
    8f90:	94c4b03a 	or	r2,r18,r19
    8f94:	d8c02215 	stw	r3,136(sp)
    8f98:	a128703a 	and	r20,r20,r4
    8f9c:	0039883a 	mov	fp,zero
    8fa0:	103f341e 	bne	r2,zero,8c74 <___vfiprintf_internal_r+0x808>
    8fa4:	483e2e26 	beq	r9,zero,8860 <___vfiprintf_internal_r+0x3f4>
    8fa8:	0025883a 	mov	r18,zero
    8fac:	94800c04 	addi	r18,r18,48
    8fb0:	dc8019c5 	stb	r18,103(sp)
    8fb4:	dcc02717 	ldw	r19,156(sp)
    8fb8:	dd4019c4 	addi	r21,sp,103
    8fbc:	003e2b06 	br	886c <___vfiprintf_internal_r+0x400>
    8fc0:	21003fcc 	andi	r4,r4,255
    8fc4:	2002361e 	bne	r4,zero,98a0 <___vfiprintf_internal_r+0x1434>
    8fc8:	1801c126 	beq	r3,zero,96d0 <___vfiprintf_internal_r+0x1264>
    8fcc:	04800044 	movi	r18,1
    8fd0:	d8c01005 	stb	r3,64(sp)
    8fd4:	d8001d85 	stb	zero,118(sp)
    8fd8:	9027883a 	mov	r19,r18
    8fdc:	dd401004 	addi	r21,sp,64
    8fe0:	003f1106 	br	8c28 <___vfiprintf_internal_r+0x7bc>
    8fe4:	d9402117 	ldw	r5,132(sp)
    8fe8:	d9002017 	ldw	r4,128(sp)
    8fec:	d9801a04 	addi	r6,sp,104
    8ff0:	d9c02b15 	stw	r7,172(sp)
    8ff4:	dbc02a15 	stw	r15,168(sp)
    8ff8:	00083580 	call	8358 <__sprint_r.part.0>
    8ffc:	d9c02b17 	ldw	r7,172(sp)
    9000:	dbc02a17 	ldw	r15,168(sp)
    9004:	10006d1e 	bne	r2,zero,91bc <___vfiprintf_internal_r+0xd50>
    9008:	d9801b17 	ldw	r6,108(sp)
    900c:	d8801c17 	ldw	r2,112(sp)
    9010:	d811883a 	mov	r8,sp
    9014:	31400044 	addi	r5,r6,1
    9018:	003e3306 	br	88e8 <___vfiprintf_internal_r+0x47c>
    901c:	d9401b17 	ldw	r5,108(sp)
    9020:	d8801c17 	ldw	r2,112(sp)
    9024:	29000044 	addi	r4,r5,1
    9028:	d8c01d87 	ldb	r3,118(sp)
    902c:	183e4d26 	beq	r3,zero,8964 <___vfiprintf_internal_r+0x4f8>
    9030:	00c00044 	movi	r3,1
    9034:	d9401d84 	addi	r5,sp,118
    9038:	10c5883a 	add	r2,r2,r3
    903c:	41400015 	stw	r5,0(r8)
    9040:	40c00115 	stw	r3,4(r8)
    9044:	d8801c15 	stw	r2,112(sp)
    9048:	d9001b15 	stw	r4,108(sp)
    904c:	014001c4 	movi	r5,7
    9050:	2900a90e 	bge	r5,r4,92f8 <___vfiprintf_internal_r+0xe8c>
    9054:	1000da1e 	bne	r2,zero,93c0 <___vfiprintf_internal_r+0xf54>
    9058:	7000ab1e 	bne	r14,zero,9308 <___vfiprintf_internal_r+0xe9c>
    905c:	000b883a 	mov	r5,zero
    9060:	1809883a 	mov	r4,r3
    9064:	d811883a 	mov	r8,sp
    9068:	00c02004 	movi	r3,128
    906c:	e0fe4d26 	beq	fp,r3,89a4 <___vfiprintf_internal_r+0x538>
    9070:	4cf9c83a 	sub	fp,r9,r19
    9074:	073e7b0e 	bge	zero,fp,8a64 <___vfiprintf_internal_r+0x5f8>
    9078:	01c00404 	movi	r7,16
    907c:	3f01900e 	bge	r7,fp,96c0 <___vfiprintf_internal_r+0x1254>
    9080:	00c000b4 	movhi	r3,2
    9084:	18e7b804 	addi	r3,r3,-24864
    9088:	d8c02415 	stw	r3,144(sp)
    908c:	034001c4 	movi	r13,7
    9090:	00000506 	br	90a8 <___vfiprintf_internal_r+0xc3c>
    9094:	29000084 	addi	r4,r5,2
    9098:	42000204 	addi	r8,r8,8
    909c:	180b883a 	mov	r5,r3
    90a0:	e73ffc04 	addi	fp,fp,-16
    90a4:	3f000d0e 	bge	r7,fp,90dc <___vfiprintf_internal_r+0xc70>
    90a8:	10800404 	addi	r2,r2,16
    90ac:	28c00044 	addi	r3,r5,1
    90b0:	45c00015 	stw	r23,0(r8)
    90b4:	41c00115 	stw	r7,4(r8)
    90b8:	d8801c15 	stw	r2,112(sp)
    90bc:	d8c01b15 	stw	r3,108(sp)
    90c0:	68fff40e 	bge	r13,r3,9094 <___vfiprintf_internal_r+0xc28>
    90c4:	1000101e 	bne	r2,zero,9108 <___vfiprintf_internal_r+0xc9c>
    90c8:	e73ffc04 	addi	fp,fp,-16
    90cc:	01000044 	movi	r4,1
    90d0:	000b883a 	mov	r5,zero
    90d4:	d811883a 	mov	r8,sp
    90d8:	3f3ff316 	blt	r7,fp,90a8 <___vfiprintf_internal_r+0xc3c>
    90dc:	da802417 	ldw	r10,144(sp)
    90e0:	1705883a 	add	r2,r2,fp
    90e4:	47000115 	stw	fp,4(r8)
    90e8:	42800015 	stw	r10,0(r8)
    90ec:	d8801c15 	stw	r2,112(sp)
    90f0:	d9001b15 	stw	r4,108(sp)
    90f4:	00c001c4 	movi	r3,7
    90f8:	19003616 	blt	r3,r4,91d4 <___vfiprintf_internal_r+0xd68>
    90fc:	42000204 	addi	r8,r8,8
    9100:	21000044 	addi	r4,r4,1
    9104:	003e5706 	br	8a64 <___vfiprintf_internal_r+0x5f8>
    9108:	d9402117 	ldw	r5,132(sp)
    910c:	d9002017 	ldw	r4,128(sp)
    9110:	d9801a04 	addi	r6,sp,104
    9114:	d9c02b15 	stw	r7,172(sp)
    9118:	db402a15 	stw	r13,168(sp)
    911c:	00083580 	call	8358 <__sprint_r.part.0>
    9120:	d9c02b17 	ldw	r7,172(sp)
    9124:	db402a17 	ldw	r13,168(sp)
    9128:	1000241e 	bne	r2,zero,91bc <___vfiprintf_internal_r+0xd50>
    912c:	d9401b17 	ldw	r5,108(sp)
    9130:	d8801c17 	ldw	r2,112(sp)
    9134:	d811883a 	mov	r8,sp
    9138:	29000044 	addi	r4,r5,1
    913c:	003fd806 	br	90a0 <___vfiprintf_internal_r+0xc34>
    9140:	d9401b17 	ldw	r5,108(sp)
    9144:	00c000b4 	movhi	r3,2
    9148:	18e7bc04 	addi	r3,r3,-24848
    914c:	d8c02415 	stw	r3,144(sp)
    9150:	29400044 	addi	r5,r5,1
    9154:	d8c02417 	ldw	r3,144(sp)
    9158:	14c5883a 	add	r2,r2,r19
    915c:	44c00115 	stw	r19,4(r8)
    9160:	40c00015 	stw	r3,0(r8)
    9164:	d8801c15 	stw	r2,112(sp)
    9168:	d9401b15 	stw	r5,108(sp)
    916c:	00c001c4 	movi	r3,7
    9170:	1940070e 	bge	r3,r5,9190 <___vfiprintf_internal_r+0xd24>
    9174:	103e4826 	beq	r2,zero,8a98 <___vfiprintf_internal_r+0x62c>
    9178:	d9402117 	ldw	r5,132(sp)
    917c:	d9002017 	ldw	r4,128(sp)
    9180:	d9801a04 	addi	r6,sp,104
    9184:	00083580 	call	8358 <__sprint_r.part.0>
    9188:	10000c1e 	bne	r2,zero,91bc <___vfiprintf_internal_r+0xd50>
    918c:	d8801c17 	ldw	r2,112(sp)
    9190:	8c80010e 	bge	r17,r18,9198 <___vfiprintf_internal_r+0xd2c>
    9194:	9023883a 	mov	r17,r18
    9198:	da802317 	ldw	r10,140(sp)
    919c:	5455883a 	add	r10,r10,r17
    91a0:	da802315 	stw	r10,140(sp)
    91a4:	103e4126 	beq	r2,zero,8aac <___vfiprintf_internal_r+0x640>
    91a8:	d9402117 	ldw	r5,132(sp)
    91ac:	d9002017 	ldw	r4,128(sp)
    91b0:	d9801a04 	addi	r6,sp,104
    91b4:	00083580 	call	8358 <__sprint_r.part.0>
    91b8:	103e3c26 	beq	r2,zero,8aac <___vfiprintf_internal_r+0x640>
    91bc:	dd002117 	ldw	r20,132(sp)
    91c0:	a080030b 	ldhu	r2,12(r20)
    91c4:	1080100c 	andi	r2,r2,64
    91c8:	1001231e 	bne	r2,zero,9658 <___vfiprintf_internal_r+0x11ec>
    91cc:	d8802317 	ldw	r2,140(sp)
    91d0:	003d7b06 	br	87c0 <___vfiprintf_internal_r+0x354>
    91d4:	1000991e 	bne	r2,zero,943c <___vfiprintf_internal_r+0xfd0>
    91d8:	00c00044 	movi	r3,1
    91dc:	9805883a 	mov	r2,r19
    91e0:	dd400015 	stw	r21,0(sp)
    91e4:	dcc00115 	stw	r19,4(sp)
    91e8:	dcc01c15 	stw	r19,112(sp)
    91ec:	d8c01b15 	stw	r3,108(sp)
    91f0:	d811883a 	mov	r8,sp
    91f4:	42000204 	addi	r8,r8,8
    91f8:	a2c0010c 	andi	r11,r20,4
    91fc:	583fe426 	beq	r11,zero,9190 <___vfiprintf_internal_r+0xd24>
    9200:	8ca7c83a 	sub	r19,r17,r18
    9204:	04ffe20e 	bge	zero,r19,9190 <___vfiprintf_internal_r+0xd24>
    9208:	01c00404 	movi	r7,16
    920c:	3cffcc0e 	bge	r7,r19,9140 <___vfiprintf_internal_r+0xcd4>
    9210:	028000b4 	movhi	r10,2
    9214:	52a7bc04 	addi	r10,r10,-24848
    9218:	d9001b17 	ldw	r4,108(sp)
    921c:	da802415 	stw	r10,144(sp)
    9220:	382b883a 	mov	r21,r7
    9224:	050001c4 	movi	r20,7
    9228:	df002017 	ldw	fp,128(sp)
    922c:	00000506 	br	9244 <___vfiprintf_internal_r+0xdd8>
    9230:	21400084 	addi	r5,r4,2
    9234:	42000204 	addi	r8,r8,8
    9238:	1809883a 	mov	r4,r3
    923c:	9cfffc04 	addi	r19,r19,-16
    9240:	acffc40e 	bge	r21,r19,9154 <___vfiprintf_internal_r+0xce8>
    9244:	10800404 	addi	r2,r2,16
    9248:	20c00044 	addi	r3,r4,1
    924c:	45800015 	stw	r22,0(r8)
    9250:	45400115 	stw	r21,4(r8)
    9254:	d8801c15 	stw	r2,112(sp)
    9258:	d8c01b15 	stw	r3,108(sp)
    925c:	a0fff40e 	bge	r20,r3,9230 <___vfiprintf_internal_r+0xdc4>
    9260:	1000041e 	bne	r2,zero,9274 <___vfiprintf_internal_r+0xe08>
    9264:	01400044 	movi	r5,1
    9268:	0009883a 	mov	r4,zero
    926c:	d811883a 	mov	r8,sp
    9270:	003ff206 	br	923c <___vfiprintf_internal_r+0xdd0>
    9274:	d9402117 	ldw	r5,132(sp)
    9278:	d9801a04 	addi	r6,sp,104
    927c:	e009883a 	mov	r4,fp
    9280:	00083580 	call	8358 <__sprint_r.part.0>
    9284:	103fcd1e 	bne	r2,zero,91bc <___vfiprintf_internal_r+0xd50>
    9288:	d9001b17 	ldw	r4,108(sp)
    928c:	d8801c17 	ldw	r2,112(sp)
    9290:	d811883a 	mov	r8,sp
    9294:	21400044 	addi	r5,r4,1
    9298:	003fe806 	br	923c <___vfiprintf_internal_r+0xdd0>
    929c:	d9402117 	ldw	r5,132(sp)
    92a0:	d9002017 	ldw	r4,128(sp)
    92a4:	d9801a04 	addi	r6,sp,104
    92a8:	d9c02b15 	stw	r7,172(sp)
    92ac:	db402a15 	stw	r13,168(sp)
    92b0:	00083580 	call	8358 <__sprint_r.part.0>
    92b4:	d9c02b17 	ldw	r7,172(sp)
    92b8:	db402a17 	ldw	r13,168(sp)
    92bc:	103fbf1e 	bne	r2,zero,91bc <___vfiprintf_internal_r+0xd50>
    92c0:	d9401b17 	ldw	r5,108(sp)
    92c4:	d8801c17 	ldw	r2,112(sp)
    92c8:	d811883a 	mov	r8,sp
    92cc:	29800044 	addi	r6,r5,1
    92d0:	003dc406 	br	89e4 <___vfiprintf_internal_r+0x578>
    92d4:	1000d21e 	bne	r2,zero,9620 <___vfiprintf_internal_r+0x11b4>
    92d8:	d8c01d87 	ldb	r3,118(sp)
    92dc:	18009526 	beq	r3,zero,9534 <___vfiprintf_internal_r+0x10c8>
    92e0:	00800044 	movi	r2,1
    92e4:	d8c01d84 	addi	r3,sp,118
    92e8:	1009883a 	mov	r4,r2
    92ec:	d8c00015 	stw	r3,0(sp)
    92f0:	d8800115 	stw	r2,4(sp)
    92f4:	d811883a 	mov	r8,sp
    92f8:	200b883a 	mov	r5,r4
    92fc:	42000204 	addi	r8,r8,8
    9300:	21000044 	addi	r4,r4,1
    9304:	003d9706 	br	8964 <___vfiprintf_internal_r+0x4f8>
    9308:	d9001d04 	addi	r4,sp,116
    930c:	00800084 	movi	r2,2
    9310:	d9000015 	stw	r4,0(sp)
    9314:	d8800115 	stw	r2,4(sp)
    9318:	1809883a 	mov	r4,r3
    931c:	d811883a 	mov	r8,sp
    9320:	200b883a 	mov	r5,r4
    9324:	42000204 	addi	r8,r8,8
    9328:	21000044 	addi	r4,r4,1
    932c:	003f4e06 	br	9068 <___vfiprintf_internal_r+0xbfc>
    9330:	d8001d85 	stb	zero,118(sp)
    9334:	48005016 	blt	r9,zero,9478 <___vfiprintf_internal_r+0x100c>
    9338:	00ffdfc4 	movi	r3,-129
    933c:	94c4b03a 	or	r2,r18,r19
    9340:	a0e8703a 	and	r20,r20,r3
    9344:	103d4426 	beq	r2,zero,8858 <___vfiprintf_internal_r+0x3ec>
    9348:	0039883a 	mov	fp,zero
    934c:	d9002617 	ldw	r4,152(sp)
    9350:	dd401a04 	addi	r21,sp,104
    9354:	908003cc 	andi	r2,r18,15
    9358:	9806973a 	slli	r3,r19,28
    935c:	2085883a 	add	r2,r4,r2
    9360:	9024d13a 	srli	r18,r18,4
    9364:	10800003 	ldbu	r2,0(r2)
    9368:	9826d13a 	srli	r19,r19,4
    936c:	ad7fffc4 	addi	r21,r21,-1
    9370:	1ca4b03a 	or	r18,r3,r18
    9374:	a8800005 	stb	r2,0(r21)
    9378:	94c4b03a 	or	r2,r18,r19
    937c:	103ff51e 	bne	r2,zero,9354 <___vfiprintf_internal_r+0xee8>
    9380:	003e5906 	br	8ce8 <___vfiprintf_internal_r+0x87c>
    9384:	d9402117 	ldw	r5,132(sp)
    9388:	d9002017 	ldw	r4,128(sp)
    938c:	d9801a04 	addi	r6,sp,104
    9390:	00083580 	call	8358 <__sprint_r.part.0>
    9394:	103f891e 	bne	r2,zero,91bc <___vfiprintf_internal_r+0xd50>
    9398:	d8801c17 	ldw	r2,112(sp)
    939c:	d811883a 	mov	r8,sp
    93a0:	003f9506 	br	91f8 <___vfiprintf_internal_r+0xd8c>
    93a4:	d9402117 	ldw	r5,132(sp)
    93a8:	d9002017 	ldw	r4,128(sp)
    93ac:	d9801a04 	addi	r6,sp,104
    93b0:	00083580 	call	8358 <__sprint_r.part.0>
    93b4:	103f811e 	bne	r2,zero,91bc <___vfiprintf_internal_r+0xd50>
    93b8:	d811883a 	mov	r8,sp
    93bc:	003ced06 	br	8774 <___vfiprintf_internal_r+0x308>
    93c0:	d9402117 	ldw	r5,132(sp)
    93c4:	d9002017 	ldw	r4,128(sp)
    93c8:	d9801a04 	addi	r6,sp,104
    93cc:	da402c15 	stw	r9,176(sp)
    93d0:	db802a15 	stw	r14,168(sp)
    93d4:	00083580 	call	8358 <__sprint_r.part.0>
    93d8:	da402c17 	ldw	r9,176(sp)
    93dc:	db802a17 	ldw	r14,168(sp)
    93e0:	103f761e 	bne	r2,zero,91bc <___vfiprintf_internal_r+0xd50>
    93e4:	d9401b17 	ldw	r5,108(sp)
    93e8:	d8801c17 	ldw	r2,112(sp)
    93ec:	d811883a 	mov	r8,sp
    93f0:	29000044 	addi	r4,r5,1
    93f4:	003d5b06 	br	8964 <___vfiprintf_internal_r+0x4f8>
    93f8:	d9402117 	ldw	r5,132(sp)
    93fc:	d9002017 	ldw	r4,128(sp)
    9400:	d9801a04 	addi	r6,sp,104
    9404:	da402c15 	stw	r9,176(sp)
    9408:	00083580 	call	8358 <__sprint_r.part.0>
    940c:	da402c17 	ldw	r9,176(sp)
    9410:	103f6a1e 	bne	r2,zero,91bc <___vfiprintf_internal_r+0xd50>
    9414:	d9401b17 	ldw	r5,108(sp)
    9418:	d8801c17 	ldw	r2,112(sp)
    941c:	d811883a 	mov	r8,sp
    9420:	29000044 	addi	r4,r5,1
    9424:	003f1006 	br	9068 <___vfiprintf_internal_r+0xbfc>
    9428:	1000c31e 	bne	r2,zero,9738 <___vfiprintf_internal_r+0x12cc>
    942c:	01000044 	movi	r4,1
    9430:	000b883a 	mov	r5,zero
    9434:	d811883a 	mov	r8,sp
    9438:	003f0d06 	br	9070 <___vfiprintf_internal_r+0xc04>
    943c:	d9402117 	ldw	r5,132(sp)
    9440:	d9002017 	ldw	r4,128(sp)
    9444:	d9801a04 	addi	r6,sp,104
    9448:	00083580 	call	8358 <__sprint_r.part.0>
    944c:	103f5b1e 	bne	r2,zero,91bc <___vfiprintf_internal_r+0xd50>
    9450:	d9001b17 	ldw	r4,108(sp)
    9454:	d8801c17 	ldw	r2,112(sp)
    9458:	d811883a 	mov	r8,sp
    945c:	21000044 	addi	r4,r4,1
    9460:	003d8006 	br	8a64 <___vfiprintf_internal_r+0x5f8>
    9464:	010000b4 	movhi	r4,2
    9468:	21275804 	addi	r4,r4,-25248
    946c:	d9002615 	stw	r4,152(sp)
    9470:	d8c02215 	stw	r3,136(sp)
    9474:	1029883a 	mov	r20,r2
    9478:	94c4b03a 	or	r2,r18,r19
    947c:	103fb21e 	bne	r2,zero,9348 <___vfiprintf_internal_r+0xedc>
    9480:	0039883a 	mov	fp,zero
    9484:	00800084 	movi	r2,2
    9488:	003e6b06 	br	8e38 <___vfiprintf_internal_r+0x9cc>
    948c:	da802217 	ldw	r10,136(sp)
    9490:	d8001d85 	stb	zero,118(sp)
    9494:	0027883a 	mov	r19,zero
    9498:	50800104 	addi	r2,r10,4
    949c:	54800017 	ldw	r18,0(r10)
    94a0:	483e6016 	blt	r9,zero,8e24 <___vfiprintf_internal_r+0x9b8>
    94a4:	00ffdfc4 	movi	r3,-129
    94a8:	d8802215 	stw	r2,136(sp)
    94ac:	a0e8703a 	and	r20,r20,r3
    94b0:	0039883a 	mov	fp,zero
    94b4:	903ebb26 	beq	r18,zero,8fa4 <___vfiprintf_internal_r+0xb38>
    94b8:	00800244 	movi	r2,9
    94bc:	14bdee36 	bltu	r2,r18,8c78 <___vfiprintf_internal_r+0x80c>
    94c0:	003eba06 	br	8fac <___vfiprintf_internal_r+0xb40>
    94c4:	00800c04 	movi	r2,48
    94c8:	d8c01d45 	stb	r3,117(sp)
    94cc:	d8801d05 	stb	r2,116(sp)
    94d0:	d8001d85 	stb	zero,118(sp)
    94d4:	a0c00094 	ori	r3,r20,2
    94d8:	4800a916 	blt	r9,zero,9780 <___vfiprintf_internal_r+0x1314>
    94dc:	00bfdfc4 	movi	r2,-129
    94e0:	a096703a 	and	r11,r20,r2
    94e4:	5d000094 	ori	r20,r11,2
    94e8:	0039883a 	mov	fp,zero
    94ec:	003f9706 	br	934c <___vfiprintf_internal_r+0xee0>
    94f0:	8025883a 	mov	r18,r16
    94f4:	003c2e06 	br	85b0 <___vfiprintf_internal_r+0x144>
    94f8:	008000b4 	movhi	r2,2
    94fc:	10a75804 	addi	r2,r2,-25248
    9500:	0039883a 	mov	fp,zero
    9504:	d8802615 	stw	r2,152(sp)
    9508:	003f9006 	br	934c <___vfiprintf_internal_r+0xee0>
    950c:	04a5c83a 	sub	r18,zero,r18
    9510:	07000b44 	movi	fp,45
    9514:	9004c03a 	cmpne	r2,r18,zero
    9518:	04e7c83a 	sub	r19,zero,r19
    951c:	df001d85 	stb	fp,118(sp)
    9520:	98a7c83a 	sub	r19,r19,r2
    9524:	48009f16 	blt	r9,zero,97a4 <___vfiprintf_internal_r+0x1338>
    9528:	00bfdfc4 	movi	r2,-129
    952c:	a0a8703a 	and	r20,r20,r2
    9530:	003dd006 	br	8c74 <___vfiprintf_internal_r+0x808>
    9534:	70004c26 	beq	r14,zero,9668 <___vfiprintf_internal_r+0x11fc>
    9538:	00800084 	movi	r2,2
    953c:	d8c01d04 	addi	r3,sp,116
    9540:	d8c00015 	stw	r3,0(sp)
    9544:	d8800115 	stw	r2,4(sp)
    9548:	01000044 	movi	r4,1
    954c:	d811883a 	mov	r8,sp
    9550:	003f7306 	br	9320 <___vfiprintf_internal_r+0xeb4>
    9554:	a080100c 	andi	r2,r20,64
    9558:	da802217 	ldw	r10,136(sp)
    955c:	103e0626 	beq	r2,zero,8d78 <___vfiprintf_internal_r+0x90c>
    9560:	5480000f 	ldh	r18,0(r10)
    9564:	52800104 	addi	r10,r10,4
    9568:	da802215 	stw	r10,136(sp)
    956c:	9027d7fa 	srai	r19,r18,31
    9570:	9805883a 	mov	r2,r19
    9574:	003db806 	br	8c58 <___vfiprintf_internal_r+0x7ec>
    9578:	a080040c 	andi	r2,r20,16
    957c:	1000091e 	bne	r2,zero,95a4 <___vfiprintf_internal_r+0x1138>
    9580:	a2c0100c 	andi	r11,r20,64
    9584:	58000726 	beq	r11,zero,95a4 <___vfiprintf_internal_r+0x1138>
    9588:	da802217 	ldw	r10,136(sp)
    958c:	50800017 	ldw	r2,0(r10)
    9590:	52800104 	addi	r10,r10,4
    9594:	da802215 	stw	r10,136(sp)
    9598:	da802317 	ldw	r10,140(sp)
    959c:	1280000d 	sth	r10,0(r2)
    95a0:	003be706 	br	8540 <___vfiprintf_internal_r+0xd4>
    95a4:	da802217 	ldw	r10,136(sp)
    95a8:	50800017 	ldw	r2,0(r10)
    95ac:	52800104 	addi	r10,r10,4
    95b0:	da802215 	stw	r10,136(sp)
    95b4:	da802317 	ldw	r10,140(sp)
    95b8:	12800015 	stw	r10,0(r2)
    95bc:	003be006 	br	8540 <___vfiprintf_internal_r+0xd4>
    95c0:	a080100c 	andi	r2,r20,64
    95c4:	da802217 	ldw	r10,136(sp)
    95c8:	10003026 	beq	r2,zero,968c <___vfiprintf_internal_r+0x1220>
    95cc:	5480000b 	ldhu	r18,0(r10)
    95d0:	52800104 	addi	r10,r10,4
    95d4:	0027883a 	mov	r19,zero
    95d8:	da802215 	stw	r10,136(sp)
    95dc:	003d8006 	br	8be0 <___vfiprintf_internal_r+0x774>
    95e0:	80c00007 	ldb	r3,0(r16)
    95e4:	003c0006 	br	85e8 <___vfiprintf_internal_r+0x17c>
    95e8:	a080100c 	andi	r2,r20,64
    95ec:	d8001d85 	stb	zero,118(sp)
    95f0:	da802217 	ldw	r10,136(sp)
    95f4:	1000201e 	bne	r2,zero,9678 <___vfiprintf_internal_r+0x120c>
    95f8:	50800104 	addi	r2,r10,4
    95fc:	54800017 	ldw	r18,0(r10)
    9600:	0027883a 	mov	r19,zero
    9604:	483def0e 	bge	r9,zero,8dc4 <___vfiprintf_internal_r+0x958>
    9608:	94c6b03a 	or	r3,r18,r19
    960c:	d8802215 	stw	r2,136(sp)
    9610:	183d4e1e 	bne	r3,zero,8b4c <___vfiprintf_internal_r+0x6e0>
    9614:	0039883a 	mov	fp,zero
    9618:	0005883a 	mov	r2,zero
    961c:	003e0606 	br	8e38 <___vfiprintf_internal_r+0x9cc>
    9620:	d9402117 	ldw	r5,132(sp)
    9624:	d9002017 	ldw	r4,128(sp)
    9628:	d9801a04 	addi	r6,sp,104
    962c:	da402c15 	stw	r9,176(sp)
    9630:	db802a15 	stw	r14,168(sp)
    9634:	00083580 	call	8358 <__sprint_r.part.0>
    9638:	da402c17 	ldw	r9,176(sp)
    963c:	db802a17 	ldw	r14,168(sp)
    9640:	103ede1e 	bne	r2,zero,91bc <___vfiprintf_internal_r+0xd50>
    9644:	d9401b17 	ldw	r5,108(sp)
    9648:	d8801c17 	ldw	r2,112(sp)
    964c:	d811883a 	mov	r8,sp
    9650:	29000044 	addi	r4,r5,1
    9654:	003e7406 	br	9028 <___vfiprintf_internal_r+0xbbc>
    9658:	00bfffc4 	movi	r2,-1
    965c:	003c5806 	br	87c0 <___vfiprintf_internal_r+0x354>
    9660:	d811883a 	mov	r8,sp
    9664:	003ee806 	br	9208 <___vfiprintf_internal_r+0xd9c>
    9668:	000b883a 	mov	r5,zero
    966c:	01000044 	movi	r4,1
    9670:	d811883a 	mov	r8,sp
    9674:	003e7c06 	br	9068 <___vfiprintf_internal_r+0xbfc>
    9678:	50800104 	addi	r2,r10,4
    967c:	5480000b 	ldhu	r18,0(r10)
    9680:	0027883a 	mov	r19,zero
    9684:	483dcf0e 	bge	r9,zero,8dc4 <___vfiprintf_internal_r+0x958>
    9688:	003fdf06 	br	9608 <___vfiprintf_internal_r+0x119c>
    968c:	54800017 	ldw	r18,0(r10)
    9690:	52800104 	addi	r10,r10,4
    9694:	0027883a 	mov	r19,zero
    9698:	da802215 	stw	r10,136(sp)
    969c:	003d5006 	br	8be0 <___vfiprintf_internal_r+0x774>
    96a0:	50800104 	addi	r2,r10,4
    96a4:	5480000b 	ldhu	r18,0(r10)
    96a8:	0027883a 	mov	r19,zero
    96ac:	483f7d0e 	bge	r9,zero,94a4 <___vfiprintf_internal_r+0x1038>
    96b0:	003ddc06 	br	8e24 <___vfiprintf_internal_r+0x9b8>
    96b4:	d8c02215 	stw	r3,136(sp)
    96b8:	0039883a 	mov	fp,zero
    96bc:	003ddb06 	br	8e2c <___vfiprintf_internal_r+0x9c0>
    96c0:	028000b4 	movhi	r10,2
    96c4:	52a7b804 	addi	r10,r10,-24864
    96c8:	da802415 	stw	r10,144(sp)
    96cc:	003e8306 	br	90dc <___vfiprintf_internal_r+0xc70>
    96d0:	d8801c17 	ldw	r2,112(sp)
    96d4:	dd002117 	ldw	r20,132(sp)
    96d8:	103eb926 	beq	r2,zero,91c0 <___vfiprintf_internal_r+0xd54>
    96dc:	d9002017 	ldw	r4,128(sp)
    96e0:	d9801a04 	addi	r6,sp,104
    96e4:	a00b883a 	mov	r5,r20
    96e8:	00083580 	call	8358 <__sprint_r.part.0>
    96ec:	003eb406 	br	91c0 <___vfiprintf_internal_r+0xd54>
    96f0:	80c00043 	ldbu	r3,1(r16)
    96f4:	a5000814 	ori	r20,r20,32
    96f8:	84000044 	addi	r16,r16,1
    96fc:	18c03fcc 	andi	r3,r3,255
    9700:	18c0201c 	xori	r3,r3,128
    9704:	18ffe004 	addi	r3,r3,-128
    9708:	003bb706 	br	85e8 <___vfiprintf_internal_r+0x17c>
    970c:	a809883a 	mov	r4,r21
    9710:	d8c02a15 	stw	r3,168(sp)
    9714:	da002b15 	stw	r8,172(sp)
    9718:	0000dc00 	call	dc0 <strlen>
    971c:	d8c02a17 	ldw	r3,168(sp)
    9720:	1027883a 	mov	r19,r2
    9724:	df001d83 	ldbu	fp,118(sp)
    9728:	d8c02215 	stw	r3,136(sp)
    972c:	0013883a 	mov	r9,zero
    9730:	da002b17 	ldw	r8,172(sp)
    9734:	003c4d06 	br	886c <___vfiprintf_internal_r+0x400>
    9738:	d9402117 	ldw	r5,132(sp)
    973c:	d9002017 	ldw	r4,128(sp)
    9740:	d9801a04 	addi	r6,sp,104
    9744:	da402c15 	stw	r9,176(sp)
    9748:	00083580 	call	8358 <__sprint_r.part.0>
    974c:	da402c17 	ldw	r9,176(sp)
    9750:	103e9a1e 	bne	r2,zero,91bc <___vfiprintf_internal_r+0xd50>
    9754:	d9401b17 	ldw	r5,108(sp)
    9758:	d8801c17 	ldw	r2,112(sp)
    975c:	d811883a 	mov	r8,sp
    9760:	29000044 	addi	r4,r5,1
    9764:	003e4206 	br	9070 <___vfiprintf_internal_r+0xc04>
    9768:	d9401b17 	ldw	r5,108(sp)
    976c:	010000b4 	movhi	r4,2
    9770:	2127bc04 	addi	r4,r4,-24848
    9774:	d9002415 	stw	r4,144(sp)
    9778:	29400044 	addi	r5,r5,1
    977c:	003c6d06 	br	8934 <___vfiprintf_internal_r+0x4c8>
    9780:	0039883a 	mov	fp,zero
    9784:	00800084 	movi	r2,2
    9788:	10803fcc 	andi	r2,r2,255
    978c:	01000044 	movi	r4,1
    9790:	11001e26 	beq	r2,r4,980c <___vfiprintf_internal_r+0x13a0>
    9794:	01000084 	movi	r4,2
    9798:	11001e1e 	bne	r2,r4,9814 <___vfiprintf_internal_r+0x13a8>
    979c:	1829883a 	mov	r20,r3
    97a0:	003eea06 	br	934c <___vfiprintf_internal_r+0xee0>
    97a4:	a007883a 	mov	r3,r20
    97a8:	00800044 	movi	r2,1
    97ac:	003ff606 	br	9788 <___vfiprintf_internal_r+0x131c>
    97b0:	00800184 	movi	r2,6
    97b4:	1240012e 	bgeu	r2,r9,97bc <___vfiprintf_internal_r+0x1350>
    97b8:	1013883a 	mov	r9,r2
    97bc:	4827883a 	mov	r19,r9
    97c0:	4825883a 	mov	r18,r9
    97c4:	48001516 	blt	r9,zero,981c <___vfiprintf_internal_r+0x13b0>
    97c8:	054000b4 	movhi	r21,2
    97cc:	d8c02215 	stw	r3,136(sp)
    97d0:	ad675d04 	addi	r21,r21,-25228
    97d4:	003d1406 	br	8c28 <___vfiprintf_internal_r+0x7bc>
    97d8:	028000b4 	movhi	r10,2
    97dc:	52a7b804 	addi	r10,r10,-24864
    97e0:	da802415 	stw	r10,144(sp)
    97e4:	200d883a 	mov	r6,r4
    97e8:	003c9106 	br	8a30 <___vfiprintf_internal_r+0x5c4>
    97ec:	5021883a 	mov	r16,r10
    97f0:	0013883a 	mov	r9,zero
    97f4:	003b7d06 	br	85ec <___vfiprintf_internal_r+0x180>
    97f8:	4827883a 	mov	r19,r9
    97fc:	df001d83 	ldbu	fp,118(sp)
    9800:	d8c02215 	stw	r3,136(sp)
    9804:	0013883a 	mov	r9,zero
    9808:	003c1806 	br	886c <___vfiprintf_internal_r+0x400>
    980c:	1829883a 	mov	r20,r3
    9810:	003d1806 	br	8c74 <___vfiprintf_internal_r+0x808>
    9814:	1829883a 	mov	r20,r3
    9818:	003ccd06 	br	8b50 <___vfiprintf_internal_r+0x6e4>
    981c:	0025883a 	mov	r18,zero
    9820:	003fe906 	br	97c8 <___vfiprintf_internal_r+0x135c>
    9824:	d8802217 	ldw	r2,136(sp)
    9828:	80c00043 	ldbu	r3,1(r16)
    982c:	5021883a 	mov	r16,r10
    9830:	12400017 	ldw	r9,0(r2)
    9834:	10800104 	addi	r2,r2,4
    9838:	d8802215 	stw	r2,136(sp)
    983c:	483faf0e 	bge	r9,zero,96fc <___vfiprintf_internal_r+0x1290>
    9840:	18c03fcc 	andi	r3,r3,255
    9844:	18c0201c 	xori	r3,r3,128
    9848:	027fffc4 	movi	r9,-1
    984c:	18ffe004 	addi	r3,r3,-128
    9850:	003b6506 	br	85e8 <___vfiprintf_internal_r+0x17c>
    9854:	d9c01d85 	stb	r7,118(sp)
    9858:	003ca006 	br	8adc <___vfiprintf_internal_r+0x670>
    985c:	d9c01d85 	stb	r7,118(sp)
    9860:	003cad06 	br	8b18 <___vfiprintf_internal_r+0x6ac>
    9864:	d9c01d85 	stb	r7,118(sp)
    9868:	003d7d06 	br	8e60 <___vfiprintf_internal_r+0x9f4>
    986c:	d9c01d85 	stb	r7,118(sp)
    9870:	003d5f06 	br	8df0 <___vfiprintf_internal_r+0x984>
    9874:	a080004c 	andi	r2,r20,1
    9878:	0039883a 	mov	fp,zero
    987c:	10000526 	beq	r2,zero,9894 <___vfiprintf_internal_r+0x1428>
    9880:	00800c04 	movi	r2,48
    9884:	d88019c5 	stb	r2,103(sp)
    9888:	dcc02717 	ldw	r19,156(sp)
    988c:	dd4019c4 	addi	r21,sp,103
    9890:	003bf606 	br	886c <___vfiprintf_internal_r+0x400>
    9894:	0027883a 	mov	r19,zero
    9898:	dd401a04 	addi	r21,sp,104
    989c:	003bf306 	br	886c <___vfiprintf_internal_r+0x400>
    98a0:	d9c01d85 	stb	r7,118(sp)
    98a4:	003dc806 	br	8fc8 <___vfiprintf_internal_r+0xb5c>
    98a8:	d9c01d85 	stb	r7,118(sp)
    98ac:	003d3a06 	br	8d98 <___vfiprintf_internal_r+0x92c>
    98b0:	d9c01d85 	stb	r7,118(sp)
    98b4:	003d2a06 	br	8d60 <___vfiprintf_internal_r+0x8f4>
    98b8:	d9c01d85 	stb	r7,118(sp)
    98bc:	003cde06 	br	8c38 <___vfiprintf_internal_r+0x7cc>
    98c0:	d9c01d85 	stb	r7,118(sp)
    98c4:	003cbc06 	br	8bb8 <___vfiprintf_internal_r+0x74c>

000098c8 <__vfiprintf_internal>:
    98c8:	008000b4 	movhi	r2,2
    98cc:	10b01b04 	addi	r2,r2,-16276
    98d0:	300f883a 	mov	r7,r6
    98d4:	280d883a 	mov	r6,r5
    98d8:	200b883a 	mov	r5,r4
    98dc:	11000017 	ldw	r4,0(r2)
    98e0:	000846c1 	jmpi	846c <___vfiprintf_internal_r>

000098e4 <__sbprintf>:
    98e4:	2880030b 	ldhu	r2,12(r5)
    98e8:	2ac01917 	ldw	r11,100(r5)
    98ec:	2a80038b 	ldhu	r10,14(r5)
    98f0:	2a400717 	ldw	r9,28(r5)
    98f4:	2a000917 	ldw	r8,36(r5)
    98f8:	defee204 	addi	sp,sp,-1144
    98fc:	00c10004 	movi	r3,1024
    9900:	dc011a15 	stw	r16,1128(sp)
    9904:	10bfff4c 	andi	r2,r2,65533
    9908:	2821883a 	mov	r16,r5
    990c:	d8cb883a 	add	r5,sp,r3
    9910:	dc811c15 	stw	r18,1136(sp)
    9914:	dc411b15 	stw	r17,1132(sp)
    9918:	dfc11d15 	stw	ra,1140(sp)
    991c:	2025883a 	mov	r18,r4
    9920:	d881030d 	sth	r2,1036(sp)
    9924:	dac11915 	stw	r11,1124(sp)
    9928:	da81038d 	sth	r10,1038(sp)
    992c:	da410715 	stw	r9,1052(sp)
    9930:	da010915 	stw	r8,1060(sp)
    9934:	dec10015 	stw	sp,1024(sp)
    9938:	dec10415 	stw	sp,1040(sp)
    993c:	d8c10215 	stw	r3,1032(sp)
    9940:	d8c10515 	stw	r3,1044(sp)
    9944:	d8010615 	stw	zero,1048(sp)
    9948:	000846c0 	call	846c <___vfiprintf_internal_r>
    994c:	1023883a 	mov	r17,r2
    9950:	10000416 	blt	r2,zero,9964 <__sbprintf+0x80>
    9954:	d9410004 	addi	r5,sp,1024
    9958:	9009883a 	mov	r4,r18
    995c:	0004d200 	call	4d20 <_fflush_r>
    9960:	10000d1e 	bne	r2,zero,9998 <__sbprintf+0xb4>
    9964:	d881030b 	ldhu	r2,1036(sp)
    9968:	1080100c 	andi	r2,r2,64
    996c:	10000326 	beq	r2,zero,997c <__sbprintf+0x98>
    9970:	8080030b 	ldhu	r2,12(r16)
    9974:	10801014 	ori	r2,r2,64
    9978:	8080030d 	sth	r2,12(r16)
    997c:	8805883a 	mov	r2,r17
    9980:	dfc11d17 	ldw	ra,1140(sp)
    9984:	dc811c17 	ldw	r18,1136(sp)
    9988:	dc411b17 	ldw	r17,1132(sp)
    998c:	dc011a17 	ldw	r16,1128(sp)
    9990:	dec11e04 	addi	sp,sp,1144
    9994:	f800283a 	ret
    9998:	047fffc4 	movi	r17,-1
    999c:	003ff106 	br	9964 <__sbprintf+0x80>

000099a0 <_write_r>:
    99a0:	defffd04 	addi	sp,sp,-12
    99a4:	2805883a 	mov	r2,r5
    99a8:	dc000015 	stw	r16,0(sp)
    99ac:	040000b4 	movhi	r16,2
    99b0:	dc400115 	stw	r17,4(sp)
    99b4:	300b883a 	mov	r5,r6
    99b8:	84380004 	addi	r16,r16,-8192
    99bc:	2023883a 	mov	r17,r4
    99c0:	380d883a 	mov	r6,r7
    99c4:	1009883a 	mov	r4,r2
    99c8:	dfc00215 	stw	ra,8(sp)
    99cc:	80000015 	stw	zero,0(r16)
    99d0:	000dde40 	call	dde4 <write>
    99d4:	00ffffc4 	movi	r3,-1
    99d8:	10c00526 	beq	r2,r3,99f0 <_write_r+0x50>
    99dc:	dfc00217 	ldw	ra,8(sp)
    99e0:	dc400117 	ldw	r17,4(sp)
    99e4:	dc000017 	ldw	r16,0(sp)
    99e8:	dec00304 	addi	sp,sp,12
    99ec:	f800283a 	ret
    99f0:	80c00017 	ldw	r3,0(r16)
    99f4:	183ff926 	beq	r3,zero,99dc <_write_r+0x3c>
    99f8:	88c00015 	stw	r3,0(r17)
    99fc:	003ff706 	br	99dc <_write_r+0x3c>

00009a00 <_close_r>:
    9a00:	defffd04 	addi	sp,sp,-12
    9a04:	dc000015 	stw	r16,0(sp)
    9a08:	040000b4 	movhi	r16,2
    9a0c:	dc400115 	stw	r17,4(sp)
    9a10:	84380004 	addi	r16,r16,-8192
    9a14:	2023883a 	mov	r17,r4
    9a18:	2809883a 	mov	r4,r5
    9a1c:	dfc00215 	stw	ra,8(sp)
    9a20:	80000015 	stw	zero,0(r16)
    9a24:	000d5dc0 	call	d5dc <close>
    9a28:	00ffffc4 	movi	r3,-1
    9a2c:	10c00526 	beq	r2,r3,9a44 <_close_r+0x44>
    9a30:	dfc00217 	ldw	ra,8(sp)
    9a34:	dc400117 	ldw	r17,4(sp)
    9a38:	dc000017 	ldw	r16,0(sp)
    9a3c:	dec00304 	addi	sp,sp,12
    9a40:	f800283a 	ret
    9a44:	80c00017 	ldw	r3,0(r16)
    9a48:	183ff926 	beq	r3,zero,9a30 <_close_r+0x30>
    9a4c:	88c00015 	stw	r3,0(r17)
    9a50:	003ff706 	br	9a30 <_close_r+0x30>

00009a54 <_calloc_r>:
    9a54:	298b383a 	mul	r5,r5,r6
    9a58:	defffe04 	addi	sp,sp,-8
    9a5c:	dfc00115 	stw	ra,4(sp)
    9a60:	dc000015 	stw	r16,0(sp)
    9a64:	0005e5c0 	call	5e5c <_malloc_r>
    9a68:	10002926 	beq	r2,zero,9b10 <_calloc_r+0xbc>
    9a6c:	11bfff17 	ldw	r6,-4(r2)
    9a70:	1021883a 	mov	r16,r2
    9a74:	00bfff04 	movi	r2,-4
    9a78:	308c703a 	and	r6,r6,r2
    9a7c:	00c00904 	movi	r3,36
    9a80:	308d883a 	add	r6,r6,r2
    9a84:	19801636 	bltu	r3,r6,9ae0 <_calloc_r+0x8c>
    9a88:	008004c4 	movi	r2,19
    9a8c:	11800b2e 	bgeu	r2,r6,9abc <_calloc_r+0x68>
    9a90:	80000015 	stw	zero,0(r16)
    9a94:	80000115 	stw	zero,4(r16)
    9a98:	008006c4 	movi	r2,27
    9a9c:	11801a2e 	bgeu	r2,r6,9b08 <_calloc_r+0xb4>
    9aa0:	80000215 	stw	zero,8(r16)
    9aa4:	80000315 	stw	zero,12(r16)
    9aa8:	30c0151e 	bne	r6,r3,9b00 <_calloc_r+0xac>
    9aac:	80000415 	stw	zero,16(r16)
    9ab0:	80800604 	addi	r2,r16,24
    9ab4:	80000515 	stw	zero,20(r16)
    9ab8:	00000106 	br	9ac0 <_calloc_r+0x6c>
    9abc:	8005883a 	mov	r2,r16
    9ac0:	10000015 	stw	zero,0(r2)
    9ac4:	10000115 	stw	zero,4(r2)
    9ac8:	10000215 	stw	zero,8(r2)
    9acc:	8005883a 	mov	r2,r16
    9ad0:	dfc00117 	ldw	ra,4(sp)
    9ad4:	dc000017 	ldw	r16,0(sp)
    9ad8:	dec00204 	addi	sp,sp,8
    9adc:	f800283a 	ret
    9ae0:	000b883a 	mov	r5,zero
    9ae4:	8009883a 	mov	r4,r16
    9ae8:	00069f00 	call	69f0 <memset>
    9aec:	8005883a 	mov	r2,r16
    9af0:	dfc00117 	ldw	ra,4(sp)
    9af4:	dc000017 	ldw	r16,0(sp)
    9af8:	dec00204 	addi	sp,sp,8
    9afc:	f800283a 	ret
    9b00:	80800404 	addi	r2,r16,16
    9b04:	003fee06 	br	9ac0 <_calloc_r+0x6c>
    9b08:	80800204 	addi	r2,r16,8
    9b0c:	003fec06 	br	9ac0 <_calloc_r+0x6c>
    9b10:	0005883a 	mov	r2,zero
    9b14:	003fee06 	br	9ad0 <_calloc_r+0x7c>

00009b18 <_fclose_r>:
    9b18:	28003926 	beq	r5,zero,9c00 <_fclose_r+0xe8>
    9b1c:	defffc04 	addi	sp,sp,-16
    9b20:	dc400115 	stw	r17,4(sp)
    9b24:	dc000015 	stw	r16,0(sp)
    9b28:	dfc00315 	stw	ra,12(sp)
    9b2c:	dc800215 	stw	r18,8(sp)
    9b30:	2023883a 	mov	r17,r4
    9b34:	2821883a 	mov	r16,r5
    9b38:	20000226 	beq	r4,zero,9b44 <_fclose_r+0x2c>
    9b3c:	20800e17 	ldw	r2,56(r4)
    9b40:	10002726 	beq	r2,zero,9be0 <_fclose_r+0xc8>
    9b44:	8080030f 	ldh	r2,12(r16)
    9b48:	1000071e 	bne	r2,zero,9b68 <_fclose_r+0x50>
    9b4c:	0005883a 	mov	r2,zero
    9b50:	dfc00317 	ldw	ra,12(sp)
    9b54:	dc800217 	ldw	r18,8(sp)
    9b58:	dc400117 	ldw	r17,4(sp)
    9b5c:	dc000017 	ldw	r16,0(sp)
    9b60:	dec00404 	addi	sp,sp,16
    9b64:	f800283a 	ret
    9b68:	800b883a 	mov	r5,r16
    9b6c:	8809883a 	mov	r4,r17
    9b70:	0004b040 	call	4b04 <__sflush_r>
    9b74:	1025883a 	mov	r18,r2
    9b78:	80800b17 	ldw	r2,44(r16)
    9b7c:	10000426 	beq	r2,zero,9b90 <_fclose_r+0x78>
    9b80:	81400717 	ldw	r5,28(r16)
    9b84:	8809883a 	mov	r4,r17
    9b88:	103ee83a 	callr	r2
    9b8c:	10001616 	blt	r2,zero,9be8 <_fclose_r+0xd0>
    9b90:	8080030b 	ldhu	r2,12(r16)
    9b94:	1080200c 	andi	r2,r2,128
    9b98:	1000151e 	bne	r2,zero,9bf0 <_fclose_r+0xd8>
    9b9c:	81400c17 	ldw	r5,48(r16)
    9ba0:	28000526 	beq	r5,zero,9bb8 <_fclose_r+0xa0>
    9ba4:	80801004 	addi	r2,r16,64
    9ba8:	28800226 	beq	r5,r2,9bb4 <_fclose_r+0x9c>
    9bac:	8809883a 	mov	r4,r17
    9bb0:	00052700 	call	5270 <_free_r>
    9bb4:	80000c15 	stw	zero,48(r16)
    9bb8:	81401117 	ldw	r5,68(r16)
    9bbc:	28000326 	beq	r5,zero,9bcc <_fclose_r+0xb4>
    9bc0:	8809883a 	mov	r4,r17
    9bc4:	00052700 	call	5270 <_free_r>
    9bc8:	80001115 	stw	zero,68(r16)
    9bcc:	000510c0 	call	510c <__sfp_lock_acquire>
    9bd0:	8000030d 	sth	zero,12(r16)
    9bd4:	00051100 	call	5110 <__sfp_lock_release>
    9bd8:	9005883a 	mov	r2,r18
    9bdc:	003fdc06 	br	9b50 <_fclose_r+0x38>
    9be0:	00050fc0 	call	50fc <__sinit>
    9be4:	003fd706 	br	9b44 <_fclose_r+0x2c>
    9be8:	04bfffc4 	movi	r18,-1
    9bec:	003fe806 	br	9b90 <_fclose_r+0x78>
    9bf0:	81400417 	ldw	r5,16(r16)
    9bf4:	8809883a 	mov	r4,r17
    9bf8:	00052700 	call	5270 <_free_r>
    9bfc:	003fe706 	br	9b9c <_fclose_r+0x84>
    9c00:	0005883a 	mov	r2,zero
    9c04:	f800283a 	ret

00009c08 <fclose>:
    9c08:	008000b4 	movhi	r2,2
    9c0c:	10b01b04 	addi	r2,r2,-16276
    9c10:	200b883a 	mov	r5,r4
    9c14:	11000017 	ldw	r4,0(r2)
    9c18:	0009b181 	jmpi	9b18 <_fclose_r>

00009c1c <__fputwc>:
    9c1c:	defff804 	addi	sp,sp,-32
    9c20:	dcc00415 	stw	r19,16(sp)
    9c24:	dc800315 	stw	r18,12(sp)
    9c28:	dc000115 	stw	r16,4(sp)
    9c2c:	dfc00715 	stw	ra,28(sp)
    9c30:	dd400615 	stw	r21,24(sp)
    9c34:	dd000515 	stw	r20,20(sp)
    9c38:	dc400215 	stw	r17,8(sp)
    9c3c:	2027883a 	mov	r19,r4
    9c40:	2825883a 	mov	r18,r5
    9c44:	3021883a 	mov	r16,r6
    9c48:	0005c4c0 	call	5c4c <__locale_mb_cur_max>
    9c4c:	00c00044 	movi	r3,1
    9c50:	10c03e26 	beq	r2,r3,9d4c <__fputwc+0x130>
    9c54:	81c01704 	addi	r7,r16,92
    9c58:	900d883a 	mov	r6,r18
    9c5c:	d80b883a 	mov	r5,sp
    9c60:	9809883a 	mov	r4,r19
    9c64:	000a0ec0 	call	a0ec <_wcrtomb_r>
    9c68:	1029883a 	mov	r20,r2
    9c6c:	00bfffc4 	movi	r2,-1
    9c70:	a0802026 	beq	r20,r2,9cf4 <__fputwc+0xd8>
    9c74:	d9400003 	ldbu	r5,0(sp)
    9c78:	a0001c26 	beq	r20,zero,9cec <__fputwc+0xd0>
    9c7c:	0023883a 	mov	r17,zero
    9c80:	05400284 	movi	r21,10
    9c84:	00000906 	br	9cac <__fputwc+0x90>
    9c88:	80800017 	ldw	r2,0(r16)
    9c8c:	11400005 	stb	r5,0(r2)
    9c90:	80c00017 	ldw	r3,0(r16)
    9c94:	18c00044 	addi	r3,r3,1
    9c98:	80c00015 	stw	r3,0(r16)
    9c9c:	8c400044 	addi	r17,r17,1
    9ca0:	dc45883a 	add	r2,sp,r17
    9ca4:	8d00112e 	bgeu	r17,r20,9cec <__fputwc+0xd0>
    9ca8:	11400003 	ldbu	r5,0(r2)
    9cac:	80c00217 	ldw	r3,8(r16)
    9cb0:	18ffffc4 	addi	r3,r3,-1
    9cb4:	80c00215 	stw	r3,8(r16)
    9cb8:	183ff30e 	bge	r3,zero,9c88 <__fputwc+0x6c>
    9cbc:	80800617 	ldw	r2,24(r16)
    9cc0:	18801916 	blt	r3,r2,9d28 <__fputwc+0x10c>
    9cc4:	80800017 	ldw	r2,0(r16)
    9cc8:	11400005 	stb	r5,0(r2)
    9ccc:	80800017 	ldw	r2,0(r16)
    9cd0:	10c00003 	ldbu	r3,0(r2)
    9cd4:	10800044 	addi	r2,r2,1
    9cd8:	1d402326 	beq	r3,r21,9d68 <__fputwc+0x14c>
    9cdc:	80800015 	stw	r2,0(r16)
    9ce0:	8c400044 	addi	r17,r17,1
    9ce4:	dc45883a 	add	r2,sp,r17
    9ce8:	8d3fef36 	bltu	r17,r20,9ca8 <__fputwc+0x8c>
    9cec:	9005883a 	mov	r2,r18
    9cf0:	00000406 	br	9d04 <__fputwc+0xe8>
    9cf4:	80c0030b 	ldhu	r3,12(r16)
    9cf8:	a005883a 	mov	r2,r20
    9cfc:	18c01014 	ori	r3,r3,64
    9d00:	80c0030d 	sth	r3,12(r16)
    9d04:	dfc00717 	ldw	ra,28(sp)
    9d08:	dd400617 	ldw	r21,24(sp)
    9d0c:	dd000517 	ldw	r20,20(sp)
    9d10:	dcc00417 	ldw	r19,16(sp)
    9d14:	dc800317 	ldw	r18,12(sp)
    9d18:	dc400217 	ldw	r17,8(sp)
    9d1c:	dc000117 	ldw	r16,4(sp)
    9d20:	dec00804 	addi	sp,sp,32
    9d24:	f800283a 	ret
    9d28:	800d883a 	mov	r6,r16
    9d2c:	29403fcc 	andi	r5,r5,255
    9d30:	9809883a 	mov	r4,r19
    9d34:	0009f940 	call	9f94 <__swbuf_r>
    9d38:	10bfffe0 	cmpeqi	r2,r2,-1
    9d3c:	10803fcc 	andi	r2,r2,255
    9d40:	103fd626 	beq	r2,zero,9c9c <__fputwc+0x80>
    9d44:	00bfffc4 	movi	r2,-1
    9d48:	003fee06 	br	9d04 <__fputwc+0xe8>
    9d4c:	90ffffc4 	addi	r3,r18,-1
    9d50:	01003f84 	movi	r4,254
    9d54:	20ffbf36 	bltu	r4,r3,9c54 <__fputwc+0x38>
    9d58:	900b883a 	mov	r5,r18
    9d5c:	dc800005 	stb	r18,0(sp)
    9d60:	1029883a 	mov	r20,r2
    9d64:	003fc506 	br	9c7c <__fputwc+0x60>
    9d68:	800d883a 	mov	r6,r16
    9d6c:	a80b883a 	mov	r5,r21
    9d70:	9809883a 	mov	r4,r19
    9d74:	0009f940 	call	9f94 <__swbuf_r>
    9d78:	10bfffe0 	cmpeqi	r2,r2,-1
    9d7c:	003fef06 	br	9d3c <__fputwc+0x120>

00009d80 <_fputwc_r>:
    9d80:	3080030b 	ldhu	r2,12(r6)
    9d84:	10c8000c 	andi	r3,r2,8192
    9d88:	1800051e 	bne	r3,zero,9da0 <_fputwc_r+0x20>
    9d8c:	30c01917 	ldw	r3,100(r6)
    9d90:	10880014 	ori	r2,r2,8192
    9d94:	3080030d 	sth	r2,12(r6)
    9d98:	18880014 	ori	r2,r3,8192
    9d9c:	30801915 	stw	r2,100(r6)
    9da0:	0009c1c1 	jmpi	9c1c <__fputwc>

00009da4 <fputwc>:
    9da4:	008000b4 	movhi	r2,2
    9da8:	defffc04 	addi	sp,sp,-16
    9dac:	10b01b04 	addi	r2,r2,-16276
    9db0:	dc000115 	stw	r16,4(sp)
    9db4:	14000017 	ldw	r16,0(r2)
    9db8:	dc400215 	stw	r17,8(sp)
    9dbc:	dfc00315 	stw	ra,12(sp)
    9dc0:	2023883a 	mov	r17,r4
    9dc4:	80000226 	beq	r16,zero,9dd0 <fputwc+0x2c>
    9dc8:	80800e17 	ldw	r2,56(r16)
    9dcc:	10001026 	beq	r2,zero,9e10 <fputwc+0x6c>
    9dd0:	2880030b 	ldhu	r2,12(r5)
    9dd4:	10c8000c 	andi	r3,r2,8192
    9dd8:	1800051e 	bne	r3,zero,9df0 <fputwc+0x4c>
    9ddc:	28c01917 	ldw	r3,100(r5)
    9de0:	10880014 	ori	r2,r2,8192
    9de4:	2880030d 	sth	r2,12(r5)
    9de8:	18880014 	ori	r2,r3,8192
    9dec:	28801915 	stw	r2,100(r5)
    9df0:	280d883a 	mov	r6,r5
    9df4:	8009883a 	mov	r4,r16
    9df8:	880b883a 	mov	r5,r17
    9dfc:	dfc00317 	ldw	ra,12(sp)
    9e00:	dc400217 	ldw	r17,8(sp)
    9e04:	dc000117 	ldw	r16,4(sp)
    9e08:	dec00404 	addi	sp,sp,16
    9e0c:	0009c1c1 	jmpi	9c1c <__fputwc>
    9e10:	8009883a 	mov	r4,r16
    9e14:	d9400015 	stw	r5,0(sp)
    9e18:	00050fc0 	call	50fc <__sinit>
    9e1c:	d9400017 	ldw	r5,0(sp)
    9e20:	003feb06 	br	9dd0 <fputwc+0x2c>

00009e24 <_fstat_r>:
    9e24:	defffd04 	addi	sp,sp,-12
    9e28:	2805883a 	mov	r2,r5
    9e2c:	dc000015 	stw	r16,0(sp)
    9e30:	040000b4 	movhi	r16,2
    9e34:	dc400115 	stw	r17,4(sp)
    9e38:	84380004 	addi	r16,r16,-8192
    9e3c:	2023883a 	mov	r17,r4
    9e40:	300b883a 	mov	r5,r6
    9e44:	1009883a 	mov	r4,r2
    9e48:	dfc00215 	stw	ra,8(sp)
    9e4c:	80000015 	stw	zero,0(r16)
    9e50:	000d7140 	call	d714 <fstat>
    9e54:	00ffffc4 	movi	r3,-1
    9e58:	10c00526 	beq	r2,r3,9e70 <_fstat_r+0x4c>
    9e5c:	dfc00217 	ldw	ra,8(sp)
    9e60:	dc400117 	ldw	r17,4(sp)
    9e64:	dc000017 	ldw	r16,0(sp)
    9e68:	dec00304 	addi	sp,sp,12
    9e6c:	f800283a 	ret
    9e70:	80c00017 	ldw	r3,0(r16)
    9e74:	183ff926 	beq	r3,zero,9e5c <_fstat_r+0x38>
    9e78:	88c00015 	stw	r3,0(r17)
    9e7c:	003ff706 	br	9e5c <_fstat_r+0x38>

00009e80 <_isatty_r>:
    9e80:	defffd04 	addi	sp,sp,-12
    9e84:	dc000015 	stw	r16,0(sp)
    9e88:	040000b4 	movhi	r16,2
    9e8c:	dc400115 	stw	r17,4(sp)
    9e90:	84380004 	addi	r16,r16,-8192
    9e94:	2023883a 	mov	r17,r4
    9e98:	2809883a 	mov	r4,r5
    9e9c:	dfc00215 	stw	ra,8(sp)
    9ea0:	80000015 	stw	zero,0(r16)
    9ea4:	000d8000 	call	d800 <isatty>
    9ea8:	00ffffc4 	movi	r3,-1
    9eac:	10c00526 	beq	r2,r3,9ec4 <_isatty_r+0x44>
    9eb0:	dfc00217 	ldw	ra,8(sp)
    9eb4:	dc400117 	ldw	r17,4(sp)
    9eb8:	dc000017 	ldw	r16,0(sp)
    9ebc:	dec00304 	addi	sp,sp,12
    9ec0:	f800283a 	ret
    9ec4:	80c00017 	ldw	r3,0(r16)
    9ec8:	183ff926 	beq	r3,zero,9eb0 <_isatty_r+0x30>
    9ecc:	88c00015 	stw	r3,0(r17)
    9ed0:	003ff706 	br	9eb0 <_isatty_r+0x30>

00009ed4 <_lseek_r>:
    9ed4:	defffd04 	addi	sp,sp,-12
    9ed8:	2805883a 	mov	r2,r5
    9edc:	dc000015 	stw	r16,0(sp)
    9ee0:	040000b4 	movhi	r16,2
    9ee4:	dc400115 	stw	r17,4(sp)
    9ee8:	300b883a 	mov	r5,r6
    9eec:	84380004 	addi	r16,r16,-8192
    9ef0:	2023883a 	mov	r17,r4
    9ef4:	380d883a 	mov	r6,r7
    9ef8:	1009883a 	mov	r4,r2
    9efc:	dfc00215 	stw	ra,8(sp)
    9f00:	80000015 	stw	zero,0(r16)
    9f04:	000d9cc0 	call	d9cc <lseek>
    9f08:	00ffffc4 	movi	r3,-1
    9f0c:	10c00526 	beq	r2,r3,9f24 <_lseek_r+0x50>
    9f10:	dfc00217 	ldw	ra,8(sp)
    9f14:	dc400117 	ldw	r17,4(sp)
    9f18:	dc000017 	ldw	r16,0(sp)
    9f1c:	dec00304 	addi	sp,sp,12
    9f20:	f800283a 	ret
    9f24:	80c00017 	ldw	r3,0(r16)
    9f28:	183ff926 	beq	r3,zero,9f10 <_lseek_r+0x3c>
    9f2c:	88c00015 	stw	r3,0(r17)
    9f30:	003ff706 	br	9f10 <_lseek_r+0x3c>

00009f34 <_read_r>:
    9f34:	defffd04 	addi	sp,sp,-12
    9f38:	2805883a 	mov	r2,r5
    9f3c:	dc000015 	stw	r16,0(sp)
    9f40:	040000b4 	movhi	r16,2
    9f44:	dc400115 	stw	r17,4(sp)
    9f48:	300b883a 	mov	r5,r6
    9f4c:	84380004 	addi	r16,r16,-8192
    9f50:	2023883a 	mov	r17,r4
    9f54:	380d883a 	mov	r6,r7
    9f58:	1009883a 	mov	r4,r2
    9f5c:	dfc00215 	stw	ra,8(sp)
    9f60:	80000015 	stw	zero,0(r16)
    9f64:	000db980 	call	db98 <read>
    9f68:	00ffffc4 	movi	r3,-1
    9f6c:	10c00526 	beq	r2,r3,9f84 <_read_r+0x50>
    9f70:	dfc00217 	ldw	ra,8(sp)
    9f74:	dc400117 	ldw	r17,4(sp)
    9f78:	dc000017 	ldw	r16,0(sp)
    9f7c:	dec00304 	addi	sp,sp,12
    9f80:	f800283a 	ret
    9f84:	80c00017 	ldw	r3,0(r16)
    9f88:	183ff926 	beq	r3,zero,9f70 <_read_r+0x3c>
    9f8c:	88c00015 	stw	r3,0(r17)
    9f90:	003ff706 	br	9f70 <_read_r+0x3c>

00009f94 <__swbuf_r>:
    9f94:	defffb04 	addi	sp,sp,-20
    9f98:	dcc00315 	stw	r19,12(sp)
    9f9c:	dc800215 	stw	r18,8(sp)
    9fa0:	dc000015 	stw	r16,0(sp)
    9fa4:	dfc00415 	stw	ra,16(sp)
    9fa8:	dc400115 	stw	r17,4(sp)
    9fac:	2025883a 	mov	r18,r4
    9fb0:	2827883a 	mov	r19,r5
    9fb4:	3021883a 	mov	r16,r6
    9fb8:	20000226 	beq	r4,zero,9fc4 <__swbuf_r+0x30>
    9fbc:	20800e17 	ldw	r2,56(r4)
    9fc0:	10004226 	beq	r2,zero,a0cc <__swbuf_r+0x138>
    9fc4:	80800617 	ldw	r2,24(r16)
    9fc8:	8100030b 	ldhu	r4,12(r16)
    9fcc:	80800215 	stw	r2,8(r16)
    9fd0:	2080020c 	andi	r2,r4,8
    9fd4:	10003626 	beq	r2,zero,a0b0 <__swbuf_r+0x11c>
    9fd8:	80c00417 	ldw	r3,16(r16)
    9fdc:	18003426 	beq	r3,zero,a0b0 <__swbuf_r+0x11c>
    9fe0:	2088000c 	andi	r2,r4,8192
    9fe4:	9c403fcc 	andi	r17,r19,255
    9fe8:	10001a26 	beq	r2,zero,a054 <__swbuf_r+0xc0>
    9fec:	80800017 	ldw	r2,0(r16)
    9ff0:	81000517 	ldw	r4,20(r16)
    9ff4:	10c7c83a 	sub	r3,r2,r3
    9ff8:	1900200e 	bge	r3,r4,a07c <__swbuf_r+0xe8>
    9ffc:	18c00044 	addi	r3,r3,1
    a000:	81000217 	ldw	r4,8(r16)
    a004:	11400044 	addi	r5,r2,1
    a008:	81400015 	stw	r5,0(r16)
    a00c:	213fffc4 	addi	r4,r4,-1
    a010:	81000215 	stw	r4,8(r16)
    a014:	14c00005 	stb	r19,0(r2)
    a018:	80800517 	ldw	r2,20(r16)
    a01c:	10c01e26 	beq	r2,r3,a098 <__swbuf_r+0x104>
    a020:	8080030b 	ldhu	r2,12(r16)
    a024:	1080004c 	andi	r2,r2,1
    a028:	10000226 	beq	r2,zero,a034 <__swbuf_r+0xa0>
    a02c:	00800284 	movi	r2,10
    a030:	88801926 	beq	r17,r2,a098 <__swbuf_r+0x104>
    a034:	8805883a 	mov	r2,r17
    a038:	dfc00417 	ldw	ra,16(sp)
    a03c:	dcc00317 	ldw	r19,12(sp)
    a040:	dc800217 	ldw	r18,8(sp)
    a044:	dc400117 	ldw	r17,4(sp)
    a048:	dc000017 	ldw	r16,0(sp)
    a04c:	dec00504 	addi	sp,sp,20
    a050:	f800283a 	ret
    a054:	81401917 	ldw	r5,100(r16)
    a058:	00b7ffc4 	movi	r2,-8193
    a05c:	21080014 	ori	r4,r4,8192
    a060:	2884703a 	and	r2,r5,r2
    a064:	80801915 	stw	r2,100(r16)
    a068:	80800017 	ldw	r2,0(r16)
    a06c:	8100030d 	sth	r4,12(r16)
    a070:	81000517 	ldw	r4,20(r16)
    a074:	10c7c83a 	sub	r3,r2,r3
    a078:	193fe016 	blt	r3,r4,9ffc <__swbuf_r+0x68>
    a07c:	800b883a 	mov	r5,r16
    a080:	9009883a 	mov	r4,r18
    a084:	0004d200 	call	4d20 <_fflush_r>
    a088:	1000071e 	bne	r2,zero,a0a8 <__swbuf_r+0x114>
    a08c:	80800017 	ldw	r2,0(r16)
    a090:	00c00044 	movi	r3,1
    a094:	003fda06 	br	a000 <__swbuf_r+0x6c>
    a098:	800b883a 	mov	r5,r16
    a09c:	9009883a 	mov	r4,r18
    a0a0:	0004d200 	call	4d20 <_fflush_r>
    a0a4:	103fe326 	beq	r2,zero,a034 <__swbuf_r+0xa0>
    a0a8:	00bfffc4 	movi	r2,-1
    a0ac:	003fe206 	br	a038 <__swbuf_r+0xa4>
    a0b0:	800b883a 	mov	r5,r16
    a0b4:	9009883a 	mov	r4,r18
    a0b8:	00031280 	call	3128 <__swsetup_r>
    a0bc:	103ffa1e 	bne	r2,zero,a0a8 <__swbuf_r+0x114>
    a0c0:	8100030b 	ldhu	r4,12(r16)
    a0c4:	80c00417 	ldw	r3,16(r16)
    a0c8:	003fc506 	br	9fe0 <__swbuf_r+0x4c>
    a0cc:	00050fc0 	call	50fc <__sinit>
    a0d0:	003fbc06 	br	9fc4 <__swbuf_r+0x30>

0000a0d4 <__swbuf>:
    a0d4:	008000b4 	movhi	r2,2
    a0d8:	10b01b04 	addi	r2,r2,-16276
    a0dc:	280d883a 	mov	r6,r5
    a0e0:	200b883a 	mov	r5,r4
    a0e4:	11000017 	ldw	r4,0(r2)
    a0e8:	0009f941 	jmpi	9f94 <__swbuf_r>

0000a0ec <_wcrtomb_r>:
    a0ec:	defff604 	addi	sp,sp,-40
    a0f0:	008000b4 	movhi	r2,2
    a0f4:	dc800815 	stw	r18,32(sp)
    a0f8:	dc400715 	stw	r17,28(sp)
    a0fc:	dc000615 	stw	r16,24(sp)
    a100:	10b01f04 	addi	r2,r2,-16260
    a104:	dfc00915 	stw	ra,36(sp)
    a108:	2021883a 	mov	r16,r4
    a10c:	3823883a 	mov	r17,r7
    a110:	14800017 	ldw	r18,0(r2)
    a114:	28001426 	beq	r5,zero,a168 <_wcrtomb_r+0x7c>
    a118:	d9400415 	stw	r5,16(sp)
    a11c:	d9800515 	stw	r6,20(sp)
    a120:	0005c400 	call	5c40 <__locale_charset>
    a124:	d9800517 	ldw	r6,20(sp)
    a128:	d9400417 	ldw	r5,16(sp)
    a12c:	100f883a 	mov	r7,r2
    a130:	dc400015 	stw	r17,0(sp)
    a134:	8009883a 	mov	r4,r16
    a138:	903ee83a 	callr	r18
    a13c:	00ffffc4 	movi	r3,-1
    a140:	10c0031e 	bne	r2,r3,a150 <_wcrtomb_r+0x64>
    a144:	88000015 	stw	zero,0(r17)
    a148:	00c02284 	movi	r3,138
    a14c:	80c00015 	stw	r3,0(r16)
    a150:	dfc00917 	ldw	ra,36(sp)
    a154:	dc800817 	ldw	r18,32(sp)
    a158:	dc400717 	ldw	r17,28(sp)
    a15c:	dc000617 	ldw	r16,24(sp)
    a160:	dec00a04 	addi	sp,sp,40
    a164:	f800283a 	ret
    a168:	0005c400 	call	5c40 <__locale_charset>
    a16c:	100f883a 	mov	r7,r2
    a170:	dc400015 	stw	r17,0(sp)
    a174:	000d883a 	mov	r6,zero
    a178:	d9400104 	addi	r5,sp,4
    a17c:	8009883a 	mov	r4,r16
    a180:	903ee83a 	callr	r18
    a184:	003fed06 	br	a13c <_wcrtomb_r+0x50>

0000a188 <wcrtomb>:
    a188:	defff604 	addi	sp,sp,-40
    a18c:	008000b4 	movhi	r2,2
    a190:	dc800615 	stw	r18,24(sp)
    a194:	dc400515 	stw	r17,20(sp)
    a198:	10b01b04 	addi	r2,r2,-16276
    a19c:	dfc00915 	stw	ra,36(sp)
    a1a0:	dd000815 	stw	r20,32(sp)
    a1a4:	dcc00715 	stw	r19,28(sp)
    a1a8:	dc000415 	stw	r16,16(sp)
    a1ac:	3025883a 	mov	r18,r6
    a1b0:	14400017 	ldw	r17,0(r2)
    a1b4:	20001926 	beq	r4,zero,a21c <wcrtomb+0x94>
    a1b8:	008000b4 	movhi	r2,2
    a1bc:	10b01f04 	addi	r2,r2,-16260
    a1c0:	15000017 	ldw	r20,0(r2)
    a1c4:	2021883a 	mov	r16,r4
    a1c8:	2827883a 	mov	r19,r5
    a1cc:	0005c400 	call	5c40 <__locale_charset>
    a1d0:	100f883a 	mov	r7,r2
    a1d4:	dc800015 	stw	r18,0(sp)
    a1d8:	980d883a 	mov	r6,r19
    a1dc:	800b883a 	mov	r5,r16
    a1e0:	8809883a 	mov	r4,r17
    a1e4:	a03ee83a 	callr	r20
    a1e8:	00ffffc4 	movi	r3,-1
    a1ec:	10c0031e 	bne	r2,r3,a1fc <wcrtomb+0x74>
    a1f0:	90000015 	stw	zero,0(r18)
    a1f4:	00c02284 	movi	r3,138
    a1f8:	88c00015 	stw	r3,0(r17)
    a1fc:	dfc00917 	ldw	ra,36(sp)
    a200:	dd000817 	ldw	r20,32(sp)
    a204:	dcc00717 	ldw	r19,28(sp)
    a208:	dc800617 	ldw	r18,24(sp)
    a20c:	dc400517 	ldw	r17,20(sp)
    a210:	dc000417 	ldw	r16,16(sp)
    a214:	dec00a04 	addi	sp,sp,40
    a218:	f800283a 	ret
    a21c:	008000b4 	movhi	r2,2
    a220:	10b01f04 	addi	r2,r2,-16260
    a224:	14000017 	ldw	r16,0(r2)
    a228:	0005c400 	call	5c40 <__locale_charset>
    a22c:	100f883a 	mov	r7,r2
    a230:	dc800015 	stw	r18,0(sp)
    a234:	000d883a 	mov	r6,zero
    a238:	d9400104 	addi	r5,sp,4
    a23c:	8809883a 	mov	r4,r17
    a240:	803ee83a 	callr	r16
    a244:	003fe806 	br	a1e8 <wcrtomb+0x60>

0000a248 <__ascii_wctomb>:
    a248:	28000526 	beq	r5,zero,a260 <__ascii_wctomb+0x18>
    a24c:	00803fc4 	movi	r2,255
    a250:	11800536 	bltu	r2,r6,a268 <__ascii_wctomb+0x20>
    a254:	29800005 	stb	r6,0(r5)
    a258:	00800044 	movi	r2,1
    a25c:	f800283a 	ret
    a260:	0005883a 	mov	r2,zero
    a264:	f800283a 	ret
    a268:	00802284 	movi	r2,138
    a26c:	20800015 	stw	r2,0(r4)
    a270:	00bfffc4 	movi	r2,-1
    a274:	f800283a 	ret

0000a278 <_wctomb_r>:
    a278:	008000b4 	movhi	r2,2
    a27c:	defff904 	addi	sp,sp,-28
    a280:	10b01f04 	addi	r2,r2,-16260
    a284:	dfc00615 	stw	ra,24(sp)
    a288:	dc400515 	stw	r17,20(sp)
    a28c:	dc000415 	stw	r16,16(sp)
    a290:	3823883a 	mov	r17,r7
    a294:	14000017 	ldw	r16,0(r2)
    a298:	d9000115 	stw	r4,4(sp)
    a29c:	d9400215 	stw	r5,8(sp)
    a2a0:	d9800315 	stw	r6,12(sp)
    a2a4:	0005c400 	call	5c40 <__locale_charset>
    a2a8:	d9800317 	ldw	r6,12(sp)
    a2ac:	d9400217 	ldw	r5,8(sp)
    a2b0:	d9000117 	ldw	r4,4(sp)
    a2b4:	100f883a 	mov	r7,r2
    a2b8:	dc400015 	stw	r17,0(sp)
    a2bc:	803ee83a 	callr	r16
    a2c0:	dfc00617 	ldw	ra,24(sp)
    a2c4:	dc400517 	ldw	r17,20(sp)
    a2c8:	dc000417 	ldw	r16,16(sp)
    a2cc:	dec00704 	addi	sp,sp,28
    a2d0:	f800283a 	ret

0000a2d4 <__udivdi3>:
    a2d4:	defff504 	addi	sp,sp,-44
    a2d8:	dcc00415 	stw	r19,16(sp)
    a2dc:	dc000115 	stw	r16,4(sp)
    a2e0:	dfc00a15 	stw	ra,40(sp)
    a2e4:	df000915 	stw	fp,36(sp)
    a2e8:	ddc00815 	stw	r23,32(sp)
    a2ec:	dd800715 	stw	r22,28(sp)
    a2f0:	dd400615 	stw	r21,24(sp)
    a2f4:	dd000515 	stw	r20,20(sp)
    a2f8:	dc800315 	stw	r18,12(sp)
    a2fc:	dc400215 	stw	r17,8(sp)
    a300:	2027883a 	mov	r19,r4
    a304:	2821883a 	mov	r16,r5
    a308:	3800411e 	bne	r7,zero,a410 <__udivdi3+0x13c>
    a30c:	3023883a 	mov	r17,r6
    a310:	2025883a 	mov	r18,r4
    a314:	2980522e 	bgeu	r5,r6,a460 <__udivdi3+0x18c>
    a318:	00bfffd4 	movui	r2,65535
    a31c:	282d883a 	mov	r22,r5
    a320:	1180a836 	bltu	r2,r6,a5c4 <__udivdi3+0x2f0>
    a324:	00803fc4 	movi	r2,255
    a328:	1185803a 	cmpltu	r2,r2,r6
    a32c:	100490fa 	slli	r2,r2,3
    a330:	3086d83a 	srl	r3,r6,r2
    a334:	010000b4 	movhi	r4,2
    a338:	2127c004 	addi	r4,r4,-24832
    a33c:	20c7883a 	add	r3,r4,r3
    a340:	18c00003 	ldbu	r3,0(r3)
    a344:	1885883a 	add	r2,r3,r2
    a348:	00c00804 	movi	r3,32
    a34c:	1887c83a 	sub	r3,r3,r2
    a350:	18000526 	beq	r3,zero,a368 <__udivdi3+0x94>
    a354:	80e0983a 	sll	r16,r16,r3
    a358:	9884d83a 	srl	r2,r19,r2
    a35c:	30e2983a 	sll	r17,r6,r3
    a360:	98e4983a 	sll	r18,r19,r3
    a364:	142cb03a 	or	r22,r2,r16
    a368:	882ad43a 	srli	r21,r17,16
    a36c:	b009883a 	mov	r4,r22
    a370:	8d3fffcc 	andi	r20,r17,65535
    a374:	a80b883a 	mov	r5,r21
    a378:	000aee00 	call	aee0 <__umodsi3>
    a37c:	b009883a 	mov	r4,r22
    a380:	a80b883a 	mov	r5,r21
    a384:	1027883a 	mov	r19,r2
    a388:	000ae7c0 	call	ae7c <__udivsi3>
    a38c:	102d883a 	mov	r22,r2
    a390:	9826943a 	slli	r19,r19,16
    a394:	9004d43a 	srli	r2,r18,16
    a398:	a5a1383a 	mul	r16,r20,r22
    a39c:	14c4b03a 	or	r2,r2,r19
    a3a0:	1400052e 	bgeu	r2,r16,a3b8 <__udivdi3+0xe4>
    a3a4:	1445883a 	add	r2,r2,r17
    a3a8:	b0ffffc4 	addi	r3,r22,-1
    a3ac:	14400136 	bltu	r2,r17,a3b4 <__udivdi3+0xe0>
    a3b0:	14012336 	bltu	r2,r16,a840 <__udivdi3+0x56c>
    a3b4:	182d883a 	mov	r22,r3
    a3b8:	1421c83a 	sub	r16,r2,r16
    a3bc:	a80b883a 	mov	r5,r21
    a3c0:	8009883a 	mov	r4,r16
    a3c4:	000aee00 	call	aee0 <__umodsi3>
    a3c8:	1027883a 	mov	r19,r2
    a3cc:	a80b883a 	mov	r5,r21
    a3d0:	8009883a 	mov	r4,r16
    a3d4:	000ae7c0 	call	ae7c <__udivsi3>
    a3d8:	9826943a 	slli	r19,r19,16
    a3dc:	a0a9383a 	mul	r20,r20,r2
    a3e0:	94bfffcc 	andi	r18,r18,65535
    a3e4:	94e4b03a 	or	r18,r18,r19
    a3e8:	9500052e 	bgeu	r18,r20,a400 <__udivdi3+0x12c>
    a3ec:	8ca5883a 	add	r18,r17,r18
    a3f0:	10ffffc4 	addi	r3,r2,-1
    a3f4:	9440f136 	bltu	r18,r17,a7bc <__udivdi3+0x4e8>
    a3f8:	9500f02e 	bgeu	r18,r20,a7bc <__udivdi3+0x4e8>
    a3fc:	10bfff84 	addi	r2,r2,-2
    a400:	b00c943a 	slli	r6,r22,16
    a404:	0007883a 	mov	r3,zero
    a408:	3084b03a 	or	r2,r6,r2
    a40c:	00005906 	br	a574 <__udivdi3+0x2a0>
    a410:	29c05636 	bltu	r5,r7,a56c <__udivdi3+0x298>
    a414:	00bfffd4 	movui	r2,65535
    a418:	11c0622e 	bgeu	r2,r7,a5a4 <__udivdi3+0x2d0>
    a41c:	00804034 	movhi	r2,256
    a420:	10bfffc4 	addi	r2,r2,-1
    a424:	11c0ee36 	bltu	r2,r7,a7e0 <__udivdi3+0x50c>
    a428:	00800404 	movi	r2,16
    a42c:	3886d83a 	srl	r3,r7,r2
    a430:	010000b4 	movhi	r4,2
    a434:	2127c004 	addi	r4,r4,-24832
    a438:	20c7883a 	add	r3,r4,r3
    a43c:	18c00003 	ldbu	r3,0(r3)
    a440:	05400804 	movi	r21,32
    a444:	1885883a 	add	r2,r3,r2
    a448:	a8abc83a 	sub	r21,r21,r2
    a44c:	a800621e 	bne	r21,zero,a5d8 <__udivdi3+0x304>
    a450:	3c00e936 	bltu	r7,r16,a7f8 <__udivdi3+0x524>
    a454:	9985403a 	cmpgeu	r2,r19,r6
    a458:	0007883a 	mov	r3,zero
    a45c:	00004506 	br	a574 <__udivdi3+0x2a0>
    a460:	3000041e 	bne	r6,zero,a474 <__udivdi3+0x1a0>
    a464:	000b883a 	mov	r5,zero
    a468:	01000044 	movi	r4,1
    a46c:	000ae7c0 	call	ae7c <__udivsi3>
    a470:	1023883a 	mov	r17,r2
    a474:	00bfffd4 	movui	r2,65535
    a478:	14404e2e 	bgeu	r2,r17,a5b4 <__udivdi3+0x2e0>
    a47c:	00804034 	movhi	r2,256
    a480:	10bfffc4 	addi	r2,r2,-1
    a484:	1440d836 	bltu	r2,r17,a7e8 <__udivdi3+0x514>
    a488:	00800404 	movi	r2,16
    a48c:	8886d83a 	srl	r3,r17,r2
    a490:	010000b4 	movhi	r4,2
    a494:	2127c004 	addi	r4,r4,-24832
    a498:	20c7883a 	add	r3,r4,r3
    a49c:	18c00003 	ldbu	r3,0(r3)
    a4a0:	1885883a 	add	r2,r3,r2
    a4a4:	00c00804 	movi	r3,32
    a4a8:	1887c83a 	sub	r3,r3,r2
    a4ac:	18008f1e 	bne	r3,zero,a6ec <__udivdi3+0x418>
    a4b0:	882ad43a 	srli	r21,r17,16
    a4b4:	8461c83a 	sub	r16,r16,r17
    a4b8:	8d3fffcc 	andi	r20,r17,65535
    a4bc:	00c00044 	movi	r3,1
    a4c0:	8009883a 	mov	r4,r16
    a4c4:	a80b883a 	mov	r5,r21
    a4c8:	d8c00015 	stw	r3,0(sp)
    a4cc:	000aee00 	call	aee0 <__umodsi3>
    a4d0:	8009883a 	mov	r4,r16
    a4d4:	a80b883a 	mov	r5,r21
    a4d8:	1027883a 	mov	r19,r2
    a4dc:	000ae7c0 	call	ae7c <__udivsi3>
    a4e0:	9826943a 	slli	r19,r19,16
    a4e4:	9008d43a 	srli	r4,r18,16
    a4e8:	1521383a 	mul	r16,r2,r20
    a4ec:	102d883a 	mov	r22,r2
    a4f0:	24c8b03a 	or	r4,r4,r19
    a4f4:	d8c00017 	ldw	r3,0(sp)
    a4f8:	2400052e 	bgeu	r4,r16,a510 <__udivdi3+0x23c>
    a4fc:	2449883a 	add	r4,r4,r17
    a500:	b0bfffc4 	addi	r2,r22,-1
    a504:	24400136 	bltu	r4,r17,a50c <__udivdi3+0x238>
    a508:	2400ca36 	bltu	r4,r16,a834 <__udivdi3+0x560>
    a50c:	102d883a 	mov	r22,r2
    a510:	2421c83a 	sub	r16,r4,r16
    a514:	a80b883a 	mov	r5,r21
    a518:	8009883a 	mov	r4,r16
    a51c:	d8c00015 	stw	r3,0(sp)
    a520:	000aee00 	call	aee0 <__umodsi3>
    a524:	1027883a 	mov	r19,r2
    a528:	a80b883a 	mov	r5,r21
    a52c:	8009883a 	mov	r4,r16
    a530:	000ae7c0 	call	ae7c <__udivsi3>
    a534:	9826943a 	slli	r19,r19,16
    a538:	1529383a 	mul	r20,r2,r20
    a53c:	94bfffcc 	andi	r18,r18,65535
    a540:	94e4b03a 	or	r18,r18,r19
    a544:	d8c00017 	ldw	r3,0(sp)
    a548:	9500052e 	bgeu	r18,r20,a560 <__udivdi3+0x28c>
    a54c:	8ca5883a 	add	r18,r17,r18
    a550:	113fffc4 	addi	r4,r2,-1
    a554:	94409736 	bltu	r18,r17,a7b4 <__udivdi3+0x4e0>
    a558:	9500962e 	bgeu	r18,r20,a7b4 <__udivdi3+0x4e0>
    a55c:	10bfff84 	addi	r2,r2,-2
    a560:	b00c943a 	slli	r6,r22,16
    a564:	3084b03a 	or	r2,r6,r2
    a568:	00000206 	br	a574 <__udivdi3+0x2a0>
    a56c:	0007883a 	mov	r3,zero
    a570:	0005883a 	mov	r2,zero
    a574:	dfc00a17 	ldw	ra,40(sp)
    a578:	df000917 	ldw	fp,36(sp)
    a57c:	ddc00817 	ldw	r23,32(sp)
    a580:	dd800717 	ldw	r22,28(sp)
    a584:	dd400617 	ldw	r21,24(sp)
    a588:	dd000517 	ldw	r20,20(sp)
    a58c:	dcc00417 	ldw	r19,16(sp)
    a590:	dc800317 	ldw	r18,12(sp)
    a594:	dc400217 	ldw	r17,8(sp)
    a598:	dc000117 	ldw	r16,4(sp)
    a59c:	dec00b04 	addi	sp,sp,44
    a5a0:	f800283a 	ret
    a5a4:	00803fc4 	movi	r2,255
    a5a8:	11c5803a 	cmpltu	r2,r2,r7
    a5ac:	100490fa 	slli	r2,r2,3
    a5b0:	003f9e06 	br	a42c <__udivdi3+0x158>
    a5b4:	00803fc4 	movi	r2,255
    a5b8:	1445803a 	cmpltu	r2,r2,r17
    a5bc:	100490fa 	slli	r2,r2,3
    a5c0:	003fb206 	br	a48c <__udivdi3+0x1b8>
    a5c4:	00804034 	movhi	r2,256
    a5c8:	10bfffc4 	addi	r2,r2,-1
    a5cc:	11808836 	bltu	r2,r6,a7f0 <__udivdi3+0x51c>
    a5d0:	00800404 	movi	r2,16
    a5d4:	003f5606 	br	a330 <__udivdi3+0x5c>
    a5d8:	30aed83a 	srl	r23,r6,r2
    a5dc:	3d4e983a 	sll	r7,r7,r21
    a5e0:	80acd83a 	srl	r22,r16,r2
    a5e4:	9884d83a 	srl	r2,r19,r2
    a5e8:	3deeb03a 	or	r23,r7,r23
    a5ec:	b824d43a 	srli	r18,r23,16
    a5f0:	8560983a 	sll	r16,r16,r21
    a5f4:	b009883a 	mov	r4,r22
    a5f8:	900b883a 	mov	r5,r18
    a5fc:	3568983a 	sll	r20,r6,r21
    a600:	1420b03a 	or	r16,r2,r16
    a604:	000aee00 	call	aee0 <__umodsi3>
    a608:	b009883a 	mov	r4,r22
    a60c:	900b883a 	mov	r5,r18
    a610:	1023883a 	mov	r17,r2
    a614:	000ae7c0 	call	ae7c <__udivsi3>
    a618:	8808943a 	slli	r4,r17,16
    a61c:	bf3fffcc 	andi	fp,r23,65535
    a620:	8006d43a 	srli	r3,r16,16
    a624:	e0a3383a 	mul	r17,fp,r2
    a628:	100d883a 	mov	r6,r2
    a62c:	1906b03a 	or	r3,r3,r4
    a630:	1c40042e 	bgeu	r3,r17,a644 <__udivdi3+0x370>
    a634:	1dc7883a 	add	r3,r3,r23
    a638:	10bfffc4 	addi	r2,r2,-1
    a63c:	1dc0752e 	bgeu	r3,r23,a814 <__udivdi3+0x540>
    a640:	100d883a 	mov	r6,r2
    a644:	1c63c83a 	sub	r17,r3,r17
    a648:	900b883a 	mov	r5,r18
    a64c:	8809883a 	mov	r4,r17
    a650:	d9800015 	stw	r6,0(sp)
    a654:	000aee00 	call	aee0 <__umodsi3>
    a658:	102d883a 	mov	r22,r2
    a65c:	8809883a 	mov	r4,r17
    a660:	900b883a 	mov	r5,r18
    a664:	000ae7c0 	call	ae7c <__udivsi3>
    a668:	b02c943a 	slli	r22,r22,16
    a66c:	e089383a 	mul	r4,fp,r2
    a670:	843fffcc 	andi	r16,r16,65535
    a674:	85a0b03a 	or	r16,r16,r22
    a678:	d9800017 	ldw	r6,0(sp)
    a67c:	8100042e 	bgeu	r16,r4,a690 <__udivdi3+0x3bc>
    a680:	85e1883a 	add	r16,r16,r23
    a684:	10ffffc4 	addi	r3,r2,-1
    a688:	85c05e2e 	bgeu	r16,r23,a804 <__udivdi3+0x530>
    a68c:	1805883a 	mov	r2,r3
    a690:	300c943a 	slli	r6,r6,16
    a694:	a17fffcc 	andi	r5,r20,65535
    a698:	a028d43a 	srli	r20,r20,16
    a69c:	3084b03a 	or	r2,r6,r2
    a6a0:	10ffffcc 	andi	r3,r2,65535
    a6a4:	100cd43a 	srli	r6,r2,16
    a6a8:	194f383a 	mul	r7,r3,r5
    a6ac:	1d07383a 	mul	r3,r3,r20
    a6b0:	314b383a 	mul	r5,r6,r5
    a6b4:	3810d43a 	srli	r8,r7,16
    a6b8:	8121c83a 	sub	r16,r16,r4
    a6bc:	1947883a 	add	r3,r3,r5
    a6c0:	40c7883a 	add	r3,r8,r3
    a6c4:	350d383a 	mul	r6,r6,r20
    a6c8:	1940022e 	bgeu	r3,r5,a6d4 <__udivdi3+0x400>
    a6cc:	01000074 	movhi	r4,1
    a6d0:	310d883a 	add	r6,r6,r4
    a6d4:	1828d43a 	srli	r20,r3,16
    a6d8:	a18d883a 	add	r6,r20,r6
    a6dc:	81803e36 	bltu	r16,r6,a7d8 <__udivdi3+0x504>
    a6e0:	81803826 	beq	r16,r6,a7c4 <__udivdi3+0x4f0>
    a6e4:	0007883a 	mov	r3,zero
    a6e8:	003fa206 	br	a574 <__udivdi3+0x2a0>
    a6ec:	88e2983a 	sll	r17,r17,r3
    a6f0:	80a8d83a 	srl	r20,r16,r2
    a6f4:	80e0983a 	sll	r16,r16,r3
    a6f8:	882ad43a 	srli	r21,r17,16
    a6fc:	9884d83a 	srl	r2,r19,r2
    a700:	a009883a 	mov	r4,r20
    a704:	a80b883a 	mov	r5,r21
    a708:	142eb03a 	or	r23,r2,r16
    a70c:	98e4983a 	sll	r18,r19,r3
    a710:	000aee00 	call	aee0 <__umodsi3>
    a714:	a009883a 	mov	r4,r20
    a718:	a80b883a 	mov	r5,r21
    a71c:	1021883a 	mov	r16,r2
    a720:	000ae7c0 	call	ae7c <__udivsi3>
    a724:	1039883a 	mov	fp,r2
    a728:	8d3fffcc 	andi	r20,r17,65535
    a72c:	8020943a 	slli	r16,r16,16
    a730:	b804d43a 	srli	r2,r23,16
    a734:	a72d383a 	mul	r22,r20,fp
    a738:	1404b03a 	or	r2,r2,r16
    a73c:	1580062e 	bgeu	r2,r22,a758 <__udivdi3+0x484>
    a740:	1445883a 	add	r2,r2,r17
    a744:	e0ffffc4 	addi	r3,fp,-1
    a748:	14403836 	bltu	r2,r17,a82c <__udivdi3+0x558>
    a74c:	1580372e 	bgeu	r2,r22,a82c <__udivdi3+0x558>
    a750:	e73fff84 	addi	fp,fp,-2
    a754:	1445883a 	add	r2,r2,r17
    a758:	15adc83a 	sub	r22,r2,r22
    a75c:	a80b883a 	mov	r5,r21
    a760:	b009883a 	mov	r4,r22
    a764:	000aee00 	call	aee0 <__umodsi3>
    a768:	1027883a 	mov	r19,r2
    a76c:	b009883a 	mov	r4,r22
    a770:	a80b883a 	mov	r5,r21
    a774:	000ae7c0 	call	ae7c <__udivsi3>
    a778:	9826943a 	slli	r19,r19,16
    a77c:	a0a1383a 	mul	r16,r20,r2
    a780:	b93fffcc 	andi	r4,r23,65535
    a784:	24c8b03a 	or	r4,r4,r19
    a788:	2400062e 	bgeu	r4,r16,a7a4 <__udivdi3+0x4d0>
    a78c:	2449883a 	add	r4,r4,r17
    a790:	10ffffc4 	addi	r3,r2,-1
    a794:	24402336 	bltu	r4,r17,a824 <__udivdi3+0x550>
    a798:	2400222e 	bgeu	r4,r16,a824 <__udivdi3+0x550>
    a79c:	10bfff84 	addi	r2,r2,-2
    a7a0:	2449883a 	add	r4,r4,r17
    a7a4:	e038943a 	slli	fp,fp,16
    a7a8:	2421c83a 	sub	r16,r4,r16
    a7ac:	e086b03a 	or	r3,fp,r2
    a7b0:	003f4306 	br	a4c0 <__udivdi3+0x1ec>
    a7b4:	2005883a 	mov	r2,r4
    a7b8:	003f6906 	br	a560 <__udivdi3+0x28c>
    a7bc:	1805883a 	mov	r2,r3
    a7c0:	003f0f06 	br	a400 <__udivdi3+0x12c>
    a7c4:	1806943a 	slli	r3,r3,16
    a7c8:	9d66983a 	sll	r19,r19,r21
    a7cc:	39ffffcc 	andi	r7,r7,65535
    a7d0:	19c7883a 	add	r3,r3,r7
    a7d4:	98ffc32e 	bgeu	r19,r3,a6e4 <__udivdi3+0x410>
    a7d8:	10bfffc4 	addi	r2,r2,-1
    a7dc:	003fc106 	br	a6e4 <__udivdi3+0x410>
    a7e0:	00800604 	movi	r2,24
    a7e4:	003f1106 	br	a42c <__udivdi3+0x158>
    a7e8:	00800604 	movi	r2,24
    a7ec:	003f2706 	br	a48c <__udivdi3+0x1b8>
    a7f0:	00800604 	movi	r2,24
    a7f4:	003ece06 	br	a330 <__udivdi3+0x5c>
    a7f8:	0007883a 	mov	r3,zero
    a7fc:	00800044 	movi	r2,1
    a800:	003f5c06 	br	a574 <__udivdi3+0x2a0>
    a804:	813fa12e 	bgeu	r16,r4,a68c <__udivdi3+0x3b8>
    a808:	10bfff84 	addi	r2,r2,-2
    a80c:	85e1883a 	add	r16,r16,r23
    a810:	003f9f06 	br	a690 <__udivdi3+0x3bc>
    a814:	1c7f8a2e 	bgeu	r3,r17,a640 <__udivdi3+0x36c>
    a818:	31bfff84 	addi	r6,r6,-2
    a81c:	1dc7883a 	add	r3,r3,r23
    a820:	003f8806 	br	a644 <__udivdi3+0x370>
    a824:	1805883a 	mov	r2,r3
    a828:	003fde06 	br	a7a4 <__udivdi3+0x4d0>
    a82c:	1839883a 	mov	fp,r3
    a830:	003fc906 	br	a758 <__udivdi3+0x484>
    a834:	b5bfff84 	addi	r22,r22,-2
    a838:	2449883a 	add	r4,r4,r17
    a83c:	003f3406 	br	a510 <__udivdi3+0x23c>
    a840:	b5bfff84 	addi	r22,r22,-2
    a844:	1445883a 	add	r2,r2,r17
    a848:	003edb06 	br	a3b8 <__udivdi3+0xe4>

0000a84c <__umoddi3>:
    a84c:	defff404 	addi	sp,sp,-48
    a850:	df000a15 	stw	fp,40(sp)
    a854:	dc400315 	stw	r17,12(sp)
    a858:	dc000215 	stw	r16,8(sp)
    a85c:	dfc00b15 	stw	ra,44(sp)
    a860:	ddc00915 	stw	r23,36(sp)
    a864:	dd800815 	stw	r22,32(sp)
    a868:	dd400715 	stw	r21,28(sp)
    a86c:	dd000615 	stw	r20,24(sp)
    a870:	dcc00515 	stw	r19,20(sp)
    a874:	dc800415 	stw	r18,16(sp)
    a878:	2021883a 	mov	r16,r4
    a87c:	2823883a 	mov	r17,r5
    a880:	2839883a 	mov	fp,r5
    a884:	38003c1e 	bne	r7,zero,a978 <__umoddi3+0x12c>
    a888:	3027883a 	mov	r19,r6
    a88c:	2029883a 	mov	r20,r4
    a890:	2980512e 	bgeu	r5,r6,a9d8 <__umoddi3+0x18c>
    a894:	00bfffd4 	movui	r2,65535
    a898:	11809a36 	bltu	r2,r6,ab04 <__umoddi3+0x2b8>
    a89c:	01003fc4 	movi	r4,255
    a8a0:	2189803a 	cmpltu	r4,r4,r6
    a8a4:	200890fa 	slli	r4,r4,3
    a8a8:	3104d83a 	srl	r2,r6,r4
    a8ac:	00c000b4 	movhi	r3,2
    a8b0:	18e7c004 	addi	r3,r3,-24832
    a8b4:	1885883a 	add	r2,r3,r2
    a8b8:	10c00003 	ldbu	r3,0(r2)
    a8bc:	00800804 	movi	r2,32
    a8c0:	1909883a 	add	r4,r3,r4
    a8c4:	1125c83a 	sub	r18,r2,r4
    a8c8:	90000526 	beq	r18,zero,a8e0 <__umoddi3+0x94>
    a8cc:	8ca2983a 	sll	r17,r17,r18
    a8d0:	8108d83a 	srl	r4,r16,r4
    a8d4:	34a6983a 	sll	r19,r6,r18
    a8d8:	84a8983a 	sll	r20,r16,r18
    a8dc:	2478b03a 	or	fp,r4,r17
    a8e0:	982ed43a 	srli	r23,r19,16
    a8e4:	e009883a 	mov	r4,fp
    a8e8:	9dbfffcc 	andi	r22,r19,65535
    a8ec:	b80b883a 	mov	r5,r23
    a8f0:	000aee00 	call	aee0 <__umodsi3>
    a8f4:	e009883a 	mov	r4,fp
    a8f8:	b80b883a 	mov	r5,r23
    a8fc:	102b883a 	mov	r21,r2
    a900:	000ae7c0 	call	ae7c <__udivsi3>
    a904:	a806943a 	slli	r3,r21,16
    a908:	a008d43a 	srli	r4,r20,16
    a90c:	b085383a 	mul	r2,r22,r2
    a910:	20c8b03a 	or	r4,r4,r3
    a914:	2080032e 	bgeu	r4,r2,a924 <__umoddi3+0xd8>
    a918:	24c9883a 	add	r4,r4,r19
    a91c:	24c00136 	bltu	r4,r19,a924 <__umoddi3+0xd8>
    a920:	20811036 	bltu	r4,r2,ad64 <__umoddi3+0x518>
    a924:	20abc83a 	sub	r21,r4,r2
    a928:	b80b883a 	mov	r5,r23
    a92c:	a809883a 	mov	r4,r21
    a930:	000aee00 	call	aee0 <__umodsi3>
    a934:	1023883a 	mov	r17,r2
    a938:	b80b883a 	mov	r5,r23
    a93c:	a809883a 	mov	r4,r21
    a940:	000ae7c0 	call	ae7c <__udivsi3>
    a944:	8822943a 	slli	r17,r17,16
    a948:	b085383a 	mul	r2,r22,r2
    a94c:	a0ffffcc 	andi	r3,r20,65535
    a950:	1c46b03a 	or	r3,r3,r17
    a954:	1880042e 	bgeu	r3,r2,a968 <__umoddi3+0x11c>
    a958:	1cc7883a 	add	r3,r3,r19
    a95c:	1cc00236 	bltu	r3,r19,a968 <__umoddi3+0x11c>
    a960:	1880012e 	bgeu	r3,r2,a968 <__umoddi3+0x11c>
    a964:	1cc7883a 	add	r3,r3,r19
    a968:	1885c83a 	sub	r2,r3,r2
    a96c:	1484d83a 	srl	r2,r2,r18
    a970:	0007883a 	mov	r3,zero
    a974:	00004f06 	br	aab4 <__umoddi3+0x268>
    a978:	29c04c36 	bltu	r5,r7,aaac <__umoddi3+0x260>
    a97c:	00bfffd4 	movui	r2,65535
    a980:	11c0582e 	bgeu	r2,r7,aae4 <__umoddi3+0x298>
    a984:	00804034 	movhi	r2,256
    a988:	10bfffc4 	addi	r2,r2,-1
    a98c:	11c0e736 	bltu	r2,r7,ad2c <__umoddi3+0x4e0>
    a990:	01000404 	movi	r4,16
    a994:	3904d83a 	srl	r2,r7,r4
    a998:	00c000b4 	movhi	r3,2
    a99c:	18e7c004 	addi	r3,r3,-24832
    a9a0:	1885883a 	add	r2,r3,r2
    a9a4:	14c00003 	ldbu	r19,0(r2)
    a9a8:	00c00804 	movi	r3,32
    a9ac:	9927883a 	add	r19,r19,r4
    a9b0:	1ce9c83a 	sub	r20,r3,r19
    a9b4:	a000581e 	bne	r20,zero,ab18 <__umoddi3+0x2cc>
    a9b8:	3c400136 	bltu	r7,r17,a9c0 <__umoddi3+0x174>
    a9bc:	8180eb36 	bltu	r16,r6,ad6c <__umoddi3+0x520>
    a9c0:	8185c83a 	sub	r2,r16,r6
    a9c4:	89e3c83a 	sub	r17,r17,r7
    a9c8:	8089803a 	cmpltu	r4,r16,r2
    a9cc:	8939c83a 	sub	fp,r17,r4
    a9d0:	e007883a 	mov	r3,fp
    a9d4:	00003706 	br	aab4 <__umoddi3+0x268>
    a9d8:	3000041e 	bne	r6,zero,a9ec <__umoddi3+0x1a0>
    a9dc:	000b883a 	mov	r5,zero
    a9e0:	01000044 	movi	r4,1
    a9e4:	000ae7c0 	call	ae7c <__udivsi3>
    a9e8:	1027883a 	mov	r19,r2
    a9ec:	00bfffd4 	movui	r2,65535
    a9f0:	14c0402e 	bgeu	r2,r19,aaf4 <__umoddi3+0x2a8>
    a9f4:	00804034 	movhi	r2,256
    a9f8:	10bfffc4 	addi	r2,r2,-1
    a9fc:	14c0cd36 	bltu	r2,r19,ad34 <__umoddi3+0x4e8>
    aa00:	00800404 	movi	r2,16
    aa04:	9886d83a 	srl	r3,r19,r2
    aa08:	010000b4 	movhi	r4,2
    aa0c:	2127c004 	addi	r4,r4,-24832
    aa10:	20c7883a 	add	r3,r4,r3
    aa14:	18c00003 	ldbu	r3,0(r3)
    aa18:	1887883a 	add	r3,r3,r2
    aa1c:	00800804 	movi	r2,32
    aa20:	10e5c83a 	sub	r18,r2,r3
    aa24:	9000901e 	bne	r18,zero,ac68 <__umoddi3+0x41c>
    aa28:	982cd43a 	srli	r22,r19,16
    aa2c:	8ce3c83a 	sub	r17,r17,r19
    aa30:	9d7fffcc 	andi	r21,r19,65535
    aa34:	b00b883a 	mov	r5,r22
    aa38:	8809883a 	mov	r4,r17
    aa3c:	000aee00 	call	aee0 <__umodsi3>
    aa40:	8809883a 	mov	r4,r17
    aa44:	b00b883a 	mov	r5,r22
    aa48:	1021883a 	mov	r16,r2
    aa4c:	000ae7c0 	call	ae7c <__udivsi3>
    aa50:	8006943a 	slli	r3,r16,16
    aa54:	a008d43a 	srli	r4,r20,16
    aa58:	1545383a 	mul	r2,r2,r21
    aa5c:	20c8b03a 	or	r4,r4,r3
    aa60:	2080042e 	bgeu	r4,r2,aa74 <__umoddi3+0x228>
    aa64:	24c9883a 	add	r4,r4,r19
    aa68:	24c00236 	bltu	r4,r19,aa74 <__umoddi3+0x228>
    aa6c:	2080012e 	bgeu	r4,r2,aa74 <__umoddi3+0x228>
    aa70:	24c9883a 	add	r4,r4,r19
    aa74:	20a1c83a 	sub	r16,r4,r2
    aa78:	b00b883a 	mov	r5,r22
    aa7c:	8009883a 	mov	r4,r16
    aa80:	000aee00 	call	aee0 <__umodsi3>
    aa84:	1023883a 	mov	r17,r2
    aa88:	b00b883a 	mov	r5,r22
    aa8c:	8009883a 	mov	r4,r16
    aa90:	000ae7c0 	call	ae7c <__udivsi3>
    aa94:	8822943a 	slli	r17,r17,16
    aa98:	1545383a 	mul	r2,r2,r21
    aa9c:	a53fffcc 	andi	r20,r20,65535
    aaa0:	a446b03a 	or	r3,r20,r17
    aaa4:	18bfb02e 	bgeu	r3,r2,a968 <__umoddi3+0x11c>
    aaa8:	003fab06 	br	a958 <__umoddi3+0x10c>
    aaac:	2005883a 	mov	r2,r4
    aab0:	2807883a 	mov	r3,r5
    aab4:	dfc00b17 	ldw	ra,44(sp)
    aab8:	df000a17 	ldw	fp,40(sp)
    aabc:	ddc00917 	ldw	r23,36(sp)
    aac0:	dd800817 	ldw	r22,32(sp)
    aac4:	dd400717 	ldw	r21,28(sp)
    aac8:	dd000617 	ldw	r20,24(sp)
    aacc:	dcc00517 	ldw	r19,20(sp)
    aad0:	dc800417 	ldw	r18,16(sp)
    aad4:	dc400317 	ldw	r17,12(sp)
    aad8:	dc000217 	ldw	r16,8(sp)
    aadc:	dec00c04 	addi	sp,sp,48
    aae0:	f800283a 	ret
    aae4:	04c03fc4 	movi	r19,255
    aae8:	99c9803a 	cmpltu	r4,r19,r7
    aaec:	200890fa 	slli	r4,r4,3
    aaf0:	003fa806 	br	a994 <__umoddi3+0x148>
    aaf4:	00803fc4 	movi	r2,255
    aaf8:	14c5803a 	cmpltu	r2,r2,r19
    aafc:	100490fa 	slli	r2,r2,3
    ab00:	003fc006 	br	aa04 <__umoddi3+0x1b8>
    ab04:	00804034 	movhi	r2,256
    ab08:	10bfffc4 	addi	r2,r2,-1
    ab0c:	11808b36 	bltu	r2,r6,ad3c <__umoddi3+0x4f0>
    ab10:	01000404 	movi	r4,16
    ab14:	003f6406 	br	a8a8 <__umoddi3+0x5c>
    ab18:	34c4d83a 	srl	r2,r6,r19
    ab1c:	3d0e983a 	sll	r7,r7,r20
    ab20:	8cf8d83a 	srl	fp,r17,r19
    ab24:	8d10983a 	sll	r8,r17,r20
    ab28:	38aab03a 	or	r21,r7,r2
    ab2c:	a82cd43a 	srli	r22,r21,16
    ab30:	84e2d83a 	srl	r17,r16,r19
    ab34:	e009883a 	mov	r4,fp
    ab38:	b00b883a 	mov	r5,r22
    ab3c:	8a22b03a 	or	r17,r17,r8
    ab40:	3524983a 	sll	r18,r6,r20
    ab44:	000aee00 	call	aee0 <__umodsi3>
    ab48:	e009883a 	mov	r4,fp
    ab4c:	b00b883a 	mov	r5,r22
    ab50:	102f883a 	mov	r23,r2
    ab54:	000ae7c0 	call	ae7c <__udivsi3>
    ab58:	100d883a 	mov	r6,r2
    ab5c:	b808943a 	slli	r4,r23,16
    ab60:	aa3fffcc 	andi	r8,r21,65535
    ab64:	8804d43a 	srli	r2,r17,16
    ab68:	41af383a 	mul	r23,r8,r6
    ab6c:	8520983a 	sll	r16,r16,r20
    ab70:	1104b03a 	or	r2,r2,r4
    ab74:	15c0042e 	bgeu	r2,r23,ab88 <__umoddi3+0x33c>
    ab78:	1545883a 	add	r2,r2,r21
    ab7c:	30ffffc4 	addi	r3,r6,-1
    ab80:	1540742e 	bgeu	r2,r21,ad54 <__umoddi3+0x508>
    ab84:	180d883a 	mov	r6,r3
    ab88:	15efc83a 	sub	r23,r2,r23
    ab8c:	b00b883a 	mov	r5,r22
    ab90:	b809883a 	mov	r4,r23
    ab94:	d9800115 	stw	r6,4(sp)
    ab98:	da000015 	stw	r8,0(sp)
    ab9c:	000aee00 	call	aee0 <__umodsi3>
    aba0:	b00b883a 	mov	r5,r22
    aba4:	b809883a 	mov	r4,r23
    aba8:	1039883a 	mov	fp,r2
    abac:	000ae7c0 	call	ae7c <__udivsi3>
    abb0:	da000017 	ldw	r8,0(sp)
    abb4:	e038943a 	slli	fp,fp,16
    abb8:	100b883a 	mov	r5,r2
    abbc:	4089383a 	mul	r4,r8,r2
    abc0:	8a3fffcc 	andi	r8,r17,65535
    abc4:	4710b03a 	or	r8,r8,fp
    abc8:	d9800117 	ldw	r6,4(sp)
    abcc:	4100042e 	bgeu	r8,r4,abe0 <__umoddi3+0x394>
    abd0:	4551883a 	add	r8,r8,r21
    abd4:	10bfffc4 	addi	r2,r2,-1
    abd8:	45405a2e 	bgeu	r8,r21,ad44 <__umoddi3+0x4f8>
    abdc:	100b883a 	mov	r5,r2
    abe0:	300c943a 	slli	r6,r6,16
    abe4:	91ffffcc 	andi	r7,r18,65535
    abe8:	9004d43a 	srli	r2,r18,16
    abec:	314cb03a 	or	r6,r6,r5
    abf0:	317fffcc 	andi	r5,r6,65535
    abf4:	300cd43a 	srli	r6,r6,16
    abf8:	29d3383a 	mul	r9,r5,r7
    abfc:	288b383a 	mul	r5,r5,r2
    ac00:	31cf383a 	mul	r7,r6,r7
    ac04:	4806d43a 	srli	r3,r9,16
    ac08:	4111c83a 	sub	r8,r8,r4
    ac0c:	29cb883a 	add	r5,r5,r7
    ac10:	194b883a 	add	r5,r3,r5
    ac14:	3085383a 	mul	r2,r6,r2
    ac18:	29c0022e 	bgeu	r5,r7,ac24 <__umoddi3+0x3d8>
    ac1c:	00c00074 	movhi	r3,1
    ac20:	10c5883a 	add	r2,r2,r3
    ac24:	2808d43a 	srli	r4,r5,16
    ac28:	280a943a 	slli	r5,r5,16
    ac2c:	4a7fffcc 	andi	r9,r9,65535
    ac30:	2085883a 	add	r2,r4,r2
    ac34:	2a4b883a 	add	r5,r5,r9
    ac38:	40803636 	bltu	r8,r2,ad14 <__umoddi3+0x4c8>
    ac3c:	40804d26 	beq	r8,r2,ad74 <__umoddi3+0x528>
    ac40:	4089c83a 	sub	r4,r8,r2
    ac44:	280f883a 	mov	r7,r5
    ac48:	81cfc83a 	sub	r7,r16,r7
    ac4c:	81c7803a 	cmpltu	r3,r16,r7
    ac50:	20c7c83a 	sub	r3,r4,r3
    ac54:	1cc4983a 	sll	r2,r3,r19
    ac58:	3d0ed83a 	srl	r7,r7,r20
    ac5c:	1d06d83a 	srl	r3,r3,r20
    ac60:	11c4b03a 	or	r2,r2,r7
    ac64:	003f9306 	br	aab4 <__umoddi3+0x268>
    ac68:	9ca6983a 	sll	r19,r19,r18
    ac6c:	88e8d83a 	srl	r20,r17,r3
    ac70:	80c4d83a 	srl	r2,r16,r3
    ac74:	982cd43a 	srli	r22,r19,16
    ac78:	8ca2983a 	sll	r17,r17,r18
    ac7c:	a009883a 	mov	r4,r20
    ac80:	b00b883a 	mov	r5,r22
    ac84:	1478b03a 	or	fp,r2,r17
    ac88:	000aee00 	call	aee0 <__umodsi3>
    ac8c:	a009883a 	mov	r4,r20
    ac90:	b00b883a 	mov	r5,r22
    ac94:	1023883a 	mov	r17,r2
    ac98:	000ae7c0 	call	ae7c <__udivsi3>
    ac9c:	9d7fffcc 	andi	r21,r19,65535
    aca0:	880a943a 	slli	r5,r17,16
    aca4:	e008d43a 	srli	r4,fp,16
    aca8:	a885383a 	mul	r2,r21,r2
    acac:	84a8983a 	sll	r20,r16,r18
    acb0:	2148b03a 	or	r4,r4,r5
    acb4:	2080042e 	bgeu	r4,r2,acc8 <__umoddi3+0x47c>
    acb8:	24c9883a 	add	r4,r4,r19
    acbc:	24c00236 	bltu	r4,r19,acc8 <__umoddi3+0x47c>
    acc0:	2080012e 	bgeu	r4,r2,acc8 <__umoddi3+0x47c>
    acc4:	24c9883a 	add	r4,r4,r19
    acc8:	20a3c83a 	sub	r17,r4,r2
    accc:	b00b883a 	mov	r5,r22
    acd0:	8809883a 	mov	r4,r17
    acd4:	000aee00 	call	aee0 <__umodsi3>
    acd8:	102f883a 	mov	r23,r2
    acdc:	8809883a 	mov	r4,r17
    ace0:	b00b883a 	mov	r5,r22
    ace4:	000ae7c0 	call	ae7c <__udivsi3>
    ace8:	b82e943a 	slli	r23,r23,16
    acec:	a885383a 	mul	r2,r21,r2
    acf0:	e13fffcc 	andi	r4,fp,65535
    acf4:	25c8b03a 	or	r4,r4,r23
    acf8:	2080042e 	bgeu	r4,r2,ad0c <__umoddi3+0x4c0>
    acfc:	24c9883a 	add	r4,r4,r19
    ad00:	24c00236 	bltu	r4,r19,ad0c <__umoddi3+0x4c0>
    ad04:	2080012e 	bgeu	r4,r2,ad0c <__umoddi3+0x4c0>
    ad08:	24c9883a 	add	r4,r4,r19
    ad0c:	20a3c83a 	sub	r17,r4,r2
    ad10:	003f4806 	br	aa34 <__umoddi3+0x1e8>
    ad14:	2c8fc83a 	sub	r7,r5,r18
    ad18:	1545c83a 	sub	r2,r2,r21
    ad1c:	29cb803a 	cmpltu	r5,r5,r7
    ad20:	1145c83a 	sub	r2,r2,r5
    ad24:	4089c83a 	sub	r4,r8,r2
    ad28:	003fc706 	br	ac48 <__umoddi3+0x3fc>
    ad2c:	01000604 	movi	r4,24
    ad30:	003f1806 	br	a994 <__umoddi3+0x148>
    ad34:	00800604 	movi	r2,24
    ad38:	003f3206 	br	aa04 <__umoddi3+0x1b8>
    ad3c:	01000604 	movi	r4,24
    ad40:	003ed906 	br	a8a8 <__umoddi3+0x5c>
    ad44:	413fa52e 	bgeu	r8,r4,abdc <__umoddi3+0x390>
    ad48:	297fff84 	addi	r5,r5,-2
    ad4c:	4551883a 	add	r8,r8,r21
    ad50:	003fa306 	br	abe0 <__umoddi3+0x394>
    ad54:	15ff8b2e 	bgeu	r2,r23,ab84 <__umoddi3+0x338>
    ad58:	31bfff84 	addi	r6,r6,-2
    ad5c:	1545883a 	add	r2,r2,r21
    ad60:	003f8906 	br	ab88 <__umoddi3+0x33c>
    ad64:	24c9883a 	add	r4,r4,r19
    ad68:	003eee06 	br	a924 <__umoddi3+0xd8>
    ad6c:	8005883a 	mov	r2,r16
    ad70:	003f1706 	br	a9d0 <__umoddi3+0x184>
    ad74:	817fe736 	bltu	r16,r5,ad14 <__umoddi3+0x4c8>
    ad78:	280f883a 	mov	r7,r5
    ad7c:	0009883a 	mov	r4,zero
    ad80:	003fb106 	br	ac48 <__umoddi3+0x3fc>

0000ad84 <__divsi3>:
    ad84:	20001b16 	blt	r4,zero,adf4 <__divsi3+0x70>
    ad88:	000f883a 	mov	r7,zero
    ad8c:	28001616 	blt	r5,zero,ade8 <__divsi3+0x64>
    ad90:	200d883a 	mov	r6,r4
    ad94:	29001a2e 	bgeu	r5,r4,ae00 <__divsi3+0x7c>
    ad98:	00800804 	movi	r2,32
    ad9c:	00c00044 	movi	r3,1
    ada0:	00000106 	br	ada8 <__divsi3+0x24>
    ada4:	10000d26 	beq	r2,zero,addc <__divsi3+0x58>
    ada8:	294b883a 	add	r5,r5,r5
    adac:	10bfffc4 	addi	r2,r2,-1
    adb0:	18c7883a 	add	r3,r3,r3
    adb4:	293ffb36 	bltu	r5,r4,ada4 <__divsi3+0x20>
    adb8:	0005883a 	mov	r2,zero
    adbc:	18000726 	beq	r3,zero,addc <__divsi3+0x58>
    adc0:	0005883a 	mov	r2,zero
    adc4:	31400236 	bltu	r6,r5,add0 <__divsi3+0x4c>
    adc8:	314dc83a 	sub	r6,r6,r5
    adcc:	10c4b03a 	or	r2,r2,r3
    add0:	1806d07a 	srli	r3,r3,1
    add4:	280ad07a 	srli	r5,r5,1
    add8:	183ffa1e 	bne	r3,zero,adc4 <__divsi3+0x40>
    addc:	38000126 	beq	r7,zero,ade4 <__divsi3+0x60>
    ade0:	0085c83a 	sub	r2,zero,r2
    ade4:	f800283a 	ret
    ade8:	014bc83a 	sub	r5,zero,r5
    adec:	39c0005c 	xori	r7,r7,1
    adf0:	003fe706 	br	ad90 <__divsi3+0xc>
    adf4:	0109c83a 	sub	r4,zero,r4
    adf8:	01c00044 	movi	r7,1
    adfc:	003fe306 	br	ad8c <__divsi3+0x8>
    ae00:	00c00044 	movi	r3,1
    ae04:	003fee06 	br	adc0 <__divsi3+0x3c>

0000ae08 <__modsi3>:
    ae08:	20001716 	blt	r4,zero,ae68 <__modsi3+0x60>
    ae0c:	000f883a 	mov	r7,zero
    ae10:	2005883a 	mov	r2,r4
    ae14:	28001216 	blt	r5,zero,ae60 <__modsi3+0x58>
    ae18:	2900162e 	bgeu	r5,r4,ae74 <__modsi3+0x6c>
    ae1c:	01800804 	movi	r6,32
    ae20:	00c00044 	movi	r3,1
    ae24:	00000106 	br	ae2c <__modsi3+0x24>
    ae28:	30000a26 	beq	r6,zero,ae54 <__modsi3+0x4c>
    ae2c:	294b883a 	add	r5,r5,r5
    ae30:	31bfffc4 	addi	r6,r6,-1
    ae34:	18c7883a 	add	r3,r3,r3
    ae38:	293ffb36 	bltu	r5,r4,ae28 <__modsi3+0x20>
    ae3c:	18000526 	beq	r3,zero,ae54 <__modsi3+0x4c>
    ae40:	1806d07a 	srli	r3,r3,1
    ae44:	11400136 	bltu	r2,r5,ae4c <__modsi3+0x44>
    ae48:	1145c83a 	sub	r2,r2,r5
    ae4c:	280ad07a 	srli	r5,r5,1
    ae50:	183ffb1e 	bne	r3,zero,ae40 <__modsi3+0x38>
    ae54:	38000126 	beq	r7,zero,ae5c <__modsi3+0x54>
    ae58:	0085c83a 	sub	r2,zero,r2
    ae5c:	f800283a 	ret
    ae60:	014bc83a 	sub	r5,zero,r5
    ae64:	003fec06 	br	ae18 <__modsi3+0x10>
    ae68:	0109c83a 	sub	r4,zero,r4
    ae6c:	01c00044 	movi	r7,1
    ae70:	003fe706 	br	ae10 <__modsi3+0x8>
    ae74:	00c00044 	movi	r3,1
    ae78:	003ff106 	br	ae40 <__modsi3+0x38>

0000ae7c <__udivsi3>:
    ae7c:	200d883a 	mov	r6,r4
    ae80:	2900152e 	bgeu	r5,r4,aed8 <__udivsi3+0x5c>
    ae84:	28001416 	blt	r5,zero,aed8 <__udivsi3+0x5c>
    ae88:	00800804 	movi	r2,32
    ae8c:	00c00044 	movi	r3,1
    ae90:	00000206 	br	ae9c <__udivsi3+0x20>
    ae94:	10000e26 	beq	r2,zero,aed0 <__udivsi3+0x54>
    ae98:	28000516 	blt	r5,zero,aeb0 <__udivsi3+0x34>
    ae9c:	294b883a 	add	r5,r5,r5
    aea0:	10bfffc4 	addi	r2,r2,-1
    aea4:	18c7883a 	add	r3,r3,r3
    aea8:	293ffa36 	bltu	r5,r4,ae94 <__udivsi3+0x18>
    aeac:	18000826 	beq	r3,zero,aed0 <__udivsi3+0x54>
    aeb0:	0005883a 	mov	r2,zero
    aeb4:	31400236 	bltu	r6,r5,aec0 <__udivsi3+0x44>
    aeb8:	314dc83a 	sub	r6,r6,r5
    aebc:	10c4b03a 	or	r2,r2,r3
    aec0:	1806d07a 	srli	r3,r3,1
    aec4:	280ad07a 	srli	r5,r5,1
    aec8:	183ffa1e 	bne	r3,zero,aeb4 <__udivsi3+0x38>
    aecc:	f800283a 	ret
    aed0:	0005883a 	mov	r2,zero
    aed4:	f800283a 	ret
    aed8:	00c00044 	movi	r3,1
    aedc:	003ff406 	br	aeb0 <__udivsi3+0x34>

0000aee0 <__umodsi3>:
    aee0:	2005883a 	mov	r2,r4
    aee4:	2900122e 	bgeu	r5,r4,af30 <__umodsi3+0x50>
    aee8:	28001116 	blt	r5,zero,af30 <__umodsi3+0x50>
    aeec:	01800804 	movi	r6,32
    aef0:	00c00044 	movi	r3,1
    aef4:	00000206 	br	af00 <__umodsi3+0x20>
    aef8:	30000c26 	beq	r6,zero,af2c <__umodsi3+0x4c>
    aefc:	28000516 	blt	r5,zero,af14 <__umodsi3+0x34>
    af00:	294b883a 	add	r5,r5,r5
    af04:	31bfffc4 	addi	r6,r6,-1
    af08:	18c7883a 	add	r3,r3,r3
    af0c:	293ffa36 	bltu	r5,r4,aef8 <__umodsi3+0x18>
    af10:	18000626 	beq	r3,zero,af2c <__umodsi3+0x4c>
    af14:	1806d07a 	srli	r3,r3,1
    af18:	11400136 	bltu	r2,r5,af20 <__umodsi3+0x40>
    af1c:	1145c83a 	sub	r2,r2,r5
    af20:	280ad07a 	srli	r5,r5,1
    af24:	183ffb1e 	bne	r3,zero,af14 <__umodsi3+0x34>
    af28:	f800283a 	ret
    af2c:	f800283a 	ret
    af30:	00c00044 	movi	r3,1
    af34:	003ff706 	br	af14 <__umodsi3+0x34>

0000af38 <__adddf3>:
    af38:	02c00434 	movhi	r11,16
    af3c:	5affffc4 	addi	r11,r11,-1
    af40:	2806d7fa 	srli	r3,r5,31
    af44:	2ad4703a 	and	r10,r5,r11
    af48:	3ad2703a 	and	r9,r7,r11
    af4c:	3804d53a 	srli	r2,r7,20
    af50:	3018d77a 	srli	r12,r6,29
    af54:	280ad53a 	srli	r5,r5,20
    af58:	501490fa 	slli	r10,r10,3
    af5c:	2010d77a 	srli	r8,r4,29
    af60:	481290fa 	slli	r9,r9,3
    af64:	380ed7fa 	srli	r7,r7,31
    af68:	defffb04 	addi	sp,sp,-20
    af6c:	dc800215 	stw	r18,8(sp)
    af70:	dc400115 	stw	r17,4(sp)
    af74:	dc000015 	stw	r16,0(sp)
    af78:	dfc00415 	stw	ra,16(sp)
    af7c:	dcc00315 	stw	r19,12(sp)
    af80:	1c803fcc 	andi	r18,r3,255
    af84:	2c01ffcc 	andi	r16,r5,2047
    af88:	5210b03a 	or	r8,r10,r8
    af8c:	202290fa 	slli	r17,r4,3
    af90:	1081ffcc 	andi	r2,r2,2047
    af94:	4b12b03a 	or	r9,r9,r12
    af98:	300c90fa 	slli	r6,r6,3
    af9c:	91c07526 	beq	r18,r7,b174 <__adddf3+0x23c>
    afa0:	8087c83a 	sub	r3,r16,r2
    afa4:	00c0ab0e 	bge	zero,r3,b254 <__adddf3+0x31c>
    afa8:	10002a1e 	bne	r2,zero,b054 <__adddf3+0x11c>
    afac:	4984b03a 	or	r2,r9,r6
    afb0:	1000961e 	bne	r2,zero,b20c <__adddf3+0x2d4>
    afb4:	888001cc 	andi	r2,r17,7
    afb8:	10000726 	beq	r2,zero,afd8 <__adddf3+0xa0>
    afbc:	888003cc 	andi	r2,r17,15
    afc0:	00c00104 	movi	r3,4
    afc4:	10c00426 	beq	r2,r3,afd8 <__adddf3+0xa0>
    afc8:	88c7883a 	add	r3,r17,r3
    afcc:	1c63803a 	cmpltu	r17,r3,r17
    afd0:	4451883a 	add	r8,r8,r17
    afd4:	1823883a 	mov	r17,r3
    afd8:	4080202c 	andhi	r2,r8,128
    afdc:	10005926 	beq	r2,zero,b144 <__adddf3+0x20c>
    afe0:	84000044 	addi	r16,r16,1
    afe4:	0081ffc4 	movi	r2,2047
    afe8:	8080ba26 	beq	r16,r2,b2d4 <__adddf3+0x39c>
    afec:	00bfe034 	movhi	r2,65408
    aff0:	10bfffc4 	addi	r2,r2,-1
    aff4:	4090703a 	and	r8,r8,r2
    aff8:	4004977a 	slli	r2,r8,29
    affc:	4010927a 	slli	r8,r8,9
    b000:	8822d0fa 	srli	r17,r17,3
    b004:	8401ffcc 	andi	r16,r16,2047
    b008:	4010d33a 	srli	r8,r8,12
    b00c:	9007883a 	mov	r3,r18
    b010:	1444b03a 	or	r2,r2,r17
    b014:	8401ffcc 	andi	r16,r16,2047
    b018:	8020953a 	slli	r16,r16,20
    b01c:	18c03fcc 	andi	r3,r3,255
    b020:	01000434 	movhi	r4,16
    b024:	213fffc4 	addi	r4,r4,-1
    b028:	180697fa 	slli	r3,r3,31
    b02c:	4110703a 	and	r8,r8,r4
    b030:	4410b03a 	or	r8,r8,r16
    b034:	40c6b03a 	or	r3,r8,r3
    b038:	dfc00417 	ldw	ra,16(sp)
    b03c:	dcc00317 	ldw	r19,12(sp)
    b040:	dc800217 	ldw	r18,8(sp)
    b044:	dc400117 	ldw	r17,4(sp)
    b048:	dc000017 	ldw	r16,0(sp)
    b04c:	dec00504 	addi	sp,sp,20
    b050:	f800283a 	ret
    b054:	0081ffc4 	movi	r2,2047
    b058:	80bfd626 	beq	r16,r2,afb4 <__adddf3+0x7c>
    b05c:	4a402034 	orhi	r9,r9,128
    b060:	00800e04 	movi	r2,56
    b064:	10c09f16 	blt	r2,r3,b2e4 <__adddf3+0x3ac>
    b068:	008007c4 	movi	r2,31
    b06c:	10c0c216 	blt	r2,r3,b378 <__adddf3+0x440>
    b070:	00800804 	movi	r2,32
    b074:	10c5c83a 	sub	r2,r2,r3
    b078:	488a983a 	sll	r5,r9,r2
    b07c:	30c8d83a 	srl	r4,r6,r3
    b080:	3084983a 	sll	r2,r6,r2
    b084:	48c6d83a 	srl	r3,r9,r3
    b088:	290cb03a 	or	r6,r5,r4
    b08c:	1004c03a 	cmpne	r2,r2,zero
    b090:	308cb03a 	or	r6,r6,r2
    b094:	898dc83a 	sub	r6,r17,r6
    b098:	89a3803a 	cmpltu	r17,r17,r6
    b09c:	40d1c83a 	sub	r8,r8,r3
    b0a0:	4451c83a 	sub	r8,r8,r17
    b0a4:	3023883a 	mov	r17,r6
    b0a8:	4080202c 	andhi	r2,r8,128
    b0ac:	10002326 	beq	r2,zero,b13c <__adddf3+0x204>
    b0b0:	04c02034 	movhi	r19,128
    b0b4:	9cffffc4 	addi	r19,r19,-1
    b0b8:	44e6703a 	and	r19,r8,r19
    b0bc:	98007626 	beq	r19,zero,b298 <__adddf3+0x360>
    b0c0:	9809883a 	mov	r4,r19
    b0c4:	000d53c0 	call	d53c <__clzsi2>
    b0c8:	10fffe04 	addi	r3,r2,-8
    b0cc:	010007c4 	movi	r4,31
    b0d0:	20c07716 	blt	r4,r3,b2b0 <__adddf3+0x378>
    b0d4:	00800804 	movi	r2,32
    b0d8:	10c5c83a 	sub	r2,r2,r3
    b0dc:	8884d83a 	srl	r2,r17,r2
    b0e0:	98d0983a 	sll	r8,r19,r3
    b0e4:	88e2983a 	sll	r17,r17,r3
    b0e8:	1204b03a 	or	r2,r2,r8
    b0ec:	1c007416 	blt	r3,r16,b2c0 <__adddf3+0x388>
    b0f0:	1c21c83a 	sub	r16,r3,r16
    b0f4:	82000044 	addi	r8,r16,1
    b0f8:	00c007c4 	movi	r3,31
    b0fc:	1a009116 	blt	r3,r8,b344 <__adddf3+0x40c>
    b100:	00c00804 	movi	r3,32
    b104:	1a07c83a 	sub	r3,r3,r8
    b108:	8a08d83a 	srl	r4,r17,r8
    b10c:	88e2983a 	sll	r17,r17,r3
    b110:	10c6983a 	sll	r3,r2,r3
    b114:	1210d83a 	srl	r8,r2,r8
    b118:	8804c03a 	cmpne	r2,r17,zero
    b11c:	1906b03a 	or	r3,r3,r4
    b120:	18a2b03a 	or	r17,r3,r2
    b124:	0021883a 	mov	r16,zero
    b128:	003fa206 	br	afb4 <__adddf3+0x7c>
    b12c:	1890b03a 	or	r8,r3,r2
    b130:	40017d26 	beq	r8,zero,b728 <__adddf3+0x7f0>
    b134:	1011883a 	mov	r8,r2
    b138:	1823883a 	mov	r17,r3
    b13c:	888001cc 	andi	r2,r17,7
    b140:	103f9e1e 	bne	r2,zero,afbc <__adddf3+0x84>
    b144:	4004977a 	slli	r2,r8,29
    b148:	8822d0fa 	srli	r17,r17,3
    b14c:	4010d0fa 	srli	r8,r8,3
    b150:	9007883a 	mov	r3,r18
    b154:	1444b03a 	or	r2,r2,r17
    b158:	0101ffc4 	movi	r4,2047
    b15c:	81002426 	beq	r16,r4,b1f0 <__adddf3+0x2b8>
    b160:	8120703a 	and	r16,r16,r4
    b164:	01000434 	movhi	r4,16
    b168:	213fffc4 	addi	r4,r4,-1
    b16c:	4110703a 	and	r8,r8,r4
    b170:	003fa806 	br	b014 <__adddf3+0xdc>
    b174:	8089c83a 	sub	r4,r16,r2
    b178:	01005e0e 	bge	zero,r4,b2f4 <__adddf3+0x3bc>
    b17c:	10002b26 	beq	r2,zero,b22c <__adddf3+0x2f4>
    b180:	0081ffc4 	movi	r2,2047
    b184:	80bf8b26 	beq	r16,r2,afb4 <__adddf3+0x7c>
    b188:	4a402034 	orhi	r9,r9,128
    b18c:	00800e04 	movi	r2,56
    b190:	1100a40e 	bge	r2,r4,b424 <__adddf3+0x4ec>
    b194:	498cb03a 	or	r6,r9,r6
    b198:	300ac03a 	cmpne	r5,r6,zero
    b19c:	0013883a 	mov	r9,zero
    b1a0:	2c4b883a 	add	r5,r5,r17
    b1a4:	2c63803a 	cmpltu	r17,r5,r17
    b1a8:	4a11883a 	add	r8,r9,r8
    b1ac:	8a11883a 	add	r8,r17,r8
    b1b0:	2823883a 	mov	r17,r5
    b1b4:	4080202c 	andhi	r2,r8,128
    b1b8:	103fe026 	beq	r2,zero,b13c <__adddf3+0x204>
    b1bc:	84000044 	addi	r16,r16,1
    b1c0:	0081ffc4 	movi	r2,2047
    b1c4:	8080d226 	beq	r16,r2,b510 <__adddf3+0x5d8>
    b1c8:	00bfe034 	movhi	r2,65408
    b1cc:	10bfffc4 	addi	r2,r2,-1
    b1d0:	4090703a 	and	r8,r8,r2
    b1d4:	880ad07a 	srli	r5,r17,1
    b1d8:	400897fa 	slli	r4,r8,31
    b1dc:	88c0004c 	andi	r3,r17,1
    b1e0:	28e2b03a 	or	r17,r5,r3
    b1e4:	4010d07a 	srli	r8,r8,1
    b1e8:	2462b03a 	or	r17,r4,r17
    b1ec:	003f7106 	br	afb4 <__adddf3+0x7c>
    b1f0:	4088b03a 	or	r4,r8,r2
    b1f4:	20014526 	beq	r4,zero,b70c <__adddf3+0x7d4>
    b1f8:	01000434 	movhi	r4,16
    b1fc:	42000234 	orhi	r8,r8,8
    b200:	213fffc4 	addi	r4,r4,-1
    b204:	4110703a 	and	r8,r8,r4
    b208:	003f8206 	br	b014 <__adddf3+0xdc>
    b20c:	18ffffc4 	addi	r3,r3,-1
    b210:	1800491e 	bne	r3,zero,b338 <__adddf3+0x400>
    b214:	898bc83a 	sub	r5,r17,r6
    b218:	8963803a 	cmpltu	r17,r17,r5
    b21c:	4251c83a 	sub	r8,r8,r9
    b220:	4451c83a 	sub	r8,r8,r17
    b224:	2823883a 	mov	r17,r5
    b228:	003f9f06 	br	b0a8 <__adddf3+0x170>
    b22c:	4984b03a 	or	r2,r9,r6
    b230:	103f6026 	beq	r2,zero,afb4 <__adddf3+0x7c>
    b234:	213fffc4 	addi	r4,r4,-1
    b238:	2000931e 	bne	r4,zero,b488 <__adddf3+0x550>
    b23c:	898d883a 	add	r6,r17,r6
    b240:	3463803a 	cmpltu	r17,r6,r17
    b244:	4251883a 	add	r8,r8,r9
    b248:	8a11883a 	add	r8,r17,r8
    b24c:	3023883a 	mov	r17,r6
    b250:	003fd806 	br	b1b4 <__adddf3+0x27c>
    b254:	1800541e 	bne	r3,zero,b3a8 <__adddf3+0x470>
    b258:	80800044 	addi	r2,r16,1
    b25c:	1081ffcc 	andi	r2,r2,2047
    b260:	00c00044 	movi	r3,1
    b264:	1880a00e 	bge	r3,r2,b4e8 <__adddf3+0x5b0>
    b268:	8989c83a 	sub	r4,r17,r6
    b26c:	8905803a 	cmpltu	r2,r17,r4
    b270:	4267c83a 	sub	r19,r8,r9
    b274:	98a7c83a 	sub	r19,r19,r2
    b278:	9880202c 	andhi	r2,r19,128
    b27c:	10006326 	beq	r2,zero,b40c <__adddf3+0x4d4>
    b280:	3463c83a 	sub	r17,r6,r17
    b284:	4a07c83a 	sub	r3,r9,r8
    b288:	344d803a 	cmpltu	r6,r6,r17
    b28c:	19a7c83a 	sub	r19,r3,r6
    b290:	3825883a 	mov	r18,r7
    b294:	983f8a1e 	bne	r19,zero,b0c0 <__adddf3+0x188>
    b298:	8809883a 	mov	r4,r17
    b29c:	000d53c0 	call	d53c <__clzsi2>
    b2a0:	10800804 	addi	r2,r2,32
    b2a4:	10fffe04 	addi	r3,r2,-8
    b2a8:	010007c4 	movi	r4,31
    b2ac:	20ff890e 	bge	r4,r3,b0d4 <__adddf3+0x19c>
    b2b0:	10bff604 	addi	r2,r2,-40
    b2b4:	8884983a 	sll	r2,r17,r2
    b2b8:	0023883a 	mov	r17,zero
    b2bc:	1c3f8c0e 	bge	r3,r16,b0f0 <__adddf3+0x1b8>
    b2c0:	023fe034 	movhi	r8,65408
    b2c4:	423fffc4 	addi	r8,r8,-1
    b2c8:	80e1c83a 	sub	r16,r16,r3
    b2cc:	1210703a 	and	r8,r2,r8
    b2d0:	003f3806 	br	afb4 <__adddf3+0x7c>
    b2d4:	9007883a 	mov	r3,r18
    b2d8:	0011883a 	mov	r8,zero
    b2dc:	0005883a 	mov	r2,zero
    b2e0:	003f4c06 	br	b014 <__adddf3+0xdc>
    b2e4:	498cb03a 	or	r6,r9,r6
    b2e8:	300cc03a 	cmpne	r6,r6,zero
    b2ec:	0007883a 	mov	r3,zero
    b2f0:	003f6806 	br	b094 <__adddf3+0x15c>
    b2f4:	20009c1e 	bne	r4,zero,b568 <__adddf3+0x630>
    b2f8:	80800044 	addi	r2,r16,1
    b2fc:	1141ffcc 	andi	r5,r2,2047
    b300:	01000044 	movi	r4,1
    b304:	2140670e 	bge	r4,r5,b4a4 <__adddf3+0x56c>
    b308:	0101ffc4 	movi	r4,2047
    b30c:	11007f26 	beq	r2,r4,b50c <__adddf3+0x5d4>
    b310:	898d883a 	add	r6,r17,r6
    b314:	4247883a 	add	r3,r8,r9
    b318:	3451803a 	cmpltu	r8,r6,r17
    b31c:	40d1883a 	add	r8,r8,r3
    b320:	402297fa 	slli	r17,r8,31
    b324:	300cd07a 	srli	r6,r6,1
    b328:	4010d07a 	srli	r8,r8,1
    b32c:	1021883a 	mov	r16,r2
    b330:	89a2b03a 	or	r17,r17,r6
    b334:	003f1f06 	br	afb4 <__adddf3+0x7c>
    b338:	0081ffc4 	movi	r2,2047
    b33c:	80bf481e 	bne	r16,r2,b060 <__adddf3+0x128>
    b340:	003f1c06 	br	afb4 <__adddf3+0x7c>
    b344:	843ff844 	addi	r16,r16,-31
    b348:	01000804 	movi	r4,32
    b34c:	1406d83a 	srl	r3,r2,r16
    b350:	41005026 	beq	r8,r4,b494 <__adddf3+0x55c>
    b354:	01001004 	movi	r4,64
    b358:	2211c83a 	sub	r8,r4,r8
    b35c:	1204983a 	sll	r2,r2,r8
    b360:	88a2b03a 	or	r17,r17,r2
    b364:	8822c03a 	cmpne	r17,r17,zero
    b368:	1c62b03a 	or	r17,r3,r17
    b36c:	0011883a 	mov	r8,zero
    b370:	0021883a 	mov	r16,zero
    b374:	003f7106 	br	b13c <__adddf3+0x204>
    b378:	193ff804 	addi	r4,r3,-32
    b37c:	00800804 	movi	r2,32
    b380:	4908d83a 	srl	r4,r9,r4
    b384:	18804526 	beq	r3,r2,b49c <__adddf3+0x564>
    b388:	00801004 	movi	r2,64
    b38c:	10c5c83a 	sub	r2,r2,r3
    b390:	4886983a 	sll	r3,r9,r2
    b394:	198cb03a 	or	r6,r3,r6
    b398:	300cc03a 	cmpne	r6,r6,zero
    b39c:	218cb03a 	or	r6,r4,r6
    b3a0:	0007883a 	mov	r3,zero
    b3a4:	003f3b06 	br	b094 <__adddf3+0x15c>
    b3a8:	80002a26 	beq	r16,zero,b454 <__adddf3+0x51c>
    b3ac:	0101ffc4 	movi	r4,2047
    b3b0:	11006826 	beq	r2,r4,b554 <__adddf3+0x61c>
    b3b4:	00c7c83a 	sub	r3,zero,r3
    b3b8:	42002034 	orhi	r8,r8,128
    b3bc:	01000e04 	movi	r4,56
    b3c0:	20c07c16 	blt	r4,r3,b5b4 <__adddf3+0x67c>
    b3c4:	010007c4 	movi	r4,31
    b3c8:	20c0da16 	blt	r4,r3,b734 <__adddf3+0x7fc>
    b3cc:	01000804 	movi	r4,32
    b3d0:	20c9c83a 	sub	r4,r4,r3
    b3d4:	4114983a 	sll	r10,r8,r4
    b3d8:	88cad83a 	srl	r5,r17,r3
    b3dc:	8908983a 	sll	r4,r17,r4
    b3e0:	40c6d83a 	srl	r3,r8,r3
    b3e4:	5162b03a 	or	r17,r10,r5
    b3e8:	2008c03a 	cmpne	r4,r4,zero
    b3ec:	8922b03a 	or	r17,r17,r4
    b3f0:	3463c83a 	sub	r17,r6,r17
    b3f4:	48c7c83a 	sub	r3,r9,r3
    b3f8:	344d803a 	cmpltu	r6,r6,r17
    b3fc:	1991c83a 	sub	r8,r3,r6
    b400:	1021883a 	mov	r16,r2
    b404:	3825883a 	mov	r18,r7
    b408:	003f2706 	br	b0a8 <__adddf3+0x170>
    b40c:	24d0b03a 	or	r8,r4,r19
    b410:	40001b1e 	bne	r8,zero,b480 <__adddf3+0x548>
    b414:	0005883a 	mov	r2,zero
    b418:	0007883a 	mov	r3,zero
    b41c:	0021883a 	mov	r16,zero
    b420:	003f4d06 	br	b158 <__adddf3+0x220>
    b424:	008007c4 	movi	r2,31
    b428:	11003c16 	blt	r2,r4,b51c <__adddf3+0x5e4>
    b42c:	00800804 	movi	r2,32
    b430:	1105c83a 	sub	r2,r2,r4
    b434:	488e983a 	sll	r7,r9,r2
    b438:	310ad83a 	srl	r5,r6,r4
    b43c:	3084983a 	sll	r2,r6,r2
    b440:	4912d83a 	srl	r9,r9,r4
    b444:	394ab03a 	or	r5,r7,r5
    b448:	1004c03a 	cmpne	r2,r2,zero
    b44c:	288ab03a 	or	r5,r5,r2
    b450:	003f5306 	br	b1a0 <__adddf3+0x268>
    b454:	4448b03a 	or	r4,r8,r17
    b458:	20003e26 	beq	r4,zero,b554 <__adddf3+0x61c>
    b45c:	00c6303a 	nor	r3,zero,r3
    b460:	18003a1e 	bne	r3,zero,b54c <__adddf3+0x614>
    b464:	3463c83a 	sub	r17,r6,r17
    b468:	4a07c83a 	sub	r3,r9,r8
    b46c:	344d803a 	cmpltu	r6,r6,r17
    b470:	1991c83a 	sub	r8,r3,r6
    b474:	1021883a 	mov	r16,r2
    b478:	3825883a 	mov	r18,r7
    b47c:	003f0a06 	br	b0a8 <__adddf3+0x170>
    b480:	2023883a 	mov	r17,r4
    b484:	003f0d06 	br	b0bc <__adddf3+0x184>
    b488:	0081ffc4 	movi	r2,2047
    b48c:	80bf3f1e 	bne	r16,r2,b18c <__adddf3+0x254>
    b490:	003ec806 	br	afb4 <__adddf3+0x7c>
    b494:	0005883a 	mov	r2,zero
    b498:	003fb106 	br	b360 <__adddf3+0x428>
    b49c:	0007883a 	mov	r3,zero
    b4a0:	003fbc06 	br	b394 <__adddf3+0x45c>
    b4a4:	4444b03a 	or	r2,r8,r17
    b4a8:	8000871e 	bne	r16,zero,b6c8 <__adddf3+0x790>
    b4ac:	1000ba26 	beq	r2,zero,b798 <__adddf3+0x860>
    b4b0:	4984b03a 	or	r2,r9,r6
    b4b4:	103ebf26 	beq	r2,zero,afb4 <__adddf3+0x7c>
    b4b8:	8985883a 	add	r2,r17,r6
    b4bc:	4247883a 	add	r3,r8,r9
    b4c0:	1451803a 	cmpltu	r8,r2,r17
    b4c4:	40d1883a 	add	r8,r8,r3
    b4c8:	40c0202c 	andhi	r3,r8,128
    b4cc:	1023883a 	mov	r17,r2
    b4d0:	183f1a26 	beq	r3,zero,b13c <__adddf3+0x204>
    b4d4:	00bfe034 	movhi	r2,65408
    b4d8:	10bfffc4 	addi	r2,r2,-1
    b4dc:	2021883a 	mov	r16,r4
    b4e0:	4090703a 	and	r8,r8,r2
    b4e4:	003eb306 	br	afb4 <__adddf3+0x7c>
    b4e8:	4444b03a 	or	r2,r8,r17
    b4ec:	8000291e 	bne	r16,zero,b594 <__adddf3+0x65c>
    b4f0:	10004b1e 	bne	r2,zero,b620 <__adddf3+0x6e8>
    b4f4:	4990b03a 	or	r8,r9,r6
    b4f8:	40008b26 	beq	r8,zero,b728 <__adddf3+0x7f0>
    b4fc:	4811883a 	mov	r8,r9
    b500:	3023883a 	mov	r17,r6
    b504:	3825883a 	mov	r18,r7
    b508:	003eaa06 	br	afb4 <__adddf3+0x7c>
    b50c:	1021883a 	mov	r16,r2
    b510:	0011883a 	mov	r8,zero
    b514:	0005883a 	mov	r2,zero
    b518:	003f0f06 	br	b158 <__adddf3+0x220>
    b51c:	217ff804 	addi	r5,r4,-32
    b520:	00800804 	movi	r2,32
    b524:	494ad83a 	srl	r5,r9,r5
    b528:	20807d26 	beq	r4,r2,b720 <__adddf3+0x7e8>
    b52c:	00801004 	movi	r2,64
    b530:	1109c83a 	sub	r4,r2,r4
    b534:	4912983a 	sll	r9,r9,r4
    b538:	498cb03a 	or	r6,r9,r6
    b53c:	300cc03a 	cmpne	r6,r6,zero
    b540:	298ab03a 	or	r5,r5,r6
    b544:	0013883a 	mov	r9,zero
    b548:	003f1506 	br	b1a0 <__adddf3+0x268>
    b54c:	0101ffc4 	movi	r4,2047
    b550:	113f9a1e 	bne	r2,r4,b3bc <__adddf3+0x484>
    b554:	4811883a 	mov	r8,r9
    b558:	3023883a 	mov	r17,r6
    b55c:	1021883a 	mov	r16,r2
    b560:	3825883a 	mov	r18,r7
    b564:	003e9306 	br	afb4 <__adddf3+0x7c>
    b568:	8000161e 	bne	r16,zero,b5c4 <__adddf3+0x68c>
    b56c:	444ab03a 	or	r5,r8,r17
    b570:	28005126 	beq	r5,zero,b6b8 <__adddf3+0x780>
    b574:	0108303a 	nor	r4,zero,r4
    b578:	20004d1e 	bne	r4,zero,b6b0 <__adddf3+0x778>
    b57c:	89a3883a 	add	r17,r17,r6
    b580:	4253883a 	add	r9,r8,r9
    b584:	898d803a 	cmpltu	r6,r17,r6
    b588:	3251883a 	add	r8,r6,r9
    b58c:	1021883a 	mov	r16,r2
    b590:	003f0806 	br	b1b4 <__adddf3+0x27c>
    b594:	1000301e 	bne	r2,zero,b658 <__adddf3+0x720>
    b598:	4984b03a 	or	r2,r9,r6
    b59c:	10007126 	beq	r2,zero,b764 <__adddf3+0x82c>
    b5a0:	4811883a 	mov	r8,r9
    b5a4:	3023883a 	mov	r17,r6
    b5a8:	3825883a 	mov	r18,r7
    b5ac:	0401ffc4 	movi	r16,2047
    b5b0:	003e8006 	br	afb4 <__adddf3+0x7c>
    b5b4:	4462b03a 	or	r17,r8,r17
    b5b8:	8822c03a 	cmpne	r17,r17,zero
    b5bc:	0007883a 	mov	r3,zero
    b5c0:	003f8b06 	br	b3f0 <__adddf3+0x4b8>
    b5c4:	0141ffc4 	movi	r5,2047
    b5c8:	11403b26 	beq	r2,r5,b6b8 <__adddf3+0x780>
    b5cc:	0109c83a 	sub	r4,zero,r4
    b5d0:	42002034 	orhi	r8,r8,128
    b5d4:	01400e04 	movi	r5,56
    b5d8:	29006716 	blt	r5,r4,b778 <__adddf3+0x840>
    b5dc:	014007c4 	movi	r5,31
    b5e0:	29007016 	blt	r5,r4,b7a4 <__adddf3+0x86c>
    b5e4:	01400804 	movi	r5,32
    b5e8:	290bc83a 	sub	r5,r5,r4
    b5ec:	4154983a 	sll	r10,r8,r5
    b5f0:	890ed83a 	srl	r7,r17,r4
    b5f4:	894a983a 	sll	r5,r17,r5
    b5f8:	4108d83a 	srl	r4,r8,r4
    b5fc:	51e2b03a 	or	r17,r10,r7
    b600:	280ac03a 	cmpne	r5,r5,zero
    b604:	8962b03a 	or	r17,r17,r5
    b608:	89a3883a 	add	r17,r17,r6
    b60c:	2253883a 	add	r9,r4,r9
    b610:	898d803a 	cmpltu	r6,r17,r6
    b614:	3251883a 	add	r8,r6,r9
    b618:	1021883a 	mov	r16,r2
    b61c:	003ee506 	br	b1b4 <__adddf3+0x27c>
    b620:	4984b03a 	or	r2,r9,r6
    b624:	103e6326 	beq	r2,zero,afb4 <__adddf3+0x7c>
    b628:	8987c83a 	sub	r3,r17,r6
    b62c:	88c9803a 	cmpltu	r4,r17,r3
    b630:	4245c83a 	sub	r2,r8,r9
    b634:	1105c83a 	sub	r2,r2,r4
    b638:	1100202c 	andhi	r4,r2,128
    b63c:	203ebb26 	beq	r4,zero,b12c <__adddf3+0x1f4>
    b640:	3463c83a 	sub	r17,r6,r17
    b644:	4a07c83a 	sub	r3,r9,r8
    b648:	344d803a 	cmpltu	r6,r6,r17
    b64c:	1991c83a 	sub	r8,r3,r6
    b650:	3825883a 	mov	r18,r7
    b654:	003e5706 	br	afb4 <__adddf3+0x7c>
    b658:	4984b03a 	or	r2,r9,r6
    b65c:	10002e26 	beq	r2,zero,b718 <__adddf3+0x7e0>
    b660:	4004d0fa 	srli	r2,r8,3
    b664:	8822d0fa 	srli	r17,r17,3
    b668:	4010977a 	slli	r8,r8,29
    b66c:	10c0022c 	andhi	r3,r2,8
    b670:	4462b03a 	or	r17,r8,r17
    b674:	18000826 	beq	r3,zero,b698 <__adddf3+0x760>
    b678:	4808d0fa 	srli	r4,r9,3
    b67c:	20c0022c 	andhi	r3,r4,8
    b680:	1800051e 	bne	r3,zero,b698 <__adddf3+0x760>
    b684:	300cd0fa 	srli	r6,r6,3
    b688:	4806977a 	slli	r3,r9,29
    b68c:	2005883a 	mov	r2,r4
    b690:	3825883a 	mov	r18,r7
    b694:	19a2b03a 	or	r17,r3,r6
    b698:	8810d77a 	srli	r8,r17,29
    b69c:	100490fa 	slli	r2,r2,3
    b6a0:	882290fa 	slli	r17,r17,3
    b6a4:	0401ffc4 	movi	r16,2047
    b6a8:	4090b03a 	or	r8,r8,r2
    b6ac:	003e4106 	br	afb4 <__adddf3+0x7c>
    b6b0:	0141ffc4 	movi	r5,2047
    b6b4:	117fc71e 	bne	r2,r5,b5d4 <__adddf3+0x69c>
    b6b8:	4811883a 	mov	r8,r9
    b6bc:	3023883a 	mov	r17,r6
    b6c0:	1021883a 	mov	r16,r2
    b6c4:	003e3b06 	br	afb4 <__adddf3+0x7c>
    b6c8:	10002f26 	beq	r2,zero,b788 <__adddf3+0x850>
    b6cc:	4984b03a 	or	r2,r9,r6
    b6d0:	10001126 	beq	r2,zero,b718 <__adddf3+0x7e0>
    b6d4:	4004d0fa 	srli	r2,r8,3
    b6d8:	8822d0fa 	srli	r17,r17,3
    b6dc:	4010977a 	slli	r8,r8,29
    b6e0:	10c0022c 	andhi	r3,r2,8
    b6e4:	4462b03a 	or	r17,r8,r17
    b6e8:	183feb26 	beq	r3,zero,b698 <__adddf3+0x760>
    b6ec:	4808d0fa 	srli	r4,r9,3
    b6f0:	20c0022c 	andhi	r3,r4,8
    b6f4:	183fe81e 	bne	r3,zero,b698 <__adddf3+0x760>
    b6f8:	300cd0fa 	srli	r6,r6,3
    b6fc:	4806977a 	slli	r3,r9,29
    b700:	2005883a 	mov	r2,r4
    b704:	19a2b03a 	or	r17,r3,r6
    b708:	003fe306 	br	b698 <__adddf3+0x760>
    b70c:	0011883a 	mov	r8,zero
    b710:	0005883a 	mov	r2,zero
    b714:	003e3f06 	br	b014 <__adddf3+0xdc>
    b718:	0401ffc4 	movi	r16,2047
    b71c:	003e2506 	br	afb4 <__adddf3+0x7c>
    b720:	0013883a 	mov	r9,zero
    b724:	003f8406 	br	b538 <__adddf3+0x600>
    b728:	0005883a 	mov	r2,zero
    b72c:	0007883a 	mov	r3,zero
    b730:	003e8906 	br	b158 <__adddf3+0x220>
    b734:	197ff804 	addi	r5,r3,-32
    b738:	01000804 	movi	r4,32
    b73c:	414ad83a 	srl	r5,r8,r5
    b740:	19002426 	beq	r3,r4,b7d4 <__adddf3+0x89c>
    b744:	01001004 	movi	r4,64
    b748:	20c7c83a 	sub	r3,r4,r3
    b74c:	40c6983a 	sll	r3,r8,r3
    b750:	1c46b03a 	or	r3,r3,r17
    b754:	1806c03a 	cmpne	r3,r3,zero
    b758:	28e2b03a 	or	r17,r5,r3
    b75c:	0007883a 	mov	r3,zero
    b760:	003f2306 	br	b3f0 <__adddf3+0x4b8>
    b764:	0007883a 	mov	r3,zero
    b768:	5811883a 	mov	r8,r11
    b76c:	00bfffc4 	movi	r2,-1
    b770:	0401ffc4 	movi	r16,2047
    b774:	003e7806 	br	b158 <__adddf3+0x220>
    b778:	4462b03a 	or	r17,r8,r17
    b77c:	8822c03a 	cmpne	r17,r17,zero
    b780:	0009883a 	mov	r4,zero
    b784:	003fa006 	br	b608 <__adddf3+0x6d0>
    b788:	4811883a 	mov	r8,r9
    b78c:	3023883a 	mov	r17,r6
    b790:	0401ffc4 	movi	r16,2047
    b794:	003e0706 	br	afb4 <__adddf3+0x7c>
    b798:	4811883a 	mov	r8,r9
    b79c:	3023883a 	mov	r17,r6
    b7a0:	003e0406 	br	afb4 <__adddf3+0x7c>
    b7a4:	21fff804 	addi	r7,r4,-32
    b7a8:	01400804 	movi	r5,32
    b7ac:	41ced83a 	srl	r7,r8,r7
    b7b0:	21400a26 	beq	r4,r5,b7dc <__adddf3+0x8a4>
    b7b4:	01401004 	movi	r5,64
    b7b8:	2909c83a 	sub	r4,r5,r4
    b7bc:	4108983a 	sll	r4,r8,r4
    b7c0:	2448b03a 	or	r4,r4,r17
    b7c4:	2008c03a 	cmpne	r4,r4,zero
    b7c8:	3922b03a 	or	r17,r7,r4
    b7cc:	0009883a 	mov	r4,zero
    b7d0:	003f8d06 	br	b608 <__adddf3+0x6d0>
    b7d4:	0007883a 	mov	r3,zero
    b7d8:	003fdd06 	br	b750 <__adddf3+0x818>
    b7dc:	0009883a 	mov	r4,zero
    b7e0:	003ff706 	br	b7c0 <__adddf3+0x888>

0000b7e4 <__divdf3>:
    b7e4:	defff204 	addi	sp,sp,-56
    b7e8:	dd400915 	stw	r21,36(sp)
    b7ec:	282ad53a 	srli	r21,r5,20
    b7f0:	dd000815 	stw	r20,32(sp)
    b7f4:	2828d7fa 	srli	r20,r5,31
    b7f8:	dc000415 	stw	r16,16(sp)
    b7fc:	04000434 	movhi	r16,16
    b800:	df000c15 	stw	fp,48(sp)
    b804:	843fffc4 	addi	r16,r16,-1
    b808:	dfc00d15 	stw	ra,52(sp)
    b80c:	ddc00b15 	stw	r23,44(sp)
    b810:	dd800a15 	stw	r22,40(sp)
    b814:	dcc00715 	stw	r19,28(sp)
    b818:	dc800615 	stw	r18,24(sp)
    b81c:	dc400515 	stw	r17,20(sp)
    b820:	ad41ffcc 	andi	r21,r21,2047
    b824:	2c20703a 	and	r16,r5,r16
    b828:	a7003fcc 	andi	fp,r20,255
    b82c:	a8006126 	beq	r21,zero,b9b4 <__divdf3+0x1d0>
    b830:	0081ffc4 	movi	r2,2047
    b834:	2025883a 	mov	r18,r4
    b838:	a8803726 	beq	r21,r2,b918 <__divdf3+0x134>
    b83c:	80800434 	orhi	r2,r16,16
    b840:	100490fa 	slli	r2,r2,3
    b844:	2020d77a 	srli	r16,r4,29
    b848:	202490fa 	slli	r18,r4,3
    b84c:	ad7f0044 	addi	r21,r21,-1023
    b850:	80a0b03a 	or	r16,r16,r2
    b854:	0027883a 	mov	r19,zero
    b858:	0013883a 	mov	r9,zero
    b85c:	3804d53a 	srli	r2,r7,20
    b860:	382cd7fa 	srli	r22,r7,31
    b864:	04400434 	movhi	r17,16
    b868:	8c7fffc4 	addi	r17,r17,-1
    b86c:	1081ffcc 	andi	r2,r2,2047
    b870:	3011883a 	mov	r8,r6
    b874:	3c62703a 	and	r17,r7,r17
    b878:	b5c03fcc 	andi	r23,r22,255
    b87c:	10006c26 	beq	r2,zero,ba30 <__divdf3+0x24c>
    b880:	00c1ffc4 	movi	r3,2047
    b884:	10c06426 	beq	r2,r3,ba18 <__divdf3+0x234>
    b888:	88c00434 	orhi	r3,r17,16
    b88c:	180690fa 	slli	r3,r3,3
    b890:	3022d77a 	srli	r17,r6,29
    b894:	301090fa 	slli	r8,r6,3
    b898:	10bf0044 	addi	r2,r2,-1023
    b89c:	88e2b03a 	or	r17,r17,r3
    b8a0:	000f883a 	mov	r7,zero
    b8a4:	a58cf03a 	xor	r6,r20,r22
    b8a8:	3cc8b03a 	or	r4,r7,r19
    b8ac:	a8abc83a 	sub	r21,r21,r2
    b8b0:	008003c4 	movi	r2,15
    b8b4:	3007883a 	mov	r3,r6
    b8b8:	34c03fcc 	andi	r19,r6,255
    b8bc:	11009036 	bltu	r2,r4,bb00 <__divdf3+0x31c>
    b8c0:	200890ba 	slli	r4,r4,2
    b8c4:	00800074 	movhi	r2,1
    b8c8:	10ae3604 	addi	r2,r2,-18216
    b8cc:	2089883a 	add	r4,r4,r2
    b8d0:	20800017 	ldw	r2,0(r4)
    b8d4:	1000683a 	jmp	r2
    b8d8:	0000bb00 	call	bb0 <get_data_bits+0xa0>
    b8dc:	0000b950 	cmplti	zero,zero,741
    b8e0:	0000baf0 	cmpltui	zero,zero,747
    b8e4:	0000b944 	movi	zero,741
    b8e8:	0000baf0 	cmpltui	zero,zero,747
    b8ec:	0000bac4 	movi	zero,747
    b8f0:	0000baf0 	cmpltui	zero,zero,747
    b8f4:	0000b944 	movi	zero,741
    b8f8:	0000b950 	cmplti	zero,zero,741
    b8fc:	0000b950 	cmplti	zero,zero,741
    b900:	0000bac4 	movi	zero,747
    b904:	0000b944 	movi	zero,741
    b908:	0000b934 	movhi	zero,740
    b90c:	0000b934 	movhi	zero,740
    b910:	0000b934 	movhi	zero,740
    b914:	0000bde4 	muli	zero,zero,759
    b918:	2404b03a 	or	r2,r4,r16
    b91c:	1000661e 	bne	r2,zero,bab8 <__divdf3+0x2d4>
    b920:	04c00204 	movi	r19,8
    b924:	0021883a 	mov	r16,zero
    b928:	0025883a 	mov	r18,zero
    b92c:	02400084 	movi	r9,2
    b930:	003fca06 	br	b85c <__divdf3+0x78>
    b934:	8023883a 	mov	r17,r16
    b938:	9011883a 	mov	r8,r18
    b93c:	e02f883a 	mov	r23,fp
    b940:	480f883a 	mov	r7,r9
    b944:	00800084 	movi	r2,2
    b948:	3881311e 	bne	r7,r2,be10 <__divdf3+0x62c>
    b94c:	b827883a 	mov	r19,r23
    b950:	98c0004c 	andi	r3,r19,1
    b954:	0081ffc4 	movi	r2,2047
    b958:	000b883a 	mov	r5,zero
    b95c:	0025883a 	mov	r18,zero
    b960:	1004953a 	slli	r2,r2,20
    b964:	18c03fcc 	andi	r3,r3,255
    b968:	04400434 	movhi	r17,16
    b96c:	8c7fffc4 	addi	r17,r17,-1
    b970:	180697fa 	slli	r3,r3,31
    b974:	2c4a703a 	and	r5,r5,r17
    b978:	288ab03a 	or	r5,r5,r2
    b97c:	28c6b03a 	or	r3,r5,r3
    b980:	9005883a 	mov	r2,r18
    b984:	dfc00d17 	ldw	ra,52(sp)
    b988:	df000c17 	ldw	fp,48(sp)
    b98c:	ddc00b17 	ldw	r23,44(sp)
    b990:	dd800a17 	ldw	r22,40(sp)
    b994:	dd400917 	ldw	r21,36(sp)
    b998:	dd000817 	ldw	r20,32(sp)
    b99c:	dcc00717 	ldw	r19,28(sp)
    b9a0:	dc800617 	ldw	r18,24(sp)
    b9a4:	dc400517 	ldw	r17,20(sp)
    b9a8:	dc000417 	ldw	r16,16(sp)
    b9ac:	dec00e04 	addi	sp,sp,56
    b9b0:	f800283a 	ret
    b9b4:	2404b03a 	or	r2,r4,r16
    b9b8:	2027883a 	mov	r19,r4
    b9bc:	10003926 	beq	r2,zero,baa4 <__divdf3+0x2c0>
    b9c0:	80012e26 	beq	r16,zero,be7c <__divdf3+0x698>
    b9c4:	8009883a 	mov	r4,r16
    b9c8:	d9800315 	stw	r6,12(sp)
    b9cc:	d9c00215 	stw	r7,8(sp)
    b9d0:	000d53c0 	call	d53c <__clzsi2>
    b9d4:	d9800317 	ldw	r6,12(sp)
    b9d8:	d9c00217 	ldw	r7,8(sp)
    b9dc:	113ffd44 	addi	r4,r2,-11
    b9e0:	00c00704 	movi	r3,28
    b9e4:	19012116 	blt	r3,r4,be6c <__divdf3+0x688>
    b9e8:	00c00744 	movi	r3,29
    b9ec:	147ffe04 	addi	r17,r2,-8
    b9f0:	1907c83a 	sub	r3,r3,r4
    b9f4:	8460983a 	sll	r16,r16,r17
    b9f8:	98c6d83a 	srl	r3,r19,r3
    b9fc:	9c64983a 	sll	r18,r19,r17
    ba00:	1c20b03a 	or	r16,r3,r16
    ba04:	1080fcc4 	addi	r2,r2,1011
    ba08:	00abc83a 	sub	r21,zero,r2
    ba0c:	0027883a 	mov	r19,zero
    ba10:	0013883a 	mov	r9,zero
    ba14:	003f9106 	br	b85c <__divdf3+0x78>
    ba18:	3446b03a 	or	r3,r6,r17
    ba1c:	18001f1e 	bne	r3,zero,ba9c <__divdf3+0x2b8>
    ba20:	0023883a 	mov	r17,zero
    ba24:	0011883a 	mov	r8,zero
    ba28:	01c00084 	movi	r7,2
    ba2c:	003f9d06 	br	b8a4 <__divdf3+0xc0>
    ba30:	3446b03a 	or	r3,r6,r17
    ba34:	18001526 	beq	r3,zero,ba8c <__divdf3+0x2a8>
    ba38:	88011b26 	beq	r17,zero,bea8 <__divdf3+0x6c4>
    ba3c:	8809883a 	mov	r4,r17
    ba40:	d9800315 	stw	r6,12(sp)
    ba44:	da400115 	stw	r9,4(sp)
    ba48:	000d53c0 	call	d53c <__clzsi2>
    ba4c:	d9800317 	ldw	r6,12(sp)
    ba50:	da400117 	ldw	r9,4(sp)
    ba54:	113ffd44 	addi	r4,r2,-11
    ba58:	00c00704 	movi	r3,28
    ba5c:	19010e16 	blt	r3,r4,be98 <__divdf3+0x6b4>
    ba60:	00c00744 	movi	r3,29
    ba64:	123ffe04 	addi	r8,r2,-8
    ba68:	1907c83a 	sub	r3,r3,r4
    ba6c:	8a22983a 	sll	r17,r17,r8
    ba70:	30c6d83a 	srl	r3,r6,r3
    ba74:	3210983a 	sll	r8,r6,r8
    ba78:	1c62b03a 	or	r17,r3,r17
    ba7c:	1080fcc4 	addi	r2,r2,1011
    ba80:	0085c83a 	sub	r2,zero,r2
    ba84:	000f883a 	mov	r7,zero
    ba88:	003f8606 	br	b8a4 <__divdf3+0xc0>
    ba8c:	0023883a 	mov	r17,zero
    ba90:	0011883a 	mov	r8,zero
    ba94:	01c00044 	movi	r7,1
    ba98:	003f8206 	br	b8a4 <__divdf3+0xc0>
    ba9c:	01c000c4 	movi	r7,3
    baa0:	003f8006 	br	b8a4 <__divdf3+0xc0>
    baa4:	04c00104 	movi	r19,4
    baa8:	0021883a 	mov	r16,zero
    baac:	0025883a 	mov	r18,zero
    bab0:	02400044 	movi	r9,1
    bab4:	003f6906 	br	b85c <__divdf3+0x78>
    bab8:	04c00304 	movi	r19,12
    babc:	024000c4 	movi	r9,3
    bac0:	003f6606 	br	b85c <__divdf3+0x78>
    bac4:	01400434 	movhi	r5,16
    bac8:	0007883a 	mov	r3,zero
    bacc:	297fffc4 	addi	r5,r5,-1
    bad0:	04bfffc4 	movi	r18,-1
    bad4:	0081ffc4 	movi	r2,2047
    bad8:	003fa106 	br	b960 <__divdf3+0x17c>
    badc:	00c00044 	movi	r3,1
    bae0:	1887c83a 	sub	r3,r3,r2
    bae4:	01000e04 	movi	r4,56
    bae8:	20c1210e 	bge	r4,r3,bf70 <__divdf3+0x78c>
    baec:	98c0004c 	andi	r3,r19,1
    baf0:	0005883a 	mov	r2,zero
    baf4:	000b883a 	mov	r5,zero
    baf8:	0025883a 	mov	r18,zero
    bafc:	003f9806 	br	b960 <__divdf3+0x17c>
    bb00:	8c00fd36 	bltu	r17,r16,bef8 <__divdf3+0x714>
    bb04:	8440fb26 	beq	r16,r17,bef4 <__divdf3+0x710>
    bb08:	8007883a 	mov	r3,r16
    bb0c:	ad7fffc4 	addi	r21,r21,-1
    bb10:	0021883a 	mov	r16,zero
    bb14:	4004d63a 	srli	r2,r8,24
    bb18:	8822923a 	slli	r17,r17,8
    bb1c:	1809883a 	mov	r4,r3
    bb20:	402c923a 	slli	r22,r8,8
    bb24:	88b8b03a 	or	fp,r17,r2
    bb28:	e028d43a 	srli	r20,fp,16
    bb2c:	d8c00015 	stw	r3,0(sp)
    bb30:	e5ffffcc 	andi	r23,fp,65535
    bb34:	a00b883a 	mov	r5,r20
    bb38:	000ae7c0 	call	ae7c <__udivsi3>
    bb3c:	d8c00017 	ldw	r3,0(sp)
    bb40:	a00b883a 	mov	r5,r20
    bb44:	d8800315 	stw	r2,12(sp)
    bb48:	1809883a 	mov	r4,r3
    bb4c:	000aee00 	call	aee0 <__umodsi3>
    bb50:	d9800317 	ldw	r6,12(sp)
    bb54:	1006943a 	slli	r3,r2,16
    bb58:	9004d43a 	srli	r2,r18,16
    bb5c:	b9a3383a 	mul	r17,r23,r6
    bb60:	10c4b03a 	or	r2,r2,r3
    bb64:	1440062e 	bgeu	r2,r17,bb80 <__divdf3+0x39c>
    bb68:	1705883a 	add	r2,r2,fp
    bb6c:	30ffffc4 	addi	r3,r6,-1
    bb70:	1700ee36 	bltu	r2,fp,bf2c <__divdf3+0x748>
    bb74:	1440ed2e 	bgeu	r2,r17,bf2c <__divdf3+0x748>
    bb78:	31bfff84 	addi	r6,r6,-2
    bb7c:	1705883a 	add	r2,r2,fp
    bb80:	1463c83a 	sub	r17,r2,r17
    bb84:	a00b883a 	mov	r5,r20
    bb88:	8809883a 	mov	r4,r17
    bb8c:	d9800315 	stw	r6,12(sp)
    bb90:	000ae7c0 	call	ae7c <__udivsi3>
    bb94:	a00b883a 	mov	r5,r20
    bb98:	8809883a 	mov	r4,r17
    bb9c:	d8800215 	stw	r2,8(sp)
    bba0:	000aee00 	call	aee0 <__umodsi3>
    bba4:	d9c00217 	ldw	r7,8(sp)
    bba8:	1004943a 	slli	r2,r2,16
    bbac:	94bfffcc 	andi	r18,r18,65535
    bbb0:	b9d1383a 	mul	r8,r23,r7
    bbb4:	90a4b03a 	or	r18,r18,r2
    bbb8:	d9800317 	ldw	r6,12(sp)
    bbbc:	9200062e 	bgeu	r18,r8,bbd8 <__divdf3+0x3f4>
    bbc0:	9725883a 	add	r18,r18,fp
    bbc4:	38bfffc4 	addi	r2,r7,-1
    bbc8:	9700d636 	bltu	r18,fp,bf24 <__divdf3+0x740>
    bbcc:	9200d52e 	bgeu	r18,r8,bf24 <__divdf3+0x740>
    bbd0:	39ffff84 	addi	r7,r7,-2
    bbd4:	9725883a 	add	r18,r18,fp
    bbd8:	3004943a 	slli	r2,r6,16
    bbdc:	b012d43a 	srli	r9,r22,16
    bbe0:	b1bfffcc 	andi	r6,r22,65535
    bbe4:	11e2b03a 	or	r17,r2,r7
    bbe8:	8806d43a 	srli	r3,r17,16
    bbec:	893fffcc 	andi	r4,r17,65535
    bbf0:	218b383a 	mul	r5,r4,r6
    bbf4:	30c5383a 	mul	r2,r6,r3
    bbf8:	2249383a 	mul	r4,r4,r9
    bbfc:	280ed43a 	srli	r7,r5,16
    bc00:	9225c83a 	sub	r18,r18,r8
    bc04:	2089883a 	add	r4,r4,r2
    bc08:	3909883a 	add	r4,r7,r4
    bc0c:	1a47383a 	mul	r3,r3,r9
    bc10:	2080022e 	bgeu	r4,r2,bc1c <__divdf3+0x438>
    bc14:	00800074 	movhi	r2,1
    bc18:	1887883a 	add	r3,r3,r2
    bc1c:	2004d43a 	srli	r2,r4,16
    bc20:	2008943a 	slli	r4,r4,16
    bc24:	297fffcc 	andi	r5,r5,65535
    bc28:	10c7883a 	add	r3,r2,r3
    bc2c:	2149883a 	add	r4,r4,r5
    bc30:	90c0a536 	bltu	r18,r3,bec8 <__divdf3+0x6e4>
    bc34:	90c0bf26 	beq	r18,r3,bf34 <__divdf3+0x750>
    bc38:	90c7c83a 	sub	r3,r18,r3
    bc3c:	810fc83a 	sub	r7,r16,r4
    bc40:	81e5803a 	cmpltu	r18,r16,r7
    bc44:	1ca5c83a 	sub	r18,r3,r18
    bc48:	e480c126 	beq	fp,r18,bf50 <__divdf3+0x76c>
    bc4c:	a00b883a 	mov	r5,r20
    bc50:	9009883a 	mov	r4,r18
    bc54:	d9800315 	stw	r6,12(sp)
    bc58:	d9c00215 	stw	r7,8(sp)
    bc5c:	da400115 	stw	r9,4(sp)
    bc60:	000ae7c0 	call	ae7c <__udivsi3>
    bc64:	a00b883a 	mov	r5,r20
    bc68:	9009883a 	mov	r4,r18
    bc6c:	d8800015 	stw	r2,0(sp)
    bc70:	000aee00 	call	aee0 <__umodsi3>
    bc74:	d9c00217 	ldw	r7,8(sp)
    bc78:	da000017 	ldw	r8,0(sp)
    bc7c:	1006943a 	slli	r3,r2,16
    bc80:	3804d43a 	srli	r2,r7,16
    bc84:	ba21383a 	mul	r16,r23,r8
    bc88:	d9800317 	ldw	r6,12(sp)
    bc8c:	10c4b03a 	or	r2,r2,r3
    bc90:	da400117 	ldw	r9,4(sp)
    bc94:	1400062e 	bgeu	r2,r16,bcb0 <__divdf3+0x4cc>
    bc98:	1705883a 	add	r2,r2,fp
    bc9c:	40ffffc4 	addi	r3,r8,-1
    bca0:	1700ad36 	bltu	r2,fp,bf58 <__divdf3+0x774>
    bca4:	1400ac2e 	bgeu	r2,r16,bf58 <__divdf3+0x774>
    bca8:	423fff84 	addi	r8,r8,-2
    bcac:	1705883a 	add	r2,r2,fp
    bcb0:	1421c83a 	sub	r16,r2,r16
    bcb4:	a00b883a 	mov	r5,r20
    bcb8:	8009883a 	mov	r4,r16
    bcbc:	d9800315 	stw	r6,12(sp)
    bcc0:	d9c00215 	stw	r7,8(sp)
    bcc4:	da000015 	stw	r8,0(sp)
    bcc8:	da400115 	stw	r9,4(sp)
    bccc:	000ae7c0 	call	ae7c <__udivsi3>
    bcd0:	8009883a 	mov	r4,r16
    bcd4:	a00b883a 	mov	r5,r20
    bcd8:	1025883a 	mov	r18,r2
    bcdc:	000aee00 	call	aee0 <__umodsi3>
    bce0:	d9c00217 	ldw	r7,8(sp)
    bce4:	1004943a 	slli	r2,r2,16
    bce8:	bcaf383a 	mul	r23,r23,r18
    bcec:	393fffcc 	andi	r4,r7,65535
    bcf0:	2088b03a 	or	r4,r4,r2
    bcf4:	d9800317 	ldw	r6,12(sp)
    bcf8:	da000017 	ldw	r8,0(sp)
    bcfc:	da400117 	ldw	r9,4(sp)
    bd00:	25c0062e 	bgeu	r4,r23,bd1c <__divdf3+0x538>
    bd04:	2709883a 	add	r4,r4,fp
    bd08:	90bfffc4 	addi	r2,r18,-1
    bd0c:	27009436 	bltu	r4,fp,bf60 <__divdf3+0x77c>
    bd10:	25c0932e 	bgeu	r4,r23,bf60 <__divdf3+0x77c>
    bd14:	94bfff84 	addi	r18,r18,-2
    bd18:	2709883a 	add	r4,r4,fp
    bd1c:	4004943a 	slli	r2,r8,16
    bd20:	25efc83a 	sub	r23,r4,r23
    bd24:	1490b03a 	or	r8,r2,r18
    bd28:	4008d43a 	srli	r4,r8,16
    bd2c:	40ffffcc 	andi	r3,r8,65535
    bd30:	30c5383a 	mul	r2,r6,r3
    bd34:	1a47383a 	mul	r3,r3,r9
    bd38:	310d383a 	mul	r6,r6,r4
    bd3c:	100ad43a 	srli	r5,r2,16
    bd40:	4913383a 	mul	r9,r9,r4
    bd44:	1987883a 	add	r3,r3,r6
    bd48:	28c7883a 	add	r3,r5,r3
    bd4c:	1980022e 	bgeu	r3,r6,bd58 <__divdf3+0x574>
    bd50:	01000074 	movhi	r4,1
    bd54:	4913883a 	add	r9,r9,r4
    bd58:	1808d43a 	srli	r4,r3,16
    bd5c:	1806943a 	slli	r3,r3,16
    bd60:	10bfffcc 	andi	r2,r2,65535
    bd64:	2253883a 	add	r9,r4,r9
    bd68:	1887883a 	add	r3,r3,r2
    bd6c:	ba403836 	bltu	r23,r9,be50 <__divdf3+0x66c>
    bd70:	ba403626 	beq	r23,r9,be4c <__divdf3+0x668>
    bd74:	42000054 	ori	r8,r8,1
    bd78:	a880ffc4 	addi	r2,r21,1023
    bd7c:	00bf570e 	bge	zero,r2,badc <__divdf3+0x2f8>
    bd80:	40c001cc 	andi	r3,r8,7
    bd84:	18000726 	beq	r3,zero,bda4 <__divdf3+0x5c0>
    bd88:	40c003cc 	andi	r3,r8,15
    bd8c:	01000104 	movi	r4,4
    bd90:	19000426 	beq	r3,r4,bda4 <__divdf3+0x5c0>
    bd94:	4107883a 	add	r3,r8,r4
    bd98:	1a11803a 	cmpltu	r8,r3,r8
    bd9c:	8a23883a 	add	r17,r17,r8
    bda0:	1811883a 	mov	r8,r3
    bda4:	88c0402c 	andhi	r3,r17,256
    bda8:	18000426 	beq	r3,zero,bdbc <__divdf3+0x5d8>
    bdac:	00ffc034 	movhi	r3,65280
    bdb0:	18ffffc4 	addi	r3,r3,-1
    bdb4:	a8810004 	addi	r2,r21,1024
    bdb8:	88e2703a 	and	r17,r17,r3
    bdbc:	00c1ff84 	movi	r3,2046
    bdc0:	18bee316 	blt	r3,r2,b950 <__divdf3+0x16c>
    bdc4:	8824977a 	slli	r18,r17,29
    bdc8:	4010d0fa 	srli	r8,r8,3
    bdcc:	8822927a 	slli	r17,r17,9
    bdd0:	1081ffcc 	andi	r2,r2,2047
    bdd4:	9224b03a 	or	r18,r18,r8
    bdd8:	880ad33a 	srli	r5,r17,12
    bddc:	98c0004c 	andi	r3,r19,1
    bde0:	003edf06 	br	b960 <__divdf3+0x17c>
    bde4:	8080022c 	andhi	r2,r16,8
    bde8:	10001226 	beq	r2,zero,be34 <__divdf3+0x650>
    bdec:	8880022c 	andhi	r2,r17,8
    bdf0:	1000101e 	bne	r2,zero,be34 <__divdf3+0x650>
    bdf4:	00800434 	movhi	r2,16
    bdf8:	89400234 	orhi	r5,r17,8
    bdfc:	10bfffc4 	addi	r2,r2,-1
    be00:	b007883a 	mov	r3,r22
    be04:	288a703a 	and	r5,r5,r2
    be08:	4025883a 	mov	r18,r8
    be0c:	003f3106 	br	bad4 <__divdf3+0x2f0>
    be10:	008000c4 	movi	r2,3
    be14:	3880a626 	beq	r7,r2,c0b0 <__divdf3+0x8cc>
    be18:	00800044 	movi	r2,1
    be1c:	3880521e 	bne	r7,r2,bf68 <__divdf3+0x784>
    be20:	b807883a 	mov	r3,r23
    be24:	0005883a 	mov	r2,zero
    be28:	000b883a 	mov	r5,zero
    be2c:	0025883a 	mov	r18,zero
    be30:	003ecb06 	br	b960 <__divdf3+0x17c>
    be34:	00800434 	movhi	r2,16
    be38:	81400234 	orhi	r5,r16,8
    be3c:	10bfffc4 	addi	r2,r2,-1
    be40:	a007883a 	mov	r3,r20
    be44:	288a703a 	and	r5,r5,r2
    be48:	003f2206 	br	bad4 <__divdf3+0x2f0>
    be4c:	183fca26 	beq	r3,zero,bd78 <__divdf3+0x594>
    be50:	e5ef883a 	add	r23,fp,r23
    be54:	40bfffc4 	addi	r2,r8,-1
    be58:	bf00392e 	bgeu	r23,fp,bf40 <__divdf3+0x75c>
    be5c:	1011883a 	mov	r8,r2
    be60:	ba7fc41e 	bne	r23,r9,bd74 <__divdf3+0x590>
    be64:	b0ffc31e 	bne	r22,r3,bd74 <__divdf3+0x590>
    be68:	003fc306 	br	bd78 <__divdf3+0x594>
    be6c:	143ff604 	addi	r16,r2,-40
    be70:	9c20983a 	sll	r16,r19,r16
    be74:	0025883a 	mov	r18,zero
    be78:	003ee206 	br	ba04 <__divdf3+0x220>
    be7c:	d9800315 	stw	r6,12(sp)
    be80:	d9c00215 	stw	r7,8(sp)
    be84:	000d53c0 	call	d53c <__clzsi2>
    be88:	10800804 	addi	r2,r2,32
    be8c:	d9c00217 	ldw	r7,8(sp)
    be90:	d9800317 	ldw	r6,12(sp)
    be94:	003ed106 	br	b9dc <__divdf3+0x1f8>
    be98:	147ff604 	addi	r17,r2,-40
    be9c:	3462983a 	sll	r17,r6,r17
    bea0:	0011883a 	mov	r8,zero
    bea4:	003ef506 	br	ba7c <__divdf3+0x298>
    bea8:	3009883a 	mov	r4,r6
    beac:	d9800315 	stw	r6,12(sp)
    beb0:	da400115 	stw	r9,4(sp)
    beb4:	000d53c0 	call	d53c <__clzsi2>
    beb8:	10800804 	addi	r2,r2,32
    bebc:	da400117 	ldw	r9,4(sp)
    bec0:	d9800317 	ldw	r6,12(sp)
    bec4:	003ee306 	br	ba54 <__divdf3+0x270>
    bec8:	85a1883a 	add	r16,r16,r22
    becc:	8585803a 	cmpltu	r2,r16,r22
    bed0:	1705883a 	add	r2,r2,fp
    bed4:	14a5883a 	add	r18,r2,r18
    bed8:	88bfffc4 	addi	r2,r17,-1
    bedc:	e4800c2e 	bgeu	fp,r18,bf10 <__divdf3+0x72c>
    bee0:	90c03e36 	bltu	r18,r3,bfdc <__divdf3+0x7f8>
    bee4:	1c806926 	beq	r3,r18,c08c <__divdf3+0x8a8>
    bee8:	90c7c83a 	sub	r3,r18,r3
    beec:	1023883a 	mov	r17,r2
    bef0:	003f5206 	br	bc3c <__divdf3+0x458>
    bef4:	923f0436 	bltu	r18,r8,bb08 <__divdf3+0x324>
    bef8:	800897fa 	slli	r4,r16,31
    befc:	9004d07a 	srli	r2,r18,1
    bf00:	8006d07a 	srli	r3,r16,1
    bf04:	902097fa 	slli	r16,r18,31
    bf08:	20a4b03a 	or	r18,r4,r2
    bf0c:	003f0106 	br	bb14 <__divdf3+0x330>
    bf10:	e4bff51e 	bne	fp,r18,bee8 <__divdf3+0x704>
    bf14:	85bff22e 	bgeu	r16,r22,bee0 <__divdf3+0x6fc>
    bf18:	e0c7c83a 	sub	r3,fp,r3
    bf1c:	1023883a 	mov	r17,r2
    bf20:	003f4606 	br	bc3c <__divdf3+0x458>
    bf24:	100f883a 	mov	r7,r2
    bf28:	003f2b06 	br	bbd8 <__divdf3+0x3f4>
    bf2c:	180d883a 	mov	r6,r3
    bf30:	003f1306 	br	bb80 <__divdf3+0x39c>
    bf34:	813fe436 	bltu	r16,r4,bec8 <__divdf3+0x6e4>
    bf38:	0007883a 	mov	r3,zero
    bf3c:	003f3f06 	br	bc3c <__divdf3+0x458>
    bf40:	ba402c36 	bltu	r23,r9,bff4 <__divdf3+0x810>
    bf44:	4dc05426 	beq	r9,r23,c098 <__divdf3+0x8b4>
    bf48:	1011883a 	mov	r8,r2
    bf4c:	003f8906 	br	bd74 <__divdf3+0x590>
    bf50:	023fffc4 	movi	r8,-1
    bf54:	003f8806 	br	bd78 <__divdf3+0x594>
    bf58:	1811883a 	mov	r8,r3
    bf5c:	003f5406 	br	bcb0 <__divdf3+0x4cc>
    bf60:	1025883a 	mov	r18,r2
    bf64:	003f6d06 	br	bd1c <__divdf3+0x538>
    bf68:	b827883a 	mov	r19,r23
    bf6c:	003f8206 	br	bd78 <__divdf3+0x594>
    bf70:	010007c4 	movi	r4,31
    bf74:	20c02616 	blt	r4,r3,c010 <__divdf3+0x82c>
    bf78:	00800804 	movi	r2,32
    bf7c:	10c5c83a 	sub	r2,r2,r3
    bf80:	888a983a 	sll	r5,r17,r2
    bf84:	40c8d83a 	srl	r4,r8,r3
    bf88:	4084983a 	sll	r2,r8,r2
    bf8c:	88e2d83a 	srl	r17,r17,r3
    bf90:	2906b03a 	or	r3,r5,r4
    bf94:	1004c03a 	cmpne	r2,r2,zero
    bf98:	1886b03a 	or	r3,r3,r2
    bf9c:	188001cc 	andi	r2,r3,7
    bfa0:	10000726 	beq	r2,zero,bfc0 <__divdf3+0x7dc>
    bfa4:	188003cc 	andi	r2,r3,15
    bfa8:	01000104 	movi	r4,4
    bfac:	11000426 	beq	r2,r4,bfc0 <__divdf3+0x7dc>
    bfb0:	1805883a 	mov	r2,r3
    bfb4:	10c00104 	addi	r3,r2,4
    bfb8:	1885803a 	cmpltu	r2,r3,r2
    bfbc:	88a3883a 	add	r17,r17,r2
    bfc0:	8880202c 	andhi	r2,r17,128
    bfc4:	10002726 	beq	r2,zero,c064 <__divdf3+0x880>
    bfc8:	98c0004c 	andi	r3,r19,1
    bfcc:	00800044 	movi	r2,1
    bfd0:	000b883a 	mov	r5,zero
    bfd4:	0025883a 	mov	r18,zero
    bfd8:	003e6106 	br	b960 <__divdf3+0x17c>
    bfdc:	85a1883a 	add	r16,r16,r22
    bfe0:	8585803a 	cmpltu	r2,r16,r22
    bfe4:	1705883a 	add	r2,r2,fp
    bfe8:	14a5883a 	add	r18,r2,r18
    bfec:	8c7fff84 	addi	r17,r17,-2
    bff0:	003f1106 	br	bc38 <__divdf3+0x454>
    bff4:	b589883a 	add	r4,r22,r22
    bff8:	25ad803a 	cmpltu	r22,r4,r22
    bffc:	b739883a 	add	fp,r22,fp
    c000:	40bfff84 	addi	r2,r8,-2
    c004:	bf2f883a 	add	r23,r23,fp
    c008:	202d883a 	mov	r22,r4
    c00c:	003f9306 	br	be5c <__divdf3+0x678>
    c010:	013ff844 	movi	r4,-31
    c014:	2085c83a 	sub	r2,r4,r2
    c018:	8888d83a 	srl	r4,r17,r2
    c01c:	00800804 	movi	r2,32
    c020:	18802126 	beq	r3,r2,c0a8 <__divdf3+0x8c4>
    c024:	00801004 	movi	r2,64
    c028:	10c5c83a 	sub	r2,r2,r3
    c02c:	8884983a 	sll	r2,r17,r2
    c030:	1204b03a 	or	r2,r2,r8
    c034:	1004c03a 	cmpne	r2,r2,zero
    c038:	2084b03a 	or	r2,r4,r2
    c03c:	144001cc 	andi	r17,r2,7
    c040:	88000d1e 	bne	r17,zero,c078 <__divdf3+0x894>
    c044:	000b883a 	mov	r5,zero
    c048:	1024d0fa 	srli	r18,r2,3
    c04c:	98c0004c 	andi	r3,r19,1
    c050:	0005883a 	mov	r2,zero
    c054:	9464b03a 	or	r18,r18,r17
    c058:	003e4106 	br	b960 <__divdf3+0x17c>
    c05c:	1007883a 	mov	r3,r2
    c060:	0023883a 	mov	r17,zero
    c064:	880a927a 	slli	r5,r17,9
    c068:	1805883a 	mov	r2,r3
    c06c:	8822977a 	slli	r17,r17,29
    c070:	280ad33a 	srli	r5,r5,12
    c074:	003ff406 	br	c048 <__divdf3+0x864>
    c078:	10c003cc 	andi	r3,r2,15
    c07c:	01000104 	movi	r4,4
    c080:	193ff626 	beq	r3,r4,c05c <__divdf3+0x878>
    c084:	0023883a 	mov	r17,zero
    c088:	003fca06 	br	bfb4 <__divdf3+0x7d0>
    c08c:	813fd336 	bltu	r16,r4,bfdc <__divdf3+0x7f8>
    c090:	1023883a 	mov	r17,r2
    c094:	003fa806 	br	bf38 <__divdf3+0x754>
    c098:	b0ffd636 	bltu	r22,r3,bff4 <__divdf3+0x810>
    c09c:	1011883a 	mov	r8,r2
    c0a0:	b0ff341e 	bne	r22,r3,bd74 <__divdf3+0x590>
    c0a4:	003f3406 	br	bd78 <__divdf3+0x594>
    c0a8:	0005883a 	mov	r2,zero
    c0ac:	003fe006 	br	c030 <__divdf3+0x84c>
    c0b0:	00800434 	movhi	r2,16
    c0b4:	89400234 	orhi	r5,r17,8
    c0b8:	10bfffc4 	addi	r2,r2,-1
    c0bc:	b807883a 	mov	r3,r23
    c0c0:	288a703a 	and	r5,r5,r2
    c0c4:	4025883a 	mov	r18,r8
    c0c8:	003e8206 	br	bad4 <__divdf3+0x2f0>

0000c0cc <__eqdf2>:
    c0cc:	2804d53a 	srli	r2,r5,20
    c0d0:	3806d53a 	srli	r3,r7,20
    c0d4:	02000434 	movhi	r8,16
    c0d8:	423fffc4 	addi	r8,r8,-1
    c0dc:	1081ffcc 	andi	r2,r2,2047
    c0e0:	0281ffc4 	movi	r10,2047
    c0e4:	2a12703a 	and	r9,r5,r8
    c0e8:	18c1ffcc 	andi	r3,r3,2047
    c0ec:	3a10703a 	and	r8,r7,r8
    c0f0:	280ad7fa 	srli	r5,r5,31
    c0f4:	380ed7fa 	srli	r7,r7,31
    c0f8:	12801026 	beq	r2,r10,c13c <__eqdf2+0x70>
    c0fc:	0281ffc4 	movi	r10,2047
    c100:	1a800a26 	beq	r3,r10,c12c <__eqdf2+0x60>
    c104:	10c00226 	beq	r2,r3,c110 <__eqdf2+0x44>
    c108:	00800044 	movi	r2,1
    c10c:	f800283a 	ret
    c110:	4a3ffd1e 	bne	r9,r8,c108 <__eqdf2+0x3c>
    c114:	21bffc1e 	bne	r4,r6,c108 <__eqdf2+0x3c>
    c118:	29c00c26 	beq	r5,r7,c14c <__eqdf2+0x80>
    c11c:	103ffa1e 	bne	r2,zero,c108 <__eqdf2+0x3c>
    c120:	2244b03a 	or	r2,r4,r9
    c124:	1004c03a 	cmpne	r2,r2,zero
    c128:	f800283a 	ret
    c12c:	3214b03a 	or	r10,r6,r8
    c130:	503ff426 	beq	r10,zero,c104 <__eqdf2+0x38>
    c134:	00800044 	movi	r2,1
    c138:	f800283a 	ret
    c13c:	2254b03a 	or	r10,r4,r9
    c140:	503fee26 	beq	r10,zero,c0fc <__eqdf2+0x30>
    c144:	00800044 	movi	r2,1
    c148:	f800283a 	ret
    c14c:	0005883a 	mov	r2,zero
    c150:	f800283a 	ret

0000c154 <__gedf2>:
    c154:	2804d53a 	srli	r2,r5,20
    c158:	3806d53a 	srli	r3,r7,20
    c15c:	02000434 	movhi	r8,16
    c160:	423fffc4 	addi	r8,r8,-1
    c164:	1081ffcc 	andi	r2,r2,2047
    c168:	0241ffc4 	movi	r9,2047
    c16c:	2a14703a 	and	r10,r5,r8
    c170:	18c1ffcc 	andi	r3,r3,2047
    c174:	3a10703a 	and	r8,r7,r8
    c178:	280ad7fa 	srli	r5,r5,31
    c17c:	380ed7fa 	srli	r7,r7,31
    c180:	12401d26 	beq	r2,r9,c1f8 <__gedf2+0xa4>
    c184:	0241ffc4 	movi	r9,2047
    c188:	1a401226 	beq	r3,r9,c1d4 <__gedf2+0x80>
    c18c:	1000081e 	bne	r2,zero,c1b0 <__gedf2+0x5c>
    c190:	2296b03a 	or	r11,r4,r10
    c194:	5813003a 	cmpeq	r9,r11,zero
    c198:	1800091e 	bne	r3,zero,c1c0 <__gedf2+0x6c>
    c19c:	3218b03a 	or	r12,r6,r8
    c1a0:	6000071e 	bne	r12,zero,c1c0 <__gedf2+0x6c>
    c1a4:	0005883a 	mov	r2,zero
    c1a8:	5800101e 	bne	r11,zero,c1ec <__gedf2+0x98>
    c1ac:	f800283a 	ret
    c1b0:	18000c1e 	bne	r3,zero,c1e4 <__gedf2+0x90>
    c1b4:	3212b03a 	or	r9,r6,r8
    c1b8:	48000c26 	beq	r9,zero,c1ec <__gedf2+0x98>
    c1bc:	0013883a 	mov	r9,zero
    c1c0:	39c03fcc 	andi	r7,r7,255
    c1c4:	48000826 	beq	r9,zero,c1e8 <__gedf2+0x94>
    c1c8:	38000926 	beq	r7,zero,c1f0 <__gedf2+0x9c>
    c1cc:	00800044 	movi	r2,1
    c1d0:	f800283a 	ret
    c1d4:	3212b03a 	or	r9,r6,r8
    c1d8:	483fec26 	beq	r9,zero,c18c <__gedf2+0x38>
    c1dc:	00bfff84 	movi	r2,-2
    c1e0:	f800283a 	ret
    c1e4:	39c03fcc 	andi	r7,r7,255
    c1e8:	29c00626 	beq	r5,r7,c204 <__gedf2+0xb0>
    c1ec:	283ff726 	beq	r5,zero,c1cc <__gedf2+0x78>
    c1f0:	00bfffc4 	movi	r2,-1
    c1f4:	f800283a 	ret
    c1f8:	2292b03a 	or	r9,r4,r10
    c1fc:	483fe126 	beq	r9,zero,c184 <__gedf2+0x30>
    c200:	003ff606 	br	c1dc <__gedf2+0x88>
    c204:	18bff916 	blt	r3,r2,c1ec <__gedf2+0x98>
    c208:	10c00316 	blt	r2,r3,c218 <__gedf2+0xc4>
    c20c:	42bff736 	bltu	r8,r10,c1ec <__gedf2+0x98>
    c210:	52000326 	beq	r10,r8,c220 <__gedf2+0xcc>
    c214:	5200042e 	bgeu	r10,r8,c228 <__gedf2+0xd4>
    c218:	283fec1e 	bne	r5,zero,c1cc <__gedf2+0x78>
    c21c:	003ff406 	br	c1f0 <__gedf2+0x9c>
    c220:	313ff236 	bltu	r6,r4,c1ec <__gedf2+0x98>
    c224:	21bffc36 	bltu	r4,r6,c218 <__gedf2+0xc4>
    c228:	0005883a 	mov	r2,zero
    c22c:	f800283a 	ret

0000c230 <__ledf2>:
    c230:	2804d53a 	srli	r2,r5,20
    c234:	3810d53a 	srli	r8,r7,20
    c238:	00c00434 	movhi	r3,16
    c23c:	18ffffc4 	addi	r3,r3,-1
    c240:	1081ffcc 	andi	r2,r2,2047
    c244:	0241ffc4 	movi	r9,2047
    c248:	28d4703a 	and	r10,r5,r3
    c24c:	4201ffcc 	andi	r8,r8,2047
    c250:	38c6703a 	and	r3,r7,r3
    c254:	280ad7fa 	srli	r5,r5,31
    c258:	380ed7fa 	srli	r7,r7,31
    c25c:	12401f26 	beq	r2,r9,c2dc <__ledf2+0xac>
    c260:	0241ffc4 	movi	r9,2047
    c264:	42401426 	beq	r8,r9,c2b8 <__ledf2+0x88>
    c268:	1000091e 	bne	r2,zero,c290 <__ledf2+0x60>
    c26c:	2296b03a 	or	r11,r4,r10
    c270:	5813003a 	cmpeq	r9,r11,zero
    c274:	29403fcc 	andi	r5,r5,255
    c278:	40000a1e 	bne	r8,zero,c2a4 <__ledf2+0x74>
    c27c:	30d8b03a 	or	r12,r6,r3
    c280:	6000081e 	bne	r12,zero,c2a4 <__ledf2+0x74>
    c284:	0005883a 	mov	r2,zero
    c288:	5800111e 	bne	r11,zero,c2d0 <__ledf2+0xa0>
    c28c:	f800283a 	ret
    c290:	29403fcc 	andi	r5,r5,255
    c294:	40000c1e 	bne	r8,zero,c2c8 <__ledf2+0x98>
    c298:	30d2b03a 	or	r9,r6,r3
    c29c:	48000c26 	beq	r9,zero,c2d0 <__ledf2+0xa0>
    c2a0:	0013883a 	mov	r9,zero
    c2a4:	39c03fcc 	andi	r7,r7,255
    c2a8:	48000826 	beq	r9,zero,c2cc <__ledf2+0x9c>
    c2ac:	38001126 	beq	r7,zero,c2f4 <__ledf2+0xc4>
    c2b0:	00800044 	movi	r2,1
    c2b4:	f800283a 	ret
    c2b8:	30d2b03a 	or	r9,r6,r3
    c2bc:	483fea26 	beq	r9,zero,c268 <__ledf2+0x38>
    c2c0:	00800084 	movi	r2,2
    c2c4:	f800283a 	ret
    c2c8:	39c03fcc 	andi	r7,r7,255
    c2cc:	39400726 	beq	r7,r5,c2ec <__ledf2+0xbc>
    c2d0:	2800081e 	bne	r5,zero,c2f4 <__ledf2+0xc4>
    c2d4:	00800044 	movi	r2,1
    c2d8:	f800283a 	ret
    c2dc:	2292b03a 	or	r9,r4,r10
    c2e0:	483fdf26 	beq	r9,zero,c260 <__ledf2+0x30>
    c2e4:	00800084 	movi	r2,2
    c2e8:	f800283a 	ret
    c2ec:	4080030e 	bge	r8,r2,c2fc <__ledf2+0xcc>
    c2f0:	383fef26 	beq	r7,zero,c2b0 <__ledf2+0x80>
    c2f4:	00bfffc4 	movi	r2,-1
    c2f8:	f800283a 	ret
    c2fc:	123feb16 	blt	r2,r8,c2ac <__ledf2+0x7c>
    c300:	1abff336 	bltu	r3,r10,c2d0 <__ledf2+0xa0>
    c304:	50c00326 	beq	r10,r3,c314 <__ledf2+0xe4>
    c308:	50c0042e 	bgeu	r10,r3,c31c <__ledf2+0xec>
    c30c:	283fe81e 	bne	r5,zero,c2b0 <__ledf2+0x80>
    c310:	003ff806 	br	c2f4 <__ledf2+0xc4>
    c314:	313fee36 	bltu	r6,r4,c2d0 <__ledf2+0xa0>
    c318:	21bffc36 	bltu	r4,r6,c30c <__ledf2+0xdc>
    c31c:	0005883a 	mov	r2,zero
    c320:	f800283a 	ret

0000c324 <__muldf3>:
    c324:	defff304 	addi	sp,sp,-52
    c328:	2804d53a 	srli	r2,r5,20
    c32c:	dd800915 	stw	r22,36(sp)
    c330:	282cd7fa 	srli	r22,r5,31
    c334:	dc000315 	stw	r16,12(sp)
    c338:	04000434 	movhi	r16,16
    c33c:	dd400815 	stw	r21,32(sp)
    c340:	dc800515 	stw	r18,20(sp)
    c344:	843fffc4 	addi	r16,r16,-1
    c348:	dfc00c15 	stw	ra,48(sp)
    c34c:	df000b15 	stw	fp,44(sp)
    c350:	ddc00a15 	stw	r23,40(sp)
    c354:	dd000715 	stw	r20,28(sp)
    c358:	dcc00615 	stw	r19,24(sp)
    c35c:	dc400415 	stw	r17,16(sp)
    c360:	1481ffcc 	andi	r18,r2,2047
    c364:	2c20703a 	and	r16,r5,r16
    c368:	b02b883a 	mov	r21,r22
    c36c:	b2403fcc 	andi	r9,r22,255
    c370:	90006026 	beq	r18,zero,c4f4 <__muldf3+0x1d0>
    c374:	0081ffc4 	movi	r2,2047
    c378:	2029883a 	mov	r20,r4
    c37c:	90803626 	beq	r18,r2,c458 <__muldf3+0x134>
    c380:	80800434 	orhi	r2,r16,16
    c384:	100490fa 	slli	r2,r2,3
    c388:	2020d77a 	srli	r16,r4,29
    c38c:	202890fa 	slli	r20,r4,3
    c390:	94bf0044 	addi	r18,r18,-1023
    c394:	80a0b03a 	or	r16,r16,r2
    c398:	0027883a 	mov	r19,zero
    c39c:	0039883a 	mov	fp,zero
    c3a0:	3804d53a 	srli	r2,r7,20
    c3a4:	382ed7fa 	srli	r23,r7,31
    c3a8:	04400434 	movhi	r17,16
    c3ac:	8c7fffc4 	addi	r17,r17,-1
    c3b0:	1081ffcc 	andi	r2,r2,2047
    c3b4:	3011883a 	mov	r8,r6
    c3b8:	3c62703a 	and	r17,r7,r17
    c3bc:	ba803fcc 	andi	r10,r23,255
    c3c0:	10006d26 	beq	r2,zero,c578 <__muldf3+0x254>
    c3c4:	00c1ffc4 	movi	r3,2047
    c3c8:	10c06526 	beq	r2,r3,c560 <__muldf3+0x23c>
    c3cc:	88c00434 	orhi	r3,r17,16
    c3d0:	180690fa 	slli	r3,r3,3
    c3d4:	3022d77a 	srli	r17,r6,29
    c3d8:	301090fa 	slli	r8,r6,3
    c3dc:	10bf0044 	addi	r2,r2,-1023
    c3e0:	88e2b03a 	or	r17,r17,r3
    c3e4:	000b883a 	mov	r5,zero
    c3e8:	9085883a 	add	r2,r18,r2
    c3ec:	2cc8b03a 	or	r4,r5,r19
    c3f0:	00c003c4 	movi	r3,15
    c3f4:	bdacf03a 	xor	r22,r23,r22
    c3f8:	12c00044 	addi	r11,r2,1
    c3fc:	19009936 	bltu	r3,r4,c664 <__muldf3+0x340>
    c400:	200890ba 	slli	r4,r4,2
    c404:	00c00074 	movhi	r3,1
    c408:	18f10604 	addi	r3,r3,-15336
    c40c:	20c9883a 	add	r4,r4,r3
    c410:	20c00017 	ldw	r3,0(r4)
    c414:	1800683a 	jmp	r3
    c418:	0000c664 	muli	zero,zero,793
    c41c:	0000c478 	rdprs	zero,zero,785
    c420:	0000c478 	rdprs	zero,zero,785
    c424:	0000c474 	movhi	zero,785
    c428:	0000c640 	call	c64 <get_data_bits+0x154>
    c42c:	0000c640 	call	c64 <get_data_bits+0x154>
    c430:	0000c628 	cmpgeui	zero,zero,792
    c434:	0000c474 	movhi	zero,785
    c438:	0000c640 	call	c64 <get_data_bits+0x154>
    c43c:	0000c628 	cmpgeui	zero,zero,792
    c440:	0000c640 	call	c64 <get_data_bits+0x154>
    c444:	0000c474 	movhi	zero,785
    c448:	0000c650 	cmplti	zero,zero,793
    c44c:	0000c650 	cmplti	zero,zero,793
    c450:	0000c650 	cmplti	zero,zero,793
    c454:	0000c86c 	andhi	zero,zero,801
    c458:	2404b03a 	or	r2,r4,r16
    c45c:	10006f1e 	bne	r2,zero,c61c <__muldf3+0x2f8>
    c460:	04c00204 	movi	r19,8
    c464:	0021883a 	mov	r16,zero
    c468:	0029883a 	mov	r20,zero
    c46c:	07000084 	movi	fp,2
    c470:	003fcb06 	br	c3a0 <__muldf3+0x7c>
    c474:	502d883a 	mov	r22,r10
    c478:	00800084 	movi	r2,2
    c47c:	28805726 	beq	r5,r2,c5dc <__muldf3+0x2b8>
    c480:	008000c4 	movi	r2,3
    c484:	28816626 	beq	r5,r2,ca20 <__muldf3+0x6fc>
    c488:	00800044 	movi	r2,1
    c48c:	2881411e 	bne	r5,r2,c994 <__muldf3+0x670>
    c490:	b02b883a 	mov	r21,r22
    c494:	0005883a 	mov	r2,zero
    c498:	000b883a 	mov	r5,zero
    c49c:	0029883a 	mov	r20,zero
    c4a0:	1004953a 	slli	r2,r2,20
    c4a4:	a8c03fcc 	andi	r3,r21,255
    c4a8:	04400434 	movhi	r17,16
    c4ac:	8c7fffc4 	addi	r17,r17,-1
    c4b0:	180697fa 	slli	r3,r3,31
    c4b4:	2c4a703a 	and	r5,r5,r17
    c4b8:	288ab03a 	or	r5,r5,r2
    c4bc:	28c6b03a 	or	r3,r5,r3
    c4c0:	a005883a 	mov	r2,r20
    c4c4:	dfc00c17 	ldw	ra,48(sp)
    c4c8:	df000b17 	ldw	fp,44(sp)
    c4cc:	ddc00a17 	ldw	r23,40(sp)
    c4d0:	dd800917 	ldw	r22,36(sp)
    c4d4:	dd400817 	ldw	r21,32(sp)
    c4d8:	dd000717 	ldw	r20,28(sp)
    c4dc:	dcc00617 	ldw	r19,24(sp)
    c4e0:	dc800517 	ldw	r18,20(sp)
    c4e4:	dc400417 	ldw	r17,16(sp)
    c4e8:	dc000317 	ldw	r16,12(sp)
    c4ec:	dec00d04 	addi	sp,sp,52
    c4f0:	f800283a 	ret
    c4f4:	2404b03a 	or	r2,r4,r16
    c4f8:	2027883a 	mov	r19,r4
    c4fc:	10004226 	beq	r2,zero,c608 <__muldf3+0x2e4>
    c500:	8000fc26 	beq	r16,zero,c8f4 <__muldf3+0x5d0>
    c504:	8009883a 	mov	r4,r16
    c508:	d9800215 	stw	r6,8(sp)
    c50c:	d9c00015 	stw	r7,0(sp)
    c510:	da400115 	stw	r9,4(sp)
    c514:	000d53c0 	call	d53c <__clzsi2>
    c518:	d9800217 	ldw	r6,8(sp)
    c51c:	d9c00017 	ldw	r7,0(sp)
    c520:	da400117 	ldw	r9,4(sp)
    c524:	113ffd44 	addi	r4,r2,-11
    c528:	00c00704 	movi	r3,28
    c52c:	1900ed16 	blt	r3,r4,c8e4 <__muldf3+0x5c0>
    c530:	00c00744 	movi	r3,29
    c534:	147ffe04 	addi	r17,r2,-8
    c538:	1907c83a 	sub	r3,r3,r4
    c53c:	8460983a 	sll	r16,r16,r17
    c540:	98c6d83a 	srl	r3,r19,r3
    c544:	9c68983a 	sll	r20,r19,r17
    c548:	1c20b03a 	or	r16,r3,r16
    c54c:	1080fcc4 	addi	r2,r2,1011
    c550:	00a5c83a 	sub	r18,zero,r2
    c554:	0027883a 	mov	r19,zero
    c558:	0039883a 	mov	fp,zero
    c55c:	003f9006 	br	c3a0 <__muldf3+0x7c>
    c560:	3446b03a 	or	r3,r6,r17
    c564:	1800261e 	bne	r3,zero,c600 <__muldf3+0x2dc>
    c568:	0023883a 	mov	r17,zero
    c56c:	0011883a 	mov	r8,zero
    c570:	01400084 	movi	r5,2
    c574:	003f9c06 	br	c3e8 <__muldf3+0xc4>
    c578:	3446b03a 	or	r3,r6,r17
    c57c:	18001c26 	beq	r3,zero,c5f0 <__muldf3+0x2cc>
    c580:	8800ce26 	beq	r17,zero,c8bc <__muldf3+0x598>
    c584:	8809883a 	mov	r4,r17
    c588:	d9800215 	stw	r6,8(sp)
    c58c:	da400115 	stw	r9,4(sp)
    c590:	da800015 	stw	r10,0(sp)
    c594:	000d53c0 	call	d53c <__clzsi2>
    c598:	d9800217 	ldw	r6,8(sp)
    c59c:	da400117 	ldw	r9,4(sp)
    c5a0:	da800017 	ldw	r10,0(sp)
    c5a4:	113ffd44 	addi	r4,r2,-11
    c5a8:	00c00704 	movi	r3,28
    c5ac:	1900bf16 	blt	r3,r4,c8ac <__muldf3+0x588>
    c5b0:	00c00744 	movi	r3,29
    c5b4:	123ffe04 	addi	r8,r2,-8
    c5b8:	1907c83a 	sub	r3,r3,r4
    c5bc:	8a22983a 	sll	r17,r17,r8
    c5c0:	30c6d83a 	srl	r3,r6,r3
    c5c4:	3210983a 	sll	r8,r6,r8
    c5c8:	1c62b03a 	or	r17,r3,r17
    c5cc:	1080fcc4 	addi	r2,r2,1011
    c5d0:	0085c83a 	sub	r2,zero,r2
    c5d4:	000b883a 	mov	r5,zero
    c5d8:	003f8306 	br	c3e8 <__muldf3+0xc4>
    c5dc:	b02b883a 	mov	r21,r22
    c5e0:	0081ffc4 	movi	r2,2047
    c5e4:	000b883a 	mov	r5,zero
    c5e8:	0029883a 	mov	r20,zero
    c5ec:	003fac06 	br	c4a0 <__muldf3+0x17c>
    c5f0:	0023883a 	mov	r17,zero
    c5f4:	0011883a 	mov	r8,zero
    c5f8:	01400044 	movi	r5,1
    c5fc:	003f7a06 	br	c3e8 <__muldf3+0xc4>
    c600:	014000c4 	movi	r5,3
    c604:	003f7806 	br	c3e8 <__muldf3+0xc4>
    c608:	04c00104 	movi	r19,4
    c60c:	0021883a 	mov	r16,zero
    c610:	0029883a 	mov	r20,zero
    c614:	07000044 	movi	fp,1
    c618:	003f6106 	br	c3a0 <__muldf3+0x7c>
    c61c:	04c00304 	movi	r19,12
    c620:	070000c4 	movi	fp,3
    c624:	003f5e06 	br	c3a0 <__muldf3+0x7c>
    c628:	01400434 	movhi	r5,16
    c62c:	002b883a 	mov	r21,zero
    c630:	297fffc4 	addi	r5,r5,-1
    c634:	053fffc4 	movi	r20,-1
    c638:	0081ffc4 	movi	r2,2047
    c63c:	003f9806 	br	c4a0 <__muldf3+0x17c>
    c640:	8023883a 	mov	r17,r16
    c644:	a011883a 	mov	r8,r20
    c648:	e00b883a 	mov	r5,fp
    c64c:	003f8a06 	br	c478 <__muldf3+0x154>
    c650:	8023883a 	mov	r17,r16
    c654:	a011883a 	mov	r8,r20
    c658:	482d883a 	mov	r22,r9
    c65c:	e00b883a 	mov	r5,fp
    c660:	003f8506 	br	c478 <__muldf3+0x154>
    c664:	a00ad43a 	srli	r5,r20,16
    c668:	401ad43a 	srli	r13,r8,16
    c66c:	a53fffcc 	andi	r20,r20,65535
    c670:	423fffcc 	andi	r8,r8,65535
    c674:	4519383a 	mul	r12,r8,r20
    c678:	4147383a 	mul	r3,r8,r5
    c67c:	6d09383a 	mul	r4,r13,r20
    c680:	600cd43a 	srli	r6,r12,16
    c684:	2b5d383a 	mul	r14,r5,r13
    c688:	20c9883a 	add	r4,r4,r3
    c68c:	310d883a 	add	r6,r6,r4
    c690:	30c0022e 	bgeu	r6,r3,c69c <__muldf3+0x378>
    c694:	00c00074 	movhi	r3,1
    c698:	70dd883a 	add	r14,r14,r3
    c69c:	8826d43a 	srli	r19,r17,16
    c6a0:	8bffffcc 	andi	r15,r17,65535
    c6a4:	7d23383a 	mul	r17,r15,r20
    c6a8:	7949383a 	mul	r4,r15,r5
    c6ac:	9d29383a 	mul	r20,r19,r20
    c6b0:	8814d43a 	srli	r10,r17,16
    c6b4:	3012943a 	slli	r9,r6,16
    c6b8:	a129883a 	add	r20,r20,r4
    c6bc:	633fffcc 	andi	r12,r12,65535
    c6c0:	5515883a 	add	r10,r10,r20
    c6c4:	3006d43a 	srli	r3,r6,16
    c6c8:	4b13883a 	add	r9,r9,r12
    c6cc:	2ccb383a 	mul	r5,r5,r19
    c6d0:	5100022e 	bgeu	r10,r4,c6dc <__muldf3+0x3b8>
    c6d4:	01000074 	movhi	r4,1
    c6d8:	290b883a 	add	r5,r5,r4
    c6dc:	802ad43a 	srli	r21,r16,16
    c6e0:	843fffcc 	andi	r16,r16,65535
    c6e4:	440d383a 	mul	r6,r8,r16
    c6e8:	4565383a 	mul	r18,r8,r21
    c6ec:	8349383a 	mul	r4,r16,r13
    c6f0:	500e943a 	slli	r7,r10,16
    c6f4:	3010d43a 	srli	r8,r6,16
    c6f8:	5028d43a 	srli	r20,r10,16
    c6fc:	2489883a 	add	r4,r4,r18
    c700:	8abfffcc 	andi	r10,r17,65535
    c704:	3a95883a 	add	r10,r7,r10
    c708:	4119883a 	add	r12,r8,r4
    c70c:	a169883a 	add	r20,r20,r5
    c710:	1a87883a 	add	r3,r3,r10
    c714:	6d5b383a 	mul	r13,r13,r21
    c718:	6480022e 	bgeu	r12,r18,c724 <__muldf3+0x400>
    c71c:	01000074 	movhi	r4,1
    c720:	691b883a 	add	r13,r13,r4
    c724:	7c25383a 	mul	r18,r15,r16
    c728:	7d4b383a 	mul	r5,r15,r21
    c72c:	84cf383a 	mul	r7,r16,r19
    c730:	901ed43a 	srli	r15,r18,16
    c734:	6008d43a 	srli	r4,r12,16
    c738:	6010943a 	slli	r8,r12,16
    c73c:	394f883a 	add	r7,r7,r5
    c740:	333fffcc 	andi	r12,r6,65535
    c744:	79df883a 	add	r15,r15,r7
    c748:	235b883a 	add	r13,r4,r13
    c74c:	9d63383a 	mul	r17,r19,r21
    c750:	4309883a 	add	r4,r8,r12
    c754:	7940022e 	bgeu	r15,r5,c760 <__muldf3+0x43c>
    c758:	01400074 	movhi	r5,1
    c75c:	8963883a 	add	r17,r17,r5
    c760:	780a943a 	slli	r5,r15,16
    c764:	91bfffcc 	andi	r6,r18,65535
    c768:	70c7883a 	add	r3,r14,r3
    c76c:	298d883a 	add	r6,r5,r6
    c770:	1a8f803a 	cmpltu	r7,r3,r10
    c774:	350b883a 	add	r5,r6,r20
    c778:	20c7883a 	add	r3,r4,r3
    c77c:	3955883a 	add	r10,r7,r5
    c780:	1909803a 	cmpltu	r4,r3,r4
    c784:	6a91883a 	add	r8,r13,r10
    c788:	780cd43a 	srli	r6,r15,16
    c78c:	2219883a 	add	r12,r4,r8
    c790:	2d0b803a 	cmpltu	r5,r5,r20
    c794:	51cf803a 	cmpltu	r7,r10,r7
    c798:	29ceb03a 	or	r7,r5,r7
    c79c:	4351803a 	cmpltu	r8,r8,r13
    c7a0:	610b803a 	cmpltu	r5,r12,r4
    c7a4:	4148b03a 	or	r4,r8,r5
    c7a8:	398f883a 	add	r7,r7,r6
    c7ac:	3909883a 	add	r4,r7,r4
    c7b0:	1810927a 	slli	r8,r3,9
    c7b4:	2449883a 	add	r4,r4,r17
    c7b8:	2008927a 	slli	r4,r4,9
    c7bc:	6022d5fa 	srli	r17,r12,23
    c7c0:	1806d5fa 	srli	r3,r3,23
    c7c4:	4252b03a 	or	r9,r8,r9
    c7c8:	600a927a 	slli	r5,r12,9
    c7cc:	4810c03a 	cmpne	r8,r9,zero
    c7d0:	2462b03a 	or	r17,r4,r17
    c7d4:	40c6b03a 	or	r3,r8,r3
    c7d8:	8900402c 	andhi	r4,r17,256
    c7dc:	1950b03a 	or	r8,r3,r5
    c7e0:	20000726 	beq	r4,zero,c800 <__muldf3+0x4dc>
    c7e4:	4006d07a 	srli	r3,r8,1
    c7e8:	880497fa 	slli	r2,r17,31
    c7ec:	4200004c 	andi	r8,r8,1
    c7f0:	8822d07a 	srli	r17,r17,1
    c7f4:	1a10b03a 	or	r8,r3,r8
    c7f8:	1210b03a 	or	r8,r2,r8
    c7fc:	5805883a 	mov	r2,r11
    c800:	1140ffc4 	addi	r5,r2,1023
    c804:	0140440e 	bge	zero,r5,c918 <__muldf3+0x5f4>
    c808:	40c001cc 	andi	r3,r8,7
    c80c:	18000726 	beq	r3,zero,c82c <__muldf3+0x508>
    c810:	40c003cc 	andi	r3,r8,15
    c814:	01000104 	movi	r4,4
    c818:	19000426 	beq	r3,r4,c82c <__muldf3+0x508>
    c81c:	4107883a 	add	r3,r8,r4
    c820:	1a11803a 	cmpltu	r8,r3,r8
    c824:	8a23883a 	add	r17,r17,r8
    c828:	1811883a 	mov	r8,r3
    c82c:	88c0402c 	andhi	r3,r17,256
    c830:	18000426 	beq	r3,zero,c844 <__muldf3+0x520>
    c834:	11410004 	addi	r5,r2,1024
    c838:	00bfc034 	movhi	r2,65280
    c83c:	10bfffc4 	addi	r2,r2,-1
    c840:	88a2703a 	and	r17,r17,r2
    c844:	0081ff84 	movi	r2,2046
    c848:	117f6416 	blt	r2,r5,c5dc <__muldf3+0x2b8>
    c84c:	8828977a 	slli	r20,r17,29
    c850:	4010d0fa 	srli	r8,r8,3
    c854:	8822927a 	slli	r17,r17,9
    c858:	2881ffcc 	andi	r2,r5,2047
    c85c:	a228b03a 	or	r20,r20,r8
    c860:	880ad33a 	srli	r5,r17,12
    c864:	b02b883a 	mov	r21,r22
    c868:	003f0d06 	br	c4a0 <__muldf3+0x17c>
    c86c:	8080022c 	andhi	r2,r16,8
    c870:	10000926 	beq	r2,zero,c898 <__muldf3+0x574>
    c874:	8880022c 	andhi	r2,r17,8
    c878:	1000071e 	bne	r2,zero,c898 <__muldf3+0x574>
    c87c:	00800434 	movhi	r2,16
    c880:	89400234 	orhi	r5,r17,8
    c884:	10bfffc4 	addi	r2,r2,-1
    c888:	b82b883a 	mov	r21,r23
    c88c:	288a703a 	and	r5,r5,r2
    c890:	4029883a 	mov	r20,r8
    c894:	003f6806 	br	c638 <__muldf3+0x314>
    c898:	00800434 	movhi	r2,16
    c89c:	81400234 	orhi	r5,r16,8
    c8a0:	10bfffc4 	addi	r2,r2,-1
    c8a4:	288a703a 	and	r5,r5,r2
    c8a8:	003f6306 	br	c638 <__muldf3+0x314>
    c8ac:	147ff604 	addi	r17,r2,-40
    c8b0:	3462983a 	sll	r17,r6,r17
    c8b4:	0011883a 	mov	r8,zero
    c8b8:	003f4406 	br	c5cc <__muldf3+0x2a8>
    c8bc:	3009883a 	mov	r4,r6
    c8c0:	d9800215 	stw	r6,8(sp)
    c8c4:	da400115 	stw	r9,4(sp)
    c8c8:	da800015 	stw	r10,0(sp)
    c8cc:	000d53c0 	call	d53c <__clzsi2>
    c8d0:	10800804 	addi	r2,r2,32
    c8d4:	da800017 	ldw	r10,0(sp)
    c8d8:	da400117 	ldw	r9,4(sp)
    c8dc:	d9800217 	ldw	r6,8(sp)
    c8e0:	003f3006 	br	c5a4 <__muldf3+0x280>
    c8e4:	143ff604 	addi	r16,r2,-40
    c8e8:	9c20983a 	sll	r16,r19,r16
    c8ec:	0029883a 	mov	r20,zero
    c8f0:	003f1606 	br	c54c <__muldf3+0x228>
    c8f4:	d9800215 	stw	r6,8(sp)
    c8f8:	d9c00015 	stw	r7,0(sp)
    c8fc:	da400115 	stw	r9,4(sp)
    c900:	000d53c0 	call	d53c <__clzsi2>
    c904:	10800804 	addi	r2,r2,32
    c908:	da400117 	ldw	r9,4(sp)
    c90c:	d9c00017 	ldw	r7,0(sp)
    c910:	d9800217 	ldw	r6,8(sp)
    c914:	003f0306 	br	c524 <__muldf3+0x200>
    c918:	00c00044 	movi	r3,1
    c91c:	1947c83a 	sub	r3,r3,r5
    c920:	00800e04 	movi	r2,56
    c924:	10feda16 	blt	r2,r3,c490 <__muldf3+0x16c>
    c928:	008007c4 	movi	r2,31
    c92c:	10c01b16 	blt	r2,r3,c99c <__muldf3+0x678>
    c930:	00800804 	movi	r2,32
    c934:	10c5c83a 	sub	r2,r2,r3
    c938:	888a983a 	sll	r5,r17,r2
    c93c:	40c8d83a 	srl	r4,r8,r3
    c940:	4084983a 	sll	r2,r8,r2
    c944:	88e2d83a 	srl	r17,r17,r3
    c948:	2906b03a 	or	r3,r5,r4
    c94c:	1004c03a 	cmpne	r2,r2,zero
    c950:	1886b03a 	or	r3,r3,r2
    c954:	188001cc 	andi	r2,r3,7
    c958:	10000726 	beq	r2,zero,c978 <__muldf3+0x654>
    c95c:	188003cc 	andi	r2,r3,15
    c960:	01000104 	movi	r4,4
    c964:	11000426 	beq	r2,r4,c978 <__muldf3+0x654>
    c968:	1805883a 	mov	r2,r3
    c96c:	10c00104 	addi	r3,r2,4
    c970:	1885803a 	cmpltu	r2,r3,r2
    c974:	88a3883a 	add	r17,r17,r2
    c978:	8880202c 	andhi	r2,r17,128
    c97c:	10001c26 	beq	r2,zero,c9f0 <__muldf3+0x6cc>
    c980:	b02b883a 	mov	r21,r22
    c984:	00800044 	movi	r2,1
    c988:	000b883a 	mov	r5,zero
    c98c:	0029883a 	mov	r20,zero
    c990:	003ec306 	br	c4a0 <__muldf3+0x17c>
    c994:	5805883a 	mov	r2,r11
    c998:	003f9906 	br	c800 <__muldf3+0x4dc>
    c99c:	00bff844 	movi	r2,-31
    c9a0:	1145c83a 	sub	r2,r2,r5
    c9a4:	8888d83a 	srl	r4,r17,r2
    c9a8:	00800804 	movi	r2,32
    c9ac:	18801a26 	beq	r3,r2,ca18 <__muldf3+0x6f4>
    c9b0:	00801004 	movi	r2,64
    c9b4:	10c5c83a 	sub	r2,r2,r3
    c9b8:	8884983a 	sll	r2,r17,r2
    c9bc:	1204b03a 	or	r2,r2,r8
    c9c0:	1004c03a 	cmpne	r2,r2,zero
    c9c4:	2084b03a 	or	r2,r4,r2
    c9c8:	144001cc 	andi	r17,r2,7
    c9cc:	88000d1e 	bne	r17,zero,ca04 <__muldf3+0x6e0>
    c9d0:	000b883a 	mov	r5,zero
    c9d4:	1028d0fa 	srli	r20,r2,3
    c9d8:	b02b883a 	mov	r21,r22
    c9dc:	0005883a 	mov	r2,zero
    c9e0:	a468b03a 	or	r20,r20,r17
    c9e4:	003eae06 	br	c4a0 <__muldf3+0x17c>
    c9e8:	1007883a 	mov	r3,r2
    c9ec:	0023883a 	mov	r17,zero
    c9f0:	880a927a 	slli	r5,r17,9
    c9f4:	1805883a 	mov	r2,r3
    c9f8:	8822977a 	slli	r17,r17,29
    c9fc:	280ad33a 	srli	r5,r5,12
    ca00:	003ff406 	br	c9d4 <__muldf3+0x6b0>
    ca04:	10c003cc 	andi	r3,r2,15
    ca08:	01000104 	movi	r4,4
    ca0c:	193ff626 	beq	r3,r4,c9e8 <__muldf3+0x6c4>
    ca10:	0023883a 	mov	r17,zero
    ca14:	003fd506 	br	c96c <__muldf3+0x648>
    ca18:	0005883a 	mov	r2,zero
    ca1c:	003fe706 	br	c9bc <__muldf3+0x698>
    ca20:	00800434 	movhi	r2,16
    ca24:	89400234 	orhi	r5,r17,8
    ca28:	10bfffc4 	addi	r2,r2,-1
    ca2c:	b02b883a 	mov	r21,r22
    ca30:	288a703a 	and	r5,r5,r2
    ca34:	4029883a 	mov	r20,r8
    ca38:	003eff06 	br	c638 <__muldf3+0x314>

0000ca3c <__subdf3>:
    ca3c:	02000434 	movhi	r8,16
    ca40:	423fffc4 	addi	r8,r8,-1
    ca44:	defffb04 	addi	sp,sp,-20
    ca48:	2a14703a 	and	r10,r5,r8
    ca4c:	3812d53a 	srli	r9,r7,20
    ca50:	3a10703a 	and	r8,r7,r8
    ca54:	2006d77a 	srli	r3,r4,29
    ca58:	3004d77a 	srli	r2,r6,29
    ca5c:	dc000015 	stw	r16,0(sp)
    ca60:	501490fa 	slli	r10,r10,3
    ca64:	2820d53a 	srli	r16,r5,20
    ca68:	401090fa 	slli	r8,r8,3
    ca6c:	dc800215 	stw	r18,8(sp)
    ca70:	dc400115 	stw	r17,4(sp)
    ca74:	dfc00415 	stw	ra,16(sp)
    ca78:	202290fa 	slli	r17,r4,3
    ca7c:	dcc00315 	stw	r19,12(sp)
    ca80:	4a41ffcc 	andi	r9,r9,2047
    ca84:	0101ffc4 	movi	r4,2047
    ca88:	2824d7fa 	srli	r18,r5,31
    ca8c:	8401ffcc 	andi	r16,r16,2047
    ca90:	50c6b03a 	or	r3,r10,r3
    ca94:	380ed7fa 	srli	r7,r7,31
    ca98:	408ab03a 	or	r5,r8,r2
    ca9c:	300c90fa 	slli	r6,r6,3
    caa0:	49009626 	beq	r9,r4,ccfc <__subdf3+0x2c0>
    caa4:	39c0005c 	xori	r7,r7,1
    caa8:	8245c83a 	sub	r2,r16,r9
    caac:	3c807426 	beq	r7,r18,cc80 <__subdf3+0x244>
    cab0:	0080af0e 	bge	zero,r2,cd70 <__subdf3+0x334>
    cab4:	48002a1e 	bne	r9,zero,cb60 <__subdf3+0x124>
    cab8:	2988b03a 	or	r4,r5,r6
    cabc:	20009a1e 	bne	r4,zero,cd28 <__subdf3+0x2ec>
    cac0:	888001cc 	andi	r2,r17,7
    cac4:	10000726 	beq	r2,zero,cae4 <__subdf3+0xa8>
    cac8:	888003cc 	andi	r2,r17,15
    cacc:	01000104 	movi	r4,4
    cad0:	11000426 	beq	r2,r4,cae4 <__subdf3+0xa8>
    cad4:	890b883a 	add	r5,r17,r4
    cad8:	2c63803a 	cmpltu	r17,r5,r17
    cadc:	1c47883a 	add	r3,r3,r17
    cae0:	2823883a 	mov	r17,r5
    cae4:	1880202c 	andhi	r2,r3,128
    cae8:	10005926 	beq	r2,zero,cc50 <__subdf3+0x214>
    caec:	84000044 	addi	r16,r16,1
    caf0:	0081ffc4 	movi	r2,2047
    caf4:	8080be26 	beq	r16,r2,cdf0 <__subdf3+0x3b4>
    caf8:	017fe034 	movhi	r5,65408
    cafc:	297fffc4 	addi	r5,r5,-1
    cb00:	1946703a 	and	r3,r3,r5
    cb04:	1804977a 	slli	r2,r3,29
    cb08:	1806927a 	slli	r3,r3,9
    cb0c:	8822d0fa 	srli	r17,r17,3
    cb10:	8401ffcc 	andi	r16,r16,2047
    cb14:	180ad33a 	srli	r5,r3,12
    cb18:	9100004c 	andi	r4,r18,1
    cb1c:	1444b03a 	or	r2,r2,r17
    cb20:	80c1ffcc 	andi	r3,r16,2047
    cb24:	1820953a 	slli	r16,r3,20
    cb28:	20c03fcc 	andi	r3,r4,255
    cb2c:	180897fa 	slli	r4,r3,31
    cb30:	00c00434 	movhi	r3,16
    cb34:	18ffffc4 	addi	r3,r3,-1
    cb38:	28c6703a 	and	r3,r5,r3
    cb3c:	1c06b03a 	or	r3,r3,r16
    cb40:	1906b03a 	or	r3,r3,r4
    cb44:	dfc00417 	ldw	ra,16(sp)
    cb48:	dcc00317 	ldw	r19,12(sp)
    cb4c:	dc800217 	ldw	r18,8(sp)
    cb50:	dc400117 	ldw	r17,4(sp)
    cb54:	dc000017 	ldw	r16,0(sp)
    cb58:	dec00504 	addi	sp,sp,20
    cb5c:	f800283a 	ret
    cb60:	0101ffc4 	movi	r4,2047
    cb64:	813fd626 	beq	r16,r4,cac0 <__subdf3+0x84>
    cb68:	29402034 	orhi	r5,r5,128
    cb6c:	01000e04 	movi	r4,56
    cb70:	2080a316 	blt	r4,r2,ce00 <__subdf3+0x3c4>
    cb74:	010007c4 	movi	r4,31
    cb78:	2080c616 	blt	r4,r2,ce94 <__subdf3+0x458>
    cb7c:	01000804 	movi	r4,32
    cb80:	2089c83a 	sub	r4,r4,r2
    cb84:	2910983a 	sll	r8,r5,r4
    cb88:	308ed83a 	srl	r7,r6,r2
    cb8c:	3108983a 	sll	r4,r6,r4
    cb90:	2884d83a 	srl	r2,r5,r2
    cb94:	41ccb03a 	or	r6,r8,r7
    cb98:	2008c03a 	cmpne	r4,r4,zero
    cb9c:	310cb03a 	or	r6,r6,r4
    cba0:	898dc83a 	sub	r6,r17,r6
    cba4:	89a3803a 	cmpltu	r17,r17,r6
    cba8:	1887c83a 	sub	r3,r3,r2
    cbac:	1c47c83a 	sub	r3,r3,r17
    cbb0:	3023883a 	mov	r17,r6
    cbb4:	1880202c 	andhi	r2,r3,128
    cbb8:	10002326 	beq	r2,zero,cc48 <__subdf3+0x20c>
    cbbc:	04c02034 	movhi	r19,128
    cbc0:	9cffffc4 	addi	r19,r19,-1
    cbc4:	1ce6703a 	and	r19,r3,r19
    cbc8:	98007a26 	beq	r19,zero,cdb4 <__subdf3+0x378>
    cbcc:	9809883a 	mov	r4,r19
    cbd0:	000d53c0 	call	d53c <__clzsi2>
    cbd4:	113ffe04 	addi	r4,r2,-8
    cbd8:	00c007c4 	movi	r3,31
    cbdc:	19007b16 	blt	r3,r4,cdcc <__subdf3+0x390>
    cbe0:	00800804 	movi	r2,32
    cbe4:	1105c83a 	sub	r2,r2,r4
    cbe8:	8884d83a 	srl	r2,r17,r2
    cbec:	9906983a 	sll	r3,r19,r4
    cbf0:	8922983a 	sll	r17,r17,r4
    cbf4:	10c4b03a 	or	r2,r2,r3
    cbf8:	24007816 	blt	r4,r16,cddc <__subdf3+0x3a0>
    cbfc:	2421c83a 	sub	r16,r4,r16
    cc00:	80c00044 	addi	r3,r16,1
    cc04:	010007c4 	movi	r4,31
    cc08:	20c09516 	blt	r4,r3,ce60 <__subdf3+0x424>
    cc0c:	01400804 	movi	r5,32
    cc10:	28cbc83a 	sub	r5,r5,r3
    cc14:	88c8d83a 	srl	r4,r17,r3
    cc18:	8962983a 	sll	r17,r17,r5
    cc1c:	114a983a 	sll	r5,r2,r5
    cc20:	10c6d83a 	srl	r3,r2,r3
    cc24:	8804c03a 	cmpne	r2,r17,zero
    cc28:	290ab03a 	or	r5,r5,r4
    cc2c:	28a2b03a 	or	r17,r5,r2
    cc30:	0021883a 	mov	r16,zero
    cc34:	003fa206 	br	cac0 <__subdf3+0x84>
    cc38:	2090b03a 	or	r8,r4,r2
    cc3c:	40018e26 	beq	r8,zero,d278 <__subdf3+0x83c>
    cc40:	1007883a 	mov	r3,r2
    cc44:	2023883a 	mov	r17,r4
    cc48:	888001cc 	andi	r2,r17,7
    cc4c:	103f9e1e 	bne	r2,zero,cac8 <__subdf3+0x8c>
    cc50:	1804977a 	slli	r2,r3,29
    cc54:	8822d0fa 	srli	r17,r17,3
    cc58:	1810d0fa 	srli	r8,r3,3
    cc5c:	9100004c 	andi	r4,r18,1
    cc60:	1444b03a 	or	r2,r2,r17
    cc64:	00c1ffc4 	movi	r3,2047
    cc68:	80c02826 	beq	r16,r3,cd0c <__subdf3+0x2d0>
    cc6c:	01400434 	movhi	r5,16
    cc70:	297fffc4 	addi	r5,r5,-1
    cc74:	80e0703a 	and	r16,r16,r3
    cc78:	414a703a 	and	r5,r8,r5
    cc7c:	003fa806 	br	cb20 <__subdf3+0xe4>
    cc80:	0080630e 	bge	zero,r2,ce10 <__subdf3+0x3d4>
    cc84:	48003026 	beq	r9,zero,cd48 <__subdf3+0x30c>
    cc88:	0101ffc4 	movi	r4,2047
    cc8c:	813f8c26 	beq	r16,r4,cac0 <__subdf3+0x84>
    cc90:	29402034 	orhi	r5,r5,128
    cc94:	01000e04 	movi	r4,56
    cc98:	2080a90e 	bge	r4,r2,cf40 <__subdf3+0x504>
    cc9c:	298cb03a 	or	r6,r5,r6
    cca0:	3012c03a 	cmpne	r9,r6,zero
    cca4:	0005883a 	mov	r2,zero
    cca8:	4c53883a 	add	r9,r9,r17
    ccac:	4c63803a 	cmpltu	r17,r9,r17
    ccb0:	10c7883a 	add	r3,r2,r3
    ccb4:	88c7883a 	add	r3,r17,r3
    ccb8:	4823883a 	mov	r17,r9
    ccbc:	1880202c 	andhi	r2,r3,128
    ccc0:	1000d026 	beq	r2,zero,d004 <__subdf3+0x5c8>
    ccc4:	84000044 	addi	r16,r16,1
    ccc8:	0081ffc4 	movi	r2,2047
    cccc:	8080fe26 	beq	r16,r2,d0c8 <__subdf3+0x68c>
    ccd0:	00bfe034 	movhi	r2,65408
    ccd4:	10bfffc4 	addi	r2,r2,-1
    ccd8:	1886703a 	and	r3,r3,r2
    ccdc:	880ad07a 	srli	r5,r17,1
    cce0:	180497fa 	slli	r2,r3,31
    cce4:	8900004c 	andi	r4,r17,1
    cce8:	2922b03a 	or	r17,r5,r4
    ccec:	1806d07a 	srli	r3,r3,1
    ccf0:	1462b03a 	or	r17,r2,r17
    ccf4:	3825883a 	mov	r18,r7
    ccf8:	003f7106 	br	cac0 <__subdf3+0x84>
    ccfc:	2984b03a 	or	r2,r5,r6
    cd00:	103f6826 	beq	r2,zero,caa4 <__subdf3+0x68>
    cd04:	39c03fcc 	andi	r7,r7,255
    cd08:	003f6706 	br	caa8 <__subdf3+0x6c>
    cd0c:	4086b03a 	or	r3,r8,r2
    cd10:	18015226 	beq	r3,zero,d25c <__subdf3+0x820>
    cd14:	00c00434 	movhi	r3,16
    cd18:	41400234 	orhi	r5,r8,8
    cd1c:	18ffffc4 	addi	r3,r3,-1
    cd20:	28ca703a 	and	r5,r5,r3
    cd24:	003f7e06 	br	cb20 <__subdf3+0xe4>
    cd28:	10bfffc4 	addi	r2,r2,-1
    cd2c:	1000491e 	bne	r2,zero,ce54 <__subdf3+0x418>
    cd30:	898fc83a 	sub	r7,r17,r6
    cd34:	89e3803a 	cmpltu	r17,r17,r7
    cd38:	1947c83a 	sub	r3,r3,r5
    cd3c:	1c47c83a 	sub	r3,r3,r17
    cd40:	3823883a 	mov	r17,r7
    cd44:	003f9b06 	br	cbb4 <__subdf3+0x178>
    cd48:	2988b03a 	or	r4,r5,r6
    cd4c:	203f5c26 	beq	r4,zero,cac0 <__subdf3+0x84>
    cd50:	10bfffc4 	addi	r2,r2,-1
    cd54:	1000931e 	bne	r2,zero,cfa4 <__subdf3+0x568>
    cd58:	898d883a 	add	r6,r17,r6
    cd5c:	3463803a 	cmpltu	r17,r6,r17
    cd60:	1947883a 	add	r3,r3,r5
    cd64:	88c7883a 	add	r3,r17,r3
    cd68:	3023883a 	mov	r17,r6
    cd6c:	003fd306 	br	ccbc <__subdf3+0x280>
    cd70:	1000541e 	bne	r2,zero,cec4 <__subdf3+0x488>
    cd74:	80800044 	addi	r2,r16,1
    cd78:	1081ffcc 	andi	r2,r2,2047
    cd7c:	01000044 	movi	r4,1
    cd80:	2080a20e 	bge	r4,r2,d00c <__subdf3+0x5d0>
    cd84:	8989c83a 	sub	r4,r17,r6
    cd88:	8905803a 	cmpltu	r2,r17,r4
    cd8c:	1967c83a 	sub	r19,r3,r5
    cd90:	98a7c83a 	sub	r19,r19,r2
    cd94:	9880202c 	andhi	r2,r19,128
    cd98:	10006326 	beq	r2,zero,cf28 <__subdf3+0x4ec>
    cd9c:	3463c83a 	sub	r17,r6,r17
    cda0:	28c7c83a 	sub	r3,r5,r3
    cda4:	344d803a 	cmpltu	r6,r6,r17
    cda8:	19a7c83a 	sub	r19,r3,r6
    cdac:	3825883a 	mov	r18,r7
    cdb0:	983f861e 	bne	r19,zero,cbcc <__subdf3+0x190>
    cdb4:	8809883a 	mov	r4,r17
    cdb8:	000d53c0 	call	d53c <__clzsi2>
    cdbc:	10800804 	addi	r2,r2,32
    cdc0:	113ffe04 	addi	r4,r2,-8
    cdc4:	00c007c4 	movi	r3,31
    cdc8:	193f850e 	bge	r3,r4,cbe0 <__subdf3+0x1a4>
    cdcc:	10bff604 	addi	r2,r2,-40
    cdd0:	8884983a 	sll	r2,r17,r2
    cdd4:	0023883a 	mov	r17,zero
    cdd8:	243f880e 	bge	r4,r16,cbfc <__subdf3+0x1c0>
    cddc:	00ffe034 	movhi	r3,65408
    cde0:	18ffffc4 	addi	r3,r3,-1
    cde4:	8121c83a 	sub	r16,r16,r4
    cde8:	10c6703a 	and	r3,r2,r3
    cdec:	003f3406 	br	cac0 <__subdf3+0x84>
    cdf0:	9100004c 	andi	r4,r18,1
    cdf4:	000b883a 	mov	r5,zero
    cdf8:	0005883a 	mov	r2,zero
    cdfc:	003f4806 	br	cb20 <__subdf3+0xe4>
    ce00:	298cb03a 	or	r6,r5,r6
    ce04:	300cc03a 	cmpne	r6,r6,zero
    ce08:	0005883a 	mov	r2,zero
    ce0c:	003f6406 	br	cba0 <__subdf3+0x164>
    ce10:	10009a1e 	bne	r2,zero,d07c <__subdf3+0x640>
    ce14:	82400044 	addi	r9,r16,1
    ce18:	4881ffcc 	andi	r2,r9,2047
    ce1c:	02800044 	movi	r10,1
    ce20:	5080670e 	bge	r10,r2,cfc0 <__subdf3+0x584>
    ce24:	0081ffc4 	movi	r2,2047
    ce28:	4880af26 	beq	r9,r2,d0e8 <__subdf3+0x6ac>
    ce2c:	898d883a 	add	r6,r17,r6
    ce30:	1945883a 	add	r2,r3,r5
    ce34:	3447803a 	cmpltu	r3,r6,r17
    ce38:	1887883a 	add	r3,r3,r2
    ce3c:	182297fa 	slli	r17,r3,31
    ce40:	300cd07a 	srli	r6,r6,1
    ce44:	1806d07a 	srli	r3,r3,1
    ce48:	4821883a 	mov	r16,r9
    ce4c:	89a2b03a 	or	r17,r17,r6
    ce50:	003f1b06 	br	cac0 <__subdf3+0x84>
    ce54:	0101ffc4 	movi	r4,2047
    ce58:	813f441e 	bne	r16,r4,cb6c <__subdf3+0x130>
    ce5c:	003f1806 	br	cac0 <__subdf3+0x84>
    ce60:	843ff844 	addi	r16,r16,-31
    ce64:	01400804 	movi	r5,32
    ce68:	1408d83a 	srl	r4,r2,r16
    ce6c:	19405026 	beq	r3,r5,cfb0 <__subdf3+0x574>
    ce70:	01401004 	movi	r5,64
    ce74:	28c7c83a 	sub	r3,r5,r3
    ce78:	10c4983a 	sll	r2,r2,r3
    ce7c:	88a2b03a 	or	r17,r17,r2
    ce80:	8822c03a 	cmpne	r17,r17,zero
    ce84:	2462b03a 	or	r17,r4,r17
    ce88:	0007883a 	mov	r3,zero
    ce8c:	0021883a 	mov	r16,zero
    ce90:	003f6d06 	br	cc48 <__subdf3+0x20c>
    ce94:	11fff804 	addi	r7,r2,-32
    ce98:	01000804 	movi	r4,32
    ce9c:	29ced83a 	srl	r7,r5,r7
    cea0:	11004526 	beq	r2,r4,cfb8 <__subdf3+0x57c>
    cea4:	01001004 	movi	r4,64
    cea8:	2089c83a 	sub	r4,r4,r2
    ceac:	2904983a 	sll	r2,r5,r4
    ceb0:	118cb03a 	or	r6,r2,r6
    ceb4:	300cc03a 	cmpne	r6,r6,zero
    ceb8:	398cb03a 	or	r6,r7,r6
    cebc:	0005883a 	mov	r2,zero
    cec0:	003f3706 	br	cba0 <__subdf3+0x164>
    cec4:	80002a26 	beq	r16,zero,cf70 <__subdf3+0x534>
    cec8:	0101ffc4 	movi	r4,2047
    cecc:	49006626 	beq	r9,r4,d068 <__subdf3+0x62c>
    ced0:	0085c83a 	sub	r2,zero,r2
    ced4:	18c02034 	orhi	r3,r3,128
    ced8:	01000e04 	movi	r4,56
    cedc:	20807e16 	blt	r4,r2,d0d8 <__subdf3+0x69c>
    cee0:	010007c4 	movi	r4,31
    cee4:	2080e716 	blt	r4,r2,d284 <__subdf3+0x848>
    cee8:	01000804 	movi	r4,32
    ceec:	2089c83a 	sub	r4,r4,r2
    cef0:	1914983a 	sll	r10,r3,r4
    cef4:	8890d83a 	srl	r8,r17,r2
    cef8:	8908983a 	sll	r4,r17,r4
    cefc:	1884d83a 	srl	r2,r3,r2
    cf00:	5222b03a 	or	r17,r10,r8
    cf04:	2006c03a 	cmpne	r3,r4,zero
    cf08:	88e2b03a 	or	r17,r17,r3
    cf0c:	3463c83a 	sub	r17,r6,r17
    cf10:	2885c83a 	sub	r2,r5,r2
    cf14:	344d803a 	cmpltu	r6,r6,r17
    cf18:	1187c83a 	sub	r3,r2,r6
    cf1c:	4821883a 	mov	r16,r9
    cf20:	3825883a 	mov	r18,r7
    cf24:	003f2306 	br	cbb4 <__subdf3+0x178>
    cf28:	24d0b03a 	or	r8,r4,r19
    cf2c:	40001b1e 	bne	r8,zero,cf9c <__subdf3+0x560>
    cf30:	0005883a 	mov	r2,zero
    cf34:	0009883a 	mov	r4,zero
    cf38:	0021883a 	mov	r16,zero
    cf3c:	003f4906 	br	cc64 <__subdf3+0x228>
    cf40:	010007c4 	movi	r4,31
    cf44:	20803a16 	blt	r4,r2,d030 <__subdf3+0x5f4>
    cf48:	01000804 	movi	r4,32
    cf4c:	2089c83a 	sub	r4,r4,r2
    cf50:	2912983a 	sll	r9,r5,r4
    cf54:	3090d83a 	srl	r8,r6,r2
    cf58:	3108983a 	sll	r4,r6,r4
    cf5c:	2884d83a 	srl	r2,r5,r2
    cf60:	4a12b03a 	or	r9,r9,r8
    cf64:	2008c03a 	cmpne	r4,r4,zero
    cf68:	4912b03a 	or	r9,r9,r4
    cf6c:	003f4e06 	br	cca8 <__subdf3+0x26c>
    cf70:	1c48b03a 	or	r4,r3,r17
    cf74:	20003c26 	beq	r4,zero,d068 <__subdf3+0x62c>
    cf78:	0084303a 	nor	r2,zero,r2
    cf7c:	1000381e 	bne	r2,zero,d060 <__subdf3+0x624>
    cf80:	3463c83a 	sub	r17,r6,r17
    cf84:	28c5c83a 	sub	r2,r5,r3
    cf88:	344d803a 	cmpltu	r6,r6,r17
    cf8c:	1187c83a 	sub	r3,r2,r6
    cf90:	4821883a 	mov	r16,r9
    cf94:	3825883a 	mov	r18,r7
    cf98:	003f0606 	br	cbb4 <__subdf3+0x178>
    cf9c:	2023883a 	mov	r17,r4
    cfa0:	003f0906 	br	cbc8 <__subdf3+0x18c>
    cfa4:	0101ffc4 	movi	r4,2047
    cfa8:	813f3a1e 	bne	r16,r4,cc94 <__subdf3+0x258>
    cfac:	003ec406 	br	cac0 <__subdf3+0x84>
    cfb0:	0005883a 	mov	r2,zero
    cfb4:	003fb106 	br	ce7c <__subdf3+0x440>
    cfb8:	0005883a 	mov	r2,zero
    cfbc:	003fbc06 	br	ceb0 <__subdf3+0x474>
    cfc0:	1c44b03a 	or	r2,r3,r17
    cfc4:	80008e1e 	bne	r16,zero,d200 <__subdf3+0x7c4>
    cfc8:	1000c826 	beq	r2,zero,d2ec <__subdf3+0x8b0>
    cfcc:	2984b03a 	or	r2,r5,r6
    cfd0:	103ebb26 	beq	r2,zero,cac0 <__subdf3+0x84>
    cfd4:	8989883a 	add	r4,r17,r6
    cfd8:	1945883a 	add	r2,r3,r5
    cfdc:	2447803a 	cmpltu	r3,r4,r17
    cfe0:	1887883a 	add	r3,r3,r2
    cfe4:	1880202c 	andhi	r2,r3,128
    cfe8:	2023883a 	mov	r17,r4
    cfec:	103f1626 	beq	r2,zero,cc48 <__subdf3+0x20c>
    cff0:	00bfe034 	movhi	r2,65408
    cff4:	10bfffc4 	addi	r2,r2,-1
    cff8:	5021883a 	mov	r16,r10
    cffc:	1886703a 	and	r3,r3,r2
    d000:	003eaf06 	br	cac0 <__subdf3+0x84>
    d004:	3825883a 	mov	r18,r7
    d008:	003f0f06 	br	cc48 <__subdf3+0x20c>
    d00c:	1c44b03a 	or	r2,r3,r17
    d010:	8000251e 	bne	r16,zero,d0a8 <__subdf3+0x66c>
    d014:	1000661e 	bne	r2,zero,d1b0 <__subdf3+0x774>
    d018:	2990b03a 	or	r8,r5,r6
    d01c:	40009626 	beq	r8,zero,d278 <__subdf3+0x83c>
    d020:	2807883a 	mov	r3,r5
    d024:	3023883a 	mov	r17,r6
    d028:	3825883a 	mov	r18,r7
    d02c:	003ea406 	br	cac0 <__subdf3+0x84>
    d030:	127ff804 	addi	r9,r2,-32
    d034:	01000804 	movi	r4,32
    d038:	2a52d83a 	srl	r9,r5,r9
    d03c:	11008c26 	beq	r2,r4,d270 <__subdf3+0x834>
    d040:	01001004 	movi	r4,64
    d044:	2085c83a 	sub	r2,r4,r2
    d048:	2884983a 	sll	r2,r5,r2
    d04c:	118cb03a 	or	r6,r2,r6
    d050:	300cc03a 	cmpne	r6,r6,zero
    d054:	4992b03a 	or	r9,r9,r6
    d058:	0005883a 	mov	r2,zero
    d05c:	003f1206 	br	cca8 <__subdf3+0x26c>
    d060:	0101ffc4 	movi	r4,2047
    d064:	493f9c1e 	bne	r9,r4,ced8 <__subdf3+0x49c>
    d068:	2807883a 	mov	r3,r5
    d06c:	3023883a 	mov	r17,r6
    d070:	4821883a 	mov	r16,r9
    d074:	3825883a 	mov	r18,r7
    d078:	003e9106 	br	cac0 <__subdf3+0x84>
    d07c:	80001f1e 	bne	r16,zero,d0fc <__subdf3+0x6c0>
    d080:	1c48b03a 	or	r4,r3,r17
    d084:	20005a26 	beq	r4,zero,d1f0 <__subdf3+0x7b4>
    d088:	0084303a 	nor	r2,zero,r2
    d08c:	1000561e 	bne	r2,zero,d1e8 <__subdf3+0x7ac>
    d090:	89a3883a 	add	r17,r17,r6
    d094:	1945883a 	add	r2,r3,r5
    d098:	898d803a 	cmpltu	r6,r17,r6
    d09c:	3087883a 	add	r3,r6,r2
    d0a0:	4821883a 	mov	r16,r9
    d0a4:	003f0506 	br	ccbc <__subdf3+0x280>
    d0a8:	10002b1e 	bne	r2,zero,d158 <__subdf3+0x71c>
    d0ac:	2984b03a 	or	r2,r5,r6
    d0b0:	10008026 	beq	r2,zero,d2b4 <__subdf3+0x878>
    d0b4:	2807883a 	mov	r3,r5
    d0b8:	3023883a 	mov	r17,r6
    d0bc:	3825883a 	mov	r18,r7
    d0c0:	0401ffc4 	movi	r16,2047
    d0c4:	003e7e06 	br	cac0 <__subdf3+0x84>
    d0c8:	3809883a 	mov	r4,r7
    d0cc:	0011883a 	mov	r8,zero
    d0d0:	0005883a 	mov	r2,zero
    d0d4:	003ee306 	br	cc64 <__subdf3+0x228>
    d0d8:	1c62b03a 	or	r17,r3,r17
    d0dc:	8822c03a 	cmpne	r17,r17,zero
    d0e0:	0005883a 	mov	r2,zero
    d0e4:	003f8906 	br	cf0c <__subdf3+0x4d0>
    d0e8:	3809883a 	mov	r4,r7
    d0ec:	4821883a 	mov	r16,r9
    d0f0:	0011883a 	mov	r8,zero
    d0f4:	0005883a 	mov	r2,zero
    d0f8:	003eda06 	br	cc64 <__subdf3+0x228>
    d0fc:	0101ffc4 	movi	r4,2047
    d100:	49003b26 	beq	r9,r4,d1f0 <__subdf3+0x7b4>
    d104:	0085c83a 	sub	r2,zero,r2
    d108:	18c02034 	orhi	r3,r3,128
    d10c:	01000e04 	movi	r4,56
    d110:	20806e16 	blt	r4,r2,d2cc <__subdf3+0x890>
    d114:	010007c4 	movi	r4,31
    d118:	20807716 	blt	r4,r2,d2f8 <__subdf3+0x8bc>
    d11c:	01000804 	movi	r4,32
    d120:	2089c83a 	sub	r4,r4,r2
    d124:	1914983a 	sll	r10,r3,r4
    d128:	8890d83a 	srl	r8,r17,r2
    d12c:	8908983a 	sll	r4,r17,r4
    d130:	1884d83a 	srl	r2,r3,r2
    d134:	5222b03a 	or	r17,r10,r8
    d138:	2006c03a 	cmpne	r3,r4,zero
    d13c:	88e2b03a 	or	r17,r17,r3
    d140:	89a3883a 	add	r17,r17,r6
    d144:	1145883a 	add	r2,r2,r5
    d148:	898d803a 	cmpltu	r6,r17,r6
    d14c:	3087883a 	add	r3,r6,r2
    d150:	4821883a 	mov	r16,r9
    d154:	003ed906 	br	ccbc <__subdf3+0x280>
    d158:	2984b03a 	or	r2,r5,r6
    d15c:	10004226 	beq	r2,zero,d268 <__subdf3+0x82c>
    d160:	1808d0fa 	srli	r4,r3,3
    d164:	8822d0fa 	srli	r17,r17,3
    d168:	1806977a 	slli	r3,r3,29
    d16c:	2080022c 	andhi	r2,r4,8
    d170:	1c62b03a 	or	r17,r3,r17
    d174:	10000826 	beq	r2,zero,d198 <__subdf3+0x75c>
    d178:	2812d0fa 	srli	r9,r5,3
    d17c:	4880022c 	andhi	r2,r9,8
    d180:	1000051e 	bne	r2,zero,d198 <__subdf3+0x75c>
    d184:	300cd0fa 	srli	r6,r6,3
    d188:	2804977a 	slli	r2,r5,29
    d18c:	4809883a 	mov	r4,r9
    d190:	3825883a 	mov	r18,r7
    d194:	11a2b03a 	or	r17,r2,r6
    d198:	8806d77a 	srli	r3,r17,29
    d19c:	200890fa 	slli	r4,r4,3
    d1a0:	882290fa 	slli	r17,r17,3
    d1a4:	0401ffc4 	movi	r16,2047
    d1a8:	1906b03a 	or	r3,r3,r4
    d1ac:	003e4406 	br	cac0 <__subdf3+0x84>
    d1b0:	2984b03a 	or	r2,r5,r6
    d1b4:	103e4226 	beq	r2,zero,cac0 <__subdf3+0x84>
    d1b8:	8989c83a 	sub	r4,r17,r6
    d1bc:	8911803a 	cmpltu	r8,r17,r4
    d1c0:	1945c83a 	sub	r2,r3,r5
    d1c4:	1205c83a 	sub	r2,r2,r8
    d1c8:	1200202c 	andhi	r8,r2,128
    d1cc:	403e9a26 	beq	r8,zero,cc38 <__subdf3+0x1fc>
    d1d0:	3463c83a 	sub	r17,r6,r17
    d1d4:	28c5c83a 	sub	r2,r5,r3
    d1d8:	344d803a 	cmpltu	r6,r6,r17
    d1dc:	1187c83a 	sub	r3,r2,r6
    d1e0:	3825883a 	mov	r18,r7
    d1e4:	003e3606 	br	cac0 <__subdf3+0x84>
    d1e8:	0101ffc4 	movi	r4,2047
    d1ec:	493fc71e 	bne	r9,r4,d10c <__subdf3+0x6d0>
    d1f0:	2807883a 	mov	r3,r5
    d1f4:	3023883a 	mov	r17,r6
    d1f8:	4821883a 	mov	r16,r9
    d1fc:	003e3006 	br	cac0 <__subdf3+0x84>
    d200:	10003626 	beq	r2,zero,d2dc <__subdf3+0x8a0>
    d204:	2984b03a 	or	r2,r5,r6
    d208:	10001726 	beq	r2,zero,d268 <__subdf3+0x82c>
    d20c:	1808d0fa 	srli	r4,r3,3
    d210:	8822d0fa 	srli	r17,r17,3
    d214:	1806977a 	slli	r3,r3,29
    d218:	2080022c 	andhi	r2,r4,8
    d21c:	1c62b03a 	or	r17,r3,r17
    d220:	10000726 	beq	r2,zero,d240 <__subdf3+0x804>
    d224:	2812d0fa 	srli	r9,r5,3
    d228:	4880022c 	andhi	r2,r9,8
    d22c:	1000041e 	bne	r2,zero,d240 <__subdf3+0x804>
    d230:	300cd0fa 	srli	r6,r6,3
    d234:	2804977a 	slli	r2,r5,29
    d238:	4809883a 	mov	r4,r9
    d23c:	11a2b03a 	or	r17,r2,r6
    d240:	8806d77a 	srli	r3,r17,29
    d244:	200890fa 	slli	r4,r4,3
    d248:	882290fa 	slli	r17,r17,3
    d24c:	3825883a 	mov	r18,r7
    d250:	1906b03a 	or	r3,r3,r4
    d254:	0401ffc4 	movi	r16,2047
    d258:	003e1906 	br	cac0 <__subdf3+0x84>
    d25c:	000b883a 	mov	r5,zero
    d260:	0005883a 	mov	r2,zero
    d264:	003e2e06 	br	cb20 <__subdf3+0xe4>
    d268:	0401ffc4 	movi	r16,2047
    d26c:	003e1406 	br	cac0 <__subdf3+0x84>
    d270:	0005883a 	mov	r2,zero
    d274:	003f7506 	br	d04c <__subdf3+0x610>
    d278:	0005883a 	mov	r2,zero
    d27c:	0009883a 	mov	r4,zero
    d280:	003e7806 	br	cc64 <__subdf3+0x228>
    d284:	123ff804 	addi	r8,r2,-32
    d288:	01000804 	movi	r4,32
    d28c:	1a10d83a 	srl	r8,r3,r8
    d290:	11002526 	beq	r2,r4,d328 <__subdf3+0x8ec>
    d294:	01001004 	movi	r4,64
    d298:	2085c83a 	sub	r2,r4,r2
    d29c:	1884983a 	sll	r2,r3,r2
    d2a0:	1444b03a 	or	r2,r2,r17
    d2a4:	1004c03a 	cmpne	r2,r2,zero
    d2a8:	40a2b03a 	or	r17,r8,r2
    d2ac:	0005883a 	mov	r2,zero
    d2b0:	003f1606 	br	cf0c <__subdf3+0x4d0>
    d2b4:	02000434 	movhi	r8,16
    d2b8:	0009883a 	mov	r4,zero
    d2bc:	423fffc4 	addi	r8,r8,-1
    d2c0:	00bfffc4 	movi	r2,-1
    d2c4:	0401ffc4 	movi	r16,2047
    d2c8:	003e6606 	br	cc64 <__subdf3+0x228>
    d2cc:	1c62b03a 	or	r17,r3,r17
    d2d0:	8822c03a 	cmpne	r17,r17,zero
    d2d4:	0005883a 	mov	r2,zero
    d2d8:	003f9906 	br	d140 <__subdf3+0x704>
    d2dc:	2807883a 	mov	r3,r5
    d2e0:	3023883a 	mov	r17,r6
    d2e4:	0401ffc4 	movi	r16,2047
    d2e8:	003df506 	br	cac0 <__subdf3+0x84>
    d2ec:	2807883a 	mov	r3,r5
    d2f0:	3023883a 	mov	r17,r6
    d2f4:	003df206 	br	cac0 <__subdf3+0x84>
    d2f8:	123ff804 	addi	r8,r2,-32
    d2fc:	01000804 	movi	r4,32
    d300:	1a10d83a 	srl	r8,r3,r8
    d304:	11000a26 	beq	r2,r4,d330 <__subdf3+0x8f4>
    d308:	01001004 	movi	r4,64
    d30c:	2085c83a 	sub	r2,r4,r2
    d310:	1884983a 	sll	r2,r3,r2
    d314:	1444b03a 	or	r2,r2,r17
    d318:	1004c03a 	cmpne	r2,r2,zero
    d31c:	40a2b03a 	or	r17,r8,r2
    d320:	0005883a 	mov	r2,zero
    d324:	003f8606 	br	d140 <__subdf3+0x704>
    d328:	0005883a 	mov	r2,zero
    d32c:	003fdc06 	br	d2a0 <__subdf3+0x864>
    d330:	0005883a 	mov	r2,zero
    d334:	003ff706 	br	d314 <__subdf3+0x8d8>

0000d338 <__fixdfsi>:
    d338:	280cd53a 	srli	r6,r5,20
    d33c:	00c00434 	movhi	r3,16
    d340:	18ffffc4 	addi	r3,r3,-1
    d344:	3181ffcc 	andi	r6,r6,2047
    d348:	01c0ff84 	movi	r7,1022
    d34c:	28c6703a 	and	r3,r5,r3
    d350:	280ad7fa 	srli	r5,r5,31
    d354:	3980120e 	bge	r7,r6,d3a0 <__fixdfsi+0x68>
    d358:	00810744 	movi	r2,1053
    d35c:	11800c16 	blt	r2,r6,d390 <__fixdfsi+0x58>
    d360:	00810cc4 	movi	r2,1075
    d364:	1185c83a 	sub	r2,r2,r6
    d368:	01c007c4 	movi	r7,31
    d36c:	18c00434 	orhi	r3,r3,16
    d370:	38800d16 	blt	r7,r2,d3a8 <__fixdfsi+0x70>
    d374:	31befb44 	addi	r6,r6,-1043
    d378:	2084d83a 	srl	r2,r4,r2
    d37c:	1986983a 	sll	r3,r3,r6
    d380:	1884b03a 	or	r2,r3,r2
    d384:	28000726 	beq	r5,zero,d3a4 <__fixdfsi+0x6c>
    d388:	0085c83a 	sub	r2,zero,r2
    d38c:	f800283a 	ret
    d390:	00a00034 	movhi	r2,32768
    d394:	10bfffc4 	addi	r2,r2,-1
    d398:	2885883a 	add	r2,r5,r2
    d39c:	f800283a 	ret
    d3a0:	0005883a 	mov	r2,zero
    d3a4:	f800283a 	ret
    d3a8:	008104c4 	movi	r2,1043
    d3ac:	1185c83a 	sub	r2,r2,r6
    d3b0:	1884d83a 	srl	r2,r3,r2
    d3b4:	003ff306 	br	d384 <__fixdfsi+0x4c>

0000d3b8 <__floatsidf>:
    d3b8:	defffd04 	addi	sp,sp,-12
    d3bc:	dfc00215 	stw	ra,8(sp)
    d3c0:	dc400115 	stw	r17,4(sp)
    d3c4:	dc000015 	stw	r16,0(sp)
    d3c8:	20002b26 	beq	r4,zero,d478 <__floatsidf+0xc0>
    d3cc:	2023883a 	mov	r17,r4
    d3d0:	2020d7fa 	srli	r16,r4,31
    d3d4:	20002d16 	blt	r4,zero,d48c <__floatsidf+0xd4>
    d3d8:	8809883a 	mov	r4,r17
    d3dc:	000d53c0 	call	d53c <__clzsi2>
    d3e0:	01410784 	movi	r5,1054
    d3e4:	288bc83a 	sub	r5,r5,r2
    d3e8:	01010cc4 	movi	r4,1075
    d3ec:	2149c83a 	sub	r4,r4,r5
    d3f0:	00c007c4 	movi	r3,31
    d3f4:	1900160e 	bge	r3,r4,d450 <__floatsidf+0x98>
    d3f8:	00c104c4 	movi	r3,1043
    d3fc:	1947c83a 	sub	r3,r3,r5
    d400:	88c6983a 	sll	r3,r17,r3
    d404:	00800434 	movhi	r2,16
    d408:	10bfffc4 	addi	r2,r2,-1
    d40c:	1886703a 	and	r3,r3,r2
    d410:	2941ffcc 	andi	r5,r5,2047
    d414:	800d883a 	mov	r6,r16
    d418:	0005883a 	mov	r2,zero
    d41c:	280a953a 	slli	r5,r5,20
    d420:	31803fcc 	andi	r6,r6,255
    d424:	01000434 	movhi	r4,16
    d428:	300c97fa 	slli	r6,r6,31
    d42c:	213fffc4 	addi	r4,r4,-1
    d430:	1906703a 	and	r3,r3,r4
    d434:	1946b03a 	or	r3,r3,r5
    d438:	1986b03a 	or	r3,r3,r6
    d43c:	dfc00217 	ldw	ra,8(sp)
    d440:	dc400117 	ldw	r17,4(sp)
    d444:	dc000017 	ldw	r16,0(sp)
    d448:	dec00304 	addi	sp,sp,12
    d44c:	f800283a 	ret
    d450:	00c002c4 	movi	r3,11
    d454:	1887c83a 	sub	r3,r3,r2
    d458:	88c6d83a 	srl	r3,r17,r3
    d45c:	8904983a 	sll	r2,r17,r4
    d460:	01000434 	movhi	r4,16
    d464:	213fffc4 	addi	r4,r4,-1
    d468:	2941ffcc 	andi	r5,r5,2047
    d46c:	1906703a 	and	r3,r3,r4
    d470:	800d883a 	mov	r6,r16
    d474:	003fe906 	br	d41c <__floatsidf+0x64>
    d478:	000d883a 	mov	r6,zero
    d47c:	000b883a 	mov	r5,zero
    d480:	0007883a 	mov	r3,zero
    d484:	0005883a 	mov	r2,zero
    d488:	003fe406 	br	d41c <__floatsidf+0x64>
    d48c:	0123c83a 	sub	r17,zero,r4
    d490:	003fd106 	br	d3d8 <__floatsidf+0x20>

0000d494 <__floatunsidf>:
    d494:	defffe04 	addi	sp,sp,-8
    d498:	dc000015 	stw	r16,0(sp)
    d49c:	dfc00115 	stw	ra,4(sp)
    d4a0:	2021883a 	mov	r16,r4
    d4a4:	20002226 	beq	r4,zero,d530 <__floatunsidf+0x9c>
    d4a8:	000d53c0 	call	d53c <__clzsi2>
    d4ac:	01010784 	movi	r4,1054
    d4b0:	2089c83a 	sub	r4,r4,r2
    d4b4:	01810cc4 	movi	r6,1075
    d4b8:	310dc83a 	sub	r6,r6,r4
    d4bc:	00c007c4 	movi	r3,31
    d4c0:	1980120e 	bge	r3,r6,d50c <__floatunsidf+0x78>
    d4c4:	00c104c4 	movi	r3,1043
    d4c8:	1907c83a 	sub	r3,r3,r4
    d4cc:	80ca983a 	sll	r5,r16,r3
    d4d0:	00800434 	movhi	r2,16
    d4d4:	10bfffc4 	addi	r2,r2,-1
    d4d8:	2101ffcc 	andi	r4,r4,2047
    d4dc:	0021883a 	mov	r16,zero
    d4e0:	288a703a 	and	r5,r5,r2
    d4e4:	2008953a 	slli	r4,r4,20
    d4e8:	00c00434 	movhi	r3,16
    d4ec:	18ffffc4 	addi	r3,r3,-1
    d4f0:	28c6703a 	and	r3,r5,r3
    d4f4:	8005883a 	mov	r2,r16
    d4f8:	1906b03a 	or	r3,r3,r4
    d4fc:	dfc00117 	ldw	ra,4(sp)
    d500:	dc000017 	ldw	r16,0(sp)
    d504:	dec00204 	addi	sp,sp,8
    d508:	f800283a 	ret
    d50c:	00c002c4 	movi	r3,11
    d510:	188bc83a 	sub	r5,r3,r2
    d514:	814ad83a 	srl	r5,r16,r5
    d518:	00c00434 	movhi	r3,16
    d51c:	18ffffc4 	addi	r3,r3,-1
    d520:	81a0983a 	sll	r16,r16,r6
    d524:	2101ffcc 	andi	r4,r4,2047
    d528:	28ca703a 	and	r5,r5,r3
    d52c:	003fed06 	br	d4e4 <__floatunsidf+0x50>
    d530:	0009883a 	mov	r4,zero
    d534:	000b883a 	mov	r5,zero
    d538:	003fea06 	br	d4e4 <__floatunsidf+0x50>

0000d53c <__clzsi2>:
    d53c:	00bfffd4 	movui	r2,65535
    d540:	11000536 	bltu	r2,r4,d558 <__clzsi2+0x1c>
    d544:	00803fc4 	movi	r2,255
    d548:	11000f36 	bltu	r2,r4,d588 <__clzsi2+0x4c>
    d54c:	00800804 	movi	r2,32
    d550:	0007883a 	mov	r3,zero
    d554:	00000506 	br	d56c <__clzsi2+0x30>
    d558:	00804034 	movhi	r2,256
    d55c:	10bfffc4 	addi	r2,r2,-1
    d560:	11000c2e 	bgeu	r2,r4,d594 <__clzsi2+0x58>
    d564:	00800204 	movi	r2,8
    d568:	00c00604 	movi	r3,24
    d56c:	20c8d83a 	srl	r4,r4,r3
    d570:	00c000b4 	movhi	r3,2
    d574:	18e7c004 	addi	r3,r3,-24832
    d578:	1909883a 	add	r4,r3,r4
    d57c:	20c00003 	ldbu	r3,0(r4)
    d580:	10c5c83a 	sub	r2,r2,r3
    d584:	f800283a 	ret
    d588:	00800604 	movi	r2,24
    d58c:	00c00204 	movi	r3,8
    d590:	003ff606 	br	d56c <__clzsi2+0x30>
    d594:	00800404 	movi	r2,16
    d598:	1007883a 	mov	r3,r2
    d59c:	003ff306 	br	d56c <__clzsi2+0x30>

0000d5a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d5a0:	defffe04 	addi	sp,sp,-8
    d5a4:	dfc00115 	stw	ra,4(sp)
    d5a8:	df000015 	stw	fp,0(sp)
    d5ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d5b0:	d0a00d17 	ldw	r2,-32716(gp)
    d5b4:	10000326 	beq	r2,zero,d5c4 <alt_get_errno+0x24>
    d5b8:	d0a00d17 	ldw	r2,-32716(gp)
    d5bc:	103ee83a 	callr	r2
    d5c0:	00000106 	br	d5c8 <alt_get_errno+0x28>
    d5c4:	d0a7e804 	addi	r2,gp,-24672
}
    d5c8:	e037883a 	mov	sp,fp
    d5cc:	dfc00117 	ldw	ra,4(sp)
    d5d0:	df000017 	ldw	fp,0(sp)
    d5d4:	dec00204 	addi	sp,sp,8
    d5d8:	f800283a 	ret

0000d5dc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    d5dc:	defffb04 	addi	sp,sp,-20
    d5e0:	dfc00415 	stw	ra,16(sp)
    d5e4:	df000315 	stw	fp,12(sp)
    d5e8:	df000304 	addi	fp,sp,12
    d5ec:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    d5f0:	e0bfff17 	ldw	r2,-4(fp)
    d5f4:	10000616 	blt	r2,zero,d610 <close+0x34>
    d5f8:	e0bfff17 	ldw	r2,-4(fp)
    d5fc:	10c00324 	muli	r3,r2,12
    d600:	008000b4 	movhi	r2,2
    d604:	10aada04 	addi	r2,r2,-21656
    d608:	1885883a 	add	r2,r3,r2
    d60c:	00000106 	br	d614 <close+0x38>
    d610:	0005883a 	mov	r2,zero
    d614:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    d618:	e0bffd17 	ldw	r2,-12(fp)
    d61c:	10001926 	beq	r2,zero,d684 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    d620:	e0bffd17 	ldw	r2,-12(fp)
    d624:	10800017 	ldw	r2,0(r2)
    d628:	10800417 	ldw	r2,16(r2)
    d62c:	10000626 	beq	r2,zero,d648 <close+0x6c>
    d630:	e0bffd17 	ldw	r2,-12(fp)
    d634:	10800017 	ldw	r2,0(r2)
    d638:	10800417 	ldw	r2,16(r2)
    d63c:	e13ffd17 	ldw	r4,-12(fp)
    d640:	103ee83a 	callr	r2
    d644:	00000106 	br	d64c <close+0x70>
    d648:	0005883a 	mov	r2,zero
    d64c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    d650:	e13fff17 	ldw	r4,-4(fp)
    d654:	000dc940 	call	dc94 <alt_release_fd>
    if (rval < 0)
    d658:	e0bffe17 	ldw	r2,-8(fp)
    d65c:	1000070e 	bge	r2,zero,d67c <close+0xa0>
    {
      ALT_ERRNO = -rval;
    d660:	000d5a00 	call	d5a0 <alt_get_errno>
    d664:	1007883a 	mov	r3,r2
    d668:	e0bffe17 	ldw	r2,-8(fp)
    d66c:	0085c83a 	sub	r2,zero,r2
    d670:	18800015 	stw	r2,0(r3)
      return -1;
    d674:	00bfffc4 	movi	r2,-1
    d678:	00000706 	br	d698 <close+0xbc>
    }
    return 0;
    d67c:	0005883a 	mov	r2,zero
    d680:	00000506 	br	d698 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d684:	000d5a00 	call	d5a0 <alt_get_errno>
    d688:	1007883a 	mov	r3,r2
    d68c:	00801444 	movi	r2,81
    d690:	18800015 	stw	r2,0(r3)
    return -1;
    d694:	00bfffc4 	movi	r2,-1
  }
}
    d698:	e037883a 	mov	sp,fp
    d69c:	dfc00117 	ldw	ra,4(sp)
    d6a0:	df000017 	ldw	fp,0(sp)
    d6a4:	dec00204 	addi	sp,sp,8
    d6a8:	f800283a 	ret

0000d6ac <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    d6ac:	defffc04 	addi	sp,sp,-16
    d6b0:	df000315 	stw	fp,12(sp)
    d6b4:	df000304 	addi	fp,sp,12
    d6b8:	e13ffd15 	stw	r4,-12(fp)
    d6bc:	e17ffe15 	stw	r5,-8(fp)
    d6c0:	e1bfff15 	stw	r6,-4(fp)
  return len;
    d6c4:	e0bfff17 	ldw	r2,-4(fp)
}
    d6c8:	e037883a 	mov	sp,fp
    d6cc:	df000017 	ldw	fp,0(sp)
    d6d0:	dec00104 	addi	sp,sp,4
    d6d4:	f800283a 	ret

0000d6d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d6d8:	defffe04 	addi	sp,sp,-8
    d6dc:	dfc00115 	stw	ra,4(sp)
    d6e0:	df000015 	stw	fp,0(sp)
    d6e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d6e8:	d0a00d17 	ldw	r2,-32716(gp)
    d6ec:	10000326 	beq	r2,zero,d6fc <alt_get_errno+0x24>
    d6f0:	d0a00d17 	ldw	r2,-32716(gp)
    d6f4:	103ee83a 	callr	r2
    d6f8:	00000106 	br	d700 <alt_get_errno+0x28>
    d6fc:	d0a7e804 	addi	r2,gp,-24672
}
    d700:	e037883a 	mov	sp,fp
    d704:	dfc00117 	ldw	ra,4(sp)
    d708:	df000017 	ldw	fp,0(sp)
    d70c:	dec00204 	addi	sp,sp,8
    d710:	f800283a 	ret

0000d714 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    d714:	defffb04 	addi	sp,sp,-20
    d718:	dfc00415 	stw	ra,16(sp)
    d71c:	df000315 	stw	fp,12(sp)
    d720:	df000304 	addi	fp,sp,12
    d724:	e13ffe15 	stw	r4,-8(fp)
    d728:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d72c:	e0bffe17 	ldw	r2,-8(fp)
    d730:	10000616 	blt	r2,zero,d74c <fstat+0x38>
    d734:	e0bffe17 	ldw	r2,-8(fp)
    d738:	10c00324 	muli	r3,r2,12
    d73c:	008000b4 	movhi	r2,2
    d740:	10aada04 	addi	r2,r2,-21656
    d744:	1885883a 	add	r2,r3,r2
    d748:	00000106 	br	d750 <fstat+0x3c>
    d74c:	0005883a 	mov	r2,zero
    d750:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    d754:	e0bffd17 	ldw	r2,-12(fp)
    d758:	10001026 	beq	r2,zero,d79c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    d75c:	e0bffd17 	ldw	r2,-12(fp)
    d760:	10800017 	ldw	r2,0(r2)
    d764:	10800817 	ldw	r2,32(r2)
    d768:	10000726 	beq	r2,zero,d788 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    d76c:	e0bffd17 	ldw	r2,-12(fp)
    d770:	10800017 	ldw	r2,0(r2)
    d774:	10800817 	ldw	r2,32(r2)
    d778:	e17fff17 	ldw	r5,-4(fp)
    d77c:	e13ffd17 	ldw	r4,-12(fp)
    d780:	103ee83a 	callr	r2
    d784:	00000a06 	br	d7b0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    d788:	e0bfff17 	ldw	r2,-4(fp)
    d78c:	00c80004 	movi	r3,8192
    d790:	10c00115 	stw	r3,4(r2)
      return 0;
    d794:	0005883a 	mov	r2,zero
    d798:	00000506 	br	d7b0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d79c:	000d6d80 	call	d6d8 <alt_get_errno>
    d7a0:	1007883a 	mov	r3,r2
    d7a4:	00801444 	movi	r2,81
    d7a8:	18800015 	stw	r2,0(r3)
    return -1;
    d7ac:	00bfffc4 	movi	r2,-1
  }
}
    d7b0:	e037883a 	mov	sp,fp
    d7b4:	dfc00117 	ldw	ra,4(sp)
    d7b8:	df000017 	ldw	fp,0(sp)
    d7bc:	dec00204 	addi	sp,sp,8
    d7c0:	f800283a 	ret

0000d7c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d7c4:	defffe04 	addi	sp,sp,-8
    d7c8:	dfc00115 	stw	ra,4(sp)
    d7cc:	df000015 	stw	fp,0(sp)
    d7d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d7d4:	d0a00d17 	ldw	r2,-32716(gp)
    d7d8:	10000326 	beq	r2,zero,d7e8 <alt_get_errno+0x24>
    d7dc:	d0a00d17 	ldw	r2,-32716(gp)
    d7e0:	103ee83a 	callr	r2
    d7e4:	00000106 	br	d7ec <alt_get_errno+0x28>
    d7e8:	d0a7e804 	addi	r2,gp,-24672
}
    d7ec:	e037883a 	mov	sp,fp
    d7f0:	dfc00117 	ldw	ra,4(sp)
    d7f4:	df000017 	ldw	fp,0(sp)
    d7f8:	dec00204 	addi	sp,sp,8
    d7fc:	f800283a 	ret

0000d800 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    d800:	deffed04 	addi	sp,sp,-76
    d804:	dfc01215 	stw	ra,72(sp)
    d808:	df001115 	stw	fp,68(sp)
    d80c:	df001104 	addi	fp,sp,68
    d810:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d814:	e0bfff17 	ldw	r2,-4(fp)
    d818:	10000616 	blt	r2,zero,d834 <isatty+0x34>
    d81c:	e0bfff17 	ldw	r2,-4(fp)
    d820:	10c00324 	muli	r3,r2,12
    d824:	008000b4 	movhi	r2,2
    d828:	10aada04 	addi	r2,r2,-21656
    d82c:	1885883a 	add	r2,r3,r2
    d830:	00000106 	br	d838 <isatty+0x38>
    d834:	0005883a 	mov	r2,zero
    d838:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    d83c:	e0bfef17 	ldw	r2,-68(fp)
    d840:	10000e26 	beq	r2,zero,d87c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    d844:	e0bfef17 	ldw	r2,-68(fp)
    d848:	10800017 	ldw	r2,0(r2)
    d84c:	10800817 	ldw	r2,32(r2)
    d850:	1000021e 	bne	r2,zero,d85c <isatty+0x5c>
    {
      return 1;
    d854:	00800044 	movi	r2,1
    d858:	00000d06 	br	d890 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    d85c:	e0bff004 	addi	r2,fp,-64
    d860:	100b883a 	mov	r5,r2
    d864:	e13fff17 	ldw	r4,-4(fp)
    d868:	000d7140 	call	d714 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    d86c:	e0bff117 	ldw	r2,-60(fp)
    d870:	10880020 	cmpeqi	r2,r2,8192
    d874:	10803fcc 	andi	r2,r2,255
    d878:	00000506 	br	d890 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d87c:	000d7c40 	call	d7c4 <alt_get_errno>
    d880:	1007883a 	mov	r3,r2
    d884:	00801444 	movi	r2,81
    d888:	18800015 	stw	r2,0(r3)
    return 0;
    d88c:	0005883a 	mov	r2,zero
  }
}
    d890:	e037883a 	mov	sp,fp
    d894:	dfc00117 	ldw	ra,4(sp)
    d898:	df000017 	ldw	fp,0(sp)
    d89c:	dec00204 	addi	sp,sp,8
    d8a0:	f800283a 	ret

0000d8a4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    d8a4:	defffc04 	addi	sp,sp,-16
    d8a8:	df000315 	stw	fp,12(sp)
    d8ac:	df000304 	addi	fp,sp,12
    d8b0:	e13ffd15 	stw	r4,-12(fp)
    d8b4:	e17ffe15 	stw	r5,-8(fp)
    d8b8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    d8bc:	e0fffe17 	ldw	r3,-8(fp)
    d8c0:	e0bffd17 	ldw	r2,-12(fp)
    d8c4:	18800c26 	beq	r3,r2,d8f8 <alt_load_section+0x54>
  {
    while( to != end )
    d8c8:	00000806 	br	d8ec <alt_load_section+0x48>
    {
      *to++ = *from++;
    d8cc:	e0bffe17 	ldw	r2,-8(fp)
    d8d0:	10c00104 	addi	r3,r2,4
    d8d4:	e0fffe15 	stw	r3,-8(fp)
    d8d8:	e0fffd17 	ldw	r3,-12(fp)
    d8dc:	19000104 	addi	r4,r3,4
    d8e0:	e13ffd15 	stw	r4,-12(fp)
    d8e4:	18c00017 	ldw	r3,0(r3)
    d8e8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    d8ec:	e0fffe17 	ldw	r3,-8(fp)
    d8f0:	e0bfff17 	ldw	r2,-4(fp)
    d8f4:	18bff51e 	bne	r3,r2,d8cc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    d8f8:	0001883a 	nop
    d8fc:	e037883a 	mov	sp,fp
    d900:	df000017 	ldw	fp,0(sp)
    d904:	dec00104 	addi	sp,sp,4
    d908:	f800283a 	ret

0000d90c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    d90c:	defffe04 	addi	sp,sp,-8
    d910:	dfc00115 	stw	ra,4(sp)
    d914:	df000015 	stw	fp,0(sp)
    d918:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    d91c:	018000b4 	movhi	r6,2
    d920:	31b04904 	addi	r6,r6,-16092
    d924:	014000b4 	movhi	r5,2
    d928:	2968a704 	addi	r5,r5,-23908
    d92c:	010000b4 	movhi	r4,2
    d930:	21304904 	addi	r4,r4,-16092
    d934:	000d8a40 	call	d8a4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    d938:	01800034 	movhi	r6,0
    d93c:	31809204 	addi	r6,r6,584
    d940:	01400034 	movhi	r5,0
    d944:	29400804 	addi	r5,r5,32
    d948:	01000034 	movhi	r4,0
    d94c:	21000804 	addi	r4,r4,32
    d950:	000d8a40 	call	d8a4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    d954:	018000b4 	movhi	r6,2
    d958:	31a8a704 	addi	r6,r6,-23908
    d95c:	014000b4 	movhi	r5,2
    d960:	29661204 	addi	r5,r5,-26552
    d964:	010000b4 	movhi	r4,2
    d968:	21261204 	addi	r4,r4,-26552
    d96c:	000d8a40 	call	d8a4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    d970:	00184ec0 	call	184ec <alt_dcache_flush_all>
  alt_icache_flush_all();
    d974:	001873c0 	call	1873c <alt_icache_flush_all>
}
    d978:	0001883a 	nop
    d97c:	e037883a 	mov	sp,fp
    d980:	dfc00117 	ldw	ra,4(sp)
    d984:	df000017 	ldw	fp,0(sp)
    d988:	dec00204 	addi	sp,sp,8
    d98c:	f800283a 	ret

0000d990 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d990:	defffe04 	addi	sp,sp,-8
    d994:	dfc00115 	stw	ra,4(sp)
    d998:	df000015 	stw	fp,0(sp)
    d99c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d9a0:	d0a00d17 	ldw	r2,-32716(gp)
    d9a4:	10000326 	beq	r2,zero,d9b4 <alt_get_errno+0x24>
    d9a8:	d0a00d17 	ldw	r2,-32716(gp)
    d9ac:	103ee83a 	callr	r2
    d9b0:	00000106 	br	d9b8 <alt_get_errno+0x28>
    d9b4:	d0a7e804 	addi	r2,gp,-24672
}
    d9b8:	e037883a 	mov	sp,fp
    d9bc:	dfc00117 	ldw	ra,4(sp)
    d9c0:	df000017 	ldw	fp,0(sp)
    d9c4:	dec00204 	addi	sp,sp,8
    d9c8:	f800283a 	ret

0000d9cc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    d9cc:	defff904 	addi	sp,sp,-28
    d9d0:	dfc00615 	stw	ra,24(sp)
    d9d4:	df000515 	stw	fp,20(sp)
    d9d8:	df000504 	addi	fp,sp,20
    d9dc:	e13ffd15 	stw	r4,-12(fp)
    d9e0:	e17ffe15 	stw	r5,-8(fp)
    d9e4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    d9e8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d9ec:	e0bffd17 	ldw	r2,-12(fp)
    d9f0:	10000616 	blt	r2,zero,da0c <lseek+0x40>
    d9f4:	e0bffd17 	ldw	r2,-12(fp)
    d9f8:	10c00324 	muli	r3,r2,12
    d9fc:	008000b4 	movhi	r2,2
    da00:	10aada04 	addi	r2,r2,-21656
    da04:	1885883a 	add	r2,r3,r2
    da08:	00000106 	br	da10 <lseek+0x44>
    da0c:	0005883a 	mov	r2,zero
    da10:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    da14:	e0bffc17 	ldw	r2,-16(fp)
    da18:	10001026 	beq	r2,zero,da5c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    da1c:	e0bffc17 	ldw	r2,-16(fp)
    da20:	10800017 	ldw	r2,0(r2)
    da24:	10800717 	ldw	r2,28(r2)
    da28:	10000926 	beq	r2,zero,da50 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    da2c:	e0bffc17 	ldw	r2,-16(fp)
    da30:	10800017 	ldw	r2,0(r2)
    da34:	10800717 	ldw	r2,28(r2)
    da38:	e1bfff17 	ldw	r6,-4(fp)
    da3c:	e17ffe17 	ldw	r5,-8(fp)
    da40:	e13ffc17 	ldw	r4,-16(fp)
    da44:	103ee83a 	callr	r2
    da48:	e0bffb15 	stw	r2,-20(fp)
    da4c:	00000506 	br	da64 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    da50:	00bfde84 	movi	r2,-134
    da54:	e0bffb15 	stw	r2,-20(fp)
    da58:	00000206 	br	da64 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    da5c:	00bfebc4 	movi	r2,-81
    da60:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    da64:	e0bffb17 	ldw	r2,-20(fp)
    da68:	1000070e 	bge	r2,zero,da88 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    da6c:	000d9900 	call	d990 <alt_get_errno>
    da70:	1007883a 	mov	r3,r2
    da74:	e0bffb17 	ldw	r2,-20(fp)
    da78:	0085c83a 	sub	r2,zero,r2
    da7c:	18800015 	stw	r2,0(r3)
    rc = -1;
    da80:	00bfffc4 	movi	r2,-1
    da84:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    da88:	e0bffb17 	ldw	r2,-20(fp)
}
    da8c:	e037883a 	mov	sp,fp
    da90:	dfc00117 	ldw	ra,4(sp)
    da94:	df000017 	ldw	fp,0(sp)
    da98:	dec00204 	addi	sp,sp,8
    da9c:	f800283a 	ret

0000daa0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    daa0:	defff904 	addi	sp,sp,-28
    daa4:	dfc00615 	stw	ra,24(sp)
    daa8:	df000515 	stw	fp,20(sp)
    daac:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    dab0:	0009883a 	mov	r4,zero
    dab4:	00159600 	call	15960 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    dab8:	000ea5c0 	call	ea5c <OSInit>
    dabc:	01000044 	movi	r4,1
    dac0:	001331c0 	call	1331c <OSSemCreate>
    dac4:	d0a7ee15 	stw	r2,-24648(gp)
    dac8:	01000044 	movi	r4,1
    dacc:	001331c0 	call	1331c <OSSemCreate>
    dad0:	d0a7f015 	stw	r2,-24640(gp)
    dad4:	d0a7e904 	addi	r2,gp,-24668
    dad8:	e0bffc15 	stw	r2,-16(fp)
    dadc:	00800044 	movi	r2,1
    dae0:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    dae4:	e0bffd0b 	ldhu	r2,-12(fp)
    dae8:	1009883a 	mov	r4,r2
    daec:	001331c0 	call	1331c <OSSemCreate>
    daf0:	1007883a 	mov	r3,r2
    daf4:	e0bffc17 	ldw	r2,-16(fp)
    daf8:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    dafc:	00159980 	call	15998 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    db00:	018000b4 	movhi	r6,2
    db04:	31a80304 	addi	r6,r6,-24564
    db08:	014000b4 	movhi	r5,2
    db0c:	29680304 	addi	r5,r5,-24564
    db10:	010000b4 	movhi	r4,2
    db14:	21280304 	addi	r4,r4,-24564
    db18:	00188340 	call	18834 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    db1c:	00185ec0 	call	185ec <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    db20:	010000b4 	movhi	r4,2
    db24:	21219304 	addi	r4,r4,-31156
    db28:	00194b40 	call	194b4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    db2c:	d0a7ea17 	ldw	r2,-24664(gp)
    db30:	d0e7eb17 	ldw	r3,-24660(gp)
    db34:	d127ec17 	ldw	r4,-24656(gp)
    db38:	200d883a 	mov	r6,r4
    db3c:	180b883a 	mov	r5,r3
    db40:	1009883a 	mov	r4,r2
    db44:	00004bc0 	call	4bc <main>
    db48:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    db4c:	01000044 	movi	r4,1
    db50:	000d5dc0 	call	d5dc <close>
  exit (result);
    db54:	e13ffb17 	ldw	r4,-20(fp)
    db58:	00194c80 	call	194c8 <exit>

0000db5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    db5c:	defffe04 	addi	sp,sp,-8
    db60:	dfc00115 	stw	ra,4(sp)
    db64:	df000015 	stw	fp,0(sp)
    db68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    db6c:	d0a00d17 	ldw	r2,-32716(gp)
    db70:	10000326 	beq	r2,zero,db80 <alt_get_errno+0x24>
    db74:	d0a00d17 	ldw	r2,-32716(gp)
    db78:	103ee83a 	callr	r2
    db7c:	00000106 	br	db84 <alt_get_errno+0x28>
    db80:	d0a7e804 	addi	r2,gp,-24672
}
    db84:	e037883a 	mov	sp,fp
    db88:	dfc00117 	ldw	ra,4(sp)
    db8c:	df000017 	ldw	fp,0(sp)
    db90:	dec00204 	addi	sp,sp,8
    db94:	f800283a 	ret

0000db98 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    db98:	defff904 	addi	sp,sp,-28
    db9c:	dfc00615 	stw	ra,24(sp)
    dba0:	df000515 	stw	fp,20(sp)
    dba4:	df000504 	addi	fp,sp,20
    dba8:	e13ffd15 	stw	r4,-12(fp)
    dbac:	e17ffe15 	stw	r5,-8(fp)
    dbb0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    dbb4:	e0bffd17 	ldw	r2,-12(fp)
    dbb8:	10000616 	blt	r2,zero,dbd4 <read+0x3c>
    dbbc:	e0bffd17 	ldw	r2,-12(fp)
    dbc0:	10c00324 	muli	r3,r2,12
    dbc4:	008000b4 	movhi	r2,2
    dbc8:	10aada04 	addi	r2,r2,-21656
    dbcc:	1885883a 	add	r2,r3,r2
    dbd0:	00000106 	br	dbd8 <read+0x40>
    dbd4:	0005883a 	mov	r2,zero
    dbd8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    dbdc:	e0bffb17 	ldw	r2,-20(fp)
    dbe0:	10002226 	beq	r2,zero,dc6c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    dbe4:	e0bffb17 	ldw	r2,-20(fp)
    dbe8:	10800217 	ldw	r2,8(r2)
    dbec:	108000cc 	andi	r2,r2,3
    dbf0:	10800060 	cmpeqi	r2,r2,1
    dbf4:	1000181e 	bne	r2,zero,dc58 <read+0xc0>
        (fd->dev->read))
    dbf8:	e0bffb17 	ldw	r2,-20(fp)
    dbfc:	10800017 	ldw	r2,0(r2)
    dc00:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    dc04:	10001426 	beq	r2,zero,dc58 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    dc08:	e0bffb17 	ldw	r2,-20(fp)
    dc0c:	10800017 	ldw	r2,0(r2)
    dc10:	10800517 	ldw	r2,20(r2)
    dc14:	e0ffff17 	ldw	r3,-4(fp)
    dc18:	180d883a 	mov	r6,r3
    dc1c:	e17ffe17 	ldw	r5,-8(fp)
    dc20:	e13ffb17 	ldw	r4,-20(fp)
    dc24:	103ee83a 	callr	r2
    dc28:	e0bffc15 	stw	r2,-16(fp)
    dc2c:	e0bffc17 	ldw	r2,-16(fp)
    dc30:	1000070e 	bge	r2,zero,dc50 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    dc34:	000db5c0 	call	db5c <alt_get_errno>
    dc38:	1007883a 	mov	r3,r2
    dc3c:	e0bffc17 	ldw	r2,-16(fp)
    dc40:	0085c83a 	sub	r2,zero,r2
    dc44:	18800015 	stw	r2,0(r3)
          return -1;
    dc48:	00bfffc4 	movi	r2,-1
    dc4c:	00000c06 	br	dc80 <read+0xe8>
        }
        return rval;
    dc50:	e0bffc17 	ldw	r2,-16(fp)
    dc54:	00000a06 	br	dc80 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    dc58:	000db5c0 	call	db5c <alt_get_errno>
    dc5c:	1007883a 	mov	r3,r2
    dc60:	00800344 	movi	r2,13
    dc64:	18800015 	stw	r2,0(r3)
    dc68:	00000406 	br	dc7c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    dc6c:	000db5c0 	call	db5c <alt_get_errno>
    dc70:	1007883a 	mov	r3,r2
    dc74:	00801444 	movi	r2,81
    dc78:	18800015 	stw	r2,0(r3)
  }
  return -1;
    dc7c:	00bfffc4 	movi	r2,-1
}
    dc80:	e037883a 	mov	sp,fp
    dc84:	dfc00117 	ldw	ra,4(sp)
    dc88:	df000017 	ldw	fp,0(sp)
    dc8c:	dec00204 	addi	sp,sp,8
    dc90:	f800283a 	ret

0000dc94 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    dc94:	defffe04 	addi	sp,sp,-8
    dc98:	df000115 	stw	fp,4(sp)
    dc9c:	df000104 	addi	fp,sp,4
    dca0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    dca4:	e0bfff17 	ldw	r2,-4(fp)
    dca8:	108000d0 	cmplti	r2,r2,3
    dcac:	10000d1e 	bne	r2,zero,dce4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    dcb0:	008000b4 	movhi	r2,2
    dcb4:	10aada04 	addi	r2,r2,-21656
    dcb8:	e0ffff17 	ldw	r3,-4(fp)
    dcbc:	18c00324 	muli	r3,r3,12
    dcc0:	10c5883a 	add	r2,r2,r3
    dcc4:	10800204 	addi	r2,r2,8
    dcc8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    dccc:	008000b4 	movhi	r2,2
    dcd0:	10aada04 	addi	r2,r2,-21656
    dcd4:	e0ffff17 	ldw	r3,-4(fp)
    dcd8:	18c00324 	muli	r3,r3,12
    dcdc:	10c5883a 	add	r2,r2,r3
    dce0:	10000015 	stw	zero,0(r2)
  }
}
    dce4:	0001883a 	nop
    dce8:	e037883a 	mov	sp,fp
    dcec:	df000017 	ldw	fp,0(sp)
    dcf0:	dec00104 	addi	sp,sp,4
    dcf4:	f800283a 	ret

0000dcf8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    dcf8:	defff904 	addi	sp,sp,-28
    dcfc:	df000615 	stw	fp,24(sp)
    dd00:	df000604 	addi	fp,sp,24
    dd04:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dd08:	0005303a 	rdctl	r2,status
    dd0c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dd10:	e0fffe17 	ldw	r3,-8(fp)
    dd14:	00bfff84 	movi	r2,-2
    dd18:	1884703a 	and	r2,r3,r2
    dd1c:	1001703a 	wrctl	status,r2
  
  return context;
    dd20:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    dd24:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    dd28:	d0a00e17 	ldw	r2,-32712(gp)
    dd2c:	10c000c4 	addi	r3,r2,3
    dd30:	00bfff04 	movi	r2,-4
    dd34:	1884703a 	and	r2,r3,r2
    dd38:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    dd3c:	d0e00e17 	ldw	r3,-32712(gp)
    dd40:	e0bfff17 	ldw	r2,-4(fp)
    dd44:	1887883a 	add	r3,r3,r2
    dd48:	00810034 	movhi	r2,1024
    dd4c:	10800004 	addi	r2,r2,0
    dd50:	10c0062e 	bgeu	r2,r3,dd6c <sbrk+0x74>
    dd54:	e0bffb17 	ldw	r2,-20(fp)
    dd58:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dd5c:	e0bffa17 	ldw	r2,-24(fp)
    dd60:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    dd64:	00bfffc4 	movi	r2,-1
    dd68:	00000b06 	br	dd98 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    dd6c:	d0a00e17 	ldw	r2,-32712(gp)
    dd70:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    dd74:	d0e00e17 	ldw	r3,-32712(gp)
    dd78:	e0bfff17 	ldw	r2,-4(fp)
    dd7c:	1885883a 	add	r2,r3,r2
    dd80:	d0a00e15 	stw	r2,-32712(gp)
    dd84:	e0bffb17 	ldw	r2,-20(fp)
    dd88:	e0bffc15 	stw	r2,-16(fp)
    dd8c:	e0bffc17 	ldw	r2,-16(fp)
    dd90:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    dd94:	e0bffd17 	ldw	r2,-12(fp)
} 
    dd98:	e037883a 	mov	sp,fp
    dd9c:	df000017 	ldw	fp,0(sp)
    dda0:	dec00104 	addi	sp,sp,4
    dda4:	f800283a 	ret

0000dda8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dda8:	defffe04 	addi	sp,sp,-8
    ddac:	dfc00115 	stw	ra,4(sp)
    ddb0:	df000015 	stw	fp,0(sp)
    ddb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ddb8:	d0a00d17 	ldw	r2,-32716(gp)
    ddbc:	10000326 	beq	r2,zero,ddcc <alt_get_errno+0x24>
    ddc0:	d0a00d17 	ldw	r2,-32716(gp)
    ddc4:	103ee83a 	callr	r2
    ddc8:	00000106 	br	ddd0 <alt_get_errno+0x28>
    ddcc:	d0a7e804 	addi	r2,gp,-24672
}
    ddd0:	e037883a 	mov	sp,fp
    ddd4:	dfc00117 	ldw	ra,4(sp)
    ddd8:	df000017 	ldw	fp,0(sp)
    dddc:	dec00204 	addi	sp,sp,8
    dde0:	f800283a 	ret

0000dde4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    dde4:	defff904 	addi	sp,sp,-28
    dde8:	dfc00615 	stw	ra,24(sp)
    ddec:	df000515 	stw	fp,20(sp)
    ddf0:	df000504 	addi	fp,sp,20
    ddf4:	e13ffd15 	stw	r4,-12(fp)
    ddf8:	e17ffe15 	stw	r5,-8(fp)
    ddfc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    de00:	e0bffd17 	ldw	r2,-12(fp)
    de04:	10000616 	blt	r2,zero,de20 <write+0x3c>
    de08:	e0bffd17 	ldw	r2,-12(fp)
    de0c:	10c00324 	muli	r3,r2,12
    de10:	008000b4 	movhi	r2,2
    de14:	10aada04 	addi	r2,r2,-21656
    de18:	1885883a 	add	r2,r3,r2
    de1c:	00000106 	br	de24 <write+0x40>
    de20:	0005883a 	mov	r2,zero
    de24:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    de28:	e0bffb17 	ldw	r2,-20(fp)
    de2c:	10002126 	beq	r2,zero,deb4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    de30:	e0bffb17 	ldw	r2,-20(fp)
    de34:	10800217 	ldw	r2,8(r2)
    de38:	108000cc 	andi	r2,r2,3
    de3c:	10001826 	beq	r2,zero,dea0 <write+0xbc>
    de40:	e0bffb17 	ldw	r2,-20(fp)
    de44:	10800017 	ldw	r2,0(r2)
    de48:	10800617 	ldw	r2,24(r2)
    de4c:	10001426 	beq	r2,zero,dea0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    de50:	e0bffb17 	ldw	r2,-20(fp)
    de54:	10800017 	ldw	r2,0(r2)
    de58:	10800617 	ldw	r2,24(r2)
    de5c:	e0ffff17 	ldw	r3,-4(fp)
    de60:	180d883a 	mov	r6,r3
    de64:	e17ffe17 	ldw	r5,-8(fp)
    de68:	e13ffb17 	ldw	r4,-20(fp)
    de6c:	103ee83a 	callr	r2
    de70:	e0bffc15 	stw	r2,-16(fp)
    de74:	e0bffc17 	ldw	r2,-16(fp)
    de78:	1000070e 	bge	r2,zero,de98 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    de7c:	000dda80 	call	dda8 <alt_get_errno>
    de80:	1007883a 	mov	r3,r2
    de84:	e0bffc17 	ldw	r2,-16(fp)
    de88:	0085c83a 	sub	r2,zero,r2
    de8c:	18800015 	stw	r2,0(r3)
        return -1;
    de90:	00bfffc4 	movi	r2,-1
    de94:	00000c06 	br	dec8 <write+0xe4>
      }
      return rval;
    de98:	e0bffc17 	ldw	r2,-16(fp)
    de9c:	00000a06 	br	dec8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    dea0:	000dda80 	call	dda8 <alt_get_errno>
    dea4:	1007883a 	mov	r3,r2
    dea8:	00800344 	movi	r2,13
    deac:	18800015 	stw	r2,0(r3)
    deb0:	00000406 	br	dec4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    deb4:	000dda80 	call	dda8 <alt_get_errno>
    deb8:	1007883a 	mov	r3,r2
    debc:	00801444 	movi	r2,81
    dec0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    dec4:	00bfffc4 	movi	r2,-1
}
    dec8:	e037883a 	mov	sp,fp
    decc:	dfc00117 	ldw	ra,4(sp)
    ded0:	df000017 	ldw	fp,0(sp)
    ded4:	dec00204 	addi	sp,sp,8
    ded8:	f800283a 	ret

0000dedc <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    dedc:	deffde04 	addi	sp,sp,-136
    dee0:	dfc02115 	stw	ra,132(sp)
    dee4:	df002015 	stw	fp,128(sp)
    dee8:	df002004 	addi	fp,sp,128
    deec:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    def0:	e0bfe104 	addi	r2,fp,-124
    def4:	100b883a 	mov	r5,r2
    def8:	01003fc4 	movi	r4,255
    defc:	00152a40 	call	152a4 <OSTaskQuery>
    df00:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    df04:	e0bffe83 	ldbu	r2,-6(fp)
    df08:	10803fcc 	andi	r2,r2,255
    df0c:	10001e1e 	bne	r2,zero,df88 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
    df10:	e0bfee03 	ldbu	r2,-72(fp)
    df14:	10803fcc 	andi	r2,r2,255
    df18:	e0bfe015 	stw	r2,-128(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    df1c:	d0a7ee17 	ldw	r2,-24648(gp)
    df20:	e0fffd04 	addi	r3,fp,-12
    df24:	180b883a 	mov	r5,r3
    df28:	1009883a 	mov	r4,r2
    df2c:	0013abc0 	call	13abc <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    df30:	e0bffe43 	ldbu	r2,-7(fp)
    df34:	10803fcc 	andi	r2,r2,255
    df38:	10000726 	beq	r2,zero,df58 <__env_lock+0x7c>
    df3c:	d0a00f17 	ldw	r2,-32708(gp)
    df40:	e0ffe017 	ldw	r3,-128(fp)
    df44:	1880041e 	bne	r3,r2,df58 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
    df48:	d0a7ed17 	ldw	r2,-24652(gp)
    df4c:	10800044 	addi	r2,r2,1
    df50:	d0a7ed15 	stw	r2,-24652(gp)
    df54:	00000a06 	br	df80 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    df58:	d0a7ee17 	ldw	r2,-24648(gp)
    df5c:	e0fffe84 	addi	r3,fp,-6
    df60:	180d883a 	mov	r6,r3
    df64:	000b883a 	mov	r5,zero
    df68:	1009883a 	mov	r4,r2
    df6c:	00136340 	call	13634 <OSSemPend>
    locks  = 1;
    df70:	00800044 	movi	r2,1
    df74:	d0a7ed15 	stw	r2,-24652(gp)
    lockid = id;
    df78:	e0bfe017 	ldw	r2,-128(fp)
    df7c:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    df80:	0001883a 	nop
    df84:	00000106 	br	df8c <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    df88:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    df8c:	e037883a 	mov	sp,fp
    df90:	dfc00117 	ldw	ra,4(sp)
    df94:	df000017 	ldw	fp,0(sp)
    df98:	dec00204 	addi	sp,sp,8
    df9c:	f800283a 	ret

0000dfa0 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    dfa0:	defffd04 	addi	sp,sp,-12
    dfa4:	dfc00215 	stw	ra,8(sp)
    dfa8:	df000115 	stw	fp,4(sp)
    dfac:	df000104 	addi	fp,sp,4
    dfb0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    dfb4:	d0a7ed17 	ldw	r2,-24652(gp)
    dfb8:	10000b26 	beq	r2,zero,dfe8 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    dfbc:	d0a7ed17 	ldw	r2,-24652(gp)
    dfc0:	10bfffc4 	addi	r2,r2,-1
    dfc4:	d0a7ed15 	stw	r2,-24652(gp)
    dfc8:	d0a7ed17 	ldw	r2,-24652(gp)
    dfcc:	1000071e 	bne	r2,zero,dfec <__env_unlock+0x4c>
  {
    lockid = -1;
    dfd0:	00bfffc4 	movi	r2,-1
    dfd4:	d0a00f15 	stw	r2,-32708(gp)
    OSSemPost( alt_envsem );
    dfd8:	d0a7ee17 	ldw	r2,-24648(gp)
    dfdc:	1009883a 	mov	r4,r2
    dfe0:	00139ac0 	call	139ac <OSSemPost>
    dfe4:	00000106 	br	dfec <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
    dfe8:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    dfec:	e037883a 	mov	sp,fp
    dff0:	dfc00117 	ldw	ra,4(sp)
    dff4:	df000017 	ldw	fp,0(sp)
    dff8:	dec00204 	addi	sp,sp,8
    dffc:	f800283a 	ret

0000e000 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    e000:	deffda04 	addi	sp,sp,-152
    e004:	dfc02515 	stw	ra,148(sp)
    e008:	df002415 	stw	fp,144(sp)
    e00c:	df002404 	addi	fp,sp,144
    e010:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e014:	e03fdc15 	stw	zero,-144(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    e018:	d0a7f143 	ldbu	r2,-24635(gp)
    e01c:	10803fcc 	andi	r2,r2,255
    e020:	10800060 	cmpeqi	r2,r2,1
    e024:	10003626 	beq	r2,zero,e100 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    e028:	e0bfe104 	addi	r2,fp,-124
    e02c:	100b883a 	mov	r5,r2
    e030:	01003fc4 	movi	r4,255
    e034:	00152a40 	call	152a4 <OSTaskQuery>
    e038:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    e03c:	e0bffe83 	ldbu	r2,-6(fp)
    e040:	10803fcc 	andi	r2,r2,255
    e044:	1000301e 	bne	r2,zero,e108 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
    e048:	e0bfee03 	ldbu	r2,-72(fp)
    e04c:	10803fcc 	andi	r2,r2,255
    e050:	e0bfdd15 	stw	r2,-140(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    e054:	d0a7f017 	ldw	r2,-24640(gp)
    e058:	e0fffd04 	addi	r3,fp,-12
    e05c:	180b883a 	mov	r5,r3
    e060:	1009883a 	mov	r4,r2
    e064:	0013abc0 	call	13abc <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e068:	0005303a 	rdctl	r2,status
    e06c:	e0bfe015 	stw	r2,-128(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e070:	e0ffe017 	ldw	r3,-128(fp)
    e074:	00bfff84 	movi	r2,-2
    e078:	1884703a 	and	r2,r3,r2
    e07c:	1001703a 	wrctl	status,r2
  
  return context;
    e080:	e0bfe017 	ldw	r2,-128(fp)
  
  OS_ENTER_CRITICAL();
    e084:	e0bfdc15 	stw	r2,-144(fp)

  if( !semdata.OSCnt && id == lockid ) 
    e088:	e0bffd0b 	ldhu	r2,-12(fp)
    e08c:	10bfffcc 	andi	r2,r2,65535
    e090:	10000b1e 	bne	r2,zero,e0c0 <__malloc_lock+0xc0>
    e094:	d0a01017 	ldw	r2,-32704(gp)
    e098:	e0ffdd17 	ldw	r3,-140(fp)
    e09c:	1880081e 	bne	r3,r2,e0c0 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
    e0a0:	d0a7ef17 	ldw	r2,-24644(gp)
    e0a4:	10800044 	addi	r2,r2,1
    e0a8:	d0a7ef15 	stw	r2,-24644(gp)
    e0ac:	e0bfdc17 	ldw	r2,-144(fp)
    e0b0:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e0b4:	e0bfde17 	ldw	r2,-136(fp)
    e0b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    e0bc:	00000e06 	br	e0f8 <__malloc_lock+0xf8>
    e0c0:	e0bfdc17 	ldw	r2,-144(fp)
    e0c4:	e0bfdf15 	stw	r2,-132(fp)
    e0c8:	e0bfdf17 	ldw	r2,-132(fp)
    e0cc:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    e0d0:	d0a7f017 	ldw	r2,-24640(gp)
    e0d4:	e0fffe84 	addi	r3,fp,-6
    e0d8:	180d883a 	mov	r6,r3
    e0dc:	000b883a 	mov	r5,zero
    e0e0:	1009883a 	mov	r4,r2
    e0e4:	00136340 	call	13634 <OSSemPend>
    locks  = 1;
    e0e8:	00800044 	movi	r2,1
    e0ec:	d0a7ef15 	stw	r2,-24644(gp)
    lockid = id;
    e0f0:	e0bfdd17 	ldw	r2,-140(fp)
    e0f4:	d0a01015 	stw	r2,-32704(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    e0f8:	0001883a 	nop
    e0fc:	00000306 	br	e10c <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
    e100:	0001883a 	nop
    e104:	00000106 	br	e10c <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    e108:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    e10c:	e037883a 	mov	sp,fp
    e110:	dfc00117 	ldw	ra,4(sp)
    e114:	df000017 	ldw	fp,0(sp)
    e118:	dec00204 	addi	sp,sp,8
    e11c:	f800283a 	ret

0000e120 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    e120:	defff804 	addi	sp,sp,-32
    e124:	dfc00715 	stw	ra,28(sp)
    e128:	df000615 	stw	fp,24(sp)
    e12c:	df000604 	addi	fp,sp,24
    e130:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e134:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    e138:	d0a7f143 	ldbu	r2,-24635(gp)
    e13c:	10803fcc 	andi	r2,r2,255
    e140:	10800060 	cmpeqi	r2,r2,1
    e144:	10002326 	beq	r2,zero,e1d4 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e148:	0005303a 	rdctl	r2,status
    e14c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e150:	e0fffe17 	ldw	r3,-8(fp)
    e154:	00bfff84 	movi	r2,-2
    e158:	1884703a 	and	r2,r3,r2
    e15c:	1001703a 	wrctl	status,r2
  
  return context;
    e160:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
    e164:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    e168:	d0a7ef17 	ldw	r2,-24644(gp)
    e16c:	1000051e 	bne	r2,zero,e184 <__malloc_unlock+0x64>
    e170:	e0bffa17 	ldw	r2,-24(fp)
    e174:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e178:	e0bffb17 	ldw	r2,-20(fp)
    e17c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    e180:	00001506 	br	e1d8 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    e184:	d0a7ef17 	ldw	r2,-24644(gp)
    e188:	10bfffc4 	addi	r2,r2,-1
    e18c:	d0a7ef15 	stw	r2,-24644(gp)
    e190:	d0a7ef17 	ldw	r2,-24644(gp)
    e194:	10000a1e 	bne	r2,zero,e1c0 <__malloc_unlock+0xa0>
  {
    lockid = -1;
    e198:	00bfffc4 	movi	r2,-1
    e19c:	d0a01015 	stw	r2,-32704(gp)
    e1a0:	e0bffa17 	ldw	r2,-24(fp)
    e1a4:	e0bffc15 	stw	r2,-16(fp)
    e1a8:	e0bffc17 	ldw	r2,-16(fp)
    e1ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    e1b0:	d0a7f017 	ldw	r2,-24640(gp)
    e1b4:	1009883a 	mov	r4,r2
    e1b8:	00139ac0 	call	139ac <OSSemPost>
    e1bc:	00000606 	br	e1d8 <__malloc_unlock+0xb8>
    e1c0:	e0bffa17 	ldw	r2,-24(fp)
    e1c4:	e0bffd15 	stw	r2,-12(fp)
    e1c8:	e0bffd17 	ldw	r2,-12(fp)
    e1cc:	1001703a 	wrctl	status,r2
    e1d0:	00000106 	br	e1d8 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
    e1d4:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    e1d8:	e037883a 	mov	sp,fp
    e1dc:	dfc00117 	ldw	ra,4(sp)
    e1e0:	df000017 	ldw	fp,0(sp)
    e1e4:	dec00204 	addi	sp,sp,8
    e1e8:	f800283a 	ret

0000e1ec <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    e1ec:	defff704 	addi	sp,sp,-36
    e1f0:	dfc00815 	stw	ra,32(sp)
    e1f4:	df000715 	stw	fp,28(sp)
    e1f8:	df000704 	addi	fp,sp,28
    e1fc:	e13ffd15 	stw	r4,-12(fp)
    e200:	e17ffe15 	stw	r5,-8(fp)
    e204:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e208:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    e20c:	e0bfff17 	ldw	r2,-4(fp)
    e210:	1000021e 	bne	r2,zero,e21c <OSEventNameGet+0x30>
        return (0);
    e214:	0005883a 	mov	r2,zero
    e218:	00003706 	br	e2f8 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    e21c:	e0bffd17 	ldw	r2,-12(fp)
    e220:	1000051e 	bne	r2,zero,e238 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    e224:	e0bfff17 	ldw	r2,-4(fp)
    e228:	00c00104 	movi	r3,4
    e22c:	10c00005 	stb	r3,0(r2)
        return (0);
    e230:	0005883a 	mov	r2,zero
    e234:	00003006 	br	e2f8 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    e238:	e0bffe17 	ldw	r2,-8(fp)
    e23c:	1000051e 	bne	r2,zero,e254 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    e240:	e0bfff17 	ldw	r2,-4(fp)
    e244:	00c00304 	movi	r3,12
    e248:	10c00005 	stb	r3,0(r2)
        return (0);
    e24c:	0005883a 	mov	r2,zero
    e250:	00002906 	br	e2f8 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    e254:	d0a7ff03 	ldbu	r2,-24580(gp)
    e258:	10803fcc 	andi	r2,r2,255
    e25c:	10000526 	beq	r2,zero,e274 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    e260:	e0bfff17 	ldw	r2,-4(fp)
    e264:	00c00444 	movi	r3,17
    e268:	10c00005 	stb	r3,0(r2)
        return (0);
    e26c:	0005883a 	mov	r2,zero
    e270:	00002106 	br	e2f8 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
    e274:	e0bffd17 	ldw	r2,-12(fp)
    e278:	10800003 	ldbu	r2,0(r2)
    e27c:	10803fcc 	andi	r2,r2,255
    e280:	10bfffc4 	addi	r2,r2,-1
    e284:	10800128 	cmpgeui	r2,r2,4
    e288:	10000526 	beq	r2,zero,e2a0 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    e28c:	e0bfff17 	ldw	r2,-4(fp)
    e290:	00c00044 	movi	r3,1
    e294:	10c00005 	stb	r3,0(r2)
             return (0);
    e298:	0005883a 	mov	r2,zero
    e29c:	00001606 	br	e2f8 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    e2a0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e2a4:	0005303a 	rdctl	r2,status
    e2a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e2ac:	e0fffb17 	ldw	r3,-20(fp)
    e2b0:	00bfff84 	movi	r2,-2
    e2b4:	1884703a 	and	r2,r3,r2
    e2b8:	1001703a 	wrctl	status,r2
  
  return context;
    e2bc:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    e2c0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    e2c4:	e0bffd17 	ldw	r2,-12(fp)
    e2c8:	10800384 	addi	r2,r2,14
    e2cc:	100b883a 	mov	r5,r2
    e2d0:	e13ffe17 	ldw	r4,-8(fp)
    e2d4:	000fc700 	call	fc70 <OS_StrCopy>
    e2d8:	e0bffa05 	stb	r2,-24(fp)
    e2dc:	e0bff917 	ldw	r2,-28(fp)
    e2e0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e2e4:	e0bffc17 	ldw	r2,-16(fp)
    e2e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    e2ec:	e0bfff17 	ldw	r2,-4(fp)
    e2f0:	10000005 	stb	zero,0(r2)
    return (len);
    e2f4:	e0bffa03 	ldbu	r2,-24(fp)
}
    e2f8:	e037883a 	mov	sp,fp
    e2fc:	dfc00117 	ldw	ra,4(sp)
    e300:	df000017 	ldw	fp,0(sp)
    e304:	dec00204 	addi	sp,sp,8
    e308:	f800283a 	ret

0000e30c <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    e30c:	defff604 	addi	sp,sp,-40
    e310:	dfc00915 	stw	ra,36(sp)
    e314:	df000815 	stw	fp,32(sp)
    e318:	df000804 	addi	fp,sp,32
    e31c:	e13ffd15 	stw	r4,-12(fp)
    e320:	e17ffe15 	stw	r5,-8(fp)
    e324:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e328:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    e32c:	e0bfff17 	ldw	r2,-4(fp)
    e330:	10004026 	beq	r2,zero,e434 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    e334:	e0bffd17 	ldw	r2,-12(fp)
    e338:	1000041e 	bne	r2,zero,e34c <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    e33c:	e0bfff17 	ldw	r2,-4(fp)
    e340:	00c00104 	movi	r3,4
    e344:	10c00005 	stb	r3,0(r2)
        return;
    e348:	00003b06 	br	e438 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    e34c:	e0bffe17 	ldw	r2,-8(fp)
    e350:	1000041e 	bne	r2,zero,e364 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    e354:	e0bfff17 	ldw	r2,-4(fp)
    e358:	00c00304 	movi	r3,12
    e35c:	10c00005 	stb	r3,0(r2)
        return;
    e360:	00003506 	br	e438 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    e364:	d0a7ff03 	ldbu	r2,-24580(gp)
    e368:	10803fcc 	andi	r2,r2,255
    e36c:	10000426 	beq	r2,zero,e380 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    e370:	e0bfff17 	ldw	r2,-4(fp)
    e374:	00c00484 	movi	r3,18
    e378:	10c00005 	stb	r3,0(r2)
        return;
    e37c:	00002e06 	br	e438 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
    e380:	e0bffd17 	ldw	r2,-12(fp)
    e384:	10800003 	ldbu	r2,0(r2)
    e388:	10803fcc 	andi	r2,r2,255
    e38c:	10bfffc4 	addi	r2,r2,-1
    e390:	10800128 	cmpgeui	r2,r2,4
    e394:	10000426 	beq	r2,zero,e3a8 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    e398:	e0bfff17 	ldw	r2,-4(fp)
    e39c:	00c00044 	movi	r3,1
    e3a0:	10c00005 	stb	r3,0(r2)
             return;
    e3a4:	00002406 	br	e438 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    e3a8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e3ac:	0005303a 	rdctl	r2,status
    e3b0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e3b4:	e0fffc17 	ldw	r3,-16(fp)
    e3b8:	00bfff84 	movi	r2,-2
    e3bc:	1884703a 	and	r2,r3,r2
    e3c0:	1001703a 	wrctl	status,r2
  
  return context;
    e3c4:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    e3c8:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    e3cc:	e13ffe17 	ldw	r4,-8(fp)
    e3d0:	000fce40 	call	fce4 <OS_StrLen>
    e3d4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    e3d8:	e0bffa03 	ldbu	r2,-24(fp)
    e3dc:	10800830 	cmpltui	r2,r2,32
    e3e0:	1000081e 	bne	r2,zero,e404 <OSEventNameSet+0xf8>
    e3e4:	e0bff817 	ldw	r2,-32(fp)
    e3e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e3ec:	e0bff917 	ldw	r2,-28(fp)
    e3f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    e3f4:	e0bfff17 	ldw	r2,-4(fp)
    e3f8:	00c002c4 	movi	r3,11
    e3fc:	10c00005 	stb	r3,0(r2)
        return;
    e400:	00000d06 	br	e438 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    e404:	e0bffd17 	ldw	r2,-12(fp)
    e408:	10800384 	addi	r2,r2,14
    e40c:	e17ffe17 	ldw	r5,-8(fp)
    e410:	1009883a 	mov	r4,r2
    e414:	000fc700 	call	fc70 <OS_StrCopy>
    e418:	e0bff817 	ldw	r2,-32(fp)
    e41c:	e0bffb15 	stw	r2,-20(fp)
    e420:	e0bffb17 	ldw	r2,-20(fp)
    e424:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    e428:	e0bfff17 	ldw	r2,-4(fp)
    e42c:	10000005 	stb	zero,0(r2)
    e430:	00000106 	br	e438 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    e434:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    e438:	e037883a 	mov	sp,fp
    e43c:	dfc00117 	ldw	ra,4(sp)
    e440:	df000017 	ldw	fp,0(sp)
    e444:	dec00204 	addi	sp,sp,8
    e448:	f800283a 	ret

0000e44c <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    e44c:	deffed04 	addi	sp,sp,-76
    e450:	dfc01215 	stw	ra,72(sp)
    e454:	df001115 	stw	fp,68(sp)
    e458:	df001104 	addi	fp,sp,68
    e45c:	e13ffc15 	stw	r4,-16(fp)
    e460:	e17ffd15 	stw	r5,-12(fp)
    e464:	e1bffe15 	stw	r6,-8(fp)
    e468:	3805883a 	mov	r2,r7
    e46c:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    e470:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    e474:	e0800217 	ldw	r2,8(fp)
    e478:	1000021e 	bne	r2,zero,e484 <OSEventPendMulti+0x38>
        return (0);
    e47c:	0005883a 	mov	r2,zero
    e480:	00017106 	br	ea48 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    e484:	e0bffc17 	ldw	r2,-16(fp)
    e488:	1000051e 	bne	r2,zero,e4a0 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    e48c:	e0800217 	ldw	r2,8(fp)
    e490:	00c00104 	movi	r3,4
    e494:	10c00005 	stb	r3,0(r2)
        return (0);
    e498:	0005883a 	mov	r2,zero
    e49c:	00016a06 	br	ea48 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    e4a0:	e0bffd17 	ldw	r2,-12(fp)
    e4a4:	1000051e 	bne	r2,zero,e4bc <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    e4a8:	e0800217 	ldw	r2,8(fp)
    e4ac:	00c00104 	movi	r3,4
    e4b0:	10c00005 	stb	r3,0(r2)
        return (0);
    e4b4:	0005883a 	mov	r2,zero
    e4b8:	00016306 	br	ea48 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    e4bc:	e0bffe17 	ldw	r2,-8(fp)
    e4c0:	1000051e 	bne	r2,zero,e4d8 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    e4c4:	e0800217 	ldw	r2,8(fp)
    e4c8:	00c00104 	movi	r3,4
    e4cc:	10c00005 	stb	r3,0(r2)
        return (0);
    e4d0:	0005883a 	mov	r2,zero
    e4d4:	00015c06 	br	ea48 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    e4d8:	e0bffd17 	ldw	r2,-12(fp)
    e4dc:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    e4e0:	e0bffc17 	ldw	r2,-16(fp)
    e4e4:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    e4e8:	e0bfef17 	ldw	r2,-68(fp)
    e4ec:	10800017 	ldw	r2,0(r2)
    e4f0:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    e4f4:	00001906 	br	e55c <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    e4f8:	e0bff017 	ldw	r2,-64(fp)
    e4fc:	10800003 	ldbu	r2,0(r2)
    e500:	10803fcc 	andi	r2,r2,255
    e504:	10c000a0 	cmpeqi	r3,r2,2
    e508:	1800091e 	bne	r3,zero,e530 <OSEventPendMulti+0xe4>
    e50c:	10c000e0 	cmpeqi	r3,r2,3
    e510:	1800091e 	bne	r3,zero,e538 <OSEventPendMulti+0xec>
    e514:	10800060 	cmpeqi	r2,r2,1
    e518:	1000091e 	bne	r2,zero,e540 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    e51c:	e0800217 	ldw	r2,8(fp)
    e520:	00c00044 	movi	r3,1
    e524:	10c00005 	stb	r3,0(r2)
                 return (0);
    e528:	0005883a 	mov	r2,zero
    e52c:	00014606 	br	ea48 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    e530:	0001883a 	nop
    e534:	00000306 	br	e544 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    e538:	0001883a 	nop
    e53c:	00000106 	br	e544 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    e540:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    e544:	e0bfef17 	ldw	r2,-68(fp)
    e548:	10800104 	addi	r2,r2,4
    e54c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    e550:	e0bfef17 	ldw	r2,-68(fp)
    e554:	10800017 	ldw	r2,0(r2)
    e558:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    e55c:	e0bff017 	ldw	r2,-64(fp)
    e560:	103fe51e 	bne	r2,zero,e4f8 <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    e564:	d0a7ff03 	ldbu	r2,-24580(gp)
    e568:	10803fcc 	andi	r2,r2,255
    e56c:	10000526 	beq	r2,zero,e584 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    e570:	e0800217 	ldw	r2,8(fp)
    e574:	00c00084 	movi	r3,2
    e578:	10c00005 	stb	r3,0(r2)
        return (0);
    e57c:	0005883a 	mov	r2,zero
    e580:	00013106 	br	ea48 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    e584:	d0a7f103 	ldbu	r2,-24636(gp)
    e588:	10803fcc 	andi	r2,r2,255
    e58c:	10000526 	beq	r2,zero,e5a4 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    e590:	e0800217 	ldw	r2,8(fp)
    e594:	00c00344 	movi	r3,13
    e598:	10c00005 	stb	r3,0(r2)
        return (0);
    e59c:	0005883a 	mov	r2,zero
    e5a0:	00012906 	br	ea48 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e5a4:	0005303a 	rdctl	r2,status
    e5a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e5ac:	e0fffb17 	ldw	r3,-20(fp)
    e5b0:	00bfff84 	movi	r2,-2
    e5b4:	1884703a 	and	r2,r3,r2
    e5b8:	1001703a 	wrctl	status,r2
  
  return context;
    e5bc:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    e5c0:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    e5c4:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    e5c8:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    e5cc:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    e5d0:	e0bffc17 	ldw	r2,-16(fp)
    e5d4:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    e5d8:	e0bfef17 	ldw	r2,-68(fp)
    e5dc:	10800017 	ldw	r2,0(r2)
    e5e0:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    e5e4:	00008106 	br	e7ec <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
    e5e8:	e0bff017 	ldw	r2,-64(fp)
    e5ec:	10800003 	ldbu	r2,0(r2)
    e5f0:	10803fcc 	andi	r2,r2,255
    e5f4:	10c000a0 	cmpeqi	r3,r2,2
    e5f8:	18003c1e 	bne	r3,zero,e6ec <OSEventPendMulti+0x2a0>
    e5fc:	10c000e0 	cmpeqi	r3,r2,3
    e600:	1800031e 	bne	r3,zero,e610 <OSEventPendMulti+0x1c4>
    e604:	10800060 	cmpeqi	r2,r2,1
    e608:	10001e1e 	bne	r2,zero,e684 <OSEventPendMulti+0x238>
    e60c:	00006606 	br	e7a8 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    e610:	e0bff017 	ldw	r2,-64(fp)
    e614:	1080020b 	ldhu	r2,8(r2)
    e618:	10bfffcc 	andi	r2,r2,65535
    e61c:	10001526 	beq	r2,zero,e674 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    e620:	e0bff017 	ldw	r2,-64(fp)
    e624:	1080020b 	ldhu	r2,8(r2)
    e628:	10bfffc4 	addi	r2,r2,-1
    e62c:	1007883a 	mov	r3,r2
    e630:	e0bff017 	ldw	r2,-64(fp)
    e634:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    e638:	e0bffd17 	ldw	r2,-12(fp)
    e63c:	10c00104 	addi	r3,r2,4
    e640:	e0fffd15 	stw	r3,-12(fp)
    e644:	e0fff017 	ldw	r3,-64(fp)
    e648:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    e64c:	00800044 	movi	r2,1
    e650:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    e654:	e0bffe17 	ldw	r2,-8(fp)
    e658:	10c00104 	addi	r3,r2,4
    e65c:	e0fffe15 	stw	r3,-8(fp)
    e660:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    e664:	e0bff18b 	ldhu	r2,-58(fp)
    e668:	10800044 	addi	r2,r2,1
    e66c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    e670:	00005806 	br	e7d4 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    e674:	e0bff203 	ldbu	r2,-56(fp)
    e678:	10800054 	ori	r2,r2,1
    e67c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    e680:	00005406 	br	e7d4 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    e684:	e0bff017 	ldw	r2,-64(fp)
    e688:	10800117 	ldw	r2,4(r2)
    e68c:	10001326 	beq	r2,zero,e6dc <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    e690:	e0bffe17 	ldw	r2,-8(fp)
    e694:	10c00104 	addi	r3,r2,4
    e698:	e0fffe15 	stw	r3,-8(fp)
    e69c:	e0fff017 	ldw	r3,-64(fp)
    e6a0:	18c00117 	ldw	r3,4(r3)
    e6a4:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    e6a8:	e0bff017 	ldw	r2,-64(fp)
    e6ac:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    e6b0:	e0bffd17 	ldw	r2,-12(fp)
    e6b4:	10c00104 	addi	r3,r2,4
    e6b8:	e0fffd15 	stw	r3,-12(fp)
    e6bc:	e0fff017 	ldw	r3,-64(fp)
    e6c0:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    e6c4:	00800044 	movi	r2,1
    e6c8:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    e6cc:	e0bff18b 	ldhu	r2,-58(fp)
    e6d0:	10800044 	addi	r2,r2,1
    e6d4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    e6d8:	00003e06 	br	e7d4 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    e6dc:	e0bff203 	ldbu	r2,-56(fp)
    e6e0:	10800094 	ori	r2,r2,2
    e6e4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    e6e8:	00003a06 	br	e7d4 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    e6ec:	e0bff017 	ldw	r2,-64(fp)
    e6f0:	10800117 	ldw	r2,4(r2)
    e6f4:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    e6f8:	e0bff517 	ldw	r2,-44(fp)
    e6fc:	1080058b 	ldhu	r2,22(r2)
    e700:	10bfffcc 	andi	r2,r2,65535
    e704:	10002426 	beq	r2,zero,e798 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    e708:	e0bffe17 	ldw	r2,-8(fp)
    e70c:	10c00104 	addi	r3,r2,4
    e710:	e0fffe15 	stw	r3,-8(fp)
    e714:	e0fff517 	ldw	r3,-44(fp)
    e718:	18c00417 	ldw	r3,16(r3)
    e71c:	19400104 	addi	r5,r3,4
    e720:	e13ff517 	ldw	r4,-44(fp)
    e724:	21400415 	stw	r5,16(r4)
    e728:	18c00017 	ldw	r3,0(r3)
    e72c:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    e730:	e0bff517 	ldw	r2,-44(fp)
    e734:	10c00417 	ldw	r3,16(r2)
    e738:	e0bff517 	ldw	r2,-44(fp)
    e73c:	10800217 	ldw	r2,8(r2)
    e740:	1880041e 	bne	r3,r2,e754 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    e744:	e0bff517 	ldw	r2,-44(fp)
    e748:	10c00117 	ldw	r3,4(r2)
    e74c:	e0bff517 	ldw	r2,-44(fp)
    e750:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    e754:	e0bff517 	ldw	r2,-44(fp)
    e758:	1080058b 	ldhu	r2,22(r2)
    e75c:	10bfffc4 	addi	r2,r2,-1
    e760:	1007883a 	mov	r3,r2
    e764:	e0bff517 	ldw	r2,-44(fp)
    e768:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    e76c:	e0bffd17 	ldw	r2,-12(fp)
    e770:	10c00104 	addi	r3,r2,4
    e774:	e0fffd15 	stw	r3,-12(fp)
    e778:	e0fff017 	ldw	r3,-64(fp)
    e77c:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    e780:	00800044 	movi	r2,1
    e784:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    e788:	e0bff18b 	ldhu	r2,-58(fp)
    e78c:	10800044 	addi	r2,r2,1
    e790:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    e794:	00000f06 	br	e7d4 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    e798:	e0bff203 	ldbu	r2,-56(fp)
    e79c:	10800114 	ori	r2,r2,4
    e7a0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    e7a4:	00000b06 	br	e7d4 <OSEventPendMulti+0x388>
    e7a8:	e0bff317 	ldw	r2,-52(fp)
    e7ac:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e7b0:	e0bff417 	ldw	r2,-48(fp)
    e7b4:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    e7b8:	e0bffd17 	ldw	r2,-12(fp)
    e7bc:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    e7c0:	e0800217 	ldw	r2,8(fp)
    e7c4:	00c00044 	movi	r3,1
    e7c8:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    e7cc:	e0bff18b 	ldhu	r2,-58(fp)
    e7d0:	00009d06 	br	ea48 <OSEventPendMulti+0x5fc>
        }
        pevents++;
    e7d4:	e0bfef17 	ldw	r2,-68(fp)
    e7d8:	10800104 	addi	r2,r2,4
    e7dc:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    e7e0:	e0bfef17 	ldw	r2,-68(fp)
    e7e4:	10800017 	ldw	r2,0(r2)
    e7e8:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    e7ec:	e0bff017 	ldw	r2,-64(fp)
    e7f0:	103f7d1e 	bne	r2,zero,e5e8 <OSEventPendMulti+0x19c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    e7f4:	e0bff103 	ldbu	r2,-60(fp)
    e7f8:	10800058 	cmpnei	r2,r2,1
    e7fc:	10000a1e 	bne	r2,zero,e828 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    e800:	e0bffd17 	ldw	r2,-12(fp)
    e804:	10000015 	stw	zero,0(r2)
    e808:	e0bff317 	ldw	r2,-52(fp)
    e80c:	e0bff615 	stw	r2,-40(fp)
    e810:	e0bff617 	ldw	r2,-40(fp)
    e814:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    e818:	e0800217 	ldw	r2,8(fp)
    e81c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    e820:	e0bff18b 	ldhu	r2,-58(fp)
    e824:	00008806 	br	ea48 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    e828:	d0a80017 	ldw	r2,-24576(gp)
    e82c:	d0e80017 	ldw	r3,-24576(gp)
    e830:	19000c83 	ldbu	r4,50(r3)
    e834:	e0fff203 	ldbu	r3,-56(fp)
    e838:	20c6b03a 	or	r3,r4,r3
    e83c:	1809883a 	mov	r4,r3
    e840:	00ffe004 	movi	r3,-128
    e844:	20c6b03a 	or	r3,r4,r3
    e848:	10c00c85 	stb	r3,50(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    e84c:	d0a80017 	ldw	r2,-24576(gp)
    e850:	10000cc5 	stb	zero,51(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    e854:	d0a80017 	ldw	r2,-24576(gp)
    e858:	e0ffff0b 	ldhu	r3,-4(fp)
    e85c:	10c00c0d 	sth	r3,48(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    e860:	e13ffc17 	ldw	r4,-16(fp)
    e864:	000f3880 	call	f388 <OS_EventTaskWaitMulti>
    e868:	e0bff317 	ldw	r2,-52(fp)
    e86c:	e0bff915 	stw	r2,-28(fp)
    e870:	e0bff917 	ldw	r2,-28(fp)
    e874:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    e878:	000fb2c0 	call	fb2c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e87c:	0005303a 	rdctl	r2,status
    e880:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e884:	e0fff717 	ldw	r3,-36(fp)
    e888:	00bfff84 	movi	r2,-2
    e88c:	1884703a 	and	r2,r3,r2
    e890:	1001703a 	wrctl	status,r2
  
  return context;
    e894:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
    e898:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    e89c:	d0a80017 	ldw	r2,-24576(gp)
    e8a0:	10800cc3 	ldbu	r2,51(r2)
    e8a4:	10803fcc 	andi	r2,r2,255
    e8a8:	10000226 	beq	r2,zero,e8b4 <OSEventPendMulti+0x468>
    e8ac:	108000a0 	cmpeqi	r2,r2,2
    e8b0:	10001826 	beq	r2,zero,e914 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    e8b4:	d0a80017 	ldw	r2,-24576(gp)
    e8b8:	10800717 	ldw	r2,28(r2)
    e8bc:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    e8c0:	e0bff017 	ldw	r2,-64(fp)
    e8c4:	10000b26 	beq	r2,zero,e8f4 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    e8c8:	e0bffd17 	ldw	r2,-12(fp)
    e8cc:	10c00104 	addi	r3,r2,4
    e8d0:	e0fffd15 	stw	r3,-12(fp)
    e8d4:	e0fff017 	ldw	r3,-64(fp)
    e8d8:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    e8dc:	e0bffd17 	ldw	r2,-12(fp)
    e8e0:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    e8e4:	e0bff18b 	ldhu	r2,-58(fp)
    e8e8:	10800044 	addi	r2,r2,1
    e8ec:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    e8f0:	00000d06 	br	e928 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    e8f4:	d0a80017 	ldw	r2,-24576(gp)
    e8f8:	00c00044 	movi	r3,1
    e8fc:	10c00cc5 	stb	r3,51(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    e900:	d0a80017 	ldw	r2,-24576(gp)
    e904:	e17ffc17 	ldw	r5,-16(fp)
    e908:	1009883a 	mov	r4,r2
    e90c:	000f5900 	call	f590 <OS_EventTaskRemoveMulti>
             }
			 break;
    e910:	00000506 	br	e928 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    e914:	d0a80017 	ldw	r2,-24576(gp)
    e918:	e17ffc17 	ldw	r5,-16(fp)
    e91c:	1009883a 	mov	r4,r2
    e920:	000f5900 	call	f590 <OS_EventTaskRemoveMulti>
             break;
    e924:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    e928:	d0a80017 	ldw	r2,-24576(gp)
    e92c:	10800cc3 	ldbu	r2,51(r2)
    e930:	10803fcc 	andi	r2,r2,255
    e934:	10000326 	beq	r2,zero,e944 <OSEventPendMulti+0x4f8>
    e938:	108000a0 	cmpeqi	r2,r2,2
    e93c:	1000231e 	bne	r2,zero,e9cc <OSEventPendMulti+0x580>
    e940:	00002a06 	br	e9ec <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    e944:	e0bff017 	ldw	r2,-64(fp)
    e948:	10800003 	ldbu	r2,0(r2)
    e94c:	10803fcc 	andi	r2,r2,255
    e950:	0080100e 	bge	zero,r2,e994 <OSEventPendMulti+0x548>
    e954:	10c000d0 	cmplti	r3,r2,3
    e958:	1800071e 	bne	r3,zero,e978 <OSEventPendMulti+0x52c>
    e95c:	108000e0 	cmpeqi	r2,r2,3
    e960:	10000c26 	beq	r2,zero,e994 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    e964:	e0bffe17 	ldw	r2,-8(fp)
    e968:	10c00104 	addi	r3,r2,4
    e96c:	e0fffe15 	stw	r3,-8(fp)
    e970:	10000015 	stw	zero,0(r2)
                      break;
    e974:	00001206 	br	e9c0 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    e978:	e0bffe17 	ldw	r2,-8(fp)
    e97c:	10c00104 	addi	r3,r2,4
    e980:	e0fffe15 	stw	r3,-8(fp)
    e984:	d0e80017 	ldw	r3,-24576(gp)
    e988:	18c00917 	ldw	r3,36(r3)
    e98c:	10c00015 	stw	r3,0(r2)
                      break;
    e990:	00000b06 	br	e9c0 <OSEventPendMulti+0x574>
    e994:	e0bff317 	ldw	r2,-52(fp)
    e998:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e99c:	e0bff817 	ldw	r2,-32(fp)
    e9a0:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    e9a4:	e0bffd17 	ldw	r2,-12(fp)
    e9a8:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    e9ac:	e0800217 	ldw	r2,8(fp)
    e9b0:	00c00044 	movi	r3,1
    e9b4:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    e9b8:	e0bff18b 	ldhu	r2,-58(fp)
    e9bc:	00002206 	br	ea48 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
    e9c0:	e0800217 	ldw	r2,8(fp)
    e9c4:	10000005 	stb	zero,0(r2)
             break;
    e9c8:	00001006 	br	ea0c <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    e9cc:	e0bffe17 	ldw	r2,-8(fp)
    e9d0:	10c00104 	addi	r3,r2,4
    e9d4:	e0fffe15 	stw	r3,-8(fp)
    e9d8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    e9dc:	e0800217 	ldw	r2,8(fp)
    e9e0:	00c00384 	movi	r3,14
    e9e4:	10c00005 	stb	r3,0(r2)
             break;
    e9e8:	00000806 	br	ea0c <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    e9ec:	e0bffe17 	ldw	r2,-8(fp)
    e9f0:	10c00104 	addi	r3,r2,4
    e9f4:	e0fffe15 	stw	r3,-8(fp)
    e9f8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    e9fc:	e0800217 	ldw	r2,8(fp)
    ea00:	00c00284 	movi	r3,10
    ea04:	10c00005 	stb	r3,0(r2)
             break;
    ea08:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    ea0c:	d0a80017 	ldw	r2,-24576(gp)
    ea10:	10000c85 	stb	zero,50(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    ea14:	d0a80017 	ldw	r2,-24576(gp)
    ea18:	10000cc5 	stb	zero,51(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    ea1c:	d0a80017 	ldw	r2,-24576(gp)
    ea20:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    ea24:	d0a80017 	ldw	r2,-24576(gp)
    ea28:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    ea2c:	d0a80017 	ldw	r2,-24576(gp)
    ea30:	10000915 	stw	zero,36(r2)
    ea34:	e0bff317 	ldw	r2,-52(fp)
    ea38:	e0bffa15 	stw	r2,-24(fp)
    ea3c:	e0bffa17 	ldw	r2,-24(fp)
    ea40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    ea44:	e0bff18b 	ldhu	r2,-58(fp)
}
    ea48:	e037883a 	mov	sp,fp
    ea4c:	dfc00117 	ldw	ra,4(sp)
    ea50:	df000017 	ldw	fp,0(sp)
    ea54:	dec00204 	addi	sp,sp,8
    ea58:	f800283a 	ret

0000ea5c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    ea5c:	defffe04 	addi	sp,sp,-8
    ea60:	dfc00115 	stw	ra,4(sp)
    ea64:	df000015 	stw	fp,0(sp)
    ea68:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    ea6c:	00191200 	call	19120 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    ea70:	000f7d80 	call	f7d8 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    ea74:	000f8200 	call	f820 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    ea78:	000f98c0 	call	f98c <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    ea7c:	000f6f80 	call	f6f8 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    ea80:	00117a00 	call	117a0 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    ea84:	001209c0 	call	1209c <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    ea88:	00131c40 	call	131c4 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    ea8c:	000f88c0 	call	f88c <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    ea90:	000f90c0 	call	f90c <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    ea94:	00191400 	call	19140 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    ea98:	00102100 	call	10210 <OSDebugInit>
#endif
}
    ea9c:	0001883a 	nop
    eaa0:	e037883a 	mov	sp,fp
    eaa4:	dfc00117 	ldw	ra,4(sp)
    eaa8:	df000017 	ldw	fp,0(sp)
    eaac:	dec00204 	addi	sp,sp,8
    eab0:	f800283a 	ret

0000eab4 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    eab4:	deffff04 	addi	sp,sp,-4
    eab8:	df000015 	stw	fp,0(sp)
    eabc:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
    eac0:	d0a7f143 	ldbu	r2,-24635(gp)
    eac4:	10803fcc 	andi	r2,r2,255
    eac8:	10800058 	cmpnei	r2,r2,1
    eacc:	1000071e 	bne	r2,zero,eaec <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
    ead0:	d0a7ff03 	ldbu	r2,-24580(gp)
    ead4:	10803fcc 	andi	r2,r2,255
    ead8:	10803fe0 	cmpeqi	r2,r2,255
    eadc:	1000031e 	bne	r2,zero,eaec <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    eae0:	d0a7ff03 	ldbu	r2,-24580(gp)
    eae4:	10800044 	addi	r2,r2,1
    eae8:	d0a7ff05 	stb	r2,-24580(gp)
        }
    }
}
    eaec:	0001883a 	nop
    eaf0:	e037883a 	mov	sp,fp
    eaf4:	df000017 	ldw	fp,0(sp)
    eaf8:	dec00104 	addi	sp,sp,4
    eafc:	f800283a 	ret

0000eb00 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    eb00:	defffb04 	addi	sp,sp,-20
    eb04:	dfc00415 	stw	ra,16(sp)
    eb08:	df000315 	stw	fp,12(sp)
    eb0c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    eb10:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    eb14:	d0a7f143 	ldbu	r2,-24635(gp)
    eb18:	10803fcc 	andi	r2,r2,255
    eb1c:	10800058 	cmpnei	r2,r2,1
    eb20:	10002f1e 	bne	r2,zero,ebe0 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eb24:	0005303a 	rdctl	r2,status
    eb28:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eb2c:	e0ffff17 	ldw	r3,-4(fp)
    eb30:	00bfff84 	movi	r2,-2
    eb34:	1884703a 	and	r2,r3,r2
    eb38:	1001703a 	wrctl	status,r2
  
  return context;
    eb3c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    eb40:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    eb44:	d0a7ff03 	ldbu	r2,-24580(gp)
    eb48:	10803fcc 	andi	r2,r2,255
    eb4c:	10000326 	beq	r2,zero,eb5c <OSIntExit+0x5c>
            OSIntNesting--;
    eb50:	d0a7ff03 	ldbu	r2,-24580(gp)
    eb54:	10bfffc4 	addi	r2,r2,-1
    eb58:	d0a7ff05 	stb	r2,-24580(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    eb5c:	d0a7ff03 	ldbu	r2,-24580(gp)
    eb60:	10803fcc 	andi	r2,r2,255
    eb64:	10001a1e 	bne	r2,zero,ebd0 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    eb68:	d0a7f103 	ldbu	r2,-24636(gp)
    eb6c:	10803fcc 	andi	r2,r2,255
    eb70:	1000171e 	bne	r2,zero,ebd0 <OSIntExit+0xd0>
                OS_SchedNew();
    eb74:	000fbfc0 	call	fbfc <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    eb78:	d0e7f303 	ldbu	r3,-24628(gp)
    eb7c:	d0a7f343 	ldbu	r2,-24627(gp)
    eb80:	18c03fcc 	andi	r3,r3,255
    eb84:	10803fcc 	andi	r2,r2,255
    eb88:	18801126 	beq	r3,r2,ebd0 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    eb8c:	d0a7f303 	ldbu	r2,-24628(gp)
    eb90:	10c03fcc 	andi	r3,r2,255
    eb94:	008000b4 	movhi	r2,2
    eb98:	1094ab04 	addi	r2,r2,21164
    eb9c:	18c7883a 	add	r3,r3,r3
    eba0:	18c7883a 	add	r3,r3,r3
    eba4:	10c5883a 	add	r2,r2,r3
    eba8:	10800017 	ldw	r2,0(r2)
    ebac:	d0a7fb15 	stw	r2,-24596(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    ebb0:	d0a7fb17 	ldw	r2,-24596(gp)
    ebb4:	10c00f17 	ldw	r3,60(r2)
    ebb8:	18c00044 	addi	r3,r3,1
    ebbc:	10c00f15 	stw	r3,60(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    ebc0:	d0a7f617 	ldw	r2,-24616(gp)
    ebc4:	10800044 	addi	r2,r2,1
    ebc8:	d0a7f615 	stw	r2,-24616(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    ebcc:	0018e4c0 	call	18e4c <OSCtxSw>
    ebd0:	e0bffd17 	ldw	r2,-12(fp)
    ebd4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ebd8:	e0bffe17 	ldw	r2,-8(fp)
    ebdc:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    ebe0:	0001883a 	nop
    ebe4:	e037883a 	mov	sp,fp
    ebe8:	dfc00117 	ldw	ra,4(sp)
    ebec:	df000017 	ldw	fp,0(sp)
    ebf0:	dec00204 	addi	sp,sp,8
    ebf4:	f800283a 	ret

0000ebf8 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    ebf8:	defffc04 	addi	sp,sp,-16
    ebfc:	df000315 	stw	fp,12(sp)
    ec00:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    ec04:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    ec08:	d0a7f143 	ldbu	r2,-24635(gp)
    ec0c:	10803fcc 	andi	r2,r2,255
    ec10:	10800058 	cmpnei	r2,r2,1
    ec14:	1000161e 	bne	r2,zero,ec70 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ec18:	0005303a 	rdctl	r2,status
    ec1c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ec20:	e0ffff17 	ldw	r3,-4(fp)
    ec24:	00bfff84 	movi	r2,-2
    ec28:	1884703a 	and	r2,r3,r2
    ec2c:	1001703a 	wrctl	status,r2
  
  return context;
    ec30:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    ec34:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    ec38:	d0a7ff03 	ldbu	r2,-24580(gp)
    ec3c:	10803fcc 	andi	r2,r2,255
    ec40:	1000071e 	bne	r2,zero,ec60 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    ec44:	d0a7f103 	ldbu	r2,-24636(gp)
    ec48:	10803fcc 	andi	r2,r2,255
    ec4c:	10803fe0 	cmpeqi	r2,r2,255
    ec50:	1000031e 	bne	r2,zero,ec60 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    ec54:	d0a7f103 	ldbu	r2,-24636(gp)
    ec58:	10800044 	addi	r2,r2,1
    ec5c:	d0a7f105 	stb	r2,-24636(gp)
    ec60:	e0bffd17 	ldw	r2,-12(fp)
    ec64:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ec68:	e0bffe17 	ldw	r2,-8(fp)
    ec6c:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    ec70:	0001883a 	nop
    ec74:	e037883a 	mov	sp,fp
    ec78:	df000017 	ldw	fp,0(sp)
    ec7c:	dec00104 	addi	sp,sp,4
    ec80:	f800283a 	ret

0000ec84 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    ec84:	defff804 	addi	sp,sp,-32
    ec88:	dfc00715 	stw	ra,28(sp)
    ec8c:	df000615 	stw	fp,24(sp)
    ec90:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    ec94:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    ec98:	d0a7f143 	ldbu	r2,-24635(gp)
    ec9c:	10803fcc 	andi	r2,r2,255
    eca0:	10800058 	cmpnei	r2,r2,1
    eca4:	1000281e 	bne	r2,zero,ed48 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eca8:	0005303a 	rdctl	r2,status
    ecac:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ecb0:	e0ffff17 	ldw	r3,-4(fp)
    ecb4:	00bfff84 	movi	r2,-2
    ecb8:	1884703a 	and	r2,r3,r2
    ecbc:	1001703a 	wrctl	status,r2
  
  return context;
    ecc0:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    ecc4:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    ecc8:	d0a7f103 	ldbu	r2,-24636(gp)
    eccc:	10803fcc 	andi	r2,r2,255
    ecd0:	10001926 	beq	r2,zero,ed38 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    ecd4:	d0a7f103 	ldbu	r2,-24636(gp)
    ecd8:	10bfffc4 	addi	r2,r2,-1
    ecdc:	d0a7f105 	stb	r2,-24636(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    ece0:	d0a7f103 	ldbu	r2,-24636(gp)
    ece4:	10803fcc 	andi	r2,r2,255
    ece8:	10000e1e 	bne	r2,zero,ed24 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    ecec:	d0a7ff03 	ldbu	r2,-24580(gp)
    ecf0:	10803fcc 	andi	r2,r2,255
    ecf4:	1000061e 	bne	r2,zero,ed10 <OSSchedUnlock+0x8c>
    ecf8:	e0bffa17 	ldw	r2,-24(fp)
    ecfc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ed00:	e0bffb17 	ldw	r2,-20(fp)
    ed04:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    ed08:	000fb2c0 	call	fb2c <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    ed0c:	00000e06 	br	ed48 <OSSchedUnlock+0xc4>
    ed10:	e0bffa17 	ldw	r2,-24(fp)
    ed14:	e0bffc15 	stw	r2,-16(fp)
    ed18:	e0bffc17 	ldw	r2,-16(fp)
    ed1c:	1001703a 	wrctl	status,r2
    ed20:	00000906 	br	ed48 <OSSchedUnlock+0xc4>
    ed24:	e0bffa17 	ldw	r2,-24(fp)
    ed28:	e0bffd15 	stw	r2,-12(fp)
    ed2c:	e0bffd17 	ldw	r2,-12(fp)
    ed30:	1001703a 	wrctl	status,r2
    ed34:	00000406 	br	ed48 <OSSchedUnlock+0xc4>
    ed38:	e0bffa17 	ldw	r2,-24(fp)
    ed3c:	e0bffe15 	stw	r2,-8(fp)
    ed40:	e0bffe17 	ldw	r2,-8(fp)
    ed44:	1001703a 	wrctl	status,r2
    ed48:	0001883a 	nop
    ed4c:	e037883a 	mov	sp,fp
    ed50:	dfc00117 	ldw	ra,4(sp)
    ed54:	df000017 	ldw	fp,0(sp)
    ed58:	dec00204 	addi	sp,sp,8
    ed5c:	f800283a 	ret

0000ed60 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    ed60:	defffe04 	addi	sp,sp,-8
    ed64:	dfc00115 	stw	ra,4(sp)
    ed68:	df000015 	stw	fp,0(sp)
    ed6c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    ed70:	d0a7f143 	ldbu	r2,-24635(gp)
    ed74:	10803fcc 	andi	r2,r2,255
    ed78:	10000f1e 	bne	r2,zero,edb8 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    ed7c:	000fbfc0 	call	fbfc <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    ed80:	d0a7f303 	ldbu	r2,-24628(gp)
    ed84:	d0a7f345 	stb	r2,-24627(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    ed88:	d0a7f303 	ldbu	r2,-24628(gp)
    ed8c:	10c03fcc 	andi	r3,r2,255
    ed90:	008000b4 	movhi	r2,2
    ed94:	1094ab04 	addi	r2,r2,21164
    ed98:	18c7883a 	add	r3,r3,r3
    ed9c:	18c7883a 	add	r3,r3,r3
    eda0:	10c5883a 	add	r2,r2,r3
    eda4:	10800017 	ldw	r2,0(r2)
    eda8:	d0a7fb15 	stw	r2,-24596(gp)
        OSTCBCur      = OSTCBHighRdy;
    edac:	d0a7fb17 	ldw	r2,-24596(gp)
    edb0:	d0a80015 	stw	r2,-24576(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    edb4:	0018ed80 	call	18ed8 <OSStartHighRdy>
    }
}
    edb8:	0001883a 	nop
    edbc:	e037883a 	mov	sp,fp
    edc0:	dfc00117 	ldw	ra,4(sp)
    edc4:	df000017 	ldw	fp,0(sp)
    edc8:	dec00204 	addi	sp,sp,8
    edcc:	f800283a 	ret

0000edd0 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    edd0:	defff904 	addi	sp,sp,-28
    edd4:	dfc00615 	stw	ra,24(sp)
    edd8:	df000515 	stw	fp,20(sp)
    eddc:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    ede0:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    ede4:	01000084 	movi	r4,2
    ede8:	00154380 	call	15438 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    edec:	0005303a 	rdctl	r2,status
    edf0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    edf4:	e0fffc17 	ldw	r3,-16(fp)
    edf8:	00bfff84 	movi	r2,-2
    edfc:	1884703a 	and	r2,r3,r2
    ee00:	1001703a 	wrctl	status,r2
  
  return context;
    ee04:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    ee08:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    ee0c:	d027f215 	stw	zero,-24632(gp)
    ee10:	e0bffb17 	ldw	r2,-20(fp)
    ee14:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ee18:	e0bffd17 	ldw	r2,-12(fp)
    ee1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    ee20:	0009883a 	mov	r4,zero
    ee24:	00154380 	call	15438 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ee28:	0005303a 	rdctl	r2,status
    ee2c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ee30:	e0fffe17 	ldw	r3,-8(fp)
    ee34:	00bfff84 	movi	r2,-2
    ee38:	1884703a 	and	r2,r3,r2
    ee3c:	1001703a 	wrctl	status,r2
  
  return context;
    ee40:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    ee44:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    ee48:	d0a7f217 	ldw	r2,-24632(gp)
    ee4c:	d0a7f715 	stw	r2,-24612(gp)
    OSStatRdy    = OS_TRUE;
    ee50:	00800044 	movi	r2,1
    ee54:	d0a80305 	stb	r2,-24564(gp)
    ee58:	e0bffb17 	ldw	r2,-20(fp)
    ee5c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ee60:	e0bfff17 	ldw	r2,-4(fp)
    ee64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    ee68:	0001883a 	nop
    ee6c:	e037883a 	mov	sp,fp
    ee70:	dfc00117 	ldw	ra,4(sp)
    ee74:	df000017 	ldw	fp,0(sp)
    ee78:	dec00204 	addi	sp,sp,8
    ee7c:	f800283a 	ret

0000ee80 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    ee80:	defff704 	addi	sp,sp,-36
    ee84:	dfc00815 	stw	ra,32(sp)
    ee88:	df000715 	stw	fp,28(sp)
    ee8c:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    ee90:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    ee94:	00191000 	call	19100 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ee98:	0005303a 	rdctl	r2,status
    ee9c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eea0:	e0fffd17 	ldw	r3,-12(fp)
    eea4:	00bfff84 	movi	r2,-2
    eea8:	1884703a 	and	r2,r3,r2
    eeac:	1001703a 	wrctl	status,r2
  
  return context;
    eeb0:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    eeb4:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    eeb8:	d0a80117 	ldw	r2,-24572(gp)
    eebc:	10800044 	addi	r2,r2,1
    eec0:	d0a80115 	stw	r2,-24572(gp)
    eec4:	e0bffb17 	ldw	r2,-20(fp)
    eec8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eecc:	e0bfff17 	ldw	r2,-4(fp)
    eed0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    eed4:	d0a7f143 	ldbu	r2,-24635(gp)
    eed8:	10803fcc 	andi	r2,r2,255
    eedc:	10800058 	cmpnei	r2,r2,1
    eee0:	10006a1e 	bne	r2,zero,f08c <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    eee4:	d0a7f503 	ldbu	r2,-24620(gp)
    eee8:	10803fcc 	andi	r2,r2,255
    eeec:	10c00060 	cmpeqi	r3,r2,1
    eef0:	1800061e 	bne	r3,zero,ef0c <OSTimeTick+0x8c>
    eef4:	10c000a0 	cmpeqi	r3,r2,2
    eef8:	1800061e 	bne	r3,zero,ef14 <OSTimeTick+0x94>
    eefc:	10000a1e 	bne	r2,zero,ef28 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    ef00:	00800044 	movi	r2,1
    ef04:	e0bffa05 	stb	r2,-24(fp)
                 break;
    ef08:	00000b06 	br	ef38 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    ef0c:	e03ffa05 	stb	zero,-24(fp)
                 break;
    ef10:	00000906 	br	ef38 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    ef14:	00800044 	movi	r2,1
    ef18:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    ef1c:	00800044 	movi	r2,1
    ef20:	d0a7f505 	stb	r2,-24620(gp)
                 break;
    ef24:	00000406 	br	ef38 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    ef28:	00800044 	movi	r2,1
    ef2c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    ef30:	d027f505 	stb	zero,-24620(gp)
                 break;
    ef34:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    ef38:	e0bffa03 	ldbu	r2,-24(fp)
    ef3c:	10005226 	beq	r2,zero,f088 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    ef40:	d0a7f417 	ldw	r2,-24624(gp)
    ef44:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    ef48:	00004906 	br	f070 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ef4c:	0005303a 	rdctl	r2,status
    ef50:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ef54:	e0fffc17 	ldw	r3,-16(fp)
    ef58:	00bfff84 	movi	r2,-2
    ef5c:	1884703a 	and	r2,r3,r2
    ef60:	1001703a 	wrctl	status,r2
  
  return context;
    ef64:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
    ef68:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    ef6c:	e0bff917 	ldw	r2,-28(fp)
    ef70:	10800c0b 	ldhu	r2,48(r2)
    ef74:	10bfffcc 	andi	r2,r2,65535
    ef78:	10003626 	beq	r2,zero,f054 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    ef7c:	e0bff917 	ldw	r2,-28(fp)
    ef80:	10800c0b 	ldhu	r2,48(r2)
    ef84:	10bfffc4 	addi	r2,r2,-1
    ef88:	1007883a 	mov	r3,r2
    ef8c:	e0bff917 	ldw	r2,-28(fp)
    ef90:	10c00c0d 	sth	r3,48(r2)
    ef94:	e0bff917 	ldw	r2,-28(fp)
    ef98:	10800c0b 	ldhu	r2,48(r2)
    ef9c:	10bfffcc 	andi	r2,r2,65535
    efa0:	10002c1e 	bne	r2,zero,f054 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    efa4:	e0bff917 	ldw	r2,-28(fp)
    efa8:	10800c83 	ldbu	r2,50(r2)
    efac:	10803fcc 	andi	r2,r2,255
    efb0:	10800dcc 	andi	r2,r2,55
    efb4:	10000b26 	beq	r2,zero,efe4 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    efb8:	e0bff917 	ldw	r2,-28(fp)
    efbc:	10c00c83 	ldbu	r3,50(r2)
    efc0:	00bff204 	movi	r2,-56
    efc4:	1884703a 	and	r2,r3,r2
    efc8:	1007883a 	mov	r3,r2
    efcc:	e0bff917 	ldw	r2,-28(fp)
    efd0:	10c00c85 	stb	r3,50(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    efd4:	e0bff917 	ldw	r2,-28(fp)
    efd8:	00c00044 	movi	r3,1
    efdc:	10c00cc5 	stb	r3,51(r2)
    efe0:	00000206 	br	efec <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    efe4:	e0bff917 	ldw	r2,-28(fp)
    efe8:	10000cc5 	stb	zero,51(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    efec:	e0bff917 	ldw	r2,-28(fp)
    eff0:	10800c83 	ldbu	r2,50(r2)
    eff4:	10803fcc 	andi	r2,r2,255
    eff8:	1080020c 	andi	r2,r2,8
    effc:	1000151e 	bne	r2,zero,f054 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    f000:	e0bff917 	ldw	r2,-28(fp)
    f004:	10c00e03 	ldbu	r3,56(r2)
    f008:	d0a7fd03 	ldbu	r2,-24588(gp)
    f00c:	1884b03a 	or	r2,r3,r2
    f010:	d0a7fd05 	stb	r2,-24588(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    f014:	e0bff917 	ldw	r2,-28(fp)
    f018:	10800d83 	ldbu	r2,54(r2)
    f01c:	10c03fcc 	andi	r3,r2,255
    f020:	e0bff917 	ldw	r2,-28(fp)
    f024:	10800d83 	ldbu	r2,54(r2)
    f028:	11003fcc 	andi	r4,r2,255
    f02c:	d0a7fd44 	addi	r2,gp,-24587
    f030:	2085883a 	add	r2,r4,r2
    f034:	11000003 	ldbu	r4,0(r2)
    f038:	e0bff917 	ldw	r2,-28(fp)
    f03c:	10800dc3 	ldbu	r2,55(r2)
    f040:	2084b03a 	or	r2,r4,r2
    f044:	1009883a 	mov	r4,r2
    f048:	d0a7fd44 	addi	r2,gp,-24587
    f04c:	1885883a 	add	r2,r3,r2
    f050:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    f054:	e0bff917 	ldw	r2,-28(fp)
    f058:	10800517 	ldw	r2,20(r2)
    f05c:	e0bff915 	stw	r2,-28(fp)
    f060:	e0bffb17 	ldw	r2,-20(fp)
    f064:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f068:	e0bffe17 	ldw	r2,-8(fp)
    f06c:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    f070:	e0bff917 	ldw	r2,-28(fp)
    f074:	10800d03 	ldbu	r2,52(r2)
    f078:	10803fcc 	andi	r2,r2,255
    f07c:	10800518 	cmpnei	r2,r2,20
    f080:	103fb21e 	bne	r2,zero,ef4c <OSTimeTick+0xcc>
    f084:	00000106 	br	f08c <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
    f088:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    f08c:	e037883a 	mov	sp,fp
    f090:	dfc00117 	ldw	ra,4(sp)
    f094:	df000017 	ldw	fp,0(sp)
    f098:	dec00204 	addi	sp,sp,8
    f09c:	f800283a 	ret

0000f0a0 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    f0a0:	deffff04 	addi	sp,sp,-4
    f0a4:	df000015 	stw	fp,0(sp)
    f0a8:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    f0ac:	00804784 	movi	r2,286
}
    f0b0:	e037883a 	mov	sp,fp
    f0b4:	df000017 	ldw	fp,0(sp)
    f0b8:	dec00104 	addi	sp,sp,4
    f0bc:	f800283a 	ret

0000f0c0 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    f0c0:	deffff04 	addi	sp,sp,-4
    f0c4:	df000015 	stw	fp,0(sp)
    f0c8:	d839883a 	mov	fp,sp
}
    f0cc:	0001883a 	nop
    f0d0:	e037883a 	mov	sp,fp
    f0d4:	df000017 	ldw	fp,0(sp)
    f0d8:	dec00104 	addi	sp,sp,4
    f0dc:	f800283a 	ret

0000f0e0 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    f0e0:	defff804 	addi	sp,sp,-32
    f0e4:	dfc00715 	stw	ra,28(sp)
    f0e8:	df000615 	stw	fp,24(sp)
    f0ec:	df000604 	addi	fp,sp,24
    f0f0:	e13ffc15 	stw	r4,-16(fp)
    f0f4:	e17ffd15 	stw	r5,-12(fp)
    f0f8:	3007883a 	mov	r3,r6
    f0fc:	3805883a 	mov	r2,r7
    f100:	e0fffe05 	stb	r3,-8(fp)
    f104:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    f108:	e0bffc17 	ldw	r2,-16(fp)
    f10c:	10800283 	ldbu	r2,10(r2)
    f110:	10c03fcc 	andi	r3,r2,255
    f114:	008000b4 	movhi	r2,2
    f118:	10a80704 	addi	r2,r2,-24548
    f11c:	10c5883a 	add	r2,r2,r3
    f120:	10800003 	ldbu	r2,0(r2)
    f124:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    f128:	e0bffa03 	ldbu	r2,-24(fp)
    f12c:	e0fffc17 	ldw	r3,-16(fp)
    f130:	1885883a 	add	r2,r3,r2
    f134:	108002c4 	addi	r2,r2,11
    f138:	10800003 	ldbu	r2,0(r2)
    f13c:	10c03fcc 	andi	r3,r2,255
    f140:	008000b4 	movhi	r2,2
    f144:	10a80704 	addi	r2,r2,-24548
    f148:	10c5883a 	add	r2,r2,r3
    f14c:	10800003 	ldbu	r2,0(r2)
    f150:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    f154:	e0bffa03 	ldbu	r2,-24(fp)
    f158:	100490fa 	slli	r2,r2,3
    f15c:	1007883a 	mov	r3,r2
    f160:	e0bffa43 	ldbu	r2,-23(fp)
    f164:	1885883a 	add	r2,r3,r2
    f168:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    f16c:	e0fffa83 	ldbu	r3,-22(fp)
    f170:	008000b4 	movhi	r2,2
    f174:	1094ab04 	addi	r2,r2,21164
    f178:	18c7883a 	add	r3,r3,r3
    f17c:	18c7883a 	add	r3,r3,r3
    f180:	10c5883a 	add	r2,r2,r3
    f184:	10800017 	ldw	r2,0(r2)
    f188:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    f18c:	e0bffb17 	ldw	r2,-20(fp)
    f190:	10000c0d 	sth	zero,48(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    f194:	e0bffb17 	ldw	r2,-20(fp)
    f198:	e0fffd17 	ldw	r3,-12(fp)
    f19c:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    f1a0:	e0bffb17 	ldw	r2,-20(fp)
    f1a4:	10800c83 	ldbu	r2,50(r2)
    f1a8:	1007883a 	mov	r3,r2
    f1ac:	e0bffe03 	ldbu	r2,-8(fp)
    f1b0:	0084303a 	nor	r2,zero,r2
    f1b4:	1884703a 	and	r2,r3,r2
    f1b8:	1007883a 	mov	r3,r2
    f1bc:	e0bffb17 	ldw	r2,-20(fp)
    f1c0:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    f1c4:	e0bffb17 	ldw	r2,-20(fp)
    f1c8:	e0ffff03 	ldbu	r3,-4(fp)
    f1cc:	10c00cc5 	stb	r3,51(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    f1d0:	e0bffb17 	ldw	r2,-20(fp)
    f1d4:	10800c83 	ldbu	r2,50(r2)
    f1d8:	10803fcc 	andi	r2,r2,255
    f1dc:	1080020c 	andi	r2,r2,8
    f1e0:	1000111e 	bne	r2,zero,f228 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    f1e4:	e0bffb17 	ldw	r2,-20(fp)
    f1e8:	10c00e03 	ldbu	r3,56(r2)
    f1ec:	d0a7fd03 	ldbu	r2,-24588(gp)
    f1f0:	1884b03a 	or	r2,r3,r2
    f1f4:	d0a7fd05 	stb	r2,-24588(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    f1f8:	e0fffa03 	ldbu	r3,-24(fp)
    f1fc:	e13ffa03 	ldbu	r4,-24(fp)
    f200:	d0a7fd44 	addi	r2,gp,-24587
    f204:	2085883a 	add	r2,r4,r2
    f208:	11000003 	ldbu	r4,0(r2)
    f20c:	e0bffb17 	ldw	r2,-20(fp)
    f210:	10800dc3 	ldbu	r2,55(r2)
    f214:	2084b03a 	or	r2,r4,r2
    f218:	1009883a 	mov	r4,r2
    f21c:	d0a7fd44 	addi	r2,gp,-24587
    f220:	1885883a 	add	r2,r3,r2
    f224:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    f228:	e17ffc17 	ldw	r5,-16(fp)
    f22c:	e13ffb17 	ldw	r4,-20(fp)
    f230:	000f4d80 	call	f4d8 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    f234:	e0bffb17 	ldw	r2,-20(fp)
    f238:	10800817 	ldw	r2,32(r2)
    f23c:	10000826 	beq	r2,zero,f260 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    f240:	e0bffb17 	ldw	r2,-20(fp)
    f244:	10800817 	ldw	r2,32(r2)
    f248:	100b883a 	mov	r5,r2
    f24c:	e13ffb17 	ldw	r4,-20(fp)
    f250:	000f5900 	call	f590 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    f254:	e0bffb17 	ldw	r2,-20(fp)
    f258:	e0fffc17 	ldw	r3,-16(fp)
    f25c:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    f260:	e0bffa83 	ldbu	r2,-22(fp)
}
    f264:	e037883a 	mov	sp,fp
    f268:	dfc00117 	ldw	ra,4(sp)
    f26c:	df000017 	ldw	fp,0(sp)
    f270:	dec00204 	addi	sp,sp,8
    f274:	f800283a 	ret

0000f278 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    f278:	defffd04 	addi	sp,sp,-12
    f27c:	df000215 	stw	fp,8(sp)
    f280:	df000204 	addi	fp,sp,8
    f284:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    f288:	d0a80017 	ldw	r2,-24576(gp)
    f28c:	e0ffff17 	ldw	r3,-4(fp)
    f290:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    f294:	d0a80017 	ldw	r2,-24576(gp)
    f298:	10800d83 	ldbu	r2,54(r2)
    f29c:	10803fcc 	andi	r2,r2,255
    f2a0:	d0e80017 	ldw	r3,-24576(gp)
    f2a4:	18c00d83 	ldbu	r3,54(r3)
    f2a8:	18c03fcc 	andi	r3,r3,255
    f2ac:	e13fff17 	ldw	r4,-4(fp)
    f2b0:	20c7883a 	add	r3,r4,r3
    f2b4:	18c002c4 	addi	r3,r3,11
    f2b8:	19000003 	ldbu	r4,0(r3)
    f2bc:	d0e80017 	ldw	r3,-24576(gp)
    f2c0:	18c00dc3 	ldbu	r3,55(r3)
    f2c4:	20c6b03a 	or	r3,r4,r3
    f2c8:	1809883a 	mov	r4,r3
    f2cc:	e0ffff17 	ldw	r3,-4(fp)
    f2d0:	1885883a 	add	r2,r3,r2
    f2d4:	108002c4 	addi	r2,r2,11
    f2d8:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    f2dc:	e0bfff17 	ldw	r2,-4(fp)
    f2e0:	10c00283 	ldbu	r3,10(r2)
    f2e4:	d0a80017 	ldw	r2,-24576(gp)
    f2e8:	10800e03 	ldbu	r2,56(r2)
    f2ec:	1884b03a 	or	r2,r3,r2
    f2f0:	1007883a 	mov	r3,r2
    f2f4:	e0bfff17 	ldw	r2,-4(fp)
    f2f8:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    f2fc:	d0a80017 	ldw	r2,-24576(gp)
    f300:	10800d83 	ldbu	r2,54(r2)
    f304:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    f308:	e0fffe03 	ldbu	r3,-8(fp)
    f30c:	e13ffe03 	ldbu	r4,-8(fp)
    f310:	d0a7fd44 	addi	r2,gp,-24587
    f314:	2085883a 	add	r2,r4,r2
    f318:	10800003 	ldbu	r2,0(r2)
    f31c:	1009883a 	mov	r4,r2
    f320:	d0a80017 	ldw	r2,-24576(gp)
    f324:	10800dc3 	ldbu	r2,55(r2)
    f328:	0084303a 	nor	r2,zero,r2
    f32c:	2084703a 	and	r2,r4,r2
    f330:	1009883a 	mov	r4,r2
    f334:	d0a7fd44 	addi	r2,gp,-24587
    f338:	1885883a 	add	r2,r3,r2
    f33c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    f340:	e0fffe03 	ldbu	r3,-8(fp)
    f344:	d0a7fd44 	addi	r2,gp,-24587
    f348:	1885883a 	add	r2,r3,r2
    f34c:	10800003 	ldbu	r2,0(r2)
    f350:	10803fcc 	andi	r2,r2,255
    f354:	1000071e 	bne	r2,zero,f374 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    f358:	d0a80017 	ldw	r2,-24576(gp)
    f35c:	10800e03 	ldbu	r2,56(r2)
    f360:	0084303a 	nor	r2,zero,r2
    f364:	1007883a 	mov	r3,r2
    f368:	d0a7fd03 	ldbu	r2,-24588(gp)
    f36c:	1884703a 	and	r2,r3,r2
    f370:	d0a7fd05 	stb	r2,-24588(gp)
    }
}
    f374:	0001883a 	nop
    f378:	e037883a 	mov	sp,fp
    f37c:	df000017 	ldw	fp,0(sp)
    f380:	dec00104 	addi	sp,sp,4
    f384:	f800283a 	ret

0000f388 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    f388:	defffb04 	addi	sp,sp,-20
    f38c:	df000415 	stw	fp,16(sp)
    f390:	df000404 	addi	fp,sp,16
    f394:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    f398:	d0a80017 	ldw	r2,-24576(gp)
    f39c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    f3a0:	d0a80017 	ldw	r2,-24576(gp)
    f3a4:	e0ffff17 	ldw	r3,-4(fp)
    f3a8:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    f3ac:	e0bfff17 	ldw	r2,-4(fp)
    f3b0:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
    f3b4:	e0bffc17 	ldw	r2,-16(fp)
    f3b8:	10800017 	ldw	r2,0(r2)
    f3bc:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    f3c0:	00002006 	br	f444 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    f3c4:	d0a80017 	ldw	r2,-24576(gp)
    f3c8:	10800d83 	ldbu	r2,54(r2)
    f3cc:	10803fcc 	andi	r2,r2,255
    f3d0:	d0e80017 	ldw	r3,-24576(gp)
    f3d4:	18c00d83 	ldbu	r3,54(r3)
    f3d8:	18c03fcc 	andi	r3,r3,255
    f3dc:	e13ffd17 	ldw	r4,-12(fp)
    f3e0:	20c7883a 	add	r3,r4,r3
    f3e4:	18c002c4 	addi	r3,r3,11
    f3e8:	19000003 	ldbu	r4,0(r3)
    f3ec:	d0e80017 	ldw	r3,-24576(gp)
    f3f0:	18c00dc3 	ldbu	r3,55(r3)
    f3f4:	20c6b03a 	or	r3,r4,r3
    f3f8:	1809883a 	mov	r4,r3
    f3fc:	e0fffd17 	ldw	r3,-12(fp)
    f400:	1885883a 	add	r2,r3,r2
    f404:	108002c4 	addi	r2,r2,11
    f408:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    f40c:	e0bffd17 	ldw	r2,-12(fp)
    f410:	10c00283 	ldbu	r3,10(r2)
    f414:	d0a80017 	ldw	r2,-24576(gp)
    f418:	10800e03 	ldbu	r2,56(r2)
    f41c:	1884b03a 	or	r2,r3,r2
    f420:	1007883a 	mov	r3,r2
    f424:	e0bffd17 	ldw	r2,-12(fp)
    f428:	10c00285 	stb	r3,10(r2)
        pevents++;
    f42c:	e0bffc17 	ldw	r2,-16(fp)
    f430:	10800104 	addi	r2,r2,4
    f434:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
    f438:	e0bffc17 	ldw	r2,-16(fp)
    f43c:	10800017 	ldw	r2,0(r2)
    f440:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    f444:	e0bffd17 	ldw	r2,-12(fp)
    f448:	103fde1e 	bne	r2,zero,f3c4 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    f44c:	d0a80017 	ldw	r2,-24576(gp)
    f450:	10800d83 	ldbu	r2,54(r2)
    f454:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    f458:	e0fffe03 	ldbu	r3,-8(fp)
    f45c:	e13ffe03 	ldbu	r4,-8(fp)
    f460:	d0a7fd44 	addi	r2,gp,-24587
    f464:	2085883a 	add	r2,r4,r2
    f468:	10800003 	ldbu	r2,0(r2)
    f46c:	1009883a 	mov	r4,r2
    f470:	d0a80017 	ldw	r2,-24576(gp)
    f474:	10800dc3 	ldbu	r2,55(r2)
    f478:	0084303a 	nor	r2,zero,r2
    f47c:	2084703a 	and	r2,r4,r2
    f480:	1009883a 	mov	r4,r2
    f484:	d0a7fd44 	addi	r2,gp,-24587
    f488:	1885883a 	add	r2,r3,r2
    f48c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    f490:	e0fffe03 	ldbu	r3,-8(fp)
    f494:	d0a7fd44 	addi	r2,gp,-24587
    f498:	1885883a 	add	r2,r3,r2
    f49c:	10800003 	ldbu	r2,0(r2)
    f4a0:	10803fcc 	andi	r2,r2,255
    f4a4:	1000071e 	bne	r2,zero,f4c4 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    f4a8:	d0a80017 	ldw	r2,-24576(gp)
    f4ac:	10800e03 	ldbu	r2,56(r2)
    f4b0:	0084303a 	nor	r2,zero,r2
    f4b4:	1007883a 	mov	r3,r2
    f4b8:	d0a7fd03 	ldbu	r2,-24588(gp)
    f4bc:	1884703a 	and	r2,r3,r2
    f4c0:	d0a7fd05 	stb	r2,-24588(gp)
    }
}
    f4c4:	0001883a 	nop
    f4c8:	e037883a 	mov	sp,fp
    f4cc:	df000017 	ldw	fp,0(sp)
    f4d0:	dec00104 	addi	sp,sp,4
    f4d4:	f800283a 	ret

0000f4d8 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    f4d8:	defffc04 	addi	sp,sp,-16
    f4dc:	df000315 	stw	fp,12(sp)
    f4e0:	df000304 	addi	fp,sp,12
    f4e4:	e13ffe15 	stw	r4,-8(fp)
    f4e8:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    f4ec:	e0bffe17 	ldw	r2,-8(fp)
    f4f0:	10800d83 	ldbu	r2,54(r2)
    f4f4:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    f4f8:	e0bffd03 	ldbu	r2,-12(fp)
    f4fc:	e0fffd03 	ldbu	r3,-12(fp)
    f500:	e13fff17 	ldw	r4,-4(fp)
    f504:	20c7883a 	add	r3,r4,r3
    f508:	18c002c4 	addi	r3,r3,11
    f50c:	18c00003 	ldbu	r3,0(r3)
    f510:	1809883a 	mov	r4,r3
    f514:	e0fffe17 	ldw	r3,-8(fp)
    f518:	18c00dc3 	ldbu	r3,55(r3)
    f51c:	00c6303a 	nor	r3,zero,r3
    f520:	20c6703a 	and	r3,r4,r3
    f524:	1809883a 	mov	r4,r3
    f528:	e0ffff17 	ldw	r3,-4(fp)
    f52c:	1885883a 	add	r2,r3,r2
    f530:	108002c4 	addi	r2,r2,11
    f534:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
    f538:	e0bffd03 	ldbu	r2,-12(fp)
    f53c:	e0ffff17 	ldw	r3,-4(fp)
    f540:	1885883a 	add	r2,r3,r2
    f544:	108002c4 	addi	r2,r2,11
    f548:	10800003 	ldbu	r2,0(r2)
    f54c:	10803fcc 	andi	r2,r2,255
    f550:	10000a1e 	bne	r2,zero,f57c <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    f554:	e0bfff17 	ldw	r2,-4(fp)
    f558:	10800283 	ldbu	r2,10(r2)
    f55c:	1007883a 	mov	r3,r2
    f560:	e0bffe17 	ldw	r2,-8(fp)
    f564:	10800e03 	ldbu	r2,56(r2)
    f568:	0084303a 	nor	r2,zero,r2
    f56c:	1884703a 	and	r2,r3,r2
    f570:	1007883a 	mov	r3,r2
    f574:	e0bfff17 	ldw	r2,-4(fp)
    f578:	10c00285 	stb	r3,10(r2)
    }
}
    f57c:	0001883a 	nop
    f580:	e037883a 	mov	sp,fp
    f584:	df000017 	ldw	fp,0(sp)
    f588:	dec00104 	addi	sp,sp,4
    f58c:	f800283a 	ret

0000f590 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    f590:	defffa04 	addi	sp,sp,-24
    f594:	df000515 	stw	fp,20(sp)
    f598:	df000504 	addi	fp,sp,20
    f59c:	e13ffe15 	stw	r4,-8(fp)
    f5a0:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    f5a4:	e0bffe17 	ldw	r2,-8(fp)
    f5a8:	10800d83 	ldbu	r2,54(r2)
    f5ac:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
    f5b0:	e0bffe17 	ldw	r2,-8(fp)
    f5b4:	10800e03 	ldbu	r2,56(r2)
    f5b8:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
    f5bc:	e0bffe17 	ldw	r2,-8(fp)
    f5c0:	10800dc3 	ldbu	r2,55(r2)
    f5c4:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
    f5c8:	e0bfff17 	ldw	r2,-4(fp)
    f5cc:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
    f5d0:	e0bffb17 	ldw	r2,-20(fp)
    f5d4:	10800017 	ldw	r2,0(r2)
    f5d8:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    f5dc:	00002506 	br	f674 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
    f5e0:	e0bffd03 	ldbu	r2,-12(fp)
    f5e4:	e0fffd03 	ldbu	r3,-12(fp)
    f5e8:	e13ffc17 	ldw	r4,-16(fp)
    f5ec:	20c7883a 	add	r3,r4,r3
    f5f0:	18c002c4 	addi	r3,r3,11
    f5f4:	18c00003 	ldbu	r3,0(r3)
    f5f8:	1809883a 	mov	r4,r3
    f5fc:	e0fffd83 	ldbu	r3,-10(fp)
    f600:	00c6303a 	nor	r3,zero,r3
    f604:	20c6703a 	and	r3,r4,r3
    f608:	1809883a 	mov	r4,r3
    f60c:	e0fffc17 	ldw	r3,-16(fp)
    f610:	1885883a 	add	r2,r3,r2
    f614:	108002c4 	addi	r2,r2,11
    f618:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
    f61c:	e0bffd03 	ldbu	r2,-12(fp)
    f620:	e0fffc17 	ldw	r3,-16(fp)
    f624:	1885883a 	add	r2,r3,r2
    f628:	108002c4 	addi	r2,r2,11
    f62c:	10800003 	ldbu	r2,0(r2)
    f630:	10803fcc 	andi	r2,r2,255
    f634:	1000091e 	bne	r2,zero,f65c <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
    f638:	e0bffc17 	ldw	r2,-16(fp)
    f63c:	10800283 	ldbu	r2,10(r2)
    f640:	1007883a 	mov	r3,r2
    f644:	e0bffd43 	ldbu	r2,-11(fp)
    f648:	0084303a 	nor	r2,zero,r2
    f64c:	1884703a 	and	r2,r3,r2
    f650:	1007883a 	mov	r3,r2
    f654:	e0bffc17 	ldw	r2,-16(fp)
    f658:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    f65c:	e0bffb17 	ldw	r2,-20(fp)
    f660:	10800104 	addi	r2,r2,4
    f664:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
    f668:	e0bffb17 	ldw	r2,-20(fp)
    f66c:	10800017 	ldw	r2,0(r2)
    f670:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    f674:	e0bffc17 	ldw	r2,-16(fp)
    f678:	103fd91e 	bne	r2,zero,f5e0 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    f67c:	0001883a 	nop
    f680:	e037883a 	mov	sp,fp
    f684:	df000017 	ldw	fp,0(sp)
    f688:	dec00104 	addi	sp,sp,4
    f68c:	f800283a 	ret

0000f690 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    f690:	defffc04 	addi	sp,sp,-16
    f694:	df000315 	stw	fp,12(sp)
    f698:	df000304 	addi	fp,sp,12
    f69c:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    f6a0:	e0bfff17 	ldw	r2,-4(fp)
    f6a4:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    f6a8:	e0bfff17 	ldw	r2,-4(fp)
    f6ac:	108002c4 	addi	r2,r2,11
    f6b0:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    f6b4:	e03ffe05 	stb	zero,-8(fp)
    f6b8:	00000706 	br	f6d8 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
    f6bc:	e0bffd17 	ldw	r2,-12(fp)
    f6c0:	10c00044 	addi	r3,r2,1
    f6c4:	e0fffd15 	stw	r3,-12(fp)
    f6c8:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    f6cc:	e0bffe03 	ldbu	r2,-8(fp)
    f6d0:	10800044 	addi	r2,r2,1
    f6d4:	e0bffe05 	stb	r2,-8(fp)
    f6d8:	e0bffe03 	ldbu	r2,-8(fp)
    f6dc:	108000f0 	cmpltui	r2,r2,3
    f6e0:	103ff61e 	bne	r2,zero,f6bc <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
    f6e4:	0001883a 	nop
    f6e8:	e037883a 	mov	sp,fp
    f6ec:	df000017 	ldw	fp,0(sp)
    f6f0:	dec00104 	addi	sp,sp,4
    f6f4:	f800283a 	ret

0000f6f8 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    f6f8:	defffb04 	addi	sp,sp,-20
    f6fc:	dfc00415 	stw	ra,16(sp)
    f700:	df000315 	stw	fp,12(sp)
    f704:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    f708:	0142d004 	movi	r5,2880
    f70c:	010000b4 	movhi	r4,2
    f710:	21108b04 	addi	r4,r4,16940
    f714:	000fa700 	call	fa70 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    f718:	008000b4 	movhi	r2,2
    f71c:	10908b04 	addi	r2,r2,16940
    f720:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    f724:	008000b4 	movhi	r2,2
    f728:	10909704 	addi	r2,r2,16988
    f72c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    f730:	e03ffd0d 	sth	zero,-12(fp)
    f734:	00001306 	br	f784 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    f738:	e0bffe17 	ldw	r2,-8(fp)
    f73c:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    f740:	e0bffe17 	ldw	r2,-8(fp)
    f744:	e0ffff17 	ldw	r3,-4(fp)
    f748:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    f74c:	e0bffe17 	ldw	r2,-8(fp)
    f750:	00c00fc4 	movi	r3,63
    f754:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    f758:	e0bffe17 	ldw	r2,-8(fp)
    f75c:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    f760:	e0bffe17 	ldw	r2,-8(fp)
    f764:	10800c04 	addi	r2,r2,48
    f768:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    f76c:	e0bfff17 	ldw	r2,-4(fp)
    f770:	10800c04 	addi	r2,r2,48
    f774:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    f778:	e0bffd0b 	ldhu	r2,-12(fp)
    f77c:	10800044 	addi	r2,r2,1
    f780:	e0bffd0d 	sth	r2,-12(fp)
    f784:	e0bffd0b 	ldhu	r2,-12(fp)
    f788:	10800ef0 	cmpltui	r2,r2,59
    f78c:	103fea1e 	bne	r2,zero,f738 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    f790:	e0bffe17 	ldw	r2,-8(fp)
    f794:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    f798:	e0bffe17 	ldw	r2,-8(fp)
    f79c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    f7a0:	e0bffe17 	ldw	r2,-8(fp)
    f7a4:	00c00fc4 	movi	r3,63
    f7a8:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    f7ac:	e0bffe17 	ldw	r2,-8(fp)
    f7b0:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    f7b4:	008000b4 	movhi	r2,2
    f7b8:	10908b04 	addi	r2,r2,16940
    f7bc:	d0a7fe15 	stw	r2,-24584(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    f7c0:	0001883a 	nop
    f7c4:	e037883a 	mov	sp,fp
    f7c8:	dfc00117 	ldw	ra,4(sp)
    f7cc:	df000017 	ldw	fp,0(sp)
    f7d0:	dec00204 	addi	sp,sp,8
    f7d4:	f800283a 	ret

0000f7d8 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    f7d8:	deffff04 	addi	sp,sp,-4
    f7dc:	df000015 	stw	fp,0(sp)
    f7e0:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    f7e4:	d0280115 	stw	zero,-24572(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    f7e8:	d027ff05 	stb	zero,-24580(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    f7ec:	d027f105 	stb	zero,-24636(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    f7f0:	d027f945 	stb	zero,-24603(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    f7f4:	d027f145 	stb	zero,-24635(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    f7f8:	d027f615 	stw	zero,-24616(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    f7fc:	d027f215 	stw	zero,-24632(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    f800:	d0280415 	stw	zero,-24560(gp)
    OSIdleCtrMax  = 0L;
    f804:	d027f715 	stw	zero,-24612(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    f808:	d0280305 	stb	zero,-24564(gp)
#endif
}
    f80c:	0001883a 	nop
    f810:	e037883a 	mov	sp,fp
    f814:	df000017 	ldw	fp,0(sp)
    f818:	dec00104 	addi	sp,sp,4
    f81c:	f800283a 	ret

0000f820 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    f820:	defffd04 	addi	sp,sp,-12
    f824:	df000215 	stw	fp,8(sp)
    f828:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    f82c:	d027fd05 	stb	zero,-24588(gp)
    prdytbl       = &OSRdyTbl[0];
    f830:	d0a7fd44 	addi	r2,gp,-24587
    f834:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    f838:	e03ffe05 	stb	zero,-8(fp)
    f83c:	00000706 	br	f85c <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
    f840:	e0bfff17 	ldw	r2,-4(fp)
    f844:	10c00044 	addi	r3,r2,1
    f848:	e0ffff15 	stw	r3,-4(fp)
    f84c:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    f850:	e0bffe03 	ldbu	r2,-8(fp)
    f854:	10800044 	addi	r2,r2,1
    f858:	e0bffe05 	stb	r2,-8(fp)
    f85c:	e0bffe03 	ldbu	r2,-8(fp)
    f860:	108000f0 	cmpltui	r2,r2,3
    f864:	103ff61e 	bne	r2,zero,f840 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    f868:	d027f345 	stb	zero,-24627(gp)
    OSPrioHighRdy = 0;
    f86c:	d027f305 	stb	zero,-24628(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    f870:	d027fb15 	stw	zero,-24596(gp)
    OSTCBCur      = (OS_TCB *)0;
    f874:	d0280015 	stw	zero,-24576(gp)
}
    f878:	0001883a 	nop
    f87c:	e037883a 	mov	sp,fp
    f880:	df000017 	ldw	fp,0(sp)
    f884:	dec00104 	addi	sp,sp,4
    f888:	f800283a 	ret

0000f88c <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    f88c:	defff804 	addi	sp,sp,-32
    f890:	dfc00715 	stw	ra,28(sp)
    f894:	df000615 	stw	fp,24(sp)
    f898:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    f89c:	008000c4 	movi	r2,3
    f8a0:	d8800415 	stw	r2,16(sp)
    f8a4:	d8000315 	stw	zero,12(sp)
    f8a8:	00808004 	movi	r2,512
    f8ac:	d8800215 	stw	r2,8(sp)
    f8b0:	008000b4 	movhi	r2,2
    f8b4:	108e8b04 	addi	r2,r2,14892
    f8b8:	d8800115 	stw	r2,4(sp)
    f8bc:	00bfffd4 	movui	r2,65535
    f8c0:	d8800015 	stw	r2,0(sp)
    f8c4:	01c00504 	movi	r7,20
    f8c8:	018000b4 	movhi	r6,2
    f8cc:	31908a04 	addi	r6,r6,16936
    f8d0:	000b883a 	mov	r5,zero
    f8d4:	01000074 	movhi	r4,1
    f8d8:	213f4e04 	addi	r4,r4,-712
    f8dc:	00143680 	call	14368 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    f8e0:	e1bfff04 	addi	r6,fp,-4
    f8e4:	014000b4 	movhi	r5,2
    f8e8:	29684704 	addi	r5,r5,-24292
    f8ec:	01000504 	movi	r4,20
    f8f0:	0014b780 	call	14b78 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    f8f4:	0001883a 	nop
    f8f8:	e037883a 	mov	sp,fp
    f8fc:	dfc00117 	ldw	ra,4(sp)
    f900:	df000017 	ldw	fp,0(sp)
    f904:	dec00204 	addi	sp,sp,8
    f908:	f800283a 	ret

0000f90c <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    f90c:	defff804 	addi	sp,sp,-32
    f910:	dfc00715 	stw	ra,28(sp)
    f914:	df000615 	stw	fp,24(sp)
    f918:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    f91c:	008000c4 	movi	r2,3
    f920:	d8800415 	stw	r2,16(sp)
    f924:	d8000315 	stw	zero,12(sp)
    f928:	00808004 	movi	r2,512
    f92c:	d8800215 	stw	r2,8(sp)
    f930:	008000b4 	movhi	r2,2
    f934:	108c1304 	addi	r2,r2,12364
    f938:	d8800115 	stw	r2,4(sp)
    f93c:	00bfff94 	movui	r2,65534
    f940:	d8800015 	stw	r2,0(sp)
    f944:	01c004c4 	movi	r7,19
    f948:	018000b4 	movhi	r6,2
    f94c:	318e1204 	addi	r6,r6,14408
    f950:	000b883a 	mov	r5,zero
    f954:	01000074 	movhi	r4,1
    f958:	213f6504 	addi	r4,r4,-620
    f95c:	00143680 	call	14368 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    f960:	e1bfff04 	addi	r6,fp,-4
    f964:	014000b4 	movhi	r5,2
    f968:	29684b04 	addi	r5,r5,-24276
    f96c:	010004c4 	movi	r4,19
    f970:	0014b780 	call	14b78 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    f974:	0001883a 	nop
    f978:	e037883a 	mov	sp,fp
    f97c:	dfc00117 	ldw	ra,4(sp)
    f980:	df000017 	ldw	fp,0(sp)
    f984:	dec00204 	addi	sp,sp,8
    f988:	f800283a 	ret

0000f98c <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    f98c:	defffb04 	addi	sp,sp,-20
    f990:	dfc00415 	stw	ra,16(sp)
    f994:	df000315 	stw	fp,12(sp)
    f998:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    f99c:	01415004 	movi	r5,1344
    f9a0:	010000b4 	movhi	r4,2
    f9a4:	21135b04 	addi	r4,r4,19820
    f9a8:	000fa700 	call	fa70 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    f9ac:	01401504 	movi	r5,84
    f9b0:	010000b4 	movhi	r4,2
    f9b4:	2114ab04 	addi	r4,r4,21164
    f9b8:	000fa700 	call	fa70 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    f9bc:	008000b4 	movhi	r2,2
    f9c0:	10935b04 	addi	r2,r2,19820
    f9c4:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    f9c8:	008000b4 	movhi	r2,2
    f9cc:	10937704 	addi	r2,r2,19932
    f9d0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    f9d4:	e03ffd05 	stb	zero,-12(fp)
    f9d8:	00001106 	br	fa20 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    f9dc:	e0bffe17 	ldw	r2,-8(fp)
    f9e0:	e0ffff17 	ldw	r3,-4(fp)
    f9e4:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    f9e8:	e0bffe17 	ldw	r2,-8(fp)
    f9ec:	00c00fc4 	movi	r3,63
    f9f0:	10c01405 	stb	r3,80(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    f9f4:	e0bffe17 	ldw	r2,-8(fp)
    f9f8:	10001445 	stb	zero,81(r2)
#endif
        ptcb1++;
    f9fc:	e0bffe17 	ldw	r2,-8(fp)
    fa00:	10801c04 	addi	r2,r2,112
    fa04:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    fa08:	e0bfff17 	ldw	r2,-4(fp)
    fa0c:	10801c04 	addi	r2,r2,112
    fa10:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    fa14:	e0bffd03 	ldbu	r2,-12(fp)
    fa18:	10800044 	addi	r2,r2,1
    fa1c:	e0bffd05 	stb	r2,-12(fp)
    fa20:	e0bffd03 	ldbu	r2,-12(fp)
    fa24:	108002f0 	cmpltui	r2,r2,11
    fa28:	103fec1e 	bne	r2,zero,f9dc <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    fa2c:	e0bffe17 	ldw	r2,-8(fp)
    fa30:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    fa34:	e0bffe17 	ldw	r2,-8(fp)
    fa38:	00c00fc4 	movi	r3,63
    fa3c:	10c01405 	stb	r3,80(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    fa40:	e0bffe17 	ldw	r2,-8(fp)
    fa44:	10001445 	stb	zero,81(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    fa48:	d027f415 	stw	zero,-24624(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
    fa4c:	008000b4 	movhi	r2,2
    fa50:	10935b04 	addi	r2,r2,19820
    fa54:	d0a7f815 	stw	r2,-24608(gp)
}
    fa58:	0001883a 	nop
    fa5c:	e037883a 	mov	sp,fp
    fa60:	dfc00117 	ldw	ra,4(sp)
    fa64:	df000017 	ldw	fp,0(sp)
    fa68:	dec00204 	addi	sp,sp,8
    fa6c:	f800283a 	ret

0000fa70 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    fa70:	defffd04 	addi	sp,sp,-12
    fa74:	df000215 	stw	fp,8(sp)
    fa78:	df000204 	addi	fp,sp,8
    fa7c:	e13ffe15 	stw	r4,-8(fp)
    fa80:	2805883a 	mov	r2,r5
    fa84:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    fa88:	00000706 	br	faa8 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    fa8c:	e0bffe17 	ldw	r2,-8(fp)
    fa90:	10c00044 	addi	r3,r2,1
    fa94:	e0fffe15 	stw	r3,-8(fp)
    fa98:	10000005 	stb	zero,0(r2)
        size--;
    fa9c:	e0bfff0b 	ldhu	r2,-4(fp)
    faa0:	10bfffc4 	addi	r2,r2,-1
    faa4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    faa8:	e0bfff0b 	ldhu	r2,-4(fp)
    faac:	103ff71e 	bne	r2,zero,fa8c <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    fab0:	0001883a 	nop
    fab4:	e037883a 	mov	sp,fp
    fab8:	df000017 	ldw	fp,0(sp)
    fabc:	dec00104 	addi	sp,sp,4
    fac0:	f800283a 	ret

0000fac4 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    fac4:	defffc04 	addi	sp,sp,-16
    fac8:	df000315 	stw	fp,12(sp)
    facc:	df000304 	addi	fp,sp,12
    fad0:	e13ffd15 	stw	r4,-12(fp)
    fad4:	e17ffe15 	stw	r5,-8(fp)
    fad8:	3005883a 	mov	r2,r6
    fadc:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    fae0:	00000b06 	br	fb10 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
    fae4:	e0bffd17 	ldw	r2,-12(fp)
    fae8:	10c00044 	addi	r3,r2,1
    faec:	e0fffd15 	stw	r3,-12(fp)
    faf0:	e0fffe17 	ldw	r3,-8(fp)
    faf4:	19000044 	addi	r4,r3,1
    faf8:	e13ffe15 	stw	r4,-8(fp)
    fafc:	18c00003 	ldbu	r3,0(r3)
    fb00:	10c00005 	stb	r3,0(r2)
        size--;
    fb04:	e0bfff0b 	ldhu	r2,-4(fp)
    fb08:	10bfffc4 	addi	r2,r2,-1
    fb0c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    fb10:	e0bfff0b 	ldhu	r2,-4(fp)
    fb14:	103ff31e 	bne	r2,zero,fae4 <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
    fb18:	0001883a 	nop
    fb1c:	e037883a 	mov	sp,fp
    fb20:	df000017 	ldw	fp,0(sp)
    fb24:	dec00104 	addi	sp,sp,4
    fb28:	f800283a 	ret

0000fb2c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    fb2c:	defffb04 	addi	sp,sp,-20
    fb30:	dfc00415 	stw	ra,16(sp)
    fb34:	df000315 	stw	fp,12(sp)
    fb38:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    fb3c:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fb40:	0005303a 	rdctl	r2,status
    fb44:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fb48:	e0ffff17 	ldw	r3,-4(fp)
    fb4c:	00bfff84 	movi	r2,-2
    fb50:	1884703a 	and	r2,r3,r2
    fb54:	1001703a 	wrctl	status,r2
  
  return context;
    fb58:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
    fb5c:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    fb60:	d0a7ff03 	ldbu	r2,-24580(gp)
    fb64:	10803fcc 	andi	r2,r2,255
    fb68:	10001a1e 	bne	r2,zero,fbd4 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    fb6c:	d0a7f103 	ldbu	r2,-24636(gp)
    fb70:	10803fcc 	andi	r2,r2,255
    fb74:	1000171e 	bne	r2,zero,fbd4 <OS_Sched+0xa8>
            OS_SchedNew();
    fb78:	000fbfc0 	call	fbfc <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    fb7c:	d0e7f303 	ldbu	r3,-24628(gp)
    fb80:	d0a7f343 	ldbu	r2,-24627(gp)
    fb84:	18c03fcc 	andi	r3,r3,255
    fb88:	10803fcc 	andi	r2,r2,255
    fb8c:	18801126 	beq	r3,r2,fbd4 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    fb90:	d0a7f303 	ldbu	r2,-24628(gp)
    fb94:	10c03fcc 	andi	r3,r2,255
    fb98:	008000b4 	movhi	r2,2
    fb9c:	1094ab04 	addi	r2,r2,21164
    fba0:	18c7883a 	add	r3,r3,r3
    fba4:	18c7883a 	add	r3,r3,r3
    fba8:	10c5883a 	add	r2,r2,r3
    fbac:	10800017 	ldw	r2,0(r2)
    fbb0:	d0a7fb15 	stw	r2,-24596(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    fbb4:	d0a7fb17 	ldw	r2,-24596(gp)
    fbb8:	10c00f17 	ldw	r3,60(r2)
    fbbc:	18c00044 	addi	r3,r3,1
    fbc0:	10c00f15 	stw	r3,60(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    fbc4:	d0a7f617 	ldw	r2,-24616(gp)
    fbc8:	10800044 	addi	r2,r2,1
    fbcc:	d0a7f615 	stw	r2,-24616(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
    fbd0:	0018e4c0 	call	18e4c <OSCtxSw>
    fbd4:	e0bffd17 	ldw	r2,-12(fp)
    fbd8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fbdc:	e0bffe17 	ldw	r2,-8(fp)
    fbe0:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    fbe4:	0001883a 	nop
    fbe8:	e037883a 	mov	sp,fp
    fbec:	dfc00117 	ldw	ra,4(sp)
    fbf0:	df000017 	ldw	fp,0(sp)
    fbf4:	dec00204 	addi	sp,sp,8
    fbf8:	f800283a 	ret

0000fbfc <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    fbfc:	defffe04 	addi	sp,sp,-8
    fc00:	df000115 	stw	fp,4(sp)
    fc04:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    fc08:	d0a7fd03 	ldbu	r2,-24588(gp)
    fc0c:	10c03fcc 	andi	r3,r2,255
    fc10:	008000b4 	movhi	r2,2
    fc14:	10a80704 	addi	r2,r2,-24548
    fc18:	10c5883a 	add	r2,r2,r3
    fc1c:	10800003 	ldbu	r2,0(r2)
    fc20:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    fc24:	e0bfff03 	ldbu	r2,-4(fp)
    fc28:	100490fa 	slli	r2,r2,3
    fc2c:	1009883a 	mov	r4,r2
    fc30:	e0ffff03 	ldbu	r3,-4(fp)
    fc34:	d0a7fd44 	addi	r2,gp,-24587
    fc38:	1885883a 	add	r2,r3,r2
    fc3c:	10800003 	ldbu	r2,0(r2)
    fc40:	10c03fcc 	andi	r3,r2,255
    fc44:	008000b4 	movhi	r2,2
    fc48:	10a80704 	addi	r2,r2,-24548
    fc4c:	10c5883a 	add	r2,r2,r3
    fc50:	10800003 	ldbu	r2,0(r2)
    fc54:	2085883a 	add	r2,r4,r2
    fc58:	d0a7f305 	stb	r2,-24628(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    fc5c:	0001883a 	nop
    fc60:	e037883a 	mov	sp,fp
    fc64:	df000017 	ldw	fp,0(sp)
    fc68:	dec00104 	addi	sp,sp,4
    fc6c:	f800283a 	ret

0000fc70 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    fc70:	defffc04 	addi	sp,sp,-16
    fc74:	df000315 	stw	fp,12(sp)
    fc78:	df000304 	addi	fp,sp,12
    fc7c:	e13ffe15 	stw	r4,-8(fp)
    fc80:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
    fc84:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
    fc88:	00000b06 	br	fcb8 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
    fc8c:	e0bffe17 	ldw	r2,-8(fp)
    fc90:	10c00044 	addi	r3,r2,1
    fc94:	e0fffe15 	stw	r3,-8(fp)
    fc98:	e0ffff17 	ldw	r3,-4(fp)
    fc9c:	19000044 	addi	r4,r3,1
    fca0:	e13fff15 	stw	r4,-4(fp)
    fca4:	18c00003 	ldbu	r3,0(r3)
    fca8:	10c00005 	stb	r3,0(r2)
        len++;
    fcac:	e0bffd03 	ldbu	r2,-12(fp)
    fcb0:	10800044 	addi	r2,r2,1
    fcb4:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    fcb8:	e0bfff17 	ldw	r2,-4(fp)
    fcbc:	10800003 	ldbu	r2,0(r2)
    fcc0:	10803fcc 	andi	r2,r2,255
    fcc4:	103ff11e 	bne	r2,zero,fc8c <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    fcc8:	e0bffe17 	ldw	r2,-8(fp)
    fccc:	10000005 	stb	zero,0(r2)
    return (len);
    fcd0:	e0bffd03 	ldbu	r2,-12(fp)
}
    fcd4:	e037883a 	mov	sp,fp
    fcd8:	df000017 	ldw	fp,0(sp)
    fcdc:	dec00104 	addi	sp,sp,4
    fce0:	f800283a 	ret

0000fce4 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    fce4:	defffd04 	addi	sp,sp,-12
    fce8:	df000215 	stw	fp,8(sp)
    fcec:	df000204 	addi	fp,sp,8
    fcf0:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
    fcf4:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
    fcf8:	00000606 	br	fd14 <OS_StrLen+0x30>
        psrc++;
    fcfc:	e0bfff17 	ldw	r2,-4(fp)
    fd00:	10800044 	addi	r2,r2,1
    fd04:	e0bfff15 	stw	r2,-4(fp)
        len++;
    fd08:	e0bffe03 	ldbu	r2,-8(fp)
    fd0c:	10800044 	addi	r2,r2,1
    fd10:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    fd14:	e0bfff17 	ldw	r2,-4(fp)
    fd18:	10800003 	ldbu	r2,0(r2)
    fd1c:	10803fcc 	andi	r2,r2,255
    fd20:	103ff61e 	bne	r2,zero,fcfc <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
    fd24:	e0bffe03 	ldbu	r2,-8(fp)
}
    fd28:	e037883a 	mov	sp,fp
    fd2c:	df000017 	ldw	fp,0(sp)
    fd30:	dec00104 	addi	sp,sp,4
    fd34:	f800283a 	ret

0000fd38 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    fd38:	defffa04 	addi	sp,sp,-24
    fd3c:	dfc00515 	stw	ra,20(sp)
    fd40:	df000415 	stw	fp,16(sp)
    fd44:	df000404 	addi	fp,sp,16
    fd48:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    fd4c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fd50:	0005303a 	rdctl	r2,status
    fd54:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fd58:	e0fffd17 	ldw	r3,-12(fp)
    fd5c:	00bfff84 	movi	r2,-2
    fd60:	1884703a 	and	r2,r3,r2
    fd64:	1001703a 	wrctl	status,r2
  
  return context;
    fd68:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    fd6c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
    fd70:	d0a7f217 	ldw	r2,-24632(gp)
    fd74:	10800044 	addi	r2,r2,1
    fd78:	d0a7f215 	stw	r2,-24632(gp)
    fd7c:	e0bffc17 	ldw	r2,-16(fp)
    fd80:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fd84:	e0bffe17 	ldw	r2,-8(fp)
    fd88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    fd8c:	00191600 	call	19160 <OSTaskIdleHook>
    }
    fd90:	003fef06 	br	fd50 <OS_TaskIdle+0x18>

0000fd94 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    fd94:	defff804 	addi	sp,sp,-32
    fd98:	dfc00715 	stw	ra,28(sp)
    fd9c:	df000615 	stw	fp,24(sp)
    fda0:	dc400515 	stw	r17,20(sp)
    fda4:	dc000415 	stw	r16,16(sp)
    fda8:	df000604 	addi	fp,sp,24
    fdac:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    fdb0:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    fdb4:	00000206 	br	fdc0 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    fdb8:	01000044 	movi	r4,1
    fdbc:	00154380 	call	15438 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    fdc0:	d0a80303 	ldbu	r2,-24564(gp)
    fdc4:	10803fcc 	andi	r2,r2,255
    fdc8:	103ffb26 	beq	r2,zero,fdb8 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    fdcc:	d0e7f717 	ldw	r3,-24612(gp)
    fdd0:	00947b34 	movhi	r2,20972
    fdd4:	10a147c4 	addi	r2,r2,-31457
    fdd8:	1888383a 	mulxuu	r4,r3,r2
    fddc:	1885383a 	mul	r2,r3,r2
    fde0:	1021883a 	mov	r16,r2
    fde4:	2023883a 	mov	r17,r4
    fde8:	8804d17a 	srli	r2,r17,5
    fdec:	d0a7f715 	stw	r2,-24612(gp)
    if (OSIdleCtrMax == 0L) {
    fdf0:	d0a7f717 	ldw	r2,-24612(gp)
    fdf4:	1000031e 	bne	r2,zero,fe04 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
    fdf8:	d027f905 	stb	zero,-24604(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
    fdfc:	01003fc4 	movi	r4,255
    fe00:	00150c00 	call	150c0 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fe04:	0005303a 	rdctl	r2,status
    fe08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fe0c:	e0fffb17 	ldw	r3,-20(fp)
    fe10:	00bfff84 	movi	r2,-2
    fe14:	1884703a 	and	r2,r3,r2
    fe18:	1001703a 	wrctl	status,r2
  
  return context;
    fe1c:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    fe20:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    fe24:	d0a7f217 	ldw	r2,-24632(gp)
    fe28:	d0a80415 	stw	r2,-24560(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    fe2c:	d027f215 	stw	zero,-24632(gp)
    fe30:	e0bffa17 	ldw	r2,-24(fp)
    fe34:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fe38:	e0bffc17 	ldw	r2,-16(fp)
    fe3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    fe40:	d0e80417 	ldw	r3,-24560(gp)
    fe44:	d0a7f717 	ldw	r2,-24612(gp)
    fe48:	1885203a 	divu	r2,r3,r2
    fe4c:	1007883a 	mov	r3,r2
    fe50:	00801904 	movi	r2,100
    fe54:	10c5c83a 	sub	r2,r2,r3
    fe58:	d0a7f905 	stb	r2,-24604(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    fe5c:	00190e00 	call	190e0 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    fe60:	000fe700 	call	fe70 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    fe64:	0009883a 	mov	r4,zero
    fe68:	00154380 	call	15438 <OSTimeDly>
    }
    fe6c:	003fe506 	br	fe04 <OS_TaskStat+0x70>

0000fe70 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    fe70:	defffa04 	addi	sp,sp,-24
    fe74:	dfc00515 	stw	ra,20(sp)
    fe78:	df000415 	stw	fp,16(sp)
    fe7c:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    fe80:	e03ffc05 	stb	zero,-16(fp)
    fe84:	00002406 	br	ff18 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
    fe88:	e0bffc03 	ldbu	r2,-16(fp)
    fe8c:	e0fffe04 	addi	r3,fp,-8
    fe90:	180b883a 	mov	r5,r3
    fe94:	1009883a 	mov	r4,r2
    fe98:	0014f000 	call	14f00 <OSTaskStkChk>
    fe9c:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
    fea0:	e0bffc43 	ldbu	r2,-15(fp)
    fea4:	1000191e 	bne	r2,zero,ff0c <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
    fea8:	e0fffc03 	ldbu	r3,-16(fp)
    feac:	008000b4 	movhi	r2,2
    feb0:	1094ab04 	addi	r2,r2,21164
    feb4:	18c7883a 	add	r3,r3,r3
    feb8:	18c7883a 	add	r3,r3,r3
    febc:	10c5883a 	add	r2,r2,r3
    fec0:	10800017 	ldw	r2,0(r2)
    fec4:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    fec8:	e0bffd17 	ldw	r2,-12(fp)
    fecc:	10000f26 	beq	r2,zero,ff0c <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    fed0:	e0bffd17 	ldw	r2,-12(fp)
    fed4:	10800060 	cmpeqi	r2,r2,1
    fed8:	10000c1e 	bne	r2,zero,ff0c <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    fedc:	e0bffd17 	ldw	r2,-12(fp)
    fee0:	10c00217 	ldw	r3,8(r2)
    fee4:	e0bffd17 	ldw	r2,-12(fp)
    fee8:	10800317 	ldw	r2,12(r2)
    feec:	1085883a 	add	r2,r2,r2
    fef0:	1085883a 	add	r2,r2,r2
    fef4:	1887883a 	add	r3,r3,r2
    fef8:	e0bffd17 	ldw	r2,-12(fp)
    fefc:	10c01215 	stw	r3,72(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    ff00:	e0ffff17 	ldw	r3,-4(fp)
    ff04:	e0bffd17 	ldw	r2,-12(fp)
    ff08:	10c01315 	stw	r3,76(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    ff0c:	e0bffc03 	ldbu	r2,-16(fp)
    ff10:	10800044 	addi	r2,r2,1
    ff14:	e0bffc05 	stb	r2,-16(fp)
    ff18:	e0bffc03 	ldbu	r2,-16(fp)
    ff1c:	10800570 	cmpltui	r2,r2,21
    ff20:	103fd91e 	bne	r2,zero,fe88 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
    ff24:	0001883a 	nop
    ff28:	e037883a 	mov	sp,fp
    ff2c:	dfc00117 	ldw	ra,4(sp)
    ff30:	df000017 	ldw	fp,0(sp)
    ff34:	dec00204 	addi	sp,sp,8
    ff38:	f800283a 	ret

0000ff3c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    ff3c:	defff204 	addi	sp,sp,-56
    ff40:	dfc00d15 	stw	ra,52(sp)
    ff44:	df000c15 	stw	fp,48(sp)
    ff48:	df000c04 	addi	fp,sp,48
    ff4c:	e17ffc15 	stw	r5,-16(fp)
    ff50:	e1bffd15 	stw	r6,-12(fp)
    ff54:	3807883a 	mov	r3,r7
    ff58:	e0800417 	ldw	r2,16(fp)
    ff5c:	e13ffb05 	stb	r4,-20(fp)
    ff60:	e0fffe0d 	sth	r3,-8(fp)
    ff64:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    ff68:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ff6c:	0005303a 	rdctl	r2,status
    ff70:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ff74:	e0fffa17 	ldw	r3,-24(fp)
    ff78:	00bfff84 	movi	r2,-2
    ff7c:	1884703a 	and	r2,r3,r2
    ff80:	1001703a 	wrctl	status,r2
  
  return context;
    ff84:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
    ff88:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    ff8c:	d0a7f817 	ldw	r2,-24608(gp)
    ff90:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
    ff94:	e0bff617 	ldw	r2,-40(fp)
    ff98:	10009326 	beq	r2,zero,101e8 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    ff9c:	e0bff617 	ldw	r2,-40(fp)
    ffa0:	10800517 	ldw	r2,20(r2)
    ffa4:	d0a7f815 	stw	r2,-24608(gp)
    ffa8:	e0bff417 	ldw	r2,-48(fp)
    ffac:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ffb0:	e0bff817 	ldw	r2,-32(fp)
    ffb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    ffb8:	e0bff617 	ldw	r2,-40(fp)
    ffbc:	e0fffc17 	ldw	r3,-16(fp)
    ffc0:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    ffc4:	e0bff617 	ldw	r2,-40(fp)
    ffc8:	e0fffb03 	ldbu	r3,-20(fp)
    ffcc:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    ffd0:	e0bff617 	ldw	r2,-40(fp)
    ffd4:	10000c85 	stb	zero,50(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    ffd8:	e0bff617 	ldw	r2,-40(fp)
    ffdc:	10000cc5 	stb	zero,51(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    ffe0:	e0bff617 	ldw	r2,-40(fp)
    ffe4:	10000c0d 	sth	zero,48(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    ffe8:	e0bff617 	ldw	r2,-40(fp)
    ffec:	e0c00317 	ldw	r3,12(fp)
    fff0:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    fff4:	e0bff617 	ldw	r2,-40(fp)
    fff8:	e0c00217 	ldw	r3,8(fp)
    fffc:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   10000:	e0bff617 	ldw	r2,-40(fp)
   10004:	e0fffd17 	ldw	r3,-12(fp)
   10008:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   1000c:	e0bff617 	ldw	r2,-40(fp)
   10010:	e0ffff0b 	ldhu	r3,-4(fp)
   10014:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   10018:	e0bff617 	ldw	r2,-40(fp)
   1001c:	e0fffe0b 	ldhu	r3,-8(fp)
   10020:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   10024:	e0bff617 	ldw	r2,-40(fp)
   10028:	10000e45 	stb	zero,57(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   1002c:	e0bffb03 	ldbu	r2,-20(fp)
   10030:	1004d0fa 	srli	r2,r2,3
   10034:	1007883a 	mov	r3,r2
   10038:	e0bff617 	ldw	r2,-40(fp)
   1003c:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   10040:	e0bffb03 	ldbu	r2,-20(fp)
   10044:	108001cc 	andi	r2,r2,7
   10048:	1007883a 	mov	r3,r2
   1004c:	e0bff617 	ldw	r2,-40(fp)
   10050:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   10054:	e0bff617 	ldw	r2,-40(fp)
   10058:	10800d83 	ldbu	r2,54(r2)
   1005c:	10803fcc 	andi	r2,r2,255
   10060:	00c00044 	movi	r3,1
   10064:	1884983a 	sll	r2,r3,r2
   10068:	1007883a 	mov	r3,r2
   1006c:	e0bff617 	ldw	r2,-40(fp)
   10070:	10c00e05 	stb	r3,56(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   10074:	e0bff617 	ldw	r2,-40(fp)
   10078:	10800d43 	ldbu	r2,53(r2)
   1007c:	10803fcc 	andi	r2,r2,255
   10080:	00c00044 	movi	r3,1
   10084:	1884983a 	sll	r2,r3,r2
   10088:	1007883a 	mov	r3,r2
   1008c:	e0bff617 	ldw	r2,-40(fp)
   10090:	10c00dc5 	stb	r3,55(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   10094:	e0bff617 	ldw	r2,-40(fp)
   10098:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   1009c:	e0bff617 	ldw	r2,-40(fp)
   100a0:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   100a4:	e0bff617 	ldw	r2,-40(fp)
   100a8:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   100ac:	e0bff617 	ldw	r2,-40(fp)
   100b0:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   100b4:	e0bff617 	ldw	r2,-40(fp)
   100b8:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBCyclesStart = 0L;
   100bc:	e0bff617 	ldw	r2,-40(fp)
   100c0:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   100c4:	e0bff617 	ldw	r2,-40(fp)
   100c8:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   100cc:	e0bff617 	ldw	r2,-40(fp)
   100d0:	10001215 	stw	zero,72(r2)
        ptcb->OSTCBStkUsed     = 0L;
   100d4:	e0bff617 	ldw	r2,-40(fp)
   100d8:	10001315 	stw	zero,76(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   100dc:	e0bff617 	ldw	r2,-40(fp)
   100e0:	00c00fc4 	movi	r3,63
   100e4:	10c01405 	stb	r3,80(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   100e8:	e0bff617 	ldw	r2,-40(fp)
   100ec:	10001445 	stb	zero,81(r2)
#endif

        OSTCBInitHook(ptcb);
   100f0:	e13ff617 	ldw	r4,-40(fp)
   100f4:	00191800 	call	19180 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   100f8:	e13ff617 	ldw	r4,-40(fp)
   100fc:	00190780 	call	19078 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10100:	0005303a 	rdctl	r2,status
   10104:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10108:	e0fff517 	ldw	r3,-44(fp)
   1010c:	00bfff84 	movi	r2,-2
   10110:	1884703a 	and	r2,r3,r2
   10114:	1001703a 	wrctl	status,r2
  
  return context;
   10118:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
   1011c:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   10120:	e0fffb03 	ldbu	r3,-20(fp)
   10124:	008000b4 	movhi	r2,2
   10128:	1094ab04 	addi	r2,r2,21164
   1012c:	18c7883a 	add	r3,r3,r3
   10130:	18c7883a 	add	r3,r3,r3
   10134:	10c5883a 	add	r2,r2,r3
   10138:	e0fff617 	ldw	r3,-40(fp)
   1013c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   10140:	d0e7f417 	ldw	r3,-24624(gp)
   10144:	e0bff617 	ldw	r2,-40(fp)
   10148:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   1014c:	e0bff617 	ldw	r2,-40(fp)
   10150:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   10154:	d0a7f417 	ldw	r2,-24624(gp)
   10158:	10000326 	beq	r2,zero,10168 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   1015c:	d0a7f417 	ldw	r2,-24624(gp)
   10160:	e0fff617 	ldw	r3,-40(fp)
   10164:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   10168:	e0bff617 	ldw	r2,-40(fp)
   1016c:	d0a7f415 	stw	r2,-24624(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   10170:	e0bff617 	ldw	r2,-40(fp)
   10174:	10c00e03 	ldbu	r3,56(r2)
   10178:	d0a7fd03 	ldbu	r2,-24588(gp)
   1017c:	1884b03a 	or	r2,r3,r2
   10180:	d0a7fd05 	stb	r2,-24588(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   10184:	e0bff617 	ldw	r2,-40(fp)
   10188:	10800d83 	ldbu	r2,54(r2)
   1018c:	10c03fcc 	andi	r3,r2,255
   10190:	e0bff617 	ldw	r2,-40(fp)
   10194:	10800d83 	ldbu	r2,54(r2)
   10198:	11003fcc 	andi	r4,r2,255
   1019c:	d0a7fd44 	addi	r2,gp,-24587
   101a0:	2085883a 	add	r2,r4,r2
   101a4:	11000003 	ldbu	r4,0(r2)
   101a8:	e0bff617 	ldw	r2,-40(fp)
   101ac:	10800dc3 	ldbu	r2,55(r2)
   101b0:	2084b03a 	or	r2,r4,r2
   101b4:	1009883a 	mov	r4,r2
   101b8:	d0a7fd44 	addi	r2,gp,-24587
   101bc:	1885883a 	add	r2,r3,r2
   101c0:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   101c4:	d0a7f943 	ldbu	r2,-24603(gp)
   101c8:	10800044 	addi	r2,r2,1
   101cc:	d0a7f945 	stb	r2,-24603(gp)
   101d0:	e0bff417 	ldw	r2,-48(fp)
   101d4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   101d8:	e0bff717 	ldw	r2,-36(fp)
   101dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   101e0:	0005883a 	mov	r2,zero
   101e4:	00000506 	br	101fc <OS_TCBInit+0x2c0>
   101e8:	e0bff417 	ldw	r2,-48(fp)
   101ec:	e0bff915 	stw	r2,-28(fp)
   101f0:	e0bff917 	ldw	r2,-28(fp)
   101f4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   101f8:	00801084 	movi	r2,66
}
   101fc:	e037883a 	mov	sp,fp
   10200:	dfc00117 	ldw	ra,4(sp)
   10204:	df000017 	ldw	fp,0(sp)
   10208:	dec00204 	addi	sp,sp,8
   1020c:	f800283a 	ret

00010210 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   10210:	defffe04 	addi	sp,sp,-8
   10214:	df000115 	stw	fp,4(sp)
   10218:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   1021c:	d0a01104 	addi	r2,gp,-32700
   10220:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   10224:	d0a01204 	addi	r2,gp,-32696
   10228:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   1022c:	d0a01384 	addi	r2,gp,-32690
   10230:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   10234:	d0a01404 	addi	r2,gp,-32688
   10238:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   1023c:	d0a01304 	addi	r2,gp,-32692
   10240:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   10244:	d0a01484 	addi	r2,gp,-32686
   10248:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   1024c:	d0a01504 	addi	r2,gp,-32684
   10250:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   10254:	d0a01584 	addi	r2,gp,-32682
   10258:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   1025c:	d0a01604 	addi	r2,gp,-32680
   10260:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   10264:	d0a01684 	addi	r2,gp,-32678
   10268:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   1026c:	d0a01704 	addi	r2,gp,-32676
   10270:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   10274:	d0a01784 	addi	r2,gp,-32674
   10278:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   1027c:	d0a01804 	addi	r2,gp,-32672
   10280:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   10284:	d0a01884 	addi	r2,gp,-32670
   10288:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   1028c:	d0a01904 	addi	r2,gp,-32668
   10290:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   10294:	d0a01984 	addi	r2,gp,-32666
   10298:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   1029c:	d0a01a04 	addi	r2,gp,-32664
   102a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   102a4:	d0a01a84 	addi	r2,gp,-32662
   102a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   102ac:	d0a01b04 	addi	r2,gp,-32660
   102b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   102b4:	d0a01b84 	addi	r2,gp,-32658
   102b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   102bc:	d0a01c04 	addi	r2,gp,-32656
   102c0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   102c4:	d0a01c84 	addi	r2,gp,-32654
   102c8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   102cc:	d0a01d04 	addi	r2,gp,-32652
   102d0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   102d4:	d0a01d84 	addi	r2,gp,-32650
   102d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   102dc:	d0a01e04 	addi	r2,gp,-32648
   102e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   102e4:	d0a01e84 	addi	r2,gp,-32646
   102e8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   102ec:	d0a01f04 	addi	r2,gp,-32644
   102f0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   102f4:	d0a01f84 	addi	r2,gp,-32642
   102f8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   102fc:	d0a02004 	addi	r2,gp,-32640
   10300:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   10304:	d0a02084 	addi	r2,gp,-32638
   10308:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   1030c:	d0a02104 	addi	r2,gp,-32636
   10310:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   10314:	d0a02184 	addi	r2,gp,-32634
   10318:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   1031c:	d0a02204 	addi	r2,gp,-32632
   10320:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   10324:	d0a02284 	addi	r2,gp,-32630
   10328:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   1032c:	d0a02304 	addi	r2,gp,-32628
   10330:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   10334:	d0a02384 	addi	r2,gp,-32626
   10338:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   1033c:	d0a02404 	addi	r2,gp,-32624
   10340:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   10344:	d0a02484 	addi	r2,gp,-32622
   10348:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   1034c:	d0a02504 	addi	r2,gp,-32620
   10350:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   10354:	d0a02584 	addi	r2,gp,-32618
   10358:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   1035c:	d0a02604 	addi	r2,gp,-32616
   10360:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   10364:	d0a02684 	addi	r2,gp,-32614
   10368:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   1036c:	d0a02704 	addi	r2,gp,-32612
   10370:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   10374:	d0a02784 	addi	r2,gp,-32610
   10378:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   1037c:	d0a02804 	addi	r2,gp,-32608
   10380:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   10384:	d0a02d04 	addi	r2,gp,-32588
   10388:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   1038c:	0001883a 	nop
   10390:	e037883a 	mov	sp,fp
   10394:	df000017 	ldw	fp,0(sp)
   10398:	dec00104 	addi	sp,sp,4
   1039c:	f800283a 	ret

000103a0 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   103a0:	defff104 	addi	sp,sp,-60
   103a4:	df000e15 	stw	fp,56(sp)
   103a8:	df000e04 	addi	fp,sp,56
   103ac:	e13ffc15 	stw	r4,-16(fp)
   103b0:	e17ffd15 	stw	r5,-12(fp)
   103b4:	3005883a 	mov	r2,r6
   103b8:	e1ffff15 	stw	r7,-4(fp)
   103bc:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   103c0:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   103c4:	e0bfff17 	ldw	r2,-4(fp)
   103c8:	1000021e 	bne	r2,zero,103d4 <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
   103cc:	0005883a 	mov	r2,zero
   103d0:	0000a806 	br	10674 <OSFlagAccept+0x2d4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   103d4:	e0bffc17 	ldw	r2,-16(fp)
   103d8:	1000051e 	bne	r2,zero,103f0 <OSFlagAccept+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   103dc:	e0bfff17 	ldw	r2,-4(fp)
   103e0:	00c01b84 	movi	r3,110
   103e4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   103e8:	0005883a 	mov	r2,zero
   103ec:	0000a106 	br	10674 <OSFlagAccept+0x2d4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   103f0:	e0bffc17 	ldw	r2,-16(fp)
   103f4:	10800003 	ldbu	r2,0(r2)
   103f8:	10803fcc 	andi	r2,r2,255
   103fc:	10800160 	cmpeqi	r2,r2,5
   10400:	1000051e 	bne	r2,zero,10418 <OSFlagAccept+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   10404:	e0bfff17 	ldw	r2,-4(fp)
   10408:	00c00044 	movi	r3,1
   1040c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10410:	0005883a 	mov	r2,zero
   10414:	00009706 	br	10674 <OSFlagAccept+0x2d4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   10418:	e0fffe03 	ldbu	r3,-8(fp)
   1041c:	00bfe004 	movi	r2,-128
   10420:	1884703a 	and	r2,r3,r2
   10424:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   10428:	e0bff503 	ldbu	r2,-44(fp)
   1042c:	10000626 	beq	r2,zero,10448 <OSFlagAccept+0xa8>
        wait_type &= ~OS_FLAG_CONSUME;
   10430:	e0bffe03 	ldbu	r2,-8(fp)
   10434:	10801fcc 	andi	r2,r2,127
   10438:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   1043c:	00800044 	movi	r2,1
   10440:	e0bff305 	stb	r2,-52(fp)
   10444:	00000106 	br	1044c <OSFlagAccept+0xac>
    } else {
        consume    = OS_FALSE;
   10448:	e03ff305 	stb	zero,-52(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   1044c:	e0bfff17 	ldw	r2,-4(fp)
   10450:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10454:	0005303a 	rdctl	r2,status
   10458:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1045c:	e0fffb17 	ldw	r3,-20(fp)
   10460:	00bfff84 	movi	r2,-2
   10464:	1884703a 	and	r2,r3,r2
   10468:	1001703a 	wrctl	status,r2
  
  return context;
   1046c:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   10470:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   10474:	e0bffe03 	ldbu	r2,-8(fp)
   10478:	10c00060 	cmpeqi	r3,r2,1
   1047c:	1800591e 	bne	r3,zero,105e4 <OSFlagAccept+0x244>
   10480:	10c00088 	cmpgei	r3,r2,2
   10484:	1800021e 	bne	r3,zero,10490 <OSFlagAccept+0xf0>
   10488:	10003b26 	beq	r2,zero,10578 <OSFlagAccept+0x1d8>
   1048c:	00006f06 	br	1064c <OSFlagAccept+0x2ac>
   10490:	10c000a0 	cmpeqi	r3,r2,2
   10494:	1800031e 	bne	r3,zero,104a4 <OSFlagAccept+0x104>
   10498:	108000e0 	cmpeqi	r2,r2,3
   1049c:	10001c1e 	bne	r2,zero,10510 <OSFlagAccept+0x170>
   104a0:	00006a06 	br	1064c <OSFlagAccept+0x2ac>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   104a4:	e0bffc17 	ldw	r2,-16(fp)
   104a8:	10c00217 	ldw	r3,8(r2)
   104ac:	e0bffd17 	ldw	r2,-12(fp)
   104b0:	1884703a 	and	r2,r3,r2
   104b4:	e0bff215 	stw	r2,-56(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   104b8:	e0fff217 	ldw	r3,-56(fp)
   104bc:	e0bffd17 	ldw	r2,-12(fp)
   104c0:	18800b1e 	bne	r3,r2,104f0 <OSFlagAccept+0x150>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   104c4:	e0bff303 	ldbu	r2,-52(fp)
   104c8:	10800058 	cmpnei	r2,r2,1
   104cc:	10000b1e 	bne	r2,zero,104fc <OSFlagAccept+0x15c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   104d0:	e0bffc17 	ldw	r2,-16(fp)
   104d4:	10c00217 	ldw	r3,8(r2)
   104d8:	e0bff217 	ldw	r2,-56(fp)
   104dc:	0084303a 	nor	r2,zero,r2
   104e0:	1886703a 	and	r3,r3,r2
   104e4:	e0bffc17 	ldw	r2,-16(fp)
   104e8:	10c00215 	stw	r3,8(r2)
   104ec:	00000306 	br	104fc <OSFlagAccept+0x15c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   104f0:	e0bfff17 	ldw	r2,-4(fp)
   104f4:	00c01c04 	movi	r3,112
   104f8:	10c00005 	stb	r3,0(r2)
   104fc:	e0bff417 	ldw	r2,-48(fp)
   10500:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10504:	e0bff617 	ldw	r2,-40(fp)
   10508:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1050c:	00005806 	br	10670 <OSFlagAccept+0x2d0>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   10510:	e0bffc17 	ldw	r2,-16(fp)
   10514:	10c00217 	ldw	r3,8(r2)
   10518:	e0bffd17 	ldw	r2,-12(fp)
   1051c:	1884703a 	and	r2,r3,r2
   10520:	e0bff215 	stw	r2,-56(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   10524:	e0bff217 	ldw	r2,-56(fp)
   10528:	10000b26 	beq	r2,zero,10558 <OSFlagAccept+0x1b8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1052c:	e0bff303 	ldbu	r2,-52(fp)
   10530:	10800058 	cmpnei	r2,r2,1
   10534:	10000b1e 	bne	r2,zero,10564 <OSFlagAccept+0x1c4>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   10538:	e0bffc17 	ldw	r2,-16(fp)
   1053c:	10c00217 	ldw	r3,8(r2)
   10540:	e0bff217 	ldw	r2,-56(fp)
   10544:	0084303a 	nor	r2,zero,r2
   10548:	1886703a 	and	r3,r3,r2
   1054c:	e0bffc17 	ldw	r2,-16(fp)
   10550:	10c00215 	stw	r3,8(r2)
   10554:	00000306 	br	10564 <OSFlagAccept+0x1c4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   10558:	e0bfff17 	ldw	r2,-4(fp)
   1055c:	00c01c04 	movi	r3,112
   10560:	10c00005 	stb	r3,0(r2)
   10564:	e0bff417 	ldw	r2,-48(fp)
   10568:	e0bff715 	stw	r2,-36(fp)
   1056c:	e0bff717 	ldw	r2,-36(fp)
   10570:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   10574:	00003e06 	br	10670 <OSFlagAccept+0x2d0>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   10578:	e0bffc17 	ldw	r2,-16(fp)
   1057c:	10800217 	ldw	r2,8(r2)
   10580:	0086303a 	nor	r3,zero,r2
   10584:	e0bffd17 	ldw	r2,-12(fp)
   10588:	1884703a 	and	r2,r3,r2
   1058c:	e0bff215 	stw	r2,-56(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   10590:	e0fff217 	ldw	r3,-56(fp)
   10594:	e0bffd17 	ldw	r2,-12(fp)
   10598:	18800a1e 	bne	r3,r2,105c4 <OSFlagAccept+0x224>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1059c:	e0bff303 	ldbu	r2,-52(fp)
   105a0:	10800058 	cmpnei	r2,r2,1
   105a4:	10000a1e 	bne	r2,zero,105d0 <OSFlagAccept+0x230>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   105a8:	e0bffc17 	ldw	r2,-16(fp)
   105ac:	10c00217 	ldw	r3,8(r2)
   105b0:	e0bff217 	ldw	r2,-56(fp)
   105b4:	1886b03a 	or	r3,r3,r2
   105b8:	e0bffc17 	ldw	r2,-16(fp)
   105bc:	10c00215 	stw	r3,8(r2)
   105c0:	00000306 	br	105d0 <OSFlagAccept+0x230>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   105c4:	e0bfff17 	ldw	r2,-4(fp)
   105c8:	00c01c04 	movi	r3,112
   105cc:	10c00005 	stb	r3,0(r2)
   105d0:	e0bff417 	ldw	r2,-48(fp)
   105d4:	e0bff815 	stw	r2,-32(fp)
   105d8:	e0bff817 	ldw	r2,-32(fp)
   105dc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   105e0:	00002306 	br	10670 <OSFlagAccept+0x2d0>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   105e4:	e0bffc17 	ldw	r2,-16(fp)
   105e8:	10800217 	ldw	r2,8(r2)
   105ec:	0086303a 	nor	r3,zero,r2
   105f0:	e0bffd17 	ldw	r2,-12(fp)
   105f4:	1884703a 	and	r2,r3,r2
   105f8:	e0bff215 	stw	r2,-56(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   105fc:	e0bff217 	ldw	r2,-56(fp)
   10600:	10000a26 	beq	r2,zero,1062c <OSFlagAccept+0x28c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10604:	e0bff303 	ldbu	r2,-52(fp)
   10608:	10800058 	cmpnei	r2,r2,1
   1060c:	10000a1e 	bne	r2,zero,10638 <OSFlagAccept+0x298>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   10610:	e0bffc17 	ldw	r2,-16(fp)
   10614:	10c00217 	ldw	r3,8(r2)
   10618:	e0bff217 	ldw	r2,-56(fp)
   1061c:	1886b03a 	or	r3,r3,r2
   10620:	e0bffc17 	ldw	r2,-16(fp)
   10624:	10c00215 	stw	r3,8(r2)
   10628:	00000306 	br	10638 <OSFlagAccept+0x298>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1062c:	e0bfff17 	ldw	r2,-4(fp)
   10630:	00c01c04 	movi	r3,112
   10634:	10c00005 	stb	r3,0(r2)
   10638:	e0bff417 	ldw	r2,-48(fp)
   1063c:	e0bff915 	stw	r2,-28(fp)
   10640:	e0bff917 	ldw	r2,-28(fp)
   10644:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   10648:	00000906 	br	10670 <OSFlagAccept+0x2d0>
   1064c:	e0bff417 	ldw	r2,-48(fp)
   10650:	e0bffa15 	stw	r2,-24(fp)
   10654:	e0bffa17 	ldw	r2,-24(fp)
   10658:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   1065c:	e03ff215 	stw	zero,-56(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   10660:	e0bfff17 	ldw	r2,-4(fp)
   10664:	00c01bc4 	movi	r3,111
   10668:	10c00005 	stb	r3,0(r2)
             break;
   1066c:	0001883a 	nop
    }
    return (flags_rdy);
   10670:	e0bff217 	ldw	r2,-56(fp)
}
   10674:	e037883a 	mov	sp,fp
   10678:	df000017 	ldw	fp,0(sp)
   1067c:	dec00104 	addi	sp,sp,4
   10680:	f800283a 	ret

00010684 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   10684:	defff804 	addi	sp,sp,-32
   10688:	df000715 	stw	fp,28(sp)
   1068c:	df000704 	addi	fp,sp,28
   10690:	e13ffe15 	stw	r4,-8(fp)
   10694:	e17fff15 	stw	r5,-4(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   10698:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   1069c:	e0bfff17 	ldw	r2,-4(fp)
   106a0:	1000021e 	bne	r2,zero,106ac <OSFlagCreate+0x28>
        return ((OS_FLAG_GRP *)0);
   106a4:	0005883a 	mov	r2,zero
   106a8:	00003306 	br	10778 <OSFlagCreate+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   106ac:	d0a7ff03 	ldbu	r2,-24580(gp)
   106b0:	10803fcc 	andi	r2,r2,255
   106b4:	10000526 	beq	r2,zero,106cc <OSFlagCreate+0x48>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   106b8:	e0bfff17 	ldw	r2,-4(fp)
   106bc:	00c00404 	movi	r3,16
   106c0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   106c4:	0005883a 	mov	r2,zero
   106c8:	00002b06 	br	10778 <OSFlagCreate+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   106cc:	0005303a 	rdctl	r2,status
   106d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   106d4:	e0fffd17 	ldw	r3,-12(fp)
   106d8:	00bfff84 	movi	r2,-2
   106dc:	1884703a 	and	r2,r3,r2
   106e0:	1001703a 	wrctl	status,r2
  
  return context;
   106e4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   106e8:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   106ec:	d0a80217 	ldw	r2,-24568(gp)
   106f0:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   106f4:	e0bffb17 	ldw	r2,-20(fp)
   106f8:	10001726 	beq	r2,zero,10758 <OSFlagCreate+0xd4>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   106fc:	d0a80217 	ldw	r2,-24568(gp)
   10700:	10800117 	ldw	r2,4(r2)
   10704:	d0a80215 	stw	r2,-24568(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   10708:	e0bffb17 	ldw	r2,-20(fp)
   1070c:	00c00144 	movi	r3,5
   10710:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   10714:	e0bffb17 	ldw	r2,-20(fp)
   10718:	e0fffe17 	ldw	r3,-8(fp)
   1071c:	10c00215 	stw	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   10720:	e0bffb17 	ldw	r2,-20(fp)
   10724:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   10728:	e0bffb17 	ldw	r2,-20(fp)
   1072c:	00c00fc4 	movi	r3,63
   10730:	10c00305 	stb	r3,12(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   10734:	e0bffb17 	ldw	r2,-20(fp)
   10738:	10000345 	stb	zero,13(r2)
   1073c:	e0bff917 	ldw	r2,-28(fp)
   10740:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10744:	e0bffa17 	ldw	r2,-24(fp)
   10748:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   1074c:	e0bfff17 	ldw	r2,-4(fp)
   10750:	10000005 	stb	zero,0(r2)
   10754:	00000706 	br	10774 <OSFlagCreate+0xf0>
   10758:	e0bff917 	ldw	r2,-28(fp)
   1075c:	e0bffc15 	stw	r2,-16(fp)
   10760:	e0bffc17 	ldw	r2,-16(fp)
   10764:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   10768:	e0bfff17 	ldw	r2,-4(fp)
   1076c:	00c01c84 	movi	r3,114
   10770:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   10774:	e0bffb17 	ldw	r2,-20(fp)
}
   10778:	e037883a 	mov	sp,fp
   1077c:	df000017 	ldw	fp,0(sp)
   10780:	dec00104 	addi	sp,sp,4
   10784:	f800283a 	ret

00010788 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   10788:	defff204 	addi	sp,sp,-56
   1078c:	dfc00d15 	stw	ra,52(sp)
   10790:	df000c15 	stw	fp,48(sp)
   10794:	df000c04 	addi	fp,sp,48
   10798:	e13ffd15 	stw	r4,-12(fp)
   1079c:	2805883a 	mov	r2,r5
   107a0:	e1bfff15 	stw	r6,-4(fp)
   107a4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   107a8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   107ac:	e0bfff17 	ldw	r2,-4(fp)
   107b0:	1000021e 	bne	r2,zero,107bc <OSFlagDel+0x34>
        return (pgrp);
   107b4:	e0bffd17 	ldw	r2,-12(fp)
   107b8:	00008006 	br	109bc <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   107bc:	e0bffd17 	ldw	r2,-12(fp)
   107c0:	1000051e 	bne	r2,zero,107d8 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   107c4:	e0bfff17 	ldw	r2,-4(fp)
   107c8:	00c01b84 	movi	r3,110
   107cc:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   107d0:	e0bffd17 	ldw	r2,-12(fp)
   107d4:	00007906 	br	109bc <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   107d8:	d0a7ff03 	ldbu	r2,-24580(gp)
   107dc:	10803fcc 	andi	r2,r2,255
   107e0:	10000526 	beq	r2,zero,107f8 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   107e4:	e0bfff17 	ldw	r2,-4(fp)
   107e8:	00c003c4 	movi	r3,15
   107ec:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   107f0:	e0bffd17 	ldw	r2,-12(fp)
   107f4:	00007106 	br	109bc <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   107f8:	e0bffd17 	ldw	r2,-12(fp)
   107fc:	10800003 	ldbu	r2,0(r2)
   10800:	10803fcc 	andi	r2,r2,255
   10804:	10800160 	cmpeqi	r2,r2,5
   10808:	1000051e 	bne	r2,zero,10820 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
   1080c:	e0bfff17 	ldw	r2,-4(fp)
   10810:	00c00044 	movi	r3,1
   10814:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   10818:	e0bffd17 	ldw	r2,-12(fp)
   1081c:	00006706 	br	109bc <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10820:	0005303a 	rdctl	r2,status
   10824:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10828:	e0fffc17 	ldw	r3,-16(fp)
   1082c:	00bfff84 	movi	r2,-2
   10830:	1884703a 	and	r2,r3,r2
   10834:	1001703a 	wrctl	status,r2
  
  return context;
   10838:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1083c:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   10840:	e0bffd17 	ldw	r2,-12(fp)
   10844:	10800117 	ldw	r2,4(r2)
   10848:	10000326 	beq	r2,zero,10858 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1084c:	00800044 	movi	r2,1
   10850:	e0bff405 	stb	r2,-48(fp)
   10854:	00000106 	br	1085c <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   10858:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   1085c:	e0bffe03 	ldbu	r2,-8(fp)
   10860:	10000326 	beq	r2,zero,10870 <OSFlagDel+0xe8>
   10864:	10800060 	cmpeqi	r2,r2,1
   10868:	1000231e 	bne	r2,zero,108f8 <OSFlagDel+0x170>
   1086c:	00004806 	br	10990 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   10870:	e0bff403 	ldbu	r2,-48(fp)
   10874:	1000161e 	bne	r2,zero,108d0 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   10878:	e0bffd17 	ldw	r2,-12(fp)
   1087c:	00c00fc4 	movi	r3,63
   10880:	10c00305 	stb	r3,12(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   10884:	e0bffd17 	ldw	r2,-12(fp)
   10888:	10000345 	stb	zero,13(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1088c:	e0bffd17 	ldw	r2,-12(fp)
   10890:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   10894:	d0e80217 	ldw	r3,-24568(gp)
   10898:	e0bffd17 	ldw	r2,-12(fp)
   1089c:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   108a0:	e0bffd17 	ldw	r2,-12(fp)
   108a4:	10000215 	stw	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   108a8:	e0bffd17 	ldw	r2,-12(fp)
   108ac:	d0a80215 	stw	r2,-24568(gp)
   108b0:	e0bff717 	ldw	r2,-36(fp)
   108b4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   108b8:	e0bff817 	ldw	r2,-32(fp)
   108bc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   108c0:	e0bfff17 	ldw	r2,-4(fp)
   108c4:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   108c8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   108cc:	00003a06 	br	109b8 <OSFlagDel+0x230>
   108d0:	e0bff717 	ldw	r2,-36(fp)
   108d4:	e0bff915 	stw	r2,-28(fp)
   108d8:	e0bff917 	ldw	r2,-28(fp)
   108dc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   108e0:	e0bfff17 	ldw	r2,-4(fp)
   108e4:	00c01244 	movi	r3,73
   108e8:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   108ec:	e0bffd17 	ldw	r2,-12(fp)
   108f0:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   108f4:	00003006 	br	109b8 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   108f8:	e0bffd17 	ldw	r2,-12(fp)
   108fc:	10800117 	ldw	r2,4(r2)
   10900:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   10904:	00000606 	br	10920 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   10908:	000b883a 	mov	r5,zero
   1090c:	e13ff517 	ldw	r4,-44(fp)
   10910:	00118800 	call	11880 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   10914:	e0bff517 	ldw	r2,-44(fp)
   10918:	10800017 	ldw	r2,0(r2)
   1091c:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   10920:	e0bff517 	ldw	r2,-44(fp)
   10924:	103ff81e 	bne	r2,zero,10908 <OSFlagDel+0x180>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   10928:	e0bffd17 	ldw	r2,-12(fp)
   1092c:	00c00fc4 	movi	r3,63
   10930:	10c00305 	stb	r3,12(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   10934:	e0bffd17 	ldw	r2,-12(fp)
   10938:	10000345 	stb	zero,13(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1093c:	e0bffd17 	ldw	r2,-12(fp)
   10940:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   10944:	d0e80217 	ldw	r3,-24568(gp)
   10948:	e0bffd17 	ldw	r2,-12(fp)
   1094c:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   10950:	e0bffd17 	ldw	r2,-12(fp)
   10954:	10000215 	stw	zero,8(r2)
             OSFlagFreeList       = pgrp;
   10958:	e0bffd17 	ldw	r2,-12(fp)
   1095c:	d0a80215 	stw	r2,-24568(gp)
   10960:	e0bff717 	ldw	r2,-36(fp)
   10964:	e0bffa15 	stw	r2,-24(fp)
   10968:	e0bffa17 	ldw	r2,-24(fp)
   1096c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   10970:	e0bff403 	ldbu	r2,-48(fp)
   10974:	10800058 	cmpnei	r2,r2,1
   10978:	1000011e 	bne	r2,zero,10980 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   1097c:	000fb2c0 	call	fb2c <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   10980:	e0bfff17 	ldw	r2,-4(fp)
   10984:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   10988:	e03ff615 	stw	zero,-40(fp)
             break;
   1098c:	00000a06 	br	109b8 <OSFlagDel+0x230>
   10990:	e0bff717 	ldw	r2,-36(fp)
   10994:	e0bffb15 	stw	r2,-20(fp)
   10998:	e0bffb17 	ldw	r2,-20(fp)
   1099c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   109a0:	e0bfff17 	ldw	r2,-4(fp)
   109a4:	00c001c4 	movi	r3,7
   109a8:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   109ac:	e0bffd17 	ldw	r2,-12(fp)
   109b0:	e0bff615 	stw	r2,-40(fp)
             break;
   109b4:	0001883a 	nop
    }
    return (pgrp_return);
   109b8:	e0bff617 	ldw	r2,-40(fp)
}
   109bc:	e037883a 	mov	sp,fp
   109c0:	dfc00117 	ldw	ra,4(sp)
   109c4:	df000017 	ldw	fp,0(sp)
   109c8:	dec00204 	addi	sp,sp,8
   109cc:	f800283a 	ret

000109d0 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   109d0:	defff604 	addi	sp,sp,-40
   109d4:	dfc00915 	stw	ra,36(sp)
   109d8:	df000815 	stw	fp,32(sp)
   109dc:	df000804 	addi	fp,sp,32
   109e0:	e13ffd15 	stw	r4,-12(fp)
   109e4:	e17ffe15 	stw	r5,-8(fp)
   109e8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   109ec:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   109f0:	e0bfff17 	ldw	r2,-4(fp)
   109f4:	1000021e 	bne	r2,zero,10a00 <OSFlagNameGet+0x30>
        return (0);
   109f8:	0005883a 	mov	r2,zero
   109fc:	00003906 	br	10ae4 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   10a00:	e0bffd17 	ldw	r2,-12(fp)
   10a04:	1000051e 	bne	r2,zero,10a1c <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10a08:	e0bfff17 	ldw	r2,-4(fp)
   10a0c:	00c01b84 	movi	r3,110
   10a10:	10c00005 	stb	r3,0(r2)
        return (0);
   10a14:	0005883a 	mov	r2,zero
   10a18:	00003206 	br	10ae4 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   10a1c:	e0bffe17 	ldw	r2,-8(fp)
   10a20:	1000051e 	bne	r2,zero,10a38 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   10a24:	e0bfff17 	ldw	r2,-4(fp)
   10a28:	00c00304 	movi	r3,12
   10a2c:	10c00005 	stb	r3,0(r2)
        return (0);
   10a30:	0005883a 	mov	r2,zero
   10a34:	00002b06 	br	10ae4 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   10a38:	d0a7ff03 	ldbu	r2,-24580(gp)
   10a3c:	10803fcc 	andi	r2,r2,255
   10a40:	10000526 	beq	r2,zero,10a58 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   10a44:	e0bfff17 	ldw	r2,-4(fp)
   10a48:	00c00444 	movi	r3,17
   10a4c:	10c00005 	stb	r3,0(r2)
        return (0);
   10a50:	0005883a 	mov	r2,zero
   10a54:	00002306 	br	10ae4 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10a58:	0005303a 	rdctl	r2,status
   10a5c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10a60:	e0fffc17 	ldw	r3,-16(fp)
   10a64:	00bfff84 	movi	r2,-2
   10a68:	1884703a 	and	r2,r3,r2
   10a6c:	1001703a 	wrctl	status,r2
  
  return context;
   10a70:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   10a74:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   10a78:	e0bffd17 	ldw	r2,-12(fp)
   10a7c:	10800003 	ldbu	r2,0(r2)
   10a80:	10803fcc 	andi	r2,r2,255
   10a84:	10800160 	cmpeqi	r2,r2,5
   10a88:	1000091e 	bne	r2,zero,10ab0 <OSFlagNameGet+0xe0>
   10a8c:	e0bff817 	ldw	r2,-32(fp)
   10a90:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10a94:	e0bff917 	ldw	r2,-28(fp)
   10a98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   10a9c:	e0bfff17 	ldw	r2,-4(fp)
   10aa0:	00c00044 	movi	r3,1
   10aa4:	10c00005 	stb	r3,0(r2)
        return (0);
   10aa8:	0005883a 	mov	r2,zero
   10aac:	00000d06 	br	10ae4 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   10ab0:	e0bffd17 	ldw	r2,-12(fp)
   10ab4:	10800304 	addi	r2,r2,12
   10ab8:	100b883a 	mov	r5,r2
   10abc:	e13ffe17 	ldw	r4,-8(fp)
   10ac0:	000fc700 	call	fc70 <OS_StrCopy>
   10ac4:	e0bffb05 	stb	r2,-20(fp)
   10ac8:	e0bff817 	ldw	r2,-32(fp)
   10acc:	e0bffa15 	stw	r2,-24(fp)
   10ad0:	e0bffa17 	ldw	r2,-24(fp)
   10ad4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   10ad8:	e0bfff17 	ldw	r2,-4(fp)
   10adc:	10000005 	stb	zero,0(r2)
    return (len);
   10ae0:	e0bffb03 	ldbu	r2,-20(fp)
}
   10ae4:	e037883a 	mov	sp,fp
   10ae8:	dfc00117 	ldw	ra,4(sp)
   10aec:	df000017 	ldw	fp,0(sp)
   10af0:	dec00204 	addi	sp,sp,8
   10af4:	f800283a 	ret

00010af8 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   10af8:	defff504 	addi	sp,sp,-44
   10afc:	dfc00a15 	stw	ra,40(sp)
   10b00:	df000915 	stw	fp,36(sp)
   10b04:	df000904 	addi	fp,sp,36
   10b08:	e13ffd15 	stw	r4,-12(fp)
   10b0c:	e17ffe15 	stw	r5,-8(fp)
   10b10:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10b14:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   10b18:	e0bfff17 	ldw	r2,-4(fp)
   10b1c:	10004326 	beq	r2,zero,10c2c <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   10b20:	e0bffd17 	ldw	r2,-12(fp)
   10b24:	1000041e 	bne	r2,zero,10b38 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10b28:	e0bfff17 	ldw	r2,-4(fp)
   10b2c:	00c01b84 	movi	r3,110
   10b30:	10c00005 	stb	r3,0(r2)
        return;
   10b34:	00003e06 	br	10c30 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   10b38:	e0bffe17 	ldw	r2,-8(fp)
   10b3c:	1000041e 	bne	r2,zero,10b50 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   10b40:	e0bfff17 	ldw	r2,-4(fp)
   10b44:	00c00304 	movi	r3,12
   10b48:	10c00005 	stb	r3,0(r2)
        return;
   10b4c:	00003806 	br	10c30 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   10b50:	d0a7ff03 	ldbu	r2,-24580(gp)
   10b54:	10803fcc 	andi	r2,r2,255
   10b58:	10000426 	beq	r2,zero,10b6c <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   10b5c:	e0bfff17 	ldw	r2,-4(fp)
   10b60:	00c00484 	movi	r3,18
   10b64:	10c00005 	stb	r3,0(r2)
        return;
   10b68:	00003106 	br	10c30 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10b6c:	0005303a 	rdctl	r2,status
   10b70:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10b74:	e0fffc17 	ldw	r3,-16(fp)
   10b78:	00bfff84 	movi	r2,-2
   10b7c:	1884703a 	and	r2,r3,r2
   10b80:	1001703a 	wrctl	status,r2
  
  return context;
   10b84:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   10b88:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   10b8c:	e0bffd17 	ldw	r2,-12(fp)
   10b90:	10800003 	ldbu	r2,0(r2)
   10b94:	10803fcc 	andi	r2,r2,255
   10b98:	10800160 	cmpeqi	r2,r2,5
   10b9c:	1000081e 	bne	r2,zero,10bc0 <OSFlagNameSet+0xc8>
   10ba0:	e0bff717 	ldw	r2,-36(fp)
   10ba4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10ba8:	e0bff817 	ldw	r2,-32(fp)
   10bac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   10bb0:	e0bfff17 	ldw	r2,-4(fp)
   10bb4:	00c00044 	movi	r3,1
   10bb8:	10c00005 	stb	r3,0(r2)
        return;
   10bbc:	00001c06 	br	10c30 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   10bc0:	e13ffe17 	ldw	r4,-8(fp)
   10bc4:	000fce40 	call	fce4 <OS_StrLen>
   10bc8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   10bcc:	e0bffa03 	ldbu	r2,-24(fp)
   10bd0:	10800830 	cmpltui	r2,r2,32
   10bd4:	1000081e 	bne	r2,zero,10bf8 <OSFlagNameSet+0x100>
   10bd8:	e0bff717 	ldw	r2,-36(fp)
   10bdc:	e0bff915 	stw	r2,-28(fp)
   10be0:	e0bff917 	ldw	r2,-28(fp)
   10be4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   10be8:	e0bfff17 	ldw	r2,-4(fp)
   10bec:	00c01cc4 	movi	r3,115
   10bf0:	10c00005 	stb	r3,0(r2)
        return;
   10bf4:	00000e06 	br	10c30 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   10bf8:	e0bffd17 	ldw	r2,-12(fp)
   10bfc:	10800304 	addi	r2,r2,12
   10c00:	e17ffe17 	ldw	r5,-8(fp)
   10c04:	1009883a 	mov	r4,r2
   10c08:	000fc700 	call	fc70 <OS_StrCopy>
   10c0c:	e0bff717 	ldw	r2,-36(fp)
   10c10:	e0bffb15 	stw	r2,-20(fp)
   10c14:	e0bffb17 	ldw	r2,-20(fp)
   10c18:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   10c1c:	e0bfff17 	ldw	r2,-4(fp)
   10c20:	10000005 	stb	zero,0(r2)
    return;
   10c24:	0001883a 	nop
   10c28:	00000106 	br	10c30 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   10c2c:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
   10c30:	e037883a 	mov	sp,fp
   10c34:	dfc00117 	ldw	ra,4(sp)
   10c38:	df000017 	ldw	fp,0(sp)
   10c3c:	dec00204 	addi	sp,sp,8
   10c40:	f800283a 	ret

00010c44 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   10c44:	deffe004 	addi	sp,sp,-128
   10c48:	dfc01f15 	stw	ra,124(sp)
   10c4c:	df001e15 	stw	fp,120(sp)
   10c50:	df001e04 	addi	fp,sp,120
   10c54:	e13ffc15 	stw	r4,-16(fp)
   10c58:	e17ffd15 	stw	r5,-12(fp)
   10c5c:	3007883a 	mov	r3,r6
   10c60:	3805883a 	mov	r2,r7
   10c64:	e0fffe05 	stb	r3,-8(fp)
   10c68:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   10c6c:	e03fe415 	stw	zero,-112(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   10c70:	e0800217 	ldw	r2,8(fp)
   10c74:	1000021e 	bne	r2,zero,10c80 <OSFlagPend+0x3c>
        return ((OS_FLAGS)0);
   10c78:	0005883a 	mov	r2,zero
   10c7c:	00014a06 	br	111a8 <OSFlagPend+0x564>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   10c80:	e0bffc17 	ldw	r2,-16(fp)
   10c84:	1000051e 	bne	r2,zero,10c9c <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10c88:	e0800217 	ldw	r2,8(fp)
   10c8c:	00c01b84 	movi	r3,110
   10c90:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10c94:	0005883a 	mov	r2,zero
   10c98:	00014306 	br	111a8 <OSFlagPend+0x564>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   10c9c:	d0a7ff03 	ldbu	r2,-24580(gp)
   10ca0:	10803fcc 	andi	r2,r2,255
   10ca4:	10000526 	beq	r2,zero,10cbc <OSFlagPend+0x78>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   10ca8:	e0800217 	ldw	r2,8(fp)
   10cac:	00c00084 	movi	r3,2
   10cb0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10cb4:	0005883a 	mov	r2,zero
   10cb8:	00013b06 	br	111a8 <OSFlagPend+0x564>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   10cbc:	d0a7f103 	ldbu	r2,-24636(gp)
   10cc0:	10803fcc 	andi	r2,r2,255
   10cc4:	10000526 	beq	r2,zero,10cdc <OSFlagPend+0x98>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   10cc8:	e0800217 	ldw	r2,8(fp)
   10ccc:	00c00344 	movi	r3,13
   10cd0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10cd4:	0005883a 	mov	r2,zero
   10cd8:	00013306 	br	111a8 <OSFlagPend+0x564>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   10cdc:	e0bffc17 	ldw	r2,-16(fp)
   10ce0:	10800003 	ldbu	r2,0(r2)
   10ce4:	10803fcc 	andi	r2,r2,255
   10ce8:	10800160 	cmpeqi	r2,r2,5
   10cec:	1000051e 	bne	r2,zero,10d04 <OSFlagPend+0xc0>
        *perr = OS_ERR_EVENT_TYPE;
   10cf0:	e0800217 	ldw	r2,8(fp)
   10cf4:	00c00044 	movi	r3,1
   10cf8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10cfc:	0005883a 	mov	r2,zero
   10d00:	00012906 	br	111a8 <OSFlagPend+0x564>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   10d04:	e0fffe03 	ldbu	r3,-8(fp)
   10d08:	00bfe004 	movi	r2,-128
   10d0c:	1884703a 	and	r2,r3,r2
   10d10:	e0bfe505 	stb	r2,-108(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   10d14:	e0bfe503 	ldbu	r2,-108(fp)
   10d18:	10000626 	beq	r2,zero,10d34 <OSFlagPend+0xf0>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   10d1c:	e0bffe03 	ldbu	r2,-8(fp)
   10d20:	10801fcc 	andi	r2,r2,127
   10d24:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   10d28:	00800044 	movi	r2,1
   10d2c:	e0bfe305 	stb	r2,-116(fp)
   10d30:	00000106 	br	10d38 <OSFlagPend+0xf4>
    } else {
        consume    = OS_FALSE;
   10d34:	e03fe305 	stb	zero,-116(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d38:	0005303a 	rdctl	r2,status
   10d3c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d40:	e0fff517 	ldw	r3,-44(fp)
   10d44:	00bfff84 	movi	r2,-2
   10d48:	1884703a 	and	r2,r3,r2
   10d4c:	1001703a 	wrctl	status,r2
  
  return context;
   10d50:	e0bff517 	ldw	r2,-44(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   10d54:	e0bfe415 	stw	r2,-112(fp)
    switch (wait_type) {
   10d58:	e0bffe03 	ldbu	r2,-8(fp)
   10d5c:	10c00060 	cmpeqi	r3,r2,1
   10d60:	1800891e 	bne	r3,zero,10f88 <OSFlagPend+0x344>
   10d64:	10c00088 	cmpgei	r3,r2,2
   10d68:	1800021e 	bne	r3,zero,10d74 <OSFlagPend+0x130>
   10d6c:	10005b26 	beq	r2,zero,10edc <OSFlagPend+0x298>
   10d70:	0000af06 	br	11030 <OSFlagPend+0x3ec>
   10d74:	10c000a0 	cmpeqi	r3,r2,2
   10d78:	1800031e 	bne	r3,zero,10d88 <OSFlagPend+0x144>
   10d7c:	108000e0 	cmpeqi	r2,r2,3
   10d80:	10002c1e 	bne	r2,zero,10e34 <OSFlagPend+0x1f0>
   10d84:	0000aa06 	br	11030 <OSFlagPend+0x3ec>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   10d88:	e0bffc17 	ldw	r2,-16(fp)
   10d8c:	10c00217 	ldw	r3,8(r2)
   10d90:	e0bffd17 	ldw	r2,-12(fp)
   10d94:	1884703a 	and	r2,r3,r2
   10d98:	e0bfe715 	stw	r2,-100(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   10d9c:	e0ffe717 	ldw	r3,-100(fp)
   10da0:	e0bffd17 	ldw	r2,-12(fp)
   10da4:	1880151e 	bne	r3,r2,10dfc <OSFlagPend+0x1b8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10da8:	e0bfe303 	ldbu	r2,-116(fp)
   10dac:	10800058 	cmpnei	r2,r2,1
   10db0:	1000071e 	bne	r2,zero,10dd0 <OSFlagPend+0x18c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   10db4:	e0bffc17 	ldw	r2,-16(fp)
   10db8:	10c00217 	ldw	r3,8(r2)
   10dbc:	e0bfe717 	ldw	r2,-100(fp)
   10dc0:	0084303a 	nor	r2,zero,r2
   10dc4:	1886703a 	and	r3,r3,r2
   10dc8:	e0bffc17 	ldw	r2,-16(fp)
   10dcc:	10c00215 	stw	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   10dd0:	d0a80017 	ldw	r2,-24576(gp)
   10dd4:	e0ffe717 	ldw	r3,-100(fp)
   10dd8:	10c00b15 	stw	r3,44(r2)
   10ddc:	e0bfe417 	ldw	r2,-112(fp)
   10de0:	e0bfe615 	stw	r2,-104(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10de4:	e0bfe617 	ldw	r2,-104(fp)
   10de8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   10dec:	e0800217 	ldw	r2,8(fp)
   10df0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   10df4:	e0bfe717 	ldw	r2,-100(fp)
   10df8:	0000eb06 	br	111a8 <OSFlagPend+0x564>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   10dfc:	e13ffe03 	ldbu	r4,-8(fp)
   10e00:	e0bfff0b 	ldhu	r2,-4(fp)
   10e04:	e0fff604 	addi	r3,fp,-40
   10e08:	d8800015 	stw	r2,0(sp)
   10e0c:	200f883a 	mov	r7,r4
   10e10:	e1bffd17 	ldw	r6,-12(fp)
   10e14:	180b883a 	mov	r5,r3
   10e18:	e13ffc17 	ldw	r4,-16(fp)
   10e1c:	00116440 	call	11644 <OS_FlagBlock>
   10e20:	e0bfe417 	ldw	r2,-112(fp)
   10e24:	e0bfe815 	stw	r2,-96(fp)
   10e28:	e0bfe817 	ldw	r2,-96(fp)
   10e2c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   10e30:	00008906 	br	11058 <OSFlagPend+0x414>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   10e34:	e0bffc17 	ldw	r2,-16(fp)
   10e38:	10c00217 	ldw	r3,8(r2)
   10e3c:	e0bffd17 	ldw	r2,-12(fp)
   10e40:	1884703a 	and	r2,r3,r2
   10e44:	e0bfe715 	stw	r2,-100(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   10e48:	e0bfe717 	ldw	r2,-100(fp)
   10e4c:	10001526 	beq	r2,zero,10ea4 <OSFlagPend+0x260>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10e50:	e0bfe303 	ldbu	r2,-116(fp)
   10e54:	10800058 	cmpnei	r2,r2,1
   10e58:	1000071e 	bne	r2,zero,10e78 <OSFlagPend+0x234>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   10e5c:	e0bffc17 	ldw	r2,-16(fp)
   10e60:	10c00217 	ldw	r3,8(r2)
   10e64:	e0bfe717 	ldw	r2,-100(fp)
   10e68:	0084303a 	nor	r2,zero,r2
   10e6c:	1886703a 	and	r3,r3,r2
   10e70:	e0bffc17 	ldw	r2,-16(fp)
   10e74:	10c00215 	stw	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   10e78:	d0a80017 	ldw	r2,-24576(gp)
   10e7c:	e0ffe717 	ldw	r3,-100(fp)
   10e80:	10c00b15 	stw	r3,44(r2)
   10e84:	e0bfe417 	ldw	r2,-112(fp)
   10e88:	e0bfe915 	stw	r2,-92(fp)
   10e8c:	e0bfe917 	ldw	r2,-92(fp)
   10e90:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   10e94:	e0800217 	ldw	r2,8(fp)
   10e98:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   10e9c:	e0bfe717 	ldw	r2,-100(fp)
   10ea0:	0000c106 	br	111a8 <OSFlagPend+0x564>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   10ea4:	e13ffe03 	ldbu	r4,-8(fp)
   10ea8:	e0bfff0b 	ldhu	r2,-4(fp)
   10eac:	e0fff604 	addi	r3,fp,-40
   10eb0:	d8800015 	stw	r2,0(sp)
   10eb4:	200f883a 	mov	r7,r4
   10eb8:	e1bffd17 	ldw	r6,-12(fp)
   10ebc:	180b883a 	mov	r5,r3
   10ec0:	e13ffc17 	ldw	r4,-16(fp)
   10ec4:	00116440 	call	11644 <OS_FlagBlock>
   10ec8:	e0bfe417 	ldw	r2,-112(fp)
   10ecc:	e0bfea15 	stw	r2,-88(fp)
   10ed0:	e0bfea17 	ldw	r2,-88(fp)
   10ed4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   10ed8:	00005f06 	br	11058 <OSFlagPend+0x414>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   10edc:	e0bffc17 	ldw	r2,-16(fp)
   10ee0:	10800217 	ldw	r2,8(r2)
   10ee4:	0086303a 	nor	r3,zero,r2
   10ee8:	e0bffd17 	ldw	r2,-12(fp)
   10eec:	1884703a 	and	r2,r3,r2
   10ef0:	e0bfe715 	stw	r2,-100(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   10ef4:	e0ffe717 	ldw	r3,-100(fp)
   10ef8:	e0bffd17 	ldw	r2,-12(fp)
   10efc:	1880141e 	bne	r3,r2,10f50 <OSFlagPend+0x30c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10f00:	e0bfe303 	ldbu	r2,-116(fp)
   10f04:	10800058 	cmpnei	r2,r2,1
   10f08:	1000061e 	bne	r2,zero,10f24 <OSFlagPend+0x2e0>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   10f0c:	e0bffc17 	ldw	r2,-16(fp)
   10f10:	10c00217 	ldw	r3,8(r2)
   10f14:	e0bfe717 	ldw	r2,-100(fp)
   10f18:	1886b03a 	or	r3,r3,r2
   10f1c:	e0bffc17 	ldw	r2,-16(fp)
   10f20:	10c00215 	stw	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   10f24:	d0a80017 	ldw	r2,-24576(gp)
   10f28:	e0ffe717 	ldw	r3,-100(fp)
   10f2c:	10c00b15 	stw	r3,44(r2)
   10f30:	e0bfe417 	ldw	r2,-112(fp)
   10f34:	e0bfeb15 	stw	r2,-84(fp)
   10f38:	e0bfeb17 	ldw	r2,-84(fp)
   10f3c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   10f40:	e0800217 	ldw	r2,8(fp)
   10f44:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   10f48:	e0bfe717 	ldw	r2,-100(fp)
   10f4c:	00009606 	br	111a8 <OSFlagPend+0x564>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   10f50:	e13ffe03 	ldbu	r4,-8(fp)
   10f54:	e0bfff0b 	ldhu	r2,-4(fp)
   10f58:	e0fff604 	addi	r3,fp,-40
   10f5c:	d8800015 	stw	r2,0(sp)
   10f60:	200f883a 	mov	r7,r4
   10f64:	e1bffd17 	ldw	r6,-12(fp)
   10f68:	180b883a 	mov	r5,r3
   10f6c:	e13ffc17 	ldw	r4,-16(fp)
   10f70:	00116440 	call	11644 <OS_FlagBlock>
   10f74:	e0bfe417 	ldw	r2,-112(fp)
   10f78:	e0bfec15 	stw	r2,-80(fp)
   10f7c:	e0bfec17 	ldw	r2,-80(fp)
   10f80:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   10f84:	00003406 	br	11058 <OSFlagPend+0x414>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   10f88:	e0bffc17 	ldw	r2,-16(fp)
   10f8c:	10800217 	ldw	r2,8(r2)
   10f90:	0086303a 	nor	r3,zero,r2
   10f94:	e0bffd17 	ldw	r2,-12(fp)
   10f98:	1884703a 	and	r2,r3,r2
   10f9c:	e0bfe715 	stw	r2,-100(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   10fa0:	e0bfe717 	ldw	r2,-100(fp)
   10fa4:	10001426 	beq	r2,zero,10ff8 <OSFlagPend+0x3b4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10fa8:	e0bfe303 	ldbu	r2,-116(fp)
   10fac:	10800058 	cmpnei	r2,r2,1
   10fb0:	1000061e 	bne	r2,zero,10fcc <OSFlagPend+0x388>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   10fb4:	e0bffc17 	ldw	r2,-16(fp)
   10fb8:	10c00217 	ldw	r3,8(r2)
   10fbc:	e0bfe717 	ldw	r2,-100(fp)
   10fc0:	1886b03a 	or	r3,r3,r2
   10fc4:	e0bffc17 	ldw	r2,-16(fp)
   10fc8:	10c00215 	stw	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   10fcc:	d0a80017 	ldw	r2,-24576(gp)
   10fd0:	e0ffe717 	ldw	r3,-100(fp)
   10fd4:	10c00b15 	stw	r3,44(r2)
   10fd8:	e0bfe417 	ldw	r2,-112(fp)
   10fdc:	e0bfed15 	stw	r2,-76(fp)
   10fe0:	e0bfed17 	ldw	r2,-76(fp)
   10fe4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   10fe8:	e0800217 	ldw	r2,8(fp)
   10fec:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   10ff0:	e0bfe717 	ldw	r2,-100(fp)
   10ff4:	00006c06 	br	111a8 <OSFlagPend+0x564>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   10ff8:	e13ffe03 	ldbu	r4,-8(fp)
   10ffc:	e0bfff0b 	ldhu	r2,-4(fp)
   11000:	e0fff604 	addi	r3,fp,-40
   11004:	d8800015 	stw	r2,0(sp)
   11008:	200f883a 	mov	r7,r4
   1100c:	e1bffd17 	ldw	r6,-12(fp)
   11010:	180b883a 	mov	r5,r3
   11014:	e13ffc17 	ldw	r4,-16(fp)
   11018:	00116440 	call	11644 <OS_FlagBlock>
   1101c:	e0bfe417 	ldw	r2,-112(fp)
   11020:	e0bfee15 	stw	r2,-72(fp)
   11024:	e0bfee17 	ldw	r2,-72(fp)
   11028:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1102c:	00000a06 	br	11058 <OSFlagPend+0x414>
   11030:	e0bfe417 	ldw	r2,-112(fp)
   11034:	e0bfef15 	stw	r2,-68(fp)
   11038:	e0bfef17 	ldw	r2,-68(fp)
   1103c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   11040:	e03fe715 	stw	zero,-100(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   11044:	e0800217 	ldw	r2,8(fp)
   11048:	00c01bc4 	movi	r3,111
   1104c:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   11050:	e0bfe717 	ldw	r2,-100(fp)
   11054:	00005406 	br	111a8 <OSFlagPend+0x564>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   11058:	000fb2c0 	call	fb2c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1105c:	0005303a 	rdctl	r2,status
   11060:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11064:	e0fff017 	ldw	r3,-64(fp)
   11068:	00bfff84 	movi	r2,-2
   1106c:	1884703a 	and	r2,r3,r2
   11070:	1001703a 	wrctl	status,r2
  
  return context;
   11074:	e0bff017 	ldw	r2,-64(fp)
    OS_ENTER_CRITICAL();
   11078:	e0bfe415 	stw	r2,-112(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   1107c:	d0a80017 	ldw	r2,-24576(gp)
   11080:	10800cc3 	ldbu	r2,51(r2)
   11084:	10803fcc 	andi	r2,r2,255
   11088:	10001c26 	beq	r2,zero,110fc <OSFlagPend+0x4b8>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   1108c:	d0a80017 	ldw	r2,-24576(gp)
   11090:	10800cc3 	ldbu	r2,51(r2)
   11094:	e0bff205 	stb	r2,-56(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   11098:	d0a80017 	ldw	r2,-24576(gp)
   1109c:	10000cc5 	stb	zero,51(r2)
        OS_FlagUnlink(&node);
   110a0:	e0bff604 	addi	r2,fp,-40
   110a4:	1009883a 	mov	r4,r2
   110a8:	00119700 	call	11970 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   110ac:	d0a80017 	ldw	r2,-24576(gp)
   110b0:	10000c85 	stb	zero,50(r2)
   110b4:	e0bfe417 	ldw	r2,-112(fp)
   110b8:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   110bc:	e0bff117 	ldw	r2,-60(fp)
   110c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   110c4:	e03fe715 	stw	zero,-100(fp)
        switch (pend_stat) {
   110c8:	e0bff203 	ldbu	r2,-56(fp)
   110cc:	108000a0 	cmpeqi	r2,r2,2
   110d0:	10000426 	beq	r2,zero,110e4 <OSFlagPend+0x4a0>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   110d4:	e0800217 	ldw	r2,8(fp)
   110d8:	00c00384 	movi	r3,14
   110dc:	10c00005 	stb	r3,0(r2)
                 break;
   110e0:	00000406 	br	110f4 <OSFlagPend+0x4b0>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   110e4:	e0800217 	ldw	r2,8(fp)
   110e8:	00c00284 	movi	r3,10
   110ec:	10c00005 	stb	r3,0(r2)
                 break;
   110f0:	0001883a 	nop
        }
        return (flags_rdy);
   110f4:	e0bfe717 	ldw	r2,-100(fp)
   110f8:	00002b06 	br	111a8 <OSFlagPend+0x564>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   110fc:	d0a80017 	ldw	r2,-24576(gp)
   11100:	10800b17 	ldw	r2,44(r2)
   11104:	e0bfe715 	stw	r2,-100(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   11108:	e0bfe303 	ldbu	r2,-116(fp)
   1110c:	10800058 	cmpnei	r2,r2,1
   11110:	10001e1e 	bne	r2,zero,1118c <OSFlagPend+0x548>
        switch (wait_type) {
   11114:	e0bffe03 	ldbu	r2,-8(fp)
   11118:	10001316 	blt	r2,zero,11168 <OSFlagPend+0x524>
   1111c:	10c00090 	cmplti	r3,r2,2
   11120:	18000a1e 	bne	r3,zero,1114c <OSFlagPend+0x508>
   11124:	10800108 	cmpgei	r2,r2,4
   11128:	10000f1e 	bne	r2,zero,11168 <OSFlagPend+0x524>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   1112c:	e0bffc17 	ldw	r2,-16(fp)
   11130:	10c00217 	ldw	r3,8(r2)
   11134:	e0bfe717 	ldw	r2,-100(fp)
   11138:	0084303a 	nor	r2,zero,r2
   1113c:	1886703a 	and	r3,r3,r2
   11140:	e0bffc17 	ldw	r2,-16(fp)
   11144:	10c00215 	stw	r3,8(r2)
                 break;
   11148:	00001006 	br	1118c <OSFlagPend+0x548>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   1114c:	e0bffc17 	ldw	r2,-16(fp)
   11150:	10c00217 	ldw	r3,8(r2)
   11154:	e0bfe717 	ldw	r2,-100(fp)
   11158:	1886b03a 	or	r3,r3,r2
   1115c:	e0bffc17 	ldw	r2,-16(fp)
   11160:	10c00215 	stw	r3,8(r2)
                 break;
   11164:	00000906 	br	1118c <OSFlagPend+0x548>
   11168:	e0bfe417 	ldw	r2,-112(fp)
   1116c:	e0bff315 	stw	r2,-52(fp)
   11170:	e0bff317 	ldw	r2,-52(fp)
   11174:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   11178:	e0800217 	ldw	r2,8(fp)
   1117c:	00c01bc4 	movi	r3,111
   11180:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   11184:	0005883a 	mov	r2,zero
   11188:	00000706 	br	111a8 <OSFlagPend+0x564>
   1118c:	e0bfe417 	ldw	r2,-112(fp)
   11190:	e0bff415 	stw	r2,-48(fp)
   11194:	e0bff417 	ldw	r2,-48(fp)
   11198:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   1119c:	e0800217 	ldw	r2,8(fp)
   111a0:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   111a4:	e0bfe717 	ldw	r2,-100(fp)
}
   111a8:	e037883a 	mov	sp,fp
   111ac:	dfc00117 	ldw	ra,4(sp)
   111b0:	df000017 	ldw	fp,0(sp)
   111b4:	dec00204 	addi	sp,sp,8
   111b8:	f800283a 	ret

000111bc <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   111bc:	defffb04 	addi	sp,sp,-20
   111c0:	df000415 	stw	fp,16(sp)
   111c4:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   111c8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   111cc:	0005303a 	rdctl	r2,status
   111d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   111d4:	e0fffe17 	ldw	r3,-8(fp)
   111d8:	00bfff84 	movi	r2,-2
   111dc:	1884703a 	and	r2,r3,r2
   111e0:	1001703a 	wrctl	status,r2
  
  return context;
   111e4:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   111e8:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   111ec:	d0a80017 	ldw	r2,-24576(gp)
   111f0:	10800b17 	ldw	r2,44(r2)
   111f4:	e0bffd15 	stw	r2,-12(fp)
   111f8:	e0bffc17 	ldw	r2,-16(fp)
   111fc:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11200:	e0bfff17 	ldw	r2,-4(fp)
   11204:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   11208:	e0bffd17 	ldw	r2,-12(fp)
}
   1120c:	e037883a 	mov	sp,fp
   11210:	df000017 	ldw	fp,0(sp)
   11214:	dec00104 	addi	sp,sp,4
   11218:	f800283a 	ret

0001121c <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   1121c:	deffee04 	addi	sp,sp,-72
   11220:	dfc01115 	stw	ra,68(sp)
   11224:	df001015 	stw	fp,64(sp)
   11228:	df001004 	addi	fp,sp,64
   1122c:	e13ffc15 	stw	r4,-16(fp)
   11230:	e17ffd15 	stw	r5,-12(fp)
   11234:	3005883a 	mov	r2,r6
   11238:	e1ffff15 	stw	r7,-4(fp)
   1123c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   11240:	e03ff215 	stw	zero,-56(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   11244:	e0bfff17 	ldw	r2,-4(fp)
   11248:	1000021e 	bne	r2,zero,11254 <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
   1124c:	0005883a 	mov	r2,zero
   11250:	0000c606 	br	1156c <OSFlagPost+0x350>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   11254:	e0bffc17 	ldw	r2,-16(fp)
   11258:	1000051e 	bne	r2,zero,11270 <OSFlagPost+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1125c:	e0bfff17 	ldw	r2,-4(fp)
   11260:	00c01b84 	movi	r3,110
   11264:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11268:	0005883a 	mov	r2,zero
   1126c:	0000bf06 	br	1156c <OSFlagPost+0x350>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   11270:	e0bffc17 	ldw	r2,-16(fp)
   11274:	10800003 	ldbu	r2,0(r2)
   11278:	10803fcc 	andi	r2,r2,255
   1127c:	10800160 	cmpeqi	r2,r2,5
   11280:	1000051e 	bne	r2,zero,11298 <OSFlagPost+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   11284:	e0bfff17 	ldw	r2,-4(fp)
   11288:	00c00044 	movi	r3,1
   1128c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11290:	0005883a 	mov	r2,zero
   11294:	0000b506 	br	1156c <OSFlagPost+0x350>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11298:	0005303a 	rdctl	r2,status
   1129c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   112a0:	e0fffb17 	ldw	r3,-20(fp)
   112a4:	00bfff84 	movi	r2,-2
   112a8:	1884703a 	and	r2,r3,r2
   112ac:	1001703a 	wrctl	status,r2
  
  return context;
   112b0:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   112b4:	e0bff215 	stw	r2,-56(fp)
    switch (opt) {
   112b8:	e0bffe03 	ldbu	r2,-8(fp)
   112bc:	10000326 	beq	r2,zero,112cc <OSFlagPost+0xb0>
   112c0:	10800060 	cmpeqi	r2,r2,1
   112c4:	1000091e 	bne	r2,zero,112ec <OSFlagPost+0xd0>
   112c8:	00000f06 	br	11308 <OSFlagPost+0xec>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   112cc:	e0bffc17 	ldw	r2,-16(fp)
   112d0:	10c00217 	ldw	r3,8(r2)
   112d4:	e0bffd17 	ldw	r2,-12(fp)
   112d8:	0084303a 	nor	r2,zero,r2
   112dc:	1886703a 	and	r3,r3,r2
   112e0:	e0bffc17 	ldw	r2,-16(fp)
   112e4:	10c00215 	stw	r3,8(r2)
             break;
   112e8:	00001006 	br	1132c <OSFlagPost+0x110>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   112ec:	e0bffc17 	ldw	r2,-16(fp)
   112f0:	10c00217 	ldw	r3,8(r2)
   112f4:	e0bffd17 	ldw	r2,-12(fp)
   112f8:	1886b03a 	or	r3,r3,r2
   112fc:	e0bffc17 	ldw	r2,-16(fp)
   11300:	10c00215 	stw	r3,8(r2)
             break;
   11304:	00000906 	br	1132c <OSFlagPost+0x110>
   11308:	e0bff217 	ldw	r2,-56(fp)
   1130c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11310:	e0bff317 	ldw	r2,-52(fp)
   11314:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   11318:	e0bfff17 	ldw	r2,-4(fp)
   1131c:	00c01c44 	movi	r3,113
   11320:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   11324:	0005883a 	mov	r2,zero
   11328:	00009006 	br	1156c <OSFlagPost+0x350>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   1132c:	e03ff105 	stb	zero,-60(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   11330:	e0bffc17 	ldw	r2,-16(fp)
   11334:	10800117 	ldw	r2,4(r2)
   11338:	e0bff015 	stw	r2,-64(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   1133c:	00006f06 	br	114fc <OSFlagPost+0x2e0>
        switch (pnode->OSFlagNodeWaitType) {
   11340:	e0bff017 	ldw	r2,-64(fp)
   11344:	10800503 	ldbu	r2,20(r2)
   11348:	10803fcc 	andi	r2,r2,255
   1134c:	10c00060 	cmpeqi	r3,r2,1
   11350:	1800441e 	bne	r3,zero,11464 <OSFlagPost+0x248>
   11354:	10c00088 	cmpgei	r3,r2,2
   11358:	1800021e 	bne	r3,zero,11364 <OSFlagPost+0x148>
   1135c:	10002c26 	beq	r2,zero,11410 <OSFlagPost+0x1f4>
   11360:	00005306 	br	114b0 <OSFlagPost+0x294>
   11364:	10c000a0 	cmpeqi	r3,r2,2
   11368:	1800031e 	bne	r3,zero,11378 <OSFlagPost+0x15c>
   1136c:	108000e0 	cmpeqi	r2,r2,3
   11370:	1000151e 	bne	r2,zero,113c8 <OSFlagPost+0x1ac>
   11374:	00004e06 	br	114b0 <OSFlagPost+0x294>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   11378:	e0bffc17 	ldw	r2,-16(fp)
   1137c:	10c00217 	ldw	r3,8(r2)
   11380:	e0bff017 	ldw	r2,-64(fp)
   11384:	10800417 	ldw	r2,16(r2)
   11388:	1884703a 	and	r2,r3,r2
   1138c:	e0bff515 	stw	r2,-44(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   11390:	e0bff017 	ldw	r2,-64(fp)
   11394:	10c00417 	ldw	r3,16(r2)
   11398:	e0bff517 	ldw	r2,-44(fp)
   1139c:	18804d1e 	bne	r3,r2,114d4 <OSFlagPost+0x2b8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   113a0:	e17ff517 	ldw	r5,-44(fp)
   113a4:	e13ff017 	ldw	r4,-64(fp)
   113a8:	00118800 	call	11880 <OS_FlagTaskRdy>
   113ac:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
   113b0:	e0bff603 	ldbu	r2,-40(fp)
   113b4:	10800058 	cmpnei	r2,r2,1
   113b8:	1000461e 	bne	r2,zero,114d4 <OSFlagPost+0x2b8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   113bc:	00800044 	movi	r2,1
   113c0:	e0bff105 	stb	r2,-60(fp)
                     }
                 }
                 break;
   113c4:	00004306 	br	114d4 <OSFlagPost+0x2b8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   113c8:	e0bffc17 	ldw	r2,-16(fp)
   113cc:	10c00217 	ldw	r3,8(r2)
   113d0:	e0bff017 	ldw	r2,-64(fp)
   113d4:	10800417 	ldw	r2,16(r2)
   113d8:	1884703a 	and	r2,r3,r2
   113dc:	e0bff515 	stw	r2,-44(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   113e0:	e0bff517 	ldw	r2,-44(fp)
   113e4:	10003d26 	beq	r2,zero,114dc <OSFlagPost+0x2c0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   113e8:	e17ff517 	ldw	r5,-44(fp)
   113ec:	e13ff017 	ldw	r4,-64(fp)
   113f0:	00118800 	call	11880 <OS_FlagTaskRdy>
   113f4:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
   113f8:	e0bff603 	ldbu	r2,-40(fp)
   113fc:	10800058 	cmpnei	r2,r2,1
   11400:	1000361e 	bne	r2,zero,114dc <OSFlagPost+0x2c0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   11404:	00800044 	movi	r2,1
   11408:	e0bff105 	stb	r2,-60(fp)
                     }
                 }
                 break;
   1140c:	00003306 	br	114dc <OSFlagPost+0x2c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   11410:	e0bffc17 	ldw	r2,-16(fp)
   11414:	10800217 	ldw	r2,8(r2)
   11418:	0086303a 	nor	r3,zero,r2
   1141c:	e0bff017 	ldw	r2,-64(fp)
   11420:	10800417 	ldw	r2,16(r2)
   11424:	1884703a 	and	r2,r3,r2
   11428:	e0bff515 	stw	r2,-44(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   1142c:	e0bff017 	ldw	r2,-64(fp)
   11430:	10c00417 	ldw	r3,16(r2)
   11434:	e0bff517 	ldw	r2,-44(fp)
   11438:	18802a1e 	bne	r3,r2,114e4 <OSFlagPost+0x2c8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1143c:	e17ff517 	ldw	r5,-44(fp)
   11440:	e13ff017 	ldw	r4,-64(fp)
   11444:	00118800 	call	11880 <OS_FlagTaskRdy>
   11448:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
   1144c:	e0bff603 	ldbu	r2,-40(fp)
   11450:	10800058 	cmpnei	r2,r2,1
   11454:	1000231e 	bne	r2,zero,114e4 <OSFlagPost+0x2c8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   11458:	00800044 	movi	r2,1
   1145c:	e0bff105 	stb	r2,-60(fp)
                     }
                 }
                 break;
   11460:	00002006 	br	114e4 <OSFlagPost+0x2c8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   11464:	e0bffc17 	ldw	r2,-16(fp)
   11468:	10800217 	ldw	r2,8(r2)
   1146c:	0086303a 	nor	r3,zero,r2
   11470:	e0bff017 	ldw	r2,-64(fp)
   11474:	10800417 	ldw	r2,16(r2)
   11478:	1884703a 	and	r2,r3,r2
   1147c:	e0bff515 	stw	r2,-44(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   11480:	e0bff517 	ldw	r2,-44(fp)
   11484:	10001926 	beq	r2,zero,114ec <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   11488:	e17ff517 	ldw	r5,-44(fp)
   1148c:	e13ff017 	ldw	r4,-64(fp)
   11490:	00118800 	call	11880 <OS_FlagTaskRdy>
   11494:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
   11498:	e0bff603 	ldbu	r2,-40(fp)
   1149c:	10800058 	cmpnei	r2,r2,1
   114a0:	1000121e 	bne	r2,zero,114ec <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   114a4:	00800044 	movi	r2,1
   114a8:	e0bff105 	stb	r2,-60(fp)
                     }
                 }
                 break;
   114ac:	00000f06 	br	114ec <OSFlagPost+0x2d0>
   114b0:	e0bff217 	ldw	r2,-56(fp)
   114b4:	e0bff415 	stw	r2,-48(fp)
   114b8:	e0bff417 	ldw	r2,-48(fp)
   114bc:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   114c0:	e0bfff17 	ldw	r2,-4(fp)
   114c4:	00c01bc4 	movi	r3,111
   114c8:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   114cc:	0005883a 	mov	r2,zero
   114d0:	00002606 	br	1156c <OSFlagPost+0x350>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   114d4:	0001883a 	nop
   114d8:	00000506 	br	114f0 <OSFlagPost+0x2d4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   114dc:	0001883a 	nop
   114e0:	00000306 	br	114f0 <OSFlagPost+0x2d4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   114e4:	0001883a 	nop
   114e8:	00000106 	br	114f0 <OSFlagPost+0x2d4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   114ec:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   114f0:	e0bff017 	ldw	r2,-64(fp)
   114f4:	10800017 	ldw	r2,0(r2)
   114f8:	e0bff015 	stw	r2,-64(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   114fc:	e0bff017 	ldw	r2,-64(fp)
   11500:	103f8f1e 	bne	r2,zero,11340 <OSFlagPost+0x124>
   11504:	e0bff217 	ldw	r2,-56(fp)
   11508:	e0bff715 	stw	r2,-36(fp)
   1150c:	e0bff717 	ldw	r2,-36(fp)
   11510:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   11514:	e0bff103 	ldbu	r2,-60(fp)
   11518:	10800058 	cmpnei	r2,r2,1
   1151c:	1000011e 	bne	r2,zero,11524 <OSFlagPost+0x308>
        OS_Sched();
   11520:	000fb2c0 	call	fb2c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11524:	0005303a 	rdctl	r2,status
   11528:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1152c:	e0fffa17 	ldw	r3,-24(fp)
   11530:	00bfff84 	movi	r2,-2
   11534:	1884703a 	and	r2,r3,r2
   11538:	1001703a 	wrctl	status,r2
  
  return context;
   1153c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   11540:	e0bff215 	stw	r2,-56(fp)
    flags_cur = pgrp->OSFlagFlags;
   11544:	e0bffc17 	ldw	r2,-16(fp)
   11548:	10800217 	ldw	r2,8(r2)
   1154c:	e0bff915 	stw	r2,-28(fp)
   11550:	e0bff217 	ldw	r2,-56(fp)
   11554:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11558:	e0bff817 	ldw	r2,-32(fp)
   1155c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   11560:	e0bfff17 	ldw	r2,-4(fp)
   11564:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   11568:	e0bff917 	ldw	r2,-28(fp)
}
   1156c:	e037883a 	mov	sp,fp
   11570:	dfc00117 	ldw	ra,4(sp)
   11574:	df000017 	ldw	fp,0(sp)
   11578:	dec00204 	addi	sp,sp,8
   1157c:	f800283a 	ret

00011580 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   11580:	defff904 	addi	sp,sp,-28
   11584:	df000615 	stw	fp,24(sp)
   11588:	df000604 	addi	fp,sp,24
   1158c:	e13ffe15 	stw	r4,-8(fp)
   11590:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   11594:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   11598:	e0bfff17 	ldw	r2,-4(fp)
   1159c:	1000021e 	bne	r2,zero,115a8 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   115a0:	0005883a 	mov	r2,zero
   115a4:	00002306 	br	11634 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   115a8:	e0bffe17 	ldw	r2,-8(fp)
   115ac:	1000051e 	bne	r2,zero,115c4 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   115b0:	e0bfff17 	ldw	r2,-4(fp)
   115b4:	00c01b84 	movi	r3,110
   115b8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   115bc:	0005883a 	mov	r2,zero
   115c0:	00001c06 	br	11634 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   115c4:	e0bffe17 	ldw	r2,-8(fp)
   115c8:	10800003 	ldbu	r2,0(r2)
   115cc:	10803fcc 	andi	r2,r2,255
   115d0:	10800160 	cmpeqi	r2,r2,5
   115d4:	1000051e 	bne	r2,zero,115ec <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   115d8:	e0bfff17 	ldw	r2,-4(fp)
   115dc:	00c00044 	movi	r3,1
   115e0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   115e4:	0005883a 	mov	r2,zero
   115e8:	00001206 	br	11634 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   115ec:	0005303a 	rdctl	r2,status
   115f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   115f4:	e0fffc17 	ldw	r3,-16(fp)
   115f8:	00bfff84 	movi	r2,-2
   115fc:	1884703a 	and	r2,r3,r2
   11600:	1001703a 	wrctl	status,r2
  
  return context;
   11604:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   11608:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   1160c:	e0bffe17 	ldw	r2,-8(fp)
   11610:	10800217 	ldw	r2,8(r2)
   11614:	e0bffb15 	stw	r2,-20(fp)
   11618:	e0bffa17 	ldw	r2,-24(fp)
   1161c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11620:	e0bffd17 	ldw	r2,-12(fp)
   11624:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11628:	e0bfff17 	ldw	r2,-4(fp)
   1162c:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   11630:	e0bffb17 	ldw	r2,-20(fp)
}
   11634:	e037883a 	mov	sp,fp
   11638:	df000017 	ldw	fp,0(sp)
   1163c:	dec00104 	addi	sp,sp,4
   11640:	f800283a 	ret

00011644 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   11644:	defff804 	addi	sp,sp,-32
   11648:	df000715 	stw	fp,28(sp)
   1164c:	df000704 	addi	fp,sp,28
   11650:	e13ffb15 	stw	r4,-20(fp)
   11654:	e17ffc15 	stw	r5,-16(fp)
   11658:	e1bffd15 	stw	r6,-12(fp)
   1165c:	3807883a 	mov	r3,r7
   11660:	e0800117 	ldw	r2,4(fp)
   11664:	e0fffe05 	stb	r3,-8(fp)
   11668:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   1166c:	d0a80017 	ldw	r2,-24576(gp)
   11670:	d0e80017 	ldw	r3,-24576(gp)
   11674:	18c00c83 	ldbu	r3,50(r3)
   11678:	18c00814 	ori	r3,r3,32
   1167c:	10c00c85 	stb	r3,50(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   11680:	d0a80017 	ldw	r2,-24576(gp)
   11684:	10000cc5 	stb	zero,51(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   11688:	d0a80017 	ldw	r2,-24576(gp)
   1168c:	e0ffff0b 	ldhu	r3,-4(fp)
   11690:	10c00c0d 	sth	r3,48(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   11694:	d0a80017 	ldw	r2,-24576(gp)
   11698:	e0fffc17 	ldw	r3,-16(fp)
   1169c:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   116a0:	e0bffc17 	ldw	r2,-16(fp)
   116a4:	e0fffd17 	ldw	r3,-12(fp)
   116a8:	10c00415 	stw	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   116ac:	e0bffc17 	ldw	r2,-16(fp)
   116b0:	e0fffe03 	ldbu	r3,-8(fp)
   116b4:	10c00505 	stb	r3,20(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   116b8:	d0e80017 	ldw	r3,-24576(gp)
   116bc:	e0bffc17 	ldw	r2,-16(fp)
   116c0:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   116c4:	e0bffb17 	ldw	r2,-20(fp)
   116c8:	10c00117 	ldw	r3,4(r2)
   116cc:	e0bffc17 	ldw	r2,-16(fp)
   116d0:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   116d4:	e0bffc17 	ldw	r2,-16(fp)
   116d8:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   116dc:	e0bffc17 	ldw	r2,-16(fp)
   116e0:	e0fffb17 	ldw	r3,-20(fp)
   116e4:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   116e8:	e0bffb17 	ldw	r2,-20(fp)
   116ec:	10800117 	ldw	r2,4(r2)
   116f0:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   116f4:	e0bff917 	ldw	r2,-28(fp)
   116f8:	10000326 	beq	r2,zero,11708 <OS_FlagBlock+0xc4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   116fc:	e0bff917 	ldw	r2,-28(fp)
   11700:	e0fffc17 	ldw	r3,-16(fp)
   11704:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   11708:	e0bffb17 	ldw	r2,-20(fp)
   1170c:	e0fffc17 	ldw	r3,-16(fp)
   11710:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   11714:	d0a80017 	ldw	r2,-24576(gp)
   11718:	10800d83 	ldbu	r2,54(r2)
   1171c:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   11720:	e0fffa03 	ldbu	r3,-24(fp)
   11724:	e13ffa03 	ldbu	r4,-24(fp)
   11728:	d0a7fd44 	addi	r2,gp,-24587
   1172c:	2085883a 	add	r2,r4,r2
   11730:	10800003 	ldbu	r2,0(r2)
   11734:	1009883a 	mov	r4,r2
   11738:	d0a80017 	ldw	r2,-24576(gp)
   1173c:	10800dc3 	ldbu	r2,55(r2)
   11740:	0084303a 	nor	r2,zero,r2
   11744:	2084703a 	and	r2,r4,r2
   11748:	1009883a 	mov	r4,r2
   1174c:	d0a7fd44 	addi	r2,gp,-24587
   11750:	1885883a 	add	r2,r3,r2
   11754:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   11758:	e0fffa03 	ldbu	r3,-24(fp)
   1175c:	d0a7fd44 	addi	r2,gp,-24587
   11760:	1885883a 	add	r2,r3,r2
   11764:	10800003 	ldbu	r2,0(r2)
   11768:	10803fcc 	andi	r2,r2,255
   1176c:	1000071e 	bne	r2,zero,1178c <OS_FlagBlock+0x148>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   11770:	d0a80017 	ldw	r2,-24576(gp)
   11774:	10800e03 	ldbu	r2,56(r2)
   11778:	0084303a 	nor	r2,zero,r2
   1177c:	1007883a 	mov	r3,r2
   11780:	d0a7fd03 	ldbu	r2,-24588(gp)
   11784:	1884703a 	and	r2,r3,r2
   11788:	d0a7fd05 	stb	r2,-24588(gp)
    }
}
   1178c:	0001883a 	nop
   11790:	e037883a 	mov	sp,fp
   11794:	df000017 	ldw	fp,0(sp)
   11798:	dec00104 	addi	sp,sp,4
   1179c:	f800283a 	ret

000117a0 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   117a0:	defffb04 	addi	sp,sp,-20
   117a4:	dfc00415 	stw	ra,16(sp)
   117a8:	df000315 	stw	fp,12(sp)
   117ac:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   117b0:	0140dc04 	movi	r5,880
   117b4:	010000b4 	movhi	r4,2
   117b8:	21082b04 	addi	r4,r4,8364
   117bc:	000fa700 	call	fa70 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   117c0:	008000b4 	movhi	r2,2
   117c4:	10882b04 	addi	r2,r2,8364
   117c8:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   117cc:	008000b4 	movhi	r2,2
   117d0:	10883604 	addi	r2,r2,8408
   117d4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   117d8:	e03ffd0d 	sth	zero,-12(fp)
   117dc:	00001306 	br	1182c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   117e0:	e0bffe17 	ldw	r2,-8(fp)
   117e4:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   117e8:	e0bffe17 	ldw	r2,-8(fp)
   117ec:	e0ffff17 	ldw	r3,-4(fp)
   117f0:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   117f4:	e0bffe17 	ldw	r2,-8(fp)
   117f8:	00c00fc4 	movi	r3,63
   117fc:	10c00305 	stb	r3,12(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   11800:	e0bffe17 	ldw	r2,-8(fp)
   11804:	10000345 	stb	zero,13(r2)
#endif
        pgrp1++;
   11808:	e0bffe17 	ldw	r2,-8(fp)
   1180c:	10800b04 	addi	r2,r2,44
   11810:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   11814:	e0bfff17 	ldw	r2,-4(fp)
   11818:	10800b04 	addi	r2,r2,44
   1181c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   11820:	e0bffd0b 	ldhu	r2,-12(fp)
   11824:	10800044 	addi	r2,r2,1
   11828:	e0bffd0d 	sth	r2,-12(fp)
   1182c:	e0bffd0b 	ldhu	r2,-12(fp)
   11830:	108004f0 	cmpltui	r2,r2,19
   11834:	103fea1e 	bne	r2,zero,117e0 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   11838:	e0bffe17 	ldw	r2,-8(fp)
   1183c:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   11840:	e0bffe17 	ldw	r2,-8(fp)
   11844:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   11848:	e0bffe17 	ldw	r2,-8(fp)
   1184c:	00c00fc4 	movi	r3,63
   11850:	10c00305 	stb	r3,12(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   11854:	e0bffe17 	ldw	r2,-8(fp)
   11858:	10000345 	stb	zero,13(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   1185c:	008000b4 	movhi	r2,2
   11860:	10882b04 	addi	r2,r2,8364
   11864:	d0a80215 	stw	r2,-24568(gp)
#endif
}
   11868:	0001883a 	nop
   1186c:	e037883a 	mov	sp,fp
   11870:	dfc00117 	ldw	ra,4(sp)
   11874:	df000017 	ldw	fp,0(sp)
   11878:	dec00204 	addi	sp,sp,8
   1187c:	f800283a 	ret

00011880 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   11880:	defffa04 	addi	sp,sp,-24
   11884:	dfc00515 	stw	ra,20(sp)
   11888:	df000415 	stw	fp,16(sp)
   1188c:	df000404 	addi	fp,sp,16
   11890:	e13ffe15 	stw	r4,-8(fp)
   11894:	e17fff15 	stw	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   11898:	e0bffe17 	ldw	r2,-8(fp)
   1189c:	10800217 	ldw	r2,8(r2)
   118a0:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   118a4:	e0bffd17 	ldw	r2,-12(fp)
   118a8:	10000c0d 	sth	zero,48(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   118ac:	e0bffd17 	ldw	r2,-12(fp)
   118b0:	e0ffff17 	ldw	r3,-4(fp)
   118b4:	10c00b15 	stw	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   118b8:	e0bffd17 	ldw	r2,-12(fp)
   118bc:	10c00c83 	ldbu	r3,50(r2)
   118c0:	00bff7c4 	movi	r2,-33
   118c4:	1884703a 	and	r2,r3,r2
   118c8:	1007883a 	mov	r3,r2
   118cc:	e0bffd17 	ldw	r2,-12(fp)
   118d0:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   118d4:	e0bffd17 	ldw	r2,-12(fp)
   118d8:	10000cc5 	stb	zero,51(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   118dc:	e0bffd17 	ldw	r2,-12(fp)
   118e0:	10800c83 	ldbu	r2,50(r2)
   118e4:	10803fcc 	andi	r2,r2,255
   118e8:	1000181e 	bne	r2,zero,1194c <OS_FlagTaskRdy+0xcc>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   118ec:	e0bffd17 	ldw	r2,-12(fp)
   118f0:	10c00e03 	ldbu	r3,56(r2)
   118f4:	d0a7fd03 	ldbu	r2,-24588(gp)
   118f8:	1884b03a 	or	r2,r3,r2
   118fc:	d0a7fd05 	stb	r2,-24588(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   11900:	e0bffd17 	ldw	r2,-12(fp)
   11904:	10800d83 	ldbu	r2,54(r2)
   11908:	10c03fcc 	andi	r3,r2,255
   1190c:	e0bffd17 	ldw	r2,-12(fp)
   11910:	10800d83 	ldbu	r2,54(r2)
   11914:	11003fcc 	andi	r4,r2,255
   11918:	d0a7fd44 	addi	r2,gp,-24587
   1191c:	2085883a 	add	r2,r4,r2
   11920:	11000003 	ldbu	r4,0(r2)
   11924:	e0bffd17 	ldw	r2,-12(fp)
   11928:	10800dc3 	ldbu	r2,55(r2)
   1192c:	2084b03a 	or	r2,r4,r2
   11930:	1009883a 	mov	r4,r2
   11934:	d0a7fd44 	addi	r2,gp,-24587
   11938:	1885883a 	add	r2,r3,r2
   1193c:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   11940:	00800044 	movi	r2,1
   11944:	e0bffc05 	stb	r2,-16(fp)
   11948:	00000106 	br	11950 <OS_FlagTaskRdy+0xd0>
    } else {
        sched                   = OS_FALSE;
   1194c:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   11950:	e13ffe17 	ldw	r4,-8(fp)
   11954:	00119700 	call	11970 <OS_FlagUnlink>
    return (sched);
   11958:	e0bffc03 	ldbu	r2,-16(fp)
}
   1195c:	e037883a 	mov	sp,fp
   11960:	dfc00117 	ldw	ra,4(sp)
   11964:	df000017 	ldw	fp,0(sp)
   11968:	dec00204 	addi	sp,sp,8
   1196c:	f800283a 	ret

00011970 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   11970:	defffa04 	addi	sp,sp,-24
   11974:	df000515 	stw	fp,20(sp)
   11978:	df000504 	addi	fp,sp,20
   1197c:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   11980:	e0bfff17 	ldw	r2,-4(fp)
   11984:	10800117 	ldw	r2,4(r2)
   11988:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   1198c:	e0bfff17 	ldw	r2,-4(fp)
   11990:	10800017 	ldw	r2,0(r2)
   11994:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   11998:	e0bffb17 	ldw	r2,-20(fp)
   1199c:	10000b1e 	bne	r2,zero,119cc <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   119a0:	e0bfff17 	ldw	r2,-4(fp)
   119a4:	10800317 	ldw	r2,12(r2)
   119a8:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   119ac:	e0bffd17 	ldw	r2,-12(fp)
   119b0:	e0fffc17 	ldw	r3,-16(fp)
   119b4:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   119b8:	e0bffc17 	ldw	r2,-16(fp)
   119bc:	10000b26 	beq	r2,zero,119ec <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   119c0:	e0bffc17 	ldw	r2,-16(fp)
   119c4:	10000115 	stw	zero,4(r2)
   119c8:	00000806 	br	119ec <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   119cc:	e0bffb17 	ldw	r2,-20(fp)
   119d0:	e0fffc17 	ldw	r3,-16(fp)
   119d4:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   119d8:	e0bffc17 	ldw	r2,-16(fp)
   119dc:	10000326 	beq	r2,zero,119ec <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   119e0:	e0bffc17 	ldw	r2,-16(fp)
   119e4:	e0fffb17 	ldw	r3,-20(fp)
   119e8:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   119ec:	e0bfff17 	ldw	r2,-4(fp)
   119f0:	10800217 	ldw	r2,8(r2)
   119f4:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   119f8:	e0bffe17 	ldw	r2,-8(fp)
   119fc:	10000a15 	stw	zero,40(r2)
#endif
}
   11a00:	0001883a 	nop
   11a04:	e037883a 	mov	sp,fp
   11a08:	df000017 	ldw	fp,0(sp)
   11a0c:	dec00104 	addi	sp,sp,4
   11a10:	f800283a 	ret

00011a14 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   11a14:	defff404 	addi	sp,sp,-48
   11a18:	df000b15 	stw	fp,44(sp)
   11a1c:	df000b04 	addi	fp,sp,44
   11a20:	e13ffc15 	stw	r4,-16(fp)
   11a24:	e17ffd15 	stw	r5,-12(fp)
   11a28:	e1bffe15 	stw	r6,-8(fp)
   11a2c:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   11a30:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   11a34:	e0bfff17 	ldw	r2,-4(fp)
   11a38:	1000021e 	bne	r2,zero,11a44 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   11a3c:	0005883a 	mov	r2,zero
   11a40:	00006506 	br	11bd8 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   11a44:	e0bffc17 	ldw	r2,-16(fp)
   11a48:	1000051e 	bne	r2,zero,11a60 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   11a4c:	e0bfff17 	ldw	r2,-4(fp)
   11a50:	00c01884 	movi	r3,98
   11a54:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11a58:	0005883a 	mov	r2,zero
   11a5c:	00005e06 	br	11bd8 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   11a60:	e0bffc17 	ldw	r2,-16(fp)
   11a64:	108000cc 	andi	r2,r2,3
   11a68:	10000526 	beq	r2,zero,11a80 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   11a6c:	e0bfff17 	ldw	r2,-4(fp)
   11a70:	00c01884 	movi	r3,98
   11a74:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11a78:	0005883a 	mov	r2,zero
   11a7c:	00005606 	br	11bd8 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   11a80:	e0bffd17 	ldw	r2,-12(fp)
   11a84:	108000a8 	cmpgeui	r2,r2,2
   11a88:	1000051e 	bne	r2,zero,11aa0 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   11a8c:	e0bfff17 	ldw	r2,-4(fp)
   11a90:	00c016c4 	movi	r3,91
   11a94:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11a98:	0005883a 	mov	r2,zero
   11a9c:	00004e06 	br	11bd8 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   11aa0:	e0bffe17 	ldw	r2,-8(fp)
   11aa4:	10800128 	cmpgeui	r2,r2,4
   11aa8:	1000051e 	bne	r2,zero,11ac0 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   11aac:	e0bfff17 	ldw	r2,-4(fp)
   11ab0:	00c01704 	movi	r3,92
   11ab4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11ab8:	0005883a 	mov	r2,zero
   11abc:	00004606 	br	11bd8 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11ac0:	0005303a 	rdctl	r2,status
   11ac4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11ac8:	e0fffb17 	ldw	r3,-20(fp)
   11acc:	00bfff84 	movi	r2,-2
   11ad0:	1884703a 	and	r2,r3,r2
   11ad4:	1001703a 	wrctl	status,r2
  
  return context;
   11ad8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11adc:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   11ae0:	d0a7fa17 	ldw	r2,-24600(gp)
   11ae4:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   11ae8:	d0a7fa17 	ldw	r2,-24600(gp)
   11aec:	10000326 	beq	r2,zero,11afc <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   11af0:	d0a7fa17 	ldw	r2,-24600(gp)
   11af4:	10800117 	ldw	r2,4(r2)
   11af8:	d0a7fa15 	stw	r2,-24600(gp)
   11afc:	e0bff817 	ldw	r2,-32(fp)
   11b00:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11b04:	e0bff917 	ldw	r2,-28(fp)
   11b08:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   11b0c:	e0bffa17 	ldw	r2,-24(fp)
   11b10:	1000051e 	bne	r2,zero,11b28 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
   11b14:	e0bfff17 	ldw	r2,-4(fp)
   11b18:	00c01684 	movi	r3,90
   11b1c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11b20:	0005883a 	mov	r2,zero
   11b24:	00002c06 	br	11bd8 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   11b28:	e0bffc17 	ldw	r2,-16(fp)
   11b2c:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   11b30:	e0fffc17 	ldw	r3,-16(fp)
   11b34:	e0bffe17 	ldw	r2,-8(fp)
   11b38:	1885883a 	add	r2,r3,r2
   11b3c:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   11b40:	e03ff715 	stw	zero,-36(fp)
   11b44:	00000c06 	br	11b78 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   11b48:	e0bff617 	ldw	r2,-40(fp)
   11b4c:	e0fff517 	ldw	r3,-44(fp)
   11b50:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   11b54:	e0bff517 	ldw	r2,-44(fp)
   11b58:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   11b5c:	e0fff517 	ldw	r3,-44(fp)
   11b60:	e0bffe17 	ldw	r2,-8(fp)
   11b64:	1885883a 	add	r2,r3,r2
   11b68:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   11b6c:	e0bff717 	ldw	r2,-36(fp)
   11b70:	10800044 	addi	r2,r2,1
   11b74:	e0bff715 	stw	r2,-36(fp)
   11b78:	e0bffd17 	ldw	r2,-12(fp)
   11b7c:	10bfffc4 	addi	r2,r2,-1
   11b80:	e0fff717 	ldw	r3,-36(fp)
   11b84:	18bff036 	bltu	r3,r2,11b48 <OSMemCreate+0x134>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   11b88:	e0bff617 	ldw	r2,-40(fp)
   11b8c:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   11b90:	e0bffa17 	ldw	r2,-24(fp)
   11b94:	e0fffc17 	ldw	r3,-16(fp)
   11b98:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   11b9c:	e0bffa17 	ldw	r2,-24(fp)
   11ba0:	e0fffc17 	ldw	r3,-16(fp)
   11ba4:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   11ba8:	e0bffa17 	ldw	r2,-24(fp)
   11bac:	e0fffd17 	ldw	r3,-12(fp)
   11bb0:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   11bb4:	e0bffa17 	ldw	r2,-24(fp)
   11bb8:	e0fffd17 	ldw	r3,-12(fp)
   11bbc:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   11bc0:	e0bffa17 	ldw	r2,-24(fp)
   11bc4:	e0fffe17 	ldw	r3,-8(fp)
   11bc8:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   11bcc:	e0bfff17 	ldw	r2,-4(fp)
   11bd0:	10000005 	stb	zero,0(r2)
    return (pmem);
   11bd4:	e0bffa17 	ldw	r2,-24(fp)
}
   11bd8:	e037883a 	mov	sp,fp
   11bdc:	df000017 	ldw	fp,0(sp)
   11be0:	dec00104 	addi	sp,sp,4
   11be4:	f800283a 	ret

00011be8 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   11be8:	defff804 	addi	sp,sp,-32
   11bec:	df000715 	stw	fp,28(sp)
   11bf0:	df000704 	addi	fp,sp,28
   11bf4:	e13ffe15 	stw	r4,-8(fp)
   11bf8:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   11bfc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   11c00:	e0bfff17 	ldw	r2,-4(fp)
   11c04:	1000021e 	bne	r2,zero,11c10 <OSMemGet+0x28>
        return ((void *)0);
   11c08:	0005883a 	mov	r2,zero
   11c0c:	00002e06 	br	11cc8 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   11c10:	e0bffe17 	ldw	r2,-8(fp)
   11c14:	1000051e 	bne	r2,zero,11c2c <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   11c18:	e0bfff17 	ldw	r2,-4(fp)
   11c1c:	00c01804 	movi	r3,96
   11c20:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   11c24:	0005883a 	mov	r2,zero
   11c28:	00002706 	br	11cc8 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11c2c:	0005303a 	rdctl	r2,status
   11c30:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11c34:	e0fffd17 	ldw	r3,-12(fp)
   11c38:	00bfff84 	movi	r2,-2
   11c3c:	1884703a 	and	r2,r3,r2
   11c40:	1001703a 	wrctl	status,r2
  
  return context;
   11c44:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11c48:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   11c4c:	e0bffe17 	ldw	r2,-8(fp)
   11c50:	10800417 	ldw	r2,16(r2)
   11c54:	10001426 	beq	r2,zero,11ca8 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   11c58:	e0bffe17 	ldw	r2,-8(fp)
   11c5c:	10800117 	ldw	r2,4(r2)
   11c60:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   11c64:	e0bffb17 	ldw	r2,-20(fp)
   11c68:	10c00017 	ldw	r3,0(r2)
   11c6c:	e0bffe17 	ldw	r2,-8(fp)
   11c70:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   11c74:	e0bffe17 	ldw	r2,-8(fp)
   11c78:	10800417 	ldw	r2,16(r2)
   11c7c:	10ffffc4 	addi	r3,r2,-1
   11c80:	e0bffe17 	ldw	r2,-8(fp)
   11c84:	10c00415 	stw	r3,16(r2)
   11c88:	e0bff917 	ldw	r2,-28(fp)
   11c8c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11c90:	e0bffa17 	ldw	r2,-24(fp)
   11c94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   11c98:	e0bfff17 	ldw	r2,-4(fp)
   11c9c:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   11ca0:	e0bffb17 	ldw	r2,-20(fp)
   11ca4:	00000806 	br	11cc8 <OSMemGet+0xe0>
   11ca8:	e0bff917 	ldw	r2,-28(fp)
   11cac:	e0bffc15 	stw	r2,-16(fp)
   11cb0:	e0bffc17 	ldw	r2,-16(fp)
   11cb4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   11cb8:	e0bfff17 	ldw	r2,-4(fp)
   11cbc:	00c01744 	movi	r3,93
   11cc0:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   11cc4:	0005883a 	mov	r2,zero
}
   11cc8:	e037883a 	mov	sp,fp
   11ccc:	df000017 	ldw	fp,0(sp)
   11cd0:	dec00104 	addi	sp,sp,4
   11cd4:	f800283a 	ret

00011cd8 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   11cd8:	defff704 	addi	sp,sp,-36
   11cdc:	dfc00815 	stw	ra,32(sp)
   11ce0:	df000715 	stw	fp,28(sp)
   11ce4:	df000704 	addi	fp,sp,28
   11ce8:	e13ffd15 	stw	r4,-12(fp)
   11cec:	e17ffe15 	stw	r5,-8(fp)
   11cf0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11cf4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   11cf8:	e0bfff17 	ldw	r2,-4(fp)
   11cfc:	1000021e 	bne	r2,zero,11d08 <OSMemNameGet+0x30>
        return (0);
   11d00:	0005883a 	mov	r2,zero
   11d04:	00002b06 	br	11db4 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   11d08:	e0bffd17 	ldw	r2,-12(fp)
   11d0c:	1000051e 	bne	r2,zero,11d24 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   11d10:	e0bfff17 	ldw	r2,-4(fp)
   11d14:	00c01804 	movi	r3,96
   11d18:	10c00005 	stb	r3,0(r2)
        return (0);
   11d1c:	0005883a 	mov	r2,zero
   11d20:	00002406 	br	11db4 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   11d24:	e0bffe17 	ldw	r2,-8(fp)
   11d28:	1000051e 	bne	r2,zero,11d40 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   11d2c:	e0bfff17 	ldw	r2,-4(fp)
   11d30:	00c00304 	movi	r3,12
   11d34:	10c00005 	stb	r3,0(r2)
        return (0);
   11d38:	0005883a 	mov	r2,zero
   11d3c:	00001d06 	br	11db4 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   11d40:	d0a7ff03 	ldbu	r2,-24580(gp)
   11d44:	10803fcc 	andi	r2,r2,255
   11d48:	10000526 	beq	r2,zero,11d60 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   11d4c:	e0bfff17 	ldw	r2,-4(fp)
   11d50:	00c00444 	movi	r3,17
   11d54:	10c00005 	stb	r3,0(r2)
        return (0);
   11d58:	0005883a 	mov	r2,zero
   11d5c:	00001506 	br	11db4 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11d60:	0005303a 	rdctl	r2,status
   11d64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11d68:	e0fffb17 	ldw	r3,-20(fp)
   11d6c:	00bfff84 	movi	r2,-2
   11d70:	1884703a 	and	r2,r3,r2
   11d74:	1001703a 	wrctl	status,r2
  
  return context;
   11d78:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   11d7c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   11d80:	e0bffd17 	ldw	r2,-12(fp)
   11d84:	10800504 	addi	r2,r2,20
   11d88:	100b883a 	mov	r5,r2
   11d8c:	e13ffe17 	ldw	r4,-8(fp)
   11d90:	000fc700 	call	fc70 <OS_StrCopy>
   11d94:	e0bffa05 	stb	r2,-24(fp)
   11d98:	e0bff917 	ldw	r2,-28(fp)
   11d9c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11da0:	e0bffc17 	ldw	r2,-16(fp)
   11da4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11da8:	e0bfff17 	ldw	r2,-4(fp)
   11dac:	10000005 	stb	zero,0(r2)
    return (len);
   11db0:	e0bffa03 	ldbu	r2,-24(fp)
}
   11db4:	e037883a 	mov	sp,fp
   11db8:	dfc00117 	ldw	ra,4(sp)
   11dbc:	df000017 	ldw	fp,0(sp)
   11dc0:	dec00204 	addi	sp,sp,8
   11dc4:	f800283a 	ret

00011dc8 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   11dc8:	defff604 	addi	sp,sp,-40
   11dcc:	dfc00915 	stw	ra,36(sp)
   11dd0:	df000815 	stw	fp,32(sp)
   11dd4:	df000804 	addi	fp,sp,32
   11dd8:	e13ffd15 	stw	r4,-12(fp)
   11ddc:	e17ffe15 	stw	r5,-8(fp)
   11de0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11de4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   11de8:	e0bfff17 	ldw	r2,-4(fp)
   11dec:	10003526 	beq	r2,zero,11ec4 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   11df0:	e0bffd17 	ldw	r2,-12(fp)
   11df4:	1000041e 	bne	r2,zero,11e08 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   11df8:	e0bfff17 	ldw	r2,-4(fp)
   11dfc:	00c01804 	movi	r3,96
   11e00:	10c00005 	stb	r3,0(r2)
        return;
   11e04:	00003006 	br	11ec8 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   11e08:	e0bffe17 	ldw	r2,-8(fp)
   11e0c:	1000041e 	bne	r2,zero,11e20 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   11e10:	e0bfff17 	ldw	r2,-4(fp)
   11e14:	00c00304 	movi	r3,12
   11e18:	10c00005 	stb	r3,0(r2)
        return;
   11e1c:	00002a06 	br	11ec8 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   11e20:	d0a7ff03 	ldbu	r2,-24580(gp)
   11e24:	10803fcc 	andi	r2,r2,255
   11e28:	10000426 	beq	r2,zero,11e3c <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   11e2c:	e0bfff17 	ldw	r2,-4(fp)
   11e30:	00c00484 	movi	r3,18
   11e34:	10c00005 	stb	r3,0(r2)
        return;
   11e38:	00002306 	br	11ec8 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11e3c:	0005303a 	rdctl	r2,status
   11e40:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11e44:	e0fffc17 	ldw	r3,-16(fp)
   11e48:	00bfff84 	movi	r2,-2
   11e4c:	1884703a 	and	r2,r3,r2
   11e50:	1001703a 	wrctl	status,r2
  
  return context;
   11e54:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   11e58:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   11e5c:	e13ffe17 	ldw	r4,-8(fp)
   11e60:	000fce40 	call	fce4 <OS_StrLen>
   11e64:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   11e68:	e0bffa03 	ldbu	r2,-24(fp)
   11e6c:	10800830 	cmpltui	r2,r2,32
   11e70:	1000081e 	bne	r2,zero,11e94 <OSMemNameSet+0xcc>
   11e74:	e0bff817 	ldw	r2,-32(fp)
   11e78:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11e7c:	e0bff917 	ldw	r2,-28(fp)
   11e80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   11e84:	e0bfff17 	ldw	r2,-4(fp)
   11e88:	00c018c4 	movi	r3,99
   11e8c:	10c00005 	stb	r3,0(r2)
        return;
   11e90:	00000d06 	br	11ec8 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   11e94:	e0bffd17 	ldw	r2,-12(fp)
   11e98:	10800504 	addi	r2,r2,20
   11e9c:	e17ffe17 	ldw	r5,-8(fp)
   11ea0:	1009883a 	mov	r4,r2
   11ea4:	000fc700 	call	fc70 <OS_StrCopy>
   11ea8:	e0bff817 	ldw	r2,-32(fp)
   11eac:	e0bffb15 	stw	r2,-20(fp)
   11eb0:	e0bffb17 	ldw	r2,-20(fp)
   11eb4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11eb8:	e0bfff17 	ldw	r2,-4(fp)
   11ebc:	10000005 	stb	zero,0(r2)
   11ec0:	00000106 	br	11ec8 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   11ec4:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   11ec8:	e037883a 	mov	sp,fp
   11ecc:	dfc00117 	ldw	ra,4(sp)
   11ed0:	df000017 	ldw	fp,0(sp)
   11ed4:	dec00204 	addi	sp,sp,8
   11ed8:	f800283a 	ret

00011edc <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   11edc:	defff904 	addi	sp,sp,-28
   11ee0:	df000615 	stw	fp,24(sp)
   11ee4:	df000604 	addi	fp,sp,24
   11ee8:	e13ffe15 	stw	r4,-8(fp)
   11eec:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11ef0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   11ef4:	e0bffe17 	ldw	r2,-8(fp)
   11ef8:	1000021e 	bne	r2,zero,11f04 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   11efc:	00801804 	movi	r2,96
   11f00:	00002806 	br	11fa4 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   11f04:	e0bfff17 	ldw	r2,-4(fp)
   11f08:	1000021e 	bne	r2,zero,11f14 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   11f0c:	008017c4 	movi	r2,95
   11f10:	00002406 	br	11fa4 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11f14:	0005303a 	rdctl	r2,status
   11f18:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11f1c:	e0fffd17 	ldw	r3,-12(fp)
   11f20:	00bfff84 	movi	r2,-2
   11f24:	1884703a 	and	r2,r3,r2
   11f28:	1001703a 	wrctl	status,r2
  
  return context;
   11f2c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11f30:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   11f34:	e0bffe17 	ldw	r2,-8(fp)
   11f38:	10c00417 	ldw	r3,16(r2)
   11f3c:	e0bffe17 	ldw	r2,-8(fp)
   11f40:	10800317 	ldw	r2,12(r2)
   11f44:	18800636 	bltu	r3,r2,11f60 <OSMemPut+0x84>
   11f48:	e0bffa17 	ldw	r2,-24(fp)
   11f4c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11f50:	e0bffb17 	ldw	r2,-20(fp)
   11f54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   11f58:	00801784 	movi	r2,94
   11f5c:	00001106 	br	11fa4 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   11f60:	e0bffe17 	ldw	r2,-8(fp)
   11f64:	10c00117 	ldw	r3,4(r2)
   11f68:	e0bfff17 	ldw	r2,-4(fp)
   11f6c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   11f70:	e0bffe17 	ldw	r2,-8(fp)
   11f74:	e0ffff17 	ldw	r3,-4(fp)
   11f78:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   11f7c:	e0bffe17 	ldw	r2,-8(fp)
   11f80:	10800417 	ldw	r2,16(r2)
   11f84:	10c00044 	addi	r3,r2,1
   11f88:	e0bffe17 	ldw	r2,-8(fp)
   11f8c:	10c00415 	stw	r3,16(r2)
   11f90:	e0bffa17 	ldw	r2,-24(fp)
   11f94:	e0bffc15 	stw	r2,-16(fp)
   11f98:	e0bffc17 	ldw	r2,-16(fp)
   11f9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   11fa0:	0005883a 	mov	r2,zero
}
   11fa4:	e037883a 	mov	sp,fp
   11fa8:	df000017 	ldw	fp,0(sp)
   11fac:	dec00104 	addi	sp,sp,4
   11fb0:	f800283a 	ret

00011fb4 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   11fb4:	defffa04 	addi	sp,sp,-24
   11fb8:	df000515 	stw	fp,20(sp)
   11fbc:	df000504 	addi	fp,sp,20
   11fc0:	e13ffe15 	stw	r4,-8(fp)
   11fc4:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11fc8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   11fcc:	e0bffe17 	ldw	r2,-8(fp)
   11fd0:	1000021e 	bne	r2,zero,11fdc <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   11fd4:	00801804 	movi	r2,96
   11fd8:	00002c06 	br	1208c <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   11fdc:	e0bfff17 	ldw	r2,-4(fp)
   11fe0:	1000021e 	bne	r2,zero,11fec <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   11fe4:	00801844 	movi	r2,97
   11fe8:	00002806 	br	1208c <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11fec:	0005303a 	rdctl	r2,status
   11ff0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11ff4:	e0fffc17 	ldw	r3,-16(fp)
   11ff8:	00bfff84 	movi	r2,-2
   11ffc:	1884703a 	and	r2,r3,r2
   12000:	1001703a 	wrctl	status,r2
  
  return context;
   12004:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   12008:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   1200c:	e0bffe17 	ldw	r2,-8(fp)
   12010:	10c00017 	ldw	r3,0(r2)
   12014:	e0bfff17 	ldw	r2,-4(fp)
   12018:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   1201c:	e0bffe17 	ldw	r2,-8(fp)
   12020:	10c00117 	ldw	r3,4(r2)
   12024:	e0bfff17 	ldw	r2,-4(fp)
   12028:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   1202c:	e0bffe17 	ldw	r2,-8(fp)
   12030:	10c00217 	ldw	r3,8(r2)
   12034:	e0bfff17 	ldw	r2,-4(fp)
   12038:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   1203c:	e0bffe17 	ldw	r2,-8(fp)
   12040:	10c00317 	ldw	r3,12(r2)
   12044:	e0bfff17 	ldw	r2,-4(fp)
   12048:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   1204c:	e0bffe17 	ldw	r2,-8(fp)
   12050:	10c00417 	ldw	r3,16(r2)
   12054:	e0bfff17 	ldw	r2,-4(fp)
   12058:	10c00415 	stw	r3,16(r2)
   1205c:	e0bffb17 	ldw	r2,-20(fp)
   12060:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12064:	e0bffd17 	ldw	r2,-12(fp)
   12068:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   1206c:	e0bfff17 	ldw	r2,-4(fp)
   12070:	10c00317 	ldw	r3,12(r2)
   12074:	e0bfff17 	ldw	r2,-4(fp)
   12078:	10800417 	ldw	r2,16(r2)
   1207c:	1887c83a 	sub	r3,r3,r2
   12080:	e0bfff17 	ldw	r2,-4(fp)
   12084:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   12088:	0005883a 	mov	r2,zero
}
   1208c:	e037883a 	mov	sp,fp
   12090:	df000017 	ldw	fp,0(sp)
   12094:	dec00104 	addi	sp,sp,4
   12098:	f800283a 	ret

0001209c <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   1209c:	defffc04 	addi	sp,sp,-16
   120a0:	dfc00315 	stw	ra,12(sp)
   120a4:	df000215 	stw	fp,8(sp)
   120a8:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   120ac:	01430c04 	movi	r5,3120
   120b0:	010000b4 	movhi	r4,2
   120b4:	21090704 	addi	r4,r4,9244
   120b8:	000fa700 	call	fa70 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   120bc:	008000b4 	movhi	r2,2
   120c0:	10890704 	addi	r2,r2,9244
   120c4:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   120c8:	e03fff0d 	sth	zero,-4(fp)
   120cc:	00001306 	br	1211c <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   120d0:	e0bfff0b 	ldhu	r2,-4(fp)
   120d4:	10800044 	addi	r2,r2,1
   120d8:	10c00d24 	muli	r3,r2,52
   120dc:	008000b4 	movhi	r2,2
   120e0:	10890704 	addi	r2,r2,9244
   120e4:	1887883a 	add	r3,r3,r2
   120e8:	e0bffe17 	ldw	r2,-8(fp)
   120ec:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   120f0:	e0bffe17 	ldw	r2,-8(fp)
   120f4:	00c00fc4 	movi	r3,63
   120f8:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   120fc:	e0bffe17 	ldw	r2,-8(fp)
   12100:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   12104:	e0bffe17 	ldw	r2,-8(fp)
   12108:	10800d04 	addi	r2,r2,52
   1210c:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   12110:	e0bfff0b 	ldhu	r2,-4(fp)
   12114:	10800044 	addi	r2,r2,1
   12118:	e0bfff0d 	sth	r2,-4(fp)
   1211c:	e0bfff0b 	ldhu	r2,-4(fp)
   12120:	10800ef0 	cmpltui	r2,r2,59
   12124:	103fea1e 	bne	r2,zero,120d0 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   12128:	e0bffe17 	ldw	r2,-8(fp)
   1212c:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   12130:	e0bffe17 	ldw	r2,-8(fp)
   12134:	00c00fc4 	movi	r3,63
   12138:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   1213c:	e0bffe17 	ldw	r2,-8(fp)
   12140:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   12144:	008000b4 	movhi	r2,2
   12148:	10890704 	addi	r2,r2,9244
   1214c:	d0a7fa15 	stw	r2,-24600(gp)
#endif
}
   12150:	0001883a 	nop
   12154:	e037883a 	mov	sp,fp
   12158:	dfc00117 	ldw	ra,4(sp)
   1215c:	df000017 	ldw	fp,0(sp)
   12160:	dec00204 	addi	sp,sp,8
   12164:	f800283a 	ret

00012168 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   12168:	defff804 	addi	sp,sp,-32
   1216c:	df000715 	stw	fp,28(sp)
   12170:	df000704 	addi	fp,sp,28
   12174:	e13ffe15 	stw	r4,-8(fp)
   12178:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1217c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   12180:	e0bfff17 	ldw	r2,-4(fp)
   12184:	1000021e 	bne	r2,zero,12190 <OSQAccept+0x28>
        return ((void *)0);
   12188:	0005883a 	mov	r2,zero
   1218c:	00004206 	br	12298 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   12190:	e0bffe17 	ldw	r2,-8(fp)
   12194:	1000051e 	bne	r2,zero,121ac <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   12198:	e0bfff17 	ldw	r2,-4(fp)
   1219c:	00c00104 	movi	r3,4
   121a0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   121a4:	0005883a 	mov	r2,zero
   121a8:	00003b06 	br	12298 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   121ac:	e0bffe17 	ldw	r2,-8(fp)
   121b0:	10800003 	ldbu	r2,0(r2)
   121b4:	10803fcc 	andi	r2,r2,255
   121b8:	108000a0 	cmpeqi	r2,r2,2
   121bc:	1000051e 	bne	r2,zero,121d4 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   121c0:	e0bfff17 	ldw	r2,-4(fp)
   121c4:	00c00044 	movi	r3,1
   121c8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   121cc:	0005883a 	mov	r2,zero
   121d0:	00003106 	br	12298 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   121d4:	0005303a 	rdctl	r2,status
   121d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   121dc:	e0fffd17 	ldw	r3,-12(fp)
   121e0:	00bfff84 	movi	r2,-2
   121e4:	1884703a 	and	r2,r3,r2
   121e8:	1001703a 	wrctl	status,r2
  
  return context;
   121ec:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   121f0:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   121f4:	e0bffe17 	ldw	r2,-8(fp)
   121f8:	10800117 	ldw	r2,4(r2)
   121fc:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   12200:	e0bffc17 	ldw	r2,-16(fp)
   12204:	1080058b 	ldhu	r2,22(r2)
   12208:	10bfffcc 	andi	r2,r2,65535
   1220c:	10001926 	beq	r2,zero,12274 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   12210:	e0bffc17 	ldw	r2,-16(fp)
   12214:	10800417 	ldw	r2,16(r2)
   12218:	11000104 	addi	r4,r2,4
   1221c:	e0fffc17 	ldw	r3,-16(fp)
   12220:	19000415 	stw	r4,16(r3)
   12224:	10800017 	ldw	r2,0(r2)
   12228:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   1222c:	e0bffc17 	ldw	r2,-16(fp)
   12230:	1080058b 	ldhu	r2,22(r2)
   12234:	10bfffc4 	addi	r2,r2,-1
   12238:	1007883a 	mov	r3,r2
   1223c:	e0bffc17 	ldw	r2,-16(fp)
   12240:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   12244:	e0bffc17 	ldw	r2,-16(fp)
   12248:	10c00417 	ldw	r3,16(r2)
   1224c:	e0bffc17 	ldw	r2,-16(fp)
   12250:	10800217 	ldw	r2,8(r2)
   12254:	1880041e 	bne	r3,r2,12268 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   12258:	e0bffc17 	ldw	r2,-16(fp)
   1225c:	10c00117 	ldw	r3,4(r2)
   12260:	e0bffc17 	ldw	r2,-16(fp)
   12264:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   12268:	e0bfff17 	ldw	r2,-4(fp)
   1226c:	10000005 	stb	zero,0(r2)
   12270:	00000406 	br	12284 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   12274:	e0bfff17 	ldw	r2,-4(fp)
   12278:	00c007c4 	movi	r3,31
   1227c:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   12280:	e03ff915 	stw	zero,-28(fp)
   12284:	e0bffa17 	ldw	r2,-24(fp)
   12288:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1228c:	e0bffb17 	ldw	r2,-20(fp)
   12290:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   12294:	e0bff917 	ldw	r2,-28(fp)
}
   12298:	e037883a 	mov	sp,fp
   1229c:	df000017 	ldw	fp,0(sp)
   122a0:	dec00104 	addi	sp,sp,4
   122a4:	f800283a 	ret

000122a8 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   122a8:	defff404 	addi	sp,sp,-48
   122ac:	dfc00b15 	stw	ra,44(sp)
   122b0:	df000a15 	stw	fp,40(sp)
   122b4:	df000a04 	addi	fp,sp,40
   122b8:	e13ffe15 	stw	r4,-8(fp)
   122bc:	2805883a 	mov	r2,r5
   122c0:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   122c4:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   122c8:	d0a7ff03 	ldbu	r2,-24580(gp)
   122cc:	10803fcc 	andi	r2,r2,255
   122d0:	10000226 	beq	r2,zero,122dc <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   122d4:	0005883a 	mov	r2,zero
   122d8:	00005906 	br	12440 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   122dc:	0005303a 	rdctl	r2,status
   122e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   122e4:	e0fffd17 	ldw	r3,-12(fp)
   122e8:	00bfff84 	movi	r2,-2
   122ec:	1884703a 	and	r2,r3,r2
   122f0:	1001703a 	wrctl	status,r2
  
  return context;
   122f4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   122f8:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   122fc:	d0a7fe17 	ldw	r2,-24584(gp)
   12300:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   12304:	d0a7fe17 	ldw	r2,-24584(gp)
   12308:	10000326 	beq	r2,zero,12318 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   1230c:	d0a7fe17 	ldw	r2,-24584(gp)
   12310:	10800117 	ldw	r2,4(r2)
   12314:	d0a7fe15 	stw	r2,-24584(gp)
   12318:	e0bff717 	ldw	r2,-36(fp)
   1231c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12320:	e0bff817 	ldw	r2,-32(fp)
   12324:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   12328:	e0bff617 	ldw	r2,-40(fp)
   1232c:	10004326 	beq	r2,zero,1243c <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12330:	0005303a 	rdctl	r2,status
   12334:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12338:	e0fff917 	ldw	r3,-28(fp)
   1233c:	00bfff84 	movi	r2,-2
   12340:	1884703a 	and	r2,r3,r2
   12344:	1001703a 	wrctl	status,r2
  
  return context;
   12348:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
   1234c:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   12350:	d0a7fc17 	ldw	r2,-24592(gp)
   12354:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   12358:	e0bffb17 	ldw	r2,-20(fp)
   1235c:	10002d26 	beq	r2,zero,12414 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   12360:	d0a7fc17 	ldw	r2,-24592(gp)
   12364:	10800017 	ldw	r2,0(r2)
   12368:	d0a7fc15 	stw	r2,-24592(gp)
   1236c:	e0bff717 	ldw	r2,-36(fp)
   12370:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12374:	e0bffa17 	ldw	r2,-24(fp)
   12378:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   1237c:	e0bffb17 	ldw	r2,-20(fp)
   12380:	e0fffe17 	ldw	r3,-8(fp)
   12384:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   12388:	e0bfff0b 	ldhu	r2,-4(fp)
   1238c:	1085883a 	add	r2,r2,r2
   12390:	1085883a 	add	r2,r2,r2
   12394:	1007883a 	mov	r3,r2
   12398:	e0bffe17 	ldw	r2,-8(fp)
   1239c:	10c7883a 	add	r3,r2,r3
   123a0:	e0bffb17 	ldw	r2,-20(fp)
   123a4:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   123a8:	e0bffb17 	ldw	r2,-20(fp)
   123ac:	e0fffe17 	ldw	r3,-8(fp)
   123b0:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   123b4:	e0bffb17 	ldw	r2,-20(fp)
   123b8:	e0fffe17 	ldw	r3,-8(fp)
   123bc:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   123c0:	e0bffb17 	ldw	r2,-20(fp)
   123c4:	e0ffff0b 	ldhu	r3,-4(fp)
   123c8:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   123cc:	e0bffb17 	ldw	r2,-20(fp)
   123d0:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   123d4:	e0bff617 	ldw	r2,-40(fp)
   123d8:	00c00084 	movi	r3,2
   123dc:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   123e0:	e0bff617 	ldw	r2,-40(fp)
   123e4:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   123e8:	e0bff617 	ldw	r2,-40(fp)
   123ec:	e0fffb17 	ldw	r3,-20(fp)
   123f0:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   123f4:	e0bff617 	ldw	r2,-40(fp)
   123f8:	00c00fc4 	movi	r3,63
   123fc:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   12400:	e0bff617 	ldw	r2,-40(fp)
   12404:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   12408:	e13ff617 	ldw	r4,-40(fp)
   1240c:	000f6900 	call	f690 <OS_EventWaitListInit>
   12410:	00000a06 	br	1243c <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   12414:	d0e7fe17 	ldw	r3,-24584(gp)
   12418:	e0bff617 	ldw	r2,-40(fp)
   1241c:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   12420:	e0bff617 	ldw	r2,-40(fp)
   12424:	d0a7fe15 	stw	r2,-24584(gp)
   12428:	e0bff717 	ldw	r2,-36(fp)
   1242c:	e0bffc15 	stw	r2,-16(fp)
   12430:	e0bffc17 	ldw	r2,-16(fp)
   12434:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   12438:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   1243c:	e0bff617 	ldw	r2,-40(fp)
}
   12440:	e037883a 	mov	sp,fp
   12444:	dfc00117 	ldw	ra,4(sp)
   12448:	df000017 	ldw	fp,0(sp)
   1244c:	dec00204 	addi	sp,sp,8
   12450:	f800283a 	ret

00012454 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   12454:	defff204 	addi	sp,sp,-56
   12458:	dfc00d15 	stw	ra,52(sp)
   1245c:	df000c15 	stw	fp,48(sp)
   12460:	df000c04 	addi	fp,sp,48
   12464:	e13ffd15 	stw	r4,-12(fp)
   12468:	2805883a 	mov	r2,r5
   1246c:	e1bfff15 	stw	r6,-4(fp)
   12470:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12474:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   12478:	e0bfff17 	ldw	r2,-4(fp)
   1247c:	1000021e 	bne	r2,zero,12488 <OSQDel+0x34>
        return (pevent);
   12480:	e0bffd17 	ldw	r2,-12(fp)
   12484:	00008e06 	br	126c0 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   12488:	e0bffd17 	ldw	r2,-12(fp)
   1248c:	1000051e 	bne	r2,zero,124a4 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   12490:	e0bfff17 	ldw	r2,-4(fp)
   12494:	00c00104 	movi	r3,4
   12498:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1249c:	e0bffd17 	ldw	r2,-12(fp)
   124a0:	00008706 	br	126c0 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   124a4:	e0bffd17 	ldw	r2,-12(fp)
   124a8:	10800003 	ldbu	r2,0(r2)
   124ac:	10803fcc 	andi	r2,r2,255
   124b0:	108000a0 	cmpeqi	r2,r2,2
   124b4:	1000051e 	bne	r2,zero,124cc <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   124b8:	e0bfff17 	ldw	r2,-4(fp)
   124bc:	00c00044 	movi	r3,1
   124c0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   124c4:	e0bffd17 	ldw	r2,-12(fp)
   124c8:	00007d06 	br	126c0 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   124cc:	d0a7ff03 	ldbu	r2,-24580(gp)
   124d0:	10803fcc 	andi	r2,r2,255
   124d4:	10000526 	beq	r2,zero,124ec <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   124d8:	e0bfff17 	ldw	r2,-4(fp)
   124dc:	00c003c4 	movi	r3,15
   124e0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   124e4:	e0bffd17 	ldw	r2,-12(fp)
   124e8:	00007506 	br	126c0 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   124ec:	0005303a 	rdctl	r2,status
   124f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   124f4:	e0fffc17 	ldw	r3,-16(fp)
   124f8:	00bfff84 	movi	r2,-2
   124fc:	1884703a 	and	r2,r3,r2
   12500:	1001703a 	wrctl	status,r2
  
  return context;
   12504:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12508:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   1250c:	e0bffd17 	ldw	r2,-12(fp)
   12510:	10800283 	ldbu	r2,10(r2)
   12514:	10803fcc 	andi	r2,r2,255
   12518:	10000326 	beq	r2,zero,12528 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1251c:	00800044 	movi	r2,1
   12520:	e0bff405 	stb	r2,-48(fp)
   12524:	00000106 	br	1252c <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   12528:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   1252c:	e0bffe03 	ldbu	r2,-8(fp)
   12530:	10000326 	beq	r2,zero,12540 <OSQDel+0xec>
   12534:	10800060 	cmpeqi	r2,r2,1
   12538:	1000301e 	bne	r2,zero,125fc <OSQDel+0x1a8>
   1253c:	00005506 	br	12694 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   12540:	e0bff403 	ldbu	r2,-48(fp)
   12544:	10001e1e 	bne	r2,zero,125c0 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   12548:	e0bffd17 	ldw	r2,-12(fp)
   1254c:	00c00fc4 	movi	r3,63
   12550:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   12554:	e0bffd17 	ldw	r2,-12(fp)
   12558:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   1255c:	e0bffd17 	ldw	r2,-12(fp)
   12560:	10800117 	ldw	r2,4(r2)
   12564:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   12568:	d0e7fc17 	ldw	r3,-24592(gp)
   1256c:	e0bff817 	ldw	r2,-32(fp)
   12570:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   12574:	e0bff817 	ldw	r2,-32(fp)
   12578:	d0a7fc15 	stw	r2,-24592(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1257c:	e0bffd17 	ldw	r2,-12(fp)
   12580:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   12584:	d0e7fe17 	ldw	r3,-24584(gp)
   12588:	e0bffd17 	ldw	r2,-12(fp)
   1258c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   12590:	e0bffd17 	ldw	r2,-12(fp)
   12594:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   12598:	e0bffd17 	ldw	r2,-12(fp)
   1259c:	d0a7fe15 	stw	r2,-24584(gp)
   125a0:	e0bff617 	ldw	r2,-40(fp)
   125a4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   125a8:	e0bff717 	ldw	r2,-36(fp)
   125ac:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   125b0:	e0bfff17 	ldw	r2,-4(fp)
   125b4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   125b8:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   125bc:	00003f06 	br	126bc <OSQDel+0x268>
   125c0:	e0bff617 	ldw	r2,-40(fp)
   125c4:	e0bff915 	stw	r2,-28(fp)
   125c8:	e0bff917 	ldw	r2,-28(fp)
   125cc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   125d0:	e0bfff17 	ldw	r2,-4(fp)
   125d4:	00c01244 	movi	r3,73
   125d8:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   125dc:	e0bffd17 	ldw	r2,-12(fp)
   125e0:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   125e4:	00003506 	br	126bc <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   125e8:	000f883a 	mov	r7,zero
   125ec:	01800104 	movi	r6,4
   125f0:	000b883a 	mov	r5,zero
   125f4:	e13ffd17 	ldw	r4,-12(fp)
   125f8:	000f0e00 	call	f0e0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   125fc:	e0bffd17 	ldw	r2,-12(fp)
   12600:	10800283 	ldbu	r2,10(r2)
   12604:	10803fcc 	andi	r2,r2,255
   12608:	103ff71e 	bne	r2,zero,125e8 <OSQDel+0x194>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   1260c:	e0bffd17 	ldw	r2,-12(fp)
   12610:	00c00fc4 	movi	r3,63
   12614:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   12618:	e0bffd17 	ldw	r2,-12(fp)
   1261c:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   12620:	e0bffd17 	ldw	r2,-12(fp)
   12624:	10800117 	ldw	r2,4(r2)
   12628:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   1262c:	d0e7fc17 	ldw	r3,-24592(gp)
   12630:	e0bff817 	ldw	r2,-32(fp)
   12634:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   12638:	e0bff817 	ldw	r2,-32(fp)
   1263c:	d0a7fc15 	stw	r2,-24592(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   12640:	e0bffd17 	ldw	r2,-12(fp)
   12644:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   12648:	d0e7fe17 	ldw	r3,-24584(gp)
   1264c:	e0bffd17 	ldw	r2,-12(fp)
   12650:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   12654:	e0bffd17 	ldw	r2,-12(fp)
   12658:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   1265c:	e0bffd17 	ldw	r2,-12(fp)
   12660:	d0a7fe15 	stw	r2,-24584(gp)
   12664:	e0bff617 	ldw	r2,-40(fp)
   12668:	e0bffa15 	stw	r2,-24(fp)
   1266c:	e0bffa17 	ldw	r2,-24(fp)
   12670:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   12674:	e0bff403 	ldbu	r2,-48(fp)
   12678:	10800058 	cmpnei	r2,r2,1
   1267c:	1000011e 	bne	r2,zero,12684 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   12680:	000fb2c0 	call	fb2c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   12684:	e0bfff17 	ldw	r2,-4(fp)
   12688:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   1268c:	e03ff515 	stw	zero,-44(fp)
             break;
   12690:	00000a06 	br	126bc <OSQDel+0x268>
   12694:	e0bff617 	ldw	r2,-40(fp)
   12698:	e0bffb15 	stw	r2,-20(fp)
   1269c:	e0bffb17 	ldw	r2,-20(fp)
   126a0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   126a4:	e0bfff17 	ldw	r2,-4(fp)
   126a8:	00c001c4 	movi	r3,7
   126ac:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   126b0:	e0bffd17 	ldw	r2,-12(fp)
   126b4:	e0bff515 	stw	r2,-44(fp)
             break;
   126b8:	0001883a 	nop
    }
    return (pevent_return);
   126bc:	e0bff517 	ldw	r2,-44(fp)
}
   126c0:	e037883a 	mov	sp,fp
   126c4:	dfc00117 	ldw	ra,4(sp)
   126c8:	df000017 	ldw	fp,0(sp)
   126cc:	dec00204 	addi	sp,sp,8
   126d0:	f800283a 	ret

000126d4 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   126d4:	defffa04 	addi	sp,sp,-24
   126d8:	df000515 	stw	fp,20(sp)
   126dc:	df000504 	addi	fp,sp,20
   126e0:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   126e4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   126e8:	e0bfff17 	ldw	r2,-4(fp)
   126ec:	1000021e 	bne	r2,zero,126f8 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   126f0:	00800104 	movi	r2,4
   126f4:	00002106 	br	1277c <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   126f8:	e0bfff17 	ldw	r2,-4(fp)
   126fc:	10800003 	ldbu	r2,0(r2)
   12700:	10803fcc 	andi	r2,r2,255
   12704:	108000a0 	cmpeqi	r2,r2,2
   12708:	1000021e 	bne	r2,zero,12714 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   1270c:	00800044 	movi	r2,1
   12710:	00001a06 	br	1277c <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12714:	0005303a 	rdctl	r2,status
   12718:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1271c:	e0fffd17 	ldw	r3,-12(fp)
   12720:	00bfff84 	movi	r2,-2
   12724:	1884703a 	and	r2,r3,r2
   12728:	1001703a 	wrctl	status,r2
  
  return context;
   1272c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   12730:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   12734:	e0bfff17 	ldw	r2,-4(fp)
   12738:	10800117 	ldw	r2,4(r2)
   1273c:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   12740:	e0bffc17 	ldw	r2,-16(fp)
   12744:	10c00117 	ldw	r3,4(r2)
   12748:	e0bffc17 	ldw	r2,-16(fp)
   1274c:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   12750:	e0bffc17 	ldw	r2,-16(fp)
   12754:	10c00117 	ldw	r3,4(r2)
   12758:	e0bffc17 	ldw	r2,-16(fp)
   1275c:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   12760:	e0bffc17 	ldw	r2,-16(fp)
   12764:	1000058d 	sth	zero,22(r2)
   12768:	e0bffb17 	ldw	r2,-20(fp)
   1276c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12770:	e0bffe17 	ldw	r2,-8(fp)
   12774:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12778:	0005883a 	mov	r2,zero
}
   1277c:	e037883a 	mov	sp,fp
   12780:	df000017 	ldw	fp,0(sp)
   12784:	dec00104 	addi	sp,sp,4
   12788:	f800283a 	ret

0001278c <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   1278c:	defff304 	addi	sp,sp,-52
   12790:	dfc00c15 	stw	ra,48(sp)
   12794:	df000b15 	stw	fp,44(sp)
   12798:	df000b04 	addi	fp,sp,44
   1279c:	e13ffd15 	stw	r4,-12(fp)
   127a0:	2805883a 	mov	r2,r5
   127a4:	e1bfff15 	stw	r6,-4(fp)
   127a8:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   127ac:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   127b0:	e0bfff17 	ldw	r2,-4(fp)
   127b4:	1000021e 	bne	r2,zero,127c0 <OSQPend+0x34>
        return ((void *)0);
   127b8:	0005883a 	mov	r2,zero
   127bc:	00009106 	br	12a04 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   127c0:	e0bffd17 	ldw	r2,-12(fp)
   127c4:	1000051e 	bne	r2,zero,127dc <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   127c8:	e0bfff17 	ldw	r2,-4(fp)
   127cc:	00c00104 	movi	r3,4
   127d0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   127d4:	0005883a 	mov	r2,zero
   127d8:	00008a06 	br	12a04 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   127dc:	e0bffd17 	ldw	r2,-12(fp)
   127e0:	10800003 	ldbu	r2,0(r2)
   127e4:	10803fcc 	andi	r2,r2,255
   127e8:	108000a0 	cmpeqi	r2,r2,2
   127ec:	1000051e 	bne	r2,zero,12804 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   127f0:	e0bfff17 	ldw	r2,-4(fp)
   127f4:	00c00044 	movi	r3,1
   127f8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   127fc:	0005883a 	mov	r2,zero
   12800:	00008006 	br	12a04 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   12804:	d0a7ff03 	ldbu	r2,-24580(gp)
   12808:	10803fcc 	andi	r2,r2,255
   1280c:	10000526 	beq	r2,zero,12824 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   12810:	e0bfff17 	ldw	r2,-4(fp)
   12814:	00c00084 	movi	r3,2
   12818:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1281c:	0005883a 	mov	r2,zero
   12820:	00007806 	br	12a04 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   12824:	d0a7f103 	ldbu	r2,-24636(gp)
   12828:	10803fcc 	andi	r2,r2,255
   1282c:	10000526 	beq	r2,zero,12844 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   12830:	e0bfff17 	ldw	r2,-4(fp)
   12834:	00c00344 	movi	r3,13
   12838:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1283c:	0005883a 	mov	r2,zero
   12840:	00007006 	br	12a04 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12844:	0005303a 	rdctl	r2,status
   12848:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1284c:	e0fffc17 	ldw	r3,-16(fp)
   12850:	00bfff84 	movi	r2,-2
   12854:	1884703a 	and	r2,r3,r2
   12858:	1001703a 	wrctl	status,r2
  
  return context;
   1285c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12860:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   12864:	e0bffd17 	ldw	r2,-12(fp)
   12868:	10800117 	ldw	r2,4(r2)
   1286c:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   12870:	e0bff817 	ldw	r2,-32(fp)
   12874:	1080058b 	ldhu	r2,22(r2)
   12878:	10bfffcc 	andi	r2,r2,65535
   1287c:	10001e26 	beq	r2,zero,128f8 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   12880:	e0bff817 	ldw	r2,-32(fp)
   12884:	10800417 	ldw	r2,16(r2)
   12888:	11000104 	addi	r4,r2,4
   1288c:	e0fff817 	ldw	r3,-32(fp)
   12890:	19000415 	stw	r4,16(r3)
   12894:	10800017 	ldw	r2,0(r2)
   12898:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   1289c:	e0bff817 	ldw	r2,-32(fp)
   128a0:	1080058b 	ldhu	r2,22(r2)
   128a4:	10bfffc4 	addi	r2,r2,-1
   128a8:	1007883a 	mov	r3,r2
   128ac:	e0bff817 	ldw	r2,-32(fp)
   128b0:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   128b4:	e0bff817 	ldw	r2,-32(fp)
   128b8:	10c00417 	ldw	r3,16(r2)
   128bc:	e0bff817 	ldw	r2,-32(fp)
   128c0:	10800217 	ldw	r2,8(r2)
   128c4:	1880041e 	bne	r3,r2,128d8 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
   128c8:	e0bff817 	ldw	r2,-32(fp)
   128cc:	10c00117 	ldw	r3,4(r2)
   128d0:	e0bff817 	ldw	r2,-32(fp)
   128d4:	10c00415 	stw	r3,16(r2)
   128d8:	e0bff617 	ldw	r2,-40(fp)
   128dc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   128e0:	e0bff717 	ldw	r2,-36(fp)
   128e4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   128e8:	e0bfff17 	ldw	r2,-4(fp)
   128ec:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   128f0:	e0bff517 	ldw	r2,-44(fp)
   128f4:	00004306 	br	12a04 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   128f8:	d0a80017 	ldw	r2,-24576(gp)
   128fc:	d0e80017 	ldw	r3,-24576(gp)
   12900:	18c00c83 	ldbu	r3,50(r3)
   12904:	18c00114 	ori	r3,r3,4
   12908:	10c00c85 	stb	r3,50(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1290c:	d0a80017 	ldw	r2,-24576(gp)
   12910:	10000cc5 	stb	zero,51(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   12914:	d0a80017 	ldw	r2,-24576(gp)
   12918:	e0fffe0b 	ldhu	r3,-8(fp)
   1291c:	10c00c0d 	sth	r3,48(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   12920:	e13ffd17 	ldw	r4,-12(fp)
   12924:	000f2780 	call	f278 <OS_EventTaskWait>
   12928:	e0bff617 	ldw	r2,-40(fp)
   1292c:	e0bffb15 	stw	r2,-20(fp)
   12930:	e0bffb17 	ldw	r2,-20(fp)
   12934:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   12938:	000fb2c0 	call	fb2c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1293c:	0005303a 	rdctl	r2,status
   12940:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12944:	e0fff917 	ldw	r3,-28(fp)
   12948:	00bfff84 	movi	r2,-2
   1294c:	1884703a 	and	r2,r3,r2
   12950:	1001703a 	wrctl	status,r2
  
  return context;
   12954:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   12958:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   1295c:	d0a80017 	ldw	r2,-24576(gp)
   12960:	10800cc3 	ldbu	r2,51(r2)
   12964:	10803fcc 	andi	r2,r2,255
   12968:	10000326 	beq	r2,zero,12978 <OSQPend+0x1ec>
   1296c:	108000a0 	cmpeqi	r2,r2,2
   12970:	1000071e 	bne	r2,zero,12990 <OSQPend+0x204>
   12974:	00000b06 	br	129a4 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   12978:	d0a80017 	ldw	r2,-24576(gp)
   1297c:	10800917 	ldw	r2,36(r2)
   12980:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   12984:	e0bfff17 	ldw	r2,-4(fp)
   12988:	10000005 	stb	zero,0(r2)
             break;
   1298c:	00000e06 	br	129c8 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   12990:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   12994:	e0bfff17 	ldw	r2,-4(fp)
   12998:	00c00384 	movi	r3,14
   1299c:	10c00005 	stb	r3,0(r2)
             break;
   129a0:	00000906 	br	129c8 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   129a4:	d0a80017 	ldw	r2,-24576(gp)
   129a8:	e17ffd17 	ldw	r5,-12(fp)
   129ac:	1009883a 	mov	r4,r2
   129b0:	000f4d80 	call	f4d8 <OS_EventTaskRemove>
             pmsg = (void *)0;
   129b4:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   129b8:	e0bfff17 	ldw	r2,-4(fp)
   129bc:	00c00284 	movi	r3,10
   129c0:	10c00005 	stb	r3,0(r2)
             break;
   129c4:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   129c8:	d0a80017 	ldw	r2,-24576(gp)
   129cc:	10000c85 	stb	zero,50(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   129d0:	d0a80017 	ldw	r2,-24576(gp)
   129d4:	10000cc5 	stb	zero,51(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   129d8:	d0a80017 	ldw	r2,-24576(gp)
   129dc:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   129e0:	d0a80017 	ldw	r2,-24576(gp)
   129e4:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   129e8:	d0a80017 	ldw	r2,-24576(gp)
   129ec:	10000915 	stw	zero,36(r2)
   129f0:	e0bff617 	ldw	r2,-40(fp)
   129f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   129f8:	e0bffa17 	ldw	r2,-24(fp)
   129fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   12a00:	e0bff517 	ldw	r2,-44(fp)
}
   12a04:	e037883a 	mov	sp,fp
   12a08:	dfc00117 	ldw	ra,4(sp)
   12a0c:	df000017 	ldw	fp,0(sp)
   12a10:	dec00204 	addi	sp,sp,8
   12a14:	f800283a 	ret

00012a18 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   12a18:	defff604 	addi	sp,sp,-40
   12a1c:	dfc00915 	stw	ra,36(sp)
   12a20:	df000815 	stw	fp,32(sp)
   12a24:	df000804 	addi	fp,sp,32
   12a28:	e13ffd15 	stw	r4,-12(fp)
   12a2c:	2805883a 	mov	r2,r5
   12a30:	e1bfff15 	stw	r6,-4(fp)
   12a34:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12a38:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   12a3c:	e0bfff17 	ldw	r2,-4(fp)
   12a40:	1000021e 	bne	r2,zero,12a4c <OSQPendAbort+0x34>
        return (0);
   12a44:	0005883a 	mov	r2,zero
   12a48:	00004906 	br	12b70 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   12a4c:	e0bffd17 	ldw	r2,-12(fp)
   12a50:	1000051e 	bne	r2,zero,12a68 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   12a54:	e0bfff17 	ldw	r2,-4(fp)
   12a58:	00c00104 	movi	r3,4
   12a5c:	10c00005 	stb	r3,0(r2)
        return (0);
   12a60:	0005883a 	mov	r2,zero
   12a64:	00004206 	br	12b70 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   12a68:	e0bffd17 	ldw	r2,-12(fp)
   12a6c:	10800003 	ldbu	r2,0(r2)
   12a70:	10803fcc 	andi	r2,r2,255
   12a74:	108000a0 	cmpeqi	r2,r2,2
   12a78:	1000051e 	bne	r2,zero,12a90 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   12a7c:	e0bfff17 	ldw	r2,-4(fp)
   12a80:	00c00044 	movi	r3,1
   12a84:	10c00005 	stb	r3,0(r2)
        return (0);
   12a88:	0005883a 	mov	r2,zero
   12a8c:	00003806 	br	12b70 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12a90:	0005303a 	rdctl	r2,status
   12a94:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12a98:	e0fffc17 	ldw	r3,-16(fp)
   12a9c:	00bfff84 	movi	r2,-2
   12aa0:	1884703a 	and	r2,r3,r2
   12aa4:	1001703a 	wrctl	status,r2
  
  return context;
   12aa8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12aac:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   12ab0:	e0bffd17 	ldw	r2,-12(fp)
   12ab4:	10800283 	ldbu	r2,10(r2)
   12ab8:	10803fcc 	andi	r2,r2,255
   12abc:	10002526 	beq	r2,zero,12b54 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   12ac0:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   12ac4:	e0bffe03 	ldbu	r2,-8(fp)
   12ac8:	10800060 	cmpeqi	r2,r2,1
   12acc:	10000e26 	beq	r2,zero,12b08 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   12ad0:	00000806 	br	12af4 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   12ad4:	01c00084 	movi	r7,2
   12ad8:	01800104 	movi	r6,4
   12adc:	000b883a 	mov	r5,zero
   12ae0:	e13ffd17 	ldw	r4,-12(fp)
   12ae4:	000f0e00 	call	f0e0 <OS_EventTaskRdy>
                     nbr_tasks++;
   12ae8:	e0bff803 	ldbu	r2,-32(fp)
   12aec:	10800044 	addi	r2,r2,1
   12af0:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   12af4:	e0bffd17 	ldw	r2,-12(fp)
   12af8:	10800283 	ldbu	r2,10(r2)
   12afc:	10803fcc 	andi	r2,r2,255
   12b00:	103ff41e 	bne	r2,zero,12ad4 <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   12b04:	00000906 	br	12b2c <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   12b08:	01c00084 	movi	r7,2
   12b0c:	01800104 	movi	r6,4
   12b10:	000b883a 	mov	r5,zero
   12b14:	e13ffd17 	ldw	r4,-12(fp)
   12b18:	000f0e00 	call	f0e0 <OS_EventTaskRdy>
                 nbr_tasks++;
   12b1c:	e0bff803 	ldbu	r2,-32(fp)
   12b20:	10800044 	addi	r2,r2,1
   12b24:	e0bff805 	stb	r2,-32(fp)
                 break;
   12b28:	0001883a 	nop
   12b2c:	e0bff917 	ldw	r2,-28(fp)
   12b30:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12b34:	e0bffa17 	ldw	r2,-24(fp)
   12b38:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   12b3c:	000fb2c0 	call	fb2c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   12b40:	e0bfff17 	ldw	r2,-4(fp)
   12b44:	00c00384 	movi	r3,14
   12b48:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   12b4c:	e0bff803 	ldbu	r2,-32(fp)
   12b50:	00000706 	br	12b70 <OSQPendAbort+0x158>
   12b54:	e0bff917 	ldw	r2,-28(fp)
   12b58:	e0bffb15 	stw	r2,-20(fp)
   12b5c:	e0bffb17 	ldw	r2,-20(fp)
   12b60:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   12b64:	e0bfff17 	ldw	r2,-4(fp)
   12b68:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   12b6c:	0005883a 	mov	r2,zero
}
   12b70:	e037883a 	mov	sp,fp
   12b74:	dfc00117 	ldw	ra,4(sp)
   12b78:	df000017 	ldw	fp,0(sp)
   12b7c:	dec00204 	addi	sp,sp,8
   12b80:	f800283a 	ret

00012b84 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   12b84:	defff604 	addi	sp,sp,-40
   12b88:	dfc00915 	stw	ra,36(sp)
   12b8c:	df000815 	stw	fp,32(sp)
   12b90:	df000804 	addi	fp,sp,32
   12b94:	e13ffe15 	stw	r4,-8(fp)
   12b98:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   12b9c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   12ba0:	e0bffe17 	ldw	r2,-8(fp)
   12ba4:	1000021e 	bne	r2,zero,12bb0 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   12ba8:	00800104 	movi	r2,4
   12bac:	00004a06 	br	12cd8 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   12bb0:	e0bffe17 	ldw	r2,-8(fp)
   12bb4:	10800003 	ldbu	r2,0(r2)
   12bb8:	10803fcc 	andi	r2,r2,255
   12bbc:	108000a0 	cmpeqi	r2,r2,2
   12bc0:	1000021e 	bne	r2,zero,12bcc <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   12bc4:	00800044 	movi	r2,1
   12bc8:	00004306 	br	12cd8 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12bcc:	0005303a 	rdctl	r2,status
   12bd0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12bd4:	e0fffd17 	ldw	r3,-12(fp)
   12bd8:	00bfff84 	movi	r2,-2
   12bdc:	1884703a 	and	r2,r3,r2
   12be0:	1001703a 	wrctl	status,r2
  
  return context;
   12be4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   12be8:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   12bec:	e0bffe17 	ldw	r2,-8(fp)
   12bf0:	10800283 	ldbu	r2,10(r2)
   12bf4:	10803fcc 	andi	r2,r2,255
   12bf8:	10000c26 	beq	r2,zero,12c2c <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12bfc:	000f883a 	mov	r7,zero
   12c00:	01800104 	movi	r6,4
   12c04:	e17fff17 	ldw	r5,-4(fp)
   12c08:	e13ffe17 	ldw	r4,-8(fp)
   12c0c:	000f0e00 	call	f0e0 <OS_EventTaskRdy>
   12c10:	e0bff817 	ldw	r2,-32(fp)
   12c14:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12c18:	e0bff917 	ldw	r2,-28(fp)
   12c1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   12c20:	000fb2c0 	call	fb2c <OS_Sched>
        return (OS_ERR_NONE);
   12c24:	0005883a 	mov	r2,zero
   12c28:	00002b06 	br	12cd8 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   12c2c:	e0bffe17 	ldw	r2,-8(fp)
   12c30:	10800117 	ldw	r2,4(r2)
   12c34:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   12c38:	e0bffb17 	ldw	r2,-20(fp)
   12c3c:	10c0058b 	ldhu	r3,22(r2)
   12c40:	e0bffb17 	ldw	r2,-20(fp)
   12c44:	1080050b 	ldhu	r2,20(r2)
   12c48:	18ffffcc 	andi	r3,r3,65535
   12c4c:	10bfffcc 	andi	r2,r2,65535
   12c50:	18800636 	bltu	r3,r2,12c6c <OSQPost+0xe8>
   12c54:	e0bff817 	ldw	r2,-32(fp)
   12c58:	e0bffa15 	stw	r2,-24(fp)
   12c5c:	e0bffa17 	ldw	r2,-24(fp)
   12c60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   12c64:	00800784 	movi	r2,30
   12c68:	00001b06 	br	12cd8 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   12c6c:	e0bffb17 	ldw	r2,-20(fp)
   12c70:	10800317 	ldw	r2,12(r2)
   12c74:	11000104 	addi	r4,r2,4
   12c78:	e0fffb17 	ldw	r3,-20(fp)
   12c7c:	19000315 	stw	r4,12(r3)
   12c80:	e0ffff17 	ldw	r3,-4(fp)
   12c84:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   12c88:	e0bffb17 	ldw	r2,-20(fp)
   12c8c:	1080058b 	ldhu	r2,22(r2)
   12c90:	10800044 	addi	r2,r2,1
   12c94:	1007883a 	mov	r3,r2
   12c98:	e0bffb17 	ldw	r2,-20(fp)
   12c9c:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   12ca0:	e0bffb17 	ldw	r2,-20(fp)
   12ca4:	10c00317 	ldw	r3,12(r2)
   12ca8:	e0bffb17 	ldw	r2,-20(fp)
   12cac:	10800217 	ldw	r2,8(r2)
   12cb0:	1880041e 	bne	r3,r2,12cc4 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   12cb4:	e0bffb17 	ldw	r2,-20(fp)
   12cb8:	10c00117 	ldw	r3,4(r2)
   12cbc:	e0bffb17 	ldw	r2,-20(fp)
   12cc0:	10c00315 	stw	r3,12(r2)
   12cc4:	e0bff817 	ldw	r2,-32(fp)
   12cc8:	e0bffc15 	stw	r2,-16(fp)
   12ccc:	e0bffc17 	ldw	r2,-16(fp)
   12cd0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12cd4:	0005883a 	mov	r2,zero
}
   12cd8:	e037883a 	mov	sp,fp
   12cdc:	dfc00117 	ldw	ra,4(sp)
   12ce0:	df000017 	ldw	fp,0(sp)
   12ce4:	dec00204 	addi	sp,sp,8
   12ce8:	f800283a 	ret

00012cec <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   12cec:	defff604 	addi	sp,sp,-40
   12cf0:	dfc00915 	stw	ra,36(sp)
   12cf4:	df000815 	stw	fp,32(sp)
   12cf8:	df000804 	addi	fp,sp,32
   12cfc:	e13ffe15 	stw	r4,-8(fp)
   12d00:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12d04:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12d08:	e0bffe17 	ldw	r2,-8(fp)
   12d0c:	1000021e 	bne	r2,zero,12d18 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   12d10:	00800104 	movi	r2,4
   12d14:	00004c06 	br	12e48 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   12d18:	e0bffe17 	ldw	r2,-8(fp)
   12d1c:	10800003 	ldbu	r2,0(r2)
   12d20:	10803fcc 	andi	r2,r2,255
   12d24:	108000a0 	cmpeqi	r2,r2,2
   12d28:	1000021e 	bne	r2,zero,12d34 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   12d2c:	00800044 	movi	r2,1
   12d30:	00004506 	br	12e48 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12d34:	0005303a 	rdctl	r2,status
   12d38:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12d3c:	e0fffd17 	ldw	r3,-12(fp)
   12d40:	00bfff84 	movi	r2,-2
   12d44:	1884703a 	and	r2,r3,r2
   12d48:	1001703a 	wrctl	status,r2
  
  return context;
   12d4c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   12d50:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   12d54:	e0bffe17 	ldw	r2,-8(fp)
   12d58:	10800283 	ldbu	r2,10(r2)
   12d5c:	10803fcc 	andi	r2,r2,255
   12d60:	10000c26 	beq	r2,zero,12d94 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12d64:	000f883a 	mov	r7,zero
   12d68:	01800104 	movi	r6,4
   12d6c:	e17fff17 	ldw	r5,-4(fp)
   12d70:	e13ffe17 	ldw	r4,-8(fp)
   12d74:	000f0e00 	call	f0e0 <OS_EventTaskRdy>
   12d78:	e0bff817 	ldw	r2,-32(fp)
   12d7c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12d80:	e0bff917 	ldw	r2,-28(fp)
   12d84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   12d88:	000fb2c0 	call	fb2c <OS_Sched>
        return (OS_ERR_NONE);
   12d8c:	0005883a 	mov	r2,zero
   12d90:	00002d06 	br	12e48 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   12d94:	e0bffe17 	ldw	r2,-8(fp)
   12d98:	10800117 	ldw	r2,4(r2)
   12d9c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   12da0:	e0bffb17 	ldw	r2,-20(fp)
   12da4:	10c0058b 	ldhu	r3,22(r2)
   12da8:	e0bffb17 	ldw	r2,-20(fp)
   12dac:	1080050b 	ldhu	r2,20(r2)
   12db0:	18ffffcc 	andi	r3,r3,65535
   12db4:	10bfffcc 	andi	r2,r2,65535
   12db8:	18800636 	bltu	r3,r2,12dd4 <OSQPostFront+0xe8>
   12dbc:	e0bff817 	ldw	r2,-32(fp)
   12dc0:	e0bffa15 	stw	r2,-24(fp)
   12dc4:	e0bffa17 	ldw	r2,-24(fp)
   12dc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   12dcc:	00800784 	movi	r2,30
   12dd0:	00001d06 	br	12e48 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   12dd4:	e0bffb17 	ldw	r2,-20(fp)
   12dd8:	10c00417 	ldw	r3,16(r2)
   12ddc:	e0bffb17 	ldw	r2,-20(fp)
   12de0:	10800117 	ldw	r2,4(r2)
   12de4:	1880041e 	bne	r3,r2,12df8 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   12de8:	e0bffb17 	ldw	r2,-20(fp)
   12dec:	10c00217 	ldw	r3,8(r2)
   12df0:	e0bffb17 	ldw	r2,-20(fp)
   12df4:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   12df8:	e0bffb17 	ldw	r2,-20(fp)
   12dfc:	10800417 	ldw	r2,16(r2)
   12e00:	10ffff04 	addi	r3,r2,-4
   12e04:	e0bffb17 	ldw	r2,-20(fp)
   12e08:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   12e0c:	e0bffb17 	ldw	r2,-20(fp)
   12e10:	10800417 	ldw	r2,16(r2)
   12e14:	e0ffff17 	ldw	r3,-4(fp)
   12e18:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   12e1c:	e0bffb17 	ldw	r2,-20(fp)
   12e20:	1080058b 	ldhu	r2,22(r2)
   12e24:	10800044 	addi	r2,r2,1
   12e28:	1007883a 	mov	r3,r2
   12e2c:	e0bffb17 	ldw	r2,-20(fp)
   12e30:	10c0058d 	sth	r3,22(r2)
   12e34:	e0bff817 	ldw	r2,-32(fp)
   12e38:	e0bffc15 	stw	r2,-16(fp)
   12e3c:	e0bffc17 	ldw	r2,-16(fp)
   12e40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12e44:	0005883a 	mov	r2,zero
}
   12e48:	e037883a 	mov	sp,fp
   12e4c:	dfc00117 	ldw	ra,4(sp)
   12e50:	df000017 	ldw	fp,0(sp)
   12e54:	dec00204 	addi	sp,sp,8
   12e58:	f800283a 	ret

00012e5c <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   12e5c:	defff504 	addi	sp,sp,-44
   12e60:	dfc00a15 	stw	ra,40(sp)
   12e64:	df000915 	stw	fp,36(sp)
   12e68:	df000904 	addi	fp,sp,36
   12e6c:	e13ffd15 	stw	r4,-12(fp)
   12e70:	e17ffe15 	stw	r5,-8(fp)
   12e74:	3005883a 	mov	r2,r6
   12e78:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12e7c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12e80:	e0bffd17 	ldw	r2,-12(fp)
   12e84:	1000021e 	bne	r2,zero,12e90 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   12e88:	00800104 	movi	r2,4
   12e8c:	00007106 	br	13054 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   12e90:	e0bffd17 	ldw	r2,-12(fp)
   12e94:	10800003 	ldbu	r2,0(r2)
   12e98:	10803fcc 	andi	r2,r2,255
   12e9c:	108000a0 	cmpeqi	r2,r2,2
   12ea0:	1000021e 	bne	r2,zero,12eac <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   12ea4:	00800044 	movi	r2,1
   12ea8:	00006a06 	br	13054 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12eac:	0005303a 	rdctl	r2,status
   12eb0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12eb4:	e0fffc17 	ldw	r3,-16(fp)
   12eb8:	00bfff84 	movi	r2,-2
   12ebc:	1884703a 	and	r2,r3,r2
   12ec0:	1001703a 	wrctl	status,r2
  
  return context;
   12ec4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12ec8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   12ecc:	e0bffd17 	ldw	r2,-12(fp)
   12ed0:	10800283 	ldbu	r2,10(r2)
   12ed4:	10803fcc 	andi	r2,r2,255
   12ed8:	10001d26 	beq	r2,zero,12f50 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   12edc:	e0bfff03 	ldbu	r2,-4(fp)
   12ee0:	1080004c 	andi	r2,r2,1
   12ee4:	10000b26 	beq	r2,zero,12f14 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   12ee8:	00000506 	br	12f00 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12eec:	000f883a 	mov	r7,zero
   12ef0:	01800104 	movi	r6,4
   12ef4:	e17ffe17 	ldw	r5,-8(fp)
   12ef8:	e13ffd17 	ldw	r4,-12(fp)
   12efc:	000f0e00 	call	f0e0 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   12f00:	e0bffd17 	ldw	r2,-12(fp)
   12f04:	10800283 	ldbu	r2,10(r2)
   12f08:	10803fcc 	andi	r2,r2,255
   12f0c:	103ff71e 	bne	r2,zero,12eec <OSQPostOpt+0x90>
   12f10:	00000506 	br	12f28 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12f14:	000f883a 	mov	r7,zero
   12f18:	01800104 	movi	r6,4
   12f1c:	e17ffe17 	ldw	r5,-8(fp)
   12f20:	e13ffd17 	ldw	r4,-12(fp)
   12f24:	000f0e00 	call	f0e0 <OS_EventTaskRdy>
   12f28:	e0bff717 	ldw	r2,-36(fp)
   12f2c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12f30:	e0bff817 	ldw	r2,-32(fp)
   12f34:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   12f38:	e0bfff03 	ldbu	r2,-4(fp)
   12f3c:	1080010c 	andi	r2,r2,4
   12f40:	1000011e 	bne	r2,zero,12f48 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   12f44:	000fb2c0 	call	fb2c <OS_Sched>
        }
        return (OS_ERR_NONE);
   12f48:	0005883a 	mov	r2,zero
   12f4c:	00004106 	br	13054 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   12f50:	e0bffd17 	ldw	r2,-12(fp)
   12f54:	10800117 	ldw	r2,4(r2)
   12f58:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   12f5c:	e0bffa17 	ldw	r2,-24(fp)
   12f60:	10c0058b 	ldhu	r3,22(r2)
   12f64:	e0bffa17 	ldw	r2,-24(fp)
   12f68:	1080050b 	ldhu	r2,20(r2)
   12f6c:	18ffffcc 	andi	r3,r3,65535
   12f70:	10bfffcc 	andi	r2,r2,65535
   12f74:	18800636 	bltu	r3,r2,12f90 <OSQPostOpt+0x134>
   12f78:	e0bff717 	ldw	r2,-36(fp)
   12f7c:	e0bff915 	stw	r2,-28(fp)
   12f80:	e0bff917 	ldw	r2,-28(fp)
   12f84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   12f88:	00800784 	movi	r2,30
   12f8c:	00003106 	br	13054 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   12f90:	e0bfff03 	ldbu	r2,-4(fp)
   12f94:	1080008c 	andi	r2,r2,2
   12f98:	10001326 	beq	r2,zero,12fe8 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   12f9c:	e0bffa17 	ldw	r2,-24(fp)
   12fa0:	10c00417 	ldw	r3,16(r2)
   12fa4:	e0bffa17 	ldw	r2,-24(fp)
   12fa8:	10800117 	ldw	r2,4(r2)
   12fac:	1880041e 	bne	r3,r2,12fc0 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   12fb0:	e0bffa17 	ldw	r2,-24(fp)
   12fb4:	10c00217 	ldw	r3,8(r2)
   12fb8:	e0bffa17 	ldw	r2,-24(fp)
   12fbc:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   12fc0:	e0bffa17 	ldw	r2,-24(fp)
   12fc4:	10800417 	ldw	r2,16(r2)
   12fc8:	10ffff04 	addi	r3,r2,-4
   12fcc:	e0bffa17 	ldw	r2,-24(fp)
   12fd0:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   12fd4:	e0bffa17 	ldw	r2,-24(fp)
   12fd8:	10800417 	ldw	r2,16(r2)
   12fdc:	e0fffe17 	ldw	r3,-8(fp)
   12fe0:	10c00015 	stw	r3,0(r2)
   12fe4:	00001006 	br	13028 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   12fe8:	e0bffa17 	ldw	r2,-24(fp)
   12fec:	10800317 	ldw	r2,12(r2)
   12ff0:	11000104 	addi	r4,r2,4
   12ff4:	e0fffa17 	ldw	r3,-24(fp)
   12ff8:	19000315 	stw	r4,12(r3)
   12ffc:	e0fffe17 	ldw	r3,-8(fp)
   13000:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   13004:	e0bffa17 	ldw	r2,-24(fp)
   13008:	10c00317 	ldw	r3,12(r2)
   1300c:	e0bffa17 	ldw	r2,-24(fp)
   13010:	10800217 	ldw	r2,8(r2)
   13014:	1880041e 	bne	r3,r2,13028 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   13018:	e0bffa17 	ldw	r2,-24(fp)
   1301c:	10c00117 	ldw	r3,4(r2)
   13020:	e0bffa17 	ldw	r2,-24(fp)
   13024:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   13028:	e0bffa17 	ldw	r2,-24(fp)
   1302c:	1080058b 	ldhu	r2,22(r2)
   13030:	10800044 	addi	r2,r2,1
   13034:	1007883a 	mov	r3,r2
   13038:	e0bffa17 	ldw	r2,-24(fp)
   1303c:	10c0058d 	sth	r3,22(r2)
   13040:	e0bff717 	ldw	r2,-36(fp)
   13044:	e0bffb15 	stw	r2,-20(fp)
   13048:	e0bffb17 	ldw	r2,-20(fp)
   1304c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   13050:	0005883a 	mov	r2,zero
}
   13054:	e037883a 	mov	sp,fp
   13058:	dfc00117 	ldw	ra,4(sp)
   1305c:	df000017 	ldw	fp,0(sp)
   13060:	dec00204 	addi	sp,sp,8
   13064:	f800283a 	ret

00013068 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   13068:	defff604 	addi	sp,sp,-40
   1306c:	df000915 	stw	fp,36(sp)
   13070:	df000904 	addi	fp,sp,36
   13074:	e13ffe15 	stw	r4,-8(fp)
   13078:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1307c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   13080:	e0bffe17 	ldw	r2,-8(fp)
   13084:	1000021e 	bne	r2,zero,13090 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   13088:	00800104 	movi	r2,4
   1308c:	00004906 	br	131b4 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   13090:	e0bfff17 	ldw	r2,-4(fp)
   13094:	1000021e 	bne	r2,zero,130a0 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   13098:	00800244 	movi	r2,9
   1309c:	00004506 	br	131b4 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   130a0:	e0bffe17 	ldw	r2,-8(fp)
   130a4:	10800003 	ldbu	r2,0(r2)
   130a8:	10803fcc 	andi	r2,r2,255
   130ac:	108000a0 	cmpeqi	r2,r2,2
   130b0:	1000021e 	bne	r2,zero,130bc <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   130b4:	00800044 	movi	r2,1
   130b8:	00003e06 	br	131b4 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   130bc:	0005303a 	rdctl	r2,status
   130c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   130c4:	e0fffd17 	ldw	r3,-12(fp)
   130c8:	00bfff84 	movi	r2,-2
   130cc:	1884703a 	and	r2,r3,r2
   130d0:	1001703a 	wrctl	status,r2
  
  return context;
   130d4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   130d8:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   130dc:	e0bffe17 	ldw	r2,-8(fp)
   130e0:	10c00283 	ldbu	r3,10(r2)
   130e4:	e0bfff17 	ldw	r2,-4(fp)
   130e8:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   130ec:	e0bffe17 	ldw	r2,-8(fp)
   130f0:	108002c4 	addi	r2,r2,11
   130f4:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   130f8:	e0bfff17 	ldw	r2,-4(fp)
   130fc:	10800204 	addi	r2,r2,8
   13100:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13104:	e03ff705 	stb	zero,-36(fp)
   13108:	00000b06 	br	13138 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   1310c:	e0bff917 	ldw	r2,-28(fp)
   13110:	10c00044 	addi	r3,r2,1
   13114:	e0fff915 	stw	r3,-28(fp)
   13118:	e0fff817 	ldw	r3,-32(fp)
   1311c:	19000044 	addi	r4,r3,1
   13120:	e13ff815 	stw	r4,-32(fp)
   13124:	18c00003 	ldbu	r3,0(r3)
   13128:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1312c:	e0bff703 	ldbu	r2,-36(fp)
   13130:	10800044 	addi	r2,r2,1
   13134:	e0bff705 	stb	r2,-36(fp)
   13138:	e0bff703 	ldbu	r2,-36(fp)
   1313c:	108000f0 	cmpltui	r2,r2,3
   13140:	103ff21e 	bne	r2,zero,1310c <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   13144:	e0bffe17 	ldw	r2,-8(fp)
   13148:	10800117 	ldw	r2,4(r2)
   1314c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   13150:	e0bffc17 	ldw	r2,-16(fp)
   13154:	1080058b 	ldhu	r2,22(r2)
   13158:	10bfffcc 	andi	r2,r2,65535
   1315c:	10000626 	beq	r2,zero,13178 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   13160:	e0bffc17 	ldw	r2,-16(fp)
   13164:	10800417 	ldw	r2,16(r2)
   13168:	10c00017 	ldw	r3,0(r2)
   1316c:	e0bfff17 	ldw	r2,-4(fp)
   13170:	10c00015 	stw	r3,0(r2)
   13174:	00000206 	br	13180 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   13178:	e0bfff17 	ldw	r2,-4(fp)
   1317c:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   13180:	e0bffc17 	ldw	r2,-16(fp)
   13184:	10c0058b 	ldhu	r3,22(r2)
   13188:	e0bfff17 	ldw	r2,-4(fp)
   1318c:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   13190:	e0bffc17 	ldw	r2,-16(fp)
   13194:	10c0050b 	ldhu	r3,20(r2)
   13198:	e0bfff17 	ldw	r2,-4(fp)
   1319c:	10c0018d 	sth	r3,6(r2)
   131a0:	e0bffa17 	ldw	r2,-24(fp)
   131a4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   131a8:	e0bffb17 	ldw	r2,-20(fp)
   131ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   131b0:	0005883a 	mov	r2,zero
}
   131b4:	e037883a 	mov	sp,fp
   131b8:	df000017 	ldw	fp,0(sp)
   131bc:	dec00104 	addi	sp,sp,4
   131c0:	f800283a 	ret

000131c4 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   131c4:	defffb04 	addi	sp,sp,-20
   131c8:	dfc00415 	stw	ra,16(sp)
   131cc:	df000315 	stw	fp,12(sp)
   131d0:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   131d4:	01407804 	movi	r5,480
   131d8:	010000b4 	movhi	r4,2
   131dc:	210e1304 	addi	r4,r4,14412
   131e0:	000fa700 	call	fa70 <OS_MemClr>
    pq1 = &OSQTbl[0];
   131e4:	008000b4 	movhi	r2,2
   131e8:	108e1304 	addi	r2,r2,14412
   131ec:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   131f0:	008000b4 	movhi	r2,2
   131f4:	108e1904 	addi	r2,r2,14436
   131f8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   131fc:	e03ffd0d 	sth	zero,-12(fp)
   13200:	00000c06 	br	13234 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   13204:	e0bffe17 	ldw	r2,-8(fp)
   13208:	e0ffff17 	ldw	r3,-4(fp)
   1320c:	10c00015 	stw	r3,0(r2)
        pq1++;
   13210:	e0bffe17 	ldw	r2,-8(fp)
   13214:	10800604 	addi	r2,r2,24
   13218:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   1321c:	e0bfff17 	ldw	r2,-4(fp)
   13220:	10800604 	addi	r2,r2,24
   13224:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   13228:	e0bffd0b 	ldhu	r2,-12(fp)
   1322c:	10800044 	addi	r2,r2,1
   13230:	e0bffd0d 	sth	r2,-12(fp)
   13234:	e0bffd0b 	ldhu	r2,-12(fp)
   13238:	108004f0 	cmpltui	r2,r2,19
   1323c:	103ff11e 	bne	r2,zero,13204 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   13240:	e0bffe17 	ldw	r2,-8(fp)
   13244:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   13248:	008000b4 	movhi	r2,2
   1324c:	108e1304 	addi	r2,r2,14412
   13250:	d0a7fc15 	stw	r2,-24592(gp)
#endif
}
   13254:	0001883a 	nop
   13258:	e037883a 	mov	sp,fp
   1325c:	dfc00117 	ldw	ra,4(sp)
   13260:	df000017 	ldw	fp,0(sp)
   13264:	dec00204 	addi	sp,sp,8
   13268:	f800283a 	ret

0001326c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   1326c:	defffa04 	addi	sp,sp,-24
   13270:	df000515 	stw	fp,20(sp)
   13274:	df000504 	addi	fp,sp,20
   13278:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1327c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13280:	e0bfff17 	ldw	r2,-4(fp)
   13284:	1000021e 	bne	r2,zero,13290 <OSSemAccept+0x24>
        return (0);
   13288:	0005883a 	mov	r2,zero
   1328c:	00001f06 	br	1330c <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13290:	e0bfff17 	ldw	r2,-4(fp)
   13294:	10800003 	ldbu	r2,0(r2)
   13298:	10803fcc 	andi	r2,r2,255
   1329c:	108000e0 	cmpeqi	r2,r2,3
   132a0:	1000021e 	bne	r2,zero,132ac <OSSemAccept+0x40>
        return (0);
   132a4:	0005883a 	mov	r2,zero
   132a8:	00001806 	br	1330c <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   132ac:	0005303a 	rdctl	r2,status
   132b0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   132b4:	e0fffe17 	ldw	r3,-8(fp)
   132b8:	00bfff84 	movi	r2,-2
   132bc:	1884703a 	and	r2,r3,r2
   132c0:	1001703a 	wrctl	status,r2
  
  return context;
   132c4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   132c8:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   132cc:	e0bfff17 	ldw	r2,-4(fp)
   132d0:	1080020b 	ldhu	r2,8(r2)
   132d4:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   132d8:	e0bffd0b 	ldhu	r2,-12(fp)
   132dc:	10000626 	beq	r2,zero,132f8 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   132e0:	e0bfff17 	ldw	r2,-4(fp)
   132e4:	1080020b 	ldhu	r2,8(r2)
   132e8:	10bfffc4 	addi	r2,r2,-1
   132ec:	1007883a 	mov	r3,r2
   132f0:	e0bfff17 	ldw	r2,-4(fp)
   132f4:	10c0020d 	sth	r3,8(r2)
   132f8:	e0bffb17 	ldw	r2,-20(fp)
   132fc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13300:	e0bffc17 	ldw	r2,-16(fp)
   13304:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   13308:	e0bffd0b 	ldhu	r2,-12(fp)
}
   1330c:	e037883a 	mov	sp,fp
   13310:	df000017 	ldw	fp,0(sp)
   13314:	dec00104 	addi	sp,sp,4
   13318:	f800283a 	ret

0001331c <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   1331c:	defff904 	addi	sp,sp,-28
   13320:	dfc00615 	stw	ra,24(sp)
   13324:	df000515 	stw	fp,20(sp)
   13328:	df000504 	addi	fp,sp,20
   1332c:	2005883a 	mov	r2,r4
   13330:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13334:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   13338:	d0a7ff03 	ldbu	r2,-24580(gp)
   1333c:	10803fcc 	andi	r2,r2,255
   13340:	10000226 	beq	r2,zero,1334c <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   13344:	0005883a 	mov	r2,zero
   13348:	00002506 	br	133e0 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1334c:	0005303a 	rdctl	r2,status
   13350:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13354:	e0fffe17 	ldw	r3,-8(fp)
   13358:	00bfff84 	movi	r2,-2
   1335c:	1884703a 	and	r2,r3,r2
   13360:	1001703a 	wrctl	status,r2
  
  return context;
   13364:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   13368:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   1336c:	d0a7fe17 	ldw	r2,-24584(gp)
   13370:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   13374:	d0a7fe17 	ldw	r2,-24584(gp)
   13378:	10000326 	beq	r2,zero,13388 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   1337c:	d0a7fe17 	ldw	r2,-24584(gp)
   13380:	10800117 	ldw	r2,4(r2)
   13384:	d0a7fe15 	stw	r2,-24584(gp)
   13388:	e0bffb17 	ldw	r2,-20(fp)
   1338c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13390:	e0bffc17 	ldw	r2,-16(fp)
   13394:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   13398:	e0bffd17 	ldw	r2,-12(fp)
   1339c:	10000f26 	beq	r2,zero,133dc <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   133a0:	e0bffd17 	ldw	r2,-12(fp)
   133a4:	00c000c4 	movi	r3,3
   133a8:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   133ac:	e0bffd17 	ldw	r2,-12(fp)
   133b0:	e0ffff0b 	ldhu	r3,-4(fp)
   133b4:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   133b8:	e0bffd17 	ldw	r2,-12(fp)
   133bc:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   133c0:	e0bffd17 	ldw	r2,-12(fp)
   133c4:	00c00fc4 	movi	r3,63
   133c8:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   133cc:	e0bffd17 	ldw	r2,-12(fp)
   133d0:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   133d4:	e13ffd17 	ldw	r4,-12(fp)
   133d8:	000f6900 	call	f690 <OS_EventWaitListInit>
    }
    return (pevent);
   133dc:	e0bffd17 	ldw	r2,-12(fp)
}
   133e0:	e037883a 	mov	sp,fp
   133e4:	dfc00117 	ldw	ra,4(sp)
   133e8:	df000017 	ldw	fp,0(sp)
   133ec:	dec00204 	addi	sp,sp,8
   133f0:	f800283a 	ret

000133f4 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   133f4:	defff304 	addi	sp,sp,-52
   133f8:	dfc00c15 	stw	ra,48(sp)
   133fc:	df000b15 	stw	fp,44(sp)
   13400:	df000b04 	addi	fp,sp,44
   13404:	e13ffd15 	stw	r4,-12(fp)
   13408:	2805883a 	mov	r2,r5
   1340c:	e1bfff15 	stw	r6,-4(fp)
   13410:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13414:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   13418:	e0bfff17 	ldw	r2,-4(fp)
   1341c:	1000021e 	bne	r2,zero,13428 <OSSemDel+0x34>
        return (pevent);
   13420:	e0bffd17 	ldw	r2,-12(fp)
   13424:	00007e06 	br	13620 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   13428:	e0bffd17 	ldw	r2,-12(fp)
   1342c:	1000051e 	bne	r2,zero,13444 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   13430:	e0bfff17 	ldw	r2,-4(fp)
   13434:	00c00104 	movi	r3,4
   13438:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1343c:	e0bffd17 	ldw	r2,-12(fp)
   13440:	00007706 	br	13620 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   13444:	e0bffd17 	ldw	r2,-12(fp)
   13448:	10800003 	ldbu	r2,0(r2)
   1344c:	10803fcc 	andi	r2,r2,255
   13450:	108000e0 	cmpeqi	r2,r2,3
   13454:	1000051e 	bne	r2,zero,1346c <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   13458:	e0bfff17 	ldw	r2,-4(fp)
   1345c:	00c00044 	movi	r3,1
   13460:	10c00005 	stb	r3,0(r2)
        return (pevent);
   13464:	e0bffd17 	ldw	r2,-12(fp)
   13468:	00006d06 	br	13620 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1346c:	d0a7ff03 	ldbu	r2,-24580(gp)
   13470:	10803fcc 	andi	r2,r2,255
   13474:	10000526 	beq	r2,zero,1348c <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   13478:	e0bfff17 	ldw	r2,-4(fp)
   1347c:	00c003c4 	movi	r3,15
   13480:	10c00005 	stb	r3,0(r2)
        return (pevent);
   13484:	e0bffd17 	ldw	r2,-12(fp)
   13488:	00006506 	br	13620 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1348c:	0005303a 	rdctl	r2,status
   13490:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13494:	e0fffc17 	ldw	r3,-16(fp)
   13498:	00bfff84 	movi	r2,-2
   1349c:	1884703a 	and	r2,r3,r2
   134a0:	1001703a 	wrctl	status,r2
  
  return context;
   134a4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   134a8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   134ac:	e0bffd17 	ldw	r2,-12(fp)
   134b0:	10800283 	ldbu	r2,10(r2)
   134b4:	10803fcc 	andi	r2,r2,255
   134b8:	10000326 	beq	r2,zero,134c8 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   134bc:	00800044 	movi	r2,1
   134c0:	e0bff505 	stb	r2,-44(fp)
   134c4:	00000106 	br	134cc <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   134c8:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   134cc:	e0bffe03 	ldbu	r2,-8(fp)
   134d0:	10000326 	beq	r2,zero,134e0 <OSSemDel+0xec>
   134d4:	10800060 	cmpeqi	r2,r2,1
   134d8:	1000281e 	bne	r2,zero,1357c <OSSemDel+0x188>
   134dc:	00004506 	br	135f4 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   134e0:	e0bff503 	ldbu	r2,-44(fp)
   134e4:	1000161e 	bne	r2,zero,13540 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   134e8:	e0bffd17 	ldw	r2,-12(fp)
   134ec:	00c00fc4 	movi	r3,63
   134f0:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   134f4:	e0bffd17 	ldw	r2,-12(fp)
   134f8:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   134fc:	e0bffd17 	ldw	r2,-12(fp)
   13500:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   13504:	d0e7fe17 	ldw	r3,-24584(gp)
   13508:	e0bffd17 	ldw	r2,-12(fp)
   1350c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   13510:	e0bffd17 	ldw	r2,-12(fp)
   13514:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   13518:	e0bffd17 	ldw	r2,-12(fp)
   1351c:	d0a7fe15 	stw	r2,-24584(gp)
   13520:	e0bff717 	ldw	r2,-36(fp)
   13524:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13528:	e0bff817 	ldw	r2,-32(fp)
   1352c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   13530:	e0bfff17 	ldw	r2,-4(fp)
   13534:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   13538:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   1353c:	00003706 	br	1361c <OSSemDel+0x228>
   13540:	e0bff717 	ldw	r2,-36(fp)
   13544:	e0bff915 	stw	r2,-28(fp)
   13548:	e0bff917 	ldw	r2,-28(fp)
   1354c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   13550:	e0bfff17 	ldw	r2,-4(fp)
   13554:	00c01244 	movi	r3,73
   13558:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   1355c:	e0bffd17 	ldw	r2,-12(fp)
   13560:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   13564:	00002d06 	br	1361c <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   13568:	000f883a 	mov	r7,zero
   1356c:	01800044 	movi	r6,1
   13570:	000b883a 	mov	r5,zero
   13574:	e13ffd17 	ldw	r4,-12(fp)
   13578:	000f0e00 	call	f0e0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   1357c:	e0bffd17 	ldw	r2,-12(fp)
   13580:	10800283 	ldbu	r2,10(r2)
   13584:	10803fcc 	andi	r2,r2,255
   13588:	103ff71e 	bne	r2,zero,13568 <OSSemDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   1358c:	e0bffd17 	ldw	r2,-12(fp)
   13590:	00c00fc4 	movi	r3,63
   13594:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   13598:	e0bffd17 	ldw	r2,-12(fp)
   1359c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   135a0:	e0bffd17 	ldw	r2,-12(fp)
   135a4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   135a8:	d0e7fe17 	ldw	r3,-24584(gp)
   135ac:	e0bffd17 	ldw	r2,-12(fp)
   135b0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   135b4:	e0bffd17 	ldw	r2,-12(fp)
   135b8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   135bc:	e0bffd17 	ldw	r2,-12(fp)
   135c0:	d0a7fe15 	stw	r2,-24584(gp)
   135c4:	e0bff717 	ldw	r2,-36(fp)
   135c8:	e0bffa15 	stw	r2,-24(fp)
   135cc:	e0bffa17 	ldw	r2,-24(fp)
   135d0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   135d4:	e0bff503 	ldbu	r2,-44(fp)
   135d8:	10800058 	cmpnei	r2,r2,1
   135dc:	1000011e 	bne	r2,zero,135e4 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   135e0:	000fb2c0 	call	fb2c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   135e4:	e0bfff17 	ldw	r2,-4(fp)
   135e8:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   135ec:	e03ff615 	stw	zero,-40(fp)
             break;
   135f0:	00000a06 	br	1361c <OSSemDel+0x228>
   135f4:	e0bff717 	ldw	r2,-36(fp)
   135f8:	e0bffb15 	stw	r2,-20(fp)
   135fc:	e0bffb17 	ldw	r2,-20(fp)
   13600:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   13604:	e0bfff17 	ldw	r2,-4(fp)
   13608:	00c001c4 	movi	r3,7
   1360c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   13610:	e0bffd17 	ldw	r2,-12(fp)
   13614:	e0bff615 	stw	r2,-40(fp)
             break;
   13618:	0001883a 	nop
    }
    return (pevent_return);
   1361c:	e0bff617 	ldw	r2,-40(fp)
}
   13620:	e037883a 	mov	sp,fp
   13624:	dfc00117 	ldw	ra,4(sp)
   13628:	df000017 	ldw	fp,0(sp)
   1362c:	dec00204 	addi	sp,sp,8
   13630:	f800283a 	ret

00013634 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   13634:	defff504 	addi	sp,sp,-44
   13638:	dfc00a15 	stw	ra,40(sp)
   1363c:	df000915 	stw	fp,36(sp)
   13640:	df000904 	addi	fp,sp,36
   13644:	e13ffd15 	stw	r4,-12(fp)
   13648:	2805883a 	mov	r2,r5
   1364c:	e1bfff15 	stw	r6,-4(fp)
   13650:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13654:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13658:	e0bfff17 	ldw	r2,-4(fp)
   1365c:	10007226 	beq	r2,zero,13828 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13660:	e0bffd17 	ldw	r2,-12(fp)
   13664:	1000041e 	bne	r2,zero,13678 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   13668:	e0bfff17 	ldw	r2,-4(fp)
   1366c:	00c00104 	movi	r3,4
   13670:	10c00005 	stb	r3,0(r2)
        return;
   13674:	00006d06 	br	1382c <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13678:	e0bffd17 	ldw	r2,-12(fp)
   1367c:	10800003 	ldbu	r2,0(r2)
   13680:	10803fcc 	andi	r2,r2,255
   13684:	108000e0 	cmpeqi	r2,r2,3
   13688:	1000041e 	bne	r2,zero,1369c <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   1368c:	e0bfff17 	ldw	r2,-4(fp)
   13690:	00c00044 	movi	r3,1
   13694:	10c00005 	stb	r3,0(r2)
        return;
   13698:	00006406 	br	1382c <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   1369c:	d0a7ff03 	ldbu	r2,-24580(gp)
   136a0:	10803fcc 	andi	r2,r2,255
   136a4:	10000426 	beq	r2,zero,136b8 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   136a8:	e0bfff17 	ldw	r2,-4(fp)
   136ac:	00c00084 	movi	r3,2
   136b0:	10c00005 	stb	r3,0(r2)
        return;
   136b4:	00005d06 	br	1382c <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   136b8:	d0a7f103 	ldbu	r2,-24636(gp)
   136bc:	10803fcc 	andi	r2,r2,255
   136c0:	10000426 	beq	r2,zero,136d4 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   136c4:	e0bfff17 	ldw	r2,-4(fp)
   136c8:	00c00344 	movi	r3,13
   136cc:	10c00005 	stb	r3,0(r2)
        return;
   136d0:	00005606 	br	1382c <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   136d4:	0005303a 	rdctl	r2,status
   136d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   136dc:	e0fffc17 	ldw	r3,-16(fp)
   136e0:	00bfff84 	movi	r2,-2
   136e4:	1884703a 	and	r2,r3,r2
   136e8:	1001703a 	wrctl	status,r2
  
  return context;
   136ec:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   136f0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   136f4:	e0bffd17 	ldw	r2,-12(fp)
   136f8:	1080020b 	ldhu	r2,8(r2)
   136fc:	10bfffcc 	andi	r2,r2,65535
   13700:	10000d26 	beq	r2,zero,13738 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   13704:	e0bffd17 	ldw	r2,-12(fp)
   13708:	1080020b 	ldhu	r2,8(r2)
   1370c:	10bfffc4 	addi	r2,r2,-1
   13710:	1007883a 	mov	r3,r2
   13714:	e0bffd17 	ldw	r2,-12(fp)
   13718:	10c0020d 	sth	r3,8(r2)
   1371c:	e0bff717 	ldw	r2,-36(fp)
   13720:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13724:	e0bff817 	ldw	r2,-32(fp)
   13728:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   1372c:	e0bfff17 	ldw	r2,-4(fp)
   13730:	10000005 	stb	zero,0(r2)
        return;
   13734:	00003d06 	br	1382c <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   13738:	d0a80017 	ldw	r2,-24576(gp)
   1373c:	d0e80017 	ldw	r3,-24576(gp)
   13740:	18c00c83 	ldbu	r3,50(r3)
   13744:	18c00054 	ori	r3,r3,1
   13748:	10c00c85 	stb	r3,50(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1374c:	d0a80017 	ldw	r2,-24576(gp)
   13750:	10000cc5 	stb	zero,51(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   13754:	d0a80017 	ldw	r2,-24576(gp)
   13758:	e0fffe0b 	ldhu	r3,-8(fp)
   1375c:	10c00c0d 	sth	r3,48(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   13760:	e13ffd17 	ldw	r4,-12(fp)
   13764:	000f2780 	call	f278 <OS_EventTaskWait>
   13768:	e0bff717 	ldw	r2,-36(fp)
   1376c:	e0bffb15 	stw	r2,-20(fp)
   13770:	e0bffb17 	ldw	r2,-20(fp)
   13774:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   13778:	000fb2c0 	call	fb2c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1377c:	0005303a 	rdctl	r2,status
   13780:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13784:	e0fff917 	ldw	r3,-28(fp)
   13788:	00bfff84 	movi	r2,-2
   1378c:	1884703a 	and	r2,r3,r2
   13790:	1001703a 	wrctl	status,r2
  
  return context;
   13794:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   13798:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   1379c:	d0a80017 	ldw	r2,-24576(gp)
   137a0:	10800cc3 	ldbu	r2,51(r2)
   137a4:	10803fcc 	andi	r2,r2,255
   137a8:	10000326 	beq	r2,zero,137b8 <OSSemPend+0x184>
   137ac:	108000a0 	cmpeqi	r2,r2,2
   137b0:	1000041e 	bne	r2,zero,137c4 <OSSemPend+0x190>
   137b4:	00000706 	br	137d4 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   137b8:	e0bfff17 	ldw	r2,-4(fp)
   137bc:	10000005 	stb	zero,0(r2)
             break;
   137c0:	00000c06 	br	137f4 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   137c4:	e0bfff17 	ldw	r2,-4(fp)
   137c8:	00c00384 	movi	r3,14
   137cc:	10c00005 	stb	r3,0(r2)
             break;
   137d0:	00000806 	br	137f4 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   137d4:	d0a80017 	ldw	r2,-24576(gp)
   137d8:	e17ffd17 	ldw	r5,-12(fp)
   137dc:	1009883a 	mov	r4,r2
   137e0:	000f4d80 	call	f4d8 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   137e4:	e0bfff17 	ldw	r2,-4(fp)
   137e8:	00c00284 	movi	r3,10
   137ec:	10c00005 	stb	r3,0(r2)
             break;
   137f0:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   137f4:	d0a80017 	ldw	r2,-24576(gp)
   137f8:	10000c85 	stb	zero,50(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   137fc:	d0a80017 	ldw	r2,-24576(gp)
   13800:	10000cc5 	stb	zero,51(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   13804:	d0a80017 	ldw	r2,-24576(gp)
   13808:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   1380c:	d0a80017 	ldw	r2,-24576(gp)
   13810:	10000815 	stw	zero,32(r2)
   13814:	e0bff717 	ldw	r2,-36(fp)
   13818:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1381c:	e0bffa17 	ldw	r2,-24(fp)
   13820:	1001703a 	wrctl	status,r2
   13824:	00000106 	br	1382c <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   13828:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
   1382c:	e037883a 	mov	sp,fp
   13830:	dfc00117 	ldw	ra,4(sp)
   13834:	df000017 	ldw	fp,0(sp)
   13838:	dec00204 	addi	sp,sp,8
   1383c:	f800283a 	ret

00013840 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   13840:	defff604 	addi	sp,sp,-40
   13844:	dfc00915 	stw	ra,36(sp)
   13848:	df000815 	stw	fp,32(sp)
   1384c:	df000804 	addi	fp,sp,32
   13850:	e13ffd15 	stw	r4,-12(fp)
   13854:	2805883a 	mov	r2,r5
   13858:	e1bfff15 	stw	r6,-4(fp)
   1385c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13860:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13864:	e0bfff17 	ldw	r2,-4(fp)
   13868:	1000021e 	bne	r2,zero,13874 <OSSemPendAbort+0x34>
        return (0);
   1386c:	0005883a 	mov	r2,zero
   13870:	00004906 	br	13998 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13874:	e0bffd17 	ldw	r2,-12(fp)
   13878:	1000051e 	bne	r2,zero,13890 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1387c:	e0bfff17 	ldw	r2,-4(fp)
   13880:	00c00104 	movi	r3,4
   13884:	10c00005 	stb	r3,0(r2)
        return (0);
   13888:	0005883a 	mov	r2,zero
   1388c:	00004206 	br	13998 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13890:	e0bffd17 	ldw	r2,-12(fp)
   13894:	10800003 	ldbu	r2,0(r2)
   13898:	10803fcc 	andi	r2,r2,255
   1389c:	108000e0 	cmpeqi	r2,r2,3
   138a0:	1000051e 	bne	r2,zero,138b8 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   138a4:	e0bfff17 	ldw	r2,-4(fp)
   138a8:	00c00044 	movi	r3,1
   138ac:	10c00005 	stb	r3,0(r2)
        return (0);
   138b0:	0005883a 	mov	r2,zero
   138b4:	00003806 	br	13998 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   138b8:	0005303a 	rdctl	r2,status
   138bc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   138c0:	e0fffc17 	ldw	r3,-16(fp)
   138c4:	00bfff84 	movi	r2,-2
   138c8:	1884703a 	and	r2,r3,r2
   138cc:	1001703a 	wrctl	status,r2
  
  return context;
   138d0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   138d4:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   138d8:	e0bffd17 	ldw	r2,-12(fp)
   138dc:	10800283 	ldbu	r2,10(r2)
   138e0:	10803fcc 	andi	r2,r2,255
   138e4:	10002526 	beq	r2,zero,1397c <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   138e8:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   138ec:	e0bffe03 	ldbu	r2,-8(fp)
   138f0:	10800060 	cmpeqi	r2,r2,1
   138f4:	10000e26 	beq	r2,zero,13930 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   138f8:	00000806 	br	1391c <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   138fc:	01c00084 	movi	r7,2
   13900:	01800044 	movi	r6,1
   13904:	000b883a 	mov	r5,zero
   13908:	e13ffd17 	ldw	r4,-12(fp)
   1390c:	000f0e00 	call	f0e0 <OS_EventTaskRdy>
                     nbr_tasks++;
   13910:	e0bff803 	ldbu	r2,-32(fp)
   13914:	10800044 	addi	r2,r2,1
   13918:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   1391c:	e0bffd17 	ldw	r2,-12(fp)
   13920:	10800283 	ldbu	r2,10(r2)
   13924:	10803fcc 	andi	r2,r2,255
   13928:	103ff41e 	bne	r2,zero,138fc <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   1392c:	00000906 	br	13954 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   13930:	01c00084 	movi	r7,2
   13934:	01800044 	movi	r6,1
   13938:	000b883a 	mov	r5,zero
   1393c:	e13ffd17 	ldw	r4,-12(fp)
   13940:	000f0e00 	call	f0e0 <OS_EventTaskRdy>
                 nbr_tasks++;
   13944:	e0bff803 	ldbu	r2,-32(fp)
   13948:	10800044 	addi	r2,r2,1
   1394c:	e0bff805 	stb	r2,-32(fp)
                 break;
   13950:	0001883a 	nop
   13954:	e0bff917 	ldw	r2,-28(fp)
   13958:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1395c:	e0bffa17 	ldw	r2,-24(fp)
   13960:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   13964:	000fb2c0 	call	fb2c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   13968:	e0bfff17 	ldw	r2,-4(fp)
   1396c:	00c00384 	movi	r3,14
   13970:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   13974:	e0bff803 	ldbu	r2,-32(fp)
   13978:	00000706 	br	13998 <OSSemPendAbort+0x158>
   1397c:	e0bff917 	ldw	r2,-28(fp)
   13980:	e0bffb15 	stw	r2,-20(fp)
   13984:	e0bffb17 	ldw	r2,-20(fp)
   13988:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1398c:	e0bfff17 	ldw	r2,-4(fp)
   13990:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   13994:	0005883a 	mov	r2,zero
}
   13998:	e037883a 	mov	sp,fp
   1399c:	dfc00117 	ldw	ra,4(sp)
   139a0:	df000017 	ldw	fp,0(sp)
   139a4:	dec00204 	addi	sp,sp,8
   139a8:	f800283a 	ret

000139ac <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   139ac:	defff804 	addi	sp,sp,-32
   139b0:	dfc00715 	stw	ra,28(sp)
   139b4:	df000615 	stw	fp,24(sp)
   139b8:	df000604 	addi	fp,sp,24
   139bc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   139c0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   139c4:	e0bfff17 	ldw	r2,-4(fp)
   139c8:	1000021e 	bne	r2,zero,139d4 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   139cc:	00800104 	movi	r2,4
   139d0:	00003506 	br	13aa8 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   139d4:	e0bfff17 	ldw	r2,-4(fp)
   139d8:	10800003 	ldbu	r2,0(r2)
   139dc:	10803fcc 	andi	r2,r2,255
   139e0:	108000e0 	cmpeqi	r2,r2,3
   139e4:	1000021e 	bne	r2,zero,139f0 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   139e8:	00800044 	movi	r2,1
   139ec:	00002e06 	br	13aa8 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   139f0:	0005303a 	rdctl	r2,status
   139f4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   139f8:	e0fffe17 	ldw	r3,-8(fp)
   139fc:	00bfff84 	movi	r2,-2
   13a00:	1884703a 	and	r2,r3,r2
   13a04:	1001703a 	wrctl	status,r2
  
  return context;
   13a08:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   13a0c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   13a10:	e0bfff17 	ldw	r2,-4(fp)
   13a14:	10800283 	ldbu	r2,10(r2)
   13a18:	10803fcc 	andi	r2,r2,255
   13a1c:	10000c26 	beq	r2,zero,13a50 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   13a20:	000f883a 	mov	r7,zero
   13a24:	01800044 	movi	r6,1
   13a28:	000b883a 	mov	r5,zero
   13a2c:	e13fff17 	ldw	r4,-4(fp)
   13a30:	000f0e00 	call	f0e0 <OS_EventTaskRdy>
   13a34:	e0bffa17 	ldw	r2,-24(fp)
   13a38:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13a3c:	e0bffb17 	ldw	r2,-20(fp)
   13a40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   13a44:	000fb2c0 	call	fb2c <OS_Sched>
        return (OS_ERR_NONE);
   13a48:	0005883a 	mov	r2,zero
   13a4c:	00001606 	br	13aa8 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   13a50:	e0bfff17 	ldw	r2,-4(fp)
   13a54:	1080020b 	ldhu	r2,8(r2)
   13a58:	10ffffcc 	andi	r3,r2,65535
   13a5c:	00bfffd4 	movui	r2,65535
   13a60:	18800c26 	beq	r3,r2,13a94 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   13a64:	e0bfff17 	ldw	r2,-4(fp)
   13a68:	1080020b 	ldhu	r2,8(r2)
   13a6c:	10800044 	addi	r2,r2,1
   13a70:	1007883a 	mov	r3,r2
   13a74:	e0bfff17 	ldw	r2,-4(fp)
   13a78:	10c0020d 	sth	r3,8(r2)
   13a7c:	e0bffa17 	ldw	r2,-24(fp)
   13a80:	e0bffc15 	stw	r2,-16(fp)
   13a84:	e0bffc17 	ldw	r2,-16(fp)
   13a88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   13a8c:	0005883a 	mov	r2,zero
   13a90:	00000506 	br	13aa8 <OSSemPost+0xfc>
   13a94:	e0bffa17 	ldw	r2,-24(fp)
   13a98:	e0bffd15 	stw	r2,-12(fp)
   13a9c:	e0bffd17 	ldw	r2,-12(fp)
   13aa0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   13aa4:	00800c84 	movi	r2,50
}
   13aa8:	e037883a 	mov	sp,fp
   13aac:	dfc00117 	ldw	ra,4(sp)
   13ab0:	df000017 	ldw	fp,0(sp)
   13ab4:	dec00204 	addi	sp,sp,8
   13ab8:	f800283a 	ret

00013abc <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   13abc:	defff704 	addi	sp,sp,-36
   13ac0:	df000815 	stw	fp,32(sp)
   13ac4:	df000804 	addi	fp,sp,32
   13ac8:	e13ffe15 	stw	r4,-8(fp)
   13acc:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13ad0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   13ad4:	e0bffe17 	ldw	r2,-8(fp)
   13ad8:	1000021e 	bne	r2,zero,13ae4 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   13adc:	00800104 	movi	r2,4
   13ae0:	00003606 	br	13bbc <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   13ae4:	e0bfff17 	ldw	r2,-4(fp)
   13ae8:	1000021e 	bne	r2,zero,13af4 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   13aec:	00800244 	movi	r2,9
   13af0:	00003206 	br	13bbc <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   13af4:	e0bffe17 	ldw	r2,-8(fp)
   13af8:	10800003 	ldbu	r2,0(r2)
   13afc:	10803fcc 	andi	r2,r2,255
   13b00:	108000e0 	cmpeqi	r2,r2,3
   13b04:	1000021e 	bne	r2,zero,13b10 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   13b08:	00800044 	movi	r2,1
   13b0c:	00002b06 	br	13bbc <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13b10:	0005303a 	rdctl	r2,status
   13b14:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13b18:	e0fffd17 	ldw	r3,-12(fp)
   13b1c:	00bfff84 	movi	r2,-2
   13b20:	1884703a 	and	r2,r3,r2
   13b24:	1001703a 	wrctl	status,r2
  
  return context;
   13b28:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   13b2c:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   13b30:	e0bffe17 	ldw	r2,-8(fp)
   13b34:	10c00283 	ldbu	r3,10(r2)
   13b38:	e0bfff17 	ldw	r2,-4(fp)
   13b3c:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   13b40:	e0bffe17 	ldw	r2,-8(fp)
   13b44:	108002c4 	addi	r2,r2,11
   13b48:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   13b4c:	e0bfff17 	ldw	r2,-4(fp)
   13b50:	10800084 	addi	r2,r2,2
   13b54:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13b58:	e03ffa05 	stb	zero,-24(fp)
   13b5c:	00000b06 	br	13b8c <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   13b60:	e0bff917 	ldw	r2,-28(fp)
   13b64:	10c00044 	addi	r3,r2,1
   13b68:	e0fff915 	stw	r3,-28(fp)
   13b6c:	e0fff817 	ldw	r3,-32(fp)
   13b70:	19000044 	addi	r4,r3,1
   13b74:	e13ff815 	stw	r4,-32(fp)
   13b78:	18c00003 	ldbu	r3,0(r3)
   13b7c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13b80:	e0bffa03 	ldbu	r2,-24(fp)
   13b84:	10800044 	addi	r2,r2,1
   13b88:	e0bffa05 	stb	r2,-24(fp)
   13b8c:	e0bffa03 	ldbu	r2,-24(fp)
   13b90:	108000f0 	cmpltui	r2,r2,3
   13b94:	103ff21e 	bne	r2,zero,13b60 <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   13b98:	e0bffe17 	ldw	r2,-8(fp)
   13b9c:	10c0020b 	ldhu	r3,8(r2)
   13ba0:	e0bfff17 	ldw	r2,-4(fp)
   13ba4:	10c0000d 	sth	r3,0(r2)
   13ba8:	e0bffb17 	ldw	r2,-20(fp)
   13bac:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13bb0:	e0bffc17 	ldw	r2,-16(fp)
   13bb4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   13bb8:	0005883a 	mov	r2,zero
}
   13bbc:	e037883a 	mov	sp,fp
   13bc0:	df000017 	ldw	fp,0(sp)
   13bc4:	dec00104 	addi	sp,sp,4
   13bc8:	f800283a 	ret

00013bcc <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   13bcc:	defff904 	addi	sp,sp,-28
   13bd0:	df000615 	stw	fp,24(sp)
   13bd4:	df000604 	addi	fp,sp,24
   13bd8:	e13ffd15 	stw	r4,-12(fp)
   13bdc:	2805883a 	mov	r2,r5
   13be0:	e1bfff15 	stw	r6,-4(fp)
   13be4:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13be8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13bec:	e0bfff17 	ldw	r2,-4(fp)
   13bf0:	10003126 	beq	r2,zero,13cb8 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13bf4:	e0bffd17 	ldw	r2,-12(fp)
   13bf8:	1000041e 	bne	r2,zero,13c0c <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   13bfc:	e0bfff17 	ldw	r2,-4(fp)
   13c00:	00c00104 	movi	r3,4
   13c04:	10c00005 	stb	r3,0(r2)
        return;
   13c08:	00002c06 	br	13cbc <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13c0c:	e0bffd17 	ldw	r2,-12(fp)
   13c10:	10800003 	ldbu	r2,0(r2)
   13c14:	10803fcc 	andi	r2,r2,255
   13c18:	108000e0 	cmpeqi	r2,r2,3
   13c1c:	1000041e 	bne	r2,zero,13c30 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
   13c20:	e0bfff17 	ldw	r2,-4(fp)
   13c24:	00c00044 	movi	r3,1
   13c28:	10c00005 	stb	r3,0(r2)
        return;
   13c2c:	00002306 	br	13cbc <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13c30:	0005303a 	rdctl	r2,status
   13c34:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13c38:	e0fffc17 	ldw	r3,-16(fp)
   13c3c:	00bfff84 	movi	r2,-2
   13c40:	1884703a 	and	r2,r3,r2
   13c44:	1001703a 	wrctl	status,r2
  
  return context;
   13c48:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13c4c:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   13c50:	e0bfff17 	ldw	r2,-4(fp)
   13c54:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   13c58:	e0bffd17 	ldw	r2,-12(fp)
   13c5c:	1080020b 	ldhu	r2,8(r2)
   13c60:	10bfffcc 	andi	r2,r2,65535
   13c64:	10000426 	beq	r2,zero,13c78 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   13c68:	e0bffd17 	ldw	r2,-12(fp)
   13c6c:	e0fffe0b 	ldhu	r3,-8(fp)
   13c70:	10c0020d 	sth	r3,8(r2)
   13c74:	00000b06 	br	13ca4 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   13c78:	e0bffd17 	ldw	r2,-12(fp)
   13c7c:	10800283 	ldbu	r2,10(r2)
   13c80:	10803fcc 	andi	r2,r2,255
   13c84:	1000041e 	bne	r2,zero,13c98 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   13c88:	e0bffd17 	ldw	r2,-12(fp)
   13c8c:	e0fffe0b 	ldhu	r3,-8(fp)
   13c90:	10c0020d 	sth	r3,8(r2)
   13c94:	00000306 	br	13ca4 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   13c98:	e0bfff17 	ldw	r2,-4(fp)
   13c9c:	00c01244 	movi	r3,73
   13ca0:	10c00005 	stb	r3,0(r2)
   13ca4:	e0bffa17 	ldw	r2,-24(fp)
   13ca8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13cac:	e0bffb17 	ldw	r2,-20(fp)
   13cb0:	1001703a 	wrctl	status,r2
   13cb4:	00000106 	br	13cbc <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   13cb8:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
   13cbc:	e037883a 	mov	sp,fp
   13cc0:	df000017 	ldw	fp,0(sp)
   13cc4:	dec00104 	addi	sp,sp,4
   13cc8:	f800283a 	ret

00013ccc <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   13ccc:	defff104 	addi	sp,sp,-60
   13cd0:	dfc00e15 	stw	ra,56(sp)
   13cd4:	df000d15 	stw	fp,52(sp)
   13cd8:	df000d04 	addi	fp,sp,52
   13cdc:	2007883a 	mov	r3,r4
   13ce0:	2805883a 	mov	r2,r5
   13ce4:	e0fffe05 	stb	r3,-8(fp)
   13ce8:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   13cec:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   13cf0:	e0bffe03 	ldbu	r2,-8(fp)
   13cf4:	10800530 	cmpltui	r2,r2,20
   13cf8:	1000051e 	bne	r2,zero,13d10 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   13cfc:	e0bffe03 	ldbu	r2,-8(fp)
   13d00:	10803fe0 	cmpeqi	r2,r2,255
   13d04:	1000021e 	bne	r2,zero,13d10 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   13d08:	00800a84 	movi	r2,42
   13d0c:	00012606 	br	141a8 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   13d10:	e0bfff03 	ldbu	r2,-4(fp)
   13d14:	10800530 	cmpltui	r2,r2,20
   13d18:	1000021e 	bne	r2,zero,13d24 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   13d1c:	00800a84 	movi	r2,42
   13d20:	00012106 	br	141a8 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13d24:	0005303a 	rdctl	r2,status
   13d28:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13d2c:	e0fffd17 	ldw	r3,-12(fp)
   13d30:	00bfff84 	movi	r2,-2
   13d34:	1884703a 	and	r2,r3,r2
   13d38:	1001703a 	wrctl	status,r2
  
  return context;
   13d3c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13d40:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   13d44:	e0ffff03 	ldbu	r3,-4(fp)
   13d48:	008000b4 	movhi	r2,2
   13d4c:	1094ab04 	addi	r2,r2,21164
   13d50:	18c7883a 	add	r3,r3,r3
   13d54:	18c7883a 	add	r3,r3,r3
   13d58:	10c5883a 	add	r2,r2,r3
   13d5c:	10800017 	ldw	r2,0(r2)
   13d60:	10000626 	beq	r2,zero,13d7c <OSTaskChangePrio+0xb0>
   13d64:	e0bff517 	ldw	r2,-44(fp)
   13d68:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13d6c:	e0bff617 	ldw	r2,-40(fp)
   13d70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   13d74:	00800a04 	movi	r2,40
   13d78:	00010b06 	br	141a8 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   13d7c:	e0bffe03 	ldbu	r2,-8(fp)
   13d80:	10803fd8 	cmpnei	r2,r2,255
   13d84:	1000031e 	bne	r2,zero,13d94 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   13d88:	d0a80017 	ldw	r2,-24576(gp)
   13d8c:	10800d03 	ldbu	r2,52(r2)
   13d90:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   13d94:	e0fffe03 	ldbu	r3,-8(fp)
   13d98:	008000b4 	movhi	r2,2
   13d9c:	1094ab04 	addi	r2,r2,21164
   13da0:	18c7883a 	add	r3,r3,r3
   13da4:	18c7883a 	add	r3,r3,r3
   13da8:	10c5883a 	add	r2,r2,r3
   13dac:	10800017 	ldw	r2,0(r2)
   13db0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   13db4:	e0bff817 	ldw	r2,-32(fp)
   13db8:	1000061e 	bne	r2,zero,13dd4 <OSTaskChangePrio+0x108>
   13dbc:	e0bff517 	ldw	r2,-44(fp)
   13dc0:	e0bff715 	stw	r2,-36(fp)
   13dc4:	e0bff717 	ldw	r2,-36(fp)
   13dc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   13dcc:	00800a44 	movi	r2,41
   13dd0:	0000f506 	br	141a8 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   13dd4:	e0bff817 	ldw	r2,-32(fp)
   13dd8:	10800058 	cmpnei	r2,r2,1
   13ddc:	1000061e 	bne	r2,zero,13df8 <OSTaskChangePrio+0x12c>
   13de0:	e0bff517 	ldw	r2,-44(fp)
   13de4:	e0bff915 	stw	r2,-28(fp)
   13de8:	e0bff917 	ldw	r2,-28(fp)
   13dec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   13df0:	008010c4 	movi	r2,67
   13df4:	0000ec06 	br	141a8 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   13df8:	e0bfff03 	ldbu	r2,-4(fp)
   13dfc:	1004d0fa 	srli	r2,r2,3
   13e00:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   13e04:	e0bfff03 	ldbu	r2,-4(fp)
   13e08:	108001cc 	andi	r2,r2,7
   13e0c:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
   13e10:	e0bffb03 	ldbu	r2,-20(fp)
   13e14:	00c00044 	movi	r3,1
   13e18:	1884983a 	sll	r2,r3,r2
   13e1c:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
   13e20:	e0bffb43 	ldbu	r2,-19(fp)
   13e24:	00c00044 	movi	r3,1
   13e28:	1884983a 	sll	r2,r3,r2
   13e2c:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   13e30:	e0fffe03 	ldbu	r3,-8(fp)
   13e34:	008000b4 	movhi	r2,2
   13e38:	1094ab04 	addi	r2,r2,21164
   13e3c:	18c7883a 	add	r3,r3,r3
   13e40:	18c7883a 	add	r3,r3,r3
   13e44:	10c5883a 	add	r2,r2,r3
   13e48:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   13e4c:	e0ffff03 	ldbu	r3,-4(fp)
   13e50:	008000b4 	movhi	r2,2
   13e54:	1094ab04 	addi	r2,r2,21164
   13e58:	18c7883a 	add	r3,r3,r3
   13e5c:	18c7883a 	add	r3,r3,r3
   13e60:	10c5883a 	add	r2,r2,r3
   13e64:	e0fff817 	ldw	r3,-32(fp)
   13e68:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   13e6c:	e0bff817 	ldw	r2,-32(fp)
   13e70:	10800d83 	ldbu	r2,54(r2)
   13e74:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
   13e78:	e0bff817 	ldw	r2,-32(fp)
   13e7c:	10800e03 	ldbu	r2,56(r2)
   13e80:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   13e84:	e0bff817 	ldw	r2,-32(fp)
   13e88:	10800dc3 	ldbu	r2,55(r2)
   13e8c:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   13e90:	e0fffc03 	ldbu	r3,-16(fp)
   13e94:	d0a7fd44 	addi	r2,gp,-24587
   13e98:	1885883a 	add	r2,r3,r2
   13e9c:	10c00003 	ldbu	r3,0(r2)
   13ea0:	e0bffc83 	ldbu	r2,-14(fp)
   13ea4:	1884703a 	and	r2,r3,r2
   13ea8:	10803fcc 	andi	r2,r2,255
   13eac:	10002826 	beq	r2,zero,13f50 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
   13eb0:	e0fffc03 	ldbu	r3,-16(fp)
   13eb4:	e13ffc03 	ldbu	r4,-16(fp)
   13eb8:	d0a7fd44 	addi	r2,gp,-24587
   13ebc:	2085883a 	add	r2,r4,r2
   13ec0:	10800003 	ldbu	r2,0(r2)
   13ec4:	1009883a 	mov	r4,r2
   13ec8:	e0bffc83 	ldbu	r2,-14(fp)
   13ecc:	0084303a 	nor	r2,zero,r2
   13ed0:	2084703a 	and	r2,r4,r2
   13ed4:	1009883a 	mov	r4,r2
   13ed8:	d0a7fd44 	addi	r2,gp,-24587
   13edc:	1885883a 	add	r2,r3,r2
   13ee0:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   13ee4:	e0fffc03 	ldbu	r3,-16(fp)
   13ee8:	d0a7fd44 	addi	r2,gp,-24587
   13eec:	1885883a 	add	r2,r3,r2
   13ef0:	10800003 	ldbu	r2,0(r2)
   13ef4:	10803fcc 	andi	r2,r2,255
   13ef8:	1000061e 	bne	r2,zero,13f14 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
   13efc:	e0bffc43 	ldbu	r2,-15(fp)
   13f00:	0084303a 	nor	r2,zero,r2
   13f04:	1007883a 	mov	r3,r2
   13f08:	d0a7fd03 	ldbu	r2,-24588(gp)
   13f0c:	1884703a 	and	r2,r3,r2
   13f10:	d0a7fd05 	stb	r2,-24588(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   13f14:	d0e7fd03 	ldbu	r3,-24588(gp)
   13f18:	e0bffb83 	ldbu	r2,-18(fp)
   13f1c:	1884b03a 	or	r2,r3,r2
   13f20:	d0a7fd05 	stb	r2,-24588(gp)
         OSRdyTbl[y_new] |= bitx_new;
   13f24:	e0fffb03 	ldbu	r3,-20(fp)
   13f28:	e13ffb03 	ldbu	r4,-20(fp)
   13f2c:	d0a7fd44 	addi	r2,gp,-24587
   13f30:	2085883a 	add	r2,r4,r2
   13f34:	11000003 	ldbu	r4,0(r2)
   13f38:	e0bffbc3 	ldbu	r2,-17(fp)
   13f3c:	2084b03a 	or	r2,r4,r2
   13f40:	1009883a 	mov	r4,r2
   13f44:	d0a7fd44 	addi	r2,gp,-24587
   13f48:	1885883a 	add	r2,r3,r2
   13f4c:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   13f50:	e0bff817 	ldw	r2,-32(fp)
   13f54:	10800717 	ldw	r2,28(r2)
   13f58:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   13f5c:	e0bff317 	ldw	r2,-52(fp)
   13f60:	10003326 	beq	r2,zero,14030 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   13f64:	e0bffc03 	ldbu	r2,-16(fp)
   13f68:	e0fffc03 	ldbu	r3,-16(fp)
   13f6c:	e13ff317 	ldw	r4,-52(fp)
   13f70:	20c7883a 	add	r3,r4,r3
   13f74:	18c002c4 	addi	r3,r3,11
   13f78:	18c00003 	ldbu	r3,0(r3)
   13f7c:	1809883a 	mov	r4,r3
   13f80:	e0fffc83 	ldbu	r3,-14(fp)
   13f84:	00c6303a 	nor	r3,zero,r3
   13f88:	20c6703a 	and	r3,r4,r3
   13f8c:	1809883a 	mov	r4,r3
   13f90:	e0fff317 	ldw	r3,-52(fp)
   13f94:	1885883a 	add	r2,r3,r2
   13f98:	108002c4 	addi	r2,r2,11
   13f9c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   13fa0:	e0bffc03 	ldbu	r2,-16(fp)
   13fa4:	e0fff317 	ldw	r3,-52(fp)
   13fa8:	1885883a 	add	r2,r3,r2
   13fac:	108002c4 	addi	r2,r2,11
   13fb0:	10800003 	ldbu	r2,0(r2)
   13fb4:	10803fcc 	andi	r2,r2,255
   13fb8:	1000091e 	bne	r2,zero,13fe0 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
   13fbc:	e0bff317 	ldw	r2,-52(fp)
   13fc0:	10800283 	ldbu	r2,10(r2)
   13fc4:	1007883a 	mov	r3,r2
   13fc8:	e0bffc43 	ldbu	r2,-15(fp)
   13fcc:	0084303a 	nor	r2,zero,r2
   13fd0:	1884703a 	and	r2,r3,r2
   13fd4:	1007883a 	mov	r3,r2
   13fd8:	e0bff317 	ldw	r2,-52(fp)
   13fdc:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   13fe0:	e0bff317 	ldw	r2,-52(fp)
   13fe4:	10c00283 	ldbu	r3,10(r2)
   13fe8:	e0bffb83 	ldbu	r2,-18(fp)
   13fec:	1884b03a 	or	r2,r3,r2
   13ff0:	1007883a 	mov	r3,r2
   13ff4:	e0bff317 	ldw	r2,-52(fp)
   13ff8:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   13ffc:	e0bffb03 	ldbu	r2,-20(fp)
   14000:	e0fffb03 	ldbu	r3,-20(fp)
   14004:	e13ff317 	ldw	r4,-52(fp)
   14008:	20c7883a 	add	r3,r4,r3
   1400c:	18c002c4 	addi	r3,r3,11
   14010:	19000003 	ldbu	r4,0(r3)
   14014:	e0fffbc3 	ldbu	r3,-17(fp)
   14018:	20c6b03a 	or	r3,r4,r3
   1401c:	1809883a 	mov	r4,r3
   14020:	e0fff317 	ldw	r3,-52(fp)
   14024:	1885883a 	add	r2,r3,r2
   14028:	108002c4 	addi	r2,r2,11
   1402c:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   14030:	e0bff817 	ldw	r2,-32(fp)
   14034:	10800817 	ldw	r2,32(r2)
   14038:	10004226 	beq	r2,zero,14144 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
   1403c:	e0bff817 	ldw	r2,-32(fp)
   14040:	10800817 	ldw	r2,32(r2)
   14044:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   14048:	e0bff417 	ldw	r2,-48(fp)
   1404c:	10800017 	ldw	r2,0(r2)
   14050:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   14054:	00003906 	br	1413c <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   14058:	e0bffc03 	ldbu	r2,-16(fp)
   1405c:	e0fffc03 	ldbu	r3,-16(fp)
   14060:	e13ff317 	ldw	r4,-52(fp)
   14064:	20c7883a 	add	r3,r4,r3
   14068:	18c002c4 	addi	r3,r3,11
   1406c:	18c00003 	ldbu	r3,0(r3)
   14070:	1809883a 	mov	r4,r3
   14074:	e0fffc83 	ldbu	r3,-14(fp)
   14078:	00c6303a 	nor	r3,zero,r3
   1407c:	20c6703a 	and	r3,r4,r3
   14080:	1809883a 	mov	r4,r3
   14084:	e0fff317 	ldw	r3,-52(fp)
   14088:	1885883a 	add	r2,r3,r2
   1408c:	108002c4 	addi	r2,r2,11
   14090:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   14094:	e0bffc03 	ldbu	r2,-16(fp)
   14098:	e0fff317 	ldw	r3,-52(fp)
   1409c:	1885883a 	add	r2,r3,r2
   140a0:	108002c4 	addi	r2,r2,11
   140a4:	10800003 	ldbu	r2,0(r2)
   140a8:	10803fcc 	andi	r2,r2,255
   140ac:	1000091e 	bne	r2,zero,140d4 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
   140b0:	e0bff317 	ldw	r2,-52(fp)
   140b4:	10800283 	ldbu	r2,10(r2)
   140b8:	1007883a 	mov	r3,r2
   140bc:	e0bffc43 	ldbu	r2,-15(fp)
   140c0:	0084303a 	nor	r2,zero,r2
   140c4:	1884703a 	and	r2,r3,r2
   140c8:	1007883a 	mov	r3,r2
   140cc:	e0bff317 	ldw	r2,-52(fp)
   140d0:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   140d4:	e0bff317 	ldw	r2,-52(fp)
   140d8:	10c00283 	ldbu	r3,10(r2)
   140dc:	e0bffb83 	ldbu	r2,-18(fp)
   140e0:	1884b03a 	or	r2,r3,r2
   140e4:	1007883a 	mov	r3,r2
   140e8:	e0bff317 	ldw	r2,-52(fp)
   140ec:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   140f0:	e0bffb03 	ldbu	r2,-20(fp)
   140f4:	e0fffb03 	ldbu	r3,-20(fp)
   140f8:	e13ff317 	ldw	r4,-52(fp)
   140fc:	20c7883a 	add	r3,r4,r3
   14100:	18c002c4 	addi	r3,r3,11
   14104:	19000003 	ldbu	r4,0(r3)
   14108:	e0fffbc3 	ldbu	r3,-17(fp)
   1410c:	20c6b03a 	or	r3,r4,r3
   14110:	1809883a 	mov	r4,r3
   14114:	e0fff317 	ldw	r3,-52(fp)
   14118:	1885883a 	add	r2,r3,r2
   1411c:	108002c4 	addi	r2,r2,11
   14120:	11000005 	stb	r4,0(r2)
            pevents++;
   14124:	e0bff417 	ldw	r2,-48(fp)
   14128:	10800104 	addi	r2,r2,4
   1412c:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   14130:	e0bff417 	ldw	r2,-48(fp)
   14134:	10800017 	ldw	r2,0(r2)
   14138:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   1413c:	e0bff317 	ldw	r2,-52(fp)
   14140:	103fc51e 	bne	r2,zero,14058 <OSTaskChangePrio+0x38c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   14144:	e0bff817 	ldw	r2,-32(fp)
   14148:	e0ffff03 	ldbu	r3,-4(fp)
   1414c:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBY    = y_new;
   14150:	e0bff817 	ldw	r2,-32(fp)
   14154:	e0fffb03 	ldbu	r3,-20(fp)
   14158:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBX    = x_new;
   1415c:	e0bff817 	ldw	r2,-32(fp)
   14160:	e0fffb43 	ldbu	r3,-19(fp)
   14164:	10c00d45 	stb	r3,53(r2)
    ptcb->OSTCBBitY = bity_new;
   14168:	e0bff817 	ldw	r2,-32(fp)
   1416c:	e0fffb83 	ldbu	r3,-18(fp)
   14170:	10c00e05 	stb	r3,56(r2)
    ptcb->OSTCBBitX = bitx_new;
   14174:	e0bff817 	ldw	r2,-32(fp)
   14178:	e0fffbc3 	ldbu	r3,-17(fp)
   1417c:	10c00dc5 	stb	r3,55(r2)
   14180:	e0bff517 	ldw	r2,-44(fp)
   14184:	e0bffa15 	stw	r2,-24(fp)
   14188:	e0bffa17 	ldw	r2,-24(fp)
   1418c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   14190:	d0a7f143 	ldbu	r2,-24635(gp)
   14194:	10803fcc 	andi	r2,r2,255
   14198:	10800058 	cmpnei	r2,r2,1
   1419c:	1000011e 	bne	r2,zero,141a4 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
   141a0:	000fb2c0 	call	fb2c <OS_Sched>
    }
    return (OS_ERR_NONE);
   141a4:	0005883a 	mov	r2,zero
}
   141a8:	e037883a 	mov	sp,fp
   141ac:	dfc00117 	ldw	ra,4(sp)
   141b0:	df000017 	ldw	fp,0(sp)
   141b4:	dec00204 	addi	sp,sp,8
   141b8:	f800283a 	ret

000141bc <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   141bc:	deffee04 	addi	sp,sp,-72
   141c0:	dfc01115 	stw	ra,68(sp)
   141c4:	df001015 	stw	fp,64(sp)
   141c8:	df001004 	addi	fp,sp,64
   141cc:	e13ffc15 	stw	r4,-16(fp)
   141d0:	e17ffd15 	stw	r5,-12(fp)
   141d4:	e1bffe15 	stw	r6,-8(fp)
   141d8:	3805883a 	mov	r2,r7
   141dc:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   141e0:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   141e4:	e0bfff03 	ldbu	r2,-4(fp)
   141e8:	10800570 	cmpltui	r2,r2,21
   141ec:	1000021e 	bne	r2,zero,141f8 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   141f0:	00800a84 	movi	r2,42
   141f4:	00005706 	br	14354 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   141f8:	0005303a 	rdctl	r2,status
   141fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14200:	e0fffb17 	ldw	r3,-20(fp)
   14204:	00bfff84 	movi	r2,-2
   14208:	1884703a 	and	r2,r3,r2
   1420c:	1001703a 	wrctl	status,r2
  
  return context;
   14210:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14214:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   14218:	d0a7ff03 	ldbu	r2,-24580(gp)
   1421c:	10803fcc 	andi	r2,r2,255
   14220:	10000626 	beq	r2,zero,1423c <OSTaskCreate+0x80>
   14224:	e0bff317 	ldw	r2,-52(fp)
   14228:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1422c:	e0bff417 	ldw	r2,-48(fp)
   14230:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   14234:	00800f04 	movi	r2,60
   14238:	00004606 	br	14354 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   1423c:	e0ffff03 	ldbu	r3,-4(fp)
   14240:	008000b4 	movhi	r2,2
   14244:	1094ab04 	addi	r2,r2,21164
   14248:	18c7883a 	add	r3,r3,r3
   1424c:	18c7883a 	add	r3,r3,r3
   14250:	10c5883a 	add	r2,r2,r3
   14254:	10800017 	ldw	r2,0(r2)
   14258:	1000391e 	bne	r2,zero,14340 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   1425c:	e0ffff03 	ldbu	r3,-4(fp)
   14260:	008000b4 	movhi	r2,2
   14264:	1094ab04 	addi	r2,r2,21164
   14268:	18c7883a 	add	r3,r3,r3
   1426c:	18c7883a 	add	r3,r3,r3
   14270:	10c5883a 	add	r2,r2,r3
   14274:	00c00044 	movi	r3,1
   14278:	10c00015 	stw	r3,0(r2)
   1427c:	e0bff317 	ldw	r2,-52(fp)
   14280:	e0bff515 	stw	r2,-44(fp)
   14284:	e0bff517 	ldw	r2,-44(fp)
   14288:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   1428c:	000f883a 	mov	r7,zero
   14290:	e1bffe17 	ldw	r6,-8(fp)
   14294:	e17ffd17 	ldw	r5,-12(fp)
   14298:	e13ffc17 	ldw	r4,-16(fp)
   1429c:	0018f1c0 	call	18f1c <OSTaskStkInit>
   142a0:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   142a4:	e0bfff03 	ldbu	r2,-4(fp)
   142a8:	d8000215 	stw	zero,8(sp)
   142ac:	d8000115 	stw	zero,4(sp)
   142b0:	d8000015 	stw	zero,0(sp)
   142b4:	000f883a 	mov	r7,zero
   142b8:	000d883a 	mov	r6,zero
   142bc:	e17ff717 	ldw	r5,-36(fp)
   142c0:	1009883a 	mov	r4,r2
   142c4:	000ff3c0 	call	ff3c <OS_TCBInit>
   142c8:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
   142cc:	e0bff803 	ldbu	r2,-32(fp)
   142d0:	1000061e 	bne	r2,zero,142ec <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   142d4:	d0a7f143 	ldbu	r2,-24635(gp)
   142d8:	10803fcc 	andi	r2,r2,255
   142dc:	10800058 	cmpnei	r2,r2,1
   142e0:	1000151e 	bne	r2,zero,14338 <OSTaskCreate+0x17c>
                OS_Sched();
   142e4:	000fb2c0 	call	fb2c <OS_Sched>
   142e8:	00001306 	br	14338 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   142ec:	0005303a 	rdctl	r2,status
   142f0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   142f4:	e0fffa17 	ldw	r3,-24(fp)
   142f8:	00bfff84 	movi	r2,-2
   142fc:	1884703a 	and	r2,r3,r2
   14300:	1001703a 	wrctl	status,r2
  
  return context;
   14304:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   14308:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   1430c:	e0ffff03 	ldbu	r3,-4(fp)
   14310:	008000b4 	movhi	r2,2
   14314:	1094ab04 	addi	r2,r2,21164
   14318:	18c7883a 	add	r3,r3,r3
   1431c:	18c7883a 	add	r3,r3,r3
   14320:	10c5883a 	add	r2,r2,r3
   14324:	10000015 	stw	zero,0(r2)
   14328:	e0bff317 	ldw	r2,-52(fp)
   1432c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14330:	e0bff617 	ldw	r2,-40(fp)
   14334:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   14338:	e0bff803 	ldbu	r2,-32(fp)
   1433c:	00000506 	br	14354 <OSTaskCreate+0x198>
   14340:	e0bff317 	ldw	r2,-52(fp)
   14344:	e0bff915 	stw	r2,-28(fp)
   14348:	e0bff917 	ldw	r2,-28(fp)
   1434c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   14350:	00800a04 	movi	r2,40
}
   14354:	e037883a 	mov	sp,fp
   14358:	dfc00117 	ldw	ra,4(sp)
   1435c:	df000017 	ldw	fp,0(sp)
   14360:	dec00204 	addi	sp,sp,8
   14364:	f800283a 	ret

00014368 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   14368:	deffec04 	addi	sp,sp,-80
   1436c:	dfc01315 	stw	ra,76(sp)
   14370:	df001215 	stw	fp,72(sp)
   14374:	df001204 	addi	fp,sp,72
   14378:	e13ffa15 	stw	r4,-24(fp)
   1437c:	e17ffb15 	stw	r5,-20(fp)
   14380:	e1bffc15 	stw	r6,-16(fp)
   14384:	3809883a 	mov	r4,r7
   14388:	e0c00217 	ldw	r3,8(fp)
   1438c:	e0800617 	ldw	r2,24(fp)
   14390:	e13ffd05 	stb	r4,-12(fp)
   14394:	e0fffe0d 	sth	r3,-8(fp)
   14398:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   1439c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   143a0:	e0bffd03 	ldbu	r2,-12(fp)
   143a4:	10800570 	cmpltui	r2,r2,21
   143a8:	1000021e 	bne	r2,zero,143b4 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   143ac:	00800a84 	movi	r2,42
   143b0:	00006106 	br	14538 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   143b4:	0005303a 	rdctl	r2,status
   143b8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   143bc:	e0fff917 	ldw	r3,-28(fp)
   143c0:	00bfff84 	movi	r2,-2
   143c4:	1884703a 	and	r2,r3,r2
   143c8:	1001703a 	wrctl	status,r2
  
  return context;
   143cc:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   143d0:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   143d4:	d0a7ff03 	ldbu	r2,-24580(gp)
   143d8:	10803fcc 	andi	r2,r2,255
   143dc:	10000626 	beq	r2,zero,143f8 <OSTaskCreateExt+0x90>
   143e0:	e0bff117 	ldw	r2,-60(fp)
   143e4:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   143e8:	e0bff217 	ldw	r2,-56(fp)
   143ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   143f0:	00800f04 	movi	r2,60
   143f4:	00005006 	br	14538 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   143f8:	e0fffd03 	ldbu	r3,-12(fp)
   143fc:	008000b4 	movhi	r2,2
   14400:	1094ab04 	addi	r2,r2,21164
   14404:	18c7883a 	add	r3,r3,r3
   14408:	18c7883a 	add	r3,r3,r3
   1440c:	10c5883a 	add	r2,r2,r3
   14410:	10800017 	ldw	r2,0(r2)
   14414:	1000431e 	bne	r2,zero,14524 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   14418:	e0fffd03 	ldbu	r3,-12(fp)
   1441c:	008000b4 	movhi	r2,2
   14420:	1094ab04 	addi	r2,r2,21164
   14424:	18c7883a 	add	r3,r3,r3
   14428:	18c7883a 	add	r3,r3,r3
   1442c:	10c5883a 	add	r2,r2,r3
   14430:	00c00044 	movi	r3,1
   14434:	10c00015 	stw	r3,0(r2)
   14438:	e0bff117 	ldw	r2,-60(fp)
   1443c:	e0bff315 	stw	r2,-52(fp)
   14440:	e0bff317 	ldw	r2,-52(fp)
   14444:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   14448:	e0bfff0b 	ldhu	r2,-4(fp)
   1444c:	100d883a 	mov	r6,r2
   14450:	e1400417 	ldw	r5,16(fp)
   14454:	e1000317 	ldw	r4,12(fp)
   14458:	00153c80 	call	153c8 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   1445c:	e0bfff0b 	ldhu	r2,-4(fp)
   14460:	100f883a 	mov	r7,r2
   14464:	e1bffc17 	ldw	r6,-16(fp)
   14468:	e17ffb17 	ldw	r5,-20(fp)
   1446c:	e13ffa17 	ldw	r4,-24(fp)
   14470:	0018f1c0 	call	18f1c <OSTaskStkInit>
   14474:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   14478:	e0fffd03 	ldbu	r3,-12(fp)
   1447c:	e13ffe0b 	ldhu	r4,-8(fp)
   14480:	e0bfff0b 	ldhu	r2,-4(fp)
   14484:	d8800215 	stw	r2,8(sp)
   14488:	e0800517 	ldw	r2,20(fp)
   1448c:	d8800115 	stw	r2,4(sp)
   14490:	e0800417 	ldw	r2,16(fp)
   14494:	d8800015 	stw	r2,0(sp)
   14498:	200f883a 	mov	r7,r4
   1449c:	e1800317 	ldw	r6,12(fp)
   144a0:	e17ff517 	ldw	r5,-44(fp)
   144a4:	1809883a 	mov	r4,r3
   144a8:	000ff3c0 	call	ff3c <OS_TCBInit>
   144ac:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
   144b0:	e0bff603 	ldbu	r2,-40(fp)
   144b4:	1000061e 	bne	r2,zero,144d0 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   144b8:	d0a7f143 	ldbu	r2,-24635(gp)
   144bc:	10803fcc 	andi	r2,r2,255
   144c0:	10800058 	cmpnei	r2,r2,1
   144c4:	1000151e 	bne	r2,zero,1451c <OSTaskCreateExt+0x1b4>
                OS_Sched();
   144c8:	000fb2c0 	call	fb2c <OS_Sched>
   144cc:	00001306 	br	1451c <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   144d0:	0005303a 	rdctl	r2,status
   144d4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   144d8:	e0fff817 	ldw	r3,-32(fp)
   144dc:	00bfff84 	movi	r2,-2
   144e0:	1884703a 	and	r2,r3,r2
   144e4:	1001703a 	wrctl	status,r2
  
  return context;
   144e8:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   144ec:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   144f0:	e0fffd03 	ldbu	r3,-12(fp)
   144f4:	008000b4 	movhi	r2,2
   144f8:	1094ab04 	addi	r2,r2,21164
   144fc:	18c7883a 	add	r3,r3,r3
   14500:	18c7883a 	add	r3,r3,r3
   14504:	10c5883a 	add	r2,r2,r3
   14508:	10000015 	stw	zero,0(r2)
   1450c:	e0bff117 	ldw	r2,-60(fp)
   14510:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14514:	e0bff417 	ldw	r2,-48(fp)
   14518:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   1451c:	e0bff603 	ldbu	r2,-40(fp)
   14520:	00000506 	br	14538 <OSTaskCreateExt+0x1d0>
   14524:	e0bff117 	ldw	r2,-60(fp)
   14528:	e0bff715 	stw	r2,-36(fp)
   1452c:	e0bff717 	ldw	r2,-36(fp)
   14530:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   14534:	00800a04 	movi	r2,40
}
   14538:	e037883a 	mov	sp,fp
   1453c:	dfc00117 	ldw	ra,4(sp)
   14540:	df000017 	ldw	fp,0(sp)
   14544:	dec00204 	addi	sp,sp,8
   14548:	f800283a 	ret

0001454c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   1454c:	defff404 	addi	sp,sp,-48
   14550:	dfc00b15 	stw	ra,44(sp)
   14554:	df000a15 	stw	fp,40(sp)
   14558:	df000a04 	addi	fp,sp,40
   1455c:	2005883a 	mov	r2,r4
   14560:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   14564:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   14568:	d0a7ff03 	ldbu	r2,-24580(gp)
   1456c:	10803fcc 	andi	r2,r2,255
   14570:	10000226 	beq	r2,zero,1457c <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
   14574:	00801004 	movi	r2,64
   14578:	0000c006 	br	1487c <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   1457c:	e0bfff03 	ldbu	r2,-4(fp)
   14580:	10800518 	cmpnei	r2,r2,20
   14584:	1000021e 	bne	r2,zero,14590 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
   14588:	00800f84 	movi	r2,62
   1458c:	0000bb06 	br	1487c <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   14590:	e0bfff03 	ldbu	r2,-4(fp)
   14594:	10800530 	cmpltui	r2,r2,20
   14598:	1000051e 	bne	r2,zero,145b0 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
   1459c:	e0bfff03 	ldbu	r2,-4(fp)
   145a0:	10803fe0 	cmpeqi	r2,r2,255
   145a4:	1000021e 	bne	r2,zero,145b0 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
   145a8:	00800a84 	movi	r2,42
   145ac:	0000b306 	br	1487c <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   145b0:	0005303a 	rdctl	r2,status
   145b4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   145b8:	e0fffe17 	ldw	r3,-8(fp)
   145bc:	00bfff84 	movi	r2,-2
   145c0:	1884703a 	and	r2,r3,r2
   145c4:	1001703a 	wrctl	status,r2
  
  return context;
   145c8:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   145cc:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   145d0:	e0bfff03 	ldbu	r2,-4(fp)
   145d4:	10803fd8 	cmpnei	r2,r2,255
   145d8:	1000031e 	bne	r2,zero,145e8 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   145dc:	d0a80017 	ldw	r2,-24576(gp)
   145e0:	10800d03 	ldbu	r2,52(r2)
   145e4:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   145e8:	e0ffff03 	ldbu	r3,-4(fp)
   145ec:	008000b4 	movhi	r2,2
   145f0:	1094ab04 	addi	r2,r2,21164
   145f4:	18c7883a 	add	r3,r3,r3
   145f8:	18c7883a 	add	r3,r3,r3
   145fc:	10c5883a 	add	r2,r2,r3
   14600:	10800017 	ldw	r2,0(r2)
   14604:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   14608:	e0bff817 	ldw	r2,-32(fp)
   1460c:	1000061e 	bne	r2,zero,14628 <OSTaskDel+0xdc>
   14610:	e0bff617 	ldw	r2,-40(fp)
   14614:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14618:	e0bff717 	ldw	r2,-36(fp)
   1461c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14620:	008010c4 	movi	r2,67
   14624:	00009506 	br	1487c <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   14628:	e0bff817 	ldw	r2,-32(fp)
   1462c:	10800058 	cmpnei	r2,r2,1
   14630:	1000061e 	bne	r2,zero,1464c <OSTaskDel+0x100>
   14634:	e0bff617 	ldw	r2,-40(fp)
   14638:	e0bff915 	stw	r2,-28(fp)
   1463c:	e0bff917 	ldw	r2,-28(fp)
   14640:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   14644:	00800f44 	movi	r2,61
   14648:	00008c06 	br	1487c <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   1464c:	e0bff817 	ldw	r2,-32(fp)
   14650:	10800d83 	ldbu	r2,54(r2)
   14654:	10c03fcc 	andi	r3,r2,255
   14658:	e0bff817 	ldw	r2,-32(fp)
   1465c:	10800d83 	ldbu	r2,54(r2)
   14660:	11003fcc 	andi	r4,r2,255
   14664:	d0a7fd44 	addi	r2,gp,-24587
   14668:	2085883a 	add	r2,r4,r2
   1466c:	10800003 	ldbu	r2,0(r2)
   14670:	1009883a 	mov	r4,r2
   14674:	e0bff817 	ldw	r2,-32(fp)
   14678:	10800dc3 	ldbu	r2,55(r2)
   1467c:	0084303a 	nor	r2,zero,r2
   14680:	2084703a 	and	r2,r4,r2
   14684:	1009883a 	mov	r4,r2
   14688:	d0a7fd44 	addi	r2,gp,-24587
   1468c:	1885883a 	add	r2,r3,r2
   14690:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   14694:	e0bff817 	ldw	r2,-32(fp)
   14698:	10800d83 	ldbu	r2,54(r2)
   1469c:	10c03fcc 	andi	r3,r2,255
   146a0:	d0a7fd44 	addi	r2,gp,-24587
   146a4:	1885883a 	add	r2,r3,r2
   146a8:	10800003 	ldbu	r2,0(r2)
   146ac:	10803fcc 	andi	r2,r2,255
   146b0:	1000071e 	bne	r2,zero,146d0 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   146b4:	e0bff817 	ldw	r2,-32(fp)
   146b8:	10800e03 	ldbu	r2,56(r2)
   146bc:	0084303a 	nor	r2,zero,r2
   146c0:	1007883a 	mov	r3,r2
   146c4:	d0a7fd03 	ldbu	r2,-24588(gp)
   146c8:	1884703a 	and	r2,r3,r2
   146cc:	d0a7fd05 	stb	r2,-24588(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   146d0:	e0bff817 	ldw	r2,-32(fp)
   146d4:	10800717 	ldw	r2,28(r2)
   146d8:	10000526 	beq	r2,zero,146f0 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   146dc:	e0bff817 	ldw	r2,-32(fp)
   146e0:	10800717 	ldw	r2,28(r2)
   146e4:	100b883a 	mov	r5,r2
   146e8:	e13ff817 	ldw	r4,-32(fp)
   146ec:	000f4d80 	call	f4d8 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   146f0:	e0bff817 	ldw	r2,-32(fp)
   146f4:	10800817 	ldw	r2,32(r2)
   146f8:	10000526 	beq	r2,zero,14710 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   146fc:	e0bff817 	ldw	r2,-32(fp)
   14700:	10800817 	ldw	r2,32(r2)
   14704:	100b883a 	mov	r5,r2
   14708:	e13ff817 	ldw	r4,-32(fp)
   1470c:	000f5900 	call	f590 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   14710:	e0bff817 	ldw	r2,-32(fp)
   14714:	10800a17 	ldw	r2,40(r2)
   14718:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   1471c:	e0bffb17 	ldw	r2,-20(fp)
   14720:	10000226 	beq	r2,zero,1472c <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   14724:	e13ffb17 	ldw	r4,-20(fp)
   14728:	00119700 	call	11970 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   1472c:	e0bff817 	ldw	r2,-32(fp)
   14730:	10000c0d 	sth	zero,48(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   14734:	e0bff817 	ldw	r2,-32(fp)
   14738:	10000c85 	stb	zero,50(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   1473c:	e0bff817 	ldw	r2,-32(fp)
   14740:	10000cc5 	stb	zero,51(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   14744:	d0a7f103 	ldbu	r2,-24636(gp)
   14748:	10803fcc 	andi	r2,r2,255
   1474c:	10803fe0 	cmpeqi	r2,r2,255
   14750:	1000031e 	bne	r2,zero,14760 <OSTaskDel+0x214>
        OSLockNesting++;
   14754:	d0a7f103 	ldbu	r2,-24636(gp)
   14758:	10800044 	addi	r2,r2,1
   1475c:	d0a7f105 	stb	r2,-24636(gp)
   14760:	e0bff617 	ldw	r2,-40(fp)
   14764:	e0bffd15 	stw	r2,-12(fp)
   14768:	e0bffd17 	ldw	r2,-12(fp)
   1476c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   14770:	000f0c00 	call	f0c0 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14774:	0005303a 	rdctl	r2,status
   14778:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1477c:	e0fffa17 	ldw	r3,-24(fp)
   14780:	00bfff84 	movi	r2,-2
   14784:	1884703a 	and	r2,r3,r2
   14788:	1001703a 	wrctl	status,r2
  
  return context;
   1478c:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   14790:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   14794:	d0a7f103 	ldbu	r2,-24636(gp)
   14798:	10803fcc 	andi	r2,r2,255
   1479c:	10000326 	beq	r2,zero,147ac <OSTaskDel+0x260>
        OSLockNesting--;
   147a0:	d0a7f103 	ldbu	r2,-24636(gp)
   147a4:	10bfffc4 	addi	r2,r2,-1
   147a8:	d0a7f105 	stb	r2,-24636(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   147ac:	e13ff817 	ldw	r4,-32(fp)
   147b0:	001909c0 	call	1909c <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   147b4:	d0a7f943 	ldbu	r2,-24603(gp)
   147b8:	10bfffc4 	addi	r2,r2,-1
   147bc:	d0a7f945 	stb	r2,-24603(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   147c0:	e0ffff03 	ldbu	r3,-4(fp)
   147c4:	008000b4 	movhi	r2,2
   147c8:	1094ab04 	addi	r2,r2,21164
   147cc:	18c7883a 	add	r3,r3,r3
   147d0:	18c7883a 	add	r3,r3,r3
   147d4:	10c5883a 	add	r2,r2,r3
   147d8:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   147dc:	e0bff817 	ldw	r2,-32(fp)
   147e0:	10800617 	ldw	r2,24(r2)
   147e4:	1000071e 	bne	r2,zero,14804 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   147e8:	e0bff817 	ldw	r2,-32(fp)
   147ec:	10800517 	ldw	r2,20(r2)
   147f0:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   147f4:	e0bff817 	ldw	r2,-32(fp)
   147f8:	10800517 	ldw	r2,20(r2)
   147fc:	d0a7f415 	stw	r2,-24624(gp)
   14800:	00000a06 	br	1482c <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   14804:	e0bff817 	ldw	r2,-32(fp)
   14808:	10800617 	ldw	r2,24(r2)
   1480c:	e0fff817 	ldw	r3,-32(fp)
   14810:	18c00517 	ldw	r3,20(r3)
   14814:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   14818:	e0bff817 	ldw	r2,-32(fp)
   1481c:	10800517 	ldw	r2,20(r2)
   14820:	e0fff817 	ldw	r3,-32(fp)
   14824:	18c00617 	ldw	r3,24(r3)
   14828:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   1482c:	d0e7f817 	ldw	r3,-24608(gp)
   14830:	e0bff817 	ldw	r2,-32(fp)
   14834:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   14838:	e0bff817 	ldw	r2,-32(fp)
   1483c:	d0a7f815 	stw	r2,-24608(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   14840:	e0bff817 	ldw	r2,-32(fp)
   14844:	00c00fc4 	movi	r3,63
   14848:	10c01405 	stb	r3,80(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   1484c:	e0bff817 	ldw	r2,-32(fp)
   14850:	10001445 	stb	zero,81(r2)
   14854:	e0bff617 	ldw	r2,-40(fp)
   14858:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1485c:	e0bffc17 	ldw	r2,-16(fp)
   14860:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   14864:	d0a7f143 	ldbu	r2,-24635(gp)
   14868:	10803fcc 	andi	r2,r2,255
   1486c:	10800058 	cmpnei	r2,r2,1
   14870:	1000011e 	bne	r2,zero,14878 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
   14874:	000fb2c0 	call	fb2c <OS_Sched>
    }
    return (OS_ERR_NONE);
   14878:	0005883a 	mov	r2,zero
}
   1487c:	e037883a 	mov	sp,fp
   14880:	dfc00117 	ldw	ra,4(sp)
   14884:	df000017 	ldw	fp,0(sp)
   14888:	dec00204 	addi	sp,sp,8
   1488c:	f800283a 	ret

00014890 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   14890:	defff504 	addi	sp,sp,-44
   14894:	df000a15 	stw	fp,40(sp)
   14898:	df000a04 	addi	fp,sp,40
   1489c:	2005883a 	mov	r2,r4
   148a0:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   148a4:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   148a8:	e0bfff03 	ldbu	r2,-4(fp)
   148ac:	10800518 	cmpnei	r2,r2,20
   148b0:	1000021e 	bne	r2,zero,148bc <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   148b4:	00800f84 	movi	r2,62
   148b8:	00004506 	br	149d0 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   148bc:	e0bfff03 	ldbu	r2,-4(fp)
   148c0:	10800530 	cmpltui	r2,r2,20
   148c4:	1000051e 	bne	r2,zero,148dc <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   148c8:	e0bfff03 	ldbu	r2,-4(fp)
   148cc:	10803fe0 	cmpeqi	r2,r2,255
   148d0:	1000021e 	bne	r2,zero,148dc <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   148d4:	00800a84 	movi	r2,42
   148d8:	00003d06 	br	149d0 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   148dc:	e0bfff03 	ldbu	r2,-4(fp)
   148e0:	10803fd8 	cmpnei	r2,r2,255
   148e4:	1000111e 	bne	r2,zero,1492c <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   148e8:	0005303a 	rdctl	r2,status
   148ec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   148f0:	e0fff917 	ldw	r3,-28(fp)
   148f4:	00bfff84 	movi	r2,-2
   148f8:	1884703a 	and	r2,r3,r2
   148fc:	1001703a 	wrctl	status,r2
  
  return context;
   14900:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   14904:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   14908:	d0a80017 	ldw	r2,-24576(gp)
   1490c:	10800e43 	ldbu	r2,57(r2)
   14910:	e0bff805 	stb	r2,-32(fp)
   14914:	e0bff617 	ldw	r2,-40(fp)
   14918:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1491c:	e0bffe17 	ldw	r2,-8(fp)
   14920:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   14924:	e0bff803 	ldbu	r2,-32(fp)
   14928:	00002906 	br	149d0 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1492c:	0005303a 	rdctl	r2,status
   14930:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14934:	e0fff717 	ldw	r3,-36(fp)
   14938:	00bfff84 	movi	r2,-2
   1493c:	1884703a 	and	r2,r3,r2
   14940:	1001703a 	wrctl	status,r2
  
  return context;
   14944:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   14948:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   1494c:	e0ffff03 	ldbu	r3,-4(fp)
   14950:	008000b4 	movhi	r2,2
   14954:	1094ab04 	addi	r2,r2,21164
   14958:	18c7883a 	add	r3,r3,r3
   1495c:	18c7883a 	add	r3,r3,r3
   14960:	10c5883a 	add	r2,r2,r3
   14964:	10800017 	ldw	r2,0(r2)
   14968:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   1496c:	e0bffb17 	ldw	r2,-20(fp)
   14970:	1000061e 	bne	r2,zero,1498c <OSTaskDelReq+0xfc>
   14974:	e0bff617 	ldw	r2,-40(fp)
   14978:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1497c:	e0bffa17 	ldw	r2,-24(fp)
   14980:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   14984:	008010c4 	movi	r2,67
   14988:	00001106 	br	149d0 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   1498c:	e0bffb17 	ldw	r2,-20(fp)
   14990:	10800058 	cmpnei	r2,r2,1
   14994:	1000061e 	bne	r2,zero,149b0 <OSTaskDelReq+0x120>
   14998:	e0bff617 	ldw	r2,-40(fp)
   1499c:	e0bffc15 	stw	r2,-16(fp)
   149a0:	e0bffc17 	ldw	r2,-16(fp)
   149a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   149a8:	00800f44 	movi	r2,61
   149ac:	00000806 	br	149d0 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   149b0:	e0bffb17 	ldw	r2,-20(fp)
   149b4:	00c00fc4 	movi	r3,63
   149b8:	10c00e45 	stb	r3,57(r2)
   149bc:	e0bff617 	ldw	r2,-40(fp)
   149c0:	e0bffd15 	stw	r2,-12(fp)
   149c4:	e0bffd17 	ldw	r2,-12(fp)
   149c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   149cc:	0005883a 	mov	r2,zero
}
   149d0:	e037883a 	mov	sp,fp
   149d4:	df000017 	ldw	fp,0(sp)
   149d8:	dec00104 	addi	sp,sp,4
   149dc:	f800283a 	ret

000149e0 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   149e0:	defff404 	addi	sp,sp,-48
   149e4:	dfc00b15 	stw	ra,44(sp)
   149e8:	df000a15 	stw	fp,40(sp)
   149ec:	df000a04 	addi	fp,sp,40
   149f0:	2005883a 	mov	r2,r4
   149f4:	e17ffe15 	stw	r5,-8(fp)
   149f8:	e1bfff15 	stw	r6,-4(fp)
   149fc:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   14a00:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   14a04:	e0bfff17 	ldw	r2,-4(fp)
   14a08:	1000021e 	bne	r2,zero,14a14 <OSTaskNameGet+0x34>
        return (0);
   14a0c:	0005883a 	mov	r2,zero
   14a10:	00005406 	br	14b64 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   14a14:	e0bffd03 	ldbu	r2,-12(fp)
   14a18:	10800570 	cmpltui	r2,r2,21
   14a1c:	1000081e 	bne	r2,zero,14a40 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   14a20:	e0bffd03 	ldbu	r2,-12(fp)
   14a24:	10803fe0 	cmpeqi	r2,r2,255
   14a28:	1000051e 	bne	r2,zero,14a40 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   14a2c:	e0bfff17 	ldw	r2,-4(fp)
   14a30:	00c00a84 	movi	r3,42
   14a34:	10c00005 	stb	r3,0(r2)
            return (0);
   14a38:	0005883a 	mov	r2,zero
   14a3c:	00004906 	br	14b64 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   14a40:	e0bffe17 	ldw	r2,-8(fp)
   14a44:	1000051e 	bne	r2,zero,14a5c <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   14a48:	e0bfff17 	ldw	r2,-4(fp)
   14a4c:	00c00304 	movi	r3,12
   14a50:	10c00005 	stb	r3,0(r2)
        return (0);
   14a54:	0005883a 	mov	r2,zero
   14a58:	00004206 	br	14b64 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   14a5c:	d0a7ff03 	ldbu	r2,-24580(gp)
   14a60:	10803fcc 	andi	r2,r2,255
   14a64:	10000526 	beq	r2,zero,14a7c <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
   14a68:	e0bfff17 	ldw	r2,-4(fp)
   14a6c:	00c00444 	movi	r3,17
   14a70:	10c00005 	stb	r3,0(r2)
        return (0);
   14a74:	0005883a 	mov	r2,zero
   14a78:	00003a06 	br	14b64 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14a7c:	0005303a 	rdctl	r2,status
   14a80:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14a84:	e0fffc17 	ldw	r3,-16(fp)
   14a88:	00bfff84 	movi	r2,-2
   14a8c:	1884703a 	and	r2,r3,r2
   14a90:	1001703a 	wrctl	status,r2
  
  return context;
   14a94:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14a98:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   14a9c:	e0bffd03 	ldbu	r2,-12(fp)
   14aa0:	10803fd8 	cmpnei	r2,r2,255
   14aa4:	1000031e 	bne	r2,zero,14ab4 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   14aa8:	d0a80017 	ldw	r2,-24576(gp)
   14aac:	10800d03 	ldbu	r2,52(r2)
   14ab0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14ab4:	e0fffd03 	ldbu	r3,-12(fp)
   14ab8:	008000b4 	movhi	r2,2
   14abc:	1094ab04 	addi	r2,r2,21164
   14ac0:	18c7883a 	add	r3,r3,r3
   14ac4:	18c7883a 	add	r3,r3,r3
   14ac8:	10c5883a 	add	r2,r2,r3
   14acc:	10800017 	ldw	r2,0(r2)
   14ad0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   14ad4:	e0bff817 	ldw	r2,-32(fp)
   14ad8:	1000091e 	bne	r2,zero,14b00 <OSTaskNameGet+0x120>
   14adc:	e0bff617 	ldw	r2,-40(fp)
   14ae0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14ae4:	e0bff717 	ldw	r2,-36(fp)
   14ae8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14aec:	e0bfff17 	ldw	r2,-4(fp)
   14af0:	00c010c4 	movi	r3,67
   14af4:	10c00005 	stb	r3,0(r2)
        return (0);
   14af8:	0005883a 	mov	r2,zero
   14afc:	00001906 	br	14b64 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   14b00:	e0bff817 	ldw	r2,-32(fp)
   14b04:	10800058 	cmpnei	r2,r2,1
   14b08:	1000091e 	bne	r2,zero,14b30 <OSTaskNameGet+0x150>
   14b0c:	e0bff617 	ldw	r2,-40(fp)
   14b10:	e0bff915 	stw	r2,-28(fp)
   14b14:	e0bff917 	ldw	r2,-28(fp)
   14b18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14b1c:	e0bfff17 	ldw	r2,-4(fp)
   14b20:	00c010c4 	movi	r3,67
   14b24:	10c00005 	stb	r3,0(r2)
        return (0);
   14b28:	0005883a 	mov	r2,zero
   14b2c:	00000d06 	br	14b64 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   14b30:	e0bff817 	ldw	r2,-32(fp)
   14b34:	10801404 	addi	r2,r2,80
   14b38:	100b883a 	mov	r5,r2
   14b3c:	e13ffe17 	ldw	r4,-8(fp)
   14b40:	000fc700 	call	fc70 <OS_StrCopy>
   14b44:	e0bffb05 	stb	r2,-20(fp)
   14b48:	e0bff617 	ldw	r2,-40(fp)
   14b4c:	e0bffa15 	stw	r2,-24(fp)
   14b50:	e0bffa17 	ldw	r2,-24(fp)
   14b54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14b58:	e0bfff17 	ldw	r2,-4(fp)
   14b5c:	10000005 	stb	zero,0(r2)
    return (len);
   14b60:	e0bffb03 	ldbu	r2,-20(fp)
}
   14b64:	e037883a 	mov	sp,fp
   14b68:	dfc00117 	ldw	ra,4(sp)
   14b6c:	df000017 	ldw	fp,0(sp)
   14b70:	dec00204 	addi	sp,sp,8
   14b74:	f800283a 	ret

00014b78 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   14b78:	defff304 	addi	sp,sp,-52
   14b7c:	dfc00c15 	stw	ra,48(sp)
   14b80:	df000b15 	stw	fp,44(sp)
   14b84:	df000b04 	addi	fp,sp,44
   14b88:	2005883a 	mov	r2,r4
   14b8c:	e17ffe15 	stw	r5,-8(fp)
   14b90:	e1bfff15 	stw	r6,-4(fp)
   14b94:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   14b98:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   14b9c:	e0bfff17 	ldw	r2,-4(fp)
   14ba0:	10005c26 	beq	r2,zero,14d14 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   14ba4:	e0bffd03 	ldbu	r2,-12(fp)
   14ba8:	10800570 	cmpltui	r2,r2,21
   14bac:	1000071e 	bne	r2,zero,14bcc <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   14bb0:	e0bffd03 	ldbu	r2,-12(fp)
   14bb4:	10803fe0 	cmpeqi	r2,r2,255
   14bb8:	1000041e 	bne	r2,zero,14bcc <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   14bbc:	e0bfff17 	ldw	r2,-4(fp)
   14bc0:	00c00a84 	movi	r3,42
   14bc4:	10c00005 	stb	r3,0(r2)
            return;
   14bc8:	00005306 	br	14d18 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   14bcc:	e0bffe17 	ldw	r2,-8(fp)
   14bd0:	1000041e 	bne	r2,zero,14be4 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   14bd4:	e0bfff17 	ldw	r2,-4(fp)
   14bd8:	00c00304 	movi	r3,12
   14bdc:	10c00005 	stb	r3,0(r2)
        return;
   14be0:	00004d06 	br	14d18 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   14be4:	d0a7ff03 	ldbu	r2,-24580(gp)
   14be8:	10803fcc 	andi	r2,r2,255
   14bec:	10000426 	beq	r2,zero,14c00 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
   14bf0:	e0bfff17 	ldw	r2,-4(fp)
   14bf4:	00c00484 	movi	r3,18
   14bf8:	10c00005 	stb	r3,0(r2)
        return;
   14bfc:	00004606 	br	14d18 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14c00:	0005303a 	rdctl	r2,status
   14c04:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14c08:	e0fffc17 	ldw	r3,-16(fp)
   14c0c:	00bfff84 	movi	r2,-2
   14c10:	1884703a 	and	r2,r3,r2
   14c14:	1001703a 	wrctl	status,r2
  
  return context;
   14c18:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14c1c:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   14c20:	e0bffd03 	ldbu	r2,-12(fp)
   14c24:	10803fd8 	cmpnei	r2,r2,255
   14c28:	1000031e 	bne	r2,zero,14c38 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
   14c2c:	d0a80017 	ldw	r2,-24576(gp)
   14c30:	10800d03 	ldbu	r2,52(r2)
   14c34:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14c38:	e0fffd03 	ldbu	r3,-12(fp)
   14c3c:	008000b4 	movhi	r2,2
   14c40:	1094ab04 	addi	r2,r2,21164
   14c44:	18c7883a 	add	r3,r3,r3
   14c48:	18c7883a 	add	r3,r3,r3
   14c4c:	10c5883a 	add	r2,r2,r3
   14c50:	10800017 	ldw	r2,0(r2)
   14c54:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   14c58:	e0bff717 	ldw	r2,-36(fp)
   14c5c:	1000081e 	bne	r2,zero,14c80 <OSTaskNameSet+0x108>
   14c60:	e0bff517 	ldw	r2,-44(fp)
   14c64:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14c68:	e0bff617 	ldw	r2,-40(fp)
   14c6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14c70:	e0bfff17 	ldw	r2,-4(fp)
   14c74:	00c010c4 	movi	r3,67
   14c78:	10c00005 	stb	r3,0(r2)
        return;
   14c7c:	00002606 	br	14d18 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   14c80:	e0bff717 	ldw	r2,-36(fp)
   14c84:	10800058 	cmpnei	r2,r2,1
   14c88:	1000081e 	bne	r2,zero,14cac <OSTaskNameSet+0x134>
   14c8c:	e0bff517 	ldw	r2,-44(fp)
   14c90:	e0bff815 	stw	r2,-32(fp)
   14c94:	e0bff817 	ldw	r2,-32(fp)
   14c98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14c9c:	e0bfff17 	ldw	r2,-4(fp)
   14ca0:	00c010c4 	movi	r3,67
   14ca4:	10c00005 	stb	r3,0(r2)
        return;
   14ca8:	00001b06 	br	14d18 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   14cac:	e13ffe17 	ldw	r4,-8(fp)
   14cb0:	000fce40 	call	fce4 <OS_StrLen>
   14cb4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   14cb8:	e0bffa03 	ldbu	r2,-24(fp)
   14cbc:	10800830 	cmpltui	r2,r2,32
   14cc0:	1000081e 	bne	r2,zero,14ce4 <OSTaskNameSet+0x16c>
   14cc4:	e0bff517 	ldw	r2,-44(fp)
   14cc8:	e0bff915 	stw	r2,-28(fp)
   14ccc:	e0bff917 	ldw	r2,-28(fp)
   14cd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   14cd4:	e0bfff17 	ldw	r2,-4(fp)
   14cd8:	00c01044 	movi	r3,65
   14cdc:	10c00005 	stb	r3,0(r2)
        return;
   14ce0:	00000d06 	br	14d18 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   14ce4:	e0bff717 	ldw	r2,-36(fp)
   14ce8:	10801404 	addi	r2,r2,80
   14cec:	e17ffe17 	ldw	r5,-8(fp)
   14cf0:	1009883a 	mov	r4,r2
   14cf4:	000fc700 	call	fc70 <OS_StrCopy>
   14cf8:	e0bff517 	ldw	r2,-44(fp)
   14cfc:	e0bffb15 	stw	r2,-20(fp)
   14d00:	e0bffb17 	ldw	r2,-20(fp)
   14d04:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14d08:	e0bfff17 	ldw	r2,-4(fp)
   14d0c:	10000005 	stb	zero,0(r2)
   14d10:	00000106 	br	14d18 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
   14d14:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   14d18:	e037883a 	mov	sp,fp
   14d1c:	dfc00117 	ldw	ra,4(sp)
   14d20:	df000017 	ldw	fp,0(sp)
   14d24:	dec00204 	addi	sp,sp,8
   14d28:	f800283a 	ret

00014d2c <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   14d2c:	defff404 	addi	sp,sp,-48
   14d30:	dfc00b15 	stw	ra,44(sp)
   14d34:	df000a15 	stw	fp,40(sp)
   14d38:	df000a04 	addi	fp,sp,40
   14d3c:	2005883a 	mov	r2,r4
   14d40:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   14d44:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   14d48:	e0bfff03 	ldbu	r2,-4(fp)
   14d4c:	10800530 	cmpltui	r2,r2,20
   14d50:	1000021e 	bne	r2,zero,14d5c <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   14d54:	00800a84 	movi	r2,42
   14d58:	00006406 	br	14eec <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14d5c:	0005303a 	rdctl	r2,status
   14d60:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14d64:	e0fffe17 	ldw	r3,-8(fp)
   14d68:	00bfff84 	movi	r2,-2
   14d6c:	1884703a 	and	r2,r3,r2
   14d70:	1001703a 	wrctl	status,r2
  
  return context;
   14d74:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14d78:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   14d7c:	e0ffff03 	ldbu	r3,-4(fp)
   14d80:	008000b4 	movhi	r2,2
   14d84:	1094ab04 	addi	r2,r2,21164
   14d88:	18c7883a 	add	r3,r3,r3
   14d8c:	18c7883a 	add	r3,r3,r3
   14d90:	10c5883a 	add	r2,r2,r3
   14d94:	10800017 	ldw	r2,0(r2)
   14d98:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   14d9c:	e0bff817 	ldw	r2,-32(fp)
   14da0:	1000061e 	bne	r2,zero,14dbc <OSTaskResume+0x90>
   14da4:	e0bff617 	ldw	r2,-40(fp)
   14da8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14dac:	e0bff717 	ldw	r2,-36(fp)
   14db0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   14db4:	00801184 	movi	r2,70
   14db8:	00004c06 	br	14eec <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   14dbc:	e0bff817 	ldw	r2,-32(fp)
   14dc0:	10800058 	cmpnei	r2,r2,1
   14dc4:	1000061e 	bne	r2,zero,14de0 <OSTaskResume+0xb4>
   14dc8:	e0bff617 	ldw	r2,-40(fp)
   14dcc:	e0bff915 	stw	r2,-28(fp)
   14dd0:	e0bff917 	ldw	r2,-28(fp)
   14dd4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14dd8:	008010c4 	movi	r2,67
   14ddc:	00004306 	br	14eec <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   14de0:	e0bff817 	ldw	r2,-32(fp)
   14de4:	10800c83 	ldbu	r2,50(r2)
   14de8:	10803fcc 	andi	r2,r2,255
   14dec:	1080020c 	andi	r2,r2,8
   14df0:	10003926 	beq	r2,zero,14ed8 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   14df4:	e0bff817 	ldw	r2,-32(fp)
   14df8:	10c00c83 	ldbu	r3,50(r2)
   14dfc:	00bffdc4 	movi	r2,-9
   14e00:	1884703a 	and	r2,r3,r2
   14e04:	1007883a 	mov	r3,r2
   14e08:	e0bff817 	ldw	r2,-32(fp)
   14e0c:	10c00c85 	stb	r3,50(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   14e10:	e0bff817 	ldw	r2,-32(fp)
   14e14:	10800c83 	ldbu	r2,50(r2)
   14e18:	10803fcc 	andi	r2,r2,255
   14e1c:	1000281e 	bne	r2,zero,14ec0 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
   14e20:	e0bff817 	ldw	r2,-32(fp)
   14e24:	10800c0b 	ldhu	r2,48(r2)
   14e28:	10bfffcc 	andi	r2,r2,65535
   14e2c:	10001f1e 	bne	r2,zero,14eac <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   14e30:	e0bff817 	ldw	r2,-32(fp)
   14e34:	10c00e03 	ldbu	r3,56(r2)
   14e38:	d0a7fd03 	ldbu	r2,-24588(gp)
   14e3c:	1884b03a 	or	r2,r3,r2
   14e40:	d0a7fd05 	stb	r2,-24588(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   14e44:	e0bff817 	ldw	r2,-32(fp)
   14e48:	10800d83 	ldbu	r2,54(r2)
   14e4c:	10c03fcc 	andi	r3,r2,255
   14e50:	e0bff817 	ldw	r2,-32(fp)
   14e54:	10800d83 	ldbu	r2,54(r2)
   14e58:	11003fcc 	andi	r4,r2,255
   14e5c:	d0a7fd44 	addi	r2,gp,-24587
   14e60:	2085883a 	add	r2,r4,r2
   14e64:	11000003 	ldbu	r4,0(r2)
   14e68:	e0bff817 	ldw	r2,-32(fp)
   14e6c:	10800dc3 	ldbu	r2,55(r2)
   14e70:	2084b03a 	or	r2,r4,r2
   14e74:	1009883a 	mov	r4,r2
   14e78:	d0a7fd44 	addi	r2,gp,-24587
   14e7c:	1885883a 	add	r2,r3,r2
   14e80:	11000005 	stb	r4,0(r2)
   14e84:	e0bff617 	ldw	r2,-40(fp)
   14e88:	e0bffa15 	stw	r2,-24(fp)
   14e8c:	e0bffa17 	ldw	r2,-24(fp)
   14e90:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   14e94:	d0a7f143 	ldbu	r2,-24635(gp)
   14e98:	10803fcc 	andi	r2,r2,255
   14e9c:	10800058 	cmpnei	r2,r2,1
   14ea0:	10000b1e 	bne	r2,zero,14ed0 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
   14ea4:	000fb2c0 	call	fb2c <OS_Sched>
   14ea8:	00000906 	br	14ed0 <OSTaskResume+0x1a4>
   14eac:	e0bff617 	ldw	r2,-40(fp)
   14eb0:	e0bffb15 	stw	r2,-20(fp)
   14eb4:	e0bffb17 	ldw	r2,-20(fp)
   14eb8:	1001703a 	wrctl	status,r2
   14ebc:	00000406 	br	14ed0 <OSTaskResume+0x1a4>
   14ec0:	e0bff617 	ldw	r2,-40(fp)
   14ec4:	e0bffc15 	stw	r2,-16(fp)
   14ec8:	e0bffc17 	ldw	r2,-16(fp)
   14ecc:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   14ed0:	0005883a 	mov	r2,zero
   14ed4:	00000506 	br	14eec <OSTaskResume+0x1c0>
   14ed8:	e0bff617 	ldw	r2,-40(fp)
   14edc:	e0bffd15 	stw	r2,-12(fp)
   14ee0:	e0bffd17 	ldw	r2,-12(fp)
   14ee4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   14ee8:	00801104 	movi	r2,68
}
   14eec:	e037883a 	mov	sp,fp
   14ef0:	dfc00117 	ldw	ra,4(sp)
   14ef4:	df000017 	ldw	fp,0(sp)
   14ef8:	dec00204 	addi	sp,sp,8
   14efc:	f800283a 	ret

00014f00 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   14f00:	defff304 	addi	sp,sp,-52
   14f04:	df000c15 	stw	fp,48(sp)
   14f08:	df000c04 	addi	fp,sp,48
   14f0c:	2005883a 	mov	r2,r4
   14f10:	e17fff15 	stw	r5,-4(fp)
   14f14:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   14f18:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   14f1c:	e0bffe03 	ldbu	r2,-8(fp)
   14f20:	10800570 	cmpltui	r2,r2,21
   14f24:	1000051e 	bne	r2,zero,14f3c <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   14f28:	e0bffe03 	ldbu	r2,-8(fp)
   14f2c:	10803fe0 	cmpeqi	r2,r2,255
   14f30:	1000021e 	bne	r2,zero,14f3c <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   14f34:	00800a84 	movi	r2,42
   14f38:	00005d06 	br	150b0 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   14f3c:	e0bfff17 	ldw	r2,-4(fp)
   14f40:	1000021e 	bne	r2,zero,14f4c <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   14f44:	00800244 	movi	r2,9
   14f48:	00005906 	br	150b0 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   14f4c:	e0bfff17 	ldw	r2,-4(fp)
   14f50:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   14f54:	e0bfff17 	ldw	r2,-4(fp)
   14f58:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14f5c:	0005303a 	rdctl	r2,status
   14f60:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14f64:	e0fffd17 	ldw	r3,-12(fp)
   14f68:	00bfff84 	movi	r2,-2
   14f6c:	1884703a 	and	r2,r3,r2
   14f70:	1001703a 	wrctl	status,r2
  
  return context;
   14f74:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
   14f78:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   14f7c:	e0bffe03 	ldbu	r2,-8(fp)
   14f80:	10803fd8 	cmpnei	r2,r2,255
   14f84:	1000031e 	bne	r2,zero,14f94 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
   14f88:	d0a80017 	ldw	r2,-24576(gp)
   14f8c:	10800d03 	ldbu	r2,52(r2)
   14f90:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14f94:	e0fffe03 	ldbu	r3,-8(fp)
   14f98:	008000b4 	movhi	r2,2
   14f9c:	1094ab04 	addi	r2,r2,21164
   14fa0:	18c7883a 	add	r3,r3,r3
   14fa4:	18c7883a 	add	r3,r3,r3
   14fa8:	10c5883a 	add	r2,r2,r3
   14fac:	10800017 	ldw	r2,0(r2)
   14fb0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   14fb4:	e0bff817 	ldw	r2,-32(fp)
   14fb8:	1000061e 	bne	r2,zero,14fd4 <OSTaskStkChk+0xd4>
   14fbc:	e0bff617 	ldw	r2,-40(fp)
   14fc0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14fc4:	e0bff717 	ldw	r2,-36(fp)
   14fc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14fcc:	008010c4 	movi	r2,67
   14fd0:	00003706 	br	150b0 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   14fd4:	e0bff817 	ldw	r2,-32(fp)
   14fd8:	10800058 	cmpnei	r2,r2,1
   14fdc:	1000061e 	bne	r2,zero,14ff8 <OSTaskStkChk+0xf8>
   14fe0:	e0bff617 	ldw	r2,-40(fp)
   14fe4:	e0bff915 	stw	r2,-28(fp)
   14fe8:	e0bff917 	ldw	r2,-28(fp)
   14fec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14ff0:	008010c4 	movi	r2,67
   14ff4:	00002e06 	br	150b0 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   14ff8:	e0bff817 	ldw	r2,-32(fp)
   14ffc:	1080040b 	ldhu	r2,16(r2)
   15000:	10bfffcc 	andi	r2,r2,65535
   15004:	1080004c 	andi	r2,r2,1
   15008:	1000061e 	bne	r2,zero,15024 <OSTaskStkChk+0x124>
   1500c:	e0bff617 	ldw	r2,-40(fp)
   15010:	e0bffa15 	stw	r2,-24(fp)
   15014:	e0bffa17 	ldw	r2,-24(fp)
   15018:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   1501c:	00801144 	movi	r2,69
   15020:	00002306 	br	150b0 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
   15024:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   15028:	e0bff817 	ldw	r2,-32(fp)
   1502c:	10800317 	ldw	r2,12(r2)
   15030:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
   15034:	e0bff817 	ldw	r2,-32(fp)
   15038:	10800217 	ldw	r2,8(r2)
   1503c:	e0bff415 	stw	r2,-48(fp)
   15040:	e0bff617 	ldw	r2,-40(fp)
   15044:	e0bffb15 	stw	r2,-20(fp)
   15048:	e0bffb17 	ldw	r2,-20(fp)
   1504c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   15050:	00000306 	br	15060 <OSTaskStkChk+0x160>
        nfree++;
   15054:	e0bff517 	ldw	r2,-44(fp)
   15058:	10800044 	addi	r2,r2,1
   1505c:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   15060:	e0bff417 	ldw	r2,-48(fp)
   15064:	10c00104 	addi	r3,r2,4
   15068:	e0fff415 	stw	r3,-48(fp)
   1506c:	10800017 	ldw	r2,0(r2)
   15070:	103ff826 	beq	r2,zero,15054 <OSTaskStkChk+0x154>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   15074:	e0bff517 	ldw	r2,-44(fp)
   15078:	1085883a 	add	r2,r2,r2
   1507c:	1085883a 	add	r2,r2,r2
   15080:	1007883a 	mov	r3,r2
   15084:	e0bfff17 	ldw	r2,-4(fp)
   15088:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   1508c:	e0fffc17 	ldw	r3,-16(fp)
   15090:	e0bff517 	ldw	r2,-44(fp)
   15094:	1885c83a 	sub	r2,r3,r2
   15098:	1085883a 	add	r2,r2,r2
   1509c:	1085883a 	add	r2,r2,r2
   150a0:	1007883a 	mov	r3,r2
   150a4:	e0bfff17 	ldw	r2,-4(fp)
   150a8:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   150ac:	0005883a 	mov	r2,zero
}
   150b0:	e037883a 	mov	sp,fp
   150b4:	df000017 	ldw	fp,0(sp)
   150b8:	dec00104 	addi	sp,sp,4
   150bc:	f800283a 	ret

000150c0 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   150c0:	defff504 	addi	sp,sp,-44
   150c4:	dfc00a15 	stw	ra,40(sp)
   150c8:	df000915 	stw	fp,36(sp)
   150cc:	df000904 	addi	fp,sp,36
   150d0:	2005883a 	mov	r2,r4
   150d4:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   150d8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   150dc:	e0bfff03 	ldbu	r2,-4(fp)
   150e0:	10800518 	cmpnei	r2,r2,20
   150e4:	1000021e 	bne	r2,zero,150f0 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   150e8:	008011c4 	movi	r2,71
   150ec:	00006806 	br	15290 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   150f0:	e0bfff03 	ldbu	r2,-4(fp)
   150f4:	10800530 	cmpltui	r2,r2,20
   150f8:	1000051e 	bne	r2,zero,15110 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   150fc:	e0bfff03 	ldbu	r2,-4(fp)
   15100:	10803fe0 	cmpeqi	r2,r2,255
   15104:	1000021e 	bne	r2,zero,15110 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   15108:	00800a84 	movi	r2,42
   1510c:	00006006 	br	15290 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15110:	0005303a 	rdctl	r2,status
   15114:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15118:	e0fffe17 	ldw	r3,-8(fp)
   1511c:	00bfff84 	movi	r2,-2
   15120:	1884703a 	and	r2,r3,r2
   15124:	1001703a 	wrctl	status,r2
  
  return context;
   15128:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   1512c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   15130:	e0bfff03 	ldbu	r2,-4(fp)
   15134:	10803fd8 	cmpnei	r2,r2,255
   15138:	1000061e 	bne	r2,zero,15154 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
   1513c:	d0a80017 	ldw	r2,-24576(gp)
   15140:	10800d03 	ldbu	r2,52(r2)
   15144:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   15148:	00800044 	movi	r2,1
   1514c:	e0bff705 	stb	r2,-36(fp)
   15150:	00000906 	br	15178 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   15154:	d0a80017 	ldw	r2,-24576(gp)
   15158:	10800d03 	ldbu	r2,52(r2)
   1515c:	10c03fcc 	andi	r3,r2,255
   15160:	e0bfff03 	ldbu	r2,-4(fp)
   15164:	1880031e 	bne	r3,r2,15174 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
   15168:	00800044 	movi	r2,1
   1516c:	e0bff705 	stb	r2,-36(fp)
   15170:	00000106 	br	15178 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   15174:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   15178:	e0ffff03 	ldbu	r3,-4(fp)
   1517c:	008000b4 	movhi	r2,2
   15180:	1094ab04 	addi	r2,r2,21164
   15184:	18c7883a 	add	r3,r3,r3
   15188:	18c7883a 	add	r3,r3,r3
   1518c:	10c5883a 	add	r2,r2,r3
   15190:	10800017 	ldw	r2,0(r2)
   15194:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   15198:	e0bffa17 	ldw	r2,-24(fp)
   1519c:	1000061e 	bne	r2,zero,151b8 <OSTaskSuspend+0xf8>
   151a0:	e0bff817 	ldw	r2,-32(fp)
   151a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   151a8:	e0bff917 	ldw	r2,-28(fp)
   151ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   151b0:	00801204 	movi	r2,72
   151b4:	00003606 	br	15290 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   151b8:	e0bffa17 	ldw	r2,-24(fp)
   151bc:	10800058 	cmpnei	r2,r2,1
   151c0:	1000061e 	bne	r2,zero,151dc <OSTaskSuspend+0x11c>
   151c4:	e0bff817 	ldw	r2,-32(fp)
   151c8:	e0bffb15 	stw	r2,-20(fp)
   151cc:	e0bffb17 	ldw	r2,-20(fp)
   151d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   151d4:	008010c4 	movi	r2,67
   151d8:	00002d06 	br	15290 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
   151dc:	e0bffa17 	ldw	r2,-24(fp)
   151e0:	10800d83 	ldbu	r2,54(r2)
   151e4:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   151e8:	e0fffd03 	ldbu	r3,-12(fp)
   151ec:	e13ffd03 	ldbu	r4,-12(fp)
   151f0:	d0a7fd44 	addi	r2,gp,-24587
   151f4:	2085883a 	add	r2,r4,r2
   151f8:	10800003 	ldbu	r2,0(r2)
   151fc:	1009883a 	mov	r4,r2
   15200:	e0bffa17 	ldw	r2,-24(fp)
   15204:	10800dc3 	ldbu	r2,55(r2)
   15208:	0084303a 	nor	r2,zero,r2
   1520c:	2084703a 	and	r2,r4,r2
   15210:	1009883a 	mov	r4,r2
   15214:	d0a7fd44 	addi	r2,gp,-24587
   15218:	1885883a 	add	r2,r3,r2
   1521c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   15220:	e0fffd03 	ldbu	r3,-12(fp)
   15224:	d0a7fd44 	addi	r2,gp,-24587
   15228:	1885883a 	add	r2,r3,r2
   1522c:	10800003 	ldbu	r2,0(r2)
   15230:	10803fcc 	andi	r2,r2,255
   15234:	1000071e 	bne	r2,zero,15254 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   15238:	e0bffa17 	ldw	r2,-24(fp)
   1523c:	10800e03 	ldbu	r2,56(r2)
   15240:	0084303a 	nor	r2,zero,r2
   15244:	1007883a 	mov	r3,r2
   15248:	d0a7fd03 	ldbu	r2,-24588(gp)
   1524c:	1884703a 	and	r2,r3,r2
   15250:	d0a7fd05 	stb	r2,-24588(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   15254:	e0bffa17 	ldw	r2,-24(fp)
   15258:	10800c83 	ldbu	r2,50(r2)
   1525c:	10800214 	ori	r2,r2,8
   15260:	1007883a 	mov	r3,r2
   15264:	e0bffa17 	ldw	r2,-24(fp)
   15268:	10c00c85 	stb	r3,50(r2)
   1526c:	e0bff817 	ldw	r2,-32(fp)
   15270:	e0bffc15 	stw	r2,-16(fp)
   15274:	e0bffc17 	ldw	r2,-16(fp)
   15278:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   1527c:	e0bff703 	ldbu	r2,-36(fp)
   15280:	10800058 	cmpnei	r2,r2,1
   15284:	1000011e 	bne	r2,zero,1528c <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
   15288:	000fb2c0 	call	fb2c <OS_Sched>
    }
    return (OS_ERR_NONE);
   1528c:	0005883a 	mov	r2,zero
}
   15290:	e037883a 	mov	sp,fp
   15294:	dfc00117 	ldw	ra,4(sp)
   15298:	df000017 	ldw	fp,0(sp)
   1529c:	dec00204 	addi	sp,sp,8
   152a0:	f800283a 	ret

000152a4 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   152a4:	defff604 	addi	sp,sp,-40
   152a8:	dfc00915 	stw	ra,36(sp)
   152ac:	df000815 	stw	fp,32(sp)
   152b0:	df000804 	addi	fp,sp,32
   152b4:	2005883a 	mov	r2,r4
   152b8:	e17fff15 	stw	r5,-4(fp)
   152bc:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   152c0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   152c4:	e0bffe03 	ldbu	r2,-8(fp)
   152c8:	10800570 	cmpltui	r2,r2,21
   152cc:	1000051e 	bne	r2,zero,152e4 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   152d0:	e0bffe03 	ldbu	r2,-8(fp)
   152d4:	10803fe0 	cmpeqi	r2,r2,255
   152d8:	1000021e 	bne	r2,zero,152e4 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   152dc:	00800a84 	movi	r2,42
   152e0:	00003406 	br	153b4 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   152e4:	e0bfff17 	ldw	r2,-4(fp)
   152e8:	1000021e 	bne	r2,zero,152f4 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   152ec:	00800244 	movi	r2,9
   152f0:	00003006 	br	153b4 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   152f4:	0005303a 	rdctl	r2,status
   152f8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   152fc:	e0fffd17 	ldw	r3,-12(fp)
   15300:	00bfff84 	movi	r2,-2
   15304:	1884703a 	and	r2,r3,r2
   15308:	1001703a 	wrctl	status,r2
  
  return context;
   1530c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   15310:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   15314:	e0bffe03 	ldbu	r2,-8(fp)
   15318:	10803fd8 	cmpnei	r2,r2,255
   1531c:	1000031e 	bne	r2,zero,1532c <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
   15320:	d0a80017 	ldw	r2,-24576(gp)
   15324:	10800d03 	ldbu	r2,52(r2)
   15328:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1532c:	e0fffe03 	ldbu	r3,-8(fp)
   15330:	008000b4 	movhi	r2,2
   15334:	1094ab04 	addi	r2,r2,21164
   15338:	18c7883a 	add	r3,r3,r3
   1533c:	18c7883a 	add	r3,r3,r3
   15340:	10c5883a 	add	r2,r2,r3
   15344:	10800017 	ldw	r2,0(r2)
   15348:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   1534c:	e0bffa17 	ldw	r2,-24(fp)
   15350:	1000061e 	bne	r2,zero,1536c <OSTaskQuery+0xc8>
   15354:	e0bff817 	ldw	r2,-32(fp)
   15358:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1535c:	e0bff917 	ldw	r2,-28(fp)
   15360:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   15364:	00800a44 	movi	r2,41
   15368:	00001206 	br	153b4 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   1536c:	e0bffa17 	ldw	r2,-24(fp)
   15370:	10800058 	cmpnei	r2,r2,1
   15374:	1000061e 	bne	r2,zero,15390 <OSTaskQuery+0xec>
   15378:	e0bff817 	ldw	r2,-32(fp)
   1537c:	e0bffb15 	stw	r2,-20(fp)
   15380:	e0bffb17 	ldw	r2,-20(fp)
   15384:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   15388:	008010c4 	movi	r2,67
   1538c:	00000906 	br	153b4 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   15390:	01801c04 	movi	r6,112
   15394:	e17ffa17 	ldw	r5,-24(fp)
   15398:	e13fff17 	ldw	r4,-4(fp)
   1539c:	000fac40 	call	fac4 <OS_MemCopy>
   153a0:	e0bff817 	ldw	r2,-32(fp)
   153a4:	e0bffc15 	stw	r2,-16(fp)
   153a8:	e0bffc17 	ldw	r2,-16(fp)
   153ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   153b0:	0005883a 	mov	r2,zero
}
   153b4:	e037883a 	mov	sp,fp
   153b8:	dfc00117 	ldw	ra,4(sp)
   153bc:	df000017 	ldw	fp,0(sp)
   153c0:	dec00204 	addi	sp,sp,8
   153c4:	f800283a 	ret

000153c8 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   153c8:	defffc04 	addi	sp,sp,-16
   153cc:	df000315 	stw	fp,12(sp)
   153d0:	df000304 	addi	fp,sp,12
   153d4:	e13ffd15 	stw	r4,-12(fp)
   153d8:	e17ffe15 	stw	r5,-8(fp)
   153dc:	3005883a 	mov	r2,r6
   153e0:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   153e4:	e0bfff0b 	ldhu	r2,-4(fp)
   153e8:	1080004c 	andi	r2,r2,1
   153ec:	10000d26 	beq	r2,zero,15424 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   153f0:	e0bfff0b 	ldhu	r2,-4(fp)
   153f4:	1080008c 	andi	r2,r2,2
   153f8:	10000a26 	beq	r2,zero,15424 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   153fc:	00000706 	br	1541c <OS_TaskStkClr+0x54>
                size--;
   15400:	e0bffe17 	ldw	r2,-8(fp)
   15404:	10bfffc4 	addi	r2,r2,-1
   15408:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   1540c:	e0bffd17 	ldw	r2,-12(fp)
   15410:	10c00104 	addi	r3,r2,4
   15414:	e0fffd15 	stw	r3,-12(fp)
   15418:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1541c:	e0bffe17 	ldw	r2,-8(fp)
   15420:	103ff71e 	bne	r2,zero,15400 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   15424:	0001883a 	nop
   15428:	e037883a 	mov	sp,fp
   1542c:	df000017 	ldw	fp,0(sp)
   15430:	dec00104 	addi	sp,sp,4
   15434:	f800283a 	ret

00015438 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   15438:	defff904 	addi	sp,sp,-28
   1543c:	dfc00615 	stw	ra,24(sp)
   15440:	df000515 	stw	fp,20(sp)
   15444:	df000504 	addi	fp,sp,20
   15448:	2005883a 	mov	r2,r4
   1544c:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15450:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   15454:	d0a7ff03 	ldbu	r2,-24580(gp)
   15458:	10803fcc 	andi	r2,r2,255
   1545c:	1000311e 	bne	r2,zero,15524 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   15460:	e0bfff0b 	ldhu	r2,-4(fp)
   15464:	10003026 	beq	r2,zero,15528 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15468:	0005303a 	rdctl	r2,status
   1546c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15470:	e0fffe17 	ldw	r3,-8(fp)
   15474:	00bfff84 	movi	r2,-2
   15478:	1884703a 	and	r2,r3,r2
   1547c:	1001703a 	wrctl	status,r2
  
  return context;
   15480:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   15484:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   15488:	d0a80017 	ldw	r2,-24576(gp)
   1548c:	10800d83 	ldbu	r2,54(r2)
   15490:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   15494:	e0fffd03 	ldbu	r3,-12(fp)
   15498:	e13ffd03 	ldbu	r4,-12(fp)
   1549c:	d0a7fd44 	addi	r2,gp,-24587
   154a0:	2085883a 	add	r2,r4,r2
   154a4:	10800003 	ldbu	r2,0(r2)
   154a8:	1009883a 	mov	r4,r2
   154ac:	d0a80017 	ldw	r2,-24576(gp)
   154b0:	10800dc3 	ldbu	r2,55(r2)
   154b4:	0084303a 	nor	r2,zero,r2
   154b8:	2084703a 	and	r2,r4,r2
   154bc:	1009883a 	mov	r4,r2
   154c0:	d0a7fd44 	addi	r2,gp,-24587
   154c4:	1885883a 	add	r2,r3,r2
   154c8:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   154cc:	e0fffd03 	ldbu	r3,-12(fp)
   154d0:	d0a7fd44 	addi	r2,gp,-24587
   154d4:	1885883a 	add	r2,r3,r2
   154d8:	10800003 	ldbu	r2,0(r2)
   154dc:	10803fcc 	andi	r2,r2,255
   154e0:	1000071e 	bne	r2,zero,15500 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   154e4:	d0a80017 	ldw	r2,-24576(gp)
   154e8:	10800e03 	ldbu	r2,56(r2)
   154ec:	0084303a 	nor	r2,zero,r2
   154f0:	1007883a 	mov	r3,r2
   154f4:	d0a7fd03 	ldbu	r2,-24588(gp)
   154f8:	1884703a 	and	r2,r3,r2
   154fc:	d0a7fd05 	stb	r2,-24588(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   15500:	d0a80017 	ldw	r2,-24576(gp)
   15504:	e0ffff0b 	ldhu	r3,-4(fp)
   15508:	10c00c0d 	sth	r3,48(r2)
   1550c:	e0bffb17 	ldw	r2,-20(fp)
   15510:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15514:	e0bffc17 	ldw	r2,-16(fp)
   15518:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   1551c:	000fb2c0 	call	fb2c <OS_Sched>
   15520:	00000106 	br	15528 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
   15524:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
   15528:	e037883a 	mov	sp,fp
   1552c:	dfc00117 	ldw	ra,4(sp)
   15530:	df000017 	ldw	fp,0(sp)
   15534:	dec00204 	addi	sp,sp,8
   15538:	f800283a 	ret

0001553c <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   1553c:	defff804 	addi	sp,sp,-32
   15540:	dfc00715 	stw	ra,28(sp)
   15544:	df000615 	stw	fp,24(sp)
   15548:	df000604 	addi	fp,sp,24
   1554c:	2015883a 	mov	r10,r4
   15550:	2809883a 	mov	r4,r5
   15554:	3007883a 	mov	r3,r6
   15558:	3805883a 	mov	r2,r7
   1555c:	e2bffc05 	stb	r10,-16(fp)
   15560:	e13ffd05 	stb	r4,-12(fp)
   15564:	e0fffe05 	stb	r3,-8(fp)
   15568:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1556c:	d0a7ff03 	ldbu	r2,-24580(gp)
   15570:	10803fcc 	andi	r2,r2,255
   15574:	10000226 	beq	r2,zero,15580 <OSTimeDlyHMSM+0x44>
        return (OS_ERR_TIME_DLY_ISR);
   15578:	00801544 	movi	r2,85
   1557c:	00004206 	br	15688 <OSTimeDlyHMSM+0x14c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   15580:	e0bffc03 	ldbu	r2,-16(fp)
   15584:	1000081e 	bne	r2,zero,155a8 <OSTimeDlyHMSM+0x6c>
        if (minutes == 0) {
   15588:	e0bffd03 	ldbu	r2,-12(fp)
   1558c:	1000061e 	bne	r2,zero,155a8 <OSTimeDlyHMSM+0x6c>
            if (seconds == 0) {
   15590:	e0bffe03 	ldbu	r2,-8(fp)
   15594:	1000041e 	bne	r2,zero,155a8 <OSTimeDlyHMSM+0x6c>
                if (ms == 0) {
   15598:	e0bfff0b 	ldhu	r2,-4(fp)
   1559c:	1000021e 	bne	r2,zero,155a8 <OSTimeDlyHMSM+0x6c>
                    return (OS_ERR_TIME_ZERO_DLY);
   155a0:	00801504 	movi	r2,84
   155a4:	00003806 	br	15688 <OSTimeDlyHMSM+0x14c>
                }
            }
        }
    }
    if (minutes > 59) {
   155a8:	e0bffd03 	ldbu	r2,-12(fp)
   155ac:	10800f30 	cmpltui	r2,r2,60
   155b0:	1000021e 	bne	r2,zero,155bc <OSTimeDlyHMSM+0x80>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   155b4:	00801444 	movi	r2,81
   155b8:	00003306 	br	15688 <OSTimeDlyHMSM+0x14c>
    }
    if (seconds > 59) {
   155bc:	e0bffe03 	ldbu	r2,-8(fp)
   155c0:	10800f30 	cmpltui	r2,r2,60
   155c4:	1000021e 	bne	r2,zero,155d0 <OSTimeDlyHMSM+0x94>
        return (OS_ERR_TIME_INVALID_SECONDS);
   155c8:	00801484 	movi	r2,82
   155cc:	00002e06 	br	15688 <OSTimeDlyHMSM+0x14c>
    }
    if (ms > 999) {
   155d0:	e0bfff0b 	ldhu	r2,-4(fp)
   155d4:	1080fa30 	cmpltui	r2,r2,1000
   155d8:	1000021e 	bne	r2,zero,155e4 <OSTimeDlyHMSM+0xa8>
        return (OS_ERR_TIME_INVALID_MS);
   155dc:	008014c4 	movi	r2,83
   155e0:	00002906 	br	15688 <OSTimeDlyHMSM+0x14c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   155e4:	e0bffc03 	ldbu	r2,-16(fp)
   155e8:	10c38424 	muli	r3,r2,3600
   155ec:	e0bffd03 	ldbu	r2,-12(fp)
   155f0:	10800f24 	muli	r2,r2,60
   155f4:	1887883a 	add	r3,r3,r2
   155f8:	e0bffe03 	ldbu	r2,-8(fp)
   155fc:	1885883a 	add	r2,r3,r2
   15600:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   15604:	e0bfff0b 	ldhu	r2,-4(fp)
   15608:	10800f84 	addi	r2,r2,62
   1560c:	100690fa 	slli	r3,r2,3
   15610:	008418b4 	movhi	r2,4194
   15614:	109374c4 	addi	r2,r2,19923
   15618:	188a383a 	mulxuu	r5,r3,r2
   1561c:	1885383a 	mul	r2,r3,r2
   15620:	1011883a 	mov	r8,r2
   15624:	2813883a 	mov	r9,r5
   15628:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1562c:	2085883a 	add	r2,r4,r2
   15630:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   15634:	e0bffb17 	ldw	r2,-20(fp)
   15638:	1004d43a 	srli	r2,r2,16
   1563c:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   15640:	e0bffb17 	ldw	r2,-20(fp)
   15644:	10bfffcc 	andi	r2,r2,65535
   15648:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   1564c:	e0bffb17 	ldw	r2,-20(fp)
   15650:	10bfffcc 	andi	r2,r2,65535
   15654:	1009883a 	mov	r4,r2
   15658:	00154380 	call	15438 <OSTimeDly>
    while (loops > 0) {
   1565c:	00000706 	br	1567c <OSTimeDlyHMSM+0x140>
        OSTimeDly((INT16U)32768u);
   15660:	01200014 	movui	r4,32768
   15664:	00154380 	call	15438 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   15668:	01200014 	movui	r4,32768
   1566c:	00154380 	call	15438 <OSTimeDly>
        loops--;
   15670:	e0bffa0b 	ldhu	r2,-24(fp)
   15674:	10bfffc4 	addi	r2,r2,-1
   15678:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   1567c:	e0bffa0b 	ldhu	r2,-24(fp)
   15680:	103ff71e 	bne	r2,zero,15660 <OSTimeDlyHMSM+0x124>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   15684:	0005883a 	mov	r2,zero
}
   15688:	e037883a 	mov	sp,fp
   1568c:	dfc00117 	ldw	ra,4(sp)
   15690:	df000017 	ldw	fp,0(sp)
   15694:	dec00204 	addi	sp,sp,8
   15698:	f800283a 	ret

0001569c <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   1569c:	defff504 	addi	sp,sp,-44
   156a0:	dfc00a15 	stw	ra,40(sp)
   156a4:	df000915 	stw	fp,36(sp)
   156a8:	df000904 	addi	fp,sp,36
   156ac:	2005883a 	mov	r2,r4
   156b0:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   156b4:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   156b8:	e0bfff03 	ldbu	r2,-4(fp)
   156bc:	10800530 	cmpltui	r2,r2,20
   156c0:	1000021e 	bne	r2,zero,156cc <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   156c4:	00800a84 	movi	r2,42
   156c8:	00006406 	br	1585c <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   156cc:	0005303a 	rdctl	r2,status
   156d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   156d4:	e0fffe17 	ldw	r3,-8(fp)
   156d8:	00bfff84 	movi	r2,-2
   156dc:	1884703a 	and	r2,r3,r2
   156e0:	1001703a 	wrctl	status,r2
  
  return context;
   156e4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   156e8:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   156ec:	e0ffff03 	ldbu	r3,-4(fp)
   156f0:	008000b4 	movhi	r2,2
   156f4:	1094ab04 	addi	r2,r2,21164
   156f8:	18c7883a 	add	r3,r3,r3
   156fc:	18c7883a 	add	r3,r3,r3
   15700:	10c5883a 	add	r2,r2,r3
   15704:	10800017 	ldw	r2,0(r2)
   15708:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
   1570c:	e0bff917 	ldw	r2,-28(fp)
   15710:	1000061e 	bne	r2,zero,1572c <OSTimeDlyResume+0x90>
   15714:	e0bff717 	ldw	r2,-36(fp)
   15718:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1571c:	e0bff817 	ldw	r2,-32(fp)
   15720:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   15724:	008010c4 	movi	r2,67
   15728:	00004c06 	br	1585c <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1572c:	e0bff917 	ldw	r2,-28(fp)
   15730:	10800058 	cmpnei	r2,r2,1
   15734:	1000061e 	bne	r2,zero,15750 <OSTimeDlyResume+0xb4>
   15738:	e0bff717 	ldw	r2,-36(fp)
   1573c:	e0bffa15 	stw	r2,-24(fp)
   15740:	e0bffa17 	ldw	r2,-24(fp)
   15744:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   15748:	008010c4 	movi	r2,67
   1574c:	00004306 	br	1585c <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   15750:	e0bff917 	ldw	r2,-28(fp)
   15754:	10800c0b 	ldhu	r2,48(r2)
   15758:	10bfffcc 	andi	r2,r2,65535
   1575c:	1000061e 	bne	r2,zero,15778 <OSTimeDlyResume+0xdc>
   15760:	e0bff717 	ldw	r2,-36(fp)
   15764:	e0bffb15 	stw	r2,-20(fp)
   15768:	e0bffb17 	ldw	r2,-20(fp)
   1576c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   15770:	00801404 	movi	r2,80
   15774:	00003906 	br	1585c <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   15778:	e0bff917 	ldw	r2,-28(fp)
   1577c:	10000c0d 	sth	zero,48(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   15780:	e0bff917 	ldw	r2,-28(fp)
   15784:	10800c83 	ldbu	r2,50(r2)
   15788:	10803fcc 	andi	r2,r2,255
   1578c:	10800dcc 	andi	r2,r2,55
   15790:	10000b26 	beq	r2,zero,157c0 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   15794:	e0bff917 	ldw	r2,-28(fp)
   15798:	10c00c83 	ldbu	r3,50(r2)
   1579c:	00bff204 	movi	r2,-56
   157a0:	1884703a 	and	r2,r3,r2
   157a4:	1007883a 	mov	r3,r2
   157a8:	e0bff917 	ldw	r2,-28(fp)
   157ac:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   157b0:	e0bff917 	ldw	r2,-28(fp)
   157b4:	00c00044 	movi	r3,1
   157b8:	10c00cc5 	stb	r3,51(r2)
   157bc:	00000206 	br	157c8 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   157c0:	e0bff917 	ldw	r2,-28(fp)
   157c4:	10000cc5 	stb	zero,51(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   157c8:	e0bff917 	ldw	r2,-28(fp)
   157cc:	10800c83 	ldbu	r2,50(r2)
   157d0:	10803fcc 	andi	r2,r2,255
   157d4:	1080020c 	andi	r2,r2,8
   157d8:	10001b1e 	bne	r2,zero,15848 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   157dc:	e0bff917 	ldw	r2,-28(fp)
   157e0:	10c00e03 	ldbu	r3,56(r2)
   157e4:	d0a7fd03 	ldbu	r2,-24588(gp)
   157e8:	1884b03a 	or	r2,r3,r2
   157ec:	d0a7fd05 	stb	r2,-24588(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   157f0:	e0bff917 	ldw	r2,-28(fp)
   157f4:	10800d83 	ldbu	r2,54(r2)
   157f8:	10c03fcc 	andi	r3,r2,255
   157fc:	e0bff917 	ldw	r2,-28(fp)
   15800:	10800d83 	ldbu	r2,54(r2)
   15804:	11003fcc 	andi	r4,r2,255
   15808:	d0a7fd44 	addi	r2,gp,-24587
   1580c:	2085883a 	add	r2,r4,r2
   15810:	11000003 	ldbu	r4,0(r2)
   15814:	e0bff917 	ldw	r2,-28(fp)
   15818:	10800dc3 	ldbu	r2,55(r2)
   1581c:	2084b03a 	or	r2,r4,r2
   15820:	1009883a 	mov	r4,r2
   15824:	d0a7fd44 	addi	r2,gp,-24587
   15828:	1885883a 	add	r2,r3,r2
   1582c:	11000005 	stb	r4,0(r2)
   15830:	e0bff717 	ldw	r2,-36(fp)
   15834:	e0bffc15 	stw	r2,-16(fp)
   15838:	e0bffc17 	ldw	r2,-16(fp)
   1583c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   15840:	000fb2c0 	call	fb2c <OS_Sched>
   15844:	00000406 	br	15858 <OSTimeDlyResume+0x1bc>
   15848:	e0bff717 	ldw	r2,-36(fp)
   1584c:	e0bffd15 	stw	r2,-12(fp)
   15850:	e0bffd17 	ldw	r2,-12(fp)
   15854:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   15858:	0005883a 	mov	r2,zero
}
   1585c:	e037883a 	mov	sp,fp
   15860:	dfc00117 	ldw	ra,4(sp)
   15864:	df000017 	ldw	fp,0(sp)
   15868:	dec00204 	addi	sp,sp,8
   1586c:	f800283a 	ret

00015870 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   15870:	defffb04 	addi	sp,sp,-20
   15874:	df000415 	stw	fp,16(sp)
   15878:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1587c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15880:	0005303a 	rdctl	r2,status
   15884:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15888:	e0fffe17 	ldw	r3,-8(fp)
   1588c:	00bfff84 	movi	r2,-2
   15890:	1884703a 	and	r2,r3,r2
   15894:	1001703a 	wrctl	status,r2
  
  return context;
   15898:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   1589c:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   158a0:	d0a80117 	ldw	r2,-24572(gp)
   158a4:	e0bffd15 	stw	r2,-12(fp)
   158a8:	e0bffc17 	ldw	r2,-16(fp)
   158ac:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   158b0:	e0bfff17 	ldw	r2,-4(fp)
   158b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   158b8:	e0bffd17 	ldw	r2,-12(fp)
}
   158bc:	e037883a 	mov	sp,fp
   158c0:	df000017 	ldw	fp,0(sp)
   158c4:	dec00104 	addi	sp,sp,4
   158c8:	f800283a 	ret

000158cc <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   158cc:	defffb04 	addi	sp,sp,-20
   158d0:	df000415 	stw	fp,16(sp)
   158d4:	df000404 	addi	fp,sp,16
   158d8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   158dc:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   158e0:	0005303a 	rdctl	r2,status
   158e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   158e8:	e0fffd17 	ldw	r3,-12(fp)
   158ec:	00bfff84 	movi	r2,-2
   158f0:	1884703a 	and	r2,r3,r2
   158f4:	1001703a 	wrctl	status,r2
  
  return context;
   158f8:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   158fc:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   15900:	e0bfff17 	ldw	r2,-4(fp)
   15904:	d0a80115 	stw	r2,-24572(gp)
   15908:	e0bffc17 	ldw	r2,-16(fp)
   1590c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15910:	e0bffe17 	ldw	r2,-8(fp)
   15914:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   15918:	0001883a 	nop
   1591c:	e037883a 	mov	sp,fp
   15920:	df000017 	ldw	fp,0(sp)
   15924:	dec00104 	addi	sp,sp,4
   15928:	f800283a 	ret

0001592c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1592c:	defffd04 	addi	sp,sp,-12
   15930:	dfc00215 	stw	ra,8(sp)
   15934:	df000115 	stw	fp,4(sp)
   15938:	df000104 	addi	fp,sp,4
   1593c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   15940:	d1600a04 	addi	r5,gp,-32728
   15944:	e13fff17 	ldw	r4,-4(fp)
   15948:	00185480 	call	18548 <alt_dev_llist_insert>
}
   1594c:	e037883a 	mov	sp,fp
   15950:	dfc00117 	ldw	ra,4(sp)
   15954:	df000017 	ldw	fp,0(sp)
   15958:	dec00204 	addi	sp,sp,8
   1595c:	f800283a 	ret

00015960 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   15960:	defffd04 	addi	sp,sp,-12
   15964:	dfc00215 	stw	ra,8(sp)
   15968:	df000115 	stw	fp,4(sp)
   1596c:	df000104 	addi	fp,sp,4
   15970:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   15974:	0018e280 	call	18e28 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   15978:	00800044 	movi	r2,1
   1597c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   15980:	0001883a 	nop
   15984:	e037883a 	mov	sp,fp
   15988:	dfc00117 	ldw	ra,4(sp)
   1598c:	df000017 	ldw	fp,0(sp)
   15990:	dec00204 	addi	sp,sp,8
   15994:	f800283a 	ret

00015998 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   15998:	defffb04 	addi	sp,sp,-20
   1599c:	dfc00415 	stw	ra,16(sp)
   159a0:	df000315 	stw	fp,12(sp)
   159a4:	df000304 	addi	fp,sp,12
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   159a8:	01c00204 	movi	r7,8
   159ac:	000d883a 	mov	r6,zero
   159b0:	000b883a 	mov	r5,zero
   159b4:	013fc834 	movhi	r4,65312
   159b8:	21080004 	addi	r4,r4,8192
   159bc:	001708c0 	call	1708c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER_2, Interval_Timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   159c0:	01800204 	movi	r6,8
   159c4:	000b883a 	mov	r5,zero
   159c8:	010000b4 	movhi	r4,2
   159cc:	212b4404 	addi	r4,r4,-21232
   159d0:	00164680 	call	16468 <altera_avalon_jtag_uart_init>
   159d4:	010000b4 	movhi	r4,2
   159d8:	212b3a04 	addi	r4,r4,-21272
   159dc:	001592c0 	call	1592c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   159e0:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   159e4:	010000b4 	movhi	r4,2
   159e8:	212f5504 	addi	r4,r4,-17068
   159ec:	001592c0 	call	1592c <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   159f0:	010000b4 	movhi	r4,2
   159f4:	212f6104 	addi	r4,r4,-17020
   159f8:	001592c0 	call	1592c <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   159fc:	010000b4 	movhi	r4,2
   15a00:	212f6d04 	addi	r4,r4,-16972
   15a04:	00171b40 	call	171b4 <alt_up_character_lcd_init>
   15a08:	010000b4 	movhi	r4,2
   15a0c:	212f6d04 	addi	r4,r4,-16972
   15a10:	001592c0 	call	1592c <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   15a14:	010000b4 	movhi	r4,2
   15a18:	212f7804 	addi	r4,r4,-16928
   15a1c:	001592c0 	call	1592c <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   15a20:	010000b4 	movhi	r4,2
   15a24:	212f8304 	addi	r4,r4,-16884
   15a28:	0017aa80 	call	17aa8 <alt_up_ps2_init>
   15a2c:	010000b4 	movhi	r4,2
   15a30:	212f8304 	addi	r4,r4,-16884
   15a34:	001592c0 	call	1592c <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   15a38:	010000b4 	movhi	r4,2
   15a3c:	212f9104 	addi	r4,r4,-16828
   15a40:	0017aa80 	call	17aa8 <alt_up_ps2_init>
   15a44:	010000b4 	movhi	r4,2
   15a48:	212f9104 	addi	r4,r4,-16828
   15a4c:	001592c0 	call	1592c <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   15a50:	010000b4 	movhi	r4,2
   15a54:	212f9f04 	addi	r4,r4,-16772
   15a58:	001592c0 	call	1592c <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   15a5c:	010000b4 	movhi	r4,2
   15a60:	212faa04 	addi	r4,r4,-16728
   15a64:	001592c0 	call	1592c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_CHAR_BUF_SUBSYSTEM_CHAR_BUF_DMA, VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA);
   15a68:	008000b4 	movhi	r2,2
   15a6c:	10afb704 	addi	r2,r2,-16676
   15a70:	10800a17 	ldw	r2,40(r2)
   15a74:	10800017 	ldw	r2,0(r2)
   15a78:	1007883a 	mov	r3,r2
   15a7c:	008000b4 	movhi	r2,2
   15a80:	10afb704 	addi	r2,r2,-16676
   15a84:	10c00b15 	stw	r3,44(r2)
   15a88:	008000b4 	movhi	r2,2
   15a8c:	10afb704 	addi	r2,r2,-16676
   15a90:	10800a17 	ldw	r2,40(r2)
   15a94:	10800104 	addi	r2,r2,4
   15a98:	10800017 	ldw	r2,0(r2)
   15a9c:	1007883a 	mov	r3,r2
   15aa0:	008000b4 	movhi	r2,2
   15aa4:	10afb704 	addi	r2,r2,-16676
   15aa8:	10c00c15 	stw	r3,48(r2)
   15aac:	008000b4 	movhi	r2,2
   15ab0:	10afb704 	addi	r2,r2,-16676
   15ab4:	10800a17 	ldw	r2,40(r2)
   15ab8:	10800204 	addi	r2,r2,8
   15abc:	10800017 	ldw	r2,0(r2)
   15ac0:	10ffffcc 	andi	r3,r2,65535
   15ac4:	008000b4 	movhi	r2,2
   15ac8:	10afb704 	addi	r2,r2,-16676
   15acc:	10c01115 	stw	r3,68(r2)
   15ad0:	008000b4 	movhi	r2,2
   15ad4:	10afb704 	addi	r2,r2,-16676
   15ad8:	10800a17 	ldw	r2,40(r2)
   15adc:	10800204 	addi	r2,r2,8
   15ae0:	10800017 	ldw	r2,0(r2)
   15ae4:	1006d43a 	srli	r3,r2,16
   15ae8:	008000b4 	movhi	r2,2
   15aec:	10afb704 	addi	r2,r2,-16676
   15af0:	10c01215 	stw	r3,72(r2)
   15af4:	008000b4 	movhi	r2,2
   15af8:	10afb704 	addi	r2,r2,-16676
   15afc:	10800a17 	ldw	r2,40(r2)
   15b00:	10800304 	addi	r2,r2,12
   15b04:	10800017 	ldw	r2,0(r2)
   15b08:	1005d07a 	srai	r2,r2,1
   15b0c:	10c0004c 	andi	r3,r2,1
   15b10:	008000b4 	movhi	r2,2
   15b14:	10afb704 	addi	r2,r2,-16676
   15b18:	10c00d15 	stw	r3,52(r2)
   15b1c:	008000b4 	movhi	r2,2
   15b20:	10afb704 	addi	r2,r2,-16676
   15b24:	10800a17 	ldw	r2,40(r2)
   15b28:	10800304 	addi	r2,r2,12
   15b2c:	10800017 	ldw	r2,0(r2)
   15b30:	1005d23a 	srai	r2,r2,8
   15b34:	108003cc 	andi	r2,r2,15
   15b38:	10800044 	addi	r2,r2,1
   15b3c:	1007883a 	mov	r3,r2
   15b40:	008000b4 	movhi	r2,2
   15b44:	10afb704 	addi	r2,r2,-16676
   15b48:	10c00e15 	stw	r3,56(r2)
   15b4c:	008000b4 	movhi	r2,2
   15b50:	10afb704 	addi	r2,r2,-16676
   15b54:	10800a17 	ldw	r2,40(r2)
   15b58:	10800304 	addi	r2,r2,12
   15b5c:	10800017 	ldw	r2,0(r2)
   15b60:	1005d1ba 	srai	r2,r2,6
   15b64:	108000cc 	andi	r2,r2,3
   15b68:	10800044 	addi	r2,r2,1
   15b6c:	1007883a 	mov	r3,r2
   15b70:	008000b4 	movhi	r2,2
   15b74:	10afb704 	addi	r2,r2,-16676
   15b78:	10c00f15 	stw	r3,60(r2)
   15b7c:	008000b4 	movhi	r2,2
   15b80:	10afb704 	addi	r2,r2,-16676
   15b84:	10800e17 	ldw	r2,56(r2)
   15b88:	1007883a 	mov	r3,r2
   15b8c:	008000b4 	movhi	r2,2
   15b90:	10afb704 	addi	r2,r2,-16676
   15b94:	10800f17 	ldw	r2,60(r2)
   15b98:	1885383a 	mul	r2,r3,r2
   15b9c:	e0bffd05 	stb	r2,-12(fp)
   15ba0:	e0bffd03 	ldbu	r2,-12(fp)
   15ba4:	10800268 	cmpgeui	r2,r2,9
   15ba8:	1000051e 	bne	r2,zero,15bc0 <alt_sys_init+0x228>
   15bac:	008000b4 	movhi	r2,2
   15bb0:	10afb704 	addi	r2,r2,-16676
   15bb4:	00c00044 	movi	r3,1
   15bb8:	10c01015 	stw	r3,64(r2)
   15bbc:	00000c06 	br	15bf0 <alt_sys_init+0x258>
   15bc0:	e0bffd03 	ldbu	r2,-12(fp)
   15bc4:	10800468 	cmpgeui	r2,r2,17
   15bc8:	1000051e 	bne	r2,zero,15be0 <alt_sys_init+0x248>
   15bcc:	008000b4 	movhi	r2,2
   15bd0:	10afb704 	addi	r2,r2,-16676
   15bd4:	00c00084 	movi	r3,2
   15bd8:	10c01015 	stw	r3,64(r2)
   15bdc:	00000406 	br	15bf0 <alt_sys_init+0x258>
   15be0:	008000b4 	movhi	r2,2
   15be4:	10afb704 	addi	r2,r2,-16676
   15be8:	00c00104 	movi	r3,4
   15bec:	10c01015 	stw	r3,64(r2)
   15bf0:	008000b4 	movhi	r2,2
   15bf4:	10afb704 	addi	r2,r2,-16676
   15bf8:	10800a17 	ldw	r2,40(r2)
   15bfc:	10800304 	addi	r2,r2,12
   15c00:	10800017 	ldw	r2,0(r2)
   15c04:	1005d43a 	srai	r2,r2,16
   15c08:	e0bffd45 	stb	r2,-11(fp)
   15c0c:	008000b4 	movhi	r2,2
   15c10:	10afb704 	addi	r2,r2,-16676
   15c14:	10800a17 	ldw	r2,40(r2)
   15c18:	10800304 	addi	r2,r2,12
   15c1c:	10800017 	ldw	r2,0(r2)
   15c20:	1004d63a 	srli	r2,r2,24
   15c24:	e0bffd85 	stb	r2,-10(fp)
   15c28:	008000b4 	movhi	r2,2
   15c2c:	10afb704 	addi	r2,r2,-16676
   15c30:	10801017 	ldw	r2,64(r2)
   15c34:	10800058 	cmpnei	r2,r2,1
   15c38:	1000041e 	bne	r2,zero,15c4c <alt_sys_init+0x2b4>
   15c3c:	008000b4 	movhi	r2,2
   15c40:	10afb704 	addi	r2,r2,-16676
   15c44:	10001315 	stw	zero,76(r2)
   15c48:	00000e06 	br	15c84 <alt_sys_init+0x2ec>
   15c4c:	008000b4 	movhi	r2,2
   15c50:	10afb704 	addi	r2,r2,-16676
   15c54:	10801017 	ldw	r2,64(r2)
   15c58:	10800098 	cmpnei	r2,r2,2
   15c5c:	1000051e 	bne	r2,zero,15c74 <alt_sys_init+0x2dc>
   15c60:	008000b4 	movhi	r2,2
   15c64:	10afb704 	addi	r2,r2,-16676
   15c68:	00c00044 	movi	r3,1
   15c6c:	10c01315 	stw	r3,76(r2)
   15c70:	00000406 	br	15c84 <alt_sys_init+0x2ec>
   15c74:	008000b4 	movhi	r2,2
   15c78:	10afb704 	addi	r2,r2,-16676
   15c7c:	00c00084 	movi	r3,2
   15c80:	10c01315 	stw	r3,76(r2)
   15c84:	e0bffd43 	ldbu	r2,-11(fp)
   15c88:	00c00804 	movi	r3,32
   15c8c:	1885c83a 	sub	r2,r3,r2
   15c90:	00ffffc4 	movi	r3,-1
   15c94:	1886d83a 	srl	r3,r3,r2
   15c98:	008000b4 	movhi	r2,2
   15c9c:	10afb704 	addi	r2,r2,-16676
   15ca0:	10c01415 	stw	r3,80(r2)
   15ca4:	e0fffd43 	ldbu	r3,-11(fp)
   15ca8:	008000b4 	movhi	r2,2
   15cac:	10afb704 	addi	r2,r2,-16676
   15cb0:	10801317 	ldw	r2,76(r2)
   15cb4:	1887883a 	add	r3,r3,r2
   15cb8:	008000b4 	movhi	r2,2
   15cbc:	10afb704 	addi	r2,r2,-16676
   15cc0:	10c01515 	stw	r3,84(r2)
   15cc4:	e0bffd83 	ldbu	r2,-10(fp)
   15cc8:	00c00804 	movi	r3,32
   15ccc:	1885c83a 	sub	r2,r3,r2
   15cd0:	00ffffc4 	movi	r3,-1
   15cd4:	1886d83a 	srl	r3,r3,r2
   15cd8:	008000b4 	movhi	r2,2
   15cdc:	10afb704 	addi	r2,r2,-16676
   15ce0:	10c01615 	stw	r3,88(r2)
   15ce4:	010000b4 	movhi	r4,2
   15ce8:	212fb704 	addi	r4,r4,-16676
   15cec:	001592c0 	call	1592c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   15cf0:	008000b4 	movhi	r2,2
   15cf4:	10afce04 	addi	r2,r2,-16584
   15cf8:	10800a17 	ldw	r2,40(r2)
   15cfc:	10800017 	ldw	r2,0(r2)
   15d00:	1007883a 	mov	r3,r2
   15d04:	008000b4 	movhi	r2,2
   15d08:	10afce04 	addi	r2,r2,-16584
   15d0c:	10c00b15 	stw	r3,44(r2)
   15d10:	008000b4 	movhi	r2,2
   15d14:	10afce04 	addi	r2,r2,-16584
   15d18:	10800a17 	ldw	r2,40(r2)
   15d1c:	10800104 	addi	r2,r2,4
   15d20:	10800017 	ldw	r2,0(r2)
   15d24:	1007883a 	mov	r3,r2
   15d28:	008000b4 	movhi	r2,2
   15d2c:	10afce04 	addi	r2,r2,-16584
   15d30:	10c00c15 	stw	r3,48(r2)
   15d34:	008000b4 	movhi	r2,2
   15d38:	10afce04 	addi	r2,r2,-16584
   15d3c:	10800a17 	ldw	r2,40(r2)
   15d40:	10800204 	addi	r2,r2,8
   15d44:	10800017 	ldw	r2,0(r2)
   15d48:	10ffffcc 	andi	r3,r2,65535
   15d4c:	008000b4 	movhi	r2,2
   15d50:	10afce04 	addi	r2,r2,-16584
   15d54:	10c01115 	stw	r3,68(r2)
   15d58:	008000b4 	movhi	r2,2
   15d5c:	10afce04 	addi	r2,r2,-16584
   15d60:	10800a17 	ldw	r2,40(r2)
   15d64:	10800204 	addi	r2,r2,8
   15d68:	10800017 	ldw	r2,0(r2)
   15d6c:	1006d43a 	srli	r3,r2,16
   15d70:	008000b4 	movhi	r2,2
   15d74:	10afce04 	addi	r2,r2,-16584
   15d78:	10c01215 	stw	r3,72(r2)
   15d7c:	008000b4 	movhi	r2,2
   15d80:	10afce04 	addi	r2,r2,-16584
   15d84:	10800a17 	ldw	r2,40(r2)
   15d88:	10800304 	addi	r2,r2,12
   15d8c:	10800017 	ldw	r2,0(r2)
   15d90:	1005d07a 	srai	r2,r2,1
   15d94:	10c0004c 	andi	r3,r2,1
   15d98:	008000b4 	movhi	r2,2
   15d9c:	10afce04 	addi	r2,r2,-16584
   15da0:	10c00d15 	stw	r3,52(r2)
   15da4:	008000b4 	movhi	r2,2
   15da8:	10afce04 	addi	r2,r2,-16584
   15dac:	10800a17 	ldw	r2,40(r2)
   15db0:	10800304 	addi	r2,r2,12
   15db4:	10800017 	ldw	r2,0(r2)
   15db8:	1005d23a 	srai	r2,r2,8
   15dbc:	108003cc 	andi	r2,r2,15
   15dc0:	10800044 	addi	r2,r2,1
   15dc4:	1007883a 	mov	r3,r2
   15dc8:	008000b4 	movhi	r2,2
   15dcc:	10afce04 	addi	r2,r2,-16584
   15dd0:	10c00e15 	stw	r3,56(r2)
   15dd4:	008000b4 	movhi	r2,2
   15dd8:	10afce04 	addi	r2,r2,-16584
   15ddc:	10800a17 	ldw	r2,40(r2)
   15de0:	10800304 	addi	r2,r2,12
   15de4:	10800017 	ldw	r2,0(r2)
   15de8:	1005d1ba 	srai	r2,r2,6
   15dec:	108000cc 	andi	r2,r2,3
   15df0:	10800044 	addi	r2,r2,1
   15df4:	1007883a 	mov	r3,r2
   15df8:	008000b4 	movhi	r2,2
   15dfc:	10afce04 	addi	r2,r2,-16584
   15e00:	10c00f15 	stw	r3,60(r2)
   15e04:	008000b4 	movhi	r2,2
   15e08:	10afce04 	addi	r2,r2,-16584
   15e0c:	10800e17 	ldw	r2,56(r2)
   15e10:	1007883a 	mov	r3,r2
   15e14:	008000b4 	movhi	r2,2
   15e18:	10afce04 	addi	r2,r2,-16584
   15e1c:	10800f17 	ldw	r2,60(r2)
   15e20:	1885383a 	mul	r2,r3,r2
   15e24:	e0bffdc5 	stb	r2,-9(fp)
   15e28:	e0bffdc3 	ldbu	r2,-9(fp)
   15e2c:	10800268 	cmpgeui	r2,r2,9
   15e30:	1000051e 	bne	r2,zero,15e48 <alt_sys_init+0x4b0>
   15e34:	008000b4 	movhi	r2,2
   15e38:	10afce04 	addi	r2,r2,-16584
   15e3c:	00c00044 	movi	r3,1
   15e40:	10c01015 	stw	r3,64(r2)
   15e44:	00000c06 	br	15e78 <alt_sys_init+0x4e0>
   15e48:	e0bffdc3 	ldbu	r2,-9(fp)
   15e4c:	10800468 	cmpgeui	r2,r2,17
   15e50:	1000051e 	bne	r2,zero,15e68 <alt_sys_init+0x4d0>
   15e54:	008000b4 	movhi	r2,2
   15e58:	10afce04 	addi	r2,r2,-16584
   15e5c:	00c00084 	movi	r3,2
   15e60:	10c01015 	stw	r3,64(r2)
   15e64:	00000406 	br	15e78 <alt_sys_init+0x4e0>
   15e68:	008000b4 	movhi	r2,2
   15e6c:	10afce04 	addi	r2,r2,-16584
   15e70:	00c00104 	movi	r3,4
   15e74:	10c01015 	stw	r3,64(r2)
   15e78:	008000b4 	movhi	r2,2
   15e7c:	10afce04 	addi	r2,r2,-16584
   15e80:	10800a17 	ldw	r2,40(r2)
   15e84:	10800304 	addi	r2,r2,12
   15e88:	10800017 	ldw	r2,0(r2)
   15e8c:	1005d43a 	srai	r2,r2,16
   15e90:	e0bffe05 	stb	r2,-8(fp)
   15e94:	008000b4 	movhi	r2,2
   15e98:	10afce04 	addi	r2,r2,-16584
   15e9c:	10800a17 	ldw	r2,40(r2)
   15ea0:	10800304 	addi	r2,r2,12
   15ea4:	10800017 	ldw	r2,0(r2)
   15ea8:	1004d63a 	srli	r2,r2,24
   15eac:	e0bffe45 	stb	r2,-7(fp)
   15eb0:	008000b4 	movhi	r2,2
   15eb4:	10afce04 	addi	r2,r2,-16584
   15eb8:	10801017 	ldw	r2,64(r2)
   15ebc:	10800058 	cmpnei	r2,r2,1
   15ec0:	1000041e 	bne	r2,zero,15ed4 <alt_sys_init+0x53c>
   15ec4:	008000b4 	movhi	r2,2
   15ec8:	10afce04 	addi	r2,r2,-16584
   15ecc:	10001315 	stw	zero,76(r2)
   15ed0:	00000e06 	br	15f0c <alt_sys_init+0x574>
   15ed4:	008000b4 	movhi	r2,2
   15ed8:	10afce04 	addi	r2,r2,-16584
   15edc:	10801017 	ldw	r2,64(r2)
   15ee0:	10800098 	cmpnei	r2,r2,2
   15ee4:	1000051e 	bne	r2,zero,15efc <alt_sys_init+0x564>
   15ee8:	008000b4 	movhi	r2,2
   15eec:	10afce04 	addi	r2,r2,-16584
   15ef0:	00c00044 	movi	r3,1
   15ef4:	10c01315 	stw	r3,76(r2)
   15ef8:	00000406 	br	15f0c <alt_sys_init+0x574>
   15efc:	008000b4 	movhi	r2,2
   15f00:	10afce04 	addi	r2,r2,-16584
   15f04:	00c00084 	movi	r3,2
   15f08:	10c01315 	stw	r3,76(r2)
   15f0c:	e0bffe03 	ldbu	r2,-8(fp)
   15f10:	00c00804 	movi	r3,32
   15f14:	1885c83a 	sub	r2,r3,r2
   15f18:	00ffffc4 	movi	r3,-1
   15f1c:	1886d83a 	srl	r3,r3,r2
   15f20:	008000b4 	movhi	r2,2
   15f24:	10afce04 	addi	r2,r2,-16584
   15f28:	10c01415 	stw	r3,80(r2)
   15f2c:	e0fffe03 	ldbu	r3,-8(fp)
   15f30:	008000b4 	movhi	r2,2
   15f34:	10afce04 	addi	r2,r2,-16584
   15f38:	10801317 	ldw	r2,76(r2)
   15f3c:	1887883a 	add	r3,r3,r2
   15f40:	008000b4 	movhi	r2,2
   15f44:	10afce04 	addi	r2,r2,-16584
   15f48:	10c01515 	stw	r3,84(r2)
   15f4c:	e0bffe43 	ldbu	r2,-7(fp)
   15f50:	00c00804 	movi	r3,32
   15f54:	1885c83a 	sub	r2,r3,r2
   15f58:	00ffffc4 	movi	r3,-1
   15f5c:	1886d83a 	srl	r3,r3,r2
   15f60:	008000b4 	movhi	r2,2
   15f64:	10afce04 	addi	r2,r2,-16584
   15f68:	10c01615 	stw	r3,88(r2)
   15f6c:	010000b4 	movhi	r4,2
   15f70:	212fce04 	addi	r4,r4,-16584
   15f74:	001592c0 	call	1592c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VIDEO_IN_SUBSYSTEM_VIDEO_IN_DMA, Video_In_Subsystem_Video_In_DMA);
   15f78:	008000b4 	movhi	r2,2
   15f7c:	10afe504 	addi	r2,r2,-16492
   15f80:	10800a17 	ldw	r2,40(r2)
   15f84:	10800017 	ldw	r2,0(r2)
   15f88:	1007883a 	mov	r3,r2
   15f8c:	008000b4 	movhi	r2,2
   15f90:	10afe504 	addi	r2,r2,-16492
   15f94:	10c00b15 	stw	r3,44(r2)
   15f98:	008000b4 	movhi	r2,2
   15f9c:	10afe504 	addi	r2,r2,-16492
   15fa0:	10800a17 	ldw	r2,40(r2)
   15fa4:	10800104 	addi	r2,r2,4
   15fa8:	10800017 	ldw	r2,0(r2)
   15fac:	1007883a 	mov	r3,r2
   15fb0:	008000b4 	movhi	r2,2
   15fb4:	10afe504 	addi	r2,r2,-16492
   15fb8:	10c00c15 	stw	r3,48(r2)
   15fbc:	008000b4 	movhi	r2,2
   15fc0:	10afe504 	addi	r2,r2,-16492
   15fc4:	10800a17 	ldw	r2,40(r2)
   15fc8:	10800204 	addi	r2,r2,8
   15fcc:	10800017 	ldw	r2,0(r2)
   15fd0:	10ffffcc 	andi	r3,r2,65535
   15fd4:	008000b4 	movhi	r2,2
   15fd8:	10afe504 	addi	r2,r2,-16492
   15fdc:	10c01115 	stw	r3,68(r2)
   15fe0:	008000b4 	movhi	r2,2
   15fe4:	10afe504 	addi	r2,r2,-16492
   15fe8:	10800a17 	ldw	r2,40(r2)
   15fec:	10800204 	addi	r2,r2,8
   15ff0:	10800017 	ldw	r2,0(r2)
   15ff4:	1006d43a 	srli	r3,r2,16
   15ff8:	008000b4 	movhi	r2,2
   15ffc:	10afe504 	addi	r2,r2,-16492
   16000:	10c01215 	stw	r3,72(r2)
   16004:	008000b4 	movhi	r2,2
   16008:	10afe504 	addi	r2,r2,-16492
   1600c:	10800a17 	ldw	r2,40(r2)
   16010:	10800304 	addi	r2,r2,12
   16014:	10800017 	ldw	r2,0(r2)
   16018:	1005d07a 	srai	r2,r2,1
   1601c:	10c0004c 	andi	r3,r2,1
   16020:	008000b4 	movhi	r2,2
   16024:	10afe504 	addi	r2,r2,-16492
   16028:	10c00d15 	stw	r3,52(r2)
   1602c:	008000b4 	movhi	r2,2
   16030:	10afe504 	addi	r2,r2,-16492
   16034:	10800a17 	ldw	r2,40(r2)
   16038:	10800304 	addi	r2,r2,12
   1603c:	10800017 	ldw	r2,0(r2)
   16040:	1005d23a 	srai	r2,r2,8
   16044:	108003cc 	andi	r2,r2,15
   16048:	10800044 	addi	r2,r2,1
   1604c:	1007883a 	mov	r3,r2
   16050:	008000b4 	movhi	r2,2
   16054:	10afe504 	addi	r2,r2,-16492
   16058:	10c00e15 	stw	r3,56(r2)
   1605c:	008000b4 	movhi	r2,2
   16060:	10afe504 	addi	r2,r2,-16492
   16064:	10800a17 	ldw	r2,40(r2)
   16068:	10800304 	addi	r2,r2,12
   1606c:	10800017 	ldw	r2,0(r2)
   16070:	1005d1ba 	srai	r2,r2,6
   16074:	108000cc 	andi	r2,r2,3
   16078:	10800044 	addi	r2,r2,1
   1607c:	1007883a 	mov	r3,r2
   16080:	008000b4 	movhi	r2,2
   16084:	10afe504 	addi	r2,r2,-16492
   16088:	10c00f15 	stw	r3,60(r2)
   1608c:	008000b4 	movhi	r2,2
   16090:	10afe504 	addi	r2,r2,-16492
   16094:	10800e17 	ldw	r2,56(r2)
   16098:	1007883a 	mov	r3,r2
   1609c:	008000b4 	movhi	r2,2
   160a0:	10afe504 	addi	r2,r2,-16492
   160a4:	10800f17 	ldw	r2,60(r2)
   160a8:	1885383a 	mul	r2,r3,r2
   160ac:	e0bffe85 	stb	r2,-6(fp)
   160b0:	e0bffe83 	ldbu	r2,-6(fp)
   160b4:	10800268 	cmpgeui	r2,r2,9
   160b8:	1000051e 	bne	r2,zero,160d0 <alt_sys_init+0x738>
   160bc:	008000b4 	movhi	r2,2
   160c0:	10afe504 	addi	r2,r2,-16492
   160c4:	00c00044 	movi	r3,1
   160c8:	10c01015 	stw	r3,64(r2)
   160cc:	00000c06 	br	16100 <alt_sys_init+0x768>
   160d0:	e0bffe83 	ldbu	r2,-6(fp)
   160d4:	10800468 	cmpgeui	r2,r2,17
   160d8:	1000051e 	bne	r2,zero,160f0 <alt_sys_init+0x758>
   160dc:	008000b4 	movhi	r2,2
   160e0:	10afe504 	addi	r2,r2,-16492
   160e4:	00c00084 	movi	r3,2
   160e8:	10c01015 	stw	r3,64(r2)
   160ec:	00000406 	br	16100 <alt_sys_init+0x768>
   160f0:	008000b4 	movhi	r2,2
   160f4:	10afe504 	addi	r2,r2,-16492
   160f8:	00c00104 	movi	r3,4
   160fc:	10c01015 	stw	r3,64(r2)
   16100:	008000b4 	movhi	r2,2
   16104:	10afe504 	addi	r2,r2,-16492
   16108:	10800a17 	ldw	r2,40(r2)
   1610c:	10800304 	addi	r2,r2,12
   16110:	10800017 	ldw	r2,0(r2)
   16114:	1005d43a 	srai	r2,r2,16
   16118:	e0bffec5 	stb	r2,-5(fp)
   1611c:	008000b4 	movhi	r2,2
   16120:	10afe504 	addi	r2,r2,-16492
   16124:	10800a17 	ldw	r2,40(r2)
   16128:	10800304 	addi	r2,r2,12
   1612c:	10800017 	ldw	r2,0(r2)
   16130:	1004d63a 	srli	r2,r2,24
   16134:	e0bfff05 	stb	r2,-4(fp)
   16138:	008000b4 	movhi	r2,2
   1613c:	10afe504 	addi	r2,r2,-16492
   16140:	10801017 	ldw	r2,64(r2)
   16144:	10800058 	cmpnei	r2,r2,1
   16148:	1000041e 	bne	r2,zero,1615c <alt_sys_init+0x7c4>
   1614c:	008000b4 	movhi	r2,2
   16150:	10afe504 	addi	r2,r2,-16492
   16154:	10001315 	stw	zero,76(r2)
   16158:	00000e06 	br	16194 <alt_sys_init+0x7fc>
   1615c:	008000b4 	movhi	r2,2
   16160:	10afe504 	addi	r2,r2,-16492
   16164:	10801017 	ldw	r2,64(r2)
   16168:	10800098 	cmpnei	r2,r2,2
   1616c:	1000051e 	bne	r2,zero,16184 <alt_sys_init+0x7ec>
   16170:	008000b4 	movhi	r2,2
   16174:	10afe504 	addi	r2,r2,-16492
   16178:	00c00044 	movi	r3,1
   1617c:	10c01315 	stw	r3,76(r2)
   16180:	00000406 	br	16194 <alt_sys_init+0x7fc>
   16184:	008000b4 	movhi	r2,2
   16188:	10afe504 	addi	r2,r2,-16492
   1618c:	00c00084 	movi	r3,2
   16190:	10c01315 	stw	r3,76(r2)
   16194:	e0bffec3 	ldbu	r2,-5(fp)
   16198:	00c00804 	movi	r3,32
   1619c:	1885c83a 	sub	r2,r3,r2
   161a0:	00ffffc4 	movi	r3,-1
   161a4:	1886d83a 	srl	r3,r3,r2
   161a8:	008000b4 	movhi	r2,2
   161ac:	10afe504 	addi	r2,r2,-16492
   161b0:	10c01415 	stw	r3,80(r2)
   161b4:	e0fffec3 	ldbu	r3,-5(fp)
   161b8:	008000b4 	movhi	r2,2
   161bc:	10afe504 	addi	r2,r2,-16492
   161c0:	10801317 	ldw	r2,76(r2)
   161c4:	1887883a 	add	r3,r3,r2
   161c8:	008000b4 	movhi	r2,2
   161cc:	10afe504 	addi	r2,r2,-16492
   161d0:	10c01515 	stw	r3,84(r2)
   161d4:	e0bfff03 	ldbu	r2,-4(fp)
   161d8:	00c00804 	movi	r3,32
   161dc:	1885c83a 	sub	r2,r3,r2
   161e0:	00ffffc4 	movi	r3,-1
   161e4:	1886d83a 	srl	r3,r3,r2
   161e8:	008000b4 	movhi	r2,2
   161ec:	10afe504 	addi	r2,r2,-16492
   161f0:	10c01615 	stw	r3,88(r2)
   161f4:	010000b4 	movhi	r4,2
   161f8:	212fe504 	addi	r4,r4,-16492
   161fc:	001592c0 	call	1592c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_RGB_RESAMPLER, VGA_Subsystem_VGA_Pixel_RGB_Resampler);
   16200:	008000b4 	movhi	r2,2
   16204:	10affc04 	addi	r2,r2,-16400
   16208:	10800a17 	ldw	r2,40(r2)
   1620c:	10800017 	ldw	r2,0(r2)
   16210:	10c003cc 	andi	r3,r2,15
   16214:	008000b4 	movhi	r2,2
   16218:	10affc04 	addi	r2,r2,-16400
   1621c:	10c00b15 	stw	r3,44(r2)
   16220:	008000b4 	movhi	r2,2
   16224:	10affc04 	addi	r2,r2,-16400
   16228:	10800a17 	ldw	r2,40(r2)
   1622c:	10800017 	ldw	r2,0(r2)
   16230:	1005d13a 	srai	r2,r2,4
   16234:	10c0004c 	andi	r3,r2,1
   16238:	008000b4 	movhi	r2,2
   1623c:	10affc04 	addi	r2,r2,-16400
   16240:	10c00c15 	stw	r3,48(r2)
   16244:	008000b4 	movhi	r2,2
   16248:	10affc04 	addi	r2,r2,-16400
   1624c:	10800a17 	ldw	r2,40(r2)
   16250:	10800017 	ldw	r2,0(r2)
   16254:	1005d17a 	srai	r2,r2,5
   16258:	10c0004c 	andi	r3,r2,1
   1625c:	008000b4 	movhi	r2,2
   16260:	10affc04 	addi	r2,r2,-16400
   16264:	10c00d15 	stw	r3,52(r2)
   16268:	008000b4 	movhi	r2,2
   1626c:	10affc04 	addi	r2,r2,-16400
   16270:	10800a17 	ldw	r2,40(r2)
   16274:	10800017 	ldw	r2,0(r2)
   16278:	1005d43a 	srai	r2,r2,16
   1627c:	10c003cc 	andi	r3,r2,15
   16280:	008000b4 	movhi	r2,2
   16284:	10affc04 	addi	r2,r2,-16400
   16288:	10c00e15 	stw	r3,56(r2)
   1628c:	008000b4 	movhi	r2,2
   16290:	10affc04 	addi	r2,r2,-16400
   16294:	10800a17 	ldw	r2,40(r2)
   16298:	10800017 	ldw	r2,0(r2)
   1629c:	1005d53a 	srai	r2,r2,20
   162a0:	10c0004c 	andi	r3,r2,1
   162a4:	008000b4 	movhi	r2,2
   162a8:	10affc04 	addi	r2,r2,-16400
   162ac:	10c00f15 	stw	r3,60(r2)
   162b0:	008000b4 	movhi	r2,2
   162b4:	10affc04 	addi	r2,r2,-16400
   162b8:	10800a17 	ldw	r2,40(r2)
   162bc:	10800017 	ldw	r2,0(r2)
   162c0:	1005d57a 	srai	r2,r2,21
   162c4:	10c0004c 	andi	r3,r2,1
   162c8:	008000b4 	movhi	r2,2
   162cc:	10affc04 	addi	r2,r2,-16400
   162d0:	10c01015 	stw	r3,64(r2)
   162d4:	010000b4 	movhi	r4,2
   162d8:	212ffc04 	addi	r4,r4,-16400
   162dc:	001592c0 	call	1592c <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   162e0:	010000b4 	movhi	r4,2
   162e4:	21300d04 	addi	r4,r4,-16332
   162e8:	001592c0 	call	1592c <alt_dev_reg>
}
   162ec:	0001883a 	nop
   162f0:	e037883a 	mov	sp,fp
   162f4:	dfc00117 	ldw	ra,4(sp)
   162f8:	df000017 	ldw	fp,0(sp)
   162fc:	dec00204 	addi	sp,sp,8
   16300:	f800283a 	ret

00016304 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   16304:	defffa04 	addi	sp,sp,-24
   16308:	dfc00515 	stw	ra,20(sp)
   1630c:	df000415 	stw	fp,16(sp)
   16310:	df000404 	addi	fp,sp,16
   16314:	e13ffd15 	stw	r4,-12(fp)
   16318:	e17ffe15 	stw	r5,-8(fp)
   1631c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   16320:	e0bffd17 	ldw	r2,-12(fp)
   16324:	10800017 	ldw	r2,0(r2)
   16328:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1632c:	e0bffc17 	ldw	r2,-16(fp)
   16330:	10c00a04 	addi	r3,r2,40
   16334:	e0bffd17 	ldw	r2,-12(fp)
   16338:	10800217 	ldw	r2,8(r2)
   1633c:	100f883a 	mov	r7,r2
   16340:	e1bfff17 	ldw	r6,-4(fp)
   16344:	e17ffe17 	ldw	r5,-8(fp)
   16348:	1809883a 	mov	r4,r3
   1634c:	0016a980 	call	16a98 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   16350:	e037883a 	mov	sp,fp
   16354:	dfc00117 	ldw	ra,4(sp)
   16358:	df000017 	ldw	fp,0(sp)
   1635c:	dec00204 	addi	sp,sp,8
   16360:	f800283a 	ret

00016364 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   16364:	defffa04 	addi	sp,sp,-24
   16368:	dfc00515 	stw	ra,20(sp)
   1636c:	df000415 	stw	fp,16(sp)
   16370:	df000404 	addi	fp,sp,16
   16374:	e13ffd15 	stw	r4,-12(fp)
   16378:	e17ffe15 	stw	r5,-8(fp)
   1637c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   16380:	e0bffd17 	ldw	r2,-12(fp)
   16384:	10800017 	ldw	r2,0(r2)
   16388:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1638c:	e0bffc17 	ldw	r2,-16(fp)
   16390:	10c00a04 	addi	r3,r2,40
   16394:	e0bffd17 	ldw	r2,-12(fp)
   16398:	10800217 	ldw	r2,8(r2)
   1639c:	100f883a 	mov	r7,r2
   163a0:	e1bfff17 	ldw	r6,-4(fp)
   163a4:	e17ffe17 	ldw	r5,-8(fp)
   163a8:	1809883a 	mov	r4,r3
   163ac:	0016d500 	call	16d50 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   163b0:	e037883a 	mov	sp,fp
   163b4:	dfc00117 	ldw	ra,4(sp)
   163b8:	df000017 	ldw	fp,0(sp)
   163bc:	dec00204 	addi	sp,sp,8
   163c0:	f800283a 	ret

000163c4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   163c4:	defffc04 	addi	sp,sp,-16
   163c8:	dfc00315 	stw	ra,12(sp)
   163cc:	df000215 	stw	fp,8(sp)
   163d0:	df000204 	addi	fp,sp,8
   163d4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   163d8:	e0bfff17 	ldw	r2,-4(fp)
   163dc:	10800017 	ldw	r2,0(r2)
   163e0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   163e4:	e0bffe17 	ldw	r2,-8(fp)
   163e8:	10c00a04 	addi	r3,r2,40
   163ec:	e0bfff17 	ldw	r2,-4(fp)
   163f0:	10800217 	ldw	r2,8(r2)
   163f4:	100b883a 	mov	r5,r2
   163f8:	1809883a 	mov	r4,r3
   163fc:	00169400 	call	16940 <altera_avalon_jtag_uart_close>
}
   16400:	e037883a 	mov	sp,fp
   16404:	dfc00117 	ldw	ra,4(sp)
   16408:	df000017 	ldw	fp,0(sp)
   1640c:	dec00204 	addi	sp,sp,8
   16410:	f800283a 	ret

00016414 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   16414:	defffa04 	addi	sp,sp,-24
   16418:	dfc00515 	stw	ra,20(sp)
   1641c:	df000415 	stw	fp,16(sp)
   16420:	df000404 	addi	fp,sp,16
   16424:	e13ffd15 	stw	r4,-12(fp)
   16428:	e17ffe15 	stw	r5,-8(fp)
   1642c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   16430:	e0bffd17 	ldw	r2,-12(fp)
   16434:	10800017 	ldw	r2,0(r2)
   16438:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1643c:	e0bffc17 	ldw	r2,-16(fp)
   16440:	10800a04 	addi	r2,r2,40
   16444:	e1bfff17 	ldw	r6,-4(fp)
   16448:	e17ffe17 	ldw	r5,-8(fp)
   1644c:	1009883a 	mov	r4,r2
   16450:	00169a80 	call	169a8 <altera_avalon_jtag_uart_ioctl>
}
   16454:	e037883a 	mov	sp,fp
   16458:	dfc00117 	ldw	ra,4(sp)
   1645c:	df000017 	ldw	fp,0(sp)
   16460:	dec00204 	addi	sp,sp,8
   16464:	f800283a 	ret

00016468 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   16468:	defff104 	addi	sp,sp,-60
   1646c:	dfc00e15 	stw	ra,56(sp)
   16470:	df000d15 	stw	fp,52(sp)
   16474:	df000d04 	addi	fp,sp,52
   16478:	e13ff915 	stw	r4,-28(fp)
   1647c:	e17ffa15 	stw	r5,-24(fp)
   16480:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   16484:	e0bff917 	ldw	r2,-28(fp)
   16488:	10800c04 	addi	r2,r2,48
   1648c:	e0bff315 	stw	r2,-52(fp)
   16490:	e03ff715 	stw	zero,-36(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   16494:	e0bff804 	addi	r2,fp,-32
   16498:	100b883a 	mov	r5,r2
   1649c:	e13ff717 	ldw	r4,-36(fp)
   164a0:	00106840 	call	10684 <OSFlagCreate>
   164a4:	1007883a 	mov	r3,r2
   164a8:	e0bff317 	ldw	r2,-52(fp)
   164ac:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   164b0:	e0bff917 	ldw	r2,-28(fp)
   164b4:	10800a04 	addi	r2,r2,40
   164b8:	e0bff415 	stw	r2,-48(fp)
   164bc:	00800044 	movi	r2,1
   164c0:	e0bff68d 	sth	r2,-38(fp)
   164c4:	e0bff68b 	ldhu	r2,-38(fp)
   164c8:	1009883a 	mov	r4,r2
   164cc:	001331c0 	call	1331c <OSSemCreate>
   164d0:	1007883a 	mov	r3,r2
   164d4:	e0bff417 	ldw	r2,-48(fp)
   164d8:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   164dc:	e0bff917 	ldw	r2,-28(fp)
   164e0:	10800b04 	addi	r2,r2,44
   164e4:	e0bff515 	stw	r2,-44(fp)
   164e8:	00800044 	movi	r2,1
   164ec:	e0bff60d 	sth	r2,-40(fp)
   164f0:	e0bff60b 	ldhu	r2,-40(fp)
   164f4:	1009883a 	mov	r4,r2
   164f8:	001331c0 	call	1331c <OSSemCreate>
   164fc:	1007883a 	mov	r3,r2
   16500:	e0bff517 	ldw	r2,-44(fp)
   16504:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   16508:	e0bff917 	ldw	r2,-28(fp)
   1650c:	00c00044 	movi	r3,1
   16510:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   16514:	e0bff917 	ldw	r2,-28(fp)
   16518:	10800017 	ldw	r2,0(r2)
   1651c:	10800104 	addi	r2,r2,4
   16520:	1007883a 	mov	r3,r2
   16524:	e0bff917 	ldw	r2,-28(fp)
   16528:	10800817 	ldw	r2,32(r2)
   1652c:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   16530:	e0bffb17 	ldw	r2,-20(fp)
   16534:	01800074 	movhi	r6,1
   16538:	31996804 	addi	r6,r6,26016
   1653c:	e17ff917 	ldw	r5,-28(fp)
   16540:	1009883a 	mov	r4,r2
   16544:	00188b00 	call	188b0 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   16548:	e0bff917 	ldw	r2,-28(fp)
   1654c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   16550:	e0bff917 	ldw	r2,-28(fp)
   16554:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   16558:	d0e80617 	ldw	r3,-24552(gp)
   1655c:	e1fff917 	ldw	r7,-28(fp)
   16560:	01800074 	movhi	r6,1
   16564:	319a1004 	addi	r6,r6,26688
   16568:	180b883a 	mov	r5,r3
   1656c:	1009883a 	mov	r4,r2
   16570:	00183c00 	call	183c0 <alt_alarm_start>
   16574:	1000040e 	bge	r2,zero,16588 <altera_avalon_jtag_uart_init+0x120>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   16578:	e0fff917 	ldw	r3,-28(fp)
   1657c:	00a00034 	movhi	r2,32768
   16580:	10bfffc4 	addi	r2,r2,-1
   16584:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   16588:	0001883a 	nop
   1658c:	e037883a 	mov	sp,fp
   16590:	dfc00117 	ldw	ra,4(sp)
   16594:	df000017 	ldw	fp,0(sp)
   16598:	dec00204 	addi	sp,sp,8
   1659c:	f800283a 	ret

000165a0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   165a0:	defff004 	addi	sp,sp,-64
   165a4:	dfc00f15 	stw	ra,60(sp)
   165a8:	df000e15 	stw	fp,56(sp)
   165ac:	df000e04 	addi	fp,sp,56
   165b0:	e13ffe15 	stw	r4,-8(fp)
   165b4:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   165b8:	e0bffe17 	ldw	r2,-8(fp)
   165bc:	e0bff415 	stw	r2,-48(fp)
  unsigned int base = sp->base;
   165c0:	e0bff417 	ldw	r2,-48(fp)
   165c4:	10800017 	ldw	r2,0(r2)
   165c8:	e0bff515 	stw	r2,-44(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   165cc:	e0bff517 	ldw	r2,-44(fp)
   165d0:	10800104 	addi	r2,r2,4
   165d4:	10800037 	ldwio	r2,0(r2)
   165d8:	e0bff615 	stw	r2,-40(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   165dc:	e0bff617 	ldw	r2,-40(fp)
   165e0:	1080c00c 	andi	r2,r2,768
   165e4:	10008f26 	beq	r2,zero,16824 <altera_avalon_jtag_uart_irq+0x284>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   165e8:	e0bff617 	ldw	r2,-40(fp)
   165ec:	1080400c 	andi	r2,r2,256
   165f0:	10004626 	beq	r2,zero,1670c <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   165f4:	00800074 	movhi	r2,1
   165f8:	e0bff215 	stw	r2,-56(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   165fc:	e0bff417 	ldw	r2,-48(fp)
   16600:	10800d17 	ldw	r2,52(r2)
   16604:	10800044 	addi	r2,r2,1
   16608:	1081ffcc 	andi	r2,r2,2047
   1660c:	e0bff715 	stw	r2,-36(fp)
        if (next == sp->rx_out)
   16610:	e0bff417 	ldw	r2,-48(fp)
   16614:	10c00e17 	ldw	r3,56(r2)
   16618:	e0bff717 	ldw	r2,-36(fp)
   1661c:	18802626 	beq	r3,r2,166b8 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   16620:	e0bff517 	ldw	r2,-44(fp)
   16624:	10800037 	ldwio	r2,0(r2)
   16628:	e0bff215 	stw	r2,-56(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1662c:	e0bff217 	ldw	r2,-56(fp)
   16630:	10a0000c 	andi	r2,r2,32768
   16634:	10002226 	beq	r2,zero,166c0 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   16638:	e0bff417 	ldw	r2,-48(fp)
   1663c:	10800d17 	ldw	r2,52(r2)
   16640:	e0fff217 	ldw	r3,-56(fp)
   16644:	1809883a 	mov	r4,r3
   16648:	e0fff417 	ldw	r3,-48(fp)
   1664c:	1885883a 	add	r2,r3,r2
   16650:	10801104 	addi	r2,r2,68
   16654:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16658:	e0bff417 	ldw	r2,-48(fp)
   1665c:	10800d17 	ldw	r2,52(r2)
   16660:	10800044 	addi	r2,r2,1
   16664:	10c1ffcc 	andi	r3,r2,2047
   16668:	e0bff417 	ldw	r2,-48(fp)
   1666c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   16670:	e0bff417 	ldw	r2,-48(fp)
   16674:	10800c17 	ldw	r2,48(r2)
   16678:	e0bff915 	stw	r2,-28(fp)
   1667c:	00800044 	movi	r2,1
   16680:	e0bffa15 	stw	r2,-24(fp)
   16684:	00800044 	movi	r2,1
   16688:	e0bffb05 	stb	r2,-20(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1668c:	d0a7f143 	ldbu	r2,-24635(gp)
   16690:	10803fcc 	andi	r2,r2,255
   16694:	103fd926 	beq	r2,zero,165fc <altera_avalon_jtag_uart_irq+0x5c>
  {
    OSFlagPost (group, flags, opt, &err);
   16698:	e0bffb03 	ldbu	r2,-20(fp)
   1669c:	e0fffd44 	addi	r3,fp,-11
   166a0:	180f883a 	mov	r7,r3
   166a4:	100d883a 	mov	r6,r2
   166a8:	e17ffa17 	ldw	r5,-24(fp)
   166ac:	e13ff917 	ldw	r4,-28(fp)
   166b0:	001121c0 	call	1121c <OSFlagPost>
      }
   166b4:	003fd106 	br	165fc <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   166b8:	0001883a 	nop
   166bc:	00000106 	br	166c4 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   166c0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   166c4:	e0bff217 	ldw	r2,-56(fp)
   166c8:	10bfffec 	andhi	r2,r2,65535
   166cc:	10000f26 	beq	r2,zero,1670c <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   166d0:	e0bff417 	ldw	r2,-48(fp)
   166d4:	10c00817 	ldw	r3,32(r2)
   166d8:	00bfff84 	movi	r2,-2
   166dc:	1886703a 	and	r3,r3,r2
   166e0:	e0bff417 	ldw	r2,-48(fp)
   166e4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   166e8:	e0bff517 	ldw	r2,-44(fp)
   166ec:	10800104 	addi	r2,r2,4
   166f0:	1007883a 	mov	r3,r2
   166f4:	e0bff417 	ldw	r2,-48(fp)
   166f8:	10800817 	ldw	r2,32(r2)
   166fc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   16700:	e0bff517 	ldw	r2,-44(fp)
   16704:	10800104 	addi	r2,r2,4
   16708:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1670c:	e0bff617 	ldw	r2,-40(fp)
   16710:	1080800c 	andi	r2,r2,512
   16714:	103fad26 	beq	r2,zero,165cc <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   16718:	e0bff617 	ldw	r2,-40(fp)
   1671c:	1004d43a 	srli	r2,r2,16
   16720:	e0bff315 	stw	r2,-52(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   16724:	00002506 	br	167bc <altera_avalon_jtag_uart_irq+0x21c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   16728:	e0bff517 	ldw	r2,-44(fp)
   1672c:	e0fff417 	ldw	r3,-48(fp)
   16730:	18c01017 	ldw	r3,64(r3)
   16734:	e13ff417 	ldw	r4,-48(fp)
   16738:	20c7883a 	add	r3,r4,r3
   1673c:	18c21104 	addi	r3,r3,2116
   16740:	18c00003 	ldbu	r3,0(r3)
   16744:	18c03fcc 	andi	r3,r3,255
   16748:	18c0201c 	xori	r3,r3,128
   1674c:	18ffe004 	addi	r3,r3,-128
   16750:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16754:	e0bff417 	ldw	r2,-48(fp)
   16758:	10801017 	ldw	r2,64(r2)
   1675c:	10800044 	addi	r2,r2,1
   16760:	10c1ffcc 	andi	r3,r2,2047
   16764:	e0bff417 	ldw	r2,-48(fp)
   16768:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   1676c:	e0bff417 	ldw	r2,-48(fp)
   16770:	10800c17 	ldw	r2,48(r2)
   16774:	e0bff815 	stw	r2,-32(fp)
   16778:	00800084 	movi	r2,2
   1677c:	e0bffc15 	stw	r2,-16(fp)
   16780:	00800044 	movi	r2,1
   16784:	e0bffd05 	stb	r2,-12(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   16788:	d0a7f143 	ldbu	r2,-24635(gp)
   1678c:	10803fcc 	andi	r2,r2,255
   16790:	10000726 	beq	r2,zero,167b0 <altera_avalon_jtag_uart_irq+0x210>
  {
    OSFlagPost (group, flags, opt, &err);
   16794:	e0bffd03 	ldbu	r2,-12(fp)
   16798:	e0fffd84 	addi	r3,fp,-10
   1679c:	180f883a 	mov	r7,r3
   167a0:	100d883a 	mov	r6,r2
   167a4:	e17ffc17 	ldw	r5,-16(fp)
   167a8:	e13ff817 	ldw	r4,-32(fp)
   167ac:	001121c0 	call	1121c <OSFlagPost>

        space--;
   167b0:	e0bff317 	ldw	r2,-52(fp)
   167b4:	10bfffc4 	addi	r2,r2,-1
   167b8:	e0bff315 	stw	r2,-52(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   167bc:	e0bff317 	ldw	r2,-52(fp)
   167c0:	10000526 	beq	r2,zero,167d8 <altera_avalon_jtag_uart_irq+0x238>
   167c4:	e0bff417 	ldw	r2,-48(fp)
   167c8:	10c01017 	ldw	r3,64(r2)
   167cc:	e0bff417 	ldw	r2,-48(fp)
   167d0:	10800f17 	ldw	r2,60(r2)
   167d4:	18bfd41e 	bne	r3,r2,16728 <altera_avalon_jtag_uart_irq+0x188>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   167d8:	e0bff317 	ldw	r2,-52(fp)
   167dc:	103f7b26 	beq	r2,zero,165cc <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   167e0:	e0bff417 	ldw	r2,-48(fp)
   167e4:	10c00817 	ldw	r3,32(r2)
   167e8:	00bfff44 	movi	r2,-3
   167ec:	1886703a 	and	r3,r3,r2
   167f0:	e0bff417 	ldw	r2,-48(fp)
   167f4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   167f8:	e0bff417 	ldw	r2,-48(fp)
   167fc:	10800017 	ldw	r2,0(r2)
   16800:	10800104 	addi	r2,r2,4
   16804:	1007883a 	mov	r3,r2
   16808:	e0bff417 	ldw	r2,-48(fp)
   1680c:	10800817 	ldw	r2,32(r2)
   16810:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   16814:	e0bff517 	ldw	r2,-44(fp)
   16818:	10800104 	addi	r2,r2,4
   1681c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   16820:	003f6a06 	br	165cc <altera_avalon_jtag_uart_irq+0x2c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   16824:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   16828:	0001883a 	nop
   1682c:	e037883a 	mov	sp,fp
   16830:	dfc00117 	ldw	ra,4(sp)
   16834:	df000017 	ldw	fp,0(sp)
   16838:	dec00204 	addi	sp,sp,8
   1683c:	f800283a 	ret

00016840 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   16840:	defff804 	addi	sp,sp,-32
   16844:	dfc00715 	stw	ra,28(sp)
   16848:	df000615 	stw	fp,24(sp)
   1684c:	df000604 	addi	fp,sp,24
   16850:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   16854:	e0bfff17 	ldw	r2,-4(fp)
   16858:	e0bffa15 	stw	r2,-24(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1685c:	e0bffa17 	ldw	r2,-24(fp)
   16860:	10800017 	ldw	r2,0(r2)
   16864:	10800104 	addi	r2,r2,4
   16868:	10800037 	ldwio	r2,0(r2)
   1686c:	e0bffb15 	stw	r2,-20(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   16870:	e0bffb17 	ldw	r2,-20(fp)
   16874:	1081000c 	andi	r2,r2,1024
   16878:	10000b26 	beq	r2,zero,168a8 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1687c:	e0bffa17 	ldw	r2,-24(fp)
   16880:	10800017 	ldw	r2,0(r2)
   16884:	10800104 	addi	r2,r2,4
   16888:	1007883a 	mov	r3,r2
   1688c:	e0bffa17 	ldw	r2,-24(fp)
   16890:	10800817 	ldw	r2,32(r2)
   16894:	10810014 	ori	r2,r2,1024
   16898:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   1689c:	e0bffa17 	ldw	r2,-24(fp)
   168a0:	10000915 	stw	zero,36(r2)
   168a4:	00002006 	br	16928 <altera_avalon_jtag_uart_timeout+0xe8>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   168a8:	e0bffa17 	ldw	r2,-24(fp)
   168ac:	10c00917 	ldw	r3,36(r2)
   168b0:	00a00034 	movhi	r2,32768
   168b4:	10bfff04 	addi	r2,r2,-4
   168b8:	10c01b36 	bltu	r2,r3,16928 <altera_avalon_jtag_uart_timeout+0xe8>
    sp->host_inactive++;
   168bc:	e0bffa17 	ldw	r2,-24(fp)
   168c0:	10800917 	ldw	r2,36(r2)
   168c4:	10c00044 	addi	r3,r2,1
   168c8:	e0bffa17 	ldw	r2,-24(fp)
   168cc:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   168d0:	e0bffa17 	ldw	r2,-24(fp)
   168d4:	10c00917 	ldw	r3,36(r2)
   168d8:	e0bffa17 	ldw	r2,-24(fp)
   168dc:	10800117 	ldw	r2,4(r2)
   168e0:	18801136 	bltu	r3,r2,16928 <altera_avalon_jtag_uart_timeout+0xe8>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   168e4:	e0bffa17 	ldw	r2,-24(fp)
   168e8:	10800c17 	ldw	r2,48(r2)
   168ec:	e0bffc15 	stw	r2,-16(fp)
   168f0:	00800104 	movi	r2,4
   168f4:	e0bffd15 	stw	r2,-12(fp)
   168f8:	00800044 	movi	r2,1
   168fc:	e0bffe05 	stb	r2,-8(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   16900:	d0a7f143 	ldbu	r2,-24635(gp)
   16904:	10803fcc 	andi	r2,r2,255
   16908:	10000726 	beq	r2,zero,16928 <altera_avalon_jtag_uart_timeout+0xe8>
  {
    OSFlagPost (group, flags, opt, &err);
   1690c:	e0bffe03 	ldbu	r2,-8(fp)
   16910:	e0fffe44 	addi	r3,fp,-7
   16914:	180f883a 	mov	r7,r3
   16918:	100d883a 	mov	r6,r2
   1691c:	e17ffd17 	ldw	r5,-12(fp)
   16920:	e13ffc17 	ldw	r4,-16(fp)
   16924:	001121c0 	call	1121c <OSFlagPost>
   16928:	d0a80617 	ldw	r2,-24552(gp)
    }
  }

  return alt_ticks_per_second();
}
   1692c:	e037883a 	mov	sp,fp
   16930:	dfc00117 	ldw	ra,4(sp)
   16934:	df000017 	ldw	fp,0(sp)
   16938:	dec00204 	addi	sp,sp,8
   1693c:	f800283a 	ret

00016940 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   16940:	defffd04 	addi	sp,sp,-12
   16944:	df000215 	stw	fp,8(sp)
   16948:	df000204 	addi	fp,sp,8
   1694c:	e13ffe15 	stw	r4,-8(fp)
   16950:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   16954:	00000506 	br	1696c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   16958:	e0bfff17 	ldw	r2,-4(fp)
   1695c:	1090000c 	andi	r2,r2,16384
   16960:	10000226 	beq	r2,zero,1696c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   16964:	00bffd44 	movi	r2,-11
   16968:	00000b06 	br	16998 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1696c:	e0bffe17 	ldw	r2,-8(fp)
   16970:	10c01017 	ldw	r3,64(r2)
   16974:	e0bffe17 	ldw	r2,-8(fp)
   16978:	10800f17 	ldw	r2,60(r2)
   1697c:	18800526 	beq	r3,r2,16994 <altera_avalon_jtag_uart_close+0x54>
   16980:	e0bffe17 	ldw	r2,-8(fp)
   16984:	10c00917 	ldw	r3,36(r2)
   16988:	e0bffe17 	ldw	r2,-8(fp)
   1698c:	10800117 	ldw	r2,4(r2)
   16990:	18bff136 	bltu	r3,r2,16958 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   16994:	0005883a 	mov	r2,zero
}
   16998:	e037883a 	mov	sp,fp
   1699c:	df000017 	ldw	fp,0(sp)
   169a0:	dec00104 	addi	sp,sp,4
   169a4:	f800283a 	ret

000169a8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   169a8:	defffa04 	addi	sp,sp,-24
   169ac:	df000515 	stw	fp,20(sp)
   169b0:	df000504 	addi	fp,sp,20
   169b4:	e13ffd15 	stw	r4,-12(fp)
   169b8:	e17ffe15 	stw	r5,-8(fp)
   169bc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   169c0:	00bff9c4 	movi	r2,-25
   169c4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   169c8:	e0bffe17 	ldw	r2,-8(fp)
   169cc:	10da8060 	cmpeqi	r3,r2,27137
   169d0:	1800031e 	bne	r3,zero,169e0 <altera_avalon_jtag_uart_ioctl+0x38>
   169d4:	109a80a0 	cmpeqi	r2,r2,27138
   169d8:	1000181e 	bne	r2,zero,16a3c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   169dc:	00002906 	br	16a84 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   169e0:	e0bffd17 	ldw	r2,-12(fp)
   169e4:	10c00117 	ldw	r3,4(r2)
   169e8:	00a00034 	movhi	r2,32768
   169ec:	10bfffc4 	addi	r2,r2,-1
   169f0:	18802126 	beq	r3,r2,16a78 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   169f4:	e0bfff17 	ldw	r2,-4(fp)
   169f8:	10800017 	ldw	r2,0(r2)
   169fc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   16a00:	e0bffc17 	ldw	r2,-16(fp)
   16a04:	10800090 	cmplti	r2,r2,2
   16a08:	1000061e 	bne	r2,zero,16a24 <altera_avalon_jtag_uart_ioctl+0x7c>
   16a0c:	e0fffc17 	ldw	r3,-16(fp)
   16a10:	00a00034 	movhi	r2,32768
   16a14:	10bfffc4 	addi	r2,r2,-1
   16a18:	18800226 	beq	r3,r2,16a24 <altera_avalon_jtag_uart_ioctl+0x7c>
   16a1c:	e0bffc17 	ldw	r2,-16(fp)
   16a20:	00000206 	br	16a2c <altera_avalon_jtag_uart_ioctl+0x84>
   16a24:	00a00034 	movhi	r2,32768
   16a28:	10bfff84 	addi	r2,r2,-2
   16a2c:	e0fffd17 	ldw	r3,-12(fp)
   16a30:	18800115 	stw	r2,4(r3)
      rc = 0;
   16a34:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   16a38:	00000f06 	br	16a78 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   16a3c:	e0bffd17 	ldw	r2,-12(fp)
   16a40:	10c00117 	ldw	r3,4(r2)
   16a44:	00a00034 	movhi	r2,32768
   16a48:	10bfffc4 	addi	r2,r2,-1
   16a4c:	18800c26 	beq	r3,r2,16a80 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   16a50:	e0bffd17 	ldw	r2,-12(fp)
   16a54:	10c00917 	ldw	r3,36(r2)
   16a58:	e0bffd17 	ldw	r2,-12(fp)
   16a5c:	10800117 	ldw	r2,4(r2)
   16a60:	1885803a 	cmpltu	r2,r3,r2
   16a64:	10c03fcc 	andi	r3,r2,255
   16a68:	e0bfff17 	ldw	r2,-4(fp)
   16a6c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   16a70:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   16a74:	00000206 	br	16a80 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   16a78:	0001883a 	nop
   16a7c:	00000106 	br	16a84 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   16a80:	0001883a 	nop

  default:
    break;
  }

  return rc;
   16a84:	e0bffb17 	ldw	r2,-20(fp)
}
   16a88:	e037883a 	mov	sp,fp
   16a8c:	df000017 	ldw	fp,0(sp)
   16a90:	dec00104 	addi	sp,sp,4
   16a94:	f800283a 	ret

00016a98 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   16a98:	deffec04 	addi	sp,sp,-80
   16a9c:	dfc01315 	stw	ra,76(sp)
   16aa0:	df001215 	stw	fp,72(sp)
   16aa4:	df001204 	addi	fp,sp,72
   16aa8:	e13ffc15 	stw	r4,-16(fp)
   16aac:	e17ffd15 	stw	r5,-12(fp)
   16ab0:	e1bffe15 	stw	r6,-8(fp)
   16ab4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   16ab8:	e0bffd17 	ldw	r2,-12(fp)
   16abc:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   16ac0:	e0bffc17 	ldw	r2,-16(fp)
   16ac4:	10800a17 	ldw	r2,40(r2)
   16ac8:	e0bff715 	stw	r2,-36(fp)
   16acc:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   16ad0:	e0bff80b 	ldhu	r2,-32(fp)
   16ad4:	e0fffb04 	addi	r3,fp,-20
   16ad8:	180d883a 	mov	r6,r3
   16adc:	100b883a 	mov	r5,r2
   16ae0:	e13ff717 	ldw	r4,-36(fp)
   16ae4:	00136340 	call	13634 <OSSemPend>

  while (space > 0)
   16ae8:	00006006 	br	16c6c <altera_avalon_jtag_uart_read+0x1d4>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   16aec:	e0bffc17 	ldw	r2,-16(fp)
   16af0:	10800d17 	ldw	r2,52(r2)
   16af4:	e0bff215 	stw	r2,-56(fp)
      out = sp->rx_out;
   16af8:	e0bffc17 	ldw	r2,-16(fp)
   16afc:	10800e17 	ldw	r2,56(r2)
   16b00:	e0bff315 	stw	r2,-52(fp)

      if (in >= out)
   16b04:	e0fff217 	ldw	r3,-56(fp)
   16b08:	e0bff317 	ldw	r2,-52(fp)
   16b0c:	18800536 	bltu	r3,r2,16b24 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   16b10:	e0fff217 	ldw	r3,-56(fp)
   16b14:	e0bff317 	ldw	r2,-52(fp)
   16b18:	1885c83a 	sub	r2,r3,r2
   16b1c:	e0bff015 	stw	r2,-64(fp)
   16b20:	00000406 	br	16b34 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   16b24:	00c20004 	movi	r3,2048
   16b28:	e0bff317 	ldw	r2,-52(fp)
   16b2c:	1885c83a 	sub	r2,r3,r2
   16b30:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
   16b34:	e0bff017 	ldw	r2,-64(fp)
   16b38:	10001e26 	beq	r2,zero,16bb4 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   16b3c:	e0fffe17 	ldw	r3,-8(fp)
   16b40:	e0bff017 	ldw	r2,-64(fp)
   16b44:	1880022e 	bgeu	r3,r2,16b50 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
   16b48:	e0bffe17 	ldw	r2,-8(fp)
   16b4c:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   16b50:	e0bffc17 	ldw	r2,-16(fp)
   16b54:	10c01104 	addi	r3,r2,68
   16b58:	e0bff317 	ldw	r2,-52(fp)
   16b5c:	1885883a 	add	r2,r3,r2
   16b60:	e1bff017 	ldw	r6,-64(fp)
   16b64:	100b883a 	mov	r5,r2
   16b68:	e13fef17 	ldw	r4,-68(fp)
   16b6c:	000674c0 	call	674c <memcpy>
      ptr   += n;
   16b70:	e0ffef17 	ldw	r3,-68(fp)
   16b74:	e0bff017 	ldw	r2,-64(fp)
   16b78:	1885883a 	add	r2,r3,r2
   16b7c:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
   16b80:	e0fffe17 	ldw	r3,-8(fp)
   16b84:	e0bff017 	ldw	r2,-64(fp)
   16b88:	1885c83a 	sub	r2,r3,r2
   16b8c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16b90:	e0fff317 	ldw	r3,-52(fp)
   16b94:	e0bff017 	ldw	r2,-64(fp)
   16b98:	1885883a 	add	r2,r3,r2
   16b9c:	10c1ffcc 	andi	r3,r2,2047
   16ba0:	e0bffc17 	ldw	r2,-16(fp)
   16ba4:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   16ba8:	e0bffe17 	ldw	r2,-8(fp)
   16bac:	00bfcf16 	blt	zero,r2,16aec <altera_avalon_jtag_uart_read+0x54>
   16bb0:	00000106 	br	16bb8 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   16bb4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   16bb8:	e0ffef17 	ldw	r3,-68(fp)
   16bbc:	e0bffd17 	ldw	r2,-12(fp)
   16bc0:	18802d1e 	bne	r3,r2,16c78 <altera_avalon_jtag_uart_read+0x1e0>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   16bc4:	e0bfff17 	ldw	r2,-4(fp)
   16bc8:	1090000c 	andi	r2,r2,16384
   16bcc:	10002c1e 	bne	r2,zero,16c80 <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   16bd0:	d0a7f143 	ldbu	r2,-24635(gp)
   16bd4:	10803fcc 	andi	r2,r2,255
   16bd8:	10800058 	cmpnei	r2,r2,1
   16bdc:	1000151e 	bne	r2,zero,16c34 <altera_avalon_jtag_uart_read+0x19c>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   16be0:	e0bffc17 	ldw	r2,-16(fp)
   16be4:	10800c17 	ldw	r2,48(r2)
   16be8:	e0bff115 	stw	r2,-60(fp)
   16bec:	00800144 	movi	r2,5
   16bf0:	e0bff915 	stw	r2,-28(fp)
   16bf4:	00bfe0c4 	movi	r2,-125
   16bf8:	e0bffa05 	stb	r2,-24(fp)
   16bfc:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   16c00:	d0a7f143 	ldbu	r2,-24635(gp)
   16c04:	10803fcc 	andi	r2,r2,255
   16c08:	10001426 	beq	r2,zero,16c5c <altera_avalon_jtag_uart_read+0x1c4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   16c0c:	e0fffa03 	ldbu	r3,-24(fp)
   16c10:	e13ffa8b 	ldhu	r4,-22(fp)
   16c14:	e0bffb44 	addi	r2,fp,-19
   16c18:	d8800015 	stw	r2,0(sp)
   16c1c:	200f883a 	mov	r7,r4
   16c20:	180d883a 	mov	r6,r3
   16c24:	e17ff917 	ldw	r5,-28(fp)
   16c28:	e13ff117 	ldw	r4,-60(fp)
   16c2c:	0010c440 	call	10c44 <OSFlagPend>
   16c30:	00000a06 	br	16c5c <altera_avalon_jtag_uart_read+0x1c4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   16c34:	0001883a 	nop
   16c38:	e0bffc17 	ldw	r2,-16(fp)
   16c3c:	10c00d17 	ldw	r3,52(r2)
   16c40:	e0bff217 	ldw	r2,-56(fp)
   16c44:	1880051e 	bne	r3,r2,16c5c <altera_avalon_jtag_uart_read+0x1c4>
   16c48:	e0bffc17 	ldw	r2,-16(fp)
   16c4c:	10c00917 	ldw	r3,36(r2)
   16c50:	e0bffc17 	ldw	r2,-16(fp)
   16c54:	10800117 	ldw	r2,4(r2)
   16c58:	18bff736 	bltu	r3,r2,16c38 <altera_avalon_jtag_uart_read+0x1a0>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   16c5c:	e0bffc17 	ldw	r2,-16(fp)
   16c60:	10c00d17 	ldw	r3,52(r2)
   16c64:	e0bff217 	ldw	r2,-56(fp)
   16c68:	18800726 	beq	r3,r2,16c88 <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   16c6c:	e0bffe17 	ldw	r2,-8(fp)
   16c70:	00bf9e16 	blt	zero,r2,16aec <altera_avalon_jtag_uart_read+0x54>
   16c74:	00000506 	br	16c8c <altera_avalon_jtag_uart_read+0x1f4>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   16c78:	0001883a 	nop
   16c7c:	00000306 	br	16c8c <altera_avalon_jtag_uart_read+0x1f4>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   16c80:	0001883a 	nop
   16c84:	00000106 	br	16c8c <altera_avalon_jtag_uart_read+0x1f4>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   16c88:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   16c8c:	e0bffc17 	ldw	r2,-16(fp)
   16c90:	10800a17 	ldw	r2,40(r2)
   16c94:	1009883a 	mov	r4,r2
   16c98:	00139ac0 	call	139ac <OSSemPost>

  if (ptr != buffer)
   16c9c:	e0ffef17 	ldw	r3,-68(fp)
   16ca0:	e0bffd17 	ldw	r2,-12(fp)
   16ca4:	18801826 	beq	r3,r2,16d08 <altera_avalon_jtag_uart_read+0x270>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16ca8:	0005303a 	rdctl	r2,status
   16cac:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16cb0:	e0fff617 	ldw	r3,-40(fp)
   16cb4:	00bfff84 	movi	r2,-2
   16cb8:	1884703a 	and	r2,r3,r2
   16cbc:	1001703a 	wrctl	status,r2
  
  return context;
   16cc0:	e0bff617 	ldw	r2,-40(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   16cc4:	e0bff515 	stw	r2,-44(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   16cc8:	e0bffc17 	ldw	r2,-16(fp)
   16ccc:	10800817 	ldw	r2,32(r2)
   16cd0:	10c00054 	ori	r3,r2,1
   16cd4:	e0bffc17 	ldw	r2,-16(fp)
   16cd8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   16cdc:	e0bffc17 	ldw	r2,-16(fp)
   16ce0:	10800017 	ldw	r2,0(r2)
   16ce4:	10800104 	addi	r2,r2,4
   16ce8:	1007883a 	mov	r3,r2
   16cec:	e0bffc17 	ldw	r2,-16(fp)
   16cf0:	10800817 	ldw	r2,32(r2)
   16cf4:	18800035 	stwio	r2,0(r3)
   16cf8:	e0bff517 	ldw	r2,-44(fp)
   16cfc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16d00:	e0bff417 	ldw	r2,-48(fp)
   16d04:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   16d08:	e0ffef17 	ldw	r3,-68(fp)
   16d0c:	e0bffd17 	ldw	r2,-12(fp)
   16d10:	18800426 	beq	r3,r2,16d24 <altera_avalon_jtag_uart_read+0x28c>
    return ptr - buffer;
   16d14:	e0ffef17 	ldw	r3,-68(fp)
   16d18:	e0bffd17 	ldw	r2,-12(fp)
   16d1c:	1885c83a 	sub	r2,r3,r2
   16d20:	00000606 	br	16d3c <altera_avalon_jtag_uart_read+0x2a4>
  else if (flags & O_NONBLOCK)
   16d24:	e0bfff17 	ldw	r2,-4(fp)
   16d28:	1090000c 	andi	r2,r2,16384
   16d2c:	10000226 	beq	r2,zero,16d38 <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
   16d30:	00bffd44 	movi	r2,-11
   16d34:	00000106 	br	16d3c <altera_avalon_jtag_uart_read+0x2a4>
  else
    return -EIO;
   16d38:	00bffec4 	movi	r2,-5
}
   16d3c:	e037883a 	mov	sp,fp
   16d40:	dfc00117 	ldw	ra,4(sp)
   16d44:	df000017 	ldw	fp,0(sp)
   16d48:	dec00204 	addi	sp,sp,8
   16d4c:	f800283a 	ret

00016d50 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   16d50:	deffec04 	addi	sp,sp,-80
   16d54:	dfc01315 	stw	ra,76(sp)
   16d58:	df001215 	stw	fp,72(sp)
   16d5c:	df001204 	addi	fp,sp,72
   16d60:	e13ffc15 	stw	r4,-16(fp)
   16d64:	e17ffd15 	stw	r5,-12(fp)
   16d68:	e1bffe15 	stw	r6,-8(fp)
   16d6c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   16d70:	e03fef15 	stw	zero,-68(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   16d74:	e0bffd17 	ldw	r2,-12(fp)
   16d78:	e0bff115 	stw	r2,-60(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   16d7c:	e0bffc17 	ldw	r2,-16(fp)
   16d80:	10800b17 	ldw	r2,44(r2)
   16d84:	e0bff715 	stw	r2,-36(fp)
   16d88:	e03ff80d 	sth	zero,-32(fp)
   16d8c:	e0bff80b 	ldhu	r2,-32(fp)
   16d90:	e0fffb44 	addi	r3,fp,-19
   16d94:	180d883a 	mov	r6,r3
   16d98:	100b883a 	mov	r5,r2
   16d9c:	e13ff717 	ldw	r4,-36(fp)
   16da0:	00136340 	call	13634 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   16da4:	00003706 	br	16e84 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   16da8:	e0bffc17 	ldw	r2,-16(fp)
   16dac:	10800f17 	ldw	r2,60(r2)
   16db0:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
   16db4:	e0bffc17 	ldw	r2,-16(fp)
   16db8:	10801017 	ldw	r2,64(r2)
   16dbc:	e0bfef15 	stw	r2,-68(fp)

      if (in < out)
   16dc0:	e0fff317 	ldw	r3,-52(fp)
   16dc4:	e0bfef17 	ldw	r2,-68(fp)
   16dc8:	1880062e 	bgeu	r3,r2,16de4 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   16dcc:	e0ffef17 	ldw	r3,-68(fp)
   16dd0:	e0bff317 	ldw	r2,-52(fp)
   16dd4:	1885c83a 	sub	r2,r3,r2
   16dd8:	10bfffc4 	addi	r2,r2,-1
   16ddc:	e0bff015 	stw	r2,-64(fp)
   16de0:	00000b06 	br	16e10 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   16de4:	e0bfef17 	ldw	r2,-68(fp)
   16de8:	10000526 	beq	r2,zero,16e00 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   16dec:	00c20004 	movi	r3,2048
   16df0:	e0bff317 	ldw	r2,-52(fp)
   16df4:	1885c83a 	sub	r2,r3,r2
   16df8:	e0bff015 	stw	r2,-64(fp)
   16dfc:	00000406 	br	16e10 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   16e00:	00c1ffc4 	movi	r3,2047
   16e04:	e0bff317 	ldw	r2,-52(fp)
   16e08:	1885c83a 	sub	r2,r3,r2
   16e0c:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
   16e10:	e0bff017 	ldw	r2,-64(fp)
   16e14:	10001e26 	beq	r2,zero,16e90 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
   16e18:	e0fffe17 	ldw	r3,-8(fp)
   16e1c:	e0bff017 	ldw	r2,-64(fp)
   16e20:	1880022e 	bgeu	r3,r2,16e2c <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   16e24:	e0bffe17 	ldw	r2,-8(fp)
   16e28:	e0bff015 	stw	r2,-64(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   16e2c:	e0bffc17 	ldw	r2,-16(fp)
   16e30:	10c21104 	addi	r3,r2,2116
   16e34:	e0bff317 	ldw	r2,-52(fp)
   16e38:	1885883a 	add	r2,r3,r2
   16e3c:	e1bff017 	ldw	r6,-64(fp)
   16e40:	e17ffd17 	ldw	r5,-12(fp)
   16e44:	1009883a 	mov	r4,r2
   16e48:	000674c0 	call	674c <memcpy>
      ptr   += n;
   16e4c:	e0fffd17 	ldw	r3,-12(fp)
   16e50:	e0bff017 	ldw	r2,-64(fp)
   16e54:	1885883a 	add	r2,r3,r2
   16e58:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   16e5c:	e0fffe17 	ldw	r3,-8(fp)
   16e60:	e0bff017 	ldw	r2,-64(fp)
   16e64:	1885c83a 	sub	r2,r3,r2
   16e68:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16e6c:	e0fff317 	ldw	r3,-52(fp)
   16e70:	e0bff017 	ldw	r2,-64(fp)
   16e74:	1885883a 	add	r2,r3,r2
   16e78:	10c1ffcc 	andi	r3,r2,2047
   16e7c:	e0bffc17 	ldw	r2,-16(fp)
   16e80:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   16e84:	e0bffe17 	ldw	r2,-8(fp)
   16e88:	00bfc716 	blt	zero,r2,16da8 <altera_avalon_jtag_uart_write+0x58>
   16e8c:	00000106 	br	16e94 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   16e90:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16e94:	0005303a 	rdctl	r2,status
   16e98:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16e9c:	e0fff617 	ldw	r3,-40(fp)
   16ea0:	00bfff84 	movi	r2,-2
   16ea4:	1884703a 	and	r2,r3,r2
   16ea8:	1001703a 	wrctl	status,r2
  
  return context;
   16eac:	e0bff617 	ldw	r2,-40(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   16eb0:	e0bff515 	stw	r2,-44(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   16eb4:	e0bffc17 	ldw	r2,-16(fp)
   16eb8:	10800817 	ldw	r2,32(r2)
   16ebc:	10c00094 	ori	r3,r2,2
   16ec0:	e0bffc17 	ldw	r2,-16(fp)
   16ec4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   16ec8:	e0bffc17 	ldw	r2,-16(fp)
   16ecc:	10800017 	ldw	r2,0(r2)
   16ed0:	10800104 	addi	r2,r2,4
   16ed4:	1007883a 	mov	r3,r2
   16ed8:	e0bffc17 	ldw	r2,-16(fp)
   16edc:	10800817 	ldw	r2,32(r2)
   16ee0:	18800035 	stwio	r2,0(r3)
   16ee4:	e0bff517 	ldw	r2,-44(fp)
   16ee8:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16eec:	e0bff217 	ldw	r2,-56(fp)
   16ef0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   16ef4:	e0bffe17 	ldw	r2,-8(fp)
   16ef8:	0080290e 	bge	zero,r2,16fa0 <altera_avalon_jtag_uart_write+0x250>
    {
      if (flags & O_NONBLOCK)
   16efc:	e0bfff17 	ldw	r2,-4(fp)
   16f00:	1090000c 	andi	r2,r2,16384
   16f04:	1000291e 	bne	r2,zero,16fac <altera_avalon_jtag_uart_write+0x25c>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   16f08:	d0a7f143 	ldbu	r2,-24635(gp)
   16f0c:	10803fcc 	andi	r2,r2,255
   16f10:	10800058 	cmpnei	r2,r2,1
   16f14:	1000151e 	bne	r2,zero,16f6c <altera_avalon_jtag_uart_write+0x21c>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   16f18:	e0bffc17 	ldw	r2,-16(fp)
   16f1c:	10800c17 	ldw	r2,48(r2)
   16f20:	e0bff415 	stw	r2,-48(fp)
   16f24:	00800184 	movi	r2,6
   16f28:	e0bff915 	stw	r2,-28(fp)
   16f2c:	00bfe0c4 	movi	r2,-125
   16f30:	e0bffa05 	stb	r2,-24(fp)
   16f34:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   16f38:	d0a7f143 	ldbu	r2,-24635(gp)
   16f3c:	10803fcc 	andi	r2,r2,255
   16f40:	10001426 	beq	r2,zero,16f94 <altera_avalon_jtag_uart_write+0x244>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   16f44:	e0fffa03 	ldbu	r3,-24(fp)
   16f48:	e13ffa8b 	ldhu	r4,-22(fp)
   16f4c:	e0bffb04 	addi	r2,fp,-20
   16f50:	d8800015 	stw	r2,0(sp)
   16f54:	200f883a 	mov	r7,r4
   16f58:	180d883a 	mov	r6,r3
   16f5c:	e17ff917 	ldw	r5,-28(fp)
   16f60:	e13ff417 	ldw	r4,-48(fp)
   16f64:	0010c440 	call	10c44 <OSFlagPend>
   16f68:	00000a06 	br	16f94 <altera_avalon_jtag_uart_write+0x244>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   16f6c:	0001883a 	nop
   16f70:	e0bffc17 	ldw	r2,-16(fp)
   16f74:	10c01017 	ldw	r3,64(r2)
   16f78:	e0bfef17 	ldw	r2,-68(fp)
   16f7c:	1880051e 	bne	r3,r2,16f94 <altera_avalon_jtag_uart_write+0x244>
   16f80:	e0bffc17 	ldw	r2,-16(fp)
   16f84:	10c00917 	ldw	r3,36(r2)
   16f88:	e0bffc17 	ldw	r2,-16(fp)
   16f8c:	10800117 	ldw	r2,4(r2)
   16f90:	18bff736 	bltu	r3,r2,16f70 <altera_avalon_jtag_uart_write+0x220>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   16f94:	e0bffc17 	ldw	r2,-16(fp)
   16f98:	10800917 	ldw	r2,36(r2)
   16f9c:	1000051e 	bne	r2,zero,16fb4 <altera_avalon_jtag_uart_write+0x264>
         break;
    }
  }
  while (count > 0);
   16fa0:	e0bffe17 	ldw	r2,-8(fp)
   16fa4:	00bfb716 	blt	zero,r2,16e84 <altera_avalon_jtag_uart_write+0x134>
   16fa8:	00000306 	br	16fb8 <altera_avalon_jtag_uart_write+0x268>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   16fac:	0001883a 	nop
   16fb0:	00000106 	br	16fb8 <altera_avalon_jtag_uart_write+0x268>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   16fb4:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   16fb8:	e0bffc17 	ldw	r2,-16(fp)
   16fbc:	10800b17 	ldw	r2,44(r2)
   16fc0:	1009883a 	mov	r4,r2
   16fc4:	00139ac0 	call	139ac <OSSemPost>

  if (ptr != start)
   16fc8:	e0fffd17 	ldw	r3,-12(fp)
   16fcc:	e0bff117 	ldw	r2,-60(fp)
   16fd0:	18800426 	beq	r3,r2,16fe4 <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
   16fd4:	e0fffd17 	ldw	r3,-12(fp)
   16fd8:	e0bff117 	ldw	r2,-60(fp)
   16fdc:	1885c83a 	sub	r2,r3,r2
   16fe0:	00000606 	br	16ffc <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
   16fe4:	e0bfff17 	ldw	r2,-4(fp)
   16fe8:	1090000c 	andi	r2,r2,16384
   16fec:	10000226 	beq	r2,zero,16ff8 <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
   16ff0:	00bffd44 	movi	r2,-11
   16ff4:	00000106 	br	16ffc <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   16ff8:	00bffec4 	movi	r2,-5
}
   16ffc:	e037883a 	mov	sp,fp
   17000:	dfc00117 	ldw	ra,4(sp)
   17004:	df000017 	ldw	fp,0(sp)
   17008:	dec00204 	addi	sp,sp,8
   1700c:	f800283a 	ret

00017010 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   17010:	defff904 	addi	sp,sp,-28
   17014:	dfc00615 	stw	ra,24(sp)
   17018:	df000515 	stw	fp,20(sp)
   1701c:	df000504 	addi	fp,sp,20
   17020:	e13ffe15 	stw	r4,-8(fp)
   17024:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   17028:	0007883a 	mov	r3,zero
   1702c:	e0bffe17 	ldw	r2,-8(fp)
   17030:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   17034:	e0bffe17 	ldw	r2,-8(fp)
   17038:	10800104 	addi	r2,r2,4
   1703c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17040:	0005303a 	rdctl	r2,status
   17044:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17048:	e0fffc17 	ldw	r3,-16(fp)
   1704c:	00bfff84 	movi	r2,-2
   17050:	1884703a 	and	r2,r3,r2
   17054:	1001703a 	wrctl	status,r2
  
  return context;
   17058:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1705c:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   17060:	0018d200 	call	18d20 <alt_tick>
   17064:	e0bffb17 	ldw	r2,-20(fp)
   17068:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1706c:	e0bffd17 	ldw	r2,-12(fp)
   17070:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   17074:	0001883a 	nop
   17078:	e037883a 	mov	sp,fp
   1707c:	dfc00117 	ldw	ra,4(sp)
   17080:	df000017 	ldw	fp,0(sp)
   17084:	dec00204 	addi	sp,sp,8
   17088:	f800283a 	ret

0001708c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1708c:	defff904 	addi	sp,sp,-28
   17090:	dfc00615 	stw	ra,24(sp)
   17094:	df000515 	stw	fp,20(sp)
   17098:	df000504 	addi	fp,sp,20
   1709c:	e13ffc15 	stw	r4,-16(fp)
   170a0:	e17ffd15 	stw	r5,-12(fp)
   170a4:	e1bffe15 	stw	r6,-8(fp)
   170a8:	e1ffff15 	stw	r7,-4(fp)
   170ac:	e0bfff17 	ldw	r2,-4(fp)
   170b0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   170b4:	d0a80617 	ldw	r2,-24552(gp)
   170b8:	1000021e 	bne	r2,zero,170c4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   170bc:	e0bffb17 	ldw	r2,-20(fp)
   170c0:	d0a80615 	stw	r2,-24552(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   170c4:	e0bffc17 	ldw	r2,-16(fp)
   170c8:	10800104 	addi	r2,r2,4
   170cc:	00c001c4 	movi	r3,7
   170d0:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   170d4:	01800074 	movhi	r6,1
   170d8:	319c0404 	addi	r6,r6,28688
   170dc:	e17ffc17 	ldw	r5,-16(fp)
   170e0:	e13ffe17 	ldw	r4,-8(fp)
   170e4:	00188b00 	call	188b0 <alt_irq_register>
#endif  
}
   170e8:	0001883a 	nop
   170ec:	e037883a 	mov	sp,fp
   170f0:	dfc00117 	ldw	ra,4(sp)
   170f4:	df000017 	ldw	fp,0(sp)
   170f8:	dec00204 	addi	sp,sp,8
   170fc:	f800283a 	ret

00017100 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   17100:	defffc04 	addi	sp,sp,-16
   17104:	df000315 	stw	fp,12(sp)
   17108:	df000304 	addi	fp,sp,12
   1710c:	e13ffe15 	stw	r4,-8(fp)
   17110:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   17114:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   17118:	e0bfff17 	ldw	r2,-4(fp)
   1711c:	1000061e 	bne	r2,zero,17138 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   17120:	e0bffe17 	ldw	r2,-8(fp)
   17124:	1007883a 	mov	r3,r2
   17128:	e0bffd03 	ldbu	r2,-12(fp)
   1712c:	1884b03a 	or	r2,r3,r2
   17130:	e0bffd05 	stb	r2,-12(fp)
   17134:	00000806 	br	17158 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   17138:	e0bffe17 	ldw	r2,-8(fp)
   1713c:	1007883a 	mov	r3,r2
   17140:	e0bffd03 	ldbu	r2,-12(fp)
   17144:	1884b03a 	or	r2,r3,r2
   17148:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   1714c:	e0bffd03 	ldbu	r2,-12(fp)
   17150:	10801014 	ori	r2,r2,64
   17154:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   17158:	e0fffd03 	ldbu	r3,-12(fp)
   1715c:	00bfe004 	movi	r2,-128
   17160:	1884b03a 	or	r2,r3,r2
}
   17164:	e037883a 	mov	sp,fp
   17168:	df000017 	ldw	fp,0(sp)
   1716c:	dec00104 	addi	sp,sp,4
   17170:	f800283a 	ret

00017174 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   17174:	defffd04 	addi	sp,sp,-12
   17178:	df000215 	stw	fp,8(sp)
   1717c:	df000204 	addi	fp,sp,8
   17180:	e13ffe15 	stw	r4,-8(fp)
   17184:	2805883a 	mov	r2,r5
   17188:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   1718c:	e0bffe17 	ldw	r2,-8(fp)
   17190:	10800a17 	ldw	r2,40(r2)
   17194:	1007883a 	mov	r3,r2
   17198:	e0bfff03 	ldbu	r2,-4(fp)
   1719c:	18800025 	stbio	r2,0(r3)
}
   171a0:	0001883a 	nop
   171a4:	e037883a 	mov	sp,fp
   171a8:	df000017 	ldw	fp,0(sp)
   171ac:	dec00104 	addi	sp,sp,4
   171b0:	f800283a 	ret

000171b4 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   171b4:	defffe04 	addi	sp,sp,-8
   171b8:	df000115 	stw	fp,4(sp)
   171bc:	df000104 	addi	fp,sp,4
   171c0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   171c4:	e0bfff17 	ldw	r2,-4(fp)
   171c8:	10800a17 	ldw	r2,40(r2)
   171cc:	1007883a 	mov	r3,r2
   171d0:	00800044 	movi	r2,1
   171d4:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   171d8:	0001883a 	nop
   171dc:	e037883a 	mov	sp,fp
   171e0:	df000017 	ldw	fp,0(sp)
   171e4:	dec00104 	addi	sp,sp,4
   171e8:	f800283a 	ret

000171ec <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   171ec:	defffc04 	addi	sp,sp,-16
   171f0:	dfc00315 	stw	ra,12(sp)
   171f4:	df000215 	stw	fp,8(sp)
   171f8:	df000204 	addi	fp,sp,8
   171fc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   17200:	d1600a04 	addi	r5,gp,-32728
   17204:	e13fff17 	ldw	r4,-4(fp)
   17208:	00186ac0 	call	186ac <alt_find_dev>
   1720c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   17210:	e0bffe17 	ldw	r2,-8(fp)
}
   17214:	e037883a 	mov	sp,fp
   17218:	dfc00117 	ldw	ra,4(sp)
   1721c:	df000017 	ldw	fp,0(sp)
   17220:	dec00204 	addi	sp,sp,8
   17224:	f800283a 	ret

00017228 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   17228:	defffb04 	addi	sp,sp,-20
   1722c:	df000415 	stw	fp,16(sp)
   17230:	df000404 	addi	fp,sp,16
   17234:	e13ffd15 	stw	r4,-12(fp)
   17238:	e17ffe15 	stw	r5,-8(fp)
   1723c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   17240:	e03ffc15 	stw	zero,-16(fp)
   17244:	00000f06 	br	17284 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   17248:	e0bffd17 	ldw	r2,-12(fp)
   1724c:	10800a17 	ldw	r2,40(r2)
   17250:	10800044 	addi	r2,r2,1
   17254:	1009883a 	mov	r4,r2
   17258:	e0fffe17 	ldw	r3,-8(fp)
   1725c:	e0bffc17 	ldw	r2,-16(fp)
   17260:	1885883a 	add	r2,r3,r2
   17264:	10800003 	ldbu	r2,0(r2)
   17268:	10803fcc 	andi	r2,r2,255
   1726c:	1080201c 	xori	r2,r2,128
   17270:	10bfe004 	addi	r2,r2,-128
   17274:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   17278:	e0bffc17 	ldw	r2,-16(fp)
   1727c:	10800044 	addi	r2,r2,1
   17280:	e0bffc15 	stw	r2,-16(fp)
   17284:	e0fffc17 	ldw	r3,-16(fp)
   17288:	e0bfff17 	ldw	r2,-4(fp)
   1728c:	18bfee36 	bltu	r3,r2,17248 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   17290:	0001883a 	nop
   17294:	e037883a 	mov	sp,fp
   17298:	df000017 	ldw	fp,0(sp)
   1729c:	dec00104 	addi	sp,sp,4
   172a0:	f800283a 	ret

000172a4 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   172a4:	defffd04 	addi	sp,sp,-12
   172a8:	df000215 	stw	fp,8(sp)
   172ac:	df000204 	addi	fp,sp,8
   172b0:	e13ffe15 	stw	r4,-8(fp)
   172b4:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   172b8:	00000d06 	br	172f0 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   172bc:	e0bffe17 	ldw	r2,-8(fp)
   172c0:	10800a17 	ldw	r2,40(r2)
   172c4:	10800044 	addi	r2,r2,1
   172c8:	1007883a 	mov	r3,r2
   172cc:	e0bfff17 	ldw	r2,-4(fp)
   172d0:	10800003 	ldbu	r2,0(r2)
   172d4:	10803fcc 	andi	r2,r2,255
   172d8:	1080201c 	xori	r2,r2,128
   172dc:	10bfe004 	addi	r2,r2,-128
   172e0:	18800025 	stbio	r2,0(r3)
		++ptr;
   172e4:	e0bfff17 	ldw	r2,-4(fp)
   172e8:	10800044 	addi	r2,r2,1
   172ec:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   172f0:	e0bfff17 	ldw	r2,-4(fp)
   172f4:	10800003 	ldbu	r2,0(r2)
   172f8:	10803fcc 	andi	r2,r2,255
   172fc:	1080201c 	xori	r2,r2,128
   17300:	10bfe004 	addi	r2,r2,-128
   17304:	103fed1e 	bne	r2,zero,172bc <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   17308:	0001883a 	nop
   1730c:	e037883a 	mov	sp,fp
   17310:	df000017 	ldw	fp,0(sp)
   17314:	dec00104 	addi	sp,sp,4
   17318:	f800283a 	ret

0001731c <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   1731c:	defffb04 	addi	sp,sp,-20
   17320:	dfc00415 	stw	ra,16(sp)
   17324:	df000315 	stw	fp,12(sp)
   17328:	df000304 	addi	fp,sp,12
   1732c:	e13ffd15 	stw	r4,-12(fp)
   17330:	e17ffe15 	stw	r5,-8(fp)
   17334:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   17338:	e0bffd17 	ldw	r2,-12(fp)
   1733c:	10800017 	ldw	r2,0(r2)
   17340:	e0ffff17 	ldw	r3,-4(fp)
   17344:	180d883a 	mov	r6,r3
   17348:	e17ffe17 	ldw	r5,-8(fp)
   1734c:	1009883a 	mov	r4,r2
   17350:	00172280 	call	17228 <alt_up_character_lcd_write>
	return 0;
   17354:	0005883a 	mov	r2,zero
}
   17358:	e037883a 	mov	sp,fp
   1735c:	dfc00117 	ldw	ra,4(sp)
   17360:	df000017 	ldw	fp,0(sp)
   17364:	dec00204 	addi	sp,sp,8
   17368:	f800283a 	ret

0001736c <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   1736c:	defffa04 	addi	sp,sp,-24
   17370:	dfc00515 	stw	ra,20(sp)
   17374:	df000415 	stw	fp,16(sp)
   17378:	df000404 	addi	fp,sp,16
   1737c:	e13ffd15 	stw	r4,-12(fp)
   17380:	e17ffe15 	stw	r5,-8(fp)
   17384:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   17388:	e0bffe17 	ldw	r2,-8(fp)
   1738c:	10800a28 	cmpgeui	r2,r2,40
   17390:	1000031e 	bne	r2,zero,173a0 <alt_up_character_lcd_set_cursor_pos+0x34>
   17394:	e0bfff17 	ldw	r2,-4(fp)
   17398:	108000b0 	cmpltui	r2,r2,2
   1739c:	1000021e 	bne	r2,zero,173a8 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   173a0:	00bfffc4 	movi	r2,-1
   173a4:	00000906 	br	173cc <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   173a8:	e17fff17 	ldw	r5,-4(fp)
   173ac:	e13ffe17 	ldw	r4,-8(fp)
   173b0:	00171000 	call	17100 <get_DDRAM_addr>
   173b4:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   173b8:	e0bffc03 	ldbu	r2,-16(fp)
   173bc:	100b883a 	mov	r5,r2
   173c0:	e13ffd17 	ldw	r4,-12(fp)
   173c4:	00171740 	call	17174 <alt_up_character_lcd_send_cmd>
	return 0;
   173c8:	0005883a 	mov	r2,zero
}
   173cc:	e037883a 	mov	sp,fp
   173d0:	dfc00117 	ldw	ra,4(sp)
   173d4:	df000017 	ldw	fp,0(sp)
   173d8:	dec00204 	addi	sp,sp,8
   173dc:	f800283a 	ret

000173e0 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   173e0:	defffb04 	addi	sp,sp,-20
   173e4:	dfc00415 	stw	ra,16(sp)
   173e8:	df000315 	stw	fp,12(sp)
   173ec:	df000304 	addi	fp,sp,12
   173f0:	e13ffe15 	stw	r4,-8(fp)
   173f4:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   173f8:	e0bfff17 	ldw	r2,-4(fp)
   173fc:	10001526 	beq	r2,zero,17454 <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   17400:	e0bfff17 	ldw	r2,-4(fp)
   17404:	0080020e 	bge	zero,r2,17410 <alt_up_character_lcd_shift_cursor+0x30>
   17408:	00800504 	movi	r2,20
   1740c:	00000106 	br	17414 <alt_up_character_lcd_shift_cursor+0x34>
   17410:	00800404 	movi	r2,16
   17414:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   17418:	e0bfff17 	ldw	r2,-4(fp)
   1741c:	1000010e 	bge	r2,zero,17424 <alt_up_character_lcd_shift_cursor+0x44>
   17420:	0085c83a 	sub	r2,zero,r2
   17424:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   17428:	00000406 	br	1743c <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1742c:	e0bffd43 	ldbu	r2,-11(fp)
   17430:	100b883a 	mov	r5,r2
   17434:	e13ffe17 	ldw	r4,-8(fp)
   17438:	00171740 	call	17174 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1743c:	e0bffd03 	ldbu	r2,-12(fp)
   17440:	10ffffc4 	addi	r3,r2,-1
   17444:	e0fffd05 	stb	r3,-12(fp)
   17448:	10803fcc 	andi	r2,r2,255
   1744c:	103ff71e 	bne	r2,zero,1742c <alt_up_character_lcd_shift_cursor+0x4c>
   17450:	00000106 	br	17458 <alt_up_character_lcd_shift_cursor+0x78>

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   17454:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   17458:	e037883a 	mov	sp,fp
   1745c:	dfc00117 	ldw	ra,4(sp)
   17460:	df000017 	ldw	fp,0(sp)
   17464:	dec00204 	addi	sp,sp,8
   17468:	f800283a 	ret

0001746c <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1746c:	defffb04 	addi	sp,sp,-20
   17470:	dfc00415 	stw	ra,16(sp)
   17474:	df000315 	stw	fp,12(sp)
   17478:	df000304 	addi	fp,sp,12
   1747c:	e13ffe15 	stw	r4,-8(fp)
   17480:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   17484:	e0bfff17 	ldw	r2,-4(fp)
   17488:	10001526 	beq	r2,zero,174e0 <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1748c:	e0bfff17 	ldw	r2,-4(fp)
   17490:	0080020e 	bge	zero,r2,1749c <alt_up_character_lcd_shift_display+0x30>
   17494:	00800704 	movi	r2,28
   17498:	00000106 	br	174a0 <alt_up_character_lcd_shift_display+0x34>
   1749c:	00800604 	movi	r2,24
   174a0:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   174a4:	e0bfff17 	ldw	r2,-4(fp)
   174a8:	1000010e 	bge	r2,zero,174b0 <alt_up_character_lcd_shift_display+0x44>
   174ac:	0085c83a 	sub	r2,zero,r2
   174b0:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   174b4:	00000406 	br	174c8 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   174b8:	e0bffd43 	ldbu	r2,-11(fp)
   174bc:	100b883a 	mov	r5,r2
   174c0:	e13ffe17 	ldw	r4,-8(fp)
   174c4:	00171740 	call	17174 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   174c8:	e0bffd03 	ldbu	r2,-12(fp)
   174cc:	10ffffc4 	addi	r3,r2,-1
   174d0:	e0fffd05 	stb	r3,-12(fp)
   174d4:	10803fcc 	andi	r2,r2,255
   174d8:	103ff71e 	bne	r2,zero,174b8 <alt_up_character_lcd_shift_display+0x4c>
   174dc:	00000106 	br	174e4 <alt_up_character_lcd_shift_display+0x78>

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   174e0:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   174e4:	e037883a 	mov	sp,fp
   174e8:	dfc00117 	ldw	ra,4(sp)
   174ec:	df000017 	ldw	fp,0(sp)
   174f0:	dec00204 	addi	sp,sp,8
   174f4:	f800283a 	ret

000174f8 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   174f8:	defffa04 	addi	sp,sp,-24
   174fc:	dfc00515 	stw	ra,20(sp)
   17500:	df000415 	stw	fp,16(sp)
   17504:	df000404 	addi	fp,sp,16
   17508:	e13ffd15 	stw	r4,-12(fp)
   1750c:	e17ffe15 	stw	r5,-8(fp)
   17510:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   17514:	e0bffe17 	ldw	r2,-8(fp)
   17518:	10800a28 	cmpgeui	r2,r2,40
   1751c:	1000031e 	bne	r2,zero,1752c <alt_up_character_lcd_erase_pos+0x34>
   17520:	e0bfff17 	ldw	r2,-4(fp)
   17524:	108000b0 	cmpltui	r2,r2,2
   17528:	1000021e 	bne	r2,zero,17534 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   1752c:	00bfffc4 	movi	r2,-1
   17530:	00000f06 	br	17570 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   17534:	e17fff17 	ldw	r5,-4(fp)
   17538:	e13ffe17 	ldw	r4,-8(fp)
   1753c:	00171000 	call	17100 <get_DDRAM_addr>
   17540:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   17544:	e0bffc03 	ldbu	r2,-16(fp)
   17548:	100b883a 	mov	r5,r2
   1754c:	e13ffd17 	ldw	r4,-12(fp)
   17550:	00171740 	call	17174 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   17554:	e0bffd17 	ldw	r2,-12(fp)
   17558:	10800a17 	ldw	r2,40(r2)
   1755c:	10800044 	addi	r2,r2,1
   17560:	1007883a 	mov	r3,r2
   17564:	00800084 	movi	r2,2
   17568:	18800025 	stbio	r2,0(r3)
	return 0;
   1756c:	0005883a 	mov	r2,zero
}
   17570:	e037883a 	mov	sp,fp
   17574:	dfc00117 	ldw	ra,4(sp)
   17578:	df000017 	ldw	fp,0(sp)
   1757c:	dec00204 	addi	sp,sp,8
   17580:	f800283a 	ret

00017584 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   17584:	defffd04 	addi	sp,sp,-12
   17588:	dfc00215 	stw	ra,8(sp)
   1758c:	df000115 	stw	fp,4(sp)
   17590:	df000104 	addi	fp,sp,4
   17594:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   17598:	01400304 	movi	r5,12
   1759c:	e13fff17 	ldw	r4,-4(fp)
   175a0:	00171740 	call	17174 <alt_up_character_lcd_send_cmd>
}
   175a4:	0001883a 	nop
   175a8:	e037883a 	mov	sp,fp
   175ac:	dfc00117 	ldw	ra,4(sp)
   175b0:	df000017 	ldw	fp,0(sp)
   175b4:	dec00204 	addi	sp,sp,8
   175b8:	f800283a 	ret

000175bc <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   175bc:	defffd04 	addi	sp,sp,-12
   175c0:	dfc00215 	stw	ra,8(sp)
   175c4:	df000115 	stw	fp,4(sp)
   175c8:	df000104 	addi	fp,sp,4
   175cc:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   175d0:	014003c4 	movi	r5,15
   175d4:	e13fff17 	ldw	r4,-4(fp)
   175d8:	00171740 	call	17174 <alt_up_character_lcd_send_cmd>
}
   175dc:	0001883a 	nop
   175e0:	e037883a 	mov	sp,fp
   175e4:	dfc00117 	ldw	ra,4(sp)
   175e8:	df000017 	ldw	fp,0(sp)
   175ec:	dec00204 	addi	sp,sp,8
   175f0:	f800283a 	ret

000175f4 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   175f4:	defffd04 	addi	sp,sp,-12
   175f8:	df000215 	stw	fp,8(sp)
   175fc:	df000204 	addi	fp,sp,8
   17600:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   17604:	e0bfff17 	ldw	r2,-4(fp)
   17608:	10800a17 	ldw	r2,40(r2)
   1760c:	10800104 	addi	r2,r2,4
   17610:	10800037 	ldwio	r2,0(r2)
   17614:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   17618:	e0bffe17 	ldw	r2,-8(fp)
   1761c:	10800054 	ori	r2,r2,1
   17620:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   17624:	e0bfff17 	ldw	r2,-4(fp)
   17628:	10800a17 	ldw	r2,40(r2)
   1762c:	10800104 	addi	r2,r2,4
   17630:	1007883a 	mov	r3,r2
   17634:	e0bffe17 	ldw	r2,-8(fp)
   17638:	18800035 	stwio	r2,0(r3)
}
   1763c:	0001883a 	nop
   17640:	e037883a 	mov	sp,fp
   17644:	df000017 	ldw	fp,0(sp)
   17648:	dec00104 	addi	sp,sp,4
   1764c:	f800283a 	ret

00017650 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   17650:	defffd04 	addi	sp,sp,-12
   17654:	df000215 	stw	fp,8(sp)
   17658:	df000204 	addi	fp,sp,8
   1765c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   17660:	e0bfff17 	ldw	r2,-4(fp)
   17664:	10800a17 	ldw	r2,40(r2)
   17668:	10800104 	addi	r2,r2,4
   1766c:	10800037 	ldwio	r2,0(r2)
   17670:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   17674:	e0fffe17 	ldw	r3,-8(fp)
   17678:	00bfff84 	movi	r2,-2
   1767c:	1884703a 	and	r2,r3,r2
   17680:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   17684:	e0bfff17 	ldw	r2,-4(fp)
   17688:	10800a17 	ldw	r2,40(r2)
   1768c:	10800104 	addi	r2,r2,4
   17690:	1007883a 	mov	r3,r2
   17694:	e0bffe17 	ldw	r2,-8(fp)
   17698:	18800035 	stwio	r2,0(r3)
}
   1769c:	0001883a 	nop
   176a0:	e037883a 	mov	sp,fp
   176a4:	df000017 	ldw	fp,0(sp)
   176a8:	dec00104 	addi	sp,sp,4
   176ac:	f800283a 	ret

000176b0 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   176b0:	defffd04 	addi	sp,sp,-12
   176b4:	df000215 	stw	fp,8(sp)
   176b8:	df000204 	addi	fp,sp,8
   176bc:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   176c0:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   176c4:	e0bfff17 	ldw	r2,-4(fp)
   176c8:	10800a17 	ldw	r2,40(r2)
   176cc:	10800084 	addi	r2,r2,2
   176d0:	1080002b 	ldhuio	r2,0(r2)
   176d4:	10bfffcc 	andi	r2,r2,65535
   176d8:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   176dc:	e0bffe0b 	ldhu	r2,-8(fp)
}
   176e0:	e037883a 	mov	sp,fp
   176e4:	df000017 	ldw	fp,0(sp)
   176e8:	dec00104 	addi	sp,sp,4
   176ec:	f800283a 	ret

000176f0 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   176f0:	defffd04 	addi	sp,sp,-12
   176f4:	df000215 	stw	fp,8(sp)
   176f8:	df000204 	addi	fp,sp,8
   176fc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   17700:	e0bfff17 	ldw	r2,-4(fp)
   17704:	10800a17 	ldw	r2,40(r2)
   17708:	10800104 	addi	r2,r2,4
   1770c:	10800037 	ldwio	r2,0(r2)
   17710:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   17714:	e0bffe17 	ldw	r2,-8(fp)
   17718:	1004d43a 	srli	r2,r2,16
}
   1771c:	e037883a 	mov	sp,fp
   17720:	df000017 	ldw	fp,0(sp)
   17724:	dec00104 	addi	sp,sp,4
   17728:	f800283a 	ret

0001772c <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   1772c:	defffd04 	addi	sp,sp,-12
   17730:	df000215 	stw	fp,8(sp)
   17734:	df000204 	addi	fp,sp,8
   17738:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   1773c:	e0bfff17 	ldw	r2,-4(fp)
   17740:	1080800c 	andi	r2,r2,512
   17744:	1004d27a 	srli	r2,r2,9
   17748:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1774c:	e0bffe17 	ldw	r2,-8(fp)
   17750:	10000226 	beq	r2,zero,1775c <alt_up_irda_check_parity+0x30>
   17754:	00bfffc4 	movi	r2,-1
   17758:	00000106 	br	17760 <alt_up_irda_check_parity+0x34>
   1775c:	0005883a 	mov	r2,zero
}
   17760:	e037883a 	mov	sp,fp
   17764:	df000017 	ldw	fp,0(sp)
   17768:	dec00104 	addi	sp,sp,4
   1776c:	f800283a 	ret

00017770 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   17770:	defffd04 	addi	sp,sp,-12
   17774:	df000215 	stw	fp,8(sp)
   17778:	df000204 	addi	fp,sp,8
   1777c:	e13ffe15 	stw	r4,-8(fp)
   17780:	2805883a 	mov	r2,r5
   17784:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   17788:	e0bffe17 	ldw	r2,-8(fp)
   1778c:	10800a17 	ldw	r2,40(r2)
   17790:	1007883a 	mov	r3,r2
   17794:	e0bfff03 	ldbu	r2,-4(fp)
   17798:	18800035 	stwio	r2,0(r3)
	return 0;
   1779c:	0005883a 	mov	r2,zero
}
   177a0:	e037883a 	mov	sp,fp
   177a4:	df000017 	ldw	fp,0(sp)
   177a8:	dec00104 	addi	sp,sp,4
   177ac:	f800283a 	ret

000177b0 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   177b0:	defffa04 	addi	sp,sp,-24
   177b4:	dfc00515 	stw	ra,20(sp)
   177b8:	df000415 	stw	fp,16(sp)
   177bc:	df000404 	addi	fp,sp,16
   177c0:	e13ffd15 	stw	r4,-12(fp)
   177c4:	e17ffe15 	stw	r5,-8(fp)
   177c8:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   177cc:	e0bffd17 	ldw	r2,-12(fp)
   177d0:	10800a17 	ldw	r2,40(r2)
   177d4:	10800037 	ldwio	r2,0(r2)
   177d8:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   177dc:	e0bffc17 	ldw	r2,-16(fp)
   177e0:	1007883a 	mov	r3,r2
   177e4:	e0bffe17 	ldw	r2,-8(fp)
   177e8:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   177ec:	e13ffc17 	ldw	r4,-16(fp)
   177f0:	001772c0 	call	1772c <alt_up_irda_check_parity>
   177f4:	1007883a 	mov	r3,r2
   177f8:	e0bfff17 	ldw	r2,-4(fp)
   177fc:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   17800:	e0bffc17 	ldw	r2,-16(fp)
   17804:	10a0000c 	andi	r2,r2,32768
   17808:	1004d3fa 	srli	r2,r2,15
   1780c:	10bfffc4 	addi	r2,r2,-1
}
   17810:	e037883a 	mov	sp,fp
   17814:	dfc00117 	ldw	ra,4(sp)
   17818:	df000017 	ldw	fp,0(sp)
   1781c:	dec00204 	addi	sp,sp,8
   17820:	f800283a 	ret

00017824 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   17824:	defff804 	addi	sp,sp,-32
   17828:	dfc00715 	stw	ra,28(sp)
   1782c:	df000615 	stw	fp,24(sp)
   17830:	df000604 	addi	fp,sp,24
   17834:	e13ffd15 	stw	r4,-12(fp)
   17838:	e17ffe15 	stw	r5,-8(fp)
   1783c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   17840:	e0bffd17 	ldw	r2,-12(fp)
   17844:	10800017 	ldw	r2,0(r2)
   17848:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1784c:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   17850:	00000c06 	br	17884 <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   17854:	e0bffe17 	ldw	r2,-8(fp)
   17858:	10c00044 	addi	r3,r2,1
   1785c:	e0fffe15 	stw	r3,-8(fp)
   17860:	e0fffc04 	addi	r3,fp,-16
   17864:	180d883a 	mov	r6,r3
   17868:	100b883a 	mov	r5,r2
   1786c:	e13ffb17 	ldw	r4,-20(fp)
   17870:	00177b00 	call	177b0 <alt_up_irda_read_data>
   17874:	1000081e 	bne	r2,zero,17898 <alt_up_irda_read_fd+0x74>
			count++;
   17878:	e0bffa17 	ldw	r2,-24(fp)
   1787c:	10800044 	addi	r2,r2,1
   17880:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   17884:	e0bfff17 	ldw	r2,-4(fp)
   17888:	10ffffc4 	addi	r3,r2,-1
   1788c:	e0ffff15 	stw	r3,-4(fp)
   17890:	103ff01e 	bne	r2,zero,17854 <alt_up_irda_read_fd+0x30>
   17894:	00000106 	br	1789c <alt_up_irda_read_fd+0x78>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   17898:	0001883a 	nop
	}
	return count;
   1789c:	e0bffa17 	ldw	r2,-24(fp)
}
   178a0:	e037883a 	mov	sp,fp
   178a4:	dfc00117 	ldw	ra,4(sp)
   178a8:	df000017 	ldw	fp,0(sp)
   178ac:	dec00204 	addi	sp,sp,8
   178b0:	f800283a 	ret

000178b4 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   178b4:	defff904 	addi	sp,sp,-28
   178b8:	dfc00615 	stw	ra,24(sp)
   178bc:	df000515 	stw	fp,20(sp)
   178c0:	df000504 	addi	fp,sp,20
   178c4:	e13ffd15 	stw	r4,-12(fp)
   178c8:	e17ffe15 	stw	r5,-8(fp)
   178cc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   178d0:	e0bffd17 	ldw	r2,-12(fp)
   178d4:	10800017 	ldw	r2,0(r2)
   178d8:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   178dc:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   178e0:	00000c06 	br	17914 <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   178e4:	e0bffe17 	ldw	r2,-8(fp)
   178e8:	10c00044 	addi	r3,r2,1
   178ec:	e0fffe15 	stw	r3,-8(fp)
   178f0:	10800003 	ldbu	r2,0(r2)
   178f4:	10803fcc 	andi	r2,r2,255
   178f8:	100b883a 	mov	r5,r2
   178fc:	e13ffc17 	ldw	r4,-16(fp)
   17900:	00177700 	call	17770 <alt_up_irda_write_data>
   17904:	1000081e 	bne	r2,zero,17928 <alt_up_irda_write_fd+0x74>
			count++;
   17908:	e0bffb17 	ldw	r2,-20(fp)
   1790c:	10800044 	addi	r2,r2,1
   17910:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   17914:	e0bfff17 	ldw	r2,-4(fp)
   17918:	10ffffc4 	addi	r3,r2,-1
   1791c:	e0ffff15 	stw	r3,-4(fp)
   17920:	103ff01e 	bne	r2,zero,178e4 <alt_up_irda_write_fd+0x30>
   17924:	00000106 	br	1792c <alt_up_irda_write_fd+0x78>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
   17928:	0001883a 	nop
	}
	return count;
   1792c:	e0bffb17 	ldw	r2,-20(fp)
}
   17930:	e037883a 	mov	sp,fp
   17934:	dfc00117 	ldw	ra,4(sp)
   17938:	df000017 	ldw	fp,0(sp)
   1793c:	dec00204 	addi	sp,sp,8
   17940:	f800283a 	ret

00017944 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   17944:	defffc04 	addi	sp,sp,-16
   17948:	dfc00315 	stw	ra,12(sp)
   1794c:	df000215 	stw	fp,8(sp)
   17950:	df000204 	addi	fp,sp,8
   17954:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   17958:	d1600a04 	addi	r5,gp,-32728
   1795c:	e13fff17 	ldw	r4,-4(fp)
   17960:	00186ac0 	call	186ac <alt_find_dev>
   17964:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   17968:	e0bffe17 	ldw	r2,-8(fp)
}
   1796c:	e037883a 	mov	sp,fp
   17970:	dfc00117 	ldw	ra,4(sp)
   17974:	df000017 	ldw	fp,0(sp)
   17978:	dec00204 	addi	sp,sp,8
   1797c:	f800283a 	ret

00017980 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   17980:	defffd04 	addi	sp,sp,-12
   17984:	df000215 	stw	fp,8(sp)
   17988:	df000204 	addi	fp,sp,8
   1798c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   17990:	e0bfff17 	ldw	r2,-4(fp)
   17994:	1080400c 	andi	r2,r2,256
   17998:	1004d23a 	srli	r2,r2,8
   1799c:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   179a0:	e0bffe03 	ldbu	r2,-8(fp)
}
   179a4:	e037883a 	mov	sp,fp
   179a8:	df000017 	ldw	fp,0(sp)
   179ac:	dec00104 	addi	sp,sp,4
   179b0:	f800283a 	ret

000179b4 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   179b4:	defffd04 	addi	sp,sp,-12
   179b8:	df000215 	stw	fp,8(sp)
   179bc:	df000204 	addi	fp,sp,8
   179c0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   179c4:	e0bfff17 	ldw	r2,-4(fp)
   179c8:	1080004c 	andi	r2,r2,1
   179cc:	e0bffe05 	stb	r2,-8(fp)
	return re;
   179d0:	e0bffe03 	ldbu	r2,-8(fp)
}
   179d4:	e037883a 	mov	sp,fp
   179d8:	df000017 	ldw	fp,0(sp)
   179dc:	dec00104 	addi	sp,sp,4
   179e0:	f800283a 	ret

000179e4 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   179e4:	defffd04 	addi	sp,sp,-12
   179e8:	df000215 	stw	fp,8(sp)
   179ec:	df000204 	addi	fp,sp,8
   179f0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   179f4:	e0bfff17 	ldw	r2,-4(fp)
   179f8:	1081000c 	andi	r2,r2,1024
   179fc:	1004d2ba 	srli	r2,r2,10
   17a00:	e0bffe05 	stb	r2,-8(fp)
	return re;
   17a04:	e0bffe03 	ldbu	r2,-8(fp)
}
   17a08:	e037883a 	mov	sp,fp
   17a0c:	df000017 	ldw	fp,0(sp)
   17a10:	dec00104 	addi	sp,sp,4
   17a14:	f800283a 	ret

00017a18 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   17a18:	defffd04 	addi	sp,sp,-12
   17a1c:	df000215 	stw	fp,8(sp)
   17a20:	df000204 	addi	fp,sp,8
   17a24:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   17a28:	e0bfff17 	ldw	r2,-4(fp)
   17a2c:	1004d43a 	srli	r2,r2,16
   17a30:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   17a34:	e0bffe0b 	ldhu	r2,-8(fp)
}
   17a38:	e037883a 	mov	sp,fp
   17a3c:	df000017 	ldw	fp,0(sp)
   17a40:	dec00104 	addi	sp,sp,4
   17a44:	f800283a 	ret

00017a48 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   17a48:	defffd04 	addi	sp,sp,-12
   17a4c:	df000215 	stw	fp,8(sp)
   17a50:	df000204 	addi	fp,sp,8
   17a54:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   17a58:	e0bfff17 	ldw	r2,-4(fp)
   17a5c:	10a0000c 	andi	r2,r2,32768
   17a60:	1004d3fa 	srli	r2,r2,15
   17a64:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   17a68:	e0bffe03 	ldbu	r2,-8(fp)
}
   17a6c:	e037883a 	mov	sp,fp
   17a70:	df000017 	ldw	fp,0(sp)
   17a74:	dec00104 	addi	sp,sp,4
   17a78:	f800283a 	ret

00017a7c <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   17a7c:	defffd04 	addi	sp,sp,-12
   17a80:	df000215 	stw	fp,8(sp)
   17a84:	df000204 	addi	fp,sp,8
   17a88:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   17a8c:	e0bfff17 	ldw	r2,-4(fp)
   17a90:	e0bffe05 	stb	r2,-8(fp)
	return data;
   17a94:	e0bffe03 	ldbu	r2,-8(fp)
}
   17a98:	e037883a 	mov	sp,fp
   17a9c:	df000017 	ldw	fp,0(sp)
   17aa0:	dec00104 	addi	sp,sp,4
   17aa4:	f800283a 	ret

00017aa8 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   17aa8:	defffb04 	addi	sp,sp,-20
   17aac:	dfc00415 	stw	ra,16(sp)
   17ab0:	df000315 	stw	fp,12(sp)
   17ab4:	df000304 	addi	fp,sp,12
   17ab8:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   17abc:	01403fc4 	movi	r5,255
   17ac0:	e13fff17 	ldw	r4,-4(fp)
   17ac4:	0017d080 	call	17d08 <alt_up_ps2_write_data_byte_with_ack>
   17ac8:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   17acc:	e0bffd17 	ldw	r2,-12(fp)
   17ad0:	1000211e 	bne	r2,zero,17b58 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   17ad4:	e0bffe04 	addi	r2,fp,-8
   17ad8:	100b883a 	mov	r5,r2
   17adc:	e13fff17 	ldw	r4,-4(fp)
   17ae0:	0017d6c0 	call	17d6c <alt_up_ps2_read_data_byte_timeout>
   17ae4:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   17ae8:	e0bffd17 	ldw	r2,-12(fp)
   17aec:	10001a1e 	bne	r2,zero,17b58 <alt_up_ps2_init+0xb0>
   17af0:	e0bffe03 	ldbu	r2,-8(fp)
   17af4:	10803fcc 	andi	r2,r2,255
   17af8:	10802a98 	cmpnei	r2,r2,170
   17afc:	1000161e 	bne	r2,zero,17b58 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   17b00:	e0bffe04 	addi	r2,fp,-8
   17b04:	100b883a 	mov	r5,r2
   17b08:	e13fff17 	ldw	r4,-4(fp)
   17b0c:	0017d6c0 	call	17d6c <alt_up_ps2_read_data_byte_timeout>
   17b10:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   17b14:	e0bffd17 	ldw	r2,-12(fp)
   17b18:	10bfe318 	cmpnei	r2,r2,-116
   17b1c:	1000041e 	bne	r2,zero,17b30 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   17b20:	e0bfff17 	ldw	r2,-4(fp)
   17b24:	00c00044 	movi	r3,1
   17b28:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
   17b2c:	00000a06 	br	17b58 <alt_up_ps2_init+0xb0>
			if (status == -ETIMEDOUT)
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
			}
			else if (status == 0 && byte == 0x00)
   17b30:	e0bffd17 	ldw	r2,-12(fp)
   17b34:	1000081e 	bne	r2,zero,17b58 <alt_up_ps2_init+0xb0>
   17b38:	e0bffe03 	ldbu	r2,-8(fp)
   17b3c:	10803fcc 	andi	r2,r2,255
   17b40:	1000051e 	bne	r2,zero,17b58 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   17b44:	e0bfff17 	ldw	r2,-4(fp)
   17b48:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   17b4c:	01403d04 	movi	r5,244
   17b50:	e13fff17 	ldw	r4,-4(fp)
   17b54:	0017c2c0 	call	17c2c <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   17b58:	0001883a 	nop
   17b5c:	e037883a 	mov	sp,fp
   17b60:	dfc00117 	ldw	ra,4(sp)
   17b64:	df000017 	ldw	fp,0(sp)
   17b68:	dec00204 	addi	sp,sp,8
   17b6c:	f800283a 	ret

00017b70 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   17b70:	defffd04 	addi	sp,sp,-12
   17b74:	df000215 	stw	fp,8(sp)
   17b78:	df000204 	addi	fp,sp,8
   17b7c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   17b80:	e0bfff17 	ldw	r2,-4(fp)
   17b84:	10800a17 	ldw	r2,40(r2)
   17b88:	10800104 	addi	r2,r2,4
   17b8c:	10800037 	ldwio	r2,0(r2)
   17b90:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   17b94:	e0bffe17 	ldw	r2,-8(fp)
   17b98:	10800054 	ori	r2,r2,1
   17b9c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   17ba0:	e0bfff17 	ldw	r2,-4(fp)
   17ba4:	10800a17 	ldw	r2,40(r2)
   17ba8:	10800104 	addi	r2,r2,4
   17bac:	1007883a 	mov	r3,r2
   17bb0:	e0bffe17 	ldw	r2,-8(fp)
   17bb4:	18800035 	stwio	r2,0(r3)
}
   17bb8:	0001883a 	nop
   17bbc:	e037883a 	mov	sp,fp
   17bc0:	df000017 	ldw	fp,0(sp)
   17bc4:	dec00104 	addi	sp,sp,4
   17bc8:	f800283a 	ret

00017bcc <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   17bcc:	defffd04 	addi	sp,sp,-12
   17bd0:	df000215 	stw	fp,8(sp)
   17bd4:	df000204 	addi	fp,sp,8
   17bd8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   17bdc:	e0bfff17 	ldw	r2,-4(fp)
   17be0:	10800a17 	ldw	r2,40(r2)
   17be4:	10800104 	addi	r2,r2,4
   17be8:	10800037 	ldwio	r2,0(r2)
   17bec:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   17bf0:	e0fffe17 	ldw	r3,-8(fp)
   17bf4:	00bfff84 	movi	r2,-2
   17bf8:	1884703a 	and	r2,r3,r2
   17bfc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   17c00:	e0bfff17 	ldw	r2,-4(fp)
   17c04:	10800a17 	ldw	r2,40(r2)
   17c08:	10800104 	addi	r2,r2,4
   17c0c:	1007883a 	mov	r3,r2
   17c10:	e0bffe17 	ldw	r2,-8(fp)
   17c14:	18800035 	stwio	r2,0(r3)
}
   17c18:	0001883a 	nop
   17c1c:	e037883a 	mov	sp,fp
   17c20:	df000017 	ldw	fp,0(sp)
   17c24:	dec00104 	addi	sp,sp,4
   17c28:	f800283a 	ret

00017c2c <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   17c2c:	defffb04 	addi	sp,sp,-20
   17c30:	dfc00415 	stw	ra,16(sp)
   17c34:	df000315 	stw	fp,12(sp)
   17c38:	df000304 	addi	fp,sp,12
   17c3c:	e13ffe15 	stw	r4,-8(fp)
   17c40:	2805883a 	mov	r2,r5
   17c44:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   17c48:	e0bffe17 	ldw	r2,-8(fp)
   17c4c:	10800a17 	ldw	r2,40(r2)
   17c50:	1007883a 	mov	r3,r2
   17c54:	e0bfff03 	ldbu	r2,-4(fp)
   17c58:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   17c5c:	e0bffe17 	ldw	r2,-8(fp)
   17c60:	10800a17 	ldw	r2,40(r2)
   17c64:	10800104 	addi	r2,r2,4
   17c68:	10800037 	ldwio	r2,0(r2)
   17c6c:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   17c70:	e13ffd17 	ldw	r4,-12(fp)
   17c74:	00179e40 	call	179e4 <read_CE_bit>
   17c78:	10803fcc 	andi	r2,r2,255
   17c7c:	10000226 	beq	r2,zero,17c88 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   17c80:	00bffec4 	movi	r2,-5
   17c84:	00000106 	br	17c8c <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   17c88:	0005883a 	mov	r2,zero
}
   17c8c:	e037883a 	mov	sp,fp
   17c90:	dfc00117 	ldw	ra,4(sp)
   17c94:	df000017 	ldw	fp,0(sp)
   17c98:	dec00204 	addi	sp,sp,8
   17c9c:	f800283a 	ret

00017ca0 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   17ca0:	defffc04 	addi	sp,sp,-16
   17ca4:	dfc00315 	stw	ra,12(sp)
   17ca8:	df000215 	stw	fp,8(sp)
   17cac:	df000204 	addi	fp,sp,8
   17cb0:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   17cb4:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   17cb8:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   17cbc:	e0bffe44 	addi	r2,fp,-7
   17cc0:	100b883a 	mov	r5,r2
   17cc4:	e13fff17 	ldw	r4,-4(fp)
   17cc8:	0017d6c0 	call	17d6c <alt_up_ps2_read_data_byte_timeout>
   17ccc:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   17cd0:	e0bffe03 	ldbu	r2,-8(fp)
   17cd4:	1000061e 	bne	r2,zero,17cf0 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   17cd8:	e0bffe43 	ldbu	r2,-7(fp)
   17cdc:	10803fcc 	andi	r2,r2,255
   17ce0:	10803e98 	cmpnei	r2,r2,250
   17ce4:	103ff51e 	bne	r2,zero,17cbc <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
   17ce8:	0005883a 	mov	r2,zero
   17cec:	00000106 	br	17cf4 <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
   17cf0:	e0bffe03 	ldbu	r2,-8(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
   17cf4:	e037883a 	mov	sp,fp
   17cf8:	dfc00117 	ldw	ra,4(sp)
   17cfc:	df000017 	ldw	fp,0(sp)
   17d00:	dec00204 	addi	sp,sp,8
   17d04:	f800283a 	ret

00017d08 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   17d08:	defffa04 	addi	sp,sp,-24
   17d0c:	dfc00515 	stw	ra,20(sp)
   17d10:	df000415 	stw	fp,16(sp)
   17d14:	df000404 	addi	fp,sp,16
   17d18:	e13ffe15 	stw	r4,-8(fp)
   17d1c:	2805883a 	mov	r2,r5
   17d20:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   17d24:	e0bfff03 	ldbu	r2,-4(fp)
   17d28:	100b883a 	mov	r5,r2
   17d2c:	e13ffe17 	ldw	r4,-8(fp)
   17d30:	0017c2c0 	call	17c2c <alt_up_ps2_write_data_byte>
   17d34:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   17d38:	e0bffc17 	ldw	r2,-16(fp)
   17d3c:	10000226 	beq	r2,zero,17d48 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   17d40:	e0bffc17 	ldw	r2,-16(fp)
   17d44:	00000406 	br	17d58 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   17d48:	e13ffe17 	ldw	r4,-8(fp)
   17d4c:	0017ca00 	call	17ca0 <alt_up_ps2_wait_for_ack>
   17d50:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   17d54:	e0bffd17 	ldw	r2,-12(fp)
}
   17d58:	e037883a 	mov	sp,fp
   17d5c:	dfc00117 	ldw	ra,4(sp)
   17d60:	df000017 	ldw	fp,0(sp)
   17d64:	dec00204 	addi	sp,sp,8
   17d68:	f800283a 	ret

00017d6c <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   17d6c:	defffa04 	addi	sp,sp,-24
   17d70:	dfc00515 	stw	ra,20(sp)
   17d74:	df000415 	stw	fp,16(sp)
   17d78:	df000404 	addi	fp,sp,16
   17d7c:	e13ffe15 	stw	r4,-8(fp)
   17d80:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   17d84:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   17d88:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   17d8c:	e0bffc17 	ldw	r2,-16(fp)
   17d90:	10800044 	addi	r2,r2,1
   17d94:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   17d98:	e0bffe17 	ldw	r2,-8(fp)
   17d9c:	10800a17 	ldw	r2,40(r2)
   17da0:	10800037 	ldwio	r2,0(r2)
   17da4:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   17da8:	e13ffd17 	ldw	r4,-12(fp)
   17dac:	0017a480 	call	17a48 <read_data_valid>
   17db0:	10803fcc 	andi	r2,r2,255
   17db4:	10000726 	beq	r2,zero,17dd4 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   17db8:	e13ffd17 	ldw	r4,-12(fp)
   17dbc:	0017a7c0 	call	17a7c <read_data_byte>
   17dc0:	1007883a 	mov	r3,r2
   17dc4:	e0bfff17 	ldw	r2,-4(fp)
   17dc8:	10c00005 	stb	r3,0(r2)
			return 0;
   17dcc:	0005883a 	mov	r2,zero
   17dd0:	00000806 	br	17df4 <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   17dd4:	e0bffe17 	ldw	r2,-8(fp)
   17dd8:	10800c17 	ldw	r2,48(r2)
   17ddc:	103feb26 	beq	r2,zero,17d8c <alt_up_ps2_read_data_byte_timeout+0x20>
   17de0:	e0bffe17 	ldw	r2,-8(fp)
   17de4:	10c00c17 	ldw	r3,48(r2)
   17de8:	e0bffc17 	ldw	r2,-16(fp)
   17dec:	18bfe72e 	bgeu	r3,r2,17d8c <alt_up_ps2_read_data_byte_timeout+0x20>
		{
			return -ETIMEDOUT;
   17df0:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
   17df4:	e037883a 	mov	sp,fp
   17df8:	dfc00117 	ldw	ra,4(sp)
   17dfc:	df000017 	ldw	fp,0(sp)
   17e00:	dec00204 	addi	sp,sp,8
   17e04:	f800283a 	ret

00017e08 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   17e08:	defffb04 	addi	sp,sp,-20
   17e0c:	dfc00415 	stw	ra,16(sp)
   17e10:	df000315 	stw	fp,12(sp)
   17e14:	df000304 	addi	fp,sp,12
   17e18:	e13ffe15 	stw	r4,-8(fp)
   17e1c:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   17e20:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   17e24:	e0bffe17 	ldw	r2,-8(fp)
   17e28:	10800a17 	ldw	r2,40(r2)
   17e2c:	10800037 	ldwio	r2,0(r2)
   17e30:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   17e34:	e13ffd17 	ldw	r4,-12(fp)
   17e38:	0017a480 	call	17a48 <read_data_valid>
   17e3c:	10803fcc 	andi	r2,r2,255
   17e40:	10000726 	beq	r2,zero,17e60 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   17e44:	e13ffd17 	ldw	r4,-12(fp)
   17e48:	0017a7c0 	call	17a7c <read_data_byte>
   17e4c:	1007883a 	mov	r3,r2
   17e50:	e0bfff17 	ldw	r2,-4(fp)
   17e54:	10c00005 	stb	r3,0(r2)
		return 0;
   17e58:	0005883a 	mov	r2,zero
   17e5c:	00000106 	br	17e64 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   17e60:	00bfffc4 	movi	r2,-1
}
   17e64:	e037883a 	mov	sp,fp
   17e68:	dfc00117 	ldw	ra,4(sp)
   17e6c:	df000017 	ldw	fp,0(sp)
   17e70:	dec00204 	addi	sp,sp,8
   17e74:	f800283a 	ret

00017e78 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   17e78:	defffb04 	addi	sp,sp,-20
   17e7c:	dfc00415 	stw	ra,16(sp)
   17e80:	df000315 	stw	fp,12(sp)
   17e84:	df000304 	addi	fp,sp,12
   17e88:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   17e8c:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   17e90:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   17e94:	e0bfff17 	ldw	r2,-4(fp)
   17e98:	10800a17 	ldw	r2,40(r2)
   17e9c:	10800037 	ldwio	r2,0(r2)
   17ea0:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   17ea4:	e13ffe17 	ldw	r4,-8(fp)
   17ea8:	0017a180 	call	17a18 <read_num_bytes_available>
   17eac:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   17eb0:	e0bffd0b 	ldhu	r2,-12(fp)
   17eb4:	103ff71e 	bne	r2,zero,17e94 <alt_up_ps2_clear_fifo+0x1c>
}
   17eb8:	0001883a 	nop
   17ebc:	e037883a 	mov	sp,fp
   17ec0:	dfc00117 	ldw	ra,4(sp)
   17ec4:	df000017 	ldw	fp,0(sp)
   17ec8:	dec00204 	addi	sp,sp,8
   17ecc:	f800283a 	ret

00017ed0 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   17ed0:	defff804 	addi	sp,sp,-32
   17ed4:	dfc00715 	stw	ra,28(sp)
   17ed8:	df000615 	stw	fp,24(sp)
   17edc:	df000604 	addi	fp,sp,24
   17ee0:	e13ffd15 	stw	r4,-12(fp)
   17ee4:	e17ffe15 	stw	r5,-8(fp)
   17ee8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   17eec:	e0bffd17 	ldw	r2,-12(fp)
   17ef0:	10800017 	ldw	r2,0(r2)
   17ef4:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   17ef8:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   17efc:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   17f00:	e0fffc17 	ldw	r3,-16(fp)
   17f04:	e0bfff17 	ldw	r2,-4(fp)
   17f08:	18bffd16 	blt	r3,r2,17f00 <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   17f0c:	e0bffe17 	ldw	r2,-8(fp)
   17f10:	10c00044 	addi	r3,r2,1
   17f14:	e0fffe15 	stw	r3,-8(fp)
   17f18:	100b883a 	mov	r5,r2
   17f1c:	e13ffa17 	ldw	r4,-24(fp)
   17f20:	0017d6c0 	call	17d6c <alt_up_ps2_read_data_byte_timeout>
   17f24:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   17f28:	e0bffb17 	ldw	r2,-20(fp)
   17f2c:	10000226 	beq	r2,zero,17f38 <alt_up_ps2_read_fd+0x68>
			return count;
   17f30:	e0bffc17 	ldw	r2,-16(fp)
   17f34:	00000406 	br	17f48 <alt_up_ps2_read_fd+0x78>
		count++;
   17f38:	e0bffc17 	ldw	r2,-16(fp)
   17f3c:	10800044 	addi	r2,r2,1
   17f40:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   17f44:	e0bffc17 	ldw	r2,-16(fp)
}
   17f48:	e037883a 	mov	sp,fp
   17f4c:	dfc00117 	ldw	ra,4(sp)
   17f50:	df000017 	ldw	fp,0(sp)
   17f54:	dec00204 	addi	sp,sp,8
   17f58:	f800283a 	ret

00017f5c <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   17f5c:	defff804 	addi	sp,sp,-32
   17f60:	dfc00715 	stw	ra,28(sp)
   17f64:	df000615 	stw	fp,24(sp)
   17f68:	df000604 	addi	fp,sp,24
   17f6c:	e13ffd15 	stw	r4,-12(fp)
   17f70:	e17ffe15 	stw	r5,-8(fp)
   17f74:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   17f78:	e0bffd17 	ldw	r2,-12(fp)
   17f7c:	10800017 	ldw	r2,0(r2)
   17f80:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   17f84:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   17f88:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   17f8c:	00001006 	br	17fd0 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   17f90:	e0bffe17 	ldw	r2,-8(fp)
   17f94:	10c00044 	addi	r3,r2,1
   17f98:	e0fffe15 	stw	r3,-8(fp)
   17f9c:	10800003 	ldbu	r2,0(r2)
   17fa0:	10803fcc 	andi	r2,r2,255
   17fa4:	100b883a 	mov	r5,r2
   17fa8:	e13ffb17 	ldw	r4,-20(fp)
   17fac:	0017c2c0 	call	17c2c <alt_up_ps2_write_data_byte>
   17fb0:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   17fb4:	e0bffc17 	ldw	r2,-16(fp)
   17fb8:	10000226 	beq	r2,zero,17fc4 <alt_up_ps2_write_fd+0x68>
			return count;
   17fbc:	e0bffa17 	ldw	r2,-24(fp)
   17fc0:	00000706 	br	17fe0 <alt_up_ps2_write_fd+0x84>
		count++;
   17fc4:	e0bffa17 	ldw	r2,-24(fp)
   17fc8:	10800044 	addi	r2,r2,1
   17fcc:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   17fd0:	e0fffa17 	ldw	r3,-24(fp)
   17fd4:	e0bfff17 	ldw	r2,-4(fp)
   17fd8:	18bfed16 	blt	r3,r2,17f90 <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   17fdc:	e0bffa17 	ldw	r2,-24(fp)
}
   17fe0:	e037883a 	mov	sp,fp
   17fe4:	dfc00117 	ldw	ra,4(sp)
   17fe8:	df000017 	ldw	fp,0(sp)
   17fec:	dec00204 	addi	sp,sp,8
   17ff0:	f800283a 	ret

00017ff4 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   17ff4:	defffc04 	addi	sp,sp,-16
   17ff8:	dfc00315 	stw	ra,12(sp)
   17ffc:	df000215 	stw	fp,8(sp)
   18000:	df000204 	addi	fp,sp,8
   18004:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   18008:	d1600a04 	addi	r5,gp,-32728
   1800c:	e13fff17 	ldw	r4,-4(fp)
   18010:	00186ac0 	call	186ac <alt_find_dev>
   18014:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   18018:	e0bffe17 	ldw	r2,-8(fp)
}
   1801c:	e037883a 	mov	sp,fp
   18020:	dfc00117 	ldw	ra,4(sp)
   18024:	df000017 	ldw	fp,0(sp)
   18028:	dec00204 	addi	sp,sp,8
   1802c:	f800283a 	ret

00018030 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   18030:	defffd04 	addi	sp,sp,-12
   18034:	df000215 	stw	fp,8(sp)
   18038:	df000204 	addi	fp,sp,8
   1803c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   18040:	e0bfff17 	ldw	r2,-4(fp)
   18044:	10800a17 	ldw	r2,40(r2)
   18048:	10800104 	addi	r2,r2,4
   1804c:	10800037 	ldwio	r2,0(r2)
   18050:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   18054:	e0bffe17 	ldw	r2,-8(fp)
   18058:	10800054 	ori	r2,r2,1
   1805c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   18060:	e0bfff17 	ldw	r2,-4(fp)
   18064:	10800a17 	ldw	r2,40(r2)
   18068:	10800104 	addi	r2,r2,4
   1806c:	1007883a 	mov	r3,r2
   18070:	e0bffe17 	ldw	r2,-8(fp)
   18074:	18800035 	stwio	r2,0(r3)
}
   18078:	0001883a 	nop
   1807c:	e037883a 	mov	sp,fp
   18080:	df000017 	ldw	fp,0(sp)
   18084:	dec00104 	addi	sp,sp,4
   18088:	f800283a 	ret

0001808c <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1808c:	defffd04 	addi	sp,sp,-12
   18090:	df000215 	stw	fp,8(sp)
   18094:	df000204 	addi	fp,sp,8
   18098:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1809c:	e0bfff17 	ldw	r2,-4(fp)
   180a0:	10800a17 	ldw	r2,40(r2)
   180a4:	10800104 	addi	r2,r2,4
   180a8:	10800037 	ldwio	r2,0(r2)
   180ac:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   180b0:	e0fffe17 	ldw	r3,-8(fp)
   180b4:	00bfff84 	movi	r2,-2
   180b8:	1884703a 	and	r2,r3,r2
   180bc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   180c0:	e0bfff17 	ldw	r2,-4(fp)
   180c4:	10800a17 	ldw	r2,40(r2)
   180c8:	10800104 	addi	r2,r2,4
   180cc:	1007883a 	mov	r3,r2
   180d0:	e0bffe17 	ldw	r2,-8(fp)
   180d4:	18800035 	stwio	r2,0(r3)
}
   180d8:	0001883a 	nop
   180dc:	e037883a 	mov	sp,fp
   180e0:	df000017 	ldw	fp,0(sp)
   180e4:	dec00104 	addi	sp,sp,4
   180e8:	f800283a 	ret

000180ec <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   180ec:	defffd04 	addi	sp,sp,-12
   180f0:	df000215 	stw	fp,8(sp)
   180f4:	df000204 	addi	fp,sp,8
   180f8:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   180fc:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   18100:	e0bfff17 	ldw	r2,-4(fp)
   18104:	10800a17 	ldw	r2,40(r2)
   18108:	10800084 	addi	r2,r2,2
   1810c:	1080002b 	ldhuio	r2,0(r2)
   18110:	10bfffcc 	andi	r2,r2,65535
   18114:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   18118:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1811c:	e037883a 	mov	sp,fp
   18120:	df000017 	ldw	fp,0(sp)
   18124:	dec00104 	addi	sp,sp,4
   18128:	f800283a 	ret

0001812c <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   1812c:	defffd04 	addi	sp,sp,-12
   18130:	df000215 	stw	fp,8(sp)
   18134:	df000204 	addi	fp,sp,8
   18138:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1813c:	e0bfff17 	ldw	r2,-4(fp)
   18140:	10800a17 	ldw	r2,40(r2)
   18144:	10800104 	addi	r2,r2,4
   18148:	10800037 	ldwio	r2,0(r2)
   1814c:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   18150:	e0bffe17 	ldw	r2,-8(fp)
   18154:	1004d43a 	srli	r2,r2,16
}
   18158:	e037883a 	mov	sp,fp
   1815c:	df000017 	ldw	fp,0(sp)
   18160:	dec00104 	addi	sp,sp,4
   18164:	f800283a 	ret

00018168 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   18168:	defffd04 	addi	sp,sp,-12
   1816c:	df000215 	stw	fp,8(sp)
   18170:	df000204 	addi	fp,sp,8
   18174:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   18178:	e0bfff17 	ldw	r2,-4(fp)
   1817c:	1080800c 	andi	r2,r2,512
   18180:	1004d27a 	srli	r2,r2,9
   18184:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   18188:	e0bffe17 	ldw	r2,-8(fp)
   1818c:	10000226 	beq	r2,zero,18198 <alt_up_rs232_check_parity+0x30>
   18190:	00bfffc4 	movi	r2,-1
   18194:	00000106 	br	1819c <alt_up_rs232_check_parity+0x34>
   18198:	0005883a 	mov	r2,zero
}
   1819c:	e037883a 	mov	sp,fp
   181a0:	df000017 	ldw	fp,0(sp)
   181a4:	dec00104 	addi	sp,sp,4
   181a8:	f800283a 	ret

000181ac <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   181ac:	defffd04 	addi	sp,sp,-12
   181b0:	df000215 	stw	fp,8(sp)
   181b4:	df000204 	addi	fp,sp,8
   181b8:	e13ffe15 	stw	r4,-8(fp)
   181bc:	2805883a 	mov	r2,r5
   181c0:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   181c4:	e0bffe17 	ldw	r2,-8(fp)
   181c8:	10800a17 	ldw	r2,40(r2)
   181cc:	1007883a 	mov	r3,r2
   181d0:	e0bfff03 	ldbu	r2,-4(fp)
   181d4:	18800035 	stwio	r2,0(r3)
	return 0;
   181d8:	0005883a 	mov	r2,zero
}
   181dc:	e037883a 	mov	sp,fp
   181e0:	df000017 	ldw	fp,0(sp)
   181e4:	dec00104 	addi	sp,sp,4
   181e8:	f800283a 	ret

000181ec <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   181ec:	defffa04 	addi	sp,sp,-24
   181f0:	dfc00515 	stw	ra,20(sp)
   181f4:	df000415 	stw	fp,16(sp)
   181f8:	df000404 	addi	fp,sp,16
   181fc:	e13ffd15 	stw	r4,-12(fp)
   18200:	e17ffe15 	stw	r5,-8(fp)
   18204:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   18208:	e0bffd17 	ldw	r2,-12(fp)
   1820c:	10800a17 	ldw	r2,40(r2)
   18210:	10800037 	ldwio	r2,0(r2)
   18214:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   18218:	e0bffc17 	ldw	r2,-16(fp)
   1821c:	1007883a 	mov	r3,r2
   18220:	e0bffe17 	ldw	r2,-8(fp)
   18224:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   18228:	e13ffc17 	ldw	r4,-16(fp)
   1822c:	00181680 	call	18168 <alt_up_rs232_check_parity>
   18230:	1007883a 	mov	r3,r2
   18234:	e0bfff17 	ldw	r2,-4(fp)
   18238:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   1823c:	e0bffc17 	ldw	r2,-16(fp)
   18240:	10a0000c 	andi	r2,r2,32768
   18244:	1004d3fa 	srli	r2,r2,15
   18248:	10bfffc4 	addi	r2,r2,-1
}
   1824c:	e037883a 	mov	sp,fp
   18250:	dfc00117 	ldw	ra,4(sp)
   18254:	df000017 	ldw	fp,0(sp)
   18258:	dec00204 	addi	sp,sp,8
   1825c:	f800283a 	ret

00018260 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   18260:	defff804 	addi	sp,sp,-32
   18264:	dfc00715 	stw	ra,28(sp)
   18268:	df000615 	stw	fp,24(sp)
   1826c:	df000604 	addi	fp,sp,24
   18270:	e13ffd15 	stw	r4,-12(fp)
   18274:	e17ffe15 	stw	r5,-8(fp)
   18278:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1827c:	e0bffd17 	ldw	r2,-12(fp)
   18280:	10800017 	ldw	r2,0(r2)
   18284:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   18288:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1828c:	00000c06 	br	182c0 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   18290:	e0bffe17 	ldw	r2,-8(fp)
   18294:	10c00044 	addi	r3,r2,1
   18298:	e0fffe15 	stw	r3,-8(fp)
   1829c:	e0fffc04 	addi	r3,fp,-16
   182a0:	180d883a 	mov	r6,r3
   182a4:	100b883a 	mov	r5,r2
   182a8:	e13ffb17 	ldw	r4,-20(fp)
   182ac:	00181ec0 	call	181ec <alt_up_rs232_read_data>
   182b0:	1000081e 	bne	r2,zero,182d4 <alt_up_rs232_read_fd+0x74>
			count++;
   182b4:	e0bffa17 	ldw	r2,-24(fp)
   182b8:	10800044 	addi	r2,r2,1
   182bc:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   182c0:	e0bfff17 	ldw	r2,-4(fp)
   182c4:	10ffffc4 	addi	r3,r2,-1
   182c8:	e0ffff15 	stw	r3,-4(fp)
   182cc:	103ff01e 	bne	r2,zero,18290 <alt_up_rs232_read_fd+0x30>
   182d0:	00000106 	br	182d8 <alt_up_rs232_read_fd+0x78>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   182d4:	0001883a 	nop
	}
	return count;
   182d8:	e0bffa17 	ldw	r2,-24(fp)
}
   182dc:	e037883a 	mov	sp,fp
   182e0:	dfc00117 	ldw	ra,4(sp)
   182e4:	df000017 	ldw	fp,0(sp)
   182e8:	dec00204 	addi	sp,sp,8
   182ec:	f800283a 	ret

000182f0 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   182f0:	defff904 	addi	sp,sp,-28
   182f4:	dfc00615 	stw	ra,24(sp)
   182f8:	df000515 	stw	fp,20(sp)
   182fc:	df000504 	addi	fp,sp,20
   18300:	e13ffd15 	stw	r4,-12(fp)
   18304:	e17ffe15 	stw	r5,-8(fp)
   18308:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1830c:	e0bffd17 	ldw	r2,-12(fp)
   18310:	10800017 	ldw	r2,0(r2)
   18314:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   18318:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1831c:	00000d06 	br	18354 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   18320:	e0bffe17 	ldw	r2,-8(fp)
   18324:	10800003 	ldbu	r2,0(r2)
   18328:	10803fcc 	andi	r2,r2,255
   1832c:	100b883a 	mov	r5,r2
   18330:	e13ffc17 	ldw	r4,-16(fp)
   18334:	00181ac0 	call	181ac <alt_up_rs232_write_data>
   18338:	10000b1e 	bne	r2,zero,18368 <alt_up_rs232_write_fd+0x78>
		{
			count++;
   1833c:	e0bffb17 	ldw	r2,-20(fp)
   18340:	10800044 	addi	r2,r2,1
   18344:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   18348:	e0bffe17 	ldw	r2,-8(fp)
   1834c:	10800044 	addi	r2,r2,1
   18350:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   18354:	e0bfff17 	ldw	r2,-4(fp)
   18358:	10ffffc4 	addi	r3,r2,-1
   1835c:	e0ffff15 	stw	r3,-4(fp)
   18360:	103fef1e 	bne	r2,zero,18320 <alt_up_rs232_write_fd+0x30>
   18364:	00000106 	br	1836c <alt_up_rs232_write_fd+0x7c>
		{
			count++;
			ptr++;
		}
		else
			break;
   18368:	0001883a 	nop
	}
	return count;
   1836c:	e0bffb17 	ldw	r2,-20(fp)
}
   18370:	e037883a 	mov	sp,fp
   18374:	dfc00117 	ldw	ra,4(sp)
   18378:	df000017 	ldw	fp,0(sp)
   1837c:	dec00204 	addi	sp,sp,8
   18380:	f800283a 	ret

00018384 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   18384:	defffc04 	addi	sp,sp,-16
   18388:	dfc00315 	stw	ra,12(sp)
   1838c:	df000215 	stw	fp,8(sp)
   18390:	df000204 	addi	fp,sp,8
   18394:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   18398:	d1600a04 	addi	r5,gp,-32728
   1839c:	e13fff17 	ldw	r4,-4(fp)
   183a0:	00186ac0 	call	186ac <alt_find_dev>
   183a4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   183a8:	e0bffe17 	ldw	r2,-8(fp)
}
   183ac:	e037883a 	mov	sp,fp
   183b0:	dfc00117 	ldw	ra,4(sp)
   183b4:	df000017 	ldw	fp,0(sp)
   183b8:	dec00204 	addi	sp,sp,8
   183bc:	f800283a 	ret

000183c0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   183c0:	defff504 	addi	sp,sp,-44
   183c4:	df000a15 	stw	fp,40(sp)
   183c8:	df000a04 	addi	fp,sp,40
   183cc:	e13ffc15 	stw	r4,-16(fp)
   183d0:	e17ffd15 	stw	r5,-12(fp)
   183d4:	e1bffe15 	stw	r6,-8(fp)
   183d8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   183dc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   183e0:	d0a80617 	ldw	r2,-24552(gp)
  
  if (alt_ticks_per_second ())
   183e4:	10003c26 	beq	r2,zero,184d8 <alt_alarm_start+0x118>
  {
    if (alarm)
   183e8:	e0bffc17 	ldw	r2,-16(fp)
   183ec:	10003826 	beq	r2,zero,184d0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   183f0:	e0bffc17 	ldw	r2,-16(fp)
   183f4:	e0fffe17 	ldw	r3,-8(fp)
   183f8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   183fc:	e0bffc17 	ldw	r2,-16(fp)
   18400:	e0ffff17 	ldw	r3,-4(fp)
   18404:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18408:	0005303a 	rdctl	r2,status
   1840c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18410:	e0fff917 	ldw	r3,-28(fp)
   18414:	00bfff84 	movi	r2,-2
   18418:	1884703a 	and	r2,r3,r2
   1841c:	1001703a 	wrctl	status,r2
  
  return context;
   18420:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   18424:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   18428:	d0a80717 	ldw	r2,-24548(gp)
      
      current_nticks = alt_nticks();
   1842c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   18430:	e0fffd17 	ldw	r3,-12(fp)
   18434:	e0bff617 	ldw	r2,-40(fp)
   18438:	1885883a 	add	r2,r3,r2
   1843c:	10c00044 	addi	r3,r2,1
   18440:	e0bffc17 	ldw	r2,-16(fp)
   18444:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   18448:	e0bffc17 	ldw	r2,-16(fp)
   1844c:	10c00217 	ldw	r3,8(r2)
   18450:	e0bff617 	ldw	r2,-40(fp)
   18454:	1880042e 	bgeu	r3,r2,18468 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   18458:	e0bffc17 	ldw	r2,-16(fp)
   1845c:	00c00044 	movi	r3,1
   18460:	10c00405 	stb	r3,16(r2)
   18464:	00000206 	br	18470 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   18468:	e0bffc17 	ldw	r2,-16(fp)
   1846c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   18470:	e0bffc17 	ldw	r2,-16(fp)
   18474:	d0e02f04 	addi	r3,gp,-32580
   18478:	e0fffa15 	stw	r3,-24(fp)
   1847c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   18480:	e0bffb17 	ldw	r2,-20(fp)
   18484:	e0fffa17 	ldw	r3,-24(fp)
   18488:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1848c:	e0bffa17 	ldw	r2,-24(fp)
   18490:	10c00017 	ldw	r3,0(r2)
   18494:	e0bffb17 	ldw	r2,-20(fp)
   18498:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1849c:	e0bffa17 	ldw	r2,-24(fp)
   184a0:	10800017 	ldw	r2,0(r2)
   184a4:	e0fffb17 	ldw	r3,-20(fp)
   184a8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   184ac:	e0bffa17 	ldw	r2,-24(fp)
   184b0:	e0fffb17 	ldw	r3,-20(fp)
   184b4:	10c00015 	stw	r3,0(r2)
   184b8:	e0bff817 	ldw	r2,-32(fp)
   184bc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   184c0:	e0bff717 	ldw	r2,-36(fp)
   184c4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   184c8:	0005883a 	mov	r2,zero
   184cc:	00000306 	br	184dc <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   184d0:	00bffa84 	movi	r2,-22
   184d4:	00000106 	br	184dc <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   184d8:	00bfde84 	movi	r2,-134
  }
}
   184dc:	e037883a 	mov	sp,fp
   184e0:	df000017 	ldw	fp,0(sp)
   184e4:	dec00104 	addi	sp,sp,4
   184e8:	f800283a 	ret

000184ec <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   184ec:	deffff04 	addi	sp,sp,-4
   184f0:	df000015 	stw	fp,0(sp)
   184f4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   184f8:	0001883a 	nop
   184fc:	e037883a 	mov	sp,fp
   18500:	df000017 	ldw	fp,0(sp)
   18504:	dec00104 	addi	sp,sp,4
   18508:	f800283a 	ret

0001850c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1850c:	defffe04 	addi	sp,sp,-8
   18510:	dfc00115 	stw	ra,4(sp)
   18514:	df000015 	stw	fp,0(sp)
   18518:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1851c:	d0a00d17 	ldw	r2,-32716(gp)
   18520:	10000326 	beq	r2,zero,18530 <alt_get_errno+0x24>
   18524:	d0a00d17 	ldw	r2,-32716(gp)
   18528:	103ee83a 	callr	r2
   1852c:	00000106 	br	18534 <alt_get_errno+0x28>
   18530:	d0a7e804 	addi	r2,gp,-24672
}
   18534:	e037883a 	mov	sp,fp
   18538:	dfc00117 	ldw	ra,4(sp)
   1853c:	df000017 	ldw	fp,0(sp)
   18540:	dec00204 	addi	sp,sp,8
   18544:	f800283a 	ret

00018548 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   18548:	defffa04 	addi	sp,sp,-24
   1854c:	dfc00515 	stw	ra,20(sp)
   18550:	df000415 	stw	fp,16(sp)
   18554:	df000404 	addi	fp,sp,16
   18558:	e13ffe15 	stw	r4,-8(fp)
   1855c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   18560:	e0bffe17 	ldw	r2,-8(fp)
   18564:	10000326 	beq	r2,zero,18574 <alt_dev_llist_insert+0x2c>
   18568:	e0bffe17 	ldw	r2,-8(fp)
   1856c:	10800217 	ldw	r2,8(r2)
   18570:	1000061e 	bne	r2,zero,1858c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   18574:	001850c0 	call	1850c <alt_get_errno>
   18578:	1007883a 	mov	r3,r2
   1857c:	00800584 	movi	r2,22
   18580:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   18584:	00bffa84 	movi	r2,-22
   18588:	00001306 	br	185d8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1858c:	e0bffe17 	ldw	r2,-8(fp)
   18590:	e0ffff17 	ldw	r3,-4(fp)
   18594:	e0fffc15 	stw	r3,-16(fp)
   18598:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1859c:	e0bffd17 	ldw	r2,-12(fp)
   185a0:	e0fffc17 	ldw	r3,-16(fp)
   185a4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   185a8:	e0bffc17 	ldw	r2,-16(fp)
   185ac:	10c00017 	ldw	r3,0(r2)
   185b0:	e0bffd17 	ldw	r2,-12(fp)
   185b4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   185b8:	e0bffc17 	ldw	r2,-16(fp)
   185bc:	10800017 	ldw	r2,0(r2)
   185c0:	e0fffd17 	ldw	r3,-12(fp)
   185c4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   185c8:	e0bffc17 	ldw	r2,-16(fp)
   185cc:	e0fffd17 	ldw	r3,-12(fp)
   185d0:	10c00015 	stw	r3,0(r2)

  return 0;  
   185d4:	0005883a 	mov	r2,zero
}
   185d8:	e037883a 	mov	sp,fp
   185dc:	dfc00117 	ldw	ra,4(sp)
   185e0:	df000017 	ldw	fp,0(sp)
   185e4:	dec00204 	addi	sp,sp,8
   185e8:	f800283a 	ret

000185ec <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   185ec:	defffd04 	addi	sp,sp,-12
   185f0:	dfc00215 	stw	ra,8(sp)
   185f4:	df000115 	stw	fp,4(sp)
   185f8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   185fc:	008000b4 	movhi	r2,2
   18600:	10a61104 	addi	r2,r2,-26556
   18604:	e0bfff15 	stw	r2,-4(fp)
   18608:	00000606 	br	18624 <_do_ctors+0x38>
        (*ctor) (); 
   1860c:	e0bfff17 	ldw	r2,-4(fp)
   18610:	10800017 	ldw	r2,0(r2)
   18614:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   18618:	e0bfff17 	ldw	r2,-4(fp)
   1861c:	10bfff04 	addi	r2,r2,-4
   18620:	e0bfff15 	stw	r2,-4(fp)
   18624:	e0ffff17 	ldw	r3,-4(fp)
   18628:	008000b4 	movhi	r2,2
   1862c:	10a61204 	addi	r2,r2,-26552
   18630:	18bff62e 	bgeu	r3,r2,1860c <_do_ctors+0x20>
        (*ctor) (); 
}
   18634:	0001883a 	nop
   18638:	e037883a 	mov	sp,fp
   1863c:	dfc00117 	ldw	ra,4(sp)
   18640:	df000017 	ldw	fp,0(sp)
   18644:	dec00204 	addi	sp,sp,8
   18648:	f800283a 	ret

0001864c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1864c:	defffd04 	addi	sp,sp,-12
   18650:	dfc00215 	stw	ra,8(sp)
   18654:	df000115 	stw	fp,4(sp)
   18658:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1865c:	008000b4 	movhi	r2,2
   18660:	10a61104 	addi	r2,r2,-26556
   18664:	e0bfff15 	stw	r2,-4(fp)
   18668:	00000606 	br	18684 <_do_dtors+0x38>
        (*dtor) (); 
   1866c:	e0bfff17 	ldw	r2,-4(fp)
   18670:	10800017 	ldw	r2,0(r2)
   18674:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   18678:	e0bfff17 	ldw	r2,-4(fp)
   1867c:	10bfff04 	addi	r2,r2,-4
   18680:	e0bfff15 	stw	r2,-4(fp)
   18684:	e0ffff17 	ldw	r3,-4(fp)
   18688:	008000b4 	movhi	r2,2
   1868c:	10a61204 	addi	r2,r2,-26552
   18690:	18bff62e 	bgeu	r3,r2,1866c <_do_dtors+0x20>
        (*dtor) (); 
}
   18694:	0001883a 	nop
   18698:	e037883a 	mov	sp,fp
   1869c:	dfc00117 	ldw	ra,4(sp)
   186a0:	df000017 	ldw	fp,0(sp)
   186a4:	dec00204 	addi	sp,sp,8
   186a8:	f800283a 	ret

000186ac <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   186ac:	defffa04 	addi	sp,sp,-24
   186b0:	dfc00515 	stw	ra,20(sp)
   186b4:	df000415 	stw	fp,16(sp)
   186b8:	df000404 	addi	fp,sp,16
   186bc:	e13ffe15 	stw	r4,-8(fp)
   186c0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   186c4:	e0bfff17 	ldw	r2,-4(fp)
   186c8:	10800017 	ldw	r2,0(r2)
   186cc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   186d0:	e13ffe17 	ldw	r4,-8(fp)
   186d4:	0000dc00 	call	dc0 <strlen>
   186d8:	10800044 	addi	r2,r2,1
   186dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   186e0:	00000d06 	br	18718 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   186e4:	e0bffc17 	ldw	r2,-16(fp)
   186e8:	10800217 	ldw	r2,8(r2)
   186ec:	e0fffd17 	ldw	r3,-12(fp)
   186f0:	180d883a 	mov	r6,r3
   186f4:	e17ffe17 	ldw	r5,-8(fp)
   186f8:	1009883a 	mov	r4,r2
   186fc:	00195000 	call	19500 <memcmp>
   18700:	1000021e 	bne	r2,zero,1870c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   18704:	e0bffc17 	ldw	r2,-16(fp)
   18708:	00000706 	br	18728 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1870c:	e0bffc17 	ldw	r2,-16(fp)
   18710:	10800017 	ldw	r2,0(r2)
   18714:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   18718:	e0fffc17 	ldw	r3,-16(fp)
   1871c:	e0bfff17 	ldw	r2,-4(fp)
   18720:	18bff01e 	bne	r3,r2,186e4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   18724:	0005883a 	mov	r2,zero
}
   18728:	e037883a 	mov	sp,fp
   1872c:	dfc00117 	ldw	ra,4(sp)
   18730:	df000017 	ldw	fp,0(sp)
   18734:	dec00204 	addi	sp,sp,8
   18738:	f800283a 	ret

0001873c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1873c:	defffe04 	addi	sp,sp,-8
   18740:	dfc00115 	stw	ra,4(sp)
   18744:	df000015 	stw	fp,0(sp)
   18748:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1874c:	01440004 	movi	r5,4096
   18750:	0009883a 	mov	r4,zero
   18754:	00193880 	call	19388 <alt_icache_flush>
#endif
}
   18758:	0001883a 	nop
   1875c:	e037883a 	mov	sp,fp
   18760:	dfc00117 	ldw	ra,4(sp)
   18764:	df000017 	ldw	fp,0(sp)
   18768:	dec00204 	addi	sp,sp,8
   1876c:	f800283a 	ret

00018770 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   18770:	defff904 	addi	sp,sp,-28
   18774:	dfc00615 	stw	ra,24(sp)
   18778:	df000515 	stw	fp,20(sp)
   1877c:	df000504 	addi	fp,sp,20
   18780:	e13ffc15 	stw	r4,-16(fp)
   18784:	e17ffd15 	stw	r5,-12(fp)
   18788:	e1bffe15 	stw	r6,-8(fp)
   1878c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   18790:	e1bfff17 	ldw	r6,-4(fp)
   18794:	e17ffe17 	ldw	r5,-8(fp)
   18798:	e13ffd17 	ldw	r4,-12(fp)
   1879c:	0018b300 	call	18b30 <open>
   187a0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   187a4:	e0bffb17 	ldw	r2,-20(fp)
   187a8:	10001c16 	blt	r2,zero,1881c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   187ac:	008000b4 	movhi	r2,2
   187b0:	10aada04 	addi	r2,r2,-21656
   187b4:	e0fffb17 	ldw	r3,-20(fp)
   187b8:	18c00324 	muli	r3,r3,12
   187bc:	10c5883a 	add	r2,r2,r3
   187c0:	10c00017 	ldw	r3,0(r2)
   187c4:	e0bffc17 	ldw	r2,-16(fp)
   187c8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   187cc:	008000b4 	movhi	r2,2
   187d0:	10aada04 	addi	r2,r2,-21656
   187d4:	e0fffb17 	ldw	r3,-20(fp)
   187d8:	18c00324 	muli	r3,r3,12
   187dc:	10c5883a 	add	r2,r2,r3
   187e0:	10800104 	addi	r2,r2,4
   187e4:	10c00017 	ldw	r3,0(r2)
   187e8:	e0bffc17 	ldw	r2,-16(fp)
   187ec:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   187f0:	008000b4 	movhi	r2,2
   187f4:	10aada04 	addi	r2,r2,-21656
   187f8:	e0fffb17 	ldw	r3,-20(fp)
   187fc:	18c00324 	muli	r3,r3,12
   18800:	10c5883a 	add	r2,r2,r3
   18804:	10800204 	addi	r2,r2,8
   18808:	10c00017 	ldw	r3,0(r2)
   1880c:	e0bffc17 	ldw	r2,-16(fp)
   18810:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   18814:	e13ffb17 	ldw	r4,-20(fp)
   18818:	000dc940 	call	dc94 <alt_release_fd>
  }
} 
   1881c:	0001883a 	nop
   18820:	e037883a 	mov	sp,fp
   18824:	dfc00117 	ldw	ra,4(sp)
   18828:	df000017 	ldw	fp,0(sp)
   1882c:	dec00204 	addi	sp,sp,8
   18830:	f800283a 	ret

00018834 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   18834:	defffb04 	addi	sp,sp,-20
   18838:	dfc00415 	stw	ra,16(sp)
   1883c:	df000315 	stw	fp,12(sp)
   18840:	df000304 	addi	fp,sp,12
   18844:	e13ffd15 	stw	r4,-12(fp)
   18848:	e17ffe15 	stw	r5,-8(fp)
   1884c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   18850:	01c07fc4 	movi	r7,511
   18854:	01800044 	movi	r6,1
   18858:	e17ffd17 	ldw	r5,-12(fp)
   1885c:	010000b4 	movhi	r4,2
   18860:	212add04 	addi	r4,r4,-21644
   18864:	00187700 	call	18770 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   18868:	01c07fc4 	movi	r7,511
   1886c:	000d883a 	mov	r6,zero
   18870:	e17ffe17 	ldw	r5,-8(fp)
   18874:	010000b4 	movhi	r4,2
   18878:	212ada04 	addi	r4,r4,-21656
   1887c:	00187700 	call	18770 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   18880:	01c07fc4 	movi	r7,511
   18884:	01800044 	movi	r6,1
   18888:	e17fff17 	ldw	r5,-4(fp)
   1888c:	010000b4 	movhi	r4,2
   18890:	212ae004 	addi	r4,r4,-21632
   18894:	00187700 	call	18770 <alt_open_fd>
}  
   18898:	0001883a 	nop
   1889c:	e037883a 	mov	sp,fp
   188a0:	dfc00117 	ldw	ra,4(sp)
   188a4:	df000017 	ldw	fp,0(sp)
   188a8:	dec00204 	addi	sp,sp,8
   188ac:	f800283a 	ret

000188b0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   188b0:	defff004 	addi	sp,sp,-64
   188b4:	df000f15 	stw	fp,60(sp)
   188b8:	df000f04 	addi	fp,sp,60
   188bc:	e13ffd15 	stw	r4,-12(fp)
   188c0:	e17ffe15 	stw	r5,-8(fp)
   188c4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   188c8:	00bffa84 	movi	r2,-22
   188cc:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   188d0:	e0bffd17 	ldw	r2,-12(fp)
   188d4:	10800828 	cmpgeui	r2,r2,32
   188d8:	1000501e 	bne	r2,zero,18a1c <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   188dc:	0005303a 	rdctl	r2,status
   188e0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   188e4:	e0fff617 	ldw	r3,-40(fp)
   188e8:	00bfff84 	movi	r2,-2
   188ec:	1884703a 	and	r2,r3,r2
   188f0:	1001703a 	wrctl	status,r2
  
  return context;
   188f4:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   188f8:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   188fc:	008000b4 	movhi	r2,2
   18900:	1094c004 	addi	r2,r2,21248
   18904:	e0fffd17 	ldw	r3,-12(fp)
   18908:	180690fa 	slli	r3,r3,3
   1890c:	10c5883a 	add	r2,r2,r3
   18910:	e0ffff17 	ldw	r3,-4(fp)
   18914:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   18918:	008000b4 	movhi	r2,2
   1891c:	1094c004 	addi	r2,r2,21248
   18920:	e0fffd17 	ldw	r3,-12(fp)
   18924:	180690fa 	slli	r3,r3,3
   18928:	10c5883a 	add	r2,r2,r3
   1892c:	10800104 	addi	r2,r2,4
   18930:	e0fffe17 	ldw	r3,-8(fp)
   18934:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   18938:	e0bfff17 	ldw	r2,-4(fp)
   1893c:	10001926 	beq	r2,zero,189a4 <alt_irq_register+0xf4>
   18940:	e0bffd17 	ldw	r2,-12(fp)
   18944:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18948:	0005303a 	rdctl	r2,status
   1894c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18950:	e0fff717 	ldw	r3,-36(fp)
   18954:	00bfff84 	movi	r2,-2
   18958:	1884703a 	and	r2,r3,r2
   1895c:	1001703a 	wrctl	status,r2
  
  return context;
   18960:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   18964:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   18968:	00c00044 	movi	r3,1
   1896c:	e0bff217 	ldw	r2,-56(fp)
   18970:	1884983a 	sll	r2,r3,r2
   18974:	1007883a 	mov	r3,r2
   18978:	d0a80517 	ldw	r2,-24556(gp)
   1897c:	1884b03a 	or	r2,r3,r2
   18980:	d0a80515 	stw	r2,-24556(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   18984:	d0a80517 	ldw	r2,-24556(gp)
   18988:	100170fa 	wrctl	ienable,r2
   1898c:	e0bff817 	ldw	r2,-32(fp)
   18990:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18994:	e0bff917 	ldw	r2,-28(fp)
   18998:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1899c:	0005883a 	mov	r2,zero
   189a0:	00001906 	br	18a08 <alt_irq_register+0x158>
   189a4:	e0bffd17 	ldw	r2,-12(fp)
   189a8:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   189ac:	0005303a 	rdctl	r2,status
   189b0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   189b4:	e0fffa17 	ldw	r3,-24(fp)
   189b8:	00bfff84 	movi	r2,-2
   189bc:	1884703a 	and	r2,r3,r2
   189c0:	1001703a 	wrctl	status,r2
  
  return context;
   189c4:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   189c8:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   189cc:	00c00044 	movi	r3,1
   189d0:	e0bff417 	ldw	r2,-48(fp)
   189d4:	1884983a 	sll	r2,r3,r2
   189d8:	0084303a 	nor	r2,zero,r2
   189dc:	1007883a 	mov	r3,r2
   189e0:	d0a80517 	ldw	r2,-24556(gp)
   189e4:	1884703a 	and	r2,r3,r2
   189e8:	d0a80515 	stw	r2,-24556(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   189ec:	d0a80517 	ldw	r2,-24556(gp)
   189f0:	100170fa 	wrctl	ienable,r2
   189f4:	e0bffb17 	ldw	r2,-20(fp)
   189f8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   189fc:	e0bffc17 	ldw	r2,-16(fp)
   18a00:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   18a04:	0005883a 	mov	r2,zero
   18a08:	e0bff115 	stw	r2,-60(fp)
   18a0c:	e0bff317 	ldw	r2,-52(fp)
   18a10:	e0bff515 	stw	r2,-44(fp)
   18a14:	e0bff517 	ldw	r2,-44(fp)
   18a18:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   18a1c:	e0bff117 	ldw	r2,-60(fp)
}
   18a20:	e037883a 	mov	sp,fp
   18a24:	df000017 	ldw	fp,0(sp)
   18a28:	dec00104 	addi	sp,sp,4
   18a2c:	f800283a 	ret

00018a30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   18a30:	defffe04 	addi	sp,sp,-8
   18a34:	dfc00115 	stw	ra,4(sp)
   18a38:	df000015 	stw	fp,0(sp)
   18a3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   18a40:	d0a00d17 	ldw	r2,-32716(gp)
   18a44:	10000326 	beq	r2,zero,18a54 <alt_get_errno+0x24>
   18a48:	d0a00d17 	ldw	r2,-32716(gp)
   18a4c:	103ee83a 	callr	r2
   18a50:	00000106 	br	18a58 <alt_get_errno+0x28>
   18a54:	d0a7e804 	addi	r2,gp,-24672
}
   18a58:	e037883a 	mov	sp,fp
   18a5c:	dfc00117 	ldw	ra,4(sp)
   18a60:	df000017 	ldw	fp,0(sp)
   18a64:	dec00204 	addi	sp,sp,8
   18a68:	f800283a 	ret

00018a6c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   18a6c:	defffd04 	addi	sp,sp,-12
   18a70:	df000215 	stw	fp,8(sp)
   18a74:	df000204 	addi	fp,sp,8
   18a78:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   18a7c:	e0bfff17 	ldw	r2,-4(fp)
   18a80:	10800217 	ldw	r2,8(r2)
   18a84:	10d00034 	orhi	r3,r2,16384
   18a88:	e0bfff17 	ldw	r2,-4(fp)
   18a8c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   18a90:	e03ffe15 	stw	zero,-8(fp)
   18a94:	00001d06 	br	18b0c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   18a98:	008000b4 	movhi	r2,2
   18a9c:	10aada04 	addi	r2,r2,-21656
   18aa0:	e0fffe17 	ldw	r3,-8(fp)
   18aa4:	18c00324 	muli	r3,r3,12
   18aa8:	10c5883a 	add	r2,r2,r3
   18aac:	10c00017 	ldw	r3,0(r2)
   18ab0:	e0bfff17 	ldw	r2,-4(fp)
   18ab4:	10800017 	ldw	r2,0(r2)
   18ab8:	1880111e 	bne	r3,r2,18b00 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   18abc:	008000b4 	movhi	r2,2
   18ac0:	10aada04 	addi	r2,r2,-21656
   18ac4:	e0fffe17 	ldw	r3,-8(fp)
   18ac8:	18c00324 	muli	r3,r3,12
   18acc:	10c5883a 	add	r2,r2,r3
   18ad0:	10800204 	addi	r2,r2,8
   18ad4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   18ad8:	1000090e 	bge	r2,zero,18b00 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   18adc:	e0bffe17 	ldw	r2,-8(fp)
   18ae0:	10c00324 	muli	r3,r2,12
   18ae4:	008000b4 	movhi	r2,2
   18ae8:	10aada04 	addi	r2,r2,-21656
   18aec:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   18af0:	e0bfff17 	ldw	r2,-4(fp)
   18af4:	18800226 	beq	r3,r2,18b00 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   18af8:	00bffcc4 	movi	r2,-13
   18afc:	00000806 	br	18b20 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   18b00:	e0bffe17 	ldw	r2,-8(fp)
   18b04:	10800044 	addi	r2,r2,1
   18b08:	e0bffe15 	stw	r2,-8(fp)
   18b0c:	d0a00c17 	ldw	r2,-32720(gp)
   18b10:	1007883a 	mov	r3,r2
   18b14:	e0bffe17 	ldw	r2,-8(fp)
   18b18:	18bfdf2e 	bgeu	r3,r2,18a98 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   18b1c:	0005883a 	mov	r2,zero
}
   18b20:	e037883a 	mov	sp,fp
   18b24:	df000017 	ldw	fp,0(sp)
   18b28:	dec00104 	addi	sp,sp,4
   18b2c:	f800283a 	ret

00018b30 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   18b30:	defff604 	addi	sp,sp,-40
   18b34:	dfc00915 	stw	ra,36(sp)
   18b38:	df000815 	stw	fp,32(sp)
   18b3c:	df000804 	addi	fp,sp,32
   18b40:	e13ffd15 	stw	r4,-12(fp)
   18b44:	e17ffe15 	stw	r5,-8(fp)
   18b48:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   18b4c:	00bfffc4 	movi	r2,-1
   18b50:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   18b54:	00bffb44 	movi	r2,-19
   18b58:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   18b5c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   18b60:	d1600a04 	addi	r5,gp,-32728
   18b64:	e13ffd17 	ldw	r4,-12(fp)
   18b68:	00186ac0 	call	186ac <alt_find_dev>
   18b6c:	e0bff815 	stw	r2,-32(fp)
   18b70:	e0bff817 	ldw	r2,-32(fp)
   18b74:	1000051e 	bne	r2,zero,18b8c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   18b78:	e13ffd17 	ldw	r4,-12(fp)
   18b7c:	00191a40 	call	191a4 <alt_find_file>
   18b80:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   18b84:	00800044 	movi	r2,1
   18b88:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   18b8c:	e0bff817 	ldw	r2,-32(fp)
   18b90:	10002926 	beq	r2,zero,18c38 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   18b94:	e13ff817 	ldw	r4,-32(fp)
   18b98:	00192ac0 	call	192ac <alt_get_fd>
   18b9c:	e0bff915 	stw	r2,-28(fp)
   18ba0:	e0bff917 	ldw	r2,-28(fp)
   18ba4:	1000030e 	bge	r2,zero,18bb4 <open+0x84>
    {
      status = index;
   18ba8:	e0bff917 	ldw	r2,-28(fp)
   18bac:	e0bffa15 	stw	r2,-24(fp)
   18bb0:	00002306 	br	18c40 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   18bb4:	e0bff917 	ldw	r2,-28(fp)
   18bb8:	10c00324 	muli	r3,r2,12
   18bbc:	008000b4 	movhi	r2,2
   18bc0:	10aada04 	addi	r2,r2,-21656
   18bc4:	1885883a 	add	r2,r3,r2
   18bc8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   18bcc:	e0fffe17 	ldw	r3,-8(fp)
   18bd0:	00900034 	movhi	r2,16384
   18bd4:	10bfffc4 	addi	r2,r2,-1
   18bd8:	1886703a 	and	r3,r3,r2
   18bdc:	e0bffc17 	ldw	r2,-16(fp)
   18be0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   18be4:	e0bffb17 	ldw	r2,-20(fp)
   18be8:	1000051e 	bne	r2,zero,18c00 <open+0xd0>
   18bec:	e13ffc17 	ldw	r4,-16(fp)
   18bf0:	0018a6c0 	call	18a6c <alt_file_locked>
   18bf4:	e0bffa15 	stw	r2,-24(fp)
   18bf8:	e0bffa17 	ldw	r2,-24(fp)
   18bfc:	10001016 	blt	r2,zero,18c40 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   18c00:	e0bff817 	ldw	r2,-32(fp)
   18c04:	10800317 	ldw	r2,12(r2)
   18c08:	10000826 	beq	r2,zero,18c2c <open+0xfc>
   18c0c:	e0bff817 	ldw	r2,-32(fp)
   18c10:	10800317 	ldw	r2,12(r2)
   18c14:	e1ffff17 	ldw	r7,-4(fp)
   18c18:	e1bffe17 	ldw	r6,-8(fp)
   18c1c:	e17ffd17 	ldw	r5,-12(fp)
   18c20:	e13ffc17 	ldw	r4,-16(fp)
   18c24:	103ee83a 	callr	r2
   18c28:	00000106 	br	18c30 <open+0x100>
   18c2c:	0005883a 	mov	r2,zero
   18c30:	e0bffa15 	stw	r2,-24(fp)
   18c34:	00000206 	br	18c40 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   18c38:	00bffb44 	movi	r2,-19
   18c3c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   18c40:	e0bffa17 	ldw	r2,-24(fp)
   18c44:	1000090e 	bge	r2,zero,18c6c <open+0x13c>
  {
    alt_release_fd (index);  
   18c48:	e13ff917 	ldw	r4,-28(fp)
   18c4c:	000dc940 	call	dc94 <alt_release_fd>
    ALT_ERRNO = -status;
   18c50:	0018a300 	call	18a30 <alt_get_errno>
   18c54:	1007883a 	mov	r3,r2
   18c58:	e0bffa17 	ldw	r2,-24(fp)
   18c5c:	0085c83a 	sub	r2,zero,r2
   18c60:	18800015 	stw	r2,0(r3)
    return -1;
   18c64:	00bfffc4 	movi	r2,-1
   18c68:	00000106 	br	18c70 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   18c6c:	e0bff917 	ldw	r2,-28(fp)
}
   18c70:	e037883a 	mov	sp,fp
   18c74:	dfc00117 	ldw	ra,4(sp)
   18c78:	df000017 	ldw	fp,0(sp)
   18c7c:	dec00204 	addi	sp,sp,8
   18c80:	f800283a 	ret

00018c84 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   18c84:	defffa04 	addi	sp,sp,-24
   18c88:	df000515 	stw	fp,20(sp)
   18c8c:	df000504 	addi	fp,sp,20
   18c90:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18c94:	0005303a 	rdctl	r2,status
   18c98:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18c9c:	e0fffc17 	ldw	r3,-16(fp)
   18ca0:	00bfff84 	movi	r2,-2
   18ca4:	1884703a 	and	r2,r3,r2
   18ca8:	1001703a 	wrctl	status,r2
  
  return context;
   18cac:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   18cb0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   18cb4:	e0bfff17 	ldw	r2,-4(fp)
   18cb8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   18cbc:	e0bffd17 	ldw	r2,-12(fp)
   18cc0:	10800017 	ldw	r2,0(r2)
   18cc4:	e0fffd17 	ldw	r3,-12(fp)
   18cc8:	18c00117 	ldw	r3,4(r3)
   18ccc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   18cd0:	e0bffd17 	ldw	r2,-12(fp)
   18cd4:	10800117 	ldw	r2,4(r2)
   18cd8:	e0fffd17 	ldw	r3,-12(fp)
   18cdc:	18c00017 	ldw	r3,0(r3)
   18ce0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   18ce4:	e0bffd17 	ldw	r2,-12(fp)
   18ce8:	e0fffd17 	ldw	r3,-12(fp)
   18cec:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   18cf0:	e0bffd17 	ldw	r2,-12(fp)
   18cf4:	e0fffd17 	ldw	r3,-12(fp)
   18cf8:	10c00015 	stw	r3,0(r2)
   18cfc:	e0bffb17 	ldw	r2,-20(fp)
   18d00:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18d04:	e0bffe17 	ldw	r2,-8(fp)
   18d08:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   18d0c:	0001883a 	nop
   18d10:	e037883a 	mov	sp,fp
   18d14:	df000017 	ldw	fp,0(sp)
   18d18:	dec00104 	addi	sp,sp,4
   18d1c:	f800283a 	ret

00018d20 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   18d20:	defffb04 	addi	sp,sp,-20
   18d24:	dfc00415 	stw	ra,16(sp)
   18d28:	df000315 	stw	fp,12(sp)
   18d2c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   18d30:	d0a02f17 	ldw	r2,-32580(gp)
   18d34:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   18d38:	d0a80717 	ldw	r2,-24548(gp)
   18d3c:	10800044 	addi	r2,r2,1
   18d40:	d0a80715 	stw	r2,-24548(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   18d44:	00002e06 	br	18e00 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   18d48:	e0bffd17 	ldw	r2,-12(fp)
   18d4c:	10800017 	ldw	r2,0(r2)
   18d50:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   18d54:	e0bffd17 	ldw	r2,-12(fp)
   18d58:	10800403 	ldbu	r2,16(r2)
   18d5c:	10803fcc 	andi	r2,r2,255
   18d60:	10000426 	beq	r2,zero,18d74 <alt_tick+0x54>
   18d64:	d0a80717 	ldw	r2,-24548(gp)
   18d68:	1000021e 	bne	r2,zero,18d74 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   18d6c:	e0bffd17 	ldw	r2,-12(fp)
   18d70:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   18d74:	e0bffd17 	ldw	r2,-12(fp)
   18d78:	10800217 	ldw	r2,8(r2)
   18d7c:	d0e80717 	ldw	r3,-24548(gp)
   18d80:	18801d36 	bltu	r3,r2,18df8 <alt_tick+0xd8>
   18d84:	e0bffd17 	ldw	r2,-12(fp)
   18d88:	10800403 	ldbu	r2,16(r2)
   18d8c:	10803fcc 	andi	r2,r2,255
   18d90:	1000191e 	bne	r2,zero,18df8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   18d94:	e0bffd17 	ldw	r2,-12(fp)
   18d98:	10800317 	ldw	r2,12(r2)
   18d9c:	e0fffd17 	ldw	r3,-12(fp)
   18da0:	18c00517 	ldw	r3,20(r3)
   18da4:	1809883a 	mov	r4,r3
   18da8:	103ee83a 	callr	r2
   18dac:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   18db0:	e0bfff17 	ldw	r2,-4(fp)
   18db4:	1000031e 	bne	r2,zero,18dc4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   18db8:	e13ffd17 	ldw	r4,-12(fp)
   18dbc:	0018c840 	call	18c84 <alt_alarm_stop>
   18dc0:	00000d06 	br	18df8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   18dc4:	e0bffd17 	ldw	r2,-12(fp)
   18dc8:	10c00217 	ldw	r3,8(r2)
   18dcc:	e0bfff17 	ldw	r2,-4(fp)
   18dd0:	1887883a 	add	r3,r3,r2
   18dd4:	e0bffd17 	ldw	r2,-12(fp)
   18dd8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   18ddc:	e0bffd17 	ldw	r2,-12(fp)
   18de0:	10c00217 	ldw	r3,8(r2)
   18de4:	d0a80717 	ldw	r2,-24548(gp)
   18de8:	1880032e 	bgeu	r3,r2,18df8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   18dec:	e0bffd17 	ldw	r2,-12(fp)
   18df0:	00c00044 	movi	r3,1
   18df4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   18df8:	e0bffe17 	ldw	r2,-8(fp)
   18dfc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   18e00:	e0fffd17 	ldw	r3,-12(fp)
   18e04:	d0a02f04 	addi	r2,gp,-32580
   18e08:	18bfcf1e 	bne	r3,r2,18d48 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   18e0c:	000ee800 	call	ee80 <OSTimeTick>
}
   18e10:	0001883a 	nop
   18e14:	e037883a 	mov	sp,fp
   18e18:	dfc00117 	ldw	ra,4(sp)
   18e1c:	df000017 	ldw	fp,0(sp)
   18e20:	dec00204 	addi	sp,sp,8
   18e24:	f800283a 	ret

00018e28 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   18e28:	deffff04 	addi	sp,sp,-4
   18e2c:	df000015 	stw	fp,0(sp)
   18e30:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   18e34:	000170fa 	wrctl	ienable,zero
}
   18e38:	0001883a 	nop
   18e3c:	e037883a 	mov	sp,fp
   18e40:	df000017 	ldw	fp,0(sp)
   18e44:	dec00104 	addi	sp,sp,4
   18e48:	f800283a 	ret

00018e4c <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   18e4c:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   18e50:	d0e00317 	ldw	r3,-32756(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   18e54:	d1280017 	ldw	r4,-24576(gp)

      stw ra,  0(sp)
   18e58:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   18e5c:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   18e60:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   18e64:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   18e68:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   18e6c:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   18e70:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   18e74:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   18e78:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   18e7c:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   18e80:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   18e84:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   18e88:	00190c00 	call	190c0 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   18e8c:	d127fb17 	ldw	r4,-24596(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   18e90:	d167f307 	ldb	r5,-24628(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   18e94:	d1280015 	stw	r4,-24576(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   18e98:	d167f345 	stb	r5,-24627(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   18e9c:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   18ea0:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   18ea4:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   18ea8:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   18eac:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   18eb0:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   18eb4:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   18eb8:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   18ebc:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   18ec0:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   18ec4:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   18ec8:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   18ecc:	d0e00315 	stw	r3,-32756(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   18ed0:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   18ed4:	f800283a 	ret

00018ed8 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   18ed8:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   18edc:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   18ee0:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   18ee4:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   18ee8:	00190c00 	call	190c0 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   18eec:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   18ef0:	d4a7f145 	stb	r18,-24635(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   18ef4:	003fe506 	br	18e8c <OSCtxSw+0x40>

00018ef8 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   18ef8:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   18efc:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   18f00:	10800054 	ori	r2,r2,1
      wrctl status, r2
   18f04:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   18f08:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   18f0c:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   18f10:	dec00204 	addi	sp,sp,8

      callr r2
   18f14:	103ee83a 	callr	r2

      nop
   18f18:	0001883a 	nop

00018f1c <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   18f1c:	defff704 	addi	sp,sp,-36
   18f20:	dfc00815 	stw	ra,32(sp)
   18f24:	df000715 	stw	fp,28(sp)
   18f28:	df000704 	addi	fp,sp,28
   18f2c:	e13ffc15 	stw	r4,-16(fp)
   18f30:	e17ffd15 	stw	r5,-12(fp)
   18f34:	e1bffe15 	stw	r6,-8(fp)
   18f38:	3805883a 	mov	r2,r7
   18f3c:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   18f40:	e0fffe17 	ldw	r3,-8(fp)
   18f44:	00bfff04 	movi	r2,-4
   18f48:	1884703a 	and	r2,r3,r2
   18f4c:	10bef704 	addi	r2,r2,-1060
   18f50:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   18f54:	01810904 	movi	r6,1060
   18f58:	000b883a 	mov	r5,zero
   18f5c:	e13ff917 	ldw	r4,-28(fp)
   18f60:	00069f00 	call	69f0 <memset>
   18f64:	e0bff917 	ldw	r2,-28(fp)
   18f68:	10c0bb04 	addi	r3,r2,748
   18f6c:	e0bff917 	ldw	r2,-28(fp)
   18f70:	10c00115 	stw	r3,4(r2)
   18f74:	e0bff917 	ldw	r2,-28(fp)
   18f78:	10c0d504 	addi	r3,r2,852
   18f7c:	e0bff917 	ldw	r2,-28(fp)
   18f80:	10c00215 	stw	r3,8(r2)
   18f84:	e0bff917 	ldw	r2,-28(fp)
   18f88:	10c0ef04 	addi	r3,r2,956
   18f8c:	e0bff917 	ldw	r2,-28(fp)
   18f90:	10c00315 	stw	r3,12(r2)
   18f94:	e0fff917 	ldw	r3,-28(fp)
   18f98:	008000b4 	movhi	r2,2
   18f9c:	10a8a604 	addi	r2,r2,-23912
   18fa0:	18800d15 	stw	r2,52(r3)
   18fa4:	e0bff917 	ldw	r2,-28(fp)
   18fa8:	00c00044 	movi	r3,1
   18fac:	10c02915 	stw	r3,164(r2)
   18fb0:	10002a15 	stw	zero,168(r2)
   18fb4:	e0bff917 	ldw	r2,-28(fp)
   18fb8:	00ccc384 	movi	r3,13070
   18fbc:	10c02b0d 	sth	r3,172(r2)
   18fc0:	e0bff917 	ldw	r2,-28(fp)
   18fc4:	00eaf344 	movi	r3,-21555
   18fc8:	10c02b8d 	sth	r3,174(r2)
   18fcc:	e0bff917 	ldw	r2,-28(fp)
   18fd0:	00c48d04 	movi	r3,4660
   18fd4:	10c02c0d 	sth	r3,176(r2)
   18fd8:	e0bff917 	ldw	r2,-28(fp)
   18fdc:	00f99b44 	movi	r3,-6547
   18fe0:	10c02c8d 	sth	r3,178(r2)
   18fe4:	e0bff917 	ldw	r2,-28(fp)
   18fe8:	00f7bb04 	movi	r3,-8468
   18fec:	10c02d0d 	sth	r3,180(r2)
   18ff0:	e0bff917 	ldw	r2,-28(fp)
   18ff4:	00c00144 	movi	r3,5
   18ff8:	10c02d8d 	sth	r3,182(r2)
   18ffc:	e0bff917 	ldw	r2,-28(fp)
   19000:	00c002c4 	movi	r3,11
   19004:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   19008:	e0bff917 	ldw	r2,-28(fp)
   1900c:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   19010:	e0bffa17 	ldw	r2,-24(fp)
   19014:	10bff304 	addi	r2,r2,-52
   19018:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   1901c:	e0bffb17 	ldw	r2,-20(fp)
   19020:	10800c04 	addi	r2,r2,48
   19024:	e0fffc17 	ldw	r3,-16(fp)
   19028:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   1902c:	e0bffb17 	ldw	r2,-20(fp)
   19030:	10800b04 	addi	r2,r2,44
   19034:	e0fffd17 	ldw	r3,-12(fp)
   19038:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   1903c:	e0bffb17 	ldw	r2,-20(fp)
   19040:	10800a04 	addi	r2,r2,40
   19044:	e0fff917 	ldw	r3,-28(fp)
   19048:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   1904c:	008000b4 	movhi	r2,2
   19050:	10a3be04 	addi	r2,r2,-28936
   19054:	10c00104 	addi	r3,r2,4
   19058:	e0bffb17 	ldw	r2,-20(fp)
   1905c:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   19060:	e0bffb17 	ldw	r2,-20(fp)
}
   19064:	e037883a 	mov	sp,fp
   19068:	dfc00117 	ldw	ra,4(sp)
   1906c:	df000017 	ldw	fp,0(sp)
   19070:	dec00204 	addi	sp,sp,8
   19074:	f800283a 	ret

00019078 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   19078:	defffe04 	addi	sp,sp,-8
   1907c:	df000115 	stw	fp,4(sp)
   19080:	df000104 	addi	fp,sp,4
   19084:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   19088:	0001883a 	nop
   1908c:	e037883a 	mov	sp,fp
   19090:	df000017 	ldw	fp,0(sp)
   19094:	dec00104 	addi	sp,sp,4
   19098:	f800283a 	ret

0001909c <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   1909c:	defffe04 	addi	sp,sp,-8
   190a0:	df000115 	stw	fp,4(sp)
   190a4:	df000104 	addi	fp,sp,4
   190a8:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   190ac:	0001883a 	nop
   190b0:	e037883a 	mov	sp,fp
   190b4:	df000017 	ldw	fp,0(sp)
   190b8:	dec00104 	addi	sp,sp,4
   190bc:	f800283a 	ret

000190c0 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   190c0:	deffff04 	addi	sp,sp,-4
   190c4:	df000015 	stw	fp,0(sp)
   190c8:	d839883a 	mov	fp,sp
}
   190cc:	0001883a 	nop
   190d0:	e037883a 	mov	sp,fp
   190d4:	df000017 	ldw	fp,0(sp)
   190d8:	dec00104 	addi	sp,sp,4
   190dc:	f800283a 	ret

000190e0 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   190e0:	deffff04 	addi	sp,sp,-4
   190e4:	df000015 	stw	fp,0(sp)
   190e8:	d839883a 	mov	fp,sp
}
   190ec:	0001883a 	nop
   190f0:	e037883a 	mov	sp,fp
   190f4:	df000017 	ldw	fp,0(sp)
   190f8:	dec00104 	addi	sp,sp,4
   190fc:	f800283a 	ret

00019100 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   19100:	deffff04 	addi	sp,sp,-4
   19104:	df000015 	stw	fp,0(sp)
   19108:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   1910c:	0001883a 	nop
   19110:	e037883a 	mov	sp,fp
   19114:	df000017 	ldw	fp,0(sp)
   19118:	dec00104 	addi	sp,sp,4
   1911c:	f800283a 	ret

00019120 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   19120:	deffff04 	addi	sp,sp,-4
   19124:	df000015 	stw	fp,0(sp)
   19128:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   1912c:	0001883a 	nop
   19130:	e037883a 	mov	sp,fp
   19134:	df000017 	ldw	fp,0(sp)
   19138:	dec00104 	addi	sp,sp,4
   1913c:	f800283a 	ret

00019140 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   19140:	deffff04 	addi	sp,sp,-4
   19144:	df000015 	stw	fp,0(sp)
   19148:	d839883a 	mov	fp,sp
}
   1914c:	0001883a 	nop
   19150:	e037883a 	mov	sp,fp
   19154:	df000017 	ldw	fp,0(sp)
   19158:	dec00104 	addi	sp,sp,4
   1915c:	f800283a 	ret

00019160 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   19160:	deffff04 	addi	sp,sp,-4
   19164:	df000015 	stw	fp,0(sp)
   19168:	d839883a 	mov	fp,sp
}
   1916c:	0001883a 	nop
   19170:	e037883a 	mov	sp,fp
   19174:	df000017 	ldw	fp,0(sp)
   19178:	dec00104 	addi	sp,sp,4
   1917c:	f800283a 	ret

00019180 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   19180:	defffe04 	addi	sp,sp,-8
   19184:	df000115 	stw	fp,4(sp)
   19188:	df000104 	addi	fp,sp,4
   1918c:	e13fff15 	stw	r4,-4(fp)
}
   19190:	0001883a 	nop
   19194:	e037883a 	mov	sp,fp
   19198:	df000017 	ldw	fp,0(sp)
   1919c:	dec00104 	addi	sp,sp,4
   191a0:	f800283a 	ret

000191a4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   191a4:	defffb04 	addi	sp,sp,-20
   191a8:	dfc00415 	stw	ra,16(sp)
   191ac:	df000315 	stw	fp,12(sp)
   191b0:	df000304 	addi	fp,sp,12
   191b4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   191b8:	d0a00817 	ldw	r2,-32736(gp)
   191bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   191c0:	00003106 	br	19288 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   191c4:	e0bffd17 	ldw	r2,-12(fp)
   191c8:	10800217 	ldw	r2,8(r2)
   191cc:	1009883a 	mov	r4,r2
   191d0:	0000dc00 	call	dc0 <strlen>
   191d4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   191d8:	e0bffd17 	ldw	r2,-12(fp)
   191dc:	10c00217 	ldw	r3,8(r2)
   191e0:	e0bffe17 	ldw	r2,-8(fp)
   191e4:	10bfffc4 	addi	r2,r2,-1
   191e8:	1885883a 	add	r2,r3,r2
   191ec:	10800003 	ldbu	r2,0(r2)
   191f0:	10803fcc 	andi	r2,r2,255
   191f4:	1080201c 	xori	r2,r2,128
   191f8:	10bfe004 	addi	r2,r2,-128
   191fc:	10800bd8 	cmpnei	r2,r2,47
   19200:	1000031e 	bne	r2,zero,19210 <alt_find_file+0x6c>
    {
      len -= 1;
   19204:	e0bffe17 	ldw	r2,-8(fp)
   19208:	10bfffc4 	addi	r2,r2,-1
   1920c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   19210:	e0bffe17 	ldw	r2,-8(fp)
   19214:	e0ffff17 	ldw	r3,-4(fp)
   19218:	1885883a 	add	r2,r3,r2
   1921c:	10800003 	ldbu	r2,0(r2)
   19220:	10803fcc 	andi	r2,r2,255
   19224:	1080201c 	xori	r2,r2,128
   19228:	10bfe004 	addi	r2,r2,-128
   1922c:	10800be0 	cmpeqi	r2,r2,47
   19230:	1000081e 	bne	r2,zero,19254 <alt_find_file+0xb0>
   19234:	e0bffe17 	ldw	r2,-8(fp)
   19238:	e0ffff17 	ldw	r3,-4(fp)
   1923c:	1885883a 	add	r2,r3,r2
   19240:	10800003 	ldbu	r2,0(r2)
   19244:	10803fcc 	andi	r2,r2,255
   19248:	1080201c 	xori	r2,r2,128
   1924c:	10bfe004 	addi	r2,r2,-128
   19250:	10000a1e 	bne	r2,zero,1927c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   19254:	e0bffd17 	ldw	r2,-12(fp)
   19258:	10800217 	ldw	r2,8(r2)
   1925c:	e0fffe17 	ldw	r3,-8(fp)
   19260:	180d883a 	mov	r6,r3
   19264:	e17fff17 	ldw	r5,-4(fp)
   19268:	1009883a 	mov	r4,r2
   1926c:	00195000 	call	19500 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   19270:	1000021e 	bne	r2,zero,1927c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   19274:	e0bffd17 	ldw	r2,-12(fp)
   19278:	00000706 	br	19298 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   1927c:	e0bffd17 	ldw	r2,-12(fp)
   19280:	10800017 	ldw	r2,0(r2)
   19284:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   19288:	e0fffd17 	ldw	r3,-12(fp)
   1928c:	d0a00804 	addi	r2,gp,-32736
   19290:	18bfcc1e 	bne	r3,r2,191c4 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   19294:	0005883a 	mov	r2,zero
}
   19298:	e037883a 	mov	sp,fp
   1929c:	dfc00117 	ldw	ra,4(sp)
   192a0:	df000017 	ldw	fp,0(sp)
   192a4:	dec00204 	addi	sp,sp,8
   192a8:	f800283a 	ret

000192ac <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   192ac:	defff904 	addi	sp,sp,-28
   192b0:	dfc00615 	stw	ra,24(sp)
   192b4:	df000515 	stw	fp,20(sp)
   192b8:	df000504 	addi	fp,sp,20
   192bc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   192c0:	00bffa04 	movi	r2,-24
   192c4:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   192c8:	d0a7e917 	ldw	r2,-24668(gp)
   192cc:	e0bffd15 	stw	r2,-12(fp)
   192d0:	e03ffe0d 	sth	zero,-8(fp)
   192d4:	e0bffe0b 	ldhu	r2,-8(fp)
   192d8:	e0fffe84 	addi	r3,fp,-6
   192dc:	180d883a 	mov	r6,r3
   192e0:	100b883a 	mov	r5,r2
   192e4:	e13ffd17 	ldw	r4,-12(fp)
   192e8:	00136340 	call	13634 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   192ec:	e03ffb15 	stw	zero,-20(fp)
   192f0:	00001906 	br	19358 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   192f4:	008000b4 	movhi	r2,2
   192f8:	10aada04 	addi	r2,r2,-21656
   192fc:	e0fffb17 	ldw	r3,-20(fp)
   19300:	18c00324 	muli	r3,r3,12
   19304:	10c5883a 	add	r2,r2,r3
   19308:	10800017 	ldw	r2,0(r2)
   1930c:	10000f1e 	bne	r2,zero,1934c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   19310:	008000b4 	movhi	r2,2
   19314:	10aada04 	addi	r2,r2,-21656
   19318:	e0fffb17 	ldw	r3,-20(fp)
   1931c:	18c00324 	muli	r3,r3,12
   19320:	10c5883a 	add	r2,r2,r3
   19324:	e0ffff17 	ldw	r3,-4(fp)
   19328:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1932c:	d0e00c17 	ldw	r3,-32720(gp)
   19330:	e0bffb17 	ldw	r2,-20(fp)
   19334:	1880020e 	bge	r3,r2,19340 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   19338:	e0bffb17 	ldw	r2,-20(fp)
   1933c:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
   19340:	e0bffb17 	ldw	r2,-20(fp)
   19344:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   19348:	00000606 	br	19364 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1934c:	e0bffb17 	ldw	r2,-20(fp)
   19350:	10800044 	addi	r2,r2,1
   19354:	e0bffb15 	stw	r2,-20(fp)
   19358:	e0bffb17 	ldw	r2,-20(fp)
   1935c:	10800810 	cmplti	r2,r2,32
   19360:	103fe41e 	bne	r2,zero,192f4 <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   19364:	d0a7e917 	ldw	r2,-24668(gp)
   19368:	1009883a 	mov	r4,r2
   1936c:	00139ac0 	call	139ac <OSSemPost>

  return rc;
   19370:	e0bffc17 	ldw	r2,-16(fp)
}
   19374:	e037883a 	mov	sp,fp
   19378:	dfc00117 	ldw	ra,4(sp)
   1937c:	df000017 	ldw	fp,0(sp)
   19380:	dec00204 	addi	sp,sp,8
   19384:	f800283a 	ret

00019388 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   19388:	defffb04 	addi	sp,sp,-20
   1938c:	df000415 	stw	fp,16(sp)
   19390:	df000404 	addi	fp,sp,16
   19394:	e13ffe15 	stw	r4,-8(fp)
   19398:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1939c:	e0bfff17 	ldw	r2,-4(fp)
   193a0:	10840070 	cmpltui	r2,r2,4097
   193a4:	1000021e 	bne	r2,zero,193b0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   193a8:	00840004 	movi	r2,4096
   193ac:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   193b0:	e0fffe17 	ldw	r3,-8(fp)
   193b4:	e0bfff17 	ldw	r2,-4(fp)
   193b8:	1885883a 	add	r2,r3,r2
   193bc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   193c0:	e0bffe17 	ldw	r2,-8(fp)
   193c4:	e0bffc15 	stw	r2,-16(fp)
   193c8:	00000506 	br	193e0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   193cc:	e0bffc17 	ldw	r2,-16(fp)
   193d0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   193d4:	e0bffc17 	ldw	r2,-16(fp)
   193d8:	10800804 	addi	r2,r2,32
   193dc:	e0bffc15 	stw	r2,-16(fp)
   193e0:	e0fffc17 	ldw	r3,-16(fp)
   193e4:	e0bffd17 	ldw	r2,-12(fp)
   193e8:	18bff836 	bltu	r3,r2,193cc <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   193ec:	e0bffe17 	ldw	r2,-8(fp)
   193f0:	108007cc 	andi	r2,r2,31
   193f4:	10000226 	beq	r2,zero,19400 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   193f8:	e0bffc17 	ldw	r2,-16(fp)
   193fc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   19400:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   19404:	0001883a 	nop
   19408:	e037883a 	mov	sp,fp
   1940c:	df000017 	ldw	fp,0(sp)
   19410:	dec00104 	addi	sp,sp,4
   19414:	f800283a 	ret

00019418 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   19418:	defffe04 	addi	sp,sp,-8
   1941c:	df000115 	stw	fp,4(sp)
   19420:	df000104 	addi	fp,sp,4
   19424:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   19428:	e0bfff17 	ldw	r2,-4(fp)
   1942c:	10bffe84 	addi	r2,r2,-6
   19430:	10c00428 	cmpgeui	r3,r2,16
   19434:	18001a1e 	bne	r3,zero,194a0 <alt_exception_cause_generated_bad_addr+0x88>
   19438:	100690ba 	slli	r3,r2,2
   1943c:	008000b4 	movhi	r2,2
   19440:	10a51404 	addi	r2,r2,-27568
   19444:	1885883a 	add	r2,r3,r2
   19448:	10800017 	ldw	r2,0(r2)
   1944c:	1000683a 	jmp	r2
   19450:	00019490 	cmplti	zero,zero,1618
   19454:	00019490 	cmplti	zero,zero,1618
   19458:	000194a0 	cmpeqi	zero,zero,1618
   1945c:	000194a0 	cmpeqi	zero,zero,1618
   19460:	000194a0 	cmpeqi	zero,zero,1618
   19464:	00019490 	cmplti	zero,zero,1618
   19468:	00019498 	cmpnei	zero,zero,1618
   1946c:	000194a0 	cmpeqi	zero,zero,1618
   19470:	00019490 	cmplti	zero,zero,1618
   19474:	00019490 	cmplti	zero,zero,1618
   19478:	000194a0 	cmpeqi	zero,zero,1618
   1947c:	00019490 	cmplti	zero,zero,1618
   19480:	00019498 	cmpnei	zero,zero,1618
   19484:	000194a0 	cmpeqi	zero,zero,1618
   19488:	000194a0 	cmpeqi	zero,zero,1618
   1948c:	00019490 	cmplti	zero,zero,1618
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   19490:	00800044 	movi	r2,1
   19494:	00000306 	br	194a4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   19498:	0005883a 	mov	r2,zero
   1949c:	00000106 	br	194a4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   194a0:	0005883a 	mov	r2,zero
  }
}
   194a4:	e037883a 	mov	sp,fp
   194a8:	df000017 	ldw	fp,0(sp)
   194ac:	dec00104 	addi	sp,sp,4
   194b0:	f800283a 	ret

000194b4 <atexit>:
   194b4:	200b883a 	mov	r5,r4
   194b8:	000f883a 	mov	r7,zero
   194bc:	000d883a 	mov	r6,zero
   194c0:	0009883a 	mov	r4,zero
   194c4:	001957c1 	jmpi	1957c <__register_exitproc>

000194c8 <exit>:
   194c8:	defffe04 	addi	sp,sp,-8
   194cc:	000b883a 	mov	r5,zero
   194d0:	dc000015 	stw	r16,0(sp)
   194d4:	dfc00115 	stw	ra,4(sp)
   194d8:	2021883a 	mov	r16,r4
   194dc:	00196940 	call	19694 <__call_exitprocs>
   194e0:	008000b4 	movhi	r2,2
   194e4:	10b01a04 	addi	r2,r2,-16280
   194e8:	11000017 	ldw	r4,0(r2)
   194ec:	20800f17 	ldw	r2,60(r4)
   194f0:	10000126 	beq	r2,zero,194f8 <exit+0x30>
   194f4:	103ee83a 	callr	r2
   194f8:	8009883a 	mov	r4,r16
   194fc:	00198140 	call	19814 <_exit>

00019500 <memcmp>:
   19500:	01c000c4 	movi	r7,3
   19504:	3980192e 	bgeu	r7,r6,1956c <memcmp+0x6c>
   19508:	2144b03a 	or	r2,r4,r5
   1950c:	11c4703a 	and	r2,r2,r7
   19510:	10000f26 	beq	r2,zero,19550 <memcmp+0x50>
   19514:	20800003 	ldbu	r2,0(r4)
   19518:	28c00003 	ldbu	r3,0(r5)
   1951c:	10c0151e 	bne	r2,r3,19574 <memcmp+0x74>
   19520:	31bfff84 	addi	r6,r6,-2
   19524:	01ffffc4 	movi	r7,-1
   19528:	00000406 	br	1953c <memcmp+0x3c>
   1952c:	20800003 	ldbu	r2,0(r4)
   19530:	28c00003 	ldbu	r3,0(r5)
   19534:	31bfffc4 	addi	r6,r6,-1
   19538:	10c00e1e 	bne	r2,r3,19574 <memcmp+0x74>
   1953c:	21000044 	addi	r4,r4,1
   19540:	29400044 	addi	r5,r5,1
   19544:	31fff91e 	bne	r6,r7,1952c <memcmp+0x2c>
   19548:	0005883a 	mov	r2,zero
   1954c:	f800283a 	ret
   19550:	20c00017 	ldw	r3,0(r4)
   19554:	28800017 	ldw	r2,0(r5)
   19558:	18bfee1e 	bne	r3,r2,19514 <memcmp+0x14>
   1955c:	31bfff04 	addi	r6,r6,-4
   19560:	21000104 	addi	r4,r4,4
   19564:	29400104 	addi	r5,r5,4
   19568:	39bff936 	bltu	r7,r6,19550 <memcmp+0x50>
   1956c:	303fe91e 	bne	r6,zero,19514 <memcmp+0x14>
   19570:	003ff506 	br	19548 <memcmp+0x48>
   19574:	10c5c83a 	sub	r2,r2,r3
   19578:	f800283a 	ret

0001957c <__register_exitproc>:
   1957c:	defffa04 	addi	sp,sp,-24
   19580:	dc000315 	stw	r16,12(sp)
   19584:	040000b4 	movhi	r16,2
   19588:	84301a04 	addi	r16,r16,-16280
   1958c:	80c00017 	ldw	r3,0(r16)
   19590:	dc400415 	stw	r17,16(sp)
   19594:	dfc00515 	stw	ra,20(sp)
   19598:	18805217 	ldw	r2,328(r3)
   1959c:	2023883a 	mov	r17,r4
   195a0:	10003726 	beq	r2,zero,19680 <__register_exitproc+0x104>
   195a4:	10c00117 	ldw	r3,4(r2)
   195a8:	010007c4 	movi	r4,31
   195ac:	20c00e16 	blt	r4,r3,195e8 <__register_exitproc+0x6c>
   195b0:	1a000044 	addi	r8,r3,1
   195b4:	8800221e 	bne	r17,zero,19640 <__register_exitproc+0xc4>
   195b8:	18c00084 	addi	r3,r3,2
   195bc:	18c7883a 	add	r3,r3,r3
   195c0:	18c7883a 	add	r3,r3,r3
   195c4:	12000115 	stw	r8,4(r2)
   195c8:	10c7883a 	add	r3,r2,r3
   195cc:	19400015 	stw	r5,0(r3)
   195d0:	0005883a 	mov	r2,zero
   195d4:	dfc00517 	ldw	ra,20(sp)
   195d8:	dc400417 	ldw	r17,16(sp)
   195dc:	dc000317 	ldw	r16,12(sp)
   195e0:	dec00604 	addi	sp,sp,24
   195e4:	f800283a 	ret
   195e8:	00800034 	movhi	r2,0
   195ec:	10800004 	addi	r2,r2,0
   195f0:	10002626 	beq	r2,zero,1968c <__register_exitproc+0x110>
   195f4:	01006404 	movi	r4,400
   195f8:	d9400015 	stw	r5,0(sp)
   195fc:	d9800115 	stw	r6,4(sp)
   19600:	d9c00215 	stw	r7,8(sp)
   19604:	00000000 	call	0 <__alt_mem_SDRAM>
   19608:	d9400017 	ldw	r5,0(sp)
   1960c:	d9800117 	ldw	r6,4(sp)
   19610:	d9c00217 	ldw	r7,8(sp)
   19614:	10001d26 	beq	r2,zero,1968c <__register_exitproc+0x110>
   19618:	81000017 	ldw	r4,0(r16)
   1961c:	10000115 	stw	zero,4(r2)
   19620:	02000044 	movi	r8,1
   19624:	22405217 	ldw	r9,328(r4)
   19628:	0007883a 	mov	r3,zero
   1962c:	12400015 	stw	r9,0(r2)
   19630:	20805215 	stw	r2,328(r4)
   19634:	10006215 	stw	zero,392(r2)
   19638:	10006315 	stw	zero,396(r2)
   1963c:	883fde26 	beq	r17,zero,195b8 <__register_exitproc+0x3c>
   19640:	18c9883a 	add	r4,r3,r3
   19644:	2109883a 	add	r4,r4,r4
   19648:	1109883a 	add	r4,r2,r4
   1964c:	21802215 	stw	r6,136(r4)
   19650:	01800044 	movi	r6,1
   19654:	12406217 	ldw	r9,392(r2)
   19658:	30cc983a 	sll	r6,r6,r3
   1965c:	4992b03a 	or	r9,r9,r6
   19660:	12406215 	stw	r9,392(r2)
   19664:	21c04215 	stw	r7,264(r4)
   19668:	01000084 	movi	r4,2
   1966c:	893fd21e 	bne	r17,r4,195b8 <__register_exitproc+0x3c>
   19670:	11006317 	ldw	r4,396(r2)
   19674:	218cb03a 	or	r6,r4,r6
   19678:	11806315 	stw	r6,396(r2)
   1967c:	003fce06 	br	195b8 <__register_exitproc+0x3c>
   19680:	18805304 	addi	r2,r3,332
   19684:	18805215 	stw	r2,328(r3)
   19688:	003fc606 	br	195a4 <__register_exitproc+0x28>
   1968c:	00bfffc4 	movi	r2,-1
   19690:	003fd006 	br	195d4 <__register_exitproc+0x58>

00019694 <__call_exitprocs>:
   19694:	defff504 	addi	sp,sp,-44
   19698:	df000915 	stw	fp,36(sp)
   1969c:	dd400615 	stw	r21,24(sp)
   196a0:	dc800315 	stw	r18,12(sp)
   196a4:	dfc00a15 	stw	ra,40(sp)
   196a8:	ddc00815 	stw	r23,32(sp)
   196ac:	dd800715 	stw	r22,28(sp)
   196b0:	dd000515 	stw	r20,20(sp)
   196b4:	dcc00415 	stw	r19,16(sp)
   196b8:	dc400215 	stw	r17,8(sp)
   196bc:	dc000115 	stw	r16,4(sp)
   196c0:	d9000015 	stw	r4,0(sp)
   196c4:	2839883a 	mov	fp,r5
   196c8:	04800044 	movi	r18,1
   196cc:	057fffc4 	movi	r21,-1
   196d0:	008000b4 	movhi	r2,2
   196d4:	10b01a04 	addi	r2,r2,-16280
   196d8:	12000017 	ldw	r8,0(r2)
   196dc:	45005217 	ldw	r20,328(r8)
   196e0:	44c05204 	addi	r19,r8,328
   196e4:	a0001c26 	beq	r20,zero,19758 <__call_exitprocs+0xc4>
   196e8:	a0800117 	ldw	r2,4(r20)
   196ec:	15ffffc4 	addi	r23,r2,-1
   196f0:	b8000d16 	blt	r23,zero,19728 <__call_exitprocs+0x94>
   196f4:	14000044 	addi	r16,r2,1
   196f8:	8421883a 	add	r16,r16,r16
   196fc:	8421883a 	add	r16,r16,r16
   19700:	84402004 	addi	r17,r16,128
   19704:	a463883a 	add	r17,r20,r17
   19708:	a421883a 	add	r16,r20,r16
   1970c:	e0001e26 	beq	fp,zero,19788 <__call_exitprocs+0xf4>
   19710:	80804017 	ldw	r2,256(r16)
   19714:	e0801c26 	beq	fp,r2,19788 <__call_exitprocs+0xf4>
   19718:	bdffffc4 	addi	r23,r23,-1
   1971c:	843fff04 	addi	r16,r16,-4
   19720:	8c7fff04 	addi	r17,r17,-4
   19724:	bd7ff91e 	bne	r23,r21,1970c <__call_exitprocs+0x78>
   19728:	00800034 	movhi	r2,0
   1972c:	10800004 	addi	r2,r2,0
   19730:	10000926 	beq	r2,zero,19758 <__call_exitprocs+0xc4>
   19734:	a0800117 	ldw	r2,4(r20)
   19738:	1000301e 	bne	r2,zero,197fc <__call_exitprocs+0x168>
   1973c:	a0800017 	ldw	r2,0(r20)
   19740:	10003226 	beq	r2,zero,1980c <__call_exitprocs+0x178>
   19744:	a009883a 	mov	r4,r20
   19748:	98800015 	stw	r2,0(r19)
   1974c:	00000000 	call	0 <__alt_mem_SDRAM>
   19750:	9d000017 	ldw	r20,0(r19)
   19754:	a03fe41e 	bne	r20,zero,196e8 <__call_exitprocs+0x54>
   19758:	dfc00a17 	ldw	ra,40(sp)
   1975c:	df000917 	ldw	fp,36(sp)
   19760:	ddc00817 	ldw	r23,32(sp)
   19764:	dd800717 	ldw	r22,28(sp)
   19768:	dd400617 	ldw	r21,24(sp)
   1976c:	dd000517 	ldw	r20,20(sp)
   19770:	dcc00417 	ldw	r19,16(sp)
   19774:	dc800317 	ldw	r18,12(sp)
   19778:	dc400217 	ldw	r17,8(sp)
   1977c:	dc000117 	ldw	r16,4(sp)
   19780:	dec00b04 	addi	sp,sp,44
   19784:	f800283a 	ret
   19788:	a0800117 	ldw	r2,4(r20)
   1978c:	80c00017 	ldw	r3,0(r16)
   19790:	10bfffc4 	addi	r2,r2,-1
   19794:	15c01426 	beq	r2,r23,197e8 <__call_exitprocs+0x154>
   19798:	80000015 	stw	zero,0(r16)
   1979c:	183fde26 	beq	r3,zero,19718 <__call_exitprocs+0x84>
   197a0:	95c8983a 	sll	r4,r18,r23
   197a4:	a0806217 	ldw	r2,392(r20)
   197a8:	a5800117 	ldw	r22,4(r20)
   197ac:	2084703a 	and	r2,r4,r2
   197b0:	10000b26 	beq	r2,zero,197e0 <__call_exitprocs+0x14c>
   197b4:	a0806317 	ldw	r2,396(r20)
   197b8:	2088703a 	and	r4,r4,r2
   197bc:	20000c1e 	bne	r4,zero,197f0 <__call_exitprocs+0x15c>
   197c0:	89400017 	ldw	r5,0(r17)
   197c4:	d9000017 	ldw	r4,0(sp)
   197c8:	183ee83a 	callr	r3
   197cc:	a0800117 	ldw	r2,4(r20)
   197d0:	15bfbf1e 	bne	r2,r22,196d0 <__call_exitprocs+0x3c>
   197d4:	98800017 	ldw	r2,0(r19)
   197d8:	153fcf26 	beq	r2,r20,19718 <__call_exitprocs+0x84>
   197dc:	003fbc06 	br	196d0 <__call_exitprocs+0x3c>
   197e0:	183ee83a 	callr	r3
   197e4:	003ff906 	br	197cc <__call_exitprocs+0x138>
   197e8:	a5c00115 	stw	r23,4(r20)
   197ec:	003feb06 	br	1979c <__call_exitprocs+0x108>
   197f0:	89000017 	ldw	r4,0(r17)
   197f4:	183ee83a 	callr	r3
   197f8:	003ff406 	br	197cc <__call_exitprocs+0x138>
   197fc:	a0800017 	ldw	r2,0(r20)
   19800:	a027883a 	mov	r19,r20
   19804:	1029883a 	mov	r20,r2
   19808:	003fb606 	br	196e4 <__call_exitprocs+0x50>
   1980c:	0005883a 	mov	r2,zero
   19810:	003ffb06 	br	19800 <__call_exitprocs+0x16c>

00019814 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   19814:	defffd04 	addi	sp,sp,-12
   19818:	df000215 	stw	fp,8(sp)
   1981c:	df000204 	addi	fp,sp,8
   19820:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   19824:	d027f145 	stb	zero,-24635(gp)
   19828:	e0bfff17 	ldw	r2,-4(fp)
   1982c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   19830:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   19834:	10000226 	beq	r2,zero,19840 <_exit+0x2c>
    ALT_SIM_FAIL();
   19838:	002af070 	cmpltui	zero,zero,43969
   1983c:	00000106 	br	19844 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   19840:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   19844:	003fff06 	br	19844 <_exit+0x30>

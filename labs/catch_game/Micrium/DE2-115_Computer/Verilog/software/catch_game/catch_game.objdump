
catch_game.elf:     file format elf32-littlenios2
catch_game.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001a7ac memsz 0x0001a7ac flags r-x
    LOAD off    0x0001b7cc vaddr 0x0001a7cc paddr 0x0001c6a8 align 2**12
         filesz 0x00001edc memsz 0x00001edc flags rw-
    LOAD off    0x0001e584 vaddr 0x0001e584 paddr 0x0001e584 align 2**12
         filesz 0x00000000 memsz 0x00007428 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00019a78  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000b0c  00019cc0  00019cc0  0001acc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001edc  0001a7cc  0001c6a8  0001b7cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00007428  0001e584  0001e584  0001e584  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  000259ac  000259ac  0001d6a8  2**0
                  CONTENTS
  7 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM 00000000  09000000  09000000  0001d6a8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001d6a8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001098  00000000  00000000  0001d6d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00030400  00000000  00000000  0001e768  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b27e  00000000  00000000  0004eb68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ea01  00000000  00000000  00059de6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003968  00000000  00000000  000687e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000055ad  00000000  00000000  0006c150  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000178aa  00000000  00000000  000716fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  00088fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018c0  00000000  00000000  00088fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  0008ffe5  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0008ffeb  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0008fff0  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0008fff1  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0008fff2  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0008fff6  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0008fffa  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0008fffe  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00090007  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00090010  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000f  00000000  00000000  00090019  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000044  00000000  00000000  00090028  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     001d2080  00000000  00000000  0009006c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
00019cc0 l    d  .rodata	00000000 .rodata
0001a7cc l    d  .rwdata	00000000 .rwdata
0001e584 l    d  .bss	00000000 .bss
000259ac l    d  .SDRAM	00000000 .SDRAM
09000000 l    d  .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM	00000000 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../catch_game_bsp//obj/HAL/src/crt0.o
00000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
0000041c l     F .text	00000274 Task_VGA_init
00000000 l    df *ABS*	00000000 utils.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 impure.c
0001a820 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001a2ae l     O .rodata	00000010 zeroes.4404
0000342c l     F .text	000000bc __sbprintf
0001a2be l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000363c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000516c l     F .text	00000008 __fp_unlock
00005180 l     F .text	0000019c __sinit.part.1
0000531c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
0001ac64 l     O .rwdata	00000020 lc_ctype_charset
0001ac44 l     O .rwdata	00000020 lc_message_charset
0001ac84 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0001a2ec l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00008718 l     F .text	000000fc __sprint_r.part.0
0001a420 l     O .rodata	00000010 blanks.4348
0001a410 l     O .rodata	00000010 zeroes.4349
00009ca4 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000d960 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000da6c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000da98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000db84 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000dc64 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000dd50 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0000df1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001c61c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000e168 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0001c620 l     O .rwdata	00000004 lockid
0001e5f0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0001c624 l     O .rwdata	00000004 lockid
0001e5f8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0000fb98 l     F .text	00000048 OS_InitMisc
0000fbe0 l     F .text	0000006c OS_InitRdyList
0000fd4c l     F .text	000000e4 OS_InitTCBList
0000fab8 l     F .text	000000e0 OS_InitEventList
0000fc4c l     F .text	00000080 OS_InitTaskIdle
0000fccc l     F .text	00000080 OS_InitTaskStat
0000ffbc l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00011cdc l     F .text	000000f4 OS_FlagTaskRdy
00011a9c l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00015d8c l     F .text	00000034 alt_dev_reg
0001b26c l     O .rwdata	0000106c JTAG_UART
0001c2d8 l     O .rwdata	00000030 AV_Config
0001c308 l     O .rwdata	00000030 Audio_Subsystem_Audio
0001c338 l     O .rwdata	0000002c Char_LCD_16x2
0001c364 l     O .rwdata	0000002c IrDA
0001c390 l     O .rwdata	00000038 PS2_Port
0001c3c8 l     O .rwdata	00000038 PS2_Port_Dual
0001c400 l     O .rwdata	0000002c Serial_Port
0001c42c l     O .rwdata	00000034 USB
0001c460 l     O .rwdata	0000005c VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA
0001c4bc l     O .rwdata	0000005c VGA_Subsystem_VGA_Pixel_DMA
0001c518 l     O .rwdata	0000005c Video_In_Subsystem_Video_In_DMA
0001c574 l     O .rwdata	00000044 VGA_Subsystem_VGA_Pixel_RGB_Resampler
0001c5b8 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00016a04 l     F .text	000002a8 altera_avalon_jtag_uart_irq
00016cac l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00017488 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00018984 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00018be8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00018ea8 l     F .text	0000003c alt_get_errno
00018ee4 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001e65c g     O .bss	00000004 alt_instruction_exception_handler
00007d5c g     F .text	00000074 _mprec_log10
0001c672 g     O .rwdata	00000002 OSTaskNameSize
00007e48 g     F .text	0000008c __any_on
0000a240 g     F .text	00000054 _isatty_r
0001a2f8 g     O .rodata	00000028 __mprec_tinytens
0000de60 g     F .text	000000bc alt_main
000010ac g     F .text	000000c0 _puts_r
0001e584 g     O .bss	00000004 video_resolution
000258ac g     O .bss	00000100 alt_irq
00018044 g     F .text	00000060 alt_up_ps2_disable_read_interrupt
0000a294 g     F .text	00000060 _lseek_r
000124fc g     F .text	000000cc OS_MemInit
0001c6a8 g       *ABS*	00000000 __flash_rwdata_start
00015d2c g     F .text	00000060 OSTimeSet
000175ec g     F .text	00000040 alt_up_character_lcd_send_cmd
0000c48c g     F .text	00000088 .hidden __eqdf2
0000e80c g     F .text	00000610 OSEventPendMulti
000259ac g       *ABS*	00000000 __alt_heap_start
000194f0 g     F .text	00000024 OSTaskCreateHook
0001c64a g     O .rwdata	00000002 OSMboxEn
0000ee74 g     F .text	0000004c OSIntEnter
0000a4ac g     F .text	0000009c _wcrtomb_r
000085d8 g     F .text	0000005c __sseek
000054bc g     F .text	00000010 __sinit
0000a354 g     F .text	00000140 __swbuf_r
00017e5c g     F .text	00000034 read_CE_bit
0001c65a g     O .rwdata	00000002 OSQEn
00005f84 g     F .text	0000007c _setlocale_r
00005324 g     F .text	00000068 __sfmoreglue
0000e4e0 g     F .text	000000cc __malloc_unlock
00019558 g     F .text	00000020 OSTaskStatHook
000181e4 g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
000186d8 g     F .text	00000090 alt_up_rs232_read_fd
0001e600 g     O .bss	00000001 OSLockNesting
0001c698 g     O .rwdata	00000002 OSDataSize
0001e601 g     O .bss	00000001 OSRunning
00006c54 g     F .text	0000015c memmove
00019598 g     F .text	00000020 OSInitHookBegin
0001c690 g     O .rwdata	00000002 OSTmrSize
000054a4 g     F .text	00000018 _cleanup
00006ed8 g     F .text	000000a8 _Balloc
0001e588 g     O .bss	00000004 screen_x
0001e604 g     O .bss	00000004 OSIdleCtr
0000c514 g     F .text	000000dc .hidden __gtdf2
000192a0 g     F .text	00000024 altera_nios2_gen2_irq_init
00019370 g       .text	00000000 OSStartTsk
00017578 g     F .text	00000074 get_DDRAM_addr
000102fc g     F .text	000002d4 OS_TCBInit
0001e688 g     O .bss	00002000 task_key_press_stk
00000000 g     F .entry	0000001c __reset
0001c696 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001c636 g     O .rwdata	00000002 OSEventSize
0001e608 g     O .bss	00000001 OSPrioHighRdy
0000a1e4 g     F .text	0000005c _fstat_r
00019514 g     F .text	00000024 OSTaskDelHook
0001e5dc g     O .bss	00000004 errno
00008554 g     F .text	00000008 __seofread
00019350 g       .text	00000000 OSStartHighRdy
000147c8 g     F .text	000001e4 OSTaskCreateExt
00000d8c g     F .text	0000008c VGA_info_right
000115e4 g     F .text	00000060 OSFlagPendGetFlagsRdy
0001c676 g     O .rwdata	00000002 OSTaskStatStkSize
00010760 g     F .text	00000308 OSFlagAccept
00012b34 g     F .text	000000b8 OSQFlush
000125c8 g     F .text	00000140 OSQAccept
0001e5e8 g     O .bss	00000004 alt_argv
000245e4 g       *ABS*	00000000 _gp
0001e58c g     O .bss	00000002 background_color
0001461c g     F .text	000001ac OSTaskCreate
0001412c g     F .text	000004f0 OSTaskChangePrio
0001e5fc g     O .bss	00000004 alt_heapsem
000105d0 g     F .text	00000190 OSDebugInit
000149ac g     F .text	00000344 OSTaskDel
0001b0ec g     O .rwdata	00000180 alt_fd_list
00022688 g     O .bss	00000370 OSFlagTbl
0000f898 g     F .text	000000b8 OS_EventTaskRemove
0001e590 g     O .bss	00000004 SEM_read_KEYs
00018b24 g     F .text	00000090 alt_find_dev
00006b0c g     F .text	00000148 memcpy
0001c660 g     O .rwdata	00000002 OSRdyTblSize
00017794 g     F .text	00000050 alt_up_character_lcd_write_fd
00005174 g     F .text	0000000c _cleanup_r
0000d778 g     F .text	000000dc .hidden __floatsidf
00018cac g     F .text	0000007c alt_io_redirect
0000c5f0 g     F .text	000000f4 .hidden __ltdf2
00019cc0 g       *ABS*	00000000 __DTOR_END__
00017d2c g     F .text	00000090 alt_up_irda_write_fd
00018664 g     F .text	00000074 alt_up_rs232_read_data
0000116c g     F .text	00000014 puts
00019890 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000e5ac g     F .text	00000120 OSEventNameGet
0001c644 g     O .rwdata	00000002 OSFlagMax
00008438 g     F .text	00000074 __fpclassifyd
00007cb8 g     F .text	000000a4 __ratio
0000eec0 g     F .text	000000f8 OSIntExit
00009c88 g     F .text	0000001c __vfiprintf_internal
0001c67e g     O .rwdata	00000002 OSTCBSize
0001e609 g     O .bss	00000001 OSPrioCur
0001e594 g     O .bss	00000004 KEY2_flag
00017b28 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
00016f08 g     F .text	000002bc altera_avalon_jtag_uart_read
0000b23c g     F .text	00000064 .hidden __udivsi3
0000dbc0 g     F .text	000000a4 isatty
00000d2c g     F .text	00000060 VGA_animated_char
0001c664 g     O .rwdata	00000002 OSStkWidth
0001a348 g     O .rodata	000000c8 __mprec_tens
0001c658 g     O .rwdata	00000002 OSPtrSize
00006000 g     F .text	0000000c __locale_charset
0001c638 g     O .rwdata	00000002 OSEventTblSize
00017ac8 g     F .text	00000060 alt_up_irda_disable_read_interrupt
000192c4 g       .text	00000000 OSCtxSw
00019800 g     F .text	00000090 alt_icache_flush
0001e5d8 g     O .bss	00000004 __malloc_top_pad
0001e60c g     O .bss	00000004 OSTCBList
0001e5e0 g     O .bss	00000004 alt_fd_list_lock
0001c5f4 g     O .rwdata	00000004 __mb_cur_max
00006030 g     F .text	0000000c _localeconv_r
000072e4 g     F .text	0000003c __i2b
00005940 g     F .text	000004bc __sfvwrite_r
000229f8 g     O .bss	00000c30 OSMemTbl
0001e610 g     O .bss	00000001 OSTickStepState
000084ac g     F .text	00000054 _sbrk_r
0001c65c g     O .rwdata	00000002 OSQMax
00023628 g     O .bss	00000800 OSTaskStatStk
00012138 g     F .text	000000f0 OSMemNameGet
0001c63c g     O .rwdata	00000002 OSFlagEn
0000a2f4 g     F .text	00000060 _read_r
0001c682 g     O .rwdata	00000002 OSTimeTickHookEn
00012fe4 g     F .text	00000168 OSQPost
00011dd0 g     F .text	000000a4 OS_FlagUnlink
0001c614 g     O .rwdata	00000004 alt_max_fd
000185e0 g     F .text	00000044 alt_up_rs232_check_parity
0001e598 g     O .bss	00000004 col_offset
0000fe84 g     F .text	00000068 OS_MemCopy
0000feec g     F .text	000000d0 OS_Sched
00009ed8 g     F .text	000000f0 _fclose_r
00012048 g     F .text	000000f0 OSMemGet
00014fd8 g     F .text	000001b4 OSTaskNameSet
00017e90 g     F .text	00000030 read_num_bytes_available
0000513c g     F .text	00000030 fflush
0001e5d4 g     O .bss	00000004 __malloc_max_sbrked_mem
0001e614 g     O .bss	00000004 OSCtxSwCtr
00020688 g     O .bss	00002000 task_disp_vga_char_stk
00019578 g     F .text	00000020 OSTimeTickHook
00018d28 g     F .text	00000180 alt_irq_register
0001c646 g     O .rwdata	00000002 OSFlagNameSize
00017df8 g     F .text	00000034 read_RI_bit
0000f950 g     F .text	00000100 OS_EventTaskRemoveMulti
0000b2f8 g     F .text	000008ac .hidden __adddf3
0000f748 g     F .text	00000150 OS_EventTaskWaitMulti
00007a60 g     F .text	0000010c __b2d
0001c65e g     O .rwdata	00000002 OSQSize
0000ac0c g     F .text	00000538 .hidden __umoddi3
0000dd8c g     F .text	000000d4 lseek
00013a94 g     F .text	0000020c OSSemPend
0001c5ec g     O .rwdata	00000004 _global_impure_ptr
00007ed4 g     F .text	00000564 _realloc_r
0001c648 g     O .rwdata	00000002 OSLowestPrio
000259ac g       *ABS*	00000000 __bss_end
000195f8 g     F .text	00000024 OSTCBInitHook
0001c68e g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00019198 g     F .text	00000108 alt_tick
0000a694 g     F .text	00000578 .hidden __udivdi3
0000a140 g     F .text	00000024 _fputwc_r
0001c630 g     O .rwdata	00000002 OSEventEn
0001a320 g     O .rodata	00000028 __mprec_bigtens
000070c8 g     F .text	00000104 __s2b
0001c68a g     O .rwdata	00000002 OSTmrCfgNameSize
0000d854 g     F .text	000000a8 .hidden __floatunsidf
000077a0 g     F .text	00000060 __mcmp
00017ef4 g     F .text	0000002c read_data_byte
000054dc g     F .text	00000018 __fp_lock_all
00011bfc g     F .text	000000e0 OS_FlagInit
000190fc g     F .text	0000009c alt_alarm_stop
00017e2c g     F .text	00000030 read_RE_bit
0001c66c g     O .rwdata	00000002 OSTaskIdleStkSize
00000954 g     F .text	00000168 Check_KEYs
0001e650 g     O .bss	00000004 alt_irq_active
000136cc g     F .text	000000b0 OSSemAccept
00000abc g     F .text	00000094 VGA_text
0001233c g     F .text	000000d8 OSMemPut
00011e74 g     F .text	000001d4 OSMemCreate
0001e618 g     O .bss	00000004 OSIdleCtrMax
00017b68 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d8 alt_irq_handler
0001b0c4 g     O .rwdata	00000028 alt_dev_null
0001c680 g     O .rwdata	00000002 OSTicksPerSec
0001e59c g     O .bss	00000004 KEY_val
00017a34 g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
000192c4 g       .text	00000000 OSIntCtxSw
000180a4 g     F .text	00000074 alt_up_ps2_write_data_byte
00018964 g     F .text	00000020 alt_dcache_flush_all
000071cc g     F .text	00000068 __hi0bits
0000d6f8 g     F .text	00000080 .hidden __fixdfsi
0001e61c g     O .bss	00000004 OSTCBFreeList
0001c6a8 g       *ABS*	00000000 __ram_rwdata_end
00013ca0 g     F .text	0000016c OSSemPendAbort
0001c60c g     O .rwdata	00000008 alt_dev_list
0000e1a4 g     F .text	000000f8 write
0001c684 g     O .rwdata	00000002 OSVersionNbr
0001a7cc g       *ABS*	00000000 __ram_rodata_end
0000dad4 g     F .text	000000b0 fstat
00001088 g     F .text	00000024 fprintf
00018768 g     F .text	00000094 alt_up_rs232_write_fd
0001e5a0 g     O .bss	00000004 res_offset
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000c5f0 g     F .text	000000f4 .hidden __ledf2
0001c62c g     O .rwdata	00000004 OSEndiannessTest
00007518 g     F .text	00000140 __pow5mult
0000882c g     F .text	0000145c ___vfiprintf_internal_r
0001e5cc g     O .bss	00000004 __nlocale_changed
0000b2a0 g     F .text	00000058 .hidden __umodsi3
0001c63e g     O .rwdata	00000002 OSFlagGrpSize
000259ac g       *ABS*	00000000 end
000183d4 g     F .text	00000098 alt_up_ps2_write_fd
00017ba4 g     F .text	00000044 alt_up_irda_check_parity
000168c8 g     F .text	0000013c altera_avalon_jtag_uart_init
00010154 g     F .text	000000dc OS_TaskStat
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
00019cc0 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00017504 g     F .text	00000074 alt_avalon_timer_sc_init
0000d8fc g     F .text	00000064 .hidden __clzsi2
000171c4 g     F .text	000002c4 altera_avalon_jtag_uart_write
000054cc g     F .text	00000004 __sfp_lock_acquire
00006a28 g     F .text	000000e4 memchr
0000fe30 g     F .text	00000054 OS_MemClr
000176a0 g     F .text	0000007c alt_up_character_lcd_write
00001218 g     F .text	000021f8 ___vfprintf_internal_r
00019394 g     F .text	0000015c OSTaskStkInit
00005630 g     F .text	00000310 _free_r
0001a7cc g     O .rwdata	00000051 clear_row_text
0000600c g     F .text	00000010 __locale_mb_cur_max
0000f4a0 g     F .text	00000198 OS_EventTaskRdy
0001e5a4 g     O .bss	00000004 screen_y
00019b0c g     F .text	00000180 __call_exitprocs
0001e620 g     O .bss	00000001 OSCPUUsage
0001e5c8 g     O .bss	00000004 __mlocale_changed
0001c5f8 g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	0000003c _start
0001e654 g     O .bss	00000004 _alt_tick_rate
00012bec g     F .text	0000028c OSQPend
00015898 g     F .text	00000104 OSTimeDly
00007658 g     F .text	00000148 __lshift
0001e658 g     O .bss	00000004 _alt_nticks
0000df58 g     F .text	000000fc read
00015df8 g     F .text	0000096c alt_sys_init
000178e4 g     F .text	0000008c alt_up_character_lcd_shift_display
000199f4 g     F .text	00000118 __register_exitproc
0001e621 g     O .bss	00000001 OSTaskCtr
000182f0 g     F .text	00000058 alt_up_ps2_clear_fifo
000185a4 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00000b50 g     F .text	00000138 VGA_box
0001599c g     F .text	00000160 OSTimeDlyHMSM
00007320 g     F .text	000001f8 __multiply
00017970 g     F .text	0000008c alt_up_character_lcd_erase_pos
00016db0 g     F .text	00000068 altera_avalon_jtag_uart_close
0001a7cc g       *ABS*	00000000 __ram_rwdata_start
00019cc0 g       *ABS*	00000000 __ram_rodata_start
0001e660 g     O .bss	00000028 __malloc_current_mallinfo
0001c632 g     O .rwdata	00000002 OSEventMax
00007b6c g     F .text	0000014c __d2b
00013e0c g     F .text	00000110 OSSemPost
0000f044 g     F .text	000000dc OSSchedUnlock
00016764 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00019724 g     F .text	000000dc alt_get_fd
0001e624 g     O .bss	00000004 OSMemFreeList
0000f190 g     F .text	000000b0 OSStatInit
000119d8 g     F .text	000000c4 OSFlagQuery
0001e5a8 g     O .bss	00000004 KEY1_flag
0001c668 g     O .rwdata	00000002 OSTaskCreateExtEn
00009dc0 g     F .text	00000054 _close_r
0001e5ac g     O .bss	00000004 pos_y
00019978 g     F .text	0000007c memcmp
0000f480 g     F .text	00000020 OS_Dummy
00016824 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00000ed0 g     F .text	00000190 get_data_bits
000259ac g       *ABS*	00000000 __alt_stack_base
00016874 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00017a6c g     F .text	0000005c alt_up_irda_enable_read_interrupt
000034e8 g     F .text	00000154 __swsetup_r
00023e28 g     O .bss	000001e0 OSQTbl
0000bba4 g     F .text	000008e8 .hidden __divdf3
0000538c g     F .text	00000118 __sfp
00007dd0 g     F .text	00000078 __copybits
0001acbc g     O .rwdata	00000408 __malloc_av_
000054d8 g     F .text	00000004 __sinit_lock_release
0001e628 g     O .bss	00000004 OSTCBHighRdy
0000c6e4 g     F .text	00000718 .hidden __muldf3
00008500 g     F .text	00000054 __sread
0001e62c g     O .bss	00000004 OSQFreeList
00018504 g     F .text	00000060 alt_up_rs232_disable_read_interrupt
0001961c g     F .text	00000108 alt_find_file
000189c0 g     F .text	000000a4 alt_dev_llist_insert
0000e3c0 g     F .text	00000120 __malloc_lock
00001060 g     F .text	00000028 _fprintf_r
0000e0b8 g     F .text	000000b0 sbrk
0000e6cc g     F .text	00000140 OSEventNameSet
000050e0 g     F .text	0000005c _fflush_r
00009e14 g     F .text	000000c4 _calloc_r
0001e630 g     O .bss	00000001 OSRdyGrp
00000284 g     F .text	00000198 Task_read_KEYs
0001e584 g       *ABS*	00000000 __bss_start
00006db0 g     F .text	00000128 memset
0001e5b0 g     O .bss	00000001 err
0000073c g     F .text	00000218 main
0001e5ec g     O .bss	00000004 alt_envp
0001e5d0 g     O .bss	00000004 __malloc_max_total_mem
00000690 g     F .text	000000ac Task_VGA_char
000167c4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000a494 g     F .text	00000018 __swbuf
0001a54c g     O .rodata	00000100 OSUnMapTbl
0001c662 g     O .rwdata	00000002 OSSemEn
00017858 g     F .text	0000008c alt_up_character_lcd_shift_cursor
00011644 g     F .text	00000394 OSFlagPost
00008634 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
00009fc8 g     F .text	00000014 fclose
0000f638 g     F .text	00000110 OS_EventTaskWait
00018280 g     F .text	00000070 alt_up_ps2_read_data_byte
00010230 g     F .text	000000cc OS_TaskStatStkChk
00014cf0 g     F .text	00000150 OSTaskDelReq
0001e5b4 g     O .bss	00000004 pos_x
0000383c g     F .text	00001688 _dtoa_r
0000621c g     F .text	0000080c _malloc_r
0000a608 g     F .text	00000030 __ascii_wctomb
0001c618 g     O .rwdata	00000004 alt_errno
0000f120 g     F .text	00000070 OSStart
0000e360 g     F .text	00000060 __env_unlock
00005dfc g     F .text	000000c4 _fwalk
0001518c g     F .text	000001d4 OSTaskResume
00012414 g     F .text	000000e8 OSMemQuery
0001c674 g     O .rwdata	00000002 OSTaskStatEn
00017be8 g     F .text	00000040 alt_up_irda_write_data
0001c64e g     O .rwdata	00000002 OSMemMax
0001314c g     F .text	00000170 OSQPostFront
0001846c g     F .text	0000003c alt_up_ps2_open_dev
0000b144 g     F .text	00000084 .hidden __divsi3
0001e631 g     O .bss	00000003 OSRdyTbl
0001c628 g     O .rwdata	00000002 OSDebugEn
00017664 g     F .text	0000003c alt_up_character_lcd_open_dev
0000550c g     F .text	00000124 _malloc_trim_r
00017fe8 g     F .text	0000005c alt_up_ps2_enable_read_interrupt
00019cc0 g       *ABS*	00000000 __CTOR_END__
0001c640 g     O .rwdata	00000002 OSFlagNodeSize
0001c688 g     O .rwdata	00000002 OSTmrCfgMax
0001762c g     F .text	00000038 alt_up_character_lcd_init
0000863c g     F .text	000000dc strcmp
00012708 g     F .text	000001ac OSQCreate
00014e40 g     F .text	00000198 OSTaskNameGet
00019cc0 g       *ABS*	00000000 __flash_rodata_start
000132bc g     F .text	0000020c OSQPostOpt
0000f240 g     F .text	00000220 OSTimeTick
0001c670 g     O .rwdata	00000002 OSTaskMax
00019cc0 g       *ABS*	00000000 __DTOR_LIST__
0001377c g     F .text	000000d8 OSSemCreate
0001c694 g     O .rwdata	00000002 OSTmrWheelSize
0001e5b8 g     O .bss	00000004 KEY3_flag
000187fc g     F .text	0000003c alt_up_rs232_open_dev
0000c48c g     F .text	00000088 .hidden __nedf2
0001c66a g     O .rwdata	00000002 OSTaskDelEn
00013f1c g     F .text	00000110 OSSemQuery
000128b4 g     F .text	00000280 OSQDel
00012e78 g     F .text	0000016c OSQPendAbort
00015dc0 g     F .text	00000038 alt_irq_init
0000e054 g     F .text	00000064 alt_release_fd
00017ec0 g     F .text	00000034 read_data_valid
000179fc g     F .text	00000038 alt_up_character_lcd_cursor_off
0001a430 g     O .rodata	00000100 .hidden __clz_tab
0001e5c4 g     O .bss	00000004 _PathLocale
00018180 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
0001992c g     F .text	00000014 atexit
00009d60 g     F .text	00000060 _write_r
0000efb8 g     F .text	0000008c OSSchedLock
0000603c g     F .text	00000018 setlocale
00010a68 g     F .text	00000108 OSFlagCreate
0001c5f0 g     O .rwdata	00000004 _impure_ptr
0001e5e4 g     O .bss	00000004 alt_argc
00004ec4 g     F .text	0000021c __sflush_r
0001c5e8 g     O .rwdata	00000002 clear_text
00018ac4 g     F .text	00000060 _do_dtors
00006028 g     F .text	00000008 __locale_cjk_lang
0001c63a g     O .rwdata	00000002 OSEventMultiEn
09000000 g       *ABS*	00000000 __alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00010b70 g     F .text	00000248 OSFlagDel
0001e634 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
000079fc g     F .text	00000064 __ulp
0001102c g     F .text	000005b8 OSFlagPend
0001c686 g     O .rwdata	00000002 OSTmrEn
000054f4 g     F .text	00000018 __fp_unlock_all
0001c604 g     O .rwdata	00000008 alt_fs_list
00010030 g     F .text	00000074 OS_StrCopy
000184a8 g     F .text	0000005c alt_up_rs232_enable_read_interrupt
00018624 g     F .text	00000040 alt_up_rs232_write_data
0001c650 g     O .rwdata	00000002 OSMemNameSize
000195b8 g     F .text	00000020 OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
0001c67c g     O .rwdata	00000002 OSTCBPrioTblMax
00006054 g     F .text	0000000c localeconv
0001c678 g     O .rwdata	00000002 OSTaskStatStkChkEn
0001c64c g     O .rwdata	00000002 OSMemEn
0001c656 g     O .rwdata	00000002 OSMutexEn
0001c6a8 g       *ABS*	00000000 _edata
0001e5bc g     O .bss	00000004 KEY0_flag
000259ac g       *ABS*	00000000 _end
0001e638 g     O .bss	00000001 OSIntNesting
00009fdc g     F .text	00000164 __fputwc
00000248 g       *ABS*	00000000 __ram_exceptions_end
00016e18 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00015afc g     F .text	000001d4 OSTimeDlyResume
00010ee0 g     F .text	0000014c OSFlagNameSet
00015360 g     F .text	000001c0 OSTaskStkChk
0001c652 g     O .rwdata	00000002 OSMemSize
0000855c g     F .text	0000007c __swrite
0001c5fc g     O .rwdata	00000004 __malloc_trim_threshold
0000601c g     F .text	0000000c __locale_msgcharset
0001e63c g     O .bss	00000004 OSTCBCur
00019940 g     F .text	00000038 exit
00017c28 g     F .text	00000074 alt_up_irda_read_data
0001c654 g     O .rwdata	00000002 OSMemTblSize
00005ec0 g     F .text	000000c4 _fwalk_reent
00017f20 g     F .text	000000c8 alt_up_ps2_init
00007800 g     F .text	000001fc __mdiff
0000b1c8 g     F .text	00000074 .hidden __modsi3
00000e18 g     F .text	000000b8 resample_rgb
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000054d0 g     F .text	00000004 __sfp_lock_release
0000ee1c g     F .text	00000058 OSInit
00015704 g     F .text	00000124 OSTaskQuery
0001771c g     F .text	00000078 alt_up_character_lcd_string
00013624 g     F .text	000000a8 OS_QInit
000100a4 g     F .text	00000054 OS_StrLen
00017dbc g     F .text	0000003c alt_up_irda_open_dev
00012228 g     F .text	00000114 OSMemNameSet
0001c66e g     O .rwdata	00000002 OSTaskProfileEn
0001e640 g     O .bss	00000004 OSTime
00024008 g     O .bss	00000800 OSTaskIdleStk
00019c8c g     F .text	00000034 _exit
00018838 g     F .text	0000012c alt_alarm_start
00010db8 g     F .text	00000128 OSFlagNameGet
00015cd0 g     F .text	0000005c OSTimeGet
00006060 g     F .text	000001bc __smakebuf_r
00000c88 g     F .text	000000a4 VGA_char_box
00018118 g     F .text	00000068 alt_up_ps2_wait_for_ack
00001180 g     F .text	00000098 strlen
00019538 g     F .text	00000020 OSTaskSwHook
00018fa8 g     F .text	00000154 open
00024808 g     O .bss	00000b40 OSEventTbl
0000c514 g     F .text	000000dc .hidden __gedf2
00025348 g     O .bss	00000510 OSTCBTbl
0001402c g     F .text	00000100 OSSemSet
0001c600 g     O .rwdata	00000004 __wctomb
00008814 g     F .text	00000018 __sprint_r
00018bb4 g     F .text	00000034 alt_icache_flush_all
000177e4 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0001c69c g     O .rwdata	00000004 alt_priority_mask
00013854 g     F .text	00000240 OSSemDel
0001e644 g     O .bss	00000004 OSFlagFreeList
0001c634 g     O .rwdata	00000002 OSEventNameSize
00003410 g     F .text	0000001c __vfprintf_internal
0001e648 g     O .bss	00000001 OSStatRdy
00025858 g     O .bss	00000054 OSTCBPrioTbl
0000a638 g     F .text	0000005c _wctomb_r
0000e29c g     F .text	000000c4 __env_lock
00018348 g     F .text	0000008c alt_up_ps2_read_fd
0001c67a g     O .rwdata	00000002 OSTaskSwHookEn
0000cdfc g     F .text	000008fc .hidden __subdf3
00017c9c g     F .text	00000090 alt_up_irda_read_fd
0001c5e4 g     O .rwdata	00000002 text_disp
00007234 g     F .text	000000b0 __lo0bits
0001c6a0 g     O .rwdata	00000008 alt_alarm_list
0001c642 g     O .rwdata	00000002 OSFlagWidth
00018a64 g     F .text	00000060 _do_ctors
00018564 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000a548 g     F .text	000000c0 wcrtomb
0000d99c g     F .text	000000d0 close
0001e5f4 g     O .bss	00000004 alt_envsem
0001e64c g     O .bss	00000004 OSIdleCtrRun
0000f460 g     F .text	00000020 OSVersion
0001c68c g     O .rwdata	00000002 OSTmrCfgWheelSize
0000dccc g     F .text	00000084 alt_load
00015828 g     F .text	00000070 OS_TaskStkClr
0001c666 g     O .rwdata	00000002 OSTaskCreateEn
0000fa50 g     F .text	00000068 OS_EventWaitListInit
0000a164 g     F .text	00000080 fputwc
000195d8 g     F .text	00000020 OSTaskIdleHook
000054d4 g     F .text	00000004 __sinit_lock_acquire
0001e5c0 g     O .bss	00000004 rgb_status
00006fa8 g     F .text	00000120 __multadd
00015520 g     F .text	000001e4 OSTaskSuspend
00006f80 g     F .text	00000028 _Bfree
000100f8 g     F .text	0000005c OS_TaskIdle
0001c692 g     O .rwdata	00000002 OSTmrTblSize
000134c8 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	000ee740 	call	ee74 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000b4 	movhi	r2,2
 140:	10962b04 	addi	r2,r2,22700
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	10962b04 	addi	r2,r2,22700
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	000eec00 	call	eec0 <OSIntExit>
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a81e17 	ldw	r2,-24456(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a81e17 	ldw	r2,-24456(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     248:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     24c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     250:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     254:	d6917914 	ori	gp,gp,17892
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     258:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     25c:	10b96114 	ori	r2,r2,58756

    movhi r3, %hi(__bss_end)
     260:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     264:	18d66b14 	ori	r3,r3,22956

    beq r2, r3, 1f
     268:	10c00326 	beq	r2,r3,278 <_start+0x30>

0:
    stw zero, (r2)
     26c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     274:	10fffd36 	bltu	r2,r3,26c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     278:	000dccc0 	call	dccc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     27c:	000de600 	call	de60 <alt_main>

00000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     280:	003fff06 	br	280 <alt_after_alt_main>

00000284 <Task_read_KEYs>:
#define TASK_VGA_CHAR_PRIORITY 2

/* Prints "Hello World" and sleeps for three seconds */
void
Task_read_KEYs(void* pdata)
{
     284:	defffc04 	addi	sp,sp,-16
     288:	dfc00315 	stw	ra,12(sp)
     28c:	df000215 	stw	fp,8(sp)
     290:	df000204 	addi	fp,sp,8
     294:	e13fff15 	stw	r4,-4(fp)
  debug("Started: Task_read_KEYs");
     298:	d0a00317 	ldw	r2,-32756(gp)
     29c:	10800317 	ldw	r2,12(r2)
     2a0:	01c00a04 	movi	r7,40
     2a4:	018000b4 	movhi	r6,2
     2a8:	31a73004 	addi	r6,r6,-25408
     2ac:	014000b4 	movhi	r5,2
     2b0:	29673404 	addi	r5,r5,-25392
     2b4:	1009883a 	mov	r4,r2
     2b8:	00010880 	call	1088 <fprintf>
  KEY0_flag, KEY1_flag, KEY2_flag, KEY3_flag = 0, 0, 0, 0;
     2bc:	d027f515 	stw	zero,-24620(gp)

  for (;;) {
    OSSemPend(SEM_read_KEYs, 0, &err);
     2c0:	d0a7eb17 	ldw	r2,-24660(gp)
     2c4:	d1a7f304 	addi	r6,gp,-24628
     2c8:	000b883a 	mov	r5,zero
     2cc:	1009883a 	mov	r4,r2
     2d0:	0013a940 	call	13a94 <OSSemPend>

    debug("%u: \tHello from Task_read_KEYs", OSTime);
     2d4:	d0a00317 	ldw	r2,-32756(gp)
     2d8:	10c00317 	ldw	r3,12(r2)
     2dc:	d0a81717 	ldw	r2,-24484(gp)
     2e0:	d8800015 	stw	r2,0(sp)
     2e4:	01c00b84 	movi	r7,46
     2e8:	018000b4 	movhi	r6,2
     2ec:	31a73004 	addi	r6,r6,-25408
     2f0:	014000b4 	movhi	r5,2
     2f4:	29673e04 	addi	r5,r5,-25352
     2f8:	1809883a 	mov	r4,r3
     2fc:	00010880 	call	1088 <fprintf>
    Check_KEYs(&KEY0_flag, &KEY1_flag, &KEY2_flag, &KEY3_flag);
     300:	d1e7f504 	addi	r7,gp,-24620
     304:	d1a7ec04 	addi	r6,gp,-24656
     308:	d167f104 	addi	r5,gp,-24636
     30c:	d127f604 	addi	r4,gp,-24616
     310:	00009540 	call	954 <Check_KEYs>

    if (KEY0_flag) {
     314:	d0a7f617 	ldw	r2,-24616(gp)
     318:	10000d26 	beq	r2,zero,350 <Task_read_KEYs+0xcc>
      debug("MOVE RIGHT");
     31c:	d0a00317 	ldw	r2,-32756(gp)
     320:	10800317 	ldw	r2,12(r2)
     324:	01c00c84 	movi	r7,50
     328:	018000b4 	movhi	r6,2
     32c:	31a73004 	addi	r6,r6,-25408
     330:	014000b4 	movhi	r5,2
     334:	29674a04 	addi	r5,r5,-25304
     338:	1009883a 	mov	r4,r2
     33c:	00010880 	call	1088 <fprintf>
      ++pos_x;
     340:	d0a7f417 	ldw	r2,-24624(gp)
     344:	10800044 	addi	r2,r2,1
     348:	d0a7f415 	stw	r2,-24624(gp)
      KEY0_flag = 0;
     34c:	d027f615 	stw	zero,-24616(gp)
    }

    if (KEY1_flag) {
     350:	d0a7f117 	ldw	r2,-24636(gp)
     354:	10000d26 	beq	r2,zero,38c <Task_read_KEYs+0x108>
      debug("MOVE DOWN");
     358:	d0a00317 	ldw	r2,-32756(gp)
     35c:	10800317 	ldw	r2,12(r2)
     360:	01c00e04 	movi	r7,56
     364:	018000b4 	movhi	r6,2
     368:	31a73004 	addi	r6,r6,-25408
     36c:	014000b4 	movhi	r5,2
     370:	29675104 	addi	r5,r5,-25276
     374:	1009883a 	mov	r4,r2
     378:	00010880 	call	1088 <fprintf>
      ++pos_y;
     37c:	d0a7f217 	ldw	r2,-24632(gp)
     380:	10800044 	addi	r2,r2,1
     384:	d0a7f215 	stw	r2,-24632(gp)
      KEY1_flag = 0;
     388:	d027f115 	stw	zero,-24636(gp)
    }

    if (KEY2_flag) {
     38c:	d0a7ec17 	ldw	r2,-24656(gp)
     390:	10000d26 	beq	r2,zero,3c8 <Task_read_KEYs+0x144>
      debug("MOVE UP");
     394:	d0a00317 	ldw	r2,-32756(gp)
     398:	10800317 	ldw	r2,12(r2)
     39c:	01c00f84 	movi	r7,62
     3a0:	018000b4 	movhi	r6,2
     3a4:	31a73004 	addi	r6,r6,-25408
     3a8:	014000b4 	movhi	r5,2
     3ac:	29675704 	addi	r5,r5,-25252
     3b0:	1009883a 	mov	r4,r2
     3b4:	00010880 	call	1088 <fprintf>
      --pos_y;
     3b8:	d0a7f217 	ldw	r2,-24632(gp)
     3bc:	10bfffc4 	addi	r2,r2,-1
     3c0:	d0a7f215 	stw	r2,-24632(gp)
      KEY2_flag = 0;
     3c4:	d027ec15 	stw	zero,-24656(gp)
    }

    if (KEY3_flag) {
     3c8:	d0a7f517 	ldw	r2,-24620(gp)
     3cc:	10000d26 	beq	r2,zero,404 <Task_read_KEYs+0x180>
      debug("MOVE LEFT");
     3d0:	d0a00317 	ldw	r2,-32756(gp)
     3d4:	10800317 	ldw	r2,12(r2)
     3d8:	01c01104 	movi	r7,68
     3dc:	018000b4 	movhi	r6,2
     3e0:	31a73004 	addi	r6,r6,-25408
     3e4:	014000b4 	movhi	r5,2
     3e8:	29675d04 	addi	r5,r5,-25228
     3ec:	1009883a 	mov	r4,r2
     3f0:	00010880 	call	1088 <fprintf>
      --pos_x;
     3f4:	d0a7f417 	ldw	r2,-24624(gp)
     3f8:	10bfffc4 	addi	r2,r2,-1
     3fc:	d0a7f415 	stw	r2,-24624(gp)
      KEY3_flag = 0;
     400:	d027f515 	stw	zero,-24620(gp)
    }

    OSSemPost(SEM_read_KEYs);
     404:	d0a7eb17 	ldw	r2,-24660(gp)
     408:	1009883a 	mov	r4,r2
     40c:	0013e0c0 	call	13e0c <OSSemPost>
    OSTimeDly(1);
     410:	01000044 	movi	r4,1
     414:	00158980 	call	15898 <OSTimeDly>
  }
     418:	003fa906 	br	2c0 <Task_read_KEYs+0x3c>

0000041c <Task_VGA_init>:
}

/* Initial Display Setup */
static void
Task_VGA_init(void)
{
     41c:	defffc04 	addi	sp,sp,-16
     420:	dfc00315 	stw	ra,12(sp)
     424:	df000215 	stw	fp,8(sp)
     428:	df000204 	addi	fp,sp,8
  debug("Clearing the screen initially");
     42c:	d0a00317 	ldw	r2,-32756(gp)
     430:	10800317 	ldw	r2,12(r2)
     434:	01c01484 	movi	r7,82
     438:	018000b4 	movhi	r6,2
     43c:	31a73004 	addi	r6,r6,-25408
     440:	014000b4 	movhi	r5,2
     444:	29676304 	addi	r5,r5,-25204
     448:	1009883a 	mov	r4,r2
     44c:	00010880 	call	1088 <fprintf>
  VGA_box(0, 0, STANDARD_X, STANDARD_Y, 0); /* clear the screen */
     450:	d8000015 	stw	zero,0(sp)
     454:	01c03c04 	movi	r7,240
     458:	01805004 	movi	r6,320
     45c:	000b883a 	mov	r5,zero
     460:	0009883a 	mov	r4,zero
     464:	0000b500 	call	b50 <VGA_box>
  /* clearing all characters from the screen */
  for (int i = 0; i < 60; i++)
     468:	e03fff15 	stw	zero,-4(fp)
     46c:	00000806 	br	490 <Task_VGA_init+0x74>
    VGA_text(0, i, clear_row_text);
     470:	018000b4 	movhi	r6,2
     474:	31a9f304 	addi	r6,r6,-22580
     478:	e17fff17 	ldw	r5,-4(fp)
     47c:	0009883a 	mov	r4,zero
     480:	0000abc0 	call	abc <VGA_text>
Task_VGA_init(void)
{
  debug("Clearing the screen initially");
  VGA_box(0, 0, STANDARD_X, STANDARD_Y, 0); /* clear the screen */
  /* clearing all characters from the screen */
  for (int i = 0; i < 60; i++)
     484:	e0bfff17 	ldw	r2,-4(fp)
     488:	10800044 	addi	r2,r2,1
     48c:	e0bfff15 	stw	r2,-4(fp)
     490:	e0bfff17 	ldw	r2,-4(fp)
     494:	10800f10 	cmplti	r2,r2,60
     498:	103ff51e 	bne	r2,zero,470 <Task_VGA_init+0x54>
    VGA_text(0, i, clear_row_text);

  debug("Initializing VGA Display");
     49c:	d0a00317 	ldw	r2,-32756(gp)
     4a0:	10800317 	ldw	r2,12(r2)
     4a4:	01c01604 	movi	r7,88
     4a8:	018000b4 	movhi	r6,2
     4ac:	31a73004 	addi	r6,r6,-25408
     4b0:	014000b4 	movhi	r5,2
     4b4:	29676e04 	addi	r5,r5,-25160
     4b8:	1009883a 	mov	r4,r2
     4bc:	00010880 	call	1088 <fprintf>
  VGA_info_right(0,
     4c0:	d0a7ea0b 	ldhu	r2,-24664(gp)
     4c4:	10bfffcc 	andi	r2,r2,65535
     4c8:	10a0001c 	xori	r2,r2,32768
     4cc:	10a00004 	addi	r2,r2,-32768
     4d0:	100f883a 	mov	r7,r2
     4d4:	018000b4 	movhi	r6,2
     4d8:	31a77804 	addi	r6,r6,-25120
     4dc:	01400504 	movi	r5,20
     4e0:	0009883a 	mov	r4,zero
     4e4:	0000d8c0 	call	d8c <VGA_info_right>
                 20,
                 "                                                          "
                 "                      ",
                 background_color);
                 
  VGA_info_right(70,  0, "          ", background_color);
     4e8:	d0a7ea0b 	ldhu	r2,-24664(gp)
     4ec:	10bfffcc 	andi	r2,r2,65535
     4f0:	10a0001c 	xori	r2,r2,32768
     4f4:	10a00004 	addi	r2,r2,-32768
     4f8:	100f883a 	mov	r7,r2
     4fc:	018000b4 	movhi	r6,2
     500:	31a78d04 	addi	r6,r6,-25036
     504:	000b883a 	mov	r5,zero
     508:	01001184 	movi	r4,70
     50c:	0000d8c0 	call	d8c <VGA_info_right>
  VGA_info_right(70,  1, "CATCH     ", background_color);
     510:	d0a7ea0b 	ldhu	r2,-24664(gp)
     514:	10bfffcc 	andi	r2,r2,65535
     518:	10a0001c 	xori	r2,r2,32768
     51c:	10a00004 	addi	r2,r2,-32768
     520:	100f883a 	mov	r7,r2
     524:	018000b4 	movhi	r6,2
     528:	31a79004 	addi	r6,r6,-25024
     52c:	01400044 	movi	r5,1
     530:	01001184 	movi	r4,70
     534:	0000d8c0 	call	d8c <VGA_info_right>
  VGA_info_right(70,  2, "THE       ", background_color);
     538:	d0a7ea0b 	ldhu	r2,-24664(gp)
     53c:	10bfffcc 	andi	r2,r2,65535
     540:	10a0001c 	xori	r2,r2,32768
     544:	10a00004 	addi	r2,r2,-32768
     548:	100f883a 	mov	r7,r2
     54c:	018000b4 	movhi	r6,2
     550:	31a79304 	addi	r6,r6,-25012
     554:	01400084 	movi	r5,2
     558:	01001184 	movi	r4,70
     55c:	0000d8c0 	call	d8c <VGA_info_right>
  VGA_info_right(70,  3, "NUMBERS!  ", background_color);
     560:	d0a7ea0b 	ldhu	r2,-24664(gp)
     564:	10bfffcc 	andi	r2,r2,65535
     568:	10a0001c 	xori	r2,r2,32768
     56c:	10a00004 	addi	r2,r2,-32768
     570:	100f883a 	mov	r7,r2
     574:	018000b4 	movhi	r6,2
     578:	31a79604 	addi	r6,r6,-25000
     57c:	014000c4 	movi	r5,3
     580:	01001184 	movi	r4,70
     584:	0000d8c0 	call	d8c <VGA_info_right>
  VGA_info_right(70,  4, "          ", background_color);
     588:	d0a7ea0b 	ldhu	r2,-24664(gp)
     58c:	10bfffcc 	andi	r2,r2,65535
     590:	10a0001c 	xori	r2,r2,32768
     594:	10a00004 	addi	r2,r2,-32768
     598:	100f883a 	mov	r7,r2
     59c:	018000b4 	movhi	r6,2
     5a0:	31a78d04 	addi	r6,r6,-25036
     5a4:	01400104 	movi	r5,4
     5a8:	01001184 	movi	r4,70
     5ac:	0000d8c0 	call	d8c <VGA_info_right>
  VGA_info_right(70,  5, "SCORE:    ", background_color);
     5b0:	d0a7ea0b 	ldhu	r2,-24664(gp)
     5b4:	10bfffcc 	andi	r2,r2,65535
     5b8:	10a0001c 	xori	r2,r2,32768
     5bc:	10a00004 	addi	r2,r2,-32768
     5c0:	100f883a 	mov	r7,r2
     5c4:	018000b4 	movhi	r6,2
     5c8:	31a79904 	addi	r6,r6,-24988
     5cc:	01400144 	movi	r5,5
     5d0:	01001184 	movi	r4,70
     5d4:	0000d8c0 	call	d8c <VGA_info_right>
  VGA_info_right(70,  6, "00000000  ", background_color);
     5d8:	d0a7ea0b 	ldhu	r2,-24664(gp)
     5dc:	10bfffcc 	andi	r2,r2,65535
     5e0:	10a0001c 	xori	r2,r2,32768
     5e4:	10a00004 	addi	r2,r2,-32768
     5e8:	100f883a 	mov	r7,r2
     5ec:	018000b4 	movhi	r6,2
     5f0:	31a79c04 	addi	r6,r6,-24976
     5f4:	01400184 	movi	r5,6
     5f8:	01001184 	movi	r4,70
     5fc:	0000d8c0 	call	d8c <VGA_info_right>
  VGA_info_right(70,  8, "          ", background_color);
     600:	d0a7ea0b 	ldhu	r2,-24664(gp)
     604:	10bfffcc 	andi	r2,r2,65535
     608:	10a0001c 	xori	r2,r2,32768
     60c:	10a00004 	addi	r2,r2,-32768
     610:	100f883a 	mov	r7,r2
     614:	018000b4 	movhi	r6,2
     618:	31a78d04 	addi	r6,r6,-25036
     61c:	01400204 	movi	r5,8
     620:	01001184 	movi	r4,70
     624:	0000d8c0 	call	d8c <VGA_info_right>
  VGA_info_right(70,  9, "TIME:     ", background_color);
     628:	d0a7ea0b 	ldhu	r2,-24664(gp)
     62c:	10bfffcc 	andi	r2,r2,65535
     630:	10a0001c 	xori	r2,r2,32768
     634:	10a00004 	addi	r2,r2,-32768
     638:	100f883a 	mov	r7,r2
     63c:	018000b4 	movhi	r6,2
     640:	31a79f04 	addi	r6,r6,-24964
     644:	01400244 	movi	r5,9
     648:	01001184 	movi	r4,70
     64c:	0000d8c0 	call	d8c <VGA_info_right>
  VGA_info_right(70, 10, "SCORE:    ", background_color);
     650:	d0a7ea0b 	ldhu	r2,-24664(gp)
     654:	10bfffcc 	andi	r2,r2,65535
     658:	10a0001c 	xori	r2,r2,32768
     65c:	10a00004 	addi	r2,r2,-32768
     660:	100f883a 	mov	r7,r2
     664:	018000b4 	movhi	r6,2
     668:	31a79904 	addi	r6,r6,-24988
     66c:	01400284 	movi	r5,10
     670:	01001184 	movi	r4,70
     674:	0000d8c0 	call	d8c <VGA_info_right>
}
     678:	0001883a 	nop
     67c:	e037883a 	mov	sp,fp
     680:	dfc00117 	ldw	ra,4(sp)
     684:	df000017 	ldw	fp,0(sp)
     688:	dec00204 	addi	sp,sp,8
     68c:	f800283a 	ret

00000690 <Task_VGA_char>:

/* Display Character using VGA Output */
void
Task_VGA_char(void* pdata)
{
     690:	defffa04 	addi	sp,sp,-24
     694:	dfc00515 	stw	ra,20(sp)
     698:	df000415 	stw	fp,16(sp)
     69c:	df000404 	addi	fp,sp,16
     6a0:	e13fff15 	stw	r4,-4(fp)
  debug("Started: Task_VGA_char");
     6a4:	d0a00317 	ldw	r2,-32756(gp)
     6a8:	10800317 	ldw	r2,12(r2)
     6ac:	01c01bc4 	movi	r7,111
     6b0:	018000b4 	movhi	r6,2
     6b4:	31a73004 	addi	r6,r6,-25408
     6b8:	014000b4 	movhi	r5,2
     6bc:	2967a204 	addi	r5,r5,-24952
     6c0:	1009883a 	mov	r4,r2
     6c4:	00010880 	call	1088 <fprintf>

  for (;;) {
    debug(
     6c8:	d0a00317 	ldw	r2,-32756(gp)
     6cc:	12000317 	ldw	r8,12(r2)
     6d0:	d0a81717 	ldw	r2,-24484(gp)
     6d4:	d0e7f417 	ldw	r3,-24624(gp)
     6d8:	d127f217 	ldw	r4,-24632(gp)
     6dc:	d9000215 	stw	r4,8(sp)
     6e0:	d8c00115 	stw	r3,4(sp)
     6e4:	d8800015 	stw	r2,0(sp)
     6e8:	01c01cc4 	movi	r7,115
     6ec:	018000b4 	movhi	r6,2
     6f0:	31a73004 	addi	r6,r6,-25408
     6f4:	014000b4 	movhi	r5,2
     6f8:	2967ac04 	addi	r5,r5,-24912
     6fc:	4009883a 	mov	r4,r8
     700:	00010880 	call	1088 <fprintf>
      "%u: \tTask_VGA_char: (pos_x, pos_y) = (%d, %d)", OSTime, pos_x, pos_y);
    VGA_animated_char(pos_x, pos_y, text_disp, background_color);
     704:	d0a7f417 	ldw	r2,-24624(gp)
     708:	d0e7f217 	ldw	r3,-24632(gp)
     70c:	d127ea0b 	ldhu	r4,-24664(gp)
     710:	213fffcc 	andi	r4,r4,65535
     714:	2120001c 	xori	r4,r4,32768
     718:	21200004 	addi	r4,r4,-32768
     71c:	200f883a 	mov	r7,r4
     720:	d1a00004 	addi	r6,gp,-32768
     724:	180b883a 	mov	r5,r3
     728:	1009883a 	mov	r4,r2
     72c:	0000d2c0 	call	d2c <VGA_animated_char>

    OSTimeDly(1);
     730:	01000044 	movi	r4,1
     734:	00158980 	call	15898 <OSTimeDly>
  }
     738:	003fe306 	br	6c8 <Task_VGA_char+0x38>

0000073c <main>:
}

/* The main function creates two task and starts multi-tasking */
int
main(void)
{
     73c:	defff804 	addi	sp,sp,-32
     740:	dfc00715 	stw	ra,28(sp)
     744:	df000615 	stw	fp,24(sp)
     748:	df000604 	addi	fp,sp,24

  /* ***************************** Initialization *****************************
   */

  KEY0_flag, KEY1_flag, KEY2_flag, KEY3_flag = 0, 0, 0, 0;
     74c:	d027f515 	stw	zero,-24620(gp)

  /* ************************ Semaphores Initialization ***********************
   */

  SEM_read_KEYs = OSSemCreate(1);
     750:	01000044 	movi	r4,1
     754:	001377c0 	call	1377c <OSSemCreate>
     758:	d0a7eb15 	stw	r2,-24660(gp)

  /* **************************** VGA Display Setup ***************************
   */

  video_resolution = (int*)(PIXEL_BUF_CTRL_BASE + 0x8);
     75c:	00bfc834 	movhi	r2,65312
     760:	108c0a04 	addi	r2,r2,12328
     764:	d0a7e815 	stw	r2,-24672(gp)
  rgb_status = (int*)(RGB_RESAMPLER_BASE);
     768:	00bfc834 	movhi	r2,65312
     76c:	108c0404 	addi	r2,r2,12304
     770:	d0a7f715 	stw	r2,-24612(gp)

  screen_x = *video_resolution & 0xFFFF;
     774:	d0a7e817 	ldw	r2,-24672(gp)
     778:	10800017 	ldw	r2,0(r2)
     77c:	10bfffcc 	andi	r2,r2,65535
     780:	d0a7e915 	stw	r2,-24668(gp)
  screen_y = (*video_resolution >> 16) & 0xFFFF;
     784:	d0a7e817 	ldw	r2,-24672(gp)
     788:	10800017 	ldw	r2,0(r2)
     78c:	1004d43a 	srli	r2,r2,16
     790:	d0a7f015 	stw	r2,-24640(gp)

  /* letter initially positioned at the centre of screen */
  pos_x = 40;
     794:	00800a04 	movi	r2,40
     798:	d0a7f415 	stw	r2,-24624(gp)
  pos_y = 30;
     79c:	00800784 	movi	r2,30
     7a0:	d0a7f215 	stw	r2,-24632(gp)

  int db = get_data_bits(*rgb_status & 0x3F);
     7a4:	d0a7f717 	ldw	r2,-24612(gp)
     7a8:	10800017 	ldw	r2,0(r2)
     7ac:	10800fcc 	andi	r2,r2,63
     7b0:	1009883a 	mov	r4,r2
     7b4:	0000ed00 	call	ed0 <get_data_bits>
     7b8:	e0bfff15 	stw	r2,-4(fp)

  /* check if resolution is smaller than the standard 320 x 240 */
  res_offset = (screen_x == 160) ? 1 : 0;
     7bc:	d0a7e917 	ldw	r2,-24668(gp)
     7c0:	10802820 	cmpeqi	r2,r2,160
     7c4:	10803fcc 	andi	r2,r2,255
     7c8:	d0a7ef15 	stw	r2,-24644(gp)

  /* check if number of data bits is less than the standard 16-bits */
  col_offset = (db == 8) ? 1 : 0;
     7cc:	e0bfff17 	ldw	r2,-4(fp)
     7d0:	10800220 	cmpeqi	r2,r2,8
     7d4:	10803fcc 	andi	r2,r2,255
     7d8:	d0a7ed15 	stw	r2,-24652(gp)

  /* update color */
  background_color = resample_rgb(db, INTEL_BLUE);
     7dc:	015c7144 	movi	r5,29125
     7e0:	e13fff17 	ldw	r4,-4(fp)
     7e4:	0000e180 	call	e18 <resample_rgb>
     7e8:	d0a7ea0d 	sth	r2,-24664(gp)
  VGA_animated_char(pos_x, pos_y, text_disp, background_color);
     7ec:	d0a7f417 	ldw	r2,-24624(gp)
     7f0:	d0e7f217 	ldw	r3,-24632(gp)
     7f4:	d127ea0b 	ldhu	r4,-24664(gp)
     7f8:	213fffcc 	andi	r4,r4,65535
     7fc:	2120001c 	xori	r4,r4,32768
     800:	21200004 	addi	r4,r4,-32768
     804:	200f883a 	mov	r7,r4
     808:	d1a00004 	addi	r6,gp,-32768
     80c:	180b883a 	mov	r5,r3
     810:	1009883a 	mov	r4,r2
     814:	0000d2c0 	call	d2c <VGA_animated_char>

  /* **************************************************************************
   */

  printf("MicroC/OS-II Licensing Terms\n");
     818:	010000b4 	movhi	r4,2
     81c:	2127bb04 	addi	r4,r4,-24852
     820:	000116c0 	call	116c <puts>
  printf("============================\n");
     824:	010000b4 	movhi	r4,2
     828:	2127c304 	addi	r4,r4,-24820
     82c:	000116c0 	call	116c <puts>

  printf("Micrium\'s uC/OS-II is a real-time operating system (RTOS) available "
     830:	010000b4 	movhi	r4,2
     834:	2127cb04 	addi	r4,r4,-24788
     838:	000116c0 	call	116c <puts>
         "in source code.\n");

  printf("This is not open-source software.\n");
     83c:	010000b4 	movhi	r4,2
     840:	2127e004 	addi	r4,r4,-24704
     844:	000116c0 	call	116c <puts>

  printf("This RTOS can be used free of charge only for non-commercial "
     848:	010000b4 	movhi	r4,2
     84c:	2127e904 	addi	r4,r4,-24668
     850:	000116c0 	call	116c <puts>
         "purposes and academic projects,\n");

  printf("any other use of the code is subject to the terms of an end-user "
     854:	010000b4 	movhi	r4,2
     858:	21280104 	addi	r4,r4,-24572
     85c:	000116c0 	call	116c <puts>
         "license agreement\n");

  printf("for more information please see the license files included in the "
     860:	010000b4 	movhi	r4,2
     864:	21281604 	addi	r4,r4,-24488
     868:	000116c0 	call	116c <puts>
         "BSP project or contact Micrium.\n");

  printf("Anyone planning to use a Micrium RTOS in a commercial product must "
     86c:	010000b4 	movhi	r4,2
     870:	21282f04 	addi	r4,r4,-24388
     874:	000116c0 	call	116c <puts>
         "purchase a commercial license\n");

  printf("from the owner of the software, Silicon Laboratories Inc.\n");
     878:	010000b4 	movhi	r4,2
     87c:	21284804 	addi	r4,r4,-24288
     880:	000116c0 	call	116c <puts>

  printf("Licensing information is available at:\n");
     884:	010000b4 	movhi	r4,2
     888:	21285704 	addi	r4,r4,-24228
     88c:	000116c0 	call	116c <puts>

  printf("Phone: +1 954-217-2036\n");
     890:	010000b4 	movhi	r4,2
     894:	21286104 	addi	r4,r4,-24188
     898:	000116c0 	call	116c <puts>

  printf("Email: sales@micrium.com\n");
     89c:	010000b4 	movhi	r4,2
     8a0:	21286704 	addi	r4,r4,-24164
     8a4:	000116c0 	call	116c <puts>

  printf("URL: www.micrium.com\n\n\n");
     8a8:	010000b4 	movhi	r4,2
     8ac:	21286e04 	addi	r4,r4,-24136
     8b0:	000116c0 	call	116c <puts>

  Task_VGA_init(); /* Initial Display Layout Setup */
     8b4:	000041c0 	call	41c <Task_VGA_init>

  OSTaskCreateExt(Task_read_KEYs,
     8b8:	d8000415 	stw	zero,16(sp)
     8bc:	d8000315 	stw	zero,12(sp)
     8c0:	00820004 	movi	r2,2048
     8c4:	d8800215 	stw	r2,8(sp)
     8c8:	008000b4 	movhi	r2,2
     8cc:	10b9a204 	addi	r2,r2,-6520
     8d0:	d8800115 	stw	r2,4(sp)
     8d4:	00800044 	movi	r2,1
     8d8:	d8800015 	stw	r2,0(sp)
     8dc:	01c00044 	movi	r7,1
     8e0:	018000b4 	movhi	r6,2
     8e4:	3181a104 	addi	r6,r6,1668
     8e8:	000b883a 	mov	r5,zero
     8ec:	01000034 	movhi	r4,0
     8f0:	2100a104 	addi	r4,r4,644
     8f4:	00147c80 	call	147c8 <OSTaskCreateExt>
                  task_key_press_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(Task_VGA_char,
     8f8:	d8000415 	stw	zero,16(sp)
     8fc:	d8000315 	stw	zero,12(sp)
     900:	00820004 	movi	r2,2048
     904:	d8800215 	stw	r2,8(sp)
     908:	008000b4 	movhi	r2,2
     90c:	1081a204 	addi	r2,r2,1672
     910:	d8800115 	stw	r2,4(sp)
     914:	00800084 	movi	r2,2
     918:	d8800015 	stw	r2,0(sp)
     91c:	01c00084 	movi	r7,2
     920:	018000b4 	movhi	r6,2
     924:	3189a104 	addi	r6,r6,9860
     928:	000b883a 	mov	r5,zero
     92c:	01000034 	movhi	r4,0
     930:	2101a404 	addi	r4,r4,1680
     934:	00147c80 	call	147c8 <OSTaskCreateExt>
                  TASK_VGA_CHAR_PRIORITY,
                  task_disp_vga_char_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSStart();
     938:	000f1200 	call	f120 <OSStart>
  return 0;
     93c:	0005883a 	mov	r2,zero
}
     940:	e037883a 	mov	sp,fp
     944:	dfc00117 	ldw	ra,4(sp)
     948:	df000017 	ldw	fp,0(sp)
     94c:	dec00204 	addi	sp,sp,8
     950:	f800283a 	ret

00000954 <Check_KEYs>:
extern unsigned KEY_val;
extern int KEY0_flag, KEY1_flag, KEY2_flag, KEY3_flag;

void
Check_KEYs(int* KEY0_ptr, int* KEY1_ptr, int* KEY2_ptr, int* KEY3_ptr)
{
     954:	defff904 	addi	sp,sp,-28
     958:	dfc00615 	stw	ra,24(sp)
     95c:	df000515 	stw	fp,20(sp)
     960:	df000504 	addi	fp,sp,20
     964:	e13ffc15 	stw	r4,-16(fp)
     968:	e17ffd15 	stw	r5,-12(fp)
     96c:	e1bffe15 	stw	r6,-8(fp)
     970:	e1ffff15 	stw	r7,-4(fp)

  KEY_val = *(KEY_ptr);
     974:	00bfc834 	movhi	r2,65312
     978:	10801404 	addi	r2,r2,80
     97c:	10800017 	ldw	r2,0(r2)
     980:	d0a7ee15 	stw	r2,-24648(gp)

  if (KEY_val == KEY0) {
     984:	d0a7ee17 	ldw	r2,-24648(gp)
     988:	10800058 	cmpnei	r2,r2,1
     98c:	10000c1e 	bne	r2,zero,9c0 <Check_KEYs+0x6c>
    debug("KEY0 Pressed!"); // check KEY0
     990:	d0a00317 	ldw	r2,-32756(gp)
     994:	10800317 	ldw	r2,12(r2)
     998:	01c00544 	movi	r7,21
     99c:	018000b4 	movhi	r6,2
     9a0:	31a87404 	addi	r6,r6,-24112
     9a4:	014000b4 	movhi	r5,2
     9a8:	29687604 	addi	r5,r5,-24104
     9ac:	1009883a 	mov	r4,r2
     9b0:	00010880 	call	1088 <fprintf>
    KEY0_flag = 1;
     9b4:	00800044 	movi	r2,1
     9b8:	d0a7f615 	stw	r2,-24616(gp)
     9bc:	00002c06 	br	a70 <Check_KEYs+0x11c>
  } else if (KEY_val == KEY1) // check KEY1
     9c0:	d0a7ee17 	ldw	r2,-24648(gp)
     9c4:	10800098 	cmpnei	r2,r2,2
     9c8:	10000c1e 	bne	r2,zero,9fc <Check_KEYs+0xa8>
  {
    debug("KEY1 Pressed!");
     9cc:	d0a00317 	ldw	r2,-32756(gp)
     9d0:	10800317 	ldw	r2,12(r2)
     9d4:	01c00644 	movi	r7,25
     9d8:	018000b4 	movhi	r6,2
     9dc:	31a87404 	addi	r6,r6,-24112
     9e0:	014000b4 	movhi	r5,2
     9e4:	29687d04 	addi	r5,r5,-24076
     9e8:	1009883a 	mov	r4,r2
     9ec:	00010880 	call	1088 <fprintf>
    KEY1_flag = 1;
     9f0:	00800044 	movi	r2,1
     9f4:	d0a7f115 	stw	r2,-24636(gp)
     9f8:	00001d06 	br	a70 <Check_KEYs+0x11c>
  } else if (KEY_val == KEY2) // check KEY2
     9fc:	d0a7ee17 	ldw	r2,-24648(gp)
     a00:	10800118 	cmpnei	r2,r2,4
     a04:	10000c1e 	bne	r2,zero,a38 <Check_KEYs+0xe4>
  {
    debug("KEY2 Pressed!");
     a08:	d0a00317 	ldw	r2,-32756(gp)
     a0c:	10800317 	ldw	r2,12(r2)
     a10:	01c00744 	movi	r7,29
     a14:	018000b4 	movhi	r6,2
     a18:	31a87404 	addi	r6,r6,-24112
     a1c:	014000b4 	movhi	r5,2
     a20:	29688404 	addi	r5,r5,-24048
     a24:	1009883a 	mov	r4,r2
     a28:	00010880 	call	1088 <fprintf>
    KEY2_flag = 1;
     a2c:	00800044 	movi	r2,1
     a30:	d0a7ec15 	stw	r2,-24656(gp)
     a34:	00000e06 	br	a70 <Check_KEYs+0x11c>
  } else if (KEY_val == KEY3) // check KEY3
     a38:	d0a7ee17 	ldw	r2,-24648(gp)
     a3c:	10800218 	cmpnei	r2,r2,8
     a40:	10000b1e 	bne	r2,zero,a70 <Check_KEYs+0x11c>
  {
    debug("KEY3 Pressed!");
     a44:	d0a00317 	ldw	r2,-32756(gp)
     a48:	10800317 	ldw	r2,12(r2)
     a4c:	01c00844 	movi	r7,33
     a50:	018000b4 	movhi	r6,2
     a54:	31a87404 	addi	r6,r6,-24112
     a58:	014000b4 	movhi	r5,2
     a5c:	29688b04 	addi	r5,r5,-24020
     a60:	1009883a 	mov	r4,r2
     a64:	00010880 	call	1088 <fprintf>
    KEY3_flag = 1;
     a68:	00800044 	movi	r2,1
     a6c:	d0a7f515 	stw	r2,-24620(gp)
  }

  if (KEY_val)
     a70:	d0a7ee17 	ldw	r2,-24648(gp)
     a74:	10000b26 	beq	r2,zero,aa4 <Check_KEYs+0x150>
    debug("KEY_value: %d", KEY_val);
     a78:	d0a00317 	ldw	r2,-32756(gp)
     a7c:	10c00317 	ldw	r3,12(r2)
     a80:	d0a7ee17 	ldw	r2,-24648(gp)
     a84:	d8800015 	stw	r2,0(sp)
     a88:	01c00984 	movi	r7,38
     a8c:	018000b4 	movhi	r6,2
     a90:	31a87404 	addi	r6,r6,-24112
     a94:	014000b4 	movhi	r5,2
     a98:	29689204 	addi	r5,r5,-23992
     a9c:	1809883a 	mov	r4,r3
     aa0:	00010880 	call	1088 <fprintf>
}
     aa4:	0001883a 	nop
     aa8:	e037883a 	mov	sp,fp
     aac:	dfc00117 	ldw	ra,4(sp)
     ab0:	df000017 	ldw	fp,0(sp)
     ab4:	dec00204 	addi	sp,sp,8
     ab8:	f800283a 	ret

00000abc <VGA_text>:
/*******************************************************************************
 * Subroutine to send a string of text to the video monitor
 ******************************************************************************/
void
VGA_text(int x, int y, char* text_ptr)
{
     abc:	defffa04 	addi	sp,sp,-24
     ac0:	df000515 	stw	fp,20(sp)
     ac4:	df000504 	addi	fp,sp,20
     ac8:	e13ffd15 	stw	r4,-12(fp)
     acc:	e17ffe15 	stw	r5,-8(fp)
     ad0:	e1bfff15 	stw	r6,-4(fp)
  int offset;
  volatile char* char_buf = (char*)FPGA_CHAR_BASE; // video character buffer
     ad4:	00824034 	movhi	r2,2304
     ad8:	e0bffc15 	stw	r2,-16(fp)

  /* assume that the text string fits on one line */
  offset = (y << 7) + x;
     adc:	e0bffe17 	ldw	r2,-8(fp)
     ae0:	100691fa 	slli	r3,r2,7
     ae4:	e0bffd17 	ldw	r2,-12(fp)
     ae8:	1885883a 	add	r2,r3,r2
     aec:	e0bffb15 	stw	r2,-20(fp)
  while (*(text_ptr)) {
     af0:	00000c06 	br	b24 <VGA_text+0x68>
    *(char_buf + offset) = *(text_ptr); // write to the character buffer
     af4:	e0bffb17 	ldw	r2,-20(fp)
     af8:	e0fffc17 	ldw	r3,-16(fp)
     afc:	1885883a 	add	r2,r3,r2
     b00:	e0ffff17 	ldw	r3,-4(fp)
     b04:	18c00003 	ldbu	r3,0(r3)
     b08:	10c00005 	stb	r3,0(r2)
    ++text_ptr;
     b0c:	e0bfff17 	ldw	r2,-4(fp)
     b10:	10800044 	addi	r2,r2,1
     b14:	e0bfff15 	stw	r2,-4(fp)
    ++offset;
     b18:	e0bffb17 	ldw	r2,-20(fp)
     b1c:	10800044 	addi	r2,r2,1
     b20:	e0bffb15 	stw	r2,-20(fp)
  int offset;
  volatile char* char_buf = (char*)FPGA_CHAR_BASE; // video character buffer

  /* assume that the text string fits on one line */
  offset = (y << 7) + x;
  while (*(text_ptr)) {
     b24:	e0bfff17 	ldw	r2,-4(fp)
     b28:	10800003 	ldbu	r2,0(r2)
     b2c:	10803fcc 	andi	r2,r2,255
     b30:	1080201c 	xori	r2,r2,128
     b34:	10bfe004 	addi	r2,r2,-128
     b38:	103fee1e 	bne	r2,zero,af4 <VGA_text+0x38>
    *(char_buf + offset) = *(text_ptr); // write to the character buffer
    ++text_ptr;
    ++offset;
  }
}
     b3c:	0001883a 	nop
     b40:	e037883a 	mov	sp,fp
     b44:	df000017 	ldw	fp,0(sp)
     b48:	dec00104 	addi	sp,sp,4
     b4c:	f800283a 	ret

00000b50 <VGA_box>:
/*        Takes in points assuming 320x240 resolution and adjusts based on    */
/*        differences in resolution and color bits.                           */
/* ************************************************************************** */
void
VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
     b50:	defff404 	addi	sp,sp,-48
     b54:	df000b15 	stw	fp,44(sp)
     b58:	df000b04 	addi	fp,sp,44
     b5c:	e13ffb15 	stw	r4,-20(fp)
     b60:	e17ffc15 	stw	r5,-16(fp)
     b64:	e1bffd15 	stw	r6,-12(fp)
     b68:	e1fffe15 	stw	r7,-8(fp)
     b6c:	e0800117 	ldw	r2,4(fp)
     b70:	e0bfff0d 	sth	r2,-4(fp)
  int pixel_buf_ptr = *(int*)PIXEL_BUF_CTRL_BASE;
     b74:	00bfc834 	movhi	r2,65312
     b78:	108c0804 	addi	r2,r2,12320
     b7c:	10800017 	ldw	r2,0(r2)
     b80:	e0bff715 	stw	r2,-36(fp)
  int pixel_ptr, row, col;

  int x_factor = 0x1 << (res_offset + col_offset);
     b84:	d0e7ef17 	ldw	r3,-24644(gp)
     b88:	d0a7ed17 	ldw	r2,-24652(gp)
     b8c:	1885883a 	add	r2,r3,r2
     b90:	00c00044 	movi	r3,1
     b94:	1884983a 	sll	r2,r3,r2
     b98:	e0bff815 	stw	r2,-32(fp)
  int y_factor = 0x1 << (res_offset);
     b9c:	d0a7ef17 	ldw	r2,-24644(gp)
     ba0:	00c00044 	movi	r3,1
     ba4:	1884983a 	sll	r2,r3,r2
     ba8:	e0bff915 	stw	r2,-28(fp)

  x1 = x1 / x_factor;
     bac:	e0fffb17 	ldw	r3,-20(fp)
     bb0:	e0bff817 	ldw	r2,-32(fp)
     bb4:	1885283a 	div	r2,r3,r2
     bb8:	e0bffb15 	stw	r2,-20(fp)
  x2 = x2 / x_factor;
     bbc:	e0fffd17 	ldw	r3,-12(fp)
     bc0:	e0bff817 	ldw	r2,-32(fp)
     bc4:	1885283a 	div	r2,r3,r2
     bc8:	e0bffd15 	stw	r2,-12(fp)
  y1 = y1 / y_factor;
     bcc:	e0fffc17 	ldw	r3,-16(fp)
     bd0:	e0bff917 	ldw	r2,-28(fp)
     bd4:	1885283a 	div	r2,r3,r2
     bd8:	e0bffc15 	stw	r2,-16(fp)
  y2 = y2 / y_factor;
     bdc:	e0fffe17 	ldw	r3,-8(fp)
     be0:	e0bff917 	ldw	r2,-28(fp)
     be4:	1885283a 	div	r2,r3,r2
     be8:	e0bffe15 	stw	r2,-8(fp)

  /* assume that the box coordinates are valid */
  for (row = y1; row <= y2; row++)
     bec:	e0bffc17 	ldw	r2,-16(fp)
     bf0:	e0bff515 	stw	r2,-44(fp)
     bf4:	00001c06 	br	c68 <VGA_box+0x118>
    for (col = x1; col <= x2; ++col) {
     bf8:	e0bffb17 	ldw	r2,-20(fp)
     bfc:	e0bff615 	stw	r2,-40(fp)
     c00:	00001306 	br	c50 <VGA_box+0x100>
      pixel_ptr =
        pixel_buf_ptr + (row << (10 - res_offset - col_offset)) + (col << 1);
     c04:	d0a7ef17 	ldw	r2,-24644(gp)
     c08:	00c00284 	movi	r3,10
     c0c:	1887c83a 	sub	r3,r3,r2
     c10:	d0a7ed17 	ldw	r2,-24652(gp)
     c14:	1885c83a 	sub	r2,r3,r2
     c18:	e0fff517 	ldw	r3,-44(fp)
     c1c:	1886983a 	sll	r3,r3,r2
     c20:	e0bff717 	ldw	r2,-36(fp)
     c24:	1887883a 	add	r3,r3,r2
     c28:	e0bff617 	ldw	r2,-40(fp)
     c2c:	1085883a 	add	r2,r2,r2
  y2 = y2 / y_factor;

  /* assume that the box coordinates are valid */
  for (row = y1; row <= y2; row++)
    for (col = x1; col <= x2; ++col) {
      pixel_ptr =
     c30:	1885883a 	add	r2,r3,r2
     c34:	e0bffa15 	stw	r2,-24(fp)
        pixel_buf_ptr + (row << (10 - res_offset - col_offset)) + (col << 1);
      *(short*)pixel_ptr = pixel_color; // set pixel color
     c38:	e0bffa17 	ldw	r2,-24(fp)
     c3c:	e0ffff0b 	ldhu	r3,-4(fp)
     c40:	10c0000d 	sth	r3,0(r2)
  y1 = y1 / y_factor;
  y2 = y2 / y_factor;

  /* assume that the box coordinates are valid */
  for (row = y1; row <= y2; row++)
    for (col = x1; col <= x2; ++col) {
     c44:	e0bff617 	ldw	r2,-40(fp)
     c48:	10800044 	addi	r2,r2,1
     c4c:	e0bff615 	stw	r2,-40(fp)
     c50:	e0bff617 	ldw	r2,-40(fp)
     c54:	e0fffd17 	ldw	r3,-12(fp)
     c58:	18bfea0e 	bge	r3,r2,c04 <VGA_box+0xb4>
  x2 = x2 / x_factor;
  y1 = y1 / y_factor;
  y2 = y2 / y_factor;

  /* assume that the box coordinates are valid */
  for (row = y1; row <= y2; row++)
     c5c:	e0bff517 	ldw	r2,-44(fp)
     c60:	10800044 	addi	r2,r2,1
     c64:	e0bff515 	stw	r2,-44(fp)
     c68:	e0bff517 	ldw	r2,-44(fp)
     c6c:	e0fffe17 	ldw	r3,-8(fp)
     c70:	18bfe10e 	bge	r3,r2,bf8 <VGA_box+0xa8>
    for (col = x1; col <= x2; ++col) {
      pixel_ptr =
        pixel_buf_ptr + (row << (10 - res_offset - col_offset)) + (col << 1);
      *(short*)pixel_ptr = pixel_color; // set pixel color
    }
}
     c74:	0001883a 	nop
     c78:	e037883a 	mov	sp,fp
     c7c:	df000017 	ldw	fp,0(sp)
     c80:	dec00104 	addi	sp,sp,4
     c84:	f800283a 	ret

00000c88 <VGA_char_box>:
/*              Character to Pixel mapping: 1 character = 4 pixels            */
/* ************************************************************************** */

void
VGA_char_box(int x, int y, short color)
{
     c88:	defff604 	addi	sp,sp,-40
     c8c:	dfc00915 	stw	ra,36(sp)
     c90:	df000815 	stw	fp,32(sp)
     c94:	df000804 	addi	fp,sp,32
     c98:	e13ffd15 	stw	r4,-12(fp)
     c9c:	e17ffe15 	stw	r5,-8(fp)
     ca0:	3005883a 	mov	r2,r6
     ca4:	e0bfff0d 	sth	r2,-4(fp)
  int x1 = x * 4;
     ca8:	e0bffd17 	ldw	r2,-12(fp)
     cac:	1085883a 	add	r2,r2,r2
     cb0:	1085883a 	add	r2,r2,r2
     cb4:	e0bff915 	stw	r2,-28(fp)
  int y1 = y * 4;
     cb8:	e0bffe17 	ldw	r2,-8(fp)
     cbc:	1085883a 	add	r2,r2,r2
     cc0:	1085883a 	add	r2,r2,r2
     cc4:	e0bffa15 	stw	r2,-24(fp)
  int x2 = ((x + 1) * 4) - 1;
     cc8:	e0bffd17 	ldw	r2,-12(fp)
     ccc:	10800044 	addi	r2,r2,1
     cd0:	1085883a 	add	r2,r2,r2
     cd4:	1085883a 	add	r2,r2,r2
     cd8:	10bfffc4 	addi	r2,r2,-1
     cdc:	e0bffb15 	stw	r2,-20(fp)
  int y2 = ((y + 1) * 4) - 1;
     ce0:	e0bffe17 	ldw	r2,-8(fp)
     ce4:	10800044 	addi	r2,r2,1
     ce8:	1085883a 	add	r2,r2,r2
     cec:	1085883a 	add	r2,r2,r2
     cf0:	10bfffc4 	addi	r2,r2,-1
     cf4:	e0bffc15 	stw	r2,-16(fp)

  VGA_box(x1, y1, x2, y2, color);
     cf8:	e0bfff0f 	ldh	r2,-4(fp)
     cfc:	d8800015 	stw	r2,0(sp)
     d00:	e1fffc17 	ldw	r7,-16(fp)
     d04:	e1bffb17 	ldw	r6,-20(fp)
     d08:	e17ffa17 	ldw	r5,-24(fp)
     d0c:	e13ff917 	ldw	r4,-28(fp)
     d10:	0000b500 	call	b50 <VGA_box>
}
     d14:	0001883a 	nop
     d18:	e037883a 	mov	sp,fp
     d1c:	dfc00117 	ldw	ra,4(sp)
     d20:	df000017 	ldw	fp,0(sp)
     d24:	dec00204 	addi	sp,sp,8
     d28:	f800283a 	ret

00000d2c <VGA_animated_char>:
/* ************************************************************************** */
/*         Synced Animated Character embedded on top of character box         */
/* ************************************************************************** */
void
VGA_animated_char(int x, int y, char* text_ptr, short char_bg_color)
{
     d2c:	defffa04 	addi	sp,sp,-24
     d30:	dfc00515 	stw	ra,20(sp)
     d34:	df000415 	stw	fp,16(sp)
     d38:	df000404 	addi	fp,sp,16
     d3c:	e13ffc15 	stw	r4,-16(fp)
     d40:	e17ffd15 	stw	r5,-12(fp)
     d44:	e1bffe15 	stw	r6,-8(fp)
     d48:	3805883a 	mov	r2,r7
     d4c:	e0bfff0d 	sth	r2,-4(fp)
  /* displaying character for the first time */
  VGA_char_box(x, y, char_bg_color);
     d50:	e0bfff0f 	ldh	r2,-4(fp)
     d54:	100d883a 	mov	r6,r2
     d58:	e17ffd17 	ldw	r5,-12(fp)
     d5c:	e13ffc17 	ldw	r4,-16(fp)
     d60:	0000c880 	call	c88 <VGA_char_box>
  VGA_text(x, y, text_ptr);
     d64:	e1bffe17 	ldw	r6,-8(fp)
     d68:	e17ffd17 	ldw	r5,-12(fp)
     d6c:	e13ffc17 	ldw	r4,-16(fp)
     d70:	0000abc0 	call	abc <VGA_text>
}
     d74:	0001883a 	nop
     d78:	e037883a 	mov	sp,fp
     d7c:	dfc00117 	ldw	ra,4(sp)
     d80:	df000017 	ldw	fp,0(sp)
     d84:	dec00204 	addi	sp,sp,8
     d88:	f800283a 	ret

00000d8c <VGA_info_right>:

void
VGA_info_right(int x, int y, char* text_ptr, short char_bg_color)
{
     d8c:	defff904 	addi	sp,sp,-28
     d90:	dfc00615 	stw	ra,24(sp)
     d94:	df000515 	stw	fp,20(sp)
     d98:	df000504 	addi	fp,sp,20
     d9c:	e13ffc15 	stw	r4,-16(fp)
     da0:	e17ffd15 	stw	r5,-12(fp)
     da4:	e1bffe15 	stw	r6,-8(fp)
     da8:	3805883a 	mov	r2,r7
     dac:	e0bfff0d 	sth	r2,-4(fp)
  int i = 0;
     db0:	e03ffb15 	stw	zero,-20(fp)
  for (i = pos_x; i < pos_x + 10; i++)
     db4:	d0a7f417 	ldw	r2,-24624(gp)
     db8:	e0bffb15 	stw	r2,-20(fp)
     dbc:	00000806 	br	de0 <VGA_info_right+0x54>
    VGA_char_box(i, y, char_bg_color);
     dc0:	e0bfff0f 	ldh	r2,-4(fp)
     dc4:	100d883a 	mov	r6,r2
     dc8:	e17ffd17 	ldw	r5,-12(fp)
     dcc:	e13ffb17 	ldw	r4,-20(fp)
     dd0:	0000c880 	call	c88 <VGA_char_box>

void
VGA_info_right(int x, int y, char* text_ptr, short char_bg_color)
{
  int i = 0;
  for (i = pos_x; i < pos_x + 10; i++)
     dd4:	e0bffb17 	ldw	r2,-20(fp)
     dd8:	10800044 	addi	r2,r2,1
     ddc:	e0bffb15 	stw	r2,-20(fp)
     de0:	d0a7f417 	ldw	r2,-24624(gp)
     de4:	10800284 	addi	r2,r2,10
     de8:	e0fffb17 	ldw	r3,-20(fp)
     dec:	18bff416 	blt	r3,r2,dc0 <VGA_info_right+0x34>
    VGA_char_box(i, y, char_bg_color);

  VGA_text(x, y, text_ptr);
     df0:	e1bffe17 	ldw	r6,-8(fp)
     df4:	e17ffd17 	ldw	r5,-12(fp)
     df8:	e13ffc17 	ldw	r4,-16(fp)
     dfc:	0000abc0 	call	abc <VGA_text>
}
     e00:	0001883a 	nop
     e04:	e037883a 	mov	sp,fp
     e08:	dfc00117 	ldw	ra,4(sp)
     e0c:	df000017 	ldw	fp,0(sp)
     e10:	dec00204 	addi	sp,sp,8
     e14:	f800283a 	ret

00000e18 <resample_rgb>:
/* ************************************************************************** */
/*               Resamples 24-bit color to 16-bit or 8-bit color              */
/* ************************************************************************** */
int
resample_rgb(int num_bits, int color)
{
     e18:	defffd04 	addi	sp,sp,-12
     e1c:	df000215 	stw	fp,8(sp)
     e20:	df000204 	addi	fp,sp,8
     e24:	e13ffe15 	stw	r4,-8(fp)
     e28:	e17fff15 	stw	r5,-4(fp)
  if (num_bits == 8) {
     e2c:	e0bffe17 	ldw	r2,-8(fp)
     e30:	10800218 	cmpnei	r2,r2,8
     e34:	1000121e 	bne	r2,zero,e80 <resample_rgb+0x68>

    color = (((color >> 16) & 0x000000E0) | ((color >> 11) & 0x0000001C) |
     e38:	e0bfff17 	ldw	r2,-4(fp)
     e3c:	1005d43a 	srai	r2,r2,16
     e40:	10c0380c 	andi	r3,r2,224
     e44:	e0bfff17 	ldw	r2,-4(fp)
     e48:	1005d2fa 	srai	r2,r2,11
     e4c:	1080070c 	andi	r2,r2,28
     e50:	1886b03a 	or	r3,r3,r2
             ((color >> 6) & 0x00000003));
     e54:	e0bfff17 	ldw	r2,-4(fp)
     e58:	1005d1ba 	srai	r2,r2,6
     e5c:	108000cc 	andi	r2,r2,3
int
resample_rgb(int num_bits, int color)
{
  if (num_bits == 8) {

    color = (((color >> 16) & 0x000000E0) | ((color >> 11) & 0x0000001C) |
     e60:	1884b03a 	or	r2,r3,r2
     e64:	e0bfff15 	stw	r2,-4(fp)
             ((color >> 6) & 0x00000003));

    color = (color << 8) | color;
     e68:	e0bfff17 	ldw	r2,-4(fp)
     e6c:	1004923a 	slli	r2,r2,8
     e70:	e0ffff17 	ldw	r3,-4(fp)
     e74:	1884b03a 	or	r2,r3,r2
     e78:	e0bfff15 	stw	r2,-4(fp)
     e7c:	00000f06 	br	ebc <resample_rgb+0xa4>

  } else if (num_bits == 16) {
     e80:	e0bffe17 	ldw	r2,-8(fp)
     e84:	10800418 	cmpnei	r2,r2,16
     e88:	10000c1e 	bne	r2,zero,ebc <resample_rgb+0xa4>

    color = (((color >> 8) & 0x0000F800) | ((color >> 5) & 0x000007E0) |
     e8c:	e0bfff17 	ldw	r2,-4(fp)
     e90:	1005d23a 	srai	r2,r2,8
     e94:	10fe000c 	andi	r3,r2,63488
     e98:	e0bfff17 	ldw	r2,-4(fp)
     e9c:	1005d17a 	srai	r2,r2,5
     ea0:	1081f80c 	andi	r2,r2,2016
     ea4:	1886b03a 	or	r3,r3,r2
             ((color >> 3) & 0x0000001F));
     ea8:	e0bfff17 	ldw	r2,-4(fp)
     eac:	1005d0fa 	srai	r2,r2,3
     eb0:	108007cc 	andi	r2,r2,31

    color = (color << 8) | color;

  } else if (num_bits == 16) {

    color = (((color >> 8) & 0x0000F800) | ((color >> 5) & 0x000007E0) |
     eb4:	1884b03a 	or	r2,r3,r2
     eb8:	e0bfff15 	stw	r2,-4(fp)
             ((color >> 3) & 0x0000001F));
  }

  return color;
     ebc:	e0bfff17 	ldw	r2,-4(fp)
}
     ec0:	e037883a 	mov	sp,fp
     ec4:	df000017 	ldw	fp,0(sp)
     ec8:	dec00104 	addi	sp,sp,4
     ecc:	f800283a 	ret

00000ed0 <get_data_bits>:
/*                 Finds the number of data bits from the mode                */
/* ************************************************************************** */

int
get_data_bits(int mode)
{
     ed0:	defffe04 	addi	sp,sp,-8
     ed4:	df000115 	stw	fp,4(sp)
     ed8:	df000104 	addi	fp,sp,4
     edc:	e13fff15 	stw	r4,-4(fp)
  switch (mode) {
     ee0:	e0bfff17 	ldw	r2,-4(fp)
     ee4:	10800ea8 	cmpgeui	r2,r2,58
     ee8:	1000591e 	bne	r2,zero,1050 <get_data_bits+0x180>
     eec:	e0bfff17 	ldw	r2,-4(fp)
     ef0:	100690ba 	slli	r3,r2,2
     ef4:	00800034 	movhi	r2,0
     ef8:	1083c204 	addi	r2,r2,3848
     efc:	1885883a 	add	r2,r3,r2
     f00:	10800017 	ldw	r2,0(r2)
     f04:	1000683a 	jmp	r2
     f08:	00000ff0 	cmpltui	zero,zero,63
     f0c:	00001050 	cmplti	zero,zero,65
     f10:	00001050 	cmplti	zero,zero,65
     f14:	00001050 	cmplti	zero,zero,65
     f18:	00001050 	cmplti	zero,zero,65
     f1c:	00001050 	cmplti	zero,zero,65
     f20:	00001050 	cmplti	zero,zero,65
     f24:	00000ff8 	rdprs	zero,zero,63
     f28:	00001050 	cmplti	zero,zero,65
     f2c:	00001050 	cmplti	zero,zero,65
     f30:	00001050 	cmplti	zero,zero,65
     f34:	00001050 	cmplti	zero,zero,65
     f38:	00001050 	cmplti	zero,zero,65
     f3c:	00001050 	cmplti	zero,zero,65
     f40:	00001050 	cmplti	zero,zero,65
     f44:	00001050 	cmplti	zero,zero,65
     f48:	00001050 	cmplti	zero,zero,65
     f4c:	00001000 	call	100 <alt_irq_handler+0x4>
     f50:	00001008 	cmpgei	zero,zero,64
     f54:	00001050 	cmplti	zero,zero,65
     f58:	00001010 	cmplti	zero,zero,64
     f5c:	00001050 	cmplti	zero,zero,65
     f60:	00001050 	cmplti	zero,zero,65
     f64:	00001018 	cmpnei	zero,zero,64
     f68:	00001050 	cmplti	zero,zero,65
     f6c:	00001020 	cmpeqi	zero,zero,64
     f70:	00001050 	cmplti	zero,zero,65
     f74:	00001050 	cmplti	zero,zero,65
     f78:	00001050 	cmplti	zero,zero,65
     f7c:	00001050 	cmplti	zero,zero,65
     f80:	00001050 	cmplti	zero,zero,65
     f84:	00001050 	cmplti	zero,zero,65
     f88:	00001050 	cmplti	zero,zero,65
     f8c:	00001050 	cmplti	zero,zero,65
     f90:	00001050 	cmplti	zero,zero,65
     f94:	00001050 	cmplti	zero,zero,65
     f98:	00001050 	cmplti	zero,zero,65
     f9c:	00001050 	cmplti	zero,zero,65
     fa0:	00001050 	cmplti	zero,zero,65
     fa4:	00001050 	cmplti	zero,zero,65
     fa8:	00001050 	cmplti	zero,zero,65
     fac:	00001050 	cmplti	zero,zero,65
     fb0:	00001050 	cmplti	zero,zero,65
     fb4:	00001050 	cmplti	zero,zero,65
     fb8:	00001050 	cmplti	zero,zero,65
     fbc:	00001050 	cmplti	zero,zero,65
     fc0:	00001050 	cmplti	zero,zero,65
     fc4:	00001050 	cmplti	zero,zero,65
     fc8:	00001050 	cmplti	zero,zero,65
     fcc:	00001028 	cmpgeui	zero,zero,64
     fd0:	00001030 	cmpltui	zero,zero,64
     fd4:	00001038 	rdprs	zero,zero,64
     fd8:	00001050 	cmplti	zero,zero,65
     fdc:	00001050 	cmplti	zero,zero,65
     fe0:	00001050 	cmplti	zero,zero,65
     fe4:	00001040 	call	104 <alt_irq_handler+0x8>
     fe8:	00001050 	cmplti	zero,zero,65
     fec:	00001048 	cmpgei	zero,zero,65
    case 0x0:
      return 1;
     ff0:	00800044 	movi	r2,1
     ff4:	00001606 	br	1050 <get_data_bits+0x180>
    case 0x7:
      return 8;
     ff8:	00800204 	movi	r2,8
     ffc:	00001406 	br	1050 <get_data_bits+0x180>
    case 0x11:
      return 8;
    1000:	00800204 	movi	r2,8
    1004:	00001206 	br	1050 <get_data_bits+0x180>
    case 0x12:
      return 9;
    1008:	00800244 	movi	r2,9
    100c:	00001006 	br	1050 <get_data_bits+0x180>
    case 0x14:
      return 16;
    1010:	00800404 	movi	r2,16
    1014:	00000e06 	br	1050 <get_data_bits+0x180>
    case 0x17:
      return 24;
    1018:	00800604 	movi	r2,24
    101c:	00000c06 	br	1050 <get_data_bits+0x180>
    case 0x19:
      return 30;
    1020:	00800784 	movi	r2,30
    1024:	00000a06 	br	1050 <get_data_bits+0x180>
    case 0x31:
      return 8;
    1028:	00800204 	movi	r2,8
    102c:	00000806 	br	1050 <get_data_bits+0x180>
    case 0x32:
      return 12;
    1030:	00800304 	movi	r2,12
    1034:	00000606 	br	1050 <get_data_bits+0x180>
    case 0x33:
      return 16;
    1038:	00800404 	movi	r2,16
    103c:	00000406 	br	1050 <get_data_bits+0x180>
    case 0x37:
      return 32;
    1040:	00800804 	movi	r2,32
    1044:	00000206 	br	1050 <get_data_bits+0x180>
    case 0x39:
      return 40;
    1048:	00800a04 	movi	r2,40
    104c:	00000006 	br	1050 <get_data_bits+0x180>
  }
}
    1050:	e037883a 	mov	sp,fp
    1054:	df000017 	ldw	fp,0(sp)
    1058:	dec00104 	addi	sp,sp,4
    105c:	f800283a 	ret

00001060 <_fprintf_r>:
    1060:	defffe04 	addi	sp,sp,-8
    1064:	2809883a 	mov	r4,r5
    1068:	300b883a 	mov	r5,r6
    106c:	dfc00015 	stw	ra,0(sp)
    1070:	d9c00115 	stw	r7,4(sp)
    1074:	d9800104 	addi	r6,sp,4
    1078:	00034100 	call	3410 <__vfprintf_internal>
    107c:	dfc00017 	ldw	ra,0(sp)
    1080:	dec00204 	addi	sp,sp,8
    1084:	f800283a 	ret

00001088 <fprintf>:
    1088:	defffd04 	addi	sp,sp,-12
    108c:	dfc00015 	stw	ra,0(sp)
    1090:	d9800115 	stw	r6,4(sp)
    1094:	d9c00215 	stw	r7,8(sp)
    1098:	d9800104 	addi	r6,sp,4
    109c:	00034100 	call	3410 <__vfprintf_internal>
    10a0:	dfc00017 	ldw	ra,0(sp)
    10a4:	dec00304 	addi	sp,sp,12
    10a8:	f800283a 	ret

000010ac <_puts_r>:
    10ac:	defff604 	addi	sp,sp,-40
    10b0:	dc000715 	stw	r16,28(sp)
    10b4:	2021883a 	mov	r16,r4
    10b8:	2809883a 	mov	r4,r5
    10bc:	dc400815 	stw	r17,32(sp)
    10c0:	dfc00915 	stw	ra,36(sp)
    10c4:	2823883a 	mov	r17,r5
    10c8:	00011800 	call	1180 <strlen>
    10cc:	10c00044 	addi	r3,r2,1
    10d0:	d8800115 	stw	r2,4(sp)
    10d4:	008000b4 	movhi	r2,2
    10d8:	10a89a04 	addi	r2,r2,-23960
    10dc:	d8800215 	stw	r2,8(sp)
    10e0:	00800044 	movi	r2,1
    10e4:	d8800315 	stw	r2,12(sp)
    10e8:	00800084 	movi	r2,2
    10ec:	dc400015 	stw	r17,0(sp)
    10f0:	d8c00615 	stw	r3,24(sp)
    10f4:	dec00415 	stw	sp,16(sp)
    10f8:	d8800515 	stw	r2,20(sp)
    10fc:	80000226 	beq	r16,zero,1108 <_puts_r+0x5c>
    1100:	80800e17 	ldw	r2,56(r16)
    1104:	10001426 	beq	r2,zero,1158 <_puts_r+0xac>
    1108:	81400217 	ldw	r5,8(r16)
    110c:	2880030b 	ldhu	r2,12(r5)
    1110:	10c8000c 	andi	r3,r2,8192
    1114:	1800061e 	bne	r3,zero,1130 <_puts_r+0x84>
    1118:	29001917 	ldw	r4,100(r5)
    111c:	00f7ffc4 	movi	r3,-8193
    1120:	10880014 	ori	r2,r2,8192
    1124:	20c6703a 	and	r3,r4,r3
    1128:	2880030d 	sth	r2,12(r5)
    112c:	28c01915 	stw	r3,100(r5)
    1130:	d9800404 	addi	r6,sp,16
    1134:	8009883a 	mov	r4,r16
    1138:	00059400 	call	5940 <__sfvwrite_r>
    113c:	1000091e 	bne	r2,zero,1164 <_puts_r+0xb8>
    1140:	00800284 	movi	r2,10
    1144:	dfc00917 	ldw	ra,36(sp)
    1148:	dc400817 	ldw	r17,32(sp)
    114c:	dc000717 	ldw	r16,28(sp)
    1150:	dec00a04 	addi	sp,sp,40
    1154:	f800283a 	ret
    1158:	8009883a 	mov	r4,r16
    115c:	00054bc0 	call	54bc <__sinit>
    1160:	003fe906 	br	1108 <_puts_r+0x5c>
    1164:	00bfffc4 	movi	r2,-1
    1168:	003ff606 	br	1144 <_puts_r+0x98>

0000116c <puts>:
    116c:	008000b4 	movhi	r2,2
    1170:	10b17c04 	addi	r2,r2,-14864
    1174:	200b883a 	mov	r5,r4
    1178:	11000017 	ldw	r4,0(r2)
    117c:	00010ac1 	jmpi	10ac <_puts_r>

00001180 <strlen>:
    1180:	208000cc 	andi	r2,r4,3
    1184:	10002026 	beq	r2,zero,1208 <strlen+0x88>
    1188:	20800007 	ldb	r2,0(r4)
    118c:	10002026 	beq	r2,zero,1210 <strlen+0x90>
    1190:	2005883a 	mov	r2,r4
    1194:	00000206 	br	11a0 <strlen+0x20>
    1198:	10c00007 	ldb	r3,0(r2)
    119c:	18001826 	beq	r3,zero,1200 <strlen+0x80>
    11a0:	10800044 	addi	r2,r2,1
    11a4:	10c000cc 	andi	r3,r2,3
    11a8:	183ffb1e 	bne	r3,zero,1198 <strlen+0x18>
    11ac:	10c00017 	ldw	r3,0(r2)
    11b0:	01ffbff4 	movhi	r7,65279
    11b4:	39ffbfc4 	addi	r7,r7,-257
    11b8:	00ca303a 	nor	r5,zero,r3
    11bc:	01a02074 	movhi	r6,32897
    11c0:	19c7883a 	add	r3,r3,r7
    11c4:	31a02004 	addi	r6,r6,-32640
    11c8:	1946703a 	and	r3,r3,r5
    11cc:	1986703a 	and	r3,r3,r6
    11d0:	1800091e 	bne	r3,zero,11f8 <strlen+0x78>
    11d4:	10800104 	addi	r2,r2,4
    11d8:	10c00017 	ldw	r3,0(r2)
    11dc:	19cb883a 	add	r5,r3,r7
    11e0:	00c6303a 	nor	r3,zero,r3
    11e4:	28c6703a 	and	r3,r5,r3
    11e8:	1986703a 	and	r3,r3,r6
    11ec:	183ff926 	beq	r3,zero,11d4 <strlen+0x54>
    11f0:	00000106 	br	11f8 <strlen+0x78>
    11f4:	10800044 	addi	r2,r2,1
    11f8:	10c00007 	ldb	r3,0(r2)
    11fc:	183ffd1e 	bne	r3,zero,11f4 <strlen+0x74>
    1200:	1105c83a 	sub	r2,r2,r4
    1204:	f800283a 	ret
    1208:	2005883a 	mov	r2,r4
    120c:	003fe706 	br	11ac <strlen+0x2c>
    1210:	0005883a 	mov	r2,zero
    1214:	f800283a 	ret

00001218 <___vfprintf_internal_r>:
    1218:	deffb804 	addi	sp,sp,-288
    121c:	dfc04715 	stw	ra,284(sp)
    1220:	ddc04515 	stw	r23,276(sp)
    1224:	dd404315 	stw	r21,268(sp)
    1228:	d9002c15 	stw	r4,176(sp)
    122c:	282f883a 	mov	r23,r5
    1230:	302b883a 	mov	r21,r6
    1234:	d9c02d15 	stw	r7,180(sp)
    1238:	df004615 	stw	fp,280(sp)
    123c:	dd804415 	stw	r22,272(sp)
    1240:	dd004215 	stw	r20,264(sp)
    1244:	dcc04115 	stw	r19,260(sp)
    1248:	dc804015 	stw	r18,256(sp)
    124c:	dc403f15 	stw	r17,252(sp)
    1250:	dc003e15 	stw	r16,248(sp)
    1254:	00060300 	call	6030 <_localeconv_r>
    1258:	10800017 	ldw	r2,0(r2)
    125c:	1009883a 	mov	r4,r2
    1260:	d8803415 	stw	r2,208(sp)
    1264:	00011800 	call	1180 <strlen>
    1268:	d8803715 	stw	r2,220(sp)
    126c:	d8802c17 	ldw	r2,176(sp)
    1270:	10000226 	beq	r2,zero,127c <___vfprintf_internal_r+0x64>
    1274:	10800e17 	ldw	r2,56(r2)
    1278:	1000f926 	beq	r2,zero,1660 <___vfprintf_internal_r+0x448>
    127c:	b880030b 	ldhu	r2,12(r23)
    1280:	10c8000c 	andi	r3,r2,8192
    1284:	1800061e 	bne	r3,zero,12a0 <___vfprintf_internal_r+0x88>
    1288:	b9001917 	ldw	r4,100(r23)
    128c:	00f7ffc4 	movi	r3,-8193
    1290:	10880014 	ori	r2,r2,8192
    1294:	20c6703a 	and	r3,r4,r3
    1298:	b880030d 	sth	r2,12(r23)
    129c:	b8c01915 	stw	r3,100(r23)
    12a0:	10c0020c 	andi	r3,r2,8
    12a4:	1800c126 	beq	r3,zero,15ac <___vfprintf_internal_r+0x394>
    12a8:	b8c00417 	ldw	r3,16(r23)
    12ac:	1800bf26 	beq	r3,zero,15ac <___vfprintf_internal_r+0x394>
    12b0:	1080068c 	andi	r2,r2,26
    12b4:	00c00284 	movi	r3,10
    12b8:	10c0c426 	beq	r2,r3,15cc <___vfprintf_internal_r+0x3b4>
    12bc:	d8c00404 	addi	r3,sp,16
    12c0:	050000b4 	movhi	r20,2
    12c4:	d9001e04 	addi	r4,sp,120
    12c8:	a528ab84 	addi	r20,r20,-23890
    12cc:	d8c01e15 	stw	r3,120(sp)
    12d0:	d8002015 	stw	zero,128(sp)
    12d4:	d8001f15 	stw	zero,124(sp)
    12d8:	d8003315 	stw	zero,204(sp)
    12dc:	d8003615 	stw	zero,216(sp)
    12e0:	d8003815 	stw	zero,224(sp)
    12e4:	1811883a 	mov	r8,r3
    12e8:	d8003915 	stw	zero,228(sp)
    12ec:	d8003a15 	stw	zero,232(sp)
    12f0:	d8002f15 	stw	zero,188(sp)
    12f4:	d9002815 	stw	r4,160(sp)
    12f8:	a8800007 	ldb	r2,0(r21)
    12fc:	10027b26 	beq	r2,zero,1cec <___vfprintf_internal_r+0xad4>
    1300:	00c00944 	movi	r3,37
    1304:	a821883a 	mov	r16,r21
    1308:	10c0021e 	bne	r2,r3,1314 <___vfprintf_internal_r+0xfc>
    130c:	00001406 	br	1360 <___vfprintf_internal_r+0x148>
    1310:	10c00326 	beq	r2,r3,1320 <___vfprintf_internal_r+0x108>
    1314:	84000044 	addi	r16,r16,1
    1318:	80800007 	ldb	r2,0(r16)
    131c:	103ffc1e 	bne	r2,zero,1310 <___vfprintf_internal_r+0xf8>
    1320:	8563c83a 	sub	r17,r16,r21
    1324:	88000e26 	beq	r17,zero,1360 <___vfprintf_internal_r+0x148>
    1328:	d8c02017 	ldw	r3,128(sp)
    132c:	d8801f17 	ldw	r2,124(sp)
    1330:	45400015 	stw	r21,0(r8)
    1334:	1c47883a 	add	r3,r3,r17
    1338:	10800044 	addi	r2,r2,1
    133c:	d8c02015 	stw	r3,128(sp)
    1340:	44400115 	stw	r17,4(r8)
    1344:	d8801f15 	stw	r2,124(sp)
    1348:	00c001c4 	movi	r3,7
    134c:	1880a716 	blt	r3,r2,15ec <___vfprintf_internal_r+0x3d4>
    1350:	42000204 	addi	r8,r8,8
    1354:	d9402f17 	ldw	r5,188(sp)
    1358:	2c4b883a 	add	r5,r5,r17
    135c:	d9402f15 	stw	r5,188(sp)
    1360:	80800007 	ldb	r2,0(r16)
    1364:	1000a826 	beq	r2,zero,1608 <___vfprintf_internal_r+0x3f0>
    1368:	84400047 	ldb	r17,1(r16)
    136c:	00bfffc4 	movi	r2,-1
    1370:	85400044 	addi	r21,r16,1
    1374:	d8002785 	stb	zero,158(sp)
    1378:	0007883a 	mov	r3,zero
    137c:	000f883a 	mov	r7,zero
    1380:	d8802915 	stw	r2,164(sp)
    1384:	d8003115 	stw	zero,196(sp)
    1388:	0025883a 	mov	r18,zero
    138c:	01401604 	movi	r5,88
    1390:	01800244 	movi	r6,9
    1394:	02800a84 	movi	r10,42
    1398:	02401b04 	movi	r9,108
    139c:	ad400044 	addi	r21,r21,1
    13a0:	88bff804 	addi	r2,r17,-32
    13a4:	28830436 	bltu	r5,r2,1fb8 <___vfprintf_internal_r+0xda0>
    13a8:	100490ba 	slli	r2,r2,2
    13ac:	01000034 	movhi	r4,0
    13b0:	2104f004 	addi	r4,r4,5056
    13b4:	1105883a 	add	r2,r2,r4
    13b8:	10800017 	ldw	r2,0(r2)
    13bc:	1000683a 	jmp	r2
    13c0:	00001ed8 	cmpnei	zero,zero,123
    13c4:	00001fb8 	rdprs	zero,zero,126
    13c8:	00001fb8 	rdprs	zero,zero,126
    13cc:	00001ef8 	rdprs	zero,zero,123
    13d0:	00001fb8 	rdprs	zero,zero,126
    13d4:	00001fb8 	rdprs	zero,zero,126
    13d8:	00001fb8 	rdprs	zero,zero,126
    13dc:	00001fb8 	rdprs	zero,zero,126
    13e0:	00001fb8 	rdprs	zero,zero,126
    13e4:	00001fb8 	rdprs	zero,zero,126
    13e8:	0000166c 	andhi	zero,zero,89
    13ec:	00001e14 	movui	zero,120
    13f0:	00001fb8 	rdprs	zero,zero,126
    13f4:	00001534 	movhi	zero,84
    13f8:	00001694 	movui	zero,90
    13fc:	00001fb8 	rdprs	zero,zero,126
    1400:	000016d4 	movui	zero,91
    1404:	000016e0 	cmpeqi	zero,zero,91
    1408:	000016e0 	cmpeqi	zero,zero,91
    140c:	000016e0 	cmpeqi	zero,zero,91
    1410:	000016e0 	cmpeqi	zero,zero,91
    1414:	000016e0 	cmpeqi	zero,zero,91
    1418:	000016e0 	cmpeqi	zero,zero,91
    141c:	000016e0 	cmpeqi	zero,zero,91
    1420:	000016e0 	cmpeqi	zero,zero,91
    1424:	000016e0 	cmpeqi	zero,zero,91
    1428:	00001fb8 	rdprs	zero,zero,126
    142c:	00001fb8 	rdprs	zero,zero,126
    1430:	00001fb8 	rdprs	zero,zero,126
    1434:	00001fb8 	rdprs	zero,zero,126
    1438:	00001fb8 	rdprs	zero,zero,126
    143c:	00001fb8 	rdprs	zero,zero,126
    1440:	00001fb8 	rdprs	zero,zero,126
    1444:	00001fb8 	rdprs	zero,zero,126
    1448:	00001fb8 	rdprs	zero,zero,126
    144c:	00001fb8 	rdprs	zero,zero,126
    1450:	00001714 	movui	zero,92
    1454:	000017d0 	cmplti	zero,zero,95
    1458:	00001fb8 	rdprs	zero,zero,126
    145c:	000017d0 	cmplti	zero,zero,95
    1460:	00001fb8 	rdprs	zero,zero,126
    1464:	00001fb8 	rdprs	zero,zero,126
    1468:	00001fb8 	rdprs	zero,zero,126
    146c:	00001fb8 	rdprs	zero,zero,126
    1470:	00001870 	cmpltui	zero,zero,97
    1474:	00001fb8 	rdprs	zero,zero,126
    1478:	00001fb8 	rdprs	zero,zero,126
    147c:	0000187c 	xorhi	zero,zero,97
    1480:	00001fb8 	rdprs	zero,zero,126
    1484:	00001fb8 	rdprs	zero,zero,126
    1488:	00001fb8 	rdprs	zero,zero,126
    148c:	00001fb8 	rdprs	zero,zero,126
    1490:	00001fb8 	rdprs	zero,zero,126
    1494:	00001cf4 	movhi	zero,115
    1498:	00001fb8 	rdprs	zero,zero,126
    149c:	00001fb8 	rdprs	zero,zero,126
    14a0:	00001d54 	movui	zero,117
    14a4:	00001fb8 	rdprs	zero,zero,126
    14a8:	00001fb8 	rdprs	zero,zero,126
    14ac:	00001fb8 	rdprs	zero,zero,126
    14b0:	00001fb8 	rdprs	zero,zero,126
    14b4:	00001fb8 	rdprs	zero,zero,126
    14b8:	00001fb8 	rdprs	zero,zero,126
    14bc:	00001fb8 	rdprs	zero,zero,126
    14c0:	00001fb8 	rdprs	zero,zero,126
    14c4:	00001fb8 	rdprs	zero,zero,126
    14c8:	00001fb8 	rdprs	zero,zero,126
    14cc:	00001f64 	muli	zero,zero,125
    14d0:	00001f04 	movi	zero,124
    14d4:	000017d0 	cmplti	zero,zero,95
    14d8:	000017d0 	cmplti	zero,zero,95
    14dc:	000017d0 	cmplti	zero,zero,95
    14e0:	00001f14 	movui	zero,124
    14e4:	00001f04 	movi	zero,124
    14e8:	00001fb8 	rdprs	zero,zero,126
    14ec:	00001fb8 	rdprs	zero,zero,126
    14f0:	00001f20 	cmpeqi	zero,zero,124
    14f4:	00001fb8 	rdprs	zero,zero,126
    14f8:	00001f30 	cmpltui	zero,zero,124
    14fc:	00001e04 	movi	zero,120
    1500:	00001540 	call	154 <alt_irq_handler+0x58>
    1504:	00001e24 	muli	zero,zero,120
    1508:	00001fb8 	rdprs	zero,zero,126
    150c:	00001e30 	cmpltui	zero,zero,120
    1510:	00001fb8 	rdprs	zero,zero,126
    1514:	00001e8c 	andi	zero,zero,122
    1518:	00001fb8 	rdprs	zero,zero,126
    151c:	00001fb8 	rdprs	zero,zero,126
    1520:	00001e9c 	xori	zero,zero,122
    1524:	d9003117 	ldw	r4,196(sp)
    1528:	d8802d15 	stw	r2,180(sp)
    152c:	0109c83a 	sub	r4,zero,r4
    1530:	d9003115 	stw	r4,196(sp)
    1534:	94800114 	ori	r18,r18,4
    1538:	ac400007 	ldb	r17,0(r21)
    153c:	003f9706 	br	139c <___vfprintf_internal_r+0x184>
    1540:	00800c04 	movi	r2,48
    1544:	d9002d17 	ldw	r4,180(sp)
    1548:	d9402917 	ldw	r5,164(sp)
    154c:	d8802705 	stb	r2,156(sp)
    1550:	00801e04 	movi	r2,120
    1554:	d8802745 	stb	r2,157(sp)
    1558:	d8002785 	stb	zero,158(sp)
    155c:	20c00104 	addi	r3,r4,4
    1560:	24c00017 	ldw	r19,0(r4)
    1564:	002d883a 	mov	r22,zero
    1568:	90800094 	ori	r2,r18,2
    156c:	28029a16 	blt	r5,zero,1fd8 <___vfprintf_internal_r+0xdc0>
    1570:	00bfdfc4 	movi	r2,-129
    1574:	90a4703a 	and	r18,r18,r2
    1578:	d8c02d15 	stw	r3,180(sp)
    157c:	94800094 	ori	r18,r18,2
    1580:	9802871e 	bne	r19,zero,1fa0 <___vfprintf_internal_r+0xd88>
    1584:	008000b4 	movhi	r2,2
    1588:	10a8a404 	addi	r2,r2,-23920
    158c:	d8803915 	stw	r2,228(sp)
    1590:	04401e04 	movi	r17,120
    1594:	d8802917 	ldw	r2,164(sp)
    1598:	0039883a 	mov	fp,zero
    159c:	1001e926 	beq	r2,zero,1d44 <___vfprintf_internal_r+0xb2c>
    15a0:	0027883a 	mov	r19,zero
    15a4:	002d883a 	mov	r22,zero
    15a8:	00020506 	br	1dc0 <___vfprintf_internal_r+0xba8>
    15ac:	d9002c17 	ldw	r4,176(sp)
    15b0:	b80b883a 	mov	r5,r23
    15b4:	00034e80 	call	34e8 <__swsetup_r>
    15b8:	1005ac1e 	bne	r2,zero,2c6c <___vfprintf_internal_r+0x1a54>
    15bc:	b880030b 	ldhu	r2,12(r23)
    15c0:	00c00284 	movi	r3,10
    15c4:	1080068c 	andi	r2,r2,26
    15c8:	10ff3c1e 	bne	r2,r3,12bc <___vfprintf_internal_r+0xa4>
    15cc:	b880038f 	ldh	r2,14(r23)
    15d0:	103f3a16 	blt	r2,zero,12bc <___vfprintf_internal_r+0xa4>
    15d4:	d9c02d17 	ldw	r7,180(sp)
    15d8:	d9002c17 	ldw	r4,176(sp)
    15dc:	a80d883a 	mov	r6,r21
    15e0:	b80b883a 	mov	r5,r23
    15e4:	000342c0 	call	342c <__sbprintf>
    15e8:	00001106 	br	1630 <___vfprintf_internal_r+0x418>
    15ec:	d9002c17 	ldw	r4,176(sp)
    15f0:	d9801e04 	addi	r6,sp,120
    15f4:	b80b883a 	mov	r5,r23
    15f8:	00088140 	call	8814 <__sprint_r>
    15fc:	1000081e 	bne	r2,zero,1620 <___vfprintf_internal_r+0x408>
    1600:	da000404 	addi	r8,sp,16
    1604:	003f5306 	br	1354 <___vfprintf_internal_r+0x13c>
    1608:	d8802017 	ldw	r2,128(sp)
    160c:	10000426 	beq	r2,zero,1620 <___vfprintf_internal_r+0x408>
    1610:	d9002c17 	ldw	r4,176(sp)
    1614:	d9801e04 	addi	r6,sp,120
    1618:	b80b883a 	mov	r5,r23
    161c:	00088140 	call	8814 <__sprint_r>
    1620:	b880030b 	ldhu	r2,12(r23)
    1624:	1080100c 	andi	r2,r2,64
    1628:	1005901e 	bne	r2,zero,2c6c <___vfprintf_internal_r+0x1a54>
    162c:	d8802f17 	ldw	r2,188(sp)
    1630:	dfc04717 	ldw	ra,284(sp)
    1634:	df004617 	ldw	fp,280(sp)
    1638:	ddc04517 	ldw	r23,276(sp)
    163c:	dd804417 	ldw	r22,272(sp)
    1640:	dd404317 	ldw	r21,268(sp)
    1644:	dd004217 	ldw	r20,264(sp)
    1648:	dcc04117 	ldw	r19,260(sp)
    164c:	dc804017 	ldw	r18,256(sp)
    1650:	dc403f17 	ldw	r17,252(sp)
    1654:	dc003e17 	ldw	r16,248(sp)
    1658:	dec04804 	addi	sp,sp,288
    165c:	f800283a 	ret
    1660:	d9002c17 	ldw	r4,176(sp)
    1664:	00054bc0 	call	54bc <__sinit>
    1668:	003f0406 	br	127c <___vfprintf_internal_r+0x64>
    166c:	d8802d17 	ldw	r2,180(sp)
    1670:	d9002d17 	ldw	r4,180(sp)
    1674:	10800017 	ldw	r2,0(r2)
    1678:	d8803115 	stw	r2,196(sp)
    167c:	20800104 	addi	r2,r4,4
    1680:	d9003117 	ldw	r4,196(sp)
    1684:	203fa716 	blt	r4,zero,1524 <___vfprintf_internal_r+0x30c>
    1688:	d8802d15 	stw	r2,180(sp)
    168c:	ac400007 	ldb	r17,0(r21)
    1690:	003f4206 	br	139c <___vfprintf_internal_r+0x184>
    1694:	ac400007 	ldb	r17,0(r21)
    1698:	aac00044 	addi	r11,r21,1
    169c:	8a872826 	beq	r17,r10,3340 <___vfprintf_internal_r+0x2128>
    16a0:	88bff404 	addi	r2,r17,-48
    16a4:	0009883a 	mov	r4,zero
    16a8:	30867d36 	bltu	r6,r2,30a0 <___vfprintf_internal_r+0x1e88>
    16ac:	5c400007 	ldb	r17,0(r11)
    16b0:	210002a4 	muli	r4,r4,10
    16b4:	5d400044 	addi	r21,r11,1
    16b8:	a817883a 	mov	r11,r21
    16bc:	2089883a 	add	r4,r4,r2
    16c0:	88bff404 	addi	r2,r17,-48
    16c4:	30bff92e 	bgeu	r6,r2,16ac <___vfprintf_internal_r+0x494>
    16c8:	2005c916 	blt	r4,zero,2df0 <___vfprintf_internal_r+0x1bd8>
    16cc:	d9002915 	stw	r4,164(sp)
    16d0:	003f3306 	br	13a0 <___vfprintf_internal_r+0x188>
    16d4:	94802014 	ori	r18,r18,128
    16d8:	ac400007 	ldb	r17,0(r21)
    16dc:	003f2f06 	br	139c <___vfprintf_internal_r+0x184>
    16e0:	a809883a 	mov	r4,r21
    16e4:	d8003115 	stw	zero,196(sp)
    16e8:	88bff404 	addi	r2,r17,-48
    16ec:	0017883a 	mov	r11,zero
    16f0:	24400007 	ldb	r17,0(r4)
    16f4:	5ac002a4 	muli	r11,r11,10
    16f8:	ad400044 	addi	r21,r21,1
    16fc:	a809883a 	mov	r4,r21
    1700:	12d7883a 	add	r11,r2,r11
    1704:	88bff404 	addi	r2,r17,-48
    1708:	30bff92e 	bgeu	r6,r2,16f0 <___vfprintf_internal_r+0x4d8>
    170c:	dac03115 	stw	r11,196(sp)
    1710:	003f2306 	br	13a0 <___vfprintf_internal_r+0x188>
    1714:	18c03fcc 	andi	r3,r3,255
    1718:	18072b1e 	bne	r3,zero,33c8 <___vfprintf_internal_r+0x21b0>
    171c:	94800414 	ori	r18,r18,16
    1720:	9080080c 	andi	r2,r18,32
    1724:	10037b26 	beq	r2,zero,2514 <___vfprintf_internal_r+0x12fc>
    1728:	d9402d17 	ldw	r5,180(sp)
    172c:	28800117 	ldw	r2,4(r5)
    1730:	2cc00017 	ldw	r19,0(r5)
    1734:	29400204 	addi	r5,r5,8
    1738:	d9402d15 	stw	r5,180(sp)
    173c:	102d883a 	mov	r22,r2
    1740:	10044b16 	blt	r2,zero,2870 <___vfprintf_internal_r+0x1658>
    1744:	d9402917 	ldw	r5,164(sp)
    1748:	df002783 	ldbu	fp,158(sp)
    174c:	2803bc16 	blt	r5,zero,2640 <___vfprintf_internal_r+0x1428>
    1750:	00ffdfc4 	movi	r3,-129
    1754:	9d84b03a 	or	r2,r19,r22
    1758:	90e4703a 	and	r18,r18,r3
    175c:	10017726 	beq	r2,zero,1d3c <___vfprintf_internal_r+0xb24>
    1760:	b0038326 	beq	r22,zero,2570 <___vfprintf_internal_r+0x1358>
    1764:	dc402a15 	stw	r17,168(sp)
    1768:	dc001e04 	addi	r16,sp,120
    176c:	b023883a 	mov	r17,r22
    1770:	402d883a 	mov	r22,r8
    1774:	9809883a 	mov	r4,r19
    1778:	880b883a 	mov	r5,r17
    177c:	01800284 	movi	r6,10
    1780:	000f883a 	mov	r7,zero
    1784:	000ac0c0 	call	ac0c <__umoddi3>
    1788:	10800c04 	addi	r2,r2,48
    178c:	843fffc4 	addi	r16,r16,-1
    1790:	9809883a 	mov	r4,r19
    1794:	880b883a 	mov	r5,r17
    1798:	80800005 	stb	r2,0(r16)
    179c:	01800284 	movi	r6,10
    17a0:	000f883a 	mov	r7,zero
    17a4:	000a6940 	call	a694 <__udivdi3>
    17a8:	1027883a 	mov	r19,r2
    17ac:	10c4b03a 	or	r2,r2,r3
    17b0:	1823883a 	mov	r17,r3
    17b4:	103fef1e 	bne	r2,zero,1774 <___vfprintf_internal_r+0x55c>
    17b8:	d8c02817 	ldw	r3,160(sp)
    17bc:	dc402a17 	ldw	r17,168(sp)
    17c0:	b011883a 	mov	r8,r22
    17c4:	1c07c83a 	sub	r3,r3,r16
    17c8:	d8c02e15 	stw	r3,184(sp)
    17cc:	00005906 	br	1934 <___vfprintf_internal_r+0x71c>
    17d0:	18c03fcc 	andi	r3,r3,255
    17d4:	1806fa1e 	bne	r3,zero,33c0 <___vfprintf_internal_r+0x21a8>
    17d8:	9080020c 	andi	r2,r18,8
    17dc:	10048a26 	beq	r2,zero,2a08 <___vfprintf_internal_r+0x17f0>
    17e0:	d8c02d17 	ldw	r3,180(sp)
    17e4:	d9002d17 	ldw	r4,180(sp)
    17e8:	d9402d17 	ldw	r5,180(sp)
    17ec:	18c00017 	ldw	r3,0(r3)
    17f0:	21000117 	ldw	r4,4(r4)
    17f4:	29400204 	addi	r5,r5,8
    17f8:	d8c03615 	stw	r3,216(sp)
    17fc:	d9003815 	stw	r4,224(sp)
    1800:	d9402d15 	stw	r5,180(sp)
    1804:	d9003617 	ldw	r4,216(sp)
    1808:	d9403817 	ldw	r5,224(sp)
    180c:	da003d15 	stw	r8,244(sp)
    1810:	04000044 	movi	r16,1
    1814:	00084380 	call	8438 <__fpclassifyd>
    1818:	da003d17 	ldw	r8,244(sp)
    181c:	14041f1e 	bne	r2,r16,289c <___vfprintf_internal_r+0x1684>
    1820:	d9003617 	ldw	r4,216(sp)
    1824:	d9403817 	ldw	r5,224(sp)
    1828:	000d883a 	mov	r6,zero
    182c:	000f883a 	mov	r7,zero
    1830:	000c5f00 	call	c5f0 <__ledf2>
    1834:	da003d17 	ldw	r8,244(sp)
    1838:	1005be16 	blt	r2,zero,2f34 <___vfprintf_internal_r+0x1d1c>
    183c:	df002783 	ldbu	fp,158(sp)
    1840:	008011c4 	movi	r2,71
    1844:	1445330e 	bge	r2,r17,2d14 <___vfprintf_internal_r+0x1afc>
    1848:	040000b4 	movhi	r16,2
    184c:	84289c04 	addi	r16,r16,-23952
    1850:	00c000c4 	movi	r3,3
    1854:	00bfdfc4 	movi	r2,-129
    1858:	d8c02a15 	stw	r3,168(sp)
    185c:	90a4703a 	and	r18,r18,r2
    1860:	d8c02e15 	stw	r3,184(sp)
    1864:	d8002915 	stw	zero,164(sp)
    1868:	d8003215 	stw	zero,200(sp)
    186c:	00003706 	br	194c <___vfprintf_internal_r+0x734>
    1870:	94800214 	ori	r18,r18,8
    1874:	ac400007 	ldb	r17,0(r21)
    1878:	003ec806 	br	139c <___vfprintf_internal_r+0x184>
    187c:	18c03fcc 	andi	r3,r3,255
    1880:	1806db1e 	bne	r3,zero,33f0 <___vfprintf_internal_r+0x21d8>
    1884:	94800414 	ori	r18,r18,16
    1888:	9080080c 	andi	r2,r18,32
    188c:	1002d826 	beq	r2,zero,23f0 <___vfprintf_internal_r+0x11d8>
    1890:	d9402d17 	ldw	r5,180(sp)
    1894:	d8c02917 	ldw	r3,164(sp)
    1898:	d8002785 	stb	zero,158(sp)
    189c:	28800204 	addi	r2,r5,8
    18a0:	2cc00017 	ldw	r19,0(r5)
    18a4:	2d800117 	ldw	r22,4(r5)
    18a8:	18048f16 	blt	r3,zero,2ae8 <___vfprintf_internal_r+0x18d0>
    18ac:	013fdfc4 	movi	r4,-129
    18b0:	9d86b03a 	or	r3,r19,r22
    18b4:	d8802d15 	stw	r2,180(sp)
    18b8:	9124703a 	and	r18,r18,r4
    18bc:	1802d91e 	bne	r3,zero,2424 <___vfprintf_internal_r+0x120c>
    18c0:	d8c02917 	ldw	r3,164(sp)
    18c4:	0039883a 	mov	fp,zero
    18c8:	1805c326 	beq	r3,zero,2fd8 <___vfprintf_internal_r+0x1dc0>
    18cc:	0027883a 	mov	r19,zero
    18d0:	002d883a 	mov	r22,zero
    18d4:	dc001e04 	addi	r16,sp,120
    18d8:	9806d0fa 	srli	r3,r19,3
    18dc:	b008977a 	slli	r4,r22,29
    18e0:	b02cd0fa 	srli	r22,r22,3
    18e4:	9cc001cc 	andi	r19,r19,7
    18e8:	98800c04 	addi	r2,r19,48
    18ec:	843fffc4 	addi	r16,r16,-1
    18f0:	20e6b03a 	or	r19,r4,r3
    18f4:	80800005 	stb	r2,0(r16)
    18f8:	9d86b03a 	or	r3,r19,r22
    18fc:	183ff61e 	bne	r3,zero,18d8 <___vfprintf_internal_r+0x6c0>
    1900:	90c0004c 	andi	r3,r18,1
    1904:	18013b26 	beq	r3,zero,1df4 <___vfprintf_internal_r+0xbdc>
    1908:	10803fcc 	andi	r2,r2,255
    190c:	1080201c 	xori	r2,r2,128
    1910:	10bfe004 	addi	r2,r2,-128
    1914:	00c00c04 	movi	r3,48
    1918:	10c13626 	beq	r2,r3,1df4 <___vfprintf_internal_r+0xbdc>
    191c:	80ffffc5 	stb	r3,-1(r16)
    1920:	d8c02817 	ldw	r3,160(sp)
    1924:	80bfffc4 	addi	r2,r16,-1
    1928:	1021883a 	mov	r16,r2
    192c:	1887c83a 	sub	r3,r3,r2
    1930:	d8c02e15 	stw	r3,184(sp)
    1934:	d8802e17 	ldw	r2,184(sp)
    1938:	d9002917 	ldw	r4,164(sp)
    193c:	1100010e 	bge	r2,r4,1944 <___vfprintf_internal_r+0x72c>
    1940:	2005883a 	mov	r2,r4
    1944:	d8802a15 	stw	r2,168(sp)
    1948:	d8003215 	stw	zero,200(sp)
    194c:	e7003fcc 	andi	fp,fp,255
    1950:	e700201c 	xori	fp,fp,128
    1954:	e73fe004 	addi	fp,fp,-128
    1958:	e0000326 	beq	fp,zero,1968 <___vfprintf_internal_r+0x750>
    195c:	d8c02a17 	ldw	r3,168(sp)
    1960:	18c00044 	addi	r3,r3,1
    1964:	d8c02a15 	stw	r3,168(sp)
    1968:	90c0008c 	andi	r3,r18,2
    196c:	d8c02b15 	stw	r3,172(sp)
    1970:	18000326 	beq	r3,zero,1980 <___vfprintf_internal_r+0x768>
    1974:	d8c02a17 	ldw	r3,168(sp)
    1978:	18c00084 	addi	r3,r3,2
    197c:	d8c02a15 	stw	r3,168(sp)
    1980:	90c0210c 	andi	r3,r18,132
    1984:	d8c03015 	stw	r3,192(sp)
    1988:	1801a31e 	bne	r3,zero,2018 <___vfprintf_internal_r+0xe00>
    198c:	d9003117 	ldw	r4,196(sp)
    1990:	d8c02a17 	ldw	r3,168(sp)
    1994:	20e7c83a 	sub	r19,r4,r3
    1998:	04c19f0e 	bge	zero,r19,2018 <___vfprintf_internal_r+0xe00>
    199c:	02400404 	movi	r9,16
    19a0:	d8c02017 	ldw	r3,128(sp)
    19a4:	d8801f17 	ldw	r2,124(sp)
    19a8:	4cc50d0e 	bge	r9,r19,2de0 <___vfprintf_internal_r+0x1bc8>
    19ac:	014000b4 	movhi	r5,2
    19b0:	2968af84 	addi	r5,r5,-23874
    19b4:	dc403b15 	stw	r17,236(sp)
    19b8:	d9403515 	stw	r5,212(sp)
    19bc:	9823883a 	mov	r17,r19
    19c0:	482d883a 	mov	r22,r9
    19c4:	9027883a 	mov	r19,r18
    19c8:	070001c4 	movi	fp,7
    19cc:	8025883a 	mov	r18,r16
    19d0:	dc002c17 	ldw	r16,176(sp)
    19d4:	00000306 	br	19e4 <___vfprintf_internal_r+0x7cc>
    19d8:	8c7ffc04 	addi	r17,r17,-16
    19dc:	42000204 	addi	r8,r8,8
    19e0:	b440130e 	bge	r22,r17,1a30 <___vfprintf_internal_r+0x818>
    19e4:	010000b4 	movhi	r4,2
    19e8:	18c00404 	addi	r3,r3,16
    19ec:	10800044 	addi	r2,r2,1
    19f0:	2128af84 	addi	r4,r4,-23874
    19f4:	41000015 	stw	r4,0(r8)
    19f8:	45800115 	stw	r22,4(r8)
    19fc:	d8c02015 	stw	r3,128(sp)
    1a00:	d8801f15 	stw	r2,124(sp)
    1a04:	e0bff40e 	bge	fp,r2,19d8 <___vfprintf_internal_r+0x7c0>
    1a08:	d9801e04 	addi	r6,sp,120
    1a0c:	b80b883a 	mov	r5,r23
    1a10:	8009883a 	mov	r4,r16
    1a14:	00088140 	call	8814 <__sprint_r>
    1a18:	103f011e 	bne	r2,zero,1620 <___vfprintf_internal_r+0x408>
    1a1c:	8c7ffc04 	addi	r17,r17,-16
    1a20:	d8c02017 	ldw	r3,128(sp)
    1a24:	d8801f17 	ldw	r2,124(sp)
    1a28:	da000404 	addi	r8,sp,16
    1a2c:	b47fed16 	blt	r22,r17,19e4 <___vfprintf_internal_r+0x7cc>
    1a30:	9021883a 	mov	r16,r18
    1a34:	9825883a 	mov	r18,r19
    1a38:	8827883a 	mov	r19,r17
    1a3c:	dc403b17 	ldw	r17,236(sp)
    1a40:	d9403517 	ldw	r5,212(sp)
    1a44:	98c7883a 	add	r3,r19,r3
    1a48:	10800044 	addi	r2,r2,1
    1a4c:	41400015 	stw	r5,0(r8)
    1a50:	44c00115 	stw	r19,4(r8)
    1a54:	d8c02015 	stw	r3,128(sp)
    1a58:	d8801f15 	stw	r2,124(sp)
    1a5c:	010001c4 	movi	r4,7
    1a60:	2082a316 	blt	r4,r2,24f0 <___vfprintf_internal_r+0x12d8>
    1a64:	df002787 	ldb	fp,158(sp)
    1a68:	42000204 	addi	r8,r8,8
    1a6c:	e0000c26 	beq	fp,zero,1aa0 <___vfprintf_internal_r+0x888>
    1a70:	d8801f17 	ldw	r2,124(sp)
    1a74:	d9002784 	addi	r4,sp,158
    1a78:	18c00044 	addi	r3,r3,1
    1a7c:	10800044 	addi	r2,r2,1
    1a80:	41000015 	stw	r4,0(r8)
    1a84:	01000044 	movi	r4,1
    1a88:	41000115 	stw	r4,4(r8)
    1a8c:	d8c02015 	stw	r3,128(sp)
    1a90:	d8801f15 	stw	r2,124(sp)
    1a94:	010001c4 	movi	r4,7
    1a98:	20823c16 	blt	r4,r2,238c <___vfprintf_internal_r+0x1174>
    1a9c:	42000204 	addi	r8,r8,8
    1aa0:	d8802b17 	ldw	r2,172(sp)
    1aa4:	10000c26 	beq	r2,zero,1ad8 <___vfprintf_internal_r+0x8c0>
    1aa8:	d8801f17 	ldw	r2,124(sp)
    1aac:	d9002704 	addi	r4,sp,156
    1ab0:	18c00084 	addi	r3,r3,2
    1ab4:	10800044 	addi	r2,r2,1
    1ab8:	41000015 	stw	r4,0(r8)
    1abc:	01000084 	movi	r4,2
    1ac0:	41000115 	stw	r4,4(r8)
    1ac4:	d8c02015 	stw	r3,128(sp)
    1ac8:	d8801f15 	stw	r2,124(sp)
    1acc:	010001c4 	movi	r4,7
    1ad0:	20823616 	blt	r4,r2,23ac <___vfprintf_internal_r+0x1194>
    1ad4:	42000204 	addi	r8,r8,8
    1ad8:	d9003017 	ldw	r4,192(sp)
    1adc:	00802004 	movi	r2,128
    1ae0:	20819926 	beq	r4,r2,2148 <___vfprintf_internal_r+0xf30>
    1ae4:	d9402917 	ldw	r5,164(sp)
    1ae8:	d8802e17 	ldw	r2,184(sp)
    1aec:	28adc83a 	sub	r22,r5,r2
    1af0:	0580310e 	bge	zero,r22,1bb8 <___vfprintf_internal_r+0x9a0>
    1af4:	07000404 	movi	fp,16
    1af8:	d8801f17 	ldw	r2,124(sp)
    1afc:	e584140e 	bge	fp,r22,2b50 <___vfprintf_internal_r+0x1938>
    1b00:	014000b4 	movhi	r5,2
    1b04:	2968ab84 	addi	r5,r5,-23890
    1b08:	dc402915 	stw	r17,164(sp)
    1b0c:	d9402b15 	stw	r5,172(sp)
    1b10:	b023883a 	mov	r17,r22
    1b14:	04c001c4 	movi	r19,7
    1b18:	a82d883a 	mov	r22,r21
    1b1c:	902b883a 	mov	r21,r18
    1b20:	8025883a 	mov	r18,r16
    1b24:	dc002c17 	ldw	r16,176(sp)
    1b28:	00000306 	br	1b38 <___vfprintf_internal_r+0x920>
    1b2c:	8c7ffc04 	addi	r17,r17,-16
    1b30:	42000204 	addi	r8,r8,8
    1b34:	e440110e 	bge	fp,r17,1b7c <___vfprintf_internal_r+0x964>
    1b38:	18c00404 	addi	r3,r3,16
    1b3c:	10800044 	addi	r2,r2,1
    1b40:	45000015 	stw	r20,0(r8)
    1b44:	47000115 	stw	fp,4(r8)
    1b48:	d8c02015 	stw	r3,128(sp)
    1b4c:	d8801f15 	stw	r2,124(sp)
    1b50:	98bff60e 	bge	r19,r2,1b2c <___vfprintf_internal_r+0x914>
    1b54:	d9801e04 	addi	r6,sp,120
    1b58:	b80b883a 	mov	r5,r23
    1b5c:	8009883a 	mov	r4,r16
    1b60:	00088140 	call	8814 <__sprint_r>
    1b64:	103eae1e 	bne	r2,zero,1620 <___vfprintf_internal_r+0x408>
    1b68:	8c7ffc04 	addi	r17,r17,-16
    1b6c:	d8c02017 	ldw	r3,128(sp)
    1b70:	d8801f17 	ldw	r2,124(sp)
    1b74:	da000404 	addi	r8,sp,16
    1b78:	e47fef16 	blt	fp,r17,1b38 <___vfprintf_internal_r+0x920>
    1b7c:	9021883a 	mov	r16,r18
    1b80:	a825883a 	mov	r18,r21
    1b84:	b02b883a 	mov	r21,r22
    1b88:	882d883a 	mov	r22,r17
    1b8c:	dc402917 	ldw	r17,164(sp)
    1b90:	d9002b17 	ldw	r4,172(sp)
    1b94:	1d87883a 	add	r3,r3,r22
    1b98:	10800044 	addi	r2,r2,1
    1b9c:	41000015 	stw	r4,0(r8)
    1ba0:	45800115 	stw	r22,4(r8)
    1ba4:	d8c02015 	stw	r3,128(sp)
    1ba8:	d8801f15 	stw	r2,124(sp)
    1bac:	010001c4 	movi	r4,7
    1bb0:	2081ee16 	blt	r4,r2,236c <___vfprintf_internal_r+0x1154>
    1bb4:	42000204 	addi	r8,r8,8
    1bb8:	9080400c 	andi	r2,r18,256
    1bbc:	1001181e 	bne	r2,zero,2020 <___vfprintf_internal_r+0xe08>
    1bc0:	d9402e17 	ldw	r5,184(sp)
    1bc4:	d8801f17 	ldw	r2,124(sp)
    1bc8:	44000015 	stw	r16,0(r8)
    1bcc:	1947883a 	add	r3,r3,r5
    1bd0:	10800044 	addi	r2,r2,1
    1bd4:	41400115 	stw	r5,4(r8)
    1bd8:	d8c02015 	stw	r3,128(sp)
    1bdc:	d8801f15 	stw	r2,124(sp)
    1be0:	010001c4 	movi	r4,7
    1be4:	2081d316 	blt	r4,r2,2334 <___vfprintf_internal_r+0x111c>
    1be8:	42000204 	addi	r8,r8,8
    1bec:	9480010c 	andi	r18,r18,4
    1bf0:	90003226 	beq	r18,zero,1cbc <___vfprintf_internal_r+0xaa4>
    1bf4:	d9403117 	ldw	r5,196(sp)
    1bf8:	d8802a17 	ldw	r2,168(sp)
    1bfc:	28a1c83a 	sub	r16,r5,r2
    1c00:	04002e0e 	bge	zero,r16,1cbc <___vfprintf_internal_r+0xaa4>
    1c04:	04400404 	movi	r17,16
    1c08:	d8801f17 	ldw	r2,124(sp)
    1c0c:	8c04a20e 	bge	r17,r16,2e98 <___vfprintf_internal_r+0x1c80>
    1c10:	014000b4 	movhi	r5,2
    1c14:	2968af84 	addi	r5,r5,-23874
    1c18:	d9403515 	stw	r5,212(sp)
    1c1c:	048001c4 	movi	r18,7
    1c20:	dcc02c17 	ldw	r19,176(sp)
    1c24:	00000306 	br	1c34 <___vfprintf_internal_r+0xa1c>
    1c28:	843ffc04 	addi	r16,r16,-16
    1c2c:	42000204 	addi	r8,r8,8
    1c30:	8c00130e 	bge	r17,r16,1c80 <___vfprintf_internal_r+0xa68>
    1c34:	010000b4 	movhi	r4,2
    1c38:	18c00404 	addi	r3,r3,16
    1c3c:	10800044 	addi	r2,r2,1
    1c40:	2128af84 	addi	r4,r4,-23874
    1c44:	41000015 	stw	r4,0(r8)
    1c48:	44400115 	stw	r17,4(r8)
    1c4c:	d8c02015 	stw	r3,128(sp)
    1c50:	d8801f15 	stw	r2,124(sp)
    1c54:	90bff40e 	bge	r18,r2,1c28 <___vfprintf_internal_r+0xa10>
    1c58:	d9801e04 	addi	r6,sp,120
    1c5c:	b80b883a 	mov	r5,r23
    1c60:	9809883a 	mov	r4,r19
    1c64:	00088140 	call	8814 <__sprint_r>
    1c68:	103e6d1e 	bne	r2,zero,1620 <___vfprintf_internal_r+0x408>
    1c6c:	843ffc04 	addi	r16,r16,-16
    1c70:	d8c02017 	ldw	r3,128(sp)
    1c74:	d8801f17 	ldw	r2,124(sp)
    1c78:	da000404 	addi	r8,sp,16
    1c7c:	8c3fed16 	blt	r17,r16,1c34 <___vfprintf_internal_r+0xa1c>
    1c80:	d9403517 	ldw	r5,212(sp)
    1c84:	1c07883a 	add	r3,r3,r16
    1c88:	10800044 	addi	r2,r2,1
    1c8c:	41400015 	stw	r5,0(r8)
    1c90:	44000115 	stw	r16,4(r8)
    1c94:	d8c02015 	stw	r3,128(sp)
    1c98:	d8801f15 	stw	r2,124(sp)
    1c9c:	010001c4 	movi	r4,7
    1ca0:	2080060e 	bge	r4,r2,1cbc <___vfprintf_internal_r+0xaa4>
    1ca4:	d9002c17 	ldw	r4,176(sp)
    1ca8:	d9801e04 	addi	r6,sp,120
    1cac:	b80b883a 	mov	r5,r23
    1cb0:	00088140 	call	8814 <__sprint_r>
    1cb4:	103e5a1e 	bne	r2,zero,1620 <___vfprintf_internal_r+0x408>
    1cb8:	d8c02017 	ldw	r3,128(sp)
    1cbc:	d8803117 	ldw	r2,196(sp)
    1cc0:	d9002a17 	ldw	r4,168(sp)
    1cc4:	1100010e 	bge	r2,r4,1ccc <___vfprintf_internal_r+0xab4>
    1cc8:	2005883a 	mov	r2,r4
    1ccc:	d9402f17 	ldw	r5,188(sp)
    1cd0:	288b883a 	add	r5,r5,r2
    1cd4:	d9402f15 	stw	r5,188(sp)
    1cd8:	18019e1e 	bne	r3,zero,2354 <___vfprintf_internal_r+0x113c>
    1cdc:	a8800007 	ldb	r2,0(r21)
    1ce0:	d8001f15 	stw	zero,124(sp)
    1ce4:	da000404 	addi	r8,sp,16
    1ce8:	103d851e 	bne	r2,zero,1300 <___vfprintf_internal_r+0xe8>
    1cec:	a821883a 	mov	r16,r21
    1cf0:	003d9b06 	br	1360 <___vfprintf_internal_r+0x148>
    1cf4:	18c03fcc 	andi	r3,r3,255
    1cf8:	1805c11e 	bne	r3,zero,3400 <___vfprintf_internal_r+0x21e8>
    1cfc:	94800414 	ori	r18,r18,16
    1d00:	9080080c 	andi	r2,r18,32
    1d04:	10020c26 	beq	r2,zero,2538 <___vfprintf_internal_r+0x1320>
    1d08:	d8802d17 	ldw	r2,180(sp)
    1d0c:	d9002917 	ldw	r4,164(sp)
    1d10:	d8002785 	stb	zero,158(sp)
    1d14:	10c00204 	addi	r3,r2,8
    1d18:	14c00017 	ldw	r19,0(r2)
    1d1c:	15800117 	ldw	r22,4(r2)
    1d20:	20040f16 	blt	r4,zero,2d60 <___vfprintf_internal_r+0x1b48>
    1d24:	013fdfc4 	movi	r4,-129
    1d28:	9d84b03a 	or	r2,r19,r22
    1d2c:	d8c02d15 	stw	r3,180(sp)
    1d30:	9124703a 	and	r18,r18,r4
    1d34:	0039883a 	mov	fp,zero
    1d38:	103e891e 	bne	r2,zero,1760 <___vfprintf_internal_r+0x548>
    1d3c:	d9002917 	ldw	r4,164(sp)
    1d40:	2002c11e 	bne	r4,zero,2848 <___vfprintf_internal_r+0x1630>
    1d44:	d8002915 	stw	zero,164(sp)
    1d48:	d8002e15 	stw	zero,184(sp)
    1d4c:	dc001e04 	addi	r16,sp,120
    1d50:	003ef806 	br	1934 <___vfprintf_internal_r+0x71c>
    1d54:	18c03fcc 	andi	r3,r3,255
    1d58:	18059d1e 	bne	r3,zero,33d0 <___vfprintf_internal_r+0x21b8>
    1d5c:	014000b4 	movhi	r5,2
    1d60:	29689f04 	addi	r5,r5,-23940
    1d64:	d9403915 	stw	r5,228(sp)
    1d68:	9080080c 	andi	r2,r18,32
    1d6c:	10005226 	beq	r2,zero,1eb8 <___vfprintf_internal_r+0xca0>
    1d70:	d8802d17 	ldw	r2,180(sp)
    1d74:	14c00017 	ldw	r19,0(r2)
    1d78:	15800117 	ldw	r22,4(r2)
    1d7c:	10800204 	addi	r2,r2,8
    1d80:	d8802d15 	stw	r2,180(sp)
    1d84:	9080004c 	andi	r2,r18,1
    1d88:	10019026 	beq	r2,zero,23cc <___vfprintf_internal_r+0x11b4>
    1d8c:	9d84b03a 	or	r2,r19,r22
    1d90:	10036926 	beq	r2,zero,2b38 <___vfprintf_internal_r+0x1920>
    1d94:	d8c02917 	ldw	r3,164(sp)
    1d98:	00800c04 	movi	r2,48
    1d9c:	d8802705 	stb	r2,156(sp)
    1da0:	dc402745 	stb	r17,157(sp)
    1da4:	d8002785 	stb	zero,158(sp)
    1da8:	90800094 	ori	r2,r18,2
    1dac:	18045d16 	blt	r3,zero,2f24 <___vfprintf_internal_r+0x1d0c>
    1db0:	00bfdfc4 	movi	r2,-129
    1db4:	90a4703a 	and	r18,r18,r2
    1db8:	94800094 	ori	r18,r18,2
    1dbc:	0039883a 	mov	fp,zero
    1dc0:	d9003917 	ldw	r4,228(sp)
    1dc4:	dc001e04 	addi	r16,sp,120
    1dc8:	988003cc 	andi	r2,r19,15
    1dcc:	b006973a 	slli	r3,r22,28
    1dd0:	2085883a 	add	r2,r4,r2
    1dd4:	9826d13a 	srli	r19,r19,4
    1dd8:	10800003 	ldbu	r2,0(r2)
    1ddc:	b02cd13a 	srli	r22,r22,4
    1de0:	843fffc4 	addi	r16,r16,-1
    1de4:	1ce6b03a 	or	r19,r3,r19
    1de8:	80800005 	stb	r2,0(r16)
    1dec:	9d84b03a 	or	r2,r19,r22
    1df0:	103ff51e 	bne	r2,zero,1dc8 <___vfprintf_internal_r+0xbb0>
    1df4:	d8c02817 	ldw	r3,160(sp)
    1df8:	1c07c83a 	sub	r3,r3,r16
    1dfc:	d8c02e15 	stw	r3,184(sp)
    1e00:	003ecc06 	br	1934 <___vfprintf_internal_r+0x71c>
    1e04:	18c03fcc 	andi	r3,r3,255
    1e08:	183e9f26 	beq	r3,zero,1888 <___vfprintf_internal_r+0x670>
    1e0c:	d9c02785 	stb	r7,158(sp)
    1e10:	003e9d06 	br	1888 <___vfprintf_internal_r+0x670>
    1e14:	00c00044 	movi	r3,1
    1e18:	01c00ac4 	movi	r7,43
    1e1c:	ac400007 	ldb	r17,0(r21)
    1e20:	003d5e06 	br	139c <___vfprintf_internal_r+0x184>
    1e24:	94800814 	ori	r18,r18,32
    1e28:	ac400007 	ldb	r17,0(r21)
    1e2c:	003d5b06 	br	139c <___vfprintf_internal_r+0x184>
    1e30:	d8c02d17 	ldw	r3,180(sp)
    1e34:	d8002785 	stb	zero,158(sp)
    1e38:	1c000017 	ldw	r16,0(r3)
    1e3c:	1cc00104 	addi	r19,r3,4
    1e40:	80041926 	beq	r16,zero,2ea8 <___vfprintf_internal_r+0x1c90>
    1e44:	d9002917 	ldw	r4,164(sp)
    1e48:	2003d016 	blt	r4,zero,2d8c <___vfprintf_internal_r+0x1b74>
    1e4c:	200d883a 	mov	r6,r4
    1e50:	000b883a 	mov	r5,zero
    1e54:	8009883a 	mov	r4,r16
    1e58:	da003d15 	stw	r8,244(sp)
    1e5c:	0006a280 	call	6a28 <memchr>
    1e60:	da003d17 	ldw	r8,244(sp)
    1e64:	10045426 	beq	r2,zero,2fb8 <___vfprintf_internal_r+0x1da0>
    1e68:	1405c83a 	sub	r2,r2,r16
    1e6c:	d8802e15 	stw	r2,184(sp)
    1e70:	1003cc16 	blt	r2,zero,2da4 <___vfprintf_internal_r+0x1b8c>
    1e74:	df002783 	ldbu	fp,158(sp)
    1e78:	d8802a15 	stw	r2,168(sp)
    1e7c:	dcc02d15 	stw	r19,180(sp)
    1e80:	d8002915 	stw	zero,164(sp)
    1e84:	d8003215 	stw	zero,200(sp)
    1e88:	003eb006 	br	194c <___vfprintf_internal_r+0x734>
    1e8c:	18c03fcc 	andi	r3,r3,255
    1e90:	183f9b26 	beq	r3,zero,1d00 <___vfprintf_internal_r+0xae8>
    1e94:	d9c02785 	stb	r7,158(sp)
    1e98:	003f9906 	br	1d00 <___vfprintf_internal_r+0xae8>
    1e9c:	18c03fcc 	andi	r3,r3,255
    1ea0:	1805551e 	bne	r3,zero,33f8 <___vfprintf_internal_r+0x21e0>
    1ea4:	014000b4 	movhi	r5,2
    1ea8:	2968a404 	addi	r5,r5,-23920
    1eac:	d9403915 	stw	r5,228(sp)
    1eb0:	9080080c 	andi	r2,r18,32
    1eb4:	103fae1e 	bne	r2,zero,1d70 <___vfprintf_internal_r+0xb58>
    1eb8:	9080040c 	andi	r2,r18,16
    1ebc:	1002de26 	beq	r2,zero,2a38 <___vfprintf_internal_r+0x1820>
    1ec0:	d8c02d17 	ldw	r3,180(sp)
    1ec4:	002d883a 	mov	r22,zero
    1ec8:	1cc00017 	ldw	r19,0(r3)
    1ecc:	18c00104 	addi	r3,r3,4
    1ed0:	d8c02d15 	stw	r3,180(sp)
    1ed4:	003fab06 	br	1d84 <___vfprintf_internal_r+0xb6c>
    1ed8:	38803fcc 	andi	r2,r7,255
    1edc:	1080201c 	xori	r2,r2,128
    1ee0:	10bfe004 	addi	r2,r2,-128
    1ee4:	1002d21e 	bne	r2,zero,2a30 <___vfprintf_internal_r+0x1818>
    1ee8:	00c00044 	movi	r3,1
    1eec:	01c00804 	movi	r7,32
    1ef0:	ac400007 	ldb	r17,0(r21)
    1ef4:	003d2906 	br	139c <___vfprintf_internal_r+0x184>
    1ef8:	94800054 	ori	r18,r18,1
    1efc:	ac400007 	ldb	r17,0(r21)
    1f00:	003d2606 	br	139c <___vfprintf_internal_r+0x184>
    1f04:	18c03fcc 	andi	r3,r3,255
    1f08:	183e0526 	beq	r3,zero,1720 <___vfprintf_internal_r+0x508>
    1f0c:	d9c02785 	stb	r7,158(sp)
    1f10:	003e0306 	br	1720 <___vfprintf_internal_r+0x508>
    1f14:	94801014 	ori	r18,r18,64
    1f18:	ac400007 	ldb	r17,0(r21)
    1f1c:	003d1f06 	br	139c <___vfprintf_internal_r+0x184>
    1f20:	ac400007 	ldb	r17,0(r21)
    1f24:	8a438726 	beq	r17,r9,2d44 <___vfprintf_internal_r+0x1b2c>
    1f28:	94800414 	ori	r18,r18,16
    1f2c:	003d1b06 	br	139c <___vfprintf_internal_r+0x184>
    1f30:	18c03fcc 	andi	r3,r3,255
    1f34:	1805341e 	bne	r3,zero,3408 <___vfprintf_internal_r+0x21f0>
    1f38:	9080080c 	andi	r2,r18,32
    1f3c:	1002cd26 	beq	r2,zero,2a74 <___vfprintf_internal_r+0x185c>
    1f40:	d9402d17 	ldw	r5,180(sp)
    1f44:	d9002f17 	ldw	r4,188(sp)
    1f48:	28800017 	ldw	r2,0(r5)
    1f4c:	2007d7fa 	srai	r3,r4,31
    1f50:	29400104 	addi	r5,r5,4
    1f54:	d9402d15 	stw	r5,180(sp)
    1f58:	11000015 	stw	r4,0(r2)
    1f5c:	10c00115 	stw	r3,4(r2)
    1f60:	003ce506 	br	12f8 <___vfprintf_internal_r+0xe0>
    1f64:	d8c02d17 	ldw	r3,180(sp)
    1f68:	d9002d17 	ldw	r4,180(sp)
    1f6c:	d8002785 	stb	zero,158(sp)
    1f70:	18800017 	ldw	r2,0(r3)
    1f74:	21000104 	addi	r4,r4,4
    1f78:	00c00044 	movi	r3,1
    1f7c:	d8c02a15 	stw	r3,168(sp)
    1f80:	d8801405 	stb	r2,80(sp)
    1f84:	d9002d15 	stw	r4,180(sp)
    1f88:	d8c02e15 	stw	r3,184(sp)
    1f8c:	d8002915 	stw	zero,164(sp)
    1f90:	d8003215 	stw	zero,200(sp)
    1f94:	dc001404 	addi	r16,sp,80
    1f98:	0039883a 	mov	fp,zero
    1f9c:	003e7206 	br	1968 <___vfprintf_internal_r+0x750>
    1fa0:	010000b4 	movhi	r4,2
    1fa4:	2128a404 	addi	r4,r4,-23920
    1fa8:	0039883a 	mov	fp,zero
    1fac:	d9003915 	stw	r4,228(sp)
    1fb0:	04401e04 	movi	r17,120
    1fb4:	003f8206 	br	1dc0 <___vfprintf_internal_r+0xba8>
    1fb8:	18c03fcc 	andi	r3,r3,255
    1fbc:	1805061e 	bne	r3,zero,33d8 <___vfprintf_internal_r+0x21c0>
    1fc0:	883d9126 	beq	r17,zero,1608 <___vfprintf_internal_r+0x3f0>
    1fc4:	00c00044 	movi	r3,1
    1fc8:	d8c02a15 	stw	r3,168(sp)
    1fcc:	dc401405 	stb	r17,80(sp)
    1fd0:	d8002785 	stb	zero,158(sp)
    1fd4:	003fec06 	br	1f88 <___vfprintf_internal_r+0xd70>
    1fd8:	014000b4 	movhi	r5,2
    1fdc:	2968a404 	addi	r5,r5,-23920
    1fe0:	d9403915 	stw	r5,228(sp)
    1fe4:	d8c02d15 	stw	r3,180(sp)
    1fe8:	1025883a 	mov	r18,r2
    1fec:	04401e04 	movi	r17,120
    1ff0:	9d84b03a 	or	r2,r19,r22
    1ff4:	1000fc1e 	bne	r2,zero,23e8 <___vfprintf_internal_r+0x11d0>
    1ff8:	0039883a 	mov	fp,zero
    1ffc:	00800084 	movi	r2,2
    2000:	10803fcc 	andi	r2,r2,255
    2004:	00c00044 	movi	r3,1
    2008:	10c20f26 	beq	r2,r3,2848 <___vfprintf_internal_r+0x1630>
    200c:	00c00084 	movi	r3,2
    2010:	10fd6326 	beq	r2,r3,15a0 <___vfprintf_internal_r+0x388>
    2014:	003e2d06 	br	18cc <___vfprintf_internal_r+0x6b4>
    2018:	d8c02017 	ldw	r3,128(sp)
    201c:	003e9306 	br	1a6c <___vfprintf_internal_r+0x854>
    2020:	00801944 	movi	r2,101
    2024:	14407e0e 	bge	r2,r17,2220 <___vfprintf_internal_r+0x1008>
    2028:	d9003617 	ldw	r4,216(sp)
    202c:	d9403817 	ldw	r5,224(sp)
    2030:	000d883a 	mov	r6,zero
    2034:	000f883a 	mov	r7,zero
    2038:	d8c03c15 	stw	r3,240(sp)
    203c:	da003d15 	stw	r8,244(sp)
    2040:	000c48c0 	call	c48c <__eqdf2>
    2044:	d8c03c17 	ldw	r3,240(sp)
    2048:	da003d17 	ldw	r8,244(sp)
    204c:	1000f71e 	bne	r2,zero,242c <___vfprintf_internal_r+0x1214>
    2050:	d8801f17 	ldw	r2,124(sp)
    2054:	010000b4 	movhi	r4,2
    2058:	2128ab04 	addi	r4,r4,-23892
    205c:	18c00044 	addi	r3,r3,1
    2060:	10800044 	addi	r2,r2,1
    2064:	41000015 	stw	r4,0(r8)
    2068:	01000044 	movi	r4,1
    206c:	41000115 	stw	r4,4(r8)
    2070:	d8c02015 	stw	r3,128(sp)
    2074:	d8801f15 	stw	r2,124(sp)
    2078:	010001c4 	movi	r4,7
    207c:	2082b816 	blt	r4,r2,2b60 <___vfprintf_internal_r+0x1948>
    2080:	42000204 	addi	r8,r8,8
    2084:	d8802617 	ldw	r2,152(sp)
    2088:	d9403317 	ldw	r5,204(sp)
    208c:	11400216 	blt	r2,r5,2098 <___vfprintf_internal_r+0xe80>
    2090:	9080004c 	andi	r2,r18,1
    2094:	103ed526 	beq	r2,zero,1bec <___vfprintf_internal_r+0x9d4>
    2098:	d8803717 	ldw	r2,220(sp)
    209c:	d9003417 	ldw	r4,208(sp)
    20a0:	d9403717 	ldw	r5,220(sp)
    20a4:	1887883a 	add	r3,r3,r2
    20a8:	d8801f17 	ldw	r2,124(sp)
    20ac:	41000015 	stw	r4,0(r8)
    20b0:	41400115 	stw	r5,4(r8)
    20b4:	10800044 	addi	r2,r2,1
    20b8:	d8c02015 	stw	r3,128(sp)
    20bc:	d8801f15 	stw	r2,124(sp)
    20c0:	010001c4 	movi	r4,7
    20c4:	20832916 	blt	r4,r2,2d6c <___vfprintf_internal_r+0x1b54>
    20c8:	42000204 	addi	r8,r8,8
    20cc:	d8803317 	ldw	r2,204(sp)
    20d0:	143fffc4 	addi	r16,r2,-1
    20d4:	043ec50e 	bge	zero,r16,1bec <___vfprintf_internal_r+0x9d4>
    20d8:	04400404 	movi	r17,16
    20dc:	d8801f17 	ldw	r2,124(sp)
    20e0:	8c00880e 	bge	r17,r16,2304 <___vfprintf_internal_r+0x10ec>
    20e4:	014000b4 	movhi	r5,2
    20e8:	2968ab84 	addi	r5,r5,-23890
    20ec:	d9402b15 	stw	r5,172(sp)
    20f0:	058001c4 	movi	r22,7
    20f4:	dcc02c17 	ldw	r19,176(sp)
    20f8:	00000306 	br	2108 <___vfprintf_internal_r+0xef0>
    20fc:	42000204 	addi	r8,r8,8
    2100:	843ffc04 	addi	r16,r16,-16
    2104:	8c00820e 	bge	r17,r16,2310 <___vfprintf_internal_r+0x10f8>
    2108:	18c00404 	addi	r3,r3,16
    210c:	10800044 	addi	r2,r2,1
    2110:	45000015 	stw	r20,0(r8)
    2114:	44400115 	stw	r17,4(r8)
    2118:	d8c02015 	stw	r3,128(sp)
    211c:	d8801f15 	stw	r2,124(sp)
    2120:	b0bff60e 	bge	r22,r2,20fc <___vfprintf_internal_r+0xee4>
    2124:	d9801e04 	addi	r6,sp,120
    2128:	b80b883a 	mov	r5,r23
    212c:	9809883a 	mov	r4,r19
    2130:	00088140 	call	8814 <__sprint_r>
    2134:	103d3a1e 	bne	r2,zero,1620 <___vfprintf_internal_r+0x408>
    2138:	d8c02017 	ldw	r3,128(sp)
    213c:	d8801f17 	ldw	r2,124(sp)
    2140:	da000404 	addi	r8,sp,16
    2144:	003fee06 	br	2100 <___vfprintf_internal_r+0xee8>
    2148:	d9403117 	ldw	r5,196(sp)
    214c:	d8802a17 	ldw	r2,168(sp)
    2150:	28adc83a 	sub	r22,r5,r2
    2154:	05be630e 	bge	zero,r22,1ae4 <___vfprintf_internal_r+0x8cc>
    2158:	07000404 	movi	fp,16
    215c:	d8801f17 	ldw	r2,124(sp)
    2160:	e5838f0e 	bge	fp,r22,2fa0 <___vfprintf_internal_r+0x1d88>
    2164:	014000b4 	movhi	r5,2
    2168:	2968ab84 	addi	r5,r5,-23890
    216c:	dc403015 	stw	r17,192(sp)
    2170:	d9402b15 	stw	r5,172(sp)
    2174:	b023883a 	mov	r17,r22
    2178:	04c001c4 	movi	r19,7
    217c:	a82d883a 	mov	r22,r21
    2180:	902b883a 	mov	r21,r18
    2184:	8025883a 	mov	r18,r16
    2188:	dc002c17 	ldw	r16,176(sp)
    218c:	00000306 	br	219c <___vfprintf_internal_r+0xf84>
    2190:	8c7ffc04 	addi	r17,r17,-16
    2194:	42000204 	addi	r8,r8,8
    2198:	e440110e 	bge	fp,r17,21e0 <___vfprintf_internal_r+0xfc8>
    219c:	18c00404 	addi	r3,r3,16
    21a0:	10800044 	addi	r2,r2,1
    21a4:	45000015 	stw	r20,0(r8)
    21a8:	47000115 	stw	fp,4(r8)
    21ac:	d8c02015 	stw	r3,128(sp)
    21b0:	d8801f15 	stw	r2,124(sp)
    21b4:	98bff60e 	bge	r19,r2,2190 <___vfprintf_internal_r+0xf78>
    21b8:	d9801e04 	addi	r6,sp,120
    21bc:	b80b883a 	mov	r5,r23
    21c0:	8009883a 	mov	r4,r16
    21c4:	00088140 	call	8814 <__sprint_r>
    21c8:	103d151e 	bne	r2,zero,1620 <___vfprintf_internal_r+0x408>
    21cc:	8c7ffc04 	addi	r17,r17,-16
    21d0:	d8c02017 	ldw	r3,128(sp)
    21d4:	d8801f17 	ldw	r2,124(sp)
    21d8:	da000404 	addi	r8,sp,16
    21dc:	e47fef16 	blt	fp,r17,219c <___vfprintf_internal_r+0xf84>
    21e0:	9021883a 	mov	r16,r18
    21e4:	a825883a 	mov	r18,r21
    21e8:	b02b883a 	mov	r21,r22
    21ec:	882d883a 	mov	r22,r17
    21f0:	dc403017 	ldw	r17,192(sp)
    21f4:	d9002b17 	ldw	r4,172(sp)
    21f8:	1d87883a 	add	r3,r3,r22
    21fc:	10800044 	addi	r2,r2,1
    2200:	41000015 	stw	r4,0(r8)
    2204:	45800115 	stw	r22,4(r8)
    2208:	d8c02015 	stw	r3,128(sp)
    220c:	d8801f15 	stw	r2,124(sp)
    2210:	010001c4 	movi	r4,7
    2214:	20818e16 	blt	r4,r2,2850 <___vfprintf_internal_r+0x1638>
    2218:	42000204 	addi	r8,r8,8
    221c:	003e3106 	br	1ae4 <___vfprintf_internal_r+0x8cc>
    2220:	d9403317 	ldw	r5,204(sp)
    2224:	00800044 	movi	r2,1
    2228:	18c00044 	addi	r3,r3,1
    222c:	1141530e 	bge	r2,r5,277c <___vfprintf_internal_r+0x1564>
    2230:	dc401f17 	ldw	r17,124(sp)
    2234:	00800044 	movi	r2,1
    2238:	40800115 	stw	r2,4(r8)
    223c:	8c400044 	addi	r17,r17,1
    2240:	44000015 	stw	r16,0(r8)
    2244:	d8c02015 	stw	r3,128(sp)
    2248:	dc401f15 	stw	r17,124(sp)
    224c:	008001c4 	movi	r2,7
    2250:	14416b16 	blt	r2,r17,2800 <___vfprintf_internal_r+0x15e8>
    2254:	42000204 	addi	r8,r8,8
    2258:	d8803717 	ldw	r2,220(sp)
    225c:	d9003417 	ldw	r4,208(sp)
    2260:	8c400044 	addi	r17,r17,1
    2264:	10c7883a 	add	r3,r2,r3
    2268:	40800115 	stw	r2,4(r8)
    226c:	41000015 	stw	r4,0(r8)
    2270:	d8c02015 	stw	r3,128(sp)
    2274:	dc401f15 	stw	r17,124(sp)
    2278:	008001c4 	movi	r2,7
    227c:	14416916 	blt	r2,r17,2824 <___vfprintf_internal_r+0x160c>
    2280:	45800204 	addi	r22,r8,8
    2284:	d9003617 	ldw	r4,216(sp)
    2288:	d9403817 	ldw	r5,224(sp)
    228c:	000d883a 	mov	r6,zero
    2290:	000f883a 	mov	r7,zero
    2294:	d8c03c15 	stw	r3,240(sp)
    2298:	000c48c0 	call	c48c <__eqdf2>
    229c:	d8c03c17 	ldw	r3,240(sp)
    22a0:	1000bc26 	beq	r2,zero,2594 <___vfprintf_internal_r+0x137c>
    22a4:	d9403317 	ldw	r5,204(sp)
    22a8:	84000044 	addi	r16,r16,1
    22ac:	8c400044 	addi	r17,r17,1
    22b0:	28bfffc4 	addi	r2,r5,-1
    22b4:	1887883a 	add	r3,r3,r2
    22b8:	b0800115 	stw	r2,4(r22)
    22bc:	b4000015 	stw	r16,0(r22)
    22c0:	d8c02015 	stw	r3,128(sp)
    22c4:	dc401f15 	stw	r17,124(sp)
    22c8:	008001c4 	movi	r2,7
    22cc:	14414316 	blt	r2,r17,27dc <___vfprintf_internal_r+0x15c4>
    22d0:	b5800204 	addi	r22,r22,8
    22d4:	d9003a17 	ldw	r4,232(sp)
    22d8:	df0022c4 	addi	fp,sp,139
    22dc:	8c400044 	addi	r17,r17,1
    22e0:	20c7883a 	add	r3,r4,r3
    22e4:	b7000015 	stw	fp,0(r22)
    22e8:	b1000115 	stw	r4,4(r22)
    22ec:	d8c02015 	stw	r3,128(sp)
    22f0:	dc401f15 	stw	r17,124(sp)
    22f4:	008001c4 	movi	r2,7
    22f8:	14400e16 	blt	r2,r17,2334 <___vfprintf_internal_r+0x111c>
    22fc:	b2000204 	addi	r8,r22,8
    2300:	003e3a06 	br	1bec <___vfprintf_internal_r+0x9d4>
    2304:	010000b4 	movhi	r4,2
    2308:	2128ab84 	addi	r4,r4,-23890
    230c:	d9002b15 	stw	r4,172(sp)
    2310:	d9002b17 	ldw	r4,172(sp)
    2314:	1c07883a 	add	r3,r3,r16
    2318:	44000115 	stw	r16,4(r8)
    231c:	41000015 	stw	r4,0(r8)
    2320:	10800044 	addi	r2,r2,1
    2324:	d8c02015 	stw	r3,128(sp)
    2328:	d8801f15 	stw	r2,124(sp)
    232c:	010001c4 	movi	r4,7
    2330:	20be2d0e 	bge	r4,r2,1be8 <___vfprintf_internal_r+0x9d0>
    2334:	d9002c17 	ldw	r4,176(sp)
    2338:	d9801e04 	addi	r6,sp,120
    233c:	b80b883a 	mov	r5,r23
    2340:	00088140 	call	8814 <__sprint_r>
    2344:	103cb61e 	bne	r2,zero,1620 <___vfprintf_internal_r+0x408>
    2348:	d8c02017 	ldw	r3,128(sp)
    234c:	da000404 	addi	r8,sp,16
    2350:	003e2606 	br	1bec <___vfprintf_internal_r+0x9d4>
    2354:	d9002c17 	ldw	r4,176(sp)
    2358:	d9801e04 	addi	r6,sp,120
    235c:	b80b883a 	mov	r5,r23
    2360:	00088140 	call	8814 <__sprint_r>
    2364:	103e5d26 	beq	r2,zero,1cdc <___vfprintf_internal_r+0xac4>
    2368:	003cad06 	br	1620 <___vfprintf_internal_r+0x408>
    236c:	d9002c17 	ldw	r4,176(sp)
    2370:	d9801e04 	addi	r6,sp,120
    2374:	b80b883a 	mov	r5,r23
    2378:	00088140 	call	8814 <__sprint_r>
    237c:	103ca81e 	bne	r2,zero,1620 <___vfprintf_internal_r+0x408>
    2380:	d8c02017 	ldw	r3,128(sp)
    2384:	da000404 	addi	r8,sp,16
    2388:	003e0b06 	br	1bb8 <___vfprintf_internal_r+0x9a0>
    238c:	d9002c17 	ldw	r4,176(sp)
    2390:	d9801e04 	addi	r6,sp,120
    2394:	b80b883a 	mov	r5,r23
    2398:	00088140 	call	8814 <__sprint_r>
    239c:	103ca01e 	bne	r2,zero,1620 <___vfprintf_internal_r+0x408>
    23a0:	d8c02017 	ldw	r3,128(sp)
    23a4:	da000404 	addi	r8,sp,16
    23a8:	003dbd06 	br	1aa0 <___vfprintf_internal_r+0x888>
    23ac:	d9002c17 	ldw	r4,176(sp)
    23b0:	d9801e04 	addi	r6,sp,120
    23b4:	b80b883a 	mov	r5,r23
    23b8:	00088140 	call	8814 <__sprint_r>
    23bc:	103c981e 	bne	r2,zero,1620 <___vfprintf_internal_r+0x408>
    23c0:	d8c02017 	ldw	r3,128(sp)
    23c4:	da000404 	addi	r8,sp,16
    23c8:	003dc306 	br	1ad8 <___vfprintf_internal_r+0x8c0>
    23cc:	d8802917 	ldw	r2,164(sp)
    23d0:	d8002785 	stb	zero,158(sp)
    23d4:	103f0616 	blt	r2,zero,1ff0 <___vfprintf_internal_r+0xdd8>
    23d8:	00ffdfc4 	movi	r3,-129
    23dc:	9d84b03a 	or	r2,r19,r22
    23e0:	90e4703a 	and	r18,r18,r3
    23e4:	103c6b26 	beq	r2,zero,1594 <___vfprintf_internal_r+0x37c>
    23e8:	0039883a 	mov	fp,zero
    23ec:	003e7406 	br	1dc0 <___vfprintf_internal_r+0xba8>
    23f0:	9080040c 	andi	r2,r18,16
    23f4:	1001b326 	beq	r2,zero,2ac4 <___vfprintf_internal_r+0x18ac>
    23f8:	d9002d17 	ldw	r4,180(sp)
    23fc:	d9402917 	ldw	r5,164(sp)
    2400:	d8002785 	stb	zero,158(sp)
    2404:	20800104 	addi	r2,r4,4
    2408:	24c00017 	ldw	r19,0(r4)
    240c:	002d883a 	mov	r22,zero
    2410:	2801b516 	blt	r5,zero,2ae8 <___vfprintf_internal_r+0x18d0>
    2414:	00ffdfc4 	movi	r3,-129
    2418:	d8802d15 	stw	r2,180(sp)
    241c:	90e4703a 	and	r18,r18,r3
    2420:	983d2726 	beq	r19,zero,18c0 <___vfprintf_internal_r+0x6a8>
    2424:	0039883a 	mov	fp,zero
    2428:	003d2a06 	br	18d4 <___vfprintf_internal_r+0x6bc>
    242c:	dc402617 	ldw	r17,152(sp)
    2430:	0441d30e 	bge	zero,r17,2b80 <___vfprintf_internal_r+0x1968>
    2434:	dc403217 	ldw	r17,200(sp)
    2438:	d8803317 	ldw	r2,204(sp)
    243c:	1440010e 	bge	r2,r17,2444 <___vfprintf_internal_r+0x122c>
    2440:	1023883a 	mov	r17,r2
    2444:	04400a0e 	bge	zero,r17,2470 <___vfprintf_internal_r+0x1258>
    2448:	d8801f17 	ldw	r2,124(sp)
    244c:	1c47883a 	add	r3,r3,r17
    2450:	44000015 	stw	r16,0(r8)
    2454:	10800044 	addi	r2,r2,1
    2458:	44400115 	stw	r17,4(r8)
    245c:	d8c02015 	stw	r3,128(sp)
    2460:	d8801f15 	stw	r2,124(sp)
    2464:	010001c4 	movi	r4,7
    2468:	20826516 	blt	r4,r2,2e00 <___vfprintf_internal_r+0x1be8>
    246c:	42000204 	addi	r8,r8,8
    2470:	88026116 	blt	r17,zero,2df8 <___vfprintf_internal_r+0x1be0>
    2474:	d9003217 	ldw	r4,200(sp)
    2478:	2463c83a 	sub	r17,r4,r17
    247c:	04407b0e 	bge	zero,r17,266c <___vfprintf_internal_r+0x1454>
    2480:	05800404 	movi	r22,16
    2484:	d8801f17 	ldw	r2,124(sp)
    2488:	b4419d0e 	bge	r22,r17,2b00 <___vfprintf_internal_r+0x18e8>
    248c:	010000b4 	movhi	r4,2
    2490:	2128ab84 	addi	r4,r4,-23890
    2494:	d9002b15 	stw	r4,172(sp)
    2498:	070001c4 	movi	fp,7
    249c:	dcc02c17 	ldw	r19,176(sp)
    24a0:	00000306 	br	24b0 <___vfprintf_internal_r+0x1298>
    24a4:	42000204 	addi	r8,r8,8
    24a8:	8c7ffc04 	addi	r17,r17,-16
    24ac:	b441970e 	bge	r22,r17,2b0c <___vfprintf_internal_r+0x18f4>
    24b0:	18c00404 	addi	r3,r3,16
    24b4:	10800044 	addi	r2,r2,1
    24b8:	45000015 	stw	r20,0(r8)
    24bc:	45800115 	stw	r22,4(r8)
    24c0:	d8c02015 	stw	r3,128(sp)
    24c4:	d8801f15 	stw	r2,124(sp)
    24c8:	e0bff60e 	bge	fp,r2,24a4 <___vfprintf_internal_r+0x128c>
    24cc:	d9801e04 	addi	r6,sp,120
    24d0:	b80b883a 	mov	r5,r23
    24d4:	9809883a 	mov	r4,r19
    24d8:	00088140 	call	8814 <__sprint_r>
    24dc:	103c501e 	bne	r2,zero,1620 <___vfprintf_internal_r+0x408>
    24e0:	d8c02017 	ldw	r3,128(sp)
    24e4:	d8801f17 	ldw	r2,124(sp)
    24e8:	da000404 	addi	r8,sp,16
    24ec:	003fee06 	br	24a8 <___vfprintf_internal_r+0x1290>
    24f0:	d9002c17 	ldw	r4,176(sp)
    24f4:	d9801e04 	addi	r6,sp,120
    24f8:	b80b883a 	mov	r5,r23
    24fc:	00088140 	call	8814 <__sprint_r>
    2500:	103c471e 	bne	r2,zero,1620 <___vfprintf_internal_r+0x408>
    2504:	d8c02017 	ldw	r3,128(sp)
    2508:	df002787 	ldb	fp,158(sp)
    250c:	da000404 	addi	r8,sp,16
    2510:	003d5606 	br	1a6c <___vfprintf_internal_r+0x854>
    2514:	9080040c 	andi	r2,r18,16
    2518:	10016126 	beq	r2,zero,2aa0 <___vfprintf_internal_r+0x1888>
    251c:	d8802d17 	ldw	r2,180(sp)
    2520:	14c00017 	ldw	r19,0(r2)
    2524:	10800104 	addi	r2,r2,4
    2528:	d8802d15 	stw	r2,180(sp)
    252c:	982dd7fa 	srai	r22,r19,31
    2530:	b005883a 	mov	r2,r22
    2534:	003c8206 	br	1740 <___vfprintf_internal_r+0x528>
    2538:	9080040c 	andi	r2,r18,16
    253c:	10003526 	beq	r2,zero,2614 <___vfprintf_internal_r+0x13fc>
    2540:	d9402d17 	ldw	r5,180(sp)
    2544:	d8c02917 	ldw	r3,164(sp)
    2548:	d8002785 	stb	zero,158(sp)
    254c:	28800104 	addi	r2,r5,4
    2550:	2cc00017 	ldw	r19,0(r5)
    2554:	002d883a 	mov	r22,zero
    2558:	18003716 	blt	r3,zero,2638 <___vfprintf_internal_r+0x1420>
    255c:	00ffdfc4 	movi	r3,-129
    2560:	d8802d15 	stw	r2,180(sp)
    2564:	90e4703a 	and	r18,r18,r3
    2568:	0039883a 	mov	fp,zero
    256c:	983df326 	beq	r19,zero,1d3c <___vfprintf_internal_r+0xb24>
    2570:	00800244 	movi	r2,9
    2574:	14fc7b36 	bltu	r2,r19,1764 <___vfprintf_internal_r+0x54c>
    2578:	d8c02817 	ldw	r3,160(sp)
    257c:	dc001dc4 	addi	r16,sp,119
    2580:	9cc00c04 	addi	r19,r19,48
    2584:	1c07c83a 	sub	r3,r3,r16
    2588:	dcc01dc5 	stb	r19,119(sp)
    258c:	d8c02e15 	stw	r3,184(sp)
    2590:	003ce806 	br	1934 <___vfprintf_internal_r+0x71c>
    2594:	d8803317 	ldw	r2,204(sp)
    2598:	143fffc4 	addi	r16,r2,-1
    259c:	043f4d0e 	bge	zero,r16,22d4 <___vfprintf_internal_r+0x10bc>
    25a0:	07000404 	movi	fp,16
    25a4:	e400810e 	bge	fp,r16,27ac <___vfprintf_internal_r+0x1594>
    25a8:	014000b4 	movhi	r5,2
    25ac:	2968ab84 	addi	r5,r5,-23890
    25b0:	d9402b15 	stw	r5,172(sp)
    25b4:	01c001c4 	movi	r7,7
    25b8:	dcc02c17 	ldw	r19,176(sp)
    25bc:	00000306 	br	25cc <___vfprintf_internal_r+0x13b4>
    25c0:	b5800204 	addi	r22,r22,8
    25c4:	843ffc04 	addi	r16,r16,-16
    25c8:	e4007b0e 	bge	fp,r16,27b8 <___vfprintf_internal_r+0x15a0>
    25cc:	18c00404 	addi	r3,r3,16
    25d0:	8c400044 	addi	r17,r17,1
    25d4:	b5000015 	stw	r20,0(r22)
    25d8:	b7000115 	stw	fp,4(r22)
    25dc:	d8c02015 	stw	r3,128(sp)
    25e0:	dc401f15 	stw	r17,124(sp)
    25e4:	3c7ff60e 	bge	r7,r17,25c0 <___vfprintf_internal_r+0x13a8>
    25e8:	d9801e04 	addi	r6,sp,120
    25ec:	b80b883a 	mov	r5,r23
    25f0:	9809883a 	mov	r4,r19
    25f4:	d9c03c15 	stw	r7,240(sp)
    25f8:	00088140 	call	8814 <__sprint_r>
    25fc:	d9c03c17 	ldw	r7,240(sp)
    2600:	103c071e 	bne	r2,zero,1620 <___vfprintf_internal_r+0x408>
    2604:	d8c02017 	ldw	r3,128(sp)
    2608:	dc401f17 	ldw	r17,124(sp)
    260c:	dd800404 	addi	r22,sp,16
    2610:	003fec06 	br	25c4 <___vfprintf_internal_r+0x13ac>
    2614:	9080100c 	andi	r2,r18,64
    2618:	d8002785 	stb	zero,158(sp)
    261c:	10010e26 	beq	r2,zero,2a58 <___vfprintf_internal_r+0x1840>
    2620:	d9002d17 	ldw	r4,180(sp)
    2624:	d9402917 	ldw	r5,164(sp)
    2628:	002d883a 	mov	r22,zero
    262c:	20800104 	addi	r2,r4,4
    2630:	24c0000b 	ldhu	r19,0(r4)
    2634:	283fc90e 	bge	r5,zero,255c <___vfprintf_internal_r+0x1344>
    2638:	d8802d15 	stw	r2,180(sp)
    263c:	0039883a 	mov	fp,zero
    2640:	9d84b03a 	or	r2,r19,r22
    2644:	103c461e 	bne	r2,zero,1760 <___vfprintf_internal_r+0x548>
    2648:	00800044 	movi	r2,1
    264c:	003e6c06 	br	2000 <___vfprintf_internal_r+0xde8>
    2650:	d9002c17 	ldw	r4,176(sp)
    2654:	d9801e04 	addi	r6,sp,120
    2658:	b80b883a 	mov	r5,r23
    265c:	00088140 	call	8814 <__sprint_r>
    2660:	103bef1e 	bne	r2,zero,1620 <___vfprintf_internal_r+0x408>
    2664:	d8c02017 	ldw	r3,128(sp)
    2668:	da000404 	addi	r8,sp,16
    266c:	d9003217 	ldw	r4,200(sp)
    2670:	d8802617 	ldw	r2,152(sp)
    2674:	d9403317 	ldw	r5,204(sp)
    2678:	8123883a 	add	r17,r16,r4
    267c:	11400216 	blt	r2,r5,2688 <___vfprintf_internal_r+0x1470>
    2680:	9100004c 	andi	r4,r18,1
    2684:	20000d26 	beq	r4,zero,26bc <___vfprintf_internal_r+0x14a4>
    2688:	d9003717 	ldw	r4,220(sp)
    268c:	d9403417 	ldw	r5,208(sp)
    2690:	1907883a 	add	r3,r3,r4
    2694:	d9001f17 	ldw	r4,124(sp)
    2698:	41400015 	stw	r5,0(r8)
    269c:	d9403717 	ldw	r5,220(sp)
    26a0:	21000044 	addi	r4,r4,1
    26a4:	d8c02015 	stw	r3,128(sp)
    26a8:	41400115 	stw	r5,4(r8)
    26ac:	d9001f15 	stw	r4,124(sp)
    26b0:	014001c4 	movi	r5,7
    26b4:	2901e816 	blt	r5,r4,2e58 <___vfprintf_internal_r+0x1c40>
    26b8:	42000204 	addi	r8,r8,8
    26bc:	d9003317 	ldw	r4,204(sp)
    26c0:	8121883a 	add	r16,r16,r4
    26c4:	2085c83a 	sub	r2,r4,r2
    26c8:	8461c83a 	sub	r16,r16,r17
    26cc:	1400010e 	bge	r2,r16,26d4 <___vfprintf_internal_r+0x14bc>
    26d0:	1021883a 	mov	r16,r2
    26d4:	04000a0e 	bge	zero,r16,2700 <___vfprintf_internal_r+0x14e8>
    26d8:	d9001f17 	ldw	r4,124(sp)
    26dc:	1c07883a 	add	r3,r3,r16
    26e0:	44400015 	stw	r17,0(r8)
    26e4:	21000044 	addi	r4,r4,1
    26e8:	44000115 	stw	r16,4(r8)
    26ec:	d8c02015 	stw	r3,128(sp)
    26f0:	d9001f15 	stw	r4,124(sp)
    26f4:	014001c4 	movi	r5,7
    26f8:	2901fb16 	blt	r5,r4,2ee8 <___vfprintf_internal_r+0x1cd0>
    26fc:	42000204 	addi	r8,r8,8
    2700:	8001f716 	blt	r16,zero,2ee0 <___vfprintf_internal_r+0x1cc8>
    2704:	1421c83a 	sub	r16,r2,r16
    2708:	043d380e 	bge	zero,r16,1bec <___vfprintf_internal_r+0x9d4>
    270c:	04400404 	movi	r17,16
    2710:	d8801f17 	ldw	r2,124(sp)
    2714:	8c3efb0e 	bge	r17,r16,2304 <___vfprintf_internal_r+0x10ec>
    2718:	014000b4 	movhi	r5,2
    271c:	2968ab84 	addi	r5,r5,-23890
    2720:	d9402b15 	stw	r5,172(sp)
    2724:	058001c4 	movi	r22,7
    2728:	dcc02c17 	ldw	r19,176(sp)
    272c:	00000306 	br	273c <___vfprintf_internal_r+0x1524>
    2730:	42000204 	addi	r8,r8,8
    2734:	843ffc04 	addi	r16,r16,-16
    2738:	8c3ef50e 	bge	r17,r16,2310 <___vfprintf_internal_r+0x10f8>
    273c:	18c00404 	addi	r3,r3,16
    2740:	10800044 	addi	r2,r2,1
    2744:	45000015 	stw	r20,0(r8)
    2748:	44400115 	stw	r17,4(r8)
    274c:	d8c02015 	stw	r3,128(sp)
    2750:	d8801f15 	stw	r2,124(sp)
    2754:	b0bff60e 	bge	r22,r2,2730 <___vfprintf_internal_r+0x1518>
    2758:	d9801e04 	addi	r6,sp,120
    275c:	b80b883a 	mov	r5,r23
    2760:	9809883a 	mov	r4,r19
    2764:	00088140 	call	8814 <__sprint_r>
    2768:	103bad1e 	bne	r2,zero,1620 <___vfprintf_internal_r+0x408>
    276c:	d8c02017 	ldw	r3,128(sp)
    2770:	d8801f17 	ldw	r2,124(sp)
    2774:	da000404 	addi	r8,sp,16
    2778:	003fee06 	br	2734 <___vfprintf_internal_r+0x151c>
    277c:	9088703a 	and	r4,r18,r2
    2780:	203eab1e 	bne	r4,zero,2230 <___vfprintf_internal_r+0x1018>
    2784:	dc401f17 	ldw	r17,124(sp)
    2788:	40800115 	stw	r2,4(r8)
    278c:	44000015 	stw	r16,0(r8)
    2790:	8c400044 	addi	r17,r17,1
    2794:	d8c02015 	stw	r3,128(sp)
    2798:	dc401f15 	stw	r17,124(sp)
    279c:	008001c4 	movi	r2,7
    27a0:	14400e16 	blt	r2,r17,27dc <___vfprintf_internal_r+0x15c4>
    27a4:	45800204 	addi	r22,r8,8
    27a8:	003eca06 	br	22d4 <___vfprintf_internal_r+0x10bc>
    27ac:	010000b4 	movhi	r4,2
    27b0:	2128ab84 	addi	r4,r4,-23890
    27b4:	d9002b15 	stw	r4,172(sp)
    27b8:	d8802b17 	ldw	r2,172(sp)
    27bc:	1c07883a 	add	r3,r3,r16
    27c0:	8c400044 	addi	r17,r17,1
    27c4:	b0800015 	stw	r2,0(r22)
    27c8:	b4000115 	stw	r16,4(r22)
    27cc:	d8c02015 	stw	r3,128(sp)
    27d0:	dc401f15 	stw	r17,124(sp)
    27d4:	008001c4 	movi	r2,7
    27d8:	147ebd0e 	bge	r2,r17,22d0 <___vfprintf_internal_r+0x10b8>
    27dc:	d9002c17 	ldw	r4,176(sp)
    27e0:	d9801e04 	addi	r6,sp,120
    27e4:	b80b883a 	mov	r5,r23
    27e8:	00088140 	call	8814 <__sprint_r>
    27ec:	103b8c1e 	bne	r2,zero,1620 <___vfprintf_internal_r+0x408>
    27f0:	d8c02017 	ldw	r3,128(sp)
    27f4:	dc401f17 	ldw	r17,124(sp)
    27f8:	dd800404 	addi	r22,sp,16
    27fc:	003eb506 	br	22d4 <___vfprintf_internal_r+0x10bc>
    2800:	d9002c17 	ldw	r4,176(sp)
    2804:	d9801e04 	addi	r6,sp,120
    2808:	b80b883a 	mov	r5,r23
    280c:	00088140 	call	8814 <__sprint_r>
    2810:	103b831e 	bne	r2,zero,1620 <___vfprintf_internal_r+0x408>
    2814:	d8c02017 	ldw	r3,128(sp)
    2818:	dc401f17 	ldw	r17,124(sp)
    281c:	da000404 	addi	r8,sp,16
    2820:	003e8d06 	br	2258 <___vfprintf_internal_r+0x1040>
    2824:	d9002c17 	ldw	r4,176(sp)
    2828:	d9801e04 	addi	r6,sp,120
    282c:	b80b883a 	mov	r5,r23
    2830:	00088140 	call	8814 <__sprint_r>
    2834:	103b7a1e 	bne	r2,zero,1620 <___vfprintf_internal_r+0x408>
    2838:	d8c02017 	ldw	r3,128(sp)
    283c:	dc401f17 	ldw	r17,124(sp)
    2840:	dd800404 	addi	r22,sp,16
    2844:	003e8f06 	br	2284 <___vfprintf_internal_r+0x106c>
    2848:	0027883a 	mov	r19,zero
    284c:	003f4a06 	br	2578 <___vfprintf_internal_r+0x1360>
    2850:	d9002c17 	ldw	r4,176(sp)
    2854:	d9801e04 	addi	r6,sp,120
    2858:	b80b883a 	mov	r5,r23
    285c:	00088140 	call	8814 <__sprint_r>
    2860:	103b6f1e 	bne	r2,zero,1620 <___vfprintf_internal_r+0x408>
    2864:	d8c02017 	ldw	r3,128(sp)
    2868:	da000404 	addi	r8,sp,16
    286c:	003c9d06 	br	1ae4 <___vfprintf_internal_r+0x8cc>
    2870:	04e7c83a 	sub	r19,zero,r19
    2874:	9804c03a 	cmpne	r2,r19,zero
    2878:	05adc83a 	sub	r22,zero,r22
    287c:	b0adc83a 	sub	r22,r22,r2
    2880:	d8802917 	ldw	r2,164(sp)
    2884:	07000b44 	movi	fp,45
    2888:	df002785 	stb	fp,158(sp)
    288c:	10017b16 	blt	r2,zero,2e7c <___vfprintf_internal_r+0x1c64>
    2890:	00bfdfc4 	movi	r2,-129
    2894:	90a4703a 	and	r18,r18,r2
    2898:	003bb106 	br	1760 <___vfprintf_internal_r+0x548>
    289c:	d9003617 	ldw	r4,216(sp)
    28a0:	d9403817 	ldw	r5,224(sp)
    28a4:	da003d15 	stw	r8,244(sp)
    28a8:	00084380 	call	8438 <__fpclassifyd>
    28ac:	da003d17 	ldw	r8,244(sp)
    28b0:	1000f026 	beq	r2,zero,2c74 <___vfprintf_internal_r+0x1a5c>
    28b4:	d9002917 	ldw	r4,164(sp)
    28b8:	05bff7c4 	movi	r22,-33
    28bc:	00bfffc4 	movi	r2,-1
    28c0:	8dac703a 	and	r22,r17,r22
    28c4:	20820026 	beq	r4,r2,30c8 <___vfprintf_internal_r+0x1eb0>
    28c8:	008011c4 	movi	r2,71
    28cc:	b081f726 	beq	r22,r2,30ac <___vfprintf_internal_r+0x1e94>
    28d0:	d9003817 	ldw	r4,224(sp)
    28d4:	90c04014 	ori	r3,r18,256
    28d8:	d8c02b15 	stw	r3,172(sp)
    28dc:	20021516 	blt	r4,zero,3134 <___vfprintf_internal_r+0x1f1c>
    28e0:	dcc03817 	ldw	r19,224(sp)
    28e4:	d8002a05 	stb	zero,168(sp)
    28e8:	00801984 	movi	r2,102
    28ec:	8881f926 	beq	r17,r2,30d4 <___vfprintf_internal_r+0x1ebc>
    28f0:	00801184 	movi	r2,70
    28f4:	88821c26 	beq	r17,r2,3168 <___vfprintf_internal_r+0x1f50>
    28f8:	00801144 	movi	r2,69
    28fc:	b081ef26 	beq	r22,r2,30bc <___vfprintf_internal_r+0x1ea4>
    2900:	d8c02917 	ldw	r3,164(sp)
    2904:	d8802104 	addi	r2,sp,132
    2908:	d8800315 	stw	r2,12(sp)
    290c:	d9403617 	ldw	r5,216(sp)
    2910:	d8802504 	addi	r2,sp,148
    2914:	d9002c17 	ldw	r4,176(sp)
    2918:	d8800215 	stw	r2,8(sp)
    291c:	d8802604 	addi	r2,sp,152
    2920:	d8c00015 	stw	r3,0(sp)
    2924:	d8800115 	stw	r2,4(sp)
    2928:	01c00084 	movi	r7,2
    292c:	980d883a 	mov	r6,r19
    2930:	d8c03c15 	stw	r3,240(sp)
    2934:	da003d15 	stw	r8,244(sp)
    2938:	000383c0 	call	383c <_dtoa_r>
    293c:	1021883a 	mov	r16,r2
    2940:	008019c4 	movi	r2,103
    2944:	d8c03c17 	ldw	r3,240(sp)
    2948:	da003d17 	ldw	r8,244(sp)
    294c:	88817126 	beq	r17,r2,2f14 <___vfprintf_internal_r+0x1cfc>
    2950:	008011c4 	movi	r2,71
    2954:	88829226 	beq	r17,r2,33a0 <___vfprintf_internal_r+0x2188>
    2958:	80f9883a 	add	fp,r16,r3
    295c:	d9003617 	ldw	r4,216(sp)
    2960:	000d883a 	mov	r6,zero
    2964:	000f883a 	mov	r7,zero
    2968:	980b883a 	mov	r5,r19
    296c:	da003d15 	stw	r8,244(sp)
    2970:	000c48c0 	call	c48c <__eqdf2>
    2974:	da003d17 	ldw	r8,244(sp)
    2978:	10018d26 	beq	r2,zero,2fb0 <___vfprintf_internal_r+0x1d98>
    297c:	d8802117 	ldw	r2,132(sp)
    2980:	1700062e 	bgeu	r2,fp,299c <___vfprintf_internal_r+0x1784>
    2984:	01000c04 	movi	r4,48
    2988:	10c00044 	addi	r3,r2,1
    298c:	d8c02115 	stw	r3,132(sp)
    2990:	11000005 	stb	r4,0(r2)
    2994:	d8802117 	ldw	r2,132(sp)
    2998:	173ffb36 	bltu	r2,fp,2988 <___vfprintf_internal_r+0x1770>
    299c:	1405c83a 	sub	r2,r2,r16
    29a0:	d8803315 	stw	r2,204(sp)
    29a4:	008011c4 	movi	r2,71
    29a8:	b0817626 	beq	r22,r2,2f84 <___vfprintf_internal_r+0x1d6c>
    29ac:	00801944 	movi	r2,101
    29b0:	1442810e 	bge	r2,r17,33b8 <___vfprintf_internal_r+0x21a0>
    29b4:	d8c02617 	ldw	r3,152(sp)
    29b8:	00801984 	movi	r2,102
    29bc:	d8c03215 	stw	r3,200(sp)
    29c0:	8881fe26 	beq	r17,r2,31bc <___vfprintf_internal_r+0x1fa4>
    29c4:	d8c03217 	ldw	r3,200(sp)
    29c8:	d9003317 	ldw	r4,204(sp)
    29cc:	1901dd16 	blt	r3,r4,3144 <___vfprintf_internal_r+0x1f2c>
    29d0:	9480004c 	andi	r18,r18,1
    29d4:	90022b1e 	bne	r18,zero,3284 <___vfprintf_internal_r+0x206c>
    29d8:	1805883a 	mov	r2,r3
    29dc:	18028016 	blt	r3,zero,33e0 <___vfprintf_internal_r+0x21c8>
    29e0:	d8c03217 	ldw	r3,200(sp)
    29e4:	044019c4 	movi	r17,103
    29e8:	d8c02e15 	stw	r3,184(sp)
    29ec:	df002a07 	ldb	fp,168(sp)
    29f0:	e001531e 	bne	fp,zero,2f40 <___vfprintf_internal_r+0x1d28>
    29f4:	df002783 	ldbu	fp,158(sp)
    29f8:	d8802a15 	stw	r2,168(sp)
    29fc:	dc802b17 	ldw	r18,172(sp)
    2a00:	d8002915 	stw	zero,164(sp)
    2a04:	003bd106 	br	194c <___vfprintf_internal_r+0x734>
    2a08:	d8802d17 	ldw	r2,180(sp)
    2a0c:	d8c02d17 	ldw	r3,180(sp)
    2a10:	d9002d17 	ldw	r4,180(sp)
    2a14:	10800017 	ldw	r2,0(r2)
    2a18:	18c00117 	ldw	r3,4(r3)
    2a1c:	21000204 	addi	r4,r4,8
    2a20:	d8803615 	stw	r2,216(sp)
    2a24:	d8c03815 	stw	r3,224(sp)
    2a28:	d9002d15 	stw	r4,180(sp)
    2a2c:	003b7506 	br	1804 <___vfprintf_internal_r+0x5ec>
    2a30:	ac400007 	ldb	r17,0(r21)
    2a34:	003a5906 	br	139c <___vfprintf_internal_r+0x184>
    2a38:	9080100c 	andi	r2,r18,64
    2a3c:	1000a826 	beq	r2,zero,2ce0 <___vfprintf_internal_r+0x1ac8>
    2a40:	d9002d17 	ldw	r4,180(sp)
    2a44:	002d883a 	mov	r22,zero
    2a48:	24c0000b 	ldhu	r19,0(r4)
    2a4c:	21000104 	addi	r4,r4,4
    2a50:	d9002d15 	stw	r4,180(sp)
    2a54:	003ccb06 	br	1d84 <___vfprintf_internal_r+0xb6c>
    2a58:	d8c02d17 	ldw	r3,180(sp)
    2a5c:	d9002917 	ldw	r4,164(sp)
    2a60:	002d883a 	mov	r22,zero
    2a64:	18800104 	addi	r2,r3,4
    2a68:	1cc00017 	ldw	r19,0(r3)
    2a6c:	203ebb0e 	bge	r4,zero,255c <___vfprintf_internal_r+0x1344>
    2a70:	003ef106 	br	2638 <___vfprintf_internal_r+0x1420>
    2a74:	9080040c 	andi	r2,r18,16
    2a78:	1000921e 	bne	r2,zero,2cc4 <___vfprintf_internal_r+0x1aac>
    2a7c:	9480100c 	andi	r18,r18,64
    2a80:	90013926 	beq	r18,zero,2f68 <___vfprintf_internal_r+0x1d50>
    2a84:	d9002d17 	ldw	r4,180(sp)
    2a88:	d9402f17 	ldw	r5,188(sp)
    2a8c:	20800017 	ldw	r2,0(r4)
    2a90:	21000104 	addi	r4,r4,4
    2a94:	d9002d15 	stw	r4,180(sp)
    2a98:	1140000d 	sth	r5,0(r2)
    2a9c:	003a1606 	br	12f8 <___vfprintf_internal_r+0xe0>
    2aa0:	9080100c 	andi	r2,r18,64
    2aa4:	10008026 	beq	r2,zero,2ca8 <___vfprintf_internal_r+0x1a90>
    2aa8:	d8c02d17 	ldw	r3,180(sp)
    2aac:	1cc0000f 	ldh	r19,0(r3)
    2ab0:	18c00104 	addi	r3,r3,4
    2ab4:	d8c02d15 	stw	r3,180(sp)
    2ab8:	982dd7fa 	srai	r22,r19,31
    2abc:	b005883a 	mov	r2,r22
    2ac0:	003b1f06 	br	1740 <___vfprintf_internal_r+0x528>
    2ac4:	9080100c 	andi	r2,r18,64
    2ac8:	d8002785 	stb	zero,158(sp)
    2acc:	10008a1e 	bne	r2,zero,2cf8 <___vfprintf_internal_r+0x1ae0>
    2ad0:	d9402d17 	ldw	r5,180(sp)
    2ad4:	d8c02917 	ldw	r3,164(sp)
    2ad8:	002d883a 	mov	r22,zero
    2adc:	28800104 	addi	r2,r5,4
    2ae0:	2cc00017 	ldw	r19,0(r5)
    2ae4:	183e4b0e 	bge	r3,zero,2414 <___vfprintf_internal_r+0x11fc>
    2ae8:	9d86b03a 	or	r3,r19,r22
    2aec:	d8802d15 	stw	r2,180(sp)
    2af0:	183e4c1e 	bne	r3,zero,2424 <___vfprintf_internal_r+0x120c>
    2af4:	0039883a 	mov	fp,zero
    2af8:	0005883a 	mov	r2,zero
    2afc:	003d4006 	br	2000 <___vfprintf_internal_r+0xde8>
    2b00:	014000b4 	movhi	r5,2
    2b04:	2968ab84 	addi	r5,r5,-23890
    2b08:	d9402b15 	stw	r5,172(sp)
    2b0c:	d9402b17 	ldw	r5,172(sp)
    2b10:	1c47883a 	add	r3,r3,r17
    2b14:	10800044 	addi	r2,r2,1
    2b18:	41400015 	stw	r5,0(r8)
    2b1c:	44400115 	stw	r17,4(r8)
    2b20:	d8c02015 	stw	r3,128(sp)
    2b24:	d8801f15 	stw	r2,124(sp)
    2b28:	010001c4 	movi	r4,7
    2b2c:	20bec816 	blt	r4,r2,2650 <___vfprintf_internal_r+0x1438>
    2b30:	42000204 	addi	r8,r8,8
    2b34:	003ecd06 	br	266c <___vfprintf_internal_r+0x1454>
    2b38:	d9002917 	ldw	r4,164(sp)
    2b3c:	d8002785 	stb	zero,158(sp)
    2b40:	203d2d16 	blt	r4,zero,1ff8 <___vfprintf_internal_r+0xde0>
    2b44:	00bfdfc4 	movi	r2,-129
    2b48:	90a4703a 	and	r18,r18,r2
    2b4c:	003a9106 	br	1594 <___vfprintf_internal_r+0x37c>
    2b50:	010000b4 	movhi	r4,2
    2b54:	2128ab84 	addi	r4,r4,-23890
    2b58:	d9002b15 	stw	r4,172(sp)
    2b5c:	003c0c06 	br	1b90 <___vfprintf_internal_r+0x978>
    2b60:	d9002c17 	ldw	r4,176(sp)
    2b64:	d9801e04 	addi	r6,sp,120
    2b68:	b80b883a 	mov	r5,r23
    2b6c:	00088140 	call	8814 <__sprint_r>
    2b70:	103aab1e 	bne	r2,zero,1620 <___vfprintf_internal_r+0x408>
    2b74:	d8c02017 	ldw	r3,128(sp)
    2b78:	da000404 	addi	r8,sp,16
    2b7c:	003d4106 	br	2084 <___vfprintf_internal_r+0xe6c>
    2b80:	d8801f17 	ldw	r2,124(sp)
    2b84:	014000b4 	movhi	r5,2
    2b88:	01000044 	movi	r4,1
    2b8c:	18c00044 	addi	r3,r3,1
    2b90:	10800044 	addi	r2,r2,1
    2b94:	2968ab04 	addi	r5,r5,-23892
    2b98:	41000115 	stw	r4,4(r8)
    2b9c:	41400015 	stw	r5,0(r8)
    2ba0:	d8c02015 	stw	r3,128(sp)
    2ba4:	d8801f15 	stw	r2,124(sp)
    2ba8:	010001c4 	movi	r4,7
    2bac:	20805c16 	blt	r4,r2,2d20 <___vfprintf_internal_r+0x1b08>
    2bb0:	42000204 	addi	r8,r8,8
    2bb4:	8800041e 	bne	r17,zero,2bc8 <___vfprintf_internal_r+0x19b0>
    2bb8:	d8803317 	ldw	r2,204(sp)
    2bbc:	1000021e 	bne	r2,zero,2bc8 <___vfprintf_internal_r+0x19b0>
    2bc0:	9080004c 	andi	r2,r18,1
    2bc4:	103c0926 	beq	r2,zero,1bec <___vfprintf_internal_r+0x9d4>
    2bc8:	d9003717 	ldw	r4,220(sp)
    2bcc:	d8801f17 	ldw	r2,124(sp)
    2bd0:	d9403417 	ldw	r5,208(sp)
    2bd4:	20c7883a 	add	r3,r4,r3
    2bd8:	10800044 	addi	r2,r2,1
    2bdc:	41000115 	stw	r4,4(r8)
    2be0:	41400015 	stw	r5,0(r8)
    2be4:	d8c02015 	stw	r3,128(sp)
    2be8:	d8801f15 	stw	r2,124(sp)
    2bec:	010001c4 	movi	r4,7
    2bf0:	20812116 	blt	r4,r2,3078 <___vfprintf_internal_r+0x1e60>
    2bf4:	42000204 	addi	r8,r8,8
    2bf8:	0463c83a 	sub	r17,zero,r17
    2bfc:	0440730e 	bge	zero,r17,2dcc <___vfprintf_internal_r+0x1bb4>
    2c00:	05800404 	movi	r22,16
    2c04:	b440860e 	bge	r22,r17,2e20 <___vfprintf_internal_r+0x1c08>
    2c08:	014000b4 	movhi	r5,2
    2c0c:	2968ab84 	addi	r5,r5,-23890
    2c10:	d9402b15 	stw	r5,172(sp)
    2c14:	070001c4 	movi	fp,7
    2c18:	dcc02c17 	ldw	r19,176(sp)
    2c1c:	00000306 	br	2c2c <___vfprintf_internal_r+0x1a14>
    2c20:	42000204 	addi	r8,r8,8
    2c24:	8c7ffc04 	addi	r17,r17,-16
    2c28:	b440800e 	bge	r22,r17,2e2c <___vfprintf_internal_r+0x1c14>
    2c2c:	18c00404 	addi	r3,r3,16
    2c30:	10800044 	addi	r2,r2,1
    2c34:	45000015 	stw	r20,0(r8)
    2c38:	45800115 	stw	r22,4(r8)
    2c3c:	d8c02015 	stw	r3,128(sp)
    2c40:	d8801f15 	stw	r2,124(sp)
    2c44:	e0bff60e 	bge	fp,r2,2c20 <___vfprintf_internal_r+0x1a08>
    2c48:	d9801e04 	addi	r6,sp,120
    2c4c:	b80b883a 	mov	r5,r23
    2c50:	9809883a 	mov	r4,r19
    2c54:	00088140 	call	8814 <__sprint_r>
    2c58:	103a711e 	bne	r2,zero,1620 <___vfprintf_internal_r+0x408>
    2c5c:	d8c02017 	ldw	r3,128(sp)
    2c60:	d8801f17 	ldw	r2,124(sp)
    2c64:	da000404 	addi	r8,sp,16
    2c68:	003fee06 	br	2c24 <___vfprintf_internal_r+0x1a0c>
    2c6c:	00bfffc4 	movi	r2,-1
    2c70:	003a6f06 	br	1630 <___vfprintf_internal_r+0x418>
    2c74:	008011c4 	movi	r2,71
    2c78:	1440b816 	blt	r2,r17,2f5c <___vfprintf_internal_r+0x1d44>
    2c7c:	040000b4 	movhi	r16,2
    2c80:	84289d04 	addi	r16,r16,-23948
    2c84:	00c000c4 	movi	r3,3
    2c88:	00bfdfc4 	movi	r2,-129
    2c8c:	d8c02a15 	stw	r3,168(sp)
    2c90:	90a4703a 	and	r18,r18,r2
    2c94:	df002783 	ldbu	fp,158(sp)
    2c98:	d8c02e15 	stw	r3,184(sp)
    2c9c:	d8002915 	stw	zero,164(sp)
    2ca0:	d8003215 	stw	zero,200(sp)
    2ca4:	003b2906 	br	194c <___vfprintf_internal_r+0x734>
    2ca8:	d9002d17 	ldw	r4,180(sp)
    2cac:	24c00017 	ldw	r19,0(r4)
    2cb0:	21000104 	addi	r4,r4,4
    2cb4:	d9002d15 	stw	r4,180(sp)
    2cb8:	982dd7fa 	srai	r22,r19,31
    2cbc:	b005883a 	mov	r2,r22
    2cc0:	003a9f06 	br	1740 <___vfprintf_internal_r+0x528>
    2cc4:	d9402d17 	ldw	r5,180(sp)
    2cc8:	d8c02f17 	ldw	r3,188(sp)
    2ccc:	28800017 	ldw	r2,0(r5)
    2cd0:	29400104 	addi	r5,r5,4
    2cd4:	d9402d15 	stw	r5,180(sp)
    2cd8:	10c00015 	stw	r3,0(r2)
    2cdc:	00398606 	br	12f8 <___vfprintf_internal_r+0xe0>
    2ce0:	d9402d17 	ldw	r5,180(sp)
    2ce4:	002d883a 	mov	r22,zero
    2ce8:	2cc00017 	ldw	r19,0(r5)
    2cec:	29400104 	addi	r5,r5,4
    2cf0:	d9402d15 	stw	r5,180(sp)
    2cf4:	003c2306 	br	1d84 <___vfprintf_internal_r+0xb6c>
    2cf8:	d8c02d17 	ldw	r3,180(sp)
    2cfc:	d9002917 	ldw	r4,164(sp)
    2d00:	002d883a 	mov	r22,zero
    2d04:	18800104 	addi	r2,r3,4
    2d08:	1cc0000b 	ldhu	r19,0(r3)
    2d0c:	203dc10e 	bge	r4,zero,2414 <___vfprintf_internal_r+0x11fc>
    2d10:	003f7506 	br	2ae8 <___vfprintf_internal_r+0x18d0>
    2d14:	040000b4 	movhi	r16,2
    2d18:	84289b04 	addi	r16,r16,-23956
    2d1c:	003acc06 	br	1850 <___vfprintf_internal_r+0x638>
    2d20:	d9002c17 	ldw	r4,176(sp)
    2d24:	d9801e04 	addi	r6,sp,120
    2d28:	b80b883a 	mov	r5,r23
    2d2c:	00088140 	call	8814 <__sprint_r>
    2d30:	103a3b1e 	bne	r2,zero,1620 <___vfprintf_internal_r+0x408>
    2d34:	dc402617 	ldw	r17,152(sp)
    2d38:	d8c02017 	ldw	r3,128(sp)
    2d3c:	da000404 	addi	r8,sp,16
    2d40:	003f9c06 	br	2bb4 <___vfprintf_internal_r+0x199c>
    2d44:	ac400043 	ldbu	r17,1(r21)
    2d48:	94800814 	ori	r18,r18,32
    2d4c:	ad400044 	addi	r21,r21,1
    2d50:	8c403fcc 	andi	r17,r17,255
    2d54:	8c40201c 	xori	r17,r17,128
    2d58:	8c7fe004 	addi	r17,r17,-128
    2d5c:	00398f06 	br	139c <___vfprintf_internal_r+0x184>
    2d60:	d8c02d15 	stw	r3,180(sp)
    2d64:	0039883a 	mov	fp,zero
    2d68:	003e3506 	br	2640 <___vfprintf_internal_r+0x1428>
    2d6c:	d9002c17 	ldw	r4,176(sp)
    2d70:	d9801e04 	addi	r6,sp,120
    2d74:	b80b883a 	mov	r5,r23
    2d78:	00088140 	call	8814 <__sprint_r>
    2d7c:	103a281e 	bne	r2,zero,1620 <___vfprintf_internal_r+0x408>
    2d80:	d8c02017 	ldw	r3,128(sp)
    2d84:	da000404 	addi	r8,sp,16
    2d88:	003cd006 	br	20cc <___vfprintf_internal_r+0xeb4>
    2d8c:	8009883a 	mov	r4,r16
    2d90:	da003d15 	stw	r8,244(sp)
    2d94:	00011800 	call	1180 <strlen>
    2d98:	d8802e15 	stw	r2,184(sp)
    2d9c:	da003d17 	ldw	r8,244(sp)
    2da0:	103c340e 	bge	r2,zero,1e74 <___vfprintf_internal_r+0xc5c>
    2da4:	0005883a 	mov	r2,zero
    2da8:	003c3206 	br	1e74 <___vfprintf_internal_r+0xc5c>
    2dac:	d9002c17 	ldw	r4,176(sp)
    2db0:	d9801e04 	addi	r6,sp,120
    2db4:	b80b883a 	mov	r5,r23
    2db8:	00088140 	call	8814 <__sprint_r>
    2dbc:	103a181e 	bne	r2,zero,1620 <___vfprintf_internal_r+0x408>
    2dc0:	d8c02017 	ldw	r3,128(sp)
    2dc4:	d8801f17 	ldw	r2,124(sp)
    2dc8:	da000404 	addi	r8,sp,16
    2dcc:	d9403317 	ldw	r5,204(sp)
    2dd0:	10800044 	addi	r2,r2,1
    2dd4:	44000015 	stw	r16,0(r8)
    2dd8:	28c7883a 	add	r3,r5,r3
    2ddc:	003b7d06 	br	1bd4 <___vfprintf_internal_r+0x9bc>
    2de0:	010000b4 	movhi	r4,2
    2de4:	2128af84 	addi	r4,r4,-23874
    2de8:	d9003515 	stw	r4,212(sp)
    2dec:	003b1406 	br	1a40 <___vfprintf_internal_r+0x828>
    2df0:	013fffc4 	movi	r4,-1
    2df4:	003a3506 	br	16cc <___vfprintf_internal_r+0x4b4>
    2df8:	0023883a 	mov	r17,zero
    2dfc:	003d9d06 	br	2474 <___vfprintf_internal_r+0x125c>
    2e00:	d9002c17 	ldw	r4,176(sp)
    2e04:	d9801e04 	addi	r6,sp,120
    2e08:	b80b883a 	mov	r5,r23
    2e0c:	00088140 	call	8814 <__sprint_r>
    2e10:	103a031e 	bne	r2,zero,1620 <___vfprintf_internal_r+0x408>
    2e14:	d8c02017 	ldw	r3,128(sp)
    2e18:	da000404 	addi	r8,sp,16
    2e1c:	003d9406 	br	2470 <___vfprintf_internal_r+0x1258>
    2e20:	010000b4 	movhi	r4,2
    2e24:	2128ab84 	addi	r4,r4,-23890
    2e28:	d9002b15 	stw	r4,172(sp)
    2e2c:	d9002b17 	ldw	r4,172(sp)
    2e30:	1c47883a 	add	r3,r3,r17
    2e34:	10800044 	addi	r2,r2,1
    2e38:	41000015 	stw	r4,0(r8)
    2e3c:	44400115 	stw	r17,4(r8)
    2e40:	d8c02015 	stw	r3,128(sp)
    2e44:	d8801f15 	stw	r2,124(sp)
    2e48:	010001c4 	movi	r4,7
    2e4c:	20bfd716 	blt	r4,r2,2dac <___vfprintf_internal_r+0x1b94>
    2e50:	42000204 	addi	r8,r8,8
    2e54:	003fdd06 	br	2dcc <___vfprintf_internal_r+0x1bb4>
    2e58:	d9002c17 	ldw	r4,176(sp)
    2e5c:	d9801e04 	addi	r6,sp,120
    2e60:	b80b883a 	mov	r5,r23
    2e64:	00088140 	call	8814 <__sprint_r>
    2e68:	1039ed1e 	bne	r2,zero,1620 <___vfprintf_internal_r+0x408>
    2e6c:	d8802617 	ldw	r2,152(sp)
    2e70:	d8c02017 	ldw	r3,128(sp)
    2e74:	da000404 	addi	r8,sp,16
    2e78:	003e1006 	br	26bc <___vfprintf_internal_r+0x14a4>
    2e7c:	00800044 	movi	r2,1
    2e80:	10803fcc 	andi	r2,r2,255
    2e84:	00c00044 	movi	r3,1
    2e88:	10fa3526 	beq	r2,r3,1760 <___vfprintf_internal_r+0x548>
    2e8c:	00c00084 	movi	r3,2
    2e90:	10fbcb26 	beq	r2,r3,1dc0 <___vfprintf_internal_r+0xba8>
    2e94:	003a8f06 	br	18d4 <___vfprintf_internal_r+0x6bc>
    2e98:	010000b4 	movhi	r4,2
    2e9c:	2128af84 	addi	r4,r4,-23874
    2ea0:	d9003515 	stw	r4,212(sp)
    2ea4:	003b7606 	br	1c80 <___vfprintf_internal_r+0xa68>
    2ea8:	d8802917 	ldw	r2,164(sp)
    2eac:	00c00184 	movi	r3,6
    2eb0:	1880012e 	bgeu	r3,r2,2eb8 <___vfprintf_internal_r+0x1ca0>
    2eb4:	1805883a 	mov	r2,r3
    2eb8:	d8802e15 	stw	r2,184(sp)
    2ebc:	1000ef16 	blt	r2,zero,327c <___vfprintf_internal_r+0x2064>
    2ec0:	040000b4 	movhi	r16,2
    2ec4:	d8802a15 	stw	r2,168(sp)
    2ec8:	dcc02d15 	stw	r19,180(sp)
    2ecc:	d8002915 	stw	zero,164(sp)
    2ed0:	d8003215 	stw	zero,200(sp)
    2ed4:	8428a904 	addi	r16,r16,-23900
    2ed8:	0039883a 	mov	fp,zero
    2edc:	003aa206 	br	1968 <___vfprintf_internal_r+0x750>
    2ee0:	0021883a 	mov	r16,zero
    2ee4:	003e0706 	br	2704 <___vfprintf_internal_r+0x14ec>
    2ee8:	d9002c17 	ldw	r4,176(sp)
    2eec:	d9801e04 	addi	r6,sp,120
    2ef0:	b80b883a 	mov	r5,r23
    2ef4:	00088140 	call	8814 <__sprint_r>
    2ef8:	1039c91e 	bne	r2,zero,1620 <___vfprintf_internal_r+0x408>
    2efc:	d8802617 	ldw	r2,152(sp)
    2f00:	d9403317 	ldw	r5,204(sp)
    2f04:	d8c02017 	ldw	r3,128(sp)
    2f08:	da000404 	addi	r8,sp,16
    2f0c:	2885c83a 	sub	r2,r5,r2
    2f10:	003dfb06 	br	2700 <___vfprintf_internal_r+0x14e8>
    2f14:	9080004c 	andi	r2,r18,1
    2f18:	103e8f1e 	bne	r2,zero,2958 <___vfprintf_internal_r+0x1740>
    2f1c:	d8802117 	ldw	r2,132(sp)
    2f20:	003e9e06 	br	299c <___vfprintf_internal_r+0x1784>
    2f24:	1025883a 	mov	r18,r2
    2f28:	0039883a 	mov	fp,zero
    2f2c:	00800084 	movi	r2,2
    2f30:	003fd306 	br	2e80 <___vfprintf_internal_r+0x1c68>
    2f34:	07000b44 	movi	fp,45
    2f38:	df002785 	stb	fp,158(sp)
    2f3c:	003a4006 	br	1840 <___vfprintf_internal_r+0x628>
    2f40:	00c00b44 	movi	r3,45
    2f44:	d8c02785 	stb	r3,158(sp)
    2f48:	d8802a15 	stw	r2,168(sp)
    2f4c:	dc802b17 	ldw	r18,172(sp)
    2f50:	d8002915 	stw	zero,164(sp)
    2f54:	07000b44 	movi	fp,45
    2f58:	003a8006 	br	195c <___vfprintf_internal_r+0x744>
    2f5c:	040000b4 	movhi	r16,2
    2f60:	84289e04 	addi	r16,r16,-23944
    2f64:	003f4706 	br	2c84 <___vfprintf_internal_r+0x1a6c>
    2f68:	d8c02d17 	ldw	r3,180(sp)
    2f6c:	d9002f17 	ldw	r4,188(sp)
    2f70:	18800017 	ldw	r2,0(r3)
    2f74:	18c00104 	addi	r3,r3,4
    2f78:	d8c02d15 	stw	r3,180(sp)
    2f7c:	11000015 	stw	r4,0(r2)
    2f80:	0038dd06 	br	12f8 <___vfprintf_internal_r+0xe0>
    2f84:	dd802617 	ldw	r22,152(sp)
    2f88:	00bfff44 	movi	r2,-3
    2f8c:	b0801c16 	blt	r22,r2,3000 <___vfprintf_internal_r+0x1de8>
    2f90:	d9402917 	ldw	r5,164(sp)
    2f94:	2d801a16 	blt	r5,r22,3000 <___vfprintf_internal_r+0x1de8>
    2f98:	dd803215 	stw	r22,200(sp)
    2f9c:	003e8906 	br	29c4 <___vfprintf_internal_r+0x17ac>
    2fa0:	010000b4 	movhi	r4,2
    2fa4:	2128ab84 	addi	r4,r4,-23890
    2fa8:	d9002b15 	stw	r4,172(sp)
    2fac:	003c9106 	br	21f4 <___vfprintf_internal_r+0xfdc>
    2fb0:	e005883a 	mov	r2,fp
    2fb4:	003e7906 	br	299c <___vfprintf_internal_r+0x1784>
    2fb8:	d9402917 	ldw	r5,164(sp)
    2fbc:	df002783 	ldbu	fp,158(sp)
    2fc0:	dcc02d15 	stw	r19,180(sp)
    2fc4:	d9402a15 	stw	r5,168(sp)
    2fc8:	d9402e15 	stw	r5,184(sp)
    2fcc:	d8002915 	stw	zero,164(sp)
    2fd0:	d8003215 	stw	zero,200(sp)
    2fd4:	003a5d06 	br	194c <___vfprintf_internal_r+0x734>
    2fd8:	9080004c 	andi	r2,r18,1
    2fdc:	0039883a 	mov	fp,zero
    2fe0:	10000426 	beq	r2,zero,2ff4 <___vfprintf_internal_r+0x1ddc>
    2fe4:	00800c04 	movi	r2,48
    2fe8:	dc001dc4 	addi	r16,sp,119
    2fec:	d8801dc5 	stb	r2,119(sp)
    2ff0:	003b8006 	br	1df4 <___vfprintf_internal_r+0xbdc>
    2ff4:	d8002e15 	stw	zero,184(sp)
    2ff8:	dc001e04 	addi	r16,sp,120
    2ffc:	003a4d06 	br	1934 <___vfprintf_internal_r+0x71c>
    3000:	8c7fff84 	addi	r17,r17,-2
    3004:	b5bfffc4 	addi	r22,r22,-1
    3008:	dd802615 	stw	r22,152(sp)
    300c:	dc4022c5 	stb	r17,139(sp)
    3010:	b000bf16 	blt	r22,zero,3310 <___vfprintf_internal_r+0x20f8>
    3014:	00800ac4 	movi	r2,43
    3018:	d8802305 	stb	r2,140(sp)
    301c:	00800244 	movi	r2,9
    3020:	15807016 	blt	r2,r22,31e4 <___vfprintf_internal_r+0x1fcc>
    3024:	00800c04 	movi	r2,48
    3028:	b5800c04 	addi	r22,r22,48
    302c:	d8802345 	stb	r2,141(sp)
    3030:	dd802385 	stb	r22,142(sp)
    3034:	d88023c4 	addi	r2,sp,143
    3038:	df0022c4 	addi	fp,sp,139
    303c:	d8c03317 	ldw	r3,204(sp)
    3040:	1739c83a 	sub	fp,r2,fp
    3044:	d9003317 	ldw	r4,204(sp)
    3048:	e0c7883a 	add	r3,fp,r3
    304c:	df003a15 	stw	fp,232(sp)
    3050:	d8c02e15 	stw	r3,184(sp)
    3054:	00800044 	movi	r2,1
    3058:	1100b30e 	bge	r2,r4,3328 <___vfprintf_internal_r+0x2110>
    305c:	d8c02e17 	ldw	r3,184(sp)
    3060:	18c00044 	addi	r3,r3,1
    3064:	d8c02e15 	stw	r3,184(sp)
    3068:	1805883a 	mov	r2,r3
    306c:	1800ac16 	blt	r3,zero,3320 <___vfprintf_internal_r+0x2108>
    3070:	d8003215 	stw	zero,200(sp)
    3074:	003e5d06 	br	29ec <___vfprintf_internal_r+0x17d4>
    3078:	d9002c17 	ldw	r4,176(sp)
    307c:	d9801e04 	addi	r6,sp,120
    3080:	b80b883a 	mov	r5,r23
    3084:	00088140 	call	8814 <__sprint_r>
    3088:	1039651e 	bne	r2,zero,1620 <___vfprintf_internal_r+0x408>
    308c:	dc402617 	ldw	r17,152(sp)
    3090:	d8c02017 	ldw	r3,128(sp)
    3094:	d8801f17 	ldw	r2,124(sp)
    3098:	da000404 	addi	r8,sp,16
    309c:	003ed606 	br	2bf8 <___vfprintf_internal_r+0x19e0>
    30a0:	582b883a 	mov	r21,r11
    30a4:	d8002915 	stw	zero,164(sp)
    30a8:	0038bd06 	br	13a0 <___vfprintf_internal_r+0x188>
    30ac:	d8802917 	ldw	r2,164(sp)
    30b0:	103e071e 	bne	r2,zero,28d0 <___vfprintf_internal_r+0x16b8>
    30b4:	dc002915 	stw	r16,164(sp)
    30b8:	003e0506 	br	28d0 <___vfprintf_internal_r+0x16b8>
    30bc:	d9002917 	ldw	r4,164(sp)
    30c0:	20c00044 	addi	r3,r4,1
    30c4:	003e0f06 	br	2904 <___vfprintf_internal_r+0x16ec>
    30c8:	01400184 	movi	r5,6
    30cc:	d9402915 	stw	r5,164(sp)
    30d0:	003dff06 	br	28d0 <___vfprintf_internal_r+0x16b8>
    30d4:	d8802104 	addi	r2,sp,132
    30d8:	d8800315 	stw	r2,12(sp)
    30dc:	d8802504 	addi	r2,sp,148
    30e0:	d8800215 	stw	r2,8(sp)
    30e4:	d8802604 	addi	r2,sp,152
    30e8:	d8800115 	stw	r2,4(sp)
    30ec:	d8802917 	ldw	r2,164(sp)
    30f0:	d9403617 	ldw	r5,216(sp)
    30f4:	d9002c17 	ldw	r4,176(sp)
    30f8:	d8800015 	stw	r2,0(sp)
    30fc:	01c000c4 	movi	r7,3
    3100:	980d883a 	mov	r6,r19
    3104:	da003d15 	stw	r8,244(sp)
    3108:	000383c0 	call	383c <_dtoa_r>
    310c:	d8c02917 	ldw	r3,164(sp)
    3110:	da003d17 	ldw	r8,244(sp)
    3114:	1021883a 	mov	r16,r2
    3118:	10f9883a 	add	fp,r2,r3
    311c:	81000007 	ldb	r4,0(r16)
    3120:	00800c04 	movi	r2,48
    3124:	20805e26 	beq	r4,r2,32a0 <___vfprintf_internal_r+0x2088>
    3128:	d8c02617 	ldw	r3,152(sp)
    312c:	e0f9883a 	add	fp,fp,r3
    3130:	003e0a06 	br	295c <___vfprintf_internal_r+0x1744>
    3134:	00c00b44 	movi	r3,45
    3138:	24e0003c 	xorhi	r19,r4,32768
    313c:	d8c02a05 	stb	r3,168(sp)
    3140:	003de906 	br	28e8 <___vfprintf_internal_r+0x16d0>
    3144:	d8c03217 	ldw	r3,200(sp)
    3148:	00c07a0e 	bge	zero,r3,3334 <___vfprintf_internal_r+0x211c>
    314c:	00800044 	movi	r2,1
    3150:	d9003317 	ldw	r4,204(sp)
    3154:	1105883a 	add	r2,r2,r4
    3158:	d8802e15 	stw	r2,184(sp)
    315c:	10004e16 	blt	r2,zero,3298 <___vfprintf_internal_r+0x2080>
    3160:	044019c4 	movi	r17,103
    3164:	003e2106 	br	29ec <___vfprintf_internal_r+0x17d4>
    3168:	d9002917 	ldw	r4,164(sp)
    316c:	d8802104 	addi	r2,sp,132
    3170:	d8800315 	stw	r2,12(sp)
    3174:	d9000015 	stw	r4,0(sp)
    3178:	d8802504 	addi	r2,sp,148
    317c:	d9403617 	ldw	r5,216(sp)
    3180:	d9002c17 	ldw	r4,176(sp)
    3184:	d8800215 	stw	r2,8(sp)
    3188:	d8802604 	addi	r2,sp,152
    318c:	d8800115 	stw	r2,4(sp)
    3190:	01c000c4 	movi	r7,3
    3194:	980d883a 	mov	r6,r19
    3198:	da003d15 	stw	r8,244(sp)
    319c:	000383c0 	call	383c <_dtoa_r>
    31a0:	d8c02917 	ldw	r3,164(sp)
    31a4:	da003d17 	ldw	r8,244(sp)
    31a8:	1021883a 	mov	r16,r2
    31ac:	00801184 	movi	r2,70
    31b0:	80f9883a 	add	fp,r16,r3
    31b4:	88bfd926 	beq	r17,r2,311c <___vfprintf_internal_r+0x1f04>
    31b8:	003de806 	br	295c <___vfprintf_internal_r+0x1744>
    31bc:	d9002917 	ldw	r4,164(sp)
    31c0:	00c04d0e 	bge	zero,r3,32f8 <___vfprintf_internal_r+0x20e0>
    31c4:	2000441e 	bne	r4,zero,32d8 <___vfprintf_internal_r+0x20c0>
    31c8:	9480004c 	andi	r18,r18,1
    31cc:	9000421e 	bne	r18,zero,32d8 <___vfprintf_internal_r+0x20c0>
    31d0:	1805883a 	mov	r2,r3
    31d4:	18007016 	blt	r3,zero,3398 <___vfprintf_internal_r+0x2180>
    31d8:	d8c03217 	ldw	r3,200(sp)
    31dc:	d8c02e15 	stw	r3,184(sp)
    31e0:	003e0206 	br	29ec <___vfprintf_internal_r+0x17d4>
    31e4:	df0022c4 	addi	fp,sp,139
    31e8:	dc002915 	stw	r16,164(sp)
    31ec:	4027883a 	mov	r19,r8
    31f0:	e021883a 	mov	r16,fp
    31f4:	b009883a 	mov	r4,r22
    31f8:	01400284 	movi	r5,10
    31fc:	000b1c80 	call	b1c8 <__modsi3>
    3200:	10800c04 	addi	r2,r2,48
    3204:	843fffc4 	addi	r16,r16,-1
    3208:	b009883a 	mov	r4,r22
    320c:	01400284 	movi	r5,10
    3210:	80800005 	stb	r2,0(r16)
    3214:	000b1440 	call	b144 <__divsi3>
    3218:	102d883a 	mov	r22,r2
    321c:	00800244 	movi	r2,9
    3220:	15bff416 	blt	r2,r22,31f4 <___vfprintf_internal_r+0x1fdc>
    3224:	9811883a 	mov	r8,r19
    3228:	b0800c04 	addi	r2,r22,48
    322c:	8027883a 	mov	r19,r16
    3230:	997fffc4 	addi	r5,r19,-1
    3234:	98bfffc5 	stb	r2,-1(r19)
    3238:	dc002917 	ldw	r16,164(sp)
    323c:	2f006a2e 	bgeu	r5,fp,33e8 <___vfprintf_internal_r+0x21d0>
    3240:	d9c02384 	addi	r7,sp,142
    3244:	3ccfc83a 	sub	r7,r7,r19
    3248:	d9002344 	addi	r4,sp,141
    324c:	e1cf883a 	add	r7,fp,r7
    3250:	00000106 	br	3258 <___vfprintf_internal_r+0x2040>
    3254:	28800003 	ldbu	r2,0(r5)
    3258:	20800005 	stb	r2,0(r4)
    325c:	21000044 	addi	r4,r4,1
    3260:	29400044 	addi	r5,r5,1
    3264:	393ffb1e 	bne	r7,r4,3254 <___vfprintf_internal_r+0x203c>
    3268:	d8802304 	addi	r2,sp,140
    326c:	14c5c83a 	sub	r2,r2,r19
    3270:	d8c02344 	addi	r3,sp,141
    3274:	1885883a 	add	r2,r3,r2
    3278:	003f7006 	br	303c <___vfprintf_internal_r+0x1e24>
    327c:	0005883a 	mov	r2,zero
    3280:	003f0f06 	br	2ec0 <___vfprintf_internal_r+0x1ca8>
    3284:	d8c03217 	ldw	r3,200(sp)
    3288:	18c00044 	addi	r3,r3,1
    328c:	d8c02e15 	stw	r3,184(sp)
    3290:	1805883a 	mov	r2,r3
    3294:	183fb20e 	bge	r3,zero,3160 <___vfprintf_internal_r+0x1f48>
    3298:	0005883a 	mov	r2,zero
    329c:	003fb006 	br	3160 <___vfprintf_internal_r+0x1f48>
    32a0:	d9003617 	ldw	r4,216(sp)
    32a4:	000d883a 	mov	r6,zero
    32a8:	000f883a 	mov	r7,zero
    32ac:	980b883a 	mov	r5,r19
    32b0:	d8c03c15 	stw	r3,240(sp)
    32b4:	da003d15 	stw	r8,244(sp)
    32b8:	000c48c0 	call	c48c <__eqdf2>
    32bc:	d8c03c17 	ldw	r3,240(sp)
    32c0:	da003d17 	ldw	r8,244(sp)
    32c4:	103f9826 	beq	r2,zero,3128 <___vfprintf_internal_r+0x1f10>
    32c8:	00800044 	movi	r2,1
    32cc:	10c7c83a 	sub	r3,r2,r3
    32d0:	d8c02615 	stw	r3,152(sp)
    32d4:	003f9506 	br	312c <___vfprintf_internal_r+0x1f14>
    32d8:	d9002917 	ldw	r4,164(sp)
    32dc:	d8c03217 	ldw	r3,200(sp)
    32e0:	20800044 	addi	r2,r4,1
    32e4:	1885883a 	add	r2,r3,r2
    32e8:	d8802e15 	stw	r2,184(sp)
    32ec:	103dbf0e 	bge	r2,zero,29ec <___vfprintf_internal_r+0x17d4>
    32f0:	0005883a 	mov	r2,zero
    32f4:	003dbd06 	br	29ec <___vfprintf_internal_r+0x17d4>
    32f8:	2000211e 	bne	r4,zero,3380 <___vfprintf_internal_r+0x2168>
    32fc:	9480004c 	andi	r18,r18,1
    3300:	90001f1e 	bne	r18,zero,3380 <___vfprintf_internal_r+0x2168>
    3304:	00800044 	movi	r2,1
    3308:	d8802e15 	stw	r2,184(sp)
    330c:	003db706 	br	29ec <___vfprintf_internal_r+0x17d4>
    3310:	00800b44 	movi	r2,45
    3314:	05adc83a 	sub	r22,zero,r22
    3318:	d8802305 	stb	r2,140(sp)
    331c:	003f3f06 	br	301c <___vfprintf_internal_r+0x1e04>
    3320:	0005883a 	mov	r2,zero
    3324:	003f5206 	br	3070 <___vfprintf_internal_r+0x1e58>
    3328:	90a4703a 	and	r18,r18,r2
    332c:	903f4e26 	beq	r18,zero,3068 <___vfprintf_internal_r+0x1e50>
    3330:	003f4a06 	br	305c <___vfprintf_internal_r+0x1e44>
    3334:	00800084 	movi	r2,2
    3338:	10c5c83a 	sub	r2,r2,r3
    333c:	003f8406 	br	3150 <___vfprintf_internal_r+0x1f38>
    3340:	d8802d17 	ldw	r2,180(sp)
    3344:	d9002d17 	ldw	r4,180(sp)
    3348:	ac400043 	ldbu	r17,1(r21)
    334c:	10800017 	ldw	r2,0(r2)
    3350:	582b883a 	mov	r21,r11
    3354:	d8802915 	stw	r2,164(sp)
    3358:	20800104 	addi	r2,r4,4
    335c:	d9002917 	ldw	r4,164(sp)
    3360:	d8802d15 	stw	r2,180(sp)
    3364:	203e7a0e 	bge	r4,zero,2d50 <___vfprintf_internal_r+0x1b38>
    3368:	8c403fcc 	andi	r17,r17,255
    336c:	00bfffc4 	movi	r2,-1
    3370:	8c40201c 	xori	r17,r17,128
    3374:	d8802915 	stw	r2,164(sp)
    3378:	8c7fe004 	addi	r17,r17,-128
    337c:	00380706 	br	139c <___vfprintf_internal_r+0x184>
    3380:	d8c02917 	ldw	r3,164(sp)
    3384:	18c00084 	addi	r3,r3,2
    3388:	d8c02e15 	stw	r3,184(sp)
    338c:	1805883a 	mov	r2,r3
    3390:	183d960e 	bge	r3,zero,29ec <___vfprintf_internal_r+0x17d4>
    3394:	003fd606 	br	32f0 <___vfprintf_internal_r+0x20d8>
    3398:	0005883a 	mov	r2,zero
    339c:	003f8e06 	br	31d8 <___vfprintf_internal_r+0x1fc0>
    33a0:	9080004c 	andi	r2,r18,1
    33a4:	103f811e 	bne	r2,zero,31ac <___vfprintf_internal_r+0x1f94>
    33a8:	d8802117 	ldw	r2,132(sp)
    33ac:	1405c83a 	sub	r2,r2,r16
    33b0:	d8803315 	stw	r2,204(sp)
    33b4:	b47ef326 	beq	r22,r17,2f84 <___vfprintf_internal_r+0x1d6c>
    33b8:	dd802617 	ldw	r22,152(sp)
    33bc:	003f1106 	br	3004 <___vfprintf_internal_r+0x1dec>
    33c0:	d9c02785 	stb	r7,158(sp)
    33c4:	00390406 	br	17d8 <___vfprintf_internal_r+0x5c0>
    33c8:	d9c02785 	stb	r7,158(sp)
    33cc:	0038d306 	br	171c <___vfprintf_internal_r+0x504>
    33d0:	d9c02785 	stb	r7,158(sp)
    33d4:	003a6106 	br	1d5c <___vfprintf_internal_r+0xb44>
    33d8:	d9c02785 	stb	r7,158(sp)
    33dc:	003af806 	br	1fc0 <___vfprintf_internal_r+0xda8>
    33e0:	0005883a 	mov	r2,zero
    33e4:	003d7e06 	br	29e0 <___vfprintf_internal_r+0x17c8>
    33e8:	d8802344 	addi	r2,sp,141
    33ec:	003f1306 	br	303c <___vfprintf_internal_r+0x1e24>
    33f0:	d9c02785 	stb	r7,158(sp)
    33f4:	00392306 	br	1884 <___vfprintf_internal_r+0x66c>
    33f8:	d9c02785 	stb	r7,158(sp)
    33fc:	003aa906 	br	1ea4 <___vfprintf_internal_r+0xc8c>
    3400:	d9c02785 	stb	r7,158(sp)
    3404:	003a3d06 	br	1cfc <___vfprintf_internal_r+0xae4>
    3408:	d9c02785 	stb	r7,158(sp)
    340c:	003aca06 	br	1f38 <___vfprintf_internal_r+0xd20>

00003410 <__vfprintf_internal>:
    3410:	008000b4 	movhi	r2,2
    3414:	10b17c04 	addi	r2,r2,-14864
    3418:	300f883a 	mov	r7,r6
    341c:	280d883a 	mov	r6,r5
    3420:	200b883a 	mov	r5,r4
    3424:	11000017 	ldw	r4,0(r2)
    3428:	00012181 	jmpi	1218 <___vfprintf_internal_r>

0000342c <__sbprintf>:
    342c:	2880030b 	ldhu	r2,12(r5)
    3430:	2ac01917 	ldw	r11,100(r5)
    3434:	2a80038b 	ldhu	r10,14(r5)
    3438:	2a400717 	ldw	r9,28(r5)
    343c:	2a000917 	ldw	r8,36(r5)
    3440:	defee204 	addi	sp,sp,-1144
    3444:	00c10004 	movi	r3,1024
    3448:	dc011a15 	stw	r16,1128(sp)
    344c:	10bfff4c 	andi	r2,r2,65533
    3450:	2821883a 	mov	r16,r5
    3454:	d8cb883a 	add	r5,sp,r3
    3458:	dc811c15 	stw	r18,1136(sp)
    345c:	dc411b15 	stw	r17,1132(sp)
    3460:	dfc11d15 	stw	ra,1140(sp)
    3464:	2025883a 	mov	r18,r4
    3468:	d881030d 	sth	r2,1036(sp)
    346c:	dac11915 	stw	r11,1124(sp)
    3470:	da81038d 	sth	r10,1038(sp)
    3474:	da410715 	stw	r9,1052(sp)
    3478:	da010915 	stw	r8,1060(sp)
    347c:	dec10015 	stw	sp,1024(sp)
    3480:	dec10415 	stw	sp,1040(sp)
    3484:	d8c10215 	stw	r3,1032(sp)
    3488:	d8c10515 	stw	r3,1044(sp)
    348c:	d8010615 	stw	zero,1048(sp)
    3490:	00012180 	call	1218 <___vfprintf_internal_r>
    3494:	1023883a 	mov	r17,r2
    3498:	10000416 	blt	r2,zero,34ac <__sbprintf+0x80>
    349c:	d9410004 	addi	r5,sp,1024
    34a0:	9009883a 	mov	r4,r18
    34a4:	00050e00 	call	50e0 <_fflush_r>
    34a8:	10000d1e 	bne	r2,zero,34e0 <__sbprintf+0xb4>
    34ac:	d881030b 	ldhu	r2,1036(sp)
    34b0:	1080100c 	andi	r2,r2,64
    34b4:	10000326 	beq	r2,zero,34c4 <__sbprintf+0x98>
    34b8:	8080030b 	ldhu	r2,12(r16)
    34bc:	10801014 	ori	r2,r2,64
    34c0:	8080030d 	sth	r2,12(r16)
    34c4:	8805883a 	mov	r2,r17
    34c8:	dfc11d17 	ldw	ra,1140(sp)
    34cc:	dc811c17 	ldw	r18,1136(sp)
    34d0:	dc411b17 	ldw	r17,1132(sp)
    34d4:	dc011a17 	ldw	r16,1128(sp)
    34d8:	dec11e04 	addi	sp,sp,1144
    34dc:	f800283a 	ret
    34e0:	047fffc4 	movi	r17,-1
    34e4:	003ff106 	br	34ac <__sbprintf+0x80>

000034e8 <__swsetup_r>:
    34e8:	008000b4 	movhi	r2,2
    34ec:	defffd04 	addi	sp,sp,-12
    34f0:	10b17c04 	addi	r2,r2,-14864
    34f4:	dc400115 	stw	r17,4(sp)
    34f8:	2023883a 	mov	r17,r4
    34fc:	11000017 	ldw	r4,0(r2)
    3500:	dc000015 	stw	r16,0(sp)
    3504:	dfc00215 	stw	ra,8(sp)
    3508:	2821883a 	mov	r16,r5
    350c:	20000226 	beq	r4,zero,3518 <__swsetup_r+0x30>
    3510:	20800e17 	ldw	r2,56(r4)
    3514:	10003126 	beq	r2,zero,35dc <__swsetup_r+0xf4>
    3518:	8080030b 	ldhu	r2,12(r16)
    351c:	10c0020c 	andi	r3,r2,8
    3520:	1009883a 	mov	r4,r2
    3524:	18000f26 	beq	r3,zero,3564 <__swsetup_r+0x7c>
    3528:	80c00417 	ldw	r3,16(r16)
    352c:	18001526 	beq	r3,zero,3584 <__swsetup_r+0x9c>
    3530:	1100004c 	andi	r4,r2,1
    3534:	20001c1e 	bne	r4,zero,35a8 <__swsetup_r+0xc0>
    3538:	1080008c 	andi	r2,r2,2
    353c:	1000291e 	bne	r2,zero,35e4 <__swsetup_r+0xfc>
    3540:	80800517 	ldw	r2,20(r16)
    3544:	80800215 	stw	r2,8(r16)
    3548:	18001c26 	beq	r3,zero,35bc <__swsetup_r+0xd4>
    354c:	0005883a 	mov	r2,zero
    3550:	dfc00217 	ldw	ra,8(sp)
    3554:	dc400117 	ldw	r17,4(sp)
    3558:	dc000017 	ldw	r16,0(sp)
    355c:	dec00304 	addi	sp,sp,12
    3560:	f800283a 	ret
    3564:	2080040c 	andi	r2,r4,16
    3568:	10002e26 	beq	r2,zero,3624 <__swsetup_r+0x13c>
    356c:	2080010c 	andi	r2,r4,4
    3570:	10001e1e 	bne	r2,zero,35ec <__swsetup_r+0x104>
    3574:	80c00417 	ldw	r3,16(r16)
    3578:	20800214 	ori	r2,r4,8
    357c:	8080030d 	sth	r2,12(r16)
    3580:	183feb1e 	bne	r3,zero,3530 <__swsetup_r+0x48>
    3584:	1100a00c 	andi	r4,r2,640
    3588:	01408004 	movi	r5,512
    358c:	217fe826 	beq	r4,r5,3530 <__swsetup_r+0x48>
    3590:	800b883a 	mov	r5,r16
    3594:	8809883a 	mov	r4,r17
    3598:	00060600 	call	6060 <__smakebuf_r>
    359c:	8080030b 	ldhu	r2,12(r16)
    35a0:	80c00417 	ldw	r3,16(r16)
    35a4:	003fe206 	br	3530 <__swsetup_r+0x48>
    35a8:	80800517 	ldw	r2,20(r16)
    35ac:	80000215 	stw	zero,8(r16)
    35b0:	0085c83a 	sub	r2,zero,r2
    35b4:	80800615 	stw	r2,24(r16)
    35b8:	183fe41e 	bne	r3,zero,354c <__swsetup_r+0x64>
    35bc:	80c0030b 	ldhu	r3,12(r16)
    35c0:	0005883a 	mov	r2,zero
    35c4:	1900200c 	andi	r4,r3,128
    35c8:	203fe126 	beq	r4,zero,3550 <__swsetup_r+0x68>
    35cc:	18c01014 	ori	r3,r3,64
    35d0:	80c0030d 	sth	r3,12(r16)
    35d4:	00bfffc4 	movi	r2,-1
    35d8:	003fdd06 	br	3550 <__swsetup_r+0x68>
    35dc:	00054bc0 	call	54bc <__sinit>
    35e0:	003fcd06 	br	3518 <__swsetup_r+0x30>
    35e4:	0005883a 	mov	r2,zero
    35e8:	003fd606 	br	3544 <__swsetup_r+0x5c>
    35ec:	81400c17 	ldw	r5,48(r16)
    35f0:	28000626 	beq	r5,zero,360c <__swsetup_r+0x124>
    35f4:	80801004 	addi	r2,r16,64
    35f8:	28800326 	beq	r5,r2,3608 <__swsetup_r+0x120>
    35fc:	8809883a 	mov	r4,r17
    3600:	00056300 	call	5630 <_free_r>
    3604:	8100030b 	ldhu	r4,12(r16)
    3608:	80000c15 	stw	zero,48(r16)
    360c:	80c00417 	ldw	r3,16(r16)
    3610:	00bff6c4 	movi	r2,-37
    3614:	1108703a 	and	r4,r2,r4
    3618:	80000115 	stw	zero,4(r16)
    361c:	80c00015 	stw	r3,0(r16)
    3620:	003fd506 	br	3578 <__swsetup_r+0x90>
    3624:	00800244 	movi	r2,9
    3628:	88800015 	stw	r2,0(r17)
    362c:	20801014 	ori	r2,r4,64
    3630:	8080030d 	sth	r2,12(r16)
    3634:	00bfffc4 	movi	r2,-1
    3638:	003fc506 	br	3550 <__swsetup_r+0x68>

0000363c <quorem>:
    363c:	defff704 	addi	sp,sp,-36
    3640:	dc800215 	stw	r18,8(sp)
    3644:	20800417 	ldw	r2,16(r4)
    3648:	2c800417 	ldw	r18,16(r5)
    364c:	dfc00815 	stw	ra,32(sp)
    3650:	ddc00715 	stw	r23,28(sp)
    3654:	dd800615 	stw	r22,24(sp)
    3658:	dd400515 	stw	r21,20(sp)
    365c:	dd000415 	stw	r20,16(sp)
    3660:	dcc00315 	stw	r19,12(sp)
    3664:	dc400115 	stw	r17,4(sp)
    3668:	dc000015 	stw	r16,0(sp)
    366c:	14807116 	blt	r2,r18,3834 <quorem+0x1f8>
    3670:	94bfffc4 	addi	r18,r18,-1
    3674:	94ad883a 	add	r22,r18,r18
    3678:	b5ad883a 	add	r22,r22,r22
    367c:	2c400504 	addi	r17,r5,20
    3680:	8da9883a 	add	r20,r17,r22
    3684:	25400504 	addi	r21,r4,20
    3688:	282f883a 	mov	r23,r5
    368c:	adad883a 	add	r22,r21,r22
    3690:	a1400017 	ldw	r5,0(r20)
    3694:	2021883a 	mov	r16,r4
    3698:	b1000017 	ldw	r4,0(r22)
    369c:	29400044 	addi	r5,r5,1
    36a0:	000b23c0 	call	b23c <__udivsi3>
    36a4:	1027883a 	mov	r19,r2
    36a8:	10002c26 	beq	r2,zero,375c <quorem+0x120>
    36ac:	a813883a 	mov	r9,r21
    36b0:	880b883a 	mov	r5,r17
    36b4:	0009883a 	mov	r4,zero
    36b8:	000d883a 	mov	r6,zero
    36bc:	2a000017 	ldw	r8,0(r5)
    36c0:	49c00017 	ldw	r7,0(r9)
    36c4:	29400104 	addi	r5,r5,4
    36c8:	40bfffcc 	andi	r2,r8,65535
    36cc:	14c5383a 	mul	r2,r2,r19
    36d0:	4010d43a 	srli	r8,r8,16
    36d4:	38ffffcc 	andi	r3,r7,65535
    36d8:	1105883a 	add	r2,r2,r4
    36dc:	1008d43a 	srli	r4,r2,16
    36e0:	44d1383a 	mul	r8,r8,r19
    36e4:	198d883a 	add	r6,r3,r6
    36e8:	10ffffcc 	andi	r3,r2,65535
    36ec:	30c7c83a 	sub	r3,r6,r3
    36f0:	380ed43a 	srli	r7,r7,16
    36f4:	4105883a 	add	r2,r8,r4
    36f8:	180dd43a 	srai	r6,r3,16
    36fc:	113fffcc 	andi	r4,r2,65535
    3700:	390fc83a 	sub	r7,r7,r4
    3704:	398d883a 	add	r6,r7,r6
    3708:	300e943a 	slli	r7,r6,16
    370c:	18ffffcc 	andi	r3,r3,65535
    3710:	1008d43a 	srli	r4,r2,16
    3714:	38ceb03a 	or	r7,r7,r3
    3718:	49c00015 	stw	r7,0(r9)
    371c:	300dd43a 	srai	r6,r6,16
    3720:	4a400104 	addi	r9,r9,4
    3724:	a17fe52e 	bgeu	r20,r5,36bc <quorem+0x80>
    3728:	b0800017 	ldw	r2,0(r22)
    372c:	10000b1e 	bne	r2,zero,375c <quorem+0x120>
    3730:	b0bfff04 	addi	r2,r22,-4
    3734:	a880082e 	bgeu	r21,r2,3758 <quorem+0x11c>
    3738:	b0ffff17 	ldw	r3,-4(r22)
    373c:	18000326 	beq	r3,zero,374c <quorem+0x110>
    3740:	00000506 	br	3758 <quorem+0x11c>
    3744:	10c00017 	ldw	r3,0(r2)
    3748:	1800031e 	bne	r3,zero,3758 <quorem+0x11c>
    374c:	10bfff04 	addi	r2,r2,-4
    3750:	94bfffc4 	addi	r18,r18,-1
    3754:	a8bffb36 	bltu	r21,r2,3744 <quorem+0x108>
    3758:	84800415 	stw	r18,16(r16)
    375c:	b80b883a 	mov	r5,r23
    3760:	8009883a 	mov	r4,r16
    3764:	00077a00 	call	77a0 <__mcmp>
    3768:	10002616 	blt	r2,zero,3804 <quorem+0x1c8>
    376c:	9cc00044 	addi	r19,r19,1
    3770:	a805883a 	mov	r2,r21
    3774:	000b883a 	mov	r5,zero
    3778:	11000017 	ldw	r4,0(r2)
    377c:	89800017 	ldw	r6,0(r17)
    3780:	10800104 	addi	r2,r2,4
    3784:	20ffffcc 	andi	r3,r4,65535
    3788:	194b883a 	add	r5,r3,r5
    378c:	30ffffcc 	andi	r3,r6,65535
    3790:	28c7c83a 	sub	r3,r5,r3
    3794:	300cd43a 	srli	r6,r6,16
    3798:	2008d43a 	srli	r4,r4,16
    379c:	180bd43a 	srai	r5,r3,16
    37a0:	18ffffcc 	andi	r3,r3,65535
    37a4:	2189c83a 	sub	r4,r4,r6
    37a8:	2149883a 	add	r4,r4,r5
    37ac:	200c943a 	slli	r6,r4,16
    37b0:	8c400104 	addi	r17,r17,4
    37b4:	200bd43a 	srai	r5,r4,16
    37b8:	30c6b03a 	or	r3,r6,r3
    37bc:	10ffff15 	stw	r3,-4(r2)
    37c0:	a47fed2e 	bgeu	r20,r17,3778 <quorem+0x13c>
    37c4:	9485883a 	add	r2,r18,r18
    37c8:	1085883a 	add	r2,r2,r2
    37cc:	a887883a 	add	r3,r21,r2
    37d0:	18800017 	ldw	r2,0(r3)
    37d4:	10000b1e 	bne	r2,zero,3804 <quorem+0x1c8>
    37d8:	18bfff04 	addi	r2,r3,-4
    37dc:	a880082e 	bgeu	r21,r2,3800 <quorem+0x1c4>
    37e0:	18ffff17 	ldw	r3,-4(r3)
    37e4:	18000326 	beq	r3,zero,37f4 <quorem+0x1b8>
    37e8:	00000506 	br	3800 <quorem+0x1c4>
    37ec:	10c00017 	ldw	r3,0(r2)
    37f0:	1800031e 	bne	r3,zero,3800 <quorem+0x1c4>
    37f4:	10bfff04 	addi	r2,r2,-4
    37f8:	94bfffc4 	addi	r18,r18,-1
    37fc:	a8bffb36 	bltu	r21,r2,37ec <quorem+0x1b0>
    3800:	84800415 	stw	r18,16(r16)
    3804:	9805883a 	mov	r2,r19
    3808:	dfc00817 	ldw	ra,32(sp)
    380c:	ddc00717 	ldw	r23,28(sp)
    3810:	dd800617 	ldw	r22,24(sp)
    3814:	dd400517 	ldw	r21,20(sp)
    3818:	dd000417 	ldw	r20,16(sp)
    381c:	dcc00317 	ldw	r19,12(sp)
    3820:	dc800217 	ldw	r18,8(sp)
    3824:	dc400117 	ldw	r17,4(sp)
    3828:	dc000017 	ldw	r16,0(sp)
    382c:	dec00904 	addi	sp,sp,36
    3830:	f800283a 	ret
    3834:	0005883a 	mov	r2,zero
    3838:	003ff306 	br	3808 <quorem+0x1cc>

0000383c <_dtoa_r>:
    383c:	20801017 	ldw	r2,64(r4)
    3840:	deffde04 	addi	sp,sp,-136
    3844:	df002015 	stw	fp,128(sp)
    3848:	dcc01b15 	stw	r19,108(sp)
    384c:	dc801a15 	stw	r18,104(sp)
    3850:	dc401915 	stw	r17,100(sp)
    3854:	dc001815 	stw	r16,96(sp)
    3858:	dfc02115 	stw	ra,132(sp)
    385c:	ddc01f15 	stw	r23,124(sp)
    3860:	dd801e15 	stw	r22,120(sp)
    3864:	dd401d15 	stw	r21,116(sp)
    3868:	dd001c15 	stw	r20,112(sp)
    386c:	d9c00315 	stw	r7,12(sp)
    3870:	2039883a 	mov	fp,r4
    3874:	3023883a 	mov	r17,r6
    3878:	2825883a 	mov	r18,r5
    387c:	dc002417 	ldw	r16,144(sp)
    3880:	3027883a 	mov	r19,r6
    3884:	10000826 	beq	r2,zero,38a8 <_dtoa_r+0x6c>
    3888:	21801117 	ldw	r6,68(r4)
    388c:	00c00044 	movi	r3,1
    3890:	100b883a 	mov	r5,r2
    3894:	1986983a 	sll	r3,r3,r6
    3898:	11800115 	stw	r6,4(r2)
    389c:	10c00215 	stw	r3,8(r2)
    38a0:	0006f800 	call	6f80 <_Bfree>
    38a4:	e0001015 	stw	zero,64(fp)
    38a8:	88002e16 	blt	r17,zero,3964 <_dtoa_r+0x128>
    38ac:	80000015 	stw	zero,0(r16)
    38b0:	889ffc2c 	andhi	r2,r17,32752
    38b4:	00dffc34 	movhi	r3,32752
    38b8:	10c01c26 	beq	r2,r3,392c <_dtoa_r+0xf0>
    38bc:	000d883a 	mov	r6,zero
    38c0:	000f883a 	mov	r7,zero
    38c4:	9009883a 	mov	r4,r18
    38c8:	980b883a 	mov	r5,r19
    38cc:	000c48c0 	call	c48c <__eqdf2>
    38d0:	10002b1e 	bne	r2,zero,3980 <_dtoa_r+0x144>
    38d4:	d9c02317 	ldw	r7,140(sp)
    38d8:	00800044 	movi	r2,1
    38dc:	38800015 	stw	r2,0(r7)
    38e0:	d8802517 	ldw	r2,148(sp)
    38e4:	10019e26 	beq	r2,zero,3f60 <_dtoa_r+0x724>
    38e8:	d8c02517 	ldw	r3,148(sp)
    38ec:	008000b4 	movhi	r2,2
    38f0:	10a8ab44 	addi	r2,r2,-23891
    38f4:	18800015 	stw	r2,0(r3)
    38f8:	10bfffc4 	addi	r2,r2,-1
    38fc:	dfc02117 	ldw	ra,132(sp)
    3900:	df002017 	ldw	fp,128(sp)
    3904:	ddc01f17 	ldw	r23,124(sp)
    3908:	dd801e17 	ldw	r22,120(sp)
    390c:	dd401d17 	ldw	r21,116(sp)
    3910:	dd001c17 	ldw	r20,112(sp)
    3914:	dcc01b17 	ldw	r19,108(sp)
    3918:	dc801a17 	ldw	r18,104(sp)
    391c:	dc401917 	ldw	r17,100(sp)
    3920:	dc001817 	ldw	r16,96(sp)
    3924:	dec02204 	addi	sp,sp,136
    3928:	f800283a 	ret
    392c:	d8c02317 	ldw	r3,140(sp)
    3930:	0089c3c4 	movi	r2,9999
    3934:	18800015 	stw	r2,0(r3)
    3938:	90017726 	beq	r18,zero,3f18 <_dtoa_r+0x6dc>
    393c:	008000b4 	movhi	r2,2
    3940:	10a8b704 	addi	r2,r2,-23844
    3944:	d9002517 	ldw	r4,148(sp)
    3948:	203fec26 	beq	r4,zero,38fc <_dtoa_r+0xc0>
    394c:	10c000c7 	ldb	r3,3(r2)
    3950:	1801781e 	bne	r3,zero,3f34 <_dtoa_r+0x6f8>
    3954:	10c000c4 	addi	r3,r2,3
    3958:	d9802517 	ldw	r6,148(sp)
    395c:	30c00015 	stw	r3,0(r6)
    3960:	003fe606 	br	38fc <_dtoa_r+0xc0>
    3964:	04e00034 	movhi	r19,32768
    3968:	9cffffc4 	addi	r19,r19,-1
    396c:	00800044 	movi	r2,1
    3970:	8ce6703a 	and	r19,r17,r19
    3974:	80800015 	stw	r2,0(r16)
    3978:	9823883a 	mov	r17,r19
    397c:	003fcc06 	br	38b0 <_dtoa_r+0x74>
    3980:	d8800204 	addi	r2,sp,8
    3984:	d8800015 	stw	r2,0(sp)
    3988:	d9c00104 	addi	r7,sp,4
    398c:	900b883a 	mov	r5,r18
    3990:	980d883a 	mov	r6,r19
    3994:	e009883a 	mov	r4,fp
    3998:	8820d53a 	srli	r16,r17,20
    399c:	0007b6c0 	call	7b6c <__d2b>
    39a0:	d8800915 	stw	r2,36(sp)
    39a4:	8001651e 	bne	r16,zero,3f3c <_dtoa_r+0x700>
    39a8:	dd800217 	ldw	r22,8(sp)
    39ac:	dc000117 	ldw	r16,4(sp)
    39b0:	00800804 	movi	r2,32
    39b4:	b421883a 	add	r16,r22,r16
    39b8:	80c10c84 	addi	r3,r16,1074
    39bc:	10c2d10e 	bge	r2,r3,4504 <_dtoa_r+0xcc8>
    39c0:	00801004 	movi	r2,64
    39c4:	81010484 	addi	r4,r16,1042
    39c8:	10c7c83a 	sub	r3,r2,r3
    39cc:	9108d83a 	srl	r4,r18,r4
    39d0:	88e2983a 	sll	r17,r17,r3
    39d4:	2448b03a 	or	r4,r4,r17
    39d8:	000d8540 	call	d854 <__floatunsidf>
    39dc:	017f8434 	movhi	r5,65040
    39e0:	01800044 	movi	r6,1
    39e4:	1009883a 	mov	r4,r2
    39e8:	194b883a 	add	r5,r3,r5
    39ec:	843fffc4 	addi	r16,r16,-1
    39f0:	d9801115 	stw	r6,68(sp)
    39f4:	000d883a 	mov	r6,zero
    39f8:	01cffe34 	movhi	r7,16376
    39fc:	000cdfc0 	call	cdfc <__subdf3>
    3a00:	0198dbf4 	movhi	r6,25455
    3a04:	01cff4f4 	movhi	r7,16339
    3a08:	3190d844 	addi	r6,r6,17249
    3a0c:	39e1e9c4 	addi	r7,r7,-30809
    3a10:	1009883a 	mov	r4,r2
    3a14:	180b883a 	mov	r5,r3
    3a18:	000c6e40 	call	c6e4 <__muldf3>
    3a1c:	01a2d874 	movhi	r6,35681
    3a20:	01cff1f4 	movhi	r7,16327
    3a24:	31b22cc4 	addi	r6,r6,-14157
    3a28:	39e28a04 	addi	r7,r7,-30168
    3a2c:	180b883a 	mov	r5,r3
    3a30:	1009883a 	mov	r4,r2
    3a34:	000b2f80 	call	b2f8 <__adddf3>
    3a38:	8009883a 	mov	r4,r16
    3a3c:	1029883a 	mov	r20,r2
    3a40:	1823883a 	mov	r17,r3
    3a44:	000d7780 	call	d778 <__floatsidf>
    3a48:	019427f4 	movhi	r6,20639
    3a4c:	01cff4f4 	movhi	r7,16339
    3a50:	319e7ec4 	addi	r6,r6,31227
    3a54:	39d104c4 	addi	r7,r7,17427
    3a58:	1009883a 	mov	r4,r2
    3a5c:	180b883a 	mov	r5,r3
    3a60:	000c6e40 	call	c6e4 <__muldf3>
    3a64:	100d883a 	mov	r6,r2
    3a68:	180f883a 	mov	r7,r3
    3a6c:	a009883a 	mov	r4,r20
    3a70:	880b883a 	mov	r5,r17
    3a74:	000b2f80 	call	b2f8 <__adddf3>
    3a78:	1009883a 	mov	r4,r2
    3a7c:	180b883a 	mov	r5,r3
    3a80:	1029883a 	mov	r20,r2
    3a84:	1823883a 	mov	r17,r3
    3a88:	000d6f80 	call	d6f8 <__fixdfsi>
    3a8c:	000d883a 	mov	r6,zero
    3a90:	000f883a 	mov	r7,zero
    3a94:	a009883a 	mov	r4,r20
    3a98:	880b883a 	mov	r5,r17
    3a9c:	d8800515 	stw	r2,20(sp)
    3aa0:	000c5f00 	call	c5f0 <__ledf2>
    3aa4:	10028716 	blt	r2,zero,44c4 <_dtoa_r+0xc88>
    3aa8:	d8c00517 	ldw	r3,20(sp)
    3aac:	00800584 	movi	r2,22
    3ab0:	10c27536 	bltu	r2,r3,4488 <_dtoa_r+0xc4c>
    3ab4:	180490fa 	slli	r2,r3,3
    3ab8:	00c000b4 	movhi	r3,2
    3abc:	18e8d204 	addi	r3,r3,-23736
    3ac0:	1885883a 	add	r2,r3,r2
    3ac4:	11000017 	ldw	r4,0(r2)
    3ac8:	11400117 	ldw	r5,4(r2)
    3acc:	900d883a 	mov	r6,r18
    3ad0:	980f883a 	mov	r7,r19
    3ad4:	000c5140 	call	c514 <__gedf2>
    3ad8:	00828d0e 	bge	zero,r2,4510 <_dtoa_r+0xcd4>
    3adc:	d9000517 	ldw	r4,20(sp)
    3ae0:	d8000e15 	stw	zero,56(sp)
    3ae4:	213fffc4 	addi	r4,r4,-1
    3ae8:	d9000515 	stw	r4,20(sp)
    3aec:	b42dc83a 	sub	r22,r22,r16
    3af0:	b5bfffc4 	addi	r22,r22,-1
    3af4:	b0026f16 	blt	r22,zero,44b4 <_dtoa_r+0xc78>
    3af8:	d8000815 	stw	zero,32(sp)
    3afc:	d9c00517 	ldw	r7,20(sp)
    3b00:	38026416 	blt	r7,zero,4494 <_dtoa_r+0xc58>
    3b04:	b1ed883a 	add	r22,r22,r7
    3b08:	d9c00d15 	stw	r7,52(sp)
    3b0c:	d8000a15 	stw	zero,40(sp)
    3b10:	d9800317 	ldw	r6,12(sp)
    3b14:	00800244 	movi	r2,9
    3b18:	11811436 	bltu	r2,r6,3f6c <_dtoa_r+0x730>
    3b1c:	00800144 	movi	r2,5
    3b20:	1184e10e 	bge	r2,r6,4ea8 <_dtoa_r+0x166c>
    3b24:	31bfff04 	addi	r6,r6,-4
    3b28:	d9800315 	stw	r6,12(sp)
    3b2c:	0023883a 	mov	r17,zero
    3b30:	d9800317 	ldw	r6,12(sp)
    3b34:	008000c4 	movi	r2,3
    3b38:	30836726 	beq	r6,r2,48d8 <_dtoa_r+0x109c>
    3b3c:	1183410e 	bge	r2,r6,4844 <_dtoa_r+0x1008>
    3b40:	d9c00317 	ldw	r7,12(sp)
    3b44:	00800104 	movi	r2,4
    3b48:	38827c26 	beq	r7,r2,453c <_dtoa_r+0xd00>
    3b4c:	00800144 	movi	r2,5
    3b50:	3884c41e 	bne	r7,r2,4e64 <_dtoa_r+0x1628>
    3b54:	00800044 	movi	r2,1
    3b58:	d8800b15 	stw	r2,44(sp)
    3b5c:	d8c00517 	ldw	r3,20(sp)
    3b60:	d9002217 	ldw	r4,136(sp)
    3b64:	1907883a 	add	r3,r3,r4
    3b68:	19800044 	addi	r6,r3,1
    3b6c:	d8c00c15 	stw	r3,48(sp)
    3b70:	d9800615 	stw	r6,24(sp)
    3b74:	0183a40e 	bge	zero,r6,4a08 <_dtoa_r+0x11cc>
    3b78:	d9800617 	ldw	r6,24(sp)
    3b7c:	3021883a 	mov	r16,r6
    3b80:	e0001115 	stw	zero,68(fp)
    3b84:	008005c4 	movi	r2,23
    3b88:	1184c92e 	bgeu	r2,r6,4eb0 <_dtoa_r+0x1674>
    3b8c:	00c00044 	movi	r3,1
    3b90:	00800104 	movi	r2,4
    3b94:	1085883a 	add	r2,r2,r2
    3b98:	11000504 	addi	r4,r2,20
    3b9c:	180b883a 	mov	r5,r3
    3ba0:	18c00044 	addi	r3,r3,1
    3ba4:	313ffb2e 	bgeu	r6,r4,3b94 <_dtoa_r+0x358>
    3ba8:	e1401115 	stw	r5,68(fp)
    3bac:	e009883a 	mov	r4,fp
    3bb0:	0006ed80 	call	6ed8 <_Balloc>
    3bb4:	d8800715 	stw	r2,28(sp)
    3bb8:	e0801015 	stw	r2,64(fp)
    3bbc:	00800384 	movi	r2,14
    3bc0:	1400f736 	bltu	r2,r16,3fa0 <_dtoa_r+0x764>
    3bc4:	8800f626 	beq	r17,zero,3fa0 <_dtoa_r+0x764>
    3bc8:	d9c00517 	ldw	r7,20(sp)
    3bcc:	01c39a0e 	bge	zero,r7,4a38 <_dtoa_r+0x11fc>
    3bd0:	388003cc 	andi	r2,r7,15
    3bd4:	100490fa 	slli	r2,r2,3
    3bd8:	382bd13a 	srai	r21,r7,4
    3bdc:	00c000b4 	movhi	r3,2
    3be0:	18e8d204 	addi	r3,r3,-23736
    3be4:	1885883a 	add	r2,r3,r2
    3be8:	a8c0040c 	andi	r3,r21,16
    3bec:	12400017 	ldw	r9,0(r2)
    3bf0:	12000117 	ldw	r8,4(r2)
    3bf4:	18037926 	beq	r3,zero,49dc <_dtoa_r+0x11a0>
    3bf8:	008000b4 	movhi	r2,2
    3bfc:	10a8c804 	addi	r2,r2,-23776
    3c00:	11800817 	ldw	r6,32(r2)
    3c04:	11c00917 	ldw	r7,36(r2)
    3c08:	9009883a 	mov	r4,r18
    3c0c:	980b883a 	mov	r5,r19
    3c10:	da001715 	stw	r8,92(sp)
    3c14:	da401615 	stw	r9,88(sp)
    3c18:	000bba40 	call	bba4 <__divdf3>
    3c1c:	da001717 	ldw	r8,92(sp)
    3c20:	da401617 	ldw	r9,88(sp)
    3c24:	ad4003cc 	andi	r21,r21,15
    3c28:	040000c4 	movi	r16,3
    3c2c:	1023883a 	mov	r17,r2
    3c30:	1829883a 	mov	r20,r3
    3c34:	a8001126 	beq	r21,zero,3c7c <_dtoa_r+0x440>
    3c38:	05c000b4 	movhi	r23,2
    3c3c:	bde8c804 	addi	r23,r23,-23776
    3c40:	4805883a 	mov	r2,r9
    3c44:	4007883a 	mov	r3,r8
    3c48:	a980004c 	andi	r6,r21,1
    3c4c:	1009883a 	mov	r4,r2
    3c50:	a82bd07a 	srai	r21,r21,1
    3c54:	180b883a 	mov	r5,r3
    3c58:	30000426 	beq	r6,zero,3c6c <_dtoa_r+0x430>
    3c5c:	b9800017 	ldw	r6,0(r23)
    3c60:	b9c00117 	ldw	r7,4(r23)
    3c64:	84000044 	addi	r16,r16,1
    3c68:	000c6e40 	call	c6e4 <__muldf3>
    3c6c:	bdc00204 	addi	r23,r23,8
    3c70:	a83ff51e 	bne	r21,zero,3c48 <_dtoa_r+0x40c>
    3c74:	1013883a 	mov	r9,r2
    3c78:	1811883a 	mov	r8,r3
    3c7c:	480d883a 	mov	r6,r9
    3c80:	400f883a 	mov	r7,r8
    3c84:	8809883a 	mov	r4,r17
    3c88:	a00b883a 	mov	r5,r20
    3c8c:	000bba40 	call	bba4 <__divdf3>
    3c90:	d8800f15 	stw	r2,60(sp)
    3c94:	d8c01015 	stw	r3,64(sp)
    3c98:	d8c00e17 	ldw	r3,56(sp)
    3c9c:	18000626 	beq	r3,zero,3cb8 <_dtoa_r+0x47c>
    3ca0:	d9000f17 	ldw	r4,60(sp)
    3ca4:	d9401017 	ldw	r5,64(sp)
    3ca8:	000d883a 	mov	r6,zero
    3cac:	01cffc34 	movhi	r7,16368
    3cb0:	000c5f00 	call	c5f0 <__ledf2>
    3cb4:	10040b16 	blt	r2,zero,4ce4 <_dtoa_r+0x14a8>
    3cb8:	8009883a 	mov	r4,r16
    3cbc:	000d7780 	call	d778 <__floatsidf>
    3cc0:	d9800f17 	ldw	r6,60(sp)
    3cc4:	d9c01017 	ldw	r7,64(sp)
    3cc8:	1009883a 	mov	r4,r2
    3ccc:	180b883a 	mov	r5,r3
    3cd0:	000c6e40 	call	c6e4 <__muldf3>
    3cd4:	000d883a 	mov	r6,zero
    3cd8:	01d00734 	movhi	r7,16412
    3cdc:	1009883a 	mov	r4,r2
    3ce0:	180b883a 	mov	r5,r3
    3ce4:	000b2f80 	call	b2f8 <__adddf3>
    3ce8:	1021883a 	mov	r16,r2
    3cec:	d8800617 	ldw	r2,24(sp)
    3cf0:	047f3034 	movhi	r17,64704
    3cf4:	1c63883a 	add	r17,r3,r17
    3cf8:	10031826 	beq	r2,zero,495c <_dtoa_r+0x1120>
    3cfc:	d8c00517 	ldw	r3,20(sp)
    3d00:	db000617 	ldw	r12,24(sp)
    3d04:	d8c01315 	stw	r3,76(sp)
    3d08:	d9000b17 	ldw	r4,44(sp)
    3d0c:	20038f26 	beq	r4,zero,4b4c <_dtoa_r+0x1310>
    3d10:	60bfffc4 	addi	r2,r12,-1
    3d14:	100490fa 	slli	r2,r2,3
    3d18:	00c000b4 	movhi	r3,2
    3d1c:	18e8d204 	addi	r3,r3,-23736
    3d20:	1885883a 	add	r2,r3,r2
    3d24:	11800017 	ldw	r6,0(r2)
    3d28:	11c00117 	ldw	r7,4(r2)
    3d2c:	d8800717 	ldw	r2,28(sp)
    3d30:	0009883a 	mov	r4,zero
    3d34:	014ff834 	movhi	r5,16352
    3d38:	db001615 	stw	r12,88(sp)
    3d3c:	15c00044 	addi	r23,r2,1
    3d40:	000bba40 	call	bba4 <__divdf3>
    3d44:	800d883a 	mov	r6,r16
    3d48:	880f883a 	mov	r7,r17
    3d4c:	1009883a 	mov	r4,r2
    3d50:	180b883a 	mov	r5,r3
    3d54:	000cdfc0 	call	cdfc <__subdf3>
    3d58:	d9401017 	ldw	r5,64(sp)
    3d5c:	d9000f17 	ldw	r4,60(sp)
    3d60:	102b883a 	mov	r21,r2
    3d64:	d8c01215 	stw	r3,72(sp)
    3d68:	000d6f80 	call	d6f8 <__fixdfsi>
    3d6c:	1009883a 	mov	r4,r2
    3d70:	1029883a 	mov	r20,r2
    3d74:	000d7780 	call	d778 <__floatsidf>
    3d78:	d9000f17 	ldw	r4,60(sp)
    3d7c:	d9401017 	ldw	r5,64(sp)
    3d80:	100d883a 	mov	r6,r2
    3d84:	180f883a 	mov	r7,r3
    3d88:	000cdfc0 	call	cdfc <__subdf3>
    3d8c:	1823883a 	mov	r17,r3
    3d90:	d8c00717 	ldw	r3,28(sp)
    3d94:	d9401217 	ldw	r5,72(sp)
    3d98:	a2000c04 	addi	r8,r20,48
    3d9c:	1021883a 	mov	r16,r2
    3da0:	1a000005 	stb	r8,0(r3)
    3da4:	800d883a 	mov	r6,r16
    3da8:	880f883a 	mov	r7,r17
    3dac:	a809883a 	mov	r4,r21
    3db0:	4029883a 	mov	r20,r8
    3db4:	000c5140 	call	c514 <__gedf2>
    3db8:	00841d16 	blt	zero,r2,4e30 <_dtoa_r+0x15f4>
    3dbc:	800d883a 	mov	r6,r16
    3dc0:	880f883a 	mov	r7,r17
    3dc4:	0009883a 	mov	r4,zero
    3dc8:	014ffc34 	movhi	r5,16368
    3dcc:	000cdfc0 	call	cdfc <__subdf3>
    3dd0:	d9401217 	ldw	r5,72(sp)
    3dd4:	100d883a 	mov	r6,r2
    3dd8:	180f883a 	mov	r7,r3
    3ddc:	a809883a 	mov	r4,r21
    3de0:	000c5140 	call	c514 <__gedf2>
    3de4:	db001617 	ldw	r12,88(sp)
    3de8:	00840e16 	blt	zero,r2,4e24 <_dtoa_r+0x15e8>
    3dec:	00800044 	movi	r2,1
    3df0:	13006b0e 	bge	r2,r12,3fa0 <_dtoa_r+0x764>
    3df4:	d9000717 	ldw	r4,28(sp)
    3df8:	dd800f15 	stw	r22,60(sp)
    3dfc:	dcc01015 	stw	r19,64(sp)
    3e00:	2319883a 	add	r12,r4,r12
    3e04:	dcc01217 	ldw	r19,72(sp)
    3e08:	602d883a 	mov	r22,r12
    3e0c:	dc801215 	stw	r18,72(sp)
    3e10:	b825883a 	mov	r18,r23
    3e14:	00000906 	br	3e3c <_dtoa_r+0x600>
    3e18:	000cdfc0 	call	cdfc <__subdf3>
    3e1c:	a80d883a 	mov	r6,r21
    3e20:	980f883a 	mov	r7,r19
    3e24:	1009883a 	mov	r4,r2
    3e28:	180b883a 	mov	r5,r3
    3e2c:	000c5f00 	call	c5f0 <__ledf2>
    3e30:	1003e816 	blt	r2,zero,4dd4 <_dtoa_r+0x1598>
    3e34:	b825883a 	mov	r18,r23
    3e38:	bd83e926 	beq	r23,r22,4de0 <_dtoa_r+0x15a4>
    3e3c:	a809883a 	mov	r4,r21
    3e40:	980b883a 	mov	r5,r19
    3e44:	000d883a 	mov	r6,zero
    3e48:	01d00934 	movhi	r7,16420
    3e4c:	000c6e40 	call	c6e4 <__muldf3>
    3e50:	000d883a 	mov	r6,zero
    3e54:	01d00934 	movhi	r7,16420
    3e58:	8009883a 	mov	r4,r16
    3e5c:	880b883a 	mov	r5,r17
    3e60:	102b883a 	mov	r21,r2
    3e64:	1827883a 	mov	r19,r3
    3e68:	000c6e40 	call	c6e4 <__muldf3>
    3e6c:	180b883a 	mov	r5,r3
    3e70:	1009883a 	mov	r4,r2
    3e74:	1821883a 	mov	r16,r3
    3e78:	1023883a 	mov	r17,r2
    3e7c:	000d6f80 	call	d6f8 <__fixdfsi>
    3e80:	1009883a 	mov	r4,r2
    3e84:	1029883a 	mov	r20,r2
    3e88:	000d7780 	call	d778 <__floatsidf>
    3e8c:	8809883a 	mov	r4,r17
    3e90:	800b883a 	mov	r5,r16
    3e94:	100d883a 	mov	r6,r2
    3e98:	180f883a 	mov	r7,r3
    3e9c:	000cdfc0 	call	cdfc <__subdf3>
    3ea0:	a5000c04 	addi	r20,r20,48
    3ea4:	a80d883a 	mov	r6,r21
    3ea8:	980f883a 	mov	r7,r19
    3eac:	1009883a 	mov	r4,r2
    3eb0:	180b883a 	mov	r5,r3
    3eb4:	95000005 	stb	r20,0(r18)
    3eb8:	1021883a 	mov	r16,r2
    3ebc:	1823883a 	mov	r17,r3
    3ec0:	000c5f00 	call	c5f0 <__ledf2>
    3ec4:	bdc00044 	addi	r23,r23,1
    3ec8:	800d883a 	mov	r6,r16
    3ecc:	880f883a 	mov	r7,r17
    3ed0:	0009883a 	mov	r4,zero
    3ed4:	014ffc34 	movhi	r5,16368
    3ed8:	103fcf0e 	bge	r2,zero,3e18 <_dtoa_r+0x5dc>
    3edc:	d8c01317 	ldw	r3,76(sp)
    3ee0:	d8c00515 	stw	r3,20(sp)
    3ee4:	d9400917 	ldw	r5,36(sp)
    3ee8:	e009883a 	mov	r4,fp
    3eec:	0006f800 	call	6f80 <_Bfree>
    3ef0:	d9000517 	ldw	r4,20(sp)
    3ef4:	d9802317 	ldw	r6,140(sp)
    3ef8:	d9c02517 	ldw	r7,148(sp)
    3efc:	b8000005 	stb	zero,0(r23)
    3f00:	20800044 	addi	r2,r4,1
    3f04:	30800015 	stw	r2,0(r6)
    3f08:	3802aa26 	beq	r7,zero,49b4 <_dtoa_r+0x1178>
    3f0c:	3dc00015 	stw	r23,0(r7)
    3f10:	d8800717 	ldw	r2,28(sp)
    3f14:	003e7906 	br	38fc <_dtoa_r+0xc0>
    3f18:	00800434 	movhi	r2,16
    3f1c:	10bfffc4 	addi	r2,r2,-1
    3f20:	88a2703a 	and	r17,r17,r2
    3f24:	883e851e 	bne	r17,zero,393c <_dtoa_r+0x100>
    3f28:	008000b4 	movhi	r2,2
    3f2c:	10a8b404 	addi	r2,r2,-23856
    3f30:	003e8406 	br	3944 <_dtoa_r+0x108>
    3f34:	10c00204 	addi	r3,r2,8
    3f38:	003e8706 	br	3958 <_dtoa_r+0x11c>
    3f3c:	01400434 	movhi	r5,16
    3f40:	297fffc4 	addi	r5,r5,-1
    3f44:	994a703a 	and	r5,r19,r5
    3f48:	9009883a 	mov	r4,r18
    3f4c:	843f0044 	addi	r16,r16,-1023
    3f50:	294ffc34 	orhi	r5,r5,16368
    3f54:	dd800217 	ldw	r22,8(sp)
    3f58:	d8001115 	stw	zero,68(sp)
    3f5c:	003ea506 	br	39f4 <_dtoa_r+0x1b8>
    3f60:	008000b4 	movhi	r2,2
    3f64:	10a8ab04 	addi	r2,r2,-23892
    3f68:	003e6406 	br	38fc <_dtoa_r+0xc0>
    3f6c:	e0001115 	stw	zero,68(fp)
    3f70:	000b883a 	mov	r5,zero
    3f74:	e009883a 	mov	r4,fp
    3f78:	0006ed80 	call	6ed8 <_Balloc>
    3f7c:	01bfffc4 	movi	r6,-1
    3f80:	01c00044 	movi	r7,1
    3f84:	d8800715 	stw	r2,28(sp)
    3f88:	d9800c15 	stw	r6,48(sp)
    3f8c:	e0801015 	stw	r2,64(fp)
    3f90:	d8000315 	stw	zero,12(sp)
    3f94:	d9c00b15 	stw	r7,44(sp)
    3f98:	d9800615 	stw	r6,24(sp)
    3f9c:	d8002215 	stw	zero,136(sp)
    3fa0:	d8800117 	ldw	r2,4(sp)
    3fa4:	10008916 	blt	r2,zero,41cc <_dtoa_r+0x990>
    3fa8:	d9000517 	ldw	r4,20(sp)
    3fac:	00c00384 	movi	r3,14
    3fb0:	19008616 	blt	r3,r4,41cc <_dtoa_r+0x990>
    3fb4:	200490fa 	slli	r2,r4,3
    3fb8:	00c000b4 	movhi	r3,2
    3fbc:	d9802217 	ldw	r6,136(sp)
    3fc0:	18e8d204 	addi	r3,r3,-23736
    3fc4:	1885883a 	add	r2,r3,r2
    3fc8:	14000017 	ldw	r16,0(r2)
    3fcc:	14400117 	ldw	r17,4(r2)
    3fd0:	30016316 	blt	r6,zero,4560 <_dtoa_r+0xd24>
    3fd4:	800d883a 	mov	r6,r16
    3fd8:	880f883a 	mov	r7,r17
    3fdc:	9009883a 	mov	r4,r18
    3fe0:	980b883a 	mov	r5,r19
    3fe4:	000bba40 	call	bba4 <__divdf3>
    3fe8:	180b883a 	mov	r5,r3
    3fec:	1009883a 	mov	r4,r2
    3ff0:	000d6f80 	call	d6f8 <__fixdfsi>
    3ff4:	1009883a 	mov	r4,r2
    3ff8:	102b883a 	mov	r21,r2
    3ffc:	000d7780 	call	d778 <__floatsidf>
    4000:	800d883a 	mov	r6,r16
    4004:	880f883a 	mov	r7,r17
    4008:	1009883a 	mov	r4,r2
    400c:	180b883a 	mov	r5,r3
    4010:	000c6e40 	call	c6e4 <__muldf3>
    4014:	100d883a 	mov	r6,r2
    4018:	180f883a 	mov	r7,r3
    401c:	9009883a 	mov	r4,r18
    4020:	980b883a 	mov	r5,r19
    4024:	000cdfc0 	call	cdfc <__subdf3>
    4028:	d9c00717 	ldw	r7,28(sp)
    402c:	1009883a 	mov	r4,r2
    4030:	a8800c04 	addi	r2,r21,48
    4034:	38800005 	stb	r2,0(r7)
    4038:	3dc00044 	addi	r23,r7,1
    403c:	d9c00617 	ldw	r7,24(sp)
    4040:	01800044 	movi	r6,1
    4044:	180b883a 	mov	r5,r3
    4048:	2005883a 	mov	r2,r4
    404c:	39803826 	beq	r7,r6,4130 <_dtoa_r+0x8f4>
    4050:	000d883a 	mov	r6,zero
    4054:	01d00934 	movhi	r7,16420
    4058:	000c6e40 	call	c6e4 <__muldf3>
    405c:	000d883a 	mov	r6,zero
    4060:	000f883a 	mov	r7,zero
    4064:	1009883a 	mov	r4,r2
    4068:	180b883a 	mov	r5,r3
    406c:	1025883a 	mov	r18,r2
    4070:	1827883a 	mov	r19,r3
    4074:	000c48c0 	call	c48c <__eqdf2>
    4078:	103f9a26 	beq	r2,zero,3ee4 <_dtoa_r+0x6a8>
    407c:	d9c00617 	ldw	r7,24(sp)
    4080:	d8c00717 	ldw	r3,28(sp)
    4084:	b829883a 	mov	r20,r23
    4088:	38bfffc4 	addi	r2,r7,-1
    408c:	18ad883a 	add	r22,r3,r2
    4090:	00000a06 	br	40bc <_dtoa_r+0x880>
    4094:	000c6e40 	call	c6e4 <__muldf3>
    4098:	000d883a 	mov	r6,zero
    409c:	000f883a 	mov	r7,zero
    40a0:	1009883a 	mov	r4,r2
    40a4:	180b883a 	mov	r5,r3
    40a8:	1025883a 	mov	r18,r2
    40ac:	1827883a 	mov	r19,r3
    40b0:	b829883a 	mov	r20,r23
    40b4:	000c48c0 	call	c48c <__eqdf2>
    40b8:	103f8a26 	beq	r2,zero,3ee4 <_dtoa_r+0x6a8>
    40bc:	800d883a 	mov	r6,r16
    40c0:	880f883a 	mov	r7,r17
    40c4:	9009883a 	mov	r4,r18
    40c8:	980b883a 	mov	r5,r19
    40cc:	000bba40 	call	bba4 <__divdf3>
    40d0:	180b883a 	mov	r5,r3
    40d4:	1009883a 	mov	r4,r2
    40d8:	000d6f80 	call	d6f8 <__fixdfsi>
    40dc:	1009883a 	mov	r4,r2
    40e0:	102b883a 	mov	r21,r2
    40e4:	000d7780 	call	d778 <__floatsidf>
    40e8:	800d883a 	mov	r6,r16
    40ec:	880f883a 	mov	r7,r17
    40f0:	1009883a 	mov	r4,r2
    40f4:	180b883a 	mov	r5,r3
    40f8:	000c6e40 	call	c6e4 <__muldf3>
    40fc:	100d883a 	mov	r6,r2
    4100:	180f883a 	mov	r7,r3
    4104:	9009883a 	mov	r4,r18
    4108:	980b883a 	mov	r5,r19
    410c:	000cdfc0 	call	cdfc <__subdf3>
    4110:	aa000c04 	addi	r8,r21,48
    4114:	a2000005 	stb	r8,0(r20)
    4118:	000d883a 	mov	r6,zero
    411c:	01d00934 	movhi	r7,16420
    4120:	1009883a 	mov	r4,r2
    4124:	180b883a 	mov	r5,r3
    4128:	a5c00044 	addi	r23,r20,1
    412c:	b53fd91e 	bne	r22,r20,4094 <_dtoa_r+0x858>
    4130:	100d883a 	mov	r6,r2
    4134:	180f883a 	mov	r7,r3
    4138:	1009883a 	mov	r4,r2
    413c:	180b883a 	mov	r5,r3
    4140:	000b2f80 	call	b2f8 <__adddf3>
    4144:	100d883a 	mov	r6,r2
    4148:	180f883a 	mov	r7,r3
    414c:	8009883a 	mov	r4,r16
    4150:	880b883a 	mov	r5,r17
    4154:	1027883a 	mov	r19,r2
    4158:	1825883a 	mov	r18,r3
    415c:	000c5f00 	call	c5f0 <__ledf2>
    4160:	10000816 	blt	r2,zero,4184 <_dtoa_r+0x948>
    4164:	980d883a 	mov	r6,r19
    4168:	900f883a 	mov	r7,r18
    416c:	8009883a 	mov	r4,r16
    4170:	880b883a 	mov	r5,r17
    4174:	000c48c0 	call	c48c <__eqdf2>
    4178:	103f5a1e 	bne	r2,zero,3ee4 <_dtoa_r+0x6a8>
    417c:	ad40004c 	andi	r21,r21,1
    4180:	a83f5826 	beq	r21,zero,3ee4 <_dtoa_r+0x6a8>
    4184:	bd3fffc3 	ldbu	r20,-1(r23)
    4188:	b8bfffc4 	addi	r2,r23,-1
    418c:	1007883a 	mov	r3,r2
    4190:	01400e44 	movi	r5,57
    4194:	d9800717 	ldw	r6,28(sp)
    4198:	00000506 	br	41b0 <_dtoa_r+0x974>
    419c:	18ffffc4 	addi	r3,r3,-1
    41a0:	11824726 	beq	r2,r6,4ac0 <_dtoa_r+0x1284>
    41a4:	1d000003 	ldbu	r20,0(r3)
    41a8:	102f883a 	mov	r23,r2
    41ac:	10bfffc4 	addi	r2,r2,-1
    41b0:	a1003fcc 	andi	r4,r20,255
    41b4:	2100201c 	xori	r4,r4,128
    41b8:	213fe004 	addi	r4,r4,-128
    41bc:	217ff726 	beq	r4,r5,419c <_dtoa_r+0x960>
    41c0:	a2000044 	addi	r8,r20,1
    41c4:	12000005 	stb	r8,0(r2)
    41c8:	003f4606 	br	3ee4 <_dtoa_r+0x6a8>
    41cc:	d9000b17 	ldw	r4,44(sp)
    41d0:	2000c826 	beq	r4,zero,44f4 <_dtoa_r+0xcb8>
    41d4:	d9800317 	ldw	r6,12(sp)
    41d8:	00c00044 	movi	r3,1
    41dc:	1980f90e 	bge	r3,r6,45c4 <_dtoa_r+0xd88>
    41e0:	d8800617 	ldw	r2,24(sp)
    41e4:	d8c00a17 	ldw	r3,40(sp)
    41e8:	157fffc4 	addi	r21,r2,-1
    41ec:	1d41f316 	blt	r3,r21,49bc <_dtoa_r+0x1180>
    41f0:	1d6bc83a 	sub	r21,r3,r21
    41f4:	d9c00617 	ldw	r7,24(sp)
    41f8:	3802aa16 	blt	r7,zero,4ca4 <_dtoa_r+0x1468>
    41fc:	dd000817 	ldw	r20,32(sp)
    4200:	d8800617 	ldw	r2,24(sp)
    4204:	d8c00817 	ldw	r3,32(sp)
    4208:	01400044 	movi	r5,1
    420c:	e009883a 	mov	r4,fp
    4210:	1887883a 	add	r3,r3,r2
    4214:	d8c00815 	stw	r3,32(sp)
    4218:	b0ad883a 	add	r22,r22,r2
    421c:	00072e40 	call	72e4 <__i2b>
    4220:	1023883a 	mov	r17,r2
    4224:	a0000826 	beq	r20,zero,4248 <_dtoa_r+0xa0c>
    4228:	0580070e 	bge	zero,r22,4248 <_dtoa_r+0xa0c>
    422c:	a005883a 	mov	r2,r20
    4230:	b500b916 	blt	r22,r20,4518 <_dtoa_r+0xcdc>
    4234:	d9000817 	ldw	r4,32(sp)
    4238:	a0a9c83a 	sub	r20,r20,r2
    423c:	b0adc83a 	sub	r22,r22,r2
    4240:	2089c83a 	sub	r4,r4,r2
    4244:	d9000815 	stw	r4,32(sp)
    4248:	d9800a17 	ldw	r6,40(sp)
    424c:	0181810e 	bge	zero,r6,4854 <_dtoa_r+0x1018>
    4250:	d9c00b17 	ldw	r7,44(sp)
    4254:	3800b326 	beq	r7,zero,4524 <_dtoa_r+0xce8>
    4258:	a800b226 	beq	r21,zero,4524 <_dtoa_r+0xce8>
    425c:	880b883a 	mov	r5,r17
    4260:	a80d883a 	mov	r6,r21
    4264:	e009883a 	mov	r4,fp
    4268:	00075180 	call	7518 <__pow5mult>
    426c:	d9800917 	ldw	r6,36(sp)
    4270:	100b883a 	mov	r5,r2
    4274:	e009883a 	mov	r4,fp
    4278:	1023883a 	mov	r17,r2
    427c:	00073200 	call	7320 <__multiply>
    4280:	1021883a 	mov	r16,r2
    4284:	d8800a17 	ldw	r2,40(sp)
    4288:	d9400917 	ldw	r5,36(sp)
    428c:	e009883a 	mov	r4,fp
    4290:	1545c83a 	sub	r2,r2,r21
    4294:	d8800a15 	stw	r2,40(sp)
    4298:	0006f800 	call	6f80 <_Bfree>
    429c:	d8c00a17 	ldw	r3,40(sp)
    42a0:	18009f1e 	bne	r3,zero,4520 <_dtoa_r+0xce4>
    42a4:	05c00044 	movi	r23,1
    42a8:	e009883a 	mov	r4,fp
    42ac:	b80b883a 	mov	r5,r23
    42b0:	00072e40 	call	72e4 <__i2b>
    42b4:	d9000d17 	ldw	r4,52(sp)
    42b8:	102b883a 	mov	r21,r2
    42bc:	2000ce26 	beq	r4,zero,45f8 <_dtoa_r+0xdbc>
    42c0:	200d883a 	mov	r6,r4
    42c4:	100b883a 	mov	r5,r2
    42c8:	e009883a 	mov	r4,fp
    42cc:	00075180 	call	7518 <__pow5mult>
    42d0:	d9800317 	ldw	r6,12(sp)
    42d4:	102b883a 	mov	r21,r2
    42d8:	b981810e 	bge	r23,r6,48e0 <_dtoa_r+0x10a4>
    42dc:	0027883a 	mov	r19,zero
    42e0:	a8800417 	ldw	r2,16(r21)
    42e4:	05c00804 	movi	r23,32
    42e8:	10800104 	addi	r2,r2,4
    42ec:	1085883a 	add	r2,r2,r2
    42f0:	1085883a 	add	r2,r2,r2
    42f4:	a885883a 	add	r2,r21,r2
    42f8:	11000017 	ldw	r4,0(r2)
    42fc:	00071cc0 	call	71cc <__hi0bits>
    4300:	b885c83a 	sub	r2,r23,r2
    4304:	1585883a 	add	r2,r2,r22
    4308:	108007cc 	andi	r2,r2,31
    430c:	1000b326 	beq	r2,zero,45dc <_dtoa_r+0xda0>
    4310:	00c00804 	movi	r3,32
    4314:	1887c83a 	sub	r3,r3,r2
    4318:	01000104 	movi	r4,4
    431c:	20c2cd0e 	bge	r4,r3,4e54 <_dtoa_r+0x1618>
    4320:	00c00704 	movi	r3,28
    4324:	1885c83a 	sub	r2,r3,r2
    4328:	d8c00817 	ldw	r3,32(sp)
    432c:	a0a9883a 	add	r20,r20,r2
    4330:	b0ad883a 	add	r22,r22,r2
    4334:	1887883a 	add	r3,r3,r2
    4338:	d8c00815 	stw	r3,32(sp)
    433c:	d9800817 	ldw	r6,32(sp)
    4340:	0180040e 	bge	zero,r6,4354 <_dtoa_r+0xb18>
    4344:	800b883a 	mov	r5,r16
    4348:	e009883a 	mov	r4,fp
    434c:	00076580 	call	7658 <__lshift>
    4350:	1021883a 	mov	r16,r2
    4354:	0580050e 	bge	zero,r22,436c <_dtoa_r+0xb30>
    4358:	a80b883a 	mov	r5,r21
    435c:	b00d883a 	mov	r6,r22
    4360:	e009883a 	mov	r4,fp
    4364:	00076580 	call	7658 <__lshift>
    4368:	102b883a 	mov	r21,r2
    436c:	d9c00e17 	ldw	r7,56(sp)
    4370:	3801211e 	bne	r7,zero,47f8 <_dtoa_r+0xfbc>
    4374:	d9800617 	ldw	r6,24(sp)
    4378:	0181380e 	bge	zero,r6,485c <_dtoa_r+0x1020>
    437c:	d8c00b17 	ldw	r3,44(sp)
    4380:	1800ab1e 	bne	r3,zero,4630 <_dtoa_r+0xdf4>
    4384:	dc800717 	ldw	r18,28(sp)
    4388:	dcc00617 	ldw	r19,24(sp)
    438c:	9029883a 	mov	r20,r18
    4390:	00000206 	br	439c <_dtoa_r+0xb60>
    4394:	0006fa80 	call	6fa8 <__multadd>
    4398:	1021883a 	mov	r16,r2
    439c:	a80b883a 	mov	r5,r21
    43a0:	8009883a 	mov	r4,r16
    43a4:	000363c0 	call	363c <quorem>
    43a8:	10800c04 	addi	r2,r2,48
    43ac:	90800005 	stb	r2,0(r18)
    43b0:	94800044 	addi	r18,r18,1
    43b4:	9507c83a 	sub	r3,r18,r20
    43b8:	000f883a 	mov	r7,zero
    43bc:	01800284 	movi	r6,10
    43c0:	800b883a 	mov	r5,r16
    43c4:	e009883a 	mov	r4,fp
    43c8:	1cfff216 	blt	r3,r19,4394 <_dtoa_r+0xb58>
    43cc:	1011883a 	mov	r8,r2
    43d0:	d8800617 	ldw	r2,24(sp)
    43d4:	0082370e 	bge	zero,r2,4cb4 <_dtoa_r+0x1478>
    43d8:	d9000717 	ldw	r4,28(sp)
    43dc:	0025883a 	mov	r18,zero
    43e0:	20af883a 	add	r23,r4,r2
    43e4:	01800044 	movi	r6,1
    43e8:	800b883a 	mov	r5,r16
    43ec:	e009883a 	mov	r4,fp
    43f0:	da001715 	stw	r8,92(sp)
    43f4:	00076580 	call	7658 <__lshift>
    43f8:	a80b883a 	mov	r5,r21
    43fc:	1009883a 	mov	r4,r2
    4400:	d8800915 	stw	r2,36(sp)
    4404:	00077a00 	call	77a0 <__mcmp>
    4408:	da001717 	ldw	r8,92(sp)
    440c:	0081800e 	bge	zero,r2,4a10 <_dtoa_r+0x11d4>
    4410:	b93fffc3 	ldbu	r4,-1(r23)
    4414:	b8bfffc4 	addi	r2,r23,-1
    4418:	1007883a 	mov	r3,r2
    441c:	01800e44 	movi	r6,57
    4420:	d9c00717 	ldw	r7,28(sp)
    4424:	00000506 	br	443c <_dtoa_r+0xc00>
    4428:	18ffffc4 	addi	r3,r3,-1
    442c:	11c12326 	beq	r2,r7,48bc <_dtoa_r+0x1080>
    4430:	19000003 	ldbu	r4,0(r3)
    4434:	102f883a 	mov	r23,r2
    4438:	10bfffc4 	addi	r2,r2,-1
    443c:	21403fcc 	andi	r5,r4,255
    4440:	2940201c 	xori	r5,r5,128
    4444:	297fe004 	addi	r5,r5,-128
    4448:	29bff726 	beq	r5,r6,4428 <_dtoa_r+0xbec>
    444c:	21000044 	addi	r4,r4,1
    4450:	11000005 	stb	r4,0(r2)
    4454:	a80b883a 	mov	r5,r21
    4458:	e009883a 	mov	r4,fp
    445c:	0006f800 	call	6f80 <_Bfree>
    4460:	883ea026 	beq	r17,zero,3ee4 <_dtoa_r+0x6a8>
    4464:	90000426 	beq	r18,zero,4478 <_dtoa_r+0xc3c>
    4468:	94400326 	beq	r18,r17,4478 <_dtoa_r+0xc3c>
    446c:	900b883a 	mov	r5,r18
    4470:	e009883a 	mov	r4,fp
    4474:	0006f800 	call	6f80 <_Bfree>
    4478:	880b883a 	mov	r5,r17
    447c:	e009883a 	mov	r4,fp
    4480:	0006f800 	call	6f80 <_Bfree>
    4484:	003e9706 	br	3ee4 <_dtoa_r+0x6a8>
    4488:	01800044 	movi	r6,1
    448c:	d9800e15 	stw	r6,56(sp)
    4490:	003d9606 	br	3aec <_dtoa_r+0x2b0>
    4494:	d8800817 	ldw	r2,32(sp)
    4498:	d8c00517 	ldw	r3,20(sp)
    449c:	d8000d15 	stw	zero,52(sp)
    44a0:	10c5c83a 	sub	r2,r2,r3
    44a4:	00c9c83a 	sub	r4,zero,r3
    44a8:	d8800815 	stw	r2,32(sp)
    44ac:	d9000a15 	stw	r4,40(sp)
    44b0:	003d9706 	br	3b10 <_dtoa_r+0x2d4>
    44b4:	05adc83a 	sub	r22,zero,r22
    44b8:	dd800815 	stw	r22,32(sp)
    44bc:	002d883a 	mov	r22,zero
    44c0:	003d8e06 	br	3afc <_dtoa_r+0x2c0>
    44c4:	d9000517 	ldw	r4,20(sp)
    44c8:	000d7780 	call	d778 <__floatsidf>
    44cc:	100d883a 	mov	r6,r2
    44d0:	180f883a 	mov	r7,r3
    44d4:	a009883a 	mov	r4,r20
    44d8:	880b883a 	mov	r5,r17
    44dc:	000c48c0 	call	c48c <__eqdf2>
    44e0:	103d7126 	beq	r2,zero,3aa8 <_dtoa_r+0x26c>
    44e4:	d9c00517 	ldw	r7,20(sp)
    44e8:	39ffffc4 	addi	r7,r7,-1
    44ec:	d9c00515 	stw	r7,20(sp)
    44f0:	003d6d06 	br	3aa8 <_dtoa_r+0x26c>
    44f4:	dd400a17 	ldw	r21,40(sp)
    44f8:	dd000817 	ldw	r20,32(sp)
    44fc:	0023883a 	mov	r17,zero
    4500:	003f4806 	br	4224 <_dtoa_r+0x9e8>
    4504:	10e3c83a 	sub	r17,r2,r3
    4508:	9448983a 	sll	r4,r18,r17
    450c:	003d3206 	br	39d8 <_dtoa_r+0x19c>
    4510:	d8000e15 	stw	zero,56(sp)
    4514:	003d7506 	br	3aec <_dtoa_r+0x2b0>
    4518:	b005883a 	mov	r2,r22
    451c:	003f4506 	br	4234 <_dtoa_r+0x9f8>
    4520:	dc000915 	stw	r16,36(sp)
    4524:	d9800a17 	ldw	r6,40(sp)
    4528:	d9400917 	ldw	r5,36(sp)
    452c:	e009883a 	mov	r4,fp
    4530:	00075180 	call	7518 <__pow5mult>
    4534:	1021883a 	mov	r16,r2
    4538:	003f5a06 	br	42a4 <_dtoa_r+0xa68>
    453c:	01c00044 	movi	r7,1
    4540:	d9c00b15 	stw	r7,44(sp)
    4544:	d8802217 	ldw	r2,136(sp)
    4548:	0081280e 	bge	zero,r2,49ec <_dtoa_r+0x11b0>
    454c:	100d883a 	mov	r6,r2
    4550:	1021883a 	mov	r16,r2
    4554:	d8800c15 	stw	r2,48(sp)
    4558:	d8800615 	stw	r2,24(sp)
    455c:	003d8806 	br	3b80 <_dtoa_r+0x344>
    4560:	d8800617 	ldw	r2,24(sp)
    4564:	00be9b16 	blt	zero,r2,3fd4 <_dtoa_r+0x798>
    4568:	10010f1e 	bne	r2,zero,49a8 <_dtoa_r+0x116c>
    456c:	880b883a 	mov	r5,r17
    4570:	000d883a 	mov	r6,zero
    4574:	01d00534 	movhi	r7,16404
    4578:	8009883a 	mov	r4,r16
    457c:	000c6e40 	call	c6e4 <__muldf3>
    4580:	900d883a 	mov	r6,r18
    4584:	980f883a 	mov	r7,r19
    4588:	1009883a 	mov	r4,r2
    458c:	180b883a 	mov	r5,r3
    4590:	000c5140 	call	c514 <__gedf2>
    4594:	002b883a 	mov	r21,zero
    4598:	0023883a 	mov	r17,zero
    459c:	1000bf16 	blt	r2,zero,489c <_dtoa_r+0x1060>
    45a0:	d9802217 	ldw	r6,136(sp)
    45a4:	ddc00717 	ldw	r23,28(sp)
    45a8:	018c303a 	nor	r6,zero,r6
    45ac:	d9800515 	stw	r6,20(sp)
    45b0:	a80b883a 	mov	r5,r21
    45b4:	e009883a 	mov	r4,fp
    45b8:	0006f800 	call	6f80 <_Bfree>
    45bc:	883e4926 	beq	r17,zero,3ee4 <_dtoa_r+0x6a8>
    45c0:	003fad06 	br	4478 <_dtoa_r+0xc3c>
    45c4:	d9c01117 	ldw	r7,68(sp)
    45c8:	3801bc26 	beq	r7,zero,4cbc <_dtoa_r+0x1480>
    45cc:	10810cc4 	addi	r2,r2,1075
    45d0:	dd400a17 	ldw	r21,40(sp)
    45d4:	dd000817 	ldw	r20,32(sp)
    45d8:	003f0a06 	br	4204 <_dtoa_r+0x9c8>
    45dc:	00800704 	movi	r2,28
    45e0:	d9000817 	ldw	r4,32(sp)
    45e4:	a0a9883a 	add	r20,r20,r2
    45e8:	b0ad883a 	add	r22,r22,r2
    45ec:	2089883a 	add	r4,r4,r2
    45f0:	d9000815 	stw	r4,32(sp)
    45f4:	003f5106 	br	433c <_dtoa_r+0xb00>
    45f8:	d8c00317 	ldw	r3,12(sp)
    45fc:	b8c1fc0e 	bge	r23,r3,4df0 <_dtoa_r+0x15b4>
    4600:	0027883a 	mov	r19,zero
    4604:	b805883a 	mov	r2,r23
    4608:	003f3e06 	br	4304 <_dtoa_r+0xac8>
    460c:	880b883a 	mov	r5,r17
    4610:	e009883a 	mov	r4,fp
    4614:	000f883a 	mov	r7,zero
    4618:	01800284 	movi	r6,10
    461c:	0006fa80 	call	6fa8 <__multadd>
    4620:	d9000c17 	ldw	r4,48(sp)
    4624:	1023883a 	mov	r17,r2
    4628:	0102040e 	bge	zero,r4,4e3c <_dtoa_r+0x1600>
    462c:	d9000615 	stw	r4,24(sp)
    4630:	0500050e 	bge	zero,r20,4648 <_dtoa_r+0xe0c>
    4634:	880b883a 	mov	r5,r17
    4638:	a00d883a 	mov	r6,r20
    463c:	e009883a 	mov	r4,fp
    4640:	00076580 	call	7658 <__lshift>
    4644:	1023883a 	mov	r17,r2
    4648:	9801241e 	bne	r19,zero,4adc <_dtoa_r+0x12a0>
    464c:	8829883a 	mov	r20,r17
    4650:	d9000617 	ldw	r4,24(sp)
    4654:	dcc00717 	ldw	r19,28(sp)
    4658:	9480004c 	andi	r18,r18,1
    465c:	20bfffc4 	addi	r2,r4,-1
    4660:	9885883a 	add	r2,r19,r2
    4664:	d8800415 	stw	r2,16(sp)
    4668:	dc800615 	stw	r18,24(sp)
    466c:	a80b883a 	mov	r5,r21
    4670:	8009883a 	mov	r4,r16
    4674:	000363c0 	call	363c <quorem>
    4678:	880b883a 	mov	r5,r17
    467c:	8009883a 	mov	r4,r16
    4680:	102f883a 	mov	r23,r2
    4684:	00077a00 	call	77a0 <__mcmp>
    4688:	a80b883a 	mov	r5,r21
    468c:	a00d883a 	mov	r6,r20
    4690:	e009883a 	mov	r4,fp
    4694:	102d883a 	mov	r22,r2
    4698:	00078000 	call	7800 <__mdiff>
    469c:	1007883a 	mov	r3,r2
    46a0:	10800317 	ldw	r2,12(r2)
    46a4:	bc800c04 	addi	r18,r23,48
    46a8:	180b883a 	mov	r5,r3
    46ac:	10004e1e 	bne	r2,zero,47e8 <_dtoa_r+0xfac>
    46b0:	8009883a 	mov	r4,r16
    46b4:	d8c01615 	stw	r3,88(sp)
    46b8:	00077a00 	call	77a0 <__mcmp>
    46bc:	d8c01617 	ldw	r3,88(sp)
    46c0:	e009883a 	mov	r4,fp
    46c4:	d8801615 	stw	r2,88(sp)
    46c8:	180b883a 	mov	r5,r3
    46cc:	0006f800 	call	6f80 <_Bfree>
    46d0:	d8801617 	ldw	r2,88(sp)
    46d4:	1000041e 	bne	r2,zero,46e8 <_dtoa_r+0xeac>
    46d8:	d9800317 	ldw	r6,12(sp)
    46dc:	3000021e 	bne	r6,zero,46e8 <_dtoa_r+0xeac>
    46e0:	d8c00617 	ldw	r3,24(sp)
    46e4:	18003726 	beq	r3,zero,47c4 <_dtoa_r+0xf88>
    46e8:	b0002016 	blt	r22,zero,476c <_dtoa_r+0xf30>
    46ec:	b000041e 	bne	r22,zero,4700 <_dtoa_r+0xec4>
    46f0:	d9000317 	ldw	r4,12(sp)
    46f4:	2000021e 	bne	r4,zero,4700 <_dtoa_r+0xec4>
    46f8:	d8c00617 	ldw	r3,24(sp)
    46fc:	18001b26 	beq	r3,zero,476c <_dtoa_r+0xf30>
    4700:	00810716 	blt	zero,r2,4b20 <_dtoa_r+0x12e4>
    4704:	d8c00417 	ldw	r3,16(sp)
    4708:	9d800044 	addi	r22,r19,1
    470c:	9c800005 	stb	r18,0(r19)
    4710:	b02f883a 	mov	r23,r22
    4714:	98c10626 	beq	r19,r3,4b30 <_dtoa_r+0x12f4>
    4718:	800b883a 	mov	r5,r16
    471c:	000f883a 	mov	r7,zero
    4720:	01800284 	movi	r6,10
    4724:	e009883a 	mov	r4,fp
    4728:	0006fa80 	call	6fa8 <__multadd>
    472c:	1021883a 	mov	r16,r2
    4730:	000f883a 	mov	r7,zero
    4734:	01800284 	movi	r6,10
    4738:	880b883a 	mov	r5,r17
    473c:	e009883a 	mov	r4,fp
    4740:	8d002526 	beq	r17,r20,47d8 <_dtoa_r+0xf9c>
    4744:	0006fa80 	call	6fa8 <__multadd>
    4748:	a00b883a 	mov	r5,r20
    474c:	000f883a 	mov	r7,zero
    4750:	01800284 	movi	r6,10
    4754:	e009883a 	mov	r4,fp
    4758:	1023883a 	mov	r17,r2
    475c:	0006fa80 	call	6fa8 <__multadd>
    4760:	1029883a 	mov	r20,r2
    4764:	b027883a 	mov	r19,r22
    4768:	003fc006 	br	466c <_dtoa_r+0xe30>
    476c:	9011883a 	mov	r8,r18
    4770:	00800e0e 	bge	zero,r2,47ac <_dtoa_r+0xf70>
    4774:	800b883a 	mov	r5,r16
    4778:	01800044 	movi	r6,1
    477c:	e009883a 	mov	r4,fp
    4780:	da001715 	stw	r8,92(sp)
    4784:	00076580 	call	7658 <__lshift>
    4788:	a80b883a 	mov	r5,r21
    478c:	1009883a 	mov	r4,r2
    4790:	1021883a 	mov	r16,r2
    4794:	00077a00 	call	77a0 <__mcmp>
    4798:	da001717 	ldw	r8,92(sp)
    479c:	0081960e 	bge	zero,r2,4df8 <_dtoa_r+0x15bc>
    47a0:	00800e44 	movi	r2,57
    47a4:	40817026 	beq	r8,r2,4d68 <_dtoa_r+0x152c>
    47a8:	ba000c44 	addi	r8,r23,49
    47ac:	8825883a 	mov	r18,r17
    47b0:	9dc00044 	addi	r23,r19,1
    47b4:	9a000005 	stb	r8,0(r19)
    47b8:	a023883a 	mov	r17,r20
    47bc:	dc000915 	stw	r16,36(sp)
    47c0:	003f2406 	br	4454 <_dtoa_r+0xc18>
    47c4:	00800e44 	movi	r2,57
    47c8:	9011883a 	mov	r8,r18
    47cc:	90816626 	beq	r18,r2,4d68 <_dtoa_r+0x152c>
    47d0:	05bff516 	blt	zero,r22,47a8 <_dtoa_r+0xf6c>
    47d4:	003ff506 	br	47ac <_dtoa_r+0xf70>
    47d8:	0006fa80 	call	6fa8 <__multadd>
    47dc:	1023883a 	mov	r17,r2
    47e0:	1029883a 	mov	r20,r2
    47e4:	003fdf06 	br	4764 <_dtoa_r+0xf28>
    47e8:	e009883a 	mov	r4,fp
    47ec:	0006f800 	call	6f80 <_Bfree>
    47f0:	00800044 	movi	r2,1
    47f4:	003fbc06 	br	46e8 <_dtoa_r+0xeac>
    47f8:	a80b883a 	mov	r5,r21
    47fc:	8009883a 	mov	r4,r16
    4800:	00077a00 	call	77a0 <__mcmp>
    4804:	103edb0e 	bge	r2,zero,4374 <_dtoa_r+0xb38>
    4808:	800b883a 	mov	r5,r16
    480c:	000f883a 	mov	r7,zero
    4810:	01800284 	movi	r6,10
    4814:	e009883a 	mov	r4,fp
    4818:	0006fa80 	call	6fa8 <__multadd>
    481c:	1021883a 	mov	r16,r2
    4820:	d8800517 	ldw	r2,20(sp)
    4824:	d8c00b17 	ldw	r3,44(sp)
    4828:	10bfffc4 	addi	r2,r2,-1
    482c:	d8800515 	stw	r2,20(sp)
    4830:	183f761e 	bne	r3,zero,460c <_dtoa_r+0xdd0>
    4834:	d9000c17 	ldw	r4,48(sp)
    4838:	0101730e 	bge	zero,r4,4e08 <_dtoa_r+0x15cc>
    483c:	d9000615 	stw	r4,24(sp)
    4840:	003ed006 	br	4384 <_dtoa_r+0xb48>
    4844:	00800084 	movi	r2,2
    4848:	3081861e 	bne	r6,r2,4e64 <_dtoa_r+0x1628>
    484c:	d8000b15 	stw	zero,44(sp)
    4850:	003f3c06 	br	4544 <_dtoa_r+0xd08>
    4854:	dc000917 	ldw	r16,36(sp)
    4858:	003e9206 	br	42a4 <_dtoa_r+0xa68>
    485c:	d9c00317 	ldw	r7,12(sp)
    4860:	00800084 	movi	r2,2
    4864:	11fec50e 	bge	r2,r7,437c <_dtoa_r+0xb40>
    4868:	d9000617 	ldw	r4,24(sp)
    486c:	20013c1e 	bne	r4,zero,4d60 <_dtoa_r+0x1524>
    4870:	a80b883a 	mov	r5,r21
    4874:	000f883a 	mov	r7,zero
    4878:	01800144 	movi	r6,5
    487c:	e009883a 	mov	r4,fp
    4880:	0006fa80 	call	6fa8 <__multadd>
    4884:	100b883a 	mov	r5,r2
    4888:	8009883a 	mov	r4,r16
    488c:	102b883a 	mov	r21,r2
    4890:	00077a00 	call	77a0 <__mcmp>
    4894:	dc000915 	stw	r16,36(sp)
    4898:	00bf410e 	bge	zero,r2,45a0 <_dtoa_r+0xd64>
    489c:	d9c00717 	ldw	r7,28(sp)
    48a0:	00800c44 	movi	r2,49
    48a4:	38800005 	stb	r2,0(r7)
    48a8:	d8800517 	ldw	r2,20(sp)
    48ac:	3dc00044 	addi	r23,r7,1
    48b0:	10800044 	addi	r2,r2,1
    48b4:	d8800515 	stw	r2,20(sp)
    48b8:	003f3d06 	br	45b0 <_dtoa_r+0xd74>
    48bc:	d9800517 	ldw	r6,20(sp)
    48c0:	d9c00717 	ldw	r7,28(sp)
    48c4:	00800c44 	movi	r2,49
    48c8:	31800044 	addi	r6,r6,1
    48cc:	d9800515 	stw	r6,20(sp)
    48d0:	38800005 	stb	r2,0(r7)
    48d4:	003edf06 	br	4454 <_dtoa_r+0xc18>
    48d8:	d8000b15 	stw	zero,44(sp)
    48dc:	003c9f06 	br	3b5c <_dtoa_r+0x320>
    48e0:	903e7e1e 	bne	r18,zero,42dc <_dtoa_r+0xaa0>
    48e4:	00800434 	movhi	r2,16
    48e8:	10bfffc4 	addi	r2,r2,-1
    48ec:	9884703a 	and	r2,r19,r2
    48f0:	1000ea1e 	bne	r2,zero,4c9c <_dtoa_r+0x1460>
    48f4:	9cdffc2c 	andhi	r19,r19,32752
    48f8:	9800e826 	beq	r19,zero,4c9c <_dtoa_r+0x1460>
    48fc:	d9c00817 	ldw	r7,32(sp)
    4900:	b5800044 	addi	r22,r22,1
    4904:	04c00044 	movi	r19,1
    4908:	39c00044 	addi	r7,r7,1
    490c:	d9c00815 	stw	r7,32(sp)
    4910:	d8800d17 	ldw	r2,52(sp)
    4914:	103e721e 	bne	r2,zero,42e0 <_dtoa_r+0xaa4>
    4918:	00800044 	movi	r2,1
    491c:	003e7906 	br	4304 <_dtoa_r+0xac8>
    4920:	8009883a 	mov	r4,r16
    4924:	000d7780 	call	d778 <__floatsidf>
    4928:	d9800f17 	ldw	r6,60(sp)
    492c:	d9c01017 	ldw	r7,64(sp)
    4930:	1009883a 	mov	r4,r2
    4934:	180b883a 	mov	r5,r3
    4938:	000c6e40 	call	c6e4 <__muldf3>
    493c:	000d883a 	mov	r6,zero
    4940:	01d00734 	movhi	r7,16412
    4944:	1009883a 	mov	r4,r2
    4948:	180b883a 	mov	r5,r3
    494c:	000b2f80 	call	b2f8 <__adddf3>
    4950:	047f3034 	movhi	r17,64704
    4954:	1021883a 	mov	r16,r2
    4958:	1c63883a 	add	r17,r3,r17
    495c:	d9000f17 	ldw	r4,60(sp)
    4960:	d9401017 	ldw	r5,64(sp)
    4964:	000d883a 	mov	r6,zero
    4968:	01d00534 	movhi	r7,16404
    496c:	000cdfc0 	call	cdfc <__subdf3>
    4970:	800d883a 	mov	r6,r16
    4974:	880f883a 	mov	r7,r17
    4978:	1009883a 	mov	r4,r2
    497c:	180b883a 	mov	r5,r3
    4980:	102b883a 	mov	r21,r2
    4984:	1829883a 	mov	r20,r3
    4988:	000c5140 	call	c514 <__gedf2>
    498c:	00806c16 	blt	zero,r2,4b40 <_dtoa_r+0x1304>
    4990:	89e0003c 	xorhi	r7,r17,32768
    4994:	800d883a 	mov	r6,r16
    4998:	a809883a 	mov	r4,r21
    499c:	a00b883a 	mov	r5,r20
    49a0:	000c5f00 	call	c5f0 <__ledf2>
    49a4:	103d7e0e 	bge	r2,zero,3fa0 <_dtoa_r+0x764>
    49a8:	002b883a 	mov	r21,zero
    49ac:	0023883a 	mov	r17,zero
    49b0:	003efb06 	br	45a0 <_dtoa_r+0xd64>
    49b4:	d8800717 	ldw	r2,28(sp)
    49b8:	003bd006 	br	38fc <_dtoa_r+0xc0>
    49bc:	d9000a17 	ldw	r4,40(sp)
    49c0:	d9800d17 	ldw	r6,52(sp)
    49c4:	dd400a15 	stw	r21,40(sp)
    49c8:	a905c83a 	sub	r2,r21,r4
    49cc:	308d883a 	add	r6,r6,r2
    49d0:	d9800d15 	stw	r6,52(sp)
    49d4:	002b883a 	mov	r21,zero
    49d8:	003e0606 	br	41f4 <_dtoa_r+0x9b8>
    49dc:	9023883a 	mov	r17,r18
    49e0:	9829883a 	mov	r20,r19
    49e4:	04000084 	movi	r16,2
    49e8:	003c9206 	br	3c34 <_dtoa_r+0x3f8>
    49ec:	04000044 	movi	r16,1
    49f0:	dc000c15 	stw	r16,48(sp)
    49f4:	dc000615 	stw	r16,24(sp)
    49f8:	dc002215 	stw	r16,136(sp)
    49fc:	e0001115 	stw	zero,68(fp)
    4a00:	000b883a 	mov	r5,zero
    4a04:	003c6906 	br	3bac <_dtoa_r+0x370>
    4a08:	3021883a 	mov	r16,r6
    4a0c:	003ffb06 	br	49fc <_dtoa_r+0x11c0>
    4a10:	1000021e 	bne	r2,zero,4a1c <_dtoa_r+0x11e0>
    4a14:	4200004c 	andi	r8,r8,1
    4a18:	403e7d1e 	bne	r8,zero,4410 <_dtoa_r+0xbd4>
    4a1c:	01000c04 	movi	r4,48
    4a20:	00000106 	br	4a28 <_dtoa_r+0x11ec>
    4a24:	102f883a 	mov	r23,r2
    4a28:	b8bfffc4 	addi	r2,r23,-1
    4a2c:	10c00007 	ldb	r3,0(r2)
    4a30:	193ffc26 	beq	r3,r4,4a24 <_dtoa_r+0x11e8>
    4a34:	003e8706 	br	4454 <_dtoa_r+0xc18>
    4a38:	d8800517 	ldw	r2,20(sp)
    4a3c:	00a3c83a 	sub	r17,zero,r2
    4a40:	8800a426 	beq	r17,zero,4cd4 <_dtoa_r+0x1498>
    4a44:	888003cc 	andi	r2,r17,15
    4a48:	100490fa 	slli	r2,r2,3
    4a4c:	00c000b4 	movhi	r3,2
    4a50:	18e8d204 	addi	r3,r3,-23736
    4a54:	1885883a 	add	r2,r3,r2
    4a58:	11800017 	ldw	r6,0(r2)
    4a5c:	11c00117 	ldw	r7,4(r2)
    4a60:	9009883a 	mov	r4,r18
    4a64:	980b883a 	mov	r5,r19
    4a68:	8823d13a 	srai	r17,r17,4
    4a6c:	000c6e40 	call	c6e4 <__muldf3>
    4a70:	d8800f15 	stw	r2,60(sp)
    4a74:	d8c01015 	stw	r3,64(sp)
    4a78:	8800e826 	beq	r17,zero,4e1c <_dtoa_r+0x15e0>
    4a7c:	050000b4 	movhi	r20,2
    4a80:	a528c804 	addi	r20,r20,-23776
    4a84:	04000084 	movi	r16,2
    4a88:	8980004c 	andi	r6,r17,1
    4a8c:	1009883a 	mov	r4,r2
    4a90:	8823d07a 	srai	r17,r17,1
    4a94:	180b883a 	mov	r5,r3
    4a98:	30000426 	beq	r6,zero,4aac <_dtoa_r+0x1270>
    4a9c:	a1800017 	ldw	r6,0(r20)
    4aa0:	a1c00117 	ldw	r7,4(r20)
    4aa4:	84000044 	addi	r16,r16,1
    4aa8:	000c6e40 	call	c6e4 <__muldf3>
    4aac:	a5000204 	addi	r20,r20,8
    4ab0:	883ff51e 	bne	r17,zero,4a88 <_dtoa_r+0x124c>
    4ab4:	d8800f15 	stw	r2,60(sp)
    4ab8:	d8c01015 	stw	r3,64(sp)
    4abc:	003c7606 	br	3c98 <_dtoa_r+0x45c>
    4ac0:	00c00c04 	movi	r3,48
    4ac4:	10c00005 	stb	r3,0(r2)
    4ac8:	d8c00517 	ldw	r3,20(sp)
    4acc:	bd3fffc3 	ldbu	r20,-1(r23)
    4ad0:	18c00044 	addi	r3,r3,1
    4ad4:	d8c00515 	stw	r3,20(sp)
    4ad8:	003db906 	br	41c0 <_dtoa_r+0x984>
    4adc:	89400117 	ldw	r5,4(r17)
    4ae0:	e009883a 	mov	r4,fp
    4ae4:	0006ed80 	call	6ed8 <_Balloc>
    4ae8:	89800417 	ldw	r6,16(r17)
    4aec:	89400304 	addi	r5,r17,12
    4af0:	11000304 	addi	r4,r2,12
    4af4:	31800084 	addi	r6,r6,2
    4af8:	318d883a 	add	r6,r6,r6
    4afc:	318d883a 	add	r6,r6,r6
    4b00:	1027883a 	mov	r19,r2
    4b04:	0006b0c0 	call	6b0c <memcpy>
    4b08:	01800044 	movi	r6,1
    4b0c:	980b883a 	mov	r5,r19
    4b10:	e009883a 	mov	r4,fp
    4b14:	00076580 	call	7658 <__lshift>
    4b18:	1029883a 	mov	r20,r2
    4b1c:	003ecc06 	br	4650 <_dtoa_r+0xe14>
    4b20:	00800e44 	movi	r2,57
    4b24:	90809026 	beq	r18,r2,4d68 <_dtoa_r+0x152c>
    4b28:	92000044 	addi	r8,r18,1
    4b2c:	003f1f06 	br	47ac <_dtoa_r+0xf70>
    4b30:	9011883a 	mov	r8,r18
    4b34:	8825883a 	mov	r18,r17
    4b38:	a023883a 	mov	r17,r20
    4b3c:	003e2906 	br	43e4 <_dtoa_r+0xba8>
    4b40:	002b883a 	mov	r21,zero
    4b44:	0023883a 	mov	r17,zero
    4b48:	003f5406 	br	489c <_dtoa_r+0x1060>
    4b4c:	61bfffc4 	addi	r6,r12,-1
    4b50:	300490fa 	slli	r2,r6,3
    4b54:	00c000b4 	movhi	r3,2
    4b58:	18e8d204 	addi	r3,r3,-23736
    4b5c:	1885883a 	add	r2,r3,r2
    4b60:	11000017 	ldw	r4,0(r2)
    4b64:	11400117 	ldw	r5,4(r2)
    4b68:	d8800717 	ldw	r2,28(sp)
    4b6c:	880f883a 	mov	r7,r17
    4b70:	d9801215 	stw	r6,72(sp)
    4b74:	800d883a 	mov	r6,r16
    4b78:	db001615 	stw	r12,88(sp)
    4b7c:	15c00044 	addi	r23,r2,1
    4b80:	000c6e40 	call	c6e4 <__muldf3>
    4b84:	d9401017 	ldw	r5,64(sp)
    4b88:	d9000f17 	ldw	r4,60(sp)
    4b8c:	d8c01515 	stw	r3,84(sp)
    4b90:	d8801415 	stw	r2,80(sp)
    4b94:	000d6f80 	call	d6f8 <__fixdfsi>
    4b98:	1009883a 	mov	r4,r2
    4b9c:	1021883a 	mov	r16,r2
    4ba0:	000d7780 	call	d778 <__floatsidf>
    4ba4:	d9000f17 	ldw	r4,60(sp)
    4ba8:	d9401017 	ldw	r5,64(sp)
    4bac:	100d883a 	mov	r6,r2
    4bb0:	180f883a 	mov	r7,r3
    4bb4:	000cdfc0 	call	cdfc <__subdf3>
    4bb8:	1829883a 	mov	r20,r3
    4bbc:	d8c00717 	ldw	r3,28(sp)
    4bc0:	84000c04 	addi	r16,r16,48
    4bc4:	1023883a 	mov	r17,r2
    4bc8:	1c000005 	stb	r16,0(r3)
    4bcc:	db001617 	ldw	r12,88(sp)
    4bd0:	00800044 	movi	r2,1
    4bd4:	60802226 	beq	r12,r2,4c60 <_dtoa_r+0x1424>
    4bd8:	d9c00717 	ldw	r7,28(sp)
    4bdc:	8805883a 	mov	r2,r17
    4be0:	b82b883a 	mov	r21,r23
    4be4:	3b19883a 	add	r12,r7,r12
    4be8:	6023883a 	mov	r17,r12
    4bec:	a007883a 	mov	r3,r20
    4bf0:	dc800f15 	stw	r18,60(sp)
    4bf4:	000d883a 	mov	r6,zero
    4bf8:	01d00934 	movhi	r7,16420
    4bfc:	1009883a 	mov	r4,r2
    4c00:	180b883a 	mov	r5,r3
    4c04:	000c6e40 	call	c6e4 <__muldf3>
    4c08:	180b883a 	mov	r5,r3
    4c0c:	1009883a 	mov	r4,r2
    4c10:	1829883a 	mov	r20,r3
    4c14:	1025883a 	mov	r18,r2
    4c18:	000d6f80 	call	d6f8 <__fixdfsi>
    4c1c:	1009883a 	mov	r4,r2
    4c20:	1021883a 	mov	r16,r2
    4c24:	000d7780 	call	d778 <__floatsidf>
    4c28:	100d883a 	mov	r6,r2
    4c2c:	180f883a 	mov	r7,r3
    4c30:	9009883a 	mov	r4,r18
    4c34:	a00b883a 	mov	r5,r20
    4c38:	84000c04 	addi	r16,r16,48
    4c3c:	000cdfc0 	call	cdfc <__subdf3>
    4c40:	ad400044 	addi	r21,r21,1
    4c44:	ac3fffc5 	stb	r16,-1(r21)
    4c48:	ac7fea1e 	bne	r21,r17,4bf4 <_dtoa_r+0x13b8>
    4c4c:	1023883a 	mov	r17,r2
    4c50:	d8801217 	ldw	r2,72(sp)
    4c54:	dc800f17 	ldw	r18,60(sp)
    4c58:	1829883a 	mov	r20,r3
    4c5c:	b8af883a 	add	r23,r23,r2
    4c60:	d9001417 	ldw	r4,80(sp)
    4c64:	d9401517 	ldw	r5,84(sp)
    4c68:	000d883a 	mov	r6,zero
    4c6c:	01cff834 	movhi	r7,16352
    4c70:	000b2f80 	call	b2f8 <__adddf3>
    4c74:	880d883a 	mov	r6,r17
    4c78:	a00f883a 	mov	r7,r20
    4c7c:	1009883a 	mov	r4,r2
    4c80:	180b883a 	mov	r5,r3
    4c84:	000c5f00 	call	c5f0 <__ledf2>
    4c88:	10003e0e 	bge	r2,zero,4d84 <_dtoa_r+0x1548>
    4c8c:	d9001317 	ldw	r4,76(sp)
    4c90:	bd3fffc3 	ldbu	r20,-1(r23)
    4c94:	d9000515 	stw	r4,20(sp)
    4c98:	003d3b06 	br	4188 <_dtoa_r+0x94c>
    4c9c:	0027883a 	mov	r19,zero
    4ca0:	003f1b06 	br	4910 <_dtoa_r+0x10d4>
    4ca4:	d8800817 	ldw	r2,32(sp)
    4ca8:	11e9c83a 	sub	r20,r2,r7
    4cac:	0005883a 	mov	r2,zero
    4cb0:	003d5406 	br	4204 <_dtoa_r+0x9c8>
    4cb4:	00800044 	movi	r2,1
    4cb8:	003dc706 	br	43d8 <_dtoa_r+0xb9c>
    4cbc:	d8c00217 	ldw	r3,8(sp)
    4cc0:	00800d84 	movi	r2,54
    4cc4:	dd400a17 	ldw	r21,40(sp)
    4cc8:	10c5c83a 	sub	r2,r2,r3
    4ccc:	dd000817 	ldw	r20,32(sp)
    4cd0:	003d4c06 	br	4204 <_dtoa_r+0x9c8>
    4cd4:	dc800f15 	stw	r18,60(sp)
    4cd8:	dcc01015 	stw	r19,64(sp)
    4cdc:	04000084 	movi	r16,2
    4ce0:	003bed06 	br	3c98 <_dtoa_r+0x45c>
    4ce4:	d9000617 	ldw	r4,24(sp)
    4ce8:	203f0d26 	beq	r4,zero,4920 <_dtoa_r+0x10e4>
    4cec:	d9800c17 	ldw	r6,48(sp)
    4cf0:	01bcab0e 	bge	zero,r6,3fa0 <_dtoa_r+0x764>
    4cf4:	d9401017 	ldw	r5,64(sp)
    4cf8:	d9000f17 	ldw	r4,60(sp)
    4cfc:	000d883a 	mov	r6,zero
    4d00:	01d00934 	movhi	r7,16420
    4d04:	000c6e40 	call	c6e4 <__muldf3>
    4d08:	81000044 	addi	r4,r16,1
    4d0c:	d8800f15 	stw	r2,60(sp)
    4d10:	d8c01015 	stw	r3,64(sp)
    4d14:	000d7780 	call	d778 <__floatsidf>
    4d18:	d9800f17 	ldw	r6,60(sp)
    4d1c:	d9c01017 	ldw	r7,64(sp)
    4d20:	1009883a 	mov	r4,r2
    4d24:	180b883a 	mov	r5,r3
    4d28:	000c6e40 	call	c6e4 <__muldf3>
    4d2c:	01d00734 	movhi	r7,16412
    4d30:	000d883a 	mov	r6,zero
    4d34:	1009883a 	mov	r4,r2
    4d38:	180b883a 	mov	r5,r3
    4d3c:	000b2f80 	call	b2f8 <__adddf3>
    4d40:	d9c00517 	ldw	r7,20(sp)
    4d44:	047f3034 	movhi	r17,64704
    4d48:	1021883a 	mov	r16,r2
    4d4c:	39ffffc4 	addi	r7,r7,-1
    4d50:	d9c01315 	stw	r7,76(sp)
    4d54:	1c63883a 	add	r17,r3,r17
    4d58:	db000c17 	ldw	r12,48(sp)
    4d5c:	003bea06 	br	3d08 <_dtoa_r+0x4cc>
    4d60:	dc000915 	stw	r16,36(sp)
    4d64:	003e0e06 	br	45a0 <_dtoa_r+0xd64>
    4d68:	01000e44 	movi	r4,57
    4d6c:	8825883a 	mov	r18,r17
    4d70:	9dc00044 	addi	r23,r19,1
    4d74:	99000005 	stb	r4,0(r19)
    4d78:	a023883a 	mov	r17,r20
    4d7c:	dc000915 	stw	r16,36(sp)
    4d80:	003da406 	br	4414 <_dtoa_r+0xbd8>
    4d84:	d9801417 	ldw	r6,80(sp)
    4d88:	d9c01517 	ldw	r7,84(sp)
    4d8c:	0009883a 	mov	r4,zero
    4d90:	014ff834 	movhi	r5,16352
    4d94:	000cdfc0 	call	cdfc <__subdf3>
    4d98:	880d883a 	mov	r6,r17
    4d9c:	a00f883a 	mov	r7,r20
    4da0:	1009883a 	mov	r4,r2
    4da4:	180b883a 	mov	r5,r3
    4da8:	000c5140 	call	c514 <__gedf2>
    4dac:	00bc7c0e 	bge	zero,r2,3fa0 <_dtoa_r+0x764>
    4db0:	01000c04 	movi	r4,48
    4db4:	00000106 	br	4dbc <_dtoa_r+0x1580>
    4db8:	102f883a 	mov	r23,r2
    4dbc:	b8bfffc4 	addi	r2,r23,-1
    4dc0:	10c00007 	ldb	r3,0(r2)
    4dc4:	193ffc26 	beq	r3,r4,4db8 <_dtoa_r+0x157c>
    4dc8:	d9801317 	ldw	r6,76(sp)
    4dcc:	d9800515 	stw	r6,20(sp)
    4dd0:	003c4406 	br	3ee4 <_dtoa_r+0x6a8>
    4dd4:	d9801317 	ldw	r6,76(sp)
    4dd8:	d9800515 	stw	r6,20(sp)
    4ddc:	003cea06 	br	4188 <_dtoa_r+0x94c>
    4de0:	dd800f17 	ldw	r22,60(sp)
    4de4:	dcc01017 	ldw	r19,64(sp)
    4de8:	dc801217 	ldw	r18,72(sp)
    4dec:	003c6c06 	br	3fa0 <_dtoa_r+0x764>
    4df0:	903e031e 	bne	r18,zero,4600 <_dtoa_r+0xdc4>
    4df4:	003ebb06 	br	48e4 <_dtoa_r+0x10a8>
    4df8:	103e6c1e 	bne	r2,zero,47ac <_dtoa_r+0xf70>
    4dfc:	4080004c 	andi	r2,r8,1
    4e00:	103e6a26 	beq	r2,zero,47ac <_dtoa_r+0xf70>
    4e04:	003e6606 	br	47a0 <_dtoa_r+0xf64>
    4e08:	d8c00317 	ldw	r3,12(sp)
    4e0c:	00800084 	movi	r2,2
    4e10:	10c02916 	blt	r2,r3,4eb8 <_dtoa_r+0x167c>
    4e14:	d9000c17 	ldw	r4,48(sp)
    4e18:	003e8806 	br	483c <_dtoa_r+0x1000>
    4e1c:	04000084 	movi	r16,2
    4e20:	003b9d06 	br	3c98 <_dtoa_r+0x45c>
    4e24:	d9001317 	ldw	r4,76(sp)
    4e28:	d9000515 	stw	r4,20(sp)
    4e2c:	003cd606 	br	4188 <_dtoa_r+0x94c>
    4e30:	d8801317 	ldw	r2,76(sp)
    4e34:	d8800515 	stw	r2,20(sp)
    4e38:	003c2a06 	br	3ee4 <_dtoa_r+0x6a8>
    4e3c:	d9800317 	ldw	r6,12(sp)
    4e40:	00800084 	movi	r2,2
    4e44:	11801516 	blt	r2,r6,4e9c <_dtoa_r+0x1660>
    4e48:	d9c00c17 	ldw	r7,48(sp)
    4e4c:	d9c00615 	stw	r7,24(sp)
    4e50:	003df706 	br	4630 <_dtoa_r+0xdf4>
    4e54:	193d3926 	beq	r3,r4,433c <_dtoa_r+0xb00>
    4e58:	00c00f04 	movi	r3,60
    4e5c:	1885c83a 	sub	r2,r3,r2
    4e60:	003ddf06 	br	45e0 <_dtoa_r+0xda4>
    4e64:	e009883a 	mov	r4,fp
    4e68:	e0001115 	stw	zero,68(fp)
    4e6c:	000b883a 	mov	r5,zero
    4e70:	0006ed80 	call	6ed8 <_Balloc>
    4e74:	d8800715 	stw	r2,28(sp)
    4e78:	d8c00717 	ldw	r3,28(sp)
    4e7c:	00bfffc4 	movi	r2,-1
    4e80:	01000044 	movi	r4,1
    4e84:	d8800c15 	stw	r2,48(sp)
    4e88:	e0c01015 	stw	r3,64(fp)
    4e8c:	d9000b15 	stw	r4,44(sp)
    4e90:	d8800615 	stw	r2,24(sp)
    4e94:	d8002215 	stw	zero,136(sp)
    4e98:	003c4106 	br	3fa0 <_dtoa_r+0x764>
    4e9c:	d8c00c17 	ldw	r3,48(sp)
    4ea0:	d8c00615 	stw	r3,24(sp)
    4ea4:	003e7006 	br	4868 <_dtoa_r+0x102c>
    4ea8:	04400044 	movi	r17,1
    4eac:	003b2006 	br	3b30 <_dtoa_r+0x2f4>
    4eb0:	000b883a 	mov	r5,zero
    4eb4:	003b3d06 	br	3bac <_dtoa_r+0x370>
    4eb8:	d8800c17 	ldw	r2,48(sp)
    4ebc:	d8800615 	stw	r2,24(sp)
    4ec0:	003e6906 	br	4868 <_dtoa_r+0x102c>

00004ec4 <__sflush_r>:
    4ec4:	2880030b 	ldhu	r2,12(r5)
    4ec8:	defffb04 	addi	sp,sp,-20
    4ecc:	dcc00315 	stw	r19,12(sp)
    4ed0:	dc400115 	stw	r17,4(sp)
    4ed4:	dfc00415 	stw	ra,16(sp)
    4ed8:	dc800215 	stw	r18,8(sp)
    4edc:	dc000015 	stw	r16,0(sp)
    4ee0:	10c0020c 	andi	r3,r2,8
    4ee4:	2823883a 	mov	r17,r5
    4ee8:	2027883a 	mov	r19,r4
    4eec:	1800311e 	bne	r3,zero,4fb4 <__sflush_r+0xf0>
    4ef0:	28c00117 	ldw	r3,4(r5)
    4ef4:	10820014 	ori	r2,r2,2048
    4ef8:	2880030d 	sth	r2,12(r5)
    4efc:	00c04b0e 	bge	zero,r3,502c <__sflush_r+0x168>
    4f00:	8a000a17 	ldw	r8,40(r17)
    4f04:	40002326 	beq	r8,zero,4f94 <__sflush_r+0xd0>
    4f08:	9c000017 	ldw	r16,0(r19)
    4f0c:	10c4000c 	andi	r3,r2,4096
    4f10:	98000015 	stw	zero,0(r19)
    4f14:	18004826 	beq	r3,zero,5038 <__sflush_r+0x174>
    4f18:	89801417 	ldw	r6,80(r17)
    4f1c:	10c0010c 	andi	r3,r2,4
    4f20:	18000626 	beq	r3,zero,4f3c <__sflush_r+0x78>
    4f24:	88c00117 	ldw	r3,4(r17)
    4f28:	88800c17 	ldw	r2,48(r17)
    4f2c:	30cdc83a 	sub	r6,r6,r3
    4f30:	10000226 	beq	r2,zero,4f3c <__sflush_r+0x78>
    4f34:	88800f17 	ldw	r2,60(r17)
    4f38:	308dc83a 	sub	r6,r6,r2
    4f3c:	89400717 	ldw	r5,28(r17)
    4f40:	000f883a 	mov	r7,zero
    4f44:	9809883a 	mov	r4,r19
    4f48:	403ee83a 	callr	r8
    4f4c:	00ffffc4 	movi	r3,-1
    4f50:	10c04426 	beq	r2,r3,5064 <__sflush_r+0x1a0>
    4f54:	88c0030b 	ldhu	r3,12(r17)
    4f58:	89000417 	ldw	r4,16(r17)
    4f5c:	88000115 	stw	zero,4(r17)
    4f60:	197dffcc 	andi	r5,r3,63487
    4f64:	8940030d 	sth	r5,12(r17)
    4f68:	89000015 	stw	r4,0(r17)
    4f6c:	18c4000c 	andi	r3,r3,4096
    4f70:	18002c1e 	bne	r3,zero,5024 <__sflush_r+0x160>
    4f74:	89400c17 	ldw	r5,48(r17)
    4f78:	9c000015 	stw	r16,0(r19)
    4f7c:	28000526 	beq	r5,zero,4f94 <__sflush_r+0xd0>
    4f80:	88801004 	addi	r2,r17,64
    4f84:	28800226 	beq	r5,r2,4f90 <__sflush_r+0xcc>
    4f88:	9809883a 	mov	r4,r19
    4f8c:	00056300 	call	5630 <_free_r>
    4f90:	88000c15 	stw	zero,48(r17)
    4f94:	0005883a 	mov	r2,zero
    4f98:	dfc00417 	ldw	ra,16(sp)
    4f9c:	dcc00317 	ldw	r19,12(sp)
    4fa0:	dc800217 	ldw	r18,8(sp)
    4fa4:	dc400117 	ldw	r17,4(sp)
    4fa8:	dc000017 	ldw	r16,0(sp)
    4fac:	dec00504 	addi	sp,sp,20
    4fb0:	f800283a 	ret
    4fb4:	2c800417 	ldw	r18,16(r5)
    4fb8:	903ff626 	beq	r18,zero,4f94 <__sflush_r+0xd0>
    4fbc:	2c000017 	ldw	r16,0(r5)
    4fc0:	108000cc 	andi	r2,r2,3
    4fc4:	2c800015 	stw	r18,0(r5)
    4fc8:	84a1c83a 	sub	r16,r16,r18
    4fcc:	1000131e 	bne	r2,zero,501c <__sflush_r+0x158>
    4fd0:	28800517 	ldw	r2,20(r5)
    4fd4:	88800215 	stw	r2,8(r17)
    4fd8:	04000316 	blt	zero,r16,4fe8 <__sflush_r+0x124>
    4fdc:	003fed06 	br	4f94 <__sflush_r+0xd0>
    4fe0:	90a5883a 	add	r18,r18,r2
    4fe4:	043feb0e 	bge	zero,r16,4f94 <__sflush_r+0xd0>
    4fe8:	88800917 	ldw	r2,36(r17)
    4fec:	89400717 	ldw	r5,28(r17)
    4ff0:	800f883a 	mov	r7,r16
    4ff4:	900d883a 	mov	r6,r18
    4ff8:	9809883a 	mov	r4,r19
    4ffc:	103ee83a 	callr	r2
    5000:	80a1c83a 	sub	r16,r16,r2
    5004:	00bff616 	blt	zero,r2,4fe0 <__sflush_r+0x11c>
    5008:	88c0030b 	ldhu	r3,12(r17)
    500c:	00bfffc4 	movi	r2,-1
    5010:	18c01014 	ori	r3,r3,64
    5014:	88c0030d 	sth	r3,12(r17)
    5018:	003fdf06 	br	4f98 <__sflush_r+0xd4>
    501c:	0005883a 	mov	r2,zero
    5020:	003fec06 	br	4fd4 <__sflush_r+0x110>
    5024:	88801415 	stw	r2,80(r17)
    5028:	003fd206 	br	4f74 <__sflush_r+0xb0>
    502c:	28c00f17 	ldw	r3,60(r5)
    5030:	00ffb316 	blt	zero,r3,4f00 <__sflush_r+0x3c>
    5034:	003fd706 	br	4f94 <__sflush_r+0xd0>
    5038:	89400717 	ldw	r5,28(r17)
    503c:	000d883a 	mov	r6,zero
    5040:	01c00044 	movi	r7,1
    5044:	9809883a 	mov	r4,r19
    5048:	403ee83a 	callr	r8
    504c:	100d883a 	mov	r6,r2
    5050:	00bfffc4 	movi	r2,-1
    5054:	30801426 	beq	r6,r2,50a8 <__sflush_r+0x1e4>
    5058:	8880030b 	ldhu	r2,12(r17)
    505c:	8a000a17 	ldw	r8,40(r17)
    5060:	003fae06 	br	4f1c <__sflush_r+0x58>
    5064:	98c00017 	ldw	r3,0(r19)
    5068:	183fba26 	beq	r3,zero,4f54 <__sflush_r+0x90>
    506c:	01000744 	movi	r4,29
    5070:	19000626 	beq	r3,r4,508c <__sflush_r+0x1c8>
    5074:	01000584 	movi	r4,22
    5078:	19000426 	beq	r3,r4,508c <__sflush_r+0x1c8>
    507c:	88c0030b 	ldhu	r3,12(r17)
    5080:	18c01014 	ori	r3,r3,64
    5084:	88c0030d 	sth	r3,12(r17)
    5088:	003fc306 	br	4f98 <__sflush_r+0xd4>
    508c:	8880030b 	ldhu	r2,12(r17)
    5090:	88c00417 	ldw	r3,16(r17)
    5094:	88000115 	stw	zero,4(r17)
    5098:	10bdffcc 	andi	r2,r2,63487
    509c:	8880030d 	sth	r2,12(r17)
    50a0:	88c00015 	stw	r3,0(r17)
    50a4:	003fb306 	br	4f74 <__sflush_r+0xb0>
    50a8:	98800017 	ldw	r2,0(r19)
    50ac:	103fea26 	beq	r2,zero,5058 <__sflush_r+0x194>
    50b0:	00c00744 	movi	r3,29
    50b4:	10c00226 	beq	r2,r3,50c0 <__sflush_r+0x1fc>
    50b8:	00c00584 	movi	r3,22
    50bc:	10c0031e 	bne	r2,r3,50cc <__sflush_r+0x208>
    50c0:	9c000015 	stw	r16,0(r19)
    50c4:	0005883a 	mov	r2,zero
    50c8:	003fb306 	br	4f98 <__sflush_r+0xd4>
    50cc:	88c0030b 	ldhu	r3,12(r17)
    50d0:	3005883a 	mov	r2,r6
    50d4:	18c01014 	ori	r3,r3,64
    50d8:	88c0030d 	sth	r3,12(r17)
    50dc:	003fae06 	br	4f98 <__sflush_r+0xd4>

000050e0 <_fflush_r>:
    50e0:	defffd04 	addi	sp,sp,-12
    50e4:	dc000115 	stw	r16,4(sp)
    50e8:	dfc00215 	stw	ra,8(sp)
    50ec:	2021883a 	mov	r16,r4
    50f0:	20000226 	beq	r4,zero,50fc <_fflush_r+0x1c>
    50f4:	20800e17 	ldw	r2,56(r4)
    50f8:	10000c26 	beq	r2,zero,512c <_fflush_r+0x4c>
    50fc:	2880030f 	ldh	r2,12(r5)
    5100:	1000051e 	bne	r2,zero,5118 <_fflush_r+0x38>
    5104:	0005883a 	mov	r2,zero
    5108:	dfc00217 	ldw	ra,8(sp)
    510c:	dc000117 	ldw	r16,4(sp)
    5110:	dec00304 	addi	sp,sp,12
    5114:	f800283a 	ret
    5118:	8009883a 	mov	r4,r16
    511c:	dfc00217 	ldw	ra,8(sp)
    5120:	dc000117 	ldw	r16,4(sp)
    5124:	dec00304 	addi	sp,sp,12
    5128:	0004ec41 	jmpi	4ec4 <__sflush_r>
    512c:	d9400015 	stw	r5,0(sp)
    5130:	00054bc0 	call	54bc <__sinit>
    5134:	d9400017 	ldw	r5,0(sp)
    5138:	003ff006 	br	50fc <_fflush_r+0x1c>

0000513c <fflush>:
    513c:	20000526 	beq	r4,zero,5154 <fflush+0x18>
    5140:	008000b4 	movhi	r2,2
    5144:	10b17c04 	addi	r2,r2,-14864
    5148:	200b883a 	mov	r5,r4
    514c:	11000017 	ldw	r4,0(r2)
    5150:	00050e01 	jmpi	50e0 <_fflush_r>
    5154:	008000b4 	movhi	r2,2
    5158:	10b17b04 	addi	r2,r2,-14868
    515c:	11000017 	ldw	r4,0(r2)
    5160:	01400034 	movhi	r5,0
    5164:	29543804 	addi	r5,r5,20704
    5168:	0005ec01 	jmpi	5ec0 <_fwalk_reent>

0000516c <__fp_unlock>:
    516c:	0005883a 	mov	r2,zero
    5170:	f800283a 	ret

00005174 <_cleanup_r>:
    5174:	01400074 	movhi	r5,1
    5178:	2967b604 	addi	r5,r5,-24872
    517c:	0005ec01 	jmpi	5ec0 <_fwalk_reent>

00005180 <__sinit.part.1>:
    5180:	defff704 	addi	sp,sp,-36
    5184:	00c00034 	movhi	r3,0
    5188:	dfc00815 	stw	ra,32(sp)
    518c:	ddc00715 	stw	r23,28(sp)
    5190:	dd800615 	stw	r22,24(sp)
    5194:	dd400515 	stw	r21,20(sp)
    5198:	dd000415 	stw	r20,16(sp)
    519c:	dcc00315 	stw	r19,12(sp)
    51a0:	dc800215 	stw	r18,8(sp)
    51a4:	dc400115 	stw	r17,4(sp)
    51a8:	dc000015 	stw	r16,0(sp)
    51ac:	18d45d04 	addi	r3,r3,20852
    51b0:	24000117 	ldw	r16,4(r4)
    51b4:	20c00f15 	stw	r3,60(r4)
    51b8:	2080bb04 	addi	r2,r4,748
    51bc:	00c000c4 	movi	r3,3
    51c0:	20c0b915 	stw	r3,740(r4)
    51c4:	2080ba15 	stw	r2,744(r4)
    51c8:	2000b815 	stw	zero,736(r4)
    51cc:	05c00204 	movi	r23,8
    51d0:	00800104 	movi	r2,4
    51d4:	2025883a 	mov	r18,r4
    51d8:	b80d883a 	mov	r6,r23
    51dc:	81001704 	addi	r4,r16,92
    51e0:	000b883a 	mov	r5,zero
    51e4:	80000015 	stw	zero,0(r16)
    51e8:	80000115 	stw	zero,4(r16)
    51ec:	80000215 	stw	zero,8(r16)
    51f0:	8080030d 	sth	r2,12(r16)
    51f4:	80001915 	stw	zero,100(r16)
    51f8:	8000038d 	sth	zero,14(r16)
    51fc:	80000415 	stw	zero,16(r16)
    5200:	80000515 	stw	zero,20(r16)
    5204:	80000615 	stw	zero,24(r16)
    5208:	0006db00 	call	6db0 <memset>
    520c:	05800074 	movhi	r22,1
    5210:	94400217 	ldw	r17,8(r18)
    5214:	05400074 	movhi	r21,1
    5218:	05000074 	movhi	r20,1
    521c:	04c00074 	movhi	r19,1
    5220:	b5a14004 	addi	r22,r22,-31488
    5224:	ad615704 	addi	r21,r21,-31396
    5228:	a5217604 	addi	r20,r20,-31272
    522c:	9ce18d04 	addi	r19,r19,-31180
    5230:	85800815 	stw	r22,32(r16)
    5234:	85400915 	stw	r21,36(r16)
    5238:	85000a15 	stw	r20,40(r16)
    523c:	84c00b15 	stw	r19,44(r16)
    5240:	84000715 	stw	r16,28(r16)
    5244:	00800284 	movi	r2,10
    5248:	8880030d 	sth	r2,12(r17)
    524c:	00800044 	movi	r2,1
    5250:	b80d883a 	mov	r6,r23
    5254:	89001704 	addi	r4,r17,92
    5258:	000b883a 	mov	r5,zero
    525c:	88000015 	stw	zero,0(r17)
    5260:	88000115 	stw	zero,4(r17)
    5264:	88000215 	stw	zero,8(r17)
    5268:	88001915 	stw	zero,100(r17)
    526c:	8880038d 	sth	r2,14(r17)
    5270:	88000415 	stw	zero,16(r17)
    5274:	88000515 	stw	zero,20(r17)
    5278:	88000615 	stw	zero,24(r17)
    527c:	0006db00 	call	6db0 <memset>
    5280:	94000317 	ldw	r16,12(r18)
    5284:	00800484 	movi	r2,18
    5288:	8c400715 	stw	r17,28(r17)
    528c:	8d800815 	stw	r22,32(r17)
    5290:	8d400915 	stw	r21,36(r17)
    5294:	8d000a15 	stw	r20,40(r17)
    5298:	8cc00b15 	stw	r19,44(r17)
    529c:	8080030d 	sth	r2,12(r16)
    52a0:	00800084 	movi	r2,2
    52a4:	80000015 	stw	zero,0(r16)
    52a8:	80000115 	stw	zero,4(r16)
    52ac:	80000215 	stw	zero,8(r16)
    52b0:	80001915 	stw	zero,100(r16)
    52b4:	8080038d 	sth	r2,14(r16)
    52b8:	80000415 	stw	zero,16(r16)
    52bc:	80000515 	stw	zero,20(r16)
    52c0:	80000615 	stw	zero,24(r16)
    52c4:	b80d883a 	mov	r6,r23
    52c8:	000b883a 	mov	r5,zero
    52cc:	81001704 	addi	r4,r16,92
    52d0:	0006db00 	call	6db0 <memset>
    52d4:	00800044 	movi	r2,1
    52d8:	84000715 	stw	r16,28(r16)
    52dc:	85800815 	stw	r22,32(r16)
    52e0:	85400915 	stw	r21,36(r16)
    52e4:	85000a15 	stw	r20,40(r16)
    52e8:	84c00b15 	stw	r19,44(r16)
    52ec:	90800e15 	stw	r2,56(r18)
    52f0:	dfc00817 	ldw	ra,32(sp)
    52f4:	ddc00717 	ldw	r23,28(sp)
    52f8:	dd800617 	ldw	r22,24(sp)
    52fc:	dd400517 	ldw	r21,20(sp)
    5300:	dd000417 	ldw	r20,16(sp)
    5304:	dcc00317 	ldw	r19,12(sp)
    5308:	dc800217 	ldw	r18,8(sp)
    530c:	dc400117 	ldw	r17,4(sp)
    5310:	dc000017 	ldw	r16,0(sp)
    5314:	dec00904 	addi	sp,sp,36
    5318:	f800283a 	ret

0000531c <__fp_lock>:
    531c:	0005883a 	mov	r2,zero
    5320:	f800283a 	ret

00005324 <__sfmoreglue>:
    5324:	defffc04 	addi	sp,sp,-16
    5328:	dc400115 	stw	r17,4(sp)
    532c:	2c7fffc4 	addi	r17,r5,-1
    5330:	8c401a24 	muli	r17,r17,104
    5334:	dc800215 	stw	r18,8(sp)
    5338:	2825883a 	mov	r18,r5
    533c:	89401d04 	addi	r5,r17,116
    5340:	dc000015 	stw	r16,0(sp)
    5344:	dfc00315 	stw	ra,12(sp)
    5348:	000621c0 	call	621c <_malloc_r>
    534c:	1021883a 	mov	r16,r2
    5350:	10000726 	beq	r2,zero,5370 <__sfmoreglue+0x4c>
    5354:	11000304 	addi	r4,r2,12
    5358:	10000015 	stw	zero,0(r2)
    535c:	14800115 	stw	r18,4(r2)
    5360:	11000215 	stw	r4,8(r2)
    5364:	89801a04 	addi	r6,r17,104
    5368:	000b883a 	mov	r5,zero
    536c:	0006db00 	call	6db0 <memset>
    5370:	8005883a 	mov	r2,r16
    5374:	dfc00317 	ldw	ra,12(sp)
    5378:	dc800217 	ldw	r18,8(sp)
    537c:	dc400117 	ldw	r17,4(sp)
    5380:	dc000017 	ldw	r16,0(sp)
    5384:	dec00404 	addi	sp,sp,16
    5388:	f800283a 	ret

0000538c <__sfp>:
    538c:	defffb04 	addi	sp,sp,-20
    5390:	dc000015 	stw	r16,0(sp)
    5394:	040000b4 	movhi	r16,2
    5398:	84317b04 	addi	r16,r16,-14868
    539c:	dcc00315 	stw	r19,12(sp)
    53a0:	2027883a 	mov	r19,r4
    53a4:	81000017 	ldw	r4,0(r16)
    53a8:	dfc00415 	stw	ra,16(sp)
    53ac:	dc800215 	stw	r18,8(sp)
    53b0:	20800e17 	ldw	r2,56(r4)
    53b4:	dc400115 	stw	r17,4(sp)
    53b8:	1000021e 	bne	r2,zero,53c4 <__sfp+0x38>
    53bc:	00051800 	call	5180 <__sinit.part.1>
    53c0:	81000017 	ldw	r4,0(r16)
    53c4:	2480b804 	addi	r18,r4,736
    53c8:	047fffc4 	movi	r17,-1
    53cc:	91000117 	ldw	r4,4(r18)
    53d0:	94000217 	ldw	r16,8(r18)
    53d4:	213fffc4 	addi	r4,r4,-1
    53d8:	20000a16 	blt	r4,zero,5404 <__sfp+0x78>
    53dc:	8080030f 	ldh	r2,12(r16)
    53e0:	10000c26 	beq	r2,zero,5414 <__sfp+0x88>
    53e4:	80c01d04 	addi	r3,r16,116
    53e8:	00000206 	br	53f4 <__sfp+0x68>
    53ec:	18bfe60f 	ldh	r2,-104(r3)
    53f0:	10000826 	beq	r2,zero,5414 <__sfp+0x88>
    53f4:	213fffc4 	addi	r4,r4,-1
    53f8:	1c3ffd04 	addi	r16,r3,-12
    53fc:	18c01a04 	addi	r3,r3,104
    5400:	247ffa1e 	bne	r4,r17,53ec <__sfp+0x60>
    5404:	90800017 	ldw	r2,0(r18)
    5408:	10001d26 	beq	r2,zero,5480 <__sfp+0xf4>
    540c:	1025883a 	mov	r18,r2
    5410:	003fee06 	br	53cc <__sfp+0x40>
    5414:	00bfffc4 	movi	r2,-1
    5418:	8080038d 	sth	r2,14(r16)
    541c:	00800044 	movi	r2,1
    5420:	8080030d 	sth	r2,12(r16)
    5424:	80001915 	stw	zero,100(r16)
    5428:	80000015 	stw	zero,0(r16)
    542c:	80000215 	stw	zero,8(r16)
    5430:	80000115 	stw	zero,4(r16)
    5434:	80000415 	stw	zero,16(r16)
    5438:	80000515 	stw	zero,20(r16)
    543c:	80000615 	stw	zero,24(r16)
    5440:	01800204 	movi	r6,8
    5444:	000b883a 	mov	r5,zero
    5448:	81001704 	addi	r4,r16,92
    544c:	0006db00 	call	6db0 <memset>
    5450:	8005883a 	mov	r2,r16
    5454:	80000c15 	stw	zero,48(r16)
    5458:	80000d15 	stw	zero,52(r16)
    545c:	80001115 	stw	zero,68(r16)
    5460:	80001215 	stw	zero,72(r16)
    5464:	dfc00417 	ldw	ra,16(sp)
    5468:	dcc00317 	ldw	r19,12(sp)
    546c:	dc800217 	ldw	r18,8(sp)
    5470:	dc400117 	ldw	r17,4(sp)
    5474:	dc000017 	ldw	r16,0(sp)
    5478:	dec00504 	addi	sp,sp,20
    547c:	f800283a 	ret
    5480:	01400104 	movi	r5,4
    5484:	9809883a 	mov	r4,r19
    5488:	00053240 	call	5324 <__sfmoreglue>
    548c:	90800015 	stw	r2,0(r18)
    5490:	103fde1e 	bne	r2,zero,540c <__sfp+0x80>
    5494:	00800304 	movi	r2,12
    5498:	98800015 	stw	r2,0(r19)
    549c:	0005883a 	mov	r2,zero
    54a0:	003ff006 	br	5464 <__sfp+0xd8>

000054a4 <_cleanup>:
    54a4:	008000b4 	movhi	r2,2
    54a8:	10b17b04 	addi	r2,r2,-14868
    54ac:	11000017 	ldw	r4,0(r2)
    54b0:	01400074 	movhi	r5,1
    54b4:	2967b604 	addi	r5,r5,-24872
    54b8:	0005ec01 	jmpi	5ec0 <_fwalk_reent>

000054bc <__sinit>:
    54bc:	20800e17 	ldw	r2,56(r4)
    54c0:	10000126 	beq	r2,zero,54c8 <__sinit+0xc>
    54c4:	f800283a 	ret
    54c8:	00051801 	jmpi	5180 <__sinit.part.1>

000054cc <__sfp_lock_acquire>:
    54cc:	f800283a 	ret

000054d0 <__sfp_lock_release>:
    54d0:	f800283a 	ret

000054d4 <__sinit_lock_acquire>:
    54d4:	f800283a 	ret

000054d8 <__sinit_lock_release>:
    54d8:	f800283a 	ret

000054dc <__fp_lock_all>:
    54dc:	008000b4 	movhi	r2,2
    54e0:	10b17c04 	addi	r2,r2,-14864
    54e4:	11000017 	ldw	r4,0(r2)
    54e8:	01400034 	movhi	r5,0
    54ec:	2954c704 	addi	r5,r5,21276
    54f0:	0005dfc1 	jmpi	5dfc <_fwalk>

000054f4 <__fp_unlock_all>:
    54f4:	008000b4 	movhi	r2,2
    54f8:	10b17c04 	addi	r2,r2,-14864
    54fc:	11000017 	ldw	r4,0(r2)
    5500:	01400034 	movhi	r5,0
    5504:	29545b04 	addi	r5,r5,20844
    5508:	0005dfc1 	jmpi	5dfc <_fwalk>

0000550c <_malloc_trim_r>:
    550c:	defffb04 	addi	sp,sp,-20
    5510:	dcc00315 	stw	r19,12(sp)
    5514:	04c000b4 	movhi	r19,2
    5518:	dc800215 	stw	r18,8(sp)
    551c:	dc400115 	stw	r17,4(sp)
    5520:	dc000015 	stw	r16,0(sp)
    5524:	dfc00415 	stw	ra,16(sp)
    5528:	2821883a 	mov	r16,r5
    552c:	9ceb2f04 	addi	r19,r19,-21316
    5530:	2025883a 	mov	r18,r4
    5534:	000e3c00 	call	e3c0 <__malloc_lock>
    5538:	98800217 	ldw	r2,8(r19)
    553c:	14400117 	ldw	r17,4(r2)
    5540:	00bfff04 	movi	r2,-4
    5544:	88a2703a 	and	r17,r17,r2
    5548:	8c21c83a 	sub	r16,r17,r16
    554c:	8403fbc4 	addi	r16,r16,4079
    5550:	8020d33a 	srli	r16,r16,12
    5554:	0083ffc4 	movi	r2,4095
    5558:	843fffc4 	addi	r16,r16,-1
    555c:	8020933a 	slli	r16,r16,12
    5560:	1400060e 	bge	r2,r16,557c <_malloc_trim_r+0x70>
    5564:	000b883a 	mov	r5,zero
    5568:	9009883a 	mov	r4,r18
    556c:	00084ac0 	call	84ac <_sbrk_r>
    5570:	98c00217 	ldw	r3,8(r19)
    5574:	1c47883a 	add	r3,r3,r17
    5578:	10c00a26 	beq	r2,r3,55a4 <_malloc_trim_r+0x98>
    557c:	9009883a 	mov	r4,r18
    5580:	000e4e00 	call	e4e0 <__malloc_unlock>
    5584:	0005883a 	mov	r2,zero
    5588:	dfc00417 	ldw	ra,16(sp)
    558c:	dcc00317 	ldw	r19,12(sp)
    5590:	dc800217 	ldw	r18,8(sp)
    5594:	dc400117 	ldw	r17,4(sp)
    5598:	dc000017 	ldw	r16,0(sp)
    559c:	dec00504 	addi	sp,sp,20
    55a0:	f800283a 	ret
    55a4:	040bc83a 	sub	r5,zero,r16
    55a8:	9009883a 	mov	r4,r18
    55ac:	00084ac0 	call	84ac <_sbrk_r>
    55b0:	00ffffc4 	movi	r3,-1
    55b4:	10c00d26 	beq	r2,r3,55ec <_malloc_trim_r+0xe0>
    55b8:	00c000b4 	movhi	r3,2
    55bc:	18f99804 	addi	r3,r3,-6560
    55c0:	18800017 	ldw	r2,0(r3)
    55c4:	99000217 	ldw	r4,8(r19)
    55c8:	8c23c83a 	sub	r17,r17,r16
    55cc:	8c400054 	ori	r17,r17,1
    55d0:	1421c83a 	sub	r16,r2,r16
    55d4:	24400115 	stw	r17,4(r4)
    55d8:	9009883a 	mov	r4,r18
    55dc:	1c000015 	stw	r16,0(r3)
    55e0:	000e4e00 	call	e4e0 <__malloc_unlock>
    55e4:	00800044 	movi	r2,1
    55e8:	003fe706 	br	5588 <_malloc_trim_r+0x7c>
    55ec:	000b883a 	mov	r5,zero
    55f0:	9009883a 	mov	r4,r18
    55f4:	00084ac0 	call	84ac <_sbrk_r>
    55f8:	99000217 	ldw	r4,8(r19)
    55fc:	014003c4 	movi	r5,15
    5600:	1107c83a 	sub	r3,r2,r4
    5604:	28ffdd0e 	bge	r5,r3,557c <_malloc_trim_r+0x70>
    5608:	014000b4 	movhi	r5,2
    560c:	29717e04 	addi	r5,r5,-14856
    5610:	29400017 	ldw	r5,0(r5)
    5614:	18c00054 	ori	r3,r3,1
    5618:	20c00115 	stw	r3,4(r4)
    561c:	00c000b4 	movhi	r3,2
    5620:	1145c83a 	sub	r2,r2,r5
    5624:	18f99804 	addi	r3,r3,-6560
    5628:	18800015 	stw	r2,0(r3)
    562c:	003fd306 	br	557c <_malloc_trim_r+0x70>

00005630 <_free_r>:
    5630:	28004126 	beq	r5,zero,5738 <_free_r+0x108>
    5634:	defffd04 	addi	sp,sp,-12
    5638:	dc400115 	stw	r17,4(sp)
    563c:	dc000015 	stw	r16,0(sp)
    5640:	2023883a 	mov	r17,r4
    5644:	2821883a 	mov	r16,r5
    5648:	dfc00215 	stw	ra,8(sp)
    564c:	000e3c00 	call	e3c0 <__malloc_lock>
    5650:	81ffff17 	ldw	r7,-4(r16)
    5654:	00bfff84 	movi	r2,-2
    5658:	010000b4 	movhi	r4,2
    565c:	81bffe04 	addi	r6,r16,-8
    5660:	3884703a 	and	r2,r7,r2
    5664:	212b2f04 	addi	r4,r4,-21316
    5668:	308b883a 	add	r5,r6,r2
    566c:	2a400117 	ldw	r9,4(r5)
    5670:	22000217 	ldw	r8,8(r4)
    5674:	00ffff04 	movi	r3,-4
    5678:	48c6703a 	and	r3,r9,r3
    567c:	2a005726 	beq	r5,r8,57dc <_free_r+0x1ac>
    5680:	28c00115 	stw	r3,4(r5)
    5684:	39c0004c 	andi	r7,r7,1
    5688:	3800091e 	bne	r7,zero,56b0 <_free_r+0x80>
    568c:	823ffe17 	ldw	r8,-8(r16)
    5690:	22400204 	addi	r9,r4,8
    5694:	320dc83a 	sub	r6,r6,r8
    5698:	31c00217 	ldw	r7,8(r6)
    569c:	1205883a 	add	r2,r2,r8
    56a0:	3a406526 	beq	r7,r9,5838 <_free_r+0x208>
    56a4:	32000317 	ldw	r8,12(r6)
    56a8:	3a000315 	stw	r8,12(r7)
    56ac:	41c00215 	stw	r7,8(r8)
    56b0:	28cf883a 	add	r7,r5,r3
    56b4:	39c00117 	ldw	r7,4(r7)
    56b8:	39c0004c 	andi	r7,r7,1
    56bc:	38003a26 	beq	r7,zero,57a8 <_free_r+0x178>
    56c0:	10c00054 	ori	r3,r2,1
    56c4:	30c00115 	stw	r3,4(r6)
    56c8:	3087883a 	add	r3,r6,r2
    56cc:	18800015 	stw	r2,0(r3)
    56d0:	00c07fc4 	movi	r3,511
    56d4:	18801936 	bltu	r3,r2,573c <_free_r+0x10c>
    56d8:	1004d0fa 	srli	r2,r2,3
    56dc:	01c00044 	movi	r7,1
    56e0:	21400117 	ldw	r5,4(r4)
    56e4:	10c00044 	addi	r3,r2,1
    56e8:	18c7883a 	add	r3,r3,r3
    56ec:	1005d0ba 	srai	r2,r2,2
    56f0:	18c7883a 	add	r3,r3,r3
    56f4:	18c7883a 	add	r3,r3,r3
    56f8:	1907883a 	add	r3,r3,r4
    56fc:	3884983a 	sll	r2,r7,r2
    5700:	19c00017 	ldw	r7,0(r3)
    5704:	1a3ffe04 	addi	r8,r3,-8
    5708:	1144b03a 	or	r2,r2,r5
    570c:	32000315 	stw	r8,12(r6)
    5710:	31c00215 	stw	r7,8(r6)
    5714:	20800115 	stw	r2,4(r4)
    5718:	19800015 	stw	r6,0(r3)
    571c:	39800315 	stw	r6,12(r7)
    5720:	8809883a 	mov	r4,r17
    5724:	dfc00217 	ldw	ra,8(sp)
    5728:	dc400117 	ldw	r17,4(sp)
    572c:	dc000017 	ldw	r16,0(sp)
    5730:	dec00304 	addi	sp,sp,12
    5734:	000e4e01 	jmpi	e4e0 <__malloc_unlock>
    5738:	f800283a 	ret
    573c:	100ad27a 	srli	r5,r2,9
    5740:	00c00104 	movi	r3,4
    5744:	19404a36 	bltu	r3,r5,5870 <_free_r+0x240>
    5748:	100ad1ba 	srli	r5,r2,6
    574c:	28c00e44 	addi	r3,r5,57
    5750:	18c7883a 	add	r3,r3,r3
    5754:	29400e04 	addi	r5,r5,56
    5758:	18c7883a 	add	r3,r3,r3
    575c:	18c7883a 	add	r3,r3,r3
    5760:	1909883a 	add	r4,r3,r4
    5764:	20c00017 	ldw	r3,0(r4)
    5768:	01c000b4 	movhi	r7,2
    576c:	213ffe04 	addi	r4,r4,-8
    5770:	39eb2f04 	addi	r7,r7,-21316
    5774:	20c04426 	beq	r4,r3,5888 <_free_r+0x258>
    5778:	01ffff04 	movi	r7,-4
    577c:	19400117 	ldw	r5,4(r3)
    5780:	29ca703a 	and	r5,r5,r7
    5784:	1140022e 	bgeu	r2,r5,5790 <_free_r+0x160>
    5788:	18c00217 	ldw	r3,8(r3)
    578c:	20fffb1e 	bne	r4,r3,577c <_free_r+0x14c>
    5790:	19000317 	ldw	r4,12(r3)
    5794:	31000315 	stw	r4,12(r6)
    5798:	30c00215 	stw	r3,8(r6)
    579c:	21800215 	stw	r6,8(r4)
    57a0:	19800315 	stw	r6,12(r3)
    57a4:	003fde06 	br	5720 <_free_r+0xf0>
    57a8:	29c00217 	ldw	r7,8(r5)
    57ac:	10c5883a 	add	r2,r2,r3
    57b0:	00c000b4 	movhi	r3,2
    57b4:	18eb3104 	addi	r3,r3,-21308
    57b8:	38c03b26 	beq	r7,r3,58a8 <_free_r+0x278>
    57bc:	2a000317 	ldw	r8,12(r5)
    57c0:	11400054 	ori	r5,r2,1
    57c4:	3087883a 	add	r3,r6,r2
    57c8:	3a000315 	stw	r8,12(r7)
    57cc:	41c00215 	stw	r7,8(r8)
    57d0:	31400115 	stw	r5,4(r6)
    57d4:	18800015 	stw	r2,0(r3)
    57d8:	003fbd06 	br	56d0 <_free_r+0xa0>
    57dc:	39c0004c 	andi	r7,r7,1
    57e0:	10c5883a 	add	r2,r2,r3
    57e4:	3800071e 	bne	r7,zero,5804 <_free_r+0x1d4>
    57e8:	81fffe17 	ldw	r7,-8(r16)
    57ec:	31cdc83a 	sub	r6,r6,r7
    57f0:	30c00317 	ldw	r3,12(r6)
    57f4:	31400217 	ldw	r5,8(r6)
    57f8:	11c5883a 	add	r2,r2,r7
    57fc:	28c00315 	stw	r3,12(r5)
    5800:	19400215 	stw	r5,8(r3)
    5804:	10c00054 	ori	r3,r2,1
    5808:	30c00115 	stw	r3,4(r6)
    580c:	00c000b4 	movhi	r3,2
    5810:	18f17f04 	addi	r3,r3,-14852
    5814:	18c00017 	ldw	r3,0(r3)
    5818:	21800215 	stw	r6,8(r4)
    581c:	10ffc036 	bltu	r2,r3,5720 <_free_r+0xf0>
    5820:	008000b4 	movhi	r2,2
    5824:	10b97604 	addi	r2,r2,-6696
    5828:	11400017 	ldw	r5,0(r2)
    582c:	8809883a 	mov	r4,r17
    5830:	000550c0 	call	550c <_malloc_trim_r>
    5834:	003fba06 	br	5720 <_free_r+0xf0>
    5838:	28c9883a 	add	r4,r5,r3
    583c:	21000117 	ldw	r4,4(r4)
    5840:	2100004c 	andi	r4,r4,1
    5844:	2000391e 	bne	r4,zero,592c <_free_r+0x2fc>
    5848:	29c00217 	ldw	r7,8(r5)
    584c:	29000317 	ldw	r4,12(r5)
    5850:	1885883a 	add	r2,r3,r2
    5854:	10c00054 	ori	r3,r2,1
    5858:	39000315 	stw	r4,12(r7)
    585c:	21c00215 	stw	r7,8(r4)
    5860:	30c00115 	stw	r3,4(r6)
    5864:	308d883a 	add	r6,r6,r2
    5868:	30800015 	stw	r2,0(r6)
    586c:	003fac06 	br	5720 <_free_r+0xf0>
    5870:	00c00504 	movi	r3,20
    5874:	19401536 	bltu	r3,r5,58cc <_free_r+0x29c>
    5878:	28c01704 	addi	r3,r5,92
    587c:	18c7883a 	add	r3,r3,r3
    5880:	294016c4 	addi	r5,r5,91
    5884:	003fb406 	br	5758 <_free_r+0x128>
    5888:	280bd0ba 	srai	r5,r5,2
    588c:	00c00044 	movi	r3,1
    5890:	38800117 	ldw	r2,4(r7)
    5894:	194a983a 	sll	r5,r3,r5
    5898:	2007883a 	mov	r3,r4
    589c:	2884b03a 	or	r2,r5,r2
    58a0:	38800115 	stw	r2,4(r7)
    58a4:	003fbb06 	br	5794 <_free_r+0x164>
    58a8:	21800515 	stw	r6,20(r4)
    58ac:	21800415 	stw	r6,16(r4)
    58b0:	10c00054 	ori	r3,r2,1
    58b4:	31c00315 	stw	r7,12(r6)
    58b8:	31c00215 	stw	r7,8(r6)
    58bc:	30c00115 	stw	r3,4(r6)
    58c0:	308d883a 	add	r6,r6,r2
    58c4:	30800015 	stw	r2,0(r6)
    58c8:	003f9506 	br	5720 <_free_r+0xf0>
    58cc:	00c01504 	movi	r3,84
    58d0:	19400536 	bltu	r3,r5,58e8 <_free_r+0x2b8>
    58d4:	100ad33a 	srli	r5,r2,12
    58d8:	28c01bc4 	addi	r3,r5,111
    58dc:	18c7883a 	add	r3,r3,r3
    58e0:	29401b84 	addi	r5,r5,110
    58e4:	003f9c06 	br	5758 <_free_r+0x128>
    58e8:	00c05504 	movi	r3,340
    58ec:	19400536 	bltu	r3,r5,5904 <_free_r+0x2d4>
    58f0:	100ad3fa 	srli	r5,r2,15
    58f4:	28c01e04 	addi	r3,r5,120
    58f8:	18c7883a 	add	r3,r3,r3
    58fc:	29401dc4 	addi	r5,r5,119
    5900:	003f9506 	br	5758 <_free_r+0x128>
    5904:	00c15504 	movi	r3,1364
    5908:	19400536 	bltu	r3,r5,5920 <_free_r+0x2f0>
    590c:	100ad4ba 	srli	r5,r2,18
    5910:	28c01f44 	addi	r3,r5,125
    5914:	18c7883a 	add	r3,r3,r3
    5918:	29401f04 	addi	r5,r5,124
    591c:	003f8e06 	br	5758 <_free_r+0x128>
    5920:	00c03f84 	movi	r3,254
    5924:	01401f84 	movi	r5,126
    5928:	003f8b06 	br	5758 <_free_r+0x128>
    592c:	10c00054 	ori	r3,r2,1
    5930:	30c00115 	stw	r3,4(r6)
    5934:	308d883a 	add	r6,r6,r2
    5938:	30800015 	stw	r2,0(r6)
    593c:	003f7806 	br	5720 <_free_r+0xf0>

00005940 <__sfvwrite_r>:
    5940:	30800217 	ldw	r2,8(r6)
    5944:	10006726 	beq	r2,zero,5ae4 <__sfvwrite_r+0x1a4>
    5948:	28c0030b 	ldhu	r3,12(r5)
    594c:	defff404 	addi	sp,sp,-48
    5950:	dd400715 	stw	r21,28(sp)
    5954:	dd000615 	stw	r20,24(sp)
    5958:	dc000215 	stw	r16,8(sp)
    595c:	dfc00b15 	stw	ra,44(sp)
    5960:	df000a15 	stw	fp,40(sp)
    5964:	ddc00915 	stw	r23,36(sp)
    5968:	dd800815 	stw	r22,32(sp)
    596c:	dcc00515 	stw	r19,20(sp)
    5970:	dc800415 	stw	r18,16(sp)
    5974:	dc400315 	stw	r17,12(sp)
    5978:	1880020c 	andi	r2,r3,8
    597c:	2821883a 	mov	r16,r5
    5980:	202b883a 	mov	r21,r4
    5984:	3029883a 	mov	r20,r6
    5988:	10002726 	beq	r2,zero,5a28 <__sfvwrite_r+0xe8>
    598c:	28800417 	ldw	r2,16(r5)
    5990:	10002526 	beq	r2,zero,5a28 <__sfvwrite_r+0xe8>
    5994:	1880008c 	andi	r2,r3,2
    5998:	a4400017 	ldw	r17,0(r20)
    599c:	10002a26 	beq	r2,zero,5a48 <__sfvwrite_r+0x108>
    59a0:	05a00034 	movhi	r22,32768
    59a4:	0027883a 	mov	r19,zero
    59a8:	0025883a 	mov	r18,zero
    59ac:	b5bf0004 	addi	r22,r22,-1024
    59b0:	980d883a 	mov	r6,r19
    59b4:	a809883a 	mov	r4,r21
    59b8:	90004626 	beq	r18,zero,5ad4 <__sfvwrite_r+0x194>
    59bc:	900f883a 	mov	r7,r18
    59c0:	b480022e 	bgeu	r22,r18,59cc <__sfvwrite_r+0x8c>
    59c4:	01e00034 	movhi	r7,32768
    59c8:	39ff0004 	addi	r7,r7,-1024
    59cc:	80800917 	ldw	r2,36(r16)
    59d0:	81400717 	ldw	r5,28(r16)
    59d4:	103ee83a 	callr	r2
    59d8:	0080570e 	bge	zero,r2,5b38 <__sfvwrite_r+0x1f8>
    59dc:	a0c00217 	ldw	r3,8(r20)
    59e0:	98a7883a 	add	r19,r19,r2
    59e4:	90a5c83a 	sub	r18,r18,r2
    59e8:	1885c83a 	sub	r2,r3,r2
    59ec:	a0800215 	stw	r2,8(r20)
    59f0:	103fef1e 	bne	r2,zero,59b0 <__sfvwrite_r+0x70>
    59f4:	0005883a 	mov	r2,zero
    59f8:	dfc00b17 	ldw	ra,44(sp)
    59fc:	df000a17 	ldw	fp,40(sp)
    5a00:	ddc00917 	ldw	r23,36(sp)
    5a04:	dd800817 	ldw	r22,32(sp)
    5a08:	dd400717 	ldw	r21,28(sp)
    5a0c:	dd000617 	ldw	r20,24(sp)
    5a10:	dcc00517 	ldw	r19,20(sp)
    5a14:	dc800417 	ldw	r18,16(sp)
    5a18:	dc400317 	ldw	r17,12(sp)
    5a1c:	dc000217 	ldw	r16,8(sp)
    5a20:	dec00c04 	addi	sp,sp,48
    5a24:	f800283a 	ret
    5a28:	800b883a 	mov	r5,r16
    5a2c:	a809883a 	mov	r4,r21
    5a30:	00034e80 	call	34e8 <__swsetup_r>
    5a34:	1000eb1e 	bne	r2,zero,5de4 <__sfvwrite_r+0x4a4>
    5a38:	80c0030b 	ldhu	r3,12(r16)
    5a3c:	a4400017 	ldw	r17,0(r20)
    5a40:	1880008c 	andi	r2,r3,2
    5a44:	103fd61e 	bne	r2,zero,59a0 <__sfvwrite_r+0x60>
    5a48:	1880004c 	andi	r2,r3,1
    5a4c:	10003f1e 	bne	r2,zero,5b4c <__sfvwrite_r+0x20c>
    5a50:	0039883a 	mov	fp,zero
    5a54:	0025883a 	mov	r18,zero
    5a58:	90001a26 	beq	r18,zero,5ac4 <__sfvwrite_r+0x184>
    5a5c:	1880800c 	andi	r2,r3,512
    5a60:	84c00217 	ldw	r19,8(r16)
    5a64:	10002126 	beq	r2,zero,5aec <__sfvwrite_r+0x1ac>
    5a68:	982f883a 	mov	r23,r19
    5a6c:	94c09336 	bltu	r18,r19,5cbc <__sfvwrite_r+0x37c>
    5a70:	1881200c 	andi	r2,r3,1152
    5a74:	10009e1e 	bne	r2,zero,5cf0 <__sfvwrite_r+0x3b0>
    5a78:	81000017 	ldw	r4,0(r16)
    5a7c:	b80d883a 	mov	r6,r23
    5a80:	e00b883a 	mov	r5,fp
    5a84:	0006c540 	call	6c54 <memmove>
    5a88:	80c00217 	ldw	r3,8(r16)
    5a8c:	81000017 	ldw	r4,0(r16)
    5a90:	9005883a 	mov	r2,r18
    5a94:	1ce7c83a 	sub	r19,r3,r19
    5a98:	25cf883a 	add	r7,r4,r23
    5a9c:	84c00215 	stw	r19,8(r16)
    5aa0:	81c00015 	stw	r7,0(r16)
    5aa4:	a0c00217 	ldw	r3,8(r20)
    5aa8:	e0b9883a 	add	fp,fp,r2
    5aac:	90a5c83a 	sub	r18,r18,r2
    5ab0:	18a7c83a 	sub	r19,r3,r2
    5ab4:	a4c00215 	stw	r19,8(r20)
    5ab8:	983fce26 	beq	r19,zero,59f4 <__sfvwrite_r+0xb4>
    5abc:	80c0030b 	ldhu	r3,12(r16)
    5ac0:	903fe61e 	bne	r18,zero,5a5c <__sfvwrite_r+0x11c>
    5ac4:	8f000017 	ldw	fp,0(r17)
    5ac8:	8c800117 	ldw	r18,4(r17)
    5acc:	8c400204 	addi	r17,r17,8
    5ad0:	003fe106 	br	5a58 <__sfvwrite_r+0x118>
    5ad4:	8cc00017 	ldw	r19,0(r17)
    5ad8:	8c800117 	ldw	r18,4(r17)
    5adc:	8c400204 	addi	r17,r17,8
    5ae0:	003fb306 	br	59b0 <__sfvwrite_r+0x70>
    5ae4:	0005883a 	mov	r2,zero
    5ae8:	f800283a 	ret
    5aec:	81000017 	ldw	r4,0(r16)
    5af0:	80800417 	ldw	r2,16(r16)
    5af4:	11005736 	bltu	r2,r4,5c54 <__sfvwrite_r+0x314>
    5af8:	85c00517 	ldw	r23,20(r16)
    5afc:	95c05536 	bltu	r18,r23,5c54 <__sfvwrite_r+0x314>
    5b00:	00a00034 	movhi	r2,32768
    5b04:	10bfffc4 	addi	r2,r2,-1
    5b08:	9009883a 	mov	r4,r18
    5b0c:	1480012e 	bgeu	r2,r18,5b14 <__sfvwrite_r+0x1d4>
    5b10:	1009883a 	mov	r4,r2
    5b14:	b80b883a 	mov	r5,r23
    5b18:	000b1440 	call	b144 <__divsi3>
    5b1c:	15cf383a 	mul	r7,r2,r23
    5b20:	81400717 	ldw	r5,28(r16)
    5b24:	80800917 	ldw	r2,36(r16)
    5b28:	e00d883a 	mov	r6,fp
    5b2c:	a809883a 	mov	r4,r21
    5b30:	103ee83a 	callr	r2
    5b34:	00bfdb16 	blt	zero,r2,5aa4 <__sfvwrite_r+0x164>
    5b38:	8080030b 	ldhu	r2,12(r16)
    5b3c:	10801014 	ori	r2,r2,64
    5b40:	8080030d 	sth	r2,12(r16)
    5b44:	00bfffc4 	movi	r2,-1
    5b48:	003fab06 	br	59f8 <__sfvwrite_r+0xb8>
    5b4c:	0027883a 	mov	r19,zero
    5b50:	0011883a 	mov	r8,zero
    5b54:	0039883a 	mov	fp,zero
    5b58:	0025883a 	mov	r18,zero
    5b5c:	90001f26 	beq	r18,zero,5bdc <__sfvwrite_r+0x29c>
    5b60:	40005a26 	beq	r8,zero,5ccc <__sfvwrite_r+0x38c>
    5b64:	982d883a 	mov	r22,r19
    5b68:	94c0012e 	bgeu	r18,r19,5b70 <__sfvwrite_r+0x230>
    5b6c:	902d883a 	mov	r22,r18
    5b70:	81000017 	ldw	r4,0(r16)
    5b74:	80800417 	ldw	r2,16(r16)
    5b78:	b02f883a 	mov	r23,r22
    5b7c:	81c00517 	ldw	r7,20(r16)
    5b80:	1100032e 	bgeu	r2,r4,5b90 <__sfvwrite_r+0x250>
    5b84:	80c00217 	ldw	r3,8(r16)
    5b88:	38c7883a 	add	r3,r7,r3
    5b8c:	1d801816 	blt	r3,r22,5bf0 <__sfvwrite_r+0x2b0>
    5b90:	b1c03e16 	blt	r22,r7,5c8c <__sfvwrite_r+0x34c>
    5b94:	80800917 	ldw	r2,36(r16)
    5b98:	81400717 	ldw	r5,28(r16)
    5b9c:	e00d883a 	mov	r6,fp
    5ba0:	da000115 	stw	r8,4(sp)
    5ba4:	a809883a 	mov	r4,r21
    5ba8:	103ee83a 	callr	r2
    5bac:	102f883a 	mov	r23,r2
    5bb0:	da000117 	ldw	r8,4(sp)
    5bb4:	00bfe00e 	bge	zero,r2,5b38 <__sfvwrite_r+0x1f8>
    5bb8:	9de7c83a 	sub	r19,r19,r23
    5bbc:	98001f26 	beq	r19,zero,5c3c <__sfvwrite_r+0x2fc>
    5bc0:	a0800217 	ldw	r2,8(r20)
    5bc4:	e5f9883a 	add	fp,fp,r23
    5bc8:	95e5c83a 	sub	r18,r18,r23
    5bcc:	15efc83a 	sub	r23,r2,r23
    5bd0:	a5c00215 	stw	r23,8(r20)
    5bd4:	b83f8726 	beq	r23,zero,59f4 <__sfvwrite_r+0xb4>
    5bd8:	903fe11e 	bne	r18,zero,5b60 <__sfvwrite_r+0x220>
    5bdc:	8f000017 	ldw	fp,0(r17)
    5be0:	8c800117 	ldw	r18,4(r17)
    5be4:	0011883a 	mov	r8,zero
    5be8:	8c400204 	addi	r17,r17,8
    5bec:	003fdb06 	br	5b5c <__sfvwrite_r+0x21c>
    5bf0:	180d883a 	mov	r6,r3
    5bf4:	e00b883a 	mov	r5,fp
    5bf8:	da000115 	stw	r8,4(sp)
    5bfc:	d8c00015 	stw	r3,0(sp)
    5c00:	0006c540 	call	6c54 <memmove>
    5c04:	d8c00017 	ldw	r3,0(sp)
    5c08:	80800017 	ldw	r2,0(r16)
    5c0c:	800b883a 	mov	r5,r16
    5c10:	a809883a 	mov	r4,r21
    5c14:	10c5883a 	add	r2,r2,r3
    5c18:	80800015 	stw	r2,0(r16)
    5c1c:	d8c00015 	stw	r3,0(sp)
    5c20:	00050e00 	call	50e0 <_fflush_r>
    5c24:	d8c00017 	ldw	r3,0(sp)
    5c28:	da000117 	ldw	r8,4(sp)
    5c2c:	103fc21e 	bne	r2,zero,5b38 <__sfvwrite_r+0x1f8>
    5c30:	182f883a 	mov	r23,r3
    5c34:	9de7c83a 	sub	r19,r19,r23
    5c38:	983fe11e 	bne	r19,zero,5bc0 <__sfvwrite_r+0x280>
    5c3c:	800b883a 	mov	r5,r16
    5c40:	a809883a 	mov	r4,r21
    5c44:	00050e00 	call	50e0 <_fflush_r>
    5c48:	103fbb1e 	bne	r2,zero,5b38 <__sfvwrite_r+0x1f8>
    5c4c:	0011883a 	mov	r8,zero
    5c50:	003fdb06 	br	5bc0 <__sfvwrite_r+0x280>
    5c54:	94c0012e 	bgeu	r18,r19,5c5c <__sfvwrite_r+0x31c>
    5c58:	9027883a 	mov	r19,r18
    5c5c:	980d883a 	mov	r6,r19
    5c60:	e00b883a 	mov	r5,fp
    5c64:	0006c540 	call	6c54 <memmove>
    5c68:	80800217 	ldw	r2,8(r16)
    5c6c:	80c00017 	ldw	r3,0(r16)
    5c70:	14c5c83a 	sub	r2,r2,r19
    5c74:	1cc7883a 	add	r3,r3,r19
    5c78:	80800215 	stw	r2,8(r16)
    5c7c:	80c00015 	stw	r3,0(r16)
    5c80:	10004326 	beq	r2,zero,5d90 <__sfvwrite_r+0x450>
    5c84:	9805883a 	mov	r2,r19
    5c88:	003f8606 	br	5aa4 <__sfvwrite_r+0x164>
    5c8c:	b00d883a 	mov	r6,r22
    5c90:	e00b883a 	mov	r5,fp
    5c94:	da000115 	stw	r8,4(sp)
    5c98:	0006c540 	call	6c54 <memmove>
    5c9c:	80800217 	ldw	r2,8(r16)
    5ca0:	80c00017 	ldw	r3,0(r16)
    5ca4:	da000117 	ldw	r8,4(sp)
    5ca8:	1585c83a 	sub	r2,r2,r22
    5cac:	1dad883a 	add	r22,r3,r22
    5cb0:	80800215 	stw	r2,8(r16)
    5cb4:	85800015 	stw	r22,0(r16)
    5cb8:	003fbf06 	br	5bb8 <__sfvwrite_r+0x278>
    5cbc:	81000017 	ldw	r4,0(r16)
    5cc0:	9027883a 	mov	r19,r18
    5cc4:	902f883a 	mov	r23,r18
    5cc8:	003f6c06 	br	5a7c <__sfvwrite_r+0x13c>
    5ccc:	900d883a 	mov	r6,r18
    5cd0:	01400284 	movi	r5,10
    5cd4:	e009883a 	mov	r4,fp
    5cd8:	0006a280 	call	6a28 <memchr>
    5cdc:	10003e26 	beq	r2,zero,5dd8 <__sfvwrite_r+0x498>
    5ce0:	10800044 	addi	r2,r2,1
    5ce4:	1727c83a 	sub	r19,r2,fp
    5ce8:	02000044 	movi	r8,1
    5cec:	003f9d06 	br	5b64 <__sfvwrite_r+0x224>
    5cf0:	80800517 	ldw	r2,20(r16)
    5cf4:	81400417 	ldw	r5,16(r16)
    5cf8:	81c00017 	ldw	r7,0(r16)
    5cfc:	10a7883a 	add	r19,r2,r2
    5d00:	9885883a 	add	r2,r19,r2
    5d04:	1026d7fa 	srli	r19,r2,31
    5d08:	396dc83a 	sub	r22,r7,r5
    5d0c:	b1000044 	addi	r4,r22,1
    5d10:	9885883a 	add	r2,r19,r2
    5d14:	1027d07a 	srai	r19,r2,1
    5d18:	2485883a 	add	r2,r4,r18
    5d1c:	980d883a 	mov	r6,r19
    5d20:	9880022e 	bgeu	r19,r2,5d2c <__sfvwrite_r+0x3ec>
    5d24:	1027883a 	mov	r19,r2
    5d28:	100d883a 	mov	r6,r2
    5d2c:	18c1000c 	andi	r3,r3,1024
    5d30:	18001c26 	beq	r3,zero,5da4 <__sfvwrite_r+0x464>
    5d34:	300b883a 	mov	r5,r6
    5d38:	a809883a 	mov	r4,r21
    5d3c:	000621c0 	call	621c <_malloc_r>
    5d40:	102f883a 	mov	r23,r2
    5d44:	10002926 	beq	r2,zero,5dec <__sfvwrite_r+0x4ac>
    5d48:	81400417 	ldw	r5,16(r16)
    5d4c:	b00d883a 	mov	r6,r22
    5d50:	1009883a 	mov	r4,r2
    5d54:	0006b0c0 	call	6b0c <memcpy>
    5d58:	8080030b 	ldhu	r2,12(r16)
    5d5c:	00fedfc4 	movi	r3,-1153
    5d60:	10c4703a 	and	r2,r2,r3
    5d64:	10802014 	ori	r2,r2,128
    5d68:	8080030d 	sth	r2,12(r16)
    5d6c:	bd89883a 	add	r4,r23,r22
    5d70:	9d8fc83a 	sub	r7,r19,r22
    5d74:	85c00415 	stw	r23,16(r16)
    5d78:	84c00515 	stw	r19,20(r16)
    5d7c:	81000015 	stw	r4,0(r16)
    5d80:	9027883a 	mov	r19,r18
    5d84:	81c00215 	stw	r7,8(r16)
    5d88:	902f883a 	mov	r23,r18
    5d8c:	003f3b06 	br	5a7c <__sfvwrite_r+0x13c>
    5d90:	800b883a 	mov	r5,r16
    5d94:	a809883a 	mov	r4,r21
    5d98:	00050e00 	call	50e0 <_fflush_r>
    5d9c:	103fb926 	beq	r2,zero,5c84 <__sfvwrite_r+0x344>
    5da0:	003f6506 	br	5b38 <__sfvwrite_r+0x1f8>
    5da4:	a809883a 	mov	r4,r21
    5da8:	0007ed40 	call	7ed4 <_realloc_r>
    5dac:	102f883a 	mov	r23,r2
    5db0:	103fee1e 	bne	r2,zero,5d6c <__sfvwrite_r+0x42c>
    5db4:	81400417 	ldw	r5,16(r16)
    5db8:	a809883a 	mov	r4,r21
    5dbc:	00056300 	call	5630 <_free_r>
    5dc0:	8080030b 	ldhu	r2,12(r16)
    5dc4:	00ffdfc4 	movi	r3,-129
    5dc8:	1884703a 	and	r2,r3,r2
    5dcc:	00c00304 	movi	r3,12
    5dd0:	a8c00015 	stw	r3,0(r21)
    5dd4:	003f5906 	br	5b3c <__sfvwrite_r+0x1fc>
    5dd8:	94c00044 	addi	r19,r18,1
    5ddc:	02000044 	movi	r8,1
    5de0:	003f6006 	br	5b64 <__sfvwrite_r+0x224>
    5de4:	00bfffc4 	movi	r2,-1
    5de8:	003f0306 	br	59f8 <__sfvwrite_r+0xb8>
    5dec:	00800304 	movi	r2,12
    5df0:	a8800015 	stw	r2,0(r21)
    5df4:	8080030b 	ldhu	r2,12(r16)
    5df8:	003f5006 	br	5b3c <__sfvwrite_r+0x1fc>

00005dfc <_fwalk>:
    5dfc:	defff704 	addi	sp,sp,-36
    5e00:	dd000415 	stw	r20,16(sp)
    5e04:	dfc00815 	stw	ra,32(sp)
    5e08:	ddc00715 	stw	r23,28(sp)
    5e0c:	dd800615 	stw	r22,24(sp)
    5e10:	dd400515 	stw	r21,20(sp)
    5e14:	dcc00315 	stw	r19,12(sp)
    5e18:	dc800215 	stw	r18,8(sp)
    5e1c:	dc400115 	stw	r17,4(sp)
    5e20:	dc000015 	stw	r16,0(sp)
    5e24:	2500b804 	addi	r20,r4,736
    5e28:	a0002326 	beq	r20,zero,5eb8 <_fwalk+0xbc>
    5e2c:	282b883a 	mov	r21,r5
    5e30:	002f883a 	mov	r23,zero
    5e34:	05800044 	movi	r22,1
    5e38:	04ffffc4 	movi	r19,-1
    5e3c:	a4400117 	ldw	r17,4(r20)
    5e40:	a4800217 	ldw	r18,8(r20)
    5e44:	8c7fffc4 	addi	r17,r17,-1
    5e48:	88000d16 	blt	r17,zero,5e80 <_fwalk+0x84>
    5e4c:	94000304 	addi	r16,r18,12
    5e50:	94800384 	addi	r18,r18,14
    5e54:	8080000b 	ldhu	r2,0(r16)
    5e58:	8c7fffc4 	addi	r17,r17,-1
    5e5c:	813ffd04 	addi	r4,r16,-12
    5e60:	b080042e 	bgeu	r22,r2,5e74 <_fwalk+0x78>
    5e64:	9080000f 	ldh	r2,0(r18)
    5e68:	14c00226 	beq	r2,r19,5e74 <_fwalk+0x78>
    5e6c:	a83ee83a 	callr	r21
    5e70:	b8aeb03a 	or	r23,r23,r2
    5e74:	84001a04 	addi	r16,r16,104
    5e78:	94801a04 	addi	r18,r18,104
    5e7c:	8cfff51e 	bne	r17,r19,5e54 <_fwalk+0x58>
    5e80:	a5000017 	ldw	r20,0(r20)
    5e84:	a03fed1e 	bne	r20,zero,5e3c <_fwalk+0x40>
    5e88:	b805883a 	mov	r2,r23
    5e8c:	dfc00817 	ldw	ra,32(sp)
    5e90:	ddc00717 	ldw	r23,28(sp)
    5e94:	dd800617 	ldw	r22,24(sp)
    5e98:	dd400517 	ldw	r21,20(sp)
    5e9c:	dd000417 	ldw	r20,16(sp)
    5ea0:	dcc00317 	ldw	r19,12(sp)
    5ea4:	dc800217 	ldw	r18,8(sp)
    5ea8:	dc400117 	ldw	r17,4(sp)
    5eac:	dc000017 	ldw	r16,0(sp)
    5eb0:	dec00904 	addi	sp,sp,36
    5eb4:	f800283a 	ret
    5eb8:	002f883a 	mov	r23,zero
    5ebc:	003ff206 	br	5e88 <_fwalk+0x8c>

00005ec0 <_fwalk_reent>:
    5ec0:	defff704 	addi	sp,sp,-36
    5ec4:	dd000415 	stw	r20,16(sp)
    5ec8:	dfc00815 	stw	ra,32(sp)
    5ecc:	ddc00715 	stw	r23,28(sp)
    5ed0:	dd800615 	stw	r22,24(sp)
    5ed4:	dd400515 	stw	r21,20(sp)
    5ed8:	dcc00315 	stw	r19,12(sp)
    5edc:	dc800215 	stw	r18,8(sp)
    5ee0:	dc400115 	stw	r17,4(sp)
    5ee4:	dc000015 	stw	r16,0(sp)
    5ee8:	2500b804 	addi	r20,r4,736
    5eec:	a0002326 	beq	r20,zero,5f7c <_fwalk_reent+0xbc>
    5ef0:	282b883a 	mov	r21,r5
    5ef4:	2027883a 	mov	r19,r4
    5ef8:	002f883a 	mov	r23,zero
    5efc:	05800044 	movi	r22,1
    5f00:	04bfffc4 	movi	r18,-1
    5f04:	a4400117 	ldw	r17,4(r20)
    5f08:	a4000217 	ldw	r16,8(r20)
    5f0c:	8c7fffc4 	addi	r17,r17,-1
    5f10:	88000c16 	blt	r17,zero,5f44 <_fwalk_reent+0x84>
    5f14:	84000304 	addi	r16,r16,12
    5f18:	8080000b 	ldhu	r2,0(r16)
    5f1c:	8c7fffc4 	addi	r17,r17,-1
    5f20:	817ffd04 	addi	r5,r16,-12
    5f24:	b080052e 	bgeu	r22,r2,5f3c <_fwalk_reent+0x7c>
    5f28:	8080008f 	ldh	r2,2(r16)
    5f2c:	9809883a 	mov	r4,r19
    5f30:	14800226 	beq	r2,r18,5f3c <_fwalk_reent+0x7c>
    5f34:	a83ee83a 	callr	r21
    5f38:	b8aeb03a 	or	r23,r23,r2
    5f3c:	84001a04 	addi	r16,r16,104
    5f40:	8cbff51e 	bne	r17,r18,5f18 <_fwalk_reent+0x58>
    5f44:	a5000017 	ldw	r20,0(r20)
    5f48:	a03fee1e 	bne	r20,zero,5f04 <_fwalk_reent+0x44>
    5f4c:	b805883a 	mov	r2,r23
    5f50:	dfc00817 	ldw	ra,32(sp)
    5f54:	ddc00717 	ldw	r23,28(sp)
    5f58:	dd800617 	ldw	r22,24(sp)
    5f5c:	dd400517 	ldw	r21,20(sp)
    5f60:	dd000417 	ldw	r20,16(sp)
    5f64:	dcc00317 	ldw	r19,12(sp)
    5f68:	dc800217 	ldw	r18,8(sp)
    5f6c:	dc400117 	ldw	r17,4(sp)
    5f70:	dc000017 	ldw	r16,0(sp)
    5f74:	dec00904 	addi	sp,sp,36
    5f78:	f800283a 	ret
    5f7c:	002f883a 	mov	r23,zero
    5f80:	003ff206 	br	5f4c <_fwalk_reent+0x8c>

00005f84 <_setlocale_r>:
    5f84:	30001b26 	beq	r6,zero,5ff4 <_setlocale_r+0x70>
    5f88:	014000b4 	movhi	r5,2
    5f8c:	defffe04 	addi	sp,sp,-8
    5f90:	2968b804 	addi	r5,r5,-23840
    5f94:	3009883a 	mov	r4,r6
    5f98:	dc000015 	stw	r16,0(sp)
    5f9c:	dfc00115 	stw	ra,4(sp)
    5fa0:	3021883a 	mov	r16,r6
    5fa4:	000863c0 	call	863c <strcmp>
    5fa8:	1000061e 	bne	r2,zero,5fc4 <_setlocale_r+0x40>
    5fac:	008000b4 	movhi	r2,2
    5fb0:	10a89904 	addi	r2,r2,-23964
    5fb4:	dfc00117 	ldw	ra,4(sp)
    5fb8:	dc000017 	ldw	r16,0(sp)
    5fbc:	dec00204 	addi	sp,sp,8
    5fc0:	f800283a 	ret
    5fc4:	014000b4 	movhi	r5,2
    5fc8:	29689904 	addi	r5,r5,-23964
    5fcc:	8009883a 	mov	r4,r16
    5fd0:	000863c0 	call	863c <strcmp>
    5fd4:	103ff526 	beq	r2,zero,5fac <_setlocale_r+0x28>
    5fd8:	014000b4 	movhi	r5,2
    5fdc:	2968a304 	addi	r5,r5,-23924
    5fe0:	8009883a 	mov	r4,r16
    5fe4:	000863c0 	call	863c <strcmp>
    5fe8:	103ff026 	beq	r2,zero,5fac <_setlocale_r+0x28>
    5fec:	0005883a 	mov	r2,zero
    5ff0:	003ff006 	br	5fb4 <_setlocale_r+0x30>
    5ff4:	008000b4 	movhi	r2,2
    5ff8:	10a89904 	addi	r2,r2,-23964
    5ffc:	f800283a 	ret

00006000 <__locale_charset>:
    6000:	008000b4 	movhi	r2,2
    6004:	10ab1904 	addi	r2,r2,-21404
    6008:	f800283a 	ret

0000600c <__locale_mb_cur_max>:
    600c:	008000b4 	movhi	r2,2
    6010:	10b17d04 	addi	r2,r2,-14860
    6014:	10800017 	ldw	r2,0(r2)
    6018:	f800283a 	ret

0000601c <__locale_msgcharset>:
    601c:	008000b4 	movhi	r2,2
    6020:	10ab1104 	addi	r2,r2,-21436
    6024:	f800283a 	ret

00006028 <__locale_cjk_lang>:
    6028:	0005883a 	mov	r2,zero
    602c:	f800283a 	ret

00006030 <_localeconv_r>:
    6030:	008000b4 	movhi	r2,2
    6034:	10ab2104 	addi	r2,r2,-21372
    6038:	f800283a 	ret

0000603c <setlocale>:
    603c:	008000b4 	movhi	r2,2
    6040:	10b17c04 	addi	r2,r2,-14864
    6044:	280d883a 	mov	r6,r5
    6048:	200b883a 	mov	r5,r4
    604c:	11000017 	ldw	r4,0(r2)
    6050:	0005f841 	jmpi	5f84 <_setlocale_r>

00006054 <localeconv>:
    6054:	008000b4 	movhi	r2,2
    6058:	10ab2104 	addi	r2,r2,-21372
    605c:	f800283a 	ret

00006060 <__smakebuf_r>:
    6060:	2880030b 	ldhu	r2,12(r5)
    6064:	10c0008c 	andi	r3,r2,2
    6068:	1800411e 	bne	r3,zero,6170 <__smakebuf_r+0x110>
    606c:	deffec04 	addi	sp,sp,-80
    6070:	dc000f15 	stw	r16,60(sp)
    6074:	2821883a 	mov	r16,r5
    6078:	2940038f 	ldh	r5,14(r5)
    607c:	dc401015 	stw	r17,64(sp)
    6080:	dfc01315 	stw	ra,76(sp)
    6084:	dcc01215 	stw	r19,72(sp)
    6088:	dc801115 	stw	r18,68(sp)
    608c:	2023883a 	mov	r17,r4
    6090:	28001c16 	blt	r5,zero,6104 <__smakebuf_r+0xa4>
    6094:	d80d883a 	mov	r6,sp
    6098:	000a1e40 	call	a1e4 <_fstat_r>
    609c:	10001816 	blt	r2,zero,6100 <__smakebuf_r+0xa0>
    60a0:	d8800117 	ldw	r2,4(sp)
    60a4:	00e00014 	movui	r3,32768
    60a8:	10bc000c 	andi	r2,r2,61440
    60ac:	14c80020 	cmpeqi	r19,r2,8192
    60b0:	10c03726 	beq	r2,r3,6190 <__smakebuf_r+0x130>
    60b4:	80c0030b 	ldhu	r3,12(r16)
    60b8:	18c20014 	ori	r3,r3,2048
    60bc:	80c0030d 	sth	r3,12(r16)
    60c0:	00c80004 	movi	r3,8192
    60c4:	10c0521e 	bne	r2,r3,6210 <__smakebuf_r+0x1b0>
    60c8:	8140038f 	ldh	r5,14(r16)
    60cc:	8809883a 	mov	r4,r17
    60d0:	000a2400 	call	a240 <_isatty_r>
    60d4:	10004c26 	beq	r2,zero,6208 <__smakebuf_r+0x1a8>
    60d8:	8080030b 	ldhu	r2,12(r16)
    60dc:	80c010c4 	addi	r3,r16,67
    60e0:	80c00015 	stw	r3,0(r16)
    60e4:	10800054 	ori	r2,r2,1
    60e8:	8080030d 	sth	r2,12(r16)
    60ec:	00800044 	movi	r2,1
    60f0:	80c00415 	stw	r3,16(r16)
    60f4:	80800515 	stw	r2,20(r16)
    60f8:	04810004 	movi	r18,1024
    60fc:	00000706 	br	611c <__smakebuf_r+0xbc>
    6100:	8080030b 	ldhu	r2,12(r16)
    6104:	10c0200c 	andi	r3,r2,128
    6108:	18001f1e 	bne	r3,zero,6188 <__smakebuf_r+0x128>
    610c:	04810004 	movi	r18,1024
    6110:	10820014 	ori	r2,r2,2048
    6114:	8080030d 	sth	r2,12(r16)
    6118:	0027883a 	mov	r19,zero
    611c:	900b883a 	mov	r5,r18
    6120:	8809883a 	mov	r4,r17
    6124:	000621c0 	call	621c <_malloc_r>
    6128:	10002c26 	beq	r2,zero,61dc <__smakebuf_r+0x17c>
    612c:	80c0030b 	ldhu	r3,12(r16)
    6130:	01000034 	movhi	r4,0
    6134:	21145d04 	addi	r4,r4,20852
    6138:	89000f15 	stw	r4,60(r17)
    613c:	18c02014 	ori	r3,r3,128
    6140:	80c0030d 	sth	r3,12(r16)
    6144:	80800015 	stw	r2,0(r16)
    6148:	80800415 	stw	r2,16(r16)
    614c:	84800515 	stw	r18,20(r16)
    6150:	98001a1e 	bne	r19,zero,61bc <__smakebuf_r+0x15c>
    6154:	dfc01317 	ldw	ra,76(sp)
    6158:	dcc01217 	ldw	r19,72(sp)
    615c:	dc801117 	ldw	r18,68(sp)
    6160:	dc401017 	ldw	r17,64(sp)
    6164:	dc000f17 	ldw	r16,60(sp)
    6168:	dec01404 	addi	sp,sp,80
    616c:	f800283a 	ret
    6170:	288010c4 	addi	r2,r5,67
    6174:	28800015 	stw	r2,0(r5)
    6178:	28800415 	stw	r2,16(r5)
    617c:	00800044 	movi	r2,1
    6180:	28800515 	stw	r2,20(r5)
    6184:	f800283a 	ret
    6188:	04801004 	movi	r18,64
    618c:	003fe006 	br	6110 <__smakebuf_r+0xb0>
    6190:	81000a17 	ldw	r4,40(r16)
    6194:	00c00074 	movhi	r3,1
    6198:	18e17604 	addi	r3,r3,-31272
    619c:	20ffc51e 	bne	r4,r3,60b4 <__smakebuf_r+0x54>
    61a0:	8080030b 	ldhu	r2,12(r16)
    61a4:	04810004 	movi	r18,1024
    61a8:	84801315 	stw	r18,76(r16)
    61ac:	1484b03a 	or	r2,r2,r18
    61b0:	8080030d 	sth	r2,12(r16)
    61b4:	0027883a 	mov	r19,zero
    61b8:	003fd806 	br	611c <__smakebuf_r+0xbc>
    61bc:	8140038f 	ldh	r5,14(r16)
    61c0:	8809883a 	mov	r4,r17
    61c4:	000a2400 	call	a240 <_isatty_r>
    61c8:	103fe226 	beq	r2,zero,6154 <__smakebuf_r+0xf4>
    61cc:	8080030b 	ldhu	r2,12(r16)
    61d0:	10800054 	ori	r2,r2,1
    61d4:	8080030d 	sth	r2,12(r16)
    61d8:	003fde06 	br	6154 <__smakebuf_r+0xf4>
    61dc:	8080030b 	ldhu	r2,12(r16)
    61e0:	10c0800c 	andi	r3,r2,512
    61e4:	183fdb1e 	bne	r3,zero,6154 <__smakebuf_r+0xf4>
    61e8:	10800094 	ori	r2,r2,2
    61ec:	80c010c4 	addi	r3,r16,67
    61f0:	8080030d 	sth	r2,12(r16)
    61f4:	00800044 	movi	r2,1
    61f8:	80c00015 	stw	r3,0(r16)
    61fc:	80c00415 	stw	r3,16(r16)
    6200:	80800515 	stw	r2,20(r16)
    6204:	003fd306 	br	6154 <__smakebuf_r+0xf4>
    6208:	04810004 	movi	r18,1024
    620c:	003fc306 	br	611c <__smakebuf_r+0xbc>
    6210:	0027883a 	mov	r19,zero
    6214:	04810004 	movi	r18,1024
    6218:	003fc006 	br	611c <__smakebuf_r+0xbc>

0000621c <_malloc_r>:
    621c:	defff504 	addi	sp,sp,-44
    6220:	dc800315 	stw	r18,12(sp)
    6224:	dfc00a15 	stw	ra,40(sp)
    6228:	df000915 	stw	fp,36(sp)
    622c:	ddc00815 	stw	r23,32(sp)
    6230:	dd800715 	stw	r22,28(sp)
    6234:	dd400615 	stw	r21,24(sp)
    6238:	dd000515 	stw	r20,20(sp)
    623c:	dcc00415 	stw	r19,16(sp)
    6240:	dc400215 	stw	r17,8(sp)
    6244:	dc000115 	stw	r16,4(sp)
    6248:	288002c4 	addi	r2,r5,11
    624c:	00c00584 	movi	r3,22
    6250:	2025883a 	mov	r18,r4
    6254:	18807f2e 	bgeu	r3,r2,6454 <_malloc_r+0x238>
    6258:	047ffe04 	movi	r17,-8
    625c:	1462703a 	and	r17,r2,r17
    6260:	8800a316 	blt	r17,zero,64f0 <_malloc_r+0x2d4>
    6264:	8940a236 	bltu	r17,r5,64f0 <_malloc_r+0x2d4>
    6268:	000e3c00 	call	e3c0 <__malloc_lock>
    626c:	00807dc4 	movi	r2,503
    6270:	1441e92e 	bgeu	r2,r17,6a18 <_malloc_r+0x7fc>
    6274:	8804d27a 	srli	r2,r17,9
    6278:	1000a126 	beq	r2,zero,6500 <_malloc_r+0x2e4>
    627c:	00c00104 	movi	r3,4
    6280:	18811e36 	bltu	r3,r2,66fc <_malloc_r+0x4e0>
    6284:	8804d1ba 	srli	r2,r17,6
    6288:	12000e44 	addi	r8,r2,57
    628c:	11c00e04 	addi	r7,r2,56
    6290:	4209883a 	add	r4,r8,r8
    6294:	04c000b4 	movhi	r19,2
    6298:	2109883a 	add	r4,r4,r4
    629c:	9ceb2f04 	addi	r19,r19,-21316
    62a0:	2109883a 	add	r4,r4,r4
    62a4:	9909883a 	add	r4,r19,r4
    62a8:	24000117 	ldw	r16,4(r4)
    62ac:	213ffe04 	addi	r4,r4,-8
    62b0:	24009726 	beq	r4,r16,6510 <_malloc_r+0x2f4>
    62b4:	80800117 	ldw	r2,4(r16)
    62b8:	01bfff04 	movi	r6,-4
    62bc:	014003c4 	movi	r5,15
    62c0:	1184703a 	and	r2,r2,r6
    62c4:	1447c83a 	sub	r3,r2,r17
    62c8:	28c00716 	blt	r5,r3,62e8 <_malloc_r+0xcc>
    62cc:	1800920e 	bge	r3,zero,6518 <_malloc_r+0x2fc>
    62d0:	84000317 	ldw	r16,12(r16)
    62d4:	24008e26 	beq	r4,r16,6510 <_malloc_r+0x2f4>
    62d8:	80800117 	ldw	r2,4(r16)
    62dc:	1184703a 	and	r2,r2,r6
    62e0:	1447c83a 	sub	r3,r2,r17
    62e4:	28fff90e 	bge	r5,r3,62cc <_malloc_r+0xb0>
    62e8:	3809883a 	mov	r4,r7
    62ec:	018000b4 	movhi	r6,2
    62f0:	9c000417 	ldw	r16,16(r19)
    62f4:	31ab2f04 	addi	r6,r6,-21316
    62f8:	32000204 	addi	r8,r6,8
    62fc:	82013426 	beq	r16,r8,67d0 <_malloc_r+0x5b4>
    6300:	80c00117 	ldw	r3,4(r16)
    6304:	00bfff04 	movi	r2,-4
    6308:	188e703a 	and	r7,r3,r2
    630c:	3c45c83a 	sub	r2,r7,r17
    6310:	00c003c4 	movi	r3,15
    6314:	18811f16 	blt	r3,r2,6794 <_malloc_r+0x578>
    6318:	32000515 	stw	r8,20(r6)
    631c:	32000415 	stw	r8,16(r6)
    6320:	10007f0e 	bge	r2,zero,6520 <_malloc_r+0x304>
    6324:	00807fc4 	movi	r2,511
    6328:	11c0fd36 	bltu	r2,r7,6720 <_malloc_r+0x504>
    632c:	3806d0fa 	srli	r3,r7,3
    6330:	01c00044 	movi	r7,1
    6334:	30800117 	ldw	r2,4(r6)
    6338:	19400044 	addi	r5,r3,1
    633c:	294b883a 	add	r5,r5,r5
    6340:	1807d0ba 	srai	r3,r3,2
    6344:	294b883a 	add	r5,r5,r5
    6348:	294b883a 	add	r5,r5,r5
    634c:	298b883a 	add	r5,r5,r6
    6350:	38c6983a 	sll	r3,r7,r3
    6354:	29c00017 	ldw	r7,0(r5)
    6358:	2a7ffe04 	addi	r9,r5,-8
    635c:	1886b03a 	or	r3,r3,r2
    6360:	82400315 	stw	r9,12(r16)
    6364:	81c00215 	stw	r7,8(r16)
    6368:	30c00115 	stw	r3,4(r6)
    636c:	2c000015 	stw	r16,0(r5)
    6370:	3c000315 	stw	r16,12(r7)
    6374:	2005d0ba 	srai	r2,r4,2
    6378:	01400044 	movi	r5,1
    637c:	288a983a 	sll	r5,r5,r2
    6380:	19406f36 	bltu	r3,r5,6540 <_malloc_r+0x324>
    6384:	28c4703a 	and	r2,r5,r3
    6388:	10000a1e 	bne	r2,zero,63b4 <_malloc_r+0x198>
    638c:	00bfff04 	movi	r2,-4
    6390:	294b883a 	add	r5,r5,r5
    6394:	2088703a 	and	r4,r4,r2
    6398:	28c4703a 	and	r2,r5,r3
    639c:	21000104 	addi	r4,r4,4
    63a0:	1000041e 	bne	r2,zero,63b4 <_malloc_r+0x198>
    63a4:	294b883a 	add	r5,r5,r5
    63a8:	28c4703a 	and	r2,r5,r3
    63ac:	21000104 	addi	r4,r4,4
    63b0:	103ffc26 	beq	r2,zero,63a4 <_malloc_r+0x188>
    63b4:	02bfff04 	movi	r10,-4
    63b8:	024003c4 	movi	r9,15
    63bc:	21800044 	addi	r6,r4,1
    63c0:	318d883a 	add	r6,r6,r6
    63c4:	318d883a 	add	r6,r6,r6
    63c8:	318d883a 	add	r6,r6,r6
    63cc:	998d883a 	add	r6,r19,r6
    63d0:	333ffe04 	addi	r12,r6,-8
    63d4:	2017883a 	mov	r11,r4
    63d8:	31800104 	addi	r6,r6,4
    63dc:	34000017 	ldw	r16,0(r6)
    63e0:	31fffd04 	addi	r7,r6,-12
    63e4:	81c0041e 	bne	r16,r7,63f8 <_malloc_r+0x1dc>
    63e8:	0000fb06 	br	67d8 <_malloc_r+0x5bc>
    63ec:	1801030e 	bge	r3,zero,67fc <_malloc_r+0x5e0>
    63f0:	84000317 	ldw	r16,12(r16)
    63f4:	81c0f826 	beq	r16,r7,67d8 <_malloc_r+0x5bc>
    63f8:	80800117 	ldw	r2,4(r16)
    63fc:	1284703a 	and	r2,r2,r10
    6400:	1447c83a 	sub	r3,r2,r17
    6404:	48fff90e 	bge	r9,r3,63ec <_malloc_r+0x1d0>
    6408:	80800317 	ldw	r2,12(r16)
    640c:	81000217 	ldw	r4,8(r16)
    6410:	89400054 	ori	r5,r17,1
    6414:	81400115 	stw	r5,4(r16)
    6418:	20800315 	stw	r2,12(r4)
    641c:	11000215 	stw	r4,8(r2)
    6420:	8463883a 	add	r17,r16,r17
    6424:	9c400515 	stw	r17,20(r19)
    6428:	9c400415 	stw	r17,16(r19)
    642c:	18800054 	ori	r2,r3,1
    6430:	88800115 	stw	r2,4(r17)
    6434:	8a000315 	stw	r8,12(r17)
    6438:	8a000215 	stw	r8,8(r17)
    643c:	88e3883a 	add	r17,r17,r3
    6440:	88c00015 	stw	r3,0(r17)
    6444:	9009883a 	mov	r4,r18
    6448:	000e4e00 	call	e4e0 <__malloc_unlock>
    644c:	80800204 	addi	r2,r16,8
    6450:	00001b06 	br	64c0 <_malloc_r+0x2a4>
    6454:	04400404 	movi	r17,16
    6458:	89402536 	bltu	r17,r5,64f0 <_malloc_r+0x2d4>
    645c:	000e3c00 	call	e3c0 <__malloc_lock>
    6460:	00800184 	movi	r2,6
    6464:	01000084 	movi	r4,2
    6468:	04c000b4 	movhi	r19,2
    646c:	1085883a 	add	r2,r2,r2
    6470:	9ceb2f04 	addi	r19,r19,-21316
    6474:	1085883a 	add	r2,r2,r2
    6478:	9885883a 	add	r2,r19,r2
    647c:	14000117 	ldw	r16,4(r2)
    6480:	10fffe04 	addi	r3,r2,-8
    6484:	80c0d926 	beq	r16,r3,67ec <_malloc_r+0x5d0>
    6488:	80c00117 	ldw	r3,4(r16)
    648c:	81000317 	ldw	r4,12(r16)
    6490:	00bfff04 	movi	r2,-4
    6494:	1884703a 	and	r2,r3,r2
    6498:	81400217 	ldw	r5,8(r16)
    649c:	8085883a 	add	r2,r16,r2
    64a0:	10c00117 	ldw	r3,4(r2)
    64a4:	29000315 	stw	r4,12(r5)
    64a8:	21400215 	stw	r5,8(r4)
    64ac:	18c00054 	ori	r3,r3,1
    64b0:	10c00115 	stw	r3,4(r2)
    64b4:	9009883a 	mov	r4,r18
    64b8:	000e4e00 	call	e4e0 <__malloc_unlock>
    64bc:	80800204 	addi	r2,r16,8
    64c0:	dfc00a17 	ldw	ra,40(sp)
    64c4:	df000917 	ldw	fp,36(sp)
    64c8:	ddc00817 	ldw	r23,32(sp)
    64cc:	dd800717 	ldw	r22,28(sp)
    64d0:	dd400617 	ldw	r21,24(sp)
    64d4:	dd000517 	ldw	r20,20(sp)
    64d8:	dcc00417 	ldw	r19,16(sp)
    64dc:	dc800317 	ldw	r18,12(sp)
    64e0:	dc400217 	ldw	r17,8(sp)
    64e4:	dc000117 	ldw	r16,4(sp)
    64e8:	dec00b04 	addi	sp,sp,44
    64ec:	f800283a 	ret
    64f0:	00800304 	movi	r2,12
    64f4:	90800015 	stw	r2,0(r18)
    64f8:	0005883a 	mov	r2,zero
    64fc:	003ff006 	br	64c0 <_malloc_r+0x2a4>
    6500:	01002004 	movi	r4,128
    6504:	02001004 	movi	r8,64
    6508:	01c00fc4 	movi	r7,63
    650c:	003f6106 	br	6294 <_malloc_r+0x78>
    6510:	4009883a 	mov	r4,r8
    6514:	003f7506 	br	62ec <_malloc_r+0xd0>
    6518:	81000317 	ldw	r4,12(r16)
    651c:	003fde06 	br	6498 <_malloc_r+0x27c>
    6520:	81c5883a 	add	r2,r16,r7
    6524:	11400117 	ldw	r5,4(r2)
    6528:	9009883a 	mov	r4,r18
    652c:	29400054 	ori	r5,r5,1
    6530:	11400115 	stw	r5,4(r2)
    6534:	000e4e00 	call	e4e0 <__malloc_unlock>
    6538:	80800204 	addi	r2,r16,8
    653c:	003fe006 	br	64c0 <_malloc_r+0x2a4>
    6540:	9c000217 	ldw	r16,8(r19)
    6544:	00bfff04 	movi	r2,-4
    6548:	85800117 	ldw	r22,4(r16)
    654c:	b0ac703a 	and	r22,r22,r2
    6550:	b4400336 	bltu	r22,r17,6560 <_malloc_r+0x344>
    6554:	b445c83a 	sub	r2,r22,r17
    6558:	00c003c4 	movi	r3,15
    655c:	18805d16 	blt	r3,r2,66d4 <_malloc_r+0x4b8>
    6560:	05c000b4 	movhi	r23,2
    6564:	008000b4 	movhi	r2,2
    6568:	10b97604 	addi	r2,r2,-6696
    656c:	bdf17e04 	addi	r23,r23,-14856
    6570:	15400017 	ldw	r21,0(r2)
    6574:	b8c00017 	ldw	r3,0(r23)
    6578:	00bfffc4 	movi	r2,-1
    657c:	858d883a 	add	r6,r16,r22
    6580:	8d6b883a 	add	r21,r17,r21
    6584:	1880ea26 	beq	r3,r2,6930 <_malloc_r+0x714>
    6588:	ad4403c4 	addi	r21,r21,4111
    658c:	00bc0004 	movi	r2,-4096
    6590:	a8aa703a 	and	r21,r21,r2
    6594:	a80b883a 	mov	r5,r21
    6598:	9009883a 	mov	r4,r18
    659c:	d9800015 	stw	r6,0(sp)
    65a0:	00084ac0 	call	84ac <_sbrk_r>
    65a4:	1029883a 	mov	r20,r2
    65a8:	00bfffc4 	movi	r2,-1
    65ac:	d9800017 	ldw	r6,0(sp)
    65b0:	a080e826 	beq	r20,r2,6954 <_malloc_r+0x738>
    65b4:	a180a636 	bltu	r20,r6,6850 <_malloc_r+0x634>
    65b8:	070000b4 	movhi	fp,2
    65bc:	e7399804 	addi	fp,fp,-6560
    65c0:	e0800017 	ldw	r2,0(fp)
    65c4:	a887883a 	add	r3,r21,r2
    65c8:	e0c00015 	stw	r3,0(fp)
    65cc:	3500e626 	beq	r6,r20,6968 <_malloc_r+0x74c>
    65d0:	b9000017 	ldw	r4,0(r23)
    65d4:	00bfffc4 	movi	r2,-1
    65d8:	2080ee26 	beq	r4,r2,6994 <_malloc_r+0x778>
    65dc:	a185c83a 	sub	r2,r20,r6
    65e0:	10c5883a 	add	r2,r2,r3
    65e4:	e0800015 	stw	r2,0(fp)
    65e8:	a0c001cc 	andi	r3,r20,7
    65ec:	1800bc26 	beq	r3,zero,68e0 <_malloc_r+0x6c4>
    65f0:	a0e9c83a 	sub	r20,r20,r3
    65f4:	00840204 	movi	r2,4104
    65f8:	a5000204 	addi	r20,r20,8
    65fc:	10c7c83a 	sub	r3,r2,r3
    6600:	a545883a 	add	r2,r20,r21
    6604:	1083ffcc 	andi	r2,r2,4095
    6608:	18abc83a 	sub	r21,r3,r2
    660c:	a80b883a 	mov	r5,r21
    6610:	9009883a 	mov	r4,r18
    6614:	00084ac0 	call	84ac <_sbrk_r>
    6618:	00ffffc4 	movi	r3,-1
    661c:	10c0e126 	beq	r2,r3,69a4 <_malloc_r+0x788>
    6620:	1505c83a 	sub	r2,r2,r20
    6624:	1545883a 	add	r2,r2,r21
    6628:	10800054 	ori	r2,r2,1
    662c:	e0c00017 	ldw	r3,0(fp)
    6630:	9d000215 	stw	r20,8(r19)
    6634:	a0800115 	stw	r2,4(r20)
    6638:	a8c7883a 	add	r3,r21,r3
    663c:	e0c00015 	stw	r3,0(fp)
    6640:	84c00e26 	beq	r16,r19,667c <_malloc_r+0x460>
    6644:	018003c4 	movi	r6,15
    6648:	3580a72e 	bgeu	r6,r22,68e8 <_malloc_r+0x6cc>
    664c:	81400117 	ldw	r5,4(r16)
    6650:	013ffe04 	movi	r4,-8
    6654:	b0bffd04 	addi	r2,r22,-12
    6658:	1104703a 	and	r2,r2,r4
    665c:	2900004c 	andi	r4,r5,1
    6660:	2088b03a 	or	r4,r4,r2
    6664:	81000115 	stw	r4,4(r16)
    6668:	01400144 	movi	r5,5
    666c:	8089883a 	add	r4,r16,r2
    6670:	21400115 	stw	r5,4(r4)
    6674:	21400215 	stw	r5,8(r4)
    6678:	3080cd36 	bltu	r6,r2,69b0 <_malloc_r+0x794>
    667c:	008000b4 	movhi	r2,2
    6680:	10b97504 	addi	r2,r2,-6700
    6684:	11000017 	ldw	r4,0(r2)
    6688:	20c0012e 	bgeu	r4,r3,6690 <_malloc_r+0x474>
    668c:	10c00015 	stw	r3,0(r2)
    6690:	008000b4 	movhi	r2,2
    6694:	10b97404 	addi	r2,r2,-6704
    6698:	11000017 	ldw	r4,0(r2)
    669c:	9c000217 	ldw	r16,8(r19)
    66a0:	20c0012e 	bgeu	r4,r3,66a8 <_malloc_r+0x48c>
    66a4:	10c00015 	stw	r3,0(r2)
    66a8:	80c00117 	ldw	r3,4(r16)
    66ac:	00bfff04 	movi	r2,-4
    66b0:	1886703a 	and	r3,r3,r2
    66b4:	1c45c83a 	sub	r2,r3,r17
    66b8:	1c400236 	bltu	r3,r17,66c4 <_malloc_r+0x4a8>
    66bc:	00c003c4 	movi	r3,15
    66c0:	18800416 	blt	r3,r2,66d4 <_malloc_r+0x4b8>
    66c4:	9009883a 	mov	r4,r18
    66c8:	000e4e00 	call	e4e0 <__malloc_unlock>
    66cc:	0005883a 	mov	r2,zero
    66d0:	003f7b06 	br	64c0 <_malloc_r+0x2a4>
    66d4:	88c00054 	ori	r3,r17,1
    66d8:	80c00115 	stw	r3,4(r16)
    66dc:	8463883a 	add	r17,r16,r17
    66e0:	10800054 	ori	r2,r2,1
    66e4:	9c400215 	stw	r17,8(r19)
    66e8:	88800115 	stw	r2,4(r17)
    66ec:	9009883a 	mov	r4,r18
    66f0:	000e4e00 	call	e4e0 <__malloc_unlock>
    66f4:	80800204 	addi	r2,r16,8
    66f8:	003f7106 	br	64c0 <_malloc_r+0x2a4>
    66fc:	00c00504 	movi	r3,20
    6700:	18804a2e 	bgeu	r3,r2,682c <_malloc_r+0x610>
    6704:	00c01504 	movi	r3,84
    6708:	18806e36 	bltu	r3,r2,68c4 <_malloc_r+0x6a8>
    670c:	8804d33a 	srli	r2,r17,12
    6710:	12001bc4 	addi	r8,r2,111
    6714:	11c01b84 	addi	r7,r2,110
    6718:	4209883a 	add	r4,r8,r8
    671c:	003edd06 	br	6294 <_malloc_r+0x78>
    6720:	3804d27a 	srli	r2,r7,9
    6724:	00c00104 	movi	r3,4
    6728:	1880442e 	bgeu	r3,r2,683c <_malloc_r+0x620>
    672c:	00c00504 	movi	r3,20
    6730:	18808136 	bltu	r3,r2,6938 <_malloc_r+0x71c>
    6734:	11401704 	addi	r5,r2,92
    6738:	10c016c4 	addi	r3,r2,91
    673c:	294b883a 	add	r5,r5,r5
    6740:	294b883a 	add	r5,r5,r5
    6744:	294b883a 	add	r5,r5,r5
    6748:	994b883a 	add	r5,r19,r5
    674c:	28800017 	ldw	r2,0(r5)
    6750:	018000b4 	movhi	r6,2
    6754:	297ffe04 	addi	r5,r5,-8
    6758:	31ab2f04 	addi	r6,r6,-21316
    675c:	28806526 	beq	r5,r2,68f4 <_malloc_r+0x6d8>
    6760:	01bfff04 	movi	r6,-4
    6764:	10c00117 	ldw	r3,4(r2)
    6768:	1986703a 	and	r3,r3,r6
    676c:	38c0022e 	bgeu	r7,r3,6778 <_malloc_r+0x55c>
    6770:	10800217 	ldw	r2,8(r2)
    6774:	28bffb1e 	bne	r5,r2,6764 <_malloc_r+0x548>
    6778:	11400317 	ldw	r5,12(r2)
    677c:	98c00117 	ldw	r3,4(r19)
    6780:	81400315 	stw	r5,12(r16)
    6784:	80800215 	stw	r2,8(r16)
    6788:	2c000215 	stw	r16,8(r5)
    678c:	14000315 	stw	r16,12(r2)
    6790:	003ef806 	br	6374 <_malloc_r+0x158>
    6794:	88c00054 	ori	r3,r17,1
    6798:	80c00115 	stw	r3,4(r16)
    679c:	8463883a 	add	r17,r16,r17
    67a0:	34400515 	stw	r17,20(r6)
    67a4:	34400415 	stw	r17,16(r6)
    67a8:	10c00054 	ori	r3,r2,1
    67ac:	8a000315 	stw	r8,12(r17)
    67b0:	8a000215 	stw	r8,8(r17)
    67b4:	88c00115 	stw	r3,4(r17)
    67b8:	88a3883a 	add	r17,r17,r2
    67bc:	88800015 	stw	r2,0(r17)
    67c0:	9009883a 	mov	r4,r18
    67c4:	000e4e00 	call	e4e0 <__malloc_unlock>
    67c8:	80800204 	addi	r2,r16,8
    67cc:	003f3c06 	br	64c0 <_malloc_r+0x2a4>
    67d0:	30c00117 	ldw	r3,4(r6)
    67d4:	003ee706 	br	6374 <_malloc_r+0x158>
    67d8:	5ac00044 	addi	r11,r11,1
    67dc:	588000cc 	andi	r2,r11,3
    67e0:	31800204 	addi	r6,r6,8
    67e4:	103efd1e 	bne	r2,zero,63dc <_malloc_r+0x1c0>
    67e8:	00002406 	br	687c <_malloc_r+0x660>
    67ec:	14000317 	ldw	r16,12(r2)
    67f0:	143f251e 	bne	r2,r16,6488 <_malloc_r+0x26c>
    67f4:	21000084 	addi	r4,r4,2
    67f8:	003ebc06 	br	62ec <_malloc_r+0xd0>
    67fc:	8085883a 	add	r2,r16,r2
    6800:	10c00117 	ldw	r3,4(r2)
    6804:	81000317 	ldw	r4,12(r16)
    6808:	81400217 	ldw	r5,8(r16)
    680c:	18c00054 	ori	r3,r3,1
    6810:	10c00115 	stw	r3,4(r2)
    6814:	29000315 	stw	r4,12(r5)
    6818:	21400215 	stw	r5,8(r4)
    681c:	9009883a 	mov	r4,r18
    6820:	000e4e00 	call	e4e0 <__malloc_unlock>
    6824:	80800204 	addi	r2,r16,8
    6828:	003f2506 	br	64c0 <_malloc_r+0x2a4>
    682c:	12001704 	addi	r8,r2,92
    6830:	11c016c4 	addi	r7,r2,91
    6834:	4209883a 	add	r4,r8,r8
    6838:	003e9606 	br	6294 <_malloc_r+0x78>
    683c:	3804d1ba 	srli	r2,r7,6
    6840:	11400e44 	addi	r5,r2,57
    6844:	10c00e04 	addi	r3,r2,56
    6848:	294b883a 	add	r5,r5,r5
    684c:	003fbc06 	br	6740 <_malloc_r+0x524>
    6850:	84ff5926 	beq	r16,r19,65b8 <_malloc_r+0x39c>
    6854:	008000b4 	movhi	r2,2
    6858:	10ab2f04 	addi	r2,r2,-21316
    685c:	14000217 	ldw	r16,8(r2)
    6860:	00bfff04 	movi	r2,-4
    6864:	80c00117 	ldw	r3,4(r16)
    6868:	1886703a 	and	r3,r3,r2
    686c:	003f9106 	br	66b4 <_malloc_r+0x498>
    6870:	60800217 	ldw	r2,8(r12)
    6874:	213fffc4 	addi	r4,r4,-1
    6878:	1300651e 	bne	r2,r12,6a10 <_malloc_r+0x7f4>
    687c:	208000cc 	andi	r2,r4,3
    6880:	633ffe04 	addi	r12,r12,-8
    6884:	103ffa1e 	bne	r2,zero,6870 <_malloc_r+0x654>
    6888:	98800117 	ldw	r2,4(r19)
    688c:	0146303a 	nor	r3,zero,r5
    6890:	1884703a 	and	r2,r3,r2
    6894:	98800115 	stw	r2,4(r19)
    6898:	294b883a 	add	r5,r5,r5
    689c:	117f2836 	bltu	r2,r5,6540 <_malloc_r+0x324>
    68a0:	283f2726 	beq	r5,zero,6540 <_malloc_r+0x324>
    68a4:	2886703a 	and	r3,r5,r2
    68a8:	5809883a 	mov	r4,r11
    68ac:	183ec31e 	bne	r3,zero,63bc <_malloc_r+0x1a0>
    68b0:	294b883a 	add	r5,r5,r5
    68b4:	2886703a 	and	r3,r5,r2
    68b8:	21000104 	addi	r4,r4,4
    68bc:	183ffc26 	beq	r3,zero,68b0 <_malloc_r+0x694>
    68c0:	003ebe06 	br	63bc <_malloc_r+0x1a0>
    68c4:	00c05504 	movi	r3,340
    68c8:	18801236 	bltu	r3,r2,6914 <_malloc_r+0x6f8>
    68cc:	8804d3fa 	srli	r2,r17,15
    68d0:	12001e04 	addi	r8,r2,120
    68d4:	11c01dc4 	addi	r7,r2,119
    68d8:	4209883a 	add	r4,r8,r8
    68dc:	003e6d06 	br	6294 <_malloc_r+0x78>
    68e0:	00c40004 	movi	r3,4096
    68e4:	003f4606 	br	6600 <_malloc_r+0x3e4>
    68e8:	00800044 	movi	r2,1
    68ec:	a0800115 	stw	r2,4(r20)
    68f0:	003f7406 	br	66c4 <_malloc_r+0x4a8>
    68f4:	1805d0ba 	srai	r2,r3,2
    68f8:	01c00044 	movi	r7,1
    68fc:	30c00117 	ldw	r3,4(r6)
    6900:	388e983a 	sll	r7,r7,r2
    6904:	2805883a 	mov	r2,r5
    6908:	38c6b03a 	or	r3,r7,r3
    690c:	30c00115 	stw	r3,4(r6)
    6910:	003f9b06 	br	6780 <_malloc_r+0x564>
    6914:	00c15504 	movi	r3,1364
    6918:	18801a36 	bltu	r3,r2,6984 <_malloc_r+0x768>
    691c:	8804d4ba 	srli	r2,r17,18
    6920:	12001f44 	addi	r8,r2,125
    6924:	11c01f04 	addi	r7,r2,124
    6928:	4209883a 	add	r4,r8,r8
    692c:	003e5906 	br	6294 <_malloc_r+0x78>
    6930:	ad400404 	addi	r21,r21,16
    6934:	003f1706 	br	6594 <_malloc_r+0x378>
    6938:	00c01504 	movi	r3,84
    693c:	18802336 	bltu	r3,r2,69cc <_malloc_r+0x7b0>
    6940:	3804d33a 	srli	r2,r7,12
    6944:	11401bc4 	addi	r5,r2,111
    6948:	10c01b84 	addi	r3,r2,110
    694c:	294b883a 	add	r5,r5,r5
    6950:	003f7b06 	br	6740 <_malloc_r+0x524>
    6954:	9c000217 	ldw	r16,8(r19)
    6958:	00bfff04 	movi	r2,-4
    695c:	80c00117 	ldw	r3,4(r16)
    6960:	1886703a 	and	r3,r3,r2
    6964:	003f5306 	br	66b4 <_malloc_r+0x498>
    6968:	3083ffcc 	andi	r2,r6,4095
    696c:	103f181e 	bne	r2,zero,65d0 <_malloc_r+0x3b4>
    6970:	99000217 	ldw	r4,8(r19)
    6974:	b545883a 	add	r2,r22,r21
    6978:	10800054 	ori	r2,r2,1
    697c:	20800115 	stw	r2,4(r4)
    6980:	003f3e06 	br	667c <_malloc_r+0x460>
    6984:	01003f84 	movi	r4,254
    6988:	02001fc4 	movi	r8,127
    698c:	01c01f84 	movi	r7,126
    6990:	003e4006 	br	6294 <_malloc_r+0x78>
    6994:	008000b4 	movhi	r2,2
    6998:	10b17e04 	addi	r2,r2,-14856
    699c:	15000015 	stw	r20,0(r2)
    69a0:	003f1106 	br	65e8 <_malloc_r+0x3cc>
    69a4:	00800044 	movi	r2,1
    69a8:	002b883a 	mov	r21,zero
    69ac:	003f1f06 	br	662c <_malloc_r+0x410>
    69b0:	81400204 	addi	r5,r16,8
    69b4:	9009883a 	mov	r4,r18
    69b8:	00056300 	call	5630 <_free_r>
    69bc:	008000b4 	movhi	r2,2
    69c0:	10b99804 	addi	r2,r2,-6560
    69c4:	10c00017 	ldw	r3,0(r2)
    69c8:	003f2c06 	br	667c <_malloc_r+0x460>
    69cc:	00c05504 	movi	r3,340
    69d0:	18800536 	bltu	r3,r2,69e8 <_malloc_r+0x7cc>
    69d4:	3804d3fa 	srli	r2,r7,15
    69d8:	11401e04 	addi	r5,r2,120
    69dc:	10c01dc4 	addi	r3,r2,119
    69e0:	294b883a 	add	r5,r5,r5
    69e4:	003f5606 	br	6740 <_malloc_r+0x524>
    69e8:	00c15504 	movi	r3,1364
    69ec:	18800536 	bltu	r3,r2,6a04 <_malloc_r+0x7e8>
    69f0:	3804d4ba 	srli	r2,r7,18
    69f4:	11401f44 	addi	r5,r2,125
    69f8:	10c01f04 	addi	r3,r2,124
    69fc:	294b883a 	add	r5,r5,r5
    6a00:	003f4f06 	br	6740 <_malloc_r+0x524>
    6a04:	01403f84 	movi	r5,254
    6a08:	00c01f84 	movi	r3,126
    6a0c:	003f4c06 	br	6740 <_malloc_r+0x524>
    6a10:	98800117 	ldw	r2,4(r19)
    6a14:	003fa006 	br	6898 <_malloc_r+0x67c>
    6a18:	8808d0fa 	srli	r4,r17,3
    6a1c:	20800044 	addi	r2,r4,1
    6a20:	1085883a 	add	r2,r2,r2
    6a24:	003e9006 	br	6468 <_malloc_r+0x24c>

00006a28 <memchr>:
    6a28:	208000cc 	andi	r2,r4,3
    6a2c:	280f883a 	mov	r7,r5
    6a30:	10003426 	beq	r2,zero,6b04 <memchr+0xdc>
    6a34:	30bfffc4 	addi	r2,r6,-1
    6a38:	30001a26 	beq	r6,zero,6aa4 <memchr+0x7c>
    6a3c:	20c00003 	ldbu	r3,0(r4)
    6a40:	29803fcc 	andi	r6,r5,255
    6a44:	30c0051e 	bne	r6,r3,6a5c <memchr+0x34>
    6a48:	00001806 	br	6aac <memchr+0x84>
    6a4c:	10001526 	beq	r2,zero,6aa4 <memchr+0x7c>
    6a50:	20c00003 	ldbu	r3,0(r4)
    6a54:	10bfffc4 	addi	r2,r2,-1
    6a58:	30c01426 	beq	r6,r3,6aac <memchr+0x84>
    6a5c:	21000044 	addi	r4,r4,1
    6a60:	20c000cc 	andi	r3,r4,3
    6a64:	183ff91e 	bne	r3,zero,6a4c <memchr+0x24>
    6a68:	020000c4 	movi	r8,3
    6a6c:	40801136 	bltu	r8,r2,6ab4 <memchr+0x8c>
    6a70:	10000c26 	beq	r2,zero,6aa4 <memchr+0x7c>
    6a74:	20c00003 	ldbu	r3,0(r4)
    6a78:	29403fcc 	andi	r5,r5,255
    6a7c:	28c00b26 	beq	r5,r3,6aac <memchr+0x84>
    6a80:	20c00044 	addi	r3,r4,1
    6a84:	39803fcc 	andi	r6,r7,255
    6a88:	2089883a 	add	r4,r4,r2
    6a8c:	00000306 	br	6a9c <memchr+0x74>
    6a90:	18c00044 	addi	r3,r3,1
    6a94:	197fffc3 	ldbu	r5,-1(r3)
    6a98:	31400526 	beq	r6,r5,6ab0 <memchr+0x88>
    6a9c:	1805883a 	mov	r2,r3
    6aa0:	20fffb1e 	bne	r4,r3,6a90 <memchr+0x68>
    6aa4:	0005883a 	mov	r2,zero
    6aa8:	f800283a 	ret
    6aac:	2005883a 	mov	r2,r4
    6ab0:	f800283a 	ret
    6ab4:	28c03fcc 	andi	r3,r5,255
    6ab8:	1812923a 	slli	r9,r3,8
    6abc:	02ffbff4 	movhi	r11,65279
    6ac0:	02a02074 	movhi	r10,32897
    6ac4:	48d2b03a 	or	r9,r9,r3
    6ac8:	4806943a 	slli	r3,r9,16
    6acc:	5affbfc4 	addi	r11,r11,-257
    6ad0:	52a02004 	addi	r10,r10,-32640
    6ad4:	48d2b03a 	or	r9,r9,r3
    6ad8:	20c00017 	ldw	r3,0(r4)
    6adc:	48c6f03a 	xor	r3,r9,r3
    6ae0:	1acd883a 	add	r6,r3,r11
    6ae4:	00c6303a 	nor	r3,zero,r3
    6ae8:	30c6703a 	and	r3,r6,r3
    6aec:	1a86703a 	and	r3,r3,r10
    6af0:	183fe01e 	bne	r3,zero,6a74 <memchr+0x4c>
    6af4:	10bfff04 	addi	r2,r2,-4
    6af8:	21000104 	addi	r4,r4,4
    6afc:	40bff636 	bltu	r8,r2,6ad8 <memchr+0xb0>
    6b00:	003fdb06 	br	6a70 <memchr+0x48>
    6b04:	3005883a 	mov	r2,r6
    6b08:	003fd706 	br	6a68 <memchr+0x40>

00006b0c <memcpy>:
    6b0c:	defffd04 	addi	sp,sp,-12
    6b10:	dfc00215 	stw	ra,8(sp)
    6b14:	dc400115 	stw	r17,4(sp)
    6b18:	dc000015 	stw	r16,0(sp)
    6b1c:	00c003c4 	movi	r3,15
    6b20:	2005883a 	mov	r2,r4
    6b24:	1980452e 	bgeu	r3,r6,6c3c <memcpy+0x130>
    6b28:	2906b03a 	or	r3,r5,r4
    6b2c:	18c000cc 	andi	r3,r3,3
    6b30:	1800441e 	bne	r3,zero,6c44 <memcpy+0x138>
    6b34:	347ffc04 	addi	r17,r6,-16
    6b38:	8822d13a 	srli	r17,r17,4
    6b3c:	28c00104 	addi	r3,r5,4
    6b40:	23400104 	addi	r13,r4,4
    6b44:	8820913a 	slli	r16,r17,4
    6b48:	2b000204 	addi	r12,r5,8
    6b4c:	22c00204 	addi	r11,r4,8
    6b50:	84000504 	addi	r16,r16,20
    6b54:	2a800304 	addi	r10,r5,12
    6b58:	22400304 	addi	r9,r4,12
    6b5c:	2c21883a 	add	r16,r5,r16
    6b60:	2811883a 	mov	r8,r5
    6b64:	200f883a 	mov	r7,r4
    6b68:	41000017 	ldw	r4,0(r8)
    6b6c:	1fc00017 	ldw	ra,0(r3)
    6b70:	63c00017 	ldw	r15,0(r12)
    6b74:	39000015 	stw	r4,0(r7)
    6b78:	53800017 	ldw	r14,0(r10)
    6b7c:	6fc00015 	stw	ra,0(r13)
    6b80:	5bc00015 	stw	r15,0(r11)
    6b84:	4b800015 	stw	r14,0(r9)
    6b88:	18c00404 	addi	r3,r3,16
    6b8c:	39c00404 	addi	r7,r7,16
    6b90:	42000404 	addi	r8,r8,16
    6b94:	6b400404 	addi	r13,r13,16
    6b98:	63000404 	addi	r12,r12,16
    6b9c:	5ac00404 	addi	r11,r11,16
    6ba0:	52800404 	addi	r10,r10,16
    6ba4:	4a400404 	addi	r9,r9,16
    6ba8:	1c3fef1e 	bne	r3,r16,6b68 <memcpy+0x5c>
    6bac:	89c00044 	addi	r7,r17,1
    6bb0:	380e913a 	slli	r7,r7,4
    6bb4:	310003cc 	andi	r4,r6,15
    6bb8:	02c000c4 	movi	r11,3
    6bbc:	11c7883a 	add	r3,r2,r7
    6bc0:	29cb883a 	add	r5,r5,r7
    6bc4:	5900212e 	bgeu	r11,r4,6c4c <memcpy+0x140>
    6bc8:	1813883a 	mov	r9,r3
    6bcc:	2811883a 	mov	r8,r5
    6bd0:	200f883a 	mov	r7,r4
    6bd4:	42800017 	ldw	r10,0(r8)
    6bd8:	4a400104 	addi	r9,r9,4
    6bdc:	39ffff04 	addi	r7,r7,-4
    6be0:	4abfff15 	stw	r10,-4(r9)
    6be4:	42000104 	addi	r8,r8,4
    6be8:	59fffa36 	bltu	r11,r7,6bd4 <memcpy+0xc8>
    6bec:	213fff04 	addi	r4,r4,-4
    6bf0:	2008d0ba 	srli	r4,r4,2
    6bf4:	318000cc 	andi	r6,r6,3
    6bf8:	21000044 	addi	r4,r4,1
    6bfc:	2109883a 	add	r4,r4,r4
    6c00:	2109883a 	add	r4,r4,r4
    6c04:	1907883a 	add	r3,r3,r4
    6c08:	290b883a 	add	r5,r5,r4
    6c0c:	30000626 	beq	r6,zero,6c28 <memcpy+0x11c>
    6c10:	198d883a 	add	r6,r3,r6
    6c14:	29c00003 	ldbu	r7,0(r5)
    6c18:	18c00044 	addi	r3,r3,1
    6c1c:	29400044 	addi	r5,r5,1
    6c20:	19ffffc5 	stb	r7,-1(r3)
    6c24:	19bffb1e 	bne	r3,r6,6c14 <memcpy+0x108>
    6c28:	dfc00217 	ldw	ra,8(sp)
    6c2c:	dc400117 	ldw	r17,4(sp)
    6c30:	dc000017 	ldw	r16,0(sp)
    6c34:	dec00304 	addi	sp,sp,12
    6c38:	f800283a 	ret
    6c3c:	2007883a 	mov	r3,r4
    6c40:	003ff206 	br	6c0c <memcpy+0x100>
    6c44:	2007883a 	mov	r3,r4
    6c48:	003ff106 	br	6c10 <memcpy+0x104>
    6c4c:	200d883a 	mov	r6,r4
    6c50:	003fee06 	br	6c0c <memcpy+0x100>

00006c54 <memmove>:
    6c54:	2005883a 	mov	r2,r4
    6c58:	29000b2e 	bgeu	r5,r4,6c88 <memmove+0x34>
    6c5c:	298f883a 	add	r7,r5,r6
    6c60:	21c0092e 	bgeu	r4,r7,6c88 <memmove+0x34>
    6c64:	2187883a 	add	r3,r4,r6
    6c68:	198bc83a 	sub	r5,r3,r6
    6c6c:	30004826 	beq	r6,zero,6d90 <memmove+0x13c>
    6c70:	39ffffc4 	addi	r7,r7,-1
    6c74:	39000003 	ldbu	r4,0(r7)
    6c78:	18ffffc4 	addi	r3,r3,-1
    6c7c:	19000005 	stb	r4,0(r3)
    6c80:	28fffb1e 	bne	r5,r3,6c70 <memmove+0x1c>
    6c84:	f800283a 	ret
    6c88:	00c003c4 	movi	r3,15
    6c8c:	1980412e 	bgeu	r3,r6,6d94 <memmove+0x140>
    6c90:	2886b03a 	or	r3,r5,r2
    6c94:	18c000cc 	andi	r3,r3,3
    6c98:	1800401e 	bne	r3,zero,6d9c <memmove+0x148>
    6c9c:	33fffc04 	addi	r15,r6,-16
    6ca0:	781ed13a 	srli	r15,r15,4
    6ca4:	28c00104 	addi	r3,r5,4
    6ca8:	13400104 	addi	r13,r2,4
    6cac:	781c913a 	slli	r14,r15,4
    6cb0:	2b000204 	addi	r12,r5,8
    6cb4:	12c00204 	addi	r11,r2,8
    6cb8:	73800504 	addi	r14,r14,20
    6cbc:	2a800304 	addi	r10,r5,12
    6cc0:	12400304 	addi	r9,r2,12
    6cc4:	2b9d883a 	add	r14,r5,r14
    6cc8:	2811883a 	mov	r8,r5
    6ccc:	100f883a 	mov	r7,r2
    6cd0:	41000017 	ldw	r4,0(r8)
    6cd4:	39c00404 	addi	r7,r7,16
    6cd8:	18c00404 	addi	r3,r3,16
    6cdc:	393ffc15 	stw	r4,-16(r7)
    6ce0:	193ffc17 	ldw	r4,-16(r3)
    6ce4:	6b400404 	addi	r13,r13,16
    6ce8:	5ac00404 	addi	r11,r11,16
    6cec:	693ffc15 	stw	r4,-16(r13)
    6cf0:	61000017 	ldw	r4,0(r12)
    6cf4:	4a400404 	addi	r9,r9,16
    6cf8:	42000404 	addi	r8,r8,16
    6cfc:	593ffc15 	stw	r4,-16(r11)
    6d00:	51000017 	ldw	r4,0(r10)
    6d04:	63000404 	addi	r12,r12,16
    6d08:	52800404 	addi	r10,r10,16
    6d0c:	493ffc15 	stw	r4,-16(r9)
    6d10:	1bbfef1e 	bne	r3,r14,6cd0 <memmove+0x7c>
    6d14:	79000044 	addi	r4,r15,1
    6d18:	2008913a 	slli	r4,r4,4
    6d1c:	328003cc 	andi	r10,r6,15
    6d20:	02c000c4 	movi	r11,3
    6d24:	1107883a 	add	r3,r2,r4
    6d28:	290b883a 	add	r5,r5,r4
    6d2c:	5a801e2e 	bgeu	r11,r10,6da8 <memmove+0x154>
    6d30:	1813883a 	mov	r9,r3
    6d34:	2811883a 	mov	r8,r5
    6d38:	500f883a 	mov	r7,r10
    6d3c:	41000017 	ldw	r4,0(r8)
    6d40:	4a400104 	addi	r9,r9,4
    6d44:	39ffff04 	addi	r7,r7,-4
    6d48:	493fff15 	stw	r4,-4(r9)
    6d4c:	42000104 	addi	r8,r8,4
    6d50:	59fffa36 	bltu	r11,r7,6d3c <memmove+0xe8>
    6d54:	513fff04 	addi	r4,r10,-4
    6d58:	2008d0ba 	srli	r4,r4,2
    6d5c:	318000cc 	andi	r6,r6,3
    6d60:	21000044 	addi	r4,r4,1
    6d64:	2109883a 	add	r4,r4,r4
    6d68:	2109883a 	add	r4,r4,r4
    6d6c:	1907883a 	add	r3,r3,r4
    6d70:	290b883a 	add	r5,r5,r4
    6d74:	30000b26 	beq	r6,zero,6da4 <memmove+0x150>
    6d78:	198d883a 	add	r6,r3,r6
    6d7c:	29c00003 	ldbu	r7,0(r5)
    6d80:	18c00044 	addi	r3,r3,1
    6d84:	29400044 	addi	r5,r5,1
    6d88:	19ffffc5 	stb	r7,-1(r3)
    6d8c:	19bffb1e 	bne	r3,r6,6d7c <memmove+0x128>
    6d90:	f800283a 	ret
    6d94:	1007883a 	mov	r3,r2
    6d98:	003ff606 	br	6d74 <memmove+0x120>
    6d9c:	1007883a 	mov	r3,r2
    6da0:	003ff506 	br	6d78 <memmove+0x124>
    6da4:	f800283a 	ret
    6da8:	500d883a 	mov	r6,r10
    6dac:	003ff106 	br	6d74 <memmove+0x120>

00006db0 <memset>:
    6db0:	20c000cc 	andi	r3,r4,3
    6db4:	2005883a 	mov	r2,r4
    6db8:	18004426 	beq	r3,zero,6ecc <memset+0x11c>
    6dbc:	31ffffc4 	addi	r7,r6,-1
    6dc0:	30004026 	beq	r6,zero,6ec4 <memset+0x114>
    6dc4:	2813883a 	mov	r9,r5
    6dc8:	200d883a 	mov	r6,r4
    6dcc:	2007883a 	mov	r3,r4
    6dd0:	00000406 	br	6de4 <memset+0x34>
    6dd4:	3a3fffc4 	addi	r8,r7,-1
    6dd8:	31800044 	addi	r6,r6,1
    6ddc:	38003926 	beq	r7,zero,6ec4 <memset+0x114>
    6de0:	400f883a 	mov	r7,r8
    6de4:	18c00044 	addi	r3,r3,1
    6de8:	32400005 	stb	r9,0(r6)
    6dec:	1a0000cc 	andi	r8,r3,3
    6df0:	403ff81e 	bne	r8,zero,6dd4 <memset+0x24>
    6df4:	010000c4 	movi	r4,3
    6df8:	21c02d2e 	bgeu	r4,r7,6eb0 <memset+0x100>
    6dfc:	29003fcc 	andi	r4,r5,255
    6e00:	200c923a 	slli	r6,r4,8
    6e04:	3108b03a 	or	r4,r6,r4
    6e08:	200c943a 	slli	r6,r4,16
    6e0c:	218cb03a 	or	r6,r4,r6
    6e10:	010003c4 	movi	r4,15
    6e14:	21c0182e 	bgeu	r4,r7,6e78 <memset+0xc8>
    6e18:	3b3ffc04 	addi	r12,r7,-16
    6e1c:	6018d13a 	srli	r12,r12,4
    6e20:	1a000104 	addi	r8,r3,4
    6e24:	1ac00204 	addi	r11,r3,8
    6e28:	6008913a 	slli	r4,r12,4
    6e2c:	1a800304 	addi	r10,r3,12
    6e30:	1813883a 	mov	r9,r3
    6e34:	21000504 	addi	r4,r4,20
    6e38:	1909883a 	add	r4,r3,r4
    6e3c:	49800015 	stw	r6,0(r9)
    6e40:	41800015 	stw	r6,0(r8)
    6e44:	59800015 	stw	r6,0(r11)
    6e48:	51800015 	stw	r6,0(r10)
    6e4c:	42000404 	addi	r8,r8,16
    6e50:	4a400404 	addi	r9,r9,16
    6e54:	5ac00404 	addi	r11,r11,16
    6e58:	52800404 	addi	r10,r10,16
    6e5c:	413ff71e 	bne	r8,r4,6e3c <memset+0x8c>
    6e60:	63000044 	addi	r12,r12,1
    6e64:	6018913a 	slli	r12,r12,4
    6e68:	39c003cc 	andi	r7,r7,15
    6e6c:	010000c4 	movi	r4,3
    6e70:	1b07883a 	add	r3,r3,r12
    6e74:	21c00e2e 	bgeu	r4,r7,6eb0 <memset+0x100>
    6e78:	1813883a 	mov	r9,r3
    6e7c:	3811883a 	mov	r8,r7
    6e80:	010000c4 	movi	r4,3
    6e84:	49800015 	stw	r6,0(r9)
    6e88:	423fff04 	addi	r8,r8,-4
    6e8c:	4a400104 	addi	r9,r9,4
    6e90:	223ffc36 	bltu	r4,r8,6e84 <memset+0xd4>
    6e94:	393fff04 	addi	r4,r7,-4
    6e98:	2008d0ba 	srli	r4,r4,2
    6e9c:	39c000cc 	andi	r7,r7,3
    6ea0:	21000044 	addi	r4,r4,1
    6ea4:	2109883a 	add	r4,r4,r4
    6ea8:	2109883a 	add	r4,r4,r4
    6eac:	1907883a 	add	r3,r3,r4
    6eb0:	38000526 	beq	r7,zero,6ec8 <memset+0x118>
    6eb4:	19cf883a 	add	r7,r3,r7
    6eb8:	19400005 	stb	r5,0(r3)
    6ebc:	18c00044 	addi	r3,r3,1
    6ec0:	38fffd1e 	bne	r7,r3,6eb8 <memset+0x108>
    6ec4:	f800283a 	ret
    6ec8:	f800283a 	ret
    6ecc:	2007883a 	mov	r3,r4
    6ed0:	300f883a 	mov	r7,r6
    6ed4:	003fc706 	br	6df4 <memset+0x44>

00006ed8 <_Balloc>:
    6ed8:	20801317 	ldw	r2,76(r4)
    6edc:	defffc04 	addi	sp,sp,-16
    6ee0:	dc400115 	stw	r17,4(sp)
    6ee4:	dc000015 	stw	r16,0(sp)
    6ee8:	dfc00315 	stw	ra,12(sp)
    6eec:	dc800215 	stw	r18,8(sp)
    6ef0:	2023883a 	mov	r17,r4
    6ef4:	2821883a 	mov	r16,r5
    6ef8:	10000f26 	beq	r2,zero,6f38 <_Balloc+0x60>
    6efc:	8407883a 	add	r3,r16,r16
    6f00:	18c7883a 	add	r3,r3,r3
    6f04:	10c7883a 	add	r3,r2,r3
    6f08:	18800017 	ldw	r2,0(r3)
    6f0c:	10001126 	beq	r2,zero,6f54 <_Balloc+0x7c>
    6f10:	11000017 	ldw	r4,0(r2)
    6f14:	19000015 	stw	r4,0(r3)
    6f18:	10000415 	stw	zero,16(r2)
    6f1c:	10000315 	stw	zero,12(r2)
    6f20:	dfc00317 	ldw	ra,12(sp)
    6f24:	dc800217 	ldw	r18,8(sp)
    6f28:	dc400117 	ldw	r17,4(sp)
    6f2c:	dc000017 	ldw	r16,0(sp)
    6f30:	dec00404 	addi	sp,sp,16
    6f34:	f800283a 	ret
    6f38:	01800844 	movi	r6,33
    6f3c:	01400104 	movi	r5,4
    6f40:	0009e140 	call	9e14 <_calloc_r>
    6f44:	88801315 	stw	r2,76(r17)
    6f48:	103fec1e 	bne	r2,zero,6efc <_Balloc+0x24>
    6f4c:	0005883a 	mov	r2,zero
    6f50:	003ff306 	br	6f20 <_Balloc+0x48>
    6f54:	01400044 	movi	r5,1
    6f58:	2c24983a 	sll	r18,r5,r16
    6f5c:	8809883a 	mov	r4,r17
    6f60:	91800144 	addi	r6,r18,5
    6f64:	318d883a 	add	r6,r6,r6
    6f68:	318d883a 	add	r6,r6,r6
    6f6c:	0009e140 	call	9e14 <_calloc_r>
    6f70:	103ff626 	beq	r2,zero,6f4c <_Balloc+0x74>
    6f74:	14000115 	stw	r16,4(r2)
    6f78:	14800215 	stw	r18,8(r2)
    6f7c:	003fe606 	br	6f18 <_Balloc+0x40>

00006f80 <_Bfree>:
    6f80:	28000826 	beq	r5,zero,6fa4 <_Bfree+0x24>
    6f84:	28c00117 	ldw	r3,4(r5)
    6f88:	20801317 	ldw	r2,76(r4)
    6f8c:	18c7883a 	add	r3,r3,r3
    6f90:	18c7883a 	add	r3,r3,r3
    6f94:	10c5883a 	add	r2,r2,r3
    6f98:	10c00017 	ldw	r3,0(r2)
    6f9c:	28c00015 	stw	r3,0(r5)
    6fa0:	11400015 	stw	r5,0(r2)
    6fa4:	f800283a 	ret

00006fa8 <__multadd>:
    6fa8:	defffa04 	addi	sp,sp,-24
    6fac:	dc800315 	stw	r18,12(sp)
    6fb0:	dc400215 	stw	r17,8(sp)
    6fb4:	dc000115 	stw	r16,4(sp)
    6fb8:	2823883a 	mov	r17,r5
    6fbc:	2c000417 	ldw	r16,16(r5)
    6fc0:	dfc00515 	stw	ra,20(sp)
    6fc4:	dcc00415 	stw	r19,16(sp)
    6fc8:	2025883a 	mov	r18,r4
    6fcc:	29400504 	addi	r5,r5,20
    6fd0:	0011883a 	mov	r8,zero
    6fd4:	28c00017 	ldw	r3,0(r5)
    6fd8:	29400104 	addi	r5,r5,4
    6fdc:	42000044 	addi	r8,r8,1
    6fe0:	18bfffcc 	andi	r2,r3,65535
    6fe4:	1185383a 	mul	r2,r2,r6
    6fe8:	1806d43a 	srli	r3,r3,16
    6fec:	11cf883a 	add	r7,r2,r7
    6ff0:	3808d43a 	srli	r4,r7,16
    6ff4:	1987383a 	mul	r3,r3,r6
    6ff8:	38bfffcc 	andi	r2,r7,65535
    6ffc:	1907883a 	add	r3,r3,r4
    7000:	1808943a 	slli	r4,r3,16
    7004:	180ed43a 	srli	r7,r3,16
    7008:	2085883a 	add	r2,r4,r2
    700c:	28bfff15 	stw	r2,-4(r5)
    7010:	443ff016 	blt	r8,r16,6fd4 <__multadd+0x2c>
    7014:	38000926 	beq	r7,zero,703c <__multadd+0x94>
    7018:	88800217 	ldw	r2,8(r17)
    701c:	80800f0e 	bge	r16,r2,705c <__multadd+0xb4>
    7020:	80800144 	addi	r2,r16,5
    7024:	1085883a 	add	r2,r2,r2
    7028:	1085883a 	add	r2,r2,r2
    702c:	8885883a 	add	r2,r17,r2
    7030:	11c00015 	stw	r7,0(r2)
    7034:	84000044 	addi	r16,r16,1
    7038:	8c000415 	stw	r16,16(r17)
    703c:	8805883a 	mov	r2,r17
    7040:	dfc00517 	ldw	ra,20(sp)
    7044:	dcc00417 	ldw	r19,16(sp)
    7048:	dc800317 	ldw	r18,12(sp)
    704c:	dc400217 	ldw	r17,8(sp)
    7050:	dc000117 	ldw	r16,4(sp)
    7054:	dec00604 	addi	sp,sp,24
    7058:	f800283a 	ret
    705c:	89400117 	ldw	r5,4(r17)
    7060:	9009883a 	mov	r4,r18
    7064:	d9c00015 	stw	r7,0(sp)
    7068:	29400044 	addi	r5,r5,1
    706c:	0006ed80 	call	6ed8 <_Balloc>
    7070:	89800417 	ldw	r6,16(r17)
    7074:	89400304 	addi	r5,r17,12
    7078:	11000304 	addi	r4,r2,12
    707c:	31800084 	addi	r6,r6,2
    7080:	318d883a 	add	r6,r6,r6
    7084:	318d883a 	add	r6,r6,r6
    7088:	1027883a 	mov	r19,r2
    708c:	0006b0c0 	call	6b0c <memcpy>
    7090:	d9c00017 	ldw	r7,0(sp)
    7094:	88000a26 	beq	r17,zero,70c0 <__multadd+0x118>
    7098:	88c00117 	ldw	r3,4(r17)
    709c:	90801317 	ldw	r2,76(r18)
    70a0:	18c7883a 	add	r3,r3,r3
    70a4:	18c7883a 	add	r3,r3,r3
    70a8:	10c5883a 	add	r2,r2,r3
    70ac:	10c00017 	ldw	r3,0(r2)
    70b0:	88c00015 	stw	r3,0(r17)
    70b4:	14400015 	stw	r17,0(r2)
    70b8:	9823883a 	mov	r17,r19
    70bc:	003fd806 	br	7020 <__multadd+0x78>
    70c0:	9823883a 	mov	r17,r19
    70c4:	003fd606 	br	7020 <__multadd+0x78>

000070c8 <__s2b>:
    70c8:	defff904 	addi	sp,sp,-28
    70cc:	dc400115 	stw	r17,4(sp)
    70d0:	dc000015 	stw	r16,0(sp)
    70d4:	2023883a 	mov	r17,r4
    70d8:	2821883a 	mov	r16,r5
    70dc:	39000204 	addi	r4,r7,8
    70e0:	01400244 	movi	r5,9
    70e4:	dcc00315 	stw	r19,12(sp)
    70e8:	dc800215 	stw	r18,8(sp)
    70ec:	dfc00615 	stw	ra,24(sp)
    70f0:	dd400515 	stw	r21,20(sp)
    70f4:	dd000415 	stw	r20,16(sp)
    70f8:	3825883a 	mov	r18,r7
    70fc:	3027883a 	mov	r19,r6
    7100:	000b1440 	call	b144 <__divsi3>
    7104:	00c00044 	movi	r3,1
    7108:	000b883a 	mov	r5,zero
    710c:	1880030e 	bge	r3,r2,711c <__s2b+0x54>
    7110:	18c7883a 	add	r3,r3,r3
    7114:	29400044 	addi	r5,r5,1
    7118:	18bffd16 	blt	r3,r2,7110 <__s2b+0x48>
    711c:	8809883a 	mov	r4,r17
    7120:	0006ed80 	call	6ed8 <_Balloc>
    7124:	d8c00717 	ldw	r3,28(sp)
    7128:	10c00515 	stw	r3,20(r2)
    712c:	00c00044 	movi	r3,1
    7130:	10c00415 	stw	r3,16(r2)
    7134:	00c00244 	movi	r3,9
    7138:	1cc0210e 	bge	r3,r19,71c0 <__s2b+0xf8>
    713c:	80eb883a 	add	r21,r16,r3
    7140:	a829883a 	mov	r20,r21
    7144:	84e1883a 	add	r16,r16,r19
    7148:	a1c00007 	ldb	r7,0(r20)
    714c:	01800284 	movi	r6,10
    7150:	a5000044 	addi	r20,r20,1
    7154:	100b883a 	mov	r5,r2
    7158:	39fff404 	addi	r7,r7,-48
    715c:	8809883a 	mov	r4,r17
    7160:	0006fa80 	call	6fa8 <__multadd>
    7164:	a43ff81e 	bne	r20,r16,7148 <__s2b+0x80>
    7168:	ace1883a 	add	r16,r21,r19
    716c:	843ffe04 	addi	r16,r16,-8
    7170:	9c800a0e 	bge	r19,r18,719c <__s2b+0xd4>
    7174:	94e5c83a 	sub	r18,r18,r19
    7178:	84a5883a 	add	r18,r16,r18
    717c:	81c00007 	ldb	r7,0(r16)
    7180:	01800284 	movi	r6,10
    7184:	84000044 	addi	r16,r16,1
    7188:	100b883a 	mov	r5,r2
    718c:	39fff404 	addi	r7,r7,-48
    7190:	8809883a 	mov	r4,r17
    7194:	0006fa80 	call	6fa8 <__multadd>
    7198:	84bff81e 	bne	r16,r18,717c <__s2b+0xb4>
    719c:	dfc00617 	ldw	ra,24(sp)
    71a0:	dd400517 	ldw	r21,20(sp)
    71a4:	dd000417 	ldw	r20,16(sp)
    71a8:	dcc00317 	ldw	r19,12(sp)
    71ac:	dc800217 	ldw	r18,8(sp)
    71b0:	dc400117 	ldw	r17,4(sp)
    71b4:	dc000017 	ldw	r16,0(sp)
    71b8:	dec00704 	addi	sp,sp,28
    71bc:	f800283a 	ret
    71c0:	84000284 	addi	r16,r16,10
    71c4:	1827883a 	mov	r19,r3
    71c8:	003fe906 	br	7170 <__s2b+0xa8>

000071cc <__hi0bits>:
    71cc:	20bfffec 	andhi	r2,r4,65535
    71d0:	1000141e 	bne	r2,zero,7224 <__hi0bits+0x58>
    71d4:	2008943a 	slli	r4,r4,16
    71d8:	00800404 	movi	r2,16
    71dc:	20ffc02c 	andhi	r3,r4,65280
    71e0:	1800021e 	bne	r3,zero,71ec <__hi0bits+0x20>
    71e4:	2008923a 	slli	r4,r4,8
    71e8:	10800204 	addi	r2,r2,8
    71ec:	20fc002c 	andhi	r3,r4,61440
    71f0:	1800021e 	bne	r3,zero,71fc <__hi0bits+0x30>
    71f4:	2008913a 	slli	r4,r4,4
    71f8:	10800104 	addi	r2,r2,4
    71fc:	20f0002c 	andhi	r3,r4,49152
    7200:	1800031e 	bne	r3,zero,7210 <__hi0bits+0x44>
    7204:	2109883a 	add	r4,r4,r4
    7208:	10800084 	addi	r2,r2,2
    720c:	2109883a 	add	r4,r4,r4
    7210:	20000316 	blt	r4,zero,7220 <__hi0bits+0x54>
    7214:	2110002c 	andhi	r4,r4,16384
    7218:	2000041e 	bne	r4,zero,722c <__hi0bits+0x60>
    721c:	00800804 	movi	r2,32
    7220:	f800283a 	ret
    7224:	0005883a 	mov	r2,zero
    7228:	003fec06 	br	71dc <__hi0bits+0x10>
    722c:	10800044 	addi	r2,r2,1
    7230:	f800283a 	ret

00007234 <__lo0bits>:
    7234:	20c00017 	ldw	r3,0(r4)
    7238:	188001cc 	andi	r2,r3,7
    723c:	10000826 	beq	r2,zero,7260 <__lo0bits+0x2c>
    7240:	1880004c 	andi	r2,r3,1
    7244:	1000211e 	bne	r2,zero,72cc <__lo0bits+0x98>
    7248:	1880008c 	andi	r2,r3,2
    724c:	1000211e 	bne	r2,zero,72d4 <__lo0bits+0xa0>
    7250:	1806d0ba 	srli	r3,r3,2
    7254:	00800084 	movi	r2,2
    7258:	20c00015 	stw	r3,0(r4)
    725c:	f800283a 	ret
    7260:	18bfffcc 	andi	r2,r3,65535
    7264:	10001326 	beq	r2,zero,72b4 <__lo0bits+0x80>
    7268:	0005883a 	mov	r2,zero
    726c:	19403fcc 	andi	r5,r3,255
    7270:	2800021e 	bne	r5,zero,727c <__lo0bits+0x48>
    7274:	1806d23a 	srli	r3,r3,8
    7278:	10800204 	addi	r2,r2,8
    727c:	194003cc 	andi	r5,r3,15
    7280:	2800021e 	bne	r5,zero,728c <__lo0bits+0x58>
    7284:	1806d13a 	srli	r3,r3,4
    7288:	10800104 	addi	r2,r2,4
    728c:	194000cc 	andi	r5,r3,3
    7290:	2800021e 	bne	r5,zero,729c <__lo0bits+0x68>
    7294:	1806d0ba 	srli	r3,r3,2
    7298:	10800084 	addi	r2,r2,2
    729c:	1940004c 	andi	r5,r3,1
    72a0:	2800081e 	bne	r5,zero,72c4 <__lo0bits+0x90>
    72a4:	1806d07a 	srli	r3,r3,1
    72a8:	1800051e 	bne	r3,zero,72c0 <__lo0bits+0x8c>
    72ac:	00800804 	movi	r2,32
    72b0:	f800283a 	ret
    72b4:	1806d43a 	srli	r3,r3,16
    72b8:	00800404 	movi	r2,16
    72bc:	003feb06 	br	726c <__lo0bits+0x38>
    72c0:	10800044 	addi	r2,r2,1
    72c4:	20c00015 	stw	r3,0(r4)
    72c8:	f800283a 	ret
    72cc:	0005883a 	mov	r2,zero
    72d0:	f800283a 	ret
    72d4:	1806d07a 	srli	r3,r3,1
    72d8:	00800044 	movi	r2,1
    72dc:	20c00015 	stw	r3,0(r4)
    72e0:	f800283a 	ret

000072e4 <__i2b>:
    72e4:	defffd04 	addi	sp,sp,-12
    72e8:	dc000015 	stw	r16,0(sp)
    72ec:	04000044 	movi	r16,1
    72f0:	dc400115 	stw	r17,4(sp)
    72f4:	2823883a 	mov	r17,r5
    72f8:	800b883a 	mov	r5,r16
    72fc:	dfc00215 	stw	ra,8(sp)
    7300:	0006ed80 	call	6ed8 <_Balloc>
    7304:	14400515 	stw	r17,20(r2)
    7308:	14000415 	stw	r16,16(r2)
    730c:	dfc00217 	ldw	ra,8(sp)
    7310:	dc400117 	ldw	r17,4(sp)
    7314:	dc000017 	ldw	r16,0(sp)
    7318:	dec00304 	addi	sp,sp,12
    731c:	f800283a 	ret

00007320 <__multiply>:
    7320:	defffa04 	addi	sp,sp,-24
    7324:	dcc00315 	stw	r19,12(sp)
    7328:	dc800215 	stw	r18,8(sp)
    732c:	34c00417 	ldw	r19,16(r6)
    7330:	2c800417 	ldw	r18,16(r5)
    7334:	dd000415 	stw	r20,16(sp)
    7338:	dc400115 	stw	r17,4(sp)
    733c:	dfc00515 	stw	ra,20(sp)
    7340:	dc000015 	stw	r16,0(sp)
    7344:	2829883a 	mov	r20,r5
    7348:	3023883a 	mov	r17,r6
    734c:	94c0050e 	bge	r18,r19,7364 <__multiply+0x44>
    7350:	9007883a 	mov	r3,r18
    7354:	3029883a 	mov	r20,r6
    7358:	9825883a 	mov	r18,r19
    735c:	2823883a 	mov	r17,r5
    7360:	1827883a 	mov	r19,r3
    7364:	a0800217 	ldw	r2,8(r20)
    7368:	94e1883a 	add	r16,r18,r19
    736c:	a1400117 	ldw	r5,4(r20)
    7370:	1400010e 	bge	r2,r16,7378 <__multiply+0x58>
    7374:	29400044 	addi	r5,r5,1
    7378:	0006ed80 	call	6ed8 <_Balloc>
    737c:	8415883a 	add	r10,r16,r16
    7380:	12c00504 	addi	r11,r2,20
    7384:	5295883a 	add	r10,r10,r10
    7388:	5a95883a 	add	r10,r11,r10
    738c:	5807883a 	mov	r3,r11
    7390:	5a80032e 	bgeu	r11,r10,73a0 <__multiply+0x80>
    7394:	18000015 	stw	zero,0(r3)
    7398:	18c00104 	addi	r3,r3,4
    739c:	1abffd36 	bltu	r3,r10,7394 <__multiply+0x74>
    73a0:	9ce7883a 	add	r19,r19,r19
    73a4:	94a5883a 	add	r18,r18,r18
    73a8:	89800504 	addi	r6,r17,20
    73ac:	9ce7883a 	add	r19,r19,r19
    73b0:	a3400504 	addi	r13,r20,20
    73b4:	94a5883a 	add	r18,r18,r18
    73b8:	34d9883a 	add	r12,r6,r19
    73bc:	6c93883a 	add	r9,r13,r18
    73c0:	3300422e 	bgeu	r6,r12,74cc <__multiply+0x1ac>
    73c4:	37c00017 	ldw	ra,0(r6)
    73c8:	fbffffcc 	andi	r15,ra,65535
    73cc:	78001b26 	beq	r15,zero,743c <__multiply+0x11c>
    73d0:	5811883a 	mov	r8,r11
    73d4:	681d883a 	mov	r14,r13
    73d8:	000f883a 	mov	r7,zero
    73dc:	71000017 	ldw	r4,0(r14)
    73e0:	40c00017 	ldw	r3,0(r8)
    73e4:	73800104 	addi	r14,r14,4
    73e8:	217fffcc 	andi	r5,r4,65535
    73ec:	2bcb383a 	mul	r5,r5,r15
    73f0:	2008d43a 	srli	r4,r4,16
    73f4:	1c7fffcc 	andi	r17,r3,65535
    73f8:	2c4b883a 	add	r5,r5,r17
    73fc:	29cb883a 	add	r5,r5,r7
    7400:	23c9383a 	mul	r4,r4,r15
    7404:	1806d43a 	srli	r3,r3,16
    7408:	280ed43a 	srli	r7,r5,16
    740c:	297fffcc 	andi	r5,r5,65535
    7410:	20c7883a 	add	r3,r4,r3
    7414:	19c7883a 	add	r3,r3,r7
    7418:	1808943a 	slli	r4,r3,16
    741c:	4023883a 	mov	r17,r8
    7420:	180ed43a 	srli	r7,r3,16
    7424:	214ab03a 	or	r5,r4,r5
    7428:	41400015 	stw	r5,0(r8)
    742c:	42000104 	addi	r8,r8,4
    7430:	727fea36 	bltu	r14,r9,73dc <__multiply+0xbc>
    7434:	89c00115 	stw	r7,4(r17)
    7438:	37c00017 	ldw	ra,0(r6)
    743c:	f83ed43a 	srli	ra,ra,16
    7440:	f8001f26 	beq	ra,zero,74c0 <__multiply+0x1a0>
    7444:	58c00017 	ldw	r3,0(r11)
    7448:	681d883a 	mov	r14,r13
    744c:	581f883a 	mov	r15,r11
    7450:	1811883a 	mov	r8,r3
    7454:	5825883a 	mov	r18,r11
    7458:	000f883a 	mov	r7,zero
    745c:	00000106 	br	7464 <__multiply+0x144>
    7460:	8825883a 	mov	r18,r17
    7464:	7140000b 	ldhu	r5,0(r14)
    7468:	4010d43a 	srli	r8,r8,16
    746c:	193fffcc 	andi	r4,r3,65535
    7470:	2fcb383a 	mul	r5,r5,ra
    7474:	7bc00104 	addi	r15,r15,4
    7478:	73800104 	addi	r14,r14,4
    747c:	2a0b883a 	add	r5,r5,r8
    7480:	29cb883a 	add	r5,r5,r7
    7484:	2806943a 	slli	r3,r5,16
    7488:	94400104 	addi	r17,r18,4
    748c:	280ad43a 	srli	r5,r5,16
    7490:	1908b03a 	or	r4,r3,r4
    7494:	793fff15 	stw	r4,-4(r15)
    7498:	70ffff17 	ldw	r3,-4(r14)
    749c:	8a000017 	ldw	r8,0(r17)
    74a0:	1806d43a 	srli	r3,r3,16
    74a4:	413fffcc 	andi	r4,r8,65535
    74a8:	1fc7383a 	mul	r3,r3,ra
    74ac:	1907883a 	add	r3,r3,r4
    74b0:	1947883a 	add	r3,r3,r5
    74b4:	180ed43a 	srli	r7,r3,16
    74b8:	727fe936 	bltu	r14,r9,7460 <__multiply+0x140>
    74bc:	90c00115 	stw	r3,4(r18)
    74c0:	31800104 	addi	r6,r6,4
    74c4:	5ac00104 	addi	r11,r11,4
    74c8:	333fbe36 	bltu	r6,r12,73c4 <__multiply+0xa4>
    74cc:	0400090e 	bge	zero,r16,74f4 <__multiply+0x1d4>
    74d0:	50ffff17 	ldw	r3,-4(r10)
    74d4:	52bfff04 	addi	r10,r10,-4
    74d8:	18000326 	beq	r3,zero,74e8 <__multiply+0x1c8>
    74dc:	00000506 	br	74f4 <__multiply+0x1d4>
    74e0:	50c00017 	ldw	r3,0(r10)
    74e4:	1800031e 	bne	r3,zero,74f4 <__multiply+0x1d4>
    74e8:	843fffc4 	addi	r16,r16,-1
    74ec:	52bfff04 	addi	r10,r10,-4
    74f0:	803ffb1e 	bne	r16,zero,74e0 <__multiply+0x1c0>
    74f4:	14000415 	stw	r16,16(r2)
    74f8:	dfc00517 	ldw	ra,20(sp)
    74fc:	dd000417 	ldw	r20,16(sp)
    7500:	dcc00317 	ldw	r19,12(sp)
    7504:	dc800217 	ldw	r18,8(sp)
    7508:	dc400117 	ldw	r17,4(sp)
    750c:	dc000017 	ldw	r16,0(sp)
    7510:	dec00604 	addi	sp,sp,24
    7514:	f800283a 	ret

00007518 <__pow5mult>:
    7518:	defffa04 	addi	sp,sp,-24
    751c:	dcc00315 	stw	r19,12(sp)
    7520:	dc000015 	stw	r16,0(sp)
    7524:	dfc00515 	stw	ra,20(sp)
    7528:	dd000415 	stw	r20,16(sp)
    752c:	dc800215 	stw	r18,8(sp)
    7530:	dc400115 	stw	r17,4(sp)
    7534:	308000cc 	andi	r2,r6,3
    7538:	3021883a 	mov	r16,r6
    753c:	2027883a 	mov	r19,r4
    7540:	10002f1e 	bne	r2,zero,7600 <__pow5mult+0xe8>
    7544:	2825883a 	mov	r18,r5
    7548:	8021d0ba 	srai	r16,r16,2
    754c:	80001a26 	beq	r16,zero,75b8 <__pow5mult+0xa0>
    7550:	9c401217 	ldw	r17,72(r19)
    7554:	8800061e 	bne	r17,zero,7570 <__pow5mult+0x58>
    7558:	00003406 	br	762c <__pow5mult+0x114>
    755c:	8021d07a 	srai	r16,r16,1
    7560:	80001526 	beq	r16,zero,75b8 <__pow5mult+0xa0>
    7564:	88800017 	ldw	r2,0(r17)
    7568:	10001c26 	beq	r2,zero,75dc <__pow5mult+0xc4>
    756c:	1023883a 	mov	r17,r2
    7570:	8080004c 	andi	r2,r16,1
    7574:	103ff926 	beq	r2,zero,755c <__pow5mult+0x44>
    7578:	880d883a 	mov	r6,r17
    757c:	900b883a 	mov	r5,r18
    7580:	9809883a 	mov	r4,r19
    7584:	00073200 	call	7320 <__multiply>
    7588:	90001b26 	beq	r18,zero,75f8 <__pow5mult+0xe0>
    758c:	91000117 	ldw	r4,4(r18)
    7590:	98c01317 	ldw	r3,76(r19)
    7594:	8021d07a 	srai	r16,r16,1
    7598:	2109883a 	add	r4,r4,r4
    759c:	2109883a 	add	r4,r4,r4
    75a0:	1907883a 	add	r3,r3,r4
    75a4:	19000017 	ldw	r4,0(r3)
    75a8:	91000015 	stw	r4,0(r18)
    75ac:	1c800015 	stw	r18,0(r3)
    75b0:	1025883a 	mov	r18,r2
    75b4:	803feb1e 	bne	r16,zero,7564 <__pow5mult+0x4c>
    75b8:	9005883a 	mov	r2,r18
    75bc:	dfc00517 	ldw	ra,20(sp)
    75c0:	dd000417 	ldw	r20,16(sp)
    75c4:	dcc00317 	ldw	r19,12(sp)
    75c8:	dc800217 	ldw	r18,8(sp)
    75cc:	dc400117 	ldw	r17,4(sp)
    75d0:	dc000017 	ldw	r16,0(sp)
    75d4:	dec00604 	addi	sp,sp,24
    75d8:	f800283a 	ret
    75dc:	880d883a 	mov	r6,r17
    75e0:	880b883a 	mov	r5,r17
    75e4:	9809883a 	mov	r4,r19
    75e8:	00073200 	call	7320 <__multiply>
    75ec:	88800015 	stw	r2,0(r17)
    75f0:	10000015 	stw	zero,0(r2)
    75f4:	003fdd06 	br	756c <__pow5mult+0x54>
    75f8:	1025883a 	mov	r18,r2
    75fc:	003fd706 	br	755c <__pow5mult+0x44>
    7600:	10bfffc4 	addi	r2,r2,-1
    7604:	1085883a 	add	r2,r2,r2
    7608:	00c000b4 	movhi	r3,2
    760c:	18e8bb04 	addi	r3,r3,-23828
    7610:	1085883a 	add	r2,r2,r2
    7614:	1885883a 	add	r2,r3,r2
    7618:	11800017 	ldw	r6,0(r2)
    761c:	000f883a 	mov	r7,zero
    7620:	0006fa80 	call	6fa8 <__multadd>
    7624:	1025883a 	mov	r18,r2
    7628:	003fc706 	br	7548 <__pow5mult+0x30>
    762c:	05000044 	movi	r20,1
    7630:	a00b883a 	mov	r5,r20
    7634:	9809883a 	mov	r4,r19
    7638:	0006ed80 	call	6ed8 <_Balloc>
    763c:	1023883a 	mov	r17,r2
    7640:	00809c44 	movi	r2,625
    7644:	88800515 	stw	r2,20(r17)
    7648:	8d000415 	stw	r20,16(r17)
    764c:	9c401215 	stw	r17,72(r19)
    7650:	88000015 	stw	zero,0(r17)
    7654:	003fc606 	br	7570 <__pow5mult+0x58>

00007658 <__lshift>:
    7658:	defff904 	addi	sp,sp,-28
    765c:	dd400515 	stw	r21,20(sp)
    7660:	dcc00315 	stw	r19,12(sp)
    7664:	302bd17a 	srai	r21,r6,5
    7668:	2cc00417 	ldw	r19,16(r5)
    766c:	28800217 	ldw	r2,8(r5)
    7670:	dd000415 	stw	r20,16(sp)
    7674:	ace7883a 	add	r19,r21,r19
    7678:	dc800215 	stw	r18,8(sp)
    767c:	dc400115 	stw	r17,4(sp)
    7680:	dc000015 	stw	r16,0(sp)
    7684:	dfc00615 	stw	ra,24(sp)
    7688:	9c000044 	addi	r16,r19,1
    768c:	2823883a 	mov	r17,r5
    7690:	3029883a 	mov	r20,r6
    7694:	2025883a 	mov	r18,r4
    7698:	29400117 	ldw	r5,4(r5)
    769c:	1400030e 	bge	r2,r16,76ac <__lshift+0x54>
    76a0:	1085883a 	add	r2,r2,r2
    76a4:	29400044 	addi	r5,r5,1
    76a8:	143ffd16 	blt	r2,r16,76a0 <__lshift+0x48>
    76ac:	9009883a 	mov	r4,r18
    76b0:	0006ed80 	call	6ed8 <_Balloc>
    76b4:	10c00504 	addi	r3,r2,20
    76b8:	0540070e 	bge	zero,r21,76d8 <__lshift+0x80>
    76bc:	ad6b883a 	add	r21,r21,r21
    76c0:	ad6b883a 	add	r21,r21,r21
    76c4:	1809883a 	mov	r4,r3
    76c8:	1d47883a 	add	r3,r3,r21
    76cc:	20000015 	stw	zero,0(r4)
    76d0:	21000104 	addi	r4,r4,4
    76d4:	193ffd1e 	bne	r3,r4,76cc <__lshift+0x74>
    76d8:	8a000417 	ldw	r8,16(r17)
    76dc:	89000504 	addi	r4,r17,20
    76e0:	a18007cc 	andi	r6,r20,31
    76e4:	4211883a 	add	r8,r8,r8
    76e8:	4211883a 	add	r8,r8,r8
    76ec:	2211883a 	add	r8,r4,r8
    76f0:	30002326 	beq	r6,zero,7780 <__lshift+0x128>
    76f4:	02400804 	movi	r9,32
    76f8:	4993c83a 	sub	r9,r9,r6
    76fc:	000b883a 	mov	r5,zero
    7700:	21c00017 	ldw	r7,0(r4)
    7704:	1815883a 	mov	r10,r3
    7708:	18c00104 	addi	r3,r3,4
    770c:	398e983a 	sll	r7,r7,r6
    7710:	21000104 	addi	r4,r4,4
    7714:	394ab03a 	or	r5,r7,r5
    7718:	197fff15 	stw	r5,-4(r3)
    771c:	217fff17 	ldw	r5,-4(r4)
    7720:	2a4ad83a 	srl	r5,r5,r9
    7724:	223ff636 	bltu	r4,r8,7700 <__lshift+0xa8>
    7728:	51400115 	stw	r5,4(r10)
    772c:	28001a1e 	bne	r5,zero,7798 <__lshift+0x140>
    7730:	843fffc4 	addi	r16,r16,-1
    7734:	14000415 	stw	r16,16(r2)
    7738:	88000826 	beq	r17,zero,775c <__lshift+0x104>
    773c:	89000117 	ldw	r4,4(r17)
    7740:	90c01317 	ldw	r3,76(r18)
    7744:	2109883a 	add	r4,r4,r4
    7748:	2109883a 	add	r4,r4,r4
    774c:	1907883a 	add	r3,r3,r4
    7750:	19000017 	ldw	r4,0(r3)
    7754:	89000015 	stw	r4,0(r17)
    7758:	1c400015 	stw	r17,0(r3)
    775c:	dfc00617 	ldw	ra,24(sp)
    7760:	dd400517 	ldw	r21,20(sp)
    7764:	dd000417 	ldw	r20,16(sp)
    7768:	dcc00317 	ldw	r19,12(sp)
    776c:	dc800217 	ldw	r18,8(sp)
    7770:	dc400117 	ldw	r17,4(sp)
    7774:	dc000017 	ldw	r16,0(sp)
    7778:	dec00704 	addi	sp,sp,28
    777c:	f800283a 	ret
    7780:	21400017 	ldw	r5,0(r4)
    7784:	18c00104 	addi	r3,r3,4
    7788:	21000104 	addi	r4,r4,4
    778c:	197fff15 	stw	r5,-4(r3)
    7790:	223ffb36 	bltu	r4,r8,7780 <__lshift+0x128>
    7794:	003fe606 	br	7730 <__lshift+0xd8>
    7798:	9c000084 	addi	r16,r19,2
    779c:	003fe406 	br	7730 <__lshift+0xd8>

000077a0 <__mcmp>:
    77a0:	20800417 	ldw	r2,16(r4)
    77a4:	28c00417 	ldw	r3,16(r5)
    77a8:	10c5c83a 	sub	r2,r2,r3
    77ac:	1000111e 	bne	r2,zero,77f4 <__mcmp+0x54>
    77b0:	18c7883a 	add	r3,r3,r3
    77b4:	18c7883a 	add	r3,r3,r3
    77b8:	21000504 	addi	r4,r4,20
    77bc:	29400504 	addi	r5,r5,20
    77c0:	20c5883a 	add	r2,r4,r3
    77c4:	28cb883a 	add	r5,r5,r3
    77c8:	00000106 	br	77d0 <__mcmp+0x30>
    77cc:	20800a2e 	bgeu	r4,r2,77f8 <__mcmp+0x58>
    77d0:	10bfff04 	addi	r2,r2,-4
    77d4:	297fff04 	addi	r5,r5,-4
    77d8:	11800017 	ldw	r6,0(r2)
    77dc:	28c00017 	ldw	r3,0(r5)
    77e0:	30fffa26 	beq	r6,r3,77cc <__mcmp+0x2c>
    77e4:	30c00236 	bltu	r6,r3,77f0 <__mcmp+0x50>
    77e8:	00800044 	movi	r2,1
    77ec:	f800283a 	ret
    77f0:	00bfffc4 	movi	r2,-1
    77f4:	f800283a 	ret
    77f8:	0005883a 	mov	r2,zero
    77fc:	f800283a 	ret

00007800 <__mdiff>:
    7800:	28c00417 	ldw	r3,16(r5)
    7804:	30800417 	ldw	r2,16(r6)
    7808:	defffa04 	addi	sp,sp,-24
    780c:	dcc00315 	stw	r19,12(sp)
    7810:	dc800215 	stw	r18,8(sp)
    7814:	dfc00515 	stw	ra,20(sp)
    7818:	dd000415 	stw	r20,16(sp)
    781c:	dc400115 	stw	r17,4(sp)
    7820:	dc000015 	stw	r16,0(sp)
    7824:	1887c83a 	sub	r3,r3,r2
    7828:	2825883a 	mov	r18,r5
    782c:	3027883a 	mov	r19,r6
    7830:	1800141e 	bne	r3,zero,7884 <__mdiff+0x84>
    7834:	1085883a 	add	r2,r2,r2
    7838:	1085883a 	add	r2,r2,r2
    783c:	2a000504 	addi	r8,r5,20
    7840:	34000504 	addi	r16,r6,20
    7844:	4087883a 	add	r3,r8,r2
    7848:	8085883a 	add	r2,r16,r2
    784c:	00000106 	br	7854 <__mdiff+0x54>
    7850:	40c0592e 	bgeu	r8,r3,79b8 <__mdiff+0x1b8>
    7854:	18ffff04 	addi	r3,r3,-4
    7858:	10bfff04 	addi	r2,r2,-4
    785c:	19c00017 	ldw	r7,0(r3)
    7860:	11400017 	ldw	r5,0(r2)
    7864:	397ffa26 	beq	r7,r5,7850 <__mdiff+0x50>
    7868:	3940592e 	bgeu	r7,r5,79d0 <__mdiff+0x1d0>
    786c:	9005883a 	mov	r2,r18
    7870:	4023883a 	mov	r17,r8
    7874:	9825883a 	mov	r18,r19
    7878:	05000044 	movi	r20,1
    787c:	1027883a 	mov	r19,r2
    7880:	00000406 	br	7894 <__mdiff+0x94>
    7884:	18005616 	blt	r3,zero,79e0 <__mdiff+0x1e0>
    7888:	34400504 	addi	r17,r6,20
    788c:	2c000504 	addi	r16,r5,20
    7890:	0029883a 	mov	r20,zero
    7894:	91400117 	ldw	r5,4(r18)
    7898:	0006ed80 	call	6ed8 <_Balloc>
    789c:	92400417 	ldw	r9,16(r18)
    78a0:	9b000417 	ldw	r12,16(r19)
    78a4:	12c00504 	addi	r11,r2,20
    78a8:	4a51883a 	add	r8,r9,r9
    78ac:	6319883a 	add	r12,r12,r12
    78b0:	4211883a 	add	r8,r8,r8
    78b4:	6319883a 	add	r12,r12,r12
    78b8:	15000315 	stw	r20,12(r2)
    78bc:	8211883a 	add	r8,r16,r8
    78c0:	8b19883a 	add	r12,r17,r12
    78c4:	0007883a 	mov	r3,zero
    78c8:	81400017 	ldw	r5,0(r16)
    78cc:	89c00017 	ldw	r7,0(r17)
    78d0:	59800104 	addi	r6,r11,4
    78d4:	293fffcc 	andi	r4,r5,65535
    78d8:	20c7883a 	add	r3,r4,r3
    78dc:	393fffcc 	andi	r4,r7,65535
    78e0:	1909c83a 	sub	r4,r3,r4
    78e4:	280ad43a 	srli	r5,r5,16
    78e8:	380ed43a 	srli	r7,r7,16
    78ec:	2007d43a 	srai	r3,r4,16
    78f0:	213fffcc 	andi	r4,r4,65535
    78f4:	29cbc83a 	sub	r5,r5,r7
    78f8:	28c7883a 	add	r3,r5,r3
    78fc:	180a943a 	slli	r5,r3,16
    7900:	8c400104 	addi	r17,r17,4
    7904:	84000104 	addi	r16,r16,4
    7908:	2908b03a 	or	r4,r5,r4
    790c:	59000015 	stw	r4,0(r11)
    7910:	1807d43a 	srai	r3,r3,16
    7914:	3015883a 	mov	r10,r6
    7918:	3017883a 	mov	r11,r6
    791c:	8b3fea36 	bltu	r17,r12,78c8 <__mdiff+0xc8>
    7920:	8200162e 	bgeu	r16,r8,797c <__mdiff+0x17c>
    7924:	8017883a 	mov	r11,r16
    7928:	59400017 	ldw	r5,0(r11)
    792c:	31800104 	addi	r6,r6,4
    7930:	5ac00104 	addi	r11,r11,4
    7934:	293fffcc 	andi	r4,r5,65535
    7938:	20c7883a 	add	r3,r4,r3
    793c:	280ed43a 	srli	r7,r5,16
    7940:	180bd43a 	srai	r5,r3,16
    7944:	193fffcc 	andi	r4,r3,65535
    7948:	3947883a 	add	r3,r7,r5
    794c:	180a943a 	slli	r5,r3,16
    7950:	1807d43a 	srai	r3,r3,16
    7954:	2908b03a 	or	r4,r5,r4
    7958:	313fff15 	stw	r4,-4(r6)
    795c:	5a3ff236 	bltu	r11,r8,7928 <__mdiff+0x128>
    7960:	0406303a 	nor	r3,zero,r16
    7964:	1a07883a 	add	r3,r3,r8
    7968:	1806d0ba 	srli	r3,r3,2
    796c:	18c00044 	addi	r3,r3,1
    7970:	18c7883a 	add	r3,r3,r3
    7974:	18c7883a 	add	r3,r3,r3
    7978:	50d5883a 	add	r10,r10,r3
    797c:	50ffff04 	addi	r3,r10,-4
    7980:	2000041e 	bne	r4,zero,7994 <__mdiff+0x194>
    7984:	18ffff04 	addi	r3,r3,-4
    7988:	19000017 	ldw	r4,0(r3)
    798c:	4a7fffc4 	addi	r9,r9,-1
    7990:	203ffc26 	beq	r4,zero,7984 <__mdiff+0x184>
    7994:	12400415 	stw	r9,16(r2)
    7998:	dfc00517 	ldw	ra,20(sp)
    799c:	dd000417 	ldw	r20,16(sp)
    79a0:	dcc00317 	ldw	r19,12(sp)
    79a4:	dc800217 	ldw	r18,8(sp)
    79a8:	dc400117 	ldw	r17,4(sp)
    79ac:	dc000017 	ldw	r16,0(sp)
    79b0:	dec00604 	addi	sp,sp,24
    79b4:	f800283a 	ret
    79b8:	000b883a 	mov	r5,zero
    79bc:	0006ed80 	call	6ed8 <_Balloc>
    79c0:	00c00044 	movi	r3,1
    79c4:	10c00415 	stw	r3,16(r2)
    79c8:	10000515 	stw	zero,20(r2)
    79cc:	003ff206 	br	7998 <__mdiff+0x198>
    79d0:	8023883a 	mov	r17,r16
    79d4:	0029883a 	mov	r20,zero
    79d8:	4021883a 	mov	r16,r8
    79dc:	003fad06 	br	7894 <__mdiff+0x94>
    79e0:	9005883a 	mov	r2,r18
    79e4:	94400504 	addi	r17,r18,20
    79e8:	9c000504 	addi	r16,r19,20
    79ec:	9825883a 	mov	r18,r19
    79f0:	05000044 	movi	r20,1
    79f4:	1027883a 	mov	r19,r2
    79f8:	003fa606 	br	7894 <__mdiff+0x94>

000079fc <__ulp>:
    79fc:	295ffc2c 	andhi	r5,r5,32752
    7a00:	00bf3034 	movhi	r2,64704
    7a04:	2887883a 	add	r3,r5,r2
    7a08:	00c0020e 	bge	zero,r3,7a14 <__ulp+0x18>
    7a0c:	0005883a 	mov	r2,zero
    7a10:	f800283a 	ret
    7a14:	00c7c83a 	sub	r3,zero,r3
    7a18:	1807d53a 	srai	r3,r3,20
    7a1c:	008004c4 	movi	r2,19
    7a20:	10c00b0e 	bge	r2,r3,7a50 <__ulp+0x54>
    7a24:	18bffb04 	addi	r2,r3,-20
    7a28:	01000784 	movi	r4,30
    7a2c:	0007883a 	mov	r3,zero
    7a30:	20800516 	blt	r4,r2,7a48 <__ulp+0x4c>
    7a34:	010007c4 	movi	r4,31
    7a38:	2089c83a 	sub	r4,r4,r2
    7a3c:	00800044 	movi	r2,1
    7a40:	1104983a 	sll	r2,r2,r4
    7a44:	f800283a 	ret
    7a48:	00800044 	movi	r2,1
    7a4c:	f800283a 	ret
    7a50:	01400234 	movhi	r5,8
    7a54:	28c7d83a 	sra	r3,r5,r3
    7a58:	0005883a 	mov	r2,zero
    7a5c:	f800283a 	ret

00007a60 <__b2d>:
    7a60:	defffa04 	addi	sp,sp,-24
    7a64:	dc000015 	stw	r16,0(sp)
    7a68:	24000417 	ldw	r16,16(r4)
    7a6c:	dc400115 	stw	r17,4(sp)
    7a70:	24400504 	addi	r17,r4,20
    7a74:	8421883a 	add	r16,r16,r16
    7a78:	8421883a 	add	r16,r16,r16
    7a7c:	8c21883a 	add	r16,r17,r16
    7a80:	dc800215 	stw	r18,8(sp)
    7a84:	84bfff17 	ldw	r18,-4(r16)
    7a88:	dd000415 	stw	r20,16(sp)
    7a8c:	dcc00315 	stw	r19,12(sp)
    7a90:	9009883a 	mov	r4,r18
    7a94:	2829883a 	mov	r20,r5
    7a98:	dfc00515 	stw	ra,20(sp)
    7a9c:	00071cc0 	call	71cc <__hi0bits>
    7aa0:	00c00804 	movi	r3,32
    7aa4:	1889c83a 	sub	r4,r3,r2
    7aa8:	a1000015 	stw	r4,0(r20)
    7aac:	01000284 	movi	r4,10
    7ab0:	84ffff04 	addi	r19,r16,-4
    7ab4:	20801216 	blt	r4,r2,7b00 <__b2d+0xa0>
    7ab8:	018002c4 	movi	r6,11
    7abc:	308dc83a 	sub	r6,r6,r2
    7ac0:	9186d83a 	srl	r3,r18,r6
    7ac4:	18cffc34 	orhi	r3,r3,16368
    7ac8:	8cc0212e 	bgeu	r17,r19,7b50 <__b2d+0xf0>
    7acc:	813ffe17 	ldw	r4,-8(r16)
    7ad0:	218cd83a 	srl	r6,r4,r6
    7ad4:	10800544 	addi	r2,r2,21
    7ad8:	9084983a 	sll	r2,r18,r2
    7adc:	1184b03a 	or	r2,r2,r6
    7ae0:	dfc00517 	ldw	ra,20(sp)
    7ae4:	dd000417 	ldw	r20,16(sp)
    7ae8:	dcc00317 	ldw	r19,12(sp)
    7aec:	dc800217 	ldw	r18,8(sp)
    7af0:	dc400117 	ldw	r17,4(sp)
    7af4:	dc000017 	ldw	r16,0(sp)
    7af8:	dec00604 	addi	sp,sp,24
    7afc:	f800283a 	ret
    7b00:	8cc00f2e 	bgeu	r17,r19,7b40 <__b2d+0xe0>
    7b04:	117ffd44 	addi	r5,r2,-11
    7b08:	80bffe17 	ldw	r2,-8(r16)
    7b0c:	28000e26 	beq	r5,zero,7b48 <__b2d+0xe8>
    7b10:	1949c83a 	sub	r4,r3,r5
    7b14:	9164983a 	sll	r18,r18,r5
    7b18:	1106d83a 	srl	r3,r2,r4
    7b1c:	81bffe04 	addi	r6,r16,-8
    7b20:	948ffc34 	orhi	r18,r18,16368
    7b24:	90c6b03a 	or	r3,r18,r3
    7b28:	89800e2e 	bgeu	r17,r6,7b64 <__b2d+0x104>
    7b2c:	81bffd17 	ldw	r6,-12(r16)
    7b30:	1144983a 	sll	r2,r2,r5
    7b34:	310ad83a 	srl	r5,r6,r4
    7b38:	2884b03a 	or	r2,r5,r2
    7b3c:	003fe806 	br	7ae0 <__b2d+0x80>
    7b40:	10bffd44 	addi	r2,r2,-11
    7b44:	1000041e 	bne	r2,zero,7b58 <__b2d+0xf8>
    7b48:	90cffc34 	orhi	r3,r18,16368
    7b4c:	003fe406 	br	7ae0 <__b2d+0x80>
    7b50:	000d883a 	mov	r6,zero
    7b54:	003fdf06 	br	7ad4 <__b2d+0x74>
    7b58:	90a4983a 	sll	r18,r18,r2
    7b5c:	0005883a 	mov	r2,zero
    7b60:	003ff906 	br	7b48 <__b2d+0xe8>
    7b64:	1144983a 	sll	r2,r2,r5
    7b68:	003fdd06 	br	7ae0 <__b2d+0x80>

00007b6c <__d2b>:
    7b6c:	defff804 	addi	sp,sp,-32
    7b70:	dc000215 	stw	r16,8(sp)
    7b74:	3021883a 	mov	r16,r6
    7b78:	dc400315 	stw	r17,12(sp)
    7b7c:	8022907a 	slli	r17,r16,1
    7b80:	dd000615 	stw	r20,24(sp)
    7b84:	2829883a 	mov	r20,r5
    7b88:	01400044 	movi	r5,1
    7b8c:	dcc00515 	stw	r19,20(sp)
    7b90:	dc800415 	stw	r18,16(sp)
    7b94:	dfc00715 	stw	ra,28(sp)
    7b98:	3825883a 	mov	r18,r7
    7b9c:	8822d57a 	srli	r17,r17,21
    7ba0:	0006ed80 	call	6ed8 <_Balloc>
    7ba4:	1027883a 	mov	r19,r2
    7ba8:	00800434 	movhi	r2,16
    7bac:	10bfffc4 	addi	r2,r2,-1
    7bb0:	808c703a 	and	r6,r16,r2
    7bb4:	88000126 	beq	r17,zero,7bbc <__d2b+0x50>
    7bb8:	31800434 	orhi	r6,r6,16
    7bbc:	d9800015 	stw	r6,0(sp)
    7bc0:	a0002426 	beq	r20,zero,7c54 <__d2b+0xe8>
    7bc4:	d9000104 	addi	r4,sp,4
    7bc8:	dd000115 	stw	r20,4(sp)
    7bcc:	00072340 	call	7234 <__lo0bits>
    7bd0:	d8c00017 	ldw	r3,0(sp)
    7bd4:	10002f1e 	bne	r2,zero,7c94 <__d2b+0x128>
    7bd8:	d9000117 	ldw	r4,4(sp)
    7bdc:	99000515 	stw	r4,20(r19)
    7be0:	1821003a 	cmpeq	r16,r3,zero
    7be4:	01000084 	movi	r4,2
    7be8:	2421c83a 	sub	r16,r4,r16
    7bec:	98c00615 	stw	r3,24(r19)
    7bf0:	9c000415 	stw	r16,16(r19)
    7bf4:	88001f1e 	bne	r17,zero,7c74 <__d2b+0x108>
    7bf8:	10bef384 	addi	r2,r2,-1074
    7bfc:	90800015 	stw	r2,0(r18)
    7c00:	00900034 	movhi	r2,16384
    7c04:	10bfffc4 	addi	r2,r2,-1
    7c08:	8085883a 	add	r2,r16,r2
    7c0c:	1085883a 	add	r2,r2,r2
    7c10:	1085883a 	add	r2,r2,r2
    7c14:	9885883a 	add	r2,r19,r2
    7c18:	11000517 	ldw	r4,20(r2)
    7c1c:	8020917a 	slli	r16,r16,5
    7c20:	00071cc0 	call	71cc <__hi0bits>
    7c24:	d8c00817 	ldw	r3,32(sp)
    7c28:	8085c83a 	sub	r2,r16,r2
    7c2c:	18800015 	stw	r2,0(r3)
    7c30:	9805883a 	mov	r2,r19
    7c34:	dfc00717 	ldw	ra,28(sp)
    7c38:	dd000617 	ldw	r20,24(sp)
    7c3c:	dcc00517 	ldw	r19,20(sp)
    7c40:	dc800417 	ldw	r18,16(sp)
    7c44:	dc400317 	ldw	r17,12(sp)
    7c48:	dc000217 	ldw	r16,8(sp)
    7c4c:	dec00804 	addi	sp,sp,32
    7c50:	f800283a 	ret
    7c54:	d809883a 	mov	r4,sp
    7c58:	00072340 	call	7234 <__lo0bits>
    7c5c:	d8c00017 	ldw	r3,0(sp)
    7c60:	04000044 	movi	r16,1
    7c64:	9c000415 	stw	r16,16(r19)
    7c68:	98c00515 	stw	r3,20(r19)
    7c6c:	10800804 	addi	r2,r2,32
    7c70:	883fe126 	beq	r17,zero,7bf8 <__d2b+0x8c>
    7c74:	00c00d44 	movi	r3,53
    7c78:	8c7ef344 	addi	r17,r17,-1075
    7c7c:	88a3883a 	add	r17,r17,r2
    7c80:	1885c83a 	sub	r2,r3,r2
    7c84:	d8c00817 	ldw	r3,32(sp)
    7c88:	94400015 	stw	r17,0(r18)
    7c8c:	18800015 	stw	r2,0(r3)
    7c90:	003fe706 	br	7c30 <__d2b+0xc4>
    7c94:	01000804 	movi	r4,32
    7c98:	2089c83a 	sub	r4,r4,r2
    7c9c:	1908983a 	sll	r4,r3,r4
    7ca0:	d9400117 	ldw	r5,4(sp)
    7ca4:	1886d83a 	srl	r3,r3,r2
    7ca8:	2148b03a 	or	r4,r4,r5
    7cac:	99000515 	stw	r4,20(r19)
    7cb0:	d8c00015 	stw	r3,0(sp)
    7cb4:	003fca06 	br	7be0 <__d2b+0x74>

00007cb8 <__ratio>:
    7cb8:	defff904 	addi	sp,sp,-28
    7cbc:	dc400315 	stw	r17,12(sp)
    7cc0:	2823883a 	mov	r17,r5
    7cc4:	d9400104 	addi	r5,sp,4
    7cc8:	dfc00615 	stw	ra,24(sp)
    7ccc:	dcc00515 	stw	r19,20(sp)
    7cd0:	dc800415 	stw	r18,16(sp)
    7cd4:	2027883a 	mov	r19,r4
    7cd8:	dc000215 	stw	r16,8(sp)
    7cdc:	0007a600 	call	7a60 <__b2d>
    7ce0:	d80b883a 	mov	r5,sp
    7ce4:	8809883a 	mov	r4,r17
    7ce8:	1025883a 	mov	r18,r2
    7cec:	1821883a 	mov	r16,r3
    7cf0:	0007a600 	call	7a60 <__b2d>
    7cf4:	8a000417 	ldw	r8,16(r17)
    7cf8:	99000417 	ldw	r4,16(r19)
    7cfc:	d9400117 	ldw	r5,4(sp)
    7d00:	2209c83a 	sub	r4,r4,r8
    7d04:	2010917a 	slli	r8,r4,5
    7d08:	d9000017 	ldw	r4,0(sp)
    7d0c:	2909c83a 	sub	r4,r5,r4
    7d10:	4109883a 	add	r4,r8,r4
    7d14:	01000e0e 	bge	zero,r4,7d50 <__ratio+0x98>
    7d18:	2008953a 	slli	r4,r4,20
    7d1c:	2421883a 	add	r16,r4,r16
    7d20:	100d883a 	mov	r6,r2
    7d24:	180f883a 	mov	r7,r3
    7d28:	9009883a 	mov	r4,r18
    7d2c:	800b883a 	mov	r5,r16
    7d30:	000bba40 	call	bba4 <__divdf3>
    7d34:	dfc00617 	ldw	ra,24(sp)
    7d38:	dcc00517 	ldw	r19,20(sp)
    7d3c:	dc800417 	ldw	r18,16(sp)
    7d40:	dc400317 	ldw	r17,12(sp)
    7d44:	dc000217 	ldw	r16,8(sp)
    7d48:	dec00704 	addi	sp,sp,28
    7d4c:	f800283a 	ret
    7d50:	2008953a 	slli	r4,r4,20
    7d54:	1907c83a 	sub	r3,r3,r4
    7d58:	003ff106 	br	7d20 <__ratio+0x68>

00007d5c <_mprec_log10>:
    7d5c:	defffe04 	addi	sp,sp,-8
    7d60:	dc000015 	stw	r16,0(sp)
    7d64:	dfc00115 	stw	ra,4(sp)
    7d68:	008005c4 	movi	r2,23
    7d6c:	2021883a 	mov	r16,r4
    7d70:	11000d0e 	bge	r2,r4,7da8 <_mprec_log10+0x4c>
    7d74:	0005883a 	mov	r2,zero
    7d78:	00cffc34 	movhi	r3,16368
    7d7c:	843fffc4 	addi	r16,r16,-1
    7d80:	000d883a 	mov	r6,zero
    7d84:	01d00934 	movhi	r7,16420
    7d88:	1009883a 	mov	r4,r2
    7d8c:	180b883a 	mov	r5,r3
    7d90:	000c6e40 	call	c6e4 <__muldf3>
    7d94:	803ff91e 	bne	r16,zero,7d7c <_mprec_log10+0x20>
    7d98:	dfc00117 	ldw	ra,4(sp)
    7d9c:	dc000017 	ldw	r16,0(sp)
    7da0:	dec00204 	addi	sp,sp,8
    7da4:	f800283a 	ret
    7da8:	202090fa 	slli	r16,r4,3
    7dac:	008000b4 	movhi	r2,2
    7db0:	10a8d204 	addi	r2,r2,-23736
    7db4:	1421883a 	add	r16,r2,r16
    7db8:	80800017 	ldw	r2,0(r16)
    7dbc:	80c00117 	ldw	r3,4(r16)
    7dc0:	dfc00117 	ldw	ra,4(sp)
    7dc4:	dc000017 	ldw	r16,0(sp)
    7dc8:	dec00204 	addi	sp,sp,8
    7dcc:	f800283a 	ret

00007dd0 <__copybits>:
    7dd0:	297fffc4 	addi	r5,r5,-1
    7dd4:	280fd17a 	srai	r7,r5,5
    7dd8:	30c00417 	ldw	r3,16(r6)
    7ddc:	30800504 	addi	r2,r6,20
    7de0:	39c00044 	addi	r7,r7,1
    7de4:	18c7883a 	add	r3,r3,r3
    7de8:	39cf883a 	add	r7,r7,r7
    7dec:	18c7883a 	add	r3,r3,r3
    7df0:	39cf883a 	add	r7,r7,r7
    7df4:	10c7883a 	add	r3,r2,r3
    7df8:	21cf883a 	add	r7,r4,r7
    7dfc:	10c00d2e 	bgeu	r2,r3,7e34 <__copybits+0x64>
    7e00:	200b883a 	mov	r5,r4
    7e04:	12000017 	ldw	r8,0(r2)
    7e08:	29400104 	addi	r5,r5,4
    7e0c:	10800104 	addi	r2,r2,4
    7e10:	2a3fff15 	stw	r8,-4(r5)
    7e14:	10fffb36 	bltu	r2,r3,7e04 <__copybits+0x34>
    7e18:	1985c83a 	sub	r2,r3,r6
    7e1c:	10bffac4 	addi	r2,r2,-21
    7e20:	1004d0ba 	srli	r2,r2,2
    7e24:	10800044 	addi	r2,r2,1
    7e28:	1085883a 	add	r2,r2,r2
    7e2c:	1085883a 	add	r2,r2,r2
    7e30:	2089883a 	add	r4,r4,r2
    7e34:	21c0032e 	bgeu	r4,r7,7e44 <__copybits+0x74>
    7e38:	20000015 	stw	zero,0(r4)
    7e3c:	21000104 	addi	r4,r4,4
    7e40:	21fffd36 	bltu	r4,r7,7e38 <__copybits+0x68>
    7e44:	f800283a 	ret

00007e48 <__any_on>:
    7e48:	20c00417 	ldw	r3,16(r4)
    7e4c:	2805d17a 	srai	r2,r5,5
    7e50:	21000504 	addi	r4,r4,20
    7e54:	18800d0e 	bge	r3,r2,7e8c <__any_on+0x44>
    7e58:	18c7883a 	add	r3,r3,r3
    7e5c:	18c7883a 	add	r3,r3,r3
    7e60:	20c7883a 	add	r3,r4,r3
    7e64:	20c0192e 	bgeu	r4,r3,7ecc <__any_on+0x84>
    7e68:	18bfff17 	ldw	r2,-4(r3)
    7e6c:	18ffff04 	addi	r3,r3,-4
    7e70:	1000041e 	bne	r2,zero,7e84 <__any_on+0x3c>
    7e74:	20c0142e 	bgeu	r4,r3,7ec8 <__any_on+0x80>
    7e78:	18ffff04 	addi	r3,r3,-4
    7e7c:	19400017 	ldw	r5,0(r3)
    7e80:	283ffc26 	beq	r5,zero,7e74 <__any_on+0x2c>
    7e84:	00800044 	movi	r2,1
    7e88:	f800283a 	ret
    7e8c:	10c00a0e 	bge	r2,r3,7eb8 <__any_on+0x70>
    7e90:	1085883a 	add	r2,r2,r2
    7e94:	1085883a 	add	r2,r2,r2
    7e98:	294007cc 	andi	r5,r5,31
    7e9c:	2087883a 	add	r3,r4,r2
    7ea0:	283ff026 	beq	r5,zero,7e64 <__any_on+0x1c>
    7ea4:	19800017 	ldw	r6,0(r3)
    7ea8:	3144d83a 	srl	r2,r6,r5
    7eac:	114a983a 	sll	r5,r2,r5
    7eb0:	317ff41e 	bne	r6,r5,7e84 <__any_on+0x3c>
    7eb4:	003feb06 	br	7e64 <__any_on+0x1c>
    7eb8:	1085883a 	add	r2,r2,r2
    7ebc:	1085883a 	add	r2,r2,r2
    7ec0:	2087883a 	add	r3,r4,r2
    7ec4:	003fe706 	br	7e64 <__any_on+0x1c>
    7ec8:	f800283a 	ret
    7ecc:	0005883a 	mov	r2,zero
    7ed0:	f800283a 	ret

00007ed4 <_realloc_r>:
    7ed4:	defff604 	addi	sp,sp,-40
    7ed8:	dc800215 	stw	r18,8(sp)
    7edc:	dfc00915 	stw	ra,36(sp)
    7ee0:	df000815 	stw	fp,32(sp)
    7ee4:	ddc00715 	stw	r23,28(sp)
    7ee8:	dd800615 	stw	r22,24(sp)
    7eec:	dd400515 	stw	r21,20(sp)
    7ef0:	dd000415 	stw	r20,16(sp)
    7ef4:	dcc00315 	stw	r19,12(sp)
    7ef8:	dc400115 	stw	r17,4(sp)
    7efc:	dc000015 	stw	r16,0(sp)
    7f00:	3025883a 	mov	r18,r6
    7f04:	2800b726 	beq	r5,zero,81e4 <_realloc_r+0x310>
    7f08:	282b883a 	mov	r21,r5
    7f0c:	2029883a 	mov	r20,r4
    7f10:	000e3c00 	call	e3c0 <__malloc_lock>
    7f14:	a8bfff17 	ldw	r2,-4(r21)
    7f18:	043fff04 	movi	r16,-4
    7f1c:	90c002c4 	addi	r3,r18,11
    7f20:	01000584 	movi	r4,22
    7f24:	acfffe04 	addi	r19,r21,-8
    7f28:	1420703a 	and	r16,r2,r16
    7f2c:	20c0332e 	bgeu	r4,r3,7ffc <_realloc_r+0x128>
    7f30:	047ffe04 	movi	r17,-8
    7f34:	1c62703a 	and	r17,r3,r17
    7f38:	8807883a 	mov	r3,r17
    7f3c:	88005816 	blt	r17,zero,80a0 <_realloc_r+0x1cc>
    7f40:	8c805736 	bltu	r17,r18,80a0 <_realloc_r+0x1cc>
    7f44:	80c0300e 	bge	r16,r3,8008 <_realloc_r+0x134>
    7f48:	070000b4 	movhi	fp,2
    7f4c:	e72b2f04 	addi	fp,fp,-21316
    7f50:	e1c00217 	ldw	r7,8(fp)
    7f54:	9c09883a 	add	r4,r19,r16
    7f58:	22000117 	ldw	r8,4(r4)
    7f5c:	21c06326 	beq	r4,r7,80ec <_realloc_r+0x218>
    7f60:	017fff84 	movi	r5,-2
    7f64:	414a703a 	and	r5,r8,r5
    7f68:	214b883a 	add	r5,r4,r5
    7f6c:	29800117 	ldw	r6,4(r5)
    7f70:	3180004c 	andi	r6,r6,1
    7f74:	30003f26 	beq	r6,zero,8074 <_realloc_r+0x1a0>
    7f78:	1080004c 	andi	r2,r2,1
    7f7c:	10008326 	beq	r2,zero,818c <_realloc_r+0x2b8>
    7f80:	900b883a 	mov	r5,r18
    7f84:	a009883a 	mov	r4,r20
    7f88:	000621c0 	call	621c <_malloc_r>
    7f8c:	1025883a 	mov	r18,r2
    7f90:	10011e26 	beq	r2,zero,840c <_realloc_r+0x538>
    7f94:	a93fff17 	ldw	r4,-4(r21)
    7f98:	10fffe04 	addi	r3,r2,-8
    7f9c:	00bfff84 	movi	r2,-2
    7fa0:	2084703a 	and	r2,r4,r2
    7fa4:	9885883a 	add	r2,r19,r2
    7fa8:	1880ee26 	beq	r3,r2,8364 <_realloc_r+0x490>
    7fac:	81bfff04 	addi	r6,r16,-4
    7fb0:	00800904 	movi	r2,36
    7fb4:	1180b836 	bltu	r2,r6,8298 <_realloc_r+0x3c4>
    7fb8:	00c004c4 	movi	r3,19
    7fbc:	19809636 	bltu	r3,r6,8218 <_realloc_r+0x344>
    7fc0:	9005883a 	mov	r2,r18
    7fc4:	a807883a 	mov	r3,r21
    7fc8:	19000017 	ldw	r4,0(r3)
    7fcc:	11000015 	stw	r4,0(r2)
    7fd0:	19000117 	ldw	r4,4(r3)
    7fd4:	11000115 	stw	r4,4(r2)
    7fd8:	18c00217 	ldw	r3,8(r3)
    7fdc:	10c00215 	stw	r3,8(r2)
    7fe0:	a80b883a 	mov	r5,r21
    7fe4:	a009883a 	mov	r4,r20
    7fe8:	00056300 	call	5630 <_free_r>
    7fec:	a009883a 	mov	r4,r20
    7ff0:	000e4e00 	call	e4e0 <__malloc_unlock>
    7ff4:	9005883a 	mov	r2,r18
    7ff8:	00001206 	br	8044 <_realloc_r+0x170>
    7ffc:	00c00404 	movi	r3,16
    8000:	1823883a 	mov	r17,r3
    8004:	003fce06 	br	7f40 <_realloc_r+0x6c>
    8008:	a825883a 	mov	r18,r21
    800c:	8445c83a 	sub	r2,r16,r17
    8010:	00c003c4 	movi	r3,15
    8014:	18802636 	bltu	r3,r2,80b0 <_realloc_r+0x1dc>
    8018:	99800117 	ldw	r6,4(r19)
    801c:	9c07883a 	add	r3,r19,r16
    8020:	3180004c 	andi	r6,r6,1
    8024:	3420b03a 	or	r16,r6,r16
    8028:	9c000115 	stw	r16,4(r19)
    802c:	18800117 	ldw	r2,4(r3)
    8030:	10800054 	ori	r2,r2,1
    8034:	18800115 	stw	r2,4(r3)
    8038:	a009883a 	mov	r4,r20
    803c:	000e4e00 	call	e4e0 <__malloc_unlock>
    8040:	9005883a 	mov	r2,r18
    8044:	dfc00917 	ldw	ra,36(sp)
    8048:	df000817 	ldw	fp,32(sp)
    804c:	ddc00717 	ldw	r23,28(sp)
    8050:	dd800617 	ldw	r22,24(sp)
    8054:	dd400517 	ldw	r21,20(sp)
    8058:	dd000417 	ldw	r20,16(sp)
    805c:	dcc00317 	ldw	r19,12(sp)
    8060:	dc800217 	ldw	r18,8(sp)
    8064:	dc400117 	ldw	r17,4(sp)
    8068:	dc000017 	ldw	r16,0(sp)
    806c:	dec00a04 	addi	sp,sp,40
    8070:	f800283a 	ret
    8074:	017fff04 	movi	r5,-4
    8078:	414a703a 	and	r5,r8,r5
    807c:	814d883a 	add	r6,r16,r5
    8080:	30c01f16 	blt	r6,r3,8100 <_realloc_r+0x22c>
    8084:	20800317 	ldw	r2,12(r4)
    8088:	20c00217 	ldw	r3,8(r4)
    808c:	a825883a 	mov	r18,r21
    8090:	3021883a 	mov	r16,r6
    8094:	18800315 	stw	r2,12(r3)
    8098:	10c00215 	stw	r3,8(r2)
    809c:	003fdb06 	br	800c <_realloc_r+0x138>
    80a0:	00800304 	movi	r2,12
    80a4:	a0800015 	stw	r2,0(r20)
    80a8:	0005883a 	mov	r2,zero
    80ac:	003fe506 	br	8044 <_realloc_r+0x170>
    80b0:	98c00117 	ldw	r3,4(r19)
    80b4:	9c4b883a 	add	r5,r19,r17
    80b8:	11000054 	ori	r4,r2,1
    80bc:	18c0004c 	andi	r3,r3,1
    80c0:	1c62b03a 	or	r17,r3,r17
    80c4:	9c400115 	stw	r17,4(r19)
    80c8:	29000115 	stw	r4,4(r5)
    80cc:	2885883a 	add	r2,r5,r2
    80d0:	10c00117 	ldw	r3,4(r2)
    80d4:	29400204 	addi	r5,r5,8
    80d8:	a009883a 	mov	r4,r20
    80dc:	18c00054 	ori	r3,r3,1
    80e0:	10c00115 	stw	r3,4(r2)
    80e4:	00056300 	call	5630 <_free_r>
    80e8:	003fd306 	br	8038 <_realloc_r+0x164>
    80ec:	017fff04 	movi	r5,-4
    80f0:	414a703a 	and	r5,r8,r5
    80f4:	89800404 	addi	r6,r17,16
    80f8:	8151883a 	add	r8,r16,r5
    80fc:	4180590e 	bge	r8,r6,8264 <_realloc_r+0x390>
    8100:	1080004c 	andi	r2,r2,1
    8104:	103f9e1e 	bne	r2,zero,7f80 <_realloc_r+0xac>
    8108:	adbffe17 	ldw	r22,-8(r21)
    810c:	00bfff04 	movi	r2,-4
    8110:	9dadc83a 	sub	r22,r19,r22
    8114:	b1800117 	ldw	r6,4(r22)
    8118:	3084703a 	and	r2,r6,r2
    811c:	20002026 	beq	r4,zero,81a0 <_realloc_r+0x2cc>
    8120:	80af883a 	add	r23,r16,r2
    8124:	b96f883a 	add	r23,r23,r5
    8128:	21c05f26 	beq	r4,r7,82a8 <_realloc_r+0x3d4>
    812c:	b8c01c16 	blt	r23,r3,81a0 <_realloc_r+0x2cc>
    8130:	20800317 	ldw	r2,12(r4)
    8134:	20c00217 	ldw	r3,8(r4)
    8138:	81bfff04 	addi	r6,r16,-4
    813c:	01000904 	movi	r4,36
    8140:	18800315 	stw	r2,12(r3)
    8144:	10c00215 	stw	r3,8(r2)
    8148:	b0c00217 	ldw	r3,8(r22)
    814c:	b0800317 	ldw	r2,12(r22)
    8150:	b4800204 	addi	r18,r22,8
    8154:	18800315 	stw	r2,12(r3)
    8158:	10c00215 	stw	r3,8(r2)
    815c:	21801b36 	bltu	r4,r6,81cc <_realloc_r+0x2f8>
    8160:	008004c4 	movi	r2,19
    8164:	1180352e 	bgeu	r2,r6,823c <_realloc_r+0x368>
    8168:	a8800017 	ldw	r2,0(r21)
    816c:	b0800215 	stw	r2,8(r22)
    8170:	a8800117 	ldw	r2,4(r21)
    8174:	b0800315 	stw	r2,12(r22)
    8178:	008006c4 	movi	r2,27
    817c:	11807f36 	bltu	r2,r6,837c <_realloc_r+0x4a8>
    8180:	b0800404 	addi	r2,r22,16
    8184:	ad400204 	addi	r21,r21,8
    8188:	00002d06 	br	8240 <_realloc_r+0x36c>
    818c:	adbffe17 	ldw	r22,-8(r21)
    8190:	00bfff04 	movi	r2,-4
    8194:	9dadc83a 	sub	r22,r19,r22
    8198:	b1000117 	ldw	r4,4(r22)
    819c:	2084703a 	and	r2,r4,r2
    81a0:	b03f7726 	beq	r22,zero,7f80 <_realloc_r+0xac>
    81a4:	80af883a 	add	r23,r16,r2
    81a8:	b8ff7516 	blt	r23,r3,7f80 <_realloc_r+0xac>
    81ac:	b0800317 	ldw	r2,12(r22)
    81b0:	b0c00217 	ldw	r3,8(r22)
    81b4:	81bfff04 	addi	r6,r16,-4
    81b8:	01000904 	movi	r4,36
    81bc:	18800315 	stw	r2,12(r3)
    81c0:	10c00215 	stw	r3,8(r2)
    81c4:	b4800204 	addi	r18,r22,8
    81c8:	21bfe52e 	bgeu	r4,r6,8160 <_realloc_r+0x28c>
    81cc:	a80b883a 	mov	r5,r21
    81d0:	9009883a 	mov	r4,r18
    81d4:	0006c540 	call	6c54 <memmove>
    81d8:	b821883a 	mov	r16,r23
    81dc:	b027883a 	mov	r19,r22
    81e0:	003f8a06 	br	800c <_realloc_r+0x138>
    81e4:	300b883a 	mov	r5,r6
    81e8:	dfc00917 	ldw	ra,36(sp)
    81ec:	df000817 	ldw	fp,32(sp)
    81f0:	ddc00717 	ldw	r23,28(sp)
    81f4:	dd800617 	ldw	r22,24(sp)
    81f8:	dd400517 	ldw	r21,20(sp)
    81fc:	dd000417 	ldw	r20,16(sp)
    8200:	dcc00317 	ldw	r19,12(sp)
    8204:	dc800217 	ldw	r18,8(sp)
    8208:	dc400117 	ldw	r17,4(sp)
    820c:	dc000017 	ldw	r16,0(sp)
    8210:	dec00a04 	addi	sp,sp,40
    8214:	000621c1 	jmpi	621c <_malloc_r>
    8218:	a8c00017 	ldw	r3,0(r21)
    821c:	90c00015 	stw	r3,0(r18)
    8220:	a8c00117 	ldw	r3,4(r21)
    8224:	90c00115 	stw	r3,4(r18)
    8228:	00c006c4 	movi	r3,27
    822c:	19804536 	bltu	r3,r6,8344 <_realloc_r+0x470>
    8230:	90800204 	addi	r2,r18,8
    8234:	a8c00204 	addi	r3,r21,8
    8238:	003f6306 	br	7fc8 <_realloc_r+0xf4>
    823c:	9005883a 	mov	r2,r18
    8240:	a8c00017 	ldw	r3,0(r21)
    8244:	b821883a 	mov	r16,r23
    8248:	b027883a 	mov	r19,r22
    824c:	10c00015 	stw	r3,0(r2)
    8250:	a8c00117 	ldw	r3,4(r21)
    8254:	10c00115 	stw	r3,4(r2)
    8258:	a8c00217 	ldw	r3,8(r21)
    825c:	10c00215 	stw	r3,8(r2)
    8260:	003f6a06 	br	800c <_realloc_r+0x138>
    8264:	9c67883a 	add	r19,r19,r17
    8268:	4445c83a 	sub	r2,r8,r17
    826c:	e4c00215 	stw	r19,8(fp)
    8270:	10800054 	ori	r2,r2,1
    8274:	98800115 	stw	r2,4(r19)
    8278:	a8bfff17 	ldw	r2,-4(r21)
    827c:	a009883a 	mov	r4,r20
    8280:	1080004c 	andi	r2,r2,1
    8284:	1462b03a 	or	r17,r2,r17
    8288:	ac7fff15 	stw	r17,-4(r21)
    828c:	000e4e00 	call	e4e0 <__malloc_unlock>
    8290:	a805883a 	mov	r2,r21
    8294:	003f6b06 	br	8044 <_realloc_r+0x170>
    8298:	a80b883a 	mov	r5,r21
    829c:	9009883a 	mov	r4,r18
    82a0:	0006c540 	call	6c54 <memmove>
    82a4:	003f4e06 	br	7fe0 <_realloc_r+0x10c>
    82a8:	89000404 	addi	r4,r17,16
    82ac:	b93fbc16 	blt	r23,r4,81a0 <_realloc_r+0x2cc>
    82b0:	b0800317 	ldw	r2,12(r22)
    82b4:	b0c00217 	ldw	r3,8(r22)
    82b8:	81bfff04 	addi	r6,r16,-4
    82bc:	01000904 	movi	r4,36
    82c0:	18800315 	stw	r2,12(r3)
    82c4:	10c00215 	stw	r3,8(r2)
    82c8:	b4800204 	addi	r18,r22,8
    82cc:	21804336 	bltu	r4,r6,83dc <_realloc_r+0x508>
    82d0:	008004c4 	movi	r2,19
    82d4:	11803f2e 	bgeu	r2,r6,83d4 <_realloc_r+0x500>
    82d8:	a8800017 	ldw	r2,0(r21)
    82dc:	b0800215 	stw	r2,8(r22)
    82e0:	a8800117 	ldw	r2,4(r21)
    82e4:	b0800315 	stw	r2,12(r22)
    82e8:	008006c4 	movi	r2,27
    82ec:	11803f36 	bltu	r2,r6,83ec <_realloc_r+0x518>
    82f0:	b0800404 	addi	r2,r22,16
    82f4:	ad400204 	addi	r21,r21,8
    82f8:	a8c00017 	ldw	r3,0(r21)
    82fc:	10c00015 	stw	r3,0(r2)
    8300:	a8c00117 	ldw	r3,4(r21)
    8304:	10c00115 	stw	r3,4(r2)
    8308:	a8c00217 	ldw	r3,8(r21)
    830c:	10c00215 	stw	r3,8(r2)
    8310:	b447883a 	add	r3,r22,r17
    8314:	bc45c83a 	sub	r2,r23,r17
    8318:	e0c00215 	stw	r3,8(fp)
    831c:	10800054 	ori	r2,r2,1
    8320:	18800115 	stw	r2,4(r3)
    8324:	b0800117 	ldw	r2,4(r22)
    8328:	a009883a 	mov	r4,r20
    832c:	1080004c 	andi	r2,r2,1
    8330:	1462b03a 	or	r17,r2,r17
    8334:	b4400115 	stw	r17,4(r22)
    8338:	000e4e00 	call	e4e0 <__malloc_unlock>
    833c:	9005883a 	mov	r2,r18
    8340:	003f4006 	br	8044 <_realloc_r+0x170>
    8344:	a8c00217 	ldw	r3,8(r21)
    8348:	90c00215 	stw	r3,8(r18)
    834c:	a8c00317 	ldw	r3,12(r21)
    8350:	90c00315 	stw	r3,12(r18)
    8354:	30801126 	beq	r6,r2,839c <_realloc_r+0x4c8>
    8358:	90800404 	addi	r2,r18,16
    835c:	a8c00404 	addi	r3,r21,16
    8360:	003f1906 	br	7fc8 <_realloc_r+0xf4>
    8364:	90ffff17 	ldw	r3,-4(r18)
    8368:	00bfff04 	movi	r2,-4
    836c:	a825883a 	mov	r18,r21
    8370:	1884703a 	and	r2,r3,r2
    8374:	80a1883a 	add	r16,r16,r2
    8378:	003f2406 	br	800c <_realloc_r+0x138>
    837c:	a8800217 	ldw	r2,8(r21)
    8380:	b0800415 	stw	r2,16(r22)
    8384:	a8800317 	ldw	r2,12(r21)
    8388:	b0800515 	stw	r2,20(r22)
    838c:	31000a26 	beq	r6,r4,83b8 <_realloc_r+0x4e4>
    8390:	b0800604 	addi	r2,r22,24
    8394:	ad400404 	addi	r21,r21,16
    8398:	003fa906 	br	8240 <_realloc_r+0x36c>
    839c:	a9000417 	ldw	r4,16(r21)
    83a0:	90800604 	addi	r2,r18,24
    83a4:	a8c00604 	addi	r3,r21,24
    83a8:	91000415 	stw	r4,16(r18)
    83ac:	a9000517 	ldw	r4,20(r21)
    83b0:	91000515 	stw	r4,20(r18)
    83b4:	003f0406 	br	7fc8 <_realloc_r+0xf4>
    83b8:	a8c00417 	ldw	r3,16(r21)
    83bc:	ad400604 	addi	r21,r21,24
    83c0:	b0800804 	addi	r2,r22,32
    83c4:	b0c00615 	stw	r3,24(r22)
    83c8:	a8ffff17 	ldw	r3,-4(r21)
    83cc:	b0c00715 	stw	r3,28(r22)
    83d0:	003f9b06 	br	8240 <_realloc_r+0x36c>
    83d4:	9005883a 	mov	r2,r18
    83d8:	003fc706 	br	82f8 <_realloc_r+0x424>
    83dc:	a80b883a 	mov	r5,r21
    83e0:	9009883a 	mov	r4,r18
    83e4:	0006c540 	call	6c54 <memmove>
    83e8:	003fc906 	br	8310 <_realloc_r+0x43c>
    83ec:	a8800217 	ldw	r2,8(r21)
    83f0:	b0800415 	stw	r2,16(r22)
    83f4:	a8800317 	ldw	r2,12(r21)
    83f8:	b0800515 	stw	r2,20(r22)
    83fc:	31000726 	beq	r6,r4,841c <_realloc_r+0x548>
    8400:	b0800604 	addi	r2,r22,24
    8404:	ad400404 	addi	r21,r21,16
    8408:	003fbb06 	br	82f8 <_realloc_r+0x424>
    840c:	a009883a 	mov	r4,r20
    8410:	000e4e00 	call	e4e0 <__malloc_unlock>
    8414:	0005883a 	mov	r2,zero
    8418:	003f0a06 	br	8044 <_realloc_r+0x170>
    841c:	a8c00417 	ldw	r3,16(r21)
    8420:	ad400604 	addi	r21,r21,24
    8424:	b0800804 	addi	r2,r22,32
    8428:	b0c00615 	stw	r3,24(r22)
    842c:	a8ffff17 	ldw	r3,-4(r21)
    8430:	b0c00715 	stw	r3,28(r22)
    8434:	003fb006 	br	82f8 <_realloc_r+0x424>

00008438 <__fpclassifyd>:
    8438:	00a00034 	movhi	r2,32768
    843c:	10bfffc4 	addi	r2,r2,-1
    8440:	2884703a 	and	r2,r5,r2
    8444:	10000726 	beq	r2,zero,8464 <__fpclassifyd+0x2c>
    8448:	00fffc34 	movhi	r3,65520
    844c:	019ff834 	movhi	r6,32736
    8450:	28c7883a 	add	r3,r5,r3
    8454:	31bfffc4 	addi	r6,r6,-1
    8458:	30c00536 	bltu	r6,r3,8470 <__fpclassifyd+0x38>
    845c:	00800104 	movi	r2,4
    8460:	f800283a 	ret
    8464:	2000021e 	bne	r4,zero,8470 <__fpclassifyd+0x38>
    8468:	00800084 	movi	r2,2
    846c:	f800283a 	ret
    8470:	00dffc34 	movhi	r3,32752
    8474:	019ff834 	movhi	r6,32736
    8478:	28cb883a 	add	r5,r5,r3
    847c:	31bfffc4 	addi	r6,r6,-1
    8480:	317ff62e 	bgeu	r6,r5,845c <__fpclassifyd+0x24>
    8484:	01400434 	movhi	r5,16
    8488:	297fffc4 	addi	r5,r5,-1
    848c:	28800236 	bltu	r5,r2,8498 <__fpclassifyd+0x60>
    8490:	008000c4 	movi	r2,3
    8494:	f800283a 	ret
    8498:	10c00226 	beq	r2,r3,84a4 <__fpclassifyd+0x6c>
    849c:	0005883a 	mov	r2,zero
    84a0:	f800283a 	ret
    84a4:	2005003a 	cmpeq	r2,r4,zero
    84a8:	f800283a 	ret

000084ac <_sbrk_r>:
    84ac:	defffd04 	addi	sp,sp,-12
    84b0:	dc000015 	stw	r16,0(sp)
    84b4:	040000b4 	movhi	r16,2
    84b8:	dc400115 	stw	r17,4(sp)
    84bc:	84397704 	addi	r16,r16,-6692
    84c0:	2023883a 	mov	r17,r4
    84c4:	2809883a 	mov	r4,r5
    84c8:	dfc00215 	stw	ra,8(sp)
    84cc:	80000015 	stw	zero,0(r16)
    84d0:	000e0b80 	call	e0b8 <sbrk>
    84d4:	00ffffc4 	movi	r3,-1
    84d8:	10c00526 	beq	r2,r3,84f0 <_sbrk_r+0x44>
    84dc:	dfc00217 	ldw	ra,8(sp)
    84e0:	dc400117 	ldw	r17,4(sp)
    84e4:	dc000017 	ldw	r16,0(sp)
    84e8:	dec00304 	addi	sp,sp,12
    84ec:	f800283a 	ret
    84f0:	80c00017 	ldw	r3,0(r16)
    84f4:	183ff926 	beq	r3,zero,84dc <_sbrk_r+0x30>
    84f8:	88c00015 	stw	r3,0(r17)
    84fc:	003ff706 	br	84dc <_sbrk_r+0x30>

00008500 <__sread>:
    8500:	defffe04 	addi	sp,sp,-8
    8504:	dc000015 	stw	r16,0(sp)
    8508:	2821883a 	mov	r16,r5
    850c:	2940038f 	ldh	r5,14(r5)
    8510:	dfc00115 	stw	ra,4(sp)
    8514:	000a2f40 	call	a2f4 <_read_r>
    8518:	10000716 	blt	r2,zero,8538 <__sread+0x38>
    851c:	80c01417 	ldw	r3,80(r16)
    8520:	1887883a 	add	r3,r3,r2
    8524:	80c01415 	stw	r3,80(r16)
    8528:	dfc00117 	ldw	ra,4(sp)
    852c:	dc000017 	ldw	r16,0(sp)
    8530:	dec00204 	addi	sp,sp,8
    8534:	f800283a 	ret
    8538:	80c0030b 	ldhu	r3,12(r16)
    853c:	18fbffcc 	andi	r3,r3,61439
    8540:	80c0030d 	sth	r3,12(r16)
    8544:	dfc00117 	ldw	ra,4(sp)
    8548:	dc000017 	ldw	r16,0(sp)
    854c:	dec00204 	addi	sp,sp,8
    8550:	f800283a 	ret

00008554 <__seofread>:
    8554:	0005883a 	mov	r2,zero
    8558:	f800283a 	ret

0000855c <__swrite>:
    855c:	2880030b 	ldhu	r2,12(r5)
    8560:	defffb04 	addi	sp,sp,-20
    8564:	dcc00315 	stw	r19,12(sp)
    8568:	dc800215 	stw	r18,8(sp)
    856c:	dc400115 	stw	r17,4(sp)
    8570:	dc000015 	stw	r16,0(sp)
    8574:	dfc00415 	stw	ra,16(sp)
    8578:	10c0400c 	andi	r3,r2,256
    857c:	2821883a 	mov	r16,r5
    8580:	2023883a 	mov	r17,r4
    8584:	3025883a 	mov	r18,r6
    8588:	3827883a 	mov	r19,r7
    858c:	18000526 	beq	r3,zero,85a4 <__swrite+0x48>
    8590:	2940038f 	ldh	r5,14(r5)
    8594:	01c00084 	movi	r7,2
    8598:	000d883a 	mov	r6,zero
    859c:	000a2940 	call	a294 <_lseek_r>
    85a0:	8080030b 	ldhu	r2,12(r16)
    85a4:	8140038f 	ldh	r5,14(r16)
    85a8:	10bbffcc 	andi	r2,r2,61439
    85ac:	980f883a 	mov	r7,r19
    85b0:	900d883a 	mov	r6,r18
    85b4:	8809883a 	mov	r4,r17
    85b8:	8080030d 	sth	r2,12(r16)
    85bc:	dfc00417 	ldw	ra,16(sp)
    85c0:	dcc00317 	ldw	r19,12(sp)
    85c4:	dc800217 	ldw	r18,8(sp)
    85c8:	dc400117 	ldw	r17,4(sp)
    85cc:	dc000017 	ldw	r16,0(sp)
    85d0:	dec00504 	addi	sp,sp,20
    85d4:	0009d601 	jmpi	9d60 <_write_r>

000085d8 <__sseek>:
    85d8:	defffe04 	addi	sp,sp,-8
    85dc:	dc000015 	stw	r16,0(sp)
    85e0:	2821883a 	mov	r16,r5
    85e4:	2940038f 	ldh	r5,14(r5)
    85e8:	dfc00115 	stw	ra,4(sp)
    85ec:	000a2940 	call	a294 <_lseek_r>
    85f0:	00ffffc4 	movi	r3,-1
    85f4:	10c00826 	beq	r2,r3,8618 <__sseek+0x40>
    85f8:	80c0030b 	ldhu	r3,12(r16)
    85fc:	80801415 	stw	r2,80(r16)
    8600:	18c40014 	ori	r3,r3,4096
    8604:	80c0030d 	sth	r3,12(r16)
    8608:	dfc00117 	ldw	ra,4(sp)
    860c:	dc000017 	ldw	r16,0(sp)
    8610:	dec00204 	addi	sp,sp,8
    8614:	f800283a 	ret
    8618:	80c0030b 	ldhu	r3,12(r16)
    861c:	18fbffcc 	andi	r3,r3,61439
    8620:	80c0030d 	sth	r3,12(r16)
    8624:	dfc00117 	ldw	ra,4(sp)
    8628:	dc000017 	ldw	r16,0(sp)
    862c:	dec00204 	addi	sp,sp,8
    8630:	f800283a 	ret

00008634 <__sclose>:
    8634:	2940038f 	ldh	r5,14(r5)
    8638:	0009dc01 	jmpi	9dc0 <_close_r>

0000863c <strcmp>:
    863c:	2144b03a 	or	r2,r4,r5
    8640:	108000cc 	andi	r2,r2,3
    8644:	1000171e 	bne	r2,zero,86a4 <strcmp+0x68>
    8648:	20800017 	ldw	r2,0(r4)
    864c:	28c00017 	ldw	r3,0(r5)
    8650:	10c0141e 	bne	r2,r3,86a4 <strcmp+0x68>
    8654:	027fbff4 	movhi	r9,65279
    8658:	4a7fbfc4 	addi	r9,r9,-257
    865c:	0086303a 	nor	r3,zero,r2
    8660:	02202074 	movhi	r8,32897
    8664:	1245883a 	add	r2,r2,r9
    8668:	42202004 	addi	r8,r8,-32640
    866c:	10c4703a 	and	r2,r2,r3
    8670:	1204703a 	and	r2,r2,r8
    8674:	10000226 	beq	r2,zero,8680 <strcmp+0x44>
    8678:	00002306 	br	8708 <strcmp+0xcc>
    867c:	1000221e 	bne	r2,zero,8708 <strcmp+0xcc>
    8680:	21000104 	addi	r4,r4,4
    8684:	20c00017 	ldw	r3,0(r4)
    8688:	29400104 	addi	r5,r5,4
    868c:	29800017 	ldw	r6,0(r5)
    8690:	1a4f883a 	add	r7,r3,r9
    8694:	00c4303a 	nor	r2,zero,r3
    8698:	3884703a 	and	r2,r7,r2
    869c:	1204703a 	and	r2,r2,r8
    86a0:	19bff626 	beq	r3,r6,867c <strcmp+0x40>
    86a4:	20800003 	ldbu	r2,0(r4)
    86a8:	10c03fcc 	andi	r3,r2,255
    86ac:	18c0201c 	xori	r3,r3,128
    86b0:	18ffe004 	addi	r3,r3,-128
    86b4:	18000c26 	beq	r3,zero,86e8 <strcmp+0xac>
    86b8:	29800007 	ldb	r6,0(r5)
    86bc:	19800326 	beq	r3,r6,86cc <strcmp+0x90>
    86c0:	00001306 	br	8710 <strcmp+0xd4>
    86c4:	29800007 	ldb	r6,0(r5)
    86c8:	11800b1e 	bne	r2,r6,86f8 <strcmp+0xbc>
    86cc:	21000044 	addi	r4,r4,1
    86d0:	20c00003 	ldbu	r3,0(r4)
    86d4:	29400044 	addi	r5,r5,1
    86d8:	18803fcc 	andi	r2,r3,255
    86dc:	1080201c 	xori	r2,r2,128
    86e0:	10bfe004 	addi	r2,r2,-128
    86e4:	103ff71e 	bne	r2,zero,86c4 <strcmp+0x88>
    86e8:	0007883a 	mov	r3,zero
    86ec:	28800003 	ldbu	r2,0(r5)
    86f0:	1885c83a 	sub	r2,r3,r2
    86f4:	f800283a 	ret
    86f8:	28800003 	ldbu	r2,0(r5)
    86fc:	18c03fcc 	andi	r3,r3,255
    8700:	1885c83a 	sub	r2,r3,r2
    8704:	f800283a 	ret
    8708:	0005883a 	mov	r2,zero
    870c:	f800283a 	ret
    8710:	10c03fcc 	andi	r3,r2,255
    8714:	003ff506 	br	86ec <strcmp+0xb0>

00008718 <__sprint_r.part.0>:
    8718:	28801917 	ldw	r2,100(r5)
    871c:	defff604 	addi	sp,sp,-40
    8720:	dd400515 	stw	r21,20(sp)
    8724:	dfc00915 	stw	ra,36(sp)
    8728:	df000815 	stw	fp,32(sp)
    872c:	ddc00715 	stw	r23,28(sp)
    8730:	dd800615 	stw	r22,24(sp)
    8734:	dd000415 	stw	r20,16(sp)
    8738:	dcc00315 	stw	r19,12(sp)
    873c:	dc800215 	stw	r18,8(sp)
    8740:	dc400115 	stw	r17,4(sp)
    8744:	dc000015 	stw	r16,0(sp)
    8748:	1088000c 	andi	r2,r2,8192
    874c:	302b883a 	mov	r21,r6
    8750:	10002e26 	beq	r2,zero,880c <__sprint_r.part.0+0xf4>
    8754:	30800217 	ldw	r2,8(r6)
    8758:	35800017 	ldw	r22,0(r6)
    875c:	10002926 	beq	r2,zero,8804 <__sprint_r.part.0+0xec>
    8760:	2827883a 	mov	r19,r5
    8764:	2029883a 	mov	r20,r4
    8768:	b5c00104 	addi	r23,r22,4
    876c:	04bfffc4 	movi	r18,-1
    8770:	bc400017 	ldw	r17,0(r23)
    8774:	b4000017 	ldw	r16,0(r22)
    8778:	0039883a 	mov	fp,zero
    877c:	8822d0ba 	srli	r17,r17,2
    8780:	8800031e 	bne	r17,zero,8790 <__sprint_r.part.0+0x78>
    8784:	00001806 	br	87e8 <__sprint_r.part.0+0xd0>
    8788:	84000104 	addi	r16,r16,4
    878c:	8f001526 	beq	r17,fp,87e4 <__sprint_r.part.0+0xcc>
    8790:	81400017 	ldw	r5,0(r16)
    8794:	980d883a 	mov	r6,r19
    8798:	a009883a 	mov	r4,r20
    879c:	000a1400 	call	a140 <_fputwc_r>
    87a0:	e7000044 	addi	fp,fp,1
    87a4:	14bff81e 	bne	r2,r18,8788 <__sprint_r.part.0+0x70>
    87a8:	9005883a 	mov	r2,r18
    87ac:	a8000215 	stw	zero,8(r21)
    87b0:	a8000115 	stw	zero,4(r21)
    87b4:	dfc00917 	ldw	ra,36(sp)
    87b8:	df000817 	ldw	fp,32(sp)
    87bc:	ddc00717 	ldw	r23,28(sp)
    87c0:	dd800617 	ldw	r22,24(sp)
    87c4:	dd400517 	ldw	r21,20(sp)
    87c8:	dd000417 	ldw	r20,16(sp)
    87cc:	dcc00317 	ldw	r19,12(sp)
    87d0:	dc800217 	ldw	r18,8(sp)
    87d4:	dc400117 	ldw	r17,4(sp)
    87d8:	dc000017 	ldw	r16,0(sp)
    87dc:	dec00a04 	addi	sp,sp,40
    87e0:	f800283a 	ret
    87e4:	a8800217 	ldw	r2,8(r21)
    87e8:	8c63883a 	add	r17,r17,r17
    87ec:	8c63883a 	add	r17,r17,r17
    87f0:	1445c83a 	sub	r2,r2,r17
    87f4:	a8800215 	stw	r2,8(r21)
    87f8:	b5800204 	addi	r22,r22,8
    87fc:	bdc00204 	addi	r23,r23,8
    8800:	103fdb1e 	bne	r2,zero,8770 <__sprint_r.part.0+0x58>
    8804:	0005883a 	mov	r2,zero
    8808:	003fe806 	br	87ac <__sprint_r.part.0+0x94>
    880c:	00059400 	call	5940 <__sfvwrite_r>
    8810:	003fe606 	br	87ac <__sprint_r.part.0+0x94>

00008814 <__sprint_r>:
    8814:	30c00217 	ldw	r3,8(r6)
    8818:	18000126 	beq	r3,zero,8820 <__sprint_r+0xc>
    881c:	00087181 	jmpi	8718 <__sprint_r.part.0>
    8820:	30000115 	stw	zero,4(r6)
    8824:	0005883a 	mov	r2,zero
    8828:	f800283a 	ret

0000882c <___vfiprintf_internal_r>:
    882c:	deffc904 	addi	sp,sp,-220
    8830:	df003515 	stw	fp,212(sp)
    8834:	dd003115 	stw	r20,196(sp)
    8838:	dfc03615 	stw	ra,216(sp)
    883c:	ddc03415 	stw	r23,208(sp)
    8840:	dd803315 	stw	r22,204(sp)
    8844:	dd403215 	stw	r21,200(sp)
    8848:	dcc03015 	stw	r19,192(sp)
    884c:	dc802f15 	stw	r18,188(sp)
    8850:	dc402e15 	stw	r17,184(sp)
    8854:	dc002d15 	stw	r16,180(sp)
    8858:	d9002015 	stw	r4,128(sp)
    885c:	d9c02215 	stw	r7,136(sp)
    8860:	2829883a 	mov	r20,r5
    8864:	3039883a 	mov	fp,r6
    8868:	20000226 	beq	r4,zero,8874 <___vfiprintf_internal_r+0x48>
    886c:	20800e17 	ldw	r2,56(r4)
    8870:	1000cf26 	beq	r2,zero,8bb0 <___vfiprintf_internal_r+0x384>
    8874:	a080030b 	ldhu	r2,12(r20)
    8878:	10c8000c 	andi	r3,r2,8192
    887c:	1800061e 	bne	r3,zero,8898 <___vfiprintf_internal_r+0x6c>
    8880:	a1001917 	ldw	r4,100(r20)
    8884:	00f7ffc4 	movi	r3,-8193
    8888:	10880014 	ori	r2,r2,8192
    888c:	20c6703a 	and	r3,r4,r3
    8890:	a080030d 	sth	r2,12(r20)
    8894:	a0c01915 	stw	r3,100(r20)
    8898:	10c0020c 	andi	r3,r2,8
    889c:	1800a926 	beq	r3,zero,8b44 <___vfiprintf_internal_r+0x318>
    88a0:	a0c00417 	ldw	r3,16(r20)
    88a4:	1800a726 	beq	r3,zero,8b44 <___vfiprintf_internal_r+0x318>
    88a8:	1080068c 	andi	r2,r2,26
    88ac:	00c00284 	movi	r3,10
    88b0:	10c0ac26 	beq	r2,r3,8b64 <___vfiprintf_internal_r+0x338>
    88b4:	da801a04 	addi	r10,sp,104
    88b8:	da801e15 	stw	r10,120(sp)
    88bc:	d8801e17 	ldw	r2,120(sp)
    88c0:	da8019c4 	addi	r10,sp,103
    88c4:	058000b4 	movhi	r22,2
    88c8:	05c000b4 	movhi	r23,2
    88cc:	da801f15 	stw	r10,124(sp)
    88d0:	1295c83a 	sub	r10,r2,r10
    88d4:	b5a90804 	addi	r22,r22,-23520
    88d8:	bde90404 	addi	r23,r23,-23536
    88dc:	dec01a15 	stw	sp,104(sp)
    88e0:	d8001c15 	stw	zero,112(sp)
    88e4:	d8001b15 	stw	zero,108(sp)
    88e8:	d8002615 	stw	zero,152(sp)
    88ec:	d8002315 	stw	zero,140(sp)
    88f0:	da802715 	stw	r10,156(sp)
    88f4:	d811883a 	mov	r8,sp
    88f8:	dd002115 	stw	r20,132(sp)
    88fc:	e021883a 	mov	r16,fp
    8900:	80800007 	ldb	r2,0(r16)
    8904:	1003ea26 	beq	r2,zero,98b0 <___vfiprintf_internal_r+0x1084>
    8908:	00c00944 	movi	r3,37
    890c:	8025883a 	mov	r18,r16
    8910:	10c0021e 	bne	r2,r3,891c <___vfiprintf_internal_r+0xf0>
    8914:	00001606 	br	8970 <___vfiprintf_internal_r+0x144>
    8918:	10c00326 	beq	r2,r3,8928 <___vfiprintf_internal_r+0xfc>
    891c:	94800044 	addi	r18,r18,1
    8920:	90800007 	ldb	r2,0(r18)
    8924:	103ffc1e 	bne	r2,zero,8918 <___vfiprintf_internal_r+0xec>
    8928:	9423c83a 	sub	r17,r18,r16
    892c:	88001026 	beq	r17,zero,8970 <___vfiprintf_internal_r+0x144>
    8930:	d8c01c17 	ldw	r3,112(sp)
    8934:	d8801b17 	ldw	r2,108(sp)
    8938:	44000015 	stw	r16,0(r8)
    893c:	88c7883a 	add	r3,r17,r3
    8940:	10800044 	addi	r2,r2,1
    8944:	44400115 	stw	r17,4(r8)
    8948:	d8c01c15 	stw	r3,112(sp)
    894c:	d8801b15 	stw	r2,108(sp)
    8950:	010001c4 	movi	r4,7
    8954:	2080760e 	bge	r4,r2,8b30 <___vfiprintf_internal_r+0x304>
    8958:	1803821e 	bne	r3,zero,9764 <___vfiprintf_internal_r+0xf38>
    895c:	da802317 	ldw	r10,140(sp)
    8960:	d8001b15 	stw	zero,108(sp)
    8964:	d811883a 	mov	r8,sp
    8968:	5455883a 	add	r10,r10,r17
    896c:	da802315 	stw	r10,140(sp)
    8970:	90800007 	ldb	r2,0(r18)
    8974:	10044626 	beq	r2,zero,9a90 <___vfiprintf_internal_r+0x1264>
    8978:	90c00047 	ldb	r3,1(r18)
    897c:	94000044 	addi	r16,r18,1
    8980:	d8001d85 	stb	zero,118(sp)
    8984:	0009883a 	mov	r4,zero
    8988:	000f883a 	mov	r7,zero
    898c:	027fffc4 	movi	r9,-1
    8990:	0023883a 	mov	r17,zero
    8994:	0029883a 	mov	r20,zero
    8998:	01401604 	movi	r5,88
    899c:	01800244 	movi	r6,9
    89a0:	03400a84 	movi	r13,42
    89a4:	03001b04 	movi	r12,108
    89a8:	84000044 	addi	r16,r16,1
    89ac:	18bff804 	addi	r2,r3,-32
    89b0:	28827336 	bltu	r5,r2,9380 <___vfiprintf_internal_r+0xb54>
    89b4:	100490ba 	slli	r2,r2,2
    89b8:	02800074 	movhi	r10,1
    89bc:	52a27304 	addi	r10,r10,-30260
    89c0:	1285883a 	add	r2,r2,r10
    89c4:	10800017 	ldw	r2,0(r2)
    89c8:	1000683a 	jmp	r2
    89cc:	000090b4 	movhi	zero,578
    89d0:	00009380 	call	938 <main+0x1fc>
    89d4:	00009380 	call	938 <main+0x1fc>
    89d8:	000090d4 	movui	zero,579
    89dc:	00009380 	call	938 <main+0x1fc>
    89e0:	00009380 	call	938 <main+0x1fc>
    89e4:	00009380 	call	938 <main+0x1fc>
    89e8:	00009380 	call	938 <main+0x1fc>
    89ec:	00009380 	call	938 <main+0x1fc>
    89f0:	00009380 	call	938 <main+0x1fc>
    89f4:	000092bc 	xorhi	zero,zero,586
    89f8:	000092d8 	cmpnei	zero,zero,587
    89fc:	00009380 	call	938 <main+0x1fc>
    8a00:	00008bc0 	call	8bc <main+0x180>
    8a04:	000092e8 	cmpgeui	zero,zero,587
    8a08:	00009380 	call	938 <main+0x1fc>
    8a0c:	000090e0 	cmpeqi	zero,zero,579
    8a10:	000090ec 	andhi	zero,zero,579
    8a14:	000090ec 	andhi	zero,zero,579
    8a18:	000090ec 	andhi	zero,zero,579
    8a1c:	000090ec 	andhi	zero,zero,579
    8a20:	000090ec 	andhi	zero,zero,579
    8a24:	000090ec 	andhi	zero,zero,579
    8a28:	000090ec 	andhi	zero,zero,579
    8a2c:	000090ec 	andhi	zero,zero,579
    8a30:	000090ec 	andhi	zero,zero,579
    8a34:	00009380 	call	938 <main+0x1fc>
    8a38:	00009380 	call	938 <main+0x1fc>
    8a3c:	00009380 	call	938 <main+0x1fc>
    8a40:	00009380 	call	938 <main+0x1fc>
    8a44:	00009380 	call	938 <main+0x1fc>
    8a48:	00009380 	call	938 <main+0x1fc>
    8a4c:	00009380 	call	938 <main+0x1fc>
    8a50:	00009380 	call	938 <main+0x1fc>
    8a54:	00009380 	call	938 <main+0x1fc>
    8a58:	00009380 	call	938 <main+0x1fc>
    8a5c:	00009118 	cmpnei	zero,zero,580
    8a60:	00009380 	call	938 <main+0x1fc>
    8a64:	00009380 	call	938 <main+0x1fc>
    8a68:	00009380 	call	938 <main+0x1fc>
    8a6c:	00009380 	call	938 <main+0x1fc>
    8a70:	00009380 	call	938 <main+0x1fc>
    8a74:	00009380 	call	938 <main+0x1fc>
    8a78:	00009380 	call	938 <main+0x1fc>
    8a7c:	00009380 	call	938 <main+0x1fc>
    8a80:	00009380 	call	938 <main+0x1fc>
    8a84:	00009380 	call	938 <main+0x1fc>
    8a88:	00009150 	cmplti	zero,zero,581
    8a8c:	00009380 	call	938 <main+0x1fc>
    8a90:	00009380 	call	938 <main+0x1fc>
    8a94:	00009380 	call	938 <main+0x1fc>
    8a98:	00009380 	call	938 <main+0x1fc>
    8a9c:	00009380 	call	938 <main+0x1fc>
    8aa0:	000091a8 	cmpgeui	zero,zero,582
    8aa4:	00009380 	call	938 <main+0x1fc>
    8aa8:	00009380 	call	938 <main+0x1fc>
    8aac:	00009218 	cmpnei	zero,zero,584
    8ab0:	00009380 	call	938 <main+0x1fc>
    8ab4:	00009380 	call	938 <main+0x1fc>
    8ab8:	00009380 	call	938 <main+0x1fc>
    8abc:	00009380 	call	938 <main+0x1fc>
    8ac0:	00009380 	call	938 <main+0x1fc>
    8ac4:	00009380 	call	938 <main+0x1fc>
    8ac8:	00009380 	call	938 <main+0x1fc>
    8acc:	00009380 	call	938 <main+0x1fc>
    8ad0:	00009380 	call	938 <main+0x1fc>
    8ad4:	00009380 	call	938 <main+0x1fc>
    8ad8:	00008fc4 	movi	zero,575
    8adc:	00008ff0 	cmpltui	zero,zero,575
    8ae0:	00009380 	call	938 <main+0x1fc>
    8ae4:	00009380 	call	938 <main+0x1fc>
    8ae8:	00009380 	call	938 <main+0x1fc>
    8aec:	00009328 	cmpgeui	zero,zero,588
    8af0:	00008ff0 	cmpltui	zero,zero,575
    8af4:	00009380 	call	938 <main+0x1fc>
    8af8:	00009380 	call	938 <main+0x1fc>
    8afc:	00008e84 	movi	zero,570
    8b00:	00009380 	call	938 <main+0x1fc>
    8b04:	00008e94 	movui	zero,570
    8b08:	00008ed0 	cmplti	zero,zero,571
    8b0c:	00008bcc 	andi	zero,zero,559
    8b10:	00008e78 	rdprs	zero,zero,569
    8b14:	00009380 	call	938 <main+0x1fc>
    8b18:	00009254 	movui	zero,585
    8b1c:	00009380 	call	938 <main+0x1fc>
    8b20:	000092ac 	andhi	zero,zero,586
    8b24:	00009380 	call	938 <main+0x1fc>
    8b28:	00009380 	call	938 <main+0x1fc>
    8b2c:	00008f70 	cmpltui	zero,zero,573
    8b30:	42000204 	addi	r8,r8,8
    8b34:	da802317 	ldw	r10,140(sp)
    8b38:	5455883a 	add	r10,r10,r17
    8b3c:	da802315 	stw	r10,140(sp)
    8b40:	003f8b06 	br	8970 <___vfiprintf_internal_r+0x144>
    8b44:	d9002017 	ldw	r4,128(sp)
    8b48:	a00b883a 	mov	r5,r20
    8b4c:	00034e80 	call	34e8 <__swsetup_r>
    8b50:	1003b11e 	bne	r2,zero,9a18 <___vfiprintf_internal_r+0x11ec>
    8b54:	a080030b 	ldhu	r2,12(r20)
    8b58:	00c00284 	movi	r3,10
    8b5c:	1080068c 	andi	r2,r2,26
    8b60:	10ff541e 	bne	r2,r3,88b4 <___vfiprintf_internal_r+0x88>
    8b64:	a080038f 	ldh	r2,14(r20)
    8b68:	103f5216 	blt	r2,zero,88b4 <___vfiprintf_internal_r+0x88>
    8b6c:	d9c02217 	ldw	r7,136(sp)
    8b70:	d9002017 	ldw	r4,128(sp)
    8b74:	e00d883a 	mov	r6,fp
    8b78:	a00b883a 	mov	r5,r20
    8b7c:	0009ca40 	call	9ca4 <__sbprintf>
    8b80:	dfc03617 	ldw	ra,216(sp)
    8b84:	df003517 	ldw	fp,212(sp)
    8b88:	ddc03417 	ldw	r23,208(sp)
    8b8c:	dd803317 	ldw	r22,204(sp)
    8b90:	dd403217 	ldw	r21,200(sp)
    8b94:	dd003117 	ldw	r20,196(sp)
    8b98:	dcc03017 	ldw	r19,192(sp)
    8b9c:	dc802f17 	ldw	r18,188(sp)
    8ba0:	dc402e17 	ldw	r17,184(sp)
    8ba4:	dc002d17 	ldw	r16,180(sp)
    8ba8:	dec03704 	addi	sp,sp,220
    8bac:	f800283a 	ret
    8bb0:	00054bc0 	call	54bc <__sinit>
    8bb4:	003f2f06 	br	8874 <___vfiprintf_internal_r+0x48>
    8bb8:	0463c83a 	sub	r17,zero,r17
    8bbc:	d8802215 	stw	r2,136(sp)
    8bc0:	a5000114 	ori	r20,r20,4
    8bc4:	80c00007 	ldb	r3,0(r16)
    8bc8:	003f7706 	br	89a8 <___vfiprintf_internal_r+0x17c>
    8bcc:	00800c04 	movi	r2,48
    8bd0:	da802217 	ldw	r10,136(sp)
    8bd4:	d8801d05 	stb	r2,116(sp)
    8bd8:	00801e04 	movi	r2,120
    8bdc:	d8801d45 	stb	r2,117(sp)
    8be0:	d8001d85 	stb	zero,118(sp)
    8be4:	50c00104 	addi	r3,r10,4
    8be8:	54800017 	ldw	r18,0(r10)
    8bec:	0027883a 	mov	r19,zero
    8bf0:	a0800094 	ori	r2,r20,2
    8bf4:	48030b16 	blt	r9,zero,9824 <___vfiprintf_internal_r+0xff8>
    8bf8:	00bfdfc4 	movi	r2,-129
    8bfc:	a096703a 	and	r11,r20,r2
    8c00:	d8c02215 	stw	r3,136(sp)
    8c04:	5d000094 	ori	r20,r11,2
    8c08:	90032b1e 	bne	r18,zero,98b8 <___vfiprintf_internal_r+0x108c>
    8c0c:	008000b4 	movhi	r2,2
    8c10:	10a8a404 	addi	r2,r2,-23920
    8c14:	d8802615 	stw	r2,152(sp)
    8c18:	0039883a 	mov	fp,zero
    8c1c:	48017b1e 	bne	r9,zero,920c <___vfiprintf_internal_r+0x9e0>
    8c20:	0013883a 	mov	r9,zero
    8c24:	0027883a 	mov	r19,zero
    8c28:	dd401a04 	addi	r21,sp,104
    8c2c:	4825883a 	mov	r18,r9
    8c30:	4cc0010e 	bge	r9,r19,8c38 <___vfiprintf_internal_r+0x40c>
    8c34:	9825883a 	mov	r18,r19
    8c38:	e7003fcc 	andi	fp,fp,255
    8c3c:	e700201c 	xori	fp,fp,128
    8c40:	e73fe004 	addi	fp,fp,-128
    8c44:	e0000126 	beq	fp,zero,8c4c <___vfiprintf_internal_r+0x420>
    8c48:	94800044 	addi	r18,r18,1
    8c4c:	a380008c 	andi	r14,r20,2
    8c50:	70000126 	beq	r14,zero,8c58 <___vfiprintf_internal_r+0x42c>
    8c54:	94800084 	addi	r18,r18,2
    8c58:	a700210c 	andi	fp,r20,132
    8c5c:	e001df1e 	bne	fp,zero,93dc <___vfiprintf_internal_r+0xbb0>
    8c60:	8c87c83a 	sub	r3,r17,r18
    8c64:	00c1dd0e 	bge	zero,r3,93dc <___vfiprintf_internal_r+0xbb0>
    8c68:	01c00404 	movi	r7,16
    8c6c:	d8801c17 	ldw	r2,112(sp)
    8c70:	38c3ad0e 	bge	r7,r3,9b28 <___vfiprintf_internal_r+0x12fc>
    8c74:	028000b4 	movhi	r10,2
    8c78:	52a90804 	addi	r10,r10,-23520
    8c7c:	dc002915 	stw	r16,164(sp)
    8c80:	d9801b17 	ldw	r6,108(sp)
    8c84:	da802415 	stw	r10,144(sp)
    8c88:	03c001c4 	movi	r15,7
    8c8c:	da402515 	stw	r9,148(sp)
    8c90:	db802815 	stw	r14,160(sp)
    8c94:	1821883a 	mov	r16,r3
    8c98:	00000506 	br	8cb0 <___vfiprintf_internal_r+0x484>
    8c9c:	31400084 	addi	r5,r6,2
    8ca0:	42000204 	addi	r8,r8,8
    8ca4:	200d883a 	mov	r6,r4
    8ca8:	843ffc04 	addi	r16,r16,-16
    8cac:	3c000d0e 	bge	r7,r16,8ce4 <___vfiprintf_internal_r+0x4b8>
    8cb0:	10800404 	addi	r2,r2,16
    8cb4:	31000044 	addi	r4,r6,1
    8cb8:	45800015 	stw	r22,0(r8)
    8cbc:	41c00115 	stw	r7,4(r8)
    8cc0:	d8801c15 	stw	r2,112(sp)
    8cc4:	d9001b15 	stw	r4,108(sp)
    8cc8:	793ff40e 	bge	r15,r4,8c9c <___vfiprintf_internal_r+0x470>
    8ccc:	1001b51e 	bne	r2,zero,93a4 <___vfiprintf_internal_r+0xb78>
    8cd0:	843ffc04 	addi	r16,r16,-16
    8cd4:	000d883a 	mov	r6,zero
    8cd8:	01400044 	movi	r5,1
    8cdc:	d811883a 	mov	r8,sp
    8ce0:	3c3ff316 	blt	r7,r16,8cb0 <___vfiprintf_internal_r+0x484>
    8ce4:	8007883a 	mov	r3,r16
    8ce8:	da402517 	ldw	r9,148(sp)
    8cec:	db802817 	ldw	r14,160(sp)
    8cf0:	dc002917 	ldw	r16,164(sp)
    8cf4:	da802417 	ldw	r10,144(sp)
    8cf8:	1885883a 	add	r2,r3,r2
    8cfc:	40c00115 	stw	r3,4(r8)
    8d00:	42800015 	stw	r10,0(r8)
    8d04:	d8801c15 	stw	r2,112(sp)
    8d08:	d9401b15 	stw	r5,108(sp)
    8d0c:	00c001c4 	movi	r3,7
    8d10:	19426016 	blt	r3,r5,9694 <___vfiprintf_internal_r+0xe68>
    8d14:	d8c01d87 	ldb	r3,118(sp)
    8d18:	42000204 	addi	r8,r8,8
    8d1c:	29000044 	addi	r4,r5,1
    8d20:	1801b31e 	bne	r3,zero,93f0 <___vfiprintf_internal_r+0xbc4>
    8d24:	7001c026 	beq	r14,zero,9428 <___vfiprintf_internal_r+0xbfc>
    8d28:	d8c01d04 	addi	r3,sp,116
    8d2c:	10800084 	addi	r2,r2,2
    8d30:	40c00015 	stw	r3,0(r8)
    8d34:	00c00084 	movi	r3,2
    8d38:	40c00115 	stw	r3,4(r8)
    8d3c:	d8801c15 	stw	r2,112(sp)
    8d40:	d9001b15 	stw	r4,108(sp)
    8d44:	00c001c4 	movi	r3,7
    8d48:	1902650e 	bge	r3,r4,96e0 <___vfiprintf_internal_r+0xeb4>
    8d4c:	10029a1e 	bne	r2,zero,97b8 <___vfiprintf_internal_r+0xf8c>
    8d50:	00c02004 	movi	r3,128
    8d54:	01000044 	movi	r4,1
    8d58:	000b883a 	mov	r5,zero
    8d5c:	d811883a 	mov	r8,sp
    8d60:	e0c1b31e 	bne	fp,r3,9430 <___vfiprintf_internal_r+0xc04>
    8d64:	8cb9c83a 	sub	fp,r17,r18
    8d68:	0701b10e 	bge	zero,fp,9430 <___vfiprintf_internal_r+0xc04>
    8d6c:	01c00404 	movi	r7,16
    8d70:	3f03890e 	bge	r7,fp,9b98 <___vfiprintf_internal_r+0x136c>
    8d74:	00c000b4 	movhi	r3,2
    8d78:	18e90404 	addi	r3,r3,-23536
    8d7c:	d8c02415 	stw	r3,144(sp)
    8d80:	8007883a 	mov	r3,r16
    8d84:	034001c4 	movi	r13,7
    8d88:	e021883a 	mov	r16,fp
    8d8c:	da402515 	stw	r9,148(sp)
    8d90:	1839883a 	mov	fp,r3
    8d94:	00000506 	br	8dac <___vfiprintf_internal_r+0x580>
    8d98:	29800084 	addi	r6,r5,2
    8d9c:	42000204 	addi	r8,r8,8
    8da0:	180b883a 	mov	r5,r3
    8da4:	843ffc04 	addi	r16,r16,-16
    8da8:	3c000d0e 	bge	r7,r16,8de0 <___vfiprintf_internal_r+0x5b4>
    8dac:	10800404 	addi	r2,r2,16
    8db0:	28c00044 	addi	r3,r5,1
    8db4:	45c00015 	stw	r23,0(r8)
    8db8:	41c00115 	stw	r7,4(r8)
    8dbc:	d8801c15 	stw	r2,112(sp)
    8dc0:	d8c01b15 	stw	r3,108(sp)
    8dc4:	68fff40e 	bge	r13,r3,8d98 <___vfiprintf_internal_r+0x56c>
    8dc8:	1002241e 	bne	r2,zero,965c <___vfiprintf_internal_r+0xe30>
    8dcc:	843ffc04 	addi	r16,r16,-16
    8dd0:	01800044 	movi	r6,1
    8dd4:	000b883a 	mov	r5,zero
    8dd8:	d811883a 	mov	r8,sp
    8ddc:	3c3ff316 	blt	r7,r16,8dac <___vfiprintf_internal_r+0x580>
    8de0:	da402517 	ldw	r9,148(sp)
    8de4:	e007883a 	mov	r3,fp
    8de8:	8039883a 	mov	fp,r16
    8dec:	1821883a 	mov	r16,r3
    8df0:	d8c02417 	ldw	r3,144(sp)
    8df4:	1705883a 	add	r2,r2,fp
    8df8:	47000115 	stw	fp,4(r8)
    8dfc:	40c00015 	stw	r3,0(r8)
    8e00:	d8801c15 	stw	r2,112(sp)
    8e04:	d9801b15 	stw	r6,108(sp)
    8e08:	00c001c4 	movi	r3,7
    8e0c:	19827616 	blt	r3,r6,97e8 <___vfiprintf_internal_r+0xfbc>
    8e10:	4cf9c83a 	sub	fp,r9,r19
    8e14:	42000204 	addi	r8,r8,8
    8e18:	31000044 	addi	r4,r6,1
    8e1c:	300b883a 	mov	r5,r6
    8e20:	07018516 	blt	zero,fp,9438 <___vfiprintf_internal_r+0xc0c>
    8e24:	9885883a 	add	r2,r19,r2
    8e28:	45400015 	stw	r21,0(r8)
    8e2c:	44c00115 	stw	r19,4(r8)
    8e30:	d8801c15 	stw	r2,112(sp)
    8e34:	d9001b15 	stw	r4,108(sp)
    8e38:	00c001c4 	movi	r3,7
    8e3c:	1901dd0e 	bge	r3,r4,95b4 <___vfiprintf_internal_r+0xd88>
    8e40:	1002401e 	bne	r2,zero,9744 <___vfiprintf_internal_r+0xf18>
    8e44:	d8001b15 	stw	zero,108(sp)
    8e48:	a2c0010c 	andi	r11,r20,4
    8e4c:	58000226 	beq	r11,zero,8e58 <___vfiprintf_internal_r+0x62c>
    8e50:	8ca7c83a 	sub	r19,r17,r18
    8e54:	04c2f216 	blt	zero,r19,9a20 <___vfiprintf_internal_r+0x11f4>
    8e58:	8c80010e 	bge	r17,r18,8e60 <___vfiprintf_internal_r+0x634>
    8e5c:	9023883a 	mov	r17,r18
    8e60:	da802317 	ldw	r10,140(sp)
    8e64:	5455883a 	add	r10,r10,r17
    8e68:	da802315 	stw	r10,140(sp)
    8e6c:	d8001b15 	stw	zero,108(sp)
    8e70:	d811883a 	mov	r8,sp
    8e74:	003ea206 	br	8900 <___vfiprintf_internal_r+0xd4>
    8e78:	a5000814 	ori	r20,r20,32
    8e7c:	80c00007 	ldb	r3,0(r16)
    8e80:	003ec906 	br	89a8 <___vfiprintf_internal_r+0x17c>
    8e84:	80c00007 	ldb	r3,0(r16)
    8e88:	1b030926 	beq	r3,r12,9ab0 <___vfiprintf_internal_r+0x1284>
    8e8c:	a5000414 	ori	r20,r20,16
    8e90:	003ec506 	br	89a8 <___vfiprintf_internal_r+0x17c>
    8e94:	21003fcc 	andi	r4,r4,255
    8e98:	20035e1e 	bne	r4,zero,9c14 <___vfiprintf_internal_r+0x13e8>
    8e9c:	a080080c 	andi	r2,r20,32
    8ea0:	1002a526 	beq	r2,zero,9938 <___vfiprintf_internal_r+0x110c>
    8ea4:	da802217 	ldw	r10,136(sp)
    8ea8:	50800017 	ldw	r2,0(r10)
    8eac:	da802317 	ldw	r10,140(sp)
    8eb0:	5007d7fa 	srai	r3,r10,31
    8eb4:	da802217 	ldw	r10,136(sp)
    8eb8:	10c00115 	stw	r3,4(r2)
    8ebc:	52800104 	addi	r10,r10,4
    8ec0:	da802215 	stw	r10,136(sp)
    8ec4:	da802317 	ldw	r10,140(sp)
    8ec8:	12800015 	stw	r10,0(r2)
    8ecc:	003e8c06 	br	8900 <___vfiprintf_internal_r+0xd4>
    8ed0:	21003fcc 	andi	r4,r4,255
    8ed4:	2003511e 	bne	r4,zero,9c1c <___vfiprintf_internal_r+0x13f0>
    8ed8:	a080080c 	andi	r2,r20,32
    8edc:	1000a126 	beq	r2,zero,9164 <___vfiprintf_internal_r+0x938>
    8ee0:	da802217 	ldw	r10,136(sp)
    8ee4:	d8001d85 	stb	zero,118(sp)
    8ee8:	50800204 	addi	r2,r10,8
    8eec:	54800017 	ldw	r18,0(r10)
    8ef0:	54c00117 	ldw	r19,4(r10)
    8ef4:	4802b416 	blt	r9,zero,99c8 <___vfiprintf_internal_r+0x119c>
    8ef8:	013fdfc4 	movi	r4,-129
    8efc:	94c6b03a 	or	r3,r18,r19
    8f00:	d8802215 	stw	r2,136(sp)
    8f04:	a128703a 	and	r20,r20,r4
    8f08:	1800a226 	beq	r3,zero,9194 <___vfiprintf_internal_r+0x968>
    8f0c:	0039883a 	mov	fp,zero
    8f10:	dd401a04 	addi	r21,sp,104
    8f14:	9006d0fa 	srli	r3,r18,3
    8f18:	9808977a 	slli	r4,r19,29
    8f1c:	9826d0fa 	srli	r19,r19,3
    8f20:	948001cc 	andi	r18,r18,7
    8f24:	90800c04 	addi	r2,r18,48
    8f28:	ad7fffc4 	addi	r21,r21,-1
    8f2c:	20e4b03a 	or	r18,r4,r3
    8f30:	a8800005 	stb	r2,0(r21)
    8f34:	94c6b03a 	or	r3,r18,r19
    8f38:	183ff61e 	bne	r3,zero,8f14 <___vfiprintf_internal_r+0x6e8>
    8f3c:	a0c0004c 	andi	r3,r20,1
    8f40:	18005926 	beq	r3,zero,90a8 <___vfiprintf_internal_r+0x87c>
    8f44:	10803fcc 	andi	r2,r2,255
    8f48:	1080201c 	xori	r2,r2,128
    8f4c:	10bfe004 	addi	r2,r2,-128
    8f50:	00c00c04 	movi	r3,48
    8f54:	10c05426 	beq	r2,r3,90a8 <___vfiprintf_internal_r+0x87c>
    8f58:	da801e17 	ldw	r10,120(sp)
    8f5c:	a8bfffc4 	addi	r2,r21,-1
    8f60:	a8ffffc5 	stb	r3,-1(r21)
    8f64:	50a7c83a 	sub	r19,r10,r2
    8f68:	102b883a 	mov	r21,r2
    8f6c:	003f2f06 	br	8c2c <___vfiprintf_internal_r+0x400>
    8f70:	21003fcc 	andi	r4,r4,255
    8f74:	2003421e 	bne	r4,zero,9c80 <___vfiprintf_internal_r+0x1454>
    8f78:	008000b4 	movhi	r2,2
    8f7c:	10a8a404 	addi	r2,r2,-23920
    8f80:	d8802615 	stw	r2,152(sp)
    8f84:	a080080c 	andi	r2,r20,32
    8f88:	1000aa26 	beq	r2,zero,9234 <___vfiprintf_internal_r+0xa08>
    8f8c:	da802217 	ldw	r10,136(sp)
    8f90:	54800017 	ldw	r18,0(r10)
    8f94:	54c00117 	ldw	r19,4(r10)
    8f98:	52800204 	addi	r10,r10,8
    8f9c:	da802215 	stw	r10,136(sp)
    8fa0:	a080004c 	andi	r2,r20,1
    8fa4:	1001d226 	beq	r2,zero,96f0 <___vfiprintf_internal_r+0xec4>
    8fa8:	94c4b03a 	or	r2,r18,r19
    8fac:	1002351e 	bne	r2,zero,9884 <___vfiprintf_internal_r+0x1058>
    8fb0:	d8001d85 	stb	zero,118(sp)
    8fb4:	48022216 	blt	r9,zero,9840 <___vfiprintf_internal_r+0x1014>
    8fb8:	00bfdfc4 	movi	r2,-129
    8fbc:	a0a8703a 	and	r20,r20,r2
    8fc0:	003f1506 	br	8c18 <___vfiprintf_internal_r+0x3ec>
    8fc4:	da802217 	ldw	r10,136(sp)
    8fc8:	04800044 	movi	r18,1
    8fcc:	d8001d85 	stb	zero,118(sp)
    8fd0:	50800017 	ldw	r2,0(r10)
    8fd4:	52800104 	addi	r10,r10,4
    8fd8:	da802215 	stw	r10,136(sp)
    8fdc:	d8801005 	stb	r2,64(sp)
    8fe0:	9027883a 	mov	r19,r18
    8fe4:	dd401004 	addi	r21,sp,64
    8fe8:	0013883a 	mov	r9,zero
    8fec:	003f1706 	br	8c4c <___vfiprintf_internal_r+0x420>
    8ff0:	21003fcc 	andi	r4,r4,255
    8ff4:	2003201e 	bne	r4,zero,9c78 <___vfiprintf_internal_r+0x144c>
    8ff8:	a080080c 	andi	r2,r20,32
    8ffc:	10004b26 	beq	r2,zero,912c <___vfiprintf_internal_r+0x900>
    9000:	da802217 	ldw	r10,136(sp)
    9004:	50800117 	ldw	r2,4(r10)
    9008:	54800017 	ldw	r18,0(r10)
    900c:	52800204 	addi	r10,r10,8
    9010:	da802215 	stw	r10,136(sp)
    9014:	1027883a 	mov	r19,r2
    9018:	10022c16 	blt	r2,zero,98cc <___vfiprintf_internal_r+0x10a0>
    901c:	df001d83 	ldbu	fp,118(sp)
    9020:	48007216 	blt	r9,zero,91ec <___vfiprintf_internal_r+0x9c0>
    9024:	00ffdfc4 	movi	r3,-129
    9028:	94c4b03a 	or	r2,r18,r19
    902c:	a0e8703a 	and	r20,r20,r3
    9030:	1000cc26 	beq	r2,zero,9364 <___vfiprintf_internal_r+0xb38>
    9034:	98021026 	beq	r19,zero,9878 <___vfiprintf_internal_r+0x104c>
    9038:	dc402415 	stw	r17,144(sp)
    903c:	dc002515 	stw	r16,148(sp)
    9040:	9823883a 	mov	r17,r19
    9044:	9021883a 	mov	r16,r18
    9048:	dd401a04 	addi	r21,sp,104
    904c:	4825883a 	mov	r18,r9
    9050:	4027883a 	mov	r19,r8
    9054:	8009883a 	mov	r4,r16
    9058:	880b883a 	mov	r5,r17
    905c:	01800284 	movi	r6,10
    9060:	000f883a 	mov	r7,zero
    9064:	000ac0c0 	call	ac0c <__umoddi3>
    9068:	10800c04 	addi	r2,r2,48
    906c:	ad7fffc4 	addi	r21,r21,-1
    9070:	8009883a 	mov	r4,r16
    9074:	880b883a 	mov	r5,r17
    9078:	a8800005 	stb	r2,0(r21)
    907c:	01800284 	movi	r6,10
    9080:	000f883a 	mov	r7,zero
    9084:	000a6940 	call	a694 <__udivdi3>
    9088:	1021883a 	mov	r16,r2
    908c:	10c4b03a 	or	r2,r2,r3
    9090:	1823883a 	mov	r17,r3
    9094:	103fef1e 	bne	r2,zero,9054 <___vfiprintf_internal_r+0x828>
    9098:	dc402417 	ldw	r17,144(sp)
    909c:	dc002517 	ldw	r16,148(sp)
    90a0:	9013883a 	mov	r9,r18
    90a4:	9811883a 	mov	r8,r19
    90a8:	da801e17 	ldw	r10,120(sp)
    90ac:	5567c83a 	sub	r19,r10,r21
    90b0:	003ede06 	br	8c2c <___vfiprintf_internal_r+0x400>
    90b4:	38803fcc 	andi	r2,r7,255
    90b8:	1080201c 	xori	r2,r2,128
    90bc:	10bfe004 	addi	r2,r2,-128
    90c0:	1002371e 	bne	r2,zero,99a0 <___vfiprintf_internal_r+0x1174>
    90c4:	01000044 	movi	r4,1
    90c8:	01c00804 	movi	r7,32
    90cc:	80c00007 	ldb	r3,0(r16)
    90d0:	003e3506 	br	89a8 <___vfiprintf_internal_r+0x17c>
    90d4:	a5000054 	ori	r20,r20,1
    90d8:	80c00007 	ldb	r3,0(r16)
    90dc:	003e3206 	br	89a8 <___vfiprintf_internal_r+0x17c>
    90e0:	a5002014 	ori	r20,r20,128
    90e4:	80c00007 	ldb	r3,0(r16)
    90e8:	003e2f06 	br	89a8 <___vfiprintf_internal_r+0x17c>
    90ec:	8015883a 	mov	r10,r16
    90f0:	0023883a 	mov	r17,zero
    90f4:	18bff404 	addi	r2,r3,-48
    90f8:	50c00007 	ldb	r3,0(r10)
    90fc:	8c4002a4 	muli	r17,r17,10
    9100:	84000044 	addi	r16,r16,1
    9104:	8015883a 	mov	r10,r16
    9108:	1463883a 	add	r17,r2,r17
    910c:	18bff404 	addi	r2,r3,-48
    9110:	30bff92e 	bgeu	r6,r2,90f8 <___vfiprintf_internal_r+0x8cc>
    9114:	003e2506 	br	89ac <___vfiprintf_internal_r+0x180>
    9118:	21003fcc 	andi	r4,r4,255
    911c:	2002d41e 	bne	r4,zero,9c70 <___vfiprintf_internal_r+0x1444>
    9120:	a5000414 	ori	r20,r20,16
    9124:	a080080c 	andi	r2,r20,32
    9128:	103fb51e 	bne	r2,zero,9000 <___vfiprintf_internal_r+0x7d4>
    912c:	a080040c 	andi	r2,r20,16
    9130:	1001f826 	beq	r2,zero,9914 <___vfiprintf_internal_r+0x10e8>
    9134:	da802217 	ldw	r10,136(sp)
    9138:	54800017 	ldw	r18,0(r10)
    913c:	52800104 	addi	r10,r10,4
    9140:	da802215 	stw	r10,136(sp)
    9144:	9027d7fa 	srai	r19,r18,31
    9148:	9805883a 	mov	r2,r19
    914c:	003fb206 	br	9018 <___vfiprintf_internal_r+0x7ec>
    9150:	21003fcc 	andi	r4,r4,255
    9154:	2002c41e 	bne	r4,zero,9c68 <___vfiprintf_internal_r+0x143c>
    9158:	a5000414 	ori	r20,r20,16
    915c:	a080080c 	andi	r2,r20,32
    9160:	103f5f1e 	bne	r2,zero,8ee0 <___vfiprintf_internal_r+0x6b4>
    9164:	a080040c 	andi	r2,r20,16
    9168:	10020f26 	beq	r2,zero,99a8 <___vfiprintf_internal_r+0x117c>
    916c:	da802217 	ldw	r10,136(sp)
    9170:	d8001d85 	stb	zero,118(sp)
    9174:	0027883a 	mov	r19,zero
    9178:	50800104 	addi	r2,r10,4
    917c:	54800017 	ldw	r18,0(r10)
    9180:	48021116 	blt	r9,zero,99c8 <___vfiprintf_internal_r+0x119c>
    9184:	00ffdfc4 	movi	r3,-129
    9188:	d8802215 	stw	r2,136(sp)
    918c:	a0e8703a 	and	r20,r20,r3
    9190:	903f5e1e 	bne	r18,zero,8f0c <___vfiprintf_internal_r+0x6e0>
    9194:	0039883a 	mov	fp,zero
    9198:	4802a626 	beq	r9,zero,9c34 <___vfiprintf_internal_r+0x1408>
    919c:	0025883a 	mov	r18,zero
    91a0:	0027883a 	mov	r19,zero
    91a4:	003f5a06 	br	8f10 <___vfiprintf_internal_r+0x6e4>
    91a8:	21003fcc 	andi	r4,r4,255
    91ac:	20029f1e 	bne	r4,zero,9c2c <___vfiprintf_internal_r+0x1400>
    91b0:	a5000414 	ori	r20,r20,16
    91b4:	a080080c 	andi	r2,r20,32
    91b8:	10005e1e 	bne	r2,zero,9334 <___vfiprintf_internal_r+0xb08>
    91bc:	a080040c 	andi	r2,r20,16
    91c0:	1001a21e 	bne	r2,zero,984c <___vfiprintf_internal_r+0x1020>
    91c4:	a080100c 	andi	r2,r20,64
    91c8:	d8001d85 	stb	zero,118(sp)
    91cc:	da802217 	ldw	r10,136(sp)
    91d0:	1002231e 	bne	r2,zero,9a60 <___vfiprintf_internal_r+0x1234>
    91d4:	50800104 	addi	r2,r10,4
    91d8:	54800017 	ldw	r18,0(r10)
    91dc:	0027883a 	mov	r19,zero
    91e0:	4801a00e 	bge	r9,zero,9864 <___vfiprintf_internal_r+0x1038>
    91e4:	d8802215 	stw	r2,136(sp)
    91e8:	0039883a 	mov	fp,zero
    91ec:	94c4b03a 	or	r2,r18,r19
    91f0:	103f901e 	bne	r2,zero,9034 <___vfiprintf_internal_r+0x808>
    91f4:	00800044 	movi	r2,1
    91f8:	10803fcc 	andi	r2,r2,255
    91fc:	00c00044 	movi	r3,1
    9200:	10c05926 	beq	r2,r3,9368 <___vfiprintf_internal_r+0xb3c>
    9204:	00c00084 	movi	r3,2
    9208:	10ffe41e 	bne	r2,r3,919c <___vfiprintf_internal_r+0x970>
    920c:	0025883a 	mov	r18,zero
    9210:	0027883a 	mov	r19,zero
    9214:	00013d06 	br	970c <___vfiprintf_internal_r+0xee0>
    9218:	21003fcc 	andi	r4,r4,255
    921c:	2002811e 	bne	r4,zero,9c24 <___vfiprintf_internal_r+0x13f8>
    9220:	008000b4 	movhi	r2,2
    9224:	10a89f04 	addi	r2,r2,-23940
    9228:	d8802615 	stw	r2,152(sp)
    922c:	a080080c 	andi	r2,r20,32
    9230:	103f561e 	bne	r2,zero,8f8c <___vfiprintf_internal_r+0x760>
    9234:	a080040c 	andi	r2,r20,16
    9238:	1001d126 	beq	r2,zero,9980 <___vfiprintf_internal_r+0x1154>
    923c:	da802217 	ldw	r10,136(sp)
    9240:	0027883a 	mov	r19,zero
    9244:	54800017 	ldw	r18,0(r10)
    9248:	52800104 	addi	r10,r10,4
    924c:	da802215 	stw	r10,136(sp)
    9250:	003f5306 	br	8fa0 <___vfiprintf_internal_r+0x774>
    9254:	da802217 	ldw	r10,136(sp)
    9258:	d8001d85 	stb	zero,118(sp)
    925c:	55400017 	ldw	r21,0(r10)
    9260:	50c00104 	addi	r3,r10,4
    9264:	a8024226 	beq	r21,zero,9b70 <___vfiprintf_internal_r+0x1344>
    9268:	48021816 	blt	r9,zero,9acc <___vfiprintf_internal_r+0x12a0>
    926c:	480d883a 	mov	r6,r9
    9270:	000b883a 	mov	r5,zero
    9274:	a809883a 	mov	r4,r21
    9278:	d8c02a15 	stw	r3,168(sp)
    927c:	da002b15 	stw	r8,172(sp)
    9280:	da402c15 	stw	r9,176(sp)
    9284:	0006a280 	call	6a28 <memchr>
    9288:	d8c02a17 	ldw	r3,168(sp)
    928c:	da002b17 	ldw	r8,172(sp)
    9290:	da402c17 	ldw	r9,176(sp)
    9294:	10024826 	beq	r2,zero,9bb8 <___vfiprintf_internal_r+0x138c>
    9298:	1567c83a 	sub	r19,r2,r21
    929c:	df001d83 	ldbu	fp,118(sp)
    92a0:	d8c02215 	stw	r3,136(sp)
    92a4:	0013883a 	mov	r9,zero
    92a8:	003e6006 	br	8c2c <___vfiprintf_internal_r+0x400>
    92ac:	21003fcc 	andi	r4,r4,255
    92b0:	203fc026 	beq	r4,zero,91b4 <___vfiprintf_internal_r+0x988>
    92b4:	d9c01d85 	stb	r7,118(sp)
    92b8:	003fbe06 	br	91b4 <___vfiprintf_internal_r+0x988>
    92bc:	da802217 	ldw	r10,136(sp)
    92c0:	54400017 	ldw	r17,0(r10)
    92c4:	50800104 	addi	r2,r10,4
    92c8:	883e3b16 	blt	r17,zero,8bb8 <___vfiprintf_internal_r+0x38c>
    92cc:	d8802215 	stw	r2,136(sp)
    92d0:	80c00007 	ldb	r3,0(r16)
    92d4:	003db406 	br	89a8 <___vfiprintf_internal_r+0x17c>
    92d8:	01000044 	movi	r4,1
    92dc:	01c00ac4 	movi	r7,43
    92e0:	80c00007 	ldb	r3,0(r16)
    92e4:	003db006 	br	89a8 <___vfiprintf_internal_r+0x17c>
    92e8:	80c00007 	ldb	r3,0(r16)
    92ec:	82800044 	addi	r10,r16,1
    92f0:	1b423c26 	beq	r3,r13,9be4 <___vfiprintf_internal_r+0x13b8>
    92f4:	18bff404 	addi	r2,r3,-48
    92f8:	0013883a 	mov	r9,zero
    92fc:	30822b36 	bltu	r6,r2,9bac <___vfiprintf_internal_r+0x1380>
    9300:	50c00007 	ldb	r3,0(r10)
    9304:	4a4002a4 	muli	r9,r9,10
    9308:	54000044 	addi	r16,r10,1
    930c:	8015883a 	mov	r10,r16
    9310:	4893883a 	add	r9,r9,r2
    9314:	18bff404 	addi	r2,r3,-48
    9318:	30bff92e 	bgeu	r6,r2,9300 <___vfiprintf_internal_r+0xad4>
    931c:	483da30e 	bge	r9,zero,89ac <___vfiprintf_internal_r+0x180>
    9320:	027fffc4 	movi	r9,-1
    9324:	003da106 	br	89ac <___vfiprintf_internal_r+0x180>
    9328:	a5001014 	ori	r20,r20,64
    932c:	80c00007 	ldb	r3,0(r16)
    9330:	003d9d06 	br	89a8 <___vfiprintf_internal_r+0x17c>
    9334:	da802217 	ldw	r10,136(sp)
    9338:	d8001d85 	stb	zero,118(sp)
    933c:	50c00204 	addi	r3,r10,8
    9340:	54800017 	ldw	r18,0(r10)
    9344:	54c00117 	ldw	r19,4(r10)
    9348:	4801ca16 	blt	r9,zero,9a74 <___vfiprintf_internal_r+0x1248>
    934c:	013fdfc4 	movi	r4,-129
    9350:	94c4b03a 	or	r2,r18,r19
    9354:	d8c02215 	stw	r3,136(sp)
    9358:	a128703a 	and	r20,r20,r4
    935c:	0039883a 	mov	fp,zero
    9360:	103f341e 	bne	r2,zero,9034 <___vfiprintf_internal_r+0x808>
    9364:	483e2e26 	beq	r9,zero,8c20 <___vfiprintf_internal_r+0x3f4>
    9368:	0025883a 	mov	r18,zero
    936c:	94800c04 	addi	r18,r18,48
    9370:	dc8019c5 	stb	r18,103(sp)
    9374:	dcc02717 	ldw	r19,156(sp)
    9378:	dd4019c4 	addi	r21,sp,103
    937c:	003e2b06 	br	8c2c <___vfiprintf_internal_r+0x400>
    9380:	21003fcc 	andi	r4,r4,255
    9384:	2002361e 	bne	r4,zero,9c60 <___vfiprintf_internal_r+0x1434>
    9388:	1801c126 	beq	r3,zero,9a90 <___vfiprintf_internal_r+0x1264>
    938c:	04800044 	movi	r18,1
    9390:	d8c01005 	stb	r3,64(sp)
    9394:	d8001d85 	stb	zero,118(sp)
    9398:	9027883a 	mov	r19,r18
    939c:	dd401004 	addi	r21,sp,64
    93a0:	003f1106 	br	8fe8 <___vfiprintf_internal_r+0x7bc>
    93a4:	d9402117 	ldw	r5,132(sp)
    93a8:	d9002017 	ldw	r4,128(sp)
    93ac:	d9801a04 	addi	r6,sp,104
    93b0:	d9c02b15 	stw	r7,172(sp)
    93b4:	dbc02a15 	stw	r15,168(sp)
    93b8:	00087180 	call	8718 <__sprint_r.part.0>
    93bc:	d9c02b17 	ldw	r7,172(sp)
    93c0:	dbc02a17 	ldw	r15,168(sp)
    93c4:	10006d1e 	bne	r2,zero,957c <___vfiprintf_internal_r+0xd50>
    93c8:	d9801b17 	ldw	r6,108(sp)
    93cc:	d8801c17 	ldw	r2,112(sp)
    93d0:	d811883a 	mov	r8,sp
    93d4:	31400044 	addi	r5,r6,1
    93d8:	003e3306 	br	8ca8 <___vfiprintf_internal_r+0x47c>
    93dc:	d9401b17 	ldw	r5,108(sp)
    93e0:	d8801c17 	ldw	r2,112(sp)
    93e4:	29000044 	addi	r4,r5,1
    93e8:	d8c01d87 	ldb	r3,118(sp)
    93ec:	183e4d26 	beq	r3,zero,8d24 <___vfiprintf_internal_r+0x4f8>
    93f0:	00c00044 	movi	r3,1
    93f4:	d9401d84 	addi	r5,sp,118
    93f8:	10c5883a 	add	r2,r2,r3
    93fc:	41400015 	stw	r5,0(r8)
    9400:	40c00115 	stw	r3,4(r8)
    9404:	d8801c15 	stw	r2,112(sp)
    9408:	d9001b15 	stw	r4,108(sp)
    940c:	014001c4 	movi	r5,7
    9410:	2900a90e 	bge	r5,r4,96b8 <___vfiprintf_internal_r+0xe8c>
    9414:	1000da1e 	bne	r2,zero,9780 <___vfiprintf_internal_r+0xf54>
    9418:	7000ab1e 	bne	r14,zero,96c8 <___vfiprintf_internal_r+0xe9c>
    941c:	000b883a 	mov	r5,zero
    9420:	1809883a 	mov	r4,r3
    9424:	d811883a 	mov	r8,sp
    9428:	00c02004 	movi	r3,128
    942c:	e0fe4d26 	beq	fp,r3,8d64 <___vfiprintf_internal_r+0x538>
    9430:	4cf9c83a 	sub	fp,r9,r19
    9434:	073e7b0e 	bge	zero,fp,8e24 <___vfiprintf_internal_r+0x5f8>
    9438:	01c00404 	movi	r7,16
    943c:	3f01900e 	bge	r7,fp,9a80 <___vfiprintf_internal_r+0x1254>
    9440:	00c000b4 	movhi	r3,2
    9444:	18e90404 	addi	r3,r3,-23536
    9448:	d8c02415 	stw	r3,144(sp)
    944c:	034001c4 	movi	r13,7
    9450:	00000506 	br	9468 <___vfiprintf_internal_r+0xc3c>
    9454:	29000084 	addi	r4,r5,2
    9458:	42000204 	addi	r8,r8,8
    945c:	180b883a 	mov	r5,r3
    9460:	e73ffc04 	addi	fp,fp,-16
    9464:	3f000d0e 	bge	r7,fp,949c <___vfiprintf_internal_r+0xc70>
    9468:	10800404 	addi	r2,r2,16
    946c:	28c00044 	addi	r3,r5,1
    9470:	45c00015 	stw	r23,0(r8)
    9474:	41c00115 	stw	r7,4(r8)
    9478:	d8801c15 	stw	r2,112(sp)
    947c:	d8c01b15 	stw	r3,108(sp)
    9480:	68fff40e 	bge	r13,r3,9454 <___vfiprintf_internal_r+0xc28>
    9484:	1000101e 	bne	r2,zero,94c8 <___vfiprintf_internal_r+0xc9c>
    9488:	e73ffc04 	addi	fp,fp,-16
    948c:	01000044 	movi	r4,1
    9490:	000b883a 	mov	r5,zero
    9494:	d811883a 	mov	r8,sp
    9498:	3f3ff316 	blt	r7,fp,9468 <___vfiprintf_internal_r+0xc3c>
    949c:	da802417 	ldw	r10,144(sp)
    94a0:	1705883a 	add	r2,r2,fp
    94a4:	47000115 	stw	fp,4(r8)
    94a8:	42800015 	stw	r10,0(r8)
    94ac:	d8801c15 	stw	r2,112(sp)
    94b0:	d9001b15 	stw	r4,108(sp)
    94b4:	00c001c4 	movi	r3,7
    94b8:	19003616 	blt	r3,r4,9594 <___vfiprintf_internal_r+0xd68>
    94bc:	42000204 	addi	r8,r8,8
    94c0:	21000044 	addi	r4,r4,1
    94c4:	003e5706 	br	8e24 <___vfiprintf_internal_r+0x5f8>
    94c8:	d9402117 	ldw	r5,132(sp)
    94cc:	d9002017 	ldw	r4,128(sp)
    94d0:	d9801a04 	addi	r6,sp,104
    94d4:	d9c02b15 	stw	r7,172(sp)
    94d8:	db402a15 	stw	r13,168(sp)
    94dc:	00087180 	call	8718 <__sprint_r.part.0>
    94e0:	d9c02b17 	ldw	r7,172(sp)
    94e4:	db402a17 	ldw	r13,168(sp)
    94e8:	1000241e 	bne	r2,zero,957c <___vfiprintf_internal_r+0xd50>
    94ec:	d9401b17 	ldw	r5,108(sp)
    94f0:	d8801c17 	ldw	r2,112(sp)
    94f4:	d811883a 	mov	r8,sp
    94f8:	29000044 	addi	r4,r5,1
    94fc:	003fd806 	br	9460 <___vfiprintf_internal_r+0xc34>
    9500:	d9401b17 	ldw	r5,108(sp)
    9504:	00c000b4 	movhi	r3,2
    9508:	18e90804 	addi	r3,r3,-23520
    950c:	d8c02415 	stw	r3,144(sp)
    9510:	29400044 	addi	r5,r5,1
    9514:	d8c02417 	ldw	r3,144(sp)
    9518:	14c5883a 	add	r2,r2,r19
    951c:	44c00115 	stw	r19,4(r8)
    9520:	40c00015 	stw	r3,0(r8)
    9524:	d8801c15 	stw	r2,112(sp)
    9528:	d9401b15 	stw	r5,108(sp)
    952c:	00c001c4 	movi	r3,7
    9530:	1940070e 	bge	r3,r5,9550 <___vfiprintf_internal_r+0xd24>
    9534:	103e4826 	beq	r2,zero,8e58 <___vfiprintf_internal_r+0x62c>
    9538:	d9402117 	ldw	r5,132(sp)
    953c:	d9002017 	ldw	r4,128(sp)
    9540:	d9801a04 	addi	r6,sp,104
    9544:	00087180 	call	8718 <__sprint_r.part.0>
    9548:	10000c1e 	bne	r2,zero,957c <___vfiprintf_internal_r+0xd50>
    954c:	d8801c17 	ldw	r2,112(sp)
    9550:	8c80010e 	bge	r17,r18,9558 <___vfiprintf_internal_r+0xd2c>
    9554:	9023883a 	mov	r17,r18
    9558:	da802317 	ldw	r10,140(sp)
    955c:	5455883a 	add	r10,r10,r17
    9560:	da802315 	stw	r10,140(sp)
    9564:	103e4126 	beq	r2,zero,8e6c <___vfiprintf_internal_r+0x640>
    9568:	d9402117 	ldw	r5,132(sp)
    956c:	d9002017 	ldw	r4,128(sp)
    9570:	d9801a04 	addi	r6,sp,104
    9574:	00087180 	call	8718 <__sprint_r.part.0>
    9578:	103e3c26 	beq	r2,zero,8e6c <___vfiprintf_internal_r+0x640>
    957c:	dd002117 	ldw	r20,132(sp)
    9580:	a080030b 	ldhu	r2,12(r20)
    9584:	1080100c 	andi	r2,r2,64
    9588:	1001231e 	bne	r2,zero,9a18 <___vfiprintf_internal_r+0x11ec>
    958c:	d8802317 	ldw	r2,140(sp)
    9590:	003d7b06 	br	8b80 <___vfiprintf_internal_r+0x354>
    9594:	1000991e 	bne	r2,zero,97fc <___vfiprintf_internal_r+0xfd0>
    9598:	00c00044 	movi	r3,1
    959c:	9805883a 	mov	r2,r19
    95a0:	dd400015 	stw	r21,0(sp)
    95a4:	dcc00115 	stw	r19,4(sp)
    95a8:	dcc01c15 	stw	r19,112(sp)
    95ac:	d8c01b15 	stw	r3,108(sp)
    95b0:	d811883a 	mov	r8,sp
    95b4:	42000204 	addi	r8,r8,8
    95b8:	a2c0010c 	andi	r11,r20,4
    95bc:	583fe426 	beq	r11,zero,9550 <___vfiprintf_internal_r+0xd24>
    95c0:	8ca7c83a 	sub	r19,r17,r18
    95c4:	04ffe20e 	bge	zero,r19,9550 <___vfiprintf_internal_r+0xd24>
    95c8:	01c00404 	movi	r7,16
    95cc:	3cffcc0e 	bge	r7,r19,9500 <___vfiprintf_internal_r+0xcd4>
    95d0:	028000b4 	movhi	r10,2
    95d4:	52a90804 	addi	r10,r10,-23520
    95d8:	d9001b17 	ldw	r4,108(sp)
    95dc:	da802415 	stw	r10,144(sp)
    95e0:	382b883a 	mov	r21,r7
    95e4:	050001c4 	movi	r20,7
    95e8:	df002017 	ldw	fp,128(sp)
    95ec:	00000506 	br	9604 <___vfiprintf_internal_r+0xdd8>
    95f0:	21400084 	addi	r5,r4,2
    95f4:	42000204 	addi	r8,r8,8
    95f8:	1809883a 	mov	r4,r3
    95fc:	9cfffc04 	addi	r19,r19,-16
    9600:	acffc40e 	bge	r21,r19,9514 <___vfiprintf_internal_r+0xce8>
    9604:	10800404 	addi	r2,r2,16
    9608:	20c00044 	addi	r3,r4,1
    960c:	45800015 	stw	r22,0(r8)
    9610:	45400115 	stw	r21,4(r8)
    9614:	d8801c15 	stw	r2,112(sp)
    9618:	d8c01b15 	stw	r3,108(sp)
    961c:	a0fff40e 	bge	r20,r3,95f0 <___vfiprintf_internal_r+0xdc4>
    9620:	1000041e 	bne	r2,zero,9634 <___vfiprintf_internal_r+0xe08>
    9624:	01400044 	movi	r5,1
    9628:	0009883a 	mov	r4,zero
    962c:	d811883a 	mov	r8,sp
    9630:	003ff206 	br	95fc <___vfiprintf_internal_r+0xdd0>
    9634:	d9402117 	ldw	r5,132(sp)
    9638:	d9801a04 	addi	r6,sp,104
    963c:	e009883a 	mov	r4,fp
    9640:	00087180 	call	8718 <__sprint_r.part.0>
    9644:	103fcd1e 	bne	r2,zero,957c <___vfiprintf_internal_r+0xd50>
    9648:	d9001b17 	ldw	r4,108(sp)
    964c:	d8801c17 	ldw	r2,112(sp)
    9650:	d811883a 	mov	r8,sp
    9654:	21400044 	addi	r5,r4,1
    9658:	003fe806 	br	95fc <___vfiprintf_internal_r+0xdd0>
    965c:	d9402117 	ldw	r5,132(sp)
    9660:	d9002017 	ldw	r4,128(sp)
    9664:	d9801a04 	addi	r6,sp,104
    9668:	d9c02b15 	stw	r7,172(sp)
    966c:	db402a15 	stw	r13,168(sp)
    9670:	00087180 	call	8718 <__sprint_r.part.0>
    9674:	d9c02b17 	ldw	r7,172(sp)
    9678:	db402a17 	ldw	r13,168(sp)
    967c:	103fbf1e 	bne	r2,zero,957c <___vfiprintf_internal_r+0xd50>
    9680:	d9401b17 	ldw	r5,108(sp)
    9684:	d8801c17 	ldw	r2,112(sp)
    9688:	d811883a 	mov	r8,sp
    968c:	29800044 	addi	r6,r5,1
    9690:	003dc406 	br	8da4 <___vfiprintf_internal_r+0x578>
    9694:	1000d21e 	bne	r2,zero,99e0 <___vfiprintf_internal_r+0x11b4>
    9698:	d8c01d87 	ldb	r3,118(sp)
    969c:	18009526 	beq	r3,zero,98f4 <___vfiprintf_internal_r+0x10c8>
    96a0:	00800044 	movi	r2,1
    96a4:	d8c01d84 	addi	r3,sp,118
    96a8:	1009883a 	mov	r4,r2
    96ac:	d8c00015 	stw	r3,0(sp)
    96b0:	d8800115 	stw	r2,4(sp)
    96b4:	d811883a 	mov	r8,sp
    96b8:	200b883a 	mov	r5,r4
    96bc:	42000204 	addi	r8,r8,8
    96c0:	21000044 	addi	r4,r4,1
    96c4:	003d9706 	br	8d24 <___vfiprintf_internal_r+0x4f8>
    96c8:	d9001d04 	addi	r4,sp,116
    96cc:	00800084 	movi	r2,2
    96d0:	d9000015 	stw	r4,0(sp)
    96d4:	d8800115 	stw	r2,4(sp)
    96d8:	1809883a 	mov	r4,r3
    96dc:	d811883a 	mov	r8,sp
    96e0:	200b883a 	mov	r5,r4
    96e4:	42000204 	addi	r8,r8,8
    96e8:	21000044 	addi	r4,r4,1
    96ec:	003f4e06 	br	9428 <___vfiprintf_internal_r+0xbfc>
    96f0:	d8001d85 	stb	zero,118(sp)
    96f4:	48005016 	blt	r9,zero,9838 <___vfiprintf_internal_r+0x100c>
    96f8:	00ffdfc4 	movi	r3,-129
    96fc:	94c4b03a 	or	r2,r18,r19
    9700:	a0e8703a 	and	r20,r20,r3
    9704:	103d4426 	beq	r2,zero,8c18 <___vfiprintf_internal_r+0x3ec>
    9708:	0039883a 	mov	fp,zero
    970c:	d9002617 	ldw	r4,152(sp)
    9710:	dd401a04 	addi	r21,sp,104
    9714:	908003cc 	andi	r2,r18,15
    9718:	9806973a 	slli	r3,r19,28
    971c:	2085883a 	add	r2,r4,r2
    9720:	9024d13a 	srli	r18,r18,4
    9724:	10800003 	ldbu	r2,0(r2)
    9728:	9826d13a 	srli	r19,r19,4
    972c:	ad7fffc4 	addi	r21,r21,-1
    9730:	1ca4b03a 	or	r18,r3,r18
    9734:	a8800005 	stb	r2,0(r21)
    9738:	94c4b03a 	or	r2,r18,r19
    973c:	103ff51e 	bne	r2,zero,9714 <___vfiprintf_internal_r+0xee8>
    9740:	003e5906 	br	90a8 <___vfiprintf_internal_r+0x87c>
    9744:	d9402117 	ldw	r5,132(sp)
    9748:	d9002017 	ldw	r4,128(sp)
    974c:	d9801a04 	addi	r6,sp,104
    9750:	00087180 	call	8718 <__sprint_r.part.0>
    9754:	103f891e 	bne	r2,zero,957c <___vfiprintf_internal_r+0xd50>
    9758:	d8801c17 	ldw	r2,112(sp)
    975c:	d811883a 	mov	r8,sp
    9760:	003f9506 	br	95b8 <___vfiprintf_internal_r+0xd8c>
    9764:	d9402117 	ldw	r5,132(sp)
    9768:	d9002017 	ldw	r4,128(sp)
    976c:	d9801a04 	addi	r6,sp,104
    9770:	00087180 	call	8718 <__sprint_r.part.0>
    9774:	103f811e 	bne	r2,zero,957c <___vfiprintf_internal_r+0xd50>
    9778:	d811883a 	mov	r8,sp
    977c:	003ced06 	br	8b34 <___vfiprintf_internal_r+0x308>
    9780:	d9402117 	ldw	r5,132(sp)
    9784:	d9002017 	ldw	r4,128(sp)
    9788:	d9801a04 	addi	r6,sp,104
    978c:	da402c15 	stw	r9,176(sp)
    9790:	db802a15 	stw	r14,168(sp)
    9794:	00087180 	call	8718 <__sprint_r.part.0>
    9798:	da402c17 	ldw	r9,176(sp)
    979c:	db802a17 	ldw	r14,168(sp)
    97a0:	103f761e 	bne	r2,zero,957c <___vfiprintf_internal_r+0xd50>
    97a4:	d9401b17 	ldw	r5,108(sp)
    97a8:	d8801c17 	ldw	r2,112(sp)
    97ac:	d811883a 	mov	r8,sp
    97b0:	29000044 	addi	r4,r5,1
    97b4:	003d5b06 	br	8d24 <___vfiprintf_internal_r+0x4f8>
    97b8:	d9402117 	ldw	r5,132(sp)
    97bc:	d9002017 	ldw	r4,128(sp)
    97c0:	d9801a04 	addi	r6,sp,104
    97c4:	da402c15 	stw	r9,176(sp)
    97c8:	00087180 	call	8718 <__sprint_r.part.0>
    97cc:	da402c17 	ldw	r9,176(sp)
    97d0:	103f6a1e 	bne	r2,zero,957c <___vfiprintf_internal_r+0xd50>
    97d4:	d9401b17 	ldw	r5,108(sp)
    97d8:	d8801c17 	ldw	r2,112(sp)
    97dc:	d811883a 	mov	r8,sp
    97e0:	29000044 	addi	r4,r5,1
    97e4:	003f1006 	br	9428 <___vfiprintf_internal_r+0xbfc>
    97e8:	1000c31e 	bne	r2,zero,9af8 <___vfiprintf_internal_r+0x12cc>
    97ec:	01000044 	movi	r4,1
    97f0:	000b883a 	mov	r5,zero
    97f4:	d811883a 	mov	r8,sp
    97f8:	003f0d06 	br	9430 <___vfiprintf_internal_r+0xc04>
    97fc:	d9402117 	ldw	r5,132(sp)
    9800:	d9002017 	ldw	r4,128(sp)
    9804:	d9801a04 	addi	r6,sp,104
    9808:	00087180 	call	8718 <__sprint_r.part.0>
    980c:	103f5b1e 	bne	r2,zero,957c <___vfiprintf_internal_r+0xd50>
    9810:	d9001b17 	ldw	r4,108(sp)
    9814:	d8801c17 	ldw	r2,112(sp)
    9818:	d811883a 	mov	r8,sp
    981c:	21000044 	addi	r4,r4,1
    9820:	003d8006 	br	8e24 <___vfiprintf_internal_r+0x5f8>
    9824:	010000b4 	movhi	r4,2
    9828:	2128a404 	addi	r4,r4,-23920
    982c:	d9002615 	stw	r4,152(sp)
    9830:	d8c02215 	stw	r3,136(sp)
    9834:	1029883a 	mov	r20,r2
    9838:	94c4b03a 	or	r2,r18,r19
    983c:	103fb21e 	bne	r2,zero,9708 <___vfiprintf_internal_r+0xedc>
    9840:	0039883a 	mov	fp,zero
    9844:	00800084 	movi	r2,2
    9848:	003e6b06 	br	91f8 <___vfiprintf_internal_r+0x9cc>
    984c:	da802217 	ldw	r10,136(sp)
    9850:	d8001d85 	stb	zero,118(sp)
    9854:	0027883a 	mov	r19,zero
    9858:	50800104 	addi	r2,r10,4
    985c:	54800017 	ldw	r18,0(r10)
    9860:	483e6016 	blt	r9,zero,91e4 <___vfiprintf_internal_r+0x9b8>
    9864:	00ffdfc4 	movi	r3,-129
    9868:	d8802215 	stw	r2,136(sp)
    986c:	a0e8703a 	and	r20,r20,r3
    9870:	0039883a 	mov	fp,zero
    9874:	903ebb26 	beq	r18,zero,9364 <___vfiprintf_internal_r+0xb38>
    9878:	00800244 	movi	r2,9
    987c:	14bdee36 	bltu	r2,r18,9038 <___vfiprintf_internal_r+0x80c>
    9880:	003eba06 	br	936c <___vfiprintf_internal_r+0xb40>
    9884:	00800c04 	movi	r2,48
    9888:	d8c01d45 	stb	r3,117(sp)
    988c:	d8801d05 	stb	r2,116(sp)
    9890:	d8001d85 	stb	zero,118(sp)
    9894:	a0c00094 	ori	r3,r20,2
    9898:	4800a916 	blt	r9,zero,9b40 <___vfiprintf_internal_r+0x1314>
    989c:	00bfdfc4 	movi	r2,-129
    98a0:	a096703a 	and	r11,r20,r2
    98a4:	5d000094 	ori	r20,r11,2
    98a8:	0039883a 	mov	fp,zero
    98ac:	003f9706 	br	970c <___vfiprintf_internal_r+0xee0>
    98b0:	8025883a 	mov	r18,r16
    98b4:	003c2e06 	br	8970 <___vfiprintf_internal_r+0x144>
    98b8:	008000b4 	movhi	r2,2
    98bc:	10a8a404 	addi	r2,r2,-23920
    98c0:	0039883a 	mov	fp,zero
    98c4:	d8802615 	stw	r2,152(sp)
    98c8:	003f9006 	br	970c <___vfiprintf_internal_r+0xee0>
    98cc:	04a5c83a 	sub	r18,zero,r18
    98d0:	07000b44 	movi	fp,45
    98d4:	9004c03a 	cmpne	r2,r18,zero
    98d8:	04e7c83a 	sub	r19,zero,r19
    98dc:	df001d85 	stb	fp,118(sp)
    98e0:	98a7c83a 	sub	r19,r19,r2
    98e4:	48009f16 	blt	r9,zero,9b64 <___vfiprintf_internal_r+0x1338>
    98e8:	00bfdfc4 	movi	r2,-129
    98ec:	a0a8703a 	and	r20,r20,r2
    98f0:	003dd006 	br	9034 <___vfiprintf_internal_r+0x808>
    98f4:	70004c26 	beq	r14,zero,9a28 <___vfiprintf_internal_r+0x11fc>
    98f8:	00800084 	movi	r2,2
    98fc:	d8c01d04 	addi	r3,sp,116
    9900:	d8c00015 	stw	r3,0(sp)
    9904:	d8800115 	stw	r2,4(sp)
    9908:	01000044 	movi	r4,1
    990c:	d811883a 	mov	r8,sp
    9910:	003f7306 	br	96e0 <___vfiprintf_internal_r+0xeb4>
    9914:	a080100c 	andi	r2,r20,64
    9918:	da802217 	ldw	r10,136(sp)
    991c:	103e0626 	beq	r2,zero,9138 <___vfiprintf_internal_r+0x90c>
    9920:	5480000f 	ldh	r18,0(r10)
    9924:	52800104 	addi	r10,r10,4
    9928:	da802215 	stw	r10,136(sp)
    992c:	9027d7fa 	srai	r19,r18,31
    9930:	9805883a 	mov	r2,r19
    9934:	003db806 	br	9018 <___vfiprintf_internal_r+0x7ec>
    9938:	a080040c 	andi	r2,r20,16
    993c:	1000091e 	bne	r2,zero,9964 <___vfiprintf_internal_r+0x1138>
    9940:	a2c0100c 	andi	r11,r20,64
    9944:	58000726 	beq	r11,zero,9964 <___vfiprintf_internal_r+0x1138>
    9948:	da802217 	ldw	r10,136(sp)
    994c:	50800017 	ldw	r2,0(r10)
    9950:	52800104 	addi	r10,r10,4
    9954:	da802215 	stw	r10,136(sp)
    9958:	da802317 	ldw	r10,140(sp)
    995c:	1280000d 	sth	r10,0(r2)
    9960:	003be706 	br	8900 <___vfiprintf_internal_r+0xd4>
    9964:	da802217 	ldw	r10,136(sp)
    9968:	50800017 	ldw	r2,0(r10)
    996c:	52800104 	addi	r10,r10,4
    9970:	da802215 	stw	r10,136(sp)
    9974:	da802317 	ldw	r10,140(sp)
    9978:	12800015 	stw	r10,0(r2)
    997c:	003be006 	br	8900 <___vfiprintf_internal_r+0xd4>
    9980:	a080100c 	andi	r2,r20,64
    9984:	da802217 	ldw	r10,136(sp)
    9988:	10003026 	beq	r2,zero,9a4c <___vfiprintf_internal_r+0x1220>
    998c:	5480000b 	ldhu	r18,0(r10)
    9990:	52800104 	addi	r10,r10,4
    9994:	0027883a 	mov	r19,zero
    9998:	da802215 	stw	r10,136(sp)
    999c:	003d8006 	br	8fa0 <___vfiprintf_internal_r+0x774>
    99a0:	80c00007 	ldb	r3,0(r16)
    99a4:	003c0006 	br	89a8 <___vfiprintf_internal_r+0x17c>
    99a8:	a080100c 	andi	r2,r20,64
    99ac:	d8001d85 	stb	zero,118(sp)
    99b0:	da802217 	ldw	r10,136(sp)
    99b4:	1000201e 	bne	r2,zero,9a38 <___vfiprintf_internal_r+0x120c>
    99b8:	50800104 	addi	r2,r10,4
    99bc:	54800017 	ldw	r18,0(r10)
    99c0:	0027883a 	mov	r19,zero
    99c4:	483def0e 	bge	r9,zero,9184 <___vfiprintf_internal_r+0x958>
    99c8:	94c6b03a 	or	r3,r18,r19
    99cc:	d8802215 	stw	r2,136(sp)
    99d0:	183d4e1e 	bne	r3,zero,8f0c <___vfiprintf_internal_r+0x6e0>
    99d4:	0039883a 	mov	fp,zero
    99d8:	0005883a 	mov	r2,zero
    99dc:	003e0606 	br	91f8 <___vfiprintf_internal_r+0x9cc>
    99e0:	d9402117 	ldw	r5,132(sp)
    99e4:	d9002017 	ldw	r4,128(sp)
    99e8:	d9801a04 	addi	r6,sp,104
    99ec:	da402c15 	stw	r9,176(sp)
    99f0:	db802a15 	stw	r14,168(sp)
    99f4:	00087180 	call	8718 <__sprint_r.part.0>
    99f8:	da402c17 	ldw	r9,176(sp)
    99fc:	db802a17 	ldw	r14,168(sp)
    9a00:	103ede1e 	bne	r2,zero,957c <___vfiprintf_internal_r+0xd50>
    9a04:	d9401b17 	ldw	r5,108(sp)
    9a08:	d8801c17 	ldw	r2,112(sp)
    9a0c:	d811883a 	mov	r8,sp
    9a10:	29000044 	addi	r4,r5,1
    9a14:	003e7406 	br	93e8 <___vfiprintf_internal_r+0xbbc>
    9a18:	00bfffc4 	movi	r2,-1
    9a1c:	003c5806 	br	8b80 <___vfiprintf_internal_r+0x354>
    9a20:	d811883a 	mov	r8,sp
    9a24:	003ee806 	br	95c8 <___vfiprintf_internal_r+0xd9c>
    9a28:	000b883a 	mov	r5,zero
    9a2c:	01000044 	movi	r4,1
    9a30:	d811883a 	mov	r8,sp
    9a34:	003e7c06 	br	9428 <___vfiprintf_internal_r+0xbfc>
    9a38:	50800104 	addi	r2,r10,4
    9a3c:	5480000b 	ldhu	r18,0(r10)
    9a40:	0027883a 	mov	r19,zero
    9a44:	483dcf0e 	bge	r9,zero,9184 <___vfiprintf_internal_r+0x958>
    9a48:	003fdf06 	br	99c8 <___vfiprintf_internal_r+0x119c>
    9a4c:	54800017 	ldw	r18,0(r10)
    9a50:	52800104 	addi	r10,r10,4
    9a54:	0027883a 	mov	r19,zero
    9a58:	da802215 	stw	r10,136(sp)
    9a5c:	003d5006 	br	8fa0 <___vfiprintf_internal_r+0x774>
    9a60:	50800104 	addi	r2,r10,4
    9a64:	5480000b 	ldhu	r18,0(r10)
    9a68:	0027883a 	mov	r19,zero
    9a6c:	483f7d0e 	bge	r9,zero,9864 <___vfiprintf_internal_r+0x1038>
    9a70:	003ddc06 	br	91e4 <___vfiprintf_internal_r+0x9b8>
    9a74:	d8c02215 	stw	r3,136(sp)
    9a78:	0039883a 	mov	fp,zero
    9a7c:	003ddb06 	br	91ec <___vfiprintf_internal_r+0x9c0>
    9a80:	028000b4 	movhi	r10,2
    9a84:	52a90404 	addi	r10,r10,-23536
    9a88:	da802415 	stw	r10,144(sp)
    9a8c:	003e8306 	br	949c <___vfiprintf_internal_r+0xc70>
    9a90:	d8801c17 	ldw	r2,112(sp)
    9a94:	dd002117 	ldw	r20,132(sp)
    9a98:	103eb926 	beq	r2,zero,9580 <___vfiprintf_internal_r+0xd54>
    9a9c:	d9002017 	ldw	r4,128(sp)
    9aa0:	d9801a04 	addi	r6,sp,104
    9aa4:	a00b883a 	mov	r5,r20
    9aa8:	00087180 	call	8718 <__sprint_r.part.0>
    9aac:	003eb406 	br	9580 <___vfiprintf_internal_r+0xd54>
    9ab0:	80c00043 	ldbu	r3,1(r16)
    9ab4:	a5000814 	ori	r20,r20,32
    9ab8:	84000044 	addi	r16,r16,1
    9abc:	18c03fcc 	andi	r3,r3,255
    9ac0:	18c0201c 	xori	r3,r3,128
    9ac4:	18ffe004 	addi	r3,r3,-128
    9ac8:	003bb706 	br	89a8 <___vfiprintf_internal_r+0x17c>
    9acc:	a809883a 	mov	r4,r21
    9ad0:	d8c02a15 	stw	r3,168(sp)
    9ad4:	da002b15 	stw	r8,172(sp)
    9ad8:	00011800 	call	1180 <strlen>
    9adc:	d8c02a17 	ldw	r3,168(sp)
    9ae0:	1027883a 	mov	r19,r2
    9ae4:	df001d83 	ldbu	fp,118(sp)
    9ae8:	d8c02215 	stw	r3,136(sp)
    9aec:	0013883a 	mov	r9,zero
    9af0:	da002b17 	ldw	r8,172(sp)
    9af4:	003c4d06 	br	8c2c <___vfiprintf_internal_r+0x400>
    9af8:	d9402117 	ldw	r5,132(sp)
    9afc:	d9002017 	ldw	r4,128(sp)
    9b00:	d9801a04 	addi	r6,sp,104
    9b04:	da402c15 	stw	r9,176(sp)
    9b08:	00087180 	call	8718 <__sprint_r.part.0>
    9b0c:	da402c17 	ldw	r9,176(sp)
    9b10:	103e9a1e 	bne	r2,zero,957c <___vfiprintf_internal_r+0xd50>
    9b14:	d9401b17 	ldw	r5,108(sp)
    9b18:	d8801c17 	ldw	r2,112(sp)
    9b1c:	d811883a 	mov	r8,sp
    9b20:	29000044 	addi	r4,r5,1
    9b24:	003e4206 	br	9430 <___vfiprintf_internal_r+0xc04>
    9b28:	d9401b17 	ldw	r5,108(sp)
    9b2c:	010000b4 	movhi	r4,2
    9b30:	21290804 	addi	r4,r4,-23520
    9b34:	d9002415 	stw	r4,144(sp)
    9b38:	29400044 	addi	r5,r5,1
    9b3c:	003c6d06 	br	8cf4 <___vfiprintf_internal_r+0x4c8>
    9b40:	0039883a 	mov	fp,zero
    9b44:	00800084 	movi	r2,2
    9b48:	10803fcc 	andi	r2,r2,255
    9b4c:	01000044 	movi	r4,1
    9b50:	11001e26 	beq	r2,r4,9bcc <___vfiprintf_internal_r+0x13a0>
    9b54:	01000084 	movi	r4,2
    9b58:	11001e1e 	bne	r2,r4,9bd4 <___vfiprintf_internal_r+0x13a8>
    9b5c:	1829883a 	mov	r20,r3
    9b60:	003eea06 	br	970c <___vfiprintf_internal_r+0xee0>
    9b64:	a007883a 	mov	r3,r20
    9b68:	00800044 	movi	r2,1
    9b6c:	003ff606 	br	9b48 <___vfiprintf_internal_r+0x131c>
    9b70:	00800184 	movi	r2,6
    9b74:	1240012e 	bgeu	r2,r9,9b7c <___vfiprintf_internal_r+0x1350>
    9b78:	1013883a 	mov	r9,r2
    9b7c:	4827883a 	mov	r19,r9
    9b80:	4825883a 	mov	r18,r9
    9b84:	48001516 	blt	r9,zero,9bdc <___vfiprintf_internal_r+0x13b0>
    9b88:	054000b4 	movhi	r21,2
    9b8c:	d8c02215 	stw	r3,136(sp)
    9b90:	ad68a904 	addi	r21,r21,-23900
    9b94:	003d1406 	br	8fe8 <___vfiprintf_internal_r+0x7bc>
    9b98:	028000b4 	movhi	r10,2
    9b9c:	52a90404 	addi	r10,r10,-23536
    9ba0:	da802415 	stw	r10,144(sp)
    9ba4:	200d883a 	mov	r6,r4
    9ba8:	003c9106 	br	8df0 <___vfiprintf_internal_r+0x5c4>
    9bac:	5021883a 	mov	r16,r10
    9bb0:	0013883a 	mov	r9,zero
    9bb4:	003b7d06 	br	89ac <___vfiprintf_internal_r+0x180>
    9bb8:	4827883a 	mov	r19,r9
    9bbc:	df001d83 	ldbu	fp,118(sp)
    9bc0:	d8c02215 	stw	r3,136(sp)
    9bc4:	0013883a 	mov	r9,zero
    9bc8:	003c1806 	br	8c2c <___vfiprintf_internal_r+0x400>
    9bcc:	1829883a 	mov	r20,r3
    9bd0:	003d1806 	br	9034 <___vfiprintf_internal_r+0x808>
    9bd4:	1829883a 	mov	r20,r3
    9bd8:	003ccd06 	br	8f10 <___vfiprintf_internal_r+0x6e4>
    9bdc:	0025883a 	mov	r18,zero
    9be0:	003fe906 	br	9b88 <___vfiprintf_internal_r+0x135c>
    9be4:	d8802217 	ldw	r2,136(sp)
    9be8:	80c00043 	ldbu	r3,1(r16)
    9bec:	5021883a 	mov	r16,r10
    9bf0:	12400017 	ldw	r9,0(r2)
    9bf4:	10800104 	addi	r2,r2,4
    9bf8:	d8802215 	stw	r2,136(sp)
    9bfc:	483faf0e 	bge	r9,zero,9abc <___vfiprintf_internal_r+0x1290>
    9c00:	18c03fcc 	andi	r3,r3,255
    9c04:	18c0201c 	xori	r3,r3,128
    9c08:	027fffc4 	movi	r9,-1
    9c0c:	18ffe004 	addi	r3,r3,-128
    9c10:	003b6506 	br	89a8 <___vfiprintf_internal_r+0x17c>
    9c14:	d9c01d85 	stb	r7,118(sp)
    9c18:	003ca006 	br	8e9c <___vfiprintf_internal_r+0x670>
    9c1c:	d9c01d85 	stb	r7,118(sp)
    9c20:	003cad06 	br	8ed8 <___vfiprintf_internal_r+0x6ac>
    9c24:	d9c01d85 	stb	r7,118(sp)
    9c28:	003d7d06 	br	9220 <___vfiprintf_internal_r+0x9f4>
    9c2c:	d9c01d85 	stb	r7,118(sp)
    9c30:	003d5f06 	br	91b0 <___vfiprintf_internal_r+0x984>
    9c34:	a080004c 	andi	r2,r20,1
    9c38:	0039883a 	mov	fp,zero
    9c3c:	10000526 	beq	r2,zero,9c54 <___vfiprintf_internal_r+0x1428>
    9c40:	00800c04 	movi	r2,48
    9c44:	d88019c5 	stb	r2,103(sp)
    9c48:	dcc02717 	ldw	r19,156(sp)
    9c4c:	dd4019c4 	addi	r21,sp,103
    9c50:	003bf606 	br	8c2c <___vfiprintf_internal_r+0x400>
    9c54:	0027883a 	mov	r19,zero
    9c58:	dd401a04 	addi	r21,sp,104
    9c5c:	003bf306 	br	8c2c <___vfiprintf_internal_r+0x400>
    9c60:	d9c01d85 	stb	r7,118(sp)
    9c64:	003dc806 	br	9388 <___vfiprintf_internal_r+0xb5c>
    9c68:	d9c01d85 	stb	r7,118(sp)
    9c6c:	003d3a06 	br	9158 <___vfiprintf_internal_r+0x92c>
    9c70:	d9c01d85 	stb	r7,118(sp)
    9c74:	003d2a06 	br	9120 <___vfiprintf_internal_r+0x8f4>
    9c78:	d9c01d85 	stb	r7,118(sp)
    9c7c:	003cde06 	br	8ff8 <___vfiprintf_internal_r+0x7cc>
    9c80:	d9c01d85 	stb	r7,118(sp)
    9c84:	003cbc06 	br	8f78 <___vfiprintf_internal_r+0x74c>

00009c88 <__vfiprintf_internal>:
    9c88:	008000b4 	movhi	r2,2
    9c8c:	10b17c04 	addi	r2,r2,-14864
    9c90:	300f883a 	mov	r7,r6
    9c94:	280d883a 	mov	r6,r5
    9c98:	200b883a 	mov	r5,r4
    9c9c:	11000017 	ldw	r4,0(r2)
    9ca0:	000882c1 	jmpi	882c <___vfiprintf_internal_r>

00009ca4 <__sbprintf>:
    9ca4:	2880030b 	ldhu	r2,12(r5)
    9ca8:	2ac01917 	ldw	r11,100(r5)
    9cac:	2a80038b 	ldhu	r10,14(r5)
    9cb0:	2a400717 	ldw	r9,28(r5)
    9cb4:	2a000917 	ldw	r8,36(r5)
    9cb8:	defee204 	addi	sp,sp,-1144
    9cbc:	00c10004 	movi	r3,1024
    9cc0:	dc011a15 	stw	r16,1128(sp)
    9cc4:	10bfff4c 	andi	r2,r2,65533
    9cc8:	2821883a 	mov	r16,r5
    9ccc:	d8cb883a 	add	r5,sp,r3
    9cd0:	dc811c15 	stw	r18,1136(sp)
    9cd4:	dc411b15 	stw	r17,1132(sp)
    9cd8:	dfc11d15 	stw	ra,1140(sp)
    9cdc:	2025883a 	mov	r18,r4
    9ce0:	d881030d 	sth	r2,1036(sp)
    9ce4:	dac11915 	stw	r11,1124(sp)
    9ce8:	da81038d 	sth	r10,1038(sp)
    9cec:	da410715 	stw	r9,1052(sp)
    9cf0:	da010915 	stw	r8,1060(sp)
    9cf4:	dec10015 	stw	sp,1024(sp)
    9cf8:	dec10415 	stw	sp,1040(sp)
    9cfc:	d8c10215 	stw	r3,1032(sp)
    9d00:	d8c10515 	stw	r3,1044(sp)
    9d04:	d8010615 	stw	zero,1048(sp)
    9d08:	000882c0 	call	882c <___vfiprintf_internal_r>
    9d0c:	1023883a 	mov	r17,r2
    9d10:	10000416 	blt	r2,zero,9d24 <__sbprintf+0x80>
    9d14:	d9410004 	addi	r5,sp,1024
    9d18:	9009883a 	mov	r4,r18
    9d1c:	00050e00 	call	50e0 <_fflush_r>
    9d20:	10000d1e 	bne	r2,zero,9d58 <__sbprintf+0xb4>
    9d24:	d881030b 	ldhu	r2,1036(sp)
    9d28:	1080100c 	andi	r2,r2,64
    9d2c:	10000326 	beq	r2,zero,9d3c <__sbprintf+0x98>
    9d30:	8080030b 	ldhu	r2,12(r16)
    9d34:	10801014 	ori	r2,r2,64
    9d38:	8080030d 	sth	r2,12(r16)
    9d3c:	8805883a 	mov	r2,r17
    9d40:	dfc11d17 	ldw	ra,1140(sp)
    9d44:	dc811c17 	ldw	r18,1136(sp)
    9d48:	dc411b17 	ldw	r17,1132(sp)
    9d4c:	dc011a17 	ldw	r16,1128(sp)
    9d50:	dec11e04 	addi	sp,sp,1144
    9d54:	f800283a 	ret
    9d58:	047fffc4 	movi	r17,-1
    9d5c:	003ff106 	br	9d24 <__sbprintf+0x80>

00009d60 <_write_r>:
    9d60:	defffd04 	addi	sp,sp,-12
    9d64:	2805883a 	mov	r2,r5
    9d68:	dc000015 	stw	r16,0(sp)
    9d6c:	040000b4 	movhi	r16,2
    9d70:	dc400115 	stw	r17,4(sp)
    9d74:	300b883a 	mov	r5,r6
    9d78:	84397704 	addi	r16,r16,-6692
    9d7c:	2023883a 	mov	r17,r4
    9d80:	380d883a 	mov	r6,r7
    9d84:	1009883a 	mov	r4,r2
    9d88:	dfc00215 	stw	ra,8(sp)
    9d8c:	80000015 	stw	zero,0(r16)
    9d90:	000e1a40 	call	e1a4 <write>
    9d94:	00ffffc4 	movi	r3,-1
    9d98:	10c00526 	beq	r2,r3,9db0 <_write_r+0x50>
    9d9c:	dfc00217 	ldw	ra,8(sp)
    9da0:	dc400117 	ldw	r17,4(sp)
    9da4:	dc000017 	ldw	r16,0(sp)
    9da8:	dec00304 	addi	sp,sp,12
    9dac:	f800283a 	ret
    9db0:	80c00017 	ldw	r3,0(r16)
    9db4:	183ff926 	beq	r3,zero,9d9c <_write_r+0x3c>
    9db8:	88c00015 	stw	r3,0(r17)
    9dbc:	003ff706 	br	9d9c <_write_r+0x3c>

00009dc0 <_close_r>:
    9dc0:	defffd04 	addi	sp,sp,-12
    9dc4:	dc000015 	stw	r16,0(sp)
    9dc8:	040000b4 	movhi	r16,2
    9dcc:	dc400115 	stw	r17,4(sp)
    9dd0:	84397704 	addi	r16,r16,-6692
    9dd4:	2023883a 	mov	r17,r4
    9dd8:	2809883a 	mov	r4,r5
    9ddc:	dfc00215 	stw	ra,8(sp)
    9de0:	80000015 	stw	zero,0(r16)
    9de4:	000d99c0 	call	d99c <close>
    9de8:	00ffffc4 	movi	r3,-1
    9dec:	10c00526 	beq	r2,r3,9e04 <_close_r+0x44>
    9df0:	dfc00217 	ldw	ra,8(sp)
    9df4:	dc400117 	ldw	r17,4(sp)
    9df8:	dc000017 	ldw	r16,0(sp)
    9dfc:	dec00304 	addi	sp,sp,12
    9e00:	f800283a 	ret
    9e04:	80c00017 	ldw	r3,0(r16)
    9e08:	183ff926 	beq	r3,zero,9df0 <_close_r+0x30>
    9e0c:	88c00015 	stw	r3,0(r17)
    9e10:	003ff706 	br	9df0 <_close_r+0x30>

00009e14 <_calloc_r>:
    9e14:	298b383a 	mul	r5,r5,r6
    9e18:	defffe04 	addi	sp,sp,-8
    9e1c:	dfc00115 	stw	ra,4(sp)
    9e20:	dc000015 	stw	r16,0(sp)
    9e24:	000621c0 	call	621c <_malloc_r>
    9e28:	10002926 	beq	r2,zero,9ed0 <_calloc_r+0xbc>
    9e2c:	11bfff17 	ldw	r6,-4(r2)
    9e30:	1021883a 	mov	r16,r2
    9e34:	00bfff04 	movi	r2,-4
    9e38:	308c703a 	and	r6,r6,r2
    9e3c:	00c00904 	movi	r3,36
    9e40:	308d883a 	add	r6,r6,r2
    9e44:	19801636 	bltu	r3,r6,9ea0 <_calloc_r+0x8c>
    9e48:	008004c4 	movi	r2,19
    9e4c:	11800b2e 	bgeu	r2,r6,9e7c <_calloc_r+0x68>
    9e50:	80000015 	stw	zero,0(r16)
    9e54:	80000115 	stw	zero,4(r16)
    9e58:	008006c4 	movi	r2,27
    9e5c:	11801a2e 	bgeu	r2,r6,9ec8 <_calloc_r+0xb4>
    9e60:	80000215 	stw	zero,8(r16)
    9e64:	80000315 	stw	zero,12(r16)
    9e68:	30c0151e 	bne	r6,r3,9ec0 <_calloc_r+0xac>
    9e6c:	80000415 	stw	zero,16(r16)
    9e70:	80800604 	addi	r2,r16,24
    9e74:	80000515 	stw	zero,20(r16)
    9e78:	00000106 	br	9e80 <_calloc_r+0x6c>
    9e7c:	8005883a 	mov	r2,r16
    9e80:	10000015 	stw	zero,0(r2)
    9e84:	10000115 	stw	zero,4(r2)
    9e88:	10000215 	stw	zero,8(r2)
    9e8c:	8005883a 	mov	r2,r16
    9e90:	dfc00117 	ldw	ra,4(sp)
    9e94:	dc000017 	ldw	r16,0(sp)
    9e98:	dec00204 	addi	sp,sp,8
    9e9c:	f800283a 	ret
    9ea0:	000b883a 	mov	r5,zero
    9ea4:	8009883a 	mov	r4,r16
    9ea8:	0006db00 	call	6db0 <memset>
    9eac:	8005883a 	mov	r2,r16
    9eb0:	dfc00117 	ldw	ra,4(sp)
    9eb4:	dc000017 	ldw	r16,0(sp)
    9eb8:	dec00204 	addi	sp,sp,8
    9ebc:	f800283a 	ret
    9ec0:	80800404 	addi	r2,r16,16
    9ec4:	003fee06 	br	9e80 <_calloc_r+0x6c>
    9ec8:	80800204 	addi	r2,r16,8
    9ecc:	003fec06 	br	9e80 <_calloc_r+0x6c>
    9ed0:	0005883a 	mov	r2,zero
    9ed4:	003fee06 	br	9e90 <_calloc_r+0x7c>

00009ed8 <_fclose_r>:
    9ed8:	28003926 	beq	r5,zero,9fc0 <_fclose_r+0xe8>
    9edc:	defffc04 	addi	sp,sp,-16
    9ee0:	dc400115 	stw	r17,4(sp)
    9ee4:	dc000015 	stw	r16,0(sp)
    9ee8:	dfc00315 	stw	ra,12(sp)
    9eec:	dc800215 	stw	r18,8(sp)
    9ef0:	2023883a 	mov	r17,r4
    9ef4:	2821883a 	mov	r16,r5
    9ef8:	20000226 	beq	r4,zero,9f04 <_fclose_r+0x2c>
    9efc:	20800e17 	ldw	r2,56(r4)
    9f00:	10002726 	beq	r2,zero,9fa0 <_fclose_r+0xc8>
    9f04:	8080030f 	ldh	r2,12(r16)
    9f08:	1000071e 	bne	r2,zero,9f28 <_fclose_r+0x50>
    9f0c:	0005883a 	mov	r2,zero
    9f10:	dfc00317 	ldw	ra,12(sp)
    9f14:	dc800217 	ldw	r18,8(sp)
    9f18:	dc400117 	ldw	r17,4(sp)
    9f1c:	dc000017 	ldw	r16,0(sp)
    9f20:	dec00404 	addi	sp,sp,16
    9f24:	f800283a 	ret
    9f28:	800b883a 	mov	r5,r16
    9f2c:	8809883a 	mov	r4,r17
    9f30:	0004ec40 	call	4ec4 <__sflush_r>
    9f34:	1025883a 	mov	r18,r2
    9f38:	80800b17 	ldw	r2,44(r16)
    9f3c:	10000426 	beq	r2,zero,9f50 <_fclose_r+0x78>
    9f40:	81400717 	ldw	r5,28(r16)
    9f44:	8809883a 	mov	r4,r17
    9f48:	103ee83a 	callr	r2
    9f4c:	10001616 	blt	r2,zero,9fa8 <_fclose_r+0xd0>
    9f50:	8080030b 	ldhu	r2,12(r16)
    9f54:	1080200c 	andi	r2,r2,128
    9f58:	1000151e 	bne	r2,zero,9fb0 <_fclose_r+0xd8>
    9f5c:	81400c17 	ldw	r5,48(r16)
    9f60:	28000526 	beq	r5,zero,9f78 <_fclose_r+0xa0>
    9f64:	80801004 	addi	r2,r16,64
    9f68:	28800226 	beq	r5,r2,9f74 <_fclose_r+0x9c>
    9f6c:	8809883a 	mov	r4,r17
    9f70:	00056300 	call	5630 <_free_r>
    9f74:	80000c15 	stw	zero,48(r16)
    9f78:	81401117 	ldw	r5,68(r16)
    9f7c:	28000326 	beq	r5,zero,9f8c <_fclose_r+0xb4>
    9f80:	8809883a 	mov	r4,r17
    9f84:	00056300 	call	5630 <_free_r>
    9f88:	80001115 	stw	zero,68(r16)
    9f8c:	00054cc0 	call	54cc <__sfp_lock_acquire>
    9f90:	8000030d 	sth	zero,12(r16)
    9f94:	00054d00 	call	54d0 <__sfp_lock_release>
    9f98:	9005883a 	mov	r2,r18
    9f9c:	003fdc06 	br	9f10 <_fclose_r+0x38>
    9fa0:	00054bc0 	call	54bc <__sinit>
    9fa4:	003fd706 	br	9f04 <_fclose_r+0x2c>
    9fa8:	04bfffc4 	movi	r18,-1
    9fac:	003fe806 	br	9f50 <_fclose_r+0x78>
    9fb0:	81400417 	ldw	r5,16(r16)
    9fb4:	8809883a 	mov	r4,r17
    9fb8:	00056300 	call	5630 <_free_r>
    9fbc:	003fe706 	br	9f5c <_fclose_r+0x84>
    9fc0:	0005883a 	mov	r2,zero
    9fc4:	f800283a 	ret

00009fc8 <fclose>:
    9fc8:	008000b4 	movhi	r2,2
    9fcc:	10b17c04 	addi	r2,r2,-14864
    9fd0:	200b883a 	mov	r5,r4
    9fd4:	11000017 	ldw	r4,0(r2)
    9fd8:	0009ed81 	jmpi	9ed8 <_fclose_r>

00009fdc <__fputwc>:
    9fdc:	defff804 	addi	sp,sp,-32
    9fe0:	dcc00415 	stw	r19,16(sp)
    9fe4:	dc800315 	stw	r18,12(sp)
    9fe8:	dc000115 	stw	r16,4(sp)
    9fec:	dfc00715 	stw	ra,28(sp)
    9ff0:	dd400615 	stw	r21,24(sp)
    9ff4:	dd000515 	stw	r20,20(sp)
    9ff8:	dc400215 	stw	r17,8(sp)
    9ffc:	2027883a 	mov	r19,r4
    a000:	2825883a 	mov	r18,r5
    a004:	3021883a 	mov	r16,r6
    a008:	000600c0 	call	600c <__locale_mb_cur_max>
    a00c:	00c00044 	movi	r3,1
    a010:	10c03e26 	beq	r2,r3,a10c <__fputwc+0x130>
    a014:	81c01704 	addi	r7,r16,92
    a018:	900d883a 	mov	r6,r18
    a01c:	d80b883a 	mov	r5,sp
    a020:	9809883a 	mov	r4,r19
    a024:	000a4ac0 	call	a4ac <_wcrtomb_r>
    a028:	1029883a 	mov	r20,r2
    a02c:	00bfffc4 	movi	r2,-1
    a030:	a0802026 	beq	r20,r2,a0b4 <__fputwc+0xd8>
    a034:	d9400003 	ldbu	r5,0(sp)
    a038:	a0001c26 	beq	r20,zero,a0ac <__fputwc+0xd0>
    a03c:	0023883a 	mov	r17,zero
    a040:	05400284 	movi	r21,10
    a044:	00000906 	br	a06c <__fputwc+0x90>
    a048:	80800017 	ldw	r2,0(r16)
    a04c:	11400005 	stb	r5,0(r2)
    a050:	80c00017 	ldw	r3,0(r16)
    a054:	18c00044 	addi	r3,r3,1
    a058:	80c00015 	stw	r3,0(r16)
    a05c:	8c400044 	addi	r17,r17,1
    a060:	dc45883a 	add	r2,sp,r17
    a064:	8d00112e 	bgeu	r17,r20,a0ac <__fputwc+0xd0>
    a068:	11400003 	ldbu	r5,0(r2)
    a06c:	80c00217 	ldw	r3,8(r16)
    a070:	18ffffc4 	addi	r3,r3,-1
    a074:	80c00215 	stw	r3,8(r16)
    a078:	183ff30e 	bge	r3,zero,a048 <__fputwc+0x6c>
    a07c:	80800617 	ldw	r2,24(r16)
    a080:	18801916 	blt	r3,r2,a0e8 <__fputwc+0x10c>
    a084:	80800017 	ldw	r2,0(r16)
    a088:	11400005 	stb	r5,0(r2)
    a08c:	80800017 	ldw	r2,0(r16)
    a090:	10c00003 	ldbu	r3,0(r2)
    a094:	10800044 	addi	r2,r2,1
    a098:	1d402326 	beq	r3,r21,a128 <__fputwc+0x14c>
    a09c:	80800015 	stw	r2,0(r16)
    a0a0:	8c400044 	addi	r17,r17,1
    a0a4:	dc45883a 	add	r2,sp,r17
    a0a8:	8d3fef36 	bltu	r17,r20,a068 <__fputwc+0x8c>
    a0ac:	9005883a 	mov	r2,r18
    a0b0:	00000406 	br	a0c4 <__fputwc+0xe8>
    a0b4:	80c0030b 	ldhu	r3,12(r16)
    a0b8:	a005883a 	mov	r2,r20
    a0bc:	18c01014 	ori	r3,r3,64
    a0c0:	80c0030d 	sth	r3,12(r16)
    a0c4:	dfc00717 	ldw	ra,28(sp)
    a0c8:	dd400617 	ldw	r21,24(sp)
    a0cc:	dd000517 	ldw	r20,20(sp)
    a0d0:	dcc00417 	ldw	r19,16(sp)
    a0d4:	dc800317 	ldw	r18,12(sp)
    a0d8:	dc400217 	ldw	r17,8(sp)
    a0dc:	dc000117 	ldw	r16,4(sp)
    a0e0:	dec00804 	addi	sp,sp,32
    a0e4:	f800283a 	ret
    a0e8:	800d883a 	mov	r6,r16
    a0ec:	29403fcc 	andi	r5,r5,255
    a0f0:	9809883a 	mov	r4,r19
    a0f4:	000a3540 	call	a354 <__swbuf_r>
    a0f8:	10bfffe0 	cmpeqi	r2,r2,-1
    a0fc:	10803fcc 	andi	r2,r2,255
    a100:	103fd626 	beq	r2,zero,a05c <__fputwc+0x80>
    a104:	00bfffc4 	movi	r2,-1
    a108:	003fee06 	br	a0c4 <__fputwc+0xe8>
    a10c:	90ffffc4 	addi	r3,r18,-1
    a110:	01003f84 	movi	r4,254
    a114:	20ffbf36 	bltu	r4,r3,a014 <__fputwc+0x38>
    a118:	900b883a 	mov	r5,r18
    a11c:	dc800005 	stb	r18,0(sp)
    a120:	1029883a 	mov	r20,r2
    a124:	003fc506 	br	a03c <__fputwc+0x60>
    a128:	800d883a 	mov	r6,r16
    a12c:	a80b883a 	mov	r5,r21
    a130:	9809883a 	mov	r4,r19
    a134:	000a3540 	call	a354 <__swbuf_r>
    a138:	10bfffe0 	cmpeqi	r2,r2,-1
    a13c:	003fef06 	br	a0fc <__fputwc+0x120>

0000a140 <_fputwc_r>:
    a140:	3080030b 	ldhu	r2,12(r6)
    a144:	10c8000c 	andi	r3,r2,8192
    a148:	1800051e 	bne	r3,zero,a160 <_fputwc_r+0x20>
    a14c:	30c01917 	ldw	r3,100(r6)
    a150:	10880014 	ori	r2,r2,8192
    a154:	3080030d 	sth	r2,12(r6)
    a158:	18880014 	ori	r2,r3,8192
    a15c:	30801915 	stw	r2,100(r6)
    a160:	0009fdc1 	jmpi	9fdc <__fputwc>

0000a164 <fputwc>:
    a164:	008000b4 	movhi	r2,2
    a168:	defffc04 	addi	sp,sp,-16
    a16c:	10b17c04 	addi	r2,r2,-14864
    a170:	dc000115 	stw	r16,4(sp)
    a174:	14000017 	ldw	r16,0(r2)
    a178:	dc400215 	stw	r17,8(sp)
    a17c:	dfc00315 	stw	ra,12(sp)
    a180:	2023883a 	mov	r17,r4
    a184:	80000226 	beq	r16,zero,a190 <fputwc+0x2c>
    a188:	80800e17 	ldw	r2,56(r16)
    a18c:	10001026 	beq	r2,zero,a1d0 <fputwc+0x6c>
    a190:	2880030b 	ldhu	r2,12(r5)
    a194:	10c8000c 	andi	r3,r2,8192
    a198:	1800051e 	bne	r3,zero,a1b0 <fputwc+0x4c>
    a19c:	28c01917 	ldw	r3,100(r5)
    a1a0:	10880014 	ori	r2,r2,8192
    a1a4:	2880030d 	sth	r2,12(r5)
    a1a8:	18880014 	ori	r2,r3,8192
    a1ac:	28801915 	stw	r2,100(r5)
    a1b0:	280d883a 	mov	r6,r5
    a1b4:	8009883a 	mov	r4,r16
    a1b8:	880b883a 	mov	r5,r17
    a1bc:	dfc00317 	ldw	ra,12(sp)
    a1c0:	dc400217 	ldw	r17,8(sp)
    a1c4:	dc000117 	ldw	r16,4(sp)
    a1c8:	dec00404 	addi	sp,sp,16
    a1cc:	0009fdc1 	jmpi	9fdc <__fputwc>
    a1d0:	8009883a 	mov	r4,r16
    a1d4:	d9400015 	stw	r5,0(sp)
    a1d8:	00054bc0 	call	54bc <__sinit>
    a1dc:	d9400017 	ldw	r5,0(sp)
    a1e0:	003feb06 	br	a190 <fputwc+0x2c>

0000a1e4 <_fstat_r>:
    a1e4:	defffd04 	addi	sp,sp,-12
    a1e8:	2805883a 	mov	r2,r5
    a1ec:	dc000015 	stw	r16,0(sp)
    a1f0:	040000b4 	movhi	r16,2
    a1f4:	dc400115 	stw	r17,4(sp)
    a1f8:	84397704 	addi	r16,r16,-6692
    a1fc:	2023883a 	mov	r17,r4
    a200:	300b883a 	mov	r5,r6
    a204:	1009883a 	mov	r4,r2
    a208:	dfc00215 	stw	ra,8(sp)
    a20c:	80000015 	stw	zero,0(r16)
    a210:	000dad40 	call	dad4 <fstat>
    a214:	00ffffc4 	movi	r3,-1
    a218:	10c00526 	beq	r2,r3,a230 <_fstat_r+0x4c>
    a21c:	dfc00217 	ldw	ra,8(sp)
    a220:	dc400117 	ldw	r17,4(sp)
    a224:	dc000017 	ldw	r16,0(sp)
    a228:	dec00304 	addi	sp,sp,12
    a22c:	f800283a 	ret
    a230:	80c00017 	ldw	r3,0(r16)
    a234:	183ff926 	beq	r3,zero,a21c <_fstat_r+0x38>
    a238:	88c00015 	stw	r3,0(r17)
    a23c:	003ff706 	br	a21c <_fstat_r+0x38>

0000a240 <_isatty_r>:
    a240:	defffd04 	addi	sp,sp,-12
    a244:	dc000015 	stw	r16,0(sp)
    a248:	040000b4 	movhi	r16,2
    a24c:	dc400115 	stw	r17,4(sp)
    a250:	84397704 	addi	r16,r16,-6692
    a254:	2023883a 	mov	r17,r4
    a258:	2809883a 	mov	r4,r5
    a25c:	dfc00215 	stw	ra,8(sp)
    a260:	80000015 	stw	zero,0(r16)
    a264:	000dbc00 	call	dbc0 <isatty>
    a268:	00ffffc4 	movi	r3,-1
    a26c:	10c00526 	beq	r2,r3,a284 <_isatty_r+0x44>
    a270:	dfc00217 	ldw	ra,8(sp)
    a274:	dc400117 	ldw	r17,4(sp)
    a278:	dc000017 	ldw	r16,0(sp)
    a27c:	dec00304 	addi	sp,sp,12
    a280:	f800283a 	ret
    a284:	80c00017 	ldw	r3,0(r16)
    a288:	183ff926 	beq	r3,zero,a270 <_isatty_r+0x30>
    a28c:	88c00015 	stw	r3,0(r17)
    a290:	003ff706 	br	a270 <_isatty_r+0x30>

0000a294 <_lseek_r>:
    a294:	defffd04 	addi	sp,sp,-12
    a298:	2805883a 	mov	r2,r5
    a29c:	dc000015 	stw	r16,0(sp)
    a2a0:	040000b4 	movhi	r16,2
    a2a4:	dc400115 	stw	r17,4(sp)
    a2a8:	300b883a 	mov	r5,r6
    a2ac:	84397704 	addi	r16,r16,-6692
    a2b0:	2023883a 	mov	r17,r4
    a2b4:	380d883a 	mov	r6,r7
    a2b8:	1009883a 	mov	r4,r2
    a2bc:	dfc00215 	stw	ra,8(sp)
    a2c0:	80000015 	stw	zero,0(r16)
    a2c4:	000dd8c0 	call	dd8c <lseek>
    a2c8:	00ffffc4 	movi	r3,-1
    a2cc:	10c00526 	beq	r2,r3,a2e4 <_lseek_r+0x50>
    a2d0:	dfc00217 	ldw	ra,8(sp)
    a2d4:	dc400117 	ldw	r17,4(sp)
    a2d8:	dc000017 	ldw	r16,0(sp)
    a2dc:	dec00304 	addi	sp,sp,12
    a2e0:	f800283a 	ret
    a2e4:	80c00017 	ldw	r3,0(r16)
    a2e8:	183ff926 	beq	r3,zero,a2d0 <_lseek_r+0x3c>
    a2ec:	88c00015 	stw	r3,0(r17)
    a2f0:	003ff706 	br	a2d0 <_lseek_r+0x3c>

0000a2f4 <_read_r>:
    a2f4:	defffd04 	addi	sp,sp,-12
    a2f8:	2805883a 	mov	r2,r5
    a2fc:	dc000015 	stw	r16,0(sp)
    a300:	040000b4 	movhi	r16,2
    a304:	dc400115 	stw	r17,4(sp)
    a308:	300b883a 	mov	r5,r6
    a30c:	84397704 	addi	r16,r16,-6692
    a310:	2023883a 	mov	r17,r4
    a314:	380d883a 	mov	r6,r7
    a318:	1009883a 	mov	r4,r2
    a31c:	dfc00215 	stw	ra,8(sp)
    a320:	80000015 	stw	zero,0(r16)
    a324:	000df580 	call	df58 <read>
    a328:	00ffffc4 	movi	r3,-1
    a32c:	10c00526 	beq	r2,r3,a344 <_read_r+0x50>
    a330:	dfc00217 	ldw	ra,8(sp)
    a334:	dc400117 	ldw	r17,4(sp)
    a338:	dc000017 	ldw	r16,0(sp)
    a33c:	dec00304 	addi	sp,sp,12
    a340:	f800283a 	ret
    a344:	80c00017 	ldw	r3,0(r16)
    a348:	183ff926 	beq	r3,zero,a330 <_read_r+0x3c>
    a34c:	88c00015 	stw	r3,0(r17)
    a350:	003ff706 	br	a330 <_read_r+0x3c>

0000a354 <__swbuf_r>:
    a354:	defffb04 	addi	sp,sp,-20
    a358:	dcc00315 	stw	r19,12(sp)
    a35c:	dc800215 	stw	r18,8(sp)
    a360:	dc000015 	stw	r16,0(sp)
    a364:	dfc00415 	stw	ra,16(sp)
    a368:	dc400115 	stw	r17,4(sp)
    a36c:	2025883a 	mov	r18,r4
    a370:	2827883a 	mov	r19,r5
    a374:	3021883a 	mov	r16,r6
    a378:	20000226 	beq	r4,zero,a384 <__swbuf_r+0x30>
    a37c:	20800e17 	ldw	r2,56(r4)
    a380:	10004226 	beq	r2,zero,a48c <__swbuf_r+0x138>
    a384:	80800617 	ldw	r2,24(r16)
    a388:	8100030b 	ldhu	r4,12(r16)
    a38c:	80800215 	stw	r2,8(r16)
    a390:	2080020c 	andi	r2,r4,8
    a394:	10003626 	beq	r2,zero,a470 <__swbuf_r+0x11c>
    a398:	80c00417 	ldw	r3,16(r16)
    a39c:	18003426 	beq	r3,zero,a470 <__swbuf_r+0x11c>
    a3a0:	2088000c 	andi	r2,r4,8192
    a3a4:	9c403fcc 	andi	r17,r19,255
    a3a8:	10001a26 	beq	r2,zero,a414 <__swbuf_r+0xc0>
    a3ac:	80800017 	ldw	r2,0(r16)
    a3b0:	81000517 	ldw	r4,20(r16)
    a3b4:	10c7c83a 	sub	r3,r2,r3
    a3b8:	1900200e 	bge	r3,r4,a43c <__swbuf_r+0xe8>
    a3bc:	18c00044 	addi	r3,r3,1
    a3c0:	81000217 	ldw	r4,8(r16)
    a3c4:	11400044 	addi	r5,r2,1
    a3c8:	81400015 	stw	r5,0(r16)
    a3cc:	213fffc4 	addi	r4,r4,-1
    a3d0:	81000215 	stw	r4,8(r16)
    a3d4:	14c00005 	stb	r19,0(r2)
    a3d8:	80800517 	ldw	r2,20(r16)
    a3dc:	10c01e26 	beq	r2,r3,a458 <__swbuf_r+0x104>
    a3e0:	8080030b 	ldhu	r2,12(r16)
    a3e4:	1080004c 	andi	r2,r2,1
    a3e8:	10000226 	beq	r2,zero,a3f4 <__swbuf_r+0xa0>
    a3ec:	00800284 	movi	r2,10
    a3f0:	88801926 	beq	r17,r2,a458 <__swbuf_r+0x104>
    a3f4:	8805883a 	mov	r2,r17
    a3f8:	dfc00417 	ldw	ra,16(sp)
    a3fc:	dcc00317 	ldw	r19,12(sp)
    a400:	dc800217 	ldw	r18,8(sp)
    a404:	dc400117 	ldw	r17,4(sp)
    a408:	dc000017 	ldw	r16,0(sp)
    a40c:	dec00504 	addi	sp,sp,20
    a410:	f800283a 	ret
    a414:	81401917 	ldw	r5,100(r16)
    a418:	00b7ffc4 	movi	r2,-8193
    a41c:	21080014 	ori	r4,r4,8192
    a420:	2884703a 	and	r2,r5,r2
    a424:	80801915 	stw	r2,100(r16)
    a428:	80800017 	ldw	r2,0(r16)
    a42c:	8100030d 	sth	r4,12(r16)
    a430:	81000517 	ldw	r4,20(r16)
    a434:	10c7c83a 	sub	r3,r2,r3
    a438:	193fe016 	blt	r3,r4,a3bc <__swbuf_r+0x68>
    a43c:	800b883a 	mov	r5,r16
    a440:	9009883a 	mov	r4,r18
    a444:	00050e00 	call	50e0 <_fflush_r>
    a448:	1000071e 	bne	r2,zero,a468 <__swbuf_r+0x114>
    a44c:	80800017 	ldw	r2,0(r16)
    a450:	00c00044 	movi	r3,1
    a454:	003fda06 	br	a3c0 <__swbuf_r+0x6c>
    a458:	800b883a 	mov	r5,r16
    a45c:	9009883a 	mov	r4,r18
    a460:	00050e00 	call	50e0 <_fflush_r>
    a464:	103fe326 	beq	r2,zero,a3f4 <__swbuf_r+0xa0>
    a468:	00bfffc4 	movi	r2,-1
    a46c:	003fe206 	br	a3f8 <__swbuf_r+0xa4>
    a470:	800b883a 	mov	r5,r16
    a474:	9009883a 	mov	r4,r18
    a478:	00034e80 	call	34e8 <__swsetup_r>
    a47c:	103ffa1e 	bne	r2,zero,a468 <__swbuf_r+0x114>
    a480:	8100030b 	ldhu	r4,12(r16)
    a484:	80c00417 	ldw	r3,16(r16)
    a488:	003fc506 	br	a3a0 <__swbuf_r+0x4c>
    a48c:	00054bc0 	call	54bc <__sinit>
    a490:	003fbc06 	br	a384 <__swbuf_r+0x30>

0000a494 <__swbuf>:
    a494:	008000b4 	movhi	r2,2
    a498:	10b17c04 	addi	r2,r2,-14864
    a49c:	280d883a 	mov	r6,r5
    a4a0:	200b883a 	mov	r5,r4
    a4a4:	11000017 	ldw	r4,0(r2)
    a4a8:	000a3541 	jmpi	a354 <__swbuf_r>

0000a4ac <_wcrtomb_r>:
    a4ac:	defff604 	addi	sp,sp,-40
    a4b0:	008000b4 	movhi	r2,2
    a4b4:	dc800815 	stw	r18,32(sp)
    a4b8:	dc400715 	stw	r17,28(sp)
    a4bc:	dc000615 	stw	r16,24(sp)
    a4c0:	10b18004 	addi	r2,r2,-14848
    a4c4:	dfc00915 	stw	ra,36(sp)
    a4c8:	2021883a 	mov	r16,r4
    a4cc:	3823883a 	mov	r17,r7
    a4d0:	14800017 	ldw	r18,0(r2)
    a4d4:	28001426 	beq	r5,zero,a528 <_wcrtomb_r+0x7c>
    a4d8:	d9400415 	stw	r5,16(sp)
    a4dc:	d9800515 	stw	r6,20(sp)
    a4e0:	00060000 	call	6000 <__locale_charset>
    a4e4:	d9800517 	ldw	r6,20(sp)
    a4e8:	d9400417 	ldw	r5,16(sp)
    a4ec:	100f883a 	mov	r7,r2
    a4f0:	dc400015 	stw	r17,0(sp)
    a4f4:	8009883a 	mov	r4,r16
    a4f8:	903ee83a 	callr	r18
    a4fc:	00ffffc4 	movi	r3,-1
    a500:	10c0031e 	bne	r2,r3,a510 <_wcrtomb_r+0x64>
    a504:	88000015 	stw	zero,0(r17)
    a508:	00c02284 	movi	r3,138
    a50c:	80c00015 	stw	r3,0(r16)
    a510:	dfc00917 	ldw	ra,36(sp)
    a514:	dc800817 	ldw	r18,32(sp)
    a518:	dc400717 	ldw	r17,28(sp)
    a51c:	dc000617 	ldw	r16,24(sp)
    a520:	dec00a04 	addi	sp,sp,40
    a524:	f800283a 	ret
    a528:	00060000 	call	6000 <__locale_charset>
    a52c:	100f883a 	mov	r7,r2
    a530:	dc400015 	stw	r17,0(sp)
    a534:	000d883a 	mov	r6,zero
    a538:	d9400104 	addi	r5,sp,4
    a53c:	8009883a 	mov	r4,r16
    a540:	903ee83a 	callr	r18
    a544:	003fed06 	br	a4fc <_wcrtomb_r+0x50>

0000a548 <wcrtomb>:
    a548:	defff604 	addi	sp,sp,-40
    a54c:	008000b4 	movhi	r2,2
    a550:	dc800615 	stw	r18,24(sp)
    a554:	dc400515 	stw	r17,20(sp)
    a558:	10b17c04 	addi	r2,r2,-14864
    a55c:	dfc00915 	stw	ra,36(sp)
    a560:	dd000815 	stw	r20,32(sp)
    a564:	dcc00715 	stw	r19,28(sp)
    a568:	dc000415 	stw	r16,16(sp)
    a56c:	3025883a 	mov	r18,r6
    a570:	14400017 	ldw	r17,0(r2)
    a574:	20001926 	beq	r4,zero,a5dc <wcrtomb+0x94>
    a578:	008000b4 	movhi	r2,2
    a57c:	10b18004 	addi	r2,r2,-14848
    a580:	15000017 	ldw	r20,0(r2)
    a584:	2021883a 	mov	r16,r4
    a588:	2827883a 	mov	r19,r5
    a58c:	00060000 	call	6000 <__locale_charset>
    a590:	100f883a 	mov	r7,r2
    a594:	dc800015 	stw	r18,0(sp)
    a598:	980d883a 	mov	r6,r19
    a59c:	800b883a 	mov	r5,r16
    a5a0:	8809883a 	mov	r4,r17
    a5a4:	a03ee83a 	callr	r20
    a5a8:	00ffffc4 	movi	r3,-1
    a5ac:	10c0031e 	bne	r2,r3,a5bc <wcrtomb+0x74>
    a5b0:	90000015 	stw	zero,0(r18)
    a5b4:	00c02284 	movi	r3,138
    a5b8:	88c00015 	stw	r3,0(r17)
    a5bc:	dfc00917 	ldw	ra,36(sp)
    a5c0:	dd000817 	ldw	r20,32(sp)
    a5c4:	dcc00717 	ldw	r19,28(sp)
    a5c8:	dc800617 	ldw	r18,24(sp)
    a5cc:	dc400517 	ldw	r17,20(sp)
    a5d0:	dc000417 	ldw	r16,16(sp)
    a5d4:	dec00a04 	addi	sp,sp,40
    a5d8:	f800283a 	ret
    a5dc:	008000b4 	movhi	r2,2
    a5e0:	10b18004 	addi	r2,r2,-14848
    a5e4:	14000017 	ldw	r16,0(r2)
    a5e8:	00060000 	call	6000 <__locale_charset>
    a5ec:	100f883a 	mov	r7,r2
    a5f0:	dc800015 	stw	r18,0(sp)
    a5f4:	000d883a 	mov	r6,zero
    a5f8:	d9400104 	addi	r5,sp,4
    a5fc:	8809883a 	mov	r4,r17
    a600:	803ee83a 	callr	r16
    a604:	003fe806 	br	a5a8 <wcrtomb+0x60>

0000a608 <__ascii_wctomb>:
    a608:	28000526 	beq	r5,zero,a620 <__ascii_wctomb+0x18>
    a60c:	00803fc4 	movi	r2,255
    a610:	11800536 	bltu	r2,r6,a628 <__ascii_wctomb+0x20>
    a614:	29800005 	stb	r6,0(r5)
    a618:	00800044 	movi	r2,1
    a61c:	f800283a 	ret
    a620:	0005883a 	mov	r2,zero
    a624:	f800283a 	ret
    a628:	00802284 	movi	r2,138
    a62c:	20800015 	stw	r2,0(r4)
    a630:	00bfffc4 	movi	r2,-1
    a634:	f800283a 	ret

0000a638 <_wctomb_r>:
    a638:	008000b4 	movhi	r2,2
    a63c:	defff904 	addi	sp,sp,-28
    a640:	10b18004 	addi	r2,r2,-14848
    a644:	dfc00615 	stw	ra,24(sp)
    a648:	dc400515 	stw	r17,20(sp)
    a64c:	dc000415 	stw	r16,16(sp)
    a650:	3823883a 	mov	r17,r7
    a654:	14000017 	ldw	r16,0(r2)
    a658:	d9000115 	stw	r4,4(sp)
    a65c:	d9400215 	stw	r5,8(sp)
    a660:	d9800315 	stw	r6,12(sp)
    a664:	00060000 	call	6000 <__locale_charset>
    a668:	d9800317 	ldw	r6,12(sp)
    a66c:	d9400217 	ldw	r5,8(sp)
    a670:	d9000117 	ldw	r4,4(sp)
    a674:	100f883a 	mov	r7,r2
    a678:	dc400015 	stw	r17,0(sp)
    a67c:	803ee83a 	callr	r16
    a680:	dfc00617 	ldw	ra,24(sp)
    a684:	dc400517 	ldw	r17,20(sp)
    a688:	dc000417 	ldw	r16,16(sp)
    a68c:	dec00704 	addi	sp,sp,28
    a690:	f800283a 	ret

0000a694 <__udivdi3>:
    a694:	defff504 	addi	sp,sp,-44
    a698:	dcc00415 	stw	r19,16(sp)
    a69c:	dc000115 	stw	r16,4(sp)
    a6a0:	dfc00a15 	stw	ra,40(sp)
    a6a4:	df000915 	stw	fp,36(sp)
    a6a8:	ddc00815 	stw	r23,32(sp)
    a6ac:	dd800715 	stw	r22,28(sp)
    a6b0:	dd400615 	stw	r21,24(sp)
    a6b4:	dd000515 	stw	r20,20(sp)
    a6b8:	dc800315 	stw	r18,12(sp)
    a6bc:	dc400215 	stw	r17,8(sp)
    a6c0:	2027883a 	mov	r19,r4
    a6c4:	2821883a 	mov	r16,r5
    a6c8:	3800411e 	bne	r7,zero,a7d0 <__udivdi3+0x13c>
    a6cc:	3023883a 	mov	r17,r6
    a6d0:	2025883a 	mov	r18,r4
    a6d4:	2980522e 	bgeu	r5,r6,a820 <__udivdi3+0x18c>
    a6d8:	00bfffd4 	movui	r2,65535
    a6dc:	282d883a 	mov	r22,r5
    a6e0:	1180a836 	bltu	r2,r6,a984 <__udivdi3+0x2f0>
    a6e4:	00803fc4 	movi	r2,255
    a6e8:	1185803a 	cmpltu	r2,r2,r6
    a6ec:	100490fa 	slli	r2,r2,3
    a6f0:	3086d83a 	srl	r3,r6,r2
    a6f4:	010000b4 	movhi	r4,2
    a6f8:	21290c04 	addi	r4,r4,-23504
    a6fc:	20c7883a 	add	r3,r4,r3
    a700:	18c00003 	ldbu	r3,0(r3)
    a704:	1885883a 	add	r2,r3,r2
    a708:	00c00804 	movi	r3,32
    a70c:	1887c83a 	sub	r3,r3,r2
    a710:	18000526 	beq	r3,zero,a728 <__udivdi3+0x94>
    a714:	80e0983a 	sll	r16,r16,r3
    a718:	9884d83a 	srl	r2,r19,r2
    a71c:	30e2983a 	sll	r17,r6,r3
    a720:	98e4983a 	sll	r18,r19,r3
    a724:	142cb03a 	or	r22,r2,r16
    a728:	882ad43a 	srli	r21,r17,16
    a72c:	b009883a 	mov	r4,r22
    a730:	8d3fffcc 	andi	r20,r17,65535
    a734:	a80b883a 	mov	r5,r21
    a738:	000b2a00 	call	b2a0 <__umodsi3>
    a73c:	b009883a 	mov	r4,r22
    a740:	a80b883a 	mov	r5,r21
    a744:	1027883a 	mov	r19,r2
    a748:	000b23c0 	call	b23c <__udivsi3>
    a74c:	102d883a 	mov	r22,r2
    a750:	9826943a 	slli	r19,r19,16
    a754:	9004d43a 	srli	r2,r18,16
    a758:	a5a1383a 	mul	r16,r20,r22
    a75c:	14c4b03a 	or	r2,r2,r19
    a760:	1400052e 	bgeu	r2,r16,a778 <__udivdi3+0xe4>
    a764:	1445883a 	add	r2,r2,r17
    a768:	b0ffffc4 	addi	r3,r22,-1
    a76c:	14400136 	bltu	r2,r17,a774 <__udivdi3+0xe0>
    a770:	14012336 	bltu	r2,r16,ac00 <__udivdi3+0x56c>
    a774:	182d883a 	mov	r22,r3
    a778:	1421c83a 	sub	r16,r2,r16
    a77c:	a80b883a 	mov	r5,r21
    a780:	8009883a 	mov	r4,r16
    a784:	000b2a00 	call	b2a0 <__umodsi3>
    a788:	1027883a 	mov	r19,r2
    a78c:	a80b883a 	mov	r5,r21
    a790:	8009883a 	mov	r4,r16
    a794:	000b23c0 	call	b23c <__udivsi3>
    a798:	9826943a 	slli	r19,r19,16
    a79c:	a0a9383a 	mul	r20,r20,r2
    a7a0:	94bfffcc 	andi	r18,r18,65535
    a7a4:	94e4b03a 	or	r18,r18,r19
    a7a8:	9500052e 	bgeu	r18,r20,a7c0 <__udivdi3+0x12c>
    a7ac:	8ca5883a 	add	r18,r17,r18
    a7b0:	10ffffc4 	addi	r3,r2,-1
    a7b4:	9440f136 	bltu	r18,r17,ab7c <__udivdi3+0x4e8>
    a7b8:	9500f02e 	bgeu	r18,r20,ab7c <__udivdi3+0x4e8>
    a7bc:	10bfff84 	addi	r2,r2,-2
    a7c0:	b00c943a 	slli	r6,r22,16
    a7c4:	0007883a 	mov	r3,zero
    a7c8:	3084b03a 	or	r2,r6,r2
    a7cc:	00005906 	br	a934 <__udivdi3+0x2a0>
    a7d0:	29c05636 	bltu	r5,r7,a92c <__udivdi3+0x298>
    a7d4:	00bfffd4 	movui	r2,65535
    a7d8:	11c0622e 	bgeu	r2,r7,a964 <__udivdi3+0x2d0>
    a7dc:	00804034 	movhi	r2,256
    a7e0:	10bfffc4 	addi	r2,r2,-1
    a7e4:	11c0ee36 	bltu	r2,r7,aba0 <__udivdi3+0x50c>
    a7e8:	00800404 	movi	r2,16
    a7ec:	3886d83a 	srl	r3,r7,r2
    a7f0:	010000b4 	movhi	r4,2
    a7f4:	21290c04 	addi	r4,r4,-23504
    a7f8:	20c7883a 	add	r3,r4,r3
    a7fc:	18c00003 	ldbu	r3,0(r3)
    a800:	05400804 	movi	r21,32
    a804:	1885883a 	add	r2,r3,r2
    a808:	a8abc83a 	sub	r21,r21,r2
    a80c:	a800621e 	bne	r21,zero,a998 <__udivdi3+0x304>
    a810:	3c00e936 	bltu	r7,r16,abb8 <__udivdi3+0x524>
    a814:	9985403a 	cmpgeu	r2,r19,r6
    a818:	0007883a 	mov	r3,zero
    a81c:	00004506 	br	a934 <__udivdi3+0x2a0>
    a820:	3000041e 	bne	r6,zero,a834 <__udivdi3+0x1a0>
    a824:	000b883a 	mov	r5,zero
    a828:	01000044 	movi	r4,1
    a82c:	000b23c0 	call	b23c <__udivsi3>
    a830:	1023883a 	mov	r17,r2
    a834:	00bfffd4 	movui	r2,65535
    a838:	14404e2e 	bgeu	r2,r17,a974 <__udivdi3+0x2e0>
    a83c:	00804034 	movhi	r2,256
    a840:	10bfffc4 	addi	r2,r2,-1
    a844:	1440d836 	bltu	r2,r17,aba8 <__udivdi3+0x514>
    a848:	00800404 	movi	r2,16
    a84c:	8886d83a 	srl	r3,r17,r2
    a850:	010000b4 	movhi	r4,2
    a854:	21290c04 	addi	r4,r4,-23504
    a858:	20c7883a 	add	r3,r4,r3
    a85c:	18c00003 	ldbu	r3,0(r3)
    a860:	1885883a 	add	r2,r3,r2
    a864:	00c00804 	movi	r3,32
    a868:	1887c83a 	sub	r3,r3,r2
    a86c:	18008f1e 	bne	r3,zero,aaac <__udivdi3+0x418>
    a870:	882ad43a 	srli	r21,r17,16
    a874:	8461c83a 	sub	r16,r16,r17
    a878:	8d3fffcc 	andi	r20,r17,65535
    a87c:	00c00044 	movi	r3,1
    a880:	8009883a 	mov	r4,r16
    a884:	a80b883a 	mov	r5,r21
    a888:	d8c00015 	stw	r3,0(sp)
    a88c:	000b2a00 	call	b2a0 <__umodsi3>
    a890:	8009883a 	mov	r4,r16
    a894:	a80b883a 	mov	r5,r21
    a898:	1027883a 	mov	r19,r2
    a89c:	000b23c0 	call	b23c <__udivsi3>
    a8a0:	9826943a 	slli	r19,r19,16
    a8a4:	9008d43a 	srli	r4,r18,16
    a8a8:	1521383a 	mul	r16,r2,r20
    a8ac:	102d883a 	mov	r22,r2
    a8b0:	24c8b03a 	or	r4,r4,r19
    a8b4:	d8c00017 	ldw	r3,0(sp)
    a8b8:	2400052e 	bgeu	r4,r16,a8d0 <__udivdi3+0x23c>
    a8bc:	2449883a 	add	r4,r4,r17
    a8c0:	b0bfffc4 	addi	r2,r22,-1
    a8c4:	24400136 	bltu	r4,r17,a8cc <__udivdi3+0x238>
    a8c8:	2400ca36 	bltu	r4,r16,abf4 <__udivdi3+0x560>
    a8cc:	102d883a 	mov	r22,r2
    a8d0:	2421c83a 	sub	r16,r4,r16
    a8d4:	a80b883a 	mov	r5,r21
    a8d8:	8009883a 	mov	r4,r16
    a8dc:	d8c00015 	stw	r3,0(sp)
    a8e0:	000b2a00 	call	b2a0 <__umodsi3>
    a8e4:	1027883a 	mov	r19,r2
    a8e8:	a80b883a 	mov	r5,r21
    a8ec:	8009883a 	mov	r4,r16
    a8f0:	000b23c0 	call	b23c <__udivsi3>
    a8f4:	9826943a 	slli	r19,r19,16
    a8f8:	1529383a 	mul	r20,r2,r20
    a8fc:	94bfffcc 	andi	r18,r18,65535
    a900:	94e4b03a 	or	r18,r18,r19
    a904:	d8c00017 	ldw	r3,0(sp)
    a908:	9500052e 	bgeu	r18,r20,a920 <__udivdi3+0x28c>
    a90c:	8ca5883a 	add	r18,r17,r18
    a910:	113fffc4 	addi	r4,r2,-1
    a914:	94409736 	bltu	r18,r17,ab74 <__udivdi3+0x4e0>
    a918:	9500962e 	bgeu	r18,r20,ab74 <__udivdi3+0x4e0>
    a91c:	10bfff84 	addi	r2,r2,-2
    a920:	b00c943a 	slli	r6,r22,16
    a924:	3084b03a 	or	r2,r6,r2
    a928:	00000206 	br	a934 <__udivdi3+0x2a0>
    a92c:	0007883a 	mov	r3,zero
    a930:	0005883a 	mov	r2,zero
    a934:	dfc00a17 	ldw	ra,40(sp)
    a938:	df000917 	ldw	fp,36(sp)
    a93c:	ddc00817 	ldw	r23,32(sp)
    a940:	dd800717 	ldw	r22,28(sp)
    a944:	dd400617 	ldw	r21,24(sp)
    a948:	dd000517 	ldw	r20,20(sp)
    a94c:	dcc00417 	ldw	r19,16(sp)
    a950:	dc800317 	ldw	r18,12(sp)
    a954:	dc400217 	ldw	r17,8(sp)
    a958:	dc000117 	ldw	r16,4(sp)
    a95c:	dec00b04 	addi	sp,sp,44
    a960:	f800283a 	ret
    a964:	00803fc4 	movi	r2,255
    a968:	11c5803a 	cmpltu	r2,r2,r7
    a96c:	100490fa 	slli	r2,r2,3
    a970:	003f9e06 	br	a7ec <__udivdi3+0x158>
    a974:	00803fc4 	movi	r2,255
    a978:	1445803a 	cmpltu	r2,r2,r17
    a97c:	100490fa 	slli	r2,r2,3
    a980:	003fb206 	br	a84c <__udivdi3+0x1b8>
    a984:	00804034 	movhi	r2,256
    a988:	10bfffc4 	addi	r2,r2,-1
    a98c:	11808836 	bltu	r2,r6,abb0 <__udivdi3+0x51c>
    a990:	00800404 	movi	r2,16
    a994:	003f5606 	br	a6f0 <__udivdi3+0x5c>
    a998:	30aed83a 	srl	r23,r6,r2
    a99c:	3d4e983a 	sll	r7,r7,r21
    a9a0:	80acd83a 	srl	r22,r16,r2
    a9a4:	9884d83a 	srl	r2,r19,r2
    a9a8:	3deeb03a 	or	r23,r7,r23
    a9ac:	b824d43a 	srli	r18,r23,16
    a9b0:	8560983a 	sll	r16,r16,r21
    a9b4:	b009883a 	mov	r4,r22
    a9b8:	900b883a 	mov	r5,r18
    a9bc:	3568983a 	sll	r20,r6,r21
    a9c0:	1420b03a 	or	r16,r2,r16
    a9c4:	000b2a00 	call	b2a0 <__umodsi3>
    a9c8:	b009883a 	mov	r4,r22
    a9cc:	900b883a 	mov	r5,r18
    a9d0:	1023883a 	mov	r17,r2
    a9d4:	000b23c0 	call	b23c <__udivsi3>
    a9d8:	8808943a 	slli	r4,r17,16
    a9dc:	bf3fffcc 	andi	fp,r23,65535
    a9e0:	8006d43a 	srli	r3,r16,16
    a9e4:	e0a3383a 	mul	r17,fp,r2
    a9e8:	100d883a 	mov	r6,r2
    a9ec:	1906b03a 	or	r3,r3,r4
    a9f0:	1c40042e 	bgeu	r3,r17,aa04 <__udivdi3+0x370>
    a9f4:	1dc7883a 	add	r3,r3,r23
    a9f8:	10bfffc4 	addi	r2,r2,-1
    a9fc:	1dc0752e 	bgeu	r3,r23,abd4 <__udivdi3+0x540>
    aa00:	100d883a 	mov	r6,r2
    aa04:	1c63c83a 	sub	r17,r3,r17
    aa08:	900b883a 	mov	r5,r18
    aa0c:	8809883a 	mov	r4,r17
    aa10:	d9800015 	stw	r6,0(sp)
    aa14:	000b2a00 	call	b2a0 <__umodsi3>
    aa18:	102d883a 	mov	r22,r2
    aa1c:	8809883a 	mov	r4,r17
    aa20:	900b883a 	mov	r5,r18
    aa24:	000b23c0 	call	b23c <__udivsi3>
    aa28:	b02c943a 	slli	r22,r22,16
    aa2c:	e089383a 	mul	r4,fp,r2
    aa30:	843fffcc 	andi	r16,r16,65535
    aa34:	85a0b03a 	or	r16,r16,r22
    aa38:	d9800017 	ldw	r6,0(sp)
    aa3c:	8100042e 	bgeu	r16,r4,aa50 <__udivdi3+0x3bc>
    aa40:	85e1883a 	add	r16,r16,r23
    aa44:	10ffffc4 	addi	r3,r2,-1
    aa48:	85c05e2e 	bgeu	r16,r23,abc4 <__udivdi3+0x530>
    aa4c:	1805883a 	mov	r2,r3
    aa50:	300c943a 	slli	r6,r6,16
    aa54:	a17fffcc 	andi	r5,r20,65535
    aa58:	a028d43a 	srli	r20,r20,16
    aa5c:	3084b03a 	or	r2,r6,r2
    aa60:	10ffffcc 	andi	r3,r2,65535
    aa64:	100cd43a 	srli	r6,r2,16
    aa68:	194f383a 	mul	r7,r3,r5
    aa6c:	1d07383a 	mul	r3,r3,r20
    aa70:	314b383a 	mul	r5,r6,r5
    aa74:	3810d43a 	srli	r8,r7,16
    aa78:	8121c83a 	sub	r16,r16,r4
    aa7c:	1947883a 	add	r3,r3,r5
    aa80:	40c7883a 	add	r3,r8,r3
    aa84:	350d383a 	mul	r6,r6,r20
    aa88:	1940022e 	bgeu	r3,r5,aa94 <__udivdi3+0x400>
    aa8c:	01000074 	movhi	r4,1
    aa90:	310d883a 	add	r6,r6,r4
    aa94:	1828d43a 	srli	r20,r3,16
    aa98:	a18d883a 	add	r6,r20,r6
    aa9c:	81803e36 	bltu	r16,r6,ab98 <__udivdi3+0x504>
    aaa0:	81803826 	beq	r16,r6,ab84 <__udivdi3+0x4f0>
    aaa4:	0007883a 	mov	r3,zero
    aaa8:	003fa206 	br	a934 <__udivdi3+0x2a0>
    aaac:	88e2983a 	sll	r17,r17,r3
    aab0:	80a8d83a 	srl	r20,r16,r2
    aab4:	80e0983a 	sll	r16,r16,r3
    aab8:	882ad43a 	srli	r21,r17,16
    aabc:	9884d83a 	srl	r2,r19,r2
    aac0:	a009883a 	mov	r4,r20
    aac4:	a80b883a 	mov	r5,r21
    aac8:	142eb03a 	or	r23,r2,r16
    aacc:	98e4983a 	sll	r18,r19,r3
    aad0:	000b2a00 	call	b2a0 <__umodsi3>
    aad4:	a009883a 	mov	r4,r20
    aad8:	a80b883a 	mov	r5,r21
    aadc:	1021883a 	mov	r16,r2
    aae0:	000b23c0 	call	b23c <__udivsi3>
    aae4:	1039883a 	mov	fp,r2
    aae8:	8d3fffcc 	andi	r20,r17,65535
    aaec:	8020943a 	slli	r16,r16,16
    aaf0:	b804d43a 	srli	r2,r23,16
    aaf4:	a72d383a 	mul	r22,r20,fp
    aaf8:	1404b03a 	or	r2,r2,r16
    aafc:	1580062e 	bgeu	r2,r22,ab18 <__udivdi3+0x484>
    ab00:	1445883a 	add	r2,r2,r17
    ab04:	e0ffffc4 	addi	r3,fp,-1
    ab08:	14403836 	bltu	r2,r17,abec <__udivdi3+0x558>
    ab0c:	1580372e 	bgeu	r2,r22,abec <__udivdi3+0x558>
    ab10:	e73fff84 	addi	fp,fp,-2
    ab14:	1445883a 	add	r2,r2,r17
    ab18:	15adc83a 	sub	r22,r2,r22
    ab1c:	a80b883a 	mov	r5,r21
    ab20:	b009883a 	mov	r4,r22
    ab24:	000b2a00 	call	b2a0 <__umodsi3>
    ab28:	1027883a 	mov	r19,r2
    ab2c:	b009883a 	mov	r4,r22
    ab30:	a80b883a 	mov	r5,r21
    ab34:	000b23c0 	call	b23c <__udivsi3>
    ab38:	9826943a 	slli	r19,r19,16
    ab3c:	a0a1383a 	mul	r16,r20,r2
    ab40:	b93fffcc 	andi	r4,r23,65535
    ab44:	24c8b03a 	or	r4,r4,r19
    ab48:	2400062e 	bgeu	r4,r16,ab64 <__udivdi3+0x4d0>
    ab4c:	2449883a 	add	r4,r4,r17
    ab50:	10ffffc4 	addi	r3,r2,-1
    ab54:	24402336 	bltu	r4,r17,abe4 <__udivdi3+0x550>
    ab58:	2400222e 	bgeu	r4,r16,abe4 <__udivdi3+0x550>
    ab5c:	10bfff84 	addi	r2,r2,-2
    ab60:	2449883a 	add	r4,r4,r17
    ab64:	e038943a 	slli	fp,fp,16
    ab68:	2421c83a 	sub	r16,r4,r16
    ab6c:	e086b03a 	or	r3,fp,r2
    ab70:	003f4306 	br	a880 <__udivdi3+0x1ec>
    ab74:	2005883a 	mov	r2,r4
    ab78:	003f6906 	br	a920 <__udivdi3+0x28c>
    ab7c:	1805883a 	mov	r2,r3
    ab80:	003f0f06 	br	a7c0 <__udivdi3+0x12c>
    ab84:	1806943a 	slli	r3,r3,16
    ab88:	9d66983a 	sll	r19,r19,r21
    ab8c:	39ffffcc 	andi	r7,r7,65535
    ab90:	19c7883a 	add	r3,r3,r7
    ab94:	98ffc32e 	bgeu	r19,r3,aaa4 <__udivdi3+0x410>
    ab98:	10bfffc4 	addi	r2,r2,-1
    ab9c:	003fc106 	br	aaa4 <__udivdi3+0x410>
    aba0:	00800604 	movi	r2,24
    aba4:	003f1106 	br	a7ec <__udivdi3+0x158>
    aba8:	00800604 	movi	r2,24
    abac:	003f2706 	br	a84c <__udivdi3+0x1b8>
    abb0:	00800604 	movi	r2,24
    abb4:	003ece06 	br	a6f0 <__udivdi3+0x5c>
    abb8:	0007883a 	mov	r3,zero
    abbc:	00800044 	movi	r2,1
    abc0:	003f5c06 	br	a934 <__udivdi3+0x2a0>
    abc4:	813fa12e 	bgeu	r16,r4,aa4c <__udivdi3+0x3b8>
    abc8:	10bfff84 	addi	r2,r2,-2
    abcc:	85e1883a 	add	r16,r16,r23
    abd0:	003f9f06 	br	aa50 <__udivdi3+0x3bc>
    abd4:	1c7f8a2e 	bgeu	r3,r17,aa00 <__udivdi3+0x36c>
    abd8:	31bfff84 	addi	r6,r6,-2
    abdc:	1dc7883a 	add	r3,r3,r23
    abe0:	003f8806 	br	aa04 <__udivdi3+0x370>
    abe4:	1805883a 	mov	r2,r3
    abe8:	003fde06 	br	ab64 <__udivdi3+0x4d0>
    abec:	1839883a 	mov	fp,r3
    abf0:	003fc906 	br	ab18 <__udivdi3+0x484>
    abf4:	b5bfff84 	addi	r22,r22,-2
    abf8:	2449883a 	add	r4,r4,r17
    abfc:	003f3406 	br	a8d0 <__udivdi3+0x23c>
    ac00:	b5bfff84 	addi	r22,r22,-2
    ac04:	1445883a 	add	r2,r2,r17
    ac08:	003edb06 	br	a778 <__udivdi3+0xe4>

0000ac0c <__umoddi3>:
    ac0c:	defff404 	addi	sp,sp,-48
    ac10:	df000a15 	stw	fp,40(sp)
    ac14:	dc400315 	stw	r17,12(sp)
    ac18:	dc000215 	stw	r16,8(sp)
    ac1c:	dfc00b15 	stw	ra,44(sp)
    ac20:	ddc00915 	stw	r23,36(sp)
    ac24:	dd800815 	stw	r22,32(sp)
    ac28:	dd400715 	stw	r21,28(sp)
    ac2c:	dd000615 	stw	r20,24(sp)
    ac30:	dcc00515 	stw	r19,20(sp)
    ac34:	dc800415 	stw	r18,16(sp)
    ac38:	2021883a 	mov	r16,r4
    ac3c:	2823883a 	mov	r17,r5
    ac40:	2839883a 	mov	fp,r5
    ac44:	38003c1e 	bne	r7,zero,ad38 <__umoddi3+0x12c>
    ac48:	3027883a 	mov	r19,r6
    ac4c:	2029883a 	mov	r20,r4
    ac50:	2980512e 	bgeu	r5,r6,ad98 <__umoddi3+0x18c>
    ac54:	00bfffd4 	movui	r2,65535
    ac58:	11809a36 	bltu	r2,r6,aec4 <__umoddi3+0x2b8>
    ac5c:	01003fc4 	movi	r4,255
    ac60:	2189803a 	cmpltu	r4,r4,r6
    ac64:	200890fa 	slli	r4,r4,3
    ac68:	3104d83a 	srl	r2,r6,r4
    ac6c:	00c000b4 	movhi	r3,2
    ac70:	18e90c04 	addi	r3,r3,-23504
    ac74:	1885883a 	add	r2,r3,r2
    ac78:	10c00003 	ldbu	r3,0(r2)
    ac7c:	00800804 	movi	r2,32
    ac80:	1909883a 	add	r4,r3,r4
    ac84:	1125c83a 	sub	r18,r2,r4
    ac88:	90000526 	beq	r18,zero,aca0 <__umoddi3+0x94>
    ac8c:	8ca2983a 	sll	r17,r17,r18
    ac90:	8108d83a 	srl	r4,r16,r4
    ac94:	34a6983a 	sll	r19,r6,r18
    ac98:	84a8983a 	sll	r20,r16,r18
    ac9c:	2478b03a 	or	fp,r4,r17
    aca0:	982ed43a 	srli	r23,r19,16
    aca4:	e009883a 	mov	r4,fp
    aca8:	9dbfffcc 	andi	r22,r19,65535
    acac:	b80b883a 	mov	r5,r23
    acb0:	000b2a00 	call	b2a0 <__umodsi3>
    acb4:	e009883a 	mov	r4,fp
    acb8:	b80b883a 	mov	r5,r23
    acbc:	102b883a 	mov	r21,r2
    acc0:	000b23c0 	call	b23c <__udivsi3>
    acc4:	a806943a 	slli	r3,r21,16
    acc8:	a008d43a 	srli	r4,r20,16
    accc:	b085383a 	mul	r2,r22,r2
    acd0:	20c8b03a 	or	r4,r4,r3
    acd4:	2080032e 	bgeu	r4,r2,ace4 <__umoddi3+0xd8>
    acd8:	24c9883a 	add	r4,r4,r19
    acdc:	24c00136 	bltu	r4,r19,ace4 <__umoddi3+0xd8>
    ace0:	20811036 	bltu	r4,r2,b124 <__umoddi3+0x518>
    ace4:	20abc83a 	sub	r21,r4,r2
    ace8:	b80b883a 	mov	r5,r23
    acec:	a809883a 	mov	r4,r21
    acf0:	000b2a00 	call	b2a0 <__umodsi3>
    acf4:	1023883a 	mov	r17,r2
    acf8:	b80b883a 	mov	r5,r23
    acfc:	a809883a 	mov	r4,r21
    ad00:	000b23c0 	call	b23c <__udivsi3>
    ad04:	8822943a 	slli	r17,r17,16
    ad08:	b085383a 	mul	r2,r22,r2
    ad0c:	a0ffffcc 	andi	r3,r20,65535
    ad10:	1c46b03a 	or	r3,r3,r17
    ad14:	1880042e 	bgeu	r3,r2,ad28 <__umoddi3+0x11c>
    ad18:	1cc7883a 	add	r3,r3,r19
    ad1c:	1cc00236 	bltu	r3,r19,ad28 <__umoddi3+0x11c>
    ad20:	1880012e 	bgeu	r3,r2,ad28 <__umoddi3+0x11c>
    ad24:	1cc7883a 	add	r3,r3,r19
    ad28:	1885c83a 	sub	r2,r3,r2
    ad2c:	1484d83a 	srl	r2,r2,r18
    ad30:	0007883a 	mov	r3,zero
    ad34:	00004f06 	br	ae74 <__umoddi3+0x268>
    ad38:	29c04c36 	bltu	r5,r7,ae6c <__umoddi3+0x260>
    ad3c:	00bfffd4 	movui	r2,65535
    ad40:	11c0582e 	bgeu	r2,r7,aea4 <__umoddi3+0x298>
    ad44:	00804034 	movhi	r2,256
    ad48:	10bfffc4 	addi	r2,r2,-1
    ad4c:	11c0e736 	bltu	r2,r7,b0ec <__umoddi3+0x4e0>
    ad50:	01000404 	movi	r4,16
    ad54:	3904d83a 	srl	r2,r7,r4
    ad58:	00c000b4 	movhi	r3,2
    ad5c:	18e90c04 	addi	r3,r3,-23504
    ad60:	1885883a 	add	r2,r3,r2
    ad64:	14c00003 	ldbu	r19,0(r2)
    ad68:	00c00804 	movi	r3,32
    ad6c:	9927883a 	add	r19,r19,r4
    ad70:	1ce9c83a 	sub	r20,r3,r19
    ad74:	a000581e 	bne	r20,zero,aed8 <__umoddi3+0x2cc>
    ad78:	3c400136 	bltu	r7,r17,ad80 <__umoddi3+0x174>
    ad7c:	8180eb36 	bltu	r16,r6,b12c <__umoddi3+0x520>
    ad80:	8185c83a 	sub	r2,r16,r6
    ad84:	89e3c83a 	sub	r17,r17,r7
    ad88:	8089803a 	cmpltu	r4,r16,r2
    ad8c:	8939c83a 	sub	fp,r17,r4
    ad90:	e007883a 	mov	r3,fp
    ad94:	00003706 	br	ae74 <__umoddi3+0x268>
    ad98:	3000041e 	bne	r6,zero,adac <__umoddi3+0x1a0>
    ad9c:	000b883a 	mov	r5,zero
    ada0:	01000044 	movi	r4,1
    ada4:	000b23c0 	call	b23c <__udivsi3>
    ada8:	1027883a 	mov	r19,r2
    adac:	00bfffd4 	movui	r2,65535
    adb0:	14c0402e 	bgeu	r2,r19,aeb4 <__umoddi3+0x2a8>
    adb4:	00804034 	movhi	r2,256
    adb8:	10bfffc4 	addi	r2,r2,-1
    adbc:	14c0cd36 	bltu	r2,r19,b0f4 <__umoddi3+0x4e8>
    adc0:	00800404 	movi	r2,16
    adc4:	9886d83a 	srl	r3,r19,r2
    adc8:	010000b4 	movhi	r4,2
    adcc:	21290c04 	addi	r4,r4,-23504
    add0:	20c7883a 	add	r3,r4,r3
    add4:	18c00003 	ldbu	r3,0(r3)
    add8:	1887883a 	add	r3,r3,r2
    addc:	00800804 	movi	r2,32
    ade0:	10e5c83a 	sub	r18,r2,r3
    ade4:	9000901e 	bne	r18,zero,b028 <__umoddi3+0x41c>
    ade8:	982cd43a 	srli	r22,r19,16
    adec:	8ce3c83a 	sub	r17,r17,r19
    adf0:	9d7fffcc 	andi	r21,r19,65535
    adf4:	b00b883a 	mov	r5,r22
    adf8:	8809883a 	mov	r4,r17
    adfc:	000b2a00 	call	b2a0 <__umodsi3>
    ae00:	8809883a 	mov	r4,r17
    ae04:	b00b883a 	mov	r5,r22
    ae08:	1021883a 	mov	r16,r2
    ae0c:	000b23c0 	call	b23c <__udivsi3>
    ae10:	8006943a 	slli	r3,r16,16
    ae14:	a008d43a 	srli	r4,r20,16
    ae18:	1545383a 	mul	r2,r2,r21
    ae1c:	20c8b03a 	or	r4,r4,r3
    ae20:	2080042e 	bgeu	r4,r2,ae34 <__umoddi3+0x228>
    ae24:	24c9883a 	add	r4,r4,r19
    ae28:	24c00236 	bltu	r4,r19,ae34 <__umoddi3+0x228>
    ae2c:	2080012e 	bgeu	r4,r2,ae34 <__umoddi3+0x228>
    ae30:	24c9883a 	add	r4,r4,r19
    ae34:	20a1c83a 	sub	r16,r4,r2
    ae38:	b00b883a 	mov	r5,r22
    ae3c:	8009883a 	mov	r4,r16
    ae40:	000b2a00 	call	b2a0 <__umodsi3>
    ae44:	1023883a 	mov	r17,r2
    ae48:	b00b883a 	mov	r5,r22
    ae4c:	8009883a 	mov	r4,r16
    ae50:	000b23c0 	call	b23c <__udivsi3>
    ae54:	8822943a 	slli	r17,r17,16
    ae58:	1545383a 	mul	r2,r2,r21
    ae5c:	a53fffcc 	andi	r20,r20,65535
    ae60:	a446b03a 	or	r3,r20,r17
    ae64:	18bfb02e 	bgeu	r3,r2,ad28 <__umoddi3+0x11c>
    ae68:	003fab06 	br	ad18 <__umoddi3+0x10c>
    ae6c:	2005883a 	mov	r2,r4
    ae70:	2807883a 	mov	r3,r5
    ae74:	dfc00b17 	ldw	ra,44(sp)
    ae78:	df000a17 	ldw	fp,40(sp)
    ae7c:	ddc00917 	ldw	r23,36(sp)
    ae80:	dd800817 	ldw	r22,32(sp)
    ae84:	dd400717 	ldw	r21,28(sp)
    ae88:	dd000617 	ldw	r20,24(sp)
    ae8c:	dcc00517 	ldw	r19,20(sp)
    ae90:	dc800417 	ldw	r18,16(sp)
    ae94:	dc400317 	ldw	r17,12(sp)
    ae98:	dc000217 	ldw	r16,8(sp)
    ae9c:	dec00c04 	addi	sp,sp,48
    aea0:	f800283a 	ret
    aea4:	04c03fc4 	movi	r19,255
    aea8:	99c9803a 	cmpltu	r4,r19,r7
    aeac:	200890fa 	slli	r4,r4,3
    aeb0:	003fa806 	br	ad54 <__umoddi3+0x148>
    aeb4:	00803fc4 	movi	r2,255
    aeb8:	14c5803a 	cmpltu	r2,r2,r19
    aebc:	100490fa 	slli	r2,r2,3
    aec0:	003fc006 	br	adc4 <__umoddi3+0x1b8>
    aec4:	00804034 	movhi	r2,256
    aec8:	10bfffc4 	addi	r2,r2,-1
    aecc:	11808b36 	bltu	r2,r6,b0fc <__umoddi3+0x4f0>
    aed0:	01000404 	movi	r4,16
    aed4:	003f6406 	br	ac68 <__umoddi3+0x5c>
    aed8:	34c4d83a 	srl	r2,r6,r19
    aedc:	3d0e983a 	sll	r7,r7,r20
    aee0:	8cf8d83a 	srl	fp,r17,r19
    aee4:	8d10983a 	sll	r8,r17,r20
    aee8:	38aab03a 	or	r21,r7,r2
    aeec:	a82cd43a 	srli	r22,r21,16
    aef0:	84e2d83a 	srl	r17,r16,r19
    aef4:	e009883a 	mov	r4,fp
    aef8:	b00b883a 	mov	r5,r22
    aefc:	8a22b03a 	or	r17,r17,r8
    af00:	3524983a 	sll	r18,r6,r20
    af04:	000b2a00 	call	b2a0 <__umodsi3>
    af08:	e009883a 	mov	r4,fp
    af0c:	b00b883a 	mov	r5,r22
    af10:	102f883a 	mov	r23,r2
    af14:	000b23c0 	call	b23c <__udivsi3>
    af18:	100d883a 	mov	r6,r2
    af1c:	b808943a 	slli	r4,r23,16
    af20:	aa3fffcc 	andi	r8,r21,65535
    af24:	8804d43a 	srli	r2,r17,16
    af28:	41af383a 	mul	r23,r8,r6
    af2c:	8520983a 	sll	r16,r16,r20
    af30:	1104b03a 	or	r2,r2,r4
    af34:	15c0042e 	bgeu	r2,r23,af48 <__umoddi3+0x33c>
    af38:	1545883a 	add	r2,r2,r21
    af3c:	30ffffc4 	addi	r3,r6,-1
    af40:	1540742e 	bgeu	r2,r21,b114 <__umoddi3+0x508>
    af44:	180d883a 	mov	r6,r3
    af48:	15efc83a 	sub	r23,r2,r23
    af4c:	b00b883a 	mov	r5,r22
    af50:	b809883a 	mov	r4,r23
    af54:	d9800115 	stw	r6,4(sp)
    af58:	da000015 	stw	r8,0(sp)
    af5c:	000b2a00 	call	b2a0 <__umodsi3>
    af60:	b00b883a 	mov	r5,r22
    af64:	b809883a 	mov	r4,r23
    af68:	1039883a 	mov	fp,r2
    af6c:	000b23c0 	call	b23c <__udivsi3>
    af70:	da000017 	ldw	r8,0(sp)
    af74:	e038943a 	slli	fp,fp,16
    af78:	100b883a 	mov	r5,r2
    af7c:	4089383a 	mul	r4,r8,r2
    af80:	8a3fffcc 	andi	r8,r17,65535
    af84:	4710b03a 	or	r8,r8,fp
    af88:	d9800117 	ldw	r6,4(sp)
    af8c:	4100042e 	bgeu	r8,r4,afa0 <__umoddi3+0x394>
    af90:	4551883a 	add	r8,r8,r21
    af94:	10bfffc4 	addi	r2,r2,-1
    af98:	45405a2e 	bgeu	r8,r21,b104 <__umoddi3+0x4f8>
    af9c:	100b883a 	mov	r5,r2
    afa0:	300c943a 	slli	r6,r6,16
    afa4:	91ffffcc 	andi	r7,r18,65535
    afa8:	9004d43a 	srli	r2,r18,16
    afac:	314cb03a 	or	r6,r6,r5
    afb0:	317fffcc 	andi	r5,r6,65535
    afb4:	300cd43a 	srli	r6,r6,16
    afb8:	29d3383a 	mul	r9,r5,r7
    afbc:	288b383a 	mul	r5,r5,r2
    afc0:	31cf383a 	mul	r7,r6,r7
    afc4:	4806d43a 	srli	r3,r9,16
    afc8:	4111c83a 	sub	r8,r8,r4
    afcc:	29cb883a 	add	r5,r5,r7
    afd0:	194b883a 	add	r5,r3,r5
    afd4:	3085383a 	mul	r2,r6,r2
    afd8:	29c0022e 	bgeu	r5,r7,afe4 <__umoddi3+0x3d8>
    afdc:	00c00074 	movhi	r3,1
    afe0:	10c5883a 	add	r2,r2,r3
    afe4:	2808d43a 	srli	r4,r5,16
    afe8:	280a943a 	slli	r5,r5,16
    afec:	4a7fffcc 	andi	r9,r9,65535
    aff0:	2085883a 	add	r2,r4,r2
    aff4:	2a4b883a 	add	r5,r5,r9
    aff8:	40803636 	bltu	r8,r2,b0d4 <__umoddi3+0x4c8>
    affc:	40804d26 	beq	r8,r2,b134 <__umoddi3+0x528>
    b000:	4089c83a 	sub	r4,r8,r2
    b004:	280f883a 	mov	r7,r5
    b008:	81cfc83a 	sub	r7,r16,r7
    b00c:	81c7803a 	cmpltu	r3,r16,r7
    b010:	20c7c83a 	sub	r3,r4,r3
    b014:	1cc4983a 	sll	r2,r3,r19
    b018:	3d0ed83a 	srl	r7,r7,r20
    b01c:	1d06d83a 	srl	r3,r3,r20
    b020:	11c4b03a 	or	r2,r2,r7
    b024:	003f9306 	br	ae74 <__umoddi3+0x268>
    b028:	9ca6983a 	sll	r19,r19,r18
    b02c:	88e8d83a 	srl	r20,r17,r3
    b030:	80c4d83a 	srl	r2,r16,r3
    b034:	982cd43a 	srli	r22,r19,16
    b038:	8ca2983a 	sll	r17,r17,r18
    b03c:	a009883a 	mov	r4,r20
    b040:	b00b883a 	mov	r5,r22
    b044:	1478b03a 	or	fp,r2,r17
    b048:	000b2a00 	call	b2a0 <__umodsi3>
    b04c:	a009883a 	mov	r4,r20
    b050:	b00b883a 	mov	r5,r22
    b054:	1023883a 	mov	r17,r2
    b058:	000b23c0 	call	b23c <__udivsi3>
    b05c:	9d7fffcc 	andi	r21,r19,65535
    b060:	880a943a 	slli	r5,r17,16
    b064:	e008d43a 	srli	r4,fp,16
    b068:	a885383a 	mul	r2,r21,r2
    b06c:	84a8983a 	sll	r20,r16,r18
    b070:	2148b03a 	or	r4,r4,r5
    b074:	2080042e 	bgeu	r4,r2,b088 <__umoddi3+0x47c>
    b078:	24c9883a 	add	r4,r4,r19
    b07c:	24c00236 	bltu	r4,r19,b088 <__umoddi3+0x47c>
    b080:	2080012e 	bgeu	r4,r2,b088 <__umoddi3+0x47c>
    b084:	24c9883a 	add	r4,r4,r19
    b088:	20a3c83a 	sub	r17,r4,r2
    b08c:	b00b883a 	mov	r5,r22
    b090:	8809883a 	mov	r4,r17
    b094:	000b2a00 	call	b2a0 <__umodsi3>
    b098:	102f883a 	mov	r23,r2
    b09c:	8809883a 	mov	r4,r17
    b0a0:	b00b883a 	mov	r5,r22
    b0a4:	000b23c0 	call	b23c <__udivsi3>
    b0a8:	b82e943a 	slli	r23,r23,16
    b0ac:	a885383a 	mul	r2,r21,r2
    b0b0:	e13fffcc 	andi	r4,fp,65535
    b0b4:	25c8b03a 	or	r4,r4,r23
    b0b8:	2080042e 	bgeu	r4,r2,b0cc <__umoddi3+0x4c0>
    b0bc:	24c9883a 	add	r4,r4,r19
    b0c0:	24c00236 	bltu	r4,r19,b0cc <__umoddi3+0x4c0>
    b0c4:	2080012e 	bgeu	r4,r2,b0cc <__umoddi3+0x4c0>
    b0c8:	24c9883a 	add	r4,r4,r19
    b0cc:	20a3c83a 	sub	r17,r4,r2
    b0d0:	003f4806 	br	adf4 <__umoddi3+0x1e8>
    b0d4:	2c8fc83a 	sub	r7,r5,r18
    b0d8:	1545c83a 	sub	r2,r2,r21
    b0dc:	29cb803a 	cmpltu	r5,r5,r7
    b0e0:	1145c83a 	sub	r2,r2,r5
    b0e4:	4089c83a 	sub	r4,r8,r2
    b0e8:	003fc706 	br	b008 <__umoddi3+0x3fc>
    b0ec:	01000604 	movi	r4,24
    b0f0:	003f1806 	br	ad54 <__umoddi3+0x148>
    b0f4:	00800604 	movi	r2,24
    b0f8:	003f3206 	br	adc4 <__umoddi3+0x1b8>
    b0fc:	01000604 	movi	r4,24
    b100:	003ed906 	br	ac68 <__umoddi3+0x5c>
    b104:	413fa52e 	bgeu	r8,r4,af9c <__umoddi3+0x390>
    b108:	297fff84 	addi	r5,r5,-2
    b10c:	4551883a 	add	r8,r8,r21
    b110:	003fa306 	br	afa0 <__umoddi3+0x394>
    b114:	15ff8b2e 	bgeu	r2,r23,af44 <__umoddi3+0x338>
    b118:	31bfff84 	addi	r6,r6,-2
    b11c:	1545883a 	add	r2,r2,r21
    b120:	003f8906 	br	af48 <__umoddi3+0x33c>
    b124:	24c9883a 	add	r4,r4,r19
    b128:	003eee06 	br	ace4 <__umoddi3+0xd8>
    b12c:	8005883a 	mov	r2,r16
    b130:	003f1706 	br	ad90 <__umoddi3+0x184>
    b134:	817fe736 	bltu	r16,r5,b0d4 <__umoddi3+0x4c8>
    b138:	280f883a 	mov	r7,r5
    b13c:	0009883a 	mov	r4,zero
    b140:	003fb106 	br	b008 <__umoddi3+0x3fc>

0000b144 <__divsi3>:
    b144:	20001b16 	blt	r4,zero,b1b4 <__divsi3+0x70>
    b148:	000f883a 	mov	r7,zero
    b14c:	28001616 	blt	r5,zero,b1a8 <__divsi3+0x64>
    b150:	200d883a 	mov	r6,r4
    b154:	29001a2e 	bgeu	r5,r4,b1c0 <__divsi3+0x7c>
    b158:	00800804 	movi	r2,32
    b15c:	00c00044 	movi	r3,1
    b160:	00000106 	br	b168 <__divsi3+0x24>
    b164:	10000d26 	beq	r2,zero,b19c <__divsi3+0x58>
    b168:	294b883a 	add	r5,r5,r5
    b16c:	10bfffc4 	addi	r2,r2,-1
    b170:	18c7883a 	add	r3,r3,r3
    b174:	293ffb36 	bltu	r5,r4,b164 <__divsi3+0x20>
    b178:	0005883a 	mov	r2,zero
    b17c:	18000726 	beq	r3,zero,b19c <__divsi3+0x58>
    b180:	0005883a 	mov	r2,zero
    b184:	31400236 	bltu	r6,r5,b190 <__divsi3+0x4c>
    b188:	314dc83a 	sub	r6,r6,r5
    b18c:	10c4b03a 	or	r2,r2,r3
    b190:	1806d07a 	srli	r3,r3,1
    b194:	280ad07a 	srli	r5,r5,1
    b198:	183ffa1e 	bne	r3,zero,b184 <__divsi3+0x40>
    b19c:	38000126 	beq	r7,zero,b1a4 <__divsi3+0x60>
    b1a0:	0085c83a 	sub	r2,zero,r2
    b1a4:	f800283a 	ret
    b1a8:	014bc83a 	sub	r5,zero,r5
    b1ac:	39c0005c 	xori	r7,r7,1
    b1b0:	003fe706 	br	b150 <__divsi3+0xc>
    b1b4:	0109c83a 	sub	r4,zero,r4
    b1b8:	01c00044 	movi	r7,1
    b1bc:	003fe306 	br	b14c <__divsi3+0x8>
    b1c0:	00c00044 	movi	r3,1
    b1c4:	003fee06 	br	b180 <__divsi3+0x3c>

0000b1c8 <__modsi3>:
    b1c8:	20001716 	blt	r4,zero,b228 <__modsi3+0x60>
    b1cc:	000f883a 	mov	r7,zero
    b1d0:	2005883a 	mov	r2,r4
    b1d4:	28001216 	blt	r5,zero,b220 <__modsi3+0x58>
    b1d8:	2900162e 	bgeu	r5,r4,b234 <__modsi3+0x6c>
    b1dc:	01800804 	movi	r6,32
    b1e0:	00c00044 	movi	r3,1
    b1e4:	00000106 	br	b1ec <__modsi3+0x24>
    b1e8:	30000a26 	beq	r6,zero,b214 <__modsi3+0x4c>
    b1ec:	294b883a 	add	r5,r5,r5
    b1f0:	31bfffc4 	addi	r6,r6,-1
    b1f4:	18c7883a 	add	r3,r3,r3
    b1f8:	293ffb36 	bltu	r5,r4,b1e8 <__modsi3+0x20>
    b1fc:	18000526 	beq	r3,zero,b214 <__modsi3+0x4c>
    b200:	1806d07a 	srli	r3,r3,1
    b204:	11400136 	bltu	r2,r5,b20c <__modsi3+0x44>
    b208:	1145c83a 	sub	r2,r2,r5
    b20c:	280ad07a 	srli	r5,r5,1
    b210:	183ffb1e 	bne	r3,zero,b200 <__modsi3+0x38>
    b214:	38000126 	beq	r7,zero,b21c <__modsi3+0x54>
    b218:	0085c83a 	sub	r2,zero,r2
    b21c:	f800283a 	ret
    b220:	014bc83a 	sub	r5,zero,r5
    b224:	003fec06 	br	b1d8 <__modsi3+0x10>
    b228:	0109c83a 	sub	r4,zero,r4
    b22c:	01c00044 	movi	r7,1
    b230:	003fe706 	br	b1d0 <__modsi3+0x8>
    b234:	00c00044 	movi	r3,1
    b238:	003ff106 	br	b200 <__modsi3+0x38>

0000b23c <__udivsi3>:
    b23c:	200d883a 	mov	r6,r4
    b240:	2900152e 	bgeu	r5,r4,b298 <__udivsi3+0x5c>
    b244:	28001416 	blt	r5,zero,b298 <__udivsi3+0x5c>
    b248:	00800804 	movi	r2,32
    b24c:	00c00044 	movi	r3,1
    b250:	00000206 	br	b25c <__udivsi3+0x20>
    b254:	10000e26 	beq	r2,zero,b290 <__udivsi3+0x54>
    b258:	28000516 	blt	r5,zero,b270 <__udivsi3+0x34>
    b25c:	294b883a 	add	r5,r5,r5
    b260:	10bfffc4 	addi	r2,r2,-1
    b264:	18c7883a 	add	r3,r3,r3
    b268:	293ffa36 	bltu	r5,r4,b254 <__udivsi3+0x18>
    b26c:	18000826 	beq	r3,zero,b290 <__udivsi3+0x54>
    b270:	0005883a 	mov	r2,zero
    b274:	31400236 	bltu	r6,r5,b280 <__udivsi3+0x44>
    b278:	314dc83a 	sub	r6,r6,r5
    b27c:	10c4b03a 	or	r2,r2,r3
    b280:	1806d07a 	srli	r3,r3,1
    b284:	280ad07a 	srli	r5,r5,1
    b288:	183ffa1e 	bne	r3,zero,b274 <__udivsi3+0x38>
    b28c:	f800283a 	ret
    b290:	0005883a 	mov	r2,zero
    b294:	f800283a 	ret
    b298:	00c00044 	movi	r3,1
    b29c:	003ff406 	br	b270 <__udivsi3+0x34>

0000b2a0 <__umodsi3>:
    b2a0:	2005883a 	mov	r2,r4
    b2a4:	2900122e 	bgeu	r5,r4,b2f0 <__umodsi3+0x50>
    b2a8:	28001116 	blt	r5,zero,b2f0 <__umodsi3+0x50>
    b2ac:	01800804 	movi	r6,32
    b2b0:	00c00044 	movi	r3,1
    b2b4:	00000206 	br	b2c0 <__umodsi3+0x20>
    b2b8:	30000c26 	beq	r6,zero,b2ec <__umodsi3+0x4c>
    b2bc:	28000516 	blt	r5,zero,b2d4 <__umodsi3+0x34>
    b2c0:	294b883a 	add	r5,r5,r5
    b2c4:	31bfffc4 	addi	r6,r6,-1
    b2c8:	18c7883a 	add	r3,r3,r3
    b2cc:	293ffa36 	bltu	r5,r4,b2b8 <__umodsi3+0x18>
    b2d0:	18000626 	beq	r3,zero,b2ec <__umodsi3+0x4c>
    b2d4:	1806d07a 	srli	r3,r3,1
    b2d8:	11400136 	bltu	r2,r5,b2e0 <__umodsi3+0x40>
    b2dc:	1145c83a 	sub	r2,r2,r5
    b2e0:	280ad07a 	srli	r5,r5,1
    b2e4:	183ffb1e 	bne	r3,zero,b2d4 <__umodsi3+0x34>
    b2e8:	f800283a 	ret
    b2ec:	f800283a 	ret
    b2f0:	00c00044 	movi	r3,1
    b2f4:	003ff706 	br	b2d4 <__umodsi3+0x34>

0000b2f8 <__adddf3>:
    b2f8:	02c00434 	movhi	r11,16
    b2fc:	5affffc4 	addi	r11,r11,-1
    b300:	2806d7fa 	srli	r3,r5,31
    b304:	2ad4703a 	and	r10,r5,r11
    b308:	3ad2703a 	and	r9,r7,r11
    b30c:	3804d53a 	srli	r2,r7,20
    b310:	3018d77a 	srli	r12,r6,29
    b314:	280ad53a 	srli	r5,r5,20
    b318:	501490fa 	slli	r10,r10,3
    b31c:	2010d77a 	srli	r8,r4,29
    b320:	481290fa 	slli	r9,r9,3
    b324:	380ed7fa 	srli	r7,r7,31
    b328:	defffb04 	addi	sp,sp,-20
    b32c:	dc800215 	stw	r18,8(sp)
    b330:	dc400115 	stw	r17,4(sp)
    b334:	dc000015 	stw	r16,0(sp)
    b338:	dfc00415 	stw	ra,16(sp)
    b33c:	dcc00315 	stw	r19,12(sp)
    b340:	1c803fcc 	andi	r18,r3,255
    b344:	2c01ffcc 	andi	r16,r5,2047
    b348:	5210b03a 	or	r8,r10,r8
    b34c:	202290fa 	slli	r17,r4,3
    b350:	1081ffcc 	andi	r2,r2,2047
    b354:	4b12b03a 	or	r9,r9,r12
    b358:	300c90fa 	slli	r6,r6,3
    b35c:	91c07526 	beq	r18,r7,b534 <__adddf3+0x23c>
    b360:	8087c83a 	sub	r3,r16,r2
    b364:	00c0ab0e 	bge	zero,r3,b614 <__adddf3+0x31c>
    b368:	10002a1e 	bne	r2,zero,b414 <__adddf3+0x11c>
    b36c:	4984b03a 	or	r2,r9,r6
    b370:	1000961e 	bne	r2,zero,b5cc <__adddf3+0x2d4>
    b374:	888001cc 	andi	r2,r17,7
    b378:	10000726 	beq	r2,zero,b398 <__adddf3+0xa0>
    b37c:	888003cc 	andi	r2,r17,15
    b380:	00c00104 	movi	r3,4
    b384:	10c00426 	beq	r2,r3,b398 <__adddf3+0xa0>
    b388:	88c7883a 	add	r3,r17,r3
    b38c:	1c63803a 	cmpltu	r17,r3,r17
    b390:	4451883a 	add	r8,r8,r17
    b394:	1823883a 	mov	r17,r3
    b398:	4080202c 	andhi	r2,r8,128
    b39c:	10005926 	beq	r2,zero,b504 <__adddf3+0x20c>
    b3a0:	84000044 	addi	r16,r16,1
    b3a4:	0081ffc4 	movi	r2,2047
    b3a8:	8080ba26 	beq	r16,r2,b694 <__adddf3+0x39c>
    b3ac:	00bfe034 	movhi	r2,65408
    b3b0:	10bfffc4 	addi	r2,r2,-1
    b3b4:	4090703a 	and	r8,r8,r2
    b3b8:	4004977a 	slli	r2,r8,29
    b3bc:	4010927a 	slli	r8,r8,9
    b3c0:	8822d0fa 	srli	r17,r17,3
    b3c4:	8401ffcc 	andi	r16,r16,2047
    b3c8:	4010d33a 	srli	r8,r8,12
    b3cc:	9007883a 	mov	r3,r18
    b3d0:	1444b03a 	or	r2,r2,r17
    b3d4:	8401ffcc 	andi	r16,r16,2047
    b3d8:	8020953a 	slli	r16,r16,20
    b3dc:	18c03fcc 	andi	r3,r3,255
    b3e0:	01000434 	movhi	r4,16
    b3e4:	213fffc4 	addi	r4,r4,-1
    b3e8:	180697fa 	slli	r3,r3,31
    b3ec:	4110703a 	and	r8,r8,r4
    b3f0:	4410b03a 	or	r8,r8,r16
    b3f4:	40c6b03a 	or	r3,r8,r3
    b3f8:	dfc00417 	ldw	ra,16(sp)
    b3fc:	dcc00317 	ldw	r19,12(sp)
    b400:	dc800217 	ldw	r18,8(sp)
    b404:	dc400117 	ldw	r17,4(sp)
    b408:	dc000017 	ldw	r16,0(sp)
    b40c:	dec00504 	addi	sp,sp,20
    b410:	f800283a 	ret
    b414:	0081ffc4 	movi	r2,2047
    b418:	80bfd626 	beq	r16,r2,b374 <__adddf3+0x7c>
    b41c:	4a402034 	orhi	r9,r9,128
    b420:	00800e04 	movi	r2,56
    b424:	10c09f16 	blt	r2,r3,b6a4 <__adddf3+0x3ac>
    b428:	008007c4 	movi	r2,31
    b42c:	10c0c216 	blt	r2,r3,b738 <__adddf3+0x440>
    b430:	00800804 	movi	r2,32
    b434:	10c5c83a 	sub	r2,r2,r3
    b438:	488a983a 	sll	r5,r9,r2
    b43c:	30c8d83a 	srl	r4,r6,r3
    b440:	3084983a 	sll	r2,r6,r2
    b444:	48c6d83a 	srl	r3,r9,r3
    b448:	290cb03a 	or	r6,r5,r4
    b44c:	1004c03a 	cmpne	r2,r2,zero
    b450:	308cb03a 	or	r6,r6,r2
    b454:	898dc83a 	sub	r6,r17,r6
    b458:	89a3803a 	cmpltu	r17,r17,r6
    b45c:	40d1c83a 	sub	r8,r8,r3
    b460:	4451c83a 	sub	r8,r8,r17
    b464:	3023883a 	mov	r17,r6
    b468:	4080202c 	andhi	r2,r8,128
    b46c:	10002326 	beq	r2,zero,b4fc <__adddf3+0x204>
    b470:	04c02034 	movhi	r19,128
    b474:	9cffffc4 	addi	r19,r19,-1
    b478:	44e6703a 	and	r19,r8,r19
    b47c:	98007626 	beq	r19,zero,b658 <__adddf3+0x360>
    b480:	9809883a 	mov	r4,r19
    b484:	000d8fc0 	call	d8fc <__clzsi2>
    b488:	10fffe04 	addi	r3,r2,-8
    b48c:	010007c4 	movi	r4,31
    b490:	20c07716 	blt	r4,r3,b670 <__adddf3+0x378>
    b494:	00800804 	movi	r2,32
    b498:	10c5c83a 	sub	r2,r2,r3
    b49c:	8884d83a 	srl	r2,r17,r2
    b4a0:	98d0983a 	sll	r8,r19,r3
    b4a4:	88e2983a 	sll	r17,r17,r3
    b4a8:	1204b03a 	or	r2,r2,r8
    b4ac:	1c007416 	blt	r3,r16,b680 <__adddf3+0x388>
    b4b0:	1c21c83a 	sub	r16,r3,r16
    b4b4:	82000044 	addi	r8,r16,1
    b4b8:	00c007c4 	movi	r3,31
    b4bc:	1a009116 	blt	r3,r8,b704 <__adddf3+0x40c>
    b4c0:	00c00804 	movi	r3,32
    b4c4:	1a07c83a 	sub	r3,r3,r8
    b4c8:	8a08d83a 	srl	r4,r17,r8
    b4cc:	88e2983a 	sll	r17,r17,r3
    b4d0:	10c6983a 	sll	r3,r2,r3
    b4d4:	1210d83a 	srl	r8,r2,r8
    b4d8:	8804c03a 	cmpne	r2,r17,zero
    b4dc:	1906b03a 	or	r3,r3,r4
    b4e0:	18a2b03a 	or	r17,r3,r2
    b4e4:	0021883a 	mov	r16,zero
    b4e8:	003fa206 	br	b374 <__adddf3+0x7c>
    b4ec:	1890b03a 	or	r8,r3,r2
    b4f0:	40017d26 	beq	r8,zero,bae8 <__adddf3+0x7f0>
    b4f4:	1011883a 	mov	r8,r2
    b4f8:	1823883a 	mov	r17,r3
    b4fc:	888001cc 	andi	r2,r17,7
    b500:	103f9e1e 	bne	r2,zero,b37c <__adddf3+0x84>
    b504:	4004977a 	slli	r2,r8,29
    b508:	8822d0fa 	srli	r17,r17,3
    b50c:	4010d0fa 	srli	r8,r8,3
    b510:	9007883a 	mov	r3,r18
    b514:	1444b03a 	or	r2,r2,r17
    b518:	0101ffc4 	movi	r4,2047
    b51c:	81002426 	beq	r16,r4,b5b0 <__adddf3+0x2b8>
    b520:	8120703a 	and	r16,r16,r4
    b524:	01000434 	movhi	r4,16
    b528:	213fffc4 	addi	r4,r4,-1
    b52c:	4110703a 	and	r8,r8,r4
    b530:	003fa806 	br	b3d4 <__adddf3+0xdc>
    b534:	8089c83a 	sub	r4,r16,r2
    b538:	01005e0e 	bge	zero,r4,b6b4 <__adddf3+0x3bc>
    b53c:	10002b26 	beq	r2,zero,b5ec <__adddf3+0x2f4>
    b540:	0081ffc4 	movi	r2,2047
    b544:	80bf8b26 	beq	r16,r2,b374 <__adddf3+0x7c>
    b548:	4a402034 	orhi	r9,r9,128
    b54c:	00800e04 	movi	r2,56
    b550:	1100a40e 	bge	r2,r4,b7e4 <__adddf3+0x4ec>
    b554:	498cb03a 	or	r6,r9,r6
    b558:	300ac03a 	cmpne	r5,r6,zero
    b55c:	0013883a 	mov	r9,zero
    b560:	2c4b883a 	add	r5,r5,r17
    b564:	2c63803a 	cmpltu	r17,r5,r17
    b568:	4a11883a 	add	r8,r9,r8
    b56c:	8a11883a 	add	r8,r17,r8
    b570:	2823883a 	mov	r17,r5
    b574:	4080202c 	andhi	r2,r8,128
    b578:	103fe026 	beq	r2,zero,b4fc <__adddf3+0x204>
    b57c:	84000044 	addi	r16,r16,1
    b580:	0081ffc4 	movi	r2,2047
    b584:	8080d226 	beq	r16,r2,b8d0 <__adddf3+0x5d8>
    b588:	00bfe034 	movhi	r2,65408
    b58c:	10bfffc4 	addi	r2,r2,-1
    b590:	4090703a 	and	r8,r8,r2
    b594:	880ad07a 	srli	r5,r17,1
    b598:	400897fa 	slli	r4,r8,31
    b59c:	88c0004c 	andi	r3,r17,1
    b5a0:	28e2b03a 	or	r17,r5,r3
    b5a4:	4010d07a 	srli	r8,r8,1
    b5a8:	2462b03a 	or	r17,r4,r17
    b5ac:	003f7106 	br	b374 <__adddf3+0x7c>
    b5b0:	4088b03a 	or	r4,r8,r2
    b5b4:	20014526 	beq	r4,zero,bacc <__adddf3+0x7d4>
    b5b8:	01000434 	movhi	r4,16
    b5bc:	42000234 	orhi	r8,r8,8
    b5c0:	213fffc4 	addi	r4,r4,-1
    b5c4:	4110703a 	and	r8,r8,r4
    b5c8:	003f8206 	br	b3d4 <__adddf3+0xdc>
    b5cc:	18ffffc4 	addi	r3,r3,-1
    b5d0:	1800491e 	bne	r3,zero,b6f8 <__adddf3+0x400>
    b5d4:	898bc83a 	sub	r5,r17,r6
    b5d8:	8963803a 	cmpltu	r17,r17,r5
    b5dc:	4251c83a 	sub	r8,r8,r9
    b5e0:	4451c83a 	sub	r8,r8,r17
    b5e4:	2823883a 	mov	r17,r5
    b5e8:	003f9f06 	br	b468 <__adddf3+0x170>
    b5ec:	4984b03a 	or	r2,r9,r6
    b5f0:	103f6026 	beq	r2,zero,b374 <__adddf3+0x7c>
    b5f4:	213fffc4 	addi	r4,r4,-1
    b5f8:	2000931e 	bne	r4,zero,b848 <__adddf3+0x550>
    b5fc:	898d883a 	add	r6,r17,r6
    b600:	3463803a 	cmpltu	r17,r6,r17
    b604:	4251883a 	add	r8,r8,r9
    b608:	8a11883a 	add	r8,r17,r8
    b60c:	3023883a 	mov	r17,r6
    b610:	003fd806 	br	b574 <__adddf3+0x27c>
    b614:	1800541e 	bne	r3,zero,b768 <__adddf3+0x470>
    b618:	80800044 	addi	r2,r16,1
    b61c:	1081ffcc 	andi	r2,r2,2047
    b620:	00c00044 	movi	r3,1
    b624:	1880a00e 	bge	r3,r2,b8a8 <__adddf3+0x5b0>
    b628:	8989c83a 	sub	r4,r17,r6
    b62c:	8905803a 	cmpltu	r2,r17,r4
    b630:	4267c83a 	sub	r19,r8,r9
    b634:	98a7c83a 	sub	r19,r19,r2
    b638:	9880202c 	andhi	r2,r19,128
    b63c:	10006326 	beq	r2,zero,b7cc <__adddf3+0x4d4>
    b640:	3463c83a 	sub	r17,r6,r17
    b644:	4a07c83a 	sub	r3,r9,r8
    b648:	344d803a 	cmpltu	r6,r6,r17
    b64c:	19a7c83a 	sub	r19,r3,r6
    b650:	3825883a 	mov	r18,r7
    b654:	983f8a1e 	bne	r19,zero,b480 <__adddf3+0x188>
    b658:	8809883a 	mov	r4,r17
    b65c:	000d8fc0 	call	d8fc <__clzsi2>
    b660:	10800804 	addi	r2,r2,32
    b664:	10fffe04 	addi	r3,r2,-8
    b668:	010007c4 	movi	r4,31
    b66c:	20ff890e 	bge	r4,r3,b494 <__adddf3+0x19c>
    b670:	10bff604 	addi	r2,r2,-40
    b674:	8884983a 	sll	r2,r17,r2
    b678:	0023883a 	mov	r17,zero
    b67c:	1c3f8c0e 	bge	r3,r16,b4b0 <__adddf3+0x1b8>
    b680:	023fe034 	movhi	r8,65408
    b684:	423fffc4 	addi	r8,r8,-1
    b688:	80e1c83a 	sub	r16,r16,r3
    b68c:	1210703a 	and	r8,r2,r8
    b690:	003f3806 	br	b374 <__adddf3+0x7c>
    b694:	9007883a 	mov	r3,r18
    b698:	0011883a 	mov	r8,zero
    b69c:	0005883a 	mov	r2,zero
    b6a0:	003f4c06 	br	b3d4 <__adddf3+0xdc>
    b6a4:	498cb03a 	or	r6,r9,r6
    b6a8:	300cc03a 	cmpne	r6,r6,zero
    b6ac:	0007883a 	mov	r3,zero
    b6b0:	003f6806 	br	b454 <__adddf3+0x15c>
    b6b4:	20009c1e 	bne	r4,zero,b928 <__adddf3+0x630>
    b6b8:	80800044 	addi	r2,r16,1
    b6bc:	1141ffcc 	andi	r5,r2,2047
    b6c0:	01000044 	movi	r4,1
    b6c4:	2140670e 	bge	r4,r5,b864 <__adddf3+0x56c>
    b6c8:	0101ffc4 	movi	r4,2047
    b6cc:	11007f26 	beq	r2,r4,b8cc <__adddf3+0x5d4>
    b6d0:	898d883a 	add	r6,r17,r6
    b6d4:	4247883a 	add	r3,r8,r9
    b6d8:	3451803a 	cmpltu	r8,r6,r17
    b6dc:	40d1883a 	add	r8,r8,r3
    b6e0:	402297fa 	slli	r17,r8,31
    b6e4:	300cd07a 	srli	r6,r6,1
    b6e8:	4010d07a 	srli	r8,r8,1
    b6ec:	1021883a 	mov	r16,r2
    b6f0:	89a2b03a 	or	r17,r17,r6
    b6f4:	003f1f06 	br	b374 <__adddf3+0x7c>
    b6f8:	0081ffc4 	movi	r2,2047
    b6fc:	80bf481e 	bne	r16,r2,b420 <__adddf3+0x128>
    b700:	003f1c06 	br	b374 <__adddf3+0x7c>
    b704:	843ff844 	addi	r16,r16,-31
    b708:	01000804 	movi	r4,32
    b70c:	1406d83a 	srl	r3,r2,r16
    b710:	41005026 	beq	r8,r4,b854 <__adddf3+0x55c>
    b714:	01001004 	movi	r4,64
    b718:	2211c83a 	sub	r8,r4,r8
    b71c:	1204983a 	sll	r2,r2,r8
    b720:	88a2b03a 	or	r17,r17,r2
    b724:	8822c03a 	cmpne	r17,r17,zero
    b728:	1c62b03a 	or	r17,r3,r17
    b72c:	0011883a 	mov	r8,zero
    b730:	0021883a 	mov	r16,zero
    b734:	003f7106 	br	b4fc <__adddf3+0x204>
    b738:	193ff804 	addi	r4,r3,-32
    b73c:	00800804 	movi	r2,32
    b740:	4908d83a 	srl	r4,r9,r4
    b744:	18804526 	beq	r3,r2,b85c <__adddf3+0x564>
    b748:	00801004 	movi	r2,64
    b74c:	10c5c83a 	sub	r2,r2,r3
    b750:	4886983a 	sll	r3,r9,r2
    b754:	198cb03a 	or	r6,r3,r6
    b758:	300cc03a 	cmpne	r6,r6,zero
    b75c:	218cb03a 	or	r6,r4,r6
    b760:	0007883a 	mov	r3,zero
    b764:	003f3b06 	br	b454 <__adddf3+0x15c>
    b768:	80002a26 	beq	r16,zero,b814 <__adddf3+0x51c>
    b76c:	0101ffc4 	movi	r4,2047
    b770:	11006826 	beq	r2,r4,b914 <__adddf3+0x61c>
    b774:	00c7c83a 	sub	r3,zero,r3
    b778:	42002034 	orhi	r8,r8,128
    b77c:	01000e04 	movi	r4,56
    b780:	20c07c16 	blt	r4,r3,b974 <__adddf3+0x67c>
    b784:	010007c4 	movi	r4,31
    b788:	20c0da16 	blt	r4,r3,baf4 <__adddf3+0x7fc>
    b78c:	01000804 	movi	r4,32
    b790:	20c9c83a 	sub	r4,r4,r3
    b794:	4114983a 	sll	r10,r8,r4
    b798:	88cad83a 	srl	r5,r17,r3
    b79c:	8908983a 	sll	r4,r17,r4
    b7a0:	40c6d83a 	srl	r3,r8,r3
    b7a4:	5162b03a 	or	r17,r10,r5
    b7a8:	2008c03a 	cmpne	r4,r4,zero
    b7ac:	8922b03a 	or	r17,r17,r4
    b7b0:	3463c83a 	sub	r17,r6,r17
    b7b4:	48c7c83a 	sub	r3,r9,r3
    b7b8:	344d803a 	cmpltu	r6,r6,r17
    b7bc:	1991c83a 	sub	r8,r3,r6
    b7c0:	1021883a 	mov	r16,r2
    b7c4:	3825883a 	mov	r18,r7
    b7c8:	003f2706 	br	b468 <__adddf3+0x170>
    b7cc:	24d0b03a 	or	r8,r4,r19
    b7d0:	40001b1e 	bne	r8,zero,b840 <__adddf3+0x548>
    b7d4:	0005883a 	mov	r2,zero
    b7d8:	0007883a 	mov	r3,zero
    b7dc:	0021883a 	mov	r16,zero
    b7e0:	003f4d06 	br	b518 <__adddf3+0x220>
    b7e4:	008007c4 	movi	r2,31
    b7e8:	11003c16 	blt	r2,r4,b8dc <__adddf3+0x5e4>
    b7ec:	00800804 	movi	r2,32
    b7f0:	1105c83a 	sub	r2,r2,r4
    b7f4:	488e983a 	sll	r7,r9,r2
    b7f8:	310ad83a 	srl	r5,r6,r4
    b7fc:	3084983a 	sll	r2,r6,r2
    b800:	4912d83a 	srl	r9,r9,r4
    b804:	394ab03a 	or	r5,r7,r5
    b808:	1004c03a 	cmpne	r2,r2,zero
    b80c:	288ab03a 	or	r5,r5,r2
    b810:	003f5306 	br	b560 <__adddf3+0x268>
    b814:	4448b03a 	or	r4,r8,r17
    b818:	20003e26 	beq	r4,zero,b914 <__adddf3+0x61c>
    b81c:	00c6303a 	nor	r3,zero,r3
    b820:	18003a1e 	bne	r3,zero,b90c <__adddf3+0x614>
    b824:	3463c83a 	sub	r17,r6,r17
    b828:	4a07c83a 	sub	r3,r9,r8
    b82c:	344d803a 	cmpltu	r6,r6,r17
    b830:	1991c83a 	sub	r8,r3,r6
    b834:	1021883a 	mov	r16,r2
    b838:	3825883a 	mov	r18,r7
    b83c:	003f0a06 	br	b468 <__adddf3+0x170>
    b840:	2023883a 	mov	r17,r4
    b844:	003f0d06 	br	b47c <__adddf3+0x184>
    b848:	0081ffc4 	movi	r2,2047
    b84c:	80bf3f1e 	bne	r16,r2,b54c <__adddf3+0x254>
    b850:	003ec806 	br	b374 <__adddf3+0x7c>
    b854:	0005883a 	mov	r2,zero
    b858:	003fb106 	br	b720 <__adddf3+0x428>
    b85c:	0007883a 	mov	r3,zero
    b860:	003fbc06 	br	b754 <__adddf3+0x45c>
    b864:	4444b03a 	or	r2,r8,r17
    b868:	8000871e 	bne	r16,zero,ba88 <__adddf3+0x790>
    b86c:	1000ba26 	beq	r2,zero,bb58 <__adddf3+0x860>
    b870:	4984b03a 	or	r2,r9,r6
    b874:	103ebf26 	beq	r2,zero,b374 <__adddf3+0x7c>
    b878:	8985883a 	add	r2,r17,r6
    b87c:	4247883a 	add	r3,r8,r9
    b880:	1451803a 	cmpltu	r8,r2,r17
    b884:	40d1883a 	add	r8,r8,r3
    b888:	40c0202c 	andhi	r3,r8,128
    b88c:	1023883a 	mov	r17,r2
    b890:	183f1a26 	beq	r3,zero,b4fc <__adddf3+0x204>
    b894:	00bfe034 	movhi	r2,65408
    b898:	10bfffc4 	addi	r2,r2,-1
    b89c:	2021883a 	mov	r16,r4
    b8a0:	4090703a 	and	r8,r8,r2
    b8a4:	003eb306 	br	b374 <__adddf3+0x7c>
    b8a8:	4444b03a 	or	r2,r8,r17
    b8ac:	8000291e 	bne	r16,zero,b954 <__adddf3+0x65c>
    b8b0:	10004b1e 	bne	r2,zero,b9e0 <__adddf3+0x6e8>
    b8b4:	4990b03a 	or	r8,r9,r6
    b8b8:	40008b26 	beq	r8,zero,bae8 <__adddf3+0x7f0>
    b8bc:	4811883a 	mov	r8,r9
    b8c0:	3023883a 	mov	r17,r6
    b8c4:	3825883a 	mov	r18,r7
    b8c8:	003eaa06 	br	b374 <__adddf3+0x7c>
    b8cc:	1021883a 	mov	r16,r2
    b8d0:	0011883a 	mov	r8,zero
    b8d4:	0005883a 	mov	r2,zero
    b8d8:	003f0f06 	br	b518 <__adddf3+0x220>
    b8dc:	217ff804 	addi	r5,r4,-32
    b8e0:	00800804 	movi	r2,32
    b8e4:	494ad83a 	srl	r5,r9,r5
    b8e8:	20807d26 	beq	r4,r2,bae0 <__adddf3+0x7e8>
    b8ec:	00801004 	movi	r2,64
    b8f0:	1109c83a 	sub	r4,r2,r4
    b8f4:	4912983a 	sll	r9,r9,r4
    b8f8:	498cb03a 	or	r6,r9,r6
    b8fc:	300cc03a 	cmpne	r6,r6,zero
    b900:	298ab03a 	or	r5,r5,r6
    b904:	0013883a 	mov	r9,zero
    b908:	003f1506 	br	b560 <__adddf3+0x268>
    b90c:	0101ffc4 	movi	r4,2047
    b910:	113f9a1e 	bne	r2,r4,b77c <__adddf3+0x484>
    b914:	4811883a 	mov	r8,r9
    b918:	3023883a 	mov	r17,r6
    b91c:	1021883a 	mov	r16,r2
    b920:	3825883a 	mov	r18,r7
    b924:	003e9306 	br	b374 <__adddf3+0x7c>
    b928:	8000161e 	bne	r16,zero,b984 <__adddf3+0x68c>
    b92c:	444ab03a 	or	r5,r8,r17
    b930:	28005126 	beq	r5,zero,ba78 <__adddf3+0x780>
    b934:	0108303a 	nor	r4,zero,r4
    b938:	20004d1e 	bne	r4,zero,ba70 <__adddf3+0x778>
    b93c:	89a3883a 	add	r17,r17,r6
    b940:	4253883a 	add	r9,r8,r9
    b944:	898d803a 	cmpltu	r6,r17,r6
    b948:	3251883a 	add	r8,r6,r9
    b94c:	1021883a 	mov	r16,r2
    b950:	003f0806 	br	b574 <__adddf3+0x27c>
    b954:	1000301e 	bne	r2,zero,ba18 <__adddf3+0x720>
    b958:	4984b03a 	or	r2,r9,r6
    b95c:	10007126 	beq	r2,zero,bb24 <__adddf3+0x82c>
    b960:	4811883a 	mov	r8,r9
    b964:	3023883a 	mov	r17,r6
    b968:	3825883a 	mov	r18,r7
    b96c:	0401ffc4 	movi	r16,2047
    b970:	003e8006 	br	b374 <__adddf3+0x7c>
    b974:	4462b03a 	or	r17,r8,r17
    b978:	8822c03a 	cmpne	r17,r17,zero
    b97c:	0007883a 	mov	r3,zero
    b980:	003f8b06 	br	b7b0 <__adddf3+0x4b8>
    b984:	0141ffc4 	movi	r5,2047
    b988:	11403b26 	beq	r2,r5,ba78 <__adddf3+0x780>
    b98c:	0109c83a 	sub	r4,zero,r4
    b990:	42002034 	orhi	r8,r8,128
    b994:	01400e04 	movi	r5,56
    b998:	29006716 	blt	r5,r4,bb38 <__adddf3+0x840>
    b99c:	014007c4 	movi	r5,31
    b9a0:	29007016 	blt	r5,r4,bb64 <__adddf3+0x86c>
    b9a4:	01400804 	movi	r5,32
    b9a8:	290bc83a 	sub	r5,r5,r4
    b9ac:	4154983a 	sll	r10,r8,r5
    b9b0:	890ed83a 	srl	r7,r17,r4
    b9b4:	894a983a 	sll	r5,r17,r5
    b9b8:	4108d83a 	srl	r4,r8,r4
    b9bc:	51e2b03a 	or	r17,r10,r7
    b9c0:	280ac03a 	cmpne	r5,r5,zero
    b9c4:	8962b03a 	or	r17,r17,r5
    b9c8:	89a3883a 	add	r17,r17,r6
    b9cc:	2253883a 	add	r9,r4,r9
    b9d0:	898d803a 	cmpltu	r6,r17,r6
    b9d4:	3251883a 	add	r8,r6,r9
    b9d8:	1021883a 	mov	r16,r2
    b9dc:	003ee506 	br	b574 <__adddf3+0x27c>
    b9e0:	4984b03a 	or	r2,r9,r6
    b9e4:	103e6326 	beq	r2,zero,b374 <__adddf3+0x7c>
    b9e8:	8987c83a 	sub	r3,r17,r6
    b9ec:	88c9803a 	cmpltu	r4,r17,r3
    b9f0:	4245c83a 	sub	r2,r8,r9
    b9f4:	1105c83a 	sub	r2,r2,r4
    b9f8:	1100202c 	andhi	r4,r2,128
    b9fc:	203ebb26 	beq	r4,zero,b4ec <__adddf3+0x1f4>
    ba00:	3463c83a 	sub	r17,r6,r17
    ba04:	4a07c83a 	sub	r3,r9,r8
    ba08:	344d803a 	cmpltu	r6,r6,r17
    ba0c:	1991c83a 	sub	r8,r3,r6
    ba10:	3825883a 	mov	r18,r7
    ba14:	003e5706 	br	b374 <__adddf3+0x7c>
    ba18:	4984b03a 	or	r2,r9,r6
    ba1c:	10002e26 	beq	r2,zero,bad8 <__adddf3+0x7e0>
    ba20:	4004d0fa 	srli	r2,r8,3
    ba24:	8822d0fa 	srli	r17,r17,3
    ba28:	4010977a 	slli	r8,r8,29
    ba2c:	10c0022c 	andhi	r3,r2,8
    ba30:	4462b03a 	or	r17,r8,r17
    ba34:	18000826 	beq	r3,zero,ba58 <__adddf3+0x760>
    ba38:	4808d0fa 	srli	r4,r9,3
    ba3c:	20c0022c 	andhi	r3,r4,8
    ba40:	1800051e 	bne	r3,zero,ba58 <__adddf3+0x760>
    ba44:	300cd0fa 	srli	r6,r6,3
    ba48:	4806977a 	slli	r3,r9,29
    ba4c:	2005883a 	mov	r2,r4
    ba50:	3825883a 	mov	r18,r7
    ba54:	19a2b03a 	or	r17,r3,r6
    ba58:	8810d77a 	srli	r8,r17,29
    ba5c:	100490fa 	slli	r2,r2,3
    ba60:	882290fa 	slli	r17,r17,3
    ba64:	0401ffc4 	movi	r16,2047
    ba68:	4090b03a 	or	r8,r8,r2
    ba6c:	003e4106 	br	b374 <__adddf3+0x7c>
    ba70:	0141ffc4 	movi	r5,2047
    ba74:	117fc71e 	bne	r2,r5,b994 <__adddf3+0x69c>
    ba78:	4811883a 	mov	r8,r9
    ba7c:	3023883a 	mov	r17,r6
    ba80:	1021883a 	mov	r16,r2
    ba84:	003e3b06 	br	b374 <__adddf3+0x7c>
    ba88:	10002f26 	beq	r2,zero,bb48 <__adddf3+0x850>
    ba8c:	4984b03a 	or	r2,r9,r6
    ba90:	10001126 	beq	r2,zero,bad8 <__adddf3+0x7e0>
    ba94:	4004d0fa 	srli	r2,r8,3
    ba98:	8822d0fa 	srli	r17,r17,3
    ba9c:	4010977a 	slli	r8,r8,29
    baa0:	10c0022c 	andhi	r3,r2,8
    baa4:	4462b03a 	or	r17,r8,r17
    baa8:	183feb26 	beq	r3,zero,ba58 <__adddf3+0x760>
    baac:	4808d0fa 	srli	r4,r9,3
    bab0:	20c0022c 	andhi	r3,r4,8
    bab4:	183fe81e 	bne	r3,zero,ba58 <__adddf3+0x760>
    bab8:	300cd0fa 	srli	r6,r6,3
    babc:	4806977a 	slli	r3,r9,29
    bac0:	2005883a 	mov	r2,r4
    bac4:	19a2b03a 	or	r17,r3,r6
    bac8:	003fe306 	br	ba58 <__adddf3+0x760>
    bacc:	0011883a 	mov	r8,zero
    bad0:	0005883a 	mov	r2,zero
    bad4:	003e3f06 	br	b3d4 <__adddf3+0xdc>
    bad8:	0401ffc4 	movi	r16,2047
    badc:	003e2506 	br	b374 <__adddf3+0x7c>
    bae0:	0013883a 	mov	r9,zero
    bae4:	003f8406 	br	b8f8 <__adddf3+0x600>
    bae8:	0005883a 	mov	r2,zero
    baec:	0007883a 	mov	r3,zero
    baf0:	003e8906 	br	b518 <__adddf3+0x220>
    baf4:	197ff804 	addi	r5,r3,-32
    baf8:	01000804 	movi	r4,32
    bafc:	414ad83a 	srl	r5,r8,r5
    bb00:	19002426 	beq	r3,r4,bb94 <__adddf3+0x89c>
    bb04:	01001004 	movi	r4,64
    bb08:	20c7c83a 	sub	r3,r4,r3
    bb0c:	40c6983a 	sll	r3,r8,r3
    bb10:	1c46b03a 	or	r3,r3,r17
    bb14:	1806c03a 	cmpne	r3,r3,zero
    bb18:	28e2b03a 	or	r17,r5,r3
    bb1c:	0007883a 	mov	r3,zero
    bb20:	003f2306 	br	b7b0 <__adddf3+0x4b8>
    bb24:	0007883a 	mov	r3,zero
    bb28:	5811883a 	mov	r8,r11
    bb2c:	00bfffc4 	movi	r2,-1
    bb30:	0401ffc4 	movi	r16,2047
    bb34:	003e7806 	br	b518 <__adddf3+0x220>
    bb38:	4462b03a 	or	r17,r8,r17
    bb3c:	8822c03a 	cmpne	r17,r17,zero
    bb40:	0009883a 	mov	r4,zero
    bb44:	003fa006 	br	b9c8 <__adddf3+0x6d0>
    bb48:	4811883a 	mov	r8,r9
    bb4c:	3023883a 	mov	r17,r6
    bb50:	0401ffc4 	movi	r16,2047
    bb54:	003e0706 	br	b374 <__adddf3+0x7c>
    bb58:	4811883a 	mov	r8,r9
    bb5c:	3023883a 	mov	r17,r6
    bb60:	003e0406 	br	b374 <__adddf3+0x7c>
    bb64:	21fff804 	addi	r7,r4,-32
    bb68:	01400804 	movi	r5,32
    bb6c:	41ced83a 	srl	r7,r8,r7
    bb70:	21400a26 	beq	r4,r5,bb9c <__adddf3+0x8a4>
    bb74:	01401004 	movi	r5,64
    bb78:	2909c83a 	sub	r4,r5,r4
    bb7c:	4108983a 	sll	r4,r8,r4
    bb80:	2448b03a 	or	r4,r4,r17
    bb84:	2008c03a 	cmpne	r4,r4,zero
    bb88:	3922b03a 	or	r17,r7,r4
    bb8c:	0009883a 	mov	r4,zero
    bb90:	003f8d06 	br	b9c8 <__adddf3+0x6d0>
    bb94:	0007883a 	mov	r3,zero
    bb98:	003fdd06 	br	bb10 <__adddf3+0x818>
    bb9c:	0009883a 	mov	r4,zero
    bba0:	003ff706 	br	bb80 <__adddf3+0x888>

0000bba4 <__divdf3>:
    bba4:	defff204 	addi	sp,sp,-56
    bba8:	dd400915 	stw	r21,36(sp)
    bbac:	282ad53a 	srli	r21,r5,20
    bbb0:	dd000815 	stw	r20,32(sp)
    bbb4:	2828d7fa 	srli	r20,r5,31
    bbb8:	dc000415 	stw	r16,16(sp)
    bbbc:	04000434 	movhi	r16,16
    bbc0:	df000c15 	stw	fp,48(sp)
    bbc4:	843fffc4 	addi	r16,r16,-1
    bbc8:	dfc00d15 	stw	ra,52(sp)
    bbcc:	ddc00b15 	stw	r23,44(sp)
    bbd0:	dd800a15 	stw	r22,40(sp)
    bbd4:	dcc00715 	stw	r19,28(sp)
    bbd8:	dc800615 	stw	r18,24(sp)
    bbdc:	dc400515 	stw	r17,20(sp)
    bbe0:	ad41ffcc 	andi	r21,r21,2047
    bbe4:	2c20703a 	and	r16,r5,r16
    bbe8:	a7003fcc 	andi	fp,r20,255
    bbec:	a8006126 	beq	r21,zero,bd74 <__divdf3+0x1d0>
    bbf0:	0081ffc4 	movi	r2,2047
    bbf4:	2025883a 	mov	r18,r4
    bbf8:	a8803726 	beq	r21,r2,bcd8 <__divdf3+0x134>
    bbfc:	80800434 	orhi	r2,r16,16
    bc00:	100490fa 	slli	r2,r2,3
    bc04:	2020d77a 	srli	r16,r4,29
    bc08:	202490fa 	slli	r18,r4,3
    bc0c:	ad7f0044 	addi	r21,r21,-1023
    bc10:	80a0b03a 	or	r16,r16,r2
    bc14:	0027883a 	mov	r19,zero
    bc18:	0013883a 	mov	r9,zero
    bc1c:	3804d53a 	srli	r2,r7,20
    bc20:	382cd7fa 	srli	r22,r7,31
    bc24:	04400434 	movhi	r17,16
    bc28:	8c7fffc4 	addi	r17,r17,-1
    bc2c:	1081ffcc 	andi	r2,r2,2047
    bc30:	3011883a 	mov	r8,r6
    bc34:	3c62703a 	and	r17,r7,r17
    bc38:	b5c03fcc 	andi	r23,r22,255
    bc3c:	10006c26 	beq	r2,zero,bdf0 <__divdf3+0x24c>
    bc40:	00c1ffc4 	movi	r3,2047
    bc44:	10c06426 	beq	r2,r3,bdd8 <__divdf3+0x234>
    bc48:	88c00434 	orhi	r3,r17,16
    bc4c:	180690fa 	slli	r3,r3,3
    bc50:	3022d77a 	srli	r17,r6,29
    bc54:	301090fa 	slli	r8,r6,3
    bc58:	10bf0044 	addi	r2,r2,-1023
    bc5c:	88e2b03a 	or	r17,r17,r3
    bc60:	000f883a 	mov	r7,zero
    bc64:	a58cf03a 	xor	r6,r20,r22
    bc68:	3cc8b03a 	or	r4,r7,r19
    bc6c:	a8abc83a 	sub	r21,r21,r2
    bc70:	008003c4 	movi	r2,15
    bc74:	3007883a 	mov	r3,r6
    bc78:	34c03fcc 	andi	r19,r6,255
    bc7c:	11009036 	bltu	r2,r4,bec0 <__divdf3+0x31c>
    bc80:	200890ba 	slli	r4,r4,2
    bc84:	00800074 	movhi	r2,1
    bc88:	10af2604 	addi	r2,r2,-17256
    bc8c:	2089883a 	add	r4,r4,r2
    bc90:	20800017 	ldw	r2,0(r4)
    bc94:	1000683a 	jmp	r2
    bc98:	0000bec0 	call	bec <VGA_box+0x9c>
    bc9c:	0000bd10 	cmplti	zero,zero,756
    bca0:	0000beb0 	cmpltui	zero,zero,762
    bca4:	0000bd04 	movi	zero,756
    bca8:	0000beb0 	cmpltui	zero,zero,762
    bcac:	0000be84 	movi	zero,762
    bcb0:	0000beb0 	cmpltui	zero,zero,762
    bcb4:	0000bd04 	movi	zero,756
    bcb8:	0000bd10 	cmplti	zero,zero,756
    bcbc:	0000bd10 	cmplti	zero,zero,756
    bcc0:	0000be84 	movi	zero,762
    bcc4:	0000bd04 	movi	zero,756
    bcc8:	0000bcf4 	movhi	zero,755
    bccc:	0000bcf4 	movhi	zero,755
    bcd0:	0000bcf4 	movhi	zero,755
    bcd4:	0000c1a4 	muli	zero,zero,774
    bcd8:	2404b03a 	or	r2,r4,r16
    bcdc:	1000661e 	bne	r2,zero,be78 <__divdf3+0x2d4>
    bce0:	04c00204 	movi	r19,8
    bce4:	0021883a 	mov	r16,zero
    bce8:	0025883a 	mov	r18,zero
    bcec:	02400084 	movi	r9,2
    bcf0:	003fca06 	br	bc1c <__divdf3+0x78>
    bcf4:	8023883a 	mov	r17,r16
    bcf8:	9011883a 	mov	r8,r18
    bcfc:	e02f883a 	mov	r23,fp
    bd00:	480f883a 	mov	r7,r9
    bd04:	00800084 	movi	r2,2
    bd08:	3881311e 	bne	r7,r2,c1d0 <__divdf3+0x62c>
    bd0c:	b827883a 	mov	r19,r23
    bd10:	98c0004c 	andi	r3,r19,1
    bd14:	0081ffc4 	movi	r2,2047
    bd18:	000b883a 	mov	r5,zero
    bd1c:	0025883a 	mov	r18,zero
    bd20:	1004953a 	slli	r2,r2,20
    bd24:	18c03fcc 	andi	r3,r3,255
    bd28:	04400434 	movhi	r17,16
    bd2c:	8c7fffc4 	addi	r17,r17,-1
    bd30:	180697fa 	slli	r3,r3,31
    bd34:	2c4a703a 	and	r5,r5,r17
    bd38:	288ab03a 	or	r5,r5,r2
    bd3c:	28c6b03a 	or	r3,r5,r3
    bd40:	9005883a 	mov	r2,r18
    bd44:	dfc00d17 	ldw	ra,52(sp)
    bd48:	df000c17 	ldw	fp,48(sp)
    bd4c:	ddc00b17 	ldw	r23,44(sp)
    bd50:	dd800a17 	ldw	r22,40(sp)
    bd54:	dd400917 	ldw	r21,36(sp)
    bd58:	dd000817 	ldw	r20,32(sp)
    bd5c:	dcc00717 	ldw	r19,28(sp)
    bd60:	dc800617 	ldw	r18,24(sp)
    bd64:	dc400517 	ldw	r17,20(sp)
    bd68:	dc000417 	ldw	r16,16(sp)
    bd6c:	dec00e04 	addi	sp,sp,56
    bd70:	f800283a 	ret
    bd74:	2404b03a 	or	r2,r4,r16
    bd78:	2027883a 	mov	r19,r4
    bd7c:	10003926 	beq	r2,zero,be64 <__divdf3+0x2c0>
    bd80:	80012e26 	beq	r16,zero,c23c <__divdf3+0x698>
    bd84:	8009883a 	mov	r4,r16
    bd88:	d9800315 	stw	r6,12(sp)
    bd8c:	d9c00215 	stw	r7,8(sp)
    bd90:	000d8fc0 	call	d8fc <__clzsi2>
    bd94:	d9800317 	ldw	r6,12(sp)
    bd98:	d9c00217 	ldw	r7,8(sp)
    bd9c:	113ffd44 	addi	r4,r2,-11
    bda0:	00c00704 	movi	r3,28
    bda4:	19012116 	blt	r3,r4,c22c <__divdf3+0x688>
    bda8:	00c00744 	movi	r3,29
    bdac:	147ffe04 	addi	r17,r2,-8
    bdb0:	1907c83a 	sub	r3,r3,r4
    bdb4:	8460983a 	sll	r16,r16,r17
    bdb8:	98c6d83a 	srl	r3,r19,r3
    bdbc:	9c64983a 	sll	r18,r19,r17
    bdc0:	1c20b03a 	or	r16,r3,r16
    bdc4:	1080fcc4 	addi	r2,r2,1011
    bdc8:	00abc83a 	sub	r21,zero,r2
    bdcc:	0027883a 	mov	r19,zero
    bdd0:	0013883a 	mov	r9,zero
    bdd4:	003f9106 	br	bc1c <__divdf3+0x78>
    bdd8:	3446b03a 	or	r3,r6,r17
    bddc:	18001f1e 	bne	r3,zero,be5c <__divdf3+0x2b8>
    bde0:	0023883a 	mov	r17,zero
    bde4:	0011883a 	mov	r8,zero
    bde8:	01c00084 	movi	r7,2
    bdec:	003f9d06 	br	bc64 <__divdf3+0xc0>
    bdf0:	3446b03a 	or	r3,r6,r17
    bdf4:	18001526 	beq	r3,zero,be4c <__divdf3+0x2a8>
    bdf8:	88011b26 	beq	r17,zero,c268 <__divdf3+0x6c4>
    bdfc:	8809883a 	mov	r4,r17
    be00:	d9800315 	stw	r6,12(sp)
    be04:	da400115 	stw	r9,4(sp)
    be08:	000d8fc0 	call	d8fc <__clzsi2>
    be0c:	d9800317 	ldw	r6,12(sp)
    be10:	da400117 	ldw	r9,4(sp)
    be14:	113ffd44 	addi	r4,r2,-11
    be18:	00c00704 	movi	r3,28
    be1c:	19010e16 	blt	r3,r4,c258 <__divdf3+0x6b4>
    be20:	00c00744 	movi	r3,29
    be24:	123ffe04 	addi	r8,r2,-8
    be28:	1907c83a 	sub	r3,r3,r4
    be2c:	8a22983a 	sll	r17,r17,r8
    be30:	30c6d83a 	srl	r3,r6,r3
    be34:	3210983a 	sll	r8,r6,r8
    be38:	1c62b03a 	or	r17,r3,r17
    be3c:	1080fcc4 	addi	r2,r2,1011
    be40:	0085c83a 	sub	r2,zero,r2
    be44:	000f883a 	mov	r7,zero
    be48:	003f8606 	br	bc64 <__divdf3+0xc0>
    be4c:	0023883a 	mov	r17,zero
    be50:	0011883a 	mov	r8,zero
    be54:	01c00044 	movi	r7,1
    be58:	003f8206 	br	bc64 <__divdf3+0xc0>
    be5c:	01c000c4 	movi	r7,3
    be60:	003f8006 	br	bc64 <__divdf3+0xc0>
    be64:	04c00104 	movi	r19,4
    be68:	0021883a 	mov	r16,zero
    be6c:	0025883a 	mov	r18,zero
    be70:	02400044 	movi	r9,1
    be74:	003f6906 	br	bc1c <__divdf3+0x78>
    be78:	04c00304 	movi	r19,12
    be7c:	024000c4 	movi	r9,3
    be80:	003f6606 	br	bc1c <__divdf3+0x78>
    be84:	01400434 	movhi	r5,16
    be88:	0007883a 	mov	r3,zero
    be8c:	297fffc4 	addi	r5,r5,-1
    be90:	04bfffc4 	movi	r18,-1
    be94:	0081ffc4 	movi	r2,2047
    be98:	003fa106 	br	bd20 <__divdf3+0x17c>
    be9c:	00c00044 	movi	r3,1
    bea0:	1887c83a 	sub	r3,r3,r2
    bea4:	01000e04 	movi	r4,56
    bea8:	20c1210e 	bge	r4,r3,c330 <__divdf3+0x78c>
    beac:	98c0004c 	andi	r3,r19,1
    beb0:	0005883a 	mov	r2,zero
    beb4:	000b883a 	mov	r5,zero
    beb8:	0025883a 	mov	r18,zero
    bebc:	003f9806 	br	bd20 <__divdf3+0x17c>
    bec0:	8c00fd36 	bltu	r17,r16,c2b8 <__divdf3+0x714>
    bec4:	8440fb26 	beq	r16,r17,c2b4 <__divdf3+0x710>
    bec8:	8007883a 	mov	r3,r16
    becc:	ad7fffc4 	addi	r21,r21,-1
    bed0:	0021883a 	mov	r16,zero
    bed4:	4004d63a 	srli	r2,r8,24
    bed8:	8822923a 	slli	r17,r17,8
    bedc:	1809883a 	mov	r4,r3
    bee0:	402c923a 	slli	r22,r8,8
    bee4:	88b8b03a 	or	fp,r17,r2
    bee8:	e028d43a 	srli	r20,fp,16
    beec:	d8c00015 	stw	r3,0(sp)
    bef0:	e5ffffcc 	andi	r23,fp,65535
    bef4:	a00b883a 	mov	r5,r20
    bef8:	000b23c0 	call	b23c <__udivsi3>
    befc:	d8c00017 	ldw	r3,0(sp)
    bf00:	a00b883a 	mov	r5,r20
    bf04:	d8800315 	stw	r2,12(sp)
    bf08:	1809883a 	mov	r4,r3
    bf0c:	000b2a00 	call	b2a0 <__umodsi3>
    bf10:	d9800317 	ldw	r6,12(sp)
    bf14:	1006943a 	slli	r3,r2,16
    bf18:	9004d43a 	srli	r2,r18,16
    bf1c:	b9a3383a 	mul	r17,r23,r6
    bf20:	10c4b03a 	or	r2,r2,r3
    bf24:	1440062e 	bgeu	r2,r17,bf40 <__divdf3+0x39c>
    bf28:	1705883a 	add	r2,r2,fp
    bf2c:	30ffffc4 	addi	r3,r6,-1
    bf30:	1700ee36 	bltu	r2,fp,c2ec <__divdf3+0x748>
    bf34:	1440ed2e 	bgeu	r2,r17,c2ec <__divdf3+0x748>
    bf38:	31bfff84 	addi	r6,r6,-2
    bf3c:	1705883a 	add	r2,r2,fp
    bf40:	1463c83a 	sub	r17,r2,r17
    bf44:	a00b883a 	mov	r5,r20
    bf48:	8809883a 	mov	r4,r17
    bf4c:	d9800315 	stw	r6,12(sp)
    bf50:	000b23c0 	call	b23c <__udivsi3>
    bf54:	a00b883a 	mov	r5,r20
    bf58:	8809883a 	mov	r4,r17
    bf5c:	d8800215 	stw	r2,8(sp)
    bf60:	000b2a00 	call	b2a0 <__umodsi3>
    bf64:	d9c00217 	ldw	r7,8(sp)
    bf68:	1004943a 	slli	r2,r2,16
    bf6c:	94bfffcc 	andi	r18,r18,65535
    bf70:	b9d1383a 	mul	r8,r23,r7
    bf74:	90a4b03a 	or	r18,r18,r2
    bf78:	d9800317 	ldw	r6,12(sp)
    bf7c:	9200062e 	bgeu	r18,r8,bf98 <__divdf3+0x3f4>
    bf80:	9725883a 	add	r18,r18,fp
    bf84:	38bfffc4 	addi	r2,r7,-1
    bf88:	9700d636 	bltu	r18,fp,c2e4 <__divdf3+0x740>
    bf8c:	9200d52e 	bgeu	r18,r8,c2e4 <__divdf3+0x740>
    bf90:	39ffff84 	addi	r7,r7,-2
    bf94:	9725883a 	add	r18,r18,fp
    bf98:	3004943a 	slli	r2,r6,16
    bf9c:	b012d43a 	srli	r9,r22,16
    bfa0:	b1bfffcc 	andi	r6,r22,65535
    bfa4:	11e2b03a 	or	r17,r2,r7
    bfa8:	8806d43a 	srli	r3,r17,16
    bfac:	893fffcc 	andi	r4,r17,65535
    bfb0:	218b383a 	mul	r5,r4,r6
    bfb4:	30c5383a 	mul	r2,r6,r3
    bfb8:	2249383a 	mul	r4,r4,r9
    bfbc:	280ed43a 	srli	r7,r5,16
    bfc0:	9225c83a 	sub	r18,r18,r8
    bfc4:	2089883a 	add	r4,r4,r2
    bfc8:	3909883a 	add	r4,r7,r4
    bfcc:	1a47383a 	mul	r3,r3,r9
    bfd0:	2080022e 	bgeu	r4,r2,bfdc <__divdf3+0x438>
    bfd4:	00800074 	movhi	r2,1
    bfd8:	1887883a 	add	r3,r3,r2
    bfdc:	2004d43a 	srli	r2,r4,16
    bfe0:	2008943a 	slli	r4,r4,16
    bfe4:	297fffcc 	andi	r5,r5,65535
    bfe8:	10c7883a 	add	r3,r2,r3
    bfec:	2149883a 	add	r4,r4,r5
    bff0:	90c0a536 	bltu	r18,r3,c288 <__divdf3+0x6e4>
    bff4:	90c0bf26 	beq	r18,r3,c2f4 <__divdf3+0x750>
    bff8:	90c7c83a 	sub	r3,r18,r3
    bffc:	810fc83a 	sub	r7,r16,r4
    c000:	81e5803a 	cmpltu	r18,r16,r7
    c004:	1ca5c83a 	sub	r18,r3,r18
    c008:	e480c126 	beq	fp,r18,c310 <__divdf3+0x76c>
    c00c:	a00b883a 	mov	r5,r20
    c010:	9009883a 	mov	r4,r18
    c014:	d9800315 	stw	r6,12(sp)
    c018:	d9c00215 	stw	r7,8(sp)
    c01c:	da400115 	stw	r9,4(sp)
    c020:	000b23c0 	call	b23c <__udivsi3>
    c024:	a00b883a 	mov	r5,r20
    c028:	9009883a 	mov	r4,r18
    c02c:	d8800015 	stw	r2,0(sp)
    c030:	000b2a00 	call	b2a0 <__umodsi3>
    c034:	d9c00217 	ldw	r7,8(sp)
    c038:	da000017 	ldw	r8,0(sp)
    c03c:	1006943a 	slli	r3,r2,16
    c040:	3804d43a 	srli	r2,r7,16
    c044:	ba21383a 	mul	r16,r23,r8
    c048:	d9800317 	ldw	r6,12(sp)
    c04c:	10c4b03a 	or	r2,r2,r3
    c050:	da400117 	ldw	r9,4(sp)
    c054:	1400062e 	bgeu	r2,r16,c070 <__divdf3+0x4cc>
    c058:	1705883a 	add	r2,r2,fp
    c05c:	40ffffc4 	addi	r3,r8,-1
    c060:	1700ad36 	bltu	r2,fp,c318 <__divdf3+0x774>
    c064:	1400ac2e 	bgeu	r2,r16,c318 <__divdf3+0x774>
    c068:	423fff84 	addi	r8,r8,-2
    c06c:	1705883a 	add	r2,r2,fp
    c070:	1421c83a 	sub	r16,r2,r16
    c074:	a00b883a 	mov	r5,r20
    c078:	8009883a 	mov	r4,r16
    c07c:	d9800315 	stw	r6,12(sp)
    c080:	d9c00215 	stw	r7,8(sp)
    c084:	da000015 	stw	r8,0(sp)
    c088:	da400115 	stw	r9,4(sp)
    c08c:	000b23c0 	call	b23c <__udivsi3>
    c090:	8009883a 	mov	r4,r16
    c094:	a00b883a 	mov	r5,r20
    c098:	1025883a 	mov	r18,r2
    c09c:	000b2a00 	call	b2a0 <__umodsi3>
    c0a0:	d9c00217 	ldw	r7,8(sp)
    c0a4:	1004943a 	slli	r2,r2,16
    c0a8:	bcaf383a 	mul	r23,r23,r18
    c0ac:	393fffcc 	andi	r4,r7,65535
    c0b0:	2088b03a 	or	r4,r4,r2
    c0b4:	d9800317 	ldw	r6,12(sp)
    c0b8:	da000017 	ldw	r8,0(sp)
    c0bc:	da400117 	ldw	r9,4(sp)
    c0c0:	25c0062e 	bgeu	r4,r23,c0dc <__divdf3+0x538>
    c0c4:	2709883a 	add	r4,r4,fp
    c0c8:	90bfffc4 	addi	r2,r18,-1
    c0cc:	27009436 	bltu	r4,fp,c320 <__divdf3+0x77c>
    c0d0:	25c0932e 	bgeu	r4,r23,c320 <__divdf3+0x77c>
    c0d4:	94bfff84 	addi	r18,r18,-2
    c0d8:	2709883a 	add	r4,r4,fp
    c0dc:	4004943a 	slli	r2,r8,16
    c0e0:	25efc83a 	sub	r23,r4,r23
    c0e4:	1490b03a 	or	r8,r2,r18
    c0e8:	4008d43a 	srli	r4,r8,16
    c0ec:	40ffffcc 	andi	r3,r8,65535
    c0f0:	30c5383a 	mul	r2,r6,r3
    c0f4:	1a47383a 	mul	r3,r3,r9
    c0f8:	310d383a 	mul	r6,r6,r4
    c0fc:	100ad43a 	srli	r5,r2,16
    c100:	4913383a 	mul	r9,r9,r4
    c104:	1987883a 	add	r3,r3,r6
    c108:	28c7883a 	add	r3,r5,r3
    c10c:	1980022e 	bgeu	r3,r6,c118 <__divdf3+0x574>
    c110:	01000074 	movhi	r4,1
    c114:	4913883a 	add	r9,r9,r4
    c118:	1808d43a 	srli	r4,r3,16
    c11c:	1806943a 	slli	r3,r3,16
    c120:	10bfffcc 	andi	r2,r2,65535
    c124:	2253883a 	add	r9,r4,r9
    c128:	1887883a 	add	r3,r3,r2
    c12c:	ba403836 	bltu	r23,r9,c210 <__divdf3+0x66c>
    c130:	ba403626 	beq	r23,r9,c20c <__divdf3+0x668>
    c134:	42000054 	ori	r8,r8,1
    c138:	a880ffc4 	addi	r2,r21,1023
    c13c:	00bf570e 	bge	zero,r2,be9c <__divdf3+0x2f8>
    c140:	40c001cc 	andi	r3,r8,7
    c144:	18000726 	beq	r3,zero,c164 <__divdf3+0x5c0>
    c148:	40c003cc 	andi	r3,r8,15
    c14c:	01000104 	movi	r4,4
    c150:	19000426 	beq	r3,r4,c164 <__divdf3+0x5c0>
    c154:	4107883a 	add	r3,r8,r4
    c158:	1a11803a 	cmpltu	r8,r3,r8
    c15c:	8a23883a 	add	r17,r17,r8
    c160:	1811883a 	mov	r8,r3
    c164:	88c0402c 	andhi	r3,r17,256
    c168:	18000426 	beq	r3,zero,c17c <__divdf3+0x5d8>
    c16c:	00ffc034 	movhi	r3,65280
    c170:	18ffffc4 	addi	r3,r3,-1
    c174:	a8810004 	addi	r2,r21,1024
    c178:	88e2703a 	and	r17,r17,r3
    c17c:	00c1ff84 	movi	r3,2046
    c180:	18bee316 	blt	r3,r2,bd10 <__divdf3+0x16c>
    c184:	8824977a 	slli	r18,r17,29
    c188:	4010d0fa 	srli	r8,r8,3
    c18c:	8822927a 	slli	r17,r17,9
    c190:	1081ffcc 	andi	r2,r2,2047
    c194:	9224b03a 	or	r18,r18,r8
    c198:	880ad33a 	srli	r5,r17,12
    c19c:	98c0004c 	andi	r3,r19,1
    c1a0:	003edf06 	br	bd20 <__divdf3+0x17c>
    c1a4:	8080022c 	andhi	r2,r16,8
    c1a8:	10001226 	beq	r2,zero,c1f4 <__divdf3+0x650>
    c1ac:	8880022c 	andhi	r2,r17,8
    c1b0:	1000101e 	bne	r2,zero,c1f4 <__divdf3+0x650>
    c1b4:	00800434 	movhi	r2,16
    c1b8:	89400234 	orhi	r5,r17,8
    c1bc:	10bfffc4 	addi	r2,r2,-1
    c1c0:	b007883a 	mov	r3,r22
    c1c4:	288a703a 	and	r5,r5,r2
    c1c8:	4025883a 	mov	r18,r8
    c1cc:	003f3106 	br	be94 <__divdf3+0x2f0>
    c1d0:	008000c4 	movi	r2,3
    c1d4:	3880a626 	beq	r7,r2,c470 <__divdf3+0x8cc>
    c1d8:	00800044 	movi	r2,1
    c1dc:	3880521e 	bne	r7,r2,c328 <__divdf3+0x784>
    c1e0:	b807883a 	mov	r3,r23
    c1e4:	0005883a 	mov	r2,zero
    c1e8:	000b883a 	mov	r5,zero
    c1ec:	0025883a 	mov	r18,zero
    c1f0:	003ecb06 	br	bd20 <__divdf3+0x17c>
    c1f4:	00800434 	movhi	r2,16
    c1f8:	81400234 	orhi	r5,r16,8
    c1fc:	10bfffc4 	addi	r2,r2,-1
    c200:	a007883a 	mov	r3,r20
    c204:	288a703a 	and	r5,r5,r2
    c208:	003f2206 	br	be94 <__divdf3+0x2f0>
    c20c:	183fca26 	beq	r3,zero,c138 <__divdf3+0x594>
    c210:	e5ef883a 	add	r23,fp,r23
    c214:	40bfffc4 	addi	r2,r8,-1
    c218:	bf00392e 	bgeu	r23,fp,c300 <__divdf3+0x75c>
    c21c:	1011883a 	mov	r8,r2
    c220:	ba7fc41e 	bne	r23,r9,c134 <__divdf3+0x590>
    c224:	b0ffc31e 	bne	r22,r3,c134 <__divdf3+0x590>
    c228:	003fc306 	br	c138 <__divdf3+0x594>
    c22c:	143ff604 	addi	r16,r2,-40
    c230:	9c20983a 	sll	r16,r19,r16
    c234:	0025883a 	mov	r18,zero
    c238:	003ee206 	br	bdc4 <__divdf3+0x220>
    c23c:	d9800315 	stw	r6,12(sp)
    c240:	d9c00215 	stw	r7,8(sp)
    c244:	000d8fc0 	call	d8fc <__clzsi2>
    c248:	10800804 	addi	r2,r2,32
    c24c:	d9c00217 	ldw	r7,8(sp)
    c250:	d9800317 	ldw	r6,12(sp)
    c254:	003ed106 	br	bd9c <__divdf3+0x1f8>
    c258:	147ff604 	addi	r17,r2,-40
    c25c:	3462983a 	sll	r17,r6,r17
    c260:	0011883a 	mov	r8,zero
    c264:	003ef506 	br	be3c <__divdf3+0x298>
    c268:	3009883a 	mov	r4,r6
    c26c:	d9800315 	stw	r6,12(sp)
    c270:	da400115 	stw	r9,4(sp)
    c274:	000d8fc0 	call	d8fc <__clzsi2>
    c278:	10800804 	addi	r2,r2,32
    c27c:	da400117 	ldw	r9,4(sp)
    c280:	d9800317 	ldw	r6,12(sp)
    c284:	003ee306 	br	be14 <__divdf3+0x270>
    c288:	85a1883a 	add	r16,r16,r22
    c28c:	8585803a 	cmpltu	r2,r16,r22
    c290:	1705883a 	add	r2,r2,fp
    c294:	14a5883a 	add	r18,r2,r18
    c298:	88bfffc4 	addi	r2,r17,-1
    c29c:	e4800c2e 	bgeu	fp,r18,c2d0 <__divdf3+0x72c>
    c2a0:	90c03e36 	bltu	r18,r3,c39c <__divdf3+0x7f8>
    c2a4:	1c806926 	beq	r3,r18,c44c <__divdf3+0x8a8>
    c2a8:	90c7c83a 	sub	r3,r18,r3
    c2ac:	1023883a 	mov	r17,r2
    c2b0:	003f5206 	br	bffc <__divdf3+0x458>
    c2b4:	923f0436 	bltu	r18,r8,bec8 <__divdf3+0x324>
    c2b8:	800897fa 	slli	r4,r16,31
    c2bc:	9004d07a 	srli	r2,r18,1
    c2c0:	8006d07a 	srli	r3,r16,1
    c2c4:	902097fa 	slli	r16,r18,31
    c2c8:	20a4b03a 	or	r18,r4,r2
    c2cc:	003f0106 	br	bed4 <__divdf3+0x330>
    c2d0:	e4bff51e 	bne	fp,r18,c2a8 <__divdf3+0x704>
    c2d4:	85bff22e 	bgeu	r16,r22,c2a0 <__divdf3+0x6fc>
    c2d8:	e0c7c83a 	sub	r3,fp,r3
    c2dc:	1023883a 	mov	r17,r2
    c2e0:	003f4606 	br	bffc <__divdf3+0x458>
    c2e4:	100f883a 	mov	r7,r2
    c2e8:	003f2b06 	br	bf98 <__divdf3+0x3f4>
    c2ec:	180d883a 	mov	r6,r3
    c2f0:	003f1306 	br	bf40 <__divdf3+0x39c>
    c2f4:	813fe436 	bltu	r16,r4,c288 <__divdf3+0x6e4>
    c2f8:	0007883a 	mov	r3,zero
    c2fc:	003f3f06 	br	bffc <__divdf3+0x458>
    c300:	ba402c36 	bltu	r23,r9,c3b4 <__divdf3+0x810>
    c304:	4dc05426 	beq	r9,r23,c458 <__divdf3+0x8b4>
    c308:	1011883a 	mov	r8,r2
    c30c:	003f8906 	br	c134 <__divdf3+0x590>
    c310:	023fffc4 	movi	r8,-1
    c314:	003f8806 	br	c138 <__divdf3+0x594>
    c318:	1811883a 	mov	r8,r3
    c31c:	003f5406 	br	c070 <__divdf3+0x4cc>
    c320:	1025883a 	mov	r18,r2
    c324:	003f6d06 	br	c0dc <__divdf3+0x538>
    c328:	b827883a 	mov	r19,r23
    c32c:	003f8206 	br	c138 <__divdf3+0x594>
    c330:	010007c4 	movi	r4,31
    c334:	20c02616 	blt	r4,r3,c3d0 <__divdf3+0x82c>
    c338:	00800804 	movi	r2,32
    c33c:	10c5c83a 	sub	r2,r2,r3
    c340:	888a983a 	sll	r5,r17,r2
    c344:	40c8d83a 	srl	r4,r8,r3
    c348:	4084983a 	sll	r2,r8,r2
    c34c:	88e2d83a 	srl	r17,r17,r3
    c350:	2906b03a 	or	r3,r5,r4
    c354:	1004c03a 	cmpne	r2,r2,zero
    c358:	1886b03a 	or	r3,r3,r2
    c35c:	188001cc 	andi	r2,r3,7
    c360:	10000726 	beq	r2,zero,c380 <__divdf3+0x7dc>
    c364:	188003cc 	andi	r2,r3,15
    c368:	01000104 	movi	r4,4
    c36c:	11000426 	beq	r2,r4,c380 <__divdf3+0x7dc>
    c370:	1805883a 	mov	r2,r3
    c374:	10c00104 	addi	r3,r2,4
    c378:	1885803a 	cmpltu	r2,r3,r2
    c37c:	88a3883a 	add	r17,r17,r2
    c380:	8880202c 	andhi	r2,r17,128
    c384:	10002726 	beq	r2,zero,c424 <__divdf3+0x880>
    c388:	98c0004c 	andi	r3,r19,1
    c38c:	00800044 	movi	r2,1
    c390:	000b883a 	mov	r5,zero
    c394:	0025883a 	mov	r18,zero
    c398:	003e6106 	br	bd20 <__divdf3+0x17c>
    c39c:	85a1883a 	add	r16,r16,r22
    c3a0:	8585803a 	cmpltu	r2,r16,r22
    c3a4:	1705883a 	add	r2,r2,fp
    c3a8:	14a5883a 	add	r18,r2,r18
    c3ac:	8c7fff84 	addi	r17,r17,-2
    c3b0:	003f1106 	br	bff8 <__divdf3+0x454>
    c3b4:	b589883a 	add	r4,r22,r22
    c3b8:	25ad803a 	cmpltu	r22,r4,r22
    c3bc:	b739883a 	add	fp,r22,fp
    c3c0:	40bfff84 	addi	r2,r8,-2
    c3c4:	bf2f883a 	add	r23,r23,fp
    c3c8:	202d883a 	mov	r22,r4
    c3cc:	003f9306 	br	c21c <__divdf3+0x678>
    c3d0:	013ff844 	movi	r4,-31
    c3d4:	2085c83a 	sub	r2,r4,r2
    c3d8:	8888d83a 	srl	r4,r17,r2
    c3dc:	00800804 	movi	r2,32
    c3e0:	18802126 	beq	r3,r2,c468 <__divdf3+0x8c4>
    c3e4:	00801004 	movi	r2,64
    c3e8:	10c5c83a 	sub	r2,r2,r3
    c3ec:	8884983a 	sll	r2,r17,r2
    c3f0:	1204b03a 	or	r2,r2,r8
    c3f4:	1004c03a 	cmpne	r2,r2,zero
    c3f8:	2084b03a 	or	r2,r4,r2
    c3fc:	144001cc 	andi	r17,r2,7
    c400:	88000d1e 	bne	r17,zero,c438 <__divdf3+0x894>
    c404:	000b883a 	mov	r5,zero
    c408:	1024d0fa 	srli	r18,r2,3
    c40c:	98c0004c 	andi	r3,r19,1
    c410:	0005883a 	mov	r2,zero
    c414:	9464b03a 	or	r18,r18,r17
    c418:	003e4106 	br	bd20 <__divdf3+0x17c>
    c41c:	1007883a 	mov	r3,r2
    c420:	0023883a 	mov	r17,zero
    c424:	880a927a 	slli	r5,r17,9
    c428:	1805883a 	mov	r2,r3
    c42c:	8822977a 	slli	r17,r17,29
    c430:	280ad33a 	srli	r5,r5,12
    c434:	003ff406 	br	c408 <__divdf3+0x864>
    c438:	10c003cc 	andi	r3,r2,15
    c43c:	01000104 	movi	r4,4
    c440:	193ff626 	beq	r3,r4,c41c <__divdf3+0x878>
    c444:	0023883a 	mov	r17,zero
    c448:	003fca06 	br	c374 <__divdf3+0x7d0>
    c44c:	813fd336 	bltu	r16,r4,c39c <__divdf3+0x7f8>
    c450:	1023883a 	mov	r17,r2
    c454:	003fa806 	br	c2f8 <__divdf3+0x754>
    c458:	b0ffd636 	bltu	r22,r3,c3b4 <__divdf3+0x810>
    c45c:	1011883a 	mov	r8,r2
    c460:	b0ff341e 	bne	r22,r3,c134 <__divdf3+0x590>
    c464:	003f3406 	br	c138 <__divdf3+0x594>
    c468:	0005883a 	mov	r2,zero
    c46c:	003fe006 	br	c3f0 <__divdf3+0x84c>
    c470:	00800434 	movhi	r2,16
    c474:	89400234 	orhi	r5,r17,8
    c478:	10bfffc4 	addi	r2,r2,-1
    c47c:	b807883a 	mov	r3,r23
    c480:	288a703a 	and	r5,r5,r2
    c484:	4025883a 	mov	r18,r8
    c488:	003e8206 	br	be94 <__divdf3+0x2f0>

0000c48c <__eqdf2>:
    c48c:	2804d53a 	srli	r2,r5,20
    c490:	3806d53a 	srli	r3,r7,20
    c494:	02000434 	movhi	r8,16
    c498:	423fffc4 	addi	r8,r8,-1
    c49c:	1081ffcc 	andi	r2,r2,2047
    c4a0:	0281ffc4 	movi	r10,2047
    c4a4:	2a12703a 	and	r9,r5,r8
    c4a8:	18c1ffcc 	andi	r3,r3,2047
    c4ac:	3a10703a 	and	r8,r7,r8
    c4b0:	280ad7fa 	srli	r5,r5,31
    c4b4:	380ed7fa 	srli	r7,r7,31
    c4b8:	12801026 	beq	r2,r10,c4fc <__eqdf2+0x70>
    c4bc:	0281ffc4 	movi	r10,2047
    c4c0:	1a800a26 	beq	r3,r10,c4ec <__eqdf2+0x60>
    c4c4:	10c00226 	beq	r2,r3,c4d0 <__eqdf2+0x44>
    c4c8:	00800044 	movi	r2,1
    c4cc:	f800283a 	ret
    c4d0:	4a3ffd1e 	bne	r9,r8,c4c8 <__eqdf2+0x3c>
    c4d4:	21bffc1e 	bne	r4,r6,c4c8 <__eqdf2+0x3c>
    c4d8:	29c00c26 	beq	r5,r7,c50c <__eqdf2+0x80>
    c4dc:	103ffa1e 	bne	r2,zero,c4c8 <__eqdf2+0x3c>
    c4e0:	2244b03a 	or	r2,r4,r9
    c4e4:	1004c03a 	cmpne	r2,r2,zero
    c4e8:	f800283a 	ret
    c4ec:	3214b03a 	or	r10,r6,r8
    c4f0:	503ff426 	beq	r10,zero,c4c4 <__eqdf2+0x38>
    c4f4:	00800044 	movi	r2,1
    c4f8:	f800283a 	ret
    c4fc:	2254b03a 	or	r10,r4,r9
    c500:	503fee26 	beq	r10,zero,c4bc <__eqdf2+0x30>
    c504:	00800044 	movi	r2,1
    c508:	f800283a 	ret
    c50c:	0005883a 	mov	r2,zero
    c510:	f800283a 	ret

0000c514 <__gedf2>:
    c514:	2804d53a 	srli	r2,r5,20
    c518:	3806d53a 	srli	r3,r7,20
    c51c:	02000434 	movhi	r8,16
    c520:	423fffc4 	addi	r8,r8,-1
    c524:	1081ffcc 	andi	r2,r2,2047
    c528:	0241ffc4 	movi	r9,2047
    c52c:	2a14703a 	and	r10,r5,r8
    c530:	18c1ffcc 	andi	r3,r3,2047
    c534:	3a10703a 	and	r8,r7,r8
    c538:	280ad7fa 	srli	r5,r5,31
    c53c:	380ed7fa 	srli	r7,r7,31
    c540:	12401d26 	beq	r2,r9,c5b8 <__gedf2+0xa4>
    c544:	0241ffc4 	movi	r9,2047
    c548:	1a401226 	beq	r3,r9,c594 <__gedf2+0x80>
    c54c:	1000081e 	bne	r2,zero,c570 <__gedf2+0x5c>
    c550:	2296b03a 	or	r11,r4,r10
    c554:	5813003a 	cmpeq	r9,r11,zero
    c558:	1800091e 	bne	r3,zero,c580 <__gedf2+0x6c>
    c55c:	3218b03a 	or	r12,r6,r8
    c560:	6000071e 	bne	r12,zero,c580 <__gedf2+0x6c>
    c564:	0005883a 	mov	r2,zero
    c568:	5800101e 	bne	r11,zero,c5ac <__gedf2+0x98>
    c56c:	f800283a 	ret
    c570:	18000c1e 	bne	r3,zero,c5a4 <__gedf2+0x90>
    c574:	3212b03a 	or	r9,r6,r8
    c578:	48000c26 	beq	r9,zero,c5ac <__gedf2+0x98>
    c57c:	0013883a 	mov	r9,zero
    c580:	39c03fcc 	andi	r7,r7,255
    c584:	48000826 	beq	r9,zero,c5a8 <__gedf2+0x94>
    c588:	38000926 	beq	r7,zero,c5b0 <__gedf2+0x9c>
    c58c:	00800044 	movi	r2,1
    c590:	f800283a 	ret
    c594:	3212b03a 	or	r9,r6,r8
    c598:	483fec26 	beq	r9,zero,c54c <__gedf2+0x38>
    c59c:	00bfff84 	movi	r2,-2
    c5a0:	f800283a 	ret
    c5a4:	39c03fcc 	andi	r7,r7,255
    c5a8:	29c00626 	beq	r5,r7,c5c4 <__gedf2+0xb0>
    c5ac:	283ff726 	beq	r5,zero,c58c <__gedf2+0x78>
    c5b0:	00bfffc4 	movi	r2,-1
    c5b4:	f800283a 	ret
    c5b8:	2292b03a 	or	r9,r4,r10
    c5bc:	483fe126 	beq	r9,zero,c544 <__gedf2+0x30>
    c5c0:	003ff606 	br	c59c <__gedf2+0x88>
    c5c4:	18bff916 	blt	r3,r2,c5ac <__gedf2+0x98>
    c5c8:	10c00316 	blt	r2,r3,c5d8 <__gedf2+0xc4>
    c5cc:	42bff736 	bltu	r8,r10,c5ac <__gedf2+0x98>
    c5d0:	52000326 	beq	r10,r8,c5e0 <__gedf2+0xcc>
    c5d4:	5200042e 	bgeu	r10,r8,c5e8 <__gedf2+0xd4>
    c5d8:	283fec1e 	bne	r5,zero,c58c <__gedf2+0x78>
    c5dc:	003ff406 	br	c5b0 <__gedf2+0x9c>
    c5e0:	313ff236 	bltu	r6,r4,c5ac <__gedf2+0x98>
    c5e4:	21bffc36 	bltu	r4,r6,c5d8 <__gedf2+0xc4>
    c5e8:	0005883a 	mov	r2,zero
    c5ec:	f800283a 	ret

0000c5f0 <__ledf2>:
    c5f0:	2804d53a 	srli	r2,r5,20
    c5f4:	3810d53a 	srli	r8,r7,20
    c5f8:	00c00434 	movhi	r3,16
    c5fc:	18ffffc4 	addi	r3,r3,-1
    c600:	1081ffcc 	andi	r2,r2,2047
    c604:	0241ffc4 	movi	r9,2047
    c608:	28d4703a 	and	r10,r5,r3
    c60c:	4201ffcc 	andi	r8,r8,2047
    c610:	38c6703a 	and	r3,r7,r3
    c614:	280ad7fa 	srli	r5,r5,31
    c618:	380ed7fa 	srli	r7,r7,31
    c61c:	12401f26 	beq	r2,r9,c69c <__ledf2+0xac>
    c620:	0241ffc4 	movi	r9,2047
    c624:	42401426 	beq	r8,r9,c678 <__ledf2+0x88>
    c628:	1000091e 	bne	r2,zero,c650 <__ledf2+0x60>
    c62c:	2296b03a 	or	r11,r4,r10
    c630:	5813003a 	cmpeq	r9,r11,zero
    c634:	29403fcc 	andi	r5,r5,255
    c638:	40000a1e 	bne	r8,zero,c664 <__ledf2+0x74>
    c63c:	30d8b03a 	or	r12,r6,r3
    c640:	6000081e 	bne	r12,zero,c664 <__ledf2+0x74>
    c644:	0005883a 	mov	r2,zero
    c648:	5800111e 	bne	r11,zero,c690 <__ledf2+0xa0>
    c64c:	f800283a 	ret
    c650:	29403fcc 	andi	r5,r5,255
    c654:	40000c1e 	bne	r8,zero,c688 <__ledf2+0x98>
    c658:	30d2b03a 	or	r9,r6,r3
    c65c:	48000c26 	beq	r9,zero,c690 <__ledf2+0xa0>
    c660:	0013883a 	mov	r9,zero
    c664:	39c03fcc 	andi	r7,r7,255
    c668:	48000826 	beq	r9,zero,c68c <__ledf2+0x9c>
    c66c:	38001126 	beq	r7,zero,c6b4 <__ledf2+0xc4>
    c670:	00800044 	movi	r2,1
    c674:	f800283a 	ret
    c678:	30d2b03a 	or	r9,r6,r3
    c67c:	483fea26 	beq	r9,zero,c628 <__ledf2+0x38>
    c680:	00800084 	movi	r2,2
    c684:	f800283a 	ret
    c688:	39c03fcc 	andi	r7,r7,255
    c68c:	39400726 	beq	r7,r5,c6ac <__ledf2+0xbc>
    c690:	2800081e 	bne	r5,zero,c6b4 <__ledf2+0xc4>
    c694:	00800044 	movi	r2,1
    c698:	f800283a 	ret
    c69c:	2292b03a 	or	r9,r4,r10
    c6a0:	483fdf26 	beq	r9,zero,c620 <__ledf2+0x30>
    c6a4:	00800084 	movi	r2,2
    c6a8:	f800283a 	ret
    c6ac:	4080030e 	bge	r8,r2,c6bc <__ledf2+0xcc>
    c6b0:	383fef26 	beq	r7,zero,c670 <__ledf2+0x80>
    c6b4:	00bfffc4 	movi	r2,-1
    c6b8:	f800283a 	ret
    c6bc:	123feb16 	blt	r2,r8,c66c <__ledf2+0x7c>
    c6c0:	1abff336 	bltu	r3,r10,c690 <__ledf2+0xa0>
    c6c4:	50c00326 	beq	r10,r3,c6d4 <__ledf2+0xe4>
    c6c8:	50c0042e 	bgeu	r10,r3,c6dc <__ledf2+0xec>
    c6cc:	283fe81e 	bne	r5,zero,c670 <__ledf2+0x80>
    c6d0:	003ff806 	br	c6b4 <__ledf2+0xc4>
    c6d4:	313fee36 	bltu	r6,r4,c690 <__ledf2+0xa0>
    c6d8:	21bffc36 	bltu	r4,r6,c6cc <__ledf2+0xdc>
    c6dc:	0005883a 	mov	r2,zero
    c6e0:	f800283a 	ret

0000c6e4 <__muldf3>:
    c6e4:	defff304 	addi	sp,sp,-52
    c6e8:	2804d53a 	srli	r2,r5,20
    c6ec:	dd800915 	stw	r22,36(sp)
    c6f0:	282cd7fa 	srli	r22,r5,31
    c6f4:	dc000315 	stw	r16,12(sp)
    c6f8:	04000434 	movhi	r16,16
    c6fc:	dd400815 	stw	r21,32(sp)
    c700:	dc800515 	stw	r18,20(sp)
    c704:	843fffc4 	addi	r16,r16,-1
    c708:	dfc00c15 	stw	ra,48(sp)
    c70c:	df000b15 	stw	fp,44(sp)
    c710:	ddc00a15 	stw	r23,40(sp)
    c714:	dd000715 	stw	r20,28(sp)
    c718:	dcc00615 	stw	r19,24(sp)
    c71c:	dc400415 	stw	r17,16(sp)
    c720:	1481ffcc 	andi	r18,r2,2047
    c724:	2c20703a 	and	r16,r5,r16
    c728:	b02b883a 	mov	r21,r22
    c72c:	b2403fcc 	andi	r9,r22,255
    c730:	90006026 	beq	r18,zero,c8b4 <__muldf3+0x1d0>
    c734:	0081ffc4 	movi	r2,2047
    c738:	2029883a 	mov	r20,r4
    c73c:	90803626 	beq	r18,r2,c818 <__muldf3+0x134>
    c740:	80800434 	orhi	r2,r16,16
    c744:	100490fa 	slli	r2,r2,3
    c748:	2020d77a 	srli	r16,r4,29
    c74c:	202890fa 	slli	r20,r4,3
    c750:	94bf0044 	addi	r18,r18,-1023
    c754:	80a0b03a 	or	r16,r16,r2
    c758:	0027883a 	mov	r19,zero
    c75c:	0039883a 	mov	fp,zero
    c760:	3804d53a 	srli	r2,r7,20
    c764:	382ed7fa 	srli	r23,r7,31
    c768:	04400434 	movhi	r17,16
    c76c:	8c7fffc4 	addi	r17,r17,-1
    c770:	1081ffcc 	andi	r2,r2,2047
    c774:	3011883a 	mov	r8,r6
    c778:	3c62703a 	and	r17,r7,r17
    c77c:	ba803fcc 	andi	r10,r23,255
    c780:	10006d26 	beq	r2,zero,c938 <__muldf3+0x254>
    c784:	00c1ffc4 	movi	r3,2047
    c788:	10c06526 	beq	r2,r3,c920 <__muldf3+0x23c>
    c78c:	88c00434 	orhi	r3,r17,16
    c790:	180690fa 	slli	r3,r3,3
    c794:	3022d77a 	srli	r17,r6,29
    c798:	301090fa 	slli	r8,r6,3
    c79c:	10bf0044 	addi	r2,r2,-1023
    c7a0:	88e2b03a 	or	r17,r17,r3
    c7a4:	000b883a 	mov	r5,zero
    c7a8:	9085883a 	add	r2,r18,r2
    c7ac:	2cc8b03a 	or	r4,r5,r19
    c7b0:	00c003c4 	movi	r3,15
    c7b4:	bdacf03a 	xor	r22,r23,r22
    c7b8:	12c00044 	addi	r11,r2,1
    c7bc:	19009936 	bltu	r3,r4,ca24 <__muldf3+0x340>
    c7c0:	200890ba 	slli	r4,r4,2
    c7c4:	00c00074 	movhi	r3,1
    c7c8:	18f1f604 	addi	r3,r3,-14376
    c7cc:	20c9883a 	add	r4,r4,r3
    c7d0:	20c00017 	ldw	r3,0(r4)
    c7d4:	1800683a 	jmp	r3
    c7d8:	0000ca24 	muli	zero,zero,808
    c7dc:	0000c838 	rdprs	zero,zero,800
    c7e0:	0000c838 	rdprs	zero,zero,800
    c7e4:	0000c834 	movhi	zero,800
    c7e8:	0000ca00 	call	ca0 <VGA_char_box+0x18>
    c7ec:	0000ca00 	call	ca0 <VGA_char_box+0x18>
    c7f0:	0000c9e8 	cmpgeui	zero,zero,807
    c7f4:	0000c834 	movhi	zero,800
    c7f8:	0000ca00 	call	ca0 <VGA_char_box+0x18>
    c7fc:	0000c9e8 	cmpgeui	zero,zero,807
    c800:	0000ca00 	call	ca0 <VGA_char_box+0x18>
    c804:	0000c834 	movhi	zero,800
    c808:	0000ca10 	cmplti	zero,zero,808
    c80c:	0000ca10 	cmplti	zero,zero,808
    c810:	0000ca10 	cmplti	zero,zero,808
    c814:	0000cc2c 	andhi	zero,zero,816
    c818:	2404b03a 	or	r2,r4,r16
    c81c:	10006f1e 	bne	r2,zero,c9dc <__muldf3+0x2f8>
    c820:	04c00204 	movi	r19,8
    c824:	0021883a 	mov	r16,zero
    c828:	0029883a 	mov	r20,zero
    c82c:	07000084 	movi	fp,2
    c830:	003fcb06 	br	c760 <__muldf3+0x7c>
    c834:	502d883a 	mov	r22,r10
    c838:	00800084 	movi	r2,2
    c83c:	28805726 	beq	r5,r2,c99c <__muldf3+0x2b8>
    c840:	008000c4 	movi	r2,3
    c844:	28816626 	beq	r5,r2,cde0 <__muldf3+0x6fc>
    c848:	00800044 	movi	r2,1
    c84c:	2881411e 	bne	r5,r2,cd54 <__muldf3+0x670>
    c850:	b02b883a 	mov	r21,r22
    c854:	0005883a 	mov	r2,zero
    c858:	000b883a 	mov	r5,zero
    c85c:	0029883a 	mov	r20,zero
    c860:	1004953a 	slli	r2,r2,20
    c864:	a8c03fcc 	andi	r3,r21,255
    c868:	04400434 	movhi	r17,16
    c86c:	8c7fffc4 	addi	r17,r17,-1
    c870:	180697fa 	slli	r3,r3,31
    c874:	2c4a703a 	and	r5,r5,r17
    c878:	288ab03a 	or	r5,r5,r2
    c87c:	28c6b03a 	or	r3,r5,r3
    c880:	a005883a 	mov	r2,r20
    c884:	dfc00c17 	ldw	ra,48(sp)
    c888:	df000b17 	ldw	fp,44(sp)
    c88c:	ddc00a17 	ldw	r23,40(sp)
    c890:	dd800917 	ldw	r22,36(sp)
    c894:	dd400817 	ldw	r21,32(sp)
    c898:	dd000717 	ldw	r20,28(sp)
    c89c:	dcc00617 	ldw	r19,24(sp)
    c8a0:	dc800517 	ldw	r18,20(sp)
    c8a4:	dc400417 	ldw	r17,16(sp)
    c8a8:	dc000317 	ldw	r16,12(sp)
    c8ac:	dec00d04 	addi	sp,sp,52
    c8b0:	f800283a 	ret
    c8b4:	2404b03a 	or	r2,r4,r16
    c8b8:	2027883a 	mov	r19,r4
    c8bc:	10004226 	beq	r2,zero,c9c8 <__muldf3+0x2e4>
    c8c0:	8000fc26 	beq	r16,zero,ccb4 <__muldf3+0x5d0>
    c8c4:	8009883a 	mov	r4,r16
    c8c8:	d9800215 	stw	r6,8(sp)
    c8cc:	d9c00015 	stw	r7,0(sp)
    c8d0:	da400115 	stw	r9,4(sp)
    c8d4:	000d8fc0 	call	d8fc <__clzsi2>
    c8d8:	d9800217 	ldw	r6,8(sp)
    c8dc:	d9c00017 	ldw	r7,0(sp)
    c8e0:	da400117 	ldw	r9,4(sp)
    c8e4:	113ffd44 	addi	r4,r2,-11
    c8e8:	00c00704 	movi	r3,28
    c8ec:	1900ed16 	blt	r3,r4,cca4 <__muldf3+0x5c0>
    c8f0:	00c00744 	movi	r3,29
    c8f4:	147ffe04 	addi	r17,r2,-8
    c8f8:	1907c83a 	sub	r3,r3,r4
    c8fc:	8460983a 	sll	r16,r16,r17
    c900:	98c6d83a 	srl	r3,r19,r3
    c904:	9c68983a 	sll	r20,r19,r17
    c908:	1c20b03a 	or	r16,r3,r16
    c90c:	1080fcc4 	addi	r2,r2,1011
    c910:	00a5c83a 	sub	r18,zero,r2
    c914:	0027883a 	mov	r19,zero
    c918:	0039883a 	mov	fp,zero
    c91c:	003f9006 	br	c760 <__muldf3+0x7c>
    c920:	3446b03a 	or	r3,r6,r17
    c924:	1800261e 	bne	r3,zero,c9c0 <__muldf3+0x2dc>
    c928:	0023883a 	mov	r17,zero
    c92c:	0011883a 	mov	r8,zero
    c930:	01400084 	movi	r5,2
    c934:	003f9c06 	br	c7a8 <__muldf3+0xc4>
    c938:	3446b03a 	or	r3,r6,r17
    c93c:	18001c26 	beq	r3,zero,c9b0 <__muldf3+0x2cc>
    c940:	8800ce26 	beq	r17,zero,cc7c <__muldf3+0x598>
    c944:	8809883a 	mov	r4,r17
    c948:	d9800215 	stw	r6,8(sp)
    c94c:	da400115 	stw	r9,4(sp)
    c950:	da800015 	stw	r10,0(sp)
    c954:	000d8fc0 	call	d8fc <__clzsi2>
    c958:	d9800217 	ldw	r6,8(sp)
    c95c:	da400117 	ldw	r9,4(sp)
    c960:	da800017 	ldw	r10,0(sp)
    c964:	113ffd44 	addi	r4,r2,-11
    c968:	00c00704 	movi	r3,28
    c96c:	1900bf16 	blt	r3,r4,cc6c <__muldf3+0x588>
    c970:	00c00744 	movi	r3,29
    c974:	123ffe04 	addi	r8,r2,-8
    c978:	1907c83a 	sub	r3,r3,r4
    c97c:	8a22983a 	sll	r17,r17,r8
    c980:	30c6d83a 	srl	r3,r6,r3
    c984:	3210983a 	sll	r8,r6,r8
    c988:	1c62b03a 	or	r17,r3,r17
    c98c:	1080fcc4 	addi	r2,r2,1011
    c990:	0085c83a 	sub	r2,zero,r2
    c994:	000b883a 	mov	r5,zero
    c998:	003f8306 	br	c7a8 <__muldf3+0xc4>
    c99c:	b02b883a 	mov	r21,r22
    c9a0:	0081ffc4 	movi	r2,2047
    c9a4:	000b883a 	mov	r5,zero
    c9a8:	0029883a 	mov	r20,zero
    c9ac:	003fac06 	br	c860 <__muldf3+0x17c>
    c9b0:	0023883a 	mov	r17,zero
    c9b4:	0011883a 	mov	r8,zero
    c9b8:	01400044 	movi	r5,1
    c9bc:	003f7a06 	br	c7a8 <__muldf3+0xc4>
    c9c0:	014000c4 	movi	r5,3
    c9c4:	003f7806 	br	c7a8 <__muldf3+0xc4>
    c9c8:	04c00104 	movi	r19,4
    c9cc:	0021883a 	mov	r16,zero
    c9d0:	0029883a 	mov	r20,zero
    c9d4:	07000044 	movi	fp,1
    c9d8:	003f6106 	br	c760 <__muldf3+0x7c>
    c9dc:	04c00304 	movi	r19,12
    c9e0:	070000c4 	movi	fp,3
    c9e4:	003f5e06 	br	c760 <__muldf3+0x7c>
    c9e8:	01400434 	movhi	r5,16
    c9ec:	002b883a 	mov	r21,zero
    c9f0:	297fffc4 	addi	r5,r5,-1
    c9f4:	053fffc4 	movi	r20,-1
    c9f8:	0081ffc4 	movi	r2,2047
    c9fc:	003f9806 	br	c860 <__muldf3+0x17c>
    ca00:	8023883a 	mov	r17,r16
    ca04:	a011883a 	mov	r8,r20
    ca08:	e00b883a 	mov	r5,fp
    ca0c:	003f8a06 	br	c838 <__muldf3+0x154>
    ca10:	8023883a 	mov	r17,r16
    ca14:	a011883a 	mov	r8,r20
    ca18:	482d883a 	mov	r22,r9
    ca1c:	e00b883a 	mov	r5,fp
    ca20:	003f8506 	br	c838 <__muldf3+0x154>
    ca24:	a00ad43a 	srli	r5,r20,16
    ca28:	401ad43a 	srli	r13,r8,16
    ca2c:	a53fffcc 	andi	r20,r20,65535
    ca30:	423fffcc 	andi	r8,r8,65535
    ca34:	4519383a 	mul	r12,r8,r20
    ca38:	4147383a 	mul	r3,r8,r5
    ca3c:	6d09383a 	mul	r4,r13,r20
    ca40:	600cd43a 	srli	r6,r12,16
    ca44:	2b5d383a 	mul	r14,r5,r13
    ca48:	20c9883a 	add	r4,r4,r3
    ca4c:	310d883a 	add	r6,r6,r4
    ca50:	30c0022e 	bgeu	r6,r3,ca5c <__muldf3+0x378>
    ca54:	00c00074 	movhi	r3,1
    ca58:	70dd883a 	add	r14,r14,r3
    ca5c:	8826d43a 	srli	r19,r17,16
    ca60:	8bffffcc 	andi	r15,r17,65535
    ca64:	7d23383a 	mul	r17,r15,r20
    ca68:	7949383a 	mul	r4,r15,r5
    ca6c:	9d29383a 	mul	r20,r19,r20
    ca70:	8814d43a 	srli	r10,r17,16
    ca74:	3012943a 	slli	r9,r6,16
    ca78:	a129883a 	add	r20,r20,r4
    ca7c:	633fffcc 	andi	r12,r12,65535
    ca80:	5515883a 	add	r10,r10,r20
    ca84:	3006d43a 	srli	r3,r6,16
    ca88:	4b13883a 	add	r9,r9,r12
    ca8c:	2ccb383a 	mul	r5,r5,r19
    ca90:	5100022e 	bgeu	r10,r4,ca9c <__muldf3+0x3b8>
    ca94:	01000074 	movhi	r4,1
    ca98:	290b883a 	add	r5,r5,r4
    ca9c:	802ad43a 	srli	r21,r16,16
    caa0:	843fffcc 	andi	r16,r16,65535
    caa4:	440d383a 	mul	r6,r8,r16
    caa8:	4565383a 	mul	r18,r8,r21
    caac:	8349383a 	mul	r4,r16,r13
    cab0:	500e943a 	slli	r7,r10,16
    cab4:	3010d43a 	srli	r8,r6,16
    cab8:	5028d43a 	srli	r20,r10,16
    cabc:	2489883a 	add	r4,r4,r18
    cac0:	8abfffcc 	andi	r10,r17,65535
    cac4:	3a95883a 	add	r10,r7,r10
    cac8:	4119883a 	add	r12,r8,r4
    cacc:	a169883a 	add	r20,r20,r5
    cad0:	1a87883a 	add	r3,r3,r10
    cad4:	6d5b383a 	mul	r13,r13,r21
    cad8:	6480022e 	bgeu	r12,r18,cae4 <__muldf3+0x400>
    cadc:	01000074 	movhi	r4,1
    cae0:	691b883a 	add	r13,r13,r4
    cae4:	7c25383a 	mul	r18,r15,r16
    cae8:	7d4b383a 	mul	r5,r15,r21
    caec:	84cf383a 	mul	r7,r16,r19
    caf0:	901ed43a 	srli	r15,r18,16
    caf4:	6008d43a 	srli	r4,r12,16
    caf8:	6010943a 	slli	r8,r12,16
    cafc:	394f883a 	add	r7,r7,r5
    cb00:	333fffcc 	andi	r12,r6,65535
    cb04:	79df883a 	add	r15,r15,r7
    cb08:	235b883a 	add	r13,r4,r13
    cb0c:	9d63383a 	mul	r17,r19,r21
    cb10:	4309883a 	add	r4,r8,r12
    cb14:	7940022e 	bgeu	r15,r5,cb20 <__muldf3+0x43c>
    cb18:	01400074 	movhi	r5,1
    cb1c:	8963883a 	add	r17,r17,r5
    cb20:	780a943a 	slli	r5,r15,16
    cb24:	91bfffcc 	andi	r6,r18,65535
    cb28:	70c7883a 	add	r3,r14,r3
    cb2c:	298d883a 	add	r6,r5,r6
    cb30:	1a8f803a 	cmpltu	r7,r3,r10
    cb34:	350b883a 	add	r5,r6,r20
    cb38:	20c7883a 	add	r3,r4,r3
    cb3c:	3955883a 	add	r10,r7,r5
    cb40:	1909803a 	cmpltu	r4,r3,r4
    cb44:	6a91883a 	add	r8,r13,r10
    cb48:	780cd43a 	srli	r6,r15,16
    cb4c:	2219883a 	add	r12,r4,r8
    cb50:	2d0b803a 	cmpltu	r5,r5,r20
    cb54:	51cf803a 	cmpltu	r7,r10,r7
    cb58:	29ceb03a 	or	r7,r5,r7
    cb5c:	4351803a 	cmpltu	r8,r8,r13
    cb60:	610b803a 	cmpltu	r5,r12,r4
    cb64:	4148b03a 	or	r4,r8,r5
    cb68:	398f883a 	add	r7,r7,r6
    cb6c:	3909883a 	add	r4,r7,r4
    cb70:	1810927a 	slli	r8,r3,9
    cb74:	2449883a 	add	r4,r4,r17
    cb78:	2008927a 	slli	r4,r4,9
    cb7c:	6022d5fa 	srli	r17,r12,23
    cb80:	1806d5fa 	srli	r3,r3,23
    cb84:	4252b03a 	or	r9,r8,r9
    cb88:	600a927a 	slli	r5,r12,9
    cb8c:	4810c03a 	cmpne	r8,r9,zero
    cb90:	2462b03a 	or	r17,r4,r17
    cb94:	40c6b03a 	or	r3,r8,r3
    cb98:	8900402c 	andhi	r4,r17,256
    cb9c:	1950b03a 	or	r8,r3,r5
    cba0:	20000726 	beq	r4,zero,cbc0 <__muldf3+0x4dc>
    cba4:	4006d07a 	srli	r3,r8,1
    cba8:	880497fa 	slli	r2,r17,31
    cbac:	4200004c 	andi	r8,r8,1
    cbb0:	8822d07a 	srli	r17,r17,1
    cbb4:	1a10b03a 	or	r8,r3,r8
    cbb8:	1210b03a 	or	r8,r2,r8
    cbbc:	5805883a 	mov	r2,r11
    cbc0:	1140ffc4 	addi	r5,r2,1023
    cbc4:	0140440e 	bge	zero,r5,ccd8 <__muldf3+0x5f4>
    cbc8:	40c001cc 	andi	r3,r8,7
    cbcc:	18000726 	beq	r3,zero,cbec <__muldf3+0x508>
    cbd0:	40c003cc 	andi	r3,r8,15
    cbd4:	01000104 	movi	r4,4
    cbd8:	19000426 	beq	r3,r4,cbec <__muldf3+0x508>
    cbdc:	4107883a 	add	r3,r8,r4
    cbe0:	1a11803a 	cmpltu	r8,r3,r8
    cbe4:	8a23883a 	add	r17,r17,r8
    cbe8:	1811883a 	mov	r8,r3
    cbec:	88c0402c 	andhi	r3,r17,256
    cbf0:	18000426 	beq	r3,zero,cc04 <__muldf3+0x520>
    cbf4:	11410004 	addi	r5,r2,1024
    cbf8:	00bfc034 	movhi	r2,65280
    cbfc:	10bfffc4 	addi	r2,r2,-1
    cc00:	88a2703a 	and	r17,r17,r2
    cc04:	0081ff84 	movi	r2,2046
    cc08:	117f6416 	blt	r2,r5,c99c <__muldf3+0x2b8>
    cc0c:	8828977a 	slli	r20,r17,29
    cc10:	4010d0fa 	srli	r8,r8,3
    cc14:	8822927a 	slli	r17,r17,9
    cc18:	2881ffcc 	andi	r2,r5,2047
    cc1c:	a228b03a 	or	r20,r20,r8
    cc20:	880ad33a 	srli	r5,r17,12
    cc24:	b02b883a 	mov	r21,r22
    cc28:	003f0d06 	br	c860 <__muldf3+0x17c>
    cc2c:	8080022c 	andhi	r2,r16,8
    cc30:	10000926 	beq	r2,zero,cc58 <__muldf3+0x574>
    cc34:	8880022c 	andhi	r2,r17,8
    cc38:	1000071e 	bne	r2,zero,cc58 <__muldf3+0x574>
    cc3c:	00800434 	movhi	r2,16
    cc40:	89400234 	orhi	r5,r17,8
    cc44:	10bfffc4 	addi	r2,r2,-1
    cc48:	b82b883a 	mov	r21,r23
    cc4c:	288a703a 	and	r5,r5,r2
    cc50:	4029883a 	mov	r20,r8
    cc54:	003f6806 	br	c9f8 <__muldf3+0x314>
    cc58:	00800434 	movhi	r2,16
    cc5c:	81400234 	orhi	r5,r16,8
    cc60:	10bfffc4 	addi	r2,r2,-1
    cc64:	288a703a 	and	r5,r5,r2
    cc68:	003f6306 	br	c9f8 <__muldf3+0x314>
    cc6c:	147ff604 	addi	r17,r2,-40
    cc70:	3462983a 	sll	r17,r6,r17
    cc74:	0011883a 	mov	r8,zero
    cc78:	003f4406 	br	c98c <__muldf3+0x2a8>
    cc7c:	3009883a 	mov	r4,r6
    cc80:	d9800215 	stw	r6,8(sp)
    cc84:	da400115 	stw	r9,4(sp)
    cc88:	da800015 	stw	r10,0(sp)
    cc8c:	000d8fc0 	call	d8fc <__clzsi2>
    cc90:	10800804 	addi	r2,r2,32
    cc94:	da800017 	ldw	r10,0(sp)
    cc98:	da400117 	ldw	r9,4(sp)
    cc9c:	d9800217 	ldw	r6,8(sp)
    cca0:	003f3006 	br	c964 <__muldf3+0x280>
    cca4:	143ff604 	addi	r16,r2,-40
    cca8:	9c20983a 	sll	r16,r19,r16
    ccac:	0029883a 	mov	r20,zero
    ccb0:	003f1606 	br	c90c <__muldf3+0x228>
    ccb4:	d9800215 	stw	r6,8(sp)
    ccb8:	d9c00015 	stw	r7,0(sp)
    ccbc:	da400115 	stw	r9,4(sp)
    ccc0:	000d8fc0 	call	d8fc <__clzsi2>
    ccc4:	10800804 	addi	r2,r2,32
    ccc8:	da400117 	ldw	r9,4(sp)
    cccc:	d9c00017 	ldw	r7,0(sp)
    ccd0:	d9800217 	ldw	r6,8(sp)
    ccd4:	003f0306 	br	c8e4 <__muldf3+0x200>
    ccd8:	00c00044 	movi	r3,1
    ccdc:	1947c83a 	sub	r3,r3,r5
    cce0:	00800e04 	movi	r2,56
    cce4:	10feda16 	blt	r2,r3,c850 <__muldf3+0x16c>
    cce8:	008007c4 	movi	r2,31
    ccec:	10c01b16 	blt	r2,r3,cd5c <__muldf3+0x678>
    ccf0:	00800804 	movi	r2,32
    ccf4:	10c5c83a 	sub	r2,r2,r3
    ccf8:	888a983a 	sll	r5,r17,r2
    ccfc:	40c8d83a 	srl	r4,r8,r3
    cd00:	4084983a 	sll	r2,r8,r2
    cd04:	88e2d83a 	srl	r17,r17,r3
    cd08:	2906b03a 	or	r3,r5,r4
    cd0c:	1004c03a 	cmpne	r2,r2,zero
    cd10:	1886b03a 	or	r3,r3,r2
    cd14:	188001cc 	andi	r2,r3,7
    cd18:	10000726 	beq	r2,zero,cd38 <__muldf3+0x654>
    cd1c:	188003cc 	andi	r2,r3,15
    cd20:	01000104 	movi	r4,4
    cd24:	11000426 	beq	r2,r4,cd38 <__muldf3+0x654>
    cd28:	1805883a 	mov	r2,r3
    cd2c:	10c00104 	addi	r3,r2,4
    cd30:	1885803a 	cmpltu	r2,r3,r2
    cd34:	88a3883a 	add	r17,r17,r2
    cd38:	8880202c 	andhi	r2,r17,128
    cd3c:	10001c26 	beq	r2,zero,cdb0 <__muldf3+0x6cc>
    cd40:	b02b883a 	mov	r21,r22
    cd44:	00800044 	movi	r2,1
    cd48:	000b883a 	mov	r5,zero
    cd4c:	0029883a 	mov	r20,zero
    cd50:	003ec306 	br	c860 <__muldf3+0x17c>
    cd54:	5805883a 	mov	r2,r11
    cd58:	003f9906 	br	cbc0 <__muldf3+0x4dc>
    cd5c:	00bff844 	movi	r2,-31
    cd60:	1145c83a 	sub	r2,r2,r5
    cd64:	8888d83a 	srl	r4,r17,r2
    cd68:	00800804 	movi	r2,32
    cd6c:	18801a26 	beq	r3,r2,cdd8 <__muldf3+0x6f4>
    cd70:	00801004 	movi	r2,64
    cd74:	10c5c83a 	sub	r2,r2,r3
    cd78:	8884983a 	sll	r2,r17,r2
    cd7c:	1204b03a 	or	r2,r2,r8
    cd80:	1004c03a 	cmpne	r2,r2,zero
    cd84:	2084b03a 	or	r2,r4,r2
    cd88:	144001cc 	andi	r17,r2,7
    cd8c:	88000d1e 	bne	r17,zero,cdc4 <__muldf3+0x6e0>
    cd90:	000b883a 	mov	r5,zero
    cd94:	1028d0fa 	srli	r20,r2,3
    cd98:	b02b883a 	mov	r21,r22
    cd9c:	0005883a 	mov	r2,zero
    cda0:	a468b03a 	or	r20,r20,r17
    cda4:	003eae06 	br	c860 <__muldf3+0x17c>
    cda8:	1007883a 	mov	r3,r2
    cdac:	0023883a 	mov	r17,zero
    cdb0:	880a927a 	slli	r5,r17,9
    cdb4:	1805883a 	mov	r2,r3
    cdb8:	8822977a 	slli	r17,r17,29
    cdbc:	280ad33a 	srli	r5,r5,12
    cdc0:	003ff406 	br	cd94 <__muldf3+0x6b0>
    cdc4:	10c003cc 	andi	r3,r2,15
    cdc8:	01000104 	movi	r4,4
    cdcc:	193ff626 	beq	r3,r4,cda8 <__muldf3+0x6c4>
    cdd0:	0023883a 	mov	r17,zero
    cdd4:	003fd506 	br	cd2c <__muldf3+0x648>
    cdd8:	0005883a 	mov	r2,zero
    cddc:	003fe706 	br	cd7c <__muldf3+0x698>
    cde0:	00800434 	movhi	r2,16
    cde4:	89400234 	orhi	r5,r17,8
    cde8:	10bfffc4 	addi	r2,r2,-1
    cdec:	b02b883a 	mov	r21,r22
    cdf0:	288a703a 	and	r5,r5,r2
    cdf4:	4029883a 	mov	r20,r8
    cdf8:	003eff06 	br	c9f8 <__muldf3+0x314>

0000cdfc <__subdf3>:
    cdfc:	02000434 	movhi	r8,16
    ce00:	423fffc4 	addi	r8,r8,-1
    ce04:	defffb04 	addi	sp,sp,-20
    ce08:	2a14703a 	and	r10,r5,r8
    ce0c:	3812d53a 	srli	r9,r7,20
    ce10:	3a10703a 	and	r8,r7,r8
    ce14:	2006d77a 	srli	r3,r4,29
    ce18:	3004d77a 	srli	r2,r6,29
    ce1c:	dc000015 	stw	r16,0(sp)
    ce20:	501490fa 	slli	r10,r10,3
    ce24:	2820d53a 	srli	r16,r5,20
    ce28:	401090fa 	slli	r8,r8,3
    ce2c:	dc800215 	stw	r18,8(sp)
    ce30:	dc400115 	stw	r17,4(sp)
    ce34:	dfc00415 	stw	ra,16(sp)
    ce38:	202290fa 	slli	r17,r4,3
    ce3c:	dcc00315 	stw	r19,12(sp)
    ce40:	4a41ffcc 	andi	r9,r9,2047
    ce44:	0101ffc4 	movi	r4,2047
    ce48:	2824d7fa 	srli	r18,r5,31
    ce4c:	8401ffcc 	andi	r16,r16,2047
    ce50:	50c6b03a 	or	r3,r10,r3
    ce54:	380ed7fa 	srli	r7,r7,31
    ce58:	408ab03a 	or	r5,r8,r2
    ce5c:	300c90fa 	slli	r6,r6,3
    ce60:	49009626 	beq	r9,r4,d0bc <__subdf3+0x2c0>
    ce64:	39c0005c 	xori	r7,r7,1
    ce68:	8245c83a 	sub	r2,r16,r9
    ce6c:	3c807426 	beq	r7,r18,d040 <__subdf3+0x244>
    ce70:	0080af0e 	bge	zero,r2,d130 <__subdf3+0x334>
    ce74:	48002a1e 	bne	r9,zero,cf20 <__subdf3+0x124>
    ce78:	2988b03a 	or	r4,r5,r6
    ce7c:	20009a1e 	bne	r4,zero,d0e8 <__subdf3+0x2ec>
    ce80:	888001cc 	andi	r2,r17,7
    ce84:	10000726 	beq	r2,zero,cea4 <__subdf3+0xa8>
    ce88:	888003cc 	andi	r2,r17,15
    ce8c:	01000104 	movi	r4,4
    ce90:	11000426 	beq	r2,r4,cea4 <__subdf3+0xa8>
    ce94:	890b883a 	add	r5,r17,r4
    ce98:	2c63803a 	cmpltu	r17,r5,r17
    ce9c:	1c47883a 	add	r3,r3,r17
    cea0:	2823883a 	mov	r17,r5
    cea4:	1880202c 	andhi	r2,r3,128
    cea8:	10005926 	beq	r2,zero,d010 <__subdf3+0x214>
    ceac:	84000044 	addi	r16,r16,1
    ceb0:	0081ffc4 	movi	r2,2047
    ceb4:	8080be26 	beq	r16,r2,d1b0 <__subdf3+0x3b4>
    ceb8:	017fe034 	movhi	r5,65408
    cebc:	297fffc4 	addi	r5,r5,-1
    cec0:	1946703a 	and	r3,r3,r5
    cec4:	1804977a 	slli	r2,r3,29
    cec8:	1806927a 	slli	r3,r3,9
    cecc:	8822d0fa 	srli	r17,r17,3
    ced0:	8401ffcc 	andi	r16,r16,2047
    ced4:	180ad33a 	srli	r5,r3,12
    ced8:	9100004c 	andi	r4,r18,1
    cedc:	1444b03a 	or	r2,r2,r17
    cee0:	80c1ffcc 	andi	r3,r16,2047
    cee4:	1820953a 	slli	r16,r3,20
    cee8:	20c03fcc 	andi	r3,r4,255
    ceec:	180897fa 	slli	r4,r3,31
    cef0:	00c00434 	movhi	r3,16
    cef4:	18ffffc4 	addi	r3,r3,-1
    cef8:	28c6703a 	and	r3,r5,r3
    cefc:	1c06b03a 	or	r3,r3,r16
    cf00:	1906b03a 	or	r3,r3,r4
    cf04:	dfc00417 	ldw	ra,16(sp)
    cf08:	dcc00317 	ldw	r19,12(sp)
    cf0c:	dc800217 	ldw	r18,8(sp)
    cf10:	dc400117 	ldw	r17,4(sp)
    cf14:	dc000017 	ldw	r16,0(sp)
    cf18:	dec00504 	addi	sp,sp,20
    cf1c:	f800283a 	ret
    cf20:	0101ffc4 	movi	r4,2047
    cf24:	813fd626 	beq	r16,r4,ce80 <__subdf3+0x84>
    cf28:	29402034 	orhi	r5,r5,128
    cf2c:	01000e04 	movi	r4,56
    cf30:	2080a316 	blt	r4,r2,d1c0 <__subdf3+0x3c4>
    cf34:	010007c4 	movi	r4,31
    cf38:	2080c616 	blt	r4,r2,d254 <__subdf3+0x458>
    cf3c:	01000804 	movi	r4,32
    cf40:	2089c83a 	sub	r4,r4,r2
    cf44:	2910983a 	sll	r8,r5,r4
    cf48:	308ed83a 	srl	r7,r6,r2
    cf4c:	3108983a 	sll	r4,r6,r4
    cf50:	2884d83a 	srl	r2,r5,r2
    cf54:	41ccb03a 	or	r6,r8,r7
    cf58:	2008c03a 	cmpne	r4,r4,zero
    cf5c:	310cb03a 	or	r6,r6,r4
    cf60:	898dc83a 	sub	r6,r17,r6
    cf64:	89a3803a 	cmpltu	r17,r17,r6
    cf68:	1887c83a 	sub	r3,r3,r2
    cf6c:	1c47c83a 	sub	r3,r3,r17
    cf70:	3023883a 	mov	r17,r6
    cf74:	1880202c 	andhi	r2,r3,128
    cf78:	10002326 	beq	r2,zero,d008 <__subdf3+0x20c>
    cf7c:	04c02034 	movhi	r19,128
    cf80:	9cffffc4 	addi	r19,r19,-1
    cf84:	1ce6703a 	and	r19,r3,r19
    cf88:	98007a26 	beq	r19,zero,d174 <__subdf3+0x378>
    cf8c:	9809883a 	mov	r4,r19
    cf90:	000d8fc0 	call	d8fc <__clzsi2>
    cf94:	113ffe04 	addi	r4,r2,-8
    cf98:	00c007c4 	movi	r3,31
    cf9c:	19007b16 	blt	r3,r4,d18c <__subdf3+0x390>
    cfa0:	00800804 	movi	r2,32
    cfa4:	1105c83a 	sub	r2,r2,r4
    cfa8:	8884d83a 	srl	r2,r17,r2
    cfac:	9906983a 	sll	r3,r19,r4
    cfb0:	8922983a 	sll	r17,r17,r4
    cfb4:	10c4b03a 	or	r2,r2,r3
    cfb8:	24007816 	blt	r4,r16,d19c <__subdf3+0x3a0>
    cfbc:	2421c83a 	sub	r16,r4,r16
    cfc0:	80c00044 	addi	r3,r16,1
    cfc4:	010007c4 	movi	r4,31
    cfc8:	20c09516 	blt	r4,r3,d220 <__subdf3+0x424>
    cfcc:	01400804 	movi	r5,32
    cfd0:	28cbc83a 	sub	r5,r5,r3
    cfd4:	88c8d83a 	srl	r4,r17,r3
    cfd8:	8962983a 	sll	r17,r17,r5
    cfdc:	114a983a 	sll	r5,r2,r5
    cfe0:	10c6d83a 	srl	r3,r2,r3
    cfe4:	8804c03a 	cmpne	r2,r17,zero
    cfe8:	290ab03a 	or	r5,r5,r4
    cfec:	28a2b03a 	or	r17,r5,r2
    cff0:	0021883a 	mov	r16,zero
    cff4:	003fa206 	br	ce80 <__subdf3+0x84>
    cff8:	2090b03a 	or	r8,r4,r2
    cffc:	40018e26 	beq	r8,zero,d638 <__subdf3+0x83c>
    d000:	1007883a 	mov	r3,r2
    d004:	2023883a 	mov	r17,r4
    d008:	888001cc 	andi	r2,r17,7
    d00c:	103f9e1e 	bne	r2,zero,ce88 <__subdf3+0x8c>
    d010:	1804977a 	slli	r2,r3,29
    d014:	8822d0fa 	srli	r17,r17,3
    d018:	1810d0fa 	srli	r8,r3,3
    d01c:	9100004c 	andi	r4,r18,1
    d020:	1444b03a 	or	r2,r2,r17
    d024:	00c1ffc4 	movi	r3,2047
    d028:	80c02826 	beq	r16,r3,d0cc <__subdf3+0x2d0>
    d02c:	01400434 	movhi	r5,16
    d030:	297fffc4 	addi	r5,r5,-1
    d034:	80e0703a 	and	r16,r16,r3
    d038:	414a703a 	and	r5,r8,r5
    d03c:	003fa806 	br	cee0 <__subdf3+0xe4>
    d040:	0080630e 	bge	zero,r2,d1d0 <__subdf3+0x3d4>
    d044:	48003026 	beq	r9,zero,d108 <__subdf3+0x30c>
    d048:	0101ffc4 	movi	r4,2047
    d04c:	813f8c26 	beq	r16,r4,ce80 <__subdf3+0x84>
    d050:	29402034 	orhi	r5,r5,128
    d054:	01000e04 	movi	r4,56
    d058:	2080a90e 	bge	r4,r2,d300 <__subdf3+0x504>
    d05c:	298cb03a 	or	r6,r5,r6
    d060:	3012c03a 	cmpne	r9,r6,zero
    d064:	0005883a 	mov	r2,zero
    d068:	4c53883a 	add	r9,r9,r17
    d06c:	4c63803a 	cmpltu	r17,r9,r17
    d070:	10c7883a 	add	r3,r2,r3
    d074:	88c7883a 	add	r3,r17,r3
    d078:	4823883a 	mov	r17,r9
    d07c:	1880202c 	andhi	r2,r3,128
    d080:	1000d026 	beq	r2,zero,d3c4 <__subdf3+0x5c8>
    d084:	84000044 	addi	r16,r16,1
    d088:	0081ffc4 	movi	r2,2047
    d08c:	8080fe26 	beq	r16,r2,d488 <__subdf3+0x68c>
    d090:	00bfe034 	movhi	r2,65408
    d094:	10bfffc4 	addi	r2,r2,-1
    d098:	1886703a 	and	r3,r3,r2
    d09c:	880ad07a 	srli	r5,r17,1
    d0a0:	180497fa 	slli	r2,r3,31
    d0a4:	8900004c 	andi	r4,r17,1
    d0a8:	2922b03a 	or	r17,r5,r4
    d0ac:	1806d07a 	srli	r3,r3,1
    d0b0:	1462b03a 	or	r17,r2,r17
    d0b4:	3825883a 	mov	r18,r7
    d0b8:	003f7106 	br	ce80 <__subdf3+0x84>
    d0bc:	2984b03a 	or	r2,r5,r6
    d0c0:	103f6826 	beq	r2,zero,ce64 <__subdf3+0x68>
    d0c4:	39c03fcc 	andi	r7,r7,255
    d0c8:	003f6706 	br	ce68 <__subdf3+0x6c>
    d0cc:	4086b03a 	or	r3,r8,r2
    d0d0:	18015226 	beq	r3,zero,d61c <__subdf3+0x820>
    d0d4:	00c00434 	movhi	r3,16
    d0d8:	41400234 	orhi	r5,r8,8
    d0dc:	18ffffc4 	addi	r3,r3,-1
    d0e0:	28ca703a 	and	r5,r5,r3
    d0e4:	003f7e06 	br	cee0 <__subdf3+0xe4>
    d0e8:	10bfffc4 	addi	r2,r2,-1
    d0ec:	1000491e 	bne	r2,zero,d214 <__subdf3+0x418>
    d0f0:	898fc83a 	sub	r7,r17,r6
    d0f4:	89e3803a 	cmpltu	r17,r17,r7
    d0f8:	1947c83a 	sub	r3,r3,r5
    d0fc:	1c47c83a 	sub	r3,r3,r17
    d100:	3823883a 	mov	r17,r7
    d104:	003f9b06 	br	cf74 <__subdf3+0x178>
    d108:	2988b03a 	or	r4,r5,r6
    d10c:	203f5c26 	beq	r4,zero,ce80 <__subdf3+0x84>
    d110:	10bfffc4 	addi	r2,r2,-1
    d114:	1000931e 	bne	r2,zero,d364 <__subdf3+0x568>
    d118:	898d883a 	add	r6,r17,r6
    d11c:	3463803a 	cmpltu	r17,r6,r17
    d120:	1947883a 	add	r3,r3,r5
    d124:	88c7883a 	add	r3,r17,r3
    d128:	3023883a 	mov	r17,r6
    d12c:	003fd306 	br	d07c <__subdf3+0x280>
    d130:	1000541e 	bne	r2,zero,d284 <__subdf3+0x488>
    d134:	80800044 	addi	r2,r16,1
    d138:	1081ffcc 	andi	r2,r2,2047
    d13c:	01000044 	movi	r4,1
    d140:	2080a20e 	bge	r4,r2,d3cc <__subdf3+0x5d0>
    d144:	8989c83a 	sub	r4,r17,r6
    d148:	8905803a 	cmpltu	r2,r17,r4
    d14c:	1967c83a 	sub	r19,r3,r5
    d150:	98a7c83a 	sub	r19,r19,r2
    d154:	9880202c 	andhi	r2,r19,128
    d158:	10006326 	beq	r2,zero,d2e8 <__subdf3+0x4ec>
    d15c:	3463c83a 	sub	r17,r6,r17
    d160:	28c7c83a 	sub	r3,r5,r3
    d164:	344d803a 	cmpltu	r6,r6,r17
    d168:	19a7c83a 	sub	r19,r3,r6
    d16c:	3825883a 	mov	r18,r7
    d170:	983f861e 	bne	r19,zero,cf8c <__subdf3+0x190>
    d174:	8809883a 	mov	r4,r17
    d178:	000d8fc0 	call	d8fc <__clzsi2>
    d17c:	10800804 	addi	r2,r2,32
    d180:	113ffe04 	addi	r4,r2,-8
    d184:	00c007c4 	movi	r3,31
    d188:	193f850e 	bge	r3,r4,cfa0 <__subdf3+0x1a4>
    d18c:	10bff604 	addi	r2,r2,-40
    d190:	8884983a 	sll	r2,r17,r2
    d194:	0023883a 	mov	r17,zero
    d198:	243f880e 	bge	r4,r16,cfbc <__subdf3+0x1c0>
    d19c:	00ffe034 	movhi	r3,65408
    d1a0:	18ffffc4 	addi	r3,r3,-1
    d1a4:	8121c83a 	sub	r16,r16,r4
    d1a8:	10c6703a 	and	r3,r2,r3
    d1ac:	003f3406 	br	ce80 <__subdf3+0x84>
    d1b0:	9100004c 	andi	r4,r18,1
    d1b4:	000b883a 	mov	r5,zero
    d1b8:	0005883a 	mov	r2,zero
    d1bc:	003f4806 	br	cee0 <__subdf3+0xe4>
    d1c0:	298cb03a 	or	r6,r5,r6
    d1c4:	300cc03a 	cmpne	r6,r6,zero
    d1c8:	0005883a 	mov	r2,zero
    d1cc:	003f6406 	br	cf60 <__subdf3+0x164>
    d1d0:	10009a1e 	bne	r2,zero,d43c <__subdf3+0x640>
    d1d4:	82400044 	addi	r9,r16,1
    d1d8:	4881ffcc 	andi	r2,r9,2047
    d1dc:	02800044 	movi	r10,1
    d1e0:	5080670e 	bge	r10,r2,d380 <__subdf3+0x584>
    d1e4:	0081ffc4 	movi	r2,2047
    d1e8:	4880af26 	beq	r9,r2,d4a8 <__subdf3+0x6ac>
    d1ec:	898d883a 	add	r6,r17,r6
    d1f0:	1945883a 	add	r2,r3,r5
    d1f4:	3447803a 	cmpltu	r3,r6,r17
    d1f8:	1887883a 	add	r3,r3,r2
    d1fc:	182297fa 	slli	r17,r3,31
    d200:	300cd07a 	srli	r6,r6,1
    d204:	1806d07a 	srli	r3,r3,1
    d208:	4821883a 	mov	r16,r9
    d20c:	89a2b03a 	or	r17,r17,r6
    d210:	003f1b06 	br	ce80 <__subdf3+0x84>
    d214:	0101ffc4 	movi	r4,2047
    d218:	813f441e 	bne	r16,r4,cf2c <__subdf3+0x130>
    d21c:	003f1806 	br	ce80 <__subdf3+0x84>
    d220:	843ff844 	addi	r16,r16,-31
    d224:	01400804 	movi	r5,32
    d228:	1408d83a 	srl	r4,r2,r16
    d22c:	19405026 	beq	r3,r5,d370 <__subdf3+0x574>
    d230:	01401004 	movi	r5,64
    d234:	28c7c83a 	sub	r3,r5,r3
    d238:	10c4983a 	sll	r2,r2,r3
    d23c:	88a2b03a 	or	r17,r17,r2
    d240:	8822c03a 	cmpne	r17,r17,zero
    d244:	2462b03a 	or	r17,r4,r17
    d248:	0007883a 	mov	r3,zero
    d24c:	0021883a 	mov	r16,zero
    d250:	003f6d06 	br	d008 <__subdf3+0x20c>
    d254:	11fff804 	addi	r7,r2,-32
    d258:	01000804 	movi	r4,32
    d25c:	29ced83a 	srl	r7,r5,r7
    d260:	11004526 	beq	r2,r4,d378 <__subdf3+0x57c>
    d264:	01001004 	movi	r4,64
    d268:	2089c83a 	sub	r4,r4,r2
    d26c:	2904983a 	sll	r2,r5,r4
    d270:	118cb03a 	or	r6,r2,r6
    d274:	300cc03a 	cmpne	r6,r6,zero
    d278:	398cb03a 	or	r6,r7,r6
    d27c:	0005883a 	mov	r2,zero
    d280:	003f3706 	br	cf60 <__subdf3+0x164>
    d284:	80002a26 	beq	r16,zero,d330 <__subdf3+0x534>
    d288:	0101ffc4 	movi	r4,2047
    d28c:	49006626 	beq	r9,r4,d428 <__subdf3+0x62c>
    d290:	0085c83a 	sub	r2,zero,r2
    d294:	18c02034 	orhi	r3,r3,128
    d298:	01000e04 	movi	r4,56
    d29c:	20807e16 	blt	r4,r2,d498 <__subdf3+0x69c>
    d2a0:	010007c4 	movi	r4,31
    d2a4:	2080e716 	blt	r4,r2,d644 <__subdf3+0x848>
    d2a8:	01000804 	movi	r4,32
    d2ac:	2089c83a 	sub	r4,r4,r2
    d2b0:	1914983a 	sll	r10,r3,r4
    d2b4:	8890d83a 	srl	r8,r17,r2
    d2b8:	8908983a 	sll	r4,r17,r4
    d2bc:	1884d83a 	srl	r2,r3,r2
    d2c0:	5222b03a 	or	r17,r10,r8
    d2c4:	2006c03a 	cmpne	r3,r4,zero
    d2c8:	88e2b03a 	or	r17,r17,r3
    d2cc:	3463c83a 	sub	r17,r6,r17
    d2d0:	2885c83a 	sub	r2,r5,r2
    d2d4:	344d803a 	cmpltu	r6,r6,r17
    d2d8:	1187c83a 	sub	r3,r2,r6
    d2dc:	4821883a 	mov	r16,r9
    d2e0:	3825883a 	mov	r18,r7
    d2e4:	003f2306 	br	cf74 <__subdf3+0x178>
    d2e8:	24d0b03a 	or	r8,r4,r19
    d2ec:	40001b1e 	bne	r8,zero,d35c <__subdf3+0x560>
    d2f0:	0005883a 	mov	r2,zero
    d2f4:	0009883a 	mov	r4,zero
    d2f8:	0021883a 	mov	r16,zero
    d2fc:	003f4906 	br	d024 <__subdf3+0x228>
    d300:	010007c4 	movi	r4,31
    d304:	20803a16 	blt	r4,r2,d3f0 <__subdf3+0x5f4>
    d308:	01000804 	movi	r4,32
    d30c:	2089c83a 	sub	r4,r4,r2
    d310:	2912983a 	sll	r9,r5,r4
    d314:	3090d83a 	srl	r8,r6,r2
    d318:	3108983a 	sll	r4,r6,r4
    d31c:	2884d83a 	srl	r2,r5,r2
    d320:	4a12b03a 	or	r9,r9,r8
    d324:	2008c03a 	cmpne	r4,r4,zero
    d328:	4912b03a 	or	r9,r9,r4
    d32c:	003f4e06 	br	d068 <__subdf3+0x26c>
    d330:	1c48b03a 	or	r4,r3,r17
    d334:	20003c26 	beq	r4,zero,d428 <__subdf3+0x62c>
    d338:	0084303a 	nor	r2,zero,r2
    d33c:	1000381e 	bne	r2,zero,d420 <__subdf3+0x624>
    d340:	3463c83a 	sub	r17,r6,r17
    d344:	28c5c83a 	sub	r2,r5,r3
    d348:	344d803a 	cmpltu	r6,r6,r17
    d34c:	1187c83a 	sub	r3,r2,r6
    d350:	4821883a 	mov	r16,r9
    d354:	3825883a 	mov	r18,r7
    d358:	003f0606 	br	cf74 <__subdf3+0x178>
    d35c:	2023883a 	mov	r17,r4
    d360:	003f0906 	br	cf88 <__subdf3+0x18c>
    d364:	0101ffc4 	movi	r4,2047
    d368:	813f3a1e 	bne	r16,r4,d054 <__subdf3+0x258>
    d36c:	003ec406 	br	ce80 <__subdf3+0x84>
    d370:	0005883a 	mov	r2,zero
    d374:	003fb106 	br	d23c <__subdf3+0x440>
    d378:	0005883a 	mov	r2,zero
    d37c:	003fbc06 	br	d270 <__subdf3+0x474>
    d380:	1c44b03a 	or	r2,r3,r17
    d384:	80008e1e 	bne	r16,zero,d5c0 <__subdf3+0x7c4>
    d388:	1000c826 	beq	r2,zero,d6ac <__subdf3+0x8b0>
    d38c:	2984b03a 	or	r2,r5,r6
    d390:	103ebb26 	beq	r2,zero,ce80 <__subdf3+0x84>
    d394:	8989883a 	add	r4,r17,r6
    d398:	1945883a 	add	r2,r3,r5
    d39c:	2447803a 	cmpltu	r3,r4,r17
    d3a0:	1887883a 	add	r3,r3,r2
    d3a4:	1880202c 	andhi	r2,r3,128
    d3a8:	2023883a 	mov	r17,r4
    d3ac:	103f1626 	beq	r2,zero,d008 <__subdf3+0x20c>
    d3b0:	00bfe034 	movhi	r2,65408
    d3b4:	10bfffc4 	addi	r2,r2,-1
    d3b8:	5021883a 	mov	r16,r10
    d3bc:	1886703a 	and	r3,r3,r2
    d3c0:	003eaf06 	br	ce80 <__subdf3+0x84>
    d3c4:	3825883a 	mov	r18,r7
    d3c8:	003f0f06 	br	d008 <__subdf3+0x20c>
    d3cc:	1c44b03a 	or	r2,r3,r17
    d3d0:	8000251e 	bne	r16,zero,d468 <__subdf3+0x66c>
    d3d4:	1000661e 	bne	r2,zero,d570 <__subdf3+0x774>
    d3d8:	2990b03a 	or	r8,r5,r6
    d3dc:	40009626 	beq	r8,zero,d638 <__subdf3+0x83c>
    d3e0:	2807883a 	mov	r3,r5
    d3e4:	3023883a 	mov	r17,r6
    d3e8:	3825883a 	mov	r18,r7
    d3ec:	003ea406 	br	ce80 <__subdf3+0x84>
    d3f0:	127ff804 	addi	r9,r2,-32
    d3f4:	01000804 	movi	r4,32
    d3f8:	2a52d83a 	srl	r9,r5,r9
    d3fc:	11008c26 	beq	r2,r4,d630 <__subdf3+0x834>
    d400:	01001004 	movi	r4,64
    d404:	2085c83a 	sub	r2,r4,r2
    d408:	2884983a 	sll	r2,r5,r2
    d40c:	118cb03a 	or	r6,r2,r6
    d410:	300cc03a 	cmpne	r6,r6,zero
    d414:	4992b03a 	or	r9,r9,r6
    d418:	0005883a 	mov	r2,zero
    d41c:	003f1206 	br	d068 <__subdf3+0x26c>
    d420:	0101ffc4 	movi	r4,2047
    d424:	493f9c1e 	bne	r9,r4,d298 <__subdf3+0x49c>
    d428:	2807883a 	mov	r3,r5
    d42c:	3023883a 	mov	r17,r6
    d430:	4821883a 	mov	r16,r9
    d434:	3825883a 	mov	r18,r7
    d438:	003e9106 	br	ce80 <__subdf3+0x84>
    d43c:	80001f1e 	bne	r16,zero,d4bc <__subdf3+0x6c0>
    d440:	1c48b03a 	or	r4,r3,r17
    d444:	20005a26 	beq	r4,zero,d5b0 <__subdf3+0x7b4>
    d448:	0084303a 	nor	r2,zero,r2
    d44c:	1000561e 	bne	r2,zero,d5a8 <__subdf3+0x7ac>
    d450:	89a3883a 	add	r17,r17,r6
    d454:	1945883a 	add	r2,r3,r5
    d458:	898d803a 	cmpltu	r6,r17,r6
    d45c:	3087883a 	add	r3,r6,r2
    d460:	4821883a 	mov	r16,r9
    d464:	003f0506 	br	d07c <__subdf3+0x280>
    d468:	10002b1e 	bne	r2,zero,d518 <__subdf3+0x71c>
    d46c:	2984b03a 	or	r2,r5,r6
    d470:	10008026 	beq	r2,zero,d674 <__subdf3+0x878>
    d474:	2807883a 	mov	r3,r5
    d478:	3023883a 	mov	r17,r6
    d47c:	3825883a 	mov	r18,r7
    d480:	0401ffc4 	movi	r16,2047
    d484:	003e7e06 	br	ce80 <__subdf3+0x84>
    d488:	3809883a 	mov	r4,r7
    d48c:	0011883a 	mov	r8,zero
    d490:	0005883a 	mov	r2,zero
    d494:	003ee306 	br	d024 <__subdf3+0x228>
    d498:	1c62b03a 	or	r17,r3,r17
    d49c:	8822c03a 	cmpne	r17,r17,zero
    d4a0:	0005883a 	mov	r2,zero
    d4a4:	003f8906 	br	d2cc <__subdf3+0x4d0>
    d4a8:	3809883a 	mov	r4,r7
    d4ac:	4821883a 	mov	r16,r9
    d4b0:	0011883a 	mov	r8,zero
    d4b4:	0005883a 	mov	r2,zero
    d4b8:	003eda06 	br	d024 <__subdf3+0x228>
    d4bc:	0101ffc4 	movi	r4,2047
    d4c0:	49003b26 	beq	r9,r4,d5b0 <__subdf3+0x7b4>
    d4c4:	0085c83a 	sub	r2,zero,r2
    d4c8:	18c02034 	orhi	r3,r3,128
    d4cc:	01000e04 	movi	r4,56
    d4d0:	20806e16 	blt	r4,r2,d68c <__subdf3+0x890>
    d4d4:	010007c4 	movi	r4,31
    d4d8:	20807716 	blt	r4,r2,d6b8 <__subdf3+0x8bc>
    d4dc:	01000804 	movi	r4,32
    d4e0:	2089c83a 	sub	r4,r4,r2
    d4e4:	1914983a 	sll	r10,r3,r4
    d4e8:	8890d83a 	srl	r8,r17,r2
    d4ec:	8908983a 	sll	r4,r17,r4
    d4f0:	1884d83a 	srl	r2,r3,r2
    d4f4:	5222b03a 	or	r17,r10,r8
    d4f8:	2006c03a 	cmpne	r3,r4,zero
    d4fc:	88e2b03a 	or	r17,r17,r3
    d500:	89a3883a 	add	r17,r17,r6
    d504:	1145883a 	add	r2,r2,r5
    d508:	898d803a 	cmpltu	r6,r17,r6
    d50c:	3087883a 	add	r3,r6,r2
    d510:	4821883a 	mov	r16,r9
    d514:	003ed906 	br	d07c <__subdf3+0x280>
    d518:	2984b03a 	or	r2,r5,r6
    d51c:	10004226 	beq	r2,zero,d628 <__subdf3+0x82c>
    d520:	1808d0fa 	srli	r4,r3,3
    d524:	8822d0fa 	srli	r17,r17,3
    d528:	1806977a 	slli	r3,r3,29
    d52c:	2080022c 	andhi	r2,r4,8
    d530:	1c62b03a 	or	r17,r3,r17
    d534:	10000826 	beq	r2,zero,d558 <__subdf3+0x75c>
    d538:	2812d0fa 	srli	r9,r5,3
    d53c:	4880022c 	andhi	r2,r9,8
    d540:	1000051e 	bne	r2,zero,d558 <__subdf3+0x75c>
    d544:	300cd0fa 	srli	r6,r6,3
    d548:	2804977a 	slli	r2,r5,29
    d54c:	4809883a 	mov	r4,r9
    d550:	3825883a 	mov	r18,r7
    d554:	11a2b03a 	or	r17,r2,r6
    d558:	8806d77a 	srli	r3,r17,29
    d55c:	200890fa 	slli	r4,r4,3
    d560:	882290fa 	slli	r17,r17,3
    d564:	0401ffc4 	movi	r16,2047
    d568:	1906b03a 	or	r3,r3,r4
    d56c:	003e4406 	br	ce80 <__subdf3+0x84>
    d570:	2984b03a 	or	r2,r5,r6
    d574:	103e4226 	beq	r2,zero,ce80 <__subdf3+0x84>
    d578:	8989c83a 	sub	r4,r17,r6
    d57c:	8911803a 	cmpltu	r8,r17,r4
    d580:	1945c83a 	sub	r2,r3,r5
    d584:	1205c83a 	sub	r2,r2,r8
    d588:	1200202c 	andhi	r8,r2,128
    d58c:	403e9a26 	beq	r8,zero,cff8 <__subdf3+0x1fc>
    d590:	3463c83a 	sub	r17,r6,r17
    d594:	28c5c83a 	sub	r2,r5,r3
    d598:	344d803a 	cmpltu	r6,r6,r17
    d59c:	1187c83a 	sub	r3,r2,r6
    d5a0:	3825883a 	mov	r18,r7
    d5a4:	003e3606 	br	ce80 <__subdf3+0x84>
    d5a8:	0101ffc4 	movi	r4,2047
    d5ac:	493fc71e 	bne	r9,r4,d4cc <__subdf3+0x6d0>
    d5b0:	2807883a 	mov	r3,r5
    d5b4:	3023883a 	mov	r17,r6
    d5b8:	4821883a 	mov	r16,r9
    d5bc:	003e3006 	br	ce80 <__subdf3+0x84>
    d5c0:	10003626 	beq	r2,zero,d69c <__subdf3+0x8a0>
    d5c4:	2984b03a 	or	r2,r5,r6
    d5c8:	10001726 	beq	r2,zero,d628 <__subdf3+0x82c>
    d5cc:	1808d0fa 	srli	r4,r3,3
    d5d0:	8822d0fa 	srli	r17,r17,3
    d5d4:	1806977a 	slli	r3,r3,29
    d5d8:	2080022c 	andhi	r2,r4,8
    d5dc:	1c62b03a 	or	r17,r3,r17
    d5e0:	10000726 	beq	r2,zero,d600 <__subdf3+0x804>
    d5e4:	2812d0fa 	srli	r9,r5,3
    d5e8:	4880022c 	andhi	r2,r9,8
    d5ec:	1000041e 	bne	r2,zero,d600 <__subdf3+0x804>
    d5f0:	300cd0fa 	srli	r6,r6,3
    d5f4:	2804977a 	slli	r2,r5,29
    d5f8:	4809883a 	mov	r4,r9
    d5fc:	11a2b03a 	or	r17,r2,r6
    d600:	8806d77a 	srli	r3,r17,29
    d604:	200890fa 	slli	r4,r4,3
    d608:	882290fa 	slli	r17,r17,3
    d60c:	3825883a 	mov	r18,r7
    d610:	1906b03a 	or	r3,r3,r4
    d614:	0401ffc4 	movi	r16,2047
    d618:	003e1906 	br	ce80 <__subdf3+0x84>
    d61c:	000b883a 	mov	r5,zero
    d620:	0005883a 	mov	r2,zero
    d624:	003e2e06 	br	cee0 <__subdf3+0xe4>
    d628:	0401ffc4 	movi	r16,2047
    d62c:	003e1406 	br	ce80 <__subdf3+0x84>
    d630:	0005883a 	mov	r2,zero
    d634:	003f7506 	br	d40c <__subdf3+0x610>
    d638:	0005883a 	mov	r2,zero
    d63c:	0009883a 	mov	r4,zero
    d640:	003e7806 	br	d024 <__subdf3+0x228>
    d644:	123ff804 	addi	r8,r2,-32
    d648:	01000804 	movi	r4,32
    d64c:	1a10d83a 	srl	r8,r3,r8
    d650:	11002526 	beq	r2,r4,d6e8 <__subdf3+0x8ec>
    d654:	01001004 	movi	r4,64
    d658:	2085c83a 	sub	r2,r4,r2
    d65c:	1884983a 	sll	r2,r3,r2
    d660:	1444b03a 	or	r2,r2,r17
    d664:	1004c03a 	cmpne	r2,r2,zero
    d668:	40a2b03a 	or	r17,r8,r2
    d66c:	0005883a 	mov	r2,zero
    d670:	003f1606 	br	d2cc <__subdf3+0x4d0>
    d674:	02000434 	movhi	r8,16
    d678:	0009883a 	mov	r4,zero
    d67c:	423fffc4 	addi	r8,r8,-1
    d680:	00bfffc4 	movi	r2,-1
    d684:	0401ffc4 	movi	r16,2047
    d688:	003e6606 	br	d024 <__subdf3+0x228>
    d68c:	1c62b03a 	or	r17,r3,r17
    d690:	8822c03a 	cmpne	r17,r17,zero
    d694:	0005883a 	mov	r2,zero
    d698:	003f9906 	br	d500 <__subdf3+0x704>
    d69c:	2807883a 	mov	r3,r5
    d6a0:	3023883a 	mov	r17,r6
    d6a4:	0401ffc4 	movi	r16,2047
    d6a8:	003df506 	br	ce80 <__subdf3+0x84>
    d6ac:	2807883a 	mov	r3,r5
    d6b0:	3023883a 	mov	r17,r6
    d6b4:	003df206 	br	ce80 <__subdf3+0x84>
    d6b8:	123ff804 	addi	r8,r2,-32
    d6bc:	01000804 	movi	r4,32
    d6c0:	1a10d83a 	srl	r8,r3,r8
    d6c4:	11000a26 	beq	r2,r4,d6f0 <__subdf3+0x8f4>
    d6c8:	01001004 	movi	r4,64
    d6cc:	2085c83a 	sub	r2,r4,r2
    d6d0:	1884983a 	sll	r2,r3,r2
    d6d4:	1444b03a 	or	r2,r2,r17
    d6d8:	1004c03a 	cmpne	r2,r2,zero
    d6dc:	40a2b03a 	or	r17,r8,r2
    d6e0:	0005883a 	mov	r2,zero
    d6e4:	003f8606 	br	d500 <__subdf3+0x704>
    d6e8:	0005883a 	mov	r2,zero
    d6ec:	003fdc06 	br	d660 <__subdf3+0x864>
    d6f0:	0005883a 	mov	r2,zero
    d6f4:	003ff706 	br	d6d4 <__subdf3+0x8d8>

0000d6f8 <__fixdfsi>:
    d6f8:	280cd53a 	srli	r6,r5,20
    d6fc:	00c00434 	movhi	r3,16
    d700:	18ffffc4 	addi	r3,r3,-1
    d704:	3181ffcc 	andi	r6,r6,2047
    d708:	01c0ff84 	movi	r7,1022
    d70c:	28c6703a 	and	r3,r5,r3
    d710:	280ad7fa 	srli	r5,r5,31
    d714:	3980120e 	bge	r7,r6,d760 <__fixdfsi+0x68>
    d718:	00810744 	movi	r2,1053
    d71c:	11800c16 	blt	r2,r6,d750 <__fixdfsi+0x58>
    d720:	00810cc4 	movi	r2,1075
    d724:	1185c83a 	sub	r2,r2,r6
    d728:	01c007c4 	movi	r7,31
    d72c:	18c00434 	orhi	r3,r3,16
    d730:	38800d16 	blt	r7,r2,d768 <__fixdfsi+0x70>
    d734:	31befb44 	addi	r6,r6,-1043
    d738:	2084d83a 	srl	r2,r4,r2
    d73c:	1986983a 	sll	r3,r3,r6
    d740:	1884b03a 	or	r2,r3,r2
    d744:	28000726 	beq	r5,zero,d764 <__fixdfsi+0x6c>
    d748:	0085c83a 	sub	r2,zero,r2
    d74c:	f800283a 	ret
    d750:	00a00034 	movhi	r2,32768
    d754:	10bfffc4 	addi	r2,r2,-1
    d758:	2885883a 	add	r2,r5,r2
    d75c:	f800283a 	ret
    d760:	0005883a 	mov	r2,zero
    d764:	f800283a 	ret
    d768:	008104c4 	movi	r2,1043
    d76c:	1185c83a 	sub	r2,r2,r6
    d770:	1884d83a 	srl	r2,r3,r2
    d774:	003ff306 	br	d744 <__fixdfsi+0x4c>

0000d778 <__floatsidf>:
    d778:	defffd04 	addi	sp,sp,-12
    d77c:	dfc00215 	stw	ra,8(sp)
    d780:	dc400115 	stw	r17,4(sp)
    d784:	dc000015 	stw	r16,0(sp)
    d788:	20002b26 	beq	r4,zero,d838 <__floatsidf+0xc0>
    d78c:	2023883a 	mov	r17,r4
    d790:	2020d7fa 	srli	r16,r4,31
    d794:	20002d16 	blt	r4,zero,d84c <__floatsidf+0xd4>
    d798:	8809883a 	mov	r4,r17
    d79c:	000d8fc0 	call	d8fc <__clzsi2>
    d7a0:	01410784 	movi	r5,1054
    d7a4:	288bc83a 	sub	r5,r5,r2
    d7a8:	01010cc4 	movi	r4,1075
    d7ac:	2149c83a 	sub	r4,r4,r5
    d7b0:	00c007c4 	movi	r3,31
    d7b4:	1900160e 	bge	r3,r4,d810 <__floatsidf+0x98>
    d7b8:	00c104c4 	movi	r3,1043
    d7bc:	1947c83a 	sub	r3,r3,r5
    d7c0:	88c6983a 	sll	r3,r17,r3
    d7c4:	00800434 	movhi	r2,16
    d7c8:	10bfffc4 	addi	r2,r2,-1
    d7cc:	1886703a 	and	r3,r3,r2
    d7d0:	2941ffcc 	andi	r5,r5,2047
    d7d4:	800d883a 	mov	r6,r16
    d7d8:	0005883a 	mov	r2,zero
    d7dc:	280a953a 	slli	r5,r5,20
    d7e0:	31803fcc 	andi	r6,r6,255
    d7e4:	01000434 	movhi	r4,16
    d7e8:	300c97fa 	slli	r6,r6,31
    d7ec:	213fffc4 	addi	r4,r4,-1
    d7f0:	1906703a 	and	r3,r3,r4
    d7f4:	1946b03a 	or	r3,r3,r5
    d7f8:	1986b03a 	or	r3,r3,r6
    d7fc:	dfc00217 	ldw	ra,8(sp)
    d800:	dc400117 	ldw	r17,4(sp)
    d804:	dc000017 	ldw	r16,0(sp)
    d808:	dec00304 	addi	sp,sp,12
    d80c:	f800283a 	ret
    d810:	00c002c4 	movi	r3,11
    d814:	1887c83a 	sub	r3,r3,r2
    d818:	88c6d83a 	srl	r3,r17,r3
    d81c:	8904983a 	sll	r2,r17,r4
    d820:	01000434 	movhi	r4,16
    d824:	213fffc4 	addi	r4,r4,-1
    d828:	2941ffcc 	andi	r5,r5,2047
    d82c:	1906703a 	and	r3,r3,r4
    d830:	800d883a 	mov	r6,r16
    d834:	003fe906 	br	d7dc <__floatsidf+0x64>
    d838:	000d883a 	mov	r6,zero
    d83c:	000b883a 	mov	r5,zero
    d840:	0007883a 	mov	r3,zero
    d844:	0005883a 	mov	r2,zero
    d848:	003fe406 	br	d7dc <__floatsidf+0x64>
    d84c:	0123c83a 	sub	r17,zero,r4
    d850:	003fd106 	br	d798 <__floatsidf+0x20>

0000d854 <__floatunsidf>:
    d854:	defffe04 	addi	sp,sp,-8
    d858:	dc000015 	stw	r16,0(sp)
    d85c:	dfc00115 	stw	ra,4(sp)
    d860:	2021883a 	mov	r16,r4
    d864:	20002226 	beq	r4,zero,d8f0 <__floatunsidf+0x9c>
    d868:	000d8fc0 	call	d8fc <__clzsi2>
    d86c:	01010784 	movi	r4,1054
    d870:	2089c83a 	sub	r4,r4,r2
    d874:	01810cc4 	movi	r6,1075
    d878:	310dc83a 	sub	r6,r6,r4
    d87c:	00c007c4 	movi	r3,31
    d880:	1980120e 	bge	r3,r6,d8cc <__floatunsidf+0x78>
    d884:	00c104c4 	movi	r3,1043
    d888:	1907c83a 	sub	r3,r3,r4
    d88c:	80ca983a 	sll	r5,r16,r3
    d890:	00800434 	movhi	r2,16
    d894:	10bfffc4 	addi	r2,r2,-1
    d898:	2101ffcc 	andi	r4,r4,2047
    d89c:	0021883a 	mov	r16,zero
    d8a0:	288a703a 	and	r5,r5,r2
    d8a4:	2008953a 	slli	r4,r4,20
    d8a8:	00c00434 	movhi	r3,16
    d8ac:	18ffffc4 	addi	r3,r3,-1
    d8b0:	28c6703a 	and	r3,r5,r3
    d8b4:	8005883a 	mov	r2,r16
    d8b8:	1906b03a 	or	r3,r3,r4
    d8bc:	dfc00117 	ldw	ra,4(sp)
    d8c0:	dc000017 	ldw	r16,0(sp)
    d8c4:	dec00204 	addi	sp,sp,8
    d8c8:	f800283a 	ret
    d8cc:	00c002c4 	movi	r3,11
    d8d0:	188bc83a 	sub	r5,r3,r2
    d8d4:	814ad83a 	srl	r5,r16,r5
    d8d8:	00c00434 	movhi	r3,16
    d8dc:	18ffffc4 	addi	r3,r3,-1
    d8e0:	81a0983a 	sll	r16,r16,r6
    d8e4:	2101ffcc 	andi	r4,r4,2047
    d8e8:	28ca703a 	and	r5,r5,r3
    d8ec:	003fed06 	br	d8a4 <__floatunsidf+0x50>
    d8f0:	0009883a 	mov	r4,zero
    d8f4:	000b883a 	mov	r5,zero
    d8f8:	003fea06 	br	d8a4 <__floatunsidf+0x50>

0000d8fc <__clzsi2>:
    d8fc:	00bfffd4 	movui	r2,65535
    d900:	11000536 	bltu	r2,r4,d918 <__clzsi2+0x1c>
    d904:	00803fc4 	movi	r2,255
    d908:	11000f36 	bltu	r2,r4,d948 <__clzsi2+0x4c>
    d90c:	00800804 	movi	r2,32
    d910:	0007883a 	mov	r3,zero
    d914:	00000506 	br	d92c <__clzsi2+0x30>
    d918:	00804034 	movhi	r2,256
    d91c:	10bfffc4 	addi	r2,r2,-1
    d920:	11000c2e 	bgeu	r2,r4,d954 <__clzsi2+0x58>
    d924:	00800204 	movi	r2,8
    d928:	00c00604 	movi	r3,24
    d92c:	20c8d83a 	srl	r4,r4,r3
    d930:	00c000b4 	movhi	r3,2
    d934:	18e90c04 	addi	r3,r3,-23504
    d938:	1909883a 	add	r4,r3,r4
    d93c:	20c00003 	ldbu	r3,0(r4)
    d940:	10c5c83a 	sub	r2,r2,r3
    d944:	f800283a 	ret
    d948:	00800604 	movi	r2,24
    d94c:	00c00204 	movi	r3,8
    d950:	003ff606 	br	d92c <__clzsi2+0x30>
    d954:	00800404 	movi	r2,16
    d958:	1007883a 	mov	r3,r2
    d95c:	003ff306 	br	d92c <__clzsi2+0x30>

0000d960 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d960:	defffe04 	addi	sp,sp,-8
    d964:	dfc00115 	stw	ra,4(sp)
    d968:	df000015 	stw	fp,0(sp)
    d96c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d970:	d0a00d17 	ldw	r2,-32716(gp)
    d974:	10000326 	beq	r2,zero,d984 <alt_get_errno+0x24>
    d978:	d0a00d17 	ldw	r2,-32716(gp)
    d97c:	103ee83a 	callr	r2
    d980:	00000106 	br	d988 <alt_get_errno+0x28>
    d984:	d0a7fe04 	addi	r2,gp,-24584
}
    d988:	e037883a 	mov	sp,fp
    d98c:	dfc00117 	ldw	ra,4(sp)
    d990:	df000017 	ldw	fp,0(sp)
    d994:	dec00204 	addi	sp,sp,8
    d998:	f800283a 	ret

0000d99c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    d99c:	defffb04 	addi	sp,sp,-20
    d9a0:	dfc00415 	stw	ra,16(sp)
    d9a4:	df000315 	stw	fp,12(sp)
    d9a8:	df000304 	addi	fp,sp,12
    d9ac:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    d9b0:	e0bfff17 	ldw	r2,-4(fp)
    d9b4:	10000616 	blt	r2,zero,d9d0 <close+0x34>
    d9b8:	e0bfff17 	ldw	r2,-4(fp)
    d9bc:	10c00324 	muli	r3,r2,12
    d9c0:	008000b4 	movhi	r2,2
    d9c4:	10ac3b04 	addi	r2,r2,-20244
    d9c8:	1885883a 	add	r2,r3,r2
    d9cc:	00000106 	br	d9d4 <close+0x38>
    d9d0:	0005883a 	mov	r2,zero
    d9d4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    d9d8:	e0bffd17 	ldw	r2,-12(fp)
    d9dc:	10001926 	beq	r2,zero,da44 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    d9e0:	e0bffd17 	ldw	r2,-12(fp)
    d9e4:	10800017 	ldw	r2,0(r2)
    d9e8:	10800417 	ldw	r2,16(r2)
    d9ec:	10000626 	beq	r2,zero,da08 <close+0x6c>
    d9f0:	e0bffd17 	ldw	r2,-12(fp)
    d9f4:	10800017 	ldw	r2,0(r2)
    d9f8:	10800417 	ldw	r2,16(r2)
    d9fc:	e13ffd17 	ldw	r4,-12(fp)
    da00:	103ee83a 	callr	r2
    da04:	00000106 	br	da0c <close+0x70>
    da08:	0005883a 	mov	r2,zero
    da0c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    da10:	e13fff17 	ldw	r4,-4(fp)
    da14:	000e0540 	call	e054 <alt_release_fd>
    if (rval < 0)
    da18:	e0bffe17 	ldw	r2,-8(fp)
    da1c:	1000070e 	bge	r2,zero,da3c <close+0xa0>
    {
      ALT_ERRNO = -rval;
    da20:	000d9600 	call	d960 <alt_get_errno>
    da24:	1007883a 	mov	r3,r2
    da28:	e0bffe17 	ldw	r2,-8(fp)
    da2c:	0085c83a 	sub	r2,zero,r2
    da30:	18800015 	stw	r2,0(r3)
      return -1;
    da34:	00bfffc4 	movi	r2,-1
    da38:	00000706 	br	da58 <close+0xbc>
    }
    return 0;
    da3c:	0005883a 	mov	r2,zero
    da40:	00000506 	br	da58 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    da44:	000d9600 	call	d960 <alt_get_errno>
    da48:	1007883a 	mov	r3,r2
    da4c:	00801444 	movi	r2,81
    da50:	18800015 	stw	r2,0(r3)
    return -1;
    da54:	00bfffc4 	movi	r2,-1
  }
}
    da58:	e037883a 	mov	sp,fp
    da5c:	dfc00117 	ldw	ra,4(sp)
    da60:	df000017 	ldw	fp,0(sp)
    da64:	dec00204 	addi	sp,sp,8
    da68:	f800283a 	ret

0000da6c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    da6c:	defffc04 	addi	sp,sp,-16
    da70:	df000315 	stw	fp,12(sp)
    da74:	df000304 	addi	fp,sp,12
    da78:	e13ffd15 	stw	r4,-12(fp)
    da7c:	e17ffe15 	stw	r5,-8(fp)
    da80:	e1bfff15 	stw	r6,-4(fp)
  return len;
    da84:	e0bfff17 	ldw	r2,-4(fp)
}
    da88:	e037883a 	mov	sp,fp
    da8c:	df000017 	ldw	fp,0(sp)
    da90:	dec00104 	addi	sp,sp,4
    da94:	f800283a 	ret

0000da98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    da98:	defffe04 	addi	sp,sp,-8
    da9c:	dfc00115 	stw	ra,4(sp)
    daa0:	df000015 	stw	fp,0(sp)
    daa4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    daa8:	d0a00d17 	ldw	r2,-32716(gp)
    daac:	10000326 	beq	r2,zero,dabc <alt_get_errno+0x24>
    dab0:	d0a00d17 	ldw	r2,-32716(gp)
    dab4:	103ee83a 	callr	r2
    dab8:	00000106 	br	dac0 <alt_get_errno+0x28>
    dabc:	d0a7fe04 	addi	r2,gp,-24584
}
    dac0:	e037883a 	mov	sp,fp
    dac4:	dfc00117 	ldw	ra,4(sp)
    dac8:	df000017 	ldw	fp,0(sp)
    dacc:	dec00204 	addi	sp,sp,8
    dad0:	f800283a 	ret

0000dad4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    dad4:	defffb04 	addi	sp,sp,-20
    dad8:	dfc00415 	stw	ra,16(sp)
    dadc:	df000315 	stw	fp,12(sp)
    dae0:	df000304 	addi	fp,sp,12
    dae4:	e13ffe15 	stw	r4,-8(fp)
    dae8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    daec:	e0bffe17 	ldw	r2,-8(fp)
    daf0:	10000616 	blt	r2,zero,db0c <fstat+0x38>
    daf4:	e0bffe17 	ldw	r2,-8(fp)
    daf8:	10c00324 	muli	r3,r2,12
    dafc:	008000b4 	movhi	r2,2
    db00:	10ac3b04 	addi	r2,r2,-20244
    db04:	1885883a 	add	r2,r3,r2
    db08:	00000106 	br	db10 <fstat+0x3c>
    db0c:	0005883a 	mov	r2,zero
    db10:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    db14:	e0bffd17 	ldw	r2,-12(fp)
    db18:	10001026 	beq	r2,zero,db5c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    db1c:	e0bffd17 	ldw	r2,-12(fp)
    db20:	10800017 	ldw	r2,0(r2)
    db24:	10800817 	ldw	r2,32(r2)
    db28:	10000726 	beq	r2,zero,db48 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    db2c:	e0bffd17 	ldw	r2,-12(fp)
    db30:	10800017 	ldw	r2,0(r2)
    db34:	10800817 	ldw	r2,32(r2)
    db38:	e17fff17 	ldw	r5,-4(fp)
    db3c:	e13ffd17 	ldw	r4,-12(fp)
    db40:	103ee83a 	callr	r2
    db44:	00000a06 	br	db70 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    db48:	e0bfff17 	ldw	r2,-4(fp)
    db4c:	00c80004 	movi	r3,8192
    db50:	10c00115 	stw	r3,4(r2)
      return 0;
    db54:	0005883a 	mov	r2,zero
    db58:	00000506 	br	db70 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    db5c:	000da980 	call	da98 <alt_get_errno>
    db60:	1007883a 	mov	r3,r2
    db64:	00801444 	movi	r2,81
    db68:	18800015 	stw	r2,0(r3)
    return -1;
    db6c:	00bfffc4 	movi	r2,-1
  }
}
    db70:	e037883a 	mov	sp,fp
    db74:	dfc00117 	ldw	ra,4(sp)
    db78:	df000017 	ldw	fp,0(sp)
    db7c:	dec00204 	addi	sp,sp,8
    db80:	f800283a 	ret

0000db84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    db84:	defffe04 	addi	sp,sp,-8
    db88:	dfc00115 	stw	ra,4(sp)
    db8c:	df000015 	stw	fp,0(sp)
    db90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    db94:	d0a00d17 	ldw	r2,-32716(gp)
    db98:	10000326 	beq	r2,zero,dba8 <alt_get_errno+0x24>
    db9c:	d0a00d17 	ldw	r2,-32716(gp)
    dba0:	103ee83a 	callr	r2
    dba4:	00000106 	br	dbac <alt_get_errno+0x28>
    dba8:	d0a7fe04 	addi	r2,gp,-24584
}
    dbac:	e037883a 	mov	sp,fp
    dbb0:	dfc00117 	ldw	ra,4(sp)
    dbb4:	df000017 	ldw	fp,0(sp)
    dbb8:	dec00204 	addi	sp,sp,8
    dbbc:	f800283a 	ret

0000dbc0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    dbc0:	deffed04 	addi	sp,sp,-76
    dbc4:	dfc01215 	stw	ra,72(sp)
    dbc8:	df001115 	stw	fp,68(sp)
    dbcc:	df001104 	addi	fp,sp,68
    dbd0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    dbd4:	e0bfff17 	ldw	r2,-4(fp)
    dbd8:	10000616 	blt	r2,zero,dbf4 <isatty+0x34>
    dbdc:	e0bfff17 	ldw	r2,-4(fp)
    dbe0:	10c00324 	muli	r3,r2,12
    dbe4:	008000b4 	movhi	r2,2
    dbe8:	10ac3b04 	addi	r2,r2,-20244
    dbec:	1885883a 	add	r2,r3,r2
    dbf0:	00000106 	br	dbf8 <isatty+0x38>
    dbf4:	0005883a 	mov	r2,zero
    dbf8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    dbfc:	e0bfef17 	ldw	r2,-68(fp)
    dc00:	10000e26 	beq	r2,zero,dc3c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    dc04:	e0bfef17 	ldw	r2,-68(fp)
    dc08:	10800017 	ldw	r2,0(r2)
    dc0c:	10800817 	ldw	r2,32(r2)
    dc10:	1000021e 	bne	r2,zero,dc1c <isatty+0x5c>
    {
      return 1;
    dc14:	00800044 	movi	r2,1
    dc18:	00000d06 	br	dc50 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    dc1c:	e0bff004 	addi	r2,fp,-64
    dc20:	100b883a 	mov	r5,r2
    dc24:	e13fff17 	ldw	r4,-4(fp)
    dc28:	000dad40 	call	dad4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    dc2c:	e0bff117 	ldw	r2,-60(fp)
    dc30:	10880020 	cmpeqi	r2,r2,8192
    dc34:	10803fcc 	andi	r2,r2,255
    dc38:	00000506 	br	dc50 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    dc3c:	000db840 	call	db84 <alt_get_errno>
    dc40:	1007883a 	mov	r3,r2
    dc44:	00801444 	movi	r2,81
    dc48:	18800015 	stw	r2,0(r3)
    return 0;
    dc4c:	0005883a 	mov	r2,zero
  }
}
    dc50:	e037883a 	mov	sp,fp
    dc54:	dfc00117 	ldw	ra,4(sp)
    dc58:	df000017 	ldw	fp,0(sp)
    dc5c:	dec00204 	addi	sp,sp,8
    dc60:	f800283a 	ret

0000dc64 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    dc64:	defffc04 	addi	sp,sp,-16
    dc68:	df000315 	stw	fp,12(sp)
    dc6c:	df000304 	addi	fp,sp,12
    dc70:	e13ffd15 	stw	r4,-12(fp)
    dc74:	e17ffe15 	stw	r5,-8(fp)
    dc78:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    dc7c:	e0fffe17 	ldw	r3,-8(fp)
    dc80:	e0bffd17 	ldw	r2,-12(fp)
    dc84:	18800c26 	beq	r3,r2,dcb8 <alt_load_section+0x54>
  {
    while( to != end )
    dc88:	00000806 	br	dcac <alt_load_section+0x48>
    {
      *to++ = *from++;
    dc8c:	e0bffe17 	ldw	r2,-8(fp)
    dc90:	10c00104 	addi	r3,r2,4
    dc94:	e0fffe15 	stw	r3,-8(fp)
    dc98:	e0fffd17 	ldw	r3,-12(fp)
    dc9c:	19000104 	addi	r4,r3,4
    dca0:	e13ffd15 	stw	r4,-12(fp)
    dca4:	18c00017 	ldw	r3,0(r3)
    dca8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    dcac:	e0fffe17 	ldw	r3,-8(fp)
    dcb0:	e0bfff17 	ldw	r2,-4(fp)
    dcb4:	18bff51e 	bne	r3,r2,dc8c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    dcb8:	0001883a 	nop
    dcbc:	e037883a 	mov	sp,fp
    dcc0:	df000017 	ldw	fp,0(sp)
    dcc4:	dec00104 	addi	sp,sp,4
    dcc8:	f800283a 	ret

0000dccc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    dccc:	defffe04 	addi	sp,sp,-8
    dcd0:	dfc00115 	stw	ra,4(sp)
    dcd4:	df000015 	stw	fp,0(sp)
    dcd8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    dcdc:	018000b4 	movhi	r6,2
    dce0:	31b1aa04 	addi	r6,r6,-14680
    dce4:	014000b4 	movhi	r5,2
    dce8:	2969f304 	addi	r5,r5,-22580
    dcec:	010000b4 	movhi	r4,2
    dcf0:	2131aa04 	addi	r4,r4,-14680
    dcf4:	000dc640 	call	dc64 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    dcf8:	01800034 	movhi	r6,0
    dcfc:	31809204 	addi	r6,r6,584
    dd00:	01400034 	movhi	r5,0
    dd04:	29400804 	addi	r5,r5,32
    dd08:	01000034 	movhi	r4,0
    dd0c:	21000804 	addi	r4,r4,32
    dd10:	000dc640 	call	dc64 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    dd14:	018000b4 	movhi	r6,2
    dd18:	31a9f304 	addi	r6,r6,-22580
    dd1c:	014000b4 	movhi	r5,2
    dd20:	29673004 	addi	r5,r5,-25408
    dd24:	010000b4 	movhi	r4,2
    dd28:	21273004 	addi	r4,r4,-25408
    dd2c:	000dc640 	call	dc64 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    dd30:	00189640 	call	18964 <alt_dcache_flush_all>
  alt_icache_flush_all();
    dd34:	0018bb40 	call	18bb4 <alt_icache_flush_all>
}
    dd38:	0001883a 	nop
    dd3c:	e037883a 	mov	sp,fp
    dd40:	dfc00117 	ldw	ra,4(sp)
    dd44:	df000017 	ldw	fp,0(sp)
    dd48:	dec00204 	addi	sp,sp,8
    dd4c:	f800283a 	ret

0000dd50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dd50:	defffe04 	addi	sp,sp,-8
    dd54:	dfc00115 	stw	ra,4(sp)
    dd58:	df000015 	stw	fp,0(sp)
    dd5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    dd60:	d0a00d17 	ldw	r2,-32716(gp)
    dd64:	10000326 	beq	r2,zero,dd74 <alt_get_errno+0x24>
    dd68:	d0a00d17 	ldw	r2,-32716(gp)
    dd6c:	103ee83a 	callr	r2
    dd70:	00000106 	br	dd78 <alt_get_errno+0x28>
    dd74:	d0a7fe04 	addi	r2,gp,-24584
}
    dd78:	e037883a 	mov	sp,fp
    dd7c:	dfc00117 	ldw	ra,4(sp)
    dd80:	df000017 	ldw	fp,0(sp)
    dd84:	dec00204 	addi	sp,sp,8
    dd88:	f800283a 	ret

0000dd8c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    dd8c:	defff904 	addi	sp,sp,-28
    dd90:	dfc00615 	stw	ra,24(sp)
    dd94:	df000515 	stw	fp,20(sp)
    dd98:	df000504 	addi	fp,sp,20
    dd9c:	e13ffd15 	stw	r4,-12(fp)
    dda0:	e17ffe15 	stw	r5,-8(fp)
    dda4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    dda8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ddac:	e0bffd17 	ldw	r2,-12(fp)
    ddb0:	10000616 	blt	r2,zero,ddcc <lseek+0x40>
    ddb4:	e0bffd17 	ldw	r2,-12(fp)
    ddb8:	10c00324 	muli	r3,r2,12
    ddbc:	008000b4 	movhi	r2,2
    ddc0:	10ac3b04 	addi	r2,r2,-20244
    ddc4:	1885883a 	add	r2,r3,r2
    ddc8:	00000106 	br	ddd0 <lseek+0x44>
    ddcc:	0005883a 	mov	r2,zero
    ddd0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    ddd4:	e0bffc17 	ldw	r2,-16(fp)
    ddd8:	10001026 	beq	r2,zero,de1c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    dddc:	e0bffc17 	ldw	r2,-16(fp)
    dde0:	10800017 	ldw	r2,0(r2)
    dde4:	10800717 	ldw	r2,28(r2)
    dde8:	10000926 	beq	r2,zero,de10 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    ddec:	e0bffc17 	ldw	r2,-16(fp)
    ddf0:	10800017 	ldw	r2,0(r2)
    ddf4:	10800717 	ldw	r2,28(r2)
    ddf8:	e1bfff17 	ldw	r6,-4(fp)
    ddfc:	e17ffe17 	ldw	r5,-8(fp)
    de00:	e13ffc17 	ldw	r4,-16(fp)
    de04:	103ee83a 	callr	r2
    de08:	e0bffb15 	stw	r2,-20(fp)
    de0c:	00000506 	br	de24 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    de10:	00bfde84 	movi	r2,-134
    de14:	e0bffb15 	stw	r2,-20(fp)
    de18:	00000206 	br	de24 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    de1c:	00bfebc4 	movi	r2,-81
    de20:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    de24:	e0bffb17 	ldw	r2,-20(fp)
    de28:	1000070e 	bge	r2,zero,de48 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    de2c:	000dd500 	call	dd50 <alt_get_errno>
    de30:	1007883a 	mov	r3,r2
    de34:	e0bffb17 	ldw	r2,-20(fp)
    de38:	0085c83a 	sub	r2,zero,r2
    de3c:	18800015 	stw	r2,0(r3)
    rc = -1;
    de40:	00bfffc4 	movi	r2,-1
    de44:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    de48:	e0bffb17 	ldw	r2,-20(fp)
}
    de4c:	e037883a 	mov	sp,fp
    de50:	dfc00117 	ldw	ra,4(sp)
    de54:	df000017 	ldw	fp,0(sp)
    de58:	dec00204 	addi	sp,sp,8
    de5c:	f800283a 	ret

0000de60 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    de60:	defff904 	addi	sp,sp,-28
    de64:	dfc00615 	stw	ra,24(sp)
    de68:	df000515 	stw	fp,20(sp)
    de6c:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    de70:	0009883a 	mov	r4,zero
    de74:	0015dc00 	call	15dc0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    de78:	000ee1c0 	call	ee1c <OSInit>
    de7c:	01000044 	movi	r4,1
    de80:	001377c0 	call	1377c <OSSemCreate>
    de84:	d0a80415 	stw	r2,-24560(gp)
    de88:	01000044 	movi	r4,1
    de8c:	001377c0 	call	1377c <OSSemCreate>
    de90:	d0a80615 	stw	r2,-24552(gp)
    de94:	d0a7ff04 	addi	r2,gp,-24580
    de98:	e0bffc15 	stw	r2,-16(fp)
    de9c:	00800044 	movi	r2,1
    dea0:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    dea4:	e0bffd0b 	ldhu	r2,-12(fp)
    dea8:	1009883a 	mov	r4,r2
    deac:	001377c0 	call	1377c <OSSemCreate>
    deb0:	1007883a 	mov	r3,r2
    deb4:	e0bffc17 	ldw	r2,-16(fp)
    deb8:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    debc:	0015df80 	call	15df8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    dec0:	018000b4 	movhi	r6,2
    dec4:	31a94f04 	addi	r6,r6,-23236
    dec8:	014000b4 	movhi	r5,2
    decc:	29694f04 	addi	r5,r5,-23236
    ded0:	010000b4 	movhi	r4,2
    ded4:	21294f04 	addi	r4,r4,-23236
    ded8:	0018cac0 	call	18cac <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    dedc:	0018a640 	call	18a64 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    dee0:	010000b4 	movhi	r4,2
    dee4:	2122b104 	addi	r4,r4,-30012
    dee8:	001992c0 	call	1992c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    deec:	d0a80017 	ldw	r2,-24576(gp)
    def0:	d0e80117 	ldw	r3,-24572(gp)
    def4:	d1280217 	ldw	r4,-24568(gp)
    def8:	200d883a 	mov	r6,r4
    defc:	180b883a 	mov	r5,r3
    df00:	1009883a 	mov	r4,r2
    df04:	000073c0 	call	73c <main>
    df08:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    df0c:	01000044 	movi	r4,1
    df10:	000d99c0 	call	d99c <close>
  exit (result);
    df14:	e13ffb17 	ldw	r4,-20(fp)
    df18:	00199400 	call	19940 <exit>

0000df1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    df1c:	defffe04 	addi	sp,sp,-8
    df20:	dfc00115 	stw	ra,4(sp)
    df24:	df000015 	stw	fp,0(sp)
    df28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    df2c:	d0a00d17 	ldw	r2,-32716(gp)
    df30:	10000326 	beq	r2,zero,df40 <alt_get_errno+0x24>
    df34:	d0a00d17 	ldw	r2,-32716(gp)
    df38:	103ee83a 	callr	r2
    df3c:	00000106 	br	df44 <alt_get_errno+0x28>
    df40:	d0a7fe04 	addi	r2,gp,-24584
}
    df44:	e037883a 	mov	sp,fp
    df48:	dfc00117 	ldw	ra,4(sp)
    df4c:	df000017 	ldw	fp,0(sp)
    df50:	dec00204 	addi	sp,sp,8
    df54:	f800283a 	ret

0000df58 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    df58:	defff904 	addi	sp,sp,-28
    df5c:	dfc00615 	stw	ra,24(sp)
    df60:	df000515 	stw	fp,20(sp)
    df64:	df000504 	addi	fp,sp,20
    df68:	e13ffd15 	stw	r4,-12(fp)
    df6c:	e17ffe15 	stw	r5,-8(fp)
    df70:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    df74:	e0bffd17 	ldw	r2,-12(fp)
    df78:	10000616 	blt	r2,zero,df94 <read+0x3c>
    df7c:	e0bffd17 	ldw	r2,-12(fp)
    df80:	10c00324 	muli	r3,r2,12
    df84:	008000b4 	movhi	r2,2
    df88:	10ac3b04 	addi	r2,r2,-20244
    df8c:	1885883a 	add	r2,r3,r2
    df90:	00000106 	br	df98 <read+0x40>
    df94:	0005883a 	mov	r2,zero
    df98:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    df9c:	e0bffb17 	ldw	r2,-20(fp)
    dfa0:	10002226 	beq	r2,zero,e02c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    dfa4:	e0bffb17 	ldw	r2,-20(fp)
    dfa8:	10800217 	ldw	r2,8(r2)
    dfac:	108000cc 	andi	r2,r2,3
    dfb0:	10800060 	cmpeqi	r2,r2,1
    dfb4:	1000181e 	bne	r2,zero,e018 <read+0xc0>
        (fd->dev->read))
    dfb8:	e0bffb17 	ldw	r2,-20(fp)
    dfbc:	10800017 	ldw	r2,0(r2)
    dfc0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    dfc4:	10001426 	beq	r2,zero,e018 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    dfc8:	e0bffb17 	ldw	r2,-20(fp)
    dfcc:	10800017 	ldw	r2,0(r2)
    dfd0:	10800517 	ldw	r2,20(r2)
    dfd4:	e0ffff17 	ldw	r3,-4(fp)
    dfd8:	180d883a 	mov	r6,r3
    dfdc:	e17ffe17 	ldw	r5,-8(fp)
    dfe0:	e13ffb17 	ldw	r4,-20(fp)
    dfe4:	103ee83a 	callr	r2
    dfe8:	e0bffc15 	stw	r2,-16(fp)
    dfec:	e0bffc17 	ldw	r2,-16(fp)
    dff0:	1000070e 	bge	r2,zero,e010 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    dff4:	000df1c0 	call	df1c <alt_get_errno>
    dff8:	1007883a 	mov	r3,r2
    dffc:	e0bffc17 	ldw	r2,-16(fp)
    e000:	0085c83a 	sub	r2,zero,r2
    e004:	18800015 	stw	r2,0(r3)
          return -1;
    e008:	00bfffc4 	movi	r2,-1
    e00c:	00000c06 	br	e040 <read+0xe8>
        }
        return rval;
    e010:	e0bffc17 	ldw	r2,-16(fp)
    e014:	00000a06 	br	e040 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    e018:	000df1c0 	call	df1c <alt_get_errno>
    e01c:	1007883a 	mov	r3,r2
    e020:	00800344 	movi	r2,13
    e024:	18800015 	stw	r2,0(r3)
    e028:	00000406 	br	e03c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    e02c:	000df1c0 	call	df1c <alt_get_errno>
    e030:	1007883a 	mov	r3,r2
    e034:	00801444 	movi	r2,81
    e038:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e03c:	00bfffc4 	movi	r2,-1
}
    e040:	e037883a 	mov	sp,fp
    e044:	dfc00117 	ldw	ra,4(sp)
    e048:	df000017 	ldw	fp,0(sp)
    e04c:	dec00204 	addi	sp,sp,8
    e050:	f800283a 	ret

0000e054 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    e054:	defffe04 	addi	sp,sp,-8
    e058:	df000115 	stw	fp,4(sp)
    e05c:	df000104 	addi	fp,sp,4
    e060:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    e064:	e0bfff17 	ldw	r2,-4(fp)
    e068:	108000d0 	cmplti	r2,r2,3
    e06c:	10000d1e 	bne	r2,zero,e0a4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    e070:	008000b4 	movhi	r2,2
    e074:	10ac3b04 	addi	r2,r2,-20244
    e078:	e0ffff17 	ldw	r3,-4(fp)
    e07c:	18c00324 	muli	r3,r3,12
    e080:	10c5883a 	add	r2,r2,r3
    e084:	10800204 	addi	r2,r2,8
    e088:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    e08c:	008000b4 	movhi	r2,2
    e090:	10ac3b04 	addi	r2,r2,-20244
    e094:	e0ffff17 	ldw	r3,-4(fp)
    e098:	18c00324 	muli	r3,r3,12
    e09c:	10c5883a 	add	r2,r2,r3
    e0a0:	10000015 	stw	zero,0(r2)
  }
}
    e0a4:	0001883a 	nop
    e0a8:	e037883a 	mov	sp,fp
    e0ac:	df000017 	ldw	fp,0(sp)
    e0b0:	dec00104 	addi	sp,sp,4
    e0b4:	f800283a 	ret

0000e0b8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    e0b8:	defff904 	addi	sp,sp,-28
    e0bc:	df000615 	stw	fp,24(sp)
    e0c0:	df000604 	addi	fp,sp,24
    e0c4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e0c8:	0005303a 	rdctl	r2,status
    e0cc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e0d0:	e0fffe17 	ldw	r3,-8(fp)
    e0d4:	00bfff84 	movi	r2,-2
    e0d8:	1884703a 	and	r2,r3,r2
    e0dc:	1001703a 	wrctl	status,r2
  
  return context;
    e0e0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    e0e4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    e0e8:	d0a00e17 	ldw	r2,-32712(gp)
    e0ec:	10c000c4 	addi	r3,r2,3
    e0f0:	00bfff04 	movi	r2,-4
    e0f4:	1884703a 	and	r2,r3,r2
    e0f8:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    e0fc:	d0e00e17 	ldw	r3,-32712(gp)
    e100:	e0bfff17 	ldw	r2,-4(fp)
    e104:	1887883a 	add	r3,r3,r2
    e108:	00810034 	movhi	r2,1024
    e10c:	10800004 	addi	r2,r2,0
    e110:	10c0062e 	bgeu	r2,r3,e12c <sbrk+0x74>
    e114:	e0bffb17 	ldw	r2,-20(fp)
    e118:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e11c:	e0bffa17 	ldw	r2,-24(fp)
    e120:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    e124:	00bfffc4 	movi	r2,-1
    e128:	00000b06 	br	e158 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    e12c:	d0a00e17 	ldw	r2,-32712(gp)
    e130:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    e134:	d0e00e17 	ldw	r3,-32712(gp)
    e138:	e0bfff17 	ldw	r2,-4(fp)
    e13c:	1885883a 	add	r2,r3,r2
    e140:	d0a00e15 	stw	r2,-32712(gp)
    e144:	e0bffb17 	ldw	r2,-20(fp)
    e148:	e0bffc15 	stw	r2,-16(fp)
    e14c:	e0bffc17 	ldw	r2,-16(fp)
    e150:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    e154:	e0bffd17 	ldw	r2,-12(fp)
} 
    e158:	e037883a 	mov	sp,fp
    e15c:	df000017 	ldw	fp,0(sp)
    e160:	dec00104 	addi	sp,sp,4
    e164:	f800283a 	ret

0000e168 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e168:	defffe04 	addi	sp,sp,-8
    e16c:	dfc00115 	stw	ra,4(sp)
    e170:	df000015 	stw	fp,0(sp)
    e174:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e178:	d0a00d17 	ldw	r2,-32716(gp)
    e17c:	10000326 	beq	r2,zero,e18c <alt_get_errno+0x24>
    e180:	d0a00d17 	ldw	r2,-32716(gp)
    e184:	103ee83a 	callr	r2
    e188:	00000106 	br	e190 <alt_get_errno+0x28>
    e18c:	d0a7fe04 	addi	r2,gp,-24584
}
    e190:	e037883a 	mov	sp,fp
    e194:	dfc00117 	ldw	ra,4(sp)
    e198:	df000017 	ldw	fp,0(sp)
    e19c:	dec00204 	addi	sp,sp,8
    e1a0:	f800283a 	ret

0000e1a4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    e1a4:	defff904 	addi	sp,sp,-28
    e1a8:	dfc00615 	stw	ra,24(sp)
    e1ac:	df000515 	stw	fp,20(sp)
    e1b0:	df000504 	addi	fp,sp,20
    e1b4:	e13ffd15 	stw	r4,-12(fp)
    e1b8:	e17ffe15 	stw	r5,-8(fp)
    e1bc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e1c0:	e0bffd17 	ldw	r2,-12(fp)
    e1c4:	10000616 	blt	r2,zero,e1e0 <write+0x3c>
    e1c8:	e0bffd17 	ldw	r2,-12(fp)
    e1cc:	10c00324 	muli	r3,r2,12
    e1d0:	008000b4 	movhi	r2,2
    e1d4:	10ac3b04 	addi	r2,r2,-20244
    e1d8:	1885883a 	add	r2,r3,r2
    e1dc:	00000106 	br	e1e4 <write+0x40>
    e1e0:	0005883a 	mov	r2,zero
    e1e4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    e1e8:	e0bffb17 	ldw	r2,-20(fp)
    e1ec:	10002126 	beq	r2,zero,e274 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    e1f0:	e0bffb17 	ldw	r2,-20(fp)
    e1f4:	10800217 	ldw	r2,8(r2)
    e1f8:	108000cc 	andi	r2,r2,3
    e1fc:	10001826 	beq	r2,zero,e260 <write+0xbc>
    e200:	e0bffb17 	ldw	r2,-20(fp)
    e204:	10800017 	ldw	r2,0(r2)
    e208:	10800617 	ldw	r2,24(r2)
    e20c:	10001426 	beq	r2,zero,e260 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    e210:	e0bffb17 	ldw	r2,-20(fp)
    e214:	10800017 	ldw	r2,0(r2)
    e218:	10800617 	ldw	r2,24(r2)
    e21c:	e0ffff17 	ldw	r3,-4(fp)
    e220:	180d883a 	mov	r6,r3
    e224:	e17ffe17 	ldw	r5,-8(fp)
    e228:	e13ffb17 	ldw	r4,-20(fp)
    e22c:	103ee83a 	callr	r2
    e230:	e0bffc15 	stw	r2,-16(fp)
    e234:	e0bffc17 	ldw	r2,-16(fp)
    e238:	1000070e 	bge	r2,zero,e258 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    e23c:	000e1680 	call	e168 <alt_get_errno>
    e240:	1007883a 	mov	r3,r2
    e244:	e0bffc17 	ldw	r2,-16(fp)
    e248:	0085c83a 	sub	r2,zero,r2
    e24c:	18800015 	stw	r2,0(r3)
        return -1;
    e250:	00bfffc4 	movi	r2,-1
    e254:	00000c06 	br	e288 <write+0xe4>
      }
      return rval;
    e258:	e0bffc17 	ldw	r2,-16(fp)
    e25c:	00000a06 	br	e288 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    e260:	000e1680 	call	e168 <alt_get_errno>
    e264:	1007883a 	mov	r3,r2
    e268:	00800344 	movi	r2,13
    e26c:	18800015 	stw	r2,0(r3)
    e270:	00000406 	br	e284 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    e274:	000e1680 	call	e168 <alt_get_errno>
    e278:	1007883a 	mov	r3,r2
    e27c:	00801444 	movi	r2,81
    e280:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e284:	00bfffc4 	movi	r2,-1
}
    e288:	e037883a 	mov	sp,fp
    e28c:	dfc00117 	ldw	ra,4(sp)
    e290:	df000017 	ldw	fp,0(sp)
    e294:	dec00204 	addi	sp,sp,8
    e298:	f800283a 	ret

0000e29c <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    e29c:	deffdf04 	addi	sp,sp,-132
    e2a0:	dfc02015 	stw	ra,128(sp)
    e2a4:	df001f15 	stw	fp,124(sp)
    e2a8:	df001f04 	addi	fp,sp,124
    e2ac:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    e2b0:	e0bfe204 	addi	r2,fp,-120
    e2b4:	100b883a 	mov	r5,r2
    e2b8:	01003fc4 	movi	r4,255
    e2bc:	00157040 	call	15704 <OSTaskQuery>
    e2c0:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    e2c4:	e0bffe83 	ldbu	r2,-6(fp)
    e2c8:	10803fcc 	andi	r2,r2,255
    e2cc:	10001e1e 	bne	r2,zero,e348 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
    e2d0:	e0bfee83 	ldbu	r2,-70(fp)
    e2d4:	10803fcc 	andi	r2,r2,255
    e2d8:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    e2dc:	d0a80417 	ldw	r2,-24560(gp)
    e2e0:	e0fffd04 	addi	r3,fp,-12
    e2e4:	180b883a 	mov	r5,r3
    e2e8:	1009883a 	mov	r4,r2
    e2ec:	0013f1c0 	call	13f1c <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    e2f0:	e0bffe43 	ldbu	r2,-7(fp)
    e2f4:	10803fcc 	andi	r2,r2,255
    e2f8:	10000726 	beq	r2,zero,e318 <__env_lock+0x7c>
    e2fc:	d0a00f17 	ldw	r2,-32708(gp)
    e300:	e0ffe117 	ldw	r3,-124(fp)
    e304:	1880041e 	bne	r3,r2,e318 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
    e308:	d0a80317 	ldw	r2,-24564(gp)
    e30c:	10800044 	addi	r2,r2,1
    e310:	d0a80315 	stw	r2,-24564(gp)
    e314:	00000a06 	br	e340 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    e318:	d0a80417 	ldw	r2,-24560(gp)
    e31c:	e0fffe84 	addi	r3,fp,-6
    e320:	180d883a 	mov	r6,r3
    e324:	000b883a 	mov	r5,zero
    e328:	1009883a 	mov	r4,r2
    e32c:	0013a940 	call	13a94 <OSSemPend>
    locks  = 1;
    e330:	00800044 	movi	r2,1
    e334:	d0a80315 	stw	r2,-24564(gp)
    lockid = id;
    e338:	e0bfe117 	ldw	r2,-124(fp)
    e33c:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    e340:	0001883a 	nop
    e344:	00000106 	br	e34c <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    e348:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    e34c:	e037883a 	mov	sp,fp
    e350:	dfc00117 	ldw	ra,4(sp)
    e354:	df000017 	ldw	fp,0(sp)
    e358:	dec00204 	addi	sp,sp,8
    e35c:	f800283a 	ret

0000e360 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    e360:	defffd04 	addi	sp,sp,-12
    e364:	dfc00215 	stw	ra,8(sp)
    e368:	df000115 	stw	fp,4(sp)
    e36c:	df000104 	addi	fp,sp,4
    e370:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    e374:	d0a80317 	ldw	r2,-24564(gp)
    e378:	10000b26 	beq	r2,zero,e3a8 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    e37c:	d0a80317 	ldw	r2,-24564(gp)
    e380:	10bfffc4 	addi	r2,r2,-1
    e384:	d0a80315 	stw	r2,-24564(gp)
    e388:	d0a80317 	ldw	r2,-24564(gp)
    e38c:	1000071e 	bne	r2,zero,e3ac <__env_unlock+0x4c>
  {
    lockid = -1;
    e390:	00bfffc4 	movi	r2,-1
    e394:	d0a00f15 	stw	r2,-32708(gp)
    OSSemPost( alt_envsem );
    e398:	d0a80417 	ldw	r2,-24560(gp)
    e39c:	1009883a 	mov	r4,r2
    e3a0:	0013e0c0 	call	13e0c <OSSemPost>
    e3a4:	00000106 	br	e3ac <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
    e3a8:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    e3ac:	e037883a 	mov	sp,fp
    e3b0:	dfc00117 	ldw	ra,4(sp)
    e3b4:	df000017 	ldw	fp,0(sp)
    e3b8:	dec00204 	addi	sp,sp,8
    e3bc:	f800283a 	ret

0000e3c0 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    e3c0:	deffdb04 	addi	sp,sp,-148
    e3c4:	dfc02415 	stw	ra,144(sp)
    e3c8:	df002315 	stw	fp,140(sp)
    e3cc:	df002304 	addi	fp,sp,140
    e3d0:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e3d4:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    e3d8:	d0a80743 	ldbu	r2,-24547(gp)
    e3dc:	10803fcc 	andi	r2,r2,255
    e3e0:	10800060 	cmpeqi	r2,r2,1
    e3e4:	10003626 	beq	r2,zero,e4c0 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    e3e8:	e0bfe204 	addi	r2,fp,-120
    e3ec:	100b883a 	mov	r5,r2
    e3f0:	01003fc4 	movi	r4,255
    e3f4:	00157040 	call	15704 <OSTaskQuery>
    e3f8:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    e3fc:	e0bffe83 	ldbu	r2,-6(fp)
    e400:	10803fcc 	andi	r2,r2,255
    e404:	1000301e 	bne	r2,zero,e4c8 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
    e408:	e0bfee83 	ldbu	r2,-70(fp)
    e40c:	10803fcc 	andi	r2,r2,255
    e410:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    e414:	d0a80617 	ldw	r2,-24552(gp)
    e418:	e0fffd04 	addi	r3,fp,-12
    e41c:	180b883a 	mov	r5,r3
    e420:	1009883a 	mov	r4,r2
    e424:	0013f1c0 	call	13f1c <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e428:	0005303a 	rdctl	r2,status
    e42c:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e430:	e0ffe117 	ldw	r3,-124(fp)
    e434:	00bfff84 	movi	r2,-2
    e438:	1884703a 	and	r2,r3,r2
    e43c:	1001703a 	wrctl	status,r2
  
  return context;
    e440:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
    e444:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    e448:	e0bffd0b 	ldhu	r2,-12(fp)
    e44c:	10bfffcc 	andi	r2,r2,65535
    e450:	10000b1e 	bne	r2,zero,e480 <__malloc_lock+0xc0>
    e454:	d0a01017 	ldw	r2,-32704(gp)
    e458:	e0ffde17 	ldw	r3,-136(fp)
    e45c:	1880081e 	bne	r3,r2,e480 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
    e460:	d0a80517 	ldw	r2,-24556(gp)
    e464:	10800044 	addi	r2,r2,1
    e468:	d0a80515 	stw	r2,-24556(gp)
    e46c:	e0bfdd17 	ldw	r2,-140(fp)
    e470:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e474:	e0bfdf17 	ldw	r2,-132(fp)
    e478:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    e47c:	00000e06 	br	e4b8 <__malloc_lock+0xf8>
    e480:	e0bfdd17 	ldw	r2,-140(fp)
    e484:	e0bfe015 	stw	r2,-128(fp)
    e488:	e0bfe017 	ldw	r2,-128(fp)
    e48c:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    e490:	d0a80617 	ldw	r2,-24552(gp)
    e494:	e0fffe84 	addi	r3,fp,-6
    e498:	180d883a 	mov	r6,r3
    e49c:	000b883a 	mov	r5,zero
    e4a0:	1009883a 	mov	r4,r2
    e4a4:	0013a940 	call	13a94 <OSSemPend>
    locks  = 1;
    e4a8:	00800044 	movi	r2,1
    e4ac:	d0a80515 	stw	r2,-24556(gp)
    lockid = id;
    e4b0:	e0bfde17 	ldw	r2,-136(fp)
    e4b4:	d0a01015 	stw	r2,-32704(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    e4b8:	0001883a 	nop
    e4bc:	00000306 	br	e4cc <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
    e4c0:	0001883a 	nop
    e4c4:	00000106 	br	e4cc <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    e4c8:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    e4cc:	e037883a 	mov	sp,fp
    e4d0:	dfc00117 	ldw	ra,4(sp)
    e4d4:	df000017 	ldw	fp,0(sp)
    e4d8:	dec00204 	addi	sp,sp,8
    e4dc:	f800283a 	ret

0000e4e0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    e4e0:	defff804 	addi	sp,sp,-32
    e4e4:	dfc00715 	stw	ra,28(sp)
    e4e8:	df000615 	stw	fp,24(sp)
    e4ec:	df000604 	addi	fp,sp,24
    e4f0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e4f4:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    e4f8:	d0a80743 	ldbu	r2,-24547(gp)
    e4fc:	10803fcc 	andi	r2,r2,255
    e500:	10800060 	cmpeqi	r2,r2,1
    e504:	10002326 	beq	r2,zero,e594 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e508:	0005303a 	rdctl	r2,status
    e50c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e510:	e0fffe17 	ldw	r3,-8(fp)
    e514:	00bfff84 	movi	r2,-2
    e518:	1884703a 	and	r2,r3,r2
    e51c:	1001703a 	wrctl	status,r2
  
  return context;
    e520:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
    e524:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    e528:	d0a80517 	ldw	r2,-24556(gp)
    e52c:	1000051e 	bne	r2,zero,e544 <__malloc_unlock+0x64>
    e530:	e0bffa17 	ldw	r2,-24(fp)
    e534:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e538:	e0bffb17 	ldw	r2,-20(fp)
    e53c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    e540:	00001506 	br	e598 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    e544:	d0a80517 	ldw	r2,-24556(gp)
    e548:	10bfffc4 	addi	r2,r2,-1
    e54c:	d0a80515 	stw	r2,-24556(gp)
    e550:	d0a80517 	ldw	r2,-24556(gp)
    e554:	10000a1e 	bne	r2,zero,e580 <__malloc_unlock+0xa0>
  {
    lockid = -1;
    e558:	00bfffc4 	movi	r2,-1
    e55c:	d0a01015 	stw	r2,-32704(gp)
    e560:	e0bffa17 	ldw	r2,-24(fp)
    e564:	e0bffc15 	stw	r2,-16(fp)
    e568:	e0bffc17 	ldw	r2,-16(fp)
    e56c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    e570:	d0a80617 	ldw	r2,-24552(gp)
    e574:	1009883a 	mov	r4,r2
    e578:	0013e0c0 	call	13e0c <OSSemPost>
    e57c:	00000606 	br	e598 <__malloc_unlock+0xb8>
    e580:	e0bffa17 	ldw	r2,-24(fp)
    e584:	e0bffd15 	stw	r2,-12(fp)
    e588:	e0bffd17 	ldw	r2,-12(fp)
    e58c:	1001703a 	wrctl	status,r2
    e590:	00000106 	br	e598 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
    e594:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    e598:	e037883a 	mov	sp,fp
    e59c:	dfc00117 	ldw	ra,4(sp)
    e5a0:	df000017 	ldw	fp,0(sp)
    e5a4:	dec00204 	addi	sp,sp,8
    e5a8:	f800283a 	ret

0000e5ac <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    e5ac:	defff704 	addi	sp,sp,-36
    e5b0:	dfc00815 	stw	ra,32(sp)
    e5b4:	df000715 	stw	fp,28(sp)
    e5b8:	df000704 	addi	fp,sp,28
    e5bc:	e13ffd15 	stw	r4,-12(fp)
    e5c0:	e17ffe15 	stw	r5,-8(fp)
    e5c4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e5c8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    e5cc:	e0bfff17 	ldw	r2,-4(fp)
    e5d0:	1000021e 	bne	r2,zero,e5dc <OSEventNameGet+0x30>
        return (0);
    e5d4:	0005883a 	mov	r2,zero
    e5d8:	00003706 	br	e6b8 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    e5dc:	e0bffd17 	ldw	r2,-12(fp)
    e5e0:	1000051e 	bne	r2,zero,e5f8 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    e5e4:	e0bfff17 	ldw	r2,-4(fp)
    e5e8:	00c00104 	movi	r3,4
    e5ec:	10c00005 	stb	r3,0(r2)
        return (0);
    e5f0:	0005883a 	mov	r2,zero
    e5f4:	00003006 	br	e6b8 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    e5f8:	e0bffe17 	ldw	r2,-8(fp)
    e5fc:	1000051e 	bne	r2,zero,e614 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    e600:	e0bfff17 	ldw	r2,-4(fp)
    e604:	00c00304 	movi	r3,12
    e608:	10c00005 	stb	r3,0(r2)
        return (0);
    e60c:	0005883a 	mov	r2,zero
    e610:	00002906 	br	e6b8 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    e614:	d0a81503 	ldbu	r2,-24492(gp)
    e618:	10803fcc 	andi	r2,r2,255
    e61c:	10000526 	beq	r2,zero,e634 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    e620:	e0bfff17 	ldw	r2,-4(fp)
    e624:	00c00444 	movi	r3,17
    e628:	10c00005 	stb	r3,0(r2)
        return (0);
    e62c:	0005883a 	mov	r2,zero
    e630:	00002106 	br	e6b8 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
    e634:	e0bffd17 	ldw	r2,-12(fp)
    e638:	10800003 	ldbu	r2,0(r2)
    e63c:	10803fcc 	andi	r2,r2,255
    e640:	10bfffc4 	addi	r2,r2,-1
    e644:	10800128 	cmpgeui	r2,r2,4
    e648:	10000526 	beq	r2,zero,e660 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    e64c:	e0bfff17 	ldw	r2,-4(fp)
    e650:	00c00044 	movi	r3,1
    e654:	10c00005 	stb	r3,0(r2)
             return (0);
    e658:	0005883a 	mov	r2,zero
    e65c:	00001606 	br	e6b8 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    e660:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e664:	0005303a 	rdctl	r2,status
    e668:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e66c:	e0fffb17 	ldw	r3,-20(fp)
    e670:	00bfff84 	movi	r2,-2
    e674:	1884703a 	and	r2,r3,r2
    e678:	1001703a 	wrctl	status,r2
  
  return context;
    e67c:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    e680:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    e684:	e0bffd17 	ldw	r2,-12(fp)
    e688:	10800384 	addi	r2,r2,14
    e68c:	100b883a 	mov	r5,r2
    e690:	e13ffe17 	ldw	r4,-8(fp)
    e694:	00100300 	call	10030 <OS_StrCopy>
    e698:	e0bffa05 	stb	r2,-24(fp)
    e69c:	e0bff917 	ldw	r2,-28(fp)
    e6a0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e6a4:	e0bffc17 	ldw	r2,-16(fp)
    e6a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    e6ac:	e0bfff17 	ldw	r2,-4(fp)
    e6b0:	10000005 	stb	zero,0(r2)
    return (len);
    e6b4:	e0bffa03 	ldbu	r2,-24(fp)
}
    e6b8:	e037883a 	mov	sp,fp
    e6bc:	dfc00117 	ldw	ra,4(sp)
    e6c0:	df000017 	ldw	fp,0(sp)
    e6c4:	dec00204 	addi	sp,sp,8
    e6c8:	f800283a 	ret

0000e6cc <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    e6cc:	defff604 	addi	sp,sp,-40
    e6d0:	dfc00915 	stw	ra,36(sp)
    e6d4:	df000815 	stw	fp,32(sp)
    e6d8:	df000804 	addi	fp,sp,32
    e6dc:	e13ffd15 	stw	r4,-12(fp)
    e6e0:	e17ffe15 	stw	r5,-8(fp)
    e6e4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e6e8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    e6ec:	e0bfff17 	ldw	r2,-4(fp)
    e6f0:	10004026 	beq	r2,zero,e7f4 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    e6f4:	e0bffd17 	ldw	r2,-12(fp)
    e6f8:	1000041e 	bne	r2,zero,e70c <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    e6fc:	e0bfff17 	ldw	r2,-4(fp)
    e700:	00c00104 	movi	r3,4
    e704:	10c00005 	stb	r3,0(r2)
        return;
    e708:	00003b06 	br	e7f8 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    e70c:	e0bffe17 	ldw	r2,-8(fp)
    e710:	1000041e 	bne	r2,zero,e724 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    e714:	e0bfff17 	ldw	r2,-4(fp)
    e718:	00c00304 	movi	r3,12
    e71c:	10c00005 	stb	r3,0(r2)
        return;
    e720:	00003506 	br	e7f8 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    e724:	d0a81503 	ldbu	r2,-24492(gp)
    e728:	10803fcc 	andi	r2,r2,255
    e72c:	10000426 	beq	r2,zero,e740 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    e730:	e0bfff17 	ldw	r2,-4(fp)
    e734:	00c00484 	movi	r3,18
    e738:	10c00005 	stb	r3,0(r2)
        return;
    e73c:	00002e06 	br	e7f8 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
    e740:	e0bffd17 	ldw	r2,-12(fp)
    e744:	10800003 	ldbu	r2,0(r2)
    e748:	10803fcc 	andi	r2,r2,255
    e74c:	10bfffc4 	addi	r2,r2,-1
    e750:	10800128 	cmpgeui	r2,r2,4
    e754:	10000426 	beq	r2,zero,e768 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    e758:	e0bfff17 	ldw	r2,-4(fp)
    e75c:	00c00044 	movi	r3,1
    e760:	10c00005 	stb	r3,0(r2)
             return;
    e764:	00002406 	br	e7f8 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    e768:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e76c:	0005303a 	rdctl	r2,status
    e770:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e774:	e0fffc17 	ldw	r3,-16(fp)
    e778:	00bfff84 	movi	r2,-2
    e77c:	1884703a 	and	r2,r3,r2
    e780:	1001703a 	wrctl	status,r2
  
  return context;
    e784:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    e788:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    e78c:	e13ffe17 	ldw	r4,-8(fp)
    e790:	00100a40 	call	100a4 <OS_StrLen>
    e794:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    e798:	e0bffa03 	ldbu	r2,-24(fp)
    e79c:	10800830 	cmpltui	r2,r2,32
    e7a0:	1000081e 	bne	r2,zero,e7c4 <OSEventNameSet+0xf8>
    e7a4:	e0bff817 	ldw	r2,-32(fp)
    e7a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e7ac:	e0bff917 	ldw	r2,-28(fp)
    e7b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    e7b4:	e0bfff17 	ldw	r2,-4(fp)
    e7b8:	00c002c4 	movi	r3,11
    e7bc:	10c00005 	stb	r3,0(r2)
        return;
    e7c0:	00000d06 	br	e7f8 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    e7c4:	e0bffd17 	ldw	r2,-12(fp)
    e7c8:	10800384 	addi	r2,r2,14
    e7cc:	e17ffe17 	ldw	r5,-8(fp)
    e7d0:	1009883a 	mov	r4,r2
    e7d4:	00100300 	call	10030 <OS_StrCopy>
    e7d8:	e0bff817 	ldw	r2,-32(fp)
    e7dc:	e0bffb15 	stw	r2,-20(fp)
    e7e0:	e0bffb17 	ldw	r2,-20(fp)
    e7e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    e7e8:	e0bfff17 	ldw	r2,-4(fp)
    e7ec:	10000005 	stb	zero,0(r2)
    e7f0:	00000106 	br	e7f8 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    e7f4:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    e7f8:	e037883a 	mov	sp,fp
    e7fc:	dfc00117 	ldw	ra,4(sp)
    e800:	df000017 	ldw	fp,0(sp)
    e804:	dec00204 	addi	sp,sp,8
    e808:	f800283a 	ret

0000e80c <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    e80c:	deffed04 	addi	sp,sp,-76
    e810:	dfc01215 	stw	ra,72(sp)
    e814:	df001115 	stw	fp,68(sp)
    e818:	df001104 	addi	fp,sp,68
    e81c:	e13ffc15 	stw	r4,-16(fp)
    e820:	e17ffd15 	stw	r5,-12(fp)
    e824:	e1bffe15 	stw	r6,-8(fp)
    e828:	3805883a 	mov	r2,r7
    e82c:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    e830:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    e834:	e0800217 	ldw	r2,8(fp)
    e838:	1000021e 	bne	r2,zero,e844 <OSEventPendMulti+0x38>
        return (0);
    e83c:	0005883a 	mov	r2,zero
    e840:	00017106 	br	ee08 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    e844:	e0bffc17 	ldw	r2,-16(fp)
    e848:	1000051e 	bne	r2,zero,e860 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    e84c:	e0800217 	ldw	r2,8(fp)
    e850:	00c00104 	movi	r3,4
    e854:	10c00005 	stb	r3,0(r2)
        return (0);
    e858:	0005883a 	mov	r2,zero
    e85c:	00016a06 	br	ee08 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    e860:	e0bffd17 	ldw	r2,-12(fp)
    e864:	1000051e 	bne	r2,zero,e87c <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    e868:	e0800217 	ldw	r2,8(fp)
    e86c:	00c00104 	movi	r3,4
    e870:	10c00005 	stb	r3,0(r2)
        return (0);
    e874:	0005883a 	mov	r2,zero
    e878:	00016306 	br	ee08 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    e87c:	e0bffe17 	ldw	r2,-8(fp)
    e880:	1000051e 	bne	r2,zero,e898 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    e884:	e0800217 	ldw	r2,8(fp)
    e888:	00c00104 	movi	r3,4
    e88c:	10c00005 	stb	r3,0(r2)
        return (0);
    e890:	0005883a 	mov	r2,zero
    e894:	00015c06 	br	ee08 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    e898:	e0bffd17 	ldw	r2,-12(fp)
    e89c:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    e8a0:	e0bffc17 	ldw	r2,-16(fp)
    e8a4:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    e8a8:	e0bfef17 	ldw	r2,-68(fp)
    e8ac:	10800017 	ldw	r2,0(r2)
    e8b0:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    e8b4:	00001906 	br	e91c <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    e8b8:	e0bff017 	ldw	r2,-64(fp)
    e8bc:	10800003 	ldbu	r2,0(r2)
    e8c0:	10803fcc 	andi	r2,r2,255
    e8c4:	10c000a0 	cmpeqi	r3,r2,2
    e8c8:	1800091e 	bne	r3,zero,e8f0 <OSEventPendMulti+0xe4>
    e8cc:	10c000e0 	cmpeqi	r3,r2,3
    e8d0:	1800091e 	bne	r3,zero,e8f8 <OSEventPendMulti+0xec>
    e8d4:	10800060 	cmpeqi	r2,r2,1
    e8d8:	1000091e 	bne	r2,zero,e900 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    e8dc:	e0800217 	ldw	r2,8(fp)
    e8e0:	00c00044 	movi	r3,1
    e8e4:	10c00005 	stb	r3,0(r2)
                 return (0);
    e8e8:	0005883a 	mov	r2,zero
    e8ec:	00014606 	br	ee08 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    e8f0:	0001883a 	nop
    e8f4:	00000306 	br	e904 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    e8f8:	0001883a 	nop
    e8fc:	00000106 	br	e904 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    e900:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    e904:	e0bfef17 	ldw	r2,-68(fp)
    e908:	10800104 	addi	r2,r2,4
    e90c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    e910:	e0bfef17 	ldw	r2,-68(fp)
    e914:	10800017 	ldw	r2,0(r2)
    e918:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    e91c:	e0bff017 	ldw	r2,-64(fp)
    e920:	103fe51e 	bne	r2,zero,e8b8 <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    e924:	d0a81503 	ldbu	r2,-24492(gp)
    e928:	10803fcc 	andi	r2,r2,255
    e92c:	10000526 	beq	r2,zero,e944 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    e930:	e0800217 	ldw	r2,8(fp)
    e934:	00c00084 	movi	r3,2
    e938:	10c00005 	stb	r3,0(r2)
        return (0);
    e93c:	0005883a 	mov	r2,zero
    e940:	00013106 	br	ee08 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    e944:	d0a80703 	ldbu	r2,-24548(gp)
    e948:	10803fcc 	andi	r2,r2,255
    e94c:	10000526 	beq	r2,zero,e964 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    e950:	e0800217 	ldw	r2,8(fp)
    e954:	00c00344 	movi	r3,13
    e958:	10c00005 	stb	r3,0(r2)
        return (0);
    e95c:	0005883a 	mov	r2,zero
    e960:	00012906 	br	ee08 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e964:	0005303a 	rdctl	r2,status
    e968:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e96c:	e0fffb17 	ldw	r3,-20(fp)
    e970:	00bfff84 	movi	r2,-2
    e974:	1884703a 	and	r2,r3,r2
    e978:	1001703a 	wrctl	status,r2
  
  return context;
    e97c:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    e980:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    e984:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    e988:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    e98c:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    e990:	e0bffc17 	ldw	r2,-16(fp)
    e994:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    e998:	e0bfef17 	ldw	r2,-68(fp)
    e99c:	10800017 	ldw	r2,0(r2)
    e9a0:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    e9a4:	00008106 	br	ebac <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
    e9a8:	e0bff017 	ldw	r2,-64(fp)
    e9ac:	10800003 	ldbu	r2,0(r2)
    e9b0:	10803fcc 	andi	r2,r2,255
    e9b4:	10c000a0 	cmpeqi	r3,r2,2
    e9b8:	18003c1e 	bne	r3,zero,eaac <OSEventPendMulti+0x2a0>
    e9bc:	10c000e0 	cmpeqi	r3,r2,3
    e9c0:	1800031e 	bne	r3,zero,e9d0 <OSEventPendMulti+0x1c4>
    e9c4:	10800060 	cmpeqi	r2,r2,1
    e9c8:	10001e1e 	bne	r2,zero,ea44 <OSEventPendMulti+0x238>
    e9cc:	00006606 	br	eb68 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    e9d0:	e0bff017 	ldw	r2,-64(fp)
    e9d4:	1080020b 	ldhu	r2,8(r2)
    e9d8:	10bfffcc 	andi	r2,r2,65535
    e9dc:	10001526 	beq	r2,zero,ea34 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    e9e0:	e0bff017 	ldw	r2,-64(fp)
    e9e4:	1080020b 	ldhu	r2,8(r2)
    e9e8:	10bfffc4 	addi	r2,r2,-1
    e9ec:	1007883a 	mov	r3,r2
    e9f0:	e0bff017 	ldw	r2,-64(fp)
    e9f4:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    e9f8:	e0bffd17 	ldw	r2,-12(fp)
    e9fc:	10c00104 	addi	r3,r2,4
    ea00:	e0fffd15 	stw	r3,-12(fp)
    ea04:	e0fff017 	ldw	r3,-64(fp)
    ea08:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    ea0c:	00800044 	movi	r2,1
    ea10:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    ea14:	e0bffe17 	ldw	r2,-8(fp)
    ea18:	10c00104 	addi	r3,r2,4
    ea1c:	e0fffe15 	stw	r3,-8(fp)
    ea20:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    ea24:	e0bff18b 	ldhu	r2,-58(fp)
    ea28:	10800044 	addi	r2,r2,1
    ea2c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    ea30:	00005806 	br	eb94 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    ea34:	e0bff203 	ldbu	r2,-56(fp)
    ea38:	10800054 	ori	r2,r2,1
    ea3c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    ea40:	00005406 	br	eb94 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    ea44:	e0bff017 	ldw	r2,-64(fp)
    ea48:	10800117 	ldw	r2,4(r2)
    ea4c:	10001326 	beq	r2,zero,ea9c <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    ea50:	e0bffe17 	ldw	r2,-8(fp)
    ea54:	10c00104 	addi	r3,r2,4
    ea58:	e0fffe15 	stw	r3,-8(fp)
    ea5c:	e0fff017 	ldw	r3,-64(fp)
    ea60:	18c00117 	ldw	r3,4(r3)
    ea64:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    ea68:	e0bff017 	ldw	r2,-64(fp)
    ea6c:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    ea70:	e0bffd17 	ldw	r2,-12(fp)
    ea74:	10c00104 	addi	r3,r2,4
    ea78:	e0fffd15 	stw	r3,-12(fp)
    ea7c:	e0fff017 	ldw	r3,-64(fp)
    ea80:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    ea84:	00800044 	movi	r2,1
    ea88:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    ea8c:	e0bff18b 	ldhu	r2,-58(fp)
    ea90:	10800044 	addi	r2,r2,1
    ea94:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    ea98:	00003e06 	br	eb94 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    ea9c:	e0bff203 	ldbu	r2,-56(fp)
    eaa0:	10800094 	ori	r2,r2,2
    eaa4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    eaa8:	00003a06 	br	eb94 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    eaac:	e0bff017 	ldw	r2,-64(fp)
    eab0:	10800117 	ldw	r2,4(r2)
    eab4:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    eab8:	e0bff517 	ldw	r2,-44(fp)
    eabc:	1080058b 	ldhu	r2,22(r2)
    eac0:	10bfffcc 	andi	r2,r2,65535
    eac4:	10002426 	beq	r2,zero,eb58 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    eac8:	e0bffe17 	ldw	r2,-8(fp)
    eacc:	10c00104 	addi	r3,r2,4
    ead0:	e0fffe15 	stw	r3,-8(fp)
    ead4:	e0fff517 	ldw	r3,-44(fp)
    ead8:	18c00417 	ldw	r3,16(r3)
    eadc:	19400104 	addi	r5,r3,4
    eae0:	e13ff517 	ldw	r4,-44(fp)
    eae4:	21400415 	stw	r5,16(r4)
    eae8:	18c00017 	ldw	r3,0(r3)
    eaec:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    eaf0:	e0bff517 	ldw	r2,-44(fp)
    eaf4:	10c00417 	ldw	r3,16(r2)
    eaf8:	e0bff517 	ldw	r2,-44(fp)
    eafc:	10800217 	ldw	r2,8(r2)
    eb00:	1880041e 	bne	r3,r2,eb14 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    eb04:	e0bff517 	ldw	r2,-44(fp)
    eb08:	10c00117 	ldw	r3,4(r2)
    eb0c:	e0bff517 	ldw	r2,-44(fp)
    eb10:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    eb14:	e0bff517 	ldw	r2,-44(fp)
    eb18:	1080058b 	ldhu	r2,22(r2)
    eb1c:	10bfffc4 	addi	r2,r2,-1
    eb20:	1007883a 	mov	r3,r2
    eb24:	e0bff517 	ldw	r2,-44(fp)
    eb28:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    eb2c:	e0bffd17 	ldw	r2,-12(fp)
    eb30:	10c00104 	addi	r3,r2,4
    eb34:	e0fffd15 	stw	r3,-12(fp)
    eb38:	e0fff017 	ldw	r3,-64(fp)
    eb3c:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    eb40:	00800044 	movi	r2,1
    eb44:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    eb48:	e0bff18b 	ldhu	r2,-58(fp)
    eb4c:	10800044 	addi	r2,r2,1
    eb50:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    eb54:	00000f06 	br	eb94 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    eb58:	e0bff203 	ldbu	r2,-56(fp)
    eb5c:	10800114 	ori	r2,r2,4
    eb60:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    eb64:	00000b06 	br	eb94 <OSEventPendMulti+0x388>
    eb68:	e0bff317 	ldw	r2,-52(fp)
    eb6c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eb70:	e0bff417 	ldw	r2,-48(fp)
    eb74:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    eb78:	e0bffd17 	ldw	r2,-12(fp)
    eb7c:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    eb80:	e0800217 	ldw	r2,8(fp)
    eb84:	00c00044 	movi	r3,1
    eb88:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    eb8c:	e0bff18b 	ldhu	r2,-58(fp)
    eb90:	00009d06 	br	ee08 <OSEventPendMulti+0x5fc>
        }
        pevents++;
    eb94:	e0bfef17 	ldw	r2,-68(fp)
    eb98:	10800104 	addi	r2,r2,4
    eb9c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    eba0:	e0bfef17 	ldw	r2,-68(fp)
    eba4:	10800017 	ldw	r2,0(r2)
    eba8:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    ebac:	e0bff017 	ldw	r2,-64(fp)
    ebb0:	103f7d1e 	bne	r2,zero,e9a8 <OSEventPendMulti+0x19c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    ebb4:	e0bff103 	ldbu	r2,-60(fp)
    ebb8:	10800058 	cmpnei	r2,r2,1
    ebbc:	10000a1e 	bne	r2,zero,ebe8 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    ebc0:	e0bffd17 	ldw	r2,-12(fp)
    ebc4:	10000015 	stw	zero,0(r2)
    ebc8:	e0bff317 	ldw	r2,-52(fp)
    ebcc:	e0bff615 	stw	r2,-40(fp)
    ebd0:	e0bff617 	ldw	r2,-40(fp)
    ebd4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    ebd8:	e0800217 	ldw	r2,8(fp)
    ebdc:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    ebe0:	e0bff18b 	ldhu	r2,-58(fp)
    ebe4:	00008806 	br	ee08 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    ebe8:	d0a81617 	ldw	r2,-24488(gp)
    ebec:	d0e81617 	ldw	r3,-24488(gp)
    ebf0:	19000c03 	ldbu	r4,48(r3)
    ebf4:	e0fff203 	ldbu	r3,-56(fp)
    ebf8:	20c6b03a 	or	r3,r4,r3
    ebfc:	1809883a 	mov	r4,r3
    ec00:	00ffe004 	movi	r3,-128
    ec04:	20c6b03a 	or	r3,r4,r3
    ec08:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    ec0c:	d0a81617 	ldw	r2,-24488(gp)
    ec10:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    ec14:	d0a81617 	ldw	r2,-24488(gp)
    ec18:	e0ffff0b 	ldhu	r3,-4(fp)
    ec1c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    ec20:	e13ffc17 	ldw	r4,-16(fp)
    ec24:	000f7480 	call	f748 <OS_EventTaskWaitMulti>
    ec28:	e0bff317 	ldw	r2,-52(fp)
    ec2c:	e0bff915 	stw	r2,-28(fp)
    ec30:	e0bff917 	ldw	r2,-28(fp)
    ec34:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    ec38:	000feec0 	call	feec <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ec3c:	0005303a 	rdctl	r2,status
    ec40:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ec44:	e0fff717 	ldw	r3,-36(fp)
    ec48:	00bfff84 	movi	r2,-2
    ec4c:	1884703a 	and	r2,r3,r2
    ec50:	1001703a 	wrctl	status,r2
  
  return context;
    ec54:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
    ec58:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    ec5c:	d0a81617 	ldw	r2,-24488(gp)
    ec60:	10800c43 	ldbu	r2,49(r2)
    ec64:	10803fcc 	andi	r2,r2,255
    ec68:	10000226 	beq	r2,zero,ec74 <OSEventPendMulti+0x468>
    ec6c:	108000a0 	cmpeqi	r2,r2,2
    ec70:	10001826 	beq	r2,zero,ecd4 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    ec74:	d0a81617 	ldw	r2,-24488(gp)
    ec78:	10800717 	ldw	r2,28(r2)
    ec7c:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    ec80:	e0bff017 	ldw	r2,-64(fp)
    ec84:	10000b26 	beq	r2,zero,ecb4 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    ec88:	e0bffd17 	ldw	r2,-12(fp)
    ec8c:	10c00104 	addi	r3,r2,4
    ec90:	e0fffd15 	stw	r3,-12(fp)
    ec94:	e0fff017 	ldw	r3,-64(fp)
    ec98:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    ec9c:	e0bffd17 	ldw	r2,-12(fp)
    eca0:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    eca4:	e0bff18b 	ldhu	r2,-58(fp)
    eca8:	10800044 	addi	r2,r2,1
    ecac:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    ecb0:	00000d06 	br	ece8 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    ecb4:	d0a81617 	ldw	r2,-24488(gp)
    ecb8:	00c00044 	movi	r3,1
    ecbc:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    ecc0:	d0a81617 	ldw	r2,-24488(gp)
    ecc4:	e17ffc17 	ldw	r5,-16(fp)
    ecc8:	1009883a 	mov	r4,r2
    eccc:	000f9500 	call	f950 <OS_EventTaskRemoveMulti>
             }
			 break;
    ecd0:	00000506 	br	ece8 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    ecd4:	d0a81617 	ldw	r2,-24488(gp)
    ecd8:	e17ffc17 	ldw	r5,-16(fp)
    ecdc:	1009883a 	mov	r4,r2
    ece0:	000f9500 	call	f950 <OS_EventTaskRemoveMulti>
             break;
    ece4:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    ece8:	d0a81617 	ldw	r2,-24488(gp)
    ecec:	10800c43 	ldbu	r2,49(r2)
    ecf0:	10803fcc 	andi	r2,r2,255
    ecf4:	10000326 	beq	r2,zero,ed04 <OSEventPendMulti+0x4f8>
    ecf8:	108000a0 	cmpeqi	r2,r2,2
    ecfc:	1000231e 	bne	r2,zero,ed8c <OSEventPendMulti+0x580>
    ed00:	00002a06 	br	edac <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    ed04:	e0bff017 	ldw	r2,-64(fp)
    ed08:	10800003 	ldbu	r2,0(r2)
    ed0c:	10803fcc 	andi	r2,r2,255
    ed10:	0080100e 	bge	zero,r2,ed54 <OSEventPendMulti+0x548>
    ed14:	10c000d0 	cmplti	r3,r2,3
    ed18:	1800071e 	bne	r3,zero,ed38 <OSEventPendMulti+0x52c>
    ed1c:	108000e0 	cmpeqi	r2,r2,3
    ed20:	10000c26 	beq	r2,zero,ed54 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    ed24:	e0bffe17 	ldw	r2,-8(fp)
    ed28:	10c00104 	addi	r3,r2,4
    ed2c:	e0fffe15 	stw	r3,-8(fp)
    ed30:	10000015 	stw	zero,0(r2)
                      break;
    ed34:	00001206 	br	ed80 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    ed38:	e0bffe17 	ldw	r2,-8(fp)
    ed3c:	10c00104 	addi	r3,r2,4
    ed40:	e0fffe15 	stw	r3,-8(fp)
    ed44:	d0e81617 	ldw	r3,-24488(gp)
    ed48:	18c00917 	ldw	r3,36(r3)
    ed4c:	10c00015 	stw	r3,0(r2)
                      break;
    ed50:	00000b06 	br	ed80 <OSEventPendMulti+0x574>
    ed54:	e0bff317 	ldw	r2,-52(fp)
    ed58:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ed5c:	e0bff817 	ldw	r2,-32(fp)
    ed60:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    ed64:	e0bffd17 	ldw	r2,-12(fp)
    ed68:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    ed6c:	e0800217 	ldw	r2,8(fp)
    ed70:	00c00044 	movi	r3,1
    ed74:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    ed78:	e0bff18b 	ldhu	r2,-58(fp)
    ed7c:	00002206 	br	ee08 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
    ed80:	e0800217 	ldw	r2,8(fp)
    ed84:	10000005 	stb	zero,0(r2)
             break;
    ed88:	00001006 	br	edcc <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    ed8c:	e0bffe17 	ldw	r2,-8(fp)
    ed90:	10c00104 	addi	r3,r2,4
    ed94:	e0fffe15 	stw	r3,-8(fp)
    ed98:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    ed9c:	e0800217 	ldw	r2,8(fp)
    eda0:	00c00384 	movi	r3,14
    eda4:	10c00005 	stb	r3,0(r2)
             break;
    eda8:	00000806 	br	edcc <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    edac:	e0bffe17 	ldw	r2,-8(fp)
    edb0:	10c00104 	addi	r3,r2,4
    edb4:	e0fffe15 	stw	r3,-8(fp)
    edb8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    edbc:	e0800217 	ldw	r2,8(fp)
    edc0:	00c00284 	movi	r3,10
    edc4:	10c00005 	stb	r3,0(r2)
             break;
    edc8:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    edcc:	d0a81617 	ldw	r2,-24488(gp)
    edd0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    edd4:	d0a81617 	ldw	r2,-24488(gp)
    edd8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    eddc:	d0a81617 	ldw	r2,-24488(gp)
    ede0:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    ede4:	d0a81617 	ldw	r2,-24488(gp)
    ede8:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    edec:	d0a81617 	ldw	r2,-24488(gp)
    edf0:	10000915 	stw	zero,36(r2)
    edf4:	e0bff317 	ldw	r2,-52(fp)
    edf8:	e0bffa15 	stw	r2,-24(fp)
    edfc:	e0bffa17 	ldw	r2,-24(fp)
    ee00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    ee04:	e0bff18b 	ldhu	r2,-58(fp)
}
    ee08:	e037883a 	mov	sp,fp
    ee0c:	dfc00117 	ldw	ra,4(sp)
    ee10:	df000017 	ldw	fp,0(sp)
    ee14:	dec00204 	addi	sp,sp,8
    ee18:	f800283a 	ret

0000ee1c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    ee1c:	defffe04 	addi	sp,sp,-8
    ee20:	dfc00115 	stw	ra,4(sp)
    ee24:	df000015 	stw	fp,0(sp)
    ee28:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    ee2c:	00195980 	call	19598 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    ee30:	000fb980 	call	fb98 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    ee34:	000fbe00 	call	fbe0 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    ee38:	000fd4c0 	call	fd4c <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    ee3c:	000fab80 	call	fab8 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    ee40:	0011bfc0 	call	11bfc <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    ee44:	00124fc0 	call	124fc <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    ee48:	00136240 	call	13624 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    ee4c:	000fc4c0 	call	fc4c <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    ee50:	000fccc0 	call	fccc <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    ee54:	00195b80 	call	195b8 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    ee58:	00105d00 	call	105d0 <OSDebugInit>
#endif
}
    ee5c:	0001883a 	nop
    ee60:	e037883a 	mov	sp,fp
    ee64:	dfc00117 	ldw	ra,4(sp)
    ee68:	df000017 	ldw	fp,0(sp)
    ee6c:	dec00204 	addi	sp,sp,8
    ee70:	f800283a 	ret

0000ee74 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    ee74:	deffff04 	addi	sp,sp,-4
    ee78:	df000015 	stw	fp,0(sp)
    ee7c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
    ee80:	d0a80743 	ldbu	r2,-24547(gp)
    ee84:	10803fcc 	andi	r2,r2,255
    ee88:	10800058 	cmpnei	r2,r2,1
    ee8c:	1000071e 	bne	r2,zero,eeac <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
    ee90:	d0a81503 	ldbu	r2,-24492(gp)
    ee94:	10803fcc 	andi	r2,r2,255
    ee98:	10803fe0 	cmpeqi	r2,r2,255
    ee9c:	1000031e 	bne	r2,zero,eeac <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    eea0:	d0a81503 	ldbu	r2,-24492(gp)
    eea4:	10800044 	addi	r2,r2,1
    eea8:	d0a81505 	stb	r2,-24492(gp)
        }
    }
}
    eeac:	0001883a 	nop
    eeb0:	e037883a 	mov	sp,fp
    eeb4:	df000017 	ldw	fp,0(sp)
    eeb8:	dec00104 	addi	sp,sp,4
    eebc:	f800283a 	ret

0000eec0 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    eec0:	defffb04 	addi	sp,sp,-20
    eec4:	dfc00415 	stw	ra,16(sp)
    eec8:	df000315 	stw	fp,12(sp)
    eecc:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    eed0:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    eed4:	d0a80743 	ldbu	r2,-24547(gp)
    eed8:	10803fcc 	andi	r2,r2,255
    eedc:	10800058 	cmpnei	r2,r2,1
    eee0:	10002f1e 	bne	r2,zero,efa0 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eee4:	0005303a 	rdctl	r2,status
    eee8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eeec:	e0ffff17 	ldw	r3,-4(fp)
    eef0:	00bfff84 	movi	r2,-2
    eef4:	1884703a 	and	r2,r3,r2
    eef8:	1001703a 	wrctl	status,r2
  
  return context;
    eefc:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    ef00:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    ef04:	d0a81503 	ldbu	r2,-24492(gp)
    ef08:	10803fcc 	andi	r2,r2,255
    ef0c:	10000326 	beq	r2,zero,ef1c <OSIntExit+0x5c>
            OSIntNesting--;
    ef10:	d0a81503 	ldbu	r2,-24492(gp)
    ef14:	10bfffc4 	addi	r2,r2,-1
    ef18:	d0a81505 	stb	r2,-24492(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    ef1c:	d0a81503 	ldbu	r2,-24492(gp)
    ef20:	10803fcc 	andi	r2,r2,255
    ef24:	10001a1e 	bne	r2,zero,ef90 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    ef28:	d0a80703 	ldbu	r2,-24548(gp)
    ef2c:	10803fcc 	andi	r2,r2,255
    ef30:	1000171e 	bne	r2,zero,ef90 <OSIntExit+0xd0>
                OS_SchedNew();
    ef34:	000ffbc0 	call	ffbc <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    ef38:	d0e80903 	ldbu	r3,-24540(gp)
    ef3c:	d0a80943 	ldbu	r2,-24539(gp)
    ef40:	18c03fcc 	andi	r3,r3,255
    ef44:	10803fcc 	andi	r2,r2,255
    ef48:	18801126 	beq	r3,r2,ef90 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    ef4c:	d0a80903 	ldbu	r2,-24540(gp)
    ef50:	10c03fcc 	andi	r3,r2,255
    ef54:	008000b4 	movhi	r2,2
    ef58:	10961604 	addi	r2,r2,22616
    ef5c:	18c7883a 	add	r3,r3,r3
    ef60:	18c7883a 	add	r3,r3,r3
    ef64:	10c5883a 	add	r2,r2,r3
    ef68:	10800017 	ldw	r2,0(r2)
    ef6c:	d0a81115 	stw	r2,-24508(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    ef70:	d0a81117 	ldw	r2,-24508(gp)
    ef74:	10c00e17 	ldw	r3,56(r2)
    ef78:	18c00044 	addi	r3,r3,1
    ef7c:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    ef80:	d0a80c17 	ldw	r2,-24528(gp)
    ef84:	10800044 	addi	r2,r2,1
    ef88:	d0a80c15 	stw	r2,-24528(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    ef8c:	00192c40 	call	192c4 <OSCtxSw>
    ef90:	e0bffd17 	ldw	r2,-12(fp)
    ef94:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ef98:	e0bffe17 	ldw	r2,-8(fp)
    ef9c:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    efa0:	0001883a 	nop
    efa4:	e037883a 	mov	sp,fp
    efa8:	dfc00117 	ldw	ra,4(sp)
    efac:	df000017 	ldw	fp,0(sp)
    efb0:	dec00204 	addi	sp,sp,8
    efb4:	f800283a 	ret

0000efb8 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    efb8:	defffc04 	addi	sp,sp,-16
    efbc:	df000315 	stw	fp,12(sp)
    efc0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    efc4:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    efc8:	d0a80743 	ldbu	r2,-24547(gp)
    efcc:	10803fcc 	andi	r2,r2,255
    efd0:	10800058 	cmpnei	r2,r2,1
    efd4:	1000161e 	bne	r2,zero,f030 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    efd8:	0005303a 	rdctl	r2,status
    efdc:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    efe0:	e0ffff17 	ldw	r3,-4(fp)
    efe4:	00bfff84 	movi	r2,-2
    efe8:	1884703a 	and	r2,r3,r2
    efec:	1001703a 	wrctl	status,r2
  
  return context;
    eff0:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    eff4:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    eff8:	d0a81503 	ldbu	r2,-24492(gp)
    effc:	10803fcc 	andi	r2,r2,255
    f000:	1000071e 	bne	r2,zero,f020 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    f004:	d0a80703 	ldbu	r2,-24548(gp)
    f008:	10803fcc 	andi	r2,r2,255
    f00c:	10803fe0 	cmpeqi	r2,r2,255
    f010:	1000031e 	bne	r2,zero,f020 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    f014:	d0a80703 	ldbu	r2,-24548(gp)
    f018:	10800044 	addi	r2,r2,1
    f01c:	d0a80705 	stb	r2,-24548(gp)
    f020:	e0bffd17 	ldw	r2,-12(fp)
    f024:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f028:	e0bffe17 	ldw	r2,-8(fp)
    f02c:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    f030:	0001883a 	nop
    f034:	e037883a 	mov	sp,fp
    f038:	df000017 	ldw	fp,0(sp)
    f03c:	dec00104 	addi	sp,sp,4
    f040:	f800283a 	ret

0000f044 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    f044:	defff804 	addi	sp,sp,-32
    f048:	dfc00715 	stw	ra,28(sp)
    f04c:	df000615 	stw	fp,24(sp)
    f050:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    f054:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    f058:	d0a80743 	ldbu	r2,-24547(gp)
    f05c:	10803fcc 	andi	r2,r2,255
    f060:	10800058 	cmpnei	r2,r2,1
    f064:	1000281e 	bne	r2,zero,f108 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f068:	0005303a 	rdctl	r2,status
    f06c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f070:	e0ffff17 	ldw	r3,-4(fp)
    f074:	00bfff84 	movi	r2,-2
    f078:	1884703a 	and	r2,r3,r2
    f07c:	1001703a 	wrctl	status,r2
  
  return context;
    f080:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    f084:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    f088:	d0a80703 	ldbu	r2,-24548(gp)
    f08c:	10803fcc 	andi	r2,r2,255
    f090:	10001926 	beq	r2,zero,f0f8 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    f094:	d0a80703 	ldbu	r2,-24548(gp)
    f098:	10bfffc4 	addi	r2,r2,-1
    f09c:	d0a80705 	stb	r2,-24548(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    f0a0:	d0a80703 	ldbu	r2,-24548(gp)
    f0a4:	10803fcc 	andi	r2,r2,255
    f0a8:	10000e1e 	bne	r2,zero,f0e4 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    f0ac:	d0a81503 	ldbu	r2,-24492(gp)
    f0b0:	10803fcc 	andi	r2,r2,255
    f0b4:	1000061e 	bne	r2,zero,f0d0 <OSSchedUnlock+0x8c>
    f0b8:	e0bffa17 	ldw	r2,-24(fp)
    f0bc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f0c0:	e0bffb17 	ldw	r2,-20(fp)
    f0c4:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    f0c8:	000feec0 	call	feec <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    f0cc:	00000e06 	br	f108 <OSSchedUnlock+0xc4>
    f0d0:	e0bffa17 	ldw	r2,-24(fp)
    f0d4:	e0bffc15 	stw	r2,-16(fp)
    f0d8:	e0bffc17 	ldw	r2,-16(fp)
    f0dc:	1001703a 	wrctl	status,r2
    f0e0:	00000906 	br	f108 <OSSchedUnlock+0xc4>
    f0e4:	e0bffa17 	ldw	r2,-24(fp)
    f0e8:	e0bffd15 	stw	r2,-12(fp)
    f0ec:	e0bffd17 	ldw	r2,-12(fp)
    f0f0:	1001703a 	wrctl	status,r2
    f0f4:	00000406 	br	f108 <OSSchedUnlock+0xc4>
    f0f8:	e0bffa17 	ldw	r2,-24(fp)
    f0fc:	e0bffe15 	stw	r2,-8(fp)
    f100:	e0bffe17 	ldw	r2,-8(fp)
    f104:	1001703a 	wrctl	status,r2
    f108:	0001883a 	nop
    f10c:	e037883a 	mov	sp,fp
    f110:	dfc00117 	ldw	ra,4(sp)
    f114:	df000017 	ldw	fp,0(sp)
    f118:	dec00204 	addi	sp,sp,8
    f11c:	f800283a 	ret

0000f120 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    f120:	defffe04 	addi	sp,sp,-8
    f124:	dfc00115 	stw	ra,4(sp)
    f128:	df000015 	stw	fp,0(sp)
    f12c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    f130:	d0a80743 	ldbu	r2,-24547(gp)
    f134:	10803fcc 	andi	r2,r2,255
    f138:	10000f1e 	bne	r2,zero,f178 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    f13c:	000ffbc0 	call	ffbc <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    f140:	d0a80903 	ldbu	r2,-24540(gp)
    f144:	d0a80945 	stb	r2,-24539(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    f148:	d0a80903 	ldbu	r2,-24540(gp)
    f14c:	10c03fcc 	andi	r3,r2,255
    f150:	008000b4 	movhi	r2,2
    f154:	10961604 	addi	r2,r2,22616
    f158:	18c7883a 	add	r3,r3,r3
    f15c:	18c7883a 	add	r3,r3,r3
    f160:	10c5883a 	add	r2,r2,r3
    f164:	10800017 	ldw	r2,0(r2)
    f168:	d0a81115 	stw	r2,-24508(gp)
        OSTCBCur      = OSTCBHighRdy;
    f16c:	d0a81117 	ldw	r2,-24508(gp)
    f170:	d0a81615 	stw	r2,-24488(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    f174:	00193500 	call	19350 <OSStartHighRdy>
    }
}
    f178:	0001883a 	nop
    f17c:	e037883a 	mov	sp,fp
    f180:	dfc00117 	ldw	ra,4(sp)
    f184:	df000017 	ldw	fp,0(sp)
    f188:	dec00204 	addi	sp,sp,8
    f18c:	f800283a 	ret

0000f190 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    f190:	defff904 	addi	sp,sp,-28
    f194:	dfc00615 	stw	ra,24(sp)
    f198:	df000515 	stw	fp,20(sp)
    f19c:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    f1a0:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    f1a4:	01000084 	movi	r4,2
    f1a8:	00158980 	call	15898 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f1ac:	0005303a 	rdctl	r2,status
    f1b0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f1b4:	e0fffc17 	ldw	r3,-16(fp)
    f1b8:	00bfff84 	movi	r2,-2
    f1bc:	1884703a 	and	r2,r3,r2
    f1c0:	1001703a 	wrctl	status,r2
  
  return context;
    f1c4:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    f1c8:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    f1cc:	d0280815 	stw	zero,-24544(gp)
    f1d0:	e0bffb17 	ldw	r2,-20(fp)
    f1d4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f1d8:	e0bffd17 	ldw	r2,-12(fp)
    f1dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    f1e0:	0009883a 	mov	r4,zero
    f1e4:	00158980 	call	15898 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f1e8:	0005303a 	rdctl	r2,status
    f1ec:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f1f0:	e0fffe17 	ldw	r3,-8(fp)
    f1f4:	00bfff84 	movi	r2,-2
    f1f8:	1884703a 	and	r2,r3,r2
    f1fc:	1001703a 	wrctl	status,r2
  
  return context;
    f200:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    f204:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    f208:	d0a80817 	ldw	r2,-24544(gp)
    f20c:	d0a80d15 	stw	r2,-24524(gp)
    OSStatRdy    = OS_TRUE;
    f210:	00800044 	movi	r2,1
    f214:	d0a81905 	stb	r2,-24476(gp)
    f218:	e0bffb17 	ldw	r2,-20(fp)
    f21c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f220:	e0bfff17 	ldw	r2,-4(fp)
    f224:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    f228:	0001883a 	nop
    f22c:	e037883a 	mov	sp,fp
    f230:	dfc00117 	ldw	ra,4(sp)
    f234:	df000017 	ldw	fp,0(sp)
    f238:	dec00204 	addi	sp,sp,8
    f23c:	f800283a 	ret

0000f240 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    f240:	defff704 	addi	sp,sp,-36
    f244:	dfc00815 	stw	ra,32(sp)
    f248:	df000715 	stw	fp,28(sp)
    f24c:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    f250:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    f254:	00195780 	call	19578 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f258:	0005303a 	rdctl	r2,status
    f25c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f260:	e0fffd17 	ldw	r3,-12(fp)
    f264:	00bfff84 	movi	r2,-2
    f268:	1884703a 	and	r2,r3,r2
    f26c:	1001703a 	wrctl	status,r2
  
  return context;
    f270:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    f274:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    f278:	d0a81717 	ldw	r2,-24484(gp)
    f27c:	10800044 	addi	r2,r2,1
    f280:	d0a81715 	stw	r2,-24484(gp)
    f284:	e0bffb17 	ldw	r2,-20(fp)
    f288:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f28c:	e0bfff17 	ldw	r2,-4(fp)
    f290:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    f294:	d0a80743 	ldbu	r2,-24547(gp)
    f298:	10803fcc 	andi	r2,r2,255
    f29c:	10800058 	cmpnei	r2,r2,1
    f2a0:	10006a1e 	bne	r2,zero,f44c <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    f2a4:	d0a80b03 	ldbu	r2,-24532(gp)
    f2a8:	10803fcc 	andi	r2,r2,255
    f2ac:	10c00060 	cmpeqi	r3,r2,1
    f2b0:	1800061e 	bne	r3,zero,f2cc <OSTimeTick+0x8c>
    f2b4:	10c000a0 	cmpeqi	r3,r2,2
    f2b8:	1800061e 	bne	r3,zero,f2d4 <OSTimeTick+0x94>
    f2bc:	10000a1e 	bne	r2,zero,f2e8 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    f2c0:	00800044 	movi	r2,1
    f2c4:	e0bffa05 	stb	r2,-24(fp)
                 break;
    f2c8:	00000b06 	br	f2f8 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    f2cc:	e03ffa05 	stb	zero,-24(fp)
                 break;
    f2d0:	00000906 	br	f2f8 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    f2d4:	00800044 	movi	r2,1
    f2d8:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    f2dc:	00800044 	movi	r2,1
    f2e0:	d0a80b05 	stb	r2,-24532(gp)
                 break;
    f2e4:	00000406 	br	f2f8 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    f2e8:	00800044 	movi	r2,1
    f2ec:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    f2f0:	d0280b05 	stb	zero,-24532(gp)
                 break;
    f2f4:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    f2f8:	e0bffa03 	ldbu	r2,-24(fp)
    f2fc:	10005226 	beq	r2,zero,f448 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    f300:	d0a80a17 	ldw	r2,-24536(gp)
    f304:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    f308:	00004906 	br	f430 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f30c:	0005303a 	rdctl	r2,status
    f310:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f314:	e0fffc17 	ldw	r3,-16(fp)
    f318:	00bfff84 	movi	r2,-2
    f31c:	1884703a 	and	r2,r3,r2
    f320:	1001703a 	wrctl	status,r2
  
  return context;
    f324:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
    f328:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    f32c:	e0bff917 	ldw	r2,-28(fp)
    f330:	10800b8b 	ldhu	r2,46(r2)
    f334:	10bfffcc 	andi	r2,r2,65535
    f338:	10003626 	beq	r2,zero,f414 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    f33c:	e0bff917 	ldw	r2,-28(fp)
    f340:	10800b8b 	ldhu	r2,46(r2)
    f344:	10bfffc4 	addi	r2,r2,-1
    f348:	1007883a 	mov	r3,r2
    f34c:	e0bff917 	ldw	r2,-28(fp)
    f350:	10c00b8d 	sth	r3,46(r2)
    f354:	e0bff917 	ldw	r2,-28(fp)
    f358:	10800b8b 	ldhu	r2,46(r2)
    f35c:	10bfffcc 	andi	r2,r2,65535
    f360:	10002c1e 	bne	r2,zero,f414 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    f364:	e0bff917 	ldw	r2,-28(fp)
    f368:	10800c03 	ldbu	r2,48(r2)
    f36c:	10803fcc 	andi	r2,r2,255
    f370:	10800dcc 	andi	r2,r2,55
    f374:	10000b26 	beq	r2,zero,f3a4 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    f378:	e0bff917 	ldw	r2,-28(fp)
    f37c:	10c00c03 	ldbu	r3,48(r2)
    f380:	00bff204 	movi	r2,-56
    f384:	1884703a 	and	r2,r3,r2
    f388:	1007883a 	mov	r3,r2
    f38c:	e0bff917 	ldw	r2,-28(fp)
    f390:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    f394:	e0bff917 	ldw	r2,-28(fp)
    f398:	00c00044 	movi	r3,1
    f39c:	10c00c45 	stb	r3,49(r2)
    f3a0:	00000206 	br	f3ac <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    f3a4:	e0bff917 	ldw	r2,-28(fp)
    f3a8:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    f3ac:	e0bff917 	ldw	r2,-28(fp)
    f3b0:	10800c03 	ldbu	r2,48(r2)
    f3b4:	10803fcc 	andi	r2,r2,255
    f3b8:	1080020c 	andi	r2,r2,8
    f3bc:	1000151e 	bne	r2,zero,f414 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    f3c0:	e0bff917 	ldw	r2,-28(fp)
    f3c4:	10c00d83 	ldbu	r3,54(r2)
    f3c8:	d0a81303 	ldbu	r2,-24500(gp)
    f3cc:	1884b03a 	or	r2,r3,r2
    f3d0:	d0a81305 	stb	r2,-24500(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    f3d4:	e0bff917 	ldw	r2,-28(fp)
    f3d8:	10800d03 	ldbu	r2,52(r2)
    f3dc:	10c03fcc 	andi	r3,r2,255
    f3e0:	e0bff917 	ldw	r2,-28(fp)
    f3e4:	10800d03 	ldbu	r2,52(r2)
    f3e8:	11003fcc 	andi	r4,r2,255
    f3ec:	d0a81344 	addi	r2,gp,-24499
    f3f0:	2085883a 	add	r2,r4,r2
    f3f4:	11000003 	ldbu	r4,0(r2)
    f3f8:	e0bff917 	ldw	r2,-28(fp)
    f3fc:	10800d43 	ldbu	r2,53(r2)
    f400:	2084b03a 	or	r2,r4,r2
    f404:	1009883a 	mov	r4,r2
    f408:	d0a81344 	addi	r2,gp,-24499
    f40c:	1885883a 	add	r2,r3,r2
    f410:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    f414:	e0bff917 	ldw	r2,-28(fp)
    f418:	10800517 	ldw	r2,20(r2)
    f41c:	e0bff915 	stw	r2,-28(fp)
    f420:	e0bffb17 	ldw	r2,-20(fp)
    f424:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f428:	e0bffe17 	ldw	r2,-8(fp)
    f42c:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    f430:	e0bff917 	ldw	r2,-28(fp)
    f434:	10800c83 	ldbu	r2,50(r2)
    f438:	10803fcc 	andi	r2,r2,255
    f43c:	10800518 	cmpnei	r2,r2,20
    f440:	103fb21e 	bne	r2,zero,f30c <OSTimeTick+0xcc>
    f444:	00000106 	br	f44c <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
    f448:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    f44c:	e037883a 	mov	sp,fp
    f450:	dfc00117 	ldw	ra,4(sp)
    f454:	df000017 	ldw	fp,0(sp)
    f458:	dec00204 	addi	sp,sp,8
    f45c:	f800283a 	ret

0000f460 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    f460:	deffff04 	addi	sp,sp,-4
    f464:	df000015 	stw	fp,0(sp)
    f468:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    f46c:	00804784 	movi	r2,286
}
    f470:	e037883a 	mov	sp,fp
    f474:	df000017 	ldw	fp,0(sp)
    f478:	dec00104 	addi	sp,sp,4
    f47c:	f800283a 	ret

0000f480 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    f480:	deffff04 	addi	sp,sp,-4
    f484:	df000015 	stw	fp,0(sp)
    f488:	d839883a 	mov	fp,sp
}
    f48c:	0001883a 	nop
    f490:	e037883a 	mov	sp,fp
    f494:	df000017 	ldw	fp,0(sp)
    f498:	dec00104 	addi	sp,sp,4
    f49c:	f800283a 	ret

0000f4a0 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    f4a0:	defff804 	addi	sp,sp,-32
    f4a4:	dfc00715 	stw	ra,28(sp)
    f4a8:	df000615 	stw	fp,24(sp)
    f4ac:	df000604 	addi	fp,sp,24
    f4b0:	e13ffc15 	stw	r4,-16(fp)
    f4b4:	e17ffd15 	stw	r5,-12(fp)
    f4b8:	3007883a 	mov	r3,r6
    f4bc:	3805883a 	mov	r2,r7
    f4c0:	e0fffe05 	stb	r3,-8(fp)
    f4c4:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    f4c8:	e0bffc17 	ldw	r2,-16(fp)
    f4cc:	10800283 	ldbu	r2,10(r2)
    f4d0:	10c03fcc 	andi	r3,r2,255
    f4d4:	008000b4 	movhi	r2,2
    f4d8:	10a95304 	addi	r2,r2,-23220
    f4dc:	10c5883a 	add	r2,r2,r3
    f4e0:	10800003 	ldbu	r2,0(r2)
    f4e4:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    f4e8:	e0bffa03 	ldbu	r2,-24(fp)
    f4ec:	e0fffc17 	ldw	r3,-16(fp)
    f4f0:	1885883a 	add	r2,r3,r2
    f4f4:	108002c4 	addi	r2,r2,11
    f4f8:	10800003 	ldbu	r2,0(r2)
    f4fc:	10c03fcc 	andi	r3,r2,255
    f500:	008000b4 	movhi	r2,2
    f504:	10a95304 	addi	r2,r2,-23220
    f508:	10c5883a 	add	r2,r2,r3
    f50c:	10800003 	ldbu	r2,0(r2)
    f510:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    f514:	e0bffa03 	ldbu	r2,-24(fp)
    f518:	100490fa 	slli	r2,r2,3
    f51c:	1007883a 	mov	r3,r2
    f520:	e0bffa43 	ldbu	r2,-23(fp)
    f524:	1885883a 	add	r2,r3,r2
    f528:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    f52c:	e0fffa83 	ldbu	r3,-22(fp)
    f530:	008000b4 	movhi	r2,2
    f534:	10961604 	addi	r2,r2,22616
    f538:	18c7883a 	add	r3,r3,r3
    f53c:	18c7883a 	add	r3,r3,r3
    f540:	10c5883a 	add	r2,r2,r3
    f544:	10800017 	ldw	r2,0(r2)
    f548:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    f54c:	e0bffb17 	ldw	r2,-20(fp)
    f550:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    f554:	e0bffb17 	ldw	r2,-20(fp)
    f558:	e0fffd17 	ldw	r3,-12(fp)
    f55c:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    f560:	e0bffb17 	ldw	r2,-20(fp)
    f564:	10800c03 	ldbu	r2,48(r2)
    f568:	1007883a 	mov	r3,r2
    f56c:	e0bffe03 	ldbu	r2,-8(fp)
    f570:	0084303a 	nor	r2,zero,r2
    f574:	1884703a 	and	r2,r3,r2
    f578:	1007883a 	mov	r3,r2
    f57c:	e0bffb17 	ldw	r2,-20(fp)
    f580:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    f584:	e0bffb17 	ldw	r2,-20(fp)
    f588:	e0ffff03 	ldbu	r3,-4(fp)
    f58c:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    f590:	e0bffb17 	ldw	r2,-20(fp)
    f594:	10800c03 	ldbu	r2,48(r2)
    f598:	10803fcc 	andi	r2,r2,255
    f59c:	1080020c 	andi	r2,r2,8
    f5a0:	1000111e 	bne	r2,zero,f5e8 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    f5a4:	e0bffb17 	ldw	r2,-20(fp)
    f5a8:	10c00d83 	ldbu	r3,54(r2)
    f5ac:	d0a81303 	ldbu	r2,-24500(gp)
    f5b0:	1884b03a 	or	r2,r3,r2
    f5b4:	d0a81305 	stb	r2,-24500(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    f5b8:	e0fffa03 	ldbu	r3,-24(fp)
    f5bc:	e13ffa03 	ldbu	r4,-24(fp)
    f5c0:	d0a81344 	addi	r2,gp,-24499
    f5c4:	2085883a 	add	r2,r4,r2
    f5c8:	11000003 	ldbu	r4,0(r2)
    f5cc:	e0bffb17 	ldw	r2,-20(fp)
    f5d0:	10800d43 	ldbu	r2,53(r2)
    f5d4:	2084b03a 	or	r2,r4,r2
    f5d8:	1009883a 	mov	r4,r2
    f5dc:	d0a81344 	addi	r2,gp,-24499
    f5e0:	1885883a 	add	r2,r3,r2
    f5e4:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    f5e8:	e17ffc17 	ldw	r5,-16(fp)
    f5ec:	e13ffb17 	ldw	r4,-20(fp)
    f5f0:	000f8980 	call	f898 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    f5f4:	e0bffb17 	ldw	r2,-20(fp)
    f5f8:	10800817 	ldw	r2,32(r2)
    f5fc:	10000826 	beq	r2,zero,f620 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    f600:	e0bffb17 	ldw	r2,-20(fp)
    f604:	10800817 	ldw	r2,32(r2)
    f608:	100b883a 	mov	r5,r2
    f60c:	e13ffb17 	ldw	r4,-20(fp)
    f610:	000f9500 	call	f950 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    f614:	e0bffb17 	ldw	r2,-20(fp)
    f618:	e0fffc17 	ldw	r3,-16(fp)
    f61c:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    f620:	e0bffa83 	ldbu	r2,-22(fp)
}
    f624:	e037883a 	mov	sp,fp
    f628:	dfc00117 	ldw	ra,4(sp)
    f62c:	df000017 	ldw	fp,0(sp)
    f630:	dec00204 	addi	sp,sp,8
    f634:	f800283a 	ret

0000f638 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    f638:	defffd04 	addi	sp,sp,-12
    f63c:	df000215 	stw	fp,8(sp)
    f640:	df000204 	addi	fp,sp,8
    f644:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    f648:	d0a81617 	ldw	r2,-24488(gp)
    f64c:	e0ffff17 	ldw	r3,-4(fp)
    f650:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    f654:	d0a81617 	ldw	r2,-24488(gp)
    f658:	10800d03 	ldbu	r2,52(r2)
    f65c:	10803fcc 	andi	r2,r2,255
    f660:	d0e81617 	ldw	r3,-24488(gp)
    f664:	18c00d03 	ldbu	r3,52(r3)
    f668:	18c03fcc 	andi	r3,r3,255
    f66c:	e13fff17 	ldw	r4,-4(fp)
    f670:	20c7883a 	add	r3,r4,r3
    f674:	18c002c4 	addi	r3,r3,11
    f678:	19000003 	ldbu	r4,0(r3)
    f67c:	d0e81617 	ldw	r3,-24488(gp)
    f680:	18c00d43 	ldbu	r3,53(r3)
    f684:	20c6b03a 	or	r3,r4,r3
    f688:	1809883a 	mov	r4,r3
    f68c:	e0ffff17 	ldw	r3,-4(fp)
    f690:	1885883a 	add	r2,r3,r2
    f694:	108002c4 	addi	r2,r2,11
    f698:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    f69c:	e0bfff17 	ldw	r2,-4(fp)
    f6a0:	10c00283 	ldbu	r3,10(r2)
    f6a4:	d0a81617 	ldw	r2,-24488(gp)
    f6a8:	10800d83 	ldbu	r2,54(r2)
    f6ac:	1884b03a 	or	r2,r3,r2
    f6b0:	1007883a 	mov	r3,r2
    f6b4:	e0bfff17 	ldw	r2,-4(fp)
    f6b8:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    f6bc:	d0a81617 	ldw	r2,-24488(gp)
    f6c0:	10800d03 	ldbu	r2,52(r2)
    f6c4:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    f6c8:	e0fffe03 	ldbu	r3,-8(fp)
    f6cc:	e13ffe03 	ldbu	r4,-8(fp)
    f6d0:	d0a81344 	addi	r2,gp,-24499
    f6d4:	2085883a 	add	r2,r4,r2
    f6d8:	10800003 	ldbu	r2,0(r2)
    f6dc:	1009883a 	mov	r4,r2
    f6e0:	d0a81617 	ldw	r2,-24488(gp)
    f6e4:	10800d43 	ldbu	r2,53(r2)
    f6e8:	0084303a 	nor	r2,zero,r2
    f6ec:	2084703a 	and	r2,r4,r2
    f6f0:	1009883a 	mov	r4,r2
    f6f4:	d0a81344 	addi	r2,gp,-24499
    f6f8:	1885883a 	add	r2,r3,r2
    f6fc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    f700:	e0fffe03 	ldbu	r3,-8(fp)
    f704:	d0a81344 	addi	r2,gp,-24499
    f708:	1885883a 	add	r2,r3,r2
    f70c:	10800003 	ldbu	r2,0(r2)
    f710:	10803fcc 	andi	r2,r2,255
    f714:	1000071e 	bne	r2,zero,f734 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    f718:	d0a81617 	ldw	r2,-24488(gp)
    f71c:	10800d83 	ldbu	r2,54(r2)
    f720:	0084303a 	nor	r2,zero,r2
    f724:	1007883a 	mov	r3,r2
    f728:	d0a81303 	ldbu	r2,-24500(gp)
    f72c:	1884703a 	and	r2,r3,r2
    f730:	d0a81305 	stb	r2,-24500(gp)
    }
}
    f734:	0001883a 	nop
    f738:	e037883a 	mov	sp,fp
    f73c:	df000017 	ldw	fp,0(sp)
    f740:	dec00104 	addi	sp,sp,4
    f744:	f800283a 	ret

0000f748 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    f748:	defffb04 	addi	sp,sp,-20
    f74c:	df000415 	stw	fp,16(sp)
    f750:	df000404 	addi	fp,sp,16
    f754:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    f758:	d0a81617 	ldw	r2,-24488(gp)
    f75c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    f760:	d0a81617 	ldw	r2,-24488(gp)
    f764:	e0ffff17 	ldw	r3,-4(fp)
    f768:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    f76c:	e0bfff17 	ldw	r2,-4(fp)
    f770:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
    f774:	e0bffc17 	ldw	r2,-16(fp)
    f778:	10800017 	ldw	r2,0(r2)
    f77c:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    f780:	00002006 	br	f804 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    f784:	d0a81617 	ldw	r2,-24488(gp)
    f788:	10800d03 	ldbu	r2,52(r2)
    f78c:	10803fcc 	andi	r2,r2,255
    f790:	d0e81617 	ldw	r3,-24488(gp)
    f794:	18c00d03 	ldbu	r3,52(r3)
    f798:	18c03fcc 	andi	r3,r3,255
    f79c:	e13ffd17 	ldw	r4,-12(fp)
    f7a0:	20c7883a 	add	r3,r4,r3
    f7a4:	18c002c4 	addi	r3,r3,11
    f7a8:	19000003 	ldbu	r4,0(r3)
    f7ac:	d0e81617 	ldw	r3,-24488(gp)
    f7b0:	18c00d43 	ldbu	r3,53(r3)
    f7b4:	20c6b03a 	or	r3,r4,r3
    f7b8:	1809883a 	mov	r4,r3
    f7bc:	e0fffd17 	ldw	r3,-12(fp)
    f7c0:	1885883a 	add	r2,r3,r2
    f7c4:	108002c4 	addi	r2,r2,11
    f7c8:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    f7cc:	e0bffd17 	ldw	r2,-12(fp)
    f7d0:	10c00283 	ldbu	r3,10(r2)
    f7d4:	d0a81617 	ldw	r2,-24488(gp)
    f7d8:	10800d83 	ldbu	r2,54(r2)
    f7dc:	1884b03a 	or	r2,r3,r2
    f7e0:	1007883a 	mov	r3,r2
    f7e4:	e0bffd17 	ldw	r2,-12(fp)
    f7e8:	10c00285 	stb	r3,10(r2)
        pevents++;
    f7ec:	e0bffc17 	ldw	r2,-16(fp)
    f7f0:	10800104 	addi	r2,r2,4
    f7f4:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
    f7f8:	e0bffc17 	ldw	r2,-16(fp)
    f7fc:	10800017 	ldw	r2,0(r2)
    f800:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    f804:	e0bffd17 	ldw	r2,-12(fp)
    f808:	103fde1e 	bne	r2,zero,f784 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    f80c:	d0a81617 	ldw	r2,-24488(gp)
    f810:	10800d03 	ldbu	r2,52(r2)
    f814:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    f818:	e0fffe03 	ldbu	r3,-8(fp)
    f81c:	e13ffe03 	ldbu	r4,-8(fp)
    f820:	d0a81344 	addi	r2,gp,-24499
    f824:	2085883a 	add	r2,r4,r2
    f828:	10800003 	ldbu	r2,0(r2)
    f82c:	1009883a 	mov	r4,r2
    f830:	d0a81617 	ldw	r2,-24488(gp)
    f834:	10800d43 	ldbu	r2,53(r2)
    f838:	0084303a 	nor	r2,zero,r2
    f83c:	2084703a 	and	r2,r4,r2
    f840:	1009883a 	mov	r4,r2
    f844:	d0a81344 	addi	r2,gp,-24499
    f848:	1885883a 	add	r2,r3,r2
    f84c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    f850:	e0fffe03 	ldbu	r3,-8(fp)
    f854:	d0a81344 	addi	r2,gp,-24499
    f858:	1885883a 	add	r2,r3,r2
    f85c:	10800003 	ldbu	r2,0(r2)
    f860:	10803fcc 	andi	r2,r2,255
    f864:	1000071e 	bne	r2,zero,f884 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    f868:	d0a81617 	ldw	r2,-24488(gp)
    f86c:	10800d83 	ldbu	r2,54(r2)
    f870:	0084303a 	nor	r2,zero,r2
    f874:	1007883a 	mov	r3,r2
    f878:	d0a81303 	ldbu	r2,-24500(gp)
    f87c:	1884703a 	and	r2,r3,r2
    f880:	d0a81305 	stb	r2,-24500(gp)
    }
}
    f884:	0001883a 	nop
    f888:	e037883a 	mov	sp,fp
    f88c:	df000017 	ldw	fp,0(sp)
    f890:	dec00104 	addi	sp,sp,4
    f894:	f800283a 	ret

0000f898 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    f898:	defffc04 	addi	sp,sp,-16
    f89c:	df000315 	stw	fp,12(sp)
    f8a0:	df000304 	addi	fp,sp,12
    f8a4:	e13ffe15 	stw	r4,-8(fp)
    f8a8:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    f8ac:	e0bffe17 	ldw	r2,-8(fp)
    f8b0:	10800d03 	ldbu	r2,52(r2)
    f8b4:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    f8b8:	e0bffd03 	ldbu	r2,-12(fp)
    f8bc:	e0fffd03 	ldbu	r3,-12(fp)
    f8c0:	e13fff17 	ldw	r4,-4(fp)
    f8c4:	20c7883a 	add	r3,r4,r3
    f8c8:	18c002c4 	addi	r3,r3,11
    f8cc:	18c00003 	ldbu	r3,0(r3)
    f8d0:	1809883a 	mov	r4,r3
    f8d4:	e0fffe17 	ldw	r3,-8(fp)
    f8d8:	18c00d43 	ldbu	r3,53(r3)
    f8dc:	00c6303a 	nor	r3,zero,r3
    f8e0:	20c6703a 	and	r3,r4,r3
    f8e4:	1809883a 	mov	r4,r3
    f8e8:	e0ffff17 	ldw	r3,-4(fp)
    f8ec:	1885883a 	add	r2,r3,r2
    f8f0:	108002c4 	addi	r2,r2,11
    f8f4:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
    f8f8:	e0bffd03 	ldbu	r2,-12(fp)
    f8fc:	e0ffff17 	ldw	r3,-4(fp)
    f900:	1885883a 	add	r2,r3,r2
    f904:	108002c4 	addi	r2,r2,11
    f908:	10800003 	ldbu	r2,0(r2)
    f90c:	10803fcc 	andi	r2,r2,255
    f910:	10000a1e 	bne	r2,zero,f93c <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    f914:	e0bfff17 	ldw	r2,-4(fp)
    f918:	10800283 	ldbu	r2,10(r2)
    f91c:	1007883a 	mov	r3,r2
    f920:	e0bffe17 	ldw	r2,-8(fp)
    f924:	10800d83 	ldbu	r2,54(r2)
    f928:	0084303a 	nor	r2,zero,r2
    f92c:	1884703a 	and	r2,r3,r2
    f930:	1007883a 	mov	r3,r2
    f934:	e0bfff17 	ldw	r2,-4(fp)
    f938:	10c00285 	stb	r3,10(r2)
    }
}
    f93c:	0001883a 	nop
    f940:	e037883a 	mov	sp,fp
    f944:	df000017 	ldw	fp,0(sp)
    f948:	dec00104 	addi	sp,sp,4
    f94c:	f800283a 	ret

0000f950 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    f950:	defffa04 	addi	sp,sp,-24
    f954:	df000515 	stw	fp,20(sp)
    f958:	df000504 	addi	fp,sp,20
    f95c:	e13ffe15 	stw	r4,-8(fp)
    f960:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    f964:	e0bffe17 	ldw	r2,-8(fp)
    f968:	10800d03 	ldbu	r2,52(r2)
    f96c:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
    f970:	e0bffe17 	ldw	r2,-8(fp)
    f974:	10800d83 	ldbu	r2,54(r2)
    f978:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
    f97c:	e0bffe17 	ldw	r2,-8(fp)
    f980:	10800d43 	ldbu	r2,53(r2)
    f984:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
    f988:	e0bfff17 	ldw	r2,-4(fp)
    f98c:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
    f990:	e0bffb17 	ldw	r2,-20(fp)
    f994:	10800017 	ldw	r2,0(r2)
    f998:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    f99c:	00002506 	br	fa34 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
    f9a0:	e0bffd03 	ldbu	r2,-12(fp)
    f9a4:	e0fffd03 	ldbu	r3,-12(fp)
    f9a8:	e13ffc17 	ldw	r4,-16(fp)
    f9ac:	20c7883a 	add	r3,r4,r3
    f9b0:	18c002c4 	addi	r3,r3,11
    f9b4:	18c00003 	ldbu	r3,0(r3)
    f9b8:	1809883a 	mov	r4,r3
    f9bc:	e0fffd83 	ldbu	r3,-10(fp)
    f9c0:	00c6303a 	nor	r3,zero,r3
    f9c4:	20c6703a 	and	r3,r4,r3
    f9c8:	1809883a 	mov	r4,r3
    f9cc:	e0fffc17 	ldw	r3,-16(fp)
    f9d0:	1885883a 	add	r2,r3,r2
    f9d4:	108002c4 	addi	r2,r2,11
    f9d8:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
    f9dc:	e0bffd03 	ldbu	r2,-12(fp)
    f9e0:	e0fffc17 	ldw	r3,-16(fp)
    f9e4:	1885883a 	add	r2,r3,r2
    f9e8:	108002c4 	addi	r2,r2,11
    f9ec:	10800003 	ldbu	r2,0(r2)
    f9f0:	10803fcc 	andi	r2,r2,255
    f9f4:	1000091e 	bne	r2,zero,fa1c <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
    f9f8:	e0bffc17 	ldw	r2,-16(fp)
    f9fc:	10800283 	ldbu	r2,10(r2)
    fa00:	1007883a 	mov	r3,r2
    fa04:	e0bffd43 	ldbu	r2,-11(fp)
    fa08:	0084303a 	nor	r2,zero,r2
    fa0c:	1884703a 	and	r2,r3,r2
    fa10:	1007883a 	mov	r3,r2
    fa14:	e0bffc17 	ldw	r2,-16(fp)
    fa18:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    fa1c:	e0bffb17 	ldw	r2,-20(fp)
    fa20:	10800104 	addi	r2,r2,4
    fa24:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
    fa28:	e0bffb17 	ldw	r2,-20(fp)
    fa2c:	10800017 	ldw	r2,0(r2)
    fa30:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    fa34:	e0bffc17 	ldw	r2,-16(fp)
    fa38:	103fd91e 	bne	r2,zero,f9a0 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    fa3c:	0001883a 	nop
    fa40:	e037883a 	mov	sp,fp
    fa44:	df000017 	ldw	fp,0(sp)
    fa48:	dec00104 	addi	sp,sp,4
    fa4c:	f800283a 	ret

0000fa50 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    fa50:	defffc04 	addi	sp,sp,-16
    fa54:	df000315 	stw	fp,12(sp)
    fa58:	df000304 	addi	fp,sp,12
    fa5c:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    fa60:	e0bfff17 	ldw	r2,-4(fp)
    fa64:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    fa68:	e0bfff17 	ldw	r2,-4(fp)
    fa6c:	108002c4 	addi	r2,r2,11
    fa70:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    fa74:	e03ffe05 	stb	zero,-8(fp)
    fa78:	00000706 	br	fa98 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
    fa7c:	e0bffd17 	ldw	r2,-12(fp)
    fa80:	10c00044 	addi	r3,r2,1
    fa84:	e0fffd15 	stw	r3,-12(fp)
    fa88:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    fa8c:	e0bffe03 	ldbu	r2,-8(fp)
    fa90:	10800044 	addi	r2,r2,1
    fa94:	e0bffe05 	stb	r2,-8(fp)
    fa98:	e0bffe03 	ldbu	r2,-8(fp)
    fa9c:	108000f0 	cmpltui	r2,r2,3
    faa0:	103ff61e 	bne	r2,zero,fa7c <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
    faa4:	0001883a 	nop
    faa8:	e037883a 	mov	sp,fp
    faac:	df000017 	ldw	fp,0(sp)
    fab0:	dec00104 	addi	sp,sp,4
    fab4:	f800283a 	ret

0000fab8 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    fab8:	defffb04 	addi	sp,sp,-20
    fabc:	dfc00415 	stw	ra,16(sp)
    fac0:	df000315 	stw	fp,12(sp)
    fac4:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    fac8:	0142d004 	movi	r5,2880
    facc:	010000b4 	movhi	r4,2
    fad0:	21120204 	addi	r4,r4,18440
    fad4:	000fe300 	call	fe30 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    fad8:	008000b4 	movhi	r2,2
    fadc:	10920204 	addi	r2,r2,18440
    fae0:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    fae4:	008000b4 	movhi	r2,2
    fae8:	10920e04 	addi	r2,r2,18488
    faec:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    faf0:	e03ffd0d 	sth	zero,-12(fp)
    faf4:	00001306 	br	fb44 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    faf8:	e0bffe17 	ldw	r2,-8(fp)
    fafc:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    fb00:	e0bffe17 	ldw	r2,-8(fp)
    fb04:	e0ffff17 	ldw	r3,-4(fp)
    fb08:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    fb0c:	e0bffe17 	ldw	r2,-8(fp)
    fb10:	00c00fc4 	movi	r3,63
    fb14:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    fb18:	e0bffe17 	ldw	r2,-8(fp)
    fb1c:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    fb20:	e0bffe17 	ldw	r2,-8(fp)
    fb24:	10800c04 	addi	r2,r2,48
    fb28:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    fb2c:	e0bfff17 	ldw	r2,-4(fp)
    fb30:	10800c04 	addi	r2,r2,48
    fb34:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    fb38:	e0bffd0b 	ldhu	r2,-12(fp)
    fb3c:	10800044 	addi	r2,r2,1
    fb40:	e0bffd0d 	sth	r2,-12(fp)
    fb44:	e0bffd0b 	ldhu	r2,-12(fp)
    fb48:	10800ef0 	cmpltui	r2,r2,59
    fb4c:	103fea1e 	bne	r2,zero,faf8 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    fb50:	e0bffe17 	ldw	r2,-8(fp)
    fb54:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    fb58:	e0bffe17 	ldw	r2,-8(fp)
    fb5c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    fb60:	e0bffe17 	ldw	r2,-8(fp)
    fb64:	00c00fc4 	movi	r3,63
    fb68:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    fb6c:	e0bffe17 	ldw	r2,-8(fp)
    fb70:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    fb74:	008000b4 	movhi	r2,2
    fb78:	10920204 	addi	r2,r2,18440
    fb7c:	d0a81415 	stw	r2,-24496(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    fb80:	0001883a 	nop
    fb84:	e037883a 	mov	sp,fp
    fb88:	dfc00117 	ldw	ra,4(sp)
    fb8c:	df000017 	ldw	fp,0(sp)
    fb90:	dec00204 	addi	sp,sp,8
    fb94:	f800283a 	ret

0000fb98 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    fb98:	deffff04 	addi	sp,sp,-4
    fb9c:	df000015 	stw	fp,0(sp)
    fba0:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    fba4:	d0281715 	stw	zero,-24484(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    fba8:	d0281505 	stb	zero,-24492(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    fbac:	d0280705 	stb	zero,-24548(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    fbb0:	d0280f45 	stb	zero,-24515(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    fbb4:	d0280745 	stb	zero,-24547(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    fbb8:	d0280c15 	stw	zero,-24528(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    fbbc:	d0280815 	stw	zero,-24544(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    fbc0:	d0281a15 	stw	zero,-24472(gp)
    OSIdleCtrMax  = 0L;
    fbc4:	d0280d15 	stw	zero,-24524(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    fbc8:	d0281905 	stb	zero,-24476(gp)
#endif
}
    fbcc:	0001883a 	nop
    fbd0:	e037883a 	mov	sp,fp
    fbd4:	df000017 	ldw	fp,0(sp)
    fbd8:	dec00104 	addi	sp,sp,4
    fbdc:	f800283a 	ret

0000fbe0 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    fbe0:	defffd04 	addi	sp,sp,-12
    fbe4:	df000215 	stw	fp,8(sp)
    fbe8:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    fbec:	d0281305 	stb	zero,-24500(gp)
    prdytbl       = &OSRdyTbl[0];
    fbf0:	d0a81344 	addi	r2,gp,-24499
    fbf4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    fbf8:	e03ffe05 	stb	zero,-8(fp)
    fbfc:	00000706 	br	fc1c <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
    fc00:	e0bfff17 	ldw	r2,-4(fp)
    fc04:	10c00044 	addi	r3,r2,1
    fc08:	e0ffff15 	stw	r3,-4(fp)
    fc0c:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    fc10:	e0bffe03 	ldbu	r2,-8(fp)
    fc14:	10800044 	addi	r2,r2,1
    fc18:	e0bffe05 	stb	r2,-8(fp)
    fc1c:	e0bffe03 	ldbu	r2,-8(fp)
    fc20:	108000f0 	cmpltui	r2,r2,3
    fc24:	103ff61e 	bne	r2,zero,fc00 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    fc28:	d0280945 	stb	zero,-24539(gp)
    OSPrioHighRdy = 0;
    fc2c:	d0280905 	stb	zero,-24540(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    fc30:	d0281115 	stw	zero,-24508(gp)
    OSTCBCur      = (OS_TCB *)0;
    fc34:	d0281615 	stw	zero,-24488(gp)
}
    fc38:	0001883a 	nop
    fc3c:	e037883a 	mov	sp,fp
    fc40:	df000017 	ldw	fp,0(sp)
    fc44:	dec00104 	addi	sp,sp,4
    fc48:	f800283a 	ret

0000fc4c <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    fc4c:	defff804 	addi	sp,sp,-32
    fc50:	dfc00715 	stw	ra,28(sp)
    fc54:	df000615 	stw	fp,24(sp)
    fc58:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    fc5c:	008000c4 	movi	r2,3
    fc60:	d8800415 	stw	r2,16(sp)
    fc64:	d8000315 	stw	zero,12(sp)
    fc68:	00808004 	movi	r2,512
    fc6c:	d8800215 	stw	r2,8(sp)
    fc70:	008000b4 	movhi	r2,2
    fc74:	10900204 	addi	r2,r2,16392
    fc78:	d8800115 	stw	r2,4(sp)
    fc7c:	00bfffd4 	movui	r2,65535
    fc80:	d8800015 	stw	r2,0(sp)
    fc84:	01c00504 	movi	r7,20
    fc88:	018000b4 	movhi	r6,2
    fc8c:	31920104 	addi	r6,r6,18436
    fc90:	000b883a 	mov	r5,zero
    fc94:	01000074 	movhi	r4,1
    fc98:	21003e04 	addi	r4,r4,248
    fc9c:	00147c80 	call	147c8 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    fca0:	e1bfff04 	addi	r6,fp,-4
    fca4:	014000b4 	movhi	r5,2
    fca8:	29699304 	addi	r5,r5,-22964
    fcac:	01000504 	movi	r4,20
    fcb0:	0014fd80 	call	14fd8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    fcb4:	0001883a 	nop
    fcb8:	e037883a 	mov	sp,fp
    fcbc:	dfc00117 	ldw	ra,4(sp)
    fcc0:	df000017 	ldw	fp,0(sp)
    fcc4:	dec00204 	addi	sp,sp,8
    fcc8:	f800283a 	ret

0000fccc <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    fccc:	defff804 	addi	sp,sp,-32
    fcd0:	dfc00715 	stw	ra,28(sp)
    fcd4:	df000615 	stw	fp,24(sp)
    fcd8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    fcdc:	008000c4 	movi	r2,3
    fce0:	d8800415 	stw	r2,16(sp)
    fce4:	d8000315 	stw	zero,12(sp)
    fce8:	00808004 	movi	r2,512
    fcec:	d8800215 	stw	r2,8(sp)
    fcf0:	008000b4 	movhi	r2,2
    fcf4:	108d8a04 	addi	r2,r2,13864
    fcf8:	d8800115 	stw	r2,4(sp)
    fcfc:	00bfff94 	movui	r2,65534
    fd00:	d8800015 	stw	r2,0(sp)
    fd04:	01c004c4 	movi	r7,19
    fd08:	018000b4 	movhi	r6,2
    fd0c:	318f8904 	addi	r6,r6,15908
    fd10:	000b883a 	mov	r5,zero
    fd14:	01000074 	movhi	r4,1
    fd18:	21005504 	addi	r4,r4,340
    fd1c:	00147c80 	call	147c8 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    fd20:	e1bfff04 	addi	r6,fp,-4
    fd24:	014000b4 	movhi	r5,2
    fd28:	29699704 	addi	r5,r5,-22948
    fd2c:	010004c4 	movi	r4,19
    fd30:	0014fd80 	call	14fd8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    fd34:	0001883a 	nop
    fd38:	e037883a 	mov	sp,fp
    fd3c:	dfc00117 	ldw	ra,4(sp)
    fd40:	df000017 	ldw	fp,0(sp)
    fd44:	dec00204 	addi	sp,sp,8
    fd48:	f800283a 	ret

0000fd4c <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    fd4c:	defffb04 	addi	sp,sp,-20
    fd50:	dfc00415 	stw	ra,16(sp)
    fd54:	df000315 	stw	fp,12(sp)
    fd58:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    fd5c:	01414404 	movi	r5,1296
    fd60:	010000b4 	movhi	r4,2
    fd64:	2114d204 	addi	r4,r4,21320
    fd68:	000fe300 	call	fe30 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    fd6c:	01401504 	movi	r5,84
    fd70:	010000b4 	movhi	r4,2
    fd74:	21161604 	addi	r4,r4,22616
    fd78:	000fe300 	call	fe30 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    fd7c:	008000b4 	movhi	r2,2
    fd80:	1094d204 	addi	r2,r2,21320
    fd84:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    fd88:	008000b4 	movhi	r2,2
    fd8c:	1094ed04 	addi	r2,r2,21428
    fd90:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    fd94:	e03ffd05 	stb	zero,-12(fp)
    fd98:	00001106 	br	fde0 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    fd9c:	e0bffe17 	ldw	r2,-8(fp)
    fda0:	e0ffff17 	ldw	r3,-4(fp)
    fda4:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    fda8:	e0bffe17 	ldw	r2,-8(fp)
    fdac:	00c00fc4 	movi	r3,63
    fdb0:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    fdb4:	e0bffe17 	ldw	r2,-8(fp)
    fdb8:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    fdbc:	e0bffe17 	ldw	r2,-8(fp)
    fdc0:	10801b04 	addi	r2,r2,108
    fdc4:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    fdc8:	e0bfff17 	ldw	r2,-4(fp)
    fdcc:	10801b04 	addi	r2,r2,108
    fdd0:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    fdd4:	e0bffd03 	ldbu	r2,-12(fp)
    fdd8:	10800044 	addi	r2,r2,1
    fddc:	e0bffd05 	stb	r2,-12(fp)
    fde0:	e0bffd03 	ldbu	r2,-12(fp)
    fde4:	108002f0 	cmpltui	r2,r2,11
    fde8:	103fec1e 	bne	r2,zero,fd9c <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    fdec:	e0bffe17 	ldw	r2,-8(fp)
    fdf0:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    fdf4:	e0bffe17 	ldw	r2,-8(fp)
    fdf8:	00c00fc4 	movi	r3,63
    fdfc:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    fe00:	e0bffe17 	ldw	r2,-8(fp)
    fe04:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    fe08:	d0280a15 	stw	zero,-24536(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
    fe0c:	008000b4 	movhi	r2,2
    fe10:	1094d204 	addi	r2,r2,21320
    fe14:	d0a80e15 	stw	r2,-24520(gp)
}
    fe18:	0001883a 	nop
    fe1c:	e037883a 	mov	sp,fp
    fe20:	dfc00117 	ldw	ra,4(sp)
    fe24:	df000017 	ldw	fp,0(sp)
    fe28:	dec00204 	addi	sp,sp,8
    fe2c:	f800283a 	ret

0000fe30 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    fe30:	defffd04 	addi	sp,sp,-12
    fe34:	df000215 	stw	fp,8(sp)
    fe38:	df000204 	addi	fp,sp,8
    fe3c:	e13ffe15 	stw	r4,-8(fp)
    fe40:	2805883a 	mov	r2,r5
    fe44:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    fe48:	00000706 	br	fe68 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    fe4c:	e0bffe17 	ldw	r2,-8(fp)
    fe50:	10c00044 	addi	r3,r2,1
    fe54:	e0fffe15 	stw	r3,-8(fp)
    fe58:	10000005 	stb	zero,0(r2)
        size--;
    fe5c:	e0bfff0b 	ldhu	r2,-4(fp)
    fe60:	10bfffc4 	addi	r2,r2,-1
    fe64:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    fe68:	e0bfff0b 	ldhu	r2,-4(fp)
    fe6c:	103ff71e 	bne	r2,zero,fe4c <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    fe70:	0001883a 	nop
    fe74:	e037883a 	mov	sp,fp
    fe78:	df000017 	ldw	fp,0(sp)
    fe7c:	dec00104 	addi	sp,sp,4
    fe80:	f800283a 	ret

0000fe84 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    fe84:	defffc04 	addi	sp,sp,-16
    fe88:	df000315 	stw	fp,12(sp)
    fe8c:	df000304 	addi	fp,sp,12
    fe90:	e13ffd15 	stw	r4,-12(fp)
    fe94:	e17ffe15 	stw	r5,-8(fp)
    fe98:	3005883a 	mov	r2,r6
    fe9c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    fea0:	00000b06 	br	fed0 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
    fea4:	e0bffd17 	ldw	r2,-12(fp)
    fea8:	10c00044 	addi	r3,r2,1
    feac:	e0fffd15 	stw	r3,-12(fp)
    feb0:	e0fffe17 	ldw	r3,-8(fp)
    feb4:	19000044 	addi	r4,r3,1
    feb8:	e13ffe15 	stw	r4,-8(fp)
    febc:	18c00003 	ldbu	r3,0(r3)
    fec0:	10c00005 	stb	r3,0(r2)
        size--;
    fec4:	e0bfff0b 	ldhu	r2,-4(fp)
    fec8:	10bfffc4 	addi	r2,r2,-1
    fecc:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    fed0:	e0bfff0b 	ldhu	r2,-4(fp)
    fed4:	103ff31e 	bne	r2,zero,fea4 <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
    fed8:	0001883a 	nop
    fedc:	e037883a 	mov	sp,fp
    fee0:	df000017 	ldw	fp,0(sp)
    fee4:	dec00104 	addi	sp,sp,4
    fee8:	f800283a 	ret

0000feec <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    feec:	defffb04 	addi	sp,sp,-20
    fef0:	dfc00415 	stw	ra,16(sp)
    fef4:	df000315 	stw	fp,12(sp)
    fef8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    fefc:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ff00:	0005303a 	rdctl	r2,status
    ff04:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ff08:	e0ffff17 	ldw	r3,-4(fp)
    ff0c:	00bfff84 	movi	r2,-2
    ff10:	1884703a 	and	r2,r3,r2
    ff14:	1001703a 	wrctl	status,r2
  
  return context;
    ff18:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
    ff1c:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    ff20:	d0a81503 	ldbu	r2,-24492(gp)
    ff24:	10803fcc 	andi	r2,r2,255
    ff28:	10001a1e 	bne	r2,zero,ff94 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    ff2c:	d0a80703 	ldbu	r2,-24548(gp)
    ff30:	10803fcc 	andi	r2,r2,255
    ff34:	1000171e 	bne	r2,zero,ff94 <OS_Sched+0xa8>
            OS_SchedNew();
    ff38:	000ffbc0 	call	ffbc <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    ff3c:	d0e80903 	ldbu	r3,-24540(gp)
    ff40:	d0a80943 	ldbu	r2,-24539(gp)
    ff44:	18c03fcc 	andi	r3,r3,255
    ff48:	10803fcc 	andi	r2,r2,255
    ff4c:	18801126 	beq	r3,r2,ff94 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    ff50:	d0a80903 	ldbu	r2,-24540(gp)
    ff54:	10c03fcc 	andi	r3,r2,255
    ff58:	008000b4 	movhi	r2,2
    ff5c:	10961604 	addi	r2,r2,22616
    ff60:	18c7883a 	add	r3,r3,r3
    ff64:	18c7883a 	add	r3,r3,r3
    ff68:	10c5883a 	add	r2,r2,r3
    ff6c:	10800017 	ldw	r2,0(r2)
    ff70:	d0a81115 	stw	r2,-24508(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    ff74:	d0a81117 	ldw	r2,-24508(gp)
    ff78:	10c00e17 	ldw	r3,56(r2)
    ff7c:	18c00044 	addi	r3,r3,1
    ff80:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    ff84:	d0a80c17 	ldw	r2,-24528(gp)
    ff88:	10800044 	addi	r2,r2,1
    ff8c:	d0a80c15 	stw	r2,-24528(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
    ff90:	00192c40 	call	192c4 <OSCtxSw>
    ff94:	e0bffd17 	ldw	r2,-12(fp)
    ff98:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ff9c:	e0bffe17 	ldw	r2,-8(fp)
    ffa0:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    ffa4:	0001883a 	nop
    ffa8:	e037883a 	mov	sp,fp
    ffac:	dfc00117 	ldw	ra,4(sp)
    ffb0:	df000017 	ldw	fp,0(sp)
    ffb4:	dec00204 	addi	sp,sp,8
    ffb8:	f800283a 	ret

0000ffbc <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    ffbc:	defffe04 	addi	sp,sp,-8
    ffc0:	df000115 	stw	fp,4(sp)
    ffc4:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    ffc8:	d0a81303 	ldbu	r2,-24500(gp)
    ffcc:	10c03fcc 	andi	r3,r2,255
    ffd0:	008000b4 	movhi	r2,2
    ffd4:	10a95304 	addi	r2,r2,-23220
    ffd8:	10c5883a 	add	r2,r2,r3
    ffdc:	10800003 	ldbu	r2,0(r2)
    ffe0:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    ffe4:	e0bfff03 	ldbu	r2,-4(fp)
    ffe8:	100490fa 	slli	r2,r2,3
    ffec:	1009883a 	mov	r4,r2
    fff0:	e0ffff03 	ldbu	r3,-4(fp)
    fff4:	d0a81344 	addi	r2,gp,-24499
    fff8:	1885883a 	add	r2,r3,r2
    fffc:	10800003 	ldbu	r2,0(r2)
   10000:	10c03fcc 	andi	r3,r2,255
   10004:	008000b4 	movhi	r2,2
   10008:	10a95304 	addi	r2,r2,-23220
   1000c:	10c5883a 	add	r2,r2,r3
   10010:	10800003 	ldbu	r2,0(r2)
   10014:	2085883a 	add	r2,r4,r2
   10018:	d0a80905 	stb	r2,-24540(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   1001c:	0001883a 	nop
   10020:	e037883a 	mov	sp,fp
   10024:	df000017 	ldw	fp,0(sp)
   10028:	dec00104 	addi	sp,sp,4
   1002c:	f800283a 	ret

00010030 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   10030:	defffc04 	addi	sp,sp,-16
   10034:	df000315 	stw	fp,12(sp)
   10038:	df000304 	addi	fp,sp,12
   1003c:	e13ffe15 	stw	r4,-8(fp)
   10040:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   10044:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   10048:	00000b06 	br	10078 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   1004c:	e0bffe17 	ldw	r2,-8(fp)
   10050:	10c00044 	addi	r3,r2,1
   10054:	e0fffe15 	stw	r3,-8(fp)
   10058:	e0ffff17 	ldw	r3,-4(fp)
   1005c:	19000044 	addi	r4,r3,1
   10060:	e13fff15 	stw	r4,-4(fp)
   10064:	18c00003 	ldbu	r3,0(r3)
   10068:	10c00005 	stb	r3,0(r2)
        len++;
   1006c:	e0bffd03 	ldbu	r2,-12(fp)
   10070:	10800044 	addi	r2,r2,1
   10074:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   10078:	e0bfff17 	ldw	r2,-4(fp)
   1007c:	10800003 	ldbu	r2,0(r2)
   10080:	10803fcc 	andi	r2,r2,255
   10084:	103ff11e 	bne	r2,zero,1004c <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   10088:	e0bffe17 	ldw	r2,-8(fp)
   1008c:	10000005 	stb	zero,0(r2)
    return (len);
   10090:	e0bffd03 	ldbu	r2,-12(fp)
}
   10094:	e037883a 	mov	sp,fp
   10098:	df000017 	ldw	fp,0(sp)
   1009c:	dec00104 	addi	sp,sp,4
   100a0:	f800283a 	ret

000100a4 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   100a4:	defffd04 	addi	sp,sp,-12
   100a8:	df000215 	stw	fp,8(sp)
   100ac:	df000204 	addi	fp,sp,8
   100b0:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   100b4:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   100b8:	00000606 	br	100d4 <OS_StrLen+0x30>
        psrc++;
   100bc:	e0bfff17 	ldw	r2,-4(fp)
   100c0:	10800044 	addi	r2,r2,1
   100c4:	e0bfff15 	stw	r2,-4(fp)
        len++;
   100c8:	e0bffe03 	ldbu	r2,-8(fp)
   100cc:	10800044 	addi	r2,r2,1
   100d0:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   100d4:	e0bfff17 	ldw	r2,-4(fp)
   100d8:	10800003 	ldbu	r2,0(r2)
   100dc:	10803fcc 	andi	r2,r2,255
   100e0:	103ff61e 	bne	r2,zero,100bc <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
   100e4:	e0bffe03 	ldbu	r2,-8(fp)
}
   100e8:	e037883a 	mov	sp,fp
   100ec:	df000017 	ldw	fp,0(sp)
   100f0:	dec00104 	addi	sp,sp,4
   100f4:	f800283a 	ret

000100f8 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   100f8:	defffa04 	addi	sp,sp,-24
   100fc:	dfc00515 	stw	ra,20(sp)
   10100:	df000415 	stw	fp,16(sp)
   10104:	df000404 	addi	fp,sp,16
   10108:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1010c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10110:	0005303a 	rdctl	r2,status
   10114:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10118:	e0fffd17 	ldw	r3,-12(fp)
   1011c:	00bfff84 	movi	r2,-2
   10120:	1884703a 	and	r2,r3,r2
   10124:	1001703a 	wrctl	status,r2
  
  return context;
   10128:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   1012c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   10130:	d0a80817 	ldw	r2,-24544(gp)
   10134:	10800044 	addi	r2,r2,1
   10138:	d0a80815 	stw	r2,-24544(gp)
   1013c:	e0bffc17 	ldw	r2,-16(fp)
   10140:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10144:	e0bffe17 	ldw	r2,-8(fp)
   10148:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   1014c:	00195d80 	call	195d8 <OSTaskIdleHook>
    }
   10150:	003fef06 	br	10110 <OS_TaskIdle+0x18>

00010154 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   10154:	defff804 	addi	sp,sp,-32
   10158:	dfc00715 	stw	ra,28(sp)
   1015c:	df000615 	stw	fp,24(sp)
   10160:	dc400515 	stw	r17,20(sp)
   10164:	dc000415 	stw	r16,16(sp)
   10168:	df000604 	addi	fp,sp,24
   1016c:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10170:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   10174:	00000206 	br	10180 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   10178:	01000044 	movi	r4,1
   1017c:	00158980 	call	15898 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   10180:	d0a81903 	ldbu	r2,-24476(gp)
   10184:	10803fcc 	andi	r2,r2,255
   10188:	103ffb26 	beq	r2,zero,10178 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   1018c:	d0e80d17 	ldw	r3,-24524(gp)
   10190:	00947b34 	movhi	r2,20972
   10194:	10a147c4 	addi	r2,r2,-31457
   10198:	1888383a 	mulxuu	r4,r3,r2
   1019c:	1885383a 	mul	r2,r3,r2
   101a0:	1021883a 	mov	r16,r2
   101a4:	2023883a 	mov	r17,r4
   101a8:	8804d17a 	srli	r2,r17,5
   101ac:	d0a80d15 	stw	r2,-24524(gp)
    if (OSIdleCtrMax == 0L) {
   101b0:	d0a80d17 	ldw	r2,-24524(gp)
   101b4:	1000031e 	bne	r2,zero,101c4 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
   101b8:	d0280f05 	stb	zero,-24516(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   101bc:	01003fc4 	movi	r4,255
   101c0:	00155200 	call	15520 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   101c4:	0005303a 	rdctl	r2,status
   101c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   101cc:	e0fffb17 	ldw	r3,-20(fp)
   101d0:	00bfff84 	movi	r2,-2
   101d4:	1884703a 	and	r2,r3,r2
   101d8:	1001703a 	wrctl	status,r2
  
  return context;
   101dc:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   101e0:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   101e4:	d0a80817 	ldw	r2,-24544(gp)
   101e8:	d0a81a15 	stw	r2,-24472(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   101ec:	d0280815 	stw	zero,-24544(gp)
   101f0:	e0bffa17 	ldw	r2,-24(fp)
   101f4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   101f8:	e0bffc17 	ldw	r2,-16(fp)
   101fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   10200:	d0e81a17 	ldw	r3,-24472(gp)
   10204:	d0a80d17 	ldw	r2,-24524(gp)
   10208:	1885203a 	divu	r2,r3,r2
   1020c:	1007883a 	mov	r3,r2
   10210:	00801904 	movi	r2,100
   10214:	10c5c83a 	sub	r2,r2,r3
   10218:	d0a80f05 	stb	r2,-24516(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   1021c:	00195580 	call	19558 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   10220:	00102300 	call	10230 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   10224:	0009883a 	mov	r4,zero
   10228:	00158980 	call	15898 <OSTimeDly>
    }
   1022c:	003fe506 	br	101c4 <OS_TaskStat+0x70>

00010230 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   10230:	defffa04 	addi	sp,sp,-24
   10234:	dfc00515 	stw	ra,20(sp)
   10238:	df000415 	stw	fp,16(sp)
   1023c:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   10240:	e03ffc05 	stb	zero,-16(fp)
   10244:	00002406 	br	102d8 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   10248:	e0bffc03 	ldbu	r2,-16(fp)
   1024c:	e0fffe04 	addi	r3,fp,-8
   10250:	180b883a 	mov	r5,r3
   10254:	1009883a 	mov	r4,r2
   10258:	00153600 	call	15360 <OSTaskStkChk>
   1025c:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   10260:	e0bffc43 	ldbu	r2,-15(fp)
   10264:	1000191e 	bne	r2,zero,102cc <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   10268:	e0fffc03 	ldbu	r3,-16(fp)
   1026c:	008000b4 	movhi	r2,2
   10270:	10961604 	addi	r2,r2,22616
   10274:	18c7883a 	add	r3,r3,r3
   10278:	18c7883a 	add	r3,r3,r3
   1027c:	10c5883a 	add	r2,r2,r3
   10280:	10800017 	ldw	r2,0(r2)
   10284:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   10288:	e0bffd17 	ldw	r2,-12(fp)
   1028c:	10000f26 	beq	r2,zero,102cc <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   10290:	e0bffd17 	ldw	r2,-12(fp)
   10294:	10800060 	cmpeqi	r2,r2,1
   10298:	10000c1e 	bne	r2,zero,102cc <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   1029c:	e0bffd17 	ldw	r2,-12(fp)
   102a0:	10c00217 	ldw	r3,8(r2)
   102a4:	e0bffd17 	ldw	r2,-12(fp)
   102a8:	10800317 	ldw	r2,12(r2)
   102ac:	1085883a 	add	r2,r2,r2
   102b0:	1085883a 	add	r2,r2,r2
   102b4:	1887883a 	add	r3,r3,r2
   102b8:	e0bffd17 	ldw	r2,-12(fp)
   102bc:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   102c0:	e0ffff17 	ldw	r3,-4(fp)
   102c4:	e0bffd17 	ldw	r2,-12(fp)
   102c8:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   102cc:	e0bffc03 	ldbu	r2,-16(fp)
   102d0:	10800044 	addi	r2,r2,1
   102d4:	e0bffc05 	stb	r2,-16(fp)
   102d8:	e0bffc03 	ldbu	r2,-16(fp)
   102dc:	10800570 	cmpltui	r2,r2,21
   102e0:	103fd91e 	bne	r2,zero,10248 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
   102e4:	0001883a 	nop
   102e8:	e037883a 	mov	sp,fp
   102ec:	dfc00117 	ldw	ra,4(sp)
   102f0:	df000017 	ldw	fp,0(sp)
   102f4:	dec00204 	addi	sp,sp,8
   102f8:	f800283a 	ret

000102fc <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   102fc:	defff204 	addi	sp,sp,-56
   10300:	dfc00d15 	stw	ra,52(sp)
   10304:	df000c15 	stw	fp,48(sp)
   10308:	df000c04 	addi	fp,sp,48
   1030c:	e17ffc15 	stw	r5,-16(fp)
   10310:	e1bffd15 	stw	r6,-12(fp)
   10314:	3807883a 	mov	r3,r7
   10318:	e0800417 	ldw	r2,16(fp)
   1031c:	e13ffb05 	stb	r4,-20(fp)
   10320:	e0fffe0d 	sth	r3,-8(fp)
   10324:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   10328:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1032c:	0005303a 	rdctl	r2,status
   10330:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10334:	e0fffa17 	ldw	r3,-24(fp)
   10338:	00bfff84 	movi	r2,-2
   1033c:	1884703a 	and	r2,r3,r2
   10340:	1001703a 	wrctl	status,r2
  
  return context;
   10344:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
   10348:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   1034c:	d0a80e17 	ldw	r2,-24520(gp)
   10350:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
   10354:	e0bff617 	ldw	r2,-40(fp)
   10358:	10009326 	beq	r2,zero,105a8 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   1035c:	e0bff617 	ldw	r2,-40(fp)
   10360:	10800517 	ldw	r2,20(r2)
   10364:	d0a80e15 	stw	r2,-24520(gp)
   10368:	e0bff417 	ldw	r2,-48(fp)
   1036c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10370:	e0bff817 	ldw	r2,-32(fp)
   10374:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   10378:	e0bff617 	ldw	r2,-40(fp)
   1037c:	e0fffc17 	ldw	r3,-16(fp)
   10380:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   10384:	e0bff617 	ldw	r2,-40(fp)
   10388:	e0fffb03 	ldbu	r3,-20(fp)
   1038c:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   10390:	e0bff617 	ldw	r2,-40(fp)
   10394:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   10398:	e0bff617 	ldw	r2,-40(fp)
   1039c:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   103a0:	e0bff617 	ldw	r2,-40(fp)
   103a4:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   103a8:	e0bff617 	ldw	r2,-40(fp)
   103ac:	e0c00317 	ldw	r3,12(fp)
   103b0:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   103b4:	e0bff617 	ldw	r2,-40(fp)
   103b8:	e0c00217 	ldw	r3,8(fp)
   103bc:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   103c0:	e0bff617 	ldw	r2,-40(fp)
   103c4:	e0fffd17 	ldw	r3,-12(fp)
   103c8:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   103cc:	e0bff617 	ldw	r2,-40(fp)
   103d0:	e0ffff0b 	ldhu	r3,-4(fp)
   103d4:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   103d8:	e0bff617 	ldw	r2,-40(fp)
   103dc:	e0fffe0b 	ldhu	r3,-8(fp)
   103e0:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   103e4:	e0bff617 	ldw	r2,-40(fp)
   103e8:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   103ec:	e0bffb03 	ldbu	r2,-20(fp)
   103f0:	1004d0fa 	srli	r2,r2,3
   103f4:	1007883a 	mov	r3,r2
   103f8:	e0bff617 	ldw	r2,-40(fp)
   103fc:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   10400:	e0bffb03 	ldbu	r2,-20(fp)
   10404:	108001cc 	andi	r2,r2,7
   10408:	1007883a 	mov	r3,r2
   1040c:	e0bff617 	ldw	r2,-40(fp)
   10410:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   10414:	e0bff617 	ldw	r2,-40(fp)
   10418:	10800d03 	ldbu	r2,52(r2)
   1041c:	10803fcc 	andi	r2,r2,255
   10420:	00c00044 	movi	r3,1
   10424:	1884983a 	sll	r2,r3,r2
   10428:	1007883a 	mov	r3,r2
   1042c:	e0bff617 	ldw	r2,-40(fp)
   10430:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   10434:	e0bff617 	ldw	r2,-40(fp)
   10438:	10800cc3 	ldbu	r2,51(r2)
   1043c:	10803fcc 	andi	r2,r2,255
   10440:	00c00044 	movi	r3,1
   10444:	1884983a 	sll	r2,r3,r2
   10448:	1007883a 	mov	r3,r2
   1044c:	e0bff617 	ldw	r2,-40(fp)
   10450:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   10454:	e0bff617 	ldw	r2,-40(fp)
   10458:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   1045c:	e0bff617 	ldw	r2,-40(fp)
   10460:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   10464:	e0bff617 	ldw	r2,-40(fp)
   10468:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   1046c:	e0bff617 	ldw	r2,-40(fp)
   10470:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   10474:	e0bff617 	ldw	r2,-40(fp)
   10478:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   1047c:	e0bff617 	ldw	r2,-40(fp)
   10480:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   10484:	e0bff617 	ldw	r2,-40(fp)
   10488:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   1048c:	e0bff617 	ldw	r2,-40(fp)
   10490:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   10494:	e0bff617 	ldw	r2,-40(fp)
   10498:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   1049c:	e0bff617 	ldw	r2,-40(fp)
   104a0:	00c00fc4 	movi	r3,63
   104a4:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   104a8:	e0bff617 	ldw	r2,-40(fp)
   104ac:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   104b0:	e13ff617 	ldw	r4,-40(fp)
   104b4:	00195f80 	call	195f8 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   104b8:	e13ff617 	ldw	r4,-40(fp)
   104bc:	00194f00 	call	194f0 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   104c0:	0005303a 	rdctl	r2,status
   104c4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   104c8:	e0fff517 	ldw	r3,-44(fp)
   104cc:	00bfff84 	movi	r2,-2
   104d0:	1884703a 	and	r2,r3,r2
   104d4:	1001703a 	wrctl	status,r2
  
  return context;
   104d8:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
   104dc:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   104e0:	e0fffb03 	ldbu	r3,-20(fp)
   104e4:	008000b4 	movhi	r2,2
   104e8:	10961604 	addi	r2,r2,22616
   104ec:	18c7883a 	add	r3,r3,r3
   104f0:	18c7883a 	add	r3,r3,r3
   104f4:	10c5883a 	add	r2,r2,r3
   104f8:	e0fff617 	ldw	r3,-40(fp)
   104fc:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   10500:	d0e80a17 	ldw	r3,-24536(gp)
   10504:	e0bff617 	ldw	r2,-40(fp)
   10508:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   1050c:	e0bff617 	ldw	r2,-40(fp)
   10510:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   10514:	d0a80a17 	ldw	r2,-24536(gp)
   10518:	10000326 	beq	r2,zero,10528 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   1051c:	d0a80a17 	ldw	r2,-24536(gp)
   10520:	e0fff617 	ldw	r3,-40(fp)
   10524:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   10528:	e0bff617 	ldw	r2,-40(fp)
   1052c:	d0a80a15 	stw	r2,-24536(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   10530:	e0bff617 	ldw	r2,-40(fp)
   10534:	10c00d83 	ldbu	r3,54(r2)
   10538:	d0a81303 	ldbu	r2,-24500(gp)
   1053c:	1884b03a 	or	r2,r3,r2
   10540:	d0a81305 	stb	r2,-24500(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   10544:	e0bff617 	ldw	r2,-40(fp)
   10548:	10800d03 	ldbu	r2,52(r2)
   1054c:	10c03fcc 	andi	r3,r2,255
   10550:	e0bff617 	ldw	r2,-40(fp)
   10554:	10800d03 	ldbu	r2,52(r2)
   10558:	11003fcc 	andi	r4,r2,255
   1055c:	d0a81344 	addi	r2,gp,-24499
   10560:	2085883a 	add	r2,r4,r2
   10564:	11000003 	ldbu	r4,0(r2)
   10568:	e0bff617 	ldw	r2,-40(fp)
   1056c:	10800d43 	ldbu	r2,53(r2)
   10570:	2084b03a 	or	r2,r4,r2
   10574:	1009883a 	mov	r4,r2
   10578:	d0a81344 	addi	r2,gp,-24499
   1057c:	1885883a 	add	r2,r3,r2
   10580:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   10584:	d0a80f43 	ldbu	r2,-24515(gp)
   10588:	10800044 	addi	r2,r2,1
   1058c:	d0a80f45 	stb	r2,-24515(gp)
   10590:	e0bff417 	ldw	r2,-48(fp)
   10594:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10598:	e0bff717 	ldw	r2,-36(fp)
   1059c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   105a0:	0005883a 	mov	r2,zero
   105a4:	00000506 	br	105bc <OS_TCBInit+0x2c0>
   105a8:	e0bff417 	ldw	r2,-48(fp)
   105ac:	e0bff915 	stw	r2,-28(fp)
   105b0:	e0bff917 	ldw	r2,-28(fp)
   105b4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   105b8:	00801084 	movi	r2,66
}
   105bc:	e037883a 	mov	sp,fp
   105c0:	dfc00117 	ldw	ra,4(sp)
   105c4:	df000017 	ldw	fp,0(sp)
   105c8:	dec00204 	addi	sp,sp,8
   105cc:	f800283a 	ret

000105d0 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   105d0:	defffe04 	addi	sp,sp,-8
   105d4:	df000115 	stw	fp,4(sp)
   105d8:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   105dc:	d0a01104 	addi	r2,gp,-32700
   105e0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   105e4:	d0a01204 	addi	r2,gp,-32696
   105e8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   105ec:	d0a01384 	addi	r2,gp,-32690
   105f0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   105f4:	d0a01404 	addi	r2,gp,-32688
   105f8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   105fc:	d0a01304 	addi	r2,gp,-32692
   10600:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   10604:	d0a01484 	addi	r2,gp,-32686
   10608:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   1060c:	d0a01504 	addi	r2,gp,-32684
   10610:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   10614:	d0a01584 	addi	r2,gp,-32682
   10618:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   1061c:	d0a01604 	addi	r2,gp,-32680
   10620:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   10624:	d0a01684 	addi	r2,gp,-32678
   10628:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   1062c:	d0a01704 	addi	r2,gp,-32676
   10630:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   10634:	d0a01784 	addi	r2,gp,-32674
   10638:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   1063c:	d0a01804 	addi	r2,gp,-32672
   10640:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   10644:	d0a01884 	addi	r2,gp,-32670
   10648:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   1064c:	d0a01904 	addi	r2,gp,-32668
   10650:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   10654:	d0a01984 	addi	r2,gp,-32666
   10658:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   1065c:	d0a01a04 	addi	r2,gp,-32664
   10660:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   10664:	d0a01a84 	addi	r2,gp,-32662
   10668:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   1066c:	d0a01b04 	addi	r2,gp,-32660
   10670:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   10674:	d0a01b84 	addi	r2,gp,-32658
   10678:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   1067c:	d0a01c04 	addi	r2,gp,-32656
   10680:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   10684:	d0a01c84 	addi	r2,gp,-32654
   10688:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   1068c:	d0a01d04 	addi	r2,gp,-32652
   10690:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   10694:	d0a01d84 	addi	r2,gp,-32650
   10698:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   1069c:	d0a01e04 	addi	r2,gp,-32648
   106a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   106a4:	d0a01e84 	addi	r2,gp,-32646
   106a8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   106ac:	d0a01f04 	addi	r2,gp,-32644
   106b0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   106b4:	d0a01f84 	addi	r2,gp,-32642
   106b8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   106bc:	d0a02004 	addi	r2,gp,-32640
   106c0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   106c4:	d0a02084 	addi	r2,gp,-32638
   106c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   106cc:	d0a02104 	addi	r2,gp,-32636
   106d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   106d4:	d0a02184 	addi	r2,gp,-32634
   106d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   106dc:	d0a02204 	addi	r2,gp,-32632
   106e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   106e4:	d0a02284 	addi	r2,gp,-32630
   106e8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   106ec:	d0a02304 	addi	r2,gp,-32628
   106f0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   106f4:	d0a02384 	addi	r2,gp,-32626
   106f8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   106fc:	d0a02404 	addi	r2,gp,-32624
   10700:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   10704:	d0a02484 	addi	r2,gp,-32622
   10708:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   1070c:	d0a02504 	addi	r2,gp,-32620
   10710:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   10714:	d0a02584 	addi	r2,gp,-32618
   10718:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   1071c:	d0a02604 	addi	r2,gp,-32616
   10720:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   10724:	d0a02684 	addi	r2,gp,-32614
   10728:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   1072c:	d0a02704 	addi	r2,gp,-32612
   10730:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   10734:	d0a02784 	addi	r2,gp,-32610
   10738:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   1073c:	d0a02804 	addi	r2,gp,-32608
   10740:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   10744:	d0a02d04 	addi	r2,gp,-32588
   10748:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   1074c:	0001883a 	nop
   10750:	e037883a 	mov	sp,fp
   10754:	df000017 	ldw	fp,0(sp)
   10758:	dec00104 	addi	sp,sp,4
   1075c:	f800283a 	ret

00010760 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   10760:	defff204 	addi	sp,sp,-56
   10764:	df000d15 	stw	fp,52(sp)
   10768:	df000d04 	addi	fp,sp,52
   1076c:	e13ffc15 	stw	r4,-16(fp)
   10770:	2807883a 	mov	r3,r5
   10774:	3005883a 	mov	r2,r6
   10778:	e1ffff15 	stw	r7,-4(fp)
   1077c:	e0fffd0d 	sth	r3,-12(fp)
   10780:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   10784:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   10788:	e0bfff17 	ldw	r2,-4(fp)
   1078c:	1000021e 	bne	r2,zero,10798 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   10790:	0005883a 	mov	r2,zero
   10794:	0000b006 	br	10a58 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   10798:	e0bffc17 	ldw	r2,-16(fp)
   1079c:	1000051e 	bne	r2,zero,107b4 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   107a0:	e0bfff17 	ldw	r2,-4(fp)
   107a4:	00c01b84 	movi	r3,110
   107a8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   107ac:	0005883a 	mov	r2,zero
   107b0:	0000a906 	br	10a58 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   107b4:	e0bffc17 	ldw	r2,-16(fp)
   107b8:	10800003 	ldbu	r2,0(r2)
   107bc:	10803fcc 	andi	r2,r2,255
   107c0:	10800160 	cmpeqi	r2,r2,5
   107c4:	1000051e 	bne	r2,zero,107dc <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   107c8:	e0bfff17 	ldw	r2,-4(fp)
   107cc:	00c00044 	movi	r3,1
   107d0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   107d4:	0005883a 	mov	r2,zero
   107d8:	00009f06 	br	10a58 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   107dc:	e0fffe03 	ldbu	r3,-8(fp)
   107e0:	00bfe004 	movi	r2,-128
   107e4:	1884703a 	and	r2,r3,r2
   107e8:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   107ec:	e0bff503 	ldbu	r2,-44(fp)
   107f0:	10000626 	beq	r2,zero,1080c <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   107f4:	e0bffe03 	ldbu	r2,-8(fp)
   107f8:	10801fcc 	andi	r2,r2,127
   107fc:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   10800:	00800044 	movi	r2,1
   10804:	e0bff385 	stb	r2,-50(fp)
   10808:	00000106 	br	10810 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   1080c:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   10810:	e0bfff17 	ldw	r2,-4(fp)
   10814:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10818:	0005303a 	rdctl	r2,status
   1081c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10820:	e0fffb17 	ldw	r3,-20(fp)
   10824:	00bfff84 	movi	r2,-2
   10828:	1884703a 	and	r2,r3,r2
   1082c:	1001703a 	wrctl	status,r2
  
  return context;
   10830:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   10834:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   10838:	e0bffe03 	ldbu	r2,-8(fp)
   1083c:	10c00060 	cmpeqi	r3,r2,1
   10840:	18005f1e 	bne	r3,zero,109c0 <OSFlagAccept+0x260>
   10844:	10c00088 	cmpgei	r3,r2,2
   10848:	1800021e 	bne	r3,zero,10854 <OSFlagAccept+0xf4>
   1084c:	10003f26 	beq	r2,zero,1094c <OSFlagAccept+0x1ec>
   10850:	00007706 	br	10a30 <OSFlagAccept+0x2d0>
   10854:	10c000a0 	cmpeqi	r3,r2,2
   10858:	1800031e 	bne	r3,zero,10868 <OSFlagAccept+0x108>
   1085c:	108000e0 	cmpeqi	r2,r2,3
   10860:	10001e1e 	bne	r2,zero,108dc <OSFlagAccept+0x17c>
   10864:	00007206 	br	10a30 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   10868:	e0bffc17 	ldw	r2,-16(fp)
   1086c:	10c0020b 	ldhu	r3,8(r2)
   10870:	e0bffd0b 	ldhu	r2,-12(fp)
   10874:	1884703a 	and	r2,r3,r2
   10878:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1087c:	e0fff30b 	ldhu	r3,-52(fp)
   10880:	e0bffd0b 	ldhu	r2,-12(fp)
   10884:	18800d1e 	bne	r3,r2,108bc <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10888:	e0bff383 	ldbu	r2,-50(fp)
   1088c:	10800058 	cmpnei	r2,r2,1
   10890:	10000d1e 	bne	r2,zero,108c8 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   10894:	e0bffc17 	ldw	r2,-16(fp)
   10898:	1080020b 	ldhu	r2,8(r2)
   1089c:	1007883a 	mov	r3,r2
   108a0:	e0bff30b 	ldhu	r2,-52(fp)
   108a4:	0084303a 	nor	r2,zero,r2
   108a8:	1884703a 	and	r2,r3,r2
   108ac:	1007883a 	mov	r3,r2
   108b0:	e0bffc17 	ldw	r2,-16(fp)
   108b4:	10c0020d 	sth	r3,8(r2)
   108b8:	00000306 	br	108c8 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   108bc:	e0bfff17 	ldw	r2,-4(fp)
   108c0:	00c01c04 	movi	r3,112
   108c4:	10c00005 	stb	r3,0(r2)
   108c8:	e0bff417 	ldw	r2,-48(fp)
   108cc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   108d0:	e0bff617 	ldw	r2,-40(fp)
   108d4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   108d8:	00005e06 	br	10a54 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   108dc:	e0bffc17 	ldw	r2,-16(fp)
   108e0:	10c0020b 	ldhu	r3,8(r2)
   108e4:	e0bffd0b 	ldhu	r2,-12(fp)
   108e8:	1884703a 	and	r2,r3,r2
   108ec:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   108f0:	e0bff30b 	ldhu	r2,-52(fp)
   108f4:	10000d26 	beq	r2,zero,1092c <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   108f8:	e0bff383 	ldbu	r2,-50(fp)
   108fc:	10800058 	cmpnei	r2,r2,1
   10900:	10000d1e 	bne	r2,zero,10938 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   10904:	e0bffc17 	ldw	r2,-16(fp)
   10908:	1080020b 	ldhu	r2,8(r2)
   1090c:	1007883a 	mov	r3,r2
   10910:	e0bff30b 	ldhu	r2,-52(fp)
   10914:	0084303a 	nor	r2,zero,r2
   10918:	1884703a 	and	r2,r3,r2
   1091c:	1007883a 	mov	r3,r2
   10920:	e0bffc17 	ldw	r2,-16(fp)
   10924:	10c0020d 	sth	r3,8(r2)
   10928:	00000306 	br	10938 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1092c:	e0bfff17 	ldw	r2,-4(fp)
   10930:	00c01c04 	movi	r3,112
   10934:	10c00005 	stb	r3,0(r2)
   10938:	e0bff417 	ldw	r2,-48(fp)
   1093c:	e0bff715 	stw	r2,-36(fp)
   10940:	e0bff717 	ldw	r2,-36(fp)
   10944:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   10948:	00004206 	br	10a54 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   1094c:	e0bffc17 	ldw	r2,-16(fp)
   10950:	1080020b 	ldhu	r2,8(r2)
   10954:	0084303a 	nor	r2,zero,r2
   10958:	1007883a 	mov	r3,r2
   1095c:	e0bffd0b 	ldhu	r2,-12(fp)
   10960:	1884703a 	and	r2,r3,r2
   10964:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   10968:	e0fff30b 	ldhu	r3,-52(fp)
   1096c:	e0bffd0b 	ldhu	r2,-12(fp)
   10970:	18800b1e 	bne	r3,r2,109a0 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10974:	e0bff383 	ldbu	r2,-50(fp)
   10978:	10800058 	cmpnei	r2,r2,1
   1097c:	10000b1e 	bne	r2,zero,109ac <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   10980:	e0bffc17 	ldw	r2,-16(fp)
   10984:	10c0020b 	ldhu	r3,8(r2)
   10988:	e0bff30b 	ldhu	r2,-52(fp)
   1098c:	1884b03a 	or	r2,r3,r2
   10990:	1007883a 	mov	r3,r2
   10994:	e0bffc17 	ldw	r2,-16(fp)
   10998:	10c0020d 	sth	r3,8(r2)
   1099c:	00000306 	br	109ac <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   109a0:	e0bfff17 	ldw	r2,-4(fp)
   109a4:	00c01c04 	movi	r3,112
   109a8:	10c00005 	stb	r3,0(r2)
   109ac:	e0bff417 	ldw	r2,-48(fp)
   109b0:	e0bff815 	stw	r2,-32(fp)
   109b4:	e0bff817 	ldw	r2,-32(fp)
   109b8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   109bc:	00002506 	br	10a54 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   109c0:	e0bffc17 	ldw	r2,-16(fp)
   109c4:	1080020b 	ldhu	r2,8(r2)
   109c8:	0084303a 	nor	r2,zero,r2
   109cc:	1007883a 	mov	r3,r2
   109d0:	e0bffd0b 	ldhu	r2,-12(fp)
   109d4:	1884703a 	and	r2,r3,r2
   109d8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   109dc:	e0bff30b 	ldhu	r2,-52(fp)
   109e0:	10000b26 	beq	r2,zero,10a10 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   109e4:	e0bff383 	ldbu	r2,-50(fp)
   109e8:	10800058 	cmpnei	r2,r2,1
   109ec:	10000b1e 	bne	r2,zero,10a1c <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   109f0:	e0bffc17 	ldw	r2,-16(fp)
   109f4:	10c0020b 	ldhu	r3,8(r2)
   109f8:	e0bff30b 	ldhu	r2,-52(fp)
   109fc:	1884b03a 	or	r2,r3,r2
   10a00:	1007883a 	mov	r3,r2
   10a04:	e0bffc17 	ldw	r2,-16(fp)
   10a08:	10c0020d 	sth	r3,8(r2)
   10a0c:	00000306 	br	10a1c <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   10a10:	e0bfff17 	ldw	r2,-4(fp)
   10a14:	00c01c04 	movi	r3,112
   10a18:	10c00005 	stb	r3,0(r2)
   10a1c:	e0bff417 	ldw	r2,-48(fp)
   10a20:	e0bff915 	stw	r2,-28(fp)
   10a24:	e0bff917 	ldw	r2,-28(fp)
   10a28:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   10a2c:	00000906 	br	10a54 <OSFlagAccept+0x2f4>
   10a30:	e0bff417 	ldw	r2,-48(fp)
   10a34:	e0bffa15 	stw	r2,-24(fp)
   10a38:	e0bffa17 	ldw	r2,-24(fp)
   10a3c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   10a40:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   10a44:	e0bfff17 	ldw	r2,-4(fp)
   10a48:	00c01bc4 	movi	r3,111
   10a4c:	10c00005 	stb	r3,0(r2)
             break;
   10a50:	0001883a 	nop
    }
    return (flags_rdy);
   10a54:	e0bff30b 	ldhu	r2,-52(fp)
}
   10a58:	e037883a 	mov	sp,fp
   10a5c:	df000017 	ldw	fp,0(sp)
   10a60:	dec00104 	addi	sp,sp,4
   10a64:	f800283a 	ret

00010a68 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   10a68:	defff804 	addi	sp,sp,-32
   10a6c:	df000715 	stw	fp,28(sp)
   10a70:	df000704 	addi	fp,sp,28
   10a74:	2005883a 	mov	r2,r4
   10a78:	e17fff15 	stw	r5,-4(fp)
   10a7c:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   10a80:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   10a84:	e0bfff17 	ldw	r2,-4(fp)
   10a88:	1000021e 	bne	r2,zero,10a94 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   10a8c:	0005883a 	mov	r2,zero
   10a90:	00003306 	br	10b60 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   10a94:	d0a81503 	ldbu	r2,-24492(gp)
   10a98:	10803fcc 	andi	r2,r2,255
   10a9c:	10000526 	beq	r2,zero,10ab4 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   10aa0:	e0bfff17 	ldw	r2,-4(fp)
   10aa4:	00c00404 	movi	r3,16
   10aa8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   10aac:	0005883a 	mov	r2,zero
   10ab0:	00002b06 	br	10b60 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10ab4:	0005303a 	rdctl	r2,status
   10ab8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10abc:	e0fffd17 	ldw	r3,-12(fp)
   10ac0:	00bfff84 	movi	r2,-2
   10ac4:	1884703a 	and	r2,r3,r2
   10ac8:	1001703a 	wrctl	status,r2
  
  return context;
   10acc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   10ad0:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   10ad4:	d0a81817 	ldw	r2,-24480(gp)
   10ad8:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   10adc:	e0bffb17 	ldw	r2,-20(fp)
   10ae0:	10001726 	beq	r2,zero,10b40 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   10ae4:	d0a81817 	ldw	r2,-24480(gp)
   10ae8:	10800117 	ldw	r2,4(r2)
   10aec:	d0a81815 	stw	r2,-24480(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   10af0:	e0bffb17 	ldw	r2,-20(fp)
   10af4:	00c00144 	movi	r3,5
   10af8:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   10afc:	e0bffb17 	ldw	r2,-20(fp)
   10b00:	e0fffe0b 	ldhu	r3,-8(fp)
   10b04:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   10b08:	e0bffb17 	ldw	r2,-20(fp)
   10b0c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   10b10:	e0bffb17 	ldw	r2,-20(fp)
   10b14:	00c00fc4 	movi	r3,63
   10b18:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   10b1c:	e0bffb17 	ldw	r2,-20(fp)
   10b20:	100002c5 	stb	zero,11(r2)
   10b24:	e0bff917 	ldw	r2,-28(fp)
   10b28:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10b2c:	e0bffa17 	ldw	r2,-24(fp)
   10b30:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   10b34:	e0bfff17 	ldw	r2,-4(fp)
   10b38:	10000005 	stb	zero,0(r2)
   10b3c:	00000706 	br	10b5c <OSFlagCreate+0xf4>
   10b40:	e0bff917 	ldw	r2,-28(fp)
   10b44:	e0bffc15 	stw	r2,-16(fp)
   10b48:	e0bffc17 	ldw	r2,-16(fp)
   10b4c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   10b50:	e0bfff17 	ldw	r2,-4(fp)
   10b54:	00c01c84 	movi	r3,114
   10b58:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   10b5c:	e0bffb17 	ldw	r2,-20(fp)
}
   10b60:	e037883a 	mov	sp,fp
   10b64:	df000017 	ldw	fp,0(sp)
   10b68:	dec00104 	addi	sp,sp,4
   10b6c:	f800283a 	ret

00010b70 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   10b70:	defff204 	addi	sp,sp,-56
   10b74:	dfc00d15 	stw	ra,52(sp)
   10b78:	df000c15 	stw	fp,48(sp)
   10b7c:	df000c04 	addi	fp,sp,48
   10b80:	e13ffd15 	stw	r4,-12(fp)
   10b84:	2805883a 	mov	r2,r5
   10b88:	e1bfff15 	stw	r6,-4(fp)
   10b8c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   10b90:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   10b94:	e0bfff17 	ldw	r2,-4(fp)
   10b98:	1000021e 	bne	r2,zero,10ba4 <OSFlagDel+0x34>
        return (pgrp);
   10b9c:	e0bffd17 	ldw	r2,-12(fp)
   10ba0:	00008006 	br	10da4 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   10ba4:	e0bffd17 	ldw	r2,-12(fp)
   10ba8:	1000051e 	bne	r2,zero,10bc0 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10bac:	e0bfff17 	ldw	r2,-4(fp)
   10bb0:	00c01b84 	movi	r3,110
   10bb4:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   10bb8:	e0bffd17 	ldw	r2,-12(fp)
   10bbc:	00007906 	br	10da4 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   10bc0:	d0a81503 	ldbu	r2,-24492(gp)
   10bc4:	10803fcc 	andi	r2,r2,255
   10bc8:	10000526 	beq	r2,zero,10be0 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   10bcc:	e0bfff17 	ldw	r2,-4(fp)
   10bd0:	00c003c4 	movi	r3,15
   10bd4:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   10bd8:	e0bffd17 	ldw	r2,-12(fp)
   10bdc:	00007106 	br	10da4 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   10be0:	e0bffd17 	ldw	r2,-12(fp)
   10be4:	10800003 	ldbu	r2,0(r2)
   10be8:	10803fcc 	andi	r2,r2,255
   10bec:	10800160 	cmpeqi	r2,r2,5
   10bf0:	1000051e 	bne	r2,zero,10c08 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
   10bf4:	e0bfff17 	ldw	r2,-4(fp)
   10bf8:	00c00044 	movi	r3,1
   10bfc:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   10c00:	e0bffd17 	ldw	r2,-12(fp)
   10c04:	00006706 	br	10da4 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10c08:	0005303a 	rdctl	r2,status
   10c0c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c10:	e0fffc17 	ldw	r3,-16(fp)
   10c14:	00bfff84 	movi	r2,-2
   10c18:	1884703a 	and	r2,r3,r2
   10c1c:	1001703a 	wrctl	status,r2
  
  return context;
   10c20:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   10c24:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   10c28:	e0bffd17 	ldw	r2,-12(fp)
   10c2c:	10800117 	ldw	r2,4(r2)
   10c30:	10000326 	beq	r2,zero,10c40 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   10c34:	00800044 	movi	r2,1
   10c38:	e0bff405 	stb	r2,-48(fp)
   10c3c:	00000106 	br	10c44 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   10c40:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   10c44:	e0bffe03 	ldbu	r2,-8(fp)
   10c48:	10000326 	beq	r2,zero,10c58 <OSFlagDel+0xe8>
   10c4c:	10800060 	cmpeqi	r2,r2,1
   10c50:	1000231e 	bne	r2,zero,10ce0 <OSFlagDel+0x170>
   10c54:	00004806 	br	10d78 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   10c58:	e0bff403 	ldbu	r2,-48(fp)
   10c5c:	1000161e 	bne	r2,zero,10cb8 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   10c60:	e0bffd17 	ldw	r2,-12(fp)
   10c64:	00c00fc4 	movi	r3,63
   10c68:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   10c6c:	e0bffd17 	ldw	r2,-12(fp)
   10c70:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   10c74:	e0bffd17 	ldw	r2,-12(fp)
   10c78:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   10c7c:	d0e81817 	ldw	r3,-24480(gp)
   10c80:	e0bffd17 	ldw	r2,-12(fp)
   10c84:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   10c88:	e0bffd17 	ldw	r2,-12(fp)
   10c8c:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   10c90:	e0bffd17 	ldw	r2,-12(fp)
   10c94:	d0a81815 	stw	r2,-24480(gp)
   10c98:	e0bff717 	ldw	r2,-36(fp)
   10c9c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10ca0:	e0bff817 	ldw	r2,-32(fp)
   10ca4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   10ca8:	e0bfff17 	ldw	r2,-4(fp)
   10cac:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   10cb0:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   10cb4:	00003a06 	br	10da0 <OSFlagDel+0x230>
   10cb8:	e0bff717 	ldw	r2,-36(fp)
   10cbc:	e0bff915 	stw	r2,-28(fp)
   10cc0:	e0bff917 	ldw	r2,-28(fp)
   10cc4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   10cc8:	e0bfff17 	ldw	r2,-4(fp)
   10ccc:	00c01244 	movi	r3,73
   10cd0:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   10cd4:	e0bffd17 	ldw	r2,-12(fp)
   10cd8:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   10cdc:	00003006 	br	10da0 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   10ce0:	e0bffd17 	ldw	r2,-12(fp)
   10ce4:	10800117 	ldw	r2,4(r2)
   10ce8:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   10cec:	00000606 	br	10d08 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   10cf0:	000b883a 	mov	r5,zero
   10cf4:	e13ff517 	ldw	r4,-44(fp)
   10cf8:	0011cdc0 	call	11cdc <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   10cfc:	e0bff517 	ldw	r2,-44(fp)
   10d00:	10800017 	ldw	r2,0(r2)
   10d04:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   10d08:	e0bff517 	ldw	r2,-44(fp)
   10d0c:	103ff81e 	bne	r2,zero,10cf0 <OSFlagDel+0x180>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   10d10:	e0bffd17 	ldw	r2,-12(fp)
   10d14:	00c00fc4 	movi	r3,63
   10d18:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   10d1c:	e0bffd17 	ldw	r2,-12(fp)
   10d20:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   10d24:	e0bffd17 	ldw	r2,-12(fp)
   10d28:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   10d2c:	d0e81817 	ldw	r3,-24480(gp)
   10d30:	e0bffd17 	ldw	r2,-12(fp)
   10d34:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   10d38:	e0bffd17 	ldw	r2,-12(fp)
   10d3c:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   10d40:	e0bffd17 	ldw	r2,-12(fp)
   10d44:	d0a81815 	stw	r2,-24480(gp)
   10d48:	e0bff717 	ldw	r2,-36(fp)
   10d4c:	e0bffa15 	stw	r2,-24(fp)
   10d50:	e0bffa17 	ldw	r2,-24(fp)
   10d54:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   10d58:	e0bff403 	ldbu	r2,-48(fp)
   10d5c:	10800058 	cmpnei	r2,r2,1
   10d60:	1000011e 	bne	r2,zero,10d68 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   10d64:	000feec0 	call	feec <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   10d68:	e0bfff17 	ldw	r2,-4(fp)
   10d6c:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   10d70:	e03ff615 	stw	zero,-40(fp)
             break;
   10d74:	00000a06 	br	10da0 <OSFlagDel+0x230>
   10d78:	e0bff717 	ldw	r2,-36(fp)
   10d7c:	e0bffb15 	stw	r2,-20(fp)
   10d80:	e0bffb17 	ldw	r2,-20(fp)
   10d84:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   10d88:	e0bfff17 	ldw	r2,-4(fp)
   10d8c:	00c001c4 	movi	r3,7
   10d90:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   10d94:	e0bffd17 	ldw	r2,-12(fp)
   10d98:	e0bff615 	stw	r2,-40(fp)
             break;
   10d9c:	0001883a 	nop
    }
    return (pgrp_return);
   10da0:	e0bff617 	ldw	r2,-40(fp)
}
   10da4:	e037883a 	mov	sp,fp
   10da8:	dfc00117 	ldw	ra,4(sp)
   10dac:	df000017 	ldw	fp,0(sp)
   10db0:	dec00204 	addi	sp,sp,8
   10db4:	f800283a 	ret

00010db8 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   10db8:	defff604 	addi	sp,sp,-40
   10dbc:	dfc00915 	stw	ra,36(sp)
   10dc0:	df000815 	stw	fp,32(sp)
   10dc4:	df000804 	addi	fp,sp,32
   10dc8:	e13ffd15 	stw	r4,-12(fp)
   10dcc:	e17ffe15 	stw	r5,-8(fp)
   10dd0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10dd4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   10dd8:	e0bfff17 	ldw	r2,-4(fp)
   10ddc:	1000021e 	bne	r2,zero,10de8 <OSFlagNameGet+0x30>
        return (0);
   10de0:	0005883a 	mov	r2,zero
   10de4:	00003906 	br	10ecc <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   10de8:	e0bffd17 	ldw	r2,-12(fp)
   10dec:	1000051e 	bne	r2,zero,10e04 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10df0:	e0bfff17 	ldw	r2,-4(fp)
   10df4:	00c01b84 	movi	r3,110
   10df8:	10c00005 	stb	r3,0(r2)
        return (0);
   10dfc:	0005883a 	mov	r2,zero
   10e00:	00003206 	br	10ecc <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   10e04:	e0bffe17 	ldw	r2,-8(fp)
   10e08:	1000051e 	bne	r2,zero,10e20 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   10e0c:	e0bfff17 	ldw	r2,-4(fp)
   10e10:	00c00304 	movi	r3,12
   10e14:	10c00005 	stb	r3,0(r2)
        return (0);
   10e18:	0005883a 	mov	r2,zero
   10e1c:	00002b06 	br	10ecc <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   10e20:	d0a81503 	ldbu	r2,-24492(gp)
   10e24:	10803fcc 	andi	r2,r2,255
   10e28:	10000526 	beq	r2,zero,10e40 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   10e2c:	e0bfff17 	ldw	r2,-4(fp)
   10e30:	00c00444 	movi	r3,17
   10e34:	10c00005 	stb	r3,0(r2)
        return (0);
   10e38:	0005883a 	mov	r2,zero
   10e3c:	00002306 	br	10ecc <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10e40:	0005303a 	rdctl	r2,status
   10e44:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10e48:	e0fffc17 	ldw	r3,-16(fp)
   10e4c:	00bfff84 	movi	r2,-2
   10e50:	1884703a 	and	r2,r3,r2
   10e54:	1001703a 	wrctl	status,r2
  
  return context;
   10e58:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   10e5c:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   10e60:	e0bffd17 	ldw	r2,-12(fp)
   10e64:	10800003 	ldbu	r2,0(r2)
   10e68:	10803fcc 	andi	r2,r2,255
   10e6c:	10800160 	cmpeqi	r2,r2,5
   10e70:	1000091e 	bne	r2,zero,10e98 <OSFlagNameGet+0xe0>
   10e74:	e0bff817 	ldw	r2,-32(fp)
   10e78:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10e7c:	e0bff917 	ldw	r2,-28(fp)
   10e80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   10e84:	e0bfff17 	ldw	r2,-4(fp)
   10e88:	00c00044 	movi	r3,1
   10e8c:	10c00005 	stb	r3,0(r2)
        return (0);
   10e90:	0005883a 	mov	r2,zero
   10e94:	00000d06 	br	10ecc <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   10e98:	e0bffd17 	ldw	r2,-12(fp)
   10e9c:	10800284 	addi	r2,r2,10
   10ea0:	100b883a 	mov	r5,r2
   10ea4:	e13ffe17 	ldw	r4,-8(fp)
   10ea8:	00100300 	call	10030 <OS_StrCopy>
   10eac:	e0bffb05 	stb	r2,-20(fp)
   10eb0:	e0bff817 	ldw	r2,-32(fp)
   10eb4:	e0bffa15 	stw	r2,-24(fp)
   10eb8:	e0bffa17 	ldw	r2,-24(fp)
   10ebc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   10ec0:	e0bfff17 	ldw	r2,-4(fp)
   10ec4:	10000005 	stb	zero,0(r2)
    return (len);
   10ec8:	e0bffb03 	ldbu	r2,-20(fp)
}
   10ecc:	e037883a 	mov	sp,fp
   10ed0:	dfc00117 	ldw	ra,4(sp)
   10ed4:	df000017 	ldw	fp,0(sp)
   10ed8:	dec00204 	addi	sp,sp,8
   10edc:	f800283a 	ret

00010ee0 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   10ee0:	defff504 	addi	sp,sp,-44
   10ee4:	dfc00a15 	stw	ra,40(sp)
   10ee8:	df000915 	stw	fp,36(sp)
   10eec:	df000904 	addi	fp,sp,36
   10ef0:	e13ffd15 	stw	r4,-12(fp)
   10ef4:	e17ffe15 	stw	r5,-8(fp)
   10ef8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10efc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   10f00:	e0bfff17 	ldw	r2,-4(fp)
   10f04:	10004326 	beq	r2,zero,11014 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   10f08:	e0bffd17 	ldw	r2,-12(fp)
   10f0c:	1000041e 	bne	r2,zero,10f20 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10f10:	e0bfff17 	ldw	r2,-4(fp)
   10f14:	00c01b84 	movi	r3,110
   10f18:	10c00005 	stb	r3,0(r2)
        return;
   10f1c:	00003e06 	br	11018 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   10f20:	e0bffe17 	ldw	r2,-8(fp)
   10f24:	1000041e 	bne	r2,zero,10f38 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   10f28:	e0bfff17 	ldw	r2,-4(fp)
   10f2c:	00c00304 	movi	r3,12
   10f30:	10c00005 	stb	r3,0(r2)
        return;
   10f34:	00003806 	br	11018 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   10f38:	d0a81503 	ldbu	r2,-24492(gp)
   10f3c:	10803fcc 	andi	r2,r2,255
   10f40:	10000426 	beq	r2,zero,10f54 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   10f44:	e0bfff17 	ldw	r2,-4(fp)
   10f48:	00c00484 	movi	r3,18
   10f4c:	10c00005 	stb	r3,0(r2)
        return;
   10f50:	00003106 	br	11018 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10f54:	0005303a 	rdctl	r2,status
   10f58:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10f5c:	e0fffc17 	ldw	r3,-16(fp)
   10f60:	00bfff84 	movi	r2,-2
   10f64:	1884703a 	and	r2,r3,r2
   10f68:	1001703a 	wrctl	status,r2
  
  return context;
   10f6c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   10f70:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   10f74:	e0bffd17 	ldw	r2,-12(fp)
   10f78:	10800003 	ldbu	r2,0(r2)
   10f7c:	10803fcc 	andi	r2,r2,255
   10f80:	10800160 	cmpeqi	r2,r2,5
   10f84:	1000081e 	bne	r2,zero,10fa8 <OSFlagNameSet+0xc8>
   10f88:	e0bff717 	ldw	r2,-36(fp)
   10f8c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10f90:	e0bff817 	ldw	r2,-32(fp)
   10f94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   10f98:	e0bfff17 	ldw	r2,-4(fp)
   10f9c:	00c00044 	movi	r3,1
   10fa0:	10c00005 	stb	r3,0(r2)
        return;
   10fa4:	00001c06 	br	11018 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   10fa8:	e13ffe17 	ldw	r4,-8(fp)
   10fac:	00100a40 	call	100a4 <OS_StrLen>
   10fb0:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   10fb4:	e0bffa03 	ldbu	r2,-24(fp)
   10fb8:	10800830 	cmpltui	r2,r2,32
   10fbc:	1000081e 	bne	r2,zero,10fe0 <OSFlagNameSet+0x100>
   10fc0:	e0bff717 	ldw	r2,-36(fp)
   10fc4:	e0bff915 	stw	r2,-28(fp)
   10fc8:	e0bff917 	ldw	r2,-28(fp)
   10fcc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   10fd0:	e0bfff17 	ldw	r2,-4(fp)
   10fd4:	00c01cc4 	movi	r3,115
   10fd8:	10c00005 	stb	r3,0(r2)
        return;
   10fdc:	00000e06 	br	11018 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   10fe0:	e0bffd17 	ldw	r2,-12(fp)
   10fe4:	10800284 	addi	r2,r2,10
   10fe8:	e17ffe17 	ldw	r5,-8(fp)
   10fec:	1009883a 	mov	r4,r2
   10ff0:	00100300 	call	10030 <OS_StrCopy>
   10ff4:	e0bff717 	ldw	r2,-36(fp)
   10ff8:	e0bffb15 	stw	r2,-20(fp)
   10ffc:	e0bffb17 	ldw	r2,-20(fp)
   11000:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11004:	e0bfff17 	ldw	r2,-4(fp)
   11008:	10000005 	stb	zero,0(r2)
    return;
   1100c:	0001883a 	nop
   11010:	00000106 	br	11018 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   11014:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
   11018:	e037883a 	mov	sp,fp
   1101c:	dfc00117 	ldw	ra,4(sp)
   11020:	df000017 	ldw	fp,0(sp)
   11024:	dec00204 	addi	sp,sp,8
   11028:	f800283a 	ret

0001102c <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   1102c:	deffe104 	addi	sp,sp,-124
   11030:	dfc01e15 	stw	ra,120(sp)
   11034:	df001d15 	stw	fp,116(sp)
   11038:	df001d04 	addi	fp,sp,116
   1103c:	e13ffc15 	stw	r4,-16(fp)
   11040:	2809883a 	mov	r4,r5
   11044:	3007883a 	mov	r3,r6
   11048:	3805883a 	mov	r2,r7
   1104c:	e13ffd0d 	sth	r4,-12(fp)
   11050:	e0fffe05 	stb	r3,-8(fp)
   11054:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   11058:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1105c:	e0800217 	ldw	r2,8(fp)
   11060:	1000021e 	bne	r2,zero,1106c <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   11064:	0005883a 	mov	r2,zero
   11068:	00015906 	br	115d0 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   1106c:	e0bffc17 	ldw	r2,-16(fp)
   11070:	1000051e 	bne	r2,zero,11088 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   11074:	e0800217 	ldw	r2,8(fp)
   11078:	00c01b84 	movi	r3,110
   1107c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11080:	0005883a 	mov	r2,zero
   11084:	00015206 	br	115d0 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   11088:	d0a81503 	ldbu	r2,-24492(gp)
   1108c:	10803fcc 	andi	r2,r2,255
   11090:	10000526 	beq	r2,zero,110a8 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   11094:	e0800217 	ldw	r2,8(fp)
   11098:	00c00084 	movi	r3,2
   1109c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   110a0:	0005883a 	mov	r2,zero
   110a4:	00014a06 	br	115d0 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   110a8:	d0a80703 	ldbu	r2,-24548(gp)
   110ac:	10803fcc 	andi	r2,r2,255
   110b0:	10000526 	beq	r2,zero,110c8 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   110b4:	e0800217 	ldw	r2,8(fp)
   110b8:	00c00344 	movi	r3,13
   110bc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   110c0:	0005883a 	mov	r2,zero
   110c4:	00014206 	br	115d0 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   110c8:	e0bffc17 	ldw	r2,-16(fp)
   110cc:	10800003 	ldbu	r2,0(r2)
   110d0:	10803fcc 	andi	r2,r2,255
   110d4:	10800160 	cmpeqi	r2,r2,5
   110d8:	1000051e 	bne	r2,zero,110f0 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
   110dc:	e0800217 	ldw	r2,8(fp)
   110e0:	00c00044 	movi	r3,1
   110e4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   110e8:	0005883a 	mov	r2,zero
   110ec:	00013806 	br	115d0 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   110f0:	e0fffe03 	ldbu	r3,-8(fp)
   110f4:	00bfe004 	movi	r2,-128
   110f8:	1884703a 	and	r2,r3,r2
   110fc:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   11100:	e0bfe603 	ldbu	r2,-104(fp)
   11104:	10000626 	beq	r2,zero,11120 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   11108:	e0bffe03 	ldbu	r2,-8(fp)
   1110c:	10801fcc 	andi	r2,r2,127
   11110:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   11114:	00800044 	movi	r2,1
   11118:	e0bfe405 	stb	r2,-112(fp)
   1111c:	00000106 	br	11124 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
   11120:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11124:	0005303a 	rdctl	r2,status
   11128:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1112c:	e0fff617 	ldw	r3,-40(fp)
   11130:	00bfff84 	movi	r2,-2
   11134:	1884703a 	and	r2,r3,r2
   11138:	1001703a 	wrctl	status,r2
  
  return context;
   1113c:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   11140:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
   11144:	e0bffe03 	ldbu	r2,-8(fp)
   11148:	10c00060 	cmpeqi	r3,r2,1
   1114c:	1800921e 	bne	r3,zero,11398 <OSFlagPend+0x36c>
   11150:	10c00088 	cmpgei	r3,r2,2
   11154:	1800021e 	bne	r3,zero,11160 <OSFlagPend+0x134>
   11158:	10006126 	beq	r2,zero,112e0 <OSFlagPend+0x2b4>
   1115c:	0000bb06 	br	1144c <OSFlagPend+0x420>
   11160:	10c000a0 	cmpeqi	r3,r2,2
   11164:	1800031e 	bne	r3,zero,11174 <OSFlagPend+0x148>
   11168:	108000e0 	cmpeqi	r2,r2,3
   1116c:	10002f1e 	bne	r2,zero,1122c <OSFlagPend+0x200>
   11170:	0000b606 	br	1144c <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   11174:	e0bffc17 	ldw	r2,-16(fp)
   11178:	10c0020b 	ldhu	r3,8(r2)
   1117c:	e0bffd0b 	ldhu	r2,-12(fp)
   11180:	1884703a 	and	r2,r3,r2
   11184:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   11188:	e0ffe80b 	ldhu	r3,-96(fp)
   1118c:	e0bffd0b 	ldhu	r2,-12(fp)
   11190:	1880171e 	bne	r3,r2,111f0 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   11194:	e0bfe403 	ldbu	r2,-112(fp)
   11198:	10800058 	cmpnei	r2,r2,1
   1119c:	1000091e 	bne	r2,zero,111c4 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   111a0:	e0bffc17 	ldw	r2,-16(fp)
   111a4:	1080020b 	ldhu	r2,8(r2)
   111a8:	1007883a 	mov	r3,r2
   111ac:	e0bfe80b 	ldhu	r2,-96(fp)
   111b0:	0084303a 	nor	r2,zero,r2
   111b4:	1884703a 	and	r2,r3,r2
   111b8:	1007883a 	mov	r3,r2
   111bc:	e0bffc17 	ldw	r2,-16(fp)
   111c0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   111c4:	d0a81617 	ldw	r2,-24488(gp)
   111c8:	e0ffe80b 	ldhu	r3,-96(fp)
   111cc:	10c00b0d 	sth	r3,44(r2)
   111d0:	e0bfe517 	ldw	r2,-108(fp)
   111d4:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   111d8:	e0bfe717 	ldw	r2,-100(fp)
   111dc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   111e0:	e0800217 	ldw	r2,8(fp)
   111e4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   111e8:	e0bfe80b 	ldhu	r2,-96(fp)
   111ec:	0000f806 	br	115d0 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   111f0:	e13ffd0b 	ldhu	r4,-12(fp)
   111f4:	e17ffe03 	ldbu	r5,-8(fp)
   111f8:	e0bfff0b 	ldhu	r2,-4(fp)
   111fc:	e0fff704 	addi	r3,fp,-36
   11200:	d8800015 	stw	r2,0(sp)
   11204:	280f883a 	mov	r7,r5
   11208:	200d883a 	mov	r6,r4
   1120c:	180b883a 	mov	r5,r3
   11210:	e13ffc17 	ldw	r4,-16(fp)
   11214:	0011a9c0 	call	11a9c <OS_FlagBlock>
   11218:	e0bfe517 	ldw	r2,-108(fp)
   1121c:	e0bfe915 	stw	r2,-92(fp)
   11220:	e0bfe917 	ldw	r2,-92(fp)
   11224:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   11228:	00009206 	br	11474 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   1122c:	e0bffc17 	ldw	r2,-16(fp)
   11230:	10c0020b 	ldhu	r3,8(r2)
   11234:	e0bffd0b 	ldhu	r2,-12(fp)
   11238:	1884703a 	and	r2,r3,r2
   1123c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   11240:	e0bfe80b 	ldhu	r2,-96(fp)
   11244:	10001726 	beq	r2,zero,112a4 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   11248:	e0bfe403 	ldbu	r2,-112(fp)
   1124c:	10800058 	cmpnei	r2,r2,1
   11250:	1000091e 	bne	r2,zero,11278 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   11254:	e0bffc17 	ldw	r2,-16(fp)
   11258:	1080020b 	ldhu	r2,8(r2)
   1125c:	1007883a 	mov	r3,r2
   11260:	e0bfe80b 	ldhu	r2,-96(fp)
   11264:	0084303a 	nor	r2,zero,r2
   11268:	1884703a 	and	r2,r3,r2
   1126c:	1007883a 	mov	r3,r2
   11270:	e0bffc17 	ldw	r2,-16(fp)
   11274:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   11278:	d0a81617 	ldw	r2,-24488(gp)
   1127c:	e0ffe80b 	ldhu	r3,-96(fp)
   11280:	10c00b0d 	sth	r3,44(r2)
   11284:	e0bfe517 	ldw	r2,-108(fp)
   11288:	e0bfea15 	stw	r2,-88(fp)
   1128c:	e0bfea17 	ldw	r2,-88(fp)
   11290:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   11294:	e0800217 	ldw	r2,8(fp)
   11298:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   1129c:	e0bfe80b 	ldhu	r2,-96(fp)
   112a0:	0000cb06 	br	115d0 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   112a4:	e13ffd0b 	ldhu	r4,-12(fp)
   112a8:	e17ffe03 	ldbu	r5,-8(fp)
   112ac:	e0bfff0b 	ldhu	r2,-4(fp)
   112b0:	e0fff704 	addi	r3,fp,-36
   112b4:	d8800015 	stw	r2,0(sp)
   112b8:	280f883a 	mov	r7,r5
   112bc:	200d883a 	mov	r6,r4
   112c0:	180b883a 	mov	r5,r3
   112c4:	e13ffc17 	ldw	r4,-16(fp)
   112c8:	0011a9c0 	call	11a9c <OS_FlagBlock>
   112cc:	e0bfe517 	ldw	r2,-108(fp)
   112d0:	e0bfeb15 	stw	r2,-84(fp)
   112d4:	e0bfeb17 	ldw	r2,-84(fp)
   112d8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   112dc:	00006506 	br	11474 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   112e0:	e0bffc17 	ldw	r2,-16(fp)
   112e4:	1080020b 	ldhu	r2,8(r2)
   112e8:	0084303a 	nor	r2,zero,r2
   112ec:	1007883a 	mov	r3,r2
   112f0:	e0bffd0b 	ldhu	r2,-12(fp)
   112f4:	1884703a 	and	r2,r3,r2
   112f8:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   112fc:	e0ffe80b 	ldhu	r3,-96(fp)
   11300:	e0bffd0b 	ldhu	r2,-12(fp)
   11304:	1880151e 	bne	r3,r2,1135c <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   11308:	e0bfe403 	ldbu	r2,-112(fp)
   1130c:	10800058 	cmpnei	r2,r2,1
   11310:	1000071e 	bne	r2,zero,11330 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   11314:	e0bffc17 	ldw	r2,-16(fp)
   11318:	10c0020b 	ldhu	r3,8(r2)
   1131c:	e0bfe80b 	ldhu	r2,-96(fp)
   11320:	1884b03a 	or	r2,r3,r2
   11324:	1007883a 	mov	r3,r2
   11328:	e0bffc17 	ldw	r2,-16(fp)
   1132c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   11330:	d0a81617 	ldw	r2,-24488(gp)
   11334:	e0ffe80b 	ldhu	r3,-96(fp)
   11338:	10c00b0d 	sth	r3,44(r2)
   1133c:	e0bfe517 	ldw	r2,-108(fp)
   11340:	e0bfec15 	stw	r2,-80(fp)
   11344:	e0bfec17 	ldw	r2,-80(fp)
   11348:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1134c:	e0800217 	ldw	r2,8(fp)
   11350:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   11354:	e0bfe80b 	ldhu	r2,-96(fp)
   11358:	00009d06 	br	115d0 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1135c:	e13ffd0b 	ldhu	r4,-12(fp)
   11360:	e17ffe03 	ldbu	r5,-8(fp)
   11364:	e0bfff0b 	ldhu	r2,-4(fp)
   11368:	e0fff704 	addi	r3,fp,-36
   1136c:	d8800015 	stw	r2,0(sp)
   11370:	280f883a 	mov	r7,r5
   11374:	200d883a 	mov	r6,r4
   11378:	180b883a 	mov	r5,r3
   1137c:	e13ffc17 	ldw	r4,-16(fp)
   11380:	0011a9c0 	call	11a9c <OS_FlagBlock>
   11384:	e0bfe517 	ldw	r2,-108(fp)
   11388:	e0bfed15 	stw	r2,-76(fp)
   1138c:	e0bfed17 	ldw	r2,-76(fp)
   11390:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   11394:	00003706 	br	11474 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   11398:	e0bffc17 	ldw	r2,-16(fp)
   1139c:	1080020b 	ldhu	r2,8(r2)
   113a0:	0084303a 	nor	r2,zero,r2
   113a4:	1007883a 	mov	r3,r2
   113a8:	e0bffd0b 	ldhu	r2,-12(fp)
   113ac:	1884703a 	and	r2,r3,r2
   113b0:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   113b4:	e0bfe80b 	ldhu	r2,-96(fp)
   113b8:	10001526 	beq	r2,zero,11410 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   113bc:	e0bfe403 	ldbu	r2,-112(fp)
   113c0:	10800058 	cmpnei	r2,r2,1
   113c4:	1000071e 	bne	r2,zero,113e4 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   113c8:	e0bffc17 	ldw	r2,-16(fp)
   113cc:	10c0020b 	ldhu	r3,8(r2)
   113d0:	e0bfe80b 	ldhu	r2,-96(fp)
   113d4:	1884b03a 	or	r2,r3,r2
   113d8:	1007883a 	mov	r3,r2
   113dc:	e0bffc17 	ldw	r2,-16(fp)
   113e0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   113e4:	d0a81617 	ldw	r2,-24488(gp)
   113e8:	e0ffe80b 	ldhu	r3,-96(fp)
   113ec:	10c00b0d 	sth	r3,44(r2)
   113f0:	e0bfe517 	ldw	r2,-108(fp)
   113f4:	e0bfee15 	stw	r2,-72(fp)
   113f8:	e0bfee17 	ldw	r2,-72(fp)
   113fc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   11400:	e0800217 	ldw	r2,8(fp)
   11404:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   11408:	e0bfe80b 	ldhu	r2,-96(fp)
   1140c:	00007006 	br	115d0 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   11410:	e13ffd0b 	ldhu	r4,-12(fp)
   11414:	e17ffe03 	ldbu	r5,-8(fp)
   11418:	e0bfff0b 	ldhu	r2,-4(fp)
   1141c:	e0fff704 	addi	r3,fp,-36
   11420:	d8800015 	stw	r2,0(sp)
   11424:	280f883a 	mov	r7,r5
   11428:	200d883a 	mov	r6,r4
   1142c:	180b883a 	mov	r5,r3
   11430:	e13ffc17 	ldw	r4,-16(fp)
   11434:	0011a9c0 	call	11a9c <OS_FlagBlock>
   11438:	e0bfe517 	ldw	r2,-108(fp)
   1143c:	e0bfef15 	stw	r2,-68(fp)
   11440:	e0bfef17 	ldw	r2,-68(fp)
   11444:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   11448:	00000a06 	br	11474 <OSFlagPend+0x448>
   1144c:	e0bfe517 	ldw	r2,-108(fp)
   11450:	e0bff015 	stw	r2,-64(fp)
   11454:	e0bff017 	ldw	r2,-64(fp)
   11458:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   1145c:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   11460:	e0800217 	ldw	r2,8(fp)
   11464:	00c01bc4 	movi	r3,111
   11468:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   1146c:	e0bfe80b 	ldhu	r2,-96(fp)
   11470:	00005706 	br	115d0 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   11474:	000feec0 	call	feec <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11478:	0005303a 	rdctl	r2,status
   1147c:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11480:	e0fff117 	ldw	r3,-60(fp)
   11484:	00bfff84 	movi	r2,-2
   11488:	1884703a 	and	r2,r3,r2
   1148c:	1001703a 	wrctl	status,r2
  
  return context;
   11490:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
   11494:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   11498:	d0a81617 	ldw	r2,-24488(gp)
   1149c:	10800c43 	ldbu	r2,49(r2)
   114a0:	10803fcc 	andi	r2,r2,255
   114a4:	10001c26 	beq	r2,zero,11518 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   114a8:	d0a81617 	ldw	r2,-24488(gp)
   114ac:	10800c43 	ldbu	r2,49(r2)
   114b0:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   114b4:	d0a81617 	ldw	r2,-24488(gp)
   114b8:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   114bc:	e0bff704 	addi	r2,fp,-36
   114c0:	1009883a 	mov	r4,r2
   114c4:	0011dd00 	call	11dd0 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   114c8:	d0a81617 	ldw	r2,-24488(gp)
   114cc:	10000c05 	stb	zero,48(r2)
   114d0:	e0bfe517 	ldw	r2,-108(fp)
   114d4:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   114d8:	e0bff217 	ldw	r2,-56(fp)
   114dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   114e0:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
   114e4:	e0bff303 	ldbu	r2,-52(fp)
   114e8:	108000a0 	cmpeqi	r2,r2,2
   114ec:	10000426 	beq	r2,zero,11500 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   114f0:	e0800217 	ldw	r2,8(fp)
   114f4:	00c00384 	movi	r3,14
   114f8:	10c00005 	stb	r3,0(r2)
                 break;
   114fc:	00000406 	br	11510 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   11500:	e0800217 	ldw	r2,8(fp)
   11504:	00c00284 	movi	r3,10
   11508:	10c00005 	stb	r3,0(r2)
                 break;
   1150c:	0001883a 	nop
        }
        return (flags_rdy);
   11510:	e0bfe80b 	ldhu	r2,-96(fp)
   11514:	00002e06 	br	115d0 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   11518:	d0a81617 	ldw	r2,-24488(gp)
   1151c:	10800b0b 	ldhu	r2,44(r2)
   11520:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   11524:	e0bfe403 	ldbu	r2,-112(fp)
   11528:	10800058 	cmpnei	r2,r2,1
   1152c:	1000211e 	bne	r2,zero,115b4 <OSFlagPend+0x588>
        switch (wait_type) {
   11530:	e0bffe03 	ldbu	r2,-8(fp)
   11534:	10001616 	blt	r2,zero,11590 <OSFlagPend+0x564>
   11538:	10c00090 	cmplti	r3,r2,2
   1153c:	18000c1e 	bne	r3,zero,11570 <OSFlagPend+0x544>
   11540:	10800108 	cmpgei	r2,r2,4
   11544:	1000121e 	bne	r2,zero,11590 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   11548:	e0bffc17 	ldw	r2,-16(fp)
   1154c:	1080020b 	ldhu	r2,8(r2)
   11550:	1007883a 	mov	r3,r2
   11554:	e0bfe80b 	ldhu	r2,-96(fp)
   11558:	0084303a 	nor	r2,zero,r2
   1155c:	1884703a 	and	r2,r3,r2
   11560:	1007883a 	mov	r3,r2
   11564:	e0bffc17 	ldw	r2,-16(fp)
   11568:	10c0020d 	sth	r3,8(r2)
                 break;
   1156c:	00001106 	br	115b4 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   11570:	e0bffc17 	ldw	r2,-16(fp)
   11574:	10c0020b 	ldhu	r3,8(r2)
   11578:	e0bfe80b 	ldhu	r2,-96(fp)
   1157c:	1884b03a 	or	r2,r3,r2
   11580:	1007883a 	mov	r3,r2
   11584:	e0bffc17 	ldw	r2,-16(fp)
   11588:	10c0020d 	sth	r3,8(r2)
                 break;
   1158c:	00000906 	br	115b4 <OSFlagPend+0x588>
   11590:	e0bfe517 	ldw	r2,-108(fp)
   11594:	e0bff415 	stw	r2,-48(fp)
   11598:	e0bff417 	ldw	r2,-48(fp)
   1159c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   115a0:	e0800217 	ldw	r2,8(fp)
   115a4:	00c01bc4 	movi	r3,111
   115a8:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   115ac:	0005883a 	mov	r2,zero
   115b0:	00000706 	br	115d0 <OSFlagPend+0x5a4>
   115b4:	e0bfe517 	ldw	r2,-108(fp)
   115b8:	e0bff515 	stw	r2,-44(fp)
   115bc:	e0bff517 	ldw	r2,-44(fp)
   115c0:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   115c4:	e0800217 	ldw	r2,8(fp)
   115c8:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   115cc:	e0bfe80b 	ldhu	r2,-96(fp)
}
   115d0:	e037883a 	mov	sp,fp
   115d4:	dfc00117 	ldw	ra,4(sp)
   115d8:	df000017 	ldw	fp,0(sp)
   115dc:	dec00204 	addi	sp,sp,8
   115e0:	f800283a 	ret

000115e4 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   115e4:	defffb04 	addi	sp,sp,-20
   115e8:	df000415 	stw	fp,16(sp)
   115ec:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   115f0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   115f4:	0005303a 	rdctl	r2,status
   115f8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   115fc:	e0fffe17 	ldw	r3,-8(fp)
   11600:	00bfff84 	movi	r2,-2
   11604:	1884703a 	and	r2,r3,r2
   11608:	1001703a 	wrctl	status,r2
  
  return context;
   1160c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   11610:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   11614:	d0a81617 	ldw	r2,-24488(gp)
   11618:	10800b0b 	ldhu	r2,44(r2)
   1161c:	e0bffd0d 	sth	r2,-12(fp)
   11620:	e0bffc17 	ldw	r2,-16(fp)
   11624:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11628:	e0bfff17 	ldw	r2,-4(fp)
   1162c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   11630:	e0bffd0b 	ldhu	r2,-12(fp)
}
   11634:	e037883a 	mov	sp,fp
   11638:	df000017 	ldw	fp,0(sp)
   1163c:	dec00104 	addi	sp,sp,4
   11640:	f800283a 	ret

00011644 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   11644:	deffef04 	addi	sp,sp,-68
   11648:	dfc01015 	stw	ra,64(sp)
   1164c:	df000f15 	stw	fp,60(sp)
   11650:	df000f04 	addi	fp,sp,60
   11654:	e13ffc15 	stw	r4,-16(fp)
   11658:	2807883a 	mov	r3,r5
   1165c:	3005883a 	mov	r2,r6
   11660:	e1ffff15 	stw	r7,-4(fp)
   11664:	e0fffd0d 	sth	r3,-12(fp)
   11668:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   1166c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   11670:	e0bfff17 	ldw	r2,-4(fp)
   11674:	1000021e 	bne	r2,zero,11680 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   11678:	0005883a 	mov	r2,zero
   1167c:	0000d106 	br	119c4 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   11680:	e0bffc17 	ldw	r2,-16(fp)
   11684:	1000051e 	bne	r2,zero,1169c <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   11688:	e0bfff17 	ldw	r2,-4(fp)
   1168c:	00c01b84 	movi	r3,110
   11690:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11694:	0005883a 	mov	r2,zero
   11698:	0000ca06 	br	119c4 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   1169c:	e0bffc17 	ldw	r2,-16(fp)
   116a0:	10800003 	ldbu	r2,0(r2)
   116a4:	10803fcc 	andi	r2,r2,255
   116a8:	10800160 	cmpeqi	r2,r2,5
   116ac:	1000051e 	bne	r2,zero,116c4 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   116b0:	e0bfff17 	ldw	r2,-4(fp)
   116b4:	00c00044 	movi	r3,1
   116b8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   116bc:	0005883a 	mov	r2,zero
   116c0:	0000c006 	br	119c4 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   116c4:	0005303a 	rdctl	r2,status
   116c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   116cc:	e0fffb17 	ldw	r3,-20(fp)
   116d0:	00bfff84 	movi	r2,-2
   116d4:	1884703a 	and	r2,r3,r2
   116d8:	1001703a 	wrctl	status,r2
  
  return context;
   116dc:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   116e0:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   116e4:	e0bffe03 	ldbu	r2,-8(fp)
   116e8:	10000326 	beq	r2,zero,116f8 <OSFlagPost+0xb4>
   116ec:	10800060 	cmpeqi	r2,r2,1
   116f0:	10000b1e 	bne	r2,zero,11720 <OSFlagPost+0xdc>
   116f4:	00001206 	br	11740 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   116f8:	e0bffc17 	ldw	r2,-16(fp)
   116fc:	1080020b 	ldhu	r2,8(r2)
   11700:	1007883a 	mov	r3,r2
   11704:	e0bffd0b 	ldhu	r2,-12(fp)
   11708:	0084303a 	nor	r2,zero,r2
   1170c:	1884703a 	and	r2,r3,r2
   11710:	1007883a 	mov	r3,r2
   11714:	e0bffc17 	ldw	r2,-16(fp)
   11718:	10c0020d 	sth	r3,8(r2)
             break;
   1171c:	00001106 	br	11764 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   11720:	e0bffc17 	ldw	r2,-16(fp)
   11724:	10c0020b 	ldhu	r3,8(r2)
   11728:	e0bffd0b 	ldhu	r2,-12(fp)
   1172c:	1884b03a 	or	r2,r3,r2
   11730:	1007883a 	mov	r3,r2
   11734:	e0bffc17 	ldw	r2,-16(fp)
   11738:	10c0020d 	sth	r3,8(r2)
             break;
   1173c:	00000906 	br	11764 <OSFlagPost+0x120>
   11740:	e0bff317 	ldw	r2,-52(fp)
   11744:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11748:	e0bff417 	ldw	r2,-48(fp)
   1174c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   11750:	e0bfff17 	ldw	r2,-4(fp)
   11754:	00c01c44 	movi	r3,113
   11758:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   1175c:	0005883a 	mov	r2,zero
   11760:	00009806 	br	119c4 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   11764:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   11768:	e0bffc17 	ldw	r2,-16(fp)
   1176c:	10800117 	ldw	r2,4(r2)
   11770:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   11774:	00007706 	br	11954 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
   11778:	e0bff117 	ldw	r2,-60(fp)
   1177c:	10800483 	ldbu	r2,18(r2)
   11780:	10803fcc 	andi	r2,r2,255
   11784:	10c00060 	cmpeqi	r3,r2,1
   11788:	18004a1e 	bne	r3,zero,118b4 <OSFlagPost+0x270>
   1178c:	10c00088 	cmpgei	r3,r2,2
   11790:	1800021e 	bne	r3,zero,1179c <OSFlagPost+0x158>
   11794:	10002f26 	beq	r2,zero,11854 <OSFlagPost+0x210>
   11798:	00005b06 	br	11908 <OSFlagPost+0x2c4>
   1179c:	10c000a0 	cmpeqi	r3,r2,2
   117a0:	1800031e 	bne	r3,zero,117b0 <OSFlagPost+0x16c>
   117a4:	108000e0 	cmpeqi	r2,r2,3
   117a8:	1000171e 	bne	r2,zero,11808 <OSFlagPost+0x1c4>
   117ac:	00005606 	br	11908 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   117b0:	e0bffc17 	ldw	r2,-16(fp)
   117b4:	10c0020b 	ldhu	r3,8(r2)
   117b8:	e0bff117 	ldw	r2,-60(fp)
   117bc:	1080040b 	ldhu	r2,16(r2)
   117c0:	1884703a 	and	r2,r3,r2
   117c4:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   117c8:	e0bff117 	ldw	r2,-60(fp)
   117cc:	1080040b 	ldhu	r2,16(r2)
   117d0:	10ffffcc 	andi	r3,r2,65535
   117d4:	e0bff60b 	ldhu	r2,-40(fp)
   117d8:	1880541e 	bne	r3,r2,1192c <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   117dc:	e0bff60b 	ldhu	r2,-40(fp)
   117e0:	100b883a 	mov	r5,r2
   117e4:	e13ff117 	ldw	r4,-60(fp)
   117e8:	0011cdc0 	call	11cdc <OS_FlagTaskRdy>
   117ec:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   117f0:	e0bff683 	ldbu	r2,-38(fp)
   117f4:	10800058 	cmpnei	r2,r2,1
   117f8:	10004c1e 	bne	r2,zero,1192c <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   117fc:	00800044 	movi	r2,1
   11800:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   11804:	00004906 	br	1192c <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   11808:	e0bffc17 	ldw	r2,-16(fp)
   1180c:	10c0020b 	ldhu	r3,8(r2)
   11810:	e0bff117 	ldw	r2,-60(fp)
   11814:	1080040b 	ldhu	r2,16(r2)
   11818:	1884703a 	and	r2,r3,r2
   1181c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   11820:	e0bff60b 	ldhu	r2,-40(fp)
   11824:	10004326 	beq	r2,zero,11934 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   11828:	e0bff60b 	ldhu	r2,-40(fp)
   1182c:	100b883a 	mov	r5,r2
   11830:	e13ff117 	ldw	r4,-60(fp)
   11834:	0011cdc0 	call	11cdc <OS_FlagTaskRdy>
   11838:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   1183c:	e0bff683 	ldbu	r2,-38(fp)
   11840:	10800058 	cmpnei	r2,r2,1
   11844:	10003b1e 	bne	r2,zero,11934 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   11848:	00800044 	movi	r2,1
   1184c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   11850:	00003806 	br	11934 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   11854:	e0bffc17 	ldw	r2,-16(fp)
   11858:	1080020b 	ldhu	r2,8(r2)
   1185c:	0084303a 	nor	r2,zero,r2
   11860:	1007883a 	mov	r3,r2
   11864:	e0bff117 	ldw	r2,-60(fp)
   11868:	1080040b 	ldhu	r2,16(r2)
   1186c:	1884703a 	and	r2,r3,r2
   11870:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   11874:	e0bff117 	ldw	r2,-60(fp)
   11878:	1080040b 	ldhu	r2,16(r2)
   1187c:	10ffffcc 	andi	r3,r2,65535
   11880:	e0bff60b 	ldhu	r2,-40(fp)
   11884:	18802d1e 	bne	r3,r2,1193c <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   11888:	e0bff60b 	ldhu	r2,-40(fp)
   1188c:	100b883a 	mov	r5,r2
   11890:	e13ff117 	ldw	r4,-60(fp)
   11894:	0011cdc0 	call	11cdc <OS_FlagTaskRdy>
   11898:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   1189c:	e0bff683 	ldbu	r2,-38(fp)
   118a0:	10800058 	cmpnei	r2,r2,1
   118a4:	1000251e 	bne	r2,zero,1193c <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   118a8:	00800044 	movi	r2,1
   118ac:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   118b0:	00002206 	br	1193c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   118b4:	e0bffc17 	ldw	r2,-16(fp)
   118b8:	1080020b 	ldhu	r2,8(r2)
   118bc:	0084303a 	nor	r2,zero,r2
   118c0:	1007883a 	mov	r3,r2
   118c4:	e0bff117 	ldw	r2,-60(fp)
   118c8:	1080040b 	ldhu	r2,16(r2)
   118cc:	1884703a 	and	r2,r3,r2
   118d0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   118d4:	e0bff60b 	ldhu	r2,-40(fp)
   118d8:	10001a26 	beq	r2,zero,11944 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   118dc:	e0bff60b 	ldhu	r2,-40(fp)
   118e0:	100b883a 	mov	r5,r2
   118e4:	e13ff117 	ldw	r4,-60(fp)
   118e8:	0011cdc0 	call	11cdc <OS_FlagTaskRdy>
   118ec:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   118f0:	e0bff683 	ldbu	r2,-38(fp)
   118f4:	10800058 	cmpnei	r2,r2,1
   118f8:	1000121e 	bne	r2,zero,11944 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   118fc:	00800044 	movi	r2,1
   11900:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   11904:	00000f06 	br	11944 <OSFlagPost+0x300>
   11908:	e0bff317 	ldw	r2,-52(fp)
   1190c:	e0bff515 	stw	r2,-44(fp)
   11910:	e0bff517 	ldw	r2,-44(fp)
   11914:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   11918:	e0bfff17 	ldw	r2,-4(fp)
   1191c:	00c01bc4 	movi	r3,111
   11920:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   11924:	0005883a 	mov	r2,zero
   11928:	00002606 	br	119c4 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   1192c:	0001883a 	nop
   11930:	00000506 	br	11948 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   11934:	0001883a 	nop
   11938:	00000306 	br	11948 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   1193c:	0001883a 	nop
   11940:	00000106 	br	11948 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   11944:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   11948:	e0bff117 	ldw	r2,-60(fp)
   1194c:	10800017 	ldw	r2,0(r2)
   11950:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   11954:	e0bff117 	ldw	r2,-60(fp)
   11958:	103f871e 	bne	r2,zero,11778 <OSFlagPost+0x134>
   1195c:	e0bff317 	ldw	r2,-52(fp)
   11960:	e0bff715 	stw	r2,-36(fp)
   11964:	e0bff717 	ldw	r2,-36(fp)
   11968:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   1196c:	e0bff203 	ldbu	r2,-56(fp)
   11970:	10800058 	cmpnei	r2,r2,1
   11974:	1000011e 	bne	r2,zero,1197c <OSFlagPost+0x338>
        OS_Sched();
   11978:	000feec0 	call	feec <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1197c:	0005303a 	rdctl	r2,status
   11980:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11984:	e0fffa17 	ldw	r3,-24(fp)
   11988:	00bfff84 	movi	r2,-2
   1198c:	1884703a 	and	r2,r3,r2
   11990:	1001703a 	wrctl	status,r2
  
  return context;
   11994:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   11998:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   1199c:	e0bffc17 	ldw	r2,-16(fp)
   119a0:	1080020b 	ldhu	r2,8(r2)
   119a4:	e0bff90d 	sth	r2,-28(fp)
   119a8:	e0bff317 	ldw	r2,-52(fp)
   119ac:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   119b0:	e0bff817 	ldw	r2,-32(fp)
   119b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   119b8:	e0bfff17 	ldw	r2,-4(fp)
   119bc:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   119c0:	e0bff90b 	ldhu	r2,-28(fp)
}
   119c4:	e037883a 	mov	sp,fp
   119c8:	dfc00117 	ldw	ra,4(sp)
   119cc:	df000017 	ldw	fp,0(sp)
   119d0:	dec00204 	addi	sp,sp,8
   119d4:	f800283a 	ret

000119d8 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   119d8:	defff904 	addi	sp,sp,-28
   119dc:	df000615 	stw	fp,24(sp)
   119e0:	df000604 	addi	fp,sp,24
   119e4:	e13ffe15 	stw	r4,-8(fp)
   119e8:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   119ec:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   119f0:	e0bfff17 	ldw	r2,-4(fp)
   119f4:	1000021e 	bne	r2,zero,11a00 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   119f8:	0005883a 	mov	r2,zero
   119fc:	00002306 	br	11a8c <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   11a00:	e0bffe17 	ldw	r2,-8(fp)
   11a04:	1000051e 	bne	r2,zero,11a1c <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   11a08:	e0bfff17 	ldw	r2,-4(fp)
   11a0c:	00c01b84 	movi	r3,110
   11a10:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11a14:	0005883a 	mov	r2,zero
   11a18:	00001c06 	br	11a8c <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   11a1c:	e0bffe17 	ldw	r2,-8(fp)
   11a20:	10800003 	ldbu	r2,0(r2)
   11a24:	10803fcc 	andi	r2,r2,255
   11a28:	10800160 	cmpeqi	r2,r2,5
   11a2c:	1000051e 	bne	r2,zero,11a44 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   11a30:	e0bfff17 	ldw	r2,-4(fp)
   11a34:	00c00044 	movi	r3,1
   11a38:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11a3c:	0005883a 	mov	r2,zero
   11a40:	00001206 	br	11a8c <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11a44:	0005303a 	rdctl	r2,status
   11a48:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11a4c:	e0fffc17 	ldw	r3,-16(fp)
   11a50:	00bfff84 	movi	r2,-2
   11a54:	1884703a 	and	r2,r3,r2
   11a58:	1001703a 	wrctl	status,r2
  
  return context;
   11a5c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   11a60:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   11a64:	e0bffe17 	ldw	r2,-8(fp)
   11a68:	1080020b 	ldhu	r2,8(r2)
   11a6c:	e0bffb0d 	sth	r2,-20(fp)
   11a70:	e0bffa17 	ldw	r2,-24(fp)
   11a74:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11a78:	e0bffd17 	ldw	r2,-12(fp)
   11a7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11a80:	e0bfff17 	ldw	r2,-4(fp)
   11a84:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   11a88:	e0bffb0b 	ldhu	r2,-20(fp)
}
   11a8c:	e037883a 	mov	sp,fp
   11a90:	df000017 	ldw	fp,0(sp)
   11a94:	dec00104 	addi	sp,sp,4
   11a98:	f800283a 	ret

00011a9c <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   11a9c:	defff804 	addi	sp,sp,-32
   11aa0:	df000715 	stw	fp,28(sp)
   11aa4:	df000704 	addi	fp,sp,28
   11aa8:	e13ffb15 	stw	r4,-20(fp)
   11aac:	e17ffc15 	stw	r5,-16(fp)
   11ab0:	3009883a 	mov	r4,r6
   11ab4:	3807883a 	mov	r3,r7
   11ab8:	e0800117 	ldw	r2,4(fp)
   11abc:	e13ffd0d 	sth	r4,-12(fp)
   11ac0:	e0fffe05 	stb	r3,-8(fp)
   11ac4:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   11ac8:	d0a81617 	ldw	r2,-24488(gp)
   11acc:	d0e81617 	ldw	r3,-24488(gp)
   11ad0:	18c00c03 	ldbu	r3,48(r3)
   11ad4:	18c00814 	ori	r3,r3,32
   11ad8:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   11adc:	d0a81617 	ldw	r2,-24488(gp)
   11ae0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   11ae4:	d0a81617 	ldw	r2,-24488(gp)
   11ae8:	e0ffff0b 	ldhu	r3,-4(fp)
   11aec:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   11af0:	d0a81617 	ldw	r2,-24488(gp)
   11af4:	e0fffc17 	ldw	r3,-16(fp)
   11af8:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   11afc:	e0bffc17 	ldw	r2,-16(fp)
   11b00:	e0fffd0b 	ldhu	r3,-12(fp)
   11b04:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   11b08:	e0bffc17 	ldw	r2,-16(fp)
   11b0c:	e0fffe03 	ldbu	r3,-8(fp)
   11b10:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   11b14:	d0e81617 	ldw	r3,-24488(gp)
   11b18:	e0bffc17 	ldw	r2,-16(fp)
   11b1c:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   11b20:	e0bffb17 	ldw	r2,-20(fp)
   11b24:	10c00117 	ldw	r3,4(r2)
   11b28:	e0bffc17 	ldw	r2,-16(fp)
   11b2c:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   11b30:	e0bffc17 	ldw	r2,-16(fp)
   11b34:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   11b38:	e0bffc17 	ldw	r2,-16(fp)
   11b3c:	e0fffb17 	ldw	r3,-20(fp)
   11b40:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   11b44:	e0bffb17 	ldw	r2,-20(fp)
   11b48:	10800117 	ldw	r2,4(r2)
   11b4c:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   11b50:	e0bff917 	ldw	r2,-28(fp)
   11b54:	10000326 	beq	r2,zero,11b64 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   11b58:	e0bff917 	ldw	r2,-28(fp)
   11b5c:	e0fffc17 	ldw	r3,-16(fp)
   11b60:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   11b64:	e0bffb17 	ldw	r2,-20(fp)
   11b68:	e0fffc17 	ldw	r3,-16(fp)
   11b6c:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   11b70:	d0a81617 	ldw	r2,-24488(gp)
   11b74:	10800d03 	ldbu	r2,52(r2)
   11b78:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   11b7c:	e0fffa03 	ldbu	r3,-24(fp)
   11b80:	e13ffa03 	ldbu	r4,-24(fp)
   11b84:	d0a81344 	addi	r2,gp,-24499
   11b88:	2085883a 	add	r2,r4,r2
   11b8c:	10800003 	ldbu	r2,0(r2)
   11b90:	1009883a 	mov	r4,r2
   11b94:	d0a81617 	ldw	r2,-24488(gp)
   11b98:	10800d43 	ldbu	r2,53(r2)
   11b9c:	0084303a 	nor	r2,zero,r2
   11ba0:	2084703a 	and	r2,r4,r2
   11ba4:	1009883a 	mov	r4,r2
   11ba8:	d0a81344 	addi	r2,gp,-24499
   11bac:	1885883a 	add	r2,r3,r2
   11bb0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   11bb4:	e0fffa03 	ldbu	r3,-24(fp)
   11bb8:	d0a81344 	addi	r2,gp,-24499
   11bbc:	1885883a 	add	r2,r3,r2
   11bc0:	10800003 	ldbu	r2,0(r2)
   11bc4:	10803fcc 	andi	r2,r2,255
   11bc8:	1000071e 	bne	r2,zero,11be8 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   11bcc:	d0a81617 	ldw	r2,-24488(gp)
   11bd0:	10800d83 	ldbu	r2,54(r2)
   11bd4:	0084303a 	nor	r2,zero,r2
   11bd8:	1007883a 	mov	r3,r2
   11bdc:	d0a81303 	ldbu	r2,-24500(gp)
   11be0:	1884703a 	and	r2,r3,r2
   11be4:	d0a81305 	stb	r2,-24500(gp)
    }
}
   11be8:	0001883a 	nop
   11bec:	e037883a 	mov	sp,fp
   11bf0:	df000017 	ldw	fp,0(sp)
   11bf4:	dec00104 	addi	sp,sp,4
   11bf8:	f800283a 	ret

00011bfc <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   11bfc:	defffb04 	addi	sp,sp,-20
   11c00:	dfc00415 	stw	ra,16(sp)
   11c04:	df000315 	stw	fp,12(sp)
   11c08:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   11c0c:	0140dc04 	movi	r5,880
   11c10:	010000b4 	movhi	r4,2
   11c14:	2109a204 	addi	r4,r4,9864
   11c18:	000fe300 	call	fe30 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   11c1c:	008000b4 	movhi	r2,2
   11c20:	1089a204 	addi	r2,r2,9864
   11c24:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   11c28:	008000b4 	movhi	r2,2
   11c2c:	1089ad04 	addi	r2,r2,9908
   11c30:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   11c34:	e03ffd0d 	sth	zero,-12(fp)
   11c38:	00001306 	br	11c88 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   11c3c:	e0bffe17 	ldw	r2,-8(fp)
   11c40:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   11c44:	e0bffe17 	ldw	r2,-8(fp)
   11c48:	e0ffff17 	ldw	r3,-4(fp)
   11c4c:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   11c50:	e0bffe17 	ldw	r2,-8(fp)
   11c54:	00c00fc4 	movi	r3,63
   11c58:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   11c5c:	e0bffe17 	ldw	r2,-8(fp)
   11c60:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   11c64:	e0bffe17 	ldw	r2,-8(fp)
   11c68:	10800b04 	addi	r2,r2,44
   11c6c:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   11c70:	e0bfff17 	ldw	r2,-4(fp)
   11c74:	10800b04 	addi	r2,r2,44
   11c78:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   11c7c:	e0bffd0b 	ldhu	r2,-12(fp)
   11c80:	10800044 	addi	r2,r2,1
   11c84:	e0bffd0d 	sth	r2,-12(fp)
   11c88:	e0bffd0b 	ldhu	r2,-12(fp)
   11c8c:	108004f0 	cmpltui	r2,r2,19
   11c90:	103fea1e 	bne	r2,zero,11c3c <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   11c94:	e0bffe17 	ldw	r2,-8(fp)
   11c98:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   11c9c:	e0bffe17 	ldw	r2,-8(fp)
   11ca0:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   11ca4:	e0bffe17 	ldw	r2,-8(fp)
   11ca8:	00c00fc4 	movi	r3,63
   11cac:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   11cb0:	e0bffe17 	ldw	r2,-8(fp)
   11cb4:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   11cb8:	008000b4 	movhi	r2,2
   11cbc:	1089a204 	addi	r2,r2,9864
   11cc0:	d0a81815 	stw	r2,-24480(gp)
#endif
}
   11cc4:	0001883a 	nop
   11cc8:	e037883a 	mov	sp,fp
   11ccc:	dfc00117 	ldw	ra,4(sp)
   11cd0:	df000017 	ldw	fp,0(sp)
   11cd4:	dec00204 	addi	sp,sp,8
   11cd8:	f800283a 	ret

00011cdc <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   11cdc:	defffa04 	addi	sp,sp,-24
   11ce0:	dfc00515 	stw	ra,20(sp)
   11ce4:	df000415 	stw	fp,16(sp)
   11ce8:	df000404 	addi	fp,sp,16
   11cec:	e13ffe15 	stw	r4,-8(fp)
   11cf0:	2805883a 	mov	r2,r5
   11cf4:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   11cf8:	e0bffe17 	ldw	r2,-8(fp)
   11cfc:	10800217 	ldw	r2,8(r2)
   11d00:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   11d04:	e0bffd17 	ldw	r2,-12(fp)
   11d08:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   11d0c:	e0bffd17 	ldw	r2,-12(fp)
   11d10:	e0ffff0b 	ldhu	r3,-4(fp)
   11d14:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   11d18:	e0bffd17 	ldw	r2,-12(fp)
   11d1c:	10c00c03 	ldbu	r3,48(r2)
   11d20:	00bff7c4 	movi	r2,-33
   11d24:	1884703a 	and	r2,r3,r2
   11d28:	1007883a 	mov	r3,r2
   11d2c:	e0bffd17 	ldw	r2,-12(fp)
   11d30:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   11d34:	e0bffd17 	ldw	r2,-12(fp)
   11d38:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   11d3c:	e0bffd17 	ldw	r2,-12(fp)
   11d40:	10800c03 	ldbu	r2,48(r2)
   11d44:	10803fcc 	andi	r2,r2,255
   11d48:	1000181e 	bne	r2,zero,11dac <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   11d4c:	e0bffd17 	ldw	r2,-12(fp)
   11d50:	10c00d83 	ldbu	r3,54(r2)
   11d54:	d0a81303 	ldbu	r2,-24500(gp)
   11d58:	1884b03a 	or	r2,r3,r2
   11d5c:	d0a81305 	stb	r2,-24500(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   11d60:	e0bffd17 	ldw	r2,-12(fp)
   11d64:	10800d03 	ldbu	r2,52(r2)
   11d68:	10c03fcc 	andi	r3,r2,255
   11d6c:	e0bffd17 	ldw	r2,-12(fp)
   11d70:	10800d03 	ldbu	r2,52(r2)
   11d74:	11003fcc 	andi	r4,r2,255
   11d78:	d0a81344 	addi	r2,gp,-24499
   11d7c:	2085883a 	add	r2,r4,r2
   11d80:	11000003 	ldbu	r4,0(r2)
   11d84:	e0bffd17 	ldw	r2,-12(fp)
   11d88:	10800d43 	ldbu	r2,53(r2)
   11d8c:	2084b03a 	or	r2,r4,r2
   11d90:	1009883a 	mov	r4,r2
   11d94:	d0a81344 	addi	r2,gp,-24499
   11d98:	1885883a 	add	r2,r3,r2
   11d9c:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   11da0:	00800044 	movi	r2,1
   11da4:	e0bffc05 	stb	r2,-16(fp)
   11da8:	00000106 	br	11db0 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
   11dac:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   11db0:	e13ffe17 	ldw	r4,-8(fp)
   11db4:	0011dd00 	call	11dd0 <OS_FlagUnlink>
    return (sched);
   11db8:	e0bffc03 	ldbu	r2,-16(fp)
}
   11dbc:	e037883a 	mov	sp,fp
   11dc0:	dfc00117 	ldw	ra,4(sp)
   11dc4:	df000017 	ldw	fp,0(sp)
   11dc8:	dec00204 	addi	sp,sp,8
   11dcc:	f800283a 	ret

00011dd0 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   11dd0:	defffa04 	addi	sp,sp,-24
   11dd4:	df000515 	stw	fp,20(sp)
   11dd8:	df000504 	addi	fp,sp,20
   11ddc:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   11de0:	e0bfff17 	ldw	r2,-4(fp)
   11de4:	10800117 	ldw	r2,4(r2)
   11de8:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   11dec:	e0bfff17 	ldw	r2,-4(fp)
   11df0:	10800017 	ldw	r2,0(r2)
   11df4:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   11df8:	e0bffb17 	ldw	r2,-20(fp)
   11dfc:	10000b1e 	bne	r2,zero,11e2c <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   11e00:	e0bfff17 	ldw	r2,-4(fp)
   11e04:	10800317 	ldw	r2,12(r2)
   11e08:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   11e0c:	e0bffd17 	ldw	r2,-12(fp)
   11e10:	e0fffc17 	ldw	r3,-16(fp)
   11e14:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   11e18:	e0bffc17 	ldw	r2,-16(fp)
   11e1c:	10000b26 	beq	r2,zero,11e4c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   11e20:	e0bffc17 	ldw	r2,-16(fp)
   11e24:	10000115 	stw	zero,4(r2)
   11e28:	00000806 	br	11e4c <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   11e2c:	e0bffb17 	ldw	r2,-20(fp)
   11e30:	e0fffc17 	ldw	r3,-16(fp)
   11e34:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   11e38:	e0bffc17 	ldw	r2,-16(fp)
   11e3c:	10000326 	beq	r2,zero,11e4c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   11e40:	e0bffc17 	ldw	r2,-16(fp)
   11e44:	e0fffb17 	ldw	r3,-20(fp)
   11e48:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   11e4c:	e0bfff17 	ldw	r2,-4(fp)
   11e50:	10800217 	ldw	r2,8(r2)
   11e54:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   11e58:	e0bffe17 	ldw	r2,-8(fp)
   11e5c:	10000a15 	stw	zero,40(r2)
#endif
}
   11e60:	0001883a 	nop
   11e64:	e037883a 	mov	sp,fp
   11e68:	df000017 	ldw	fp,0(sp)
   11e6c:	dec00104 	addi	sp,sp,4
   11e70:	f800283a 	ret

00011e74 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   11e74:	defff404 	addi	sp,sp,-48
   11e78:	df000b15 	stw	fp,44(sp)
   11e7c:	df000b04 	addi	fp,sp,44
   11e80:	e13ffc15 	stw	r4,-16(fp)
   11e84:	e17ffd15 	stw	r5,-12(fp)
   11e88:	e1bffe15 	stw	r6,-8(fp)
   11e8c:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   11e90:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   11e94:	e0bfff17 	ldw	r2,-4(fp)
   11e98:	1000021e 	bne	r2,zero,11ea4 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   11e9c:	0005883a 	mov	r2,zero
   11ea0:	00006506 	br	12038 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   11ea4:	e0bffc17 	ldw	r2,-16(fp)
   11ea8:	1000051e 	bne	r2,zero,11ec0 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   11eac:	e0bfff17 	ldw	r2,-4(fp)
   11eb0:	00c01884 	movi	r3,98
   11eb4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11eb8:	0005883a 	mov	r2,zero
   11ebc:	00005e06 	br	12038 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   11ec0:	e0bffc17 	ldw	r2,-16(fp)
   11ec4:	108000cc 	andi	r2,r2,3
   11ec8:	10000526 	beq	r2,zero,11ee0 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   11ecc:	e0bfff17 	ldw	r2,-4(fp)
   11ed0:	00c01884 	movi	r3,98
   11ed4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11ed8:	0005883a 	mov	r2,zero
   11edc:	00005606 	br	12038 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   11ee0:	e0bffd17 	ldw	r2,-12(fp)
   11ee4:	108000a8 	cmpgeui	r2,r2,2
   11ee8:	1000051e 	bne	r2,zero,11f00 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   11eec:	e0bfff17 	ldw	r2,-4(fp)
   11ef0:	00c016c4 	movi	r3,91
   11ef4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11ef8:	0005883a 	mov	r2,zero
   11efc:	00004e06 	br	12038 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   11f00:	e0bffe17 	ldw	r2,-8(fp)
   11f04:	10800128 	cmpgeui	r2,r2,4
   11f08:	1000051e 	bne	r2,zero,11f20 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   11f0c:	e0bfff17 	ldw	r2,-4(fp)
   11f10:	00c01704 	movi	r3,92
   11f14:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11f18:	0005883a 	mov	r2,zero
   11f1c:	00004606 	br	12038 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11f20:	0005303a 	rdctl	r2,status
   11f24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11f28:	e0fffb17 	ldw	r3,-20(fp)
   11f2c:	00bfff84 	movi	r2,-2
   11f30:	1884703a 	and	r2,r3,r2
   11f34:	1001703a 	wrctl	status,r2
  
  return context;
   11f38:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11f3c:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   11f40:	d0a81017 	ldw	r2,-24512(gp)
   11f44:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   11f48:	d0a81017 	ldw	r2,-24512(gp)
   11f4c:	10000326 	beq	r2,zero,11f5c <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   11f50:	d0a81017 	ldw	r2,-24512(gp)
   11f54:	10800117 	ldw	r2,4(r2)
   11f58:	d0a81015 	stw	r2,-24512(gp)
   11f5c:	e0bff817 	ldw	r2,-32(fp)
   11f60:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11f64:	e0bff917 	ldw	r2,-28(fp)
   11f68:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   11f6c:	e0bffa17 	ldw	r2,-24(fp)
   11f70:	1000051e 	bne	r2,zero,11f88 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
   11f74:	e0bfff17 	ldw	r2,-4(fp)
   11f78:	00c01684 	movi	r3,90
   11f7c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11f80:	0005883a 	mov	r2,zero
   11f84:	00002c06 	br	12038 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   11f88:	e0bffc17 	ldw	r2,-16(fp)
   11f8c:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   11f90:	e0fffc17 	ldw	r3,-16(fp)
   11f94:	e0bffe17 	ldw	r2,-8(fp)
   11f98:	1885883a 	add	r2,r3,r2
   11f9c:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   11fa0:	e03ff715 	stw	zero,-36(fp)
   11fa4:	00000c06 	br	11fd8 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   11fa8:	e0bff617 	ldw	r2,-40(fp)
   11fac:	e0fff517 	ldw	r3,-44(fp)
   11fb0:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   11fb4:	e0bff517 	ldw	r2,-44(fp)
   11fb8:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   11fbc:	e0fff517 	ldw	r3,-44(fp)
   11fc0:	e0bffe17 	ldw	r2,-8(fp)
   11fc4:	1885883a 	add	r2,r3,r2
   11fc8:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   11fcc:	e0bff717 	ldw	r2,-36(fp)
   11fd0:	10800044 	addi	r2,r2,1
   11fd4:	e0bff715 	stw	r2,-36(fp)
   11fd8:	e0bffd17 	ldw	r2,-12(fp)
   11fdc:	10bfffc4 	addi	r2,r2,-1
   11fe0:	e0fff717 	ldw	r3,-36(fp)
   11fe4:	18bff036 	bltu	r3,r2,11fa8 <OSMemCreate+0x134>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   11fe8:	e0bff617 	ldw	r2,-40(fp)
   11fec:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   11ff0:	e0bffa17 	ldw	r2,-24(fp)
   11ff4:	e0fffc17 	ldw	r3,-16(fp)
   11ff8:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   11ffc:	e0bffa17 	ldw	r2,-24(fp)
   12000:	e0fffc17 	ldw	r3,-16(fp)
   12004:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   12008:	e0bffa17 	ldw	r2,-24(fp)
   1200c:	e0fffd17 	ldw	r3,-12(fp)
   12010:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   12014:	e0bffa17 	ldw	r2,-24(fp)
   12018:	e0fffd17 	ldw	r3,-12(fp)
   1201c:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   12020:	e0bffa17 	ldw	r2,-24(fp)
   12024:	e0fffe17 	ldw	r3,-8(fp)
   12028:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   1202c:	e0bfff17 	ldw	r2,-4(fp)
   12030:	10000005 	stb	zero,0(r2)
    return (pmem);
   12034:	e0bffa17 	ldw	r2,-24(fp)
}
   12038:	e037883a 	mov	sp,fp
   1203c:	df000017 	ldw	fp,0(sp)
   12040:	dec00104 	addi	sp,sp,4
   12044:	f800283a 	ret

00012048 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   12048:	defff804 	addi	sp,sp,-32
   1204c:	df000715 	stw	fp,28(sp)
   12050:	df000704 	addi	fp,sp,28
   12054:	e13ffe15 	stw	r4,-8(fp)
   12058:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1205c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   12060:	e0bfff17 	ldw	r2,-4(fp)
   12064:	1000021e 	bne	r2,zero,12070 <OSMemGet+0x28>
        return ((void *)0);
   12068:	0005883a 	mov	r2,zero
   1206c:	00002e06 	br	12128 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   12070:	e0bffe17 	ldw	r2,-8(fp)
   12074:	1000051e 	bne	r2,zero,1208c <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   12078:	e0bfff17 	ldw	r2,-4(fp)
   1207c:	00c01804 	movi	r3,96
   12080:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12084:	0005883a 	mov	r2,zero
   12088:	00002706 	br	12128 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1208c:	0005303a 	rdctl	r2,status
   12090:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12094:	e0fffd17 	ldw	r3,-12(fp)
   12098:	00bfff84 	movi	r2,-2
   1209c:	1884703a 	and	r2,r3,r2
   120a0:	1001703a 	wrctl	status,r2
  
  return context;
   120a4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   120a8:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   120ac:	e0bffe17 	ldw	r2,-8(fp)
   120b0:	10800417 	ldw	r2,16(r2)
   120b4:	10001426 	beq	r2,zero,12108 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   120b8:	e0bffe17 	ldw	r2,-8(fp)
   120bc:	10800117 	ldw	r2,4(r2)
   120c0:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   120c4:	e0bffb17 	ldw	r2,-20(fp)
   120c8:	10c00017 	ldw	r3,0(r2)
   120cc:	e0bffe17 	ldw	r2,-8(fp)
   120d0:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   120d4:	e0bffe17 	ldw	r2,-8(fp)
   120d8:	10800417 	ldw	r2,16(r2)
   120dc:	10ffffc4 	addi	r3,r2,-1
   120e0:	e0bffe17 	ldw	r2,-8(fp)
   120e4:	10c00415 	stw	r3,16(r2)
   120e8:	e0bff917 	ldw	r2,-28(fp)
   120ec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   120f0:	e0bffa17 	ldw	r2,-24(fp)
   120f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   120f8:	e0bfff17 	ldw	r2,-4(fp)
   120fc:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   12100:	e0bffb17 	ldw	r2,-20(fp)
   12104:	00000806 	br	12128 <OSMemGet+0xe0>
   12108:	e0bff917 	ldw	r2,-28(fp)
   1210c:	e0bffc15 	stw	r2,-16(fp)
   12110:	e0bffc17 	ldw	r2,-16(fp)
   12114:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   12118:	e0bfff17 	ldw	r2,-4(fp)
   1211c:	00c01744 	movi	r3,93
   12120:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   12124:	0005883a 	mov	r2,zero
}
   12128:	e037883a 	mov	sp,fp
   1212c:	df000017 	ldw	fp,0(sp)
   12130:	dec00104 	addi	sp,sp,4
   12134:	f800283a 	ret

00012138 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   12138:	defff704 	addi	sp,sp,-36
   1213c:	dfc00815 	stw	ra,32(sp)
   12140:	df000715 	stw	fp,28(sp)
   12144:	df000704 	addi	fp,sp,28
   12148:	e13ffd15 	stw	r4,-12(fp)
   1214c:	e17ffe15 	stw	r5,-8(fp)
   12150:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12154:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   12158:	e0bfff17 	ldw	r2,-4(fp)
   1215c:	1000021e 	bne	r2,zero,12168 <OSMemNameGet+0x30>
        return (0);
   12160:	0005883a 	mov	r2,zero
   12164:	00002b06 	br	12214 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   12168:	e0bffd17 	ldw	r2,-12(fp)
   1216c:	1000051e 	bne	r2,zero,12184 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   12170:	e0bfff17 	ldw	r2,-4(fp)
   12174:	00c01804 	movi	r3,96
   12178:	10c00005 	stb	r3,0(r2)
        return (0);
   1217c:	0005883a 	mov	r2,zero
   12180:	00002406 	br	12214 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   12184:	e0bffe17 	ldw	r2,-8(fp)
   12188:	1000051e 	bne	r2,zero,121a0 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   1218c:	e0bfff17 	ldw	r2,-4(fp)
   12190:	00c00304 	movi	r3,12
   12194:	10c00005 	stb	r3,0(r2)
        return (0);
   12198:	0005883a 	mov	r2,zero
   1219c:	00001d06 	br	12214 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   121a0:	d0a81503 	ldbu	r2,-24492(gp)
   121a4:	10803fcc 	andi	r2,r2,255
   121a8:	10000526 	beq	r2,zero,121c0 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   121ac:	e0bfff17 	ldw	r2,-4(fp)
   121b0:	00c00444 	movi	r3,17
   121b4:	10c00005 	stb	r3,0(r2)
        return (0);
   121b8:	0005883a 	mov	r2,zero
   121bc:	00001506 	br	12214 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   121c0:	0005303a 	rdctl	r2,status
   121c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   121c8:	e0fffb17 	ldw	r3,-20(fp)
   121cc:	00bfff84 	movi	r2,-2
   121d0:	1884703a 	and	r2,r3,r2
   121d4:	1001703a 	wrctl	status,r2
  
  return context;
   121d8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   121dc:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   121e0:	e0bffd17 	ldw	r2,-12(fp)
   121e4:	10800504 	addi	r2,r2,20
   121e8:	100b883a 	mov	r5,r2
   121ec:	e13ffe17 	ldw	r4,-8(fp)
   121f0:	00100300 	call	10030 <OS_StrCopy>
   121f4:	e0bffa05 	stb	r2,-24(fp)
   121f8:	e0bff917 	ldw	r2,-28(fp)
   121fc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12200:	e0bffc17 	ldw	r2,-16(fp)
   12204:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   12208:	e0bfff17 	ldw	r2,-4(fp)
   1220c:	10000005 	stb	zero,0(r2)
    return (len);
   12210:	e0bffa03 	ldbu	r2,-24(fp)
}
   12214:	e037883a 	mov	sp,fp
   12218:	dfc00117 	ldw	ra,4(sp)
   1221c:	df000017 	ldw	fp,0(sp)
   12220:	dec00204 	addi	sp,sp,8
   12224:	f800283a 	ret

00012228 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   12228:	defff604 	addi	sp,sp,-40
   1222c:	dfc00915 	stw	ra,36(sp)
   12230:	df000815 	stw	fp,32(sp)
   12234:	df000804 	addi	fp,sp,32
   12238:	e13ffd15 	stw	r4,-12(fp)
   1223c:	e17ffe15 	stw	r5,-8(fp)
   12240:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12244:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   12248:	e0bfff17 	ldw	r2,-4(fp)
   1224c:	10003526 	beq	r2,zero,12324 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   12250:	e0bffd17 	ldw	r2,-12(fp)
   12254:	1000041e 	bne	r2,zero,12268 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   12258:	e0bfff17 	ldw	r2,-4(fp)
   1225c:	00c01804 	movi	r3,96
   12260:	10c00005 	stb	r3,0(r2)
        return;
   12264:	00003006 	br	12328 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   12268:	e0bffe17 	ldw	r2,-8(fp)
   1226c:	1000041e 	bne	r2,zero,12280 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   12270:	e0bfff17 	ldw	r2,-4(fp)
   12274:	00c00304 	movi	r3,12
   12278:	10c00005 	stb	r3,0(r2)
        return;
   1227c:	00002a06 	br	12328 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   12280:	d0a81503 	ldbu	r2,-24492(gp)
   12284:	10803fcc 	andi	r2,r2,255
   12288:	10000426 	beq	r2,zero,1229c <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   1228c:	e0bfff17 	ldw	r2,-4(fp)
   12290:	00c00484 	movi	r3,18
   12294:	10c00005 	stb	r3,0(r2)
        return;
   12298:	00002306 	br	12328 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1229c:	0005303a 	rdctl	r2,status
   122a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   122a4:	e0fffc17 	ldw	r3,-16(fp)
   122a8:	00bfff84 	movi	r2,-2
   122ac:	1884703a 	and	r2,r3,r2
   122b0:	1001703a 	wrctl	status,r2
  
  return context;
   122b4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   122b8:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   122bc:	e13ffe17 	ldw	r4,-8(fp)
   122c0:	00100a40 	call	100a4 <OS_StrLen>
   122c4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   122c8:	e0bffa03 	ldbu	r2,-24(fp)
   122cc:	10800830 	cmpltui	r2,r2,32
   122d0:	1000081e 	bne	r2,zero,122f4 <OSMemNameSet+0xcc>
   122d4:	e0bff817 	ldw	r2,-32(fp)
   122d8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   122dc:	e0bff917 	ldw	r2,-28(fp)
   122e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   122e4:	e0bfff17 	ldw	r2,-4(fp)
   122e8:	00c018c4 	movi	r3,99
   122ec:	10c00005 	stb	r3,0(r2)
        return;
   122f0:	00000d06 	br	12328 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   122f4:	e0bffd17 	ldw	r2,-12(fp)
   122f8:	10800504 	addi	r2,r2,20
   122fc:	e17ffe17 	ldw	r5,-8(fp)
   12300:	1009883a 	mov	r4,r2
   12304:	00100300 	call	10030 <OS_StrCopy>
   12308:	e0bff817 	ldw	r2,-32(fp)
   1230c:	e0bffb15 	stw	r2,-20(fp)
   12310:	e0bffb17 	ldw	r2,-20(fp)
   12314:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   12318:	e0bfff17 	ldw	r2,-4(fp)
   1231c:	10000005 	stb	zero,0(r2)
   12320:	00000106 	br	12328 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   12324:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   12328:	e037883a 	mov	sp,fp
   1232c:	dfc00117 	ldw	ra,4(sp)
   12330:	df000017 	ldw	fp,0(sp)
   12334:	dec00204 	addi	sp,sp,8
   12338:	f800283a 	ret

0001233c <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   1233c:	defff904 	addi	sp,sp,-28
   12340:	df000615 	stw	fp,24(sp)
   12344:	df000604 	addi	fp,sp,24
   12348:	e13ffe15 	stw	r4,-8(fp)
   1234c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12350:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   12354:	e0bffe17 	ldw	r2,-8(fp)
   12358:	1000021e 	bne	r2,zero,12364 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   1235c:	00801804 	movi	r2,96
   12360:	00002806 	br	12404 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   12364:	e0bfff17 	ldw	r2,-4(fp)
   12368:	1000021e 	bne	r2,zero,12374 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   1236c:	008017c4 	movi	r2,95
   12370:	00002406 	br	12404 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12374:	0005303a 	rdctl	r2,status
   12378:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1237c:	e0fffd17 	ldw	r3,-12(fp)
   12380:	00bfff84 	movi	r2,-2
   12384:	1884703a 	and	r2,r3,r2
   12388:	1001703a 	wrctl	status,r2
  
  return context;
   1238c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   12390:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   12394:	e0bffe17 	ldw	r2,-8(fp)
   12398:	10c00417 	ldw	r3,16(r2)
   1239c:	e0bffe17 	ldw	r2,-8(fp)
   123a0:	10800317 	ldw	r2,12(r2)
   123a4:	18800636 	bltu	r3,r2,123c0 <OSMemPut+0x84>
   123a8:	e0bffa17 	ldw	r2,-24(fp)
   123ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   123b0:	e0bffb17 	ldw	r2,-20(fp)
   123b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   123b8:	00801784 	movi	r2,94
   123bc:	00001106 	br	12404 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   123c0:	e0bffe17 	ldw	r2,-8(fp)
   123c4:	10c00117 	ldw	r3,4(r2)
   123c8:	e0bfff17 	ldw	r2,-4(fp)
   123cc:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   123d0:	e0bffe17 	ldw	r2,-8(fp)
   123d4:	e0ffff17 	ldw	r3,-4(fp)
   123d8:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   123dc:	e0bffe17 	ldw	r2,-8(fp)
   123e0:	10800417 	ldw	r2,16(r2)
   123e4:	10c00044 	addi	r3,r2,1
   123e8:	e0bffe17 	ldw	r2,-8(fp)
   123ec:	10c00415 	stw	r3,16(r2)
   123f0:	e0bffa17 	ldw	r2,-24(fp)
   123f4:	e0bffc15 	stw	r2,-16(fp)
   123f8:	e0bffc17 	ldw	r2,-16(fp)
   123fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   12400:	0005883a 	mov	r2,zero
}
   12404:	e037883a 	mov	sp,fp
   12408:	df000017 	ldw	fp,0(sp)
   1240c:	dec00104 	addi	sp,sp,4
   12410:	f800283a 	ret

00012414 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   12414:	defffa04 	addi	sp,sp,-24
   12418:	df000515 	stw	fp,20(sp)
   1241c:	df000504 	addi	fp,sp,20
   12420:	e13ffe15 	stw	r4,-8(fp)
   12424:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12428:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   1242c:	e0bffe17 	ldw	r2,-8(fp)
   12430:	1000021e 	bne	r2,zero,1243c <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   12434:	00801804 	movi	r2,96
   12438:	00002c06 	br	124ec <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   1243c:	e0bfff17 	ldw	r2,-4(fp)
   12440:	1000021e 	bne	r2,zero,1244c <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   12444:	00801844 	movi	r2,97
   12448:	00002806 	br	124ec <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1244c:	0005303a 	rdctl	r2,status
   12450:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12454:	e0fffc17 	ldw	r3,-16(fp)
   12458:	00bfff84 	movi	r2,-2
   1245c:	1884703a 	and	r2,r3,r2
   12460:	1001703a 	wrctl	status,r2
  
  return context;
   12464:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   12468:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   1246c:	e0bffe17 	ldw	r2,-8(fp)
   12470:	10c00017 	ldw	r3,0(r2)
   12474:	e0bfff17 	ldw	r2,-4(fp)
   12478:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   1247c:	e0bffe17 	ldw	r2,-8(fp)
   12480:	10c00117 	ldw	r3,4(r2)
   12484:	e0bfff17 	ldw	r2,-4(fp)
   12488:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   1248c:	e0bffe17 	ldw	r2,-8(fp)
   12490:	10c00217 	ldw	r3,8(r2)
   12494:	e0bfff17 	ldw	r2,-4(fp)
   12498:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   1249c:	e0bffe17 	ldw	r2,-8(fp)
   124a0:	10c00317 	ldw	r3,12(r2)
   124a4:	e0bfff17 	ldw	r2,-4(fp)
   124a8:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   124ac:	e0bffe17 	ldw	r2,-8(fp)
   124b0:	10c00417 	ldw	r3,16(r2)
   124b4:	e0bfff17 	ldw	r2,-4(fp)
   124b8:	10c00415 	stw	r3,16(r2)
   124bc:	e0bffb17 	ldw	r2,-20(fp)
   124c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   124c4:	e0bffd17 	ldw	r2,-12(fp)
   124c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   124cc:	e0bfff17 	ldw	r2,-4(fp)
   124d0:	10c00317 	ldw	r3,12(r2)
   124d4:	e0bfff17 	ldw	r2,-4(fp)
   124d8:	10800417 	ldw	r2,16(r2)
   124dc:	1887c83a 	sub	r3,r3,r2
   124e0:	e0bfff17 	ldw	r2,-4(fp)
   124e4:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   124e8:	0005883a 	mov	r2,zero
}
   124ec:	e037883a 	mov	sp,fp
   124f0:	df000017 	ldw	fp,0(sp)
   124f4:	dec00104 	addi	sp,sp,4
   124f8:	f800283a 	ret

000124fc <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   124fc:	defffc04 	addi	sp,sp,-16
   12500:	dfc00315 	stw	ra,12(sp)
   12504:	df000215 	stw	fp,8(sp)
   12508:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   1250c:	01430c04 	movi	r5,3120
   12510:	010000b4 	movhi	r4,2
   12514:	210a7e04 	addi	r4,r4,10744
   12518:	000fe300 	call	fe30 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   1251c:	008000b4 	movhi	r2,2
   12520:	108a7e04 	addi	r2,r2,10744
   12524:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   12528:	e03fff0d 	sth	zero,-4(fp)
   1252c:	00001306 	br	1257c <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   12530:	e0bfff0b 	ldhu	r2,-4(fp)
   12534:	10800044 	addi	r2,r2,1
   12538:	10c00d24 	muli	r3,r2,52
   1253c:	008000b4 	movhi	r2,2
   12540:	108a7e04 	addi	r2,r2,10744
   12544:	1887883a 	add	r3,r3,r2
   12548:	e0bffe17 	ldw	r2,-8(fp)
   1254c:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   12550:	e0bffe17 	ldw	r2,-8(fp)
   12554:	00c00fc4 	movi	r3,63
   12558:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   1255c:	e0bffe17 	ldw	r2,-8(fp)
   12560:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   12564:	e0bffe17 	ldw	r2,-8(fp)
   12568:	10800d04 	addi	r2,r2,52
   1256c:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   12570:	e0bfff0b 	ldhu	r2,-4(fp)
   12574:	10800044 	addi	r2,r2,1
   12578:	e0bfff0d 	sth	r2,-4(fp)
   1257c:	e0bfff0b 	ldhu	r2,-4(fp)
   12580:	10800ef0 	cmpltui	r2,r2,59
   12584:	103fea1e 	bne	r2,zero,12530 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   12588:	e0bffe17 	ldw	r2,-8(fp)
   1258c:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   12590:	e0bffe17 	ldw	r2,-8(fp)
   12594:	00c00fc4 	movi	r3,63
   12598:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   1259c:	e0bffe17 	ldw	r2,-8(fp)
   125a0:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   125a4:	008000b4 	movhi	r2,2
   125a8:	108a7e04 	addi	r2,r2,10744
   125ac:	d0a81015 	stw	r2,-24512(gp)
#endif
}
   125b0:	0001883a 	nop
   125b4:	e037883a 	mov	sp,fp
   125b8:	dfc00117 	ldw	ra,4(sp)
   125bc:	df000017 	ldw	fp,0(sp)
   125c0:	dec00204 	addi	sp,sp,8
   125c4:	f800283a 	ret

000125c8 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   125c8:	defff804 	addi	sp,sp,-32
   125cc:	df000715 	stw	fp,28(sp)
   125d0:	df000704 	addi	fp,sp,28
   125d4:	e13ffe15 	stw	r4,-8(fp)
   125d8:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   125dc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   125e0:	e0bfff17 	ldw	r2,-4(fp)
   125e4:	1000021e 	bne	r2,zero,125f0 <OSQAccept+0x28>
        return ((void *)0);
   125e8:	0005883a 	mov	r2,zero
   125ec:	00004206 	br	126f8 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   125f0:	e0bffe17 	ldw	r2,-8(fp)
   125f4:	1000051e 	bne	r2,zero,1260c <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   125f8:	e0bfff17 	ldw	r2,-4(fp)
   125fc:	00c00104 	movi	r3,4
   12600:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12604:	0005883a 	mov	r2,zero
   12608:	00003b06 	br	126f8 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   1260c:	e0bffe17 	ldw	r2,-8(fp)
   12610:	10800003 	ldbu	r2,0(r2)
   12614:	10803fcc 	andi	r2,r2,255
   12618:	108000a0 	cmpeqi	r2,r2,2
   1261c:	1000051e 	bne	r2,zero,12634 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   12620:	e0bfff17 	ldw	r2,-4(fp)
   12624:	00c00044 	movi	r3,1
   12628:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1262c:	0005883a 	mov	r2,zero
   12630:	00003106 	br	126f8 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12634:	0005303a 	rdctl	r2,status
   12638:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1263c:	e0fffd17 	ldw	r3,-12(fp)
   12640:	00bfff84 	movi	r2,-2
   12644:	1884703a 	and	r2,r3,r2
   12648:	1001703a 	wrctl	status,r2
  
  return context;
   1264c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   12650:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   12654:	e0bffe17 	ldw	r2,-8(fp)
   12658:	10800117 	ldw	r2,4(r2)
   1265c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   12660:	e0bffc17 	ldw	r2,-16(fp)
   12664:	1080058b 	ldhu	r2,22(r2)
   12668:	10bfffcc 	andi	r2,r2,65535
   1266c:	10001926 	beq	r2,zero,126d4 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   12670:	e0bffc17 	ldw	r2,-16(fp)
   12674:	10800417 	ldw	r2,16(r2)
   12678:	11000104 	addi	r4,r2,4
   1267c:	e0fffc17 	ldw	r3,-16(fp)
   12680:	19000415 	stw	r4,16(r3)
   12684:	10800017 	ldw	r2,0(r2)
   12688:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   1268c:	e0bffc17 	ldw	r2,-16(fp)
   12690:	1080058b 	ldhu	r2,22(r2)
   12694:	10bfffc4 	addi	r2,r2,-1
   12698:	1007883a 	mov	r3,r2
   1269c:	e0bffc17 	ldw	r2,-16(fp)
   126a0:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   126a4:	e0bffc17 	ldw	r2,-16(fp)
   126a8:	10c00417 	ldw	r3,16(r2)
   126ac:	e0bffc17 	ldw	r2,-16(fp)
   126b0:	10800217 	ldw	r2,8(r2)
   126b4:	1880041e 	bne	r3,r2,126c8 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   126b8:	e0bffc17 	ldw	r2,-16(fp)
   126bc:	10c00117 	ldw	r3,4(r2)
   126c0:	e0bffc17 	ldw	r2,-16(fp)
   126c4:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   126c8:	e0bfff17 	ldw	r2,-4(fp)
   126cc:	10000005 	stb	zero,0(r2)
   126d0:	00000406 	br	126e4 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   126d4:	e0bfff17 	ldw	r2,-4(fp)
   126d8:	00c007c4 	movi	r3,31
   126dc:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   126e0:	e03ff915 	stw	zero,-28(fp)
   126e4:	e0bffa17 	ldw	r2,-24(fp)
   126e8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   126ec:	e0bffb17 	ldw	r2,-20(fp)
   126f0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   126f4:	e0bff917 	ldw	r2,-28(fp)
}
   126f8:	e037883a 	mov	sp,fp
   126fc:	df000017 	ldw	fp,0(sp)
   12700:	dec00104 	addi	sp,sp,4
   12704:	f800283a 	ret

00012708 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   12708:	defff404 	addi	sp,sp,-48
   1270c:	dfc00b15 	stw	ra,44(sp)
   12710:	df000a15 	stw	fp,40(sp)
   12714:	df000a04 	addi	fp,sp,40
   12718:	e13ffe15 	stw	r4,-8(fp)
   1271c:	2805883a 	mov	r2,r5
   12720:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12724:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   12728:	d0a81503 	ldbu	r2,-24492(gp)
   1272c:	10803fcc 	andi	r2,r2,255
   12730:	10000226 	beq	r2,zero,1273c <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   12734:	0005883a 	mov	r2,zero
   12738:	00005906 	br	128a0 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1273c:	0005303a 	rdctl	r2,status
   12740:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12744:	e0fffd17 	ldw	r3,-12(fp)
   12748:	00bfff84 	movi	r2,-2
   1274c:	1884703a 	and	r2,r3,r2
   12750:	1001703a 	wrctl	status,r2
  
  return context;
   12754:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   12758:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   1275c:	d0a81417 	ldw	r2,-24496(gp)
   12760:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   12764:	d0a81417 	ldw	r2,-24496(gp)
   12768:	10000326 	beq	r2,zero,12778 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   1276c:	d0a81417 	ldw	r2,-24496(gp)
   12770:	10800117 	ldw	r2,4(r2)
   12774:	d0a81415 	stw	r2,-24496(gp)
   12778:	e0bff717 	ldw	r2,-36(fp)
   1277c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12780:	e0bff817 	ldw	r2,-32(fp)
   12784:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   12788:	e0bff617 	ldw	r2,-40(fp)
   1278c:	10004326 	beq	r2,zero,1289c <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12790:	0005303a 	rdctl	r2,status
   12794:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12798:	e0fff917 	ldw	r3,-28(fp)
   1279c:	00bfff84 	movi	r2,-2
   127a0:	1884703a 	and	r2,r3,r2
   127a4:	1001703a 	wrctl	status,r2
  
  return context;
   127a8:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
   127ac:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   127b0:	d0a81217 	ldw	r2,-24504(gp)
   127b4:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   127b8:	e0bffb17 	ldw	r2,-20(fp)
   127bc:	10002d26 	beq	r2,zero,12874 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   127c0:	d0a81217 	ldw	r2,-24504(gp)
   127c4:	10800017 	ldw	r2,0(r2)
   127c8:	d0a81215 	stw	r2,-24504(gp)
   127cc:	e0bff717 	ldw	r2,-36(fp)
   127d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   127d4:	e0bffa17 	ldw	r2,-24(fp)
   127d8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   127dc:	e0bffb17 	ldw	r2,-20(fp)
   127e0:	e0fffe17 	ldw	r3,-8(fp)
   127e4:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   127e8:	e0bfff0b 	ldhu	r2,-4(fp)
   127ec:	1085883a 	add	r2,r2,r2
   127f0:	1085883a 	add	r2,r2,r2
   127f4:	1007883a 	mov	r3,r2
   127f8:	e0bffe17 	ldw	r2,-8(fp)
   127fc:	10c7883a 	add	r3,r2,r3
   12800:	e0bffb17 	ldw	r2,-20(fp)
   12804:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   12808:	e0bffb17 	ldw	r2,-20(fp)
   1280c:	e0fffe17 	ldw	r3,-8(fp)
   12810:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   12814:	e0bffb17 	ldw	r2,-20(fp)
   12818:	e0fffe17 	ldw	r3,-8(fp)
   1281c:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   12820:	e0bffb17 	ldw	r2,-20(fp)
   12824:	e0ffff0b 	ldhu	r3,-4(fp)
   12828:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   1282c:	e0bffb17 	ldw	r2,-20(fp)
   12830:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   12834:	e0bff617 	ldw	r2,-40(fp)
   12838:	00c00084 	movi	r3,2
   1283c:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   12840:	e0bff617 	ldw	r2,-40(fp)
   12844:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   12848:	e0bff617 	ldw	r2,-40(fp)
   1284c:	e0fffb17 	ldw	r3,-20(fp)
   12850:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   12854:	e0bff617 	ldw	r2,-40(fp)
   12858:	00c00fc4 	movi	r3,63
   1285c:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   12860:	e0bff617 	ldw	r2,-40(fp)
   12864:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   12868:	e13ff617 	ldw	r4,-40(fp)
   1286c:	000fa500 	call	fa50 <OS_EventWaitListInit>
   12870:	00000a06 	br	1289c <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   12874:	d0e81417 	ldw	r3,-24496(gp)
   12878:	e0bff617 	ldw	r2,-40(fp)
   1287c:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   12880:	e0bff617 	ldw	r2,-40(fp)
   12884:	d0a81415 	stw	r2,-24496(gp)
   12888:	e0bff717 	ldw	r2,-36(fp)
   1288c:	e0bffc15 	stw	r2,-16(fp)
   12890:	e0bffc17 	ldw	r2,-16(fp)
   12894:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   12898:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   1289c:	e0bff617 	ldw	r2,-40(fp)
}
   128a0:	e037883a 	mov	sp,fp
   128a4:	dfc00117 	ldw	ra,4(sp)
   128a8:	df000017 	ldw	fp,0(sp)
   128ac:	dec00204 	addi	sp,sp,8
   128b0:	f800283a 	ret

000128b4 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   128b4:	defff204 	addi	sp,sp,-56
   128b8:	dfc00d15 	stw	ra,52(sp)
   128bc:	df000c15 	stw	fp,48(sp)
   128c0:	df000c04 	addi	fp,sp,48
   128c4:	e13ffd15 	stw	r4,-12(fp)
   128c8:	2805883a 	mov	r2,r5
   128cc:	e1bfff15 	stw	r6,-4(fp)
   128d0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   128d4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   128d8:	e0bfff17 	ldw	r2,-4(fp)
   128dc:	1000021e 	bne	r2,zero,128e8 <OSQDel+0x34>
        return (pevent);
   128e0:	e0bffd17 	ldw	r2,-12(fp)
   128e4:	00008e06 	br	12b20 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   128e8:	e0bffd17 	ldw	r2,-12(fp)
   128ec:	1000051e 	bne	r2,zero,12904 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   128f0:	e0bfff17 	ldw	r2,-4(fp)
   128f4:	00c00104 	movi	r3,4
   128f8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   128fc:	e0bffd17 	ldw	r2,-12(fp)
   12900:	00008706 	br	12b20 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   12904:	e0bffd17 	ldw	r2,-12(fp)
   12908:	10800003 	ldbu	r2,0(r2)
   1290c:	10803fcc 	andi	r2,r2,255
   12910:	108000a0 	cmpeqi	r2,r2,2
   12914:	1000051e 	bne	r2,zero,1292c <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   12918:	e0bfff17 	ldw	r2,-4(fp)
   1291c:	00c00044 	movi	r3,1
   12920:	10c00005 	stb	r3,0(r2)
        return (pevent);
   12924:	e0bffd17 	ldw	r2,-12(fp)
   12928:	00007d06 	br	12b20 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1292c:	d0a81503 	ldbu	r2,-24492(gp)
   12930:	10803fcc 	andi	r2,r2,255
   12934:	10000526 	beq	r2,zero,1294c <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   12938:	e0bfff17 	ldw	r2,-4(fp)
   1293c:	00c003c4 	movi	r3,15
   12940:	10c00005 	stb	r3,0(r2)
        return (pevent);
   12944:	e0bffd17 	ldw	r2,-12(fp)
   12948:	00007506 	br	12b20 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1294c:	0005303a 	rdctl	r2,status
   12950:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12954:	e0fffc17 	ldw	r3,-16(fp)
   12958:	00bfff84 	movi	r2,-2
   1295c:	1884703a 	and	r2,r3,r2
   12960:	1001703a 	wrctl	status,r2
  
  return context;
   12964:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12968:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   1296c:	e0bffd17 	ldw	r2,-12(fp)
   12970:	10800283 	ldbu	r2,10(r2)
   12974:	10803fcc 	andi	r2,r2,255
   12978:	10000326 	beq	r2,zero,12988 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1297c:	00800044 	movi	r2,1
   12980:	e0bff405 	stb	r2,-48(fp)
   12984:	00000106 	br	1298c <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   12988:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   1298c:	e0bffe03 	ldbu	r2,-8(fp)
   12990:	10000326 	beq	r2,zero,129a0 <OSQDel+0xec>
   12994:	10800060 	cmpeqi	r2,r2,1
   12998:	1000301e 	bne	r2,zero,12a5c <OSQDel+0x1a8>
   1299c:	00005506 	br	12af4 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   129a0:	e0bff403 	ldbu	r2,-48(fp)
   129a4:	10001e1e 	bne	r2,zero,12a20 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   129a8:	e0bffd17 	ldw	r2,-12(fp)
   129ac:	00c00fc4 	movi	r3,63
   129b0:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   129b4:	e0bffd17 	ldw	r2,-12(fp)
   129b8:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   129bc:	e0bffd17 	ldw	r2,-12(fp)
   129c0:	10800117 	ldw	r2,4(r2)
   129c4:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   129c8:	d0e81217 	ldw	r3,-24504(gp)
   129cc:	e0bff817 	ldw	r2,-32(fp)
   129d0:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   129d4:	e0bff817 	ldw	r2,-32(fp)
   129d8:	d0a81215 	stw	r2,-24504(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   129dc:	e0bffd17 	ldw	r2,-12(fp)
   129e0:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   129e4:	d0e81417 	ldw	r3,-24496(gp)
   129e8:	e0bffd17 	ldw	r2,-12(fp)
   129ec:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   129f0:	e0bffd17 	ldw	r2,-12(fp)
   129f4:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   129f8:	e0bffd17 	ldw	r2,-12(fp)
   129fc:	d0a81415 	stw	r2,-24496(gp)
   12a00:	e0bff617 	ldw	r2,-40(fp)
   12a04:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12a08:	e0bff717 	ldw	r2,-36(fp)
   12a0c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   12a10:	e0bfff17 	ldw	r2,-4(fp)
   12a14:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   12a18:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   12a1c:	00003f06 	br	12b1c <OSQDel+0x268>
   12a20:	e0bff617 	ldw	r2,-40(fp)
   12a24:	e0bff915 	stw	r2,-28(fp)
   12a28:	e0bff917 	ldw	r2,-28(fp)
   12a2c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   12a30:	e0bfff17 	ldw	r2,-4(fp)
   12a34:	00c01244 	movi	r3,73
   12a38:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   12a3c:	e0bffd17 	ldw	r2,-12(fp)
   12a40:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   12a44:	00003506 	br	12b1c <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   12a48:	000f883a 	mov	r7,zero
   12a4c:	01800104 	movi	r6,4
   12a50:	000b883a 	mov	r5,zero
   12a54:	e13ffd17 	ldw	r4,-12(fp)
   12a58:	000f4a00 	call	f4a0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   12a5c:	e0bffd17 	ldw	r2,-12(fp)
   12a60:	10800283 	ldbu	r2,10(r2)
   12a64:	10803fcc 	andi	r2,r2,255
   12a68:	103ff71e 	bne	r2,zero,12a48 <OSQDel+0x194>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   12a6c:	e0bffd17 	ldw	r2,-12(fp)
   12a70:	00c00fc4 	movi	r3,63
   12a74:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   12a78:	e0bffd17 	ldw	r2,-12(fp)
   12a7c:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   12a80:	e0bffd17 	ldw	r2,-12(fp)
   12a84:	10800117 	ldw	r2,4(r2)
   12a88:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   12a8c:	d0e81217 	ldw	r3,-24504(gp)
   12a90:	e0bff817 	ldw	r2,-32(fp)
   12a94:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   12a98:	e0bff817 	ldw	r2,-32(fp)
   12a9c:	d0a81215 	stw	r2,-24504(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   12aa0:	e0bffd17 	ldw	r2,-12(fp)
   12aa4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   12aa8:	d0e81417 	ldw	r3,-24496(gp)
   12aac:	e0bffd17 	ldw	r2,-12(fp)
   12ab0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   12ab4:	e0bffd17 	ldw	r2,-12(fp)
   12ab8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   12abc:	e0bffd17 	ldw	r2,-12(fp)
   12ac0:	d0a81415 	stw	r2,-24496(gp)
   12ac4:	e0bff617 	ldw	r2,-40(fp)
   12ac8:	e0bffa15 	stw	r2,-24(fp)
   12acc:	e0bffa17 	ldw	r2,-24(fp)
   12ad0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   12ad4:	e0bff403 	ldbu	r2,-48(fp)
   12ad8:	10800058 	cmpnei	r2,r2,1
   12adc:	1000011e 	bne	r2,zero,12ae4 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   12ae0:	000feec0 	call	feec <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   12ae4:	e0bfff17 	ldw	r2,-4(fp)
   12ae8:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   12aec:	e03ff515 	stw	zero,-44(fp)
             break;
   12af0:	00000a06 	br	12b1c <OSQDel+0x268>
   12af4:	e0bff617 	ldw	r2,-40(fp)
   12af8:	e0bffb15 	stw	r2,-20(fp)
   12afc:	e0bffb17 	ldw	r2,-20(fp)
   12b00:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   12b04:	e0bfff17 	ldw	r2,-4(fp)
   12b08:	00c001c4 	movi	r3,7
   12b0c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   12b10:	e0bffd17 	ldw	r2,-12(fp)
   12b14:	e0bff515 	stw	r2,-44(fp)
             break;
   12b18:	0001883a 	nop
    }
    return (pevent_return);
   12b1c:	e0bff517 	ldw	r2,-44(fp)
}
   12b20:	e037883a 	mov	sp,fp
   12b24:	dfc00117 	ldw	ra,4(sp)
   12b28:	df000017 	ldw	fp,0(sp)
   12b2c:	dec00204 	addi	sp,sp,8
   12b30:	f800283a 	ret

00012b34 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   12b34:	defffa04 	addi	sp,sp,-24
   12b38:	df000515 	stw	fp,20(sp)
   12b3c:	df000504 	addi	fp,sp,20
   12b40:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12b44:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12b48:	e0bfff17 	ldw	r2,-4(fp)
   12b4c:	1000021e 	bne	r2,zero,12b58 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   12b50:	00800104 	movi	r2,4
   12b54:	00002106 	br	12bdc <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   12b58:	e0bfff17 	ldw	r2,-4(fp)
   12b5c:	10800003 	ldbu	r2,0(r2)
   12b60:	10803fcc 	andi	r2,r2,255
   12b64:	108000a0 	cmpeqi	r2,r2,2
   12b68:	1000021e 	bne	r2,zero,12b74 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   12b6c:	00800044 	movi	r2,1
   12b70:	00001a06 	br	12bdc <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12b74:	0005303a 	rdctl	r2,status
   12b78:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12b7c:	e0fffd17 	ldw	r3,-12(fp)
   12b80:	00bfff84 	movi	r2,-2
   12b84:	1884703a 	and	r2,r3,r2
   12b88:	1001703a 	wrctl	status,r2
  
  return context;
   12b8c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   12b90:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   12b94:	e0bfff17 	ldw	r2,-4(fp)
   12b98:	10800117 	ldw	r2,4(r2)
   12b9c:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   12ba0:	e0bffc17 	ldw	r2,-16(fp)
   12ba4:	10c00117 	ldw	r3,4(r2)
   12ba8:	e0bffc17 	ldw	r2,-16(fp)
   12bac:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   12bb0:	e0bffc17 	ldw	r2,-16(fp)
   12bb4:	10c00117 	ldw	r3,4(r2)
   12bb8:	e0bffc17 	ldw	r2,-16(fp)
   12bbc:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   12bc0:	e0bffc17 	ldw	r2,-16(fp)
   12bc4:	1000058d 	sth	zero,22(r2)
   12bc8:	e0bffb17 	ldw	r2,-20(fp)
   12bcc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12bd0:	e0bffe17 	ldw	r2,-8(fp)
   12bd4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12bd8:	0005883a 	mov	r2,zero
}
   12bdc:	e037883a 	mov	sp,fp
   12be0:	df000017 	ldw	fp,0(sp)
   12be4:	dec00104 	addi	sp,sp,4
   12be8:	f800283a 	ret

00012bec <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   12bec:	defff304 	addi	sp,sp,-52
   12bf0:	dfc00c15 	stw	ra,48(sp)
   12bf4:	df000b15 	stw	fp,44(sp)
   12bf8:	df000b04 	addi	fp,sp,44
   12bfc:	e13ffd15 	stw	r4,-12(fp)
   12c00:	2805883a 	mov	r2,r5
   12c04:	e1bfff15 	stw	r6,-4(fp)
   12c08:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12c0c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   12c10:	e0bfff17 	ldw	r2,-4(fp)
   12c14:	1000021e 	bne	r2,zero,12c20 <OSQPend+0x34>
        return ((void *)0);
   12c18:	0005883a 	mov	r2,zero
   12c1c:	00009106 	br	12e64 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   12c20:	e0bffd17 	ldw	r2,-12(fp)
   12c24:	1000051e 	bne	r2,zero,12c3c <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   12c28:	e0bfff17 	ldw	r2,-4(fp)
   12c2c:	00c00104 	movi	r3,4
   12c30:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12c34:	0005883a 	mov	r2,zero
   12c38:	00008a06 	br	12e64 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   12c3c:	e0bffd17 	ldw	r2,-12(fp)
   12c40:	10800003 	ldbu	r2,0(r2)
   12c44:	10803fcc 	andi	r2,r2,255
   12c48:	108000a0 	cmpeqi	r2,r2,2
   12c4c:	1000051e 	bne	r2,zero,12c64 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   12c50:	e0bfff17 	ldw	r2,-4(fp)
   12c54:	00c00044 	movi	r3,1
   12c58:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12c5c:	0005883a 	mov	r2,zero
   12c60:	00008006 	br	12e64 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   12c64:	d0a81503 	ldbu	r2,-24492(gp)
   12c68:	10803fcc 	andi	r2,r2,255
   12c6c:	10000526 	beq	r2,zero,12c84 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   12c70:	e0bfff17 	ldw	r2,-4(fp)
   12c74:	00c00084 	movi	r3,2
   12c78:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12c7c:	0005883a 	mov	r2,zero
   12c80:	00007806 	br	12e64 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   12c84:	d0a80703 	ldbu	r2,-24548(gp)
   12c88:	10803fcc 	andi	r2,r2,255
   12c8c:	10000526 	beq	r2,zero,12ca4 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   12c90:	e0bfff17 	ldw	r2,-4(fp)
   12c94:	00c00344 	movi	r3,13
   12c98:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12c9c:	0005883a 	mov	r2,zero
   12ca0:	00007006 	br	12e64 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12ca4:	0005303a 	rdctl	r2,status
   12ca8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12cac:	e0fffc17 	ldw	r3,-16(fp)
   12cb0:	00bfff84 	movi	r2,-2
   12cb4:	1884703a 	and	r2,r3,r2
   12cb8:	1001703a 	wrctl	status,r2
  
  return context;
   12cbc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12cc0:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   12cc4:	e0bffd17 	ldw	r2,-12(fp)
   12cc8:	10800117 	ldw	r2,4(r2)
   12ccc:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   12cd0:	e0bff817 	ldw	r2,-32(fp)
   12cd4:	1080058b 	ldhu	r2,22(r2)
   12cd8:	10bfffcc 	andi	r2,r2,65535
   12cdc:	10001e26 	beq	r2,zero,12d58 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   12ce0:	e0bff817 	ldw	r2,-32(fp)
   12ce4:	10800417 	ldw	r2,16(r2)
   12ce8:	11000104 	addi	r4,r2,4
   12cec:	e0fff817 	ldw	r3,-32(fp)
   12cf0:	19000415 	stw	r4,16(r3)
   12cf4:	10800017 	ldw	r2,0(r2)
   12cf8:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   12cfc:	e0bff817 	ldw	r2,-32(fp)
   12d00:	1080058b 	ldhu	r2,22(r2)
   12d04:	10bfffc4 	addi	r2,r2,-1
   12d08:	1007883a 	mov	r3,r2
   12d0c:	e0bff817 	ldw	r2,-32(fp)
   12d10:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   12d14:	e0bff817 	ldw	r2,-32(fp)
   12d18:	10c00417 	ldw	r3,16(r2)
   12d1c:	e0bff817 	ldw	r2,-32(fp)
   12d20:	10800217 	ldw	r2,8(r2)
   12d24:	1880041e 	bne	r3,r2,12d38 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
   12d28:	e0bff817 	ldw	r2,-32(fp)
   12d2c:	10c00117 	ldw	r3,4(r2)
   12d30:	e0bff817 	ldw	r2,-32(fp)
   12d34:	10c00415 	stw	r3,16(r2)
   12d38:	e0bff617 	ldw	r2,-40(fp)
   12d3c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12d40:	e0bff717 	ldw	r2,-36(fp)
   12d44:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   12d48:	e0bfff17 	ldw	r2,-4(fp)
   12d4c:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   12d50:	e0bff517 	ldw	r2,-44(fp)
   12d54:	00004306 	br	12e64 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   12d58:	d0a81617 	ldw	r2,-24488(gp)
   12d5c:	d0e81617 	ldw	r3,-24488(gp)
   12d60:	18c00c03 	ldbu	r3,48(r3)
   12d64:	18c00114 	ori	r3,r3,4
   12d68:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   12d6c:	d0a81617 	ldw	r2,-24488(gp)
   12d70:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   12d74:	d0a81617 	ldw	r2,-24488(gp)
   12d78:	e0fffe0b 	ldhu	r3,-8(fp)
   12d7c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   12d80:	e13ffd17 	ldw	r4,-12(fp)
   12d84:	000f6380 	call	f638 <OS_EventTaskWait>
   12d88:	e0bff617 	ldw	r2,-40(fp)
   12d8c:	e0bffb15 	stw	r2,-20(fp)
   12d90:	e0bffb17 	ldw	r2,-20(fp)
   12d94:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   12d98:	000feec0 	call	feec <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12d9c:	0005303a 	rdctl	r2,status
   12da0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12da4:	e0fff917 	ldw	r3,-28(fp)
   12da8:	00bfff84 	movi	r2,-2
   12dac:	1884703a 	and	r2,r3,r2
   12db0:	1001703a 	wrctl	status,r2
  
  return context;
   12db4:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   12db8:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   12dbc:	d0a81617 	ldw	r2,-24488(gp)
   12dc0:	10800c43 	ldbu	r2,49(r2)
   12dc4:	10803fcc 	andi	r2,r2,255
   12dc8:	10000326 	beq	r2,zero,12dd8 <OSQPend+0x1ec>
   12dcc:	108000a0 	cmpeqi	r2,r2,2
   12dd0:	1000071e 	bne	r2,zero,12df0 <OSQPend+0x204>
   12dd4:	00000b06 	br	12e04 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   12dd8:	d0a81617 	ldw	r2,-24488(gp)
   12ddc:	10800917 	ldw	r2,36(r2)
   12de0:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   12de4:	e0bfff17 	ldw	r2,-4(fp)
   12de8:	10000005 	stb	zero,0(r2)
             break;
   12dec:	00000e06 	br	12e28 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   12df0:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   12df4:	e0bfff17 	ldw	r2,-4(fp)
   12df8:	00c00384 	movi	r3,14
   12dfc:	10c00005 	stb	r3,0(r2)
             break;
   12e00:	00000906 	br	12e28 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   12e04:	d0a81617 	ldw	r2,-24488(gp)
   12e08:	e17ffd17 	ldw	r5,-12(fp)
   12e0c:	1009883a 	mov	r4,r2
   12e10:	000f8980 	call	f898 <OS_EventTaskRemove>
             pmsg = (void *)0;
   12e14:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   12e18:	e0bfff17 	ldw	r2,-4(fp)
   12e1c:	00c00284 	movi	r3,10
   12e20:	10c00005 	stb	r3,0(r2)
             break;
   12e24:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   12e28:	d0a81617 	ldw	r2,-24488(gp)
   12e2c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   12e30:	d0a81617 	ldw	r2,-24488(gp)
   12e34:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   12e38:	d0a81617 	ldw	r2,-24488(gp)
   12e3c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   12e40:	d0a81617 	ldw	r2,-24488(gp)
   12e44:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   12e48:	d0a81617 	ldw	r2,-24488(gp)
   12e4c:	10000915 	stw	zero,36(r2)
   12e50:	e0bff617 	ldw	r2,-40(fp)
   12e54:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12e58:	e0bffa17 	ldw	r2,-24(fp)
   12e5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   12e60:	e0bff517 	ldw	r2,-44(fp)
}
   12e64:	e037883a 	mov	sp,fp
   12e68:	dfc00117 	ldw	ra,4(sp)
   12e6c:	df000017 	ldw	fp,0(sp)
   12e70:	dec00204 	addi	sp,sp,8
   12e74:	f800283a 	ret

00012e78 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   12e78:	defff604 	addi	sp,sp,-40
   12e7c:	dfc00915 	stw	ra,36(sp)
   12e80:	df000815 	stw	fp,32(sp)
   12e84:	df000804 	addi	fp,sp,32
   12e88:	e13ffd15 	stw	r4,-12(fp)
   12e8c:	2805883a 	mov	r2,r5
   12e90:	e1bfff15 	stw	r6,-4(fp)
   12e94:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12e98:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   12e9c:	e0bfff17 	ldw	r2,-4(fp)
   12ea0:	1000021e 	bne	r2,zero,12eac <OSQPendAbort+0x34>
        return (0);
   12ea4:	0005883a 	mov	r2,zero
   12ea8:	00004906 	br	12fd0 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   12eac:	e0bffd17 	ldw	r2,-12(fp)
   12eb0:	1000051e 	bne	r2,zero,12ec8 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   12eb4:	e0bfff17 	ldw	r2,-4(fp)
   12eb8:	00c00104 	movi	r3,4
   12ebc:	10c00005 	stb	r3,0(r2)
        return (0);
   12ec0:	0005883a 	mov	r2,zero
   12ec4:	00004206 	br	12fd0 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   12ec8:	e0bffd17 	ldw	r2,-12(fp)
   12ecc:	10800003 	ldbu	r2,0(r2)
   12ed0:	10803fcc 	andi	r2,r2,255
   12ed4:	108000a0 	cmpeqi	r2,r2,2
   12ed8:	1000051e 	bne	r2,zero,12ef0 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   12edc:	e0bfff17 	ldw	r2,-4(fp)
   12ee0:	00c00044 	movi	r3,1
   12ee4:	10c00005 	stb	r3,0(r2)
        return (0);
   12ee8:	0005883a 	mov	r2,zero
   12eec:	00003806 	br	12fd0 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12ef0:	0005303a 	rdctl	r2,status
   12ef4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12ef8:	e0fffc17 	ldw	r3,-16(fp)
   12efc:	00bfff84 	movi	r2,-2
   12f00:	1884703a 	and	r2,r3,r2
   12f04:	1001703a 	wrctl	status,r2
  
  return context;
   12f08:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12f0c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   12f10:	e0bffd17 	ldw	r2,-12(fp)
   12f14:	10800283 	ldbu	r2,10(r2)
   12f18:	10803fcc 	andi	r2,r2,255
   12f1c:	10002526 	beq	r2,zero,12fb4 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   12f20:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   12f24:	e0bffe03 	ldbu	r2,-8(fp)
   12f28:	10800060 	cmpeqi	r2,r2,1
   12f2c:	10000e26 	beq	r2,zero,12f68 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   12f30:	00000806 	br	12f54 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   12f34:	01c00084 	movi	r7,2
   12f38:	01800104 	movi	r6,4
   12f3c:	000b883a 	mov	r5,zero
   12f40:	e13ffd17 	ldw	r4,-12(fp)
   12f44:	000f4a00 	call	f4a0 <OS_EventTaskRdy>
                     nbr_tasks++;
   12f48:	e0bff803 	ldbu	r2,-32(fp)
   12f4c:	10800044 	addi	r2,r2,1
   12f50:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   12f54:	e0bffd17 	ldw	r2,-12(fp)
   12f58:	10800283 	ldbu	r2,10(r2)
   12f5c:	10803fcc 	andi	r2,r2,255
   12f60:	103ff41e 	bne	r2,zero,12f34 <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   12f64:	00000906 	br	12f8c <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   12f68:	01c00084 	movi	r7,2
   12f6c:	01800104 	movi	r6,4
   12f70:	000b883a 	mov	r5,zero
   12f74:	e13ffd17 	ldw	r4,-12(fp)
   12f78:	000f4a00 	call	f4a0 <OS_EventTaskRdy>
                 nbr_tasks++;
   12f7c:	e0bff803 	ldbu	r2,-32(fp)
   12f80:	10800044 	addi	r2,r2,1
   12f84:	e0bff805 	stb	r2,-32(fp)
                 break;
   12f88:	0001883a 	nop
   12f8c:	e0bff917 	ldw	r2,-28(fp)
   12f90:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12f94:	e0bffa17 	ldw	r2,-24(fp)
   12f98:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   12f9c:	000feec0 	call	feec <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   12fa0:	e0bfff17 	ldw	r2,-4(fp)
   12fa4:	00c00384 	movi	r3,14
   12fa8:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   12fac:	e0bff803 	ldbu	r2,-32(fp)
   12fb0:	00000706 	br	12fd0 <OSQPendAbort+0x158>
   12fb4:	e0bff917 	ldw	r2,-28(fp)
   12fb8:	e0bffb15 	stw	r2,-20(fp)
   12fbc:	e0bffb17 	ldw	r2,-20(fp)
   12fc0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   12fc4:	e0bfff17 	ldw	r2,-4(fp)
   12fc8:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   12fcc:	0005883a 	mov	r2,zero
}
   12fd0:	e037883a 	mov	sp,fp
   12fd4:	dfc00117 	ldw	ra,4(sp)
   12fd8:	df000017 	ldw	fp,0(sp)
   12fdc:	dec00204 	addi	sp,sp,8
   12fe0:	f800283a 	ret

00012fe4 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   12fe4:	defff604 	addi	sp,sp,-40
   12fe8:	dfc00915 	stw	ra,36(sp)
   12fec:	df000815 	stw	fp,32(sp)
   12ff0:	df000804 	addi	fp,sp,32
   12ff4:	e13ffe15 	stw	r4,-8(fp)
   12ff8:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   12ffc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   13000:	e0bffe17 	ldw	r2,-8(fp)
   13004:	1000021e 	bne	r2,zero,13010 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   13008:	00800104 	movi	r2,4
   1300c:	00004a06 	br	13138 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   13010:	e0bffe17 	ldw	r2,-8(fp)
   13014:	10800003 	ldbu	r2,0(r2)
   13018:	10803fcc 	andi	r2,r2,255
   1301c:	108000a0 	cmpeqi	r2,r2,2
   13020:	1000021e 	bne	r2,zero,1302c <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   13024:	00800044 	movi	r2,1
   13028:	00004306 	br	13138 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1302c:	0005303a 	rdctl	r2,status
   13030:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13034:	e0fffd17 	ldw	r3,-12(fp)
   13038:	00bfff84 	movi	r2,-2
   1303c:	1884703a 	and	r2,r3,r2
   13040:	1001703a 	wrctl	status,r2
  
  return context;
   13044:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   13048:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   1304c:	e0bffe17 	ldw	r2,-8(fp)
   13050:	10800283 	ldbu	r2,10(r2)
   13054:	10803fcc 	andi	r2,r2,255
   13058:	10000c26 	beq	r2,zero,1308c <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1305c:	000f883a 	mov	r7,zero
   13060:	01800104 	movi	r6,4
   13064:	e17fff17 	ldw	r5,-4(fp)
   13068:	e13ffe17 	ldw	r4,-8(fp)
   1306c:	000f4a00 	call	f4a0 <OS_EventTaskRdy>
   13070:	e0bff817 	ldw	r2,-32(fp)
   13074:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13078:	e0bff917 	ldw	r2,-28(fp)
   1307c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   13080:	000feec0 	call	feec <OS_Sched>
        return (OS_ERR_NONE);
   13084:	0005883a 	mov	r2,zero
   13088:	00002b06 	br	13138 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   1308c:	e0bffe17 	ldw	r2,-8(fp)
   13090:	10800117 	ldw	r2,4(r2)
   13094:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   13098:	e0bffb17 	ldw	r2,-20(fp)
   1309c:	10c0058b 	ldhu	r3,22(r2)
   130a0:	e0bffb17 	ldw	r2,-20(fp)
   130a4:	1080050b 	ldhu	r2,20(r2)
   130a8:	18ffffcc 	andi	r3,r3,65535
   130ac:	10bfffcc 	andi	r2,r2,65535
   130b0:	18800636 	bltu	r3,r2,130cc <OSQPost+0xe8>
   130b4:	e0bff817 	ldw	r2,-32(fp)
   130b8:	e0bffa15 	stw	r2,-24(fp)
   130bc:	e0bffa17 	ldw	r2,-24(fp)
   130c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   130c4:	00800784 	movi	r2,30
   130c8:	00001b06 	br	13138 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   130cc:	e0bffb17 	ldw	r2,-20(fp)
   130d0:	10800317 	ldw	r2,12(r2)
   130d4:	11000104 	addi	r4,r2,4
   130d8:	e0fffb17 	ldw	r3,-20(fp)
   130dc:	19000315 	stw	r4,12(r3)
   130e0:	e0ffff17 	ldw	r3,-4(fp)
   130e4:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   130e8:	e0bffb17 	ldw	r2,-20(fp)
   130ec:	1080058b 	ldhu	r2,22(r2)
   130f0:	10800044 	addi	r2,r2,1
   130f4:	1007883a 	mov	r3,r2
   130f8:	e0bffb17 	ldw	r2,-20(fp)
   130fc:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   13100:	e0bffb17 	ldw	r2,-20(fp)
   13104:	10c00317 	ldw	r3,12(r2)
   13108:	e0bffb17 	ldw	r2,-20(fp)
   1310c:	10800217 	ldw	r2,8(r2)
   13110:	1880041e 	bne	r3,r2,13124 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   13114:	e0bffb17 	ldw	r2,-20(fp)
   13118:	10c00117 	ldw	r3,4(r2)
   1311c:	e0bffb17 	ldw	r2,-20(fp)
   13120:	10c00315 	stw	r3,12(r2)
   13124:	e0bff817 	ldw	r2,-32(fp)
   13128:	e0bffc15 	stw	r2,-16(fp)
   1312c:	e0bffc17 	ldw	r2,-16(fp)
   13130:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   13134:	0005883a 	mov	r2,zero
}
   13138:	e037883a 	mov	sp,fp
   1313c:	dfc00117 	ldw	ra,4(sp)
   13140:	df000017 	ldw	fp,0(sp)
   13144:	dec00204 	addi	sp,sp,8
   13148:	f800283a 	ret

0001314c <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   1314c:	defff604 	addi	sp,sp,-40
   13150:	dfc00915 	stw	ra,36(sp)
   13154:	df000815 	stw	fp,32(sp)
   13158:	df000804 	addi	fp,sp,32
   1315c:	e13ffe15 	stw	r4,-8(fp)
   13160:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13164:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13168:	e0bffe17 	ldw	r2,-8(fp)
   1316c:	1000021e 	bne	r2,zero,13178 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   13170:	00800104 	movi	r2,4
   13174:	00004c06 	br	132a8 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   13178:	e0bffe17 	ldw	r2,-8(fp)
   1317c:	10800003 	ldbu	r2,0(r2)
   13180:	10803fcc 	andi	r2,r2,255
   13184:	108000a0 	cmpeqi	r2,r2,2
   13188:	1000021e 	bne	r2,zero,13194 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   1318c:	00800044 	movi	r2,1
   13190:	00004506 	br	132a8 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13194:	0005303a 	rdctl	r2,status
   13198:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1319c:	e0fffd17 	ldw	r3,-12(fp)
   131a0:	00bfff84 	movi	r2,-2
   131a4:	1884703a 	and	r2,r3,r2
   131a8:	1001703a 	wrctl	status,r2
  
  return context;
   131ac:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   131b0:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   131b4:	e0bffe17 	ldw	r2,-8(fp)
   131b8:	10800283 	ldbu	r2,10(r2)
   131bc:	10803fcc 	andi	r2,r2,255
   131c0:	10000c26 	beq	r2,zero,131f4 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   131c4:	000f883a 	mov	r7,zero
   131c8:	01800104 	movi	r6,4
   131cc:	e17fff17 	ldw	r5,-4(fp)
   131d0:	e13ffe17 	ldw	r4,-8(fp)
   131d4:	000f4a00 	call	f4a0 <OS_EventTaskRdy>
   131d8:	e0bff817 	ldw	r2,-32(fp)
   131dc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   131e0:	e0bff917 	ldw	r2,-28(fp)
   131e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   131e8:	000feec0 	call	feec <OS_Sched>
        return (OS_ERR_NONE);
   131ec:	0005883a 	mov	r2,zero
   131f0:	00002d06 	br	132a8 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   131f4:	e0bffe17 	ldw	r2,-8(fp)
   131f8:	10800117 	ldw	r2,4(r2)
   131fc:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   13200:	e0bffb17 	ldw	r2,-20(fp)
   13204:	10c0058b 	ldhu	r3,22(r2)
   13208:	e0bffb17 	ldw	r2,-20(fp)
   1320c:	1080050b 	ldhu	r2,20(r2)
   13210:	18ffffcc 	andi	r3,r3,65535
   13214:	10bfffcc 	andi	r2,r2,65535
   13218:	18800636 	bltu	r3,r2,13234 <OSQPostFront+0xe8>
   1321c:	e0bff817 	ldw	r2,-32(fp)
   13220:	e0bffa15 	stw	r2,-24(fp)
   13224:	e0bffa17 	ldw	r2,-24(fp)
   13228:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   1322c:	00800784 	movi	r2,30
   13230:	00001d06 	br	132a8 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   13234:	e0bffb17 	ldw	r2,-20(fp)
   13238:	10c00417 	ldw	r3,16(r2)
   1323c:	e0bffb17 	ldw	r2,-20(fp)
   13240:	10800117 	ldw	r2,4(r2)
   13244:	1880041e 	bne	r3,r2,13258 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   13248:	e0bffb17 	ldw	r2,-20(fp)
   1324c:	10c00217 	ldw	r3,8(r2)
   13250:	e0bffb17 	ldw	r2,-20(fp)
   13254:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   13258:	e0bffb17 	ldw	r2,-20(fp)
   1325c:	10800417 	ldw	r2,16(r2)
   13260:	10ffff04 	addi	r3,r2,-4
   13264:	e0bffb17 	ldw	r2,-20(fp)
   13268:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   1326c:	e0bffb17 	ldw	r2,-20(fp)
   13270:	10800417 	ldw	r2,16(r2)
   13274:	e0ffff17 	ldw	r3,-4(fp)
   13278:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   1327c:	e0bffb17 	ldw	r2,-20(fp)
   13280:	1080058b 	ldhu	r2,22(r2)
   13284:	10800044 	addi	r2,r2,1
   13288:	1007883a 	mov	r3,r2
   1328c:	e0bffb17 	ldw	r2,-20(fp)
   13290:	10c0058d 	sth	r3,22(r2)
   13294:	e0bff817 	ldw	r2,-32(fp)
   13298:	e0bffc15 	stw	r2,-16(fp)
   1329c:	e0bffc17 	ldw	r2,-16(fp)
   132a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   132a4:	0005883a 	mov	r2,zero
}
   132a8:	e037883a 	mov	sp,fp
   132ac:	dfc00117 	ldw	ra,4(sp)
   132b0:	df000017 	ldw	fp,0(sp)
   132b4:	dec00204 	addi	sp,sp,8
   132b8:	f800283a 	ret

000132bc <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   132bc:	defff504 	addi	sp,sp,-44
   132c0:	dfc00a15 	stw	ra,40(sp)
   132c4:	df000915 	stw	fp,36(sp)
   132c8:	df000904 	addi	fp,sp,36
   132cc:	e13ffd15 	stw	r4,-12(fp)
   132d0:	e17ffe15 	stw	r5,-8(fp)
   132d4:	3005883a 	mov	r2,r6
   132d8:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   132dc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   132e0:	e0bffd17 	ldw	r2,-12(fp)
   132e4:	1000021e 	bne	r2,zero,132f0 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   132e8:	00800104 	movi	r2,4
   132ec:	00007106 	br	134b4 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   132f0:	e0bffd17 	ldw	r2,-12(fp)
   132f4:	10800003 	ldbu	r2,0(r2)
   132f8:	10803fcc 	andi	r2,r2,255
   132fc:	108000a0 	cmpeqi	r2,r2,2
   13300:	1000021e 	bne	r2,zero,1330c <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   13304:	00800044 	movi	r2,1
   13308:	00006a06 	br	134b4 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1330c:	0005303a 	rdctl	r2,status
   13310:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13314:	e0fffc17 	ldw	r3,-16(fp)
   13318:	00bfff84 	movi	r2,-2
   1331c:	1884703a 	and	r2,r3,r2
   13320:	1001703a 	wrctl	status,r2
  
  return context;
   13324:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13328:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   1332c:	e0bffd17 	ldw	r2,-12(fp)
   13330:	10800283 	ldbu	r2,10(r2)
   13334:	10803fcc 	andi	r2,r2,255
   13338:	10001d26 	beq	r2,zero,133b0 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   1333c:	e0bfff03 	ldbu	r2,-4(fp)
   13340:	1080004c 	andi	r2,r2,1
   13344:	10000b26 	beq	r2,zero,13374 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   13348:	00000506 	br	13360 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1334c:	000f883a 	mov	r7,zero
   13350:	01800104 	movi	r6,4
   13354:	e17ffe17 	ldw	r5,-8(fp)
   13358:	e13ffd17 	ldw	r4,-12(fp)
   1335c:	000f4a00 	call	f4a0 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   13360:	e0bffd17 	ldw	r2,-12(fp)
   13364:	10800283 	ldbu	r2,10(r2)
   13368:	10803fcc 	andi	r2,r2,255
   1336c:	103ff71e 	bne	r2,zero,1334c <OSQPostOpt+0x90>
   13370:	00000506 	br	13388 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   13374:	000f883a 	mov	r7,zero
   13378:	01800104 	movi	r6,4
   1337c:	e17ffe17 	ldw	r5,-8(fp)
   13380:	e13ffd17 	ldw	r4,-12(fp)
   13384:	000f4a00 	call	f4a0 <OS_EventTaskRdy>
   13388:	e0bff717 	ldw	r2,-36(fp)
   1338c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13390:	e0bff817 	ldw	r2,-32(fp)
   13394:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   13398:	e0bfff03 	ldbu	r2,-4(fp)
   1339c:	1080010c 	andi	r2,r2,4
   133a0:	1000011e 	bne	r2,zero,133a8 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   133a4:	000feec0 	call	feec <OS_Sched>
        }
        return (OS_ERR_NONE);
   133a8:	0005883a 	mov	r2,zero
   133ac:	00004106 	br	134b4 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   133b0:	e0bffd17 	ldw	r2,-12(fp)
   133b4:	10800117 	ldw	r2,4(r2)
   133b8:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   133bc:	e0bffa17 	ldw	r2,-24(fp)
   133c0:	10c0058b 	ldhu	r3,22(r2)
   133c4:	e0bffa17 	ldw	r2,-24(fp)
   133c8:	1080050b 	ldhu	r2,20(r2)
   133cc:	18ffffcc 	andi	r3,r3,65535
   133d0:	10bfffcc 	andi	r2,r2,65535
   133d4:	18800636 	bltu	r3,r2,133f0 <OSQPostOpt+0x134>
   133d8:	e0bff717 	ldw	r2,-36(fp)
   133dc:	e0bff915 	stw	r2,-28(fp)
   133e0:	e0bff917 	ldw	r2,-28(fp)
   133e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   133e8:	00800784 	movi	r2,30
   133ec:	00003106 	br	134b4 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   133f0:	e0bfff03 	ldbu	r2,-4(fp)
   133f4:	1080008c 	andi	r2,r2,2
   133f8:	10001326 	beq	r2,zero,13448 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   133fc:	e0bffa17 	ldw	r2,-24(fp)
   13400:	10c00417 	ldw	r3,16(r2)
   13404:	e0bffa17 	ldw	r2,-24(fp)
   13408:	10800117 	ldw	r2,4(r2)
   1340c:	1880041e 	bne	r3,r2,13420 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   13410:	e0bffa17 	ldw	r2,-24(fp)
   13414:	10c00217 	ldw	r3,8(r2)
   13418:	e0bffa17 	ldw	r2,-24(fp)
   1341c:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   13420:	e0bffa17 	ldw	r2,-24(fp)
   13424:	10800417 	ldw	r2,16(r2)
   13428:	10ffff04 	addi	r3,r2,-4
   1342c:	e0bffa17 	ldw	r2,-24(fp)
   13430:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   13434:	e0bffa17 	ldw	r2,-24(fp)
   13438:	10800417 	ldw	r2,16(r2)
   1343c:	e0fffe17 	ldw	r3,-8(fp)
   13440:	10c00015 	stw	r3,0(r2)
   13444:	00001006 	br	13488 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   13448:	e0bffa17 	ldw	r2,-24(fp)
   1344c:	10800317 	ldw	r2,12(r2)
   13450:	11000104 	addi	r4,r2,4
   13454:	e0fffa17 	ldw	r3,-24(fp)
   13458:	19000315 	stw	r4,12(r3)
   1345c:	e0fffe17 	ldw	r3,-8(fp)
   13460:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   13464:	e0bffa17 	ldw	r2,-24(fp)
   13468:	10c00317 	ldw	r3,12(r2)
   1346c:	e0bffa17 	ldw	r2,-24(fp)
   13470:	10800217 	ldw	r2,8(r2)
   13474:	1880041e 	bne	r3,r2,13488 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   13478:	e0bffa17 	ldw	r2,-24(fp)
   1347c:	10c00117 	ldw	r3,4(r2)
   13480:	e0bffa17 	ldw	r2,-24(fp)
   13484:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   13488:	e0bffa17 	ldw	r2,-24(fp)
   1348c:	1080058b 	ldhu	r2,22(r2)
   13490:	10800044 	addi	r2,r2,1
   13494:	1007883a 	mov	r3,r2
   13498:	e0bffa17 	ldw	r2,-24(fp)
   1349c:	10c0058d 	sth	r3,22(r2)
   134a0:	e0bff717 	ldw	r2,-36(fp)
   134a4:	e0bffb15 	stw	r2,-20(fp)
   134a8:	e0bffb17 	ldw	r2,-20(fp)
   134ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   134b0:	0005883a 	mov	r2,zero
}
   134b4:	e037883a 	mov	sp,fp
   134b8:	dfc00117 	ldw	ra,4(sp)
   134bc:	df000017 	ldw	fp,0(sp)
   134c0:	dec00204 	addi	sp,sp,8
   134c4:	f800283a 	ret

000134c8 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   134c8:	defff604 	addi	sp,sp,-40
   134cc:	df000915 	stw	fp,36(sp)
   134d0:	df000904 	addi	fp,sp,36
   134d4:	e13ffe15 	stw	r4,-8(fp)
   134d8:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   134dc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   134e0:	e0bffe17 	ldw	r2,-8(fp)
   134e4:	1000021e 	bne	r2,zero,134f0 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   134e8:	00800104 	movi	r2,4
   134ec:	00004906 	br	13614 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   134f0:	e0bfff17 	ldw	r2,-4(fp)
   134f4:	1000021e 	bne	r2,zero,13500 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   134f8:	00800244 	movi	r2,9
   134fc:	00004506 	br	13614 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   13500:	e0bffe17 	ldw	r2,-8(fp)
   13504:	10800003 	ldbu	r2,0(r2)
   13508:	10803fcc 	andi	r2,r2,255
   1350c:	108000a0 	cmpeqi	r2,r2,2
   13510:	1000021e 	bne	r2,zero,1351c <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   13514:	00800044 	movi	r2,1
   13518:	00003e06 	br	13614 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1351c:	0005303a 	rdctl	r2,status
   13520:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13524:	e0fffd17 	ldw	r3,-12(fp)
   13528:	00bfff84 	movi	r2,-2
   1352c:	1884703a 	and	r2,r3,r2
   13530:	1001703a 	wrctl	status,r2
  
  return context;
   13534:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   13538:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   1353c:	e0bffe17 	ldw	r2,-8(fp)
   13540:	10c00283 	ldbu	r3,10(r2)
   13544:	e0bfff17 	ldw	r2,-4(fp)
   13548:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   1354c:	e0bffe17 	ldw	r2,-8(fp)
   13550:	108002c4 	addi	r2,r2,11
   13554:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   13558:	e0bfff17 	ldw	r2,-4(fp)
   1355c:	10800204 	addi	r2,r2,8
   13560:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13564:	e03ff705 	stb	zero,-36(fp)
   13568:	00000b06 	br	13598 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   1356c:	e0bff917 	ldw	r2,-28(fp)
   13570:	10c00044 	addi	r3,r2,1
   13574:	e0fff915 	stw	r3,-28(fp)
   13578:	e0fff817 	ldw	r3,-32(fp)
   1357c:	19000044 	addi	r4,r3,1
   13580:	e13ff815 	stw	r4,-32(fp)
   13584:	18c00003 	ldbu	r3,0(r3)
   13588:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1358c:	e0bff703 	ldbu	r2,-36(fp)
   13590:	10800044 	addi	r2,r2,1
   13594:	e0bff705 	stb	r2,-36(fp)
   13598:	e0bff703 	ldbu	r2,-36(fp)
   1359c:	108000f0 	cmpltui	r2,r2,3
   135a0:	103ff21e 	bne	r2,zero,1356c <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   135a4:	e0bffe17 	ldw	r2,-8(fp)
   135a8:	10800117 	ldw	r2,4(r2)
   135ac:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   135b0:	e0bffc17 	ldw	r2,-16(fp)
   135b4:	1080058b 	ldhu	r2,22(r2)
   135b8:	10bfffcc 	andi	r2,r2,65535
   135bc:	10000626 	beq	r2,zero,135d8 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   135c0:	e0bffc17 	ldw	r2,-16(fp)
   135c4:	10800417 	ldw	r2,16(r2)
   135c8:	10c00017 	ldw	r3,0(r2)
   135cc:	e0bfff17 	ldw	r2,-4(fp)
   135d0:	10c00015 	stw	r3,0(r2)
   135d4:	00000206 	br	135e0 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   135d8:	e0bfff17 	ldw	r2,-4(fp)
   135dc:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   135e0:	e0bffc17 	ldw	r2,-16(fp)
   135e4:	10c0058b 	ldhu	r3,22(r2)
   135e8:	e0bfff17 	ldw	r2,-4(fp)
   135ec:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   135f0:	e0bffc17 	ldw	r2,-16(fp)
   135f4:	10c0050b 	ldhu	r3,20(r2)
   135f8:	e0bfff17 	ldw	r2,-4(fp)
   135fc:	10c0018d 	sth	r3,6(r2)
   13600:	e0bffa17 	ldw	r2,-24(fp)
   13604:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13608:	e0bffb17 	ldw	r2,-20(fp)
   1360c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   13610:	0005883a 	mov	r2,zero
}
   13614:	e037883a 	mov	sp,fp
   13618:	df000017 	ldw	fp,0(sp)
   1361c:	dec00104 	addi	sp,sp,4
   13620:	f800283a 	ret

00013624 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   13624:	defffb04 	addi	sp,sp,-20
   13628:	dfc00415 	stw	ra,16(sp)
   1362c:	df000315 	stw	fp,12(sp)
   13630:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   13634:	01407804 	movi	r5,480
   13638:	010000b4 	movhi	r4,2
   1363c:	210f8a04 	addi	r4,r4,15912
   13640:	000fe300 	call	fe30 <OS_MemClr>
    pq1 = &OSQTbl[0];
   13644:	008000b4 	movhi	r2,2
   13648:	108f8a04 	addi	r2,r2,15912
   1364c:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   13650:	008000b4 	movhi	r2,2
   13654:	108f9004 	addi	r2,r2,15936
   13658:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   1365c:	e03ffd0d 	sth	zero,-12(fp)
   13660:	00000c06 	br	13694 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   13664:	e0bffe17 	ldw	r2,-8(fp)
   13668:	e0ffff17 	ldw	r3,-4(fp)
   1366c:	10c00015 	stw	r3,0(r2)
        pq1++;
   13670:	e0bffe17 	ldw	r2,-8(fp)
   13674:	10800604 	addi	r2,r2,24
   13678:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   1367c:	e0bfff17 	ldw	r2,-4(fp)
   13680:	10800604 	addi	r2,r2,24
   13684:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   13688:	e0bffd0b 	ldhu	r2,-12(fp)
   1368c:	10800044 	addi	r2,r2,1
   13690:	e0bffd0d 	sth	r2,-12(fp)
   13694:	e0bffd0b 	ldhu	r2,-12(fp)
   13698:	108004f0 	cmpltui	r2,r2,19
   1369c:	103ff11e 	bne	r2,zero,13664 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   136a0:	e0bffe17 	ldw	r2,-8(fp)
   136a4:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   136a8:	008000b4 	movhi	r2,2
   136ac:	108f8a04 	addi	r2,r2,15912
   136b0:	d0a81215 	stw	r2,-24504(gp)
#endif
}
   136b4:	0001883a 	nop
   136b8:	e037883a 	mov	sp,fp
   136bc:	dfc00117 	ldw	ra,4(sp)
   136c0:	df000017 	ldw	fp,0(sp)
   136c4:	dec00204 	addi	sp,sp,8
   136c8:	f800283a 	ret

000136cc <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   136cc:	defffa04 	addi	sp,sp,-24
   136d0:	df000515 	stw	fp,20(sp)
   136d4:	df000504 	addi	fp,sp,20
   136d8:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   136dc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   136e0:	e0bfff17 	ldw	r2,-4(fp)
   136e4:	1000021e 	bne	r2,zero,136f0 <OSSemAccept+0x24>
        return (0);
   136e8:	0005883a 	mov	r2,zero
   136ec:	00001f06 	br	1376c <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   136f0:	e0bfff17 	ldw	r2,-4(fp)
   136f4:	10800003 	ldbu	r2,0(r2)
   136f8:	10803fcc 	andi	r2,r2,255
   136fc:	108000e0 	cmpeqi	r2,r2,3
   13700:	1000021e 	bne	r2,zero,1370c <OSSemAccept+0x40>
        return (0);
   13704:	0005883a 	mov	r2,zero
   13708:	00001806 	br	1376c <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1370c:	0005303a 	rdctl	r2,status
   13710:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13714:	e0fffe17 	ldw	r3,-8(fp)
   13718:	00bfff84 	movi	r2,-2
   1371c:	1884703a 	and	r2,r3,r2
   13720:	1001703a 	wrctl	status,r2
  
  return context;
   13724:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   13728:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   1372c:	e0bfff17 	ldw	r2,-4(fp)
   13730:	1080020b 	ldhu	r2,8(r2)
   13734:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   13738:	e0bffd0b 	ldhu	r2,-12(fp)
   1373c:	10000626 	beq	r2,zero,13758 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   13740:	e0bfff17 	ldw	r2,-4(fp)
   13744:	1080020b 	ldhu	r2,8(r2)
   13748:	10bfffc4 	addi	r2,r2,-1
   1374c:	1007883a 	mov	r3,r2
   13750:	e0bfff17 	ldw	r2,-4(fp)
   13754:	10c0020d 	sth	r3,8(r2)
   13758:	e0bffb17 	ldw	r2,-20(fp)
   1375c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13760:	e0bffc17 	ldw	r2,-16(fp)
   13764:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   13768:	e0bffd0b 	ldhu	r2,-12(fp)
}
   1376c:	e037883a 	mov	sp,fp
   13770:	df000017 	ldw	fp,0(sp)
   13774:	dec00104 	addi	sp,sp,4
   13778:	f800283a 	ret

0001377c <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   1377c:	defff904 	addi	sp,sp,-28
   13780:	dfc00615 	stw	ra,24(sp)
   13784:	df000515 	stw	fp,20(sp)
   13788:	df000504 	addi	fp,sp,20
   1378c:	2005883a 	mov	r2,r4
   13790:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13794:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   13798:	d0a81503 	ldbu	r2,-24492(gp)
   1379c:	10803fcc 	andi	r2,r2,255
   137a0:	10000226 	beq	r2,zero,137ac <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   137a4:	0005883a 	mov	r2,zero
   137a8:	00002506 	br	13840 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   137ac:	0005303a 	rdctl	r2,status
   137b0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   137b4:	e0fffe17 	ldw	r3,-8(fp)
   137b8:	00bfff84 	movi	r2,-2
   137bc:	1884703a 	and	r2,r3,r2
   137c0:	1001703a 	wrctl	status,r2
  
  return context;
   137c4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   137c8:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   137cc:	d0a81417 	ldw	r2,-24496(gp)
   137d0:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   137d4:	d0a81417 	ldw	r2,-24496(gp)
   137d8:	10000326 	beq	r2,zero,137e8 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   137dc:	d0a81417 	ldw	r2,-24496(gp)
   137e0:	10800117 	ldw	r2,4(r2)
   137e4:	d0a81415 	stw	r2,-24496(gp)
   137e8:	e0bffb17 	ldw	r2,-20(fp)
   137ec:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   137f0:	e0bffc17 	ldw	r2,-16(fp)
   137f4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   137f8:	e0bffd17 	ldw	r2,-12(fp)
   137fc:	10000f26 	beq	r2,zero,1383c <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   13800:	e0bffd17 	ldw	r2,-12(fp)
   13804:	00c000c4 	movi	r3,3
   13808:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   1380c:	e0bffd17 	ldw	r2,-12(fp)
   13810:	e0ffff0b 	ldhu	r3,-4(fp)
   13814:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   13818:	e0bffd17 	ldw	r2,-12(fp)
   1381c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   13820:	e0bffd17 	ldw	r2,-12(fp)
   13824:	00c00fc4 	movi	r3,63
   13828:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   1382c:	e0bffd17 	ldw	r2,-12(fp)
   13830:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   13834:	e13ffd17 	ldw	r4,-12(fp)
   13838:	000fa500 	call	fa50 <OS_EventWaitListInit>
    }
    return (pevent);
   1383c:	e0bffd17 	ldw	r2,-12(fp)
}
   13840:	e037883a 	mov	sp,fp
   13844:	dfc00117 	ldw	ra,4(sp)
   13848:	df000017 	ldw	fp,0(sp)
   1384c:	dec00204 	addi	sp,sp,8
   13850:	f800283a 	ret

00013854 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   13854:	defff304 	addi	sp,sp,-52
   13858:	dfc00c15 	stw	ra,48(sp)
   1385c:	df000b15 	stw	fp,44(sp)
   13860:	df000b04 	addi	fp,sp,44
   13864:	e13ffd15 	stw	r4,-12(fp)
   13868:	2805883a 	mov	r2,r5
   1386c:	e1bfff15 	stw	r6,-4(fp)
   13870:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13874:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   13878:	e0bfff17 	ldw	r2,-4(fp)
   1387c:	1000021e 	bne	r2,zero,13888 <OSSemDel+0x34>
        return (pevent);
   13880:	e0bffd17 	ldw	r2,-12(fp)
   13884:	00007e06 	br	13a80 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   13888:	e0bffd17 	ldw	r2,-12(fp)
   1388c:	1000051e 	bne	r2,zero,138a4 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   13890:	e0bfff17 	ldw	r2,-4(fp)
   13894:	00c00104 	movi	r3,4
   13898:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1389c:	e0bffd17 	ldw	r2,-12(fp)
   138a0:	00007706 	br	13a80 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   138a4:	e0bffd17 	ldw	r2,-12(fp)
   138a8:	10800003 	ldbu	r2,0(r2)
   138ac:	10803fcc 	andi	r2,r2,255
   138b0:	108000e0 	cmpeqi	r2,r2,3
   138b4:	1000051e 	bne	r2,zero,138cc <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   138b8:	e0bfff17 	ldw	r2,-4(fp)
   138bc:	00c00044 	movi	r3,1
   138c0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   138c4:	e0bffd17 	ldw	r2,-12(fp)
   138c8:	00006d06 	br	13a80 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   138cc:	d0a81503 	ldbu	r2,-24492(gp)
   138d0:	10803fcc 	andi	r2,r2,255
   138d4:	10000526 	beq	r2,zero,138ec <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   138d8:	e0bfff17 	ldw	r2,-4(fp)
   138dc:	00c003c4 	movi	r3,15
   138e0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   138e4:	e0bffd17 	ldw	r2,-12(fp)
   138e8:	00006506 	br	13a80 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   138ec:	0005303a 	rdctl	r2,status
   138f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   138f4:	e0fffc17 	ldw	r3,-16(fp)
   138f8:	00bfff84 	movi	r2,-2
   138fc:	1884703a 	and	r2,r3,r2
   13900:	1001703a 	wrctl	status,r2
  
  return context;
   13904:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13908:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   1390c:	e0bffd17 	ldw	r2,-12(fp)
   13910:	10800283 	ldbu	r2,10(r2)
   13914:	10803fcc 	andi	r2,r2,255
   13918:	10000326 	beq	r2,zero,13928 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1391c:	00800044 	movi	r2,1
   13920:	e0bff505 	stb	r2,-44(fp)
   13924:	00000106 	br	1392c <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   13928:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   1392c:	e0bffe03 	ldbu	r2,-8(fp)
   13930:	10000326 	beq	r2,zero,13940 <OSSemDel+0xec>
   13934:	10800060 	cmpeqi	r2,r2,1
   13938:	1000281e 	bne	r2,zero,139dc <OSSemDel+0x188>
   1393c:	00004506 	br	13a54 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   13940:	e0bff503 	ldbu	r2,-44(fp)
   13944:	1000161e 	bne	r2,zero,139a0 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   13948:	e0bffd17 	ldw	r2,-12(fp)
   1394c:	00c00fc4 	movi	r3,63
   13950:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   13954:	e0bffd17 	ldw	r2,-12(fp)
   13958:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1395c:	e0bffd17 	ldw	r2,-12(fp)
   13960:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   13964:	d0e81417 	ldw	r3,-24496(gp)
   13968:	e0bffd17 	ldw	r2,-12(fp)
   1396c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   13970:	e0bffd17 	ldw	r2,-12(fp)
   13974:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   13978:	e0bffd17 	ldw	r2,-12(fp)
   1397c:	d0a81415 	stw	r2,-24496(gp)
   13980:	e0bff717 	ldw	r2,-36(fp)
   13984:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13988:	e0bff817 	ldw	r2,-32(fp)
   1398c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   13990:	e0bfff17 	ldw	r2,-4(fp)
   13994:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   13998:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   1399c:	00003706 	br	13a7c <OSSemDel+0x228>
   139a0:	e0bff717 	ldw	r2,-36(fp)
   139a4:	e0bff915 	stw	r2,-28(fp)
   139a8:	e0bff917 	ldw	r2,-28(fp)
   139ac:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   139b0:	e0bfff17 	ldw	r2,-4(fp)
   139b4:	00c01244 	movi	r3,73
   139b8:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   139bc:	e0bffd17 	ldw	r2,-12(fp)
   139c0:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   139c4:	00002d06 	br	13a7c <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   139c8:	000f883a 	mov	r7,zero
   139cc:	01800044 	movi	r6,1
   139d0:	000b883a 	mov	r5,zero
   139d4:	e13ffd17 	ldw	r4,-12(fp)
   139d8:	000f4a00 	call	f4a0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   139dc:	e0bffd17 	ldw	r2,-12(fp)
   139e0:	10800283 	ldbu	r2,10(r2)
   139e4:	10803fcc 	andi	r2,r2,255
   139e8:	103ff71e 	bne	r2,zero,139c8 <OSSemDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   139ec:	e0bffd17 	ldw	r2,-12(fp)
   139f0:	00c00fc4 	movi	r3,63
   139f4:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   139f8:	e0bffd17 	ldw	r2,-12(fp)
   139fc:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   13a00:	e0bffd17 	ldw	r2,-12(fp)
   13a04:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   13a08:	d0e81417 	ldw	r3,-24496(gp)
   13a0c:	e0bffd17 	ldw	r2,-12(fp)
   13a10:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   13a14:	e0bffd17 	ldw	r2,-12(fp)
   13a18:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   13a1c:	e0bffd17 	ldw	r2,-12(fp)
   13a20:	d0a81415 	stw	r2,-24496(gp)
   13a24:	e0bff717 	ldw	r2,-36(fp)
   13a28:	e0bffa15 	stw	r2,-24(fp)
   13a2c:	e0bffa17 	ldw	r2,-24(fp)
   13a30:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   13a34:	e0bff503 	ldbu	r2,-44(fp)
   13a38:	10800058 	cmpnei	r2,r2,1
   13a3c:	1000011e 	bne	r2,zero,13a44 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   13a40:	000feec0 	call	feec <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   13a44:	e0bfff17 	ldw	r2,-4(fp)
   13a48:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   13a4c:	e03ff615 	stw	zero,-40(fp)
             break;
   13a50:	00000a06 	br	13a7c <OSSemDel+0x228>
   13a54:	e0bff717 	ldw	r2,-36(fp)
   13a58:	e0bffb15 	stw	r2,-20(fp)
   13a5c:	e0bffb17 	ldw	r2,-20(fp)
   13a60:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   13a64:	e0bfff17 	ldw	r2,-4(fp)
   13a68:	00c001c4 	movi	r3,7
   13a6c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   13a70:	e0bffd17 	ldw	r2,-12(fp)
   13a74:	e0bff615 	stw	r2,-40(fp)
             break;
   13a78:	0001883a 	nop
    }
    return (pevent_return);
   13a7c:	e0bff617 	ldw	r2,-40(fp)
}
   13a80:	e037883a 	mov	sp,fp
   13a84:	dfc00117 	ldw	ra,4(sp)
   13a88:	df000017 	ldw	fp,0(sp)
   13a8c:	dec00204 	addi	sp,sp,8
   13a90:	f800283a 	ret

00013a94 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   13a94:	defff504 	addi	sp,sp,-44
   13a98:	dfc00a15 	stw	ra,40(sp)
   13a9c:	df000915 	stw	fp,36(sp)
   13aa0:	df000904 	addi	fp,sp,36
   13aa4:	e13ffd15 	stw	r4,-12(fp)
   13aa8:	2805883a 	mov	r2,r5
   13aac:	e1bfff15 	stw	r6,-4(fp)
   13ab0:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13ab4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13ab8:	e0bfff17 	ldw	r2,-4(fp)
   13abc:	10007226 	beq	r2,zero,13c88 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13ac0:	e0bffd17 	ldw	r2,-12(fp)
   13ac4:	1000041e 	bne	r2,zero,13ad8 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   13ac8:	e0bfff17 	ldw	r2,-4(fp)
   13acc:	00c00104 	movi	r3,4
   13ad0:	10c00005 	stb	r3,0(r2)
        return;
   13ad4:	00006d06 	br	13c8c <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13ad8:	e0bffd17 	ldw	r2,-12(fp)
   13adc:	10800003 	ldbu	r2,0(r2)
   13ae0:	10803fcc 	andi	r2,r2,255
   13ae4:	108000e0 	cmpeqi	r2,r2,3
   13ae8:	1000041e 	bne	r2,zero,13afc <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   13aec:	e0bfff17 	ldw	r2,-4(fp)
   13af0:	00c00044 	movi	r3,1
   13af4:	10c00005 	stb	r3,0(r2)
        return;
   13af8:	00006406 	br	13c8c <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   13afc:	d0a81503 	ldbu	r2,-24492(gp)
   13b00:	10803fcc 	andi	r2,r2,255
   13b04:	10000426 	beq	r2,zero,13b18 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   13b08:	e0bfff17 	ldw	r2,-4(fp)
   13b0c:	00c00084 	movi	r3,2
   13b10:	10c00005 	stb	r3,0(r2)
        return;
   13b14:	00005d06 	br	13c8c <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   13b18:	d0a80703 	ldbu	r2,-24548(gp)
   13b1c:	10803fcc 	andi	r2,r2,255
   13b20:	10000426 	beq	r2,zero,13b34 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   13b24:	e0bfff17 	ldw	r2,-4(fp)
   13b28:	00c00344 	movi	r3,13
   13b2c:	10c00005 	stb	r3,0(r2)
        return;
   13b30:	00005606 	br	13c8c <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13b34:	0005303a 	rdctl	r2,status
   13b38:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13b3c:	e0fffc17 	ldw	r3,-16(fp)
   13b40:	00bfff84 	movi	r2,-2
   13b44:	1884703a 	and	r2,r3,r2
   13b48:	1001703a 	wrctl	status,r2
  
  return context;
   13b4c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13b50:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   13b54:	e0bffd17 	ldw	r2,-12(fp)
   13b58:	1080020b 	ldhu	r2,8(r2)
   13b5c:	10bfffcc 	andi	r2,r2,65535
   13b60:	10000d26 	beq	r2,zero,13b98 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   13b64:	e0bffd17 	ldw	r2,-12(fp)
   13b68:	1080020b 	ldhu	r2,8(r2)
   13b6c:	10bfffc4 	addi	r2,r2,-1
   13b70:	1007883a 	mov	r3,r2
   13b74:	e0bffd17 	ldw	r2,-12(fp)
   13b78:	10c0020d 	sth	r3,8(r2)
   13b7c:	e0bff717 	ldw	r2,-36(fp)
   13b80:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13b84:	e0bff817 	ldw	r2,-32(fp)
   13b88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   13b8c:	e0bfff17 	ldw	r2,-4(fp)
   13b90:	10000005 	stb	zero,0(r2)
        return;
   13b94:	00003d06 	br	13c8c <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   13b98:	d0a81617 	ldw	r2,-24488(gp)
   13b9c:	d0e81617 	ldw	r3,-24488(gp)
   13ba0:	18c00c03 	ldbu	r3,48(r3)
   13ba4:	18c00054 	ori	r3,r3,1
   13ba8:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   13bac:	d0a81617 	ldw	r2,-24488(gp)
   13bb0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   13bb4:	d0a81617 	ldw	r2,-24488(gp)
   13bb8:	e0fffe0b 	ldhu	r3,-8(fp)
   13bbc:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   13bc0:	e13ffd17 	ldw	r4,-12(fp)
   13bc4:	000f6380 	call	f638 <OS_EventTaskWait>
   13bc8:	e0bff717 	ldw	r2,-36(fp)
   13bcc:	e0bffb15 	stw	r2,-20(fp)
   13bd0:	e0bffb17 	ldw	r2,-20(fp)
   13bd4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   13bd8:	000feec0 	call	feec <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13bdc:	0005303a 	rdctl	r2,status
   13be0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13be4:	e0fff917 	ldw	r3,-28(fp)
   13be8:	00bfff84 	movi	r2,-2
   13bec:	1884703a 	and	r2,r3,r2
   13bf0:	1001703a 	wrctl	status,r2
  
  return context;
   13bf4:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   13bf8:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   13bfc:	d0a81617 	ldw	r2,-24488(gp)
   13c00:	10800c43 	ldbu	r2,49(r2)
   13c04:	10803fcc 	andi	r2,r2,255
   13c08:	10000326 	beq	r2,zero,13c18 <OSSemPend+0x184>
   13c0c:	108000a0 	cmpeqi	r2,r2,2
   13c10:	1000041e 	bne	r2,zero,13c24 <OSSemPend+0x190>
   13c14:	00000706 	br	13c34 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   13c18:	e0bfff17 	ldw	r2,-4(fp)
   13c1c:	10000005 	stb	zero,0(r2)
             break;
   13c20:	00000c06 	br	13c54 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   13c24:	e0bfff17 	ldw	r2,-4(fp)
   13c28:	00c00384 	movi	r3,14
   13c2c:	10c00005 	stb	r3,0(r2)
             break;
   13c30:	00000806 	br	13c54 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   13c34:	d0a81617 	ldw	r2,-24488(gp)
   13c38:	e17ffd17 	ldw	r5,-12(fp)
   13c3c:	1009883a 	mov	r4,r2
   13c40:	000f8980 	call	f898 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   13c44:	e0bfff17 	ldw	r2,-4(fp)
   13c48:	00c00284 	movi	r3,10
   13c4c:	10c00005 	stb	r3,0(r2)
             break;
   13c50:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   13c54:	d0a81617 	ldw	r2,-24488(gp)
   13c58:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   13c5c:	d0a81617 	ldw	r2,-24488(gp)
   13c60:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   13c64:	d0a81617 	ldw	r2,-24488(gp)
   13c68:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   13c6c:	d0a81617 	ldw	r2,-24488(gp)
   13c70:	10000815 	stw	zero,32(r2)
   13c74:	e0bff717 	ldw	r2,-36(fp)
   13c78:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13c7c:	e0bffa17 	ldw	r2,-24(fp)
   13c80:	1001703a 	wrctl	status,r2
   13c84:	00000106 	br	13c8c <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   13c88:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
   13c8c:	e037883a 	mov	sp,fp
   13c90:	dfc00117 	ldw	ra,4(sp)
   13c94:	df000017 	ldw	fp,0(sp)
   13c98:	dec00204 	addi	sp,sp,8
   13c9c:	f800283a 	ret

00013ca0 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   13ca0:	defff604 	addi	sp,sp,-40
   13ca4:	dfc00915 	stw	ra,36(sp)
   13ca8:	df000815 	stw	fp,32(sp)
   13cac:	df000804 	addi	fp,sp,32
   13cb0:	e13ffd15 	stw	r4,-12(fp)
   13cb4:	2805883a 	mov	r2,r5
   13cb8:	e1bfff15 	stw	r6,-4(fp)
   13cbc:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13cc0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13cc4:	e0bfff17 	ldw	r2,-4(fp)
   13cc8:	1000021e 	bne	r2,zero,13cd4 <OSSemPendAbort+0x34>
        return (0);
   13ccc:	0005883a 	mov	r2,zero
   13cd0:	00004906 	br	13df8 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13cd4:	e0bffd17 	ldw	r2,-12(fp)
   13cd8:	1000051e 	bne	r2,zero,13cf0 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   13cdc:	e0bfff17 	ldw	r2,-4(fp)
   13ce0:	00c00104 	movi	r3,4
   13ce4:	10c00005 	stb	r3,0(r2)
        return (0);
   13ce8:	0005883a 	mov	r2,zero
   13cec:	00004206 	br	13df8 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13cf0:	e0bffd17 	ldw	r2,-12(fp)
   13cf4:	10800003 	ldbu	r2,0(r2)
   13cf8:	10803fcc 	andi	r2,r2,255
   13cfc:	108000e0 	cmpeqi	r2,r2,3
   13d00:	1000051e 	bne	r2,zero,13d18 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   13d04:	e0bfff17 	ldw	r2,-4(fp)
   13d08:	00c00044 	movi	r3,1
   13d0c:	10c00005 	stb	r3,0(r2)
        return (0);
   13d10:	0005883a 	mov	r2,zero
   13d14:	00003806 	br	13df8 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13d18:	0005303a 	rdctl	r2,status
   13d1c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13d20:	e0fffc17 	ldw	r3,-16(fp)
   13d24:	00bfff84 	movi	r2,-2
   13d28:	1884703a 	and	r2,r3,r2
   13d2c:	1001703a 	wrctl	status,r2
  
  return context;
   13d30:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13d34:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   13d38:	e0bffd17 	ldw	r2,-12(fp)
   13d3c:	10800283 	ldbu	r2,10(r2)
   13d40:	10803fcc 	andi	r2,r2,255
   13d44:	10002526 	beq	r2,zero,13ddc <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   13d48:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   13d4c:	e0bffe03 	ldbu	r2,-8(fp)
   13d50:	10800060 	cmpeqi	r2,r2,1
   13d54:	10000e26 	beq	r2,zero,13d90 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   13d58:	00000806 	br	13d7c <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   13d5c:	01c00084 	movi	r7,2
   13d60:	01800044 	movi	r6,1
   13d64:	000b883a 	mov	r5,zero
   13d68:	e13ffd17 	ldw	r4,-12(fp)
   13d6c:	000f4a00 	call	f4a0 <OS_EventTaskRdy>
                     nbr_tasks++;
   13d70:	e0bff803 	ldbu	r2,-32(fp)
   13d74:	10800044 	addi	r2,r2,1
   13d78:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   13d7c:	e0bffd17 	ldw	r2,-12(fp)
   13d80:	10800283 	ldbu	r2,10(r2)
   13d84:	10803fcc 	andi	r2,r2,255
   13d88:	103ff41e 	bne	r2,zero,13d5c <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   13d8c:	00000906 	br	13db4 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   13d90:	01c00084 	movi	r7,2
   13d94:	01800044 	movi	r6,1
   13d98:	000b883a 	mov	r5,zero
   13d9c:	e13ffd17 	ldw	r4,-12(fp)
   13da0:	000f4a00 	call	f4a0 <OS_EventTaskRdy>
                 nbr_tasks++;
   13da4:	e0bff803 	ldbu	r2,-32(fp)
   13da8:	10800044 	addi	r2,r2,1
   13dac:	e0bff805 	stb	r2,-32(fp)
                 break;
   13db0:	0001883a 	nop
   13db4:	e0bff917 	ldw	r2,-28(fp)
   13db8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13dbc:	e0bffa17 	ldw	r2,-24(fp)
   13dc0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   13dc4:	000feec0 	call	feec <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   13dc8:	e0bfff17 	ldw	r2,-4(fp)
   13dcc:	00c00384 	movi	r3,14
   13dd0:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   13dd4:	e0bff803 	ldbu	r2,-32(fp)
   13dd8:	00000706 	br	13df8 <OSSemPendAbort+0x158>
   13ddc:	e0bff917 	ldw	r2,-28(fp)
   13de0:	e0bffb15 	stw	r2,-20(fp)
   13de4:	e0bffb17 	ldw	r2,-20(fp)
   13de8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13dec:	e0bfff17 	ldw	r2,-4(fp)
   13df0:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   13df4:	0005883a 	mov	r2,zero
}
   13df8:	e037883a 	mov	sp,fp
   13dfc:	dfc00117 	ldw	ra,4(sp)
   13e00:	df000017 	ldw	fp,0(sp)
   13e04:	dec00204 	addi	sp,sp,8
   13e08:	f800283a 	ret

00013e0c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   13e0c:	defff804 	addi	sp,sp,-32
   13e10:	dfc00715 	stw	ra,28(sp)
   13e14:	df000615 	stw	fp,24(sp)
   13e18:	df000604 	addi	fp,sp,24
   13e1c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13e20:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13e24:	e0bfff17 	ldw	r2,-4(fp)
   13e28:	1000021e 	bne	r2,zero,13e34 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   13e2c:	00800104 	movi	r2,4
   13e30:	00003506 	br	13f08 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13e34:	e0bfff17 	ldw	r2,-4(fp)
   13e38:	10800003 	ldbu	r2,0(r2)
   13e3c:	10803fcc 	andi	r2,r2,255
   13e40:	108000e0 	cmpeqi	r2,r2,3
   13e44:	1000021e 	bne	r2,zero,13e50 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   13e48:	00800044 	movi	r2,1
   13e4c:	00002e06 	br	13f08 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13e50:	0005303a 	rdctl	r2,status
   13e54:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13e58:	e0fffe17 	ldw	r3,-8(fp)
   13e5c:	00bfff84 	movi	r2,-2
   13e60:	1884703a 	and	r2,r3,r2
   13e64:	1001703a 	wrctl	status,r2
  
  return context;
   13e68:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   13e6c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   13e70:	e0bfff17 	ldw	r2,-4(fp)
   13e74:	10800283 	ldbu	r2,10(r2)
   13e78:	10803fcc 	andi	r2,r2,255
   13e7c:	10000c26 	beq	r2,zero,13eb0 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   13e80:	000f883a 	mov	r7,zero
   13e84:	01800044 	movi	r6,1
   13e88:	000b883a 	mov	r5,zero
   13e8c:	e13fff17 	ldw	r4,-4(fp)
   13e90:	000f4a00 	call	f4a0 <OS_EventTaskRdy>
   13e94:	e0bffa17 	ldw	r2,-24(fp)
   13e98:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13e9c:	e0bffb17 	ldw	r2,-20(fp)
   13ea0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   13ea4:	000feec0 	call	feec <OS_Sched>
        return (OS_ERR_NONE);
   13ea8:	0005883a 	mov	r2,zero
   13eac:	00001606 	br	13f08 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   13eb0:	e0bfff17 	ldw	r2,-4(fp)
   13eb4:	1080020b 	ldhu	r2,8(r2)
   13eb8:	10ffffcc 	andi	r3,r2,65535
   13ebc:	00bfffd4 	movui	r2,65535
   13ec0:	18800c26 	beq	r3,r2,13ef4 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   13ec4:	e0bfff17 	ldw	r2,-4(fp)
   13ec8:	1080020b 	ldhu	r2,8(r2)
   13ecc:	10800044 	addi	r2,r2,1
   13ed0:	1007883a 	mov	r3,r2
   13ed4:	e0bfff17 	ldw	r2,-4(fp)
   13ed8:	10c0020d 	sth	r3,8(r2)
   13edc:	e0bffa17 	ldw	r2,-24(fp)
   13ee0:	e0bffc15 	stw	r2,-16(fp)
   13ee4:	e0bffc17 	ldw	r2,-16(fp)
   13ee8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   13eec:	0005883a 	mov	r2,zero
   13ef0:	00000506 	br	13f08 <OSSemPost+0xfc>
   13ef4:	e0bffa17 	ldw	r2,-24(fp)
   13ef8:	e0bffd15 	stw	r2,-12(fp)
   13efc:	e0bffd17 	ldw	r2,-12(fp)
   13f00:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   13f04:	00800c84 	movi	r2,50
}
   13f08:	e037883a 	mov	sp,fp
   13f0c:	dfc00117 	ldw	ra,4(sp)
   13f10:	df000017 	ldw	fp,0(sp)
   13f14:	dec00204 	addi	sp,sp,8
   13f18:	f800283a 	ret

00013f1c <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   13f1c:	defff704 	addi	sp,sp,-36
   13f20:	df000815 	stw	fp,32(sp)
   13f24:	df000804 	addi	fp,sp,32
   13f28:	e13ffe15 	stw	r4,-8(fp)
   13f2c:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13f30:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   13f34:	e0bffe17 	ldw	r2,-8(fp)
   13f38:	1000021e 	bne	r2,zero,13f44 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   13f3c:	00800104 	movi	r2,4
   13f40:	00003606 	br	1401c <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   13f44:	e0bfff17 	ldw	r2,-4(fp)
   13f48:	1000021e 	bne	r2,zero,13f54 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   13f4c:	00800244 	movi	r2,9
   13f50:	00003206 	br	1401c <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   13f54:	e0bffe17 	ldw	r2,-8(fp)
   13f58:	10800003 	ldbu	r2,0(r2)
   13f5c:	10803fcc 	andi	r2,r2,255
   13f60:	108000e0 	cmpeqi	r2,r2,3
   13f64:	1000021e 	bne	r2,zero,13f70 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   13f68:	00800044 	movi	r2,1
   13f6c:	00002b06 	br	1401c <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13f70:	0005303a 	rdctl	r2,status
   13f74:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13f78:	e0fffd17 	ldw	r3,-12(fp)
   13f7c:	00bfff84 	movi	r2,-2
   13f80:	1884703a 	and	r2,r3,r2
   13f84:	1001703a 	wrctl	status,r2
  
  return context;
   13f88:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   13f8c:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   13f90:	e0bffe17 	ldw	r2,-8(fp)
   13f94:	10c00283 	ldbu	r3,10(r2)
   13f98:	e0bfff17 	ldw	r2,-4(fp)
   13f9c:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   13fa0:	e0bffe17 	ldw	r2,-8(fp)
   13fa4:	108002c4 	addi	r2,r2,11
   13fa8:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   13fac:	e0bfff17 	ldw	r2,-4(fp)
   13fb0:	10800084 	addi	r2,r2,2
   13fb4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13fb8:	e03ffa05 	stb	zero,-24(fp)
   13fbc:	00000b06 	br	13fec <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   13fc0:	e0bff917 	ldw	r2,-28(fp)
   13fc4:	10c00044 	addi	r3,r2,1
   13fc8:	e0fff915 	stw	r3,-28(fp)
   13fcc:	e0fff817 	ldw	r3,-32(fp)
   13fd0:	19000044 	addi	r4,r3,1
   13fd4:	e13ff815 	stw	r4,-32(fp)
   13fd8:	18c00003 	ldbu	r3,0(r3)
   13fdc:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13fe0:	e0bffa03 	ldbu	r2,-24(fp)
   13fe4:	10800044 	addi	r2,r2,1
   13fe8:	e0bffa05 	stb	r2,-24(fp)
   13fec:	e0bffa03 	ldbu	r2,-24(fp)
   13ff0:	108000f0 	cmpltui	r2,r2,3
   13ff4:	103ff21e 	bne	r2,zero,13fc0 <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   13ff8:	e0bffe17 	ldw	r2,-8(fp)
   13ffc:	10c0020b 	ldhu	r3,8(r2)
   14000:	e0bfff17 	ldw	r2,-4(fp)
   14004:	10c0000d 	sth	r3,0(r2)
   14008:	e0bffb17 	ldw	r2,-20(fp)
   1400c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14010:	e0bffc17 	ldw	r2,-16(fp)
   14014:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14018:	0005883a 	mov	r2,zero
}
   1401c:	e037883a 	mov	sp,fp
   14020:	df000017 	ldw	fp,0(sp)
   14024:	dec00104 	addi	sp,sp,4
   14028:	f800283a 	ret

0001402c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   1402c:	defff904 	addi	sp,sp,-28
   14030:	df000615 	stw	fp,24(sp)
   14034:	df000604 	addi	fp,sp,24
   14038:	e13ffd15 	stw	r4,-12(fp)
   1403c:	2805883a 	mov	r2,r5
   14040:	e1bfff15 	stw	r6,-4(fp)
   14044:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   14048:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1404c:	e0bfff17 	ldw	r2,-4(fp)
   14050:	10003126 	beq	r2,zero,14118 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   14054:	e0bffd17 	ldw	r2,-12(fp)
   14058:	1000041e 	bne	r2,zero,1406c <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   1405c:	e0bfff17 	ldw	r2,-4(fp)
   14060:	00c00104 	movi	r3,4
   14064:	10c00005 	stb	r3,0(r2)
        return;
   14068:	00002c06 	br	1411c <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1406c:	e0bffd17 	ldw	r2,-12(fp)
   14070:	10800003 	ldbu	r2,0(r2)
   14074:	10803fcc 	andi	r2,r2,255
   14078:	108000e0 	cmpeqi	r2,r2,3
   1407c:	1000041e 	bne	r2,zero,14090 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
   14080:	e0bfff17 	ldw	r2,-4(fp)
   14084:	00c00044 	movi	r3,1
   14088:	10c00005 	stb	r3,0(r2)
        return;
   1408c:	00002306 	br	1411c <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14090:	0005303a 	rdctl	r2,status
   14094:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14098:	e0fffc17 	ldw	r3,-16(fp)
   1409c:	00bfff84 	movi	r2,-2
   140a0:	1884703a 	and	r2,r3,r2
   140a4:	1001703a 	wrctl	status,r2
  
  return context;
   140a8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   140ac:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   140b0:	e0bfff17 	ldw	r2,-4(fp)
   140b4:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   140b8:	e0bffd17 	ldw	r2,-12(fp)
   140bc:	1080020b 	ldhu	r2,8(r2)
   140c0:	10bfffcc 	andi	r2,r2,65535
   140c4:	10000426 	beq	r2,zero,140d8 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   140c8:	e0bffd17 	ldw	r2,-12(fp)
   140cc:	e0fffe0b 	ldhu	r3,-8(fp)
   140d0:	10c0020d 	sth	r3,8(r2)
   140d4:	00000b06 	br	14104 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   140d8:	e0bffd17 	ldw	r2,-12(fp)
   140dc:	10800283 	ldbu	r2,10(r2)
   140e0:	10803fcc 	andi	r2,r2,255
   140e4:	1000041e 	bne	r2,zero,140f8 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   140e8:	e0bffd17 	ldw	r2,-12(fp)
   140ec:	e0fffe0b 	ldhu	r3,-8(fp)
   140f0:	10c0020d 	sth	r3,8(r2)
   140f4:	00000306 	br	14104 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   140f8:	e0bfff17 	ldw	r2,-4(fp)
   140fc:	00c01244 	movi	r3,73
   14100:	10c00005 	stb	r3,0(r2)
   14104:	e0bffa17 	ldw	r2,-24(fp)
   14108:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1410c:	e0bffb17 	ldw	r2,-20(fp)
   14110:	1001703a 	wrctl	status,r2
   14114:	00000106 	br	1411c <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   14118:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
   1411c:	e037883a 	mov	sp,fp
   14120:	df000017 	ldw	fp,0(sp)
   14124:	dec00104 	addi	sp,sp,4
   14128:	f800283a 	ret

0001412c <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   1412c:	defff104 	addi	sp,sp,-60
   14130:	dfc00e15 	stw	ra,56(sp)
   14134:	df000d15 	stw	fp,52(sp)
   14138:	df000d04 	addi	fp,sp,52
   1413c:	2007883a 	mov	r3,r4
   14140:	2805883a 	mov	r2,r5
   14144:	e0fffe05 	stb	r3,-8(fp)
   14148:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   1414c:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   14150:	e0bffe03 	ldbu	r2,-8(fp)
   14154:	10800530 	cmpltui	r2,r2,20
   14158:	1000051e 	bne	r2,zero,14170 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   1415c:	e0bffe03 	ldbu	r2,-8(fp)
   14160:	10803fe0 	cmpeqi	r2,r2,255
   14164:	1000021e 	bne	r2,zero,14170 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   14168:	00800a84 	movi	r2,42
   1416c:	00012606 	br	14608 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   14170:	e0bfff03 	ldbu	r2,-4(fp)
   14174:	10800530 	cmpltui	r2,r2,20
   14178:	1000021e 	bne	r2,zero,14184 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   1417c:	00800a84 	movi	r2,42
   14180:	00012106 	br	14608 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14184:	0005303a 	rdctl	r2,status
   14188:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1418c:	e0fffd17 	ldw	r3,-12(fp)
   14190:	00bfff84 	movi	r2,-2
   14194:	1884703a 	and	r2,r3,r2
   14198:	1001703a 	wrctl	status,r2
  
  return context;
   1419c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   141a0:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   141a4:	e0ffff03 	ldbu	r3,-4(fp)
   141a8:	008000b4 	movhi	r2,2
   141ac:	10961604 	addi	r2,r2,22616
   141b0:	18c7883a 	add	r3,r3,r3
   141b4:	18c7883a 	add	r3,r3,r3
   141b8:	10c5883a 	add	r2,r2,r3
   141bc:	10800017 	ldw	r2,0(r2)
   141c0:	10000626 	beq	r2,zero,141dc <OSTaskChangePrio+0xb0>
   141c4:	e0bff517 	ldw	r2,-44(fp)
   141c8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   141cc:	e0bff617 	ldw	r2,-40(fp)
   141d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   141d4:	00800a04 	movi	r2,40
   141d8:	00010b06 	br	14608 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   141dc:	e0bffe03 	ldbu	r2,-8(fp)
   141e0:	10803fd8 	cmpnei	r2,r2,255
   141e4:	1000031e 	bne	r2,zero,141f4 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   141e8:	d0a81617 	ldw	r2,-24488(gp)
   141ec:	10800c83 	ldbu	r2,50(r2)
   141f0:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   141f4:	e0fffe03 	ldbu	r3,-8(fp)
   141f8:	008000b4 	movhi	r2,2
   141fc:	10961604 	addi	r2,r2,22616
   14200:	18c7883a 	add	r3,r3,r3
   14204:	18c7883a 	add	r3,r3,r3
   14208:	10c5883a 	add	r2,r2,r3
   1420c:	10800017 	ldw	r2,0(r2)
   14210:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   14214:	e0bff817 	ldw	r2,-32(fp)
   14218:	1000061e 	bne	r2,zero,14234 <OSTaskChangePrio+0x108>
   1421c:	e0bff517 	ldw	r2,-44(fp)
   14220:	e0bff715 	stw	r2,-36(fp)
   14224:	e0bff717 	ldw	r2,-36(fp)
   14228:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   1422c:	00800a44 	movi	r2,41
   14230:	0000f506 	br	14608 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   14234:	e0bff817 	ldw	r2,-32(fp)
   14238:	10800058 	cmpnei	r2,r2,1
   1423c:	1000061e 	bne	r2,zero,14258 <OSTaskChangePrio+0x12c>
   14240:	e0bff517 	ldw	r2,-44(fp)
   14244:	e0bff915 	stw	r2,-28(fp)
   14248:	e0bff917 	ldw	r2,-28(fp)
   1424c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   14250:	008010c4 	movi	r2,67
   14254:	0000ec06 	br	14608 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   14258:	e0bfff03 	ldbu	r2,-4(fp)
   1425c:	1004d0fa 	srli	r2,r2,3
   14260:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   14264:	e0bfff03 	ldbu	r2,-4(fp)
   14268:	108001cc 	andi	r2,r2,7
   1426c:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
   14270:	e0bffb03 	ldbu	r2,-20(fp)
   14274:	00c00044 	movi	r3,1
   14278:	1884983a 	sll	r2,r3,r2
   1427c:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
   14280:	e0bffb43 	ldbu	r2,-19(fp)
   14284:	00c00044 	movi	r3,1
   14288:	1884983a 	sll	r2,r3,r2
   1428c:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   14290:	e0fffe03 	ldbu	r3,-8(fp)
   14294:	008000b4 	movhi	r2,2
   14298:	10961604 	addi	r2,r2,22616
   1429c:	18c7883a 	add	r3,r3,r3
   142a0:	18c7883a 	add	r3,r3,r3
   142a4:	10c5883a 	add	r2,r2,r3
   142a8:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   142ac:	e0ffff03 	ldbu	r3,-4(fp)
   142b0:	008000b4 	movhi	r2,2
   142b4:	10961604 	addi	r2,r2,22616
   142b8:	18c7883a 	add	r3,r3,r3
   142bc:	18c7883a 	add	r3,r3,r3
   142c0:	10c5883a 	add	r2,r2,r3
   142c4:	e0fff817 	ldw	r3,-32(fp)
   142c8:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   142cc:	e0bff817 	ldw	r2,-32(fp)
   142d0:	10800d03 	ldbu	r2,52(r2)
   142d4:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
   142d8:	e0bff817 	ldw	r2,-32(fp)
   142dc:	10800d83 	ldbu	r2,54(r2)
   142e0:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   142e4:	e0bff817 	ldw	r2,-32(fp)
   142e8:	10800d43 	ldbu	r2,53(r2)
   142ec:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   142f0:	e0fffc03 	ldbu	r3,-16(fp)
   142f4:	d0a81344 	addi	r2,gp,-24499
   142f8:	1885883a 	add	r2,r3,r2
   142fc:	10c00003 	ldbu	r3,0(r2)
   14300:	e0bffc83 	ldbu	r2,-14(fp)
   14304:	1884703a 	and	r2,r3,r2
   14308:	10803fcc 	andi	r2,r2,255
   1430c:	10002826 	beq	r2,zero,143b0 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
   14310:	e0fffc03 	ldbu	r3,-16(fp)
   14314:	e13ffc03 	ldbu	r4,-16(fp)
   14318:	d0a81344 	addi	r2,gp,-24499
   1431c:	2085883a 	add	r2,r4,r2
   14320:	10800003 	ldbu	r2,0(r2)
   14324:	1009883a 	mov	r4,r2
   14328:	e0bffc83 	ldbu	r2,-14(fp)
   1432c:	0084303a 	nor	r2,zero,r2
   14330:	2084703a 	and	r2,r4,r2
   14334:	1009883a 	mov	r4,r2
   14338:	d0a81344 	addi	r2,gp,-24499
   1433c:	1885883a 	add	r2,r3,r2
   14340:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   14344:	e0fffc03 	ldbu	r3,-16(fp)
   14348:	d0a81344 	addi	r2,gp,-24499
   1434c:	1885883a 	add	r2,r3,r2
   14350:	10800003 	ldbu	r2,0(r2)
   14354:	10803fcc 	andi	r2,r2,255
   14358:	1000061e 	bne	r2,zero,14374 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
   1435c:	e0bffc43 	ldbu	r2,-15(fp)
   14360:	0084303a 	nor	r2,zero,r2
   14364:	1007883a 	mov	r3,r2
   14368:	d0a81303 	ldbu	r2,-24500(gp)
   1436c:	1884703a 	and	r2,r3,r2
   14370:	d0a81305 	stb	r2,-24500(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   14374:	d0e81303 	ldbu	r3,-24500(gp)
   14378:	e0bffb83 	ldbu	r2,-18(fp)
   1437c:	1884b03a 	or	r2,r3,r2
   14380:	d0a81305 	stb	r2,-24500(gp)
         OSRdyTbl[y_new] |= bitx_new;
   14384:	e0fffb03 	ldbu	r3,-20(fp)
   14388:	e13ffb03 	ldbu	r4,-20(fp)
   1438c:	d0a81344 	addi	r2,gp,-24499
   14390:	2085883a 	add	r2,r4,r2
   14394:	11000003 	ldbu	r4,0(r2)
   14398:	e0bffbc3 	ldbu	r2,-17(fp)
   1439c:	2084b03a 	or	r2,r4,r2
   143a0:	1009883a 	mov	r4,r2
   143a4:	d0a81344 	addi	r2,gp,-24499
   143a8:	1885883a 	add	r2,r3,r2
   143ac:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   143b0:	e0bff817 	ldw	r2,-32(fp)
   143b4:	10800717 	ldw	r2,28(r2)
   143b8:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   143bc:	e0bff317 	ldw	r2,-52(fp)
   143c0:	10003326 	beq	r2,zero,14490 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   143c4:	e0bffc03 	ldbu	r2,-16(fp)
   143c8:	e0fffc03 	ldbu	r3,-16(fp)
   143cc:	e13ff317 	ldw	r4,-52(fp)
   143d0:	20c7883a 	add	r3,r4,r3
   143d4:	18c002c4 	addi	r3,r3,11
   143d8:	18c00003 	ldbu	r3,0(r3)
   143dc:	1809883a 	mov	r4,r3
   143e0:	e0fffc83 	ldbu	r3,-14(fp)
   143e4:	00c6303a 	nor	r3,zero,r3
   143e8:	20c6703a 	and	r3,r4,r3
   143ec:	1809883a 	mov	r4,r3
   143f0:	e0fff317 	ldw	r3,-52(fp)
   143f4:	1885883a 	add	r2,r3,r2
   143f8:	108002c4 	addi	r2,r2,11
   143fc:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   14400:	e0bffc03 	ldbu	r2,-16(fp)
   14404:	e0fff317 	ldw	r3,-52(fp)
   14408:	1885883a 	add	r2,r3,r2
   1440c:	108002c4 	addi	r2,r2,11
   14410:	10800003 	ldbu	r2,0(r2)
   14414:	10803fcc 	andi	r2,r2,255
   14418:	1000091e 	bne	r2,zero,14440 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
   1441c:	e0bff317 	ldw	r2,-52(fp)
   14420:	10800283 	ldbu	r2,10(r2)
   14424:	1007883a 	mov	r3,r2
   14428:	e0bffc43 	ldbu	r2,-15(fp)
   1442c:	0084303a 	nor	r2,zero,r2
   14430:	1884703a 	and	r2,r3,r2
   14434:	1007883a 	mov	r3,r2
   14438:	e0bff317 	ldw	r2,-52(fp)
   1443c:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   14440:	e0bff317 	ldw	r2,-52(fp)
   14444:	10c00283 	ldbu	r3,10(r2)
   14448:	e0bffb83 	ldbu	r2,-18(fp)
   1444c:	1884b03a 	or	r2,r3,r2
   14450:	1007883a 	mov	r3,r2
   14454:	e0bff317 	ldw	r2,-52(fp)
   14458:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   1445c:	e0bffb03 	ldbu	r2,-20(fp)
   14460:	e0fffb03 	ldbu	r3,-20(fp)
   14464:	e13ff317 	ldw	r4,-52(fp)
   14468:	20c7883a 	add	r3,r4,r3
   1446c:	18c002c4 	addi	r3,r3,11
   14470:	19000003 	ldbu	r4,0(r3)
   14474:	e0fffbc3 	ldbu	r3,-17(fp)
   14478:	20c6b03a 	or	r3,r4,r3
   1447c:	1809883a 	mov	r4,r3
   14480:	e0fff317 	ldw	r3,-52(fp)
   14484:	1885883a 	add	r2,r3,r2
   14488:	108002c4 	addi	r2,r2,11
   1448c:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   14490:	e0bff817 	ldw	r2,-32(fp)
   14494:	10800817 	ldw	r2,32(r2)
   14498:	10004226 	beq	r2,zero,145a4 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
   1449c:	e0bff817 	ldw	r2,-32(fp)
   144a0:	10800817 	ldw	r2,32(r2)
   144a4:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   144a8:	e0bff417 	ldw	r2,-48(fp)
   144ac:	10800017 	ldw	r2,0(r2)
   144b0:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   144b4:	00003906 	br	1459c <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   144b8:	e0bffc03 	ldbu	r2,-16(fp)
   144bc:	e0fffc03 	ldbu	r3,-16(fp)
   144c0:	e13ff317 	ldw	r4,-52(fp)
   144c4:	20c7883a 	add	r3,r4,r3
   144c8:	18c002c4 	addi	r3,r3,11
   144cc:	18c00003 	ldbu	r3,0(r3)
   144d0:	1809883a 	mov	r4,r3
   144d4:	e0fffc83 	ldbu	r3,-14(fp)
   144d8:	00c6303a 	nor	r3,zero,r3
   144dc:	20c6703a 	and	r3,r4,r3
   144e0:	1809883a 	mov	r4,r3
   144e4:	e0fff317 	ldw	r3,-52(fp)
   144e8:	1885883a 	add	r2,r3,r2
   144ec:	108002c4 	addi	r2,r2,11
   144f0:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   144f4:	e0bffc03 	ldbu	r2,-16(fp)
   144f8:	e0fff317 	ldw	r3,-52(fp)
   144fc:	1885883a 	add	r2,r3,r2
   14500:	108002c4 	addi	r2,r2,11
   14504:	10800003 	ldbu	r2,0(r2)
   14508:	10803fcc 	andi	r2,r2,255
   1450c:	1000091e 	bne	r2,zero,14534 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
   14510:	e0bff317 	ldw	r2,-52(fp)
   14514:	10800283 	ldbu	r2,10(r2)
   14518:	1007883a 	mov	r3,r2
   1451c:	e0bffc43 	ldbu	r2,-15(fp)
   14520:	0084303a 	nor	r2,zero,r2
   14524:	1884703a 	and	r2,r3,r2
   14528:	1007883a 	mov	r3,r2
   1452c:	e0bff317 	ldw	r2,-52(fp)
   14530:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   14534:	e0bff317 	ldw	r2,-52(fp)
   14538:	10c00283 	ldbu	r3,10(r2)
   1453c:	e0bffb83 	ldbu	r2,-18(fp)
   14540:	1884b03a 	or	r2,r3,r2
   14544:	1007883a 	mov	r3,r2
   14548:	e0bff317 	ldw	r2,-52(fp)
   1454c:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   14550:	e0bffb03 	ldbu	r2,-20(fp)
   14554:	e0fffb03 	ldbu	r3,-20(fp)
   14558:	e13ff317 	ldw	r4,-52(fp)
   1455c:	20c7883a 	add	r3,r4,r3
   14560:	18c002c4 	addi	r3,r3,11
   14564:	19000003 	ldbu	r4,0(r3)
   14568:	e0fffbc3 	ldbu	r3,-17(fp)
   1456c:	20c6b03a 	or	r3,r4,r3
   14570:	1809883a 	mov	r4,r3
   14574:	e0fff317 	ldw	r3,-52(fp)
   14578:	1885883a 	add	r2,r3,r2
   1457c:	108002c4 	addi	r2,r2,11
   14580:	11000005 	stb	r4,0(r2)
            pevents++;
   14584:	e0bff417 	ldw	r2,-48(fp)
   14588:	10800104 	addi	r2,r2,4
   1458c:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   14590:	e0bff417 	ldw	r2,-48(fp)
   14594:	10800017 	ldw	r2,0(r2)
   14598:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   1459c:	e0bff317 	ldw	r2,-52(fp)
   145a0:	103fc51e 	bne	r2,zero,144b8 <OSTaskChangePrio+0x38c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   145a4:	e0bff817 	ldw	r2,-32(fp)
   145a8:	e0ffff03 	ldbu	r3,-4(fp)
   145ac:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   145b0:	e0bff817 	ldw	r2,-32(fp)
   145b4:	e0fffb03 	ldbu	r3,-20(fp)
   145b8:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   145bc:	e0bff817 	ldw	r2,-32(fp)
   145c0:	e0fffb43 	ldbu	r3,-19(fp)
   145c4:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   145c8:	e0bff817 	ldw	r2,-32(fp)
   145cc:	e0fffb83 	ldbu	r3,-18(fp)
   145d0:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   145d4:	e0bff817 	ldw	r2,-32(fp)
   145d8:	e0fffbc3 	ldbu	r3,-17(fp)
   145dc:	10c00d45 	stb	r3,53(r2)
   145e0:	e0bff517 	ldw	r2,-44(fp)
   145e4:	e0bffa15 	stw	r2,-24(fp)
   145e8:	e0bffa17 	ldw	r2,-24(fp)
   145ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   145f0:	d0a80743 	ldbu	r2,-24547(gp)
   145f4:	10803fcc 	andi	r2,r2,255
   145f8:	10800058 	cmpnei	r2,r2,1
   145fc:	1000011e 	bne	r2,zero,14604 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
   14600:	000feec0 	call	feec <OS_Sched>
    }
    return (OS_ERR_NONE);
   14604:	0005883a 	mov	r2,zero
}
   14608:	e037883a 	mov	sp,fp
   1460c:	dfc00117 	ldw	ra,4(sp)
   14610:	df000017 	ldw	fp,0(sp)
   14614:	dec00204 	addi	sp,sp,8
   14618:	f800283a 	ret

0001461c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   1461c:	deffee04 	addi	sp,sp,-72
   14620:	dfc01115 	stw	ra,68(sp)
   14624:	df001015 	stw	fp,64(sp)
   14628:	df001004 	addi	fp,sp,64
   1462c:	e13ffc15 	stw	r4,-16(fp)
   14630:	e17ffd15 	stw	r5,-12(fp)
   14634:	e1bffe15 	stw	r6,-8(fp)
   14638:	3805883a 	mov	r2,r7
   1463c:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   14640:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   14644:	e0bfff03 	ldbu	r2,-4(fp)
   14648:	10800570 	cmpltui	r2,r2,21
   1464c:	1000021e 	bne	r2,zero,14658 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   14650:	00800a84 	movi	r2,42
   14654:	00005706 	br	147b4 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14658:	0005303a 	rdctl	r2,status
   1465c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14660:	e0fffb17 	ldw	r3,-20(fp)
   14664:	00bfff84 	movi	r2,-2
   14668:	1884703a 	and	r2,r3,r2
   1466c:	1001703a 	wrctl	status,r2
  
  return context;
   14670:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14674:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   14678:	d0a81503 	ldbu	r2,-24492(gp)
   1467c:	10803fcc 	andi	r2,r2,255
   14680:	10000626 	beq	r2,zero,1469c <OSTaskCreate+0x80>
   14684:	e0bff317 	ldw	r2,-52(fp)
   14688:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1468c:	e0bff417 	ldw	r2,-48(fp)
   14690:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   14694:	00800f04 	movi	r2,60
   14698:	00004606 	br	147b4 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   1469c:	e0ffff03 	ldbu	r3,-4(fp)
   146a0:	008000b4 	movhi	r2,2
   146a4:	10961604 	addi	r2,r2,22616
   146a8:	18c7883a 	add	r3,r3,r3
   146ac:	18c7883a 	add	r3,r3,r3
   146b0:	10c5883a 	add	r2,r2,r3
   146b4:	10800017 	ldw	r2,0(r2)
   146b8:	1000391e 	bne	r2,zero,147a0 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   146bc:	e0ffff03 	ldbu	r3,-4(fp)
   146c0:	008000b4 	movhi	r2,2
   146c4:	10961604 	addi	r2,r2,22616
   146c8:	18c7883a 	add	r3,r3,r3
   146cc:	18c7883a 	add	r3,r3,r3
   146d0:	10c5883a 	add	r2,r2,r3
   146d4:	00c00044 	movi	r3,1
   146d8:	10c00015 	stw	r3,0(r2)
   146dc:	e0bff317 	ldw	r2,-52(fp)
   146e0:	e0bff515 	stw	r2,-44(fp)
   146e4:	e0bff517 	ldw	r2,-44(fp)
   146e8:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   146ec:	000f883a 	mov	r7,zero
   146f0:	e1bffe17 	ldw	r6,-8(fp)
   146f4:	e17ffd17 	ldw	r5,-12(fp)
   146f8:	e13ffc17 	ldw	r4,-16(fp)
   146fc:	00193940 	call	19394 <OSTaskStkInit>
   14700:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   14704:	e0bfff03 	ldbu	r2,-4(fp)
   14708:	d8000215 	stw	zero,8(sp)
   1470c:	d8000115 	stw	zero,4(sp)
   14710:	d8000015 	stw	zero,0(sp)
   14714:	000f883a 	mov	r7,zero
   14718:	000d883a 	mov	r6,zero
   1471c:	e17ff717 	ldw	r5,-36(fp)
   14720:	1009883a 	mov	r4,r2
   14724:	00102fc0 	call	102fc <OS_TCBInit>
   14728:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
   1472c:	e0bff803 	ldbu	r2,-32(fp)
   14730:	1000061e 	bne	r2,zero,1474c <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   14734:	d0a80743 	ldbu	r2,-24547(gp)
   14738:	10803fcc 	andi	r2,r2,255
   1473c:	10800058 	cmpnei	r2,r2,1
   14740:	1000151e 	bne	r2,zero,14798 <OSTaskCreate+0x17c>
                OS_Sched();
   14744:	000feec0 	call	feec <OS_Sched>
   14748:	00001306 	br	14798 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1474c:	0005303a 	rdctl	r2,status
   14750:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14754:	e0fffa17 	ldw	r3,-24(fp)
   14758:	00bfff84 	movi	r2,-2
   1475c:	1884703a 	and	r2,r3,r2
   14760:	1001703a 	wrctl	status,r2
  
  return context;
   14764:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   14768:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   1476c:	e0ffff03 	ldbu	r3,-4(fp)
   14770:	008000b4 	movhi	r2,2
   14774:	10961604 	addi	r2,r2,22616
   14778:	18c7883a 	add	r3,r3,r3
   1477c:	18c7883a 	add	r3,r3,r3
   14780:	10c5883a 	add	r2,r2,r3
   14784:	10000015 	stw	zero,0(r2)
   14788:	e0bff317 	ldw	r2,-52(fp)
   1478c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14790:	e0bff617 	ldw	r2,-40(fp)
   14794:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   14798:	e0bff803 	ldbu	r2,-32(fp)
   1479c:	00000506 	br	147b4 <OSTaskCreate+0x198>
   147a0:	e0bff317 	ldw	r2,-52(fp)
   147a4:	e0bff915 	stw	r2,-28(fp)
   147a8:	e0bff917 	ldw	r2,-28(fp)
   147ac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   147b0:	00800a04 	movi	r2,40
}
   147b4:	e037883a 	mov	sp,fp
   147b8:	dfc00117 	ldw	ra,4(sp)
   147bc:	df000017 	ldw	fp,0(sp)
   147c0:	dec00204 	addi	sp,sp,8
   147c4:	f800283a 	ret

000147c8 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   147c8:	deffec04 	addi	sp,sp,-80
   147cc:	dfc01315 	stw	ra,76(sp)
   147d0:	df001215 	stw	fp,72(sp)
   147d4:	df001204 	addi	fp,sp,72
   147d8:	e13ffa15 	stw	r4,-24(fp)
   147dc:	e17ffb15 	stw	r5,-20(fp)
   147e0:	e1bffc15 	stw	r6,-16(fp)
   147e4:	3809883a 	mov	r4,r7
   147e8:	e0c00217 	ldw	r3,8(fp)
   147ec:	e0800617 	ldw	r2,24(fp)
   147f0:	e13ffd05 	stb	r4,-12(fp)
   147f4:	e0fffe0d 	sth	r3,-8(fp)
   147f8:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   147fc:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   14800:	e0bffd03 	ldbu	r2,-12(fp)
   14804:	10800570 	cmpltui	r2,r2,21
   14808:	1000021e 	bne	r2,zero,14814 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   1480c:	00800a84 	movi	r2,42
   14810:	00006106 	br	14998 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14814:	0005303a 	rdctl	r2,status
   14818:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1481c:	e0fff917 	ldw	r3,-28(fp)
   14820:	00bfff84 	movi	r2,-2
   14824:	1884703a 	and	r2,r3,r2
   14828:	1001703a 	wrctl	status,r2
  
  return context;
   1482c:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14830:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   14834:	d0a81503 	ldbu	r2,-24492(gp)
   14838:	10803fcc 	andi	r2,r2,255
   1483c:	10000626 	beq	r2,zero,14858 <OSTaskCreateExt+0x90>
   14840:	e0bff117 	ldw	r2,-60(fp)
   14844:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14848:	e0bff217 	ldw	r2,-56(fp)
   1484c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   14850:	00800f04 	movi	r2,60
   14854:	00005006 	br	14998 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   14858:	e0fffd03 	ldbu	r3,-12(fp)
   1485c:	008000b4 	movhi	r2,2
   14860:	10961604 	addi	r2,r2,22616
   14864:	18c7883a 	add	r3,r3,r3
   14868:	18c7883a 	add	r3,r3,r3
   1486c:	10c5883a 	add	r2,r2,r3
   14870:	10800017 	ldw	r2,0(r2)
   14874:	1000431e 	bne	r2,zero,14984 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   14878:	e0fffd03 	ldbu	r3,-12(fp)
   1487c:	008000b4 	movhi	r2,2
   14880:	10961604 	addi	r2,r2,22616
   14884:	18c7883a 	add	r3,r3,r3
   14888:	18c7883a 	add	r3,r3,r3
   1488c:	10c5883a 	add	r2,r2,r3
   14890:	00c00044 	movi	r3,1
   14894:	10c00015 	stw	r3,0(r2)
   14898:	e0bff117 	ldw	r2,-60(fp)
   1489c:	e0bff315 	stw	r2,-52(fp)
   148a0:	e0bff317 	ldw	r2,-52(fp)
   148a4:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   148a8:	e0bfff0b 	ldhu	r2,-4(fp)
   148ac:	100d883a 	mov	r6,r2
   148b0:	e1400417 	ldw	r5,16(fp)
   148b4:	e1000317 	ldw	r4,12(fp)
   148b8:	00158280 	call	15828 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   148bc:	e0bfff0b 	ldhu	r2,-4(fp)
   148c0:	100f883a 	mov	r7,r2
   148c4:	e1bffc17 	ldw	r6,-16(fp)
   148c8:	e17ffb17 	ldw	r5,-20(fp)
   148cc:	e13ffa17 	ldw	r4,-24(fp)
   148d0:	00193940 	call	19394 <OSTaskStkInit>
   148d4:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   148d8:	e0fffd03 	ldbu	r3,-12(fp)
   148dc:	e13ffe0b 	ldhu	r4,-8(fp)
   148e0:	e0bfff0b 	ldhu	r2,-4(fp)
   148e4:	d8800215 	stw	r2,8(sp)
   148e8:	e0800517 	ldw	r2,20(fp)
   148ec:	d8800115 	stw	r2,4(sp)
   148f0:	e0800417 	ldw	r2,16(fp)
   148f4:	d8800015 	stw	r2,0(sp)
   148f8:	200f883a 	mov	r7,r4
   148fc:	e1800317 	ldw	r6,12(fp)
   14900:	e17ff517 	ldw	r5,-44(fp)
   14904:	1809883a 	mov	r4,r3
   14908:	00102fc0 	call	102fc <OS_TCBInit>
   1490c:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
   14910:	e0bff603 	ldbu	r2,-40(fp)
   14914:	1000061e 	bne	r2,zero,14930 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   14918:	d0a80743 	ldbu	r2,-24547(gp)
   1491c:	10803fcc 	andi	r2,r2,255
   14920:	10800058 	cmpnei	r2,r2,1
   14924:	1000151e 	bne	r2,zero,1497c <OSTaskCreateExt+0x1b4>
                OS_Sched();
   14928:	000feec0 	call	feec <OS_Sched>
   1492c:	00001306 	br	1497c <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14930:	0005303a 	rdctl	r2,status
   14934:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14938:	e0fff817 	ldw	r3,-32(fp)
   1493c:	00bfff84 	movi	r2,-2
   14940:	1884703a 	and	r2,r3,r2
   14944:	1001703a 	wrctl	status,r2
  
  return context;
   14948:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   1494c:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   14950:	e0fffd03 	ldbu	r3,-12(fp)
   14954:	008000b4 	movhi	r2,2
   14958:	10961604 	addi	r2,r2,22616
   1495c:	18c7883a 	add	r3,r3,r3
   14960:	18c7883a 	add	r3,r3,r3
   14964:	10c5883a 	add	r2,r2,r3
   14968:	10000015 	stw	zero,0(r2)
   1496c:	e0bff117 	ldw	r2,-60(fp)
   14970:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14974:	e0bff417 	ldw	r2,-48(fp)
   14978:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   1497c:	e0bff603 	ldbu	r2,-40(fp)
   14980:	00000506 	br	14998 <OSTaskCreateExt+0x1d0>
   14984:	e0bff117 	ldw	r2,-60(fp)
   14988:	e0bff715 	stw	r2,-36(fp)
   1498c:	e0bff717 	ldw	r2,-36(fp)
   14990:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   14994:	00800a04 	movi	r2,40
}
   14998:	e037883a 	mov	sp,fp
   1499c:	dfc00117 	ldw	ra,4(sp)
   149a0:	df000017 	ldw	fp,0(sp)
   149a4:	dec00204 	addi	sp,sp,8
   149a8:	f800283a 	ret

000149ac <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   149ac:	defff404 	addi	sp,sp,-48
   149b0:	dfc00b15 	stw	ra,44(sp)
   149b4:	df000a15 	stw	fp,40(sp)
   149b8:	df000a04 	addi	fp,sp,40
   149bc:	2005883a 	mov	r2,r4
   149c0:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   149c4:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   149c8:	d0a81503 	ldbu	r2,-24492(gp)
   149cc:	10803fcc 	andi	r2,r2,255
   149d0:	10000226 	beq	r2,zero,149dc <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
   149d4:	00801004 	movi	r2,64
   149d8:	0000c006 	br	14cdc <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   149dc:	e0bfff03 	ldbu	r2,-4(fp)
   149e0:	10800518 	cmpnei	r2,r2,20
   149e4:	1000021e 	bne	r2,zero,149f0 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
   149e8:	00800f84 	movi	r2,62
   149ec:	0000bb06 	br	14cdc <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   149f0:	e0bfff03 	ldbu	r2,-4(fp)
   149f4:	10800530 	cmpltui	r2,r2,20
   149f8:	1000051e 	bne	r2,zero,14a10 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
   149fc:	e0bfff03 	ldbu	r2,-4(fp)
   14a00:	10803fe0 	cmpeqi	r2,r2,255
   14a04:	1000021e 	bne	r2,zero,14a10 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
   14a08:	00800a84 	movi	r2,42
   14a0c:	0000b306 	br	14cdc <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14a10:	0005303a 	rdctl	r2,status
   14a14:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14a18:	e0fffe17 	ldw	r3,-8(fp)
   14a1c:	00bfff84 	movi	r2,-2
   14a20:	1884703a 	and	r2,r3,r2
   14a24:	1001703a 	wrctl	status,r2
  
  return context;
   14a28:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   14a2c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   14a30:	e0bfff03 	ldbu	r2,-4(fp)
   14a34:	10803fd8 	cmpnei	r2,r2,255
   14a38:	1000031e 	bne	r2,zero,14a48 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   14a3c:	d0a81617 	ldw	r2,-24488(gp)
   14a40:	10800c83 	ldbu	r2,50(r2)
   14a44:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14a48:	e0ffff03 	ldbu	r3,-4(fp)
   14a4c:	008000b4 	movhi	r2,2
   14a50:	10961604 	addi	r2,r2,22616
   14a54:	18c7883a 	add	r3,r3,r3
   14a58:	18c7883a 	add	r3,r3,r3
   14a5c:	10c5883a 	add	r2,r2,r3
   14a60:	10800017 	ldw	r2,0(r2)
   14a64:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   14a68:	e0bff817 	ldw	r2,-32(fp)
   14a6c:	1000061e 	bne	r2,zero,14a88 <OSTaskDel+0xdc>
   14a70:	e0bff617 	ldw	r2,-40(fp)
   14a74:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14a78:	e0bff717 	ldw	r2,-36(fp)
   14a7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14a80:	008010c4 	movi	r2,67
   14a84:	00009506 	br	14cdc <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   14a88:	e0bff817 	ldw	r2,-32(fp)
   14a8c:	10800058 	cmpnei	r2,r2,1
   14a90:	1000061e 	bne	r2,zero,14aac <OSTaskDel+0x100>
   14a94:	e0bff617 	ldw	r2,-40(fp)
   14a98:	e0bff915 	stw	r2,-28(fp)
   14a9c:	e0bff917 	ldw	r2,-28(fp)
   14aa0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   14aa4:	00800f44 	movi	r2,61
   14aa8:	00008c06 	br	14cdc <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   14aac:	e0bff817 	ldw	r2,-32(fp)
   14ab0:	10800d03 	ldbu	r2,52(r2)
   14ab4:	10c03fcc 	andi	r3,r2,255
   14ab8:	e0bff817 	ldw	r2,-32(fp)
   14abc:	10800d03 	ldbu	r2,52(r2)
   14ac0:	11003fcc 	andi	r4,r2,255
   14ac4:	d0a81344 	addi	r2,gp,-24499
   14ac8:	2085883a 	add	r2,r4,r2
   14acc:	10800003 	ldbu	r2,0(r2)
   14ad0:	1009883a 	mov	r4,r2
   14ad4:	e0bff817 	ldw	r2,-32(fp)
   14ad8:	10800d43 	ldbu	r2,53(r2)
   14adc:	0084303a 	nor	r2,zero,r2
   14ae0:	2084703a 	and	r2,r4,r2
   14ae4:	1009883a 	mov	r4,r2
   14ae8:	d0a81344 	addi	r2,gp,-24499
   14aec:	1885883a 	add	r2,r3,r2
   14af0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   14af4:	e0bff817 	ldw	r2,-32(fp)
   14af8:	10800d03 	ldbu	r2,52(r2)
   14afc:	10c03fcc 	andi	r3,r2,255
   14b00:	d0a81344 	addi	r2,gp,-24499
   14b04:	1885883a 	add	r2,r3,r2
   14b08:	10800003 	ldbu	r2,0(r2)
   14b0c:	10803fcc 	andi	r2,r2,255
   14b10:	1000071e 	bne	r2,zero,14b30 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   14b14:	e0bff817 	ldw	r2,-32(fp)
   14b18:	10800d83 	ldbu	r2,54(r2)
   14b1c:	0084303a 	nor	r2,zero,r2
   14b20:	1007883a 	mov	r3,r2
   14b24:	d0a81303 	ldbu	r2,-24500(gp)
   14b28:	1884703a 	and	r2,r3,r2
   14b2c:	d0a81305 	stb	r2,-24500(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   14b30:	e0bff817 	ldw	r2,-32(fp)
   14b34:	10800717 	ldw	r2,28(r2)
   14b38:	10000526 	beq	r2,zero,14b50 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   14b3c:	e0bff817 	ldw	r2,-32(fp)
   14b40:	10800717 	ldw	r2,28(r2)
   14b44:	100b883a 	mov	r5,r2
   14b48:	e13ff817 	ldw	r4,-32(fp)
   14b4c:	000f8980 	call	f898 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   14b50:	e0bff817 	ldw	r2,-32(fp)
   14b54:	10800817 	ldw	r2,32(r2)
   14b58:	10000526 	beq	r2,zero,14b70 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   14b5c:	e0bff817 	ldw	r2,-32(fp)
   14b60:	10800817 	ldw	r2,32(r2)
   14b64:	100b883a 	mov	r5,r2
   14b68:	e13ff817 	ldw	r4,-32(fp)
   14b6c:	000f9500 	call	f950 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   14b70:	e0bff817 	ldw	r2,-32(fp)
   14b74:	10800a17 	ldw	r2,40(r2)
   14b78:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   14b7c:	e0bffb17 	ldw	r2,-20(fp)
   14b80:	10000226 	beq	r2,zero,14b8c <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   14b84:	e13ffb17 	ldw	r4,-20(fp)
   14b88:	0011dd00 	call	11dd0 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   14b8c:	e0bff817 	ldw	r2,-32(fp)
   14b90:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   14b94:	e0bff817 	ldw	r2,-32(fp)
   14b98:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   14b9c:	e0bff817 	ldw	r2,-32(fp)
   14ba0:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   14ba4:	d0a80703 	ldbu	r2,-24548(gp)
   14ba8:	10803fcc 	andi	r2,r2,255
   14bac:	10803fe0 	cmpeqi	r2,r2,255
   14bb0:	1000031e 	bne	r2,zero,14bc0 <OSTaskDel+0x214>
        OSLockNesting++;
   14bb4:	d0a80703 	ldbu	r2,-24548(gp)
   14bb8:	10800044 	addi	r2,r2,1
   14bbc:	d0a80705 	stb	r2,-24548(gp)
   14bc0:	e0bff617 	ldw	r2,-40(fp)
   14bc4:	e0bffd15 	stw	r2,-12(fp)
   14bc8:	e0bffd17 	ldw	r2,-12(fp)
   14bcc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   14bd0:	000f4800 	call	f480 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14bd4:	0005303a 	rdctl	r2,status
   14bd8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14bdc:	e0fffa17 	ldw	r3,-24(fp)
   14be0:	00bfff84 	movi	r2,-2
   14be4:	1884703a 	and	r2,r3,r2
   14be8:	1001703a 	wrctl	status,r2
  
  return context;
   14bec:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   14bf0:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   14bf4:	d0a80703 	ldbu	r2,-24548(gp)
   14bf8:	10803fcc 	andi	r2,r2,255
   14bfc:	10000326 	beq	r2,zero,14c0c <OSTaskDel+0x260>
        OSLockNesting--;
   14c00:	d0a80703 	ldbu	r2,-24548(gp)
   14c04:	10bfffc4 	addi	r2,r2,-1
   14c08:	d0a80705 	stb	r2,-24548(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   14c0c:	e13ff817 	ldw	r4,-32(fp)
   14c10:	00195140 	call	19514 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   14c14:	d0a80f43 	ldbu	r2,-24515(gp)
   14c18:	10bfffc4 	addi	r2,r2,-1
   14c1c:	d0a80f45 	stb	r2,-24515(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   14c20:	e0ffff03 	ldbu	r3,-4(fp)
   14c24:	008000b4 	movhi	r2,2
   14c28:	10961604 	addi	r2,r2,22616
   14c2c:	18c7883a 	add	r3,r3,r3
   14c30:	18c7883a 	add	r3,r3,r3
   14c34:	10c5883a 	add	r2,r2,r3
   14c38:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   14c3c:	e0bff817 	ldw	r2,-32(fp)
   14c40:	10800617 	ldw	r2,24(r2)
   14c44:	1000071e 	bne	r2,zero,14c64 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   14c48:	e0bff817 	ldw	r2,-32(fp)
   14c4c:	10800517 	ldw	r2,20(r2)
   14c50:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   14c54:	e0bff817 	ldw	r2,-32(fp)
   14c58:	10800517 	ldw	r2,20(r2)
   14c5c:	d0a80a15 	stw	r2,-24536(gp)
   14c60:	00000a06 	br	14c8c <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   14c64:	e0bff817 	ldw	r2,-32(fp)
   14c68:	10800617 	ldw	r2,24(r2)
   14c6c:	e0fff817 	ldw	r3,-32(fp)
   14c70:	18c00517 	ldw	r3,20(r3)
   14c74:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   14c78:	e0bff817 	ldw	r2,-32(fp)
   14c7c:	10800517 	ldw	r2,20(r2)
   14c80:	e0fff817 	ldw	r3,-32(fp)
   14c84:	18c00617 	ldw	r3,24(r3)
   14c88:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   14c8c:	d0e80e17 	ldw	r3,-24520(gp)
   14c90:	e0bff817 	ldw	r2,-32(fp)
   14c94:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   14c98:	e0bff817 	ldw	r2,-32(fp)
   14c9c:	d0a80e15 	stw	r2,-24520(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   14ca0:	e0bff817 	ldw	r2,-32(fp)
   14ca4:	00c00fc4 	movi	r3,63
   14ca8:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   14cac:	e0bff817 	ldw	r2,-32(fp)
   14cb0:	10001345 	stb	zero,77(r2)
   14cb4:	e0bff617 	ldw	r2,-40(fp)
   14cb8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14cbc:	e0bffc17 	ldw	r2,-16(fp)
   14cc0:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   14cc4:	d0a80743 	ldbu	r2,-24547(gp)
   14cc8:	10803fcc 	andi	r2,r2,255
   14ccc:	10800058 	cmpnei	r2,r2,1
   14cd0:	1000011e 	bne	r2,zero,14cd8 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
   14cd4:	000feec0 	call	feec <OS_Sched>
    }
    return (OS_ERR_NONE);
   14cd8:	0005883a 	mov	r2,zero
}
   14cdc:	e037883a 	mov	sp,fp
   14ce0:	dfc00117 	ldw	ra,4(sp)
   14ce4:	df000017 	ldw	fp,0(sp)
   14ce8:	dec00204 	addi	sp,sp,8
   14cec:	f800283a 	ret

00014cf0 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   14cf0:	defff504 	addi	sp,sp,-44
   14cf4:	df000a15 	stw	fp,40(sp)
   14cf8:	df000a04 	addi	fp,sp,40
   14cfc:	2005883a 	mov	r2,r4
   14d00:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14d04:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   14d08:	e0bfff03 	ldbu	r2,-4(fp)
   14d0c:	10800518 	cmpnei	r2,r2,20
   14d10:	1000021e 	bne	r2,zero,14d1c <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   14d14:	00800f84 	movi	r2,62
   14d18:	00004506 	br	14e30 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   14d1c:	e0bfff03 	ldbu	r2,-4(fp)
   14d20:	10800530 	cmpltui	r2,r2,20
   14d24:	1000051e 	bne	r2,zero,14d3c <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   14d28:	e0bfff03 	ldbu	r2,-4(fp)
   14d2c:	10803fe0 	cmpeqi	r2,r2,255
   14d30:	1000021e 	bne	r2,zero,14d3c <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   14d34:	00800a84 	movi	r2,42
   14d38:	00003d06 	br	14e30 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   14d3c:	e0bfff03 	ldbu	r2,-4(fp)
   14d40:	10803fd8 	cmpnei	r2,r2,255
   14d44:	1000111e 	bne	r2,zero,14d8c <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14d48:	0005303a 	rdctl	r2,status
   14d4c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14d50:	e0fff917 	ldw	r3,-28(fp)
   14d54:	00bfff84 	movi	r2,-2
   14d58:	1884703a 	and	r2,r3,r2
   14d5c:	1001703a 	wrctl	status,r2
  
  return context;
   14d60:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   14d64:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   14d68:	d0a81617 	ldw	r2,-24488(gp)
   14d6c:	10800dc3 	ldbu	r2,55(r2)
   14d70:	e0bff805 	stb	r2,-32(fp)
   14d74:	e0bff617 	ldw	r2,-40(fp)
   14d78:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14d7c:	e0bffe17 	ldw	r2,-8(fp)
   14d80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   14d84:	e0bff803 	ldbu	r2,-32(fp)
   14d88:	00002906 	br	14e30 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14d8c:	0005303a 	rdctl	r2,status
   14d90:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14d94:	e0fff717 	ldw	r3,-36(fp)
   14d98:	00bfff84 	movi	r2,-2
   14d9c:	1884703a 	and	r2,r3,r2
   14da0:	1001703a 	wrctl	status,r2
  
  return context;
   14da4:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   14da8:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   14dac:	e0ffff03 	ldbu	r3,-4(fp)
   14db0:	008000b4 	movhi	r2,2
   14db4:	10961604 	addi	r2,r2,22616
   14db8:	18c7883a 	add	r3,r3,r3
   14dbc:	18c7883a 	add	r3,r3,r3
   14dc0:	10c5883a 	add	r2,r2,r3
   14dc4:	10800017 	ldw	r2,0(r2)
   14dc8:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   14dcc:	e0bffb17 	ldw	r2,-20(fp)
   14dd0:	1000061e 	bne	r2,zero,14dec <OSTaskDelReq+0xfc>
   14dd4:	e0bff617 	ldw	r2,-40(fp)
   14dd8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14ddc:	e0bffa17 	ldw	r2,-24(fp)
   14de0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   14de4:	008010c4 	movi	r2,67
   14de8:	00001106 	br	14e30 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   14dec:	e0bffb17 	ldw	r2,-20(fp)
   14df0:	10800058 	cmpnei	r2,r2,1
   14df4:	1000061e 	bne	r2,zero,14e10 <OSTaskDelReq+0x120>
   14df8:	e0bff617 	ldw	r2,-40(fp)
   14dfc:	e0bffc15 	stw	r2,-16(fp)
   14e00:	e0bffc17 	ldw	r2,-16(fp)
   14e04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   14e08:	00800f44 	movi	r2,61
   14e0c:	00000806 	br	14e30 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   14e10:	e0bffb17 	ldw	r2,-20(fp)
   14e14:	00c00fc4 	movi	r3,63
   14e18:	10c00dc5 	stb	r3,55(r2)
   14e1c:	e0bff617 	ldw	r2,-40(fp)
   14e20:	e0bffd15 	stw	r2,-12(fp)
   14e24:	e0bffd17 	ldw	r2,-12(fp)
   14e28:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14e2c:	0005883a 	mov	r2,zero
}
   14e30:	e037883a 	mov	sp,fp
   14e34:	df000017 	ldw	fp,0(sp)
   14e38:	dec00104 	addi	sp,sp,4
   14e3c:	f800283a 	ret

00014e40 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   14e40:	defff404 	addi	sp,sp,-48
   14e44:	dfc00b15 	stw	ra,44(sp)
   14e48:	df000a15 	stw	fp,40(sp)
   14e4c:	df000a04 	addi	fp,sp,40
   14e50:	2005883a 	mov	r2,r4
   14e54:	e17ffe15 	stw	r5,-8(fp)
   14e58:	e1bfff15 	stw	r6,-4(fp)
   14e5c:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   14e60:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   14e64:	e0bfff17 	ldw	r2,-4(fp)
   14e68:	1000021e 	bne	r2,zero,14e74 <OSTaskNameGet+0x34>
        return (0);
   14e6c:	0005883a 	mov	r2,zero
   14e70:	00005406 	br	14fc4 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   14e74:	e0bffd03 	ldbu	r2,-12(fp)
   14e78:	10800570 	cmpltui	r2,r2,21
   14e7c:	1000081e 	bne	r2,zero,14ea0 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   14e80:	e0bffd03 	ldbu	r2,-12(fp)
   14e84:	10803fe0 	cmpeqi	r2,r2,255
   14e88:	1000051e 	bne	r2,zero,14ea0 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   14e8c:	e0bfff17 	ldw	r2,-4(fp)
   14e90:	00c00a84 	movi	r3,42
   14e94:	10c00005 	stb	r3,0(r2)
            return (0);
   14e98:	0005883a 	mov	r2,zero
   14e9c:	00004906 	br	14fc4 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   14ea0:	e0bffe17 	ldw	r2,-8(fp)
   14ea4:	1000051e 	bne	r2,zero,14ebc <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   14ea8:	e0bfff17 	ldw	r2,-4(fp)
   14eac:	00c00304 	movi	r3,12
   14eb0:	10c00005 	stb	r3,0(r2)
        return (0);
   14eb4:	0005883a 	mov	r2,zero
   14eb8:	00004206 	br	14fc4 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   14ebc:	d0a81503 	ldbu	r2,-24492(gp)
   14ec0:	10803fcc 	andi	r2,r2,255
   14ec4:	10000526 	beq	r2,zero,14edc <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
   14ec8:	e0bfff17 	ldw	r2,-4(fp)
   14ecc:	00c00444 	movi	r3,17
   14ed0:	10c00005 	stb	r3,0(r2)
        return (0);
   14ed4:	0005883a 	mov	r2,zero
   14ed8:	00003a06 	br	14fc4 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14edc:	0005303a 	rdctl	r2,status
   14ee0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14ee4:	e0fffc17 	ldw	r3,-16(fp)
   14ee8:	00bfff84 	movi	r2,-2
   14eec:	1884703a 	and	r2,r3,r2
   14ef0:	1001703a 	wrctl	status,r2
  
  return context;
   14ef4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14ef8:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   14efc:	e0bffd03 	ldbu	r2,-12(fp)
   14f00:	10803fd8 	cmpnei	r2,r2,255
   14f04:	1000031e 	bne	r2,zero,14f14 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   14f08:	d0a81617 	ldw	r2,-24488(gp)
   14f0c:	10800c83 	ldbu	r2,50(r2)
   14f10:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14f14:	e0fffd03 	ldbu	r3,-12(fp)
   14f18:	008000b4 	movhi	r2,2
   14f1c:	10961604 	addi	r2,r2,22616
   14f20:	18c7883a 	add	r3,r3,r3
   14f24:	18c7883a 	add	r3,r3,r3
   14f28:	10c5883a 	add	r2,r2,r3
   14f2c:	10800017 	ldw	r2,0(r2)
   14f30:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   14f34:	e0bff817 	ldw	r2,-32(fp)
   14f38:	1000091e 	bne	r2,zero,14f60 <OSTaskNameGet+0x120>
   14f3c:	e0bff617 	ldw	r2,-40(fp)
   14f40:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14f44:	e0bff717 	ldw	r2,-36(fp)
   14f48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14f4c:	e0bfff17 	ldw	r2,-4(fp)
   14f50:	00c010c4 	movi	r3,67
   14f54:	10c00005 	stb	r3,0(r2)
        return (0);
   14f58:	0005883a 	mov	r2,zero
   14f5c:	00001906 	br	14fc4 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   14f60:	e0bff817 	ldw	r2,-32(fp)
   14f64:	10800058 	cmpnei	r2,r2,1
   14f68:	1000091e 	bne	r2,zero,14f90 <OSTaskNameGet+0x150>
   14f6c:	e0bff617 	ldw	r2,-40(fp)
   14f70:	e0bff915 	stw	r2,-28(fp)
   14f74:	e0bff917 	ldw	r2,-28(fp)
   14f78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14f7c:	e0bfff17 	ldw	r2,-4(fp)
   14f80:	00c010c4 	movi	r3,67
   14f84:	10c00005 	stb	r3,0(r2)
        return (0);
   14f88:	0005883a 	mov	r2,zero
   14f8c:	00000d06 	br	14fc4 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   14f90:	e0bff817 	ldw	r2,-32(fp)
   14f94:	10801304 	addi	r2,r2,76
   14f98:	100b883a 	mov	r5,r2
   14f9c:	e13ffe17 	ldw	r4,-8(fp)
   14fa0:	00100300 	call	10030 <OS_StrCopy>
   14fa4:	e0bffb05 	stb	r2,-20(fp)
   14fa8:	e0bff617 	ldw	r2,-40(fp)
   14fac:	e0bffa15 	stw	r2,-24(fp)
   14fb0:	e0bffa17 	ldw	r2,-24(fp)
   14fb4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14fb8:	e0bfff17 	ldw	r2,-4(fp)
   14fbc:	10000005 	stb	zero,0(r2)
    return (len);
   14fc0:	e0bffb03 	ldbu	r2,-20(fp)
}
   14fc4:	e037883a 	mov	sp,fp
   14fc8:	dfc00117 	ldw	ra,4(sp)
   14fcc:	df000017 	ldw	fp,0(sp)
   14fd0:	dec00204 	addi	sp,sp,8
   14fd4:	f800283a 	ret

00014fd8 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   14fd8:	defff304 	addi	sp,sp,-52
   14fdc:	dfc00c15 	stw	ra,48(sp)
   14fe0:	df000b15 	stw	fp,44(sp)
   14fe4:	df000b04 	addi	fp,sp,44
   14fe8:	2005883a 	mov	r2,r4
   14fec:	e17ffe15 	stw	r5,-8(fp)
   14ff0:	e1bfff15 	stw	r6,-4(fp)
   14ff4:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   14ff8:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   14ffc:	e0bfff17 	ldw	r2,-4(fp)
   15000:	10005c26 	beq	r2,zero,15174 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   15004:	e0bffd03 	ldbu	r2,-12(fp)
   15008:	10800570 	cmpltui	r2,r2,21
   1500c:	1000071e 	bne	r2,zero,1502c <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   15010:	e0bffd03 	ldbu	r2,-12(fp)
   15014:	10803fe0 	cmpeqi	r2,r2,255
   15018:	1000041e 	bne	r2,zero,1502c <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   1501c:	e0bfff17 	ldw	r2,-4(fp)
   15020:	00c00a84 	movi	r3,42
   15024:	10c00005 	stb	r3,0(r2)
            return;
   15028:	00005306 	br	15178 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   1502c:	e0bffe17 	ldw	r2,-8(fp)
   15030:	1000041e 	bne	r2,zero,15044 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   15034:	e0bfff17 	ldw	r2,-4(fp)
   15038:	00c00304 	movi	r3,12
   1503c:	10c00005 	stb	r3,0(r2)
        return;
   15040:	00004d06 	br	15178 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   15044:	d0a81503 	ldbu	r2,-24492(gp)
   15048:	10803fcc 	andi	r2,r2,255
   1504c:	10000426 	beq	r2,zero,15060 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
   15050:	e0bfff17 	ldw	r2,-4(fp)
   15054:	00c00484 	movi	r3,18
   15058:	10c00005 	stb	r3,0(r2)
        return;
   1505c:	00004606 	br	15178 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15060:	0005303a 	rdctl	r2,status
   15064:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15068:	e0fffc17 	ldw	r3,-16(fp)
   1506c:	00bfff84 	movi	r2,-2
   15070:	1884703a 	and	r2,r3,r2
   15074:	1001703a 	wrctl	status,r2
  
  return context;
   15078:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1507c:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   15080:	e0bffd03 	ldbu	r2,-12(fp)
   15084:	10803fd8 	cmpnei	r2,r2,255
   15088:	1000031e 	bne	r2,zero,15098 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
   1508c:	d0a81617 	ldw	r2,-24488(gp)
   15090:	10800c83 	ldbu	r2,50(r2)
   15094:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   15098:	e0fffd03 	ldbu	r3,-12(fp)
   1509c:	008000b4 	movhi	r2,2
   150a0:	10961604 	addi	r2,r2,22616
   150a4:	18c7883a 	add	r3,r3,r3
   150a8:	18c7883a 	add	r3,r3,r3
   150ac:	10c5883a 	add	r2,r2,r3
   150b0:	10800017 	ldw	r2,0(r2)
   150b4:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   150b8:	e0bff717 	ldw	r2,-36(fp)
   150bc:	1000081e 	bne	r2,zero,150e0 <OSTaskNameSet+0x108>
   150c0:	e0bff517 	ldw	r2,-44(fp)
   150c4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   150c8:	e0bff617 	ldw	r2,-40(fp)
   150cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   150d0:	e0bfff17 	ldw	r2,-4(fp)
   150d4:	00c010c4 	movi	r3,67
   150d8:	10c00005 	stb	r3,0(r2)
        return;
   150dc:	00002606 	br	15178 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   150e0:	e0bff717 	ldw	r2,-36(fp)
   150e4:	10800058 	cmpnei	r2,r2,1
   150e8:	1000081e 	bne	r2,zero,1510c <OSTaskNameSet+0x134>
   150ec:	e0bff517 	ldw	r2,-44(fp)
   150f0:	e0bff815 	stw	r2,-32(fp)
   150f4:	e0bff817 	ldw	r2,-32(fp)
   150f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   150fc:	e0bfff17 	ldw	r2,-4(fp)
   15100:	00c010c4 	movi	r3,67
   15104:	10c00005 	stb	r3,0(r2)
        return;
   15108:	00001b06 	br	15178 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   1510c:	e13ffe17 	ldw	r4,-8(fp)
   15110:	00100a40 	call	100a4 <OS_StrLen>
   15114:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   15118:	e0bffa03 	ldbu	r2,-24(fp)
   1511c:	10800830 	cmpltui	r2,r2,32
   15120:	1000081e 	bne	r2,zero,15144 <OSTaskNameSet+0x16c>
   15124:	e0bff517 	ldw	r2,-44(fp)
   15128:	e0bff915 	stw	r2,-28(fp)
   1512c:	e0bff917 	ldw	r2,-28(fp)
   15130:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   15134:	e0bfff17 	ldw	r2,-4(fp)
   15138:	00c01044 	movi	r3,65
   1513c:	10c00005 	stb	r3,0(r2)
        return;
   15140:	00000d06 	br	15178 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   15144:	e0bff717 	ldw	r2,-36(fp)
   15148:	10801304 	addi	r2,r2,76
   1514c:	e17ffe17 	ldw	r5,-8(fp)
   15150:	1009883a 	mov	r4,r2
   15154:	00100300 	call	10030 <OS_StrCopy>
   15158:	e0bff517 	ldw	r2,-44(fp)
   1515c:	e0bffb15 	stw	r2,-20(fp)
   15160:	e0bffb17 	ldw	r2,-20(fp)
   15164:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   15168:	e0bfff17 	ldw	r2,-4(fp)
   1516c:	10000005 	stb	zero,0(r2)
   15170:	00000106 	br	15178 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
   15174:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   15178:	e037883a 	mov	sp,fp
   1517c:	dfc00117 	ldw	ra,4(sp)
   15180:	df000017 	ldw	fp,0(sp)
   15184:	dec00204 	addi	sp,sp,8
   15188:	f800283a 	ret

0001518c <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   1518c:	defff404 	addi	sp,sp,-48
   15190:	dfc00b15 	stw	ra,44(sp)
   15194:	df000a15 	stw	fp,40(sp)
   15198:	df000a04 	addi	fp,sp,40
   1519c:	2005883a 	mov	r2,r4
   151a0:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   151a4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   151a8:	e0bfff03 	ldbu	r2,-4(fp)
   151ac:	10800530 	cmpltui	r2,r2,20
   151b0:	1000021e 	bne	r2,zero,151bc <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   151b4:	00800a84 	movi	r2,42
   151b8:	00006406 	br	1534c <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   151bc:	0005303a 	rdctl	r2,status
   151c0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   151c4:	e0fffe17 	ldw	r3,-8(fp)
   151c8:	00bfff84 	movi	r2,-2
   151cc:	1884703a 	and	r2,r3,r2
   151d0:	1001703a 	wrctl	status,r2
  
  return context;
   151d4:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   151d8:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   151dc:	e0ffff03 	ldbu	r3,-4(fp)
   151e0:	008000b4 	movhi	r2,2
   151e4:	10961604 	addi	r2,r2,22616
   151e8:	18c7883a 	add	r3,r3,r3
   151ec:	18c7883a 	add	r3,r3,r3
   151f0:	10c5883a 	add	r2,r2,r3
   151f4:	10800017 	ldw	r2,0(r2)
   151f8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   151fc:	e0bff817 	ldw	r2,-32(fp)
   15200:	1000061e 	bne	r2,zero,1521c <OSTaskResume+0x90>
   15204:	e0bff617 	ldw	r2,-40(fp)
   15208:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1520c:	e0bff717 	ldw	r2,-36(fp)
   15210:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   15214:	00801184 	movi	r2,70
   15218:	00004c06 	br	1534c <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   1521c:	e0bff817 	ldw	r2,-32(fp)
   15220:	10800058 	cmpnei	r2,r2,1
   15224:	1000061e 	bne	r2,zero,15240 <OSTaskResume+0xb4>
   15228:	e0bff617 	ldw	r2,-40(fp)
   1522c:	e0bff915 	stw	r2,-28(fp)
   15230:	e0bff917 	ldw	r2,-28(fp)
   15234:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   15238:	008010c4 	movi	r2,67
   1523c:	00004306 	br	1534c <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   15240:	e0bff817 	ldw	r2,-32(fp)
   15244:	10800c03 	ldbu	r2,48(r2)
   15248:	10803fcc 	andi	r2,r2,255
   1524c:	1080020c 	andi	r2,r2,8
   15250:	10003926 	beq	r2,zero,15338 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   15254:	e0bff817 	ldw	r2,-32(fp)
   15258:	10c00c03 	ldbu	r3,48(r2)
   1525c:	00bffdc4 	movi	r2,-9
   15260:	1884703a 	and	r2,r3,r2
   15264:	1007883a 	mov	r3,r2
   15268:	e0bff817 	ldw	r2,-32(fp)
   1526c:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   15270:	e0bff817 	ldw	r2,-32(fp)
   15274:	10800c03 	ldbu	r2,48(r2)
   15278:	10803fcc 	andi	r2,r2,255
   1527c:	1000281e 	bne	r2,zero,15320 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
   15280:	e0bff817 	ldw	r2,-32(fp)
   15284:	10800b8b 	ldhu	r2,46(r2)
   15288:	10bfffcc 	andi	r2,r2,65535
   1528c:	10001f1e 	bne	r2,zero,1530c <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   15290:	e0bff817 	ldw	r2,-32(fp)
   15294:	10c00d83 	ldbu	r3,54(r2)
   15298:	d0a81303 	ldbu	r2,-24500(gp)
   1529c:	1884b03a 	or	r2,r3,r2
   152a0:	d0a81305 	stb	r2,-24500(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   152a4:	e0bff817 	ldw	r2,-32(fp)
   152a8:	10800d03 	ldbu	r2,52(r2)
   152ac:	10c03fcc 	andi	r3,r2,255
   152b0:	e0bff817 	ldw	r2,-32(fp)
   152b4:	10800d03 	ldbu	r2,52(r2)
   152b8:	11003fcc 	andi	r4,r2,255
   152bc:	d0a81344 	addi	r2,gp,-24499
   152c0:	2085883a 	add	r2,r4,r2
   152c4:	11000003 	ldbu	r4,0(r2)
   152c8:	e0bff817 	ldw	r2,-32(fp)
   152cc:	10800d43 	ldbu	r2,53(r2)
   152d0:	2084b03a 	or	r2,r4,r2
   152d4:	1009883a 	mov	r4,r2
   152d8:	d0a81344 	addi	r2,gp,-24499
   152dc:	1885883a 	add	r2,r3,r2
   152e0:	11000005 	stb	r4,0(r2)
   152e4:	e0bff617 	ldw	r2,-40(fp)
   152e8:	e0bffa15 	stw	r2,-24(fp)
   152ec:	e0bffa17 	ldw	r2,-24(fp)
   152f0:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   152f4:	d0a80743 	ldbu	r2,-24547(gp)
   152f8:	10803fcc 	andi	r2,r2,255
   152fc:	10800058 	cmpnei	r2,r2,1
   15300:	10000b1e 	bne	r2,zero,15330 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
   15304:	000feec0 	call	feec <OS_Sched>
   15308:	00000906 	br	15330 <OSTaskResume+0x1a4>
   1530c:	e0bff617 	ldw	r2,-40(fp)
   15310:	e0bffb15 	stw	r2,-20(fp)
   15314:	e0bffb17 	ldw	r2,-20(fp)
   15318:	1001703a 	wrctl	status,r2
   1531c:	00000406 	br	15330 <OSTaskResume+0x1a4>
   15320:	e0bff617 	ldw	r2,-40(fp)
   15324:	e0bffc15 	stw	r2,-16(fp)
   15328:	e0bffc17 	ldw	r2,-16(fp)
   1532c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   15330:	0005883a 	mov	r2,zero
   15334:	00000506 	br	1534c <OSTaskResume+0x1c0>
   15338:	e0bff617 	ldw	r2,-40(fp)
   1533c:	e0bffd15 	stw	r2,-12(fp)
   15340:	e0bffd17 	ldw	r2,-12(fp)
   15344:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   15348:	00801104 	movi	r2,68
}
   1534c:	e037883a 	mov	sp,fp
   15350:	dfc00117 	ldw	ra,4(sp)
   15354:	df000017 	ldw	fp,0(sp)
   15358:	dec00204 	addi	sp,sp,8
   1535c:	f800283a 	ret

00015360 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   15360:	defff304 	addi	sp,sp,-52
   15364:	df000c15 	stw	fp,48(sp)
   15368:	df000c04 	addi	fp,sp,48
   1536c:	2005883a 	mov	r2,r4
   15370:	e17fff15 	stw	r5,-4(fp)
   15374:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   15378:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   1537c:	e0bffe03 	ldbu	r2,-8(fp)
   15380:	10800570 	cmpltui	r2,r2,21
   15384:	1000051e 	bne	r2,zero,1539c <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   15388:	e0bffe03 	ldbu	r2,-8(fp)
   1538c:	10803fe0 	cmpeqi	r2,r2,255
   15390:	1000021e 	bne	r2,zero,1539c <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   15394:	00800a84 	movi	r2,42
   15398:	00005d06 	br	15510 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   1539c:	e0bfff17 	ldw	r2,-4(fp)
   153a0:	1000021e 	bne	r2,zero,153ac <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   153a4:	00800244 	movi	r2,9
   153a8:	00005906 	br	15510 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   153ac:	e0bfff17 	ldw	r2,-4(fp)
   153b0:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   153b4:	e0bfff17 	ldw	r2,-4(fp)
   153b8:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   153bc:	0005303a 	rdctl	r2,status
   153c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   153c4:	e0fffd17 	ldw	r3,-12(fp)
   153c8:	00bfff84 	movi	r2,-2
   153cc:	1884703a 	and	r2,r3,r2
   153d0:	1001703a 	wrctl	status,r2
  
  return context;
   153d4:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
   153d8:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   153dc:	e0bffe03 	ldbu	r2,-8(fp)
   153e0:	10803fd8 	cmpnei	r2,r2,255
   153e4:	1000031e 	bne	r2,zero,153f4 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
   153e8:	d0a81617 	ldw	r2,-24488(gp)
   153ec:	10800c83 	ldbu	r2,50(r2)
   153f0:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   153f4:	e0fffe03 	ldbu	r3,-8(fp)
   153f8:	008000b4 	movhi	r2,2
   153fc:	10961604 	addi	r2,r2,22616
   15400:	18c7883a 	add	r3,r3,r3
   15404:	18c7883a 	add	r3,r3,r3
   15408:	10c5883a 	add	r2,r2,r3
   1540c:	10800017 	ldw	r2,0(r2)
   15410:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   15414:	e0bff817 	ldw	r2,-32(fp)
   15418:	1000061e 	bne	r2,zero,15434 <OSTaskStkChk+0xd4>
   1541c:	e0bff617 	ldw	r2,-40(fp)
   15420:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15424:	e0bff717 	ldw	r2,-36(fp)
   15428:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1542c:	008010c4 	movi	r2,67
   15430:	00003706 	br	15510 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   15434:	e0bff817 	ldw	r2,-32(fp)
   15438:	10800058 	cmpnei	r2,r2,1
   1543c:	1000061e 	bne	r2,zero,15458 <OSTaskStkChk+0xf8>
   15440:	e0bff617 	ldw	r2,-40(fp)
   15444:	e0bff915 	stw	r2,-28(fp)
   15448:	e0bff917 	ldw	r2,-28(fp)
   1544c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   15450:	008010c4 	movi	r2,67
   15454:	00002e06 	br	15510 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   15458:	e0bff817 	ldw	r2,-32(fp)
   1545c:	1080040b 	ldhu	r2,16(r2)
   15460:	10bfffcc 	andi	r2,r2,65535
   15464:	1080004c 	andi	r2,r2,1
   15468:	1000061e 	bne	r2,zero,15484 <OSTaskStkChk+0x124>
   1546c:	e0bff617 	ldw	r2,-40(fp)
   15470:	e0bffa15 	stw	r2,-24(fp)
   15474:	e0bffa17 	ldw	r2,-24(fp)
   15478:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   1547c:	00801144 	movi	r2,69
   15480:	00002306 	br	15510 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
   15484:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   15488:	e0bff817 	ldw	r2,-32(fp)
   1548c:	10800317 	ldw	r2,12(r2)
   15490:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
   15494:	e0bff817 	ldw	r2,-32(fp)
   15498:	10800217 	ldw	r2,8(r2)
   1549c:	e0bff415 	stw	r2,-48(fp)
   154a0:	e0bff617 	ldw	r2,-40(fp)
   154a4:	e0bffb15 	stw	r2,-20(fp)
   154a8:	e0bffb17 	ldw	r2,-20(fp)
   154ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   154b0:	00000306 	br	154c0 <OSTaskStkChk+0x160>
        nfree++;
   154b4:	e0bff517 	ldw	r2,-44(fp)
   154b8:	10800044 	addi	r2,r2,1
   154bc:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   154c0:	e0bff417 	ldw	r2,-48(fp)
   154c4:	10c00104 	addi	r3,r2,4
   154c8:	e0fff415 	stw	r3,-48(fp)
   154cc:	10800017 	ldw	r2,0(r2)
   154d0:	103ff826 	beq	r2,zero,154b4 <OSTaskStkChk+0x154>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   154d4:	e0bff517 	ldw	r2,-44(fp)
   154d8:	1085883a 	add	r2,r2,r2
   154dc:	1085883a 	add	r2,r2,r2
   154e0:	1007883a 	mov	r3,r2
   154e4:	e0bfff17 	ldw	r2,-4(fp)
   154e8:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   154ec:	e0fffc17 	ldw	r3,-16(fp)
   154f0:	e0bff517 	ldw	r2,-44(fp)
   154f4:	1885c83a 	sub	r2,r3,r2
   154f8:	1085883a 	add	r2,r2,r2
   154fc:	1085883a 	add	r2,r2,r2
   15500:	1007883a 	mov	r3,r2
   15504:	e0bfff17 	ldw	r2,-4(fp)
   15508:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   1550c:	0005883a 	mov	r2,zero
}
   15510:	e037883a 	mov	sp,fp
   15514:	df000017 	ldw	fp,0(sp)
   15518:	dec00104 	addi	sp,sp,4
   1551c:	f800283a 	ret

00015520 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   15520:	defff504 	addi	sp,sp,-44
   15524:	dfc00a15 	stw	ra,40(sp)
   15528:	df000915 	stw	fp,36(sp)
   1552c:	df000904 	addi	fp,sp,36
   15530:	2005883a 	mov	r2,r4
   15534:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15538:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   1553c:	e0bfff03 	ldbu	r2,-4(fp)
   15540:	10800518 	cmpnei	r2,r2,20
   15544:	1000021e 	bne	r2,zero,15550 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   15548:	008011c4 	movi	r2,71
   1554c:	00006806 	br	156f0 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   15550:	e0bfff03 	ldbu	r2,-4(fp)
   15554:	10800530 	cmpltui	r2,r2,20
   15558:	1000051e 	bne	r2,zero,15570 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   1555c:	e0bfff03 	ldbu	r2,-4(fp)
   15560:	10803fe0 	cmpeqi	r2,r2,255
   15564:	1000021e 	bne	r2,zero,15570 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   15568:	00800a84 	movi	r2,42
   1556c:	00006006 	br	156f0 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15570:	0005303a 	rdctl	r2,status
   15574:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15578:	e0fffe17 	ldw	r3,-8(fp)
   1557c:	00bfff84 	movi	r2,-2
   15580:	1884703a 	and	r2,r3,r2
   15584:	1001703a 	wrctl	status,r2
  
  return context;
   15588:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   1558c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   15590:	e0bfff03 	ldbu	r2,-4(fp)
   15594:	10803fd8 	cmpnei	r2,r2,255
   15598:	1000061e 	bne	r2,zero,155b4 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
   1559c:	d0a81617 	ldw	r2,-24488(gp)
   155a0:	10800c83 	ldbu	r2,50(r2)
   155a4:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   155a8:	00800044 	movi	r2,1
   155ac:	e0bff705 	stb	r2,-36(fp)
   155b0:	00000906 	br	155d8 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   155b4:	d0a81617 	ldw	r2,-24488(gp)
   155b8:	10800c83 	ldbu	r2,50(r2)
   155bc:	10c03fcc 	andi	r3,r2,255
   155c0:	e0bfff03 	ldbu	r2,-4(fp)
   155c4:	1880031e 	bne	r3,r2,155d4 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
   155c8:	00800044 	movi	r2,1
   155cc:	e0bff705 	stb	r2,-36(fp)
   155d0:	00000106 	br	155d8 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   155d4:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   155d8:	e0ffff03 	ldbu	r3,-4(fp)
   155dc:	008000b4 	movhi	r2,2
   155e0:	10961604 	addi	r2,r2,22616
   155e4:	18c7883a 	add	r3,r3,r3
   155e8:	18c7883a 	add	r3,r3,r3
   155ec:	10c5883a 	add	r2,r2,r3
   155f0:	10800017 	ldw	r2,0(r2)
   155f4:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   155f8:	e0bffa17 	ldw	r2,-24(fp)
   155fc:	1000061e 	bne	r2,zero,15618 <OSTaskSuspend+0xf8>
   15600:	e0bff817 	ldw	r2,-32(fp)
   15604:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15608:	e0bff917 	ldw	r2,-28(fp)
   1560c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   15610:	00801204 	movi	r2,72
   15614:	00003606 	br	156f0 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   15618:	e0bffa17 	ldw	r2,-24(fp)
   1561c:	10800058 	cmpnei	r2,r2,1
   15620:	1000061e 	bne	r2,zero,1563c <OSTaskSuspend+0x11c>
   15624:	e0bff817 	ldw	r2,-32(fp)
   15628:	e0bffb15 	stw	r2,-20(fp)
   1562c:	e0bffb17 	ldw	r2,-20(fp)
   15630:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   15634:	008010c4 	movi	r2,67
   15638:	00002d06 	br	156f0 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
   1563c:	e0bffa17 	ldw	r2,-24(fp)
   15640:	10800d03 	ldbu	r2,52(r2)
   15644:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   15648:	e0fffd03 	ldbu	r3,-12(fp)
   1564c:	e13ffd03 	ldbu	r4,-12(fp)
   15650:	d0a81344 	addi	r2,gp,-24499
   15654:	2085883a 	add	r2,r4,r2
   15658:	10800003 	ldbu	r2,0(r2)
   1565c:	1009883a 	mov	r4,r2
   15660:	e0bffa17 	ldw	r2,-24(fp)
   15664:	10800d43 	ldbu	r2,53(r2)
   15668:	0084303a 	nor	r2,zero,r2
   1566c:	2084703a 	and	r2,r4,r2
   15670:	1009883a 	mov	r4,r2
   15674:	d0a81344 	addi	r2,gp,-24499
   15678:	1885883a 	add	r2,r3,r2
   1567c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   15680:	e0fffd03 	ldbu	r3,-12(fp)
   15684:	d0a81344 	addi	r2,gp,-24499
   15688:	1885883a 	add	r2,r3,r2
   1568c:	10800003 	ldbu	r2,0(r2)
   15690:	10803fcc 	andi	r2,r2,255
   15694:	1000071e 	bne	r2,zero,156b4 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   15698:	e0bffa17 	ldw	r2,-24(fp)
   1569c:	10800d83 	ldbu	r2,54(r2)
   156a0:	0084303a 	nor	r2,zero,r2
   156a4:	1007883a 	mov	r3,r2
   156a8:	d0a81303 	ldbu	r2,-24500(gp)
   156ac:	1884703a 	and	r2,r3,r2
   156b0:	d0a81305 	stb	r2,-24500(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   156b4:	e0bffa17 	ldw	r2,-24(fp)
   156b8:	10800c03 	ldbu	r2,48(r2)
   156bc:	10800214 	ori	r2,r2,8
   156c0:	1007883a 	mov	r3,r2
   156c4:	e0bffa17 	ldw	r2,-24(fp)
   156c8:	10c00c05 	stb	r3,48(r2)
   156cc:	e0bff817 	ldw	r2,-32(fp)
   156d0:	e0bffc15 	stw	r2,-16(fp)
   156d4:	e0bffc17 	ldw	r2,-16(fp)
   156d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   156dc:	e0bff703 	ldbu	r2,-36(fp)
   156e0:	10800058 	cmpnei	r2,r2,1
   156e4:	1000011e 	bne	r2,zero,156ec <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
   156e8:	000feec0 	call	feec <OS_Sched>
    }
    return (OS_ERR_NONE);
   156ec:	0005883a 	mov	r2,zero
}
   156f0:	e037883a 	mov	sp,fp
   156f4:	dfc00117 	ldw	ra,4(sp)
   156f8:	df000017 	ldw	fp,0(sp)
   156fc:	dec00204 	addi	sp,sp,8
   15700:	f800283a 	ret

00015704 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   15704:	defff604 	addi	sp,sp,-40
   15708:	dfc00915 	stw	ra,36(sp)
   1570c:	df000815 	stw	fp,32(sp)
   15710:	df000804 	addi	fp,sp,32
   15714:	2005883a 	mov	r2,r4
   15718:	e17fff15 	stw	r5,-4(fp)
   1571c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15720:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   15724:	e0bffe03 	ldbu	r2,-8(fp)
   15728:	10800570 	cmpltui	r2,r2,21
   1572c:	1000051e 	bne	r2,zero,15744 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   15730:	e0bffe03 	ldbu	r2,-8(fp)
   15734:	10803fe0 	cmpeqi	r2,r2,255
   15738:	1000021e 	bne	r2,zero,15744 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   1573c:	00800a84 	movi	r2,42
   15740:	00003406 	br	15814 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   15744:	e0bfff17 	ldw	r2,-4(fp)
   15748:	1000021e 	bne	r2,zero,15754 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   1574c:	00800244 	movi	r2,9
   15750:	00003006 	br	15814 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15754:	0005303a 	rdctl	r2,status
   15758:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1575c:	e0fffd17 	ldw	r3,-12(fp)
   15760:	00bfff84 	movi	r2,-2
   15764:	1884703a 	and	r2,r3,r2
   15768:	1001703a 	wrctl	status,r2
  
  return context;
   1576c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   15770:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   15774:	e0bffe03 	ldbu	r2,-8(fp)
   15778:	10803fd8 	cmpnei	r2,r2,255
   1577c:	1000031e 	bne	r2,zero,1578c <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
   15780:	d0a81617 	ldw	r2,-24488(gp)
   15784:	10800c83 	ldbu	r2,50(r2)
   15788:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1578c:	e0fffe03 	ldbu	r3,-8(fp)
   15790:	008000b4 	movhi	r2,2
   15794:	10961604 	addi	r2,r2,22616
   15798:	18c7883a 	add	r3,r3,r3
   1579c:	18c7883a 	add	r3,r3,r3
   157a0:	10c5883a 	add	r2,r2,r3
   157a4:	10800017 	ldw	r2,0(r2)
   157a8:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   157ac:	e0bffa17 	ldw	r2,-24(fp)
   157b0:	1000061e 	bne	r2,zero,157cc <OSTaskQuery+0xc8>
   157b4:	e0bff817 	ldw	r2,-32(fp)
   157b8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   157bc:	e0bff917 	ldw	r2,-28(fp)
   157c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   157c4:	00800a44 	movi	r2,41
   157c8:	00001206 	br	15814 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   157cc:	e0bffa17 	ldw	r2,-24(fp)
   157d0:	10800058 	cmpnei	r2,r2,1
   157d4:	1000061e 	bne	r2,zero,157f0 <OSTaskQuery+0xec>
   157d8:	e0bff817 	ldw	r2,-32(fp)
   157dc:	e0bffb15 	stw	r2,-20(fp)
   157e0:	e0bffb17 	ldw	r2,-20(fp)
   157e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   157e8:	008010c4 	movi	r2,67
   157ec:	00000906 	br	15814 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   157f0:	01801b04 	movi	r6,108
   157f4:	e17ffa17 	ldw	r5,-24(fp)
   157f8:	e13fff17 	ldw	r4,-4(fp)
   157fc:	000fe840 	call	fe84 <OS_MemCopy>
   15800:	e0bff817 	ldw	r2,-32(fp)
   15804:	e0bffc15 	stw	r2,-16(fp)
   15808:	e0bffc17 	ldw	r2,-16(fp)
   1580c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15810:	0005883a 	mov	r2,zero
}
   15814:	e037883a 	mov	sp,fp
   15818:	dfc00117 	ldw	ra,4(sp)
   1581c:	df000017 	ldw	fp,0(sp)
   15820:	dec00204 	addi	sp,sp,8
   15824:	f800283a 	ret

00015828 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   15828:	defffc04 	addi	sp,sp,-16
   1582c:	df000315 	stw	fp,12(sp)
   15830:	df000304 	addi	fp,sp,12
   15834:	e13ffd15 	stw	r4,-12(fp)
   15838:	e17ffe15 	stw	r5,-8(fp)
   1583c:	3005883a 	mov	r2,r6
   15840:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   15844:	e0bfff0b 	ldhu	r2,-4(fp)
   15848:	1080004c 	andi	r2,r2,1
   1584c:	10000d26 	beq	r2,zero,15884 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   15850:	e0bfff0b 	ldhu	r2,-4(fp)
   15854:	1080008c 	andi	r2,r2,2
   15858:	10000a26 	beq	r2,zero,15884 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1585c:	00000706 	br	1587c <OS_TaskStkClr+0x54>
                size--;
   15860:	e0bffe17 	ldw	r2,-8(fp)
   15864:	10bfffc4 	addi	r2,r2,-1
   15868:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   1586c:	e0bffd17 	ldw	r2,-12(fp)
   15870:	10c00104 	addi	r3,r2,4
   15874:	e0fffd15 	stw	r3,-12(fp)
   15878:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1587c:	e0bffe17 	ldw	r2,-8(fp)
   15880:	103ff71e 	bne	r2,zero,15860 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   15884:	0001883a 	nop
   15888:	e037883a 	mov	sp,fp
   1588c:	df000017 	ldw	fp,0(sp)
   15890:	dec00104 	addi	sp,sp,4
   15894:	f800283a 	ret

00015898 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   15898:	defff904 	addi	sp,sp,-28
   1589c:	dfc00615 	stw	ra,24(sp)
   158a0:	df000515 	stw	fp,20(sp)
   158a4:	df000504 	addi	fp,sp,20
   158a8:	2005883a 	mov	r2,r4
   158ac:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   158b0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   158b4:	d0a81503 	ldbu	r2,-24492(gp)
   158b8:	10803fcc 	andi	r2,r2,255
   158bc:	1000311e 	bne	r2,zero,15984 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   158c0:	e0bfff0b 	ldhu	r2,-4(fp)
   158c4:	10003026 	beq	r2,zero,15988 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   158c8:	0005303a 	rdctl	r2,status
   158cc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   158d0:	e0fffe17 	ldw	r3,-8(fp)
   158d4:	00bfff84 	movi	r2,-2
   158d8:	1884703a 	and	r2,r3,r2
   158dc:	1001703a 	wrctl	status,r2
  
  return context;
   158e0:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   158e4:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   158e8:	d0a81617 	ldw	r2,-24488(gp)
   158ec:	10800d03 	ldbu	r2,52(r2)
   158f0:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   158f4:	e0fffd03 	ldbu	r3,-12(fp)
   158f8:	e13ffd03 	ldbu	r4,-12(fp)
   158fc:	d0a81344 	addi	r2,gp,-24499
   15900:	2085883a 	add	r2,r4,r2
   15904:	10800003 	ldbu	r2,0(r2)
   15908:	1009883a 	mov	r4,r2
   1590c:	d0a81617 	ldw	r2,-24488(gp)
   15910:	10800d43 	ldbu	r2,53(r2)
   15914:	0084303a 	nor	r2,zero,r2
   15918:	2084703a 	and	r2,r4,r2
   1591c:	1009883a 	mov	r4,r2
   15920:	d0a81344 	addi	r2,gp,-24499
   15924:	1885883a 	add	r2,r3,r2
   15928:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   1592c:	e0fffd03 	ldbu	r3,-12(fp)
   15930:	d0a81344 	addi	r2,gp,-24499
   15934:	1885883a 	add	r2,r3,r2
   15938:	10800003 	ldbu	r2,0(r2)
   1593c:	10803fcc 	andi	r2,r2,255
   15940:	1000071e 	bne	r2,zero,15960 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   15944:	d0a81617 	ldw	r2,-24488(gp)
   15948:	10800d83 	ldbu	r2,54(r2)
   1594c:	0084303a 	nor	r2,zero,r2
   15950:	1007883a 	mov	r3,r2
   15954:	d0a81303 	ldbu	r2,-24500(gp)
   15958:	1884703a 	and	r2,r3,r2
   1595c:	d0a81305 	stb	r2,-24500(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   15960:	d0a81617 	ldw	r2,-24488(gp)
   15964:	e0ffff0b 	ldhu	r3,-4(fp)
   15968:	10c00b8d 	sth	r3,46(r2)
   1596c:	e0bffb17 	ldw	r2,-20(fp)
   15970:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15974:	e0bffc17 	ldw	r2,-16(fp)
   15978:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   1597c:	000feec0 	call	feec <OS_Sched>
   15980:	00000106 	br	15988 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
   15984:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
   15988:	e037883a 	mov	sp,fp
   1598c:	dfc00117 	ldw	ra,4(sp)
   15990:	df000017 	ldw	fp,0(sp)
   15994:	dec00204 	addi	sp,sp,8
   15998:	f800283a 	ret

0001599c <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   1599c:	defff804 	addi	sp,sp,-32
   159a0:	dfc00715 	stw	ra,28(sp)
   159a4:	df000615 	stw	fp,24(sp)
   159a8:	df000604 	addi	fp,sp,24
   159ac:	2015883a 	mov	r10,r4
   159b0:	2809883a 	mov	r4,r5
   159b4:	3007883a 	mov	r3,r6
   159b8:	3805883a 	mov	r2,r7
   159bc:	e2bffc05 	stb	r10,-16(fp)
   159c0:	e13ffd05 	stb	r4,-12(fp)
   159c4:	e0fffe05 	stb	r3,-8(fp)
   159c8:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   159cc:	d0a81503 	ldbu	r2,-24492(gp)
   159d0:	10803fcc 	andi	r2,r2,255
   159d4:	10000226 	beq	r2,zero,159e0 <OSTimeDlyHMSM+0x44>
        return (OS_ERR_TIME_DLY_ISR);
   159d8:	00801544 	movi	r2,85
   159dc:	00004206 	br	15ae8 <OSTimeDlyHMSM+0x14c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   159e0:	e0bffc03 	ldbu	r2,-16(fp)
   159e4:	1000081e 	bne	r2,zero,15a08 <OSTimeDlyHMSM+0x6c>
        if (minutes == 0) {
   159e8:	e0bffd03 	ldbu	r2,-12(fp)
   159ec:	1000061e 	bne	r2,zero,15a08 <OSTimeDlyHMSM+0x6c>
            if (seconds == 0) {
   159f0:	e0bffe03 	ldbu	r2,-8(fp)
   159f4:	1000041e 	bne	r2,zero,15a08 <OSTimeDlyHMSM+0x6c>
                if (ms == 0) {
   159f8:	e0bfff0b 	ldhu	r2,-4(fp)
   159fc:	1000021e 	bne	r2,zero,15a08 <OSTimeDlyHMSM+0x6c>
                    return (OS_ERR_TIME_ZERO_DLY);
   15a00:	00801504 	movi	r2,84
   15a04:	00003806 	br	15ae8 <OSTimeDlyHMSM+0x14c>
                }
            }
        }
    }
    if (minutes > 59) {
   15a08:	e0bffd03 	ldbu	r2,-12(fp)
   15a0c:	10800f30 	cmpltui	r2,r2,60
   15a10:	1000021e 	bne	r2,zero,15a1c <OSTimeDlyHMSM+0x80>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   15a14:	00801444 	movi	r2,81
   15a18:	00003306 	br	15ae8 <OSTimeDlyHMSM+0x14c>
    }
    if (seconds > 59) {
   15a1c:	e0bffe03 	ldbu	r2,-8(fp)
   15a20:	10800f30 	cmpltui	r2,r2,60
   15a24:	1000021e 	bne	r2,zero,15a30 <OSTimeDlyHMSM+0x94>
        return (OS_ERR_TIME_INVALID_SECONDS);
   15a28:	00801484 	movi	r2,82
   15a2c:	00002e06 	br	15ae8 <OSTimeDlyHMSM+0x14c>
    }
    if (ms > 999) {
   15a30:	e0bfff0b 	ldhu	r2,-4(fp)
   15a34:	1080fa30 	cmpltui	r2,r2,1000
   15a38:	1000021e 	bne	r2,zero,15a44 <OSTimeDlyHMSM+0xa8>
        return (OS_ERR_TIME_INVALID_MS);
   15a3c:	008014c4 	movi	r2,83
   15a40:	00002906 	br	15ae8 <OSTimeDlyHMSM+0x14c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   15a44:	e0bffc03 	ldbu	r2,-16(fp)
   15a48:	10c38424 	muli	r3,r2,3600
   15a4c:	e0bffd03 	ldbu	r2,-12(fp)
   15a50:	10800f24 	muli	r2,r2,60
   15a54:	1887883a 	add	r3,r3,r2
   15a58:	e0bffe03 	ldbu	r2,-8(fp)
   15a5c:	1885883a 	add	r2,r3,r2
   15a60:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   15a64:	e0bfff0b 	ldhu	r2,-4(fp)
   15a68:	10800f84 	addi	r2,r2,62
   15a6c:	100690fa 	slli	r3,r2,3
   15a70:	008418b4 	movhi	r2,4194
   15a74:	109374c4 	addi	r2,r2,19923
   15a78:	188a383a 	mulxuu	r5,r3,r2
   15a7c:	1885383a 	mul	r2,r3,r2
   15a80:	1011883a 	mov	r8,r2
   15a84:	2813883a 	mov	r9,r5
   15a88:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   15a8c:	2085883a 	add	r2,r4,r2
   15a90:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   15a94:	e0bffb17 	ldw	r2,-20(fp)
   15a98:	1004d43a 	srli	r2,r2,16
   15a9c:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   15aa0:	e0bffb17 	ldw	r2,-20(fp)
   15aa4:	10bfffcc 	andi	r2,r2,65535
   15aa8:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   15aac:	e0bffb17 	ldw	r2,-20(fp)
   15ab0:	10bfffcc 	andi	r2,r2,65535
   15ab4:	1009883a 	mov	r4,r2
   15ab8:	00158980 	call	15898 <OSTimeDly>
    while (loops > 0) {
   15abc:	00000706 	br	15adc <OSTimeDlyHMSM+0x140>
        OSTimeDly((INT16U)32768u);
   15ac0:	01200014 	movui	r4,32768
   15ac4:	00158980 	call	15898 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   15ac8:	01200014 	movui	r4,32768
   15acc:	00158980 	call	15898 <OSTimeDly>
        loops--;
   15ad0:	e0bffa0b 	ldhu	r2,-24(fp)
   15ad4:	10bfffc4 	addi	r2,r2,-1
   15ad8:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   15adc:	e0bffa0b 	ldhu	r2,-24(fp)
   15ae0:	103ff71e 	bne	r2,zero,15ac0 <OSTimeDlyHMSM+0x124>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   15ae4:	0005883a 	mov	r2,zero
}
   15ae8:	e037883a 	mov	sp,fp
   15aec:	dfc00117 	ldw	ra,4(sp)
   15af0:	df000017 	ldw	fp,0(sp)
   15af4:	dec00204 	addi	sp,sp,8
   15af8:	f800283a 	ret

00015afc <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   15afc:	defff504 	addi	sp,sp,-44
   15b00:	dfc00a15 	stw	ra,40(sp)
   15b04:	df000915 	stw	fp,36(sp)
   15b08:	df000904 	addi	fp,sp,36
   15b0c:	2005883a 	mov	r2,r4
   15b10:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15b14:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   15b18:	e0bfff03 	ldbu	r2,-4(fp)
   15b1c:	10800530 	cmpltui	r2,r2,20
   15b20:	1000021e 	bne	r2,zero,15b2c <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   15b24:	00800a84 	movi	r2,42
   15b28:	00006406 	br	15cbc <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15b2c:	0005303a 	rdctl	r2,status
   15b30:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15b34:	e0fffe17 	ldw	r3,-8(fp)
   15b38:	00bfff84 	movi	r2,-2
   15b3c:	1884703a 	and	r2,r3,r2
   15b40:	1001703a 	wrctl	status,r2
  
  return context;
   15b44:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   15b48:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   15b4c:	e0ffff03 	ldbu	r3,-4(fp)
   15b50:	008000b4 	movhi	r2,2
   15b54:	10961604 	addi	r2,r2,22616
   15b58:	18c7883a 	add	r3,r3,r3
   15b5c:	18c7883a 	add	r3,r3,r3
   15b60:	10c5883a 	add	r2,r2,r3
   15b64:	10800017 	ldw	r2,0(r2)
   15b68:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
   15b6c:	e0bff917 	ldw	r2,-28(fp)
   15b70:	1000061e 	bne	r2,zero,15b8c <OSTimeDlyResume+0x90>
   15b74:	e0bff717 	ldw	r2,-36(fp)
   15b78:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15b7c:	e0bff817 	ldw	r2,-32(fp)
   15b80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   15b84:	008010c4 	movi	r2,67
   15b88:	00004c06 	br	15cbc <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   15b8c:	e0bff917 	ldw	r2,-28(fp)
   15b90:	10800058 	cmpnei	r2,r2,1
   15b94:	1000061e 	bne	r2,zero,15bb0 <OSTimeDlyResume+0xb4>
   15b98:	e0bff717 	ldw	r2,-36(fp)
   15b9c:	e0bffa15 	stw	r2,-24(fp)
   15ba0:	e0bffa17 	ldw	r2,-24(fp)
   15ba4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   15ba8:	008010c4 	movi	r2,67
   15bac:	00004306 	br	15cbc <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   15bb0:	e0bff917 	ldw	r2,-28(fp)
   15bb4:	10800b8b 	ldhu	r2,46(r2)
   15bb8:	10bfffcc 	andi	r2,r2,65535
   15bbc:	1000061e 	bne	r2,zero,15bd8 <OSTimeDlyResume+0xdc>
   15bc0:	e0bff717 	ldw	r2,-36(fp)
   15bc4:	e0bffb15 	stw	r2,-20(fp)
   15bc8:	e0bffb17 	ldw	r2,-20(fp)
   15bcc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   15bd0:	00801404 	movi	r2,80
   15bd4:	00003906 	br	15cbc <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   15bd8:	e0bff917 	ldw	r2,-28(fp)
   15bdc:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   15be0:	e0bff917 	ldw	r2,-28(fp)
   15be4:	10800c03 	ldbu	r2,48(r2)
   15be8:	10803fcc 	andi	r2,r2,255
   15bec:	10800dcc 	andi	r2,r2,55
   15bf0:	10000b26 	beq	r2,zero,15c20 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   15bf4:	e0bff917 	ldw	r2,-28(fp)
   15bf8:	10c00c03 	ldbu	r3,48(r2)
   15bfc:	00bff204 	movi	r2,-56
   15c00:	1884703a 	and	r2,r3,r2
   15c04:	1007883a 	mov	r3,r2
   15c08:	e0bff917 	ldw	r2,-28(fp)
   15c0c:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   15c10:	e0bff917 	ldw	r2,-28(fp)
   15c14:	00c00044 	movi	r3,1
   15c18:	10c00c45 	stb	r3,49(r2)
   15c1c:	00000206 	br	15c28 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   15c20:	e0bff917 	ldw	r2,-28(fp)
   15c24:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   15c28:	e0bff917 	ldw	r2,-28(fp)
   15c2c:	10800c03 	ldbu	r2,48(r2)
   15c30:	10803fcc 	andi	r2,r2,255
   15c34:	1080020c 	andi	r2,r2,8
   15c38:	10001b1e 	bne	r2,zero,15ca8 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   15c3c:	e0bff917 	ldw	r2,-28(fp)
   15c40:	10c00d83 	ldbu	r3,54(r2)
   15c44:	d0a81303 	ldbu	r2,-24500(gp)
   15c48:	1884b03a 	or	r2,r3,r2
   15c4c:	d0a81305 	stb	r2,-24500(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   15c50:	e0bff917 	ldw	r2,-28(fp)
   15c54:	10800d03 	ldbu	r2,52(r2)
   15c58:	10c03fcc 	andi	r3,r2,255
   15c5c:	e0bff917 	ldw	r2,-28(fp)
   15c60:	10800d03 	ldbu	r2,52(r2)
   15c64:	11003fcc 	andi	r4,r2,255
   15c68:	d0a81344 	addi	r2,gp,-24499
   15c6c:	2085883a 	add	r2,r4,r2
   15c70:	11000003 	ldbu	r4,0(r2)
   15c74:	e0bff917 	ldw	r2,-28(fp)
   15c78:	10800d43 	ldbu	r2,53(r2)
   15c7c:	2084b03a 	or	r2,r4,r2
   15c80:	1009883a 	mov	r4,r2
   15c84:	d0a81344 	addi	r2,gp,-24499
   15c88:	1885883a 	add	r2,r3,r2
   15c8c:	11000005 	stb	r4,0(r2)
   15c90:	e0bff717 	ldw	r2,-36(fp)
   15c94:	e0bffc15 	stw	r2,-16(fp)
   15c98:	e0bffc17 	ldw	r2,-16(fp)
   15c9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   15ca0:	000feec0 	call	feec <OS_Sched>
   15ca4:	00000406 	br	15cb8 <OSTimeDlyResume+0x1bc>
   15ca8:	e0bff717 	ldw	r2,-36(fp)
   15cac:	e0bffd15 	stw	r2,-12(fp)
   15cb0:	e0bffd17 	ldw	r2,-12(fp)
   15cb4:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   15cb8:	0005883a 	mov	r2,zero
}
   15cbc:	e037883a 	mov	sp,fp
   15cc0:	dfc00117 	ldw	ra,4(sp)
   15cc4:	df000017 	ldw	fp,0(sp)
   15cc8:	dec00204 	addi	sp,sp,8
   15ccc:	f800283a 	ret

00015cd0 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   15cd0:	defffb04 	addi	sp,sp,-20
   15cd4:	df000415 	stw	fp,16(sp)
   15cd8:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15cdc:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15ce0:	0005303a 	rdctl	r2,status
   15ce4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15ce8:	e0fffe17 	ldw	r3,-8(fp)
   15cec:	00bfff84 	movi	r2,-2
   15cf0:	1884703a 	and	r2,r3,r2
   15cf4:	1001703a 	wrctl	status,r2
  
  return context;
   15cf8:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   15cfc:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   15d00:	d0a81717 	ldw	r2,-24484(gp)
   15d04:	e0bffd15 	stw	r2,-12(fp)
   15d08:	e0bffc17 	ldw	r2,-16(fp)
   15d0c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15d10:	e0bfff17 	ldw	r2,-4(fp)
   15d14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   15d18:	e0bffd17 	ldw	r2,-12(fp)
}
   15d1c:	e037883a 	mov	sp,fp
   15d20:	df000017 	ldw	fp,0(sp)
   15d24:	dec00104 	addi	sp,sp,4
   15d28:	f800283a 	ret

00015d2c <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   15d2c:	defffb04 	addi	sp,sp,-20
   15d30:	df000415 	stw	fp,16(sp)
   15d34:	df000404 	addi	fp,sp,16
   15d38:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15d3c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15d40:	0005303a 	rdctl	r2,status
   15d44:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15d48:	e0fffd17 	ldw	r3,-12(fp)
   15d4c:	00bfff84 	movi	r2,-2
   15d50:	1884703a 	and	r2,r3,r2
   15d54:	1001703a 	wrctl	status,r2
  
  return context;
   15d58:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   15d5c:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   15d60:	e0bfff17 	ldw	r2,-4(fp)
   15d64:	d0a81715 	stw	r2,-24484(gp)
   15d68:	e0bffc17 	ldw	r2,-16(fp)
   15d6c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15d70:	e0bffe17 	ldw	r2,-8(fp)
   15d74:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   15d78:	0001883a 	nop
   15d7c:	e037883a 	mov	sp,fp
   15d80:	df000017 	ldw	fp,0(sp)
   15d84:	dec00104 	addi	sp,sp,4
   15d88:	f800283a 	ret

00015d8c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   15d8c:	defffd04 	addi	sp,sp,-12
   15d90:	dfc00215 	stw	ra,8(sp)
   15d94:	df000115 	stw	fp,4(sp)
   15d98:	df000104 	addi	fp,sp,4
   15d9c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   15da0:	d1600a04 	addi	r5,gp,-32728
   15da4:	e13fff17 	ldw	r4,-4(fp)
   15da8:	00189c00 	call	189c0 <alt_dev_llist_insert>
}
   15dac:	e037883a 	mov	sp,fp
   15db0:	dfc00117 	ldw	ra,4(sp)
   15db4:	df000017 	ldw	fp,0(sp)
   15db8:	dec00204 	addi	sp,sp,8
   15dbc:	f800283a 	ret

00015dc0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   15dc0:	defffd04 	addi	sp,sp,-12
   15dc4:	dfc00215 	stw	ra,8(sp)
   15dc8:	df000115 	stw	fp,4(sp)
   15dcc:	df000104 	addi	fp,sp,4
   15dd0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   15dd4:	00192a00 	call	192a0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   15dd8:	00800044 	movi	r2,1
   15ddc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   15de0:	0001883a 	nop
   15de4:	e037883a 	mov	sp,fp
   15de8:	dfc00117 	ldw	ra,4(sp)
   15dec:	df000017 	ldw	fp,0(sp)
   15df0:	dec00204 	addi	sp,sp,8
   15df4:	f800283a 	ret

00015df8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   15df8:	defffb04 	addi	sp,sp,-20
   15dfc:	dfc00415 	stw	ra,16(sp)
   15e00:	df000315 	stw	fp,12(sp)
   15e04:	df000304 	addi	fp,sp,12
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   15e08:	01c00204 	movi	r7,8
   15e0c:	000d883a 	mov	r6,zero
   15e10:	000b883a 	mov	r5,zero
   15e14:	013fc834 	movhi	r4,65312
   15e18:	21080004 	addi	r4,r4,8192
   15e1c:	00175040 	call	17504 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER_2, Interval_Timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   15e20:	01800204 	movi	r6,8
   15e24:	000b883a 	mov	r5,zero
   15e28:	010000b4 	movhi	r4,2
   15e2c:	212ca504 	addi	r4,r4,-19820
   15e30:	00168c80 	call	168c8 <altera_avalon_jtag_uart_init>
   15e34:	010000b4 	movhi	r4,2
   15e38:	212c9b04 	addi	r4,r4,-19860
   15e3c:	0015d8c0 	call	15d8c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   15e40:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   15e44:	010000b4 	movhi	r4,2
   15e48:	2130b604 	addi	r4,r4,-15656
   15e4c:	0015d8c0 	call	15d8c <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   15e50:	010000b4 	movhi	r4,2
   15e54:	2130c204 	addi	r4,r4,-15608
   15e58:	0015d8c0 	call	15d8c <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   15e5c:	010000b4 	movhi	r4,2
   15e60:	2130ce04 	addi	r4,r4,-15560
   15e64:	001762c0 	call	1762c <alt_up_character_lcd_init>
   15e68:	010000b4 	movhi	r4,2
   15e6c:	2130ce04 	addi	r4,r4,-15560
   15e70:	0015d8c0 	call	15d8c <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   15e74:	010000b4 	movhi	r4,2
   15e78:	2130d904 	addi	r4,r4,-15516
   15e7c:	0015d8c0 	call	15d8c <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   15e80:	010000b4 	movhi	r4,2
   15e84:	2130e404 	addi	r4,r4,-15472
   15e88:	0017f200 	call	17f20 <alt_up_ps2_init>
   15e8c:	010000b4 	movhi	r4,2
   15e90:	2130e404 	addi	r4,r4,-15472
   15e94:	0015d8c0 	call	15d8c <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   15e98:	010000b4 	movhi	r4,2
   15e9c:	2130f204 	addi	r4,r4,-15416
   15ea0:	0017f200 	call	17f20 <alt_up_ps2_init>
   15ea4:	010000b4 	movhi	r4,2
   15ea8:	2130f204 	addi	r4,r4,-15416
   15eac:	0015d8c0 	call	15d8c <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   15eb0:	010000b4 	movhi	r4,2
   15eb4:	21310004 	addi	r4,r4,-15360
   15eb8:	0015d8c0 	call	15d8c <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   15ebc:	010000b4 	movhi	r4,2
   15ec0:	21310b04 	addi	r4,r4,-15316
   15ec4:	0015d8c0 	call	15d8c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_CHAR_BUF_SUBSYSTEM_CHAR_BUF_DMA, VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA);
   15ec8:	008000b4 	movhi	r2,2
   15ecc:	10b11804 	addi	r2,r2,-15264
   15ed0:	10800a17 	ldw	r2,40(r2)
   15ed4:	10800017 	ldw	r2,0(r2)
   15ed8:	1007883a 	mov	r3,r2
   15edc:	008000b4 	movhi	r2,2
   15ee0:	10b11804 	addi	r2,r2,-15264
   15ee4:	10c00b15 	stw	r3,44(r2)
   15ee8:	008000b4 	movhi	r2,2
   15eec:	10b11804 	addi	r2,r2,-15264
   15ef0:	10800a17 	ldw	r2,40(r2)
   15ef4:	10800104 	addi	r2,r2,4
   15ef8:	10800017 	ldw	r2,0(r2)
   15efc:	1007883a 	mov	r3,r2
   15f00:	008000b4 	movhi	r2,2
   15f04:	10b11804 	addi	r2,r2,-15264
   15f08:	10c00c15 	stw	r3,48(r2)
   15f0c:	008000b4 	movhi	r2,2
   15f10:	10b11804 	addi	r2,r2,-15264
   15f14:	10800a17 	ldw	r2,40(r2)
   15f18:	10800204 	addi	r2,r2,8
   15f1c:	10800017 	ldw	r2,0(r2)
   15f20:	10ffffcc 	andi	r3,r2,65535
   15f24:	008000b4 	movhi	r2,2
   15f28:	10b11804 	addi	r2,r2,-15264
   15f2c:	10c01115 	stw	r3,68(r2)
   15f30:	008000b4 	movhi	r2,2
   15f34:	10b11804 	addi	r2,r2,-15264
   15f38:	10800a17 	ldw	r2,40(r2)
   15f3c:	10800204 	addi	r2,r2,8
   15f40:	10800017 	ldw	r2,0(r2)
   15f44:	1006d43a 	srli	r3,r2,16
   15f48:	008000b4 	movhi	r2,2
   15f4c:	10b11804 	addi	r2,r2,-15264
   15f50:	10c01215 	stw	r3,72(r2)
   15f54:	008000b4 	movhi	r2,2
   15f58:	10b11804 	addi	r2,r2,-15264
   15f5c:	10800a17 	ldw	r2,40(r2)
   15f60:	10800304 	addi	r2,r2,12
   15f64:	10800017 	ldw	r2,0(r2)
   15f68:	1005d07a 	srai	r2,r2,1
   15f6c:	10c0004c 	andi	r3,r2,1
   15f70:	008000b4 	movhi	r2,2
   15f74:	10b11804 	addi	r2,r2,-15264
   15f78:	10c00d15 	stw	r3,52(r2)
   15f7c:	008000b4 	movhi	r2,2
   15f80:	10b11804 	addi	r2,r2,-15264
   15f84:	10800a17 	ldw	r2,40(r2)
   15f88:	10800304 	addi	r2,r2,12
   15f8c:	10800017 	ldw	r2,0(r2)
   15f90:	1005d23a 	srai	r2,r2,8
   15f94:	108003cc 	andi	r2,r2,15
   15f98:	10800044 	addi	r2,r2,1
   15f9c:	1007883a 	mov	r3,r2
   15fa0:	008000b4 	movhi	r2,2
   15fa4:	10b11804 	addi	r2,r2,-15264
   15fa8:	10c00e15 	stw	r3,56(r2)
   15fac:	008000b4 	movhi	r2,2
   15fb0:	10b11804 	addi	r2,r2,-15264
   15fb4:	10800a17 	ldw	r2,40(r2)
   15fb8:	10800304 	addi	r2,r2,12
   15fbc:	10800017 	ldw	r2,0(r2)
   15fc0:	1005d1ba 	srai	r2,r2,6
   15fc4:	108000cc 	andi	r2,r2,3
   15fc8:	10800044 	addi	r2,r2,1
   15fcc:	1007883a 	mov	r3,r2
   15fd0:	008000b4 	movhi	r2,2
   15fd4:	10b11804 	addi	r2,r2,-15264
   15fd8:	10c00f15 	stw	r3,60(r2)
   15fdc:	008000b4 	movhi	r2,2
   15fe0:	10b11804 	addi	r2,r2,-15264
   15fe4:	10800e17 	ldw	r2,56(r2)
   15fe8:	1007883a 	mov	r3,r2
   15fec:	008000b4 	movhi	r2,2
   15ff0:	10b11804 	addi	r2,r2,-15264
   15ff4:	10800f17 	ldw	r2,60(r2)
   15ff8:	1885383a 	mul	r2,r3,r2
   15ffc:	e0bffd05 	stb	r2,-12(fp)
   16000:	e0bffd03 	ldbu	r2,-12(fp)
   16004:	10800268 	cmpgeui	r2,r2,9
   16008:	1000051e 	bne	r2,zero,16020 <alt_sys_init+0x228>
   1600c:	008000b4 	movhi	r2,2
   16010:	10b11804 	addi	r2,r2,-15264
   16014:	00c00044 	movi	r3,1
   16018:	10c01015 	stw	r3,64(r2)
   1601c:	00000c06 	br	16050 <alt_sys_init+0x258>
   16020:	e0bffd03 	ldbu	r2,-12(fp)
   16024:	10800468 	cmpgeui	r2,r2,17
   16028:	1000051e 	bne	r2,zero,16040 <alt_sys_init+0x248>
   1602c:	008000b4 	movhi	r2,2
   16030:	10b11804 	addi	r2,r2,-15264
   16034:	00c00084 	movi	r3,2
   16038:	10c01015 	stw	r3,64(r2)
   1603c:	00000406 	br	16050 <alt_sys_init+0x258>
   16040:	008000b4 	movhi	r2,2
   16044:	10b11804 	addi	r2,r2,-15264
   16048:	00c00104 	movi	r3,4
   1604c:	10c01015 	stw	r3,64(r2)
   16050:	008000b4 	movhi	r2,2
   16054:	10b11804 	addi	r2,r2,-15264
   16058:	10800a17 	ldw	r2,40(r2)
   1605c:	10800304 	addi	r2,r2,12
   16060:	10800017 	ldw	r2,0(r2)
   16064:	1005d43a 	srai	r2,r2,16
   16068:	e0bffd45 	stb	r2,-11(fp)
   1606c:	008000b4 	movhi	r2,2
   16070:	10b11804 	addi	r2,r2,-15264
   16074:	10800a17 	ldw	r2,40(r2)
   16078:	10800304 	addi	r2,r2,12
   1607c:	10800017 	ldw	r2,0(r2)
   16080:	1004d63a 	srli	r2,r2,24
   16084:	e0bffd85 	stb	r2,-10(fp)
   16088:	008000b4 	movhi	r2,2
   1608c:	10b11804 	addi	r2,r2,-15264
   16090:	10801017 	ldw	r2,64(r2)
   16094:	10800058 	cmpnei	r2,r2,1
   16098:	1000041e 	bne	r2,zero,160ac <alt_sys_init+0x2b4>
   1609c:	008000b4 	movhi	r2,2
   160a0:	10b11804 	addi	r2,r2,-15264
   160a4:	10001315 	stw	zero,76(r2)
   160a8:	00000e06 	br	160e4 <alt_sys_init+0x2ec>
   160ac:	008000b4 	movhi	r2,2
   160b0:	10b11804 	addi	r2,r2,-15264
   160b4:	10801017 	ldw	r2,64(r2)
   160b8:	10800098 	cmpnei	r2,r2,2
   160bc:	1000051e 	bne	r2,zero,160d4 <alt_sys_init+0x2dc>
   160c0:	008000b4 	movhi	r2,2
   160c4:	10b11804 	addi	r2,r2,-15264
   160c8:	00c00044 	movi	r3,1
   160cc:	10c01315 	stw	r3,76(r2)
   160d0:	00000406 	br	160e4 <alt_sys_init+0x2ec>
   160d4:	008000b4 	movhi	r2,2
   160d8:	10b11804 	addi	r2,r2,-15264
   160dc:	00c00084 	movi	r3,2
   160e0:	10c01315 	stw	r3,76(r2)
   160e4:	e0bffd43 	ldbu	r2,-11(fp)
   160e8:	00c00804 	movi	r3,32
   160ec:	1885c83a 	sub	r2,r3,r2
   160f0:	00ffffc4 	movi	r3,-1
   160f4:	1886d83a 	srl	r3,r3,r2
   160f8:	008000b4 	movhi	r2,2
   160fc:	10b11804 	addi	r2,r2,-15264
   16100:	10c01415 	stw	r3,80(r2)
   16104:	e0fffd43 	ldbu	r3,-11(fp)
   16108:	008000b4 	movhi	r2,2
   1610c:	10b11804 	addi	r2,r2,-15264
   16110:	10801317 	ldw	r2,76(r2)
   16114:	1887883a 	add	r3,r3,r2
   16118:	008000b4 	movhi	r2,2
   1611c:	10b11804 	addi	r2,r2,-15264
   16120:	10c01515 	stw	r3,84(r2)
   16124:	e0bffd83 	ldbu	r2,-10(fp)
   16128:	00c00804 	movi	r3,32
   1612c:	1885c83a 	sub	r2,r3,r2
   16130:	00ffffc4 	movi	r3,-1
   16134:	1886d83a 	srl	r3,r3,r2
   16138:	008000b4 	movhi	r2,2
   1613c:	10b11804 	addi	r2,r2,-15264
   16140:	10c01615 	stw	r3,88(r2)
   16144:	010000b4 	movhi	r4,2
   16148:	21311804 	addi	r4,r4,-15264
   1614c:	0015d8c0 	call	15d8c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   16150:	008000b4 	movhi	r2,2
   16154:	10b12f04 	addi	r2,r2,-15172
   16158:	10800a17 	ldw	r2,40(r2)
   1615c:	10800017 	ldw	r2,0(r2)
   16160:	1007883a 	mov	r3,r2
   16164:	008000b4 	movhi	r2,2
   16168:	10b12f04 	addi	r2,r2,-15172
   1616c:	10c00b15 	stw	r3,44(r2)
   16170:	008000b4 	movhi	r2,2
   16174:	10b12f04 	addi	r2,r2,-15172
   16178:	10800a17 	ldw	r2,40(r2)
   1617c:	10800104 	addi	r2,r2,4
   16180:	10800017 	ldw	r2,0(r2)
   16184:	1007883a 	mov	r3,r2
   16188:	008000b4 	movhi	r2,2
   1618c:	10b12f04 	addi	r2,r2,-15172
   16190:	10c00c15 	stw	r3,48(r2)
   16194:	008000b4 	movhi	r2,2
   16198:	10b12f04 	addi	r2,r2,-15172
   1619c:	10800a17 	ldw	r2,40(r2)
   161a0:	10800204 	addi	r2,r2,8
   161a4:	10800017 	ldw	r2,0(r2)
   161a8:	10ffffcc 	andi	r3,r2,65535
   161ac:	008000b4 	movhi	r2,2
   161b0:	10b12f04 	addi	r2,r2,-15172
   161b4:	10c01115 	stw	r3,68(r2)
   161b8:	008000b4 	movhi	r2,2
   161bc:	10b12f04 	addi	r2,r2,-15172
   161c0:	10800a17 	ldw	r2,40(r2)
   161c4:	10800204 	addi	r2,r2,8
   161c8:	10800017 	ldw	r2,0(r2)
   161cc:	1006d43a 	srli	r3,r2,16
   161d0:	008000b4 	movhi	r2,2
   161d4:	10b12f04 	addi	r2,r2,-15172
   161d8:	10c01215 	stw	r3,72(r2)
   161dc:	008000b4 	movhi	r2,2
   161e0:	10b12f04 	addi	r2,r2,-15172
   161e4:	10800a17 	ldw	r2,40(r2)
   161e8:	10800304 	addi	r2,r2,12
   161ec:	10800017 	ldw	r2,0(r2)
   161f0:	1005d07a 	srai	r2,r2,1
   161f4:	10c0004c 	andi	r3,r2,1
   161f8:	008000b4 	movhi	r2,2
   161fc:	10b12f04 	addi	r2,r2,-15172
   16200:	10c00d15 	stw	r3,52(r2)
   16204:	008000b4 	movhi	r2,2
   16208:	10b12f04 	addi	r2,r2,-15172
   1620c:	10800a17 	ldw	r2,40(r2)
   16210:	10800304 	addi	r2,r2,12
   16214:	10800017 	ldw	r2,0(r2)
   16218:	1005d23a 	srai	r2,r2,8
   1621c:	108003cc 	andi	r2,r2,15
   16220:	10800044 	addi	r2,r2,1
   16224:	1007883a 	mov	r3,r2
   16228:	008000b4 	movhi	r2,2
   1622c:	10b12f04 	addi	r2,r2,-15172
   16230:	10c00e15 	stw	r3,56(r2)
   16234:	008000b4 	movhi	r2,2
   16238:	10b12f04 	addi	r2,r2,-15172
   1623c:	10800a17 	ldw	r2,40(r2)
   16240:	10800304 	addi	r2,r2,12
   16244:	10800017 	ldw	r2,0(r2)
   16248:	1005d1ba 	srai	r2,r2,6
   1624c:	108000cc 	andi	r2,r2,3
   16250:	10800044 	addi	r2,r2,1
   16254:	1007883a 	mov	r3,r2
   16258:	008000b4 	movhi	r2,2
   1625c:	10b12f04 	addi	r2,r2,-15172
   16260:	10c00f15 	stw	r3,60(r2)
   16264:	008000b4 	movhi	r2,2
   16268:	10b12f04 	addi	r2,r2,-15172
   1626c:	10800e17 	ldw	r2,56(r2)
   16270:	1007883a 	mov	r3,r2
   16274:	008000b4 	movhi	r2,2
   16278:	10b12f04 	addi	r2,r2,-15172
   1627c:	10800f17 	ldw	r2,60(r2)
   16280:	1885383a 	mul	r2,r3,r2
   16284:	e0bffdc5 	stb	r2,-9(fp)
   16288:	e0bffdc3 	ldbu	r2,-9(fp)
   1628c:	10800268 	cmpgeui	r2,r2,9
   16290:	1000051e 	bne	r2,zero,162a8 <alt_sys_init+0x4b0>
   16294:	008000b4 	movhi	r2,2
   16298:	10b12f04 	addi	r2,r2,-15172
   1629c:	00c00044 	movi	r3,1
   162a0:	10c01015 	stw	r3,64(r2)
   162a4:	00000c06 	br	162d8 <alt_sys_init+0x4e0>
   162a8:	e0bffdc3 	ldbu	r2,-9(fp)
   162ac:	10800468 	cmpgeui	r2,r2,17
   162b0:	1000051e 	bne	r2,zero,162c8 <alt_sys_init+0x4d0>
   162b4:	008000b4 	movhi	r2,2
   162b8:	10b12f04 	addi	r2,r2,-15172
   162bc:	00c00084 	movi	r3,2
   162c0:	10c01015 	stw	r3,64(r2)
   162c4:	00000406 	br	162d8 <alt_sys_init+0x4e0>
   162c8:	008000b4 	movhi	r2,2
   162cc:	10b12f04 	addi	r2,r2,-15172
   162d0:	00c00104 	movi	r3,4
   162d4:	10c01015 	stw	r3,64(r2)
   162d8:	008000b4 	movhi	r2,2
   162dc:	10b12f04 	addi	r2,r2,-15172
   162e0:	10800a17 	ldw	r2,40(r2)
   162e4:	10800304 	addi	r2,r2,12
   162e8:	10800017 	ldw	r2,0(r2)
   162ec:	1005d43a 	srai	r2,r2,16
   162f0:	e0bffe05 	stb	r2,-8(fp)
   162f4:	008000b4 	movhi	r2,2
   162f8:	10b12f04 	addi	r2,r2,-15172
   162fc:	10800a17 	ldw	r2,40(r2)
   16300:	10800304 	addi	r2,r2,12
   16304:	10800017 	ldw	r2,0(r2)
   16308:	1004d63a 	srli	r2,r2,24
   1630c:	e0bffe45 	stb	r2,-7(fp)
   16310:	008000b4 	movhi	r2,2
   16314:	10b12f04 	addi	r2,r2,-15172
   16318:	10801017 	ldw	r2,64(r2)
   1631c:	10800058 	cmpnei	r2,r2,1
   16320:	1000041e 	bne	r2,zero,16334 <alt_sys_init+0x53c>
   16324:	008000b4 	movhi	r2,2
   16328:	10b12f04 	addi	r2,r2,-15172
   1632c:	10001315 	stw	zero,76(r2)
   16330:	00000e06 	br	1636c <alt_sys_init+0x574>
   16334:	008000b4 	movhi	r2,2
   16338:	10b12f04 	addi	r2,r2,-15172
   1633c:	10801017 	ldw	r2,64(r2)
   16340:	10800098 	cmpnei	r2,r2,2
   16344:	1000051e 	bne	r2,zero,1635c <alt_sys_init+0x564>
   16348:	008000b4 	movhi	r2,2
   1634c:	10b12f04 	addi	r2,r2,-15172
   16350:	00c00044 	movi	r3,1
   16354:	10c01315 	stw	r3,76(r2)
   16358:	00000406 	br	1636c <alt_sys_init+0x574>
   1635c:	008000b4 	movhi	r2,2
   16360:	10b12f04 	addi	r2,r2,-15172
   16364:	00c00084 	movi	r3,2
   16368:	10c01315 	stw	r3,76(r2)
   1636c:	e0bffe03 	ldbu	r2,-8(fp)
   16370:	00c00804 	movi	r3,32
   16374:	1885c83a 	sub	r2,r3,r2
   16378:	00ffffc4 	movi	r3,-1
   1637c:	1886d83a 	srl	r3,r3,r2
   16380:	008000b4 	movhi	r2,2
   16384:	10b12f04 	addi	r2,r2,-15172
   16388:	10c01415 	stw	r3,80(r2)
   1638c:	e0fffe03 	ldbu	r3,-8(fp)
   16390:	008000b4 	movhi	r2,2
   16394:	10b12f04 	addi	r2,r2,-15172
   16398:	10801317 	ldw	r2,76(r2)
   1639c:	1887883a 	add	r3,r3,r2
   163a0:	008000b4 	movhi	r2,2
   163a4:	10b12f04 	addi	r2,r2,-15172
   163a8:	10c01515 	stw	r3,84(r2)
   163ac:	e0bffe43 	ldbu	r2,-7(fp)
   163b0:	00c00804 	movi	r3,32
   163b4:	1885c83a 	sub	r2,r3,r2
   163b8:	00ffffc4 	movi	r3,-1
   163bc:	1886d83a 	srl	r3,r3,r2
   163c0:	008000b4 	movhi	r2,2
   163c4:	10b12f04 	addi	r2,r2,-15172
   163c8:	10c01615 	stw	r3,88(r2)
   163cc:	010000b4 	movhi	r4,2
   163d0:	21312f04 	addi	r4,r4,-15172
   163d4:	0015d8c0 	call	15d8c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VIDEO_IN_SUBSYSTEM_VIDEO_IN_DMA, Video_In_Subsystem_Video_In_DMA);
   163d8:	008000b4 	movhi	r2,2
   163dc:	10b14604 	addi	r2,r2,-15080
   163e0:	10800a17 	ldw	r2,40(r2)
   163e4:	10800017 	ldw	r2,0(r2)
   163e8:	1007883a 	mov	r3,r2
   163ec:	008000b4 	movhi	r2,2
   163f0:	10b14604 	addi	r2,r2,-15080
   163f4:	10c00b15 	stw	r3,44(r2)
   163f8:	008000b4 	movhi	r2,2
   163fc:	10b14604 	addi	r2,r2,-15080
   16400:	10800a17 	ldw	r2,40(r2)
   16404:	10800104 	addi	r2,r2,4
   16408:	10800017 	ldw	r2,0(r2)
   1640c:	1007883a 	mov	r3,r2
   16410:	008000b4 	movhi	r2,2
   16414:	10b14604 	addi	r2,r2,-15080
   16418:	10c00c15 	stw	r3,48(r2)
   1641c:	008000b4 	movhi	r2,2
   16420:	10b14604 	addi	r2,r2,-15080
   16424:	10800a17 	ldw	r2,40(r2)
   16428:	10800204 	addi	r2,r2,8
   1642c:	10800017 	ldw	r2,0(r2)
   16430:	10ffffcc 	andi	r3,r2,65535
   16434:	008000b4 	movhi	r2,2
   16438:	10b14604 	addi	r2,r2,-15080
   1643c:	10c01115 	stw	r3,68(r2)
   16440:	008000b4 	movhi	r2,2
   16444:	10b14604 	addi	r2,r2,-15080
   16448:	10800a17 	ldw	r2,40(r2)
   1644c:	10800204 	addi	r2,r2,8
   16450:	10800017 	ldw	r2,0(r2)
   16454:	1006d43a 	srli	r3,r2,16
   16458:	008000b4 	movhi	r2,2
   1645c:	10b14604 	addi	r2,r2,-15080
   16460:	10c01215 	stw	r3,72(r2)
   16464:	008000b4 	movhi	r2,2
   16468:	10b14604 	addi	r2,r2,-15080
   1646c:	10800a17 	ldw	r2,40(r2)
   16470:	10800304 	addi	r2,r2,12
   16474:	10800017 	ldw	r2,0(r2)
   16478:	1005d07a 	srai	r2,r2,1
   1647c:	10c0004c 	andi	r3,r2,1
   16480:	008000b4 	movhi	r2,2
   16484:	10b14604 	addi	r2,r2,-15080
   16488:	10c00d15 	stw	r3,52(r2)
   1648c:	008000b4 	movhi	r2,2
   16490:	10b14604 	addi	r2,r2,-15080
   16494:	10800a17 	ldw	r2,40(r2)
   16498:	10800304 	addi	r2,r2,12
   1649c:	10800017 	ldw	r2,0(r2)
   164a0:	1005d23a 	srai	r2,r2,8
   164a4:	108003cc 	andi	r2,r2,15
   164a8:	10800044 	addi	r2,r2,1
   164ac:	1007883a 	mov	r3,r2
   164b0:	008000b4 	movhi	r2,2
   164b4:	10b14604 	addi	r2,r2,-15080
   164b8:	10c00e15 	stw	r3,56(r2)
   164bc:	008000b4 	movhi	r2,2
   164c0:	10b14604 	addi	r2,r2,-15080
   164c4:	10800a17 	ldw	r2,40(r2)
   164c8:	10800304 	addi	r2,r2,12
   164cc:	10800017 	ldw	r2,0(r2)
   164d0:	1005d1ba 	srai	r2,r2,6
   164d4:	108000cc 	andi	r2,r2,3
   164d8:	10800044 	addi	r2,r2,1
   164dc:	1007883a 	mov	r3,r2
   164e0:	008000b4 	movhi	r2,2
   164e4:	10b14604 	addi	r2,r2,-15080
   164e8:	10c00f15 	stw	r3,60(r2)
   164ec:	008000b4 	movhi	r2,2
   164f0:	10b14604 	addi	r2,r2,-15080
   164f4:	10800e17 	ldw	r2,56(r2)
   164f8:	1007883a 	mov	r3,r2
   164fc:	008000b4 	movhi	r2,2
   16500:	10b14604 	addi	r2,r2,-15080
   16504:	10800f17 	ldw	r2,60(r2)
   16508:	1885383a 	mul	r2,r3,r2
   1650c:	e0bffe85 	stb	r2,-6(fp)
   16510:	e0bffe83 	ldbu	r2,-6(fp)
   16514:	10800268 	cmpgeui	r2,r2,9
   16518:	1000051e 	bne	r2,zero,16530 <alt_sys_init+0x738>
   1651c:	008000b4 	movhi	r2,2
   16520:	10b14604 	addi	r2,r2,-15080
   16524:	00c00044 	movi	r3,1
   16528:	10c01015 	stw	r3,64(r2)
   1652c:	00000c06 	br	16560 <alt_sys_init+0x768>
   16530:	e0bffe83 	ldbu	r2,-6(fp)
   16534:	10800468 	cmpgeui	r2,r2,17
   16538:	1000051e 	bne	r2,zero,16550 <alt_sys_init+0x758>
   1653c:	008000b4 	movhi	r2,2
   16540:	10b14604 	addi	r2,r2,-15080
   16544:	00c00084 	movi	r3,2
   16548:	10c01015 	stw	r3,64(r2)
   1654c:	00000406 	br	16560 <alt_sys_init+0x768>
   16550:	008000b4 	movhi	r2,2
   16554:	10b14604 	addi	r2,r2,-15080
   16558:	00c00104 	movi	r3,4
   1655c:	10c01015 	stw	r3,64(r2)
   16560:	008000b4 	movhi	r2,2
   16564:	10b14604 	addi	r2,r2,-15080
   16568:	10800a17 	ldw	r2,40(r2)
   1656c:	10800304 	addi	r2,r2,12
   16570:	10800017 	ldw	r2,0(r2)
   16574:	1005d43a 	srai	r2,r2,16
   16578:	e0bffec5 	stb	r2,-5(fp)
   1657c:	008000b4 	movhi	r2,2
   16580:	10b14604 	addi	r2,r2,-15080
   16584:	10800a17 	ldw	r2,40(r2)
   16588:	10800304 	addi	r2,r2,12
   1658c:	10800017 	ldw	r2,0(r2)
   16590:	1004d63a 	srli	r2,r2,24
   16594:	e0bfff05 	stb	r2,-4(fp)
   16598:	008000b4 	movhi	r2,2
   1659c:	10b14604 	addi	r2,r2,-15080
   165a0:	10801017 	ldw	r2,64(r2)
   165a4:	10800058 	cmpnei	r2,r2,1
   165a8:	1000041e 	bne	r2,zero,165bc <alt_sys_init+0x7c4>
   165ac:	008000b4 	movhi	r2,2
   165b0:	10b14604 	addi	r2,r2,-15080
   165b4:	10001315 	stw	zero,76(r2)
   165b8:	00000e06 	br	165f4 <alt_sys_init+0x7fc>
   165bc:	008000b4 	movhi	r2,2
   165c0:	10b14604 	addi	r2,r2,-15080
   165c4:	10801017 	ldw	r2,64(r2)
   165c8:	10800098 	cmpnei	r2,r2,2
   165cc:	1000051e 	bne	r2,zero,165e4 <alt_sys_init+0x7ec>
   165d0:	008000b4 	movhi	r2,2
   165d4:	10b14604 	addi	r2,r2,-15080
   165d8:	00c00044 	movi	r3,1
   165dc:	10c01315 	stw	r3,76(r2)
   165e0:	00000406 	br	165f4 <alt_sys_init+0x7fc>
   165e4:	008000b4 	movhi	r2,2
   165e8:	10b14604 	addi	r2,r2,-15080
   165ec:	00c00084 	movi	r3,2
   165f0:	10c01315 	stw	r3,76(r2)
   165f4:	e0bffec3 	ldbu	r2,-5(fp)
   165f8:	00c00804 	movi	r3,32
   165fc:	1885c83a 	sub	r2,r3,r2
   16600:	00ffffc4 	movi	r3,-1
   16604:	1886d83a 	srl	r3,r3,r2
   16608:	008000b4 	movhi	r2,2
   1660c:	10b14604 	addi	r2,r2,-15080
   16610:	10c01415 	stw	r3,80(r2)
   16614:	e0fffec3 	ldbu	r3,-5(fp)
   16618:	008000b4 	movhi	r2,2
   1661c:	10b14604 	addi	r2,r2,-15080
   16620:	10801317 	ldw	r2,76(r2)
   16624:	1887883a 	add	r3,r3,r2
   16628:	008000b4 	movhi	r2,2
   1662c:	10b14604 	addi	r2,r2,-15080
   16630:	10c01515 	stw	r3,84(r2)
   16634:	e0bfff03 	ldbu	r2,-4(fp)
   16638:	00c00804 	movi	r3,32
   1663c:	1885c83a 	sub	r2,r3,r2
   16640:	00ffffc4 	movi	r3,-1
   16644:	1886d83a 	srl	r3,r3,r2
   16648:	008000b4 	movhi	r2,2
   1664c:	10b14604 	addi	r2,r2,-15080
   16650:	10c01615 	stw	r3,88(r2)
   16654:	010000b4 	movhi	r4,2
   16658:	21314604 	addi	r4,r4,-15080
   1665c:	0015d8c0 	call	15d8c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_RGB_RESAMPLER, VGA_Subsystem_VGA_Pixel_RGB_Resampler);
   16660:	008000b4 	movhi	r2,2
   16664:	10b15d04 	addi	r2,r2,-14988
   16668:	10800a17 	ldw	r2,40(r2)
   1666c:	10800017 	ldw	r2,0(r2)
   16670:	10c003cc 	andi	r3,r2,15
   16674:	008000b4 	movhi	r2,2
   16678:	10b15d04 	addi	r2,r2,-14988
   1667c:	10c00b15 	stw	r3,44(r2)
   16680:	008000b4 	movhi	r2,2
   16684:	10b15d04 	addi	r2,r2,-14988
   16688:	10800a17 	ldw	r2,40(r2)
   1668c:	10800017 	ldw	r2,0(r2)
   16690:	1005d13a 	srai	r2,r2,4
   16694:	10c0004c 	andi	r3,r2,1
   16698:	008000b4 	movhi	r2,2
   1669c:	10b15d04 	addi	r2,r2,-14988
   166a0:	10c00c15 	stw	r3,48(r2)
   166a4:	008000b4 	movhi	r2,2
   166a8:	10b15d04 	addi	r2,r2,-14988
   166ac:	10800a17 	ldw	r2,40(r2)
   166b0:	10800017 	ldw	r2,0(r2)
   166b4:	1005d17a 	srai	r2,r2,5
   166b8:	10c0004c 	andi	r3,r2,1
   166bc:	008000b4 	movhi	r2,2
   166c0:	10b15d04 	addi	r2,r2,-14988
   166c4:	10c00d15 	stw	r3,52(r2)
   166c8:	008000b4 	movhi	r2,2
   166cc:	10b15d04 	addi	r2,r2,-14988
   166d0:	10800a17 	ldw	r2,40(r2)
   166d4:	10800017 	ldw	r2,0(r2)
   166d8:	1005d43a 	srai	r2,r2,16
   166dc:	10c003cc 	andi	r3,r2,15
   166e0:	008000b4 	movhi	r2,2
   166e4:	10b15d04 	addi	r2,r2,-14988
   166e8:	10c00e15 	stw	r3,56(r2)
   166ec:	008000b4 	movhi	r2,2
   166f0:	10b15d04 	addi	r2,r2,-14988
   166f4:	10800a17 	ldw	r2,40(r2)
   166f8:	10800017 	ldw	r2,0(r2)
   166fc:	1005d53a 	srai	r2,r2,20
   16700:	10c0004c 	andi	r3,r2,1
   16704:	008000b4 	movhi	r2,2
   16708:	10b15d04 	addi	r2,r2,-14988
   1670c:	10c00f15 	stw	r3,60(r2)
   16710:	008000b4 	movhi	r2,2
   16714:	10b15d04 	addi	r2,r2,-14988
   16718:	10800a17 	ldw	r2,40(r2)
   1671c:	10800017 	ldw	r2,0(r2)
   16720:	1005d57a 	srai	r2,r2,21
   16724:	10c0004c 	andi	r3,r2,1
   16728:	008000b4 	movhi	r2,2
   1672c:	10b15d04 	addi	r2,r2,-14988
   16730:	10c01015 	stw	r3,64(r2)
   16734:	010000b4 	movhi	r4,2
   16738:	21315d04 	addi	r4,r4,-14988
   1673c:	0015d8c0 	call	15d8c <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   16740:	010000b4 	movhi	r4,2
   16744:	21316e04 	addi	r4,r4,-14920
   16748:	0015d8c0 	call	15d8c <alt_dev_reg>
}
   1674c:	0001883a 	nop
   16750:	e037883a 	mov	sp,fp
   16754:	dfc00117 	ldw	ra,4(sp)
   16758:	df000017 	ldw	fp,0(sp)
   1675c:	dec00204 	addi	sp,sp,8
   16760:	f800283a 	ret

00016764 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   16764:	defffa04 	addi	sp,sp,-24
   16768:	dfc00515 	stw	ra,20(sp)
   1676c:	df000415 	stw	fp,16(sp)
   16770:	df000404 	addi	fp,sp,16
   16774:	e13ffd15 	stw	r4,-12(fp)
   16778:	e17ffe15 	stw	r5,-8(fp)
   1677c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   16780:	e0bffd17 	ldw	r2,-12(fp)
   16784:	10800017 	ldw	r2,0(r2)
   16788:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1678c:	e0bffc17 	ldw	r2,-16(fp)
   16790:	10c00a04 	addi	r3,r2,40
   16794:	e0bffd17 	ldw	r2,-12(fp)
   16798:	10800217 	ldw	r2,8(r2)
   1679c:	100f883a 	mov	r7,r2
   167a0:	e1bfff17 	ldw	r6,-4(fp)
   167a4:	e17ffe17 	ldw	r5,-8(fp)
   167a8:	1809883a 	mov	r4,r3
   167ac:	0016f080 	call	16f08 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   167b0:	e037883a 	mov	sp,fp
   167b4:	dfc00117 	ldw	ra,4(sp)
   167b8:	df000017 	ldw	fp,0(sp)
   167bc:	dec00204 	addi	sp,sp,8
   167c0:	f800283a 	ret

000167c4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   167c4:	defffa04 	addi	sp,sp,-24
   167c8:	dfc00515 	stw	ra,20(sp)
   167cc:	df000415 	stw	fp,16(sp)
   167d0:	df000404 	addi	fp,sp,16
   167d4:	e13ffd15 	stw	r4,-12(fp)
   167d8:	e17ffe15 	stw	r5,-8(fp)
   167dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   167e0:	e0bffd17 	ldw	r2,-12(fp)
   167e4:	10800017 	ldw	r2,0(r2)
   167e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   167ec:	e0bffc17 	ldw	r2,-16(fp)
   167f0:	10c00a04 	addi	r3,r2,40
   167f4:	e0bffd17 	ldw	r2,-12(fp)
   167f8:	10800217 	ldw	r2,8(r2)
   167fc:	100f883a 	mov	r7,r2
   16800:	e1bfff17 	ldw	r6,-4(fp)
   16804:	e17ffe17 	ldw	r5,-8(fp)
   16808:	1809883a 	mov	r4,r3
   1680c:	00171c40 	call	171c4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   16810:	e037883a 	mov	sp,fp
   16814:	dfc00117 	ldw	ra,4(sp)
   16818:	df000017 	ldw	fp,0(sp)
   1681c:	dec00204 	addi	sp,sp,8
   16820:	f800283a 	ret

00016824 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   16824:	defffc04 	addi	sp,sp,-16
   16828:	dfc00315 	stw	ra,12(sp)
   1682c:	df000215 	stw	fp,8(sp)
   16830:	df000204 	addi	fp,sp,8
   16834:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   16838:	e0bfff17 	ldw	r2,-4(fp)
   1683c:	10800017 	ldw	r2,0(r2)
   16840:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   16844:	e0bffe17 	ldw	r2,-8(fp)
   16848:	10c00a04 	addi	r3,r2,40
   1684c:	e0bfff17 	ldw	r2,-4(fp)
   16850:	10800217 	ldw	r2,8(r2)
   16854:	100b883a 	mov	r5,r2
   16858:	1809883a 	mov	r4,r3
   1685c:	0016db00 	call	16db0 <altera_avalon_jtag_uart_close>
}
   16860:	e037883a 	mov	sp,fp
   16864:	dfc00117 	ldw	ra,4(sp)
   16868:	df000017 	ldw	fp,0(sp)
   1686c:	dec00204 	addi	sp,sp,8
   16870:	f800283a 	ret

00016874 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   16874:	defffa04 	addi	sp,sp,-24
   16878:	dfc00515 	stw	ra,20(sp)
   1687c:	df000415 	stw	fp,16(sp)
   16880:	df000404 	addi	fp,sp,16
   16884:	e13ffd15 	stw	r4,-12(fp)
   16888:	e17ffe15 	stw	r5,-8(fp)
   1688c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   16890:	e0bffd17 	ldw	r2,-12(fp)
   16894:	10800017 	ldw	r2,0(r2)
   16898:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1689c:	e0bffc17 	ldw	r2,-16(fp)
   168a0:	10800a04 	addi	r2,r2,40
   168a4:	e1bfff17 	ldw	r6,-4(fp)
   168a8:	e17ffe17 	ldw	r5,-8(fp)
   168ac:	1009883a 	mov	r4,r2
   168b0:	0016e180 	call	16e18 <altera_avalon_jtag_uart_ioctl>
}
   168b4:	e037883a 	mov	sp,fp
   168b8:	dfc00117 	ldw	ra,4(sp)
   168bc:	df000017 	ldw	fp,0(sp)
   168c0:	dec00204 	addi	sp,sp,8
   168c4:	f800283a 	ret

000168c8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   168c8:	defff204 	addi	sp,sp,-56
   168cc:	dfc00d15 	stw	ra,52(sp)
   168d0:	df000c15 	stw	fp,48(sp)
   168d4:	df000c04 	addi	fp,sp,48
   168d8:	e13ff915 	stw	r4,-28(fp)
   168dc:	e17ffa15 	stw	r5,-24(fp)
   168e0:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   168e4:	e0bff917 	ldw	r2,-28(fp)
   168e8:	10800c04 	addi	r2,r2,48
   168ec:	e0bff415 	stw	r2,-48(fp)
   168f0:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   168f4:	e0bff80b 	ldhu	r2,-32(fp)
   168f8:	e0fff884 	addi	r3,fp,-30
   168fc:	180b883a 	mov	r5,r3
   16900:	1009883a 	mov	r4,r2
   16904:	0010a680 	call	10a68 <OSFlagCreate>
   16908:	1007883a 	mov	r3,r2
   1690c:	e0bff417 	ldw	r2,-48(fp)
   16910:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   16914:	e0bff917 	ldw	r2,-28(fp)
   16918:	10800a04 	addi	r2,r2,40
   1691c:	e0bff515 	stw	r2,-44(fp)
   16920:	00800044 	movi	r2,1
   16924:	e0bff78d 	sth	r2,-34(fp)
   16928:	e0bff78b 	ldhu	r2,-34(fp)
   1692c:	1009883a 	mov	r4,r2
   16930:	001377c0 	call	1377c <OSSemCreate>
   16934:	1007883a 	mov	r3,r2
   16938:	e0bff517 	ldw	r2,-44(fp)
   1693c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   16940:	e0bff917 	ldw	r2,-28(fp)
   16944:	10800b04 	addi	r2,r2,44
   16948:	e0bff615 	stw	r2,-40(fp)
   1694c:	00800044 	movi	r2,1
   16950:	e0bff70d 	sth	r2,-36(fp)
   16954:	e0bff70b 	ldhu	r2,-36(fp)
   16958:	1009883a 	mov	r4,r2
   1695c:	001377c0 	call	1377c <OSSemCreate>
   16960:	1007883a 	mov	r3,r2
   16964:	e0bff617 	ldw	r2,-40(fp)
   16968:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1696c:	e0bff917 	ldw	r2,-28(fp)
   16970:	00c00044 	movi	r3,1
   16974:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   16978:	e0bff917 	ldw	r2,-28(fp)
   1697c:	10800017 	ldw	r2,0(r2)
   16980:	10800104 	addi	r2,r2,4
   16984:	1007883a 	mov	r3,r2
   16988:	e0bff917 	ldw	r2,-28(fp)
   1698c:	10800817 	ldw	r2,32(r2)
   16990:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   16994:	e0bffb17 	ldw	r2,-20(fp)
   16998:	01800074 	movhi	r6,1
   1699c:	319a8104 	addi	r6,r6,27140
   169a0:	e17ff917 	ldw	r5,-28(fp)
   169a4:	1009883a 	mov	r4,r2
   169a8:	0018d280 	call	18d28 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   169ac:	e0bff917 	ldw	r2,-28(fp)
   169b0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   169b4:	e0bff917 	ldw	r2,-28(fp)
   169b8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   169bc:	d0e81c17 	ldw	r3,-24464(gp)
   169c0:	e1fff917 	ldw	r7,-28(fp)
   169c4:	01800074 	movhi	r6,1
   169c8:	319b2b04 	addi	r6,r6,27820
   169cc:	180b883a 	mov	r5,r3
   169d0:	1009883a 	mov	r4,r2
   169d4:	00188380 	call	18838 <alt_alarm_start>
   169d8:	1000040e 	bge	r2,zero,169ec <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   169dc:	e0fff917 	ldw	r3,-28(fp)
   169e0:	00a00034 	movhi	r2,32768
   169e4:	10bfffc4 	addi	r2,r2,-1
   169e8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   169ec:	0001883a 	nop
   169f0:	e037883a 	mov	sp,fp
   169f4:	dfc00117 	ldw	ra,4(sp)
   169f8:	df000017 	ldw	fp,0(sp)
   169fc:	dec00204 	addi	sp,sp,8
   16a00:	f800283a 	ret

00016a04 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   16a04:	defff104 	addi	sp,sp,-60
   16a08:	dfc00e15 	stw	ra,56(sp)
   16a0c:	df000d15 	stw	fp,52(sp)
   16a10:	df000d04 	addi	fp,sp,52
   16a14:	e13ffe15 	stw	r4,-8(fp)
   16a18:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   16a1c:	e0bffe17 	ldw	r2,-8(fp)
   16a20:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   16a24:	e0bff517 	ldw	r2,-44(fp)
   16a28:	10800017 	ldw	r2,0(r2)
   16a2c:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   16a30:	e0bff617 	ldw	r2,-40(fp)
   16a34:	10800104 	addi	r2,r2,4
   16a38:	10800037 	ldwio	r2,0(r2)
   16a3c:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   16a40:	e0bff717 	ldw	r2,-36(fp)
   16a44:	1080c00c 	andi	r2,r2,768
   16a48:	10009126 	beq	r2,zero,16c90 <altera_avalon_jtag_uart_irq+0x28c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   16a4c:	e0bff717 	ldw	r2,-36(fp)
   16a50:	1080400c 	andi	r2,r2,256
   16a54:	10004726 	beq	r2,zero,16b74 <altera_avalon_jtag_uart_irq+0x170>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   16a58:	00800074 	movhi	r2,1
   16a5c:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16a60:	e0bff517 	ldw	r2,-44(fp)
   16a64:	10800d17 	ldw	r2,52(r2)
   16a68:	10800044 	addi	r2,r2,1
   16a6c:	1081ffcc 	andi	r2,r2,2047
   16a70:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   16a74:	e0bff517 	ldw	r2,-44(fp)
   16a78:	10c00e17 	ldw	r3,56(r2)
   16a7c:	e0bff817 	ldw	r2,-32(fp)
   16a80:	18802726 	beq	r3,r2,16b20 <altera_avalon_jtag_uart_irq+0x11c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   16a84:	e0bff617 	ldw	r2,-40(fp)
   16a88:	10800037 	ldwio	r2,0(r2)
   16a8c:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   16a90:	e0bff317 	ldw	r2,-52(fp)
   16a94:	10a0000c 	andi	r2,r2,32768
   16a98:	10002326 	beq	r2,zero,16b28 <altera_avalon_jtag_uart_irq+0x124>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   16a9c:	e0bff517 	ldw	r2,-44(fp)
   16aa0:	10800d17 	ldw	r2,52(r2)
   16aa4:	e0fff317 	ldw	r3,-52(fp)
   16aa8:	1809883a 	mov	r4,r3
   16aac:	e0fff517 	ldw	r3,-44(fp)
   16ab0:	1885883a 	add	r2,r3,r2
   16ab4:	10801104 	addi	r2,r2,68
   16ab8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16abc:	e0bff517 	ldw	r2,-44(fp)
   16ac0:	10800d17 	ldw	r2,52(r2)
   16ac4:	10800044 	addi	r2,r2,1
   16ac8:	10c1ffcc 	andi	r3,r2,2047
   16acc:	e0bff517 	ldw	r2,-44(fp)
   16ad0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   16ad4:	e0bff517 	ldw	r2,-44(fp)
   16ad8:	10800c17 	ldw	r2,48(r2)
   16adc:	e0bffa15 	stw	r2,-24(fp)
   16ae0:	00800044 	movi	r2,1
   16ae4:	e0bffb0d 	sth	r2,-20(fp)
   16ae8:	00800044 	movi	r2,1
   16aec:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   16af0:	d0a80743 	ldbu	r2,-24547(gp)
   16af4:	10803fcc 	andi	r2,r2,255
   16af8:	103fd926 	beq	r2,zero,16a60 <altera_avalon_jtag_uart_irq+0x5c>
  {
    OSFlagPost (group, flags, opt, &err);
   16afc:	e0bffb0b 	ldhu	r2,-20(fp)
   16b00:	e0fffb83 	ldbu	r3,-18(fp)
   16b04:	e13ffcc4 	addi	r4,fp,-13
   16b08:	200f883a 	mov	r7,r4
   16b0c:	180d883a 	mov	r6,r3
   16b10:	100b883a 	mov	r5,r2
   16b14:	e13ffa17 	ldw	r4,-24(fp)
   16b18:	00116440 	call	11644 <OSFlagPost>
      }
   16b1c:	003fd006 	br	16a60 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   16b20:	0001883a 	nop
   16b24:	00000106 	br	16b2c <altera_avalon_jtag_uart_irq+0x128>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   16b28:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   16b2c:	e0bff317 	ldw	r2,-52(fp)
   16b30:	10bfffec 	andhi	r2,r2,65535
   16b34:	10000f26 	beq	r2,zero,16b74 <altera_avalon_jtag_uart_irq+0x170>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   16b38:	e0bff517 	ldw	r2,-44(fp)
   16b3c:	10c00817 	ldw	r3,32(r2)
   16b40:	00bfff84 	movi	r2,-2
   16b44:	1886703a 	and	r3,r3,r2
   16b48:	e0bff517 	ldw	r2,-44(fp)
   16b4c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   16b50:	e0bff617 	ldw	r2,-40(fp)
   16b54:	10800104 	addi	r2,r2,4
   16b58:	1007883a 	mov	r3,r2
   16b5c:	e0bff517 	ldw	r2,-44(fp)
   16b60:	10800817 	ldw	r2,32(r2)
   16b64:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   16b68:	e0bff617 	ldw	r2,-40(fp)
   16b6c:	10800104 	addi	r2,r2,4
   16b70:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   16b74:	e0bff717 	ldw	r2,-36(fp)
   16b78:	1080800c 	andi	r2,r2,512
   16b7c:	103fac26 	beq	r2,zero,16a30 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   16b80:	e0bff717 	ldw	r2,-36(fp)
   16b84:	1004d43a 	srli	r2,r2,16
   16b88:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   16b8c:	00002606 	br	16c28 <altera_avalon_jtag_uart_irq+0x224>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   16b90:	e0bff617 	ldw	r2,-40(fp)
   16b94:	e0fff517 	ldw	r3,-44(fp)
   16b98:	18c01017 	ldw	r3,64(r3)
   16b9c:	e13ff517 	ldw	r4,-44(fp)
   16ba0:	20c7883a 	add	r3,r4,r3
   16ba4:	18c21104 	addi	r3,r3,2116
   16ba8:	18c00003 	ldbu	r3,0(r3)
   16bac:	18c03fcc 	andi	r3,r3,255
   16bb0:	18c0201c 	xori	r3,r3,128
   16bb4:	18ffe004 	addi	r3,r3,-128
   16bb8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16bbc:	e0bff517 	ldw	r2,-44(fp)
   16bc0:	10801017 	ldw	r2,64(r2)
   16bc4:	10800044 	addi	r2,r2,1
   16bc8:	10c1ffcc 	andi	r3,r2,2047
   16bcc:	e0bff517 	ldw	r2,-44(fp)
   16bd0:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   16bd4:	e0bff517 	ldw	r2,-44(fp)
   16bd8:	10800c17 	ldw	r2,48(r2)
   16bdc:	e0bff915 	stw	r2,-28(fp)
   16be0:	00800084 	movi	r2,2
   16be4:	e0bffc0d 	sth	r2,-16(fp)
   16be8:	00800044 	movi	r2,1
   16bec:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   16bf0:	d0a80743 	ldbu	r2,-24547(gp)
   16bf4:	10803fcc 	andi	r2,r2,255
   16bf8:	10000826 	beq	r2,zero,16c1c <altera_avalon_jtag_uart_irq+0x218>
  {
    OSFlagPost (group, flags, opt, &err);
   16bfc:	e0bffc0b 	ldhu	r2,-16(fp)
   16c00:	e0fffc83 	ldbu	r3,-14(fp)
   16c04:	e13ffd04 	addi	r4,fp,-12
   16c08:	200f883a 	mov	r7,r4
   16c0c:	180d883a 	mov	r6,r3
   16c10:	100b883a 	mov	r5,r2
   16c14:	e13ff917 	ldw	r4,-28(fp)
   16c18:	00116440 	call	11644 <OSFlagPost>

        space--;
   16c1c:	e0bff417 	ldw	r2,-48(fp)
   16c20:	10bfffc4 	addi	r2,r2,-1
   16c24:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   16c28:	e0bff417 	ldw	r2,-48(fp)
   16c2c:	10000526 	beq	r2,zero,16c44 <altera_avalon_jtag_uart_irq+0x240>
   16c30:	e0bff517 	ldw	r2,-44(fp)
   16c34:	10c01017 	ldw	r3,64(r2)
   16c38:	e0bff517 	ldw	r2,-44(fp)
   16c3c:	10800f17 	ldw	r2,60(r2)
   16c40:	18bfd31e 	bne	r3,r2,16b90 <altera_avalon_jtag_uart_irq+0x18c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   16c44:	e0bff417 	ldw	r2,-48(fp)
   16c48:	103f7926 	beq	r2,zero,16a30 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   16c4c:	e0bff517 	ldw	r2,-44(fp)
   16c50:	10c00817 	ldw	r3,32(r2)
   16c54:	00bfff44 	movi	r2,-3
   16c58:	1886703a 	and	r3,r3,r2
   16c5c:	e0bff517 	ldw	r2,-44(fp)
   16c60:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   16c64:	e0bff517 	ldw	r2,-44(fp)
   16c68:	10800017 	ldw	r2,0(r2)
   16c6c:	10800104 	addi	r2,r2,4
   16c70:	1007883a 	mov	r3,r2
   16c74:	e0bff517 	ldw	r2,-44(fp)
   16c78:	10800817 	ldw	r2,32(r2)
   16c7c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   16c80:	e0bff617 	ldw	r2,-40(fp)
   16c84:	10800104 	addi	r2,r2,4
   16c88:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   16c8c:	003f6806 	br	16a30 <altera_avalon_jtag_uart_irq+0x2c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   16c90:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   16c94:	0001883a 	nop
   16c98:	e037883a 	mov	sp,fp
   16c9c:	dfc00117 	ldw	ra,4(sp)
   16ca0:	df000017 	ldw	fp,0(sp)
   16ca4:	dec00204 	addi	sp,sp,8
   16ca8:	f800283a 	ret

00016cac <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   16cac:	defff904 	addi	sp,sp,-28
   16cb0:	dfc00615 	stw	ra,24(sp)
   16cb4:	df000515 	stw	fp,20(sp)
   16cb8:	df000504 	addi	fp,sp,20
   16cbc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   16cc0:	e0bfff17 	ldw	r2,-4(fp)
   16cc4:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   16cc8:	e0bffb17 	ldw	r2,-20(fp)
   16ccc:	10800017 	ldw	r2,0(r2)
   16cd0:	10800104 	addi	r2,r2,4
   16cd4:	10800037 	ldwio	r2,0(r2)
   16cd8:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   16cdc:	e0bffc17 	ldw	r2,-16(fp)
   16ce0:	1081000c 	andi	r2,r2,1024
   16ce4:	10000b26 	beq	r2,zero,16d14 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   16ce8:	e0bffb17 	ldw	r2,-20(fp)
   16cec:	10800017 	ldw	r2,0(r2)
   16cf0:	10800104 	addi	r2,r2,4
   16cf4:	1007883a 	mov	r3,r2
   16cf8:	e0bffb17 	ldw	r2,-20(fp)
   16cfc:	10800817 	ldw	r2,32(r2)
   16d00:	10810014 	ori	r2,r2,1024
   16d04:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   16d08:	e0bffb17 	ldw	r2,-20(fp)
   16d0c:	10000915 	stw	zero,36(r2)
   16d10:	00002106 	br	16d98 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   16d14:	e0bffb17 	ldw	r2,-20(fp)
   16d18:	10c00917 	ldw	r3,36(r2)
   16d1c:	00a00034 	movhi	r2,32768
   16d20:	10bfff04 	addi	r2,r2,-4
   16d24:	10c01c36 	bltu	r2,r3,16d98 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
   16d28:	e0bffb17 	ldw	r2,-20(fp)
   16d2c:	10800917 	ldw	r2,36(r2)
   16d30:	10c00044 	addi	r3,r2,1
   16d34:	e0bffb17 	ldw	r2,-20(fp)
   16d38:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   16d3c:	e0bffb17 	ldw	r2,-20(fp)
   16d40:	10c00917 	ldw	r3,36(r2)
   16d44:	e0bffb17 	ldw	r2,-20(fp)
   16d48:	10800117 	ldw	r2,4(r2)
   16d4c:	18801236 	bltu	r3,r2,16d98 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   16d50:	e0bffb17 	ldw	r2,-20(fp)
   16d54:	10800c17 	ldw	r2,48(r2)
   16d58:	e0bffd15 	stw	r2,-12(fp)
   16d5c:	00800104 	movi	r2,4
   16d60:	e0bffe0d 	sth	r2,-8(fp)
   16d64:	00800044 	movi	r2,1
   16d68:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   16d6c:	d0a80743 	ldbu	r2,-24547(gp)
   16d70:	10803fcc 	andi	r2,r2,255
   16d74:	10000826 	beq	r2,zero,16d98 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
   16d78:	e0bffe0b 	ldhu	r2,-8(fp)
   16d7c:	e0fffe83 	ldbu	r3,-6(fp)
   16d80:	e13ffec4 	addi	r4,fp,-5
   16d84:	200f883a 	mov	r7,r4
   16d88:	180d883a 	mov	r6,r3
   16d8c:	100b883a 	mov	r5,r2
   16d90:	e13ffd17 	ldw	r4,-12(fp)
   16d94:	00116440 	call	11644 <OSFlagPost>
   16d98:	d0a81c17 	ldw	r2,-24464(gp)
    }
  }

  return alt_ticks_per_second();
}
   16d9c:	e037883a 	mov	sp,fp
   16da0:	dfc00117 	ldw	ra,4(sp)
   16da4:	df000017 	ldw	fp,0(sp)
   16da8:	dec00204 	addi	sp,sp,8
   16dac:	f800283a 	ret

00016db0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   16db0:	defffd04 	addi	sp,sp,-12
   16db4:	df000215 	stw	fp,8(sp)
   16db8:	df000204 	addi	fp,sp,8
   16dbc:	e13ffe15 	stw	r4,-8(fp)
   16dc0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   16dc4:	00000506 	br	16ddc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   16dc8:	e0bfff17 	ldw	r2,-4(fp)
   16dcc:	1090000c 	andi	r2,r2,16384
   16dd0:	10000226 	beq	r2,zero,16ddc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   16dd4:	00bffd44 	movi	r2,-11
   16dd8:	00000b06 	br	16e08 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   16ddc:	e0bffe17 	ldw	r2,-8(fp)
   16de0:	10c01017 	ldw	r3,64(r2)
   16de4:	e0bffe17 	ldw	r2,-8(fp)
   16de8:	10800f17 	ldw	r2,60(r2)
   16dec:	18800526 	beq	r3,r2,16e04 <altera_avalon_jtag_uart_close+0x54>
   16df0:	e0bffe17 	ldw	r2,-8(fp)
   16df4:	10c00917 	ldw	r3,36(r2)
   16df8:	e0bffe17 	ldw	r2,-8(fp)
   16dfc:	10800117 	ldw	r2,4(r2)
   16e00:	18bff136 	bltu	r3,r2,16dc8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   16e04:	0005883a 	mov	r2,zero
}
   16e08:	e037883a 	mov	sp,fp
   16e0c:	df000017 	ldw	fp,0(sp)
   16e10:	dec00104 	addi	sp,sp,4
   16e14:	f800283a 	ret

00016e18 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   16e18:	defffa04 	addi	sp,sp,-24
   16e1c:	df000515 	stw	fp,20(sp)
   16e20:	df000504 	addi	fp,sp,20
   16e24:	e13ffd15 	stw	r4,-12(fp)
   16e28:	e17ffe15 	stw	r5,-8(fp)
   16e2c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   16e30:	00bff9c4 	movi	r2,-25
   16e34:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   16e38:	e0bffe17 	ldw	r2,-8(fp)
   16e3c:	10da8060 	cmpeqi	r3,r2,27137
   16e40:	1800031e 	bne	r3,zero,16e50 <altera_avalon_jtag_uart_ioctl+0x38>
   16e44:	109a80a0 	cmpeqi	r2,r2,27138
   16e48:	1000181e 	bne	r2,zero,16eac <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   16e4c:	00002906 	br	16ef4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   16e50:	e0bffd17 	ldw	r2,-12(fp)
   16e54:	10c00117 	ldw	r3,4(r2)
   16e58:	00a00034 	movhi	r2,32768
   16e5c:	10bfffc4 	addi	r2,r2,-1
   16e60:	18802126 	beq	r3,r2,16ee8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   16e64:	e0bfff17 	ldw	r2,-4(fp)
   16e68:	10800017 	ldw	r2,0(r2)
   16e6c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   16e70:	e0bffc17 	ldw	r2,-16(fp)
   16e74:	10800090 	cmplti	r2,r2,2
   16e78:	1000061e 	bne	r2,zero,16e94 <altera_avalon_jtag_uart_ioctl+0x7c>
   16e7c:	e0fffc17 	ldw	r3,-16(fp)
   16e80:	00a00034 	movhi	r2,32768
   16e84:	10bfffc4 	addi	r2,r2,-1
   16e88:	18800226 	beq	r3,r2,16e94 <altera_avalon_jtag_uart_ioctl+0x7c>
   16e8c:	e0bffc17 	ldw	r2,-16(fp)
   16e90:	00000206 	br	16e9c <altera_avalon_jtag_uart_ioctl+0x84>
   16e94:	00a00034 	movhi	r2,32768
   16e98:	10bfff84 	addi	r2,r2,-2
   16e9c:	e0fffd17 	ldw	r3,-12(fp)
   16ea0:	18800115 	stw	r2,4(r3)
      rc = 0;
   16ea4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   16ea8:	00000f06 	br	16ee8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   16eac:	e0bffd17 	ldw	r2,-12(fp)
   16eb0:	10c00117 	ldw	r3,4(r2)
   16eb4:	00a00034 	movhi	r2,32768
   16eb8:	10bfffc4 	addi	r2,r2,-1
   16ebc:	18800c26 	beq	r3,r2,16ef0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   16ec0:	e0bffd17 	ldw	r2,-12(fp)
   16ec4:	10c00917 	ldw	r3,36(r2)
   16ec8:	e0bffd17 	ldw	r2,-12(fp)
   16ecc:	10800117 	ldw	r2,4(r2)
   16ed0:	1885803a 	cmpltu	r2,r3,r2
   16ed4:	10c03fcc 	andi	r3,r2,255
   16ed8:	e0bfff17 	ldw	r2,-4(fp)
   16edc:	10c00015 	stw	r3,0(r2)
      rc = 0;
   16ee0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   16ee4:	00000206 	br	16ef0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   16ee8:	0001883a 	nop
   16eec:	00000106 	br	16ef4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   16ef0:	0001883a 	nop

  default:
    break;
  }

  return rc;
   16ef4:	e0bffb17 	ldw	r2,-20(fp)
}
   16ef8:	e037883a 	mov	sp,fp
   16efc:	df000017 	ldw	fp,0(sp)
   16f00:	dec00104 	addi	sp,sp,4
   16f04:	f800283a 	ret

00016f08 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   16f08:	deffed04 	addi	sp,sp,-76
   16f0c:	dfc01215 	stw	ra,72(sp)
   16f10:	df001115 	stw	fp,68(sp)
   16f14:	df001104 	addi	fp,sp,68
   16f18:	e13ffc15 	stw	r4,-16(fp)
   16f1c:	e17ffd15 	stw	r5,-12(fp)
   16f20:	e1bffe15 	stw	r6,-8(fp)
   16f24:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   16f28:	e0bffd17 	ldw	r2,-12(fp)
   16f2c:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   16f30:	e0bffc17 	ldw	r2,-16(fp)
   16f34:	10800a17 	ldw	r2,40(r2)
   16f38:	e0bff815 	stw	r2,-32(fp)
   16f3c:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   16f40:	e0bff90b 	ldhu	r2,-28(fp)
   16f44:	e0fffb04 	addi	r3,fp,-20
   16f48:	180d883a 	mov	r6,r3
   16f4c:	100b883a 	mov	r5,r2
   16f50:	e13ff817 	ldw	r4,-32(fp)
   16f54:	0013a940 	call	13a94 <OSSemPend>

  while (space > 0)
   16f58:	00006106 	br	170e0 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   16f5c:	e0bffc17 	ldw	r2,-16(fp)
   16f60:	10800d17 	ldw	r2,52(r2)
   16f64:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
   16f68:	e0bffc17 	ldw	r2,-16(fp)
   16f6c:	10800e17 	ldw	r2,56(r2)
   16f70:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
   16f74:	e0fff317 	ldw	r3,-52(fp)
   16f78:	e0bff417 	ldw	r2,-48(fp)
   16f7c:	18800536 	bltu	r3,r2,16f94 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   16f80:	e0fff317 	ldw	r3,-52(fp)
   16f84:	e0bff417 	ldw	r2,-48(fp)
   16f88:	1885c83a 	sub	r2,r3,r2
   16f8c:	e0bff115 	stw	r2,-60(fp)
   16f90:	00000406 	br	16fa4 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   16f94:	00c20004 	movi	r3,2048
   16f98:	e0bff417 	ldw	r2,-48(fp)
   16f9c:	1885c83a 	sub	r2,r3,r2
   16fa0:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   16fa4:	e0bff117 	ldw	r2,-60(fp)
   16fa8:	10001e26 	beq	r2,zero,17024 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   16fac:	e0fffe17 	ldw	r3,-8(fp)
   16fb0:	e0bff117 	ldw	r2,-60(fp)
   16fb4:	1880022e 	bgeu	r3,r2,16fc0 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
   16fb8:	e0bffe17 	ldw	r2,-8(fp)
   16fbc:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   16fc0:	e0bffc17 	ldw	r2,-16(fp)
   16fc4:	10c01104 	addi	r3,r2,68
   16fc8:	e0bff417 	ldw	r2,-48(fp)
   16fcc:	1885883a 	add	r2,r3,r2
   16fd0:	e1bff117 	ldw	r6,-60(fp)
   16fd4:	100b883a 	mov	r5,r2
   16fd8:	e13ff017 	ldw	r4,-64(fp)
   16fdc:	0006b0c0 	call	6b0c <memcpy>
      ptr   += n;
   16fe0:	e0fff017 	ldw	r3,-64(fp)
   16fe4:	e0bff117 	ldw	r2,-60(fp)
   16fe8:	1885883a 	add	r2,r3,r2
   16fec:	e0bff015 	stw	r2,-64(fp)
      space -= n;
   16ff0:	e0fffe17 	ldw	r3,-8(fp)
   16ff4:	e0bff117 	ldw	r2,-60(fp)
   16ff8:	1885c83a 	sub	r2,r3,r2
   16ffc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   17000:	e0fff417 	ldw	r3,-48(fp)
   17004:	e0bff117 	ldw	r2,-60(fp)
   17008:	1885883a 	add	r2,r3,r2
   1700c:	10c1ffcc 	andi	r3,r2,2047
   17010:	e0bffc17 	ldw	r2,-16(fp)
   17014:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   17018:	e0bffe17 	ldw	r2,-8(fp)
   1701c:	00bfcf16 	blt	zero,r2,16f5c <altera_avalon_jtag_uart_read+0x54>
   17020:	00000106 	br	17028 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   17024:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   17028:	e0fff017 	ldw	r3,-64(fp)
   1702c:	e0bffd17 	ldw	r2,-12(fp)
   17030:	18802e1e 	bne	r3,r2,170ec <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   17034:	e0bfff17 	ldw	r2,-4(fp)
   17038:	1090000c 	andi	r2,r2,16384
   1703c:	10002d1e 	bne	r2,zero,170f4 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   17040:	d0a80743 	ldbu	r2,-24547(gp)
   17044:	10803fcc 	andi	r2,r2,255
   17048:	10800058 	cmpnei	r2,r2,1
   1704c:	1000161e 	bne	r2,zero,170a8 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   17050:	e0bffc17 	ldw	r2,-16(fp)
   17054:	10800c17 	ldw	r2,48(r2)
   17058:	e0bff215 	stw	r2,-56(fp)
   1705c:	00800144 	movi	r2,5
   17060:	e0bff98d 	sth	r2,-26(fp)
   17064:	00bfe0c4 	movi	r2,-125
   17068:	e0bffa05 	stb	r2,-24(fp)
   1706c:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   17070:	d0a80743 	ldbu	r2,-24547(gp)
   17074:	10803fcc 	andi	r2,r2,255
   17078:	10001526 	beq	r2,zero,170d0 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1707c:	e0fff98b 	ldhu	r3,-26(fp)
   17080:	e13ffa03 	ldbu	r4,-24(fp)
   17084:	e17ffa8b 	ldhu	r5,-22(fp)
   17088:	e0bffb44 	addi	r2,fp,-19
   1708c:	d8800015 	stw	r2,0(sp)
   17090:	280f883a 	mov	r7,r5
   17094:	200d883a 	mov	r6,r4
   17098:	180b883a 	mov	r5,r3
   1709c:	e13ff217 	ldw	r4,-56(fp)
   170a0:	001102c0 	call	1102c <OSFlagPend>
   170a4:	00000a06 	br	170d0 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   170a8:	0001883a 	nop
   170ac:	e0bffc17 	ldw	r2,-16(fp)
   170b0:	10c00d17 	ldw	r3,52(r2)
   170b4:	e0bff317 	ldw	r2,-52(fp)
   170b8:	1880051e 	bne	r3,r2,170d0 <altera_avalon_jtag_uart_read+0x1c8>
   170bc:	e0bffc17 	ldw	r2,-16(fp)
   170c0:	10c00917 	ldw	r3,36(r2)
   170c4:	e0bffc17 	ldw	r2,-16(fp)
   170c8:	10800117 	ldw	r2,4(r2)
   170cc:	18bff736 	bltu	r3,r2,170ac <altera_avalon_jtag_uart_read+0x1a4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   170d0:	e0bffc17 	ldw	r2,-16(fp)
   170d4:	10c00d17 	ldw	r3,52(r2)
   170d8:	e0bff317 	ldw	r2,-52(fp)
   170dc:	18800726 	beq	r3,r2,170fc <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   170e0:	e0bffe17 	ldw	r2,-8(fp)
   170e4:	00bf9d16 	blt	zero,r2,16f5c <altera_avalon_jtag_uart_read+0x54>
   170e8:	00000506 	br	17100 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   170ec:	0001883a 	nop
   170f0:	00000306 	br	17100 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   170f4:	0001883a 	nop
   170f8:	00000106 	br	17100 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   170fc:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   17100:	e0bffc17 	ldw	r2,-16(fp)
   17104:	10800a17 	ldw	r2,40(r2)
   17108:	1009883a 	mov	r4,r2
   1710c:	0013e0c0 	call	13e0c <OSSemPost>

  if (ptr != buffer)
   17110:	e0fff017 	ldw	r3,-64(fp)
   17114:	e0bffd17 	ldw	r2,-12(fp)
   17118:	18801826 	beq	r3,r2,1717c <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1711c:	0005303a 	rdctl	r2,status
   17120:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17124:	e0fff717 	ldw	r3,-36(fp)
   17128:	00bfff84 	movi	r2,-2
   1712c:	1884703a 	and	r2,r3,r2
   17130:	1001703a 	wrctl	status,r2
  
  return context;
   17134:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   17138:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1713c:	e0bffc17 	ldw	r2,-16(fp)
   17140:	10800817 	ldw	r2,32(r2)
   17144:	10c00054 	ori	r3,r2,1
   17148:	e0bffc17 	ldw	r2,-16(fp)
   1714c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   17150:	e0bffc17 	ldw	r2,-16(fp)
   17154:	10800017 	ldw	r2,0(r2)
   17158:	10800104 	addi	r2,r2,4
   1715c:	1007883a 	mov	r3,r2
   17160:	e0bffc17 	ldw	r2,-16(fp)
   17164:	10800817 	ldw	r2,32(r2)
   17168:	18800035 	stwio	r2,0(r3)
   1716c:	e0bff617 	ldw	r2,-40(fp)
   17170:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17174:	e0bff517 	ldw	r2,-44(fp)
   17178:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1717c:	e0fff017 	ldw	r3,-64(fp)
   17180:	e0bffd17 	ldw	r2,-12(fp)
   17184:	18800426 	beq	r3,r2,17198 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
   17188:	e0fff017 	ldw	r3,-64(fp)
   1718c:	e0bffd17 	ldw	r2,-12(fp)
   17190:	1885c83a 	sub	r2,r3,r2
   17194:	00000606 	br	171b0 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   17198:	e0bfff17 	ldw	r2,-4(fp)
   1719c:	1090000c 	andi	r2,r2,16384
   171a0:	10000226 	beq	r2,zero,171ac <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
   171a4:	00bffd44 	movi	r2,-11
   171a8:	00000106 	br	171b0 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   171ac:	00bffec4 	movi	r2,-5
}
   171b0:	e037883a 	mov	sp,fp
   171b4:	dfc00117 	ldw	ra,4(sp)
   171b8:	df000017 	ldw	fp,0(sp)
   171bc:	dec00204 	addi	sp,sp,8
   171c0:	f800283a 	ret

000171c4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   171c4:	deffed04 	addi	sp,sp,-76
   171c8:	dfc01215 	stw	ra,72(sp)
   171cc:	df001115 	stw	fp,68(sp)
   171d0:	df001104 	addi	fp,sp,68
   171d4:	e13ffc15 	stw	r4,-16(fp)
   171d8:	e17ffd15 	stw	r5,-12(fp)
   171dc:	e1bffe15 	stw	r6,-8(fp)
   171e0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   171e4:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   171e8:	e0bffd17 	ldw	r2,-12(fp)
   171ec:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   171f0:	e0bffc17 	ldw	r2,-16(fp)
   171f4:	10800b17 	ldw	r2,44(r2)
   171f8:	e0bff815 	stw	r2,-32(fp)
   171fc:	e03ff90d 	sth	zero,-28(fp)
   17200:	e0bff90b 	ldhu	r2,-28(fp)
   17204:	e0fffb44 	addi	r3,fp,-19
   17208:	180d883a 	mov	r6,r3
   1720c:	100b883a 	mov	r5,r2
   17210:	e13ff817 	ldw	r4,-32(fp)
   17214:	0013a940 	call	13a94 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   17218:	00003706 	br	172f8 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1721c:	e0bffc17 	ldw	r2,-16(fp)
   17220:	10800f17 	ldw	r2,60(r2)
   17224:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
   17228:	e0bffc17 	ldw	r2,-16(fp)
   1722c:	10801017 	ldw	r2,64(r2)
   17230:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   17234:	e0fff417 	ldw	r3,-48(fp)
   17238:	e0bff017 	ldw	r2,-64(fp)
   1723c:	1880062e 	bgeu	r3,r2,17258 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   17240:	e0fff017 	ldw	r3,-64(fp)
   17244:	e0bff417 	ldw	r2,-48(fp)
   17248:	1885c83a 	sub	r2,r3,r2
   1724c:	10bfffc4 	addi	r2,r2,-1
   17250:	e0bff115 	stw	r2,-60(fp)
   17254:	00000b06 	br	17284 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   17258:	e0bff017 	ldw	r2,-64(fp)
   1725c:	10000526 	beq	r2,zero,17274 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   17260:	00c20004 	movi	r3,2048
   17264:	e0bff417 	ldw	r2,-48(fp)
   17268:	1885c83a 	sub	r2,r3,r2
   1726c:	e0bff115 	stw	r2,-60(fp)
   17270:	00000406 	br	17284 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   17274:	00c1ffc4 	movi	r3,2047
   17278:	e0bff417 	ldw	r2,-48(fp)
   1727c:	1885c83a 	sub	r2,r3,r2
   17280:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   17284:	e0bff117 	ldw	r2,-60(fp)
   17288:	10001e26 	beq	r2,zero,17304 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
   1728c:	e0fffe17 	ldw	r3,-8(fp)
   17290:	e0bff117 	ldw	r2,-60(fp)
   17294:	1880022e 	bgeu	r3,r2,172a0 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   17298:	e0bffe17 	ldw	r2,-8(fp)
   1729c:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   172a0:	e0bffc17 	ldw	r2,-16(fp)
   172a4:	10c21104 	addi	r3,r2,2116
   172a8:	e0bff417 	ldw	r2,-48(fp)
   172ac:	1885883a 	add	r2,r3,r2
   172b0:	e1bff117 	ldw	r6,-60(fp)
   172b4:	e17ffd17 	ldw	r5,-12(fp)
   172b8:	1009883a 	mov	r4,r2
   172bc:	0006b0c0 	call	6b0c <memcpy>
      ptr   += n;
   172c0:	e0fffd17 	ldw	r3,-12(fp)
   172c4:	e0bff117 	ldw	r2,-60(fp)
   172c8:	1885883a 	add	r2,r3,r2
   172cc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   172d0:	e0fffe17 	ldw	r3,-8(fp)
   172d4:	e0bff117 	ldw	r2,-60(fp)
   172d8:	1885c83a 	sub	r2,r3,r2
   172dc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   172e0:	e0fff417 	ldw	r3,-48(fp)
   172e4:	e0bff117 	ldw	r2,-60(fp)
   172e8:	1885883a 	add	r2,r3,r2
   172ec:	10c1ffcc 	andi	r3,r2,2047
   172f0:	e0bffc17 	ldw	r2,-16(fp)
   172f4:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   172f8:	e0bffe17 	ldw	r2,-8(fp)
   172fc:	00bfc716 	blt	zero,r2,1721c <altera_avalon_jtag_uart_write+0x58>
   17300:	00000106 	br	17308 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   17304:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17308:	0005303a 	rdctl	r2,status
   1730c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17310:	e0fff717 	ldw	r3,-36(fp)
   17314:	00bfff84 	movi	r2,-2
   17318:	1884703a 	and	r2,r3,r2
   1731c:	1001703a 	wrctl	status,r2
  
  return context;
   17320:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   17324:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   17328:	e0bffc17 	ldw	r2,-16(fp)
   1732c:	10800817 	ldw	r2,32(r2)
   17330:	10c00094 	ori	r3,r2,2
   17334:	e0bffc17 	ldw	r2,-16(fp)
   17338:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1733c:	e0bffc17 	ldw	r2,-16(fp)
   17340:	10800017 	ldw	r2,0(r2)
   17344:	10800104 	addi	r2,r2,4
   17348:	1007883a 	mov	r3,r2
   1734c:	e0bffc17 	ldw	r2,-16(fp)
   17350:	10800817 	ldw	r2,32(r2)
   17354:	18800035 	stwio	r2,0(r3)
   17358:	e0bff617 	ldw	r2,-40(fp)
   1735c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17360:	e0bff317 	ldw	r2,-52(fp)
   17364:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   17368:	e0bffe17 	ldw	r2,-8(fp)
   1736c:	00802a0e 	bge	zero,r2,17418 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
   17370:	e0bfff17 	ldw	r2,-4(fp)
   17374:	1090000c 	andi	r2,r2,16384
   17378:	10002a1e 	bne	r2,zero,17424 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   1737c:	d0a80743 	ldbu	r2,-24547(gp)
   17380:	10803fcc 	andi	r2,r2,255
   17384:	10800058 	cmpnei	r2,r2,1
   17388:	1000161e 	bne	r2,zero,173e4 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   1738c:	e0bffc17 	ldw	r2,-16(fp)
   17390:	10800c17 	ldw	r2,48(r2)
   17394:	e0bff515 	stw	r2,-44(fp)
   17398:	00800184 	movi	r2,6
   1739c:	e0bff98d 	sth	r2,-26(fp)
   173a0:	00bfe0c4 	movi	r2,-125
   173a4:	e0bffa05 	stb	r2,-24(fp)
   173a8:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   173ac:	d0a80743 	ldbu	r2,-24547(gp)
   173b0:	10803fcc 	andi	r2,r2,255
   173b4:	10001526 	beq	r2,zero,1740c <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   173b8:	e0fff98b 	ldhu	r3,-26(fp)
   173bc:	e13ffa03 	ldbu	r4,-24(fp)
   173c0:	e17ffa8b 	ldhu	r5,-22(fp)
   173c4:	e0bffb04 	addi	r2,fp,-20
   173c8:	d8800015 	stw	r2,0(sp)
   173cc:	280f883a 	mov	r7,r5
   173d0:	200d883a 	mov	r6,r4
   173d4:	180b883a 	mov	r5,r3
   173d8:	e13ff517 	ldw	r4,-44(fp)
   173dc:	001102c0 	call	1102c <OSFlagPend>
   173e0:	00000a06 	br	1740c <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   173e4:	0001883a 	nop
   173e8:	e0bffc17 	ldw	r2,-16(fp)
   173ec:	10c01017 	ldw	r3,64(r2)
   173f0:	e0bff017 	ldw	r2,-64(fp)
   173f4:	1880051e 	bne	r3,r2,1740c <altera_avalon_jtag_uart_write+0x248>
   173f8:	e0bffc17 	ldw	r2,-16(fp)
   173fc:	10c00917 	ldw	r3,36(r2)
   17400:	e0bffc17 	ldw	r2,-16(fp)
   17404:	10800117 	ldw	r2,4(r2)
   17408:	18bff736 	bltu	r3,r2,173e8 <altera_avalon_jtag_uart_write+0x224>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1740c:	e0bffc17 	ldw	r2,-16(fp)
   17410:	10800917 	ldw	r2,36(r2)
   17414:	1000051e 	bne	r2,zero,1742c <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
   17418:	e0bffe17 	ldw	r2,-8(fp)
   1741c:	00bfb616 	blt	zero,r2,172f8 <altera_avalon_jtag_uart_write+0x134>
   17420:	00000306 	br	17430 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   17424:	0001883a 	nop
   17428:	00000106 	br	17430 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   1742c:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   17430:	e0bffc17 	ldw	r2,-16(fp)
   17434:	10800b17 	ldw	r2,44(r2)
   17438:	1009883a 	mov	r4,r2
   1743c:	0013e0c0 	call	13e0c <OSSemPost>

  if (ptr != start)
   17440:	e0fffd17 	ldw	r3,-12(fp)
   17444:	e0bff217 	ldw	r2,-56(fp)
   17448:	18800426 	beq	r3,r2,1745c <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
   1744c:	e0fffd17 	ldw	r3,-12(fp)
   17450:	e0bff217 	ldw	r2,-56(fp)
   17454:	1885c83a 	sub	r2,r3,r2
   17458:	00000606 	br	17474 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
   1745c:	e0bfff17 	ldw	r2,-4(fp)
   17460:	1090000c 	andi	r2,r2,16384
   17464:	10000226 	beq	r2,zero,17470 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
   17468:	00bffd44 	movi	r2,-11
   1746c:	00000106 	br	17474 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   17470:	00bffec4 	movi	r2,-5
}
   17474:	e037883a 	mov	sp,fp
   17478:	dfc00117 	ldw	ra,4(sp)
   1747c:	df000017 	ldw	fp,0(sp)
   17480:	dec00204 	addi	sp,sp,8
   17484:	f800283a 	ret

00017488 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   17488:	defff904 	addi	sp,sp,-28
   1748c:	dfc00615 	stw	ra,24(sp)
   17490:	df000515 	stw	fp,20(sp)
   17494:	df000504 	addi	fp,sp,20
   17498:	e13ffe15 	stw	r4,-8(fp)
   1749c:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   174a0:	0007883a 	mov	r3,zero
   174a4:	e0bffe17 	ldw	r2,-8(fp)
   174a8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   174ac:	e0bffe17 	ldw	r2,-8(fp)
   174b0:	10800104 	addi	r2,r2,4
   174b4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   174b8:	0005303a 	rdctl	r2,status
   174bc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   174c0:	e0fffc17 	ldw	r3,-16(fp)
   174c4:	00bfff84 	movi	r2,-2
   174c8:	1884703a 	and	r2,r3,r2
   174cc:	1001703a 	wrctl	status,r2
  
  return context;
   174d0:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   174d4:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   174d8:	00191980 	call	19198 <alt_tick>
   174dc:	e0bffb17 	ldw	r2,-20(fp)
   174e0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   174e4:	e0bffd17 	ldw	r2,-12(fp)
   174e8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   174ec:	0001883a 	nop
   174f0:	e037883a 	mov	sp,fp
   174f4:	dfc00117 	ldw	ra,4(sp)
   174f8:	df000017 	ldw	fp,0(sp)
   174fc:	dec00204 	addi	sp,sp,8
   17500:	f800283a 	ret

00017504 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   17504:	defff904 	addi	sp,sp,-28
   17508:	dfc00615 	stw	ra,24(sp)
   1750c:	df000515 	stw	fp,20(sp)
   17510:	df000504 	addi	fp,sp,20
   17514:	e13ffc15 	stw	r4,-16(fp)
   17518:	e17ffd15 	stw	r5,-12(fp)
   1751c:	e1bffe15 	stw	r6,-8(fp)
   17520:	e1ffff15 	stw	r7,-4(fp)
   17524:	e0bfff17 	ldw	r2,-4(fp)
   17528:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1752c:	d0a81c17 	ldw	r2,-24464(gp)
   17530:	1000021e 	bne	r2,zero,1753c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   17534:	e0bffb17 	ldw	r2,-20(fp)
   17538:	d0a81c15 	stw	r2,-24464(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1753c:	e0bffc17 	ldw	r2,-16(fp)
   17540:	10800104 	addi	r2,r2,4
   17544:	00c001c4 	movi	r3,7
   17548:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   1754c:	01800074 	movhi	r6,1
   17550:	319d2204 	addi	r6,r6,29832
   17554:	e17ffc17 	ldw	r5,-16(fp)
   17558:	e13ffe17 	ldw	r4,-8(fp)
   1755c:	0018d280 	call	18d28 <alt_irq_register>
#endif  
}
   17560:	0001883a 	nop
   17564:	e037883a 	mov	sp,fp
   17568:	dfc00117 	ldw	ra,4(sp)
   1756c:	df000017 	ldw	fp,0(sp)
   17570:	dec00204 	addi	sp,sp,8
   17574:	f800283a 	ret

00017578 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   17578:	defffc04 	addi	sp,sp,-16
   1757c:	df000315 	stw	fp,12(sp)
   17580:	df000304 	addi	fp,sp,12
   17584:	e13ffe15 	stw	r4,-8(fp)
   17588:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   1758c:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   17590:	e0bfff17 	ldw	r2,-4(fp)
   17594:	1000061e 	bne	r2,zero,175b0 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   17598:	e0bffe17 	ldw	r2,-8(fp)
   1759c:	1007883a 	mov	r3,r2
   175a0:	e0bffd03 	ldbu	r2,-12(fp)
   175a4:	1884b03a 	or	r2,r3,r2
   175a8:	e0bffd05 	stb	r2,-12(fp)
   175ac:	00000806 	br	175d0 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   175b0:	e0bffe17 	ldw	r2,-8(fp)
   175b4:	1007883a 	mov	r3,r2
   175b8:	e0bffd03 	ldbu	r2,-12(fp)
   175bc:	1884b03a 	or	r2,r3,r2
   175c0:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   175c4:	e0bffd03 	ldbu	r2,-12(fp)
   175c8:	10801014 	ori	r2,r2,64
   175cc:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   175d0:	e0fffd03 	ldbu	r3,-12(fp)
   175d4:	00bfe004 	movi	r2,-128
   175d8:	1884b03a 	or	r2,r3,r2
}
   175dc:	e037883a 	mov	sp,fp
   175e0:	df000017 	ldw	fp,0(sp)
   175e4:	dec00104 	addi	sp,sp,4
   175e8:	f800283a 	ret

000175ec <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   175ec:	defffd04 	addi	sp,sp,-12
   175f0:	df000215 	stw	fp,8(sp)
   175f4:	df000204 	addi	fp,sp,8
   175f8:	e13ffe15 	stw	r4,-8(fp)
   175fc:	2805883a 	mov	r2,r5
   17600:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   17604:	e0bffe17 	ldw	r2,-8(fp)
   17608:	10800a17 	ldw	r2,40(r2)
   1760c:	1007883a 	mov	r3,r2
   17610:	e0bfff03 	ldbu	r2,-4(fp)
   17614:	18800025 	stbio	r2,0(r3)
}
   17618:	0001883a 	nop
   1761c:	e037883a 	mov	sp,fp
   17620:	df000017 	ldw	fp,0(sp)
   17624:	dec00104 	addi	sp,sp,4
   17628:	f800283a 	ret

0001762c <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   1762c:	defffe04 	addi	sp,sp,-8
   17630:	df000115 	stw	fp,4(sp)
   17634:	df000104 	addi	fp,sp,4
   17638:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   1763c:	e0bfff17 	ldw	r2,-4(fp)
   17640:	10800a17 	ldw	r2,40(r2)
   17644:	1007883a 	mov	r3,r2
   17648:	00800044 	movi	r2,1
   1764c:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   17650:	0001883a 	nop
   17654:	e037883a 	mov	sp,fp
   17658:	df000017 	ldw	fp,0(sp)
   1765c:	dec00104 	addi	sp,sp,4
   17660:	f800283a 	ret

00017664 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   17664:	defffc04 	addi	sp,sp,-16
   17668:	dfc00315 	stw	ra,12(sp)
   1766c:	df000215 	stw	fp,8(sp)
   17670:	df000204 	addi	fp,sp,8
   17674:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   17678:	d1600a04 	addi	r5,gp,-32728
   1767c:	e13fff17 	ldw	r4,-4(fp)
   17680:	0018b240 	call	18b24 <alt_find_dev>
   17684:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   17688:	e0bffe17 	ldw	r2,-8(fp)
}
   1768c:	e037883a 	mov	sp,fp
   17690:	dfc00117 	ldw	ra,4(sp)
   17694:	df000017 	ldw	fp,0(sp)
   17698:	dec00204 	addi	sp,sp,8
   1769c:	f800283a 	ret

000176a0 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   176a0:	defffb04 	addi	sp,sp,-20
   176a4:	df000415 	stw	fp,16(sp)
   176a8:	df000404 	addi	fp,sp,16
   176ac:	e13ffd15 	stw	r4,-12(fp)
   176b0:	e17ffe15 	stw	r5,-8(fp)
   176b4:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   176b8:	e03ffc15 	stw	zero,-16(fp)
   176bc:	00000f06 	br	176fc <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   176c0:	e0bffd17 	ldw	r2,-12(fp)
   176c4:	10800a17 	ldw	r2,40(r2)
   176c8:	10800044 	addi	r2,r2,1
   176cc:	1009883a 	mov	r4,r2
   176d0:	e0fffe17 	ldw	r3,-8(fp)
   176d4:	e0bffc17 	ldw	r2,-16(fp)
   176d8:	1885883a 	add	r2,r3,r2
   176dc:	10800003 	ldbu	r2,0(r2)
   176e0:	10803fcc 	andi	r2,r2,255
   176e4:	1080201c 	xori	r2,r2,128
   176e8:	10bfe004 	addi	r2,r2,-128
   176ec:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   176f0:	e0bffc17 	ldw	r2,-16(fp)
   176f4:	10800044 	addi	r2,r2,1
   176f8:	e0bffc15 	stw	r2,-16(fp)
   176fc:	e0fffc17 	ldw	r3,-16(fp)
   17700:	e0bfff17 	ldw	r2,-4(fp)
   17704:	18bfee36 	bltu	r3,r2,176c0 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   17708:	0001883a 	nop
   1770c:	e037883a 	mov	sp,fp
   17710:	df000017 	ldw	fp,0(sp)
   17714:	dec00104 	addi	sp,sp,4
   17718:	f800283a 	ret

0001771c <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   1771c:	defffd04 	addi	sp,sp,-12
   17720:	df000215 	stw	fp,8(sp)
   17724:	df000204 	addi	fp,sp,8
   17728:	e13ffe15 	stw	r4,-8(fp)
   1772c:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   17730:	00000d06 	br	17768 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   17734:	e0bffe17 	ldw	r2,-8(fp)
   17738:	10800a17 	ldw	r2,40(r2)
   1773c:	10800044 	addi	r2,r2,1
   17740:	1007883a 	mov	r3,r2
   17744:	e0bfff17 	ldw	r2,-4(fp)
   17748:	10800003 	ldbu	r2,0(r2)
   1774c:	10803fcc 	andi	r2,r2,255
   17750:	1080201c 	xori	r2,r2,128
   17754:	10bfe004 	addi	r2,r2,-128
   17758:	18800025 	stbio	r2,0(r3)
		++ptr;
   1775c:	e0bfff17 	ldw	r2,-4(fp)
   17760:	10800044 	addi	r2,r2,1
   17764:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   17768:	e0bfff17 	ldw	r2,-4(fp)
   1776c:	10800003 	ldbu	r2,0(r2)
   17770:	10803fcc 	andi	r2,r2,255
   17774:	1080201c 	xori	r2,r2,128
   17778:	10bfe004 	addi	r2,r2,-128
   1777c:	103fed1e 	bne	r2,zero,17734 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   17780:	0001883a 	nop
   17784:	e037883a 	mov	sp,fp
   17788:	df000017 	ldw	fp,0(sp)
   1778c:	dec00104 	addi	sp,sp,4
   17790:	f800283a 	ret

00017794 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   17794:	defffb04 	addi	sp,sp,-20
   17798:	dfc00415 	stw	ra,16(sp)
   1779c:	df000315 	stw	fp,12(sp)
   177a0:	df000304 	addi	fp,sp,12
   177a4:	e13ffd15 	stw	r4,-12(fp)
   177a8:	e17ffe15 	stw	r5,-8(fp)
   177ac:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   177b0:	e0bffd17 	ldw	r2,-12(fp)
   177b4:	10800017 	ldw	r2,0(r2)
   177b8:	e0ffff17 	ldw	r3,-4(fp)
   177bc:	180d883a 	mov	r6,r3
   177c0:	e17ffe17 	ldw	r5,-8(fp)
   177c4:	1009883a 	mov	r4,r2
   177c8:	00176a00 	call	176a0 <alt_up_character_lcd_write>
	return 0;
   177cc:	0005883a 	mov	r2,zero
}
   177d0:	e037883a 	mov	sp,fp
   177d4:	dfc00117 	ldw	ra,4(sp)
   177d8:	df000017 	ldw	fp,0(sp)
   177dc:	dec00204 	addi	sp,sp,8
   177e0:	f800283a 	ret

000177e4 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   177e4:	defffa04 	addi	sp,sp,-24
   177e8:	dfc00515 	stw	ra,20(sp)
   177ec:	df000415 	stw	fp,16(sp)
   177f0:	df000404 	addi	fp,sp,16
   177f4:	e13ffd15 	stw	r4,-12(fp)
   177f8:	e17ffe15 	stw	r5,-8(fp)
   177fc:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   17800:	e0bffe17 	ldw	r2,-8(fp)
   17804:	10800a28 	cmpgeui	r2,r2,40
   17808:	1000031e 	bne	r2,zero,17818 <alt_up_character_lcd_set_cursor_pos+0x34>
   1780c:	e0bfff17 	ldw	r2,-4(fp)
   17810:	108000b0 	cmpltui	r2,r2,2
   17814:	1000021e 	bne	r2,zero,17820 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   17818:	00bfffc4 	movi	r2,-1
   1781c:	00000906 	br	17844 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   17820:	e17fff17 	ldw	r5,-4(fp)
   17824:	e13ffe17 	ldw	r4,-8(fp)
   17828:	00175780 	call	17578 <get_DDRAM_addr>
   1782c:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   17830:	e0bffc03 	ldbu	r2,-16(fp)
   17834:	100b883a 	mov	r5,r2
   17838:	e13ffd17 	ldw	r4,-12(fp)
   1783c:	00175ec0 	call	175ec <alt_up_character_lcd_send_cmd>
	return 0;
   17840:	0005883a 	mov	r2,zero
}
   17844:	e037883a 	mov	sp,fp
   17848:	dfc00117 	ldw	ra,4(sp)
   1784c:	df000017 	ldw	fp,0(sp)
   17850:	dec00204 	addi	sp,sp,8
   17854:	f800283a 	ret

00017858 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   17858:	defffb04 	addi	sp,sp,-20
   1785c:	dfc00415 	stw	ra,16(sp)
   17860:	df000315 	stw	fp,12(sp)
   17864:	df000304 	addi	fp,sp,12
   17868:	e13ffe15 	stw	r4,-8(fp)
   1786c:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   17870:	e0bfff17 	ldw	r2,-4(fp)
   17874:	10001526 	beq	r2,zero,178cc <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   17878:	e0bfff17 	ldw	r2,-4(fp)
   1787c:	0080020e 	bge	zero,r2,17888 <alt_up_character_lcd_shift_cursor+0x30>
   17880:	00800504 	movi	r2,20
   17884:	00000106 	br	1788c <alt_up_character_lcd_shift_cursor+0x34>
   17888:	00800404 	movi	r2,16
   1788c:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   17890:	e0bfff17 	ldw	r2,-4(fp)
   17894:	1000010e 	bge	r2,zero,1789c <alt_up_character_lcd_shift_cursor+0x44>
   17898:	0085c83a 	sub	r2,zero,r2
   1789c:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   178a0:	00000406 	br	178b4 <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   178a4:	e0bffd43 	ldbu	r2,-11(fp)
   178a8:	100b883a 	mov	r5,r2
   178ac:	e13ffe17 	ldw	r4,-8(fp)
   178b0:	00175ec0 	call	175ec <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   178b4:	e0bffd03 	ldbu	r2,-12(fp)
   178b8:	10ffffc4 	addi	r3,r2,-1
   178bc:	e0fffd05 	stb	r3,-12(fp)
   178c0:	10803fcc 	andi	r2,r2,255
   178c4:	103ff71e 	bne	r2,zero,178a4 <alt_up_character_lcd_shift_cursor+0x4c>
   178c8:	00000106 	br	178d0 <alt_up_character_lcd_shift_cursor+0x78>

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   178cc:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   178d0:	e037883a 	mov	sp,fp
   178d4:	dfc00117 	ldw	ra,4(sp)
   178d8:	df000017 	ldw	fp,0(sp)
   178dc:	dec00204 	addi	sp,sp,8
   178e0:	f800283a 	ret

000178e4 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   178e4:	defffb04 	addi	sp,sp,-20
   178e8:	dfc00415 	stw	ra,16(sp)
   178ec:	df000315 	stw	fp,12(sp)
   178f0:	df000304 	addi	fp,sp,12
   178f4:	e13ffe15 	stw	r4,-8(fp)
   178f8:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   178fc:	e0bfff17 	ldw	r2,-4(fp)
   17900:	10001526 	beq	r2,zero,17958 <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   17904:	e0bfff17 	ldw	r2,-4(fp)
   17908:	0080020e 	bge	zero,r2,17914 <alt_up_character_lcd_shift_display+0x30>
   1790c:	00800704 	movi	r2,28
   17910:	00000106 	br	17918 <alt_up_character_lcd_shift_display+0x34>
   17914:	00800604 	movi	r2,24
   17918:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1791c:	e0bfff17 	ldw	r2,-4(fp)
   17920:	1000010e 	bge	r2,zero,17928 <alt_up_character_lcd_shift_display+0x44>
   17924:	0085c83a 	sub	r2,zero,r2
   17928:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1792c:	00000406 	br	17940 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   17930:	e0bffd43 	ldbu	r2,-11(fp)
   17934:	100b883a 	mov	r5,r2
   17938:	e13ffe17 	ldw	r4,-8(fp)
   1793c:	00175ec0 	call	175ec <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   17940:	e0bffd03 	ldbu	r2,-12(fp)
   17944:	10ffffc4 	addi	r3,r2,-1
   17948:	e0fffd05 	stb	r3,-12(fp)
   1794c:	10803fcc 	andi	r2,r2,255
   17950:	103ff71e 	bne	r2,zero,17930 <alt_up_character_lcd_shift_display+0x4c>
   17954:	00000106 	br	1795c <alt_up_character_lcd_shift_display+0x78>

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   17958:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   1795c:	e037883a 	mov	sp,fp
   17960:	dfc00117 	ldw	ra,4(sp)
   17964:	df000017 	ldw	fp,0(sp)
   17968:	dec00204 	addi	sp,sp,8
   1796c:	f800283a 	ret

00017970 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   17970:	defffa04 	addi	sp,sp,-24
   17974:	dfc00515 	stw	ra,20(sp)
   17978:	df000415 	stw	fp,16(sp)
   1797c:	df000404 	addi	fp,sp,16
   17980:	e13ffd15 	stw	r4,-12(fp)
   17984:	e17ffe15 	stw	r5,-8(fp)
   17988:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   1798c:	e0bffe17 	ldw	r2,-8(fp)
   17990:	10800a28 	cmpgeui	r2,r2,40
   17994:	1000031e 	bne	r2,zero,179a4 <alt_up_character_lcd_erase_pos+0x34>
   17998:	e0bfff17 	ldw	r2,-4(fp)
   1799c:	108000b0 	cmpltui	r2,r2,2
   179a0:	1000021e 	bne	r2,zero,179ac <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   179a4:	00bfffc4 	movi	r2,-1
   179a8:	00000f06 	br	179e8 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   179ac:	e17fff17 	ldw	r5,-4(fp)
   179b0:	e13ffe17 	ldw	r4,-8(fp)
   179b4:	00175780 	call	17578 <get_DDRAM_addr>
   179b8:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   179bc:	e0bffc03 	ldbu	r2,-16(fp)
   179c0:	100b883a 	mov	r5,r2
   179c4:	e13ffd17 	ldw	r4,-12(fp)
   179c8:	00175ec0 	call	175ec <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   179cc:	e0bffd17 	ldw	r2,-12(fp)
   179d0:	10800a17 	ldw	r2,40(r2)
   179d4:	10800044 	addi	r2,r2,1
   179d8:	1007883a 	mov	r3,r2
   179dc:	00800084 	movi	r2,2
   179e0:	18800025 	stbio	r2,0(r3)
	return 0;
   179e4:	0005883a 	mov	r2,zero
}
   179e8:	e037883a 	mov	sp,fp
   179ec:	dfc00117 	ldw	ra,4(sp)
   179f0:	df000017 	ldw	fp,0(sp)
   179f4:	dec00204 	addi	sp,sp,8
   179f8:	f800283a 	ret

000179fc <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   179fc:	defffd04 	addi	sp,sp,-12
   17a00:	dfc00215 	stw	ra,8(sp)
   17a04:	df000115 	stw	fp,4(sp)
   17a08:	df000104 	addi	fp,sp,4
   17a0c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   17a10:	01400304 	movi	r5,12
   17a14:	e13fff17 	ldw	r4,-4(fp)
   17a18:	00175ec0 	call	175ec <alt_up_character_lcd_send_cmd>
}
   17a1c:	0001883a 	nop
   17a20:	e037883a 	mov	sp,fp
   17a24:	dfc00117 	ldw	ra,4(sp)
   17a28:	df000017 	ldw	fp,0(sp)
   17a2c:	dec00204 	addi	sp,sp,8
   17a30:	f800283a 	ret

00017a34 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   17a34:	defffd04 	addi	sp,sp,-12
   17a38:	dfc00215 	stw	ra,8(sp)
   17a3c:	df000115 	stw	fp,4(sp)
   17a40:	df000104 	addi	fp,sp,4
   17a44:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   17a48:	014003c4 	movi	r5,15
   17a4c:	e13fff17 	ldw	r4,-4(fp)
   17a50:	00175ec0 	call	175ec <alt_up_character_lcd_send_cmd>
}
   17a54:	0001883a 	nop
   17a58:	e037883a 	mov	sp,fp
   17a5c:	dfc00117 	ldw	ra,4(sp)
   17a60:	df000017 	ldw	fp,0(sp)
   17a64:	dec00204 	addi	sp,sp,8
   17a68:	f800283a 	ret

00017a6c <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   17a6c:	defffd04 	addi	sp,sp,-12
   17a70:	df000215 	stw	fp,8(sp)
   17a74:	df000204 	addi	fp,sp,8
   17a78:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   17a7c:	e0bfff17 	ldw	r2,-4(fp)
   17a80:	10800a17 	ldw	r2,40(r2)
   17a84:	10800104 	addi	r2,r2,4
   17a88:	10800037 	ldwio	r2,0(r2)
   17a8c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   17a90:	e0bffe17 	ldw	r2,-8(fp)
   17a94:	10800054 	ori	r2,r2,1
   17a98:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   17a9c:	e0bfff17 	ldw	r2,-4(fp)
   17aa0:	10800a17 	ldw	r2,40(r2)
   17aa4:	10800104 	addi	r2,r2,4
   17aa8:	1007883a 	mov	r3,r2
   17aac:	e0bffe17 	ldw	r2,-8(fp)
   17ab0:	18800035 	stwio	r2,0(r3)
}
   17ab4:	0001883a 	nop
   17ab8:	e037883a 	mov	sp,fp
   17abc:	df000017 	ldw	fp,0(sp)
   17ac0:	dec00104 	addi	sp,sp,4
   17ac4:	f800283a 	ret

00017ac8 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   17ac8:	defffd04 	addi	sp,sp,-12
   17acc:	df000215 	stw	fp,8(sp)
   17ad0:	df000204 	addi	fp,sp,8
   17ad4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   17ad8:	e0bfff17 	ldw	r2,-4(fp)
   17adc:	10800a17 	ldw	r2,40(r2)
   17ae0:	10800104 	addi	r2,r2,4
   17ae4:	10800037 	ldwio	r2,0(r2)
   17ae8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   17aec:	e0fffe17 	ldw	r3,-8(fp)
   17af0:	00bfff84 	movi	r2,-2
   17af4:	1884703a 	and	r2,r3,r2
   17af8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   17afc:	e0bfff17 	ldw	r2,-4(fp)
   17b00:	10800a17 	ldw	r2,40(r2)
   17b04:	10800104 	addi	r2,r2,4
   17b08:	1007883a 	mov	r3,r2
   17b0c:	e0bffe17 	ldw	r2,-8(fp)
   17b10:	18800035 	stwio	r2,0(r3)
}
   17b14:	0001883a 	nop
   17b18:	e037883a 	mov	sp,fp
   17b1c:	df000017 	ldw	fp,0(sp)
   17b20:	dec00104 	addi	sp,sp,4
   17b24:	f800283a 	ret

00017b28 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   17b28:	defffd04 	addi	sp,sp,-12
   17b2c:	df000215 	stw	fp,8(sp)
   17b30:	df000204 	addi	fp,sp,8
   17b34:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   17b38:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   17b3c:	e0bfff17 	ldw	r2,-4(fp)
   17b40:	10800a17 	ldw	r2,40(r2)
   17b44:	10800084 	addi	r2,r2,2
   17b48:	1080002b 	ldhuio	r2,0(r2)
   17b4c:	10bfffcc 	andi	r2,r2,65535
   17b50:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   17b54:	e0bffe0b 	ldhu	r2,-8(fp)
}
   17b58:	e037883a 	mov	sp,fp
   17b5c:	df000017 	ldw	fp,0(sp)
   17b60:	dec00104 	addi	sp,sp,4
   17b64:	f800283a 	ret

00017b68 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   17b68:	defffd04 	addi	sp,sp,-12
   17b6c:	df000215 	stw	fp,8(sp)
   17b70:	df000204 	addi	fp,sp,8
   17b74:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   17b78:	e0bfff17 	ldw	r2,-4(fp)
   17b7c:	10800a17 	ldw	r2,40(r2)
   17b80:	10800104 	addi	r2,r2,4
   17b84:	10800037 	ldwio	r2,0(r2)
   17b88:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   17b8c:	e0bffe17 	ldw	r2,-8(fp)
   17b90:	1004d43a 	srli	r2,r2,16
}
   17b94:	e037883a 	mov	sp,fp
   17b98:	df000017 	ldw	fp,0(sp)
   17b9c:	dec00104 	addi	sp,sp,4
   17ba0:	f800283a 	ret

00017ba4 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   17ba4:	defffd04 	addi	sp,sp,-12
   17ba8:	df000215 	stw	fp,8(sp)
   17bac:	df000204 	addi	fp,sp,8
   17bb0:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   17bb4:	e0bfff17 	ldw	r2,-4(fp)
   17bb8:	1080800c 	andi	r2,r2,512
   17bbc:	1004d27a 	srli	r2,r2,9
   17bc0:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   17bc4:	e0bffe17 	ldw	r2,-8(fp)
   17bc8:	10000226 	beq	r2,zero,17bd4 <alt_up_irda_check_parity+0x30>
   17bcc:	00bfffc4 	movi	r2,-1
   17bd0:	00000106 	br	17bd8 <alt_up_irda_check_parity+0x34>
   17bd4:	0005883a 	mov	r2,zero
}
   17bd8:	e037883a 	mov	sp,fp
   17bdc:	df000017 	ldw	fp,0(sp)
   17be0:	dec00104 	addi	sp,sp,4
   17be4:	f800283a 	ret

00017be8 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   17be8:	defffd04 	addi	sp,sp,-12
   17bec:	df000215 	stw	fp,8(sp)
   17bf0:	df000204 	addi	fp,sp,8
   17bf4:	e13ffe15 	stw	r4,-8(fp)
   17bf8:	2805883a 	mov	r2,r5
   17bfc:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   17c00:	e0bffe17 	ldw	r2,-8(fp)
   17c04:	10800a17 	ldw	r2,40(r2)
   17c08:	1007883a 	mov	r3,r2
   17c0c:	e0bfff03 	ldbu	r2,-4(fp)
   17c10:	18800035 	stwio	r2,0(r3)
	return 0;
   17c14:	0005883a 	mov	r2,zero
}
   17c18:	e037883a 	mov	sp,fp
   17c1c:	df000017 	ldw	fp,0(sp)
   17c20:	dec00104 	addi	sp,sp,4
   17c24:	f800283a 	ret

00017c28 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   17c28:	defffa04 	addi	sp,sp,-24
   17c2c:	dfc00515 	stw	ra,20(sp)
   17c30:	df000415 	stw	fp,16(sp)
   17c34:	df000404 	addi	fp,sp,16
   17c38:	e13ffd15 	stw	r4,-12(fp)
   17c3c:	e17ffe15 	stw	r5,-8(fp)
   17c40:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   17c44:	e0bffd17 	ldw	r2,-12(fp)
   17c48:	10800a17 	ldw	r2,40(r2)
   17c4c:	10800037 	ldwio	r2,0(r2)
   17c50:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   17c54:	e0bffc17 	ldw	r2,-16(fp)
   17c58:	1007883a 	mov	r3,r2
   17c5c:	e0bffe17 	ldw	r2,-8(fp)
   17c60:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   17c64:	e13ffc17 	ldw	r4,-16(fp)
   17c68:	0017ba40 	call	17ba4 <alt_up_irda_check_parity>
   17c6c:	1007883a 	mov	r3,r2
   17c70:	e0bfff17 	ldw	r2,-4(fp)
   17c74:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   17c78:	e0bffc17 	ldw	r2,-16(fp)
   17c7c:	10a0000c 	andi	r2,r2,32768
   17c80:	1004d3fa 	srli	r2,r2,15
   17c84:	10bfffc4 	addi	r2,r2,-1
}
   17c88:	e037883a 	mov	sp,fp
   17c8c:	dfc00117 	ldw	ra,4(sp)
   17c90:	df000017 	ldw	fp,0(sp)
   17c94:	dec00204 	addi	sp,sp,8
   17c98:	f800283a 	ret

00017c9c <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   17c9c:	defff804 	addi	sp,sp,-32
   17ca0:	dfc00715 	stw	ra,28(sp)
   17ca4:	df000615 	stw	fp,24(sp)
   17ca8:	df000604 	addi	fp,sp,24
   17cac:	e13ffd15 	stw	r4,-12(fp)
   17cb0:	e17ffe15 	stw	r5,-8(fp)
   17cb4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   17cb8:	e0bffd17 	ldw	r2,-12(fp)
   17cbc:	10800017 	ldw	r2,0(r2)
   17cc0:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   17cc4:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   17cc8:	00000c06 	br	17cfc <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   17ccc:	e0bffe17 	ldw	r2,-8(fp)
   17cd0:	10c00044 	addi	r3,r2,1
   17cd4:	e0fffe15 	stw	r3,-8(fp)
   17cd8:	e0fffc04 	addi	r3,fp,-16
   17cdc:	180d883a 	mov	r6,r3
   17ce0:	100b883a 	mov	r5,r2
   17ce4:	e13ffb17 	ldw	r4,-20(fp)
   17ce8:	0017c280 	call	17c28 <alt_up_irda_read_data>
   17cec:	1000081e 	bne	r2,zero,17d10 <alt_up_irda_read_fd+0x74>
			count++;
   17cf0:	e0bffa17 	ldw	r2,-24(fp)
   17cf4:	10800044 	addi	r2,r2,1
   17cf8:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   17cfc:	e0bfff17 	ldw	r2,-4(fp)
   17d00:	10ffffc4 	addi	r3,r2,-1
   17d04:	e0ffff15 	stw	r3,-4(fp)
   17d08:	103ff01e 	bne	r2,zero,17ccc <alt_up_irda_read_fd+0x30>
   17d0c:	00000106 	br	17d14 <alt_up_irda_read_fd+0x78>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   17d10:	0001883a 	nop
	}
	return count;
   17d14:	e0bffa17 	ldw	r2,-24(fp)
}
   17d18:	e037883a 	mov	sp,fp
   17d1c:	dfc00117 	ldw	ra,4(sp)
   17d20:	df000017 	ldw	fp,0(sp)
   17d24:	dec00204 	addi	sp,sp,8
   17d28:	f800283a 	ret

00017d2c <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   17d2c:	defff904 	addi	sp,sp,-28
   17d30:	dfc00615 	stw	ra,24(sp)
   17d34:	df000515 	stw	fp,20(sp)
   17d38:	df000504 	addi	fp,sp,20
   17d3c:	e13ffd15 	stw	r4,-12(fp)
   17d40:	e17ffe15 	stw	r5,-8(fp)
   17d44:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   17d48:	e0bffd17 	ldw	r2,-12(fp)
   17d4c:	10800017 	ldw	r2,0(r2)
   17d50:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   17d54:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   17d58:	00000c06 	br	17d8c <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   17d5c:	e0bffe17 	ldw	r2,-8(fp)
   17d60:	10c00044 	addi	r3,r2,1
   17d64:	e0fffe15 	stw	r3,-8(fp)
   17d68:	10800003 	ldbu	r2,0(r2)
   17d6c:	10803fcc 	andi	r2,r2,255
   17d70:	100b883a 	mov	r5,r2
   17d74:	e13ffc17 	ldw	r4,-16(fp)
   17d78:	0017be80 	call	17be8 <alt_up_irda_write_data>
   17d7c:	1000081e 	bne	r2,zero,17da0 <alt_up_irda_write_fd+0x74>
			count++;
   17d80:	e0bffb17 	ldw	r2,-20(fp)
   17d84:	10800044 	addi	r2,r2,1
   17d88:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   17d8c:	e0bfff17 	ldw	r2,-4(fp)
   17d90:	10ffffc4 	addi	r3,r2,-1
   17d94:	e0ffff15 	stw	r3,-4(fp)
   17d98:	103ff01e 	bne	r2,zero,17d5c <alt_up_irda_write_fd+0x30>
   17d9c:	00000106 	br	17da4 <alt_up_irda_write_fd+0x78>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
   17da0:	0001883a 	nop
	}
	return count;
   17da4:	e0bffb17 	ldw	r2,-20(fp)
}
   17da8:	e037883a 	mov	sp,fp
   17dac:	dfc00117 	ldw	ra,4(sp)
   17db0:	df000017 	ldw	fp,0(sp)
   17db4:	dec00204 	addi	sp,sp,8
   17db8:	f800283a 	ret

00017dbc <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   17dbc:	defffc04 	addi	sp,sp,-16
   17dc0:	dfc00315 	stw	ra,12(sp)
   17dc4:	df000215 	stw	fp,8(sp)
   17dc8:	df000204 	addi	fp,sp,8
   17dcc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   17dd0:	d1600a04 	addi	r5,gp,-32728
   17dd4:	e13fff17 	ldw	r4,-4(fp)
   17dd8:	0018b240 	call	18b24 <alt_find_dev>
   17ddc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   17de0:	e0bffe17 	ldw	r2,-8(fp)
}
   17de4:	e037883a 	mov	sp,fp
   17de8:	dfc00117 	ldw	ra,4(sp)
   17dec:	df000017 	ldw	fp,0(sp)
   17df0:	dec00204 	addi	sp,sp,8
   17df4:	f800283a 	ret

00017df8 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   17df8:	defffd04 	addi	sp,sp,-12
   17dfc:	df000215 	stw	fp,8(sp)
   17e00:	df000204 	addi	fp,sp,8
   17e04:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   17e08:	e0bfff17 	ldw	r2,-4(fp)
   17e0c:	1080400c 	andi	r2,r2,256
   17e10:	1004d23a 	srli	r2,r2,8
   17e14:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   17e18:	e0bffe03 	ldbu	r2,-8(fp)
}
   17e1c:	e037883a 	mov	sp,fp
   17e20:	df000017 	ldw	fp,0(sp)
   17e24:	dec00104 	addi	sp,sp,4
   17e28:	f800283a 	ret

00017e2c <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   17e2c:	defffd04 	addi	sp,sp,-12
   17e30:	df000215 	stw	fp,8(sp)
   17e34:	df000204 	addi	fp,sp,8
   17e38:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   17e3c:	e0bfff17 	ldw	r2,-4(fp)
   17e40:	1080004c 	andi	r2,r2,1
   17e44:	e0bffe05 	stb	r2,-8(fp)
	return re;
   17e48:	e0bffe03 	ldbu	r2,-8(fp)
}
   17e4c:	e037883a 	mov	sp,fp
   17e50:	df000017 	ldw	fp,0(sp)
   17e54:	dec00104 	addi	sp,sp,4
   17e58:	f800283a 	ret

00017e5c <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   17e5c:	defffd04 	addi	sp,sp,-12
   17e60:	df000215 	stw	fp,8(sp)
   17e64:	df000204 	addi	fp,sp,8
   17e68:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   17e6c:	e0bfff17 	ldw	r2,-4(fp)
   17e70:	1081000c 	andi	r2,r2,1024
   17e74:	1004d2ba 	srli	r2,r2,10
   17e78:	e0bffe05 	stb	r2,-8(fp)
	return re;
   17e7c:	e0bffe03 	ldbu	r2,-8(fp)
}
   17e80:	e037883a 	mov	sp,fp
   17e84:	df000017 	ldw	fp,0(sp)
   17e88:	dec00104 	addi	sp,sp,4
   17e8c:	f800283a 	ret

00017e90 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   17e90:	defffd04 	addi	sp,sp,-12
   17e94:	df000215 	stw	fp,8(sp)
   17e98:	df000204 	addi	fp,sp,8
   17e9c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   17ea0:	e0bfff17 	ldw	r2,-4(fp)
   17ea4:	1004d43a 	srli	r2,r2,16
   17ea8:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   17eac:	e0bffe0b 	ldhu	r2,-8(fp)
}
   17eb0:	e037883a 	mov	sp,fp
   17eb4:	df000017 	ldw	fp,0(sp)
   17eb8:	dec00104 	addi	sp,sp,4
   17ebc:	f800283a 	ret

00017ec0 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   17ec0:	defffd04 	addi	sp,sp,-12
   17ec4:	df000215 	stw	fp,8(sp)
   17ec8:	df000204 	addi	fp,sp,8
   17ecc:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   17ed0:	e0bfff17 	ldw	r2,-4(fp)
   17ed4:	10a0000c 	andi	r2,r2,32768
   17ed8:	1004d3fa 	srli	r2,r2,15
   17edc:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   17ee0:	e0bffe03 	ldbu	r2,-8(fp)
}
   17ee4:	e037883a 	mov	sp,fp
   17ee8:	df000017 	ldw	fp,0(sp)
   17eec:	dec00104 	addi	sp,sp,4
   17ef0:	f800283a 	ret

00017ef4 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   17ef4:	defffd04 	addi	sp,sp,-12
   17ef8:	df000215 	stw	fp,8(sp)
   17efc:	df000204 	addi	fp,sp,8
   17f00:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   17f04:	e0bfff17 	ldw	r2,-4(fp)
   17f08:	e0bffe05 	stb	r2,-8(fp)
	return data;
   17f0c:	e0bffe03 	ldbu	r2,-8(fp)
}
   17f10:	e037883a 	mov	sp,fp
   17f14:	df000017 	ldw	fp,0(sp)
   17f18:	dec00104 	addi	sp,sp,4
   17f1c:	f800283a 	ret

00017f20 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   17f20:	defffb04 	addi	sp,sp,-20
   17f24:	dfc00415 	stw	ra,16(sp)
   17f28:	df000315 	stw	fp,12(sp)
   17f2c:	df000304 	addi	fp,sp,12
   17f30:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   17f34:	01403fc4 	movi	r5,255
   17f38:	e13fff17 	ldw	r4,-4(fp)
   17f3c:	00181800 	call	18180 <alt_up_ps2_write_data_byte_with_ack>
   17f40:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   17f44:	e0bffd17 	ldw	r2,-12(fp)
   17f48:	1000211e 	bne	r2,zero,17fd0 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   17f4c:	e0bffe04 	addi	r2,fp,-8
   17f50:	100b883a 	mov	r5,r2
   17f54:	e13fff17 	ldw	r4,-4(fp)
   17f58:	00181e40 	call	181e4 <alt_up_ps2_read_data_byte_timeout>
   17f5c:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   17f60:	e0bffd17 	ldw	r2,-12(fp)
   17f64:	10001a1e 	bne	r2,zero,17fd0 <alt_up_ps2_init+0xb0>
   17f68:	e0bffe03 	ldbu	r2,-8(fp)
   17f6c:	10803fcc 	andi	r2,r2,255
   17f70:	10802a98 	cmpnei	r2,r2,170
   17f74:	1000161e 	bne	r2,zero,17fd0 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   17f78:	e0bffe04 	addi	r2,fp,-8
   17f7c:	100b883a 	mov	r5,r2
   17f80:	e13fff17 	ldw	r4,-4(fp)
   17f84:	00181e40 	call	181e4 <alt_up_ps2_read_data_byte_timeout>
   17f88:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   17f8c:	e0bffd17 	ldw	r2,-12(fp)
   17f90:	10bfe318 	cmpnei	r2,r2,-116
   17f94:	1000041e 	bne	r2,zero,17fa8 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   17f98:	e0bfff17 	ldw	r2,-4(fp)
   17f9c:	00c00044 	movi	r3,1
   17fa0:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
   17fa4:	00000a06 	br	17fd0 <alt_up_ps2_init+0xb0>
			if (status == -ETIMEDOUT)
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
			}
			else if (status == 0 && byte == 0x00)
   17fa8:	e0bffd17 	ldw	r2,-12(fp)
   17fac:	1000081e 	bne	r2,zero,17fd0 <alt_up_ps2_init+0xb0>
   17fb0:	e0bffe03 	ldbu	r2,-8(fp)
   17fb4:	10803fcc 	andi	r2,r2,255
   17fb8:	1000051e 	bne	r2,zero,17fd0 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   17fbc:	e0bfff17 	ldw	r2,-4(fp)
   17fc0:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   17fc4:	01403d04 	movi	r5,244
   17fc8:	e13fff17 	ldw	r4,-4(fp)
   17fcc:	00180a40 	call	180a4 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   17fd0:	0001883a 	nop
   17fd4:	e037883a 	mov	sp,fp
   17fd8:	dfc00117 	ldw	ra,4(sp)
   17fdc:	df000017 	ldw	fp,0(sp)
   17fe0:	dec00204 	addi	sp,sp,8
   17fe4:	f800283a 	ret

00017fe8 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   17fe8:	defffd04 	addi	sp,sp,-12
   17fec:	df000215 	stw	fp,8(sp)
   17ff0:	df000204 	addi	fp,sp,8
   17ff4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   17ff8:	e0bfff17 	ldw	r2,-4(fp)
   17ffc:	10800a17 	ldw	r2,40(r2)
   18000:	10800104 	addi	r2,r2,4
   18004:	10800037 	ldwio	r2,0(r2)
   18008:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1800c:	e0bffe17 	ldw	r2,-8(fp)
   18010:	10800054 	ori	r2,r2,1
   18014:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   18018:	e0bfff17 	ldw	r2,-4(fp)
   1801c:	10800a17 	ldw	r2,40(r2)
   18020:	10800104 	addi	r2,r2,4
   18024:	1007883a 	mov	r3,r2
   18028:	e0bffe17 	ldw	r2,-8(fp)
   1802c:	18800035 	stwio	r2,0(r3)
}
   18030:	0001883a 	nop
   18034:	e037883a 	mov	sp,fp
   18038:	df000017 	ldw	fp,0(sp)
   1803c:	dec00104 	addi	sp,sp,4
   18040:	f800283a 	ret

00018044 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   18044:	defffd04 	addi	sp,sp,-12
   18048:	df000215 	stw	fp,8(sp)
   1804c:	df000204 	addi	fp,sp,8
   18050:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   18054:	e0bfff17 	ldw	r2,-4(fp)
   18058:	10800a17 	ldw	r2,40(r2)
   1805c:	10800104 	addi	r2,r2,4
   18060:	10800037 	ldwio	r2,0(r2)
   18064:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   18068:	e0fffe17 	ldw	r3,-8(fp)
   1806c:	00bfff84 	movi	r2,-2
   18070:	1884703a 	and	r2,r3,r2
   18074:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   18078:	e0bfff17 	ldw	r2,-4(fp)
   1807c:	10800a17 	ldw	r2,40(r2)
   18080:	10800104 	addi	r2,r2,4
   18084:	1007883a 	mov	r3,r2
   18088:	e0bffe17 	ldw	r2,-8(fp)
   1808c:	18800035 	stwio	r2,0(r3)
}
   18090:	0001883a 	nop
   18094:	e037883a 	mov	sp,fp
   18098:	df000017 	ldw	fp,0(sp)
   1809c:	dec00104 	addi	sp,sp,4
   180a0:	f800283a 	ret

000180a4 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   180a4:	defffb04 	addi	sp,sp,-20
   180a8:	dfc00415 	stw	ra,16(sp)
   180ac:	df000315 	stw	fp,12(sp)
   180b0:	df000304 	addi	fp,sp,12
   180b4:	e13ffe15 	stw	r4,-8(fp)
   180b8:	2805883a 	mov	r2,r5
   180bc:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   180c0:	e0bffe17 	ldw	r2,-8(fp)
   180c4:	10800a17 	ldw	r2,40(r2)
   180c8:	1007883a 	mov	r3,r2
   180cc:	e0bfff03 	ldbu	r2,-4(fp)
   180d0:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   180d4:	e0bffe17 	ldw	r2,-8(fp)
   180d8:	10800a17 	ldw	r2,40(r2)
   180dc:	10800104 	addi	r2,r2,4
   180e0:	10800037 	ldwio	r2,0(r2)
   180e4:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   180e8:	e13ffd17 	ldw	r4,-12(fp)
   180ec:	0017e5c0 	call	17e5c <read_CE_bit>
   180f0:	10803fcc 	andi	r2,r2,255
   180f4:	10000226 	beq	r2,zero,18100 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   180f8:	00bffec4 	movi	r2,-5
   180fc:	00000106 	br	18104 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   18100:	0005883a 	mov	r2,zero
}
   18104:	e037883a 	mov	sp,fp
   18108:	dfc00117 	ldw	ra,4(sp)
   1810c:	df000017 	ldw	fp,0(sp)
   18110:	dec00204 	addi	sp,sp,8
   18114:	f800283a 	ret

00018118 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   18118:	defffc04 	addi	sp,sp,-16
   1811c:	dfc00315 	stw	ra,12(sp)
   18120:	df000215 	stw	fp,8(sp)
   18124:	df000204 	addi	fp,sp,8
   18128:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   1812c:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   18130:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   18134:	e0bffe44 	addi	r2,fp,-7
   18138:	100b883a 	mov	r5,r2
   1813c:	e13fff17 	ldw	r4,-4(fp)
   18140:	00181e40 	call	181e4 <alt_up_ps2_read_data_byte_timeout>
   18144:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   18148:	e0bffe03 	ldbu	r2,-8(fp)
   1814c:	1000061e 	bne	r2,zero,18168 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   18150:	e0bffe43 	ldbu	r2,-7(fp)
   18154:	10803fcc 	andi	r2,r2,255
   18158:	10803e98 	cmpnei	r2,r2,250
   1815c:	103ff51e 	bne	r2,zero,18134 <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
   18160:	0005883a 	mov	r2,zero
   18164:	00000106 	br	1816c <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
   18168:	e0bffe03 	ldbu	r2,-8(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
   1816c:	e037883a 	mov	sp,fp
   18170:	dfc00117 	ldw	ra,4(sp)
   18174:	df000017 	ldw	fp,0(sp)
   18178:	dec00204 	addi	sp,sp,8
   1817c:	f800283a 	ret

00018180 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   18180:	defffa04 	addi	sp,sp,-24
   18184:	dfc00515 	stw	ra,20(sp)
   18188:	df000415 	stw	fp,16(sp)
   1818c:	df000404 	addi	fp,sp,16
   18190:	e13ffe15 	stw	r4,-8(fp)
   18194:	2805883a 	mov	r2,r5
   18198:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   1819c:	e0bfff03 	ldbu	r2,-4(fp)
   181a0:	100b883a 	mov	r5,r2
   181a4:	e13ffe17 	ldw	r4,-8(fp)
   181a8:	00180a40 	call	180a4 <alt_up_ps2_write_data_byte>
   181ac:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   181b0:	e0bffc17 	ldw	r2,-16(fp)
   181b4:	10000226 	beq	r2,zero,181c0 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   181b8:	e0bffc17 	ldw	r2,-16(fp)
   181bc:	00000406 	br	181d0 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   181c0:	e13ffe17 	ldw	r4,-8(fp)
   181c4:	00181180 	call	18118 <alt_up_ps2_wait_for_ack>
   181c8:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   181cc:	e0bffd17 	ldw	r2,-12(fp)
}
   181d0:	e037883a 	mov	sp,fp
   181d4:	dfc00117 	ldw	ra,4(sp)
   181d8:	df000017 	ldw	fp,0(sp)
   181dc:	dec00204 	addi	sp,sp,8
   181e0:	f800283a 	ret

000181e4 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   181e4:	defffa04 	addi	sp,sp,-24
   181e8:	dfc00515 	stw	ra,20(sp)
   181ec:	df000415 	stw	fp,16(sp)
   181f0:	df000404 	addi	fp,sp,16
   181f4:	e13ffe15 	stw	r4,-8(fp)
   181f8:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   181fc:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   18200:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   18204:	e0bffc17 	ldw	r2,-16(fp)
   18208:	10800044 	addi	r2,r2,1
   1820c:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   18210:	e0bffe17 	ldw	r2,-8(fp)
   18214:	10800a17 	ldw	r2,40(r2)
   18218:	10800037 	ldwio	r2,0(r2)
   1821c:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   18220:	e13ffd17 	ldw	r4,-12(fp)
   18224:	0017ec00 	call	17ec0 <read_data_valid>
   18228:	10803fcc 	andi	r2,r2,255
   1822c:	10000726 	beq	r2,zero,1824c <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   18230:	e13ffd17 	ldw	r4,-12(fp)
   18234:	0017ef40 	call	17ef4 <read_data_byte>
   18238:	1007883a 	mov	r3,r2
   1823c:	e0bfff17 	ldw	r2,-4(fp)
   18240:	10c00005 	stb	r3,0(r2)
			return 0;
   18244:	0005883a 	mov	r2,zero
   18248:	00000806 	br	1826c <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   1824c:	e0bffe17 	ldw	r2,-8(fp)
   18250:	10800c17 	ldw	r2,48(r2)
   18254:	103feb26 	beq	r2,zero,18204 <alt_up_ps2_read_data_byte_timeout+0x20>
   18258:	e0bffe17 	ldw	r2,-8(fp)
   1825c:	10c00c17 	ldw	r3,48(r2)
   18260:	e0bffc17 	ldw	r2,-16(fp)
   18264:	18bfe72e 	bgeu	r3,r2,18204 <alt_up_ps2_read_data_byte_timeout+0x20>
		{
			return -ETIMEDOUT;
   18268:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
   1826c:	e037883a 	mov	sp,fp
   18270:	dfc00117 	ldw	ra,4(sp)
   18274:	df000017 	ldw	fp,0(sp)
   18278:	dec00204 	addi	sp,sp,8
   1827c:	f800283a 	ret

00018280 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   18280:	defffb04 	addi	sp,sp,-20
   18284:	dfc00415 	stw	ra,16(sp)
   18288:	df000315 	stw	fp,12(sp)
   1828c:	df000304 	addi	fp,sp,12
   18290:	e13ffe15 	stw	r4,-8(fp)
   18294:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   18298:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1829c:	e0bffe17 	ldw	r2,-8(fp)
   182a0:	10800a17 	ldw	r2,40(r2)
   182a4:	10800037 	ldwio	r2,0(r2)
   182a8:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   182ac:	e13ffd17 	ldw	r4,-12(fp)
   182b0:	0017ec00 	call	17ec0 <read_data_valid>
   182b4:	10803fcc 	andi	r2,r2,255
   182b8:	10000726 	beq	r2,zero,182d8 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   182bc:	e13ffd17 	ldw	r4,-12(fp)
   182c0:	0017ef40 	call	17ef4 <read_data_byte>
   182c4:	1007883a 	mov	r3,r2
   182c8:	e0bfff17 	ldw	r2,-4(fp)
   182cc:	10c00005 	stb	r3,0(r2)
		return 0;
   182d0:	0005883a 	mov	r2,zero
   182d4:	00000106 	br	182dc <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   182d8:	00bfffc4 	movi	r2,-1
}
   182dc:	e037883a 	mov	sp,fp
   182e0:	dfc00117 	ldw	ra,4(sp)
   182e4:	df000017 	ldw	fp,0(sp)
   182e8:	dec00204 	addi	sp,sp,8
   182ec:	f800283a 	ret

000182f0 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   182f0:	defffb04 	addi	sp,sp,-20
   182f4:	dfc00415 	stw	ra,16(sp)
   182f8:	df000315 	stw	fp,12(sp)
   182fc:	df000304 	addi	fp,sp,12
   18300:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   18304:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   18308:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1830c:	e0bfff17 	ldw	r2,-4(fp)
   18310:	10800a17 	ldw	r2,40(r2)
   18314:	10800037 	ldwio	r2,0(r2)
   18318:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   1831c:	e13ffe17 	ldw	r4,-8(fp)
   18320:	0017e900 	call	17e90 <read_num_bytes_available>
   18324:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   18328:	e0bffd0b 	ldhu	r2,-12(fp)
   1832c:	103ff71e 	bne	r2,zero,1830c <alt_up_ps2_clear_fifo+0x1c>
}
   18330:	0001883a 	nop
   18334:	e037883a 	mov	sp,fp
   18338:	dfc00117 	ldw	ra,4(sp)
   1833c:	df000017 	ldw	fp,0(sp)
   18340:	dec00204 	addi	sp,sp,8
   18344:	f800283a 	ret

00018348 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   18348:	defff804 	addi	sp,sp,-32
   1834c:	dfc00715 	stw	ra,28(sp)
   18350:	df000615 	stw	fp,24(sp)
   18354:	df000604 	addi	fp,sp,24
   18358:	e13ffd15 	stw	r4,-12(fp)
   1835c:	e17ffe15 	stw	r5,-8(fp)
   18360:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   18364:	e0bffd17 	ldw	r2,-12(fp)
   18368:	10800017 	ldw	r2,0(r2)
   1836c:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   18370:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   18374:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   18378:	e0fffc17 	ldw	r3,-16(fp)
   1837c:	e0bfff17 	ldw	r2,-4(fp)
   18380:	18bffd16 	blt	r3,r2,18378 <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   18384:	e0bffe17 	ldw	r2,-8(fp)
   18388:	10c00044 	addi	r3,r2,1
   1838c:	e0fffe15 	stw	r3,-8(fp)
   18390:	100b883a 	mov	r5,r2
   18394:	e13ffa17 	ldw	r4,-24(fp)
   18398:	00181e40 	call	181e4 <alt_up_ps2_read_data_byte_timeout>
   1839c:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   183a0:	e0bffb17 	ldw	r2,-20(fp)
   183a4:	10000226 	beq	r2,zero,183b0 <alt_up_ps2_read_fd+0x68>
			return count;
   183a8:	e0bffc17 	ldw	r2,-16(fp)
   183ac:	00000406 	br	183c0 <alt_up_ps2_read_fd+0x78>
		count++;
   183b0:	e0bffc17 	ldw	r2,-16(fp)
   183b4:	10800044 	addi	r2,r2,1
   183b8:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   183bc:	e0bffc17 	ldw	r2,-16(fp)
}
   183c0:	e037883a 	mov	sp,fp
   183c4:	dfc00117 	ldw	ra,4(sp)
   183c8:	df000017 	ldw	fp,0(sp)
   183cc:	dec00204 	addi	sp,sp,8
   183d0:	f800283a 	ret

000183d4 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   183d4:	defff804 	addi	sp,sp,-32
   183d8:	dfc00715 	stw	ra,28(sp)
   183dc:	df000615 	stw	fp,24(sp)
   183e0:	df000604 	addi	fp,sp,24
   183e4:	e13ffd15 	stw	r4,-12(fp)
   183e8:	e17ffe15 	stw	r5,-8(fp)
   183ec:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   183f0:	e0bffd17 	ldw	r2,-12(fp)
   183f4:	10800017 	ldw	r2,0(r2)
   183f8:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   183fc:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   18400:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   18404:	00001006 	br	18448 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   18408:	e0bffe17 	ldw	r2,-8(fp)
   1840c:	10c00044 	addi	r3,r2,1
   18410:	e0fffe15 	stw	r3,-8(fp)
   18414:	10800003 	ldbu	r2,0(r2)
   18418:	10803fcc 	andi	r2,r2,255
   1841c:	100b883a 	mov	r5,r2
   18420:	e13ffb17 	ldw	r4,-20(fp)
   18424:	00180a40 	call	180a4 <alt_up_ps2_write_data_byte>
   18428:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   1842c:	e0bffc17 	ldw	r2,-16(fp)
   18430:	10000226 	beq	r2,zero,1843c <alt_up_ps2_write_fd+0x68>
			return count;
   18434:	e0bffa17 	ldw	r2,-24(fp)
   18438:	00000706 	br	18458 <alt_up_ps2_write_fd+0x84>
		count++;
   1843c:	e0bffa17 	ldw	r2,-24(fp)
   18440:	10800044 	addi	r2,r2,1
   18444:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   18448:	e0fffa17 	ldw	r3,-24(fp)
   1844c:	e0bfff17 	ldw	r2,-4(fp)
   18450:	18bfed16 	blt	r3,r2,18408 <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   18454:	e0bffa17 	ldw	r2,-24(fp)
}
   18458:	e037883a 	mov	sp,fp
   1845c:	dfc00117 	ldw	ra,4(sp)
   18460:	df000017 	ldw	fp,0(sp)
   18464:	dec00204 	addi	sp,sp,8
   18468:	f800283a 	ret

0001846c <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   1846c:	defffc04 	addi	sp,sp,-16
   18470:	dfc00315 	stw	ra,12(sp)
   18474:	df000215 	stw	fp,8(sp)
   18478:	df000204 	addi	fp,sp,8
   1847c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   18480:	d1600a04 	addi	r5,gp,-32728
   18484:	e13fff17 	ldw	r4,-4(fp)
   18488:	0018b240 	call	18b24 <alt_find_dev>
   1848c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   18490:	e0bffe17 	ldw	r2,-8(fp)
}
   18494:	e037883a 	mov	sp,fp
   18498:	dfc00117 	ldw	ra,4(sp)
   1849c:	df000017 	ldw	fp,0(sp)
   184a0:	dec00204 	addi	sp,sp,8
   184a4:	f800283a 	ret

000184a8 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   184a8:	defffd04 	addi	sp,sp,-12
   184ac:	df000215 	stw	fp,8(sp)
   184b0:	df000204 	addi	fp,sp,8
   184b4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   184b8:	e0bfff17 	ldw	r2,-4(fp)
   184bc:	10800a17 	ldw	r2,40(r2)
   184c0:	10800104 	addi	r2,r2,4
   184c4:	10800037 	ldwio	r2,0(r2)
   184c8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   184cc:	e0bffe17 	ldw	r2,-8(fp)
   184d0:	10800054 	ori	r2,r2,1
   184d4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   184d8:	e0bfff17 	ldw	r2,-4(fp)
   184dc:	10800a17 	ldw	r2,40(r2)
   184e0:	10800104 	addi	r2,r2,4
   184e4:	1007883a 	mov	r3,r2
   184e8:	e0bffe17 	ldw	r2,-8(fp)
   184ec:	18800035 	stwio	r2,0(r3)
}
   184f0:	0001883a 	nop
   184f4:	e037883a 	mov	sp,fp
   184f8:	df000017 	ldw	fp,0(sp)
   184fc:	dec00104 	addi	sp,sp,4
   18500:	f800283a 	ret

00018504 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   18504:	defffd04 	addi	sp,sp,-12
   18508:	df000215 	stw	fp,8(sp)
   1850c:	df000204 	addi	fp,sp,8
   18510:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   18514:	e0bfff17 	ldw	r2,-4(fp)
   18518:	10800a17 	ldw	r2,40(r2)
   1851c:	10800104 	addi	r2,r2,4
   18520:	10800037 	ldwio	r2,0(r2)
   18524:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   18528:	e0fffe17 	ldw	r3,-8(fp)
   1852c:	00bfff84 	movi	r2,-2
   18530:	1884703a 	and	r2,r3,r2
   18534:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   18538:	e0bfff17 	ldw	r2,-4(fp)
   1853c:	10800a17 	ldw	r2,40(r2)
   18540:	10800104 	addi	r2,r2,4
   18544:	1007883a 	mov	r3,r2
   18548:	e0bffe17 	ldw	r2,-8(fp)
   1854c:	18800035 	stwio	r2,0(r3)
}
   18550:	0001883a 	nop
   18554:	e037883a 	mov	sp,fp
   18558:	df000017 	ldw	fp,0(sp)
   1855c:	dec00104 	addi	sp,sp,4
   18560:	f800283a 	ret

00018564 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   18564:	defffd04 	addi	sp,sp,-12
   18568:	df000215 	stw	fp,8(sp)
   1856c:	df000204 	addi	fp,sp,8
   18570:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   18574:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   18578:	e0bfff17 	ldw	r2,-4(fp)
   1857c:	10800a17 	ldw	r2,40(r2)
   18580:	10800084 	addi	r2,r2,2
   18584:	1080002b 	ldhuio	r2,0(r2)
   18588:	10bfffcc 	andi	r2,r2,65535
   1858c:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   18590:	e0bffe0b 	ldhu	r2,-8(fp)
}
   18594:	e037883a 	mov	sp,fp
   18598:	df000017 	ldw	fp,0(sp)
   1859c:	dec00104 	addi	sp,sp,4
   185a0:	f800283a 	ret

000185a4 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   185a4:	defffd04 	addi	sp,sp,-12
   185a8:	df000215 	stw	fp,8(sp)
   185ac:	df000204 	addi	fp,sp,8
   185b0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   185b4:	e0bfff17 	ldw	r2,-4(fp)
   185b8:	10800a17 	ldw	r2,40(r2)
   185bc:	10800104 	addi	r2,r2,4
   185c0:	10800037 	ldwio	r2,0(r2)
   185c4:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   185c8:	e0bffe17 	ldw	r2,-8(fp)
   185cc:	1004d43a 	srli	r2,r2,16
}
   185d0:	e037883a 	mov	sp,fp
   185d4:	df000017 	ldw	fp,0(sp)
   185d8:	dec00104 	addi	sp,sp,4
   185dc:	f800283a 	ret

000185e0 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   185e0:	defffd04 	addi	sp,sp,-12
   185e4:	df000215 	stw	fp,8(sp)
   185e8:	df000204 	addi	fp,sp,8
   185ec:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   185f0:	e0bfff17 	ldw	r2,-4(fp)
   185f4:	1080800c 	andi	r2,r2,512
   185f8:	1004d27a 	srli	r2,r2,9
   185fc:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   18600:	e0bffe17 	ldw	r2,-8(fp)
   18604:	10000226 	beq	r2,zero,18610 <alt_up_rs232_check_parity+0x30>
   18608:	00bfffc4 	movi	r2,-1
   1860c:	00000106 	br	18614 <alt_up_rs232_check_parity+0x34>
   18610:	0005883a 	mov	r2,zero
}
   18614:	e037883a 	mov	sp,fp
   18618:	df000017 	ldw	fp,0(sp)
   1861c:	dec00104 	addi	sp,sp,4
   18620:	f800283a 	ret

00018624 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   18624:	defffd04 	addi	sp,sp,-12
   18628:	df000215 	stw	fp,8(sp)
   1862c:	df000204 	addi	fp,sp,8
   18630:	e13ffe15 	stw	r4,-8(fp)
   18634:	2805883a 	mov	r2,r5
   18638:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   1863c:	e0bffe17 	ldw	r2,-8(fp)
   18640:	10800a17 	ldw	r2,40(r2)
   18644:	1007883a 	mov	r3,r2
   18648:	e0bfff03 	ldbu	r2,-4(fp)
   1864c:	18800035 	stwio	r2,0(r3)
	return 0;
   18650:	0005883a 	mov	r2,zero
}
   18654:	e037883a 	mov	sp,fp
   18658:	df000017 	ldw	fp,0(sp)
   1865c:	dec00104 	addi	sp,sp,4
   18660:	f800283a 	ret

00018664 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   18664:	defffa04 	addi	sp,sp,-24
   18668:	dfc00515 	stw	ra,20(sp)
   1866c:	df000415 	stw	fp,16(sp)
   18670:	df000404 	addi	fp,sp,16
   18674:	e13ffd15 	stw	r4,-12(fp)
   18678:	e17ffe15 	stw	r5,-8(fp)
   1867c:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   18680:	e0bffd17 	ldw	r2,-12(fp)
   18684:	10800a17 	ldw	r2,40(r2)
   18688:	10800037 	ldwio	r2,0(r2)
   1868c:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   18690:	e0bffc17 	ldw	r2,-16(fp)
   18694:	1007883a 	mov	r3,r2
   18698:	e0bffe17 	ldw	r2,-8(fp)
   1869c:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   186a0:	e13ffc17 	ldw	r4,-16(fp)
   186a4:	00185e00 	call	185e0 <alt_up_rs232_check_parity>
   186a8:	1007883a 	mov	r3,r2
   186ac:	e0bfff17 	ldw	r2,-4(fp)
   186b0:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   186b4:	e0bffc17 	ldw	r2,-16(fp)
   186b8:	10a0000c 	andi	r2,r2,32768
   186bc:	1004d3fa 	srli	r2,r2,15
   186c0:	10bfffc4 	addi	r2,r2,-1
}
   186c4:	e037883a 	mov	sp,fp
   186c8:	dfc00117 	ldw	ra,4(sp)
   186cc:	df000017 	ldw	fp,0(sp)
   186d0:	dec00204 	addi	sp,sp,8
   186d4:	f800283a 	ret

000186d8 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   186d8:	defff804 	addi	sp,sp,-32
   186dc:	dfc00715 	stw	ra,28(sp)
   186e0:	df000615 	stw	fp,24(sp)
   186e4:	df000604 	addi	fp,sp,24
   186e8:	e13ffd15 	stw	r4,-12(fp)
   186ec:	e17ffe15 	stw	r5,-8(fp)
   186f0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   186f4:	e0bffd17 	ldw	r2,-12(fp)
   186f8:	10800017 	ldw	r2,0(r2)
   186fc:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   18700:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   18704:	00000c06 	br	18738 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   18708:	e0bffe17 	ldw	r2,-8(fp)
   1870c:	10c00044 	addi	r3,r2,1
   18710:	e0fffe15 	stw	r3,-8(fp)
   18714:	e0fffc04 	addi	r3,fp,-16
   18718:	180d883a 	mov	r6,r3
   1871c:	100b883a 	mov	r5,r2
   18720:	e13ffb17 	ldw	r4,-20(fp)
   18724:	00186640 	call	18664 <alt_up_rs232_read_data>
   18728:	1000081e 	bne	r2,zero,1874c <alt_up_rs232_read_fd+0x74>
			count++;
   1872c:	e0bffa17 	ldw	r2,-24(fp)
   18730:	10800044 	addi	r2,r2,1
   18734:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   18738:	e0bfff17 	ldw	r2,-4(fp)
   1873c:	10ffffc4 	addi	r3,r2,-1
   18740:	e0ffff15 	stw	r3,-4(fp)
   18744:	103ff01e 	bne	r2,zero,18708 <alt_up_rs232_read_fd+0x30>
   18748:	00000106 	br	18750 <alt_up_rs232_read_fd+0x78>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   1874c:	0001883a 	nop
	}
	return count;
   18750:	e0bffa17 	ldw	r2,-24(fp)
}
   18754:	e037883a 	mov	sp,fp
   18758:	dfc00117 	ldw	ra,4(sp)
   1875c:	df000017 	ldw	fp,0(sp)
   18760:	dec00204 	addi	sp,sp,8
   18764:	f800283a 	ret

00018768 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   18768:	defff904 	addi	sp,sp,-28
   1876c:	dfc00615 	stw	ra,24(sp)
   18770:	df000515 	stw	fp,20(sp)
   18774:	df000504 	addi	fp,sp,20
   18778:	e13ffd15 	stw	r4,-12(fp)
   1877c:	e17ffe15 	stw	r5,-8(fp)
   18780:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   18784:	e0bffd17 	ldw	r2,-12(fp)
   18788:	10800017 	ldw	r2,0(r2)
   1878c:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   18790:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   18794:	00000d06 	br	187cc <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   18798:	e0bffe17 	ldw	r2,-8(fp)
   1879c:	10800003 	ldbu	r2,0(r2)
   187a0:	10803fcc 	andi	r2,r2,255
   187a4:	100b883a 	mov	r5,r2
   187a8:	e13ffc17 	ldw	r4,-16(fp)
   187ac:	00186240 	call	18624 <alt_up_rs232_write_data>
   187b0:	10000b1e 	bne	r2,zero,187e0 <alt_up_rs232_write_fd+0x78>
		{
			count++;
   187b4:	e0bffb17 	ldw	r2,-20(fp)
   187b8:	10800044 	addi	r2,r2,1
   187bc:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   187c0:	e0bffe17 	ldw	r2,-8(fp)
   187c4:	10800044 	addi	r2,r2,1
   187c8:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   187cc:	e0bfff17 	ldw	r2,-4(fp)
   187d0:	10ffffc4 	addi	r3,r2,-1
   187d4:	e0ffff15 	stw	r3,-4(fp)
   187d8:	103fef1e 	bne	r2,zero,18798 <alt_up_rs232_write_fd+0x30>
   187dc:	00000106 	br	187e4 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
			ptr++;
		}
		else
			break;
   187e0:	0001883a 	nop
	}
	return count;
   187e4:	e0bffb17 	ldw	r2,-20(fp)
}
   187e8:	e037883a 	mov	sp,fp
   187ec:	dfc00117 	ldw	ra,4(sp)
   187f0:	df000017 	ldw	fp,0(sp)
   187f4:	dec00204 	addi	sp,sp,8
   187f8:	f800283a 	ret

000187fc <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   187fc:	defffc04 	addi	sp,sp,-16
   18800:	dfc00315 	stw	ra,12(sp)
   18804:	df000215 	stw	fp,8(sp)
   18808:	df000204 	addi	fp,sp,8
   1880c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   18810:	d1600a04 	addi	r5,gp,-32728
   18814:	e13fff17 	ldw	r4,-4(fp)
   18818:	0018b240 	call	18b24 <alt_find_dev>
   1881c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   18820:	e0bffe17 	ldw	r2,-8(fp)
}
   18824:	e037883a 	mov	sp,fp
   18828:	dfc00117 	ldw	ra,4(sp)
   1882c:	df000017 	ldw	fp,0(sp)
   18830:	dec00204 	addi	sp,sp,8
   18834:	f800283a 	ret

00018838 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   18838:	defff504 	addi	sp,sp,-44
   1883c:	df000a15 	stw	fp,40(sp)
   18840:	df000a04 	addi	fp,sp,40
   18844:	e13ffc15 	stw	r4,-16(fp)
   18848:	e17ffd15 	stw	r5,-12(fp)
   1884c:	e1bffe15 	stw	r6,-8(fp)
   18850:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   18854:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   18858:	d0a81c17 	ldw	r2,-24464(gp)
  
  if (alt_ticks_per_second ())
   1885c:	10003c26 	beq	r2,zero,18950 <alt_alarm_start+0x118>
  {
    if (alarm)
   18860:	e0bffc17 	ldw	r2,-16(fp)
   18864:	10003826 	beq	r2,zero,18948 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   18868:	e0bffc17 	ldw	r2,-16(fp)
   1886c:	e0fffe17 	ldw	r3,-8(fp)
   18870:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   18874:	e0bffc17 	ldw	r2,-16(fp)
   18878:	e0ffff17 	ldw	r3,-4(fp)
   1887c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18880:	0005303a 	rdctl	r2,status
   18884:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18888:	e0fff917 	ldw	r3,-28(fp)
   1888c:	00bfff84 	movi	r2,-2
   18890:	1884703a 	and	r2,r3,r2
   18894:	1001703a 	wrctl	status,r2
  
  return context;
   18898:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   1889c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   188a0:	d0a81d17 	ldw	r2,-24460(gp)
      
      current_nticks = alt_nticks();
   188a4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   188a8:	e0fffd17 	ldw	r3,-12(fp)
   188ac:	e0bff617 	ldw	r2,-40(fp)
   188b0:	1885883a 	add	r2,r3,r2
   188b4:	10c00044 	addi	r3,r2,1
   188b8:	e0bffc17 	ldw	r2,-16(fp)
   188bc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   188c0:	e0bffc17 	ldw	r2,-16(fp)
   188c4:	10c00217 	ldw	r3,8(r2)
   188c8:	e0bff617 	ldw	r2,-40(fp)
   188cc:	1880042e 	bgeu	r3,r2,188e0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   188d0:	e0bffc17 	ldw	r2,-16(fp)
   188d4:	00c00044 	movi	r3,1
   188d8:	10c00405 	stb	r3,16(r2)
   188dc:	00000206 	br	188e8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   188e0:	e0bffc17 	ldw	r2,-16(fp)
   188e4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   188e8:	e0bffc17 	ldw	r2,-16(fp)
   188ec:	d0e02f04 	addi	r3,gp,-32580
   188f0:	e0fffa15 	stw	r3,-24(fp)
   188f4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   188f8:	e0bffb17 	ldw	r2,-20(fp)
   188fc:	e0fffa17 	ldw	r3,-24(fp)
   18900:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   18904:	e0bffa17 	ldw	r2,-24(fp)
   18908:	10c00017 	ldw	r3,0(r2)
   1890c:	e0bffb17 	ldw	r2,-20(fp)
   18910:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   18914:	e0bffa17 	ldw	r2,-24(fp)
   18918:	10800017 	ldw	r2,0(r2)
   1891c:	e0fffb17 	ldw	r3,-20(fp)
   18920:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   18924:	e0bffa17 	ldw	r2,-24(fp)
   18928:	e0fffb17 	ldw	r3,-20(fp)
   1892c:	10c00015 	stw	r3,0(r2)
   18930:	e0bff817 	ldw	r2,-32(fp)
   18934:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18938:	e0bff717 	ldw	r2,-36(fp)
   1893c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   18940:	0005883a 	mov	r2,zero
   18944:	00000306 	br	18954 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   18948:	00bffa84 	movi	r2,-22
   1894c:	00000106 	br	18954 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   18950:	00bfde84 	movi	r2,-134
  }
}
   18954:	e037883a 	mov	sp,fp
   18958:	df000017 	ldw	fp,0(sp)
   1895c:	dec00104 	addi	sp,sp,4
   18960:	f800283a 	ret

00018964 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   18964:	deffff04 	addi	sp,sp,-4
   18968:	df000015 	stw	fp,0(sp)
   1896c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   18970:	0001883a 	nop
   18974:	e037883a 	mov	sp,fp
   18978:	df000017 	ldw	fp,0(sp)
   1897c:	dec00104 	addi	sp,sp,4
   18980:	f800283a 	ret

00018984 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   18984:	defffe04 	addi	sp,sp,-8
   18988:	dfc00115 	stw	ra,4(sp)
   1898c:	df000015 	stw	fp,0(sp)
   18990:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   18994:	d0a00d17 	ldw	r2,-32716(gp)
   18998:	10000326 	beq	r2,zero,189a8 <alt_get_errno+0x24>
   1899c:	d0a00d17 	ldw	r2,-32716(gp)
   189a0:	103ee83a 	callr	r2
   189a4:	00000106 	br	189ac <alt_get_errno+0x28>
   189a8:	d0a7fe04 	addi	r2,gp,-24584
}
   189ac:	e037883a 	mov	sp,fp
   189b0:	dfc00117 	ldw	ra,4(sp)
   189b4:	df000017 	ldw	fp,0(sp)
   189b8:	dec00204 	addi	sp,sp,8
   189bc:	f800283a 	ret

000189c0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   189c0:	defffa04 	addi	sp,sp,-24
   189c4:	dfc00515 	stw	ra,20(sp)
   189c8:	df000415 	stw	fp,16(sp)
   189cc:	df000404 	addi	fp,sp,16
   189d0:	e13ffe15 	stw	r4,-8(fp)
   189d4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   189d8:	e0bffe17 	ldw	r2,-8(fp)
   189dc:	10000326 	beq	r2,zero,189ec <alt_dev_llist_insert+0x2c>
   189e0:	e0bffe17 	ldw	r2,-8(fp)
   189e4:	10800217 	ldw	r2,8(r2)
   189e8:	1000061e 	bne	r2,zero,18a04 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   189ec:	00189840 	call	18984 <alt_get_errno>
   189f0:	1007883a 	mov	r3,r2
   189f4:	00800584 	movi	r2,22
   189f8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   189fc:	00bffa84 	movi	r2,-22
   18a00:	00001306 	br	18a50 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   18a04:	e0bffe17 	ldw	r2,-8(fp)
   18a08:	e0ffff17 	ldw	r3,-4(fp)
   18a0c:	e0fffc15 	stw	r3,-16(fp)
   18a10:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   18a14:	e0bffd17 	ldw	r2,-12(fp)
   18a18:	e0fffc17 	ldw	r3,-16(fp)
   18a1c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   18a20:	e0bffc17 	ldw	r2,-16(fp)
   18a24:	10c00017 	ldw	r3,0(r2)
   18a28:	e0bffd17 	ldw	r2,-12(fp)
   18a2c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   18a30:	e0bffc17 	ldw	r2,-16(fp)
   18a34:	10800017 	ldw	r2,0(r2)
   18a38:	e0fffd17 	ldw	r3,-12(fp)
   18a3c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   18a40:	e0bffc17 	ldw	r2,-16(fp)
   18a44:	e0fffd17 	ldw	r3,-12(fp)
   18a48:	10c00015 	stw	r3,0(r2)

  return 0;  
   18a4c:	0005883a 	mov	r2,zero
}
   18a50:	e037883a 	mov	sp,fp
   18a54:	dfc00117 	ldw	ra,4(sp)
   18a58:	df000017 	ldw	fp,0(sp)
   18a5c:	dec00204 	addi	sp,sp,8
   18a60:	f800283a 	ret

00018a64 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   18a64:	defffd04 	addi	sp,sp,-12
   18a68:	dfc00215 	stw	ra,8(sp)
   18a6c:	df000115 	stw	fp,4(sp)
   18a70:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   18a74:	008000b4 	movhi	r2,2
   18a78:	10a72f04 	addi	r2,r2,-25412
   18a7c:	e0bfff15 	stw	r2,-4(fp)
   18a80:	00000606 	br	18a9c <_do_ctors+0x38>
        (*ctor) (); 
   18a84:	e0bfff17 	ldw	r2,-4(fp)
   18a88:	10800017 	ldw	r2,0(r2)
   18a8c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   18a90:	e0bfff17 	ldw	r2,-4(fp)
   18a94:	10bfff04 	addi	r2,r2,-4
   18a98:	e0bfff15 	stw	r2,-4(fp)
   18a9c:	e0ffff17 	ldw	r3,-4(fp)
   18aa0:	008000b4 	movhi	r2,2
   18aa4:	10a73004 	addi	r2,r2,-25408
   18aa8:	18bff62e 	bgeu	r3,r2,18a84 <_do_ctors+0x20>
        (*ctor) (); 
}
   18aac:	0001883a 	nop
   18ab0:	e037883a 	mov	sp,fp
   18ab4:	dfc00117 	ldw	ra,4(sp)
   18ab8:	df000017 	ldw	fp,0(sp)
   18abc:	dec00204 	addi	sp,sp,8
   18ac0:	f800283a 	ret

00018ac4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   18ac4:	defffd04 	addi	sp,sp,-12
   18ac8:	dfc00215 	stw	ra,8(sp)
   18acc:	df000115 	stw	fp,4(sp)
   18ad0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   18ad4:	008000b4 	movhi	r2,2
   18ad8:	10a72f04 	addi	r2,r2,-25412
   18adc:	e0bfff15 	stw	r2,-4(fp)
   18ae0:	00000606 	br	18afc <_do_dtors+0x38>
        (*dtor) (); 
   18ae4:	e0bfff17 	ldw	r2,-4(fp)
   18ae8:	10800017 	ldw	r2,0(r2)
   18aec:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   18af0:	e0bfff17 	ldw	r2,-4(fp)
   18af4:	10bfff04 	addi	r2,r2,-4
   18af8:	e0bfff15 	stw	r2,-4(fp)
   18afc:	e0ffff17 	ldw	r3,-4(fp)
   18b00:	008000b4 	movhi	r2,2
   18b04:	10a73004 	addi	r2,r2,-25408
   18b08:	18bff62e 	bgeu	r3,r2,18ae4 <_do_dtors+0x20>
        (*dtor) (); 
}
   18b0c:	0001883a 	nop
   18b10:	e037883a 	mov	sp,fp
   18b14:	dfc00117 	ldw	ra,4(sp)
   18b18:	df000017 	ldw	fp,0(sp)
   18b1c:	dec00204 	addi	sp,sp,8
   18b20:	f800283a 	ret

00018b24 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   18b24:	defffa04 	addi	sp,sp,-24
   18b28:	dfc00515 	stw	ra,20(sp)
   18b2c:	df000415 	stw	fp,16(sp)
   18b30:	df000404 	addi	fp,sp,16
   18b34:	e13ffe15 	stw	r4,-8(fp)
   18b38:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   18b3c:	e0bfff17 	ldw	r2,-4(fp)
   18b40:	10800017 	ldw	r2,0(r2)
   18b44:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   18b48:	e13ffe17 	ldw	r4,-8(fp)
   18b4c:	00011800 	call	1180 <strlen>
   18b50:	10800044 	addi	r2,r2,1
   18b54:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   18b58:	00000d06 	br	18b90 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   18b5c:	e0bffc17 	ldw	r2,-16(fp)
   18b60:	10800217 	ldw	r2,8(r2)
   18b64:	e0fffd17 	ldw	r3,-12(fp)
   18b68:	180d883a 	mov	r6,r3
   18b6c:	e17ffe17 	ldw	r5,-8(fp)
   18b70:	1009883a 	mov	r4,r2
   18b74:	00199780 	call	19978 <memcmp>
   18b78:	1000021e 	bne	r2,zero,18b84 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   18b7c:	e0bffc17 	ldw	r2,-16(fp)
   18b80:	00000706 	br	18ba0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   18b84:	e0bffc17 	ldw	r2,-16(fp)
   18b88:	10800017 	ldw	r2,0(r2)
   18b8c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   18b90:	e0fffc17 	ldw	r3,-16(fp)
   18b94:	e0bfff17 	ldw	r2,-4(fp)
   18b98:	18bff01e 	bne	r3,r2,18b5c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   18b9c:	0005883a 	mov	r2,zero
}
   18ba0:	e037883a 	mov	sp,fp
   18ba4:	dfc00117 	ldw	ra,4(sp)
   18ba8:	df000017 	ldw	fp,0(sp)
   18bac:	dec00204 	addi	sp,sp,8
   18bb0:	f800283a 	ret

00018bb4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   18bb4:	defffe04 	addi	sp,sp,-8
   18bb8:	dfc00115 	stw	ra,4(sp)
   18bbc:	df000015 	stw	fp,0(sp)
   18bc0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   18bc4:	01440004 	movi	r5,4096
   18bc8:	0009883a 	mov	r4,zero
   18bcc:	00198000 	call	19800 <alt_icache_flush>
#endif
}
   18bd0:	0001883a 	nop
   18bd4:	e037883a 	mov	sp,fp
   18bd8:	dfc00117 	ldw	ra,4(sp)
   18bdc:	df000017 	ldw	fp,0(sp)
   18be0:	dec00204 	addi	sp,sp,8
   18be4:	f800283a 	ret

00018be8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   18be8:	defff904 	addi	sp,sp,-28
   18bec:	dfc00615 	stw	ra,24(sp)
   18bf0:	df000515 	stw	fp,20(sp)
   18bf4:	df000504 	addi	fp,sp,20
   18bf8:	e13ffc15 	stw	r4,-16(fp)
   18bfc:	e17ffd15 	stw	r5,-12(fp)
   18c00:	e1bffe15 	stw	r6,-8(fp)
   18c04:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   18c08:	e1bfff17 	ldw	r6,-4(fp)
   18c0c:	e17ffe17 	ldw	r5,-8(fp)
   18c10:	e13ffd17 	ldw	r4,-12(fp)
   18c14:	0018fa80 	call	18fa8 <open>
   18c18:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   18c1c:	e0bffb17 	ldw	r2,-20(fp)
   18c20:	10001c16 	blt	r2,zero,18c94 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   18c24:	008000b4 	movhi	r2,2
   18c28:	10ac3b04 	addi	r2,r2,-20244
   18c2c:	e0fffb17 	ldw	r3,-20(fp)
   18c30:	18c00324 	muli	r3,r3,12
   18c34:	10c5883a 	add	r2,r2,r3
   18c38:	10c00017 	ldw	r3,0(r2)
   18c3c:	e0bffc17 	ldw	r2,-16(fp)
   18c40:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   18c44:	008000b4 	movhi	r2,2
   18c48:	10ac3b04 	addi	r2,r2,-20244
   18c4c:	e0fffb17 	ldw	r3,-20(fp)
   18c50:	18c00324 	muli	r3,r3,12
   18c54:	10c5883a 	add	r2,r2,r3
   18c58:	10800104 	addi	r2,r2,4
   18c5c:	10c00017 	ldw	r3,0(r2)
   18c60:	e0bffc17 	ldw	r2,-16(fp)
   18c64:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   18c68:	008000b4 	movhi	r2,2
   18c6c:	10ac3b04 	addi	r2,r2,-20244
   18c70:	e0fffb17 	ldw	r3,-20(fp)
   18c74:	18c00324 	muli	r3,r3,12
   18c78:	10c5883a 	add	r2,r2,r3
   18c7c:	10800204 	addi	r2,r2,8
   18c80:	10c00017 	ldw	r3,0(r2)
   18c84:	e0bffc17 	ldw	r2,-16(fp)
   18c88:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   18c8c:	e13ffb17 	ldw	r4,-20(fp)
   18c90:	000e0540 	call	e054 <alt_release_fd>
  }
} 
   18c94:	0001883a 	nop
   18c98:	e037883a 	mov	sp,fp
   18c9c:	dfc00117 	ldw	ra,4(sp)
   18ca0:	df000017 	ldw	fp,0(sp)
   18ca4:	dec00204 	addi	sp,sp,8
   18ca8:	f800283a 	ret

00018cac <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   18cac:	defffb04 	addi	sp,sp,-20
   18cb0:	dfc00415 	stw	ra,16(sp)
   18cb4:	df000315 	stw	fp,12(sp)
   18cb8:	df000304 	addi	fp,sp,12
   18cbc:	e13ffd15 	stw	r4,-12(fp)
   18cc0:	e17ffe15 	stw	r5,-8(fp)
   18cc4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   18cc8:	01c07fc4 	movi	r7,511
   18ccc:	01800044 	movi	r6,1
   18cd0:	e17ffd17 	ldw	r5,-12(fp)
   18cd4:	010000b4 	movhi	r4,2
   18cd8:	212c3e04 	addi	r4,r4,-20232
   18cdc:	0018be80 	call	18be8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   18ce0:	01c07fc4 	movi	r7,511
   18ce4:	000d883a 	mov	r6,zero
   18ce8:	e17ffe17 	ldw	r5,-8(fp)
   18cec:	010000b4 	movhi	r4,2
   18cf0:	212c3b04 	addi	r4,r4,-20244
   18cf4:	0018be80 	call	18be8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   18cf8:	01c07fc4 	movi	r7,511
   18cfc:	01800044 	movi	r6,1
   18d00:	e17fff17 	ldw	r5,-4(fp)
   18d04:	010000b4 	movhi	r4,2
   18d08:	212c4104 	addi	r4,r4,-20220
   18d0c:	0018be80 	call	18be8 <alt_open_fd>
}  
   18d10:	0001883a 	nop
   18d14:	e037883a 	mov	sp,fp
   18d18:	dfc00117 	ldw	ra,4(sp)
   18d1c:	df000017 	ldw	fp,0(sp)
   18d20:	dec00204 	addi	sp,sp,8
   18d24:	f800283a 	ret

00018d28 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   18d28:	defff004 	addi	sp,sp,-64
   18d2c:	df000f15 	stw	fp,60(sp)
   18d30:	df000f04 	addi	fp,sp,60
   18d34:	e13ffd15 	stw	r4,-12(fp)
   18d38:	e17ffe15 	stw	r5,-8(fp)
   18d3c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   18d40:	00bffa84 	movi	r2,-22
   18d44:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   18d48:	e0bffd17 	ldw	r2,-12(fp)
   18d4c:	10800828 	cmpgeui	r2,r2,32
   18d50:	1000501e 	bne	r2,zero,18e94 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18d54:	0005303a 	rdctl	r2,status
   18d58:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18d5c:	e0fff617 	ldw	r3,-40(fp)
   18d60:	00bfff84 	movi	r2,-2
   18d64:	1884703a 	and	r2,r3,r2
   18d68:	1001703a 	wrctl	status,r2
  
  return context;
   18d6c:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   18d70:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   18d74:	008000b4 	movhi	r2,2
   18d78:	10962b04 	addi	r2,r2,22700
   18d7c:	e0fffd17 	ldw	r3,-12(fp)
   18d80:	180690fa 	slli	r3,r3,3
   18d84:	10c5883a 	add	r2,r2,r3
   18d88:	e0ffff17 	ldw	r3,-4(fp)
   18d8c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   18d90:	008000b4 	movhi	r2,2
   18d94:	10962b04 	addi	r2,r2,22700
   18d98:	e0fffd17 	ldw	r3,-12(fp)
   18d9c:	180690fa 	slli	r3,r3,3
   18da0:	10c5883a 	add	r2,r2,r3
   18da4:	10800104 	addi	r2,r2,4
   18da8:	e0fffe17 	ldw	r3,-8(fp)
   18dac:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   18db0:	e0bfff17 	ldw	r2,-4(fp)
   18db4:	10001926 	beq	r2,zero,18e1c <alt_irq_register+0xf4>
   18db8:	e0bffd17 	ldw	r2,-12(fp)
   18dbc:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18dc0:	0005303a 	rdctl	r2,status
   18dc4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18dc8:	e0fff717 	ldw	r3,-36(fp)
   18dcc:	00bfff84 	movi	r2,-2
   18dd0:	1884703a 	and	r2,r3,r2
   18dd4:	1001703a 	wrctl	status,r2
  
  return context;
   18dd8:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   18ddc:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   18de0:	00c00044 	movi	r3,1
   18de4:	e0bff217 	ldw	r2,-56(fp)
   18de8:	1884983a 	sll	r2,r3,r2
   18dec:	1007883a 	mov	r3,r2
   18df0:	d0a81b17 	ldw	r2,-24468(gp)
   18df4:	1884b03a 	or	r2,r3,r2
   18df8:	d0a81b15 	stw	r2,-24468(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   18dfc:	d0a81b17 	ldw	r2,-24468(gp)
   18e00:	100170fa 	wrctl	ienable,r2
   18e04:	e0bff817 	ldw	r2,-32(fp)
   18e08:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18e0c:	e0bff917 	ldw	r2,-28(fp)
   18e10:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   18e14:	0005883a 	mov	r2,zero
   18e18:	00001906 	br	18e80 <alt_irq_register+0x158>
   18e1c:	e0bffd17 	ldw	r2,-12(fp)
   18e20:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18e24:	0005303a 	rdctl	r2,status
   18e28:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18e2c:	e0fffa17 	ldw	r3,-24(fp)
   18e30:	00bfff84 	movi	r2,-2
   18e34:	1884703a 	and	r2,r3,r2
   18e38:	1001703a 	wrctl	status,r2
  
  return context;
   18e3c:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   18e40:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   18e44:	00c00044 	movi	r3,1
   18e48:	e0bff417 	ldw	r2,-48(fp)
   18e4c:	1884983a 	sll	r2,r3,r2
   18e50:	0084303a 	nor	r2,zero,r2
   18e54:	1007883a 	mov	r3,r2
   18e58:	d0a81b17 	ldw	r2,-24468(gp)
   18e5c:	1884703a 	and	r2,r3,r2
   18e60:	d0a81b15 	stw	r2,-24468(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   18e64:	d0a81b17 	ldw	r2,-24468(gp)
   18e68:	100170fa 	wrctl	ienable,r2
   18e6c:	e0bffb17 	ldw	r2,-20(fp)
   18e70:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18e74:	e0bffc17 	ldw	r2,-16(fp)
   18e78:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   18e7c:	0005883a 	mov	r2,zero
   18e80:	e0bff115 	stw	r2,-60(fp)
   18e84:	e0bff317 	ldw	r2,-52(fp)
   18e88:	e0bff515 	stw	r2,-44(fp)
   18e8c:	e0bff517 	ldw	r2,-44(fp)
   18e90:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   18e94:	e0bff117 	ldw	r2,-60(fp)
}
   18e98:	e037883a 	mov	sp,fp
   18e9c:	df000017 	ldw	fp,0(sp)
   18ea0:	dec00104 	addi	sp,sp,4
   18ea4:	f800283a 	ret

00018ea8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   18ea8:	defffe04 	addi	sp,sp,-8
   18eac:	dfc00115 	stw	ra,4(sp)
   18eb0:	df000015 	stw	fp,0(sp)
   18eb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   18eb8:	d0a00d17 	ldw	r2,-32716(gp)
   18ebc:	10000326 	beq	r2,zero,18ecc <alt_get_errno+0x24>
   18ec0:	d0a00d17 	ldw	r2,-32716(gp)
   18ec4:	103ee83a 	callr	r2
   18ec8:	00000106 	br	18ed0 <alt_get_errno+0x28>
   18ecc:	d0a7fe04 	addi	r2,gp,-24584
}
   18ed0:	e037883a 	mov	sp,fp
   18ed4:	dfc00117 	ldw	ra,4(sp)
   18ed8:	df000017 	ldw	fp,0(sp)
   18edc:	dec00204 	addi	sp,sp,8
   18ee0:	f800283a 	ret

00018ee4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   18ee4:	defffd04 	addi	sp,sp,-12
   18ee8:	df000215 	stw	fp,8(sp)
   18eec:	df000204 	addi	fp,sp,8
   18ef0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   18ef4:	e0bfff17 	ldw	r2,-4(fp)
   18ef8:	10800217 	ldw	r2,8(r2)
   18efc:	10d00034 	orhi	r3,r2,16384
   18f00:	e0bfff17 	ldw	r2,-4(fp)
   18f04:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   18f08:	e03ffe15 	stw	zero,-8(fp)
   18f0c:	00001d06 	br	18f84 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   18f10:	008000b4 	movhi	r2,2
   18f14:	10ac3b04 	addi	r2,r2,-20244
   18f18:	e0fffe17 	ldw	r3,-8(fp)
   18f1c:	18c00324 	muli	r3,r3,12
   18f20:	10c5883a 	add	r2,r2,r3
   18f24:	10c00017 	ldw	r3,0(r2)
   18f28:	e0bfff17 	ldw	r2,-4(fp)
   18f2c:	10800017 	ldw	r2,0(r2)
   18f30:	1880111e 	bne	r3,r2,18f78 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   18f34:	008000b4 	movhi	r2,2
   18f38:	10ac3b04 	addi	r2,r2,-20244
   18f3c:	e0fffe17 	ldw	r3,-8(fp)
   18f40:	18c00324 	muli	r3,r3,12
   18f44:	10c5883a 	add	r2,r2,r3
   18f48:	10800204 	addi	r2,r2,8
   18f4c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   18f50:	1000090e 	bge	r2,zero,18f78 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   18f54:	e0bffe17 	ldw	r2,-8(fp)
   18f58:	10c00324 	muli	r3,r2,12
   18f5c:	008000b4 	movhi	r2,2
   18f60:	10ac3b04 	addi	r2,r2,-20244
   18f64:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   18f68:	e0bfff17 	ldw	r2,-4(fp)
   18f6c:	18800226 	beq	r3,r2,18f78 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   18f70:	00bffcc4 	movi	r2,-13
   18f74:	00000806 	br	18f98 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   18f78:	e0bffe17 	ldw	r2,-8(fp)
   18f7c:	10800044 	addi	r2,r2,1
   18f80:	e0bffe15 	stw	r2,-8(fp)
   18f84:	d0a00c17 	ldw	r2,-32720(gp)
   18f88:	1007883a 	mov	r3,r2
   18f8c:	e0bffe17 	ldw	r2,-8(fp)
   18f90:	18bfdf2e 	bgeu	r3,r2,18f10 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   18f94:	0005883a 	mov	r2,zero
}
   18f98:	e037883a 	mov	sp,fp
   18f9c:	df000017 	ldw	fp,0(sp)
   18fa0:	dec00104 	addi	sp,sp,4
   18fa4:	f800283a 	ret

00018fa8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   18fa8:	defff604 	addi	sp,sp,-40
   18fac:	dfc00915 	stw	ra,36(sp)
   18fb0:	df000815 	stw	fp,32(sp)
   18fb4:	df000804 	addi	fp,sp,32
   18fb8:	e13ffd15 	stw	r4,-12(fp)
   18fbc:	e17ffe15 	stw	r5,-8(fp)
   18fc0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   18fc4:	00bfffc4 	movi	r2,-1
   18fc8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   18fcc:	00bffb44 	movi	r2,-19
   18fd0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   18fd4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   18fd8:	d1600a04 	addi	r5,gp,-32728
   18fdc:	e13ffd17 	ldw	r4,-12(fp)
   18fe0:	0018b240 	call	18b24 <alt_find_dev>
   18fe4:	e0bff815 	stw	r2,-32(fp)
   18fe8:	e0bff817 	ldw	r2,-32(fp)
   18fec:	1000051e 	bne	r2,zero,19004 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   18ff0:	e13ffd17 	ldw	r4,-12(fp)
   18ff4:	001961c0 	call	1961c <alt_find_file>
   18ff8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   18ffc:	00800044 	movi	r2,1
   19000:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   19004:	e0bff817 	ldw	r2,-32(fp)
   19008:	10002926 	beq	r2,zero,190b0 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1900c:	e13ff817 	ldw	r4,-32(fp)
   19010:	00197240 	call	19724 <alt_get_fd>
   19014:	e0bff915 	stw	r2,-28(fp)
   19018:	e0bff917 	ldw	r2,-28(fp)
   1901c:	1000030e 	bge	r2,zero,1902c <open+0x84>
    {
      status = index;
   19020:	e0bff917 	ldw	r2,-28(fp)
   19024:	e0bffa15 	stw	r2,-24(fp)
   19028:	00002306 	br	190b8 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   1902c:	e0bff917 	ldw	r2,-28(fp)
   19030:	10c00324 	muli	r3,r2,12
   19034:	008000b4 	movhi	r2,2
   19038:	10ac3b04 	addi	r2,r2,-20244
   1903c:	1885883a 	add	r2,r3,r2
   19040:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   19044:	e0fffe17 	ldw	r3,-8(fp)
   19048:	00900034 	movhi	r2,16384
   1904c:	10bfffc4 	addi	r2,r2,-1
   19050:	1886703a 	and	r3,r3,r2
   19054:	e0bffc17 	ldw	r2,-16(fp)
   19058:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1905c:	e0bffb17 	ldw	r2,-20(fp)
   19060:	1000051e 	bne	r2,zero,19078 <open+0xd0>
   19064:	e13ffc17 	ldw	r4,-16(fp)
   19068:	0018ee40 	call	18ee4 <alt_file_locked>
   1906c:	e0bffa15 	stw	r2,-24(fp)
   19070:	e0bffa17 	ldw	r2,-24(fp)
   19074:	10001016 	blt	r2,zero,190b8 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   19078:	e0bff817 	ldw	r2,-32(fp)
   1907c:	10800317 	ldw	r2,12(r2)
   19080:	10000826 	beq	r2,zero,190a4 <open+0xfc>
   19084:	e0bff817 	ldw	r2,-32(fp)
   19088:	10800317 	ldw	r2,12(r2)
   1908c:	e1ffff17 	ldw	r7,-4(fp)
   19090:	e1bffe17 	ldw	r6,-8(fp)
   19094:	e17ffd17 	ldw	r5,-12(fp)
   19098:	e13ffc17 	ldw	r4,-16(fp)
   1909c:	103ee83a 	callr	r2
   190a0:	00000106 	br	190a8 <open+0x100>
   190a4:	0005883a 	mov	r2,zero
   190a8:	e0bffa15 	stw	r2,-24(fp)
   190ac:	00000206 	br	190b8 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   190b0:	00bffb44 	movi	r2,-19
   190b4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   190b8:	e0bffa17 	ldw	r2,-24(fp)
   190bc:	1000090e 	bge	r2,zero,190e4 <open+0x13c>
  {
    alt_release_fd (index);  
   190c0:	e13ff917 	ldw	r4,-28(fp)
   190c4:	000e0540 	call	e054 <alt_release_fd>
    ALT_ERRNO = -status;
   190c8:	0018ea80 	call	18ea8 <alt_get_errno>
   190cc:	1007883a 	mov	r3,r2
   190d0:	e0bffa17 	ldw	r2,-24(fp)
   190d4:	0085c83a 	sub	r2,zero,r2
   190d8:	18800015 	stw	r2,0(r3)
    return -1;
   190dc:	00bfffc4 	movi	r2,-1
   190e0:	00000106 	br	190e8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   190e4:	e0bff917 	ldw	r2,-28(fp)
}
   190e8:	e037883a 	mov	sp,fp
   190ec:	dfc00117 	ldw	ra,4(sp)
   190f0:	df000017 	ldw	fp,0(sp)
   190f4:	dec00204 	addi	sp,sp,8
   190f8:	f800283a 	ret

000190fc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   190fc:	defffa04 	addi	sp,sp,-24
   19100:	df000515 	stw	fp,20(sp)
   19104:	df000504 	addi	fp,sp,20
   19108:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1910c:	0005303a 	rdctl	r2,status
   19110:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19114:	e0fffc17 	ldw	r3,-16(fp)
   19118:	00bfff84 	movi	r2,-2
   1911c:	1884703a 	and	r2,r3,r2
   19120:	1001703a 	wrctl	status,r2
  
  return context;
   19124:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   19128:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1912c:	e0bfff17 	ldw	r2,-4(fp)
   19130:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   19134:	e0bffd17 	ldw	r2,-12(fp)
   19138:	10800017 	ldw	r2,0(r2)
   1913c:	e0fffd17 	ldw	r3,-12(fp)
   19140:	18c00117 	ldw	r3,4(r3)
   19144:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   19148:	e0bffd17 	ldw	r2,-12(fp)
   1914c:	10800117 	ldw	r2,4(r2)
   19150:	e0fffd17 	ldw	r3,-12(fp)
   19154:	18c00017 	ldw	r3,0(r3)
   19158:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1915c:	e0bffd17 	ldw	r2,-12(fp)
   19160:	e0fffd17 	ldw	r3,-12(fp)
   19164:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   19168:	e0bffd17 	ldw	r2,-12(fp)
   1916c:	e0fffd17 	ldw	r3,-12(fp)
   19170:	10c00015 	stw	r3,0(r2)
   19174:	e0bffb17 	ldw	r2,-20(fp)
   19178:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1917c:	e0bffe17 	ldw	r2,-8(fp)
   19180:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   19184:	0001883a 	nop
   19188:	e037883a 	mov	sp,fp
   1918c:	df000017 	ldw	fp,0(sp)
   19190:	dec00104 	addi	sp,sp,4
   19194:	f800283a 	ret

00019198 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   19198:	defffb04 	addi	sp,sp,-20
   1919c:	dfc00415 	stw	ra,16(sp)
   191a0:	df000315 	stw	fp,12(sp)
   191a4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   191a8:	d0a02f17 	ldw	r2,-32580(gp)
   191ac:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   191b0:	d0a81d17 	ldw	r2,-24460(gp)
   191b4:	10800044 	addi	r2,r2,1
   191b8:	d0a81d15 	stw	r2,-24460(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   191bc:	00002e06 	br	19278 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   191c0:	e0bffd17 	ldw	r2,-12(fp)
   191c4:	10800017 	ldw	r2,0(r2)
   191c8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   191cc:	e0bffd17 	ldw	r2,-12(fp)
   191d0:	10800403 	ldbu	r2,16(r2)
   191d4:	10803fcc 	andi	r2,r2,255
   191d8:	10000426 	beq	r2,zero,191ec <alt_tick+0x54>
   191dc:	d0a81d17 	ldw	r2,-24460(gp)
   191e0:	1000021e 	bne	r2,zero,191ec <alt_tick+0x54>
    {
      alarm->rollover = 0;
   191e4:	e0bffd17 	ldw	r2,-12(fp)
   191e8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   191ec:	e0bffd17 	ldw	r2,-12(fp)
   191f0:	10800217 	ldw	r2,8(r2)
   191f4:	d0e81d17 	ldw	r3,-24460(gp)
   191f8:	18801d36 	bltu	r3,r2,19270 <alt_tick+0xd8>
   191fc:	e0bffd17 	ldw	r2,-12(fp)
   19200:	10800403 	ldbu	r2,16(r2)
   19204:	10803fcc 	andi	r2,r2,255
   19208:	1000191e 	bne	r2,zero,19270 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1920c:	e0bffd17 	ldw	r2,-12(fp)
   19210:	10800317 	ldw	r2,12(r2)
   19214:	e0fffd17 	ldw	r3,-12(fp)
   19218:	18c00517 	ldw	r3,20(r3)
   1921c:	1809883a 	mov	r4,r3
   19220:	103ee83a 	callr	r2
   19224:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   19228:	e0bfff17 	ldw	r2,-4(fp)
   1922c:	1000031e 	bne	r2,zero,1923c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   19230:	e13ffd17 	ldw	r4,-12(fp)
   19234:	00190fc0 	call	190fc <alt_alarm_stop>
   19238:	00000d06 	br	19270 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1923c:	e0bffd17 	ldw	r2,-12(fp)
   19240:	10c00217 	ldw	r3,8(r2)
   19244:	e0bfff17 	ldw	r2,-4(fp)
   19248:	1887883a 	add	r3,r3,r2
   1924c:	e0bffd17 	ldw	r2,-12(fp)
   19250:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   19254:	e0bffd17 	ldw	r2,-12(fp)
   19258:	10c00217 	ldw	r3,8(r2)
   1925c:	d0a81d17 	ldw	r2,-24460(gp)
   19260:	1880032e 	bgeu	r3,r2,19270 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   19264:	e0bffd17 	ldw	r2,-12(fp)
   19268:	00c00044 	movi	r3,1
   1926c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   19270:	e0bffe17 	ldw	r2,-8(fp)
   19274:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   19278:	e0fffd17 	ldw	r3,-12(fp)
   1927c:	d0a02f04 	addi	r2,gp,-32580
   19280:	18bfcf1e 	bne	r3,r2,191c0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   19284:	000f2400 	call	f240 <OSTimeTick>
}
   19288:	0001883a 	nop
   1928c:	e037883a 	mov	sp,fp
   19290:	dfc00117 	ldw	ra,4(sp)
   19294:	df000017 	ldw	fp,0(sp)
   19298:	dec00204 	addi	sp,sp,8
   1929c:	f800283a 	ret

000192a0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   192a0:	deffff04 	addi	sp,sp,-4
   192a4:	df000015 	stw	fp,0(sp)
   192a8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   192ac:	000170fa 	wrctl	ienable,zero
}
   192b0:	0001883a 	nop
   192b4:	e037883a 	mov	sp,fp
   192b8:	df000017 	ldw	fp,0(sp)
   192bc:	dec00104 	addi	sp,sp,4
   192c0:	f800283a 	ret

000192c4 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   192c4:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   192c8:	d0e00317 	ldw	r3,-32756(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   192cc:	d1281617 	ldw	r4,-24488(gp)

      stw ra,  0(sp)
   192d0:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   192d4:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   192d8:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   192dc:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   192e0:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   192e4:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   192e8:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   192ec:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   192f0:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   192f4:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   192f8:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   192fc:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   19300:	00195380 	call	19538 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   19304:	d1281117 	ldw	r4,-24508(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   19308:	d1680907 	ldb	r5,-24540(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   1930c:	d1281615 	stw	r4,-24488(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   19310:	d1680945 	stb	r5,-24539(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   19314:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   19318:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   1931c:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   19320:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   19324:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   19328:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   1932c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   19330:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   19334:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   19338:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   1933c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   19340:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   19344:	d0e00315 	stw	r3,-32756(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   19348:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   1934c:	f800283a 	ret

00019350 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   19350:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   19354:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   19358:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   1935c:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   19360:	00195380 	call	19538 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   19364:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   19368:	d4a80745 	stb	r18,-24547(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   1936c:	003fe506 	br	19304 <OSCtxSw+0x40>

00019370 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   19370:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   19374:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   19378:	10800054 	ori	r2,r2,1
      wrctl status, r2
   1937c:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   19380:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   19384:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   19388:	dec00204 	addi	sp,sp,8

      callr r2
   1938c:	103ee83a 	callr	r2

      nop
   19390:	0001883a 	nop

00019394 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   19394:	defff704 	addi	sp,sp,-36
   19398:	dfc00815 	stw	ra,32(sp)
   1939c:	df000715 	stw	fp,28(sp)
   193a0:	df000704 	addi	fp,sp,28
   193a4:	e13ffc15 	stw	r4,-16(fp)
   193a8:	e17ffd15 	stw	r5,-12(fp)
   193ac:	e1bffe15 	stw	r6,-8(fp)
   193b0:	3805883a 	mov	r2,r7
   193b4:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   193b8:	e0fffe17 	ldw	r3,-8(fp)
   193bc:	00bfff04 	movi	r2,-4
   193c0:	1884703a 	and	r2,r3,r2
   193c4:	10bef704 	addi	r2,r2,-1060
   193c8:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   193cc:	01810904 	movi	r6,1060
   193d0:	000b883a 	mov	r5,zero
   193d4:	e13ff917 	ldw	r4,-28(fp)
   193d8:	0006db00 	call	6db0 <memset>
   193dc:	e0bff917 	ldw	r2,-28(fp)
   193e0:	10c0bb04 	addi	r3,r2,748
   193e4:	e0bff917 	ldw	r2,-28(fp)
   193e8:	10c00115 	stw	r3,4(r2)
   193ec:	e0bff917 	ldw	r2,-28(fp)
   193f0:	10c0d504 	addi	r3,r2,852
   193f4:	e0bff917 	ldw	r2,-28(fp)
   193f8:	10c00215 	stw	r3,8(r2)
   193fc:	e0bff917 	ldw	r2,-28(fp)
   19400:	10c0ef04 	addi	r3,r2,956
   19404:	e0bff917 	ldw	r2,-28(fp)
   19408:	10c00315 	stw	r3,12(r2)
   1940c:	e0fff917 	ldw	r3,-28(fp)
   19410:	008000b4 	movhi	r2,2
   19414:	10a9f204 	addi	r2,r2,-22584
   19418:	18800d15 	stw	r2,52(r3)
   1941c:	e0bff917 	ldw	r2,-28(fp)
   19420:	00c00044 	movi	r3,1
   19424:	10c02915 	stw	r3,164(r2)
   19428:	10002a15 	stw	zero,168(r2)
   1942c:	e0bff917 	ldw	r2,-28(fp)
   19430:	00ccc384 	movi	r3,13070
   19434:	10c02b0d 	sth	r3,172(r2)
   19438:	e0bff917 	ldw	r2,-28(fp)
   1943c:	00eaf344 	movi	r3,-21555
   19440:	10c02b8d 	sth	r3,174(r2)
   19444:	e0bff917 	ldw	r2,-28(fp)
   19448:	00c48d04 	movi	r3,4660
   1944c:	10c02c0d 	sth	r3,176(r2)
   19450:	e0bff917 	ldw	r2,-28(fp)
   19454:	00f99b44 	movi	r3,-6547
   19458:	10c02c8d 	sth	r3,178(r2)
   1945c:	e0bff917 	ldw	r2,-28(fp)
   19460:	00f7bb04 	movi	r3,-8468
   19464:	10c02d0d 	sth	r3,180(r2)
   19468:	e0bff917 	ldw	r2,-28(fp)
   1946c:	00c00144 	movi	r3,5
   19470:	10c02d8d 	sth	r3,182(r2)
   19474:	e0bff917 	ldw	r2,-28(fp)
   19478:	00c002c4 	movi	r3,11
   1947c:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   19480:	e0bff917 	ldw	r2,-28(fp)
   19484:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   19488:	e0bffa17 	ldw	r2,-24(fp)
   1948c:	10bff304 	addi	r2,r2,-52
   19490:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   19494:	e0bffb17 	ldw	r2,-20(fp)
   19498:	10800c04 	addi	r2,r2,48
   1949c:	e0fffc17 	ldw	r3,-16(fp)
   194a0:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   194a4:	e0bffb17 	ldw	r2,-20(fp)
   194a8:	10800b04 	addi	r2,r2,44
   194ac:	e0fffd17 	ldw	r3,-12(fp)
   194b0:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   194b4:	e0bffb17 	ldw	r2,-20(fp)
   194b8:	10800a04 	addi	r2,r2,40
   194bc:	e0fff917 	ldw	r3,-28(fp)
   194c0:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   194c4:	008000b4 	movhi	r2,2
   194c8:	10a4dc04 	addi	r2,r2,-27792
   194cc:	10c00104 	addi	r3,r2,4
   194d0:	e0bffb17 	ldw	r2,-20(fp)
   194d4:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   194d8:	e0bffb17 	ldw	r2,-20(fp)
}
   194dc:	e037883a 	mov	sp,fp
   194e0:	dfc00117 	ldw	ra,4(sp)
   194e4:	df000017 	ldw	fp,0(sp)
   194e8:	dec00204 	addi	sp,sp,8
   194ec:	f800283a 	ret

000194f0 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   194f0:	defffe04 	addi	sp,sp,-8
   194f4:	df000115 	stw	fp,4(sp)
   194f8:	df000104 	addi	fp,sp,4
   194fc:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   19500:	0001883a 	nop
   19504:	e037883a 	mov	sp,fp
   19508:	df000017 	ldw	fp,0(sp)
   1950c:	dec00104 	addi	sp,sp,4
   19510:	f800283a 	ret

00019514 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   19514:	defffe04 	addi	sp,sp,-8
   19518:	df000115 	stw	fp,4(sp)
   1951c:	df000104 	addi	fp,sp,4
   19520:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   19524:	0001883a 	nop
   19528:	e037883a 	mov	sp,fp
   1952c:	df000017 	ldw	fp,0(sp)
   19530:	dec00104 	addi	sp,sp,4
   19534:	f800283a 	ret

00019538 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   19538:	deffff04 	addi	sp,sp,-4
   1953c:	df000015 	stw	fp,0(sp)
   19540:	d839883a 	mov	fp,sp
}
   19544:	0001883a 	nop
   19548:	e037883a 	mov	sp,fp
   1954c:	df000017 	ldw	fp,0(sp)
   19550:	dec00104 	addi	sp,sp,4
   19554:	f800283a 	ret

00019558 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   19558:	deffff04 	addi	sp,sp,-4
   1955c:	df000015 	stw	fp,0(sp)
   19560:	d839883a 	mov	fp,sp
}
   19564:	0001883a 	nop
   19568:	e037883a 	mov	sp,fp
   1956c:	df000017 	ldw	fp,0(sp)
   19570:	dec00104 	addi	sp,sp,4
   19574:	f800283a 	ret

00019578 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   19578:	deffff04 	addi	sp,sp,-4
   1957c:	df000015 	stw	fp,0(sp)
   19580:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   19584:	0001883a 	nop
   19588:	e037883a 	mov	sp,fp
   1958c:	df000017 	ldw	fp,0(sp)
   19590:	dec00104 	addi	sp,sp,4
   19594:	f800283a 	ret

00019598 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   19598:	deffff04 	addi	sp,sp,-4
   1959c:	df000015 	stw	fp,0(sp)
   195a0:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   195a4:	0001883a 	nop
   195a8:	e037883a 	mov	sp,fp
   195ac:	df000017 	ldw	fp,0(sp)
   195b0:	dec00104 	addi	sp,sp,4
   195b4:	f800283a 	ret

000195b8 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   195b8:	deffff04 	addi	sp,sp,-4
   195bc:	df000015 	stw	fp,0(sp)
   195c0:	d839883a 	mov	fp,sp
}
   195c4:	0001883a 	nop
   195c8:	e037883a 	mov	sp,fp
   195cc:	df000017 	ldw	fp,0(sp)
   195d0:	dec00104 	addi	sp,sp,4
   195d4:	f800283a 	ret

000195d8 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   195d8:	deffff04 	addi	sp,sp,-4
   195dc:	df000015 	stw	fp,0(sp)
   195e0:	d839883a 	mov	fp,sp
}
   195e4:	0001883a 	nop
   195e8:	e037883a 	mov	sp,fp
   195ec:	df000017 	ldw	fp,0(sp)
   195f0:	dec00104 	addi	sp,sp,4
   195f4:	f800283a 	ret

000195f8 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   195f8:	defffe04 	addi	sp,sp,-8
   195fc:	df000115 	stw	fp,4(sp)
   19600:	df000104 	addi	fp,sp,4
   19604:	e13fff15 	stw	r4,-4(fp)
}
   19608:	0001883a 	nop
   1960c:	e037883a 	mov	sp,fp
   19610:	df000017 	ldw	fp,0(sp)
   19614:	dec00104 	addi	sp,sp,4
   19618:	f800283a 	ret

0001961c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1961c:	defffb04 	addi	sp,sp,-20
   19620:	dfc00415 	stw	ra,16(sp)
   19624:	df000315 	stw	fp,12(sp)
   19628:	df000304 	addi	fp,sp,12
   1962c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   19630:	d0a00817 	ldw	r2,-32736(gp)
   19634:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   19638:	00003106 	br	19700 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   1963c:	e0bffd17 	ldw	r2,-12(fp)
   19640:	10800217 	ldw	r2,8(r2)
   19644:	1009883a 	mov	r4,r2
   19648:	00011800 	call	1180 <strlen>
   1964c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   19650:	e0bffd17 	ldw	r2,-12(fp)
   19654:	10c00217 	ldw	r3,8(r2)
   19658:	e0bffe17 	ldw	r2,-8(fp)
   1965c:	10bfffc4 	addi	r2,r2,-1
   19660:	1885883a 	add	r2,r3,r2
   19664:	10800003 	ldbu	r2,0(r2)
   19668:	10803fcc 	andi	r2,r2,255
   1966c:	1080201c 	xori	r2,r2,128
   19670:	10bfe004 	addi	r2,r2,-128
   19674:	10800bd8 	cmpnei	r2,r2,47
   19678:	1000031e 	bne	r2,zero,19688 <alt_find_file+0x6c>
    {
      len -= 1;
   1967c:	e0bffe17 	ldw	r2,-8(fp)
   19680:	10bfffc4 	addi	r2,r2,-1
   19684:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   19688:	e0bffe17 	ldw	r2,-8(fp)
   1968c:	e0ffff17 	ldw	r3,-4(fp)
   19690:	1885883a 	add	r2,r3,r2
   19694:	10800003 	ldbu	r2,0(r2)
   19698:	10803fcc 	andi	r2,r2,255
   1969c:	1080201c 	xori	r2,r2,128
   196a0:	10bfe004 	addi	r2,r2,-128
   196a4:	10800be0 	cmpeqi	r2,r2,47
   196a8:	1000081e 	bne	r2,zero,196cc <alt_find_file+0xb0>
   196ac:	e0bffe17 	ldw	r2,-8(fp)
   196b0:	e0ffff17 	ldw	r3,-4(fp)
   196b4:	1885883a 	add	r2,r3,r2
   196b8:	10800003 	ldbu	r2,0(r2)
   196bc:	10803fcc 	andi	r2,r2,255
   196c0:	1080201c 	xori	r2,r2,128
   196c4:	10bfe004 	addi	r2,r2,-128
   196c8:	10000a1e 	bne	r2,zero,196f4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   196cc:	e0bffd17 	ldw	r2,-12(fp)
   196d0:	10800217 	ldw	r2,8(r2)
   196d4:	e0fffe17 	ldw	r3,-8(fp)
   196d8:	180d883a 	mov	r6,r3
   196dc:	e17fff17 	ldw	r5,-4(fp)
   196e0:	1009883a 	mov	r4,r2
   196e4:	00199780 	call	19978 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   196e8:	1000021e 	bne	r2,zero,196f4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   196ec:	e0bffd17 	ldw	r2,-12(fp)
   196f0:	00000706 	br	19710 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   196f4:	e0bffd17 	ldw	r2,-12(fp)
   196f8:	10800017 	ldw	r2,0(r2)
   196fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   19700:	e0fffd17 	ldw	r3,-12(fp)
   19704:	d0a00804 	addi	r2,gp,-32736
   19708:	18bfcc1e 	bne	r3,r2,1963c <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1970c:	0005883a 	mov	r2,zero
}
   19710:	e037883a 	mov	sp,fp
   19714:	dfc00117 	ldw	ra,4(sp)
   19718:	df000017 	ldw	fp,0(sp)
   1971c:	dec00204 	addi	sp,sp,8
   19720:	f800283a 	ret

00019724 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   19724:	defff904 	addi	sp,sp,-28
   19728:	dfc00615 	stw	ra,24(sp)
   1972c:	df000515 	stw	fp,20(sp)
   19730:	df000504 	addi	fp,sp,20
   19734:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   19738:	00bffa04 	movi	r2,-24
   1973c:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   19740:	d0a7ff17 	ldw	r2,-24580(gp)
   19744:	e0bffd15 	stw	r2,-12(fp)
   19748:	e03ffe0d 	sth	zero,-8(fp)
   1974c:	e0bffe0b 	ldhu	r2,-8(fp)
   19750:	e0fffe84 	addi	r3,fp,-6
   19754:	180d883a 	mov	r6,r3
   19758:	100b883a 	mov	r5,r2
   1975c:	e13ffd17 	ldw	r4,-12(fp)
   19760:	0013a940 	call	13a94 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   19764:	e03ffb15 	stw	zero,-20(fp)
   19768:	00001906 	br	197d0 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   1976c:	008000b4 	movhi	r2,2
   19770:	10ac3b04 	addi	r2,r2,-20244
   19774:	e0fffb17 	ldw	r3,-20(fp)
   19778:	18c00324 	muli	r3,r3,12
   1977c:	10c5883a 	add	r2,r2,r3
   19780:	10800017 	ldw	r2,0(r2)
   19784:	10000f1e 	bne	r2,zero,197c4 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   19788:	008000b4 	movhi	r2,2
   1978c:	10ac3b04 	addi	r2,r2,-20244
   19790:	e0fffb17 	ldw	r3,-20(fp)
   19794:	18c00324 	muli	r3,r3,12
   19798:	10c5883a 	add	r2,r2,r3
   1979c:	e0ffff17 	ldw	r3,-4(fp)
   197a0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   197a4:	d0e00c17 	ldw	r3,-32720(gp)
   197a8:	e0bffb17 	ldw	r2,-20(fp)
   197ac:	1880020e 	bge	r3,r2,197b8 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   197b0:	e0bffb17 	ldw	r2,-20(fp)
   197b4:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
   197b8:	e0bffb17 	ldw	r2,-20(fp)
   197bc:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   197c0:	00000606 	br	197dc <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   197c4:	e0bffb17 	ldw	r2,-20(fp)
   197c8:	10800044 	addi	r2,r2,1
   197cc:	e0bffb15 	stw	r2,-20(fp)
   197d0:	e0bffb17 	ldw	r2,-20(fp)
   197d4:	10800810 	cmplti	r2,r2,32
   197d8:	103fe41e 	bne	r2,zero,1976c <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   197dc:	d0a7ff17 	ldw	r2,-24580(gp)
   197e0:	1009883a 	mov	r4,r2
   197e4:	0013e0c0 	call	13e0c <OSSemPost>

  return rc;
   197e8:	e0bffc17 	ldw	r2,-16(fp)
}
   197ec:	e037883a 	mov	sp,fp
   197f0:	dfc00117 	ldw	ra,4(sp)
   197f4:	df000017 	ldw	fp,0(sp)
   197f8:	dec00204 	addi	sp,sp,8
   197fc:	f800283a 	ret

00019800 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   19800:	defffb04 	addi	sp,sp,-20
   19804:	df000415 	stw	fp,16(sp)
   19808:	df000404 	addi	fp,sp,16
   1980c:	e13ffe15 	stw	r4,-8(fp)
   19810:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   19814:	e0bfff17 	ldw	r2,-4(fp)
   19818:	10840070 	cmpltui	r2,r2,4097
   1981c:	1000021e 	bne	r2,zero,19828 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   19820:	00840004 	movi	r2,4096
   19824:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   19828:	e0fffe17 	ldw	r3,-8(fp)
   1982c:	e0bfff17 	ldw	r2,-4(fp)
   19830:	1885883a 	add	r2,r3,r2
   19834:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   19838:	e0bffe17 	ldw	r2,-8(fp)
   1983c:	e0bffc15 	stw	r2,-16(fp)
   19840:	00000506 	br	19858 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   19844:	e0bffc17 	ldw	r2,-16(fp)
   19848:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1984c:	e0bffc17 	ldw	r2,-16(fp)
   19850:	10800804 	addi	r2,r2,32
   19854:	e0bffc15 	stw	r2,-16(fp)
   19858:	e0fffc17 	ldw	r3,-16(fp)
   1985c:	e0bffd17 	ldw	r2,-12(fp)
   19860:	18bff836 	bltu	r3,r2,19844 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   19864:	e0bffe17 	ldw	r2,-8(fp)
   19868:	108007cc 	andi	r2,r2,31
   1986c:	10000226 	beq	r2,zero,19878 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   19870:	e0bffc17 	ldw	r2,-16(fp)
   19874:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   19878:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1987c:	0001883a 	nop
   19880:	e037883a 	mov	sp,fp
   19884:	df000017 	ldw	fp,0(sp)
   19888:	dec00104 	addi	sp,sp,4
   1988c:	f800283a 	ret

00019890 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   19890:	defffe04 	addi	sp,sp,-8
   19894:	df000115 	stw	fp,4(sp)
   19898:	df000104 	addi	fp,sp,4
   1989c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   198a0:	e0bfff17 	ldw	r2,-4(fp)
   198a4:	10bffe84 	addi	r2,r2,-6
   198a8:	10c00428 	cmpgeui	r3,r2,16
   198ac:	18001a1e 	bne	r3,zero,19918 <alt_exception_cause_generated_bad_addr+0x88>
   198b0:	100690ba 	slli	r3,r2,2
   198b4:	008000b4 	movhi	r2,2
   198b8:	10a63204 	addi	r2,r2,-26424
   198bc:	1885883a 	add	r2,r3,r2
   198c0:	10800017 	ldw	r2,0(r2)
   198c4:	1000683a 	jmp	r2
   198c8:	00019908 	cmpgei	zero,zero,1636
   198cc:	00019908 	cmpgei	zero,zero,1636
   198d0:	00019918 	cmpnei	zero,zero,1636
   198d4:	00019918 	cmpnei	zero,zero,1636
   198d8:	00019918 	cmpnei	zero,zero,1636
   198dc:	00019908 	cmpgei	zero,zero,1636
   198e0:	00019910 	cmplti	zero,zero,1636
   198e4:	00019918 	cmpnei	zero,zero,1636
   198e8:	00019908 	cmpgei	zero,zero,1636
   198ec:	00019908 	cmpgei	zero,zero,1636
   198f0:	00019918 	cmpnei	zero,zero,1636
   198f4:	00019908 	cmpgei	zero,zero,1636
   198f8:	00019910 	cmplti	zero,zero,1636
   198fc:	00019918 	cmpnei	zero,zero,1636
   19900:	00019918 	cmpnei	zero,zero,1636
   19904:	00019908 	cmpgei	zero,zero,1636
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   19908:	00800044 	movi	r2,1
   1990c:	00000306 	br	1991c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   19910:	0005883a 	mov	r2,zero
   19914:	00000106 	br	1991c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   19918:	0005883a 	mov	r2,zero
  }
}
   1991c:	e037883a 	mov	sp,fp
   19920:	df000017 	ldw	fp,0(sp)
   19924:	dec00104 	addi	sp,sp,4
   19928:	f800283a 	ret

0001992c <atexit>:
   1992c:	200b883a 	mov	r5,r4
   19930:	000f883a 	mov	r7,zero
   19934:	000d883a 	mov	r6,zero
   19938:	0009883a 	mov	r4,zero
   1993c:	00199f41 	jmpi	199f4 <__register_exitproc>

00019940 <exit>:
   19940:	defffe04 	addi	sp,sp,-8
   19944:	000b883a 	mov	r5,zero
   19948:	dc000015 	stw	r16,0(sp)
   1994c:	dfc00115 	stw	ra,4(sp)
   19950:	2021883a 	mov	r16,r4
   19954:	0019b0c0 	call	19b0c <__call_exitprocs>
   19958:	008000b4 	movhi	r2,2
   1995c:	10b17b04 	addi	r2,r2,-14868
   19960:	11000017 	ldw	r4,0(r2)
   19964:	20800f17 	ldw	r2,60(r4)
   19968:	10000126 	beq	r2,zero,19970 <exit+0x30>
   1996c:	103ee83a 	callr	r2
   19970:	8009883a 	mov	r4,r16
   19974:	0019c8c0 	call	19c8c <_exit>

00019978 <memcmp>:
   19978:	01c000c4 	movi	r7,3
   1997c:	3980192e 	bgeu	r7,r6,199e4 <memcmp+0x6c>
   19980:	2144b03a 	or	r2,r4,r5
   19984:	11c4703a 	and	r2,r2,r7
   19988:	10000f26 	beq	r2,zero,199c8 <memcmp+0x50>
   1998c:	20800003 	ldbu	r2,0(r4)
   19990:	28c00003 	ldbu	r3,0(r5)
   19994:	10c0151e 	bne	r2,r3,199ec <memcmp+0x74>
   19998:	31bfff84 	addi	r6,r6,-2
   1999c:	01ffffc4 	movi	r7,-1
   199a0:	00000406 	br	199b4 <memcmp+0x3c>
   199a4:	20800003 	ldbu	r2,0(r4)
   199a8:	28c00003 	ldbu	r3,0(r5)
   199ac:	31bfffc4 	addi	r6,r6,-1
   199b0:	10c00e1e 	bne	r2,r3,199ec <memcmp+0x74>
   199b4:	21000044 	addi	r4,r4,1
   199b8:	29400044 	addi	r5,r5,1
   199bc:	31fff91e 	bne	r6,r7,199a4 <memcmp+0x2c>
   199c0:	0005883a 	mov	r2,zero
   199c4:	f800283a 	ret
   199c8:	20c00017 	ldw	r3,0(r4)
   199cc:	28800017 	ldw	r2,0(r5)
   199d0:	18bfee1e 	bne	r3,r2,1998c <memcmp+0x14>
   199d4:	31bfff04 	addi	r6,r6,-4
   199d8:	21000104 	addi	r4,r4,4
   199dc:	29400104 	addi	r5,r5,4
   199e0:	39bff936 	bltu	r7,r6,199c8 <memcmp+0x50>
   199e4:	303fe91e 	bne	r6,zero,1998c <memcmp+0x14>
   199e8:	003ff506 	br	199c0 <memcmp+0x48>
   199ec:	10c5c83a 	sub	r2,r2,r3
   199f0:	f800283a 	ret

000199f4 <__register_exitproc>:
   199f4:	defffa04 	addi	sp,sp,-24
   199f8:	dc000315 	stw	r16,12(sp)
   199fc:	040000b4 	movhi	r16,2
   19a00:	84317b04 	addi	r16,r16,-14868
   19a04:	80c00017 	ldw	r3,0(r16)
   19a08:	dc400415 	stw	r17,16(sp)
   19a0c:	dfc00515 	stw	ra,20(sp)
   19a10:	18805217 	ldw	r2,328(r3)
   19a14:	2023883a 	mov	r17,r4
   19a18:	10003726 	beq	r2,zero,19af8 <__register_exitproc+0x104>
   19a1c:	10c00117 	ldw	r3,4(r2)
   19a20:	010007c4 	movi	r4,31
   19a24:	20c00e16 	blt	r4,r3,19a60 <__register_exitproc+0x6c>
   19a28:	1a000044 	addi	r8,r3,1
   19a2c:	8800221e 	bne	r17,zero,19ab8 <__register_exitproc+0xc4>
   19a30:	18c00084 	addi	r3,r3,2
   19a34:	18c7883a 	add	r3,r3,r3
   19a38:	18c7883a 	add	r3,r3,r3
   19a3c:	12000115 	stw	r8,4(r2)
   19a40:	10c7883a 	add	r3,r2,r3
   19a44:	19400015 	stw	r5,0(r3)
   19a48:	0005883a 	mov	r2,zero
   19a4c:	dfc00517 	ldw	ra,20(sp)
   19a50:	dc400417 	ldw	r17,16(sp)
   19a54:	dc000317 	ldw	r16,12(sp)
   19a58:	dec00604 	addi	sp,sp,24
   19a5c:	f800283a 	ret
   19a60:	00800034 	movhi	r2,0
   19a64:	10800004 	addi	r2,r2,0
   19a68:	10002626 	beq	r2,zero,19b04 <__register_exitproc+0x110>
   19a6c:	01006404 	movi	r4,400
   19a70:	d9400015 	stw	r5,0(sp)
   19a74:	d9800115 	stw	r6,4(sp)
   19a78:	d9c00215 	stw	r7,8(sp)
   19a7c:	00000000 	call	0 <__alt_mem_SDRAM>
   19a80:	d9400017 	ldw	r5,0(sp)
   19a84:	d9800117 	ldw	r6,4(sp)
   19a88:	d9c00217 	ldw	r7,8(sp)
   19a8c:	10001d26 	beq	r2,zero,19b04 <__register_exitproc+0x110>
   19a90:	81000017 	ldw	r4,0(r16)
   19a94:	10000115 	stw	zero,4(r2)
   19a98:	02000044 	movi	r8,1
   19a9c:	22405217 	ldw	r9,328(r4)
   19aa0:	0007883a 	mov	r3,zero
   19aa4:	12400015 	stw	r9,0(r2)
   19aa8:	20805215 	stw	r2,328(r4)
   19aac:	10006215 	stw	zero,392(r2)
   19ab0:	10006315 	stw	zero,396(r2)
   19ab4:	883fde26 	beq	r17,zero,19a30 <__register_exitproc+0x3c>
   19ab8:	18c9883a 	add	r4,r3,r3
   19abc:	2109883a 	add	r4,r4,r4
   19ac0:	1109883a 	add	r4,r2,r4
   19ac4:	21802215 	stw	r6,136(r4)
   19ac8:	01800044 	movi	r6,1
   19acc:	12406217 	ldw	r9,392(r2)
   19ad0:	30cc983a 	sll	r6,r6,r3
   19ad4:	4992b03a 	or	r9,r9,r6
   19ad8:	12406215 	stw	r9,392(r2)
   19adc:	21c04215 	stw	r7,264(r4)
   19ae0:	01000084 	movi	r4,2
   19ae4:	893fd21e 	bne	r17,r4,19a30 <__register_exitproc+0x3c>
   19ae8:	11006317 	ldw	r4,396(r2)
   19aec:	218cb03a 	or	r6,r4,r6
   19af0:	11806315 	stw	r6,396(r2)
   19af4:	003fce06 	br	19a30 <__register_exitproc+0x3c>
   19af8:	18805304 	addi	r2,r3,332
   19afc:	18805215 	stw	r2,328(r3)
   19b00:	003fc606 	br	19a1c <__register_exitproc+0x28>
   19b04:	00bfffc4 	movi	r2,-1
   19b08:	003fd006 	br	19a4c <__register_exitproc+0x58>

00019b0c <__call_exitprocs>:
   19b0c:	defff504 	addi	sp,sp,-44
   19b10:	df000915 	stw	fp,36(sp)
   19b14:	dd400615 	stw	r21,24(sp)
   19b18:	dc800315 	stw	r18,12(sp)
   19b1c:	dfc00a15 	stw	ra,40(sp)
   19b20:	ddc00815 	stw	r23,32(sp)
   19b24:	dd800715 	stw	r22,28(sp)
   19b28:	dd000515 	stw	r20,20(sp)
   19b2c:	dcc00415 	stw	r19,16(sp)
   19b30:	dc400215 	stw	r17,8(sp)
   19b34:	dc000115 	stw	r16,4(sp)
   19b38:	d9000015 	stw	r4,0(sp)
   19b3c:	2839883a 	mov	fp,r5
   19b40:	04800044 	movi	r18,1
   19b44:	057fffc4 	movi	r21,-1
   19b48:	008000b4 	movhi	r2,2
   19b4c:	10b17b04 	addi	r2,r2,-14868
   19b50:	12000017 	ldw	r8,0(r2)
   19b54:	45005217 	ldw	r20,328(r8)
   19b58:	44c05204 	addi	r19,r8,328
   19b5c:	a0001c26 	beq	r20,zero,19bd0 <__call_exitprocs+0xc4>
   19b60:	a0800117 	ldw	r2,4(r20)
   19b64:	15ffffc4 	addi	r23,r2,-1
   19b68:	b8000d16 	blt	r23,zero,19ba0 <__call_exitprocs+0x94>
   19b6c:	14000044 	addi	r16,r2,1
   19b70:	8421883a 	add	r16,r16,r16
   19b74:	8421883a 	add	r16,r16,r16
   19b78:	84402004 	addi	r17,r16,128
   19b7c:	a463883a 	add	r17,r20,r17
   19b80:	a421883a 	add	r16,r20,r16
   19b84:	e0001e26 	beq	fp,zero,19c00 <__call_exitprocs+0xf4>
   19b88:	80804017 	ldw	r2,256(r16)
   19b8c:	e0801c26 	beq	fp,r2,19c00 <__call_exitprocs+0xf4>
   19b90:	bdffffc4 	addi	r23,r23,-1
   19b94:	843fff04 	addi	r16,r16,-4
   19b98:	8c7fff04 	addi	r17,r17,-4
   19b9c:	bd7ff91e 	bne	r23,r21,19b84 <__call_exitprocs+0x78>
   19ba0:	00800034 	movhi	r2,0
   19ba4:	10800004 	addi	r2,r2,0
   19ba8:	10000926 	beq	r2,zero,19bd0 <__call_exitprocs+0xc4>
   19bac:	a0800117 	ldw	r2,4(r20)
   19bb0:	1000301e 	bne	r2,zero,19c74 <__call_exitprocs+0x168>
   19bb4:	a0800017 	ldw	r2,0(r20)
   19bb8:	10003226 	beq	r2,zero,19c84 <__call_exitprocs+0x178>
   19bbc:	a009883a 	mov	r4,r20
   19bc0:	98800015 	stw	r2,0(r19)
   19bc4:	00000000 	call	0 <__alt_mem_SDRAM>
   19bc8:	9d000017 	ldw	r20,0(r19)
   19bcc:	a03fe41e 	bne	r20,zero,19b60 <__call_exitprocs+0x54>
   19bd0:	dfc00a17 	ldw	ra,40(sp)
   19bd4:	df000917 	ldw	fp,36(sp)
   19bd8:	ddc00817 	ldw	r23,32(sp)
   19bdc:	dd800717 	ldw	r22,28(sp)
   19be0:	dd400617 	ldw	r21,24(sp)
   19be4:	dd000517 	ldw	r20,20(sp)
   19be8:	dcc00417 	ldw	r19,16(sp)
   19bec:	dc800317 	ldw	r18,12(sp)
   19bf0:	dc400217 	ldw	r17,8(sp)
   19bf4:	dc000117 	ldw	r16,4(sp)
   19bf8:	dec00b04 	addi	sp,sp,44
   19bfc:	f800283a 	ret
   19c00:	a0800117 	ldw	r2,4(r20)
   19c04:	80c00017 	ldw	r3,0(r16)
   19c08:	10bfffc4 	addi	r2,r2,-1
   19c0c:	15c01426 	beq	r2,r23,19c60 <__call_exitprocs+0x154>
   19c10:	80000015 	stw	zero,0(r16)
   19c14:	183fde26 	beq	r3,zero,19b90 <__call_exitprocs+0x84>
   19c18:	95c8983a 	sll	r4,r18,r23
   19c1c:	a0806217 	ldw	r2,392(r20)
   19c20:	a5800117 	ldw	r22,4(r20)
   19c24:	2084703a 	and	r2,r4,r2
   19c28:	10000b26 	beq	r2,zero,19c58 <__call_exitprocs+0x14c>
   19c2c:	a0806317 	ldw	r2,396(r20)
   19c30:	2088703a 	and	r4,r4,r2
   19c34:	20000c1e 	bne	r4,zero,19c68 <__call_exitprocs+0x15c>
   19c38:	89400017 	ldw	r5,0(r17)
   19c3c:	d9000017 	ldw	r4,0(sp)
   19c40:	183ee83a 	callr	r3
   19c44:	a0800117 	ldw	r2,4(r20)
   19c48:	15bfbf1e 	bne	r2,r22,19b48 <__call_exitprocs+0x3c>
   19c4c:	98800017 	ldw	r2,0(r19)
   19c50:	153fcf26 	beq	r2,r20,19b90 <__call_exitprocs+0x84>
   19c54:	003fbc06 	br	19b48 <__call_exitprocs+0x3c>
   19c58:	183ee83a 	callr	r3
   19c5c:	003ff906 	br	19c44 <__call_exitprocs+0x138>
   19c60:	a5c00115 	stw	r23,4(r20)
   19c64:	003feb06 	br	19c14 <__call_exitprocs+0x108>
   19c68:	89000017 	ldw	r4,0(r17)
   19c6c:	183ee83a 	callr	r3
   19c70:	003ff406 	br	19c44 <__call_exitprocs+0x138>
   19c74:	a0800017 	ldw	r2,0(r20)
   19c78:	a027883a 	mov	r19,r20
   19c7c:	1029883a 	mov	r20,r2
   19c80:	003fb606 	br	19b5c <__call_exitprocs+0x50>
   19c84:	0005883a 	mov	r2,zero
   19c88:	003ffb06 	br	19c78 <__call_exitprocs+0x16c>

00019c8c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   19c8c:	defffd04 	addi	sp,sp,-12
   19c90:	df000215 	stw	fp,8(sp)
   19c94:	df000204 	addi	fp,sp,8
   19c98:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   19c9c:	d0280745 	stb	zero,-24547(gp)
   19ca0:	e0bfff17 	ldw	r2,-4(fp)
   19ca4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   19ca8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   19cac:	10000226 	beq	r2,zero,19cb8 <_exit+0x2c>
    ALT_SIM_FAIL();
   19cb0:	002af070 	cmpltui	zero,zero,43969
   19cb4:	00000106 	br	19cbc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   19cb8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   19cbc:	003fff06 	br	19cbc <_exit+0x30>

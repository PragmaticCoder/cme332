
catch_game.elf:     file format elf32-littlenios2
catch_game.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001fac4 memsz 0x0001fac4 flags r-x
    LOAD off    0x00020ae4 vaddr 0x0001fae4 paddr 0x000219b0 align 2**12
         filesz 0x00001ecc memsz 0x00001ecc flags rw-
    LOAD off    0x0002387c vaddr 0x0002387c paddr 0x0002387c align 2**12
         filesz 0x00000000 memsz 0x00011498 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001e7b8  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000010e4  0001ea00  0001ea00  0001fa00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ecc  0001fae4  000219b0  00020ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00011498  0002387c  0002387c  0002387c  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00034d14  00034d14  000229b0  2**0
                  CONTENTS
  7 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM 00000000  09000000  09000000  000229b0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000229b0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001170  00000000  00000000  000229d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00034ac5  00000000  00000000  00023b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000bf32  00000000  00000000  0005860d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010887  00000000  00000000  0006453f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003ca0  00000000  00000000  00074dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005a72  00000000  00000000  00078a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001cd3e  00000000  00000000  0007e4da  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  0009b218  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001aa8  00000000  00000000  0009b238  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  000a2b4d  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  000a2b53  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000a2b58  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000a2b59  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000a2b5a  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000a2b5e  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000a2b62  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000a2b66  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000a2b6f  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000a2b78  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000f  00000000  00000000  000a2b81  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000044  00000000  00000000  000a2b90  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     001d2080  00000000  00000000  000a2bd4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
0001ea00 l    d  .rodata	00000000 .rodata
0001fae4 l    d  .rwdata	00000000 .rwdata
0002387c l    d  .bss	00000000 .bss
00034d14 l    d  .SDRAM	00000000 .SDRAM
09000000 l    d  .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM	00000000 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../catch_game_bsp//obj/HAL/src/crt0.o
00000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 utils.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 impure.c
0001fb2c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 strerror.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001f586 l     O .rodata	00000010 zeroes.4389
0001f596 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 u_strerr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001f5a6 l     O .rodata	00000010 zeroes.4404
00006cc8 l     F .text	000000bc __sbprintf
0001f5b6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00006ed8 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00008a08 l     F .text	00000008 __fp_unlock
00008a1c l     F .text	0000019c __sinit.part.1
00008bb8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
0001ff70 l     O .rwdata	00000020 lc_ctype_charset
0001ff50 l     O .rwdata	00000020 lc_message_charset
0001ff90 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0001f5e4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001f718 l     O .rodata	00000010 blanks.4332
0001f708 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
0000c8dc l     F .text	000000fc __sprint_r.part.0
0001f738 l     O .rodata	00000010 blanks.4348
0001f728 l     O .rodata	00000010 zeroes.4349
0000de68 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
000126a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000127ac l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000127d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000128c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000129a4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00012a90 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00012c5c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00021924 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00012ea8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00021928 l     O .rwdata	00000004 lockid
00023958 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0002192c l     O .rwdata	00000004 lockid
00023960 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
000148d8 l     F .text	00000048 OS_InitMisc
00014920 l     F .text	0000006c OS_InitRdyList
00014a8c l     F .text	000000e4 OS_InitTCBList
000147f8 l     F .text	000000e0 OS_InitEventList
0001498c l     F .text	00000080 OS_InitTaskIdle
00014a0c l     F .text	00000080 OS_InitTaskStat
00014cfc l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00016a1c l     F .text	000000f4 OS_FlagTaskRdy
000167dc l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001aacc l     F .text	00000034 alt_dev_reg
00020578 l     O .rwdata	0000106c JTAG_UART
000215e4 l     O .rwdata	00000030 AV_Config
00021614 l     O .rwdata	00000030 Audio_Subsystem_Audio
00021644 l     O .rwdata	0000002c Char_LCD_16x2
00021670 l     O .rwdata	0000002c IrDA
0002169c l     O .rwdata	00000038 PS2_Port
000216d4 l     O .rwdata	00000038 PS2_Port_Dual
0002170c l     O .rwdata	0000002c Serial_Port
00021738 l     O .rwdata	00000034 USB
0002176c l     O .rwdata	0000005c VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA
000217c8 l     O .rwdata	0000005c VGA_Subsystem_VGA_Pixel_DMA
00021824 l     O .rwdata	0000005c Video_In_Subsystem_Video_In_DMA
00021880 l     O .rwdata	00000044 VGA_Subsystem_VGA_Pixel_RGB_Resampler
000218c4 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001b744 l     F .text	000002a8 altera_avalon_jtag_uart_irq
0001b9ec l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001c1c8 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001d6c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001d928 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001dbe8 l     F .text	0000003c alt_get_errno
0001dc24 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000239c4 g     O .bss	00000004 alt_instruction_exception_handler
0002387c g     O .bss	00000004 basket_pos_y
0000afe0 g     F .text	00000074 _mprec_log10
0002197a g     O .rwdata	00000002 OSTaskNameSize
0000b0cc g     F .text	0000008c __any_on
0000e8c0 g     F .text	00000054 _isatty_r
0001f5f0 g     O .rodata	00000028 __mprec_tinytens
00012ba0 g     F .text	000000bc alt_main
00023880 g     O .bss	00000004 video_resolution
00034c14 g     O .bss	00000100 alt_irq
0001cd84 g     F .text	00000060 alt_up_ps2_disable_read_interrupt
0000e914 g     F .text	00000060 _lseek_r
0001723c g     F .text	000000cc OS_MemInit
00023884 g     O .bss	00000004 SEM_falling_blocks
000219b0 g       *ABS*	00000000 __flash_rwdata_start
0001aa6c g     F .text	00000060 OSTimeSet
0001c32c g     F .text	00000040 alt_up_character_lcd_send_cmd
000111cc g     F .text	00000088 .hidden __eqdf2
0001354c g     F .text	00000610 OSEventPendMulti
00034d14 g       *ABS*	00000000 __alt_heap_start
0001e230 g     F .text	00000024 OSTaskCreateHook
00023888 g     O .bss	00000004 pos1_x
00021952 g     O .rwdata	00000002 OSMboxEn
00013bb4 g     F .text	0000004c OSIntEnter
0000f1ec g     F .text	0000009c _wcrtomb_r
0002388c g     O .bss	00000004 pos3_y
0000b2f8 g     F .text	0000005c __sseek
00023890 g     O .bss	00000004 right_key_pressed
00008d58 g     F .text	00000010 __sinit
0000f094 g     F .text	00000140 __swbuf_r
0001cb9c g     F .text	00000034 read_CE_bit
00021962 g     O .rwdata	00000002 OSQEn
00009364 g     F .text	0000007c _setlocale_r
00008bc0 g     F .text	00000068 __sfmoreglue
00013220 g     F .text	000000cc __malloc_unlock
0001e298 g     F .text	00000020 OSTaskStatHook
0001cf24 g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
0001d418 g     F .text	00000090 alt_up_rs232_read_fd
00023968 g     O .bss	00000001 OSLockNesting
00001bec g     F .text	000001a4 VGA_display_score
000028b8 g     F .text	0000001c strerror
000219a0 g     O .rwdata	00000002 OSDataSize
00023969 g     O .bss	00000001 OSRunning
0000119c g     F .text	00000070 VGA_clear_game_row
0000e974 g     F .text	0000015c memmove
0001e2d8 g     F .text	00000020 OSInitHookBegin
00021998 g     O .rwdata	00000002 OSTmrSize
00008d40 g     F .text	00000018 _cleanup
00002178 g     F .text	000000e4 snprintf
0000a15c g     F .text	000000a8 _Balloc
00023894 g     O .bss	00000004 pos3_val
00023898 g     O .bss	00000004 screen_x
0002396c g     O .bss	00000004 OSIdleCtr
00011254 g     F .text	000000dc .hidden __gtdf2
0001dfe0 g     F .text	00000024 altera_nios2_gen2_irq_init
0001e0b0 g       .text	00000000 OSStartTsk
00001fcc g     F .text	00000010 __errno
0001c2b8 g     F .text	00000074 get_DDRAM_addr
0001503c g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000001c __reset
0002199e g     O .rwdata	00000002 OSTmrWheelTblSize
0000043c g     F .text	000000a0 Task_VGA_init
00000020 g       *ABS*	00000000 __flash_exceptions_start
0002193e g     O .rwdata	00000002 OSEventSize
00023970 g     O .bss	00000001 OSPrioHighRdy
0000e3a8 g     F .text	0000005c _fstat_r
0001e254 g     F .text	00000024 OSTaskDelHook
00023944 g     O .bss	00000004 errno
0000b274 g     F .text	00000008 __seofread
0001e090 g       .text	00000000 OSStartHighRdy
00019508 g     F .text	000001e4 OSTaskCreateExt
0002389c g     O .bss	00000004 enter_key_pressed
0000b6a0 g     F .text	0000123c ___svfiprintf_internal_r
00000fc0 g     F .text	0000008c VGA_info_right
00016324 g     F .text	00000060 OSFlagPendGetFlagsRdy
0002197e g     O .rwdata	00000002 OSTaskStatStkSize
000154a0 g     F .text	00000308 OSFlagAccept
00017874 g     F .text	000000b8 OSQFlush
00017308 g     F .text	00000140 OSQAccept
00023950 g     O .bss	00000004 alt_argv
000298f0 g       *ABS*	00000000 _gp
000238a0 g     O .bss	00000002 background_color
0001935c g     F .text	000001ac OSTaskCreate
00018e6c g     F .text	000004f0 OSTaskChangePrio
00023964 g     O .bss	00000004 alt_heapsem
00015310 g     F .text	00000190 OSDebugInit
000196ec g     F .text	00000344 OSTaskDel
0000054c g     F .text	00000068 Task_read_PS2_Keyboard
000238a4 g     O .bss	00000004 game_hh
000203f8 g     O .rwdata	00000180 alt_fd_list
000319f0 g     O .bss	00000370 OSFlagTbl
000145d8 g     F .text	000000b8 OS_EventTaskRemove
000238a8 g     O .bss	00000004 SEM_read_KEYs
0001d864 g     F .text	00000090 alt_find_dev
00009eec g     F .text	00000148 memcpy
00021968 g     O .rwdata	00000002 OSRdyTblSize
0001c4d4 g     F .text	00000050 alt_up_character_lcd_write_fd
00008a10 g     F .text	0000000c _cleanup_r
000124b8 g     F .text	000000dc .hidden __floatsidf
0001d9ec g     F .text	0000007c alt_io_redirect
00011330 g     F .text	000000f4 .hidden __ltdf2
0001ea00 g       *ABS*	00000000 __DTOR_END__
0001ca6c g     F .text	00000090 alt_up_irda_write_fd
0001d3a4 g     F .text	00000074 alt_up_rs232_read_data
0001e5d0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000132ec g     F .text	00000120 OSEventNameGet
0002194c g     O .rwdata	00000002 OSFlagMax
0000225c g     F .text	0000065c _strerror_r
0000b158 g     F .text	00000074 __fpclassifyd
0000af3c g     F .text	000000a4 __ratio
00013c00 g     F .text	000000f8 OSIntExit
0000de4c g     F .text	0000001c __vfiprintf_internal
00021986 g     O .rwdata	00000002 OSTCBSize
00023971 g     O .bss	00000001 OSPrioCur
000238ac g     O .bss	00000004 KEY2_flag
0001c868 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
0001bc48 g     F .text	000002bc altera_avalon_jtag_uart_read
0000ff7c g     F .text	00000064 .hidden __udivsi3
00012900 g     F .text	000000a4 isatty
00000f60 g     F .text	00000060 VGA_animated_char
0002196c g     O .rwdata	00000002 OSStkWidth
000239f0 g     O .bss	00002000 task_vga_init_stk
0001f640 g     O .rodata	000000c8 __mprec_tens
00021960 g     O .rwdata	00000002 OSPtrSize
000093e0 g     F .text	0000000c __locale_charset
0000076c g     F .text	00000114 Task_GameState_controller
00021940 g     O .rwdata	00000002 OSEventTblSize
0001c808 g     F .text	00000060 alt_up_irda_disable_read_interrupt
0001e004 g       .text	00000000 OSCtxSw
0001e540 g     F .text	00000090 alt_icache_flush
00023940 g     O .bss	00000004 __malloc_top_pad
00023974 g     O .bss	00000004 OSTCBList
00023948 g     O .bss	00000004 alt_fd_list_lock
000218fc g     O .rwdata	00000004 __mb_cur_max
00009410 g     F .text	0000000c _localeconv_r
0000e404 g     F .text	000004bc __sfvwrite_r
0000a568 g     F .text	0000003c __i2b
00031d60 g     O .bss	00000c30 OSMemTbl
00023978 g     O .bss	00000001 OSTickStepState
0000b1cc g     F .text	00000054 _sbrk_r
00021964 g     O .rwdata	00000002 OSQMax
00032990 g     O .bss	00000800 OSTaskStatStk
00016e78 g     F .text	000000f0 OSMemNameGet
00021944 g     O .rwdata	00000002 OSFlagEn
000238b0 g     O .bss	00000004 game_mm
0000ead0 g     F .text	00000060 _read_r
0002198a g     O .rwdata	00000002 OSTimeTickHookEn
00017d24 g     F .text	00000168 OSQPost
00016b10 g     F .text	000000a4 OS_FlagUnlink
0002191c g     O .rwdata	00000004 alt_max_fd
0001d320 g     F .text	00000044 alt_up_rs232_check_parity
000238b4 g     O .bss	00000004 col_offset
00014bc4 g     F .text	00000068 OS_MemCopy
00014c2c g     F .text	000000d0 OS_Sched
0000e09c g     F .text	000000f0 _fclose_r
00016d88 g     F .text	000000f0 OSMemGet
00019d18 g     F .text	000001b4 OSTaskNameSet
0001cbd0 g     F .text	00000030 read_num_bytes_available
000089d8 g     F .text	00000030 fflush
0002393c g     O .bss	00000004 __malloc_max_sbrked_mem
0002397c g     O .bss	00000004 OSCtxSwCtr
000259f0 g     O .bss	00002000 task_disp_vga_char_stk
0001e2b8 g     F .text	00000020 OSTimeTickHook
0001da68 g     F .text	00000180 alt_irq_register
0002194e g     O .rwdata	00000002 OSFlagNameSize
0001cb38 g     F .text	00000034 read_RI_bit
00014690 g     F .text	00000100 OS_EventTaskRemoveMulti
00010038 g     F .text	000008ac .hidden __adddf3
000238b8 g     O .bss	00000004 game_state
00014488 g     F .text	00000150 OS_EventTaskWaitMulti
000279f0 g     O .bss	00002000 task_falling_blocks
0000ace4 g     F .text	0000010c __b2d
000238bc g     O .bss	00000004 game_ss
00021966 g     O .rwdata	00000002 OSQSize
0000f94c g     F .text	00000538 .hidden __umoddi3
00012acc g     F .text	000000d4 lseek
000187d4 g     F .text	0000020c OSSemPend
000218f4 g     O .rwdata	00000004 _global_impure_ptr
000238c0 g     O .bss	00000002 sidebar_color
0000eb30 g     F .text	00000564 _realloc_r
00021950 g     O .rwdata	00000002 OSLowestPrio
00034d14 g       *ABS*	00000000 __bss_end
0001e338 g     F .text	00000024 OSTCBInitHook
00021996 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0001ded8 g     F .text	00000108 alt_tick
0000f3d4 g     F .text	00000578 .hidden __udivdi3
0000e304 g     F .text	00000024 _fputwc_r
00021938 g     O .rwdata	00000002 OSEventEn
0001f618 g     O .rodata	00000028 __mprec_bigtens
0000a34c g     F .text	00000104 __s2b
00021992 g     O .rwdata	00000002 OSTmrCfgNameSize
00012594 g     F .text	000000a8 .hidden __floatunsidf
0000aa24 g     F .text	00000060 __mcmp
000238c4 g     O .bss	00000004 SEM_KEY_press
0001cc34 g     F .text	0000002c read_data_byte
00008d78 g     F .text	00000018 __fp_lock_all
0001693c g     F .text	000000e0 OS_FlagInit
0001de3c g     F .text	0000009c alt_alarm_stop
0001cb6c g     F .text	00000030 read_RE_bit
00021974 g     O .rwdata	00000002 OSTaskIdleStkSize
000239b8 g     O .bss	00000004 alt_irq_active
0001840c g     F .text	000000b0 OSSemAccept
00000cf0 g     F .text	00000094 VGA_text
0001707c g     F .text	000000d8 OSMemPut
00016bb4 g     F .text	000001d4 OSMemCreate
00023980 g     O .bss	00000004 OSIdleCtrMax
0001c8a8 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d8 alt_irq_handler
000203d0 g     O .rwdata	00000028 alt_dev_null
00021988 g     O .rwdata	00000002 OSTicksPerSec
000238c8 g     O .bss	00000004 KEY_val
0001c774 g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
0001e004 g       .text	00000000 OSIntCtxSw
0001cde4 g     F .text	00000074 alt_up_ps2_write_data_byte
0001d6a4 g     F .text	00000020 alt_dcache_flush_all
0000a450 g     F .text	00000068 __hi0bits
000238cc g     O .bss	00000004 pos2_val
00012438 g     F .text	00000080 .hidden __fixdfsi
00023984 g     O .bss	00000004 OSTCBFreeList
000219b0 g       *ABS*	00000000 __ram_rwdata_end
000189e0 g     F .text	0000016c OSSemPendAbort
00021914 g     O .rwdata	00000008 alt_dev_list
000238d0 g     O .bss	00000004 score
00012ee4 g     F .text	000000f8 write
0002198c g     O .rwdata	00000002 OSVersionNbr
0001fae4 g       *ABS*	00000000 __ram_rodata_end
00012814 g     F .text	000000b0 fstat
00002004 g     F .text	00000024 fprintf
0001d4a8 g     F .text	00000094 alt_up_rs232_write_fd
000238d4 g     O .bss	00000004 pos2_y
000238d8 g     O .bss	00000004 res_offset
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00011330 g     F .text	000000f4 .hidden __ledf2
000238dc g     O .bss	00000002 basket_color
00021934 g     O .rwdata	00000004 OSEndiannessTest
0000a79c g     F .text	00000140 __pow5mult
0000c9f0 g     F .text	0000145c ___vfiprintf_internal_r
00023934 g     O .bss	00000004 __nlocale_changed
0000ffe0 g     F .text	00000058 .hidden __umodsi3
00021946 g     O .rwdata	00000002 OSFlagGrpSize
00034d14 g       *ABS*	00000000 end
0001d114 g     F .text	00000098 alt_up_ps2_write_fd
0001c8e4 g     F .text	00000044 alt_up_irda_check_parity
00001104 g     F .text	00000098 VGA_clear_screen
00000364 g     F .text	000000d8 Task_move_basket
000299f0 g     O .bss	00002000 task_move_basket_stk
0001b608 g     F .text	0000013c altera_avalon_jtag_uart_init
00014e94 g     F .text	000000dc OS_TaskStat
0002b9f0 g     O .bss	00002000 task_ps2_keyboard_stk
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
0001ea00 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0001c244 g     F .text	00000074 alt_avalon_timer_sc_init
0001263c g     F .text	00000064 .hidden __clzsi2
000020a0 g     F .text	000000d8 _snprintf_r
0001bf04 g     F .text	000002c4 altera_avalon_jtag_uart_write
00008d68 g     F .text	00000004 __sfp_lock_acquire
00009e08 g     F .text	000000e4 memchr
00014b70 g     F .text	00000054 OS_MemClr
0001c3e0 g     F .text	0000007c alt_up_character_lcd_write
00004ab4 g     F .text	000021f8 ___vfprintf_internal_r
0001e0d4 g     F .text	0000015c OSTaskStkInit
00008ecc g     F .text	00000310 _free_r
0001fae4 g     O .rwdata	00000046 clear_row_text
000093ec g     F .text	00000010 __locale_mb_cur_max
000141e0 g     F .text	00000198 OS_EventTaskRdy
000238e0 g     O .bss	00000004 screen_y
0001e84c g     F .text	00000180 __call_exitprocs
00023988 g     O .bss	00000001 OSCPUUsage
0002d9f0 g     O .bss	00002000 task_game_timer_stk
0002f9f0 g     O .bss	00002000 task_state_controller_stk
00023930 g     O .bss	00000004 __mlocale_changed
00021900 g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	0000003c _start
000239bc g     O .bss	00000004 _alt_tick_rate
0001792c g     F .text	0000028c OSQPend
00004aac g     F .text	00000008 _user_strerror
0001a5d8 g     F .text	00000104 OSTimeDly
00002040 g     F .text	00000060 rand
0000a8dc g     F .text	00000148 __lshift
000239c0 g     O .bss	00000004 _alt_nticks
00012c98 g     F .text	000000fc read
0001ab38 g     F .text	0000096c alt_sys_init
0001c624 g     F .text	0000008c alt_up_character_lcd_shift_display
0000b4d0 g     F .text	000001d0 __ssprint_r
0001e734 g     F .text	00000118 __register_exitproc
000238e4 g     O .bss	00000004 any_key_pressed
00023989 g     O .bss	00000001 OSTaskCtr
0001d030 g     F .text	00000058 alt_up_ps2_clear_fifo
0001d2e4 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00000d84 g     F .text	00000138 VGA_box
0001a6dc g     F .text	00000160 OSTimeDlyHMSM
0000a5a4 g     F .text	000001f8 __multiply
0001c6b0 g     F .text	0000008c alt_up_character_lcd_erase_pos
0001baf0 g     F .text	00000068 altera_avalon_jtag_uart_close
0001fae4 g       *ABS*	00000000 __ram_rwdata_start
0001ea00 g       *ABS*	00000000 __ram_rodata_start
000239c8 g     O .bss	00000028 __malloc_current_mallinfo
0002193a g     O .rwdata	00000002 OSEventMax
0000adf0 g     F .text	0000014c __d2b
00018b4c g     F .text	00000110 OSSemPost
00013d84 g     F .text	000000dc OSSchedUnlock
0001b4a4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001e464 g     F .text	000000dc alt_get_fd
0002398c g     O .bss	00000004 OSMemFreeList
00013ed0 g     F .text	000000b0 OSStatInit
00016718 g     F .text	000000c4 OSFlagQuery
000238e8 g     O .bss	00000004 KEY1_flag
00021970 g     O .rwdata	00000002 OSTaskCreateExtEn
0000df84 g     F .text	00000054 _close_r
0001e6b8 g     F .text	0000007c memcmp
000141c0 g     F .text	00000020 OS_Dummy
0001b564 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0000120c g     F .text	00000190 get_data_bits
00034d14 g       *ABS*	00000000 __alt_stack_base
0001b5b4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000238ec g     O .bss	00000004 basket_pos_x
0001c7ac g     F .text	0000005c alt_up_irda_enable_read_interrupt
00006d84 g     F .text	00000154 __swsetup_r
00033190 g     O .bss	000001e0 OSQTbl
000108e4 g     F .text	000008e8 .hidden __divdf3
00008c28 g     F .text	00000118 __sfp
0000b054 g     F .text	00000078 __copybits
0001ffc8 g     O .rwdata	00000408 __malloc_av_
00008d74 g     F .text	00000004 __sinit_lock_release
00023990 g     O .bss	00000004 OSTCBHighRdy
00011424 g     F .text	00000718 .hidden __muldf3
0000b220 g     F .text	00000054 __sread
00023994 g     O .bss	00000004 OSQFreeList
0001d244 g     F .text	00000060 alt_up_rs232_disable_read_interrupt
0001e35c g     F .text	00000108 alt_find_file
0001d700 g     F .text	000000a4 alt_dev_llist_insert
00013100 g     F .text	00000120 __malloc_lock
00001fdc g     F .text	00000028 _fprintf_r
00012df8 g     F .text	000000b0 sbrk
000028d4 g     F .text	000021d8 ___svfprintf_internal_r
0001340c g     F .text	00000140 OSEventNameSet
0000897c g     F .text	0000005c _fflush_r
0000dfd8 g     F .text	000000c4 _calloc_r
00023998 g     O .bss	00000001 OSRdyGrp
00000c88 g     F .text	00000068 get_State_name
0002387c g       *ABS*	00000000 __bss_start
0000a034 g     F .text	00000128 memset
000238f0 g     O .bss	00000001 err
00000880 g     F .text	00000408 main
00023954 g     O .bss	00000004 alt_envp
00023938 g     O .bss	00000004 __malloc_max_total_mem
000004dc g     F .text	00000070 Task_VGA_char
0001b504 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000f1d4 g     F .text	00000018 __swbuf
00002028 g     F .text	00000018 srand
0001f864 g     O .rodata	00000100 OSUnMapTbl
0002196a g     O .rwdata	00000002 OSSemEn
0001c598 g     F .text	0000008c alt_up_character_lcd_shift_cursor
00016384 g     F .text	00000394 OSFlagPost
0000b354 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0000e18c g     F .text	00000014 fclose
00014378 g     F .text	00000110 OS_EventTaskWait
000238f4 g     O .bss	00000004 left_key_pressed
0001cfc0 g     F .text	00000070 alt_up_ps2_read_data_byte
00014f70 g     F .text	000000cc OS_TaskStatStkChk
00019a30 g     F .text	00000150 OSTaskDelReq
000070d8 g     F .text	00001688 _dtoa_r
000095fc g     F .text	0000080c _malloc_r
0000f348 g     F .text	00000030 __ascii_wctomb
000238f8 g     O .bss	00000004 pos1_y
00021920 g     O .rwdata	00000004 alt_errno
00013e60 g     F .text	00000070 OSStart
000130a0 g     F .text	00000060 __env_unlock
000091dc g     F .text	000000c4 _fwalk
00019ecc g     F .text	000001d4 OSTaskResume
00017154 g     F .text	000000e8 OSMemQuery
0002197c g     O .rwdata	00000002 OSTaskStatEn
0001c928 g     F .text	00000040 alt_up_irda_write_data
00021956 g     O .rwdata	00000002 OSMemMax
00017e8c g     F .text	00000170 OSQPostFront
0001d1ac g     F .text	0000003c alt_up_ps2_open_dev
0000fe84 g     F .text	00000084 .hidden __divsi3
00023999 g     O .bss	00000003 OSRdyTbl
00021930 g     O .rwdata	00000002 OSDebugEn
0001c3a4 g     F .text	0000003c alt_up_character_lcd_open_dev
00008da8 g     F .text	00000124 _malloc_trim_r
0001cd28 g     F .text	0000005c alt_up_ps2_enable_read_interrupt
0001ea00 g       *ABS*	00000000 __CTOR_END__
00021948 g     O .rwdata	00000002 OSFlagNodeSize
00021990 g     O .rwdata	00000002 OSTmrCfgMax
0001c36c g     F .text	00000038 alt_up_character_lcd_init
0000b35c g     F .text	000000dc strcmp
00017448 g     F .text	000001ac OSQCreate
00019b80 g     F .text	00000198 OSTaskNameGet
0001ea00 g       *ABS*	00000000 __flash_rodata_start
00017ffc g     F .text	0000020c OSQPostOpt
00013f80 g     F .text	00000220 OSTimeTick
00021978 g     O .rwdata	00000002 OSTaskMax
0001ea00 g       *ABS*	00000000 __DTOR_LIST__
000184bc g     F .text	000000d8 OSSemCreate
0002199c g     O .rwdata	00000002 OSTmrWheelSize
000238fc g     O .bss	00000004 KEY3_flag
0001d53c g     F .text	0000003c alt_up_rs232_open_dev
000111cc g     F .text	00000088 .hidden __nedf2
00023900 g     O .bss	00000004 esc_key_pressed
00021972 g     O .rwdata	00000002 OSTaskDelEn
00018c5c g     F .text	00000110 OSSemQuery
000175f4 g     F .text	00000280 OSQDel
00017bb8 g     F .text	0000016c OSQPendAbort
0001ab00 g     F .text	00000038 alt_irq_init
00012d94 g     F .text	00000064 alt_release_fd
0001cc00 g     F .text	00000034 read_data_valid
0001c73c g     F .text	00000038 alt_up_character_lcd_cursor_off
0001f748 g     O .rodata	00000100 .hidden __clz_tab
00023904 g     O .bss	00000004 pos3_x
0002392c g     O .bss	00000004 _PathLocale
0001cec0 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
0001e66c g     F .text	00000014 atexit
0000df24 g     F .text	00000060 _write_r
00013cf8 g     F .text	0000008c OSSchedLock
0000941c g     F .text	00000018 setlocale
000157a8 g     F .text	00000108 OSFlagCreate
00000284 g     F .text	000000e0 Task_game_timer
000218f8 g     O .rwdata	00000004 _impure_ptr
0002394c g     O .bss	00000004 alt_argc
00008760 g     F .text	0000021c __sflush_r
000218f0 g     O .rwdata	00000002 clear_text
0001d804 g     F .text	00000060 _do_dtors
00009408 g     F .text	00000008 __locale_cjk_lang
00023908 g     O .bss	00000004 pos2_x
00021942 g     O .rwdata	00000002 OSEventMultiEn
09000000 g       *ABS*	00000000 __alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
000005b4 g     F .text	000001b8 Task_falling_blocks
000158b0 g     F .text	00000248 OSFlagDel
0002399c g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
0000ac80 g     F .text	00000064 __ulp
00015d6c g     F .text	000005b8 OSFlagPend
0002198e g     O .rwdata	00000002 OSTmrEn
00008d90 g     F .text	00000018 __fp_unlock_all
0002190c g     O .rwdata	00000008 alt_fs_list
00014d70 g     F .text	00000074 OS_StrCopy
0001d1e8 g     F .text	0000005c alt_up_rs232_enable_read_interrupt
0001d364 g     F .text	00000040 alt_up_rs232_write_data
00021958 g     O .rwdata	00000002 OSMemNameSize
0001e2f8 g     F .text	00000020 OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
00021984 g     O .rwdata	00000002 OSTCBPrioTblMax
00009434 g     F .text	0000000c localeconv
00021980 g     O .rwdata	00000002 OSTaskStatStkChkEn
00001a5c g     F .text	00000190 VGA_gametime_display
00021954 g     O .rwdata	00000002 OSMemEn
0002195e g     O .rwdata	00000002 OSMutexEn
000219b0 g       *ABS*	00000000 _edata
0002390c g     O .bss	00000004 KEY0_flag
00034d14 g       *ABS*	00000000 _end
000239a0 g     O .bss	00000001 OSIntNesting
0000e1a0 g     F .text	00000164 __fputwc
00000248 g       *ABS*	00000000 __ram_exceptions_end
0001bb58 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0001a83c g     F .text	000001d4 OSTimeDlyResume
00015c20 g     F .text	0000014c OSFlagNameSet
0001a0a0 g     F .text	000001c0 OSTaskStkChk
0002195a g     O .rwdata	00000002 OSMemSize
0000b27c g     F .text	0000007c __swrite
00021904 g     O .rwdata	00000004 __malloc_trim_threshold
00023910 g     O .bss	00000004 pos1_val
000093fc g     F .text	0000000c __locale_msgcharset
00001d90 g     F .text	0000023c read_PS2_KeyboardInput
000239a4 g     O .bss	00000004 OSTCBCur
0001e680 g     F .text	00000038 exit
0001c968 g     F .text	00000074 alt_up_irda_read_data
0002195c g     O .rwdata	00000002 OSMemTblSize
000092a0 g     F .text	000000c4 _fwalk_reent
0001cc60 g     F .text	000000c8 alt_up_ps2_init
0000aa84 g     F .text	000001fc __mdiff
00023914 g     O .bss	00000004 SEM_moving_basket
0000ff08 g     F .text	00000074 .hidden __modsi3
0000104c g     F .text	000000b8 resample_rgb
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00008d6c g     F .text	00000004 __sfp_lock_release
0000139c g     F .text	000006c0 VGA_display_sidebar
00013b5c g     F .text	00000058 OSInit
0001a444 g     F .text	00000124 OSTaskQuery
0001c45c g     F .text	00000078 alt_up_character_lcd_string
00018364 g     F .text	000000a8 OS_QInit
00014de4 g     F .text	00000054 OS_StrLen
0001cafc g     F .text	0000003c alt_up_irda_open_dev
00016f68 g     F .text	00000114 OSMemNameSet
00023918 g     O .bss	00000004 SEM_VGA_init
00021976 g     O .rwdata	00000002 OSTaskProfileEn
000239a8 g     O .bss	00000004 OSTime
00033370 g     O .bss	00000800 OSTaskIdleStk
0001e9cc g     F .text	00000034 _exit
0001d578 g     F .text	0000012c alt_alarm_start
00015af8 g     F .text	00000128 OSFlagNameGet
0001aa10 g     F .text	0000005c OSTimeGet
00009440 g     F .text	000001bc __smakebuf_r
00000ebc g     F .text	000000a4 VGA_char_box
0001ce58 g     F .text	00000068 alt_up_ps2_wait_for_ack
0000b438 g     F .text	00000098 strlen
0001e278 g     F .text	00000020 OSTaskSwHook
0001dce8 g     F .text	00000154 open
00033b70 g     O .bss	00000b40 OSEventTbl
00011254 g     F .text	000000dc .hidden __gedf2
000346b0 g     O .bss	00000510 OSTCBTbl
00018d6c g     F .text	00000100 OSSemSet
0002391c g     O .bss	00000004 SEM_game_timer
00021908 g     O .rwdata	00000004 __wctomb
0000c9d8 g     F .text	00000018 __sprint_r
0001d8f4 g     F .text	00000034 alt_icache_flush_all
0001c524 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
000219a4 g     O .rwdata	00000004 alt_priority_mask
00018594 g     F .text	00000240 OSSemDel
000239ac g     O .bss	00000004 OSFlagFreeList
0002193c g     O .rwdata	00000002 OSEventNameSize
00006cac g     F .text	0000001c __vfprintf_internal
000239b0 g     O .bss	00000001 OSStatRdy
00034bc0 g     O .bss	00000054 OSTCBPrioTbl
0000f378 g     F .text	0000005c _wctomb_r
00012fdc g     F .text	000000c4 __env_lock
0001d088 g     F .text	0000008c alt_up_ps2_read_fd
00021982 g     O .rwdata	00000002 OSTaskSwHookEn
00011b3c g     F .text	000008fc .hidden __subdf3
0001c9dc g     F .text	00000090 alt_up_irda_read_fd
00023920 g     O .bss	00000004 SEM_state_transition
00023924 g     O .bss	00000001 text_disp
0000a4b8 g     F .text	000000b0 __lo0bits
000219a8 g     O .rwdata	00000008 alt_alarm_list
0002194a g     O .rwdata	00000002 OSFlagWidth
0001d7a4 g     F .text	00000060 _do_ctors
0001d2a4 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000f288 g     F .text	000000c0 wcrtomb
000126dc g     F .text	000000d0 close
0002395c g     O .bss	00000004 alt_envsem
000239b4 g     O .bss	00000004 OSIdleCtrRun
000141a0 g     F .text	00000020 OSVersion
00021994 g     O .rwdata	00000002 OSTmrCfgWheelSize
00012a0c g     F .text	00000084 alt_load
0001a568 g     F .text	00000070 OS_TaskStkClr
0002196e g     O .rwdata	00000002 OSTaskCreateEn
00014790 g     F .text	00000068 OS_EventWaitListInit
0000e328 g     F .text	00000080 fputwc
0001e318 g     F .text	00000020 OSTaskIdleHook
00008d70 g     F .text	00000004 __sinit_lock_acquire
00023928 g     O .bss	00000004 rgb_status
0000a22c g     F .text	00000120 __multadd
0001a260 g     F .text	000001e4 OSTaskSuspend
0000a204 g     F .text	00000028 _Bfree
00014e38 g     F .text	0000005c OS_TaskIdle
0002199a g     O .rwdata	00000002 OSTmrTblSize
00018208 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0013bb40 	call	13bb4 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000f4 	movhi	r2,3
 140:	10930504 	addi	r2,r2,19476
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000f4 	movhi	r2,3
 158:	10930504 	addi	r2,r2,19476
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	0013c000 	call	13c00 <OSIntExit>
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a83517 	ldw	r2,-24364(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a83517 	ldw	r2,-24364(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     248:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     24c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     250:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     254:	d6a63c14 	ori	gp,gp,39152
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     258:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     25c:	108e1f14 	ori	r2,r2,14460

    movhi r3, %hi(__bss_end)
     260:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
     264:	18d34514 	ori	r3,r3,19732

    beq r2, r3, 1f
     268:	10c00326 	beq	r2,r3,278 <_start+0x30>

0:
    stw zero, (r2)
     26c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     274:	10fffd36 	bltu	r2,r3,26c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     278:	0012a0c0 	call	12a0c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     27c:	0012ba00 	call	12ba0 <alt_main>

00000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     280:	003fff06 	br	280 <alt_after_alt_main>

00000284 <Task_game_timer>:
/* ************************************************************************** */
/*                     Track Elapsed Time: Total Game Time                    */
/* ************************************************************************** */
void
Task_game_timer(void* pdata)
{
     284:	defffd04 	addi	sp,sp,-12
     288:	dfc00215 	stw	ra,8(sp)
     28c:	df000115 	stw	fp,4(sp)
     290:	df000104 	addi	fp,sp,4
     294:	e13fff15 	stw	r4,-4(fp)
  debug("Started Game Timer");
     298:	d0a00217 	ldw	r2,-32760(gp)
     29c:	10800317 	ldw	r2,12(r2)
     2a0:	01c01884 	movi	r7,98
     2a4:	018000b4 	movhi	r6,2
     2a8:	31ba8004 	addi	r6,r6,-5632
     2ac:	014000b4 	movhi	r5,2
     2b0:	297a8404 	addi	r5,r5,-5616
     2b4:	1009883a 	mov	r4,r2
     2b8:	00020040 	call	2004 <fprintf>

  for (;;) {
    OSSemPend(SEM_game_timer, 0, &err);
     2bc:	d0a80b17 	ldw	r2,-24532(gp)
     2c0:	d1a80004 	addi	r6,gp,-24576
     2c4:	000b883a 	mov	r5,zero
     2c8:	1009883a 	mov	r4,r2
     2cc:	00187d40 	call	187d4 <OSSemPend>
    game_ss++;
     2d0:	d0a7f317 	ldw	r2,-24628(gp)
     2d4:	10800044 	addi	r2,r2,1
     2d8:	d0a7f315 	stw	r2,-24628(gp)

    if (game_ss >= 60) {
     2dc:	d0a7f317 	ldw	r2,-24628(gp)
     2e0:	10800f10 	cmplti	r2,r2,60
     2e4:	1000041e 	bne	r2,zero,2f8 <Task_game_timer+0x74>
      game_mm++;
     2e8:	d0a7f017 	ldw	r2,-24640(gp)
     2ec:	10800044 	addi	r2,r2,1
     2f0:	d0a7f015 	stw	r2,-24640(gp)
      game_ss = 0;
     2f4:	d027f315 	stw	zero,-24628(gp)
    }

    if (game_mm >= 60) {
     2f8:	d0a7f017 	ldw	r2,-24640(gp)
     2fc:	10800f10 	cmplti	r2,r2,60
     300:	1000041e 	bne	r2,zero,314 <Task_game_timer+0x90>
      game_hh++;
     304:	d0a7ed17 	ldw	r2,-24652(gp)
     308:	10800044 	addi	r2,r2,1
     30c:	d0a7ed15 	stw	r2,-24652(gp)
      game_mm = 0;
     310:	d027f015 	stw	zero,-24640(gp)
    }

    if (game_hh >= 24)
     314:	d0a7ed17 	ldw	r2,-24652(gp)
     318:	10800610 	cmplti	r2,r2,24
     31c:	1000011e 	bne	r2,zero,324 <Task_game_timer+0xa0>
      game_hh, game_mm, game_ss = 0, 0, 0;
     320:	d027f315 	stw	zero,-24628(gp)

    VGA_gametime_display(game_hh, game_mm, game_ss);
     324:	d0a7ed17 	ldw	r2,-24652(gp)
     328:	d0e7f017 	ldw	r3,-24640(gp)
     32c:	d127f317 	ldw	r4,-24628(gp)
     330:	200d883a 	mov	r6,r4
     334:	180b883a 	mov	r5,r3
     338:	1009883a 	mov	r4,r2
     33c:	0001a5c0 	call	1a5c <VGA_gametime_display>

    OSSemPost(SEM_game_timer);
     340:	d0a80b17 	ldw	r2,-24532(gp)
     344:	1009883a 	mov	r4,r2
     348:	0018b4c0 	call	18b4c <OSSemPost>
    OSTimeDlyHMSM(0, 0, 1, 0);
     34c:	000f883a 	mov	r7,zero
     350:	01800044 	movi	r6,1
     354:	000b883a 	mov	r5,zero
     358:	0009883a 	mov	r4,zero
     35c:	001a6dc0 	call	1a6dc <OSTimeDlyHMSM>
  }
     360:	003fd606 	br	2bc <Task_game_timer+0x38>

00000364 <Task_move_basket>:
/* ************************************************************************** */
/*                   Detecting KEY1, KEY2, KEY3, KEY4 Press                   */
/* ************************************************************************** */
void
Task_move_basket(void* pdata)
{
     364:	defffd04 	addi	sp,sp,-12
     368:	dfc00215 	stw	ra,8(sp)
     36c:	df000115 	stw	fp,4(sp)
     370:	df000104 	addi	fp,sp,4
     374:	e13fff15 	stw	r4,-4(fp)
  debug("Started: Task_move_basket");
     378:	d0a00217 	ldw	r2,-32760(gp)
     37c:	10800317 	ldw	r2,12(r2)
     380:	01c02084 	movi	r7,130
     384:	018000b4 	movhi	r6,2
     388:	31ba8004 	addi	r6,r6,-5632
     38c:	014000b4 	movhi	r5,2
     390:	297a8d04 	addi	r5,r5,-5580
     394:	1009883a 	mov	r4,r2
     398:	00020040 	call	2004 <fprintf>

  for (;;) {

    if (right_key_pressed && basket_pos_x < 69) {
     39c:	d0a7e817 	ldw	r2,-24672(gp)
     3a0:	10001126 	beq	r2,zero,3e8 <Task_move_basket+0x84>
     3a4:	d0a7ff17 	ldw	r2,-24580(gp)
     3a8:	10801148 	cmpgei	r2,r2,69
     3ac:	10000e1e 	bne	r2,zero,3e8 <Task_move_basket+0x84>
      debug("MOVE RIGHT");
     3b0:	d0a00217 	ldw	r2,-32760(gp)
     3b4:	10800317 	ldw	r2,12(r2)
     3b8:	01c021c4 	movi	r7,135
     3bc:	018000b4 	movhi	r6,2
     3c0:	31ba8004 	addi	r6,r6,-5632
     3c4:	014000b4 	movhi	r5,2
     3c8:	297a9704 	addi	r5,r5,-5540
     3cc:	1009883a 	mov	r4,r2
     3d0:	00020040 	call	2004 <fprintf>
      VGA_clear_game_row(59);
     3d4:	01000ec4 	movi	r4,59
     3d8:	000119c0 	call	119c <VGA_clear_game_row>
      ++basket_pos_x;
     3dc:	d0a7ff17 	ldw	r2,-24580(gp)
     3e0:	10800044 	addi	r2,r2,1
     3e4:	d0a7ff15 	stw	r2,-24580(gp)
    }

    if (left_key_pressed && basket_pos_x > 0) {
     3e8:	d0a80117 	ldw	r2,-24572(gp)
     3ec:	10001026 	beq	r2,zero,430 <Task_move_basket+0xcc>
     3f0:	d0a7ff17 	ldw	r2,-24580(gp)
     3f4:	00800e0e 	bge	zero,r2,430 <Task_move_basket+0xcc>
      debug("MOVE LEFT");
     3f8:	d0a00217 	ldw	r2,-32760(gp)
     3fc:	10800317 	ldw	r2,12(r2)
     400:	01c02344 	movi	r7,141
     404:	018000b4 	movhi	r6,2
     408:	31ba8004 	addi	r6,r6,-5632
     40c:	014000b4 	movhi	r5,2
     410:	297a9e04 	addi	r5,r5,-5512
     414:	1009883a 	mov	r4,r2
     418:	00020040 	call	2004 <fprintf>
      VGA_clear_game_row(59);
     41c:	01000ec4 	movi	r4,59
     420:	000119c0 	call	119c <VGA_clear_game_row>
      --basket_pos_x;
     424:	d0a7ff17 	ldw	r2,-24580(gp)
     428:	10bfffc4 	addi	r2,r2,-1
     42c:	d0a7ff15 	stw	r2,-24580(gp)
    }

    OSTimeDly(1);
     430:	01000044 	movi	r4,1
     434:	001a5d80 	call	1a5d8 <OSTimeDly>
  }
     438:	003fd806 	br	39c <Task_move_basket+0x38>

0000043c <Task_VGA_init>:
}

/* Initial Display Setup */
void
Task_VGA_init(void* pdata)
{
     43c:	defffd04 	addi	sp,sp,-12
     440:	dfc00215 	stw	ra,8(sp)
     444:	df000115 	stw	fp,4(sp)
     448:	df000104 	addi	fp,sp,4
     44c:	e13fff15 	stw	r4,-4(fp)
  debug("Started VGA initialization task");
     450:	d0a00217 	ldw	r2,-32760(gp)
     454:	10800317 	ldw	r2,12(r2)
     458:	01c02684 	movi	r7,154
     45c:	018000b4 	movhi	r6,2
     460:	31ba8004 	addi	r6,r6,-5632
     464:	014000b4 	movhi	r5,2
     468:	297aa404 	addi	r5,r5,-5488
     46c:	1009883a 	mov	r4,r2
     470:	00020040 	call	2004 <fprintf>

  for (;;) {

    OSSemPend(SEM_VGA_init, 0, &err);
     474:	d0a80a17 	ldw	r2,-24536(gp)
     478:	d1a80004 	addi	r6,gp,-24576
     47c:	000b883a 	mov	r5,zero
     480:	1009883a 	mov	r4,r2
     484:	00187d40 	call	187d4 <OSSemPend>

    debug("Initializing VGA Display");
     488:	d0a00217 	ldw	r2,-32760(gp)
     48c:	10800317 	ldw	r2,12(r2)
     490:	01c02804 	movi	r7,160
     494:	018000b4 	movhi	r6,2
     498:	31ba8004 	addi	r6,r6,-5632
     49c:	014000b4 	movhi	r5,2
     4a0:	297ab004 	addi	r5,r5,-5440
     4a4:	1009883a 	mov	r4,r2
     4a8:	00020040 	call	2004 <fprintf>

    game_hh, game_mm, game_ss = 0, 0, 0;
     4ac:	d027f315 	stw	zero,-24628(gp)
    score = 0;
     4b0:	d027f815 	stw	zero,-24608(gp)

    VGA_clear_screen();
     4b4:	00011040 	call	1104 <VGA_clear_screen>
    VGA_display_sidebar(background_color);
     4b8:	d0a7ec0b 	ldhu	r2,-24656(gp)
     4bc:	10bfffcc 	andi	r2,r2,65535
     4c0:	10a0001c 	xori	r2,r2,32768
     4c4:	10a00004 	addi	r2,r2,-32768
     4c8:	1009883a 	mov	r4,r2
     4cc:	000139c0 	call	139c <VGA_display_sidebar>

    OSTimeDly(1);
     4d0:	01000044 	movi	r4,1
     4d4:	001a5d80 	call	1a5d8 <OSTimeDly>
  }
     4d8:	003fe606 	br	474 <Task_VGA_init+0x38>

000004dc <Task_VGA_char>:
}

/* Display Character using VGA Output */
void
Task_VGA_char(void* pdata)
{
     4dc:	defffd04 	addi	sp,sp,-12
     4e0:	dfc00215 	stw	ra,8(sp)
     4e4:	df000115 	stw	fp,4(sp)
     4e8:	df000104 	addi	fp,sp,4
     4ec:	e13fff15 	stw	r4,-4(fp)
  debug("Started: Task_VGA_char");
     4f0:	d0a00217 	ldw	r2,-32760(gp)
     4f4:	10800317 	ldw	r2,12(r2)
     4f8:	01c02c04 	movi	r7,176
     4fc:	018000b4 	movhi	r6,2
     500:	31ba8004 	addi	r6,r6,-5632
     504:	014000b4 	movhi	r5,2
     508:	297aba04 	addi	r5,r5,-5400
     50c:	1009883a 	mov	r4,r2
     510:	00020040 	call	2004 <fprintf>

  for (;;) {
    VGA_animated_char(basket_pos_x, 59, " ", basket_color);
     514:	d0a7ff17 	ldw	r2,-24580(gp)
     518:	d0e7fb0b 	ldhu	r3,-24596(gp)
     51c:	18ffffcc 	andi	r3,r3,65535
     520:	18e0001c 	xori	r3,r3,32768
     524:	18e00004 	addi	r3,r3,-32768
     528:	180f883a 	mov	r7,r3
     52c:	018000b4 	movhi	r6,2
     530:	31bac404 	addi	r6,r6,-5360
     534:	01400ec4 	movi	r5,59
     538:	1009883a 	mov	r4,r2
     53c:	0000f600 	call	f60 <VGA_animated_char>
    OSTimeDly(1);
     540:	01000044 	movi	r4,1
     544:	001a5d80 	call	1a5d8 <OSTimeDly>
  }
     548:	003ff206 	br	514 <Task_VGA_char+0x38>

0000054c <Task_read_PS2_Keyboard>:
/*                    Reads PS2 Keyboard input periodically                   */
/* ************************************************************************** */

void
Task_read_PS2_Keyboard(void* pdata)
{
     54c:	defffd04 	addi	sp,sp,-12
     550:	dfc00215 	stw	ra,8(sp)
     554:	df000115 	stw	fp,4(sp)
     558:	df000104 	addi	fp,sp,4
     55c:	e13fff15 	stw	r4,-4(fp)
  debug("Started: Read PS2 Keyboard Task");
     560:	d0a00217 	ldw	r2,-32760(gp)
     564:	10800317 	ldw	r2,12(r2)
     568:	01c02fc4 	movi	r7,191
     56c:	018000b4 	movhi	r6,2
     570:	31ba8004 	addi	r6,r6,-5632
     574:	014000b4 	movhi	r5,2
     578:	297ac504 	addi	r5,r5,-5356
     57c:	1009883a 	mov	r4,r2
     580:	00020040 	call	2004 <fprintf>

  for (;;) {
    OSSemPend(SEM_KEY_press, 0, &err);
     584:	d0a7f517 	ldw	r2,-24620(gp)
     588:	d1a80004 	addi	r6,gp,-24576
     58c:	000b883a 	mov	r5,zero
     590:	1009883a 	mov	r4,r2
     594:	00187d40 	call	187d4 <OSSemPend>
    read_PS2_KeyboardInput();
     598:	0001d900 	call	1d90 <read_PS2_KeyboardInput>
    OSSemPost(SEM_KEY_press);
     59c:	d0a7f517 	ldw	r2,-24620(gp)
     5a0:	1009883a 	mov	r4,r2
     5a4:	0018b4c0 	call	18b4c <OSSemPost>
    OSTimeDly(1);
     5a8:	01000044 	movi	r4,1
     5ac:	001a5d80 	call	1a5d8 <OSTimeDly>
  }
     5b0:	003ff406 	br	584 <Task_read_PS2_Keyboard+0x38>

000005b4 <Task_falling_blocks>:
/* ************************************************************************** */
/*           Generates Falling Blocks with Random Position and Value          */
/* ************************************************************************** */
void
Task_falling_blocks(void* pdata)
{
     5b4:	defffb04 	addi	sp,sp,-20
     5b8:	dfc00415 	stw	ra,16(sp)
     5bc:	df000315 	stw	fp,12(sp)
     5c0:	df000304 	addi	fp,sp,12
     5c4:	e13fff15 	stw	r4,-4(fp)
  debug("Started: Falling Block");
     5c8:	d0a00217 	ldw	r2,-32760(gp)
     5cc:	10800317 	ldw	r2,12(r2)
     5d0:	01c033c4 	movi	r7,207
     5d4:	018000b4 	movhi	r6,2
     5d8:	31ba8004 	addi	r6,r6,-5632
     5dc:	014000b4 	movhi	r5,2
     5e0:	297ad104 	addi	r5,r5,-5308
     5e4:	1009883a 	mov	r4,r2
     5e8:	00020040 	call	2004 <fprintf>

  for (;;) {

    OSSemPend(SEM_falling_blocks, 0, &err);
     5ec:	d0a7e517 	ldw	r2,-24684(gp)
     5f0:	d1a80004 	addi	r6,gp,-24576
     5f4:	000b883a 	mov	r5,zero
     5f8:	1009883a 	mov	r4,r2
     5fc:	00187d40 	call	187d4 <OSSemPend>

    if (pos1_y >= 60) {
     600:	d0a80217 	ldw	r2,-24568(gp)
     604:	10800f10 	cmplti	r2,r2,60
     608:	1000371e 	bne	r2,zero,6e8 <Task_falling_blocks+0x134>

      int lower = 0;
     60c:	e03ffd15 	stw	zero,-12(fp)
      int upper = GAMESCREEN_WIDTH - 1;
     610:	00801144 	movi	r2,69
     614:	e0bffe15 	stw	r2,-8(fp)

      /* Assuming the basket's velocity is same as falling block */
      if (basket_pos_x - lower > GAMESCREEN_HEIGHT)
     618:	d0e7ff17 	ldw	r3,-24580(gp)
     61c:	e0bffd17 	ldw	r2,-12(fp)
     620:	1885c83a 	sub	r2,r3,r2
     624:	10800f50 	cmplti	r2,r2,61
     628:	1000031e 	bne	r2,zero,638 <Task_falling_blocks+0x84>
        lower = basket_pos_x - GAMESCREEN_HEIGHT;
     62c:	d0a7ff17 	ldw	r2,-24580(gp)
     630:	10bff104 	addi	r2,r2,-60
     634:	e0bffd15 	stw	r2,-12(fp)

      if (upper - basket_pos_x > GAMESCREEN_HEIGHT)
     638:	d0a7ff17 	ldw	r2,-24580(gp)
     63c:	e0fffe17 	ldw	r3,-8(fp)
     640:	1885c83a 	sub	r2,r3,r2
     644:	10800f50 	cmplti	r2,r2,61
     648:	1000031e 	bne	r2,zero,658 <Task_falling_blocks+0xa4>
        upper = basket_pos_x + GAMESCREEN_HEIGHT;
     64c:	d0a7ff17 	ldw	r2,-24580(gp)
     650:	10800f04 	addi	r2,r2,60
     654:	e0bffe15 	stw	r2,-8(fp)

      pos1_x = (rand() % (upper - lower + 1)) + lower;
     658:	00020400 	call	2040 <rand>
     65c:	1007883a 	mov	r3,r2
     660:	e13ffe17 	ldw	r4,-8(fp)
     664:	e0bffd17 	ldw	r2,-12(fp)
     668:	2085c83a 	sub	r2,r4,r2
     66c:	10800044 	addi	r2,r2,1
     670:	1889283a 	div	r4,r3,r2
     674:	2085383a 	mul	r2,r4,r2
     678:	1887c83a 	sub	r3,r3,r2
     67c:	e0bffd17 	ldw	r2,-12(fp)
     680:	1885883a 	add	r2,r3,r2
     684:	d0a7e615 	stw	r2,-24680(gp)
      pos1_y = 0;
     688:	d0280215 	stw	zero,-24568(gp)

      upper = 9;
     68c:	00800244 	movi	r2,9
     690:	e0bffe15 	stw	r2,-8(fp)
      lower = 1;
     694:	00800044 	movi	r2,1
     698:	e0bffd15 	stw	r2,-12(fp)

      pos1_val = (rand() % (upper - lower + 1)) + lower;
     69c:	00020400 	call	2040 <rand>
     6a0:	1007883a 	mov	r3,r2
     6a4:	e13ffe17 	ldw	r4,-8(fp)
     6a8:	e0bffd17 	ldw	r2,-12(fp)
     6ac:	2085c83a 	sub	r2,r4,r2
     6b0:	10800044 	addi	r2,r2,1
     6b4:	1889283a 	div	r4,r3,r2
     6b8:	2085383a 	mul	r2,r4,r2
     6bc:	1887c83a 	sub	r3,r3,r2
     6c0:	e0bffd17 	ldw	r2,-12(fp)
     6c4:	1885883a 	add	r2,r3,r2
     6c8:	d0a80815 	stw	r2,-24544(gp)
      snprintf(text_disp, 2, "%d\0", pos1_val);
     6cc:	d0a80817 	ldw	r2,-24544(gp)
     6d0:	100f883a 	mov	r7,r2
     6d4:	018000b4 	movhi	r6,2
     6d8:	31badb04 	addi	r6,r6,-5268
     6dc:	01400084 	movi	r5,2
     6e0:	d1280d04 	addi	r4,gp,-24524
     6e4:	00021780 	call	2178 <snprintf>
    }

    VGA_clear_game_row(pos1_y);
     6e8:	d0a80217 	ldw	r2,-24568(gp)
     6ec:	1009883a 	mov	r4,r2
     6f0:	000119c0 	call	119c <VGA_clear_game_row>
    pos1_y++;
     6f4:	d0a80217 	ldw	r2,-24568(gp)
     6f8:	10800044 	addi	r2,r2,1
     6fc:	d0a80215 	stw	r2,-24568(gp)

    VGA_animated_char(pos1_x, pos1_y, text_disp, background_color);
     700:	d0a7e617 	ldw	r2,-24680(gp)
     704:	d0e80217 	ldw	r3,-24568(gp)
     708:	d127ec0b 	ldhu	r4,-24656(gp)
     70c:	213fffcc 	andi	r4,r4,65535
     710:	2120001c 	xori	r4,r4,32768
     714:	21200004 	addi	r4,r4,-32768
     718:	200f883a 	mov	r7,r4
     71c:	d1a80d04 	addi	r6,gp,-24524
     720:	180b883a 	mov	r5,r3
     724:	1009883a 	mov	r4,r2
     728:	0000f600 	call	f60 <VGA_animated_char>

    if (pos1_y == 59 && basket_pos_x == pos1_x) {
     72c:	d0a80217 	ldw	r2,-24568(gp)
     730:	10800ed8 	cmpnei	r2,r2,59
     734:	10000a1e 	bne	r2,zero,760 <Task_falling_blocks+0x1ac>
     738:	d0e7ff17 	ldw	r3,-24580(gp)
     73c:	d0a7e617 	ldw	r2,-24680(gp)
     740:	1880071e 	bne	r3,r2,760 <Task_falling_blocks+0x1ac>
      score += pos1_val;
     744:	d0e7f817 	ldw	r3,-24608(gp)
     748:	d0a80817 	ldw	r2,-24544(gp)
     74c:	1885883a 	add	r2,r3,r2
     750:	d0a7f815 	stw	r2,-24608(gp)
      VGA_display_score(score);
     754:	d0a7f817 	ldw	r2,-24608(gp)
     758:	1009883a 	mov	r4,r2
     75c:	0001bec0 	call	1bec <VGA_display_score>
    }

    OSTimeDly(1);
     760:	01000044 	movi	r4,1
     764:	001a5d80 	call	1a5d8 <OSTimeDly>
  }
     768:	003fa006 	br	5ec <Task_falling_blocks+0x38>

0000076c <Task_GameState_controller>:
}

void
Task_GameState_controller(void* pdata)
{
     76c:	defffb04 	addi	sp,sp,-20
     770:	dfc00415 	stw	ra,16(sp)
     774:	df000315 	stw	fp,12(sp)
     778:	dc000215 	stw	r16,8(sp)
     77c:	df000304 	addi	fp,sp,12
     780:	e13ffe15 	stw	r4,-8(fp)
  debug("Started Game State controller task");
     784:	d0a00217 	ldw	r2,-32760(gp)
     788:	10800317 	ldw	r2,12(r2)
     78c:	01c03f04 	movi	r7,252
     790:	018000b4 	movhi	r6,2
     794:	31ba8004 	addi	r6,r6,-5632
     798:	014000b4 	movhi	r5,2
     79c:	297adc04 	addi	r5,r5,-5264
     7a0:	1009883a 	mov	r4,r2
     7a4:	00020040 	call	2004 <fprintf>

  for (;;) {

    /************************ Pre State Transition *************************/

    if (esc_key_pressed && game_state == PAUSE) {
     7a8:	d0a80417 	ldw	r2,-24560(gp)
     7ac:	10000726 	beq	r2,zero,7cc <Task_GameState_controller+0x60>
     7b0:	d0a7f217 	ldw	r2,-24632(gp)
     7b4:	10800098 	cmpnei	r2,r2,2
     7b8:	1000041e 	bne	r2,zero,7cc <Task_GameState_controller+0x60>
      OSSemPost(SEM_VGA_init);
     7bc:	d0a80a17 	ldw	r2,-24536(gp)
     7c0:	1009883a 	mov	r4,r2
     7c4:	0018b4c0 	call	18b4c <OSSemPost>
      game_state = INIT;
     7c8:	d027f215 	stw	zero,-24632(gp)
    }

    if ((enter_key_pressed && game_state == INIT) ||
     7cc:	d0a7eb17 	ldw	r2,-24660(gp)
     7d0:	10000226 	beq	r2,zero,7dc <Task_GameState_controller+0x70>
     7d4:	d0a7f217 	ldw	r2,-24632(gp)
     7d8:	10000726 	beq	r2,zero,7f8 <Task_GameState_controller+0x8c>
        (any_key_pressed && !esc_key_pressed && game_state == PAUSE))
     7dc:	d0a7fd17 	ldw	r2,-24588(gp)
    if (esc_key_pressed && game_state == PAUSE) {
      OSSemPost(SEM_VGA_init);
      game_state = INIT;
    }

    if ((enter_key_pressed && game_state == INIT) ||
     7e0:	10000726 	beq	r2,zero,800 <Task_GameState_controller+0x94>
        (any_key_pressed && !esc_key_pressed && game_state == PAUSE))
     7e4:	d0a80417 	ldw	r2,-24560(gp)
     7e8:	1000051e 	bne	r2,zero,800 <Task_GameState_controller+0x94>
     7ec:	d0a7f217 	ldw	r2,-24632(gp)
     7f0:	10800098 	cmpnei	r2,r2,2
     7f4:	1000021e 	bne	r2,zero,800 <Task_GameState_controller+0x94>
      game_state = PLAY;
     7f8:	00800044 	movi	r2,1
     7fc:	d0a7f215 	stw	r2,-24632(gp)

    if (esc_key_pressed && game_state == PLAY)
     800:	d0a80417 	ldw	r2,-24560(gp)
     804:	10000526 	beq	r2,zero,81c <Task_GameState_controller+0xb0>
     808:	d0a7f217 	ldw	r2,-24632(gp)
     80c:	10800058 	cmpnei	r2,r2,1
     810:	1000021e 	bne	r2,zero,81c <Task_GameState_controller+0xb0>
      game_state = PAUSE;
     814:	00800084 	movi	r2,2
     818:	d0a7f215 	stw	r2,-24632(gp)

    /************** Handling Tasks post state transition **************/

    if (game_state == PLAY) {
     81c:	d0a7f217 	ldw	r2,-24632(gp)
     820:	10800058 	cmpnei	r2,r2,1
     824:	1000061e 	bne	r2,zero,840 <Task_GameState_controller+0xd4>
      OSSemPost(SEM_falling_blocks);
     828:	d0a7e517 	ldw	r2,-24684(gp)
     82c:	1009883a 	mov	r4,r2
     830:	0018b4c0 	call	18b4c <OSSemPost>
      OSSemPost(SEM_game_timer);
     834:	d0a80b17 	ldw	r2,-24532(gp)
     838:	1009883a 	mov	r4,r2
     83c:	0018b4c0 	call	18b4c <OSSemPost>
    }

    debug("Game State: %s", get_State_name(game_state));
     840:	d0a00217 	ldw	r2,-32760(gp)
     844:	14000317 	ldw	r16,12(r2)
     848:	d0a7f217 	ldw	r2,-24632(gp)
     84c:	1009883a 	mov	r4,r2
     850:	0000c880 	call	c88 <get_State_name>
     854:	d8800015 	stw	r2,0(sp)
     858:	01c04544 	movi	r7,277
     85c:	018000b4 	movhi	r6,2
     860:	31ba8004 	addi	r6,r6,-5632
     864:	014000b4 	movhi	r5,2
     868:	297ae904 	addi	r5,r5,-5212
     86c:	8009883a 	mov	r4,r16
     870:	00020040 	call	2004 <fprintf>
    OSTimeDly(1);
     874:	01000044 	movi	r4,1
     878:	001a5d80 	call	1a5d8 <OSTimeDly>
  }
     87c:	003fca06 	br	7a8 <Task_GameState_controller+0x3c>

00000880 <main>:
}

/* The main function creates two task and starts multi-tasking */
int
main(void)
{
     880:	defff504 	addi	sp,sp,-44
     884:	dfc00a15 	stw	ra,40(sp)
     888:	df000915 	stw	fp,36(sp)
     88c:	dc000815 	stw	r16,32(sp)
     890:	df000904 	addi	fp,sp,36

  /****************************** Initialization *****************************/

  score = 0;
     894:	d027f815 	stw	zero,-24608(gp)
  game_hh, game_mm, game_ss = 0, 0, 0;
     898:	d027f315 	stw	zero,-24628(gp)
  KEY0_flag, KEY1_flag, KEY2_flag, KEY3_flag = 0, 0, 0, 0;
     89c:	d0280315 	stw	zero,-24564(gp)

  any_key_pressed = 0;
     8a0:	d027fd15 	stw	zero,-24588(gp)

  left_key_pressed = 0;
     8a4:	d0280115 	stw	zero,-24572(gp)
  right_key_pressed = 0;
     8a8:	d027e815 	stw	zero,-24672(gp)

  esc_key_pressed = 0;
     8ac:	d0280415 	stw	zero,-24560(gp)
  enter_key_pressed = 0;
     8b0:	d027eb15 	stw	zero,-24660(gp)

  game_state = INIT;
     8b4:	d027f215 	stw	zero,-24632(gp)

  /************************* Semaphores Initialization **********************/

  SEM_VGA_init = OSSemCreate(1);
     8b8:	01000044 	movi	r4,1
     8bc:	00184bc0 	call	184bc <OSSemCreate>
     8c0:	d0a80a15 	stw	r2,-24536(gp)
  SEM_read_KEYs = OSSemCreate(1);
     8c4:	01000044 	movi	r4,1
     8c8:	00184bc0 	call	184bc <OSSemCreate>
     8cc:	d0a7ee15 	stw	r2,-24648(gp)
  SEM_KEY_press = OSSemCreate(1);
     8d0:	01000044 	movi	r4,1
     8d4:	00184bc0 	call	184bc <OSSemCreate>
     8d8:	d0a7f515 	stw	r2,-24620(gp)
  SEM_state_transition = OSSemCreate(1);
     8dc:	01000044 	movi	r4,1
     8e0:	00184bc0 	call	184bc <OSSemCreate>
     8e4:	d0a80c15 	stw	r2,-24528(gp)

  SEM_game_timer = OSSemCreate(0);
     8e8:	0009883a 	mov	r4,zero
     8ec:	00184bc0 	call	184bc <OSSemCreate>
     8f0:	d0a80b15 	stw	r2,-24532(gp)
  SEM_falling_blocks = OSSemCreate(0);
     8f4:	0009883a 	mov	r4,zero
     8f8:	00184bc0 	call	184bc <OSSemCreate>
     8fc:	d0a7e515 	stw	r2,-24684(gp)
  SEM_moving_basket = OSSemCreate(0);
     900:	0009883a 	mov	r4,zero
     904:	00184bc0 	call	184bc <OSSemCreate>
     908:	d0a80915 	stw	r2,-24540(gp)

  /**************************** VGA Display Setup ***************************/

  video_resolution = (int*)(PIXEL_BUF_CTRL_BASE + 0x8);
     90c:	00bfc834 	movhi	r2,65312
     910:	108c0a04 	addi	r2,r2,12328
     914:	d0a7e415 	stw	r2,-24688(gp)
  rgb_status = (int*)(RGB_RESAMPLER_BASE);
     918:	00bfc834 	movhi	r2,65312
     91c:	108c0404 	addi	r2,r2,12304
     920:	d0a80e15 	stw	r2,-24520(gp)

  screen_x = *video_resolution & 0xFFFF;
     924:	d0a7e417 	ldw	r2,-24688(gp)
     928:	10800017 	ldw	r2,0(r2)
     92c:	10bfffcc 	andi	r2,r2,65535
     930:	d0a7ea15 	stw	r2,-24664(gp)
  screen_y = (*video_resolution >> 16) & 0xFFFF;
     934:	d0a7e417 	ldw	r2,-24688(gp)
     938:	10800017 	ldw	r2,0(r2)
     93c:	1004d43a 	srli	r2,r2,16
     940:	d0a7fc15 	stw	r2,-24592(gp)

  /* initially basket positioned at the center of screen */
  basket_pos_x = 40;
     944:	00800a04 	movi	r2,40
     948:	d0a7ff15 	stw	r2,-24580(gp)

  /* letter initially positioning falling box randomly */
  int lower = 0;
     94c:	e03ffc15 	stw	zero,-16(fp)
  int upper = 69;
     950:	00801144 	movi	r2,69
     954:	e0bffd15 	stw	r2,-12(fp)

  pos1_x = (rand() % (upper - lower + 1)) + lower;
     958:	00020400 	call	2040 <rand>
     95c:	1007883a 	mov	r3,r2
     960:	e13ffd17 	ldw	r4,-12(fp)
     964:	e0bffc17 	ldw	r2,-16(fp)
     968:	2085c83a 	sub	r2,r4,r2
     96c:	10800044 	addi	r2,r2,1
     970:	1889283a 	div	r4,r3,r2
     974:	2085383a 	mul	r2,r4,r2
     978:	1887c83a 	sub	r3,r3,r2
     97c:	e0bffc17 	ldw	r2,-16(fp)
     980:	1885883a 	add	r2,r3,r2
     984:	d0a7e615 	stw	r2,-24680(gp)
  pos1_y = 0;
     988:	d0280215 	stw	zero,-24568(gp)

  upper = 9;
     98c:	00800244 	movi	r2,9
     990:	e0bffd15 	stw	r2,-12(fp)
  lower = 1;
     994:	00800044 	movi	r2,1
     998:	e0bffc15 	stw	r2,-16(fp)

  pos1_val = (rand() % (upper - lower + 1)) + lower;
     99c:	00020400 	call	2040 <rand>
     9a0:	1007883a 	mov	r3,r2
     9a4:	e13ffd17 	ldw	r4,-12(fp)
     9a8:	e0bffc17 	ldw	r2,-16(fp)
     9ac:	2085c83a 	sub	r2,r4,r2
     9b0:	10800044 	addi	r2,r2,1
     9b4:	1889283a 	div	r4,r3,r2
     9b8:	2085383a 	mul	r2,r4,r2
     9bc:	1887c83a 	sub	r3,r3,r2
     9c0:	e0bffc17 	ldw	r2,-16(fp)
     9c4:	1885883a 	add	r2,r3,r2
     9c8:	d0a80815 	stw	r2,-24544(gp)
  snprintf(text_disp, 2, "%d\0", pos1_val);
     9cc:	d0a80817 	ldw	r2,-24544(gp)
     9d0:	100f883a 	mov	r7,r2
     9d4:	018000b4 	movhi	r6,2
     9d8:	31badb04 	addi	r6,r6,-5268
     9dc:	01400084 	movi	r5,2
     9e0:	d1280d04 	addi	r4,gp,-24524
     9e4:	00021780 	call	2178 <snprintf>

  int db = get_data_bits(*rgb_status & 0x3F);
     9e8:	d0a80e17 	ldw	r2,-24520(gp)
     9ec:	10800017 	ldw	r2,0(r2)
     9f0:	10800fcc 	andi	r2,r2,63
     9f4:	1009883a 	mov	r4,r2
     9f8:	000120c0 	call	120c <get_data_bits>
     9fc:	e0bffe15 	stw	r2,-8(fp)

  /* check if resolution is smaller than the standard 320 x 240 */
  res_offset = (screen_x == 160) ? 1 : 0;
     a00:	d0a7ea17 	ldw	r2,-24664(gp)
     a04:	10802820 	cmpeqi	r2,r2,160
     a08:	10803fcc 	andi	r2,r2,255
     a0c:	d0a7fa15 	stw	r2,-24600(gp)

  /* check if number of data bits is less than the standard 16-bits */
  col_offset = (db == 8) ? 1 : 0;
     a10:	e0bffe17 	ldw	r2,-8(fp)
     a14:	10800220 	cmpeqi	r2,r2,8
     a18:	10803fcc 	andi	r2,r2,255
     a1c:	d0a7f115 	stw	r2,-24636(gp)

  /* update color */
  background_color = resample_rgb(db, INTEL_RED);
     a20:	01403db4 	movhi	r5,246
     a24:	294a46c4 	addi	r5,r5,10523
     a28:	e13ffe17 	ldw	r4,-8(fp)
     a2c:	000104c0 	call	104c <resample_rgb>
     a30:	d0a7ec0d 	sth	r2,-24656(gp)
  basket_color = resample_rgb(db, INTEL_LIGHT_YELLOW);
     a34:	01404034 	movhi	r5,256
     a38:	29638e84 	addi	r5,r5,-29126
     a3c:	e13ffe17 	ldw	r4,-8(fp)
     a40:	000104c0 	call	104c <resample_rgb>
     a44:	d0a7fb0d 	sth	r2,-24596(gp)

  debug("Game State: %s", get_State_name(game_state));
     a48:	d0a00217 	ldw	r2,-32760(gp)
     a4c:	14000317 	ldw	r16,12(r2)
     a50:	d0a7f217 	ldw	r2,-24632(gp)
     a54:	1009883a 	mov	r4,r2
     a58:	0000c880 	call	c88 <get_State_name>
     a5c:	d8800015 	stw	r2,0(sp)
     a60:	01c05784 	movi	r7,350
     a64:	018000b4 	movhi	r6,2
     a68:	31ba8004 	addi	r6,r6,-5632
     a6c:	014000b4 	movhi	r5,2
     a70:	297ae904 	addi	r5,r5,-5212
     a74:	8009883a 	mov	r4,r16
     a78:	00020040 	call	2004 <fprintf>

  VGA_animated_char(pos1_x, pos1_y, text_disp, background_color);
     a7c:	d0a7e617 	ldw	r2,-24680(gp)
     a80:	d0e80217 	ldw	r3,-24568(gp)
     a84:	d127ec0b 	ldhu	r4,-24656(gp)
     a88:	213fffcc 	andi	r4,r4,65535
     a8c:	2120001c 	xori	r4,r4,32768
     a90:	21200004 	addi	r4,r4,-32768
     a94:	200f883a 	mov	r7,r4
     a98:	d1a80d04 	addi	r6,gp,-24524
     a9c:	180b883a 	mov	r5,r3
     aa0:	1009883a 	mov	r4,r2
     aa4:	0000f600 	call	f60 <VGA_animated_char>

  OSTaskCreateExt(Task_VGA_init,
     aa8:	d8000415 	stw	zero,16(sp)
     aac:	d8000315 	stw	zero,12(sp)
     ab0:	00820004 	movi	r2,2048
     ab4:	d8800215 	stw	r2,8(sp)
     ab8:	008000b4 	movhi	r2,2
     abc:	108e7c04 	addi	r2,r2,14832
     ac0:	d8800115 	stw	r2,4(sp)
     ac4:	00800044 	movi	r2,1
     ac8:	d8800015 	stw	r2,0(sp)
     acc:	01c00044 	movi	r7,1
     ad0:	018000b4 	movhi	r6,2
     ad4:	31967b04 	addi	r6,r6,23020
     ad8:	000b883a 	mov	r5,zero
     adc:	01000034 	movhi	r4,0
     ae0:	21010f04 	addi	r4,r4,1084
     ae4:	00195080 	call	19508 <OSTaskCreateExt>
                  task_vga_init_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(Task_read_PS2_Keyboard,
     ae8:	d8000415 	stw	zero,16(sp)
     aec:	d8000315 	stw	zero,12(sp)
     af0:	00820004 	movi	r2,2048
     af4:	d8800215 	stw	r2,8(sp)
     af8:	008000f4 	movhi	r2,3
     afc:	10ae7c04 	addi	r2,r2,-17936
     b00:	d8800115 	stw	r2,4(sp)
     b04:	008001c4 	movi	r2,7
     b08:	d8800015 	stw	r2,0(sp)
     b0c:	01c001c4 	movi	r7,7
     b10:	018000f4 	movhi	r6,3
     b14:	31b67b04 	addi	r6,r6,-9748
     b18:	000b883a 	mov	r5,zero
     b1c:	01000034 	movhi	r4,0
     b20:	21015304 	addi	r4,r4,1356
     b24:	00195080 	call	19508 <OSTaskCreateExt>
                  task_ps2_keyboard_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(Task_game_timer,
     b28:	d8000415 	stw	zero,16(sp)
     b2c:	d8000315 	stw	zero,12(sp)
     b30:	00820004 	movi	r2,2048
     b34:	d8800215 	stw	r2,8(sp)
     b38:	008000f4 	movhi	r2,3
     b3c:	10b67c04 	addi	r2,r2,-9744
     b40:	d8800115 	stw	r2,4(sp)
     b44:	00800184 	movi	r2,6
     b48:	d8800015 	stw	r2,0(sp)
     b4c:	01c00184 	movi	r7,6
     b50:	018000f4 	movhi	r6,3
     b54:	31be7b04 	addi	r6,r6,-1556
     b58:	000b883a 	mov	r5,zero
     b5c:	01000034 	movhi	r4,0
     b60:	2100a104 	addi	r4,r4,644
     b64:	00195080 	call	19508 <OSTaskCreateExt>
                  task_game_timer_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(Task_GameState_controller,
     b68:	d8000415 	stw	zero,16(sp)
     b6c:	d8000315 	stw	zero,12(sp)
     b70:	00820004 	movi	r2,2048
     b74:	d8800215 	stw	r2,8(sp)
     b78:	008000f4 	movhi	r2,3
     b7c:	10be7c04 	addi	r2,r2,-1552
     b80:	d8800115 	stw	r2,4(sp)
     b84:	008000c4 	movi	r2,3
     b88:	d8800015 	stw	r2,0(sp)
     b8c:	01c000c4 	movi	r7,3
     b90:	018000f4 	movhi	r6,3
     b94:	31867b04 	addi	r6,r6,6636
     b98:	000b883a 	mov	r5,zero
     b9c:	01000034 	movhi	r4,0
     ba0:	2101db04 	addi	r4,r4,1900
     ba4:	00195080 	call	19508 <OSTaskCreateExt>
                  task_state_controller_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(Task_move_basket,
     ba8:	d8000415 	stw	zero,16(sp)
     bac:	d8000315 	stw	zero,12(sp)
     bb0:	00820004 	movi	r2,2048
     bb4:	d8800215 	stw	r2,8(sp)
     bb8:	008000f4 	movhi	r2,3
     bbc:	10a67c04 	addi	r2,r2,-26128
     bc0:	d8800115 	stw	r2,4(sp)
     bc4:	00800084 	movi	r2,2
     bc8:	d8800015 	stw	r2,0(sp)
     bcc:	01c00084 	movi	r7,2
     bd0:	018000f4 	movhi	r6,3
     bd4:	31ae7b04 	addi	r6,r6,-17940
     bd8:	000b883a 	mov	r5,zero
     bdc:	01000034 	movhi	r4,0
     be0:	2100d904 	addi	r4,r4,868
     be4:	00195080 	call	19508 <OSTaskCreateExt>
                  task_move_basket_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(Task_VGA_char,
     be8:	d8000415 	stw	zero,16(sp)
     bec:	d8000315 	stw	zero,12(sp)
     bf0:	00820004 	movi	r2,2048
     bf4:	d8800215 	stw	r2,8(sp)
     bf8:	008000b4 	movhi	r2,2
     bfc:	10967c04 	addi	r2,r2,23024
     c00:	d8800115 	stw	r2,4(sp)
     c04:	00800144 	movi	r2,5
     c08:	d8800015 	stw	r2,0(sp)
     c0c:	01c00144 	movi	r7,5
     c10:	018000b4 	movhi	r6,2
     c14:	319e7b04 	addi	r6,r6,31212
     c18:	000b883a 	mov	r5,zero
     c1c:	01000034 	movhi	r4,0
     c20:	21013704 	addi	r4,r4,1244
     c24:	00195080 	call	19508 <OSTaskCreateExt>
                  task_disp_vga_char_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(Task_falling_blocks,
     c28:	d8000415 	stw	zero,16(sp)
     c2c:	d8000315 	stw	zero,12(sp)
     c30:	00820004 	movi	r2,2048
     c34:	d8800215 	stw	r2,8(sp)
     c38:	008000b4 	movhi	r2,2
     c3c:	109e7c04 	addi	r2,r2,31216
     c40:	d8800115 	stw	r2,4(sp)
     c44:	00800104 	movi	r2,4
     c48:	d8800015 	stw	r2,0(sp)
     c4c:	01c00104 	movi	r7,4
     c50:	018000f4 	movhi	r6,3
     c54:	31a67b04 	addi	r6,r6,-26132
     c58:	000b883a 	mov	r5,zero
     c5c:	01000034 	movhi	r4,0
     c60:	21016d04 	addi	r4,r4,1460
     c64:	00195080 	call	19508 <OSTaskCreateExt>
                  task_falling_blocks,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSStart();
     c68:	0013e600 	call	13e60 <OSStart>
  return 0;
     c6c:	0005883a 	mov	r2,zero
}
     c70:	e6ffff04 	addi	sp,fp,-4
     c74:	dfc00217 	ldw	ra,8(sp)
     c78:	df000117 	ldw	fp,4(sp)
     c7c:	dc000017 	ldw	r16,0(sp)
     c80:	dec00304 	addi	sp,sp,12
     c84:	f800283a 	ret

00000c88 <get_State_name>:
/* ************************************************************************** */
/*                                State Tracker                               */
/* ************************************************************************** */
const char*
get_State_name(Game_State_t game_state)
{
     c88:	defffe04 	addi	sp,sp,-8
     c8c:	df000115 	stw	fp,4(sp)
     c90:	df000104 	addi	fp,sp,4
     c94:	e13fff15 	stw	r4,-4(fp)
  switch (game_state) {
     c98:	e0bfff17 	ldw	r2,-4(fp)
     c9c:	10c00060 	cmpeqi	r3,r2,1
     ca0:	1800071e 	bne	r3,zero,cc0 <get_State_name+0x38>
     ca4:	0080032e 	bgeu	zero,r2,cb4 <get_State_name+0x2c>
     ca8:	108000a0 	cmpeqi	r2,r2,2
     cac:	1000071e 	bne	r2,zero,ccc <get_State_name+0x44>
     cb0:	00000906 	br	cd8 <get_State_name+0x50>
    case INIT:
      return "INIT";
     cb4:	008000b4 	movhi	r2,2
     cb8:	10baf104 	addi	r2,r2,-5180
     cbc:	00000806 	br	ce0 <get_State_name+0x58>
    case PLAY:
      return "PLAY";
     cc0:	008000b4 	movhi	r2,2
     cc4:	10baf304 	addi	r2,r2,-5172
     cc8:	00000506 	br	ce0 <get_State_name+0x58>
    case PAUSE:
      return "PAUSE";
     ccc:	008000b4 	movhi	r2,2
     cd0:	10baf504 	addi	r2,r2,-5164
     cd4:	00000206 	br	ce0 <get_State_name+0x58>
    default:
      return "INVALID";
     cd8:	008000b4 	movhi	r2,2
     cdc:	10baf704 	addi	r2,r2,-5156
  }
}
     ce0:	e037883a 	mov	sp,fp
     ce4:	df000017 	ldw	fp,0(sp)
     ce8:	dec00104 	addi	sp,sp,4
     cec:	f800283a 	ret

00000cf0 <VGA_text>:
/*******************************************************************************
 * Subroutine to send a string of text to the video monitor
 ******************************************************************************/
void
VGA_text(int x, int y, char* text_ptr)
{
     cf0:	defffa04 	addi	sp,sp,-24
     cf4:	df000515 	stw	fp,20(sp)
     cf8:	df000504 	addi	fp,sp,20
     cfc:	e13ffd15 	stw	r4,-12(fp)
     d00:	e17ffe15 	stw	r5,-8(fp)
     d04:	e1bfff15 	stw	r6,-4(fp)
  int offset;
  volatile char* char_buf = (char*)FPGA_CHAR_BASE; // video character buffer
     d08:	00824034 	movhi	r2,2304
     d0c:	e0bffc15 	stw	r2,-16(fp)

  /* assume that the text string fits on one line */
  offset = (y << 7) + x;
     d10:	e0bffe17 	ldw	r2,-8(fp)
     d14:	100691fa 	slli	r3,r2,7
     d18:	e0bffd17 	ldw	r2,-12(fp)
     d1c:	1885883a 	add	r2,r3,r2
     d20:	e0bffb15 	stw	r2,-20(fp)
  while (*(text_ptr)) {
     d24:	00000c06 	br	d58 <VGA_text+0x68>
    *(char_buf + offset) = *(text_ptr); // write to the character buffer
     d28:	e0bffb17 	ldw	r2,-20(fp)
     d2c:	e0fffc17 	ldw	r3,-16(fp)
     d30:	1885883a 	add	r2,r3,r2
     d34:	e0ffff17 	ldw	r3,-4(fp)
     d38:	18c00003 	ldbu	r3,0(r3)
     d3c:	10c00005 	stb	r3,0(r2)
    ++text_ptr;
     d40:	e0bfff17 	ldw	r2,-4(fp)
     d44:	10800044 	addi	r2,r2,1
     d48:	e0bfff15 	stw	r2,-4(fp)
    ++offset;
     d4c:	e0bffb17 	ldw	r2,-20(fp)
     d50:	10800044 	addi	r2,r2,1
     d54:	e0bffb15 	stw	r2,-20(fp)
  int offset;
  volatile char* char_buf = (char*)FPGA_CHAR_BASE; // video character buffer

  /* assume that the text string fits on one line */
  offset = (y << 7) + x;
  while (*(text_ptr)) {
     d58:	e0bfff17 	ldw	r2,-4(fp)
     d5c:	10800003 	ldbu	r2,0(r2)
     d60:	10803fcc 	andi	r2,r2,255
     d64:	1080201c 	xori	r2,r2,128
     d68:	10bfe004 	addi	r2,r2,-128
     d6c:	103fee1e 	bne	r2,zero,d28 <VGA_text+0x38>
    *(char_buf + offset) = *(text_ptr); // write to the character buffer
    ++text_ptr;
    ++offset;
  }
}
     d70:	0001883a 	nop
     d74:	e037883a 	mov	sp,fp
     d78:	df000017 	ldw	fp,0(sp)
     d7c:	dec00104 	addi	sp,sp,4
     d80:	f800283a 	ret

00000d84 <VGA_box>:
/*        Takes in points assuming 320x240 resolution and adjusts based on    */
/*        differences in resolution and color bits.                           */
/* ************************************************************************** */
void
VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
     d84:	defff404 	addi	sp,sp,-48
     d88:	df000b15 	stw	fp,44(sp)
     d8c:	df000b04 	addi	fp,sp,44
     d90:	e13ffb15 	stw	r4,-20(fp)
     d94:	e17ffc15 	stw	r5,-16(fp)
     d98:	e1bffd15 	stw	r6,-12(fp)
     d9c:	e1fffe15 	stw	r7,-8(fp)
     da0:	e0800117 	ldw	r2,4(fp)
     da4:	e0bfff0d 	sth	r2,-4(fp)
  int pixel_buf_ptr = *(int*)PIXEL_BUF_CTRL_BASE;
     da8:	00bfc834 	movhi	r2,65312
     dac:	108c0804 	addi	r2,r2,12320
     db0:	10800017 	ldw	r2,0(r2)
     db4:	e0bff715 	stw	r2,-36(fp)
  int pixel_ptr, row, col;

  int x_factor = 0x1 << (res_offset + col_offset);
     db8:	d0e7fa17 	ldw	r3,-24600(gp)
     dbc:	d0a7f117 	ldw	r2,-24636(gp)
     dc0:	1885883a 	add	r2,r3,r2
     dc4:	00c00044 	movi	r3,1
     dc8:	1884983a 	sll	r2,r3,r2
     dcc:	e0bff815 	stw	r2,-32(fp)
  int y_factor = 0x1 << (res_offset);
     dd0:	d0a7fa17 	ldw	r2,-24600(gp)
     dd4:	00c00044 	movi	r3,1
     dd8:	1884983a 	sll	r2,r3,r2
     ddc:	e0bff915 	stw	r2,-28(fp)

  x1 = x1 / x_factor;
     de0:	e0fffb17 	ldw	r3,-20(fp)
     de4:	e0bff817 	ldw	r2,-32(fp)
     de8:	1885283a 	div	r2,r3,r2
     dec:	e0bffb15 	stw	r2,-20(fp)
  x2 = x2 / x_factor;
     df0:	e0fffd17 	ldw	r3,-12(fp)
     df4:	e0bff817 	ldw	r2,-32(fp)
     df8:	1885283a 	div	r2,r3,r2
     dfc:	e0bffd15 	stw	r2,-12(fp)
  y1 = y1 / y_factor;
     e00:	e0fffc17 	ldw	r3,-16(fp)
     e04:	e0bff917 	ldw	r2,-28(fp)
     e08:	1885283a 	div	r2,r3,r2
     e0c:	e0bffc15 	stw	r2,-16(fp)
  y2 = y2 / y_factor;
     e10:	e0fffe17 	ldw	r3,-8(fp)
     e14:	e0bff917 	ldw	r2,-28(fp)
     e18:	1885283a 	div	r2,r3,r2
     e1c:	e0bffe15 	stw	r2,-8(fp)

  /* assume that the box coordinates are valid */
  for (row = y1; row <= y2; row++)
     e20:	e0bffc17 	ldw	r2,-16(fp)
     e24:	e0bff515 	stw	r2,-44(fp)
     e28:	00001c06 	br	e9c <VGA_box+0x118>
    for (col = x1; col <= x2; ++col) {
     e2c:	e0bffb17 	ldw	r2,-20(fp)
     e30:	e0bff615 	stw	r2,-40(fp)
     e34:	00001306 	br	e84 <VGA_box+0x100>
      pixel_ptr =
        pixel_buf_ptr + (row << (10 - res_offset - col_offset)) + (col << 1);
     e38:	d0a7fa17 	ldw	r2,-24600(gp)
     e3c:	00c00284 	movi	r3,10
     e40:	1887c83a 	sub	r3,r3,r2
     e44:	d0a7f117 	ldw	r2,-24636(gp)
     e48:	1885c83a 	sub	r2,r3,r2
     e4c:	e0fff517 	ldw	r3,-44(fp)
     e50:	1886983a 	sll	r3,r3,r2
     e54:	e0bff717 	ldw	r2,-36(fp)
     e58:	1887883a 	add	r3,r3,r2
     e5c:	e0bff617 	ldw	r2,-40(fp)
     e60:	1085883a 	add	r2,r2,r2
  y2 = y2 / y_factor;

  /* assume that the box coordinates are valid */
  for (row = y1; row <= y2; row++)
    for (col = x1; col <= x2; ++col) {
      pixel_ptr =
     e64:	1885883a 	add	r2,r3,r2
     e68:	e0bffa15 	stw	r2,-24(fp)
        pixel_buf_ptr + (row << (10 - res_offset - col_offset)) + (col << 1);
      *(short*)pixel_ptr = pixel_color; // set pixel color
     e6c:	e0bffa17 	ldw	r2,-24(fp)
     e70:	e0ffff0b 	ldhu	r3,-4(fp)
     e74:	10c0000d 	sth	r3,0(r2)
  y1 = y1 / y_factor;
  y2 = y2 / y_factor;

  /* assume that the box coordinates are valid */
  for (row = y1; row <= y2; row++)
    for (col = x1; col <= x2; ++col) {
     e78:	e0bff617 	ldw	r2,-40(fp)
     e7c:	10800044 	addi	r2,r2,1
     e80:	e0bff615 	stw	r2,-40(fp)
     e84:	e0bff617 	ldw	r2,-40(fp)
     e88:	e0fffd17 	ldw	r3,-12(fp)
     e8c:	18bfea0e 	bge	r3,r2,e38 <VGA_box+0xb4>
  x2 = x2 / x_factor;
  y1 = y1 / y_factor;
  y2 = y2 / y_factor;

  /* assume that the box coordinates are valid */
  for (row = y1; row <= y2; row++)
     e90:	e0bff517 	ldw	r2,-44(fp)
     e94:	10800044 	addi	r2,r2,1
     e98:	e0bff515 	stw	r2,-44(fp)
     e9c:	e0bff517 	ldw	r2,-44(fp)
     ea0:	e0fffe17 	ldw	r3,-8(fp)
     ea4:	18bfe10e 	bge	r3,r2,e2c <VGA_box+0xa8>
    for (col = x1; col <= x2; ++col) {
      pixel_ptr =
        pixel_buf_ptr + (row << (10 - res_offset - col_offset)) + (col << 1);
      *(short*)pixel_ptr = pixel_color; // set pixel color
    }
}
     ea8:	0001883a 	nop
     eac:	e037883a 	mov	sp,fp
     eb0:	df000017 	ldw	fp,0(sp)
     eb4:	dec00104 	addi	sp,sp,4
     eb8:	f800283a 	ret

00000ebc <VGA_char_box>:
/*              Character to Pixel mapping: 1 character = 4 pixels            */
/* ************************************************************************** */

void
VGA_char_box(int x, int y, short color)
{
     ebc:	defff604 	addi	sp,sp,-40
     ec0:	dfc00915 	stw	ra,36(sp)
     ec4:	df000815 	stw	fp,32(sp)
     ec8:	df000804 	addi	fp,sp,32
     ecc:	e13ffd15 	stw	r4,-12(fp)
     ed0:	e17ffe15 	stw	r5,-8(fp)
     ed4:	3005883a 	mov	r2,r6
     ed8:	e0bfff0d 	sth	r2,-4(fp)
  int x1 = x * 4;
     edc:	e0bffd17 	ldw	r2,-12(fp)
     ee0:	1085883a 	add	r2,r2,r2
     ee4:	1085883a 	add	r2,r2,r2
     ee8:	e0bff915 	stw	r2,-28(fp)
  int y1 = y * 4;
     eec:	e0bffe17 	ldw	r2,-8(fp)
     ef0:	1085883a 	add	r2,r2,r2
     ef4:	1085883a 	add	r2,r2,r2
     ef8:	e0bffa15 	stw	r2,-24(fp)
  int x2 = ((x + 1) * 4) - 1;
     efc:	e0bffd17 	ldw	r2,-12(fp)
     f00:	10800044 	addi	r2,r2,1
     f04:	1085883a 	add	r2,r2,r2
     f08:	1085883a 	add	r2,r2,r2
     f0c:	10bfffc4 	addi	r2,r2,-1
     f10:	e0bffb15 	stw	r2,-20(fp)
  int y2 = ((y + 1) * 4) - 1;
     f14:	e0bffe17 	ldw	r2,-8(fp)
     f18:	10800044 	addi	r2,r2,1
     f1c:	1085883a 	add	r2,r2,r2
     f20:	1085883a 	add	r2,r2,r2
     f24:	10bfffc4 	addi	r2,r2,-1
     f28:	e0bffc15 	stw	r2,-16(fp)

  VGA_box(x1, y1, x2, y2, color);
     f2c:	e0bfff0f 	ldh	r2,-4(fp)
     f30:	d8800015 	stw	r2,0(sp)
     f34:	e1fffc17 	ldw	r7,-16(fp)
     f38:	e1bffb17 	ldw	r6,-20(fp)
     f3c:	e17ffa17 	ldw	r5,-24(fp)
     f40:	e13ff917 	ldw	r4,-28(fp)
     f44:	0000d840 	call	d84 <VGA_box>
}
     f48:	0001883a 	nop
     f4c:	e037883a 	mov	sp,fp
     f50:	dfc00117 	ldw	ra,4(sp)
     f54:	df000017 	ldw	fp,0(sp)
     f58:	dec00204 	addi	sp,sp,8
     f5c:	f800283a 	ret

00000f60 <VGA_animated_char>:
/* ************************************************************************** */
/*         Synced Animated Character embedded on top of character box         */
/* ************************************************************************** */
void
VGA_animated_char(int x, int y, char* text_ptr, short char_bg_color)
{
     f60:	defffa04 	addi	sp,sp,-24
     f64:	dfc00515 	stw	ra,20(sp)
     f68:	df000415 	stw	fp,16(sp)
     f6c:	df000404 	addi	fp,sp,16
     f70:	e13ffc15 	stw	r4,-16(fp)
     f74:	e17ffd15 	stw	r5,-12(fp)
     f78:	e1bffe15 	stw	r6,-8(fp)
     f7c:	3805883a 	mov	r2,r7
     f80:	e0bfff0d 	sth	r2,-4(fp)
  VGA_char_box(x, y, char_bg_color);
     f84:	e0bfff0f 	ldh	r2,-4(fp)
     f88:	100d883a 	mov	r6,r2
     f8c:	e17ffd17 	ldw	r5,-12(fp)
     f90:	e13ffc17 	ldw	r4,-16(fp)
     f94:	0000ebc0 	call	ebc <VGA_char_box>
  VGA_text(x, y, text_ptr);
     f98:	e1bffe17 	ldw	r6,-8(fp)
     f9c:	e17ffd17 	ldw	r5,-12(fp)
     fa0:	e13ffc17 	ldw	r4,-16(fp)
     fa4:	0000cf00 	call	cf0 <VGA_text>
}
     fa8:	0001883a 	nop
     fac:	e037883a 	mov	sp,fp
     fb0:	dfc00117 	ldw	ra,4(sp)
     fb4:	df000017 	ldw	fp,0(sp)
     fb8:	dec00204 	addi	sp,sp,8
     fbc:	f800283a 	ret

00000fc0 <VGA_info_right>:
/* ************************************************************************** */
/*            Display Character and Pixel Configuration for Sidebar           */
/* ************************************************************************** */
void
VGA_info_right(int x, int y, char* text_ptr, short char_bg_color)
{
     fc0:	defff904 	addi	sp,sp,-28
     fc4:	dfc00615 	stw	ra,24(sp)
     fc8:	df000515 	stw	fp,20(sp)
     fcc:	df000504 	addi	fp,sp,20
     fd0:	e13ffc15 	stw	r4,-16(fp)
     fd4:	e17ffd15 	stw	r5,-12(fp)
     fd8:	e1bffe15 	stw	r6,-8(fp)
     fdc:	3805883a 	mov	r2,r7
     fe0:	e0bfff0d 	sth	r2,-4(fp)
  int i = 0;
     fe4:	e03ffb15 	stw	zero,-20(fp)
  for (i = x; i < x + 10; i++)
     fe8:	e0bffc17 	ldw	r2,-16(fp)
     fec:	e0bffb15 	stw	r2,-20(fp)
     ff0:	00000806 	br	1014 <VGA_info_right+0x54>
    VGA_char_box(i, y, char_bg_color);
     ff4:	e0bfff0f 	ldh	r2,-4(fp)
     ff8:	100d883a 	mov	r6,r2
     ffc:	e17ffd17 	ldw	r5,-12(fp)
    1000:	e13ffb17 	ldw	r4,-20(fp)
    1004:	0000ebc0 	call	ebc <VGA_char_box>
/* ************************************************************************** */
void
VGA_info_right(int x, int y, char* text_ptr, short char_bg_color)
{
  int i = 0;
  for (i = x; i < x + 10; i++)
    1008:	e0bffb17 	ldw	r2,-20(fp)
    100c:	10800044 	addi	r2,r2,1
    1010:	e0bffb15 	stw	r2,-20(fp)
    1014:	e0bffc17 	ldw	r2,-16(fp)
    1018:	10800284 	addi	r2,r2,10
    101c:	e0fffb17 	ldw	r3,-20(fp)
    1020:	18bff416 	blt	r3,r2,ff4 <VGA_info_right+0x34>
    VGA_char_box(i, y, char_bg_color);

  VGA_text(x, y, text_ptr);
    1024:	e1bffe17 	ldw	r6,-8(fp)
    1028:	e17ffd17 	ldw	r5,-12(fp)
    102c:	e13ffc17 	ldw	r4,-16(fp)
    1030:	0000cf00 	call	cf0 <VGA_text>
}
    1034:	0001883a 	nop
    1038:	e037883a 	mov	sp,fp
    103c:	dfc00117 	ldw	ra,4(sp)
    1040:	df000017 	ldw	fp,0(sp)
    1044:	dec00204 	addi	sp,sp,8
    1048:	f800283a 	ret

0000104c <resample_rgb>:
/* ************************************************************************** */
/*               Resamples 24-bit color to 16-bit or 8-bit color              */
/* ************************************************************************** */
int
resample_rgb(int num_bits, int color)
{
    104c:	defffd04 	addi	sp,sp,-12
    1050:	df000215 	stw	fp,8(sp)
    1054:	df000204 	addi	fp,sp,8
    1058:	e13ffe15 	stw	r4,-8(fp)
    105c:	e17fff15 	stw	r5,-4(fp)
  if (num_bits == 8) {
    1060:	e0bffe17 	ldw	r2,-8(fp)
    1064:	10800218 	cmpnei	r2,r2,8
    1068:	1000121e 	bne	r2,zero,10b4 <resample_rgb+0x68>

    color = (((color >> 16) & 0x000000E0) | ((color >> 11) & 0x0000001C) |
    106c:	e0bfff17 	ldw	r2,-4(fp)
    1070:	1005d43a 	srai	r2,r2,16
    1074:	10c0380c 	andi	r3,r2,224
    1078:	e0bfff17 	ldw	r2,-4(fp)
    107c:	1005d2fa 	srai	r2,r2,11
    1080:	1080070c 	andi	r2,r2,28
    1084:	1886b03a 	or	r3,r3,r2
             ((color >> 6) & 0x00000003));
    1088:	e0bfff17 	ldw	r2,-4(fp)
    108c:	1005d1ba 	srai	r2,r2,6
    1090:	108000cc 	andi	r2,r2,3
int
resample_rgb(int num_bits, int color)
{
  if (num_bits == 8) {

    color = (((color >> 16) & 0x000000E0) | ((color >> 11) & 0x0000001C) |
    1094:	1884b03a 	or	r2,r3,r2
    1098:	e0bfff15 	stw	r2,-4(fp)
             ((color >> 6) & 0x00000003));

    color = (color << 8) | color;
    109c:	e0bfff17 	ldw	r2,-4(fp)
    10a0:	1004923a 	slli	r2,r2,8
    10a4:	e0ffff17 	ldw	r3,-4(fp)
    10a8:	1884b03a 	or	r2,r3,r2
    10ac:	e0bfff15 	stw	r2,-4(fp)
    10b0:	00000f06 	br	10f0 <resample_rgb+0xa4>

  } else if (num_bits == 16) {
    10b4:	e0bffe17 	ldw	r2,-8(fp)
    10b8:	10800418 	cmpnei	r2,r2,16
    10bc:	10000c1e 	bne	r2,zero,10f0 <resample_rgb+0xa4>

    color = (((color >> 8) & 0x0000F800) | ((color >> 5) & 0x000007E0) |
    10c0:	e0bfff17 	ldw	r2,-4(fp)
    10c4:	1005d23a 	srai	r2,r2,8
    10c8:	10fe000c 	andi	r3,r2,63488
    10cc:	e0bfff17 	ldw	r2,-4(fp)
    10d0:	1005d17a 	srai	r2,r2,5
    10d4:	1081f80c 	andi	r2,r2,2016
    10d8:	1886b03a 	or	r3,r3,r2
             ((color >> 3) & 0x0000001F));
    10dc:	e0bfff17 	ldw	r2,-4(fp)
    10e0:	1005d0fa 	srai	r2,r2,3
    10e4:	108007cc 	andi	r2,r2,31

    color = (color << 8) | color;

  } else if (num_bits == 16) {

    color = (((color >> 8) & 0x0000F800) | ((color >> 5) & 0x000007E0) |
    10e8:	1884b03a 	or	r2,r3,r2
    10ec:	e0bfff15 	stw	r2,-4(fp)
             ((color >> 3) & 0x0000001F));
  }

  return color;
    10f0:	e0bfff17 	ldw	r2,-4(fp)
}
    10f4:	e037883a 	mov	sp,fp
    10f8:	df000017 	ldw	fp,0(sp)
    10fc:	dec00104 	addi	sp,sp,4
    1100:	f800283a 	ret

00001104 <VGA_clear_screen>:
/*                             Clear game screen                              */
/* ************************************************************************** */

void
VGA_clear_screen(void)
{
    1104:	defffc04 	addi	sp,sp,-16
    1108:	dfc00315 	stw	ra,12(sp)
    110c:	df000215 	stw	fp,8(sp)
    1110:	df000204 	addi	fp,sp,8
  debug("Clearing the screen");
    1114:	d0a00217 	ldw	r2,-32760(gp)
    1118:	10800317 	ldw	r2,12(r2)
    111c:	01c02544 	movi	r7,149
    1120:	018000b4 	movhi	r6,2
    1124:	31baf904 	addi	r6,r6,-5148
    1128:	014000b4 	movhi	r5,2
    112c:	297afb04 	addi	r5,r5,-5140
    1130:	1009883a 	mov	r4,r2
    1134:	00020040 	call	2004 <fprintf>
  VGA_box(0, 0, STANDARD_X, STANDARD_Y, 0); /* clear the screen */
    1138:	d8000015 	stw	zero,0(sp)
    113c:	01c03c04 	movi	r7,240
    1140:	01805004 	movi	r6,320
    1144:	000b883a 	mov	r5,zero
    1148:	0009883a 	mov	r4,zero
    114c:	0000d840 	call	d84 <VGA_box>

  /* clearing all characters from the screen */
  for (int i = 0; i < 60; i++)
    1150:	e03fff15 	stw	zero,-4(fp)
    1154:	00000806 	br	1178 <VGA_clear_screen+0x74>
    VGA_text(0, i, clear_row_text);
    1158:	018000b4 	movhi	r6,2
    115c:	31beb904 	addi	r6,r6,-1308
    1160:	e17fff17 	ldw	r5,-4(fp)
    1164:	0009883a 	mov	r4,zero
    1168:	0000cf00 	call	cf0 <VGA_text>
{
  debug("Clearing the screen");
  VGA_box(0, 0, STANDARD_X, STANDARD_Y, 0); /* clear the screen */

  /* clearing all characters from the screen */
  for (int i = 0; i < 60; i++)
    116c:	e0bfff17 	ldw	r2,-4(fp)
    1170:	10800044 	addi	r2,r2,1
    1174:	e0bfff15 	stw	r2,-4(fp)
    1178:	e0bfff17 	ldw	r2,-4(fp)
    117c:	10800f10 	cmplti	r2,r2,60
    1180:	103ff51e 	bne	r2,zero,1158 <VGA_clear_screen+0x54>
    VGA_text(0, i, clear_row_text);
}
    1184:	0001883a 	nop
    1188:	e037883a 	mov	sp,fp
    118c:	dfc00117 	ldw	ra,4(sp)
    1190:	df000017 	ldw	fp,0(sp)
    1194:	dec00204 	addi	sp,sp,8
    1198:	f800283a 	ret

0000119c <VGA_clear_game_row>:
/* ************************************************************************** */
/*                            Clear Game Screen Row                           */
/* ************************************************************************** */
void
VGA_clear_game_row(int pos_y)
{
    119c:	defffc04 	addi	sp,sp,-16
    11a0:	dfc00315 	stw	ra,12(sp)
    11a4:	df000215 	stw	fp,8(sp)
    11a8:	df000204 	addi	fp,sp,8
    11ac:	e13fff15 	stw	r4,-4(fp)

  for (int i = 0; i < 70; i++)
    11b0:	e03ffe15 	stw	zero,-8(fp)
    11b4:	00000706 	br	11d4 <VGA_clear_game_row+0x38>
    VGA_char_box(i, pos_y, 0);
    11b8:	000d883a 	mov	r6,zero
    11bc:	e17fff17 	ldw	r5,-4(fp)
    11c0:	e13ffe17 	ldw	r4,-8(fp)
    11c4:	0000ebc0 	call	ebc <VGA_char_box>
/* ************************************************************************** */
void
VGA_clear_game_row(int pos_y)
{

  for (int i = 0; i < 70; i++)
    11c8:	e0bffe17 	ldw	r2,-8(fp)
    11cc:	10800044 	addi	r2,r2,1
    11d0:	e0bffe15 	stw	r2,-8(fp)
    11d4:	e0bffe17 	ldw	r2,-8(fp)
    11d8:	10801190 	cmplti	r2,r2,70
    11dc:	103ff61e 	bne	r2,zero,11b8 <VGA_clear_game_row+0x1c>
    VGA_char_box(i, pos_y, 0);

  VGA_text(0, pos_y, clear_row_text);
    11e0:	018000b4 	movhi	r6,2
    11e4:	31beb904 	addi	r6,r6,-1308
    11e8:	e17fff17 	ldw	r5,-4(fp)
    11ec:	0009883a 	mov	r4,zero
    11f0:	0000cf00 	call	cf0 <VGA_text>
}
    11f4:	0001883a 	nop
    11f8:	e037883a 	mov	sp,fp
    11fc:	dfc00117 	ldw	ra,4(sp)
    1200:	df000017 	ldw	fp,0(sp)
    1204:	dec00204 	addi	sp,sp,8
    1208:	f800283a 	ret

0000120c <get_data_bits>:
/*                 Finds the number of data bits from the mode                */
/* ************************************************************************** */

int
get_data_bits(int mode)
{
    120c:	defffe04 	addi	sp,sp,-8
    1210:	df000115 	stw	fp,4(sp)
    1214:	df000104 	addi	fp,sp,4
    1218:	e13fff15 	stw	r4,-4(fp)
  switch (mode) {
    121c:	e0bfff17 	ldw	r2,-4(fp)
    1220:	10800ea8 	cmpgeui	r2,r2,58
    1224:	1000591e 	bne	r2,zero,138c <get_data_bits+0x180>
    1228:	e0bfff17 	ldw	r2,-4(fp)
    122c:	100690ba 	slli	r3,r2,2
    1230:	00800034 	movhi	r2,0
    1234:	10849104 	addi	r2,r2,4676
    1238:	1885883a 	add	r2,r3,r2
    123c:	10800017 	ldw	r2,0(r2)
    1240:	1000683a 	jmp	r2
    1244:	0000132c 	andhi	zero,zero,76
    1248:	0000138c 	andi	zero,zero,78
    124c:	0000138c 	andi	zero,zero,78
    1250:	0000138c 	andi	zero,zero,78
    1254:	0000138c 	andi	zero,zero,78
    1258:	0000138c 	andi	zero,zero,78
    125c:	0000138c 	andi	zero,zero,78
    1260:	00001334 	movhi	zero,76
    1264:	0000138c 	andi	zero,zero,78
    1268:	0000138c 	andi	zero,zero,78
    126c:	0000138c 	andi	zero,zero,78
    1270:	0000138c 	andi	zero,zero,78
    1274:	0000138c 	andi	zero,zero,78
    1278:	0000138c 	andi	zero,zero,78
    127c:	0000138c 	andi	zero,zero,78
    1280:	0000138c 	andi	zero,zero,78
    1284:	0000138c 	andi	zero,zero,78
    1288:	0000133c 	xorhi	zero,zero,76
    128c:	00001344 	movi	zero,77
    1290:	0000138c 	andi	zero,zero,78
    1294:	0000134c 	andi	zero,zero,77
    1298:	0000138c 	andi	zero,zero,78
    129c:	0000138c 	andi	zero,zero,78
    12a0:	00001354 	movui	zero,77
    12a4:	0000138c 	andi	zero,zero,78
    12a8:	0000135c 	xori	zero,zero,77
    12ac:	0000138c 	andi	zero,zero,78
    12b0:	0000138c 	andi	zero,zero,78
    12b4:	0000138c 	andi	zero,zero,78
    12b8:	0000138c 	andi	zero,zero,78
    12bc:	0000138c 	andi	zero,zero,78
    12c0:	0000138c 	andi	zero,zero,78
    12c4:	0000138c 	andi	zero,zero,78
    12c8:	0000138c 	andi	zero,zero,78
    12cc:	0000138c 	andi	zero,zero,78
    12d0:	0000138c 	andi	zero,zero,78
    12d4:	0000138c 	andi	zero,zero,78
    12d8:	0000138c 	andi	zero,zero,78
    12dc:	0000138c 	andi	zero,zero,78
    12e0:	0000138c 	andi	zero,zero,78
    12e4:	0000138c 	andi	zero,zero,78
    12e8:	0000138c 	andi	zero,zero,78
    12ec:	0000138c 	andi	zero,zero,78
    12f0:	0000138c 	andi	zero,zero,78
    12f4:	0000138c 	andi	zero,zero,78
    12f8:	0000138c 	andi	zero,zero,78
    12fc:	0000138c 	andi	zero,zero,78
    1300:	0000138c 	andi	zero,zero,78
    1304:	0000138c 	andi	zero,zero,78
    1308:	00001364 	muli	zero,zero,77
    130c:	0000136c 	andhi	zero,zero,77
    1310:	00001374 	movhi	zero,77
    1314:	0000138c 	andi	zero,zero,78
    1318:	0000138c 	andi	zero,zero,78
    131c:	0000138c 	andi	zero,zero,78
    1320:	0000137c 	xorhi	zero,zero,77
    1324:	0000138c 	andi	zero,zero,78
    1328:	00001384 	movi	zero,78
    case 0x0:
      return 1;
    132c:	00800044 	movi	r2,1
    1330:	00001606 	br	138c <get_data_bits+0x180>
    case 0x7:
      return 8;
    1334:	00800204 	movi	r2,8
    1338:	00001406 	br	138c <get_data_bits+0x180>
    case 0x11:
      return 8;
    133c:	00800204 	movi	r2,8
    1340:	00001206 	br	138c <get_data_bits+0x180>
    case 0x12:
      return 9;
    1344:	00800244 	movi	r2,9
    1348:	00001006 	br	138c <get_data_bits+0x180>
    case 0x14:
      return 16;
    134c:	00800404 	movi	r2,16
    1350:	00000e06 	br	138c <get_data_bits+0x180>
    case 0x17:
      return 24;
    1354:	00800604 	movi	r2,24
    1358:	00000c06 	br	138c <get_data_bits+0x180>
    case 0x19:
      return 30;
    135c:	00800784 	movi	r2,30
    1360:	00000a06 	br	138c <get_data_bits+0x180>
    case 0x31:
      return 8;
    1364:	00800204 	movi	r2,8
    1368:	00000806 	br	138c <get_data_bits+0x180>
    case 0x32:
      return 12;
    136c:	00800304 	movi	r2,12
    1370:	00000606 	br	138c <get_data_bits+0x180>
    case 0x33:
      return 16;
    1374:	00800404 	movi	r2,16
    1378:	00000406 	br	138c <get_data_bits+0x180>
    case 0x37:
      return 32;
    137c:	00800804 	movi	r2,32
    1380:	00000206 	br	138c <get_data_bits+0x180>
    case 0x39:
      return 40;
    1384:	00800a04 	movi	r2,40
    1388:	00000006 	br	138c <get_data_bits+0x180>
  }
}
    138c:	e037883a 	mov	sp,fp
    1390:	df000017 	ldw	fp,0(sp)
    1394:	dec00104 	addi	sp,sp,4
    1398:	f800283a 	ret

0000139c <VGA_display_sidebar>:
/*                            Display Right Sidebar                           */
/* ************************************************************************** */

void
VGA_display_sidebar(short sidebar_color)
{
    139c:	defffd04 	addi	sp,sp,-12
    13a0:	dfc00215 	stw	ra,8(sp)
    13a4:	df000115 	stw	fp,4(sp)
    13a8:	df000104 	addi	fp,sp,4
    13ac:	2005883a 	mov	r2,r4
    13b0:	e0bfff0d 	sth	r2,-4(fp)
  VGA_info_right(70, 0, "          ", sidebar_color);
    13b4:	e0bfff0f 	ldh	r2,-4(fp)
    13b8:	100f883a 	mov	r7,r2
    13bc:	018000b4 	movhi	r6,2
    13c0:	31bb0404 	addi	r6,r6,-5104
    13c4:	000b883a 	mov	r5,zero
    13c8:	01001184 	movi	r4,70
    13cc:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 1, " Catch the", sidebar_color);
    13d0:	e0bfff0f 	ldh	r2,-4(fp)
    13d4:	100f883a 	mov	r7,r2
    13d8:	018000b4 	movhi	r6,2
    13dc:	31bb0704 	addi	r6,r6,-5092
    13e0:	01400044 	movi	r5,1
    13e4:	01001184 	movi	r4,70
    13e8:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 2, " Numbers! ", sidebar_color);
    13ec:	e0bfff0f 	ldh	r2,-4(fp)
    13f0:	100f883a 	mov	r7,r2
    13f4:	018000b4 	movhi	r6,2
    13f8:	31bb0a04 	addi	r6,r6,-5080
    13fc:	01400084 	movi	r5,2
    1400:	01001184 	movi	r4,70
    1404:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 3, "          ", sidebar_color);
    1408:	e0bfff0f 	ldh	r2,-4(fp)
    140c:	100f883a 	mov	r7,r2
    1410:	018000b4 	movhi	r6,2
    1414:	31bb0404 	addi	r6,r6,-5104
    1418:	014000c4 	movi	r5,3
    141c:	01001184 	movi	r4,70
    1420:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 4, "          ", sidebar_color);
    1424:	e0bfff0f 	ldh	r2,-4(fp)
    1428:	100f883a 	mov	r7,r2
    142c:	018000b4 	movhi	r6,2
    1430:	31bb0404 	addi	r6,r6,-5104
    1434:	01400104 	movi	r5,4
    1438:	01001184 	movi	r4,70
    143c:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 5, " Score:   ", sidebar_color);
    1440:	e0bfff0f 	ldh	r2,-4(fp)
    1444:	100f883a 	mov	r7,r2
    1448:	018000b4 	movhi	r6,2
    144c:	31bb0d04 	addi	r6,r6,-5068
    1450:	01400144 	movi	r5,5
    1454:	01001184 	movi	r4,70
    1458:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 6, "      000 ", sidebar_color);
    145c:	e0bfff0f 	ldh	r2,-4(fp)
    1460:	100f883a 	mov	r7,r2
    1464:	018000b4 	movhi	r6,2
    1468:	31bb1004 	addi	r6,r6,-5056
    146c:	01400184 	movi	r5,6
    1470:	01001184 	movi	r4,70
    1474:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 7, "          ", sidebar_color);
    1478:	e0bfff0f 	ldh	r2,-4(fp)
    147c:	100f883a 	mov	r7,r2
    1480:	018000b4 	movhi	r6,2
    1484:	31bb0404 	addi	r6,r6,-5104
    1488:	014001c4 	movi	r5,7
    148c:	01001184 	movi	r4,70
    1490:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 8, " Time:    ", sidebar_color);
    1494:	e0bfff0f 	ldh	r2,-4(fp)
    1498:	100f883a 	mov	r7,r2
    149c:	018000b4 	movhi	r6,2
    14a0:	31bb1304 	addi	r6,r6,-5044
    14a4:	01400204 	movi	r5,8
    14a8:	01001184 	movi	r4,70
    14ac:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 9, " 00:00:00 ", sidebar_color);
    14b0:	e0bfff0f 	ldh	r2,-4(fp)
    14b4:	100f883a 	mov	r7,r2
    14b8:	018000b4 	movhi	r6,2
    14bc:	31bb1604 	addi	r6,r6,-5032
    14c0:	01400244 	movi	r5,9
    14c4:	01001184 	movi	r4,70
    14c8:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 10, "          ", sidebar_color);
    14cc:	e0bfff0f 	ldh	r2,-4(fp)
    14d0:	100f883a 	mov	r7,r2
    14d4:	018000b4 	movhi	r6,2
    14d8:	31bb0404 	addi	r6,r6,-5104
    14dc:	01400284 	movi	r5,10
    14e0:	01001184 	movi	r4,70
    14e4:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 11, "          ", sidebar_color);
    14e8:	e0bfff0f 	ldh	r2,-4(fp)
    14ec:	100f883a 	mov	r7,r2
    14f0:	018000b4 	movhi	r6,2
    14f4:	31bb0404 	addi	r6,r6,-5104
    14f8:	014002c4 	movi	r5,11
    14fc:	01001184 	movi	r4,70
    1500:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 12, "          ", sidebar_color);
    1504:	e0bfff0f 	ldh	r2,-4(fp)
    1508:	100f883a 	mov	r7,r2
    150c:	018000b4 	movhi	r6,2
    1510:	31bb0404 	addi	r6,r6,-5104
    1514:	01400304 	movi	r5,12
    1518:	01001184 	movi	r4,70
    151c:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 13, "          ", sidebar_color);
    1520:	e0bfff0f 	ldh	r2,-4(fp)
    1524:	100f883a 	mov	r7,r2
    1528:	018000b4 	movhi	r6,2
    152c:	31bb0404 	addi	r6,r6,-5104
    1530:	01400344 	movi	r5,13
    1534:	01001184 	movi	r4,70
    1538:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 14, "          ", sidebar_color);
    153c:	e0bfff0f 	ldh	r2,-4(fp)
    1540:	100f883a 	mov	r7,r2
    1544:	018000b4 	movhi	r6,2
    1548:	31bb0404 	addi	r6,r6,-5104
    154c:	01400384 	movi	r5,14
    1550:	01001184 	movi	r4,70
    1554:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 15, "          ", sidebar_color);
    1558:	e0bfff0f 	ldh	r2,-4(fp)
    155c:	100f883a 	mov	r7,r2
    1560:	018000b4 	movhi	r6,2
    1564:	31bb0404 	addi	r6,r6,-5104
    1568:	014003c4 	movi	r5,15
    156c:	01001184 	movi	r4,70
    1570:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 16, "          ", sidebar_color);
    1574:	e0bfff0f 	ldh	r2,-4(fp)
    1578:	100f883a 	mov	r7,r2
    157c:	018000b4 	movhi	r6,2
    1580:	31bb0404 	addi	r6,r6,-5104
    1584:	01400404 	movi	r5,16
    1588:	01001184 	movi	r4,70
    158c:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 17, "          ", sidebar_color);
    1590:	e0bfff0f 	ldh	r2,-4(fp)
    1594:	100f883a 	mov	r7,r2
    1598:	018000b4 	movhi	r6,2
    159c:	31bb0404 	addi	r6,r6,-5104
    15a0:	01400444 	movi	r5,17
    15a4:	01001184 	movi	r4,70
    15a8:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 18, "          ", sidebar_color);
    15ac:	e0bfff0f 	ldh	r2,-4(fp)
    15b0:	100f883a 	mov	r7,r2
    15b4:	018000b4 	movhi	r6,2
    15b8:	31bb0404 	addi	r6,r6,-5104
    15bc:	01400484 	movi	r5,18
    15c0:	01001184 	movi	r4,70
    15c4:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 19, "          ", sidebar_color);
    15c8:	e0bfff0f 	ldh	r2,-4(fp)
    15cc:	100f883a 	mov	r7,r2
    15d0:	018000b4 	movhi	r6,2
    15d4:	31bb0404 	addi	r6,r6,-5104
    15d8:	014004c4 	movi	r5,19
    15dc:	01001184 	movi	r4,70
    15e0:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 20, "          ", sidebar_color);
    15e4:	e0bfff0f 	ldh	r2,-4(fp)
    15e8:	100f883a 	mov	r7,r2
    15ec:	018000b4 	movhi	r6,2
    15f0:	31bb0404 	addi	r6,r6,-5104
    15f4:	01400504 	movi	r5,20
    15f8:	01001184 	movi	r4,70
    15fc:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 21, "          ", sidebar_color);
    1600:	e0bfff0f 	ldh	r2,-4(fp)
    1604:	100f883a 	mov	r7,r2
    1608:	018000b4 	movhi	r6,2
    160c:	31bb0404 	addi	r6,r6,-5104
    1610:	01400544 	movi	r5,21
    1614:	01001184 	movi	r4,70
    1618:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 22, "          ", sidebar_color);
    161c:	e0bfff0f 	ldh	r2,-4(fp)
    1620:	100f883a 	mov	r7,r2
    1624:	018000b4 	movhi	r6,2
    1628:	31bb0404 	addi	r6,r6,-5104
    162c:	01400584 	movi	r5,22
    1630:	01001184 	movi	r4,70
    1634:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 23, "          ", sidebar_color);
    1638:	e0bfff0f 	ldh	r2,-4(fp)
    163c:	100f883a 	mov	r7,r2
    1640:	018000b4 	movhi	r6,2
    1644:	31bb0404 	addi	r6,r6,-5104
    1648:	014005c4 	movi	r5,23
    164c:	01001184 	movi	r4,70
    1650:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 24, "          ", sidebar_color);
    1654:	e0bfff0f 	ldh	r2,-4(fp)
    1658:	100f883a 	mov	r7,r2
    165c:	018000b4 	movhi	r6,2
    1660:	31bb0404 	addi	r6,r6,-5104
    1664:	01400604 	movi	r5,24
    1668:	01001184 	movi	r4,70
    166c:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 25, "          ", sidebar_color);
    1670:	e0bfff0f 	ldh	r2,-4(fp)
    1674:	100f883a 	mov	r7,r2
    1678:	018000b4 	movhi	r6,2
    167c:	31bb0404 	addi	r6,r6,-5104
    1680:	01400644 	movi	r5,25
    1684:	01001184 	movi	r4,70
    1688:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 26, "          ", sidebar_color);
    168c:	e0bfff0f 	ldh	r2,-4(fp)
    1690:	100f883a 	mov	r7,r2
    1694:	018000b4 	movhi	r6,2
    1698:	31bb0404 	addi	r6,r6,-5104
    169c:	01400684 	movi	r5,26
    16a0:	01001184 	movi	r4,70
    16a4:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 27, "          ", sidebar_color);
    16a8:	e0bfff0f 	ldh	r2,-4(fp)
    16ac:	100f883a 	mov	r7,r2
    16b0:	018000b4 	movhi	r6,2
    16b4:	31bb0404 	addi	r6,r6,-5104
    16b8:	014006c4 	movi	r5,27
    16bc:	01001184 	movi	r4,70
    16c0:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 28, "          ", sidebar_color);
    16c4:	e0bfff0f 	ldh	r2,-4(fp)
    16c8:	100f883a 	mov	r7,r2
    16cc:	018000b4 	movhi	r6,2
    16d0:	31bb0404 	addi	r6,r6,-5104
    16d4:	01400704 	movi	r5,28
    16d8:	01001184 	movi	r4,70
    16dc:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 29, "          ", sidebar_color);
    16e0:	e0bfff0f 	ldh	r2,-4(fp)
    16e4:	100f883a 	mov	r7,r2
    16e8:	018000b4 	movhi	r6,2
    16ec:	31bb0404 	addi	r6,r6,-5104
    16f0:	01400744 	movi	r5,29
    16f4:	01001184 	movi	r4,70
    16f8:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 30, "          ", sidebar_color);
    16fc:	e0bfff0f 	ldh	r2,-4(fp)
    1700:	100f883a 	mov	r7,r2
    1704:	018000b4 	movhi	r6,2
    1708:	31bb0404 	addi	r6,r6,-5104
    170c:	01400784 	movi	r5,30
    1710:	01001184 	movi	r4,70
    1714:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 31, "          ", sidebar_color);
    1718:	e0bfff0f 	ldh	r2,-4(fp)
    171c:	100f883a 	mov	r7,r2
    1720:	018000b4 	movhi	r6,2
    1724:	31bb0404 	addi	r6,r6,-5104
    1728:	014007c4 	movi	r5,31
    172c:	01001184 	movi	r4,70
    1730:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 32, "          ", sidebar_color);
    1734:	e0bfff0f 	ldh	r2,-4(fp)
    1738:	100f883a 	mov	r7,r2
    173c:	018000b4 	movhi	r6,2
    1740:	31bb0404 	addi	r6,r6,-5104
    1744:	01400804 	movi	r5,32
    1748:	01001184 	movi	r4,70
    174c:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 33, "          ", sidebar_color);
    1750:	e0bfff0f 	ldh	r2,-4(fp)
    1754:	100f883a 	mov	r7,r2
    1758:	018000b4 	movhi	r6,2
    175c:	31bb0404 	addi	r6,r6,-5104
    1760:	01400844 	movi	r5,33
    1764:	01001184 	movi	r4,70
    1768:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 34, "          ", sidebar_color);
    176c:	e0bfff0f 	ldh	r2,-4(fp)
    1770:	100f883a 	mov	r7,r2
    1774:	018000b4 	movhi	r6,2
    1778:	31bb0404 	addi	r6,r6,-5104
    177c:	01400884 	movi	r5,34
    1780:	01001184 	movi	r4,70
    1784:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 35, "          ", sidebar_color);
    1788:	e0bfff0f 	ldh	r2,-4(fp)
    178c:	100f883a 	mov	r7,r2
    1790:	018000b4 	movhi	r6,2
    1794:	31bb0404 	addi	r6,r6,-5104
    1798:	014008c4 	movi	r5,35
    179c:	01001184 	movi	r4,70
    17a0:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 36, "          ", sidebar_color);
    17a4:	e0bfff0f 	ldh	r2,-4(fp)
    17a8:	100f883a 	mov	r7,r2
    17ac:	018000b4 	movhi	r6,2
    17b0:	31bb0404 	addi	r6,r6,-5104
    17b4:	01400904 	movi	r5,36
    17b8:	01001184 	movi	r4,70
    17bc:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 37, "          ", sidebar_color);
    17c0:	e0bfff0f 	ldh	r2,-4(fp)
    17c4:	100f883a 	mov	r7,r2
    17c8:	018000b4 	movhi	r6,2
    17cc:	31bb0404 	addi	r6,r6,-5104
    17d0:	01400944 	movi	r5,37
    17d4:	01001184 	movi	r4,70
    17d8:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 38, "          ", sidebar_color);
    17dc:	e0bfff0f 	ldh	r2,-4(fp)
    17e0:	100f883a 	mov	r7,r2
    17e4:	018000b4 	movhi	r6,2
    17e8:	31bb0404 	addi	r6,r6,-5104
    17ec:	01400984 	movi	r5,38
    17f0:	01001184 	movi	r4,70
    17f4:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 39, "          ", sidebar_color);
    17f8:	e0bfff0f 	ldh	r2,-4(fp)
    17fc:	100f883a 	mov	r7,r2
    1800:	018000b4 	movhi	r6,2
    1804:	31bb0404 	addi	r6,r6,-5104
    1808:	014009c4 	movi	r5,39
    180c:	01001184 	movi	r4,70
    1810:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 40, "          ", sidebar_color);
    1814:	e0bfff0f 	ldh	r2,-4(fp)
    1818:	100f883a 	mov	r7,r2
    181c:	018000b4 	movhi	r6,2
    1820:	31bb0404 	addi	r6,r6,-5104
    1824:	01400a04 	movi	r5,40
    1828:	01001184 	movi	r4,70
    182c:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 41, "          ", sidebar_color);
    1830:	e0bfff0f 	ldh	r2,-4(fp)
    1834:	100f883a 	mov	r7,r2
    1838:	018000b4 	movhi	r6,2
    183c:	31bb0404 	addi	r6,r6,-5104
    1840:	01400a44 	movi	r5,41
    1844:	01001184 	movi	r4,70
    1848:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 42, "          ", sidebar_color);
    184c:	e0bfff0f 	ldh	r2,-4(fp)
    1850:	100f883a 	mov	r7,r2
    1854:	018000b4 	movhi	r6,2
    1858:	31bb0404 	addi	r6,r6,-5104
    185c:	01400a84 	movi	r5,42
    1860:	01001184 	movi	r4,70
    1864:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 43, "          ", sidebar_color);
    1868:	e0bfff0f 	ldh	r2,-4(fp)
    186c:	100f883a 	mov	r7,r2
    1870:	018000b4 	movhi	r6,2
    1874:	31bb0404 	addi	r6,r6,-5104
    1878:	01400ac4 	movi	r5,43
    187c:	01001184 	movi	r4,70
    1880:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 44, "          ", sidebar_color);
    1884:	e0bfff0f 	ldh	r2,-4(fp)
    1888:	100f883a 	mov	r7,r2
    188c:	018000b4 	movhi	r6,2
    1890:	31bb0404 	addi	r6,r6,-5104
    1894:	01400b04 	movi	r5,44
    1898:	01001184 	movi	r4,70
    189c:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 45, "          ", sidebar_color);
    18a0:	e0bfff0f 	ldh	r2,-4(fp)
    18a4:	100f883a 	mov	r7,r2
    18a8:	018000b4 	movhi	r6,2
    18ac:	31bb0404 	addi	r6,r6,-5104
    18b0:	01400b44 	movi	r5,45
    18b4:	01001184 	movi	r4,70
    18b8:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 46, "          ", sidebar_color);
    18bc:	e0bfff0f 	ldh	r2,-4(fp)
    18c0:	100f883a 	mov	r7,r2
    18c4:	018000b4 	movhi	r6,2
    18c8:	31bb0404 	addi	r6,r6,-5104
    18cc:	01400b84 	movi	r5,46
    18d0:	01001184 	movi	r4,70
    18d4:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 47, "          ", sidebar_color);
    18d8:	e0bfff0f 	ldh	r2,-4(fp)
    18dc:	100f883a 	mov	r7,r2
    18e0:	018000b4 	movhi	r6,2
    18e4:	31bb0404 	addi	r6,r6,-5104
    18e8:	01400bc4 	movi	r5,47
    18ec:	01001184 	movi	r4,70
    18f0:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 48, "          ", sidebar_color);
    18f4:	e0bfff0f 	ldh	r2,-4(fp)
    18f8:	100f883a 	mov	r7,r2
    18fc:	018000b4 	movhi	r6,2
    1900:	31bb0404 	addi	r6,r6,-5104
    1904:	01400c04 	movi	r5,48
    1908:	01001184 	movi	r4,70
    190c:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 49, "          ", sidebar_color);
    1910:	e0bfff0f 	ldh	r2,-4(fp)
    1914:	100f883a 	mov	r7,r2
    1918:	018000b4 	movhi	r6,2
    191c:	31bb0404 	addi	r6,r6,-5104
    1920:	01400c44 	movi	r5,49
    1924:	01001184 	movi	r4,70
    1928:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 50, "          ", sidebar_color);
    192c:	e0bfff0f 	ldh	r2,-4(fp)
    1930:	100f883a 	mov	r7,r2
    1934:	018000b4 	movhi	r6,2
    1938:	31bb0404 	addi	r6,r6,-5104
    193c:	01400c84 	movi	r5,50
    1940:	01001184 	movi	r4,70
    1944:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 51, "          ", sidebar_color);
    1948:	e0bfff0f 	ldh	r2,-4(fp)
    194c:	100f883a 	mov	r7,r2
    1950:	018000b4 	movhi	r6,2
    1954:	31bb0404 	addi	r6,r6,-5104
    1958:	01400cc4 	movi	r5,51
    195c:	01001184 	movi	r4,70
    1960:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 52, "          ", sidebar_color);
    1964:	e0bfff0f 	ldh	r2,-4(fp)
    1968:	100f883a 	mov	r7,r2
    196c:	018000b4 	movhi	r6,2
    1970:	31bb0404 	addi	r6,r6,-5104
    1974:	01400d04 	movi	r5,52
    1978:	01001184 	movi	r4,70
    197c:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 53, "          ", sidebar_color);
    1980:	e0bfff0f 	ldh	r2,-4(fp)
    1984:	100f883a 	mov	r7,r2
    1988:	018000b4 	movhi	r6,2
    198c:	31bb0404 	addi	r6,r6,-5104
    1990:	01400d44 	movi	r5,53
    1994:	01001184 	movi	r4,70
    1998:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 54, "          ", sidebar_color);
    199c:	e0bfff0f 	ldh	r2,-4(fp)
    19a0:	100f883a 	mov	r7,r2
    19a4:	018000b4 	movhi	r6,2
    19a8:	31bb0404 	addi	r6,r6,-5104
    19ac:	01400d84 	movi	r5,54
    19b0:	01001184 	movi	r4,70
    19b4:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 55, "          ", sidebar_color);
    19b8:	e0bfff0f 	ldh	r2,-4(fp)
    19bc:	100f883a 	mov	r7,r2
    19c0:	018000b4 	movhi	r6,2
    19c4:	31bb0404 	addi	r6,r6,-5104
    19c8:	01400dc4 	movi	r5,55
    19cc:	01001184 	movi	r4,70
    19d0:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 56, " Press    ", sidebar_color);
    19d4:	e0bfff0f 	ldh	r2,-4(fp)
    19d8:	100f883a 	mov	r7,r2
    19dc:	018000b4 	movhi	r6,2
    19e0:	31bb1904 	addi	r6,r6,-5020
    19e4:	01400e04 	movi	r5,56
    19e8:	01001184 	movi	r4,70
    19ec:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 57, " 'ESC'    ", sidebar_color);
    19f0:	e0bfff0f 	ldh	r2,-4(fp)
    19f4:	100f883a 	mov	r7,r2
    19f8:	018000b4 	movhi	r6,2
    19fc:	31bb1c04 	addi	r6,r6,-5008
    1a00:	01400e44 	movi	r5,57
    1a04:	01001184 	movi	r4,70
    1a08:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 58, " to Pause ", sidebar_color);
    1a0c:	e0bfff0f 	ldh	r2,-4(fp)
    1a10:	100f883a 	mov	r7,r2
    1a14:	018000b4 	movhi	r6,2
    1a18:	31bb1f04 	addi	r6,r6,-4996
    1a1c:	01400e84 	movi	r5,58
    1a20:	01001184 	movi	r4,70
    1a24:	0000fc00 	call	fc0 <VGA_info_right>
  VGA_info_right(70, 59, "          ", sidebar_color);
    1a28:	e0bfff0f 	ldh	r2,-4(fp)
    1a2c:	100f883a 	mov	r7,r2
    1a30:	018000b4 	movhi	r6,2
    1a34:	31bb0404 	addi	r6,r6,-5104
    1a38:	01400ec4 	movi	r5,59
    1a3c:	01001184 	movi	r4,70
    1a40:	0000fc00 	call	fc0 <VGA_info_right>
}
    1a44:	0001883a 	nop
    1a48:	e037883a 	mov	sp,fp
    1a4c:	dfc00117 	ldw	ra,4(sp)
    1a50:	df000017 	ldw	fp,0(sp)
    1a54:	dec00204 	addi	sp,sp,8
    1a58:	f800283a 	ret

00001a5c <VGA_gametime_display>:
/* ************************************************************************** */
/*                              Display Game Time                             */
/* ************************************************************************** */
void
VGA_gametime_display(int hour, int minute, int second)
{
    1a5c:	defff404 	addi	sp,sp,-48
    1a60:	dfc00b15 	stw	ra,44(sp)
    1a64:	df000a15 	stw	fp,40(sp)
    1a68:	dc000915 	stw	r16,36(sp)
    1a6c:	df000a04 	addi	fp,sp,40
    1a70:	e13ffc15 	stw	r4,-16(fp)
    1a74:	e17ffd15 	stw	r5,-12(fp)
    1a78:	e1bffe15 	stw	r6,-8(fp)
  int cx;
  char buffer[10];

  cx = snprintf(buffer, 10, " %02d:%02d:%02d\0", game_hh, game_mm, game_ss);
    1a7c:	d167ed17 	ldw	r5,-24652(gp)
    1a80:	d0a7f017 	ldw	r2,-24640(gp)
    1a84:	d0e7f317 	ldw	r3,-24628(gp)
    1a88:	e13ff904 	addi	r4,fp,-28
    1a8c:	d8c00115 	stw	r3,4(sp)
    1a90:	d8800015 	stw	r2,0(sp)
    1a94:	280f883a 	mov	r7,r5
    1a98:	018000b4 	movhi	r6,2
    1a9c:	31bb2204 	addi	r6,r6,-4984
    1aa0:	01400284 	movi	r5,10
    1aa4:	00021780 	call	2178 <snprintf>
    1aa8:	e0bff815 	stw	r2,-32(fp)
  check(cx >= 0, "cx out of range");
    1aac:	e0bff817 	ldw	r2,-32(fp)
    1ab0:	10001d0e 	bge	r2,zero,1b28 <VGA_gametime_display+0xcc>
    1ab4:	d0a00217 	ldw	r2,-32760(gp)
    1ab8:	14000317 	ldw	r16,12(r2)
    1abc:	0001fcc0 	call	1fcc <__errno>
    1ac0:	10800017 	ldw	r2,0(r2)
    1ac4:	10000526 	beq	r2,zero,1adc <VGA_gametime_display+0x80>
    1ac8:	0001fcc0 	call	1fcc <__errno>
    1acc:	10800017 	ldw	r2,0(r2)
    1ad0:	1009883a 	mov	r4,r2
    1ad4:	00028b80 	call	28b8 <strerror>
    1ad8:	00000206 	br	1ae4 <VGA_gametime_display+0x88>
    1adc:	008000b4 	movhi	r2,2
    1ae0:	10bb2704 	addi	r2,r2,-4964
    1ae4:	d8800015 	stw	r2,0(sp)
    1ae8:	01c04704 	movi	r7,284
    1aec:	018000b4 	movhi	r6,2
    1af0:	31baf904 	addi	r6,r6,-5148
    1af4:	014000b4 	movhi	r5,2
    1af8:	297b2904 	addi	r5,r5,-4956
    1afc:	8009883a 	mov	r4,r16
    1b00:	00020040 	call	2004 <fprintf>
    1b04:	0001fcc0 	call	1fcc <__errno>
    1b08:	10000015 	stw	zero,0(r2)
    1b0c:	0001883a 	nop

  VGA_text(70, 9, buffer);
  return;

error:
  log_err("Error caused while formatting string");
    1b10:	d0a00217 	ldw	r2,-32760(gp)
    1b14:	14000317 	ldw	r16,12(r2)
    1b18:	0001fcc0 	call	1fcc <__errno>
    1b1c:	10800017 	ldw	r2,0(r2)
    1b20:	10000c26 	beq	r2,zero,1b54 <VGA_gametime_display+0xf8>
    1b24:	00000606 	br	1b40 <VGA_gametime_display+0xe4>
  char buffer[10];

  cx = snprintf(buffer, 10, " %02d:%02d:%02d\0", game_hh, game_mm, game_ss);
  check(cx >= 0, "cx out of range");

  VGA_text(70, 9, buffer);
    1b28:	e0bff904 	addi	r2,fp,-28
    1b2c:	100d883a 	mov	r6,r2
    1b30:	01400244 	movi	r5,9
    1b34:	01001184 	movi	r4,70
    1b38:	0000cf00 	call	cf0 <VGA_text>
    1b3c:	00002506 	br	1bd4 <VGA_gametime_display+0x178>
  return;

error:
  log_err("Error caused while formatting string");
    1b40:	0001fcc0 	call	1fcc <__errno>
    1b44:	10800017 	ldw	r2,0(r2)
    1b48:	1009883a 	mov	r4,r2
    1b4c:	00028b80 	call	28b8 <strerror>
    1b50:	00000206 	br	1b5c <VGA_gametime_display+0x100>
    1b54:	008000b4 	movhi	r2,2
    1b58:	10bb2704 	addi	r2,r2,-4964
    1b5c:	d8800015 	stw	r2,0(sp)
    1b60:	01c04884 	movi	r7,290
    1b64:	018000b4 	movhi	r6,2
    1b68:	31baf904 	addi	r6,r6,-5148
    1b6c:	014000b4 	movhi	r5,2
    1b70:	297b3404 	addi	r5,r5,-4912
    1b74:	8009883a 	mov	r4,r16
    1b78:	00020040 	call	2004 <fprintf>
  log_err("buffer: %s", buffer);
    1b7c:	d0a00217 	ldw	r2,-32760(gp)
    1b80:	14000317 	ldw	r16,12(r2)
    1b84:	0001fcc0 	call	1fcc <__errno>
    1b88:	10800017 	ldw	r2,0(r2)
    1b8c:	10000526 	beq	r2,zero,1ba4 <VGA_gametime_display+0x148>
    1b90:	0001fcc0 	call	1fcc <__errno>
    1b94:	10800017 	ldw	r2,0(r2)
    1b98:	1009883a 	mov	r4,r2
    1b9c:	00028b80 	call	28b8 <strerror>
    1ba0:	00000206 	br	1bac <VGA_gametime_display+0x150>
    1ba4:	008000b4 	movhi	r2,2
    1ba8:	10bb2704 	addi	r2,r2,-4964
    1bac:	e0fff904 	addi	r3,fp,-28
    1bb0:	d8c00115 	stw	r3,4(sp)
    1bb4:	d8800015 	stw	r2,0(sp)
    1bb8:	01c048c4 	movi	r7,291
    1bbc:	018000b4 	movhi	r6,2
    1bc0:	31baf904 	addi	r6,r6,-5148
    1bc4:	014000b4 	movhi	r5,2
    1bc8:	297b4504 	addi	r5,r5,-4844
    1bcc:	8009883a 	mov	r4,r16
    1bd0:	00020040 	call	2004 <fprintf>
}
    1bd4:	e6ffff04 	addi	sp,fp,-4
    1bd8:	dfc00217 	ldw	ra,8(sp)
    1bdc:	df000117 	ldw	fp,4(sp)
    1be0:	dc000017 	ldw	r16,0(sp)
    1be4:	dec00304 	addi	sp,sp,12
    1be8:	f800283a 	ret

00001bec <VGA_display_score>:
/* ************************************************************************** */
/*                             Display Game Score                             */
/* ************************************************************************** */
void
VGA_display_score(int score)
{
    1bec:	defff604 	addi	sp,sp,-40
    1bf0:	dfc00915 	stw	ra,36(sp)
    1bf4:	df000815 	stw	fp,32(sp)
    1bf8:	dc000715 	stw	r16,28(sp)
    1bfc:	df000804 	addi	fp,sp,32
    1c00:	e13ffe15 	stw	r4,-8(fp)
  char buffer[10];

  int cx;
  cx = snprintf(buffer, 10, "      %03d\0", score);
    1c04:	e0bffb04 	addi	r2,fp,-20
    1c08:	e1fffe17 	ldw	r7,-8(fp)
    1c0c:	018000b4 	movhi	r6,2
    1c10:	31bb4f04 	addi	r6,r6,-4804
    1c14:	01400284 	movi	r5,10
    1c18:	1009883a 	mov	r4,r2
    1c1c:	00021780 	call	2178 <snprintf>
    1c20:	e0bffa15 	stw	r2,-24(fp)

  debug("buffer: %s", buffer);
    1c24:	d0a00217 	ldw	r2,-32760(gp)
    1c28:	10c00317 	ldw	r3,12(r2)
    1c2c:	e0bffb04 	addi	r2,fp,-20
    1c30:	d8800015 	stw	r2,0(sp)
    1c34:	01c04c44 	movi	r7,305
    1c38:	018000b4 	movhi	r6,2
    1c3c:	31baf904 	addi	r6,r6,-5148
    1c40:	014000b4 	movhi	r5,2
    1c44:	297b5204 	addi	r5,r5,-4792
    1c48:	1809883a 	mov	r4,r3
    1c4c:	00020040 	call	2004 <fprintf>
  check(cx >= 0, "cx out of range");
    1c50:	e0bffa17 	ldw	r2,-24(fp)
    1c54:	10001d0e 	bge	r2,zero,1ccc <VGA_display_score+0xe0>
    1c58:	d0a00217 	ldw	r2,-32760(gp)
    1c5c:	14000317 	ldw	r16,12(r2)
    1c60:	0001fcc0 	call	1fcc <__errno>
    1c64:	10800017 	ldw	r2,0(r2)
    1c68:	10000526 	beq	r2,zero,1c80 <VGA_display_score+0x94>
    1c6c:	0001fcc0 	call	1fcc <__errno>
    1c70:	10800017 	ldw	r2,0(r2)
    1c74:	1009883a 	mov	r4,r2
    1c78:	00028b80 	call	28b8 <strerror>
    1c7c:	00000206 	br	1c88 <VGA_display_score+0x9c>
    1c80:	008000b4 	movhi	r2,2
    1c84:	10bb2704 	addi	r2,r2,-4964
    1c88:	d8800015 	stw	r2,0(sp)
    1c8c:	01c04c84 	movi	r7,306
    1c90:	018000b4 	movhi	r6,2
    1c94:	31baf904 	addi	r6,r6,-5148
    1c98:	014000b4 	movhi	r5,2
    1c9c:	297b2904 	addi	r5,r5,-4956
    1ca0:	8009883a 	mov	r4,r16
    1ca4:	00020040 	call	2004 <fprintf>
    1ca8:	0001fcc0 	call	1fcc <__errno>
    1cac:	10000015 	stw	zero,0(r2)
    1cb0:	0001883a 	nop

  VGA_text(70, 6, buffer);
  return;

error:
  log_err("Error caused while formatting string");
    1cb4:	d0a00217 	ldw	r2,-32760(gp)
    1cb8:	14000317 	ldw	r16,12(r2)
    1cbc:	0001fcc0 	call	1fcc <__errno>
    1cc0:	10800017 	ldw	r2,0(r2)
    1cc4:	10000c26 	beq	r2,zero,1cf8 <VGA_display_score+0x10c>
    1cc8:	00000606 	br	1ce4 <VGA_display_score+0xf8>
  cx = snprintf(buffer, 10, "      %03d\0", score);

  debug("buffer: %s", buffer);
  check(cx >= 0, "cx out of range");

  VGA_text(70, 6, buffer);
    1ccc:	e0bffb04 	addi	r2,fp,-20
    1cd0:	100d883a 	mov	r6,r2
    1cd4:	01400184 	movi	r5,6
    1cd8:	01001184 	movi	r4,70
    1cdc:	0000cf00 	call	cf0 <VGA_text>
    1ce0:	00002506 	br	1d78 <VGA_display_score+0x18c>
  return;

error:
  log_err("Error caused while formatting string");
    1ce4:	0001fcc0 	call	1fcc <__errno>
    1ce8:	10800017 	ldw	r2,0(r2)
    1cec:	1009883a 	mov	r4,r2
    1cf0:	00028b80 	call	28b8 <strerror>
    1cf4:	00000206 	br	1d00 <VGA_display_score+0x114>
    1cf8:	008000b4 	movhi	r2,2
    1cfc:	10bb2704 	addi	r2,r2,-4964
    1d00:	d8800015 	stw	r2,0(sp)
    1d04:	01c04e04 	movi	r7,312
    1d08:	018000b4 	movhi	r6,2
    1d0c:	31baf904 	addi	r6,r6,-5148
    1d10:	014000b4 	movhi	r5,2
    1d14:	297b3404 	addi	r5,r5,-4912
    1d18:	8009883a 	mov	r4,r16
    1d1c:	00020040 	call	2004 <fprintf>
  log_err("buffer: %s", buffer);
    1d20:	d0a00217 	ldw	r2,-32760(gp)
    1d24:	14000317 	ldw	r16,12(r2)
    1d28:	0001fcc0 	call	1fcc <__errno>
    1d2c:	10800017 	ldw	r2,0(r2)
    1d30:	10000526 	beq	r2,zero,1d48 <VGA_display_score+0x15c>
    1d34:	0001fcc0 	call	1fcc <__errno>
    1d38:	10800017 	ldw	r2,0(r2)
    1d3c:	1009883a 	mov	r4,r2
    1d40:	00028b80 	call	28b8 <strerror>
    1d44:	00000206 	br	1d50 <VGA_display_score+0x164>
    1d48:	008000b4 	movhi	r2,2
    1d4c:	10bb2704 	addi	r2,r2,-4964
    1d50:	e0fffb04 	addi	r3,fp,-20
    1d54:	d8c00115 	stw	r3,4(sp)
    1d58:	d8800015 	stw	r2,0(sp)
    1d5c:	01c04e44 	movi	r7,313
    1d60:	018000b4 	movhi	r6,2
    1d64:	31baf904 	addi	r6,r6,-5148
    1d68:	014000b4 	movhi	r5,2
    1d6c:	297b4504 	addi	r5,r5,-4844
    1d70:	8009883a 	mov	r4,r16
    1d74:	00020040 	call	2004 <fprintf>
}
    1d78:	e6ffff04 	addi	sp,fp,-4
    1d7c:	dfc00217 	ldw	ra,8(sp)
    1d80:	df000117 	ldw	fp,4(sp)
    1d84:	dc000017 	ldw	r16,0(sp)
    1d88:	dec00304 	addi	sp,sp,12
    1d8c:	f800283a 	ret

00001d90 <read_PS2_KeyboardInput>:
/* ************************************************************************** */
/*                           Read PS2 Keyboard Input                          */
/* ************************************************************************** */
void
read_PS2_KeyboardInput(void)
{
    1d90:	defff404 	addi	sp,sp,-48
    1d94:	dfc00b15 	stw	ra,44(sp)
    1d98:	df000a15 	stw	fp,40(sp)
    1d9c:	df000a04 	addi	fp,sp,40
  volatile int* PS2_ptr = (int*)PS2_BASE;
    1da0:	00bfc834 	movhi	r2,65312
    1da4:	10804004 	addi	r2,r2,256
    1da8:	e0bffc15 	stw	r2,-16(fp)

  int PS2_data, RVALID;
  unsigned char byte1 = 0, byte2 = 0, byte3 = 0, byte4 = 0, byte5 = 0;
    1dac:	e03ffd05 	stb	zero,-12(fp)
    1db0:	e03ffb05 	stb	zero,-20(fp)
    1db4:	e03ffb45 	stb	zero,-19(fp)
    1db8:	e03ffb85 	stb	zero,-18(fp)
    1dbc:	e03ffbc5 	stb	zero,-17(fp)

  *(PS2_ptr) = 0xFF; // reset PS/2
    1dc0:	e0bffc17 	ldw	r2,-16(fp)
    1dc4:	00c03fc4 	movi	r3,255
    1dc8:	10c00015 	stw	r3,0(r2)

  while (1) {
    PS2_data = *(PS2_ptr); // read the Data register in the PS/2 port
    1dcc:	e0bffc17 	ldw	r2,-16(fp)
    1dd0:	10800017 	ldw	r2,0(r2)
    1dd4:	e0bffe15 	stw	r2,-8(fp)
    RVALID = (PS2_data & 0xFFFF0000) >> 16; // extract the RVALID field
    1dd8:	e0bffe17 	ldw	r2,-8(fp)
    1ddc:	1004d43a 	srli	r2,r2,16
    1de0:	e0bfff15 	stw	r2,-4(fp)

    if (RVALID > 0) {
    1de4:	e0bfff17 	ldw	r2,-4(fp)
    1de8:	0080760e 	bge	zero,r2,1fc4 <read_PS2_KeyboardInput+0x234>
      /* shift the next data byte into the display */
      byte1 = byte2;
    1dec:	e0bffb03 	ldbu	r2,-20(fp)
    1df0:	e0bffd05 	stb	r2,-12(fp)
      byte2 = byte3;
    1df4:	e0bffb43 	ldbu	r2,-19(fp)
    1df8:	e0bffb05 	stb	r2,-20(fp)
      byte3 = byte4;
    1dfc:	e0bffb83 	ldbu	r2,-18(fp)
    1e00:	e0bffb45 	stb	r2,-19(fp)
      byte4 = byte5;
    1e04:	e0bffbc3 	ldbu	r2,-17(fp)
    1e08:	e0bffb85 	stb	r2,-18(fp)
      byte5 = PS2_data & 0xFF;
    1e0c:	e0bffe17 	ldw	r2,-8(fp)
    1e10:	e0bffbc5 	stb	r2,-17(fp)

      debug("byte1: 0x%02x | byte2: 0x%02x | byte3: 0x%02x | byte4: 0x%02x | "
    1e14:	d0a00217 	ldw	r2,-32760(gp)
    1e18:	12000317 	ldw	r8,12(r2)
    1e1c:	e0bffd03 	ldbu	r2,-12(fp)
    1e20:	e0fffb03 	ldbu	r3,-20(fp)
    1e24:	e13ffb43 	ldbu	r4,-19(fp)
    1e28:	e17ffb83 	ldbu	r5,-18(fp)
    1e2c:	e1bffbc3 	ldbu	r6,-17(fp)
    1e30:	d9800415 	stw	r6,16(sp)
    1e34:	d9400315 	stw	r5,12(sp)
    1e38:	d9000215 	stw	r4,8(sp)
    1e3c:	d8c00115 	stw	r3,4(sp)
    1e40:	d8800015 	stw	r2,0(sp)
    1e44:	01c056c4 	movi	r7,347
    1e48:	018000b4 	movhi	r6,2
    1e4c:	31baf904 	addi	r6,r6,-5148
    1e50:	014000b4 	movhi	r5,2
    1e54:	297b5904 	addi	r5,r5,-4764
    1e58:	4009883a 	mov	r4,r8
    1e5c:	00020040 	call	2004 <fprintf>
            byte2 & 0xFF,
            byte3 & 0xFF,
            byte4 & 0xFF,
            byte5 & 0xFF);

      if (byte4 == 0xE0 && byte5 == 0x6B)
    1e60:	e0bffb83 	ldbu	r2,-18(fp)
    1e64:	10803818 	cmpnei	r2,r2,224
    1e68:	1000051e 	bne	r2,zero,1e80 <read_PS2_KeyboardInput+0xf0>
    1e6c:	e0bffbc3 	ldbu	r2,-17(fp)
    1e70:	10801ad8 	cmpnei	r2,r2,107
    1e74:	1000021e 	bne	r2,zero,1e80 <read_PS2_KeyboardInput+0xf0>
        left_key_pressed = 1;
    1e78:	00800044 	movi	r2,1
    1e7c:	d0a80115 	stw	r2,-24572(gp)

      if (byte3 == 0xE0 && byte4 == 0xF0 && byte5 == 0x6B)
    1e80:	e0bffb43 	ldbu	r2,-19(fp)
    1e84:	10803818 	cmpnei	r2,r2,224
    1e88:	1000071e 	bne	r2,zero,1ea8 <read_PS2_KeyboardInput+0x118>
    1e8c:	e0bffb83 	ldbu	r2,-18(fp)
    1e90:	10803c18 	cmpnei	r2,r2,240
    1e94:	1000041e 	bne	r2,zero,1ea8 <read_PS2_KeyboardInput+0x118>
    1e98:	e0bffbc3 	ldbu	r2,-17(fp)
    1e9c:	10801ad8 	cmpnei	r2,r2,107
    1ea0:	1000011e 	bne	r2,zero,1ea8 <read_PS2_KeyboardInput+0x118>
        left_key_pressed = 0;
    1ea4:	d0280115 	stw	zero,-24572(gp)

      if (byte4 == 0xE0 && byte5 == 0x74)
    1ea8:	e0bffb83 	ldbu	r2,-18(fp)
    1eac:	10803818 	cmpnei	r2,r2,224
    1eb0:	1000051e 	bne	r2,zero,1ec8 <read_PS2_KeyboardInput+0x138>
    1eb4:	e0bffbc3 	ldbu	r2,-17(fp)
    1eb8:	10801d18 	cmpnei	r2,r2,116
    1ebc:	1000021e 	bne	r2,zero,1ec8 <read_PS2_KeyboardInput+0x138>
        right_key_pressed = 1;
    1ec0:	00800044 	movi	r2,1
    1ec4:	d0a7e815 	stw	r2,-24672(gp)

      if (byte3 == 0xE0 && byte4 == 0xF0 && byte5 == 0x74)
    1ec8:	e0bffb43 	ldbu	r2,-19(fp)
    1ecc:	10803818 	cmpnei	r2,r2,224
    1ed0:	1000071e 	bne	r2,zero,1ef0 <read_PS2_KeyboardInput+0x160>
    1ed4:	e0bffb83 	ldbu	r2,-18(fp)
    1ed8:	10803c18 	cmpnei	r2,r2,240
    1edc:	1000041e 	bne	r2,zero,1ef0 <read_PS2_KeyboardInput+0x160>
    1ee0:	e0bffbc3 	ldbu	r2,-17(fp)
    1ee4:	10801d18 	cmpnei	r2,r2,116
    1ee8:	1000011e 	bne	r2,zero,1ef0 <read_PS2_KeyboardInput+0x160>
        right_key_pressed = 0;
    1eec:	d027e815 	stw	zero,-24672(gp)

      if (byte5 == 0x76)
    1ef0:	e0bffbc3 	ldbu	r2,-17(fp)
    1ef4:	10801d98 	cmpnei	r2,r2,118
    1ef8:	1000021e 	bne	r2,zero,1f04 <read_PS2_KeyboardInput+0x174>
        esc_key_pressed = 1;
    1efc:	00800044 	movi	r2,1
    1f00:	d0a80415 	stw	r2,-24560(gp)

      if (byte4 == 0xF0 && byte5 == 0x76)
    1f04:	e0bffb83 	ldbu	r2,-18(fp)
    1f08:	10803c18 	cmpnei	r2,r2,240
    1f0c:	1000041e 	bne	r2,zero,1f20 <read_PS2_KeyboardInput+0x190>
    1f10:	e0bffbc3 	ldbu	r2,-17(fp)
    1f14:	10801d98 	cmpnei	r2,r2,118
    1f18:	1000011e 	bne	r2,zero,1f20 <read_PS2_KeyboardInput+0x190>
        esc_key_pressed = 0;
    1f1c:	d0280415 	stw	zero,-24560(gp)

      if (byte5 == 0x5A)
    1f20:	e0bffbc3 	ldbu	r2,-17(fp)
    1f24:	10801698 	cmpnei	r2,r2,90
    1f28:	1000021e 	bne	r2,zero,1f34 <read_PS2_KeyboardInput+0x1a4>
        enter_key_pressed = 1;
    1f2c:	00800044 	movi	r2,1
    1f30:	d0a7eb15 	stw	r2,-24660(gp)

      if (byte4 == 0xF0 && byte5 == 0x5A)
    1f34:	e0bffb83 	ldbu	r2,-18(fp)
    1f38:	10803c18 	cmpnei	r2,r2,240
    1f3c:	1000041e 	bne	r2,zero,1f50 <read_PS2_KeyboardInput+0x1c0>
    1f40:	e0bffbc3 	ldbu	r2,-17(fp)
    1f44:	10801698 	cmpnei	r2,r2,90
    1f48:	1000011e 	bne	r2,zero,1f50 <read_PS2_KeyboardInput+0x1c0>
        enter_key_pressed = 0;
    1f4c:	d027eb15 	stw	zero,-24660(gp)
      
      if (byte4 == 0xE0)
    1f50:	e0bffb83 	ldbu	r2,-18(fp)
    1f54:	10803818 	cmpnei	r2,r2,224
    1f58:	1000021e 	bne	r2,zero,1f64 <read_PS2_KeyboardInput+0x1d4>
        any_key_pressed = 1;
    1f5c:	00800044 	movi	r2,1
    1f60:	d0a7fd15 	stw	r2,-24588(gp)

      if (byte4 == 0xF0)
    1f64:	e0bffb83 	ldbu	r2,-18(fp)
    1f68:	10803c18 	cmpnei	r2,r2,240
    1f6c:	1000011e 	bne	r2,zero,1f74 <read_PS2_KeyboardInput+0x1e4>
        any_key_pressed = 0;
    1f70:	d027fd15 	stw	zero,-24588(gp)

      debug("any_key_pressed: %d | left_key_pressed: %d | right_key_pressed: "
    1f74:	d0a00217 	ldw	r2,-32760(gp)
    1f78:	12000317 	ldw	r8,12(r2)
    1f7c:	d0a7fd17 	ldw	r2,-24588(gp)
    1f80:	d0e80117 	ldw	r3,-24572(gp)
    1f84:	d127e817 	ldw	r4,-24672(gp)
    1f88:	d1680417 	ldw	r5,-24560(gp)
    1f8c:	d1a7eb17 	ldw	r6,-24660(gp)
    1f90:	d9800415 	stw	r6,16(sp)
    1f94:	d9400315 	stw	r5,12(sp)
    1f98:	d9000215 	stw	r4,8(sp)
    1f9c:	d8c00115 	stw	r3,4(sp)
    1fa0:	d8800015 	stw	r2,0(sp)
    1fa4:	01c06044 	movi	r7,385
    1fa8:	018000b4 	movhi	r6,2
    1fac:	31baf904 	addi	r6,r6,-5148
    1fb0:	014000b4 	movhi	r5,2
    1fb4:	297b7004 	addi	r5,r5,-4672
    1fb8:	4009883a 	mov	r4,r8
    1fbc:	00020040 	call	2004 <fprintf>
    1fc0:	003f8206 	br	1dcc <read_PS2_KeyboardInput+0x3c>
            left_key_pressed,
            right_key_pressed,
            esc_key_pressed,
            enter_key_pressed);
    } else {
      any_key_pressed, left_key_pressed, right_key_pressed, esc_key_pressed,
    1fc4:	d027eb15 	stw	zero,-24660(gp)
        enter_key_pressed = 0, 0, 0, 0, 0;
    }
  }
    1fc8:	003f8006 	br	1dcc <read_PS2_KeyboardInput+0x3c>

00001fcc <__errno>:
    1fcc:	008000b4 	movhi	r2,2
    1fd0:	10863e04 	addi	r2,r2,6392
    1fd4:	10800017 	ldw	r2,0(r2)
    1fd8:	f800283a 	ret

00001fdc <_fprintf_r>:
    1fdc:	defffe04 	addi	sp,sp,-8
    1fe0:	2809883a 	mov	r4,r5
    1fe4:	300b883a 	mov	r5,r6
    1fe8:	dfc00015 	stw	ra,0(sp)
    1fec:	d9c00115 	stw	r7,4(sp)
    1ff0:	d9800104 	addi	r6,sp,4
    1ff4:	0006cac0 	call	6cac <__vfprintf_internal>
    1ff8:	dfc00017 	ldw	ra,0(sp)
    1ffc:	dec00204 	addi	sp,sp,8
    2000:	f800283a 	ret

00002004 <fprintf>:
    2004:	defffd04 	addi	sp,sp,-12
    2008:	dfc00015 	stw	ra,0(sp)
    200c:	d9800115 	stw	r6,4(sp)
    2010:	d9c00215 	stw	r7,8(sp)
    2014:	d9800104 	addi	r6,sp,4
    2018:	0006cac0 	call	6cac <__vfprintf_internal>
    201c:	dfc00017 	ldw	ra,0(sp)
    2020:	dec00304 	addi	sp,sp,12
    2024:	f800283a 	ret

00002028 <srand>:
    2028:	008000b4 	movhi	r2,2
    202c:	10863e04 	addi	r2,r2,6392
    2030:	10800017 	ldw	r2,0(r2)
    2034:	11002915 	stw	r4,164(r2)
    2038:	10002a15 	stw	zero,168(r2)
    203c:	f800283a 	ret

00002040 <rand>:
    2040:	008000b4 	movhi	r2,2
    2044:	10863e04 	addi	r2,r2,6392
    2048:	11c00017 	ldw	r7,0(r2)
    204c:	01532574 	movhi	r5,19605
    2050:	019614b4 	movhi	r6,22610
    2054:	38c02917 	ldw	r3,164(r7)
    2058:	39002a17 	ldw	r4,168(r7)
    205c:	295fcb44 	addi	r5,r5,32557
    2060:	31bd0b44 	addi	r6,r6,-3027
    2064:	1951383a 	mul	r8,r3,r5
    2068:	2149383a 	mul	r4,r4,r5
    206c:	198d383a 	mul	r6,r3,r6
    2070:	194a383a 	mulxuu	r5,r3,r5
    2074:	40800044 	addi	r2,r8,1
    2078:	2187883a 	add	r3,r4,r6
    207c:	1949883a 	add	r4,r3,r5
    2080:	38802915 	stw	r2,164(r7)
    2084:	1207803a 	cmpltu	r3,r2,r8
    2088:	00a00034 	movhi	r2,32768
    208c:	1907883a 	add	r3,r3,r4
    2090:	10bfffc4 	addi	r2,r2,-1
    2094:	38c02a15 	stw	r3,168(r7)
    2098:	1884703a 	and	r2,r3,r2
    209c:	f800283a 	ret

000020a0 <_snprintf_r>:
    20a0:	30003116 	blt	r6,zero,2168 <_snprintf_r+0xc8>
    20a4:	deffe404 	addi	sp,sp,-112
    20a8:	00c08204 	movi	r3,520
    20ac:	dc001a15 	stw	r16,104(sp)
    20b0:	3005883a 	mov	r2,r6
    20b4:	dfc01b15 	stw	ra,108(sp)
    20b8:	d8c0030d 	sth	r3,12(sp)
    20bc:	d9400015 	stw	r5,0(sp)
    20c0:	d9400415 	stw	r5,16(sp)
    20c4:	380d883a 	mov	r6,r7
    20c8:	2021883a 	mov	r16,r4
    20cc:	10001026 	beq	r2,zero,2110 <_snprintf_r+0x70>
    20d0:	10bfffc4 	addi	r2,r2,-1
    20d4:	d8800215 	stw	r2,8(sp)
    20d8:	d8800515 	stw	r2,20(sp)
    20dc:	d9c01c04 	addi	r7,sp,112
    20e0:	00bfffc4 	movi	r2,-1
    20e4:	d80b883a 	mov	r5,sp
    20e8:	d880038d 	sth	r2,14(sp)
    20ec:	00028d40 	call	28d4 <___svfprintf_internal_r>
    20f0:	00ffffc4 	movi	r3,-1
    20f4:	10c01316 	blt	r2,r3,2144 <_snprintf_r+0xa4>
    20f8:	d8c00017 	ldw	r3,0(sp)
    20fc:	18000005 	stb	zero,0(r3)
    2100:	dfc01b17 	ldw	ra,108(sp)
    2104:	dc001a17 	ldw	r16,104(sp)
    2108:	dec01c04 	addi	sp,sp,112
    210c:	f800283a 	ret
    2110:	00bfffc4 	movi	r2,-1
    2114:	d9c01c04 	addi	r7,sp,112
    2118:	d80b883a 	mov	r5,sp
    211c:	d8000215 	stw	zero,8(sp)
    2120:	d8000515 	stw	zero,20(sp)
    2124:	d880038d 	sth	r2,14(sp)
    2128:	00028d40 	call	28d4 <___svfprintf_internal_r>
    212c:	00ffffc4 	movi	r3,-1
    2130:	10c00716 	blt	r2,r3,2150 <_snprintf_r+0xb0>
    2134:	dfc01b17 	ldw	ra,108(sp)
    2138:	dc001a17 	ldw	r16,104(sp)
    213c:	dec01c04 	addi	sp,sp,112
    2140:	f800283a 	ret
    2144:	00c022c4 	movi	r3,139
    2148:	80c00015 	stw	r3,0(r16)
    214c:	003fea06 	br	20f8 <_snprintf_r+0x58>
    2150:	00c022c4 	movi	r3,139
    2154:	80c00015 	stw	r3,0(r16)
    2158:	dfc01b17 	ldw	ra,108(sp)
    215c:	dc001a17 	ldw	r16,104(sp)
    2160:	dec01c04 	addi	sp,sp,112
    2164:	f800283a 	ret
    2168:	008022c4 	movi	r2,139
    216c:	20800015 	stw	r2,0(r4)
    2170:	00bfffc4 	movi	r2,-1
    2174:	f800283a 	ret

00002178 <snprintf>:
    2178:	deffe304 	addi	sp,sp,-116
    217c:	dfc01b15 	stw	ra,108(sp)
    2180:	dc001a15 	stw	r16,104(sp)
    2184:	d9c01c15 	stw	r7,112(sp)
    2188:	008000b4 	movhi	r2,2
    218c:	10863e04 	addi	r2,r2,6392
    2190:	14000017 	ldw	r16,0(r2)
    2194:	28002d16 	blt	r5,zero,224c <snprintf+0xd4>
    2198:	00808204 	movi	r2,520
    219c:	d880030d 	sth	r2,12(sp)
    21a0:	d9000015 	stw	r4,0(sp)
    21a4:	d9000415 	stw	r4,16(sp)
    21a8:	28001126 	beq	r5,zero,21f0 <snprintf+0x78>
    21ac:	28bfffc4 	addi	r2,r5,-1
    21b0:	d8800215 	stw	r2,8(sp)
    21b4:	d8800515 	stw	r2,20(sp)
    21b8:	d9c01c04 	addi	r7,sp,112
    21bc:	00bfffc4 	movi	r2,-1
    21c0:	d80b883a 	mov	r5,sp
    21c4:	8009883a 	mov	r4,r16
    21c8:	d880038d 	sth	r2,14(sp)
    21cc:	00028d40 	call	28d4 <___svfprintf_internal_r>
    21d0:	00ffffc4 	movi	r3,-1
    21d4:	10c01416 	blt	r2,r3,2228 <snprintf+0xb0>
    21d8:	d8c00017 	ldw	r3,0(sp)
    21dc:	18000005 	stb	zero,0(r3)
    21e0:	dfc01b17 	ldw	ra,108(sp)
    21e4:	dc001a17 	ldw	r16,104(sp)
    21e8:	dec01d04 	addi	sp,sp,116
    21ec:	f800283a 	ret
    21f0:	00bfffc4 	movi	r2,-1
    21f4:	d9c01c04 	addi	r7,sp,112
    21f8:	d80b883a 	mov	r5,sp
    21fc:	8009883a 	mov	r4,r16
    2200:	d8000215 	stw	zero,8(sp)
    2204:	d8000515 	stw	zero,20(sp)
    2208:	d880038d 	sth	r2,14(sp)
    220c:	00028d40 	call	28d4 <___svfprintf_internal_r>
    2210:	00ffffc4 	movi	r3,-1
    2214:	10c00716 	blt	r2,r3,2234 <snprintf+0xbc>
    2218:	dfc01b17 	ldw	ra,108(sp)
    221c:	dc001a17 	ldw	r16,104(sp)
    2220:	dec01d04 	addi	sp,sp,116
    2224:	f800283a 	ret
    2228:	00c022c4 	movi	r3,139
    222c:	80c00015 	stw	r3,0(r16)
    2230:	003fe906 	br	21d8 <snprintf+0x60>
    2234:	00c022c4 	movi	r3,139
    2238:	80c00015 	stw	r3,0(r16)
    223c:	dfc01b17 	ldw	ra,108(sp)
    2240:	dc001a17 	ldw	r16,104(sp)
    2244:	dec01d04 	addi	sp,sp,116
    2248:	f800283a 	ret
    224c:	008022c4 	movi	r2,139
    2250:	80800015 	stw	r2,0(r16)
    2254:	00bfffc4 	movi	r2,-1
    2258:	003fef06 	br	2218 <snprintf+0xa0>

0000225c <_strerror_r>:
    225c:	deffff04 	addi	sp,sp,-4
    2260:	2807883a 	mov	r3,r5
    2264:	dfc00015 	stw	ra,0(sp)
    2268:	00802384 	movi	r2,142
    226c:	300b883a 	mov	r5,r6
    2270:	10c18736 	bltu	r2,r3,2890 <_strerror_r+0x634>
    2274:	181090ba 	slli	r8,r3,2
    2278:	00800034 	movhi	r2,0
    227c:	1088a304 	addi	r2,r2,8844
    2280:	4085883a 	add	r2,r8,r2
    2284:	10800017 	ldw	r2,0(r2)
    2288:	1000683a 	jmp	r2
    228c:	000024c8 	cmpgei	zero,zero,147
    2290:	00002884 	movi	zero,162
    2294:	00002878 	rdprs	zero,zero,161
    2298:	0000286c 	andhi	zero,zero,161
    229c:	00002860 	cmpeqi	zero,zero,161
    22a0:	00002854 	movui	zero,161
    22a4:	00002848 	cmpgei	zero,zero,161
    22a8:	0000283c 	xorhi	zero,zero,160
    22ac:	00002830 	cmpltui	zero,zero,160
    22b0:	00002824 	muli	zero,zero,160
    22b4:	00002818 	cmpnei	zero,zero,160
    22b8:	0000280c 	andi	zero,zero,160
    22bc:	00002800 	call	280 <alt_after_alt_main>
    22c0:	000027f4 	movhi	zero,159
    22c4:	000027e8 	cmpgeui	zero,zero,159
    22c8:	00002890 	cmplti	zero,zero,162
    22cc:	000027dc 	xori	zero,zero,159
    22d0:	000027d0 	cmplti	zero,zero,159
    22d4:	000027c4 	movi	zero,159
    22d8:	000027b8 	rdprs	zero,zero,158
    22dc:	000027ac 	andhi	zero,zero,158
    22e0:	000027a0 	cmpeqi	zero,zero,158
    22e4:	00002794 	movui	zero,158
    22e8:	00002788 	cmpgei	zero,zero,158
    22ec:	0000277c 	xorhi	zero,zero,157
    22f0:	00002770 	cmpltui	zero,zero,157
    22f4:	00002764 	muli	zero,zero,157
    22f8:	00002758 	cmpnei	zero,zero,157
    22fc:	0000274c 	andi	zero,zero,157
    2300:	00002740 	call	274 <_start+0x2c>
    2304:	00002734 	movhi	zero,156
    2308:	00002728 	cmpgeui	zero,zero,156
    230c:	0000271c 	xori	zero,zero,156
    2310:	00002710 	cmplti	zero,zero,156
    2314:	00002704 	movi	zero,156
    2318:	000026f8 	rdprs	zero,zero,155
    231c:	000026ec 	andhi	zero,zero,155
    2320:	00002890 	cmplti	zero,zero,162
    2324:	00002890 	cmplti	zero,zero,162
    2328:	00002890 	cmplti	zero,zero,162
    232c:	00002890 	cmplti	zero,zero,162
    2330:	00002890 	cmplti	zero,zero,162
    2334:	00002890 	cmplti	zero,zero,162
    2338:	00002890 	cmplti	zero,zero,162
    233c:	00002890 	cmplti	zero,zero,162
    2340:	000026e0 	cmpeqi	zero,zero,155
    2344:	000026d4 	movui	zero,155
    2348:	00002890 	cmplti	zero,zero,162
    234c:	00002890 	cmplti	zero,zero,162
    2350:	00002890 	cmplti	zero,zero,162
    2354:	00002890 	cmplti	zero,zero,162
    2358:	00002890 	cmplti	zero,zero,162
    235c:	00002890 	cmplti	zero,zero,162
    2360:	00002890 	cmplti	zero,zero,162
    2364:	00002890 	cmplti	zero,zero,162
    2368:	00002890 	cmplti	zero,zero,162
    236c:	00002890 	cmplti	zero,zero,162
    2370:	00002890 	cmplti	zero,zero,162
    2374:	00002890 	cmplti	zero,zero,162
    2378:	00002890 	cmplti	zero,zero,162
    237c:	000026c8 	cmpgei	zero,zero,155
    2380:	000026bc 	xorhi	zero,zero,154
    2384:	000026b0 	cmpltui	zero,zero,154
    2388:	000026a4 	muli	zero,zero,154
    238c:	00002890 	cmplti	zero,zero,162
    2390:	00002890 	cmplti	zero,zero,162
    2394:	00002890 	cmplti	zero,zero,162
    2398:	00002698 	cmpnei	zero,zero,154
    239c:	00002890 	cmplti	zero,zero,162
    23a0:	00002890 	cmplti	zero,zero,162
    23a4:	00002890 	cmplti	zero,zero,162
    23a8:	0000268c 	andi	zero,zero,154
    23ac:	00002890 	cmplti	zero,zero,162
    23b0:	00002890 	cmplti	zero,zero,162
    23b4:	00002680 	call	268 <_start+0x20>
    23b8:	00002890 	cmplti	zero,zero,162
    23bc:	00002890 	cmplti	zero,zero,162
    23c0:	00002674 	movhi	zero,153
    23c4:	00002890 	cmplti	zero,zero,162
    23c8:	00002890 	cmplti	zero,zero,162
    23cc:	00002890 	cmplti	zero,zero,162
    23d0:	00002890 	cmplti	zero,zero,162
    23d4:	00002890 	cmplti	zero,zero,162
    23d8:	00002890 	cmplti	zero,zero,162
    23dc:	00002890 	cmplti	zero,zero,162
    23e0:	00002890 	cmplti	zero,zero,162
    23e4:	00002890 	cmplti	zero,zero,162
    23e8:	00002890 	cmplti	zero,zero,162
    23ec:	00002668 	cmpgeui	zero,zero,153
    23f0:	00002890 	cmplti	zero,zero,162
    23f4:	0000265c 	xori	zero,zero,153
    23f8:	00002650 	cmplti	zero,zero,153
    23fc:	00002644 	movi	zero,153
    2400:	00002890 	cmplti	zero,zero,162
    2404:	00002890 	cmplti	zero,zero,162
    2408:	00002638 	rdprs	zero,zero,152
    240c:	00002890 	cmplti	zero,zero,162
    2410:	00002890 	cmplti	zero,zero,162
    2414:	00002890 	cmplti	zero,zero,162
    2418:	00002890 	cmplti	zero,zero,162
    241c:	00002890 	cmplti	zero,zero,162
    2420:	00002890 	cmplti	zero,zero,162
    2424:	00002890 	cmplti	zero,zero,162
    2428:	00002890 	cmplti	zero,zero,162
    242c:	0000262c 	andhi	zero,zero,152
    2430:	00002620 	cmpeqi	zero,zero,152
    2434:	00002614 	movui	zero,152
    2438:	00002608 	cmpgei	zero,zero,152
    243c:	000025fc 	xorhi	zero,zero,151
    2440:	000025f0 	cmpltui	zero,zero,151
    2444:	00002890 	cmplti	zero,zero,162
    2448:	000025e4 	muli	zero,zero,151
    244c:	000025d8 	cmpnei	zero,zero,151
    2450:	000025cc 	andi	zero,zero,151
    2454:	000025c0 	call	25c <_start+0x14>
    2458:	000025b4 	movhi	zero,150
    245c:	000025a8 	cmpgeui	zero,zero,150
    2460:	0000259c 	xori	zero,zero,150
    2464:	00002590 	cmplti	zero,zero,150
    2468:	00002584 	movi	zero,150
    246c:	00002578 	rdprs	zero,zero,149
    2470:	0000256c 	andhi	zero,zero,149
    2474:	00002560 	cmpeqi	zero,zero,149
    2478:	00002554 	movui	zero,149
    247c:	00002890 	cmplti	zero,zero,162
    2480:	00002548 	cmpgei	zero,zero,149
    2484:	0000253c 	xorhi	zero,zero,148
    2488:	00002530 	cmpltui	zero,zero,148
    248c:	00002524 	muli	zero,zero,148
    2490:	00002890 	cmplti	zero,zero,162
    2494:	00002890 	cmplti	zero,zero,162
    2498:	00002890 	cmplti	zero,zero,162
    249c:	00002890 	cmplti	zero,zero,162
    24a0:	00002890 	cmplti	zero,zero,162
    24a4:	00002518 	cmpnei	zero,zero,148
    24a8:	00002890 	cmplti	zero,zero,162
    24ac:	00002890 	cmplti	zero,zero,162
    24b0:	00002890 	cmplti	zero,zero,162
    24b4:	0000250c 	andi	zero,zero,148
    24b8:	00002500 	call	250 <_start+0x8>
    24bc:	000024f4 	movhi	zero,147
    24c0:	000024e8 	cmpgeui	zero,zero,147
    24c4:	000024dc 	xori	zero,zero,147
    24c8:	008000b4 	movhi	r2,2
    24cc:	10bb9104 	addi	r2,r2,-4540
    24d0:	dfc00017 	ldw	ra,0(sp)
    24d4:	dec00104 	addi	sp,sp,4
    24d8:	f800283a 	ret
    24dc:	008000b4 	movhi	r2,2
    24e0:	10bd2e04 	addi	r2,r2,-2888
    24e4:	003ffa06 	br	24d0 <_strerror_r+0x274>
    24e8:	008000b4 	movhi	r2,2
    24ec:	10bd2804 	addi	r2,r2,-2912
    24f0:	003ff706 	br	24d0 <_strerror_r+0x274>
    24f4:	008000b4 	movhi	r2,2
    24f8:	10bd2304 	addi	r2,r2,-2932
    24fc:	003ff406 	br	24d0 <_strerror_r+0x274>
    2500:	008000b4 	movhi	r2,2
    2504:	10bd3c04 	addi	r2,r2,-2832
    2508:	003ff106 	br	24d0 <_strerror_r+0x274>
    250c:	008000b4 	movhi	r2,2
    2510:	10bc7a04 	addi	r2,r2,-3608
    2514:	003fee06 	br	24d0 <_strerror_r+0x274>
    2518:	008000b4 	movhi	r2,2
    251c:	10bc4804 	addi	r2,r2,-3808
    2520:	003feb06 	br	24d0 <_strerror_r+0x274>
    2524:	008000b4 	movhi	r2,2
    2528:	10bd1604 	addi	r2,r2,-2984
    252c:	003fe806 	br	24d0 <_strerror_r+0x274>
    2530:	008000b4 	movhi	r2,2
    2534:	10bd1c04 	addi	r2,r2,-2960
    2538:	003fe506 	br	24d0 <_strerror_r+0x274>
    253c:	008000b4 	movhi	r2,2
    2540:	10bc1704 	addi	r2,r2,-4004
    2544:	003fe206 	br	24d0 <_strerror_r+0x274>
    2548:	008000b4 	movhi	r2,2
    254c:	10bd0704 	addi	r2,r2,-3044
    2550:	003fdf06 	br	24d0 <_strerror_r+0x274>
    2554:	008000b4 	movhi	r2,2
    2558:	10bca404 	addi	r2,r2,-3440
    255c:	003fdc06 	br	24d0 <_strerror_r+0x274>
    2560:	008000b4 	movhi	r2,2
    2564:	10bd4604 	addi	r2,r2,-2792
    2568:	003fd906 	br	24d0 <_strerror_r+0x274>
    256c:	008000b4 	movhi	r2,2
    2570:	10bbc904 	addi	r2,r2,-4316
    2574:	003fd606 	br	24d0 <_strerror_r+0x274>
    2578:	008000b4 	movhi	r2,2
    257c:	10bbbb04 	addi	r2,r2,-4372
    2580:	003fd306 	br	24d0 <_strerror_r+0x274>
    2584:	008000b4 	movhi	r2,2
    2588:	10bbfd04 	addi	r2,r2,-4108
    258c:	003fd006 	br	24d0 <_strerror_r+0x274>
    2590:	008000b4 	movhi	r2,2
    2594:	10bc3d04 	addi	r2,r2,-3852
    2598:	003fcd06 	br	24d0 <_strerror_r+0x274>
    259c:	008000b4 	movhi	r2,2
    25a0:	10bbf904 	addi	r2,r2,-4124
    25a4:	003fca06 	br	24d0 <_strerror_r+0x274>
    25a8:	008000b4 	movhi	r2,2
    25ac:	10bd4b04 	addi	r2,r2,-2772
    25b0:	003fc706 	br	24d0 <_strerror_r+0x274>
    25b4:	008000b4 	movhi	r2,2
    25b8:	10bc0e04 	addi	r2,r2,-4040
    25bc:	003fc406 	br	24d0 <_strerror_r+0x274>
    25c0:	008000b4 	movhi	r2,2
    25c4:	10bc8304 	addi	r2,r2,-3572
    25c8:	003fc106 	br	24d0 <_strerror_r+0x274>
    25cc:	008000b4 	movhi	r2,2
    25d0:	10bd0d04 	addi	r2,r2,-3020
    25d4:	003fbe06 	br	24d0 <_strerror_r+0x274>
    25d8:	008000b4 	movhi	r2,2
    25dc:	10bd0104 	addi	r2,r2,-3068
    25e0:	003fbb06 	br	24d0 <_strerror_r+0x274>
    25e4:	008000b4 	movhi	r2,2
    25e8:	10bcf504 	addi	r2,r2,-3116
    25ec:	003fb806 	br	24d0 <_strerror_r+0x274>
    25f0:	008000b4 	movhi	r2,2
    25f4:	10bcef04 	addi	r2,r2,-3140
    25f8:	003fb506 	br	24d0 <_strerror_r+0x274>
    25fc:	008000b4 	movhi	r2,2
    2600:	10bce704 	addi	r2,r2,-3172
    2604:	003fb206 	br	24d0 <_strerror_r+0x274>
    2608:	008000b4 	movhi	r2,2
    260c:	10bcdf04 	addi	r2,r2,-3204
    2610:	003faf06 	br	24d0 <_strerror_r+0x274>
    2614:	008000b4 	movhi	r2,2
    2618:	10bcd304 	addi	r2,r2,-3252
    261c:	003fac06 	br	24d0 <_strerror_r+0x274>
    2620:	008000b4 	movhi	r2,2
    2624:	10bcca04 	addi	r2,r2,-3288
    2628:	003fa906 	br	24d0 <_strerror_r+0x274>
    262c:	008000b4 	movhi	r2,2
    2630:	10bcfa04 	addi	r2,r2,-3096
    2634:	003fa606 	br	24d0 <_strerror_r+0x274>
    2638:	008000b4 	movhi	r2,2
    263c:	10bd3304 	addi	r2,r2,-2868
    2640:	003fa306 	br	24d0 <_strerror_r+0x274>
    2644:	008000b4 	movhi	r2,2
    2648:	10bcc404 	addi	r2,r2,-3312
    264c:	003fa006 	br	24d0 <_strerror_r+0x274>
    2650:	008000b4 	movhi	r2,2
    2654:	10bcbd04 	addi	r2,r2,-3340
    2658:	003f9d06 	br	24d0 <_strerror_r+0x274>
    265c:	008000b4 	movhi	r2,2
    2660:	10bcb804 	addi	r2,r2,-3360
    2664:	003f9a06 	br	24d0 <_strerror_r+0x274>
    2668:	008000b4 	movhi	r2,2
    266c:	10bcb104 	addi	r2,r2,-3388
    2670:	003f9706 	br	24d0 <_strerror_r+0x274>
    2674:	008000b4 	movhi	r2,2
    2678:	10bcae04 	addi	r2,r2,-3400
    267c:	003f9406 	br	24d0 <_strerror_r+0x274>
    2680:	008000b4 	movhi	r2,2
    2684:	10bca904 	addi	r2,r2,-3420
    2688:	003f9106 	br	24d0 <_strerror_r+0x274>
    268c:	008000b4 	movhi	r2,2
    2690:	10bca004 	addi	r2,r2,-3456
    2694:	003f8e06 	br	24d0 <_strerror_r+0x274>
    2698:	008000b4 	movhi	r2,2
    269c:	10bc9a04 	addi	r2,r2,-3480
    26a0:	003f8b06 	br	24d0 <_strerror_r+0x274>
    26a4:	008000b4 	movhi	r2,2
    26a8:	10bc9504 	addi	r2,r2,-3500
    26ac:	003f8806 	br	24d0 <_strerror_r+0x274>
    26b0:	008000b4 	movhi	r2,2
    26b4:	10bc8f04 	addi	r2,r2,-3524
    26b8:	003f8506 	br	24d0 <_strerror_r+0x274>
    26bc:	008000b4 	movhi	r2,2
    26c0:	10bcd104 	addi	r2,r2,-3260
    26c4:	003f8206 	br	24d0 <_strerror_r+0x274>
    26c8:	008000b4 	movhi	r2,2
    26cc:	10bc8b04 	addi	r2,r2,-3540
    26d0:	003f7f06 	br	24d0 <_strerror_r+0x274>
    26d4:	008000b4 	movhi	r2,2
    26d8:	10bc8904 	addi	r2,r2,-3548
    26dc:	003f7c06 	br	24d0 <_strerror_r+0x274>
    26e0:	008000b4 	movhi	r2,2
    26e4:	10bc8004 	addi	r2,r2,-3584
    26e8:	003f7906 	br	24d0 <_strerror_r+0x274>
    26ec:	008000b4 	movhi	r2,2
    26f0:	10bc7504 	addi	r2,r2,-3628
    26f4:	003f7606 	br	24d0 <_strerror_r+0x274>
    26f8:	008000b4 	movhi	r2,2
    26fc:	10bc6e04 	addi	r2,r2,-3656
    2700:	003f7306 	br	24d0 <_strerror_r+0x274>
    2704:	008000b4 	movhi	r2,2
    2708:	10bc6904 	addi	r2,r2,-3676
    270c:	003f7006 	br	24d0 <_strerror_r+0x274>
    2710:	008000b4 	movhi	r2,2
    2714:	10bc5d04 	addi	r2,r2,-3724
    2718:	003f6d06 	br	24d0 <_strerror_r+0x274>
    271c:	008000b4 	movhi	r2,2
    2720:	10bc5a04 	addi	r2,r2,-3736
    2724:	003f6a06 	br	24d0 <_strerror_r+0x274>
    2728:	008000b4 	movhi	r2,2
    272c:	10bc5604 	addi	r2,r2,-3752
    2730:	003f6706 	br	24d0 <_strerror_r+0x274>
    2734:	008000b4 	movhi	r2,2
    2738:	10bc5004 	addi	r2,r2,-3776
    273c:	003f6406 	br	24d0 <_strerror_r+0x274>
    2740:	008000b4 	movhi	r2,2
    2744:	10bc4c04 	addi	r2,r2,-3792
    2748:	003f6106 	br	24d0 <_strerror_r+0x274>
    274c:	008000b4 	movhi	r2,2
    2750:	10bc4204 	addi	r2,r2,-3832
    2754:	003f5e06 	br	24d0 <_strerror_r+0x274>
    2758:	008000b4 	movhi	r2,2
    275c:	10bc3904 	addi	r2,r2,-3868
    2760:	003f5b06 	br	24d0 <_strerror_r+0x274>
    2764:	008000b4 	movhi	r2,2
    2768:	10bc3504 	addi	r2,r2,-3884
    276c:	003f5806 	br	24d0 <_strerror_r+0x274>
    2770:	008000b4 	movhi	r2,2
    2774:	10bc2f04 	addi	r2,r2,-3908
    2778:	003f5506 	br	24d0 <_strerror_r+0x274>
    277c:	008000b4 	movhi	r2,2
    2780:	10bc2704 	addi	r2,r2,-3940
    2784:	003f5206 	br	24d0 <_strerror_r+0x274>
    2788:	008000b4 	movhi	r2,2
    278c:	10bc1f04 	addi	r2,r2,-3972
    2790:	003f4f06 	br	24d0 <_strerror_r+0x274>
    2794:	008000b4 	movhi	r2,2
    2798:	10bc0904 	addi	r2,r2,-4060
    279c:	003f4c06 	br	24d0 <_strerror_r+0x274>
    27a0:	008000b4 	movhi	r2,2
    27a4:	10bc0504 	addi	r2,r2,-4076
    27a8:	003f4906 	br	24d0 <_strerror_r+0x274>
    27ac:	008000b4 	movhi	r2,2
    27b0:	10bbf504 	addi	r2,r2,-4140
    27b4:	003f4606 	br	24d0 <_strerror_r+0x274>
    27b8:	008000b4 	movhi	r2,2
    27bc:	10bbf104 	addi	r2,r2,-4156
    27c0:	003f4306 	br	24d0 <_strerror_r+0x274>
    27c4:	008000b4 	movhi	r2,2
    27c8:	10bbec04 	addi	r2,r2,-4176
    27cc:	003f4006 	br	24d0 <_strerror_r+0x274>
    27d0:	008000b4 	movhi	r2,2
    27d4:	10bbe904 	addi	r2,r2,-4188
    27d8:	003f3d06 	br	24d0 <_strerror_r+0x274>
    27dc:	008000b4 	movhi	r2,2
    27e0:	10bbe304 	addi	r2,r2,-4212
    27e4:	003f3a06 	br	24d0 <_strerror_r+0x274>
    27e8:	008000b4 	movhi	r2,2
    27ec:	10bbe004 	addi	r2,r2,-4224
    27f0:	003f3706 	br	24d0 <_strerror_r+0x274>
    27f4:	008000b4 	movhi	r2,2
    27f8:	10bbdb04 	addi	r2,r2,-4244
    27fc:	003f3406 	br	24d0 <_strerror_r+0x274>
    2800:	008000b4 	movhi	r2,2
    2804:	10bbd604 	addi	r2,r2,-4264
    2808:	003f3106 	br	24d0 <_strerror_r+0x274>
    280c:	008000b4 	movhi	r2,2
    2810:	10bbd104 	addi	r2,r2,-4284
    2814:	003f2e06 	br	24d0 <_strerror_r+0x274>
    2818:	008000b4 	movhi	r2,2
    281c:	10bbc604 	addi	r2,r2,-4328
    2820:	003f2b06 	br	24d0 <_strerror_r+0x274>
    2824:	008000b4 	movhi	r2,2
    2828:	10bbc204 	addi	r2,r2,-4344
    282c:	003f2806 	br	24d0 <_strerror_r+0x274>
    2830:	008000b4 	movhi	r2,2
    2834:	10bbb604 	addi	r2,r2,-4392
    2838:	003f2506 	br	24d0 <_strerror_r+0x274>
    283c:	008000b4 	movhi	r2,2
    2840:	10bbb104 	addi	r2,r2,-4412
    2844:	003f2206 	br	24d0 <_strerror_r+0x274>
    2848:	008000b4 	movhi	r2,2
    284c:	10bbaa04 	addi	r2,r2,-4440
    2850:	003f1f06 	br	24d0 <_strerror_r+0x274>
    2854:	008000b4 	movhi	r2,2
    2858:	10bba704 	addi	r2,r2,-4452
    285c:	003f1c06 	br	24d0 <_strerror_r+0x274>
    2860:	008000b4 	movhi	r2,2
    2864:	10bba104 	addi	r2,r2,-4476
    2868:	003f1906 	br	24d0 <_strerror_r+0x274>
    286c:	008000b4 	movhi	r2,2
    2870:	10bb9d04 	addi	r2,r2,-4492
    2874:	003f1606 	br	24d0 <_strerror_r+0x274>
    2878:	008000b4 	movhi	r2,2
    287c:	10bb9604 	addi	r2,r2,-4520
    2880:	003f1306 	br	24d0 <_strerror_r+0x274>
    2884:	008000b4 	movhi	r2,2
    2888:	10bb9304 	addi	r2,r2,-4532
    288c:	003f1006 	br	24d0 <_strerror_r+0x274>
    2890:	38000726 	beq	r7,zero,28b0 <_strerror_r+0x654>
    2894:	380d883a 	mov	r6,r7
    2898:	1809883a 	mov	r4,r3
    289c:	0004aac0 	call	4aac <_user_strerror>
    28a0:	103f0b1e 	bne	r2,zero,24d0 <_strerror_r+0x274>
    28a4:	008000b4 	movhi	r2,2
    28a8:	10bd5904 	addi	r2,r2,-2716
    28ac:	003f0806 	br	24d0 <_strerror_r+0x274>
    28b0:	200f883a 	mov	r7,r4
    28b4:	003ff706 	br	2894 <_strerror_r+0x638>

000028b8 <strerror>:
    28b8:	008000b4 	movhi	r2,2
    28bc:	10863e04 	addi	r2,r2,6392
    28c0:	200b883a 	mov	r5,r4
    28c4:	11000017 	ldw	r4,0(r2)
    28c8:	000f883a 	mov	r7,zero
    28cc:	000d883a 	mov	r6,zero
    28d0:	000225c1 	jmpi	225c <_strerror_r>

000028d4 <___svfprintf_internal_r>:
    28d4:	deffb704 	addi	sp,sp,-292
    28d8:	dfc04815 	stw	ra,288(sp)
    28dc:	ddc04615 	stw	r23,280(sp)
    28e0:	d9402c15 	stw	r5,176(sp)
    28e4:	d9003915 	stw	r4,228(sp)
    28e8:	302f883a 	mov	r23,r6
    28ec:	d9c02d15 	stw	r7,180(sp)
    28f0:	df004715 	stw	fp,284(sp)
    28f4:	dd804515 	stw	r22,276(sp)
    28f8:	dd404415 	stw	r21,272(sp)
    28fc:	dd004315 	stw	r20,268(sp)
    2900:	dcc04215 	stw	r19,264(sp)
    2904:	dc804115 	stw	r18,260(sp)
    2908:	dc404015 	stw	r17,256(sp)
    290c:	dc003f15 	stw	r16,252(sp)
    2910:	00094100 	call	9410 <_localeconv_r>
    2914:	10800017 	ldw	r2,0(r2)
    2918:	1009883a 	mov	r4,r2
    291c:	d8803415 	stw	r2,208(sp)
    2920:	000b4380 	call	b438 <strlen>
    2924:	d8c02c17 	ldw	r3,176(sp)
    2928:	d8803815 	stw	r2,224(sp)
    292c:	1880030b 	ldhu	r2,12(r3)
    2930:	1080200c 	andi	r2,r2,128
    2934:	10000226 	beq	r2,zero,2940 <___svfprintf_internal_r+0x6c>
    2938:	18800417 	ldw	r2,16(r3)
    293c:	10067f26 	beq	r2,zero,433c <___svfprintf_internal_r+0x1a68>
    2940:	dcc03917 	ldw	r19,228(sp)
    2944:	d8c00404 	addi	r3,sp,16
    2948:	054000b4 	movhi	r21,2
    294c:	d9001e04 	addi	r4,sp,120
    2950:	ad7d6184 	addi	r21,r21,-2682
    2954:	d8c01e15 	stw	r3,120(sp)
    2958:	d8002015 	stw	zero,128(sp)
    295c:	d8001f15 	stw	zero,124(sp)
    2960:	d8003315 	stw	zero,204(sp)
    2964:	d8003615 	stw	zero,216(sp)
    2968:	d8003715 	stw	zero,220(sp)
    296c:	1811883a 	mov	r8,r3
    2970:	d8003a15 	stw	zero,232(sp)
    2974:	d8003b15 	stw	zero,236(sp)
    2978:	d8002f15 	stw	zero,188(sp)
    297c:	d9002815 	stw	r4,160(sp)
    2980:	b8800007 	ldb	r2,0(r23)
    2984:	10026726 	beq	r2,zero,3324 <___svfprintf_internal_r+0xa50>
    2988:	00c00944 	movi	r3,37
    298c:	b821883a 	mov	r16,r23
    2990:	10c0021e 	bne	r2,r3,299c <___svfprintf_internal_r+0xc8>
    2994:	00001406 	br	29e8 <___svfprintf_internal_r+0x114>
    2998:	10c00326 	beq	r2,r3,29a8 <___svfprintf_internal_r+0xd4>
    299c:	84000044 	addi	r16,r16,1
    29a0:	80800007 	ldb	r2,0(r16)
    29a4:	103ffc1e 	bne	r2,zero,2998 <___svfprintf_internal_r+0xc4>
    29a8:	85e3c83a 	sub	r17,r16,r23
    29ac:	88000e26 	beq	r17,zero,29e8 <___svfprintf_internal_r+0x114>
    29b0:	d8c02017 	ldw	r3,128(sp)
    29b4:	d8801f17 	ldw	r2,124(sp)
    29b8:	45c00015 	stw	r23,0(r8)
    29bc:	1c47883a 	add	r3,r3,r17
    29c0:	10800044 	addi	r2,r2,1
    29c4:	d8c02015 	stw	r3,128(sp)
    29c8:	44400115 	stw	r17,4(r8)
    29cc:	d8801f15 	stw	r2,124(sp)
    29d0:	00c001c4 	movi	r3,7
    29d4:	18809716 	blt	r3,r2,2c34 <___svfprintf_internal_r+0x360>
    29d8:	42000204 	addi	r8,r8,8
    29dc:	d9402f17 	ldw	r5,188(sp)
    29e0:	2c4b883a 	add	r5,r5,r17
    29e4:	d9402f15 	stw	r5,188(sp)
    29e8:	80800007 	ldb	r2,0(r16)
    29ec:	10009826 	beq	r2,zero,2c50 <___svfprintf_internal_r+0x37c>
    29f0:	84400047 	ldb	r17,1(r16)
    29f4:	00bfffc4 	movi	r2,-1
    29f8:	85c00044 	addi	r23,r16,1
    29fc:	d8002785 	stb	zero,158(sp)
    2a00:	0007883a 	mov	r3,zero
    2a04:	000f883a 	mov	r7,zero
    2a08:	d8802915 	stw	r2,164(sp)
    2a0c:	d8003115 	stw	zero,196(sp)
    2a10:	0025883a 	mov	r18,zero
    2a14:	01401604 	movi	r5,88
    2a18:	01800244 	movi	r6,9
    2a1c:	02800a84 	movi	r10,42
    2a20:	02401b04 	movi	r9,108
    2a24:	bdc00044 	addi	r23,r23,1
    2a28:	88bff804 	addi	r2,r17,-32
    2a2c:	2882f036 	bltu	r5,r2,35f0 <___svfprintf_internal_r+0xd1c>
    2a30:	100490ba 	slli	r2,r2,2
    2a34:	01000034 	movhi	r4,0
    2a38:	210a9204 	addi	r4,r4,10824
    2a3c:	1105883a 	add	r2,r2,r4
    2a40:	10800017 	ldw	r2,0(r2)
    2a44:	1000683a 	jmp	r2
    2a48:	00003558 	cmpnei	zero,zero,213
    2a4c:	000035f0 	cmpltui	zero,zero,215
    2a50:	000035f0 	cmpltui	zero,zero,215
    2a54:	0000354c 	andi	zero,zero,213
    2a58:	000035f0 	cmpltui	zero,zero,215
    2a5c:	000035f0 	cmpltui	zero,zero,215
    2a60:	000035f0 	cmpltui	zero,zero,215
    2a64:	000035f0 	cmpltui	zero,zero,215
    2a68:	000035f0 	cmpltui	zero,zero,215
    2a6c:	000035f0 	cmpltui	zero,zero,215
    2a70:	00002cac 	andhi	zero,zero,178
    2a74:	00003488 	cmpgei	zero,zero,210
    2a78:	000035f0 	cmpltui	zero,zero,215
    2a7c:	00002bbc 	xorhi	zero,zero,174
    2a80:	00002cd4 	movui	zero,179
    2a84:	000035f0 	cmpltui	zero,zero,215
    2a88:	00002d48 	cmpgei	zero,zero,181
    2a8c:	00002d14 	movui	zero,180
    2a90:	00002d14 	movui	zero,180
    2a94:	00002d14 	movui	zero,180
    2a98:	00002d14 	movui	zero,180
    2a9c:	00002d14 	movui	zero,180
    2aa0:	00002d14 	movui	zero,180
    2aa4:	00002d14 	movui	zero,180
    2aa8:	00002d14 	movui	zero,180
    2aac:	00002d14 	movui	zero,180
    2ab0:	000035f0 	cmpltui	zero,zero,215
    2ab4:	000035f0 	cmpltui	zero,zero,215
    2ab8:	000035f0 	cmpltui	zero,zero,215
    2abc:	000035f0 	cmpltui	zero,zero,215
    2ac0:	000035f0 	cmpltui	zero,zero,215
    2ac4:	000035f0 	cmpltui	zero,zero,215
    2ac8:	000035f0 	cmpltui	zero,zero,215
    2acc:	000035f0 	cmpltui	zero,zero,215
    2ad0:	000035f0 	cmpltui	zero,zero,215
    2ad4:	000035f0 	cmpltui	zero,zero,215
    2ad8:	00002e00 	call	2e0 <Task_game_timer+0x5c>
    2adc:	00002d54 	movui	zero,181
    2ae0:	000035f0 	cmpltui	zero,zero,215
    2ae4:	00002d54 	movui	zero,181
    2ae8:	000035f0 	cmpltui	zero,zero,215
    2aec:	000035f0 	cmpltui	zero,zero,215
    2af0:	000035f0 	cmpltui	zero,zero,215
    2af4:	000035f0 	cmpltui	zero,zero,215
    2af8:	00002df4 	movhi	zero,183
    2afc:	000035f0 	cmpltui	zero,zero,215
    2b00:	000035f0 	cmpltui	zero,zero,215
    2b04:	00002ebc 	xorhi	zero,zero,186
    2b08:	000035f0 	cmpltui	zero,zero,215
    2b0c:	000035f0 	cmpltui	zero,zero,215
    2b10:	000035f0 	cmpltui	zero,zero,215
    2b14:	000035f0 	cmpltui	zero,zero,215
    2b18:	000035f0 	cmpltui	zero,zero,215
    2b1c:	0000332c 	andhi	zero,zero,204
    2b20:	000035f0 	cmpltui	zero,zero,215
    2b24:	000035f0 	cmpltui	zero,zero,215
    2b28:	0000338c 	andi	zero,zero,206
    2b2c:	000035f0 	cmpltui	zero,zero,215
    2b30:	000035f0 	cmpltui	zero,zero,215
    2b34:	000035f0 	cmpltui	zero,zero,215
    2b38:	000035f0 	cmpltui	zero,zero,215
    2b3c:	000035f0 	cmpltui	zero,zero,215
    2b40:	000035f0 	cmpltui	zero,zero,215
    2b44:	000035f0 	cmpltui	zero,zero,215
    2b48:	000035f0 	cmpltui	zero,zero,215
    2b4c:	000035f0 	cmpltui	zero,zero,215
    2b50:	000035f0 	cmpltui	zero,zero,215
    2b54:	0000343c 	xorhi	zero,zero,208
    2b58:	00003578 	rdprs	zero,zero,213
    2b5c:	00002d54 	movui	zero,181
    2b60:	00002d54 	movui	zero,181
    2b64:	00002d54 	movui	zero,181
    2b68:	000035cc 	andi	zero,zero,215
    2b6c:	00003578 	rdprs	zero,zero,213
    2b70:	000035f0 	cmpltui	zero,zero,215
    2b74:	000035f0 	cmpltui	zero,zero,215
    2b78:	00003588 	cmpgei	zero,zero,214
    2b7c:	000035f0 	cmpltui	zero,zero,215
    2b80:	00003598 	cmpnei	zero,zero,214
    2b84:	00003478 	rdprs	zero,zero,209
    2b88:	00002bc8 	cmpgei	zero,zero,175
    2b8c:	00003498 	cmpnei	zero,zero,210
    2b90:	000035f0 	cmpltui	zero,zero,215
    2b94:	000034a4 	muli	zero,zero,210
    2b98:	000035f0 	cmpltui	zero,zero,215
    2b9c:	00003500 	call	350 <Task_game_timer+0xcc>
    2ba0:	000035f0 	cmpltui	zero,zero,215
    2ba4:	000035f0 	cmpltui	zero,zero,215
    2ba8:	00003510 	cmplti	zero,zero,212
    2bac:	d9003117 	ldw	r4,196(sp)
    2bb0:	d8802d15 	stw	r2,180(sp)
    2bb4:	0109c83a 	sub	r4,zero,r4
    2bb8:	d9003115 	stw	r4,196(sp)
    2bbc:	94800114 	ori	r18,r18,4
    2bc0:	bc400007 	ldb	r17,0(r23)
    2bc4:	003f9706 	br	2a24 <___svfprintf_internal_r+0x150>
    2bc8:	00800c04 	movi	r2,48
    2bcc:	d9002d17 	ldw	r4,180(sp)
    2bd0:	d9402917 	ldw	r5,164(sp)
    2bd4:	d8802705 	stb	r2,156(sp)
    2bd8:	00801e04 	movi	r2,120
    2bdc:	d8802745 	stb	r2,157(sp)
    2be0:	d8002785 	stb	zero,158(sp)
    2be4:	20c00104 	addi	r3,r4,4
    2be8:	25000017 	ldw	r20,0(r4)
    2bec:	002d883a 	mov	r22,zero
    2bf0:	90800094 	ori	r2,r18,2
    2bf4:	28028616 	blt	r5,zero,3610 <___svfprintf_internal_r+0xd3c>
    2bf8:	00bfdfc4 	movi	r2,-129
    2bfc:	90a4703a 	and	r18,r18,r2
    2c00:	d8c02d15 	stw	r3,180(sp)
    2c04:	94800094 	ori	r18,r18,2
    2c08:	a002731e 	bne	r20,zero,35d8 <___svfprintf_internal_r+0xd04>
    2c0c:	008000b4 	movhi	r2,2
    2c10:	10bd5a04 	addi	r2,r2,-2712
    2c14:	d8803a15 	stw	r2,232(sp)
    2c18:	04401e04 	movi	r17,120
    2c1c:	d8c02917 	ldw	r3,164(sp)
    2c20:	0039883a 	mov	fp,zero
    2c24:	1801d526 	beq	r3,zero,337c <___svfprintf_internal_r+0xaa8>
    2c28:	0029883a 	mov	r20,zero
    2c2c:	002d883a 	mov	r22,zero
    2c30:	0001f106 	br	33f8 <___svfprintf_internal_r+0xb24>
    2c34:	d9402c17 	ldw	r5,176(sp)
    2c38:	d9801e04 	addi	r6,sp,120
    2c3c:	9809883a 	mov	r4,r19
    2c40:	000b4d00 	call	b4d0 <__ssprint_r>
    2c44:	1000081e 	bne	r2,zero,2c68 <___svfprintf_internal_r+0x394>
    2c48:	da000404 	addi	r8,sp,16
    2c4c:	003f6306 	br	29dc <___svfprintf_internal_r+0x108>
    2c50:	d8802017 	ldw	r2,128(sp)
    2c54:	10000426 	beq	r2,zero,2c68 <___svfprintf_internal_r+0x394>
    2c58:	d9402c17 	ldw	r5,176(sp)
    2c5c:	d9003917 	ldw	r4,228(sp)
    2c60:	d9801e04 	addi	r6,sp,120
    2c64:	000b4d00 	call	b4d0 <__ssprint_r>
    2c68:	d8802c17 	ldw	r2,176(sp)
    2c6c:	10c0030b 	ldhu	r3,12(r2)
    2c70:	d8802f17 	ldw	r2,188(sp)
    2c74:	18c0100c 	andi	r3,r3,64
    2c78:	1805f51e 	bne	r3,zero,4450 <___svfprintf_internal_r+0x1b7c>
    2c7c:	dfc04817 	ldw	ra,288(sp)
    2c80:	df004717 	ldw	fp,284(sp)
    2c84:	ddc04617 	ldw	r23,280(sp)
    2c88:	dd804517 	ldw	r22,276(sp)
    2c8c:	dd404417 	ldw	r21,272(sp)
    2c90:	dd004317 	ldw	r20,268(sp)
    2c94:	dcc04217 	ldw	r19,264(sp)
    2c98:	dc804117 	ldw	r18,260(sp)
    2c9c:	dc404017 	ldw	r17,256(sp)
    2ca0:	dc003f17 	ldw	r16,252(sp)
    2ca4:	dec04904 	addi	sp,sp,292
    2ca8:	f800283a 	ret
    2cac:	d8802d17 	ldw	r2,180(sp)
    2cb0:	d9002d17 	ldw	r4,180(sp)
    2cb4:	10800017 	ldw	r2,0(r2)
    2cb8:	d8803115 	stw	r2,196(sp)
    2cbc:	20800104 	addi	r2,r4,4
    2cc0:	d9003117 	ldw	r4,196(sp)
    2cc4:	203fb916 	blt	r4,zero,2bac <___svfprintf_internal_r+0x2d8>
    2cc8:	d8802d15 	stw	r2,180(sp)
    2ccc:	bc400007 	ldb	r17,0(r23)
    2cd0:	003f5406 	br	2a24 <___svfprintf_internal_r+0x150>
    2cd4:	bc400007 	ldb	r17,0(r23)
    2cd8:	bac00044 	addi	r11,r23,1
    2cdc:	8a873926 	beq	r17,r10,49c4 <___svfprintf_internal_r+0x20f0>
    2ce0:	88bff404 	addi	r2,r17,-48
    2ce4:	0009883a 	mov	r4,zero
    2ce8:	30868836 	bltu	r6,r2,470c <___svfprintf_internal_r+0x1e38>
    2cec:	5c400007 	ldb	r17,0(r11)
    2cf0:	210002a4 	muli	r4,r4,10
    2cf4:	5dc00044 	addi	r23,r11,1
    2cf8:	b817883a 	mov	r11,r23
    2cfc:	2089883a 	add	r4,r4,r2
    2d00:	88bff404 	addi	r2,r17,-48
    2d04:	30bff92e 	bgeu	r6,r2,2cec <___svfprintf_internal_r+0x418>
    2d08:	2005d716 	blt	r4,zero,4468 <___svfprintf_internal_r+0x1b94>
    2d0c:	d9002915 	stw	r4,164(sp)
    2d10:	003f4506 	br	2a28 <___svfprintf_internal_r+0x154>
    2d14:	b809883a 	mov	r4,r23
    2d18:	d8003115 	stw	zero,196(sp)
    2d1c:	88bff404 	addi	r2,r17,-48
    2d20:	0017883a 	mov	r11,zero
    2d24:	24400007 	ldb	r17,0(r4)
    2d28:	5ac002a4 	muli	r11,r11,10
    2d2c:	bdc00044 	addi	r23,r23,1
    2d30:	b809883a 	mov	r4,r23
    2d34:	12d7883a 	add	r11,r2,r11
    2d38:	88bff404 	addi	r2,r17,-48
    2d3c:	30bff92e 	bgeu	r6,r2,2d24 <___svfprintf_internal_r+0x450>
    2d40:	dac03115 	stw	r11,196(sp)
    2d44:	003f3806 	br	2a28 <___svfprintf_internal_r+0x154>
    2d48:	94802014 	ori	r18,r18,128
    2d4c:	bc400007 	ldb	r17,0(r23)
    2d50:	003f3406 	br	2a24 <___svfprintf_internal_r+0x150>
    2d54:	18c03fcc 	andi	r3,r3,255
    2d58:	1807471e 	bne	r3,zero,4a78 <___svfprintf_internal_r+0x21a4>
    2d5c:	9080020c 	andi	r2,r18,8
    2d60:	10047d26 	beq	r2,zero,3f58 <___svfprintf_internal_r+0x1684>
    2d64:	d8c02d17 	ldw	r3,180(sp)
    2d68:	d9002d17 	ldw	r4,180(sp)
    2d6c:	d9402d17 	ldw	r5,180(sp)
    2d70:	18c00017 	ldw	r3,0(r3)
    2d74:	21000117 	ldw	r4,4(r4)
    2d78:	29400204 	addi	r5,r5,8
    2d7c:	d8c03615 	stw	r3,216(sp)
    2d80:	d9003715 	stw	r4,220(sp)
    2d84:	d9402d15 	stw	r5,180(sp)
    2d88:	d9003617 	ldw	r4,216(sp)
    2d8c:	d9403717 	ldw	r5,220(sp)
    2d90:	da003e15 	stw	r8,248(sp)
    2d94:	04000044 	movi	r16,1
    2d98:	000b1580 	call	b158 <__fpclassifyd>
    2d9c:	da003e17 	ldw	r8,248(sp)
    2da0:	14044b1e 	bne	r2,r16,3ed0 <___svfprintf_internal_r+0x15fc>
    2da4:	d9003617 	ldw	r4,216(sp)
    2da8:	d9403717 	ldw	r5,220(sp)
    2dac:	000d883a 	mov	r6,zero
    2db0:	000f883a 	mov	r7,zero
    2db4:	00113300 	call	11330 <__ledf2>
    2db8:	da003e17 	ldw	r8,248(sp)
    2dbc:	1005f316 	blt	r2,zero,458c <___svfprintf_internal_r+0x1cb8>
    2dc0:	df002783 	ldbu	fp,158(sp)
    2dc4:	008011c4 	movi	r2,71
    2dc8:	1445590e 	bge	r2,r17,4330 <___svfprintf_internal_r+0x1a5c>
    2dcc:	040000b4 	movhi	r16,2
    2dd0:	843d5204 	addi	r16,r16,-2744
    2dd4:	00c000c4 	movi	r3,3
    2dd8:	00bfdfc4 	movi	r2,-129
    2ddc:	d8c02a15 	stw	r3,168(sp)
    2de0:	90a4703a 	and	r18,r18,r2
    2de4:	d8c02e15 	stw	r3,184(sp)
    2de8:	d8002915 	stw	zero,164(sp)
    2dec:	d8003215 	stw	zero,200(sp)
    2df0:	00006606 	br	2f8c <___svfprintf_internal_r+0x6b8>
    2df4:	94800214 	ori	r18,r18,8
    2df8:	bc400007 	ldb	r17,0(r23)
    2dfc:	003f0906 	br	2a24 <___svfprintf_internal_r+0x150>
    2e00:	18c03fcc 	andi	r3,r3,255
    2e04:	1807181e 	bne	r3,zero,4a68 <___svfprintf_internal_r+0x2194>
    2e08:	94800414 	ori	r18,r18,16
    2e0c:	9080080c 	andi	r2,r18,32
    2e10:	10039626 	beq	r2,zero,3c6c <___svfprintf_internal_r+0x1398>
    2e14:	d9402d17 	ldw	r5,180(sp)
    2e18:	28800117 	ldw	r2,4(r5)
    2e1c:	2d000017 	ldw	r20,0(r5)
    2e20:	29400204 	addi	r5,r5,8
    2e24:	d9402d15 	stw	r5,180(sp)
    2e28:	102d883a 	mov	r22,r2
    2e2c:	10039816 	blt	r2,zero,3c90 <___svfprintf_internal_r+0x13bc>
    2e30:	d9402917 	ldw	r5,164(sp)
    2e34:	df002783 	ldbu	fp,158(sp)
    2e38:	2803ab16 	blt	r5,zero,3ce8 <___svfprintf_internal_r+0x1414>
    2e3c:	00ffdfc4 	movi	r3,-129
    2e40:	a584b03a 	or	r2,r20,r22
    2e44:	90e4703a 	and	r18,r18,r3
    2e48:	10014a26 	beq	r2,zero,3374 <___svfprintf_internal_r+0xaa0>
    2e4c:	b0034b26 	beq	r22,zero,3b7c <___svfprintf_internal_r+0x12a8>
    2e50:	dc402a15 	stw	r17,168(sp)
    2e54:	dc001e04 	addi	r16,sp,120
    2e58:	b023883a 	mov	r17,r22
    2e5c:	402d883a 	mov	r22,r8
    2e60:	a009883a 	mov	r4,r20
    2e64:	880b883a 	mov	r5,r17
    2e68:	01800284 	movi	r6,10
    2e6c:	000f883a 	mov	r7,zero
    2e70:	000f94c0 	call	f94c <__umoddi3>
    2e74:	10800c04 	addi	r2,r2,48
    2e78:	843fffc4 	addi	r16,r16,-1
    2e7c:	a009883a 	mov	r4,r20
    2e80:	880b883a 	mov	r5,r17
    2e84:	80800005 	stb	r2,0(r16)
    2e88:	01800284 	movi	r6,10
    2e8c:	000f883a 	mov	r7,zero
    2e90:	000f3d40 	call	f3d4 <__udivdi3>
    2e94:	1029883a 	mov	r20,r2
    2e98:	10c4b03a 	or	r2,r2,r3
    2e9c:	1823883a 	mov	r17,r3
    2ea0:	103fef1e 	bne	r2,zero,2e60 <___svfprintf_internal_r+0x58c>
    2ea4:	d8c02817 	ldw	r3,160(sp)
    2ea8:	dc402a17 	ldw	r17,168(sp)
    2eac:	b011883a 	mov	r8,r22
    2eb0:	1c07c83a 	sub	r3,r3,r16
    2eb4:	d8c02e15 	stw	r3,184(sp)
    2eb8:	00002e06 	br	2f74 <___svfprintf_internal_r+0x6a0>
    2ebc:	18c03fcc 	andi	r3,r3,255
    2ec0:	1806e71e 	bne	r3,zero,4a60 <___svfprintf_internal_r+0x218c>
    2ec4:	94800414 	ori	r18,r18,16
    2ec8:	9080080c 	andi	r2,r18,32
    2ecc:	1002d426 	beq	r2,zero,3a20 <___svfprintf_internal_r+0x114c>
    2ed0:	d9402d17 	ldw	r5,180(sp)
    2ed4:	d8c02917 	ldw	r3,164(sp)
    2ed8:	d8002785 	stb	zero,158(sp)
    2edc:	28800204 	addi	r2,r5,8
    2ee0:	2d000017 	ldw	r20,0(r5)
    2ee4:	2d800117 	ldw	r22,4(r5)
    2ee8:	18041516 	blt	r3,zero,3f40 <___svfprintf_internal_r+0x166c>
    2eec:	013fdfc4 	movi	r4,-129
    2ef0:	a586b03a 	or	r3,r20,r22
    2ef4:	d8802d15 	stw	r2,180(sp)
    2ef8:	9124703a 	and	r18,r18,r4
    2efc:	1802d51e 	bne	r3,zero,3a54 <___svfprintf_internal_r+0x1180>
    2f00:	d9402917 	ldw	r5,164(sp)
    2f04:	0039883a 	mov	fp,zero
    2f08:	2806be26 	beq	r5,zero,4a04 <___svfprintf_internal_r+0x2130>
    2f0c:	0029883a 	mov	r20,zero
    2f10:	002d883a 	mov	r22,zero
    2f14:	dc001e04 	addi	r16,sp,120
    2f18:	a006d0fa 	srli	r3,r20,3
    2f1c:	b008977a 	slli	r4,r22,29
    2f20:	b02cd0fa 	srli	r22,r22,3
    2f24:	a50001cc 	andi	r20,r20,7
    2f28:	a0800c04 	addi	r2,r20,48
    2f2c:	843fffc4 	addi	r16,r16,-1
    2f30:	20e8b03a 	or	r20,r4,r3
    2f34:	80800005 	stb	r2,0(r16)
    2f38:	a586b03a 	or	r3,r20,r22
    2f3c:	183ff61e 	bne	r3,zero,2f18 <___svfprintf_internal_r+0x644>
    2f40:	90c0004c 	andi	r3,r18,1
    2f44:	18013926 	beq	r3,zero,342c <___svfprintf_internal_r+0xb58>
    2f48:	10803fcc 	andi	r2,r2,255
    2f4c:	1080201c 	xori	r2,r2,128
    2f50:	10bfe004 	addi	r2,r2,-128
    2f54:	00c00c04 	movi	r3,48
    2f58:	10c13426 	beq	r2,r3,342c <___svfprintf_internal_r+0xb58>
    2f5c:	80ffffc5 	stb	r3,-1(r16)
    2f60:	d8c02817 	ldw	r3,160(sp)
    2f64:	80bfffc4 	addi	r2,r16,-1
    2f68:	1021883a 	mov	r16,r2
    2f6c:	1887c83a 	sub	r3,r3,r2
    2f70:	d8c02e15 	stw	r3,184(sp)
    2f74:	d8802e17 	ldw	r2,184(sp)
    2f78:	d9002917 	ldw	r4,164(sp)
    2f7c:	1100010e 	bge	r2,r4,2f84 <___svfprintf_internal_r+0x6b0>
    2f80:	2005883a 	mov	r2,r4
    2f84:	d8802a15 	stw	r2,168(sp)
    2f88:	d8003215 	stw	zero,200(sp)
    2f8c:	e7003fcc 	andi	fp,fp,255
    2f90:	e700201c 	xori	fp,fp,128
    2f94:	e73fe004 	addi	fp,fp,-128
    2f98:	e0000326 	beq	fp,zero,2fa8 <___svfprintf_internal_r+0x6d4>
    2f9c:	d8c02a17 	ldw	r3,168(sp)
    2fa0:	18c00044 	addi	r3,r3,1
    2fa4:	d8c02a15 	stw	r3,168(sp)
    2fa8:	90c0008c 	andi	r3,r18,2
    2fac:	d8c02b15 	stw	r3,172(sp)
    2fb0:	18000326 	beq	r3,zero,2fc0 <___svfprintf_internal_r+0x6ec>
    2fb4:	d8c02a17 	ldw	r3,168(sp)
    2fb8:	18c00084 	addi	r3,r3,2
    2fbc:	d8c02a15 	stw	r3,168(sp)
    2fc0:	90c0210c 	andi	r3,r18,132
    2fc4:	d8c03015 	stw	r3,192(sp)
    2fc8:	1801a11e 	bne	r3,zero,3650 <___svfprintf_internal_r+0xd7c>
    2fcc:	d9003117 	ldw	r4,196(sp)
    2fd0:	d8c02a17 	ldw	r3,168(sp)
    2fd4:	20e9c83a 	sub	r20,r4,r3
    2fd8:	05019d0e 	bge	zero,r20,3650 <___svfprintf_internal_r+0xd7c>
    2fdc:	02400404 	movi	r9,16
    2fe0:	d8c02017 	ldw	r3,128(sp)
    2fe4:	d8801f17 	ldw	r2,124(sp)
    2fe8:	4d051b0e 	bge	r9,r20,4458 <___svfprintf_internal_r+0x1b84>
    2fec:	014000b4 	movhi	r5,2
    2ff0:	297d6584 	addi	r5,r5,-2666
    2ff4:	dc403c15 	stw	r17,240(sp)
    2ff8:	d9403515 	stw	r5,212(sp)
    2ffc:	a023883a 	mov	r17,r20
    3000:	482d883a 	mov	r22,r9
    3004:	9029883a 	mov	r20,r18
    3008:	070001c4 	movi	fp,7
    300c:	8025883a 	mov	r18,r16
    3010:	dc002c17 	ldw	r16,176(sp)
    3014:	00000306 	br	3024 <___svfprintf_internal_r+0x750>
    3018:	8c7ffc04 	addi	r17,r17,-16
    301c:	42000204 	addi	r8,r8,8
    3020:	b440130e 	bge	r22,r17,3070 <___svfprintf_internal_r+0x79c>
    3024:	010000b4 	movhi	r4,2
    3028:	18c00404 	addi	r3,r3,16
    302c:	10800044 	addi	r2,r2,1
    3030:	213d6584 	addi	r4,r4,-2666
    3034:	41000015 	stw	r4,0(r8)
    3038:	45800115 	stw	r22,4(r8)
    303c:	d8c02015 	stw	r3,128(sp)
    3040:	d8801f15 	stw	r2,124(sp)
    3044:	e0bff40e 	bge	fp,r2,3018 <___svfprintf_internal_r+0x744>
    3048:	d9801e04 	addi	r6,sp,120
    304c:	800b883a 	mov	r5,r16
    3050:	9809883a 	mov	r4,r19
    3054:	000b4d00 	call	b4d0 <__ssprint_r>
    3058:	103f031e 	bne	r2,zero,2c68 <___svfprintf_internal_r+0x394>
    305c:	8c7ffc04 	addi	r17,r17,-16
    3060:	d8c02017 	ldw	r3,128(sp)
    3064:	d8801f17 	ldw	r2,124(sp)
    3068:	da000404 	addi	r8,sp,16
    306c:	b47fed16 	blt	r22,r17,3024 <___svfprintf_internal_r+0x750>
    3070:	9021883a 	mov	r16,r18
    3074:	a025883a 	mov	r18,r20
    3078:	8829883a 	mov	r20,r17
    307c:	dc403c17 	ldw	r17,240(sp)
    3080:	d9403517 	ldw	r5,212(sp)
    3084:	a0c7883a 	add	r3,r20,r3
    3088:	10800044 	addi	r2,r2,1
    308c:	41400015 	stw	r5,0(r8)
    3090:	45000115 	stw	r20,4(r8)
    3094:	d8c02015 	stw	r3,128(sp)
    3098:	d8801f15 	stw	r2,124(sp)
    309c:	010001c4 	movi	r4,7
    30a0:	20829f16 	blt	r4,r2,3b20 <___svfprintf_internal_r+0x124c>
    30a4:	df002787 	ldb	fp,158(sp)
    30a8:	42000204 	addi	r8,r8,8
    30ac:	e0000c26 	beq	fp,zero,30e0 <___svfprintf_internal_r+0x80c>
    30b0:	d8801f17 	ldw	r2,124(sp)
    30b4:	d9002784 	addi	r4,sp,158
    30b8:	18c00044 	addi	r3,r3,1
    30bc:	10800044 	addi	r2,r2,1
    30c0:	41000015 	stw	r4,0(r8)
    30c4:	01000044 	movi	r4,1
    30c8:	41000115 	stw	r4,4(r8)
    30cc:	d8c02015 	stw	r3,128(sp)
    30d0:	d8801f15 	stw	r2,124(sp)
    30d4:	010001c4 	movi	r4,7
    30d8:	20823816 	blt	r4,r2,39bc <___svfprintf_internal_r+0x10e8>
    30dc:	42000204 	addi	r8,r8,8
    30e0:	d8802b17 	ldw	r2,172(sp)
    30e4:	10000c26 	beq	r2,zero,3118 <___svfprintf_internal_r+0x844>
    30e8:	d8801f17 	ldw	r2,124(sp)
    30ec:	d9002704 	addi	r4,sp,156
    30f0:	18c00084 	addi	r3,r3,2
    30f4:	10800044 	addi	r2,r2,1
    30f8:	41000015 	stw	r4,0(r8)
    30fc:	01000084 	movi	r4,2
    3100:	41000115 	stw	r4,4(r8)
    3104:	d8c02015 	stw	r3,128(sp)
    3108:	d8801f15 	stw	r2,124(sp)
    310c:	010001c4 	movi	r4,7
    3110:	20823216 	blt	r4,r2,39dc <___svfprintf_internal_r+0x1108>
    3114:	42000204 	addi	r8,r8,8
    3118:	d9003017 	ldw	r4,192(sp)
    311c:	00802004 	movi	r2,128
    3120:	20819726 	beq	r4,r2,3780 <___svfprintf_internal_r+0xeac>
    3124:	d9402917 	ldw	r5,164(sp)
    3128:	d8802e17 	ldw	r2,184(sp)
    312c:	28adc83a 	sub	r22,r5,r2
    3130:	05802f0e 	bge	zero,r22,31f0 <___svfprintf_internal_r+0x91c>
    3134:	07000404 	movi	fp,16
    3138:	d8801f17 	ldw	r2,124(sp)
    313c:	e583c00e 	bge	fp,r22,4040 <___svfprintf_internal_r+0x176c>
    3140:	014000b4 	movhi	r5,2
    3144:	297d6184 	addi	r5,r5,-2682
    3148:	dc402915 	stw	r17,164(sp)
    314c:	d9402b15 	stw	r5,172(sp)
    3150:	b023883a 	mov	r17,r22
    3154:	050001c4 	movi	r20,7
    3158:	902d883a 	mov	r22,r18
    315c:	8025883a 	mov	r18,r16
    3160:	dc002c17 	ldw	r16,176(sp)
    3164:	00000306 	br	3174 <___svfprintf_internal_r+0x8a0>
    3168:	8c7ffc04 	addi	r17,r17,-16
    316c:	42000204 	addi	r8,r8,8
    3170:	e440110e 	bge	fp,r17,31b8 <___svfprintf_internal_r+0x8e4>
    3174:	18c00404 	addi	r3,r3,16
    3178:	10800044 	addi	r2,r2,1
    317c:	45400015 	stw	r21,0(r8)
    3180:	47000115 	stw	fp,4(r8)
    3184:	d8c02015 	stw	r3,128(sp)
    3188:	d8801f15 	stw	r2,124(sp)
    318c:	a0bff60e 	bge	r20,r2,3168 <___svfprintf_internal_r+0x894>
    3190:	d9801e04 	addi	r6,sp,120
    3194:	800b883a 	mov	r5,r16
    3198:	9809883a 	mov	r4,r19
    319c:	000b4d00 	call	b4d0 <__ssprint_r>
    31a0:	103eb11e 	bne	r2,zero,2c68 <___svfprintf_internal_r+0x394>
    31a4:	8c7ffc04 	addi	r17,r17,-16
    31a8:	d8c02017 	ldw	r3,128(sp)
    31ac:	d8801f17 	ldw	r2,124(sp)
    31b0:	da000404 	addi	r8,sp,16
    31b4:	e47fef16 	blt	fp,r17,3174 <___svfprintf_internal_r+0x8a0>
    31b8:	9021883a 	mov	r16,r18
    31bc:	b025883a 	mov	r18,r22
    31c0:	882d883a 	mov	r22,r17
    31c4:	dc402917 	ldw	r17,164(sp)
    31c8:	d9002b17 	ldw	r4,172(sp)
    31cc:	1d87883a 	add	r3,r3,r22
    31d0:	10800044 	addi	r2,r2,1
    31d4:	41000015 	stw	r4,0(r8)
    31d8:	45800115 	stw	r22,4(r8)
    31dc:	d8c02015 	stw	r3,128(sp)
    31e0:	d8801f15 	stw	r2,124(sp)
    31e4:	010001c4 	movi	r4,7
    31e8:	2081ec16 	blt	r4,r2,399c <___svfprintf_internal_r+0x10c8>
    31ec:	42000204 	addi	r8,r8,8
    31f0:	9080400c 	andi	r2,r18,256
    31f4:	1001181e 	bne	r2,zero,3658 <___svfprintf_internal_r+0xd84>
    31f8:	d9402e17 	ldw	r5,184(sp)
    31fc:	d8801f17 	ldw	r2,124(sp)
    3200:	44000015 	stw	r16,0(r8)
    3204:	1947883a 	add	r3,r3,r5
    3208:	10800044 	addi	r2,r2,1
    320c:	41400115 	stw	r5,4(r8)
    3210:	d8c02015 	stw	r3,128(sp)
    3214:	d8801f15 	stw	r2,124(sp)
    3218:	010001c4 	movi	r4,7
    321c:	2081d116 	blt	r4,r2,3964 <___svfprintf_internal_r+0x1090>
    3220:	42000204 	addi	r8,r8,8
    3224:	9480010c 	andi	r18,r18,4
    3228:	90003226 	beq	r18,zero,32f4 <___svfprintf_internal_r+0xa20>
    322c:	d9403117 	ldw	r5,196(sp)
    3230:	d8802a17 	ldw	r2,168(sp)
    3234:	28a1c83a 	sub	r16,r5,r2
    3238:	04002e0e 	bge	zero,r16,32f4 <___svfprintf_internal_r+0xa20>
    323c:	04400404 	movi	r17,16
    3240:	d8801f17 	ldw	r2,124(sp)
    3244:	8c04b90e 	bge	r17,r16,452c <___svfprintf_internal_r+0x1c58>
    3248:	014000b4 	movhi	r5,2
    324c:	297d6584 	addi	r5,r5,-2666
    3250:	d9403515 	stw	r5,212(sp)
    3254:	048001c4 	movi	r18,7
    3258:	dd002c17 	ldw	r20,176(sp)
    325c:	00000306 	br	326c <___svfprintf_internal_r+0x998>
    3260:	843ffc04 	addi	r16,r16,-16
    3264:	42000204 	addi	r8,r8,8
    3268:	8c00130e 	bge	r17,r16,32b8 <___svfprintf_internal_r+0x9e4>
    326c:	010000b4 	movhi	r4,2
    3270:	18c00404 	addi	r3,r3,16
    3274:	10800044 	addi	r2,r2,1
    3278:	213d6584 	addi	r4,r4,-2666
    327c:	41000015 	stw	r4,0(r8)
    3280:	44400115 	stw	r17,4(r8)
    3284:	d8c02015 	stw	r3,128(sp)
    3288:	d8801f15 	stw	r2,124(sp)
    328c:	90bff40e 	bge	r18,r2,3260 <___svfprintf_internal_r+0x98c>
    3290:	d9801e04 	addi	r6,sp,120
    3294:	a00b883a 	mov	r5,r20
    3298:	9809883a 	mov	r4,r19
    329c:	000b4d00 	call	b4d0 <__ssprint_r>
    32a0:	103e711e 	bne	r2,zero,2c68 <___svfprintf_internal_r+0x394>
    32a4:	843ffc04 	addi	r16,r16,-16
    32a8:	d8c02017 	ldw	r3,128(sp)
    32ac:	d8801f17 	ldw	r2,124(sp)
    32b0:	da000404 	addi	r8,sp,16
    32b4:	8c3fed16 	blt	r17,r16,326c <___svfprintf_internal_r+0x998>
    32b8:	d9403517 	ldw	r5,212(sp)
    32bc:	1c07883a 	add	r3,r3,r16
    32c0:	10800044 	addi	r2,r2,1
    32c4:	41400015 	stw	r5,0(r8)
    32c8:	44000115 	stw	r16,4(r8)
    32cc:	d8c02015 	stw	r3,128(sp)
    32d0:	d8801f15 	stw	r2,124(sp)
    32d4:	010001c4 	movi	r4,7
    32d8:	2080060e 	bge	r4,r2,32f4 <___svfprintf_internal_r+0xa20>
    32dc:	d9402c17 	ldw	r5,176(sp)
    32e0:	d9801e04 	addi	r6,sp,120
    32e4:	9809883a 	mov	r4,r19
    32e8:	000b4d00 	call	b4d0 <__ssprint_r>
    32ec:	103e5e1e 	bne	r2,zero,2c68 <___svfprintf_internal_r+0x394>
    32f0:	d8c02017 	ldw	r3,128(sp)
    32f4:	d8803117 	ldw	r2,196(sp)
    32f8:	d9002a17 	ldw	r4,168(sp)
    32fc:	1100010e 	bge	r2,r4,3304 <___svfprintf_internal_r+0xa30>
    3300:	2005883a 	mov	r2,r4
    3304:	d9402f17 	ldw	r5,188(sp)
    3308:	288b883a 	add	r5,r5,r2
    330c:	d9402f15 	stw	r5,188(sp)
    3310:	18019c1e 	bne	r3,zero,3984 <___svfprintf_internal_r+0x10b0>
    3314:	b8800007 	ldb	r2,0(r23)
    3318:	d8001f15 	stw	zero,124(sp)
    331c:	da000404 	addi	r8,sp,16
    3320:	103d991e 	bne	r2,zero,2988 <___svfprintf_internal_r+0xb4>
    3324:	b821883a 	mov	r16,r23
    3328:	003daf06 	br	29e8 <___svfprintf_internal_r+0x114>
    332c:	18c03fcc 	andi	r3,r3,255
    3330:	1805c71e 	bne	r3,zero,4a50 <___svfprintf_internal_r+0x217c>
    3334:	94800414 	ori	r18,r18,16
    3338:	9080080c 	andi	r2,r18,32
    333c:	10020126 	beq	r2,zero,3b44 <___svfprintf_internal_r+0x1270>
    3340:	d8802d17 	ldw	r2,180(sp)
    3344:	d9002917 	ldw	r4,164(sp)
    3348:	d8002785 	stb	zero,158(sp)
    334c:	10c00204 	addi	r3,r2,8
    3350:	15000017 	ldw	r20,0(r2)
    3354:	15800117 	ldw	r22,4(r2)
    3358:	20038e16 	blt	r4,zero,4194 <___svfprintf_internal_r+0x18c0>
    335c:	013fdfc4 	movi	r4,-129
    3360:	a584b03a 	or	r2,r20,r22
    3364:	d8c02d15 	stw	r3,180(sp)
    3368:	9124703a 	and	r18,r18,r4
    336c:	0039883a 	mov	fp,zero
    3370:	103eb61e 	bne	r2,zero,2e4c <___svfprintf_internal_r+0x578>
    3374:	d8802917 	ldw	r2,164(sp)
    3378:	1002c81e 	bne	r2,zero,3e9c <___svfprintf_internal_r+0x15c8>
    337c:	d8002915 	stw	zero,164(sp)
    3380:	d8002e15 	stw	zero,184(sp)
    3384:	dc001e04 	addi	r16,sp,120
    3388:	003efa06 	br	2f74 <___svfprintf_internal_r+0x6a0>
    338c:	18c03fcc 	andi	r3,r3,255
    3390:	1805ad1e 	bne	r3,zero,4a48 <___svfprintf_internal_r+0x2174>
    3394:	014000b4 	movhi	r5,2
    3398:	297d5504 	addi	r5,r5,-2732
    339c:	d9403a15 	stw	r5,232(sp)
    33a0:	9080080c 	andi	r2,r18,32
    33a4:	10006126 	beq	r2,zero,352c <___svfprintf_internal_r+0xc58>
    33a8:	d8802d17 	ldw	r2,180(sp)
    33ac:	15000017 	ldw	r20,0(r2)
    33b0:	15800117 	ldw	r22,4(r2)
    33b4:	10800204 	addi	r2,r2,8
    33b8:	d8802d15 	stw	r2,180(sp)
    33bc:	9080004c 	andi	r2,r18,1
    33c0:	10018e26 	beq	r2,zero,39fc <___svfprintf_internal_r+0x1128>
    33c4:	a584b03a 	or	r2,r20,r22
    33c8:	10030926 	beq	r2,zero,3ff0 <___svfprintf_internal_r+0x171c>
    33cc:	d8c02917 	ldw	r3,164(sp)
    33d0:	00800c04 	movi	r2,48
    33d4:	d8802705 	stb	r2,156(sp)
    33d8:	dc402745 	stb	r17,157(sp)
    33dc:	d8002785 	stb	zero,158(sp)
    33e0:	90800094 	ori	r2,r18,2
    33e4:	18048716 	blt	r3,zero,4604 <___svfprintf_internal_r+0x1d30>
    33e8:	00bfdfc4 	movi	r2,-129
    33ec:	90a4703a 	and	r18,r18,r2
    33f0:	94800094 	ori	r18,r18,2
    33f4:	0039883a 	mov	fp,zero
    33f8:	d9003a17 	ldw	r4,232(sp)
    33fc:	dc001e04 	addi	r16,sp,120
    3400:	a08003cc 	andi	r2,r20,15
    3404:	b006973a 	slli	r3,r22,28
    3408:	2085883a 	add	r2,r4,r2
    340c:	a028d13a 	srli	r20,r20,4
    3410:	10800003 	ldbu	r2,0(r2)
    3414:	b02cd13a 	srli	r22,r22,4
    3418:	843fffc4 	addi	r16,r16,-1
    341c:	1d28b03a 	or	r20,r3,r20
    3420:	80800005 	stb	r2,0(r16)
    3424:	a584b03a 	or	r2,r20,r22
    3428:	103ff51e 	bne	r2,zero,3400 <___svfprintf_internal_r+0xb2c>
    342c:	d8c02817 	ldw	r3,160(sp)
    3430:	1c07c83a 	sub	r3,r3,r16
    3434:	d8c02e15 	stw	r3,184(sp)
    3438:	003ece06 	br	2f74 <___svfprintf_internal_r+0x6a0>
    343c:	d8c02d17 	ldw	r3,180(sp)
    3440:	d9002d17 	ldw	r4,180(sp)
    3444:	d8002785 	stb	zero,158(sp)
    3448:	18800017 	ldw	r2,0(r3)
    344c:	21000104 	addi	r4,r4,4
    3450:	00c00044 	movi	r3,1
    3454:	d8c02a15 	stw	r3,168(sp)
    3458:	d8801405 	stb	r2,80(sp)
    345c:	d9002d15 	stw	r4,180(sp)
    3460:	d8c02e15 	stw	r3,184(sp)
    3464:	d8002915 	stw	zero,164(sp)
    3468:	d8003215 	stw	zero,200(sp)
    346c:	dc001404 	addi	r16,sp,80
    3470:	0039883a 	mov	fp,zero
    3474:	003ecc06 	br	2fa8 <___svfprintf_internal_r+0x6d4>
    3478:	18c03fcc 	andi	r3,r3,255
    347c:	183e9226 	beq	r3,zero,2ec8 <___svfprintf_internal_r+0x5f4>
    3480:	d9c02785 	stb	r7,158(sp)
    3484:	003e9006 	br	2ec8 <___svfprintf_internal_r+0x5f4>
    3488:	00c00044 	movi	r3,1
    348c:	01c00ac4 	movi	r7,43
    3490:	bc400007 	ldb	r17,0(r23)
    3494:	003d6306 	br	2a24 <___svfprintf_internal_r+0x150>
    3498:	94800814 	ori	r18,r18,32
    349c:	bc400007 	ldb	r17,0(r23)
    34a0:	003d6006 	br	2a24 <___svfprintf_internal_r+0x150>
    34a4:	d8c02d17 	ldw	r3,180(sp)
    34a8:	d8002785 	stb	zero,158(sp)
    34ac:	1c000017 	ldw	r16,0(r3)
    34b0:	1d000104 	addi	r20,r3,4
    34b4:	80040f26 	beq	r16,zero,44f4 <___svfprintf_internal_r+0x1c20>
    34b8:	d9002917 	ldw	r4,164(sp)
    34bc:	2003dc16 	blt	r4,zero,4430 <___svfprintf_internal_r+0x1b5c>
    34c0:	200d883a 	mov	r6,r4
    34c4:	000b883a 	mov	r5,zero
    34c8:	8009883a 	mov	r4,r16
    34cc:	da003e15 	stw	r8,248(sp)
    34d0:	0009e080 	call	9e08 <memchr>
    34d4:	da003e17 	ldw	r8,248(sp)
    34d8:	10045826 	beq	r2,zero,463c <___svfprintf_internal_r+0x1d68>
    34dc:	1405c83a 	sub	r2,r2,r16
    34e0:	d8802e15 	stw	r2,184(sp)
    34e4:	1003d816 	blt	r2,zero,4448 <___svfprintf_internal_r+0x1b74>
    34e8:	df002783 	ldbu	fp,158(sp)
    34ec:	d8802a15 	stw	r2,168(sp)
    34f0:	dd002d15 	stw	r20,180(sp)
    34f4:	d8002915 	stw	zero,164(sp)
    34f8:	d8003215 	stw	zero,200(sp)
    34fc:	003ea306 	br	2f8c <___svfprintf_internal_r+0x6b8>
    3500:	18c03fcc 	andi	r3,r3,255
    3504:	183f8c26 	beq	r3,zero,3338 <___svfprintf_internal_r+0xa64>
    3508:	d9c02785 	stb	r7,158(sp)
    350c:	003f8a06 	br	3338 <___svfprintf_internal_r+0xa64>
    3510:	18c03fcc 	andi	r3,r3,255
    3514:	1805631e 	bne	r3,zero,4aa4 <___svfprintf_internal_r+0x21d0>
    3518:	014000b4 	movhi	r5,2
    351c:	297d5a04 	addi	r5,r5,-2712
    3520:	d9403a15 	stw	r5,232(sp)
    3524:	9080080c 	andi	r2,r18,32
    3528:	103f9f1e 	bne	r2,zero,33a8 <___svfprintf_internal_r+0xad4>
    352c:	9080040c 	andi	r2,r18,16
    3530:	10029c26 	beq	r2,zero,3fa4 <___svfprintf_internal_r+0x16d0>
    3534:	d8c02d17 	ldw	r3,180(sp)
    3538:	002d883a 	mov	r22,zero
    353c:	1d000017 	ldw	r20,0(r3)
    3540:	18c00104 	addi	r3,r3,4
    3544:	d8c02d15 	stw	r3,180(sp)
    3548:	003f9c06 	br	33bc <___svfprintf_internal_r+0xae8>
    354c:	94800054 	ori	r18,r18,1
    3550:	bc400007 	ldb	r17,0(r23)
    3554:	003d3306 	br	2a24 <___svfprintf_internal_r+0x150>
    3558:	38803fcc 	andi	r2,r7,255
    355c:	1080201c 	xori	r2,r2,128
    3560:	10bfe004 	addi	r2,r2,-128
    3564:	1002971e 	bne	r2,zero,3fc4 <___svfprintf_internal_r+0x16f0>
    3568:	00c00044 	movi	r3,1
    356c:	01c00804 	movi	r7,32
    3570:	bc400007 	ldb	r17,0(r23)
    3574:	003d2b06 	br	2a24 <___svfprintf_internal_r+0x150>
    3578:	18c03fcc 	andi	r3,r3,255
    357c:	183e2326 	beq	r3,zero,2e0c <___svfprintf_internal_r+0x538>
    3580:	d9c02785 	stb	r7,158(sp)
    3584:	003e2106 	br	2e0c <___svfprintf_internal_r+0x538>
    3588:	bc400007 	ldb	r17,0(r23)
    358c:	8a430426 	beq	r17,r9,41a0 <___svfprintf_internal_r+0x18cc>
    3590:	94800414 	ori	r18,r18,16
    3594:	003d2306 	br	2a24 <___svfprintf_internal_r+0x150>
    3598:	18c03fcc 	andi	r3,r3,255
    359c:	18053f1e 	bne	r3,zero,4a9c <___svfprintf_internal_r+0x21c8>
    35a0:	9080080c 	andi	r2,r18,32
    35a4:	10028926 	beq	r2,zero,3fcc <___svfprintf_internal_r+0x16f8>
    35a8:	d9402d17 	ldw	r5,180(sp)
    35ac:	d9002f17 	ldw	r4,188(sp)
    35b0:	28800017 	ldw	r2,0(r5)
    35b4:	2007d7fa 	srai	r3,r4,31
    35b8:	29400104 	addi	r5,r5,4
    35bc:	d9402d15 	stw	r5,180(sp)
    35c0:	11000015 	stw	r4,0(r2)
    35c4:	10c00115 	stw	r3,4(r2)
    35c8:	003ced06 	br	2980 <___svfprintf_internal_r+0xac>
    35cc:	94801014 	ori	r18,r18,64
    35d0:	bc400007 	ldb	r17,0(r23)
    35d4:	003d1306 	br	2a24 <___svfprintf_internal_r+0x150>
    35d8:	010000b4 	movhi	r4,2
    35dc:	213d5a04 	addi	r4,r4,-2712
    35e0:	0039883a 	mov	fp,zero
    35e4:	d9003a15 	stw	r4,232(sp)
    35e8:	04401e04 	movi	r17,120
    35ec:	003f8206 	br	33f8 <___svfprintf_internal_r+0xb24>
    35f0:	18c03fcc 	andi	r3,r3,255
    35f4:	1805221e 	bne	r3,zero,4a80 <___svfprintf_internal_r+0x21ac>
    35f8:	883d9526 	beq	r17,zero,2c50 <___svfprintf_internal_r+0x37c>
    35fc:	00c00044 	movi	r3,1
    3600:	d8c02a15 	stw	r3,168(sp)
    3604:	dc401405 	stb	r17,80(sp)
    3608:	d8002785 	stb	zero,158(sp)
    360c:	003f9406 	br	3460 <___svfprintf_internal_r+0xb8c>
    3610:	010000b4 	movhi	r4,2
    3614:	213d5a04 	addi	r4,r4,-2712
    3618:	d9003a15 	stw	r4,232(sp)
    361c:	d8c02d15 	stw	r3,180(sp)
    3620:	1025883a 	mov	r18,r2
    3624:	04401e04 	movi	r17,120
    3628:	a584b03a 	or	r2,r20,r22
    362c:	1000fa1e 	bne	r2,zero,3a18 <___svfprintf_internal_r+0x1144>
    3630:	0039883a 	mov	fp,zero
    3634:	00800084 	movi	r2,2
    3638:	10803fcc 	andi	r2,r2,255
    363c:	00c00044 	movi	r3,1
    3640:	10c21626 	beq	r2,r3,3e9c <___svfprintf_internal_r+0x15c8>
    3644:	00c00084 	movi	r3,2
    3648:	10fe301e 	bne	r2,r3,2f0c <___svfprintf_internal_r+0x638>
    364c:	003d7606 	br	2c28 <___svfprintf_internal_r+0x354>
    3650:	d8c02017 	ldw	r3,128(sp)
    3654:	003e9506 	br	30ac <___svfprintf_internal_r+0x7d8>
    3658:	00801944 	movi	r2,101
    365c:	14407c0e 	bge	r2,r17,3850 <___svfprintf_internal_r+0xf7c>
    3660:	d9003617 	ldw	r4,216(sp)
    3664:	d9403717 	ldw	r5,220(sp)
    3668:	000d883a 	mov	r6,zero
    366c:	000f883a 	mov	r7,zero
    3670:	d8c03d15 	stw	r3,244(sp)
    3674:	da003e15 	stw	r8,248(sp)
    3678:	00111cc0 	call	111cc <__eqdf2>
    367c:	d8c03d17 	ldw	r3,244(sp)
    3680:	da003e17 	ldw	r8,248(sp)
    3684:	1000f51e 	bne	r2,zero,3a5c <___svfprintf_internal_r+0x1188>
    3688:	d8801f17 	ldw	r2,124(sp)
    368c:	010000b4 	movhi	r4,2
    3690:	213d6104 	addi	r4,r4,-2684
    3694:	18c00044 	addi	r3,r3,1
    3698:	10800044 	addi	r2,r2,1
    369c:	41000015 	stw	r4,0(r8)
    36a0:	01000044 	movi	r4,1
    36a4:	41000115 	stw	r4,4(r8)
    36a8:	d8c02015 	stw	r3,128(sp)
    36ac:	d8801f15 	stw	r2,124(sp)
    36b0:	010001c4 	movi	r4,7
    36b4:	20826616 	blt	r4,r2,4050 <___svfprintf_internal_r+0x177c>
    36b8:	42000204 	addi	r8,r8,8
    36bc:	d8802617 	ldw	r2,152(sp)
    36c0:	d9403317 	ldw	r5,204(sp)
    36c4:	11400216 	blt	r2,r5,36d0 <___svfprintf_internal_r+0xdfc>
    36c8:	9080004c 	andi	r2,r18,1
    36cc:	103ed526 	beq	r2,zero,3224 <___svfprintf_internal_r+0x950>
    36d0:	d8803817 	ldw	r2,224(sp)
    36d4:	d9003417 	ldw	r4,208(sp)
    36d8:	d9403817 	ldw	r5,224(sp)
    36dc:	1887883a 	add	r3,r3,r2
    36e0:	d8801f17 	ldw	r2,124(sp)
    36e4:	41000015 	stw	r4,0(r8)
    36e8:	41400115 	stw	r5,4(r8)
    36ec:	10800044 	addi	r2,r2,1
    36f0:	d8c02015 	stw	r3,128(sp)
    36f4:	d8801f15 	stw	r2,124(sp)
    36f8:	010001c4 	movi	r4,7
    36fc:	2082af16 	blt	r4,r2,41bc <___svfprintf_internal_r+0x18e8>
    3700:	42000204 	addi	r8,r8,8
    3704:	d8803317 	ldw	r2,204(sp)
    3708:	143fffc4 	addi	r16,r2,-1
    370c:	043ec50e 	bge	zero,r16,3224 <___svfprintf_internal_r+0x950>
    3710:	04400404 	movi	r17,16
    3714:	d8801f17 	ldw	r2,124(sp)
    3718:	8c00860e 	bge	r17,r16,3934 <___svfprintf_internal_r+0x1060>
    371c:	014000b4 	movhi	r5,2
    3720:	297d6184 	addi	r5,r5,-2682
    3724:	d9402b15 	stw	r5,172(sp)
    3728:	058001c4 	movi	r22,7
    372c:	dd002c17 	ldw	r20,176(sp)
    3730:	00000306 	br	3740 <___svfprintf_internal_r+0xe6c>
    3734:	42000204 	addi	r8,r8,8
    3738:	843ffc04 	addi	r16,r16,-16
    373c:	8c00800e 	bge	r17,r16,3940 <___svfprintf_internal_r+0x106c>
    3740:	18c00404 	addi	r3,r3,16
    3744:	10800044 	addi	r2,r2,1
    3748:	45400015 	stw	r21,0(r8)
    374c:	44400115 	stw	r17,4(r8)
    3750:	d8c02015 	stw	r3,128(sp)
    3754:	d8801f15 	stw	r2,124(sp)
    3758:	b0bff60e 	bge	r22,r2,3734 <___svfprintf_internal_r+0xe60>
    375c:	d9801e04 	addi	r6,sp,120
    3760:	a00b883a 	mov	r5,r20
    3764:	9809883a 	mov	r4,r19
    3768:	000b4d00 	call	b4d0 <__ssprint_r>
    376c:	103d3e1e 	bne	r2,zero,2c68 <___svfprintf_internal_r+0x394>
    3770:	d8c02017 	ldw	r3,128(sp)
    3774:	d8801f17 	ldw	r2,124(sp)
    3778:	da000404 	addi	r8,sp,16
    377c:	003fee06 	br	3738 <___svfprintf_internal_r+0xe64>
    3780:	d9403117 	ldw	r5,196(sp)
    3784:	d8802a17 	ldw	r2,168(sp)
    3788:	28adc83a 	sub	r22,r5,r2
    378c:	05be650e 	bge	zero,r22,3124 <___svfprintf_internal_r+0x850>
    3790:	07000404 	movi	fp,16
    3794:	d8801f17 	ldw	r2,124(sp)
    3798:	e583a20e 	bge	fp,r22,4624 <___svfprintf_internal_r+0x1d50>
    379c:	014000b4 	movhi	r5,2
    37a0:	297d6184 	addi	r5,r5,-2682
    37a4:	dc403015 	stw	r17,192(sp)
    37a8:	d9402b15 	stw	r5,172(sp)
    37ac:	b023883a 	mov	r17,r22
    37b0:	050001c4 	movi	r20,7
    37b4:	902d883a 	mov	r22,r18
    37b8:	8025883a 	mov	r18,r16
    37bc:	dc002c17 	ldw	r16,176(sp)
    37c0:	00000306 	br	37d0 <___svfprintf_internal_r+0xefc>
    37c4:	8c7ffc04 	addi	r17,r17,-16
    37c8:	42000204 	addi	r8,r8,8
    37cc:	e440110e 	bge	fp,r17,3814 <___svfprintf_internal_r+0xf40>
    37d0:	18c00404 	addi	r3,r3,16
    37d4:	10800044 	addi	r2,r2,1
    37d8:	45400015 	stw	r21,0(r8)
    37dc:	47000115 	stw	fp,4(r8)
    37e0:	d8c02015 	stw	r3,128(sp)
    37e4:	d8801f15 	stw	r2,124(sp)
    37e8:	a0bff60e 	bge	r20,r2,37c4 <___svfprintf_internal_r+0xef0>
    37ec:	d9801e04 	addi	r6,sp,120
    37f0:	800b883a 	mov	r5,r16
    37f4:	9809883a 	mov	r4,r19
    37f8:	000b4d00 	call	b4d0 <__ssprint_r>
    37fc:	103d1a1e 	bne	r2,zero,2c68 <___svfprintf_internal_r+0x394>
    3800:	8c7ffc04 	addi	r17,r17,-16
    3804:	d8c02017 	ldw	r3,128(sp)
    3808:	d8801f17 	ldw	r2,124(sp)
    380c:	da000404 	addi	r8,sp,16
    3810:	e47fef16 	blt	fp,r17,37d0 <___svfprintf_internal_r+0xefc>
    3814:	9021883a 	mov	r16,r18
    3818:	b025883a 	mov	r18,r22
    381c:	882d883a 	mov	r22,r17
    3820:	dc403017 	ldw	r17,192(sp)
    3824:	d9002b17 	ldw	r4,172(sp)
    3828:	1d87883a 	add	r3,r3,r22
    382c:	10800044 	addi	r2,r2,1
    3830:	41000015 	stw	r4,0(r8)
    3834:	45800115 	stw	r22,4(r8)
    3838:	d8c02015 	stw	r3,128(sp)
    383c:	d8801f15 	stw	r2,124(sp)
    3840:	010001c4 	movi	r4,7
    3844:	20819a16 	blt	r4,r2,3eb0 <___svfprintf_internal_r+0x15dc>
    3848:	42000204 	addi	r8,r8,8
    384c:	003e3506 	br	3124 <___svfprintf_internal_r+0x850>
    3850:	d9403317 	ldw	r5,204(sp)
    3854:	00800044 	movi	r2,1
    3858:	18c00044 	addi	r3,r3,1
    385c:	1141710e 	bge	r2,r5,3e24 <___svfprintf_internal_r+0x1550>
    3860:	dc401f17 	ldw	r17,124(sp)
    3864:	00800044 	movi	r2,1
    3868:	40800115 	stw	r2,4(r8)
    386c:	8c400044 	addi	r17,r17,1
    3870:	44000015 	stw	r16,0(r8)
    3874:	d8c02015 	stw	r3,128(sp)
    3878:	dc401f15 	stw	r17,124(sp)
    387c:	008001c4 	movi	r2,7
    3880:	14417416 	blt	r2,r17,3e54 <___svfprintf_internal_r+0x1580>
    3884:	42000204 	addi	r8,r8,8
    3888:	d8803817 	ldw	r2,224(sp)
    388c:	d9003417 	ldw	r4,208(sp)
    3890:	8c400044 	addi	r17,r17,1
    3894:	10c7883a 	add	r3,r2,r3
    3898:	40800115 	stw	r2,4(r8)
    389c:	41000015 	stw	r4,0(r8)
    38a0:	d8c02015 	stw	r3,128(sp)
    38a4:	dc401f15 	stw	r17,124(sp)
    38a8:	008001c4 	movi	r2,7
    38ac:	14417216 	blt	r2,r17,3e78 <___svfprintf_internal_r+0x15a4>
    38b0:	45800204 	addi	r22,r8,8
    38b4:	d9003617 	ldw	r4,216(sp)
    38b8:	d9403717 	ldw	r5,220(sp)
    38bc:	000d883a 	mov	r6,zero
    38c0:	000f883a 	mov	r7,zero
    38c4:	d8c03d15 	stw	r3,244(sp)
    38c8:	00111cc0 	call	111cc <__eqdf2>
    38cc:	d8c03d17 	ldw	r3,244(sp)
    38d0:	1000b326 	beq	r2,zero,3ba0 <___svfprintf_internal_r+0x12cc>
    38d4:	d9403317 	ldw	r5,204(sp)
    38d8:	84000044 	addi	r16,r16,1
    38dc:	8c400044 	addi	r17,r17,1
    38e0:	28bfffc4 	addi	r2,r5,-1
    38e4:	1887883a 	add	r3,r3,r2
    38e8:	b0800115 	stw	r2,4(r22)
    38ec:	b4000015 	stw	r16,0(r22)
    38f0:	d8c02015 	stw	r3,128(sp)
    38f4:	dc401f15 	stw	r17,124(sp)
    38f8:	008001c4 	movi	r2,7
    38fc:	1440d216 	blt	r2,r17,3c48 <___svfprintf_internal_r+0x1374>
    3900:	b5800204 	addi	r22,r22,8
    3904:	d9003b17 	ldw	r4,236(sp)
    3908:	df0022c4 	addi	fp,sp,139
    390c:	8c400044 	addi	r17,r17,1
    3910:	20c7883a 	add	r3,r4,r3
    3914:	b7000015 	stw	fp,0(r22)
    3918:	b1000115 	stw	r4,4(r22)
    391c:	d8c02015 	stw	r3,128(sp)
    3920:	dc401f15 	stw	r17,124(sp)
    3924:	008001c4 	movi	r2,7
    3928:	14400e16 	blt	r2,r17,3964 <___svfprintf_internal_r+0x1090>
    392c:	b2000204 	addi	r8,r22,8
    3930:	003e3c06 	br	3224 <___svfprintf_internal_r+0x950>
    3934:	010000b4 	movhi	r4,2
    3938:	213d6184 	addi	r4,r4,-2682
    393c:	d9002b15 	stw	r4,172(sp)
    3940:	d9002b17 	ldw	r4,172(sp)
    3944:	1c07883a 	add	r3,r3,r16
    3948:	44000115 	stw	r16,4(r8)
    394c:	41000015 	stw	r4,0(r8)
    3950:	10800044 	addi	r2,r2,1
    3954:	d8c02015 	stw	r3,128(sp)
    3958:	d8801f15 	stw	r2,124(sp)
    395c:	010001c4 	movi	r4,7
    3960:	20be2f0e 	bge	r4,r2,3220 <___svfprintf_internal_r+0x94c>
    3964:	d9402c17 	ldw	r5,176(sp)
    3968:	d9801e04 	addi	r6,sp,120
    396c:	9809883a 	mov	r4,r19
    3970:	000b4d00 	call	b4d0 <__ssprint_r>
    3974:	103cbc1e 	bne	r2,zero,2c68 <___svfprintf_internal_r+0x394>
    3978:	d8c02017 	ldw	r3,128(sp)
    397c:	da000404 	addi	r8,sp,16
    3980:	003e2806 	br	3224 <___svfprintf_internal_r+0x950>
    3984:	d9402c17 	ldw	r5,176(sp)
    3988:	d9801e04 	addi	r6,sp,120
    398c:	9809883a 	mov	r4,r19
    3990:	000b4d00 	call	b4d0 <__ssprint_r>
    3994:	103e5f26 	beq	r2,zero,3314 <___svfprintf_internal_r+0xa40>
    3998:	003cb306 	br	2c68 <___svfprintf_internal_r+0x394>
    399c:	d9402c17 	ldw	r5,176(sp)
    39a0:	d9801e04 	addi	r6,sp,120
    39a4:	9809883a 	mov	r4,r19
    39a8:	000b4d00 	call	b4d0 <__ssprint_r>
    39ac:	103cae1e 	bne	r2,zero,2c68 <___svfprintf_internal_r+0x394>
    39b0:	d8c02017 	ldw	r3,128(sp)
    39b4:	da000404 	addi	r8,sp,16
    39b8:	003e0d06 	br	31f0 <___svfprintf_internal_r+0x91c>
    39bc:	d9402c17 	ldw	r5,176(sp)
    39c0:	d9801e04 	addi	r6,sp,120
    39c4:	9809883a 	mov	r4,r19
    39c8:	000b4d00 	call	b4d0 <__ssprint_r>
    39cc:	103ca61e 	bne	r2,zero,2c68 <___svfprintf_internal_r+0x394>
    39d0:	d8c02017 	ldw	r3,128(sp)
    39d4:	da000404 	addi	r8,sp,16
    39d8:	003dc106 	br	30e0 <___svfprintf_internal_r+0x80c>
    39dc:	d9402c17 	ldw	r5,176(sp)
    39e0:	d9801e04 	addi	r6,sp,120
    39e4:	9809883a 	mov	r4,r19
    39e8:	000b4d00 	call	b4d0 <__ssprint_r>
    39ec:	103c9e1e 	bne	r2,zero,2c68 <___svfprintf_internal_r+0x394>
    39f0:	d8c02017 	ldw	r3,128(sp)
    39f4:	da000404 	addi	r8,sp,16
    39f8:	003dc706 	br	3118 <___svfprintf_internal_r+0x844>
    39fc:	d8802917 	ldw	r2,164(sp)
    3a00:	d8002785 	stb	zero,158(sp)
    3a04:	103f0816 	blt	r2,zero,3628 <___svfprintf_internal_r+0xd54>
    3a08:	00ffdfc4 	movi	r3,-129
    3a0c:	a584b03a 	or	r2,r20,r22
    3a10:	90e4703a 	and	r18,r18,r3
    3a14:	103c8126 	beq	r2,zero,2c1c <___svfprintf_internal_r+0x348>
    3a18:	0039883a 	mov	fp,zero
    3a1c:	003e7606 	br	33f8 <___svfprintf_internal_r+0xb24>
    3a20:	9080040c 	andi	r2,r18,16
    3a24:	10013d26 	beq	r2,zero,3f1c <___svfprintf_internal_r+0x1648>
    3a28:	d9002d17 	ldw	r4,180(sp)
    3a2c:	d9402917 	ldw	r5,164(sp)
    3a30:	d8002785 	stb	zero,158(sp)
    3a34:	20800104 	addi	r2,r4,4
    3a38:	25000017 	ldw	r20,0(r4)
    3a3c:	002d883a 	mov	r22,zero
    3a40:	28013f16 	blt	r5,zero,3f40 <___svfprintf_internal_r+0x166c>
    3a44:	00ffdfc4 	movi	r3,-129
    3a48:	d8802d15 	stw	r2,180(sp)
    3a4c:	90e4703a 	and	r18,r18,r3
    3a50:	a03d2b26 	beq	r20,zero,2f00 <___svfprintf_internal_r+0x62c>
    3a54:	0039883a 	mov	fp,zero
    3a58:	003d2e06 	br	2f14 <___svfprintf_internal_r+0x640>
    3a5c:	dc402617 	ldw	r17,152(sp)
    3a60:	0441830e 	bge	zero,r17,4070 <___svfprintf_internal_r+0x179c>
    3a64:	dc403217 	ldw	r17,200(sp)
    3a68:	d8803317 	ldw	r2,204(sp)
    3a6c:	1440010e 	bge	r2,r17,3a74 <___svfprintf_internal_r+0x11a0>
    3a70:	1023883a 	mov	r17,r2
    3a74:	04400a0e 	bge	zero,r17,3aa0 <___svfprintf_internal_r+0x11cc>
    3a78:	d8801f17 	ldw	r2,124(sp)
    3a7c:	1c47883a 	add	r3,r3,r17
    3a80:	44000015 	stw	r16,0(r8)
    3a84:	10800044 	addi	r2,r2,1
    3a88:	44400115 	stw	r17,4(r8)
    3a8c:	d8c02015 	stw	r3,128(sp)
    3a90:	d8801f15 	stw	r2,124(sp)
    3a94:	010001c4 	movi	r4,7
    3a98:	20827516 	blt	r4,r2,4470 <___svfprintf_internal_r+0x1b9c>
    3a9c:	42000204 	addi	r8,r8,8
    3aa0:	88027b16 	blt	r17,zero,4490 <___svfprintf_internal_r+0x1bbc>
    3aa4:	d9003217 	ldw	r4,200(sp)
    3aa8:	2463c83a 	sub	r17,r4,r17
    3aac:	0440990e 	bge	zero,r17,3d14 <___svfprintf_internal_r+0x1440>
    3ab0:	05800404 	movi	r22,16
    3ab4:	d8801f17 	ldw	r2,124(sp)
    3ab8:	b441530e 	bge	r22,r17,4008 <___svfprintf_internal_r+0x1734>
    3abc:	010000b4 	movhi	r4,2
    3ac0:	213d6184 	addi	r4,r4,-2682
    3ac4:	d9002b15 	stw	r4,172(sp)
    3ac8:	070001c4 	movi	fp,7
    3acc:	dd002c17 	ldw	r20,176(sp)
    3ad0:	00000306 	br	3ae0 <___svfprintf_internal_r+0x120c>
    3ad4:	42000204 	addi	r8,r8,8
    3ad8:	8c7ffc04 	addi	r17,r17,-16
    3adc:	b4414d0e 	bge	r22,r17,4014 <___svfprintf_internal_r+0x1740>
    3ae0:	18c00404 	addi	r3,r3,16
    3ae4:	10800044 	addi	r2,r2,1
    3ae8:	45400015 	stw	r21,0(r8)
    3aec:	45800115 	stw	r22,4(r8)
    3af0:	d8c02015 	stw	r3,128(sp)
    3af4:	d8801f15 	stw	r2,124(sp)
    3af8:	e0bff60e 	bge	fp,r2,3ad4 <___svfprintf_internal_r+0x1200>
    3afc:	d9801e04 	addi	r6,sp,120
    3b00:	a00b883a 	mov	r5,r20
    3b04:	9809883a 	mov	r4,r19
    3b08:	000b4d00 	call	b4d0 <__ssprint_r>
    3b0c:	103c561e 	bne	r2,zero,2c68 <___svfprintf_internal_r+0x394>
    3b10:	d8c02017 	ldw	r3,128(sp)
    3b14:	d8801f17 	ldw	r2,124(sp)
    3b18:	da000404 	addi	r8,sp,16
    3b1c:	003fee06 	br	3ad8 <___svfprintf_internal_r+0x1204>
    3b20:	d9402c17 	ldw	r5,176(sp)
    3b24:	d9801e04 	addi	r6,sp,120
    3b28:	9809883a 	mov	r4,r19
    3b2c:	000b4d00 	call	b4d0 <__ssprint_r>
    3b30:	103c4d1e 	bne	r2,zero,2c68 <___svfprintf_internal_r+0x394>
    3b34:	d8c02017 	ldw	r3,128(sp)
    3b38:	df002787 	ldb	fp,158(sp)
    3b3c:	da000404 	addi	r8,sp,16
    3b40:	003d5a06 	br	30ac <___svfprintf_internal_r+0x7d8>
    3b44:	9080040c 	andi	r2,r18,16
    3b48:	10005c26 	beq	r2,zero,3cbc <___svfprintf_internal_r+0x13e8>
    3b4c:	d9402d17 	ldw	r5,180(sp)
    3b50:	d8c02917 	ldw	r3,164(sp)
    3b54:	d8002785 	stb	zero,158(sp)
    3b58:	28800104 	addi	r2,r5,4
    3b5c:	2d000017 	ldw	r20,0(r5)
    3b60:	002d883a 	mov	r22,zero
    3b64:	18005e16 	blt	r3,zero,3ce0 <___svfprintf_internal_r+0x140c>
    3b68:	00ffdfc4 	movi	r3,-129
    3b6c:	d8802d15 	stw	r2,180(sp)
    3b70:	90e4703a 	and	r18,r18,r3
    3b74:	0039883a 	mov	fp,zero
    3b78:	a03dfe26 	beq	r20,zero,3374 <___svfprintf_internal_r+0xaa0>
    3b7c:	00800244 	movi	r2,9
    3b80:	153cb336 	bltu	r2,r20,2e50 <___svfprintf_internal_r+0x57c>
    3b84:	a5000c04 	addi	r20,r20,48
    3b88:	dc001dc4 	addi	r16,sp,119
    3b8c:	dd001dc5 	stb	r20,119(sp)
    3b90:	d8c02817 	ldw	r3,160(sp)
    3b94:	1c07c83a 	sub	r3,r3,r16
    3b98:	d8c02e15 	stw	r3,184(sp)
    3b9c:	003cf506 	br	2f74 <___svfprintf_internal_r+0x6a0>
    3ba0:	d8803317 	ldw	r2,204(sp)
    3ba4:	143fffc4 	addi	r16,r2,-1
    3ba8:	043f560e 	bge	zero,r16,3904 <___svfprintf_internal_r+0x1030>
    3bac:	07000404 	movi	fp,16
    3bb0:	e403530e 	bge	fp,r16,4900 <___svfprintf_internal_r+0x202c>
    3bb4:	014000b4 	movhi	r5,2
    3bb8:	297d6184 	addi	r5,r5,-2682
    3bbc:	d9402b15 	stw	r5,172(sp)
    3bc0:	01c001c4 	movi	r7,7
    3bc4:	dd002c17 	ldw	r20,176(sp)
    3bc8:	00000306 	br	3bd8 <___svfprintf_internal_r+0x1304>
    3bcc:	843ffc04 	addi	r16,r16,-16
    3bd0:	b5800204 	addi	r22,r22,8
    3bd4:	e400130e 	bge	fp,r16,3c24 <___svfprintf_internal_r+0x1350>
    3bd8:	18c00404 	addi	r3,r3,16
    3bdc:	8c400044 	addi	r17,r17,1
    3be0:	b5400015 	stw	r21,0(r22)
    3be4:	b7000115 	stw	fp,4(r22)
    3be8:	d8c02015 	stw	r3,128(sp)
    3bec:	dc401f15 	stw	r17,124(sp)
    3bf0:	3c7ff60e 	bge	r7,r17,3bcc <___svfprintf_internal_r+0x12f8>
    3bf4:	d9801e04 	addi	r6,sp,120
    3bf8:	a00b883a 	mov	r5,r20
    3bfc:	9809883a 	mov	r4,r19
    3c00:	d9c03d15 	stw	r7,244(sp)
    3c04:	000b4d00 	call	b4d0 <__ssprint_r>
    3c08:	d9c03d17 	ldw	r7,244(sp)
    3c0c:	103c161e 	bne	r2,zero,2c68 <___svfprintf_internal_r+0x394>
    3c10:	843ffc04 	addi	r16,r16,-16
    3c14:	d8c02017 	ldw	r3,128(sp)
    3c18:	dc401f17 	ldw	r17,124(sp)
    3c1c:	dd800404 	addi	r22,sp,16
    3c20:	e43fed16 	blt	fp,r16,3bd8 <___svfprintf_internal_r+0x1304>
    3c24:	d8802b17 	ldw	r2,172(sp)
    3c28:	1c07883a 	add	r3,r3,r16
    3c2c:	8c400044 	addi	r17,r17,1
    3c30:	b0800015 	stw	r2,0(r22)
    3c34:	b4000115 	stw	r16,4(r22)
    3c38:	d8c02015 	stw	r3,128(sp)
    3c3c:	dc401f15 	stw	r17,124(sp)
    3c40:	008001c4 	movi	r2,7
    3c44:	147f2e0e 	bge	r2,r17,3900 <___svfprintf_internal_r+0x102c>
    3c48:	d9402c17 	ldw	r5,176(sp)
    3c4c:	d9801e04 	addi	r6,sp,120
    3c50:	9809883a 	mov	r4,r19
    3c54:	000b4d00 	call	b4d0 <__ssprint_r>
    3c58:	103c031e 	bne	r2,zero,2c68 <___svfprintf_internal_r+0x394>
    3c5c:	d8c02017 	ldw	r3,128(sp)
    3c60:	dc401f17 	ldw	r17,124(sp)
    3c64:	dd800404 	addi	r22,sp,16
    3c68:	003f2606 	br	3904 <___svfprintf_internal_r+0x1030>
    3c6c:	9080040c 	andi	r2,r18,16
    3c70:	1000c326 	beq	r2,zero,3f80 <___svfprintf_internal_r+0x16ac>
    3c74:	d8802d17 	ldw	r2,180(sp)
    3c78:	15000017 	ldw	r20,0(r2)
    3c7c:	10800104 	addi	r2,r2,4
    3c80:	d8802d15 	stw	r2,180(sp)
    3c84:	a02dd7fa 	srai	r22,r20,31
    3c88:	b005883a 	mov	r2,r22
    3c8c:	103c680e 	bge	r2,zero,2e30 <___svfprintf_internal_r+0x55c>
    3c90:	0529c83a 	sub	r20,zero,r20
    3c94:	a004c03a 	cmpne	r2,r20,zero
    3c98:	05adc83a 	sub	r22,zero,r22
    3c9c:	b0adc83a 	sub	r22,r22,r2
    3ca0:	d8802917 	ldw	r2,164(sp)
    3ca4:	07000b44 	movi	fp,45
    3ca8:	df002785 	stb	fp,158(sp)
    3cac:	10022e16 	blt	r2,zero,4568 <___svfprintf_internal_r+0x1c94>
    3cb0:	00bfdfc4 	movi	r2,-129
    3cb4:	90a4703a 	and	r18,r18,r2
    3cb8:	003c6406 	br	2e4c <___svfprintf_internal_r+0x578>
    3cbc:	9080100c 	andi	r2,r18,64
    3cc0:	d8002785 	stb	zero,158(sp)
    3cc4:	10012526 	beq	r2,zero,415c <___svfprintf_internal_r+0x1888>
    3cc8:	d9002d17 	ldw	r4,180(sp)
    3ccc:	d9402917 	ldw	r5,164(sp)
    3cd0:	002d883a 	mov	r22,zero
    3cd4:	20800104 	addi	r2,r4,4
    3cd8:	2500000b 	ldhu	r20,0(r4)
    3cdc:	283fa20e 	bge	r5,zero,3b68 <___svfprintf_internal_r+0x1294>
    3ce0:	d8802d15 	stw	r2,180(sp)
    3ce4:	0039883a 	mov	fp,zero
    3ce8:	a584b03a 	or	r2,r20,r22
    3cec:	103c571e 	bne	r2,zero,2e4c <___svfprintf_internal_r+0x578>
    3cf0:	00800044 	movi	r2,1
    3cf4:	003e5006 	br	3638 <___svfprintf_internal_r+0xd64>
    3cf8:	d9402c17 	ldw	r5,176(sp)
    3cfc:	d9801e04 	addi	r6,sp,120
    3d00:	9809883a 	mov	r4,r19
    3d04:	000b4d00 	call	b4d0 <__ssprint_r>
    3d08:	103bd71e 	bne	r2,zero,2c68 <___svfprintf_internal_r+0x394>
    3d0c:	d8c02017 	ldw	r3,128(sp)
    3d10:	da000404 	addi	r8,sp,16
    3d14:	d9003217 	ldw	r4,200(sp)
    3d18:	d8802617 	ldw	r2,152(sp)
    3d1c:	d9403317 	ldw	r5,204(sp)
    3d20:	8123883a 	add	r17,r16,r4
    3d24:	11400216 	blt	r2,r5,3d30 <___svfprintf_internal_r+0x145c>
    3d28:	9100004c 	andi	r4,r18,1
    3d2c:	20000d26 	beq	r4,zero,3d64 <___svfprintf_internal_r+0x1490>
    3d30:	d9003817 	ldw	r4,224(sp)
    3d34:	d9403417 	ldw	r5,208(sp)
    3d38:	1907883a 	add	r3,r3,r4
    3d3c:	d9001f17 	ldw	r4,124(sp)
    3d40:	41400015 	stw	r5,0(r8)
    3d44:	d9403817 	ldw	r5,224(sp)
    3d48:	21000044 	addi	r4,r4,1
    3d4c:	d8c02015 	stw	r3,128(sp)
    3d50:	41400115 	stw	r5,4(r8)
    3d54:	d9001f15 	stw	r4,124(sp)
    3d58:	014001c4 	movi	r5,7
    3d5c:	2901dc16 	blt	r5,r4,44d0 <___svfprintf_internal_r+0x1bfc>
    3d60:	42000204 	addi	r8,r8,8
    3d64:	d9003317 	ldw	r4,204(sp)
    3d68:	8121883a 	add	r16,r16,r4
    3d6c:	2085c83a 	sub	r2,r4,r2
    3d70:	8461c83a 	sub	r16,r16,r17
    3d74:	1400010e 	bge	r2,r16,3d7c <___svfprintf_internal_r+0x14a8>
    3d78:	1021883a 	mov	r16,r2
    3d7c:	04000a0e 	bge	zero,r16,3da8 <___svfprintf_internal_r+0x14d4>
    3d80:	d9001f17 	ldw	r4,124(sp)
    3d84:	1c07883a 	add	r3,r3,r16
    3d88:	44400015 	stw	r17,0(r8)
    3d8c:	21000044 	addi	r4,r4,1
    3d90:	44000115 	stw	r16,4(r8)
    3d94:	d8c02015 	stw	r3,128(sp)
    3d98:	d9001f15 	stw	r4,124(sp)
    3d9c:	014001c4 	movi	r5,7
    3da0:	2901e616 	blt	r5,r4,453c <___svfprintf_internal_r+0x1c68>
    3da4:	42000204 	addi	r8,r8,8
    3da8:	8001f616 	blt	r16,zero,4584 <___svfprintf_internal_r+0x1cb0>
    3dac:	1421c83a 	sub	r16,r2,r16
    3db0:	043d1c0e 	bge	zero,r16,3224 <___svfprintf_internal_r+0x950>
    3db4:	04400404 	movi	r17,16
    3db8:	d8801f17 	ldw	r2,124(sp)
    3dbc:	8c3edd0e 	bge	r17,r16,3934 <___svfprintf_internal_r+0x1060>
    3dc0:	014000b4 	movhi	r5,2
    3dc4:	297d6184 	addi	r5,r5,-2682
    3dc8:	d9402b15 	stw	r5,172(sp)
    3dcc:	058001c4 	movi	r22,7
    3dd0:	dd002c17 	ldw	r20,176(sp)
    3dd4:	00000306 	br	3de4 <___svfprintf_internal_r+0x1510>
    3dd8:	42000204 	addi	r8,r8,8
    3ddc:	843ffc04 	addi	r16,r16,-16
    3de0:	8c3ed70e 	bge	r17,r16,3940 <___svfprintf_internal_r+0x106c>
    3de4:	18c00404 	addi	r3,r3,16
    3de8:	10800044 	addi	r2,r2,1
    3dec:	45400015 	stw	r21,0(r8)
    3df0:	44400115 	stw	r17,4(r8)
    3df4:	d8c02015 	stw	r3,128(sp)
    3df8:	d8801f15 	stw	r2,124(sp)
    3dfc:	b0bff60e 	bge	r22,r2,3dd8 <___svfprintf_internal_r+0x1504>
    3e00:	d9801e04 	addi	r6,sp,120
    3e04:	a00b883a 	mov	r5,r20
    3e08:	9809883a 	mov	r4,r19
    3e0c:	000b4d00 	call	b4d0 <__ssprint_r>
    3e10:	103b951e 	bne	r2,zero,2c68 <___svfprintf_internal_r+0x394>
    3e14:	d8c02017 	ldw	r3,128(sp)
    3e18:	d8801f17 	ldw	r2,124(sp)
    3e1c:	da000404 	addi	r8,sp,16
    3e20:	003fee06 	br	3ddc <___svfprintf_internal_r+0x1508>
    3e24:	9088703a 	and	r4,r18,r2
    3e28:	203e8d1e 	bne	r4,zero,3860 <___svfprintf_internal_r+0xf8c>
    3e2c:	dc401f17 	ldw	r17,124(sp)
    3e30:	40800115 	stw	r2,4(r8)
    3e34:	44000015 	stw	r16,0(r8)
    3e38:	8c400044 	addi	r17,r17,1
    3e3c:	d8c02015 	stw	r3,128(sp)
    3e40:	dc401f15 	stw	r17,124(sp)
    3e44:	008001c4 	movi	r2,7
    3e48:	147f7f16 	blt	r2,r17,3c48 <___svfprintf_internal_r+0x1374>
    3e4c:	45800204 	addi	r22,r8,8
    3e50:	003eac06 	br	3904 <___svfprintf_internal_r+0x1030>
    3e54:	d9402c17 	ldw	r5,176(sp)
    3e58:	d9801e04 	addi	r6,sp,120
    3e5c:	9809883a 	mov	r4,r19
    3e60:	000b4d00 	call	b4d0 <__ssprint_r>
    3e64:	103b801e 	bne	r2,zero,2c68 <___svfprintf_internal_r+0x394>
    3e68:	d8c02017 	ldw	r3,128(sp)
    3e6c:	dc401f17 	ldw	r17,124(sp)
    3e70:	da000404 	addi	r8,sp,16
    3e74:	003e8406 	br	3888 <___svfprintf_internal_r+0xfb4>
    3e78:	d9402c17 	ldw	r5,176(sp)
    3e7c:	d9801e04 	addi	r6,sp,120
    3e80:	9809883a 	mov	r4,r19
    3e84:	000b4d00 	call	b4d0 <__ssprint_r>
    3e88:	103b771e 	bne	r2,zero,2c68 <___svfprintf_internal_r+0x394>
    3e8c:	d8c02017 	ldw	r3,128(sp)
    3e90:	dc401f17 	ldw	r17,124(sp)
    3e94:	dd800404 	addi	r22,sp,16
    3e98:	003e8606 	br	38b4 <___svfprintf_internal_r+0xfe0>
    3e9c:	0029883a 	mov	r20,zero
    3ea0:	a5000c04 	addi	r20,r20,48
    3ea4:	dc001dc4 	addi	r16,sp,119
    3ea8:	dd001dc5 	stb	r20,119(sp)
    3eac:	003f3806 	br	3b90 <___svfprintf_internal_r+0x12bc>
    3eb0:	d9402c17 	ldw	r5,176(sp)
    3eb4:	d9801e04 	addi	r6,sp,120
    3eb8:	9809883a 	mov	r4,r19
    3ebc:	000b4d00 	call	b4d0 <__ssprint_r>
    3ec0:	103b691e 	bne	r2,zero,2c68 <___svfprintf_internal_r+0x394>
    3ec4:	d8c02017 	ldw	r3,128(sp)
    3ec8:	da000404 	addi	r8,sp,16
    3ecc:	003c9506 	br	3124 <___svfprintf_internal_r+0x850>
    3ed0:	d9003617 	ldw	r4,216(sp)
    3ed4:	d9403717 	ldw	r5,220(sp)
    3ed8:	da003e15 	stw	r8,248(sp)
    3edc:	000b1580 	call	b158 <__fpclassifyd>
    3ee0:	da003e17 	ldw	r8,248(sp)
    3ee4:	1000bd1e 	bne	r2,zero,41dc <___svfprintf_internal_r+0x1908>
    3ee8:	008011c4 	movi	r2,71
    3eec:	14411e0e 	bge	r2,r17,4368 <___svfprintf_internal_r+0x1a94>
    3ef0:	040000b4 	movhi	r16,2
    3ef4:	843d5404 	addi	r16,r16,-2736
    3ef8:	00c000c4 	movi	r3,3
    3efc:	00bfdfc4 	movi	r2,-129
    3f00:	d8c02a15 	stw	r3,168(sp)
    3f04:	90a4703a 	and	r18,r18,r2
    3f08:	df002783 	ldbu	fp,158(sp)
    3f0c:	d8c02e15 	stw	r3,184(sp)
    3f10:	d8002915 	stw	zero,164(sp)
    3f14:	d8003215 	stw	zero,200(sp)
    3f18:	003c1c06 	br	2f8c <___svfprintf_internal_r+0x6b8>
    3f1c:	9080100c 	andi	r2,r18,64
    3f20:	d8002785 	stb	zero,158(sp)
    3f24:	10009426 	beq	r2,zero,4178 <___svfprintf_internal_r+0x18a4>
    3f28:	d8c02d17 	ldw	r3,180(sp)
    3f2c:	d9002917 	ldw	r4,164(sp)
    3f30:	002d883a 	mov	r22,zero
    3f34:	18800104 	addi	r2,r3,4
    3f38:	1d00000b 	ldhu	r20,0(r3)
    3f3c:	203ec10e 	bge	r4,zero,3a44 <___svfprintf_internal_r+0x1170>
    3f40:	a586b03a 	or	r3,r20,r22
    3f44:	d8802d15 	stw	r2,180(sp)
    3f48:	183ec21e 	bne	r3,zero,3a54 <___svfprintf_internal_r+0x1180>
    3f4c:	0039883a 	mov	fp,zero
    3f50:	0005883a 	mov	r2,zero
    3f54:	003db806 	br	3638 <___svfprintf_internal_r+0xd64>
    3f58:	d8802d17 	ldw	r2,180(sp)
    3f5c:	d8c02d17 	ldw	r3,180(sp)
    3f60:	d9002d17 	ldw	r4,180(sp)
    3f64:	10800017 	ldw	r2,0(r2)
    3f68:	18c00117 	ldw	r3,4(r3)
    3f6c:	21000204 	addi	r4,r4,8
    3f70:	d8803615 	stw	r2,216(sp)
    3f74:	d8c03715 	stw	r3,220(sp)
    3f78:	d9002d15 	stw	r4,180(sp)
    3f7c:	003b8206 	br	2d88 <___svfprintf_internal_r+0x4b4>
    3f80:	9080100c 	andi	r2,r18,64
    3f84:	10010726 	beq	r2,zero,43a4 <___svfprintf_internal_r+0x1ad0>
    3f88:	d8c02d17 	ldw	r3,180(sp)
    3f8c:	1d00000f 	ldh	r20,0(r3)
    3f90:	18c00104 	addi	r3,r3,4
    3f94:	d8c02d15 	stw	r3,180(sp)
    3f98:	a02dd7fa 	srai	r22,r20,31
    3f9c:	b005883a 	mov	r2,r22
    3fa0:	003ba206 	br	2e2c <___svfprintf_internal_r+0x558>
    3fa4:	9080100c 	andi	r2,r18,64
    3fa8:	10010526 	beq	r2,zero,43c0 <___svfprintf_internal_r+0x1aec>
    3fac:	d9002d17 	ldw	r4,180(sp)
    3fb0:	002d883a 	mov	r22,zero
    3fb4:	2500000b 	ldhu	r20,0(r4)
    3fb8:	21000104 	addi	r4,r4,4
    3fbc:	d9002d15 	stw	r4,180(sp)
    3fc0:	003cfe06 	br	33bc <___svfprintf_internal_r+0xae8>
    3fc4:	bc400007 	ldb	r17,0(r23)
    3fc8:	003a9606 	br	2a24 <___svfprintf_internal_r+0x150>
    3fcc:	9080040c 	andi	r2,r18,16
    3fd0:	10010126 	beq	r2,zero,43d8 <___svfprintf_internal_r+0x1b04>
    3fd4:	d9402d17 	ldw	r5,180(sp)
    3fd8:	d8c02f17 	ldw	r3,188(sp)
    3fdc:	28800017 	ldw	r2,0(r5)
    3fe0:	29400104 	addi	r5,r5,4
    3fe4:	d9402d15 	stw	r5,180(sp)
    3fe8:	10c00015 	stw	r3,0(r2)
    3fec:	003a6406 	br	2980 <___svfprintf_internal_r+0xac>
    3ff0:	d9002917 	ldw	r4,164(sp)
    3ff4:	d8002785 	stb	zero,158(sp)
    3ff8:	203d8d16 	blt	r4,zero,3630 <___svfprintf_internal_r+0xd5c>
    3ffc:	00bfdfc4 	movi	r2,-129
    4000:	90a4703a 	and	r18,r18,r2
    4004:	003b0506 	br	2c1c <___svfprintf_internal_r+0x348>
    4008:	014000b4 	movhi	r5,2
    400c:	297d6184 	addi	r5,r5,-2682
    4010:	d9402b15 	stw	r5,172(sp)
    4014:	d9402b17 	ldw	r5,172(sp)
    4018:	1c47883a 	add	r3,r3,r17
    401c:	10800044 	addi	r2,r2,1
    4020:	41400015 	stw	r5,0(r8)
    4024:	44400115 	stw	r17,4(r8)
    4028:	d8c02015 	stw	r3,128(sp)
    402c:	d8801f15 	stw	r2,124(sp)
    4030:	010001c4 	movi	r4,7
    4034:	20bf3016 	blt	r4,r2,3cf8 <___svfprintf_internal_r+0x1424>
    4038:	42000204 	addi	r8,r8,8
    403c:	003f3506 	br	3d14 <___svfprintf_internal_r+0x1440>
    4040:	010000b4 	movhi	r4,2
    4044:	213d6184 	addi	r4,r4,-2682
    4048:	d9002b15 	stw	r4,172(sp)
    404c:	003c5e06 	br	31c8 <___svfprintf_internal_r+0x8f4>
    4050:	d9402c17 	ldw	r5,176(sp)
    4054:	d9801e04 	addi	r6,sp,120
    4058:	9809883a 	mov	r4,r19
    405c:	000b4d00 	call	b4d0 <__ssprint_r>
    4060:	103b011e 	bne	r2,zero,2c68 <___svfprintf_internal_r+0x394>
    4064:	d8c02017 	ldw	r3,128(sp)
    4068:	da000404 	addi	r8,sp,16
    406c:	003d9306 	br	36bc <___svfprintf_internal_r+0xde8>
    4070:	d8801f17 	ldw	r2,124(sp)
    4074:	014000b4 	movhi	r5,2
    4078:	01000044 	movi	r4,1
    407c:	18c00044 	addi	r3,r3,1
    4080:	10800044 	addi	r2,r2,1
    4084:	297d6104 	addi	r5,r5,-2684
    4088:	41000115 	stw	r4,4(r8)
    408c:	41400015 	stw	r5,0(r8)
    4090:	d8c02015 	stw	r3,128(sp)
    4094:	d8801f15 	stw	r2,124(sp)
    4098:	010001c4 	movi	r4,7
    409c:	2080b516 	blt	r4,r2,4374 <___svfprintf_internal_r+0x1aa0>
    40a0:	42000204 	addi	r8,r8,8
    40a4:	8800041e 	bne	r17,zero,40b8 <___svfprintf_internal_r+0x17e4>
    40a8:	d8803317 	ldw	r2,204(sp)
    40ac:	1000021e 	bne	r2,zero,40b8 <___svfprintf_internal_r+0x17e4>
    40b0:	9080004c 	andi	r2,r18,1
    40b4:	103c5b26 	beq	r2,zero,3224 <___svfprintf_internal_r+0x950>
    40b8:	d9003817 	ldw	r4,224(sp)
    40bc:	d8801f17 	ldw	r2,124(sp)
    40c0:	d9403417 	ldw	r5,208(sp)
    40c4:	20c7883a 	add	r3,r4,r3
    40c8:	10800044 	addi	r2,r2,1
    40cc:	41000115 	stw	r4,4(r8)
    40d0:	41400015 	stw	r5,0(r8)
    40d4:	d8c02015 	stw	r3,128(sp)
    40d8:	d8801f15 	stw	r2,124(sp)
    40dc:	010001c4 	movi	r4,7
    40e0:	20818016 	blt	r4,r2,46e4 <___svfprintf_internal_r+0x1e10>
    40e4:	42000204 	addi	r8,r8,8
    40e8:	0463c83a 	sub	r17,zero,r17
    40ec:	0440cb0e 	bge	zero,r17,441c <___svfprintf_internal_r+0x1b48>
    40f0:	05800404 	movi	r22,16
    40f4:	b440e80e 	bge	r22,r17,4498 <___svfprintf_internal_r+0x1bc4>
    40f8:	014000b4 	movhi	r5,2
    40fc:	297d6184 	addi	r5,r5,-2682
    4100:	d9402b15 	stw	r5,172(sp)
    4104:	070001c4 	movi	fp,7
    4108:	dd002c17 	ldw	r20,176(sp)
    410c:	00000306 	br	411c <___svfprintf_internal_r+0x1848>
    4110:	42000204 	addi	r8,r8,8
    4114:	8c7ffc04 	addi	r17,r17,-16
    4118:	b440e20e 	bge	r22,r17,44a4 <___svfprintf_internal_r+0x1bd0>
    411c:	18c00404 	addi	r3,r3,16
    4120:	10800044 	addi	r2,r2,1
    4124:	45400015 	stw	r21,0(r8)
    4128:	45800115 	stw	r22,4(r8)
    412c:	d8c02015 	stw	r3,128(sp)
    4130:	d8801f15 	stw	r2,124(sp)
    4134:	e0bff60e 	bge	fp,r2,4110 <___svfprintf_internal_r+0x183c>
    4138:	d9801e04 	addi	r6,sp,120
    413c:	a00b883a 	mov	r5,r20
    4140:	9809883a 	mov	r4,r19
    4144:	000b4d00 	call	b4d0 <__ssprint_r>
    4148:	103ac71e 	bne	r2,zero,2c68 <___svfprintf_internal_r+0x394>
    414c:	d8c02017 	ldw	r3,128(sp)
    4150:	d8801f17 	ldw	r2,124(sp)
    4154:	da000404 	addi	r8,sp,16
    4158:	003fee06 	br	4114 <___svfprintf_internal_r+0x1840>
    415c:	d8c02d17 	ldw	r3,180(sp)
    4160:	d9002917 	ldw	r4,164(sp)
    4164:	002d883a 	mov	r22,zero
    4168:	18800104 	addi	r2,r3,4
    416c:	1d000017 	ldw	r20,0(r3)
    4170:	203e7d0e 	bge	r4,zero,3b68 <___svfprintf_internal_r+0x1294>
    4174:	003eda06 	br	3ce0 <___svfprintf_internal_r+0x140c>
    4178:	d9402d17 	ldw	r5,180(sp)
    417c:	d8c02917 	ldw	r3,164(sp)
    4180:	002d883a 	mov	r22,zero
    4184:	28800104 	addi	r2,r5,4
    4188:	2d000017 	ldw	r20,0(r5)
    418c:	183e2d0e 	bge	r3,zero,3a44 <___svfprintf_internal_r+0x1170>
    4190:	003f6b06 	br	3f40 <___svfprintf_internal_r+0x166c>
    4194:	d8c02d15 	stw	r3,180(sp)
    4198:	0039883a 	mov	fp,zero
    419c:	003ed206 	br	3ce8 <___svfprintf_internal_r+0x1414>
    41a0:	bc400043 	ldbu	r17,1(r23)
    41a4:	94800814 	ori	r18,r18,32
    41a8:	bdc00044 	addi	r23,r23,1
    41ac:	8c403fcc 	andi	r17,r17,255
    41b0:	8c40201c 	xori	r17,r17,128
    41b4:	8c7fe004 	addi	r17,r17,-128
    41b8:	003a1a06 	br	2a24 <___svfprintf_internal_r+0x150>
    41bc:	d9402c17 	ldw	r5,176(sp)
    41c0:	d9801e04 	addi	r6,sp,120
    41c4:	9809883a 	mov	r4,r19
    41c8:	000b4d00 	call	b4d0 <__ssprint_r>
    41cc:	103aa61e 	bne	r2,zero,2c68 <___svfprintf_internal_r+0x394>
    41d0:	d8c02017 	ldw	r3,128(sp)
    41d4:	da000404 	addi	r8,sp,16
    41d8:	003d4a06 	br	3704 <___svfprintf_internal_r+0xe30>
    41dc:	d9002917 	ldw	r4,164(sp)
    41e0:	05bff7c4 	movi	r22,-33
    41e4:	00bfffc4 	movi	r2,-1
    41e8:	8dac703a 	and	r22,r17,r22
    41ec:	20806a26 	beq	r4,r2,4398 <___svfprintf_internal_r+0x1ac4>
    41f0:	008011c4 	movi	r2,71
    41f4:	b0813726 	beq	r22,r2,46d4 <___svfprintf_internal_r+0x1e00>
    41f8:	d9003717 	ldw	r4,220(sp)
    41fc:	90c04014 	ori	r3,r18,256
    4200:	d8c02b15 	stw	r3,172(sp)
    4204:	20015d16 	blt	r4,zero,477c <___svfprintf_internal_r+0x1ea8>
    4208:	dd003717 	ldw	r20,220(sp)
    420c:	d8002a05 	stb	zero,168(sp)
    4210:	00801984 	movi	r2,102
    4214:	88814026 	beq	r17,r2,4718 <___svfprintf_internal_r+0x1e44>
    4218:	00801184 	movi	r2,70
    421c:	88817126 	beq	r17,r2,47e4 <___svfprintf_internal_r+0x1f10>
    4220:	00801144 	movi	r2,69
    4224:	b0816226 	beq	r22,r2,47b0 <___svfprintf_internal_r+0x1edc>
    4228:	d8c02917 	ldw	r3,164(sp)
    422c:	d8802104 	addi	r2,sp,132
    4230:	d8800315 	stw	r2,12(sp)
    4234:	d9403617 	ldw	r5,216(sp)
    4238:	d8802504 	addi	r2,sp,148
    423c:	d8800215 	stw	r2,8(sp)
    4240:	d8802604 	addi	r2,sp,152
    4244:	d8c00015 	stw	r3,0(sp)
    4248:	d8800115 	stw	r2,4(sp)
    424c:	01c00084 	movi	r7,2
    4250:	a00d883a 	mov	r6,r20
    4254:	9809883a 	mov	r4,r19
    4258:	d8c03d15 	stw	r3,244(sp)
    425c:	da003e15 	stw	r8,248(sp)
    4260:	00070d80 	call	70d8 <_dtoa_r>
    4264:	1021883a 	mov	r16,r2
    4268:	008019c4 	movi	r2,103
    426c:	d8c03d17 	ldw	r3,244(sp)
    4270:	da003e17 	ldw	r8,248(sp)
    4274:	8880e726 	beq	r17,r2,4614 <___svfprintf_internal_r+0x1d40>
    4278:	008011c4 	movi	r2,71
    427c:	8880d426 	beq	r17,r2,45d0 <___svfprintf_internal_r+0x1cfc>
    4280:	80f9883a 	add	fp,r16,r3
    4284:	d9003617 	ldw	r4,216(sp)
    4288:	000d883a 	mov	r6,zero
    428c:	000f883a 	mov	r7,zero
    4290:	a00b883a 	mov	r5,r20
    4294:	da003e15 	stw	r8,248(sp)
    4298:	00111cc0 	call	111cc <__eqdf2>
    429c:	da003e17 	ldw	r8,248(sp)
    42a0:	1000e426 	beq	r2,zero,4634 <___svfprintf_internal_r+0x1d60>
    42a4:	d8802117 	ldw	r2,132(sp)
    42a8:	1700062e 	bgeu	r2,fp,42c4 <___svfprintf_internal_r+0x19f0>
    42ac:	01000c04 	movi	r4,48
    42b0:	10c00044 	addi	r3,r2,1
    42b4:	d8c02115 	stw	r3,132(sp)
    42b8:	11000005 	stb	r4,0(r2)
    42bc:	d8802117 	ldw	r2,132(sp)
    42c0:	173ffb36 	bltu	r2,fp,42b0 <___svfprintf_internal_r+0x19dc>
    42c4:	1405c83a 	sub	r2,r2,r16
    42c8:	d8803315 	stw	r2,204(sp)
    42cc:	008011c4 	movi	r2,71
    42d0:	b080c526 	beq	r22,r2,45e8 <___svfprintf_internal_r+0x1d14>
    42d4:	00801944 	movi	r2,101
    42d8:	1441d90e 	bge	r2,r17,4a40 <___svfprintf_internal_r+0x216c>
    42dc:	d8c02617 	ldw	r3,152(sp)
    42e0:	00801984 	movi	r2,102
    42e4:	d8c03215 	stw	r3,200(sp)
    42e8:	88813426 	beq	r17,r2,47bc <___svfprintf_internal_r+0x1ee8>
    42ec:	d8c03217 	ldw	r3,200(sp)
    42f0:	d9003317 	ldw	r4,204(sp)
    42f4:	19012516 	blt	r3,r4,478c <___svfprintf_internal_r+0x1eb8>
    42f8:	9480004c 	andi	r18,r18,1
    42fc:	9001841e 	bne	r18,zero,4910 <___svfprintf_internal_r+0x203c>
    4300:	1805883a 	mov	r2,r3
    4304:	1801cc16 	blt	r3,zero,4a38 <___svfprintf_internal_r+0x2164>
    4308:	d8c03217 	ldw	r3,200(sp)
    430c:	044019c4 	movi	r17,103
    4310:	d8c02e15 	stw	r3,184(sp)
    4314:	df002a07 	ldb	fp,168(sp)
    4318:	e000a61e 	bne	fp,zero,45b4 <___svfprintf_internal_r+0x1ce0>
    431c:	df002783 	ldbu	fp,158(sp)
    4320:	d8802a15 	stw	r2,168(sp)
    4324:	dc802b17 	ldw	r18,172(sp)
    4328:	d8002915 	stw	zero,164(sp)
    432c:	003b1706 	br	2f8c <___svfprintf_internal_r+0x6b8>
    4330:	040000b4 	movhi	r16,2
    4334:	843d5104 	addi	r16,r16,-2748
    4338:	003aa606 	br	2dd4 <___svfprintf_internal_r+0x500>
    433c:	d9003917 	ldw	r4,228(sp)
    4340:	04001004 	movi	r16,64
    4344:	800b883a 	mov	r5,r16
    4348:	00095fc0 	call	95fc <_malloc_r>
    434c:	d9002c17 	ldw	r4,176(sp)
    4350:	20800015 	stw	r2,0(r4)
    4354:	20800415 	stw	r2,16(r4)
    4358:	1001cb26 	beq	r2,zero,4a88 <___svfprintf_internal_r+0x21b4>
    435c:	d8802c17 	ldw	r2,176(sp)
    4360:	14000515 	stw	r16,20(r2)
    4364:	00397606 	br	2940 <___svfprintf_internal_r+0x6c>
    4368:	040000b4 	movhi	r16,2
    436c:	843d5304 	addi	r16,r16,-2740
    4370:	003ee106 	br	3ef8 <___svfprintf_internal_r+0x1624>
    4374:	d9402c17 	ldw	r5,176(sp)
    4378:	d9801e04 	addi	r6,sp,120
    437c:	9809883a 	mov	r4,r19
    4380:	000b4d00 	call	b4d0 <__ssprint_r>
    4384:	103a381e 	bne	r2,zero,2c68 <___svfprintf_internal_r+0x394>
    4388:	dc402617 	ldw	r17,152(sp)
    438c:	d8c02017 	ldw	r3,128(sp)
    4390:	da000404 	addi	r8,sp,16
    4394:	003f4306 	br	40a4 <___svfprintf_internal_r+0x17d0>
    4398:	01400184 	movi	r5,6
    439c:	d9402915 	stw	r5,164(sp)
    43a0:	003f9506 	br	41f8 <___svfprintf_internal_r+0x1924>
    43a4:	d9002d17 	ldw	r4,180(sp)
    43a8:	25000017 	ldw	r20,0(r4)
    43ac:	21000104 	addi	r4,r4,4
    43b0:	d9002d15 	stw	r4,180(sp)
    43b4:	a02dd7fa 	srai	r22,r20,31
    43b8:	b005883a 	mov	r2,r22
    43bc:	003a9b06 	br	2e2c <___svfprintf_internal_r+0x558>
    43c0:	d9402d17 	ldw	r5,180(sp)
    43c4:	002d883a 	mov	r22,zero
    43c8:	2d000017 	ldw	r20,0(r5)
    43cc:	29400104 	addi	r5,r5,4
    43d0:	d9402d15 	stw	r5,180(sp)
    43d4:	003bf906 	br	33bc <___svfprintf_internal_r+0xae8>
    43d8:	9480100c 	andi	r18,r18,64
    43dc:	90006e26 	beq	r18,zero,4598 <___svfprintf_internal_r+0x1cc4>
    43e0:	d9002d17 	ldw	r4,180(sp)
    43e4:	d9402f17 	ldw	r5,188(sp)
    43e8:	20800017 	ldw	r2,0(r4)
    43ec:	21000104 	addi	r4,r4,4
    43f0:	d9002d15 	stw	r4,180(sp)
    43f4:	1140000d 	sth	r5,0(r2)
    43f8:	00396106 	br	2980 <___svfprintf_internal_r+0xac>
    43fc:	d9402c17 	ldw	r5,176(sp)
    4400:	d9801e04 	addi	r6,sp,120
    4404:	9809883a 	mov	r4,r19
    4408:	000b4d00 	call	b4d0 <__ssprint_r>
    440c:	103a161e 	bne	r2,zero,2c68 <___svfprintf_internal_r+0x394>
    4410:	d8c02017 	ldw	r3,128(sp)
    4414:	d8801f17 	ldw	r2,124(sp)
    4418:	da000404 	addi	r8,sp,16
    441c:	d9403317 	ldw	r5,204(sp)
    4420:	10800044 	addi	r2,r2,1
    4424:	44000015 	stw	r16,0(r8)
    4428:	28c7883a 	add	r3,r5,r3
    442c:	003b7706 	br	320c <___svfprintf_internal_r+0x938>
    4430:	8009883a 	mov	r4,r16
    4434:	da003e15 	stw	r8,248(sp)
    4438:	000b4380 	call	b438 <strlen>
    443c:	d8802e15 	stw	r2,184(sp)
    4440:	da003e17 	ldw	r8,248(sp)
    4444:	103c280e 	bge	r2,zero,34e8 <___svfprintf_internal_r+0xc14>
    4448:	0005883a 	mov	r2,zero
    444c:	003c2606 	br	34e8 <___svfprintf_internal_r+0xc14>
    4450:	00bfffc4 	movi	r2,-1
    4454:	003a0906 	br	2c7c <___svfprintf_internal_r+0x3a8>
    4458:	010000b4 	movhi	r4,2
    445c:	213d6584 	addi	r4,r4,-2666
    4460:	d9003515 	stw	r4,212(sp)
    4464:	003b0606 	br	3080 <___svfprintf_internal_r+0x7ac>
    4468:	013fffc4 	movi	r4,-1
    446c:	003a2706 	br	2d0c <___svfprintf_internal_r+0x438>
    4470:	d9402c17 	ldw	r5,176(sp)
    4474:	d9801e04 	addi	r6,sp,120
    4478:	9809883a 	mov	r4,r19
    447c:	000b4d00 	call	b4d0 <__ssprint_r>
    4480:	1039f91e 	bne	r2,zero,2c68 <___svfprintf_internal_r+0x394>
    4484:	d8c02017 	ldw	r3,128(sp)
    4488:	da000404 	addi	r8,sp,16
    448c:	003d8406 	br	3aa0 <___svfprintf_internal_r+0x11cc>
    4490:	0023883a 	mov	r17,zero
    4494:	003d8306 	br	3aa4 <___svfprintf_internal_r+0x11d0>
    4498:	010000b4 	movhi	r4,2
    449c:	213d6184 	addi	r4,r4,-2682
    44a0:	d9002b15 	stw	r4,172(sp)
    44a4:	d9002b17 	ldw	r4,172(sp)
    44a8:	1c47883a 	add	r3,r3,r17
    44ac:	10800044 	addi	r2,r2,1
    44b0:	41000015 	stw	r4,0(r8)
    44b4:	44400115 	stw	r17,4(r8)
    44b8:	d8c02015 	stw	r3,128(sp)
    44bc:	d8801f15 	stw	r2,124(sp)
    44c0:	010001c4 	movi	r4,7
    44c4:	20bfcd16 	blt	r4,r2,43fc <___svfprintf_internal_r+0x1b28>
    44c8:	42000204 	addi	r8,r8,8
    44cc:	003fd306 	br	441c <___svfprintf_internal_r+0x1b48>
    44d0:	d9402c17 	ldw	r5,176(sp)
    44d4:	d9801e04 	addi	r6,sp,120
    44d8:	9809883a 	mov	r4,r19
    44dc:	000b4d00 	call	b4d0 <__ssprint_r>
    44e0:	1039e11e 	bne	r2,zero,2c68 <___svfprintf_internal_r+0x394>
    44e4:	d8802617 	ldw	r2,152(sp)
    44e8:	d8c02017 	ldw	r3,128(sp)
    44ec:	da000404 	addi	r8,sp,16
    44f0:	003e1c06 	br	3d64 <___svfprintf_internal_r+0x1490>
    44f4:	d8802917 	ldw	r2,164(sp)
    44f8:	00c00184 	movi	r3,6
    44fc:	1880012e 	bgeu	r3,r2,4504 <___svfprintf_internal_r+0x1c30>
    4500:	1805883a 	mov	r2,r3
    4504:	d8802e15 	stw	r2,184(sp)
    4508:	1000f316 	blt	r2,zero,48d8 <___svfprintf_internal_r+0x2004>
    450c:	040000b4 	movhi	r16,2
    4510:	d8802a15 	stw	r2,168(sp)
    4514:	dd002d15 	stw	r20,180(sp)
    4518:	d8002915 	stw	zero,164(sp)
    451c:	d8003215 	stw	zero,200(sp)
    4520:	843d5f04 	addi	r16,r16,-2692
    4524:	0039883a 	mov	fp,zero
    4528:	003a9f06 	br	2fa8 <___svfprintf_internal_r+0x6d4>
    452c:	010000b4 	movhi	r4,2
    4530:	213d6584 	addi	r4,r4,-2666
    4534:	d9003515 	stw	r4,212(sp)
    4538:	003b5f06 	br	32b8 <___svfprintf_internal_r+0x9e4>
    453c:	d9402c17 	ldw	r5,176(sp)
    4540:	d9801e04 	addi	r6,sp,120
    4544:	9809883a 	mov	r4,r19
    4548:	000b4d00 	call	b4d0 <__ssprint_r>
    454c:	1039c61e 	bne	r2,zero,2c68 <___svfprintf_internal_r+0x394>
    4550:	d8802617 	ldw	r2,152(sp)
    4554:	d9403317 	ldw	r5,204(sp)
    4558:	d8c02017 	ldw	r3,128(sp)
    455c:	da000404 	addi	r8,sp,16
    4560:	2885c83a 	sub	r2,r5,r2
    4564:	003e1006 	br	3da8 <___svfprintf_internal_r+0x14d4>
    4568:	00800044 	movi	r2,1
    456c:	10803fcc 	andi	r2,r2,255
    4570:	00c00044 	movi	r3,1
    4574:	10fa3526 	beq	r2,r3,2e4c <___svfprintf_internal_r+0x578>
    4578:	00c00084 	movi	r3,2
    457c:	10fb9e26 	beq	r2,r3,33f8 <___svfprintf_internal_r+0xb24>
    4580:	003a6406 	br	2f14 <___svfprintf_internal_r+0x640>
    4584:	0021883a 	mov	r16,zero
    4588:	003e0806 	br	3dac <___svfprintf_internal_r+0x14d8>
    458c:	07000b44 	movi	fp,45
    4590:	df002785 	stb	fp,158(sp)
    4594:	003a0b06 	br	2dc4 <___svfprintf_internal_r+0x4f0>
    4598:	d8c02d17 	ldw	r3,180(sp)
    459c:	d9002f17 	ldw	r4,188(sp)
    45a0:	18800017 	ldw	r2,0(r3)
    45a4:	18c00104 	addi	r3,r3,4
    45a8:	d8c02d15 	stw	r3,180(sp)
    45ac:	11000015 	stw	r4,0(r2)
    45b0:	0038f306 	br	2980 <___svfprintf_internal_r+0xac>
    45b4:	00c00b44 	movi	r3,45
    45b8:	d8c02785 	stb	r3,158(sp)
    45bc:	d8802a15 	stw	r2,168(sp)
    45c0:	dc802b17 	ldw	r18,172(sp)
    45c4:	d8002915 	stw	zero,164(sp)
    45c8:	07000b44 	movi	fp,45
    45cc:	003a7306 	br	2f9c <___svfprintf_internal_r+0x6c8>
    45d0:	9080004c 	andi	r2,r18,1
    45d4:	1000941e 	bne	r2,zero,4828 <___svfprintf_internal_r+0x1f54>
    45d8:	d8802117 	ldw	r2,132(sp)
    45dc:	1405c83a 	sub	r2,r2,r16
    45e0:	d8803315 	stw	r2,204(sp)
    45e4:	b441161e 	bne	r22,r17,4a40 <___svfprintf_internal_r+0x216c>
    45e8:	dd802617 	ldw	r22,152(sp)
    45ec:	00bfff44 	movi	r2,-3
    45f0:	b0801a16 	blt	r22,r2,465c <___svfprintf_internal_r+0x1d88>
    45f4:	d9402917 	ldw	r5,164(sp)
    45f8:	2d801816 	blt	r5,r22,465c <___svfprintf_internal_r+0x1d88>
    45fc:	dd803215 	stw	r22,200(sp)
    4600:	003f3a06 	br	42ec <___svfprintf_internal_r+0x1a18>
    4604:	1025883a 	mov	r18,r2
    4608:	0039883a 	mov	fp,zero
    460c:	00800084 	movi	r2,2
    4610:	003fd606 	br	456c <___svfprintf_internal_r+0x1c98>
    4614:	9080004c 	andi	r2,r18,1
    4618:	103f191e 	bne	r2,zero,4280 <___svfprintf_internal_r+0x19ac>
    461c:	d8802117 	ldw	r2,132(sp)
    4620:	003f2806 	br	42c4 <___svfprintf_internal_r+0x19f0>
    4624:	010000b4 	movhi	r4,2
    4628:	213d6184 	addi	r4,r4,-2682
    462c:	d9002b15 	stw	r4,172(sp)
    4630:	003c7c06 	br	3824 <___svfprintf_internal_r+0xf50>
    4634:	e005883a 	mov	r2,fp
    4638:	003f2206 	br	42c4 <___svfprintf_internal_r+0x19f0>
    463c:	d9402917 	ldw	r5,164(sp)
    4640:	df002783 	ldbu	fp,158(sp)
    4644:	dd002d15 	stw	r20,180(sp)
    4648:	d9402a15 	stw	r5,168(sp)
    464c:	d9402e15 	stw	r5,184(sp)
    4650:	d8002915 	stw	zero,164(sp)
    4654:	d8003215 	stw	zero,200(sp)
    4658:	003a4c06 	br	2f8c <___svfprintf_internal_r+0x6b8>
    465c:	8c7fff84 	addi	r17,r17,-2
    4660:	b5bfffc4 	addi	r22,r22,-1
    4664:	dd802615 	stw	r22,152(sp)
    4668:	dc4022c5 	stb	r17,139(sp)
    466c:	b000c316 	blt	r22,zero,497c <___svfprintf_internal_r+0x20a8>
    4670:	00800ac4 	movi	r2,43
    4674:	d8802305 	stb	r2,140(sp)
    4678:	00800244 	movi	r2,9
    467c:	15806e16 	blt	r2,r22,4838 <___svfprintf_internal_r+0x1f64>
    4680:	00800c04 	movi	r2,48
    4684:	b5800c04 	addi	r22,r22,48
    4688:	d8802345 	stb	r2,141(sp)
    468c:	dd802385 	stb	r22,142(sp)
    4690:	d88023c4 	addi	r2,sp,143
    4694:	df0022c4 	addi	fp,sp,139
    4698:	d8c03317 	ldw	r3,204(sp)
    469c:	1739c83a 	sub	fp,r2,fp
    46a0:	d9003317 	ldw	r4,204(sp)
    46a4:	e0c7883a 	add	r3,fp,r3
    46a8:	df003b15 	stw	fp,236(sp)
    46ac:	d8c02e15 	stw	r3,184(sp)
    46b0:	00800044 	movi	r2,1
    46b4:	1100b70e 	bge	r2,r4,4994 <___svfprintf_internal_r+0x20c0>
    46b8:	d8c02e17 	ldw	r3,184(sp)
    46bc:	18c00044 	addi	r3,r3,1
    46c0:	d8c02e15 	stw	r3,184(sp)
    46c4:	1805883a 	mov	r2,r3
    46c8:	1800b016 	blt	r3,zero,498c <___svfprintf_internal_r+0x20b8>
    46cc:	d8003215 	stw	zero,200(sp)
    46d0:	003f1006 	br	4314 <___svfprintf_internal_r+0x1a40>
    46d4:	d8802917 	ldw	r2,164(sp)
    46d8:	103ec71e 	bne	r2,zero,41f8 <___svfprintf_internal_r+0x1924>
    46dc:	dc002915 	stw	r16,164(sp)
    46e0:	003ec506 	br	41f8 <___svfprintf_internal_r+0x1924>
    46e4:	d9402c17 	ldw	r5,176(sp)
    46e8:	d9801e04 	addi	r6,sp,120
    46ec:	9809883a 	mov	r4,r19
    46f0:	000b4d00 	call	b4d0 <__ssprint_r>
    46f4:	10395c1e 	bne	r2,zero,2c68 <___svfprintf_internal_r+0x394>
    46f8:	dc402617 	ldw	r17,152(sp)
    46fc:	d8c02017 	ldw	r3,128(sp)
    4700:	d8801f17 	ldw	r2,124(sp)
    4704:	da000404 	addi	r8,sp,16
    4708:	003e7706 	br	40e8 <___svfprintf_internal_r+0x1814>
    470c:	582f883a 	mov	r23,r11
    4710:	d8002915 	stw	zero,164(sp)
    4714:	0038c406 	br	2a28 <___svfprintf_internal_r+0x154>
    4718:	d8c02917 	ldw	r3,164(sp)
    471c:	d8802104 	addi	r2,sp,132
    4720:	d8800315 	stw	r2,12(sp)
    4724:	d9403617 	ldw	r5,216(sp)
    4728:	d8802504 	addi	r2,sp,148
    472c:	d8800215 	stw	r2,8(sp)
    4730:	d8802604 	addi	r2,sp,152
    4734:	d8c00015 	stw	r3,0(sp)
    4738:	9809883a 	mov	r4,r19
    473c:	d8800115 	stw	r2,4(sp)
    4740:	01c000c4 	movi	r7,3
    4744:	a00d883a 	mov	r6,r20
    4748:	da003e15 	stw	r8,248(sp)
    474c:	00070d80 	call	70d8 <_dtoa_r>
    4750:	d9002917 	ldw	r4,164(sp)
    4754:	da003e17 	ldw	r8,248(sp)
    4758:	1021883a 	mov	r16,r2
    475c:	1139883a 	add	fp,r2,r4
    4760:	2007883a 	mov	r3,r4
    4764:	81000007 	ldb	r4,0(r16)
    4768:	00800c04 	movi	r2,48
    476c:	20806f26 	beq	r4,r2,492c <___svfprintf_internal_r+0x2058>
    4770:	d8c02617 	ldw	r3,152(sp)
    4774:	e0f9883a 	add	fp,fp,r3
    4778:	003ec206 	br	4284 <___svfprintf_internal_r+0x19b0>
    477c:	00c00b44 	movi	r3,45
    4780:	2520003c 	xorhi	r20,r4,32768
    4784:	d8c02a05 	stb	r3,168(sp)
    4788:	003ea106 	br	4210 <___svfprintf_internal_r+0x193c>
    478c:	d8c03217 	ldw	r3,200(sp)
    4790:	00c0890e 	bge	zero,r3,49b8 <___svfprintf_internal_r+0x20e4>
    4794:	00800044 	movi	r2,1
    4798:	d9003317 	ldw	r4,204(sp)
    479c:	1105883a 	add	r2,r2,r4
    47a0:	d8802e15 	stw	r2,184(sp)
    47a4:	10005f16 	blt	r2,zero,4924 <___svfprintf_internal_r+0x2050>
    47a8:	044019c4 	movi	r17,103
    47ac:	003ed906 	br	4314 <___svfprintf_internal_r+0x1a40>
    47b0:	d9002917 	ldw	r4,164(sp)
    47b4:	20c00044 	addi	r3,r4,1
    47b8:	003e9c06 	br	422c <___svfprintf_internal_r+0x1958>
    47bc:	d9002917 	ldw	r4,164(sp)
    47c0:	00c0680e 	bge	zero,r3,4964 <___svfprintf_internal_r+0x2090>
    47c4:	2000461e 	bne	r4,zero,48e0 <___svfprintf_internal_r+0x200c>
    47c8:	9480004c 	andi	r18,r18,1
    47cc:	9000441e 	bne	r18,zero,48e0 <___svfprintf_internal_r+0x200c>
    47d0:	1805883a 	mov	r2,r3
    47d4:	1800a016 	blt	r3,zero,4a58 <___svfprintf_internal_r+0x2184>
    47d8:	d8c03217 	ldw	r3,200(sp)
    47dc:	d8c02e15 	stw	r3,184(sp)
    47e0:	003ecc06 	br	4314 <___svfprintf_internal_r+0x1a40>
    47e4:	d9402917 	ldw	r5,164(sp)
    47e8:	d8802104 	addi	r2,sp,132
    47ec:	d8800315 	stw	r2,12(sp)
    47f0:	d9400015 	stw	r5,0(sp)
    47f4:	d8802504 	addi	r2,sp,148
    47f8:	d9403617 	ldw	r5,216(sp)
    47fc:	d8800215 	stw	r2,8(sp)
    4800:	d8802604 	addi	r2,sp,152
    4804:	d8800115 	stw	r2,4(sp)
    4808:	01c000c4 	movi	r7,3
    480c:	a00d883a 	mov	r6,r20
    4810:	9809883a 	mov	r4,r19
    4814:	da003e15 	stw	r8,248(sp)
    4818:	00070d80 	call	70d8 <_dtoa_r>
    481c:	d8c02917 	ldw	r3,164(sp)
    4820:	da003e17 	ldw	r8,248(sp)
    4824:	1021883a 	mov	r16,r2
    4828:	00801184 	movi	r2,70
    482c:	80f9883a 	add	fp,r16,r3
    4830:	88bfcc26 	beq	r17,r2,4764 <___svfprintf_internal_r+0x1e90>
    4834:	003e9306 	br	4284 <___svfprintf_internal_r+0x19b0>
    4838:	df0022c4 	addi	fp,sp,139
    483c:	dc002915 	stw	r16,164(sp)
    4840:	9829883a 	mov	r20,r19
    4844:	e021883a 	mov	r16,fp
    4848:	4027883a 	mov	r19,r8
    484c:	b009883a 	mov	r4,r22
    4850:	01400284 	movi	r5,10
    4854:	000ff080 	call	ff08 <__modsi3>
    4858:	10800c04 	addi	r2,r2,48
    485c:	843fffc4 	addi	r16,r16,-1
    4860:	b009883a 	mov	r4,r22
    4864:	01400284 	movi	r5,10
    4868:	80800005 	stb	r2,0(r16)
    486c:	000fe840 	call	fe84 <__divsi3>
    4870:	102d883a 	mov	r22,r2
    4874:	00800244 	movi	r2,9
    4878:	15bff416 	blt	r2,r22,484c <___svfprintf_internal_r+0x1f78>
    487c:	9811883a 	mov	r8,r19
    4880:	b0800c04 	addi	r2,r22,48
    4884:	a027883a 	mov	r19,r20
    4888:	8029883a 	mov	r20,r16
    488c:	a17fffc4 	addi	r5,r20,-1
    4890:	a0bfffc5 	stb	r2,-1(r20)
    4894:	dc002917 	ldw	r16,164(sp)
    4898:	2f00752e 	bgeu	r5,fp,4a70 <___svfprintf_internal_r+0x219c>
    489c:	d9c02384 	addi	r7,sp,142
    48a0:	3d0fc83a 	sub	r7,r7,r20
    48a4:	d9002344 	addi	r4,sp,141
    48a8:	e1cf883a 	add	r7,fp,r7
    48ac:	00000106 	br	48b4 <___svfprintf_internal_r+0x1fe0>
    48b0:	28800003 	ldbu	r2,0(r5)
    48b4:	20800005 	stb	r2,0(r4)
    48b8:	21000044 	addi	r4,r4,1
    48bc:	29400044 	addi	r5,r5,1
    48c0:	21fffb1e 	bne	r4,r7,48b0 <___svfprintf_internal_r+0x1fdc>
    48c4:	d8802304 	addi	r2,sp,140
    48c8:	1505c83a 	sub	r2,r2,r20
    48cc:	d8c02344 	addi	r3,sp,141
    48d0:	1885883a 	add	r2,r3,r2
    48d4:	003f7006 	br	4698 <___svfprintf_internal_r+0x1dc4>
    48d8:	0005883a 	mov	r2,zero
    48dc:	003f0b06 	br	450c <___svfprintf_internal_r+0x1c38>
    48e0:	d9002917 	ldw	r4,164(sp)
    48e4:	d8c03217 	ldw	r3,200(sp)
    48e8:	20800044 	addi	r2,r4,1
    48ec:	1885883a 	add	r2,r3,r2
    48f0:	d8802e15 	stw	r2,184(sp)
    48f4:	103e870e 	bge	r2,zero,4314 <___svfprintf_internal_r+0x1a40>
    48f8:	0005883a 	mov	r2,zero
    48fc:	003e8506 	br	4314 <___svfprintf_internal_r+0x1a40>
    4900:	010000b4 	movhi	r4,2
    4904:	213d6184 	addi	r4,r4,-2682
    4908:	d9002b15 	stw	r4,172(sp)
    490c:	003cc506 	br	3c24 <___svfprintf_internal_r+0x1350>
    4910:	d8c03217 	ldw	r3,200(sp)
    4914:	18c00044 	addi	r3,r3,1
    4918:	d8c02e15 	stw	r3,184(sp)
    491c:	1805883a 	mov	r2,r3
    4920:	183fa10e 	bge	r3,zero,47a8 <___svfprintf_internal_r+0x1ed4>
    4924:	0005883a 	mov	r2,zero
    4928:	003f9f06 	br	47a8 <___svfprintf_internal_r+0x1ed4>
    492c:	d9003617 	ldw	r4,216(sp)
    4930:	000d883a 	mov	r6,zero
    4934:	000f883a 	mov	r7,zero
    4938:	a00b883a 	mov	r5,r20
    493c:	d8c03d15 	stw	r3,244(sp)
    4940:	da003e15 	stw	r8,248(sp)
    4944:	00111cc0 	call	111cc <__eqdf2>
    4948:	d8c03d17 	ldw	r3,244(sp)
    494c:	da003e17 	ldw	r8,248(sp)
    4950:	103f8726 	beq	r2,zero,4770 <___svfprintf_internal_r+0x1e9c>
    4954:	00800044 	movi	r2,1
    4958:	10c7c83a 	sub	r3,r2,r3
    495c:	d8c02615 	stw	r3,152(sp)
    4960:	003f8406 	br	4774 <___svfprintf_internal_r+0x1ea0>
    4964:	20000e1e 	bne	r4,zero,49a0 <___svfprintf_internal_r+0x20cc>
    4968:	9480004c 	andi	r18,r18,1
    496c:	90000c1e 	bne	r18,zero,49a0 <___svfprintf_internal_r+0x20cc>
    4970:	00800044 	movi	r2,1
    4974:	d8802e15 	stw	r2,184(sp)
    4978:	003e6606 	br	4314 <___svfprintf_internal_r+0x1a40>
    497c:	00800b44 	movi	r2,45
    4980:	05adc83a 	sub	r22,zero,r22
    4984:	d8802305 	stb	r2,140(sp)
    4988:	003f3b06 	br	4678 <___svfprintf_internal_r+0x1da4>
    498c:	0005883a 	mov	r2,zero
    4990:	003f4e06 	br	46cc <___svfprintf_internal_r+0x1df8>
    4994:	90a4703a 	and	r18,r18,r2
    4998:	903f4a26 	beq	r18,zero,46c4 <___svfprintf_internal_r+0x1df0>
    499c:	003f4606 	br	46b8 <___svfprintf_internal_r+0x1de4>
    49a0:	d8c02917 	ldw	r3,164(sp)
    49a4:	18c00084 	addi	r3,r3,2
    49a8:	d8c02e15 	stw	r3,184(sp)
    49ac:	1805883a 	mov	r2,r3
    49b0:	183e580e 	bge	r3,zero,4314 <___svfprintf_internal_r+0x1a40>
    49b4:	003fd006 	br	48f8 <___svfprintf_internal_r+0x2024>
    49b8:	00800084 	movi	r2,2
    49bc:	10c5c83a 	sub	r2,r2,r3
    49c0:	003f7506 	br	4798 <___svfprintf_internal_r+0x1ec4>
    49c4:	d8802d17 	ldw	r2,180(sp)
    49c8:	d9002d17 	ldw	r4,180(sp)
    49cc:	bc400043 	ldbu	r17,1(r23)
    49d0:	10800017 	ldw	r2,0(r2)
    49d4:	582f883a 	mov	r23,r11
    49d8:	d8802915 	stw	r2,164(sp)
    49dc:	20800104 	addi	r2,r4,4
    49e0:	d9002917 	ldw	r4,164(sp)
    49e4:	d8802d15 	stw	r2,180(sp)
    49e8:	203df00e 	bge	r4,zero,41ac <___svfprintf_internal_r+0x18d8>
    49ec:	8c403fcc 	andi	r17,r17,255
    49f0:	00bfffc4 	movi	r2,-1
    49f4:	8c40201c 	xori	r17,r17,128
    49f8:	d8802915 	stw	r2,164(sp)
    49fc:	8c7fe004 	addi	r17,r17,-128
    4a00:	00380806 	br	2a24 <___svfprintf_internal_r+0x150>
    4a04:	9080004c 	andi	r2,r18,1
    4a08:	0039883a 	mov	fp,zero
    4a0c:	10000726 	beq	r2,zero,4a2c <___svfprintf_internal_r+0x2158>
    4a10:	d8c02817 	ldw	r3,160(sp)
    4a14:	dc001dc4 	addi	r16,sp,119
    4a18:	00800c04 	movi	r2,48
    4a1c:	1c07c83a 	sub	r3,r3,r16
    4a20:	d8801dc5 	stb	r2,119(sp)
    4a24:	d8c02e15 	stw	r3,184(sp)
    4a28:	00395206 	br	2f74 <___svfprintf_internal_r+0x6a0>
    4a2c:	d8002e15 	stw	zero,184(sp)
    4a30:	dc001e04 	addi	r16,sp,120
    4a34:	00394f06 	br	2f74 <___svfprintf_internal_r+0x6a0>
    4a38:	0005883a 	mov	r2,zero
    4a3c:	003e3206 	br	4308 <___svfprintf_internal_r+0x1a34>
    4a40:	dd802617 	ldw	r22,152(sp)
    4a44:	003f0606 	br	4660 <___svfprintf_internal_r+0x1d8c>
    4a48:	d9c02785 	stb	r7,158(sp)
    4a4c:	003a5106 	br	3394 <___svfprintf_internal_r+0xac0>
    4a50:	d9c02785 	stb	r7,158(sp)
    4a54:	003a3706 	br	3334 <___svfprintf_internal_r+0xa60>
    4a58:	0005883a 	mov	r2,zero
    4a5c:	003f5e06 	br	47d8 <___svfprintf_internal_r+0x1f04>
    4a60:	d9c02785 	stb	r7,158(sp)
    4a64:	00391706 	br	2ec4 <___svfprintf_internal_r+0x5f0>
    4a68:	d9c02785 	stb	r7,158(sp)
    4a6c:	0038e606 	br	2e08 <___svfprintf_internal_r+0x534>
    4a70:	d8802344 	addi	r2,sp,141
    4a74:	003f0806 	br	4698 <___svfprintf_internal_r+0x1dc4>
    4a78:	d9c02785 	stb	r7,158(sp)
    4a7c:	0038b706 	br	2d5c <___svfprintf_internal_r+0x488>
    4a80:	d9c02785 	stb	r7,158(sp)
    4a84:	003adc06 	br	35f8 <___svfprintf_internal_r+0xd24>
    4a88:	d9403917 	ldw	r5,228(sp)
    4a8c:	00800304 	movi	r2,12
    4a90:	28800015 	stw	r2,0(r5)
    4a94:	00bfffc4 	movi	r2,-1
    4a98:	00387806 	br	2c7c <___svfprintf_internal_r+0x3a8>
    4a9c:	d9c02785 	stb	r7,158(sp)
    4aa0:	003abf06 	br	35a0 <___svfprintf_internal_r+0xccc>
    4aa4:	d9c02785 	stb	r7,158(sp)
    4aa8:	003a9b06 	br	3518 <___svfprintf_internal_r+0xc44>

00004aac <_user_strerror>:
    4aac:	0005883a 	mov	r2,zero
    4ab0:	f800283a 	ret

00004ab4 <___vfprintf_internal_r>:
    4ab4:	deffb804 	addi	sp,sp,-288
    4ab8:	dfc04715 	stw	ra,284(sp)
    4abc:	ddc04515 	stw	r23,276(sp)
    4ac0:	dd404315 	stw	r21,268(sp)
    4ac4:	d9002c15 	stw	r4,176(sp)
    4ac8:	282f883a 	mov	r23,r5
    4acc:	302b883a 	mov	r21,r6
    4ad0:	d9c02d15 	stw	r7,180(sp)
    4ad4:	df004615 	stw	fp,280(sp)
    4ad8:	dd804415 	stw	r22,272(sp)
    4adc:	dd004215 	stw	r20,264(sp)
    4ae0:	dcc04115 	stw	r19,260(sp)
    4ae4:	dc804015 	stw	r18,256(sp)
    4ae8:	dc403f15 	stw	r17,252(sp)
    4aec:	dc003e15 	stw	r16,248(sp)
    4af0:	00094100 	call	9410 <_localeconv_r>
    4af4:	10800017 	ldw	r2,0(r2)
    4af8:	1009883a 	mov	r4,r2
    4afc:	d8803415 	stw	r2,208(sp)
    4b00:	000b4380 	call	b438 <strlen>
    4b04:	d8803715 	stw	r2,220(sp)
    4b08:	d8802c17 	ldw	r2,176(sp)
    4b0c:	10000226 	beq	r2,zero,4b18 <___vfprintf_internal_r+0x64>
    4b10:	10800e17 	ldw	r2,56(r2)
    4b14:	1000f926 	beq	r2,zero,4efc <___vfprintf_internal_r+0x448>
    4b18:	b880030b 	ldhu	r2,12(r23)
    4b1c:	10c8000c 	andi	r3,r2,8192
    4b20:	1800061e 	bne	r3,zero,4b3c <___vfprintf_internal_r+0x88>
    4b24:	b9001917 	ldw	r4,100(r23)
    4b28:	00f7ffc4 	movi	r3,-8193
    4b2c:	10880014 	ori	r2,r2,8192
    4b30:	20c6703a 	and	r3,r4,r3
    4b34:	b880030d 	sth	r2,12(r23)
    4b38:	b8c01915 	stw	r3,100(r23)
    4b3c:	10c0020c 	andi	r3,r2,8
    4b40:	1800c126 	beq	r3,zero,4e48 <___vfprintf_internal_r+0x394>
    4b44:	b8c00417 	ldw	r3,16(r23)
    4b48:	1800bf26 	beq	r3,zero,4e48 <___vfprintf_internal_r+0x394>
    4b4c:	1080068c 	andi	r2,r2,26
    4b50:	00c00284 	movi	r3,10
    4b54:	10c0c426 	beq	r2,r3,4e68 <___vfprintf_internal_r+0x3b4>
    4b58:	d8c00404 	addi	r3,sp,16
    4b5c:	050000b4 	movhi	r20,2
    4b60:	d9001e04 	addi	r4,sp,120
    4b64:	a53d6984 	addi	r20,r20,-2650
    4b68:	d8c01e15 	stw	r3,120(sp)
    4b6c:	d8002015 	stw	zero,128(sp)
    4b70:	d8001f15 	stw	zero,124(sp)
    4b74:	d8003315 	stw	zero,204(sp)
    4b78:	d8003615 	stw	zero,216(sp)
    4b7c:	d8003815 	stw	zero,224(sp)
    4b80:	1811883a 	mov	r8,r3
    4b84:	d8003915 	stw	zero,228(sp)
    4b88:	d8003a15 	stw	zero,232(sp)
    4b8c:	d8002f15 	stw	zero,188(sp)
    4b90:	d9002815 	stw	r4,160(sp)
    4b94:	a8800007 	ldb	r2,0(r21)
    4b98:	10027b26 	beq	r2,zero,5588 <___vfprintf_internal_r+0xad4>
    4b9c:	00c00944 	movi	r3,37
    4ba0:	a821883a 	mov	r16,r21
    4ba4:	10c0021e 	bne	r2,r3,4bb0 <___vfprintf_internal_r+0xfc>
    4ba8:	00001406 	br	4bfc <___vfprintf_internal_r+0x148>
    4bac:	10c00326 	beq	r2,r3,4bbc <___vfprintf_internal_r+0x108>
    4bb0:	84000044 	addi	r16,r16,1
    4bb4:	80800007 	ldb	r2,0(r16)
    4bb8:	103ffc1e 	bne	r2,zero,4bac <___vfprintf_internal_r+0xf8>
    4bbc:	8563c83a 	sub	r17,r16,r21
    4bc0:	88000e26 	beq	r17,zero,4bfc <___vfprintf_internal_r+0x148>
    4bc4:	d8c02017 	ldw	r3,128(sp)
    4bc8:	d8801f17 	ldw	r2,124(sp)
    4bcc:	45400015 	stw	r21,0(r8)
    4bd0:	1c47883a 	add	r3,r3,r17
    4bd4:	10800044 	addi	r2,r2,1
    4bd8:	d8c02015 	stw	r3,128(sp)
    4bdc:	44400115 	stw	r17,4(r8)
    4be0:	d8801f15 	stw	r2,124(sp)
    4be4:	00c001c4 	movi	r3,7
    4be8:	1880a716 	blt	r3,r2,4e88 <___vfprintf_internal_r+0x3d4>
    4bec:	42000204 	addi	r8,r8,8
    4bf0:	d9402f17 	ldw	r5,188(sp)
    4bf4:	2c4b883a 	add	r5,r5,r17
    4bf8:	d9402f15 	stw	r5,188(sp)
    4bfc:	80800007 	ldb	r2,0(r16)
    4c00:	1000a826 	beq	r2,zero,4ea4 <___vfprintf_internal_r+0x3f0>
    4c04:	84400047 	ldb	r17,1(r16)
    4c08:	00bfffc4 	movi	r2,-1
    4c0c:	85400044 	addi	r21,r16,1
    4c10:	d8002785 	stb	zero,158(sp)
    4c14:	0007883a 	mov	r3,zero
    4c18:	000f883a 	mov	r7,zero
    4c1c:	d8802915 	stw	r2,164(sp)
    4c20:	d8003115 	stw	zero,196(sp)
    4c24:	0025883a 	mov	r18,zero
    4c28:	01401604 	movi	r5,88
    4c2c:	01800244 	movi	r6,9
    4c30:	02800a84 	movi	r10,42
    4c34:	02401b04 	movi	r9,108
    4c38:	ad400044 	addi	r21,r21,1
    4c3c:	88bff804 	addi	r2,r17,-32
    4c40:	28830436 	bltu	r5,r2,5854 <___vfprintf_internal_r+0xda0>
    4c44:	100490ba 	slli	r2,r2,2
    4c48:	01000034 	movhi	r4,0
    4c4c:	21131704 	addi	r4,r4,19548
    4c50:	1105883a 	add	r2,r2,r4
    4c54:	10800017 	ldw	r2,0(r2)
    4c58:	1000683a 	jmp	r2
    4c5c:	00005774 	movhi	zero,349
    4c60:	00005854 	movui	zero,353
    4c64:	00005854 	movui	zero,353
    4c68:	00005794 	movui	zero,350
    4c6c:	00005854 	movui	zero,353
    4c70:	00005854 	movui	zero,353
    4c74:	00005854 	movui	zero,353
    4c78:	00005854 	movui	zero,353
    4c7c:	00005854 	movui	zero,353
    4c80:	00005854 	movui	zero,353
    4c84:	00004f08 	cmpgei	zero,zero,316
    4c88:	000056b0 	cmpltui	zero,zero,346
    4c8c:	00005854 	movui	zero,353
    4c90:	00004dd0 	cmplti	zero,zero,311
    4c94:	00004f30 	cmpltui	zero,zero,316
    4c98:	00005854 	movui	zero,353
    4c9c:	00004f70 	cmpltui	zero,zero,317
    4ca0:	00004f7c 	xorhi	zero,zero,317
    4ca4:	00004f7c 	xorhi	zero,zero,317
    4ca8:	00004f7c 	xorhi	zero,zero,317
    4cac:	00004f7c 	xorhi	zero,zero,317
    4cb0:	00004f7c 	xorhi	zero,zero,317
    4cb4:	00004f7c 	xorhi	zero,zero,317
    4cb8:	00004f7c 	xorhi	zero,zero,317
    4cbc:	00004f7c 	xorhi	zero,zero,317
    4cc0:	00004f7c 	xorhi	zero,zero,317
    4cc4:	00005854 	movui	zero,353
    4cc8:	00005854 	movui	zero,353
    4ccc:	00005854 	movui	zero,353
    4cd0:	00005854 	movui	zero,353
    4cd4:	00005854 	movui	zero,353
    4cd8:	00005854 	movui	zero,353
    4cdc:	00005854 	movui	zero,353
    4ce0:	00005854 	movui	zero,353
    4ce4:	00005854 	movui	zero,353
    4ce8:	00005854 	movui	zero,353
    4cec:	00004fb0 	cmpltui	zero,zero,318
    4cf0:	0000506c 	andhi	zero,zero,321
    4cf4:	00005854 	movui	zero,353
    4cf8:	0000506c 	andhi	zero,zero,321
    4cfc:	00005854 	movui	zero,353
    4d00:	00005854 	movui	zero,353
    4d04:	00005854 	movui	zero,353
    4d08:	00005854 	movui	zero,353
    4d0c:	0000510c 	andi	zero,zero,324
    4d10:	00005854 	movui	zero,353
    4d14:	00005854 	movui	zero,353
    4d18:	00005118 	cmpnei	zero,zero,324
    4d1c:	00005854 	movui	zero,353
    4d20:	00005854 	movui	zero,353
    4d24:	00005854 	movui	zero,353
    4d28:	00005854 	movui	zero,353
    4d2c:	00005854 	movui	zero,353
    4d30:	00005590 	cmplti	zero,zero,342
    4d34:	00005854 	movui	zero,353
    4d38:	00005854 	movui	zero,353
    4d3c:	000055f0 	cmpltui	zero,zero,343
    4d40:	00005854 	movui	zero,353
    4d44:	00005854 	movui	zero,353
    4d48:	00005854 	movui	zero,353
    4d4c:	00005854 	movui	zero,353
    4d50:	00005854 	movui	zero,353
    4d54:	00005854 	movui	zero,353
    4d58:	00005854 	movui	zero,353
    4d5c:	00005854 	movui	zero,353
    4d60:	00005854 	movui	zero,353
    4d64:	00005854 	movui	zero,353
    4d68:	00005800 	call	580 <Task_read_PS2_Keyboard+0x34>
    4d6c:	000057a0 	cmpeqi	zero,zero,350
    4d70:	0000506c 	andhi	zero,zero,321
    4d74:	0000506c 	andhi	zero,zero,321
    4d78:	0000506c 	andhi	zero,zero,321
    4d7c:	000057b0 	cmpltui	zero,zero,350
    4d80:	000057a0 	cmpeqi	zero,zero,350
    4d84:	00005854 	movui	zero,353
    4d88:	00005854 	movui	zero,353
    4d8c:	000057bc 	xorhi	zero,zero,350
    4d90:	00005854 	movui	zero,353
    4d94:	000057cc 	andi	zero,zero,351
    4d98:	000056a0 	cmpeqi	zero,zero,346
    4d9c:	00004ddc 	xori	zero,zero,311
    4da0:	000056c0 	call	56c <Task_read_PS2_Keyboard+0x20>
    4da4:	00005854 	movui	zero,353
    4da8:	000056cc 	andi	zero,zero,347
    4dac:	00005854 	movui	zero,353
    4db0:	00005728 	cmpgeui	zero,zero,348
    4db4:	00005854 	movui	zero,353
    4db8:	00005854 	movui	zero,353
    4dbc:	00005738 	rdprs	zero,zero,348
    4dc0:	d9003117 	ldw	r4,196(sp)
    4dc4:	d8802d15 	stw	r2,180(sp)
    4dc8:	0109c83a 	sub	r4,zero,r4
    4dcc:	d9003115 	stw	r4,196(sp)
    4dd0:	94800114 	ori	r18,r18,4
    4dd4:	ac400007 	ldb	r17,0(r21)
    4dd8:	003f9706 	br	4c38 <___vfprintf_internal_r+0x184>
    4ddc:	00800c04 	movi	r2,48
    4de0:	d9002d17 	ldw	r4,180(sp)
    4de4:	d9402917 	ldw	r5,164(sp)
    4de8:	d8802705 	stb	r2,156(sp)
    4dec:	00801e04 	movi	r2,120
    4df0:	d8802745 	stb	r2,157(sp)
    4df4:	d8002785 	stb	zero,158(sp)
    4df8:	20c00104 	addi	r3,r4,4
    4dfc:	24c00017 	ldw	r19,0(r4)
    4e00:	002d883a 	mov	r22,zero
    4e04:	90800094 	ori	r2,r18,2
    4e08:	28029a16 	blt	r5,zero,5874 <___vfprintf_internal_r+0xdc0>
    4e0c:	00bfdfc4 	movi	r2,-129
    4e10:	90a4703a 	and	r18,r18,r2
    4e14:	d8c02d15 	stw	r3,180(sp)
    4e18:	94800094 	ori	r18,r18,2
    4e1c:	9802871e 	bne	r19,zero,583c <___vfprintf_internal_r+0xd88>
    4e20:	008000b4 	movhi	r2,2
    4e24:	10bd5a04 	addi	r2,r2,-2712
    4e28:	d8803915 	stw	r2,228(sp)
    4e2c:	04401e04 	movi	r17,120
    4e30:	d8802917 	ldw	r2,164(sp)
    4e34:	0039883a 	mov	fp,zero
    4e38:	1001e926 	beq	r2,zero,55e0 <___vfprintf_internal_r+0xb2c>
    4e3c:	0027883a 	mov	r19,zero
    4e40:	002d883a 	mov	r22,zero
    4e44:	00020506 	br	565c <___vfprintf_internal_r+0xba8>
    4e48:	d9002c17 	ldw	r4,176(sp)
    4e4c:	b80b883a 	mov	r5,r23
    4e50:	0006d840 	call	6d84 <__swsetup_r>
    4e54:	1005ac1e 	bne	r2,zero,6508 <___vfprintf_internal_r+0x1a54>
    4e58:	b880030b 	ldhu	r2,12(r23)
    4e5c:	00c00284 	movi	r3,10
    4e60:	1080068c 	andi	r2,r2,26
    4e64:	10ff3c1e 	bne	r2,r3,4b58 <___vfprintf_internal_r+0xa4>
    4e68:	b880038f 	ldh	r2,14(r23)
    4e6c:	103f3a16 	blt	r2,zero,4b58 <___vfprintf_internal_r+0xa4>
    4e70:	d9c02d17 	ldw	r7,180(sp)
    4e74:	d9002c17 	ldw	r4,176(sp)
    4e78:	a80d883a 	mov	r6,r21
    4e7c:	b80b883a 	mov	r5,r23
    4e80:	0006cc80 	call	6cc8 <__sbprintf>
    4e84:	00001106 	br	4ecc <___vfprintf_internal_r+0x418>
    4e88:	d9002c17 	ldw	r4,176(sp)
    4e8c:	d9801e04 	addi	r6,sp,120
    4e90:	b80b883a 	mov	r5,r23
    4e94:	000c9d80 	call	c9d8 <__sprint_r>
    4e98:	1000081e 	bne	r2,zero,4ebc <___vfprintf_internal_r+0x408>
    4e9c:	da000404 	addi	r8,sp,16
    4ea0:	003f5306 	br	4bf0 <___vfprintf_internal_r+0x13c>
    4ea4:	d8802017 	ldw	r2,128(sp)
    4ea8:	10000426 	beq	r2,zero,4ebc <___vfprintf_internal_r+0x408>
    4eac:	d9002c17 	ldw	r4,176(sp)
    4eb0:	d9801e04 	addi	r6,sp,120
    4eb4:	b80b883a 	mov	r5,r23
    4eb8:	000c9d80 	call	c9d8 <__sprint_r>
    4ebc:	b880030b 	ldhu	r2,12(r23)
    4ec0:	1080100c 	andi	r2,r2,64
    4ec4:	1005901e 	bne	r2,zero,6508 <___vfprintf_internal_r+0x1a54>
    4ec8:	d8802f17 	ldw	r2,188(sp)
    4ecc:	dfc04717 	ldw	ra,284(sp)
    4ed0:	df004617 	ldw	fp,280(sp)
    4ed4:	ddc04517 	ldw	r23,276(sp)
    4ed8:	dd804417 	ldw	r22,272(sp)
    4edc:	dd404317 	ldw	r21,268(sp)
    4ee0:	dd004217 	ldw	r20,264(sp)
    4ee4:	dcc04117 	ldw	r19,260(sp)
    4ee8:	dc804017 	ldw	r18,256(sp)
    4eec:	dc403f17 	ldw	r17,252(sp)
    4ef0:	dc003e17 	ldw	r16,248(sp)
    4ef4:	dec04804 	addi	sp,sp,288
    4ef8:	f800283a 	ret
    4efc:	d9002c17 	ldw	r4,176(sp)
    4f00:	0008d580 	call	8d58 <__sinit>
    4f04:	003f0406 	br	4b18 <___vfprintf_internal_r+0x64>
    4f08:	d8802d17 	ldw	r2,180(sp)
    4f0c:	d9002d17 	ldw	r4,180(sp)
    4f10:	10800017 	ldw	r2,0(r2)
    4f14:	d8803115 	stw	r2,196(sp)
    4f18:	20800104 	addi	r2,r4,4
    4f1c:	d9003117 	ldw	r4,196(sp)
    4f20:	203fa716 	blt	r4,zero,4dc0 <___vfprintf_internal_r+0x30c>
    4f24:	d8802d15 	stw	r2,180(sp)
    4f28:	ac400007 	ldb	r17,0(r21)
    4f2c:	003f4206 	br	4c38 <___vfprintf_internal_r+0x184>
    4f30:	ac400007 	ldb	r17,0(r21)
    4f34:	aac00044 	addi	r11,r21,1
    4f38:	8a872826 	beq	r17,r10,6bdc <___vfprintf_internal_r+0x2128>
    4f3c:	88bff404 	addi	r2,r17,-48
    4f40:	0009883a 	mov	r4,zero
    4f44:	30867d36 	bltu	r6,r2,693c <___vfprintf_internal_r+0x1e88>
    4f48:	5c400007 	ldb	r17,0(r11)
    4f4c:	210002a4 	muli	r4,r4,10
    4f50:	5d400044 	addi	r21,r11,1
    4f54:	a817883a 	mov	r11,r21
    4f58:	2089883a 	add	r4,r4,r2
    4f5c:	88bff404 	addi	r2,r17,-48
    4f60:	30bff92e 	bgeu	r6,r2,4f48 <___vfprintf_internal_r+0x494>
    4f64:	2005c916 	blt	r4,zero,668c <___vfprintf_internal_r+0x1bd8>
    4f68:	d9002915 	stw	r4,164(sp)
    4f6c:	003f3306 	br	4c3c <___vfprintf_internal_r+0x188>
    4f70:	94802014 	ori	r18,r18,128
    4f74:	ac400007 	ldb	r17,0(r21)
    4f78:	003f2f06 	br	4c38 <___vfprintf_internal_r+0x184>
    4f7c:	a809883a 	mov	r4,r21
    4f80:	d8003115 	stw	zero,196(sp)
    4f84:	88bff404 	addi	r2,r17,-48
    4f88:	0017883a 	mov	r11,zero
    4f8c:	24400007 	ldb	r17,0(r4)
    4f90:	5ac002a4 	muli	r11,r11,10
    4f94:	ad400044 	addi	r21,r21,1
    4f98:	a809883a 	mov	r4,r21
    4f9c:	12d7883a 	add	r11,r2,r11
    4fa0:	88bff404 	addi	r2,r17,-48
    4fa4:	30bff92e 	bgeu	r6,r2,4f8c <___vfprintf_internal_r+0x4d8>
    4fa8:	dac03115 	stw	r11,196(sp)
    4fac:	003f2306 	br	4c3c <___vfprintf_internal_r+0x188>
    4fb0:	18c03fcc 	andi	r3,r3,255
    4fb4:	18072b1e 	bne	r3,zero,6c64 <___vfprintf_internal_r+0x21b0>
    4fb8:	94800414 	ori	r18,r18,16
    4fbc:	9080080c 	andi	r2,r18,32
    4fc0:	10037b26 	beq	r2,zero,5db0 <___vfprintf_internal_r+0x12fc>
    4fc4:	d9402d17 	ldw	r5,180(sp)
    4fc8:	28800117 	ldw	r2,4(r5)
    4fcc:	2cc00017 	ldw	r19,0(r5)
    4fd0:	29400204 	addi	r5,r5,8
    4fd4:	d9402d15 	stw	r5,180(sp)
    4fd8:	102d883a 	mov	r22,r2
    4fdc:	10044b16 	blt	r2,zero,610c <___vfprintf_internal_r+0x1658>
    4fe0:	d9402917 	ldw	r5,164(sp)
    4fe4:	df002783 	ldbu	fp,158(sp)
    4fe8:	2803bc16 	blt	r5,zero,5edc <___vfprintf_internal_r+0x1428>
    4fec:	00ffdfc4 	movi	r3,-129
    4ff0:	9d84b03a 	or	r2,r19,r22
    4ff4:	90e4703a 	and	r18,r18,r3
    4ff8:	10017726 	beq	r2,zero,55d8 <___vfprintf_internal_r+0xb24>
    4ffc:	b0038326 	beq	r22,zero,5e0c <___vfprintf_internal_r+0x1358>
    5000:	dc402a15 	stw	r17,168(sp)
    5004:	dc001e04 	addi	r16,sp,120
    5008:	b023883a 	mov	r17,r22
    500c:	402d883a 	mov	r22,r8
    5010:	9809883a 	mov	r4,r19
    5014:	880b883a 	mov	r5,r17
    5018:	01800284 	movi	r6,10
    501c:	000f883a 	mov	r7,zero
    5020:	000f94c0 	call	f94c <__umoddi3>
    5024:	10800c04 	addi	r2,r2,48
    5028:	843fffc4 	addi	r16,r16,-1
    502c:	9809883a 	mov	r4,r19
    5030:	880b883a 	mov	r5,r17
    5034:	80800005 	stb	r2,0(r16)
    5038:	01800284 	movi	r6,10
    503c:	000f883a 	mov	r7,zero
    5040:	000f3d40 	call	f3d4 <__udivdi3>
    5044:	1027883a 	mov	r19,r2
    5048:	10c4b03a 	or	r2,r2,r3
    504c:	1823883a 	mov	r17,r3
    5050:	103fef1e 	bne	r2,zero,5010 <___vfprintf_internal_r+0x55c>
    5054:	d8c02817 	ldw	r3,160(sp)
    5058:	dc402a17 	ldw	r17,168(sp)
    505c:	b011883a 	mov	r8,r22
    5060:	1c07c83a 	sub	r3,r3,r16
    5064:	d8c02e15 	stw	r3,184(sp)
    5068:	00005906 	br	51d0 <___vfprintf_internal_r+0x71c>
    506c:	18c03fcc 	andi	r3,r3,255
    5070:	1806fa1e 	bne	r3,zero,6c5c <___vfprintf_internal_r+0x21a8>
    5074:	9080020c 	andi	r2,r18,8
    5078:	10048a26 	beq	r2,zero,62a4 <___vfprintf_internal_r+0x17f0>
    507c:	d8c02d17 	ldw	r3,180(sp)
    5080:	d9002d17 	ldw	r4,180(sp)
    5084:	d9402d17 	ldw	r5,180(sp)
    5088:	18c00017 	ldw	r3,0(r3)
    508c:	21000117 	ldw	r4,4(r4)
    5090:	29400204 	addi	r5,r5,8
    5094:	d8c03615 	stw	r3,216(sp)
    5098:	d9003815 	stw	r4,224(sp)
    509c:	d9402d15 	stw	r5,180(sp)
    50a0:	d9003617 	ldw	r4,216(sp)
    50a4:	d9403817 	ldw	r5,224(sp)
    50a8:	da003d15 	stw	r8,244(sp)
    50ac:	04000044 	movi	r16,1
    50b0:	000b1580 	call	b158 <__fpclassifyd>
    50b4:	da003d17 	ldw	r8,244(sp)
    50b8:	14041f1e 	bne	r2,r16,6138 <___vfprintf_internal_r+0x1684>
    50bc:	d9003617 	ldw	r4,216(sp)
    50c0:	d9403817 	ldw	r5,224(sp)
    50c4:	000d883a 	mov	r6,zero
    50c8:	000f883a 	mov	r7,zero
    50cc:	00113300 	call	11330 <__ledf2>
    50d0:	da003d17 	ldw	r8,244(sp)
    50d4:	1005be16 	blt	r2,zero,67d0 <___vfprintf_internal_r+0x1d1c>
    50d8:	df002783 	ldbu	fp,158(sp)
    50dc:	008011c4 	movi	r2,71
    50e0:	1445330e 	bge	r2,r17,65b0 <___vfprintf_internal_r+0x1afc>
    50e4:	040000b4 	movhi	r16,2
    50e8:	843d5204 	addi	r16,r16,-2744
    50ec:	00c000c4 	movi	r3,3
    50f0:	00bfdfc4 	movi	r2,-129
    50f4:	d8c02a15 	stw	r3,168(sp)
    50f8:	90a4703a 	and	r18,r18,r2
    50fc:	d8c02e15 	stw	r3,184(sp)
    5100:	d8002915 	stw	zero,164(sp)
    5104:	d8003215 	stw	zero,200(sp)
    5108:	00003706 	br	51e8 <___vfprintf_internal_r+0x734>
    510c:	94800214 	ori	r18,r18,8
    5110:	ac400007 	ldb	r17,0(r21)
    5114:	003ec806 	br	4c38 <___vfprintf_internal_r+0x184>
    5118:	18c03fcc 	andi	r3,r3,255
    511c:	1806db1e 	bne	r3,zero,6c8c <___vfprintf_internal_r+0x21d8>
    5120:	94800414 	ori	r18,r18,16
    5124:	9080080c 	andi	r2,r18,32
    5128:	1002d826 	beq	r2,zero,5c8c <___vfprintf_internal_r+0x11d8>
    512c:	d9402d17 	ldw	r5,180(sp)
    5130:	d8c02917 	ldw	r3,164(sp)
    5134:	d8002785 	stb	zero,158(sp)
    5138:	28800204 	addi	r2,r5,8
    513c:	2cc00017 	ldw	r19,0(r5)
    5140:	2d800117 	ldw	r22,4(r5)
    5144:	18048f16 	blt	r3,zero,6384 <___vfprintf_internal_r+0x18d0>
    5148:	013fdfc4 	movi	r4,-129
    514c:	9d86b03a 	or	r3,r19,r22
    5150:	d8802d15 	stw	r2,180(sp)
    5154:	9124703a 	and	r18,r18,r4
    5158:	1802d91e 	bne	r3,zero,5cc0 <___vfprintf_internal_r+0x120c>
    515c:	d8c02917 	ldw	r3,164(sp)
    5160:	0039883a 	mov	fp,zero
    5164:	1805c326 	beq	r3,zero,6874 <___vfprintf_internal_r+0x1dc0>
    5168:	0027883a 	mov	r19,zero
    516c:	002d883a 	mov	r22,zero
    5170:	dc001e04 	addi	r16,sp,120
    5174:	9806d0fa 	srli	r3,r19,3
    5178:	b008977a 	slli	r4,r22,29
    517c:	b02cd0fa 	srli	r22,r22,3
    5180:	9cc001cc 	andi	r19,r19,7
    5184:	98800c04 	addi	r2,r19,48
    5188:	843fffc4 	addi	r16,r16,-1
    518c:	20e6b03a 	or	r19,r4,r3
    5190:	80800005 	stb	r2,0(r16)
    5194:	9d86b03a 	or	r3,r19,r22
    5198:	183ff61e 	bne	r3,zero,5174 <___vfprintf_internal_r+0x6c0>
    519c:	90c0004c 	andi	r3,r18,1
    51a0:	18013b26 	beq	r3,zero,5690 <___vfprintf_internal_r+0xbdc>
    51a4:	10803fcc 	andi	r2,r2,255
    51a8:	1080201c 	xori	r2,r2,128
    51ac:	10bfe004 	addi	r2,r2,-128
    51b0:	00c00c04 	movi	r3,48
    51b4:	10c13626 	beq	r2,r3,5690 <___vfprintf_internal_r+0xbdc>
    51b8:	80ffffc5 	stb	r3,-1(r16)
    51bc:	d8c02817 	ldw	r3,160(sp)
    51c0:	80bfffc4 	addi	r2,r16,-1
    51c4:	1021883a 	mov	r16,r2
    51c8:	1887c83a 	sub	r3,r3,r2
    51cc:	d8c02e15 	stw	r3,184(sp)
    51d0:	d8802e17 	ldw	r2,184(sp)
    51d4:	d9002917 	ldw	r4,164(sp)
    51d8:	1100010e 	bge	r2,r4,51e0 <___vfprintf_internal_r+0x72c>
    51dc:	2005883a 	mov	r2,r4
    51e0:	d8802a15 	stw	r2,168(sp)
    51e4:	d8003215 	stw	zero,200(sp)
    51e8:	e7003fcc 	andi	fp,fp,255
    51ec:	e700201c 	xori	fp,fp,128
    51f0:	e73fe004 	addi	fp,fp,-128
    51f4:	e0000326 	beq	fp,zero,5204 <___vfprintf_internal_r+0x750>
    51f8:	d8c02a17 	ldw	r3,168(sp)
    51fc:	18c00044 	addi	r3,r3,1
    5200:	d8c02a15 	stw	r3,168(sp)
    5204:	90c0008c 	andi	r3,r18,2
    5208:	d8c02b15 	stw	r3,172(sp)
    520c:	18000326 	beq	r3,zero,521c <___vfprintf_internal_r+0x768>
    5210:	d8c02a17 	ldw	r3,168(sp)
    5214:	18c00084 	addi	r3,r3,2
    5218:	d8c02a15 	stw	r3,168(sp)
    521c:	90c0210c 	andi	r3,r18,132
    5220:	d8c03015 	stw	r3,192(sp)
    5224:	1801a31e 	bne	r3,zero,58b4 <___vfprintf_internal_r+0xe00>
    5228:	d9003117 	ldw	r4,196(sp)
    522c:	d8c02a17 	ldw	r3,168(sp)
    5230:	20e7c83a 	sub	r19,r4,r3
    5234:	04c19f0e 	bge	zero,r19,58b4 <___vfprintf_internal_r+0xe00>
    5238:	02400404 	movi	r9,16
    523c:	d8c02017 	ldw	r3,128(sp)
    5240:	d8801f17 	ldw	r2,124(sp)
    5244:	4cc50d0e 	bge	r9,r19,667c <___vfprintf_internal_r+0x1bc8>
    5248:	014000b4 	movhi	r5,2
    524c:	297d6d84 	addi	r5,r5,-2634
    5250:	dc403b15 	stw	r17,236(sp)
    5254:	d9403515 	stw	r5,212(sp)
    5258:	9823883a 	mov	r17,r19
    525c:	482d883a 	mov	r22,r9
    5260:	9027883a 	mov	r19,r18
    5264:	070001c4 	movi	fp,7
    5268:	8025883a 	mov	r18,r16
    526c:	dc002c17 	ldw	r16,176(sp)
    5270:	00000306 	br	5280 <___vfprintf_internal_r+0x7cc>
    5274:	8c7ffc04 	addi	r17,r17,-16
    5278:	42000204 	addi	r8,r8,8
    527c:	b440130e 	bge	r22,r17,52cc <___vfprintf_internal_r+0x818>
    5280:	010000b4 	movhi	r4,2
    5284:	18c00404 	addi	r3,r3,16
    5288:	10800044 	addi	r2,r2,1
    528c:	213d6d84 	addi	r4,r4,-2634
    5290:	41000015 	stw	r4,0(r8)
    5294:	45800115 	stw	r22,4(r8)
    5298:	d8c02015 	stw	r3,128(sp)
    529c:	d8801f15 	stw	r2,124(sp)
    52a0:	e0bff40e 	bge	fp,r2,5274 <___vfprintf_internal_r+0x7c0>
    52a4:	d9801e04 	addi	r6,sp,120
    52a8:	b80b883a 	mov	r5,r23
    52ac:	8009883a 	mov	r4,r16
    52b0:	000c9d80 	call	c9d8 <__sprint_r>
    52b4:	103f011e 	bne	r2,zero,4ebc <___vfprintf_internal_r+0x408>
    52b8:	8c7ffc04 	addi	r17,r17,-16
    52bc:	d8c02017 	ldw	r3,128(sp)
    52c0:	d8801f17 	ldw	r2,124(sp)
    52c4:	da000404 	addi	r8,sp,16
    52c8:	b47fed16 	blt	r22,r17,5280 <___vfprintf_internal_r+0x7cc>
    52cc:	9021883a 	mov	r16,r18
    52d0:	9825883a 	mov	r18,r19
    52d4:	8827883a 	mov	r19,r17
    52d8:	dc403b17 	ldw	r17,236(sp)
    52dc:	d9403517 	ldw	r5,212(sp)
    52e0:	98c7883a 	add	r3,r19,r3
    52e4:	10800044 	addi	r2,r2,1
    52e8:	41400015 	stw	r5,0(r8)
    52ec:	44c00115 	stw	r19,4(r8)
    52f0:	d8c02015 	stw	r3,128(sp)
    52f4:	d8801f15 	stw	r2,124(sp)
    52f8:	010001c4 	movi	r4,7
    52fc:	2082a316 	blt	r4,r2,5d8c <___vfprintf_internal_r+0x12d8>
    5300:	df002787 	ldb	fp,158(sp)
    5304:	42000204 	addi	r8,r8,8
    5308:	e0000c26 	beq	fp,zero,533c <___vfprintf_internal_r+0x888>
    530c:	d8801f17 	ldw	r2,124(sp)
    5310:	d9002784 	addi	r4,sp,158
    5314:	18c00044 	addi	r3,r3,1
    5318:	10800044 	addi	r2,r2,1
    531c:	41000015 	stw	r4,0(r8)
    5320:	01000044 	movi	r4,1
    5324:	41000115 	stw	r4,4(r8)
    5328:	d8c02015 	stw	r3,128(sp)
    532c:	d8801f15 	stw	r2,124(sp)
    5330:	010001c4 	movi	r4,7
    5334:	20823c16 	blt	r4,r2,5c28 <___vfprintf_internal_r+0x1174>
    5338:	42000204 	addi	r8,r8,8
    533c:	d8802b17 	ldw	r2,172(sp)
    5340:	10000c26 	beq	r2,zero,5374 <___vfprintf_internal_r+0x8c0>
    5344:	d8801f17 	ldw	r2,124(sp)
    5348:	d9002704 	addi	r4,sp,156
    534c:	18c00084 	addi	r3,r3,2
    5350:	10800044 	addi	r2,r2,1
    5354:	41000015 	stw	r4,0(r8)
    5358:	01000084 	movi	r4,2
    535c:	41000115 	stw	r4,4(r8)
    5360:	d8c02015 	stw	r3,128(sp)
    5364:	d8801f15 	stw	r2,124(sp)
    5368:	010001c4 	movi	r4,7
    536c:	20823616 	blt	r4,r2,5c48 <___vfprintf_internal_r+0x1194>
    5370:	42000204 	addi	r8,r8,8
    5374:	d9003017 	ldw	r4,192(sp)
    5378:	00802004 	movi	r2,128
    537c:	20819926 	beq	r4,r2,59e4 <___vfprintf_internal_r+0xf30>
    5380:	d9402917 	ldw	r5,164(sp)
    5384:	d8802e17 	ldw	r2,184(sp)
    5388:	28adc83a 	sub	r22,r5,r2
    538c:	0580310e 	bge	zero,r22,5454 <___vfprintf_internal_r+0x9a0>
    5390:	07000404 	movi	fp,16
    5394:	d8801f17 	ldw	r2,124(sp)
    5398:	e584140e 	bge	fp,r22,63ec <___vfprintf_internal_r+0x1938>
    539c:	014000b4 	movhi	r5,2
    53a0:	297d6984 	addi	r5,r5,-2650
    53a4:	dc402915 	stw	r17,164(sp)
    53a8:	d9402b15 	stw	r5,172(sp)
    53ac:	b023883a 	mov	r17,r22
    53b0:	04c001c4 	movi	r19,7
    53b4:	a82d883a 	mov	r22,r21
    53b8:	902b883a 	mov	r21,r18
    53bc:	8025883a 	mov	r18,r16
    53c0:	dc002c17 	ldw	r16,176(sp)
    53c4:	00000306 	br	53d4 <___vfprintf_internal_r+0x920>
    53c8:	8c7ffc04 	addi	r17,r17,-16
    53cc:	42000204 	addi	r8,r8,8
    53d0:	e440110e 	bge	fp,r17,5418 <___vfprintf_internal_r+0x964>
    53d4:	18c00404 	addi	r3,r3,16
    53d8:	10800044 	addi	r2,r2,1
    53dc:	45000015 	stw	r20,0(r8)
    53e0:	47000115 	stw	fp,4(r8)
    53e4:	d8c02015 	stw	r3,128(sp)
    53e8:	d8801f15 	stw	r2,124(sp)
    53ec:	98bff60e 	bge	r19,r2,53c8 <___vfprintf_internal_r+0x914>
    53f0:	d9801e04 	addi	r6,sp,120
    53f4:	b80b883a 	mov	r5,r23
    53f8:	8009883a 	mov	r4,r16
    53fc:	000c9d80 	call	c9d8 <__sprint_r>
    5400:	103eae1e 	bne	r2,zero,4ebc <___vfprintf_internal_r+0x408>
    5404:	8c7ffc04 	addi	r17,r17,-16
    5408:	d8c02017 	ldw	r3,128(sp)
    540c:	d8801f17 	ldw	r2,124(sp)
    5410:	da000404 	addi	r8,sp,16
    5414:	e47fef16 	blt	fp,r17,53d4 <___vfprintf_internal_r+0x920>
    5418:	9021883a 	mov	r16,r18
    541c:	a825883a 	mov	r18,r21
    5420:	b02b883a 	mov	r21,r22
    5424:	882d883a 	mov	r22,r17
    5428:	dc402917 	ldw	r17,164(sp)
    542c:	d9002b17 	ldw	r4,172(sp)
    5430:	1d87883a 	add	r3,r3,r22
    5434:	10800044 	addi	r2,r2,1
    5438:	41000015 	stw	r4,0(r8)
    543c:	45800115 	stw	r22,4(r8)
    5440:	d8c02015 	stw	r3,128(sp)
    5444:	d8801f15 	stw	r2,124(sp)
    5448:	010001c4 	movi	r4,7
    544c:	2081ee16 	blt	r4,r2,5c08 <___vfprintf_internal_r+0x1154>
    5450:	42000204 	addi	r8,r8,8
    5454:	9080400c 	andi	r2,r18,256
    5458:	1001181e 	bne	r2,zero,58bc <___vfprintf_internal_r+0xe08>
    545c:	d9402e17 	ldw	r5,184(sp)
    5460:	d8801f17 	ldw	r2,124(sp)
    5464:	44000015 	stw	r16,0(r8)
    5468:	1947883a 	add	r3,r3,r5
    546c:	10800044 	addi	r2,r2,1
    5470:	41400115 	stw	r5,4(r8)
    5474:	d8c02015 	stw	r3,128(sp)
    5478:	d8801f15 	stw	r2,124(sp)
    547c:	010001c4 	movi	r4,7
    5480:	2081d316 	blt	r4,r2,5bd0 <___vfprintf_internal_r+0x111c>
    5484:	42000204 	addi	r8,r8,8
    5488:	9480010c 	andi	r18,r18,4
    548c:	90003226 	beq	r18,zero,5558 <___vfprintf_internal_r+0xaa4>
    5490:	d9403117 	ldw	r5,196(sp)
    5494:	d8802a17 	ldw	r2,168(sp)
    5498:	28a1c83a 	sub	r16,r5,r2
    549c:	04002e0e 	bge	zero,r16,5558 <___vfprintf_internal_r+0xaa4>
    54a0:	04400404 	movi	r17,16
    54a4:	d8801f17 	ldw	r2,124(sp)
    54a8:	8c04a20e 	bge	r17,r16,6734 <___vfprintf_internal_r+0x1c80>
    54ac:	014000b4 	movhi	r5,2
    54b0:	297d6d84 	addi	r5,r5,-2634
    54b4:	d9403515 	stw	r5,212(sp)
    54b8:	048001c4 	movi	r18,7
    54bc:	dcc02c17 	ldw	r19,176(sp)
    54c0:	00000306 	br	54d0 <___vfprintf_internal_r+0xa1c>
    54c4:	843ffc04 	addi	r16,r16,-16
    54c8:	42000204 	addi	r8,r8,8
    54cc:	8c00130e 	bge	r17,r16,551c <___vfprintf_internal_r+0xa68>
    54d0:	010000b4 	movhi	r4,2
    54d4:	18c00404 	addi	r3,r3,16
    54d8:	10800044 	addi	r2,r2,1
    54dc:	213d6d84 	addi	r4,r4,-2634
    54e0:	41000015 	stw	r4,0(r8)
    54e4:	44400115 	stw	r17,4(r8)
    54e8:	d8c02015 	stw	r3,128(sp)
    54ec:	d8801f15 	stw	r2,124(sp)
    54f0:	90bff40e 	bge	r18,r2,54c4 <___vfprintf_internal_r+0xa10>
    54f4:	d9801e04 	addi	r6,sp,120
    54f8:	b80b883a 	mov	r5,r23
    54fc:	9809883a 	mov	r4,r19
    5500:	000c9d80 	call	c9d8 <__sprint_r>
    5504:	103e6d1e 	bne	r2,zero,4ebc <___vfprintf_internal_r+0x408>
    5508:	843ffc04 	addi	r16,r16,-16
    550c:	d8c02017 	ldw	r3,128(sp)
    5510:	d8801f17 	ldw	r2,124(sp)
    5514:	da000404 	addi	r8,sp,16
    5518:	8c3fed16 	blt	r17,r16,54d0 <___vfprintf_internal_r+0xa1c>
    551c:	d9403517 	ldw	r5,212(sp)
    5520:	1c07883a 	add	r3,r3,r16
    5524:	10800044 	addi	r2,r2,1
    5528:	41400015 	stw	r5,0(r8)
    552c:	44000115 	stw	r16,4(r8)
    5530:	d8c02015 	stw	r3,128(sp)
    5534:	d8801f15 	stw	r2,124(sp)
    5538:	010001c4 	movi	r4,7
    553c:	2080060e 	bge	r4,r2,5558 <___vfprintf_internal_r+0xaa4>
    5540:	d9002c17 	ldw	r4,176(sp)
    5544:	d9801e04 	addi	r6,sp,120
    5548:	b80b883a 	mov	r5,r23
    554c:	000c9d80 	call	c9d8 <__sprint_r>
    5550:	103e5a1e 	bne	r2,zero,4ebc <___vfprintf_internal_r+0x408>
    5554:	d8c02017 	ldw	r3,128(sp)
    5558:	d8803117 	ldw	r2,196(sp)
    555c:	d9002a17 	ldw	r4,168(sp)
    5560:	1100010e 	bge	r2,r4,5568 <___vfprintf_internal_r+0xab4>
    5564:	2005883a 	mov	r2,r4
    5568:	d9402f17 	ldw	r5,188(sp)
    556c:	288b883a 	add	r5,r5,r2
    5570:	d9402f15 	stw	r5,188(sp)
    5574:	18019e1e 	bne	r3,zero,5bf0 <___vfprintf_internal_r+0x113c>
    5578:	a8800007 	ldb	r2,0(r21)
    557c:	d8001f15 	stw	zero,124(sp)
    5580:	da000404 	addi	r8,sp,16
    5584:	103d851e 	bne	r2,zero,4b9c <___vfprintf_internal_r+0xe8>
    5588:	a821883a 	mov	r16,r21
    558c:	003d9b06 	br	4bfc <___vfprintf_internal_r+0x148>
    5590:	18c03fcc 	andi	r3,r3,255
    5594:	1805c11e 	bne	r3,zero,6c9c <___vfprintf_internal_r+0x21e8>
    5598:	94800414 	ori	r18,r18,16
    559c:	9080080c 	andi	r2,r18,32
    55a0:	10020c26 	beq	r2,zero,5dd4 <___vfprintf_internal_r+0x1320>
    55a4:	d8802d17 	ldw	r2,180(sp)
    55a8:	d9002917 	ldw	r4,164(sp)
    55ac:	d8002785 	stb	zero,158(sp)
    55b0:	10c00204 	addi	r3,r2,8
    55b4:	14c00017 	ldw	r19,0(r2)
    55b8:	15800117 	ldw	r22,4(r2)
    55bc:	20040f16 	blt	r4,zero,65fc <___vfprintf_internal_r+0x1b48>
    55c0:	013fdfc4 	movi	r4,-129
    55c4:	9d84b03a 	or	r2,r19,r22
    55c8:	d8c02d15 	stw	r3,180(sp)
    55cc:	9124703a 	and	r18,r18,r4
    55d0:	0039883a 	mov	fp,zero
    55d4:	103e891e 	bne	r2,zero,4ffc <___vfprintf_internal_r+0x548>
    55d8:	d9002917 	ldw	r4,164(sp)
    55dc:	2002c11e 	bne	r4,zero,60e4 <___vfprintf_internal_r+0x1630>
    55e0:	d8002915 	stw	zero,164(sp)
    55e4:	d8002e15 	stw	zero,184(sp)
    55e8:	dc001e04 	addi	r16,sp,120
    55ec:	003ef806 	br	51d0 <___vfprintf_internal_r+0x71c>
    55f0:	18c03fcc 	andi	r3,r3,255
    55f4:	18059d1e 	bne	r3,zero,6c6c <___vfprintf_internal_r+0x21b8>
    55f8:	014000b4 	movhi	r5,2
    55fc:	297d5504 	addi	r5,r5,-2732
    5600:	d9403915 	stw	r5,228(sp)
    5604:	9080080c 	andi	r2,r18,32
    5608:	10005226 	beq	r2,zero,5754 <___vfprintf_internal_r+0xca0>
    560c:	d8802d17 	ldw	r2,180(sp)
    5610:	14c00017 	ldw	r19,0(r2)
    5614:	15800117 	ldw	r22,4(r2)
    5618:	10800204 	addi	r2,r2,8
    561c:	d8802d15 	stw	r2,180(sp)
    5620:	9080004c 	andi	r2,r18,1
    5624:	10019026 	beq	r2,zero,5c68 <___vfprintf_internal_r+0x11b4>
    5628:	9d84b03a 	or	r2,r19,r22
    562c:	10036926 	beq	r2,zero,63d4 <___vfprintf_internal_r+0x1920>
    5630:	d8c02917 	ldw	r3,164(sp)
    5634:	00800c04 	movi	r2,48
    5638:	d8802705 	stb	r2,156(sp)
    563c:	dc402745 	stb	r17,157(sp)
    5640:	d8002785 	stb	zero,158(sp)
    5644:	90800094 	ori	r2,r18,2
    5648:	18045d16 	blt	r3,zero,67c0 <___vfprintf_internal_r+0x1d0c>
    564c:	00bfdfc4 	movi	r2,-129
    5650:	90a4703a 	and	r18,r18,r2
    5654:	94800094 	ori	r18,r18,2
    5658:	0039883a 	mov	fp,zero
    565c:	d9003917 	ldw	r4,228(sp)
    5660:	dc001e04 	addi	r16,sp,120
    5664:	988003cc 	andi	r2,r19,15
    5668:	b006973a 	slli	r3,r22,28
    566c:	2085883a 	add	r2,r4,r2
    5670:	9826d13a 	srli	r19,r19,4
    5674:	10800003 	ldbu	r2,0(r2)
    5678:	b02cd13a 	srli	r22,r22,4
    567c:	843fffc4 	addi	r16,r16,-1
    5680:	1ce6b03a 	or	r19,r3,r19
    5684:	80800005 	stb	r2,0(r16)
    5688:	9d84b03a 	or	r2,r19,r22
    568c:	103ff51e 	bne	r2,zero,5664 <___vfprintf_internal_r+0xbb0>
    5690:	d8c02817 	ldw	r3,160(sp)
    5694:	1c07c83a 	sub	r3,r3,r16
    5698:	d8c02e15 	stw	r3,184(sp)
    569c:	003ecc06 	br	51d0 <___vfprintf_internal_r+0x71c>
    56a0:	18c03fcc 	andi	r3,r3,255
    56a4:	183e9f26 	beq	r3,zero,5124 <___vfprintf_internal_r+0x670>
    56a8:	d9c02785 	stb	r7,158(sp)
    56ac:	003e9d06 	br	5124 <___vfprintf_internal_r+0x670>
    56b0:	00c00044 	movi	r3,1
    56b4:	01c00ac4 	movi	r7,43
    56b8:	ac400007 	ldb	r17,0(r21)
    56bc:	003d5e06 	br	4c38 <___vfprintf_internal_r+0x184>
    56c0:	94800814 	ori	r18,r18,32
    56c4:	ac400007 	ldb	r17,0(r21)
    56c8:	003d5b06 	br	4c38 <___vfprintf_internal_r+0x184>
    56cc:	d8c02d17 	ldw	r3,180(sp)
    56d0:	d8002785 	stb	zero,158(sp)
    56d4:	1c000017 	ldw	r16,0(r3)
    56d8:	1cc00104 	addi	r19,r3,4
    56dc:	80041926 	beq	r16,zero,6744 <___vfprintf_internal_r+0x1c90>
    56e0:	d9002917 	ldw	r4,164(sp)
    56e4:	2003d016 	blt	r4,zero,6628 <___vfprintf_internal_r+0x1b74>
    56e8:	200d883a 	mov	r6,r4
    56ec:	000b883a 	mov	r5,zero
    56f0:	8009883a 	mov	r4,r16
    56f4:	da003d15 	stw	r8,244(sp)
    56f8:	0009e080 	call	9e08 <memchr>
    56fc:	da003d17 	ldw	r8,244(sp)
    5700:	10045426 	beq	r2,zero,6854 <___vfprintf_internal_r+0x1da0>
    5704:	1405c83a 	sub	r2,r2,r16
    5708:	d8802e15 	stw	r2,184(sp)
    570c:	1003cc16 	blt	r2,zero,6640 <___vfprintf_internal_r+0x1b8c>
    5710:	df002783 	ldbu	fp,158(sp)
    5714:	d8802a15 	stw	r2,168(sp)
    5718:	dcc02d15 	stw	r19,180(sp)
    571c:	d8002915 	stw	zero,164(sp)
    5720:	d8003215 	stw	zero,200(sp)
    5724:	003eb006 	br	51e8 <___vfprintf_internal_r+0x734>
    5728:	18c03fcc 	andi	r3,r3,255
    572c:	183f9b26 	beq	r3,zero,559c <___vfprintf_internal_r+0xae8>
    5730:	d9c02785 	stb	r7,158(sp)
    5734:	003f9906 	br	559c <___vfprintf_internal_r+0xae8>
    5738:	18c03fcc 	andi	r3,r3,255
    573c:	1805551e 	bne	r3,zero,6c94 <___vfprintf_internal_r+0x21e0>
    5740:	014000b4 	movhi	r5,2
    5744:	297d5a04 	addi	r5,r5,-2712
    5748:	d9403915 	stw	r5,228(sp)
    574c:	9080080c 	andi	r2,r18,32
    5750:	103fae1e 	bne	r2,zero,560c <___vfprintf_internal_r+0xb58>
    5754:	9080040c 	andi	r2,r18,16
    5758:	1002de26 	beq	r2,zero,62d4 <___vfprintf_internal_r+0x1820>
    575c:	d8c02d17 	ldw	r3,180(sp)
    5760:	002d883a 	mov	r22,zero
    5764:	1cc00017 	ldw	r19,0(r3)
    5768:	18c00104 	addi	r3,r3,4
    576c:	d8c02d15 	stw	r3,180(sp)
    5770:	003fab06 	br	5620 <___vfprintf_internal_r+0xb6c>
    5774:	38803fcc 	andi	r2,r7,255
    5778:	1080201c 	xori	r2,r2,128
    577c:	10bfe004 	addi	r2,r2,-128
    5780:	1002d21e 	bne	r2,zero,62cc <___vfprintf_internal_r+0x1818>
    5784:	00c00044 	movi	r3,1
    5788:	01c00804 	movi	r7,32
    578c:	ac400007 	ldb	r17,0(r21)
    5790:	003d2906 	br	4c38 <___vfprintf_internal_r+0x184>
    5794:	94800054 	ori	r18,r18,1
    5798:	ac400007 	ldb	r17,0(r21)
    579c:	003d2606 	br	4c38 <___vfprintf_internal_r+0x184>
    57a0:	18c03fcc 	andi	r3,r3,255
    57a4:	183e0526 	beq	r3,zero,4fbc <___vfprintf_internal_r+0x508>
    57a8:	d9c02785 	stb	r7,158(sp)
    57ac:	003e0306 	br	4fbc <___vfprintf_internal_r+0x508>
    57b0:	94801014 	ori	r18,r18,64
    57b4:	ac400007 	ldb	r17,0(r21)
    57b8:	003d1f06 	br	4c38 <___vfprintf_internal_r+0x184>
    57bc:	ac400007 	ldb	r17,0(r21)
    57c0:	8a438726 	beq	r17,r9,65e0 <___vfprintf_internal_r+0x1b2c>
    57c4:	94800414 	ori	r18,r18,16
    57c8:	003d1b06 	br	4c38 <___vfprintf_internal_r+0x184>
    57cc:	18c03fcc 	andi	r3,r3,255
    57d0:	1805341e 	bne	r3,zero,6ca4 <___vfprintf_internal_r+0x21f0>
    57d4:	9080080c 	andi	r2,r18,32
    57d8:	1002cd26 	beq	r2,zero,6310 <___vfprintf_internal_r+0x185c>
    57dc:	d9402d17 	ldw	r5,180(sp)
    57e0:	d9002f17 	ldw	r4,188(sp)
    57e4:	28800017 	ldw	r2,0(r5)
    57e8:	2007d7fa 	srai	r3,r4,31
    57ec:	29400104 	addi	r5,r5,4
    57f0:	d9402d15 	stw	r5,180(sp)
    57f4:	11000015 	stw	r4,0(r2)
    57f8:	10c00115 	stw	r3,4(r2)
    57fc:	003ce506 	br	4b94 <___vfprintf_internal_r+0xe0>
    5800:	d8c02d17 	ldw	r3,180(sp)
    5804:	d9002d17 	ldw	r4,180(sp)
    5808:	d8002785 	stb	zero,158(sp)
    580c:	18800017 	ldw	r2,0(r3)
    5810:	21000104 	addi	r4,r4,4
    5814:	00c00044 	movi	r3,1
    5818:	d8c02a15 	stw	r3,168(sp)
    581c:	d8801405 	stb	r2,80(sp)
    5820:	d9002d15 	stw	r4,180(sp)
    5824:	d8c02e15 	stw	r3,184(sp)
    5828:	d8002915 	stw	zero,164(sp)
    582c:	d8003215 	stw	zero,200(sp)
    5830:	dc001404 	addi	r16,sp,80
    5834:	0039883a 	mov	fp,zero
    5838:	003e7206 	br	5204 <___vfprintf_internal_r+0x750>
    583c:	010000b4 	movhi	r4,2
    5840:	213d5a04 	addi	r4,r4,-2712
    5844:	0039883a 	mov	fp,zero
    5848:	d9003915 	stw	r4,228(sp)
    584c:	04401e04 	movi	r17,120
    5850:	003f8206 	br	565c <___vfprintf_internal_r+0xba8>
    5854:	18c03fcc 	andi	r3,r3,255
    5858:	1805061e 	bne	r3,zero,6c74 <___vfprintf_internal_r+0x21c0>
    585c:	883d9126 	beq	r17,zero,4ea4 <___vfprintf_internal_r+0x3f0>
    5860:	00c00044 	movi	r3,1
    5864:	d8c02a15 	stw	r3,168(sp)
    5868:	dc401405 	stb	r17,80(sp)
    586c:	d8002785 	stb	zero,158(sp)
    5870:	003fec06 	br	5824 <___vfprintf_internal_r+0xd70>
    5874:	014000b4 	movhi	r5,2
    5878:	297d5a04 	addi	r5,r5,-2712
    587c:	d9403915 	stw	r5,228(sp)
    5880:	d8c02d15 	stw	r3,180(sp)
    5884:	1025883a 	mov	r18,r2
    5888:	04401e04 	movi	r17,120
    588c:	9d84b03a 	or	r2,r19,r22
    5890:	1000fc1e 	bne	r2,zero,5c84 <___vfprintf_internal_r+0x11d0>
    5894:	0039883a 	mov	fp,zero
    5898:	00800084 	movi	r2,2
    589c:	10803fcc 	andi	r2,r2,255
    58a0:	00c00044 	movi	r3,1
    58a4:	10c20f26 	beq	r2,r3,60e4 <___vfprintf_internal_r+0x1630>
    58a8:	00c00084 	movi	r3,2
    58ac:	10fd6326 	beq	r2,r3,4e3c <___vfprintf_internal_r+0x388>
    58b0:	003e2d06 	br	5168 <___vfprintf_internal_r+0x6b4>
    58b4:	d8c02017 	ldw	r3,128(sp)
    58b8:	003e9306 	br	5308 <___vfprintf_internal_r+0x854>
    58bc:	00801944 	movi	r2,101
    58c0:	14407e0e 	bge	r2,r17,5abc <___vfprintf_internal_r+0x1008>
    58c4:	d9003617 	ldw	r4,216(sp)
    58c8:	d9403817 	ldw	r5,224(sp)
    58cc:	000d883a 	mov	r6,zero
    58d0:	000f883a 	mov	r7,zero
    58d4:	d8c03c15 	stw	r3,240(sp)
    58d8:	da003d15 	stw	r8,244(sp)
    58dc:	00111cc0 	call	111cc <__eqdf2>
    58e0:	d8c03c17 	ldw	r3,240(sp)
    58e4:	da003d17 	ldw	r8,244(sp)
    58e8:	1000f71e 	bne	r2,zero,5cc8 <___vfprintf_internal_r+0x1214>
    58ec:	d8801f17 	ldw	r2,124(sp)
    58f0:	010000b4 	movhi	r4,2
    58f4:	213d6104 	addi	r4,r4,-2684
    58f8:	18c00044 	addi	r3,r3,1
    58fc:	10800044 	addi	r2,r2,1
    5900:	41000015 	stw	r4,0(r8)
    5904:	01000044 	movi	r4,1
    5908:	41000115 	stw	r4,4(r8)
    590c:	d8c02015 	stw	r3,128(sp)
    5910:	d8801f15 	stw	r2,124(sp)
    5914:	010001c4 	movi	r4,7
    5918:	2082b816 	blt	r4,r2,63fc <___vfprintf_internal_r+0x1948>
    591c:	42000204 	addi	r8,r8,8
    5920:	d8802617 	ldw	r2,152(sp)
    5924:	d9403317 	ldw	r5,204(sp)
    5928:	11400216 	blt	r2,r5,5934 <___vfprintf_internal_r+0xe80>
    592c:	9080004c 	andi	r2,r18,1
    5930:	103ed526 	beq	r2,zero,5488 <___vfprintf_internal_r+0x9d4>
    5934:	d8803717 	ldw	r2,220(sp)
    5938:	d9003417 	ldw	r4,208(sp)
    593c:	d9403717 	ldw	r5,220(sp)
    5940:	1887883a 	add	r3,r3,r2
    5944:	d8801f17 	ldw	r2,124(sp)
    5948:	41000015 	stw	r4,0(r8)
    594c:	41400115 	stw	r5,4(r8)
    5950:	10800044 	addi	r2,r2,1
    5954:	d8c02015 	stw	r3,128(sp)
    5958:	d8801f15 	stw	r2,124(sp)
    595c:	010001c4 	movi	r4,7
    5960:	20832916 	blt	r4,r2,6608 <___vfprintf_internal_r+0x1b54>
    5964:	42000204 	addi	r8,r8,8
    5968:	d8803317 	ldw	r2,204(sp)
    596c:	143fffc4 	addi	r16,r2,-1
    5970:	043ec50e 	bge	zero,r16,5488 <___vfprintf_internal_r+0x9d4>
    5974:	04400404 	movi	r17,16
    5978:	d8801f17 	ldw	r2,124(sp)
    597c:	8c00880e 	bge	r17,r16,5ba0 <___vfprintf_internal_r+0x10ec>
    5980:	014000b4 	movhi	r5,2
    5984:	297d6984 	addi	r5,r5,-2650
    5988:	d9402b15 	stw	r5,172(sp)
    598c:	058001c4 	movi	r22,7
    5990:	dcc02c17 	ldw	r19,176(sp)
    5994:	00000306 	br	59a4 <___vfprintf_internal_r+0xef0>
    5998:	42000204 	addi	r8,r8,8
    599c:	843ffc04 	addi	r16,r16,-16
    59a0:	8c00820e 	bge	r17,r16,5bac <___vfprintf_internal_r+0x10f8>
    59a4:	18c00404 	addi	r3,r3,16
    59a8:	10800044 	addi	r2,r2,1
    59ac:	45000015 	stw	r20,0(r8)
    59b0:	44400115 	stw	r17,4(r8)
    59b4:	d8c02015 	stw	r3,128(sp)
    59b8:	d8801f15 	stw	r2,124(sp)
    59bc:	b0bff60e 	bge	r22,r2,5998 <___vfprintf_internal_r+0xee4>
    59c0:	d9801e04 	addi	r6,sp,120
    59c4:	b80b883a 	mov	r5,r23
    59c8:	9809883a 	mov	r4,r19
    59cc:	000c9d80 	call	c9d8 <__sprint_r>
    59d0:	103d3a1e 	bne	r2,zero,4ebc <___vfprintf_internal_r+0x408>
    59d4:	d8c02017 	ldw	r3,128(sp)
    59d8:	d8801f17 	ldw	r2,124(sp)
    59dc:	da000404 	addi	r8,sp,16
    59e0:	003fee06 	br	599c <___vfprintf_internal_r+0xee8>
    59e4:	d9403117 	ldw	r5,196(sp)
    59e8:	d8802a17 	ldw	r2,168(sp)
    59ec:	28adc83a 	sub	r22,r5,r2
    59f0:	05be630e 	bge	zero,r22,5380 <___vfprintf_internal_r+0x8cc>
    59f4:	07000404 	movi	fp,16
    59f8:	d8801f17 	ldw	r2,124(sp)
    59fc:	e5838f0e 	bge	fp,r22,683c <___vfprintf_internal_r+0x1d88>
    5a00:	014000b4 	movhi	r5,2
    5a04:	297d6984 	addi	r5,r5,-2650
    5a08:	dc403015 	stw	r17,192(sp)
    5a0c:	d9402b15 	stw	r5,172(sp)
    5a10:	b023883a 	mov	r17,r22
    5a14:	04c001c4 	movi	r19,7
    5a18:	a82d883a 	mov	r22,r21
    5a1c:	902b883a 	mov	r21,r18
    5a20:	8025883a 	mov	r18,r16
    5a24:	dc002c17 	ldw	r16,176(sp)
    5a28:	00000306 	br	5a38 <___vfprintf_internal_r+0xf84>
    5a2c:	8c7ffc04 	addi	r17,r17,-16
    5a30:	42000204 	addi	r8,r8,8
    5a34:	e440110e 	bge	fp,r17,5a7c <___vfprintf_internal_r+0xfc8>
    5a38:	18c00404 	addi	r3,r3,16
    5a3c:	10800044 	addi	r2,r2,1
    5a40:	45000015 	stw	r20,0(r8)
    5a44:	47000115 	stw	fp,4(r8)
    5a48:	d8c02015 	stw	r3,128(sp)
    5a4c:	d8801f15 	stw	r2,124(sp)
    5a50:	98bff60e 	bge	r19,r2,5a2c <___vfprintf_internal_r+0xf78>
    5a54:	d9801e04 	addi	r6,sp,120
    5a58:	b80b883a 	mov	r5,r23
    5a5c:	8009883a 	mov	r4,r16
    5a60:	000c9d80 	call	c9d8 <__sprint_r>
    5a64:	103d151e 	bne	r2,zero,4ebc <___vfprintf_internal_r+0x408>
    5a68:	8c7ffc04 	addi	r17,r17,-16
    5a6c:	d8c02017 	ldw	r3,128(sp)
    5a70:	d8801f17 	ldw	r2,124(sp)
    5a74:	da000404 	addi	r8,sp,16
    5a78:	e47fef16 	blt	fp,r17,5a38 <___vfprintf_internal_r+0xf84>
    5a7c:	9021883a 	mov	r16,r18
    5a80:	a825883a 	mov	r18,r21
    5a84:	b02b883a 	mov	r21,r22
    5a88:	882d883a 	mov	r22,r17
    5a8c:	dc403017 	ldw	r17,192(sp)
    5a90:	d9002b17 	ldw	r4,172(sp)
    5a94:	1d87883a 	add	r3,r3,r22
    5a98:	10800044 	addi	r2,r2,1
    5a9c:	41000015 	stw	r4,0(r8)
    5aa0:	45800115 	stw	r22,4(r8)
    5aa4:	d8c02015 	stw	r3,128(sp)
    5aa8:	d8801f15 	stw	r2,124(sp)
    5aac:	010001c4 	movi	r4,7
    5ab0:	20818e16 	blt	r4,r2,60ec <___vfprintf_internal_r+0x1638>
    5ab4:	42000204 	addi	r8,r8,8
    5ab8:	003e3106 	br	5380 <___vfprintf_internal_r+0x8cc>
    5abc:	d9403317 	ldw	r5,204(sp)
    5ac0:	00800044 	movi	r2,1
    5ac4:	18c00044 	addi	r3,r3,1
    5ac8:	1141530e 	bge	r2,r5,6018 <___vfprintf_internal_r+0x1564>
    5acc:	dc401f17 	ldw	r17,124(sp)
    5ad0:	00800044 	movi	r2,1
    5ad4:	40800115 	stw	r2,4(r8)
    5ad8:	8c400044 	addi	r17,r17,1
    5adc:	44000015 	stw	r16,0(r8)
    5ae0:	d8c02015 	stw	r3,128(sp)
    5ae4:	dc401f15 	stw	r17,124(sp)
    5ae8:	008001c4 	movi	r2,7
    5aec:	14416b16 	blt	r2,r17,609c <___vfprintf_internal_r+0x15e8>
    5af0:	42000204 	addi	r8,r8,8
    5af4:	d8803717 	ldw	r2,220(sp)
    5af8:	d9003417 	ldw	r4,208(sp)
    5afc:	8c400044 	addi	r17,r17,1
    5b00:	10c7883a 	add	r3,r2,r3
    5b04:	40800115 	stw	r2,4(r8)
    5b08:	41000015 	stw	r4,0(r8)
    5b0c:	d8c02015 	stw	r3,128(sp)
    5b10:	dc401f15 	stw	r17,124(sp)
    5b14:	008001c4 	movi	r2,7
    5b18:	14416916 	blt	r2,r17,60c0 <___vfprintf_internal_r+0x160c>
    5b1c:	45800204 	addi	r22,r8,8
    5b20:	d9003617 	ldw	r4,216(sp)
    5b24:	d9403817 	ldw	r5,224(sp)
    5b28:	000d883a 	mov	r6,zero
    5b2c:	000f883a 	mov	r7,zero
    5b30:	d8c03c15 	stw	r3,240(sp)
    5b34:	00111cc0 	call	111cc <__eqdf2>
    5b38:	d8c03c17 	ldw	r3,240(sp)
    5b3c:	1000bc26 	beq	r2,zero,5e30 <___vfprintf_internal_r+0x137c>
    5b40:	d9403317 	ldw	r5,204(sp)
    5b44:	84000044 	addi	r16,r16,1
    5b48:	8c400044 	addi	r17,r17,1
    5b4c:	28bfffc4 	addi	r2,r5,-1
    5b50:	1887883a 	add	r3,r3,r2
    5b54:	b0800115 	stw	r2,4(r22)
    5b58:	b4000015 	stw	r16,0(r22)
    5b5c:	d8c02015 	stw	r3,128(sp)
    5b60:	dc401f15 	stw	r17,124(sp)
    5b64:	008001c4 	movi	r2,7
    5b68:	14414316 	blt	r2,r17,6078 <___vfprintf_internal_r+0x15c4>
    5b6c:	b5800204 	addi	r22,r22,8
    5b70:	d9003a17 	ldw	r4,232(sp)
    5b74:	df0022c4 	addi	fp,sp,139
    5b78:	8c400044 	addi	r17,r17,1
    5b7c:	20c7883a 	add	r3,r4,r3
    5b80:	b7000015 	stw	fp,0(r22)
    5b84:	b1000115 	stw	r4,4(r22)
    5b88:	d8c02015 	stw	r3,128(sp)
    5b8c:	dc401f15 	stw	r17,124(sp)
    5b90:	008001c4 	movi	r2,7
    5b94:	14400e16 	blt	r2,r17,5bd0 <___vfprintf_internal_r+0x111c>
    5b98:	b2000204 	addi	r8,r22,8
    5b9c:	003e3a06 	br	5488 <___vfprintf_internal_r+0x9d4>
    5ba0:	010000b4 	movhi	r4,2
    5ba4:	213d6984 	addi	r4,r4,-2650
    5ba8:	d9002b15 	stw	r4,172(sp)
    5bac:	d9002b17 	ldw	r4,172(sp)
    5bb0:	1c07883a 	add	r3,r3,r16
    5bb4:	44000115 	stw	r16,4(r8)
    5bb8:	41000015 	stw	r4,0(r8)
    5bbc:	10800044 	addi	r2,r2,1
    5bc0:	d8c02015 	stw	r3,128(sp)
    5bc4:	d8801f15 	stw	r2,124(sp)
    5bc8:	010001c4 	movi	r4,7
    5bcc:	20be2d0e 	bge	r4,r2,5484 <___vfprintf_internal_r+0x9d0>
    5bd0:	d9002c17 	ldw	r4,176(sp)
    5bd4:	d9801e04 	addi	r6,sp,120
    5bd8:	b80b883a 	mov	r5,r23
    5bdc:	000c9d80 	call	c9d8 <__sprint_r>
    5be0:	103cb61e 	bne	r2,zero,4ebc <___vfprintf_internal_r+0x408>
    5be4:	d8c02017 	ldw	r3,128(sp)
    5be8:	da000404 	addi	r8,sp,16
    5bec:	003e2606 	br	5488 <___vfprintf_internal_r+0x9d4>
    5bf0:	d9002c17 	ldw	r4,176(sp)
    5bf4:	d9801e04 	addi	r6,sp,120
    5bf8:	b80b883a 	mov	r5,r23
    5bfc:	000c9d80 	call	c9d8 <__sprint_r>
    5c00:	103e5d26 	beq	r2,zero,5578 <___vfprintf_internal_r+0xac4>
    5c04:	003cad06 	br	4ebc <___vfprintf_internal_r+0x408>
    5c08:	d9002c17 	ldw	r4,176(sp)
    5c0c:	d9801e04 	addi	r6,sp,120
    5c10:	b80b883a 	mov	r5,r23
    5c14:	000c9d80 	call	c9d8 <__sprint_r>
    5c18:	103ca81e 	bne	r2,zero,4ebc <___vfprintf_internal_r+0x408>
    5c1c:	d8c02017 	ldw	r3,128(sp)
    5c20:	da000404 	addi	r8,sp,16
    5c24:	003e0b06 	br	5454 <___vfprintf_internal_r+0x9a0>
    5c28:	d9002c17 	ldw	r4,176(sp)
    5c2c:	d9801e04 	addi	r6,sp,120
    5c30:	b80b883a 	mov	r5,r23
    5c34:	000c9d80 	call	c9d8 <__sprint_r>
    5c38:	103ca01e 	bne	r2,zero,4ebc <___vfprintf_internal_r+0x408>
    5c3c:	d8c02017 	ldw	r3,128(sp)
    5c40:	da000404 	addi	r8,sp,16
    5c44:	003dbd06 	br	533c <___vfprintf_internal_r+0x888>
    5c48:	d9002c17 	ldw	r4,176(sp)
    5c4c:	d9801e04 	addi	r6,sp,120
    5c50:	b80b883a 	mov	r5,r23
    5c54:	000c9d80 	call	c9d8 <__sprint_r>
    5c58:	103c981e 	bne	r2,zero,4ebc <___vfprintf_internal_r+0x408>
    5c5c:	d8c02017 	ldw	r3,128(sp)
    5c60:	da000404 	addi	r8,sp,16
    5c64:	003dc306 	br	5374 <___vfprintf_internal_r+0x8c0>
    5c68:	d8802917 	ldw	r2,164(sp)
    5c6c:	d8002785 	stb	zero,158(sp)
    5c70:	103f0616 	blt	r2,zero,588c <___vfprintf_internal_r+0xdd8>
    5c74:	00ffdfc4 	movi	r3,-129
    5c78:	9d84b03a 	or	r2,r19,r22
    5c7c:	90e4703a 	and	r18,r18,r3
    5c80:	103c6b26 	beq	r2,zero,4e30 <___vfprintf_internal_r+0x37c>
    5c84:	0039883a 	mov	fp,zero
    5c88:	003e7406 	br	565c <___vfprintf_internal_r+0xba8>
    5c8c:	9080040c 	andi	r2,r18,16
    5c90:	1001b326 	beq	r2,zero,6360 <___vfprintf_internal_r+0x18ac>
    5c94:	d9002d17 	ldw	r4,180(sp)
    5c98:	d9402917 	ldw	r5,164(sp)
    5c9c:	d8002785 	stb	zero,158(sp)
    5ca0:	20800104 	addi	r2,r4,4
    5ca4:	24c00017 	ldw	r19,0(r4)
    5ca8:	002d883a 	mov	r22,zero
    5cac:	2801b516 	blt	r5,zero,6384 <___vfprintf_internal_r+0x18d0>
    5cb0:	00ffdfc4 	movi	r3,-129
    5cb4:	d8802d15 	stw	r2,180(sp)
    5cb8:	90e4703a 	and	r18,r18,r3
    5cbc:	983d2726 	beq	r19,zero,515c <___vfprintf_internal_r+0x6a8>
    5cc0:	0039883a 	mov	fp,zero
    5cc4:	003d2a06 	br	5170 <___vfprintf_internal_r+0x6bc>
    5cc8:	dc402617 	ldw	r17,152(sp)
    5ccc:	0441d30e 	bge	zero,r17,641c <___vfprintf_internal_r+0x1968>
    5cd0:	dc403217 	ldw	r17,200(sp)
    5cd4:	d8803317 	ldw	r2,204(sp)
    5cd8:	1440010e 	bge	r2,r17,5ce0 <___vfprintf_internal_r+0x122c>
    5cdc:	1023883a 	mov	r17,r2
    5ce0:	04400a0e 	bge	zero,r17,5d0c <___vfprintf_internal_r+0x1258>
    5ce4:	d8801f17 	ldw	r2,124(sp)
    5ce8:	1c47883a 	add	r3,r3,r17
    5cec:	44000015 	stw	r16,0(r8)
    5cf0:	10800044 	addi	r2,r2,1
    5cf4:	44400115 	stw	r17,4(r8)
    5cf8:	d8c02015 	stw	r3,128(sp)
    5cfc:	d8801f15 	stw	r2,124(sp)
    5d00:	010001c4 	movi	r4,7
    5d04:	20826516 	blt	r4,r2,669c <___vfprintf_internal_r+0x1be8>
    5d08:	42000204 	addi	r8,r8,8
    5d0c:	88026116 	blt	r17,zero,6694 <___vfprintf_internal_r+0x1be0>
    5d10:	d9003217 	ldw	r4,200(sp)
    5d14:	2463c83a 	sub	r17,r4,r17
    5d18:	04407b0e 	bge	zero,r17,5f08 <___vfprintf_internal_r+0x1454>
    5d1c:	05800404 	movi	r22,16
    5d20:	d8801f17 	ldw	r2,124(sp)
    5d24:	b4419d0e 	bge	r22,r17,639c <___vfprintf_internal_r+0x18e8>
    5d28:	010000b4 	movhi	r4,2
    5d2c:	213d6984 	addi	r4,r4,-2650
    5d30:	d9002b15 	stw	r4,172(sp)
    5d34:	070001c4 	movi	fp,7
    5d38:	dcc02c17 	ldw	r19,176(sp)
    5d3c:	00000306 	br	5d4c <___vfprintf_internal_r+0x1298>
    5d40:	42000204 	addi	r8,r8,8
    5d44:	8c7ffc04 	addi	r17,r17,-16
    5d48:	b441970e 	bge	r22,r17,63a8 <___vfprintf_internal_r+0x18f4>
    5d4c:	18c00404 	addi	r3,r3,16
    5d50:	10800044 	addi	r2,r2,1
    5d54:	45000015 	stw	r20,0(r8)
    5d58:	45800115 	stw	r22,4(r8)
    5d5c:	d8c02015 	stw	r3,128(sp)
    5d60:	d8801f15 	stw	r2,124(sp)
    5d64:	e0bff60e 	bge	fp,r2,5d40 <___vfprintf_internal_r+0x128c>
    5d68:	d9801e04 	addi	r6,sp,120
    5d6c:	b80b883a 	mov	r5,r23
    5d70:	9809883a 	mov	r4,r19
    5d74:	000c9d80 	call	c9d8 <__sprint_r>
    5d78:	103c501e 	bne	r2,zero,4ebc <___vfprintf_internal_r+0x408>
    5d7c:	d8c02017 	ldw	r3,128(sp)
    5d80:	d8801f17 	ldw	r2,124(sp)
    5d84:	da000404 	addi	r8,sp,16
    5d88:	003fee06 	br	5d44 <___vfprintf_internal_r+0x1290>
    5d8c:	d9002c17 	ldw	r4,176(sp)
    5d90:	d9801e04 	addi	r6,sp,120
    5d94:	b80b883a 	mov	r5,r23
    5d98:	000c9d80 	call	c9d8 <__sprint_r>
    5d9c:	103c471e 	bne	r2,zero,4ebc <___vfprintf_internal_r+0x408>
    5da0:	d8c02017 	ldw	r3,128(sp)
    5da4:	df002787 	ldb	fp,158(sp)
    5da8:	da000404 	addi	r8,sp,16
    5dac:	003d5606 	br	5308 <___vfprintf_internal_r+0x854>
    5db0:	9080040c 	andi	r2,r18,16
    5db4:	10016126 	beq	r2,zero,633c <___vfprintf_internal_r+0x1888>
    5db8:	d8802d17 	ldw	r2,180(sp)
    5dbc:	14c00017 	ldw	r19,0(r2)
    5dc0:	10800104 	addi	r2,r2,4
    5dc4:	d8802d15 	stw	r2,180(sp)
    5dc8:	982dd7fa 	srai	r22,r19,31
    5dcc:	b005883a 	mov	r2,r22
    5dd0:	003c8206 	br	4fdc <___vfprintf_internal_r+0x528>
    5dd4:	9080040c 	andi	r2,r18,16
    5dd8:	10003526 	beq	r2,zero,5eb0 <___vfprintf_internal_r+0x13fc>
    5ddc:	d9402d17 	ldw	r5,180(sp)
    5de0:	d8c02917 	ldw	r3,164(sp)
    5de4:	d8002785 	stb	zero,158(sp)
    5de8:	28800104 	addi	r2,r5,4
    5dec:	2cc00017 	ldw	r19,0(r5)
    5df0:	002d883a 	mov	r22,zero
    5df4:	18003716 	blt	r3,zero,5ed4 <___vfprintf_internal_r+0x1420>
    5df8:	00ffdfc4 	movi	r3,-129
    5dfc:	d8802d15 	stw	r2,180(sp)
    5e00:	90e4703a 	and	r18,r18,r3
    5e04:	0039883a 	mov	fp,zero
    5e08:	983df326 	beq	r19,zero,55d8 <___vfprintf_internal_r+0xb24>
    5e0c:	00800244 	movi	r2,9
    5e10:	14fc7b36 	bltu	r2,r19,5000 <___vfprintf_internal_r+0x54c>
    5e14:	d8c02817 	ldw	r3,160(sp)
    5e18:	dc001dc4 	addi	r16,sp,119
    5e1c:	9cc00c04 	addi	r19,r19,48
    5e20:	1c07c83a 	sub	r3,r3,r16
    5e24:	dcc01dc5 	stb	r19,119(sp)
    5e28:	d8c02e15 	stw	r3,184(sp)
    5e2c:	003ce806 	br	51d0 <___vfprintf_internal_r+0x71c>
    5e30:	d8803317 	ldw	r2,204(sp)
    5e34:	143fffc4 	addi	r16,r2,-1
    5e38:	043f4d0e 	bge	zero,r16,5b70 <___vfprintf_internal_r+0x10bc>
    5e3c:	07000404 	movi	fp,16
    5e40:	e400810e 	bge	fp,r16,6048 <___vfprintf_internal_r+0x1594>
    5e44:	014000b4 	movhi	r5,2
    5e48:	297d6984 	addi	r5,r5,-2650
    5e4c:	d9402b15 	stw	r5,172(sp)
    5e50:	01c001c4 	movi	r7,7
    5e54:	dcc02c17 	ldw	r19,176(sp)
    5e58:	00000306 	br	5e68 <___vfprintf_internal_r+0x13b4>
    5e5c:	b5800204 	addi	r22,r22,8
    5e60:	843ffc04 	addi	r16,r16,-16
    5e64:	e4007b0e 	bge	fp,r16,6054 <___vfprintf_internal_r+0x15a0>
    5e68:	18c00404 	addi	r3,r3,16
    5e6c:	8c400044 	addi	r17,r17,1
    5e70:	b5000015 	stw	r20,0(r22)
    5e74:	b7000115 	stw	fp,4(r22)
    5e78:	d8c02015 	stw	r3,128(sp)
    5e7c:	dc401f15 	stw	r17,124(sp)
    5e80:	3c7ff60e 	bge	r7,r17,5e5c <___vfprintf_internal_r+0x13a8>
    5e84:	d9801e04 	addi	r6,sp,120
    5e88:	b80b883a 	mov	r5,r23
    5e8c:	9809883a 	mov	r4,r19
    5e90:	d9c03c15 	stw	r7,240(sp)
    5e94:	000c9d80 	call	c9d8 <__sprint_r>
    5e98:	d9c03c17 	ldw	r7,240(sp)
    5e9c:	103c071e 	bne	r2,zero,4ebc <___vfprintf_internal_r+0x408>
    5ea0:	d8c02017 	ldw	r3,128(sp)
    5ea4:	dc401f17 	ldw	r17,124(sp)
    5ea8:	dd800404 	addi	r22,sp,16
    5eac:	003fec06 	br	5e60 <___vfprintf_internal_r+0x13ac>
    5eb0:	9080100c 	andi	r2,r18,64
    5eb4:	d8002785 	stb	zero,158(sp)
    5eb8:	10010e26 	beq	r2,zero,62f4 <___vfprintf_internal_r+0x1840>
    5ebc:	d9002d17 	ldw	r4,180(sp)
    5ec0:	d9402917 	ldw	r5,164(sp)
    5ec4:	002d883a 	mov	r22,zero
    5ec8:	20800104 	addi	r2,r4,4
    5ecc:	24c0000b 	ldhu	r19,0(r4)
    5ed0:	283fc90e 	bge	r5,zero,5df8 <___vfprintf_internal_r+0x1344>
    5ed4:	d8802d15 	stw	r2,180(sp)
    5ed8:	0039883a 	mov	fp,zero
    5edc:	9d84b03a 	or	r2,r19,r22
    5ee0:	103c461e 	bne	r2,zero,4ffc <___vfprintf_internal_r+0x548>
    5ee4:	00800044 	movi	r2,1
    5ee8:	003e6c06 	br	589c <___vfprintf_internal_r+0xde8>
    5eec:	d9002c17 	ldw	r4,176(sp)
    5ef0:	d9801e04 	addi	r6,sp,120
    5ef4:	b80b883a 	mov	r5,r23
    5ef8:	000c9d80 	call	c9d8 <__sprint_r>
    5efc:	103bef1e 	bne	r2,zero,4ebc <___vfprintf_internal_r+0x408>
    5f00:	d8c02017 	ldw	r3,128(sp)
    5f04:	da000404 	addi	r8,sp,16
    5f08:	d9003217 	ldw	r4,200(sp)
    5f0c:	d8802617 	ldw	r2,152(sp)
    5f10:	d9403317 	ldw	r5,204(sp)
    5f14:	8123883a 	add	r17,r16,r4
    5f18:	11400216 	blt	r2,r5,5f24 <___vfprintf_internal_r+0x1470>
    5f1c:	9100004c 	andi	r4,r18,1
    5f20:	20000d26 	beq	r4,zero,5f58 <___vfprintf_internal_r+0x14a4>
    5f24:	d9003717 	ldw	r4,220(sp)
    5f28:	d9403417 	ldw	r5,208(sp)
    5f2c:	1907883a 	add	r3,r3,r4
    5f30:	d9001f17 	ldw	r4,124(sp)
    5f34:	41400015 	stw	r5,0(r8)
    5f38:	d9403717 	ldw	r5,220(sp)
    5f3c:	21000044 	addi	r4,r4,1
    5f40:	d8c02015 	stw	r3,128(sp)
    5f44:	41400115 	stw	r5,4(r8)
    5f48:	d9001f15 	stw	r4,124(sp)
    5f4c:	014001c4 	movi	r5,7
    5f50:	2901e816 	blt	r5,r4,66f4 <___vfprintf_internal_r+0x1c40>
    5f54:	42000204 	addi	r8,r8,8
    5f58:	d9003317 	ldw	r4,204(sp)
    5f5c:	8121883a 	add	r16,r16,r4
    5f60:	2085c83a 	sub	r2,r4,r2
    5f64:	8461c83a 	sub	r16,r16,r17
    5f68:	1400010e 	bge	r2,r16,5f70 <___vfprintf_internal_r+0x14bc>
    5f6c:	1021883a 	mov	r16,r2
    5f70:	04000a0e 	bge	zero,r16,5f9c <___vfprintf_internal_r+0x14e8>
    5f74:	d9001f17 	ldw	r4,124(sp)
    5f78:	1c07883a 	add	r3,r3,r16
    5f7c:	44400015 	stw	r17,0(r8)
    5f80:	21000044 	addi	r4,r4,1
    5f84:	44000115 	stw	r16,4(r8)
    5f88:	d8c02015 	stw	r3,128(sp)
    5f8c:	d9001f15 	stw	r4,124(sp)
    5f90:	014001c4 	movi	r5,7
    5f94:	2901fb16 	blt	r5,r4,6784 <___vfprintf_internal_r+0x1cd0>
    5f98:	42000204 	addi	r8,r8,8
    5f9c:	8001f716 	blt	r16,zero,677c <___vfprintf_internal_r+0x1cc8>
    5fa0:	1421c83a 	sub	r16,r2,r16
    5fa4:	043d380e 	bge	zero,r16,5488 <___vfprintf_internal_r+0x9d4>
    5fa8:	04400404 	movi	r17,16
    5fac:	d8801f17 	ldw	r2,124(sp)
    5fb0:	8c3efb0e 	bge	r17,r16,5ba0 <___vfprintf_internal_r+0x10ec>
    5fb4:	014000b4 	movhi	r5,2
    5fb8:	297d6984 	addi	r5,r5,-2650
    5fbc:	d9402b15 	stw	r5,172(sp)
    5fc0:	058001c4 	movi	r22,7
    5fc4:	dcc02c17 	ldw	r19,176(sp)
    5fc8:	00000306 	br	5fd8 <___vfprintf_internal_r+0x1524>
    5fcc:	42000204 	addi	r8,r8,8
    5fd0:	843ffc04 	addi	r16,r16,-16
    5fd4:	8c3ef50e 	bge	r17,r16,5bac <___vfprintf_internal_r+0x10f8>
    5fd8:	18c00404 	addi	r3,r3,16
    5fdc:	10800044 	addi	r2,r2,1
    5fe0:	45000015 	stw	r20,0(r8)
    5fe4:	44400115 	stw	r17,4(r8)
    5fe8:	d8c02015 	stw	r3,128(sp)
    5fec:	d8801f15 	stw	r2,124(sp)
    5ff0:	b0bff60e 	bge	r22,r2,5fcc <___vfprintf_internal_r+0x1518>
    5ff4:	d9801e04 	addi	r6,sp,120
    5ff8:	b80b883a 	mov	r5,r23
    5ffc:	9809883a 	mov	r4,r19
    6000:	000c9d80 	call	c9d8 <__sprint_r>
    6004:	103bad1e 	bne	r2,zero,4ebc <___vfprintf_internal_r+0x408>
    6008:	d8c02017 	ldw	r3,128(sp)
    600c:	d8801f17 	ldw	r2,124(sp)
    6010:	da000404 	addi	r8,sp,16
    6014:	003fee06 	br	5fd0 <___vfprintf_internal_r+0x151c>
    6018:	9088703a 	and	r4,r18,r2
    601c:	203eab1e 	bne	r4,zero,5acc <___vfprintf_internal_r+0x1018>
    6020:	dc401f17 	ldw	r17,124(sp)
    6024:	40800115 	stw	r2,4(r8)
    6028:	44000015 	stw	r16,0(r8)
    602c:	8c400044 	addi	r17,r17,1
    6030:	d8c02015 	stw	r3,128(sp)
    6034:	dc401f15 	stw	r17,124(sp)
    6038:	008001c4 	movi	r2,7
    603c:	14400e16 	blt	r2,r17,6078 <___vfprintf_internal_r+0x15c4>
    6040:	45800204 	addi	r22,r8,8
    6044:	003eca06 	br	5b70 <___vfprintf_internal_r+0x10bc>
    6048:	010000b4 	movhi	r4,2
    604c:	213d6984 	addi	r4,r4,-2650
    6050:	d9002b15 	stw	r4,172(sp)
    6054:	d8802b17 	ldw	r2,172(sp)
    6058:	1c07883a 	add	r3,r3,r16
    605c:	8c400044 	addi	r17,r17,1
    6060:	b0800015 	stw	r2,0(r22)
    6064:	b4000115 	stw	r16,4(r22)
    6068:	d8c02015 	stw	r3,128(sp)
    606c:	dc401f15 	stw	r17,124(sp)
    6070:	008001c4 	movi	r2,7
    6074:	147ebd0e 	bge	r2,r17,5b6c <___vfprintf_internal_r+0x10b8>
    6078:	d9002c17 	ldw	r4,176(sp)
    607c:	d9801e04 	addi	r6,sp,120
    6080:	b80b883a 	mov	r5,r23
    6084:	000c9d80 	call	c9d8 <__sprint_r>
    6088:	103b8c1e 	bne	r2,zero,4ebc <___vfprintf_internal_r+0x408>
    608c:	d8c02017 	ldw	r3,128(sp)
    6090:	dc401f17 	ldw	r17,124(sp)
    6094:	dd800404 	addi	r22,sp,16
    6098:	003eb506 	br	5b70 <___vfprintf_internal_r+0x10bc>
    609c:	d9002c17 	ldw	r4,176(sp)
    60a0:	d9801e04 	addi	r6,sp,120
    60a4:	b80b883a 	mov	r5,r23
    60a8:	000c9d80 	call	c9d8 <__sprint_r>
    60ac:	103b831e 	bne	r2,zero,4ebc <___vfprintf_internal_r+0x408>
    60b0:	d8c02017 	ldw	r3,128(sp)
    60b4:	dc401f17 	ldw	r17,124(sp)
    60b8:	da000404 	addi	r8,sp,16
    60bc:	003e8d06 	br	5af4 <___vfprintf_internal_r+0x1040>
    60c0:	d9002c17 	ldw	r4,176(sp)
    60c4:	d9801e04 	addi	r6,sp,120
    60c8:	b80b883a 	mov	r5,r23
    60cc:	000c9d80 	call	c9d8 <__sprint_r>
    60d0:	103b7a1e 	bne	r2,zero,4ebc <___vfprintf_internal_r+0x408>
    60d4:	d8c02017 	ldw	r3,128(sp)
    60d8:	dc401f17 	ldw	r17,124(sp)
    60dc:	dd800404 	addi	r22,sp,16
    60e0:	003e8f06 	br	5b20 <___vfprintf_internal_r+0x106c>
    60e4:	0027883a 	mov	r19,zero
    60e8:	003f4a06 	br	5e14 <___vfprintf_internal_r+0x1360>
    60ec:	d9002c17 	ldw	r4,176(sp)
    60f0:	d9801e04 	addi	r6,sp,120
    60f4:	b80b883a 	mov	r5,r23
    60f8:	000c9d80 	call	c9d8 <__sprint_r>
    60fc:	103b6f1e 	bne	r2,zero,4ebc <___vfprintf_internal_r+0x408>
    6100:	d8c02017 	ldw	r3,128(sp)
    6104:	da000404 	addi	r8,sp,16
    6108:	003c9d06 	br	5380 <___vfprintf_internal_r+0x8cc>
    610c:	04e7c83a 	sub	r19,zero,r19
    6110:	9804c03a 	cmpne	r2,r19,zero
    6114:	05adc83a 	sub	r22,zero,r22
    6118:	b0adc83a 	sub	r22,r22,r2
    611c:	d8802917 	ldw	r2,164(sp)
    6120:	07000b44 	movi	fp,45
    6124:	df002785 	stb	fp,158(sp)
    6128:	10017b16 	blt	r2,zero,6718 <___vfprintf_internal_r+0x1c64>
    612c:	00bfdfc4 	movi	r2,-129
    6130:	90a4703a 	and	r18,r18,r2
    6134:	003bb106 	br	4ffc <___vfprintf_internal_r+0x548>
    6138:	d9003617 	ldw	r4,216(sp)
    613c:	d9403817 	ldw	r5,224(sp)
    6140:	da003d15 	stw	r8,244(sp)
    6144:	000b1580 	call	b158 <__fpclassifyd>
    6148:	da003d17 	ldw	r8,244(sp)
    614c:	1000f026 	beq	r2,zero,6510 <___vfprintf_internal_r+0x1a5c>
    6150:	d9002917 	ldw	r4,164(sp)
    6154:	05bff7c4 	movi	r22,-33
    6158:	00bfffc4 	movi	r2,-1
    615c:	8dac703a 	and	r22,r17,r22
    6160:	20820026 	beq	r4,r2,6964 <___vfprintf_internal_r+0x1eb0>
    6164:	008011c4 	movi	r2,71
    6168:	b081f726 	beq	r22,r2,6948 <___vfprintf_internal_r+0x1e94>
    616c:	d9003817 	ldw	r4,224(sp)
    6170:	90c04014 	ori	r3,r18,256
    6174:	d8c02b15 	stw	r3,172(sp)
    6178:	20021516 	blt	r4,zero,69d0 <___vfprintf_internal_r+0x1f1c>
    617c:	dcc03817 	ldw	r19,224(sp)
    6180:	d8002a05 	stb	zero,168(sp)
    6184:	00801984 	movi	r2,102
    6188:	8881f926 	beq	r17,r2,6970 <___vfprintf_internal_r+0x1ebc>
    618c:	00801184 	movi	r2,70
    6190:	88821c26 	beq	r17,r2,6a04 <___vfprintf_internal_r+0x1f50>
    6194:	00801144 	movi	r2,69
    6198:	b081ef26 	beq	r22,r2,6958 <___vfprintf_internal_r+0x1ea4>
    619c:	d8c02917 	ldw	r3,164(sp)
    61a0:	d8802104 	addi	r2,sp,132
    61a4:	d8800315 	stw	r2,12(sp)
    61a8:	d9403617 	ldw	r5,216(sp)
    61ac:	d8802504 	addi	r2,sp,148
    61b0:	d9002c17 	ldw	r4,176(sp)
    61b4:	d8800215 	stw	r2,8(sp)
    61b8:	d8802604 	addi	r2,sp,152
    61bc:	d8c00015 	stw	r3,0(sp)
    61c0:	d8800115 	stw	r2,4(sp)
    61c4:	01c00084 	movi	r7,2
    61c8:	980d883a 	mov	r6,r19
    61cc:	d8c03c15 	stw	r3,240(sp)
    61d0:	da003d15 	stw	r8,244(sp)
    61d4:	00070d80 	call	70d8 <_dtoa_r>
    61d8:	1021883a 	mov	r16,r2
    61dc:	008019c4 	movi	r2,103
    61e0:	d8c03c17 	ldw	r3,240(sp)
    61e4:	da003d17 	ldw	r8,244(sp)
    61e8:	88817126 	beq	r17,r2,67b0 <___vfprintf_internal_r+0x1cfc>
    61ec:	008011c4 	movi	r2,71
    61f0:	88829226 	beq	r17,r2,6c3c <___vfprintf_internal_r+0x2188>
    61f4:	80f9883a 	add	fp,r16,r3
    61f8:	d9003617 	ldw	r4,216(sp)
    61fc:	000d883a 	mov	r6,zero
    6200:	000f883a 	mov	r7,zero
    6204:	980b883a 	mov	r5,r19
    6208:	da003d15 	stw	r8,244(sp)
    620c:	00111cc0 	call	111cc <__eqdf2>
    6210:	da003d17 	ldw	r8,244(sp)
    6214:	10018d26 	beq	r2,zero,684c <___vfprintf_internal_r+0x1d98>
    6218:	d8802117 	ldw	r2,132(sp)
    621c:	1700062e 	bgeu	r2,fp,6238 <___vfprintf_internal_r+0x1784>
    6220:	01000c04 	movi	r4,48
    6224:	10c00044 	addi	r3,r2,1
    6228:	d8c02115 	stw	r3,132(sp)
    622c:	11000005 	stb	r4,0(r2)
    6230:	d8802117 	ldw	r2,132(sp)
    6234:	173ffb36 	bltu	r2,fp,6224 <___vfprintf_internal_r+0x1770>
    6238:	1405c83a 	sub	r2,r2,r16
    623c:	d8803315 	stw	r2,204(sp)
    6240:	008011c4 	movi	r2,71
    6244:	b0817626 	beq	r22,r2,6820 <___vfprintf_internal_r+0x1d6c>
    6248:	00801944 	movi	r2,101
    624c:	1442810e 	bge	r2,r17,6c54 <___vfprintf_internal_r+0x21a0>
    6250:	d8c02617 	ldw	r3,152(sp)
    6254:	00801984 	movi	r2,102
    6258:	d8c03215 	stw	r3,200(sp)
    625c:	8881fe26 	beq	r17,r2,6a58 <___vfprintf_internal_r+0x1fa4>
    6260:	d8c03217 	ldw	r3,200(sp)
    6264:	d9003317 	ldw	r4,204(sp)
    6268:	1901dd16 	blt	r3,r4,69e0 <___vfprintf_internal_r+0x1f2c>
    626c:	9480004c 	andi	r18,r18,1
    6270:	90022b1e 	bne	r18,zero,6b20 <___vfprintf_internal_r+0x206c>
    6274:	1805883a 	mov	r2,r3
    6278:	18028016 	blt	r3,zero,6c7c <___vfprintf_internal_r+0x21c8>
    627c:	d8c03217 	ldw	r3,200(sp)
    6280:	044019c4 	movi	r17,103
    6284:	d8c02e15 	stw	r3,184(sp)
    6288:	df002a07 	ldb	fp,168(sp)
    628c:	e001531e 	bne	fp,zero,67dc <___vfprintf_internal_r+0x1d28>
    6290:	df002783 	ldbu	fp,158(sp)
    6294:	d8802a15 	stw	r2,168(sp)
    6298:	dc802b17 	ldw	r18,172(sp)
    629c:	d8002915 	stw	zero,164(sp)
    62a0:	003bd106 	br	51e8 <___vfprintf_internal_r+0x734>
    62a4:	d8802d17 	ldw	r2,180(sp)
    62a8:	d8c02d17 	ldw	r3,180(sp)
    62ac:	d9002d17 	ldw	r4,180(sp)
    62b0:	10800017 	ldw	r2,0(r2)
    62b4:	18c00117 	ldw	r3,4(r3)
    62b8:	21000204 	addi	r4,r4,8
    62bc:	d8803615 	stw	r2,216(sp)
    62c0:	d8c03815 	stw	r3,224(sp)
    62c4:	d9002d15 	stw	r4,180(sp)
    62c8:	003b7506 	br	50a0 <___vfprintf_internal_r+0x5ec>
    62cc:	ac400007 	ldb	r17,0(r21)
    62d0:	003a5906 	br	4c38 <___vfprintf_internal_r+0x184>
    62d4:	9080100c 	andi	r2,r18,64
    62d8:	1000a826 	beq	r2,zero,657c <___vfprintf_internal_r+0x1ac8>
    62dc:	d9002d17 	ldw	r4,180(sp)
    62e0:	002d883a 	mov	r22,zero
    62e4:	24c0000b 	ldhu	r19,0(r4)
    62e8:	21000104 	addi	r4,r4,4
    62ec:	d9002d15 	stw	r4,180(sp)
    62f0:	003ccb06 	br	5620 <___vfprintf_internal_r+0xb6c>
    62f4:	d8c02d17 	ldw	r3,180(sp)
    62f8:	d9002917 	ldw	r4,164(sp)
    62fc:	002d883a 	mov	r22,zero
    6300:	18800104 	addi	r2,r3,4
    6304:	1cc00017 	ldw	r19,0(r3)
    6308:	203ebb0e 	bge	r4,zero,5df8 <___vfprintf_internal_r+0x1344>
    630c:	003ef106 	br	5ed4 <___vfprintf_internal_r+0x1420>
    6310:	9080040c 	andi	r2,r18,16
    6314:	1000921e 	bne	r2,zero,6560 <___vfprintf_internal_r+0x1aac>
    6318:	9480100c 	andi	r18,r18,64
    631c:	90013926 	beq	r18,zero,6804 <___vfprintf_internal_r+0x1d50>
    6320:	d9002d17 	ldw	r4,180(sp)
    6324:	d9402f17 	ldw	r5,188(sp)
    6328:	20800017 	ldw	r2,0(r4)
    632c:	21000104 	addi	r4,r4,4
    6330:	d9002d15 	stw	r4,180(sp)
    6334:	1140000d 	sth	r5,0(r2)
    6338:	003a1606 	br	4b94 <___vfprintf_internal_r+0xe0>
    633c:	9080100c 	andi	r2,r18,64
    6340:	10008026 	beq	r2,zero,6544 <___vfprintf_internal_r+0x1a90>
    6344:	d8c02d17 	ldw	r3,180(sp)
    6348:	1cc0000f 	ldh	r19,0(r3)
    634c:	18c00104 	addi	r3,r3,4
    6350:	d8c02d15 	stw	r3,180(sp)
    6354:	982dd7fa 	srai	r22,r19,31
    6358:	b005883a 	mov	r2,r22
    635c:	003b1f06 	br	4fdc <___vfprintf_internal_r+0x528>
    6360:	9080100c 	andi	r2,r18,64
    6364:	d8002785 	stb	zero,158(sp)
    6368:	10008a1e 	bne	r2,zero,6594 <___vfprintf_internal_r+0x1ae0>
    636c:	d9402d17 	ldw	r5,180(sp)
    6370:	d8c02917 	ldw	r3,164(sp)
    6374:	002d883a 	mov	r22,zero
    6378:	28800104 	addi	r2,r5,4
    637c:	2cc00017 	ldw	r19,0(r5)
    6380:	183e4b0e 	bge	r3,zero,5cb0 <___vfprintf_internal_r+0x11fc>
    6384:	9d86b03a 	or	r3,r19,r22
    6388:	d8802d15 	stw	r2,180(sp)
    638c:	183e4c1e 	bne	r3,zero,5cc0 <___vfprintf_internal_r+0x120c>
    6390:	0039883a 	mov	fp,zero
    6394:	0005883a 	mov	r2,zero
    6398:	003d4006 	br	589c <___vfprintf_internal_r+0xde8>
    639c:	014000b4 	movhi	r5,2
    63a0:	297d6984 	addi	r5,r5,-2650
    63a4:	d9402b15 	stw	r5,172(sp)
    63a8:	d9402b17 	ldw	r5,172(sp)
    63ac:	1c47883a 	add	r3,r3,r17
    63b0:	10800044 	addi	r2,r2,1
    63b4:	41400015 	stw	r5,0(r8)
    63b8:	44400115 	stw	r17,4(r8)
    63bc:	d8c02015 	stw	r3,128(sp)
    63c0:	d8801f15 	stw	r2,124(sp)
    63c4:	010001c4 	movi	r4,7
    63c8:	20bec816 	blt	r4,r2,5eec <___vfprintf_internal_r+0x1438>
    63cc:	42000204 	addi	r8,r8,8
    63d0:	003ecd06 	br	5f08 <___vfprintf_internal_r+0x1454>
    63d4:	d9002917 	ldw	r4,164(sp)
    63d8:	d8002785 	stb	zero,158(sp)
    63dc:	203d2d16 	blt	r4,zero,5894 <___vfprintf_internal_r+0xde0>
    63e0:	00bfdfc4 	movi	r2,-129
    63e4:	90a4703a 	and	r18,r18,r2
    63e8:	003a9106 	br	4e30 <___vfprintf_internal_r+0x37c>
    63ec:	010000b4 	movhi	r4,2
    63f0:	213d6984 	addi	r4,r4,-2650
    63f4:	d9002b15 	stw	r4,172(sp)
    63f8:	003c0c06 	br	542c <___vfprintf_internal_r+0x978>
    63fc:	d9002c17 	ldw	r4,176(sp)
    6400:	d9801e04 	addi	r6,sp,120
    6404:	b80b883a 	mov	r5,r23
    6408:	000c9d80 	call	c9d8 <__sprint_r>
    640c:	103aab1e 	bne	r2,zero,4ebc <___vfprintf_internal_r+0x408>
    6410:	d8c02017 	ldw	r3,128(sp)
    6414:	da000404 	addi	r8,sp,16
    6418:	003d4106 	br	5920 <___vfprintf_internal_r+0xe6c>
    641c:	d8801f17 	ldw	r2,124(sp)
    6420:	014000b4 	movhi	r5,2
    6424:	01000044 	movi	r4,1
    6428:	18c00044 	addi	r3,r3,1
    642c:	10800044 	addi	r2,r2,1
    6430:	297d6104 	addi	r5,r5,-2684
    6434:	41000115 	stw	r4,4(r8)
    6438:	41400015 	stw	r5,0(r8)
    643c:	d8c02015 	stw	r3,128(sp)
    6440:	d8801f15 	stw	r2,124(sp)
    6444:	010001c4 	movi	r4,7
    6448:	20805c16 	blt	r4,r2,65bc <___vfprintf_internal_r+0x1b08>
    644c:	42000204 	addi	r8,r8,8
    6450:	8800041e 	bne	r17,zero,6464 <___vfprintf_internal_r+0x19b0>
    6454:	d8803317 	ldw	r2,204(sp)
    6458:	1000021e 	bne	r2,zero,6464 <___vfprintf_internal_r+0x19b0>
    645c:	9080004c 	andi	r2,r18,1
    6460:	103c0926 	beq	r2,zero,5488 <___vfprintf_internal_r+0x9d4>
    6464:	d9003717 	ldw	r4,220(sp)
    6468:	d8801f17 	ldw	r2,124(sp)
    646c:	d9403417 	ldw	r5,208(sp)
    6470:	20c7883a 	add	r3,r4,r3
    6474:	10800044 	addi	r2,r2,1
    6478:	41000115 	stw	r4,4(r8)
    647c:	41400015 	stw	r5,0(r8)
    6480:	d8c02015 	stw	r3,128(sp)
    6484:	d8801f15 	stw	r2,124(sp)
    6488:	010001c4 	movi	r4,7
    648c:	20812116 	blt	r4,r2,6914 <___vfprintf_internal_r+0x1e60>
    6490:	42000204 	addi	r8,r8,8
    6494:	0463c83a 	sub	r17,zero,r17
    6498:	0440730e 	bge	zero,r17,6668 <___vfprintf_internal_r+0x1bb4>
    649c:	05800404 	movi	r22,16
    64a0:	b440860e 	bge	r22,r17,66bc <___vfprintf_internal_r+0x1c08>
    64a4:	014000b4 	movhi	r5,2
    64a8:	297d6984 	addi	r5,r5,-2650
    64ac:	d9402b15 	stw	r5,172(sp)
    64b0:	070001c4 	movi	fp,7
    64b4:	dcc02c17 	ldw	r19,176(sp)
    64b8:	00000306 	br	64c8 <___vfprintf_internal_r+0x1a14>
    64bc:	42000204 	addi	r8,r8,8
    64c0:	8c7ffc04 	addi	r17,r17,-16
    64c4:	b440800e 	bge	r22,r17,66c8 <___vfprintf_internal_r+0x1c14>
    64c8:	18c00404 	addi	r3,r3,16
    64cc:	10800044 	addi	r2,r2,1
    64d0:	45000015 	stw	r20,0(r8)
    64d4:	45800115 	stw	r22,4(r8)
    64d8:	d8c02015 	stw	r3,128(sp)
    64dc:	d8801f15 	stw	r2,124(sp)
    64e0:	e0bff60e 	bge	fp,r2,64bc <___vfprintf_internal_r+0x1a08>
    64e4:	d9801e04 	addi	r6,sp,120
    64e8:	b80b883a 	mov	r5,r23
    64ec:	9809883a 	mov	r4,r19
    64f0:	000c9d80 	call	c9d8 <__sprint_r>
    64f4:	103a711e 	bne	r2,zero,4ebc <___vfprintf_internal_r+0x408>
    64f8:	d8c02017 	ldw	r3,128(sp)
    64fc:	d8801f17 	ldw	r2,124(sp)
    6500:	da000404 	addi	r8,sp,16
    6504:	003fee06 	br	64c0 <___vfprintf_internal_r+0x1a0c>
    6508:	00bfffc4 	movi	r2,-1
    650c:	003a6f06 	br	4ecc <___vfprintf_internal_r+0x418>
    6510:	008011c4 	movi	r2,71
    6514:	1440b816 	blt	r2,r17,67f8 <___vfprintf_internal_r+0x1d44>
    6518:	040000b4 	movhi	r16,2
    651c:	843d5304 	addi	r16,r16,-2740
    6520:	00c000c4 	movi	r3,3
    6524:	00bfdfc4 	movi	r2,-129
    6528:	d8c02a15 	stw	r3,168(sp)
    652c:	90a4703a 	and	r18,r18,r2
    6530:	df002783 	ldbu	fp,158(sp)
    6534:	d8c02e15 	stw	r3,184(sp)
    6538:	d8002915 	stw	zero,164(sp)
    653c:	d8003215 	stw	zero,200(sp)
    6540:	003b2906 	br	51e8 <___vfprintf_internal_r+0x734>
    6544:	d9002d17 	ldw	r4,180(sp)
    6548:	24c00017 	ldw	r19,0(r4)
    654c:	21000104 	addi	r4,r4,4
    6550:	d9002d15 	stw	r4,180(sp)
    6554:	982dd7fa 	srai	r22,r19,31
    6558:	b005883a 	mov	r2,r22
    655c:	003a9f06 	br	4fdc <___vfprintf_internal_r+0x528>
    6560:	d9402d17 	ldw	r5,180(sp)
    6564:	d8c02f17 	ldw	r3,188(sp)
    6568:	28800017 	ldw	r2,0(r5)
    656c:	29400104 	addi	r5,r5,4
    6570:	d9402d15 	stw	r5,180(sp)
    6574:	10c00015 	stw	r3,0(r2)
    6578:	00398606 	br	4b94 <___vfprintf_internal_r+0xe0>
    657c:	d9402d17 	ldw	r5,180(sp)
    6580:	002d883a 	mov	r22,zero
    6584:	2cc00017 	ldw	r19,0(r5)
    6588:	29400104 	addi	r5,r5,4
    658c:	d9402d15 	stw	r5,180(sp)
    6590:	003c2306 	br	5620 <___vfprintf_internal_r+0xb6c>
    6594:	d8c02d17 	ldw	r3,180(sp)
    6598:	d9002917 	ldw	r4,164(sp)
    659c:	002d883a 	mov	r22,zero
    65a0:	18800104 	addi	r2,r3,4
    65a4:	1cc0000b 	ldhu	r19,0(r3)
    65a8:	203dc10e 	bge	r4,zero,5cb0 <___vfprintf_internal_r+0x11fc>
    65ac:	003f7506 	br	6384 <___vfprintf_internal_r+0x18d0>
    65b0:	040000b4 	movhi	r16,2
    65b4:	843d5104 	addi	r16,r16,-2748
    65b8:	003acc06 	br	50ec <___vfprintf_internal_r+0x638>
    65bc:	d9002c17 	ldw	r4,176(sp)
    65c0:	d9801e04 	addi	r6,sp,120
    65c4:	b80b883a 	mov	r5,r23
    65c8:	000c9d80 	call	c9d8 <__sprint_r>
    65cc:	103a3b1e 	bne	r2,zero,4ebc <___vfprintf_internal_r+0x408>
    65d0:	dc402617 	ldw	r17,152(sp)
    65d4:	d8c02017 	ldw	r3,128(sp)
    65d8:	da000404 	addi	r8,sp,16
    65dc:	003f9c06 	br	6450 <___vfprintf_internal_r+0x199c>
    65e0:	ac400043 	ldbu	r17,1(r21)
    65e4:	94800814 	ori	r18,r18,32
    65e8:	ad400044 	addi	r21,r21,1
    65ec:	8c403fcc 	andi	r17,r17,255
    65f0:	8c40201c 	xori	r17,r17,128
    65f4:	8c7fe004 	addi	r17,r17,-128
    65f8:	00398f06 	br	4c38 <___vfprintf_internal_r+0x184>
    65fc:	d8c02d15 	stw	r3,180(sp)
    6600:	0039883a 	mov	fp,zero
    6604:	003e3506 	br	5edc <___vfprintf_internal_r+0x1428>
    6608:	d9002c17 	ldw	r4,176(sp)
    660c:	d9801e04 	addi	r6,sp,120
    6610:	b80b883a 	mov	r5,r23
    6614:	000c9d80 	call	c9d8 <__sprint_r>
    6618:	103a281e 	bne	r2,zero,4ebc <___vfprintf_internal_r+0x408>
    661c:	d8c02017 	ldw	r3,128(sp)
    6620:	da000404 	addi	r8,sp,16
    6624:	003cd006 	br	5968 <___vfprintf_internal_r+0xeb4>
    6628:	8009883a 	mov	r4,r16
    662c:	da003d15 	stw	r8,244(sp)
    6630:	000b4380 	call	b438 <strlen>
    6634:	d8802e15 	stw	r2,184(sp)
    6638:	da003d17 	ldw	r8,244(sp)
    663c:	103c340e 	bge	r2,zero,5710 <___vfprintf_internal_r+0xc5c>
    6640:	0005883a 	mov	r2,zero
    6644:	003c3206 	br	5710 <___vfprintf_internal_r+0xc5c>
    6648:	d9002c17 	ldw	r4,176(sp)
    664c:	d9801e04 	addi	r6,sp,120
    6650:	b80b883a 	mov	r5,r23
    6654:	000c9d80 	call	c9d8 <__sprint_r>
    6658:	103a181e 	bne	r2,zero,4ebc <___vfprintf_internal_r+0x408>
    665c:	d8c02017 	ldw	r3,128(sp)
    6660:	d8801f17 	ldw	r2,124(sp)
    6664:	da000404 	addi	r8,sp,16
    6668:	d9403317 	ldw	r5,204(sp)
    666c:	10800044 	addi	r2,r2,1
    6670:	44000015 	stw	r16,0(r8)
    6674:	28c7883a 	add	r3,r5,r3
    6678:	003b7d06 	br	5470 <___vfprintf_internal_r+0x9bc>
    667c:	010000b4 	movhi	r4,2
    6680:	213d6d84 	addi	r4,r4,-2634
    6684:	d9003515 	stw	r4,212(sp)
    6688:	003b1406 	br	52dc <___vfprintf_internal_r+0x828>
    668c:	013fffc4 	movi	r4,-1
    6690:	003a3506 	br	4f68 <___vfprintf_internal_r+0x4b4>
    6694:	0023883a 	mov	r17,zero
    6698:	003d9d06 	br	5d10 <___vfprintf_internal_r+0x125c>
    669c:	d9002c17 	ldw	r4,176(sp)
    66a0:	d9801e04 	addi	r6,sp,120
    66a4:	b80b883a 	mov	r5,r23
    66a8:	000c9d80 	call	c9d8 <__sprint_r>
    66ac:	103a031e 	bne	r2,zero,4ebc <___vfprintf_internal_r+0x408>
    66b0:	d8c02017 	ldw	r3,128(sp)
    66b4:	da000404 	addi	r8,sp,16
    66b8:	003d9406 	br	5d0c <___vfprintf_internal_r+0x1258>
    66bc:	010000b4 	movhi	r4,2
    66c0:	213d6984 	addi	r4,r4,-2650
    66c4:	d9002b15 	stw	r4,172(sp)
    66c8:	d9002b17 	ldw	r4,172(sp)
    66cc:	1c47883a 	add	r3,r3,r17
    66d0:	10800044 	addi	r2,r2,1
    66d4:	41000015 	stw	r4,0(r8)
    66d8:	44400115 	stw	r17,4(r8)
    66dc:	d8c02015 	stw	r3,128(sp)
    66e0:	d8801f15 	stw	r2,124(sp)
    66e4:	010001c4 	movi	r4,7
    66e8:	20bfd716 	blt	r4,r2,6648 <___vfprintf_internal_r+0x1b94>
    66ec:	42000204 	addi	r8,r8,8
    66f0:	003fdd06 	br	6668 <___vfprintf_internal_r+0x1bb4>
    66f4:	d9002c17 	ldw	r4,176(sp)
    66f8:	d9801e04 	addi	r6,sp,120
    66fc:	b80b883a 	mov	r5,r23
    6700:	000c9d80 	call	c9d8 <__sprint_r>
    6704:	1039ed1e 	bne	r2,zero,4ebc <___vfprintf_internal_r+0x408>
    6708:	d8802617 	ldw	r2,152(sp)
    670c:	d8c02017 	ldw	r3,128(sp)
    6710:	da000404 	addi	r8,sp,16
    6714:	003e1006 	br	5f58 <___vfprintf_internal_r+0x14a4>
    6718:	00800044 	movi	r2,1
    671c:	10803fcc 	andi	r2,r2,255
    6720:	00c00044 	movi	r3,1
    6724:	10fa3526 	beq	r2,r3,4ffc <___vfprintf_internal_r+0x548>
    6728:	00c00084 	movi	r3,2
    672c:	10fbcb26 	beq	r2,r3,565c <___vfprintf_internal_r+0xba8>
    6730:	003a8f06 	br	5170 <___vfprintf_internal_r+0x6bc>
    6734:	010000b4 	movhi	r4,2
    6738:	213d6d84 	addi	r4,r4,-2634
    673c:	d9003515 	stw	r4,212(sp)
    6740:	003b7606 	br	551c <___vfprintf_internal_r+0xa68>
    6744:	d8802917 	ldw	r2,164(sp)
    6748:	00c00184 	movi	r3,6
    674c:	1880012e 	bgeu	r3,r2,6754 <___vfprintf_internal_r+0x1ca0>
    6750:	1805883a 	mov	r2,r3
    6754:	d8802e15 	stw	r2,184(sp)
    6758:	1000ef16 	blt	r2,zero,6b18 <___vfprintf_internal_r+0x2064>
    675c:	040000b4 	movhi	r16,2
    6760:	d8802a15 	stw	r2,168(sp)
    6764:	dcc02d15 	stw	r19,180(sp)
    6768:	d8002915 	stw	zero,164(sp)
    676c:	d8003215 	stw	zero,200(sp)
    6770:	843d5f04 	addi	r16,r16,-2692
    6774:	0039883a 	mov	fp,zero
    6778:	003aa206 	br	5204 <___vfprintf_internal_r+0x750>
    677c:	0021883a 	mov	r16,zero
    6780:	003e0706 	br	5fa0 <___vfprintf_internal_r+0x14ec>
    6784:	d9002c17 	ldw	r4,176(sp)
    6788:	d9801e04 	addi	r6,sp,120
    678c:	b80b883a 	mov	r5,r23
    6790:	000c9d80 	call	c9d8 <__sprint_r>
    6794:	1039c91e 	bne	r2,zero,4ebc <___vfprintf_internal_r+0x408>
    6798:	d8802617 	ldw	r2,152(sp)
    679c:	d9403317 	ldw	r5,204(sp)
    67a0:	d8c02017 	ldw	r3,128(sp)
    67a4:	da000404 	addi	r8,sp,16
    67a8:	2885c83a 	sub	r2,r5,r2
    67ac:	003dfb06 	br	5f9c <___vfprintf_internal_r+0x14e8>
    67b0:	9080004c 	andi	r2,r18,1
    67b4:	103e8f1e 	bne	r2,zero,61f4 <___vfprintf_internal_r+0x1740>
    67b8:	d8802117 	ldw	r2,132(sp)
    67bc:	003e9e06 	br	6238 <___vfprintf_internal_r+0x1784>
    67c0:	1025883a 	mov	r18,r2
    67c4:	0039883a 	mov	fp,zero
    67c8:	00800084 	movi	r2,2
    67cc:	003fd306 	br	671c <___vfprintf_internal_r+0x1c68>
    67d0:	07000b44 	movi	fp,45
    67d4:	df002785 	stb	fp,158(sp)
    67d8:	003a4006 	br	50dc <___vfprintf_internal_r+0x628>
    67dc:	00c00b44 	movi	r3,45
    67e0:	d8c02785 	stb	r3,158(sp)
    67e4:	d8802a15 	stw	r2,168(sp)
    67e8:	dc802b17 	ldw	r18,172(sp)
    67ec:	d8002915 	stw	zero,164(sp)
    67f0:	07000b44 	movi	fp,45
    67f4:	003a8006 	br	51f8 <___vfprintf_internal_r+0x744>
    67f8:	040000b4 	movhi	r16,2
    67fc:	843d5404 	addi	r16,r16,-2736
    6800:	003f4706 	br	6520 <___vfprintf_internal_r+0x1a6c>
    6804:	d8c02d17 	ldw	r3,180(sp)
    6808:	d9002f17 	ldw	r4,188(sp)
    680c:	18800017 	ldw	r2,0(r3)
    6810:	18c00104 	addi	r3,r3,4
    6814:	d8c02d15 	stw	r3,180(sp)
    6818:	11000015 	stw	r4,0(r2)
    681c:	0038dd06 	br	4b94 <___vfprintf_internal_r+0xe0>
    6820:	dd802617 	ldw	r22,152(sp)
    6824:	00bfff44 	movi	r2,-3
    6828:	b0801c16 	blt	r22,r2,689c <___vfprintf_internal_r+0x1de8>
    682c:	d9402917 	ldw	r5,164(sp)
    6830:	2d801a16 	blt	r5,r22,689c <___vfprintf_internal_r+0x1de8>
    6834:	dd803215 	stw	r22,200(sp)
    6838:	003e8906 	br	6260 <___vfprintf_internal_r+0x17ac>
    683c:	010000b4 	movhi	r4,2
    6840:	213d6984 	addi	r4,r4,-2650
    6844:	d9002b15 	stw	r4,172(sp)
    6848:	003c9106 	br	5a90 <___vfprintf_internal_r+0xfdc>
    684c:	e005883a 	mov	r2,fp
    6850:	003e7906 	br	6238 <___vfprintf_internal_r+0x1784>
    6854:	d9402917 	ldw	r5,164(sp)
    6858:	df002783 	ldbu	fp,158(sp)
    685c:	dcc02d15 	stw	r19,180(sp)
    6860:	d9402a15 	stw	r5,168(sp)
    6864:	d9402e15 	stw	r5,184(sp)
    6868:	d8002915 	stw	zero,164(sp)
    686c:	d8003215 	stw	zero,200(sp)
    6870:	003a5d06 	br	51e8 <___vfprintf_internal_r+0x734>
    6874:	9080004c 	andi	r2,r18,1
    6878:	0039883a 	mov	fp,zero
    687c:	10000426 	beq	r2,zero,6890 <___vfprintf_internal_r+0x1ddc>
    6880:	00800c04 	movi	r2,48
    6884:	dc001dc4 	addi	r16,sp,119
    6888:	d8801dc5 	stb	r2,119(sp)
    688c:	003b8006 	br	5690 <___vfprintf_internal_r+0xbdc>
    6890:	d8002e15 	stw	zero,184(sp)
    6894:	dc001e04 	addi	r16,sp,120
    6898:	003a4d06 	br	51d0 <___vfprintf_internal_r+0x71c>
    689c:	8c7fff84 	addi	r17,r17,-2
    68a0:	b5bfffc4 	addi	r22,r22,-1
    68a4:	dd802615 	stw	r22,152(sp)
    68a8:	dc4022c5 	stb	r17,139(sp)
    68ac:	b000bf16 	blt	r22,zero,6bac <___vfprintf_internal_r+0x20f8>
    68b0:	00800ac4 	movi	r2,43
    68b4:	d8802305 	stb	r2,140(sp)
    68b8:	00800244 	movi	r2,9
    68bc:	15807016 	blt	r2,r22,6a80 <___vfprintf_internal_r+0x1fcc>
    68c0:	00800c04 	movi	r2,48
    68c4:	b5800c04 	addi	r22,r22,48
    68c8:	d8802345 	stb	r2,141(sp)
    68cc:	dd802385 	stb	r22,142(sp)
    68d0:	d88023c4 	addi	r2,sp,143
    68d4:	df0022c4 	addi	fp,sp,139
    68d8:	d8c03317 	ldw	r3,204(sp)
    68dc:	1739c83a 	sub	fp,r2,fp
    68e0:	d9003317 	ldw	r4,204(sp)
    68e4:	e0c7883a 	add	r3,fp,r3
    68e8:	df003a15 	stw	fp,232(sp)
    68ec:	d8c02e15 	stw	r3,184(sp)
    68f0:	00800044 	movi	r2,1
    68f4:	1100b30e 	bge	r2,r4,6bc4 <___vfprintf_internal_r+0x2110>
    68f8:	d8c02e17 	ldw	r3,184(sp)
    68fc:	18c00044 	addi	r3,r3,1
    6900:	d8c02e15 	stw	r3,184(sp)
    6904:	1805883a 	mov	r2,r3
    6908:	1800ac16 	blt	r3,zero,6bbc <___vfprintf_internal_r+0x2108>
    690c:	d8003215 	stw	zero,200(sp)
    6910:	003e5d06 	br	6288 <___vfprintf_internal_r+0x17d4>
    6914:	d9002c17 	ldw	r4,176(sp)
    6918:	d9801e04 	addi	r6,sp,120
    691c:	b80b883a 	mov	r5,r23
    6920:	000c9d80 	call	c9d8 <__sprint_r>
    6924:	1039651e 	bne	r2,zero,4ebc <___vfprintf_internal_r+0x408>
    6928:	dc402617 	ldw	r17,152(sp)
    692c:	d8c02017 	ldw	r3,128(sp)
    6930:	d8801f17 	ldw	r2,124(sp)
    6934:	da000404 	addi	r8,sp,16
    6938:	003ed606 	br	6494 <___vfprintf_internal_r+0x19e0>
    693c:	582b883a 	mov	r21,r11
    6940:	d8002915 	stw	zero,164(sp)
    6944:	0038bd06 	br	4c3c <___vfprintf_internal_r+0x188>
    6948:	d8802917 	ldw	r2,164(sp)
    694c:	103e071e 	bne	r2,zero,616c <___vfprintf_internal_r+0x16b8>
    6950:	dc002915 	stw	r16,164(sp)
    6954:	003e0506 	br	616c <___vfprintf_internal_r+0x16b8>
    6958:	d9002917 	ldw	r4,164(sp)
    695c:	20c00044 	addi	r3,r4,1
    6960:	003e0f06 	br	61a0 <___vfprintf_internal_r+0x16ec>
    6964:	01400184 	movi	r5,6
    6968:	d9402915 	stw	r5,164(sp)
    696c:	003dff06 	br	616c <___vfprintf_internal_r+0x16b8>
    6970:	d8802104 	addi	r2,sp,132
    6974:	d8800315 	stw	r2,12(sp)
    6978:	d8802504 	addi	r2,sp,148
    697c:	d8800215 	stw	r2,8(sp)
    6980:	d8802604 	addi	r2,sp,152
    6984:	d8800115 	stw	r2,4(sp)
    6988:	d8802917 	ldw	r2,164(sp)
    698c:	d9403617 	ldw	r5,216(sp)
    6990:	d9002c17 	ldw	r4,176(sp)
    6994:	d8800015 	stw	r2,0(sp)
    6998:	01c000c4 	movi	r7,3
    699c:	980d883a 	mov	r6,r19
    69a0:	da003d15 	stw	r8,244(sp)
    69a4:	00070d80 	call	70d8 <_dtoa_r>
    69a8:	d8c02917 	ldw	r3,164(sp)
    69ac:	da003d17 	ldw	r8,244(sp)
    69b0:	1021883a 	mov	r16,r2
    69b4:	10f9883a 	add	fp,r2,r3
    69b8:	81000007 	ldb	r4,0(r16)
    69bc:	00800c04 	movi	r2,48
    69c0:	20805e26 	beq	r4,r2,6b3c <___vfprintf_internal_r+0x2088>
    69c4:	d8c02617 	ldw	r3,152(sp)
    69c8:	e0f9883a 	add	fp,fp,r3
    69cc:	003e0a06 	br	61f8 <___vfprintf_internal_r+0x1744>
    69d0:	00c00b44 	movi	r3,45
    69d4:	24e0003c 	xorhi	r19,r4,32768
    69d8:	d8c02a05 	stb	r3,168(sp)
    69dc:	003de906 	br	6184 <___vfprintf_internal_r+0x16d0>
    69e0:	d8c03217 	ldw	r3,200(sp)
    69e4:	00c07a0e 	bge	zero,r3,6bd0 <___vfprintf_internal_r+0x211c>
    69e8:	00800044 	movi	r2,1
    69ec:	d9003317 	ldw	r4,204(sp)
    69f0:	1105883a 	add	r2,r2,r4
    69f4:	d8802e15 	stw	r2,184(sp)
    69f8:	10004e16 	blt	r2,zero,6b34 <___vfprintf_internal_r+0x2080>
    69fc:	044019c4 	movi	r17,103
    6a00:	003e2106 	br	6288 <___vfprintf_internal_r+0x17d4>
    6a04:	d9002917 	ldw	r4,164(sp)
    6a08:	d8802104 	addi	r2,sp,132
    6a0c:	d8800315 	stw	r2,12(sp)
    6a10:	d9000015 	stw	r4,0(sp)
    6a14:	d8802504 	addi	r2,sp,148
    6a18:	d9403617 	ldw	r5,216(sp)
    6a1c:	d9002c17 	ldw	r4,176(sp)
    6a20:	d8800215 	stw	r2,8(sp)
    6a24:	d8802604 	addi	r2,sp,152
    6a28:	d8800115 	stw	r2,4(sp)
    6a2c:	01c000c4 	movi	r7,3
    6a30:	980d883a 	mov	r6,r19
    6a34:	da003d15 	stw	r8,244(sp)
    6a38:	00070d80 	call	70d8 <_dtoa_r>
    6a3c:	d8c02917 	ldw	r3,164(sp)
    6a40:	da003d17 	ldw	r8,244(sp)
    6a44:	1021883a 	mov	r16,r2
    6a48:	00801184 	movi	r2,70
    6a4c:	80f9883a 	add	fp,r16,r3
    6a50:	88bfd926 	beq	r17,r2,69b8 <___vfprintf_internal_r+0x1f04>
    6a54:	003de806 	br	61f8 <___vfprintf_internal_r+0x1744>
    6a58:	d9002917 	ldw	r4,164(sp)
    6a5c:	00c04d0e 	bge	zero,r3,6b94 <___vfprintf_internal_r+0x20e0>
    6a60:	2000441e 	bne	r4,zero,6b74 <___vfprintf_internal_r+0x20c0>
    6a64:	9480004c 	andi	r18,r18,1
    6a68:	9000421e 	bne	r18,zero,6b74 <___vfprintf_internal_r+0x20c0>
    6a6c:	1805883a 	mov	r2,r3
    6a70:	18007016 	blt	r3,zero,6c34 <___vfprintf_internal_r+0x2180>
    6a74:	d8c03217 	ldw	r3,200(sp)
    6a78:	d8c02e15 	stw	r3,184(sp)
    6a7c:	003e0206 	br	6288 <___vfprintf_internal_r+0x17d4>
    6a80:	df0022c4 	addi	fp,sp,139
    6a84:	dc002915 	stw	r16,164(sp)
    6a88:	4027883a 	mov	r19,r8
    6a8c:	e021883a 	mov	r16,fp
    6a90:	b009883a 	mov	r4,r22
    6a94:	01400284 	movi	r5,10
    6a98:	000ff080 	call	ff08 <__modsi3>
    6a9c:	10800c04 	addi	r2,r2,48
    6aa0:	843fffc4 	addi	r16,r16,-1
    6aa4:	b009883a 	mov	r4,r22
    6aa8:	01400284 	movi	r5,10
    6aac:	80800005 	stb	r2,0(r16)
    6ab0:	000fe840 	call	fe84 <__divsi3>
    6ab4:	102d883a 	mov	r22,r2
    6ab8:	00800244 	movi	r2,9
    6abc:	15bff416 	blt	r2,r22,6a90 <___vfprintf_internal_r+0x1fdc>
    6ac0:	9811883a 	mov	r8,r19
    6ac4:	b0800c04 	addi	r2,r22,48
    6ac8:	8027883a 	mov	r19,r16
    6acc:	997fffc4 	addi	r5,r19,-1
    6ad0:	98bfffc5 	stb	r2,-1(r19)
    6ad4:	dc002917 	ldw	r16,164(sp)
    6ad8:	2f006a2e 	bgeu	r5,fp,6c84 <___vfprintf_internal_r+0x21d0>
    6adc:	d9c02384 	addi	r7,sp,142
    6ae0:	3ccfc83a 	sub	r7,r7,r19
    6ae4:	d9002344 	addi	r4,sp,141
    6ae8:	e1cf883a 	add	r7,fp,r7
    6aec:	00000106 	br	6af4 <___vfprintf_internal_r+0x2040>
    6af0:	28800003 	ldbu	r2,0(r5)
    6af4:	20800005 	stb	r2,0(r4)
    6af8:	21000044 	addi	r4,r4,1
    6afc:	29400044 	addi	r5,r5,1
    6b00:	393ffb1e 	bne	r7,r4,6af0 <___vfprintf_internal_r+0x203c>
    6b04:	d8802304 	addi	r2,sp,140
    6b08:	14c5c83a 	sub	r2,r2,r19
    6b0c:	d8c02344 	addi	r3,sp,141
    6b10:	1885883a 	add	r2,r3,r2
    6b14:	003f7006 	br	68d8 <___vfprintf_internal_r+0x1e24>
    6b18:	0005883a 	mov	r2,zero
    6b1c:	003f0f06 	br	675c <___vfprintf_internal_r+0x1ca8>
    6b20:	d8c03217 	ldw	r3,200(sp)
    6b24:	18c00044 	addi	r3,r3,1
    6b28:	d8c02e15 	stw	r3,184(sp)
    6b2c:	1805883a 	mov	r2,r3
    6b30:	183fb20e 	bge	r3,zero,69fc <___vfprintf_internal_r+0x1f48>
    6b34:	0005883a 	mov	r2,zero
    6b38:	003fb006 	br	69fc <___vfprintf_internal_r+0x1f48>
    6b3c:	d9003617 	ldw	r4,216(sp)
    6b40:	000d883a 	mov	r6,zero
    6b44:	000f883a 	mov	r7,zero
    6b48:	980b883a 	mov	r5,r19
    6b4c:	d8c03c15 	stw	r3,240(sp)
    6b50:	da003d15 	stw	r8,244(sp)
    6b54:	00111cc0 	call	111cc <__eqdf2>
    6b58:	d8c03c17 	ldw	r3,240(sp)
    6b5c:	da003d17 	ldw	r8,244(sp)
    6b60:	103f9826 	beq	r2,zero,69c4 <___vfprintf_internal_r+0x1f10>
    6b64:	00800044 	movi	r2,1
    6b68:	10c7c83a 	sub	r3,r2,r3
    6b6c:	d8c02615 	stw	r3,152(sp)
    6b70:	003f9506 	br	69c8 <___vfprintf_internal_r+0x1f14>
    6b74:	d9002917 	ldw	r4,164(sp)
    6b78:	d8c03217 	ldw	r3,200(sp)
    6b7c:	20800044 	addi	r2,r4,1
    6b80:	1885883a 	add	r2,r3,r2
    6b84:	d8802e15 	stw	r2,184(sp)
    6b88:	103dbf0e 	bge	r2,zero,6288 <___vfprintf_internal_r+0x17d4>
    6b8c:	0005883a 	mov	r2,zero
    6b90:	003dbd06 	br	6288 <___vfprintf_internal_r+0x17d4>
    6b94:	2000211e 	bne	r4,zero,6c1c <___vfprintf_internal_r+0x2168>
    6b98:	9480004c 	andi	r18,r18,1
    6b9c:	90001f1e 	bne	r18,zero,6c1c <___vfprintf_internal_r+0x2168>
    6ba0:	00800044 	movi	r2,1
    6ba4:	d8802e15 	stw	r2,184(sp)
    6ba8:	003db706 	br	6288 <___vfprintf_internal_r+0x17d4>
    6bac:	00800b44 	movi	r2,45
    6bb0:	05adc83a 	sub	r22,zero,r22
    6bb4:	d8802305 	stb	r2,140(sp)
    6bb8:	003f3f06 	br	68b8 <___vfprintf_internal_r+0x1e04>
    6bbc:	0005883a 	mov	r2,zero
    6bc0:	003f5206 	br	690c <___vfprintf_internal_r+0x1e58>
    6bc4:	90a4703a 	and	r18,r18,r2
    6bc8:	903f4e26 	beq	r18,zero,6904 <___vfprintf_internal_r+0x1e50>
    6bcc:	003f4a06 	br	68f8 <___vfprintf_internal_r+0x1e44>
    6bd0:	00800084 	movi	r2,2
    6bd4:	10c5c83a 	sub	r2,r2,r3
    6bd8:	003f8406 	br	69ec <___vfprintf_internal_r+0x1f38>
    6bdc:	d8802d17 	ldw	r2,180(sp)
    6be0:	d9002d17 	ldw	r4,180(sp)
    6be4:	ac400043 	ldbu	r17,1(r21)
    6be8:	10800017 	ldw	r2,0(r2)
    6bec:	582b883a 	mov	r21,r11
    6bf0:	d8802915 	stw	r2,164(sp)
    6bf4:	20800104 	addi	r2,r4,4
    6bf8:	d9002917 	ldw	r4,164(sp)
    6bfc:	d8802d15 	stw	r2,180(sp)
    6c00:	203e7a0e 	bge	r4,zero,65ec <___vfprintf_internal_r+0x1b38>
    6c04:	8c403fcc 	andi	r17,r17,255
    6c08:	00bfffc4 	movi	r2,-1
    6c0c:	8c40201c 	xori	r17,r17,128
    6c10:	d8802915 	stw	r2,164(sp)
    6c14:	8c7fe004 	addi	r17,r17,-128
    6c18:	00380706 	br	4c38 <___vfprintf_internal_r+0x184>
    6c1c:	d8c02917 	ldw	r3,164(sp)
    6c20:	18c00084 	addi	r3,r3,2
    6c24:	d8c02e15 	stw	r3,184(sp)
    6c28:	1805883a 	mov	r2,r3
    6c2c:	183d960e 	bge	r3,zero,6288 <___vfprintf_internal_r+0x17d4>
    6c30:	003fd606 	br	6b8c <___vfprintf_internal_r+0x20d8>
    6c34:	0005883a 	mov	r2,zero
    6c38:	003f8e06 	br	6a74 <___vfprintf_internal_r+0x1fc0>
    6c3c:	9080004c 	andi	r2,r18,1
    6c40:	103f811e 	bne	r2,zero,6a48 <___vfprintf_internal_r+0x1f94>
    6c44:	d8802117 	ldw	r2,132(sp)
    6c48:	1405c83a 	sub	r2,r2,r16
    6c4c:	d8803315 	stw	r2,204(sp)
    6c50:	b47ef326 	beq	r22,r17,6820 <___vfprintf_internal_r+0x1d6c>
    6c54:	dd802617 	ldw	r22,152(sp)
    6c58:	003f1106 	br	68a0 <___vfprintf_internal_r+0x1dec>
    6c5c:	d9c02785 	stb	r7,158(sp)
    6c60:	00390406 	br	5074 <___vfprintf_internal_r+0x5c0>
    6c64:	d9c02785 	stb	r7,158(sp)
    6c68:	0038d306 	br	4fb8 <___vfprintf_internal_r+0x504>
    6c6c:	d9c02785 	stb	r7,158(sp)
    6c70:	003a6106 	br	55f8 <___vfprintf_internal_r+0xb44>
    6c74:	d9c02785 	stb	r7,158(sp)
    6c78:	003af806 	br	585c <___vfprintf_internal_r+0xda8>
    6c7c:	0005883a 	mov	r2,zero
    6c80:	003d7e06 	br	627c <___vfprintf_internal_r+0x17c8>
    6c84:	d8802344 	addi	r2,sp,141
    6c88:	003f1306 	br	68d8 <___vfprintf_internal_r+0x1e24>
    6c8c:	d9c02785 	stb	r7,158(sp)
    6c90:	00392306 	br	5120 <___vfprintf_internal_r+0x66c>
    6c94:	d9c02785 	stb	r7,158(sp)
    6c98:	003aa906 	br	5740 <___vfprintf_internal_r+0xc8c>
    6c9c:	d9c02785 	stb	r7,158(sp)
    6ca0:	003a3d06 	br	5598 <___vfprintf_internal_r+0xae4>
    6ca4:	d9c02785 	stb	r7,158(sp)
    6ca8:	003aca06 	br	57d4 <___vfprintf_internal_r+0xd20>

00006cac <__vfprintf_internal>:
    6cac:	008000b4 	movhi	r2,2
    6cb0:	10863e04 	addi	r2,r2,6392
    6cb4:	300f883a 	mov	r7,r6
    6cb8:	280d883a 	mov	r6,r5
    6cbc:	200b883a 	mov	r5,r4
    6cc0:	11000017 	ldw	r4,0(r2)
    6cc4:	0004ab41 	jmpi	4ab4 <___vfprintf_internal_r>

00006cc8 <__sbprintf>:
    6cc8:	2880030b 	ldhu	r2,12(r5)
    6ccc:	2ac01917 	ldw	r11,100(r5)
    6cd0:	2a80038b 	ldhu	r10,14(r5)
    6cd4:	2a400717 	ldw	r9,28(r5)
    6cd8:	2a000917 	ldw	r8,36(r5)
    6cdc:	defee204 	addi	sp,sp,-1144
    6ce0:	00c10004 	movi	r3,1024
    6ce4:	dc011a15 	stw	r16,1128(sp)
    6ce8:	10bfff4c 	andi	r2,r2,65533
    6cec:	2821883a 	mov	r16,r5
    6cf0:	d8cb883a 	add	r5,sp,r3
    6cf4:	dc811c15 	stw	r18,1136(sp)
    6cf8:	dc411b15 	stw	r17,1132(sp)
    6cfc:	dfc11d15 	stw	ra,1140(sp)
    6d00:	2025883a 	mov	r18,r4
    6d04:	d881030d 	sth	r2,1036(sp)
    6d08:	dac11915 	stw	r11,1124(sp)
    6d0c:	da81038d 	sth	r10,1038(sp)
    6d10:	da410715 	stw	r9,1052(sp)
    6d14:	da010915 	stw	r8,1060(sp)
    6d18:	dec10015 	stw	sp,1024(sp)
    6d1c:	dec10415 	stw	sp,1040(sp)
    6d20:	d8c10215 	stw	r3,1032(sp)
    6d24:	d8c10515 	stw	r3,1044(sp)
    6d28:	d8010615 	stw	zero,1048(sp)
    6d2c:	0004ab40 	call	4ab4 <___vfprintf_internal_r>
    6d30:	1023883a 	mov	r17,r2
    6d34:	10000416 	blt	r2,zero,6d48 <__sbprintf+0x80>
    6d38:	d9410004 	addi	r5,sp,1024
    6d3c:	9009883a 	mov	r4,r18
    6d40:	000897c0 	call	897c <_fflush_r>
    6d44:	10000d1e 	bne	r2,zero,6d7c <__sbprintf+0xb4>
    6d48:	d881030b 	ldhu	r2,1036(sp)
    6d4c:	1080100c 	andi	r2,r2,64
    6d50:	10000326 	beq	r2,zero,6d60 <__sbprintf+0x98>
    6d54:	8080030b 	ldhu	r2,12(r16)
    6d58:	10801014 	ori	r2,r2,64
    6d5c:	8080030d 	sth	r2,12(r16)
    6d60:	8805883a 	mov	r2,r17
    6d64:	dfc11d17 	ldw	ra,1140(sp)
    6d68:	dc811c17 	ldw	r18,1136(sp)
    6d6c:	dc411b17 	ldw	r17,1132(sp)
    6d70:	dc011a17 	ldw	r16,1128(sp)
    6d74:	dec11e04 	addi	sp,sp,1144
    6d78:	f800283a 	ret
    6d7c:	047fffc4 	movi	r17,-1
    6d80:	003ff106 	br	6d48 <__sbprintf+0x80>

00006d84 <__swsetup_r>:
    6d84:	008000b4 	movhi	r2,2
    6d88:	defffd04 	addi	sp,sp,-12
    6d8c:	10863e04 	addi	r2,r2,6392
    6d90:	dc400115 	stw	r17,4(sp)
    6d94:	2023883a 	mov	r17,r4
    6d98:	11000017 	ldw	r4,0(r2)
    6d9c:	dc000015 	stw	r16,0(sp)
    6da0:	dfc00215 	stw	ra,8(sp)
    6da4:	2821883a 	mov	r16,r5
    6da8:	20000226 	beq	r4,zero,6db4 <__swsetup_r+0x30>
    6dac:	20800e17 	ldw	r2,56(r4)
    6db0:	10003126 	beq	r2,zero,6e78 <__swsetup_r+0xf4>
    6db4:	8080030b 	ldhu	r2,12(r16)
    6db8:	10c0020c 	andi	r3,r2,8
    6dbc:	1009883a 	mov	r4,r2
    6dc0:	18000f26 	beq	r3,zero,6e00 <__swsetup_r+0x7c>
    6dc4:	80c00417 	ldw	r3,16(r16)
    6dc8:	18001526 	beq	r3,zero,6e20 <__swsetup_r+0x9c>
    6dcc:	1100004c 	andi	r4,r2,1
    6dd0:	20001c1e 	bne	r4,zero,6e44 <__swsetup_r+0xc0>
    6dd4:	1080008c 	andi	r2,r2,2
    6dd8:	1000291e 	bne	r2,zero,6e80 <__swsetup_r+0xfc>
    6ddc:	80800517 	ldw	r2,20(r16)
    6de0:	80800215 	stw	r2,8(r16)
    6de4:	18001c26 	beq	r3,zero,6e58 <__swsetup_r+0xd4>
    6de8:	0005883a 	mov	r2,zero
    6dec:	dfc00217 	ldw	ra,8(sp)
    6df0:	dc400117 	ldw	r17,4(sp)
    6df4:	dc000017 	ldw	r16,0(sp)
    6df8:	dec00304 	addi	sp,sp,12
    6dfc:	f800283a 	ret
    6e00:	2080040c 	andi	r2,r4,16
    6e04:	10002e26 	beq	r2,zero,6ec0 <__swsetup_r+0x13c>
    6e08:	2080010c 	andi	r2,r4,4
    6e0c:	10001e1e 	bne	r2,zero,6e88 <__swsetup_r+0x104>
    6e10:	80c00417 	ldw	r3,16(r16)
    6e14:	20800214 	ori	r2,r4,8
    6e18:	8080030d 	sth	r2,12(r16)
    6e1c:	183feb1e 	bne	r3,zero,6dcc <__swsetup_r+0x48>
    6e20:	1100a00c 	andi	r4,r2,640
    6e24:	01408004 	movi	r5,512
    6e28:	217fe826 	beq	r4,r5,6dcc <__swsetup_r+0x48>
    6e2c:	800b883a 	mov	r5,r16
    6e30:	8809883a 	mov	r4,r17
    6e34:	00094400 	call	9440 <__smakebuf_r>
    6e38:	8080030b 	ldhu	r2,12(r16)
    6e3c:	80c00417 	ldw	r3,16(r16)
    6e40:	003fe206 	br	6dcc <__swsetup_r+0x48>
    6e44:	80800517 	ldw	r2,20(r16)
    6e48:	80000215 	stw	zero,8(r16)
    6e4c:	0085c83a 	sub	r2,zero,r2
    6e50:	80800615 	stw	r2,24(r16)
    6e54:	183fe41e 	bne	r3,zero,6de8 <__swsetup_r+0x64>
    6e58:	80c0030b 	ldhu	r3,12(r16)
    6e5c:	0005883a 	mov	r2,zero
    6e60:	1900200c 	andi	r4,r3,128
    6e64:	203fe126 	beq	r4,zero,6dec <__swsetup_r+0x68>
    6e68:	18c01014 	ori	r3,r3,64
    6e6c:	80c0030d 	sth	r3,12(r16)
    6e70:	00bfffc4 	movi	r2,-1
    6e74:	003fdd06 	br	6dec <__swsetup_r+0x68>
    6e78:	0008d580 	call	8d58 <__sinit>
    6e7c:	003fcd06 	br	6db4 <__swsetup_r+0x30>
    6e80:	0005883a 	mov	r2,zero
    6e84:	003fd606 	br	6de0 <__swsetup_r+0x5c>
    6e88:	81400c17 	ldw	r5,48(r16)
    6e8c:	28000626 	beq	r5,zero,6ea8 <__swsetup_r+0x124>
    6e90:	80801004 	addi	r2,r16,64
    6e94:	28800326 	beq	r5,r2,6ea4 <__swsetup_r+0x120>
    6e98:	8809883a 	mov	r4,r17
    6e9c:	0008ecc0 	call	8ecc <_free_r>
    6ea0:	8100030b 	ldhu	r4,12(r16)
    6ea4:	80000c15 	stw	zero,48(r16)
    6ea8:	80c00417 	ldw	r3,16(r16)
    6eac:	00bff6c4 	movi	r2,-37
    6eb0:	1108703a 	and	r4,r2,r4
    6eb4:	80000115 	stw	zero,4(r16)
    6eb8:	80c00015 	stw	r3,0(r16)
    6ebc:	003fd506 	br	6e14 <__swsetup_r+0x90>
    6ec0:	00800244 	movi	r2,9
    6ec4:	88800015 	stw	r2,0(r17)
    6ec8:	20801014 	ori	r2,r4,64
    6ecc:	8080030d 	sth	r2,12(r16)
    6ed0:	00bfffc4 	movi	r2,-1
    6ed4:	003fc506 	br	6dec <__swsetup_r+0x68>

00006ed8 <quorem>:
    6ed8:	defff704 	addi	sp,sp,-36
    6edc:	dc800215 	stw	r18,8(sp)
    6ee0:	20800417 	ldw	r2,16(r4)
    6ee4:	2c800417 	ldw	r18,16(r5)
    6ee8:	dfc00815 	stw	ra,32(sp)
    6eec:	ddc00715 	stw	r23,28(sp)
    6ef0:	dd800615 	stw	r22,24(sp)
    6ef4:	dd400515 	stw	r21,20(sp)
    6ef8:	dd000415 	stw	r20,16(sp)
    6efc:	dcc00315 	stw	r19,12(sp)
    6f00:	dc400115 	stw	r17,4(sp)
    6f04:	dc000015 	stw	r16,0(sp)
    6f08:	14807116 	blt	r2,r18,70d0 <quorem+0x1f8>
    6f0c:	94bfffc4 	addi	r18,r18,-1
    6f10:	94ad883a 	add	r22,r18,r18
    6f14:	b5ad883a 	add	r22,r22,r22
    6f18:	2c400504 	addi	r17,r5,20
    6f1c:	8da9883a 	add	r20,r17,r22
    6f20:	25400504 	addi	r21,r4,20
    6f24:	282f883a 	mov	r23,r5
    6f28:	adad883a 	add	r22,r21,r22
    6f2c:	a1400017 	ldw	r5,0(r20)
    6f30:	2021883a 	mov	r16,r4
    6f34:	b1000017 	ldw	r4,0(r22)
    6f38:	29400044 	addi	r5,r5,1
    6f3c:	000ff7c0 	call	ff7c <__udivsi3>
    6f40:	1027883a 	mov	r19,r2
    6f44:	10002c26 	beq	r2,zero,6ff8 <quorem+0x120>
    6f48:	a813883a 	mov	r9,r21
    6f4c:	880b883a 	mov	r5,r17
    6f50:	0009883a 	mov	r4,zero
    6f54:	000d883a 	mov	r6,zero
    6f58:	2a000017 	ldw	r8,0(r5)
    6f5c:	49c00017 	ldw	r7,0(r9)
    6f60:	29400104 	addi	r5,r5,4
    6f64:	40bfffcc 	andi	r2,r8,65535
    6f68:	14c5383a 	mul	r2,r2,r19
    6f6c:	4010d43a 	srli	r8,r8,16
    6f70:	38ffffcc 	andi	r3,r7,65535
    6f74:	1105883a 	add	r2,r2,r4
    6f78:	1008d43a 	srli	r4,r2,16
    6f7c:	44d1383a 	mul	r8,r8,r19
    6f80:	198d883a 	add	r6,r3,r6
    6f84:	10ffffcc 	andi	r3,r2,65535
    6f88:	30c7c83a 	sub	r3,r6,r3
    6f8c:	380ed43a 	srli	r7,r7,16
    6f90:	4105883a 	add	r2,r8,r4
    6f94:	180dd43a 	srai	r6,r3,16
    6f98:	113fffcc 	andi	r4,r2,65535
    6f9c:	390fc83a 	sub	r7,r7,r4
    6fa0:	398d883a 	add	r6,r7,r6
    6fa4:	300e943a 	slli	r7,r6,16
    6fa8:	18ffffcc 	andi	r3,r3,65535
    6fac:	1008d43a 	srli	r4,r2,16
    6fb0:	38ceb03a 	or	r7,r7,r3
    6fb4:	49c00015 	stw	r7,0(r9)
    6fb8:	300dd43a 	srai	r6,r6,16
    6fbc:	4a400104 	addi	r9,r9,4
    6fc0:	a17fe52e 	bgeu	r20,r5,6f58 <quorem+0x80>
    6fc4:	b0800017 	ldw	r2,0(r22)
    6fc8:	10000b1e 	bne	r2,zero,6ff8 <quorem+0x120>
    6fcc:	b0bfff04 	addi	r2,r22,-4
    6fd0:	a880082e 	bgeu	r21,r2,6ff4 <quorem+0x11c>
    6fd4:	b0ffff17 	ldw	r3,-4(r22)
    6fd8:	18000326 	beq	r3,zero,6fe8 <quorem+0x110>
    6fdc:	00000506 	br	6ff4 <quorem+0x11c>
    6fe0:	10c00017 	ldw	r3,0(r2)
    6fe4:	1800031e 	bne	r3,zero,6ff4 <quorem+0x11c>
    6fe8:	10bfff04 	addi	r2,r2,-4
    6fec:	94bfffc4 	addi	r18,r18,-1
    6ff0:	a8bffb36 	bltu	r21,r2,6fe0 <quorem+0x108>
    6ff4:	84800415 	stw	r18,16(r16)
    6ff8:	b80b883a 	mov	r5,r23
    6ffc:	8009883a 	mov	r4,r16
    7000:	000aa240 	call	aa24 <__mcmp>
    7004:	10002616 	blt	r2,zero,70a0 <quorem+0x1c8>
    7008:	9cc00044 	addi	r19,r19,1
    700c:	a805883a 	mov	r2,r21
    7010:	000b883a 	mov	r5,zero
    7014:	11000017 	ldw	r4,0(r2)
    7018:	89800017 	ldw	r6,0(r17)
    701c:	10800104 	addi	r2,r2,4
    7020:	20ffffcc 	andi	r3,r4,65535
    7024:	194b883a 	add	r5,r3,r5
    7028:	30ffffcc 	andi	r3,r6,65535
    702c:	28c7c83a 	sub	r3,r5,r3
    7030:	300cd43a 	srli	r6,r6,16
    7034:	2008d43a 	srli	r4,r4,16
    7038:	180bd43a 	srai	r5,r3,16
    703c:	18ffffcc 	andi	r3,r3,65535
    7040:	2189c83a 	sub	r4,r4,r6
    7044:	2149883a 	add	r4,r4,r5
    7048:	200c943a 	slli	r6,r4,16
    704c:	8c400104 	addi	r17,r17,4
    7050:	200bd43a 	srai	r5,r4,16
    7054:	30c6b03a 	or	r3,r6,r3
    7058:	10ffff15 	stw	r3,-4(r2)
    705c:	a47fed2e 	bgeu	r20,r17,7014 <quorem+0x13c>
    7060:	9485883a 	add	r2,r18,r18
    7064:	1085883a 	add	r2,r2,r2
    7068:	a887883a 	add	r3,r21,r2
    706c:	18800017 	ldw	r2,0(r3)
    7070:	10000b1e 	bne	r2,zero,70a0 <quorem+0x1c8>
    7074:	18bfff04 	addi	r2,r3,-4
    7078:	a880082e 	bgeu	r21,r2,709c <quorem+0x1c4>
    707c:	18ffff17 	ldw	r3,-4(r3)
    7080:	18000326 	beq	r3,zero,7090 <quorem+0x1b8>
    7084:	00000506 	br	709c <quorem+0x1c4>
    7088:	10c00017 	ldw	r3,0(r2)
    708c:	1800031e 	bne	r3,zero,709c <quorem+0x1c4>
    7090:	10bfff04 	addi	r2,r2,-4
    7094:	94bfffc4 	addi	r18,r18,-1
    7098:	a8bffb36 	bltu	r21,r2,7088 <quorem+0x1b0>
    709c:	84800415 	stw	r18,16(r16)
    70a0:	9805883a 	mov	r2,r19
    70a4:	dfc00817 	ldw	ra,32(sp)
    70a8:	ddc00717 	ldw	r23,28(sp)
    70ac:	dd800617 	ldw	r22,24(sp)
    70b0:	dd400517 	ldw	r21,20(sp)
    70b4:	dd000417 	ldw	r20,16(sp)
    70b8:	dcc00317 	ldw	r19,12(sp)
    70bc:	dc800217 	ldw	r18,8(sp)
    70c0:	dc400117 	ldw	r17,4(sp)
    70c4:	dc000017 	ldw	r16,0(sp)
    70c8:	dec00904 	addi	sp,sp,36
    70cc:	f800283a 	ret
    70d0:	0005883a 	mov	r2,zero
    70d4:	003ff306 	br	70a4 <quorem+0x1cc>

000070d8 <_dtoa_r>:
    70d8:	20801017 	ldw	r2,64(r4)
    70dc:	deffde04 	addi	sp,sp,-136
    70e0:	df002015 	stw	fp,128(sp)
    70e4:	dcc01b15 	stw	r19,108(sp)
    70e8:	dc801a15 	stw	r18,104(sp)
    70ec:	dc401915 	stw	r17,100(sp)
    70f0:	dc001815 	stw	r16,96(sp)
    70f4:	dfc02115 	stw	ra,132(sp)
    70f8:	ddc01f15 	stw	r23,124(sp)
    70fc:	dd801e15 	stw	r22,120(sp)
    7100:	dd401d15 	stw	r21,116(sp)
    7104:	dd001c15 	stw	r20,112(sp)
    7108:	d9c00315 	stw	r7,12(sp)
    710c:	2039883a 	mov	fp,r4
    7110:	3023883a 	mov	r17,r6
    7114:	2825883a 	mov	r18,r5
    7118:	dc002417 	ldw	r16,144(sp)
    711c:	3027883a 	mov	r19,r6
    7120:	10000826 	beq	r2,zero,7144 <_dtoa_r+0x6c>
    7124:	21801117 	ldw	r6,68(r4)
    7128:	00c00044 	movi	r3,1
    712c:	100b883a 	mov	r5,r2
    7130:	1986983a 	sll	r3,r3,r6
    7134:	11800115 	stw	r6,4(r2)
    7138:	10c00215 	stw	r3,8(r2)
    713c:	000a2040 	call	a204 <_Bfree>
    7140:	e0001015 	stw	zero,64(fp)
    7144:	88002e16 	blt	r17,zero,7200 <_dtoa_r+0x128>
    7148:	80000015 	stw	zero,0(r16)
    714c:	889ffc2c 	andhi	r2,r17,32752
    7150:	00dffc34 	movhi	r3,32752
    7154:	10c01c26 	beq	r2,r3,71c8 <_dtoa_r+0xf0>
    7158:	000d883a 	mov	r6,zero
    715c:	000f883a 	mov	r7,zero
    7160:	9009883a 	mov	r4,r18
    7164:	980b883a 	mov	r5,r19
    7168:	00111cc0 	call	111cc <__eqdf2>
    716c:	10002b1e 	bne	r2,zero,721c <_dtoa_r+0x144>
    7170:	d9c02317 	ldw	r7,140(sp)
    7174:	00800044 	movi	r2,1
    7178:	38800015 	stw	r2,0(r7)
    717c:	d8802517 	ldw	r2,148(sp)
    7180:	10019e26 	beq	r2,zero,77fc <_dtoa_r+0x724>
    7184:	d8c02517 	ldw	r3,148(sp)
    7188:	008000b4 	movhi	r2,2
    718c:	10bd6144 	addi	r2,r2,-2683
    7190:	18800015 	stw	r2,0(r3)
    7194:	10bfffc4 	addi	r2,r2,-1
    7198:	dfc02117 	ldw	ra,132(sp)
    719c:	df002017 	ldw	fp,128(sp)
    71a0:	ddc01f17 	ldw	r23,124(sp)
    71a4:	dd801e17 	ldw	r22,120(sp)
    71a8:	dd401d17 	ldw	r21,116(sp)
    71ac:	dd001c17 	ldw	r20,112(sp)
    71b0:	dcc01b17 	ldw	r19,108(sp)
    71b4:	dc801a17 	ldw	r18,104(sp)
    71b8:	dc401917 	ldw	r17,100(sp)
    71bc:	dc001817 	ldw	r16,96(sp)
    71c0:	dec02204 	addi	sp,sp,136
    71c4:	f800283a 	ret
    71c8:	d8c02317 	ldw	r3,140(sp)
    71cc:	0089c3c4 	movi	r2,9999
    71d0:	18800015 	stw	r2,0(r3)
    71d4:	90017726 	beq	r18,zero,77b4 <_dtoa_r+0x6dc>
    71d8:	008000b4 	movhi	r2,2
    71dc:	10bd7504 	addi	r2,r2,-2604
    71e0:	d9002517 	ldw	r4,148(sp)
    71e4:	203fec26 	beq	r4,zero,7198 <_dtoa_r+0xc0>
    71e8:	10c000c7 	ldb	r3,3(r2)
    71ec:	1801781e 	bne	r3,zero,77d0 <_dtoa_r+0x6f8>
    71f0:	10c000c4 	addi	r3,r2,3
    71f4:	d9802517 	ldw	r6,148(sp)
    71f8:	30c00015 	stw	r3,0(r6)
    71fc:	003fe606 	br	7198 <_dtoa_r+0xc0>
    7200:	04e00034 	movhi	r19,32768
    7204:	9cffffc4 	addi	r19,r19,-1
    7208:	00800044 	movi	r2,1
    720c:	8ce6703a 	and	r19,r17,r19
    7210:	80800015 	stw	r2,0(r16)
    7214:	9823883a 	mov	r17,r19
    7218:	003fcc06 	br	714c <_dtoa_r+0x74>
    721c:	d8800204 	addi	r2,sp,8
    7220:	d8800015 	stw	r2,0(sp)
    7224:	d9c00104 	addi	r7,sp,4
    7228:	900b883a 	mov	r5,r18
    722c:	980d883a 	mov	r6,r19
    7230:	e009883a 	mov	r4,fp
    7234:	8820d53a 	srli	r16,r17,20
    7238:	000adf00 	call	adf0 <__d2b>
    723c:	d8800915 	stw	r2,36(sp)
    7240:	8001651e 	bne	r16,zero,77d8 <_dtoa_r+0x700>
    7244:	dd800217 	ldw	r22,8(sp)
    7248:	dc000117 	ldw	r16,4(sp)
    724c:	00800804 	movi	r2,32
    7250:	b421883a 	add	r16,r22,r16
    7254:	80c10c84 	addi	r3,r16,1074
    7258:	10c2d10e 	bge	r2,r3,7da0 <_dtoa_r+0xcc8>
    725c:	00801004 	movi	r2,64
    7260:	81010484 	addi	r4,r16,1042
    7264:	10c7c83a 	sub	r3,r2,r3
    7268:	9108d83a 	srl	r4,r18,r4
    726c:	88e2983a 	sll	r17,r17,r3
    7270:	2448b03a 	or	r4,r4,r17
    7274:	00125940 	call	12594 <__floatunsidf>
    7278:	017f8434 	movhi	r5,65040
    727c:	01800044 	movi	r6,1
    7280:	1009883a 	mov	r4,r2
    7284:	194b883a 	add	r5,r3,r5
    7288:	843fffc4 	addi	r16,r16,-1
    728c:	d9801115 	stw	r6,68(sp)
    7290:	000d883a 	mov	r6,zero
    7294:	01cffe34 	movhi	r7,16376
    7298:	0011b3c0 	call	11b3c <__subdf3>
    729c:	0198dbf4 	movhi	r6,25455
    72a0:	01cff4f4 	movhi	r7,16339
    72a4:	3190d844 	addi	r6,r6,17249
    72a8:	39e1e9c4 	addi	r7,r7,-30809
    72ac:	1009883a 	mov	r4,r2
    72b0:	180b883a 	mov	r5,r3
    72b4:	00114240 	call	11424 <__muldf3>
    72b8:	01a2d874 	movhi	r6,35681
    72bc:	01cff1f4 	movhi	r7,16327
    72c0:	31b22cc4 	addi	r6,r6,-14157
    72c4:	39e28a04 	addi	r7,r7,-30168
    72c8:	180b883a 	mov	r5,r3
    72cc:	1009883a 	mov	r4,r2
    72d0:	00100380 	call	10038 <__adddf3>
    72d4:	8009883a 	mov	r4,r16
    72d8:	1029883a 	mov	r20,r2
    72dc:	1823883a 	mov	r17,r3
    72e0:	00124b80 	call	124b8 <__floatsidf>
    72e4:	019427f4 	movhi	r6,20639
    72e8:	01cff4f4 	movhi	r7,16339
    72ec:	319e7ec4 	addi	r6,r6,31227
    72f0:	39d104c4 	addi	r7,r7,17427
    72f4:	1009883a 	mov	r4,r2
    72f8:	180b883a 	mov	r5,r3
    72fc:	00114240 	call	11424 <__muldf3>
    7300:	100d883a 	mov	r6,r2
    7304:	180f883a 	mov	r7,r3
    7308:	a009883a 	mov	r4,r20
    730c:	880b883a 	mov	r5,r17
    7310:	00100380 	call	10038 <__adddf3>
    7314:	1009883a 	mov	r4,r2
    7318:	180b883a 	mov	r5,r3
    731c:	1029883a 	mov	r20,r2
    7320:	1823883a 	mov	r17,r3
    7324:	00124380 	call	12438 <__fixdfsi>
    7328:	000d883a 	mov	r6,zero
    732c:	000f883a 	mov	r7,zero
    7330:	a009883a 	mov	r4,r20
    7334:	880b883a 	mov	r5,r17
    7338:	d8800515 	stw	r2,20(sp)
    733c:	00113300 	call	11330 <__ledf2>
    7340:	10028716 	blt	r2,zero,7d60 <_dtoa_r+0xc88>
    7344:	d8c00517 	ldw	r3,20(sp)
    7348:	00800584 	movi	r2,22
    734c:	10c27536 	bltu	r2,r3,7d24 <_dtoa_r+0xc4c>
    7350:	180490fa 	slli	r2,r3,3
    7354:	00c000b4 	movhi	r3,2
    7358:	18fd9004 	addi	r3,r3,-2496
    735c:	1885883a 	add	r2,r3,r2
    7360:	11000017 	ldw	r4,0(r2)
    7364:	11400117 	ldw	r5,4(r2)
    7368:	900d883a 	mov	r6,r18
    736c:	980f883a 	mov	r7,r19
    7370:	00112540 	call	11254 <__gedf2>
    7374:	00828d0e 	bge	zero,r2,7dac <_dtoa_r+0xcd4>
    7378:	d9000517 	ldw	r4,20(sp)
    737c:	d8000e15 	stw	zero,56(sp)
    7380:	213fffc4 	addi	r4,r4,-1
    7384:	d9000515 	stw	r4,20(sp)
    7388:	b42dc83a 	sub	r22,r22,r16
    738c:	b5bfffc4 	addi	r22,r22,-1
    7390:	b0026f16 	blt	r22,zero,7d50 <_dtoa_r+0xc78>
    7394:	d8000815 	stw	zero,32(sp)
    7398:	d9c00517 	ldw	r7,20(sp)
    739c:	38026416 	blt	r7,zero,7d30 <_dtoa_r+0xc58>
    73a0:	b1ed883a 	add	r22,r22,r7
    73a4:	d9c00d15 	stw	r7,52(sp)
    73a8:	d8000a15 	stw	zero,40(sp)
    73ac:	d9800317 	ldw	r6,12(sp)
    73b0:	00800244 	movi	r2,9
    73b4:	11811436 	bltu	r2,r6,7808 <_dtoa_r+0x730>
    73b8:	00800144 	movi	r2,5
    73bc:	1184e10e 	bge	r2,r6,8744 <_dtoa_r+0x166c>
    73c0:	31bfff04 	addi	r6,r6,-4
    73c4:	d9800315 	stw	r6,12(sp)
    73c8:	0023883a 	mov	r17,zero
    73cc:	d9800317 	ldw	r6,12(sp)
    73d0:	008000c4 	movi	r2,3
    73d4:	30836726 	beq	r6,r2,8174 <_dtoa_r+0x109c>
    73d8:	1183410e 	bge	r2,r6,80e0 <_dtoa_r+0x1008>
    73dc:	d9c00317 	ldw	r7,12(sp)
    73e0:	00800104 	movi	r2,4
    73e4:	38827c26 	beq	r7,r2,7dd8 <_dtoa_r+0xd00>
    73e8:	00800144 	movi	r2,5
    73ec:	3884c41e 	bne	r7,r2,8700 <_dtoa_r+0x1628>
    73f0:	00800044 	movi	r2,1
    73f4:	d8800b15 	stw	r2,44(sp)
    73f8:	d8c00517 	ldw	r3,20(sp)
    73fc:	d9002217 	ldw	r4,136(sp)
    7400:	1907883a 	add	r3,r3,r4
    7404:	19800044 	addi	r6,r3,1
    7408:	d8c00c15 	stw	r3,48(sp)
    740c:	d9800615 	stw	r6,24(sp)
    7410:	0183a40e 	bge	zero,r6,82a4 <_dtoa_r+0x11cc>
    7414:	d9800617 	ldw	r6,24(sp)
    7418:	3021883a 	mov	r16,r6
    741c:	e0001115 	stw	zero,68(fp)
    7420:	008005c4 	movi	r2,23
    7424:	1184c92e 	bgeu	r2,r6,874c <_dtoa_r+0x1674>
    7428:	00c00044 	movi	r3,1
    742c:	00800104 	movi	r2,4
    7430:	1085883a 	add	r2,r2,r2
    7434:	11000504 	addi	r4,r2,20
    7438:	180b883a 	mov	r5,r3
    743c:	18c00044 	addi	r3,r3,1
    7440:	313ffb2e 	bgeu	r6,r4,7430 <_dtoa_r+0x358>
    7444:	e1401115 	stw	r5,68(fp)
    7448:	e009883a 	mov	r4,fp
    744c:	000a15c0 	call	a15c <_Balloc>
    7450:	d8800715 	stw	r2,28(sp)
    7454:	e0801015 	stw	r2,64(fp)
    7458:	00800384 	movi	r2,14
    745c:	1400f736 	bltu	r2,r16,783c <_dtoa_r+0x764>
    7460:	8800f626 	beq	r17,zero,783c <_dtoa_r+0x764>
    7464:	d9c00517 	ldw	r7,20(sp)
    7468:	01c39a0e 	bge	zero,r7,82d4 <_dtoa_r+0x11fc>
    746c:	388003cc 	andi	r2,r7,15
    7470:	100490fa 	slli	r2,r2,3
    7474:	382bd13a 	srai	r21,r7,4
    7478:	00c000b4 	movhi	r3,2
    747c:	18fd9004 	addi	r3,r3,-2496
    7480:	1885883a 	add	r2,r3,r2
    7484:	a8c0040c 	andi	r3,r21,16
    7488:	12400017 	ldw	r9,0(r2)
    748c:	12000117 	ldw	r8,4(r2)
    7490:	18037926 	beq	r3,zero,8278 <_dtoa_r+0x11a0>
    7494:	008000b4 	movhi	r2,2
    7498:	10bd8604 	addi	r2,r2,-2536
    749c:	11800817 	ldw	r6,32(r2)
    74a0:	11c00917 	ldw	r7,36(r2)
    74a4:	9009883a 	mov	r4,r18
    74a8:	980b883a 	mov	r5,r19
    74ac:	da001715 	stw	r8,92(sp)
    74b0:	da401615 	stw	r9,88(sp)
    74b4:	00108e40 	call	108e4 <__divdf3>
    74b8:	da001717 	ldw	r8,92(sp)
    74bc:	da401617 	ldw	r9,88(sp)
    74c0:	ad4003cc 	andi	r21,r21,15
    74c4:	040000c4 	movi	r16,3
    74c8:	1023883a 	mov	r17,r2
    74cc:	1829883a 	mov	r20,r3
    74d0:	a8001126 	beq	r21,zero,7518 <_dtoa_r+0x440>
    74d4:	05c000b4 	movhi	r23,2
    74d8:	bdfd8604 	addi	r23,r23,-2536
    74dc:	4805883a 	mov	r2,r9
    74e0:	4007883a 	mov	r3,r8
    74e4:	a980004c 	andi	r6,r21,1
    74e8:	1009883a 	mov	r4,r2
    74ec:	a82bd07a 	srai	r21,r21,1
    74f0:	180b883a 	mov	r5,r3
    74f4:	30000426 	beq	r6,zero,7508 <_dtoa_r+0x430>
    74f8:	b9800017 	ldw	r6,0(r23)
    74fc:	b9c00117 	ldw	r7,4(r23)
    7500:	84000044 	addi	r16,r16,1
    7504:	00114240 	call	11424 <__muldf3>
    7508:	bdc00204 	addi	r23,r23,8
    750c:	a83ff51e 	bne	r21,zero,74e4 <_dtoa_r+0x40c>
    7510:	1013883a 	mov	r9,r2
    7514:	1811883a 	mov	r8,r3
    7518:	480d883a 	mov	r6,r9
    751c:	400f883a 	mov	r7,r8
    7520:	8809883a 	mov	r4,r17
    7524:	a00b883a 	mov	r5,r20
    7528:	00108e40 	call	108e4 <__divdf3>
    752c:	d8800f15 	stw	r2,60(sp)
    7530:	d8c01015 	stw	r3,64(sp)
    7534:	d8c00e17 	ldw	r3,56(sp)
    7538:	18000626 	beq	r3,zero,7554 <_dtoa_r+0x47c>
    753c:	d9000f17 	ldw	r4,60(sp)
    7540:	d9401017 	ldw	r5,64(sp)
    7544:	000d883a 	mov	r6,zero
    7548:	01cffc34 	movhi	r7,16368
    754c:	00113300 	call	11330 <__ledf2>
    7550:	10040b16 	blt	r2,zero,8580 <_dtoa_r+0x14a8>
    7554:	8009883a 	mov	r4,r16
    7558:	00124b80 	call	124b8 <__floatsidf>
    755c:	d9800f17 	ldw	r6,60(sp)
    7560:	d9c01017 	ldw	r7,64(sp)
    7564:	1009883a 	mov	r4,r2
    7568:	180b883a 	mov	r5,r3
    756c:	00114240 	call	11424 <__muldf3>
    7570:	000d883a 	mov	r6,zero
    7574:	01d00734 	movhi	r7,16412
    7578:	1009883a 	mov	r4,r2
    757c:	180b883a 	mov	r5,r3
    7580:	00100380 	call	10038 <__adddf3>
    7584:	1021883a 	mov	r16,r2
    7588:	d8800617 	ldw	r2,24(sp)
    758c:	047f3034 	movhi	r17,64704
    7590:	1c63883a 	add	r17,r3,r17
    7594:	10031826 	beq	r2,zero,81f8 <_dtoa_r+0x1120>
    7598:	d8c00517 	ldw	r3,20(sp)
    759c:	db000617 	ldw	r12,24(sp)
    75a0:	d8c01315 	stw	r3,76(sp)
    75a4:	d9000b17 	ldw	r4,44(sp)
    75a8:	20038f26 	beq	r4,zero,83e8 <_dtoa_r+0x1310>
    75ac:	60bfffc4 	addi	r2,r12,-1
    75b0:	100490fa 	slli	r2,r2,3
    75b4:	00c000b4 	movhi	r3,2
    75b8:	18fd9004 	addi	r3,r3,-2496
    75bc:	1885883a 	add	r2,r3,r2
    75c0:	11800017 	ldw	r6,0(r2)
    75c4:	11c00117 	ldw	r7,4(r2)
    75c8:	d8800717 	ldw	r2,28(sp)
    75cc:	0009883a 	mov	r4,zero
    75d0:	014ff834 	movhi	r5,16352
    75d4:	db001615 	stw	r12,88(sp)
    75d8:	15c00044 	addi	r23,r2,1
    75dc:	00108e40 	call	108e4 <__divdf3>
    75e0:	800d883a 	mov	r6,r16
    75e4:	880f883a 	mov	r7,r17
    75e8:	1009883a 	mov	r4,r2
    75ec:	180b883a 	mov	r5,r3
    75f0:	0011b3c0 	call	11b3c <__subdf3>
    75f4:	d9401017 	ldw	r5,64(sp)
    75f8:	d9000f17 	ldw	r4,60(sp)
    75fc:	102b883a 	mov	r21,r2
    7600:	d8c01215 	stw	r3,72(sp)
    7604:	00124380 	call	12438 <__fixdfsi>
    7608:	1009883a 	mov	r4,r2
    760c:	1029883a 	mov	r20,r2
    7610:	00124b80 	call	124b8 <__floatsidf>
    7614:	d9000f17 	ldw	r4,60(sp)
    7618:	d9401017 	ldw	r5,64(sp)
    761c:	100d883a 	mov	r6,r2
    7620:	180f883a 	mov	r7,r3
    7624:	0011b3c0 	call	11b3c <__subdf3>
    7628:	1823883a 	mov	r17,r3
    762c:	d8c00717 	ldw	r3,28(sp)
    7630:	d9401217 	ldw	r5,72(sp)
    7634:	a2000c04 	addi	r8,r20,48
    7638:	1021883a 	mov	r16,r2
    763c:	1a000005 	stb	r8,0(r3)
    7640:	800d883a 	mov	r6,r16
    7644:	880f883a 	mov	r7,r17
    7648:	a809883a 	mov	r4,r21
    764c:	4029883a 	mov	r20,r8
    7650:	00112540 	call	11254 <__gedf2>
    7654:	00841d16 	blt	zero,r2,86cc <_dtoa_r+0x15f4>
    7658:	800d883a 	mov	r6,r16
    765c:	880f883a 	mov	r7,r17
    7660:	0009883a 	mov	r4,zero
    7664:	014ffc34 	movhi	r5,16368
    7668:	0011b3c0 	call	11b3c <__subdf3>
    766c:	d9401217 	ldw	r5,72(sp)
    7670:	100d883a 	mov	r6,r2
    7674:	180f883a 	mov	r7,r3
    7678:	a809883a 	mov	r4,r21
    767c:	00112540 	call	11254 <__gedf2>
    7680:	db001617 	ldw	r12,88(sp)
    7684:	00840e16 	blt	zero,r2,86c0 <_dtoa_r+0x15e8>
    7688:	00800044 	movi	r2,1
    768c:	13006b0e 	bge	r2,r12,783c <_dtoa_r+0x764>
    7690:	d9000717 	ldw	r4,28(sp)
    7694:	dd800f15 	stw	r22,60(sp)
    7698:	dcc01015 	stw	r19,64(sp)
    769c:	2319883a 	add	r12,r4,r12
    76a0:	dcc01217 	ldw	r19,72(sp)
    76a4:	602d883a 	mov	r22,r12
    76a8:	dc801215 	stw	r18,72(sp)
    76ac:	b825883a 	mov	r18,r23
    76b0:	00000906 	br	76d8 <_dtoa_r+0x600>
    76b4:	0011b3c0 	call	11b3c <__subdf3>
    76b8:	a80d883a 	mov	r6,r21
    76bc:	980f883a 	mov	r7,r19
    76c0:	1009883a 	mov	r4,r2
    76c4:	180b883a 	mov	r5,r3
    76c8:	00113300 	call	11330 <__ledf2>
    76cc:	1003e816 	blt	r2,zero,8670 <_dtoa_r+0x1598>
    76d0:	b825883a 	mov	r18,r23
    76d4:	bd83e926 	beq	r23,r22,867c <_dtoa_r+0x15a4>
    76d8:	a809883a 	mov	r4,r21
    76dc:	980b883a 	mov	r5,r19
    76e0:	000d883a 	mov	r6,zero
    76e4:	01d00934 	movhi	r7,16420
    76e8:	00114240 	call	11424 <__muldf3>
    76ec:	000d883a 	mov	r6,zero
    76f0:	01d00934 	movhi	r7,16420
    76f4:	8009883a 	mov	r4,r16
    76f8:	880b883a 	mov	r5,r17
    76fc:	102b883a 	mov	r21,r2
    7700:	1827883a 	mov	r19,r3
    7704:	00114240 	call	11424 <__muldf3>
    7708:	180b883a 	mov	r5,r3
    770c:	1009883a 	mov	r4,r2
    7710:	1821883a 	mov	r16,r3
    7714:	1023883a 	mov	r17,r2
    7718:	00124380 	call	12438 <__fixdfsi>
    771c:	1009883a 	mov	r4,r2
    7720:	1029883a 	mov	r20,r2
    7724:	00124b80 	call	124b8 <__floatsidf>
    7728:	8809883a 	mov	r4,r17
    772c:	800b883a 	mov	r5,r16
    7730:	100d883a 	mov	r6,r2
    7734:	180f883a 	mov	r7,r3
    7738:	0011b3c0 	call	11b3c <__subdf3>
    773c:	a5000c04 	addi	r20,r20,48
    7740:	a80d883a 	mov	r6,r21
    7744:	980f883a 	mov	r7,r19
    7748:	1009883a 	mov	r4,r2
    774c:	180b883a 	mov	r5,r3
    7750:	95000005 	stb	r20,0(r18)
    7754:	1021883a 	mov	r16,r2
    7758:	1823883a 	mov	r17,r3
    775c:	00113300 	call	11330 <__ledf2>
    7760:	bdc00044 	addi	r23,r23,1
    7764:	800d883a 	mov	r6,r16
    7768:	880f883a 	mov	r7,r17
    776c:	0009883a 	mov	r4,zero
    7770:	014ffc34 	movhi	r5,16368
    7774:	103fcf0e 	bge	r2,zero,76b4 <_dtoa_r+0x5dc>
    7778:	d8c01317 	ldw	r3,76(sp)
    777c:	d8c00515 	stw	r3,20(sp)
    7780:	d9400917 	ldw	r5,36(sp)
    7784:	e009883a 	mov	r4,fp
    7788:	000a2040 	call	a204 <_Bfree>
    778c:	d9000517 	ldw	r4,20(sp)
    7790:	d9802317 	ldw	r6,140(sp)
    7794:	d9c02517 	ldw	r7,148(sp)
    7798:	b8000005 	stb	zero,0(r23)
    779c:	20800044 	addi	r2,r4,1
    77a0:	30800015 	stw	r2,0(r6)
    77a4:	3802aa26 	beq	r7,zero,8250 <_dtoa_r+0x1178>
    77a8:	3dc00015 	stw	r23,0(r7)
    77ac:	d8800717 	ldw	r2,28(sp)
    77b0:	003e7906 	br	7198 <_dtoa_r+0xc0>
    77b4:	00800434 	movhi	r2,16
    77b8:	10bfffc4 	addi	r2,r2,-1
    77bc:	88a2703a 	and	r17,r17,r2
    77c0:	883e851e 	bne	r17,zero,71d8 <_dtoa_r+0x100>
    77c4:	008000b4 	movhi	r2,2
    77c8:	10bd7204 	addi	r2,r2,-2616
    77cc:	003e8406 	br	71e0 <_dtoa_r+0x108>
    77d0:	10c00204 	addi	r3,r2,8
    77d4:	003e8706 	br	71f4 <_dtoa_r+0x11c>
    77d8:	01400434 	movhi	r5,16
    77dc:	297fffc4 	addi	r5,r5,-1
    77e0:	994a703a 	and	r5,r19,r5
    77e4:	9009883a 	mov	r4,r18
    77e8:	843f0044 	addi	r16,r16,-1023
    77ec:	294ffc34 	orhi	r5,r5,16368
    77f0:	dd800217 	ldw	r22,8(sp)
    77f4:	d8001115 	stw	zero,68(sp)
    77f8:	003ea506 	br	7290 <_dtoa_r+0x1b8>
    77fc:	008000b4 	movhi	r2,2
    7800:	10bd6104 	addi	r2,r2,-2684
    7804:	003e6406 	br	7198 <_dtoa_r+0xc0>
    7808:	e0001115 	stw	zero,68(fp)
    780c:	000b883a 	mov	r5,zero
    7810:	e009883a 	mov	r4,fp
    7814:	000a15c0 	call	a15c <_Balloc>
    7818:	01bfffc4 	movi	r6,-1
    781c:	01c00044 	movi	r7,1
    7820:	d8800715 	stw	r2,28(sp)
    7824:	d9800c15 	stw	r6,48(sp)
    7828:	e0801015 	stw	r2,64(fp)
    782c:	d8000315 	stw	zero,12(sp)
    7830:	d9c00b15 	stw	r7,44(sp)
    7834:	d9800615 	stw	r6,24(sp)
    7838:	d8002215 	stw	zero,136(sp)
    783c:	d8800117 	ldw	r2,4(sp)
    7840:	10008916 	blt	r2,zero,7a68 <_dtoa_r+0x990>
    7844:	d9000517 	ldw	r4,20(sp)
    7848:	00c00384 	movi	r3,14
    784c:	19008616 	blt	r3,r4,7a68 <_dtoa_r+0x990>
    7850:	200490fa 	slli	r2,r4,3
    7854:	00c000b4 	movhi	r3,2
    7858:	d9802217 	ldw	r6,136(sp)
    785c:	18fd9004 	addi	r3,r3,-2496
    7860:	1885883a 	add	r2,r3,r2
    7864:	14000017 	ldw	r16,0(r2)
    7868:	14400117 	ldw	r17,4(r2)
    786c:	30016316 	blt	r6,zero,7dfc <_dtoa_r+0xd24>
    7870:	800d883a 	mov	r6,r16
    7874:	880f883a 	mov	r7,r17
    7878:	9009883a 	mov	r4,r18
    787c:	980b883a 	mov	r5,r19
    7880:	00108e40 	call	108e4 <__divdf3>
    7884:	180b883a 	mov	r5,r3
    7888:	1009883a 	mov	r4,r2
    788c:	00124380 	call	12438 <__fixdfsi>
    7890:	1009883a 	mov	r4,r2
    7894:	102b883a 	mov	r21,r2
    7898:	00124b80 	call	124b8 <__floatsidf>
    789c:	800d883a 	mov	r6,r16
    78a0:	880f883a 	mov	r7,r17
    78a4:	1009883a 	mov	r4,r2
    78a8:	180b883a 	mov	r5,r3
    78ac:	00114240 	call	11424 <__muldf3>
    78b0:	100d883a 	mov	r6,r2
    78b4:	180f883a 	mov	r7,r3
    78b8:	9009883a 	mov	r4,r18
    78bc:	980b883a 	mov	r5,r19
    78c0:	0011b3c0 	call	11b3c <__subdf3>
    78c4:	d9c00717 	ldw	r7,28(sp)
    78c8:	1009883a 	mov	r4,r2
    78cc:	a8800c04 	addi	r2,r21,48
    78d0:	38800005 	stb	r2,0(r7)
    78d4:	3dc00044 	addi	r23,r7,1
    78d8:	d9c00617 	ldw	r7,24(sp)
    78dc:	01800044 	movi	r6,1
    78e0:	180b883a 	mov	r5,r3
    78e4:	2005883a 	mov	r2,r4
    78e8:	39803826 	beq	r7,r6,79cc <_dtoa_r+0x8f4>
    78ec:	000d883a 	mov	r6,zero
    78f0:	01d00934 	movhi	r7,16420
    78f4:	00114240 	call	11424 <__muldf3>
    78f8:	000d883a 	mov	r6,zero
    78fc:	000f883a 	mov	r7,zero
    7900:	1009883a 	mov	r4,r2
    7904:	180b883a 	mov	r5,r3
    7908:	1025883a 	mov	r18,r2
    790c:	1827883a 	mov	r19,r3
    7910:	00111cc0 	call	111cc <__eqdf2>
    7914:	103f9a26 	beq	r2,zero,7780 <_dtoa_r+0x6a8>
    7918:	d9c00617 	ldw	r7,24(sp)
    791c:	d8c00717 	ldw	r3,28(sp)
    7920:	b829883a 	mov	r20,r23
    7924:	38bfffc4 	addi	r2,r7,-1
    7928:	18ad883a 	add	r22,r3,r2
    792c:	00000a06 	br	7958 <_dtoa_r+0x880>
    7930:	00114240 	call	11424 <__muldf3>
    7934:	000d883a 	mov	r6,zero
    7938:	000f883a 	mov	r7,zero
    793c:	1009883a 	mov	r4,r2
    7940:	180b883a 	mov	r5,r3
    7944:	1025883a 	mov	r18,r2
    7948:	1827883a 	mov	r19,r3
    794c:	b829883a 	mov	r20,r23
    7950:	00111cc0 	call	111cc <__eqdf2>
    7954:	103f8a26 	beq	r2,zero,7780 <_dtoa_r+0x6a8>
    7958:	800d883a 	mov	r6,r16
    795c:	880f883a 	mov	r7,r17
    7960:	9009883a 	mov	r4,r18
    7964:	980b883a 	mov	r5,r19
    7968:	00108e40 	call	108e4 <__divdf3>
    796c:	180b883a 	mov	r5,r3
    7970:	1009883a 	mov	r4,r2
    7974:	00124380 	call	12438 <__fixdfsi>
    7978:	1009883a 	mov	r4,r2
    797c:	102b883a 	mov	r21,r2
    7980:	00124b80 	call	124b8 <__floatsidf>
    7984:	800d883a 	mov	r6,r16
    7988:	880f883a 	mov	r7,r17
    798c:	1009883a 	mov	r4,r2
    7990:	180b883a 	mov	r5,r3
    7994:	00114240 	call	11424 <__muldf3>
    7998:	100d883a 	mov	r6,r2
    799c:	180f883a 	mov	r7,r3
    79a0:	9009883a 	mov	r4,r18
    79a4:	980b883a 	mov	r5,r19
    79a8:	0011b3c0 	call	11b3c <__subdf3>
    79ac:	aa000c04 	addi	r8,r21,48
    79b0:	a2000005 	stb	r8,0(r20)
    79b4:	000d883a 	mov	r6,zero
    79b8:	01d00934 	movhi	r7,16420
    79bc:	1009883a 	mov	r4,r2
    79c0:	180b883a 	mov	r5,r3
    79c4:	a5c00044 	addi	r23,r20,1
    79c8:	b53fd91e 	bne	r22,r20,7930 <_dtoa_r+0x858>
    79cc:	100d883a 	mov	r6,r2
    79d0:	180f883a 	mov	r7,r3
    79d4:	1009883a 	mov	r4,r2
    79d8:	180b883a 	mov	r5,r3
    79dc:	00100380 	call	10038 <__adddf3>
    79e0:	100d883a 	mov	r6,r2
    79e4:	180f883a 	mov	r7,r3
    79e8:	8009883a 	mov	r4,r16
    79ec:	880b883a 	mov	r5,r17
    79f0:	1027883a 	mov	r19,r2
    79f4:	1825883a 	mov	r18,r3
    79f8:	00113300 	call	11330 <__ledf2>
    79fc:	10000816 	blt	r2,zero,7a20 <_dtoa_r+0x948>
    7a00:	980d883a 	mov	r6,r19
    7a04:	900f883a 	mov	r7,r18
    7a08:	8009883a 	mov	r4,r16
    7a0c:	880b883a 	mov	r5,r17
    7a10:	00111cc0 	call	111cc <__eqdf2>
    7a14:	103f5a1e 	bne	r2,zero,7780 <_dtoa_r+0x6a8>
    7a18:	ad40004c 	andi	r21,r21,1
    7a1c:	a83f5826 	beq	r21,zero,7780 <_dtoa_r+0x6a8>
    7a20:	bd3fffc3 	ldbu	r20,-1(r23)
    7a24:	b8bfffc4 	addi	r2,r23,-1
    7a28:	1007883a 	mov	r3,r2
    7a2c:	01400e44 	movi	r5,57
    7a30:	d9800717 	ldw	r6,28(sp)
    7a34:	00000506 	br	7a4c <_dtoa_r+0x974>
    7a38:	18ffffc4 	addi	r3,r3,-1
    7a3c:	11824726 	beq	r2,r6,835c <_dtoa_r+0x1284>
    7a40:	1d000003 	ldbu	r20,0(r3)
    7a44:	102f883a 	mov	r23,r2
    7a48:	10bfffc4 	addi	r2,r2,-1
    7a4c:	a1003fcc 	andi	r4,r20,255
    7a50:	2100201c 	xori	r4,r4,128
    7a54:	213fe004 	addi	r4,r4,-128
    7a58:	217ff726 	beq	r4,r5,7a38 <_dtoa_r+0x960>
    7a5c:	a2000044 	addi	r8,r20,1
    7a60:	12000005 	stb	r8,0(r2)
    7a64:	003f4606 	br	7780 <_dtoa_r+0x6a8>
    7a68:	d9000b17 	ldw	r4,44(sp)
    7a6c:	2000c826 	beq	r4,zero,7d90 <_dtoa_r+0xcb8>
    7a70:	d9800317 	ldw	r6,12(sp)
    7a74:	00c00044 	movi	r3,1
    7a78:	1980f90e 	bge	r3,r6,7e60 <_dtoa_r+0xd88>
    7a7c:	d8800617 	ldw	r2,24(sp)
    7a80:	d8c00a17 	ldw	r3,40(sp)
    7a84:	157fffc4 	addi	r21,r2,-1
    7a88:	1d41f316 	blt	r3,r21,8258 <_dtoa_r+0x1180>
    7a8c:	1d6bc83a 	sub	r21,r3,r21
    7a90:	d9c00617 	ldw	r7,24(sp)
    7a94:	3802aa16 	blt	r7,zero,8540 <_dtoa_r+0x1468>
    7a98:	dd000817 	ldw	r20,32(sp)
    7a9c:	d8800617 	ldw	r2,24(sp)
    7aa0:	d8c00817 	ldw	r3,32(sp)
    7aa4:	01400044 	movi	r5,1
    7aa8:	e009883a 	mov	r4,fp
    7aac:	1887883a 	add	r3,r3,r2
    7ab0:	d8c00815 	stw	r3,32(sp)
    7ab4:	b0ad883a 	add	r22,r22,r2
    7ab8:	000a5680 	call	a568 <__i2b>
    7abc:	1023883a 	mov	r17,r2
    7ac0:	a0000826 	beq	r20,zero,7ae4 <_dtoa_r+0xa0c>
    7ac4:	0580070e 	bge	zero,r22,7ae4 <_dtoa_r+0xa0c>
    7ac8:	a005883a 	mov	r2,r20
    7acc:	b500b916 	blt	r22,r20,7db4 <_dtoa_r+0xcdc>
    7ad0:	d9000817 	ldw	r4,32(sp)
    7ad4:	a0a9c83a 	sub	r20,r20,r2
    7ad8:	b0adc83a 	sub	r22,r22,r2
    7adc:	2089c83a 	sub	r4,r4,r2
    7ae0:	d9000815 	stw	r4,32(sp)
    7ae4:	d9800a17 	ldw	r6,40(sp)
    7ae8:	0181810e 	bge	zero,r6,80f0 <_dtoa_r+0x1018>
    7aec:	d9c00b17 	ldw	r7,44(sp)
    7af0:	3800b326 	beq	r7,zero,7dc0 <_dtoa_r+0xce8>
    7af4:	a800b226 	beq	r21,zero,7dc0 <_dtoa_r+0xce8>
    7af8:	880b883a 	mov	r5,r17
    7afc:	a80d883a 	mov	r6,r21
    7b00:	e009883a 	mov	r4,fp
    7b04:	000a79c0 	call	a79c <__pow5mult>
    7b08:	d9800917 	ldw	r6,36(sp)
    7b0c:	100b883a 	mov	r5,r2
    7b10:	e009883a 	mov	r4,fp
    7b14:	1023883a 	mov	r17,r2
    7b18:	000a5a40 	call	a5a4 <__multiply>
    7b1c:	1021883a 	mov	r16,r2
    7b20:	d8800a17 	ldw	r2,40(sp)
    7b24:	d9400917 	ldw	r5,36(sp)
    7b28:	e009883a 	mov	r4,fp
    7b2c:	1545c83a 	sub	r2,r2,r21
    7b30:	d8800a15 	stw	r2,40(sp)
    7b34:	000a2040 	call	a204 <_Bfree>
    7b38:	d8c00a17 	ldw	r3,40(sp)
    7b3c:	18009f1e 	bne	r3,zero,7dbc <_dtoa_r+0xce4>
    7b40:	05c00044 	movi	r23,1
    7b44:	e009883a 	mov	r4,fp
    7b48:	b80b883a 	mov	r5,r23
    7b4c:	000a5680 	call	a568 <__i2b>
    7b50:	d9000d17 	ldw	r4,52(sp)
    7b54:	102b883a 	mov	r21,r2
    7b58:	2000ce26 	beq	r4,zero,7e94 <_dtoa_r+0xdbc>
    7b5c:	200d883a 	mov	r6,r4
    7b60:	100b883a 	mov	r5,r2
    7b64:	e009883a 	mov	r4,fp
    7b68:	000a79c0 	call	a79c <__pow5mult>
    7b6c:	d9800317 	ldw	r6,12(sp)
    7b70:	102b883a 	mov	r21,r2
    7b74:	b981810e 	bge	r23,r6,817c <_dtoa_r+0x10a4>
    7b78:	0027883a 	mov	r19,zero
    7b7c:	a8800417 	ldw	r2,16(r21)
    7b80:	05c00804 	movi	r23,32
    7b84:	10800104 	addi	r2,r2,4
    7b88:	1085883a 	add	r2,r2,r2
    7b8c:	1085883a 	add	r2,r2,r2
    7b90:	a885883a 	add	r2,r21,r2
    7b94:	11000017 	ldw	r4,0(r2)
    7b98:	000a4500 	call	a450 <__hi0bits>
    7b9c:	b885c83a 	sub	r2,r23,r2
    7ba0:	1585883a 	add	r2,r2,r22
    7ba4:	108007cc 	andi	r2,r2,31
    7ba8:	1000b326 	beq	r2,zero,7e78 <_dtoa_r+0xda0>
    7bac:	00c00804 	movi	r3,32
    7bb0:	1887c83a 	sub	r3,r3,r2
    7bb4:	01000104 	movi	r4,4
    7bb8:	20c2cd0e 	bge	r4,r3,86f0 <_dtoa_r+0x1618>
    7bbc:	00c00704 	movi	r3,28
    7bc0:	1885c83a 	sub	r2,r3,r2
    7bc4:	d8c00817 	ldw	r3,32(sp)
    7bc8:	a0a9883a 	add	r20,r20,r2
    7bcc:	b0ad883a 	add	r22,r22,r2
    7bd0:	1887883a 	add	r3,r3,r2
    7bd4:	d8c00815 	stw	r3,32(sp)
    7bd8:	d9800817 	ldw	r6,32(sp)
    7bdc:	0180040e 	bge	zero,r6,7bf0 <_dtoa_r+0xb18>
    7be0:	800b883a 	mov	r5,r16
    7be4:	e009883a 	mov	r4,fp
    7be8:	000a8dc0 	call	a8dc <__lshift>
    7bec:	1021883a 	mov	r16,r2
    7bf0:	0580050e 	bge	zero,r22,7c08 <_dtoa_r+0xb30>
    7bf4:	a80b883a 	mov	r5,r21
    7bf8:	b00d883a 	mov	r6,r22
    7bfc:	e009883a 	mov	r4,fp
    7c00:	000a8dc0 	call	a8dc <__lshift>
    7c04:	102b883a 	mov	r21,r2
    7c08:	d9c00e17 	ldw	r7,56(sp)
    7c0c:	3801211e 	bne	r7,zero,8094 <_dtoa_r+0xfbc>
    7c10:	d9800617 	ldw	r6,24(sp)
    7c14:	0181380e 	bge	zero,r6,80f8 <_dtoa_r+0x1020>
    7c18:	d8c00b17 	ldw	r3,44(sp)
    7c1c:	1800ab1e 	bne	r3,zero,7ecc <_dtoa_r+0xdf4>
    7c20:	dc800717 	ldw	r18,28(sp)
    7c24:	dcc00617 	ldw	r19,24(sp)
    7c28:	9029883a 	mov	r20,r18
    7c2c:	00000206 	br	7c38 <_dtoa_r+0xb60>
    7c30:	000a22c0 	call	a22c <__multadd>
    7c34:	1021883a 	mov	r16,r2
    7c38:	a80b883a 	mov	r5,r21
    7c3c:	8009883a 	mov	r4,r16
    7c40:	0006ed80 	call	6ed8 <quorem>
    7c44:	10800c04 	addi	r2,r2,48
    7c48:	90800005 	stb	r2,0(r18)
    7c4c:	94800044 	addi	r18,r18,1
    7c50:	9507c83a 	sub	r3,r18,r20
    7c54:	000f883a 	mov	r7,zero
    7c58:	01800284 	movi	r6,10
    7c5c:	800b883a 	mov	r5,r16
    7c60:	e009883a 	mov	r4,fp
    7c64:	1cfff216 	blt	r3,r19,7c30 <_dtoa_r+0xb58>
    7c68:	1011883a 	mov	r8,r2
    7c6c:	d8800617 	ldw	r2,24(sp)
    7c70:	0082370e 	bge	zero,r2,8550 <_dtoa_r+0x1478>
    7c74:	d9000717 	ldw	r4,28(sp)
    7c78:	0025883a 	mov	r18,zero
    7c7c:	20af883a 	add	r23,r4,r2
    7c80:	01800044 	movi	r6,1
    7c84:	800b883a 	mov	r5,r16
    7c88:	e009883a 	mov	r4,fp
    7c8c:	da001715 	stw	r8,92(sp)
    7c90:	000a8dc0 	call	a8dc <__lshift>
    7c94:	a80b883a 	mov	r5,r21
    7c98:	1009883a 	mov	r4,r2
    7c9c:	d8800915 	stw	r2,36(sp)
    7ca0:	000aa240 	call	aa24 <__mcmp>
    7ca4:	da001717 	ldw	r8,92(sp)
    7ca8:	0081800e 	bge	zero,r2,82ac <_dtoa_r+0x11d4>
    7cac:	b93fffc3 	ldbu	r4,-1(r23)
    7cb0:	b8bfffc4 	addi	r2,r23,-1
    7cb4:	1007883a 	mov	r3,r2
    7cb8:	01800e44 	movi	r6,57
    7cbc:	d9c00717 	ldw	r7,28(sp)
    7cc0:	00000506 	br	7cd8 <_dtoa_r+0xc00>
    7cc4:	18ffffc4 	addi	r3,r3,-1
    7cc8:	11c12326 	beq	r2,r7,8158 <_dtoa_r+0x1080>
    7ccc:	19000003 	ldbu	r4,0(r3)
    7cd0:	102f883a 	mov	r23,r2
    7cd4:	10bfffc4 	addi	r2,r2,-1
    7cd8:	21403fcc 	andi	r5,r4,255
    7cdc:	2940201c 	xori	r5,r5,128
    7ce0:	297fe004 	addi	r5,r5,-128
    7ce4:	29bff726 	beq	r5,r6,7cc4 <_dtoa_r+0xbec>
    7ce8:	21000044 	addi	r4,r4,1
    7cec:	11000005 	stb	r4,0(r2)
    7cf0:	a80b883a 	mov	r5,r21
    7cf4:	e009883a 	mov	r4,fp
    7cf8:	000a2040 	call	a204 <_Bfree>
    7cfc:	883ea026 	beq	r17,zero,7780 <_dtoa_r+0x6a8>
    7d00:	90000426 	beq	r18,zero,7d14 <_dtoa_r+0xc3c>
    7d04:	94400326 	beq	r18,r17,7d14 <_dtoa_r+0xc3c>
    7d08:	900b883a 	mov	r5,r18
    7d0c:	e009883a 	mov	r4,fp
    7d10:	000a2040 	call	a204 <_Bfree>
    7d14:	880b883a 	mov	r5,r17
    7d18:	e009883a 	mov	r4,fp
    7d1c:	000a2040 	call	a204 <_Bfree>
    7d20:	003e9706 	br	7780 <_dtoa_r+0x6a8>
    7d24:	01800044 	movi	r6,1
    7d28:	d9800e15 	stw	r6,56(sp)
    7d2c:	003d9606 	br	7388 <_dtoa_r+0x2b0>
    7d30:	d8800817 	ldw	r2,32(sp)
    7d34:	d8c00517 	ldw	r3,20(sp)
    7d38:	d8000d15 	stw	zero,52(sp)
    7d3c:	10c5c83a 	sub	r2,r2,r3
    7d40:	00c9c83a 	sub	r4,zero,r3
    7d44:	d8800815 	stw	r2,32(sp)
    7d48:	d9000a15 	stw	r4,40(sp)
    7d4c:	003d9706 	br	73ac <_dtoa_r+0x2d4>
    7d50:	05adc83a 	sub	r22,zero,r22
    7d54:	dd800815 	stw	r22,32(sp)
    7d58:	002d883a 	mov	r22,zero
    7d5c:	003d8e06 	br	7398 <_dtoa_r+0x2c0>
    7d60:	d9000517 	ldw	r4,20(sp)
    7d64:	00124b80 	call	124b8 <__floatsidf>
    7d68:	100d883a 	mov	r6,r2
    7d6c:	180f883a 	mov	r7,r3
    7d70:	a009883a 	mov	r4,r20
    7d74:	880b883a 	mov	r5,r17
    7d78:	00111cc0 	call	111cc <__eqdf2>
    7d7c:	103d7126 	beq	r2,zero,7344 <_dtoa_r+0x26c>
    7d80:	d9c00517 	ldw	r7,20(sp)
    7d84:	39ffffc4 	addi	r7,r7,-1
    7d88:	d9c00515 	stw	r7,20(sp)
    7d8c:	003d6d06 	br	7344 <_dtoa_r+0x26c>
    7d90:	dd400a17 	ldw	r21,40(sp)
    7d94:	dd000817 	ldw	r20,32(sp)
    7d98:	0023883a 	mov	r17,zero
    7d9c:	003f4806 	br	7ac0 <_dtoa_r+0x9e8>
    7da0:	10e3c83a 	sub	r17,r2,r3
    7da4:	9448983a 	sll	r4,r18,r17
    7da8:	003d3206 	br	7274 <_dtoa_r+0x19c>
    7dac:	d8000e15 	stw	zero,56(sp)
    7db0:	003d7506 	br	7388 <_dtoa_r+0x2b0>
    7db4:	b005883a 	mov	r2,r22
    7db8:	003f4506 	br	7ad0 <_dtoa_r+0x9f8>
    7dbc:	dc000915 	stw	r16,36(sp)
    7dc0:	d9800a17 	ldw	r6,40(sp)
    7dc4:	d9400917 	ldw	r5,36(sp)
    7dc8:	e009883a 	mov	r4,fp
    7dcc:	000a79c0 	call	a79c <__pow5mult>
    7dd0:	1021883a 	mov	r16,r2
    7dd4:	003f5a06 	br	7b40 <_dtoa_r+0xa68>
    7dd8:	01c00044 	movi	r7,1
    7ddc:	d9c00b15 	stw	r7,44(sp)
    7de0:	d8802217 	ldw	r2,136(sp)
    7de4:	0081280e 	bge	zero,r2,8288 <_dtoa_r+0x11b0>
    7de8:	100d883a 	mov	r6,r2
    7dec:	1021883a 	mov	r16,r2
    7df0:	d8800c15 	stw	r2,48(sp)
    7df4:	d8800615 	stw	r2,24(sp)
    7df8:	003d8806 	br	741c <_dtoa_r+0x344>
    7dfc:	d8800617 	ldw	r2,24(sp)
    7e00:	00be9b16 	blt	zero,r2,7870 <_dtoa_r+0x798>
    7e04:	10010f1e 	bne	r2,zero,8244 <_dtoa_r+0x116c>
    7e08:	880b883a 	mov	r5,r17
    7e0c:	000d883a 	mov	r6,zero
    7e10:	01d00534 	movhi	r7,16404
    7e14:	8009883a 	mov	r4,r16
    7e18:	00114240 	call	11424 <__muldf3>
    7e1c:	900d883a 	mov	r6,r18
    7e20:	980f883a 	mov	r7,r19
    7e24:	1009883a 	mov	r4,r2
    7e28:	180b883a 	mov	r5,r3
    7e2c:	00112540 	call	11254 <__gedf2>
    7e30:	002b883a 	mov	r21,zero
    7e34:	0023883a 	mov	r17,zero
    7e38:	1000bf16 	blt	r2,zero,8138 <_dtoa_r+0x1060>
    7e3c:	d9802217 	ldw	r6,136(sp)
    7e40:	ddc00717 	ldw	r23,28(sp)
    7e44:	018c303a 	nor	r6,zero,r6
    7e48:	d9800515 	stw	r6,20(sp)
    7e4c:	a80b883a 	mov	r5,r21
    7e50:	e009883a 	mov	r4,fp
    7e54:	000a2040 	call	a204 <_Bfree>
    7e58:	883e4926 	beq	r17,zero,7780 <_dtoa_r+0x6a8>
    7e5c:	003fad06 	br	7d14 <_dtoa_r+0xc3c>
    7e60:	d9c01117 	ldw	r7,68(sp)
    7e64:	3801bc26 	beq	r7,zero,8558 <_dtoa_r+0x1480>
    7e68:	10810cc4 	addi	r2,r2,1075
    7e6c:	dd400a17 	ldw	r21,40(sp)
    7e70:	dd000817 	ldw	r20,32(sp)
    7e74:	003f0a06 	br	7aa0 <_dtoa_r+0x9c8>
    7e78:	00800704 	movi	r2,28
    7e7c:	d9000817 	ldw	r4,32(sp)
    7e80:	a0a9883a 	add	r20,r20,r2
    7e84:	b0ad883a 	add	r22,r22,r2
    7e88:	2089883a 	add	r4,r4,r2
    7e8c:	d9000815 	stw	r4,32(sp)
    7e90:	003f5106 	br	7bd8 <_dtoa_r+0xb00>
    7e94:	d8c00317 	ldw	r3,12(sp)
    7e98:	b8c1fc0e 	bge	r23,r3,868c <_dtoa_r+0x15b4>
    7e9c:	0027883a 	mov	r19,zero
    7ea0:	b805883a 	mov	r2,r23
    7ea4:	003f3e06 	br	7ba0 <_dtoa_r+0xac8>
    7ea8:	880b883a 	mov	r5,r17
    7eac:	e009883a 	mov	r4,fp
    7eb0:	000f883a 	mov	r7,zero
    7eb4:	01800284 	movi	r6,10
    7eb8:	000a22c0 	call	a22c <__multadd>
    7ebc:	d9000c17 	ldw	r4,48(sp)
    7ec0:	1023883a 	mov	r17,r2
    7ec4:	0102040e 	bge	zero,r4,86d8 <_dtoa_r+0x1600>
    7ec8:	d9000615 	stw	r4,24(sp)
    7ecc:	0500050e 	bge	zero,r20,7ee4 <_dtoa_r+0xe0c>
    7ed0:	880b883a 	mov	r5,r17
    7ed4:	a00d883a 	mov	r6,r20
    7ed8:	e009883a 	mov	r4,fp
    7edc:	000a8dc0 	call	a8dc <__lshift>
    7ee0:	1023883a 	mov	r17,r2
    7ee4:	9801241e 	bne	r19,zero,8378 <_dtoa_r+0x12a0>
    7ee8:	8829883a 	mov	r20,r17
    7eec:	d9000617 	ldw	r4,24(sp)
    7ef0:	dcc00717 	ldw	r19,28(sp)
    7ef4:	9480004c 	andi	r18,r18,1
    7ef8:	20bfffc4 	addi	r2,r4,-1
    7efc:	9885883a 	add	r2,r19,r2
    7f00:	d8800415 	stw	r2,16(sp)
    7f04:	dc800615 	stw	r18,24(sp)
    7f08:	a80b883a 	mov	r5,r21
    7f0c:	8009883a 	mov	r4,r16
    7f10:	0006ed80 	call	6ed8 <quorem>
    7f14:	880b883a 	mov	r5,r17
    7f18:	8009883a 	mov	r4,r16
    7f1c:	102f883a 	mov	r23,r2
    7f20:	000aa240 	call	aa24 <__mcmp>
    7f24:	a80b883a 	mov	r5,r21
    7f28:	a00d883a 	mov	r6,r20
    7f2c:	e009883a 	mov	r4,fp
    7f30:	102d883a 	mov	r22,r2
    7f34:	000aa840 	call	aa84 <__mdiff>
    7f38:	1007883a 	mov	r3,r2
    7f3c:	10800317 	ldw	r2,12(r2)
    7f40:	bc800c04 	addi	r18,r23,48
    7f44:	180b883a 	mov	r5,r3
    7f48:	10004e1e 	bne	r2,zero,8084 <_dtoa_r+0xfac>
    7f4c:	8009883a 	mov	r4,r16
    7f50:	d8c01615 	stw	r3,88(sp)
    7f54:	000aa240 	call	aa24 <__mcmp>
    7f58:	d8c01617 	ldw	r3,88(sp)
    7f5c:	e009883a 	mov	r4,fp
    7f60:	d8801615 	stw	r2,88(sp)
    7f64:	180b883a 	mov	r5,r3
    7f68:	000a2040 	call	a204 <_Bfree>
    7f6c:	d8801617 	ldw	r2,88(sp)
    7f70:	1000041e 	bne	r2,zero,7f84 <_dtoa_r+0xeac>
    7f74:	d9800317 	ldw	r6,12(sp)
    7f78:	3000021e 	bne	r6,zero,7f84 <_dtoa_r+0xeac>
    7f7c:	d8c00617 	ldw	r3,24(sp)
    7f80:	18003726 	beq	r3,zero,8060 <_dtoa_r+0xf88>
    7f84:	b0002016 	blt	r22,zero,8008 <_dtoa_r+0xf30>
    7f88:	b000041e 	bne	r22,zero,7f9c <_dtoa_r+0xec4>
    7f8c:	d9000317 	ldw	r4,12(sp)
    7f90:	2000021e 	bne	r4,zero,7f9c <_dtoa_r+0xec4>
    7f94:	d8c00617 	ldw	r3,24(sp)
    7f98:	18001b26 	beq	r3,zero,8008 <_dtoa_r+0xf30>
    7f9c:	00810716 	blt	zero,r2,83bc <_dtoa_r+0x12e4>
    7fa0:	d8c00417 	ldw	r3,16(sp)
    7fa4:	9d800044 	addi	r22,r19,1
    7fa8:	9c800005 	stb	r18,0(r19)
    7fac:	b02f883a 	mov	r23,r22
    7fb0:	98c10626 	beq	r19,r3,83cc <_dtoa_r+0x12f4>
    7fb4:	800b883a 	mov	r5,r16
    7fb8:	000f883a 	mov	r7,zero
    7fbc:	01800284 	movi	r6,10
    7fc0:	e009883a 	mov	r4,fp
    7fc4:	000a22c0 	call	a22c <__multadd>
    7fc8:	1021883a 	mov	r16,r2
    7fcc:	000f883a 	mov	r7,zero
    7fd0:	01800284 	movi	r6,10
    7fd4:	880b883a 	mov	r5,r17
    7fd8:	e009883a 	mov	r4,fp
    7fdc:	8d002526 	beq	r17,r20,8074 <_dtoa_r+0xf9c>
    7fe0:	000a22c0 	call	a22c <__multadd>
    7fe4:	a00b883a 	mov	r5,r20
    7fe8:	000f883a 	mov	r7,zero
    7fec:	01800284 	movi	r6,10
    7ff0:	e009883a 	mov	r4,fp
    7ff4:	1023883a 	mov	r17,r2
    7ff8:	000a22c0 	call	a22c <__multadd>
    7ffc:	1029883a 	mov	r20,r2
    8000:	b027883a 	mov	r19,r22
    8004:	003fc006 	br	7f08 <_dtoa_r+0xe30>
    8008:	9011883a 	mov	r8,r18
    800c:	00800e0e 	bge	zero,r2,8048 <_dtoa_r+0xf70>
    8010:	800b883a 	mov	r5,r16
    8014:	01800044 	movi	r6,1
    8018:	e009883a 	mov	r4,fp
    801c:	da001715 	stw	r8,92(sp)
    8020:	000a8dc0 	call	a8dc <__lshift>
    8024:	a80b883a 	mov	r5,r21
    8028:	1009883a 	mov	r4,r2
    802c:	1021883a 	mov	r16,r2
    8030:	000aa240 	call	aa24 <__mcmp>
    8034:	da001717 	ldw	r8,92(sp)
    8038:	0081960e 	bge	zero,r2,8694 <_dtoa_r+0x15bc>
    803c:	00800e44 	movi	r2,57
    8040:	40817026 	beq	r8,r2,8604 <_dtoa_r+0x152c>
    8044:	ba000c44 	addi	r8,r23,49
    8048:	8825883a 	mov	r18,r17
    804c:	9dc00044 	addi	r23,r19,1
    8050:	9a000005 	stb	r8,0(r19)
    8054:	a023883a 	mov	r17,r20
    8058:	dc000915 	stw	r16,36(sp)
    805c:	003f2406 	br	7cf0 <_dtoa_r+0xc18>
    8060:	00800e44 	movi	r2,57
    8064:	9011883a 	mov	r8,r18
    8068:	90816626 	beq	r18,r2,8604 <_dtoa_r+0x152c>
    806c:	05bff516 	blt	zero,r22,8044 <_dtoa_r+0xf6c>
    8070:	003ff506 	br	8048 <_dtoa_r+0xf70>
    8074:	000a22c0 	call	a22c <__multadd>
    8078:	1023883a 	mov	r17,r2
    807c:	1029883a 	mov	r20,r2
    8080:	003fdf06 	br	8000 <_dtoa_r+0xf28>
    8084:	e009883a 	mov	r4,fp
    8088:	000a2040 	call	a204 <_Bfree>
    808c:	00800044 	movi	r2,1
    8090:	003fbc06 	br	7f84 <_dtoa_r+0xeac>
    8094:	a80b883a 	mov	r5,r21
    8098:	8009883a 	mov	r4,r16
    809c:	000aa240 	call	aa24 <__mcmp>
    80a0:	103edb0e 	bge	r2,zero,7c10 <_dtoa_r+0xb38>
    80a4:	800b883a 	mov	r5,r16
    80a8:	000f883a 	mov	r7,zero
    80ac:	01800284 	movi	r6,10
    80b0:	e009883a 	mov	r4,fp
    80b4:	000a22c0 	call	a22c <__multadd>
    80b8:	1021883a 	mov	r16,r2
    80bc:	d8800517 	ldw	r2,20(sp)
    80c0:	d8c00b17 	ldw	r3,44(sp)
    80c4:	10bfffc4 	addi	r2,r2,-1
    80c8:	d8800515 	stw	r2,20(sp)
    80cc:	183f761e 	bne	r3,zero,7ea8 <_dtoa_r+0xdd0>
    80d0:	d9000c17 	ldw	r4,48(sp)
    80d4:	0101730e 	bge	zero,r4,86a4 <_dtoa_r+0x15cc>
    80d8:	d9000615 	stw	r4,24(sp)
    80dc:	003ed006 	br	7c20 <_dtoa_r+0xb48>
    80e0:	00800084 	movi	r2,2
    80e4:	3081861e 	bne	r6,r2,8700 <_dtoa_r+0x1628>
    80e8:	d8000b15 	stw	zero,44(sp)
    80ec:	003f3c06 	br	7de0 <_dtoa_r+0xd08>
    80f0:	dc000917 	ldw	r16,36(sp)
    80f4:	003e9206 	br	7b40 <_dtoa_r+0xa68>
    80f8:	d9c00317 	ldw	r7,12(sp)
    80fc:	00800084 	movi	r2,2
    8100:	11fec50e 	bge	r2,r7,7c18 <_dtoa_r+0xb40>
    8104:	d9000617 	ldw	r4,24(sp)
    8108:	20013c1e 	bne	r4,zero,85fc <_dtoa_r+0x1524>
    810c:	a80b883a 	mov	r5,r21
    8110:	000f883a 	mov	r7,zero
    8114:	01800144 	movi	r6,5
    8118:	e009883a 	mov	r4,fp
    811c:	000a22c0 	call	a22c <__multadd>
    8120:	100b883a 	mov	r5,r2
    8124:	8009883a 	mov	r4,r16
    8128:	102b883a 	mov	r21,r2
    812c:	000aa240 	call	aa24 <__mcmp>
    8130:	dc000915 	stw	r16,36(sp)
    8134:	00bf410e 	bge	zero,r2,7e3c <_dtoa_r+0xd64>
    8138:	d9c00717 	ldw	r7,28(sp)
    813c:	00800c44 	movi	r2,49
    8140:	38800005 	stb	r2,0(r7)
    8144:	d8800517 	ldw	r2,20(sp)
    8148:	3dc00044 	addi	r23,r7,1
    814c:	10800044 	addi	r2,r2,1
    8150:	d8800515 	stw	r2,20(sp)
    8154:	003f3d06 	br	7e4c <_dtoa_r+0xd74>
    8158:	d9800517 	ldw	r6,20(sp)
    815c:	d9c00717 	ldw	r7,28(sp)
    8160:	00800c44 	movi	r2,49
    8164:	31800044 	addi	r6,r6,1
    8168:	d9800515 	stw	r6,20(sp)
    816c:	38800005 	stb	r2,0(r7)
    8170:	003edf06 	br	7cf0 <_dtoa_r+0xc18>
    8174:	d8000b15 	stw	zero,44(sp)
    8178:	003c9f06 	br	73f8 <_dtoa_r+0x320>
    817c:	903e7e1e 	bne	r18,zero,7b78 <_dtoa_r+0xaa0>
    8180:	00800434 	movhi	r2,16
    8184:	10bfffc4 	addi	r2,r2,-1
    8188:	9884703a 	and	r2,r19,r2
    818c:	1000ea1e 	bne	r2,zero,8538 <_dtoa_r+0x1460>
    8190:	9cdffc2c 	andhi	r19,r19,32752
    8194:	9800e826 	beq	r19,zero,8538 <_dtoa_r+0x1460>
    8198:	d9c00817 	ldw	r7,32(sp)
    819c:	b5800044 	addi	r22,r22,1
    81a0:	04c00044 	movi	r19,1
    81a4:	39c00044 	addi	r7,r7,1
    81a8:	d9c00815 	stw	r7,32(sp)
    81ac:	d8800d17 	ldw	r2,52(sp)
    81b0:	103e721e 	bne	r2,zero,7b7c <_dtoa_r+0xaa4>
    81b4:	00800044 	movi	r2,1
    81b8:	003e7906 	br	7ba0 <_dtoa_r+0xac8>
    81bc:	8009883a 	mov	r4,r16
    81c0:	00124b80 	call	124b8 <__floatsidf>
    81c4:	d9800f17 	ldw	r6,60(sp)
    81c8:	d9c01017 	ldw	r7,64(sp)
    81cc:	1009883a 	mov	r4,r2
    81d0:	180b883a 	mov	r5,r3
    81d4:	00114240 	call	11424 <__muldf3>
    81d8:	000d883a 	mov	r6,zero
    81dc:	01d00734 	movhi	r7,16412
    81e0:	1009883a 	mov	r4,r2
    81e4:	180b883a 	mov	r5,r3
    81e8:	00100380 	call	10038 <__adddf3>
    81ec:	047f3034 	movhi	r17,64704
    81f0:	1021883a 	mov	r16,r2
    81f4:	1c63883a 	add	r17,r3,r17
    81f8:	d9000f17 	ldw	r4,60(sp)
    81fc:	d9401017 	ldw	r5,64(sp)
    8200:	000d883a 	mov	r6,zero
    8204:	01d00534 	movhi	r7,16404
    8208:	0011b3c0 	call	11b3c <__subdf3>
    820c:	800d883a 	mov	r6,r16
    8210:	880f883a 	mov	r7,r17
    8214:	1009883a 	mov	r4,r2
    8218:	180b883a 	mov	r5,r3
    821c:	102b883a 	mov	r21,r2
    8220:	1829883a 	mov	r20,r3
    8224:	00112540 	call	11254 <__gedf2>
    8228:	00806c16 	blt	zero,r2,83dc <_dtoa_r+0x1304>
    822c:	89e0003c 	xorhi	r7,r17,32768
    8230:	800d883a 	mov	r6,r16
    8234:	a809883a 	mov	r4,r21
    8238:	a00b883a 	mov	r5,r20
    823c:	00113300 	call	11330 <__ledf2>
    8240:	103d7e0e 	bge	r2,zero,783c <_dtoa_r+0x764>
    8244:	002b883a 	mov	r21,zero
    8248:	0023883a 	mov	r17,zero
    824c:	003efb06 	br	7e3c <_dtoa_r+0xd64>
    8250:	d8800717 	ldw	r2,28(sp)
    8254:	003bd006 	br	7198 <_dtoa_r+0xc0>
    8258:	d9000a17 	ldw	r4,40(sp)
    825c:	d9800d17 	ldw	r6,52(sp)
    8260:	dd400a15 	stw	r21,40(sp)
    8264:	a905c83a 	sub	r2,r21,r4
    8268:	308d883a 	add	r6,r6,r2
    826c:	d9800d15 	stw	r6,52(sp)
    8270:	002b883a 	mov	r21,zero
    8274:	003e0606 	br	7a90 <_dtoa_r+0x9b8>
    8278:	9023883a 	mov	r17,r18
    827c:	9829883a 	mov	r20,r19
    8280:	04000084 	movi	r16,2
    8284:	003c9206 	br	74d0 <_dtoa_r+0x3f8>
    8288:	04000044 	movi	r16,1
    828c:	dc000c15 	stw	r16,48(sp)
    8290:	dc000615 	stw	r16,24(sp)
    8294:	dc002215 	stw	r16,136(sp)
    8298:	e0001115 	stw	zero,68(fp)
    829c:	000b883a 	mov	r5,zero
    82a0:	003c6906 	br	7448 <_dtoa_r+0x370>
    82a4:	3021883a 	mov	r16,r6
    82a8:	003ffb06 	br	8298 <_dtoa_r+0x11c0>
    82ac:	1000021e 	bne	r2,zero,82b8 <_dtoa_r+0x11e0>
    82b0:	4200004c 	andi	r8,r8,1
    82b4:	403e7d1e 	bne	r8,zero,7cac <_dtoa_r+0xbd4>
    82b8:	01000c04 	movi	r4,48
    82bc:	00000106 	br	82c4 <_dtoa_r+0x11ec>
    82c0:	102f883a 	mov	r23,r2
    82c4:	b8bfffc4 	addi	r2,r23,-1
    82c8:	10c00007 	ldb	r3,0(r2)
    82cc:	193ffc26 	beq	r3,r4,82c0 <_dtoa_r+0x11e8>
    82d0:	003e8706 	br	7cf0 <_dtoa_r+0xc18>
    82d4:	d8800517 	ldw	r2,20(sp)
    82d8:	00a3c83a 	sub	r17,zero,r2
    82dc:	8800a426 	beq	r17,zero,8570 <_dtoa_r+0x1498>
    82e0:	888003cc 	andi	r2,r17,15
    82e4:	100490fa 	slli	r2,r2,3
    82e8:	00c000b4 	movhi	r3,2
    82ec:	18fd9004 	addi	r3,r3,-2496
    82f0:	1885883a 	add	r2,r3,r2
    82f4:	11800017 	ldw	r6,0(r2)
    82f8:	11c00117 	ldw	r7,4(r2)
    82fc:	9009883a 	mov	r4,r18
    8300:	980b883a 	mov	r5,r19
    8304:	8823d13a 	srai	r17,r17,4
    8308:	00114240 	call	11424 <__muldf3>
    830c:	d8800f15 	stw	r2,60(sp)
    8310:	d8c01015 	stw	r3,64(sp)
    8314:	8800e826 	beq	r17,zero,86b8 <_dtoa_r+0x15e0>
    8318:	050000b4 	movhi	r20,2
    831c:	a53d8604 	addi	r20,r20,-2536
    8320:	04000084 	movi	r16,2
    8324:	8980004c 	andi	r6,r17,1
    8328:	1009883a 	mov	r4,r2
    832c:	8823d07a 	srai	r17,r17,1
    8330:	180b883a 	mov	r5,r3
    8334:	30000426 	beq	r6,zero,8348 <_dtoa_r+0x1270>
    8338:	a1800017 	ldw	r6,0(r20)
    833c:	a1c00117 	ldw	r7,4(r20)
    8340:	84000044 	addi	r16,r16,1
    8344:	00114240 	call	11424 <__muldf3>
    8348:	a5000204 	addi	r20,r20,8
    834c:	883ff51e 	bne	r17,zero,8324 <_dtoa_r+0x124c>
    8350:	d8800f15 	stw	r2,60(sp)
    8354:	d8c01015 	stw	r3,64(sp)
    8358:	003c7606 	br	7534 <_dtoa_r+0x45c>
    835c:	00c00c04 	movi	r3,48
    8360:	10c00005 	stb	r3,0(r2)
    8364:	d8c00517 	ldw	r3,20(sp)
    8368:	bd3fffc3 	ldbu	r20,-1(r23)
    836c:	18c00044 	addi	r3,r3,1
    8370:	d8c00515 	stw	r3,20(sp)
    8374:	003db906 	br	7a5c <_dtoa_r+0x984>
    8378:	89400117 	ldw	r5,4(r17)
    837c:	e009883a 	mov	r4,fp
    8380:	000a15c0 	call	a15c <_Balloc>
    8384:	89800417 	ldw	r6,16(r17)
    8388:	89400304 	addi	r5,r17,12
    838c:	11000304 	addi	r4,r2,12
    8390:	31800084 	addi	r6,r6,2
    8394:	318d883a 	add	r6,r6,r6
    8398:	318d883a 	add	r6,r6,r6
    839c:	1027883a 	mov	r19,r2
    83a0:	0009eec0 	call	9eec <memcpy>
    83a4:	01800044 	movi	r6,1
    83a8:	980b883a 	mov	r5,r19
    83ac:	e009883a 	mov	r4,fp
    83b0:	000a8dc0 	call	a8dc <__lshift>
    83b4:	1029883a 	mov	r20,r2
    83b8:	003ecc06 	br	7eec <_dtoa_r+0xe14>
    83bc:	00800e44 	movi	r2,57
    83c0:	90809026 	beq	r18,r2,8604 <_dtoa_r+0x152c>
    83c4:	92000044 	addi	r8,r18,1
    83c8:	003f1f06 	br	8048 <_dtoa_r+0xf70>
    83cc:	9011883a 	mov	r8,r18
    83d0:	8825883a 	mov	r18,r17
    83d4:	a023883a 	mov	r17,r20
    83d8:	003e2906 	br	7c80 <_dtoa_r+0xba8>
    83dc:	002b883a 	mov	r21,zero
    83e0:	0023883a 	mov	r17,zero
    83e4:	003f5406 	br	8138 <_dtoa_r+0x1060>
    83e8:	61bfffc4 	addi	r6,r12,-1
    83ec:	300490fa 	slli	r2,r6,3
    83f0:	00c000b4 	movhi	r3,2
    83f4:	18fd9004 	addi	r3,r3,-2496
    83f8:	1885883a 	add	r2,r3,r2
    83fc:	11000017 	ldw	r4,0(r2)
    8400:	11400117 	ldw	r5,4(r2)
    8404:	d8800717 	ldw	r2,28(sp)
    8408:	880f883a 	mov	r7,r17
    840c:	d9801215 	stw	r6,72(sp)
    8410:	800d883a 	mov	r6,r16
    8414:	db001615 	stw	r12,88(sp)
    8418:	15c00044 	addi	r23,r2,1
    841c:	00114240 	call	11424 <__muldf3>
    8420:	d9401017 	ldw	r5,64(sp)
    8424:	d9000f17 	ldw	r4,60(sp)
    8428:	d8c01515 	stw	r3,84(sp)
    842c:	d8801415 	stw	r2,80(sp)
    8430:	00124380 	call	12438 <__fixdfsi>
    8434:	1009883a 	mov	r4,r2
    8438:	1021883a 	mov	r16,r2
    843c:	00124b80 	call	124b8 <__floatsidf>
    8440:	d9000f17 	ldw	r4,60(sp)
    8444:	d9401017 	ldw	r5,64(sp)
    8448:	100d883a 	mov	r6,r2
    844c:	180f883a 	mov	r7,r3
    8450:	0011b3c0 	call	11b3c <__subdf3>
    8454:	1829883a 	mov	r20,r3
    8458:	d8c00717 	ldw	r3,28(sp)
    845c:	84000c04 	addi	r16,r16,48
    8460:	1023883a 	mov	r17,r2
    8464:	1c000005 	stb	r16,0(r3)
    8468:	db001617 	ldw	r12,88(sp)
    846c:	00800044 	movi	r2,1
    8470:	60802226 	beq	r12,r2,84fc <_dtoa_r+0x1424>
    8474:	d9c00717 	ldw	r7,28(sp)
    8478:	8805883a 	mov	r2,r17
    847c:	b82b883a 	mov	r21,r23
    8480:	3b19883a 	add	r12,r7,r12
    8484:	6023883a 	mov	r17,r12
    8488:	a007883a 	mov	r3,r20
    848c:	dc800f15 	stw	r18,60(sp)
    8490:	000d883a 	mov	r6,zero
    8494:	01d00934 	movhi	r7,16420
    8498:	1009883a 	mov	r4,r2
    849c:	180b883a 	mov	r5,r3
    84a0:	00114240 	call	11424 <__muldf3>
    84a4:	180b883a 	mov	r5,r3
    84a8:	1009883a 	mov	r4,r2
    84ac:	1829883a 	mov	r20,r3
    84b0:	1025883a 	mov	r18,r2
    84b4:	00124380 	call	12438 <__fixdfsi>
    84b8:	1009883a 	mov	r4,r2
    84bc:	1021883a 	mov	r16,r2
    84c0:	00124b80 	call	124b8 <__floatsidf>
    84c4:	100d883a 	mov	r6,r2
    84c8:	180f883a 	mov	r7,r3
    84cc:	9009883a 	mov	r4,r18
    84d0:	a00b883a 	mov	r5,r20
    84d4:	84000c04 	addi	r16,r16,48
    84d8:	0011b3c0 	call	11b3c <__subdf3>
    84dc:	ad400044 	addi	r21,r21,1
    84e0:	ac3fffc5 	stb	r16,-1(r21)
    84e4:	ac7fea1e 	bne	r21,r17,8490 <_dtoa_r+0x13b8>
    84e8:	1023883a 	mov	r17,r2
    84ec:	d8801217 	ldw	r2,72(sp)
    84f0:	dc800f17 	ldw	r18,60(sp)
    84f4:	1829883a 	mov	r20,r3
    84f8:	b8af883a 	add	r23,r23,r2
    84fc:	d9001417 	ldw	r4,80(sp)
    8500:	d9401517 	ldw	r5,84(sp)
    8504:	000d883a 	mov	r6,zero
    8508:	01cff834 	movhi	r7,16352
    850c:	00100380 	call	10038 <__adddf3>
    8510:	880d883a 	mov	r6,r17
    8514:	a00f883a 	mov	r7,r20
    8518:	1009883a 	mov	r4,r2
    851c:	180b883a 	mov	r5,r3
    8520:	00113300 	call	11330 <__ledf2>
    8524:	10003e0e 	bge	r2,zero,8620 <_dtoa_r+0x1548>
    8528:	d9001317 	ldw	r4,76(sp)
    852c:	bd3fffc3 	ldbu	r20,-1(r23)
    8530:	d9000515 	stw	r4,20(sp)
    8534:	003d3b06 	br	7a24 <_dtoa_r+0x94c>
    8538:	0027883a 	mov	r19,zero
    853c:	003f1b06 	br	81ac <_dtoa_r+0x10d4>
    8540:	d8800817 	ldw	r2,32(sp)
    8544:	11e9c83a 	sub	r20,r2,r7
    8548:	0005883a 	mov	r2,zero
    854c:	003d5406 	br	7aa0 <_dtoa_r+0x9c8>
    8550:	00800044 	movi	r2,1
    8554:	003dc706 	br	7c74 <_dtoa_r+0xb9c>
    8558:	d8c00217 	ldw	r3,8(sp)
    855c:	00800d84 	movi	r2,54
    8560:	dd400a17 	ldw	r21,40(sp)
    8564:	10c5c83a 	sub	r2,r2,r3
    8568:	dd000817 	ldw	r20,32(sp)
    856c:	003d4c06 	br	7aa0 <_dtoa_r+0x9c8>
    8570:	dc800f15 	stw	r18,60(sp)
    8574:	dcc01015 	stw	r19,64(sp)
    8578:	04000084 	movi	r16,2
    857c:	003bed06 	br	7534 <_dtoa_r+0x45c>
    8580:	d9000617 	ldw	r4,24(sp)
    8584:	203f0d26 	beq	r4,zero,81bc <_dtoa_r+0x10e4>
    8588:	d9800c17 	ldw	r6,48(sp)
    858c:	01bcab0e 	bge	zero,r6,783c <_dtoa_r+0x764>
    8590:	d9401017 	ldw	r5,64(sp)
    8594:	d9000f17 	ldw	r4,60(sp)
    8598:	000d883a 	mov	r6,zero
    859c:	01d00934 	movhi	r7,16420
    85a0:	00114240 	call	11424 <__muldf3>
    85a4:	81000044 	addi	r4,r16,1
    85a8:	d8800f15 	stw	r2,60(sp)
    85ac:	d8c01015 	stw	r3,64(sp)
    85b0:	00124b80 	call	124b8 <__floatsidf>
    85b4:	d9800f17 	ldw	r6,60(sp)
    85b8:	d9c01017 	ldw	r7,64(sp)
    85bc:	1009883a 	mov	r4,r2
    85c0:	180b883a 	mov	r5,r3
    85c4:	00114240 	call	11424 <__muldf3>
    85c8:	01d00734 	movhi	r7,16412
    85cc:	000d883a 	mov	r6,zero
    85d0:	1009883a 	mov	r4,r2
    85d4:	180b883a 	mov	r5,r3
    85d8:	00100380 	call	10038 <__adddf3>
    85dc:	d9c00517 	ldw	r7,20(sp)
    85e0:	047f3034 	movhi	r17,64704
    85e4:	1021883a 	mov	r16,r2
    85e8:	39ffffc4 	addi	r7,r7,-1
    85ec:	d9c01315 	stw	r7,76(sp)
    85f0:	1c63883a 	add	r17,r3,r17
    85f4:	db000c17 	ldw	r12,48(sp)
    85f8:	003bea06 	br	75a4 <_dtoa_r+0x4cc>
    85fc:	dc000915 	stw	r16,36(sp)
    8600:	003e0e06 	br	7e3c <_dtoa_r+0xd64>
    8604:	01000e44 	movi	r4,57
    8608:	8825883a 	mov	r18,r17
    860c:	9dc00044 	addi	r23,r19,1
    8610:	99000005 	stb	r4,0(r19)
    8614:	a023883a 	mov	r17,r20
    8618:	dc000915 	stw	r16,36(sp)
    861c:	003da406 	br	7cb0 <_dtoa_r+0xbd8>
    8620:	d9801417 	ldw	r6,80(sp)
    8624:	d9c01517 	ldw	r7,84(sp)
    8628:	0009883a 	mov	r4,zero
    862c:	014ff834 	movhi	r5,16352
    8630:	0011b3c0 	call	11b3c <__subdf3>
    8634:	880d883a 	mov	r6,r17
    8638:	a00f883a 	mov	r7,r20
    863c:	1009883a 	mov	r4,r2
    8640:	180b883a 	mov	r5,r3
    8644:	00112540 	call	11254 <__gedf2>
    8648:	00bc7c0e 	bge	zero,r2,783c <_dtoa_r+0x764>
    864c:	01000c04 	movi	r4,48
    8650:	00000106 	br	8658 <_dtoa_r+0x1580>
    8654:	102f883a 	mov	r23,r2
    8658:	b8bfffc4 	addi	r2,r23,-1
    865c:	10c00007 	ldb	r3,0(r2)
    8660:	193ffc26 	beq	r3,r4,8654 <_dtoa_r+0x157c>
    8664:	d9801317 	ldw	r6,76(sp)
    8668:	d9800515 	stw	r6,20(sp)
    866c:	003c4406 	br	7780 <_dtoa_r+0x6a8>
    8670:	d9801317 	ldw	r6,76(sp)
    8674:	d9800515 	stw	r6,20(sp)
    8678:	003cea06 	br	7a24 <_dtoa_r+0x94c>
    867c:	dd800f17 	ldw	r22,60(sp)
    8680:	dcc01017 	ldw	r19,64(sp)
    8684:	dc801217 	ldw	r18,72(sp)
    8688:	003c6c06 	br	783c <_dtoa_r+0x764>
    868c:	903e031e 	bne	r18,zero,7e9c <_dtoa_r+0xdc4>
    8690:	003ebb06 	br	8180 <_dtoa_r+0x10a8>
    8694:	103e6c1e 	bne	r2,zero,8048 <_dtoa_r+0xf70>
    8698:	4080004c 	andi	r2,r8,1
    869c:	103e6a26 	beq	r2,zero,8048 <_dtoa_r+0xf70>
    86a0:	003e6606 	br	803c <_dtoa_r+0xf64>
    86a4:	d8c00317 	ldw	r3,12(sp)
    86a8:	00800084 	movi	r2,2
    86ac:	10c02916 	blt	r2,r3,8754 <_dtoa_r+0x167c>
    86b0:	d9000c17 	ldw	r4,48(sp)
    86b4:	003e8806 	br	80d8 <_dtoa_r+0x1000>
    86b8:	04000084 	movi	r16,2
    86bc:	003b9d06 	br	7534 <_dtoa_r+0x45c>
    86c0:	d9001317 	ldw	r4,76(sp)
    86c4:	d9000515 	stw	r4,20(sp)
    86c8:	003cd606 	br	7a24 <_dtoa_r+0x94c>
    86cc:	d8801317 	ldw	r2,76(sp)
    86d0:	d8800515 	stw	r2,20(sp)
    86d4:	003c2a06 	br	7780 <_dtoa_r+0x6a8>
    86d8:	d9800317 	ldw	r6,12(sp)
    86dc:	00800084 	movi	r2,2
    86e0:	11801516 	blt	r2,r6,8738 <_dtoa_r+0x1660>
    86e4:	d9c00c17 	ldw	r7,48(sp)
    86e8:	d9c00615 	stw	r7,24(sp)
    86ec:	003df706 	br	7ecc <_dtoa_r+0xdf4>
    86f0:	193d3926 	beq	r3,r4,7bd8 <_dtoa_r+0xb00>
    86f4:	00c00f04 	movi	r3,60
    86f8:	1885c83a 	sub	r2,r3,r2
    86fc:	003ddf06 	br	7e7c <_dtoa_r+0xda4>
    8700:	e009883a 	mov	r4,fp
    8704:	e0001115 	stw	zero,68(fp)
    8708:	000b883a 	mov	r5,zero
    870c:	000a15c0 	call	a15c <_Balloc>
    8710:	d8800715 	stw	r2,28(sp)
    8714:	d8c00717 	ldw	r3,28(sp)
    8718:	00bfffc4 	movi	r2,-1
    871c:	01000044 	movi	r4,1
    8720:	d8800c15 	stw	r2,48(sp)
    8724:	e0c01015 	stw	r3,64(fp)
    8728:	d9000b15 	stw	r4,44(sp)
    872c:	d8800615 	stw	r2,24(sp)
    8730:	d8002215 	stw	zero,136(sp)
    8734:	003c4106 	br	783c <_dtoa_r+0x764>
    8738:	d8c00c17 	ldw	r3,48(sp)
    873c:	d8c00615 	stw	r3,24(sp)
    8740:	003e7006 	br	8104 <_dtoa_r+0x102c>
    8744:	04400044 	movi	r17,1
    8748:	003b2006 	br	73cc <_dtoa_r+0x2f4>
    874c:	000b883a 	mov	r5,zero
    8750:	003b3d06 	br	7448 <_dtoa_r+0x370>
    8754:	d8800c17 	ldw	r2,48(sp)
    8758:	d8800615 	stw	r2,24(sp)
    875c:	003e6906 	br	8104 <_dtoa_r+0x102c>

00008760 <__sflush_r>:
    8760:	2880030b 	ldhu	r2,12(r5)
    8764:	defffb04 	addi	sp,sp,-20
    8768:	dcc00315 	stw	r19,12(sp)
    876c:	dc400115 	stw	r17,4(sp)
    8770:	dfc00415 	stw	ra,16(sp)
    8774:	dc800215 	stw	r18,8(sp)
    8778:	dc000015 	stw	r16,0(sp)
    877c:	10c0020c 	andi	r3,r2,8
    8780:	2823883a 	mov	r17,r5
    8784:	2027883a 	mov	r19,r4
    8788:	1800311e 	bne	r3,zero,8850 <__sflush_r+0xf0>
    878c:	28c00117 	ldw	r3,4(r5)
    8790:	10820014 	ori	r2,r2,2048
    8794:	2880030d 	sth	r2,12(r5)
    8798:	00c04b0e 	bge	zero,r3,88c8 <__sflush_r+0x168>
    879c:	8a000a17 	ldw	r8,40(r17)
    87a0:	40002326 	beq	r8,zero,8830 <__sflush_r+0xd0>
    87a4:	9c000017 	ldw	r16,0(r19)
    87a8:	10c4000c 	andi	r3,r2,4096
    87ac:	98000015 	stw	zero,0(r19)
    87b0:	18004826 	beq	r3,zero,88d4 <__sflush_r+0x174>
    87b4:	89801417 	ldw	r6,80(r17)
    87b8:	10c0010c 	andi	r3,r2,4
    87bc:	18000626 	beq	r3,zero,87d8 <__sflush_r+0x78>
    87c0:	88c00117 	ldw	r3,4(r17)
    87c4:	88800c17 	ldw	r2,48(r17)
    87c8:	30cdc83a 	sub	r6,r6,r3
    87cc:	10000226 	beq	r2,zero,87d8 <__sflush_r+0x78>
    87d0:	88800f17 	ldw	r2,60(r17)
    87d4:	308dc83a 	sub	r6,r6,r2
    87d8:	89400717 	ldw	r5,28(r17)
    87dc:	000f883a 	mov	r7,zero
    87e0:	9809883a 	mov	r4,r19
    87e4:	403ee83a 	callr	r8
    87e8:	00ffffc4 	movi	r3,-1
    87ec:	10c04426 	beq	r2,r3,8900 <__sflush_r+0x1a0>
    87f0:	88c0030b 	ldhu	r3,12(r17)
    87f4:	89000417 	ldw	r4,16(r17)
    87f8:	88000115 	stw	zero,4(r17)
    87fc:	197dffcc 	andi	r5,r3,63487
    8800:	8940030d 	sth	r5,12(r17)
    8804:	89000015 	stw	r4,0(r17)
    8808:	18c4000c 	andi	r3,r3,4096
    880c:	18002c1e 	bne	r3,zero,88c0 <__sflush_r+0x160>
    8810:	89400c17 	ldw	r5,48(r17)
    8814:	9c000015 	stw	r16,0(r19)
    8818:	28000526 	beq	r5,zero,8830 <__sflush_r+0xd0>
    881c:	88801004 	addi	r2,r17,64
    8820:	28800226 	beq	r5,r2,882c <__sflush_r+0xcc>
    8824:	9809883a 	mov	r4,r19
    8828:	0008ecc0 	call	8ecc <_free_r>
    882c:	88000c15 	stw	zero,48(r17)
    8830:	0005883a 	mov	r2,zero
    8834:	dfc00417 	ldw	ra,16(sp)
    8838:	dcc00317 	ldw	r19,12(sp)
    883c:	dc800217 	ldw	r18,8(sp)
    8840:	dc400117 	ldw	r17,4(sp)
    8844:	dc000017 	ldw	r16,0(sp)
    8848:	dec00504 	addi	sp,sp,20
    884c:	f800283a 	ret
    8850:	2c800417 	ldw	r18,16(r5)
    8854:	903ff626 	beq	r18,zero,8830 <__sflush_r+0xd0>
    8858:	2c000017 	ldw	r16,0(r5)
    885c:	108000cc 	andi	r2,r2,3
    8860:	2c800015 	stw	r18,0(r5)
    8864:	84a1c83a 	sub	r16,r16,r18
    8868:	1000131e 	bne	r2,zero,88b8 <__sflush_r+0x158>
    886c:	28800517 	ldw	r2,20(r5)
    8870:	88800215 	stw	r2,8(r17)
    8874:	04000316 	blt	zero,r16,8884 <__sflush_r+0x124>
    8878:	003fed06 	br	8830 <__sflush_r+0xd0>
    887c:	90a5883a 	add	r18,r18,r2
    8880:	043feb0e 	bge	zero,r16,8830 <__sflush_r+0xd0>
    8884:	88800917 	ldw	r2,36(r17)
    8888:	89400717 	ldw	r5,28(r17)
    888c:	800f883a 	mov	r7,r16
    8890:	900d883a 	mov	r6,r18
    8894:	9809883a 	mov	r4,r19
    8898:	103ee83a 	callr	r2
    889c:	80a1c83a 	sub	r16,r16,r2
    88a0:	00bff616 	blt	zero,r2,887c <__sflush_r+0x11c>
    88a4:	88c0030b 	ldhu	r3,12(r17)
    88a8:	00bfffc4 	movi	r2,-1
    88ac:	18c01014 	ori	r3,r3,64
    88b0:	88c0030d 	sth	r3,12(r17)
    88b4:	003fdf06 	br	8834 <__sflush_r+0xd4>
    88b8:	0005883a 	mov	r2,zero
    88bc:	003fec06 	br	8870 <__sflush_r+0x110>
    88c0:	88801415 	stw	r2,80(r17)
    88c4:	003fd206 	br	8810 <__sflush_r+0xb0>
    88c8:	28c00f17 	ldw	r3,60(r5)
    88cc:	00ffb316 	blt	zero,r3,879c <__sflush_r+0x3c>
    88d0:	003fd706 	br	8830 <__sflush_r+0xd0>
    88d4:	89400717 	ldw	r5,28(r17)
    88d8:	000d883a 	mov	r6,zero
    88dc:	01c00044 	movi	r7,1
    88e0:	9809883a 	mov	r4,r19
    88e4:	403ee83a 	callr	r8
    88e8:	100d883a 	mov	r6,r2
    88ec:	00bfffc4 	movi	r2,-1
    88f0:	30801426 	beq	r6,r2,8944 <__sflush_r+0x1e4>
    88f4:	8880030b 	ldhu	r2,12(r17)
    88f8:	8a000a17 	ldw	r8,40(r17)
    88fc:	003fae06 	br	87b8 <__sflush_r+0x58>
    8900:	98c00017 	ldw	r3,0(r19)
    8904:	183fba26 	beq	r3,zero,87f0 <__sflush_r+0x90>
    8908:	01000744 	movi	r4,29
    890c:	19000626 	beq	r3,r4,8928 <__sflush_r+0x1c8>
    8910:	01000584 	movi	r4,22
    8914:	19000426 	beq	r3,r4,8928 <__sflush_r+0x1c8>
    8918:	88c0030b 	ldhu	r3,12(r17)
    891c:	18c01014 	ori	r3,r3,64
    8920:	88c0030d 	sth	r3,12(r17)
    8924:	003fc306 	br	8834 <__sflush_r+0xd4>
    8928:	8880030b 	ldhu	r2,12(r17)
    892c:	88c00417 	ldw	r3,16(r17)
    8930:	88000115 	stw	zero,4(r17)
    8934:	10bdffcc 	andi	r2,r2,63487
    8938:	8880030d 	sth	r2,12(r17)
    893c:	88c00015 	stw	r3,0(r17)
    8940:	003fb306 	br	8810 <__sflush_r+0xb0>
    8944:	98800017 	ldw	r2,0(r19)
    8948:	103fea26 	beq	r2,zero,88f4 <__sflush_r+0x194>
    894c:	00c00744 	movi	r3,29
    8950:	10c00226 	beq	r2,r3,895c <__sflush_r+0x1fc>
    8954:	00c00584 	movi	r3,22
    8958:	10c0031e 	bne	r2,r3,8968 <__sflush_r+0x208>
    895c:	9c000015 	stw	r16,0(r19)
    8960:	0005883a 	mov	r2,zero
    8964:	003fb306 	br	8834 <__sflush_r+0xd4>
    8968:	88c0030b 	ldhu	r3,12(r17)
    896c:	3005883a 	mov	r2,r6
    8970:	18c01014 	ori	r3,r3,64
    8974:	88c0030d 	sth	r3,12(r17)
    8978:	003fae06 	br	8834 <__sflush_r+0xd4>

0000897c <_fflush_r>:
    897c:	defffd04 	addi	sp,sp,-12
    8980:	dc000115 	stw	r16,4(sp)
    8984:	dfc00215 	stw	ra,8(sp)
    8988:	2021883a 	mov	r16,r4
    898c:	20000226 	beq	r4,zero,8998 <_fflush_r+0x1c>
    8990:	20800e17 	ldw	r2,56(r4)
    8994:	10000c26 	beq	r2,zero,89c8 <_fflush_r+0x4c>
    8998:	2880030f 	ldh	r2,12(r5)
    899c:	1000051e 	bne	r2,zero,89b4 <_fflush_r+0x38>
    89a0:	0005883a 	mov	r2,zero
    89a4:	dfc00217 	ldw	ra,8(sp)
    89a8:	dc000117 	ldw	r16,4(sp)
    89ac:	dec00304 	addi	sp,sp,12
    89b0:	f800283a 	ret
    89b4:	8009883a 	mov	r4,r16
    89b8:	dfc00217 	ldw	ra,8(sp)
    89bc:	dc000117 	ldw	r16,4(sp)
    89c0:	dec00304 	addi	sp,sp,12
    89c4:	00087601 	jmpi	8760 <__sflush_r>
    89c8:	d9400015 	stw	r5,0(sp)
    89cc:	0008d580 	call	8d58 <__sinit>
    89d0:	d9400017 	ldw	r5,0(sp)
    89d4:	003ff006 	br	8998 <_fflush_r+0x1c>

000089d8 <fflush>:
    89d8:	20000526 	beq	r4,zero,89f0 <fflush+0x18>
    89dc:	008000b4 	movhi	r2,2
    89e0:	10863e04 	addi	r2,r2,6392
    89e4:	200b883a 	mov	r5,r4
    89e8:	11000017 	ldw	r4,0(r2)
    89ec:	000897c1 	jmpi	897c <_fflush_r>
    89f0:	008000b4 	movhi	r2,2
    89f4:	10863d04 	addi	r2,r2,6388
    89f8:	11000017 	ldw	r4,0(r2)
    89fc:	01400074 	movhi	r5,1
    8a00:	29625f04 	addi	r5,r5,-30340
    8a04:	00092a01 	jmpi	92a0 <_fwalk_reent>

00008a08 <__fp_unlock>:
    8a08:	0005883a 	mov	r2,zero
    8a0c:	f800283a 	ret

00008a10 <_cleanup_r>:
    8a10:	01400074 	movhi	r5,1
    8a14:	29782704 	addi	r5,r5,-8036
    8a18:	00092a01 	jmpi	92a0 <_fwalk_reent>

00008a1c <__sinit.part.1>:
    8a1c:	defff704 	addi	sp,sp,-36
    8a20:	00c00074 	movhi	r3,1
    8a24:	dfc00815 	stw	ra,32(sp)
    8a28:	ddc00715 	stw	r23,28(sp)
    8a2c:	dd800615 	stw	r22,24(sp)
    8a30:	dd400515 	stw	r21,20(sp)
    8a34:	dd000415 	stw	r20,16(sp)
    8a38:	dcc00315 	stw	r19,12(sp)
    8a3c:	dc800215 	stw	r18,8(sp)
    8a40:	dc400115 	stw	r17,4(sp)
    8a44:	dc000015 	stw	r16,0(sp)
    8a48:	18e28404 	addi	r3,r3,-30192
    8a4c:	24000117 	ldw	r16,4(r4)
    8a50:	20c00f15 	stw	r3,60(r4)
    8a54:	2080bb04 	addi	r2,r4,748
    8a58:	00c000c4 	movi	r3,3
    8a5c:	20c0b915 	stw	r3,740(r4)
    8a60:	2080ba15 	stw	r2,744(r4)
    8a64:	2000b815 	stw	zero,736(r4)
    8a68:	05c00204 	movi	r23,8
    8a6c:	00800104 	movi	r2,4
    8a70:	2025883a 	mov	r18,r4
    8a74:	b80d883a 	mov	r6,r23
    8a78:	81001704 	addi	r4,r16,92
    8a7c:	000b883a 	mov	r5,zero
    8a80:	80000015 	stw	zero,0(r16)
    8a84:	80000115 	stw	zero,4(r16)
    8a88:	80000215 	stw	zero,8(r16)
    8a8c:	8080030d 	sth	r2,12(r16)
    8a90:	80001915 	stw	zero,100(r16)
    8a94:	8000038d 	sth	zero,14(r16)
    8a98:	80000415 	stw	zero,16(r16)
    8a9c:	80000515 	stw	zero,20(r16)
    8aa0:	80000615 	stw	zero,24(r16)
    8aa4:	000a0340 	call	a034 <memset>
    8aa8:	05800074 	movhi	r22,1
    8aac:	94400217 	ldw	r17,8(r18)
    8ab0:	05400074 	movhi	r21,1
    8ab4:	05000074 	movhi	r20,1
    8ab8:	04c00074 	movhi	r19,1
    8abc:	b5ac8804 	addi	r22,r22,-19936
    8ac0:	ad6c9f04 	addi	r21,r21,-19844
    8ac4:	a52cbe04 	addi	r20,r20,-19720
    8ac8:	9cecd504 	addi	r19,r19,-19628
    8acc:	85800815 	stw	r22,32(r16)
    8ad0:	85400915 	stw	r21,36(r16)
    8ad4:	85000a15 	stw	r20,40(r16)
    8ad8:	84c00b15 	stw	r19,44(r16)
    8adc:	84000715 	stw	r16,28(r16)
    8ae0:	00800284 	movi	r2,10
    8ae4:	8880030d 	sth	r2,12(r17)
    8ae8:	00800044 	movi	r2,1
    8aec:	b80d883a 	mov	r6,r23
    8af0:	89001704 	addi	r4,r17,92
    8af4:	000b883a 	mov	r5,zero
    8af8:	88000015 	stw	zero,0(r17)
    8afc:	88000115 	stw	zero,4(r17)
    8b00:	88000215 	stw	zero,8(r17)
    8b04:	88001915 	stw	zero,100(r17)
    8b08:	8880038d 	sth	r2,14(r17)
    8b0c:	88000415 	stw	zero,16(r17)
    8b10:	88000515 	stw	zero,20(r17)
    8b14:	88000615 	stw	zero,24(r17)
    8b18:	000a0340 	call	a034 <memset>
    8b1c:	94000317 	ldw	r16,12(r18)
    8b20:	00800484 	movi	r2,18
    8b24:	8c400715 	stw	r17,28(r17)
    8b28:	8d800815 	stw	r22,32(r17)
    8b2c:	8d400915 	stw	r21,36(r17)
    8b30:	8d000a15 	stw	r20,40(r17)
    8b34:	8cc00b15 	stw	r19,44(r17)
    8b38:	8080030d 	sth	r2,12(r16)
    8b3c:	00800084 	movi	r2,2
    8b40:	80000015 	stw	zero,0(r16)
    8b44:	80000115 	stw	zero,4(r16)
    8b48:	80000215 	stw	zero,8(r16)
    8b4c:	80001915 	stw	zero,100(r16)
    8b50:	8080038d 	sth	r2,14(r16)
    8b54:	80000415 	stw	zero,16(r16)
    8b58:	80000515 	stw	zero,20(r16)
    8b5c:	80000615 	stw	zero,24(r16)
    8b60:	b80d883a 	mov	r6,r23
    8b64:	000b883a 	mov	r5,zero
    8b68:	81001704 	addi	r4,r16,92
    8b6c:	000a0340 	call	a034 <memset>
    8b70:	00800044 	movi	r2,1
    8b74:	84000715 	stw	r16,28(r16)
    8b78:	85800815 	stw	r22,32(r16)
    8b7c:	85400915 	stw	r21,36(r16)
    8b80:	85000a15 	stw	r20,40(r16)
    8b84:	84c00b15 	stw	r19,44(r16)
    8b88:	90800e15 	stw	r2,56(r18)
    8b8c:	dfc00817 	ldw	ra,32(sp)
    8b90:	ddc00717 	ldw	r23,28(sp)
    8b94:	dd800617 	ldw	r22,24(sp)
    8b98:	dd400517 	ldw	r21,20(sp)
    8b9c:	dd000417 	ldw	r20,16(sp)
    8ba0:	dcc00317 	ldw	r19,12(sp)
    8ba4:	dc800217 	ldw	r18,8(sp)
    8ba8:	dc400117 	ldw	r17,4(sp)
    8bac:	dc000017 	ldw	r16,0(sp)
    8bb0:	dec00904 	addi	sp,sp,36
    8bb4:	f800283a 	ret

00008bb8 <__fp_lock>:
    8bb8:	0005883a 	mov	r2,zero
    8bbc:	f800283a 	ret

00008bc0 <__sfmoreglue>:
    8bc0:	defffc04 	addi	sp,sp,-16
    8bc4:	dc400115 	stw	r17,4(sp)
    8bc8:	2c7fffc4 	addi	r17,r5,-1
    8bcc:	8c401a24 	muli	r17,r17,104
    8bd0:	dc800215 	stw	r18,8(sp)
    8bd4:	2825883a 	mov	r18,r5
    8bd8:	89401d04 	addi	r5,r17,116
    8bdc:	dc000015 	stw	r16,0(sp)
    8be0:	dfc00315 	stw	ra,12(sp)
    8be4:	00095fc0 	call	95fc <_malloc_r>
    8be8:	1021883a 	mov	r16,r2
    8bec:	10000726 	beq	r2,zero,8c0c <__sfmoreglue+0x4c>
    8bf0:	11000304 	addi	r4,r2,12
    8bf4:	10000015 	stw	zero,0(r2)
    8bf8:	14800115 	stw	r18,4(r2)
    8bfc:	11000215 	stw	r4,8(r2)
    8c00:	89801a04 	addi	r6,r17,104
    8c04:	000b883a 	mov	r5,zero
    8c08:	000a0340 	call	a034 <memset>
    8c0c:	8005883a 	mov	r2,r16
    8c10:	dfc00317 	ldw	ra,12(sp)
    8c14:	dc800217 	ldw	r18,8(sp)
    8c18:	dc400117 	ldw	r17,4(sp)
    8c1c:	dc000017 	ldw	r16,0(sp)
    8c20:	dec00404 	addi	sp,sp,16
    8c24:	f800283a 	ret

00008c28 <__sfp>:
    8c28:	defffb04 	addi	sp,sp,-20
    8c2c:	dc000015 	stw	r16,0(sp)
    8c30:	040000b4 	movhi	r16,2
    8c34:	84063d04 	addi	r16,r16,6388
    8c38:	dcc00315 	stw	r19,12(sp)
    8c3c:	2027883a 	mov	r19,r4
    8c40:	81000017 	ldw	r4,0(r16)
    8c44:	dfc00415 	stw	ra,16(sp)
    8c48:	dc800215 	stw	r18,8(sp)
    8c4c:	20800e17 	ldw	r2,56(r4)
    8c50:	dc400115 	stw	r17,4(sp)
    8c54:	1000021e 	bne	r2,zero,8c60 <__sfp+0x38>
    8c58:	0008a1c0 	call	8a1c <__sinit.part.1>
    8c5c:	81000017 	ldw	r4,0(r16)
    8c60:	2480b804 	addi	r18,r4,736
    8c64:	047fffc4 	movi	r17,-1
    8c68:	91000117 	ldw	r4,4(r18)
    8c6c:	94000217 	ldw	r16,8(r18)
    8c70:	213fffc4 	addi	r4,r4,-1
    8c74:	20000a16 	blt	r4,zero,8ca0 <__sfp+0x78>
    8c78:	8080030f 	ldh	r2,12(r16)
    8c7c:	10000c26 	beq	r2,zero,8cb0 <__sfp+0x88>
    8c80:	80c01d04 	addi	r3,r16,116
    8c84:	00000206 	br	8c90 <__sfp+0x68>
    8c88:	18bfe60f 	ldh	r2,-104(r3)
    8c8c:	10000826 	beq	r2,zero,8cb0 <__sfp+0x88>
    8c90:	213fffc4 	addi	r4,r4,-1
    8c94:	1c3ffd04 	addi	r16,r3,-12
    8c98:	18c01a04 	addi	r3,r3,104
    8c9c:	247ffa1e 	bne	r4,r17,8c88 <__sfp+0x60>
    8ca0:	90800017 	ldw	r2,0(r18)
    8ca4:	10001d26 	beq	r2,zero,8d1c <__sfp+0xf4>
    8ca8:	1025883a 	mov	r18,r2
    8cac:	003fee06 	br	8c68 <__sfp+0x40>
    8cb0:	00bfffc4 	movi	r2,-1
    8cb4:	8080038d 	sth	r2,14(r16)
    8cb8:	00800044 	movi	r2,1
    8cbc:	8080030d 	sth	r2,12(r16)
    8cc0:	80001915 	stw	zero,100(r16)
    8cc4:	80000015 	stw	zero,0(r16)
    8cc8:	80000215 	stw	zero,8(r16)
    8ccc:	80000115 	stw	zero,4(r16)
    8cd0:	80000415 	stw	zero,16(r16)
    8cd4:	80000515 	stw	zero,20(r16)
    8cd8:	80000615 	stw	zero,24(r16)
    8cdc:	01800204 	movi	r6,8
    8ce0:	000b883a 	mov	r5,zero
    8ce4:	81001704 	addi	r4,r16,92
    8ce8:	000a0340 	call	a034 <memset>
    8cec:	8005883a 	mov	r2,r16
    8cf0:	80000c15 	stw	zero,48(r16)
    8cf4:	80000d15 	stw	zero,52(r16)
    8cf8:	80001115 	stw	zero,68(r16)
    8cfc:	80001215 	stw	zero,72(r16)
    8d00:	dfc00417 	ldw	ra,16(sp)
    8d04:	dcc00317 	ldw	r19,12(sp)
    8d08:	dc800217 	ldw	r18,8(sp)
    8d0c:	dc400117 	ldw	r17,4(sp)
    8d10:	dc000017 	ldw	r16,0(sp)
    8d14:	dec00504 	addi	sp,sp,20
    8d18:	f800283a 	ret
    8d1c:	01400104 	movi	r5,4
    8d20:	9809883a 	mov	r4,r19
    8d24:	0008bc00 	call	8bc0 <__sfmoreglue>
    8d28:	90800015 	stw	r2,0(r18)
    8d2c:	103fde1e 	bne	r2,zero,8ca8 <__sfp+0x80>
    8d30:	00800304 	movi	r2,12
    8d34:	98800015 	stw	r2,0(r19)
    8d38:	0005883a 	mov	r2,zero
    8d3c:	003ff006 	br	8d00 <__sfp+0xd8>

00008d40 <_cleanup>:
    8d40:	008000b4 	movhi	r2,2
    8d44:	10863d04 	addi	r2,r2,6388
    8d48:	11000017 	ldw	r4,0(r2)
    8d4c:	01400074 	movhi	r5,1
    8d50:	29782704 	addi	r5,r5,-8036
    8d54:	00092a01 	jmpi	92a0 <_fwalk_reent>

00008d58 <__sinit>:
    8d58:	20800e17 	ldw	r2,56(r4)
    8d5c:	10000126 	beq	r2,zero,8d64 <__sinit+0xc>
    8d60:	f800283a 	ret
    8d64:	0008a1c1 	jmpi	8a1c <__sinit.part.1>

00008d68 <__sfp_lock_acquire>:
    8d68:	f800283a 	ret

00008d6c <__sfp_lock_release>:
    8d6c:	f800283a 	ret

00008d70 <__sinit_lock_acquire>:
    8d70:	f800283a 	ret

00008d74 <__sinit_lock_release>:
    8d74:	f800283a 	ret

00008d78 <__fp_lock_all>:
    8d78:	008000b4 	movhi	r2,2
    8d7c:	10863e04 	addi	r2,r2,6392
    8d80:	11000017 	ldw	r4,0(r2)
    8d84:	01400074 	movhi	r5,1
    8d88:	2962ee04 	addi	r5,r5,-29768
    8d8c:	00091dc1 	jmpi	91dc <_fwalk>

00008d90 <__fp_unlock_all>:
    8d90:	008000b4 	movhi	r2,2
    8d94:	10863e04 	addi	r2,r2,6392
    8d98:	11000017 	ldw	r4,0(r2)
    8d9c:	01400074 	movhi	r5,1
    8da0:	29628204 	addi	r5,r5,-30200
    8da4:	00091dc1 	jmpi	91dc <_fwalk>

00008da8 <_malloc_trim_r>:
    8da8:	defffb04 	addi	sp,sp,-20
    8dac:	dcc00315 	stw	r19,12(sp)
    8db0:	04c000b4 	movhi	r19,2
    8db4:	dc800215 	stw	r18,8(sp)
    8db8:	dc400115 	stw	r17,4(sp)
    8dbc:	dc000015 	stw	r16,0(sp)
    8dc0:	dfc00415 	stw	ra,16(sp)
    8dc4:	2821883a 	mov	r16,r5
    8dc8:	9cfff204 	addi	r19,r19,-56
    8dcc:	2025883a 	mov	r18,r4
    8dd0:	00131000 	call	13100 <__malloc_lock>
    8dd4:	98800217 	ldw	r2,8(r19)
    8dd8:	14400117 	ldw	r17,4(r2)
    8ddc:	00bfff04 	movi	r2,-4
    8de0:	88a2703a 	and	r17,r17,r2
    8de4:	8c21c83a 	sub	r16,r17,r16
    8de8:	8403fbc4 	addi	r16,r16,4079
    8dec:	8020d33a 	srli	r16,r16,12
    8df0:	0083ffc4 	movi	r2,4095
    8df4:	843fffc4 	addi	r16,r16,-1
    8df8:	8020933a 	slli	r16,r16,12
    8dfc:	1400060e 	bge	r2,r16,8e18 <_malloc_trim_r+0x70>
    8e00:	000b883a 	mov	r5,zero
    8e04:	9009883a 	mov	r4,r18
    8e08:	000b1cc0 	call	b1cc <_sbrk_r>
    8e0c:	98c00217 	ldw	r3,8(r19)
    8e10:	1c47883a 	add	r3,r3,r17
    8e14:	10c00a26 	beq	r2,r3,8e40 <_malloc_trim_r+0x98>
    8e18:	9009883a 	mov	r4,r18
    8e1c:	00132200 	call	13220 <__malloc_unlock>
    8e20:	0005883a 	mov	r2,zero
    8e24:	dfc00417 	ldw	ra,16(sp)
    8e28:	dcc00317 	ldw	r19,12(sp)
    8e2c:	dc800217 	ldw	r18,8(sp)
    8e30:	dc400117 	ldw	r17,4(sp)
    8e34:	dc000017 	ldw	r16,0(sp)
    8e38:	dec00504 	addi	sp,sp,20
    8e3c:	f800283a 	ret
    8e40:	040bc83a 	sub	r5,zero,r16
    8e44:	9009883a 	mov	r4,r18
    8e48:	000b1cc0 	call	b1cc <_sbrk_r>
    8e4c:	00ffffc4 	movi	r3,-1
    8e50:	10c00d26 	beq	r2,r3,8e88 <_malloc_trim_r+0xe0>
    8e54:	00c000b4 	movhi	r3,2
    8e58:	18ce7204 	addi	r3,r3,14792
    8e5c:	18800017 	ldw	r2,0(r3)
    8e60:	99000217 	ldw	r4,8(r19)
    8e64:	8c23c83a 	sub	r17,r17,r16
    8e68:	8c400054 	ori	r17,r17,1
    8e6c:	1421c83a 	sub	r16,r2,r16
    8e70:	24400115 	stw	r17,4(r4)
    8e74:	9009883a 	mov	r4,r18
    8e78:	1c000015 	stw	r16,0(r3)
    8e7c:	00132200 	call	13220 <__malloc_unlock>
    8e80:	00800044 	movi	r2,1
    8e84:	003fe706 	br	8e24 <_malloc_trim_r+0x7c>
    8e88:	000b883a 	mov	r5,zero
    8e8c:	9009883a 	mov	r4,r18
    8e90:	000b1cc0 	call	b1cc <_sbrk_r>
    8e94:	99000217 	ldw	r4,8(r19)
    8e98:	014003c4 	movi	r5,15
    8e9c:	1107c83a 	sub	r3,r2,r4
    8ea0:	28ffdd0e 	bge	r5,r3,8e18 <_malloc_trim_r+0x70>
    8ea4:	014000b4 	movhi	r5,2
    8ea8:	29464004 	addi	r5,r5,6400
    8eac:	29400017 	ldw	r5,0(r5)
    8eb0:	18c00054 	ori	r3,r3,1
    8eb4:	20c00115 	stw	r3,4(r4)
    8eb8:	00c000b4 	movhi	r3,2
    8ebc:	1145c83a 	sub	r2,r2,r5
    8ec0:	18ce7204 	addi	r3,r3,14792
    8ec4:	18800015 	stw	r2,0(r3)
    8ec8:	003fd306 	br	8e18 <_malloc_trim_r+0x70>

00008ecc <_free_r>:
    8ecc:	28004126 	beq	r5,zero,8fd4 <_free_r+0x108>
    8ed0:	defffd04 	addi	sp,sp,-12
    8ed4:	dc400115 	stw	r17,4(sp)
    8ed8:	dc000015 	stw	r16,0(sp)
    8edc:	2023883a 	mov	r17,r4
    8ee0:	2821883a 	mov	r16,r5
    8ee4:	dfc00215 	stw	ra,8(sp)
    8ee8:	00131000 	call	13100 <__malloc_lock>
    8eec:	81ffff17 	ldw	r7,-4(r16)
    8ef0:	00bfff84 	movi	r2,-2
    8ef4:	010000b4 	movhi	r4,2
    8ef8:	81bffe04 	addi	r6,r16,-8
    8efc:	3884703a 	and	r2,r7,r2
    8f00:	213ff204 	addi	r4,r4,-56
    8f04:	308b883a 	add	r5,r6,r2
    8f08:	2a400117 	ldw	r9,4(r5)
    8f0c:	22000217 	ldw	r8,8(r4)
    8f10:	00ffff04 	movi	r3,-4
    8f14:	48c6703a 	and	r3,r9,r3
    8f18:	2a005726 	beq	r5,r8,9078 <_free_r+0x1ac>
    8f1c:	28c00115 	stw	r3,4(r5)
    8f20:	39c0004c 	andi	r7,r7,1
    8f24:	3800091e 	bne	r7,zero,8f4c <_free_r+0x80>
    8f28:	823ffe17 	ldw	r8,-8(r16)
    8f2c:	22400204 	addi	r9,r4,8
    8f30:	320dc83a 	sub	r6,r6,r8
    8f34:	31c00217 	ldw	r7,8(r6)
    8f38:	1205883a 	add	r2,r2,r8
    8f3c:	3a406526 	beq	r7,r9,90d4 <_free_r+0x208>
    8f40:	32000317 	ldw	r8,12(r6)
    8f44:	3a000315 	stw	r8,12(r7)
    8f48:	41c00215 	stw	r7,8(r8)
    8f4c:	28cf883a 	add	r7,r5,r3
    8f50:	39c00117 	ldw	r7,4(r7)
    8f54:	39c0004c 	andi	r7,r7,1
    8f58:	38003a26 	beq	r7,zero,9044 <_free_r+0x178>
    8f5c:	10c00054 	ori	r3,r2,1
    8f60:	30c00115 	stw	r3,4(r6)
    8f64:	3087883a 	add	r3,r6,r2
    8f68:	18800015 	stw	r2,0(r3)
    8f6c:	00c07fc4 	movi	r3,511
    8f70:	18801936 	bltu	r3,r2,8fd8 <_free_r+0x10c>
    8f74:	1004d0fa 	srli	r2,r2,3
    8f78:	01c00044 	movi	r7,1
    8f7c:	21400117 	ldw	r5,4(r4)
    8f80:	10c00044 	addi	r3,r2,1
    8f84:	18c7883a 	add	r3,r3,r3
    8f88:	1005d0ba 	srai	r2,r2,2
    8f8c:	18c7883a 	add	r3,r3,r3
    8f90:	18c7883a 	add	r3,r3,r3
    8f94:	1907883a 	add	r3,r3,r4
    8f98:	3884983a 	sll	r2,r7,r2
    8f9c:	19c00017 	ldw	r7,0(r3)
    8fa0:	1a3ffe04 	addi	r8,r3,-8
    8fa4:	1144b03a 	or	r2,r2,r5
    8fa8:	32000315 	stw	r8,12(r6)
    8fac:	31c00215 	stw	r7,8(r6)
    8fb0:	20800115 	stw	r2,4(r4)
    8fb4:	19800015 	stw	r6,0(r3)
    8fb8:	39800315 	stw	r6,12(r7)
    8fbc:	8809883a 	mov	r4,r17
    8fc0:	dfc00217 	ldw	ra,8(sp)
    8fc4:	dc400117 	ldw	r17,4(sp)
    8fc8:	dc000017 	ldw	r16,0(sp)
    8fcc:	dec00304 	addi	sp,sp,12
    8fd0:	00132201 	jmpi	13220 <__malloc_unlock>
    8fd4:	f800283a 	ret
    8fd8:	100ad27a 	srli	r5,r2,9
    8fdc:	00c00104 	movi	r3,4
    8fe0:	19404a36 	bltu	r3,r5,910c <_free_r+0x240>
    8fe4:	100ad1ba 	srli	r5,r2,6
    8fe8:	28c00e44 	addi	r3,r5,57
    8fec:	18c7883a 	add	r3,r3,r3
    8ff0:	29400e04 	addi	r5,r5,56
    8ff4:	18c7883a 	add	r3,r3,r3
    8ff8:	18c7883a 	add	r3,r3,r3
    8ffc:	1909883a 	add	r4,r3,r4
    9000:	20c00017 	ldw	r3,0(r4)
    9004:	01c000b4 	movhi	r7,2
    9008:	213ffe04 	addi	r4,r4,-8
    900c:	39fff204 	addi	r7,r7,-56
    9010:	20c04426 	beq	r4,r3,9124 <_free_r+0x258>
    9014:	01ffff04 	movi	r7,-4
    9018:	19400117 	ldw	r5,4(r3)
    901c:	29ca703a 	and	r5,r5,r7
    9020:	1140022e 	bgeu	r2,r5,902c <_free_r+0x160>
    9024:	18c00217 	ldw	r3,8(r3)
    9028:	20fffb1e 	bne	r4,r3,9018 <_free_r+0x14c>
    902c:	19000317 	ldw	r4,12(r3)
    9030:	31000315 	stw	r4,12(r6)
    9034:	30c00215 	stw	r3,8(r6)
    9038:	21800215 	stw	r6,8(r4)
    903c:	19800315 	stw	r6,12(r3)
    9040:	003fde06 	br	8fbc <_free_r+0xf0>
    9044:	29c00217 	ldw	r7,8(r5)
    9048:	10c5883a 	add	r2,r2,r3
    904c:	00c000b4 	movhi	r3,2
    9050:	18fff404 	addi	r3,r3,-48
    9054:	38c03b26 	beq	r7,r3,9144 <_free_r+0x278>
    9058:	2a000317 	ldw	r8,12(r5)
    905c:	11400054 	ori	r5,r2,1
    9060:	3087883a 	add	r3,r6,r2
    9064:	3a000315 	stw	r8,12(r7)
    9068:	41c00215 	stw	r7,8(r8)
    906c:	31400115 	stw	r5,4(r6)
    9070:	18800015 	stw	r2,0(r3)
    9074:	003fbd06 	br	8f6c <_free_r+0xa0>
    9078:	39c0004c 	andi	r7,r7,1
    907c:	10c5883a 	add	r2,r2,r3
    9080:	3800071e 	bne	r7,zero,90a0 <_free_r+0x1d4>
    9084:	81fffe17 	ldw	r7,-8(r16)
    9088:	31cdc83a 	sub	r6,r6,r7
    908c:	30c00317 	ldw	r3,12(r6)
    9090:	31400217 	ldw	r5,8(r6)
    9094:	11c5883a 	add	r2,r2,r7
    9098:	28c00315 	stw	r3,12(r5)
    909c:	19400215 	stw	r5,8(r3)
    90a0:	10c00054 	ori	r3,r2,1
    90a4:	30c00115 	stw	r3,4(r6)
    90a8:	00c000b4 	movhi	r3,2
    90ac:	18c64104 	addi	r3,r3,6404
    90b0:	18c00017 	ldw	r3,0(r3)
    90b4:	21800215 	stw	r6,8(r4)
    90b8:	10ffc036 	bltu	r2,r3,8fbc <_free_r+0xf0>
    90bc:	008000b4 	movhi	r2,2
    90c0:	108e5004 	addi	r2,r2,14656
    90c4:	11400017 	ldw	r5,0(r2)
    90c8:	8809883a 	mov	r4,r17
    90cc:	0008da80 	call	8da8 <_malloc_trim_r>
    90d0:	003fba06 	br	8fbc <_free_r+0xf0>
    90d4:	28c9883a 	add	r4,r5,r3
    90d8:	21000117 	ldw	r4,4(r4)
    90dc:	2100004c 	andi	r4,r4,1
    90e0:	2000391e 	bne	r4,zero,91c8 <_free_r+0x2fc>
    90e4:	29c00217 	ldw	r7,8(r5)
    90e8:	29000317 	ldw	r4,12(r5)
    90ec:	1885883a 	add	r2,r3,r2
    90f0:	10c00054 	ori	r3,r2,1
    90f4:	39000315 	stw	r4,12(r7)
    90f8:	21c00215 	stw	r7,8(r4)
    90fc:	30c00115 	stw	r3,4(r6)
    9100:	308d883a 	add	r6,r6,r2
    9104:	30800015 	stw	r2,0(r6)
    9108:	003fac06 	br	8fbc <_free_r+0xf0>
    910c:	00c00504 	movi	r3,20
    9110:	19401536 	bltu	r3,r5,9168 <_free_r+0x29c>
    9114:	28c01704 	addi	r3,r5,92
    9118:	18c7883a 	add	r3,r3,r3
    911c:	294016c4 	addi	r5,r5,91
    9120:	003fb406 	br	8ff4 <_free_r+0x128>
    9124:	280bd0ba 	srai	r5,r5,2
    9128:	00c00044 	movi	r3,1
    912c:	38800117 	ldw	r2,4(r7)
    9130:	194a983a 	sll	r5,r3,r5
    9134:	2007883a 	mov	r3,r4
    9138:	2884b03a 	or	r2,r5,r2
    913c:	38800115 	stw	r2,4(r7)
    9140:	003fbb06 	br	9030 <_free_r+0x164>
    9144:	21800515 	stw	r6,20(r4)
    9148:	21800415 	stw	r6,16(r4)
    914c:	10c00054 	ori	r3,r2,1
    9150:	31c00315 	stw	r7,12(r6)
    9154:	31c00215 	stw	r7,8(r6)
    9158:	30c00115 	stw	r3,4(r6)
    915c:	308d883a 	add	r6,r6,r2
    9160:	30800015 	stw	r2,0(r6)
    9164:	003f9506 	br	8fbc <_free_r+0xf0>
    9168:	00c01504 	movi	r3,84
    916c:	19400536 	bltu	r3,r5,9184 <_free_r+0x2b8>
    9170:	100ad33a 	srli	r5,r2,12
    9174:	28c01bc4 	addi	r3,r5,111
    9178:	18c7883a 	add	r3,r3,r3
    917c:	29401b84 	addi	r5,r5,110
    9180:	003f9c06 	br	8ff4 <_free_r+0x128>
    9184:	00c05504 	movi	r3,340
    9188:	19400536 	bltu	r3,r5,91a0 <_free_r+0x2d4>
    918c:	100ad3fa 	srli	r5,r2,15
    9190:	28c01e04 	addi	r3,r5,120
    9194:	18c7883a 	add	r3,r3,r3
    9198:	29401dc4 	addi	r5,r5,119
    919c:	003f9506 	br	8ff4 <_free_r+0x128>
    91a0:	00c15504 	movi	r3,1364
    91a4:	19400536 	bltu	r3,r5,91bc <_free_r+0x2f0>
    91a8:	100ad4ba 	srli	r5,r2,18
    91ac:	28c01f44 	addi	r3,r5,125
    91b0:	18c7883a 	add	r3,r3,r3
    91b4:	29401f04 	addi	r5,r5,124
    91b8:	003f8e06 	br	8ff4 <_free_r+0x128>
    91bc:	00c03f84 	movi	r3,254
    91c0:	01401f84 	movi	r5,126
    91c4:	003f8b06 	br	8ff4 <_free_r+0x128>
    91c8:	10c00054 	ori	r3,r2,1
    91cc:	30c00115 	stw	r3,4(r6)
    91d0:	308d883a 	add	r6,r6,r2
    91d4:	30800015 	stw	r2,0(r6)
    91d8:	003f7806 	br	8fbc <_free_r+0xf0>

000091dc <_fwalk>:
    91dc:	defff704 	addi	sp,sp,-36
    91e0:	dd000415 	stw	r20,16(sp)
    91e4:	dfc00815 	stw	ra,32(sp)
    91e8:	ddc00715 	stw	r23,28(sp)
    91ec:	dd800615 	stw	r22,24(sp)
    91f0:	dd400515 	stw	r21,20(sp)
    91f4:	dcc00315 	stw	r19,12(sp)
    91f8:	dc800215 	stw	r18,8(sp)
    91fc:	dc400115 	stw	r17,4(sp)
    9200:	dc000015 	stw	r16,0(sp)
    9204:	2500b804 	addi	r20,r4,736
    9208:	a0002326 	beq	r20,zero,9298 <_fwalk+0xbc>
    920c:	282b883a 	mov	r21,r5
    9210:	002f883a 	mov	r23,zero
    9214:	05800044 	movi	r22,1
    9218:	04ffffc4 	movi	r19,-1
    921c:	a4400117 	ldw	r17,4(r20)
    9220:	a4800217 	ldw	r18,8(r20)
    9224:	8c7fffc4 	addi	r17,r17,-1
    9228:	88000d16 	blt	r17,zero,9260 <_fwalk+0x84>
    922c:	94000304 	addi	r16,r18,12
    9230:	94800384 	addi	r18,r18,14
    9234:	8080000b 	ldhu	r2,0(r16)
    9238:	8c7fffc4 	addi	r17,r17,-1
    923c:	813ffd04 	addi	r4,r16,-12
    9240:	b080042e 	bgeu	r22,r2,9254 <_fwalk+0x78>
    9244:	9080000f 	ldh	r2,0(r18)
    9248:	14c00226 	beq	r2,r19,9254 <_fwalk+0x78>
    924c:	a83ee83a 	callr	r21
    9250:	b8aeb03a 	or	r23,r23,r2
    9254:	84001a04 	addi	r16,r16,104
    9258:	94801a04 	addi	r18,r18,104
    925c:	8cfff51e 	bne	r17,r19,9234 <_fwalk+0x58>
    9260:	a5000017 	ldw	r20,0(r20)
    9264:	a03fed1e 	bne	r20,zero,921c <_fwalk+0x40>
    9268:	b805883a 	mov	r2,r23
    926c:	dfc00817 	ldw	ra,32(sp)
    9270:	ddc00717 	ldw	r23,28(sp)
    9274:	dd800617 	ldw	r22,24(sp)
    9278:	dd400517 	ldw	r21,20(sp)
    927c:	dd000417 	ldw	r20,16(sp)
    9280:	dcc00317 	ldw	r19,12(sp)
    9284:	dc800217 	ldw	r18,8(sp)
    9288:	dc400117 	ldw	r17,4(sp)
    928c:	dc000017 	ldw	r16,0(sp)
    9290:	dec00904 	addi	sp,sp,36
    9294:	f800283a 	ret
    9298:	002f883a 	mov	r23,zero
    929c:	003ff206 	br	9268 <_fwalk+0x8c>

000092a0 <_fwalk_reent>:
    92a0:	defff704 	addi	sp,sp,-36
    92a4:	dd000415 	stw	r20,16(sp)
    92a8:	dfc00815 	stw	ra,32(sp)
    92ac:	ddc00715 	stw	r23,28(sp)
    92b0:	dd800615 	stw	r22,24(sp)
    92b4:	dd400515 	stw	r21,20(sp)
    92b8:	dcc00315 	stw	r19,12(sp)
    92bc:	dc800215 	stw	r18,8(sp)
    92c0:	dc400115 	stw	r17,4(sp)
    92c4:	dc000015 	stw	r16,0(sp)
    92c8:	2500b804 	addi	r20,r4,736
    92cc:	a0002326 	beq	r20,zero,935c <_fwalk_reent+0xbc>
    92d0:	282b883a 	mov	r21,r5
    92d4:	2027883a 	mov	r19,r4
    92d8:	002f883a 	mov	r23,zero
    92dc:	05800044 	movi	r22,1
    92e0:	04bfffc4 	movi	r18,-1
    92e4:	a4400117 	ldw	r17,4(r20)
    92e8:	a4000217 	ldw	r16,8(r20)
    92ec:	8c7fffc4 	addi	r17,r17,-1
    92f0:	88000c16 	blt	r17,zero,9324 <_fwalk_reent+0x84>
    92f4:	84000304 	addi	r16,r16,12
    92f8:	8080000b 	ldhu	r2,0(r16)
    92fc:	8c7fffc4 	addi	r17,r17,-1
    9300:	817ffd04 	addi	r5,r16,-12
    9304:	b080052e 	bgeu	r22,r2,931c <_fwalk_reent+0x7c>
    9308:	8080008f 	ldh	r2,2(r16)
    930c:	9809883a 	mov	r4,r19
    9310:	14800226 	beq	r2,r18,931c <_fwalk_reent+0x7c>
    9314:	a83ee83a 	callr	r21
    9318:	b8aeb03a 	or	r23,r23,r2
    931c:	84001a04 	addi	r16,r16,104
    9320:	8cbff51e 	bne	r17,r18,92f8 <_fwalk_reent+0x58>
    9324:	a5000017 	ldw	r20,0(r20)
    9328:	a03fee1e 	bne	r20,zero,92e4 <_fwalk_reent+0x44>
    932c:	b805883a 	mov	r2,r23
    9330:	dfc00817 	ldw	ra,32(sp)
    9334:	ddc00717 	ldw	r23,28(sp)
    9338:	dd800617 	ldw	r22,24(sp)
    933c:	dd400517 	ldw	r21,20(sp)
    9340:	dd000417 	ldw	r20,16(sp)
    9344:	dcc00317 	ldw	r19,12(sp)
    9348:	dc800217 	ldw	r18,8(sp)
    934c:	dc400117 	ldw	r17,4(sp)
    9350:	dc000017 	ldw	r16,0(sp)
    9354:	dec00904 	addi	sp,sp,36
    9358:	f800283a 	ret
    935c:	002f883a 	mov	r23,zero
    9360:	003ff206 	br	932c <_fwalk_reent+0x8c>

00009364 <_setlocale_r>:
    9364:	30001b26 	beq	r6,zero,93d4 <_setlocale_r+0x70>
    9368:	014000b4 	movhi	r5,2
    936c:	defffe04 	addi	sp,sp,-8
    9370:	297d7604 	addi	r5,r5,-2600
    9374:	3009883a 	mov	r4,r6
    9378:	dc000015 	stw	r16,0(sp)
    937c:	dfc00115 	stw	ra,4(sp)
    9380:	3021883a 	mov	r16,r6
    9384:	000b35c0 	call	b35c <strcmp>
    9388:	1000061e 	bne	r2,zero,93a4 <_setlocale_r+0x40>
    938c:	008000b4 	movhi	r2,2
    9390:	10bb9004 	addi	r2,r2,-4544
    9394:	dfc00117 	ldw	ra,4(sp)
    9398:	dc000017 	ldw	r16,0(sp)
    939c:	dec00204 	addi	sp,sp,8
    93a0:	f800283a 	ret
    93a4:	014000b4 	movhi	r5,2
    93a8:	297b9004 	addi	r5,r5,-4544
    93ac:	8009883a 	mov	r4,r16
    93b0:	000b35c0 	call	b35c <strcmp>
    93b4:	103ff526 	beq	r2,zero,938c <_setlocale_r+0x28>
    93b8:	014000b4 	movhi	r5,2
    93bc:	297d5904 	addi	r5,r5,-2716
    93c0:	8009883a 	mov	r4,r16
    93c4:	000b35c0 	call	b35c <strcmp>
    93c8:	103ff026 	beq	r2,zero,938c <_setlocale_r+0x28>
    93cc:	0005883a 	mov	r2,zero
    93d0:	003ff006 	br	9394 <_setlocale_r+0x30>
    93d4:	008000b4 	movhi	r2,2
    93d8:	10bb9004 	addi	r2,r2,-4544
    93dc:	f800283a 	ret

000093e0 <__locale_charset>:
    93e0:	008000b4 	movhi	r2,2
    93e4:	10bfdc04 	addi	r2,r2,-144
    93e8:	f800283a 	ret

000093ec <__locale_mb_cur_max>:
    93ec:	008000b4 	movhi	r2,2
    93f0:	10863f04 	addi	r2,r2,6396
    93f4:	10800017 	ldw	r2,0(r2)
    93f8:	f800283a 	ret

000093fc <__locale_msgcharset>:
    93fc:	008000b4 	movhi	r2,2
    9400:	10bfd404 	addi	r2,r2,-176
    9404:	f800283a 	ret

00009408 <__locale_cjk_lang>:
    9408:	0005883a 	mov	r2,zero
    940c:	f800283a 	ret

00009410 <_localeconv_r>:
    9410:	008000b4 	movhi	r2,2
    9414:	10bfe404 	addi	r2,r2,-112
    9418:	f800283a 	ret

0000941c <setlocale>:
    941c:	008000b4 	movhi	r2,2
    9420:	10863e04 	addi	r2,r2,6392
    9424:	280d883a 	mov	r6,r5
    9428:	200b883a 	mov	r5,r4
    942c:	11000017 	ldw	r4,0(r2)
    9430:	00093641 	jmpi	9364 <_setlocale_r>

00009434 <localeconv>:
    9434:	008000b4 	movhi	r2,2
    9438:	10bfe404 	addi	r2,r2,-112
    943c:	f800283a 	ret

00009440 <__smakebuf_r>:
    9440:	2880030b 	ldhu	r2,12(r5)
    9444:	10c0008c 	andi	r3,r2,2
    9448:	1800411e 	bne	r3,zero,9550 <__smakebuf_r+0x110>
    944c:	deffec04 	addi	sp,sp,-80
    9450:	dc000f15 	stw	r16,60(sp)
    9454:	2821883a 	mov	r16,r5
    9458:	2940038f 	ldh	r5,14(r5)
    945c:	dc401015 	stw	r17,64(sp)
    9460:	dfc01315 	stw	ra,76(sp)
    9464:	dcc01215 	stw	r19,72(sp)
    9468:	dc801115 	stw	r18,68(sp)
    946c:	2023883a 	mov	r17,r4
    9470:	28001c16 	blt	r5,zero,94e4 <__smakebuf_r+0xa4>
    9474:	d80d883a 	mov	r6,sp
    9478:	000e3a80 	call	e3a8 <_fstat_r>
    947c:	10001816 	blt	r2,zero,94e0 <__smakebuf_r+0xa0>
    9480:	d8800117 	ldw	r2,4(sp)
    9484:	00e00014 	movui	r3,32768
    9488:	10bc000c 	andi	r2,r2,61440
    948c:	14c80020 	cmpeqi	r19,r2,8192
    9490:	10c03726 	beq	r2,r3,9570 <__smakebuf_r+0x130>
    9494:	80c0030b 	ldhu	r3,12(r16)
    9498:	18c20014 	ori	r3,r3,2048
    949c:	80c0030d 	sth	r3,12(r16)
    94a0:	00c80004 	movi	r3,8192
    94a4:	10c0521e 	bne	r2,r3,95f0 <__smakebuf_r+0x1b0>
    94a8:	8140038f 	ldh	r5,14(r16)
    94ac:	8809883a 	mov	r4,r17
    94b0:	000e8c00 	call	e8c0 <_isatty_r>
    94b4:	10004c26 	beq	r2,zero,95e8 <__smakebuf_r+0x1a8>
    94b8:	8080030b 	ldhu	r2,12(r16)
    94bc:	80c010c4 	addi	r3,r16,67
    94c0:	80c00015 	stw	r3,0(r16)
    94c4:	10800054 	ori	r2,r2,1
    94c8:	8080030d 	sth	r2,12(r16)
    94cc:	00800044 	movi	r2,1
    94d0:	80c00415 	stw	r3,16(r16)
    94d4:	80800515 	stw	r2,20(r16)
    94d8:	04810004 	movi	r18,1024
    94dc:	00000706 	br	94fc <__smakebuf_r+0xbc>
    94e0:	8080030b 	ldhu	r2,12(r16)
    94e4:	10c0200c 	andi	r3,r2,128
    94e8:	18001f1e 	bne	r3,zero,9568 <__smakebuf_r+0x128>
    94ec:	04810004 	movi	r18,1024
    94f0:	10820014 	ori	r2,r2,2048
    94f4:	8080030d 	sth	r2,12(r16)
    94f8:	0027883a 	mov	r19,zero
    94fc:	900b883a 	mov	r5,r18
    9500:	8809883a 	mov	r4,r17
    9504:	00095fc0 	call	95fc <_malloc_r>
    9508:	10002c26 	beq	r2,zero,95bc <__smakebuf_r+0x17c>
    950c:	80c0030b 	ldhu	r3,12(r16)
    9510:	01000074 	movhi	r4,1
    9514:	21228404 	addi	r4,r4,-30192
    9518:	89000f15 	stw	r4,60(r17)
    951c:	18c02014 	ori	r3,r3,128
    9520:	80c0030d 	sth	r3,12(r16)
    9524:	80800015 	stw	r2,0(r16)
    9528:	80800415 	stw	r2,16(r16)
    952c:	84800515 	stw	r18,20(r16)
    9530:	98001a1e 	bne	r19,zero,959c <__smakebuf_r+0x15c>
    9534:	dfc01317 	ldw	ra,76(sp)
    9538:	dcc01217 	ldw	r19,72(sp)
    953c:	dc801117 	ldw	r18,68(sp)
    9540:	dc401017 	ldw	r17,64(sp)
    9544:	dc000f17 	ldw	r16,60(sp)
    9548:	dec01404 	addi	sp,sp,80
    954c:	f800283a 	ret
    9550:	288010c4 	addi	r2,r5,67
    9554:	28800015 	stw	r2,0(r5)
    9558:	28800415 	stw	r2,16(r5)
    955c:	00800044 	movi	r2,1
    9560:	28800515 	stw	r2,20(r5)
    9564:	f800283a 	ret
    9568:	04801004 	movi	r18,64
    956c:	003fe006 	br	94f0 <__smakebuf_r+0xb0>
    9570:	81000a17 	ldw	r4,40(r16)
    9574:	00c00074 	movhi	r3,1
    9578:	18ecbe04 	addi	r3,r3,-19720
    957c:	20ffc51e 	bne	r4,r3,9494 <__smakebuf_r+0x54>
    9580:	8080030b 	ldhu	r2,12(r16)
    9584:	04810004 	movi	r18,1024
    9588:	84801315 	stw	r18,76(r16)
    958c:	1484b03a 	or	r2,r2,r18
    9590:	8080030d 	sth	r2,12(r16)
    9594:	0027883a 	mov	r19,zero
    9598:	003fd806 	br	94fc <__smakebuf_r+0xbc>
    959c:	8140038f 	ldh	r5,14(r16)
    95a0:	8809883a 	mov	r4,r17
    95a4:	000e8c00 	call	e8c0 <_isatty_r>
    95a8:	103fe226 	beq	r2,zero,9534 <__smakebuf_r+0xf4>
    95ac:	8080030b 	ldhu	r2,12(r16)
    95b0:	10800054 	ori	r2,r2,1
    95b4:	8080030d 	sth	r2,12(r16)
    95b8:	003fde06 	br	9534 <__smakebuf_r+0xf4>
    95bc:	8080030b 	ldhu	r2,12(r16)
    95c0:	10c0800c 	andi	r3,r2,512
    95c4:	183fdb1e 	bne	r3,zero,9534 <__smakebuf_r+0xf4>
    95c8:	10800094 	ori	r2,r2,2
    95cc:	80c010c4 	addi	r3,r16,67
    95d0:	8080030d 	sth	r2,12(r16)
    95d4:	00800044 	movi	r2,1
    95d8:	80c00015 	stw	r3,0(r16)
    95dc:	80c00415 	stw	r3,16(r16)
    95e0:	80800515 	stw	r2,20(r16)
    95e4:	003fd306 	br	9534 <__smakebuf_r+0xf4>
    95e8:	04810004 	movi	r18,1024
    95ec:	003fc306 	br	94fc <__smakebuf_r+0xbc>
    95f0:	0027883a 	mov	r19,zero
    95f4:	04810004 	movi	r18,1024
    95f8:	003fc006 	br	94fc <__smakebuf_r+0xbc>

000095fc <_malloc_r>:
    95fc:	defff504 	addi	sp,sp,-44
    9600:	dc800315 	stw	r18,12(sp)
    9604:	dfc00a15 	stw	ra,40(sp)
    9608:	df000915 	stw	fp,36(sp)
    960c:	ddc00815 	stw	r23,32(sp)
    9610:	dd800715 	stw	r22,28(sp)
    9614:	dd400615 	stw	r21,24(sp)
    9618:	dd000515 	stw	r20,20(sp)
    961c:	dcc00415 	stw	r19,16(sp)
    9620:	dc400215 	stw	r17,8(sp)
    9624:	dc000115 	stw	r16,4(sp)
    9628:	288002c4 	addi	r2,r5,11
    962c:	00c00584 	movi	r3,22
    9630:	2025883a 	mov	r18,r4
    9634:	18807f2e 	bgeu	r3,r2,9834 <_malloc_r+0x238>
    9638:	047ffe04 	movi	r17,-8
    963c:	1462703a 	and	r17,r2,r17
    9640:	8800a316 	blt	r17,zero,98d0 <_malloc_r+0x2d4>
    9644:	8940a236 	bltu	r17,r5,98d0 <_malloc_r+0x2d4>
    9648:	00131000 	call	13100 <__malloc_lock>
    964c:	00807dc4 	movi	r2,503
    9650:	1441e92e 	bgeu	r2,r17,9df8 <_malloc_r+0x7fc>
    9654:	8804d27a 	srli	r2,r17,9
    9658:	1000a126 	beq	r2,zero,98e0 <_malloc_r+0x2e4>
    965c:	00c00104 	movi	r3,4
    9660:	18811e36 	bltu	r3,r2,9adc <_malloc_r+0x4e0>
    9664:	8804d1ba 	srli	r2,r17,6
    9668:	12000e44 	addi	r8,r2,57
    966c:	11c00e04 	addi	r7,r2,56
    9670:	4209883a 	add	r4,r8,r8
    9674:	04c000b4 	movhi	r19,2
    9678:	2109883a 	add	r4,r4,r4
    967c:	9cfff204 	addi	r19,r19,-56
    9680:	2109883a 	add	r4,r4,r4
    9684:	9909883a 	add	r4,r19,r4
    9688:	24000117 	ldw	r16,4(r4)
    968c:	213ffe04 	addi	r4,r4,-8
    9690:	24009726 	beq	r4,r16,98f0 <_malloc_r+0x2f4>
    9694:	80800117 	ldw	r2,4(r16)
    9698:	01bfff04 	movi	r6,-4
    969c:	014003c4 	movi	r5,15
    96a0:	1184703a 	and	r2,r2,r6
    96a4:	1447c83a 	sub	r3,r2,r17
    96a8:	28c00716 	blt	r5,r3,96c8 <_malloc_r+0xcc>
    96ac:	1800920e 	bge	r3,zero,98f8 <_malloc_r+0x2fc>
    96b0:	84000317 	ldw	r16,12(r16)
    96b4:	24008e26 	beq	r4,r16,98f0 <_malloc_r+0x2f4>
    96b8:	80800117 	ldw	r2,4(r16)
    96bc:	1184703a 	and	r2,r2,r6
    96c0:	1447c83a 	sub	r3,r2,r17
    96c4:	28fff90e 	bge	r5,r3,96ac <_malloc_r+0xb0>
    96c8:	3809883a 	mov	r4,r7
    96cc:	018000b4 	movhi	r6,2
    96d0:	9c000417 	ldw	r16,16(r19)
    96d4:	31bff204 	addi	r6,r6,-56
    96d8:	32000204 	addi	r8,r6,8
    96dc:	82013426 	beq	r16,r8,9bb0 <_malloc_r+0x5b4>
    96e0:	80c00117 	ldw	r3,4(r16)
    96e4:	00bfff04 	movi	r2,-4
    96e8:	188e703a 	and	r7,r3,r2
    96ec:	3c45c83a 	sub	r2,r7,r17
    96f0:	00c003c4 	movi	r3,15
    96f4:	18811f16 	blt	r3,r2,9b74 <_malloc_r+0x578>
    96f8:	32000515 	stw	r8,20(r6)
    96fc:	32000415 	stw	r8,16(r6)
    9700:	10007f0e 	bge	r2,zero,9900 <_malloc_r+0x304>
    9704:	00807fc4 	movi	r2,511
    9708:	11c0fd36 	bltu	r2,r7,9b00 <_malloc_r+0x504>
    970c:	3806d0fa 	srli	r3,r7,3
    9710:	01c00044 	movi	r7,1
    9714:	30800117 	ldw	r2,4(r6)
    9718:	19400044 	addi	r5,r3,1
    971c:	294b883a 	add	r5,r5,r5
    9720:	1807d0ba 	srai	r3,r3,2
    9724:	294b883a 	add	r5,r5,r5
    9728:	294b883a 	add	r5,r5,r5
    972c:	298b883a 	add	r5,r5,r6
    9730:	38c6983a 	sll	r3,r7,r3
    9734:	29c00017 	ldw	r7,0(r5)
    9738:	2a7ffe04 	addi	r9,r5,-8
    973c:	1886b03a 	or	r3,r3,r2
    9740:	82400315 	stw	r9,12(r16)
    9744:	81c00215 	stw	r7,8(r16)
    9748:	30c00115 	stw	r3,4(r6)
    974c:	2c000015 	stw	r16,0(r5)
    9750:	3c000315 	stw	r16,12(r7)
    9754:	2005d0ba 	srai	r2,r4,2
    9758:	01400044 	movi	r5,1
    975c:	288a983a 	sll	r5,r5,r2
    9760:	19406f36 	bltu	r3,r5,9920 <_malloc_r+0x324>
    9764:	28c4703a 	and	r2,r5,r3
    9768:	10000a1e 	bne	r2,zero,9794 <_malloc_r+0x198>
    976c:	00bfff04 	movi	r2,-4
    9770:	294b883a 	add	r5,r5,r5
    9774:	2088703a 	and	r4,r4,r2
    9778:	28c4703a 	and	r2,r5,r3
    977c:	21000104 	addi	r4,r4,4
    9780:	1000041e 	bne	r2,zero,9794 <_malloc_r+0x198>
    9784:	294b883a 	add	r5,r5,r5
    9788:	28c4703a 	and	r2,r5,r3
    978c:	21000104 	addi	r4,r4,4
    9790:	103ffc26 	beq	r2,zero,9784 <_malloc_r+0x188>
    9794:	02bfff04 	movi	r10,-4
    9798:	024003c4 	movi	r9,15
    979c:	21800044 	addi	r6,r4,1
    97a0:	318d883a 	add	r6,r6,r6
    97a4:	318d883a 	add	r6,r6,r6
    97a8:	318d883a 	add	r6,r6,r6
    97ac:	998d883a 	add	r6,r19,r6
    97b0:	333ffe04 	addi	r12,r6,-8
    97b4:	2017883a 	mov	r11,r4
    97b8:	31800104 	addi	r6,r6,4
    97bc:	34000017 	ldw	r16,0(r6)
    97c0:	31fffd04 	addi	r7,r6,-12
    97c4:	81c0041e 	bne	r16,r7,97d8 <_malloc_r+0x1dc>
    97c8:	0000fb06 	br	9bb8 <_malloc_r+0x5bc>
    97cc:	1801030e 	bge	r3,zero,9bdc <_malloc_r+0x5e0>
    97d0:	84000317 	ldw	r16,12(r16)
    97d4:	81c0f826 	beq	r16,r7,9bb8 <_malloc_r+0x5bc>
    97d8:	80800117 	ldw	r2,4(r16)
    97dc:	1284703a 	and	r2,r2,r10
    97e0:	1447c83a 	sub	r3,r2,r17
    97e4:	48fff90e 	bge	r9,r3,97cc <_malloc_r+0x1d0>
    97e8:	80800317 	ldw	r2,12(r16)
    97ec:	81000217 	ldw	r4,8(r16)
    97f0:	89400054 	ori	r5,r17,1
    97f4:	81400115 	stw	r5,4(r16)
    97f8:	20800315 	stw	r2,12(r4)
    97fc:	11000215 	stw	r4,8(r2)
    9800:	8463883a 	add	r17,r16,r17
    9804:	9c400515 	stw	r17,20(r19)
    9808:	9c400415 	stw	r17,16(r19)
    980c:	18800054 	ori	r2,r3,1
    9810:	88800115 	stw	r2,4(r17)
    9814:	8a000315 	stw	r8,12(r17)
    9818:	8a000215 	stw	r8,8(r17)
    981c:	88e3883a 	add	r17,r17,r3
    9820:	88c00015 	stw	r3,0(r17)
    9824:	9009883a 	mov	r4,r18
    9828:	00132200 	call	13220 <__malloc_unlock>
    982c:	80800204 	addi	r2,r16,8
    9830:	00001b06 	br	98a0 <_malloc_r+0x2a4>
    9834:	04400404 	movi	r17,16
    9838:	89402536 	bltu	r17,r5,98d0 <_malloc_r+0x2d4>
    983c:	00131000 	call	13100 <__malloc_lock>
    9840:	00800184 	movi	r2,6
    9844:	01000084 	movi	r4,2
    9848:	04c000b4 	movhi	r19,2
    984c:	1085883a 	add	r2,r2,r2
    9850:	9cfff204 	addi	r19,r19,-56
    9854:	1085883a 	add	r2,r2,r2
    9858:	9885883a 	add	r2,r19,r2
    985c:	14000117 	ldw	r16,4(r2)
    9860:	10fffe04 	addi	r3,r2,-8
    9864:	80c0d926 	beq	r16,r3,9bcc <_malloc_r+0x5d0>
    9868:	80c00117 	ldw	r3,4(r16)
    986c:	81000317 	ldw	r4,12(r16)
    9870:	00bfff04 	movi	r2,-4
    9874:	1884703a 	and	r2,r3,r2
    9878:	81400217 	ldw	r5,8(r16)
    987c:	8085883a 	add	r2,r16,r2
    9880:	10c00117 	ldw	r3,4(r2)
    9884:	29000315 	stw	r4,12(r5)
    9888:	21400215 	stw	r5,8(r4)
    988c:	18c00054 	ori	r3,r3,1
    9890:	10c00115 	stw	r3,4(r2)
    9894:	9009883a 	mov	r4,r18
    9898:	00132200 	call	13220 <__malloc_unlock>
    989c:	80800204 	addi	r2,r16,8
    98a0:	dfc00a17 	ldw	ra,40(sp)
    98a4:	df000917 	ldw	fp,36(sp)
    98a8:	ddc00817 	ldw	r23,32(sp)
    98ac:	dd800717 	ldw	r22,28(sp)
    98b0:	dd400617 	ldw	r21,24(sp)
    98b4:	dd000517 	ldw	r20,20(sp)
    98b8:	dcc00417 	ldw	r19,16(sp)
    98bc:	dc800317 	ldw	r18,12(sp)
    98c0:	dc400217 	ldw	r17,8(sp)
    98c4:	dc000117 	ldw	r16,4(sp)
    98c8:	dec00b04 	addi	sp,sp,44
    98cc:	f800283a 	ret
    98d0:	00800304 	movi	r2,12
    98d4:	90800015 	stw	r2,0(r18)
    98d8:	0005883a 	mov	r2,zero
    98dc:	003ff006 	br	98a0 <_malloc_r+0x2a4>
    98e0:	01002004 	movi	r4,128
    98e4:	02001004 	movi	r8,64
    98e8:	01c00fc4 	movi	r7,63
    98ec:	003f6106 	br	9674 <_malloc_r+0x78>
    98f0:	4009883a 	mov	r4,r8
    98f4:	003f7506 	br	96cc <_malloc_r+0xd0>
    98f8:	81000317 	ldw	r4,12(r16)
    98fc:	003fde06 	br	9878 <_malloc_r+0x27c>
    9900:	81c5883a 	add	r2,r16,r7
    9904:	11400117 	ldw	r5,4(r2)
    9908:	9009883a 	mov	r4,r18
    990c:	29400054 	ori	r5,r5,1
    9910:	11400115 	stw	r5,4(r2)
    9914:	00132200 	call	13220 <__malloc_unlock>
    9918:	80800204 	addi	r2,r16,8
    991c:	003fe006 	br	98a0 <_malloc_r+0x2a4>
    9920:	9c000217 	ldw	r16,8(r19)
    9924:	00bfff04 	movi	r2,-4
    9928:	85800117 	ldw	r22,4(r16)
    992c:	b0ac703a 	and	r22,r22,r2
    9930:	b4400336 	bltu	r22,r17,9940 <_malloc_r+0x344>
    9934:	b445c83a 	sub	r2,r22,r17
    9938:	00c003c4 	movi	r3,15
    993c:	18805d16 	blt	r3,r2,9ab4 <_malloc_r+0x4b8>
    9940:	05c000b4 	movhi	r23,2
    9944:	008000b4 	movhi	r2,2
    9948:	108e5004 	addi	r2,r2,14656
    994c:	bdc64004 	addi	r23,r23,6400
    9950:	15400017 	ldw	r21,0(r2)
    9954:	b8c00017 	ldw	r3,0(r23)
    9958:	00bfffc4 	movi	r2,-1
    995c:	858d883a 	add	r6,r16,r22
    9960:	8d6b883a 	add	r21,r17,r21
    9964:	1880ea26 	beq	r3,r2,9d10 <_malloc_r+0x714>
    9968:	ad4403c4 	addi	r21,r21,4111
    996c:	00bc0004 	movi	r2,-4096
    9970:	a8aa703a 	and	r21,r21,r2
    9974:	a80b883a 	mov	r5,r21
    9978:	9009883a 	mov	r4,r18
    997c:	d9800015 	stw	r6,0(sp)
    9980:	000b1cc0 	call	b1cc <_sbrk_r>
    9984:	1029883a 	mov	r20,r2
    9988:	00bfffc4 	movi	r2,-1
    998c:	d9800017 	ldw	r6,0(sp)
    9990:	a080e826 	beq	r20,r2,9d34 <_malloc_r+0x738>
    9994:	a180a636 	bltu	r20,r6,9c30 <_malloc_r+0x634>
    9998:	070000b4 	movhi	fp,2
    999c:	e70e7204 	addi	fp,fp,14792
    99a0:	e0800017 	ldw	r2,0(fp)
    99a4:	a887883a 	add	r3,r21,r2
    99a8:	e0c00015 	stw	r3,0(fp)
    99ac:	3500e626 	beq	r6,r20,9d48 <_malloc_r+0x74c>
    99b0:	b9000017 	ldw	r4,0(r23)
    99b4:	00bfffc4 	movi	r2,-1
    99b8:	2080ee26 	beq	r4,r2,9d74 <_malloc_r+0x778>
    99bc:	a185c83a 	sub	r2,r20,r6
    99c0:	10c5883a 	add	r2,r2,r3
    99c4:	e0800015 	stw	r2,0(fp)
    99c8:	a0c001cc 	andi	r3,r20,7
    99cc:	1800bc26 	beq	r3,zero,9cc0 <_malloc_r+0x6c4>
    99d0:	a0e9c83a 	sub	r20,r20,r3
    99d4:	00840204 	movi	r2,4104
    99d8:	a5000204 	addi	r20,r20,8
    99dc:	10c7c83a 	sub	r3,r2,r3
    99e0:	a545883a 	add	r2,r20,r21
    99e4:	1083ffcc 	andi	r2,r2,4095
    99e8:	18abc83a 	sub	r21,r3,r2
    99ec:	a80b883a 	mov	r5,r21
    99f0:	9009883a 	mov	r4,r18
    99f4:	000b1cc0 	call	b1cc <_sbrk_r>
    99f8:	00ffffc4 	movi	r3,-1
    99fc:	10c0e126 	beq	r2,r3,9d84 <_malloc_r+0x788>
    9a00:	1505c83a 	sub	r2,r2,r20
    9a04:	1545883a 	add	r2,r2,r21
    9a08:	10800054 	ori	r2,r2,1
    9a0c:	e0c00017 	ldw	r3,0(fp)
    9a10:	9d000215 	stw	r20,8(r19)
    9a14:	a0800115 	stw	r2,4(r20)
    9a18:	a8c7883a 	add	r3,r21,r3
    9a1c:	e0c00015 	stw	r3,0(fp)
    9a20:	84c00e26 	beq	r16,r19,9a5c <_malloc_r+0x460>
    9a24:	018003c4 	movi	r6,15
    9a28:	3580a72e 	bgeu	r6,r22,9cc8 <_malloc_r+0x6cc>
    9a2c:	81400117 	ldw	r5,4(r16)
    9a30:	013ffe04 	movi	r4,-8
    9a34:	b0bffd04 	addi	r2,r22,-12
    9a38:	1104703a 	and	r2,r2,r4
    9a3c:	2900004c 	andi	r4,r5,1
    9a40:	2088b03a 	or	r4,r4,r2
    9a44:	81000115 	stw	r4,4(r16)
    9a48:	01400144 	movi	r5,5
    9a4c:	8089883a 	add	r4,r16,r2
    9a50:	21400115 	stw	r5,4(r4)
    9a54:	21400215 	stw	r5,8(r4)
    9a58:	3080cd36 	bltu	r6,r2,9d90 <_malloc_r+0x794>
    9a5c:	008000b4 	movhi	r2,2
    9a60:	108e4f04 	addi	r2,r2,14652
    9a64:	11000017 	ldw	r4,0(r2)
    9a68:	20c0012e 	bgeu	r4,r3,9a70 <_malloc_r+0x474>
    9a6c:	10c00015 	stw	r3,0(r2)
    9a70:	008000b4 	movhi	r2,2
    9a74:	108e4e04 	addi	r2,r2,14648
    9a78:	11000017 	ldw	r4,0(r2)
    9a7c:	9c000217 	ldw	r16,8(r19)
    9a80:	20c0012e 	bgeu	r4,r3,9a88 <_malloc_r+0x48c>
    9a84:	10c00015 	stw	r3,0(r2)
    9a88:	80c00117 	ldw	r3,4(r16)
    9a8c:	00bfff04 	movi	r2,-4
    9a90:	1886703a 	and	r3,r3,r2
    9a94:	1c45c83a 	sub	r2,r3,r17
    9a98:	1c400236 	bltu	r3,r17,9aa4 <_malloc_r+0x4a8>
    9a9c:	00c003c4 	movi	r3,15
    9aa0:	18800416 	blt	r3,r2,9ab4 <_malloc_r+0x4b8>
    9aa4:	9009883a 	mov	r4,r18
    9aa8:	00132200 	call	13220 <__malloc_unlock>
    9aac:	0005883a 	mov	r2,zero
    9ab0:	003f7b06 	br	98a0 <_malloc_r+0x2a4>
    9ab4:	88c00054 	ori	r3,r17,1
    9ab8:	80c00115 	stw	r3,4(r16)
    9abc:	8463883a 	add	r17,r16,r17
    9ac0:	10800054 	ori	r2,r2,1
    9ac4:	9c400215 	stw	r17,8(r19)
    9ac8:	88800115 	stw	r2,4(r17)
    9acc:	9009883a 	mov	r4,r18
    9ad0:	00132200 	call	13220 <__malloc_unlock>
    9ad4:	80800204 	addi	r2,r16,8
    9ad8:	003f7106 	br	98a0 <_malloc_r+0x2a4>
    9adc:	00c00504 	movi	r3,20
    9ae0:	18804a2e 	bgeu	r3,r2,9c0c <_malloc_r+0x610>
    9ae4:	00c01504 	movi	r3,84
    9ae8:	18806e36 	bltu	r3,r2,9ca4 <_malloc_r+0x6a8>
    9aec:	8804d33a 	srli	r2,r17,12
    9af0:	12001bc4 	addi	r8,r2,111
    9af4:	11c01b84 	addi	r7,r2,110
    9af8:	4209883a 	add	r4,r8,r8
    9afc:	003edd06 	br	9674 <_malloc_r+0x78>
    9b00:	3804d27a 	srli	r2,r7,9
    9b04:	00c00104 	movi	r3,4
    9b08:	1880442e 	bgeu	r3,r2,9c1c <_malloc_r+0x620>
    9b0c:	00c00504 	movi	r3,20
    9b10:	18808136 	bltu	r3,r2,9d18 <_malloc_r+0x71c>
    9b14:	11401704 	addi	r5,r2,92
    9b18:	10c016c4 	addi	r3,r2,91
    9b1c:	294b883a 	add	r5,r5,r5
    9b20:	294b883a 	add	r5,r5,r5
    9b24:	294b883a 	add	r5,r5,r5
    9b28:	994b883a 	add	r5,r19,r5
    9b2c:	28800017 	ldw	r2,0(r5)
    9b30:	018000b4 	movhi	r6,2
    9b34:	297ffe04 	addi	r5,r5,-8
    9b38:	31bff204 	addi	r6,r6,-56
    9b3c:	28806526 	beq	r5,r2,9cd4 <_malloc_r+0x6d8>
    9b40:	01bfff04 	movi	r6,-4
    9b44:	10c00117 	ldw	r3,4(r2)
    9b48:	1986703a 	and	r3,r3,r6
    9b4c:	38c0022e 	bgeu	r7,r3,9b58 <_malloc_r+0x55c>
    9b50:	10800217 	ldw	r2,8(r2)
    9b54:	28bffb1e 	bne	r5,r2,9b44 <_malloc_r+0x548>
    9b58:	11400317 	ldw	r5,12(r2)
    9b5c:	98c00117 	ldw	r3,4(r19)
    9b60:	81400315 	stw	r5,12(r16)
    9b64:	80800215 	stw	r2,8(r16)
    9b68:	2c000215 	stw	r16,8(r5)
    9b6c:	14000315 	stw	r16,12(r2)
    9b70:	003ef806 	br	9754 <_malloc_r+0x158>
    9b74:	88c00054 	ori	r3,r17,1
    9b78:	80c00115 	stw	r3,4(r16)
    9b7c:	8463883a 	add	r17,r16,r17
    9b80:	34400515 	stw	r17,20(r6)
    9b84:	34400415 	stw	r17,16(r6)
    9b88:	10c00054 	ori	r3,r2,1
    9b8c:	8a000315 	stw	r8,12(r17)
    9b90:	8a000215 	stw	r8,8(r17)
    9b94:	88c00115 	stw	r3,4(r17)
    9b98:	88a3883a 	add	r17,r17,r2
    9b9c:	88800015 	stw	r2,0(r17)
    9ba0:	9009883a 	mov	r4,r18
    9ba4:	00132200 	call	13220 <__malloc_unlock>
    9ba8:	80800204 	addi	r2,r16,8
    9bac:	003f3c06 	br	98a0 <_malloc_r+0x2a4>
    9bb0:	30c00117 	ldw	r3,4(r6)
    9bb4:	003ee706 	br	9754 <_malloc_r+0x158>
    9bb8:	5ac00044 	addi	r11,r11,1
    9bbc:	588000cc 	andi	r2,r11,3
    9bc0:	31800204 	addi	r6,r6,8
    9bc4:	103efd1e 	bne	r2,zero,97bc <_malloc_r+0x1c0>
    9bc8:	00002406 	br	9c5c <_malloc_r+0x660>
    9bcc:	14000317 	ldw	r16,12(r2)
    9bd0:	143f251e 	bne	r2,r16,9868 <_malloc_r+0x26c>
    9bd4:	21000084 	addi	r4,r4,2
    9bd8:	003ebc06 	br	96cc <_malloc_r+0xd0>
    9bdc:	8085883a 	add	r2,r16,r2
    9be0:	10c00117 	ldw	r3,4(r2)
    9be4:	81000317 	ldw	r4,12(r16)
    9be8:	81400217 	ldw	r5,8(r16)
    9bec:	18c00054 	ori	r3,r3,1
    9bf0:	10c00115 	stw	r3,4(r2)
    9bf4:	29000315 	stw	r4,12(r5)
    9bf8:	21400215 	stw	r5,8(r4)
    9bfc:	9009883a 	mov	r4,r18
    9c00:	00132200 	call	13220 <__malloc_unlock>
    9c04:	80800204 	addi	r2,r16,8
    9c08:	003f2506 	br	98a0 <_malloc_r+0x2a4>
    9c0c:	12001704 	addi	r8,r2,92
    9c10:	11c016c4 	addi	r7,r2,91
    9c14:	4209883a 	add	r4,r8,r8
    9c18:	003e9606 	br	9674 <_malloc_r+0x78>
    9c1c:	3804d1ba 	srli	r2,r7,6
    9c20:	11400e44 	addi	r5,r2,57
    9c24:	10c00e04 	addi	r3,r2,56
    9c28:	294b883a 	add	r5,r5,r5
    9c2c:	003fbc06 	br	9b20 <_malloc_r+0x524>
    9c30:	84ff5926 	beq	r16,r19,9998 <_malloc_r+0x39c>
    9c34:	008000b4 	movhi	r2,2
    9c38:	10bff204 	addi	r2,r2,-56
    9c3c:	14000217 	ldw	r16,8(r2)
    9c40:	00bfff04 	movi	r2,-4
    9c44:	80c00117 	ldw	r3,4(r16)
    9c48:	1886703a 	and	r3,r3,r2
    9c4c:	003f9106 	br	9a94 <_malloc_r+0x498>
    9c50:	60800217 	ldw	r2,8(r12)
    9c54:	213fffc4 	addi	r4,r4,-1
    9c58:	1300651e 	bne	r2,r12,9df0 <_malloc_r+0x7f4>
    9c5c:	208000cc 	andi	r2,r4,3
    9c60:	633ffe04 	addi	r12,r12,-8
    9c64:	103ffa1e 	bne	r2,zero,9c50 <_malloc_r+0x654>
    9c68:	98800117 	ldw	r2,4(r19)
    9c6c:	0146303a 	nor	r3,zero,r5
    9c70:	1884703a 	and	r2,r3,r2
    9c74:	98800115 	stw	r2,4(r19)
    9c78:	294b883a 	add	r5,r5,r5
    9c7c:	117f2836 	bltu	r2,r5,9920 <_malloc_r+0x324>
    9c80:	283f2726 	beq	r5,zero,9920 <_malloc_r+0x324>
    9c84:	2886703a 	and	r3,r5,r2
    9c88:	5809883a 	mov	r4,r11
    9c8c:	183ec31e 	bne	r3,zero,979c <_malloc_r+0x1a0>
    9c90:	294b883a 	add	r5,r5,r5
    9c94:	2886703a 	and	r3,r5,r2
    9c98:	21000104 	addi	r4,r4,4
    9c9c:	183ffc26 	beq	r3,zero,9c90 <_malloc_r+0x694>
    9ca0:	003ebe06 	br	979c <_malloc_r+0x1a0>
    9ca4:	00c05504 	movi	r3,340
    9ca8:	18801236 	bltu	r3,r2,9cf4 <_malloc_r+0x6f8>
    9cac:	8804d3fa 	srli	r2,r17,15
    9cb0:	12001e04 	addi	r8,r2,120
    9cb4:	11c01dc4 	addi	r7,r2,119
    9cb8:	4209883a 	add	r4,r8,r8
    9cbc:	003e6d06 	br	9674 <_malloc_r+0x78>
    9cc0:	00c40004 	movi	r3,4096
    9cc4:	003f4606 	br	99e0 <_malloc_r+0x3e4>
    9cc8:	00800044 	movi	r2,1
    9ccc:	a0800115 	stw	r2,4(r20)
    9cd0:	003f7406 	br	9aa4 <_malloc_r+0x4a8>
    9cd4:	1805d0ba 	srai	r2,r3,2
    9cd8:	01c00044 	movi	r7,1
    9cdc:	30c00117 	ldw	r3,4(r6)
    9ce0:	388e983a 	sll	r7,r7,r2
    9ce4:	2805883a 	mov	r2,r5
    9ce8:	38c6b03a 	or	r3,r7,r3
    9cec:	30c00115 	stw	r3,4(r6)
    9cf0:	003f9b06 	br	9b60 <_malloc_r+0x564>
    9cf4:	00c15504 	movi	r3,1364
    9cf8:	18801a36 	bltu	r3,r2,9d64 <_malloc_r+0x768>
    9cfc:	8804d4ba 	srli	r2,r17,18
    9d00:	12001f44 	addi	r8,r2,125
    9d04:	11c01f04 	addi	r7,r2,124
    9d08:	4209883a 	add	r4,r8,r8
    9d0c:	003e5906 	br	9674 <_malloc_r+0x78>
    9d10:	ad400404 	addi	r21,r21,16
    9d14:	003f1706 	br	9974 <_malloc_r+0x378>
    9d18:	00c01504 	movi	r3,84
    9d1c:	18802336 	bltu	r3,r2,9dac <_malloc_r+0x7b0>
    9d20:	3804d33a 	srli	r2,r7,12
    9d24:	11401bc4 	addi	r5,r2,111
    9d28:	10c01b84 	addi	r3,r2,110
    9d2c:	294b883a 	add	r5,r5,r5
    9d30:	003f7b06 	br	9b20 <_malloc_r+0x524>
    9d34:	9c000217 	ldw	r16,8(r19)
    9d38:	00bfff04 	movi	r2,-4
    9d3c:	80c00117 	ldw	r3,4(r16)
    9d40:	1886703a 	and	r3,r3,r2
    9d44:	003f5306 	br	9a94 <_malloc_r+0x498>
    9d48:	3083ffcc 	andi	r2,r6,4095
    9d4c:	103f181e 	bne	r2,zero,99b0 <_malloc_r+0x3b4>
    9d50:	99000217 	ldw	r4,8(r19)
    9d54:	b545883a 	add	r2,r22,r21
    9d58:	10800054 	ori	r2,r2,1
    9d5c:	20800115 	stw	r2,4(r4)
    9d60:	003f3e06 	br	9a5c <_malloc_r+0x460>
    9d64:	01003f84 	movi	r4,254
    9d68:	02001fc4 	movi	r8,127
    9d6c:	01c01f84 	movi	r7,126
    9d70:	003e4006 	br	9674 <_malloc_r+0x78>
    9d74:	008000b4 	movhi	r2,2
    9d78:	10864004 	addi	r2,r2,6400
    9d7c:	15000015 	stw	r20,0(r2)
    9d80:	003f1106 	br	99c8 <_malloc_r+0x3cc>
    9d84:	00800044 	movi	r2,1
    9d88:	002b883a 	mov	r21,zero
    9d8c:	003f1f06 	br	9a0c <_malloc_r+0x410>
    9d90:	81400204 	addi	r5,r16,8
    9d94:	9009883a 	mov	r4,r18
    9d98:	0008ecc0 	call	8ecc <_free_r>
    9d9c:	008000b4 	movhi	r2,2
    9da0:	108e7204 	addi	r2,r2,14792
    9da4:	10c00017 	ldw	r3,0(r2)
    9da8:	003f2c06 	br	9a5c <_malloc_r+0x460>
    9dac:	00c05504 	movi	r3,340
    9db0:	18800536 	bltu	r3,r2,9dc8 <_malloc_r+0x7cc>
    9db4:	3804d3fa 	srli	r2,r7,15
    9db8:	11401e04 	addi	r5,r2,120
    9dbc:	10c01dc4 	addi	r3,r2,119
    9dc0:	294b883a 	add	r5,r5,r5
    9dc4:	003f5606 	br	9b20 <_malloc_r+0x524>
    9dc8:	00c15504 	movi	r3,1364
    9dcc:	18800536 	bltu	r3,r2,9de4 <_malloc_r+0x7e8>
    9dd0:	3804d4ba 	srli	r2,r7,18
    9dd4:	11401f44 	addi	r5,r2,125
    9dd8:	10c01f04 	addi	r3,r2,124
    9ddc:	294b883a 	add	r5,r5,r5
    9de0:	003f4f06 	br	9b20 <_malloc_r+0x524>
    9de4:	01403f84 	movi	r5,254
    9de8:	00c01f84 	movi	r3,126
    9dec:	003f4c06 	br	9b20 <_malloc_r+0x524>
    9df0:	98800117 	ldw	r2,4(r19)
    9df4:	003fa006 	br	9c78 <_malloc_r+0x67c>
    9df8:	8808d0fa 	srli	r4,r17,3
    9dfc:	20800044 	addi	r2,r4,1
    9e00:	1085883a 	add	r2,r2,r2
    9e04:	003e9006 	br	9848 <_malloc_r+0x24c>

00009e08 <memchr>:
    9e08:	208000cc 	andi	r2,r4,3
    9e0c:	280f883a 	mov	r7,r5
    9e10:	10003426 	beq	r2,zero,9ee4 <memchr+0xdc>
    9e14:	30bfffc4 	addi	r2,r6,-1
    9e18:	30001a26 	beq	r6,zero,9e84 <memchr+0x7c>
    9e1c:	20c00003 	ldbu	r3,0(r4)
    9e20:	29803fcc 	andi	r6,r5,255
    9e24:	30c0051e 	bne	r6,r3,9e3c <memchr+0x34>
    9e28:	00001806 	br	9e8c <memchr+0x84>
    9e2c:	10001526 	beq	r2,zero,9e84 <memchr+0x7c>
    9e30:	20c00003 	ldbu	r3,0(r4)
    9e34:	10bfffc4 	addi	r2,r2,-1
    9e38:	30c01426 	beq	r6,r3,9e8c <memchr+0x84>
    9e3c:	21000044 	addi	r4,r4,1
    9e40:	20c000cc 	andi	r3,r4,3
    9e44:	183ff91e 	bne	r3,zero,9e2c <memchr+0x24>
    9e48:	020000c4 	movi	r8,3
    9e4c:	40801136 	bltu	r8,r2,9e94 <memchr+0x8c>
    9e50:	10000c26 	beq	r2,zero,9e84 <memchr+0x7c>
    9e54:	20c00003 	ldbu	r3,0(r4)
    9e58:	29403fcc 	andi	r5,r5,255
    9e5c:	28c00b26 	beq	r5,r3,9e8c <memchr+0x84>
    9e60:	20c00044 	addi	r3,r4,1
    9e64:	39803fcc 	andi	r6,r7,255
    9e68:	2089883a 	add	r4,r4,r2
    9e6c:	00000306 	br	9e7c <memchr+0x74>
    9e70:	18c00044 	addi	r3,r3,1
    9e74:	197fffc3 	ldbu	r5,-1(r3)
    9e78:	31400526 	beq	r6,r5,9e90 <memchr+0x88>
    9e7c:	1805883a 	mov	r2,r3
    9e80:	20fffb1e 	bne	r4,r3,9e70 <memchr+0x68>
    9e84:	0005883a 	mov	r2,zero
    9e88:	f800283a 	ret
    9e8c:	2005883a 	mov	r2,r4
    9e90:	f800283a 	ret
    9e94:	28c03fcc 	andi	r3,r5,255
    9e98:	1812923a 	slli	r9,r3,8
    9e9c:	02ffbff4 	movhi	r11,65279
    9ea0:	02a02074 	movhi	r10,32897
    9ea4:	48d2b03a 	or	r9,r9,r3
    9ea8:	4806943a 	slli	r3,r9,16
    9eac:	5affbfc4 	addi	r11,r11,-257
    9eb0:	52a02004 	addi	r10,r10,-32640
    9eb4:	48d2b03a 	or	r9,r9,r3
    9eb8:	20c00017 	ldw	r3,0(r4)
    9ebc:	48c6f03a 	xor	r3,r9,r3
    9ec0:	1acd883a 	add	r6,r3,r11
    9ec4:	00c6303a 	nor	r3,zero,r3
    9ec8:	30c6703a 	and	r3,r6,r3
    9ecc:	1a86703a 	and	r3,r3,r10
    9ed0:	183fe01e 	bne	r3,zero,9e54 <memchr+0x4c>
    9ed4:	10bfff04 	addi	r2,r2,-4
    9ed8:	21000104 	addi	r4,r4,4
    9edc:	40bff636 	bltu	r8,r2,9eb8 <memchr+0xb0>
    9ee0:	003fdb06 	br	9e50 <memchr+0x48>
    9ee4:	3005883a 	mov	r2,r6
    9ee8:	003fd706 	br	9e48 <memchr+0x40>

00009eec <memcpy>:
    9eec:	defffd04 	addi	sp,sp,-12
    9ef0:	dfc00215 	stw	ra,8(sp)
    9ef4:	dc400115 	stw	r17,4(sp)
    9ef8:	dc000015 	stw	r16,0(sp)
    9efc:	00c003c4 	movi	r3,15
    9f00:	2005883a 	mov	r2,r4
    9f04:	1980452e 	bgeu	r3,r6,a01c <memcpy+0x130>
    9f08:	2906b03a 	or	r3,r5,r4
    9f0c:	18c000cc 	andi	r3,r3,3
    9f10:	1800441e 	bne	r3,zero,a024 <memcpy+0x138>
    9f14:	347ffc04 	addi	r17,r6,-16
    9f18:	8822d13a 	srli	r17,r17,4
    9f1c:	28c00104 	addi	r3,r5,4
    9f20:	23400104 	addi	r13,r4,4
    9f24:	8820913a 	slli	r16,r17,4
    9f28:	2b000204 	addi	r12,r5,8
    9f2c:	22c00204 	addi	r11,r4,8
    9f30:	84000504 	addi	r16,r16,20
    9f34:	2a800304 	addi	r10,r5,12
    9f38:	22400304 	addi	r9,r4,12
    9f3c:	2c21883a 	add	r16,r5,r16
    9f40:	2811883a 	mov	r8,r5
    9f44:	200f883a 	mov	r7,r4
    9f48:	41000017 	ldw	r4,0(r8)
    9f4c:	1fc00017 	ldw	ra,0(r3)
    9f50:	63c00017 	ldw	r15,0(r12)
    9f54:	39000015 	stw	r4,0(r7)
    9f58:	53800017 	ldw	r14,0(r10)
    9f5c:	6fc00015 	stw	ra,0(r13)
    9f60:	5bc00015 	stw	r15,0(r11)
    9f64:	4b800015 	stw	r14,0(r9)
    9f68:	18c00404 	addi	r3,r3,16
    9f6c:	39c00404 	addi	r7,r7,16
    9f70:	42000404 	addi	r8,r8,16
    9f74:	6b400404 	addi	r13,r13,16
    9f78:	63000404 	addi	r12,r12,16
    9f7c:	5ac00404 	addi	r11,r11,16
    9f80:	52800404 	addi	r10,r10,16
    9f84:	4a400404 	addi	r9,r9,16
    9f88:	1c3fef1e 	bne	r3,r16,9f48 <memcpy+0x5c>
    9f8c:	89c00044 	addi	r7,r17,1
    9f90:	380e913a 	slli	r7,r7,4
    9f94:	310003cc 	andi	r4,r6,15
    9f98:	02c000c4 	movi	r11,3
    9f9c:	11c7883a 	add	r3,r2,r7
    9fa0:	29cb883a 	add	r5,r5,r7
    9fa4:	5900212e 	bgeu	r11,r4,a02c <memcpy+0x140>
    9fa8:	1813883a 	mov	r9,r3
    9fac:	2811883a 	mov	r8,r5
    9fb0:	200f883a 	mov	r7,r4
    9fb4:	42800017 	ldw	r10,0(r8)
    9fb8:	4a400104 	addi	r9,r9,4
    9fbc:	39ffff04 	addi	r7,r7,-4
    9fc0:	4abfff15 	stw	r10,-4(r9)
    9fc4:	42000104 	addi	r8,r8,4
    9fc8:	59fffa36 	bltu	r11,r7,9fb4 <memcpy+0xc8>
    9fcc:	213fff04 	addi	r4,r4,-4
    9fd0:	2008d0ba 	srli	r4,r4,2
    9fd4:	318000cc 	andi	r6,r6,3
    9fd8:	21000044 	addi	r4,r4,1
    9fdc:	2109883a 	add	r4,r4,r4
    9fe0:	2109883a 	add	r4,r4,r4
    9fe4:	1907883a 	add	r3,r3,r4
    9fe8:	290b883a 	add	r5,r5,r4
    9fec:	30000626 	beq	r6,zero,a008 <memcpy+0x11c>
    9ff0:	198d883a 	add	r6,r3,r6
    9ff4:	29c00003 	ldbu	r7,0(r5)
    9ff8:	18c00044 	addi	r3,r3,1
    9ffc:	29400044 	addi	r5,r5,1
    a000:	19ffffc5 	stb	r7,-1(r3)
    a004:	19bffb1e 	bne	r3,r6,9ff4 <memcpy+0x108>
    a008:	dfc00217 	ldw	ra,8(sp)
    a00c:	dc400117 	ldw	r17,4(sp)
    a010:	dc000017 	ldw	r16,0(sp)
    a014:	dec00304 	addi	sp,sp,12
    a018:	f800283a 	ret
    a01c:	2007883a 	mov	r3,r4
    a020:	003ff206 	br	9fec <memcpy+0x100>
    a024:	2007883a 	mov	r3,r4
    a028:	003ff106 	br	9ff0 <memcpy+0x104>
    a02c:	200d883a 	mov	r6,r4
    a030:	003fee06 	br	9fec <memcpy+0x100>

0000a034 <memset>:
    a034:	20c000cc 	andi	r3,r4,3
    a038:	2005883a 	mov	r2,r4
    a03c:	18004426 	beq	r3,zero,a150 <memset+0x11c>
    a040:	31ffffc4 	addi	r7,r6,-1
    a044:	30004026 	beq	r6,zero,a148 <memset+0x114>
    a048:	2813883a 	mov	r9,r5
    a04c:	200d883a 	mov	r6,r4
    a050:	2007883a 	mov	r3,r4
    a054:	00000406 	br	a068 <memset+0x34>
    a058:	3a3fffc4 	addi	r8,r7,-1
    a05c:	31800044 	addi	r6,r6,1
    a060:	38003926 	beq	r7,zero,a148 <memset+0x114>
    a064:	400f883a 	mov	r7,r8
    a068:	18c00044 	addi	r3,r3,1
    a06c:	32400005 	stb	r9,0(r6)
    a070:	1a0000cc 	andi	r8,r3,3
    a074:	403ff81e 	bne	r8,zero,a058 <memset+0x24>
    a078:	010000c4 	movi	r4,3
    a07c:	21c02d2e 	bgeu	r4,r7,a134 <memset+0x100>
    a080:	29003fcc 	andi	r4,r5,255
    a084:	200c923a 	slli	r6,r4,8
    a088:	3108b03a 	or	r4,r6,r4
    a08c:	200c943a 	slli	r6,r4,16
    a090:	218cb03a 	or	r6,r4,r6
    a094:	010003c4 	movi	r4,15
    a098:	21c0182e 	bgeu	r4,r7,a0fc <memset+0xc8>
    a09c:	3b3ffc04 	addi	r12,r7,-16
    a0a0:	6018d13a 	srli	r12,r12,4
    a0a4:	1a000104 	addi	r8,r3,4
    a0a8:	1ac00204 	addi	r11,r3,8
    a0ac:	6008913a 	slli	r4,r12,4
    a0b0:	1a800304 	addi	r10,r3,12
    a0b4:	1813883a 	mov	r9,r3
    a0b8:	21000504 	addi	r4,r4,20
    a0bc:	1909883a 	add	r4,r3,r4
    a0c0:	49800015 	stw	r6,0(r9)
    a0c4:	41800015 	stw	r6,0(r8)
    a0c8:	59800015 	stw	r6,0(r11)
    a0cc:	51800015 	stw	r6,0(r10)
    a0d0:	42000404 	addi	r8,r8,16
    a0d4:	4a400404 	addi	r9,r9,16
    a0d8:	5ac00404 	addi	r11,r11,16
    a0dc:	52800404 	addi	r10,r10,16
    a0e0:	413ff71e 	bne	r8,r4,a0c0 <memset+0x8c>
    a0e4:	63000044 	addi	r12,r12,1
    a0e8:	6018913a 	slli	r12,r12,4
    a0ec:	39c003cc 	andi	r7,r7,15
    a0f0:	010000c4 	movi	r4,3
    a0f4:	1b07883a 	add	r3,r3,r12
    a0f8:	21c00e2e 	bgeu	r4,r7,a134 <memset+0x100>
    a0fc:	1813883a 	mov	r9,r3
    a100:	3811883a 	mov	r8,r7
    a104:	010000c4 	movi	r4,3
    a108:	49800015 	stw	r6,0(r9)
    a10c:	423fff04 	addi	r8,r8,-4
    a110:	4a400104 	addi	r9,r9,4
    a114:	223ffc36 	bltu	r4,r8,a108 <memset+0xd4>
    a118:	393fff04 	addi	r4,r7,-4
    a11c:	2008d0ba 	srli	r4,r4,2
    a120:	39c000cc 	andi	r7,r7,3
    a124:	21000044 	addi	r4,r4,1
    a128:	2109883a 	add	r4,r4,r4
    a12c:	2109883a 	add	r4,r4,r4
    a130:	1907883a 	add	r3,r3,r4
    a134:	38000526 	beq	r7,zero,a14c <memset+0x118>
    a138:	19cf883a 	add	r7,r3,r7
    a13c:	19400005 	stb	r5,0(r3)
    a140:	18c00044 	addi	r3,r3,1
    a144:	38fffd1e 	bne	r7,r3,a13c <memset+0x108>
    a148:	f800283a 	ret
    a14c:	f800283a 	ret
    a150:	2007883a 	mov	r3,r4
    a154:	300f883a 	mov	r7,r6
    a158:	003fc706 	br	a078 <memset+0x44>

0000a15c <_Balloc>:
    a15c:	20801317 	ldw	r2,76(r4)
    a160:	defffc04 	addi	sp,sp,-16
    a164:	dc400115 	stw	r17,4(sp)
    a168:	dc000015 	stw	r16,0(sp)
    a16c:	dfc00315 	stw	ra,12(sp)
    a170:	dc800215 	stw	r18,8(sp)
    a174:	2023883a 	mov	r17,r4
    a178:	2821883a 	mov	r16,r5
    a17c:	10000f26 	beq	r2,zero,a1bc <_Balloc+0x60>
    a180:	8407883a 	add	r3,r16,r16
    a184:	18c7883a 	add	r3,r3,r3
    a188:	10c7883a 	add	r3,r2,r3
    a18c:	18800017 	ldw	r2,0(r3)
    a190:	10001126 	beq	r2,zero,a1d8 <_Balloc+0x7c>
    a194:	11000017 	ldw	r4,0(r2)
    a198:	19000015 	stw	r4,0(r3)
    a19c:	10000415 	stw	zero,16(r2)
    a1a0:	10000315 	stw	zero,12(r2)
    a1a4:	dfc00317 	ldw	ra,12(sp)
    a1a8:	dc800217 	ldw	r18,8(sp)
    a1ac:	dc400117 	ldw	r17,4(sp)
    a1b0:	dc000017 	ldw	r16,0(sp)
    a1b4:	dec00404 	addi	sp,sp,16
    a1b8:	f800283a 	ret
    a1bc:	01800844 	movi	r6,33
    a1c0:	01400104 	movi	r5,4
    a1c4:	000dfd80 	call	dfd8 <_calloc_r>
    a1c8:	88801315 	stw	r2,76(r17)
    a1cc:	103fec1e 	bne	r2,zero,a180 <_Balloc+0x24>
    a1d0:	0005883a 	mov	r2,zero
    a1d4:	003ff306 	br	a1a4 <_Balloc+0x48>
    a1d8:	01400044 	movi	r5,1
    a1dc:	2c24983a 	sll	r18,r5,r16
    a1e0:	8809883a 	mov	r4,r17
    a1e4:	91800144 	addi	r6,r18,5
    a1e8:	318d883a 	add	r6,r6,r6
    a1ec:	318d883a 	add	r6,r6,r6
    a1f0:	000dfd80 	call	dfd8 <_calloc_r>
    a1f4:	103ff626 	beq	r2,zero,a1d0 <_Balloc+0x74>
    a1f8:	14000115 	stw	r16,4(r2)
    a1fc:	14800215 	stw	r18,8(r2)
    a200:	003fe606 	br	a19c <_Balloc+0x40>

0000a204 <_Bfree>:
    a204:	28000826 	beq	r5,zero,a228 <_Bfree+0x24>
    a208:	28c00117 	ldw	r3,4(r5)
    a20c:	20801317 	ldw	r2,76(r4)
    a210:	18c7883a 	add	r3,r3,r3
    a214:	18c7883a 	add	r3,r3,r3
    a218:	10c5883a 	add	r2,r2,r3
    a21c:	10c00017 	ldw	r3,0(r2)
    a220:	28c00015 	stw	r3,0(r5)
    a224:	11400015 	stw	r5,0(r2)
    a228:	f800283a 	ret

0000a22c <__multadd>:
    a22c:	defffa04 	addi	sp,sp,-24
    a230:	dc800315 	stw	r18,12(sp)
    a234:	dc400215 	stw	r17,8(sp)
    a238:	dc000115 	stw	r16,4(sp)
    a23c:	2823883a 	mov	r17,r5
    a240:	2c000417 	ldw	r16,16(r5)
    a244:	dfc00515 	stw	ra,20(sp)
    a248:	dcc00415 	stw	r19,16(sp)
    a24c:	2025883a 	mov	r18,r4
    a250:	29400504 	addi	r5,r5,20
    a254:	0011883a 	mov	r8,zero
    a258:	28c00017 	ldw	r3,0(r5)
    a25c:	29400104 	addi	r5,r5,4
    a260:	42000044 	addi	r8,r8,1
    a264:	18bfffcc 	andi	r2,r3,65535
    a268:	1185383a 	mul	r2,r2,r6
    a26c:	1806d43a 	srli	r3,r3,16
    a270:	11cf883a 	add	r7,r2,r7
    a274:	3808d43a 	srli	r4,r7,16
    a278:	1987383a 	mul	r3,r3,r6
    a27c:	38bfffcc 	andi	r2,r7,65535
    a280:	1907883a 	add	r3,r3,r4
    a284:	1808943a 	slli	r4,r3,16
    a288:	180ed43a 	srli	r7,r3,16
    a28c:	2085883a 	add	r2,r4,r2
    a290:	28bfff15 	stw	r2,-4(r5)
    a294:	443ff016 	blt	r8,r16,a258 <__multadd+0x2c>
    a298:	38000926 	beq	r7,zero,a2c0 <__multadd+0x94>
    a29c:	88800217 	ldw	r2,8(r17)
    a2a0:	80800f0e 	bge	r16,r2,a2e0 <__multadd+0xb4>
    a2a4:	80800144 	addi	r2,r16,5
    a2a8:	1085883a 	add	r2,r2,r2
    a2ac:	1085883a 	add	r2,r2,r2
    a2b0:	8885883a 	add	r2,r17,r2
    a2b4:	11c00015 	stw	r7,0(r2)
    a2b8:	84000044 	addi	r16,r16,1
    a2bc:	8c000415 	stw	r16,16(r17)
    a2c0:	8805883a 	mov	r2,r17
    a2c4:	dfc00517 	ldw	ra,20(sp)
    a2c8:	dcc00417 	ldw	r19,16(sp)
    a2cc:	dc800317 	ldw	r18,12(sp)
    a2d0:	dc400217 	ldw	r17,8(sp)
    a2d4:	dc000117 	ldw	r16,4(sp)
    a2d8:	dec00604 	addi	sp,sp,24
    a2dc:	f800283a 	ret
    a2e0:	89400117 	ldw	r5,4(r17)
    a2e4:	9009883a 	mov	r4,r18
    a2e8:	d9c00015 	stw	r7,0(sp)
    a2ec:	29400044 	addi	r5,r5,1
    a2f0:	000a15c0 	call	a15c <_Balloc>
    a2f4:	89800417 	ldw	r6,16(r17)
    a2f8:	89400304 	addi	r5,r17,12
    a2fc:	11000304 	addi	r4,r2,12
    a300:	31800084 	addi	r6,r6,2
    a304:	318d883a 	add	r6,r6,r6
    a308:	318d883a 	add	r6,r6,r6
    a30c:	1027883a 	mov	r19,r2
    a310:	0009eec0 	call	9eec <memcpy>
    a314:	d9c00017 	ldw	r7,0(sp)
    a318:	88000a26 	beq	r17,zero,a344 <__multadd+0x118>
    a31c:	88c00117 	ldw	r3,4(r17)
    a320:	90801317 	ldw	r2,76(r18)
    a324:	18c7883a 	add	r3,r3,r3
    a328:	18c7883a 	add	r3,r3,r3
    a32c:	10c5883a 	add	r2,r2,r3
    a330:	10c00017 	ldw	r3,0(r2)
    a334:	88c00015 	stw	r3,0(r17)
    a338:	14400015 	stw	r17,0(r2)
    a33c:	9823883a 	mov	r17,r19
    a340:	003fd806 	br	a2a4 <__multadd+0x78>
    a344:	9823883a 	mov	r17,r19
    a348:	003fd606 	br	a2a4 <__multadd+0x78>

0000a34c <__s2b>:
    a34c:	defff904 	addi	sp,sp,-28
    a350:	dc400115 	stw	r17,4(sp)
    a354:	dc000015 	stw	r16,0(sp)
    a358:	2023883a 	mov	r17,r4
    a35c:	2821883a 	mov	r16,r5
    a360:	39000204 	addi	r4,r7,8
    a364:	01400244 	movi	r5,9
    a368:	dcc00315 	stw	r19,12(sp)
    a36c:	dc800215 	stw	r18,8(sp)
    a370:	dfc00615 	stw	ra,24(sp)
    a374:	dd400515 	stw	r21,20(sp)
    a378:	dd000415 	stw	r20,16(sp)
    a37c:	3825883a 	mov	r18,r7
    a380:	3027883a 	mov	r19,r6
    a384:	000fe840 	call	fe84 <__divsi3>
    a388:	00c00044 	movi	r3,1
    a38c:	000b883a 	mov	r5,zero
    a390:	1880030e 	bge	r3,r2,a3a0 <__s2b+0x54>
    a394:	18c7883a 	add	r3,r3,r3
    a398:	29400044 	addi	r5,r5,1
    a39c:	18bffd16 	blt	r3,r2,a394 <__s2b+0x48>
    a3a0:	8809883a 	mov	r4,r17
    a3a4:	000a15c0 	call	a15c <_Balloc>
    a3a8:	d8c00717 	ldw	r3,28(sp)
    a3ac:	10c00515 	stw	r3,20(r2)
    a3b0:	00c00044 	movi	r3,1
    a3b4:	10c00415 	stw	r3,16(r2)
    a3b8:	00c00244 	movi	r3,9
    a3bc:	1cc0210e 	bge	r3,r19,a444 <__s2b+0xf8>
    a3c0:	80eb883a 	add	r21,r16,r3
    a3c4:	a829883a 	mov	r20,r21
    a3c8:	84e1883a 	add	r16,r16,r19
    a3cc:	a1c00007 	ldb	r7,0(r20)
    a3d0:	01800284 	movi	r6,10
    a3d4:	a5000044 	addi	r20,r20,1
    a3d8:	100b883a 	mov	r5,r2
    a3dc:	39fff404 	addi	r7,r7,-48
    a3e0:	8809883a 	mov	r4,r17
    a3e4:	000a22c0 	call	a22c <__multadd>
    a3e8:	a43ff81e 	bne	r20,r16,a3cc <__s2b+0x80>
    a3ec:	ace1883a 	add	r16,r21,r19
    a3f0:	843ffe04 	addi	r16,r16,-8
    a3f4:	9c800a0e 	bge	r19,r18,a420 <__s2b+0xd4>
    a3f8:	94e5c83a 	sub	r18,r18,r19
    a3fc:	84a5883a 	add	r18,r16,r18
    a400:	81c00007 	ldb	r7,0(r16)
    a404:	01800284 	movi	r6,10
    a408:	84000044 	addi	r16,r16,1
    a40c:	100b883a 	mov	r5,r2
    a410:	39fff404 	addi	r7,r7,-48
    a414:	8809883a 	mov	r4,r17
    a418:	000a22c0 	call	a22c <__multadd>
    a41c:	84bff81e 	bne	r16,r18,a400 <__s2b+0xb4>
    a420:	dfc00617 	ldw	ra,24(sp)
    a424:	dd400517 	ldw	r21,20(sp)
    a428:	dd000417 	ldw	r20,16(sp)
    a42c:	dcc00317 	ldw	r19,12(sp)
    a430:	dc800217 	ldw	r18,8(sp)
    a434:	dc400117 	ldw	r17,4(sp)
    a438:	dc000017 	ldw	r16,0(sp)
    a43c:	dec00704 	addi	sp,sp,28
    a440:	f800283a 	ret
    a444:	84000284 	addi	r16,r16,10
    a448:	1827883a 	mov	r19,r3
    a44c:	003fe906 	br	a3f4 <__s2b+0xa8>

0000a450 <__hi0bits>:
    a450:	20bfffec 	andhi	r2,r4,65535
    a454:	1000141e 	bne	r2,zero,a4a8 <__hi0bits+0x58>
    a458:	2008943a 	slli	r4,r4,16
    a45c:	00800404 	movi	r2,16
    a460:	20ffc02c 	andhi	r3,r4,65280
    a464:	1800021e 	bne	r3,zero,a470 <__hi0bits+0x20>
    a468:	2008923a 	slli	r4,r4,8
    a46c:	10800204 	addi	r2,r2,8
    a470:	20fc002c 	andhi	r3,r4,61440
    a474:	1800021e 	bne	r3,zero,a480 <__hi0bits+0x30>
    a478:	2008913a 	slli	r4,r4,4
    a47c:	10800104 	addi	r2,r2,4
    a480:	20f0002c 	andhi	r3,r4,49152
    a484:	1800031e 	bne	r3,zero,a494 <__hi0bits+0x44>
    a488:	2109883a 	add	r4,r4,r4
    a48c:	10800084 	addi	r2,r2,2
    a490:	2109883a 	add	r4,r4,r4
    a494:	20000316 	blt	r4,zero,a4a4 <__hi0bits+0x54>
    a498:	2110002c 	andhi	r4,r4,16384
    a49c:	2000041e 	bne	r4,zero,a4b0 <__hi0bits+0x60>
    a4a0:	00800804 	movi	r2,32
    a4a4:	f800283a 	ret
    a4a8:	0005883a 	mov	r2,zero
    a4ac:	003fec06 	br	a460 <__hi0bits+0x10>
    a4b0:	10800044 	addi	r2,r2,1
    a4b4:	f800283a 	ret

0000a4b8 <__lo0bits>:
    a4b8:	20c00017 	ldw	r3,0(r4)
    a4bc:	188001cc 	andi	r2,r3,7
    a4c0:	10000826 	beq	r2,zero,a4e4 <__lo0bits+0x2c>
    a4c4:	1880004c 	andi	r2,r3,1
    a4c8:	1000211e 	bne	r2,zero,a550 <__lo0bits+0x98>
    a4cc:	1880008c 	andi	r2,r3,2
    a4d0:	1000211e 	bne	r2,zero,a558 <__lo0bits+0xa0>
    a4d4:	1806d0ba 	srli	r3,r3,2
    a4d8:	00800084 	movi	r2,2
    a4dc:	20c00015 	stw	r3,0(r4)
    a4e0:	f800283a 	ret
    a4e4:	18bfffcc 	andi	r2,r3,65535
    a4e8:	10001326 	beq	r2,zero,a538 <__lo0bits+0x80>
    a4ec:	0005883a 	mov	r2,zero
    a4f0:	19403fcc 	andi	r5,r3,255
    a4f4:	2800021e 	bne	r5,zero,a500 <__lo0bits+0x48>
    a4f8:	1806d23a 	srli	r3,r3,8
    a4fc:	10800204 	addi	r2,r2,8
    a500:	194003cc 	andi	r5,r3,15
    a504:	2800021e 	bne	r5,zero,a510 <__lo0bits+0x58>
    a508:	1806d13a 	srli	r3,r3,4
    a50c:	10800104 	addi	r2,r2,4
    a510:	194000cc 	andi	r5,r3,3
    a514:	2800021e 	bne	r5,zero,a520 <__lo0bits+0x68>
    a518:	1806d0ba 	srli	r3,r3,2
    a51c:	10800084 	addi	r2,r2,2
    a520:	1940004c 	andi	r5,r3,1
    a524:	2800081e 	bne	r5,zero,a548 <__lo0bits+0x90>
    a528:	1806d07a 	srli	r3,r3,1
    a52c:	1800051e 	bne	r3,zero,a544 <__lo0bits+0x8c>
    a530:	00800804 	movi	r2,32
    a534:	f800283a 	ret
    a538:	1806d43a 	srli	r3,r3,16
    a53c:	00800404 	movi	r2,16
    a540:	003feb06 	br	a4f0 <__lo0bits+0x38>
    a544:	10800044 	addi	r2,r2,1
    a548:	20c00015 	stw	r3,0(r4)
    a54c:	f800283a 	ret
    a550:	0005883a 	mov	r2,zero
    a554:	f800283a 	ret
    a558:	1806d07a 	srli	r3,r3,1
    a55c:	00800044 	movi	r2,1
    a560:	20c00015 	stw	r3,0(r4)
    a564:	f800283a 	ret

0000a568 <__i2b>:
    a568:	defffd04 	addi	sp,sp,-12
    a56c:	dc000015 	stw	r16,0(sp)
    a570:	04000044 	movi	r16,1
    a574:	dc400115 	stw	r17,4(sp)
    a578:	2823883a 	mov	r17,r5
    a57c:	800b883a 	mov	r5,r16
    a580:	dfc00215 	stw	ra,8(sp)
    a584:	000a15c0 	call	a15c <_Balloc>
    a588:	14400515 	stw	r17,20(r2)
    a58c:	14000415 	stw	r16,16(r2)
    a590:	dfc00217 	ldw	ra,8(sp)
    a594:	dc400117 	ldw	r17,4(sp)
    a598:	dc000017 	ldw	r16,0(sp)
    a59c:	dec00304 	addi	sp,sp,12
    a5a0:	f800283a 	ret

0000a5a4 <__multiply>:
    a5a4:	defffa04 	addi	sp,sp,-24
    a5a8:	dcc00315 	stw	r19,12(sp)
    a5ac:	dc800215 	stw	r18,8(sp)
    a5b0:	34c00417 	ldw	r19,16(r6)
    a5b4:	2c800417 	ldw	r18,16(r5)
    a5b8:	dd000415 	stw	r20,16(sp)
    a5bc:	dc400115 	stw	r17,4(sp)
    a5c0:	dfc00515 	stw	ra,20(sp)
    a5c4:	dc000015 	stw	r16,0(sp)
    a5c8:	2829883a 	mov	r20,r5
    a5cc:	3023883a 	mov	r17,r6
    a5d0:	94c0050e 	bge	r18,r19,a5e8 <__multiply+0x44>
    a5d4:	9007883a 	mov	r3,r18
    a5d8:	3029883a 	mov	r20,r6
    a5dc:	9825883a 	mov	r18,r19
    a5e0:	2823883a 	mov	r17,r5
    a5e4:	1827883a 	mov	r19,r3
    a5e8:	a0800217 	ldw	r2,8(r20)
    a5ec:	94e1883a 	add	r16,r18,r19
    a5f0:	a1400117 	ldw	r5,4(r20)
    a5f4:	1400010e 	bge	r2,r16,a5fc <__multiply+0x58>
    a5f8:	29400044 	addi	r5,r5,1
    a5fc:	000a15c0 	call	a15c <_Balloc>
    a600:	8415883a 	add	r10,r16,r16
    a604:	12c00504 	addi	r11,r2,20
    a608:	5295883a 	add	r10,r10,r10
    a60c:	5a95883a 	add	r10,r11,r10
    a610:	5807883a 	mov	r3,r11
    a614:	5a80032e 	bgeu	r11,r10,a624 <__multiply+0x80>
    a618:	18000015 	stw	zero,0(r3)
    a61c:	18c00104 	addi	r3,r3,4
    a620:	1abffd36 	bltu	r3,r10,a618 <__multiply+0x74>
    a624:	9ce7883a 	add	r19,r19,r19
    a628:	94a5883a 	add	r18,r18,r18
    a62c:	89800504 	addi	r6,r17,20
    a630:	9ce7883a 	add	r19,r19,r19
    a634:	a3400504 	addi	r13,r20,20
    a638:	94a5883a 	add	r18,r18,r18
    a63c:	34d9883a 	add	r12,r6,r19
    a640:	6c93883a 	add	r9,r13,r18
    a644:	3300422e 	bgeu	r6,r12,a750 <__multiply+0x1ac>
    a648:	37c00017 	ldw	ra,0(r6)
    a64c:	fbffffcc 	andi	r15,ra,65535
    a650:	78001b26 	beq	r15,zero,a6c0 <__multiply+0x11c>
    a654:	5811883a 	mov	r8,r11
    a658:	681d883a 	mov	r14,r13
    a65c:	000f883a 	mov	r7,zero
    a660:	71000017 	ldw	r4,0(r14)
    a664:	40c00017 	ldw	r3,0(r8)
    a668:	73800104 	addi	r14,r14,4
    a66c:	217fffcc 	andi	r5,r4,65535
    a670:	2bcb383a 	mul	r5,r5,r15
    a674:	2008d43a 	srli	r4,r4,16
    a678:	1c7fffcc 	andi	r17,r3,65535
    a67c:	2c4b883a 	add	r5,r5,r17
    a680:	29cb883a 	add	r5,r5,r7
    a684:	23c9383a 	mul	r4,r4,r15
    a688:	1806d43a 	srli	r3,r3,16
    a68c:	280ed43a 	srli	r7,r5,16
    a690:	297fffcc 	andi	r5,r5,65535
    a694:	20c7883a 	add	r3,r4,r3
    a698:	19c7883a 	add	r3,r3,r7
    a69c:	1808943a 	slli	r4,r3,16
    a6a0:	4023883a 	mov	r17,r8
    a6a4:	180ed43a 	srli	r7,r3,16
    a6a8:	214ab03a 	or	r5,r4,r5
    a6ac:	41400015 	stw	r5,0(r8)
    a6b0:	42000104 	addi	r8,r8,4
    a6b4:	727fea36 	bltu	r14,r9,a660 <__multiply+0xbc>
    a6b8:	89c00115 	stw	r7,4(r17)
    a6bc:	37c00017 	ldw	ra,0(r6)
    a6c0:	f83ed43a 	srli	ra,ra,16
    a6c4:	f8001f26 	beq	ra,zero,a744 <__multiply+0x1a0>
    a6c8:	58c00017 	ldw	r3,0(r11)
    a6cc:	681d883a 	mov	r14,r13
    a6d0:	581f883a 	mov	r15,r11
    a6d4:	1811883a 	mov	r8,r3
    a6d8:	5825883a 	mov	r18,r11
    a6dc:	000f883a 	mov	r7,zero
    a6e0:	00000106 	br	a6e8 <__multiply+0x144>
    a6e4:	8825883a 	mov	r18,r17
    a6e8:	7140000b 	ldhu	r5,0(r14)
    a6ec:	4010d43a 	srli	r8,r8,16
    a6f0:	193fffcc 	andi	r4,r3,65535
    a6f4:	2fcb383a 	mul	r5,r5,ra
    a6f8:	7bc00104 	addi	r15,r15,4
    a6fc:	73800104 	addi	r14,r14,4
    a700:	2a0b883a 	add	r5,r5,r8
    a704:	29cb883a 	add	r5,r5,r7
    a708:	2806943a 	slli	r3,r5,16
    a70c:	94400104 	addi	r17,r18,4
    a710:	280ad43a 	srli	r5,r5,16
    a714:	1908b03a 	or	r4,r3,r4
    a718:	793fff15 	stw	r4,-4(r15)
    a71c:	70ffff17 	ldw	r3,-4(r14)
    a720:	8a000017 	ldw	r8,0(r17)
    a724:	1806d43a 	srli	r3,r3,16
    a728:	413fffcc 	andi	r4,r8,65535
    a72c:	1fc7383a 	mul	r3,r3,ra
    a730:	1907883a 	add	r3,r3,r4
    a734:	1947883a 	add	r3,r3,r5
    a738:	180ed43a 	srli	r7,r3,16
    a73c:	727fe936 	bltu	r14,r9,a6e4 <__multiply+0x140>
    a740:	90c00115 	stw	r3,4(r18)
    a744:	31800104 	addi	r6,r6,4
    a748:	5ac00104 	addi	r11,r11,4
    a74c:	333fbe36 	bltu	r6,r12,a648 <__multiply+0xa4>
    a750:	0400090e 	bge	zero,r16,a778 <__multiply+0x1d4>
    a754:	50ffff17 	ldw	r3,-4(r10)
    a758:	52bfff04 	addi	r10,r10,-4
    a75c:	18000326 	beq	r3,zero,a76c <__multiply+0x1c8>
    a760:	00000506 	br	a778 <__multiply+0x1d4>
    a764:	50c00017 	ldw	r3,0(r10)
    a768:	1800031e 	bne	r3,zero,a778 <__multiply+0x1d4>
    a76c:	843fffc4 	addi	r16,r16,-1
    a770:	52bfff04 	addi	r10,r10,-4
    a774:	803ffb1e 	bne	r16,zero,a764 <__multiply+0x1c0>
    a778:	14000415 	stw	r16,16(r2)
    a77c:	dfc00517 	ldw	ra,20(sp)
    a780:	dd000417 	ldw	r20,16(sp)
    a784:	dcc00317 	ldw	r19,12(sp)
    a788:	dc800217 	ldw	r18,8(sp)
    a78c:	dc400117 	ldw	r17,4(sp)
    a790:	dc000017 	ldw	r16,0(sp)
    a794:	dec00604 	addi	sp,sp,24
    a798:	f800283a 	ret

0000a79c <__pow5mult>:
    a79c:	defffa04 	addi	sp,sp,-24
    a7a0:	dcc00315 	stw	r19,12(sp)
    a7a4:	dc000015 	stw	r16,0(sp)
    a7a8:	dfc00515 	stw	ra,20(sp)
    a7ac:	dd000415 	stw	r20,16(sp)
    a7b0:	dc800215 	stw	r18,8(sp)
    a7b4:	dc400115 	stw	r17,4(sp)
    a7b8:	308000cc 	andi	r2,r6,3
    a7bc:	3021883a 	mov	r16,r6
    a7c0:	2027883a 	mov	r19,r4
    a7c4:	10002f1e 	bne	r2,zero,a884 <__pow5mult+0xe8>
    a7c8:	2825883a 	mov	r18,r5
    a7cc:	8021d0ba 	srai	r16,r16,2
    a7d0:	80001a26 	beq	r16,zero,a83c <__pow5mult+0xa0>
    a7d4:	9c401217 	ldw	r17,72(r19)
    a7d8:	8800061e 	bne	r17,zero,a7f4 <__pow5mult+0x58>
    a7dc:	00003406 	br	a8b0 <__pow5mult+0x114>
    a7e0:	8021d07a 	srai	r16,r16,1
    a7e4:	80001526 	beq	r16,zero,a83c <__pow5mult+0xa0>
    a7e8:	88800017 	ldw	r2,0(r17)
    a7ec:	10001c26 	beq	r2,zero,a860 <__pow5mult+0xc4>
    a7f0:	1023883a 	mov	r17,r2
    a7f4:	8080004c 	andi	r2,r16,1
    a7f8:	103ff926 	beq	r2,zero,a7e0 <__pow5mult+0x44>
    a7fc:	880d883a 	mov	r6,r17
    a800:	900b883a 	mov	r5,r18
    a804:	9809883a 	mov	r4,r19
    a808:	000a5a40 	call	a5a4 <__multiply>
    a80c:	90001b26 	beq	r18,zero,a87c <__pow5mult+0xe0>
    a810:	91000117 	ldw	r4,4(r18)
    a814:	98c01317 	ldw	r3,76(r19)
    a818:	8021d07a 	srai	r16,r16,1
    a81c:	2109883a 	add	r4,r4,r4
    a820:	2109883a 	add	r4,r4,r4
    a824:	1907883a 	add	r3,r3,r4
    a828:	19000017 	ldw	r4,0(r3)
    a82c:	91000015 	stw	r4,0(r18)
    a830:	1c800015 	stw	r18,0(r3)
    a834:	1025883a 	mov	r18,r2
    a838:	803feb1e 	bne	r16,zero,a7e8 <__pow5mult+0x4c>
    a83c:	9005883a 	mov	r2,r18
    a840:	dfc00517 	ldw	ra,20(sp)
    a844:	dd000417 	ldw	r20,16(sp)
    a848:	dcc00317 	ldw	r19,12(sp)
    a84c:	dc800217 	ldw	r18,8(sp)
    a850:	dc400117 	ldw	r17,4(sp)
    a854:	dc000017 	ldw	r16,0(sp)
    a858:	dec00604 	addi	sp,sp,24
    a85c:	f800283a 	ret
    a860:	880d883a 	mov	r6,r17
    a864:	880b883a 	mov	r5,r17
    a868:	9809883a 	mov	r4,r19
    a86c:	000a5a40 	call	a5a4 <__multiply>
    a870:	88800015 	stw	r2,0(r17)
    a874:	10000015 	stw	zero,0(r2)
    a878:	003fdd06 	br	a7f0 <__pow5mult+0x54>
    a87c:	1025883a 	mov	r18,r2
    a880:	003fd706 	br	a7e0 <__pow5mult+0x44>
    a884:	10bfffc4 	addi	r2,r2,-1
    a888:	1085883a 	add	r2,r2,r2
    a88c:	00c000b4 	movhi	r3,2
    a890:	18fd7904 	addi	r3,r3,-2588
    a894:	1085883a 	add	r2,r2,r2
    a898:	1885883a 	add	r2,r3,r2
    a89c:	11800017 	ldw	r6,0(r2)
    a8a0:	000f883a 	mov	r7,zero
    a8a4:	000a22c0 	call	a22c <__multadd>
    a8a8:	1025883a 	mov	r18,r2
    a8ac:	003fc706 	br	a7cc <__pow5mult+0x30>
    a8b0:	05000044 	movi	r20,1
    a8b4:	a00b883a 	mov	r5,r20
    a8b8:	9809883a 	mov	r4,r19
    a8bc:	000a15c0 	call	a15c <_Balloc>
    a8c0:	1023883a 	mov	r17,r2
    a8c4:	00809c44 	movi	r2,625
    a8c8:	88800515 	stw	r2,20(r17)
    a8cc:	8d000415 	stw	r20,16(r17)
    a8d0:	9c401215 	stw	r17,72(r19)
    a8d4:	88000015 	stw	zero,0(r17)
    a8d8:	003fc606 	br	a7f4 <__pow5mult+0x58>

0000a8dc <__lshift>:
    a8dc:	defff904 	addi	sp,sp,-28
    a8e0:	dd400515 	stw	r21,20(sp)
    a8e4:	dcc00315 	stw	r19,12(sp)
    a8e8:	302bd17a 	srai	r21,r6,5
    a8ec:	2cc00417 	ldw	r19,16(r5)
    a8f0:	28800217 	ldw	r2,8(r5)
    a8f4:	dd000415 	stw	r20,16(sp)
    a8f8:	ace7883a 	add	r19,r21,r19
    a8fc:	dc800215 	stw	r18,8(sp)
    a900:	dc400115 	stw	r17,4(sp)
    a904:	dc000015 	stw	r16,0(sp)
    a908:	dfc00615 	stw	ra,24(sp)
    a90c:	9c000044 	addi	r16,r19,1
    a910:	2823883a 	mov	r17,r5
    a914:	3029883a 	mov	r20,r6
    a918:	2025883a 	mov	r18,r4
    a91c:	29400117 	ldw	r5,4(r5)
    a920:	1400030e 	bge	r2,r16,a930 <__lshift+0x54>
    a924:	1085883a 	add	r2,r2,r2
    a928:	29400044 	addi	r5,r5,1
    a92c:	143ffd16 	blt	r2,r16,a924 <__lshift+0x48>
    a930:	9009883a 	mov	r4,r18
    a934:	000a15c0 	call	a15c <_Balloc>
    a938:	10c00504 	addi	r3,r2,20
    a93c:	0540070e 	bge	zero,r21,a95c <__lshift+0x80>
    a940:	ad6b883a 	add	r21,r21,r21
    a944:	ad6b883a 	add	r21,r21,r21
    a948:	1809883a 	mov	r4,r3
    a94c:	1d47883a 	add	r3,r3,r21
    a950:	20000015 	stw	zero,0(r4)
    a954:	21000104 	addi	r4,r4,4
    a958:	193ffd1e 	bne	r3,r4,a950 <__lshift+0x74>
    a95c:	8a000417 	ldw	r8,16(r17)
    a960:	89000504 	addi	r4,r17,20
    a964:	a18007cc 	andi	r6,r20,31
    a968:	4211883a 	add	r8,r8,r8
    a96c:	4211883a 	add	r8,r8,r8
    a970:	2211883a 	add	r8,r4,r8
    a974:	30002326 	beq	r6,zero,aa04 <__lshift+0x128>
    a978:	02400804 	movi	r9,32
    a97c:	4993c83a 	sub	r9,r9,r6
    a980:	000b883a 	mov	r5,zero
    a984:	21c00017 	ldw	r7,0(r4)
    a988:	1815883a 	mov	r10,r3
    a98c:	18c00104 	addi	r3,r3,4
    a990:	398e983a 	sll	r7,r7,r6
    a994:	21000104 	addi	r4,r4,4
    a998:	394ab03a 	or	r5,r7,r5
    a99c:	197fff15 	stw	r5,-4(r3)
    a9a0:	217fff17 	ldw	r5,-4(r4)
    a9a4:	2a4ad83a 	srl	r5,r5,r9
    a9a8:	223ff636 	bltu	r4,r8,a984 <__lshift+0xa8>
    a9ac:	51400115 	stw	r5,4(r10)
    a9b0:	28001a1e 	bne	r5,zero,aa1c <__lshift+0x140>
    a9b4:	843fffc4 	addi	r16,r16,-1
    a9b8:	14000415 	stw	r16,16(r2)
    a9bc:	88000826 	beq	r17,zero,a9e0 <__lshift+0x104>
    a9c0:	89000117 	ldw	r4,4(r17)
    a9c4:	90c01317 	ldw	r3,76(r18)
    a9c8:	2109883a 	add	r4,r4,r4
    a9cc:	2109883a 	add	r4,r4,r4
    a9d0:	1907883a 	add	r3,r3,r4
    a9d4:	19000017 	ldw	r4,0(r3)
    a9d8:	89000015 	stw	r4,0(r17)
    a9dc:	1c400015 	stw	r17,0(r3)
    a9e0:	dfc00617 	ldw	ra,24(sp)
    a9e4:	dd400517 	ldw	r21,20(sp)
    a9e8:	dd000417 	ldw	r20,16(sp)
    a9ec:	dcc00317 	ldw	r19,12(sp)
    a9f0:	dc800217 	ldw	r18,8(sp)
    a9f4:	dc400117 	ldw	r17,4(sp)
    a9f8:	dc000017 	ldw	r16,0(sp)
    a9fc:	dec00704 	addi	sp,sp,28
    aa00:	f800283a 	ret
    aa04:	21400017 	ldw	r5,0(r4)
    aa08:	18c00104 	addi	r3,r3,4
    aa0c:	21000104 	addi	r4,r4,4
    aa10:	197fff15 	stw	r5,-4(r3)
    aa14:	223ffb36 	bltu	r4,r8,aa04 <__lshift+0x128>
    aa18:	003fe606 	br	a9b4 <__lshift+0xd8>
    aa1c:	9c000084 	addi	r16,r19,2
    aa20:	003fe406 	br	a9b4 <__lshift+0xd8>

0000aa24 <__mcmp>:
    aa24:	20800417 	ldw	r2,16(r4)
    aa28:	28c00417 	ldw	r3,16(r5)
    aa2c:	10c5c83a 	sub	r2,r2,r3
    aa30:	1000111e 	bne	r2,zero,aa78 <__mcmp+0x54>
    aa34:	18c7883a 	add	r3,r3,r3
    aa38:	18c7883a 	add	r3,r3,r3
    aa3c:	21000504 	addi	r4,r4,20
    aa40:	29400504 	addi	r5,r5,20
    aa44:	20c5883a 	add	r2,r4,r3
    aa48:	28cb883a 	add	r5,r5,r3
    aa4c:	00000106 	br	aa54 <__mcmp+0x30>
    aa50:	20800a2e 	bgeu	r4,r2,aa7c <__mcmp+0x58>
    aa54:	10bfff04 	addi	r2,r2,-4
    aa58:	297fff04 	addi	r5,r5,-4
    aa5c:	11800017 	ldw	r6,0(r2)
    aa60:	28c00017 	ldw	r3,0(r5)
    aa64:	30fffa26 	beq	r6,r3,aa50 <__mcmp+0x2c>
    aa68:	30c00236 	bltu	r6,r3,aa74 <__mcmp+0x50>
    aa6c:	00800044 	movi	r2,1
    aa70:	f800283a 	ret
    aa74:	00bfffc4 	movi	r2,-1
    aa78:	f800283a 	ret
    aa7c:	0005883a 	mov	r2,zero
    aa80:	f800283a 	ret

0000aa84 <__mdiff>:
    aa84:	28c00417 	ldw	r3,16(r5)
    aa88:	30800417 	ldw	r2,16(r6)
    aa8c:	defffa04 	addi	sp,sp,-24
    aa90:	dcc00315 	stw	r19,12(sp)
    aa94:	dc800215 	stw	r18,8(sp)
    aa98:	dfc00515 	stw	ra,20(sp)
    aa9c:	dd000415 	stw	r20,16(sp)
    aaa0:	dc400115 	stw	r17,4(sp)
    aaa4:	dc000015 	stw	r16,0(sp)
    aaa8:	1887c83a 	sub	r3,r3,r2
    aaac:	2825883a 	mov	r18,r5
    aab0:	3027883a 	mov	r19,r6
    aab4:	1800141e 	bne	r3,zero,ab08 <__mdiff+0x84>
    aab8:	1085883a 	add	r2,r2,r2
    aabc:	1085883a 	add	r2,r2,r2
    aac0:	2a000504 	addi	r8,r5,20
    aac4:	34000504 	addi	r16,r6,20
    aac8:	4087883a 	add	r3,r8,r2
    aacc:	8085883a 	add	r2,r16,r2
    aad0:	00000106 	br	aad8 <__mdiff+0x54>
    aad4:	40c0592e 	bgeu	r8,r3,ac3c <__mdiff+0x1b8>
    aad8:	18ffff04 	addi	r3,r3,-4
    aadc:	10bfff04 	addi	r2,r2,-4
    aae0:	19c00017 	ldw	r7,0(r3)
    aae4:	11400017 	ldw	r5,0(r2)
    aae8:	397ffa26 	beq	r7,r5,aad4 <__mdiff+0x50>
    aaec:	3940592e 	bgeu	r7,r5,ac54 <__mdiff+0x1d0>
    aaf0:	9005883a 	mov	r2,r18
    aaf4:	4023883a 	mov	r17,r8
    aaf8:	9825883a 	mov	r18,r19
    aafc:	05000044 	movi	r20,1
    ab00:	1027883a 	mov	r19,r2
    ab04:	00000406 	br	ab18 <__mdiff+0x94>
    ab08:	18005616 	blt	r3,zero,ac64 <__mdiff+0x1e0>
    ab0c:	34400504 	addi	r17,r6,20
    ab10:	2c000504 	addi	r16,r5,20
    ab14:	0029883a 	mov	r20,zero
    ab18:	91400117 	ldw	r5,4(r18)
    ab1c:	000a15c0 	call	a15c <_Balloc>
    ab20:	92400417 	ldw	r9,16(r18)
    ab24:	9b000417 	ldw	r12,16(r19)
    ab28:	12c00504 	addi	r11,r2,20
    ab2c:	4a51883a 	add	r8,r9,r9
    ab30:	6319883a 	add	r12,r12,r12
    ab34:	4211883a 	add	r8,r8,r8
    ab38:	6319883a 	add	r12,r12,r12
    ab3c:	15000315 	stw	r20,12(r2)
    ab40:	8211883a 	add	r8,r16,r8
    ab44:	8b19883a 	add	r12,r17,r12
    ab48:	0007883a 	mov	r3,zero
    ab4c:	81400017 	ldw	r5,0(r16)
    ab50:	89c00017 	ldw	r7,0(r17)
    ab54:	59800104 	addi	r6,r11,4
    ab58:	293fffcc 	andi	r4,r5,65535
    ab5c:	20c7883a 	add	r3,r4,r3
    ab60:	393fffcc 	andi	r4,r7,65535
    ab64:	1909c83a 	sub	r4,r3,r4
    ab68:	280ad43a 	srli	r5,r5,16
    ab6c:	380ed43a 	srli	r7,r7,16
    ab70:	2007d43a 	srai	r3,r4,16
    ab74:	213fffcc 	andi	r4,r4,65535
    ab78:	29cbc83a 	sub	r5,r5,r7
    ab7c:	28c7883a 	add	r3,r5,r3
    ab80:	180a943a 	slli	r5,r3,16
    ab84:	8c400104 	addi	r17,r17,4
    ab88:	84000104 	addi	r16,r16,4
    ab8c:	2908b03a 	or	r4,r5,r4
    ab90:	59000015 	stw	r4,0(r11)
    ab94:	1807d43a 	srai	r3,r3,16
    ab98:	3015883a 	mov	r10,r6
    ab9c:	3017883a 	mov	r11,r6
    aba0:	8b3fea36 	bltu	r17,r12,ab4c <__mdiff+0xc8>
    aba4:	8200162e 	bgeu	r16,r8,ac00 <__mdiff+0x17c>
    aba8:	8017883a 	mov	r11,r16
    abac:	59400017 	ldw	r5,0(r11)
    abb0:	31800104 	addi	r6,r6,4
    abb4:	5ac00104 	addi	r11,r11,4
    abb8:	293fffcc 	andi	r4,r5,65535
    abbc:	20c7883a 	add	r3,r4,r3
    abc0:	280ed43a 	srli	r7,r5,16
    abc4:	180bd43a 	srai	r5,r3,16
    abc8:	193fffcc 	andi	r4,r3,65535
    abcc:	3947883a 	add	r3,r7,r5
    abd0:	180a943a 	slli	r5,r3,16
    abd4:	1807d43a 	srai	r3,r3,16
    abd8:	2908b03a 	or	r4,r5,r4
    abdc:	313fff15 	stw	r4,-4(r6)
    abe0:	5a3ff236 	bltu	r11,r8,abac <__mdiff+0x128>
    abe4:	0406303a 	nor	r3,zero,r16
    abe8:	1a07883a 	add	r3,r3,r8
    abec:	1806d0ba 	srli	r3,r3,2
    abf0:	18c00044 	addi	r3,r3,1
    abf4:	18c7883a 	add	r3,r3,r3
    abf8:	18c7883a 	add	r3,r3,r3
    abfc:	50d5883a 	add	r10,r10,r3
    ac00:	50ffff04 	addi	r3,r10,-4
    ac04:	2000041e 	bne	r4,zero,ac18 <__mdiff+0x194>
    ac08:	18ffff04 	addi	r3,r3,-4
    ac0c:	19000017 	ldw	r4,0(r3)
    ac10:	4a7fffc4 	addi	r9,r9,-1
    ac14:	203ffc26 	beq	r4,zero,ac08 <__mdiff+0x184>
    ac18:	12400415 	stw	r9,16(r2)
    ac1c:	dfc00517 	ldw	ra,20(sp)
    ac20:	dd000417 	ldw	r20,16(sp)
    ac24:	dcc00317 	ldw	r19,12(sp)
    ac28:	dc800217 	ldw	r18,8(sp)
    ac2c:	dc400117 	ldw	r17,4(sp)
    ac30:	dc000017 	ldw	r16,0(sp)
    ac34:	dec00604 	addi	sp,sp,24
    ac38:	f800283a 	ret
    ac3c:	000b883a 	mov	r5,zero
    ac40:	000a15c0 	call	a15c <_Balloc>
    ac44:	00c00044 	movi	r3,1
    ac48:	10c00415 	stw	r3,16(r2)
    ac4c:	10000515 	stw	zero,20(r2)
    ac50:	003ff206 	br	ac1c <__mdiff+0x198>
    ac54:	8023883a 	mov	r17,r16
    ac58:	0029883a 	mov	r20,zero
    ac5c:	4021883a 	mov	r16,r8
    ac60:	003fad06 	br	ab18 <__mdiff+0x94>
    ac64:	9005883a 	mov	r2,r18
    ac68:	94400504 	addi	r17,r18,20
    ac6c:	9c000504 	addi	r16,r19,20
    ac70:	9825883a 	mov	r18,r19
    ac74:	05000044 	movi	r20,1
    ac78:	1027883a 	mov	r19,r2
    ac7c:	003fa606 	br	ab18 <__mdiff+0x94>

0000ac80 <__ulp>:
    ac80:	295ffc2c 	andhi	r5,r5,32752
    ac84:	00bf3034 	movhi	r2,64704
    ac88:	2887883a 	add	r3,r5,r2
    ac8c:	00c0020e 	bge	zero,r3,ac98 <__ulp+0x18>
    ac90:	0005883a 	mov	r2,zero
    ac94:	f800283a 	ret
    ac98:	00c7c83a 	sub	r3,zero,r3
    ac9c:	1807d53a 	srai	r3,r3,20
    aca0:	008004c4 	movi	r2,19
    aca4:	10c00b0e 	bge	r2,r3,acd4 <__ulp+0x54>
    aca8:	18bffb04 	addi	r2,r3,-20
    acac:	01000784 	movi	r4,30
    acb0:	0007883a 	mov	r3,zero
    acb4:	20800516 	blt	r4,r2,accc <__ulp+0x4c>
    acb8:	010007c4 	movi	r4,31
    acbc:	2089c83a 	sub	r4,r4,r2
    acc0:	00800044 	movi	r2,1
    acc4:	1104983a 	sll	r2,r2,r4
    acc8:	f800283a 	ret
    accc:	00800044 	movi	r2,1
    acd0:	f800283a 	ret
    acd4:	01400234 	movhi	r5,8
    acd8:	28c7d83a 	sra	r3,r5,r3
    acdc:	0005883a 	mov	r2,zero
    ace0:	f800283a 	ret

0000ace4 <__b2d>:
    ace4:	defffa04 	addi	sp,sp,-24
    ace8:	dc000015 	stw	r16,0(sp)
    acec:	24000417 	ldw	r16,16(r4)
    acf0:	dc400115 	stw	r17,4(sp)
    acf4:	24400504 	addi	r17,r4,20
    acf8:	8421883a 	add	r16,r16,r16
    acfc:	8421883a 	add	r16,r16,r16
    ad00:	8c21883a 	add	r16,r17,r16
    ad04:	dc800215 	stw	r18,8(sp)
    ad08:	84bfff17 	ldw	r18,-4(r16)
    ad0c:	dd000415 	stw	r20,16(sp)
    ad10:	dcc00315 	stw	r19,12(sp)
    ad14:	9009883a 	mov	r4,r18
    ad18:	2829883a 	mov	r20,r5
    ad1c:	dfc00515 	stw	ra,20(sp)
    ad20:	000a4500 	call	a450 <__hi0bits>
    ad24:	00c00804 	movi	r3,32
    ad28:	1889c83a 	sub	r4,r3,r2
    ad2c:	a1000015 	stw	r4,0(r20)
    ad30:	01000284 	movi	r4,10
    ad34:	84ffff04 	addi	r19,r16,-4
    ad38:	20801216 	blt	r4,r2,ad84 <__b2d+0xa0>
    ad3c:	018002c4 	movi	r6,11
    ad40:	308dc83a 	sub	r6,r6,r2
    ad44:	9186d83a 	srl	r3,r18,r6
    ad48:	18cffc34 	orhi	r3,r3,16368
    ad4c:	8cc0212e 	bgeu	r17,r19,add4 <__b2d+0xf0>
    ad50:	813ffe17 	ldw	r4,-8(r16)
    ad54:	218cd83a 	srl	r6,r4,r6
    ad58:	10800544 	addi	r2,r2,21
    ad5c:	9084983a 	sll	r2,r18,r2
    ad60:	1184b03a 	or	r2,r2,r6
    ad64:	dfc00517 	ldw	ra,20(sp)
    ad68:	dd000417 	ldw	r20,16(sp)
    ad6c:	dcc00317 	ldw	r19,12(sp)
    ad70:	dc800217 	ldw	r18,8(sp)
    ad74:	dc400117 	ldw	r17,4(sp)
    ad78:	dc000017 	ldw	r16,0(sp)
    ad7c:	dec00604 	addi	sp,sp,24
    ad80:	f800283a 	ret
    ad84:	8cc00f2e 	bgeu	r17,r19,adc4 <__b2d+0xe0>
    ad88:	117ffd44 	addi	r5,r2,-11
    ad8c:	80bffe17 	ldw	r2,-8(r16)
    ad90:	28000e26 	beq	r5,zero,adcc <__b2d+0xe8>
    ad94:	1949c83a 	sub	r4,r3,r5
    ad98:	9164983a 	sll	r18,r18,r5
    ad9c:	1106d83a 	srl	r3,r2,r4
    ada0:	81bffe04 	addi	r6,r16,-8
    ada4:	948ffc34 	orhi	r18,r18,16368
    ada8:	90c6b03a 	or	r3,r18,r3
    adac:	89800e2e 	bgeu	r17,r6,ade8 <__b2d+0x104>
    adb0:	81bffd17 	ldw	r6,-12(r16)
    adb4:	1144983a 	sll	r2,r2,r5
    adb8:	310ad83a 	srl	r5,r6,r4
    adbc:	2884b03a 	or	r2,r5,r2
    adc0:	003fe806 	br	ad64 <__b2d+0x80>
    adc4:	10bffd44 	addi	r2,r2,-11
    adc8:	1000041e 	bne	r2,zero,addc <__b2d+0xf8>
    adcc:	90cffc34 	orhi	r3,r18,16368
    add0:	003fe406 	br	ad64 <__b2d+0x80>
    add4:	000d883a 	mov	r6,zero
    add8:	003fdf06 	br	ad58 <__b2d+0x74>
    addc:	90a4983a 	sll	r18,r18,r2
    ade0:	0005883a 	mov	r2,zero
    ade4:	003ff906 	br	adcc <__b2d+0xe8>
    ade8:	1144983a 	sll	r2,r2,r5
    adec:	003fdd06 	br	ad64 <__b2d+0x80>

0000adf0 <__d2b>:
    adf0:	defff804 	addi	sp,sp,-32
    adf4:	dc000215 	stw	r16,8(sp)
    adf8:	3021883a 	mov	r16,r6
    adfc:	dc400315 	stw	r17,12(sp)
    ae00:	8022907a 	slli	r17,r16,1
    ae04:	dd000615 	stw	r20,24(sp)
    ae08:	2829883a 	mov	r20,r5
    ae0c:	01400044 	movi	r5,1
    ae10:	dcc00515 	stw	r19,20(sp)
    ae14:	dc800415 	stw	r18,16(sp)
    ae18:	dfc00715 	stw	ra,28(sp)
    ae1c:	3825883a 	mov	r18,r7
    ae20:	8822d57a 	srli	r17,r17,21
    ae24:	000a15c0 	call	a15c <_Balloc>
    ae28:	1027883a 	mov	r19,r2
    ae2c:	00800434 	movhi	r2,16
    ae30:	10bfffc4 	addi	r2,r2,-1
    ae34:	808c703a 	and	r6,r16,r2
    ae38:	88000126 	beq	r17,zero,ae40 <__d2b+0x50>
    ae3c:	31800434 	orhi	r6,r6,16
    ae40:	d9800015 	stw	r6,0(sp)
    ae44:	a0002426 	beq	r20,zero,aed8 <__d2b+0xe8>
    ae48:	d9000104 	addi	r4,sp,4
    ae4c:	dd000115 	stw	r20,4(sp)
    ae50:	000a4b80 	call	a4b8 <__lo0bits>
    ae54:	d8c00017 	ldw	r3,0(sp)
    ae58:	10002f1e 	bne	r2,zero,af18 <__d2b+0x128>
    ae5c:	d9000117 	ldw	r4,4(sp)
    ae60:	99000515 	stw	r4,20(r19)
    ae64:	1821003a 	cmpeq	r16,r3,zero
    ae68:	01000084 	movi	r4,2
    ae6c:	2421c83a 	sub	r16,r4,r16
    ae70:	98c00615 	stw	r3,24(r19)
    ae74:	9c000415 	stw	r16,16(r19)
    ae78:	88001f1e 	bne	r17,zero,aef8 <__d2b+0x108>
    ae7c:	10bef384 	addi	r2,r2,-1074
    ae80:	90800015 	stw	r2,0(r18)
    ae84:	00900034 	movhi	r2,16384
    ae88:	10bfffc4 	addi	r2,r2,-1
    ae8c:	8085883a 	add	r2,r16,r2
    ae90:	1085883a 	add	r2,r2,r2
    ae94:	1085883a 	add	r2,r2,r2
    ae98:	9885883a 	add	r2,r19,r2
    ae9c:	11000517 	ldw	r4,20(r2)
    aea0:	8020917a 	slli	r16,r16,5
    aea4:	000a4500 	call	a450 <__hi0bits>
    aea8:	d8c00817 	ldw	r3,32(sp)
    aeac:	8085c83a 	sub	r2,r16,r2
    aeb0:	18800015 	stw	r2,0(r3)
    aeb4:	9805883a 	mov	r2,r19
    aeb8:	dfc00717 	ldw	ra,28(sp)
    aebc:	dd000617 	ldw	r20,24(sp)
    aec0:	dcc00517 	ldw	r19,20(sp)
    aec4:	dc800417 	ldw	r18,16(sp)
    aec8:	dc400317 	ldw	r17,12(sp)
    aecc:	dc000217 	ldw	r16,8(sp)
    aed0:	dec00804 	addi	sp,sp,32
    aed4:	f800283a 	ret
    aed8:	d809883a 	mov	r4,sp
    aedc:	000a4b80 	call	a4b8 <__lo0bits>
    aee0:	d8c00017 	ldw	r3,0(sp)
    aee4:	04000044 	movi	r16,1
    aee8:	9c000415 	stw	r16,16(r19)
    aeec:	98c00515 	stw	r3,20(r19)
    aef0:	10800804 	addi	r2,r2,32
    aef4:	883fe126 	beq	r17,zero,ae7c <__d2b+0x8c>
    aef8:	00c00d44 	movi	r3,53
    aefc:	8c7ef344 	addi	r17,r17,-1075
    af00:	88a3883a 	add	r17,r17,r2
    af04:	1885c83a 	sub	r2,r3,r2
    af08:	d8c00817 	ldw	r3,32(sp)
    af0c:	94400015 	stw	r17,0(r18)
    af10:	18800015 	stw	r2,0(r3)
    af14:	003fe706 	br	aeb4 <__d2b+0xc4>
    af18:	01000804 	movi	r4,32
    af1c:	2089c83a 	sub	r4,r4,r2
    af20:	1908983a 	sll	r4,r3,r4
    af24:	d9400117 	ldw	r5,4(sp)
    af28:	1886d83a 	srl	r3,r3,r2
    af2c:	2148b03a 	or	r4,r4,r5
    af30:	99000515 	stw	r4,20(r19)
    af34:	d8c00015 	stw	r3,0(sp)
    af38:	003fca06 	br	ae64 <__d2b+0x74>

0000af3c <__ratio>:
    af3c:	defff904 	addi	sp,sp,-28
    af40:	dc400315 	stw	r17,12(sp)
    af44:	2823883a 	mov	r17,r5
    af48:	d9400104 	addi	r5,sp,4
    af4c:	dfc00615 	stw	ra,24(sp)
    af50:	dcc00515 	stw	r19,20(sp)
    af54:	dc800415 	stw	r18,16(sp)
    af58:	2027883a 	mov	r19,r4
    af5c:	dc000215 	stw	r16,8(sp)
    af60:	000ace40 	call	ace4 <__b2d>
    af64:	d80b883a 	mov	r5,sp
    af68:	8809883a 	mov	r4,r17
    af6c:	1025883a 	mov	r18,r2
    af70:	1821883a 	mov	r16,r3
    af74:	000ace40 	call	ace4 <__b2d>
    af78:	8a000417 	ldw	r8,16(r17)
    af7c:	99000417 	ldw	r4,16(r19)
    af80:	d9400117 	ldw	r5,4(sp)
    af84:	2209c83a 	sub	r4,r4,r8
    af88:	2010917a 	slli	r8,r4,5
    af8c:	d9000017 	ldw	r4,0(sp)
    af90:	2909c83a 	sub	r4,r5,r4
    af94:	4109883a 	add	r4,r8,r4
    af98:	01000e0e 	bge	zero,r4,afd4 <__ratio+0x98>
    af9c:	2008953a 	slli	r4,r4,20
    afa0:	2421883a 	add	r16,r4,r16
    afa4:	100d883a 	mov	r6,r2
    afa8:	180f883a 	mov	r7,r3
    afac:	9009883a 	mov	r4,r18
    afb0:	800b883a 	mov	r5,r16
    afb4:	00108e40 	call	108e4 <__divdf3>
    afb8:	dfc00617 	ldw	ra,24(sp)
    afbc:	dcc00517 	ldw	r19,20(sp)
    afc0:	dc800417 	ldw	r18,16(sp)
    afc4:	dc400317 	ldw	r17,12(sp)
    afc8:	dc000217 	ldw	r16,8(sp)
    afcc:	dec00704 	addi	sp,sp,28
    afd0:	f800283a 	ret
    afd4:	2008953a 	slli	r4,r4,20
    afd8:	1907c83a 	sub	r3,r3,r4
    afdc:	003ff106 	br	afa4 <__ratio+0x68>

0000afe0 <_mprec_log10>:
    afe0:	defffe04 	addi	sp,sp,-8
    afe4:	dc000015 	stw	r16,0(sp)
    afe8:	dfc00115 	stw	ra,4(sp)
    afec:	008005c4 	movi	r2,23
    aff0:	2021883a 	mov	r16,r4
    aff4:	11000d0e 	bge	r2,r4,b02c <_mprec_log10+0x4c>
    aff8:	0005883a 	mov	r2,zero
    affc:	00cffc34 	movhi	r3,16368
    b000:	843fffc4 	addi	r16,r16,-1
    b004:	000d883a 	mov	r6,zero
    b008:	01d00934 	movhi	r7,16420
    b00c:	1009883a 	mov	r4,r2
    b010:	180b883a 	mov	r5,r3
    b014:	00114240 	call	11424 <__muldf3>
    b018:	803ff91e 	bne	r16,zero,b000 <_mprec_log10+0x20>
    b01c:	dfc00117 	ldw	ra,4(sp)
    b020:	dc000017 	ldw	r16,0(sp)
    b024:	dec00204 	addi	sp,sp,8
    b028:	f800283a 	ret
    b02c:	202090fa 	slli	r16,r4,3
    b030:	008000b4 	movhi	r2,2
    b034:	10bd9004 	addi	r2,r2,-2496
    b038:	1421883a 	add	r16,r2,r16
    b03c:	80800017 	ldw	r2,0(r16)
    b040:	80c00117 	ldw	r3,4(r16)
    b044:	dfc00117 	ldw	ra,4(sp)
    b048:	dc000017 	ldw	r16,0(sp)
    b04c:	dec00204 	addi	sp,sp,8
    b050:	f800283a 	ret

0000b054 <__copybits>:
    b054:	297fffc4 	addi	r5,r5,-1
    b058:	280fd17a 	srai	r7,r5,5
    b05c:	30c00417 	ldw	r3,16(r6)
    b060:	30800504 	addi	r2,r6,20
    b064:	39c00044 	addi	r7,r7,1
    b068:	18c7883a 	add	r3,r3,r3
    b06c:	39cf883a 	add	r7,r7,r7
    b070:	18c7883a 	add	r3,r3,r3
    b074:	39cf883a 	add	r7,r7,r7
    b078:	10c7883a 	add	r3,r2,r3
    b07c:	21cf883a 	add	r7,r4,r7
    b080:	10c00d2e 	bgeu	r2,r3,b0b8 <__copybits+0x64>
    b084:	200b883a 	mov	r5,r4
    b088:	12000017 	ldw	r8,0(r2)
    b08c:	29400104 	addi	r5,r5,4
    b090:	10800104 	addi	r2,r2,4
    b094:	2a3fff15 	stw	r8,-4(r5)
    b098:	10fffb36 	bltu	r2,r3,b088 <__copybits+0x34>
    b09c:	1985c83a 	sub	r2,r3,r6
    b0a0:	10bffac4 	addi	r2,r2,-21
    b0a4:	1004d0ba 	srli	r2,r2,2
    b0a8:	10800044 	addi	r2,r2,1
    b0ac:	1085883a 	add	r2,r2,r2
    b0b0:	1085883a 	add	r2,r2,r2
    b0b4:	2089883a 	add	r4,r4,r2
    b0b8:	21c0032e 	bgeu	r4,r7,b0c8 <__copybits+0x74>
    b0bc:	20000015 	stw	zero,0(r4)
    b0c0:	21000104 	addi	r4,r4,4
    b0c4:	21fffd36 	bltu	r4,r7,b0bc <__copybits+0x68>
    b0c8:	f800283a 	ret

0000b0cc <__any_on>:
    b0cc:	20c00417 	ldw	r3,16(r4)
    b0d0:	2805d17a 	srai	r2,r5,5
    b0d4:	21000504 	addi	r4,r4,20
    b0d8:	18800d0e 	bge	r3,r2,b110 <__any_on+0x44>
    b0dc:	18c7883a 	add	r3,r3,r3
    b0e0:	18c7883a 	add	r3,r3,r3
    b0e4:	20c7883a 	add	r3,r4,r3
    b0e8:	20c0192e 	bgeu	r4,r3,b150 <__any_on+0x84>
    b0ec:	18bfff17 	ldw	r2,-4(r3)
    b0f0:	18ffff04 	addi	r3,r3,-4
    b0f4:	1000041e 	bne	r2,zero,b108 <__any_on+0x3c>
    b0f8:	20c0142e 	bgeu	r4,r3,b14c <__any_on+0x80>
    b0fc:	18ffff04 	addi	r3,r3,-4
    b100:	19400017 	ldw	r5,0(r3)
    b104:	283ffc26 	beq	r5,zero,b0f8 <__any_on+0x2c>
    b108:	00800044 	movi	r2,1
    b10c:	f800283a 	ret
    b110:	10c00a0e 	bge	r2,r3,b13c <__any_on+0x70>
    b114:	1085883a 	add	r2,r2,r2
    b118:	1085883a 	add	r2,r2,r2
    b11c:	294007cc 	andi	r5,r5,31
    b120:	2087883a 	add	r3,r4,r2
    b124:	283ff026 	beq	r5,zero,b0e8 <__any_on+0x1c>
    b128:	19800017 	ldw	r6,0(r3)
    b12c:	3144d83a 	srl	r2,r6,r5
    b130:	114a983a 	sll	r5,r2,r5
    b134:	317ff41e 	bne	r6,r5,b108 <__any_on+0x3c>
    b138:	003feb06 	br	b0e8 <__any_on+0x1c>
    b13c:	1085883a 	add	r2,r2,r2
    b140:	1085883a 	add	r2,r2,r2
    b144:	2087883a 	add	r3,r4,r2
    b148:	003fe706 	br	b0e8 <__any_on+0x1c>
    b14c:	f800283a 	ret
    b150:	0005883a 	mov	r2,zero
    b154:	f800283a 	ret

0000b158 <__fpclassifyd>:
    b158:	00a00034 	movhi	r2,32768
    b15c:	10bfffc4 	addi	r2,r2,-1
    b160:	2884703a 	and	r2,r5,r2
    b164:	10000726 	beq	r2,zero,b184 <__fpclassifyd+0x2c>
    b168:	00fffc34 	movhi	r3,65520
    b16c:	019ff834 	movhi	r6,32736
    b170:	28c7883a 	add	r3,r5,r3
    b174:	31bfffc4 	addi	r6,r6,-1
    b178:	30c00536 	bltu	r6,r3,b190 <__fpclassifyd+0x38>
    b17c:	00800104 	movi	r2,4
    b180:	f800283a 	ret
    b184:	2000021e 	bne	r4,zero,b190 <__fpclassifyd+0x38>
    b188:	00800084 	movi	r2,2
    b18c:	f800283a 	ret
    b190:	00dffc34 	movhi	r3,32752
    b194:	019ff834 	movhi	r6,32736
    b198:	28cb883a 	add	r5,r5,r3
    b19c:	31bfffc4 	addi	r6,r6,-1
    b1a0:	317ff62e 	bgeu	r6,r5,b17c <__fpclassifyd+0x24>
    b1a4:	01400434 	movhi	r5,16
    b1a8:	297fffc4 	addi	r5,r5,-1
    b1ac:	28800236 	bltu	r5,r2,b1b8 <__fpclassifyd+0x60>
    b1b0:	008000c4 	movi	r2,3
    b1b4:	f800283a 	ret
    b1b8:	10c00226 	beq	r2,r3,b1c4 <__fpclassifyd+0x6c>
    b1bc:	0005883a 	mov	r2,zero
    b1c0:	f800283a 	ret
    b1c4:	2005003a 	cmpeq	r2,r4,zero
    b1c8:	f800283a 	ret

0000b1cc <_sbrk_r>:
    b1cc:	defffd04 	addi	sp,sp,-12
    b1d0:	dc000015 	stw	r16,0(sp)
    b1d4:	040000b4 	movhi	r16,2
    b1d8:	dc400115 	stw	r17,4(sp)
    b1dc:	840e5104 	addi	r16,r16,14660
    b1e0:	2023883a 	mov	r17,r4
    b1e4:	2809883a 	mov	r4,r5
    b1e8:	dfc00215 	stw	ra,8(sp)
    b1ec:	80000015 	stw	zero,0(r16)
    b1f0:	0012df80 	call	12df8 <sbrk>
    b1f4:	00ffffc4 	movi	r3,-1
    b1f8:	10c00526 	beq	r2,r3,b210 <_sbrk_r+0x44>
    b1fc:	dfc00217 	ldw	ra,8(sp)
    b200:	dc400117 	ldw	r17,4(sp)
    b204:	dc000017 	ldw	r16,0(sp)
    b208:	dec00304 	addi	sp,sp,12
    b20c:	f800283a 	ret
    b210:	80c00017 	ldw	r3,0(r16)
    b214:	183ff926 	beq	r3,zero,b1fc <_sbrk_r+0x30>
    b218:	88c00015 	stw	r3,0(r17)
    b21c:	003ff706 	br	b1fc <_sbrk_r+0x30>

0000b220 <__sread>:
    b220:	defffe04 	addi	sp,sp,-8
    b224:	dc000015 	stw	r16,0(sp)
    b228:	2821883a 	mov	r16,r5
    b22c:	2940038f 	ldh	r5,14(r5)
    b230:	dfc00115 	stw	ra,4(sp)
    b234:	000ead00 	call	ead0 <_read_r>
    b238:	10000716 	blt	r2,zero,b258 <__sread+0x38>
    b23c:	80c01417 	ldw	r3,80(r16)
    b240:	1887883a 	add	r3,r3,r2
    b244:	80c01415 	stw	r3,80(r16)
    b248:	dfc00117 	ldw	ra,4(sp)
    b24c:	dc000017 	ldw	r16,0(sp)
    b250:	dec00204 	addi	sp,sp,8
    b254:	f800283a 	ret
    b258:	80c0030b 	ldhu	r3,12(r16)
    b25c:	18fbffcc 	andi	r3,r3,61439
    b260:	80c0030d 	sth	r3,12(r16)
    b264:	dfc00117 	ldw	ra,4(sp)
    b268:	dc000017 	ldw	r16,0(sp)
    b26c:	dec00204 	addi	sp,sp,8
    b270:	f800283a 	ret

0000b274 <__seofread>:
    b274:	0005883a 	mov	r2,zero
    b278:	f800283a 	ret

0000b27c <__swrite>:
    b27c:	2880030b 	ldhu	r2,12(r5)
    b280:	defffb04 	addi	sp,sp,-20
    b284:	dcc00315 	stw	r19,12(sp)
    b288:	dc800215 	stw	r18,8(sp)
    b28c:	dc400115 	stw	r17,4(sp)
    b290:	dc000015 	stw	r16,0(sp)
    b294:	dfc00415 	stw	ra,16(sp)
    b298:	10c0400c 	andi	r3,r2,256
    b29c:	2821883a 	mov	r16,r5
    b2a0:	2023883a 	mov	r17,r4
    b2a4:	3025883a 	mov	r18,r6
    b2a8:	3827883a 	mov	r19,r7
    b2ac:	18000526 	beq	r3,zero,b2c4 <__swrite+0x48>
    b2b0:	2940038f 	ldh	r5,14(r5)
    b2b4:	01c00084 	movi	r7,2
    b2b8:	000d883a 	mov	r6,zero
    b2bc:	000e9140 	call	e914 <_lseek_r>
    b2c0:	8080030b 	ldhu	r2,12(r16)
    b2c4:	8140038f 	ldh	r5,14(r16)
    b2c8:	10bbffcc 	andi	r2,r2,61439
    b2cc:	980f883a 	mov	r7,r19
    b2d0:	900d883a 	mov	r6,r18
    b2d4:	8809883a 	mov	r4,r17
    b2d8:	8080030d 	sth	r2,12(r16)
    b2dc:	dfc00417 	ldw	ra,16(sp)
    b2e0:	dcc00317 	ldw	r19,12(sp)
    b2e4:	dc800217 	ldw	r18,8(sp)
    b2e8:	dc400117 	ldw	r17,4(sp)
    b2ec:	dc000017 	ldw	r16,0(sp)
    b2f0:	dec00504 	addi	sp,sp,20
    b2f4:	000df241 	jmpi	df24 <_write_r>

0000b2f8 <__sseek>:
    b2f8:	defffe04 	addi	sp,sp,-8
    b2fc:	dc000015 	stw	r16,0(sp)
    b300:	2821883a 	mov	r16,r5
    b304:	2940038f 	ldh	r5,14(r5)
    b308:	dfc00115 	stw	ra,4(sp)
    b30c:	000e9140 	call	e914 <_lseek_r>
    b310:	00ffffc4 	movi	r3,-1
    b314:	10c00826 	beq	r2,r3,b338 <__sseek+0x40>
    b318:	80c0030b 	ldhu	r3,12(r16)
    b31c:	80801415 	stw	r2,80(r16)
    b320:	18c40014 	ori	r3,r3,4096
    b324:	80c0030d 	sth	r3,12(r16)
    b328:	dfc00117 	ldw	ra,4(sp)
    b32c:	dc000017 	ldw	r16,0(sp)
    b330:	dec00204 	addi	sp,sp,8
    b334:	f800283a 	ret
    b338:	80c0030b 	ldhu	r3,12(r16)
    b33c:	18fbffcc 	andi	r3,r3,61439
    b340:	80c0030d 	sth	r3,12(r16)
    b344:	dfc00117 	ldw	ra,4(sp)
    b348:	dc000017 	ldw	r16,0(sp)
    b34c:	dec00204 	addi	sp,sp,8
    b350:	f800283a 	ret

0000b354 <__sclose>:
    b354:	2940038f 	ldh	r5,14(r5)
    b358:	000df841 	jmpi	df84 <_close_r>

0000b35c <strcmp>:
    b35c:	2144b03a 	or	r2,r4,r5
    b360:	108000cc 	andi	r2,r2,3
    b364:	1000171e 	bne	r2,zero,b3c4 <strcmp+0x68>
    b368:	20800017 	ldw	r2,0(r4)
    b36c:	28c00017 	ldw	r3,0(r5)
    b370:	10c0141e 	bne	r2,r3,b3c4 <strcmp+0x68>
    b374:	027fbff4 	movhi	r9,65279
    b378:	4a7fbfc4 	addi	r9,r9,-257
    b37c:	0086303a 	nor	r3,zero,r2
    b380:	02202074 	movhi	r8,32897
    b384:	1245883a 	add	r2,r2,r9
    b388:	42202004 	addi	r8,r8,-32640
    b38c:	10c4703a 	and	r2,r2,r3
    b390:	1204703a 	and	r2,r2,r8
    b394:	10000226 	beq	r2,zero,b3a0 <strcmp+0x44>
    b398:	00002306 	br	b428 <strcmp+0xcc>
    b39c:	1000221e 	bne	r2,zero,b428 <strcmp+0xcc>
    b3a0:	21000104 	addi	r4,r4,4
    b3a4:	20c00017 	ldw	r3,0(r4)
    b3a8:	29400104 	addi	r5,r5,4
    b3ac:	29800017 	ldw	r6,0(r5)
    b3b0:	1a4f883a 	add	r7,r3,r9
    b3b4:	00c4303a 	nor	r2,zero,r3
    b3b8:	3884703a 	and	r2,r7,r2
    b3bc:	1204703a 	and	r2,r2,r8
    b3c0:	19bff626 	beq	r3,r6,b39c <strcmp+0x40>
    b3c4:	20800003 	ldbu	r2,0(r4)
    b3c8:	10c03fcc 	andi	r3,r2,255
    b3cc:	18c0201c 	xori	r3,r3,128
    b3d0:	18ffe004 	addi	r3,r3,-128
    b3d4:	18000c26 	beq	r3,zero,b408 <strcmp+0xac>
    b3d8:	29800007 	ldb	r6,0(r5)
    b3dc:	19800326 	beq	r3,r6,b3ec <strcmp+0x90>
    b3e0:	00001306 	br	b430 <strcmp+0xd4>
    b3e4:	29800007 	ldb	r6,0(r5)
    b3e8:	11800b1e 	bne	r2,r6,b418 <strcmp+0xbc>
    b3ec:	21000044 	addi	r4,r4,1
    b3f0:	20c00003 	ldbu	r3,0(r4)
    b3f4:	29400044 	addi	r5,r5,1
    b3f8:	18803fcc 	andi	r2,r3,255
    b3fc:	1080201c 	xori	r2,r2,128
    b400:	10bfe004 	addi	r2,r2,-128
    b404:	103ff71e 	bne	r2,zero,b3e4 <strcmp+0x88>
    b408:	0007883a 	mov	r3,zero
    b40c:	28800003 	ldbu	r2,0(r5)
    b410:	1885c83a 	sub	r2,r3,r2
    b414:	f800283a 	ret
    b418:	28800003 	ldbu	r2,0(r5)
    b41c:	18c03fcc 	andi	r3,r3,255
    b420:	1885c83a 	sub	r2,r3,r2
    b424:	f800283a 	ret
    b428:	0005883a 	mov	r2,zero
    b42c:	f800283a 	ret
    b430:	10c03fcc 	andi	r3,r2,255
    b434:	003ff506 	br	b40c <strcmp+0xb0>

0000b438 <strlen>:
    b438:	208000cc 	andi	r2,r4,3
    b43c:	10002026 	beq	r2,zero,b4c0 <strlen+0x88>
    b440:	20800007 	ldb	r2,0(r4)
    b444:	10002026 	beq	r2,zero,b4c8 <strlen+0x90>
    b448:	2005883a 	mov	r2,r4
    b44c:	00000206 	br	b458 <strlen+0x20>
    b450:	10c00007 	ldb	r3,0(r2)
    b454:	18001826 	beq	r3,zero,b4b8 <strlen+0x80>
    b458:	10800044 	addi	r2,r2,1
    b45c:	10c000cc 	andi	r3,r2,3
    b460:	183ffb1e 	bne	r3,zero,b450 <strlen+0x18>
    b464:	10c00017 	ldw	r3,0(r2)
    b468:	01ffbff4 	movhi	r7,65279
    b46c:	39ffbfc4 	addi	r7,r7,-257
    b470:	00ca303a 	nor	r5,zero,r3
    b474:	01a02074 	movhi	r6,32897
    b478:	19c7883a 	add	r3,r3,r7
    b47c:	31a02004 	addi	r6,r6,-32640
    b480:	1946703a 	and	r3,r3,r5
    b484:	1986703a 	and	r3,r3,r6
    b488:	1800091e 	bne	r3,zero,b4b0 <strlen+0x78>
    b48c:	10800104 	addi	r2,r2,4
    b490:	10c00017 	ldw	r3,0(r2)
    b494:	19cb883a 	add	r5,r3,r7
    b498:	00c6303a 	nor	r3,zero,r3
    b49c:	28c6703a 	and	r3,r5,r3
    b4a0:	1986703a 	and	r3,r3,r6
    b4a4:	183ff926 	beq	r3,zero,b48c <strlen+0x54>
    b4a8:	00000106 	br	b4b0 <strlen+0x78>
    b4ac:	10800044 	addi	r2,r2,1
    b4b0:	10c00007 	ldb	r3,0(r2)
    b4b4:	183ffd1e 	bne	r3,zero,b4ac <strlen+0x74>
    b4b8:	1105c83a 	sub	r2,r2,r4
    b4bc:	f800283a 	ret
    b4c0:	2005883a 	mov	r2,r4
    b4c4:	003fe706 	br	b464 <strlen+0x2c>
    b4c8:	0005883a 	mov	r2,zero
    b4cc:	f800283a 	ret

0000b4d0 <__ssprint_r>:
    b4d0:	30800217 	ldw	r2,8(r6)
    b4d4:	defff604 	addi	sp,sp,-40
    b4d8:	dc800215 	stw	r18,8(sp)
    b4dc:	dfc00915 	stw	ra,36(sp)
    b4e0:	df000815 	stw	fp,32(sp)
    b4e4:	ddc00715 	stw	r23,28(sp)
    b4e8:	dd800615 	stw	r22,24(sp)
    b4ec:	dd400515 	stw	r21,20(sp)
    b4f0:	dd000415 	stw	r20,16(sp)
    b4f4:	dcc00315 	stw	r19,12(sp)
    b4f8:	dc400115 	stw	r17,4(sp)
    b4fc:	dc000015 	stw	r16,0(sp)
    b500:	3025883a 	mov	r18,r6
    b504:	10005826 	beq	r2,zero,b668 <__ssprint_r+0x198>
    b508:	2027883a 	mov	r19,r4
    b50c:	35c00017 	ldw	r23,0(r6)
    b510:	29000017 	ldw	r4,0(r5)
    b514:	28800217 	ldw	r2,8(r5)
    b518:	2823883a 	mov	r17,r5
    b51c:	0039883a 	mov	fp,zero
    b520:	0021883a 	mov	r16,zero
    b524:	80003926 	beq	r16,zero,b60c <__ssprint_r+0x13c>
    b528:	102b883a 	mov	r21,r2
    b52c:	102d883a 	mov	r22,r2
    b530:	80803a36 	bltu	r16,r2,b61c <__ssprint_r+0x14c>
    b534:	88c0030b 	ldhu	r3,12(r17)
    b538:	1881200c 	andi	r2,r3,1152
    b53c:	10002626 	beq	r2,zero,b5d8 <__ssprint_r+0x108>
    b540:	88800517 	ldw	r2,20(r17)
    b544:	89400417 	ldw	r5,16(r17)
    b548:	81800044 	addi	r6,r16,1
    b54c:	108f883a 	add	r7,r2,r2
    b550:	3885883a 	add	r2,r7,r2
    b554:	100ed7fa 	srli	r7,r2,31
    b558:	216dc83a 	sub	r22,r4,r5
    b55c:	3589883a 	add	r4,r6,r22
    b560:	3885883a 	add	r2,r7,r2
    b564:	102bd07a 	srai	r21,r2,1
    b568:	a80d883a 	mov	r6,r21
    b56c:	a900022e 	bgeu	r21,r4,b578 <__ssprint_r+0xa8>
    b570:	202b883a 	mov	r21,r4
    b574:	200d883a 	mov	r6,r4
    b578:	18c1000c 	andi	r3,r3,1024
    b57c:	18002a26 	beq	r3,zero,b628 <__ssprint_r+0x158>
    b580:	300b883a 	mov	r5,r6
    b584:	9809883a 	mov	r4,r19
    b588:	00095fc0 	call	95fc <_malloc_r>
    b58c:	1029883a 	mov	r20,r2
    b590:	10002c26 	beq	r2,zero,b644 <__ssprint_r+0x174>
    b594:	89400417 	ldw	r5,16(r17)
    b598:	b00d883a 	mov	r6,r22
    b59c:	1009883a 	mov	r4,r2
    b5a0:	0009eec0 	call	9eec <memcpy>
    b5a4:	8880030b 	ldhu	r2,12(r17)
    b5a8:	00fedfc4 	movi	r3,-1153
    b5ac:	10c4703a 	and	r2,r2,r3
    b5b0:	10802014 	ori	r2,r2,128
    b5b4:	8880030d 	sth	r2,12(r17)
    b5b8:	a589883a 	add	r4,r20,r22
    b5bc:	adadc83a 	sub	r22,r21,r22
    b5c0:	8d400515 	stw	r21,20(r17)
    b5c4:	8d800215 	stw	r22,8(r17)
    b5c8:	8d000415 	stw	r20,16(r17)
    b5cc:	89000015 	stw	r4,0(r17)
    b5d0:	802b883a 	mov	r21,r16
    b5d4:	802d883a 	mov	r22,r16
    b5d8:	b00d883a 	mov	r6,r22
    b5dc:	e00b883a 	mov	r5,fp
    b5e0:	000e9740 	call	e974 <memmove>
    b5e4:	88800217 	ldw	r2,8(r17)
    b5e8:	89000017 	ldw	r4,0(r17)
    b5ec:	90c00217 	ldw	r3,8(r18)
    b5f0:	1545c83a 	sub	r2,r2,r21
    b5f4:	2589883a 	add	r4,r4,r22
    b5f8:	88800215 	stw	r2,8(r17)
    b5fc:	89000015 	stw	r4,0(r17)
    b600:	1c21c83a 	sub	r16,r3,r16
    b604:	94000215 	stw	r16,8(r18)
    b608:	80001726 	beq	r16,zero,b668 <__ssprint_r+0x198>
    b60c:	bf000017 	ldw	fp,0(r23)
    b610:	bc000117 	ldw	r16,4(r23)
    b614:	bdc00204 	addi	r23,r23,8
    b618:	003fc206 	br	b524 <__ssprint_r+0x54>
    b61c:	802b883a 	mov	r21,r16
    b620:	802d883a 	mov	r22,r16
    b624:	003fec06 	br	b5d8 <__ssprint_r+0x108>
    b628:	9809883a 	mov	r4,r19
    b62c:	000eb300 	call	eb30 <_realloc_r>
    b630:	1029883a 	mov	r20,r2
    b634:	103fe01e 	bne	r2,zero,b5b8 <__ssprint_r+0xe8>
    b638:	89400417 	ldw	r5,16(r17)
    b63c:	9809883a 	mov	r4,r19
    b640:	0008ecc0 	call	8ecc <_free_r>
    b644:	88c0030b 	ldhu	r3,12(r17)
    b648:	00800304 	movi	r2,12
    b64c:	98800015 	stw	r2,0(r19)
    b650:	18c01014 	ori	r3,r3,64
    b654:	88c0030d 	sth	r3,12(r17)
    b658:	00bfffc4 	movi	r2,-1
    b65c:	90000215 	stw	zero,8(r18)
    b660:	90000115 	stw	zero,4(r18)
    b664:	00000206 	br	b670 <__ssprint_r+0x1a0>
    b668:	90000115 	stw	zero,4(r18)
    b66c:	0005883a 	mov	r2,zero
    b670:	dfc00917 	ldw	ra,36(sp)
    b674:	df000817 	ldw	fp,32(sp)
    b678:	ddc00717 	ldw	r23,28(sp)
    b67c:	dd800617 	ldw	r22,24(sp)
    b680:	dd400517 	ldw	r21,20(sp)
    b684:	dd000417 	ldw	r20,16(sp)
    b688:	dcc00317 	ldw	r19,12(sp)
    b68c:	dc800217 	ldw	r18,8(sp)
    b690:	dc400117 	ldw	r17,4(sp)
    b694:	dc000017 	ldw	r16,0(sp)
    b698:	dec00a04 	addi	sp,sp,40
    b69c:	f800283a 	ret

0000b6a0 <___svfiprintf_internal_r>:
    b6a0:	2880030b 	ldhu	r2,12(r5)
    b6a4:	deffc804 	addi	sp,sp,-224
    b6a8:	dcc03115 	stw	r19,196(sp)
    b6ac:	dfc03715 	stw	ra,220(sp)
    b6b0:	df003615 	stw	fp,216(sp)
    b6b4:	ddc03515 	stw	r23,212(sp)
    b6b8:	dd803415 	stw	r22,208(sp)
    b6bc:	dd403315 	stw	r21,204(sp)
    b6c0:	dd003215 	stw	r20,200(sp)
    b6c4:	dc803015 	stw	r18,192(sp)
    b6c8:	dc402f15 	stw	r17,188(sp)
    b6cc:	dc002e15 	stw	r16,184(sp)
    b6d0:	d9402715 	stw	r5,156(sp)
    b6d4:	d9002a15 	stw	r4,168(sp)
    b6d8:	1080200c 	andi	r2,r2,128
    b6dc:	d9c02315 	stw	r7,140(sp)
    b6e0:	3027883a 	mov	r19,r6
    b6e4:	10000226 	beq	r2,zero,b6f0 <___svfiprintf_internal_r+0x50>
    b6e8:	28800417 	ldw	r2,16(r5)
    b6ec:	10041d26 	beq	r2,zero,c764 <___svfiprintf_internal_r+0x10c4>
    b6f0:	dac01a04 	addi	r11,sp,104
    b6f4:	dac01e15 	stw	r11,120(sp)
    b6f8:	d8801e17 	ldw	r2,120(sp)
    b6fc:	dac019c4 	addi	r11,sp,103
    b700:	dd402a17 	ldw	r21,168(sp)
    b704:	ddc02717 	ldw	r23,156(sp)
    b708:	058000b4 	movhi	r22,2
    b70c:	050000b4 	movhi	r20,2
    b710:	dac01f15 	stw	r11,124(sp)
    b714:	12d7c83a 	sub	r11,r2,r11
    b718:	b5bdc604 	addi	r22,r22,-2280
    b71c:	a53dc204 	addi	r20,r20,-2296
    b720:	dec01a15 	stw	sp,104(sp)
    b724:	d8001c15 	stw	zero,112(sp)
    b728:	d8001b15 	stw	zero,108(sp)
    b72c:	d811883a 	mov	r8,sp
    b730:	d8002915 	stw	zero,164(sp)
    b734:	d8002515 	stw	zero,148(sp)
    b738:	dac02b15 	stw	r11,172(sp)
    b73c:	98800007 	ldb	r2,0(r19)
    b740:	1002dd26 	beq	r2,zero,c2b8 <___svfiprintf_internal_r+0xc18>
    b744:	00c00944 	movi	r3,37
    b748:	9823883a 	mov	r17,r19
    b74c:	10c0021e 	bne	r2,r3,b758 <___svfiprintf_internal_r+0xb8>
    b750:	00001406 	br	b7a4 <___svfiprintf_internal_r+0x104>
    b754:	10c00326 	beq	r2,r3,b764 <___svfiprintf_internal_r+0xc4>
    b758:	8c400044 	addi	r17,r17,1
    b75c:	88800007 	ldb	r2,0(r17)
    b760:	103ffc1e 	bne	r2,zero,b754 <___svfiprintf_internal_r+0xb4>
    b764:	8ce1c83a 	sub	r16,r17,r19
    b768:	80000e26 	beq	r16,zero,b7a4 <___svfiprintf_internal_r+0x104>
    b76c:	d8c01c17 	ldw	r3,112(sp)
    b770:	d8801b17 	ldw	r2,108(sp)
    b774:	44c00015 	stw	r19,0(r8)
    b778:	1c07883a 	add	r3,r3,r16
    b77c:	10800044 	addi	r2,r2,1
    b780:	d8c01c15 	stw	r3,112(sp)
    b784:	44000115 	stw	r16,4(r8)
    b788:	d8801b15 	stw	r2,108(sp)
    b78c:	00c001c4 	movi	r3,7
    b790:	18831e16 	blt	r3,r2,c40c <___svfiprintf_internal_r+0xd6c>
    b794:	42000204 	addi	r8,r8,8
    b798:	dac02517 	ldw	r11,148(sp)
    b79c:	5c17883a 	add	r11,r11,r16
    b7a0:	dac02515 	stw	r11,148(sp)
    b7a4:	88800007 	ldb	r2,0(r17)
    b7a8:	1002c526 	beq	r2,zero,c2c0 <___svfiprintf_internal_r+0xc20>
    b7ac:	88c00047 	ldb	r3,1(r17)
    b7b0:	8cc00044 	addi	r19,r17,1
    b7b4:	d8001d85 	stb	zero,118(sp)
    b7b8:	0009883a 	mov	r4,zero
    b7bc:	000f883a 	mov	r7,zero
    b7c0:	043fffc4 	movi	r16,-1
    b7c4:	d8002415 	stw	zero,144(sp)
    b7c8:	0025883a 	mov	r18,zero
    b7cc:	01401604 	movi	r5,88
    b7d0:	01800244 	movi	r6,9
    b7d4:	02800a84 	movi	r10,42
    b7d8:	02401b04 	movi	r9,108
    b7dc:	9cc00044 	addi	r19,r19,1
    b7e0:	18bff804 	addi	r2,r3,-32
    b7e4:	2881dd36 	bltu	r5,r2,bf5c <___svfiprintf_internal_r+0x8bc>
    b7e8:	100490ba 	slli	r2,r2,2
    b7ec:	02c00074 	movhi	r11,1
    b7f0:	5aee0004 	addi	r11,r11,-18432
    b7f4:	12c5883a 	add	r2,r2,r11
    b7f8:	10800017 	ldw	r2,0(r2)
    b7fc:	1000683a 	jmp	r2
    b800:	0000b9fc 	xorhi	zero,zero,743
    b804:	0000bf5c 	xori	zero,zero,765
    b808:	0000bf5c 	xori	zero,zero,765
    b80c:	0000b9f0 	cmpltui	zero,zero,743
    b810:	0000bf5c 	xori	zero,zero,765
    b814:	0000bf5c 	xori	zero,zero,765
    b818:	0000bf5c 	xori	zero,zero,765
    b81c:	0000bf5c 	xori	zero,zero,765
    b820:	0000bf5c 	xori	zero,zero,765
    b824:	0000bf5c 	xori	zero,zero,765
    b828:	0000b964 	muli	zero,zero,741
    b82c:	0000bb40 	call	bb4 <main+0x334>
    b830:	0000bf5c 	xori	zero,zero,765
    b834:	0000b990 	cmplti	zero,zero,742
    b838:	0000bf90 	cmplti	zero,zero,766
    b83c:	0000bf5c 	xori	zero,zero,765
    b840:	0000bf84 	movi	zero,766
    b844:	0000bf24 	muli	zero,zero,764
    b848:	0000bf24 	muli	zero,zero,764
    b84c:	0000bf24 	muli	zero,zero,764
    b850:	0000bf24 	muli	zero,zero,764
    b854:	0000bf24 	muli	zero,zero,764
    b858:	0000bf24 	muli	zero,zero,764
    b85c:	0000bf24 	muli	zero,zero,764
    b860:	0000bf24 	muli	zero,zero,764
    b864:	0000bf24 	muli	zero,zero,764
    b868:	0000bf5c 	xori	zero,zero,765
    b86c:	0000bf5c 	xori	zero,zero,765
    b870:	0000bf5c 	xori	zero,zero,765
    b874:	0000bf5c 	xori	zero,zero,765
    b878:	0000bf5c 	xori	zero,zero,765
    b87c:	0000bf5c 	xori	zero,zero,765
    b880:	0000bf5c 	xori	zero,zero,765
    b884:	0000bf5c 	xori	zero,zero,765
    b888:	0000bf5c 	xori	zero,zero,765
    b88c:	0000bf5c 	xori	zero,zero,765
    b890:	0000bec0 	call	bec <main+0x36c>
    b894:	0000bf5c 	xori	zero,zero,765
    b898:	0000bf5c 	xori	zero,zero,765
    b89c:	0000bf5c 	xori	zero,zero,765
    b8a0:	0000bf5c 	xori	zero,zero,765
    b8a4:	0000bf5c 	xori	zero,zero,765
    b8a8:	0000bf5c 	xori	zero,zero,765
    b8ac:	0000bf5c 	xori	zero,zero,765
    b8b0:	0000bf5c 	xori	zero,zero,765
    b8b4:	0000bf5c 	xori	zero,zero,765
    b8b8:	0000bf5c 	xori	zero,zero,765
    b8bc:	0000c038 	rdprs	zero,zero,768
    b8c0:	0000bf5c 	xori	zero,zero,765
    b8c4:	0000bf5c 	xori	zero,zero,765
    b8c8:	0000bf5c 	xori	zero,zero,765
    b8cc:	0000bf5c 	xori	zero,zero,765
    b8d0:	0000bf5c 	xori	zero,zero,765
    b8d4:	0000bfd0 	cmplti	zero,zero,767
    b8d8:	0000bf5c 	xori	zero,zero,765
    b8dc:	0000bf5c 	xori	zero,zero,765
    b8e0:	0000bd04 	movi	zero,756
    b8e4:	0000bf5c 	xori	zero,zero,765
    b8e8:	0000bf5c 	xori	zero,zero,765
    b8ec:	0000bf5c 	xori	zero,zero,765
    b8f0:	0000bf5c 	xori	zero,zero,765
    b8f4:	0000bf5c 	xori	zero,zero,765
    b8f8:	0000bf5c 	xori	zero,zero,765
    b8fc:	0000bf5c 	xori	zero,zero,765
    b900:	0000bf5c 	xori	zero,zero,765
    b904:	0000bf5c 	xori	zero,zero,765
    b908:	0000bf5c 	xori	zero,zero,765
    b90c:	0000bbf4 	movhi	zero,751
    b910:	0000bda0 	cmpeqi	zero,zero,758
    b914:	0000bf5c 	xori	zero,zero,765
    b918:	0000bf5c 	xori	zero,zero,765
    b91c:	0000bf5c 	xori	zero,zero,765
    b920:	0000bd94 	movui	zero,758
    b924:	0000bda0 	cmpeqi	zero,zero,758
    b928:	0000bf5c 	xori	zero,zero,765
    b92c:	0000bf5c 	xori	zero,zero,765
    b930:	0000bd84 	movi	zero,758
    b934:	0000bf5c 	xori	zero,zero,765
    b938:	0000bd48 	cmpgei	zero,zero,757
    b93c:	0000bb50 	cmplti	zero,zero,749
    b940:	0000b99c 	xori	zero,zero,742
    b944:	0000beb4 	movhi	zero,762
    b948:	0000bf5c 	xori	zero,zero,765
    b94c:	0000be68 	cmpgeui	zero,zero,761
    b950:	0000bf5c 	xori	zero,zero,765
    b954:	0000bac0 	call	bac <main+0x32c>
    b958:	0000bf5c 	xori	zero,zero,765
    b95c:	0000bf5c 	xori	zero,zero,765
    b960:	0000ba1c 	xori	zero,zero,744
    b964:	dac02317 	ldw	r11,140(sp)
    b968:	5ac00017 	ldw	r11,0(r11)
    b96c:	dac02415 	stw	r11,144(sp)
    b970:	dac02317 	ldw	r11,140(sp)
    b974:	58800104 	addi	r2,r11,4
    b978:	dac02417 	ldw	r11,144(sp)
    b97c:	5802e90e 	bge	r11,zero,c524 <___svfiprintf_internal_r+0xe84>
    b980:	dac02417 	ldw	r11,144(sp)
    b984:	d8802315 	stw	r2,140(sp)
    b988:	02d7c83a 	sub	r11,zero,r11
    b98c:	dac02415 	stw	r11,144(sp)
    b990:	94800114 	ori	r18,r18,4
    b994:	98c00007 	ldb	r3,0(r19)
    b998:	003f9006 	br	b7dc <___svfiprintf_internal_r+0x13c>
    b99c:	00800c04 	movi	r2,48
    b9a0:	dac02317 	ldw	r11,140(sp)
    b9a4:	d8801d05 	stb	r2,116(sp)
    b9a8:	00801e04 	movi	r2,120
    b9ac:	d8801d45 	stb	r2,117(sp)
    b9b0:	d8001d85 	stb	zero,118(sp)
    b9b4:	58c00104 	addi	r3,r11,4
    b9b8:	5f000017 	ldw	fp,0(r11)
    b9bc:	0013883a 	mov	r9,zero
    b9c0:	90800094 	ori	r2,r18,2
    b9c4:	80032b16 	blt	r16,zero,c674 <___svfiprintf_internal_r+0xfd4>
    b9c8:	00bfdfc4 	movi	r2,-129
    b9cc:	90a4703a 	and	r18,r18,r2
    b9d0:	d8c02315 	stw	r3,140(sp)
    b9d4:	94800094 	ori	r18,r18,2
    b9d8:	e002dc26 	beq	fp,zero,c54c <___svfiprintf_internal_r+0xeac>
    b9dc:	010000b4 	movhi	r4,2
    b9e0:	213d5a04 	addi	r4,r4,-2712
    b9e4:	0015883a 	mov	r10,zero
    b9e8:	d9002915 	stw	r4,164(sp)
    b9ec:	00002306 	br	ba7c <___svfiprintf_internal_r+0x3dc>
    b9f0:	94800054 	ori	r18,r18,1
    b9f4:	98c00007 	ldb	r3,0(r19)
    b9f8:	003f7806 	br	b7dc <___svfiprintf_internal_r+0x13c>
    b9fc:	38803fcc 	andi	r2,r7,255
    ba00:	1080201c 	xori	r2,r2,128
    ba04:	10bfe004 	addi	r2,r2,-128
    ba08:	1002f31e 	bne	r2,zero,c5d8 <___svfiprintf_internal_r+0xf38>
    ba0c:	01000044 	movi	r4,1
    ba10:	01c00804 	movi	r7,32
    ba14:	98c00007 	ldb	r3,0(r19)
    ba18:	003f7006 	br	b7dc <___svfiprintf_internal_r+0x13c>
    ba1c:	21003fcc 	andi	r4,r4,255
    ba20:	2003aa1e 	bne	r4,zero,c8cc <___svfiprintf_internal_r+0x122c>
    ba24:	008000b4 	movhi	r2,2
    ba28:	10bd5a04 	addi	r2,r2,-2712
    ba2c:	d8802915 	stw	r2,164(sp)
    ba30:	9080080c 	andi	r2,r18,32
    ba34:	1000ba26 	beq	r2,zero,bd20 <___svfiprintf_internal_r+0x680>
    ba38:	dac02317 	ldw	r11,140(sp)
    ba3c:	5f000017 	ldw	fp,0(r11)
    ba40:	5a400117 	ldw	r9,4(r11)
    ba44:	5ac00204 	addi	r11,r11,8
    ba48:	dac02315 	stw	r11,140(sp)
    ba4c:	9080004c 	andi	r2,r18,1
    ba50:	10029026 	beq	r2,zero,c494 <___svfiprintf_internal_r+0xdf4>
    ba54:	e244b03a 	or	r2,fp,r9
    ba58:	1002d41e 	bne	r2,zero,c5ac <___svfiprintf_internal_r+0xf0c>
    ba5c:	d8001d85 	stb	zero,118(sp)
    ba60:	80030b16 	blt	r16,zero,c690 <___svfiprintf_internal_r+0xff0>
    ba64:	00bfdfc4 	movi	r2,-129
    ba68:	90a4703a 	and	r18,r18,r2
    ba6c:	0015883a 	mov	r10,zero
    ba70:	80002426 	beq	r16,zero,bb04 <___svfiprintf_internal_r+0x464>
    ba74:	0039883a 	mov	fp,zero
    ba78:	0013883a 	mov	r9,zero
    ba7c:	d9002917 	ldw	r4,164(sp)
    ba80:	dc401a04 	addi	r17,sp,104
    ba84:	e08003cc 	andi	r2,fp,15
    ba88:	4806973a 	slli	r3,r9,28
    ba8c:	2085883a 	add	r2,r4,r2
    ba90:	e038d13a 	srli	fp,fp,4
    ba94:	10800003 	ldbu	r2,0(r2)
    ba98:	4812d13a 	srli	r9,r9,4
    ba9c:	8c7fffc4 	addi	r17,r17,-1
    baa0:	1f38b03a 	or	fp,r3,fp
    baa4:	88800005 	stb	r2,0(r17)
    baa8:	e244b03a 	or	r2,fp,r9
    baac:	103ff51e 	bne	r2,zero,ba84 <___svfiprintf_internal_r+0x3e4>
    bab0:	dac01e17 	ldw	r11,120(sp)
    bab4:	5c57c83a 	sub	r11,r11,r17
    bab8:	dac02115 	stw	r11,132(sp)
    babc:	00001406 	br	bb10 <___svfiprintf_internal_r+0x470>
    bac0:	21003fcc 	andi	r4,r4,255
    bac4:	2003741e 	bne	r4,zero,c898 <___svfiprintf_internal_r+0x11f8>
    bac8:	9080080c 	andi	r2,r18,32
    bacc:	10014526 	beq	r2,zero,bfe4 <___svfiprintf_internal_r+0x944>
    bad0:	dac02317 	ldw	r11,140(sp)
    bad4:	d8001d85 	stb	zero,118(sp)
    bad8:	58c00204 	addi	r3,r11,8
    badc:	5f000017 	ldw	fp,0(r11)
    bae0:	5a400117 	ldw	r9,4(r11)
    bae4:	8002d916 	blt	r16,zero,c64c <___svfiprintf_internal_r+0xfac>
    bae8:	013fdfc4 	movi	r4,-129
    baec:	e244b03a 	or	r2,fp,r9
    baf0:	d8c02315 	stw	r3,140(sp)
    baf4:	9124703a 	and	r18,r18,r4
    baf8:	0015883a 	mov	r10,zero
    bafc:	1000b91e 	bne	r2,zero,bde4 <___svfiprintf_internal_r+0x744>
    bb00:	8002e61e 	bne	r16,zero,c69c <___svfiprintf_internal_r+0xffc>
    bb04:	0021883a 	mov	r16,zero
    bb08:	d8002115 	stw	zero,132(sp)
    bb0c:	dc401a04 	addi	r17,sp,104
    bb10:	d8c02117 	ldw	r3,132(sp)
    bb14:	dc002015 	stw	r16,128(sp)
    bb18:	80c0010e 	bge	r16,r3,bb20 <___svfiprintf_internal_r+0x480>
    bb1c:	d8c02015 	stw	r3,128(sp)
    bb20:	52803fcc 	andi	r10,r10,255
    bb24:	5280201c 	xori	r10,r10,128
    bb28:	52bfe004 	addi	r10,r10,-128
    bb2c:	50003c26 	beq	r10,zero,bc20 <___svfiprintf_internal_r+0x580>
    bb30:	dac02017 	ldw	r11,128(sp)
    bb34:	5ac00044 	addi	r11,r11,1
    bb38:	dac02015 	stw	r11,128(sp)
    bb3c:	00003806 	br	bc20 <___svfiprintf_internal_r+0x580>
    bb40:	01000044 	movi	r4,1
    bb44:	01c00ac4 	movi	r7,43
    bb48:	98c00007 	ldb	r3,0(r19)
    bb4c:	003f2306 	br	b7dc <___svfiprintf_internal_r+0x13c>
    bb50:	21003fcc 	andi	r4,r4,255
    bb54:	2003481e 	bne	r4,zero,c878 <___svfiprintf_internal_r+0x11d8>
    bb58:	9080080c 	andi	r2,r18,32
    bb5c:	10013b26 	beq	r2,zero,c04c <___svfiprintf_internal_r+0x9ac>
    bb60:	dac02317 	ldw	r11,140(sp)
    bb64:	d8001d85 	stb	zero,118(sp)
    bb68:	58800204 	addi	r2,r11,8
    bb6c:	5f000017 	ldw	fp,0(r11)
    bb70:	5a400117 	ldw	r9,4(r11)
    bb74:	8002a816 	blt	r16,zero,c618 <___svfiprintf_internal_r+0xf78>
    bb78:	013fdfc4 	movi	r4,-129
    bb7c:	e246b03a 	or	r3,fp,r9
    bb80:	d8802315 	stw	r2,140(sp)
    bb84:	9124703a 	and	r18,r18,r4
    bb88:	18013c26 	beq	r3,zero,c07c <___svfiprintf_internal_r+0x9dc>
    bb8c:	0015883a 	mov	r10,zero
    bb90:	dc401a04 	addi	r17,sp,104
    bb94:	e006d0fa 	srli	r3,fp,3
    bb98:	4808977a 	slli	r4,r9,29
    bb9c:	4812d0fa 	srli	r9,r9,3
    bba0:	e70001cc 	andi	fp,fp,7
    bba4:	e0800c04 	addi	r2,fp,48
    bba8:	8c7fffc4 	addi	r17,r17,-1
    bbac:	20f8b03a 	or	fp,r4,r3
    bbb0:	88800005 	stb	r2,0(r17)
    bbb4:	e246b03a 	or	r3,fp,r9
    bbb8:	183ff61e 	bne	r3,zero,bb94 <___svfiprintf_internal_r+0x4f4>
    bbbc:	90c0004c 	andi	r3,r18,1
    bbc0:	1800a526 	beq	r3,zero,be58 <___svfiprintf_internal_r+0x7b8>
    bbc4:	10803fcc 	andi	r2,r2,255
    bbc8:	1080201c 	xori	r2,r2,128
    bbcc:	10bfe004 	addi	r2,r2,-128
    bbd0:	00c00c04 	movi	r3,48
    bbd4:	10ffb626 	beq	r2,r3,bab0 <___svfiprintf_internal_r+0x410>
    bbd8:	88ffffc5 	stb	r3,-1(r17)
    bbdc:	d8c01e17 	ldw	r3,120(sp)
    bbe0:	88bfffc4 	addi	r2,r17,-1
    bbe4:	1023883a 	mov	r17,r2
    bbe8:	1887c83a 	sub	r3,r3,r2
    bbec:	d8c02115 	stw	r3,132(sp)
    bbf0:	003fc706 	br	bb10 <___svfiprintf_internal_r+0x470>
    bbf4:	dac02317 	ldw	r11,140(sp)
    bbf8:	00c00044 	movi	r3,1
    bbfc:	d8c02015 	stw	r3,128(sp)
    bc00:	58800017 	ldw	r2,0(r11)
    bc04:	5ac00104 	addi	r11,r11,4
    bc08:	d8001d85 	stb	zero,118(sp)
    bc0c:	d8801005 	stb	r2,64(sp)
    bc10:	dac02315 	stw	r11,140(sp)
    bc14:	d8c02115 	stw	r3,132(sp)
    bc18:	dc401004 	addi	r17,sp,64
    bc1c:	0021883a 	mov	r16,zero
    bc20:	90c0008c 	andi	r3,r18,2
    bc24:	d8c02215 	stw	r3,136(sp)
    bc28:	18000326 	beq	r3,zero,bc38 <___svfiprintf_internal_r+0x598>
    bc2c:	dac02017 	ldw	r11,128(sp)
    bc30:	5ac00084 	addi	r11,r11,2
    bc34:	dac02015 	stw	r11,128(sp)
    bc38:	90c0210c 	andi	r3,r18,132
    bc3c:	d8c02615 	stw	r3,152(sp)
    bc40:	1801131e 	bne	r3,zero,c090 <___svfiprintf_internal_r+0x9f0>
    bc44:	dac02417 	ldw	r11,144(sp)
    bc48:	d8c02017 	ldw	r3,128(sp)
    bc4c:	58f9c83a 	sub	fp,r11,r3
    bc50:	07010f0e 	bge	zero,fp,c090 <___svfiprintf_internal_r+0x9f0>
    bc54:	02400404 	movi	r9,16
    bc58:	d8c01c17 	ldw	r3,112(sp)
    bc5c:	d8801b17 	ldw	r2,108(sp)
    bc60:	4f02d60e 	bge	r9,fp,c7bc <___svfiprintf_internal_r+0x111c>
    bc64:	014000b4 	movhi	r5,2
    bc68:	297dc604 	addi	r5,r5,-2280
    bc6c:	d9402815 	stw	r5,160(sp)
    bc70:	028001c4 	movi	r10,7
    bc74:	00000306 	br	bc84 <___svfiprintf_internal_r+0x5e4>
    bc78:	e73ffc04 	addi	fp,fp,-16
    bc7c:	42000204 	addi	r8,r8,8
    bc80:	4f00150e 	bge	r9,fp,bcd8 <___svfiprintf_internal_r+0x638>
    bc84:	18c00404 	addi	r3,r3,16
    bc88:	10800044 	addi	r2,r2,1
    bc8c:	45800015 	stw	r22,0(r8)
    bc90:	42400115 	stw	r9,4(r8)
    bc94:	d8c01c15 	stw	r3,112(sp)
    bc98:	d8801b15 	stw	r2,108(sp)
    bc9c:	50bff60e 	bge	r10,r2,bc78 <___svfiprintf_internal_r+0x5d8>
    bca0:	d9801a04 	addi	r6,sp,104
    bca4:	b80b883a 	mov	r5,r23
    bca8:	a809883a 	mov	r4,r21
    bcac:	da402c15 	stw	r9,176(sp)
    bcb0:	da802d15 	stw	r10,180(sp)
    bcb4:	000b4d00 	call	b4d0 <__ssprint_r>
    bcb8:	da402c17 	ldw	r9,176(sp)
    bcbc:	da802d17 	ldw	r10,180(sp)
    bcc0:	1001851e 	bne	r2,zero,c2d8 <___svfiprintf_internal_r+0xc38>
    bcc4:	e73ffc04 	addi	fp,fp,-16
    bcc8:	d8c01c17 	ldw	r3,112(sp)
    bccc:	d8801b17 	ldw	r2,108(sp)
    bcd0:	d811883a 	mov	r8,sp
    bcd4:	4f3feb16 	blt	r9,fp,bc84 <___svfiprintf_internal_r+0x5e4>
    bcd8:	dac02817 	ldw	r11,160(sp)
    bcdc:	e0c7883a 	add	r3,fp,r3
    bce0:	10800044 	addi	r2,r2,1
    bce4:	42c00015 	stw	r11,0(r8)
    bce8:	47000115 	stw	fp,4(r8)
    bcec:	d8c01c15 	stw	r3,112(sp)
    bcf0:	d8801b15 	stw	r2,108(sp)
    bcf4:	010001c4 	movi	r4,7
    bcf8:	2081ee16 	blt	r4,r2,c4b4 <___svfiprintf_internal_r+0xe14>
    bcfc:	42000204 	addi	r8,r8,8
    bd00:	0000e506 	br	c098 <___svfiprintf_internal_r+0x9f8>
    bd04:	21003fcc 	andi	r4,r4,255
    bd08:	2002dd1e 	bne	r4,zero,c880 <___svfiprintf_internal_r+0x11e0>
    bd0c:	008000b4 	movhi	r2,2
    bd10:	10bd5504 	addi	r2,r2,-2732
    bd14:	d8802915 	stw	r2,164(sp)
    bd18:	9080080c 	andi	r2,r18,32
    bd1c:	103f461e 	bne	r2,zero,ba38 <___svfiprintf_internal_r+0x398>
    bd20:	9080040c 	andi	r2,r18,16
    bd24:	10022e1e 	bne	r2,zero,c5e0 <___svfiprintf_internal_r+0xf40>
    bd28:	9080100c 	andi	r2,r18,64
    bd2c:	dac02317 	ldw	r11,140(sp)
    bd30:	10027326 	beq	r2,zero,c700 <___svfiprintf_internal_r+0x1060>
    bd34:	5f00000b 	ldhu	fp,0(r11)
    bd38:	5ac00104 	addi	r11,r11,4
    bd3c:	0013883a 	mov	r9,zero
    bd40:	dac02315 	stw	r11,140(sp)
    bd44:	003f4106 	br	ba4c <___svfiprintf_internal_r+0x3ac>
    bd48:	21003fcc 	andi	r4,r4,255
    bd4c:	2002e11e 	bne	r4,zero,c8d4 <___svfiprintf_internal_r+0x1234>
    bd50:	9080080c 	andi	r2,r18,32
    bd54:	1002011e 	bne	r2,zero,c55c <___svfiprintf_internal_r+0xebc>
    bd58:	9080040c 	andi	r2,r18,16
    bd5c:	10023e1e 	bne	r2,zero,c658 <___svfiprintf_internal_r+0xfb8>
    bd60:	9480100c 	andi	r18,r18,64
    bd64:	90023c26 	beq	r18,zero,c658 <___svfiprintf_internal_r+0xfb8>
    bd68:	dac02317 	ldw	r11,140(sp)
    bd6c:	58800017 	ldw	r2,0(r11)
    bd70:	5ac00104 	addi	r11,r11,4
    bd74:	dac02315 	stw	r11,140(sp)
    bd78:	dac02517 	ldw	r11,148(sp)
    bd7c:	12c0000d 	sth	r11,0(r2)
    bd80:	003e6e06 	br	b73c <___svfiprintf_internal_r+0x9c>
    bd84:	98c00007 	ldb	r3,0(r19)
    bd88:	1a422926 	beq	r3,r9,c630 <___svfiprintf_internal_r+0xf90>
    bd8c:	94800414 	ori	r18,r18,16
    bd90:	003e9206 	br	b7dc <___svfiprintf_internal_r+0x13c>
    bd94:	94801014 	ori	r18,r18,64
    bd98:	98c00007 	ldb	r3,0(r19)
    bd9c:	003e8f06 	br	b7dc <___svfiprintf_internal_r+0x13c>
    bda0:	21003fcc 	andi	r4,r4,255
    bda4:	2002c71e 	bne	r4,zero,c8c4 <___svfiprintf_internal_r+0x1224>
    bda8:	9080080c 	andi	r2,r18,32
    bdac:	10004926 	beq	r2,zero,bed4 <___svfiprintf_internal_r+0x834>
    bdb0:	dac02317 	ldw	r11,140(sp)
    bdb4:	58800117 	ldw	r2,4(r11)
    bdb8:	5f000017 	ldw	fp,0(r11)
    bdbc:	5ac00204 	addi	r11,r11,8
    bdc0:	dac02315 	stw	r11,140(sp)
    bdc4:	1013883a 	mov	r9,r2
    bdc8:	10004b16 	blt	r2,zero,bef8 <___svfiprintf_internal_r+0x858>
    bdcc:	da801d83 	ldbu	r10,118(sp)
    bdd0:	8001cb16 	blt	r16,zero,c500 <___svfiprintf_internal_r+0xe60>
    bdd4:	00ffdfc4 	movi	r3,-129
    bdd8:	e244b03a 	or	r2,fp,r9
    bddc:	90e4703a 	and	r18,r18,r3
    bde0:	103f4726 	beq	r2,zero,bb00 <___svfiprintf_internal_r+0x460>
    bde4:	48008c26 	beq	r9,zero,c018 <___svfiprintf_internal_r+0x978>
    bde8:	dc802015 	stw	r18,128(sp)
    bdec:	dc002115 	stw	r16,132(sp)
    bdf0:	dc401a04 	addi	r17,sp,104
    bdf4:	e021883a 	mov	r16,fp
    bdf8:	da002215 	stw	r8,136(sp)
    bdfc:	5039883a 	mov	fp,r10
    be00:	4825883a 	mov	r18,r9
    be04:	8009883a 	mov	r4,r16
    be08:	900b883a 	mov	r5,r18
    be0c:	01800284 	movi	r6,10
    be10:	000f883a 	mov	r7,zero
    be14:	000f94c0 	call	f94c <__umoddi3>
    be18:	10800c04 	addi	r2,r2,48
    be1c:	8c7fffc4 	addi	r17,r17,-1
    be20:	8009883a 	mov	r4,r16
    be24:	900b883a 	mov	r5,r18
    be28:	88800005 	stb	r2,0(r17)
    be2c:	01800284 	movi	r6,10
    be30:	000f883a 	mov	r7,zero
    be34:	000f3d40 	call	f3d4 <__udivdi3>
    be38:	1021883a 	mov	r16,r2
    be3c:	10c4b03a 	or	r2,r2,r3
    be40:	1825883a 	mov	r18,r3
    be44:	103fef1e 	bne	r2,zero,be04 <___svfiprintf_internal_r+0x764>
    be48:	dc802017 	ldw	r18,128(sp)
    be4c:	dc002117 	ldw	r16,132(sp)
    be50:	da002217 	ldw	r8,136(sp)
    be54:	e015883a 	mov	r10,fp
    be58:	d8c01e17 	ldw	r3,120(sp)
    be5c:	1c47c83a 	sub	r3,r3,r17
    be60:	d8c02115 	stw	r3,132(sp)
    be64:	003f2a06 	br	bb10 <___svfiprintf_internal_r+0x470>
    be68:	dac02317 	ldw	r11,140(sp)
    be6c:	d8001d85 	stb	zero,118(sp)
    be70:	5c400017 	ldw	r17,0(r11)
    be74:	5f000104 	addi	fp,r11,4
    be78:	88022f26 	beq	r17,zero,c738 <___svfiprintf_internal_r+0x1098>
    be7c:	80022516 	blt	r16,zero,c714 <___svfiprintf_internal_r+0x1074>
    be80:	800d883a 	mov	r6,r16
    be84:	000b883a 	mov	r5,zero
    be88:	8809883a 	mov	r4,r17
    be8c:	da002c15 	stw	r8,176(sp)
    be90:	0009e080 	call	9e08 <memchr>
    be94:	da002c17 	ldw	r8,176(sp)
    be98:	10026426 	beq	r2,zero,c82c <___svfiprintf_internal_r+0x118c>
    be9c:	1445c83a 	sub	r2,r2,r17
    bea0:	d8802115 	stw	r2,132(sp)
    bea4:	da801d83 	ldbu	r10,118(sp)
    bea8:	df002315 	stw	fp,140(sp)
    beac:	0021883a 	mov	r16,zero
    beb0:	003f1706 	br	bb10 <___svfiprintf_internal_r+0x470>
    beb4:	94800814 	ori	r18,r18,32
    beb8:	98c00007 	ldb	r3,0(r19)
    bebc:	003e4706 	br	b7dc <___svfiprintf_internal_r+0x13c>
    bec0:	21003fcc 	andi	r4,r4,255
    bec4:	2002701e 	bne	r4,zero,c888 <___svfiprintf_internal_r+0x11e8>
    bec8:	94800414 	ori	r18,r18,16
    becc:	9080080c 	andi	r2,r18,32
    bed0:	103fb71e 	bne	r2,zero,bdb0 <___svfiprintf_internal_r+0x710>
    bed4:	9080040c 	andi	r2,r18,16
    bed8:	1001ab26 	beq	r2,zero,c588 <___svfiprintf_internal_r+0xee8>
    bedc:	dac02317 	ldw	r11,140(sp)
    bee0:	5f000017 	ldw	fp,0(r11)
    bee4:	5ac00104 	addi	r11,r11,4
    bee8:	dac02315 	stw	r11,140(sp)
    beec:	e013d7fa 	srai	r9,fp,31
    bef0:	4805883a 	mov	r2,r9
    bef4:	103fb50e 	bge	r2,zero,bdcc <___svfiprintf_internal_r+0x72c>
    bef8:	0739c83a 	sub	fp,zero,fp
    befc:	02800b44 	movi	r10,45
    bf00:	e004c03a 	cmpne	r2,fp,zero
    bf04:	0253c83a 	sub	r9,zero,r9
    bf08:	da801d85 	stb	r10,118(sp)
    bf0c:	4893c83a 	sub	r9,r9,r2
    bf10:	80023016 	blt	r16,zero,c7d4 <___svfiprintf_internal_r+0x1134>
    bf14:	00bfdfc4 	movi	r2,-129
    bf18:	90a4703a 	and	r18,r18,r2
    bf1c:	483fb21e 	bne	r9,zero,bde8 <___svfiprintf_internal_r+0x748>
    bf20:	00003d06 	br	c018 <___svfiprintf_internal_r+0x978>
    bf24:	9817883a 	mov	r11,r19
    bf28:	d8002415 	stw	zero,144(sp)
    bf2c:	18bff404 	addi	r2,r3,-48
    bf30:	0019883a 	mov	r12,zero
    bf34:	58c00007 	ldb	r3,0(r11)
    bf38:	630002a4 	muli	r12,r12,10
    bf3c:	9cc00044 	addi	r19,r19,1
    bf40:	9817883a 	mov	r11,r19
    bf44:	1319883a 	add	r12,r2,r12
    bf48:	18bff404 	addi	r2,r3,-48
    bf4c:	30bff92e 	bgeu	r6,r2,bf34 <___svfiprintf_internal_r+0x894>
    bf50:	db002415 	stw	r12,144(sp)
    bf54:	18bff804 	addi	r2,r3,-32
    bf58:	28be232e 	bgeu	r5,r2,b7e8 <___svfiprintf_internal_r+0x148>
    bf5c:	21003fcc 	andi	r4,r4,255
    bf60:	20024b1e 	bne	r4,zero,c890 <___svfiprintf_internal_r+0x11f0>
    bf64:	1800d626 	beq	r3,zero,c2c0 <___svfiprintf_internal_r+0xc20>
    bf68:	02c00044 	movi	r11,1
    bf6c:	dac02015 	stw	r11,128(sp)
    bf70:	d8c01005 	stb	r3,64(sp)
    bf74:	d8001d85 	stb	zero,118(sp)
    bf78:	dac02115 	stw	r11,132(sp)
    bf7c:	dc401004 	addi	r17,sp,64
    bf80:	003f2606 	br	bc1c <___svfiprintf_internal_r+0x57c>
    bf84:	94802014 	ori	r18,r18,128
    bf88:	98c00007 	ldb	r3,0(r19)
    bf8c:	003e1306 	br	b7dc <___svfiprintf_internal_r+0x13c>
    bf90:	98c00007 	ldb	r3,0(r19)
    bf94:	9ac00044 	addi	r11,r19,1
    bf98:	1a822b26 	beq	r3,r10,c848 <___svfiprintf_internal_r+0x11a8>
    bf9c:	18bff404 	addi	r2,r3,-48
    bfa0:	0021883a 	mov	r16,zero
    bfa4:	30821e36 	bltu	r6,r2,c820 <___svfiprintf_internal_r+0x1180>
    bfa8:	58c00007 	ldb	r3,0(r11)
    bfac:	840002a4 	muli	r16,r16,10
    bfb0:	5cc00044 	addi	r19,r11,1
    bfb4:	9817883a 	mov	r11,r19
    bfb8:	80a1883a 	add	r16,r16,r2
    bfbc:	18bff404 	addi	r2,r3,-48
    bfc0:	30bff92e 	bgeu	r6,r2,bfa8 <___svfiprintf_internal_r+0x908>
    bfc4:	803e060e 	bge	r16,zero,b7e0 <___svfiprintf_internal_r+0x140>
    bfc8:	043fffc4 	movi	r16,-1
    bfcc:	003e0406 	br	b7e0 <___svfiprintf_internal_r+0x140>
    bfd0:	21003fcc 	andi	r4,r4,255
    bfd4:	2002371e 	bne	r4,zero,c8b4 <___svfiprintf_internal_r+0x1214>
    bfd8:	94800414 	ori	r18,r18,16
    bfdc:	9080080c 	andi	r2,r18,32
    bfe0:	103ebb1e 	bne	r2,zero,bad0 <___svfiprintf_internal_r+0x430>
    bfe4:	9080040c 	andi	r2,r18,16
    bfe8:	10013b26 	beq	r2,zero,c4d8 <___svfiprintf_internal_r+0xe38>
    bfec:	dac02317 	ldw	r11,140(sp)
    bff0:	d8001d85 	stb	zero,118(sp)
    bff4:	0013883a 	mov	r9,zero
    bff8:	58800104 	addi	r2,r11,4
    bffc:	5f000017 	ldw	fp,0(r11)
    c000:	80013d16 	blt	r16,zero,c4f8 <___svfiprintf_internal_r+0xe58>
    c004:	00ffdfc4 	movi	r3,-129
    c008:	d8802315 	stw	r2,140(sp)
    c00c:	90e4703a 	and	r18,r18,r3
    c010:	0015883a 	mov	r10,zero
    c014:	e03eba26 	beq	fp,zero,bb00 <___svfiprintf_internal_r+0x460>
    c018:	00800244 	movi	r2,9
    c01c:	173f7236 	bltu	r2,fp,bde8 <___svfiprintf_internal_r+0x748>
    c020:	dac02b17 	ldw	r11,172(sp)
    c024:	e7000c04 	addi	fp,fp,48
    c028:	df0019c5 	stb	fp,103(sp)
    c02c:	dac02115 	stw	r11,132(sp)
    c030:	dc4019c4 	addi	r17,sp,103
    c034:	003eb606 	br	bb10 <___svfiprintf_internal_r+0x470>
    c038:	21003fcc 	andi	r4,r4,255
    c03c:	20021f1e 	bne	r4,zero,c8bc <___svfiprintf_internal_r+0x121c>
    c040:	94800414 	ori	r18,r18,16
    c044:	9080080c 	andi	r2,r18,32
    c048:	103ec51e 	bne	r2,zero,bb60 <___svfiprintf_internal_r+0x4c0>
    c04c:	9080040c 	andi	r2,r18,16
    c050:	10016926 	beq	r2,zero,c5f8 <___svfiprintf_internal_r+0xf58>
    c054:	dac02317 	ldw	r11,140(sp)
    c058:	d8001d85 	stb	zero,118(sp)
    c05c:	0013883a 	mov	r9,zero
    c060:	58800104 	addi	r2,r11,4
    c064:	5f000017 	ldw	fp,0(r11)
    c068:	80016b16 	blt	r16,zero,c618 <___svfiprintf_internal_r+0xf78>
    c06c:	00ffdfc4 	movi	r3,-129
    c070:	d8802315 	stw	r2,140(sp)
    c074:	90e4703a 	and	r18,r18,r3
    c078:	e03ec41e 	bne	fp,zero,bb8c <___svfiprintf_internal_r+0x4ec>
    c07c:	0015883a 	mov	r10,zero
    c080:	8001c226 	beq	r16,zero,c78c <___svfiprintf_internal_r+0x10ec>
    c084:	0039883a 	mov	fp,zero
    c088:	0013883a 	mov	r9,zero
    c08c:	003ec006 	br	bb90 <___svfiprintf_internal_r+0x4f0>
    c090:	d8c01c17 	ldw	r3,112(sp)
    c094:	d8801b17 	ldw	r2,108(sp)
    c098:	d9001d87 	ldb	r4,118(sp)
    c09c:	20000b26 	beq	r4,zero,c0cc <___svfiprintf_internal_r+0xa2c>
    c0a0:	d9001d84 	addi	r4,sp,118
    c0a4:	18c00044 	addi	r3,r3,1
    c0a8:	10800044 	addi	r2,r2,1
    c0ac:	41000015 	stw	r4,0(r8)
    c0b0:	01000044 	movi	r4,1
    c0b4:	41000115 	stw	r4,4(r8)
    c0b8:	d8c01c15 	stw	r3,112(sp)
    c0bc:	d8801b15 	stw	r2,108(sp)
    c0c0:	010001c4 	movi	r4,7
    c0c4:	2080e116 	blt	r4,r2,c44c <___svfiprintf_internal_r+0xdac>
    c0c8:	42000204 	addi	r8,r8,8
    c0cc:	dac02217 	ldw	r11,136(sp)
    c0d0:	58000b26 	beq	r11,zero,c100 <___svfiprintf_internal_r+0xa60>
    c0d4:	d9001d04 	addi	r4,sp,116
    c0d8:	18c00084 	addi	r3,r3,2
    c0dc:	10800044 	addi	r2,r2,1
    c0e0:	41000015 	stw	r4,0(r8)
    c0e4:	01000084 	movi	r4,2
    c0e8:	41000115 	stw	r4,4(r8)
    c0ec:	d8c01c15 	stw	r3,112(sp)
    c0f0:	d8801b15 	stw	r2,108(sp)
    c0f4:	010001c4 	movi	r4,7
    c0f8:	2080dd16 	blt	r4,r2,c470 <___svfiprintf_internal_r+0xdd0>
    c0fc:	42000204 	addi	r8,r8,8
    c100:	dac02617 	ldw	r11,152(sp)
    c104:	01002004 	movi	r4,128
    c108:	59008426 	beq	r11,r4,c31c <___svfiprintf_internal_r+0xc7c>
    c10c:	dac02117 	ldw	r11,132(sp)
    c110:	82e1c83a 	sub	r16,r16,r11
    c114:	0400270e 	bge	zero,r16,c1b4 <___svfiprintf_internal_r+0xb14>
    c118:	01c00404 	movi	r7,16
    c11c:	3c016a0e 	bge	r7,r16,c6c8 <___svfiprintf_internal_r+0x1028>
    c120:	014000b4 	movhi	r5,2
    c124:	297dc204 	addi	r5,r5,-2296
    c128:	d9402215 	stw	r5,136(sp)
    c12c:	070001c4 	movi	fp,7
    c130:	00000306 	br	c140 <___svfiprintf_internal_r+0xaa0>
    c134:	843ffc04 	addi	r16,r16,-16
    c138:	42000204 	addi	r8,r8,8
    c13c:	3c00130e 	bge	r7,r16,c18c <___svfiprintf_internal_r+0xaec>
    c140:	18c00404 	addi	r3,r3,16
    c144:	10800044 	addi	r2,r2,1
    c148:	45000015 	stw	r20,0(r8)
    c14c:	41c00115 	stw	r7,4(r8)
    c150:	d8c01c15 	stw	r3,112(sp)
    c154:	d8801b15 	stw	r2,108(sp)
    c158:	e0bff60e 	bge	fp,r2,c134 <___svfiprintf_internal_r+0xa94>
    c15c:	d9801a04 	addi	r6,sp,104
    c160:	b80b883a 	mov	r5,r23
    c164:	a809883a 	mov	r4,r21
    c168:	d9c02c15 	stw	r7,176(sp)
    c16c:	000b4d00 	call	b4d0 <__ssprint_r>
    c170:	d9c02c17 	ldw	r7,176(sp)
    c174:	1000581e 	bne	r2,zero,c2d8 <___svfiprintf_internal_r+0xc38>
    c178:	843ffc04 	addi	r16,r16,-16
    c17c:	d8c01c17 	ldw	r3,112(sp)
    c180:	d8801b17 	ldw	r2,108(sp)
    c184:	d811883a 	mov	r8,sp
    c188:	3c3fed16 	blt	r7,r16,c140 <___svfiprintf_internal_r+0xaa0>
    c18c:	dac02217 	ldw	r11,136(sp)
    c190:	1c07883a 	add	r3,r3,r16
    c194:	10800044 	addi	r2,r2,1
    c198:	42c00015 	stw	r11,0(r8)
    c19c:	44000115 	stw	r16,4(r8)
    c1a0:	d8c01c15 	stw	r3,112(sp)
    c1a4:	d8801b15 	stw	r2,108(sp)
    c1a8:	010001c4 	movi	r4,7
    c1ac:	20809e16 	blt	r4,r2,c428 <___svfiprintf_internal_r+0xd88>
    c1b0:	42000204 	addi	r8,r8,8
    c1b4:	dac02117 	ldw	r11,132(sp)
    c1b8:	10800044 	addi	r2,r2,1
    c1bc:	44400015 	stw	r17,0(r8)
    c1c0:	58c7883a 	add	r3,r11,r3
    c1c4:	42c00115 	stw	r11,4(r8)
    c1c8:	d8c01c15 	stw	r3,112(sp)
    c1cc:	d8801b15 	stw	r2,108(sp)
    c1d0:	010001c4 	movi	r4,7
    c1d4:	20807f16 	blt	r4,r2,c3d4 <___svfiprintf_internal_r+0xd34>
    c1d8:	42000204 	addi	r8,r8,8
    c1dc:	9480010c 	andi	r18,r18,4
    c1e0:	90002926 	beq	r18,zero,c288 <___svfiprintf_internal_r+0xbe8>
    c1e4:	dac02417 	ldw	r11,144(sp)
    c1e8:	d8802017 	ldw	r2,128(sp)
    c1ec:	58a1c83a 	sub	r16,r11,r2
    c1f0:	0400250e 	bge	zero,r16,c288 <___svfiprintf_internal_r+0xbe8>
    c1f4:	04400404 	movi	r17,16
    c1f8:	d8801b17 	ldw	r2,108(sp)
    c1fc:	8c017c0e 	bge	r17,r16,c7f0 <___svfiprintf_internal_r+0x1150>
    c200:	014000b4 	movhi	r5,2
    c204:	297dc604 	addi	r5,r5,-2280
    c208:	d9402815 	stw	r5,160(sp)
    c20c:	048001c4 	movi	r18,7
    c210:	00000306 	br	c220 <___svfiprintf_internal_r+0xb80>
    c214:	843ffc04 	addi	r16,r16,-16
    c218:	42000204 	addi	r8,r8,8
    c21c:	8c00110e 	bge	r17,r16,c264 <___svfiprintf_internal_r+0xbc4>
    c220:	18c00404 	addi	r3,r3,16
    c224:	10800044 	addi	r2,r2,1
    c228:	45800015 	stw	r22,0(r8)
    c22c:	44400115 	stw	r17,4(r8)
    c230:	d8c01c15 	stw	r3,112(sp)
    c234:	d8801b15 	stw	r2,108(sp)
    c238:	90bff60e 	bge	r18,r2,c214 <___svfiprintf_internal_r+0xb74>
    c23c:	d9801a04 	addi	r6,sp,104
    c240:	b80b883a 	mov	r5,r23
    c244:	a809883a 	mov	r4,r21
    c248:	000b4d00 	call	b4d0 <__ssprint_r>
    c24c:	1000221e 	bne	r2,zero,c2d8 <___svfiprintf_internal_r+0xc38>
    c250:	843ffc04 	addi	r16,r16,-16
    c254:	d8c01c17 	ldw	r3,112(sp)
    c258:	d8801b17 	ldw	r2,108(sp)
    c25c:	d811883a 	mov	r8,sp
    c260:	8c3fef16 	blt	r17,r16,c220 <___svfiprintf_internal_r+0xb80>
    c264:	dac02817 	ldw	r11,160(sp)
    c268:	1c07883a 	add	r3,r3,r16
    c26c:	10800044 	addi	r2,r2,1
    c270:	42c00015 	stw	r11,0(r8)
    c274:	44000115 	stw	r16,4(r8)
    c278:	d8c01c15 	stw	r3,112(sp)
    c27c:	d8801b15 	stw	r2,108(sp)
    c280:	010001c4 	movi	r4,7
    c284:	2080aa16 	blt	r4,r2,c530 <___svfiprintf_internal_r+0xe90>
    c288:	d8802417 	ldw	r2,144(sp)
    c28c:	dac02017 	ldw	r11,128(sp)
    c290:	12c0010e 	bge	r2,r11,c298 <___svfiprintf_internal_r+0xbf8>
    c294:	5805883a 	mov	r2,r11
    c298:	dac02517 	ldw	r11,148(sp)
    c29c:	5897883a 	add	r11,r11,r2
    c2a0:	dac02515 	stw	r11,148(sp)
    c2a4:	1800531e 	bne	r3,zero,c3f4 <___svfiprintf_internal_r+0xd54>
    c2a8:	98800007 	ldb	r2,0(r19)
    c2ac:	d8001b15 	stw	zero,108(sp)
    c2b0:	d811883a 	mov	r8,sp
    c2b4:	103d231e 	bne	r2,zero,b744 <___svfiprintf_internal_r+0xa4>
    c2b8:	9823883a 	mov	r17,r19
    c2bc:	003d3906 	br	b7a4 <___svfiprintf_internal_r+0x104>
    c2c0:	d8801c17 	ldw	r2,112(sp)
    c2c4:	10000426 	beq	r2,zero,c2d8 <___svfiprintf_internal_r+0xc38>
    c2c8:	d9402717 	ldw	r5,156(sp)
    c2cc:	d9002a17 	ldw	r4,168(sp)
    c2d0:	d9801a04 	addi	r6,sp,104
    c2d4:	000b4d00 	call	b4d0 <__ssprint_r>
    c2d8:	dac02717 	ldw	r11,156(sp)
    c2dc:	d8802517 	ldw	r2,148(sp)
    c2e0:	58c0030b 	ldhu	r3,12(r11)
    c2e4:	18c0100c 	andi	r3,r3,64
    c2e8:	1801381e 	bne	r3,zero,c7cc <___svfiprintf_internal_r+0x112c>
    c2ec:	dfc03717 	ldw	ra,220(sp)
    c2f0:	df003617 	ldw	fp,216(sp)
    c2f4:	ddc03517 	ldw	r23,212(sp)
    c2f8:	dd803417 	ldw	r22,208(sp)
    c2fc:	dd403317 	ldw	r21,204(sp)
    c300:	dd003217 	ldw	r20,200(sp)
    c304:	dcc03117 	ldw	r19,196(sp)
    c308:	dc803017 	ldw	r18,192(sp)
    c30c:	dc402f17 	ldw	r17,188(sp)
    c310:	dc002e17 	ldw	r16,184(sp)
    c314:	dec03804 	addi	sp,sp,224
    c318:	f800283a 	ret
    c31c:	dac02417 	ldw	r11,144(sp)
    c320:	d9002017 	ldw	r4,128(sp)
    c324:	5939c83a 	sub	fp,r11,r4
    c328:	073f780e 	bge	zero,fp,c10c <___svfiprintf_internal_r+0xa6c>
    c32c:	02400404 	movi	r9,16
    c330:	4f01370e 	bge	r9,fp,c810 <___svfiprintf_internal_r+0x1170>
    c334:	02c000b4 	movhi	r11,2
    c338:	5afdc204 	addi	r11,r11,-2296
    c33c:	dac02215 	stw	r11,136(sp)
    c340:	028001c4 	movi	r10,7
    c344:	00000306 	br	c354 <___svfiprintf_internal_r+0xcb4>
    c348:	e73ffc04 	addi	fp,fp,-16
    c34c:	42000204 	addi	r8,r8,8
    c350:	4f00150e 	bge	r9,fp,c3a8 <___svfiprintf_internal_r+0xd08>
    c354:	18c00404 	addi	r3,r3,16
    c358:	10800044 	addi	r2,r2,1
    c35c:	45000015 	stw	r20,0(r8)
    c360:	42400115 	stw	r9,4(r8)
    c364:	d8c01c15 	stw	r3,112(sp)
    c368:	d8801b15 	stw	r2,108(sp)
    c36c:	50bff60e 	bge	r10,r2,c348 <___svfiprintf_internal_r+0xca8>
    c370:	d9801a04 	addi	r6,sp,104
    c374:	b80b883a 	mov	r5,r23
    c378:	a809883a 	mov	r4,r21
    c37c:	da402c15 	stw	r9,176(sp)
    c380:	da802d15 	stw	r10,180(sp)
    c384:	000b4d00 	call	b4d0 <__ssprint_r>
    c388:	da402c17 	ldw	r9,176(sp)
    c38c:	da802d17 	ldw	r10,180(sp)
    c390:	103fd11e 	bne	r2,zero,c2d8 <___svfiprintf_internal_r+0xc38>
    c394:	e73ffc04 	addi	fp,fp,-16
    c398:	d8c01c17 	ldw	r3,112(sp)
    c39c:	d8801b17 	ldw	r2,108(sp)
    c3a0:	d811883a 	mov	r8,sp
    c3a4:	4f3feb16 	blt	r9,fp,c354 <___svfiprintf_internal_r+0xcb4>
    c3a8:	dac02217 	ldw	r11,136(sp)
    c3ac:	1f07883a 	add	r3,r3,fp
    c3b0:	10800044 	addi	r2,r2,1
    c3b4:	42c00015 	stw	r11,0(r8)
    c3b8:	47000115 	stw	fp,4(r8)
    c3bc:	d8c01c15 	stw	r3,112(sp)
    c3c0:	d8801b15 	stw	r2,108(sp)
    c3c4:	010001c4 	movi	r4,7
    c3c8:	2080b616 	blt	r4,r2,c6a4 <___svfiprintf_internal_r+0x1004>
    c3cc:	42000204 	addi	r8,r8,8
    c3d0:	003f4e06 	br	c10c <___svfiprintf_internal_r+0xa6c>
    c3d4:	d9801a04 	addi	r6,sp,104
    c3d8:	b80b883a 	mov	r5,r23
    c3dc:	a809883a 	mov	r4,r21
    c3e0:	000b4d00 	call	b4d0 <__ssprint_r>
    c3e4:	103fbc1e 	bne	r2,zero,c2d8 <___svfiprintf_internal_r+0xc38>
    c3e8:	d8c01c17 	ldw	r3,112(sp)
    c3ec:	d811883a 	mov	r8,sp
    c3f0:	003f7a06 	br	c1dc <___svfiprintf_internal_r+0xb3c>
    c3f4:	d9801a04 	addi	r6,sp,104
    c3f8:	b80b883a 	mov	r5,r23
    c3fc:	a809883a 	mov	r4,r21
    c400:	000b4d00 	call	b4d0 <__ssprint_r>
    c404:	103fa826 	beq	r2,zero,c2a8 <___svfiprintf_internal_r+0xc08>
    c408:	003fb306 	br	c2d8 <___svfiprintf_internal_r+0xc38>
    c40c:	d9801a04 	addi	r6,sp,104
    c410:	b80b883a 	mov	r5,r23
    c414:	a809883a 	mov	r4,r21
    c418:	000b4d00 	call	b4d0 <__ssprint_r>
    c41c:	103fae1e 	bne	r2,zero,c2d8 <___svfiprintf_internal_r+0xc38>
    c420:	d811883a 	mov	r8,sp
    c424:	003cdc06 	br	b798 <___svfiprintf_internal_r+0xf8>
    c428:	d9801a04 	addi	r6,sp,104
    c42c:	b80b883a 	mov	r5,r23
    c430:	a809883a 	mov	r4,r21
    c434:	000b4d00 	call	b4d0 <__ssprint_r>
    c438:	103fa71e 	bne	r2,zero,c2d8 <___svfiprintf_internal_r+0xc38>
    c43c:	d8c01c17 	ldw	r3,112(sp)
    c440:	d8801b17 	ldw	r2,108(sp)
    c444:	d811883a 	mov	r8,sp
    c448:	003f5a06 	br	c1b4 <___svfiprintf_internal_r+0xb14>
    c44c:	d9801a04 	addi	r6,sp,104
    c450:	b80b883a 	mov	r5,r23
    c454:	a809883a 	mov	r4,r21
    c458:	000b4d00 	call	b4d0 <__ssprint_r>
    c45c:	103f9e1e 	bne	r2,zero,c2d8 <___svfiprintf_internal_r+0xc38>
    c460:	d8c01c17 	ldw	r3,112(sp)
    c464:	d8801b17 	ldw	r2,108(sp)
    c468:	d811883a 	mov	r8,sp
    c46c:	003f1706 	br	c0cc <___svfiprintf_internal_r+0xa2c>
    c470:	d9801a04 	addi	r6,sp,104
    c474:	b80b883a 	mov	r5,r23
    c478:	a809883a 	mov	r4,r21
    c47c:	000b4d00 	call	b4d0 <__ssprint_r>
    c480:	103f951e 	bne	r2,zero,c2d8 <___svfiprintf_internal_r+0xc38>
    c484:	d8c01c17 	ldw	r3,112(sp)
    c488:	d8801b17 	ldw	r2,108(sp)
    c48c:	d811883a 	mov	r8,sp
    c490:	003f1b06 	br	c100 <___svfiprintf_internal_r+0xa60>
    c494:	d8001d85 	stb	zero,118(sp)
    c498:	80007b16 	blt	r16,zero,c688 <___svfiprintf_internal_r+0xfe8>
    c49c:	00ffdfc4 	movi	r3,-129
    c4a0:	e244b03a 	or	r2,fp,r9
    c4a4:	90e4703a 	and	r18,r18,r3
    c4a8:	103d7026 	beq	r2,zero,ba6c <___svfiprintf_internal_r+0x3cc>
    c4ac:	0015883a 	mov	r10,zero
    c4b0:	003d7206 	br	ba7c <___svfiprintf_internal_r+0x3dc>
    c4b4:	d9801a04 	addi	r6,sp,104
    c4b8:	b80b883a 	mov	r5,r23
    c4bc:	a809883a 	mov	r4,r21
    c4c0:	000b4d00 	call	b4d0 <__ssprint_r>
    c4c4:	103f841e 	bne	r2,zero,c2d8 <___svfiprintf_internal_r+0xc38>
    c4c8:	d8c01c17 	ldw	r3,112(sp)
    c4cc:	d8801b17 	ldw	r2,108(sp)
    c4d0:	d811883a 	mov	r8,sp
    c4d4:	003ef006 	br	c098 <___svfiprintf_internal_r+0x9f8>
    c4d8:	9080100c 	andi	r2,r18,64
    c4dc:	d8001d85 	stb	zero,118(sp)
    c4e0:	dac02317 	ldw	r11,140(sp)
    c4e4:	10008126 	beq	r2,zero,c6ec <___svfiprintf_internal_r+0x104c>
    c4e8:	58800104 	addi	r2,r11,4
    c4ec:	5f00000b 	ldhu	fp,0(r11)
    c4f0:	0013883a 	mov	r9,zero
    c4f4:	803ec30e 	bge	r16,zero,c004 <___svfiprintf_internal_r+0x964>
    c4f8:	d8802315 	stw	r2,140(sp)
    c4fc:	0015883a 	mov	r10,zero
    c500:	e244b03a 	or	r2,fp,r9
    c504:	103e371e 	bne	r2,zero,bde4 <___svfiprintf_internal_r+0x744>
    c508:	00800044 	movi	r2,1
    c50c:	10803fcc 	andi	r2,r2,255
    c510:	00c00044 	movi	r3,1
    c514:	10c06126 	beq	r2,r3,c69c <___svfiprintf_internal_r+0xffc>
    c518:	00c00084 	movi	r3,2
    c51c:	10fd5526 	beq	r2,r3,ba74 <___svfiprintf_internal_r+0x3d4>
    c520:	003ed806 	br	c084 <___svfiprintf_internal_r+0x9e4>
    c524:	d8802315 	stw	r2,140(sp)
    c528:	98c00007 	ldb	r3,0(r19)
    c52c:	003cab06 	br	b7dc <___svfiprintf_internal_r+0x13c>
    c530:	d9801a04 	addi	r6,sp,104
    c534:	b80b883a 	mov	r5,r23
    c538:	a809883a 	mov	r4,r21
    c53c:	000b4d00 	call	b4d0 <__ssprint_r>
    c540:	103f651e 	bne	r2,zero,c2d8 <___svfiprintf_internal_r+0xc38>
    c544:	d8c01c17 	ldw	r3,112(sp)
    c548:	003f4f06 	br	c288 <___svfiprintf_internal_r+0xbe8>
    c54c:	008000b4 	movhi	r2,2
    c550:	10bd5a04 	addi	r2,r2,-2712
    c554:	d8802915 	stw	r2,164(sp)
    c558:	003d4406 	br	ba6c <___svfiprintf_internal_r+0x3cc>
    c55c:	dac02317 	ldw	r11,140(sp)
    c560:	58800017 	ldw	r2,0(r11)
    c564:	dac02517 	ldw	r11,148(sp)
    c568:	5807d7fa 	srai	r3,r11,31
    c56c:	dac02317 	ldw	r11,140(sp)
    c570:	10c00115 	stw	r3,4(r2)
    c574:	5ac00104 	addi	r11,r11,4
    c578:	dac02315 	stw	r11,140(sp)
    c57c:	dac02517 	ldw	r11,148(sp)
    c580:	12c00015 	stw	r11,0(r2)
    c584:	003c6d06 	br	b73c <___svfiprintf_internal_r+0x9c>
    c588:	9080100c 	andi	r2,r18,64
    c58c:	dac02317 	ldw	r11,140(sp)
    c590:	103e5326 	beq	r2,zero,bee0 <___svfiprintf_internal_r+0x840>
    c594:	5f00000f 	ldh	fp,0(r11)
    c598:	5ac00104 	addi	r11,r11,4
    c59c:	dac02315 	stw	r11,140(sp)
    c5a0:	e013d7fa 	srai	r9,fp,31
    c5a4:	4805883a 	mov	r2,r9
    c5a8:	003e0706 	br	bdc8 <___svfiprintf_internal_r+0x728>
    c5ac:	00800c04 	movi	r2,48
    c5b0:	d8801d05 	stb	r2,116(sp)
    c5b4:	d8c01d45 	stb	r3,117(sp)
    c5b8:	d8001d85 	stb	zero,118(sp)
    c5bc:	90800094 	ori	r2,r18,2
    c5c0:	80008f16 	blt	r16,zero,c800 <___svfiprintf_internal_r+0x1160>
    c5c4:	00bfdfc4 	movi	r2,-129
    c5c8:	90a4703a 	and	r18,r18,r2
    c5cc:	94800094 	ori	r18,r18,2
    c5d0:	0015883a 	mov	r10,zero
    c5d4:	003d2906 	br	ba7c <___svfiprintf_internal_r+0x3dc>
    c5d8:	98c00007 	ldb	r3,0(r19)
    c5dc:	003c7f06 	br	b7dc <___svfiprintf_internal_r+0x13c>
    c5e0:	dac02317 	ldw	r11,140(sp)
    c5e4:	0013883a 	mov	r9,zero
    c5e8:	5f000017 	ldw	fp,0(r11)
    c5ec:	5ac00104 	addi	r11,r11,4
    c5f0:	dac02315 	stw	r11,140(sp)
    c5f4:	003d1506 	br	ba4c <___svfiprintf_internal_r+0x3ac>
    c5f8:	9080100c 	andi	r2,r18,64
    c5fc:	d8001d85 	stb	zero,118(sp)
    c600:	dac02317 	ldw	r11,140(sp)
    c604:	10003426 	beq	r2,zero,c6d8 <___svfiprintf_internal_r+0x1038>
    c608:	58800104 	addi	r2,r11,4
    c60c:	5f00000b 	ldhu	fp,0(r11)
    c610:	0013883a 	mov	r9,zero
    c614:	803e950e 	bge	r16,zero,c06c <___svfiprintf_internal_r+0x9cc>
    c618:	e246b03a 	or	r3,fp,r9
    c61c:	d8802315 	stw	r2,140(sp)
    c620:	183d5a1e 	bne	r3,zero,bb8c <___svfiprintf_internal_r+0x4ec>
    c624:	0015883a 	mov	r10,zero
    c628:	0005883a 	mov	r2,zero
    c62c:	003fb706 	br	c50c <___svfiprintf_internal_r+0xe6c>
    c630:	98c00043 	ldbu	r3,1(r19)
    c634:	94800814 	ori	r18,r18,32
    c638:	9cc00044 	addi	r19,r19,1
    c63c:	18c03fcc 	andi	r3,r3,255
    c640:	18c0201c 	xori	r3,r3,128
    c644:	18ffe004 	addi	r3,r3,-128
    c648:	003c6406 	br	b7dc <___svfiprintf_internal_r+0x13c>
    c64c:	d8c02315 	stw	r3,140(sp)
    c650:	0015883a 	mov	r10,zero
    c654:	003faa06 	br	c500 <___svfiprintf_internal_r+0xe60>
    c658:	dac02317 	ldw	r11,140(sp)
    c65c:	58800017 	ldw	r2,0(r11)
    c660:	5ac00104 	addi	r11,r11,4
    c664:	dac02315 	stw	r11,140(sp)
    c668:	dac02517 	ldw	r11,148(sp)
    c66c:	12c00015 	stw	r11,0(r2)
    c670:	003c3206 	br	b73c <___svfiprintf_internal_r+0x9c>
    c674:	010000b4 	movhi	r4,2
    c678:	213d5a04 	addi	r4,r4,-2712
    c67c:	d9002915 	stw	r4,164(sp)
    c680:	d8c02315 	stw	r3,140(sp)
    c684:	1025883a 	mov	r18,r2
    c688:	e244b03a 	or	r2,fp,r9
    c68c:	103f871e 	bne	r2,zero,c4ac <___svfiprintf_internal_r+0xe0c>
    c690:	0015883a 	mov	r10,zero
    c694:	00800084 	movi	r2,2
    c698:	003f9c06 	br	c50c <___svfiprintf_internal_r+0xe6c>
    c69c:	0039883a 	mov	fp,zero
    c6a0:	003e5f06 	br	c020 <___svfiprintf_internal_r+0x980>
    c6a4:	d9801a04 	addi	r6,sp,104
    c6a8:	b80b883a 	mov	r5,r23
    c6ac:	a809883a 	mov	r4,r21
    c6b0:	000b4d00 	call	b4d0 <__ssprint_r>
    c6b4:	103f081e 	bne	r2,zero,c2d8 <___svfiprintf_internal_r+0xc38>
    c6b8:	d8c01c17 	ldw	r3,112(sp)
    c6bc:	d8801b17 	ldw	r2,108(sp)
    c6c0:	d811883a 	mov	r8,sp
    c6c4:	003e9106 	br	c10c <___svfiprintf_internal_r+0xa6c>
    c6c8:	010000b4 	movhi	r4,2
    c6cc:	213dc204 	addi	r4,r4,-2296
    c6d0:	d9002215 	stw	r4,136(sp)
    c6d4:	003ead06 	br	c18c <___svfiprintf_internal_r+0xaec>
    c6d8:	58800104 	addi	r2,r11,4
    c6dc:	5f000017 	ldw	fp,0(r11)
    c6e0:	0013883a 	mov	r9,zero
    c6e4:	803e610e 	bge	r16,zero,c06c <___svfiprintf_internal_r+0x9cc>
    c6e8:	003fcb06 	br	c618 <___svfiprintf_internal_r+0xf78>
    c6ec:	58800104 	addi	r2,r11,4
    c6f0:	5f000017 	ldw	fp,0(r11)
    c6f4:	0013883a 	mov	r9,zero
    c6f8:	803e420e 	bge	r16,zero,c004 <___svfiprintf_internal_r+0x964>
    c6fc:	003f7e06 	br	c4f8 <___svfiprintf_internal_r+0xe58>
    c700:	5f000017 	ldw	fp,0(r11)
    c704:	5ac00104 	addi	r11,r11,4
    c708:	0013883a 	mov	r9,zero
    c70c:	dac02315 	stw	r11,140(sp)
    c710:	003cce06 	br	ba4c <___svfiprintf_internal_r+0x3ac>
    c714:	8809883a 	mov	r4,r17
    c718:	da002c15 	stw	r8,176(sp)
    c71c:	000b4380 	call	b438 <strlen>
    c720:	d8802115 	stw	r2,132(sp)
    c724:	da801d83 	ldbu	r10,118(sp)
    c728:	df002315 	stw	fp,140(sp)
    c72c:	0021883a 	mov	r16,zero
    c730:	da002c17 	ldw	r8,176(sp)
    c734:	003cf606 	br	bb10 <___svfiprintf_internal_r+0x470>
    c738:	00800184 	movi	r2,6
    c73c:	1400012e 	bgeu	r2,r16,c744 <___svfiprintf_internal_r+0x10a4>
    c740:	1021883a 	mov	r16,r2
    c744:	dc002115 	stw	r16,132(sp)
    c748:	8005883a 	mov	r2,r16
    c74c:	80003c16 	blt	r16,zero,c840 <___svfiprintf_internal_r+0x11a0>
    c750:	044000b4 	movhi	r17,2
    c754:	d8802015 	stw	r2,128(sp)
    c758:	df002315 	stw	fp,140(sp)
    c75c:	8c7d5f04 	addi	r17,r17,-2692
    c760:	003d2e06 	br	bc1c <___svfiprintf_internal_r+0x57c>
    c764:	04001004 	movi	r16,64
    c768:	800b883a 	mov	r5,r16
    c76c:	00095fc0 	call	95fc <_malloc_r>
    c770:	dac02717 	ldw	r11,156(sp)
    c774:	58800015 	stw	r2,0(r11)
    c778:	58800415 	stw	r2,16(r11)
    c77c:	10004826 	beq	r2,zero,c8a0 <___svfiprintf_internal_r+0x1200>
    c780:	dac02717 	ldw	r11,156(sp)
    c784:	5c000515 	stw	r16,20(r11)
    c788:	003bd906 	br	b6f0 <___svfiprintf_internal_r+0x50>
    c78c:	9080004c 	andi	r2,r18,1
    c790:	0015883a 	mov	r10,zero
    c794:	10000626 	beq	r2,zero,c7b0 <___svfiprintf_internal_r+0x1110>
    c798:	dac02b17 	ldw	r11,172(sp)
    c79c:	00800c04 	movi	r2,48
    c7a0:	d88019c5 	stb	r2,103(sp)
    c7a4:	dac02115 	stw	r11,132(sp)
    c7a8:	dc4019c4 	addi	r17,sp,103
    c7ac:	003cd806 	br	bb10 <___svfiprintf_internal_r+0x470>
    c7b0:	d8002115 	stw	zero,132(sp)
    c7b4:	dc401a04 	addi	r17,sp,104
    c7b8:	003cd506 	br	bb10 <___svfiprintf_internal_r+0x470>
    c7bc:	010000b4 	movhi	r4,2
    c7c0:	213dc604 	addi	r4,r4,-2280
    c7c4:	d9002815 	stw	r4,160(sp)
    c7c8:	003d4306 	br	bcd8 <___svfiprintf_internal_r+0x638>
    c7cc:	00bfffc4 	movi	r2,-1
    c7d0:	003ec606 	br	c2ec <___svfiprintf_internal_r+0xc4c>
    c7d4:	00800044 	movi	r2,1
    c7d8:	10803fcc 	andi	r2,r2,255
    c7dc:	00c00044 	movi	r3,1
    c7e0:	10fd8026 	beq	r2,r3,bde4 <___svfiprintf_internal_r+0x744>
    c7e4:	00c00084 	movi	r3,2
    c7e8:	10fca426 	beq	r2,r3,ba7c <___svfiprintf_internal_r+0x3dc>
    c7ec:	003ce806 	br	bb90 <___svfiprintf_internal_r+0x4f0>
    c7f0:	010000b4 	movhi	r4,2
    c7f4:	213dc604 	addi	r4,r4,-2280
    c7f8:	d9002815 	stw	r4,160(sp)
    c7fc:	003e9906 	br	c264 <___svfiprintf_internal_r+0xbc4>
    c800:	1025883a 	mov	r18,r2
    c804:	0015883a 	mov	r10,zero
    c808:	00800084 	movi	r2,2
    c80c:	003ff206 	br	c7d8 <___svfiprintf_internal_r+0x1138>
    c810:	014000b4 	movhi	r5,2
    c814:	297dc204 	addi	r5,r5,-2296
    c818:	d9402215 	stw	r5,136(sp)
    c81c:	003ee206 	br	c3a8 <___svfiprintf_internal_r+0xd08>
    c820:	5827883a 	mov	r19,r11
    c824:	0021883a 	mov	r16,zero
    c828:	003bed06 	br	b7e0 <___svfiprintf_internal_r+0x140>
    c82c:	dc002115 	stw	r16,132(sp)
    c830:	da801d83 	ldbu	r10,118(sp)
    c834:	df002315 	stw	fp,140(sp)
    c838:	0021883a 	mov	r16,zero
    c83c:	003cb406 	br	bb10 <___svfiprintf_internal_r+0x470>
    c840:	0005883a 	mov	r2,zero
    c844:	003fc206 	br	c750 <___svfiprintf_internal_r+0x10b0>
    c848:	d8802317 	ldw	r2,140(sp)
    c84c:	98c00043 	ldbu	r3,1(r19)
    c850:	5827883a 	mov	r19,r11
    c854:	14000017 	ldw	r16,0(r2)
    c858:	10800104 	addi	r2,r2,4
    c85c:	d8802315 	stw	r2,140(sp)
    c860:	803f760e 	bge	r16,zero,c63c <___svfiprintf_internal_r+0xf9c>
    c864:	18c03fcc 	andi	r3,r3,255
    c868:	18c0201c 	xori	r3,r3,128
    c86c:	043fffc4 	movi	r16,-1
    c870:	18ffe004 	addi	r3,r3,-128
    c874:	003bd906 	br	b7dc <___svfiprintf_internal_r+0x13c>
    c878:	d9c01d85 	stb	r7,118(sp)
    c87c:	003cb606 	br	bb58 <___svfiprintf_internal_r+0x4b8>
    c880:	d9c01d85 	stb	r7,118(sp)
    c884:	003d2106 	br	bd0c <___svfiprintf_internal_r+0x66c>
    c888:	d9c01d85 	stb	r7,118(sp)
    c88c:	003d8e06 	br	bec8 <___svfiprintf_internal_r+0x828>
    c890:	d9c01d85 	stb	r7,118(sp)
    c894:	003db306 	br	bf64 <___svfiprintf_internal_r+0x8c4>
    c898:	d9c01d85 	stb	r7,118(sp)
    c89c:	003c8a06 	br	bac8 <___svfiprintf_internal_r+0x428>
    c8a0:	dac02a17 	ldw	r11,168(sp)
    c8a4:	00800304 	movi	r2,12
    c8a8:	58800015 	stw	r2,0(r11)
    c8ac:	00bfffc4 	movi	r2,-1
    c8b0:	003e8e06 	br	c2ec <___svfiprintf_internal_r+0xc4c>
    c8b4:	d9c01d85 	stb	r7,118(sp)
    c8b8:	003dc706 	br	bfd8 <___svfiprintf_internal_r+0x938>
    c8bc:	d9c01d85 	stb	r7,118(sp)
    c8c0:	003ddf06 	br	c040 <___svfiprintf_internal_r+0x9a0>
    c8c4:	d9c01d85 	stb	r7,118(sp)
    c8c8:	003d3706 	br	bda8 <___svfiprintf_internal_r+0x708>
    c8cc:	d9c01d85 	stb	r7,118(sp)
    c8d0:	003c5406 	br	ba24 <___svfiprintf_internal_r+0x384>
    c8d4:	d9c01d85 	stb	r7,118(sp)
    c8d8:	003d1d06 	br	bd50 <___svfiprintf_internal_r+0x6b0>

0000c8dc <__sprint_r.part.0>:
    c8dc:	28801917 	ldw	r2,100(r5)
    c8e0:	defff604 	addi	sp,sp,-40
    c8e4:	dd400515 	stw	r21,20(sp)
    c8e8:	dfc00915 	stw	ra,36(sp)
    c8ec:	df000815 	stw	fp,32(sp)
    c8f0:	ddc00715 	stw	r23,28(sp)
    c8f4:	dd800615 	stw	r22,24(sp)
    c8f8:	dd000415 	stw	r20,16(sp)
    c8fc:	dcc00315 	stw	r19,12(sp)
    c900:	dc800215 	stw	r18,8(sp)
    c904:	dc400115 	stw	r17,4(sp)
    c908:	dc000015 	stw	r16,0(sp)
    c90c:	1088000c 	andi	r2,r2,8192
    c910:	302b883a 	mov	r21,r6
    c914:	10002e26 	beq	r2,zero,c9d0 <__sprint_r.part.0+0xf4>
    c918:	30800217 	ldw	r2,8(r6)
    c91c:	35800017 	ldw	r22,0(r6)
    c920:	10002926 	beq	r2,zero,c9c8 <__sprint_r.part.0+0xec>
    c924:	2827883a 	mov	r19,r5
    c928:	2029883a 	mov	r20,r4
    c92c:	b5c00104 	addi	r23,r22,4
    c930:	04bfffc4 	movi	r18,-1
    c934:	bc400017 	ldw	r17,0(r23)
    c938:	b4000017 	ldw	r16,0(r22)
    c93c:	0039883a 	mov	fp,zero
    c940:	8822d0ba 	srli	r17,r17,2
    c944:	8800031e 	bne	r17,zero,c954 <__sprint_r.part.0+0x78>
    c948:	00001806 	br	c9ac <__sprint_r.part.0+0xd0>
    c94c:	84000104 	addi	r16,r16,4
    c950:	8f001526 	beq	r17,fp,c9a8 <__sprint_r.part.0+0xcc>
    c954:	81400017 	ldw	r5,0(r16)
    c958:	980d883a 	mov	r6,r19
    c95c:	a009883a 	mov	r4,r20
    c960:	000e3040 	call	e304 <_fputwc_r>
    c964:	e7000044 	addi	fp,fp,1
    c968:	14bff81e 	bne	r2,r18,c94c <__sprint_r.part.0+0x70>
    c96c:	9005883a 	mov	r2,r18
    c970:	a8000215 	stw	zero,8(r21)
    c974:	a8000115 	stw	zero,4(r21)
    c978:	dfc00917 	ldw	ra,36(sp)
    c97c:	df000817 	ldw	fp,32(sp)
    c980:	ddc00717 	ldw	r23,28(sp)
    c984:	dd800617 	ldw	r22,24(sp)
    c988:	dd400517 	ldw	r21,20(sp)
    c98c:	dd000417 	ldw	r20,16(sp)
    c990:	dcc00317 	ldw	r19,12(sp)
    c994:	dc800217 	ldw	r18,8(sp)
    c998:	dc400117 	ldw	r17,4(sp)
    c99c:	dc000017 	ldw	r16,0(sp)
    c9a0:	dec00a04 	addi	sp,sp,40
    c9a4:	f800283a 	ret
    c9a8:	a8800217 	ldw	r2,8(r21)
    c9ac:	8c63883a 	add	r17,r17,r17
    c9b0:	8c63883a 	add	r17,r17,r17
    c9b4:	1445c83a 	sub	r2,r2,r17
    c9b8:	a8800215 	stw	r2,8(r21)
    c9bc:	b5800204 	addi	r22,r22,8
    c9c0:	bdc00204 	addi	r23,r23,8
    c9c4:	103fdb1e 	bne	r2,zero,c934 <__sprint_r.part.0+0x58>
    c9c8:	0005883a 	mov	r2,zero
    c9cc:	003fe806 	br	c970 <__sprint_r.part.0+0x94>
    c9d0:	000e4040 	call	e404 <__sfvwrite_r>
    c9d4:	003fe606 	br	c970 <__sprint_r.part.0+0x94>

0000c9d8 <__sprint_r>:
    c9d8:	30c00217 	ldw	r3,8(r6)
    c9dc:	18000126 	beq	r3,zero,c9e4 <__sprint_r+0xc>
    c9e0:	000c8dc1 	jmpi	c8dc <__sprint_r.part.0>
    c9e4:	30000115 	stw	zero,4(r6)
    c9e8:	0005883a 	mov	r2,zero
    c9ec:	f800283a 	ret

0000c9f0 <___vfiprintf_internal_r>:
    c9f0:	deffc904 	addi	sp,sp,-220
    c9f4:	df003515 	stw	fp,212(sp)
    c9f8:	dd003115 	stw	r20,196(sp)
    c9fc:	dfc03615 	stw	ra,216(sp)
    ca00:	ddc03415 	stw	r23,208(sp)
    ca04:	dd803315 	stw	r22,204(sp)
    ca08:	dd403215 	stw	r21,200(sp)
    ca0c:	dcc03015 	stw	r19,192(sp)
    ca10:	dc802f15 	stw	r18,188(sp)
    ca14:	dc402e15 	stw	r17,184(sp)
    ca18:	dc002d15 	stw	r16,180(sp)
    ca1c:	d9002015 	stw	r4,128(sp)
    ca20:	d9c02215 	stw	r7,136(sp)
    ca24:	2829883a 	mov	r20,r5
    ca28:	3039883a 	mov	fp,r6
    ca2c:	20000226 	beq	r4,zero,ca38 <___vfiprintf_internal_r+0x48>
    ca30:	20800e17 	ldw	r2,56(r4)
    ca34:	1000cf26 	beq	r2,zero,cd74 <___vfiprintf_internal_r+0x384>
    ca38:	a080030b 	ldhu	r2,12(r20)
    ca3c:	10c8000c 	andi	r3,r2,8192
    ca40:	1800061e 	bne	r3,zero,ca5c <___vfiprintf_internal_r+0x6c>
    ca44:	a1001917 	ldw	r4,100(r20)
    ca48:	00f7ffc4 	movi	r3,-8193
    ca4c:	10880014 	ori	r2,r2,8192
    ca50:	20c6703a 	and	r3,r4,r3
    ca54:	a080030d 	sth	r2,12(r20)
    ca58:	a0c01915 	stw	r3,100(r20)
    ca5c:	10c0020c 	andi	r3,r2,8
    ca60:	1800a926 	beq	r3,zero,cd08 <___vfiprintf_internal_r+0x318>
    ca64:	a0c00417 	ldw	r3,16(r20)
    ca68:	1800a726 	beq	r3,zero,cd08 <___vfiprintf_internal_r+0x318>
    ca6c:	1080068c 	andi	r2,r2,26
    ca70:	00c00284 	movi	r3,10
    ca74:	10c0ac26 	beq	r2,r3,cd28 <___vfiprintf_internal_r+0x338>
    ca78:	da801a04 	addi	r10,sp,104
    ca7c:	da801e15 	stw	r10,120(sp)
    ca80:	d8801e17 	ldw	r2,120(sp)
    ca84:	da8019c4 	addi	r10,sp,103
    ca88:	058000b4 	movhi	r22,2
    ca8c:	05c000b4 	movhi	r23,2
    ca90:	da801f15 	stw	r10,124(sp)
    ca94:	1295c83a 	sub	r10,r2,r10
    ca98:	b5bdce04 	addi	r22,r22,-2248
    ca9c:	bdfdca04 	addi	r23,r23,-2264
    caa0:	dec01a15 	stw	sp,104(sp)
    caa4:	d8001c15 	stw	zero,112(sp)
    caa8:	d8001b15 	stw	zero,108(sp)
    caac:	d8002615 	stw	zero,152(sp)
    cab0:	d8002315 	stw	zero,140(sp)
    cab4:	da802715 	stw	r10,156(sp)
    cab8:	d811883a 	mov	r8,sp
    cabc:	dd002115 	stw	r20,132(sp)
    cac0:	e021883a 	mov	r16,fp
    cac4:	80800007 	ldb	r2,0(r16)
    cac8:	1003ea26 	beq	r2,zero,da74 <___vfiprintf_internal_r+0x1084>
    cacc:	00c00944 	movi	r3,37
    cad0:	8025883a 	mov	r18,r16
    cad4:	10c0021e 	bne	r2,r3,cae0 <___vfiprintf_internal_r+0xf0>
    cad8:	00001606 	br	cb34 <___vfiprintf_internal_r+0x144>
    cadc:	10c00326 	beq	r2,r3,caec <___vfiprintf_internal_r+0xfc>
    cae0:	94800044 	addi	r18,r18,1
    cae4:	90800007 	ldb	r2,0(r18)
    cae8:	103ffc1e 	bne	r2,zero,cadc <___vfiprintf_internal_r+0xec>
    caec:	9423c83a 	sub	r17,r18,r16
    caf0:	88001026 	beq	r17,zero,cb34 <___vfiprintf_internal_r+0x144>
    caf4:	d8c01c17 	ldw	r3,112(sp)
    caf8:	d8801b17 	ldw	r2,108(sp)
    cafc:	44000015 	stw	r16,0(r8)
    cb00:	88c7883a 	add	r3,r17,r3
    cb04:	10800044 	addi	r2,r2,1
    cb08:	44400115 	stw	r17,4(r8)
    cb0c:	d8c01c15 	stw	r3,112(sp)
    cb10:	d8801b15 	stw	r2,108(sp)
    cb14:	010001c4 	movi	r4,7
    cb18:	2080760e 	bge	r4,r2,ccf4 <___vfiprintf_internal_r+0x304>
    cb1c:	1803821e 	bne	r3,zero,d928 <___vfiprintf_internal_r+0xf38>
    cb20:	da802317 	ldw	r10,140(sp)
    cb24:	d8001b15 	stw	zero,108(sp)
    cb28:	d811883a 	mov	r8,sp
    cb2c:	5455883a 	add	r10,r10,r17
    cb30:	da802315 	stw	r10,140(sp)
    cb34:	90800007 	ldb	r2,0(r18)
    cb38:	10044626 	beq	r2,zero,dc54 <___vfiprintf_internal_r+0x1264>
    cb3c:	90c00047 	ldb	r3,1(r18)
    cb40:	94000044 	addi	r16,r18,1
    cb44:	d8001d85 	stb	zero,118(sp)
    cb48:	0009883a 	mov	r4,zero
    cb4c:	000f883a 	mov	r7,zero
    cb50:	027fffc4 	movi	r9,-1
    cb54:	0023883a 	mov	r17,zero
    cb58:	0029883a 	mov	r20,zero
    cb5c:	01401604 	movi	r5,88
    cb60:	01800244 	movi	r6,9
    cb64:	03400a84 	movi	r13,42
    cb68:	03001b04 	movi	r12,108
    cb6c:	84000044 	addi	r16,r16,1
    cb70:	18bff804 	addi	r2,r3,-32
    cb74:	28827336 	bltu	r5,r2,d544 <___vfiprintf_internal_r+0xb54>
    cb78:	100490ba 	slli	r2,r2,2
    cb7c:	02800074 	movhi	r10,1
    cb80:	52b2e404 	addi	r10,r10,-13424
    cb84:	1285883a 	add	r2,r2,r10
    cb88:	10800017 	ldw	r2,0(r2)
    cb8c:	1000683a 	jmp	r2
    cb90:	0000d278 	rdprs	zero,zero,841
    cb94:	0000d544 	movi	zero,853
    cb98:	0000d544 	movi	zero,853
    cb9c:	0000d298 	cmpnei	zero,zero,842
    cba0:	0000d544 	movi	zero,853
    cba4:	0000d544 	movi	zero,853
    cba8:	0000d544 	movi	zero,853
    cbac:	0000d544 	movi	zero,853
    cbb0:	0000d544 	movi	zero,853
    cbb4:	0000d544 	movi	zero,853
    cbb8:	0000d480 	call	d48 <VGA_text+0x58>
    cbbc:	0000d49c 	xori	zero,zero,850
    cbc0:	0000d544 	movi	zero,853
    cbc4:	0000cd84 	movi	zero,822
    cbc8:	0000d4ac 	andhi	zero,zero,850
    cbcc:	0000d544 	movi	zero,853
    cbd0:	0000d2a4 	muli	zero,zero,842
    cbd4:	0000d2b0 	cmpltui	zero,zero,842
    cbd8:	0000d2b0 	cmpltui	zero,zero,842
    cbdc:	0000d2b0 	cmpltui	zero,zero,842
    cbe0:	0000d2b0 	cmpltui	zero,zero,842
    cbe4:	0000d2b0 	cmpltui	zero,zero,842
    cbe8:	0000d2b0 	cmpltui	zero,zero,842
    cbec:	0000d2b0 	cmpltui	zero,zero,842
    cbf0:	0000d2b0 	cmpltui	zero,zero,842
    cbf4:	0000d2b0 	cmpltui	zero,zero,842
    cbf8:	0000d544 	movi	zero,853
    cbfc:	0000d544 	movi	zero,853
    cc00:	0000d544 	movi	zero,853
    cc04:	0000d544 	movi	zero,853
    cc08:	0000d544 	movi	zero,853
    cc0c:	0000d544 	movi	zero,853
    cc10:	0000d544 	movi	zero,853
    cc14:	0000d544 	movi	zero,853
    cc18:	0000d544 	movi	zero,853
    cc1c:	0000d544 	movi	zero,853
    cc20:	0000d2dc 	xori	zero,zero,843
    cc24:	0000d544 	movi	zero,853
    cc28:	0000d544 	movi	zero,853
    cc2c:	0000d544 	movi	zero,853
    cc30:	0000d544 	movi	zero,853
    cc34:	0000d544 	movi	zero,853
    cc38:	0000d544 	movi	zero,853
    cc3c:	0000d544 	movi	zero,853
    cc40:	0000d544 	movi	zero,853
    cc44:	0000d544 	movi	zero,853
    cc48:	0000d544 	movi	zero,853
    cc4c:	0000d314 	movui	zero,844
    cc50:	0000d544 	movi	zero,853
    cc54:	0000d544 	movi	zero,853
    cc58:	0000d544 	movi	zero,853
    cc5c:	0000d544 	movi	zero,853
    cc60:	0000d544 	movi	zero,853
    cc64:	0000d36c 	andhi	zero,zero,845
    cc68:	0000d544 	movi	zero,853
    cc6c:	0000d544 	movi	zero,853
    cc70:	0000d3dc 	xori	zero,zero,847
    cc74:	0000d544 	movi	zero,853
    cc78:	0000d544 	movi	zero,853
    cc7c:	0000d544 	movi	zero,853
    cc80:	0000d544 	movi	zero,853
    cc84:	0000d544 	movi	zero,853
    cc88:	0000d544 	movi	zero,853
    cc8c:	0000d544 	movi	zero,853
    cc90:	0000d544 	movi	zero,853
    cc94:	0000d544 	movi	zero,853
    cc98:	0000d544 	movi	zero,853
    cc9c:	0000d188 	cmpgei	zero,zero,838
    cca0:	0000d1b4 	movhi	zero,838
    cca4:	0000d544 	movi	zero,853
    cca8:	0000d544 	movi	zero,853
    ccac:	0000d544 	movi	zero,853
    ccb0:	0000d4ec 	andhi	zero,zero,851
    ccb4:	0000d1b4 	movhi	zero,838
    ccb8:	0000d544 	movi	zero,853
    ccbc:	0000d544 	movi	zero,853
    ccc0:	0000d048 	cmpgei	zero,zero,833
    ccc4:	0000d544 	movi	zero,853
    ccc8:	0000d058 	cmpnei	zero,zero,833
    cccc:	0000d094 	movui	zero,834
    ccd0:	0000cd90 	cmplti	zero,zero,822
    ccd4:	0000d03c 	xorhi	zero,zero,832
    ccd8:	0000d544 	movi	zero,853
    ccdc:	0000d418 	cmpnei	zero,zero,848
    cce0:	0000d544 	movi	zero,853
    cce4:	0000d470 	cmpltui	zero,zero,849
    cce8:	0000d544 	movi	zero,853
    ccec:	0000d544 	movi	zero,853
    ccf0:	0000d134 	movhi	zero,836
    ccf4:	42000204 	addi	r8,r8,8
    ccf8:	da802317 	ldw	r10,140(sp)
    ccfc:	5455883a 	add	r10,r10,r17
    cd00:	da802315 	stw	r10,140(sp)
    cd04:	003f8b06 	br	cb34 <___vfiprintf_internal_r+0x144>
    cd08:	d9002017 	ldw	r4,128(sp)
    cd0c:	a00b883a 	mov	r5,r20
    cd10:	0006d840 	call	6d84 <__swsetup_r>
    cd14:	1003b11e 	bne	r2,zero,dbdc <___vfiprintf_internal_r+0x11ec>
    cd18:	a080030b 	ldhu	r2,12(r20)
    cd1c:	00c00284 	movi	r3,10
    cd20:	1080068c 	andi	r2,r2,26
    cd24:	10ff541e 	bne	r2,r3,ca78 <___vfiprintf_internal_r+0x88>
    cd28:	a080038f 	ldh	r2,14(r20)
    cd2c:	103f5216 	blt	r2,zero,ca78 <___vfiprintf_internal_r+0x88>
    cd30:	d9c02217 	ldw	r7,136(sp)
    cd34:	d9002017 	ldw	r4,128(sp)
    cd38:	e00d883a 	mov	r6,fp
    cd3c:	a00b883a 	mov	r5,r20
    cd40:	000de680 	call	de68 <__sbprintf>
    cd44:	dfc03617 	ldw	ra,216(sp)
    cd48:	df003517 	ldw	fp,212(sp)
    cd4c:	ddc03417 	ldw	r23,208(sp)
    cd50:	dd803317 	ldw	r22,204(sp)
    cd54:	dd403217 	ldw	r21,200(sp)
    cd58:	dd003117 	ldw	r20,196(sp)
    cd5c:	dcc03017 	ldw	r19,192(sp)
    cd60:	dc802f17 	ldw	r18,188(sp)
    cd64:	dc402e17 	ldw	r17,184(sp)
    cd68:	dc002d17 	ldw	r16,180(sp)
    cd6c:	dec03704 	addi	sp,sp,220
    cd70:	f800283a 	ret
    cd74:	0008d580 	call	8d58 <__sinit>
    cd78:	003f2f06 	br	ca38 <___vfiprintf_internal_r+0x48>
    cd7c:	0463c83a 	sub	r17,zero,r17
    cd80:	d8802215 	stw	r2,136(sp)
    cd84:	a5000114 	ori	r20,r20,4
    cd88:	80c00007 	ldb	r3,0(r16)
    cd8c:	003f7706 	br	cb6c <___vfiprintf_internal_r+0x17c>
    cd90:	00800c04 	movi	r2,48
    cd94:	da802217 	ldw	r10,136(sp)
    cd98:	d8801d05 	stb	r2,116(sp)
    cd9c:	00801e04 	movi	r2,120
    cda0:	d8801d45 	stb	r2,117(sp)
    cda4:	d8001d85 	stb	zero,118(sp)
    cda8:	50c00104 	addi	r3,r10,4
    cdac:	54800017 	ldw	r18,0(r10)
    cdb0:	0027883a 	mov	r19,zero
    cdb4:	a0800094 	ori	r2,r20,2
    cdb8:	48030b16 	blt	r9,zero,d9e8 <___vfiprintf_internal_r+0xff8>
    cdbc:	00bfdfc4 	movi	r2,-129
    cdc0:	a096703a 	and	r11,r20,r2
    cdc4:	d8c02215 	stw	r3,136(sp)
    cdc8:	5d000094 	ori	r20,r11,2
    cdcc:	90032b1e 	bne	r18,zero,da7c <___vfiprintf_internal_r+0x108c>
    cdd0:	008000b4 	movhi	r2,2
    cdd4:	10bd5a04 	addi	r2,r2,-2712
    cdd8:	d8802615 	stw	r2,152(sp)
    cddc:	0039883a 	mov	fp,zero
    cde0:	48017b1e 	bne	r9,zero,d3d0 <___vfiprintf_internal_r+0x9e0>
    cde4:	0013883a 	mov	r9,zero
    cde8:	0027883a 	mov	r19,zero
    cdec:	dd401a04 	addi	r21,sp,104
    cdf0:	4825883a 	mov	r18,r9
    cdf4:	4cc0010e 	bge	r9,r19,cdfc <___vfiprintf_internal_r+0x40c>
    cdf8:	9825883a 	mov	r18,r19
    cdfc:	e7003fcc 	andi	fp,fp,255
    ce00:	e700201c 	xori	fp,fp,128
    ce04:	e73fe004 	addi	fp,fp,-128
    ce08:	e0000126 	beq	fp,zero,ce10 <___vfiprintf_internal_r+0x420>
    ce0c:	94800044 	addi	r18,r18,1
    ce10:	a380008c 	andi	r14,r20,2
    ce14:	70000126 	beq	r14,zero,ce1c <___vfiprintf_internal_r+0x42c>
    ce18:	94800084 	addi	r18,r18,2
    ce1c:	a700210c 	andi	fp,r20,132
    ce20:	e001df1e 	bne	fp,zero,d5a0 <___vfiprintf_internal_r+0xbb0>
    ce24:	8c87c83a 	sub	r3,r17,r18
    ce28:	00c1dd0e 	bge	zero,r3,d5a0 <___vfiprintf_internal_r+0xbb0>
    ce2c:	01c00404 	movi	r7,16
    ce30:	d8801c17 	ldw	r2,112(sp)
    ce34:	38c3ad0e 	bge	r7,r3,dcec <___vfiprintf_internal_r+0x12fc>
    ce38:	028000b4 	movhi	r10,2
    ce3c:	52bdce04 	addi	r10,r10,-2248
    ce40:	dc002915 	stw	r16,164(sp)
    ce44:	d9801b17 	ldw	r6,108(sp)
    ce48:	da802415 	stw	r10,144(sp)
    ce4c:	03c001c4 	movi	r15,7
    ce50:	da402515 	stw	r9,148(sp)
    ce54:	db802815 	stw	r14,160(sp)
    ce58:	1821883a 	mov	r16,r3
    ce5c:	00000506 	br	ce74 <___vfiprintf_internal_r+0x484>
    ce60:	31400084 	addi	r5,r6,2
    ce64:	42000204 	addi	r8,r8,8
    ce68:	200d883a 	mov	r6,r4
    ce6c:	843ffc04 	addi	r16,r16,-16
    ce70:	3c000d0e 	bge	r7,r16,cea8 <___vfiprintf_internal_r+0x4b8>
    ce74:	10800404 	addi	r2,r2,16
    ce78:	31000044 	addi	r4,r6,1
    ce7c:	45800015 	stw	r22,0(r8)
    ce80:	41c00115 	stw	r7,4(r8)
    ce84:	d8801c15 	stw	r2,112(sp)
    ce88:	d9001b15 	stw	r4,108(sp)
    ce8c:	793ff40e 	bge	r15,r4,ce60 <___vfiprintf_internal_r+0x470>
    ce90:	1001b51e 	bne	r2,zero,d568 <___vfiprintf_internal_r+0xb78>
    ce94:	843ffc04 	addi	r16,r16,-16
    ce98:	000d883a 	mov	r6,zero
    ce9c:	01400044 	movi	r5,1
    cea0:	d811883a 	mov	r8,sp
    cea4:	3c3ff316 	blt	r7,r16,ce74 <___vfiprintf_internal_r+0x484>
    cea8:	8007883a 	mov	r3,r16
    ceac:	da402517 	ldw	r9,148(sp)
    ceb0:	db802817 	ldw	r14,160(sp)
    ceb4:	dc002917 	ldw	r16,164(sp)
    ceb8:	da802417 	ldw	r10,144(sp)
    cebc:	1885883a 	add	r2,r3,r2
    cec0:	40c00115 	stw	r3,4(r8)
    cec4:	42800015 	stw	r10,0(r8)
    cec8:	d8801c15 	stw	r2,112(sp)
    cecc:	d9401b15 	stw	r5,108(sp)
    ced0:	00c001c4 	movi	r3,7
    ced4:	19426016 	blt	r3,r5,d858 <___vfiprintf_internal_r+0xe68>
    ced8:	d8c01d87 	ldb	r3,118(sp)
    cedc:	42000204 	addi	r8,r8,8
    cee0:	29000044 	addi	r4,r5,1
    cee4:	1801b31e 	bne	r3,zero,d5b4 <___vfiprintf_internal_r+0xbc4>
    cee8:	7001c026 	beq	r14,zero,d5ec <___vfiprintf_internal_r+0xbfc>
    ceec:	d8c01d04 	addi	r3,sp,116
    cef0:	10800084 	addi	r2,r2,2
    cef4:	40c00015 	stw	r3,0(r8)
    cef8:	00c00084 	movi	r3,2
    cefc:	40c00115 	stw	r3,4(r8)
    cf00:	d8801c15 	stw	r2,112(sp)
    cf04:	d9001b15 	stw	r4,108(sp)
    cf08:	00c001c4 	movi	r3,7
    cf0c:	1902650e 	bge	r3,r4,d8a4 <___vfiprintf_internal_r+0xeb4>
    cf10:	10029a1e 	bne	r2,zero,d97c <___vfiprintf_internal_r+0xf8c>
    cf14:	00c02004 	movi	r3,128
    cf18:	01000044 	movi	r4,1
    cf1c:	000b883a 	mov	r5,zero
    cf20:	d811883a 	mov	r8,sp
    cf24:	e0c1b31e 	bne	fp,r3,d5f4 <___vfiprintf_internal_r+0xc04>
    cf28:	8cb9c83a 	sub	fp,r17,r18
    cf2c:	0701b10e 	bge	zero,fp,d5f4 <___vfiprintf_internal_r+0xc04>
    cf30:	01c00404 	movi	r7,16
    cf34:	3f03890e 	bge	r7,fp,dd5c <___vfiprintf_internal_r+0x136c>
    cf38:	00c000b4 	movhi	r3,2
    cf3c:	18fdca04 	addi	r3,r3,-2264
    cf40:	d8c02415 	stw	r3,144(sp)
    cf44:	8007883a 	mov	r3,r16
    cf48:	034001c4 	movi	r13,7
    cf4c:	e021883a 	mov	r16,fp
    cf50:	da402515 	stw	r9,148(sp)
    cf54:	1839883a 	mov	fp,r3
    cf58:	00000506 	br	cf70 <___vfiprintf_internal_r+0x580>
    cf5c:	29800084 	addi	r6,r5,2
    cf60:	42000204 	addi	r8,r8,8
    cf64:	180b883a 	mov	r5,r3
    cf68:	843ffc04 	addi	r16,r16,-16
    cf6c:	3c000d0e 	bge	r7,r16,cfa4 <___vfiprintf_internal_r+0x5b4>
    cf70:	10800404 	addi	r2,r2,16
    cf74:	28c00044 	addi	r3,r5,1
    cf78:	45c00015 	stw	r23,0(r8)
    cf7c:	41c00115 	stw	r7,4(r8)
    cf80:	d8801c15 	stw	r2,112(sp)
    cf84:	d8c01b15 	stw	r3,108(sp)
    cf88:	68fff40e 	bge	r13,r3,cf5c <___vfiprintf_internal_r+0x56c>
    cf8c:	1002241e 	bne	r2,zero,d820 <___vfiprintf_internal_r+0xe30>
    cf90:	843ffc04 	addi	r16,r16,-16
    cf94:	01800044 	movi	r6,1
    cf98:	000b883a 	mov	r5,zero
    cf9c:	d811883a 	mov	r8,sp
    cfa0:	3c3ff316 	blt	r7,r16,cf70 <___vfiprintf_internal_r+0x580>
    cfa4:	da402517 	ldw	r9,148(sp)
    cfa8:	e007883a 	mov	r3,fp
    cfac:	8039883a 	mov	fp,r16
    cfb0:	1821883a 	mov	r16,r3
    cfb4:	d8c02417 	ldw	r3,144(sp)
    cfb8:	1705883a 	add	r2,r2,fp
    cfbc:	47000115 	stw	fp,4(r8)
    cfc0:	40c00015 	stw	r3,0(r8)
    cfc4:	d8801c15 	stw	r2,112(sp)
    cfc8:	d9801b15 	stw	r6,108(sp)
    cfcc:	00c001c4 	movi	r3,7
    cfd0:	19827616 	blt	r3,r6,d9ac <___vfiprintf_internal_r+0xfbc>
    cfd4:	4cf9c83a 	sub	fp,r9,r19
    cfd8:	42000204 	addi	r8,r8,8
    cfdc:	31000044 	addi	r4,r6,1
    cfe0:	300b883a 	mov	r5,r6
    cfe4:	07018516 	blt	zero,fp,d5fc <___vfiprintf_internal_r+0xc0c>
    cfe8:	9885883a 	add	r2,r19,r2
    cfec:	45400015 	stw	r21,0(r8)
    cff0:	44c00115 	stw	r19,4(r8)
    cff4:	d8801c15 	stw	r2,112(sp)
    cff8:	d9001b15 	stw	r4,108(sp)
    cffc:	00c001c4 	movi	r3,7
    d000:	1901dd0e 	bge	r3,r4,d778 <___vfiprintf_internal_r+0xd88>
    d004:	1002401e 	bne	r2,zero,d908 <___vfiprintf_internal_r+0xf18>
    d008:	d8001b15 	stw	zero,108(sp)
    d00c:	a2c0010c 	andi	r11,r20,4
    d010:	58000226 	beq	r11,zero,d01c <___vfiprintf_internal_r+0x62c>
    d014:	8ca7c83a 	sub	r19,r17,r18
    d018:	04c2f216 	blt	zero,r19,dbe4 <___vfiprintf_internal_r+0x11f4>
    d01c:	8c80010e 	bge	r17,r18,d024 <___vfiprintf_internal_r+0x634>
    d020:	9023883a 	mov	r17,r18
    d024:	da802317 	ldw	r10,140(sp)
    d028:	5455883a 	add	r10,r10,r17
    d02c:	da802315 	stw	r10,140(sp)
    d030:	d8001b15 	stw	zero,108(sp)
    d034:	d811883a 	mov	r8,sp
    d038:	003ea206 	br	cac4 <___vfiprintf_internal_r+0xd4>
    d03c:	a5000814 	ori	r20,r20,32
    d040:	80c00007 	ldb	r3,0(r16)
    d044:	003ec906 	br	cb6c <___vfiprintf_internal_r+0x17c>
    d048:	80c00007 	ldb	r3,0(r16)
    d04c:	1b030926 	beq	r3,r12,dc74 <___vfiprintf_internal_r+0x1284>
    d050:	a5000414 	ori	r20,r20,16
    d054:	003ec506 	br	cb6c <___vfiprintf_internal_r+0x17c>
    d058:	21003fcc 	andi	r4,r4,255
    d05c:	20035e1e 	bne	r4,zero,ddd8 <___vfiprintf_internal_r+0x13e8>
    d060:	a080080c 	andi	r2,r20,32
    d064:	1002a526 	beq	r2,zero,dafc <___vfiprintf_internal_r+0x110c>
    d068:	da802217 	ldw	r10,136(sp)
    d06c:	50800017 	ldw	r2,0(r10)
    d070:	da802317 	ldw	r10,140(sp)
    d074:	5007d7fa 	srai	r3,r10,31
    d078:	da802217 	ldw	r10,136(sp)
    d07c:	10c00115 	stw	r3,4(r2)
    d080:	52800104 	addi	r10,r10,4
    d084:	da802215 	stw	r10,136(sp)
    d088:	da802317 	ldw	r10,140(sp)
    d08c:	12800015 	stw	r10,0(r2)
    d090:	003e8c06 	br	cac4 <___vfiprintf_internal_r+0xd4>
    d094:	21003fcc 	andi	r4,r4,255
    d098:	2003511e 	bne	r4,zero,dde0 <___vfiprintf_internal_r+0x13f0>
    d09c:	a080080c 	andi	r2,r20,32
    d0a0:	1000a126 	beq	r2,zero,d328 <___vfiprintf_internal_r+0x938>
    d0a4:	da802217 	ldw	r10,136(sp)
    d0a8:	d8001d85 	stb	zero,118(sp)
    d0ac:	50800204 	addi	r2,r10,8
    d0b0:	54800017 	ldw	r18,0(r10)
    d0b4:	54c00117 	ldw	r19,4(r10)
    d0b8:	4802b416 	blt	r9,zero,db8c <___vfiprintf_internal_r+0x119c>
    d0bc:	013fdfc4 	movi	r4,-129
    d0c0:	94c6b03a 	or	r3,r18,r19
    d0c4:	d8802215 	stw	r2,136(sp)
    d0c8:	a128703a 	and	r20,r20,r4
    d0cc:	1800a226 	beq	r3,zero,d358 <___vfiprintf_internal_r+0x968>
    d0d0:	0039883a 	mov	fp,zero
    d0d4:	dd401a04 	addi	r21,sp,104
    d0d8:	9006d0fa 	srli	r3,r18,3
    d0dc:	9808977a 	slli	r4,r19,29
    d0e0:	9826d0fa 	srli	r19,r19,3
    d0e4:	948001cc 	andi	r18,r18,7
    d0e8:	90800c04 	addi	r2,r18,48
    d0ec:	ad7fffc4 	addi	r21,r21,-1
    d0f0:	20e4b03a 	or	r18,r4,r3
    d0f4:	a8800005 	stb	r2,0(r21)
    d0f8:	94c6b03a 	or	r3,r18,r19
    d0fc:	183ff61e 	bne	r3,zero,d0d8 <___vfiprintf_internal_r+0x6e8>
    d100:	a0c0004c 	andi	r3,r20,1
    d104:	18005926 	beq	r3,zero,d26c <___vfiprintf_internal_r+0x87c>
    d108:	10803fcc 	andi	r2,r2,255
    d10c:	1080201c 	xori	r2,r2,128
    d110:	10bfe004 	addi	r2,r2,-128
    d114:	00c00c04 	movi	r3,48
    d118:	10c05426 	beq	r2,r3,d26c <___vfiprintf_internal_r+0x87c>
    d11c:	da801e17 	ldw	r10,120(sp)
    d120:	a8bfffc4 	addi	r2,r21,-1
    d124:	a8ffffc5 	stb	r3,-1(r21)
    d128:	50a7c83a 	sub	r19,r10,r2
    d12c:	102b883a 	mov	r21,r2
    d130:	003f2f06 	br	cdf0 <___vfiprintf_internal_r+0x400>
    d134:	21003fcc 	andi	r4,r4,255
    d138:	2003421e 	bne	r4,zero,de44 <___vfiprintf_internal_r+0x1454>
    d13c:	008000b4 	movhi	r2,2
    d140:	10bd5a04 	addi	r2,r2,-2712
    d144:	d8802615 	stw	r2,152(sp)
    d148:	a080080c 	andi	r2,r20,32
    d14c:	1000aa26 	beq	r2,zero,d3f8 <___vfiprintf_internal_r+0xa08>
    d150:	da802217 	ldw	r10,136(sp)
    d154:	54800017 	ldw	r18,0(r10)
    d158:	54c00117 	ldw	r19,4(r10)
    d15c:	52800204 	addi	r10,r10,8
    d160:	da802215 	stw	r10,136(sp)
    d164:	a080004c 	andi	r2,r20,1
    d168:	1001d226 	beq	r2,zero,d8b4 <___vfiprintf_internal_r+0xec4>
    d16c:	94c4b03a 	or	r2,r18,r19
    d170:	1002351e 	bne	r2,zero,da48 <___vfiprintf_internal_r+0x1058>
    d174:	d8001d85 	stb	zero,118(sp)
    d178:	48022216 	blt	r9,zero,da04 <___vfiprintf_internal_r+0x1014>
    d17c:	00bfdfc4 	movi	r2,-129
    d180:	a0a8703a 	and	r20,r20,r2
    d184:	003f1506 	br	cddc <___vfiprintf_internal_r+0x3ec>
    d188:	da802217 	ldw	r10,136(sp)
    d18c:	04800044 	movi	r18,1
    d190:	d8001d85 	stb	zero,118(sp)
    d194:	50800017 	ldw	r2,0(r10)
    d198:	52800104 	addi	r10,r10,4
    d19c:	da802215 	stw	r10,136(sp)
    d1a0:	d8801005 	stb	r2,64(sp)
    d1a4:	9027883a 	mov	r19,r18
    d1a8:	dd401004 	addi	r21,sp,64
    d1ac:	0013883a 	mov	r9,zero
    d1b0:	003f1706 	br	ce10 <___vfiprintf_internal_r+0x420>
    d1b4:	21003fcc 	andi	r4,r4,255
    d1b8:	2003201e 	bne	r4,zero,de3c <___vfiprintf_internal_r+0x144c>
    d1bc:	a080080c 	andi	r2,r20,32
    d1c0:	10004b26 	beq	r2,zero,d2f0 <___vfiprintf_internal_r+0x900>
    d1c4:	da802217 	ldw	r10,136(sp)
    d1c8:	50800117 	ldw	r2,4(r10)
    d1cc:	54800017 	ldw	r18,0(r10)
    d1d0:	52800204 	addi	r10,r10,8
    d1d4:	da802215 	stw	r10,136(sp)
    d1d8:	1027883a 	mov	r19,r2
    d1dc:	10022c16 	blt	r2,zero,da90 <___vfiprintf_internal_r+0x10a0>
    d1e0:	df001d83 	ldbu	fp,118(sp)
    d1e4:	48007216 	blt	r9,zero,d3b0 <___vfiprintf_internal_r+0x9c0>
    d1e8:	00ffdfc4 	movi	r3,-129
    d1ec:	94c4b03a 	or	r2,r18,r19
    d1f0:	a0e8703a 	and	r20,r20,r3
    d1f4:	1000cc26 	beq	r2,zero,d528 <___vfiprintf_internal_r+0xb38>
    d1f8:	98021026 	beq	r19,zero,da3c <___vfiprintf_internal_r+0x104c>
    d1fc:	dc402415 	stw	r17,144(sp)
    d200:	dc002515 	stw	r16,148(sp)
    d204:	9823883a 	mov	r17,r19
    d208:	9021883a 	mov	r16,r18
    d20c:	dd401a04 	addi	r21,sp,104
    d210:	4825883a 	mov	r18,r9
    d214:	4027883a 	mov	r19,r8
    d218:	8009883a 	mov	r4,r16
    d21c:	880b883a 	mov	r5,r17
    d220:	01800284 	movi	r6,10
    d224:	000f883a 	mov	r7,zero
    d228:	000f94c0 	call	f94c <__umoddi3>
    d22c:	10800c04 	addi	r2,r2,48
    d230:	ad7fffc4 	addi	r21,r21,-1
    d234:	8009883a 	mov	r4,r16
    d238:	880b883a 	mov	r5,r17
    d23c:	a8800005 	stb	r2,0(r21)
    d240:	01800284 	movi	r6,10
    d244:	000f883a 	mov	r7,zero
    d248:	000f3d40 	call	f3d4 <__udivdi3>
    d24c:	1021883a 	mov	r16,r2
    d250:	10c4b03a 	or	r2,r2,r3
    d254:	1823883a 	mov	r17,r3
    d258:	103fef1e 	bne	r2,zero,d218 <___vfiprintf_internal_r+0x828>
    d25c:	dc402417 	ldw	r17,144(sp)
    d260:	dc002517 	ldw	r16,148(sp)
    d264:	9013883a 	mov	r9,r18
    d268:	9811883a 	mov	r8,r19
    d26c:	da801e17 	ldw	r10,120(sp)
    d270:	5567c83a 	sub	r19,r10,r21
    d274:	003ede06 	br	cdf0 <___vfiprintf_internal_r+0x400>
    d278:	38803fcc 	andi	r2,r7,255
    d27c:	1080201c 	xori	r2,r2,128
    d280:	10bfe004 	addi	r2,r2,-128
    d284:	1002371e 	bne	r2,zero,db64 <___vfiprintf_internal_r+0x1174>
    d288:	01000044 	movi	r4,1
    d28c:	01c00804 	movi	r7,32
    d290:	80c00007 	ldb	r3,0(r16)
    d294:	003e3506 	br	cb6c <___vfiprintf_internal_r+0x17c>
    d298:	a5000054 	ori	r20,r20,1
    d29c:	80c00007 	ldb	r3,0(r16)
    d2a0:	003e3206 	br	cb6c <___vfiprintf_internal_r+0x17c>
    d2a4:	a5002014 	ori	r20,r20,128
    d2a8:	80c00007 	ldb	r3,0(r16)
    d2ac:	003e2f06 	br	cb6c <___vfiprintf_internal_r+0x17c>
    d2b0:	8015883a 	mov	r10,r16
    d2b4:	0023883a 	mov	r17,zero
    d2b8:	18bff404 	addi	r2,r3,-48
    d2bc:	50c00007 	ldb	r3,0(r10)
    d2c0:	8c4002a4 	muli	r17,r17,10
    d2c4:	84000044 	addi	r16,r16,1
    d2c8:	8015883a 	mov	r10,r16
    d2cc:	1463883a 	add	r17,r2,r17
    d2d0:	18bff404 	addi	r2,r3,-48
    d2d4:	30bff92e 	bgeu	r6,r2,d2bc <___vfiprintf_internal_r+0x8cc>
    d2d8:	003e2506 	br	cb70 <___vfiprintf_internal_r+0x180>
    d2dc:	21003fcc 	andi	r4,r4,255
    d2e0:	2002d41e 	bne	r4,zero,de34 <___vfiprintf_internal_r+0x1444>
    d2e4:	a5000414 	ori	r20,r20,16
    d2e8:	a080080c 	andi	r2,r20,32
    d2ec:	103fb51e 	bne	r2,zero,d1c4 <___vfiprintf_internal_r+0x7d4>
    d2f0:	a080040c 	andi	r2,r20,16
    d2f4:	1001f826 	beq	r2,zero,dad8 <___vfiprintf_internal_r+0x10e8>
    d2f8:	da802217 	ldw	r10,136(sp)
    d2fc:	54800017 	ldw	r18,0(r10)
    d300:	52800104 	addi	r10,r10,4
    d304:	da802215 	stw	r10,136(sp)
    d308:	9027d7fa 	srai	r19,r18,31
    d30c:	9805883a 	mov	r2,r19
    d310:	003fb206 	br	d1dc <___vfiprintf_internal_r+0x7ec>
    d314:	21003fcc 	andi	r4,r4,255
    d318:	2002c41e 	bne	r4,zero,de2c <___vfiprintf_internal_r+0x143c>
    d31c:	a5000414 	ori	r20,r20,16
    d320:	a080080c 	andi	r2,r20,32
    d324:	103f5f1e 	bne	r2,zero,d0a4 <___vfiprintf_internal_r+0x6b4>
    d328:	a080040c 	andi	r2,r20,16
    d32c:	10020f26 	beq	r2,zero,db6c <___vfiprintf_internal_r+0x117c>
    d330:	da802217 	ldw	r10,136(sp)
    d334:	d8001d85 	stb	zero,118(sp)
    d338:	0027883a 	mov	r19,zero
    d33c:	50800104 	addi	r2,r10,4
    d340:	54800017 	ldw	r18,0(r10)
    d344:	48021116 	blt	r9,zero,db8c <___vfiprintf_internal_r+0x119c>
    d348:	00ffdfc4 	movi	r3,-129
    d34c:	d8802215 	stw	r2,136(sp)
    d350:	a0e8703a 	and	r20,r20,r3
    d354:	903f5e1e 	bne	r18,zero,d0d0 <___vfiprintf_internal_r+0x6e0>
    d358:	0039883a 	mov	fp,zero
    d35c:	4802a626 	beq	r9,zero,ddf8 <___vfiprintf_internal_r+0x1408>
    d360:	0025883a 	mov	r18,zero
    d364:	0027883a 	mov	r19,zero
    d368:	003f5a06 	br	d0d4 <___vfiprintf_internal_r+0x6e4>
    d36c:	21003fcc 	andi	r4,r4,255
    d370:	20029f1e 	bne	r4,zero,ddf0 <___vfiprintf_internal_r+0x1400>
    d374:	a5000414 	ori	r20,r20,16
    d378:	a080080c 	andi	r2,r20,32
    d37c:	10005e1e 	bne	r2,zero,d4f8 <___vfiprintf_internal_r+0xb08>
    d380:	a080040c 	andi	r2,r20,16
    d384:	1001a21e 	bne	r2,zero,da10 <___vfiprintf_internal_r+0x1020>
    d388:	a080100c 	andi	r2,r20,64
    d38c:	d8001d85 	stb	zero,118(sp)
    d390:	da802217 	ldw	r10,136(sp)
    d394:	1002231e 	bne	r2,zero,dc24 <___vfiprintf_internal_r+0x1234>
    d398:	50800104 	addi	r2,r10,4
    d39c:	54800017 	ldw	r18,0(r10)
    d3a0:	0027883a 	mov	r19,zero
    d3a4:	4801a00e 	bge	r9,zero,da28 <___vfiprintf_internal_r+0x1038>
    d3a8:	d8802215 	stw	r2,136(sp)
    d3ac:	0039883a 	mov	fp,zero
    d3b0:	94c4b03a 	or	r2,r18,r19
    d3b4:	103f901e 	bne	r2,zero,d1f8 <___vfiprintf_internal_r+0x808>
    d3b8:	00800044 	movi	r2,1
    d3bc:	10803fcc 	andi	r2,r2,255
    d3c0:	00c00044 	movi	r3,1
    d3c4:	10c05926 	beq	r2,r3,d52c <___vfiprintf_internal_r+0xb3c>
    d3c8:	00c00084 	movi	r3,2
    d3cc:	10ffe41e 	bne	r2,r3,d360 <___vfiprintf_internal_r+0x970>
    d3d0:	0025883a 	mov	r18,zero
    d3d4:	0027883a 	mov	r19,zero
    d3d8:	00013d06 	br	d8d0 <___vfiprintf_internal_r+0xee0>
    d3dc:	21003fcc 	andi	r4,r4,255
    d3e0:	2002811e 	bne	r4,zero,dde8 <___vfiprintf_internal_r+0x13f8>
    d3e4:	008000b4 	movhi	r2,2
    d3e8:	10bd5504 	addi	r2,r2,-2732
    d3ec:	d8802615 	stw	r2,152(sp)
    d3f0:	a080080c 	andi	r2,r20,32
    d3f4:	103f561e 	bne	r2,zero,d150 <___vfiprintf_internal_r+0x760>
    d3f8:	a080040c 	andi	r2,r20,16
    d3fc:	1001d126 	beq	r2,zero,db44 <___vfiprintf_internal_r+0x1154>
    d400:	da802217 	ldw	r10,136(sp)
    d404:	0027883a 	mov	r19,zero
    d408:	54800017 	ldw	r18,0(r10)
    d40c:	52800104 	addi	r10,r10,4
    d410:	da802215 	stw	r10,136(sp)
    d414:	003f5306 	br	d164 <___vfiprintf_internal_r+0x774>
    d418:	da802217 	ldw	r10,136(sp)
    d41c:	d8001d85 	stb	zero,118(sp)
    d420:	55400017 	ldw	r21,0(r10)
    d424:	50c00104 	addi	r3,r10,4
    d428:	a8024226 	beq	r21,zero,dd34 <___vfiprintf_internal_r+0x1344>
    d42c:	48021816 	blt	r9,zero,dc90 <___vfiprintf_internal_r+0x12a0>
    d430:	480d883a 	mov	r6,r9
    d434:	000b883a 	mov	r5,zero
    d438:	a809883a 	mov	r4,r21
    d43c:	d8c02a15 	stw	r3,168(sp)
    d440:	da002b15 	stw	r8,172(sp)
    d444:	da402c15 	stw	r9,176(sp)
    d448:	0009e080 	call	9e08 <memchr>
    d44c:	d8c02a17 	ldw	r3,168(sp)
    d450:	da002b17 	ldw	r8,172(sp)
    d454:	da402c17 	ldw	r9,176(sp)
    d458:	10024826 	beq	r2,zero,dd7c <___vfiprintf_internal_r+0x138c>
    d45c:	1567c83a 	sub	r19,r2,r21
    d460:	df001d83 	ldbu	fp,118(sp)
    d464:	d8c02215 	stw	r3,136(sp)
    d468:	0013883a 	mov	r9,zero
    d46c:	003e6006 	br	cdf0 <___vfiprintf_internal_r+0x400>
    d470:	21003fcc 	andi	r4,r4,255
    d474:	203fc026 	beq	r4,zero,d378 <___vfiprintf_internal_r+0x988>
    d478:	d9c01d85 	stb	r7,118(sp)
    d47c:	003fbe06 	br	d378 <___vfiprintf_internal_r+0x988>
    d480:	da802217 	ldw	r10,136(sp)
    d484:	54400017 	ldw	r17,0(r10)
    d488:	50800104 	addi	r2,r10,4
    d48c:	883e3b16 	blt	r17,zero,cd7c <___vfiprintf_internal_r+0x38c>
    d490:	d8802215 	stw	r2,136(sp)
    d494:	80c00007 	ldb	r3,0(r16)
    d498:	003db406 	br	cb6c <___vfiprintf_internal_r+0x17c>
    d49c:	01000044 	movi	r4,1
    d4a0:	01c00ac4 	movi	r7,43
    d4a4:	80c00007 	ldb	r3,0(r16)
    d4a8:	003db006 	br	cb6c <___vfiprintf_internal_r+0x17c>
    d4ac:	80c00007 	ldb	r3,0(r16)
    d4b0:	82800044 	addi	r10,r16,1
    d4b4:	1b423c26 	beq	r3,r13,dda8 <___vfiprintf_internal_r+0x13b8>
    d4b8:	18bff404 	addi	r2,r3,-48
    d4bc:	0013883a 	mov	r9,zero
    d4c0:	30822b36 	bltu	r6,r2,dd70 <___vfiprintf_internal_r+0x1380>
    d4c4:	50c00007 	ldb	r3,0(r10)
    d4c8:	4a4002a4 	muli	r9,r9,10
    d4cc:	54000044 	addi	r16,r10,1
    d4d0:	8015883a 	mov	r10,r16
    d4d4:	4893883a 	add	r9,r9,r2
    d4d8:	18bff404 	addi	r2,r3,-48
    d4dc:	30bff92e 	bgeu	r6,r2,d4c4 <___vfiprintf_internal_r+0xad4>
    d4e0:	483da30e 	bge	r9,zero,cb70 <___vfiprintf_internal_r+0x180>
    d4e4:	027fffc4 	movi	r9,-1
    d4e8:	003da106 	br	cb70 <___vfiprintf_internal_r+0x180>
    d4ec:	a5001014 	ori	r20,r20,64
    d4f0:	80c00007 	ldb	r3,0(r16)
    d4f4:	003d9d06 	br	cb6c <___vfiprintf_internal_r+0x17c>
    d4f8:	da802217 	ldw	r10,136(sp)
    d4fc:	d8001d85 	stb	zero,118(sp)
    d500:	50c00204 	addi	r3,r10,8
    d504:	54800017 	ldw	r18,0(r10)
    d508:	54c00117 	ldw	r19,4(r10)
    d50c:	4801ca16 	blt	r9,zero,dc38 <___vfiprintf_internal_r+0x1248>
    d510:	013fdfc4 	movi	r4,-129
    d514:	94c4b03a 	or	r2,r18,r19
    d518:	d8c02215 	stw	r3,136(sp)
    d51c:	a128703a 	and	r20,r20,r4
    d520:	0039883a 	mov	fp,zero
    d524:	103f341e 	bne	r2,zero,d1f8 <___vfiprintf_internal_r+0x808>
    d528:	483e2e26 	beq	r9,zero,cde4 <___vfiprintf_internal_r+0x3f4>
    d52c:	0025883a 	mov	r18,zero
    d530:	94800c04 	addi	r18,r18,48
    d534:	dc8019c5 	stb	r18,103(sp)
    d538:	dcc02717 	ldw	r19,156(sp)
    d53c:	dd4019c4 	addi	r21,sp,103
    d540:	003e2b06 	br	cdf0 <___vfiprintf_internal_r+0x400>
    d544:	21003fcc 	andi	r4,r4,255
    d548:	2002361e 	bne	r4,zero,de24 <___vfiprintf_internal_r+0x1434>
    d54c:	1801c126 	beq	r3,zero,dc54 <___vfiprintf_internal_r+0x1264>
    d550:	04800044 	movi	r18,1
    d554:	d8c01005 	stb	r3,64(sp)
    d558:	d8001d85 	stb	zero,118(sp)
    d55c:	9027883a 	mov	r19,r18
    d560:	dd401004 	addi	r21,sp,64
    d564:	003f1106 	br	d1ac <___vfiprintf_internal_r+0x7bc>
    d568:	d9402117 	ldw	r5,132(sp)
    d56c:	d9002017 	ldw	r4,128(sp)
    d570:	d9801a04 	addi	r6,sp,104
    d574:	d9c02b15 	stw	r7,172(sp)
    d578:	dbc02a15 	stw	r15,168(sp)
    d57c:	000c8dc0 	call	c8dc <__sprint_r.part.0>
    d580:	d9c02b17 	ldw	r7,172(sp)
    d584:	dbc02a17 	ldw	r15,168(sp)
    d588:	10006d1e 	bne	r2,zero,d740 <___vfiprintf_internal_r+0xd50>
    d58c:	d9801b17 	ldw	r6,108(sp)
    d590:	d8801c17 	ldw	r2,112(sp)
    d594:	d811883a 	mov	r8,sp
    d598:	31400044 	addi	r5,r6,1
    d59c:	003e3306 	br	ce6c <___vfiprintf_internal_r+0x47c>
    d5a0:	d9401b17 	ldw	r5,108(sp)
    d5a4:	d8801c17 	ldw	r2,112(sp)
    d5a8:	29000044 	addi	r4,r5,1
    d5ac:	d8c01d87 	ldb	r3,118(sp)
    d5b0:	183e4d26 	beq	r3,zero,cee8 <___vfiprintf_internal_r+0x4f8>
    d5b4:	00c00044 	movi	r3,1
    d5b8:	d9401d84 	addi	r5,sp,118
    d5bc:	10c5883a 	add	r2,r2,r3
    d5c0:	41400015 	stw	r5,0(r8)
    d5c4:	40c00115 	stw	r3,4(r8)
    d5c8:	d8801c15 	stw	r2,112(sp)
    d5cc:	d9001b15 	stw	r4,108(sp)
    d5d0:	014001c4 	movi	r5,7
    d5d4:	2900a90e 	bge	r5,r4,d87c <___vfiprintf_internal_r+0xe8c>
    d5d8:	1000da1e 	bne	r2,zero,d944 <___vfiprintf_internal_r+0xf54>
    d5dc:	7000ab1e 	bne	r14,zero,d88c <___vfiprintf_internal_r+0xe9c>
    d5e0:	000b883a 	mov	r5,zero
    d5e4:	1809883a 	mov	r4,r3
    d5e8:	d811883a 	mov	r8,sp
    d5ec:	00c02004 	movi	r3,128
    d5f0:	e0fe4d26 	beq	fp,r3,cf28 <___vfiprintf_internal_r+0x538>
    d5f4:	4cf9c83a 	sub	fp,r9,r19
    d5f8:	073e7b0e 	bge	zero,fp,cfe8 <___vfiprintf_internal_r+0x5f8>
    d5fc:	01c00404 	movi	r7,16
    d600:	3f01900e 	bge	r7,fp,dc44 <___vfiprintf_internal_r+0x1254>
    d604:	00c000b4 	movhi	r3,2
    d608:	18fdca04 	addi	r3,r3,-2264
    d60c:	d8c02415 	stw	r3,144(sp)
    d610:	034001c4 	movi	r13,7
    d614:	00000506 	br	d62c <___vfiprintf_internal_r+0xc3c>
    d618:	29000084 	addi	r4,r5,2
    d61c:	42000204 	addi	r8,r8,8
    d620:	180b883a 	mov	r5,r3
    d624:	e73ffc04 	addi	fp,fp,-16
    d628:	3f000d0e 	bge	r7,fp,d660 <___vfiprintf_internal_r+0xc70>
    d62c:	10800404 	addi	r2,r2,16
    d630:	28c00044 	addi	r3,r5,1
    d634:	45c00015 	stw	r23,0(r8)
    d638:	41c00115 	stw	r7,4(r8)
    d63c:	d8801c15 	stw	r2,112(sp)
    d640:	d8c01b15 	stw	r3,108(sp)
    d644:	68fff40e 	bge	r13,r3,d618 <___vfiprintf_internal_r+0xc28>
    d648:	1000101e 	bne	r2,zero,d68c <___vfiprintf_internal_r+0xc9c>
    d64c:	e73ffc04 	addi	fp,fp,-16
    d650:	01000044 	movi	r4,1
    d654:	000b883a 	mov	r5,zero
    d658:	d811883a 	mov	r8,sp
    d65c:	3f3ff316 	blt	r7,fp,d62c <___vfiprintf_internal_r+0xc3c>
    d660:	da802417 	ldw	r10,144(sp)
    d664:	1705883a 	add	r2,r2,fp
    d668:	47000115 	stw	fp,4(r8)
    d66c:	42800015 	stw	r10,0(r8)
    d670:	d8801c15 	stw	r2,112(sp)
    d674:	d9001b15 	stw	r4,108(sp)
    d678:	00c001c4 	movi	r3,7
    d67c:	19003616 	blt	r3,r4,d758 <___vfiprintf_internal_r+0xd68>
    d680:	42000204 	addi	r8,r8,8
    d684:	21000044 	addi	r4,r4,1
    d688:	003e5706 	br	cfe8 <___vfiprintf_internal_r+0x5f8>
    d68c:	d9402117 	ldw	r5,132(sp)
    d690:	d9002017 	ldw	r4,128(sp)
    d694:	d9801a04 	addi	r6,sp,104
    d698:	d9c02b15 	stw	r7,172(sp)
    d69c:	db402a15 	stw	r13,168(sp)
    d6a0:	000c8dc0 	call	c8dc <__sprint_r.part.0>
    d6a4:	d9c02b17 	ldw	r7,172(sp)
    d6a8:	db402a17 	ldw	r13,168(sp)
    d6ac:	1000241e 	bne	r2,zero,d740 <___vfiprintf_internal_r+0xd50>
    d6b0:	d9401b17 	ldw	r5,108(sp)
    d6b4:	d8801c17 	ldw	r2,112(sp)
    d6b8:	d811883a 	mov	r8,sp
    d6bc:	29000044 	addi	r4,r5,1
    d6c0:	003fd806 	br	d624 <___vfiprintf_internal_r+0xc34>
    d6c4:	d9401b17 	ldw	r5,108(sp)
    d6c8:	00c000b4 	movhi	r3,2
    d6cc:	18fdce04 	addi	r3,r3,-2248
    d6d0:	d8c02415 	stw	r3,144(sp)
    d6d4:	29400044 	addi	r5,r5,1
    d6d8:	d8c02417 	ldw	r3,144(sp)
    d6dc:	14c5883a 	add	r2,r2,r19
    d6e0:	44c00115 	stw	r19,4(r8)
    d6e4:	40c00015 	stw	r3,0(r8)
    d6e8:	d8801c15 	stw	r2,112(sp)
    d6ec:	d9401b15 	stw	r5,108(sp)
    d6f0:	00c001c4 	movi	r3,7
    d6f4:	1940070e 	bge	r3,r5,d714 <___vfiprintf_internal_r+0xd24>
    d6f8:	103e4826 	beq	r2,zero,d01c <___vfiprintf_internal_r+0x62c>
    d6fc:	d9402117 	ldw	r5,132(sp)
    d700:	d9002017 	ldw	r4,128(sp)
    d704:	d9801a04 	addi	r6,sp,104
    d708:	000c8dc0 	call	c8dc <__sprint_r.part.0>
    d70c:	10000c1e 	bne	r2,zero,d740 <___vfiprintf_internal_r+0xd50>
    d710:	d8801c17 	ldw	r2,112(sp)
    d714:	8c80010e 	bge	r17,r18,d71c <___vfiprintf_internal_r+0xd2c>
    d718:	9023883a 	mov	r17,r18
    d71c:	da802317 	ldw	r10,140(sp)
    d720:	5455883a 	add	r10,r10,r17
    d724:	da802315 	stw	r10,140(sp)
    d728:	103e4126 	beq	r2,zero,d030 <___vfiprintf_internal_r+0x640>
    d72c:	d9402117 	ldw	r5,132(sp)
    d730:	d9002017 	ldw	r4,128(sp)
    d734:	d9801a04 	addi	r6,sp,104
    d738:	000c8dc0 	call	c8dc <__sprint_r.part.0>
    d73c:	103e3c26 	beq	r2,zero,d030 <___vfiprintf_internal_r+0x640>
    d740:	dd002117 	ldw	r20,132(sp)
    d744:	a080030b 	ldhu	r2,12(r20)
    d748:	1080100c 	andi	r2,r2,64
    d74c:	1001231e 	bne	r2,zero,dbdc <___vfiprintf_internal_r+0x11ec>
    d750:	d8802317 	ldw	r2,140(sp)
    d754:	003d7b06 	br	cd44 <___vfiprintf_internal_r+0x354>
    d758:	1000991e 	bne	r2,zero,d9c0 <___vfiprintf_internal_r+0xfd0>
    d75c:	00c00044 	movi	r3,1
    d760:	9805883a 	mov	r2,r19
    d764:	dd400015 	stw	r21,0(sp)
    d768:	dcc00115 	stw	r19,4(sp)
    d76c:	dcc01c15 	stw	r19,112(sp)
    d770:	d8c01b15 	stw	r3,108(sp)
    d774:	d811883a 	mov	r8,sp
    d778:	42000204 	addi	r8,r8,8
    d77c:	a2c0010c 	andi	r11,r20,4
    d780:	583fe426 	beq	r11,zero,d714 <___vfiprintf_internal_r+0xd24>
    d784:	8ca7c83a 	sub	r19,r17,r18
    d788:	04ffe20e 	bge	zero,r19,d714 <___vfiprintf_internal_r+0xd24>
    d78c:	01c00404 	movi	r7,16
    d790:	3cffcc0e 	bge	r7,r19,d6c4 <___vfiprintf_internal_r+0xcd4>
    d794:	028000b4 	movhi	r10,2
    d798:	52bdce04 	addi	r10,r10,-2248
    d79c:	d9001b17 	ldw	r4,108(sp)
    d7a0:	da802415 	stw	r10,144(sp)
    d7a4:	382b883a 	mov	r21,r7
    d7a8:	050001c4 	movi	r20,7
    d7ac:	df002017 	ldw	fp,128(sp)
    d7b0:	00000506 	br	d7c8 <___vfiprintf_internal_r+0xdd8>
    d7b4:	21400084 	addi	r5,r4,2
    d7b8:	42000204 	addi	r8,r8,8
    d7bc:	1809883a 	mov	r4,r3
    d7c0:	9cfffc04 	addi	r19,r19,-16
    d7c4:	acffc40e 	bge	r21,r19,d6d8 <___vfiprintf_internal_r+0xce8>
    d7c8:	10800404 	addi	r2,r2,16
    d7cc:	20c00044 	addi	r3,r4,1
    d7d0:	45800015 	stw	r22,0(r8)
    d7d4:	45400115 	stw	r21,4(r8)
    d7d8:	d8801c15 	stw	r2,112(sp)
    d7dc:	d8c01b15 	stw	r3,108(sp)
    d7e0:	a0fff40e 	bge	r20,r3,d7b4 <___vfiprintf_internal_r+0xdc4>
    d7e4:	1000041e 	bne	r2,zero,d7f8 <___vfiprintf_internal_r+0xe08>
    d7e8:	01400044 	movi	r5,1
    d7ec:	0009883a 	mov	r4,zero
    d7f0:	d811883a 	mov	r8,sp
    d7f4:	003ff206 	br	d7c0 <___vfiprintf_internal_r+0xdd0>
    d7f8:	d9402117 	ldw	r5,132(sp)
    d7fc:	d9801a04 	addi	r6,sp,104
    d800:	e009883a 	mov	r4,fp
    d804:	000c8dc0 	call	c8dc <__sprint_r.part.0>
    d808:	103fcd1e 	bne	r2,zero,d740 <___vfiprintf_internal_r+0xd50>
    d80c:	d9001b17 	ldw	r4,108(sp)
    d810:	d8801c17 	ldw	r2,112(sp)
    d814:	d811883a 	mov	r8,sp
    d818:	21400044 	addi	r5,r4,1
    d81c:	003fe806 	br	d7c0 <___vfiprintf_internal_r+0xdd0>
    d820:	d9402117 	ldw	r5,132(sp)
    d824:	d9002017 	ldw	r4,128(sp)
    d828:	d9801a04 	addi	r6,sp,104
    d82c:	d9c02b15 	stw	r7,172(sp)
    d830:	db402a15 	stw	r13,168(sp)
    d834:	000c8dc0 	call	c8dc <__sprint_r.part.0>
    d838:	d9c02b17 	ldw	r7,172(sp)
    d83c:	db402a17 	ldw	r13,168(sp)
    d840:	103fbf1e 	bne	r2,zero,d740 <___vfiprintf_internal_r+0xd50>
    d844:	d9401b17 	ldw	r5,108(sp)
    d848:	d8801c17 	ldw	r2,112(sp)
    d84c:	d811883a 	mov	r8,sp
    d850:	29800044 	addi	r6,r5,1
    d854:	003dc406 	br	cf68 <___vfiprintf_internal_r+0x578>
    d858:	1000d21e 	bne	r2,zero,dba4 <___vfiprintf_internal_r+0x11b4>
    d85c:	d8c01d87 	ldb	r3,118(sp)
    d860:	18009526 	beq	r3,zero,dab8 <___vfiprintf_internal_r+0x10c8>
    d864:	00800044 	movi	r2,1
    d868:	d8c01d84 	addi	r3,sp,118
    d86c:	1009883a 	mov	r4,r2
    d870:	d8c00015 	stw	r3,0(sp)
    d874:	d8800115 	stw	r2,4(sp)
    d878:	d811883a 	mov	r8,sp
    d87c:	200b883a 	mov	r5,r4
    d880:	42000204 	addi	r8,r8,8
    d884:	21000044 	addi	r4,r4,1
    d888:	003d9706 	br	cee8 <___vfiprintf_internal_r+0x4f8>
    d88c:	d9001d04 	addi	r4,sp,116
    d890:	00800084 	movi	r2,2
    d894:	d9000015 	stw	r4,0(sp)
    d898:	d8800115 	stw	r2,4(sp)
    d89c:	1809883a 	mov	r4,r3
    d8a0:	d811883a 	mov	r8,sp
    d8a4:	200b883a 	mov	r5,r4
    d8a8:	42000204 	addi	r8,r8,8
    d8ac:	21000044 	addi	r4,r4,1
    d8b0:	003f4e06 	br	d5ec <___vfiprintf_internal_r+0xbfc>
    d8b4:	d8001d85 	stb	zero,118(sp)
    d8b8:	48005016 	blt	r9,zero,d9fc <___vfiprintf_internal_r+0x100c>
    d8bc:	00ffdfc4 	movi	r3,-129
    d8c0:	94c4b03a 	or	r2,r18,r19
    d8c4:	a0e8703a 	and	r20,r20,r3
    d8c8:	103d4426 	beq	r2,zero,cddc <___vfiprintf_internal_r+0x3ec>
    d8cc:	0039883a 	mov	fp,zero
    d8d0:	d9002617 	ldw	r4,152(sp)
    d8d4:	dd401a04 	addi	r21,sp,104
    d8d8:	908003cc 	andi	r2,r18,15
    d8dc:	9806973a 	slli	r3,r19,28
    d8e0:	2085883a 	add	r2,r4,r2
    d8e4:	9024d13a 	srli	r18,r18,4
    d8e8:	10800003 	ldbu	r2,0(r2)
    d8ec:	9826d13a 	srli	r19,r19,4
    d8f0:	ad7fffc4 	addi	r21,r21,-1
    d8f4:	1ca4b03a 	or	r18,r3,r18
    d8f8:	a8800005 	stb	r2,0(r21)
    d8fc:	94c4b03a 	or	r2,r18,r19
    d900:	103ff51e 	bne	r2,zero,d8d8 <___vfiprintf_internal_r+0xee8>
    d904:	003e5906 	br	d26c <___vfiprintf_internal_r+0x87c>
    d908:	d9402117 	ldw	r5,132(sp)
    d90c:	d9002017 	ldw	r4,128(sp)
    d910:	d9801a04 	addi	r6,sp,104
    d914:	000c8dc0 	call	c8dc <__sprint_r.part.0>
    d918:	103f891e 	bne	r2,zero,d740 <___vfiprintf_internal_r+0xd50>
    d91c:	d8801c17 	ldw	r2,112(sp)
    d920:	d811883a 	mov	r8,sp
    d924:	003f9506 	br	d77c <___vfiprintf_internal_r+0xd8c>
    d928:	d9402117 	ldw	r5,132(sp)
    d92c:	d9002017 	ldw	r4,128(sp)
    d930:	d9801a04 	addi	r6,sp,104
    d934:	000c8dc0 	call	c8dc <__sprint_r.part.0>
    d938:	103f811e 	bne	r2,zero,d740 <___vfiprintf_internal_r+0xd50>
    d93c:	d811883a 	mov	r8,sp
    d940:	003ced06 	br	ccf8 <___vfiprintf_internal_r+0x308>
    d944:	d9402117 	ldw	r5,132(sp)
    d948:	d9002017 	ldw	r4,128(sp)
    d94c:	d9801a04 	addi	r6,sp,104
    d950:	da402c15 	stw	r9,176(sp)
    d954:	db802a15 	stw	r14,168(sp)
    d958:	000c8dc0 	call	c8dc <__sprint_r.part.0>
    d95c:	da402c17 	ldw	r9,176(sp)
    d960:	db802a17 	ldw	r14,168(sp)
    d964:	103f761e 	bne	r2,zero,d740 <___vfiprintf_internal_r+0xd50>
    d968:	d9401b17 	ldw	r5,108(sp)
    d96c:	d8801c17 	ldw	r2,112(sp)
    d970:	d811883a 	mov	r8,sp
    d974:	29000044 	addi	r4,r5,1
    d978:	003d5b06 	br	cee8 <___vfiprintf_internal_r+0x4f8>
    d97c:	d9402117 	ldw	r5,132(sp)
    d980:	d9002017 	ldw	r4,128(sp)
    d984:	d9801a04 	addi	r6,sp,104
    d988:	da402c15 	stw	r9,176(sp)
    d98c:	000c8dc0 	call	c8dc <__sprint_r.part.0>
    d990:	da402c17 	ldw	r9,176(sp)
    d994:	103f6a1e 	bne	r2,zero,d740 <___vfiprintf_internal_r+0xd50>
    d998:	d9401b17 	ldw	r5,108(sp)
    d99c:	d8801c17 	ldw	r2,112(sp)
    d9a0:	d811883a 	mov	r8,sp
    d9a4:	29000044 	addi	r4,r5,1
    d9a8:	003f1006 	br	d5ec <___vfiprintf_internal_r+0xbfc>
    d9ac:	1000c31e 	bne	r2,zero,dcbc <___vfiprintf_internal_r+0x12cc>
    d9b0:	01000044 	movi	r4,1
    d9b4:	000b883a 	mov	r5,zero
    d9b8:	d811883a 	mov	r8,sp
    d9bc:	003f0d06 	br	d5f4 <___vfiprintf_internal_r+0xc04>
    d9c0:	d9402117 	ldw	r5,132(sp)
    d9c4:	d9002017 	ldw	r4,128(sp)
    d9c8:	d9801a04 	addi	r6,sp,104
    d9cc:	000c8dc0 	call	c8dc <__sprint_r.part.0>
    d9d0:	103f5b1e 	bne	r2,zero,d740 <___vfiprintf_internal_r+0xd50>
    d9d4:	d9001b17 	ldw	r4,108(sp)
    d9d8:	d8801c17 	ldw	r2,112(sp)
    d9dc:	d811883a 	mov	r8,sp
    d9e0:	21000044 	addi	r4,r4,1
    d9e4:	003d8006 	br	cfe8 <___vfiprintf_internal_r+0x5f8>
    d9e8:	010000b4 	movhi	r4,2
    d9ec:	213d5a04 	addi	r4,r4,-2712
    d9f0:	d9002615 	stw	r4,152(sp)
    d9f4:	d8c02215 	stw	r3,136(sp)
    d9f8:	1029883a 	mov	r20,r2
    d9fc:	94c4b03a 	or	r2,r18,r19
    da00:	103fb21e 	bne	r2,zero,d8cc <___vfiprintf_internal_r+0xedc>
    da04:	0039883a 	mov	fp,zero
    da08:	00800084 	movi	r2,2
    da0c:	003e6b06 	br	d3bc <___vfiprintf_internal_r+0x9cc>
    da10:	da802217 	ldw	r10,136(sp)
    da14:	d8001d85 	stb	zero,118(sp)
    da18:	0027883a 	mov	r19,zero
    da1c:	50800104 	addi	r2,r10,4
    da20:	54800017 	ldw	r18,0(r10)
    da24:	483e6016 	blt	r9,zero,d3a8 <___vfiprintf_internal_r+0x9b8>
    da28:	00ffdfc4 	movi	r3,-129
    da2c:	d8802215 	stw	r2,136(sp)
    da30:	a0e8703a 	and	r20,r20,r3
    da34:	0039883a 	mov	fp,zero
    da38:	903ebb26 	beq	r18,zero,d528 <___vfiprintf_internal_r+0xb38>
    da3c:	00800244 	movi	r2,9
    da40:	14bdee36 	bltu	r2,r18,d1fc <___vfiprintf_internal_r+0x80c>
    da44:	003eba06 	br	d530 <___vfiprintf_internal_r+0xb40>
    da48:	00800c04 	movi	r2,48
    da4c:	d8c01d45 	stb	r3,117(sp)
    da50:	d8801d05 	stb	r2,116(sp)
    da54:	d8001d85 	stb	zero,118(sp)
    da58:	a0c00094 	ori	r3,r20,2
    da5c:	4800a916 	blt	r9,zero,dd04 <___vfiprintf_internal_r+0x1314>
    da60:	00bfdfc4 	movi	r2,-129
    da64:	a096703a 	and	r11,r20,r2
    da68:	5d000094 	ori	r20,r11,2
    da6c:	0039883a 	mov	fp,zero
    da70:	003f9706 	br	d8d0 <___vfiprintf_internal_r+0xee0>
    da74:	8025883a 	mov	r18,r16
    da78:	003c2e06 	br	cb34 <___vfiprintf_internal_r+0x144>
    da7c:	008000b4 	movhi	r2,2
    da80:	10bd5a04 	addi	r2,r2,-2712
    da84:	0039883a 	mov	fp,zero
    da88:	d8802615 	stw	r2,152(sp)
    da8c:	003f9006 	br	d8d0 <___vfiprintf_internal_r+0xee0>
    da90:	04a5c83a 	sub	r18,zero,r18
    da94:	07000b44 	movi	fp,45
    da98:	9004c03a 	cmpne	r2,r18,zero
    da9c:	04e7c83a 	sub	r19,zero,r19
    daa0:	df001d85 	stb	fp,118(sp)
    daa4:	98a7c83a 	sub	r19,r19,r2
    daa8:	48009f16 	blt	r9,zero,dd28 <___vfiprintf_internal_r+0x1338>
    daac:	00bfdfc4 	movi	r2,-129
    dab0:	a0a8703a 	and	r20,r20,r2
    dab4:	003dd006 	br	d1f8 <___vfiprintf_internal_r+0x808>
    dab8:	70004c26 	beq	r14,zero,dbec <___vfiprintf_internal_r+0x11fc>
    dabc:	00800084 	movi	r2,2
    dac0:	d8c01d04 	addi	r3,sp,116
    dac4:	d8c00015 	stw	r3,0(sp)
    dac8:	d8800115 	stw	r2,4(sp)
    dacc:	01000044 	movi	r4,1
    dad0:	d811883a 	mov	r8,sp
    dad4:	003f7306 	br	d8a4 <___vfiprintf_internal_r+0xeb4>
    dad8:	a080100c 	andi	r2,r20,64
    dadc:	da802217 	ldw	r10,136(sp)
    dae0:	103e0626 	beq	r2,zero,d2fc <___vfiprintf_internal_r+0x90c>
    dae4:	5480000f 	ldh	r18,0(r10)
    dae8:	52800104 	addi	r10,r10,4
    daec:	da802215 	stw	r10,136(sp)
    daf0:	9027d7fa 	srai	r19,r18,31
    daf4:	9805883a 	mov	r2,r19
    daf8:	003db806 	br	d1dc <___vfiprintf_internal_r+0x7ec>
    dafc:	a080040c 	andi	r2,r20,16
    db00:	1000091e 	bne	r2,zero,db28 <___vfiprintf_internal_r+0x1138>
    db04:	a2c0100c 	andi	r11,r20,64
    db08:	58000726 	beq	r11,zero,db28 <___vfiprintf_internal_r+0x1138>
    db0c:	da802217 	ldw	r10,136(sp)
    db10:	50800017 	ldw	r2,0(r10)
    db14:	52800104 	addi	r10,r10,4
    db18:	da802215 	stw	r10,136(sp)
    db1c:	da802317 	ldw	r10,140(sp)
    db20:	1280000d 	sth	r10,0(r2)
    db24:	003be706 	br	cac4 <___vfiprintf_internal_r+0xd4>
    db28:	da802217 	ldw	r10,136(sp)
    db2c:	50800017 	ldw	r2,0(r10)
    db30:	52800104 	addi	r10,r10,4
    db34:	da802215 	stw	r10,136(sp)
    db38:	da802317 	ldw	r10,140(sp)
    db3c:	12800015 	stw	r10,0(r2)
    db40:	003be006 	br	cac4 <___vfiprintf_internal_r+0xd4>
    db44:	a080100c 	andi	r2,r20,64
    db48:	da802217 	ldw	r10,136(sp)
    db4c:	10003026 	beq	r2,zero,dc10 <___vfiprintf_internal_r+0x1220>
    db50:	5480000b 	ldhu	r18,0(r10)
    db54:	52800104 	addi	r10,r10,4
    db58:	0027883a 	mov	r19,zero
    db5c:	da802215 	stw	r10,136(sp)
    db60:	003d8006 	br	d164 <___vfiprintf_internal_r+0x774>
    db64:	80c00007 	ldb	r3,0(r16)
    db68:	003c0006 	br	cb6c <___vfiprintf_internal_r+0x17c>
    db6c:	a080100c 	andi	r2,r20,64
    db70:	d8001d85 	stb	zero,118(sp)
    db74:	da802217 	ldw	r10,136(sp)
    db78:	1000201e 	bne	r2,zero,dbfc <___vfiprintf_internal_r+0x120c>
    db7c:	50800104 	addi	r2,r10,4
    db80:	54800017 	ldw	r18,0(r10)
    db84:	0027883a 	mov	r19,zero
    db88:	483def0e 	bge	r9,zero,d348 <___vfiprintf_internal_r+0x958>
    db8c:	94c6b03a 	or	r3,r18,r19
    db90:	d8802215 	stw	r2,136(sp)
    db94:	183d4e1e 	bne	r3,zero,d0d0 <___vfiprintf_internal_r+0x6e0>
    db98:	0039883a 	mov	fp,zero
    db9c:	0005883a 	mov	r2,zero
    dba0:	003e0606 	br	d3bc <___vfiprintf_internal_r+0x9cc>
    dba4:	d9402117 	ldw	r5,132(sp)
    dba8:	d9002017 	ldw	r4,128(sp)
    dbac:	d9801a04 	addi	r6,sp,104
    dbb0:	da402c15 	stw	r9,176(sp)
    dbb4:	db802a15 	stw	r14,168(sp)
    dbb8:	000c8dc0 	call	c8dc <__sprint_r.part.0>
    dbbc:	da402c17 	ldw	r9,176(sp)
    dbc0:	db802a17 	ldw	r14,168(sp)
    dbc4:	103ede1e 	bne	r2,zero,d740 <___vfiprintf_internal_r+0xd50>
    dbc8:	d9401b17 	ldw	r5,108(sp)
    dbcc:	d8801c17 	ldw	r2,112(sp)
    dbd0:	d811883a 	mov	r8,sp
    dbd4:	29000044 	addi	r4,r5,1
    dbd8:	003e7406 	br	d5ac <___vfiprintf_internal_r+0xbbc>
    dbdc:	00bfffc4 	movi	r2,-1
    dbe0:	003c5806 	br	cd44 <___vfiprintf_internal_r+0x354>
    dbe4:	d811883a 	mov	r8,sp
    dbe8:	003ee806 	br	d78c <___vfiprintf_internal_r+0xd9c>
    dbec:	000b883a 	mov	r5,zero
    dbf0:	01000044 	movi	r4,1
    dbf4:	d811883a 	mov	r8,sp
    dbf8:	003e7c06 	br	d5ec <___vfiprintf_internal_r+0xbfc>
    dbfc:	50800104 	addi	r2,r10,4
    dc00:	5480000b 	ldhu	r18,0(r10)
    dc04:	0027883a 	mov	r19,zero
    dc08:	483dcf0e 	bge	r9,zero,d348 <___vfiprintf_internal_r+0x958>
    dc0c:	003fdf06 	br	db8c <___vfiprintf_internal_r+0x119c>
    dc10:	54800017 	ldw	r18,0(r10)
    dc14:	52800104 	addi	r10,r10,4
    dc18:	0027883a 	mov	r19,zero
    dc1c:	da802215 	stw	r10,136(sp)
    dc20:	003d5006 	br	d164 <___vfiprintf_internal_r+0x774>
    dc24:	50800104 	addi	r2,r10,4
    dc28:	5480000b 	ldhu	r18,0(r10)
    dc2c:	0027883a 	mov	r19,zero
    dc30:	483f7d0e 	bge	r9,zero,da28 <___vfiprintf_internal_r+0x1038>
    dc34:	003ddc06 	br	d3a8 <___vfiprintf_internal_r+0x9b8>
    dc38:	d8c02215 	stw	r3,136(sp)
    dc3c:	0039883a 	mov	fp,zero
    dc40:	003ddb06 	br	d3b0 <___vfiprintf_internal_r+0x9c0>
    dc44:	028000b4 	movhi	r10,2
    dc48:	52bdca04 	addi	r10,r10,-2264
    dc4c:	da802415 	stw	r10,144(sp)
    dc50:	003e8306 	br	d660 <___vfiprintf_internal_r+0xc70>
    dc54:	d8801c17 	ldw	r2,112(sp)
    dc58:	dd002117 	ldw	r20,132(sp)
    dc5c:	103eb926 	beq	r2,zero,d744 <___vfiprintf_internal_r+0xd54>
    dc60:	d9002017 	ldw	r4,128(sp)
    dc64:	d9801a04 	addi	r6,sp,104
    dc68:	a00b883a 	mov	r5,r20
    dc6c:	000c8dc0 	call	c8dc <__sprint_r.part.0>
    dc70:	003eb406 	br	d744 <___vfiprintf_internal_r+0xd54>
    dc74:	80c00043 	ldbu	r3,1(r16)
    dc78:	a5000814 	ori	r20,r20,32
    dc7c:	84000044 	addi	r16,r16,1
    dc80:	18c03fcc 	andi	r3,r3,255
    dc84:	18c0201c 	xori	r3,r3,128
    dc88:	18ffe004 	addi	r3,r3,-128
    dc8c:	003bb706 	br	cb6c <___vfiprintf_internal_r+0x17c>
    dc90:	a809883a 	mov	r4,r21
    dc94:	d8c02a15 	stw	r3,168(sp)
    dc98:	da002b15 	stw	r8,172(sp)
    dc9c:	000b4380 	call	b438 <strlen>
    dca0:	d8c02a17 	ldw	r3,168(sp)
    dca4:	1027883a 	mov	r19,r2
    dca8:	df001d83 	ldbu	fp,118(sp)
    dcac:	d8c02215 	stw	r3,136(sp)
    dcb0:	0013883a 	mov	r9,zero
    dcb4:	da002b17 	ldw	r8,172(sp)
    dcb8:	003c4d06 	br	cdf0 <___vfiprintf_internal_r+0x400>
    dcbc:	d9402117 	ldw	r5,132(sp)
    dcc0:	d9002017 	ldw	r4,128(sp)
    dcc4:	d9801a04 	addi	r6,sp,104
    dcc8:	da402c15 	stw	r9,176(sp)
    dccc:	000c8dc0 	call	c8dc <__sprint_r.part.0>
    dcd0:	da402c17 	ldw	r9,176(sp)
    dcd4:	103e9a1e 	bne	r2,zero,d740 <___vfiprintf_internal_r+0xd50>
    dcd8:	d9401b17 	ldw	r5,108(sp)
    dcdc:	d8801c17 	ldw	r2,112(sp)
    dce0:	d811883a 	mov	r8,sp
    dce4:	29000044 	addi	r4,r5,1
    dce8:	003e4206 	br	d5f4 <___vfiprintf_internal_r+0xc04>
    dcec:	d9401b17 	ldw	r5,108(sp)
    dcf0:	010000b4 	movhi	r4,2
    dcf4:	213dce04 	addi	r4,r4,-2248
    dcf8:	d9002415 	stw	r4,144(sp)
    dcfc:	29400044 	addi	r5,r5,1
    dd00:	003c6d06 	br	ceb8 <___vfiprintf_internal_r+0x4c8>
    dd04:	0039883a 	mov	fp,zero
    dd08:	00800084 	movi	r2,2
    dd0c:	10803fcc 	andi	r2,r2,255
    dd10:	01000044 	movi	r4,1
    dd14:	11001e26 	beq	r2,r4,dd90 <___vfiprintf_internal_r+0x13a0>
    dd18:	01000084 	movi	r4,2
    dd1c:	11001e1e 	bne	r2,r4,dd98 <___vfiprintf_internal_r+0x13a8>
    dd20:	1829883a 	mov	r20,r3
    dd24:	003eea06 	br	d8d0 <___vfiprintf_internal_r+0xee0>
    dd28:	a007883a 	mov	r3,r20
    dd2c:	00800044 	movi	r2,1
    dd30:	003ff606 	br	dd0c <___vfiprintf_internal_r+0x131c>
    dd34:	00800184 	movi	r2,6
    dd38:	1240012e 	bgeu	r2,r9,dd40 <___vfiprintf_internal_r+0x1350>
    dd3c:	1013883a 	mov	r9,r2
    dd40:	4827883a 	mov	r19,r9
    dd44:	4825883a 	mov	r18,r9
    dd48:	48001516 	blt	r9,zero,dda0 <___vfiprintf_internal_r+0x13b0>
    dd4c:	054000b4 	movhi	r21,2
    dd50:	d8c02215 	stw	r3,136(sp)
    dd54:	ad7d5f04 	addi	r21,r21,-2692
    dd58:	003d1406 	br	d1ac <___vfiprintf_internal_r+0x7bc>
    dd5c:	028000b4 	movhi	r10,2
    dd60:	52bdca04 	addi	r10,r10,-2264
    dd64:	da802415 	stw	r10,144(sp)
    dd68:	200d883a 	mov	r6,r4
    dd6c:	003c9106 	br	cfb4 <___vfiprintf_internal_r+0x5c4>
    dd70:	5021883a 	mov	r16,r10
    dd74:	0013883a 	mov	r9,zero
    dd78:	003b7d06 	br	cb70 <___vfiprintf_internal_r+0x180>
    dd7c:	4827883a 	mov	r19,r9
    dd80:	df001d83 	ldbu	fp,118(sp)
    dd84:	d8c02215 	stw	r3,136(sp)
    dd88:	0013883a 	mov	r9,zero
    dd8c:	003c1806 	br	cdf0 <___vfiprintf_internal_r+0x400>
    dd90:	1829883a 	mov	r20,r3
    dd94:	003d1806 	br	d1f8 <___vfiprintf_internal_r+0x808>
    dd98:	1829883a 	mov	r20,r3
    dd9c:	003ccd06 	br	d0d4 <___vfiprintf_internal_r+0x6e4>
    dda0:	0025883a 	mov	r18,zero
    dda4:	003fe906 	br	dd4c <___vfiprintf_internal_r+0x135c>
    dda8:	d8802217 	ldw	r2,136(sp)
    ddac:	80c00043 	ldbu	r3,1(r16)
    ddb0:	5021883a 	mov	r16,r10
    ddb4:	12400017 	ldw	r9,0(r2)
    ddb8:	10800104 	addi	r2,r2,4
    ddbc:	d8802215 	stw	r2,136(sp)
    ddc0:	483faf0e 	bge	r9,zero,dc80 <___vfiprintf_internal_r+0x1290>
    ddc4:	18c03fcc 	andi	r3,r3,255
    ddc8:	18c0201c 	xori	r3,r3,128
    ddcc:	027fffc4 	movi	r9,-1
    ddd0:	18ffe004 	addi	r3,r3,-128
    ddd4:	003b6506 	br	cb6c <___vfiprintf_internal_r+0x17c>
    ddd8:	d9c01d85 	stb	r7,118(sp)
    dddc:	003ca006 	br	d060 <___vfiprintf_internal_r+0x670>
    dde0:	d9c01d85 	stb	r7,118(sp)
    dde4:	003cad06 	br	d09c <___vfiprintf_internal_r+0x6ac>
    dde8:	d9c01d85 	stb	r7,118(sp)
    ddec:	003d7d06 	br	d3e4 <___vfiprintf_internal_r+0x9f4>
    ddf0:	d9c01d85 	stb	r7,118(sp)
    ddf4:	003d5f06 	br	d374 <___vfiprintf_internal_r+0x984>
    ddf8:	a080004c 	andi	r2,r20,1
    ddfc:	0039883a 	mov	fp,zero
    de00:	10000526 	beq	r2,zero,de18 <___vfiprintf_internal_r+0x1428>
    de04:	00800c04 	movi	r2,48
    de08:	d88019c5 	stb	r2,103(sp)
    de0c:	dcc02717 	ldw	r19,156(sp)
    de10:	dd4019c4 	addi	r21,sp,103
    de14:	003bf606 	br	cdf0 <___vfiprintf_internal_r+0x400>
    de18:	0027883a 	mov	r19,zero
    de1c:	dd401a04 	addi	r21,sp,104
    de20:	003bf306 	br	cdf0 <___vfiprintf_internal_r+0x400>
    de24:	d9c01d85 	stb	r7,118(sp)
    de28:	003dc806 	br	d54c <___vfiprintf_internal_r+0xb5c>
    de2c:	d9c01d85 	stb	r7,118(sp)
    de30:	003d3a06 	br	d31c <___vfiprintf_internal_r+0x92c>
    de34:	d9c01d85 	stb	r7,118(sp)
    de38:	003d2a06 	br	d2e4 <___vfiprintf_internal_r+0x8f4>
    de3c:	d9c01d85 	stb	r7,118(sp)
    de40:	003cde06 	br	d1bc <___vfiprintf_internal_r+0x7cc>
    de44:	d9c01d85 	stb	r7,118(sp)
    de48:	003cbc06 	br	d13c <___vfiprintf_internal_r+0x74c>

0000de4c <__vfiprintf_internal>:
    de4c:	008000b4 	movhi	r2,2
    de50:	10863e04 	addi	r2,r2,6392
    de54:	300f883a 	mov	r7,r6
    de58:	280d883a 	mov	r6,r5
    de5c:	200b883a 	mov	r5,r4
    de60:	11000017 	ldw	r4,0(r2)
    de64:	000c9f01 	jmpi	c9f0 <___vfiprintf_internal_r>

0000de68 <__sbprintf>:
    de68:	2880030b 	ldhu	r2,12(r5)
    de6c:	2ac01917 	ldw	r11,100(r5)
    de70:	2a80038b 	ldhu	r10,14(r5)
    de74:	2a400717 	ldw	r9,28(r5)
    de78:	2a000917 	ldw	r8,36(r5)
    de7c:	defee204 	addi	sp,sp,-1144
    de80:	00c10004 	movi	r3,1024
    de84:	dc011a15 	stw	r16,1128(sp)
    de88:	10bfff4c 	andi	r2,r2,65533
    de8c:	2821883a 	mov	r16,r5
    de90:	d8cb883a 	add	r5,sp,r3
    de94:	dc811c15 	stw	r18,1136(sp)
    de98:	dc411b15 	stw	r17,1132(sp)
    de9c:	dfc11d15 	stw	ra,1140(sp)
    dea0:	2025883a 	mov	r18,r4
    dea4:	d881030d 	sth	r2,1036(sp)
    dea8:	dac11915 	stw	r11,1124(sp)
    deac:	da81038d 	sth	r10,1038(sp)
    deb0:	da410715 	stw	r9,1052(sp)
    deb4:	da010915 	stw	r8,1060(sp)
    deb8:	dec10015 	stw	sp,1024(sp)
    debc:	dec10415 	stw	sp,1040(sp)
    dec0:	d8c10215 	stw	r3,1032(sp)
    dec4:	d8c10515 	stw	r3,1044(sp)
    dec8:	d8010615 	stw	zero,1048(sp)
    decc:	000c9f00 	call	c9f0 <___vfiprintf_internal_r>
    ded0:	1023883a 	mov	r17,r2
    ded4:	10000416 	blt	r2,zero,dee8 <__sbprintf+0x80>
    ded8:	d9410004 	addi	r5,sp,1024
    dedc:	9009883a 	mov	r4,r18
    dee0:	000897c0 	call	897c <_fflush_r>
    dee4:	10000d1e 	bne	r2,zero,df1c <__sbprintf+0xb4>
    dee8:	d881030b 	ldhu	r2,1036(sp)
    deec:	1080100c 	andi	r2,r2,64
    def0:	10000326 	beq	r2,zero,df00 <__sbprintf+0x98>
    def4:	8080030b 	ldhu	r2,12(r16)
    def8:	10801014 	ori	r2,r2,64
    defc:	8080030d 	sth	r2,12(r16)
    df00:	8805883a 	mov	r2,r17
    df04:	dfc11d17 	ldw	ra,1140(sp)
    df08:	dc811c17 	ldw	r18,1136(sp)
    df0c:	dc411b17 	ldw	r17,1132(sp)
    df10:	dc011a17 	ldw	r16,1128(sp)
    df14:	dec11e04 	addi	sp,sp,1144
    df18:	f800283a 	ret
    df1c:	047fffc4 	movi	r17,-1
    df20:	003ff106 	br	dee8 <__sbprintf+0x80>

0000df24 <_write_r>:
    df24:	defffd04 	addi	sp,sp,-12
    df28:	2805883a 	mov	r2,r5
    df2c:	dc000015 	stw	r16,0(sp)
    df30:	040000b4 	movhi	r16,2
    df34:	dc400115 	stw	r17,4(sp)
    df38:	300b883a 	mov	r5,r6
    df3c:	840e5104 	addi	r16,r16,14660
    df40:	2023883a 	mov	r17,r4
    df44:	380d883a 	mov	r6,r7
    df48:	1009883a 	mov	r4,r2
    df4c:	dfc00215 	stw	ra,8(sp)
    df50:	80000015 	stw	zero,0(r16)
    df54:	0012ee40 	call	12ee4 <write>
    df58:	00ffffc4 	movi	r3,-1
    df5c:	10c00526 	beq	r2,r3,df74 <_write_r+0x50>
    df60:	dfc00217 	ldw	ra,8(sp)
    df64:	dc400117 	ldw	r17,4(sp)
    df68:	dc000017 	ldw	r16,0(sp)
    df6c:	dec00304 	addi	sp,sp,12
    df70:	f800283a 	ret
    df74:	80c00017 	ldw	r3,0(r16)
    df78:	183ff926 	beq	r3,zero,df60 <_write_r+0x3c>
    df7c:	88c00015 	stw	r3,0(r17)
    df80:	003ff706 	br	df60 <_write_r+0x3c>

0000df84 <_close_r>:
    df84:	defffd04 	addi	sp,sp,-12
    df88:	dc000015 	stw	r16,0(sp)
    df8c:	040000b4 	movhi	r16,2
    df90:	dc400115 	stw	r17,4(sp)
    df94:	840e5104 	addi	r16,r16,14660
    df98:	2023883a 	mov	r17,r4
    df9c:	2809883a 	mov	r4,r5
    dfa0:	dfc00215 	stw	ra,8(sp)
    dfa4:	80000015 	stw	zero,0(r16)
    dfa8:	00126dc0 	call	126dc <close>
    dfac:	00ffffc4 	movi	r3,-1
    dfb0:	10c00526 	beq	r2,r3,dfc8 <_close_r+0x44>
    dfb4:	dfc00217 	ldw	ra,8(sp)
    dfb8:	dc400117 	ldw	r17,4(sp)
    dfbc:	dc000017 	ldw	r16,0(sp)
    dfc0:	dec00304 	addi	sp,sp,12
    dfc4:	f800283a 	ret
    dfc8:	80c00017 	ldw	r3,0(r16)
    dfcc:	183ff926 	beq	r3,zero,dfb4 <_close_r+0x30>
    dfd0:	88c00015 	stw	r3,0(r17)
    dfd4:	003ff706 	br	dfb4 <_close_r+0x30>

0000dfd8 <_calloc_r>:
    dfd8:	298b383a 	mul	r5,r5,r6
    dfdc:	defffe04 	addi	sp,sp,-8
    dfe0:	dfc00115 	stw	ra,4(sp)
    dfe4:	dc000015 	stw	r16,0(sp)
    dfe8:	00095fc0 	call	95fc <_malloc_r>
    dfec:	10002926 	beq	r2,zero,e094 <_calloc_r+0xbc>
    dff0:	11bfff17 	ldw	r6,-4(r2)
    dff4:	1021883a 	mov	r16,r2
    dff8:	00bfff04 	movi	r2,-4
    dffc:	308c703a 	and	r6,r6,r2
    e000:	00c00904 	movi	r3,36
    e004:	308d883a 	add	r6,r6,r2
    e008:	19801636 	bltu	r3,r6,e064 <_calloc_r+0x8c>
    e00c:	008004c4 	movi	r2,19
    e010:	11800b2e 	bgeu	r2,r6,e040 <_calloc_r+0x68>
    e014:	80000015 	stw	zero,0(r16)
    e018:	80000115 	stw	zero,4(r16)
    e01c:	008006c4 	movi	r2,27
    e020:	11801a2e 	bgeu	r2,r6,e08c <_calloc_r+0xb4>
    e024:	80000215 	stw	zero,8(r16)
    e028:	80000315 	stw	zero,12(r16)
    e02c:	30c0151e 	bne	r6,r3,e084 <_calloc_r+0xac>
    e030:	80000415 	stw	zero,16(r16)
    e034:	80800604 	addi	r2,r16,24
    e038:	80000515 	stw	zero,20(r16)
    e03c:	00000106 	br	e044 <_calloc_r+0x6c>
    e040:	8005883a 	mov	r2,r16
    e044:	10000015 	stw	zero,0(r2)
    e048:	10000115 	stw	zero,4(r2)
    e04c:	10000215 	stw	zero,8(r2)
    e050:	8005883a 	mov	r2,r16
    e054:	dfc00117 	ldw	ra,4(sp)
    e058:	dc000017 	ldw	r16,0(sp)
    e05c:	dec00204 	addi	sp,sp,8
    e060:	f800283a 	ret
    e064:	000b883a 	mov	r5,zero
    e068:	8009883a 	mov	r4,r16
    e06c:	000a0340 	call	a034 <memset>
    e070:	8005883a 	mov	r2,r16
    e074:	dfc00117 	ldw	ra,4(sp)
    e078:	dc000017 	ldw	r16,0(sp)
    e07c:	dec00204 	addi	sp,sp,8
    e080:	f800283a 	ret
    e084:	80800404 	addi	r2,r16,16
    e088:	003fee06 	br	e044 <_calloc_r+0x6c>
    e08c:	80800204 	addi	r2,r16,8
    e090:	003fec06 	br	e044 <_calloc_r+0x6c>
    e094:	0005883a 	mov	r2,zero
    e098:	003fee06 	br	e054 <_calloc_r+0x7c>

0000e09c <_fclose_r>:
    e09c:	28003926 	beq	r5,zero,e184 <_fclose_r+0xe8>
    e0a0:	defffc04 	addi	sp,sp,-16
    e0a4:	dc400115 	stw	r17,4(sp)
    e0a8:	dc000015 	stw	r16,0(sp)
    e0ac:	dfc00315 	stw	ra,12(sp)
    e0b0:	dc800215 	stw	r18,8(sp)
    e0b4:	2023883a 	mov	r17,r4
    e0b8:	2821883a 	mov	r16,r5
    e0bc:	20000226 	beq	r4,zero,e0c8 <_fclose_r+0x2c>
    e0c0:	20800e17 	ldw	r2,56(r4)
    e0c4:	10002726 	beq	r2,zero,e164 <_fclose_r+0xc8>
    e0c8:	8080030f 	ldh	r2,12(r16)
    e0cc:	1000071e 	bne	r2,zero,e0ec <_fclose_r+0x50>
    e0d0:	0005883a 	mov	r2,zero
    e0d4:	dfc00317 	ldw	ra,12(sp)
    e0d8:	dc800217 	ldw	r18,8(sp)
    e0dc:	dc400117 	ldw	r17,4(sp)
    e0e0:	dc000017 	ldw	r16,0(sp)
    e0e4:	dec00404 	addi	sp,sp,16
    e0e8:	f800283a 	ret
    e0ec:	800b883a 	mov	r5,r16
    e0f0:	8809883a 	mov	r4,r17
    e0f4:	00087600 	call	8760 <__sflush_r>
    e0f8:	1025883a 	mov	r18,r2
    e0fc:	80800b17 	ldw	r2,44(r16)
    e100:	10000426 	beq	r2,zero,e114 <_fclose_r+0x78>
    e104:	81400717 	ldw	r5,28(r16)
    e108:	8809883a 	mov	r4,r17
    e10c:	103ee83a 	callr	r2
    e110:	10001616 	blt	r2,zero,e16c <_fclose_r+0xd0>
    e114:	8080030b 	ldhu	r2,12(r16)
    e118:	1080200c 	andi	r2,r2,128
    e11c:	1000151e 	bne	r2,zero,e174 <_fclose_r+0xd8>
    e120:	81400c17 	ldw	r5,48(r16)
    e124:	28000526 	beq	r5,zero,e13c <_fclose_r+0xa0>
    e128:	80801004 	addi	r2,r16,64
    e12c:	28800226 	beq	r5,r2,e138 <_fclose_r+0x9c>
    e130:	8809883a 	mov	r4,r17
    e134:	0008ecc0 	call	8ecc <_free_r>
    e138:	80000c15 	stw	zero,48(r16)
    e13c:	81401117 	ldw	r5,68(r16)
    e140:	28000326 	beq	r5,zero,e150 <_fclose_r+0xb4>
    e144:	8809883a 	mov	r4,r17
    e148:	0008ecc0 	call	8ecc <_free_r>
    e14c:	80001115 	stw	zero,68(r16)
    e150:	0008d680 	call	8d68 <__sfp_lock_acquire>
    e154:	8000030d 	sth	zero,12(r16)
    e158:	0008d6c0 	call	8d6c <__sfp_lock_release>
    e15c:	9005883a 	mov	r2,r18
    e160:	003fdc06 	br	e0d4 <_fclose_r+0x38>
    e164:	0008d580 	call	8d58 <__sinit>
    e168:	003fd706 	br	e0c8 <_fclose_r+0x2c>
    e16c:	04bfffc4 	movi	r18,-1
    e170:	003fe806 	br	e114 <_fclose_r+0x78>
    e174:	81400417 	ldw	r5,16(r16)
    e178:	8809883a 	mov	r4,r17
    e17c:	0008ecc0 	call	8ecc <_free_r>
    e180:	003fe706 	br	e120 <_fclose_r+0x84>
    e184:	0005883a 	mov	r2,zero
    e188:	f800283a 	ret

0000e18c <fclose>:
    e18c:	008000b4 	movhi	r2,2
    e190:	10863e04 	addi	r2,r2,6392
    e194:	200b883a 	mov	r5,r4
    e198:	11000017 	ldw	r4,0(r2)
    e19c:	000e09c1 	jmpi	e09c <_fclose_r>

0000e1a0 <__fputwc>:
    e1a0:	defff804 	addi	sp,sp,-32
    e1a4:	dcc00415 	stw	r19,16(sp)
    e1a8:	dc800315 	stw	r18,12(sp)
    e1ac:	dc000115 	stw	r16,4(sp)
    e1b0:	dfc00715 	stw	ra,28(sp)
    e1b4:	dd400615 	stw	r21,24(sp)
    e1b8:	dd000515 	stw	r20,20(sp)
    e1bc:	dc400215 	stw	r17,8(sp)
    e1c0:	2027883a 	mov	r19,r4
    e1c4:	2825883a 	mov	r18,r5
    e1c8:	3021883a 	mov	r16,r6
    e1cc:	00093ec0 	call	93ec <__locale_mb_cur_max>
    e1d0:	00c00044 	movi	r3,1
    e1d4:	10c03e26 	beq	r2,r3,e2d0 <__fputwc+0x130>
    e1d8:	81c01704 	addi	r7,r16,92
    e1dc:	900d883a 	mov	r6,r18
    e1e0:	d80b883a 	mov	r5,sp
    e1e4:	9809883a 	mov	r4,r19
    e1e8:	000f1ec0 	call	f1ec <_wcrtomb_r>
    e1ec:	1029883a 	mov	r20,r2
    e1f0:	00bfffc4 	movi	r2,-1
    e1f4:	a0802026 	beq	r20,r2,e278 <__fputwc+0xd8>
    e1f8:	d9400003 	ldbu	r5,0(sp)
    e1fc:	a0001c26 	beq	r20,zero,e270 <__fputwc+0xd0>
    e200:	0023883a 	mov	r17,zero
    e204:	05400284 	movi	r21,10
    e208:	00000906 	br	e230 <__fputwc+0x90>
    e20c:	80800017 	ldw	r2,0(r16)
    e210:	11400005 	stb	r5,0(r2)
    e214:	80c00017 	ldw	r3,0(r16)
    e218:	18c00044 	addi	r3,r3,1
    e21c:	80c00015 	stw	r3,0(r16)
    e220:	8c400044 	addi	r17,r17,1
    e224:	dc45883a 	add	r2,sp,r17
    e228:	8d00112e 	bgeu	r17,r20,e270 <__fputwc+0xd0>
    e22c:	11400003 	ldbu	r5,0(r2)
    e230:	80c00217 	ldw	r3,8(r16)
    e234:	18ffffc4 	addi	r3,r3,-1
    e238:	80c00215 	stw	r3,8(r16)
    e23c:	183ff30e 	bge	r3,zero,e20c <__fputwc+0x6c>
    e240:	80800617 	ldw	r2,24(r16)
    e244:	18801916 	blt	r3,r2,e2ac <__fputwc+0x10c>
    e248:	80800017 	ldw	r2,0(r16)
    e24c:	11400005 	stb	r5,0(r2)
    e250:	80800017 	ldw	r2,0(r16)
    e254:	10c00003 	ldbu	r3,0(r2)
    e258:	10800044 	addi	r2,r2,1
    e25c:	1d402326 	beq	r3,r21,e2ec <__fputwc+0x14c>
    e260:	80800015 	stw	r2,0(r16)
    e264:	8c400044 	addi	r17,r17,1
    e268:	dc45883a 	add	r2,sp,r17
    e26c:	8d3fef36 	bltu	r17,r20,e22c <__fputwc+0x8c>
    e270:	9005883a 	mov	r2,r18
    e274:	00000406 	br	e288 <__fputwc+0xe8>
    e278:	80c0030b 	ldhu	r3,12(r16)
    e27c:	a005883a 	mov	r2,r20
    e280:	18c01014 	ori	r3,r3,64
    e284:	80c0030d 	sth	r3,12(r16)
    e288:	dfc00717 	ldw	ra,28(sp)
    e28c:	dd400617 	ldw	r21,24(sp)
    e290:	dd000517 	ldw	r20,20(sp)
    e294:	dcc00417 	ldw	r19,16(sp)
    e298:	dc800317 	ldw	r18,12(sp)
    e29c:	dc400217 	ldw	r17,8(sp)
    e2a0:	dc000117 	ldw	r16,4(sp)
    e2a4:	dec00804 	addi	sp,sp,32
    e2a8:	f800283a 	ret
    e2ac:	800d883a 	mov	r6,r16
    e2b0:	29403fcc 	andi	r5,r5,255
    e2b4:	9809883a 	mov	r4,r19
    e2b8:	000f0940 	call	f094 <__swbuf_r>
    e2bc:	10bfffe0 	cmpeqi	r2,r2,-1
    e2c0:	10803fcc 	andi	r2,r2,255
    e2c4:	103fd626 	beq	r2,zero,e220 <__fputwc+0x80>
    e2c8:	00bfffc4 	movi	r2,-1
    e2cc:	003fee06 	br	e288 <__fputwc+0xe8>
    e2d0:	90ffffc4 	addi	r3,r18,-1
    e2d4:	01003f84 	movi	r4,254
    e2d8:	20ffbf36 	bltu	r4,r3,e1d8 <__fputwc+0x38>
    e2dc:	900b883a 	mov	r5,r18
    e2e0:	dc800005 	stb	r18,0(sp)
    e2e4:	1029883a 	mov	r20,r2
    e2e8:	003fc506 	br	e200 <__fputwc+0x60>
    e2ec:	800d883a 	mov	r6,r16
    e2f0:	a80b883a 	mov	r5,r21
    e2f4:	9809883a 	mov	r4,r19
    e2f8:	000f0940 	call	f094 <__swbuf_r>
    e2fc:	10bfffe0 	cmpeqi	r2,r2,-1
    e300:	003fef06 	br	e2c0 <__fputwc+0x120>

0000e304 <_fputwc_r>:
    e304:	3080030b 	ldhu	r2,12(r6)
    e308:	10c8000c 	andi	r3,r2,8192
    e30c:	1800051e 	bne	r3,zero,e324 <_fputwc_r+0x20>
    e310:	30c01917 	ldw	r3,100(r6)
    e314:	10880014 	ori	r2,r2,8192
    e318:	3080030d 	sth	r2,12(r6)
    e31c:	18880014 	ori	r2,r3,8192
    e320:	30801915 	stw	r2,100(r6)
    e324:	000e1a01 	jmpi	e1a0 <__fputwc>

0000e328 <fputwc>:
    e328:	008000b4 	movhi	r2,2
    e32c:	defffc04 	addi	sp,sp,-16
    e330:	10863e04 	addi	r2,r2,6392
    e334:	dc000115 	stw	r16,4(sp)
    e338:	14000017 	ldw	r16,0(r2)
    e33c:	dc400215 	stw	r17,8(sp)
    e340:	dfc00315 	stw	ra,12(sp)
    e344:	2023883a 	mov	r17,r4
    e348:	80000226 	beq	r16,zero,e354 <fputwc+0x2c>
    e34c:	80800e17 	ldw	r2,56(r16)
    e350:	10001026 	beq	r2,zero,e394 <fputwc+0x6c>
    e354:	2880030b 	ldhu	r2,12(r5)
    e358:	10c8000c 	andi	r3,r2,8192
    e35c:	1800051e 	bne	r3,zero,e374 <fputwc+0x4c>
    e360:	28c01917 	ldw	r3,100(r5)
    e364:	10880014 	ori	r2,r2,8192
    e368:	2880030d 	sth	r2,12(r5)
    e36c:	18880014 	ori	r2,r3,8192
    e370:	28801915 	stw	r2,100(r5)
    e374:	280d883a 	mov	r6,r5
    e378:	8009883a 	mov	r4,r16
    e37c:	880b883a 	mov	r5,r17
    e380:	dfc00317 	ldw	ra,12(sp)
    e384:	dc400217 	ldw	r17,8(sp)
    e388:	dc000117 	ldw	r16,4(sp)
    e38c:	dec00404 	addi	sp,sp,16
    e390:	000e1a01 	jmpi	e1a0 <__fputwc>
    e394:	8009883a 	mov	r4,r16
    e398:	d9400015 	stw	r5,0(sp)
    e39c:	0008d580 	call	8d58 <__sinit>
    e3a0:	d9400017 	ldw	r5,0(sp)
    e3a4:	003feb06 	br	e354 <fputwc+0x2c>

0000e3a8 <_fstat_r>:
    e3a8:	defffd04 	addi	sp,sp,-12
    e3ac:	2805883a 	mov	r2,r5
    e3b0:	dc000015 	stw	r16,0(sp)
    e3b4:	040000b4 	movhi	r16,2
    e3b8:	dc400115 	stw	r17,4(sp)
    e3bc:	840e5104 	addi	r16,r16,14660
    e3c0:	2023883a 	mov	r17,r4
    e3c4:	300b883a 	mov	r5,r6
    e3c8:	1009883a 	mov	r4,r2
    e3cc:	dfc00215 	stw	ra,8(sp)
    e3d0:	80000015 	stw	zero,0(r16)
    e3d4:	00128140 	call	12814 <fstat>
    e3d8:	00ffffc4 	movi	r3,-1
    e3dc:	10c00526 	beq	r2,r3,e3f4 <_fstat_r+0x4c>
    e3e0:	dfc00217 	ldw	ra,8(sp)
    e3e4:	dc400117 	ldw	r17,4(sp)
    e3e8:	dc000017 	ldw	r16,0(sp)
    e3ec:	dec00304 	addi	sp,sp,12
    e3f0:	f800283a 	ret
    e3f4:	80c00017 	ldw	r3,0(r16)
    e3f8:	183ff926 	beq	r3,zero,e3e0 <_fstat_r+0x38>
    e3fc:	88c00015 	stw	r3,0(r17)
    e400:	003ff706 	br	e3e0 <_fstat_r+0x38>

0000e404 <__sfvwrite_r>:
    e404:	30800217 	ldw	r2,8(r6)
    e408:	10006726 	beq	r2,zero,e5a8 <__sfvwrite_r+0x1a4>
    e40c:	28c0030b 	ldhu	r3,12(r5)
    e410:	defff404 	addi	sp,sp,-48
    e414:	dd400715 	stw	r21,28(sp)
    e418:	dd000615 	stw	r20,24(sp)
    e41c:	dc000215 	stw	r16,8(sp)
    e420:	dfc00b15 	stw	ra,44(sp)
    e424:	df000a15 	stw	fp,40(sp)
    e428:	ddc00915 	stw	r23,36(sp)
    e42c:	dd800815 	stw	r22,32(sp)
    e430:	dcc00515 	stw	r19,20(sp)
    e434:	dc800415 	stw	r18,16(sp)
    e438:	dc400315 	stw	r17,12(sp)
    e43c:	1880020c 	andi	r2,r3,8
    e440:	2821883a 	mov	r16,r5
    e444:	202b883a 	mov	r21,r4
    e448:	3029883a 	mov	r20,r6
    e44c:	10002726 	beq	r2,zero,e4ec <__sfvwrite_r+0xe8>
    e450:	28800417 	ldw	r2,16(r5)
    e454:	10002526 	beq	r2,zero,e4ec <__sfvwrite_r+0xe8>
    e458:	1880008c 	andi	r2,r3,2
    e45c:	a4400017 	ldw	r17,0(r20)
    e460:	10002a26 	beq	r2,zero,e50c <__sfvwrite_r+0x108>
    e464:	05a00034 	movhi	r22,32768
    e468:	0027883a 	mov	r19,zero
    e46c:	0025883a 	mov	r18,zero
    e470:	b5bf0004 	addi	r22,r22,-1024
    e474:	980d883a 	mov	r6,r19
    e478:	a809883a 	mov	r4,r21
    e47c:	90004626 	beq	r18,zero,e598 <__sfvwrite_r+0x194>
    e480:	900f883a 	mov	r7,r18
    e484:	b480022e 	bgeu	r22,r18,e490 <__sfvwrite_r+0x8c>
    e488:	01e00034 	movhi	r7,32768
    e48c:	39ff0004 	addi	r7,r7,-1024
    e490:	80800917 	ldw	r2,36(r16)
    e494:	81400717 	ldw	r5,28(r16)
    e498:	103ee83a 	callr	r2
    e49c:	0080570e 	bge	zero,r2,e5fc <__sfvwrite_r+0x1f8>
    e4a0:	a0c00217 	ldw	r3,8(r20)
    e4a4:	98a7883a 	add	r19,r19,r2
    e4a8:	90a5c83a 	sub	r18,r18,r2
    e4ac:	1885c83a 	sub	r2,r3,r2
    e4b0:	a0800215 	stw	r2,8(r20)
    e4b4:	103fef1e 	bne	r2,zero,e474 <__sfvwrite_r+0x70>
    e4b8:	0005883a 	mov	r2,zero
    e4bc:	dfc00b17 	ldw	ra,44(sp)
    e4c0:	df000a17 	ldw	fp,40(sp)
    e4c4:	ddc00917 	ldw	r23,36(sp)
    e4c8:	dd800817 	ldw	r22,32(sp)
    e4cc:	dd400717 	ldw	r21,28(sp)
    e4d0:	dd000617 	ldw	r20,24(sp)
    e4d4:	dcc00517 	ldw	r19,20(sp)
    e4d8:	dc800417 	ldw	r18,16(sp)
    e4dc:	dc400317 	ldw	r17,12(sp)
    e4e0:	dc000217 	ldw	r16,8(sp)
    e4e4:	dec00c04 	addi	sp,sp,48
    e4e8:	f800283a 	ret
    e4ec:	800b883a 	mov	r5,r16
    e4f0:	a809883a 	mov	r4,r21
    e4f4:	0006d840 	call	6d84 <__swsetup_r>
    e4f8:	1000eb1e 	bne	r2,zero,e8a8 <__sfvwrite_r+0x4a4>
    e4fc:	80c0030b 	ldhu	r3,12(r16)
    e500:	a4400017 	ldw	r17,0(r20)
    e504:	1880008c 	andi	r2,r3,2
    e508:	103fd61e 	bne	r2,zero,e464 <__sfvwrite_r+0x60>
    e50c:	1880004c 	andi	r2,r3,1
    e510:	10003f1e 	bne	r2,zero,e610 <__sfvwrite_r+0x20c>
    e514:	0039883a 	mov	fp,zero
    e518:	0025883a 	mov	r18,zero
    e51c:	90001a26 	beq	r18,zero,e588 <__sfvwrite_r+0x184>
    e520:	1880800c 	andi	r2,r3,512
    e524:	84c00217 	ldw	r19,8(r16)
    e528:	10002126 	beq	r2,zero,e5b0 <__sfvwrite_r+0x1ac>
    e52c:	982f883a 	mov	r23,r19
    e530:	94c09336 	bltu	r18,r19,e780 <__sfvwrite_r+0x37c>
    e534:	1881200c 	andi	r2,r3,1152
    e538:	10009e1e 	bne	r2,zero,e7b4 <__sfvwrite_r+0x3b0>
    e53c:	81000017 	ldw	r4,0(r16)
    e540:	b80d883a 	mov	r6,r23
    e544:	e00b883a 	mov	r5,fp
    e548:	000e9740 	call	e974 <memmove>
    e54c:	80c00217 	ldw	r3,8(r16)
    e550:	81000017 	ldw	r4,0(r16)
    e554:	9005883a 	mov	r2,r18
    e558:	1ce7c83a 	sub	r19,r3,r19
    e55c:	25cf883a 	add	r7,r4,r23
    e560:	84c00215 	stw	r19,8(r16)
    e564:	81c00015 	stw	r7,0(r16)
    e568:	a0c00217 	ldw	r3,8(r20)
    e56c:	e0b9883a 	add	fp,fp,r2
    e570:	90a5c83a 	sub	r18,r18,r2
    e574:	18a7c83a 	sub	r19,r3,r2
    e578:	a4c00215 	stw	r19,8(r20)
    e57c:	983fce26 	beq	r19,zero,e4b8 <__sfvwrite_r+0xb4>
    e580:	80c0030b 	ldhu	r3,12(r16)
    e584:	903fe61e 	bne	r18,zero,e520 <__sfvwrite_r+0x11c>
    e588:	8f000017 	ldw	fp,0(r17)
    e58c:	8c800117 	ldw	r18,4(r17)
    e590:	8c400204 	addi	r17,r17,8
    e594:	003fe106 	br	e51c <__sfvwrite_r+0x118>
    e598:	8cc00017 	ldw	r19,0(r17)
    e59c:	8c800117 	ldw	r18,4(r17)
    e5a0:	8c400204 	addi	r17,r17,8
    e5a4:	003fb306 	br	e474 <__sfvwrite_r+0x70>
    e5a8:	0005883a 	mov	r2,zero
    e5ac:	f800283a 	ret
    e5b0:	81000017 	ldw	r4,0(r16)
    e5b4:	80800417 	ldw	r2,16(r16)
    e5b8:	11005736 	bltu	r2,r4,e718 <__sfvwrite_r+0x314>
    e5bc:	85c00517 	ldw	r23,20(r16)
    e5c0:	95c05536 	bltu	r18,r23,e718 <__sfvwrite_r+0x314>
    e5c4:	00a00034 	movhi	r2,32768
    e5c8:	10bfffc4 	addi	r2,r2,-1
    e5cc:	9009883a 	mov	r4,r18
    e5d0:	1480012e 	bgeu	r2,r18,e5d8 <__sfvwrite_r+0x1d4>
    e5d4:	1009883a 	mov	r4,r2
    e5d8:	b80b883a 	mov	r5,r23
    e5dc:	000fe840 	call	fe84 <__divsi3>
    e5e0:	15cf383a 	mul	r7,r2,r23
    e5e4:	81400717 	ldw	r5,28(r16)
    e5e8:	80800917 	ldw	r2,36(r16)
    e5ec:	e00d883a 	mov	r6,fp
    e5f0:	a809883a 	mov	r4,r21
    e5f4:	103ee83a 	callr	r2
    e5f8:	00bfdb16 	blt	zero,r2,e568 <__sfvwrite_r+0x164>
    e5fc:	8080030b 	ldhu	r2,12(r16)
    e600:	10801014 	ori	r2,r2,64
    e604:	8080030d 	sth	r2,12(r16)
    e608:	00bfffc4 	movi	r2,-1
    e60c:	003fab06 	br	e4bc <__sfvwrite_r+0xb8>
    e610:	0027883a 	mov	r19,zero
    e614:	0011883a 	mov	r8,zero
    e618:	0039883a 	mov	fp,zero
    e61c:	0025883a 	mov	r18,zero
    e620:	90001f26 	beq	r18,zero,e6a0 <__sfvwrite_r+0x29c>
    e624:	40005a26 	beq	r8,zero,e790 <__sfvwrite_r+0x38c>
    e628:	982d883a 	mov	r22,r19
    e62c:	94c0012e 	bgeu	r18,r19,e634 <__sfvwrite_r+0x230>
    e630:	902d883a 	mov	r22,r18
    e634:	81000017 	ldw	r4,0(r16)
    e638:	80800417 	ldw	r2,16(r16)
    e63c:	b02f883a 	mov	r23,r22
    e640:	81c00517 	ldw	r7,20(r16)
    e644:	1100032e 	bgeu	r2,r4,e654 <__sfvwrite_r+0x250>
    e648:	80c00217 	ldw	r3,8(r16)
    e64c:	38c7883a 	add	r3,r7,r3
    e650:	1d801816 	blt	r3,r22,e6b4 <__sfvwrite_r+0x2b0>
    e654:	b1c03e16 	blt	r22,r7,e750 <__sfvwrite_r+0x34c>
    e658:	80800917 	ldw	r2,36(r16)
    e65c:	81400717 	ldw	r5,28(r16)
    e660:	e00d883a 	mov	r6,fp
    e664:	da000115 	stw	r8,4(sp)
    e668:	a809883a 	mov	r4,r21
    e66c:	103ee83a 	callr	r2
    e670:	102f883a 	mov	r23,r2
    e674:	da000117 	ldw	r8,4(sp)
    e678:	00bfe00e 	bge	zero,r2,e5fc <__sfvwrite_r+0x1f8>
    e67c:	9de7c83a 	sub	r19,r19,r23
    e680:	98001f26 	beq	r19,zero,e700 <__sfvwrite_r+0x2fc>
    e684:	a0800217 	ldw	r2,8(r20)
    e688:	e5f9883a 	add	fp,fp,r23
    e68c:	95e5c83a 	sub	r18,r18,r23
    e690:	15efc83a 	sub	r23,r2,r23
    e694:	a5c00215 	stw	r23,8(r20)
    e698:	b83f8726 	beq	r23,zero,e4b8 <__sfvwrite_r+0xb4>
    e69c:	903fe11e 	bne	r18,zero,e624 <__sfvwrite_r+0x220>
    e6a0:	8f000017 	ldw	fp,0(r17)
    e6a4:	8c800117 	ldw	r18,4(r17)
    e6a8:	0011883a 	mov	r8,zero
    e6ac:	8c400204 	addi	r17,r17,8
    e6b0:	003fdb06 	br	e620 <__sfvwrite_r+0x21c>
    e6b4:	180d883a 	mov	r6,r3
    e6b8:	e00b883a 	mov	r5,fp
    e6bc:	da000115 	stw	r8,4(sp)
    e6c0:	d8c00015 	stw	r3,0(sp)
    e6c4:	000e9740 	call	e974 <memmove>
    e6c8:	d8c00017 	ldw	r3,0(sp)
    e6cc:	80800017 	ldw	r2,0(r16)
    e6d0:	800b883a 	mov	r5,r16
    e6d4:	a809883a 	mov	r4,r21
    e6d8:	10c5883a 	add	r2,r2,r3
    e6dc:	80800015 	stw	r2,0(r16)
    e6e0:	d8c00015 	stw	r3,0(sp)
    e6e4:	000897c0 	call	897c <_fflush_r>
    e6e8:	d8c00017 	ldw	r3,0(sp)
    e6ec:	da000117 	ldw	r8,4(sp)
    e6f0:	103fc21e 	bne	r2,zero,e5fc <__sfvwrite_r+0x1f8>
    e6f4:	182f883a 	mov	r23,r3
    e6f8:	9de7c83a 	sub	r19,r19,r23
    e6fc:	983fe11e 	bne	r19,zero,e684 <__sfvwrite_r+0x280>
    e700:	800b883a 	mov	r5,r16
    e704:	a809883a 	mov	r4,r21
    e708:	000897c0 	call	897c <_fflush_r>
    e70c:	103fbb1e 	bne	r2,zero,e5fc <__sfvwrite_r+0x1f8>
    e710:	0011883a 	mov	r8,zero
    e714:	003fdb06 	br	e684 <__sfvwrite_r+0x280>
    e718:	94c0012e 	bgeu	r18,r19,e720 <__sfvwrite_r+0x31c>
    e71c:	9027883a 	mov	r19,r18
    e720:	980d883a 	mov	r6,r19
    e724:	e00b883a 	mov	r5,fp
    e728:	000e9740 	call	e974 <memmove>
    e72c:	80800217 	ldw	r2,8(r16)
    e730:	80c00017 	ldw	r3,0(r16)
    e734:	14c5c83a 	sub	r2,r2,r19
    e738:	1cc7883a 	add	r3,r3,r19
    e73c:	80800215 	stw	r2,8(r16)
    e740:	80c00015 	stw	r3,0(r16)
    e744:	10004326 	beq	r2,zero,e854 <__sfvwrite_r+0x450>
    e748:	9805883a 	mov	r2,r19
    e74c:	003f8606 	br	e568 <__sfvwrite_r+0x164>
    e750:	b00d883a 	mov	r6,r22
    e754:	e00b883a 	mov	r5,fp
    e758:	da000115 	stw	r8,4(sp)
    e75c:	000e9740 	call	e974 <memmove>
    e760:	80800217 	ldw	r2,8(r16)
    e764:	80c00017 	ldw	r3,0(r16)
    e768:	da000117 	ldw	r8,4(sp)
    e76c:	1585c83a 	sub	r2,r2,r22
    e770:	1dad883a 	add	r22,r3,r22
    e774:	80800215 	stw	r2,8(r16)
    e778:	85800015 	stw	r22,0(r16)
    e77c:	003fbf06 	br	e67c <__sfvwrite_r+0x278>
    e780:	81000017 	ldw	r4,0(r16)
    e784:	9027883a 	mov	r19,r18
    e788:	902f883a 	mov	r23,r18
    e78c:	003f6c06 	br	e540 <__sfvwrite_r+0x13c>
    e790:	900d883a 	mov	r6,r18
    e794:	01400284 	movi	r5,10
    e798:	e009883a 	mov	r4,fp
    e79c:	0009e080 	call	9e08 <memchr>
    e7a0:	10003e26 	beq	r2,zero,e89c <__sfvwrite_r+0x498>
    e7a4:	10800044 	addi	r2,r2,1
    e7a8:	1727c83a 	sub	r19,r2,fp
    e7ac:	02000044 	movi	r8,1
    e7b0:	003f9d06 	br	e628 <__sfvwrite_r+0x224>
    e7b4:	80800517 	ldw	r2,20(r16)
    e7b8:	81400417 	ldw	r5,16(r16)
    e7bc:	81c00017 	ldw	r7,0(r16)
    e7c0:	10a7883a 	add	r19,r2,r2
    e7c4:	9885883a 	add	r2,r19,r2
    e7c8:	1026d7fa 	srli	r19,r2,31
    e7cc:	396dc83a 	sub	r22,r7,r5
    e7d0:	b1000044 	addi	r4,r22,1
    e7d4:	9885883a 	add	r2,r19,r2
    e7d8:	1027d07a 	srai	r19,r2,1
    e7dc:	2485883a 	add	r2,r4,r18
    e7e0:	980d883a 	mov	r6,r19
    e7e4:	9880022e 	bgeu	r19,r2,e7f0 <__sfvwrite_r+0x3ec>
    e7e8:	1027883a 	mov	r19,r2
    e7ec:	100d883a 	mov	r6,r2
    e7f0:	18c1000c 	andi	r3,r3,1024
    e7f4:	18001c26 	beq	r3,zero,e868 <__sfvwrite_r+0x464>
    e7f8:	300b883a 	mov	r5,r6
    e7fc:	a809883a 	mov	r4,r21
    e800:	00095fc0 	call	95fc <_malloc_r>
    e804:	102f883a 	mov	r23,r2
    e808:	10002926 	beq	r2,zero,e8b0 <__sfvwrite_r+0x4ac>
    e80c:	81400417 	ldw	r5,16(r16)
    e810:	b00d883a 	mov	r6,r22
    e814:	1009883a 	mov	r4,r2
    e818:	0009eec0 	call	9eec <memcpy>
    e81c:	8080030b 	ldhu	r2,12(r16)
    e820:	00fedfc4 	movi	r3,-1153
    e824:	10c4703a 	and	r2,r2,r3
    e828:	10802014 	ori	r2,r2,128
    e82c:	8080030d 	sth	r2,12(r16)
    e830:	bd89883a 	add	r4,r23,r22
    e834:	9d8fc83a 	sub	r7,r19,r22
    e838:	85c00415 	stw	r23,16(r16)
    e83c:	84c00515 	stw	r19,20(r16)
    e840:	81000015 	stw	r4,0(r16)
    e844:	9027883a 	mov	r19,r18
    e848:	81c00215 	stw	r7,8(r16)
    e84c:	902f883a 	mov	r23,r18
    e850:	003f3b06 	br	e540 <__sfvwrite_r+0x13c>
    e854:	800b883a 	mov	r5,r16
    e858:	a809883a 	mov	r4,r21
    e85c:	000897c0 	call	897c <_fflush_r>
    e860:	103fb926 	beq	r2,zero,e748 <__sfvwrite_r+0x344>
    e864:	003f6506 	br	e5fc <__sfvwrite_r+0x1f8>
    e868:	a809883a 	mov	r4,r21
    e86c:	000eb300 	call	eb30 <_realloc_r>
    e870:	102f883a 	mov	r23,r2
    e874:	103fee1e 	bne	r2,zero,e830 <__sfvwrite_r+0x42c>
    e878:	81400417 	ldw	r5,16(r16)
    e87c:	a809883a 	mov	r4,r21
    e880:	0008ecc0 	call	8ecc <_free_r>
    e884:	8080030b 	ldhu	r2,12(r16)
    e888:	00ffdfc4 	movi	r3,-129
    e88c:	1884703a 	and	r2,r3,r2
    e890:	00c00304 	movi	r3,12
    e894:	a8c00015 	stw	r3,0(r21)
    e898:	003f5906 	br	e600 <__sfvwrite_r+0x1fc>
    e89c:	94c00044 	addi	r19,r18,1
    e8a0:	02000044 	movi	r8,1
    e8a4:	003f6006 	br	e628 <__sfvwrite_r+0x224>
    e8a8:	00bfffc4 	movi	r2,-1
    e8ac:	003f0306 	br	e4bc <__sfvwrite_r+0xb8>
    e8b0:	00800304 	movi	r2,12
    e8b4:	a8800015 	stw	r2,0(r21)
    e8b8:	8080030b 	ldhu	r2,12(r16)
    e8bc:	003f5006 	br	e600 <__sfvwrite_r+0x1fc>

0000e8c0 <_isatty_r>:
    e8c0:	defffd04 	addi	sp,sp,-12
    e8c4:	dc000015 	stw	r16,0(sp)
    e8c8:	040000b4 	movhi	r16,2
    e8cc:	dc400115 	stw	r17,4(sp)
    e8d0:	840e5104 	addi	r16,r16,14660
    e8d4:	2023883a 	mov	r17,r4
    e8d8:	2809883a 	mov	r4,r5
    e8dc:	dfc00215 	stw	ra,8(sp)
    e8e0:	80000015 	stw	zero,0(r16)
    e8e4:	00129000 	call	12900 <isatty>
    e8e8:	00ffffc4 	movi	r3,-1
    e8ec:	10c00526 	beq	r2,r3,e904 <_isatty_r+0x44>
    e8f0:	dfc00217 	ldw	ra,8(sp)
    e8f4:	dc400117 	ldw	r17,4(sp)
    e8f8:	dc000017 	ldw	r16,0(sp)
    e8fc:	dec00304 	addi	sp,sp,12
    e900:	f800283a 	ret
    e904:	80c00017 	ldw	r3,0(r16)
    e908:	183ff926 	beq	r3,zero,e8f0 <_isatty_r+0x30>
    e90c:	88c00015 	stw	r3,0(r17)
    e910:	003ff706 	br	e8f0 <_isatty_r+0x30>

0000e914 <_lseek_r>:
    e914:	defffd04 	addi	sp,sp,-12
    e918:	2805883a 	mov	r2,r5
    e91c:	dc000015 	stw	r16,0(sp)
    e920:	040000b4 	movhi	r16,2
    e924:	dc400115 	stw	r17,4(sp)
    e928:	300b883a 	mov	r5,r6
    e92c:	840e5104 	addi	r16,r16,14660
    e930:	2023883a 	mov	r17,r4
    e934:	380d883a 	mov	r6,r7
    e938:	1009883a 	mov	r4,r2
    e93c:	dfc00215 	stw	ra,8(sp)
    e940:	80000015 	stw	zero,0(r16)
    e944:	0012acc0 	call	12acc <lseek>
    e948:	00ffffc4 	movi	r3,-1
    e94c:	10c00526 	beq	r2,r3,e964 <_lseek_r+0x50>
    e950:	dfc00217 	ldw	ra,8(sp)
    e954:	dc400117 	ldw	r17,4(sp)
    e958:	dc000017 	ldw	r16,0(sp)
    e95c:	dec00304 	addi	sp,sp,12
    e960:	f800283a 	ret
    e964:	80c00017 	ldw	r3,0(r16)
    e968:	183ff926 	beq	r3,zero,e950 <_lseek_r+0x3c>
    e96c:	88c00015 	stw	r3,0(r17)
    e970:	003ff706 	br	e950 <_lseek_r+0x3c>

0000e974 <memmove>:
    e974:	2005883a 	mov	r2,r4
    e978:	29000b2e 	bgeu	r5,r4,e9a8 <memmove+0x34>
    e97c:	298f883a 	add	r7,r5,r6
    e980:	21c0092e 	bgeu	r4,r7,e9a8 <memmove+0x34>
    e984:	2187883a 	add	r3,r4,r6
    e988:	198bc83a 	sub	r5,r3,r6
    e98c:	30004826 	beq	r6,zero,eab0 <memmove+0x13c>
    e990:	39ffffc4 	addi	r7,r7,-1
    e994:	39000003 	ldbu	r4,0(r7)
    e998:	18ffffc4 	addi	r3,r3,-1
    e99c:	19000005 	stb	r4,0(r3)
    e9a0:	28fffb1e 	bne	r5,r3,e990 <memmove+0x1c>
    e9a4:	f800283a 	ret
    e9a8:	00c003c4 	movi	r3,15
    e9ac:	1980412e 	bgeu	r3,r6,eab4 <memmove+0x140>
    e9b0:	2886b03a 	or	r3,r5,r2
    e9b4:	18c000cc 	andi	r3,r3,3
    e9b8:	1800401e 	bne	r3,zero,eabc <memmove+0x148>
    e9bc:	33fffc04 	addi	r15,r6,-16
    e9c0:	781ed13a 	srli	r15,r15,4
    e9c4:	28c00104 	addi	r3,r5,4
    e9c8:	13400104 	addi	r13,r2,4
    e9cc:	781c913a 	slli	r14,r15,4
    e9d0:	2b000204 	addi	r12,r5,8
    e9d4:	12c00204 	addi	r11,r2,8
    e9d8:	73800504 	addi	r14,r14,20
    e9dc:	2a800304 	addi	r10,r5,12
    e9e0:	12400304 	addi	r9,r2,12
    e9e4:	2b9d883a 	add	r14,r5,r14
    e9e8:	2811883a 	mov	r8,r5
    e9ec:	100f883a 	mov	r7,r2
    e9f0:	41000017 	ldw	r4,0(r8)
    e9f4:	39c00404 	addi	r7,r7,16
    e9f8:	18c00404 	addi	r3,r3,16
    e9fc:	393ffc15 	stw	r4,-16(r7)
    ea00:	193ffc17 	ldw	r4,-16(r3)
    ea04:	6b400404 	addi	r13,r13,16
    ea08:	5ac00404 	addi	r11,r11,16
    ea0c:	693ffc15 	stw	r4,-16(r13)
    ea10:	61000017 	ldw	r4,0(r12)
    ea14:	4a400404 	addi	r9,r9,16
    ea18:	42000404 	addi	r8,r8,16
    ea1c:	593ffc15 	stw	r4,-16(r11)
    ea20:	51000017 	ldw	r4,0(r10)
    ea24:	63000404 	addi	r12,r12,16
    ea28:	52800404 	addi	r10,r10,16
    ea2c:	493ffc15 	stw	r4,-16(r9)
    ea30:	1bbfef1e 	bne	r3,r14,e9f0 <memmove+0x7c>
    ea34:	79000044 	addi	r4,r15,1
    ea38:	2008913a 	slli	r4,r4,4
    ea3c:	328003cc 	andi	r10,r6,15
    ea40:	02c000c4 	movi	r11,3
    ea44:	1107883a 	add	r3,r2,r4
    ea48:	290b883a 	add	r5,r5,r4
    ea4c:	5a801e2e 	bgeu	r11,r10,eac8 <memmove+0x154>
    ea50:	1813883a 	mov	r9,r3
    ea54:	2811883a 	mov	r8,r5
    ea58:	500f883a 	mov	r7,r10
    ea5c:	41000017 	ldw	r4,0(r8)
    ea60:	4a400104 	addi	r9,r9,4
    ea64:	39ffff04 	addi	r7,r7,-4
    ea68:	493fff15 	stw	r4,-4(r9)
    ea6c:	42000104 	addi	r8,r8,4
    ea70:	59fffa36 	bltu	r11,r7,ea5c <memmove+0xe8>
    ea74:	513fff04 	addi	r4,r10,-4
    ea78:	2008d0ba 	srli	r4,r4,2
    ea7c:	318000cc 	andi	r6,r6,3
    ea80:	21000044 	addi	r4,r4,1
    ea84:	2109883a 	add	r4,r4,r4
    ea88:	2109883a 	add	r4,r4,r4
    ea8c:	1907883a 	add	r3,r3,r4
    ea90:	290b883a 	add	r5,r5,r4
    ea94:	30000b26 	beq	r6,zero,eac4 <memmove+0x150>
    ea98:	198d883a 	add	r6,r3,r6
    ea9c:	29c00003 	ldbu	r7,0(r5)
    eaa0:	18c00044 	addi	r3,r3,1
    eaa4:	29400044 	addi	r5,r5,1
    eaa8:	19ffffc5 	stb	r7,-1(r3)
    eaac:	19bffb1e 	bne	r3,r6,ea9c <memmove+0x128>
    eab0:	f800283a 	ret
    eab4:	1007883a 	mov	r3,r2
    eab8:	003ff606 	br	ea94 <memmove+0x120>
    eabc:	1007883a 	mov	r3,r2
    eac0:	003ff506 	br	ea98 <memmove+0x124>
    eac4:	f800283a 	ret
    eac8:	500d883a 	mov	r6,r10
    eacc:	003ff106 	br	ea94 <memmove+0x120>

0000ead0 <_read_r>:
    ead0:	defffd04 	addi	sp,sp,-12
    ead4:	2805883a 	mov	r2,r5
    ead8:	dc000015 	stw	r16,0(sp)
    eadc:	040000b4 	movhi	r16,2
    eae0:	dc400115 	stw	r17,4(sp)
    eae4:	300b883a 	mov	r5,r6
    eae8:	840e5104 	addi	r16,r16,14660
    eaec:	2023883a 	mov	r17,r4
    eaf0:	380d883a 	mov	r6,r7
    eaf4:	1009883a 	mov	r4,r2
    eaf8:	dfc00215 	stw	ra,8(sp)
    eafc:	80000015 	stw	zero,0(r16)
    eb00:	0012c980 	call	12c98 <read>
    eb04:	00ffffc4 	movi	r3,-1
    eb08:	10c00526 	beq	r2,r3,eb20 <_read_r+0x50>
    eb0c:	dfc00217 	ldw	ra,8(sp)
    eb10:	dc400117 	ldw	r17,4(sp)
    eb14:	dc000017 	ldw	r16,0(sp)
    eb18:	dec00304 	addi	sp,sp,12
    eb1c:	f800283a 	ret
    eb20:	80c00017 	ldw	r3,0(r16)
    eb24:	183ff926 	beq	r3,zero,eb0c <_read_r+0x3c>
    eb28:	88c00015 	stw	r3,0(r17)
    eb2c:	003ff706 	br	eb0c <_read_r+0x3c>

0000eb30 <_realloc_r>:
    eb30:	defff604 	addi	sp,sp,-40
    eb34:	dc800215 	stw	r18,8(sp)
    eb38:	dfc00915 	stw	ra,36(sp)
    eb3c:	df000815 	stw	fp,32(sp)
    eb40:	ddc00715 	stw	r23,28(sp)
    eb44:	dd800615 	stw	r22,24(sp)
    eb48:	dd400515 	stw	r21,20(sp)
    eb4c:	dd000415 	stw	r20,16(sp)
    eb50:	dcc00315 	stw	r19,12(sp)
    eb54:	dc400115 	stw	r17,4(sp)
    eb58:	dc000015 	stw	r16,0(sp)
    eb5c:	3025883a 	mov	r18,r6
    eb60:	2800b726 	beq	r5,zero,ee40 <_realloc_r+0x310>
    eb64:	282b883a 	mov	r21,r5
    eb68:	2029883a 	mov	r20,r4
    eb6c:	00131000 	call	13100 <__malloc_lock>
    eb70:	a8bfff17 	ldw	r2,-4(r21)
    eb74:	043fff04 	movi	r16,-4
    eb78:	90c002c4 	addi	r3,r18,11
    eb7c:	01000584 	movi	r4,22
    eb80:	acfffe04 	addi	r19,r21,-8
    eb84:	1420703a 	and	r16,r2,r16
    eb88:	20c0332e 	bgeu	r4,r3,ec58 <_realloc_r+0x128>
    eb8c:	047ffe04 	movi	r17,-8
    eb90:	1c62703a 	and	r17,r3,r17
    eb94:	8807883a 	mov	r3,r17
    eb98:	88005816 	blt	r17,zero,ecfc <_realloc_r+0x1cc>
    eb9c:	8c805736 	bltu	r17,r18,ecfc <_realloc_r+0x1cc>
    eba0:	80c0300e 	bge	r16,r3,ec64 <_realloc_r+0x134>
    eba4:	070000b4 	movhi	fp,2
    eba8:	e73ff204 	addi	fp,fp,-56
    ebac:	e1c00217 	ldw	r7,8(fp)
    ebb0:	9c09883a 	add	r4,r19,r16
    ebb4:	22000117 	ldw	r8,4(r4)
    ebb8:	21c06326 	beq	r4,r7,ed48 <_realloc_r+0x218>
    ebbc:	017fff84 	movi	r5,-2
    ebc0:	414a703a 	and	r5,r8,r5
    ebc4:	214b883a 	add	r5,r4,r5
    ebc8:	29800117 	ldw	r6,4(r5)
    ebcc:	3180004c 	andi	r6,r6,1
    ebd0:	30003f26 	beq	r6,zero,ecd0 <_realloc_r+0x1a0>
    ebd4:	1080004c 	andi	r2,r2,1
    ebd8:	10008326 	beq	r2,zero,ede8 <_realloc_r+0x2b8>
    ebdc:	900b883a 	mov	r5,r18
    ebe0:	a009883a 	mov	r4,r20
    ebe4:	00095fc0 	call	95fc <_malloc_r>
    ebe8:	1025883a 	mov	r18,r2
    ebec:	10011e26 	beq	r2,zero,f068 <_realloc_r+0x538>
    ebf0:	a93fff17 	ldw	r4,-4(r21)
    ebf4:	10fffe04 	addi	r3,r2,-8
    ebf8:	00bfff84 	movi	r2,-2
    ebfc:	2084703a 	and	r2,r4,r2
    ec00:	9885883a 	add	r2,r19,r2
    ec04:	1880ee26 	beq	r3,r2,efc0 <_realloc_r+0x490>
    ec08:	81bfff04 	addi	r6,r16,-4
    ec0c:	00800904 	movi	r2,36
    ec10:	1180b836 	bltu	r2,r6,eef4 <_realloc_r+0x3c4>
    ec14:	00c004c4 	movi	r3,19
    ec18:	19809636 	bltu	r3,r6,ee74 <_realloc_r+0x344>
    ec1c:	9005883a 	mov	r2,r18
    ec20:	a807883a 	mov	r3,r21
    ec24:	19000017 	ldw	r4,0(r3)
    ec28:	11000015 	stw	r4,0(r2)
    ec2c:	19000117 	ldw	r4,4(r3)
    ec30:	11000115 	stw	r4,4(r2)
    ec34:	18c00217 	ldw	r3,8(r3)
    ec38:	10c00215 	stw	r3,8(r2)
    ec3c:	a80b883a 	mov	r5,r21
    ec40:	a009883a 	mov	r4,r20
    ec44:	0008ecc0 	call	8ecc <_free_r>
    ec48:	a009883a 	mov	r4,r20
    ec4c:	00132200 	call	13220 <__malloc_unlock>
    ec50:	9005883a 	mov	r2,r18
    ec54:	00001206 	br	eca0 <_realloc_r+0x170>
    ec58:	00c00404 	movi	r3,16
    ec5c:	1823883a 	mov	r17,r3
    ec60:	003fce06 	br	eb9c <_realloc_r+0x6c>
    ec64:	a825883a 	mov	r18,r21
    ec68:	8445c83a 	sub	r2,r16,r17
    ec6c:	00c003c4 	movi	r3,15
    ec70:	18802636 	bltu	r3,r2,ed0c <_realloc_r+0x1dc>
    ec74:	99800117 	ldw	r6,4(r19)
    ec78:	9c07883a 	add	r3,r19,r16
    ec7c:	3180004c 	andi	r6,r6,1
    ec80:	3420b03a 	or	r16,r6,r16
    ec84:	9c000115 	stw	r16,4(r19)
    ec88:	18800117 	ldw	r2,4(r3)
    ec8c:	10800054 	ori	r2,r2,1
    ec90:	18800115 	stw	r2,4(r3)
    ec94:	a009883a 	mov	r4,r20
    ec98:	00132200 	call	13220 <__malloc_unlock>
    ec9c:	9005883a 	mov	r2,r18
    eca0:	dfc00917 	ldw	ra,36(sp)
    eca4:	df000817 	ldw	fp,32(sp)
    eca8:	ddc00717 	ldw	r23,28(sp)
    ecac:	dd800617 	ldw	r22,24(sp)
    ecb0:	dd400517 	ldw	r21,20(sp)
    ecb4:	dd000417 	ldw	r20,16(sp)
    ecb8:	dcc00317 	ldw	r19,12(sp)
    ecbc:	dc800217 	ldw	r18,8(sp)
    ecc0:	dc400117 	ldw	r17,4(sp)
    ecc4:	dc000017 	ldw	r16,0(sp)
    ecc8:	dec00a04 	addi	sp,sp,40
    eccc:	f800283a 	ret
    ecd0:	017fff04 	movi	r5,-4
    ecd4:	414a703a 	and	r5,r8,r5
    ecd8:	814d883a 	add	r6,r16,r5
    ecdc:	30c01f16 	blt	r6,r3,ed5c <_realloc_r+0x22c>
    ece0:	20800317 	ldw	r2,12(r4)
    ece4:	20c00217 	ldw	r3,8(r4)
    ece8:	a825883a 	mov	r18,r21
    ecec:	3021883a 	mov	r16,r6
    ecf0:	18800315 	stw	r2,12(r3)
    ecf4:	10c00215 	stw	r3,8(r2)
    ecf8:	003fdb06 	br	ec68 <_realloc_r+0x138>
    ecfc:	00800304 	movi	r2,12
    ed00:	a0800015 	stw	r2,0(r20)
    ed04:	0005883a 	mov	r2,zero
    ed08:	003fe506 	br	eca0 <_realloc_r+0x170>
    ed0c:	98c00117 	ldw	r3,4(r19)
    ed10:	9c4b883a 	add	r5,r19,r17
    ed14:	11000054 	ori	r4,r2,1
    ed18:	18c0004c 	andi	r3,r3,1
    ed1c:	1c62b03a 	or	r17,r3,r17
    ed20:	9c400115 	stw	r17,4(r19)
    ed24:	29000115 	stw	r4,4(r5)
    ed28:	2885883a 	add	r2,r5,r2
    ed2c:	10c00117 	ldw	r3,4(r2)
    ed30:	29400204 	addi	r5,r5,8
    ed34:	a009883a 	mov	r4,r20
    ed38:	18c00054 	ori	r3,r3,1
    ed3c:	10c00115 	stw	r3,4(r2)
    ed40:	0008ecc0 	call	8ecc <_free_r>
    ed44:	003fd306 	br	ec94 <_realloc_r+0x164>
    ed48:	017fff04 	movi	r5,-4
    ed4c:	414a703a 	and	r5,r8,r5
    ed50:	89800404 	addi	r6,r17,16
    ed54:	8151883a 	add	r8,r16,r5
    ed58:	4180590e 	bge	r8,r6,eec0 <_realloc_r+0x390>
    ed5c:	1080004c 	andi	r2,r2,1
    ed60:	103f9e1e 	bne	r2,zero,ebdc <_realloc_r+0xac>
    ed64:	adbffe17 	ldw	r22,-8(r21)
    ed68:	00bfff04 	movi	r2,-4
    ed6c:	9dadc83a 	sub	r22,r19,r22
    ed70:	b1800117 	ldw	r6,4(r22)
    ed74:	3084703a 	and	r2,r6,r2
    ed78:	20002026 	beq	r4,zero,edfc <_realloc_r+0x2cc>
    ed7c:	80af883a 	add	r23,r16,r2
    ed80:	b96f883a 	add	r23,r23,r5
    ed84:	21c05f26 	beq	r4,r7,ef04 <_realloc_r+0x3d4>
    ed88:	b8c01c16 	blt	r23,r3,edfc <_realloc_r+0x2cc>
    ed8c:	20800317 	ldw	r2,12(r4)
    ed90:	20c00217 	ldw	r3,8(r4)
    ed94:	81bfff04 	addi	r6,r16,-4
    ed98:	01000904 	movi	r4,36
    ed9c:	18800315 	stw	r2,12(r3)
    eda0:	10c00215 	stw	r3,8(r2)
    eda4:	b0c00217 	ldw	r3,8(r22)
    eda8:	b0800317 	ldw	r2,12(r22)
    edac:	b4800204 	addi	r18,r22,8
    edb0:	18800315 	stw	r2,12(r3)
    edb4:	10c00215 	stw	r3,8(r2)
    edb8:	21801b36 	bltu	r4,r6,ee28 <_realloc_r+0x2f8>
    edbc:	008004c4 	movi	r2,19
    edc0:	1180352e 	bgeu	r2,r6,ee98 <_realloc_r+0x368>
    edc4:	a8800017 	ldw	r2,0(r21)
    edc8:	b0800215 	stw	r2,8(r22)
    edcc:	a8800117 	ldw	r2,4(r21)
    edd0:	b0800315 	stw	r2,12(r22)
    edd4:	008006c4 	movi	r2,27
    edd8:	11807f36 	bltu	r2,r6,efd8 <_realloc_r+0x4a8>
    eddc:	b0800404 	addi	r2,r22,16
    ede0:	ad400204 	addi	r21,r21,8
    ede4:	00002d06 	br	ee9c <_realloc_r+0x36c>
    ede8:	adbffe17 	ldw	r22,-8(r21)
    edec:	00bfff04 	movi	r2,-4
    edf0:	9dadc83a 	sub	r22,r19,r22
    edf4:	b1000117 	ldw	r4,4(r22)
    edf8:	2084703a 	and	r2,r4,r2
    edfc:	b03f7726 	beq	r22,zero,ebdc <_realloc_r+0xac>
    ee00:	80af883a 	add	r23,r16,r2
    ee04:	b8ff7516 	blt	r23,r3,ebdc <_realloc_r+0xac>
    ee08:	b0800317 	ldw	r2,12(r22)
    ee0c:	b0c00217 	ldw	r3,8(r22)
    ee10:	81bfff04 	addi	r6,r16,-4
    ee14:	01000904 	movi	r4,36
    ee18:	18800315 	stw	r2,12(r3)
    ee1c:	10c00215 	stw	r3,8(r2)
    ee20:	b4800204 	addi	r18,r22,8
    ee24:	21bfe52e 	bgeu	r4,r6,edbc <_realloc_r+0x28c>
    ee28:	a80b883a 	mov	r5,r21
    ee2c:	9009883a 	mov	r4,r18
    ee30:	000e9740 	call	e974 <memmove>
    ee34:	b821883a 	mov	r16,r23
    ee38:	b027883a 	mov	r19,r22
    ee3c:	003f8a06 	br	ec68 <_realloc_r+0x138>
    ee40:	300b883a 	mov	r5,r6
    ee44:	dfc00917 	ldw	ra,36(sp)
    ee48:	df000817 	ldw	fp,32(sp)
    ee4c:	ddc00717 	ldw	r23,28(sp)
    ee50:	dd800617 	ldw	r22,24(sp)
    ee54:	dd400517 	ldw	r21,20(sp)
    ee58:	dd000417 	ldw	r20,16(sp)
    ee5c:	dcc00317 	ldw	r19,12(sp)
    ee60:	dc800217 	ldw	r18,8(sp)
    ee64:	dc400117 	ldw	r17,4(sp)
    ee68:	dc000017 	ldw	r16,0(sp)
    ee6c:	dec00a04 	addi	sp,sp,40
    ee70:	00095fc1 	jmpi	95fc <_malloc_r>
    ee74:	a8c00017 	ldw	r3,0(r21)
    ee78:	90c00015 	stw	r3,0(r18)
    ee7c:	a8c00117 	ldw	r3,4(r21)
    ee80:	90c00115 	stw	r3,4(r18)
    ee84:	00c006c4 	movi	r3,27
    ee88:	19804536 	bltu	r3,r6,efa0 <_realloc_r+0x470>
    ee8c:	90800204 	addi	r2,r18,8
    ee90:	a8c00204 	addi	r3,r21,8
    ee94:	003f6306 	br	ec24 <_realloc_r+0xf4>
    ee98:	9005883a 	mov	r2,r18
    ee9c:	a8c00017 	ldw	r3,0(r21)
    eea0:	b821883a 	mov	r16,r23
    eea4:	b027883a 	mov	r19,r22
    eea8:	10c00015 	stw	r3,0(r2)
    eeac:	a8c00117 	ldw	r3,4(r21)
    eeb0:	10c00115 	stw	r3,4(r2)
    eeb4:	a8c00217 	ldw	r3,8(r21)
    eeb8:	10c00215 	stw	r3,8(r2)
    eebc:	003f6a06 	br	ec68 <_realloc_r+0x138>
    eec0:	9c67883a 	add	r19,r19,r17
    eec4:	4445c83a 	sub	r2,r8,r17
    eec8:	e4c00215 	stw	r19,8(fp)
    eecc:	10800054 	ori	r2,r2,1
    eed0:	98800115 	stw	r2,4(r19)
    eed4:	a8bfff17 	ldw	r2,-4(r21)
    eed8:	a009883a 	mov	r4,r20
    eedc:	1080004c 	andi	r2,r2,1
    eee0:	1462b03a 	or	r17,r2,r17
    eee4:	ac7fff15 	stw	r17,-4(r21)
    eee8:	00132200 	call	13220 <__malloc_unlock>
    eeec:	a805883a 	mov	r2,r21
    eef0:	003f6b06 	br	eca0 <_realloc_r+0x170>
    eef4:	a80b883a 	mov	r5,r21
    eef8:	9009883a 	mov	r4,r18
    eefc:	000e9740 	call	e974 <memmove>
    ef00:	003f4e06 	br	ec3c <_realloc_r+0x10c>
    ef04:	89000404 	addi	r4,r17,16
    ef08:	b93fbc16 	blt	r23,r4,edfc <_realloc_r+0x2cc>
    ef0c:	b0800317 	ldw	r2,12(r22)
    ef10:	b0c00217 	ldw	r3,8(r22)
    ef14:	81bfff04 	addi	r6,r16,-4
    ef18:	01000904 	movi	r4,36
    ef1c:	18800315 	stw	r2,12(r3)
    ef20:	10c00215 	stw	r3,8(r2)
    ef24:	b4800204 	addi	r18,r22,8
    ef28:	21804336 	bltu	r4,r6,f038 <_realloc_r+0x508>
    ef2c:	008004c4 	movi	r2,19
    ef30:	11803f2e 	bgeu	r2,r6,f030 <_realloc_r+0x500>
    ef34:	a8800017 	ldw	r2,0(r21)
    ef38:	b0800215 	stw	r2,8(r22)
    ef3c:	a8800117 	ldw	r2,4(r21)
    ef40:	b0800315 	stw	r2,12(r22)
    ef44:	008006c4 	movi	r2,27
    ef48:	11803f36 	bltu	r2,r6,f048 <_realloc_r+0x518>
    ef4c:	b0800404 	addi	r2,r22,16
    ef50:	ad400204 	addi	r21,r21,8
    ef54:	a8c00017 	ldw	r3,0(r21)
    ef58:	10c00015 	stw	r3,0(r2)
    ef5c:	a8c00117 	ldw	r3,4(r21)
    ef60:	10c00115 	stw	r3,4(r2)
    ef64:	a8c00217 	ldw	r3,8(r21)
    ef68:	10c00215 	stw	r3,8(r2)
    ef6c:	b447883a 	add	r3,r22,r17
    ef70:	bc45c83a 	sub	r2,r23,r17
    ef74:	e0c00215 	stw	r3,8(fp)
    ef78:	10800054 	ori	r2,r2,1
    ef7c:	18800115 	stw	r2,4(r3)
    ef80:	b0800117 	ldw	r2,4(r22)
    ef84:	a009883a 	mov	r4,r20
    ef88:	1080004c 	andi	r2,r2,1
    ef8c:	1462b03a 	or	r17,r2,r17
    ef90:	b4400115 	stw	r17,4(r22)
    ef94:	00132200 	call	13220 <__malloc_unlock>
    ef98:	9005883a 	mov	r2,r18
    ef9c:	003f4006 	br	eca0 <_realloc_r+0x170>
    efa0:	a8c00217 	ldw	r3,8(r21)
    efa4:	90c00215 	stw	r3,8(r18)
    efa8:	a8c00317 	ldw	r3,12(r21)
    efac:	90c00315 	stw	r3,12(r18)
    efb0:	30801126 	beq	r6,r2,eff8 <_realloc_r+0x4c8>
    efb4:	90800404 	addi	r2,r18,16
    efb8:	a8c00404 	addi	r3,r21,16
    efbc:	003f1906 	br	ec24 <_realloc_r+0xf4>
    efc0:	90ffff17 	ldw	r3,-4(r18)
    efc4:	00bfff04 	movi	r2,-4
    efc8:	a825883a 	mov	r18,r21
    efcc:	1884703a 	and	r2,r3,r2
    efd0:	80a1883a 	add	r16,r16,r2
    efd4:	003f2406 	br	ec68 <_realloc_r+0x138>
    efd8:	a8800217 	ldw	r2,8(r21)
    efdc:	b0800415 	stw	r2,16(r22)
    efe0:	a8800317 	ldw	r2,12(r21)
    efe4:	b0800515 	stw	r2,20(r22)
    efe8:	31000a26 	beq	r6,r4,f014 <_realloc_r+0x4e4>
    efec:	b0800604 	addi	r2,r22,24
    eff0:	ad400404 	addi	r21,r21,16
    eff4:	003fa906 	br	ee9c <_realloc_r+0x36c>
    eff8:	a9000417 	ldw	r4,16(r21)
    effc:	90800604 	addi	r2,r18,24
    f000:	a8c00604 	addi	r3,r21,24
    f004:	91000415 	stw	r4,16(r18)
    f008:	a9000517 	ldw	r4,20(r21)
    f00c:	91000515 	stw	r4,20(r18)
    f010:	003f0406 	br	ec24 <_realloc_r+0xf4>
    f014:	a8c00417 	ldw	r3,16(r21)
    f018:	ad400604 	addi	r21,r21,24
    f01c:	b0800804 	addi	r2,r22,32
    f020:	b0c00615 	stw	r3,24(r22)
    f024:	a8ffff17 	ldw	r3,-4(r21)
    f028:	b0c00715 	stw	r3,28(r22)
    f02c:	003f9b06 	br	ee9c <_realloc_r+0x36c>
    f030:	9005883a 	mov	r2,r18
    f034:	003fc706 	br	ef54 <_realloc_r+0x424>
    f038:	a80b883a 	mov	r5,r21
    f03c:	9009883a 	mov	r4,r18
    f040:	000e9740 	call	e974 <memmove>
    f044:	003fc906 	br	ef6c <_realloc_r+0x43c>
    f048:	a8800217 	ldw	r2,8(r21)
    f04c:	b0800415 	stw	r2,16(r22)
    f050:	a8800317 	ldw	r2,12(r21)
    f054:	b0800515 	stw	r2,20(r22)
    f058:	31000726 	beq	r6,r4,f078 <_realloc_r+0x548>
    f05c:	b0800604 	addi	r2,r22,24
    f060:	ad400404 	addi	r21,r21,16
    f064:	003fbb06 	br	ef54 <_realloc_r+0x424>
    f068:	a009883a 	mov	r4,r20
    f06c:	00132200 	call	13220 <__malloc_unlock>
    f070:	0005883a 	mov	r2,zero
    f074:	003f0a06 	br	eca0 <_realloc_r+0x170>
    f078:	a8c00417 	ldw	r3,16(r21)
    f07c:	ad400604 	addi	r21,r21,24
    f080:	b0800804 	addi	r2,r22,32
    f084:	b0c00615 	stw	r3,24(r22)
    f088:	a8ffff17 	ldw	r3,-4(r21)
    f08c:	b0c00715 	stw	r3,28(r22)
    f090:	003fb006 	br	ef54 <_realloc_r+0x424>

0000f094 <__swbuf_r>:
    f094:	defffb04 	addi	sp,sp,-20
    f098:	dcc00315 	stw	r19,12(sp)
    f09c:	dc800215 	stw	r18,8(sp)
    f0a0:	dc000015 	stw	r16,0(sp)
    f0a4:	dfc00415 	stw	ra,16(sp)
    f0a8:	dc400115 	stw	r17,4(sp)
    f0ac:	2025883a 	mov	r18,r4
    f0b0:	2827883a 	mov	r19,r5
    f0b4:	3021883a 	mov	r16,r6
    f0b8:	20000226 	beq	r4,zero,f0c4 <__swbuf_r+0x30>
    f0bc:	20800e17 	ldw	r2,56(r4)
    f0c0:	10004226 	beq	r2,zero,f1cc <__swbuf_r+0x138>
    f0c4:	80800617 	ldw	r2,24(r16)
    f0c8:	8100030b 	ldhu	r4,12(r16)
    f0cc:	80800215 	stw	r2,8(r16)
    f0d0:	2080020c 	andi	r2,r4,8
    f0d4:	10003626 	beq	r2,zero,f1b0 <__swbuf_r+0x11c>
    f0d8:	80c00417 	ldw	r3,16(r16)
    f0dc:	18003426 	beq	r3,zero,f1b0 <__swbuf_r+0x11c>
    f0e0:	2088000c 	andi	r2,r4,8192
    f0e4:	9c403fcc 	andi	r17,r19,255
    f0e8:	10001a26 	beq	r2,zero,f154 <__swbuf_r+0xc0>
    f0ec:	80800017 	ldw	r2,0(r16)
    f0f0:	81000517 	ldw	r4,20(r16)
    f0f4:	10c7c83a 	sub	r3,r2,r3
    f0f8:	1900200e 	bge	r3,r4,f17c <__swbuf_r+0xe8>
    f0fc:	18c00044 	addi	r3,r3,1
    f100:	81000217 	ldw	r4,8(r16)
    f104:	11400044 	addi	r5,r2,1
    f108:	81400015 	stw	r5,0(r16)
    f10c:	213fffc4 	addi	r4,r4,-1
    f110:	81000215 	stw	r4,8(r16)
    f114:	14c00005 	stb	r19,0(r2)
    f118:	80800517 	ldw	r2,20(r16)
    f11c:	10c01e26 	beq	r2,r3,f198 <__swbuf_r+0x104>
    f120:	8080030b 	ldhu	r2,12(r16)
    f124:	1080004c 	andi	r2,r2,1
    f128:	10000226 	beq	r2,zero,f134 <__swbuf_r+0xa0>
    f12c:	00800284 	movi	r2,10
    f130:	88801926 	beq	r17,r2,f198 <__swbuf_r+0x104>
    f134:	8805883a 	mov	r2,r17
    f138:	dfc00417 	ldw	ra,16(sp)
    f13c:	dcc00317 	ldw	r19,12(sp)
    f140:	dc800217 	ldw	r18,8(sp)
    f144:	dc400117 	ldw	r17,4(sp)
    f148:	dc000017 	ldw	r16,0(sp)
    f14c:	dec00504 	addi	sp,sp,20
    f150:	f800283a 	ret
    f154:	81401917 	ldw	r5,100(r16)
    f158:	00b7ffc4 	movi	r2,-8193
    f15c:	21080014 	ori	r4,r4,8192
    f160:	2884703a 	and	r2,r5,r2
    f164:	80801915 	stw	r2,100(r16)
    f168:	80800017 	ldw	r2,0(r16)
    f16c:	8100030d 	sth	r4,12(r16)
    f170:	81000517 	ldw	r4,20(r16)
    f174:	10c7c83a 	sub	r3,r2,r3
    f178:	193fe016 	blt	r3,r4,f0fc <__swbuf_r+0x68>
    f17c:	800b883a 	mov	r5,r16
    f180:	9009883a 	mov	r4,r18
    f184:	000897c0 	call	897c <_fflush_r>
    f188:	1000071e 	bne	r2,zero,f1a8 <__swbuf_r+0x114>
    f18c:	80800017 	ldw	r2,0(r16)
    f190:	00c00044 	movi	r3,1
    f194:	003fda06 	br	f100 <__swbuf_r+0x6c>
    f198:	800b883a 	mov	r5,r16
    f19c:	9009883a 	mov	r4,r18
    f1a0:	000897c0 	call	897c <_fflush_r>
    f1a4:	103fe326 	beq	r2,zero,f134 <__swbuf_r+0xa0>
    f1a8:	00bfffc4 	movi	r2,-1
    f1ac:	003fe206 	br	f138 <__swbuf_r+0xa4>
    f1b0:	800b883a 	mov	r5,r16
    f1b4:	9009883a 	mov	r4,r18
    f1b8:	0006d840 	call	6d84 <__swsetup_r>
    f1bc:	103ffa1e 	bne	r2,zero,f1a8 <__swbuf_r+0x114>
    f1c0:	8100030b 	ldhu	r4,12(r16)
    f1c4:	80c00417 	ldw	r3,16(r16)
    f1c8:	003fc506 	br	f0e0 <__swbuf_r+0x4c>
    f1cc:	0008d580 	call	8d58 <__sinit>
    f1d0:	003fbc06 	br	f0c4 <__swbuf_r+0x30>

0000f1d4 <__swbuf>:
    f1d4:	008000b4 	movhi	r2,2
    f1d8:	10863e04 	addi	r2,r2,6392
    f1dc:	280d883a 	mov	r6,r5
    f1e0:	200b883a 	mov	r5,r4
    f1e4:	11000017 	ldw	r4,0(r2)
    f1e8:	000f0941 	jmpi	f094 <__swbuf_r>

0000f1ec <_wcrtomb_r>:
    f1ec:	defff604 	addi	sp,sp,-40
    f1f0:	008000b4 	movhi	r2,2
    f1f4:	dc800815 	stw	r18,32(sp)
    f1f8:	dc400715 	stw	r17,28(sp)
    f1fc:	dc000615 	stw	r16,24(sp)
    f200:	10864204 	addi	r2,r2,6408
    f204:	dfc00915 	stw	ra,36(sp)
    f208:	2021883a 	mov	r16,r4
    f20c:	3823883a 	mov	r17,r7
    f210:	14800017 	ldw	r18,0(r2)
    f214:	28001426 	beq	r5,zero,f268 <_wcrtomb_r+0x7c>
    f218:	d9400415 	stw	r5,16(sp)
    f21c:	d9800515 	stw	r6,20(sp)
    f220:	00093e00 	call	93e0 <__locale_charset>
    f224:	d9800517 	ldw	r6,20(sp)
    f228:	d9400417 	ldw	r5,16(sp)
    f22c:	100f883a 	mov	r7,r2
    f230:	dc400015 	stw	r17,0(sp)
    f234:	8009883a 	mov	r4,r16
    f238:	903ee83a 	callr	r18
    f23c:	00ffffc4 	movi	r3,-1
    f240:	10c0031e 	bne	r2,r3,f250 <_wcrtomb_r+0x64>
    f244:	88000015 	stw	zero,0(r17)
    f248:	00c02284 	movi	r3,138
    f24c:	80c00015 	stw	r3,0(r16)
    f250:	dfc00917 	ldw	ra,36(sp)
    f254:	dc800817 	ldw	r18,32(sp)
    f258:	dc400717 	ldw	r17,28(sp)
    f25c:	dc000617 	ldw	r16,24(sp)
    f260:	dec00a04 	addi	sp,sp,40
    f264:	f800283a 	ret
    f268:	00093e00 	call	93e0 <__locale_charset>
    f26c:	100f883a 	mov	r7,r2
    f270:	dc400015 	stw	r17,0(sp)
    f274:	000d883a 	mov	r6,zero
    f278:	d9400104 	addi	r5,sp,4
    f27c:	8009883a 	mov	r4,r16
    f280:	903ee83a 	callr	r18
    f284:	003fed06 	br	f23c <_wcrtomb_r+0x50>

0000f288 <wcrtomb>:
    f288:	defff604 	addi	sp,sp,-40
    f28c:	008000b4 	movhi	r2,2
    f290:	dc800615 	stw	r18,24(sp)
    f294:	dc400515 	stw	r17,20(sp)
    f298:	10863e04 	addi	r2,r2,6392
    f29c:	dfc00915 	stw	ra,36(sp)
    f2a0:	dd000815 	stw	r20,32(sp)
    f2a4:	dcc00715 	stw	r19,28(sp)
    f2a8:	dc000415 	stw	r16,16(sp)
    f2ac:	3025883a 	mov	r18,r6
    f2b0:	14400017 	ldw	r17,0(r2)
    f2b4:	20001926 	beq	r4,zero,f31c <wcrtomb+0x94>
    f2b8:	008000b4 	movhi	r2,2
    f2bc:	10864204 	addi	r2,r2,6408
    f2c0:	15000017 	ldw	r20,0(r2)
    f2c4:	2021883a 	mov	r16,r4
    f2c8:	2827883a 	mov	r19,r5
    f2cc:	00093e00 	call	93e0 <__locale_charset>
    f2d0:	100f883a 	mov	r7,r2
    f2d4:	dc800015 	stw	r18,0(sp)
    f2d8:	980d883a 	mov	r6,r19
    f2dc:	800b883a 	mov	r5,r16
    f2e0:	8809883a 	mov	r4,r17
    f2e4:	a03ee83a 	callr	r20
    f2e8:	00ffffc4 	movi	r3,-1
    f2ec:	10c0031e 	bne	r2,r3,f2fc <wcrtomb+0x74>
    f2f0:	90000015 	stw	zero,0(r18)
    f2f4:	00c02284 	movi	r3,138
    f2f8:	88c00015 	stw	r3,0(r17)
    f2fc:	dfc00917 	ldw	ra,36(sp)
    f300:	dd000817 	ldw	r20,32(sp)
    f304:	dcc00717 	ldw	r19,28(sp)
    f308:	dc800617 	ldw	r18,24(sp)
    f30c:	dc400517 	ldw	r17,20(sp)
    f310:	dc000417 	ldw	r16,16(sp)
    f314:	dec00a04 	addi	sp,sp,40
    f318:	f800283a 	ret
    f31c:	008000b4 	movhi	r2,2
    f320:	10864204 	addi	r2,r2,6408
    f324:	14000017 	ldw	r16,0(r2)
    f328:	00093e00 	call	93e0 <__locale_charset>
    f32c:	100f883a 	mov	r7,r2
    f330:	dc800015 	stw	r18,0(sp)
    f334:	000d883a 	mov	r6,zero
    f338:	d9400104 	addi	r5,sp,4
    f33c:	8809883a 	mov	r4,r17
    f340:	803ee83a 	callr	r16
    f344:	003fe806 	br	f2e8 <wcrtomb+0x60>

0000f348 <__ascii_wctomb>:
    f348:	28000526 	beq	r5,zero,f360 <__ascii_wctomb+0x18>
    f34c:	00803fc4 	movi	r2,255
    f350:	11800536 	bltu	r2,r6,f368 <__ascii_wctomb+0x20>
    f354:	29800005 	stb	r6,0(r5)
    f358:	00800044 	movi	r2,1
    f35c:	f800283a 	ret
    f360:	0005883a 	mov	r2,zero
    f364:	f800283a 	ret
    f368:	00802284 	movi	r2,138
    f36c:	20800015 	stw	r2,0(r4)
    f370:	00bfffc4 	movi	r2,-1
    f374:	f800283a 	ret

0000f378 <_wctomb_r>:
    f378:	008000b4 	movhi	r2,2
    f37c:	defff904 	addi	sp,sp,-28
    f380:	10864204 	addi	r2,r2,6408
    f384:	dfc00615 	stw	ra,24(sp)
    f388:	dc400515 	stw	r17,20(sp)
    f38c:	dc000415 	stw	r16,16(sp)
    f390:	3823883a 	mov	r17,r7
    f394:	14000017 	ldw	r16,0(r2)
    f398:	d9000115 	stw	r4,4(sp)
    f39c:	d9400215 	stw	r5,8(sp)
    f3a0:	d9800315 	stw	r6,12(sp)
    f3a4:	00093e00 	call	93e0 <__locale_charset>
    f3a8:	d9800317 	ldw	r6,12(sp)
    f3ac:	d9400217 	ldw	r5,8(sp)
    f3b0:	d9000117 	ldw	r4,4(sp)
    f3b4:	100f883a 	mov	r7,r2
    f3b8:	dc400015 	stw	r17,0(sp)
    f3bc:	803ee83a 	callr	r16
    f3c0:	dfc00617 	ldw	ra,24(sp)
    f3c4:	dc400517 	ldw	r17,20(sp)
    f3c8:	dc000417 	ldw	r16,16(sp)
    f3cc:	dec00704 	addi	sp,sp,28
    f3d0:	f800283a 	ret

0000f3d4 <__udivdi3>:
    f3d4:	defff504 	addi	sp,sp,-44
    f3d8:	dcc00415 	stw	r19,16(sp)
    f3dc:	dc000115 	stw	r16,4(sp)
    f3e0:	dfc00a15 	stw	ra,40(sp)
    f3e4:	df000915 	stw	fp,36(sp)
    f3e8:	ddc00815 	stw	r23,32(sp)
    f3ec:	dd800715 	stw	r22,28(sp)
    f3f0:	dd400615 	stw	r21,24(sp)
    f3f4:	dd000515 	stw	r20,20(sp)
    f3f8:	dc800315 	stw	r18,12(sp)
    f3fc:	dc400215 	stw	r17,8(sp)
    f400:	2027883a 	mov	r19,r4
    f404:	2821883a 	mov	r16,r5
    f408:	3800411e 	bne	r7,zero,f510 <__udivdi3+0x13c>
    f40c:	3023883a 	mov	r17,r6
    f410:	2025883a 	mov	r18,r4
    f414:	2980522e 	bgeu	r5,r6,f560 <__udivdi3+0x18c>
    f418:	00bfffd4 	movui	r2,65535
    f41c:	282d883a 	mov	r22,r5
    f420:	1180a836 	bltu	r2,r6,f6c4 <__udivdi3+0x2f0>
    f424:	00803fc4 	movi	r2,255
    f428:	1185803a 	cmpltu	r2,r2,r6
    f42c:	100490fa 	slli	r2,r2,3
    f430:	3086d83a 	srl	r3,r6,r2
    f434:	010000b4 	movhi	r4,2
    f438:	213dd204 	addi	r4,r4,-2232
    f43c:	20c7883a 	add	r3,r4,r3
    f440:	18c00003 	ldbu	r3,0(r3)
    f444:	1885883a 	add	r2,r3,r2
    f448:	00c00804 	movi	r3,32
    f44c:	1887c83a 	sub	r3,r3,r2
    f450:	18000526 	beq	r3,zero,f468 <__udivdi3+0x94>
    f454:	80e0983a 	sll	r16,r16,r3
    f458:	9884d83a 	srl	r2,r19,r2
    f45c:	30e2983a 	sll	r17,r6,r3
    f460:	98e4983a 	sll	r18,r19,r3
    f464:	142cb03a 	or	r22,r2,r16
    f468:	882ad43a 	srli	r21,r17,16
    f46c:	b009883a 	mov	r4,r22
    f470:	8d3fffcc 	andi	r20,r17,65535
    f474:	a80b883a 	mov	r5,r21
    f478:	000ffe00 	call	ffe0 <__umodsi3>
    f47c:	b009883a 	mov	r4,r22
    f480:	a80b883a 	mov	r5,r21
    f484:	1027883a 	mov	r19,r2
    f488:	000ff7c0 	call	ff7c <__udivsi3>
    f48c:	102d883a 	mov	r22,r2
    f490:	9826943a 	slli	r19,r19,16
    f494:	9004d43a 	srli	r2,r18,16
    f498:	a5a1383a 	mul	r16,r20,r22
    f49c:	14c4b03a 	or	r2,r2,r19
    f4a0:	1400052e 	bgeu	r2,r16,f4b8 <__udivdi3+0xe4>
    f4a4:	1445883a 	add	r2,r2,r17
    f4a8:	b0ffffc4 	addi	r3,r22,-1
    f4ac:	14400136 	bltu	r2,r17,f4b4 <__udivdi3+0xe0>
    f4b0:	14012336 	bltu	r2,r16,f940 <__udivdi3+0x56c>
    f4b4:	182d883a 	mov	r22,r3
    f4b8:	1421c83a 	sub	r16,r2,r16
    f4bc:	a80b883a 	mov	r5,r21
    f4c0:	8009883a 	mov	r4,r16
    f4c4:	000ffe00 	call	ffe0 <__umodsi3>
    f4c8:	1027883a 	mov	r19,r2
    f4cc:	a80b883a 	mov	r5,r21
    f4d0:	8009883a 	mov	r4,r16
    f4d4:	000ff7c0 	call	ff7c <__udivsi3>
    f4d8:	9826943a 	slli	r19,r19,16
    f4dc:	a0a9383a 	mul	r20,r20,r2
    f4e0:	94bfffcc 	andi	r18,r18,65535
    f4e4:	94e4b03a 	or	r18,r18,r19
    f4e8:	9500052e 	bgeu	r18,r20,f500 <__udivdi3+0x12c>
    f4ec:	8ca5883a 	add	r18,r17,r18
    f4f0:	10ffffc4 	addi	r3,r2,-1
    f4f4:	9440f136 	bltu	r18,r17,f8bc <__udivdi3+0x4e8>
    f4f8:	9500f02e 	bgeu	r18,r20,f8bc <__udivdi3+0x4e8>
    f4fc:	10bfff84 	addi	r2,r2,-2
    f500:	b00c943a 	slli	r6,r22,16
    f504:	0007883a 	mov	r3,zero
    f508:	3084b03a 	or	r2,r6,r2
    f50c:	00005906 	br	f674 <__udivdi3+0x2a0>
    f510:	29c05636 	bltu	r5,r7,f66c <__udivdi3+0x298>
    f514:	00bfffd4 	movui	r2,65535
    f518:	11c0622e 	bgeu	r2,r7,f6a4 <__udivdi3+0x2d0>
    f51c:	00804034 	movhi	r2,256
    f520:	10bfffc4 	addi	r2,r2,-1
    f524:	11c0ee36 	bltu	r2,r7,f8e0 <__udivdi3+0x50c>
    f528:	00800404 	movi	r2,16
    f52c:	3886d83a 	srl	r3,r7,r2
    f530:	010000b4 	movhi	r4,2
    f534:	213dd204 	addi	r4,r4,-2232
    f538:	20c7883a 	add	r3,r4,r3
    f53c:	18c00003 	ldbu	r3,0(r3)
    f540:	05400804 	movi	r21,32
    f544:	1885883a 	add	r2,r3,r2
    f548:	a8abc83a 	sub	r21,r21,r2
    f54c:	a800621e 	bne	r21,zero,f6d8 <__udivdi3+0x304>
    f550:	3c00e936 	bltu	r7,r16,f8f8 <__udivdi3+0x524>
    f554:	9985403a 	cmpgeu	r2,r19,r6
    f558:	0007883a 	mov	r3,zero
    f55c:	00004506 	br	f674 <__udivdi3+0x2a0>
    f560:	3000041e 	bne	r6,zero,f574 <__udivdi3+0x1a0>
    f564:	000b883a 	mov	r5,zero
    f568:	01000044 	movi	r4,1
    f56c:	000ff7c0 	call	ff7c <__udivsi3>
    f570:	1023883a 	mov	r17,r2
    f574:	00bfffd4 	movui	r2,65535
    f578:	14404e2e 	bgeu	r2,r17,f6b4 <__udivdi3+0x2e0>
    f57c:	00804034 	movhi	r2,256
    f580:	10bfffc4 	addi	r2,r2,-1
    f584:	1440d836 	bltu	r2,r17,f8e8 <__udivdi3+0x514>
    f588:	00800404 	movi	r2,16
    f58c:	8886d83a 	srl	r3,r17,r2
    f590:	010000b4 	movhi	r4,2
    f594:	213dd204 	addi	r4,r4,-2232
    f598:	20c7883a 	add	r3,r4,r3
    f59c:	18c00003 	ldbu	r3,0(r3)
    f5a0:	1885883a 	add	r2,r3,r2
    f5a4:	00c00804 	movi	r3,32
    f5a8:	1887c83a 	sub	r3,r3,r2
    f5ac:	18008f1e 	bne	r3,zero,f7ec <__udivdi3+0x418>
    f5b0:	882ad43a 	srli	r21,r17,16
    f5b4:	8461c83a 	sub	r16,r16,r17
    f5b8:	8d3fffcc 	andi	r20,r17,65535
    f5bc:	00c00044 	movi	r3,1
    f5c0:	8009883a 	mov	r4,r16
    f5c4:	a80b883a 	mov	r5,r21
    f5c8:	d8c00015 	stw	r3,0(sp)
    f5cc:	000ffe00 	call	ffe0 <__umodsi3>
    f5d0:	8009883a 	mov	r4,r16
    f5d4:	a80b883a 	mov	r5,r21
    f5d8:	1027883a 	mov	r19,r2
    f5dc:	000ff7c0 	call	ff7c <__udivsi3>
    f5e0:	9826943a 	slli	r19,r19,16
    f5e4:	9008d43a 	srli	r4,r18,16
    f5e8:	1521383a 	mul	r16,r2,r20
    f5ec:	102d883a 	mov	r22,r2
    f5f0:	24c8b03a 	or	r4,r4,r19
    f5f4:	d8c00017 	ldw	r3,0(sp)
    f5f8:	2400052e 	bgeu	r4,r16,f610 <__udivdi3+0x23c>
    f5fc:	2449883a 	add	r4,r4,r17
    f600:	b0bfffc4 	addi	r2,r22,-1
    f604:	24400136 	bltu	r4,r17,f60c <__udivdi3+0x238>
    f608:	2400ca36 	bltu	r4,r16,f934 <__udivdi3+0x560>
    f60c:	102d883a 	mov	r22,r2
    f610:	2421c83a 	sub	r16,r4,r16
    f614:	a80b883a 	mov	r5,r21
    f618:	8009883a 	mov	r4,r16
    f61c:	d8c00015 	stw	r3,0(sp)
    f620:	000ffe00 	call	ffe0 <__umodsi3>
    f624:	1027883a 	mov	r19,r2
    f628:	a80b883a 	mov	r5,r21
    f62c:	8009883a 	mov	r4,r16
    f630:	000ff7c0 	call	ff7c <__udivsi3>
    f634:	9826943a 	slli	r19,r19,16
    f638:	1529383a 	mul	r20,r2,r20
    f63c:	94bfffcc 	andi	r18,r18,65535
    f640:	94e4b03a 	or	r18,r18,r19
    f644:	d8c00017 	ldw	r3,0(sp)
    f648:	9500052e 	bgeu	r18,r20,f660 <__udivdi3+0x28c>
    f64c:	8ca5883a 	add	r18,r17,r18
    f650:	113fffc4 	addi	r4,r2,-1
    f654:	94409736 	bltu	r18,r17,f8b4 <__udivdi3+0x4e0>
    f658:	9500962e 	bgeu	r18,r20,f8b4 <__udivdi3+0x4e0>
    f65c:	10bfff84 	addi	r2,r2,-2
    f660:	b00c943a 	slli	r6,r22,16
    f664:	3084b03a 	or	r2,r6,r2
    f668:	00000206 	br	f674 <__udivdi3+0x2a0>
    f66c:	0007883a 	mov	r3,zero
    f670:	0005883a 	mov	r2,zero
    f674:	dfc00a17 	ldw	ra,40(sp)
    f678:	df000917 	ldw	fp,36(sp)
    f67c:	ddc00817 	ldw	r23,32(sp)
    f680:	dd800717 	ldw	r22,28(sp)
    f684:	dd400617 	ldw	r21,24(sp)
    f688:	dd000517 	ldw	r20,20(sp)
    f68c:	dcc00417 	ldw	r19,16(sp)
    f690:	dc800317 	ldw	r18,12(sp)
    f694:	dc400217 	ldw	r17,8(sp)
    f698:	dc000117 	ldw	r16,4(sp)
    f69c:	dec00b04 	addi	sp,sp,44
    f6a0:	f800283a 	ret
    f6a4:	00803fc4 	movi	r2,255
    f6a8:	11c5803a 	cmpltu	r2,r2,r7
    f6ac:	100490fa 	slli	r2,r2,3
    f6b0:	003f9e06 	br	f52c <__udivdi3+0x158>
    f6b4:	00803fc4 	movi	r2,255
    f6b8:	1445803a 	cmpltu	r2,r2,r17
    f6bc:	100490fa 	slli	r2,r2,3
    f6c0:	003fb206 	br	f58c <__udivdi3+0x1b8>
    f6c4:	00804034 	movhi	r2,256
    f6c8:	10bfffc4 	addi	r2,r2,-1
    f6cc:	11808836 	bltu	r2,r6,f8f0 <__udivdi3+0x51c>
    f6d0:	00800404 	movi	r2,16
    f6d4:	003f5606 	br	f430 <__udivdi3+0x5c>
    f6d8:	30aed83a 	srl	r23,r6,r2
    f6dc:	3d4e983a 	sll	r7,r7,r21
    f6e0:	80acd83a 	srl	r22,r16,r2
    f6e4:	9884d83a 	srl	r2,r19,r2
    f6e8:	3deeb03a 	or	r23,r7,r23
    f6ec:	b824d43a 	srli	r18,r23,16
    f6f0:	8560983a 	sll	r16,r16,r21
    f6f4:	b009883a 	mov	r4,r22
    f6f8:	900b883a 	mov	r5,r18
    f6fc:	3568983a 	sll	r20,r6,r21
    f700:	1420b03a 	or	r16,r2,r16
    f704:	000ffe00 	call	ffe0 <__umodsi3>
    f708:	b009883a 	mov	r4,r22
    f70c:	900b883a 	mov	r5,r18
    f710:	1023883a 	mov	r17,r2
    f714:	000ff7c0 	call	ff7c <__udivsi3>
    f718:	8808943a 	slli	r4,r17,16
    f71c:	bf3fffcc 	andi	fp,r23,65535
    f720:	8006d43a 	srli	r3,r16,16
    f724:	e0a3383a 	mul	r17,fp,r2
    f728:	100d883a 	mov	r6,r2
    f72c:	1906b03a 	or	r3,r3,r4
    f730:	1c40042e 	bgeu	r3,r17,f744 <__udivdi3+0x370>
    f734:	1dc7883a 	add	r3,r3,r23
    f738:	10bfffc4 	addi	r2,r2,-1
    f73c:	1dc0752e 	bgeu	r3,r23,f914 <__udivdi3+0x540>
    f740:	100d883a 	mov	r6,r2
    f744:	1c63c83a 	sub	r17,r3,r17
    f748:	900b883a 	mov	r5,r18
    f74c:	8809883a 	mov	r4,r17
    f750:	d9800015 	stw	r6,0(sp)
    f754:	000ffe00 	call	ffe0 <__umodsi3>
    f758:	102d883a 	mov	r22,r2
    f75c:	8809883a 	mov	r4,r17
    f760:	900b883a 	mov	r5,r18
    f764:	000ff7c0 	call	ff7c <__udivsi3>
    f768:	b02c943a 	slli	r22,r22,16
    f76c:	e089383a 	mul	r4,fp,r2
    f770:	843fffcc 	andi	r16,r16,65535
    f774:	85a0b03a 	or	r16,r16,r22
    f778:	d9800017 	ldw	r6,0(sp)
    f77c:	8100042e 	bgeu	r16,r4,f790 <__udivdi3+0x3bc>
    f780:	85e1883a 	add	r16,r16,r23
    f784:	10ffffc4 	addi	r3,r2,-1
    f788:	85c05e2e 	bgeu	r16,r23,f904 <__udivdi3+0x530>
    f78c:	1805883a 	mov	r2,r3
    f790:	300c943a 	slli	r6,r6,16
    f794:	a17fffcc 	andi	r5,r20,65535
    f798:	a028d43a 	srli	r20,r20,16
    f79c:	3084b03a 	or	r2,r6,r2
    f7a0:	10ffffcc 	andi	r3,r2,65535
    f7a4:	100cd43a 	srli	r6,r2,16
    f7a8:	194f383a 	mul	r7,r3,r5
    f7ac:	1d07383a 	mul	r3,r3,r20
    f7b0:	314b383a 	mul	r5,r6,r5
    f7b4:	3810d43a 	srli	r8,r7,16
    f7b8:	8121c83a 	sub	r16,r16,r4
    f7bc:	1947883a 	add	r3,r3,r5
    f7c0:	40c7883a 	add	r3,r8,r3
    f7c4:	350d383a 	mul	r6,r6,r20
    f7c8:	1940022e 	bgeu	r3,r5,f7d4 <__udivdi3+0x400>
    f7cc:	01000074 	movhi	r4,1
    f7d0:	310d883a 	add	r6,r6,r4
    f7d4:	1828d43a 	srli	r20,r3,16
    f7d8:	a18d883a 	add	r6,r20,r6
    f7dc:	81803e36 	bltu	r16,r6,f8d8 <__udivdi3+0x504>
    f7e0:	81803826 	beq	r16,r6,f8c4 <__udivdi3+0x4f0>
    f7e4:	0007883a 	mov	r3,zero
    f7e8:	003fa206 	br	f674 <__udivdi3+0x2a0>
    f7ec:	88e2983a 	sll	r17,r17,r3
    f7f0:	80a8d83a 	srl	r20,r16,r2
    f7f4:	80e0983a 	sll	r16,r16,r3
    f7f8:	882ad43a 	srli	r21,r17,16
    f7fc:	9884d83a 	srl	r2,r19,r2
    f800:	a009883a 	mov	r4,r20
    f804:	a80b883a 	mov	r5,r21
    f808:	142eb03a 	or	r23,r2,r16
    f80c:	98e4983a 	sll	r18,r19,r3
    f810:	000ffe00 	call	ffe0 <__umodsi3>
    f814:	a009883a 	mov	r4,r20
    f818:	a80b883a 	mov	r5,r21
    f81c:	1021883a 	mov	r16,r2
    f820:	000ff7c0 	call	ff7c <__udivsi3>
    f824:	1039883a 	mov	fp,r2
    f828:	8d3fffcc 	andi	r20,r17,65535
    f82c:	8020943a 	slli	r16,r16,16
    f830:	b804d43a 	srli	r2,r23,16
    f834:	a72d383a 	mul	r22,r20,fp
    f838:	1404b03a 	or	r2,r2,r16
    f83c:	1580062e 	bgeu	r2,r22,f858 <__udivdi3+0x484>
    f840:	1445883a 	add	r2,r2,r17
    f844:	e0ffffc4 	addi	r3,fp,-1
    f848:	14403836 	bltu	r2,r17,f92c <__udivdi3+0x558>
    f84c:	1580372e 	bgeu	r2,r22,f92c <__udivdi3+0x558>
    f850:	e73fff84 	addi	fp,fp,-2
    f854:	1445883a 	add	r2,r2,r17
    f858:	15adc83a 	sub	r22,r2,r22
    f85c:	a80b883a 	mov	r5,r21
    f860:	b009883a 	mov	r4,r22
    f864:	000ffe00 	call	ffe0 <__umodsi3>
    f868:	1027883a 	mov	r19,r2
    f86c:	b009883a 	mov	r4,r22
    f870:	a80b883a 	mov	r5,r21
    f874:	000ff7c0 	call	ff7c <__udivsi3>
    f878:	9826943a 	slli	r19,r19,16
    f87c:	a0a1383a 	mul	r16,r20,r2
    f880:	b93fffcc 	andi	r4,r23,65535
    f884:	24c8b03a 	or	r4,r4,r19
    f888:	2400062e 	bgeu	r4,r16,f8a4 <__udivdi3+0x4d0>
    f88c:	2449883a 	add	r4,r4,r17
    f890:	10ffffc4 	addi	r3,r2,-1
    f894:	24402336 	bltu	r4,r17,f924 <__udivdi3+0x550>
    f898:	2400222e 	bgeu	r4,r16,f924 <__udivdi3+0x550>
    f89c:	10bfff84 	addi	r2,r2,-2
    f8a0:	2449883a 	add	r4,r4,r17
    f8a4:	e038943a 	slli	fp,fp,16
    f8a8:	2421c83a 	sub	r16,r4,r16
    f8ac:	e086b03a 	or	r3,fp,r2
    f8b0:	003f4306 	br	f5c0 <__udivdi3+0x1ec>
    f8b4:	2005883a 	mov	r2,r4
    f8b8:	003f6906 	br	f660 <__udivdi3+0x28c>
    f8bc:	1805883a 	mov	r2,r3
    f8c0:	003f0f06 	br	f500 <__udivdi3+0x12c>
    f8c4:	1806943a 	slli	r3,r3,16
    f8c8:	9d66983a 	sll	r19,r19,r21
    f8cc:	39ffffcc 	andi	r7,r7,65535
    f8d0:	19c7883a 	add	r3,r3,r7
    f8d4:	98ffc32e 	bgeu	r19,r3,f7e4 <__udivdi3+0x410>
    f8d8:	10bfffc4 	addi	r2,r2,-1
    f8dc:	003fc106 	br	f7e4 <__udivdi3+0x410>
    f8e0:	00800604 	movi	r2,24
    f8e4:	003f1106 	br	f52c <__udivdi3+0x158>
    f8e8:	00800604 	movi	r2,24
    f8ec:	003f2706 	br	f58c <__udivdi3+0x1b8>
    f8f0:	00800604 	movi	r2,24
    f8f4:	003ece06 	br	f430 <__udivdi3+0x5c>
    f8f8:	0007883a 	mov	r3,zero
    f8fc:	00800044 	movi	r2,1
    f900:	003f5c06 	br	f674 <__udivdi3+0x2a0>
    f904:	813fa12e 	bgeu	r16,r4,f78c <__udivdi3+0x3b8>
    f908:	10bfff84 	addi	r2,r2,-2
    f90c:	85e1883a 	add	r16,r16,r23
    f910:	003f9f06 	br	f790 <__udivdi3+0x3bc>
    f914:	1c7f8a2e 	bgeu	r3,r17,f740 <__udivdi3+0x36c>
    f918:	31bfff84 	addi	r6,r6,-2
    f91c:	1dc7883a 	add	r3,r3,r23
    f920:	003f8806 	br	f744 <__udivdi3+0x370>
    f924:	1805883a 	mov	r2,r3
    f928:	003fde06 	br	f8a4 <__udivdi3+0x4d0>
    f92c:	1839883a 	mov	fp,r3
    f930:	003fc906 	br	f858 <__udivdi3+0x484>
    f934:	b5bfff84 	addi	r22,r22,-2
    f938:	2449883a 	add	r4,r4,r17
    f93c:	003f3406 	br	f610 <__udivdi3+0x23c>
    f940:	b5bfff84 	addi	r22,r22,-2
    f944:	1445883a 	add	r2,r2,r17
    f948:	003edb06 	br	f4b8 <__udivdi3+0xe4>

0000f94c <__umoddi3>:
    f94c:	defff404 	addi	sp,sp,-48
    f950:	df000a15 	stw	fp,40(sp)
    f954:	dc400315 	stw	r17,12(sp)
    f958:	dc000215 	stw	r16,8(sp)
    f95c:	dfc00b15 	stw	ra,44(sp)
    f960:	ddc00915 	stw	r23,36(sp)
    f964:	dd800815 	stw	r22,32(sp)
    f968:	dd400715 	stw	r21,28(sp)
    f96c:	dd000615 	stw	r20,24(sp)
    f970:	dcc00515 	stw	r19,20(sp)
    f974:	dc800415 	stw	r18,16(sp)
    f978:	2021883a 	mov	r16,r4
    f97c:	2823883a 	mov	r17,r5
    f980:	2839883a 	mov	fp,r5
    f984:	38003c1e 	bne	r7,zero,fa78 <__umoddi3+0x12c>
    f988:	3027883a 	mov	r19,r6
    f98c:	2029883a 	mov	r20,r4
    f990:	2980512e 	bgeu	r5,r6,fad8 <__umoddi3+0x18c>
    f994:	00bfffd4 	movui	r2,65535
    f998:	11809a36 	bltu	r2,r6,fc04 <__umoddi3+0x2b8>
    f99c:	01003fc4 	movi	r4,255
    f9a0:	2189803a 	cmpltu	r4,r4,r6
    f9a4:	200890fa 	slli	r4,r4,3
    f9a8:	3104d83a 	srl	r2,r6,r4
    f9ac:	00c000b4 	movhi	r3,2
    f9b0:	18fdd204 	addi	r3,r3,-2232
    f9b4:	1885883a 	add	r2,r3,r2
    f9b8:	10c00003 	ldbu	r3,0(r2)
    f9bc:	00800804 	movi	r2,32
    f9c0:	1909883a 	add	r4,r3,r4
    f9c4:	1125c83a 	sub	r18,r2,r4
    f9c8:	90000526 	beq	r18,zero,f9e0 <__umoddi3+0x94>
    f9cc:	8ca2983a 	sll	r17,r17,r18
    f9d0:	8108d83a 	srl	r4,r16,r4
    f9d4:	34a6983a 	sll	r19,r6,r18
    f9d8:	84a8983a 	sll	r20,r16,r18
    f9dc:	2478b03a 	or	fp,r4,r17
    f9e0:	982ed43a 	srli	r23,r19,16
    f9e4:	e009883a 	mov	r4,fp
    f9e8:	9dbfffcc 	andi	r22,r19,65535
    f9ec:	b80b883a 	mov	r5,r23
    f9f0:	000ffe00 	call	ffe0 <__umodsi3>
    f9f4:	e009883a 	mov	r4,fp
    f9f8:	b80b883a 	mov	r5,r23
    f9fc:	102b883a 	mov	r21,r2
    fa00:	000ff7c0 	call	ff7c <__udivsi3>
    fa04:	a806943a 	slli	r3,r21,16
    fa08:	a008d43a 	srli	r4,r20,16
    fa0c:	b085383a 	mul	r2,r22,r2
    fa10:	20c8b03a 	or	r4,r4,r3
    fa14:	2080032e 	bgeu	r4,r2,fa24 <__umoddi3+0xd8>
    fa18:	24c9883a 	add	r4,r4,r19
    fa1c:	24c00136 	bltu	r4,r19,fa24 <__umoddi3+0xd8>
    fa20:	20811036 	bltu	r4,r2,fe64 <__umoddi3+0x518>
    fa24:	20abc83a 	sub	r21,r4,r2
    fa28:	b80b883a 	mov	r5,r23
    fa2c:	a809883a 	mov	r4,r21
    fa30:	000ffe00 	call	ffe0 <__umodsi3>
    fa34:	1023883a 	mov	r17,r2
    fa38:	b80b883a 	mov	r5,r23
    fa3c:	a809883a 	mov	r4,r21
    fa40:	000ff7c0 	call	ff7c <__udivsi3>
    fa44:	8822943a 	slli	r17,r17,16
    fa48:	b085383a 	mul	r2,r22,r2
    fa4c:	a0ffffcc 	andi	r3,r20,65535
    fa50:	1c46b03a 	or	r3,r3,r17
    fa54:	1880042e 	bgeu	r3,r2,fa68 <__umoddi3+0x11c>
    fa58:	1cc7883a 	add	r3,r3,r19
    fa5c:	1cc00236 	bltu	r3,r19,fa68 <__umoddi3+0x11c>
    fa60:	1880012e 	bgeu	r3,r2,fa68 <__umoddi3+0x11c>
    fa64:	1cc7883a 	add	r3,r3,r19
    fa68:	1885c83a 	sub	r2,r3,r2
    fa6c:	1484d83a 	srl	r2,r2,r18
    fa70:	0007883a 	mov	r3,zero
    fa74:	00004f06 	br	fbb4 <__umoddi3+0x268>
    fa78:	29c04c36 	bltu	r5,r7,fbac <__umoddi3+0x260>
    fa7c:	00bfffd4 	movui	r2,65535
    fa80:	11c0582e 	bgeu	r2,r7,fbe4 <__umoddi3+0x298>
    fa84:	00804034 	movhi	r2,256
    fa88:	10bfffc4 	addi	r2,r2,-1
    fa8c:	11c0e736 	bltu	r2,r7,fe2c <__umoddi3+0x4e0>
    fa90:	01000404 	movi	r4,16
    fa94:	3904d83a 	srl	r2,r7,r4
    fa98:	00c000b4 	movhi	r3,2
    fa9c:	18fdd204 	addi	r3,r3,-2232
    faa0:	1885883a 	add	r2,r3,r2
    faa4:	14c00003 	ldbu	r19,0(r2)
    faa8:	00c00804 	movi	r3,32
    faac:	9927883a 	add	r19,r19,r4
    fab0:	1ce9c83a 	sub	r20,r3,r19
    fab4:	a000581e 	bne	r20,zero,fc18 <__umoddi3+0x2cc>
    fab8:	3c400136 	bltu	r7,r17,fac0 <__umoddi3+0x174>
    fabc:	8180eb36 	bltu	r16,r6,fe6c <__umoddi3+0x520>
    fac0:	8185c83a 	sub	r2,r16,r6
    fac4:	89e3c83a 	sub	r17,r17,r7
    fac8:	8089803a 	cmpltu	r4,r16,r2
    facc:	8939c83a 	sub	fp,r17,r4
    fad0:	e007883a 	mov	r3,fp
    fad4:	00003706 	br	fbb4 <__umoddi3+0x268>
    fad8:	3000041e 	bne	r6,zero,faec <__umoddi3+0x1a0>
    fadc:	000b883a 	mov	r5,zero
    fae0:	01000044 	movi	r4,1
    fae4:	000ff7c0 	call	ff7c <__udivsi3>
    fae8:	1027883a 	mov	r19,r2
    faec:	00bfffd4 	movui	r2,65535
    faf0:	14c0402e 	bgeu	r2,r19,fbf4 <__umoddi3+0x2a8>
    faf4:	00804034 	movhi	r2,256
    faf8:	10bfffc4 	addi	r2,r2,-1
    fafc:	14c0cd36 	bltu	r2,r19,fe34 <__umoddi3+0x4e8>
    fb00:	00800404 	movi	r2,16
    fb04:	9886d83a 	srl	r3,r19,r2
    fb08:	010000b4 	movhi	r4,2
    fb0c:	213dd204 	addi	r4,r4,-2232
    fb10:	20c7883a 	add	r3,r4,r3
    fb14:	18c00003 	ldbu	r3,0(r3)
    fb18:	1887883a 	add	r3,r3,r2
    fb1c:	00800804 	movi	r2,32
    fb20:	10e5c83a 	sub	r18,r2,r3
    fb24:	9000901e 	bne	r18,zero,fd68 <__umoddi3+0x41c>
    fb28:	982cd43a 	srli	r22,r19,16
    fb2c:	8ce3c83a 	sub	r17,r17,r19
    fb30:	9d7fffcc 	andi	r21,r19,65535
    fb34:	b00b883a 	mov	r5,r22
    fb38:	8809883a 	mov	r4,r17
    fb3c:	000ffe00 	call	ffe0 <__umodsi3>
    fb40:	8809883a 	mov	r4,r17
    fb44:	b00b883a 	mov	r5,r22
    fb48:	1021883a 	mov	r16,r2
    fb4c:	000ff7c0 	call	ff7c <__udivsi3>
    fb50:	8006943a 	slli	r3,r16,16
    fb54:	a008d43a 	srli	r4,r20,16
    fb58:	1545383a 	mul	r2,r2,r21
    fb5c:	20c8b03a 	or	r4,r4,r3
    fb60:	2080042e 	bgeu	r4,r2,fb74 <__umoddi3+0x228>
    fb64:	24c9883a 	add	r4,r4,r19
    fb68:	24c00236 	bltu	r4,r19,fb74 <__umoddi3+0x228>
    fb6c:	2080012e 	bgeu	r4,r2,fb74 <__umoddi3+0x228>
    fb70:	24c9883a 	add	r4,r4,r19
    fb74:	20a1c83a 	sub	r16,r4,r2
    fb78:	b00b883a 	mov	r5,r22
    fb7c:	8009883a 	mov	r4,r16
    fb80:	000ffe00 	call	ffe0 <__umodsi3>
    fb84:	1023883a 	mov	r17,r2
    fb88:	b00b883a 	mov	r5,r22
    fb8c:	8009883a 	mov	r4,r16
    fb90:	000ff7c0 	call	ff7c <__udivsi3>
    fb94:	8822943a 	slli	r17,r17,16
    fb98:	1545383a 	mul	r2,r2,r21
    fb9c:	a53fffcc 	andi	r20,r20,65535
    fba0:	a446b03a 	or	r3,r20,r17
    fba4:	18bfb02e 	bgeu	r3,r2,fa68 <__umoddi3+0x11c>
    fba8:	003fab06 	br	fa58 <__umoddi3+0x10c>
    fbac:	2005883a 	mov	r2,r4
    fbb0:	2807883a 	mov	r3,r5
    fbb4:	dfc00b17 	ldw	ra,44(sp)
    fbb8:	df000a17 	ldw	fp,40(sp)
    fbbc:	ddc00917 	ldw	r23,36(sp)
    fbc0:	dd800817 	ldw	r22,32(sp)
    fbc4:	dd400717 	ldw	r21,28(sp)
    fbc8:	dd000617 	ldw	r20,24(sp)
    fbcc:	dcc00517 	ldw	r19,20(sp)
    fbd0:	dc800417 	ldw	r18,16(sp)
    fbd4:	dc400317 	ldw	r17,12(sp)
    fbd8:	dc000217 	ldw	r16,8(sp)
    fbdc:	dec00c04 	addi	sp,sp,48
    fbe0:	f800283a 	ret
    fbe4:	04c03fc4 	movi	r19,255
    fbe8:	99c9803a 	cmpltu	r4,r19,r7
    fbec:	200890fa 	slli	r4,r4,3
    fbf0:	003fa806 	br	fa94 <__umoddi3+0x148>
    fbf4:	00803fc4 	movi	r2,255
    fbf8:	14c5803a 	cmpltu	r2,r2,r19
    fbfc:	100490fa 	slli	r2,r2,3
    fc00:	003fc006 	br	fb04 <__umoddi3+0x1b8>
    fc04:	00804034 	movhi	r2,256
    fc08:	10bfffc4 	addi	r2,r2,-1
    fc0c:	11808b36 	bltu	r2,r6,fe3c <__umoddi3+0x4f0>
    fc10:	01000404 	movi	r4,16
    fc14:	003f6406 	br	f9a8 <__umoddi3+0x5c>
    fc18:	34c4d83a 	srl	r2,r6,r19
    fc1c:	3d0e983a 	sll	r7,r7,r20
    fc20:	8cf8d83a 	srl	fp,r17,r19
    fc24:	8d10983a 	sll	r8,r17,r20
    fc28:	38aab03a 	or	r21,r7,r2
    fc2c:	a82cd43a 	srli	r22,r21,16
    fc30:	84e2d83a 	srl	r17,r16,r19
    fc34:	e009883a 	mov	r4,fp
    fc38:	b00b883a 	mov	r5,r22
    fc3c:	8a22b03a 	or	r17,r17,r8
    fc40:	3524983a 	sll	r18,r6,r20
    fc44:	000ffe00 	call	ffe0 <__umodsi3>
    fc48:	e009883a 	mov	r4,fp
    fc4c:	b00b883a 	mov	r5,r22
    fc50:	102f883a 	mov	r23,r2
    fc54:	000ff7c0 	call	ff7c <__udivsi3>
    fc58:	100d883a 	mov	r6,r2
    fc5c:	b808943a 	slli	r4,r23,16
    fc60:	aa3fffcc 	andi	r8,r21,65535
    fc64:	8804d43a 	srli	r2,r17,16
    fc68:	41af383a 	mul	r23,r8,r6
    fc6c:	8520983a 	sll	r16,r16,r20
    fc70:	1104b03a 	or	r2,r2,r4
    fc74:	15c0042e 	bgeu	r2,r23,fc88 <__umoddi3+0x33c>
    fc78:	1545883a 	add	r2,r2,r21
    fc7c:	30ffffc4 	addi	r3,r6,-1
    fc80:	1540742e 	bgeu	r2,r21,fe54 <__umoddi3+0x508>
    fc84:	180d883a 	mov	r6,r3
    fc88:	15efc83a 	sub	r23,r2,r23
    fc8c:	b00b883a 	mov	r5,r22
    fc90:	b809883a 	mov	r4,r23
    fc94:	d9800115 	stw	r6,4(sp)
    fc98:	da000015 	stw	r8,0(sp)
    fc9c:	000ffe00 	call	ffe0 <__umodsi3>
    fca0:	b00b883a 	mov	r5,r22
    fca4:	b809883a 	mov	r4,r23
    fca8:	1039883a 	mov	fp,r2
    fcac:	000ff7c0 	call	ff7c <__udivsi3>
    fcb0:	da000017 	ldw	r8,0(sp)
    fcb4:	e038943a 	slli	fp,fp,16
    fcb8:	100b883a 	mov	r5,r2
    fcbc:	4089383a 	mul	r4,r8,r2
    fcc0:	8a3fffcc 	andi	r8,r17,65535
    fcc4:	4710b03a 	or	r8,r8,fp
    fcc8:	d9800117 	ldw	r6,4(sp)
    fccc:	4100042e 	bgeu	r8,r4,fce0 <__umoddi3+0x394>
    fcd0:	4551883a 	add	r8,r8,r21
    fcd4:	10bfffc4 	addi	r2,r2,-1
    fcd8:	45405a2e 	bgeu	r8,r21,fe44 <__umoddi3+0x4f8>
    fcdc:	100b883a 	mov	r5,r2
    fce0:	300c943a 	slli	r6,r6,16
    fce4:	91ffffcc 	andi	r7,r18,65535
    fce8:	9004d43a 	srli	r2,r18,16
    fcec:	314cb03a 	or	r6,r6,r5
    fcf0:	317fffcc 	andi	r5,r6,65535
    fcf4:	300cd43a 	srli	r6,r6,16
    fcf8:	29d3383a 	mul	r9,r5,r7
    fcfc:	288b383a 	mul	r5,r5,r2
    fd00:	31cf383a 	mul	r7,r6,r7
    fd04:	4806d43a 	srli	r3,r9,16
    fd08:	4111c83a 	sub	r8,r8,r4
    fd0c:	29cb883a 	add	r5,r5,r7
    fd10:	194b883a 	add	r5,r3,r5
    fd14:	3085383a 	mul	r2,r6,r2
    fd18:	29c0022e 	bgeu	r5,r7,fd24 <__umoddi3+0x3d8>
    fd1c:	00c00074 	movhi	r3,1
    fd20:	10c5883a 	add	r2,r2,r3
    fd24:	2808d43a 	srli	r4,r5,16
    fd28:	280a943a 	slli	r5,r5,16
    fd2c:	4a7fffcc 	andi	r9,r9,65535
    fd30:	2085883a 	add	r2,r4,r2
    fd34:	2a4b883a 	add	r5,r5,r9
    fd38:	40803636 	bltu	r8,r2,fe14 <__umoddi3+0x4c8>
    fd3c:	40804d26 	beq	r8,r2,fe74 <__umoddi3+0x528>
    fd40:	4089c83a 	sub	r4,r8,r2
    fd44:	280f883a 	mov	r7,r5
    fd48:	81cfc83a 	sub	r7,r16,r7
    fd4c:	81c7803a 	cmpltu	r3,r16,r7
    fd50:	20c7c83a 	sub	r3,r4,r3
    fd54:	1cc4983a 	sll	r2,r3,r19
    fd58:	3d0ed83a 	srl	r7,r7,r20
    fd5c:	1d06d83a 	srl	r3,r3,r20
    fd60:	11c4b03a 	or	r2,r2,r7
    fd64:	003f9306 	br	fbb4 <__umoddi3+0x268>
    fd68:	9ca6983a 	sll	r19,r19,r18
    fd6c:	88e8d83a 	srl	r20,r17,r3
    fd70:	80c4d83a 	srl	r2,r16,r3
    fd74:	982cd43a 	srli	r22,r19,16
    fd78:	8ca2983a 	sll	r17,r17,r18
    fd7c:	a009883a 	mov	r4,r20
    fd80:	b00b883a 	mov	r5,r22
    fd84:	1478b03a 	or	fp,r2,r17
    fd88:	000ffe00 	call	ffe0 <__umodsi3>
    fd8c:	a009883a 	mov	r4,r20
    fd90:	b00b883a 	mov	r5,r22
    fd94:	1023883a 	mov	r17,r2
    fd98:	000ff7c0 	call	ff7c <__udivsi3>
    fd9c:	9d7fffcc 	andi	r21,r19,65535
    fda0:	880a943a 	slli	r5,r17,16
    fda4:	e008d43a 	srli	r4,fp,16
    fda8:	a885383a 	mul	r2,r21,r2
    fdac:	84a8983a 	sll	r20,r16,r18
    fdb0:	2148b03a 	or	r4,r4,r5
    fdb4:	2080042e 	bgeu	r4,r2,fdc8 <__umoddi3+0x47c>
    fdb8:	24c9883a 	add	r4,r4,r19
    fdbc:	24c00236 	bltu	r4,r19,fdc8 <__umoddi3+0x47c>
    fdc0:	2080012e 	bgeu	r4,r2,fdc8 <__umoddi3+0x47c>
    fdc4:	24c9883a 	add	r4,r4,r19
    fdc8:	20a3c83a 	sub	r17,r4,r2
    fdcc:	b00b883a 	mov	r5,r22
    fdd0:	8809883a 	mov	r4,r17
    fdd4:	000ffe00 	call	ffe0 <__umodsi3>
    fdd8:	102f883a 	mov	r23,r2
    fddc:	8809883a 	mov	r4,r17
    fde0:	b00b883a 	mov	r5,r22
    fde4:	000ff7c0 	call	ff7c <__udivsi3>
    fde8:	b82e943a 	slli	r23,r23,16
    fdec:	a885383a 	mul	r2,r21,r2
    fdf0:	e13fffcc 	andi	r4,fp,65535
    fdf4:	25c8b03a 	or	r4,r4,r23
    fdf8:	2080042e 	bgeu	r4,r2,fe0c <__umoddi3+0x4c0>
    fdfc:	24c9883a 	add	r4,r4,r19
    fe00:	24c00236 	bltu	r4,r19,fe0c <__umoddi3+0x4c0>
    fe04:	2080012e 	bgeu	r4,r2,fe0c <__umoddi3+0x4c0>
    fe08:	24c9883a 	add	r4,r4,r19
    fe0c:	20a3c83a 	sub	r17,r4,r2
    fe10:	003f4806 	br	fb34 <__umoddi3+0x1e8>
    fe14:	2c8fc83a 	sub	r7,r5,r18
    fe18:	1545c83a 	sub	r2,r2,r21
    fe1c:	29cb803a 	cmpltu	r5,r5,r7
    fe20:	1145c83a 	sub	r2,r2,r5
    fe24:	4089c83a 	sub	r4,r8,r2
    fe28:	003fc706 	br	fd48 <__umoddi3+0x3fc>
    fe2c:	01000604 	movi	r4,24
    fe30:	003f1806 	br	fa94 <__umoddi3+0x148>
    fe34:	00800604 	movi	r2,24
    fe38:	003f3206 	br	fb04 <__umoddi3+0x1b8>
    fe3c:	01000604 	movi	r4,24
    fe40:	003ed906 	br	f9a8 <__umoddi3+0x5c>
    fe44:	413fa52e 	bgeu	r8,r4,fcdc <__umoddi3+0x390>
    fe48:	297fff84 	addi	r5,r5,-2
    fe4c:	4551883a 	add	r8,r8,r21
    fe50:	003fa306 	br	fce0 <__umoddi3+0x394>
    fe54:	15ff8b2e 	bgeu	r2,r23,fc84 <__umoddi3+0x338>
    fe58:	31bfff84 	addi	r6,r6,-2
    fe5c:	1545883a 	add	r2,r2,r21
    fe60:	003f8906 	br	fc88 <__umoddi3+0x33c>
    fe64:	24c9883a 	add	r4,r4,r19
    fe68:	003eee06 	br	fa24 <__umoddi3+0xd8>
    fe6c:	8005883a 	mov	r2,r16
    fe70:	003f1706 	br	fad0 <__umoddi3+0x184>
    fe74:	817fe736 	bltu	r16,r5,fe14 <__umoddi3+0x4c8>
    fe78:	280f883a 	mov	r7,r5
    fe7c:	0009883a 	mov	r4,zero
    fe80:	003fb106 	br	fd48 <__umoddi3+0x3fc>

0000fe84 <__divsi3>:
    fe84:	20001b16 	blt	r4,zero,fef4 <__divsi3+0x70>
    fe88:	000f883a 	mov	r7,zero
    fe8c:	28001616 	blt	r5,zero,fee8 <__divsi3+0x64>
    fe90:	200d883a 	mov	r6,r4
    fe94:	29001a2e 	bgeu	r5,r4,ff00 <__divsi3+0x7c>
    fe98:	00800804 	movi	r2,32
    fe9c:	00c00044 	movi	r3,1
    fea0:	00000106 	br	fea8 <__divsi3+0x24>
    fea4:	10000d26 	beq	r2,zero,fedc <__divsi3+0x58>
    fea8:	294b883a 	add	r5,r5,r5
    feac:	10bfffc4 	addi	r2,r2,-1
    feb0:	18c7883a 	add	r3,r3,r3
    feb4:	293ffb36 	bltu	r5,r4,fea4 <__divsi3+0x20>
    feb8:	0005883a 	mov	r2,zero
    febc:	18000726 	beq	r3,zero,fedc <__divsi3+0x58>
    fec0:	0005883a 	mov	r2,zero
    fec4:	31400236 	bltu	r6,r5,fed0 <__divsi3+0x4c>
    fec8:	314dc83a 	sub	r6,r6,r5
    fecc:	10c4b03a 	or	r2,r2,r3
    fed0:	1806d07a 	srli	r3,r3,1
    fed4:	280ad07a 	srli	r5,r5,1
    fed8:	183ffa1e 	bne	r3,zero,fec4 <__divsi3+0x40>
    fedc:	38000126 	beq	r7,zero,fee4 <__divsi3+0x60>
    fee0:	0085c83a 	sub	r2,zero,r2
    fee4:	f800283a 	ret
    fee8:	014bc83a 	sub	r5,zero,r5
    feec:	39c0005c 	xori	r7,r7,1
    fef0:	003fe706 	br	fe90 <__divsi3+0xc>
    fef4:	0109c83a 	sub	r4,zero,r4
    fef8:	01c00044 	movi	r7,1
    fefc:	003fe306 	br	fe8c <__divsi3+0x8>
    ff00:	00c00044 	movi	r3,1
    ff04:	003fee06 	br	fec0 <__divsi3+0x3c>

0000ff08 <__modsi3>:
    ff08:	20001716 	blt	r4,zero,ff68 <__modsi3+0x60>
    ff0c:	000f883a 	mov	r7,zero
    ff10:	2005883a 	mov	r2,r4
    ff14:	28001216 	blt	r5,zero,ff60 <__modsi3+0x58>
    ff18:	2900162e 	bgeu	r5,r4,ff74 <__modsi3+0x6c>
    ff1c:	01800804 	movi	r6,32
    ff20:	00c00044 	movi	r3,1
    ff24:	00000106 	br	ff2c <__modsi3+0x24>
    ff28:	30000a26 	beq	r6,zero,ff54 <__modsi3+0x4c>
    ff2c:	294b883a 	add	r5,r5,r5
    ff30:	31bfffc4 	addi	r6,r6,-1
    ff34:	18c7883a 	add	r3,r3,r3
    ff38:	293ffb36 	bltu	r5,r4,ff28 <__modsi3+0x20>
    ff3c:	18000526 	beq	r3,zero,ff54 <__modsi3+0x4c>
    ff40:	1806d07a 	srli	r3,r3,1
    ff44:	11400136 	bltu	r2,r5,ff4c <__modsi3+0x44>
    ff48:	1145c83a 	sub	r2,r2,r5
    ff4c:	280ad07a 	srli	r5,r5,1
    ff50:	183ffb1e 	bne	r3,zero,ff40 <__modsi3+0x38>
    ff54:	38000126 	beq	r7,zero,ff5c <__modsi3+0x54>
    ff58:	0085c83a 	sub	r2,zero,r2
    ff5c:	f800283a 	ret
    ff60:	014bc83a 	sub	r5,zero,r5
    ff64:	003fec06 	br	ff18 <__modsi3+0x10>
    ff68:	0109c83a 	sub	r4,zero,r4
    ff6c:	01c00044 	movi	r7,1
    ff70:	003fe706 	br	ff10 <__modsi3+0x8>
    ff74:	00c00044 	movi	r3,1
    ff78:	003ff106 	br	ff40 <__modsi3+0x38>

0000ff7c <__udivsi3>:
    ff7c:	200d883a 	mov	r6,r4
    ff80:	2900152e 	bgeu	r5,r4,ffd8 <__udivsi3+0x5c>
    ff84:	28001416 	blt	r5,zero,ffd8 <__udivsi3+0x5c>
    ff88:	00800804 	movi	r2,32
    ff8c:	00c00044 	movi	r3,1
    ff90:	00000206 	br	ff9c <__udivsi3+0x20>
    ff94:	10000e26 	beq	r2,zero,ffd0 <__udivsi3+0x54>
    ff98:	28000516 	blt	r5,zero,ffb0 <__udivsi3+0x34>
    ff9c:	294b883a 	add	r5,r5,r5
    ffa0:	10bfffc4 	addi	r2,r2,-1
    ffa4:	18c7883a 	add	r3,r3,r3
    ffa8:	293ffa36 	bltu	r5,r4,ff94 <__udivsi3+0x18>
    ffac:	18000826 	beq	r3,zero,ffd0 <__udivsi3+0x54>
    ffb0:	0005883a 	mov	r2,zero
    ffb4:	31400236 	bltu	r6,r5,ffc0 <__udivsi3+0x44>
    ffb8:	314dc83a 	sub	r6,r6,r5
    ffbc:	10c4b03a 	or	r2,r2,r3
    ffc0:	1806d07a 	srli	r3,r3,1
    ffc4:	280ad07a 	srli	r5,r5,1
    ffc8:	183ffa1e 	bne	r3,zero,ffb4 <__udivsi3+0x38>
    ffcc:	f800283a 	ret
    ffd0:	0005883a 	mov	r2,zero
    ffd4:	f800283a 	ret
    ffd8:	00c00044 	movi	r3,1
    ffdc:	003ff406 	br	ffb0 <__udivsi3+0x34>

0000ffe0 <__umodsi3>:
    ffe0:	2005883a 	mov	r2,r4
    ffe4:	2900122e 	bgeu	r5,r4,10030 <__umodsi3+0x50>
    ffe8:	28001116 	blt	r5,zero,10030 <__umodsi3+0x50>
    ffec:	01800804 	movi	r6,32
    fff0:	00c00044 	movi	r3,1
    fff4:	00000206 	br	10000 <__umodsi3+0x20>
    fff8:	30000c26 	beq	r6,zero,1002c <__umodsi3+0x4c>
    fffc:	28000516 	blt	r5,zero,10014 <__umodsi3+0x34>
   10000:	294b883a 	add	r5,r5,r5
   10004:	31bfffc4 	addi	r6,r6,-1
   10008:	18c7883a 	add	r3,r3,r3
   1000c:	293ffa36 	bltu	r5,r4,fff8 <__umodsi3+0x18>
   10010:	18000626 	beq	r3,zero,1002c <__umodsi3+0x4c>
   10014:	1806d07a 	srli	r3,r3,1
   10018:	11400136 	bltu	r2,r5,10020 <__umodsi3+0x40>
   1001c:	1145c83a 	sub	r2,r2,r5
   10020:	280ad07a 	srli	r5,r5,1
   10024:	183ffb1e 	bne	r3,zero,10014 <__umodsi3+0x34>
   10028:	f800283a 	ret
   1002c:	f800283a 	ret
   10030:	00c00044 	movi	r3,1
   10034:	003ff706 	br	10014 <__umodsi3+0x34>

00010038 <__adddf3>:
   10038:	02c00434 	movhi	r11,16
   1003c:	5affffc4 	addi	r11,r11,-1
   10040:	2806d7fa 	srli	r3,r5,31
   10044:	2ad4703a 	and	r10,r5,r11
   10048:	3ad2703a 	and	r9,r7,r11
   1004c:	3804d53a 	srli	r2,r7,20
   10050:	3018d77a 	srli	r12,r6,29
   10054:	280ad53a 	srli	r5,r5,20
   10058:	501490fa 	slli	r10,r10,3
   1005c:	2010d77a 	srli	r8,r4,29
   10060:	481290fa 	slli	r9,r9,3
   10064:	380ed7fa 	srli	r7,r7,31
   10068:	defffb04 	addi	sp,sp,-20
   1006c:	dc800215 	stw	r18,8(sp)
   10070:	dc400115 	stw	r17,4(sp)
   10074:	dc000015 	stw	r16,0(sp)
   10078:	dfc00415 	stw	ra,16(sp)
   1007c:	dcc00315 	stw	r19,12(sp)
   10080:	1c803fcc 	andi	r18,r3,255
   10084:	2c01ffcc 	andi	r16,r5,2047
   10088:	5210b03a 	or	r8,r10,r8
   1008c:	202290fa 	slli	r17,r4,3
   10090:	1081ffcc 	andi	r2,r2,2047
   10094:	4b12b03a 	or	r9,r9,r12
   10098:	300c90fa 	slli	r6,r6,3
   1009c:	91c07526 	beq	r18,r7,10274 <__adddf3+0x23c>
   100a0:	8087c83a 	sub	r3,r16,r2
   100a4:	00c0ab0e 	bge	zero,r3,10354 <__adddf3+0x31c>
   100a8:	10002a1e 	bne	r2,zero,10154 <__adddf3+0x11c>
   100ac:	4984b03a 	or	r2,r9,r6
   100b0:	1000961e 	bne	r2,zero,1030c <__adddf3+0x2d4>
   100b4:	888001cc 	andi	r2,r17,7
   100b8:	10000726 	beq	r2,zero,100d8 <__adddf3+0xa0>
   100bc:	888003cc 	andi	r2,r17,15
   100c0:	00c00104 	movi	r3,4
   100c4:	10c00426 	beq	r2,r3,100d8 <__adddf3+0xa0>
   100c8:	88c7883a 	add	r3,r17,r3
   100cc:	1c63803a 	cmpltu	r17,r3,r17
   100d0:	4451883a 	add	r8,r8,r17
   100d4:	1823883a 	mov	r17,r3
   100d8:	4080202c 	andhi	r2,r8,128
   100dc:	10005926 	beq	r2,zero,10244 <__adddf3+0x20c>
   100e0:	84000044 	addi	r16,r16,1
   100e4:	0081ffc4 	movi	r2,2047
   100e8:	8080ba26 	beq	r16,r2,103d4 <__adddf3+0x39c>
   100ec:	00bfe034 	movhi	r2,65408
   100f0:	10bfffc4 	addi	r2,r2,-1
   100f4:	4090703a 	and	r8,r8,r2
   100f8:	4004977a 	slli	r2,r8,29
   100fc:	4010927a 	slli	r8,r8,9
   10100:	8822d0fa 	srli	r17,r17,3
   10104:	8401ffcc 	andi	r16,r16,2047
   10108:	4010d33a 	srli	r8,r8,12
   1010c:	9007883a 	mov	r3,r18
   10110:	1444b03a 	or	r2,r2,r17
   10114:	8401ffcc 	andi	r16,r16,2047
   10118:	8020953a 	slli	r16,r16,20
   1011c:	18c03fcc 	andi	r3,r3,255
   10120:	01000434 	movhi	r4,16
   10124:	213fffc4 	addi	r4,r4,-1
   10128:	180697fa 	slli	r3,r3,31
   1012c:	4110703a 	and	r8,r8,r4
   10130:	4410b03a 	or	r8,r8,r16
   10134:	40c6b03a 	or	r3,r8,r3
   10138:	dfc00417 	ldw	ra,16(sp)
   1013c:	dcc00317 	ldw	r19,12(sp)
   10140:	dc800217 	ldw	r18,8(sp)
   10144:	dc400117 	ldw	r17,4(sp)
   10148:	dc000017 	ldw	r16,0(sp)
   1014c:	dec00504 	addi	sp,sp,20
   10150:	f800283a 	ret
   10154:	0081ffc4 	movi	r2,2047
   10158:	80bfd626 	beq	r16,r2,100b4 <__adddf3+0x7c>
   1015c:	4a402034 	orhi	r9,r9,128
   10160:	00800e04 	movi	r2,56
   10164:	10c09f16 	blt	r2,r3,103e4 <__adddf3+0x3ac>
   10168:	008007c4 	movi	r2,31
   1016c:	10c0c216 	blt	r2,r3,10478 <__adddf3+0x440>
   10170:	00800804 	movi	r2,32
   10174:	10c5c83a 	sub	r2,r2,r3
   10178:	488a983a 	sll	r5,r9,r2
   1017c:	30c8d83a 	srl	r4,r6,r3
   10180:	3084983a 	sll	r2,r6,r2
   10184:	48c6d83a 	srl	r3,r9,r3
   10188:	290cb03a 	or	r6,r5,r4
   1018c:	1004c03a 	cmpne	r2,r2,zero
   10190:	308cb03a 	or	r6,r6,r2
   10194:	898dc83a 	sub	r6,r17,r6
   10198:	89a3803a 	cmpltu	r17,r17,r6
   1019c:	40d1c83a 	sub	r8,r8,r3
   101a0:	4451c83a 	sub	r8,r8,r17
   101a4:	3023883a 	mov	r17,r6
   101a8:	4080202c 	andhi	r2,r8,128
   101ac:	10002326 	beq	r2,zero,1023c <__adddf3+0x204>
   101b0:	04c02034 	movhi	r19,128
   101b4:	9cffffc4 	addi	r19,r19,-1
   101b8:	44e6703a 	and	r19,r8,r19
   101bc:	98007626 	beq	r19,zero,10398 <__adddf3+0x360>
   101c0:	9809883a 	mov	r4,r19
   101c4:	001263c0 	call	1263c <__clzsi2>
   101c8:	10fffe04 	addi	r3,r2,-8
   101cc:	010007c4 	movi	r4,31
   101d0:	20c07716 	blt	r4,r3,103b0 <__adddf3+0x378>
   101d4:	00800804 	movi	r2,32
   101d8:	10c5c83a 	sub	r2,r2,r3
   101dc:	8884d83a 	srl	r2,r17,r2
   101e0:	98d0983a 	sll	r8,r19,r3
   101e4:	88e2983a 	sll	r17,r17,r3
   101e8:	1204b03a 	or	r2,r2,r8
   101ec:	1c007416 	blt	r3,r16,103c0 <__adddf3+0x388>
   101f0:	1c21c83a 	sub	r16,r3,r16
   101f4:	82000044 	addi	r8,r16,1
   101f8:	00c007c4 	movi	r3,31
   101fc:	1a009116 	blt	r3,r8,10444 <__adddf3+0x40c>
   10200:	00c00804 	movi	r3,32
   10204:	1a07c83a 	sub	r3,r3,r8
   10208:	8a08d83a 	srl	r4,r17,r8
   1020c:	88e2983a 	sll	r17,r17,r3
   10210:	10c6983a 	sll	r3,r2,r3
   10214:	1210d83a 	srl	r8,r2,r8
   10218:	8804c03a 	cmpne	r2,r17,zero
   1021c:	1906b03a 	or	r3,r3,r4
   10220:	18a2b03a 	or	r17,r3,r2
   10224:	0021883a 	mov	r16,zero
   10228:	003fa206 	br	100b4 <__adddf3+0x7c>
   1022c:	1890b03a 	or	r8,r3,r2
   10230:	40017d26 	beq	r8,zero,10828 <__adddf3+0x7f0>
   10234:	1011883a 	mov	r8,r2
   10238:	1823883a 	mov	r17,r3
   1023c:	888001cc 	andi	r2,r17,7
   10240:	103f9e1e 	bne	r2,zero,100bc <__adddf3+0x84>
   10244:	4004977a 	slli	r2,r8,29
   10248:	8822d0fa 	srli	r17,r17,3
   1024c:	4010d0fa 	srli	r8,r8,3
   10250:	9007883a 	mov	r3,r18
   10254:	1444b03a 	or	r2,r2,r17
   10258:	0101ffc4 	movi	r4,2047
   1025c:	81002426 	beq	r16,r4,102f0 <__adddf3+0x2b8>
   10260:	8120703a 	and	r16,r16,r4
   10264:	01000434 	movhi	r4,16
   10268:	213fffc4 	addi	r4,r4,-1
   1026c:	4110703a 	and	r8,r8,r4
   10270:	003fa806 	br	10114 <__adddf3+0xdc>
   10274:	8089c83a 	sub	r4,r16,r2
   10278:	01005e0e 	bge	zero,r4,103f4 <__adddf3+0x3bc>
   1027c:	10002b26 	beq	r2,zero,1032c <__adddf3+0x2f4>
   10280:	0081ffc4 	movi	r2,2047
   10284:	80bf8b26 	beq	r16,r2,100b4 <__adddf3+0x7c>
   10288:	4a402034 	orhi	r9,r9,128
   1028c:	00800e04 	movi	r2,56
   10290:	1100a40e 	bge	r2,r4,10524 <__adddf3+0x4ec>
   10294:	498cb03a 	or	r6,r9,r6
   10298:	300ac03a 	cmpne	r5,r6,zero
   1029c:	0013883a 	mov	r9,zero
   102a0:	2c4b883a 	add	r5,r5,r17
   102a4:	2c63803a 	cmpltu	r17,r5,r17
   102a8:	4a11883a 	add	r8,r9,r8
   102ac:	8a11883a 	add	r8,r17,r8
   102b0:	2823883a 	mov	r17,r5
   102b4:	4080202c 	andhi	r2,r8,128
   102b8:	103fe026 	beq	r2,zero,1023c <__adddf3+0x204>
   102bc:	84000044 	addi	r16,r16,1
   102c0:	0081ffc4 	movi	r2,2047
   102c4:	8080d226 	beq	r16,r2,10610 <__adddf3+0x5d8>
   102c8:	00bfe034 	movhi	r2,65408
   102cc:	10bfffc4 	addi	r2,r2,-1
   102d0:	4090703a 	and	r8,r8,r2
   102d4:	880ad07a 	srli	r5,r17,1
   102d8:	400897fa 	slli	r4,r8,31
   102dc:	88c0004c 	andi	r3,r17,1
   102e0:	28e2b03a 	or	r17,r5,r3
   102e4:	4010d07a 	srli	r8,r8,1
   102e8:	2462b03a 	or	r17,r4,r17
   102ec:	003f7106 	br	100b4 <__adddf3+0x7c>
   102f0:	4088b03a 	or	r4,r8,r2
   102f4:	20014526 	beq	r4,zero,1080c <__adddf3+0x7d4>
   102f8:	01000434 	movhi	r4,16
   102fc:	42000234 	orhi	r8,r8,8
   10300:	213fffc4 	addi	r4,r4,-1
   10304:	4110703a 	and	r8,r8,r4
   10308:	003f8206 	br	10114 <__adddf3+0xdc>
   1030c:	18ffffc4 	addi	r3,r3,-1
   10310:	1800491e 	bne	r3,zero,10438 <__adddf3+0x400>
   10314:	898bc83a 	sub	r5,r17,r6
   10318:	8963803a 	cmpltu	r17,r17,r5
   1031c:	4251c83a 	sub	r8,r8,r9
   10320:	4451c83a 	sub	r8,r8,r17
   10324:	2823883a 	mov	r17,r5
   10328:	003f9f06 	br	101a8 <__adddf3+0x170>
   1032c:	4984b03a 	or	r2,r9,r6
   10330:	103f6026 	beq	r2,zero,100b4 <__adddf3+0x7c>
   10334:	213fffc4 	addi	r4,r4,-1
   10338:	2000931e 	bne	r4,zero,10588 <__adddf3+0x550>
   1033c:	898d883a 	add	r6,r17,r6
   10340:	3463803a 	cmpltu	r17,r6,r17
   10344:	4251883a 	add	r8,r8,r9
   10348:	8a11883a 	add	r8,r17,r8
   1034c:	3023883a 	mov	r17,r6
   10350:	003fd806 	br	102b4 <__adddf3+0x27c>
   10354:	1800541e 	bne	r3,zero,104a8 <__adddf3+0x470>
   10358:	80800044 	addi	r2,r16,1
   1035c:	1081ffcc 	andi	r2,r2,2047
   10360:	00c00044 	movi	r3,1
   10364:	1880a00e 	bge	r3,r2,105e8 <__adddf3+0x5b0>
   10368:	8989c83a 	sub	r4,r17,r6
   1036c:	8905803a 	cmpltu	r2,r17,r4
   10370:	4267c83a 	sub	r19,r8,r9
   10374:	98a7c83a 	sub	r19,r19,r2
   10378:	9880202c 	andhi	r2,r19,128
   1037c:	10006326 	beq	r2,zero,1050c <__adddf3+0x4d4>
   10380:	3463c83a 	sub	r17,r6,r17
   10384:	4a07c83a 	sub	r3,r9,r8
   10388:	344d803a 	cmpltu	r6,r6,r17
   1038c:	19a7c83a 	sub	r19,r3,r6
   10390:	3825883a 	mov	r18,r7
   10394:	983f8a1e 	bne	r19,zero,101c0 <__adddf3+0x188>
   10398:	8809883a 	mov	r4,r17
   1039c:	001263c0 	call	1263c <__clzsi2>
   103a0:	10800804 	addi	r2,r2,32
   103a4:	10fffe04 	addi	r3,r2,-8
   103a8:	010007c4 	movi	r4,31
   103ac:	20ff890e 	bge	r4,r3,101d4 <__adddf3+0x19c>
   103b0:	10bff604 	addi	r2,r2,-40
   103b4:	8884983a 	sll	r2,r17,r2
   103b8:	0023883a 	mov	r17,zero
   103bc:	1c3f8c0e 	bge	r3,r16,101f0 <__adddf3+0x1b8>
   103c0:	023fe034 	movhi	r8,65408
   103c4:	423fffc4 	addi	r8,r8,-1
   103c8:	80e1c83a 	sub	r16,r16,r3
   103cc:	1210703a 	and	r8,r2,r8
   103d0:	003f3806 	br	100b4 <__adddf3+0x7c>
   103d4:	9007883a 	mov	r3,r18
   103d8:	0011883a 	mov	r8,zero
   103dc:	0005883a 	mov	r2,zero
   103e0:	003f4c06 	br	10114 <__adddf3+0xdc>
   103e4:	498cb03a 	or	r6,r9,r6
   103e8:	300cc03a 	cmpne	r6,r6,zero
   103ec:	0007883a 	mov	r3,zero
   103f0:	003f6806 	br	10194 <__adddf3+0x15c>
   103f4:	20009c1e 	bne	r4,zero,10668 <__adddf3+0x630>
   103f8:	80800044 	addi	r2,r16,1
   103fc:	1141ffcc 	andi	r5,r2,2047
   10400:	01000044 	movi	r4,1
   10404:	2140670e 	bge	r4,r5,105a4 <__adddf3+0x56c>
   10408:	0101ffc4 	movi	r4,2047
   1040c:	11007f26 	beq	r2,r4,1060c <__adddf3+0x5d4>
   10410:	898d883a 	add	r6,r17,r6
   10414:	4247883a 	add	r3,r8,r9
   10418:	3451803a 	cmpltu	r8,r6,r17
   1041c:	40d1883a 	add	r8,r8,r3
   10420:	402297fa 	slli	r17,r8,31
   10424:	300cd07a 	srli	r6,r6,1
   10428:	4010d07a 	srli	r8,r8,1
   1042c:	1021883a 	mov	r16,r2
   10430:	89a2b03a 	or	r17,r17,r6
   10434:	003f1f06 	br	100b4 <__adddf3+0x7c>
   10438:	0081ffc4 	movi	r2,2047
   1043c:	80bf481e 	bne	r16,r2,10160 <__adddf3+0x128>
   10440:	003f1c06 	br	100b4 <__adddf3+0x7c>
   10444:	843ff844 	addi	r16,r16,-31
   10448:	01000804 	movi	r4,32
   1044c:	1406d83a 	srl	r3,r2,r16
   10450:	41005026 	beq	r8,r4,10594 <__adddf3+0x55c>
   10454:	01001004 	movi	r4,64
   10458:	2211c83a 	sub	r8,r4,r8
   1045c:	1204983a 	sll	r2,r2,r8
   10460:	88a2b03a 	or	r17,r17,r2
   10464:	8822c03a 	cmpne	r17,r17,zero
   10468:	1c62b03a 	or	r17,r3,r17
   1046c:	0011883a 	mov	r8,zero
   10470:	0021883a 	mov	r16,zero
   10474:	003f7106 	br	1023c <__adddf3+0x204>
   10478:	193ff804 	addi	r4,r3,-32
   1047c:	00800804 	movi	r2,32
   10480:	4908d83a 	srl	r4,r9,r4
   10484:	18804526 	beq	r3,r2,1059c <__adddf3+0x564>
   10488:	00801004 	movi	r2,64
   1048c:	10c5c83a 	sub	r2,r2,r3
   10490:	4886983a 	sll	r3,r9,r2
   10494:	198cb03a 	or	r6,r3,r6
   10498:	300cc03a 	cmpne	r6,r6,zero
   1049c:	218cb03a 	or	r6,r4,r6
   104a0:	0007883a 	mov	r3,zero
   104a4:	003f3b06 	br	10194 <__adddf3+0x15c>
   104a8:	80002a26 	beq	r16,zero,10554 <__adddf3+0x51c>
   104ac:	0101ffc4 	movi	r4,2047
   104b0:	11006826 	beq	r2,r4,10654 <__adddf3+0x61c>
   104b4:	00c7c83a 	sub	r3,zero,r3
   104b8:	42002034 	orhi	r8,r8,128
   104bc:	01000e04 	movi	r4,56
   104c0:	20c07c16 	blt	r4,r3,106b4 <__adddf3+0x67c>
   104c4:	010007c4 	movi	r4,31
   104c8:	20c0da16 	blt	r4,r3,10834 <__adddf3+0x7fc>
   104cc:	01000804 	movi	r4,32
   104d0:	20c9c83a 	sub	r4,r4,r3
   104d4:	4114983a 	sll	r10,r8,r4
   104d8:	88cad83a 	srl	r5,r17,r3
   104dc:	8908983a 	sll	r4,r17,r4
   104e0:	40c6d83a 	srl	r3,r8,r3
   104e4:	5162b03a 	or	r17,r10,r5
   104e8:	2008c03a 	cmpne	r4,r4,zero
   104ec:	8922b03a 	or	r17,r17,r4
   104f0:	3463c83a 	sub	r17,r6,r17
   104f4:	48c7c83a 	sub	r3,r9,r3
   104f8:	344d803a 	cmpltu	r6,r6,r17
   104fc:	1991c83a 	sub	r8,r3,r6
   10500:	1021883a 	mov	r16,r2
   10504:	3825883a 	mov	r18,r7
   10508:	003f2706 	br	101a8 <__adddf3+0x170>
   1050c:	24d0b03a 	or	r8,r4,r19
   10510:	40001b1e 	bne	r8,zero,10580 <__adddf3+0x548>
   10514:	0005883a 	mov	r2,zero
   10518:	0007883a 	mov	r3,zero
   1051c:	0021883a 	mov	r16,zero
   10520:	003f4d06 	br	10258 <__adddf3+0x220>
   10524:	008007c4 	movi	r2,31
   10528:	11003c16 	blt	r2,r4,1061c <__adddf3+0x5e4>
   1052c:	00800804 	movi	r2,32
   10530:	1105c83a 	sub	r2,r2,r4
   10534:	488e983a 	sll	r7,r9,r2
   10538:	310ad83a 	srl	r5,r6,r4
   1053c:	3084983a 	sll	r2,r6,r2
   10540:	4912d83a 	srl	r9,r9,r4
   10544:	394ab03a 	or	r5,r7,r5
   10548:	1004c03a 	cmpne	r2,r2,zero
   1054c:	288ab03a 	or	r5,r5,r2
   10550:	003f5306 	br	102a0 <__adddf3+0x268>
   10554:	4448b03a 	or	r4,r8,r17
   10558:	20003e26 	beq	r4,zero,10654 <__adddf3+0x61c>
   1055c:	00c6303a 	nor	r3,zero,r3
   10560:	18003a1e 	bne	r3,zero,1064c <__adddf3+0x614>
   10564:	3463c83a 	sub	r17,r6,r17
   10568:	4a07c83a 	sub	r3,r9,r8
   1056c:	344d803a 	cmpltu	r6,r6,r17
   10570:	1991c83a 	sub	r8,r3,r6
   10574:	1021883a 	mov	r16,r2
   10578:	3825883a 	mov	r18,r7
   1057c:	003f0a06 	br	101a8 <__adddf3+0x170>
   10580:	2023883a 	mov	r17,r4
   10584:	003f0d06 	br	101bc <__adddf3+0x184>
   10588:	0081ffc4 	movi	r2,2047
   1058c:	80bf3f1e 	bne	r16,r2,1028c <__adddf3+0x254>
   10590:	003ec806 	br	100b4 <__adddf3+0x7c>
   10594:	0005883a 	mov	r2,zero
   10598:	003fb106 	br	10460 <__adddf3+0x428>
   1059c:	0007883a 	mov	r3,zero
   105a0:	003fbc06 	br	10494 <__adddf3+0x45c>
   105a4:	4444b03a 	or	r2,r8,r17
   105a8:	8000871e 	bne	r16,zero,107c8 <__adddf3+0x790>
   105ac:	1000ba26 	beq	r2,zero,10898 <__adddf3+0x860>
   105b0:	4984b03a 	or	r2,r9,r6
   105b4:	103ebf26 	beq	r2,zero,100b4 <__adddf3+0x7c>
   105b8:	8985883a 	add	r2,r17,r6
   105bc:	4247883a 	add	r3,r8,r9
   105c0:	1451803a 	cmpltu	r8,r2,r17
   105c4:	40d1883a 	add	r8,r8,r3
   105c8:	40c0202c 	andhi	r3,r8,128
   105cc:	1023883a 	mov	r17,r2
   105d0:	183f1a26 	beq	r3,zero,1023c <__adddf3+0x204>
   105d4:	00bfe034 	movhi	r2,65408
   105d8:	10bfffc4 	addi	r2,r2,-1
   105dc:	2021883a 	mov	r16,r4
   105e0:	4090703a 	and	r8,r8,r2
   105e4:	003eb306 	br	100b4 <__adddf3+0x7c>
   105e8:	4444b03a 	or	r2,r8,r17
   105ec:	8000291e 	bne	r16,zero,10694 <__adddf3+0x65c>
   105f0:	10004b1e 	bne	r2,zero,10720 <__adddf3+0x6e8>
   105f4:	4990b03a 	or	r8,r9,r6
   105f8:	40008b26 	beq	r8,zero,10828 <__adddf3+0x7f0>
   105fc:	4811883a 	mov	r8,r9
   10600:	3023883a 	mov	r17,r6
   10604:	3825883a 	mov	r18,r7
   10608:	003eaa06 	br	100b4 <__adddf3+0x7c>
   1060c:	1021883a 	mov	r16,r2
   10610:	0011883a 	mov	r8,zero
   10614:	0005883a 	mov	r2,zero
   10618:	003f0f06 	br	10258 <__adddf3+0x220>
   1061c:	217ff804 	addi	r5,r4,-32
   10620:	00800804 	movi	r2,32
   10624:	494ad83a 	srl	r5,r9,r5
   10628:	20807d26 	beq	r4,r2,10820 <__adddf3+0x7e8>
   1062c:	00801004 	movi	r2,64
   10630:	1109c83a 	sub	r4,r2,r4
   10634:	4912983a 	sll	r9,r9,r4
   10638:	498cb03a 	or	r6,r9,r6
   1063c:	300cc03a 	cmpne	r6,r6,zero
   10640:	298ab03a 	or	r5,r5,r6
   10644:	0013883a 	mov	r9,zero
   10648:	003f1506 	br	102a0 <__adddf3+0x268>
   1064c:	0101ffc4 	movi	r4,2047
   10650:	113f9a1e 	bne	r2,r4,104bc <__adddf3+0x484>
   10654:	4811883a 	mov	r8,r9
   10658:	3023883a 	mov	r17,r6
   1065c:	1021883a 	mov	r16,r2
   10660:	3825883a 	mov	r18,r7
   10664:	003e9306 	br	100b4 <__adddf3+0x7c>
   10668:	8000161e 	bne	r16,zero,106c4 <__adddf3+0x68c>
   1066c:	444ab03a 	or	r5,r8,r17
   10670:	28005126 	beq	r5,zero,107b8 <__adddf3+0x780>
   10674:	0108303a 	nor	r4,zero,r4
   10678:	20004d1e 	bne	r4,zero,107b0 <__adddf3+0x778>
   1067c:	89a3883a 	add	r17,r17,r6
   10680:	4253883a 	add	r9,r8,r9
   10684:	898d803a 	cmpltu	r6,r17,r6
   10688:	3251883a 	add	r8,r6,r9
   1068c:	1021883a 	mov	r16,r2
   10690:	003f0806 	br	102b4 <__adddf3+0x27c>
   10694:	1000301e 	bne	r2,zero,10758 <__adddf3+0x720>
   10698:	4984b03a 	or	r2,r9,r6
   1069c:	10007126 	beq	r2,zero,10864 <__adddf3+0x82c>
   106a0:	4811883a 	mov	r8,r9
   106a4:	3023883a 	mov	r17,r6
   106a8:	3825883a 	mov	r18,r7
   106ac:	0401ffc4 	movi	r16,2047
   106b0:	003e8006 	br	100b4 <__adddf3+0x7c>
   106b4:	4462b03a 	or	r17,r8,r17
   106b8:	8822c03a 	cmpne	r17,r17,zero
   106bc:	0007883a 	mov	r3,zero
   106c0:	003f8b06 	br	104f0 <__adddf3+0x4b8>
   106c4:	0141ffc4 	movi	r5,2047
   106c8:	11403b26 	beq	r2,r5,107b8 <__adddf3+0x780>
   106cc:	0109c83a 	sub	r4,zero,r4
   106d0:	42002034 	orhi	r8,r8,128
   106d4:	01400e04 	movi	r5,56
   106d8:	29006716 	blt	r5,r4,10878 <__adddf3+0x840>
   106dc:	014007c4 	movi	r5,31
   106e0:	29007016 	blt	r5,r4,108a4 <__adddf3+0x86c>
   106e4:	01400804 	movi	r5,32
   106e8:	290bc83a 	sub	r5,r5,r4
   106ec:	4154983a 	sll	r10,r8,r5
   106f0:	890ed83a 	srl	r7,r17,r4
   106f4:	894a983a 	sll	r5,r17,r5
   106f8:	4108d83a 	srl	r4,r8,r4
   106fc:	51e2b03a 	or	r17,r10,r7
   10700:	280ac03a 	cmpne	r5,r5,zero
   10704:	8962b03a 	or	r17,r17,r5
   10708:	89a3883a 	add	r17,r17,r6
   1070c:	2253883a 	add	r9,r4,r9
   10710:	898d803a 	cmpltu	r6,r17,r6
   10714:	3251883a 	add	r8,r6,r9
   10718:	1021883a 	mov	r16,r2
   1071c:	003ee506 	br	102b4 <__adddf3+0x27c>
   10720:	4984b03a 	or	r2,r9,r6
   10724:	103e6326 	beq	r2,zero,100b4 <__adddf3+0x7c>
   10728:	8987c83a 	sub	r3,r17,r6
   1072c:	88c9803a 	cmpltu	r4,r17,r3
   10730:	4245c83a 	sub	r2,r8,r9
   10734:	1105c83a 	sub	r2,r2,r4
   10738:	1100202c 	andhi	r4,r2,128
   1073c:	203ebb26 	beq	r4,zero,1022c <__adddf3+0x1f4>
   10740:	3463c83a 	sub	r17,r6,r17
   10744:	4a07c83a 	sub	r3,r9,r8
   10748:	344d803a 	cmpltu	r6,r6,r17
   1074c:	1991c83a 	sub	r8,r3,r6
   10750:	3825883a 	mov	r18,r7
   10754:	003e5706 	br	100b4 <__adddf3+0x7c>
   10758:	4984b03a 	or	r2,r9,r6
   1075c:	10002e26 	beq	r2,zero,10818 <__adddf3+0x7e0>
   10760:	4004d0fa 	srli	r2,r8,3
   10764:	8822d0fa 	srli	r17,r17,3
   10768:	4010977a 	slli	r8,r8,29
   1076c:	10c0022c 	andhi	r3,r2,8
   10770:	4462b03a 	or	r17,r8,r17
   10774:	18000826 	beq	r3,zero,10798 <__adddf3+0x760>
   10778:	4808d0fa 	srli	r4,r9,3
   1077c:	20c0022c 	andhi	r3,r4,8
   10780:	1800051e 	bne	r3,zero,10798 <__adddf3+0x760>
   10784:	300cd0fa 	srli	r6,r6,3
   10788:	4806977a 	slli	r3,r9,29
   1078c:	2005883a 	mov	r2,r4
   10790:	3825883a 	mov	r18,r7
   10794:	19a2b03a 	or	r17,r3,r6
   10798:	8810d77a 	srli	r8,r17,29
   1079c:	100490fa 	slli	r2,r2,3
   107a0:	882290fa 	slli	r17,r17,3
   107a4:	0401ffc4 	movi	r16,2047
   107a8:	4090b03a 	or	r8,r8,r2
   107ac:	003e4106 	br	100b4 <__adddf3+0x7c>
   107b0:	0141ffc4 	movi	r5,2047
   107b4:	117fc71e 	bne	r2,r5,106d4 <__adddf3+0x69c>
   107b8:	4811883a 	mov	r8,r9
   107bc:	3023883a 	mov	r17,r6
   107c0:	1021883a 	mov	r16,r2
   107c4:	003e3b06 	br	100b4 <__adddf3+0x7c>
   107c8:	10002f26 	beq	r2,zero,10888 <__adddf3+0x850>
   107cc:	4984b03a 	or	r2,r9,r6
   107d0:	10001126 	beq	r2,zero,10818 <__adddf3+0x7e0>
   107d4:	4004d0fa 	srli	r2,r8,3
   107d8:	8822d0fa 	srli	r17,r17,3
   107dc:	4010977a 	slli	r8,r8,29
   107e0:	10c0022c 	andhi	r3,r2,8
   107e4:	4462b03a 	or	r17,r8,r17
   107e8:	183feb26 	beq	r3,zero,10798 <__adddf3+0x760>
   107ec:	4808d0fa 	srli	r4,r9,3
   107f0:	20c0022c 	andhi	r3,r4,8
   107f4:	183fe81e 	bne	r3,zero,10798 <__adddf3+0x760>
   107f8:	300cd0fa 	srli	r6,r6,3
   107fc:	4806977a 	slli	r3,r9,29
   10800:	2005883a 	mov	r2,r4
   10804:	19a2b03a 	or	r17,r3,r6
   10808:	003fe306 	br	10798 <__adddf3+0x760>
   1080c:	0011883a 	mov	r8,zero
   10810:	0005883a 	mov	r2,zero
   10814:	003e3f06 	br	10114 <__adddf3+0xdc>
   10818:	0401ffc4 	movi	r16,2047
   1081c:	003e2506 	br	100b4 <__adddf3+0x7c>
   10820:	0013883a 	mov	r9,zero
   10824:	003f8406 	br	10638 <__adddf3+0x600>
   10828:	0005883a 	mov	r2,zero
   1082c:	0007883a 	mov	r3,zero
   10830:	003e8906 	br	10258 <__adddf3+0x220>
   10834:	197ff804 	addi	r5,r3,-32
   10838:	01000804 	movi	r4,32
   1083c:	414ad83a 	srl	r5,r8,r5
   10840:	19002426 	beq	r3,r4,108d4 <__adddf3+0x89c>
   10844:	01001004 	movi	r4,64
   10848:	20c7c83a 	sub	r3,r4,r3
   1084c:	40c6983a 	sll	r3,r8,r3
   10850:	1c46b03a 	or	r3,r3,r17
   10854:	1806c03a 	cmpne	r3,r3,zero
   10858:	28e2b03a 	or	r17,r5,r3
   1085c:	0007883a 	mov	r3,zero
   10860:	003f2306 	br	104f0 <__adddf3+0x4b8>
   10864:	0007883a 	mov	r3,zero
   10868:	5811883a 	mov	r8,r11
   1086c:	00bfffc4 	movi	r2,-1
   10870:	0401ffc4 	movi	r16,2047
   10874:	003e7806 	br	10258 <__adddf3+0x220>
   10878:	4462b03a 	or	r17,r8,r17
   1087c:	8822c03a 	cmpne	r17,r17,zero
   10880:	0009883a 	mov	r4,zero
   10884:	003fa006 	br	10708 <__adddf3+0x6d0>
   10888:	4811883a 	mov	r8,r9
   1088c:	3023883a 	mov	r17,r6
   10890:	0401ffc4 	movi	r16,2047
   10894:	003e0706 	br	100b4 <__adddf3+0x7c>
   10898:	4811883a 	mov	r8,r9
   1089c:	3023883a 	mov	r17,r6
   108a0:	003e0406 	br	100b4 <__adddf3+0x7c>
   108a4:	21fff804 	addi	r7,r4,-32
   108a8:	01400804 	movi	r5,32
   108ac:	41ced83a 	srl	r7,r8,r7
   108b0:	21400a26 	beq	r4,r5,108dc <__adddf3+0x8a4>
   108b4:	01401004 	movi	r5,64
   108b8:	2909c83a 	sub	r4,r5,r4
   108bc:	4108983a 	sll	r4,r8,r4
   108c0:	2448b03a 	or	r4,r4,r17
   108c4:	2008c03a 	cmpne	r4,r4,zero
   108c8:	3922b03a 	or	r17,r7,r4
   108cc:	0009883a 	mov	r4,zero
   108d0:	003f8d06 	br	10708 <__adddf3+0x6d0>
   108d4:	0007883a 	mov	r3,zero
   108d8:	003fdd06 	br	10850 <__adddf3+0x818>
   108dc:	0009883a 	mov	r4,zero
   108e0:	003ff706 	br	108c0 <__adddf3+0x888>

000108e4 <__divdf3>:
   108e4:	defff204 	addi	sp,sp,-56
   108e8:	dd400915 	stw	r21,36(sp)
   108ec:	282ad53a 	srli	r21,r5,20
   108f0:	dd000815 	stw	r20,32(sp)
   108f4:	2828d7fa 	srli	r20,r5,31
   108f8:	dc000415 	stw	r16,16(sp)
   108fc:	04000434 	movhi	r16,16
   10900:	df000c15 	stw	fp,48(sp)
   10904:	843fffc4 	addi	r16,r16,-1
   10908:	dfc00d15 	stw	ra,52(sp)
   1090c:	ddc00b15 	stw	r23,44(sp)
   10910:	dd800a15 	stw	r22,40(sp)
   10914:	dcc00715 	stw	r19,28(sp)
   10918:	dc800615 	stw	r18,24(sp)
   1091c:	dc400515 	stw	r17,20(sp)
   10920:	ad41ffcc 	andi	r21,r21,2047
   10924:	2c20703a 	and	r16,r5,r16
   10928:	a7003fcc 	andi	fp,r20,255
   1092c:	a8006126 	beq	r21,zero,10ab4 <__divdf3+0x1d0>
   10930:	0081ffc4 	movi	r2,2047
   10934:	2025883a 	mov	r18,r4
   10938:	a8803726 	beq	r21,r2,10a18 <__divdf3+0x134>
   1093c:	80800434 	orhi	r2,r16,16
   10940:	100490fa 	slli	r2,r2,3
   10944:	2020d77a 	srli	r16,r4,29
   10948:	202490fa 	slli	r18,r4,3
   1094c:	ad7f0044 	addi	r21,r21,-1023
   10950:	80a0b03a 	or	r16,r16,r2
   10954:	0027883a 	mov	r19,zero
   10958:	0013883a 	mov	r9,zero
   1095c:	3804d53a 	srli	r2,r7,20
   10960:	382cd7fa 	srli	r22,r7,31
   10964:	04400434 	movhi	r17,16
   10968:	8c7fffc4 	addi	r17,r17,-1
   1096c:	1081ffcc 	andi	r2,r2,2047
   10970:	3011883a 	mov	r8,r6
   10974:	3c62703a 	and	r17,r7,r17
   10978:	b5c03fcc 	andi	r23,r22,255
   1097c:	10006c26 	beq	r2,zero,10b30 <__divdf3+0x24c>
   10980:	00c1ffc4 	movi	r3,2047
   10984:	10c06426 	beq	r2,r3,10b18 <__divdf3+0x234>
   10988:	88c00434 	orhi	r3,r17,16
   1098c:	180690fa 	slli	r3,r3,3
   10990:	3022d77a 	srli	r17,r6,29
   10994:	301090fa 	slli	r8,r6,3
   10998:	10bf0044 	addi	r2,r2,-1023
   1099c:	88e2b03a 	or	r17,r17,r3
   109a0:	000f883a 	mov	r7,zero
   109a4:	a58cf03a 	xor	r6,r20,r22
   109a8:	3cc8b03a 	or	r4,r7,r19
   109ac:	a8abc83a 	sub	r21,r21,r2
   109b0:	008003c4 	movi	r2,15
   109b4:	3007883a 	mov	r3,r6
   109b8:	34c03fcc 	andi	r19,r6,255
   109bc:	11009036 	bltu	r2,r4,10c00 <__divdf3+0x31c>
   109c0:	200890ba 	slli	r4,r4,2
   109c4:	00800074 	movhi	r2,1
   109c8:	10827604 	addi	r2,r2,2520
   109cc:	2089883a 	add	r4,r4,r2
   109d0:	20800017 	ldw	r2,0(r4)
   109d4:	1000683a 	jmp	r2
   109d8:	00010c00 	call	10c0 <resample_rgb+0x74>
   109dc:	00010a50 	cmplti	zero,zero,1065
   109e0:	00010bf0 	cmpltui	zero,zero,1071
   109e4:	00010a44 	movi	zero,1065
   109e8:	00010bf0 	cmpltui	zero,zero,1071
   109ec:	00010bc4 	movi	zero,1071
   109f0:	00010bf0 	cmpltui	zero,zero,1071
   109f4:	00010a44 	movi	zero,1065
   109f8:	00010a50 	cmplti	zero,zero,1065
   109fc:	00010a50 	cmplti	zero,zero,1065
   10a00:	00010bc4 	movi	zero,1071
   10a04:	00010a44 	movi	zero,1065
   10a08:	00010a34 	movhi	zero,1064
   10a0c:	00010a34 	movhi	zero,1064
   10a10:	00010a34 	movhi	zero,1064
   10a14:	00010ee4 	muli	zero,zero,1083
   10a18:	2404b03a 	or	r2,r4,r16
   10a1c:	1000661e 	bne	r2,zero,10bb8 <__divdf3+0x2d4>
   10a20:	04c00204 	movi	r19,8
   10a24:	0021883a 	mov	r16,zero
   10a28:	0025883a 	mov	r18,zero
   10a2c:	02400084 	movi	r9,2
   10a30:	003fca06 	br	1095c <__divdf3+0x78>
   10a34:	8023883a 	mov	r17,r16
   10a38:	9011883a 	mov	r8,r18
   10a3c:	e02f883a 	mov	r23,fp
   10a40:	480f883a 	mov	r7,r9
   10a44:	00800084 	movi	r2,2
   10a48:	3881311e 	bne	r7,r2,10f10 <__divdf3+0x62c>
   10a4c:	b827883a 	mov	r19,r23
   10a50:	98c0004c 	andi	r3,r19,1
   10a54:	0081ffc4 	movi	r2,2047
   10a58:	000b883a 	mov	r5,zero
   10a5c:	0025883a 	mov	r18,zero
   10a60:	1004953a 	slli	r2,r2,20
   10a64:	18c03fcc 	andi	r3,r3,255
   10a68:	04400434 	movhi	r17,16
   10a6c:	8c7fffc4 	addi	r17,r17,-1
   10a70:	180697fa 	slli	r3,r3,31
   10a74:	2c4a703a 	and	r5,r5,r17
   10a78:	288ab03a 	or	r5,r5,r2
   10a7c:	28c6b03a 	or	r3,r5,r3
   10a80:	9005883a 	mov	r2,r18
   10a84:	dfc00d17 	ldw	ra,52(sp)
   10a88:	df000c17 	ldw	fp,48(sp)
   10a8c:	ddc00b17 	ldw	r23,44(sp)
   10a90:	dd800a17 	ldw	r22,40(sp)
   10a94:	dd400917 	ldw	r21,36(sp)
   10a98:	dd000817 	ldw	r20,32(sp)
   10a9c:	dcc00717 	ldw	r19,28(sp)
   10aa0:	dc800617 	ldw	r18,24(sp)
   10aa4:	dc400517 	ldw	r17,20(sp)
   10aa8:	dc000417 	ldw	r16,16(sp)
   10aac:	dec00e04 	addi	sp,sp,56
   10ab0:	f800283a 	ret
   10ab4:	2404b03a 	or	r2,r4,r16
   10ab8:	2027883a 	mov	r19,r4
   10abc:	10003926 	beq	r2,zero,10ba4 <__divdf3+0x2c0>
   10ac0:	80012e26 	beq	r16,zero,10f7c <__divdf3+0x698>
   10ac4:	8009883a 	mov	r4,r16
   10ac8:	d9800315 	stw	r6,12(sp)
   10acc:	d9c00215 	stw	r7,8(sp)
   10ad0:	001263c0 	call	1263c <__clzsi2>
   10ad4:	d9800317 	ldw	r6,12(sp)
   10ad8:	d9c00217 	ldw	r7,8(sp)
   10adc:	113ffd44 	addi	r4,r2,-11
   10ae0:	00c00704 	movi	r3,28
   10ae4:	19012116 	blt	r3,r4,10f6c <__divdf3+0x688>
   10ae8:	00c00744 	movi	r3,29
   10aec:	147ffe04 	addi	r17,r2,-8
   10af0:	1907c83a 	sub	r3,r3,r4
   10af4:	8460983a 	sll	r16,r16,r17
   10af8:	98c6d83a 	srl	r3,r19,r3
   10afc:	9c64983a 	sll	r18,r19,r17
   10b00:	1c20b03a 	or	r16,r3,r16
   10b04:	1080fcc4 	addi	r2,r2,1011
   10b08:	00abc83a 	sub	r21,zero,r2
   10b0c:	0027883a 	mov	r19,zero
   10b10:	0013883a 	mov	r9,zero
   10b14:	003f9106 	br	1095c <__divdf3+0x78>
   10b18:	3446b03a 	or	r3,r6,r17
   10b1c:	18001f1e 	bne	r3,zero,10b9c <__divdf3+0x2b8>
   10b20:	0023883a 	mov	r17,zero
   10b24:	0011883a 	mov	r8,zero
   10b28:	01c00084 	movi	r7,2
   10b2c:	003f9d06 	br	109a4 <__divdf3+0xc0>
   10b30:	3446b03a 	or	r3,r6,r17
   10b34:	18001526 	beq	r3,zero,10b8c <__divdf3+0x2a8>
   10b38:	88011b26 	beq	r17,zero,10fa8 <__divdf3+0x6c4>
   10b3c:	8809883a 	mov	r4,r17
   10b40:	d9800315 	stw	r6,12(sp)
   10b44:	da400115 	stw	r9,4(sp)
   10b48:	001263c0 	call	1263c <__clzsi2>
   10b4c:	d9800317 	ldw	r6,12(sp)
   10b50:	da400117 	ldw	r9,4(sp)
   10b54:	113ffd44 	addi	r4,r2,-11
   10b58:	00c00704 	movi	r3,28
   10b5c:	19010e16 	blt	r3,r4,10f98 <__divdf3+0x6b4>
   10b60:	00c00744 	movi	r3,29
   10b64:	123ffe04 	addi	r8,r2,-8
   10b68:	1907c83a 	sub	r3,r3,r4
   10b6c:	8a22983a 	sll	r17,r17,r8
   10b70:	30c6d83a 	srl	r3,r6,r3
   10b74:	3210983a 	sll	r8,r6,r8
   10b78:	1c62b03a 	or	r17,r3,r17
   10b7c:	1080fcc4 	addi	r2,r2,1011
   10b80:	0085c83a 	sub	r2,zero,r2
   10b84:	000f883a 	mov	r7,zero
   10b88:	003f8606 	br	109a4 <__divdf3+0xc0>
   10b8c:	0023883a 	mov	r17,zero
   10b90:	0011883a 	mov	r8,zero
   10b94:	01c00044 	movi	r7,1
   10b98:	003f8206 	br	109a4 <__divdf3+0xc0>
   10b9c:	01c000c4 	movi	r7,3
   10ba0:	003f8006 	br	109a4 <__divdf3+0xc0>
   10ba4:	04c00104 	movi	r19,4
   10ba8:	0021883a 	mov	r16,zero
   10bac:	0025883a 	mov	r18,zero
   10bb0:	02400044 	movi	r9,1
   10bb4:	003f6906 	br	1095c <__divdf3+0x78>
   10bb8:	04c00304 	movi	r19,12
   10bbc:	024000c4 	movi	r9,3
   10bc0:	003f6606 	br	1095c <__divdf3+0x78>
   10bc4:	01400434 	movhi	r5,16
   10bc8:	0007883a 	mov	r3,zero
   10bcc:	297fffc4 	addi	r5,r5,-1
   10bd0:	04bfffc4 	movi	r18,-1
   10bd4:	0081ffc4 	movi	r2,2047
   10bd8:	003fa106 	br	10a60 <__divdf3+0x17c>
   10bdc:	00c00044 	movi	r3,1
   10be0:	1887c83a 	sub	r3,r3,r2
   10be4:	01000e04 	movi	r4,56
   10be8:	20c1210e 	bge	r4,r3,11070 <__divdf3+0x78c>
   10bec:	98c0004c 	andi	r3,r19,1
   10bf0:	0005883a 	mov	r2,zero
   10bf4:	000b883a 	mov	r5,zero
   10bf8:	0025883a 	mov	r18,zero
   10bfc:	003f9806 	br	10a60 <__divdf3+0x17c>
   10c00:	8c00fd36 	bltu	r17,r16,10ff8 <__divdf3+0x714>
   10c04:	8440fb26 	beq	r16,r17,10ff4 <__divdf3+0x710>
   10c08:	8007883a 	mov	r3,r16
   10c0c:	ad7fffc4 	addi	r21,r21,-1
   10c10:	0021883a 	mov	r16,zero
   10c14:	4004d63a 	srli	r2,r8,24
   10c18:	8822923a 	slli	r17,r17,8
   10c1c:	1809883a 	mov	r4,r3
   10c20:	402c923a 	slli	r22,r8,8
   10c24:	88b8b03a 	or	fp,r17,r2
   10c28:	e028d43a 	srli	r20,fp,16
   10c2c:	d8c00015 	stw	r3,0(sp)
   10c30:	e5ffffcc 	andi	r23,fp,65535
   10c34:	a00b883a 	mov	r5,r20
   10c38:	000ff7c0 	call	ff7c <__udivsi3>
   10c3c:	d8c00017 	ldw	r3,0(sp)
   10c40:	a00b883a 	mov	r5,r20
   10c44:	d8800315 	stw	r2,12(sp)
   10c48:	1809883a 	mov	r4,r3
   10c4c:	000ffe00 	call	ffe0 <__umodsi3>
   10c50:	d9800317 	ldw	r6,12(sp)
   10c54:	1006943a 	slli	r3,r2,16
   10c58:	9004d43a 	srli	r2,r18,16
   10c5c:	b9a3383a 	mul	r17,r23,r6
   10c60:	10c4b03a 	or	r2,r2,r3
   10c64:	1440062e 	bgeu	r2,r17,10c80 <__divdf3+0x39c>
   10c68:	1705883a 	add	r2,r2,fp
   10c6c:	30ffffc4 	addi	r3,r6,-1
   10c70:	1700ee36 	bltu	r2,fp,1102c <__divdf3+0x748>
   10c74:	1440ed2e 	bgeu	r2,r17,1102c <__divdf3+0x748>
   10c78:	31bfff84 	addi	r6,r6,-2
   10c7c:	1705883a 	add	r2,r2,fp
   10c80:	1463c83a 	sub	r17,r2,r17
   10c84:	a00b883a 	mov	r5,r20
   10c88:	8809883a 	mov	r4,r17
   10c8c:	d9800315 	stw	r6,12(sp)
   10c90:	000ff7c0 	call	ff7c <__udivsi3>
   10c94:	a00b883a 	mov	r5,r20
   10c98:	8809883a 	mov	r4,r17
   10c9c:	d8800215 	stw	r2,8(sp)
   10ca0:	000ffe00 	call	ffe0 <__umodsi3>
   10ca4:	d9c00217 	ldw	r7,8(sp)
   10ca8:	1004943a 	slli	r2,r2,16
   10cac:	94bfffcc 	andi	r18,r18,65535
   10cb0:	b9d1383a 	mul	r8,r23,r7
   10cb4:	90a4b03a 	or	r18,r18,r2
   10cb8:	d9800317 	ldw	r6,12(sp)
   10cbc:	9200062e 	bgeu	r18,r8,10cd8 <__divdf3+0x3f4>
   10cc0:	9725883a 	add	r18,r18,fp
   10cc4:	38bfffc4 	addi	r2,r7,-1
   10cc8:	9700d636 	bltu	r18,fp,11024 <__divdf3+0x740>
   10ccc:	9200d52e 	bgeu	r18,r8,11024 <__divdf3+0x740>
   10cd0:	39ffff84 	addi	r7,r7,-2
   10cd4:	9725883a 	add	r18,r18,fp
   10cd8:	3004943a 	slli	r2,r6,16
   10cdc:	b012d43a 	srli	r9,r22,16
   10ce0:	b1bfffcc 	andi	r6,r22,65535
   10ce4:	11e2b03a 	or	r17,r2,r7
   10ce8:	8806d43a 	srli	r3,r17,16
   10cec:	893fffcc 	andi	r4,r17,65535
   10cf0:	218b383a 	mul	r5,r4,r6
   10cf4:	30c5383a 	mul	r2,r6,r3
   10cf8:	2249383a 	mul	r4,r4,r9
   10cfc:	280ed43a 	srli	r7,r5,16
   10d00:	9225c83a 	sub	r18,r18,r8
   10d04:	2089883a 	add	r4,r4,r2
   10d08:	3909883a 	add	r4,r7,r4
   10d0c:	1a47383a 	mul	r3,r3,r9
   10d10:	2080022e 	bgeu	r4,r2,10d1c <__divdf3+0x438>
   10d14:	00800074 	movhi	r2,1
   10d18:	1887883a 	add	r3,r3,r2
   10d1c:	2004d43a 	srli	r2,r4,16
   10d20:	2008943a 	slli	r4,r4,16
   10d24:	297fffcc 	andi	r5,r5,65535
   10d28:	10c7883a 	add	r3,r2,r3
   10d2c:	2149883a 	add	r4,r4,r5
   10d30:	90c0a536 	bltu	r18,r3,10fc8 <__divdf3+0x6e4>
   10d34:	90c0bf26 	beq	r18,r3,11034 <__divdf3+0x750>
   10d38:	90c7c83a 	sub	r3,r18,r3
   10d3c:	810fc83a 	sub	r7,r16,r4
   10d40:	81e5803a 	cmpltu	r18,r16,r7
   10d44:	1ca5c83a 	sub	r18,r3,r18
   10d48:	e480c126 	beq	fp,r18,11050 <__divdf3+0x76c>
   10d4c:	a00b883a 	mov	r5,r20
   10d50:	9009883a 	mov	r4,r18
   10d54:	d9800315 	stw	r6,12(sp)
   10d58:	d9c00215 	stw	r7,8(sp)
   10d5c:	da400115 	stw	r9,4(sp)
   10d60:	000ff7c0 	call	ff7c <__udivsi3>
   10d64:	a00b883a 	mov	r5,r20
   10d68:	9009883a 	mov	r4,r18
   10d6c:	d8800015 	stw	r2,0(sp)
   10d70:	000ffe00 	call	ffe0 <__umodsi3>
   10d74:	d9c00217 	ldw	r7,8(sp)
   10d78:	da000017 	ldw	r8,0(sp)
   10d7c:	1006943a 	slli	r3,r2,16
   10d80:	3804d43a 	srli	r2,r7,16
   10d84:	ba21383a 	mul	r16,r23,r8
   10d88:	d9800317 	ldw	r6,12(sp)
   10d8c:	10c4b03a 	or	r2,r2,r3
   10d90:	da400117 	ldw	r9,4(sp)
   10d94:	1400062e 	bgeu	r2,r16,10db0 <__divdf3+0x4cc>
   10d98:	1705883a 	add	r2,r2,fp
   10d9c:	40ffffc4 	addi	r3,r8,-1
   10da0:	1700ad36 	bltu	r2,fp,11058 <__divdf3+0x774>
   10da4:	1400ac2e 	bgeu	r2,r16,11058 <__divdf3+0x774>
   10da8:	423fff84 	addi	r8,r8,-2
   10dac:	1705883a 	add	r2,r2,fp
   10db0:	1421c83a 	sub	r16,r2,r16
   10db4:	a00b883a 	mov	r5,r20
   10db8:	8009883a 	mov	r4,r16
   10dbc:	d9800315 	stw	r6,12(sp)
   10dc0:	d9c00215 	stw	r7,8(sp)
   10dc4:	da000015 	stw	r8,0(sp)
   10dc8:	da400115 	stw	r9,4(sp)
   10dcc:	000ff7c0 	call	ff7c <__udivsi3>
   10dd0:	8009883a 	mov	r4,r16
   10dd4:	a00b883a 	mov	r5,r20
   10dd8:	1025883a 	mov	r18,r2
   10ddc:	000ffe00 	call	ffe0 <__umodsi3>
   10de0:	d9c00217 	ldw	r7,8(sp)
   10de4:	1004943a 	slli	r2,r2,16
   10de8:	bcaf383a 	mul	r23,r23,r18
   10dec:	393fffcc 	andi	r4,r7,65535
   10df0:	2088b03a 	or	r4,r4,r2
   10df4:	d9800317 	ldw	r6,12(sp)
   10df8:	da000017 	ldw	r8,0(sp)
   10dfc:	da400117 	ldw	r9,4(sp)
   10e00:	25c0062e 	bgeu	r4,r23,10e1c <__divdf3+0x538>
   10e04:	2709883a 	add	r4,r4,fp
   10e08:	90bfffc4 	addi	r2,r18,-1
   10e0c:	27009436 	bltu	r4,fp,11060 <__divdf3+0x77c>
   10e10:	25c0932e 	bgeu	r4,r23,11060 <__divdf3+0x77c>
   10e14:	94bfff84 	addi	r18,r18,-2
   10e18:	2709883a 	add	r4,r4,fp
   10e1c:	4004943a 	slli	r2,r8,16
   10e20:	25efc83a 	sub	r23,r4,r23
   10e24:	1490b03a 	or	r8,r2,r18
   10e28:	4008d43a 	srli	r4,r8,16
   10e2c:	40ffffcc 	andi	r3,r8,65535
   10e30:	30c5383a 	mul	r2,r6,r3
   10e34:	1a47383a 	mul	r3,r3,r9
   10e38:	310d383a 	mul	r6,r6,r4
   10e3c:	100ad43a 	srli	r5,r2,16
   10e40:	4913383a 	mul	r9,r9,r4
   10e44:	1987883a 	add	r3,r3,r6
   10e48:	28c7883a 	add	r3,r5,r3
   10e4c:	1980022e 	bgeu	r3,r6,10e58 <__divdf3+0x574>
   10e50:	01000074 	movhi	r4,1
   10e54:	4913883a 	add	r9,r9,r4
   10e58:	1808d43a 	srli	r4,r3,16
   10e5c:	1806943a 	slli	r3,r3,16
   10e60:	10bfffcc 	andi	r2,r2,65535
   10e64:	2253883a 	add	r9,r4,r9
   10e68:	1887883a 	add	r3,r3,r2
   10e6c:	ba403836 	bltu	r23,r9,10f50 <__divdf3+0x66c>
   10e70:	ba403626 	beq	r23,r9,10f4c <__divdf3+0x668>
   10e74:	42000054 	ori	r8,r8,1
   10e78:	a880ffc4 	addi	r2,r21,1023
   10e7c:	00bf570e 	bge	zero,r2,10bdc <__divdf3+0x2f8>
   10e80:	40c001cc 	andi	r3,r8,7
   10e84:	18000726 	beq	r3,zero,10ea4 <__divdf3+0x5c0>
   10e88:	40c003cc 	andi	r3,r8,15
   10e8c:	01000104 	movi	r4,4
   10e90:	19000426 	beq	r3,r4,10ea4 <__divdf3+0x5c0>
   10e94:	4107883a 	add	r3,r8,r4
   10e98:	1a11803a 	cmpltu	r8,r3,r8
   10e9c:	8a23883a 	add	r17,r17,r8
   10ea0:	1811883a 	mov	r8,r3
   10ea4:	88c0402c 	andhi	r3,r17,256
   10ea8:	18000426 	beq	r3,zero,10ebc <__divdf3+0x5d8>
   10eac:	00ffc034 	movhi	r3,65280
   10eb0:	18ffffc4 	addi	r3,r3,-1
   10eb4:	a8810004 	addi	r2,r21,1024
   10eb8:	88e2703a 	and	r17,r17,r3
   10ebc:	00c1ff84 	movi	r3,2046
   10ec0:	18bee316 	blt	r3,r2,10a50 <__divdf3+0x16c>
   10ec4:	8824977a 	slli	r18,r17,29
   10ec8:	4010d0fa 	srli	r8,r8,3
   10ecc:	8822927a 	slli	r17,r17,9
   10ed0:	1081ffcc 	andi	r2,r2,2047
   10ed4:	9224b03a 	or	r18,r18,r8
   10ed8:	880ad33a 	srli	r5,r17,12
   10edc:	98c0004c 	andi	r3,r19,1
   10ee0:	003edf06 	br	10a60 <__divdf3+0x17c>
   10ee4:	8080022c 	andhi	r2,r16,8
   10ee8:	10001226 	beq	r2,zero,10f34 <__divdf3+0x650>
   10eec:	8880022c 	andhi	r2,r17,8
   10ef0:	1000101e 	bne	r2,zero,10f34 <__divdf3+0x650>
   10ef4:	00800434 	movhi	r2,16
   10ef8:	89400234 	orhi	r5,r17,8
   10efc:	10bfffc4 	addi	r2,r2,-1
   10f00:	b007883a 	mov	r3,r22
   10f04:	288a703a 	and	r5,r5,r2
   10f08:	4025883a 	mov	r18,r8
   10f0c:	003f3106 	br	10bd4 <__divdf3+0x2f0>
   10f10:	008000c4 	movi	r2,3
   10f14:	3880a626 	beq	r7,r2,111b0 <__divdf3+0x8cc>
   10f18:	00800044 	movi	r2,1
   10f1c:	3880521e 	bne	r7,r2,11068 <__divdf3+0x784>
   10f20:	b807883a 	mov	r3,r23
   10f24:	0005883a 	mov	r2,zero
   10f28:	000b883a 	mov	r5,zero
   10f2c:	0025883a 	mov	r18,zero
   10f30:	003ecb06 	br	10a60 <__divdf3+0x17c>
   10f34:	00800434 	movhi	r2,16
   10f38:	81400234 	orhi	r5,r16,8
   10f3c:	10bfffc4 	addi	r2,r2,-1
   10f40:	a007883a 	mov	r3,r20
   10f44:	288a703a 	and	r5,r5,r2
   10f48:	003f2206 	br	10bd4 <__divdf3+0x2f0>
   10f4c:	183fca26 	beq	r3,zero,10e78 <__divdf3+0x594>
   10f50:	e5ef883a 	add	r23,fp,r23
   10f54:	40bfffc4 	addi	r2,r8,-1
   10f58:	bf00392e 	bgeu	r23,fp,11040 <__divdf3+0x75c>
   10f5c:	1011883a 	mov	r8,r2
   10f60:	ba7fc41e 	bne	r23,r9,10e74 <__divdf3+0x590>
   10f64:	b0ffc31e 	bne	r22,r3,10e74 <__divdf3+0x590>
   10f68:	003fc306 	br	10e78 <__divdf3+0x594>
   10f6c:	143ff604 	addi	r16,r2,-40
   10f70:	9c20983a 	sll	r16,r19,r16
   10f74:	0025883a 	mov	r18,zero
   10f78:	003ee206 	br	10b04 <__divdf3+0x220>
   10f7c:	d9800315 	stw	r6,12(sp)
   10f80:	d9c00215 	stw	r7,8(sp)
   10f84:	001263c0 	call	1263c <__clzsi2>
   10f88:	10800804 	addi	r2,r2,32
   10f8c:	d9c00217 	ldw	r7,8(sp)
   10f90:	d9800317 	ldw	r6,12(sp)
   10f94:	003ed106 	br	10adc <__divdf3+0x1f8>
   10f98:	147ff604 	addi	r17,r2,-40
   10f9c:	3462983a 	sll	r17,r6,r17
   10fa0:	0011883a 	mov	r8,zero
   10fa4:	003ef506 	br	10b7c <__divdf3+0x298>
   10fa8:	3009883a 	mov	r4,r6
   10fac:	d9800315 	stw	r6,12(sp)
   10fb0:	da400115 	stw	r9,4(sp)
   10fb4:	001263c0 	call	1263c <__clzsi2>
   10fb8:	10800804 	addi	r2,r2,32
   10fbc:	da400117 	ldw	r9,4(sp)
   10fc0:	d9800317 	ldw	r6,12(sp)
   10fc4:	003ee306 	br	10b54 <__divdf3+0x270>
   10fc8:	85a1883a 	add	r16,r16,r22
   10fcc:	8585803a 	cmpltu	r2,r16,r22
   10fd0:	1705883a 	add	r2,r2,fp
   10fd4:	14a5883a 	add	r18,r2,r18
   10fd8:	88bfffc4 	addi	r2,r17,-1
   10fdc:	e4800c2e 	bgeu	fp,r18,11010 <__divdf3+0x72c>
   10fe0:	90c03e36 	bltu	r18,r3,110dc <__divdf3+0x7f8>
   10fe4:	1c806926 	beq	r3,r18,1118c <__divdf3+0x8a8>
   10fe8:	90c7c83a 	sub	r3,r18,r3
   10fec:	1023883a 	mov	r17,r2
   10ff0:	003f5206 	br	10d3c <__divdf3+0x458>
   10ff4:	923f0436 	bltu	r18,r8,10c08 <__divdf3+0x324>
   10ff8:	800897fa 	slli	r4,r16,31
   10ffc:	9004d07a 	srli	r2,r18,1
   11000:	8006d07a 	srli	r3,r16,1
   11004:	902097fa 	slli	r16,r18,31
   11008:	20a4b03a 	or	r18,r4,r2
   1100c:	003f0106 	br	10c14 <__divdf3+0x330>
   11010:	e4bff51e 	bne	fp,r18,10fe8 <__divdf3+0x704>
   11014:	85bff22e 	bgeu	r16,r22,10fe0 <__divdf3+0x6fc>
   11018:	e0c7c83a 	sub	r3,fp,r3
   1101c:	1023883a 	mov	r17,r2
   11020:	003f4606 	br	10d3c <__divdf3+0x458>
   11024:	100f883a 	mov	r7,r2
   11028:	003f2b06 	br	10cd8 <__divdf3+0x3f4>
   1102c:	180d883a 	mov	r6,r3
   11030:	003f1306 	br	10c80 <__divdf3+0x39c>
   11034:	813fe436 	bltu	r16,r4,10fc8 <__divdf3+0x6e4>
   11038:	0007883a 	mov	r3,zero
   1103c:	003f3f06 	br	10d3c <__divdf3+0x458>
   11040:	ba402c36 	bltu	r23,r9,110f4 <__divdf3+0x810>
   11044:	4dc05426 	beq	r9,r23,11198 <__divdf3+0x8b4>
   11048:	1011883a 	mov	r8,r2
   1104c:	003f8906 	br	10e74 <__divdf3+0x590>
   11050:	023fffc4 	movi	r8,-1
   11054:	003f8806 	br	10e78 <__divdf3+0x594>
   11058:	1811883a 	mov	r8,r3
   1105c:	003f5406 	br	10db0 <__divdf3+0x4cc>
   11060:	1025883a 	mov	r18,r2
   11064:	003f6d06 	br	10e1c <__divdf3+0x538>
   11068:	b827883a 	mov	r19,r23
   1106c:	003f8206 	br	10e78 <__divdf3+0x594>
   11070:	010007c4 	movi	r4,31
   11074:	20c02616 	blt	r4,r3,11110 <__divdf3+0x82c>
   11078:	00800804 	movi	r2,32
   1107c:	10c5c83a 	sub	r2,r2,r3
   11080:	888a983a 	sll	r5,r17,r2
   11084:	40c8d83a 	srl	r4,r8,r3
   11088:	4084983a 	sll	r2,r8,r2
   1108c:	88e2d83a 	srl	r17,r17,r3
   11090:	2906b03a 	or	r3,r5,r4
   11094:	1004c03a 	cmpne	r2,r2,zero
   11098:	1886b03a 	or	r3,r3,r2
   1109c:	188001cc 	andi	r2,r3,7
   110a0:	10000726 	beq	r2,zero,110c0 <__divdf3+0x7dc>
   110a4:	188003cc 	andi	r2,r3,15
   110a8:	01000104 	movi	r4,4
   110ac:	11000426 	beq	r2,r4,110c0 <__divdf3+0x7dc>
   110b0:	1805883a 	mov	r2,r3
   110b4:	10c00104 	addi	r3,r2,4
   110b8:	1885803a 	cmpltu	r2,r3,r2
   110bc:	88a3883a 	add	r17,r17,r2
   110c0:	8880202c 	andhi	r2,r17,128
   110c4:	10002726 	beq	r2,zero,11164 <__divdf3+0x880>
   110c8:	98c0004c 	andi	r3,r19,1
   110cc:	00800044 	movi	r2,1
   110d0:	000b883a 	mov	r5,zero
   110d4:	0025883a 	mov	r18,zero
   110d8:	003e6106 	br	10a60 <__divdf3+0x17c>
   110dc:	85a1883a 	add	r16,r16,r22
   110e0:	8585803a 	cmpltu	r2,r16,r22
   110e4:	1705883a 	add	r2,r2,fp
   110e8:	14a5883a 	add	r18,r2,r18
   110ec:	8c7fff84 	addi	r17,r17,-2
   110f0:	003f1106 	br	10d38 <__divdf3+0x454>
   110f4:	b589883a 	add	r4,r22,r22
   110f8:	25ad803a 	cmpltu	r22,r4,r22
   110fc:	b739883a 	add	fp,r22,fp
   11100:	40bfff84 	addi	r2,r8,-2
   11104:	bf2f883a 	add	r23,r23,fp
   11108:	202d883a 	mov	r22,r4
   1110c:	003f9306 	br	10f5c <__divdf3+0x678>
   11110:	013ff844 	movi	r4,-31
   11114:	2085c83a 	sub	r2,r4,r2
   11118:	8888d83a 	srl	r4,r17,r2
   1111c:	00800804 	movi	r2,32
   11120:	18802126 	beq	r3,r2,111a8 <__divdf3+0x8c4>
   11124:	00801004 	movi	r2,64
   11128:	10c5c83a 	sub	r2,r2,r3
   1112c:	8884983a 	sll	r2,r17,r2
   11130:	1204b03a 	or	r2,r2,r8
   11134:	1004c03a 	cmpne	r2,r2,zero
   11138:	2084b03a 	or	r2,r4,r2
   1113c:	144001cc 	andi	r17,r2,7
   11140:	88000d1e 	bne	r17,zero,11178 <__divdf3+0x894>
   11144:	000b883a 	mov	r5,zero
   11148:	1024d0fa 	srli	r18,r2,3
   1114c:	98c0004c 	andi	r3,r19,1
   11150:	0005883a 	mov	r2,zero
   11154:	9464b03a 	or	r18,r18,r17
   11158:	003e4106 	br	10a60 <__divdf3+0x17c>
   1115c:	1007883a 	mov	r3,r2
   11160:	0023883a 	mov	r17,zero
   11164:	880a927a 	slli	r5,r17,9
   11168:	1805883a 	mov	r2,r3
   1116c:	8822977a 	slli	r17,r17,29
   11170:	280ad33a 	srli	r5,r5,12
   11174:	003ff406 	br	11148 <__divdf3+0x864>
   11178:	10c003cc 	andi	r3,r2,15
   1117c:	01000104 	movi	r4,4
   11180:	193ff626 	beq	r3,r4,1115c <__divdf3+0x878>
   11184:	0023883a 	mov	r17,zero
   11188:	003fca06 	br	110b4 <__divdf3+0x7d0>
   1118c:	813fd336 	bltu	r16,r4,110dc <__divdf3+0x7f8>
   11190:	1023883a 	mov	r17,r2
   11194:	003fa806 	br	11038 <__divdf3+0x754>
   11198:	b0ffd636 	bltu	r22,r3,110f4 <__divdf3+0x810>
   1119c:	1011883a 	mov	r8,r2
   111a0:	b0ff341e 	bne	r22,r3,10e74 <__divdf3+0x590>
   111a4:	003f3406 	br	10e78 <__divdf3+0x594>
   111a8:	0005883a 	mov	r2,zero
   111ac:	003fe006 	br	11130 <__divdf3+0x84c>
   111b0:	00800434 	movhi	r2,16
   111b4:	89400234 	orhi	r5,r17,8
   111b8:	10bfffc4 	addi	r2,r2,-1
   111bc:	b807883a 	mov	r3,r23
   111c0:	288a703a 	and	r5,r5,r2
   111c4:	4025883a 	mov	r18,r8
   111c8:	003e8206 	br	10bd4 <__divdf3+0x2f0>

000111cc <__eqdf2>:
   111cc:	2804d53a 	srli	r2,r5,20
   111d0:	3806d53a 	srli	r3,r7,20
   111d4:	02000434 	movhi	r8,16
   111d8:	423fffc4 	addi	r8,r8,-1
   111dc:	1081ffcc 	andi	r2,r2,2047
   111e0:	0281ffc4 	movi	r10,2047
   111e4:	2a12703a 	and	r9,r5,r8
   111e8:	18c1ffcc 	andi	r3,r3,2047
   111ec:	3a10703a 	and	r8,r7,r8
   111f0:	280ad7fa 	srli	r5,r5,31
   111f4:	380ed7fa 	srli	r7,r7,31
   111f8:	12801026 	beq	r2,r10,1123c <__eqdf2+0x70>
   111fc:	0281ffc4 	movi	r10,2047
   11200:	1a800a26 	beq	r3,r10,1122c <__eqdf2+0x60>
   11204:	10c00226 	beq	r2,r3,11210 <__eqdf2+0x44>
   11208:	00800044 	movi	r2,1
   1120c:	f800283a 	ret
   11210:	4a3ffd1e 	bne	r9,r8,11208 <__eqdf2+0x3c>
   11214:	21bffc1e 	bne	r4,r6,11208 <__eqdf2+0x3c>
   11218:	29c00c26 	beq	r5,r7,1124c <__eqdf2+0x80>
   1121c:	103ffa1e 	bne	r2,zero,11208 <__eqdf2+0x3c>
   11220:	2244b03a 	or	r2,r4,r9
   11224:	1004c03a 	cmpne	r2,r2,zero
   11228:	f800283a 	ret
   1122c:	3214b03a 	or	r10,r6,r8
   11230:	503ff426 	beq	r10,zero,11204 <__eqdf2+0x38>
   11234:	00800044 	movi	r2,1
   11238:	f800283a 	ret
   1123c:	2254b03a 	or	r10,r4,r9
   11240:	503fee26 	beq	r10,zero,111fc <__eqdf2+0x30>
   11244:	00800044 	movi	r2,1
   11248:	f800283a 	ret
   1124c:	0005883a 	mov	r2,zero
   11250:	f800283a 	ret

00011254 <__gedf2>:
   11254:	2804d53a 	srli	r2,r5,20
   11258:	3806d53a 	srli	r3,r7,20
   1125c:	02000434 	movhi	r8,16
   11260:	423fffc4 	addi	r8,r8,-1
   11264:	1081ffcc 	andi	r2,r2,2047
   11268:	0241ffc4 	movi	r9,2047
   1126c:	2a14703a 	and	r10,r5,r8
   11270:	18c1ffcc 	andi	r3,r3,2047
   11274:	3a10703a 	and	r8,r7,r8
   11278:	280ad7fa 	srli	r5,r5,31
   1127c:	380ed7fa 	srli	r7,r7,31
   11280:	12401d26 	beq	r2,r9,112f8 <__gedf2+0xa4>
   11284:	0241ffc4 	movi	r9,2047
   11288:	1a401226 	beq	r3,r9,112d4 <__gedf2+0x80>
   1128c:	1000081e 	bne	r2,zero,112b0 <__gedf2+0x5c>
   11290:	2296b03a 	or	r11,r4,r10
   11294:	5813003a 	cmpeq	r9,r11,zero
   11298:	1800091e 	bne	r3,zero,112c0 <__gedf2+0x6c>
   1129c:	3218b03a 	or	r12,r6,r8
   112a0:	6000071e 	bne	r12,zero,112c0 <__gedf2+0x6c>
   112a4:	0005883a 	mov	r2,zero
   112a8:	5800101e 	bne	r11,zero,112ec <__gedf2+0x98>
   112ac:	f800283a 	ret
   112b0:	18000c1e 	bne	r3,zero,112e4 <__gedf2+0x90>
   112b4:	3212b03a 	or	r9,r6,r8
   112b8:	48000c26 	beq	r9,zero,112ec <__gedf2+0x98>
   112bc:	0013883a 	mov	r9,zero
   112c0:	39c03fcc 	andi	r7,r7,255
   112c4:	48000826 	beq	r9,zero,112e8 <__gedf2+0x94>
   112c8:	38000926 	beq	r7,zero,112f0 <__gedf2+0x9c>
   112cc:	00800044 	movi	r2,1
   112d0:	f800283a 	ret
   112d4:	3212b03a 	or	r9,r6,r8
   112d8:	483fec26 	beq	r9,zero,1128c <__gedf2+0x38>
   112dc:	00bfff84 	movi	r2,-2
   112e0:	f800283a 	ret
   112e4:	39c03fcc 	andi	r7,r7,255
   112e8:	29c00626 	beq	r5,r7,11304 <__gedf2+0xb0>
   112ec:	283ff726 	beq	r5,zero,112cc <__gedf2+0x78>
   112f0:	00bfffc4 	movi	r2,-1
   112f4:	f800283a 	ret
   112f8:	2292b03a 	or	r9,r4,r10
   112fc:	483fe126 	beq	r9,zero,11284 <__gedf2+0x30>
   11300:	003ff606 	br	112dc <__gedf2+0x88>
   11304:	18bff916 	blt	r3,r2,112ec <__gedf2+0x98>
   11308:	10c00316 	blt	r2,r3,11318 <__gedf2+0xc4>
   1130c:	42bff736 	bltu	r8,r10,112ec <__gedf2+0x98>
   11310:	52000326 	beq	r10,r8,11320 <__gedf2+0xcc>
   11314:	5200042e 	bgeu	r10,r8,11328 <__gedf2+0xd4>
   11318:	283fec1e 	bne	r5,zero,112cc <__gedf2+0x78>
   1131c:	003ff406 	br	112f0 <__gedf2+0x9c>
   11320:	313ff236 	bltu	r6,r4,112ec <__gedf2+0x98>
   11324:	21bffc36 	bltu	r4,r6,11318 <__gedf2+0xc4>
   11328:	0005883a 	mov	r2,zero
   1132c:	f800283a 	ret

00011330 <__ledf2>:
   11330:	2804d53a 	srli	r2,r5,20
   11334:	3810d53a 	srli	r8,r7,20
   11338:	00c00434 	movhi	r3,16
   1133c:	18ffffc4 	addi	r3,r3,-1
   11340:	1081ffcc 	andi	r2,r2,2047
   11344:	0241ffc4 	movi	r9,2047
   11348:	28d4703a 	and	r10,r5,r3
   1134c:	4201ffcc 	andi	r8,r8,2047
   11350:	38c6703a 	and	r3,r7,r3
   11354:	280ad7fa 	srli	r5,r5,31
   11358:	380ed7fa 	srli	r7,r7,31
   1135c:	12401f26 	beq	r2,r9,113dc <__ledf2+0xac>
   11360:	0241ffc4 	movi	r9,2047
   11364:	42401426 	beq	r8,r9,113b8 <__ledf2+0x88>
   11368:	1000091e 	bne	r2,zero,11390 <__ledf2+0x60>
   1136c:	2296b03a 	or	r11,r4,r10
   11370:	5813003a 	cmpeq	r9,r11,zero
   11374:	29403fcc 	andi	r5,r5,255
   11378:	40000a1e 	bne	r8,zero,113a4 <__ledf2+0x74>
   1137c:	30d8b03a 	or	r12,r6,r3
   11380:	6000081e 	bne	r12,zero,113a4 <__ledf2+0x74>
   11384:	0005883a 	mov	r2,zero
   11388:	5800111e 	bne	r11,zero,113d0 <__ledf2+0xa0>
   1138c:	f800283a 	ret
   11390:	29403fcc 	andi	r5,r5,255
   11394:	40000c1e 	bne	r8,zero,113c8 <__ledf2+0x98>
   11398:	30d2b03a 	or	r9,r6,r3
   1139c:	48000c26 	beq	r9,zero,113d0 <__ledf2+0xa0>
   113a0:	0013883a 	mov	r9,zero
   113a4:	39c03fcc 	andi	r7,r7,255
   113a8:	48000826 	beq	r9,zero,113cc <__ledf2+0x9c>
   113ac:	38001126 	beq	r7,zero,113f4 <__ledf2+0xc4>
   113b0:	00800044 	movi	r2,1
   113b4:	f800283a 	ret
   113b8:	30d2b03a 	or	r9,r6,r3
   113bc:	483fea26 	beq	r9,zero,11368 <__ledf2+0x38>
   113c0:	00800084 	movi	r2,2
   113c4:	f800283a 	ret
   113c8:	39c03fcc 	andi	r7,r7,255
   113cc:	39400726 	beq	r7,r5,113ec <__ledf2+0xbc>
   113d0:	2800081e 	bne	r5,zero,113f4 <__ledf2+0xc4>
   113d4:	00800044 	movi	r2,1
   113d8:	f800283a 	ret
   113dc:	2292b03a 	or	r9,r4,r10
   113e0:	483fdf26 	beq	r9,zero,11360 <__ledf2+0x30>
   113e4:	00800084 	movi	r2,2
   113e8:	f800283a 	ret
   113ec:	4080030e 	bge	r8,r2,113fc <__ledf2+0xcc>
   113f0:	383fef26 	beq	r7,zero,113b0 <__ledf2+0x80>
   113f4:	00bfffc4 	movi	r2,-1
   113f8:	f800283a 	ret
   113fc:	123feb16 	blt	r2,r8,113ac <__ledf2+0x7c>
   11400:	1abff336 	bltu	r3,r10,113d0 <__ledf2+0xa0>
   11404:	50c00326 	beq	r10,r3,11414 <__ledf2+0xe4>
   11408:	50c0042e 	bgeu	r10,r3,1141c <__ledf2+0xec>
   1140c:	283fe81e 	bne	r5,zero,113b0 <__ledf2+0x80>
   11410:	003ff806 	br	113f4 <__ledf2+0xc4>
   11414:	313fee36 	bltu	r6,r4,113d0 <__ledf2+0xa0>
   11418:	21bffc36 	bltu	r4,r6,1140c <__ledf2+0xdc>
   1141c:	0005883a 	mov	r2,zero
   11420:	f800283a 	ret

00011424 <__muldf3>:
   11424:	defff304 	addi	sp,sp,-52
   11428:	2804d53a 	srli	r2,r5,20
   1142c:	dd800915 	stw	r22,36(sp)
   11430:	282cd7fa 	srli	r22,r5,31
   11434:	dc000315 	stw	r16,12(sp)
   11438:	04000434 	movhi	r16,16
   1143c:	dd400815 	stw	r21,32(sp)
   11440:	dc800515 	stw	r18,20(sp)
   11444:	843fffc4 	addi	r16,r16,-1
   11448:	dfc00c15 	stw	ra,48(sp)
   1144c:	df000b15 	stw	fp,44(sp)
   11450:	ddc00a15 	stw	r23,40(sp)
   11454:	dd000715 	stw	r20,28(sp)
   11458:	dcc00615 	stw	r19,24(sp)
   1145c:	dc400415 	stw	r17,16(sp)
   11460:	1481ffcc 	andi	r18,r2,2047
   11464:	2c20703a 	and	r16,r5,r16
   11468:	b02b883a 	mov	r21,r22
   1146c:	b2403fcc 	andi	r9,r22,255
   11470:	90006026 	beq	r18,zero,115f4 <__muldf3+0x1d0>
   11474:	0081ffc4 	movi	r2,2047
   11478:	2029883a 	mov	r20,r4
   1147c:	90803626 	beq	r18,r2,11558 <__muldf3+0x134>
   11480:	80800434 	orhi	r2,r16,16
   11484:	100490fa 	slli	r2,r2,3
   11488:	2020d77a 	srli	r16,r4,29
   1148c:	202890fa 	slli	r20,r4,3
   11490:	94bf0044 	addi	r18,r18,-1023
   11494:	80a0b03a 	or	r16,r16,r2
   11498:	0027883a 	mov	r19,zero
   1149c:	0039883a 	mov	fp,zero
   114a0:	3804d53a 	srli	r2,r7,20
   114a4:	382ed7fa 	srli	r23,r7,31
   114a8:	04400434 	movhi	r17,16
   114ac:	8c7fffc4 	addi	r17,r17,-1
   114b0:	1081ffcc 	andi	r2,r2,2047
   114b4:	3011883a 	mov	r8,r6
   114b8:	3c62703a 	and	r17,r7,r17
   114bc:	ba803fcc 	andi	r10,r23,255
   114c0:	10006d26 	beq	r2,zero,11678 <__muldf3+0x254>
   114c4:	00c1ffc4 	movi	r3,2047
   114c8:	10c06526 	beq	r2,r3,11660 <__muldf3+0x23c>
   114cc:	88c00434 	orhi	r3,r17,16
   114d0:	180690fa 	slli	r3,r3,3
   114d4:	3022d77a 	srli	r17,r6,29
   114d8:	301090fa 	slli	r8,r6,3
   114dc:	10bf0044 	addi	r2,r2,-1023
   114e0:	88e2b03a 	or	r17,r17,r3
   114e4:	000b883a 	mov	r5,zero
   114e8:	9085883a 	add	r2,r18,r2
   114ec:	2cc8b03a 	or	r4,r5,r19
   114f0:	00c003c4 	movi	r3,15
   114f4:	bdacf03a 	xor	r22,r23,r22
   114f8:	12c00044 	addi	r11,r2,1
   114fc:	19009936 	bltu	r3,r4,11764 <__muldf3+0x340>
   11500:	200890ba 	slli	r4,r4,2
   11504:	00c00074 	movhi	r3,1
   11508:	18c54604 	addi	r3,r3,5400
   1150c:	20c9883a 	add	r4,r4,r3
   11510:	20c00017 	ldw	r3,0(r4)
   11514:	1800683a 	jmp	r3
   11518:	00011764 	muli	zero,zero,1117
   1151c:	00011578 	rdprs	zero,zero,1109
   11520:	00011578 	rdprs	zero,zero,1109
   11524:	00011574 	movhi	zero,1109
   11528:	00011740 	call	1174 <VGA_clear_screen+0x70>
   1152c:	00011740 	call	1174 <VGA_clear_screen+0x70>
   11530:	00011728 	cmpgeui	zero,zero,1116
   11534:	00011574 	movhi	zero,1109
   11538:	00011740 	call	1174 <VGA_clear_screen+0x70>
   1153c:	00011728 	cmpgeui	zero,zero,1116
   11540:	00011740 	call	1174 <VGA_clear_screen+0x70>
   11544:	00011574 	movhi	zero,1109
   11548:	00011750 	cmplti	zero,zero,1117
   1154c:	00011750 	cmplti	zero,zero,1117
   11550:	00011750 	cmplti	zero,zero,1117
   11554:	0001196c 	andhi	zero,zero,1125
   11558:	2404b03a 	or	r2,r4,r16
   1155c:	10006f1e 	bne	r2,zero,1171c <__muldf3+0x2f8>
   11560:	04c00204 	movi	r19,8
   11564:	0021883a 	mov	r16,zero
   11568:	0029883a 	mov	r20,zero
   1156c:	07000084 	movi	fp,2
   11570:	003fcb06 	br	114a0 <__muldf3+0x7c>
   11574:	502d883a 	mov	r22,r10
   11578:	00800084 	movi	r2,2
   1157c:	28805726 	beq	r5,r2,116dc <__muldf3+0x2b8>
   11580:	008000c4 	movi	r2,3
   11584:	28816626 	beq	r5,r2,11b20 <__muldf3+0x6fc>
   11588:	00800044 	movi	r2,1
   1158c:	2881411e 	bne	r5,r2,11a94 <__muldf3+0x670>
   11590:	b02b883a 	mov	r21,r22
   11594:	0005883a 	mov	r2,zero
   11598:	000b883a 	mov	r5,zero
   1159c:	0029883a 	mov	r20,zero
   115a0:	1004953a 	slli	r2,r2,20
   115a4:	a8c03fcc 	andi	r3,r21,255
   115a8:	04400434 	movhi	r17,16
   115ac:	8c7fffc4 	addi	r17,r17,-1
   115b0:	180697fa 	slli	r3,r3,31
   115b4:	2c4a703a 	and	r5,r5,r17
   115b8:	288ab03a 	or	r5,r5,r2
   115bc:	28c6b03a 	or	r3,r5,r3
   115c0:	a005883a 	mov	r2,r20
   115c4:	dfc00c17 	ldw	ra,48(sp)
   115c8:	df000b17 	ldw	fp,44(sp)
   115cc:	ddc00a17 	ldw	r23,40(sp)
   115d0:	dd800917 	ldw	r22,36(sp)
   115d4:	dd400817 	ldw	r21,32(sp)
   115d8:	dd000717 	ldw	r20,28(sp)
   115dc:	dcc00617 	ldw	r19,24(sp)
   115e0:	dc800517 	ldw	r18,20(sp)
   115e4:	dc400417 	ldw	r17,16(sp)
   115e8:	dc000317 	ldw	r16,12(sp)
   115ec:	dec00d04 	addi	sp,sp,52
   115f0:	f800283a 	ret
   115f4:	2404b03a 	or	r2,r4,r16
   115f8:	2027883a 	mov	r19,r4
   115fc:	10004226 	beq	r2,zero,11708 <__muldf3+0x2e4>
   11600:	8000fc26 	beq	r16,zero,119f4 <__muldf3+0x5d0>
   11604:	8009883a 	mov	r4,r16
   11608:	d9800215 	stw	r6,8(sp)
   1160c:	d9c00015 	stw	r7,0(sp)
   11610:	da400115 	stw	r9,4(sp)
   11614:	001263c0 	call	1263c <__clzsi2>
   11618:	d9800217 	ldw	r6,8(sp)
   1161c:	d9c00017 	ldw	r7,0(sp)
   11620:	da400117 	ldw	r9,4(sp)
   11624:	113ffd44 	addi	r4,r2,-11
   11628:	00c00704 	movi	r3,28
   1162c:	1900ed16 	blt	r3,r4,119e4 <__muldf3+0x5c0>
   11630:	00c00744 	movi	r3,29
   11634:	147ffe04 	addi	r17,r2,-8
   11638:	1907c83a 	sub	r3,r3,r4
   1163c:	8460983a 	sll	r16,r16,r17
   11640:	98c6d83a 	srl	r3,r19,r3
   11644:	9c68983a 	sll	r20,r19,r17
   11648:	1c20b03a 	or	r16,r3,r16
   1164c:	1080fcc4 	addi	r2,r2,1011
   11650:	00a5c83a 	sub	r18,zero,r2
   11654:	0027883a 	mov	r19,zero
   11658:	0039883a 	mov	fp,zero
   1165c:	003f9006 	br	114a0 <__muldf3+0x7c>
   11660:	3446b03a 	or	r3,r6,r17
   11664:	1800261e 	bne	r3,zero,11700 <__muldf3+0x2dc>
   11668:	0023883a 	mov	r17,zero
   1166c:	0011883a 	mov	r8,zero
   11670:	01400084 	movi	r5,2
   11674:	003f9c06 	br	114e8 <__muldf3+0xc4>
   11678:	3446b03a 	or	r3,r6,r17
   1167c:	18001c26 	beq	r3,zero,116f0 <__muldf3+0x2cc>
   11680:	8800ce26 	beq	r17,zero,119bc <__muldf3+0x598>
   11684:	8809883a 	mov	r4,r17
   11688:	d9800215 	stw	r6,8(sp)
   1168c:	da400115 	stw	r9,4(sp)
   11690:	da800015 	stw	r10,0(sp)
   11694:	001263c0 	call	1263c <__clzsi2>
   11698:	d9800217 	ldw	r6,8(sp)
   1169c:	da400117 	ldw	r9,4(sp)
   116a0:	da800017 	ldw	r10,0(sp)
   116a4:	113ffd44 	addi	r4,r2,-11
   116a8:	00c00704 	movi	r3,28
   116ac:	1900bf16 	blt	r3,r4,119ac <__muldf3+0x588>
   116b0:	00c00744 	movi	r3,29
   116b4:	123ffe04 	addi	r8,r2,-8
   116b8:	1907c83a 	sub	r3,r3,r4
   116bc:	8a22983a 	sll	r17,r17,r8
   116c0:	30c6d83a 	srl	r3,r6,r3
   116c4:	3210983a 	sll	r8,r6,r8
   116c8:	1c62b03a 	or	r17,r3,r17
   116cc:	1080fcc4 	addi	r2,r2,1011
   116d0:	0085c83a 	sub	r2,zero,r2
   116d4:	000b883a 	mov	r5,zero
   116d8:	003f8306 	br	114e8 <__muldf3+0xc4>
   116dc:	b02b883a 	mov	r21,r22
   116e0:	0081ffc4 	movi	r2,2047
   116e4:	000b883a 	mov	r5,zero
   116e8:	0029883a 	mov	r20,zero
   116ec:	003fac06 	br	115a0 <__muldf3+0x17c>
   116f0:	0023883a 	mov	r17,zero
   116f4:	0011883a 	mov	r8,zero
   116f8:	01400044 	movi	r5,1
   116fc:	003f7a06 	br	114e8 <__muldf3+0xc4>
   11700:	014000c4 	movi	r5,3
   11704:	003f7806 	br	114e8 <__muldf3+0xc4>
   11708:	04c00104 	movi	r19,4
   1170c:	0021883a 	mov	r16,zero
   11710:	0029883a 	mov	r20,zero
   11714:	07000044 	movi	fp,1
   11718:	003f6106 	br	114a0 <__muldf3+0x7c>
   1171c:	04c00304 	movi	r19,12
   11720:	070000c4 	movi	fp,3
   11724:	003f5e06 	br	114a0 <__muldf3+0x7c>
   11728:	01400434 	movhi	r5,16
   1172c:	002b883a 	mov	r21,zero
   11730:	297fffc4 	addi	r5,r5,-1
   11734:	053fffc4 	movi	r20,-1
   11738:	0081ffc4 	movi	r2,2047
   1173c:	003f9806 	br	115a0 <__muldf3+0x17c>
   11740:	8023883a 	mov	r17,r16
   11744:	a011883a 	mov	r8,r20
   11748:	e00b883a 	mov	r5,fp
   1174c:	003f8a06 	br	11578 <__muldf3+0x154>
   11750:	8023883a 	mov	r17,r16
   11754:	a011883a 	mov	r8,r20
   11758:	482d883a 	mov	r22,r9
   1175c:	e00b883a 	mov	r5,fp
   11760:	003f8506 	br	11578 <__muldf3+0x154>
   11764:	a00ad43a 	srli	r5,r20,16
   11768:	401ad43a 	srli	r13,r8,16
   1176c:	a53fffcc 	andi	r20,r20,65535
   11770:	423fffcc 	andi	r8,r8,65535
   11774:	4519383a 	mul	r12,r8,r20
   11778:	4147383a 	mul	r3,r8,r5
   1177c:	6d09383a 	mul	r4,r13,r20
   11780:	600cd43a 	srli	r6,r12,16
   11784:	2b5d383a 	mul	r14,r5,r13
   11788:	20c9883a 	add	r4,r4,r3
   1178c:	310d883a 	add	r6,r6,r4
   11790:	30c0022e 	bgeu	r6,r3,1179c <__muldf3+0x378>
   11794:	00c00074 	movhi	r3,1
   11798:	70dd883a 	add	r14,r14,r3
   1179c:	8826d43a 	srli	r19,r17,16
   117a0:	8bffffcc 	andi	r15,r17,65535
   117a4:	7d23383a 	mul	r17,r15,r20
   117a8:	7949383a 	mul	r4,r15,r5
   117ac:	9d29383a 	mul	r20,r19,r20
   117b0:	8814d43a 	srli	r10,r17,16
   117b4:	3012943a 	slli	r9,r6,16
   117b8:	a129883a 	add	r20,r20,r4
   117bc:	633fffcc 	andi	r12,r12,65535
   117c0:	5515883a 	add	r10,r10,r20
   117c4:	3006d43a 	srli	r3,r6,16
   117c8:	4b13883a 	add	r9,r9,r12
   117cc:	2ccb383a 	mul	r5,r5,r19
   117d0:	5100022e 	bgeu	r10,r4,117dc <__muldf3+0x3b8>
   117d4:	01000074 	movhi	r4,1
   117d8:	290b883a 	add	r5,r5,r4
   117dc:	802ad43a 	srli	r21,r16,16
   117e0:	843fffcc 	andi	r16,r16,65535
   117e4:	440d383a 	mul	r6,r8,r16
   117e8:	4565383a 	mul	r18,r8,r21
   117ec:	8349383a 	mul	r4,r16,r13
   117f0:	500e943a 	slli	r7,r10,16
   117f4:	3010d43a 	srli	r8,r6,16
   117f8:	5028d43a 	srli	r20,r10,16
   117fc:	2489883a 	add	r4,r4,r18
   11800:	8abfffcc 	andi	r10,r17,65535
   11804:	3a95883a 	add	r10,r7,r10
   11808:	4119883a 	add	r12,r8,r4
   1180c:	a169883a 	add	r20,r20,r5
   11810:	1a87883a 	add	r3,r3,r10
   11814:	6d5b383a 	mul	r13,r13,r21
   11818:	6480022e 	bgeu	r12,r18,11824 <__muldf3+0x400>
   1181c:	01000074 	movhi	r4,1
   11820:	691b883a 	add	r13,r13,r4
   11824:	7c25383a 	mul	r18,r15,r16
   11828:	7d4b383a 	mul	r5,r15,r21
   1182c:	84cf383a 	mul	r7,r16,r19
   11830:	901ed43a 	srli	r15,r18,16
   11834:	6008d43a 	srli	r4,r12,16
   11838:	6010943a 	slli	r8,r12,16
   1183c:	394f883a 	add	r7,r7,r5
   11840:	333fffcc 	andi	r12,r6,65535
   11844:	79df883a 	add	r15,r15,r7
   11848:	235b883a 	add	r13,r4,r13
   1184c:	9d63383a 	mul	r17,r19,r21
   11850:	4309883a 	add	r4,r8,r12
   11854:	7940022e 	bgeu	r15,r5,11860 <__muldf3+0x43c>
   11858:	01400074 	movhi	r5,1
   1185c:	8963883a 	add	r17,r17,r5
   11860:	780a943a 	slli	r5,r15,16
   11864:	91bfffcc 	andi	r6,r18,65535
   11868:	70c7883a 	add	r3,r14,r3
   1186c:	298d883a 	add	r6,r5,r6
   11870:	1a8f803a 	cmpltu	r7,r3,r10
   11874:	350b883a 	add	r5,r6,r20
   11878:	20c7883a 	add	r3,r4,r3
   1187c:	3955883a 	add	r10,r7,r5
   11880:	1909803a 	cmpltu	r4,r3,r4
   11884:	6a91883a 	add	r8,r13,r10
   11888:	780cd43a 	srli	r6,r15,16
   1188c:	2219883a 	add	r12,r4,r8
   11890:	2d0b803a 	cmpltu	r5,r5,r20
   11894:	51cf803a 	cmpltu	r7,r10,r7
   11898:	29ceb03a 	or	r7,r5,r7
   1189c:	4351803a 	cmpltu	r8,r8,r13
   118a0:	610b803a 	cmpltu	r5,r12,r4
   118a4:	4148b03a 	or	r4,r8,r5
   118a8:	398f883a 	add	r7,r7,r6
   118ac:	3909883a 	add	r4,r7,r4
   118b0:	1810927a 	slli	r8,r3,9
   118b4:	2449883a 	add	r4,r4,r17
   118b8:	2008927a 	slli	r4,r4,9
   118bc:	6022d5fa 	srli	r17,r12,23
   118c0:	1806d5fa 	srli	r3,r3,23
   118c4:	4252b03a 	or	r9,r8,r9
   118c8:	600a927a 	slli	r5,r12,9
   118cc:	4810c03a 	cmpne	r8,r9,zero
   118d0:	2462b03a 	or	r17,r4,r17
   118d4:	40c6b03a 	or	r3,r8,r3
   118d8:	8900402c 	andhi	r4,r17,256
   118dc:	1950b03a 	or	r8,r3,r5
   118e0:	20000726 	beq	r4,zero,11900 <__muldf3+0x4dc>
   118e4:	4006d07a 	srli	r3,r8,1
   118e8:	880497fa 	slli	r2,r17,31
   118ec:	4200004c 	andi	r8,r8,1
   118f0:	8822d07a 	srli	r17,r17,1
   118f4:	1a10b03a 	or	r8,r3,r8
   118f8:	1210b03a 	or	r8,r2,r8
   118fc:	5805883a 	mov	r2,r11
   11900:	1140ffc4 	addi	r5,r2,1023
   11904:	0140440e 	bge	zero,r5,11a18 <__muldf3+0x5f4>
   11908:	40c001cc 	andi	r3,r8,7
   1190c:	18000726 	beq	r3,zero,1192c <__muldf3+0x508>
   11910:	40c003cc 	andi	r3,r8,15
   11914:	01000104 	movi	r4,4
   11918:	19000426 	beq	r3,r4,1192c <__muldf3+0x508>
   1191c:	4107883a 	add	r3,r8,r4
   11920:	1a11803a 	cmpltu	r8,r3,r8
   11924:	8a23883a 	add	r17,r17,r8
   11928:	1811883a 	mov	r8,r3
   1192c:	88c0402c 	andhi	r3,r17,256
   11930:	18000426 	beq	r3,zero,11944 <__muldf3+0x520>
   11934:	11410004 	addi	r5,r2,1024
   11938:	00bfc034 	movhi	r2,65280
   1193c:	10bfffc4 	addi	r2,r2,-1
   11940:	88a2703a 	and	r17,r17,r2
   11944:	0081ff84 	movi	r2,2046
   11948:	117f6416 	blt	r2,r5,116dc <__muldf3+0x2b8>
   1194c:	8828977a 	slli	r20,r17,29
   11950:	4010d0fa 	srli	r8,r8,3
   11954:	8822927a 	slli	r17,r17,9
   11958:	2881ffcc 	andi	r2,r5,2047
   1195c:	a228b03a 	or	r20,r20,r8
   11960:	880ad33a 	srli	r5,r17,12
   11964:	b02b883a 	mov	r21,r22
   11968:	003f0d06 	br	115a0 <__muldf3+0x17c>
   1196c:	8080022c 	andhi	r2,r16,8
   11970:	10000926 	beq	r2,zero,11998 <__muldf3+0x574>
   11974:	8880022c 	andhi	r2,r17,8
   11978:	1000071e 	bne	r2,zero,11998 <__muldf3+0x574>
   1197c:	00800434 	movhi	r2,16
   11980:	89400234 	orhi	r5,r17,8
   11984:	10bfffc4 	addi	r2,r2,-1
   11988:	b82b883a 	mov	r21,r23
   1198c:	288a703a 	and	r5,r5,r2
   11990:	4029883a 	mov	r20,r8
   11994:	003f6806 	br	11738 <__muldf3+0x314>
   11998:	00800434 	movhi	r2,16
   1199c:	81400234 	orhi	r5,r16,8
   119a0:	10bfffc4 	addi	r2,r2,-1
   119a4:	288a703a 	and	r5,r5,r2
   119a8:	003f6306 	br	11738 <__muldf3+0x314>
   119ac:	147ff604 	addi	r17,r2,-40
   119b0:	3462983a 	sll	r17,r6,r17
   119b4:	0011883a 	mov	r8,zero
   119b8:	003f4406 	br	116cc <__muldf3+0x2a8>
   119bc:	3009883a 	mov	r4,r6
   119c0:	d9800215 	stw	r6,8(sp)
   119c4:	da400115 	stw	r9,4(sp)
   119c8:	da800015 	stw	r10,0(sp)
   119cc:	001263c0 	call	1263c <__clzsi2>
   119d0:	10800804 	addi	r2,r2,32
   119d4:	da800017 	ldw	r10,0(sp)
   119d8:	da400117 	ldw	r9,4(sp)
   119dc:	d9800217 	ldw	r6,8(sp)
   119e0:	003f3006 	br	116a4 <__muldf3+0x280>
   119e4:	143ff604 	addi	r16,r2,-40
   119e8:	9c20983a 	sll	r16,r19,r16
   119ec:	0029883a 	mov	r20,zero
   119f0:	003f1606 	br	1164c <__muldf3+0x228>
   119f4:	d9800215 	stw	r6,8(sp)
   119f8:	d9c00015 	stw	r7,0(sp)
   119fc:	da400115 	stw	r9,4(sp)
   11a00:	001263c0 	call	1263c <__clzsi2>
   11a04:	10800804 	addi	r2,r2,32
   11a08:	da400117 	ldw	r9,4(sp)
   11a0c:	d9c00017 	ldw	r7,0(sp)
   11a10:	d9800217 	ldw	r6,8(sp)
   11a14:	003f0306 	br	11624 <__muldf3+0x200>
   11a18:	00c00044 	movi	r3,1
   11a1c:	1947c83a 	sub	r3,r3,r5
   11a20:	00800e04 	movi	r2,56
   11a24:	10feda16 	blt	r2,r3,11590 <__muldf3+0x16c>
   11a28:	008007c4 	movi	r2,31
   11a2c:	10c01b16 	blt	r2,r3,11a9c <__muldf3+0x678>
   11a30:	00800804 	movi	r2,32
   11a34:	10c5c83a 	sub	r2,r2,r3
   11a38:	888a983a 	sll	r5,r17,r2
   11a3c:	40c8d83a 	srl	r4,r8,r3
   11a40:	4084983a 	sll	r2,r8,r2
   11a44:	88e2d83a 	srl	r17,r17,r3
   11a48:	2906b03a 	or	r3,r5,r4
   11a4c:	1004c03a 	cmpne	r2,r2,zero
   11a50:	1886b03a 	or	r3,r3,r2
   11a54:	188001cc 	andi	r2,r3,7
   11a58:	10000726 	beq	r2,zero,11a78 <__muldf3+0x654>
   11a5c:	188003cc 	andi	r2,r3,15
   11a60:	01000104 	movi	r4,4
   11a64:	11000426 	beq	r2,r4,11a78 <__muldf3+0x654>
   11a68:	1805883a 	mov	r2,r3
   11a6c:	10c00104 	addi	r3,r2,4
   11a70:	1885803a 	cmpltu	r2,r3,r2
   11a74:	88a3883a 	add	r17,r17,r2
   11a78:	8880202c 	andhi	r2,r17,128
   11a7c:	10001c26 	beq	r2,zero,11af0 <__muldf3+0x6cc>
   11a80:	b02b883a 	mov	r21,r22
   11a84:	00800044 	movi	r2,1
   11a88:	000b883a 	mov	r5,zero
   11a8c:	0029883a 	mov	r20,zero
   11a90:	003ec306 	br	115a0 <__muldf3+0x17c>
   11a94:	5805883a 	mov	r2,r11
   11a98:	003f9906 	br	11900 <__muldf3+0x4dc>
   11a9c:	00bff844 	movi	r2,-31
   11aa0:	1145c83a 	sub	r2,r2,r5
   11aa4:	8888d83a 	srl	r4,r17,r2
   11aa8:	00800804 	movi	r2,32
   11aac:	18801a26 	beq	r3,r2,11b18 <__muldf3+0x6f4>
   11ab0:	00801004 	movi	r2,64
   11ab4:	10c5c83a 	sub	r2,r2,r3
   11ab8:	8884983a 	sll	r2,r17,r2
   11abc:	1204b03a 	or	r2,r2,r8
   11ac0:	1004c03a 	cmpne	r2,r2,zero
   11ac4:	2084b03a 	or	r2,r4,r2
   11ac8:	144001cc 	andi	r17,r2,7
   11acc:	88000d1e 	bne	r17,zero,11b04 <__muldf3+0x6e0>
   11ad0:	000b883a 	mov	r5,zero
   11ad4:	1028d0fa 	srli	r20,r2,3
   11ad8:	b02b883a 	mov	r21,r22
   11adc:	0005883a 	mov	r2,zero
   11ae0:	a468b03a 	or	r20,r20,r17
   11ae4:	003eae06 	br	115a0 <__muldf3+0x17c>
   11ae8:	1007883a 	mov	r3,r2
   11aec:	0023883a 	mov	r17,zero
   11af0:	880a927a 	slli	r5,r17,9
   11af4:	1805883a 	mov	r2,r3
   11af8:	8822977a 	slli	r17,r17,29
   11afc:	280ad33a 	srli	r5,r5,12
   11b00:	003ff406 	br	11ad4 <__muldf3+0x6b0>
   11b04:	10c003cc 	andi	r3,r2,15
   11b08:	01000104 	movi	r4,4
   11b0c:	193ff626 	beq	r3,r4,11ae8 <__muldf3+0x6c4>
   11b10:	0023883a 	mov	r17,zero
   11b14:	003fd506 	br	11a6c <__muldf3+0x648>
   11b18:	0005883a 	mov	r2,zero
   11b1c:	003fe706 	br	11abc <__muldf3+0x698>
   11b20:	00800434 	movhi	r2,16
   11b24:	89400234 	orhi	r5,r17,8
   11b28:	10bfffc4 	addi	r2,r2,-1
   11b2c:	b02b883a 	mov	r21,r22
   11b30:	288a703a 	and	r5,r5,r2
   11b34:	4029883a 	mov	r20,r8
   11b38:	003eff06 	br	11738 <__muldf3+0x314>

00011b3c <__subdf3>:
   11b3c:	02000434 	movhi	r8,16
   11b40:	423fffc4 	addi	r8,r8,-1
   11b44:	defffb04 	addi	sp,sp,-20
   11b48:	2a14703a 	and	r10,r5,r8
   11b4c:	3812d53a 	srli	r9,r7,20
   11b50:	3a10703a 	and	r8,r7,r8
   11b54:	2006d77a 	srli	r3,r4,29
   11b58:	3004d77a 	srli	r2,r6,29
   11b5c:	dc000015 	stw	r16,0(sp)
   11b60:	501490fa 	slli	r10,r10,3
   11b64:	2820d53a 	srli	r16,r5,20
   11b68:	401090fa 	slli	r8,r8,3
   11b6c:	dc800215 	stw	r18,8(sp)
   11b70:	dc400115 	stw	r17,4(sp)
   11b74:	dfc00415 	stw	ra,16(sp)
   11b78:	202290fa 	slli	r17,r4,3
   11b7c:	dcc00315 	stw	r19,12(sp)
   11b80:	4a41ffcc 	andi	r9,r9,2047
   11b84:	0101ffc4 	movi	r4,2047
   11b88:	2824d7fa 	srli	r18,r5,31
   11b8c:	8401ffcc 	andi	r16,r16,2047
   11b90:	50c6b03a 	or	r3,r10,r3
   11b94:	380ed7fa 	srli	r7,r7,31
   11b98:	408ab03a 	or	r5,r8,r2
   11b9c:	300c90fa 	slli	r6,r6,3
   11ba0:	49009626 	beq	r9,r4,11dfc <__subdf3+0x2c0>
   11ba4:	39c0005c 	xori	r7,r7,1
   11ba8:	8245c83a 	sub	r2,r16,r9
   11bac:	3c807426 	beq	r7,r18,11d80 <__subdf3+0x244>
   11bb0:	0080af0e 	bge	zero,r2,11e70 <__subdf3+0x334>
   11bb4:	48002a1e 	bne	r9,zero,11c60 <__subdf3+0x124>
   11bb8:	2988b03a 	or	r4,r5,r6
   11bbc:	20009a1e 	bne	r4,zero,11e28 <__subdf3+0x2ec>
   11bc0:	888001cc 	andi	r2,r17,7
   11bc4:	10000726 	beq	r2,zero,11be4 <__subdf3+0xa8>
   11bc8:	888003cc 	andi	r2,r17,15
   11bcc:	01000104 	movi	r4,4
   11bd0:	11000426 	beq	r2,r4,11be4 <__subdf3+0xa8>
   11bd4:	890b883a 	add	r5,r17,r4
   11bd8:	2c63803a 	cmpltu	r17,r5,r17
   11bdc:	1c47883a 	add	r3,r3,r17
   11be0:	2823883a 	mov	r17,r5
   11be4:	1880202c 	andhi	r2,r3,128
   11be8:	10005926 	beq	r2,zero,11d50 <__subdf3+0x214>
   11bec:	84000044 	addi	r16,r16,1
   11bf0:	0081ffc4 	movi	r2,2047
   11bf4:	8080be26 	beq	r16,r2,11ef0 <__subdf3+0x3b4>
   11bf8:	017fe034 	movhi	r5,65408
   11bfc:	297fffc4 	addi	r5,r5,-1
   11c00:	1946703a 	and	r3,r3,r5
   11c04:	1804977a 	slli	r2,r3,29
   11c08:	1806927a 	slli	r3,r3,9
   11c0c:	8822d0fa 	srli	r17,r17,3
   11c10:	8401ffcc 	andi	r16,r16,2047
   11c14:	180ad33a 	srli	r5,r3,12
   11c18:	9100004c 	andi	r4,r18,1
   11c1c:	1444b03a 	or	r2,r2,r17
   11c20:	80c1ffcc 	andi	r3,r16,2047
   11c24:	1820953a 	slli	r16,r3,20
   11c28:	20c03fcc 	andi	r3,r4,255
   11c2c:	180897fa 	slli	r4,r3,31
   11c30:	00c00434 	movhi	r3,16
   11c34:	18ffffc4 	addi	r3,r3,-1
   11c38:	28c6703a 	and	r3,r5,r3
   11c3c:	1c06b03a 	or	r3,r3,r16
   11c40:	1906b03a 	or	r3,r3,r4
   11c44:	dfc00417 	ldw	ra,16(sp)
   11c48:	dcc00317 	ldw	r19,12(sp)
   11c4c:	dc800217 	ldw	r18,8(sp)
   11c50:	dc400117 	ldw	r17,4(sp)
   11c54:	dc000017 	ldw	r16,0(sp)
   11c58:	dec00504 	addi	sp,sp,20
   11c5c:	f800283a 	ret
   11c60:	0101ffc4 	movi	r4,2047
   11c64:	813fd626 	beq	r16,r4,11bc0 <__subdf3+0x84>
   11c68:	29402034 	orhi	r5,r5,128
   11c6c:	01000e04 	movi	r4,56
   11c70:	2080a316 	blt	r4,r2,11f00 <__subdf3+0x3c4>
   11c74:	010007c4 	movi	r4,31
   11c78:	2080c616 	blt	r4,r2,11f94 <__subdf3+0x458>
   11c7c:	01000804 	movi	r4,32
   11c80:	2089c83a 	sub	r4,r4,r2
   11c84:	2910983a 	sll	r8,r5,r4
   11c88:	308ed83a 	srl	r7,r6,r2
   11c8c:	3108983a 	sll	r4,r6,r4
   11c90:	2884d83a 	srl	r2,r5,r2
   11c94:	41ccb03a 	or	r6,r8,r7
   11c98:	2008c03a 	cmpne	r4,r4,zero
   11c9c:	310cb03a 	or	r6,r6,r4
   11ca0:	898dc83a 	sub	r6,r17,r6
   11ca4:	89a3803a 	cmpltu	r17,r17,r6
   11ca8:	1887c83a 	sub	r3,r3,r2
   11cac:	1c47c83a 	sub	r3,r3,r17
   11cb0:	3023883a 	mov	r17,r6
   11cb4:	1880202c 	andhi	r2,r3,128
   11cb8:	10002326 	beq	r2,zero,11d48 <__subdf3+0x20c>
   11cbc:	04c02034 	movhi	r19,128
   11cc0:	9cffffc4 	addi	r19,r19,-1
   11cc4:	1ce6703a 	and	r19,r3,r19
   11cc8:	98007a26 	beq	r19,zero,11eb4 <__subdf3+0x378>
   11ccc:	9809883a 	mov	r4,r19
   11cd0:	001263c0 	call	1263c <__clzsi2>
   11cd4:	113ffe04 	addi	r4,r2,-8
   11cd8:	00c007c4 	movi	r3,31
   11cdc:	19007b16 	blt	r3,r4,11ecc <__subdf3+0x390>
   11ce0:	00800804 	movi	r2,32
   11ce4:	1105c83a 	sub	r2,r2,r4
   11ce8:	8884d83a 	srl	r2,r17,r2
   11cec:	9906983a 	sll	r3,r19,r4
   11cf0:	8922983a 	sll	r17,r17,r4
   11cf4:	10c4b03a 	or	r2,r2,r3
   11cf8:	24007816 	blt	r4,r16,11edc <__subdf3+0x3a0>
   11cfc:	2421c83a 	sub	r16,r4,r16
   11d00:	80c00044 	addi	r3,r16,1
   11d04:	010007c4 	movi	r4,31
   11d08:	20c09516 	blt	r4,r3,11f60 <__subdf3+0x424>
   11d0c:	01400804 	movi	r5,32
   11d10:	28cbc83a 	sub	r5,r5,r3
   11d14:	88c8d83a 	srl	r4,r17,r3
   11d18:	8962983a 	sll	r17,r17,r5
   11d1c:	114a983a 	sll	r5,r2,r5
   11d20:	10c6d83a 	srl	r3,r2,r3
   11d24:	8804c03a 	cmpne	r2,r17,zero
   11d28:	290ab03a 	or	r5,r5,r4
   11d2c:	28a2b03a 	or	r17,r5,r2
   11d30:	0021883a 	mov	r16,zero
   11d34:	003fa206 	br	11bc0 <__subdf3+0x84>
   11d38:	2090b03a 	or	r8,r4,r2
   11d3c:	40018e26 	beq	r8,zero,12378 <__subdf3+0x83c>
   11d40:	1007883a 	mov	r3,r2
   11d44:	2023883a 	mov	r17,r4
   11d48:	888001cc 	andi	r2,r17,7
   11d4c:	103f9e1e 	bne	r2,zero,11bc8 <__subdf3+0x8c>
   11d50:	1804977a 	slli	r2,r3,29
   11d54:	8822d0fa 	srli	r17,r17,3
   11d58:	1810d0fa 	srli	r8,r3,3
   11d5c:	9100004c 	andi	r4,r18,1
   11d60:	1444b03a 	or	r2,r2,r17
   11d64:	00c1ffc4 	movi	r3,2047
   11d68:	80c02826 	beq	r16,r3,11e0c <__subdf3+0x2d0>
   11d6c:	01400434 	movhi	r5,16
   11d70:	297fffc4 	addi	r5,r5,-1
   11d74:	80e0703a 	and	r16,r16,r3
   11d78:	414a703a 	and	r5,r8,r5
   11d7c:	003fa806 	br	11c20 <__subdf3+0xe4>
   11d80:	0080630e 	bge	zero,r2,11f10 <__subdf3+0x3d4>
   11d84:	48003026 	beq	r9,zero,11e48 <__subdf3+0x30c>
   11d88:	0101ffc4 	movi	r4,2047
   11d8c:	813f8c26 	beq	r16,r4,11bc0 <__subdf3+0x84>
   11d90:	29402034 	orhi	r5,r5,128
   11d94:	01000e04 	movi	r4,56
   11d98:	2080a90e 	bge	r4,r2,12040 <__subdf3+0x504>
   11d9c:	298cb03a 	or	r6,r5,r6
   11da0:	3012c03a 	cmpne	r9,r6,zero
   11da4:	0005883a 	mov	r2,zero
   11da8:	4c53883a 	add	r9,r9,r17
   11dac:	4c63803a 	cmpltu	r17,r9,r17
   11db0:	10c7883a 	add	r3,r2,r3
   11db4:	88c7883a 	add	r3,r17,r3
   11db8:	4823883a 	mov	r17,r9
   11dbc:	1880202c 	andhi	r2,r3,128
   11dc0:	1000d026 	beq	r2,zero,12104 <__subdf3+0x5c8>
   11dc4:	84000044 	addi	r16,r16,1
   11dc8:	0081ffc4 	movi	r2,2047
   11dcc:	8080fe26 	beq	r16,r2,121c8 <__subdf3+0x68c>
   11dd0:	00bfe034 	movhi	r2,65408
   11dd4:	10bfffc4 	addi	r2,r2,-1
   11dd8:	1886703a 	and	r3,r3,r2
   11ddc:	880ad07a 	srli	r5,r17,1
   11de0:	180497fa 	slli	r2,r3,31
   11de4:	8900004c 	andi	r4,r17,1
   11de8:	2922b03a 	or	r17,r5,r4
   11dec:	1806d07a 	srli	r3,r3,1
   11df0:	1462b03a 	or	r17,r2,r17
   11df4:	3825883a 	mov	r18,r7
   11df8:	003f7106 	br	11bc0 <__subdf3+0x84>
   11dfc:	2984b03a 	or	r2,r5,r6
   11e00:	103f6826 	beq	r2,zero,11ba4 <__subdf3+0x68>
   11e04:	39c03fcc 	andi	r7,r7,255
   11e08:	003f6706 	br	11ba8 <__subdf3+0x6c>
   11e0c:	4086b03a 	or	r3,r8,r2
   11e10:	18015226 	beq	r3,zero,1235c <__subdf3+0x820>
   11e14:	00c00434 	movhi	r3,16
   11e18:	41400234 	orhi	r5,r8,8
   11e1c:	18ffffc4 	addi	r3,r3,-1
   11e20:	28ca703a 	and	r5,r5,r3
   11e24:	003f7e06 	br	11c20 <__subdf3+0xe4>
   11e28:	10bfffc4 	addi	r2,r2,-1
   11e2c:	1000491e 	bne	r2,zero,11f54 <__subdf3+0x418>
   11e30:	898fc83a 	sub	r7,r17,r6
   11e34:	89e3803a 	cmpltu	r17,r17,r7
   11e38:	1947c83a 	sub	r3,r3,r5
   11e3c:	1c47c83a 	sub	r3,r3,r17
   11e40:	3823883a 	mov	r17,r7
   11e44:	003f9b06 	br	11cb4 <__subdf3+0x178>
   11e48:	2988b03a 	or	r4,r5,r6
   11e4c:	203f5c26 	beq	r4,zero,11bc0 <__subdf3+0x84>
   11e50:	10bfffc4 	addi	r2,r2,-1
   11e54:	1000931e 	bne	r2,zero,120a4 <__subdf3+0x568>
   11e58:	898d883a 	add	r6,r17,r6
   11e5c:	3463803a 	cmpltu	r17,r6,r17
   11e60:	1947883a 	add	r3,r3,r5
   11e64:	88c7883a 	add	r3,r17,r3
   11e68:	3023883a 	mov	r17,r6
   11e6c:	003fd306 	br	11dbc <__subdf3+0x280>
   11e70:	1000541e 	bne	r2,zero,11fc4 <__subdf3+0x488>
   11e74:	80800044 	addi	r2,r16,1
   11e78:	1081ffcc 	andi	r2,r2,2047
   11e7c:	01000044 	movi	r4,1
   11e80:	2080a20e 	bge	r4,r2,1210c <__subdf3+0x5d0>
   11e84:	8989c83a 	sub	r4,r17,r6
   11e88:	8905803a 	cmpltu	r2,r17,r4
   11e8c:	1967c83a 	sub	r19,r3,r5
   11e90:	98a7c83a 	sub	r19,r19,r2
   11e94:	9880202c 	andhi	r2,r19,128
   11e98:	10006326 	beq	r2,zero,12028 <__subdf3+0x4ec>
   11e9c:	3463c83a 	sub	r17,r6,r17
   11ea0:	28c7c83a 	sub	r3,r5,r3
   11ea4:	344d803a 	cmpltu	r6,r6,r17
   11ea8:	19a7c83a 	sub	r19,r3,r6
   11eac:	3825883a 	mov	r18,r7
   11eb0:	983f861e 	bne	r19,zero,11ccc <__subdf3+0x190>
   11eb4:	8809883a 	mov	r4,r17
   11eb8:	001263c0 	call	1263c <__clzsi2>
   11ebc:	10800804 	addi	r2,r2,32
   11ec0:	113ffe04 	addi	r4,r2,-8
   11ec4:	00c007c4 	movi	r3,31
   11ec8:	193f850e 	bge	r3,r4,11ce0 <__subdf3+0x1a4>
   11ecc:	10bff604 	addi	r2,r2,-40
   11ed0:	8884983a 	sll	r2,r17,r2
   11ed4:	0023883a 	mov	r17,zero
   11ed8:	243f880e 	bge	r4,r16,11cfc <__subdf3+0x1c0>
   11edc:	00ffe034 	movhi	r3,65408
   11ee0:	18ffffc4 	addi	r3,r3,-1
   11ee4:	8121c83a 	sub	r16,r16,r4
   11ee8:	10c6703a 	and	r3,r2,r3
   11eec:	003f3406 	br	11bc0 <__subdf3+0x84>
   11ef0:	9100004c 	andi	r4,r18,1
   11ef4:	000b883a 	mov	r5,zero
   11ef8:	0005883a 	mov	r2,zero
   11efc:	003f4806 	br	11c20 <__subdf3+0xe4>
   11f00:	298cb03a 	or	r6,r5,r6
   11f04:	300cc03a 	cmpne	r6,r6,zero
   11f08:	0005883a 	mov	r2,zero
   11f0c:	003f6406 	br	11ca0 <__subdf3+0x164>
   11f10:	10009a1e 	bne	r2,zero,1217c <__subdf3+0x640>
   11f14:	82400044 	addi	r9,r16,1
   11f18:	4881ffcc 	andi	r2,r9,2047
   11f1c:	02800044 	movi	r10,1
   11f20:	5080670e 	bge	r10,r2,120c0 <__subdf3+0x584>
   11f24:	0081ffc4 	movi	r2,2047
   11f28:	4880af26 	beq	r9,r2,121e8 <__subdf3+0x6ac>
   11f2c:	898d883a 	add	r6,r17,r6
   11f30:	1945883a 	add	r2,r3,r5
   11f34:	3447803a 	cmpltu	r3,r6,r17
   11f38:	1887883a 	add	r3,r3,r2
   11f3c:	182297fa 	slli	r17,r3,31
   11f40:	300cd07a 	srli	r6,r6,1
   11f44:	1806d07a 	srli	r3,r3,1
   11f48:	4821883a 	mov	r16,r9
   11f4c:	89a2b03a 	or	r17,r17,r6
   11f50:	003f1b06 	br	11bc0 <__subdf3+0x84>
   11f54:	0101ffc4 	movi	r4,2047
   11f58:	813f441e 	bne	r16,r4,11c6c <__subdf3+0x130>
   11f5c:	003f1806 	br	11bc0 <__subdf3+0x84>
   11f60:	843ff844 	addi	r16,r16,-31
   11f64:	01400804 	movi	r5,32
   11f68:	1408d83a 	srl	r4,r2,r16
   11f6c:	19405026 	beq	r3,r5,120b0 <__subdf3+0x574>
   11f70:	01401004 	movi	r5,64
   11f74:	28c7c83a 	sub	r3,r5,r3
   11f78:	10c4983a 	sll	r2,r2,r3
   11f7c:	88a2b03a 	or	r17,r17,r2
   11f80:	8822c03a 	cmpne	r17,r17,zero
   11f84:	2462b03a 	or	r17,r4,r17
   11f88:	0007883a 	mov	r3,zero
   11f8c:	0021883a 	mov	r16,zero
   11f90:	003f6d06 	br	11d48 <__subdf3+0x20c>
   11f94:	11fff804 	addi	r7,r2,-32
   11f98:	01000804 	movi	r4,32
   11f9c:	29ced83a 	srl	r7,r5,r7
   11fa0:	11004526 	beq	r2,r4,120b8 <__subdf3+0x57c>
   11fa4:	01001004 	movi	r4,64
   11fa8:	2089c83a 	sub	r4,r4,r2
   11fac:	2904983a 	sll	r2,r5,r4
   11fb0:	118cb03a 	or	r6,r2,r6
   11fb4:	300cc03a 	cmpne	r6,r6,zero
   11fb8:	398cb03a 	or	r6,r7,r6
   11fbc:	0005883a 	mov	r2,zero
   11fc0:	003f3706 	br	11ca0 <__subdf3+0x164>
   11fc4:	80002a26 	beq	r16,zero,12070 <__subdf3+0x534>
   11fc8:	0101ffc4 	movi	r4,2047
   11fcc:	49006626 	beq	r9,r4,12168 <__subdf3+0x62c>
   11fd0:	0085c83a 	sub	r2,zero,r2
   11fd4:	18c02034 	orhi	r3,r3,128
   11fd8:	01000e04 	movi	r4,56
   11fdc:	20807e16 	blt	r4,r2,121d8 <__subdf3+0x69c>
   11fe0:	010007c4 	movi	r4,31
   11fe4:	2080e716 	blt	r4,r2,12384 <__subdf3+0x848>
   11fe8:	01000804 	movi	r4,32
   11fec:	2089c83a 	sub	r4,r4,r2
   11ff0:	1914983a 	sll	r10,r3,r4
   11ff4:	8890d83a 	srl	r8,r17,r2
   11ff8:	8908983a 	sll	r4,r17,r4
   11ffc:	1884d83a 	srl	r2,r3,r2
   12000:	5222b03a 	or	r17,r10,r8
   12004:	2006c03a 	cmpne	r3,r4,zero
   12008:	88e2b03a 	or	r17,r17,r3
   1200c:	3463c83a 	sub	r17,r6,r17
   12010:	2885c83a 	sub	r2,r5,r2
   12014:	344d803a 	cmpltu	r6,r6,r17
   12018:	1187c83a 	sub	r3,r2,r6
   1201c:	4821883a 	mov	r16,r9
   12020:	3825883a 	mov	r18,r7
   12024:	003f2306 	br	11cb4 <__subdf3+0x178>
   12028:	24d0b03a 	or	r8,r4,r19
   1202c:	40001b1e 	bne	r8,zero,1209c <__subdf3+0x560>
   12030:	0005883a 	mov	r2,zero
   12034:	0009883a 	mov	r4,zero
   12038:	0021883a 	mov	r16,zero
   1203c:	003f4906 	br	11d64 <__subdf3+0x228>
   12040:	010007c4 	movi	r4,31
   12044:	20803a16 	blt	r4,r2,12130 <__subdf3+0x5f4>
   12048:	01000804 	movi	r4,32
   1204c:	2089c83a 	sub	r4,r4,r2
   12050:	2912983a 	sll	r9,r5,r4
   12054:	3090d83a 	srl	r8,r6,r2
   12058:	3108983a 	sll	r4,r6,r4
   1205c:	2884d83a 	srl	r2,r5,r2
   12060:	4a12b03a 	or	r9,r9,r8
   12064:	2008c03a 	cmpne	r4,r4,zero
   12068:	4912b03a 	or	r9,r9,r4
   1206c:	003f4e06 	br	11da8 <__subdf3+0x26c>
   12070:	1c48b03a 	or	r4,r3,r17
   12074:	20003c26 	beq	r4,zero,12168 <__subdf3+0x62c>
   12078:	0084303a 	nor	r2,zero,r2
   1207c:	1000381e 	bne	r2,zero,12160 <__subdf3+0x624>
   12080:	3463c83a 	sub	r17,r6,r17
   12084:	28c5c83a 	sub	r2,r5,r3
   12088:	344d803a 	cmpltu	r6,r6,r17
   1208c:	1187c83a 	sub	r3,r2,r6
   12090:	4821883a 	mov	r16,r9
   12094:	3825883a 	mov	r18,r7
   12098:	003f0606 	br	11cb4 <__subdf3+0x178>
   1209c:	2023883a 	mov	r17,r4
   120a0:	003f0906 	br	11cc8 <__subdf3+0x18c>
   120a4:	0101ffc4 	movi	r4,2047
   120a8:	813f3a1e 	bne	r16,r4,11d94 <__subdf3+0x258>
   120ac:	003ec406 	br	11bc0 <__subdf3+0x84>
   120b0:	0005883a 	mov	r2,zero
   120b4:	003fb106 	br	11f7c <__subdf3+0x440>
   120b8:	0005883a 	mov	r2,zero
   120bc:	003fbc06 	br	11fb0 <__subdf3+0x474>
   120c0:	1c44b03a 	or	r2,r3,r17
   120c4:	80008e1e 	bne	r16,zero,12300 <__subdf3+0x7c4>
   120c8:	1000c826 	beq	r2,zero,123ec <__subdf3+0x8b0>
   120cc:	2984b03a 	or	r2,r5,r6
   120d0:	103ebb26 	beq	r2,zero,11bc0 <__subdf3+0x84>
   120d4:	8989883a 	add	r4,r17,r6
   120d8:	1945883a 	add	r2,r3,r5
   120dc:	2447803a 	cmpltu	r3,r4,r17
   120e0:	1887883a 	add	r3,r3,r2
   120e4:	1880202c 	andhi	r2,r3,128
   120e8:	2023883a 	mov	r17,r4
   120ec:	103f1626 	beq	r2,zero,11d48 <__subdf3+0x20c>
   120f0:	00bfe034 	movhi	r2,65408
   120f4:	10bfffc4 	addi	r2,r2,-1
   120f8:	5021883a 	mov	r16,r10
   120fc:	1886703a 	and	r3,r3,r2
   12100:	003eaf06 	br	11bc0 <__subdf3+0x84>
   12104:	3825883a 	mov	r18,r7
   12108:	003f0f06 	br	11d48 <__subdf3+0x20c>
   1210c:	1c44b03a 	or	r2,r3,r17
   12110:	8000251e 	bne	r16,zero,121a8 <__subdf3+0x66c>
   12114:	1000661e 	bne	r2,zero,122b0 <__subdf3+0x774>
   12118:	2990b03a 	or	r8,r5,r6
   1211c:	40009626 	beq	r8,zero,12378 <__subdf3+0x83c>
   12120:	2807883a 	mov	r3,r5
   12124:	3023883a 	mov	r17,r6
   12128:	3825883a 	mov	r18,r7
   1212c:	003ea406 	br	11bc0 <__subdf3+0x84>
   12130:	127ff804 	addi	r9,r2,-32
   12134:	01000804 	movi	r4,32
   12138:	2a52d83a 	srl	r9,r5,r9
   1213c:	11008c26 	beq	r2,r4,12370 <__subdf3+0x834>
   12140:	01001004 	movi	r4,64
   12144:	2085c83a 	sub	r2,r4,r2
   12148:	2884983a 	sll	r2,r5,r2
   1214c:	118cb03a 	or	r6,r2,r6
   12150:	300cc03a 	cmpne	r6,r6,zero
   12154:	4992b03a 	or	r9,r9,r6
   12158:	0005883a 	mov	r2,zero
   1215c:	003f1206 	br	11da8 <__subdf3+0x26c>
   12160:	0101ffc4 	movi	r4,2047
   12164:	493f9c1e 	bne	r9,r4,11fd8 <__subdf3+0x49c>
   12168:	2807883a 	mov	r3,r5
   1216c:	3023883a 	mov	r17,r6
   12170:	4821883a 	mov	r16,r9
   12174:	3825883a 	mov	r18,r7
   12178:	003e9106 	br	11bc0 <__subdf3+0x84>
   1217c:	80001f1e 	bne	r16,zero,121fc <__subdf3+0x6c0>
   12180:	1c48b03a 	or	r4,r3,r17
   12184:	20005a26 	beq	r4,zero,122f0 <__subdf3+0x7b4>
   12188:	0084303a 	nor	r2,zero,r2
   1218c:	1000561e 	bne	r2,zero,122e8 <__subdf3+0x7ac>
   12190:	89a3883a 	add	r17,r17,r6
   12194:	1945883a 	add	r2,r3,r5
   12198:	898d803a 	cmpltu	r6,r17,r6
   1219c:	3087883a 	add	r3,r6,r2
   121a0:	4821883a 	mov	r16,r9
   121a4:	003f0506 	br	11dbc <__subdf3+0x280>
   121a8:	10002b1e 	bne	r2,zero,12258 <__subdf3+0x71c>
   121ac:	2984b03a 	or	r2,r5,r6
   121b0:	10008026 	beq	r2,zero,123b4 <__subdf3+0x878>
   121b4:	2807883a 	mov	r3,r5
   121b8:	3023883a 	mov	r17,r6
   121bc:	3825883a 	mov	r18,r7
   121c0:	0401ffc4 	movi	r16,2047
   121c4:	003e7e06 	br	11bc0 <__subdf3+0x84>
   121c8:	3809883a 	mov	r4,r7
   121cc:	0011883a 	mov	r8,zero
   121d0:	0005883a 	mov	r2,zero
   121d4:	003ee306 	br	11d64 <__subdf3+0x228>
   121d8:	1c62b03a 	or	r17,r3,r17
   121dc:	8822c03a 	cmpne	r17,r17,zero
   121e0:	0005883a 	mov	r2,zero
   121e4:	003f8906 	br	1200c <__subdf3+0x4d0>
   121e8:	3809883a 	mov	r4,r7
   121ec:	4821883a 	mov	r16,r9
   121f0:	0011883a 	mov	r8,zero
   121f4:	0005883a 	mov	r2,zero
   121f8:	003eda06 	br	11d64 <__subdf3+0x228>
   121fc:	0101ffc4 	movi	r4,2047
   12200:	49003b26 	beq	r9,r4,122f0 <__subdf3+0x7b4>
   12204:	0085c83a 	sub	r2,zero,r2
   12208:	18c02034 	orhi	r3,r3,128
   1220c:	01000e04 	movi	r4,56
   12210:	20806e16 	blt	r4,r2,123cc <__subdf3+0x890>
   12214:	010007c4 	movi	r4,31
   12218:	20807716 	blt	r4,r2,123f8 <__subdf3+0x8bc>
   1221c:	01000804 	movi	r4,32
   12220:	2089c83a 	sub	r4,r4,r2
   12224:	1914983a 	sll	r10,r3,r4
   12228:	8890d83a 	srl	r8,r17,r2
   1222c:	8908983a 	sll	r4,r17,r4
   12230:	1884d83a 	srl	r2,r3,r2
   12234:	5222b03a 	or	r17,r10,r8
   12238:	2006c03a 	cmpne	r3,r4,zero
   1223c:	88e2b03a 	or	r17,r17,r3
   12240:	89a3883a 	add	r17,r17,r6
   12244:	1145883a 	add	r2,r2,r5
   12248:	898d803a 	cmpltu	r6,r17,r6
   1224c:	3087883a 	add	r3,r6,r2
   12250:	4821883a 	mov	r16,r9
   12254:	003ed906 	br	11dbc <__subdf3+0x280>
   12258:	2984b03a 	or	r2,r5,r6
   1225c:	10004226 	beq	r2,zero,12368 <__subdf3+0x82c>
   12260:	1808d0fa 	srli	r4,r3,3
   12264:	8822d0fa 	srli	r17,r17,3
   12268:	1806977a 	slli	r3,r3,29
   1226c:	2080022c 	andhi	r2,r4,8
   12270:	1c62b03a 	or	r17,r3,r17
   12274:	10000826 	beq	r2,zero,12298 <__subdf3+0x75c>
   12278:	2812d0fa 	srli	r9,r5,3
   1227c:	4880022c 	andhi	r2,r9,8
   12280:	1000051e 	bne	r2,zero,12298 <__subdf3+0x75c>
   12284:	300cd0fa 	srli	r6,r6,3
   12288:	2804977a 	slli	r2,r5,29
   1228c:	4809883a 	mov	r4,r9
   12290:	3825883a 	mov	r18,r7
   12294:	11a2b03a 	or	r17,r2,r6
   12298:	8806d77a 	srli	r3,r17,29
   1229c:	200890fa 	slli	r4,r4,3
   122a0:	882290fa 	slli	r17,r17,3
   122a4:	0401ffc4 	movi	r16,2047
   122a8:	1906b03a 	or	r3,r3,r4
   122ac:	003e4406 	br	11bc0 <__subdf3+0x84>
   122b0:	2984b03a 	or	r2,r5,r6
   122b4:	103e4226 	beq	r2,zero,11bc0 <__subdf3+0x84>
   122b8:	8989c83a 	sub	r4,r17,r6
   122bc:	8911803a 	cmpltu	r8,r17,r4
   122c0:	1945c83a 	sub	r2,r3,r5
   122c4:	1205c83a 	sub	r2,r2,r8
   122c8:	1200202c 	andhi	r8,r2,128
   122cc:	403e9a26 	beq	r8,zero,11d38 <__subdf3+0x1fc>
   122d0:	3463c83a 	sub	r17,r6,r17
   122d4:	28c5c83a 	sub	r2,r5,r3
   122d8:	344d803a 	cmpltu	r6,r6,r17
   122dc:	1187c83a 	sub	r3,r2,r6
   122e0:	3825883a 	mov	r18,r7
   122e4:	003e3606 	br	11bc0 <__subdf3+0x84>
   122e8:	0101ffc4 	movi	r4,2047
   122ec:	493fc71e 	bne	r9,r4,1220c <__subdf3+0x6d0>
   122f0:	2807883a 	mov	r3,r5
   122f4:	3023883a 	mov	r17,r6
   122f8:	4821883a 	mov	r16,r9
   122fc:	003e3006 	br	11bc0 <__subdf3+0x84>
   12300:	10003626 	beq	r2,zero,123dc <__subdf3+0x8a0>
   12304:	2984b03a 	or	r2,r5,r6
   12308:	10001726 	beq	r2,zero,12368 <__subdf3+0x82c>
   1230c:	1808d0fa 	srli	r4,r3,3
   12310:	8822d0fa 	srli	r17,r17,3
   12314:	1806977a 	slli	r3,r3,29
   12318:	2080022c 	andhi	r2,r4,8
   1231c:	1c62b03a 	or	r17,r3,r17
   12320:	10000726 	beq	r2,zero,12340 <__subdf3+0x804>
   12324:	2812d0fa 	srli	r9,r5,3
   12328:	4880022c 	andhi	r2,r9,8
   1232c:	1000041e 	bne	r2,zero,12340 <__subdf3+0x804>
   12330:	300cd0fa 	srli	r6,r6,3
   12334:	2804977a 	slli	r2,r5,29
   12338:	4809883a 	mov	r4,r9
   1233c:	11a2b03a 	or	r17,r2,r6
   12340:	8806d77a 	srli	r3,r17,29
   12344:	200890fa 	slli	r4,r4,3
   12348:	882290fa 	slli	r17,r17,3
   1234c:	3825883a 	mov	r18,r7
   12350:	1906b03a 	or	r3,r3,r4
   12354:	0401ffc4 	movi	r16,2047
   12358:	003e1906 	br	11bc0 <__subdf3+0x84>
   1235c:	000b883a 	mov	r5,zero
   12360:	0005883a 	mov	r2,zero
   12364:	003e2e06 	br	11c20 <__subdf3+0xe4>
   12368:	0401ffc4 	movi	r16,2047
   1236c:	003e1406 	br	11bc0 <__subdf3+0x84>
   12370:	0005883a 	mov	r2,zero
   12374:	003f7506 	br	1214c <__subdf3+0x610>
   12378:	0005883a 	mov	r2,zero
   1237c:	0009883a 	mov	r4,zero
   12380:	003e7806 	br	11d64 <__subdf3+0x228>
   12384:	123ff804 	addi	r8,r2,-32
   12388:	01000804 	movi	r4,32
   1238c:	1a10d83a 	srl	r8,r3,r8
   12390:	11002526 	beq	r2,r4,12428 <__subdf3+0x8ec>
   12394:	01001004 	movi	r4,64
   12398:	2085c83a 	sub	r2,r4,r2
   1239c:	1884983a 	sll	r2,r3,r2
   123a0:	1444b03a 	or	r2,r2,r17
   123a4:	1004c03a 	cmpne	r2,r2,zero
   123a8:	40a2b03a 	or	r17,r8,r2
   123ac:	0005883a 	mov	r2,zero
   123b0:	003f1606 	br	1200c <__subdf3+0x4d0>
   123b4:	02000434 	movhi	r8,16
   123b8:	0009883a 	mov	r4,zero
   123bc:	423fffc4 	addi	r8,r8,-1
   123c0:	00bfffc4 	movi	r2,-1
   123c4:	0401ffc4 	movi	r16,2047
   123c8:	003e6606 	br	11d64 <__subdf3+0x228>
   123cc:	1c62b03a 	or	r17,r3,r17
   123d0:	8822c03a 	cmpne	r17,r17,zero
   123d4:	0005883a 	mov	r2,zero
   123d8:	003f9906 	br	12240 <__subdf3+0x704>
   123dc:	2807883a 	mov	r3,r5
   123e0:	3023883a 	mov	r17,r6
   123e4:	0401ffc4 	movi	r16,2047
   123e8:	003df506 	br	11bc0 <__subdf3+0x84>
   123ec:	2807883a 	mov	r3,r5
   123f0:	3023883a 	mov	r17,r6
   123f4:	003df206 	br	11bc0 <__subdf3+0x84>
   123f8:	123ff804 	addi	r8,r2,-32
   123fc:	01000804 	movi	r4,32
   12400:	1a10d83a 	srl	r8,r3,r8
   12404:	11000a26 	beq	r2,r4,12430 <__subdf3+0x8f4>
   12408:	01001004 	movi	r4,64
   1240c:	2085c83a 	sub	r2,r4,r2
   12410:	1884983a 	sll	r2,r3,r2
   12414:	1444b03a 	or	r2,r2,r17
   12418:	1004c03a 	cmpne	r2,r2,zero
   1241c:	40a2b03a 	or	r17,r8,r2
   12420:	0005883a 	mov	r2,zero
   12424:	003f8606 	br	12240 <__subdf3+0x704>
   12428:	0005883a 	mov	r2,zero
   1242c:	003fdc06 	br	123a0 <__subdf3+0x864>
   12430:	0005883a 	mov	r2,zero
   12434:	003ff706 	br	12414 <__subdf3+0x8d8>

00012438 <__fixdfsi>:
   12438:	280cd53a 	srli	r6,r5,20
   1243c:	00c00434 	movhi	r3,16
   12440:	18ffffc4 	addi	r3,r3,-1
   12444:	3181ffcc 	andi	r6,r6,2047
   12448:	01c0ff84 	movi	r7,1022
   1244c:	28c6703a 	and	r3,r5,r3
   12450:	280ad7fa 	srli	r5,r5,31
   12454:	3980120e 	bge	r7,r6,124a0 <__fixdfsi+0x68>
   12458:	00810744 	movi	r2,1053
   1245c:	11800c16 	blt	r2,r6,12490 <__fixdfsi+0x58>
   12460:	00810cc4 	movi	r2,1075
   12464:	1185c83a 	sub	r2,r2,r6
   12468:	01c007c4 	movi	r7,31
   1246c:	18c00434 	orhi	r3,r3,16
   12470:	38800d16 	blt	r7,r2,124a8 <__fixdfsi+0x70>
   12474:	31befb44 	addi	r6,r6,-1043
   12478:	2084d83a 	srl	r2,r4,r2
   1247c:	1986983a 	sll	r3,r3,r6
   12480:	1884b03a 	or	r2,r3,r2
   12484:	28000726 	beq	r5,zero,124a4 <__fixdfsi+0x6c>
   12488:	0085c83a 	sub	r2,zero,r2
   1248c:	f800283a 	ret
   12490:	00a00034 	movhi	r2,32768
   12494:	10bfffc4 	addi	r2,r2,-1
   12498:	2885883a 	add	r2,r5,r2
   1249c:	f800283a 	ret
   124a0:	0005883a 	mov	r2,zero
   124a4:	f800283a 	ret
   124a8:	008104c4 	movi	r2,1043
   124ac:	1185c83a 	sub	r2,r2,r6
   124b0:	1884d83a 	srl	r2,r3,r2
   124b4:	003ff306 	br	12484 <__fixdfsi+0x4c>

000124b8 <__floatsidf>:
   124b8:	defffd04 	addi	sp,sp,-12
   124bc:	dfc00215 	stw	ra,8(sp)
   124c0:	dc400115 	stw	r17,4(sp)
   124c4:	dc000015 	stw	r16,0(sp)
   124c8:	20002b26 	beq	r4,zero,12578 <__floatsidf+0xc0>
   124cc:	2023883a 	mov	r17,r4
   124d0:	2020d7fa 	srli	r16,r4,31
   124d4:	20002d16 	blt	r4,zero,1258c <__floatsidf+0xd4>
   124d8:	8809883a 	mov	r4,r17
   124dc:	001263c0 	call	1263c <__clzsi2>
   124e0:	01410784 	movi	r5,1054
   124e4:	288bc83a 	sub	r5,r5,r2
   124e8:	01010cc4 	movi	r4,1075
   124ec:	2149c83a 	sub	r4,r4,r5
   124f0:	00c007c4 	movi	r3,31
   124f4:	1900160e 	bge	r3,r4,12550 <__floatsidf+0x98>
   124f8:	00c104c4 	movi	r3,1043
   124fc:	1947c83a 	sub	r3,r3,r5
   12500:	88c6983a 	sll	r3,r17,r3
   12504:	00800434 	movhi	r2,16
   12508:	10bfffc4 	addi	r2,r2,-1
   1250c:	1886703a 	and	r3,r3,r2
   12510:	2941ffcc 	andi	r5,r5,2047
   12514:	800d883a 	mov	r6,r16
   12518:	0005883a 	mov	r2,zero
   1251c:	280a953a 	slli	r5,r5,20
   12520:	31803fcc 	andi	r6,r6,255
   12524:	01000434 	movhi	r4,16
   12528:	300c97fa 	slli	r6,r6,31
   1252c:	213fffc4 	addi	r4,r4,-1
   12530:	1906703a 	and	r3,r3,r4
   12534:	1946b03a 	or	r3,r3,r5
   12538:	1986b03a 	or	r3,r3,r6
   1253c:	dfc00217 	ldw	ra,8(sp)
   12540:	dc400117 	ldw	r17,4(sp)
   12544:	dc000017 	ldw	r16,0(sp)
   12548:	dec00304 	addi	sp,sp,12
   1254c:	f800283a 	ret
   12550:	00c002c4 	movi	r3,11
   12554:	1887c83a 	sub	r3,r3,r2
   12558:	88c6d83a 	srl	r3,r17,r3
   1255c:	8904983a 	sll	r2,r17,r4
   12560:	01000434 	movhi	r4,16
   12564:	213fffc4 	addi	r4,r4,-1
   12568:	2941ffcc 	andi	r5,r5,2047
   1256c:	1906703a 	and	r3,r3,r4
   12570:	800d883a 	mov	r6,r16
   12574:	003fe906 	br	1251c <__floatsidf+0x64>
   12578:	000d883a 	mov	r6,zero
   1257c:	000b883a 	mov	r5,zero
   12580:	0007883a 	mov	r3,zero
   12584:	0005883a 	mov	r2,zero
   12588:	003fe406 	br	1251c <__floatsidf+0x64>
   1258c:	0123c83a 	sub	r17,zero,r4
   12590:	003fd106 	br	124d8 <__floatsidf+0x20>

00012594 <__floatunsidf>:
   12594:	defffe04 	addi	sp,sp,-8
   12598:	dc000015 	stw	r16,0(sp)
   1259c:	dfc00115 	stw	ra,4(sp)
   125a0:	2021883a 	mov	r16,r4
   125a4:	20002226 	beq	r4,zero,12630 <__floatunsidf+0x9c>
   125a8:	001263c0 	call	1263c <__clzsi2>
   125ac:	01010784 	movi	r4,1054
   125b0:	2089c83a 	sub	r4,r4,r2
   125b4:	01810cc4 	movi	r6,1075
   125b8:	310dc83a 	sub	r6,r6,r4
   125bc:	00c007c4 	movi	r3,31
   125c0:	1980120e 	bge	r3,r6,1260c <__floatunsidf+0x78>
   125c4:	00c104c4 	movi	r3,1043
   125c8:	1907c83a 	sub	r3,r3,r4
   125cc:	80ca983a 	sll	r5,r16,r3
   125d0:	00800434 	movhi	r2,16
   125d4:	10bfffc4 	addi	r2,r2,-1
   125d8:	2101ffcc 	andi	r4,r4,2047
   125dc:	0021883a 	mov	r16,zero
   125e0:	288a703a 	and	r5,r5,r2
   125e4:	2008953a 	slli	r4,r4,20
   125e8:	00c00434 	movhi	r3,16
   125ec:	18ffffc4 	addi	r3,r3,-1
   125f0:	28c6703a 	and	r3,r5,r3
   125f4:	8005883a 	mov	r2,r16
   125f8:	1906b03a 	or	r3,r3,r4
   125fc:	dfc00117 	ldw	ra,4(sp)
   12600:	dc000017 	ldw	r16,0(sp)
   12604:	dec00204 	addi	sp,sp,8
   12608:	f800283a 	ret
   1260c:	00c002c4 	movi	r3,11
   12610:	188bc83a 	sub	r5,r3,r2
   12614:	814ad83a 	srl	r5,r16,r5
   12618:	00c00434 	movhi	r3,16
   1261c:	18ffffc4 	addi	r3,r3,-1
   12620:	81a0983a 	sll	r16,r16,r6
   12624:	2101ffcc 	andi	r4,r4,2047
   12628:	28ca703a 	and	r5,r5,r3
   1262c:	003fed06 	br	125e4 <__floatunsidf+0x50>
   12630:	0009883a 	mov	r4,zero
   12634:	000b883a 	mov	r5,zero
   12638:	003fea06 	br	125e4 <__floatunsidf+0x50>

0001263c <__clzsi2>:
   1263c:	00bfffd4 	movui	r2,65535
   12640:	11000536 	bltu	r2,r4,12658 <__clzsi2+0x1c>
   12644:	00803fc4 	movi	r2,255
   12648:	11000f36 	bltu	r2,r4,12688 <__clzsi2+0x4c>
   1264c:	00800804 	movi	r2,32
   12650:	0007883a 	mov	r3,zero
   12654:	00000506 	br	1266c <__clzsi2+0x30>
   12658:	00804034 	movhi	r2,256
   1265c:	10bfffc4 	addi	r2,r2,-1
   12660:	11000c2e 	bgeu	r2,r4,12694 <__clzsi2+0x58>
   12664:	00800204 	movi	r2,8
   12668:	00c00604 	movi	r3,24
   1266c:	20c8d83a 	srl	r4,r4,r3
   12670:	00c000b4 	movhi	r3,2
   12674:	18fdd204 	addi	r3,r3,-2232
   12678:	1909883a 	add	r4,r3,r4
   1267c:	20c00003 	ldbu	r3,0(r4)
   12680:	10c5c83a 	sub	r2,r2,r3
   12684:	f800283a 	ret
   12688:	00800604 	movi	r2,24
   1268c:	00c00204 	movi	r3,8
   12690:	003ff606 	br	1266c <__clzsi2+0x30>
   12694:	00800404 	movi	r2,16
   12698:	1007883a 	mov	r3,r2
   1269c:	003ff306 	br	1266c <__clzsi2+0x30>

000126a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   126a0:	defffe04 	addi	sp,sp,-8
   126a4:	dfc00115 	stw	ra,4(sp)
   126a8:	df000015 	stw	fp,0(sp)
   126ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   126b0:	d0a00c17 	ldw	r2,-32720(gp)
   126b4:	10000326 	beq	r2,zero,126c4 <alt_get_errno+0x24>
   126b8:	d0a00c17 	ldw	r2,-32720(gp)
   126bc:	103ee83a 	callr	r2
   126c0:	00000106 	br	126c8 <alt_get_errno+0x28>
   126c4:	d0a81504 	addi	r2,gp,-24492
}
   126c8:	e037883a 	mov	sp,fp
   126cc:	dfc00117 	ldw	ra,4(sp)
   126d0:	df000017 	ldw	fp,0(sp)
   126d4:	dec00204 	addi	sp,sp,8
   126d8:	f800283a 	ret

000126dc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   126dc:	defffb04 	addi	sp,sp,-20
   126e0:	dfc00415 	stw	ra,16(sp)
   126e4:	df000315 	stw	fp,12(sp)
   126e8:	df000304 	addi	fp,sp,12
   126ec:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   126f0:	e0bfff17 	ldw	r2,-4(fp)
   126f4:	10000616 	blt	r2,zero,12710 <close+0x34>
   126f8:	e0bfff17 	ldw	r2,-4(fp)
   126fc:	10c00324 	muli	r3,r2,12
   12700:	008000b4 	movhi	r2,2
   12704:	1080fe04 	addi	r2,r2,1016
   12708:	1885883a 	add	r2,r3,r2
   1270c:	00000106 	br	12714 <close+0x38>
   12710:	0005883a 	mov	r2,zero
   12714:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   12718:	e0bffd17 	ldw	r2,-12(fp)
   1271c:	10001926 	beq	r2,zero,12784 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   12720:	e0bffd17 	ldw	r2,-12(fp)
   12724:	10800017 	ldw	r2,0(r2)
   12728:	10800417 	ldw	r2,16(r2)
   1272c:	10000626 	beq	r2,zero,12748 <close+0x6c>
   12730:	e0bffd17 	ldw	r2,-12(fp)
   12734:	10800017 	ldw	r2,0(r2)
   12738:	10800417 	ldw	r2,16(r2)
   1273c:	e13ffd17 	ldw	r4,-12(fp)
   12740:	103ee83a 	callr	r2
   12744:	00000106 	br	1274c <close+0x70>
   12748:	0005883a 	mov	r2,zero
   1274c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   12750:	e13fff17 	ldw	r4,-4(fp)
   12754:	0012d940 	call	12d94 <alt_release_fd>
    if (rval < 0)
   12758:	e0bffe17 	ldw	r2,-8(fp)
   1275c:	1000070e 	bge	r2,zero,1277c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   12760:	00126a00 	call	126a0 <alt_get_errno>
   12764:	1007883a 	mov	r3,r2
   12768:	e0bffe17 	ldw	r2,-8(fp)
   1276c:	0085c83a 	sub	r2,zero,r2
   12770:	18800015 	stw	r2,0(r3)
      return -1;
   12774:	00bfffc4 	movi	r2,-1
   12778:	00000706 	br	12798 <close+0xbc>
    }
    return 0;
   1277c:	0005883a 	mov	r2,zero
   12780:	00000506 	br	12798 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12784:	00126a00 	call	126a0 <alt_get_errno>
   12788:	1007883a 	mov	r3,r2
   1278c:	00801444 	movi	r2,81
   12790:	18800015 	stw	r2,0(r3)
    return -1;
   12794:	00bfffc4 	movi	r2,-1
  }
}
   12798:	e037883a 	mov	sp,fp
   1279c:	dfc00117 	ldw	ra,4(sp)
   127a0:	df000017 	ldw	fp,0(sp)
   127a4:	dec00204 	addi	sp,sp,8
   127a8:	f800283a 	ret

000127ac <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   127ac:	defffc04 	addi	sp,sp,-16
   127b0:	df000315 	stw	fp,12(sp)
   127b4:	df000304 	addi	fp,sp,12
   127b8:	e13ffd15 	stw	r4,-12(fp)
   127bc:	e17ffe15 	stw	r5,-8(fp)
   127c0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   127c4:	e0bfff17 	ldw	r2,-4(fp)
}
   127c8:	e037883a 	mov	sp,fp
   127cc:	df000017 	ldw	fp,0(sp)
   127d0:	dec00104 	addi	sp,sp,4
   127d4:	f800283a 	ret

000127d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   127d8:	defffe04 	addi	sp,sp,-8
   127dc:	dfc00115 	stw	ra,4(sp)
   127e0:	df000015 	stw	fp,0(sp)
   127e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   127e8:	d0a00c17 	ldw	r2,-32720(gp)
   127ec:	10000326 	beq	r2,zero,127fc <alt_get_errno+0x24>
   127f0:	d0a00c17 	ldw	r2,-32720(gp)
   127f4:	103ee83a 	callr	r2
   127f8:	00000106 	br	12800 <alt_get_errno+0x28>
   127fc:	d0a81504 	addi	r2,gp,-24492
}
   12800:	e037883a 	mov	sp,fp
   12804:	dfc00117 	ldw	ra,4(sp)
   12808:	df000017 	ldw	fp,0(sp)
   1280c:	dec00204 	addi	sp,sp,8
   12810:	f800283a 	ret

00012814 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   12814:	defffb04 	addi	sp,sp,-20
   12818:	dfc00415 	stw	ra,16(sp)
   1281c:	df000315 	stw	fp,12(sp)
   12820:	df000304 	addi	fp,sp,12
   12824:	e13ffe15 	stw	r4,-8(fp)
   12828:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1282c:	e0bffe17 	ldw	r2,-8(fp)
   12830:	10000616 	blt	r2,zero,1284c <fstat+0x38>
   12834:	e0bffe17 	ldw	r2,-8(fp)
   12838:	10c00324 	muli	r3,r2,12
   1283c:	008000b4 	movhi	r2,2
   12840:	1080fe04 	addi	r2,r2,1016
   12844:	1885883a 	add	r2,r3,r2
   12848:	00000106 	br	12850 <fstat+0x3c>
   1284c:	0005883a 	mov	r2,zero
   12850:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   12854:	e0bffd17 	ldw	r2,-12(fp)
   12858:	10001026 	beq	r2,zero,1289c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1285c:	e0bffd17 	ldw	r2,-12(fp)
   12860:	10800017 	ldw	r2,0(r2)
   12864:	10800817 	ldw	r2,32(r2)
   12868:	10000726 	beq	r2,zero,12888 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   1286c:	e0bffd17 	ldw	r2,-12(fp)
   12870:	10800017 	ldw	r2,0(r2)
   12874:	10800817 	ldw	r2,32(r2)
   12878:	e17fff17 	ldw	r5,-4(fp)
   1287c:	e13ffd17 	ldw	r4,-12(fp)
   12880:	103ee83a 	callr	r2
   12884:	00000a06 	br	128b0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   12888:	e0bfff17 	ldw	r2,-4(fp)
   1288c:	00c80004 	movi	r3,8192
   12890:	10c00115 	stw	r3,4(r2)
      return 0;
   12894:	0005883a 	mov	r2,zero
   12898:	00000506 	br	128b0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1289c:	00127d80 	call	127d8 <alt_get_errno>
   128a0:	1007883a 	mov	r3,r2
   128a4:	00801444 	movi	r2,81
   128a8:	18800015 	stw	r2,0(r3)
    return -1;
   128ac:	00bfffc4 	movi	r2,-1
  }
}
   128b0:	e037883a 	mov	sp,fp
   128b4:	dfc00117 	ldw	ra,4(sp)
   128b8:	df000017 	ldw	fp,0(sp)
   128bc:	dec00204 	addi	sp,sp,8
   128c0:	f800283a 	ret

000128c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   128c4:	defffe04 	addi	sp,sp,-8
   128c8:	dfc00115 	stw	ra,4(sp)
   128cc:	df000015 	stw	fp,0(sp)
   128d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   128d4:	d0a00c17 	ldw	r2,-32720(gp)
   128d8:	10000326 	beq	r2,zero,128e8 <alt_get_errno+0x24>
   128dc:	d0a00c17 	ldw	r2,-32720(gp)
   128e0:	103ee83a 	callr	r2
   128e4:	00000106 	br	128ec <alt_get_errno+0x28>
   128e8:	d0a81504 	addi	r2,gp,-24492
}
   128ec:	e037883a 	mov	sp,fp
   128f0:	dfc00117 	ldw	ra,4(sp)
   128f4:	df000017 	ldw	fp,0(sp)
   128f8:	dec00204 	addi	sp,sp,8
   128fc:	f800283a 	ret

00012900 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   12900:	deffed04 	addi	sp,sp,-76
   12904:	dfc01215 	stw	ra,72(sp)
   12908:	df001115 	stw	fp,68(sp)
   1290c:	df001104 	addi	fp,sp,68
   12910:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12914:	e0bfff17 	ldw	r2,-4(fp)
   12918:	10000616 	blt	r2,zero,12934 <isatty+0x34>
   1291c:	e0bfff17 	ldw	r2,-4(fp)
   12920:	10c00324 	muli	r3,r2,12
   12924:	008000b4 	movhi	r2,2
   12928:	1080fe04 	addi	r2,r2,1016
   1292c:	1885883a 	add	r2,r3,r2
   12930:	00000106 	br	12938 <isatty+0x38>
   12934:	0005883a 	mov	r2,zero
   12938:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   1293c:	e0bfef17 	ldw	r2,-68(fp)
   12940:	10000e26 	beq	r2,zero,1297c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   12944:	e0bfef17 	ldw	r2,-68(fp)
   12948:	10800017 	ldw	r2,0(r2)
   1294c:	10800817 	ldw	r2,32(r2)
   12950:	1000021e 	bne	r2,zero,1295c <isatty+0x5c>
    {
      return 1;
   12954:	00800044 	movi	r2,1
   12958:	00000d06 	br	12990 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   1295c:	e0bff004 	addi	r2,fp,-64
   12960:	100b883a 	mov	r5,r2
   12964:	e13fff17 	ldw	r4,-4(fp)
   12968:	00128140 	call	12814 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   1296c:	e0bff117 	ldw	r2,-60(fp)
   12970:	10880020 	cmpeqi	r2,r2,8192
   12974:	10803fcc 	andi	r2,r2,255
   12978:	00000506 	br	12990 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1297c:	00128c40 	call	128c4 <alt_get_errno>
   12980:	1007883a 	mov	r3,r2
   12984:	00801444 	movi	r2,81
   12988:	18800015 	stw	r2,0(r3)
    return 0;
   1298c:	0005883a 	mov	r2,zero
  }
}
   12990:	e037883a 	mov	sp,fp
   12994:	dfc00117 	ldw	ra,4(sp)
   12998:	df000017 	ldw	fp,0(sp)
   1299c:	dec00204 	addi	sp,sp,8
   129a0:	f800283a 	ret

000129a4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   129a4:	defffc04 	addi	sp,sp,-16
   129a8:	df000315 	stw	fp,12(sp)
   129ac:	df000304 	addi	fp,sp,12
   129b0:	e13ffd15 	stw	r4,-12(fp)
   129b4:	e17ffe15 	stw	r5,-8(fp)
   129b8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   129bc:	e0fffe17 	ldw	r3,-8(fp)
   129c0:	e0bffd17 	ldw	r2,-12(fp)
   129c4:	18800c26 	beq	r3,r2,129f8 <alt_load_section+0x54>
  {
    while( to != end )
   129c8:	00000806 	br	129ec <alt_load_section+0x48>
    {
      *to++ = *from++;
   129cc:	e0bffe17 	ldw	r2,-8(fp)
   129d0:	10c00104 	addi	r3,r2,4
   129d4:	e0fffe15 	stw	r3,-8(fp)
   129d8:	e0fffd17 	ldw	r3,-12(fp)
   129dc:	19000104 	addi	r4,r3,4
   129e0:	e13ffd15 	stw	r4,-12(fp)
   129e4:	18c00017 	ldw	r3,0(r3)
   129e8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   129ec:	e0fffe17 	ldw	r3,-8(fp)
   129f0:	e0bfff17 	ldw	r2,-4(fp)
   129f4:	18bff51e 	bne	r3,r2,129cc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   129f8:	0001883a 	nop
   129fc:	e037883a 	mov	sp,fp
   12a00:	df000017 	ldw	fp,0(sp)
   12a04:	dec00104 	addi	sp,sp,4
   12a08:	f800283a 	ret

00012a0c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   12a0c:	defffe04 	addi	sp,sp,-8
   12a10:	dfc00115 	stw	ra,4(sp)
   12a14:	df000015 	stw	fp,0(sp)
   12a18:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   12a1c:	018000b4 	movhi	r6,2
   12a20:	31866c04 	addi	r6,r6,6576
   12a24:	014000b4 	movhi	r5,2
   12a28:	297eb904 	addi	r5,r5,-1308
   12a2c:	010000b4 	movhi	r4,2
   12a30:	21066c04 	addi	r4,r4,6576
   12a34:	00129a40 	call	129a4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   12a38:	01800034 	movhi	r6,0
   12a3c:	31809204 	addi	r6,r6,584
   12a40:	01400034 	movhi	r5,0
   12a44:	29400804 	addi	r5,r5,32
   12a48:	01000034 	movhi	r4,0
   12a4c:	21000804 	addi	r4,r4,32
   12a50:	00129a40 	call	129a4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   12a54:	018000b4 	movhi	r6,2
   12a58:	31beb904 	addi	r6,r6,-1308
   12a5c:	014000b4 	movhi	r5,2
   12a60:	297a8004 	addi	r5,r5,-5632
   12a64:	010000b4 	movhi	r4,2
   12a68:	213a8004 	addi	r4,r4,-5632
   12a6c:	00129a40 	call	129a4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   12a70:	001d6a40 	call	1d6a4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   12a74:	001d8f40 	call	1d8f4 <alt_icache_flush_all>
}
   12a78:	0001883a 	nop
   12a7c:	e037883a 	mov	sp,fp
   12a80:	dfc00117 	ldw	ra,4(sp)
   12a84:	df000017 	ldw	fp,0(sp)
   12a88:	dec00204 	addi	sp,sp,8
   12a8c:	f800283a 	ret

00012a90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12a90:	defffe04 	addi	sp,sp,-8
   12a94:	dfc00115 	stw	ra,4(sp)
   12a98:	df000015 	stw	fp,0(sp)
   12a9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12aa0:	d0a00c17 	ldw	r2,-32720(gp)
   12aa4:	10000326 	beq	r2,zero,12ab4 <alt_get_errno+0x24>
   12aa8:	d0a00c17 	ldw	r2,-32720(gp)
   12aac:	103ee83a 	callr	r2
   12ab0:	00000106 	br	12ab8 <alt_get_errno+0x28>
   12ab4:	d0a81504 	addi	r2,gp,-24492
}
   12ab8:	e037883a 	mov	sp,fp
   12abc:	dfc00117 	ldw	ra,4(sp)
   12ac0:	df000017 	ldw	fp,0(sp)
   12ac4:	dec00204 	addi	sp,sp,8
   12ac8:	f800283a 	ret

00012acc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   12acc:	defff904 	addi	sp,sp,-28
   12ad0:	dfc00615 	stw	ra,24(sp)
   12ad4:	df000515 	stw	fp,20(sp)
   12ad8:	df000504 	addi	fp,sp,20
   12adc:	e13ffd15 	stw	r4,-12(fp)
   12ae0:	e17ffe15 	stw	r5,-8(fp)
   12ae4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   12ae8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12aec:	e0bffd17 	ldw	r2,-12(fp)
   12af0:	10000616 	blt	r2,zero,12b0c <lseek+0x40>
   12af4:	e0bffd17 	ldw	r2,-12(fp)
   12af8:	10c00324 	muli	r3,r2,12
   12afc:	008000b4 	movhi	r2,2
   12b00:	1080fe04 	addi	r2,r2,1016
   12b04:	1885883a 	add	r2,r3,r2
   12b08:	00000106 	br	12b10 <lseek+0x44>
   12b0c:	0005883a 	mov	r2,zero
   12b10:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   12b14:	e0bffc17 	ldw	r2,-16(fp)
   12b18:	10001026 	beq	r2,zero,12b5c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   12b1c:	e0bffc17 	ldw	r2,-16(fp)
   12b20:	10800017 	ldw	r2,0(r2)
   12b24:	10800717 	ldw	r2,28(r2)
   12b28:	10000926 	beq	r2,zero,12b50 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   12b2c:	e0bffc17 	ldw	r2,-16(fp)
   12b30:	10800017 	ldw	r2,0(r2)
   12b34:	10800717 	ldw	r2,28(r2)
   12b38:	e1bfff17 	ldw	r6,-4(fp)
   12b3c:	e17ffe17 	ldw	r5,-8(fp)
   12b40:	e13ffc17 	ldw	r4,-16(fp)
   12b44:	103ee83a 	callr	r2
   12b48:	e0bffb15 	stw	r2,-20(fp)
   12b4c:	00000506 	br	12b64 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   12b50:	00bfde84 	movi	r2,-134
   12b54:	e0bffb15 	stw	r2,-20(fp)
   12b58:	00000206 	br	12b64 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   12b5c:	00bfebc4 	movi	r2,-81
   12b60:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   12b64:	e0bffb17 	ldw	r2,-20(fp)
   12b68:	1000070e 	bge	r2,zero,12b88 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   12b6c:	0012a900 	call	12a90 <alt_get_errno>
   12b70:	1007883a 	mov	r3,r2
   12b74:	e0bffb17 	ldw	r2,-20(fp)
   12b78:	0085c83a 	sub	r2,zero,r2
   12b7c:	18800015 	stw	r2,0(r3)
    rc = -1;
   12b80:	00bfffc4 	movi	r2,-1
   12b84:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   12b88:	e0bffb17 	ldw	r2,-20(fp)
}
   12b8c:	e037883a 	mov	sp,fp
   12b90:	dfc00117 	ldw	ra,4(sp)
   12b94:	df000017 	ldw	fp,0(sp)
   12b98:	dec00204 	addi	sp,sp,8
   12b9c:	f800283a 	ret

00012ba0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   12ba0:	defff904 	addi	sp,sp,-28
   12ba4:	dfc00615 	stw	ra,24(sp)
   12ba8:	df000515 	stw	fp,20(sp)
   12bac:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   12bb0:	0009883a 	mov	r4,zero
   12bb4:	001ab000 	call	1ab00 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   12bb8:	0013b5c0 	call	13b5c <OSInit>
   12bbc:	01000044 	movi	r4,1
   12bc0:	00184bc0 	call	184bc <OSSemCreate>
   12bc4:	d0a81b15 	stw	r2,-24468(gp)
   12bc8:	01000044 	movi	r4,1
   12bcc:	00184bc0 	call	184bc <OSSemCreate>
   12bd0:	d0a81d15 	stw	r2,-24460(gp)
   12bd4:	d0a81604 	addi	r2,gp,-24488
   12bd8:	e0bffc15 	stw	r2,-16(fp)
   12bdc:	00800044 	movi	r2,1
   12be0:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   12be4:	e0bffd0b 	ldhu	r2,-12(fp)
   12be8:	1009883a 	mov	r4,r2
   12bec:	00184bc0 	call	184bc <OSSemCreate>
   12bf0:	1007883a 	mov	r3,r2
   12bf4:	e0bffc17 	ldw	r2,-16(fp)
   12bf8:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   12bfc:	001ab380 	call	1ab38 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   12c00:	018000b4 	movhi	r6,2
   12c04:	31be1504 	addi	r6,r6,-1964
   12c08:	014000b4 	movhi	r5,2
   12c0c:	297e1504 	addi	r5,r5,-1964
   12c10:	010000b4 	movhi	r4,2
   12c14:	213e1504 	addi	r4,r4,-1964
   12c18:	001d9ec0 	call	1d9ec <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   12c1c:	001d7a40 	call	1d7a4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   12c20:	010000b4 	movhi	r4,2
   12c24:	21360104 	addi	r4,r4,-10236
   12c28:	001e66c0 	call	1e66c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   12c2c:	d0a81717 	ldw	r2,-24484(gp)
   12c30:	d0e81817 	ldw	r3,-24480(gp)
   12c34:	d1281917 	ldw	r4,-24476(gp)
   12c38:	200d883a 	mov	r6,r4
   12c3c:	180b883a 	mov	r5,r3
   12c40:	1009883a 	mov	r4,r2
   12c44:	00008800 	call	880 <main>
   12c48:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   12c4c:	01000044 	movi	r4,1
   12c50:	00126dc0 	call	126dc <close>
  exit (result);
   12c54:	e13ffb17 	ldw	r4,-20(fp)
   12c58:	001e6800 	call	1e680 <exit>

00012c5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12c5c:	defffe04 	addi	sp,sp,-8
   12c60:	dfc00115 	stw	ra,4(sp)
   12c64:	df000015 	stw	fp,0(sp)
   12c68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12c6c:	d0a00c17 	ldw	r2,-32720(gp)
   12c70:	10000326 	beq	r2,zero,12c80 <alt_get_errno+0x24>
   12c74:	d0a00c17 	ldw	r2,-32720(gp)
   12c78:	103ee83a 	callr	r2
   12c7c:	00000106 	br	12c84 <alt_get_errno+0x28>
   12c80:	d0a81504 	addi	r2,gp,-24492
}
   12c84:	e037883a 	mov	sp,fp
   12c88:	dfc00117 	ldw	ra,4(sp)
   12c8c:	df000017 	ldw	fp,0(sp)
   12c90:	dec00204 	addi	sp,sp,8
   12c94:	f800283a 	ret

00012c98 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   12c98:	defff904 	addi	sp,sp,-28
   12c9c:	dfc00615 	stw	ra,24(sp)
   12ca0:	df000515 	stw	fp,20(sp)
   12ca4:	df000504 	addi	fp,sp,20
   12ca8:	e13ffd15 	stw	r4,-12(fp)
   12cac:	e17ffe15 	stw	r5,-8(fp)
   12cb0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12cb4:	e0bffd17 	ldw	r2,-12(fp)
   12cb8:	10000616 	blt	r2,zero,12cd4 <read+0x3c>
   12cbc:	e0bffd17 	ldw	r2,-12(fp)
   12cc0:	10c00324 	muli	r3,r2,12
   12cc4:	008000b4 	movhi	r2,2
   12cc8:	1080fe04 	addi	r2,r2,1016
   12ccc:	1885883a 	add	r2,r3,r2
   12cd0:	00000106 	br	12cd8 <read+0x40>
   12cd4:	0005883a 	mov	r2,zero
   12cd8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   12cdc:	e0bffb17 	ldw	r2,-20(fp)
   12ce0:	10002226 	beq	r2,zero,12d6c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   12ce4:	e0bffb17 	ldw	r2,-20(fp)
   12ce8:	10800217 	ldw	r2,8(r2)
   12cec:	108000cc 	andi	r2,r2,3
   12cf0:	10800060 	cmpeqi	r2,r2,1
   12cf4:	1000181e 	bne	r2,zero,12d58 <read+0xc0>
        (fd->dev->read))
   12cf8:	e0bffb17 	ldw	r2,-20(fp)
   12cfc:	10800017 	ldw	r2,0(r2)
   12d00:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   12d04:	10001426 	beq	r2,zero,12d58 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   12d08:	e0bffb17 	ldw	r2,-20(fp)
   12d0c:	10800017 	ldw	r2,0(r2)
   12d10:	10800517 	ldw	r2,20(r2)
   12d14:	e0ffff17 	ldw	r3,-4(fp)
   12d18:	180d883a 	mov	r6,r3
   12d1c:	e17ffe17 	ldw	r5,-8(fp)
   12d20:	e13ffb17 	ldw	r4,-20(fp)
   12d24:	103ee83a 	callr	r2
   12d28:	e0bffc15 	stw	r2,-16(fp)
   12d2c:	e0bffc17 	ldw	r2,-16(fp)
   12d30:	1000070e 	bge	r2,zero,12d50 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   12d34:	0012c5c0 	call	12c5c <alt_get_errno>
   12d38:	1007883a 	mov	r3,r2
   12d3c:	e0bffc17 	ldw	r2,-16(fp)
   12d40:	0085c83a 	sub	r2,zero,r2
   12d44:	18800015 	stw	r2,0(r3)
          return -1;
   12d48:	00bfffc4 	movi	r2,-1
   12d4c:	00000c06 	br	12d80 <read+0xe8>
        }
        return rval;
   12d50:	e0bffc17 	ldw	r2,-16(fp)
   12d54:	00000a06 	br	12d80 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   12d58:	0012c5c0 	call	12c5c <alt_get_errno>
   12d5c:	1007883a 	mov	r3,r2
   12d60:	00800344 	movi	r2,13
   12d64:	18800015 	stw	r2,0(r3)
   12d68:	00000406 	br	12d7c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   12d6c:	0012c5c0 	call	12c5c <alt_get_errno>
   12d70:	1007883a 	mov	r3,r2
   12d74:	00801444 	movi	r2,81
   12d78:	18800015 	stw	r2,0(r3)
  }
  return -1;
   12d7c:	00bfffc4 	movi	r2,-1
}
   12d80:	e037883a 	mov	sp,fp
   12d84:	dfc00117 	ldw	ra,4(sp)
   12d88:	df000017 	ldw	fp,0(sp)
   12d8c:	dec00204 	addi	sp,sp,8
   12d90:	f800283a 	ret

00012d94 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   12d94:	defffe04 	addi	sp,sp,-8
   12d98:	df000115 	stw	fp,4(sp)
   12d9c:	df000104 	addi	fp,sp,4
   12da0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   12da4:	e0bfff17 	ldw	r2,-4(fp)
   12da8:	108000d0 	cmplti	r2,r2,3
   12dac:	10000d1e 	bne	r2,zero,12de4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   12db0:	008000b4 	movhi	r2,2
   12db4:	1080fe04 	addi	r2,r2,1016
   12db8:	e0ffff17 	ldw	r3,-4(fp)
   12dbc:	18c00324 	muli	r3,r3,12
   12dc0:	10c5883a 	add	r2,r2,r3
   12dc4:	10800204 	addi	r2,r2,8
   12dc8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   12dcc:	008000b4 	movhi	r2,2
   12dd0:	1080fe04 	addi	r2,r2,1016
   12dd4:	e0ffff17 	ldw	r3,-4(fp)
   12dd8:	18c00324 	muli	r3,r3,12
   12ddc:	10c5883a 	add	r2,r2,r3
   12de0:	10000015 	stw	zero,0(r2)
  }
}
   12de4:	0001883a 	nop
   12de8:	e037883a 	mov	sp,fp
   12dec:	df000017 	ldw	fp,0(sp)
   12df0:	dec00104 	addi	sp,sp,4
   12df4:	f800283a 	ret

00012df8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   12df8:	defff904 	addi	sp,sp,-28
   12dfc:	df000615 	stw	fp,24(sp)
   12e00:	df000604 	addi	fp,sp,24
   12e04:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12e08:	0005303a 	rdctl	r2,status
   12e0c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12e10:	e0fffe17 	ldw	r3,-8(fp)
   12e14:	00bfff84 	movi	r2,-2
   12e18:	1884703a 	and	r2,r3,r2
   12e1c:	1001703a 	wrctl	status,r2
  
  return context;
   12e20:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   12e24:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   12e28:	d0a00d17 	ldw	r2,-32716(gp)
   12e2c:	10c000c4 	addi	r3,r2,3
   12e30:	00bfff04 	movi	r2,-4
   12e34:	1884703a 	and	r2,r3,r2
   12e38:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   12e3c:	d0e00d17 	ldw	r3,-32716(gp)
   12e40:	e0bfff17 	ldw	r2,-4(fp)
   12e44:	1887883a 	add	r3,r3,r2
   12e48:	00810034 	movhi	r2,1024
   12e4c:	10800004 	addi	r2,r2,0
   12e50:	10c0062e 	bgeu	r2,r3,12e6c <sbrk+0x74>
   12e54:	e0bffb17 	ldw	r2,-20(fp)
   12e58:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12e5c:	e0bffa17 	ldw	r2,-24(fp)
   12e60:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   12e64:	00bfffc4 	movi	r2,-1
   12e68:	00000b06 	br	12e98 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   12e6c:	d0a00d17 	ldw	r2,-32716(gp)
   12e70:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   12e74:	d0e00d17 	ldw	r3,-32716(gp)
   12e78:	e0bfff17 	ldw	r2,-4(fp)
   12e7c:	1885883a 	add	r2,r3,r2
   12e80:	d0a00d15 	stw	r2,-32716(gp)
   12e84:	e0bffb17 	ldw	r2,-20(fp)
   12e88:	e0bffc15 	stw	r2,-16(fp)
   12e8c:	e0bffc17 	ldw	r2,-16(fp)
   12e90:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   12e94:	e0bffd17 	ldw	r2,-12(fp)
} 
   12e98:	e037883a 	mov	sp,fp
   12e9c:	df000017 	ldw	fp,0(sp)
   12ea0:	dec00104 	addi	sp,sp,4
   12ea4:	f800283a 	ret

00012ea8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12ea8:	defffe04 	addi	sp,sp,-8
   12eac:	dfc00115 	stw	ra,4(sp)
   12eb0:	df000015 	stw	fp,0(sp)
   12eb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12eb8:	d0a00c17 	ldw	r2,-32720(gp)
   12ebc:	10000326 	beq	r2,zero,12ecc <alt_get_errno+0x24>
   12ec0:	d0a00c17 	ldw	r2,-32720(gp)
   12ec4:	103ee83a 	callr	r2
   12ec8:	00000106 	br	12ed0 <alt_get_errno+0x28>
   12ecc:	d0a81504 	addi	r2,gp,-24492
}
   12ed0:	e037883a 	mov	sp,fp
   12ed4:	dfc00117 	ldw	ra,4(sp)
   12ed8:	df000017 	ldw	fp,0(sp)
   12edc:	dec00204 	addi	sp,sp,8
   12ee0:	f800283a 	ret

00012ee4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   12ee4:	defff904 	addi	sp,sp,-28
   12ee8:	dfc00615 	stw	ra,24(sp)
   12eec:	df000515 	stw	fp,20(sp)
   12ef0:	df000504 	addi	fp,sp,20
   12ef4:	e13ffd15 	stw	r4,-12(fp)
   12ef8:	e17ffe15 	stw	r5,-8(fp)
   12efc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12f00:	e0bffd17 	ldw	r2,-12(fp)
   12f04:	10000616 	blt	r2,zero,12f20 <write+0x3c>
   12f08:	e0bffd17 	ldw	r2,-12(fp)
   12f0c:	10c00324 	muli	r3,r2,12
   12f10:	008000b4 	movhi	r2,2
   12f14:	1080fe04 	addi	r2,r2,1016
   12f18:	1885883a 	add	r2,r3,r2
   12f1c:	00000106 	br	12f24 <write+0x40>
   12f20:	0005883a 	mov	r2,zero
   12f24:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   12f28:	e0bffb17 	ldw	r2,-20(fp)
   12f2c:	10002126 	beq	r2,zero,12fb4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   12f30:	e0bffb17 	ldw	r2,-20(fp)
   12f34:	10800217 	ldw	r2,8(r2)
   12f38:	108000cc 	andi	r2,r2,3
   12f3c:	10001826 	beq	r2,zero,12fa0 <write+0xbc>
   12f40:	e0bffb17 	ldw	r2,-20(fp)
   12f44:	10800017 	ldw	r2,0(r2)
   12f48:	10800617 	ldw	r2,24(r2)
   12f4c:	10001426 	beq	r2,zero,12fa0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   12f50:	e0bffb17 	ldw	r2,-20(fp)
   12f54:	10800017 	ldw	r2,0(r2)
   12f58:	10800617 	ldw	r2,24(r2)
   12f5c:	e0ffff17 	ldw	r3,-4(fp)
   12f60:	180d883a 	mov	r6,r3
   12f64:	e17ffe17 	ldw	r5,-8(fp)
   12f68:	e13ffb17 	ldw	r4,-20(fp)
   12f6c:	103ee83a 	callr	r2
   12f70:	e0bffc15 	stw	r2,-16(fp)
   12f74:	e0bffc17 	ldw	r2,-16(fp)
   12f78:	1000070e 	bge	r2,zero,12f98 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   12f7c:	0012ea80 	call	12ea8 <alt_get_errno>
   12f80:	1007883a 	mov	r3,r2
   12f84:	e0bffc17 	ldw	r2,-16(fp)
   12f88:	0085c83a 	sub	r2,zero,r2
   12f8c:	18800015 	stw	r2,0(r3)
        return -1;
   12f90:	00bfffc4 	movi	r2,-1
   12f94:	00000c06 	br	12fc8 <write+0xe4>
      }
      return rval;
   12f98:	e0bffc17 	ldw	r2,-16(fp)
   12f9c:	00000a06 	br	12fc8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   12fa0:	0012ea80 	call	12ea8 <alt_get_errno>
   12fa4:	1007883a 	mov	r3,r2
   12fa8:	00800344 	movi	r2,13
   12fac:	18800015 	stw	r2,0(r3)
   12fb0:	00000406 	br	12fc4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   12fb4:	0012ea80 	call	12ea8 <alt_get_errno>
   12fb8:	1007883a 	mov	r3,r2
   12fbc:	00801444 	movi	r2,81
   12fc0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   12fc4:	00bfffc4 	movi	r2,-1
}
   12fc8:	e037883a 	mov	sp,fp
   12fcc:	dfc00117 	ldw	ra,4(sp)
   12fd0:	df000017 	ldw	fp,0(sp)
   12fd4:	dec00204 	addi	sp,sp,8
   12fd8:	f800283a 	ret

00012fdc <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   12fdc:	deffdf04 	addi	sp,sp,-132
   12fe0:	dfc02015 	stw	ra,128(sp)
   12fe4:	df001f15 	stw	fp,124(sp)
   12fe8:	df001f04 	addi	fp,sp,124
   12fec:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   12ff0:	e0bfe204 	addi	r2,fp,-120
   12ff4:	100b883a 	mov	r5,r2
   12ff8:	01003fc4 	movi	r4,255
   12ffc:	001a4440 	call	1a444 <OSTaskQuery>
   13000:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   13004:	e0bffe83 	ldbu	r2,-6(fp)
   13008:	10803fcc 	andi	r2,r2,255
   1300c:	10001e1e 	bne	r2,zero,13088 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
   13010:	e0bfee83 	ldbu	r2,-70(fp)
   13014:	10803fcc 	andi	r2,r2,255
   13018:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   1301c:	d0a81b17 	ldw	r2,-24468(gp)
   13020:	e0fffd04 	addi	r3,fp,-12
   13024:	180b883a 	mov	r5,r3
   13028:	1009883a 	mov	r4,r2
   1302c:	0018c5c0 	call	18c5c <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   13030:	e0bffe43 	ldbu	r2,-7(fp)
   13034:	10803fcc 	andi	r2,r2,255
   13038:	10000726 	beq	r2,zero,13058 <__env_lock+0x7c>
   1303c:	d0a00e17 	ldw	r2,-32712(gp)
   13040:	e0ffe117 	ldw	r3,-124(fp)
   13044:	1880041e 	bne	r3,r2,13058 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
   13048:	d0a81a17 	ldw	r2,-24472(gp)
   1304c:	10800044 	addi	r2,r2,1
   13050:	d0a81a15 	stw	r2,-24472(gp)
   13054:	00000a06 	br	13080 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   13058:	d0a81b17 	ldw	r2,-24468(gp)
   1305c:	e0fffe84 	addi	r3,fp,-6
   13060:	180d883a 	mov	r6,r3
   13064:	000b883a 	mov	r5,zero
   13068:	1009883a 	mov	r4,r2
   1306c:	00187d40 	call	187d4 <OSSemPend>
    locks  = 1;
   13070:	00800044 	movi	r2,1
   13074:	d0a81a15 	stw	r2,-24472(gp)
    lockid = id;
   13078:	e0bfe117 	ldw	r2,-124(fp)
   1307c:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   13080:	0001883a 	nop
   13084:	00000106 	br	1308c <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   13088:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   1308c:	e037883a 	mov	sp,fp
   13090:	dfc00117 	ldw	ra,4(sp)
   13094:	df000017 	ldw	fp,0(sp)
   13098:	dec00204 	addi	sp,sp,8
   1309c:	f800283a 	ret

000130a0 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   130a0:	defffd04 	addi	sp,sp,-12
   130a4:	dfc00215 	stw	ra,8(sp)
   130a8:	df000115 	stw	fp,4(sp)
   130ac:	df000104 	addi	fp,sp,4
   130b0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   130b4:	d0a81a17 	ldw	r2,-24472(gp)
   130b8:	10000b26 	beq	r2,zero,130e8 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   130bc:	d0a81a17 	ldw	r2,-24472(gp)
   130c0:	10bfffc4 	addi	r2,r2,-1
   130c4:	d0a81a15 	stw	r2,-24472(gp)
   130c8:	d0a81a17 	ldw	r2,-24472(gp)
   130cc:	1000071e 	bne	r2,zero,130ec <__env_unlock+0x4c>
  {
    lockid = -1;
   130d0:	00bfffc4 	movi	r2,-1
   130d4:	d0a00e15 	stw	r2,-32712(gp)
    OSSemPost( alt_envsem );
   130d8:	d0a81b17 	ldw	r2,-24468(gp)
   130dc:	1009883a 	mov	r4,r2
   130e0:	0018b4c0 	call	18b4c <OSSemPost>
   130e4:	00000106 	br	130ec <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
   130e8:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   130ec:	e037883a 	mov	sp,fp
   130f0:	dfc00117 	ldw	ra,4(sp)
   130f4:	df000017 	ldw	fp,0(sp)
   130f8:	dec00204 	addi	sp,sp,8
   130fc:	f800283a 	ret

00013100 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   13100:	deffdb04 	addi	sp,sp,-148
   13104:	dfc02415 	stw	ra,144(sp)
   13108:	df002315 	stw	fp,140(sp)
   1310c:	df002304 	addi	fp,sp,140
   13110:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13114:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   13118:	d0a81e43 	ldbu	r2,-24455(gp)
   1311c:	10803fcc 	andi	r2,r2,255
   13120:	10800060 	cmpeqi	r2,r2,1
   13124:	10003626 	beq	r2,zero,13200 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   13128:	e0bfe204 	addi	r2,fp,-120
   1312c:	100b883a 	mov	r5,r2
   13130:	01003fc4 	movi	r4,255
   13134:	001a4440 	call	1a444 <OSTaskQuery>
   13138:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   1313c:	e0bffe83 	ldbu	r2,-6(fp)
   13140:	10803fcc 	andi	r2,r2,255
   13144:	1000301e 	bne	r2,zero,13208 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
   13148:	e0bfee83 	ldbu	r2,-70(fp)
   1314c:	10803fcc 	andi	r2,r2,255
   13150:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   13154:	d0a81d17 	ldw	r2,-24460(gp)
   13158:	e0fffd04 	addi	r3,fp,-12
   1315c:	180b883a 	mov	r5,r3
   13160:	1009883a 	mov	r4,r2
   13164:	0018c5c0 	call	18c5c <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13168:	0005303a 	rdctl	r2,status
   1316c:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13170:	e0ffe117 	ldw	r3,-124(fp)
   13174:	00bfff84 	movi	r2,-2
   13178:	1884703a 	and	r2,r3,r2
   1317c:	1001703a 	wrctl	status,r2
  
  return context;
   13180:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
   13184:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   13188:	e0bffd0b 	ldhu	r2,-12(fp)
   1318c:	10bfffcc 	andi	r2,r2,65535
   13190:	10000b1e 	bne	r2,zero,131c0 <__malloc_lock+0xc0>
   13194:	d0a00f17 	ldw	r2,-32708(gp)
   13198:	e0ffde17 	ldw	r3,-136(fp)
   1319c:	1880081e 	bne	r3,r2,131c0 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
   131a0:	d0a81c17 	ldw	r2,-24464(gp)
   131a4:	10800044 	addi	r2,r2,1
   131a8:	d0a81c15 	stw	r2,-24464(gp)
   131ac:	e0bfdd17 	ldw	r2,-140(fp)
   131b0:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   131b4:	e0bfdf17 	ldw	r2,-132(fp)
   131b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   131bc:	00000e06 	br	131f8 <__malloc_lock+0xf8>
   131c0:	e0bfdd17 	ldw	r2,-140(fp)
   131c4:	e0bfe015 	stw	r2,-128(fp)
   131c8:	e0bfe017 	ldw	r2,-128(fp)
   131cc:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   131d0:	d0a81d17 	ldw	r2,-24460(gp)
   131d4:	e0fffe84 	addi	r3,fp,-6
   131d8:	180d883a 	mov	r6,r3
   131dc:	000b883a 	mov	r5,zero
   131e0:	1009883a 	mov	r4,r2
   131e4:	00187d40 	call	187d4 <OSSemPend>
    locks  = 1;
   131e8:	00800044 	movi	r2,1
   131ec:	d0a81c15 	stw	r2,-24464(gp)
    lockid = id;
   131f0:	e0bfde17 	ldw	r2,-136(fp)
   131f4:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   131f8:	0001883a 	nop
   131fc:	00000306 	br	1320c <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
   13200:	0001883a 	nop
   13204:	00000106 	br	1320c <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   13208:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   1320c:	e037883a 	mov	sp,fp
   13210:	dfc00117 	ldw	ra,4(sp)
   13214:	df000017 	ldw	fp,0(sp)
   13218:	dec00204 	addi	sp,sp,8
   1321c:	f800283a 	ret

00013220 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   13220:	defff804 	addi	sp,sp,-32
   13224:	dfc00715 	stw	ra,28(sp)
   13228:	df000615 	stw	fp,24(sp)
   1322c:	df000604 	addi	fp,sp,24
   13230:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13234:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   13238:	d0a81e43 	ldbu	r2,-24455(gp)
   1323c:	10803fcc 	andi	r2,r2,255
   13240:	10800060 	cmpeqi	r2,r2,1
   13244:	10002326 	beq	r2,zero,132d4 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13248:	0005303a 	rdctl	r2,status
   1324c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13250:	e0fffe17 	ldw	r3,-8(fp)
   13254:	00bfff84 	movi	r2,-2
   13258:	1884703a 	and	r2,r3,r2
   1325c:	1001703a 	wrctl	status,r2
  
  return context;
   13260:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
   13264:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   13268:	d0a81c17 	ldw	r2,-24464(gp)
   1326c:	1000051e 	bne	r2,zero,13284 <__malloc_unlock+0x64>
   13270:	e0bffa17 	ldw	r2,-24(fp)
   13274:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13278:	e0bffb17 	ldw	r2,-20(fp)
   1327c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   13280:	00001506 	br	132d8 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   13284:	d0a81c17 	ldw	r2,-24464(gp)
   13288:	10bfffc4 	addi	r2,r2,-1
   1328c:	d0a81c15 	stw	r2,-24464(gp)
   13290:	d0a81c17 	ldw	r2,-24464(gp)
   13294:	10000a1e 	bne	r2,zero,132c0 <__malloc_unlock+0xa0>
  {
    lockid = -1;
   13298:	00bfffc4 	movi	r2,-1
   1329c:	d0a00f15 	stw	r2,-32708(gp)
   132a0:	e0bffa17 	ldw	r2,-24(fp)
   132a4:	e0bffc15 	stw	r2,-16(fp)
   132a8:	e0bffc17 	ldw	r2,-16(fp)
   132ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   132b0:	d0a81d17 	ldw	r2,-24460(gp)
   132b4:	1009883a 	mov	r4,r2
   132b8:	0018b4c0 	call	18b4c <OSSemPost>
   132bc:	00000606 	br	132d8 <__malloc_unlock+0xb8>
   132c0:	e0bffa17 	ldw	r2,-24(fp)
   132c4:	e0bffd15 	stw	r2,-12(fp)
   132c8:	e0bffd17 	ldw	r2,-12(fp)
   132cc:	1001703a 	wrctl	status,r2
   132d0:	00000106 	br	132d8 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
   132d4:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   132d8:	e037883a 	mov	sp,fp
   132dc:	dfc00117 	ldw	ra,4(sp)
   132e0:	df000017 	ldw	fp,0(sp)
   132e4:	dec00204 	addi	sp,sp,8
   132e8:	f800283a 	ret

000132ec <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   132ec:	defff704 	addi	sp,sp,-36
   132f0:	dfc00815 	stw	ra,32(sp)
   132f4:	df000715 	stw	fp,28(sp)
   132f8:	df000704 	addi	fp,sp,28
   132fc:	e13ffd15 	stw	r4,-12(fp)
   13300:	e17ffe15 	stw	r5,-8(fp)
   13304:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13308:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1330c:	e0bfff17 	ldw	r2,-4(fp)
   13310:	1000021e 	bne	r2,zero,1331c <OSEventNameGet+0x30>
        return (0);
   13314:	0005883a 	mov	r2,zero
   13318:	00003706 	br	133f8 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   1331c:	e0bffd17 	ldw	r2,-12(fp)
   13320:	1000051e 	bne	r2,zero,13338 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   13324:	e0bfff17 	ldw	r2,-4(fp)
   13328:	00c00104 	movi	r3,4
   1332c:	10c00005 	stb	r3,0(r2)
        return (0);
   13330:	0005883a 	mov	r2,zero
   13334:	00003006 	br	133f8 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   13338:	e0bffe17 	ldw	r2,-8(fp)
   1333c:	1000051e 	bne	r2,zero,13354 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   13340:	e0bfff17 	ldw	r2,-4(fp)
   13344:	00c00304 	movi	r3,12
   13348:	10c00005 	stb	r3,0(r2)
        return (0);
   1334c:	0005883a 	mov	r2,zero
   13350:	00002906 	br	133f8 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   13354:	d0a82c03 	ldbu	r2,-24400(gp)
   13358:	10803fcc 	andi	r2,r2,255
   1335c:	10000526 	beq	r2,zero,13374 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   13360:	e0bfff17 	ldw	r2,-4(fp)
   13364:	00c00444 	movi	r3,17
   13368:	10c00005 	stb	r3,0(r2)
        return (0);
   1336c:	0005883a 	mov	r2,zero
   13370:	00002106 	br	133f8 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   13374:	e0bffd17 	ldw	r2,-12(fp)
   13378:	10800003 	ldbu	r2,0(r2)
   1337c:	10803fcc 	andi	r2,r2,255
   13380:	10bfffc4 	addi	r2,r2,-1
   13384:	10800128 	cmpgeui	r2,r2,4
   13388:	10000526 	beq	r2,zero,133a0 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   1338c:	e0bfff17 	ldw	r2,-4(fp)
   13390:	00c00044 	movi	r3,1
   13394:	10c00005 	stb	r3,0(r2)
             return (0);
   13398:	0005883a 	mov	r2,zero
   1339c:	00001606 	br	133f8 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   133a0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   133a4:	0005303a 	rdctl	r2,status
   133a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   133ac:	e0fffb17 	ldw	r3,-20(fp)
   133b0:	00bfff84 	movi	r2,-2
   133b4:	1884703a 	and	r2,r3,r2
   133b8:	1001703a 	wrctl	status,r2
  
  return context;
   133bc:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   133c0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   133c4:	e0bffd17 	ldw	r2,-12(fp)
   133c8:	10800384 	addi	r2,r2,14
   133cc:	100b883a 	mov	r5,r2
   133d0:	e13ffe17 	ldw	r4,-8(fp)
   133d4:	0014d700 	call	14d70 <OS_StrCopy>
   133d8:	e0bffa05 	stb	r2,-24(fp)
   133dc:	e0bff917 	ldw	r2,-28(fp)
   133e0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   133e4:	e0bffc17 	ldw	r2,-16(fp)
   133e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   133ec:	e0bfff17 	ldw	r2,-4(fp)
   133f0:	10000005 	stb	zero,0(r2)
    return (len);
   133f4:	e0bffa03 	ldbu	r2,-24(fp)
}
   133f8:	e037883a 	mov	sp,fp
   133fc:	dfc00117 	ldw	ra,4(sp)
   13400:	df000017 	ldw	fp,0(sp)
   13404:	dec00204 	addi	sp,sp,8
   13408:	f800283a 	ret

0001340c <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   1340c:	defff604 	addi	sp,sp,-40
   13410:	dfc00915 	stw	ra,36(sp)
   13414:	df000815 	stw	fp,32(sp)
   13418:	df000804 	addi	fp,sp,32
   1341c:	e13ffd15 	stw	r4,-12(fp)
   13420:	e17ffe15 	stw	r5,-8(fp)
   13424:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13428:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1342c:	e0bfff17 	ldw	r2,-4(fp)
   13430:	10004026 	beq	r2,zero,13534 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   13434:	e0bffd17 	ldw	r2,-12(fp)
   13438:	1000041e 	bne	r2,zero,1344c <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   1343c:	e0bfff17 	ldw	r2,-4(fp)
   13440:	00c00104 	movi	r3,4
   13444:	10c00005 	stb	r3,0(r2)
        return;
   13448:	00003b06 	br	13538 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1344c:	e0bffe17 	ldw	r2,-8(fp)
   13450:	1000041e 	bne	r2,zero,13464 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   13454:	e0bfff17 	ldw	r2,-4(fp)
   13458:	00c00304 	movi	r3,12
   1345c:	10c00005 	stb	r3,0(r2)
        return;
   13460:	00003506 	br	13538 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   13464:	d0a82c03 	ldbu	r2,-24400(gp)
   13468:	10803fcc 	andi	r2,r2,255
   1346c:	10000426 	beq	r2,zero,13480 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   13470:	e0bfff17 	ldw	r2,-4(fp)
   13474:	00c00484 	movi	r3,18
   13478:	10c00005 	stb	r3,0(r2)
        return;
   1347c:	00002e06 	br	13538 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
   13480:	e0bffd17 	ldw	r2,-12(fp)
   13484:	10800003 	ldbu	r2,0(r2)
   13488:	10803fcc 	andi	r2,r2,255
   1348c:	10bfffc4 	addi	r2,r2,-1
   13490:	10800128 	cmpgeui	r2,r2,4
   13494:	10000426 	beq	r2,zero,134a8 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   13498:	e0bfff17 	ldw	r2,-4(fp)
   1349c:	00c00044 	movi	r3,1
   134a0:	10c00005 	stb	r3,0(r2)
             return;
   134a4:	00002406 	br	13538 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   134a8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   134ac:	0005303a 	rdctl	r2,status
   134b0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   134b4:	e0fffc17 	ldw	r3,-16(fp)
   134b8:	00bfff84 	movi	r2,-2
   134bc:	1884703a 	and	r2,r3,r2
   134c0:	1001703a 	wrctl	status,r2
  
  return context;
   134c4:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   134c8:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   134cc:	e13ffe17 	ldw	r4,-8(fp)
   134d0:	0014de40 	call	14de4 <OS_StrLen>
   134d4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   134d8:	e0bffa03 	ldbu	r2,-24(fp)
   134dc:	10800830 	cmpltui	r2,r2,32
   134e0:	1000081e 	bne	r2,zero,13504 <OSEventNameSet+0xf8>
   134e4:	e0bff817 	ldw	r2,-32(fp)
   134e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   134ec:	e0bff917 	ldw	r2,-28(fp)
   134f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   134f4:	e0bfff17 	ldw	r2,-4(fp)
   134f8:	00c002c4 	movi	r3,11
   134fc:	10c00005 	stb	r3,0(r2)
        return;
   13500:	00000d06 	br	13538 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   13504:	e0bffd17 	ldw	r2,-12(fp)
   13508:	10800384 	addi	r2,r2,14
   1350c:	e17ffe17 	ldw	r5,-8(fp)
   13510:	1009883a 	mov	r4,r2
   13514:	0014d700 	call	14d70 <OS_StrCopy>
   13518:	e0bff817 	ldw	r2,-32(fp)
   1351c:	e0bffb15 	stw	r2,-20(fp)
   13520:	e0bffb17 	ldw	r2,-20(fp)
   13524:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13528:	e0bfff17 	ldw	r2,-4(fp)
   1352c:	10000005 	stb	zero,0(r2)
   13530:	00000106 	br	13538 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   13534:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   13538:	e037883a 	mov	sp,fp
   1353c:	dfc00117 	ldw	ra,4(sp)
   13540:	df000017 	ldw	fp,0(sp)
   13544:	dec00204 	addi	sp,sp,8
   13548:	f800283a 	ret

0001354c <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   1354c:	deffed04 	addi	sp,sp,-76
   13550:	dfc01215 	stw	ra,72(sp)
   13554:	df001115 	stw	fp,68(sp)
   13558:	df001104 	addi	fp,sp,68
   1355c:	e13ffc15 	stw	r4,-16(fp)
   13560:	e17ffd15 	stw	r5,-12(fp)
   13564:	e1bffe15 	stw	r6,-8(fp)
   13568:	3805883a 	mov	r2,r7
   1356c:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   13570:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   13574:	e0800217 	ldw	r2,8(fp)
   13578:	1000021e 	bne	r2,zero,13584 <OSEventPendMulti+0x38>
        return (0);
   1357c:	0005883a 	mov	r2,zero
   13580:	00017106 	br	13b48 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   13584:	e0bffc17 	ldw	r2,-16(fp)
   13588:	1000051e 	bne	r2,zero,135a0 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   1358c:	e0800217 	ldw	r2,8(fp)
   13590:	00c00104 	movi	r3,4
   13594:	10c00005 	stb	r3,0(r2)
        return (0);
   13598:	0005883a 	mov	r2,zero
   1359c:	00016a06 	br	13b48 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   135a0:	e0bffd17 	ldw	r2,-12(fp)
   135a4:	1000051e 	bne	r2,zero,135bc <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   135a8:	e0800217 	ldw	r2,8(fp)
   135ac:	00c00104 	movi	r3,4
   135b0:	10c00005 	stb	r3,0(r2)
        return (0);
   135b4:	0005883a 	mov	r2,zero
   135b8:	00016306 	br	13b48 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   135bc:	e0bffe17 	ldw	r2,-8(fp)
   135c0:	1000051e 	bne	r2,zero,135d8 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   135c4:	e0800217 	ldw	r2,8(fp)
   135c8:	00c00104 	movi	r3,4
   135cc:	10c00005 	stb	r3,0(r2)
        return (0);
   135d0:	0005883a 	mov	r2,zero
   135d4:	00015c06 	br	13b48 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   135d8:	e0bffd17 	ldw	r2,-12(fp)
   135dc:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   135e0:	e0bffc17 	ldw	r2,-16(fp)
   135e4:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   135e8:	e0bfef17 	ldw	r2,-68(fp)
   135ec:	10800017 	ldw	r2,0(r2)
   135f0:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   135f4:	00001906 	br	1365c <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   135f8:	e0bff017 	ldw	r2,-64(fp)
   135fc:	10800003 	ldbu	r2,0(r2)
   13600:	10803fcc 	andi	r2,r2,255
   13604:	10c000a0 	cmpeqi	r3,r2,2
   13608:	1800091e 	bne	r3,zero,13630 <OSEventPendMulti+0xe4>
   1360c:	10c000e0 	cmpeqi	r3,r2,3
   13610:	1800091e 	bne	r3,zero,13638 <OSEventPendMulti+0xec>
   13614:	10800060 	cmpeqi	r2,r2,1
   13618:	1000091e 	bne	r2,zero,13640 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   1361c:	e0800217 	ldw	r2,8(fp)
   13620:	00c00044 	movi	r3,1
   13624:	10c00005 	stb	r3,0(r2)
                 return (0);
   13628:	0005883a 	mov	r2,zero
   1362c:	00014606 	br	13b48 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   13630:	0001883a 	nop
   13634:	00000306 	br	13644 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   13638:	0001883a 	nop
   1363c:	00000106 	br	13644 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   13640:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   13644:	e0bfef17 	ldw	r2,-68(fp)
   13648:	10800104 	addi	r2,r2,4
   1364c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   13650:	e0bfef17 	ldw	r2,-68(fp)
   13654:	10800017 	ldw	r2,0(r2)
   13658:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   1365c:	e0bff017 	ldw	r2,-64(fp)
   13660:	103fe51e 	bne	r2,zero,135f8 <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   13664:	d0a82c03 	ldbu	r2,-24400(gp)
   13668:	10803fcc 	andi	r2,r2,255
   1366c:	10000526 	beq	r2,zero,13684 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   13670:	e0800217 	ldw	r2,8(fp)
   13674:	00c00084 	movi	r3,2
   13678:	10c00005 	stb	r3,0(r2)
        return (0);
   1367c:	0005883a 	mov	r2,zero
   13680:	00013106 	br	13b48 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   13684:	d0a81e03 	ldbu	r2,-24456(gp)
   13688:	10803fcc 	andi	r2,r2,255
   1368c:	10000526 	beq	r2,zero,136a4 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   13690:	e0800217 	ldw	r2,8(fp)
   13694:	00c00344 	movi	r3,13
   13698:	10c00005 	stb	r3,0(r2)
        return (0);
   1369c:	0005883a 	mov	r2,zero
   136a0:	00012906 	br	13b48 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   136a4:	0005303a 	rdctl	r2,status
   136a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   136ac:	e0fffb17 	ldw	r3,-20(fp)
   136b0:	00bfff84 	movi	r2,-2
   136b4:	1884703a 	and	r2,r3,r2
   136b8:	1001703a 	wrctl	status,r2
  
  return context;
   136bc:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   136c0:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   136c4:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   136c8:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   136cc:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   136d0:	e0bffc17 	ldw	r2,-16(fp)
   136d4:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   136d8:	e0bfef17 	ldw	r2,-68(fp)
   136dc:	10800017 	ldw	r2,0(r2)
   136e0:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   136e4:	00008106 	br	138ec <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   136e8:	e0bff017 	ldw	r2,-64(fp)
   136ec:	10800003 	ldbu	r2,0(r2)
   136f0:	10803fcc 	andi	r2,r2,255
   136f4:	10c000a0 	cmpeqi	r3,r2,2
   136f8:	18003c1e 	bne	r3,zero,137ec <OSEventPendMulti+0x2a0>
   136fc:	10c000e0 	cmpeqi	r3,r2,3
   13700:	1800031e 	bne	r3,zero,13710 <OSEventPendMulti+0x1c4>
   13704:	10800060 	cmpeqi	r2,r2,1
   13708:	10001e1e 	bne	r2,zero,13784 <OSEventPendMulti+0x238>
   1370c:	00006606 	br	138a8 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   13710:	e0bff017 	ldw	r2,-64(fp)
   13714:	1080020b 	ldhu	r2,8(r2)
   13718:	10bfffcc 	andi	r2,r2,65535
   1371c:	10001526 	beq	r2,zero,13774 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   13720:	e0bff017 	ldw	r2,-64(fp)
   13724:	1080020b 	ldhu	r2,8(r2)
   13728:	10bfffc4 	addi	r2,r2,-1
   1372c:	1007883a 	mov	r3,r2
   13730:	e0bff017 	ldw	r2,-64(fp)
   13734:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   13738:	e0bffd17 	ldw	r2,-12(fp)
   1373c:	10c00104 	addi	r3,r2,4
   13740:	e0fffd15 	stw	r3,-12(fp)
   13744:	e0fff017 	ldw	r3,-64(fp)
   13748:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   1374c:	00800044 	movi	r2,1
   13750:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   13754:	e0bffe17 	ldw	r2,-8(fp)
   13758:	10c00104 	addi	r3,r2,4
   1375c:	e0fffe15 	stw	r3,-8(fp)
   13760:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   13764:	e0bff18b 	ldhu	r2,-58(fp)
   13768:	10800044 	addi	r2,r2,1
   1376c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   13770:	00005806 	br	138d4 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   13774:	e0bff203 	ldbu	r2,-56(fp)
   13778:	10800054 	ori	r2,r2,1
   1377c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   13780:	00005406 	br	138d4 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   13784:	e0bff017 	ldw	r2,-64(fp)
   13788:	10800117 	ldw	r2,4(r2)
   1378c:	10001326 	beq	r2,zero,137dc <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   13790:	e0bffe17 	ldw	r2,-8(fp)
   13794:	10c00104 	addi	r3,r2,4
   13798:	e0fffe15 	stw	r3,-8(fp)
   1379c:	e0fff017 	ldw	r3,-64(fp)
   137a0:	18c00117 	ldw	r3,4(r3)
   137a4:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   137a8:	e0bff017 	ldw	r2,-64(fp)
   137ac:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   137b0:	e0bffd17 	ldw	r2,-12(fp)
   137b4:	10c00104 	addi	r3,r2,4
   137b8:	e0fffd15 	stw	r3,-12(fp)
   137bc:	e0fff017 	ldw	r3,-64(fp)
   137c0:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   137c4:	00800044 	movi	r2,1
   137c8:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   137cc:	e0bff18b 	ldhu	r2,-58(fp)
   137d0:	10800044 	addi	r2,r2,1
   137d4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   137d8:	00003e06 	br	138d4 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   137dc:	e0bff203 	ldbu	r2,-56(fp)
   137e0:	10800094 	ori	r2,r2,2
   137e4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   137e8:	00003a06 	br	138d4 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   137ec:	e0bff017 	ldw	r2,-64(fp)
   137f0:	10800117 	ldw	r2,4(r2)
   137f4:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   137f8:	e0bff517 	ldw	r2,-44(fp)
   137fc:	1080058b 	ldhu	r2,22(r2)
   13800:	10bfffcc 	andi	r2,r2,65535
   13804:	10002426 	beq	r2,zero,13898 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   13808:	e0bffe17 	ldw	r2,-8(fp)
   1380c:	10c00104 	addi	r3,r2,4
   13810:	e0fffe15 	stw	r3,-8(fp)
   13814:	e0fff517 	ldw	r3,-44(fp)
   13818:	18c00417 	ldw	r3,16(r3)
   1381c:	19400104 	addi	r5,r3,4
   13820:	e13ff517 	ldw	r4,-44(fp)
   13824:	21400415 	stw	r5,16(r4)
   13828:	18c00017 	ldw	r3,0(r3)
   1382c:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   13830:	e0bff517 	ldw	r2,-44(fp)
   13834:	10c00417 	ldw	r3,16(r2)
   13838:	e0bff517 	ldw	r2,-44(fp)
   1383c:	10800217 	ldw	r2,8(r2)
   13840:	1880041e 	bne	r3,r2,13854 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   13844:	e0bff517 	ldw	r2,-44(fp)
   13848:	10c00117 	ldw	r3,4(r2)
   1384c:	e0bff517 	ldw	r2,-44(fp)
   13850:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   13854:	e0bff517 	ldw	r2,-44(fp)
   13858:	1080058b 	ldhu	r2,22(r2)
   1385c:	10bfffc4 	addi	r2,r2,-1
   13860:	1007883a 	mov	r3,r2
   13864:	e0bff517 	ldw	r2,-44(fp)
   13868:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   1386c:	e0bffd17 	ldw	r2,-12(fp)
   13870:	10c00104 	addi	r3,r2,4
   13874:	e0fffd15 	stw	r3,-12(fp)
   13878:	e0fff017 	ldw	r3,-64(fp)
   1387c:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   13880:	00800044 	movi	r2,1
   13884:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   13888:	e0bff18b 	ldhu	r2,-58(fp)
   1388c:	10800044 	addi	r2,r2,1
   13890:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   13894:	00000f06 	br	138d4 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   13898:	e0bff203 	ldbu	r2,-56(fp)
   1389c:	10800114 	ori	r2,r2,4
   138a0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   138a4:	00000b06 	br	138d4 <OSEventPendMulti+0x388>
   138a8:	e0bff317 	ldw	r2,-52(fp)
   138ac:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   138b0:	e0bff417 	ldw	r2,-48(fp)
   138b4:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   138b8:	e0bffd17 	ldw	r2,-12(fp)
   138bc:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   138c0:	e0800217 	ldw	r2,8(fp)
   138c4:	00c00044 	movi	r3,1
   138c8:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   138cc:	e0bff18b 	ldhu	r2,-58(fp)
   138d0:	00009d06 	br	13b48 <OSEventPendMulti+0x5fc>
        }
        pevents++;
   138d4:	e0bfef17 	ldw	r2,-68(fp)
   138d8:	10800104 	addi	r2,r2,4
   138dc:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   138e0:	e0bfef17 	ldw	r2,-68(fp)
   138e4:	10800017 	ldw	r2,0(r2)
   138e8:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   138ec:	e0bff017 	ldw	r2,-64(fp)
   138f0:	103f7d1e 	bne	r2,zero,136e8 <OSEventPendMulti+0x19c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   138f4:	e0bff103 	ldbu	r2,-60(fp)
   138f8:	10800058 	cmpnei	r2,r2,1
   138fc:	10000a1e 	bne	r2,zero,13928 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   13900:	e0bffd17 	ldw	r2,-12(fp)
   13904:	10000015 	stw	zero,0(r2)
   13908:	e0bff317 	ldw	r2,-52(fp)
   1390c:	e0bff615 	stw	r2,-40(fp)
   13910:	e0bff617 	ldw	r2,-40(fp)
   13914:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   13918:	e0800217 	ldw	r2,8(fp)
   1391c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   13920:	e0bff18b 	ldhu	r2,-58(fp)
   13924:	00008806 	br	13b48 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   13928:	d0a82d17 	ldw	r2,-24396(gp)
   1392c:	d0e82d17 	ldw	r3,-24396(gp)
   13930:	19000c03 	ldbu	r4,48(r3)
   13934:	e0fff203 	ldbu	r3,-56(fp)
   13938:	20c6b03a 	or	r3,r4,r3
   1393c:	1809883a 	mov	r4,r3
   13940:	00ffe004 	movi	r3,-128
   13944:	20c6b03a 	or	r3,r4,r3
   13948:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1394c:	d0a82d17 	ldw	r2,-24396(gp)
   13950:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   13954:	d0a82d17 	ldw	r2,-24396(gp)
   13958:	e0ffff0b 	ldhu	r3,-4(fp)
   1395c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   13960:	e13ffc17 	ldw	r4,-16(fp)
   13964:	00144880 	call	14488 <OS_EventTaskWaitMulti>
   13968:	e0bff317 	ldw	r2,-52(fp)
   1396c:	e0bff915 	stw	r2,-28(fp)
   13970:	e0bff917 	ldw	r2,-28(fp)
   13974:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   13978:	0014c2c0 	call	14c2c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1397c:	0005303a 	rdctl	r2,status
   13980:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13984:	e0fff717 	ldw	r3,-36(fp)
   13988:	00bfff84 	movi	r2,-2
   1398c:	1884703a 	and	r2,r3,r2
   13990:	1001703a 	wrctl	status,r2
  
  return context;
   13994:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   13998:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   1399c:	d0a82d17 	ldw	r2,-24396(gp)
   139a0:	10800c43 	ldbu	r2,49(r2)
   139a4:	10803fcc 	andi	r2,r2,255
   139a8:	10000226 	beq	r2,zero,139b4 <OSEventPendMulti+0x468>
   139ac:	108000a0 	cmpeqi	r2,r2,2
   139b0:	10001826 	beq	r2,zero,13a14 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   139b4:	d0a82d17 	ldw	r2,-24396(gp)
   139b8:	10800717 	ldw	r2,28(r2)
   139bc:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   139c0:	e0bff017 	ldw	r2,-64(fp)
   139c4:	10000b26 	beq	r2,zero,139f4 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   139c8:	e0bffd17 	ldw	r2,-12(fp)
   139cc:	10c00104 	addi	r3,r2,4
   139d0:	e0fffd15 	stw	r3,-12(fp)
   139d4:	e0fff017 	ldw	r3,-64(fp)
   139d8:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   139dc:	e0bffd17 	ldw	r2,-12(fp)
   139e0:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   139e4:	e0bff18b 	ldhu	r2,-58(fp)
   139e8:	10800044 	addi	r2,r2,1
   139ec:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   139f0:	00000d06 	br	13a28 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   139f4:	d0a82d17 	ldw	r2,-24396(gp)
   139f8:	00c00044 	movi	r3,1
   139fc:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   13a00:	d0a82d17 	ldw	r2,-24396(gp)
   13a04:	e17ffc17 	ldw	r5,-16(fp)
   13a08:	1009883a 	mov	r4,r2
   13a0c:	00146900 	call	14690 <OS_EventTaskRemoveMulti>
             }
			 break;
   13a10:	00000506 	br	13a28 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   13a14:	d0a82d17 	ldw	r2,-24396(gp)
   13a18:	e17ffc17 	ldw	r5,-16(fp)
   13a1c:	1009883a 	mov	r4,r2
   13a20:	00146900 	call	14690 <OS_EventTaskRemoveMulti>
             break;
   13a24:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   13a28:	d0a82d17 	ldw	r2,-24396(gp)
   13a2c:	10800c43 	ldbu	r2,49(r2)
   13a30:	10803fcc 	andi	r2,r2,255
   13a34:	10000326 	beq	r2,zero,13a44 <OSEventPendMulti+0x4f8>
   13a38:	108000a0 	cmpeqi	r2,r2,2
   13a3c:	1000231e 	bne	r2,zero,13acc <OSEventPendMulti+0x580>
   13a40:	00002a06 	br	13aec <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   13a44:	e0bff017 	ldw	r2,-64(fp)
   13a48:	10800003 	ldbu	r2,0(r2)
   13a4c:	10803fcc 	andi	r2,r2,255
   13a50:	0080100e 	bge	zero,r2,13a94 <OSEventPendMulti+0x548>
   13a54:	10c000d0 	cmplti	r3,r2,3
   13a58:	1800071e 	bne	r3,zero,13a78 <OSEventPendMulti+0x52c>
   13a5c:	108000e0 	cmpeqi	r2,r2,3
   13a60:	10000c26 	beq	r2,zero,13a94 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   13a64:	e0bffe17 	ldw	r2,-8(fp)
   13a68:	10c00104 	addi	r3,r2,4
   13a6c:	e0fffe15 	stw	r3,-8(fp)
   13a70:	10000015 	stw	zero,0(r2)
                      break;
   13a74:	00001206 	br	13ac0 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   13a78:	e0bffe17 	ldw	r2,-8(fp)
   13a7c:	10c00104 	addi	r3,r2,4
   13a80:	e0fffe15 	stw	r3,-8(fp)
   13a84:	d0e82d17 	ldw	r3,-24396(gp)
   13a88:	18c00917 	ldw	r3,36(r3)
   13a8c:	10c00015 	stw	r3,0(r2)
                      break;
   13a90:	00000b06 	br	13ac0 <OSEventPendMulti+0x574>
   13a94:	e0bff317 	ldw	r2,-52(fp)
   13a98:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13a9c:	e0bff817 	ldw	r2,-32(fp)
   13aa0:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   13aa4:	e0bffd17 	ldw	r2,-12(fp)
   13aa8:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   13aac:	e0800217 	ldw	r2,8(fp)
   13ab0:	00c00044 	movi	r3,1
   13ab4:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   13ab8:	e0bff18b 	ldhu	r2,-58(fp)
   13abc:	00002206 	br	13b48 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   13ac0:	e0800217 	ldw	r2,8(fp)
   13ac4:	10000005 	stb	zero,0(r2)
             break;
   13ac8:	00001006 	br	13b0c <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   13acc:	e0bffe17 	ldw	r2,-8(fp)
   13ad0:	10c00104 	addi	r3,r2,4
   13ad4:	e0fffe15 	stw	r3,-8(fp)
   13ad8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   13adc:	e0800217 	ldw	r2,8(fp)
   13ae0:	00c00384 	movi	r3,14
   13ae4:	10c00005 	stb	r3,0(r2)
             break;
   13ae8:	00000806 	br	13b0c <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   13aec:	e0bffe17 	ldw	r2,-8(fp)
   13af0:	10c00104 	addi	r3,r2,4
   13af4:	e0fffe15 	stw	r3,-8(fp)
   13af8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   13afc:	e0800217 	ldw	r2,8(fp)
   13b00:	00c00284 	movi	r3,10
   13b04:	10c00005 	stb	r3,0(r2)
             break;
   13b08:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   13b0c:	d0a82d17 	ldw	r2,-24396(gp)
   13b10:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   13b14:	d0a82d17 	ldw	r2,-24396(gp)
   13b18:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   13b1c:	d0a82d17 	ldw	r2,-24396(gp)
   13b20:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   13b24:	d0a82d17 	ldw	r2,-24396(gp)
   13b28:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   13b2c:	d0a82d17 	ldw	r2,-24396(gp)
   13b30:	10000915 	stw	zero,36(r2)
   13b34:	e0bff317 	ldw	r2,-52(fp)
   13b38:	e0bffa15 	stw	r2,-24(fp)
   13b3c:	e0bffa17 	ldw	r2,-24(fp)
   13b40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   13b44:	e0bff18b 	ldhu	r2,-58(fp)
}
   13b48:	e037883a 	mov	sp,fp
   13b4c:	dfc00117 	ldw	ra,4(sp)
   13b50:	df000017 	ldw	fp,0(sp)
   13b54:	dec00204 	addi	sp,sp,8
   13b58:	f800283a 	ret

00013b5c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   13b5c:	defffe04 	addi	sp,sp,-8
   13b60:	dfc00115 	stw	ra,4(sp)
   13b64:	df000015 	stw	fp,0(sp)
   13b68:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   13b6c:	001e2d80 	call	1e2d8 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   13b70:	00148d80 	call	148d8 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   13b74:	00149200 	call	14920 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   13b78:	0014a8c0 	call	14a8c <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   13b7c:	00147f80 	call	147f8 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   13b80:	001693c0 	call	1693c <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   13b84:	001723c0 	call	1723c <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   13b88:	00183640 	call	18364 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   13b8c:	001498c0 	call	1498c <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   13b90:	0014a0c0 	call	14a0c <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   13b94:	001e2f80 	call	1e2f8 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   13b98:	00153100 	call	15310 <OSDebugInit>
#endif
}
   13b9c:	0001883a 	nop
   13ba0:	e037883a 	mov	sp,fp
   13ba4:	dfc00117 	ldw	ra,4(sp)
   13ba8:	df000017 	ldw	fp,0(sp)
   13bac:	dec00204 	addi	sp,sp,8
   13bb0:	f800283a 	ret

00013bb4 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   13bb4:	deffff04 	addi	sp,sp,-4
   13bb8:	df000015 	stw	fp,0(sp)
   13bbc:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
   13bc0:	d0a81e43 	ldbu	r2,-24455(gp)
   13bc4:	10803fcc 	andi	r2,r2,255
   13bc8:	10800058 	cmpnei	r2,r2,1
   13bcc:	1000071e 	bne	r2,zero,13bec <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
   13bd0:	d0a82c03 	ldbu	r2,-24400(gp)
   13bd4:	10803fcc 	andi	r2,r2,255
   13bd8:	10803fe0 	cmpeqi	r2,r2,255
   13bdc:	1000031e 	bne	r2,zero,13bec <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   13be0:	d0a82c03 	ldbu	r2,-24400(gp)
   13be4:	10800044 	addi	r2,r2,1
   13be8:	d0a82c05 	stb	r2,-24400(gp)
        }
    }
}
   13bec:	0001883a 	nop
   13bf0:	e037883a 	mov	sp,fp
   13bf4:	df000017 	ldw	fp,0(sp)
   13bf8:	dec00104 	addi	sp,sp,4
   13bfc:	f800283a 	ret

00013c00 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   13c00:	defffb04 	addi	sp,sp,-20
   13c04:	dfc00415 	stw	ra,16(sp)
   13c08:	df000315 	stw	fp,12(sp)
   13c0c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13c10:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   13c14:	d0a81e43 	ldbu	r2,-24455(gp)
   13c18:	10803fcc 	andi	r2,r2,255
   13c1c:	10800058 	cmpnei	r2,r2,1
   13c20:	10002f1e 	bne	r2,zero,13ce0 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13c24:	0005303a 	rdctl	r2,status
   13c28:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13c2c:	e0ffff17 	ldw	r3,-4(fp)
   13c30:	00bfff84 	movi	r2,-2
   13c34:	1884703a 	and	r2,r3,r2
   13c38:	1001703a 	wrctl	status,r2
  
  return context;
   13c3c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   13c40:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   13c44:	d0a82c03 	ldbu	r2,-24400(gp)
   13c48:	10803fcc 	andi	r2,r2,255
   13c4c:	10000326 	beq	r2,zero,13c5c <OSIntExit+0x5c>
            OSIntNesting--;
   13c50:	d0a82c03 	ldbu	r2,-24400(gp)
   13c54:	10bfffc4 	addi	r2,r2,-1
   13c58:	d0a82c05 	stb	r2,-24400(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   13c5c:	d0a82c03 	ldbu	r2,-24400(gp)
   13c60:	10803fcc 	andi	r2,r2,255
   13c64:	10001a1e 	bne	r2,zero,13cd0 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   13c68:	d0a81e03 	ldbu	r2,-24456(gp)
   13c6c:	10803fcc 	andi	r2,r2,255
   13c70:	1000171e 	bne	r2,zero,13cd0 <OSIntExit+0xd0>
                OS_SchedNew();
   13c74:	0014cfc0 	call	14cfc <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   13c78:	d0e82003 	ldbu	r3,-24448(gp)
   13c7c:	d0a82043 	ldbu	r2,-24447(gp)
   13c80:	18c03fcc 	andi	r3,r3,255
   13c84:	10803fcc 	andi	r2,r2,255
   13c88:	18801126 	beq	r3,r2,13cd0 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   13c8c:	d0a82003 	ldbu	r2,-24448(gp)
   13c90:	10c03fcc 	andi	r3,r2,255
   13c94:	008000f4 	movhi	r2,3
   13c98:	1092f004 	addi	r2,r2,19392
   13c9c:	18c7883a 	add	r3,r3,r3
   13ca0:	18c7883a 	add	r3,r3,r3
   13ca4:	10c5883a 	add	r2,r2,r3
   13ca8:	10800017 	ldw	r2,0(r2)
   13cac:	d0a82815 	stw	r2,-24416(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   13cb0:	d0a82817 	ldw	r2,-24416(gp)
   13cb4:	10c00e17 	ldw	r3,56(r2)
   13cb8:	18c00044 	addi	r3,r3,1
   13cbc:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   13cc0:	d0a82317 	ldw	r2,-24436(gp)
   13cc4:	10800044 	addi	r2,r2,1
   13cc8:	d0a82315 	stw	r2,-24436(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   13ccc:	001e0040 	call	1e004 <OSCtxSw>
   13cd0:	e0bffd17 	ldw	r2,-12(fp)
   13cd4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13cd8:	e0bffe17 	ldw	r2,-8(fp)
   13cdc:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   13ce0:	0001883a 	nop
   13ce4:	e037883a 	mov	sp,fp
   13ce8:	dfc00117 	ldw	ra,4(sp)
   13cec:	df000017 	ldw	fp,0(sp)
   13cf0:	dec00204 	addi	sp,sp,8
   13cf4:	f800283a 	ret

00013cf8 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   13cf8:	defffc04 	addi	sp,sp,-16
   13cfc:	df000315 	stw	fp,12(sp)
   13d00:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13d04:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   13d08:	d0a81e43 	ldbu	r2,-24455(gp)
   13d0c:	10803fcc 	andi	r2,r2,255
   13d10:	10800058 	cmpnei	r2,r2,1
   13d14:	1000161e 	bne	r2,zero,13d70 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13d18:	0005303a 	rdctl	r2,status
   13d1c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13d20:	e0ffff17 	ldw	r3,-4(fp)
   13d24:	00bfff84 	movi	r2,-2
   13d28:	1884703a 	and	r2,r3,r2
   13d2c:	1001703a 	wrctl	status,r2
  
  return context;
   13d30:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   13d34:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   13d38:	d0a82c03 	ldbu	r2,-24400(gp)
   13d3c:	10803fcc 	andi	r2,r2,255
   13d40:	1000071e 	bne	r2,zero,13d60 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   13d44:	d0a81e03 	ldbu	r2,-24456(gp)
   13d48:	10803fcc 	andi	r2,r2,255
   13d4c:	10803fe0 	cmpeqi	r2,r2,255
   13d50:	1000031e 	bne	r2,zero,13d60 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   13d54:	d0a81e03 	ldbu	r2,-24456(gp)
   13d58:	10800044 	addi	r2,r2,1
   13d5c:	d0a81e05 	stb	r2,-24456(gp)
   13d60:	e0bffd17 	ldw	r2,-12(fp)
   13d64:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13d68:	e0bffe17 	ldw	r2,-8(fp)
   13d6c:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   13d70:	0001883a 	nop
   13d74:	e037883a 	mov	sp,fp
   13d78:	df000017 	ldw	fp,0(sp)
   13d7c:	dec00104 	addi	sp,sp,4
   13d80:	f800283a 	ret

00013d84 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   13d84:	defff804 	addi	sp,sp,-32
   13d88:	dfc00715 	stw	ra,28(sp)
   13d8c:	df000615 	stw	fp,24(sp)
   13d90:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13d94:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   13d98:	d0a81e43 	ldbu	r2,-24455(gp)
   13d9c:	10803fcc 	andi	r2,r2,255
   13da0:	10800058 	cmpnei	r2,r2,1
   13da4:	1000281e 	bne	r2,zero,13e48 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13da8:	0005303a 	rdctl	r2,status
   13dac:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13db0:	e0ffff17 	ldw	r3,-4(fp)
   13db4:	00bfff84 	movi	r2,-2
   13db8:	1884703a 	and	r2,r3,r2
   13dbc:	1001703a 	wrctl	status,r2
  
  return context;
   13dc0:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   13dc4:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   13dc8:	d0a81e03 	ldbu	r2,-24456(gp)
   13dcc:	10803fcc 	andi	r2,r2,255
   13dd0:	10001926 	beq	r2,zero,13e38 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   13dd4:	d0a81e03 	ldbu	r2,-24456(gp)
   13dd8:	10bfffc4 	addi	r2,r2,-1
   13ddc:	d0a81e05 	stb	r2,-24456(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   13de0:	d0a81e03 	ldbu	r2,-24456(gp)
   13de4:	10803fcc 	andi	r2,r2,255
   13de8:	10000e1e 	bne	r2,zero,13e24 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   13dec:	d0a82c03 	ldbu	r2,-24400(gp)
   13df0:	10803fcc 	andi	r2,r2,255
   13df4:	1000061e 	bne	r2,zero,13e10 <OSSchedUnlock+0x8c>
   13df8:	e0bffa17 	ldw	r2,-24(fp)
   13dfc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13e00:	e0bffb17 	ldw	r2,-20(fp)
   13e04:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   13e08:	0014c2c0 	call	14c2c <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   13e0c:	00000e06 	br	13e48 <OSSchedUnlock+0xc4>
   13e10:	e0bffa17 	ldw	r2,-24(fp)
   13e14:	e0bffc15 	stw	r2,-16(fp)
   13e18:	e0bffc17 	ldw	r2,-16(fp)
   13e1c:	1001703a 	wrctl	status,r2
   13e20:	00000906 	br	13e48 <OSSchedUnlock+0xc4>
   13e24:	e0bffa17 	ldw	r2,-24(fp)
   13e28:	e0bffd15 	stw	r2,-12(fp)
   13e2c:	e0bffd17 	ldw	r2,-12(fp)
   13e30:	1001703a 	wrctl	status,r2
   13e34:	00000406 	br	13e48 <OSSchedUnlock+0xc4>
   13e38:	e0bffa17 	ldw	r2,-24(fp)
   13e3c:	e0bffe15 	stw	r2,-8(fp)
   13e40:	e0bffe17 	ldw	r2,-8(fp)
   13e44:	1001703a 	wrctl	status,r2
   13e48:	0001883a 	nop
   13e4c:	e037883a 	mov	sp,fp
   13e50:	dfc00117 	ldw	ra,4(sp)
   13e54:	df000017 	ldw	fp,0(sp)
   13e58:	dec00204 	addi	sp,sp,8
   13e5c:	f800283a 	ret

00013e60 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   13e60:	defffe04 	addi	sp,sp,-8
   13e64:	dfc00115 	stw	ra,4(sp)
   13e68:	df000015 	stw	fp,0(sp)
   13e6c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   13e70:	d0a81e43 	ldbu	r2,-24455(gp)
   13e74:	10803fcc 	andi	r2,r2,255
   13e78:	10000f1e 	bne	r2,zero,13eb8 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   13e7c:	0014cfc0 	call	14cfc <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   13e80:	d0a82003 	ldbu	r2,-24448(gp)
   13e84:	d0a82045 	stb	r2,-24447(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   13e88:	d0a82003 	ldbu	r2,-24448(gp)
   13e8c:	10c03fcc 	andi	r3,r2,255
   13e90:	008000f4 	movhi	r2,3
   13e94:	1092f004 	addi	r2,r2,19392
   13e98:	18c7883a 	add	r3,r3,r3
   13e9c:	18c7883a 	add	r3,r3,r3
   13ea0:	10c5883a 	add	r2,r2,r3
   13ea4:	10800017 	ldw	r2,0(r2)
   13ea8:	d0a82815 	stw	r2,-24416(gp)
        OSTCBCur      = OSTCBHighRdy;
   13eac:	d0a82817 	ldw	r2,-24416(gp)
   13eb0:	d0a82d15 	stw	r2,-24396(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   13eb4:	001e0900 	call	1e090 <OSStartHighRdy>
    }
}
   13eb8:	0001883a 	nop
   13ebc:	e037883a 	mov	sp,fp
   13ec0:	dfc00117 	ldw	ra,4(sp)
   13ec4:	df000017 	ldw	fp,0(sp)
   13ec8:	dec00204 	addi	sp,sp,8
   13ecc:	f800283a 	ret

00013ed0 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   13ed0:	defff904 	addi	sp,sp,-28
   13ed4:	dfc00615 	stw	ra,24(sp)
   13ed8:	df000515 	stw	fp,20(sp)
   13edc:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13ee0:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   13ee4:	01000084 	movi	r4,2
   13ee8:	001a5d80 	call	1a5d8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13eec:	0005303a 	rdctl	r2,status
   13ef0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13ef4:	e0fffc17 	ldw	r3,-16(fp)
   13ef8:	00bfff84 	movi	r2,-2
   13efc:	1884703a 	and	r2,r3,r2
   13f00:	1001703a 	wrctl	status,r2
  
  return context;
   13f04:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   13f08:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   13f0c:	d0281f15 	stw	zero,-24452(gp)
   13f10:	e0bffb17 	ldw	r2,-20(fp)
   13f14:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13f18:	e0bffd17 	ldw	r2,-12(fp)
   13f1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   13f20:	0009883a 	mov	r4,zero
   13f24:	001a5d80 	call	1a5d8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13f28:	0005303a 	rdctl	r2,status
   13f2c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13f30:	e0fffe17 	ldw	r3,-8(fp)
   13f34:	00bfff84 	movi	r2,-2
   13f38:	1884703a 	and	r2,r3,r2
   13f3c:	1001703a 	wrctl	status,r2
  
  return context;
   13f40:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   13f44:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   13f48:	d0a81f17 	ldw	r2,-24452(gp)
   13f4c:	d0a82415 	stw	r2,-24432(gp)
    OSStatRdy    = OS_TRUE;
   13f50:	00800044 	movi	r2,1
   13f54:	d0a83005 	stb	r2,-24384(gp)
   13f58:	e0bffb17 	ldw	r2,-20(fp)
   13f5c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13f60:	e0bfff17 	ldw	r2,-4(fp)
   13f64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   13f68:	0001883a 	nop
   13f6c:	e037883a 	mov	sp,fp
   13f70:	dfc00117 	ldw	ra,4(sp)
   13f74:	df000017 	ldw	fp,0(sp)
   13f78:	dec00204 	addi	sp,sp,8
   13f7c:	f800283a 	ret

00013f80 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   13f80:	defff704 	addi	sp,sp,-36
   13f84:	dfc00815 	stw	ra,32(sp)
   13f88:	df000715 	stw	fp,28(sp)
   13f8c:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   13f90:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   13f94:	001e2b80 	call	1e2b8 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13f98:	0005303a 	rdctl	r2,status
   13f9c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13fa0:	e0fffd17 	ldw	r3,-12(fp)
   13fa4:	00bfff84 	movi	r2,-2
   13fa8:	1884703a 	and	r2,r3,r2
   13fac:	1001703a 	wrctl	status,r2
  
  return context;
   13fb0:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   13fb4:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   13fb8:	d0a82e17 	ldw	r2,-24392(gp)
   13fbc:	10800044 	addi	r2,r2,1
   13fc0:	d0a82e15 	stw	r2,-24392(gp)
   13fc4:	e0bffb17 	ldw	r2,-20(fp)
   13fc8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13fcc:	e0bfff17 	ldw	r2,-4(fp)
   13fd0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   13fd4:	d0a81e43 	ldbu	r2,-24455(gp)
   13fd8:	10803fcc 	andi	r2,r2,255
   13fdc:	10800058 	cmpnei	r2,r2,1
   13fe0:	10006a1e 	bne	r2,zero,1418c <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   13fe4:	d0a82203 	ldbu	r2,-24440(gp)
   13fe8:	10803fcc 	andi	r2,r2,255
   13fec:	10c00060 	cmpeqi	r3,r2,1
   13ff0:	1800061e 	bne	r3,zero,1400c <OSTimeTick+0x8c>
   13ff4:	10c000a0 	cmpeqi	r3,r2,2
   13ff8:	1800061e 	bne	r3,zero,14014 <OSTimeTick+0x94>
   13ffc:	10000a1e 	bne	r2,zero,14028 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   14000:	00800044 	movi	r2,1
   14004:	e0bffa05 	stb	r2,-24(fp)
                 break;
   14008:	00000b06 	br	14038 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   1400c:	e03ffa05 	stb	zero,-24(fp)
                 break;
   14010:	00000906 	br	14038 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   14014:	00800044 	movi	r2,1
   14018:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   1401c:	00800044 	movi	r2,1
   14020:	d0a82205 	stb	r2,-24440(gp)
                 break;
   14024:	00000406 	br	14038 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   14028:	00800044 	movi	r2,1
   1402c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   14030:	d0282205 	stb	zero,-24440(gp)
                 break;
   14034:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   14038:	e0bffa03 	ldbu	r2,-24(fp)
   1403c:	10005226 	beq	r2,zero,14188 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   14040:	d0a82117 	ldw	r2,-24444(gp)
   14044:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   14048:	00004906 	br	14170 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1404c:	0005303a 	rdctl	r2,status
   14050:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14054:	e0fffc17 	ldw	r3,-16(fp)
   14058:	00bfff84 	movi	r2,-2
   1405c:	1884703a 	and	r2,r3,r2
   14060:	1001703a 	wrctl	status,r2
  
  return context;
   14064:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
   14068:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   1406c:	e0bff917 	ldw	r2,-28(fp)
   14070:	10800b8b 	ldhu	r2,46(r2)
   14074:	10bfffcc 	andi	r2,r2,65535
   14078:	10003626 	beq	r2,zero,14154 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   1407c:	e0bff917 	ldw	r2,-28(fp)
   14080:	10800b8b 	ldhu	r2,46(r2)
   14084:	10bfffc4 	addi	r2,r2,-1
   14088:	1007883a 	mov	r3,r2
   1408c:	e0bff917 	ldw	r2,-28(fp)
   14090:	10c00b8d 	sth	r3,46(r2)
   14094:	e0bff917 	ldw	r2,-28(fp)
   14098:	10800b8b 	ldhu	r2,46(r2)
   1409c:	10bfffcc 	andi	r2,r2,65535
   140a0:	10002c1e 	bne	r2,zero,14154 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   140a4:	e0bff917 	ldw	r2,-28(fp)
   140a8:	10800c03 	ldbu	r2,48(r2)
   140ac:	10803fcc 	andi	r2,r2,255
   140b0:	10800dcc 	andi	r2,r2,55
   140b4:	10000b26 	beq	r2,zero,140e4 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   140b8:	e0bff917 	ldw	r2,-28(fp)
   140bc:	10c00c03 	ldbu	r3,48(r2)
   140c0:	00bff204 	movi	r2,-56
   140c4:	1884703a 	and	r2,r3,r2
   140c8:	1007883a 	mov	r3,r2
   140cc:	e0bff917 	ldw	r2,-28(fp)
   140d0:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   140d4:	e0bff917 	ldw	r2,-28(fp)
   140d8:	00c00044 	movi	r3,1
   140dc:	10c00c45 	stb	r3,49(r2)
   140e0:	00000206 	br	140ec <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   140e4:	e0bff917 	ldw	r2,-28(fp)
   140e8:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   140ec:	e0bff917 	ldw	r2,-28(fp)
   140f0:	10800c03 	ldbu	r2,48(r2)
   140f4:	10803fcc 	andi	r2,r2,255
   140f8:	1080020c 	andi	r2,r2,8
   140fc:	1000151e 	bne	r2,zero,14154 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   14100:	e0bff917 	ldw	r2,-28(fp)
   14104:	10c00d83 	ldbu	r3,54(r2)
   14108:	d0a82a03 	ldbu	r2,-24408(gp)
   1410c:	1884b03a 	or	r2,r3,r2
   14110:	d0a82a05 	stb	r2,-24408(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   14114:	e0bff917 	ldw	r2,-28(fp)
   14118:	10800d03 	ldbu	r2,52(r2)
   1411c:	10c03fcc 	andi	r3,r2,255
   14120:	e0bff917 	ldw	r2,-28(fp)
   14124:	10800d03 	ldbu	r2,52(r2)
   14128:	11003fcc 	andi	r4,r2,255
   1412c:	d0a82a44 	addi	r2,gp,-24407
   14130:	2085883a 	add	r2,r4,r2
   14134:	11000003 	ldbu	r4,0(r2)
   14138:	e0bff917 	ldw	r2,-28(fp)
   1413c:	10800d43 	ldbu	r2,53(r2)
   14140:	2084b03a 	or	r2,r4,r2
   14144:	1009883a 	mov	r4,r2
   14148:	d0a82a44 	addi	r2,gp,-24407
   1414c:	1885883a 	add	r2,r3,r2
   14150:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   14154:	e0bff917 	ldw	r2,-28(fp)
   14158:	10800517 	ldw	r2,20(r2)
   1415c:	e0bff915 	stw	r2,-28(fp)
   14160:	e0bffb17 	ldw	r2,-20(fp)
   14164:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14168:	e0bffe17 	ldw	r2,-8(fp)
   1416c:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   14170:	e0bff917 	ldw	r2,-28(fp)
   14174:	10800c83 	ldbu	r2,50(r2)
   14178:	10803fcc 	andi	r2,r2,255
   1417c:	10800518 	cmpnei	r2,r2,20
   14180:	103fb21e 	bne	r2,zero,1404c <OSTimeTick+0xcc>
   14184:	00000106 	br	1418c <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
   14188:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   1418c:	e037883a 	mov	sp,fp
   14190:	dfc00117 	ldw	ra,4(sp)
   14194:	df000017 	ldw	fp,0(sp)
   14198:	dec00204 	addi	sp,sp,8
   1419c:	f800283a 	ret

000141a0 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   141a0:	deffff04 	addi	sp,sp,-4
   141a4:	df000015 	stw	fp,0(sp)
   141a8:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   141ac:	00804784 	movi	r2,286
}
   141b0:	e037883a 	mov	sp,fp
   141b4:	df000017 	ldw	fp,0(sp)
   141b8:	dec00104 	addi	sp,sp,4
   141bc:	f800283a 	ret

000141c0 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   141c0:	deffff04 	addi	sp,sp,-4
   141c4:	df000015 	stw	fp,0(sp)
   141c8:	d839883a 	mov	fp,sp
}
   141cc:	0001883a 	nop
   141d0:	e037883a 	mov	sp,fp
   141d4:	df000017 	ldw	fp,0(sp)
   141d8:	dec00104 	addi	sp,sp,4
   141dc:	f800283a 	ret

000141e0 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   141e0:	defff804 	addi	sp,sp,-32
   141e4:	dfc00715 	stw	ra,28(sp)
   141e8:	df000615 	stw	fp,24(sp)
   141ec:	df000604 	addi	fp,sp,24
   141f0:	e13ffc15 	stw	r4,-16(fp)
   141f4:	e17ffd15 	stw	r5,-12(fp)
   141f8:	3007883a 	mov	r3,r6
   141fc:	3805883a 	mov	r2,r7
   14200:	e0fffe05 	stb	r3,-8(fp)
   14204:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   14208:	e0bffc17 	ldw	r2,-16(fp)
   1420c:	10800283 	ldbu	r2,10(r2)
   14210:	10c03fcc 	andi	r3,r2,255
   14214:	008000b4 	movhi	r2,2
   14218:	10be1904 	addi	r2,r2,-1948
   1421c:	10c5883a 	add	r2,r2,r3
   14220:	10800003 	ldbu	r2,0(r2)
   14224:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   14228:	e0bffa03 	ldbu	r2,-24(fp)
   1422c:	e0fffc17 	ldw	r3,-16(fp)
   14230:	1885883a 	add	r2,r3,r2
   14234:	108002c4 	addi	r2,r2,11
   14238:	10800003 	ldbu	r2,0(r2)
   1423c:	10c03fcc 	andi	r3,r2,255
   14240:	008000b4 	movhi	r2,2
   14244:	10be1904 	addi	r2,r2,-1948
   14248:	10c5883a 	add	r2,r2,r3
   1424c:	10800003 	ldbu	r2,0(r2)
   14250:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   14254:	e0bffa03 	ldbu	r2,-24(fp)
   14258:	100490fa 	slli	r2,r2,3
   1425c:	1007883a 	mov	r3,r2
   14260:	e0bffa43 	ldbu	r2,-23(fp)
   14264:	1885883a 	add	r2,r3,r2
   14268:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   1426c:	e0fffa83 	ldbu	r3,-22(fp)
   14270:	008000f4 	movhi	r2,3
   14274:	1092f004 	addi	r2,r2,19392
   14278:	18c7883a 	add	r3,r3,r3
   1427c:	18c7883a 	add	r3,r3,r3
   14280:	10c5883a 	add	r2,r2,r3
   14284:	10800017 	ldw	r2,0(r2)
   14288:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   1428c:	e0bffb17 	ldw	r2,-20(fp)
   14290:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   14294:	e0bffb17 	ldw	r2,-20(fp)
   14298:	e0fffd17 	ldw	r3,-12(fp)
   1429c:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   142a0:	e0bffb17 	ldw	r2,-20(fp)
   142a4:	10800c03 	ldbu	r2,48(r2)
   142a8:	1007883a 	mov	r3,r2
   142ac:	e0bffe03 	ldbu	r2,-8(fp)
   142b0:	0084303a 	nor	r2,zero,r2
   142b4:	1884703a 	and	r2,r3,r2
   142b8:	1007883a 	mov	r3,r2
   142bc:	e0bffb17 	ldw	r2,-20(fp)
   142c0:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   142c4:	e0bffb17 	ldw	r2,-20(fp)
   142c8:	e0ffff03 	ldbu	r3,-4(fp)
   142cc:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   142d0:	e0bffb17 	ldw	r2,-20(fp)
   142d4:	10800c03 	ldbu	r2,48(r2)
   142d8:	10803fcc 	andi	r2,r2,255
   142dc:	1080020c 	andi	r2,r2,8
   142e0:	1000111e 	bne	r2,zero,14328 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   142e4:	e0bffb17 	ldw	r2,-20(fp)
   142e8:	10c00d83 	ldbu	r3,54(r2)
   142ec:	d0a82a03 	ldbu	r2,-24408(gp)
   142f0:	1884b03a 	or	r2,r3,r2
   142f4:	d0a82a05 	stb	r2,-24408(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   142f8:	e0fffa03 	ldbu	r3,-24(fp)
   142fc:	e13ffa03 	ldbu	r4,-24(fp)
   14300:	d0a82a44 	addi	r2,gp,-24407
   14304:	2085883a 	add	r2,r4,r2
   14308:	11000003 	ldbu	r4,0(r2)
   1430c:	e0bffb17 	ldw	r2,-20(fp)
   14310:	10800d43 	ldbu	r2,53(r2)
   14314:	2084b03a 	or	r2,r4,r2
   14318:	1009883a 	mov	r4,r2
   1431c:	d0a82a44 	addi	r2,gp,-24407
   14320:	1885883a 	add	r2,r3,r2
   14324:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   14328:	e17ffc17 	ldw	r5,-16(fp)
   1432c:	e13ffb17 	ldw	r4,-20(fp)
   14330:	00145d80 	call	145d8 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   14334:	e0bffb17 	ldw	r2,-20(fp)
   14338:	10800817 	ldw	r2,32(r2)
   1433c:	10000826 	beq	r2,zero,14360 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   14340:	e0bffb17 	ldw	r2,-20(fp)
   14344:	10800817 	ldw	r2,32(r2)
   14348:	100b883a 	mov	r5,r2
   1434c:	e13ffb17 	ldw	r4,-20(fp)
   14350:	00146900 	call	14690 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   14354:	e0bffb17 	ldw	r2,-20(fp)
   14358:	e0fffc17 	ldw	r3,-16(fp)
   1435c:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   14360:	e0bffa83 	ldbu	r2,-22(fp)
}
   14364:	e037883a 	mov	sp,fp
   14368:	dfc00117 	ldw	ra,4(sp)
   1436c:	df000017 	ldw	fp,0(sp)
   14370:	dec00204 	addi	sp,sp,8
   14374:	f800283a 	ret

00014378 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   14378:	defffd04 	addi	sp,sp,-12
   1437c:	df000215 	stw	fp,8(sp)
   14380:	df000204 	addi	fp,sp,8
   14384:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   14388:	d0a82d17 	ldw	r2,-24396(gp)
   1438c:	e0ffff17 	ldw	r3,-4(fp)
   14390:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   14394:	d0a82d17 	ldw	r2,-24396(gp)
   14398:	10800d03 	ldbu	r2,52(r2)
   1439c:	10803fcc 	andi	r2,r2,255
   143a0:	d0e82d17 	ldw	r3,-24396(gp)
   143a4:	18c00d03 	ldbu	r3,52(r3)
   143a8:	18c03fcc 	andi	r3,r3,255
   143ac:	e13fff17 	ldw	r4,-4(fp)
   143b0:	20c7883a 	add	r3,r4,r3
   143b4:	18c002c4 	addi	r3,r3,11
   143b8:	19000003 	ldbu	r4,0(r3)
   143bc:	d0e82d17 	ldw	r3,-24396(gp)
   143c0:	18c00d43 	ldbu	r3,53(r3)
   143c4:	20c6b03a 	or	r3,r4,r3
   143c8:	1809883a 	mov	r4,r3
   143cc:	e0ffff17 	ldw	r3,-4(fp)
   143d0:	1885883a 	add	r2,r3,r2
   143d4:	108002c4 	addi	r2,r2,11
   143d8:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   143dc:	e0bfff17 	ldw	r2,-4(fp)
   143e0:	10c00283 	ldbu	r3,10(r2)
   143e4:	d0a82d17 	ldw	r2,-24396(gp)
   143e8:	10800d83 	ldbu	r2,54(r2)
   143ec:	1884b03a 	or	r2,r3,r2
   143f0:	1007883a 	mov	r3,r2
   143f4:	e0bfff17 	ldw	r2,-4(fp)
   143f8:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   143fc:	d0a82d17 	ldw	r2,-24396(gp)
   14400:	10800d03 	ldbu	r2,52(r2)
   14404:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   14408:	e0fffe03 	ldbu	r3,-8(fp)
   1440c:	e13ffe03 	ldbu	r4,-8(fp)
   14410:	d0a82a44 	addi	r2,gp,-24407
   14414:	2085883a 	add	r2,r4,r2
   14418:	10800003 	ldbu	r2,0(r2)
   1441c:	1009883a 	mov	r4,r2
   14420:	d0a82d17 	ldw	r2,-24396(gp)
   14424:	10800d43 	ldbu	r2,53(r2)
   14428:	0084303a 	nor	r2,zero,r2
   1442c:	2084703a 	and	r2,r4,r2
   14430:	1009883a 	mov	r4,r2
   14434:	d0a82a44 	addi	r2,gp,-24407
   14438:	1885883a 	add	r2,r3,r2
   1443c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   14440:	e0fffe03 	ldbu	r3,-8(fp)
   14444:	d0a82a44 	addi	r2,gp,-24407
   14448:	1885883a 	add	r2,r3,r2
   1444c:	10800003 	ldbu	r2,0(r2)
   14450:	10803fcc 	andi	r2,r2,255
   14454:	1000071e 	bne	r2,zero,14474 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   14458:	d0a82d17 	ldw	r2,-24396(gp)
   1445c:	10800d83 	ldbu	r2,54(r2)
   14460:	0084303a 	nor	r2,zero,r2
   14464:	1007883a 	mov	r3,r2
   14468:	d0a82a03 	ldbu	r2,-24408(gp)
   1446c:	1884703a 	and	r2,r3,r2
   14470:	d0a82a05 	stb	r2,-24408(gp)
    }
}
   14474:	0001883a 	nop
   14478:	e037883a 	mov	sp,fp
   1447c:	df000017 	ldw	fp,0(sp)
   14480:	dec00104 	addi	sp,sp,4
   14484:	f800283a 	ret

00014488 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   14488:	defffb04 	addi	sp,sp,-20
   1448c:	df000415 	stw	fp,16(sp)
   14490:	df000404 	addi	fp,sp,16
   14494:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   14498:	d0a82d17 	ldw	r2,-24396(gp)
   1449c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   144a0:	d0a82d17 	ldw	r2,-24396(gp)
   144a4:	e0ffff17 	ldw	r3,-4(fp)
   144a8:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   144ac:	e0bfff17 	ldw	r2,-4(fp)
   144b0:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   144b4:	e0bffc17 	ldw	r2,-16(fp)
   144b8:	10800017 	ldw	r2,0(r2)
   144bc:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   144c0:	00002006 	br	14544 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   144c4:	d0a82d17 	ldw	r2,-24396(gp)
   144c8:	10800d03 	ldbu	r2,52(r2)
   144cc:	10803fcc 	andi	r2,r2,255
   144d0:	d0e82d17 	ldw	r3,-24396(gp)
   144d4:	18c00d03 	ldbu	r3,52(r3)
   144d8:	18c03fcc 	andi	r3,r3,255
   144dc:	e13ffd17 	ldw	r4,-12(fp)
   144e0:	20c7883a 	add	r3,r4,r3
   144e4:	18c002c4 	addi	r3,r3,11
   144e8:	19000003 	ldbu	r4,0(r3)
   144ec:	d0e82d17 	ldw	r3,-24396(gp)
   144f0:	18c00d43 	ldbu	r3,53(r3)
   144f4:	20c6b03a 	or	r3,r4,r3
   144f8:	1809883a 	mov	r4,r3
   144fc:	e0fffd17 	ldw	r3,-12(fp)
   14500:	1885883a 	add	r2,r3,r2
   14504:	108002c4 	addi	r2,r2,11
   14508:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   1450c:	e0bffd17 	ldw	r2,-12(fp)
   14510:	10c00283 	ldbu	r3,10(r2)
   14514:	d0a82d17 	ldw	r2,-24396(gp)
   14518:	10800d83 	ldbu	r2,54(r2)
   1451c:	1884b03a 	or	r2,r3,r2
   14520:	1007883a 	mov	r3,r2
   14524:	e0bffd17 	ldw	r2,-12(fp)
   14528:	10c00285 	stb	r3,10(r2)
        pevents++;
   1452c:	e0bffc17 	ldw	r2,-16(fp)
   14530:	10800104 	addi	r2,r2,4
   14534:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   14538:	e0bffc17 	ldw	r2,-16(fp)
   1453c:	10800017 	ldw	r2,0(r2)
   14540:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   14544:	e0bffd17 	ldw	r2,-12(fp)
   14548:	103fde1e 	bne	r2,zero,144c4 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   1454c:	d0a82d17 	ldw	r2,-24396(gp)
   14550:	10800d03 	ldbu	r2,52(r2)
   14554:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   14558:	e0fffe03 	ldbu	r3,-8(fp)
   1455c:	e13ffe03 	ldbu	r4,-8(fp)
   14560:	d0a82a44 	addi	r2,gp,-24407
   14564:	2085883a 	add	r2,r4,r2
   14568:	10800003 	ldbu	r2,0(r2)
   1456c:	1009883a 	mov	r4,r2
   14570:	d0a82d17 	ldw	r2,-24396(gp)
   14574:	10800d43 	ldbu	r2,53(r2)
   14578:	0084303a 	nor	r2,zero,r2
   1457c:	2084703a 	and	r2,r4,r2
   14580:	1009883a 	mov	r4,r2
   14584:	d0a82a44 	addi	r2,gp,-24407
   14588:	1885883a 	add	r2,r3,r2
   1458c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   14590:	e0fffe03 	ldbu	r3,-8(fp)
   14594:	d0a82a44 	addi	r2,gp,-24407
   14598:	1885883a 	add	r2,r3,r2
   1459c:	10800003 	ldbu	r2,0(r2)
   145a0:	10803fcc 	andi	r2,r2,255
   145a4:	1000071e 	bne	r2,zero,145c4 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   145a8:	d0a82d17 	ldw	r2,-24396(gp)
   145ac:	10800d83 	ldbu	r2,54(r2)
   145b0:	0084303a 	nor	r2,zero,r2
   145b4:	1007883a 	mov	r3,r2
   145b8:	d0a82a03 	ldbu	r2,-24408(gp)
   145bc:	1884703a 	and	r2,r3,r2
   145c0:	d0a82a05 	stb	r2,-24408(gp)
    }
}
   145c4:	0001883a 	nop
   145c8:	e037883a 	mov	sp,fp
   145cc:	df000017 	ldw	fp,0(sp)
   145d0:	dec00104 	addi	sp,sp,4
   145d4:	f800283a 	ret

000145d8 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   145d8:	defffc04 	addi	sp,sp,-16
   145dc:	df000315 	stw	fp,12(sp)
   145e0:	df000304 	addi	fp,sp,12
   145e4:	e13ffe15 	stw	r4,-8(fp)
   145e8:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   145ec:	e0bffe17 	ldw	r2,-8(fp)
   145f0:	10800d03 	ldbu	r2,52(r2)
   145f4:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   145f8:	e0bffd03 	ldbu	r2,-12(fp)
   145fc:	e0fffd03 	ldbu	r3,-12(fp)
   14600:	e13fff17 	ldw	r4,-4(fp)
   14604:	20c7883a 	add	r3,r4,r3
   14608:	18c002c4 	addi	r3,r3,11
   1460c:	18c00003 	ldbu	r3,0(r3)
   14610:	1809883a 	mov	r4,r3
   14614:	e0fffe17 	ldw	r3,-8(fp)
   14618:	18c00d43 	ldbu	r3,53(r3)
   1461c:	00c6303a 	nor	r3,zero,r3
   14620:	20c6703a 	and	r3,r4,r3
   14624:	1809883a 	mov	r4,r3
   14628:	e0ffff17 	ldw	r3,-4(fp)
   1462c:	1885883a 	add	r2,r3,r2
   14630:	108002c4 	addi	r2,r2,11
   14634:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
   14638:	e0bffd03 	ldbu	r2,-12(fp)
   1463c:	e0ffff17 	ldw	r3,-4(fp)
   14640:	1885883a 	add	r2,r3,r2
   14644:	108002c4 	addi	r2,r2,11
   14648:	10800003 	ldbu	r2,0(r2)
   1464c:	10803fcc 	andi	r2,r2,255
   14650:	10000a1e 	bne	r2,zero,1467c <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   14654:	e0bfff17 	ldw	r2,-4(fp)
   14658:	10800283 	ldbu	r2,10(r2)
   1465c:	1007883a 	mov	r3,r2
   14660:	e0bffe17 	ldw	r2,-8(fp)
   14664:	10800d83 	ldbu	r2,54(r2)
   14668:	0084303a 	nor	r2,zero,r2
   1466c:	1884703a 	and	r2,r3,r2
   14670:	1007883a 	mov	r3,r2
   14674:	e0bfff17 	ldw	r2,-4(fp)
   14678:	10c00285 	stb	r3,10(r2)
    }
}
   1467c:	0001883a 	nop
   14680:	e037883a 	mov	sp,fp
   14684:	df000017 	ldw	fp,0(sp)
   14688:	dec00104 	addi	sp,sp,4
   1468c:	f800283a 	ret

00014690 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   14690:	defffa04 	addi	sp,sp,-24
   14694:	df000515 	stw	fp,20(sp)
   14698:	df000504 	addi	fp,sp,20
   1469c:	e13ffe15 	stw	r4,-8(fp)
   146a0:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   146a4:	e0bffe17 	ldw	r2,-8(fp)
   146a8:	10800d03 	ldbu	r2,52(r2)
   146ac:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   146b0:	e0bffe17 	ldw	r2,-8(fp)
   146b4:	10800d83 	ldbu	r2,54(r2)
   146b8:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   146bc:	e0bffe17 	ldw	r2,-8(fp)
   146c0:	10800d43 	ldbu	r2,53(r2)
   146c4:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   146c8:	e0bfff17 	ldw	r2,-4(fp)
   146cc:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   146d0:	e0bffb17 	ldw	r2,-20(fp)
   146d4:	10800017 	ldw	r2,0(r2)
   146d8:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   146dc:	00002506 	br	14774 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   146e0:	e0bffd03 	ldbu	r2,-12(fp)
   146e4:	e0fffd03 	ldbu	r3,-12(fp)
   146e8:	e13ffc17 	ldw	r4,-16(fp)
   146ec:	20c7883a 	add	r3,r4,r3
   146f0:	18c002c4 	addi	r3,r3,11
   146f4:	18c00003 	ldbu	r3,0(r3)
   146f8:	1809883a 	mov	r4,r3
   146fc:	e0fffd83 	ldbu	r3,-10(fp)
   14700:	00c6303a 	nor	r3,zero,r3
   14704:	20c6703a 	and	r3,r4,r3
   14708:	1809883a 	mov	r4,r3
   1470c:	e0fffc17 	ldw	r3,-16(fp)
   14710:	1885883a 	add	r2,r3,r2
   14714:	108002c4 	addi	r2,r2,11
   14718:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
   1471c:	e0bffd03 	ldbu	r2,-12(fp)
   14720:	e0fffc17 	ldw	r3,-16(fp)
   14724:	1885883a 	add	r2,r3,r2
   14728:	108002c4 	addi	r2,r2,11
   1472c:	10800003 	ldbu	r2,0(r2)
   14730:	10803fcc 	andi	r2,r2,255
   14734:	1000091e 	bne	r2,zero,1475c <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   14738:	e0bffc17 	ldw	r2,-16(fp)
   1473c:	10800283 	ldbu	r2,10(r2)
   14740:	1007883a 	mov	r3,r2
   14744:	e0bffd43 	ldbu	r2,-11(fp)
   14748:	0084303a 	nor	r2,zero,r2
   1474c:	1884703a 	and	r2,r3,r2
   14750:	1007883a 	mov	r3,r2
   14754:	e0bffc17 	ldw	r2,-16(fp)
   14758:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   1475c:	e0bffb17 	ldw	r2,-20(fp)
   14760:	10800104 	addi	r2,r2,4
   14764:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   14768:	e0bffb17 	ldw	r2,-20(fp)
   1476c:	10800017 	ldw	r2,0(r2)
   14770:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   14774:	e0bffc17 	ldw	r2,-16(fp)
   14778:	103fd91e 	bne	r2,zero,146e0 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   1477c:	0001883a 	nop
   14780:	e037883a 	mov	sp,fp
   14784:	df000017 	ldw	fp,0(sp)
   14788:	dec00104 	addi	sp,sp,4
   1478c:	f800283a 	ret

00014790 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   14790:	defffc04 	addi	sp,sp,-16
   14794:	df000315 	stw	fp,12(sp)
   14798:	df000304 	addi	fp,sp,12
   1479c:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   147a0:	e0bfff17 	ldw	r2,-4(fp)
   147a4:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   147a8:	e0bfff17 	ldw	r2,-4(fp)
   147ac:	108002c4 	addi	r2,r2,11
   147b0:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   147b4:	e03ffe05 	stb	zero,-8(fp)
   147b8:	00000706 	br	147d8 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   147bc:	e0bffd17 	ldw	r2,-12(fp)
   147c0:	10c00044 	addi	r3,r2,1
   147c4:	e0fffd15 	stw	r3,-12(fp)
   147c8:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   147cc:	e0bffe03 	ldbu	r2,-8(fp)
   147d0:	10800044 	addi	r2,r2,1
   147d4:	e0bffe05 	stb	r2,-8(fp)
   147d8:	e0bffe03 	ldbu	r2,-8(fp)
   147dc:	108000f0 	cmpltui	r2,r2,3
   147e0:	103ff61e 	bne	r2,zero,147bc <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
   147e4:	0001883a 	nop
   147e8:	e037883a 	mov	sp,fp
   147ec:	df000017 	ldw	fp,0(sp)
   147f0:	dec00104 	addi	sp,sp,4
   147f4:	f800283a 	ret

000147f8 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   147f8:	defffb04 	addi	sp,sp,-20
   147fc:	dfc00415 	stw	ra,16(sp)
   14800:	df000315 	stw	fp,12(sp)
   14804:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   14808:	0142d004 	movi	r5,2880
   1480c:	010000f4 	movhi	r4,3
   14810:	210edc04 	addi	r4,r4,15216
   14814:	0014b700 	call	14b70 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   14818:	008000f4 	movhi	r2,3
   1481c:	108edc04 	addi	r2,r2,15216
   14820:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   14824:	008000f4 	movhi	r2,3
   14828:	108ee804 	addi	r2,r2,15264
   1482c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   14830:	e03ffd0d 	sth	zero,-12(fp)
   14834:	00001306 	br	14884 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   14838:	e0bffe17 	ldw	r2,-8(fp)
   1483c:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   14840:	e0bffe17 	ldw	r2,-8(fp)
   14844:	e0ffff17 	ldw	r3,-4(fp)
   14848:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   1484c:	e0bffe17 	ldw	r2,-8(fp)
   14850:	00c00fc4 	movi	r3,63
   14854:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   14858:	e0bffe17 	ldw	r2,-8(fp)
   1485c:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   14860:	e0bffe17 	ldw	r2,-8(fp)
   14864:	10800c04 	addi	r2,r2,48
   14868:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   1486c:	e0bfff17 	ldw	r2,-4(fp)
   14870:	10800c04 	addi	r2,r2,48
   14874:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   14878:	e0bffd0b 	ldhu	r2,-12(fp)
   1487c:	10800044 	addi	r2,r2,1
   14880:	e0bffd0d 	sth	r2,-12(fp)
   14884:	e0bffd0b 	ldhu	r2,-12(fp)
   14888:	10800ef0 	cmpltui	r2,r2,59
   1488c:	103fea1e 	bne	r2,zero,14838 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   14890:	e0bffe17 	ldw	r2,-8(fp)
   14894:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   14898:	e0bffe17 	ldw	r2,-8(fp)
   1489c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   148a0:	e0bffe17 	ldw	r2,-8(fp)
   148a4:	00c00fc4 	movi	r3,63
   148a8:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   148ac:	e0bffe17 	ldw	r2,-8(fp)
   148b0:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   148b4:	008000f4 	movhi	r2,3
   148b8:	108edc04 	addi	r2,r2,15216
   148bc:	d0a82b15 	stw	r2,-24404(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   148c0:	0001883a 	nop
   148c4:	e037883a 	mov	sp,fp
   148c8:	dfc00117 	ldw	ra,4(sp)
   148cc:	df000017 	ldw	fp,0(sp)
   148d0:	dec00204 	addi	sp,sp,8
   148d4:	f800283a 	ret

000148d8 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   148d8:	deffff04 	addi	sp,sp,-4
   148dc:	df000015 	stw	fp,0(sp)
   148e0:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   148e4:	d0282e15 	stw	zero,-24392(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   148e8:	d0282c05 	stb	zero,-24400(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   148ec:	d0281e05 	stb	zero,-24456(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   148f0:	d0282645 	stb	zero,-24423(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   148f4:	d0281e45 	stb	zero,-24455(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   148f8:	d0282315 	stw	zero,-24436(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   148fc:	d0281f15 	stw	zero,-24452(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   14900:	d0283115 	stw	zero,-24380(gp)
    OSIdleCtrMax  = 0L;
   14904:	d0282415 	stw	zero,-24432(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   14908:	d0283005 	stb	zero,-24384(gp)
#endif
}
   1490c:	0001883a 	nop
   14910:	e037883a 	mov	sp,fp
   14914:	df000017 	ldw	fp,0(sp)
   14918:	dec00104 	addi	sp,sp,4
   1491c:	f800283a 	ret

00014920 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   14920:	defffd04 	addi	sp,sp,-12
   14924:	df000215 	stw	fp,8(sp)
   14928:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   1492c:	d0282a05 	stb	zero,-24408(gp)
    prdytbl       = &OSRdyTbl[0];
   14930:	d0a82a44 	addi	r2,gp,-24407
   14934:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   14938:	e03ffe05 	stb	zero,-8(fp)
   1493c:	00000706 	br	1495c <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   14940:	e0bfff17 	ldw	r2,-4(fp)
   14944:	10c00044 	addi	r3,r2,1
   14948:	e0ffff15 	stw	r3,-4(fp)
   1494c:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   14950:	e0bffe03 	ldbu	r2,-8(fp)
   14954:	10800044 	addi	r2,r2,1
   14958:	e0bffe05 	stb	r2,-8(fp)
   1495c:	e0bffe03 	ldbu	r2,-8(fp)
   14960:	108000f0 	cmpltui	r2,r2,3
   14964:	103ff61e 	bne	r2,zero,14940 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   14968:	d0282045 	stb	zero,-24447(gp)
    OSPrioHighRdy = 0;
   1496c:	d0282005 	stb	zero,-24448(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   14970:	d0282815 	stw	zero,-24416(gp)
    OSTCBCur      = (OS_TCB *)0;
   14974:	d0282d15 	stw	zero,-24396(gp)
}
   14978:	0001883a 	nop
   1497c:	e037883a 	mov	sp,fp
   14980:	df000017 	ldw	fp,0(sp)
   14984:	dec00104 	addi	sp,sp,4
   14988:	f800283a 	ret

0001498c <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   1498c:	defff804 	addi	sp,sp,-32
   14990:	dfc00715 	stw	ra,28(sp)
   14994:	df000615 	stw	fp,24(sp)
   14998:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   1499c:	008000c4 	movi	r2,3
   149a0:	d8800415 	stw	r2,16(sp)
   149a4:	d8000315 	stw	zero,12(sp)
   149a8:	00808004 	movi	r2,512
   149ac:	d8800215 	stw	r2,8(sp)
   149b0:	008000f4 	movhi	r2,3
   149b4:	108cdc04 	addi	r2,r2,13168
   149b8:	d8800115 	stw	r2,4(sp)
   149bc:	00bfffd4 	movui	r2,65535
   149c0:	d8800015 	stw	r2,0(sp)
   149c4:	01c00504 	movi	r7,20
   149c8:	018000f4 	movhi	r6,3
   149cc:	318edb04 	addi	r6,r6,15212
   149d0:	000b883a 	mov	r5,zero
   149d4:	01000074 	movhi	r4,1
   149d8:	21138e04 	addi	r4,r4,20024
   149dc:	00195080 	call	19508 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   149e0:	e1bfff04 	addi	r6,fp,-4
   149e4:	014000b4 	movhi	r5,2
   149e8:	297e5904 	addi	r5,r5,-1692
   149ec:	01000504 	movi	r4,20
   149f0:	0019d180 	call	19d18 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   149f4:	0001883a 	nop
   149f8:	e037883a 	mov	sp,fp
   149fc:	dfc00117 	ldw	ra,4(sp)
   14a00:	df000017 	ldw	fp,0(sp)
   14a04:	dec00204 	addi	sp,sp,8
   14a08:	f800283a 	ret

00014a0c <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   14a0c:	defff804 	addi	sp,sp,-32
   14a10:	dfc00715 	stw	ra,28(sp)
   14a14:	df000615 	stw	fp,24(sp)
   14a18:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   14a1c:	008000c4 	movi	r2,3
   14a20:	d8800415 	stw	r2,16(sp)
   14a24:	d8000315 	stw	zero,12(sp)
   14a28:	00808004 	movi	r2,512
   14a2c:	d8800215 	stw	r2,8(sp)
   14a30:	008000f4 	movhi	r2,3
   14a34:	108a6404 	addi	r2,r2,10640
   14a38:	d8800115 	stw	r2,4(sp)
   14a3c:	00bfff94 	movui	r2,65534
   14a40:	d8800015 	stw	r2,0(sp)
   14a44:	01c004c4 	movi	r7,19
   14a48:	018000f4 	movhi	r6,3
   14a4c:	318c6304 	addi	r6,r6,12684
   14a50:	000b883a 	mov	r5,zero
   14a54:	01000074 	movhi	r4,1
   14a58:	2113a504 	addi	r4,r4,20116
   14a5c:	00195080 	call	19508 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   14a60:	e1bfff04 	addi	r6,fp,-4
   14a64:	014000b4 	movhi	r5,2
   14a68:	297e5d04 	addi	r5,r5,-1676
   14a6c:	010004c4 	movi	r4,19
   14a70:	0019d180 	call	19d18 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   14a74:	0001883a 	nop
   14a78:	e037883a 	mov	sp,fp
   14a7c:	dfc00117 	ldw	ra,4(sp)
   14a80:	df000017 	ldw	fp,0(sp)
   14a84:	dec00204 	addi	sp,sp,8
   14a88:	f800283a 	ret

00014a8c <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   14a8c:	defffb04 	addi	sp,sp,-20
   14a90:	dfc00415 	stw	ra,16(sp)
   14a94:	df000315 	stw	fp,12(sp)
   14a98:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   14a9c:	01414404 	movi	r5,1296
   14aa0:	010000f4 	movhi	r4,3
   14aa4:	2111ac04 	addi	r4,r4,18096
   14aa8:	0014b700 	call	14b70 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   14aac:	01401504 	movi	r5,84
   14ab0:	010000f4 	movhi	r4,3
   14ab4:	2112f004 	addi	r4,r4,19392
   14ab8:	0014b700 	call	14b70 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   14abc:	008000f4 	movhi	r2,3
   14ac0:	1091ac04 	addi	r2,r2,18096
   14ac4:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   14ac8:	008000f4 	movhi	r2,3
   14acc:	1091c704 	addi	r2,r2,18204
   14ad0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   14ad4:	e03ffd05 	stb	zero,-12(fp)
   14ad8:	00001106 	br	14b20 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   14adc:	e0bffe17 	ldw	r2,-8(fp)
   14ae0:	e0ffff17 	ldw	r3,-4(fp)
   14ae4:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   14ae8:	e0bffe17 	ldw	r2,-8(fp)
   14aec:	00c00fc4 	movi	r3,63
   14af0:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   14af4:	e0bffe17 	ldw	r2,-8(fp)
   14af8:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   14afc:	e0bffe17 	ldw	r2,-8(fp)
   14b00:	10801b04 	addi	r2,r2,108
   14b04:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   14b08:	e0bfff17 	ldw	r2,-4(fp)
   14b0c:	10801b04 	addi	r2,r2,108
   14b10:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   14b14:	e0bffd03 	ldbu	r2,-12(fp)
   14b18:	10800044 	addi	r2,r2,1
   14b1c:	e0bffd05 	stb	r2,-12(fp)
   14b20:	e0bffd03 	ldbu	r2,-12(fp)
   14b24:	108002f0 	cmpltui	r2,r2,11
   14b28:	103fec1e 	bne	r2,zero,14adc <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   14b2c:	e0bffe17 	ldw	r2,-8(fp)
   14b30:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   14b34:	e0bffe17 	ldw	r2,-8(fp)
   14b38:	00c00fc4 	movi	r3,63
   14b3c:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   14b40:	e0bffe17 	ldw	r2,-8(fp)
   14b44:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   14b48:	d0282115 	stw	zero,-24444(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   14b4c:	008000f4 	movhi	r2,3
   14b50:	1091ac04 	addi	r2,r2,18096
   14b54:	d0a82515 	stw	r2,-24428(gp)
}
   14b58:	0001883a 	nop
   14b5c:	e037883a 	mov	sp,fp
   14b60:	dfc00117 	ldw	ra,4(sp)
   14b64:	df000017 	ldw	fp,0(sp)
   14b68:	dec00204 	addi	sp,sp,8
   14b6c:	f800283a 	ret

00014b70 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   14b70:	defffd04 	addi	sp,sp,-12
   14b74:	df000215 	stw	fp,8(sp)
   14b78:	df000204 	addi	fp,sp,8
   14b7c:	e13ffe15 	stw	r4,-8(fp)
   14b80:	2805883a 	mov	r2,r5
   14b84:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   14b88:	00000706 	br	14ba8 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   14b8c:	e0bffe17 	ldw	r2,-8(fp)
   14b90:	10c00044 	addi	r3,r2,1
   14b94:	e0fffe15 	stw	r3,-8(fp)
   14b98:	10000005 	stb	zero,0(r2)
        size--;
   14b9c:	e0bfff0b 	ldhu	r2,-4(fp)
   14ba0:	10bfffc4 	addi	r2,r2,-1
   14ba4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   14ba8:	e0bfff0b 	ldhu	r2,-4(fp)
   14bac:	103ff71e 	bne	r2,zero,14b8c <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   14bb0:	0001883a 	nop
   14bb4:	e037883a 	mov	sp,fp
   14bb8:	df000017 	ldw	fp,0(sp)
   14bbc:	dec00104 	addi	sp,sp,4
   14bc0:	f800283a 	ret

00014bc4 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   14bc4:	defffc04 	addi	sp,sp,-16
   14bc8:	df000315 	stw	fp,12(sp)
   14bcc:	df000304 	addi	fp,sp,12
   14bd0:	e13ffd15 	stw	r4,-12(fp)
   14bd4:	e17ffe15 	stw	r5,-8(fp)
   14bd8:	3005883a 	mov	r2,r6
   14bdc:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   14be0:	00000b06 	br	14c10 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   14be4:	e0bffd17 	ldw	r2,-12(fp)
   14be8:	10c00044 	addi	r3,r2,1
   14bec:	e0fffd15 	stw	r3,-12(fp)
   14bf0:	e0fffe17 	ldw	r3,-8(fp)
   14bf4:	19000044 	addi	r4,r3,1
   14bf8:	e13ffe15 	stw	r4,-8(fp)
   14bfc:	18c00003 	ldbu	r3,0(r3)
   14c00:	10c00005 	stb	r3,0(r2)
        size--;
   14c04:	e0bfff0b 	ldhu	r2,-4(fp)
   14c08:	10bfffc4 	addi	r2,r2,-1
   14c0c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   14c10:	e0bfff0b 	ldhu	r2,-4(fp)
   14c14:	103ff31e 	bne	r2,zero,14be4 <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
   14c18:	0001883a 	nop
   14c1c:	e037883a 	mov	sp,fp
   14c20:	df000017 	ldw	fp,0(sp)
   14c24:	dec00104 	addi	sp,sp,4
   14c28:	f800283a 	ret

00014c2c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   14c2c:	defffb04 	addi	sp,sp,-20
   14c30:	dfc00415 	stw	ra,16(sp)
   14c34:	df000315 	stw	fp,12(sp)
   14c38:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   14c3c:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14c40:	0005303a 	rdctl	r2,status
   14c44:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14c48:	e0ffff17 	ldw	r3,-4(fp)
   14c4c:	00bfff84 	movi	r2,-2
   14c50:	1884703a 	and	r2,r3,r2
   14c54:	1001703a 	wrctl	status,r2
  
  return context;
   14c58:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
   14c5c:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   14c60:	d0a82c03 	ldbu	r2,-24400(gp)
   14c64:	10803fcc 	andi	r2,r2,255
   14c68:	10001a1e 	bne	r2,zero,14cd4 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   14c6c:	d0a81e03 	ldbu	r2,-24456(gp)
   14c70:	10803fcc 	andi	r2,r2,255
   14c74:	1000171e 	bne	r2,zero,14cd4 <OS_Sched+0xa8>
            OS_SchedNew();
   14c78:	0014cfc0 	call	14cfc <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   14c7c:	d0e82003 	ldbu	r3,-24448(gp)
   14c80:	d0a82043 	ldbu	r2,-24447(gp)
   14c84:	18c03fcc 	andi	r3,r3,255
   14c88:	10803fcc 	andi	r2,r2,255
   14c8c:	18801126 	beq	r3,r2,14cd4 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   14c90:	d0a82003 	ldbu	r2,-24448(gp)
   14c94:	10c03fcc 	andi	r3,r2,255
   14c98:	008000f4 	movhi	r2,3
   14c9c:	1092f004 	addi	r2,r2,19392
   14ca0:	18c7883a 	add	r3,r3,r3
   14ca4:	18c7883a 	add	r3,r3,r3
   14ca8:	10c5883a 	add	r2,r2,r3
   14cac:	10800017 	ldw	r2,0(r2)
   14cb0:	d0a82815 	stw	r2,-24416(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   14cb4:	d0a82817 	ldw	r2,-24416(gp)
   14cb8:	10c00e17 	ldw	r3,56(r2)
   14cbc:	18c00044 	addi	r3,r3,1
   14cc0:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   14cc4:	d0a82317 	ldw	r2,-24436(gp)
   14cc8:	10800044 	addi	r2,r2,1
   14ccc:	d0a82315 	stw	r2,-24436(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   14cd0:	001e0040 	call	1e004 <OSCtxSw>
   14cd4:	e0bffd17 	ldw	r2,-12(fp)
   14cd8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14cdc:	e0bffe17 	ldw	r2,-8(fp)
   14ce0:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   14ce4:	0001883a 	nop
   14ce8:	e037883a 	mov	sp,fp
   14cec:	dfc00117 	ldw	ra,4(sp)
   14cf0:	df000017 	ldw	fp,0(sp)
   14cf4:	dec00204 	addi	sp,sp,8
   14cf8:	f800283a 	ret

00014cfc <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   14cfc:	defffe04 	addi	sp,sp,-8
   14d00:	df000115 	stw	fp,4(sp)
   14d04:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   14d08:	d0a82a03 	ldbu	r2,-24408(gp)
   14d0c:	10c03fcc 	andi	r3,r2,255
   14d10:	008000b4 	movhi	r2,2
   14d14:	10be1904 	addi	r2,r2,-1948
   14d18:	10c5883a 	add	r2,r2,r3
   14d1c:	10800003 	ldbu	r2,0(r2)
   14d20:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   14d24:	e0bfff03 	ldbu	r2,-4(fp)
   14d28:	100490fa 	slli	r2,r2,3
   14d2c:	1009883a 	mov	r4,r2
   14d30:	e0ffff03 	ldbu	r3,-4(fp)
   14d34:	d0a82a44 	addi	r2,gp,-24407
   14d38:	1885883a 	add	r2,r3,r2
   14d3c:	10800003 	ldbu	r2,0(r2)
   14d40:	10c03fcc 	andi	r3,r2,255
   14d44:	008000b4 	movhi	r2,2
   14d48:	10be1904 	addi	r2,r2,-1948
   14d4c:	10c5883a 	add	r2,r2,r3
   14d50:	10800003 	ldbu	r2,0(r2)
   14d54:	2085883a 	add	r2,r4,r2
   14d58:	d0a82005 	stb	r2,-24448(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   14d5c:	0001883a 	nop
   14d60:	e037883a 	mov	sp,fp
   14d64:	df000017 	ldw	fp,0(sp)
   14d68:	dec00104 	addi	sp,sp,4
   14d6c:	f800283a 	ret

00014d70 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   14d70:	defffc04 	addi	sp,sp,-16
   14d74:	df000315 	stw	fp,12(sp)
   14d78:	df000304 	addi	fp,sp,12
   14d7c:	e13ffe15 	stw	r4,-8(fp)
   14d80:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   14d84:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   14d88:	00000b06 	br	14db8 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   14d8c:	e0bffe17 	ldw	r2,-8(fp)
   14d90:	10c00044 	addi	r3,r2,1
   14d94:	e0fffe15 	stw	r3,-8(fp)
   14d98:	e0ffff17 	ldw	r3,-4(fp)
   14d9c:	19000044 	addi	r4,r3,1
   14da0:	e13fff15 	stw	r4,-4(fp)
   14da4:	18c00003 	ldbu	r3,0(r3)
   14da8:	10c00005 	stb	r3,0(r2)
        len++;
   14dac:	e0bffd03 	ldbu	r2,-12(fp)
   14db0:	10800044 	addi	r2,r2,1
   14db4:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   14db8:	e0bfff17 	ldw	r2,-4(fp)
   14dbc:	10800003 	ldbu	r2,0(r2)
   14dc0:	10803fcc 	andi	r2,r2,255
   14dc4:	103ff11e 	bne	r2,zero,14d8c <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   14dc8:	e0bffe17 	ldw	r2,-8(fp)
   14dcc:	10000005 	stb	zero,0(r2)
    return (len);
   14dd0:	e0bffd03 	ldbu	r2,-12(fp)
}
   14dd4:	e037883a 	mov	sp,fp
   14dd8:	df000017 	ldw	fp,0(sp)
   14ddc:	dec00104 	addi	sp,sp,4
   14de0:	f800283a 	ret

00014de4 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   14de4:	defffd04 	addi	sp,sp,-12
   14de8:	df000215 	stw	fp,8(sp)
   14dec:	df000204 	addi	fp,sp,8
   14df0:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   14df4:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   14df8:	00000606 	br	14e14 <OS_StrLen+0x30>
        psrc++;
   14dfc:	e0bfff17 	ldw	r2,-4(fp)
   14e00:	10800044 	addi	r2,r2,1
   14e04:	e0bfff15 	stw	r2,-4(fp)
        len++;
   14e08:	e0bffe03 	ldbu	r2,-8(fp)
   14e0c:	10800044 	addi	r2,r2,1
   14e10:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   14e14:	e0bfff17 	ldw	r2,-4(fp)
   14e18:	10800003 	ldbu	r2,0(r2)
   14e1c:	10803fcc 	andi	r2,r2,255
   14e20:	103ff61e 	bne	r2,zero,14dfc <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
   14e24:	e0bffe03 	ldbu	r2,-8(fp)
}
   14e28:	e037883a 	mov	sp,fp
   14e2c:	df000017 	ldw	fp,0(sp)
   14e30:	dec00104 	addi	sp,sp,4
   14e34:	f800283a 	ret

00014e38 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   14e38:	defffa04 	addi	sp,sp,-24
   14e3c:	dfc00515 	stw	ra,20(sp)
   14e40:	df000415 	stw	fp,16(sp)
   14e44:	df000404 	addi	fp,sp,16
   14e48:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14e4c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14e50:	0005303a 	rdctl	r2,status
   14e54:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14e58:	e0fffd17 	ldw	r3,-12(fp)
   14e5c:	00bfff84 	movi	r2,-2
   14e60:	1884703a 	and	r2,r3,r2
   14e64:	1001703a 	wrctl	status,r2
  
  return context;
   14e68:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   14e6c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   14e70:	d0a81f17 	ldw	r2,-24452(gp)
   14e74:	10800044 	addi	r2,r2,1
   14e78:	d0a81f15 	stw	r2,-24452(gp)
   14e7c:	e0bffc17 	ldw	r2,-16(fp)
   14e80:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14e84:	e0bffe17 	ldw	r2,-8(fp)
   14e88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   14e8c:	001e3180 	call	1e318 <OSTaskIdleHook>
    }
   14e90:	003fef06 	br	14e50 <OS_TaskIdle+0x18>

00014e94 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   14e94:	defff804 	addi	sp,sp,-32
   14e98:	dfc00715 	stw	ra,28(sp)
   14e9c:	df000615 	stw	fp,24(sp)
   14ea0:	dc400515 	stw	r17,20(sp)
   14ea4:	dc000415 	stw	r16,16(sp)
   14ea8:	df000604 	addi	fp,sp,24
   14eac:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14eb0:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   14eb4:	00000206 	br	14ec0 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   14eb8:	01000044 	movi	r4,1
   14ebc:	001a5d80 	call	1a5d8 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   14ec0:	d0a83003 	ldbu	r2,-24384(gp)
   14ec4:	10803fcc 	andi	r2,r2,255
   14ec8:	103ffb26 	beq	r2,zero,14eb8 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   14ecc:	d0e82417 	ldw	r3,-24432(gp)
   14ed0:	00947b34 	movhi	r2,20972
   14ed4:	10a147c4 	addi	r2,r2,-31457
   14ed8:	1888383a 	mulxuu	r4,r3,r2
   14edc:	1885383a 	mul	r2,r3,r2
   14ee0:	1021883a 	mov	r16,r2
   14ee4:	2023883a 	mov	r17,r4
   14ee8:	8804d17a 	srli	r2,r17,5
   14eec:	d0a82415 	stw	r2,-24432(gp)
    if (OSIdleCtrMax == 0L) {
   14ef0:	d0a82417 	ldw	r2,-24432(gp)
   14ef4:	1000031e 	bne	r2,zero,14f04 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
   14ef8:	d0282605 	stb	zero,-24424(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   14efc:	01003fc4 	movi	r4,255
   14f00:	001a2600 	call	1a260 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14f04:	0005303a 	rdctl	r2,status
   14f08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14f0c:	e0fffb17 	ldw	r3,-20(fp)
   14f10:	00bfff84 	movi	r2,-2
   14f14:	1884703a 	and	r2,r3,r2
   14f18:	1001703a 	wrctl	status,r2
  
  return context;
   14f1c:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   14f20:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   14f24:	d0a81f17 	ldw	r2,-24452(gp)
   14f28:	d0a83115 	stw	r2,-24380(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   14f2c:	d0281f15 	stw	zero,-24452(gp)
   14f30:	e0bffa17 	ldw	r2,-24(fp)
   14f34:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14f38:	e0bffc17 	ldw	r2,-16(fp)
   14f3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   14f40:	d0e83117 	ldw	r3,-24380(gp)
   14f44:	d0a82417 	ldw	r2,-24432(gp)
   14f48:	1885203a 	divu	r2,r3,r2
   14f4c:	1007883a 	mov	r3,r2
   14f50:	00801904 	movi	r2,100
   14f54:	10c5c83a 	sub	r2,r2,r3
   14f58:	d0a82605 	stb	r2,-24424(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   14f5c:	001e2980 	call	1e298 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   14f60:	0014f700 	call	14f70 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   14f64:	0009883a 	mov	r4,zero
   14f68:	001a5d80 	call	1a5d8 <OSTimeDly>
    }
   14f6c:	003fe506 	br	14f04 <OS_TaskStat+0x70>

00014f70 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   14f70:	defffa04 	addi	sp,sp,-24
   14f74:	dfc00515 	stw	ra,20(sp)
   14f78:	df000415 	stw	fp,16(sp)
   14f7c:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   14f80:	e03ffc05 	stb	zero,-16(fp)
   14f84:	00002406 	br	15018 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   14f88:	e0bffc03 	ldbu	r2,-16(fp)
   14f8c:	e0fffe04 	addi	r3,fp,-8
   14f90:	180b883a 	mov	r5,r3
   14f94:	1009883a 	mov	r4,r2
   14f98:	001a0a00 	call	1a0a0 <OSTaskStkChk>
   14f9c:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   14fa0:	e0bffc43 	ldbu	r2,-15(fp)
   14fa4:	1000191e 	bne	r2,zero,1500c <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   14fa8:	e0fffc03 	ldbu	r3,-16(fp)
   14fac:	008000f4 	movhi	r2,3
   14fb0:	1092f004 	addi	r2,r2,19392
   14fb4:	18c7883a 	add	r3,r3,r3
   14fb8:	18c7883a 	add	r3,r3,r3
   14fbc:	10c5883a 	add	r2,r2,r3
   14fc0:	10800017 	ldw	r2,0(r2)
   14fc4:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   14fc8:	e0bffd17 	ldw	r2,-12(fp)
   14fcc:	10000f26 	beq	r2,zero,1500c <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   14fd0:	e0bffd17 	ldw	r2,-12(fp)
   14fd4:	10800060 	cmpeqi	r2,r2,1
   14fd8:	10000c1e 	bne	r2,zero,1500c <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   14fdc:	e0bffd17 	ldw	r2,-12(fp)
   14fe0:	10c00217 	ldw	r3,8(r2)
   14fe4:	e0bffd17 	ldw	r2,-12(fp)
   14fe8:	10800317 	ldw	r2,12(r2)
   14fec:	1085883a 	add	r2,r2,r2
   14ff0:	1085883a 	add	r2,r2,r2
   14ff4:	1887883a 	add	r3,r3,r2
   14ff8:	e0bffd17 	ldw	r2,-12(fp)
   14ffc:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   15000:	e0ffff17 	ldw	r3,-4(fp)
   15004:	e0bffd17 	ldw	r2,-12(fp)
   15008:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   1500c:	e0bffc03 	ldbu	r2,-16(fp)
   15010:	10800044 	addi	r2,r2,1
   15014:	e0bffc05 	stb	r2,-16(fp)
   15018:	e0bffc03 	ldbu	r2,-16(fp)
   1501c:	10800570 	cmpltui	r2,r2,21
   15020:	103fd91e 	bne	r2,zero,14f88 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
   15024:	0001883a 	nop
   15028:	e037883a 	mov	sp,fp
   1502c:	dfc00117 	ldw	ra,4(sp)
   15030:	df000017 	ldw	fp,0(sp)
   15034:	dec00204 	addi	sp,sp,8
   15038:	f800283a 	ret

0001503c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   1503c:	defff204 	addi	sp,sp,-56
   15040:	dfc00d15 	stw	ra,52(sp)
   15044:	df000c15 	stw	fp,48(sp)
   15048:	df000c04 	addi	fp,sp,48
   1504c:	e17ffc15 	stw	r5,-16(fp)
   15050:	e1bffd15 	stw	r6,-12(fp)
   15054:	3807883a 	mov	r3,r7
   15058:	e0800417 	ldw	r2,16(fp)
   1505c:	e13ffb05 	stb	r4,-20(fp)
   15060:	e0fffe0d 	sth	r3,-8(fp)
   15064:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   15068:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1506c:	0005303a 	rdctl	r2,status
   15070:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15074:	e0fffa17 	ldw	r3,-24(fp)
   15078:	00bfff84 	movi	r2,-2
   1507c:	1884703a 	and	r2,r3,r2
   15080:	1001703a 	wrctl	status,r2
  
  return context;
   15084:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
   15088:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   1508c:	d0a82517 	ldw	r2,-24428(gp)
   15090:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
   15094:	e0bff617 	ldw	r2,-40(fp)
   15098:	10009326 	beq	r2,zero,152e8 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   1509c:	e0bff617 	ldw	r2,-40(fp)
   150a0:	10800517 	ldw	r2,20(r2)
   150a4:	d0a82515 	stw	r2,-24428(gp)
   150a8:	e0bff417 	ldw	r2,-48(fp)
   150ac:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   150b0:	e0bff817 	ldw	r2,-32(fp)
   150b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   150b8:	e0bff617 	ldw	r2,-40(fp)
   150bc:	e0fffc17 	ldw	r3,-16(fp)
   150c0:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   150c4:	e0bff617 	ldw	r2,-40(fp)
   150c8:	e0fffb03 	ldbu	r3,-20(fp)
   150cc:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   150d0:	e0bff617 	ldw	r2,-40(fp)
   150d4:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   150d8:	e0bff617 	ldw	r2,-40(fp)
   150dc:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   150e0:	e0bff617 	ldw	r2,-40(fp)
   150e4:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   150e8:	e0bff617 	ldw	r2,-40(fp)
   150ec:	e0c00317 	ldw	r3,12(fp)
   150f0:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   150f4:	e0bff617 	ldw	r2,-40(fp)
   150f8:	e0c00217 	ldw	r3,8(fp)
   150fc:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   15100:	e0bff617 	ldw	r2,-40(fp)
   15104:	e0fffd17 	ldw	r3,-12(fp)
   15108:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   1510c:	e0bff617 	ldw	r2,-40(fp)
   15110:	e0ffff0b 	ldhu	r3,-4(fp)
   15114:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   15118:	e0bff617 	ldw	r2,-40(fp)
   1511c:	e0fffe0b 	ldhu	r3,-8(fp)
   15120:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   15124:	e0bff617 	ldw	r2,-40(fp)
   15128:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   1512c:	e0bffb03 	ldbu	r2,-20(fp)
   15130:	1004d0fa 	srli	r2,r2,3
   15134:	1007883a 	mov	r3,r2
   15138:	e0bff617 	ldw	r2,-40(fp)
   1513c:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   15140:	e0bffb03 	ldbu	r2,-20(fp)
   15144:	108001cc 	andi	r2,r2,7
   15148:	1007883a 	mov	r3,r2
   1514c:	e0bff617 	ldw	r2,-40(fp)
   15150:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   15154:	e0bff617 	ldw	r2,-40(fp)
   15158:	10800d03 	ldbu	r2,52(r2)
   1515c:	10803fcc 	andi	r2,r2,255
   15160:	00c00044 	movi	r3,1
   15164:	1884983a 	sll	r2,r3,r2
   15168:	1007883a 	mov	r3,r2
   1516c:	e0bff617 	ldw	r2,-40(fp)
   15170:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   15174:	e0bff617 	ldw	r2,-40(fp)
   15178:	10800cc3 	ldbu	r2,51(r2)
   1517c:	10803fcc 	andi	r2,r2,255
   15180:	00c00044 	movi	r3,1
   15184:	1884983a 	sll	r2,r3,r2
   15188:	1007883a 	mov	r3,r2
   1518c:	e0bff617 	ldw	r2,-40(fp)
   15190:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   15194:	e0bff617 	ldw	r2,-40(fp)
   15198:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   1519c:	e0bff617 	ldw	r2,-40(fp)
   151a0:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   151a4:	e0bff617 	ldw	r2,-40(fp)
   151a8:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   151ac:	e0bff617 	ldw	r2,-40(fp)
   151b0:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   151b4:	e0bff617 	ldw	r2,-40(fp)
   151b8:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   151bc:	e0bff617 	ldw	r2,-40(fp)
   151c0:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   151c4:	e0bff617 	ldw	r2,-40(fp)
   151c8:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   151cc:	e0bff617 	ldw	r2,-40(fp)
   151d0:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   151d4:	e0bff617 	ldw	r2,-40(fp)
   151d8:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   151dc:	e0bff617 	ldw	r2,-40(fp)
   151e0:	00c00fc4 	movi	r3,63
   151e4:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   151e8:	e0bff617 	ldw	r2,-40(fp)
   151ec:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   151f0:	e13ff617 	ldw	r4,-40(fp)
   151f4:	001e3380 	call	1e338 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   151f8:	e13ff617 	ldw	r4,-40(fp)
   151fc:	001e2300 	call	1e230 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15200:	0005303a 	rdctl	r2,status
   15204:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15208:	e0fff517 	ldw	r3,-44(fp)
   1520c:	00bfff84 	movi	r2,-2
   15210:	1884703a 	and	r2,r3,r2
   15214:	1001703a 	wrctl	status,r2
  
  return context;
   15218:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
   1521c:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   15220:	e0fffb03 	ldbu	r3,-20(fp)
   15224:	008000f4 	movhi	r2,3
   15228:	1092f004 	addi	r2,r2,19392
   1522c:	18c7883a 	add	r3,r3,r3
   15230:	18c7883a 	add	r3,r3,r3
   15234:	10c5883a 	add	r2,r2,r3
   15238:	e0fff617 	ldw	r3,-40(fp)
   1523c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   15240:	d0e82117 	ldw	r3,-24444(gp)
   15244:	e0bff617 	ldw	r2,-40(fp)
   15248:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   1524c:	e0bff617 	ldw	r2,-40(fp)
   15250:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   15254:	d0a82117 	ldw	r2,-24444(gp)
   15258:	10000326 	beq	r2,zero,15268 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   1525c:	d0a82117 	ldw	r2,-24444(gp)
   15260:	e0fff617 	ldw	r3,-40(fp)
   15264:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   15268:	e0bff617 	ldw	r2,-40(fp)
   1526c:	d0a82115 	stw	r2,-24444(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   15270:	e0bff617 	ldw	r2,-40(fp)
   15274:	10c00d83 	ldbu	r3,54(r2)
   15278:	d0a82a03 	ldbu	r2,-24408(gp)
   1527c:	1884b03a 	or	r2,r3,r2
   15280:	d0a82a05 	stb	r2,-24408(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   15284:	e0bff617 	ldw	r2,-40(fp)
   15288:	10800d03 	ldbu	r2,52(r2)
   1528c:	10c03fcc 	andi	r3,r2,255
   15290:	e0bff617 	ldw	r2,-40(fp)
   15294:	10800d03 	ldbu	r2,52(r2)
   15298:	11003fcc 	andi	r4,r2,255
   1529c:	d0a82a44 	addi	r2,gp,-24407
   152a0:	2085883a 	add	r2,r4,r2
   152a4:	11000003 	ldbu	r4,0(r2)
   152a8:	e0bff617 	ldw	r2,-40(fp)
   152ac:	10800d43 	ldbu	r2,53(r2)
   152b0:	2084b03a 	or	r2,r4,r2
   152b4:	1009883a 	mov	r4,r2
   152b8:	d0a82a44 	addi	r2,gp,-24407
   152bc:	1885883a 	add	r2,r3,r2
   152c0:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   152c4:	d0a82643 	ldbu	r2,-24423(gp)
   152c8:	10800044 	addi	r2,r2,1
   152cc:	d0a82645 	stb	r2,-24423(gp)
   152d0:	e0bff417 	ldw	r2,-48(fp)
   152d4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   152d8:	e0bff717 	ldw	r2,-36(fp)
   152dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   152e0:	0005883a 	mov	r2,zero
   152e4:	00000506 	br	152fc <OS_TCBInit+0x2c0>
   152e8:	e0bff417 	ldw	r2,-48(fp)
   152ec:	e0bff915 	stw	r2,-28(fp)
   152f0:	e0bff917 	ldw	r2,-28(fp)
   152f4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   152f8:	00801084 	movi	r2,66
}
   152fc:	e037883a 	mov	sp,fp
   15300:	dfc00117 	ldw	ra,4(sp)
   15304:	df000017 	ldw	fp,0(sp)
   15308:	dec00204 	addi	sp,sp,8
   1530c:	f800283a 	ret

00015310 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   15310:	defffe04 	addi	sp,sp,-8
   15314:	df000115 	stw	fp,4(sp)
   15318:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   1531c:	d0a01004 	addi	r2,gp,-32704
   15320:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   15324:	d0a01104 	addi	r2,gp,-32700
   15328:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   1532c:	d0a01284 	addi	r2,gp,-32694
   15330:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   15334:	d0a01304 	addi	r2,gp,-32692
   15338:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   1533c:	d0a01204 	addi	r2,gp,-32696
   15340:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   15344:	d0a01384 	addi	r2,gp,-32690
   15348:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   1534c:	d0a01404 	addi	r2,gp,-32688
   15350:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   15354:	d0a01484 	addi	r2,gp,-32686
   15358:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   1535c:	d0a01504 	addi	r2,gp,-32684
   15360:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   15364:	d0a01584 	addi	r2,gp,-32682
   15368:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   1536c:	d0a01604 	addi	r2,gp,-32680
   15370:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   15374:	d0a01684 	addi	r2,gp,-32678
   15378:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   1537c:	d0a01704 	addi	r2,gp,-32676
   15380:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   15384:	d0a01784 	addi	r2,gp,-32674
   15388:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   1538c:	d0a01804 	addi	r2,gp,-32672
   15390:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   15394:	d0a01884 	addi	r2,gp,-32670
   15398:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   1539c:	d0a01904 	addi	r2,gp,-32668
   153a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   153a4:	d0a01984 	addi	r2,gp,-32666
   153a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   153ac:	d0a01a04 	addi	r2,gp,-32664
   153b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   153b4:	d0a01a84 	addi	r2,gp,-32662
   153b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   153bc:	d0a01b04 	addi	r2,gp,-32660
   153c0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   153c4:	d0a01b84 	addi	r2,gp,-32658
   153c8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   153cc:	d0a01c04 	addi	r2,gp,-32656
   153d0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   153d4:	d0a01c84 	addi	r2,gp,-32654
   153d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   153dc:	d0a01d04 	addi	r2,gp,-32652
   153e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   153e4:	d0a01d84 	addi	r2,gp,-32650
   153e8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   153ec:	d0a01e04 	addi	r2,gp,-32648
   153f0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   153f4:	d0a01e84 	addi	r2,gp,-32646
   153f8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   153fc:	d0a01f04 	addi	r2,gp,-32644
   15400:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   15404:	d0a01f84 	addi	r2,gp,-32642
   15408:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   1540c:	d0a02004 	addi	r2,gp,-32640
   15410:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   15414:	d0a02084 	addi	r2,gp,-32638
   15418:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   1541c:	d0a02104 	addi	r2,gp,-32636
   15420:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   15424:	d0a02184 	addi	r2,gp,-32634
   15428:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   1542c:	d0a02204 	addi	r2,gp,-32632
   15430:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   15434:	d0a02284 	addi	r2,gp,-32630
   15438:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   1543c:	d0a02304 	addi	r2,gp,-32628
   15440:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   15444:	d0a02384 	addi	r2,gp,-32626
   15448:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   1544c:	d0a02404 	addi	r2,gp,-32624
   15450:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   15454:	d0a02484 	addi	r2,gp,-32622
   15458:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   1545c:	d0a02504 	addi	r2,gp,-32620
   15460:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   15464:	d0a02584 	addi	r2,gp,-32618
   15468:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   1546c:	d0a02604 	addi	r2,gp,-32616
   15470:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   15474:	d0a02684 	addi	r2,gp,-32614
   15478:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   1547c:	d0a02704 	addi	r2,gp,-32612
   15480:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   15484:	d0a02c04 	addi	r2,gp,-32592
   15488:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   1548c:	0001883a 	nop
   15490:	e037883a 	mov	sp,fp
   15494:	df000017 	ldw	fp,0(sp)
   15498:	dec00104 	addi	sp,sp,4
   1549c:	f800283a 	ret

000154a0 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   154a0:	defff204 	addi	sp,sp,-56
   154a4:	df000d15 	stw	fp,52(sp)
   154a8:	df000d04 	addi	fp,sp,52
   154ac:	e13ffc15 	stw	r4,-16(fp)
   154b0:	2807883a 	mov	r3,r5
   154b4:	3005883a 	mov	r2,r6
   154b8:	e1ffff15 	stw	r7,-4(fp)
   154bc:	e0fffd0d 	sth	r3,-12(fp)
   154c0:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   154c4:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   154c8:	e0bfff17 	ldw	r2,-4(fp)
   154cc:	1000021e 	bne	r2,zero,154d8 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   154d0:	0005883a 	mov	r2,zero
   154d4:	0000b006 	br	15798 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   154d8:	e0bffc17 	ldw	r2,-16(fp)
   154dc:	1000051e 	bne	r2,zero,154f4 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   154e0:	e0bfff17 	ldw	r2,-4(fp)
   154e4:	00c01b84 	movi	r3,110
   154e8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   154ec:	0005883a 	mov	r2,zero
   154f0:	0000a906 	br	15798 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   154f4:	e0bffc17 	ldw	r2,-16(fp)
   154f8:	10800003 	ldbu	r2,0(r2)
   154fc:	10803fcc 	andi	r2,r2,255
   15500:	10800160 	cmpeqi	r2,r2,5
   15504:	1000051e 	bne	r2,zero,1551c <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   15508:	e0bfff17 	ldw	r2,-4(fp)
   1550c:	00c00044 	movi	r3,1
   15510:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15514:	0005883a 	mov	r2,zero
   15518:	00009f06 	br	15798 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   1551c:	e0fffe03 	ldbu	r3,-8(fp)
   15520:	00bfe004 	movi	r2,-128
   15524:	1884703a 	and	r2,r3,r2
   15528:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   1552c:	e0bff503 	ldbu	r2,-44(fp)
   15530:	10000626 	beq	r2,zero,1554c <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   15534:	e0bffe03 	ldbu	r2,-8(fp)
   15538:	10801fcc 	andi	r2,r2,127
   1553c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   15540:	00800044 	movi	r2,1
   15544:	e0bff385 	stb	r2,-50(fp)
   15548:	00000106 	br	15550 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   1554c:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   15550:	e0bfff17 	ldw	r2,-4(fp)
   15554:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15558:	0005303a 	rdctl	r2,status
   1555c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15560:	e0fffb17 	ldw	r3,-20(fp)
   15564:	00bfff84 	movi	r2,-2
   15568:	1884703a 	and	r2,r3,r2
   1556c:	1001703a 	wrctl	status,r2
  
  return context;
   15570:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   15574:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   15578:	e0bffe03 	ldbu	r2,-8(fp)
   1557c:	10c00060 	cmpeqi	r3,r2,1
   15580:	18005f1e 	bne	r3,zero,15700 <OSFlagAccept+0x260>
   15584:	10c00088 	cmpgei	r3,r2,2
   15588:	1800021e 	bne	r3,zero,15594 <OSFlagAccept+0xf4>
   1558c:	10003f26 	beq	r2,zero,1568c <OSFlagAccept+0x1ec>
   15590:	00007706 	br	15770 <OSFlagAccept+0x2d0>
   15594:	10c000a0 	cmpeqi	r3,r2,2
   15598:	1800031e 	bne	r3,zero,155a8 <OSFlagAccept+0x108>
   1559c:	108000e0 	cmpeqi	r2,r2,3
   155a0:	10001e1e 	bne	r2,zero,1561c <OSFlagAccept+0x17c>
   155a4:	00007206 	br	15770 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   155a8:	e0bffc17 	ldw	r2,-16(fp)
   155ac:	10c0020b 	ldhu	r3,8(r2)
   155b0:	e0bffd0b 	ldhu	r2,-12(fp)
   155b4:	1884703a 	and	r2,r3,r2
   155b8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   155bc:	e0fff30b 	ldhu	r3,-52(fp)
   155c0:	e0bffd0b 	ldhu	r2,-12(fp)
   155c4:	18800d1e 	bne	r3,r2,155fc <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   155c8:	e0bff383 	ldbu	r2,-50(fp)
   155cc:	10800058 	cmpnei	r2,r2,1
   155d0:	10000d1e 	bne	r2,zero,15608 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   155d4:	e0bffc17 	ldw	r2,-16(fp)
   155d8:	1080020b 	ldhu	r2,8(r2)
   155dc:	1007883a 	mov	r3,r2
   155e0:	e0bff30b 	ldhu	r2,-52(fp)
   155e4:	0084303a 	nor	r2,zero,r2
   155e8:	1884703a 	and	r2,r3,r2
   155ec:	1007883a 	mov	r3,r2
   155f0:	e0bffc17 	ldw	r2,-16(fp)
   155f4:	10c0020d 	sth	r3,8(r2)
   155f8:	00000306 	br	15608 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   155fc:	e0bfff17 	ldw	r2,-4(fp)
   15600:	00c01c04 	movi	r3,112
   15604:	10c00005 	stb	r3,0(r2)
   15608:	e0bff417 	ldw	r2,-48(fp)
   1560c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15610:	e0bff617 	ldw	r2,-40(fp)
   15614:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   15618:	00005e06 	br	15794 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   1561c:	e0bffc17 	ldw	r2,-16(fp)
   15620:	10c0020b 	ldhu	r3,8(r2)
   15624:	e0bffd0b 	ldhu	r2,-12(fp)
   15628:	1884703a 	and	r2,r3,r2
   1562c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   15630:	e0bff30b 	ldhu	r2,-52(fp)
   15634:	10000d26 	beq	r2,zero,1566c <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15638:	e0bff383 	ldbu	r2,-50(fp)
   1563c:	10800058 	cmpnei	r2,r2,1
   15640:	10000d1e 	bne	r2,zero,15678 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   15644:	e0bffc17 	ldw	r2,-16(fp)
   15648:	1080020b 	ldhu	r2,8(r2)
   1564c:	1007883a 	mov	r3,r2
   15650:	e0bff30b 	ldhu	r2,-52(fp)
   15654:	0084303a 	nor	r2,zero,r2
   15658:	1884703a 	and	r2,r3,r2
   1565c:	1007883a 	mov	r3,r2
   15660:	e0bffc17 	ldw	r2,-16(fp)
   15664:	10c0020d 	sth	r3,8(r2)
   15668:	00000306 	br	15678 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1566c:	e0bfff17 	ldw	r2,-4(fp)
   15670:	00c01c04 	movi	r3,112
   15674:	10c00005 	stb	r3,0(r2)
   15678:	e0bff417 	ldw	r2,-48(fp)
   1567c:	e0bff715 	stw	r2,-36(fp)
   15680:	e0bff717 	ldw	r2,-36(fp)
   15684:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   15688:	00004206 	br	15794 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   1568c:	e0bffc17 	ldw	r2,-16(fp)
   15690:	1080020b 	ldhu	r2,8(r2)
   15694:	0084303a 	nor	r2,zero,r2
   15698:	1007883a 	mov	r3,r2
   1569c:	e0bffd0b 	ldhu	r2,-12(fp)
   156a0:	1884703a 	and	r2,r3,r2
   156a4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   156a8:	e0fff30b 	ldhu	r3,-52(fp)
   156ac:	e0bffd0b 	ldhu	r2,-12(fp)
   156b0:	18800b1e 	bne	r3,r2,156e0 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   156b4:	e0bff383 	ldbu	r2,-50(fp)
   156b8:	10800058 	cmpnei	r2,r2,1
   156bc:	10000b1e 	bne	r2,zero,156ec <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   156c0:	e0bffc17 	ldw	r2,-16(fp)
   156c4:	10c0020b 	ldhu	r3,8(r2)
   156c8:	e0bff30b 	ldhu	r2,-52(fp)
   156cc:	1884b03a 	or	r2,r3,r2
   156d0:	1007883a 	mov	r3,r2
   156d4:	e0bffc17 	ldw	r2,-16(fp)
   156d8:	10c0020d 	sth	r3,8(r2)
   156dc:	00000306 	br	156ec <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   156e0:	e0bfff17 	ldw	r2,-4(fp)
   156e4:	00c01c04 	movi	r3,112
   156e8:	10c00005 	stb	r3,0(r2)
   156ec:	e0bff417 	ldw	r2,-48(fp)
   156f0:	e0bff815 	stw	r2,-32(fp)
   156f4:	e0bff817 	ldw	r2,-32(fp)
   156f8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   156fc:	00002506 	br	15794 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   15700:	e0bffc17 	ldw	r2,-16(fp)
   15704:	1080020b 	ldhu	r2,8(r2)
   15708:	0084303a 	nor	r2,zero,r2
   1570c:	1007883a 	mov	r3,r2
   15710:	e0bffd0b 	ldhu	r2,-12(fp)
   15714:	1884703a 	and	r2,r3,r2
   15718:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   1571c:	e0bff30b 	ldhu	r2,-52(fp)
   15720:	10000b26 	beq	r2,zero,15750 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15724:	e0bff383 	ldbu	r2,-50(fp)
   15728:	10800058 	cmpnei	r2,r2,1
   1572c:	10000b1e 	bne	r2,zero,1575c <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   15730:	e0bffc17 	ldw	r2,-16(fp)
   15734:	10c0020b 	ldhu	r3,8(r2)
   15738:	e0bff30b 	ldhu	r2,-52(fp)
   1573c:	1884b03a 	or	r2,r3,r2
   15740:	1007883a 	mov	r3,r2
   15744:	e0bffc17 	ldw	r2,-16(fp)
   15748:	10c0020d 	sth	r3,8(r2)
   1574c:	00000306 	br	1575c <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   15750:	e0bfff17 	ldw	r2,-4(fp)
   15754:	00c01c04 	movi	r3,112
   15758:	10c00005 	stb	r3,0(r2)
   1575c:	e0bff417 	ldw	r2,-48(fp)
   15760:	e0bff915 	stw	r2,-28(fp)
   15764:	e0bff917 	ldw	r2,-28(fp)
   15768:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1576c:	00000906 	br	15794 <OSFlagAccept+0x2f4>
   15770:	e0bff417 	ldw	r2,-48(fp)
   15774:	e0bffa15 	stw	r2,-24(fp)
   15778:	e0bffa17 	ldw	r2,-24(fp)
   1577c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   15780:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   15784:	e0bfff17 	ldw	r2,-4(fp)
   15788:	00c01bc4 	movi	r3,111
   1578c:	10c00005 	stb	r3,0(r2)
             break;
   15790:	0001883a 	nop
    }
    return (flags_rdy);
   15794:	e0bff30b 	ldhu	r2,-52(fp)
}
   15798:	e037883a 	mov	sp,fp
   1579c:	df000017 	ldw	fp,0(sp)
   157a0:	dec00104 	addi	sp,sp,4
   157a4:	f800283a 	ret

000157a8 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   157a8:	defff804 	addi	sp,sp,-32
   157ac:	df000715 	stw	fp,28(sp)
   157b0:	df000704 	addi	fp,sp,28
   157b4:	2005883a 	mov	r2,r4
   157b8:	e17fff15 	stw	r5,-4(fp)
   157bc:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   157c0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   157c4:	e0bfff17 	ldw	r2,-4(fp)
   157c8:	1000021e 	bne	r2,zero,157d4 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   157cc:	0005883a 	mov	r2,zero
   157d0:	00003306 	br	158a0 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   157d4:	d0a82c03 	ldbu	r2,-24400(gp)
   157d8:	10803fcc 	andi	r2,r2,255
   157dc:	10000526 	beq	r2,zero,157f4 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   157e0:	e0bfff17 	ldw	r2,-4(fp)
   157e4:	00c00404 	movi	r3,16
   157e8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   157ec:	0005883a 	mov	r2,zero
   157f0:	00002b06 	br	158a0 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   157f4:	0005303a 	rdctl	r2,status
   157f8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   157fc:	e0fffd17 	ldw	r3,-12(fp)
   15800:	00bfff84 	movi	r2,-2
   15804:	1884703a 	and	r2,r3,r2
   15808:	1001703a 	wrctl	status,r2
  
  return context;
   1580c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   15810:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   15814:	d0a82f17 	ldw	r2,-24388(gp)
   15818:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   1581c:	e0bffb17 	ldw	r2,-20(fp)
   15820:	10001726 	beq	r2,zero,15880 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   15824:	d0a82f17 	ldw	r2,-24388(gp)
   15828:	10800117 	ldw	r2,4(r2)
   1582c:	d0a82f15 	stw	r2,-24388(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   15830:	e0bffb17 	ldw	r2,-20(fp)
   15834:	00c00144 	movi	r3,5
   15838:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   1583c:	e0bffb17 	ldw	r2,-20(fp)
   15840:	e0fffe0b 	ldhu	r3,-8(fp)
   15844:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   15848:	e0bffb17 	ldw	r2,-20(fp)
   1584c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   15850:	e0bffb17 	ldw	r2,-20(fp)
   15854:	00c00fc4 	movi	r3,63
   15858:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   1585c:	e0bffb17 	ldw	r2,-20(fp)
   15860:	100002c5 	stb	zero,11(r2)
   15864:	e0bff917 	ldw	r2,-28(fp)
   15868:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1586c:	e0bffa17 	ldw	r2,-24(fp)
   15870:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   15874:	e0bfff17 	ldw	r2,-4(fp)
   15878:	10000005 	stb	zero,0(r2)
   1587c:	00000706 	br	1589c <OSFlagCreate+0xf4>
   15880:	e0bff917 	ldw	r2,-28(fp)
   15884:	e0bffc15 	stw	r2,-16(fp)
   15888:	e0bffc17 	ldw	r2,-16(fp)
   1588c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   15890:	e0bfff17 	ldw	r2,-4(fp)
   15894:	00c01c84 	movi	r3,114
   15898:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   1589c:	e0bffb17 	ldw	r2,-20(fp)
}
   158a0:	e037883a 	mov	sp,fp
   158a4:	df000017 	ldw	fp,0(sp)
   158a8:	dec00104 	addi	sp,sp,4
   158ac:	f800283a 	ret

000158b0 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   158b0:	defff204 	addi	sp,sp,-56
   158b4:	dfc00d15 	stw	ra,52(sp)
   158b8:	df000c15 	stw	fp,48(sp)
   158bc:	df000c04 	addi	fp,sp,48
   158c0:	e13ffd15 	stw	r4,-12(fp)
   158c4:	2805883a 	mov	r2,r5
   158c8:	e1bfff15 	stw	r6,-4(fp)
   158cc:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   158d0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   158d4:	e0bfff17 	ldw	r2,-4(fp)
   158d8:	1000021e 	bne	r2,zero,158e4 <OSFlagDel+0x34>
        return (pgrp);
   158dc:	e0bffd17 	ldw	r2,-12(fp)
   158e0:	00008006 	br	15ae4 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   158e4:	e0bffd17 	ldw	r2,-12(fp)
   158e8:	1000051e 	bne	r2,zero,15900 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   158ec:	e0bfff17 	ldw	r2,-4(fp)
   158f0:	00c01b84 	movi	r3,110
   158f4:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   158f8:	e0bffd17 	ldw	r2,-12(fp)
   158fc:	00007906 	br	15ae4 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   15900:	d0a82c03 	ldbu	r2,-24400(gp)
   15904:	10803fcc 	andi	r2,r2,255
   15908:	10000526 	beq	r2,zero,15920 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   1590c:	e0bfff17 	ldw	r2,-4(fp)
   15910:	00c003c4 	movi	r3,15
   15914:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   15918:	e0bffd17 	ldw	r2,-12(fp)
   1591c:	00007106 	br	15ae4 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   15920:	e0bffd17 	ldw	r2,-12(fp)
   15924:	10800003 	ldbu	r2,0(r2)
   15928:	10803fcc 	andi	r2,r2,255
   1592c:	10800160 	cmpeqi	r2,r2,5
   15930:	1000051e 	bne	r2,zero,15948 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
   15934:	e0bfff17 	ldw	r2,-4(fp)
   15938:	00c00044 	movi	r3,1
   1593c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   15940:	e0bffd17 	ldw	r2,-12(fp)
   15944:	00006706 	br	15ae4 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15948:	0005303a 	rdctl	r2,status
   1594c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15950:	e0fffc17 	ldw	r3,-16(fp)
   15954:	00bfff84 	movi	r2,-2
   15958:	1884703a 	and	r2,r3,r2
   1595c:	1001703a 	wrctl	status,r2
  
  return context;
   15960:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   15964:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   15968:	e0bffd17 	ldw	r2,-12(fp)
   1596c:	10800117 	ldw	r2,4(r2)
   15970:	10000326 	beq	r2,zero,15980 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   15974:	00800044 	movi	r2,1
   15978:	e0bff405 	stb	r2,-48(fp)
   1597c:	00000106 	br	15984 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   15980:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   15984:	e0bffe03 	ldbu	r2,-8(fp)
   15988:	10000326 	beq	r2,zero,15998 <OSFlagDel+0xe8>
   1598c:	10800060 	cmpeqi	r2,r2,1
   15990:	1000231e 	bne	r2,zero,15a20 <OSFlagDel+0x170>
   15994:	00004806 	br	15ab8 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   15998:	e0bff403 	ldbu	r2,-48(fp)
   1599c:	1000161e 	bne	r2,zero,159f8 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   159a0:	e0bffd17 	ldw	r2,-12(fp)
   159a4:	00c00fc4 	movi	r3,63
   159a8:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   159ac:	e0bffd17 	ldw	r2,-12(fp)
   159b0:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   159b4:	e0bffd17 	ldw	r2,-12(fp)
   159b8:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   159bc:	d0e82f17 	ldw	r3,-24388(gp)
   159c0:	e0bffd17 	ldw	r2,-12(fp)
   159c4:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   159c8:	e0bffd17 	ldw	r2,-12(fp)
   159cc:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   159d0:	e0bffd17 	ldw	r2,-12(fp)
   159d4:	d0a82f15 	stw	r2,-24388(gp)
   159d8:	e0bff717 	ldw	r2,-36(fp)
   159dc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   159e0:	e0bff817 	ldw	r2,-32(fp)
   159e4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   159e8:	e0bfff17 	ldw	r2,-4(fp)
   159ec:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   159f0:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   159f4:	00003a06 	br	15ae0 <OSFlagDel+0x230>
   159f8:	e0bff717 	ldw	r2,-36(fp)
   159fc:	e0bff915 	stw	r2,-28(fp)
   15a00:	e0bff917 	ldw	r2,-28(fp)
   15a04:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   15a08:	e0bfff17 	ldw	r2,-4(fp)
   15a0c:	00c01244 	movi	r3,73
   15a10:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   15a14:	e0bffd17 	ldw	r2,-12(fp)
   15a18:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   15a1c:	00003006 	br	15ae0 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   15a20:	e0bffd17 	ldw	r2,-12(fp)
   15a24:	10800117 	ldw	r2,4(r2)
   15a28:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   15a2c:	00000606 	br	15a48 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   15a30:	000b883a 	mov	r5,zero
   15a34:	e13ff517 	ldw	r4,-44(fp)
   15a38:	0016a1c0 	call	16a1c <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   15a3c:	e0bff517 	ldw	r2,-44(fp)
   15a40:	10800017 	ldw	r2,0(r2)
   15a44:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   15a48:	e0bff517 	ldw	r2,-44(fp)
   15a4c:	103ff81e 	bne	r2,zero,15a30 <OSFlagDel+0x180>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   15a50:	e0bffd17 	ldw	r2,-12(fp)
   15a54:	00c00fc4 	movi	r3,63
   15a58:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   15a5c:	e0bffd17 	ldw	r2,-12(fp)
   15a60:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   15a64:	e0bffd17 	ldw	r2,-12(fp)
   15a68:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   15a6c:	d0e82f17 	ldw	r3,-24388(gp)
   15a70:	e0bffd17 	ldw	r2,-12(fp)
   15a74:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   15a78:	e0bffd17 	ldw	r2,-12(fp)
   15a7c:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   15a80:	e0bffd17 	ldw	r2,-12(fp)
   15a84:	d0a82f15 	stw	r2,-24388(gp)
   15a88:	e0bff717 	ldw	r2,-36(fp)
   15a8c:	e0bffa15 	stw	r2,-24(fp)
   15a90:	e0bffa17 	ldw	r2,-24(fp)
   15a94:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   15a98:	e0bff403 	ldbu	r2,-48(fp)
   15a9c:	10800058 	cmpnei	r2,r2,1
   15aa0:	1000011e 	bne	r2,zero,15aa8 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   15aa4:	0014c2c0 	call	14c2c <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   15aa8:	e0bfff17 	ldw	r2,-4(fp)
   15aac:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   15ab0:	e03ff615 	stw	zero,-40(fp)
             break;
   15ab4:	00000a06 	br	15ae0 <OSFlagDel+0x230>
   15ab8:	e0bff717 	ldw	r2,-36(fp)
   15abc:	e0bffb15 	stw	r2,-20(fp)
   15ac0:	e0bffb17 	ldw	r2,-20(fp)
   15ac4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   15ac8:	e0bfff17 	ldw	r2,-4(fp)
   15acc:	00c001c4 	movi	r3,7
   15ad0:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   15ad4:	e0bffd17 	ldw	r2,-12(fp)
   15ad8:	e0bff615 	stw	r2,-40(fp)
             break;
   15adc:	0001883a 	nop
    }
    return (pgrp_return);
   15ae0:	e0bff617 	ldw	r2,-40(fp)
}
   15ae4:	e037883a 	mov	sp,fp
   15ae8:	dfc00117 	ldw	ra,4(sp)
   15aec:	df000017 	ldw	fp,0(sp)
   15af0:	dec00204 	addi	sp,sp,8
   15af4:	f800283a 	ret

00015af8 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   15af8:	defff604 	addi	sp,sp,-40
   15afc:	dfc00915 	stw	ra,36(sp)
   15b00:	df000815 	stw	fp,32(sp)
   15b04:	df000804 	addi	fp,sp,32
   15b08:	e13ffd15 	stw	r4,-12(fp)
   15b0c:	e17ffe15 	stw	r5,-8(fp)
   15b10:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15b14:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   15b18:	e0bfff17 	ldw	r2,-4(fp)
   15b1c:	1000021e 	bne	r2,zero,15b28 <OSFlagNameGet+0x30>
        return (0);
   15b20:	0005883a 	mov	r2,zero
   15b24:	00003906 	br	15c0c <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   15b28:	e0bffd17 	ldw	r2,-12(fp)
   15b2c:	1000051e 	bne	r2,zero,15b44 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   15b30:	e0bfff17 	ldw	r2,-4(fp)
   15b34:	00c01b84 	movi	r3,110
   15b38:	10c00005 	stb	r3,0(r2)
        return (0);
   15b3c:	0005883a 	mov	r2,zero
   15b40:	00003206 	br	15c0c <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   15b44:	e0bffe17 	ldw	r2,-8(fp)
   15b48:	1000051e 	bne	r2,zero,15b60 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   15b4c:	e0bfff17 	ldw	r2,-4(fp)
   15b50:	00c00304 	movi	r3,12
   15b54:	10c00005 	stb	r3,0(r2)
        return (0);
   15b58:	0005883a 	mov	r2,zero
   15b5c:	00002b06 	br	15c0c <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   15b60:	d0a82c03 	ldbu	r2,-24400(gp)
   15b64:	10803fcc 	andi	r2,r2,255
   15b68:	10000526 	beq	r2,zero,15b80 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   15b6c:	e0bfff17 	ldw	r2,-4(fp)
   15b70:	00c00444 	movi	r3,17
   15b74:	10c00005 	stb	r3,0(r2)
        return (0);
   15b78:	0005883a 	mov	r2,zero
   15b7c:	00002306 	br	15c0c <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15b80:	0005303a 	rdctl	r2,status
   15b84:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15b88:	e0fffc17 	ldw	r3,-16(fp)
   15b8c:	00bfff84 	movi	r2,-2
   15b90:	1884703a 	and	r2,r3,r2
   15b94:	1001703a 	wrctl	status,r2
  
  return context;
   15b98:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   15b9c:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   15ba0:	e0bffd17 	ldw	r2,-12(fp)
   15ba4:	10800003 	ldbu	r2,0(r2)
   15ba8:	10803fcc 	andi	r2,r2,255
   15bac:	10800160 	cmpeqi	r2,r2,5
   15bb0:	1000091e 	bne	r2,zero,15bd8 <OSFlagNameGet+0xe0>
   15bb4:	e0bff817 	ldw	r2,-32(fp)
   15bb8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15bbc:	e0bff917 	ldw	r2,-28(fp)
   15bc0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   15bc4:	e0bfff17 	ldw	r2,-4(fp)
   15bc8:	00c00044 	movi	r3,1
   15bcc:	10c00005 	stb	r3,0(r2)
        return (0);
   15bd0:	0005883a 	mov	r2,zero
   15bd4:	00000d06 	br	15c0c <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   15bd8:	e0bffd17 	ldw	r2,-12(fp)
   15bdc:	10800284 	addi	r2,r2,10
   15be0:	100b883a 	mov	r5,r2
   15be4:	e13ffe17 	ldw	r4,-8(fp)
   15be8:	0014d700 	call	14d70 <OS_StrCopy>
   15bec:	e0bffb05 	stb	r2,-20(fp)
   15bf0:	e0bff817 	ldw	r2,-32(fp)
   15bf4:	e0bffa15 	stw	r2,-24(fp)
   15bf8:	e0bffa17 	ldw	r2,-24(fp)
   15bfc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   15c00:	e0bfff17 	ldw	r2,-4(fp)
   15c04:	10000005 	stb	zero,0(r2)
    return (len);
   15c08:	e0bffb03 	ldbu	r2,-20(fp)
}
   15c0c:	e037883a 	mov	sp,fp
   15c10:	dfc00117 	ldw	ra,4(sp)
   15c14:	df000017 	ldw	fp,0(sp)
   15c18:	dec00204 	addi	sp,sp,8
   15c1c:	f800283a 	ret

00015c20 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   15c20:	defff504 	addi	sp,sp,-44
   15c24:	dfc00a15 	stw	ra,40(sp)
   15c28:	df000915 	stw	fp,36(sp)
   15c2c:	df000904 	addi	fp,sp,36
   15c30:	e13ffd15 	stw	r4,-12(fp)
   15c34:	e17ffe15 	stw	r5,-8(fp)
   15c38:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15c3c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   15c40:	e0bfff17 	ldw	r2,-4(fp)
   15c44:	10004326 	beq	r2,zero,15d54 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   15c48:	e0bffd17 	ldw	r2,-12(fp)
   15c4c:	1000041e 	bne	r2,zero,15c60 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   15c50:	e0bfff17 	ldw	r2,-4(fp)
   15c54:	00c01b84 	movi	r3,110
   15c58:	10c00005 	stb	r3,0(r2)
        return;
   15c5c:	00003e06 	br	15d58 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   15c60:	e0bffe17 	ldw	r2,-8(fp)
   15c64:	1000041e 	bne	r2,zero,15c78 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   15c68:	e0bfff17 	ldw	r2,-4(fp)
   15c6c:	00c00304 	movi	r3,12
   15c70:	10c00005 	stb	r3,0(r2)
        return;
   15c74:	00003806 	br	15d58 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   15c78:	d0a82c03 	ldbu	r2,-24400(gp)
   15c7c:	10803fcc 	andi	r2,r2,255
   15c80:	10000426 	beq	r2,zero,15c94 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   15c84:	e0bfff17 	ldw	r2,-4(fp)
   15c88:	00c00484 	movi	r3,18
   15c8c:	10c00005 	stb	r3,0(r2)
        return;
   15c90:	00003106 	br	15d58 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15c94:	0005303a 	rdctl	r2,status
   15c98:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15c9c:	e0fffc17 	ldw	r3,-16(fp)
   15ca0:	00bfff84 	movi	r2,-2
   15ca4:	1884703a 	and	r2,r3,r2
   15ca8:	1001703a 	wrctl	status,r2
  
  return context;
   15cac:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   15cb0:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   15cb4:	e0bffd17 	ldw	r2,-12(fp)
   15cb8:	10800003 	ldbu	r2,0(r2)
   15cbc:	10803fcc 	andi	r2,r2,255
   15cc0:	10800160 	cmpeqi	r2,r2,5
   15cc4:	1000081e 	bne	r2,zero,15ce8 <OSFlagNameSet+0xc8>
   15cc8:	e0bff717 	ldw	r2,-36(fp)
   15ccc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15cd0:	e0bff817 	ldw	r2,-32(fp)
   15cd4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   15cd8:	e0bfff17 	ldw	r2,-4(fp)
   15cdc:	00c00044 	movi	r3,1
   15ce0:	10c00005 	stb	r3,0(r2)
        return;
   15ce4:	00001c06 	br	15d58 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   15ce8:	e13ffe17 	ldw	r4,-8(fp)
   15cec:	0014de40 	call	14de4 <OS_StrLen>
   15cf0:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   15cf4:	e0bffa03 	ldbu	r2,-24(fp)
   15cf8:	10800830 	cmpltui	r2,r2,32
   15cfc:	1000081e 	bne	r2,zero,15d20 <OSFlagNameSet+0x100>
   15d00:	e0bff717 	ldw	r2,-36(fp)
   15d04:	e0bff915 	stw	r2,-28(fp)
   15d08:	e0bff917 	ldw	r2,-28(fp)
   15d0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   15d10:	e0bfff17 	ldw	r2,-4(fp)
   15d14:	00c01cc4 	movi	r3,115
   15d18:	10c00005 	stb	r3,0(r2)
        return;
   15d1c:	00000e06 	br	15d58 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   15d20:	e0bffd17 	ldw	r2,-12(fp)
   15d24:	10800284 	addi	r2,r2,10
   15d28:	e17ffe17 	ldw	r5,-8(fp)
   15d2c:	1009883a 	mov	r4,r2
   15d30:	0014d700 	call	14d70 <OS_StrCopy>
   15d34:	e0bff717 	ldw	r2,-36(fp)
   15d38:	e0bffb15 	stw	r2,-20(fp)
   15d3c:	e0bffb17 	ldw	r2,-20(fp)
   15d40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   15d44:	e0bfff17 	ldw	r2,-4(fp)
   15d48:	10000005 	stb	zero,0(r2)
    return;
   15d4c:	0001883a 	nop
   15d50:	00000106 	br	15d58 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   15d54:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
   15d58:	e037883a 	mov	sp,fp
   15d5c:	dfc00117 	ldw	ra,4(sp)
   15d60:	df000017 	ldw	fp,0(sp)
   15d64:	dec00204 	addi	sp,sp,8
   15d68:	f800283a 	ret

00015d6c <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   15d6c:	deffe104 	addi	sp,sp,-124
   15d70:	dfc01e15 	stw	ra,120(sp)
   15d74:	df001d15 	stw	fp,116(sp)
   15d78:	df001d04 	addi	fp,sp,116
   15d7c:	e13ffc15 	stw	r4,-16(fp)
   15d80:	2809883a 	mov	r4,r5
   15d84:	3007883a 	mov	r3,r6
   15d88:	3805883a 	mov	r2,r7
   15d8c:	e13ffd0d 	sth	r4,-12(fp)
   15d90:	e0fffe05 	stb	r3,-8(fp)
   15d94:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   15d98:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   15d9c:	e0800217 	ldw	r2,8(fp)
   15da0:	1000021e 	bne	r2,zero,15dac <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   15da4:	0005883a 	mov	r2,zero
   15da8:	00015906 	br	16310 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   15dac:	e0bffc17 	ldw	r2,-16(fp)
   15db0:	1000051e 	bne	r2,zero,15dc8 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   15db4:	e0800217 	ldw	r2,8(fp)
   15db8:	00c01b84 	movi	r3,110
   15dbc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15dc0:	0005883a 	mov	r2,zero
   15dc4:	00015206 	br	16310 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   15dc8:	d0a82c03 	ldbu	r2,-24400(gp)
   15dcc:	10803fcc 	andi	r2,r2,255
   15dd0:	10000526 	beq	r2,zero,15de8 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   15dd4:	e0800217 	ldw	r2,8(fp)
   15dd8:	00c00084 	movi	r3,2
   15ddc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15de0:	0005883a 	mov	r2,zero
   15de4:	00014a06 	br	16310 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   15de8:	d0a81e03 	ldbu	r2,-24456(gp)
   15dec:	10803fcc 	andi	r2,r2,255
   15df0:	10000526 	beq	r2,zero,15e08 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   15df4:	e0800217 	ldw	r2,8(fp)
   15df8:	00c00344 	movi	r3,13
   15dfc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15e00:	0005883a 	mov	r2,zero
   15e04:	00014206 	br	16310 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   15e08:	e0bffc17 	ldw	r2,-16(fp)
   15e0c:	10800003 	ldbu	r2,0(r2)
   15e10:	10803fcc 	andi	r2,r2,255
   15e14:	10800160 	cmpeqi	r2,r2,5
   15e18:	1000051e 	bne	r2,zero,15e30 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
   15e1c:	e0800217 	ldw	r2,8(fp)
   15e20:	00c00044 	movi	r3,1
   15e24:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15e28:	0005883a 	mov	r2,zero
   15e2c:	00013806 	br	16310 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   15e30:	e0fffe03 	ldbu	r3,-8(fp)
   15e34:	00bfe004 	movi	r2,-128
   15e38:	1884703a 	and	r2,r3,r2
   15e3c:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   15e40:	e0bfe603 	ldbu	r2,-104(fp)
   15e44:	10000626 	beq	r2,zero,15e60 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   15e48:	e0bffe03 	ldbu	r2,-8(fp)
   15e4c:	10801fcc 	andi	r2,r2,127
   15e50:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   15e54:	00800044 	movi	r2,1
   15e58:	e0bfe405 	stb	r2,-112(fp)
   15e5c:	00000106 	br	15e64 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
   15e60:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15e64:	0005303a 	rdctl	r2,status
   15e68:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15e6c:	e0fff617 	ldw	r3,-40(fp)
   15e70:	00bfff84 	movi	r2,-2
   15e74:	1884703a 	and	r2,r3,r2
   15e78:	1001703a 	wrctl	status,r2
  
  return context;
   15e7c:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   15e80:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
   15e84:	e0bffe03 	ldbu	r2,-8(fp)
   15e88:	10c00060 	cmpeqi	r3,r2,1
   15e8c:	1800921e 	bne	r3,zero,160d8 <OSFlagPend+0x36c>
   15e90:	10c00088 	cmpgei	r3,r2,2
   15e94:	1800021e 	bne	r3,zero,15ea0 <OSFlagPend+0x134>
   15e98:	10006126 	beq	r2,zero,16020 <OSFlagPend+0x2b4>
   15e9c:	0000bb06 	br	1618c <OSFlagPend+0x420>
   15ea0:	10c000a0 	cmpeqi	r3,r2,2
   15ea4:	1800031e 	bne	r3,zero,15eb4 <OSFlagPend+0x148>
   15ea8:	108000e0 	cmpeqi	r2,r2,3
   15eac:	10002f1e 	bne	r2,zero,15f6c <OSFlagPend+0x200>
   15eb0:	0000b606 	br	1618c <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   15eb4:	e0bffc17 	ldw	r2,-16(fp)
   15eb8:	10c0020b 	ldhu	r3,8(r2)
   15ebc:	e0bffd0b 	ldhu	r2,-12(fp)
   15ec0:	1884703a 	and	r2,r3,r2
   15ec4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   15ec8:	e0ffe80b 	ldhu	r3,-96(fp)
   15ecc:	e0bffd0b 	ldhu	r2,-12(fp)
   15ed0:	1880171e 	bne	r3,r2,15f30 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15ed4:	e0bfe403 	ldbu	r2,-112(fp)
   15ed8:	10800058 	cmpnei	r2,r2,1
   15edc:	1000091e 	bne	r2,zero,15f04 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   15ee0:	e0bffc17 	ldw	r2,-16(fp)
   15ee4:	1080020b 	ldhu	r2,8(r2)
   15ee8:	1007883a 	mov	r3,r2
   15eec:	e0bfe80b 	ldhu	r2,-96(fp)
   15ef0:	0084303a 	nor	r2,zero,r2
   15ef4:	1884703a 	and	r2,r3,r2
   15ef8:	1007883a 	mov	r3,r2
   15efc:	e0bffc17 	ldw	r2,-16(fp)
   15f00:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   15f04:	d0a82d17 	ldw	r2,-24396(gp)
   15f08:	e0ffe80b 	ldhu	r3,-96(fp)
   15f0c:	10c00b0d 	sth	r3,44(r2)
   15f10:	e0bfe517 	ldw	r2,-108(fp)
   15f14:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15f18:	e0bfe717 	ldw	r2,-100(fp)
   15f1c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   15f20:	e0800217 	ldw	r2,8(fp)
   15f24:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   15f28:	e0bfe80b 	ldhu	r2,-96(fp)
   15f2c:	0000f806 	br	16310 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   15f30:	e13ffd0b 	ldhu	r4,-12(fp)
   15f34:	e17ffe03 	ldbu	r5,-8(fp)
   15f38:	e0bfff0b 	ldhu	r2,-4(fp)
   15f3c:	e0fff704 	addi	r3,fp,-36
   15f40:	d8800015 	stw	r2,0(sp)
   15f44:	280f883a 	mov	r7,r5
   15f48:	200d883a 	mov	r6,r4
   15f4c:	180b883a 	mov	r5,r3
   15f50:	e13ffc17 	ldw	r4,-16(fp)
   15f54:	00167dc0 	call	167dc <OS_FlagBlock>
   15f58:	e0bfe517 	ldw	r2,-108(fp)
   15f5c:	e0bfe915 	stw	r2,-92(fp)
   15f60:	e0bfe917 	ldw	r2,-92(fp)
   15f64:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   15f68:	00009206 	br	161b4 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   15f6c:	e0bffc17 	ldw	r2,-16(fp)
   15f70:	10c0020b 	ldhu	r3,8(r2)
   15f74:	e0bffd0b 	ldhu	r2,-12(fp)
   15f78:	1884703a 	and	r2,r3,r2
   15f7c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   15f80:	e0bfe80b 	ldhu	r2,-96(fp)
   15f84:	10001726 	beq	r2,zero,15fe4 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15f88:	e0bfe403 	ldbu	r2,-112(fp)
   15f8c:	10800058 	cmpnei	r2,r2,1
   15f90:	1000091e 	bne	r2,zero,15fb8 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   15f94:	e0bffc17 	ldw	r2,-16(fp)
   15f98:	1080020b 	ldhu	r2,8(r2)
   15f9c:	1007883a 	mov	r3,r2
   15fa0:	e0bfe80b 	ldhu	r2,-96(fp)
   15fa4:	0084303a 	nor	r2,zero,r2
   15fa8:	1884703a 	and	r2,r3,r2
   15fac:	1007883a 	mov	r3,r2
   15fb0:	e0bffc17 	ldw	r2,-16(fp)
   15fb4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   15fb8:	d0a82d17 	ldw	r2,-24396(gp)
   15fbc:	e0ffe80b 	ldhu	r3,-96(fp)
   15fc0:	10c00b0d 	sth	r3,44(r2)
   15fc4:	e0bfe517 	ldw	r2,-108(fp)
   15fc8:	e0bfea15 	stw	r2,-88(fp)
   15fcc:	e0bfea17 	ldw	r2,-88(fp)
   15fd0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   15fd4:	e0800217 	ldw	r2,8(fp)
   15fd8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   15fdc:	e0bfe80b 	ldhu	r2,-96(fp)
   15fe0:	0000cb06 	br	16310 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   15fe4:	e13ffd0b 	ldhu	r4,-12(fp)
   15fe8:	e17ffe03 	ldbu	r5,-8(fp)
   15fec:	e0bfff0b 	ldhu	r2,-4(fp)
   15ff0:	e0fff704 	addi	r3,fp,-36
   15ff4:	d8800015 	stw	r2,0(sp)
   15ff8:	280f883a 	mov	r7,r5
   15ffc:	200d883a 	mov	r6,r4
   16000:	180b883a 	mov	r5,r3
   16004:	e13ffc17 	ldw	r4,-16(fp)
   16008:	00167dc0 	call	167dc <OS_FlagBlock>
   1600c:	e0bfe517 	ldw	r2,-108(fp)
   16010:	e0bfeb15 	stw	r2,-84(fp)
   16014:	e0bfeb17 	ldw	r2,-84(fp)
   16018:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1601c:	00006506 	br	161b4 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   16020:	e0bffc17 	ldw	r2,-16(fp)
   16024:	1080020b 	ldhu	r2,8(r2)
   16028:	0084303a 	nor	r2,zero,r2
   1602c:	1007883a 	mov	r3,r2
   16030:	e0bffd0b 	ldhu	r2,-12(fp)
   16034:	1884703a 	and	r2,r3,r2
   16038:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1603c:	e0ffe80b 	ldhu	r3,-96(fp)
   16040:	e0bffd0b 	ldhu	r2,-12(fp)
   16044:	1880151e 	bne	r3,r2,1609c <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   16048:	e0bfe403 	ldbu	r2,-112(fp)
   1604c:	10800058 	cmpnei	r2,r2,1
   16050:	1000071e 	bne	r2,zero,16070 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   16054:	e0bffc17 	ldw	r2,-16(fp)
   16058:	10c0020b 	ldhu	r3,8(r2)
   1605c:	e0bfe80b 	ldhu	r2,-96(fp)
   16060:	1884b03a 	or	r2,r3,r2
   16064:	1007883a 	mov	r3,r2
   16068:	e0bffc17 	ldw	r2,-16(fp)
   1606c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   16070:	d0a82d17 	ldw	r2,-24396(gp)
   16074:	e0ffe80b 	ldhu	r3,-96(fp)
   16078:	10c00b0d 	sth	r3,44(r2)
   1607c:	e0bfe517 	ldw	r2,-108(fp)
   16080:	e0bfec15 	stw	r2,-80(fp)
   16084:	e0bfec17 	ldw	r2,-80(fp)
   16088:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1608c:	e0800217 	ldw	r2,8(fp)
   16090:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   16094:	e0bfe80b 	ldhu	r2,-96(fp)
   16098:	00009d06 	br	16310 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1609c:	e13ffd0b 	ldhu	r4,-12(fp)
   160a0:	e17ffe03 	ldbu	r5,-8(fp)
   160a4:	e0bfff0b 	ldhu	r2,-4(fp)
   160a8:	e0fff704 	addi	r3,fp,-36
   160ac:	d8800015 	stw	r2,0(sp)
   160b0:	280f883a 	mov	r7,r5
   160b4:	200d883a 	mov	r6,r4
   160b8:	180b883a 	mov	r5,r3
   160bc:	e13ffc17 	ldw	r4,-16(fp)
   160c0:	00167dc0 	call	167dc <OS_FlagBlock>
   160c4:	e0bfe517 	ldw	r2,-108(fp)
   160c8:	e0bfed15 	stw	r2,-76(fp)
   160cc:	e0bfed17 	ldw	r2,-76(fp)
   160d0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   160d4:	00003706 	br	161b4 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   160d8:	e0bffc17 	ldw	r2,-16(fp)
   160dc:	1080020b 	ldhu	r2,8(r2)
   160e0:	0084303a 	nor	r2,zero,r2
   160e4:	1007883a 	mov	r3,r2
   160e8:	e0bffd0b 	ldhu	r2,-12(fp)
   160ec:	1884703a 	and	r2,r3,r2
   160f0:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   160f4:	e0bfe80b 	ldhu	r2,-96(fp)
   160f8:	10001526 	beq	r2,zero,16150 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   160fc:	e0bfe403 	ldbu	r2,-112(fp)
   16100:	10800058 	cmpnei	r2,r2,1
   16104:	1000071e 	bne	r2,zero,16124 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   16108:	e0bffc17 	ldw	r2,-16(fp)
   1610c:	10c0020b 	ldhu	r3,8(r2)
   16110:	e0bfe80b 	ldhu	r2,-96(fp)
   16114:	1884b03a 	or	r2,r3,r2
   16118:	1007883a 	mov	r3,r2
   1611c:	e0bffc17 	ldw	r2,-16(fp)
   16120:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   16124:	d0a82d17 	ldw	r2,-24396(gp)
   16128:	e0ffe80b 	ldhu	r3,-96(fp)
   1612c:	10c00b0d 	sth	r3,44(r2)
   16130:	e0bfe517 	ldw	r2,-108(fp)
   16134:	e0bfee15 	stw	r2,-72(fp)
   16138:	e0bfee17 	ldw	r2,-72(fp)
   1613c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   16140:	e0800217 	ldw	r2,8(fp)
   16144:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   16148:	e0bfe80b 	ldhu	r2,-96(fp)
   1614c:	00007006 	br	16310 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   16150:	e13ffd0b 	ldhu	r4,-12(fp)
   16154:	e17ffe03 	ldbu	r5,-8(fp)
   16158:	e0bfff0b 	ldhu	r2,-4(fp)
   1615c:	e0fff704 	addi	r3,fp,-36
   16160:	d8800015 	stw	r2,0(sp)
   16164:	280f883a 	mov	r7,r5
   16168:	200d883a 	mov	r6,r4
   1616c:	180b883a 	mov	r5,r3
   16170:	e13ffc17 	ldw	r4,-16(fp)
   16174:	00167dc0 	call	167dc <OS_FlagBlock>
   16178:	e0bfe517 	ldw	r2,-108(fp)
   1617c:	e0bfef15 	stw	r2,-68(fp)
   16180:	e0bfef17 	ldw	r2,-68(fp)
   16184:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   16188:	00000a06 	br	161b4 <OSFlagPend+0x448>
   1618c:	e0bfe517 	ldw	r2,-108(fp)
   16190:	e0bff015 	stw	r2,-64(fp)
   16194:	e0bff017 	ldw	r2,-64(fp)
   16198:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   1619c:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   161a0:	e0800217 	ldw	r2,8(fp)
   161a4:	00c01bc4 	movi	r3,111
   161a8:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   161ac:	e0bfe80b 	ldhu	r2,-96(fp)
   161b0:	00005706 	br	16310 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   161b4:	0014c2c0 	call	14c2c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   161b8:	0005303a 	rdctl	r2,status
   161bc:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   161c0:	e0fff117 	ldw	r3,-60(fp)
   161c4:	00bfff84 	movi	r2,-2
   161c8:	1884703a 	and	r2,r3,r2
   161cc:	1001703a 	wrctl	status,r2
  
  return context;
   161d0:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
   161d4:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   161d8:	d0a82d17 	ldw	r2,-24396(gp)
   161dc:	10800c43 	ldbu	r2,49(r2)
   161e0:	10803fcc 	andi	r2,r2,255
   161e4:	10001c26 	beq	r2,zero,16258 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   161e8:	d0a82d17 	ldw	r2,-24396(gp)
   161ec:	10800c43 	ldbu	r2,49(r2)
   161f0:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   161f4:	d0a82d17 	ldw	r2,-24396(gp)
   161f8:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   161fc:	e0bff704 	addi	r2,fp,-36
   16200:	1009883a 	mov	r4,r2
   16204:	0016b100 	call	16b10 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   16208:	d0a82d17 	ldw	r2,-24396(gp)
   1620c:	10000c05 	stb	zero,48(r2)
   16210:	e0bfe517 	ldw	r2,-108(fp)
   16214:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16218:	e0bff217 	ldw	r2,-56(fp)
   1621c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   16220:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
   16224:	e0bff303 	ldbu	r2,-52(fp)
   16228:	108000a0 	cmpeqi	r2,r2,2
   1622c:	10000426 	beq	r2,zero,16240 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   16230:	e0800217 	ldw	r2,8(fp)
   16234:	00c00384 	movi	r3,14
   16238:	10c00005 	stb	r3,0(r2)
                 break;
   1623c:	00000406 	br	16250 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   16240:	e0800217 	ldw	r2,8(fp)
   16244:	00c00284 	movi	r3,10
   16248:	10c00005 	stb	r3,0(r2)
                 break;
   1624c:	0001883a 	nop
        }
        return (flags_rdy);
   16250:	e0bfe80b 	ldhu	r2,-96(fp)
   16254:	00002e06 	br	16310 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   16258:	d0a82d17 	ldw	r2,-24396(gp)
   1625c:	10800b0b 	ldhu	r2,44(r2)
   16260:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   16264:	e0bfe403 	ldbu	r2,-112(fp)
   16268:	10800058 	cmpnei	r2,r2,1
   1626c:	1000211e 	bne	r2,zero,162f4 <OSFlagPend+0x588>
        switch (wait_type) {
   16270:	e0bffe03 	ldbu	r2,-8(fp)
   16274:	10001616 	blt	r2,zero,162d0 <OSFlagPend+0x564>
   16278:	10c00090 	cmplti	r3,r2,2
   1627c:	18000c1e 	bne	r3,zero,162b0 <OSFlagPend+0x544>
   16280:	10800108 	cmpgei	r2,r2,4
   16284:	1000121e 	bne	r2,zero,162d0 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   16288:	e0bffc17 	ldw	r2,-16(fp)
   1628c:	1080020b 	ldhu	r2,8(r2)
   16290:	1007883a 	mov	r3,r2
   16294:	e0bfe80b 	ldhu	r2,-96(fp)
   16298:	0084303a 	nor	r2,zero,r2
   1629c:	1884703a 	and	r2,r3,r2
   162a0:	1007883a 	mov	r3,r2
   162a4:	e0bffc17 	ldw	r2,-16(fp)
   162a8:	10c0020d 	sth	r3,8(r2)
                 break;
   162ac:	00001106 	br	162f4 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   162b0:	e0bffc17 	ldw	r2,-16(fp)
   162b4:	10c0020b 	ldhu	r3,8(r2)
   162b8:	e0bfe80b 	ldhu	r2,-96(fp)
   162bc:	1884b03a 	or	r2,r3,r2
   162c0:	1007883a 	mov	r3,r2
   162c4:	e0bffc17 	ldw	r2,-16(fp)
   162c8:	10c0020d 	sth	r3,8(r2)
                 break;
   162cc:	00000906 	br	162f4 <OSFlagPend+0x588>
   162d0:	e0bfe517 	ldw	r2,-108(fp)
   162d4:	e0bff415 	stw	r2,-48(fp)
   162d8:	e0bff417 	ldw	r2,-48(fp)
   162dc:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   162e0:	e0800217 	ldw	r2,8(fp)
   162e4:	00c01bc4 	movi	r3,111
   162e8:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   162ec:	0005883a 	mov	r2,zero
   162f0:	00000706 	br	16310 <OSFlagPend+0x5a4>
   162f4:	e0bfe517 	ldw	r2,-108(fp)
   162f8:	e0bff515 	stw	r2,-44(fp)
   162fc:	e0bff517 	ldw	r2,-44(fp)
   16300:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   16304:	e0800217 	ldw	r2,8(fp)
   16308:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   1630c:	e0bfe80b 	ldhu	r2,-96(fp)
}
   16310:	e037883a 	mov	sp,fp
   16314:	dfc00117 	ldw	ra,4(sp)
   16318:	df000017 	ldw	fp,0(sp)
   1631c:	dec00204 	addi	sp,sp,8
   16320:	f800283a 	ret

00016324 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   16324:	defffb04 	addi	sp,sp,-20
   16328:	df000415 	stw	fp,16(sp)
   1632c:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   16330:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16334:	0005303a 	rdctl	r2,status
   16338:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1633c:	e0fffe17 	ldw	r3,-8(fp)
   16340:	00bfff84 	movi	r2,-2
   16344:	1884703a 	and	r2,r3,r2
   16348:	1001703a 	wrctl	status,r2
  
  return context;
   1634c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   16350:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   16354:	d0a82d17 	ldw	r2,-24396(gp)
   16358:	10800b0b 	ldhu	r2,44(r2)
   1635c:	e0bffd0d 	sth	r2,-12(fp)
   16360:	e0bffc17 	ldw	r2,-16(fp)
   16364:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16368:	e0bfff17 	ldw	r2,-4(fp)
   1636c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   16370:	e0bffd0b 	ldhu	r2,-12(fp)
}
   16374:	e037883a 	mov	sp,fp
   16378:	df000017 	ldw	fp,0(sp)
   1637c:	dec00104 	addi	sp,sp,4
   16380:	f800283a 	ret

00016384 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   16384:	deffef04 	addi	sp,sp,-68
   16388:	dfc01015 	stw	ra,64(sp)
   1638c:	df000f15 	stw	fp,60(sp)
   16390:	df000f04 	addi	fp,sp,60
   16394:	e13ffc15 	stw	r4,-16(fp)
   16398:	2807883a 	mov	r3,r5
   1639c:	3005883a 	mov	r2,r6
   163a0:	e1ffff15 	stw	r7,-4(fp)
   163a4:	e0fffd0d 	sth	r3,-12(fp)
   163a8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   163ac:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   163b0:	e0bfff17 	ldw	r2,-4(fp)
   163b4:	1000021e 	bne	r2,zero,163c0 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   163b8:	0005883a 	mov	r2,zero
   163bc:	0000d106 	br	16704 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   163c0:	e0bffc17 	ldw	r2,-16(fp)
   163c4:	1000051e 	bne	r2,zero,163dc <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   163c8:	e0bfff17 	ldw	r2,-4(fp)
   163cc:	00c01b84 	movi	r3,110
   163d0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   163d4:	0005883a 	mov	r2,zero
   163d8:	0000ca06 	br	16704 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   163dc:	e0bffc17 	ldw	r2,-16(fp)
   163e0:	10800003 	ldbu	r2,0(r2)
   163e4:	10803fcc 	andi	r2,r2,255
   163e8:	10800160 	cmpeqi	r2,r2,5
   163ec:	1000051e 	bne	r2,zero,16404 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   163f0:	e0bfff17 	ldw	r2,-4(fp)
   163f4:	00c00044 	movi	r3,1
   163f8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   163fc:	0005883a 	mov	r2,zero
   16400:	0000c006 	br	16704 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16404:	0005303a 	rdctl	r2,status
   16408:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1640c:	e0fffb17 	ldw	r3,-20(fp)
   16410:	00bfff84 	movi	r2,-2
   16414:	1884703a 	and	r2,r3,r2
   16418:	1001703a 	wrctl	status,r2
  
  return context;
   1641c:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   16420:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   16424:	e0bffe03 	ldbu	r2,-8(fp)
   16428:	10000326 	beq	r2,zero,16438 <OSFlagPost+0xb4>
   1642c:	10800060 	cmpeqi	r2,r2,1
   16430:	10000b1e 	bne	r2,zero,16460 <OSFlagPost+0xdc>
   16434:	00001206 	br	16480 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   16438:	e0bffc17 	ldw	r2,-16(fp)
   1643c:	1080020b 	ldhu	r2,8(r2)
   16440:	1007883a 	mov	r3,r2
   16444:	e0bffd0b 	ldhu	r2,-12(fp)
   16448:	0084303a 	nor	r2,zero,r2
   1644c:	1884703a 	and	r2,r3,r2
   16450:	1007883a 	mov	r3,r2
   16454:	e0bffc17 	ldw	r2,-16(fp)
   16458:	10c0020d 	sth	r3,8(r2)
             break;
   1645c:	00001106 	br	164a4 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   16460:	e0bffc17 	ldw	r2,-16(fp)
   16464:	10c0020b 	ldhu	r3,8(r2)
   16468:	e0bffd0b 	ldhu	r2,-12(fp)
   1646c:	1884b03a 	or	r2,r3,r2
   16470:	1007883a 	mov	r3,r2
   16474:	e0bffc17 	ldw	r2,-16(fp)
   16478:	10c0020d 	sth	r3,8(r2)
             break;
   1647c:	00000906 	br	164a4 <OSFlagPost+0x120>
   16480:	e0bff317 	ldw	r2,-52(fp)
   16484:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16488:	e0bff417 	ldw	r2,-48(fp)
   1648c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   16490:	e0bfff17 	ldw	r2,-4(fp)
   16494:	00c01c44 	movi	r3,113
   16498:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   1649c:	0005883a 	mov	r2,zero
   164a0:	00009806 	br	16704 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   164a4:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   164a8:	e0bffc17 	ldw	r2,-16(fp)
   164ac:	10800117 	ldw	r2,4(r2)
   164b0:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   164b4:	00007706 	br	16694 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
   164b8:	e0bff117 	ldw	r2,-60(fp)
   164bc:	10800483 	ldbu	r2,18(r2)
   164c0:	10803fcc 	andi	r2,r2,255
   164c4:	10c00060 	cmpeqi	r3,r2,1
   164c8:	18004a1e 	bne	r3,zero,165f4 <OSFlagPost+0x270>
   164cc:	10c00088 	cmpgei	r3,r2,2
   164d0:	1800021e 	bne	r3,zero,164dc <OSFlagPost+0x158>
   164d4:	10002f26 	beq	r2,zero,16594 <OSFlagPost+0x210>
   164d8:	00005b06 	br	16648 <OSFlagPost+0x2c4>
   164dc:	10c000a0 	cmpeqi	r3,r2,2
   164e0:	1800031e 	bne	r3,zero,164f0 <OSFlagPost+0x16c>
   164e4:	108000e0 	cmpeqi	r2,r2,3
   164e8:	1000171e 	bne	r2,zero,16548 <OSFlagPost+0x1c4>
   164ec:	00005606 	br	16648 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   164f0:	e0bffc17 	ldw	r2,-16(fp)
   164f4:	10c0020b 	ldhu	r3,8(r2)
   164f8:	e0bff117 	ldw	r2,-60(fp)
   164fc:	1080040b 	ldhu	r2,16(r2)
   16500:	1884703a 	and	r2,r3,r2
   16504:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   16508:	e0bff117 	ldw	r2,-60(fp)
   1650c:	1080040b 	ldhu	r2,16(r2)
   16510:	10ffffcc 	andi	r3,r2,65535
   16514:	e0bff60b 	ldhu	r2,-40(fp)
   16518:	1880541e 	bne	r3,r2,1666c <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1651c:	e0bff60b 	ldhu	r2,-40(fp)
   16520:	100b883a 	mov	r5,r2
   16524:	e13ff117 	ldw	r4,-60(fp)
   16528:	0016a1c0 	call	16a1c <OS_FlagTaskRdy>
   1652c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   16530:	e0bff683 	ldbu	r2,-38(fp)
   16534:	10800058 	cmpnei	r2,r2,1
   16538:	10004c1e 	bne	r2,zero,1666c <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1653c:	00800044 	movi	r2,1
   16540:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   16544:	00004906 	br	1666c <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   16548:	e0bffc17 	ldw	r2,-16(fp)
   1654c:	10c0020b 	ldhu	r3,8(r2)
   16550:	e0bff117 	ldw	r2,-60(fp)
   16554:	1080040b 	ldhu	r2,16(r2)
   16558:	1884703a 	and	r2,r3,r2
   1655c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   16560:	e0bff60b 	ldhu	r2,-40(fp)
   16564:	10004326 	beq	r2,zero,16674 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   16568:	e0bff60b 	ldhu	r2,-40(fp)
   1656c:	100b883a 	mov	r5,r2
   16570:	e13ff117 	ldw	r4,-60(fp)
   16574:	0016a1c0 	call	16a1c <OS_FlagTaskRdy>
   16578:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   1657c:	e0bff683 	ldbu	r2,-38(fp)
   16580:	10800058 	cmpnei	r2,r2,1
   16584:	10003b1e 	bne	r2,zero,16674 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   16588:	00800044 	movi	r2,1
   1658c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   16590:	00003806 	br	16674 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   16594:	e0bffc17 	ldw	r2,-16(fp)
   16598:	1080020b 	ldhu	r2,8(r2)
   1659c:	0084303a 	nor	r2,zero,r2
   165a0:	1007883a 	mov	r3,r2
   165a4:	e0bff117 	ldw	r2,-60(fp)
   165a8:	1080040b 	ldhu	r2,16(r2)
   165ac:	1884703a 	and	r2,r3,r2
   165b0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   165b4:	e0bff117 	ldw	r2,-60(fp)
   165b8:	1080040b 	ldhu	r2,16(r2)
   165bc:	10ffffcc 	andi	r3,r2,65535
   165c0:	e0bff60b 	ldhu	r2,-40(fp)
   165c4:	18802d1e 	bne	r3,r2,1667c <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   165c8:	e0bff60b 	ldhu	r2,-40(fp)
   165cc:	100b883a 	mov	r5,r2
   165d0:	e13ff117 	ldw	r4,-60(fp)
   165d4:	0016a1c0 	call	16a1c <OS_FlagTaskRdy>
   165d8:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   165dc:	e0bff683 	ldbu	r2,-38(fp)
   165e0:	10800058 	cmpnei	r2,r2,1
   165e4:	1000251e 	bne	r2,zero,1667c <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   165e8:	00800044 	movi	r2,1
   165ec:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   165f0:	00002206 	br	1667c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   165f4:	e0bffc17 	ldw	r2,-16(fp)
   165f8:	1080020b 	ldhu	r2,8(r2)
   165fc:	0084303a 	nor	r2,zero,r2
   16600:	1007883a 	mov	r3,r2
   16604:	e0bff117 	ldw	r2,-60(fp)
   16608:	1080040b 	ldhu	r2,16(r2)
   1660c:	1884703a 	and	r2,r3,r2
   16610:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   16614:	e0bff60b 	ldhu	r2,-40(fp)
   16618:	10001a26 	beq	r2,zero,16684 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1661c:	e0bff60b 	ldhu	r2,-40(fp)
   16620:	100b883a 	mov	r5,r2
   16624:	e13ff117 	ldw	r4,-60(fp)
   16628:	0016a1c0 	call	16a1c <OS_FlagTaskRdy>
   1662c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   16630:	e0bff683 	ldbu	r2,-38(fp)
   16634:	10800058 	cmpnei	r2,r2,1
   16638:	1000121e 	bne	r2,zero,16684 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1663c:	00800044 	movi	r2,1
   16640:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   16644:	00000f06 	br	16684 <OSFlagPost+0x300>
   16648:	e0bff317 	ldw	r2,-52(fp)
   1664c:	e0bff515 	stw	r2,-44(fp)
   16650:	e0bff517 	ldw	r2,-44(fp)
   16654:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   16658:	e0bfff17 	ldw	r2,-4(fp)
   1665c:	00c01bc4 	movi	r3,111
   16660:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   16664:	0005883a 	mov	r2,zero
   16668:	00002606 	br	16704 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   1666c:	0001883a 	nop
   16670:	00000506 	br	16688 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   16674:	0001883a 	nop
   16678:	00000306 	br	16688 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   1667c:	0001883a 	nop
   16680:	00000106 	br	16688 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   16684:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   16688:	e0bff117 	ldw	r2,-60(fp)
   1668c:	10800017 	ldw	r2,0(r2)
   16690:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   16694:	e0bff117 	ldw	r2,-60(fp)
   16698:	103f871e 	bne	r2,zero,164b8 <OSFlagPost+0x134>
   1669c:	e0bff317 	ldw	r2,-52(fp)
   166a0:	e0bff715 	stw	r2,-36(fp)
   166a4:	e0bff717 	ldw	r2,-36(fp)
   166a8:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   166ac:	e0bff203 	ldbu	r2,-56(fp)
   166b0:	10800058 	cmpnei	r2,r2,1
   166b4:	1000011e 	bne	r2,zero,166bc <OSFlagPost+0x338>
        OS_Sched();
   166b8:	0014c2c0 	call	14c2c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   166bc:	0005303a 	rdctl	r2,status
   166c0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   166c4:	e0fffa17 	ldw	r3,-24(fp)
   166c8:	00bfff84 	movi	r2,-2
   166cc:	1884703a 	and	r2,r3,r2
   166d0:	1001703a 	wrctl	status,r2
  
  return context;
   166d4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   166d8:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   166dc:	e0bffc17 	ldw	r2,-16(fp)
   166e0:	1080020b 	ldhu	r2,8(r2)
   166e4:	e0bff90d 	sth	r2,-28(fp)
   166e8:	e0bff317 	ldw	r2,-52(fp)
   166ec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   166f0:	e0bff817 	ldw	r2,-32(fp)
   166f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   166f8:	e0bfff17 	ldw	r2,-4(fp)
   166fc:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   16700:	e0bff90b 	ldhu	r2,-28(fp)
}
   16704:	e037883a 	mov	sp,fp
   16708:	dfc00117 	ldw	ra,4(sp)
   1670c:	df000017 	ldw	fp,0(sp)
   16710:	dec00204 	addi	sp,sp,8
   16714:	f800283a 	ret

00016718 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   16718:	defff904 	addi	sp,sp,-28
   1671c:	df000615 	stw	fp,24(sp)
   16720:	df000604 	addi	fp,sp,24
   16724:	e13ffe15 	stw	r4,-8(fp)
   16728:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   1672c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   16730:	e0bfff17 	ldw	r2,-4(fp)
   16734:	1000021e 	bne	r2,zero,16740 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   16738:	0005883a 	mov	r2,zero
   1673c:	00002306 	br	167cc <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   16740:	e0bffe17 	ldw	r2,-8(fp)
   16744:	1000051e 	bne	r2,zero,1675c <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   16748:	e0bfff17 	ldw	r2,-4(fp)
   1674c:	00c01b84 	movi	r3,110
   16750:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16754:	0005883a 	mov	r2,zero
   16758:	00001c06 	br	167cc <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   1675c:	e0bffe17 	ldw	r2,-8(fp)
   16760:	10800003 	ldbu	r2,0(r2)
   16764:	10803fcc 	andi	r2,r2,255
   16768:	10800160 	cmpeqi	r2,r2,5
   1676c:	1000051e 	bne	r2,zero,16784 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   16770:	e0bfff17 	ldw	r2,-4(fp)
   16774:	00c00044 	movi	r3,1
   16778:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1677c:	0005883a 	mov	r2,zero
   16780:	00001206 	br	167cc <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16784:	0005303a 	rdctl	r2,status
   16788:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1678c:	e0fffc17 	ldw	r3,-16(fp)
   16790:	00bfff84 	movi	r2,-2
   16794:	1884703a 	and	r2,r3,r2
   16798:	1001703a 	wrctl	status,r2
  
  return context;
   1679c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   167a0:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   167a4:	e0bffe17 	ldw	r2,-8(fp)
   167a8:	1080020b 	ldhu	r2,8(r2)
   167ac:	e0bffb0d 	sth	r2,-20(fp)
   167b0:	e0bffa17 	ldw	r2,-24(fp)
   167b4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   167b8:	e0bffd17 	ldw	r2,-12(fp)
   167bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   167c0:	e0bfff17 	ldw	r2,-4(fp)
   167c4:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   167c8:	e0bffb0b 	ldhu	r2,-20(fp)
}
   167cc:	e037883a 	mov	sp,fp
   167d0:	df000017 	ldw	fp,0(sp)
   167d4:	dec00104 	addi	sp,sp,4
   167d8:	f800283a 	ret

000167dc <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   167dc:	defff804 	addi	sp,sp,-32
   167e0:	df000715 	stw	fp,28(sp)
   167e4:	df000704 	addi	fp,sp,28
   167e8:	e13ffb15 	stw	r4,-20(fp)
   167ec:	e17ffc15 	stw	r5,-16(fp)
   167f0:	3009883a 	mov	r4,r6
   167f4:	3807883a 	mov	r3,r7
   167f8:	e0800117 	ldw	r2,4(fp)
   167fc:	e13ffd0d 	sth	r4,-12(fp)
   16800:	e0fffe05 	stb	r3,-8(fp)
   16804:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   16808:	d0a82d17 	ldw	r2,-24396(gp)
   1680c:	d0e82d17 	ldw	r3,-24396(gp)
   16810:	18c00c03 	ldbu	r3,48(r3)
   16814:	18c00814 	ori	r3,r3,32
   16818:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   1681c:	d0a82d17 	ldw	r2,-24396(gp)
   16820:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   16824:	d0a82d17 	ldw	r2,-24396(gp)
   16828:	e0ffff0b 	ldhu	r3,-4(fp)
   1682c:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   16830:	d0a82d17 	ldw	r2,-24396(gp)
   16834:	e0fffc17 	ldw	r3,-16(fp)
   16838:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   1683c:	e0bffc17 	ldw	r2,-16(fp)
   16840:	e0fffd0b 	ldhu	r3,-12(fp)
   16844:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   16848:	e0bffc17 	ldw	r2,-16(fp)
   1684c:	e0fffe03 	ldbu	r3,-8(fp)
   16850:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   16854:	d0e82d17 	ldw	r3,-24396(gp)
   16858:	e0bffc17 	ldw	r2,-16(fp)
   1685c:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   16860:	e0bffb17 	ldw	r2,-20(fp)
   16864:	10c00117 	ldw	r3,4(r2)
   16868:	e0bffc17 	ldw	r2,-16(fp)
   1686c:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   16870:	e0bffc17 	ldw	r2,-16(fp)
   16874:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   16878:	e0bffc17 	ldw	r2,-16(fp)
   1687c:	e0fffb17 	ldw	r3,-20(fp)
   16880:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   16884:	e0bffb17 	ldw	r2,-20(fp)
   16888:	10800117 	ldw	r2,4(r2)
   1688c:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   16890:	e0bff917 	ldw	r2,-28(fp)
   16894:	10000326 	beq	r2,zero,168a4 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   16898:	e0bff917 	ldw	r2,-28(fp)
   1689c:	e0fffc17 	ldw	r3,-16(fp)
   168a0:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   168a4:	e0bffb17 	ldw	r2,-20(fp)
   168a8:	e0fffc17 	ldw	r3,-16(fp)
   168ac:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   168b0:	d0a82d17 	ldw	r2,-24396(gp)
   168b4:	10800d03 	ldbu	r2,52(r2)
   168b8:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   168bc:	e0fffa03 	ldbu	r3,-24(fp)
   168c0:	e13ffa03 	ldbu	r4,-24(fp)
   168c4:	d0a82a44 	addi	r2,gp,-24407
   168c8:	2085883a 	add	r2,r4,r2
   168cc:	10800003 	ldbu	r2,0(r2)
   168d0:	1009883a 	mov	r4,r2
   168d4:	d0a82d17 	ldw	r2,-24396(gp)
   168d8:	10800d43 	ldbu	r2,53(r2)
   168dc:	0084303a 	nor	r2,zero,r2
   168e0:	2084703a 	and	r2,r4,r2
   168e4:	1009883a 	mov	r4,r2
   168e8:	d0a82a44 	addi	r2,gp,-24407
   168ec:	1885883a 	add	r2,r3,r2
   168f0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   168f4:	e0fffa03 	ldbu	r3,-24(fp)
   168f8:	d0a82a44 	addi	r2,gp,-24407
   168fc:	1885883a 	add	r2,r3,r2
   16900:	10800003 	ldbu	r2,0(r2)
   16904:	10803fcc 	andi	r2,r2,255
   16908:	1000071e 	bne	r2,zero,16928 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1690c:	d0a82d17 	ldw	r2,-24396(gp)
   16910:	10800d83 	ldbu	r2,54(r2)
   16914:	0084303a 	nor	r2,zero,r2
   16918:	1007883a 	mov	r3,r2
   1691c:	d0a82a03 	ldbu	r2,-24408(gp)
   16920:	1884703a 	and	r2,r3,r2
   16924:	d0a82a05 	stb	r2,-24408(gp)
    }
}
   16928:	0001883a 	nop
   1692c:	e037883a 	mov	sp,fp
   16930:	df000017 	ldw	fp,0(sp)
   16934:	dec00104 	addi	sp,sp,4
   16938:	f800283a 	ret

0001693c <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   1693c:	defffb04 	addi	sp,sp,-20
   16940:	dfc00415 	stw	ra,16(sp)
   16944:	df000315 	stw	fp,12(sp)
   16948:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   1694c:	0140dc04 	movi	r5,880
   16950:	010000f4 	movhi	r4,3
   16954:	21067c04 	addi	r4,r4,6640
   16958:	0014b700 	call	14b70 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   1695c:	008000f4 	movhi	r2,3
   16960:	10867c04 	addi	r2,r2,6640
   16964:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   16968:	008000f4 	movhi	r2,3
   1696c:	10868704 	addi	r2,r2,6684
   16970:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   16974:	e03ffd0d 	sth	zero,-12(fp)
   16978:	00001306 	br	169c8 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1697c:	e0bffe17 	ldw	r2,-8(fp)
   16980:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   16984:	e0bffe17 	ldw	r2,-8(fp)
   16988:	e0ffff17 	ldw	r3,-4(fp)
   1698c:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   16990:	e0bffe17 	ldw	r2,-8(fp)
   16994:	00c00fc4 	movi	r3,63
   16998:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   1699c:	e0bffe17 	ldw	r2,-8(fp)
   169a0:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   169a4:	e0bffe17 	ldw	r2,-8(fp)
   169a8:	10800b04 	addi	r2,r2,44
   169ac:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   169b0:	e0bfff17 	ldw	r2,-4(fp)
   169b4:	10800b04 	addi	r2,r2,44
   169b8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   169bc:	e0bffd0b 	ldhu	r2,-12(fp)
   169c0:	10800044 	addi	r2,r2,1
   169c4:	e0bffd0d 	sth	r2,-12(fp)
   169c8:	e0bffd0b 	ldhu	r2,-12(fp)
   169cc:	108004f0 	cmpltui	r2,r2,19
   169d0:	103fea1e 	bne	r2,zero,1697c <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   169d4:	e0bffe17 	ldw	r2,-8(fp)
   169d8:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   169dc:	e0bffe17 	ldw	r2,-8(fp)
   169e0:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   169e4:	e0bffe17 	ldw	r2,-8(fp)
   169e8:	00c00fc4 	movi	r3,63
   169ec:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   169f0:	e0bffe17 	ldw	r2,-8(fp)
   169f4:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   169f8:	008000f4 	movhi	r2,3
   169fc:	10867c04 	addi	r2,r2,6640
   16a00:	d0a82f15 	stw	r2,-24388(gp)
#endif
}
   16a04:	0001883a 	nop
   16a08:	e037883a 	mov	sp,fp
   16a0c:	dfc00117 	ldw	ra,4(sp)
   16a10:	df000017 	ldw	fp,0(sp)
   16a14:	dec00204 	addi	sp,sp,8
   16a18:	f800283a 	ret

00016a1c <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   16a1c:	defffa04 	addi	sp,sp,-24
   16a20:	dfc00515 	stw	ra,20(sp)
   16a24:	df000415 	stw	fp,16(sp)
   16a28:	df000404 	addi	fp,sp,16
   16a2c:	e13ffe15 	stw	r4,-8(fp)
   16a30:	2805883a 	mov	r2,r5
   16a34:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   16a38:	e0bffe17 	ldw	r2,-8(fp)
   16a3c:	10800217 	ldw	r2,8(r2)
   16a40:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   16a44:	e0bffd17 	ldw	r2,-12(fp)
   16a48:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   16a4c:	e0bffd17 	ldw	r2,-12(fp)
   16a50:	e0ffff0b 	ldhu	r3,-4(fp)
   16a54:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   16a58:	e0bffd17 	ldw	r2,-12(fp)
   16a5c:	10c00c03 	ldbu	r3,48(r2)
   16a60:	00bff7c4 	movi	r2,-33
   16a64:	1884703a 	and	r2,r3,r2
   16a68:	1007883a 	mov	r3,r2
   16a6c:	e0bffd17 	ldw	r2,-12(fp)
   16a70:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   16a74:	e0bffd17 	ldw	r2,-12(fp)
   16a78:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   16a7c:	e0bffd17 	ldw	r2,-12(fp)
   16a80:	10800c03 	ldbu	r2,48(r2)
   16a84:	10803fcc 	andi	r2,r2,255
   16a88:	1000181e 	bne	r2,zero,16aec <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   16a8c:	e0bffd17 	ldw	r2,-12(fp)
   16a90:	10c00d83 	ldbu	r3,54(r2)
   16a94:	d0a82a03 	ldbu	r2,-24408(gp)
   16a98:	1884b03a 	or	r2,r3,r2
   16a9c:	d0a82a05 	stb	r2,-24408(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   16aa0:	e0bffd17 	ldw	r2,-12(fp)
   16aa4:	10800d03 	ldbu	r2,52(r2)
   16aa8:	10c03fcc 	andi	r3,r2,255
   16aac:	e0bffd17 	ldw	r2,-12(fp)
   16ab0:	10800d03 	ldbu	r2,52(r2)
   16ab4:	11003fcc 	andi	r4,r2,255
   16ab8:	d0a82a44 	addi	r2,gp,-24407
   16abc:	2085883a 	add	r2,r4,r2
   16ac0:	11000003 	ldbu	r4,0(r2)
   16ac4:	e0bffd17 	ldw	r2,-12(fp)
   16ac8:	10800d43 	ldbu	r2,53(r2)
   16acc:	2084b03a 	or	r2,r4,r2
   16ad0:	1009883a 	mov	r4,r2
   16ad4:	d0a82a44 	addi	r2,gp,-24407
   16ad8:	1885883a 	add	r2,r3,r2
   16adc:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   16ae0:	00800044 	movi	r2,1
   16ae4:	e0bffc05 	stb	r2,-16(fp)
   16ae8:	00000106 	br	16af0 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
   16aec:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   16af0:	e13ffe17 	ldw	r4,-8(fp)
   16af4:	0016b100 	call	16b10 <OS_FlagUnlink>
    return (sched);
   16af8:	e0bffc03 	ldbu	r2,-16(fp)
}
   16afc:	e037883a 	mov	sp,fp
   16b00:	dfc00117 	ldw	ra,4(sp)
   16b04:	df000017 	ldw	fp,0(sp)
   16b08:	dec00204 	addi	sp,sp,8
   16b0c:	f800283a 	ret

00016b10 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   16b10:	defffa04 	addi	sp,sp,-24
   16b14:	df000515 	stw	fp,20(sp)
   16b18:	df000504 	addi	fp,sp,20
   16b1c:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   16b20:	e0bfff17 	ldw	r2,-4(fp)
   16b24:	10800117 	ldw	r2,4(r2)
   16b28:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   16b2c:	e0bfff17 	ldw	r2,-4(fp)
   16b30:	10800017 	ldw	r2,0(r2)
   16b34:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   16b38:	e0bffb17 	ldw	r2,-20(fp)
   16b3c:	10000b1e 	bne	r2,zero,16b6c <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   16b40:	e0bfff17 	ldw	r2,-4(fp)
   16b44:	10800317 	ldw	r2,12(r2)
   16b48:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   16b4c:	e0bffd17 	ldw	r2,-12(fp)
   16b50:	e0fffc17 	ldw	r3,-16(fp)
   16b54:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   16b58:	e0bffc17 	ldw	r2,-16(fp)
   16b5c:	10000b26 	beq	r2,zero,16b8c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   16b60:	e0bffc17 	ldw	r2,-16(fp)
   16b64:	10000115 	stw	zero,4(r2)
   16b68:	00000806 	br	16b8c <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   16b6c:	e0bffb17 	ldw	r2,-20(fp)
   16b70:	e0fffc17 	ldw	r3,-16(fp)
   16b74:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   16b78:	e0bffc17 	ldw	r2,-16(fp)
   16b7c:	10000326 	beq	r2,zero,16b8c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   16b80:	e0bffc17 	ldw	r2,-16(fp)
   16b84:	e0fffb17 	ldw	r3,-20(fp)
   16b88:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   16b8c:	e0bfff17 	ldw	r2,-4(fp)
   16b90:	10800217 	ldw	r2,8(r2)
   16b94:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   16b98:	e0bffe17 	ldw	r2,-8(fp)
   16b9c:	10000a15 	stw	zero,40(r2)
#endif
}
   16ba0:	0001883a 	nop
   16ba4:	e037883a 	mov	sp,fp
   16ba8:	df000017 	ldw	fp,0(sp)
   16bac:	dec00104 	addi	sp,sp,4
   16bb0:	f800283a 	ret

00016bb4 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   16bb4:	defff404 	addi	sp,sp,-48
   16bb8:	df000b15 	stw	fp,44(sp)
   16bbc:	df000b04 	addi	fp,sp,44
   16bc0:	e13ffc15 	stw	r4,-16(fp)
   16bc4:	e17ffd15 	stw	r5,-12(fp)
   16bc8:	e1bffe15 	stw	r6,-8(fp)
   16bcc:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   16bd0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   16bd4:	e0bfff17 	ldw	r2,-4(fp)
   16bd8:	1000021e 	bne	r2,zero,16be4 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   16bdc:	0005883a 	mov	r2,zero
   16be0:	00006506 	br	16d78 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   16be4:	e0bffc17 	ldw	r2,-16(fp)
   16be8:	1000051e 	bne	r2,zero,16c00 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   16bec:	e0bfff17 	ldw	r2,-4(fp)
   16bf0:	00c01884 	movi	r3,98
   16bf4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   16bf8:	0005883a 	mov	r2,zero
   16bfc:	00005e06 	br	16d78 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   16c00:	e0bffc17 	ldw	r2,-16(fp)
   16c04:	108000cc 	andi	r2,r2,3
   16c08:	10000526 	beq	r2,zero,16c20 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   16c0c:	e0bfff17 	ldw	r2,-4(fp)
   16c10:	00c01884 	movi	r3,98
   16c14:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   16c18:	0005883a 	mov	r2,zero
   16c1c:	00005606 	br	16d78 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   16c20:	e0bffd17 	ldw	r2,-12(fp)
   16c24:	108000a8 	cmpgeui	r2,r2,2
   16c28:	1000051e 	bne	r2,zero,16c40 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   16c2c:	e0bfff17 	ldw	r2,-4(fp)
   16c30:	00c016c4 	movi	r3,91
   16c34:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   16c38:	0005883a 	mov	r2,zero
   16c3c:	00004e06 	br	16d78 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   16c40:	e0bffe17 	ldw	r2,-8(fp)
   16c44:	10800128 	cmpgeui	r2,r2,4
   16c48:	1000051e 	bne	r2,zero,16c60 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   16c4c:	e0bfff17 	ldw	r2,-4(fp)
   16c50:	00c01704 	movi	r3,92
   16c54:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   16c58:	0005883a 	mov	r2,zero
   16c5c:	00004606 	br	16d78 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16c60:	0005303a 	rdctl	r2,status
   16c64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16c68:	e0fffb17 	ldw	r3,-20(fp)
   16c6c:	00bfff84 	movi	r2,-2
   16c70:	1884703a 	and	r2,r3,r2
   16c74:	1001703a 	wrctl	status,r2
  
  return context;
   16c78:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   16c7c:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   16c80:	d0a82717 	ldw	r2,-24420(gp)
   16c84:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   16c88:	d0a82717 	ldw	r2,-24420(gp)
   16c8c:	10000326 	beq	r2,zero,16c9c <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   16c90:	d0a82717 	ldw	r2,-24420(gp)
   16c94:	10800117 	ldw	r2,4(r2)
   16c98:	d0a82715 	stw	r2,-24420(gp)
   16c9c:	e0bff817 	ldw	r2,-32(fp)
   16ca0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16ca4:	e0bff917 	ldw	r2,-28(fp)
   16ca8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   16cac:	e0bffa17 	ldw	r2,-24(fp)
   16cb0:	1000051e 	bne	r2,zero,16cc8 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
   16cb4:	e0bfff17 	ldw	r2,-4(fp)
   16cb8:	00c01684 	movi	r3,90
   16cbc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   16cc0:	0005883a 	mov	r2,zero
   16cc4:	00002c06 	br	16d78 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   16cc8:	e0bffc17 	ldw	r2,-16(fp)
   16ccc:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   16cd0:	e0fffc17 	ldw	r3,-16(fp)
   16cd4:	e0bffe17 	ldw	r2,-8(fp)
   16cd8:	1885883a 	add	r2,r3,r2
   16cdc:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   16ce0:	e03ff715 	stw	zero,-36(fp)
   16ce4:	00000c06 	br	16d18 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   16ce8:	e0bff617 	ldw	r2,-40(fp)
   16cec:	e0fff517 	ldw	r3,-44(fp)
   16cf0:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   16cf4:	e0bff517 	ldw	r2,-44(fp)
   16cf8:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   16cfc:	e0fff517 	ldw	r3,-44(fp)
   16d00:	e0bffe17 	ldw	r2,-8(fp)
   16d04:	1885883a 	add	r2,r3,r2
   16d08:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   16d0c:	e0bff717 	ldw	r2,-36(fp)
   16d10:	10800044 	addi	r2,r2,1
   16d14:	e0bff715 	stw	r2,-36(fp)
   16d18:	e0bffd17 	ldw	r2,-12(fp)
   16d1c:	10bfffc4 	addi	r2,r2,-1
   16d20:	e0fff717 	ldw	r3,-36(fp)
   16d24:	18bff036 	bltu	r3,r2,16ce8 <OSMemCreate+0x134>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   16d28:	e0bff617 	ldw	r2,-40(fp)
   16d2c:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   16d30:	e0bffa17 	ldw	r2,-24(fp)
   16d34:	e0fffc17 	ldw	r3,-16(fp)
   16d38:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   16d3c:	e0bffa17 	ldw	r2,-24(fp)
   16d40:	e0fffc17 	ldw	r3,-16(fp)
   16d44:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   16d48:	e0bffa17 	ldw	r2,-24(fp)
   16d4c:	e0fffd17 	ldw	r3,-12(fp)
   16d50:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   16d54:	e0bffa17 	ldw	r2,-24(fp)
   16d58:	e0fffd17 	ldw	r3,-12(fp)
   16d5c:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   16d60:	e0bffa17 	ldw	r2,-24(fp)
   16d64:	e0fffe17 	ldw	r3,-8(fp)
   16d68:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   16d6c:	e0bfff17 	ldw	r2,-4(fp)
   16d70:	10000005 	stb	zero,0(r2)
    return (pmem);
   16d74:	e0bffa17 	ldw	r2,-24(fp)
}
   16d78:	e037883a 	mov	sp,fp
   16d7c:	df000017 	ldw	fp,0(sp)
   16d80:	dec00104 	addi	sp,sp,4
   16d84:	f800283a 	ret

00016d88 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   16d88:	defff804 	addi	sp,sp,-32
   16d8c:	df000715 	stw	fp,28(sp)
   16d90:	df000704 	addi	fp,sp,28
   16d94:	e13ffe15 	stw	r4,-8(fp)
   16d98:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   16d9c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   16da0:	e0bfff17 	ldw	r2,-4(fp)
   16da4:	1000021e 	bne	r2,zero,16db0 <OSMemGet+0x28>
        return ((void *)0);
   16da8:	0005883a 	mov	r2,zero
   16dac:	00002e06 	br	16e68 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   16db0:	e0bffe17 	ldw	r2,-8(fp)
   16db4:	1000051e 	bne	r2,zero,16dcc <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   16db8:	e0bfff17 	ldw	r2,-4(fp)
   16dbc:	00c01804 	movi	r3,96
   16dc0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   16dc4:	0005883a 	mov	r2,zero
   16dc8:	00002706 	br	16e68 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16dcc:	0005303a 	rdctl	r2,status
   16dd0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16dd4:	e0fffd17 	ldw	r3,-12(fp)
   16dd8:	00bfff84 	movi	r2,-2
   16ddc:	1884703a 	and	r2,r3,r2
   16de0:	1001703a 	wrctl	status,r2
  
  return context;
   16de4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   16de8:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   16dec:	e0bffe17 	ldw	r2,-8(fp)
   16df0:	10800417 	ldw	r2,16(r2)
   16df4:	10001426 	beq	r2,zero,16e48 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   16df8:	e0bffe17 	ldw	r2,-8(fp)
   16dfc:	10800117 	ldw	r2,4(r2)
   16e00:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   16e04:	e0bffb17 	ldw	r2,-20(fp)
   16e08:	10c00017 	ldw	r3,0(r2)
   16e0c:	e0bffe17 	ldw	r2,-8(fp)
   16e10:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   16e14:	e0bffe17 	ldw	r2,-8(fp)
   16e18:	10800417 	ldw	r2,16(r2)
   16e1c:	10ffffc4 	addi	r3,r2,-1
   16e20:	e0bffe17 	ldw	r2,-8(fp)
   16e24:	10c00415 	stw	r3,16(r2)
   16e28:	e0bff917 	ldw	r2,-28(fp)
   16e2c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16e30:	e0bffa17 	ldw	r2,-24(fp)
   16e34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   16e38:	e0bfff17 	ldw	r2,-4(fp)
   16e3c:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   16e40:	e0bffb17 	ldw	r2,-20(fp)
   16e44:	00000806 	br	16e68 <OSMemGet+0xe0>
   16e48:	e0bff917 	ldw	r2,-28(fp)
   16e4c:	e0bffc15 	stw	r2,-16(fp)
   16e50:	e0bffc17 	ldw	r2,-16(fp)
   16e54:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   16e58:	e0bfff17 	ldw	r2,-4(fp)
   16e5c:	00c01744 	movi	r3,93
   16e60:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   16e64:	0005883a 	mov	r2,zero
}
   16e68:	e037883a 	mov	sp,fp
   16e6c:	df000017 	ldw	fp,0(sp)
   16e70:	dec00104 	addi	sp,sp,4
   16e74:	f800283a 	ret

00016e78 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   16e78:	defff704 	addi	sp,sp,-36
   16e7c:	dfc00815 	stw	ra,32(sp)
   16e80:	df000715 	stw	fp,28(sp)
   16e84:	df000704 	addi	fp,sp,28
   16e88:	e13ffd15 	stw	r4,-12(fp)
   16e8c:	e17ffe15 	stw	r5,-8(fp)
   16e90:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16e94:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   16e98:	e0bfff17 	ldw	r2,-4(fp)
   16e9c:	1000021e 	bne	r2,zero,16ea8 <OSMemNameGet+0x30>
        return (0);
   16ea0:	0005883a 	mov	r2,zero
   16ea4:	00002b06 	br	16f54 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   16ea8:	e0bffd17 	ldw	r2,-12(fp)
   16eac:	1000051e 	bne	r2,zero,16ec4 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   16eb0:	e0bfff17 	ldw	r2,-4(fp)
   16eb4:	00c01804 	movi	r3,96
   16eb8:	10c00005 	stb	r3,0(r2)
        return (0);
   16ebc:	0005883a 	mov	r2,zero
   16ec0:	00002406 	br	16f54 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   16ec4:	e0bffe17 	ldw	r2,-8(fp)
   16ec8:	1000051e 	bne	r2,zero,16ee0 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   16ecc:	e0bfff17 	ldw	r2,-4(fp)
   16ed0:	00c00304 	movi	r3,12
   16ed4:	10c00005 	stb	r3,0(r2)
        return (0);
   16ed8:	0005883a 	mov	r2,zero
   16edc:	00001d06 	br	16f54 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   16ee0:	d0a82c03 	ldbu	r2,-24400(gp)
   16ee4:	10803fcc 	andi	r2,r2,255
   16ee8:	10000526 	beq	r2,zero,16f00 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   16eec:	e0bfff17 	ldw	r2,-4(fp)
   16ef0:	00c00444 	movi	r3,17
   16ef4:	10c00005 	stb	r3,0(r2)
        return (0);
   16ef8:	0005883a 	mov	r2,zero
   16efc:	00001506 	br	16f54 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16f00:	0005303a 	rdctl	r2,status
   16f04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16f08:	e0fffb17 	ldw	r3,-20(fp)
   16f0c:	00bfff84 	movi	r2,-2
   16f10:	1884703a 	and	r2,r3,r2
   16f14:	1001703a 	wrctl	status,r2
  
  return context;
   16f18:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   16f1c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   16f20:	e0bffd17 	ldw	r2,-12(fp)
   16f24:	10800504 	addi	r2,r2,20
   16f28:	100b883a 	mov	r5,r2
   16f2c:	e13ffe17 	ldw	r4,-8(fp)
   16f30:	0014d700 	call	14d70 <OS_StrCopy>
   16f34:	e0bffa05 	stb	r2,-24(fp)
   16f38:	e0bff917 	ldw	r2,-28(fp)
   16f3c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16f40:	e0bffc17 	ldw	r2,-16(fp)
   16f44:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   16f48:	e0bfff17 	ldw	r2,-4(fp)
   16f4c:	10000005 	stb	zero,0(r2)
    return (len);
   16f50:	e0bffa03 	ldbu	r2,-24(fp)
}
   16f54:	e037883a 	mov	sp,fp
   16f58:	dfc00117 	ldw	ra,4(sp)
   16f5c:	df000017 	ldw	fp,0(sp)
   16f60:	dec00204 	addi	sp,sp,8
   16f64:	f800283a 	ret

00016f68 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   16f68:	defff604 	addi	sp,sp,-40
   16f6c:	dfc00915 	stw	ra,36(sp)
   16f70:	df000815 	stw	fp,32(sp)
   16f74:	df000804 	addi	fp,sp,32
   16f78:	e13ffd15 	stw	r4,-12(fp)
   16f7c:	e17ffe15 	stw	r5,-8(fp)
   16f80:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16f84:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   16f88:	e0bfff17 	ldw	r2,-4(fp)
   16f8c:	10003526 	beq	r2,zero,17064 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   16f90:	e0bffd17 	ldw	r2,-12(fp)
   16f94:	1000041e 	bne	r2,zero,16fa8 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   16f98:	e0bfff17 	ldw	r2,-4(fp)
   16f9c:	00c01804 	movi	r3,96
   16fa0:	10c00005 	stb	r3,0(r2)
        return;
   16fa4:	00003006 	br	17068 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   16fa8:	e0bffe17 	ldw	r2,-8(fp)
   16fac:	1000041e 	bne	r2,zero,16fc0 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   16fb0:	e0bfff17 	ldw	r2,-4(fp)
   16fb4:	00c00304 	movi	r3,12
   16fb8:	10c00005 	stb	r3,0(r2)
        return;
   16fbc:	00002a06 	br	17068 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   16fc0:	d0a82c03 	ldbu	r2,-24400(gp)
   16fc4:	10803fcc 	andi	r2,r2,255
   16fc8:	10000426 	beq	r2,zero,16fdc <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   16fcc:	e0bfff17 	ldw	r2,-4(fp)
   16fd0:	00c00484 	movi	r3,18
   16fd4:	10c00005 	stb	r3,0(r2)
        return;
   16fd8:	00002306 	br	17068 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16fdc:	0005303a 	rdctl	r2,status
   16fe0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16fe4:	e0fffc17 	ldw	r3,-16(fp)
   16fe8:	00bfff84 	movi	r2,-2
   16fec:	1884703a 	and	r2,r3,r2
   16ff0:	1001703a 	wrctl	status,r2
  
  return context;
   16ff4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   16ff8:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   16ffc:	e13ffe17 	ldw	r4,-8(fp)
   17000:	0014de40 	call	14de4 <OS_StrLen>
   17004:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   17008:	e0bffa03 	ldbu	r2,-24(fp)
   1700c:	10800830 	cmpltui	r2,r2,32
   17010:	1000081e 	bne	r2,zero,17034 <OSMemNameSet+0xcc>
   17014:	e0bff817 	ldw	r2,-32(fp)
   17018:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1701c:	e0bff917 	ldw	r2,-28(fp)
   17020:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   17024:	e0bfff17 	ldw	r2,-4(fp)
   17028:	00c018c4 	movi	r3,99
   1702c:	10c00005 	stb	r3,0(r2)
        return;
   17030:	00000d06 	br	17068 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   17034:	e0bffd17 	ldw	r2,-12(fp)
   17038:	10800504 	addi	r2,r2,20
   1703c:	e17ffe17 	ldw	r5,-8(fp)
   17040:	1009883a 	mov	r4,r2
   17044:	0014d700 	call	14d70 <OS_StrCopy>
   17048:	e0bff817 	ldw	r2,-32(fp)
   1704c:	e0bffb15 	stw	r2,-20(fp)
   17050:	e0bffb17 	ldw	r2,-20(fp)
   17054:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   17058:	e0bfff17 	ldw	r2,-4(fp)
   1705c:	10000005 	stb	zero,0(r2)
   17060:	00000106 	br	17068 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   17064:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   17068:	e037883a 	mov	sp,fp
   1706c:	dfc00117 	ldw	ra,4(sp)
   17070:	df000017 	ldw	fp,0(sp)
   17074:	dec00204 	addi	sp,sp,8
   17078:	f800283a 	ret

0001707c <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   1707c:	defff904 	addi	sp,sp,-28
   17080:	df000615 	stw	fp,24(sp)
   17084:	df000604 	addi	fp,sp,24
   17088:	e13ffe15 	stw	r4,-8(fp)
   1708c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17090:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   17094:	e0bffe17 	ldw	r2,-8(fp)
   17098:	1000021e 	bne	r2,zero,170a4 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   1709c:	00801804 	movi	r2,96
   170a0:	00002806 	br	17144 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   170a4:	e0bfff17 	ldw	r2,-4(fp)
   170a8:	1000021e 	bne	r2,zero,170b4 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   170ac:	008017c4 	movi	r2,95
   170b0:	00002406 	br	17144 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   170b4:	0005303a 	rdctl	r2,status
   170b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   170bc:	e0fffd17 	ldw	r3,-12(fp)
   170c0:	00bfff84 	movi	r2,-2
   170c4:	1884703a 	and	r2,r3,r2
   170c8:	1001703a 	wrctl	status,r2
  
  return context;
   170cc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   170d0:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   170d4:	e0bffe17 	ldw	r2,-8(fp)
   170d8:	10c00417 	ldw	r3,16(r2)
   170dc:	e0bffe17 	ldw	r2,-8(fp)
   170e0:	10800317 	ldw	r2,12(r2)
   170e4:	18800636 	bltu	r3,r2,17100 <OSMemPut+0x84>
   170e8:	e0bffa17 	ldw	r2,-24(fp)
   170ec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   170f0:	e0bffb17 	ldw	r2,-20(fp)
   170f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   170f8:	00801784 	movi	r2,94
   170fc:	00001106 	br	17144 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   17100:	e0bffe17 	ldw	r2,-8(fp)
   17104:	10c00117 	ldw	r3,4(r2)
   17108:	e0bfff17 	ldw	r2,-4(fp)
   1710c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   17110:	e0bffe17 	ldw	r2,-8(fp)
   17114:	e0ffff17 	ldw	r3,-4(fp)
   17118:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   1711c:	e0bffe17 	ldw	r2,-8(fp)
   17120:	10800417 	ldw	r2,16(r2)
   17124:	10c00044 	addi	r3,r2,1
   17128:	e0bffe17 	ldw	r2,-8(fp)
   1712c:	10c00415 	stw	r3,16(r2)
   17130:	e0bffa17 	ldw	r2,-24(fp)
   17134:	e0bffc15 	stw	r2,-16(fp)
   17138:	e0bffc17 	ldw	r2,-16(fp)
   1713c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   17140:	0005883a 	mov	r2,zero
}
   17144:	e037883a 	mov	sp,fp
   17148:	df000017 	ldw	fp,0(sp)
   1714c:	dec00104 	addi	sp,sp,4
   17150:	f800283a 	ret

00017154 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   17154:	defffa04 	addi	sp,sp,-24
   17158:	df000515 	stw	fp,20(sp)
   1715c:	df000504 	addi	fp,sp,20
   17160:	e13ffe15 	stw	r4,-8(fp)
   17164:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17168:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   1716c:	e0bffe17 	ldw	r2,-8(fp)
   17170:	1000021e 	bne	r2,zero,1717c <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   17174:	00801804 	movi	r2,96
   17178:	00002c06 	br	1722c <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   1717c:	e0bfff17 	ldw	r2,-4(fp)
   17180:	1000021e 	bne	r2,zero,1718c <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   17184:	00801844 	movi	r2,97
   17188:	00002806 	br	1722c <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1718c:	0005303a 	rdctl	r2,status
   17190:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17194:	e0fffc17 	ldw	r3,-16(fp)
   17198:	00bfff84 	movi	r2,-2
   1719c:	1884703a 	and	r2,r3,r2
   171a0:	1001703a 	wrctl	status,r2
  
  return context;
   171a4:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   171a8:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   171ac:	e0bffe17 	ldw	r2,-8(fp)
   171b0:	10c00017 	ldw	r3,0(r2)
   171b4:	e0bfff17 	ldw	r2,-4(fp)
   171b8:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   171bc:	e0bffe17 	ldw	r2,-8(fp)
   171c0:	10c00117 	ldw	r3,4(r2)
   171c4:	e0bfff17 	ldw	r2,-4(fp)
   171c8:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   171cc:	e0bffe17 	ldw	r2,-8(fp)
   171d0:	10c00217 	ldw	r3,8(r2)
   171d4:	e0bfff17 	ldw	r2,-4(fp)
   171d8:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   171dc:	e0bffe17 	ldw	r2,-8(fp)
   171e0:	10c00317 	ldw	r3,12(r2)
   171e4:	e0bfff17 	ldw	r2,-4(fp)
   171e8:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   171ec:	e0bffe17 	ldw	r2,-8(fp)
   171f0:	10c00417 	ldw	r3,16(r2)
   171f4:	e0bfff17 	ldw	r2,-4(fp)
   171f8:	10c00415 	stw	r3,16(r2)
   171fc:	e0bffb17 	ldw	r2,-20(fp)
   17200:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17204:	e0bffd17 	ldw	r2,-12(fp)
   17208:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   1720c:	e0bfff17 	ldw	r2,-4(fp)
   17210:	10c00317 	ldw	r3,12(r2)
   17214:	e0bfff17 	ldw	r2,-4(fp)
   17218:	10800417 	ldw	r2,16(r2)
   1721c:	1887c83a 	sub	r3,r3,r2
   17220:	e0bfff17 	ldw	r2,-4(fp)
   17224:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   17228:	0005883a 	mov	r2,zero
}
   1722c:	e037883a 	mov	sp,fp
   17230:	df000017 	ldw	fp,0(sp)
   17234:	dec00104 	addi	sp,sp,4
   17238:	f800283a 	ret

0001723c <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   1723c:	defffc04 	addi	sp,sp,-16
   17240:	dfc00315 	stw	ra,12(sp)
   17244:	df000215 	stw	fp,8(sp)
   17248:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   1724c:	01430c04 	movi	r5,3120
   17250:	010000f4 	movhi	r4,3
   17254:	21075804 	addi	r4,r4,7520
   17258:	0014b700 	call	14b70 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   1725c:	008000f4 	movhi	r2,3
   17260:	10875804 	addi	r2,r2,7520
   17264:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   17268:	e03fff0d 	sth	zero,-4(fp)
   1726c:	00001306 	br	172bc <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   17270:	e0bfff0b 	ldhu	r2,-4(fp)
   17274:	10800044 	addi	r2,r2,1
   17278:	10c00d24 	muli	r3,r2,52
   1727c:	008000f4 	movhi	r2,3
   17280:	10875804 	addi	r2,r2,7520
   17284:	1887883a 	add	r3,r3,r2
   17288:	e0bffe17 	ldw	r2,-8(fp)
   1728c:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   17290:	e0bffe17 	ldw	r2,-8(fp)
   17294:	00c00fc4 	movi	r3,63
   17298:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   1729c:	e0bffe17 	ldw	r2,-8(fp)
   172a0:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   172a4:	e0bffe17 	ldw	r2,-8(fp)
   172a8:	10800d04 	addi	r2,r2,52
   172ac:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   172b0:	e0bfff0b 	ldhu	r2,-4(fp)
   172b4:	10800044 	addi	r2,r2,1
   172b8:	e0bfff0d 	sth	r2,-4(fp)
   172bc:	e0bfff0b 	ldhu	r2,-4(fp)
   172c0:	10800ef0 	cmpltui	r2,r2,59
   172c4:	103fea1e 	bne	r2,zero,17270 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   172c8:	e0bffe17 	ldw	r2,-8(fp)
   172cc:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   172d0:	e0bffe17 	ldw	r2,-8(fp)
   172d4:	00c00fc4 	movi	r3,63
   172d8:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   172dc:	e0bffe17 	ldw	r2,-8(fp)
   172e0:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   172e4:	008000f4 	movhi	r2,3
   172e8:	10875804 	addi	r2,r2,7520
   172ec:	d0a82715 	stw	r2,-24420(gp)
#endif
}
   172f0:	0001883a 	nop
   172f4:	e037883a 	mov	sp,fp
   172f8:	dfc00117 	ldw	ra,4(sp)
   172fc:	df000017 	ldw	fp,0(sp)
   17300:	dec00204 	addi	sp,sp,8
   17304:	f800283a 	ret

00017308 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   17308:	defff804 	addi	sp,sp,-32
   1730c:	df000715 	stw	fp,28(sp)
   17310:	df000704 	addi	fp,sp,28
   17314:	e13ffe15 	stw	r4,-8(fp)
   17318:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1731c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   17320:	e0bfff17 	ldw	r2,-4(fp)
   17324:	1000021e 	bne	r2,zero,17330 <OSQAccept+0x28>
        return ((void *)0);
   17328:	0005883a 	mov	r2,zero
   1732c:	00004206 	br	17438 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   17330:	e0bffe17 	ldw	r2,-8(fp)
   17334:	1000051e 	bne	r2,zero,1734c <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   17338:	e0bfff17 	ldw	r2,-4(fp)
   1733c:	00c00104 	movi	r3,4
   17340:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   17344:	0005883a 	mov	r2,zero
   17348:	00003b06 	br	17438 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   1734c:	e0bffe17 	ldw	r2,-8(fp)
   17350:	10800003 	ldbu	r2,0(r2)
   17354:	10803fcc 	andi	r2,r2,255
   17358:	108000a0 	cmpeqi	r2,r2,2
   1735c:	1000051e 	bne	r2,zero,17374 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   17360:	e0bfff17 	ldw	r2,-4(fp)
   17364:	00c00044 	movi	r3,1
   17368:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1736c:	0005883a 	mov	r2,zero
   17370:	00003106 	br	17438 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17374:	0005303a 	rdctl	r2,status
   17378:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1737c:	e0fffd17 	ldw	r3,-12(fp)
   17380:	00bfff84 	movi	r2,-2
   17384:	1884703a 	and	r2,r3,r2
   17388:	1001703a 	wrctl	status,r2
  
  return context;
   1738c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   17390:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   17394:	e0bffe17 	ldw	r2,-8(fp)
   17398:	10800117 	ldw	r2,4(r2)
   1739c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   173a0:	e0bffc17 	ldw	r2,-16(fp)
   173a4:	1080058b 	ldhu	r2,22(r2)
   173a8:	10bfffcc 	andi	r2,r2,65535
   173ac:	10001926 	beq	r2,zero,17414 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   173b0:	e0bffc17 	ldw	r2,-16(fp)
   173b4:	10800417 	ldw	r2,16(r2)
   173b8:	11000104 	addi	r4,r2,4
   173bc:	e0fffc17 	ldw	r3,-16(fp)
   173c0:	19000415 	stw	r4,16(r3)
   173c4:	10800017 	ldw	r2,0(r2)
   173c8:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   173cc:	e0bffc17 	ldw	r2,-16(fp)
   173d0:	1080058b 	ldhu	r2,22(r2)
   173d4:	10bfffc4 	addi	r2,r2,-1
   173d8:	1007883a 	mov	r3,r2
   173dc:	e0bffc17 	ldw	r2,-16(fp)
   173e0:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   173e4:	e0bffc17 	ldw	r2,-16(fp)
   173e8:	10c00417 	ldw	r3,16(r2)
   173ec:	e0bffc17 	ldw	r2,-16(fp)
   173f0:	10800217 	ldw	r2,8(r2)
   173f4:	1880041e 	bne	r3,r2,17408 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   173f8:	e0bffc17 	ldw	r2,-16(fp)
   173fc:	10c00117 	ldw	r3,4(r2)
   17400:	e0bffc17 	ldw	r2,-16(fp)
   17404:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   17408:	e0bfff17 	ldw	r2,-4(fp)
   1740c:	10000005 	stb	zero,0(r2)
   17410:	00000406 	br	17424 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   17414:	e0bfff17 	ldw	r2,-4(fp)
   17418:	00c007c4 	movi	r3,31
   1741c:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   17420:	e03ff915 	stw	zero,-28(fp)
   17424:	e0bffa17 	ldw	r2,-24(fp)
   17428:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1742c:	e0bffb17 	ldw	r2,-20(fp)
   17430:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   17434:	e0bff917 	ldw	r2,-28(fp)
}
   17438:	e037883a 	mov	sp,fp
   1743c:	df000017 	ldw	fp,0(sp)
   17440:	dec00104 	addi	sp,sp,4
   17444:	f800283a 	ret

00017448 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   17448:	defff404 	addi	sp,sp,-48
   1744c:	dfc00b15 	stw	ra,44(sp)
   17450:	df000a15 	stw	fp,40(sp)
   17454:	df000a04 	addi	fp,sp,40
   17458:	e13ffe15 	stw	r4,-8(fp)
   1745c:	2805883a 	mov	r2,r5
   17460:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17464:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   17468:	d0a82c03 	ldbu	r2,-24400(gp)
   1746c:	10803fcc 	andi	r2,r2,255
   17470:	10000226 	beq	r2,zero,1747c <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   17474:	0005883a 	mov	r2,zero
   17478:	00005906 	br	175e0 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1747c:	0005303a 	rdctl	r2,status
   17480:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17484:	e0fffd17 	ldw	r3,-12(fp)
   17488:	00bfff84 	movi	r2,-2
   1748c:	1884703a 	and	r2,r3,r2
   17490:	1001703a 	wrctl	status,r2
  
  return context;
   17494:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   17498:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   1749c:	d0a82b17 	ldw	r2,-24404(gp)
   174a0:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   174a4:	d0a82b17 	ldw	r2,-24404(gp)
   174a8:	10000326 	beq	r2,zero,174b8 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   174ac:	d0a82b17 	ldw	r2,-24404(gp)
   174b0:	10800117 	ldw	r2,4(r2)
   174b4:	d0a82b15 	stw	r2,-24404(gp)
   174b8:	e0bff717 	ldw	r2,-36(fp)
   174bc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   174c0:	e0bff817 	ldw	r2,-32(fp)
   174c4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   174c8:	e0bff617 	ldw	r2,-40(fp)
   174cc:	10004326 	beq	r2,zero,175dc <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   174d0:	0005303a 	rdctl	r2,status
   174d4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   174d8:	e0fff917 	ldw	r3,-28(fp)
   174dc:	00bfff84 	movi	r2,-2
   174e0:	1884703a 	and	r2,r3,r2
   174e4:	1001703a 	wrctl	status,r2
  
  return context;
   174e8:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
   174ec:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   174f0:	d0a82917 	ldw	r2,-24412(gp)
   174f4:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   174f8:	e0bffb17 	ldw	r2,-20(fp)
   174fc:	10002d26 	beq	r2,zero,175b4 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   17500:	d0a82917 	ldw	r2,-24412(gp)
   17504:	10800017 	ldw	r2,0(r2)
   17508:	d0a82915 	stw	r2,-24412(gp)
   1750c:	e0bff717 	ldw	r2,-36(fp)
   17510:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17514:	e0bffa17 	ldw	r2,-24(fp)
   17518:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   1751c:	e0bffb17 	ldw	r2,-20(fp)
   17520:	e0fffe17 	ldw	r3,-8(fp)
   17524:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   17528:	e0bfff0b 	ldhu	r2,-4(fp)
   1752c:	1085883a 	add	r2,r2,r2
   17530:	1085883a 	add	r2,r2,r2
   17534:	1007883a 	mov	r3,r2
   17538:	e0bffe17 	ldw	r2,-8(fp)
   1753c:	10c7883a 	add	r3,r2,r3
   17540:	e0bffb17 	ldw	r2,-20(fp)
   17544:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   17548:	e0bffb17 	ldw	r2,-20(fp)
   1754c:	e0fffe17 	ldw	r3,-8(fp)
   17550:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   17554:	e0bffb17 	ldw	r2,-20(fp)
   17558:	e0fffe17 	ldw	r3,-8(fp)
   1755c:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   17560:	e0bffb17 	ldw	r2,-20(fp)
   17564:	e0ffff0b 	ldhu	r3,-4(fp)
   17568:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   1756c:	e0bffb17 	ldw	r2,-20(fp)
   17570:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   17574:	e0bff617 	ldw	r2,-40(fp)
   17578:	00c00084 	movi	r3,2
   1757c:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   17580:	e0bff617 	ldw	r2,-40(fp)
   17584:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   17588:	e0bff617 	ldw	r2,-40(fp)
   1758c:	e0fffb17 	ldw	r3,-20(fp)
   17590:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   17594:	e0bff617 	ldw	r2,-40(fp)
   17598:	00c00fc4 	movi	r3,63
   1759c:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   175a0:	e0bff617 	ldw	r2,-40(fp)
   175a4:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   175a8:	e13ff617 	ldw	r4,-40(fp)
   175ac:	00147900 	call	14790 <OS_EventWaitListInit>
   175b0:	00000a06 	br	175dc <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   175b4:	d0e82b17 	ldw	r3,-24404(gp)
   175b8:	e0bff617 	ldw	r2,-40(fp)
   175bc:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   175c0:	e0bff617 	ldw	r2,-40(fp)
   175c4:	d0a82b15 	stw	r2,-24404(gp)
   175c8:	e0bff717 	ldw	r2,-36(fp)
   175cc:	e0bffc15 	stw	r2,-16(fp)
   175d0:	e0bffc17 	ldw	r2,-16(fp)
   175d4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   175d8:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   175dc:	e0bff617 	ldw	r2,-40(fp)
}
   175e0:	e037883a 	mov	sp,fp
   175e4:	dfc00117 	ldw	ra,4(sp)
   175e8:	df000017 	ldw	fp,0(sp)
   175ec:	dec00204 	addi	sp,sp,8
   175f0:	f800283a 	ret

000175f4 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   175f4:	defff204 	addi	sp,sp,-56
   175f8:	dfc00d15 	stw	ra,52(sp)
   175fc:	df000c15 	stw	fp,48(sp)
   17600:	df000c04 	addi	fp,sp,48
   17604:	e13ffd15 	stw	r4,-12(fp)
   17608:	2805883a 	mov	r2,r5
   1760c:	e1bfff15 	stw	r6,-4(fp)
   17610:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   17614:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   17618:	e0bfff17 	ldw	r2,-4(fp)
   1761c:	1000021e 	bne	r2,zero,17628 <OSQDel+0x34>
        return (pevent);
   17620:	e0bffd17 	ldw	r2,-12(fp)
   17624:	00008e06 	br	17860 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   17628:	e0bffd17 	ldw	r2,-12(fp)
   1762c:	1000051e 	bne	r2,zero,17644 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   17630:	e0bfff17 	ldw	r2,-4(fp)
   17634:	00c00104 	movi	r3,4
   17638:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1763c:	e0bffd17 	ldw	r2,-12(fp)
   17640:	00008706 	br	17860 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   17644:	e0bffd17 	ldw	r2,-12(fp)
   17648:	10800003 	ldbu	r2,0(r2)
   1764c:	10803fcc 	andi	r2,r2,255
   17650:	108000a0 	cmpeqi	r2,r2,2
   17654:	1000051e 	bne	r2,zero,1766c <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   17658:	e0bfff17 	ldw	r2,-4(fp)
   1765c:	00c00044 	movi	r3,1
   17660:	10c00005 	stb	r3,0(r2)
        return (pevent);
   17664:	e0bffd17 	ldw	r2,-12(fp)
   17668:	00007d06 	br	17860 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1766c:	d0a82c03 	ldbu	r2,-24400(gp)
   17670:	10803fcc 	andi	r2,r2,255
   17674:	10000526 	beq	r2,zero,1768c <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   17678:	e0bfff17 	ldw	r2,-4(fp)
   1767c:	00c003c4 	movi	r3,15
   17680:	10c00005 	stb	r3,0(r2)
        return (pevent);
   17684:	e0bffd17 	ldw	r2,-12(fp)
   17688:	00007506 	br	17860 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1768c:	0005303a 	rdctl	r2,status
   17690:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17694:	e0fffc17 	ldw	r3,-16(fp)
   17698:	00bfff84 	movi	r2,-2
   1769c:	1884703a 	and	r2,r3,r2
   176a0:	1001703a 	wrctl	status,r2
  
  return context;
   176a4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   176a8:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   176ac:	e0bffd17 	ldw	r2,-12(fp)
   176b0:	10800283 	ldbu	r2,10(r2)
   176b4:	10803fcc 	andi	r2,r2,255
   176b8:	10000326 	beq	r2,zero,176c8 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   176bc:	00800044 	movi	r2,1
   176c0:	e0bff405 	stb	r2,-48(fp)
   176c4:	00000106 	br	176cc <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   176c8:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   176cc:	e0bffe03 	ldbu	r2,-8(fp)
   176d0:	10000326 	beq	r2,zero,176e0 <OSQDel+0xec>
   176d4:	10800060 	cmpeqi	r2,r2,1
   176d8:	1000301e 	bne	r2,zero,1779c <OSQDel+0x1a8>
   176dc:	00005506 	br	17834 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   176e0:	e0bff403 	ldbu	r2,-48(fp)
   176e4:	10001e1e 	bne	r2,zero,17760 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   176e8:	e0bffd17 	ldw	r2,-12(fp)
   176ec:	00c00fc4 	movi	r3,63
   176f0:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   176f4:	e0bffd17 	ldw	r2,-12(fp)
   176f8:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   176fc:	e0bffd17 	ldw	r2,-12(fp)
   17700:	10800117 	ldw	r2,4(r2)
   17704:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   17708:	d0e82917 	ldw	r3,-24412(gp)
   1770c:	e0bff817 	ldw	r2,-32(fp)
   17710:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   17714:	e0bff817 	ldw	r2,-32(fp)
   17718:	d0a82915 	stw	r2,-24412(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1771c:	e0bffd17 	ldw	r2,-12(fp)
   17720:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   17724:	d0e82b17 	ldw	r3,-24404(gp)
   17728:	e0bffd17 	ldw	r2,-12(fp)
   1772c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   17730:	e0bffd17 	ldw	r2,-12(fp)
   17734:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   17738:	e0bffd17 	ldw	r2,-12(fp)
   1773c:	d0a82b15 	stw	r2,-24404(gp)
   17740:	e0bff617 	ldw	r2,-40(fp)
   17744:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17748:	e0bff717 	ldw	r2,-36(fp)
   1774c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   17750:	e0bfff17 	ldw	r2,-4(fp)
   17754:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   17758:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   1775c:	00003f06 	br	1785c <OSQDel+0x268>
   17760:	e0bff617 	ldw	r2,-40(fp)
   17764:	e0bff915 	stw	r2,-28(fp)
   17768:	e0bff917 	ldw	r2,-28(fp)
   1776c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   17770:	e0bfff17 	ldw	r2,-4(fp)
   17774:	00c01244 	movi	r3,73
   17778:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   1777c:	e0bffd17 	ldw	r2,-12(fp)
   17780:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   17784:	00003506 	br	1785c <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   17788:	000f883a 	mov	r7,zero
   1778c:	01800104 	movi	r6,4
   17790:	000b883a 	mov	r5,zero
   17794:	e13ffd17 	ldw	r4,-12(fp)
   17798:	00141e00 	call	141e0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   1779c:	e0bffd17 	ldw	r2,-12(fp)
   177a0:	10800283 	ldbu	r2,10(r2)
   177a4:	10803fcc 	andi	r2,r2,255
   177a8:	103ff71e 	bne	r2,zero,17788 <OSQDel+0x194>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   177ac:	e0bffd17 	ldw	r2,-12(fp)
   177b0:	00c00fc4 	movi	r3,63
   177b4:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   177b8:	e0bffd17 	ldw	r2,-12(fp)
   177bc:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   177c0:	e0bffd17 	ldw	r2,-12(fp)
   177c4:	10800117 	ldw	r2,4(r2)
   177c8:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   177cc:	d0e82917 	ldw	r3,-24412(gp)
   177d0:	e0bff817 	ldw	r2,-32(fp)
   177d4:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   177d8:	e0bff817 	ldw	r2,-32(fp)
   177dc:	d0a82915 	stw	r2,-24412(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   177e0:	e0bffd17 	ldw	r2,-12(fp)
   177e4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   177e8:	d0e82b17 	ldw	r3,-24404(gp)
   177ec:	e0bffd17 	ldw	r2,-12(fp)
   177f0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   177f4:	e0bffd17 	ldw	r2,-12(fp)
   177f8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   177fc:	e0bffd17 	ldw	r2,-12(fp)
   17800:	d0a82b15 	stw	r2,-24404(gp)
   17804:	e0bff617 	ldw	r2,-40(fp)
   17808:	e0bffa15 	stw	r2,-24(fp)
   1780c:	e0bffa17 	ldw	r2,-24(fp)
   17810:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   17814:	e0bff403 	ldbu	r2,-48(fp)
   17818:	10800058 	cmpnei	r2,r2,1
   1781c:	1000011e 	bne	r2,zero,17824 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   17820:	0014c2c0 	call	14c2c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   17824:	e0bfff17 	ldw	r2,-4(fp)
   17828:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   1782c:	e03ff515 	stw	zero,-44(fp)
             break;
   17830:	00000a06 	br	1785c <OSQDel+0x268>
   17834:	e0bff617 	ldw	r2,-40(fp)
   17838:	e0bffb15 	stw	r2,-20(fp)
   1783c:	e0bffb17 	ldw	r2,-20(fp)
   17840:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   17844:	e0bfff17 	ldw	r2,-4(fp)
   17848:	00c001c4 	movi	r3,7
   1784c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   17850:	e0bffd17 	ldw	r2,-12(fp)
   17854:	e0bff515 	stw	r2,-44(fp)
             break;
   17858:	0001883a 	nop
    }
    return (pevent_return);
   1785c:	e0bff517 	ldw	r2,-44(fp)
}
   17860:	e037883a 	mov	sp,fp
   17864:	dfc00117 	ldw	ra,4(sp)
   17868:	df000017 	ldw	fp,0(sp)
   1786c:	dec00204 	addi	sp,sp,8
   17870:	f800283a 	ret

00017874 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   17874:	defffa04 	addi	sp,sp,-24
   17878:	df000515 	stw	fp,20(sp)
   1787c:	df000504 	addi	fp,sp,20
   17880:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17884:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   17888:	e0bfff17 	ldw	r2,-4(fp)
   1788c:	1000021e 	bne	r2,zero,17898 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   17890:	00800104 	movi	r2,4
   17894:	00002106 	br	1791c <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   17898:	e0bfff17 	ldw	r2,-4(fp)
   1789c:	10800003 	ldbu	r2,0(r2)
   178a0:	10803fcc 	andi	r2,r2,255
   178a4:	108000a0 	cmpeqi	r2,r2,2
   178a8:	1000021e 	bne	r2,zero,178b4 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   178ac:	00800044 	movi	r2,1
   178b0:	00001a06 	br	1791c <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   178b4:	0005303a 	rdctl	r2,status
   178b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   178bc:	e0fffd17 	ldw	r3,-12(fp)
   178c0:	00bfff84 	movi	r2,-2
   178c4:	1884703a 	and	r2,r3,r2
   178c8:	1001703a 	wrctl	status,r2
  
  return context;
   178cc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   178d0:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   178d4:	e0bfff17 	ldw	r2,-4(fp)
   178d8:	10800117 	ldw	r2,4(r2)
   178dc:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   178e0:	e0bffc17 	ldw	r2,-16(fp)
   178e4:	10c00117 	ldw	r3,4(r2)
   178e8:	e0bffc17 	ldw	r2,-16(fp)
   178ec:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   178f0:	e0bffc17 	ldw	r2,-16(fp)
   178f4:	10c00117 	ldw	r3,4(r2)
   178f8:	e0bffc17 	ldw	r2,-16(fp)
   178fc:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   17900:	e0bffc17 	ldw	r2,-16(fp)
   17904:	1000058d 	sth	zero,22(r2)
   17908:	e0bffb17 	ldw	r2,-20(fp)
   1790c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17910:	e0bffe17 	ldw	r2,-8(fp)
   17914:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   17918:	0005883a 	mov	r2,zero
}
   1791c:	e037883a 	mov	sp,fp
   17920:	df000017 	ldw	fp,0(sp)
   17924:	dec00104 	addi	sp,sp,4
   17928:	f800283a 	ret

0001792c <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   1792c:	defff304 	addi	sp,sp,-52
   17930:	dfc00c15 	stw	ra,48(sp)
   17934:	df000b15 	stw	fp,44(sp)
   17938:	df000b04 	addi	fp,sp,44
   1793c:	e13ffd15 	stw	r4,-12(fp)
   17940:	2805883a 	mov	r2,r5
   17944:	e1bfff15 	stw	r6,-4(fp)
   17948:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1794c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   17950:	e0bfff17 	ldw	r2,-4(fp)
   17954:	1000021e 	bne	r2,zero,17960 <OSQPend+0x34>
        return ((void *)0);
   17958:	0005883a 	mov	r2,zero
   1795c:	00009106 	br	17ba4 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   17960:	e0bffd17 	ldw	r2,-12(fp)
   17964:	1000051e 	bne	r2,zero,1797c <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   17968:	e0bfff17 	ldw	r2,-4(fp)
   1796c:	00c00104 	movi	r3,4
   17970:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   17974:	0005883a 	mov	r2,zero
   17978:	00008a06 	br	17ba4 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   1797c:	e0bffd17 	ldw	r2,-12(fp)
   17980:	10800003 	ldbu	r2,0(r2)
   17984:	10803fcc 	andi	r2,r2,255
   17988:	108000a0 	cmpeqi	r2,r2,2
   1798c:	1000051e 	bne	r2,zero,179a4 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   17990:	e0bfff17 	ldw	r2,-4(fp)
   17994:	00c00044 	movi	r3,1
   17998:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1799c:	0005883a 	mov	r2,zero
   179a0:	00008006 	br	17ba4 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   179a4:	d0a82c03 	ldbu	r2,-24400(gp)
   179a8:	10803fcc 	andi	r2,r2,255
   179ac:	10000526 	beq	r2,zero,179c4 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   179b0:	e0bfff17 	ldw	r2,-4(fp)
   179b4:	00c00084 	movi	r3,2
   179b8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   179bc:	0005883a 	mov	r2,zero
   179c0:	00007806 	br	17ba4 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   179c4:	d0a81e03 	ldbu	r2,-24456(gp)
   179c8:	10803fcc 	andi	r2,r2,255
   179cc:	10000526 	beq	r2,zero,179e4 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   179d0:	e0bfff17 	ldw	r2,-4(fp)
   179d4:	00c00344 	movi	r3,13
   179d8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   179dc:	0005883a 	mov	r2,zero
   179e0:	00007006 	br	17ba4 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   179e4:	0005303a 	rdctl	r2,status
   179e8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   179ec:	e0fffc17 	ldw	r3,-16(fp)
   179f0:	00bfff84 	movi	r2,-2
   179f4:	1884703a 	and	r2,r3,r2
   179f8:	1001703a 	wrctl	status,r2
  
  return context;
   179fc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   17a00:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   17a04:	e0bffd17 	ldw	r2,-12(fp)
   17a08:	10800117 	ldw	r2,4(r2)
   17a0c:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   17a10:	e0bff817 	ldw	r2,-32(fp)
   17a14:	1080058b 	ldhu	r2,22(r2)
   17a18:	10bfffcc 	andi	r2,r2,65535
   17a1c:	10001e26 	beq	r2,zero,17a98 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   17a20:	e0bff817 	ldw	r2,-32(fp)
   17a24:	10800417 	ldw	r2,16(r2)
   17a28:	11000104 	addi	r4,r2,4
   17a2c:	e0fff817 	ldw	r3,-32(fp)
   17a30:	19000415 	stw	r4,16(r3)
   17a34:	10800017 	ldw	r2,0(r2)
   17a38:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   17a3c:	e0bff817 	ldw	r2,-32(fp)
   17a40:	1080058b 	ldhu	r2,22(r2)
   17a44:	10bfffc4 	addi	r2,r2,-1
   17a48:	1007883a 	mov	r3,r2
   17a4c:	e0bff817 	ldw	r2,-32(fp)
   17a50:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   17a54:	e0bff817 	ldw	r2,-32(fp)
   17a58:	10c00417 	ldw	r3,16(r2)
   17a5c:	e0bff817 	ldw	r2,-32(fp)
   17a60:	10800217 	ldw	r2,8(r2)
   17a64:	1880041e 	bne	r3,r2,17a78 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
   17a68:	e0bff817 	ldw	r2,-32(fp)
   17a6c:	10c00117 	ldw	r3,4(r2)
   17a70:	e0bff817 	ldw	r2,-32(fp)
   17a74:	10c00415 	stw	r3,16(r2)
   17a78:	e0bff617 	ldw	r2,-40(fp)
   17a7c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17a80:	e0bff717 	ldw	r2,-36(fp)
   17a84:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   17a88:	e0bfff17 	ldw	r2,-4(fp)
   17a8c:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   17a90:	e0bff517 	ldw	r2,-44(fp)
   17a94:	00004306 	br	17ba4 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   17a98:	d0a82d17 	ldw	r2,-24396(gp)
   17a9c:	d0e82d17 	ldw	r3,-24396(gp)
   17aa0:	18c00c03 	ldbu	r3,48(r3)
   17aa4:	18c00114 	ori	r3,r3,4
   17aa8:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   17aac:	d0a82d17 	ldw	r2,-24396(gp)
   17ab0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   17ab4:	d0a82d17 	ldw	r2,-24396(gp)
   17ab8:	e0fffe0b 	ldhu	r3,-8(fp)
   17abc:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   17ac0:	e13ffd17 	ldw	r4,-12(fp)
   17ac4:	00143780 	call	14378 <OS_EventTaskWait>
   17ac8:	e0bff617 	ldw	r2,-40(fp)
   17acc:	e0bffb15 	stw	r2,-20(fp)
   17ad0:	e0bffb17 	ldw	r2,-20(fp)
   17ad4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   17ad8:	0014c2c0 	call	14c2c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17adc:	0005303a 	rdctl	r2,status
   17ae0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17ae4:	e0fff917 	ldw	r3,-28(fp)
   17ae8:	00bfff84 	movi	r2,-2
   17aec:	1884703a 	and	r2,r3,r2
   17af0:	1001703a 	wrctl	status,r2
  
  return context;
   17af4:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   17af8:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   17afc:	d0a82d17 	ldw	r2,-24396(gp)
   17b00:	10800c43 	ldbu	r2,49(r2)
   17b04:	10803fcc 	andi	r2,r2,255
   17b08:	10000326 	beq	r2,zero,17b18 <OSQPend+0x1ec>
   17b0c:	108000a0 	cmpeqi	r2,r2,2
   17b10:	1000071e 	bne	r2,zero,17b30 <OSQPend+0x204>
   17b14:	00000b06 	br	17b44 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   17b18:	d0a82d17 	ldw	r2,-24396(gp)
   17b1c:	10800917 	ldw	r2,36(r2)
   17b20:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   17b24:	e0bfff17 	ldw	r2,-4(fp)
   17b28:	10000005 	stb	zero,0(r2)
             break;
   17b2c:	00000e06 	br	17b68 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   17b30:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   17b34:	e0bfff17 	ldw	r2,-4(fp)
   17b38:	00c00384 	movi	r3,14
   17b3c:	10c00005 	stb	r3,0(r2)
             break;
   17b40:	00000906 	br	17b68 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   17b44:	d0a82d17 	ldw	r2,-24396(gp)
   17b48:	e17ffd17 	ldw	r5,-12(fp)
   17b4c:	1009883a 	mov	r4,r2
   17b50:	00145d80 	call	145d8 <OS_EventTaskRemove>
             pmsg = (void *)0;
   17b54:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   17b58:	e0bfff17 	ldw	r2,-4(fp)
   17b5c:	00c00284 	movi	r3,10
   17b60:	10c00005 	stb	r3,0(r2)
             break;
   17b64:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   17b68:	d0a82d17 	ldw	r2,-24396(gp)
   17b6c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   17b70:	d0a82d17 	ldw	r2,-24396(gp)
   17b74:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   17b78:	d0a82d17 	ldw	r2,-24396(gp)
   17b7c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   17b80:	d0a82d17 	ldw	r2,-24396(gp)
   17b84:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   17b88:	d0a82d17 	ldw	r2,-24396(gp)
   17b8c:	10000915 	stw	zero,36(r2)
   17b90:	e0bff617 	ldw	r2,-40(fp)
   17b94:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17b98:	e0bffa17 	ldw	r2,-24(fp)
   17b9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   17ba0:	e0bff517 	ldw	r2,-44(fp)
}
   17ba4:	e037883a 	mov	sp,fp
   17ba8:	dfc00117 	ldw	ra,4(sp)
   17bac:	df000017 	ldw	fp,0(sp)
   17bb0:	dec00204 	addi	sp,sp,8
   17bb4:	f800283a 	ret

00017bb8 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   17bb8:	defff604 	addi	sp,sp,-40
   17bbc:	dfc00915 	stw	ra,36(sp)
   17bc0:	df000815 	stw	fp,32(sp)
   17bc4:	df000804 	addi	fp,sp,32
   17bc8:	e13ffd15 	stw	r4,-12(fp)
   17bcc:	2805883a 	mov	r2,r5
   17bd0:	e1bfff15 	stw	r6,-4(fp)
   17bd4:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   17bd8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   17bdc:	e0bfff17 	ldw	r2,-4(fp)
   17be0:	1000021e 	bne	r2,zero,17bec <OSQPendAbort+0x34>
        return (0);
   17be4:	0005883a 	mov	r2,zero
   17be8:	00004906 	br	17d10 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   17bec:	e0bffd17 	ldw	r2,-12(fp)
   17bf0:	1000051e 	bne	r2,zero,17c08 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   17bf4:	e0bfff17 	ldw	r2,-4(fp)
   17bf8:	00c00104 	movi	r3,4
   17bfc:	10c00005 	stb	r3,0(r2)
        return (0);
   17c00:	0005883a 	mov	r2,zero
   17c04:	00004206 	br	17d10 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   17c08:	e0bffd17 	ldw	r2,-12(fp)
   17c0c:	10800003 	ldbu	r2,0(r2)
   17c10:	10803fcc 	andi	r2,r2,255
   17c14:	108000a0 	cmpeqi	r2,r2,2
   17c18:	1000051e 	bne	r2,zero,17c30 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   17c1c:	e0bfff17 	ldw	r2,-4(fp)
   17c20:	00c00044 	movi	r3,1
   17c24:	10c00005 	stb	r3,0(r2)
        return (0);
   17c28:	0005883a 	mov	r2,zero
   17c2c:	00003806 	br	17d10 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17c30:	0005303a 	rdctl	r2,status
   17c34:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17c38:	e0fffc17 	ldw	r3,-16(fp)
   17c3c:	00bfff84 	movi	r2,-2
   17c40:	1884703a 	and	r2,r3,r2
   17c44:	1001703a 	wrctl	status,r2
  
  return context;
   17c48:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   17c4c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   17c50:	e0bffd17 	ldw	r2,-12(fp)
   17c54:	10800283 	ldbu	r2,10(r2)
   17c58:	10803fcc 	andi	r2,r2,255
   17c5c:	10002526 	beq	r2,zero,17cf4 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   17c60:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   17c64:	e0bffe03 	ldbu	r2,-8(fp)
   17c68:	10800060 	cmpeqi	r2,r2,1
   17c6c:	10000e26 	beq	r2,zero,17ca8 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   17c70:	00000806 	br	17c94 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   17c74:	01c00084 	movi	r7,2
   17c78:	01800104 	movi	r6,4
   17c7c:	000b883a 	mov	r5,zero
   17c80:	e13ffd17 	ldw	r4,-12(fp)
   17c84:	00141e00 	call	141e0 <OS_EventTaskRdy>
                     nbr_tasks++;
   17c88:	e0bff803 	ldbu	r2,-32(fp)
   17c8c:	10800044 	addi	r2,r2,1
   17c90:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   17c94:	e0bffd17 	ldw	r2,-12(fp)
   17c98:	10800283 	ldbu	r2,10(r2)
   17c9c:	10803fcc 	andi	r2,r2,255
   17ca0:	103ff41e 	bne	r2,zero,17c74 <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   17ca4:	00000906 	br	17ccc <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   17ca8:	01c00084 	movi	r7,2
   17cac:	01800104 	movi	r6,4
   17cb0:	000b883a 	mov	r5,zero
   17cb4:	e13ffd17 	ldw	r4,-12(fp)
   17cb8:	00141e00 	call	141e0 <OS_EventTaskRdy>
                 nbr_tasks++;
   17cbc:	e0bff803 	ldbu	r2,-32(fp)
   17cc0:	10800044 	addi	r2,r2,1
   17cc4:	e0bff805 	stb	r2,-32(fp)
                 break;
   17cc8:	0001883a 	nop
   17ccc:	e0bff917 	ldw	r2,-28(fp)
   17cd0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17cd4:	e0bffa17 	ldw	r2,-24(fp)
   17cd8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   17cdc:	0014c2c0 	call	14c2c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   17ce0:	e0bfff17 	ldw	r2,-4(fp)
   17ce4:	00c00384 	movi	r3,14
   17ce8:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   17cec:	e0bff803 	ldbu	r2,-32(fp)
   17cf0:	00000706 	br	17d10 <OSQPendAbort+0x158>
   17cf4:	e0bff917 	ldw	r2,-28(fp)
   17cf8:	e0bffb15 	stw	r2,-20(fp)
   17cfc:	e0bffb17 	ldw	r2,-20(fp)
   17d00:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   17d04:	e0bfff17 	ldw	r2,-4(fp)
   17d08:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   17d0c:	0005883a 	mov	r2,zero
}
   17d10:	e037883a 	mov	sp,fp
   17d14:	dfc00117 	ldw	ra,4(sp)
   17d18:	df000017 	ldw	fp,0(sp)
   17d1c:	dec00204 	addi	sp,sp,8
   17d20:	f800283a 	ret

00017d24 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   17d24:	defff604 	addi	sp,sp,-40
   17d28:	dfc00915 	stw	ra,36(sp)
   17d2c:	df000815 	stw	fp,32(sp)
   17d30:	df000804 	addi	fp,sp,32
   17d34:	e13ffe15 	stw	r4,-8(fp)
   17d38:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   17d3c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   17d40:	e0bffe17 	ldw	r2,-8(fp)
   17d44:	1000021e 	bne	r2,zero,17d50 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   17d48:	00800104 	movi	r2,4
   17d4c:	00004a06 	br	17e78 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   17d50:	e0bffe17 	ldw	r2,-8(fp)
   17d54:	10800003 	ldbu	r2,0(r2)
   17d58:	10803fcc 	andi	r2,r2,255
   17d5c:	108000a0 	cmpeqi	r2,r2,2
   17d60:	1000021e 	bne	r2,zero,17d6c <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   17d64:	00800044 	movi	r2,1
   17d68:	00004306 	br	17e78 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17d6c:	0005303a 	rdctl	r2,status
   17d70:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17d74:	e0fffd17 	ldw	r3,-12(fp)
   17d78:	00bfff84 	movi	r2,-2
   17d7c:	1884703a 	and	r2,r3,r2
   17d80:	1001703a 	wrctl	status,r2
  
  return context;
   17d84:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   17d88:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   17d8c:	e0bffe17 	ldw	r2,-8(fp)
   17d90:	10800283 	ldbu	r2,10(r2)
   17d94:	10803fcc 	andi	r2,r2,255
   17d98:	10000c26 	beq	r2,zero,17dcc <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   17d9c:	000f883a 	mov	r7,zero
   17da0:	01800104 	movi	r6,4
   17da4:	e17fff17 	ldw	r5,-4(fp)
   17da8:	e13ffe17 	ldw	r4,-8(fp)
   17dac:	00141e00 	call	141e0 <OS_EventTaskRdy>
   17db0:	e0bff817 	ldw	r2,-32(fp)
   17db4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17db8:	e0bff917 	ldw	r2,-28(fp)
   17dbc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   17dc0:	0014c2c0 	call	14c2c <OS_Sched>
        return (OS_ERR_NONE);
   17dc4:	0005883a 	mov	r2,zero
   17dc8:	00002b06 	br	17e78 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   17dcc:	e0bffe17 	ldw	r2,-8(fp)
   17dd0:	10800117 	ldw	r2,4(r2)
   17dd4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   17dd8:	e0bffb17 	ldw	r2,-20(fp)
   17ddc:	10c0058b 	ldhu	r3,22(r2)
   17de0:	e0bffb17 	ldw	r2,-20(fp)
   17de4:	1080050b 	ldhu	r2,20(r2)
   17de8:	18ffffcc 	andi	r3,r3,65535
   17dec:	10bfffcc 	andi	r2,r2,65535
   17df0:	18800636 	bltu	r3,r2,17e0c <OSQPost+0xe8>
   17df4:	e0bff817 	ldw	r2,-32(fp)
   17df8:	e0bffa15 	stw	r2,-24(fp)
   17dfc:	e0bffa17 	ldw	r2,-24(fp)
   17e00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   17e04:	00800784 	movi	r2,30
   17e08:	00001b06 	br	17e78 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   17e0c:	e0bffb17 	ldw	r2,-20(fp)
   17e10:	10800317 	ldw	r2,12(r2)
   17e14:	11000104 	addi	r4,r2,4
   17e18:	e0fffb17 	ldw	r3,-20(fp)
   17e1c:	19000315 	stw	r4,12(r3)
   17e20:	e0ffff17 	ldw	r3,-4(fp)
   17e24:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   17e28:	e0bffb17 	ldw	r2,-20(fp)
   17e2c:	1080058b 	ldhu	r2,22(r2)
   17e30:	10800044 	addi	r2,r2,1
   17e34:	1007883a 	mov	r3,r2
   17e38:	e0bffb17 	ldw	r2,-20(fp)
   17e3c:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   17e40:	e0bffb17 	ldw	r2,-20(fp)
   17e44:	10c00317 	ldw	r3,12(r2)
   17e48:	e0bffb17 	ldw	r2,-20(fp)
   17e4c:	10800217 	ldw	r2,8(r2)
   17e50:	1880041e 	bne	r3,r2,17e64 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   17e54:	e0bffb17 	ldw	r2,-20(fp)
   17e58:	10c00117 	ldw	r3,4(r2)
   17e5c:	e0bffb17 	ldw	r2,-20(fp)
   17e60:	10c00315 	stw	r3,12(r2)
   17e64:	e0bff817 	ldw	r2,-32(fp)
   17e68:	e0bffc15 	stw	r2,-16(fp)
   17e6c:	e0bffc17 	ldw	r2,-16(fp)
   17e70:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   17e74:	0005883a 	mov	r2,zero
}
   17e78:	e037883a 	mov	sp,fp
   17e7c:	dfc00117 	ldw	ra,4(sp)
   17e80:	df000017 	ldw	fp,0(sp)
   17e84:	dec00204 	addi	sp,sp,8
   17e88:	f800283a 	ret

00017e8c <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   17e8c:	defff604 	addi	sp,sp,-40
   17e90:	dfc00915 	stw	ra,36(sp)
   17e94:	df000815 	stw	fp,32(sp)
   17e98:	df000804 	addi	fp,sp,32
   17e9c:	e13ffe15 	stw	r4,-8(fp)
   17ea0:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17ea4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   17ea8:	e0bffe17 	ldw	r2,-8(fp)
   17eac:	1000021e 	bne	r2,zero,17eb8 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   17eb0:	00800104 	movi	r2,4
   17eb4:	00004c06 	br	17fe8 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   17eb8:	e0bffe17 	ldw	r2,-8(fp)
   17ebc:	10800003 	ldbu	r2,0(r2)
   17ec0:	10803fcc 	andi	r2,r2,255
   17ec4:	108000a0 	cmpeqi	r2,r2,2
   17ec8:	1000021e 	bne	r2,zero,17ed4 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   17ecc:	00800044 	movi	r2,1
   17ed0:	00004506 	br	17fe8 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17ed4:	0005303a 	rdctl	r2,status
   17ed8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17edc:	e0fffd17 	ldw	r3,-12(fp)
   17ee0:	00bfff84 	movi	r2,-2
   17ee4:	1884703a 	and	r2,r3,r2
   17ee8:	1001703a 	wrctl	status,r2
  
  return context;
   17eec:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   17ef0:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   17ef4:	e0bffe17 	ldw	r2,-8(fp)
   17ef8:	10800283 	ldbu	r2,10(r2)
   17efc:	10803fcc 	andi	r2,r2,255
   17f00:	10000c26 	beq	r2,zero,17f34 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   17f04:	000f883a 	mov	r7,zero
   17f08:	01800104 	movi	r6,4
   17f0c:	e17fff17 	ldw	r5,-4(fp)
   17f10:	e13ffe17 	ldw	r4,-8(fp)
   17f14:	00141e00 	call	141e0 <OS_EventTaskRdy>
   17f18:	e0bff817 	ldw	r2,-32(fp)
   17f1c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17f20:	e0bff917 	ldw	r2,-28(fp)
   17f24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   17f28:	0014c2c0 	call	14c2c <OS_Sched>
        return (OS_ERR_NONE);
   17f2c:	0005883a 	mov	r2,zero
   17f30:	00002d06 	br	17fe8 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   17f34:	e0bffe17 	ldw	r2,-8(fp)
   17f38:	10800117 	ldw	r2,4(r2)
   17f3c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   17f40:	e0bffb17 	ldw	r2,-20(fp)
   17f44:	10c0058b 	ldhu	r3,22(r2)
   17f48:	e0bffb17 	ldw	r2,-20(fp)
   17f4c:	1080050b 	ldhu	r2,20(r2)
   17f50:	18ffffcc 	andi	r3,r3,65535
   17f54:	10bfffcc 	andi	r2,r2,65535
   17f58:	18800636 	bltu	r3,r2,17f74 <OSQPostFront+0xe8>
   17f5c:	e0bff817 	ldw	r2,-32(fp)
   17f60:	e0bffa15 	stw	r2,-24(fp)
   17f64:	e0bffa17 	ldw	r2,-24(fp)
   17f68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   17f6c:	00800784 	movi	r2,30
   17f70:	00001d06 	br	17fe8 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   17f74:	e0bffb17 	ldw	r2,-20(fp)
   17f78:	10c00417 	ldw	r3,16(r2)
   17f7c:	e0bffb17 	ldw	r2,-20(fp)
   17f80:	10800117 	ldw	r2,4(r2)
   17f84:	1880041e 	bne	r3,r2,17f98 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   17f88:	e0bffb17 	ldw	r2,-20(fp)
   17f8c:	10c00217 	ldw	r3,8(r2)
   17f90:	e0bffb17 	ldw	r2,-20(fp)
   17f94:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   17f98:	e0bffb17 	ldw	r2,-20(fp)
   17f9c:	10800417 	ldw	r2,16(r2)
   17fa0:	10ffff04 	addi	r3,r2,-4
   17fa4:	e0bffb17 	ldw	r2,-20(fp)
   17fa8:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   17fac:	e0bffb17 	ldw	r2,-20(fp)
   17fb0:	10800417 	ldw	r2,16(r2)
   17fb4:	e0ffff17 	ldw	r3,-4(fp)
   17fb8:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   17fbc:	e0bffb17 	ldw	r2,-20(fp)
   17fc0:	1080058b 	ldhu	r2,22(r2)
   17fc4:	10800044 	addi	r2,r2,1
   17fc8:	1007883a 	mov	r3,r2
   17fcc:	e0bffb17 	ldw	r2,-20(fp)
   17fd0:	10c0058d 	sth	r3,22(r2)
   17fd4:	e0bff817 	ldw	r2,-32(fp)
   17fd8:	e0bffc15 	stw	r2,-16(fp)
   17fdc:	e0bffc17 	ldw	r2,-16(fp)
   17fe0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   17fe4:	0005883a 	mov	r2,zero
}
   17fe8:	e037883a 	mov	sp,fp
   17fec:	dfc00117 	ldw	ra,4(sp)
   17ff0:	df000017 	ldw	fp,0(sp)
   17ff4:	dec00204 	addi	sp,sp,8
   17ff8:	f800283a 	ret

00017ffc <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   17ffc:	defff504 	addi	sp,sp,-44
   18000:	dfc00a15 	stw	ra,40(sp)
   18004:	df000915 	stw	fp,36(sp)
   18008:	df000904 	addi	fp,sp,36
   1800c:	e13ffd15 	stw	r4,-12(fp)
   18010:	e17ffe15 	stw	r5,-8(fp)
   18014:	3005883a 	mov	r2,r6
   18018:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1801c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   18020:	e0bffd17 	ldw	r2,-12(fp)
   18024:	1000021e 	bne	r2,zero,18030 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   18028:	00800104 	movi	r2,4
   1802c:	00007106 	br	181f4 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   18030:	e0bffd17 	ldw	r2,-12(fp)
   18034:	10800003 	ldbu	r2,0(r2)
   18038:	10803fcc 	andi	r2,r2,255
   1803c:	108000a0 	cmpeqi	r2,r2,2
   18040:	1000021e 	bne	r2,zero,1804c <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   18044:	00800044 	movi	r2,1
   18048:	00006a06 	br	181f4 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1804c:	0005303a 	rdctl	r2,status
   18050:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18054:	e0fffc17 	ldw	r3,-16(fp)
   18058:	00bfff84 	movi	r2,-2
   1805c:	1884703a 	and	r2,r3,r2
   18060:	1001703a 	wrctl	status,r2
  
  return context;
   18064:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   18068:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   1806c:	e0bffd17 	ldw	r2,-12(fp)
   18070:	10800283 	ldbu	r2,10(r2)
   18074:	10803fcc 	andi	r2,r2,255
   18078:	10001d26 	beq	r2,zero,180f0 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   1807c:	e0bfff03 	ldbu	r2,-4(fp)
   18080:	1080004c 	andi	r2,r2,1
   18084:	10000b26 	beq	r2,zero,180b4 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   18088:	00000506 	br	180a0 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1808c:	000f883a 	mov	r7,zero
   18090:	01800104 	movi	r6,4
   18094:	e17ffe17 	ldw	r5,-8(fp)
   18098:	e13ffd17 	ldw	r4,-12(fp)
   1809c:	00141e00 	call	141e0 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   180a0:	e0bffd17 	ldw	r2,-12(fp)
   180a4:	10800283 	ldbu	r2,10(r2)
   180a8:	10803fcc 	andi	r2,r2,255
   180ac:	103ff71e 	bne	r2,zero,1808c <OSQPostOpt+0x90>
   180b0:	00000506 	br	180c8 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   180b4:	000f883a 	mov	r7,zero
   180b8:	01800104 	movi	r6,4
   180bc:	e17ffe17 	ldw	r5,-8(fp)
   180c0:	e13ffd17 	ldw	r4,-12(fp)
   180c4:	00141e00 	call	141e0 <OS_EventTaskRdy>
   180c8:	e0bff717 	ldw	r2,-36(fp)
   180cc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   180d0:	e0bff817 	ldw	r2,-32(fp)
   180d4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   180d8:	e0bfff03 	ldbu	r2,-4(fp)
   180dc:	1080010c 	andi	r2,r2,4
   180e0:	1000011e 	bne	r2,zero,180e8 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   180e4:	0014c2c0 	call	14c2c <OS_Sched>
        }
        return (OS_ERR_NONE);
   180e8:	0005883a 	mov	r2,zero
   180ec:	00004106 	br	181f4 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   180f0:	e0bffd17 	ldw	r2,-12(fp)
   180f4:	10800117 	ldw	r2,4(r2)
   180f8:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   180fc:	e0bffa17 	ldw	r2,-24(fp)
   18100:	10c0058b 	ldhu	r3,22(r2)
   18104:	e0bffa17 	ldw	r2,-24(fp)
   18108:	1080050b 	ldhu	r2,20(r2)
   1810c:	18ffffcc 	andi	r3,r3,65535
   18110:	10bfffcc 	andi	r2,r2,65535
   18114:	18800636 	bltu	r3,r2,18130 <OSQPostOpt+0x134>
   18118:	e0bff717 	ldw	r2,-36(fp)
   1811c:	e0bff915 	stw	r2,-28(fp)
   18120:	e0bff917 	ldw	r2,-28(fp)
   18124:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   18128:	00800784 	movi	r2,30
   1812c:	00003106 	br	181f4 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   18130:	e0bfff03 	ldbu	r2,-4(fp)
   18134:	1080008c 	andi	r2,r2,2
   18138:	10001326 	beq	r2,zero,18188 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   1813c:	e0bffa17 	ldw	r2,-24(fp)
   18140:	10c00417 	ldw	r3,16(r2)
   18144:	e0bffa17 	ldw	r2,-24(fp)
   18148:	10800117 	ldw	r2,4(r2)
   1814c:	1880041e 	bne	r3,r2,18160 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   18150:	e0bffa17 	ldw	r2,-24(fp)
   18154:	10c00217 	ldw	r3,8(r2)
   18158:	e0bffa17 	ldw	r2,-24(fp)
   1815c:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   18160:	e0bffa17 	ldw	r2,-24(fp)
   18164:	10800417 	ldw	r2,16(r2)
   18168:	10ffff04 	addi	r3,r2,-4
   1816c:	e0bffa17 	ldw	r2,-24(fp)
   18170:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   18174:	e0bffa17 	ldw	r2,-24(fp)
   18178:	10800417 	ldw	r2,16(r2)
   1817c:	e0fffe17 	ldw	r3,-8(fp)
   18180:	10c00015 	stw	r3,0(r2)
   18184:	00001006 	br	181c8 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   18188:	e0bffa17 	ldw	r2,-24(fp)
   1818c:	10800317 	ldw	r2,12(r2)
   18190:	11000104 	addi	r4,r2,4
   18194:	e0fffa17 	ldw	r3,-24(fp)
   18198:	19000315 	stw	r4,12(r3)
   1819c:	e0fffe17 	ldw	r3,-8(fp)
   181a0:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   181a4:	e0bffa17 	ldw	r2,-24(fp)
   181a8:	10c00317 	ldw	r3,12(r2)
   181ac:	e0bffa17 	ldw	r2,-24(fp)
   181b0:	10800217 	ldw	r2,8(r2)
   181b4:	1880041e 	bne	r3,r2,181c8 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   181b8:	e0bffa17 	ldw	r2,-24(fp)
   181bc:	10c00117 	ldw	r3,4(r2)
   181c0:	e0bffa17 	ldw	r2,-24(fp)
   181c4:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   181c8:	e0bffa17 	ldw	r2,-24(fp)
   181cc:	1080058b 	ldhu	r2,22(r2)
   181d0:	10800044 	addi	r2,r2,1
   181d4:	1007883a 	mov	r3,r2
   181d8:	e0bffa17 	ldw	r2,-24(fp)
   181dc:	10c0058d 	sth	r3,22(r2)
   181e0:	e0bff717 	ldw	r2,-36(fp)
   181e4:	e0bffb15 	stw	r2,-20(fp)
   181e8:	e0bffb17 	ldw	r2,-20(fp)
   181ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   181f0:	0005883a 	mov	r2,zero
}
   181f4:	e037883a 	mov	sp,fp
   181f8:	dfc00117 	ldw	ra,4(sp)
   181fc:	df000017 	ldw	fp,0(sp)
   18200:	dec00204 	addi	sp,sp,8
   18204:	f800283a 	ret

00018208 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   18208:	defff604 	addi	sp,sp,-40
   1820c:	df000915 	stw	fp,36(sp)
   18210:	df000904 	addi	fp,sp,36
   18214:	e13ffe15 	stw	r4,-8(fp)
   18218:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1821c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   18220:	e0bffe17 	ldw	r2,-8(fp)
   18224:	1000021e 	bne	r2,zero,18230 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   18228:	00800104 	movi	r2,4
   1822c:	00004906 	br	18354 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   18230:	e0bfff17 	ldw	r2,-4(fp)
   18234:	1000021e 	bne	r2,zero,18240 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   18238:	00800244 	movi	r2,9
   1823c:	00004506 	br	18354 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   18240:	e0bffe17 	ldw	r2,-8(fp)
   18244:	10800003 	ldbu	r2,0(r2)
   18248:	10803fcc 	andi	r2,r2,255
   1824c:	108000a0 	cmpeqi	r2,r2,2
   18250:	1000021e 	bne	r2,zero,1825c <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   18254:	00800044 	movi	r2,1
   18258:	00003e06 	br	18354 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1825c:	0005303a 	rdctl	r2,status
   18260:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18264:	e0fffd17 	ldw	r3,-12(fp)
   18268:	00bfff84 	movi	r2,-2
   1826c:	1884703a 	and	r2,r3,r2
   18270:	1001703a 	wrctl	status,r2
  
  return context;
   18274:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   18278:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   1827c:	e0bffe17 	ldw	r2,-8(fp)
   18280:	10c00283 	ldbu	r3,10(r2)
   18284:	e0bfff17 	ldw	r2,-4(fp)
   18288:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   1828c:	e0bffe17 	ldw	r2,-8(fp)
   18290:	108002c4 	addi	r2,r2,11
   18294:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   18298:	e0bfff17 	ldw	r2,-4(fp)
   1829c:	10800204 	addi	r2,r2,8
   182a0:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   182a4:	e03ff705 	stb	zero,-36(fp)
   182a8:	00000b06 	br	182d8 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   182ac:	e0bff917 	ldw	r2,-28(fp)
   182b0:	10c00044 	addi	r3,r2,1
   182b4:	e0fff915 	stw	r3,-28(fp)
   182b8:	e0fff817 	ldw	r3,-32(fp)
   182bc:	19000044 	addi	r4,r3,1
   182c0:	e13ff815 	stw	r4,-32(fp)
   182c4:	18c00003 	ldbu	r3,0(r3)
   182c8:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   182cc:	e0bff703 	ldbu	r2,-36(fp)
   182d0:	10800044 	addi	r2,r2,1
   182d4:	e0bff705 	stb	r2,-36(fp)
   182d8:	e0bff703 	ldbu	r2,-36(fp)
   182dc:	108000f0 	cmpltui	r2,r2,3
   182e0:	103ff21e 	bne	r2,zero,182ac <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   182e4:	e0bffe17 	ldw	r2,-8(fp)
   182e8:	10800117 	ldw	r2,4(r2)
   182ec:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   182f0:	e0bffc17 	ldw	r2,-16(fp)
   182f4:	1080058b 	ldhu	r2,22(r2)
   182f8:	10bfffcc 	andi	r2,r2,65535
   182fc:	10000626 	beq	r2,zero,18318 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   18300:	e0bffc17 	ldw	r2,-16(fp)
   18304:	10800417 	ldw	r2,16(r2)
   18308:	10c00017 	ldw	r3,0(r2)
   1830c:	e0bfff17 	ldw	r2,-4(fp)
   18310:	10c00015 	stw	r3,0(r2)
   18314:	00000206 	br	18320 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   18318:	e0bfff17 	ldw	r2,-4(fp)
   1831c:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   18320:	e0bffc17 	ldw	r2,-16(fp)
   18324:	10c0058b 	ldhu	r3,22(r2)
   18328:	e0bfff17 	ldw	r2,-4(fp)
   1832c:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   18330:	e0bffc17 	ldw	r2,-16(fp)
   18334:	10c0050b 	ldhu	r3,20(r2)
   18338:	e0bfff17 	ldw	r2,-4(fp)
   1833c:	10c0018d 	sth	r3,6(r2)
   18340:	e0bffa17 	ldw	r2,-24(fp)
   18344:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18348:	e0bffb17 	ldw	r2,-20(fp)
   1834c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18350:	0005883a 	mov	r2,zero
}
   18354:	e037883a 	mov	sp,fp
   18358:	df000017 	ldw	fp,0(sp)
   1835c:	dec00104 	addi	sp,sp,4
   18360:	f800283a 	ret

00018364 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   18364:	defffb04 	addi	sp,sp,-20
   18368:	dfc00415 	stw	ra,16(sp)
   1836c:	df000315 	stw	fp,12(sp)
   18370:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   18374:	01407804 	movi	r5,480
   18378:	010000f4 	movhi	r4,3
   1837c:	210c6404 	addi	r4,r4,12688
   18380:	0014b700 	call	14b70 <OS_MemClr>
    pq1 = &OSQTbl[0];
   18384:	008000f4 	movhi	r2,3
   18388:	108c6404 	addi	r2,r2,12688
   1838c:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   18390:	008000f4 	movhi	r2,3
   18394:	108c6a04 	addi	r2,r2,12712
   18398:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   1839c:	e03ffd0d 	sth	zero,-12(fp)
   183a0:	00000c06 	br	183d4 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   183a4:	e0bffe17 	ldw	r2,-8(fp)
   183a8:	e0ffff17 	ldw	r3,-4(fp)
   183ac:	10c00015 	stw	r3,0(r2)
        pq1++;
   183b0:	e0bffe17 	ldw	r2,-8(fp)
   183b4:	10800604 	addi	r2,r2,24
   183b8:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   183bc:	e0bfff17 	ldw	r2,-4(fp)
   183c0:	10800604 	addi	r2,r2,24
   183c4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   183c8:	e0bffd0b 	ldhu	r2,-12(fp)
   183cc:	10800044 	addi	r2,r2,1
   183d0:	e0bffd0d 	sth	r2,-12(fp)
   183d4:	e0bffd0b 	ldhu	r2,-12(fp)
   183d8:	108004f0 	cmpltui	r2,r2,19
   183dc:	103ff11e 	bne	r2,zero,183a4 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   183e0:	e0bffe17 	ldw	r2,-8(fp)
   183e4:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   183e8:	008000f4 	movhi	r2,3
   183ec:	108c6404 	addi	r2,r2,12688
   183f0:	d0a82915 	stw	r2,-24412(gp)
#endif
}
   183f4:	0001883a 	nop
   183f8:	e037883a 	mov	sp,fp
   183fc:	dfc00117 	ldw	ra,4(sp)
   18400:	df000017 	ldw	fp,0(sp)
   18404:	dec00204 	addi	sp,sp,8
   18408:	f800283a 	ret

0001840c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   1840c:	defffa04 	addi	sp,sp,-24
   18410:	df000515 	stw	fp,20(sp)
   18414:	df000504 	addi	fp,sp,20
   18418:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1841c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   18420:	e0bfff17 	ldw	r2,-4(fp)
   18424:	1000021e 	bne	r2,zero,18430 <OSSemAccept+0x24>
        return (0);
   18428:	0005883a 	mov	r2,zero
   1842c:	00001f06 	br	184ac <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   18430:	e0bfff17 	ldw	r2,-4(fp)
   18434:	10800003 	ldbu	r2,0(r2)
   18438:	10803fcc 	andi	r2,r2,255
   1843c:	108000e0 	cmpeqi	r2,r2,3
   18440:	1000021e 	bne	r2,zero,1844c <OSSemAccept+0x40>
        return (0);
   18444:	0005883a 	mov	r2,zero
   18448:	00001806 	br	184ac <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1844c:	0005303a 	rdctl	r2,status
   18450:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18454:	e0fffe17 	ldw	r3,-8(fp)
   18458:	00bfff84 	movi	r2,-2
   1845c:	1884703a 	and	r2,r3,r2
   18460:	1001703a 	wrctl	status,r2
  
  return context;
   18464:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   18468:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   1846c:	e0bfff17 	ldw	r2,-4(fp)
   18470:	1080020b 	ldhu	r2,8(r2)
   18474:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   18478:	e0bffd0b 	ldhu	r2,-12(fp)
   1847c:	10000626 	beq	r2,zero,18498 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   18480:	e0bfff17 	ldw	r2,-4(fp)
   18484:	1080020b 	ldhu	r2,8(r2)
   18488:	10bfffc4 	addi	r2,r2,-1
   1848c:	1007883a 	mov	r3,r2
   18490:	e0bfff17 	ldw	r2,-4(fp)
   18494:	10c0020d 	sth	r3,8(r2)
   18498:	e0bffb17 	ldw	r2,-20(fp)
   1849c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   184a0:	e0bffc17 	ldw	r2,-16(fp)
   184a4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   184a8:	e0bffd0b 	ldhu	r2,-12(fp)
}
   184ac:	e037883a 	mov	sp,fp
   184b0:	df000017 	ldw	fp,0(sp)
   184b4:	dec00104 	addi	sp,sp,4
   184b8:	f800283a 	ret

000184bc <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   184bc:	defff904 	addi	sp,sp,-28
   184c0:	dfc00615 	stw	ra,24(sp)
   184c4:	df000515 	stw	fp,20(sp)
   184c8:	df000504 	addi	fp,sp,20
   184cc:	2005883a 	mov	r2,r4
   184d0:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   184d4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   184d8:	d0a82c03 	ldbu	r2,-24400(gp)
   184dc:	10803fcc 	andi	r2,r2,255
   184e0:	10000226 	beq	r2,zero,184ec <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   184e4:	0005883a 	mov	r2,zero
   184e8:	00002506 	br	18580 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   184ec:	0005303a 	rdctl	r2,status
   184f0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   184f4:	e0fffe17 	ldw	r3,-8(fp)
   184f8:	00bfff84 	movi	r2,-2
   184fc:	1884703a 	and	r2,r3,r2
   18500:	1001703a 	wrctl	status,r2
  
  return context;
   18504:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   18508:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   1850c:	d0a82b17 	ldw	r2,-24404(gp)
   18510:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   18514:	d0a82b17 	ldw	r2,-24404(gp)
   18518:	10000326 	beq	r2,zero,18528 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   1851c:	d0a82b17 	ldw	r2,-24404(gp)
   18520:	10800117 	ldw	r2,4(r2)
   18524:	d0a82b15 	stw	r2,-24404(gp)
   18528:	e0bffb17 	ldw	r2,-20(fp)
   1852c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18530:	e0bffc17 	ldw	r2,-16(fp)
   18534:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   18538:	e0bffd17 	ldw	r2,-12(fp)
   1853c:	10000f26 	beq	r2,zero,1857c <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   18540:	e0bffd17 	ldw	r2,-12(fp)
   18544:	00c000c4 	movi	r3,3
   18548:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   1854c:	e0bffd17 	ldw	r2,-12(fp)
   18550:	e0ffff0b 	ldhu	r3,-4(fp)
   18554:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   18558:	e0bffd17 	ldw	r2,-12(fp)
   1855c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   18560:	e0bffd17 	ldw	r2,-12(fp)
   18564:	00c00fc4 	movi	r3,63
   18568:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   1856c:	e0bffd17 	ldw	r2,-12(fp)
   18570:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   18574:	e13ffd17 	ldw	r4,-12(fp)
   18578:	00147900 	call	14790 <OS_EventWaitListInit>
    }
    return (pevent);
   1857c:	e0bffd17 	ldw	r2,-12(fp)
}
   18580:	e037883a 	mov	sp,fp
   18584:	dfc00117 	ldw	ra,4(sp)
   18588:	df000017 	ldw	fp,0(sp)
   1858c:	dec00204 	addi	sp,sp,8
   18590:	f800283a 	ret

00018594 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   18594:	defff304 	addi	sp,sp,-52
   18598:	dfc00c15 	stw	ra,48(sp)
   1859c:	df000b15 	stw	fp,44(sp)
   185a0:	df000b04 	addi	fp,sp,44
   185a4:	e13ffd15 	stw	r4,-12(fp)
   185a8:	2805883a 	mov	r2,r5
   185ac:	e1bfff15 	stw	r6,-4(fp)
   185b0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   185b4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   185b8:	e0bfff17 	ldw	r2,-4(fp)
   185bc:	1000021e 	bne	r2,zero,185c8 <OSSemDel+0x34>
        return (pevent);
   185c0:	e0bffd17 	ldw	r2,-12(fp)
   185c4:	00007e06 	br	187c0 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   185c8:	e0bffd17 	ldw	r2,-12(fp)
   185cc:	1000051e 	bne	r2,zero,185e4 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   185d0:	e0bfff17 	ldw	r2,-4(fp)
   185d4:	00c00104 	movi	r3,4
   185d8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   185dc:	e0bffd17 	ldw	r2,-12(fp)
   185e0:	00007706 	br	187c0 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   185e4:	e0bffd17 	ldw	r2,-12(fp)
   185e8:	10800003 	ldbu	r2,0(r2)
   185ec:	10803fcc 	andi	r2,r2,255
   185f0:	108000e0 	cmpeqi	r2,r2,3
   185f4:	1000051e 	bne	r2,zero,1860c <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   185f8:	e0bfff17 	ldw	r2,-4(fp)
   185fc:	00c00044 	movi	r3,1
   18600:	10c00005 	stb	r3,0(r2)
        return (pevent);
   18604:	e0bffd17 	ldw	r2,-12(fp)
   18608:	00006d06 	br	187c0 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1860c:	d0a82c03 	ldbu	r2,-24400(gp)
   18610:	10803fcc 	andi	r2,r2,255
   18614:	10000526 	beq	r2,zero,1862c <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   18618:	e0bfff17 	ldw	r2,-4(fp)
   1861c:	00c003c4 	movi	r3,15
   18620:	10c00005 	stb	r3,0(r2)
        return (pevent);
   18624:	e0bffd17 	ldw	r2,-12(fp)
   18628:	00006506 	br	187c0 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1862c:	0005303a 	rdctl	r2,status
   18630:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18634:	e0fffc17 	ldw	r3,-16(fp)
   18638:	00bfff84 	movi	r2,-2
   1863c:	1884703a 	and	r2,r3,r2
   18640:	1001703a 	wrctl	status,r2
  
  return context;
   18644:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   18648:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   1864c:	e0bffd17 	ldw	r2,-12(fp)
   18650:	10800283 	ldbu	r2,10(r2)
   18654:	10803fcc 	andi	r2,r2,255
   18658:	10000326 	beq	r2,zero,18668 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1865c:	00800044 	movi	r2,1
   18660:	e0bff505 	stb	r2,-44(fp)
   18664:	00000106 	br	1866c <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   18668:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   1866c:	e0bffe03 	ldbu	r2,-8(fp)
   18670:	10000326 	beq	r2,zero,18680 <OSSemDel+0xec>
   18674:	10800060 	cmpeqi	r2,r2,1
   18678:	1000281e 	bne	r2,zero,1871c <OSSemDel+0x188>
   1867c:	00004506 	br	18794 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   18680:	e0bff503 	ldbu	r2,-44(fp)
   18684:	1000161e 	bne	r2,zero,186e0 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   18688:	e0bffd17 	ldw	r2,-12(fp)
   1868c:	00c00fc4 	movi	r3,63
   18690:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   18694:	e0bffd17 	ldw	r2,-12(fp)
   18698:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1869c:	e0bffd17 	ldw	r2,-12(fp)
   186a0:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   186a4:	d0e82b17 	ldw	r3,-24404(gp)
   186a8:	e0bffd17 	ldw	r2,-12(fp)
   186ac:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   186b0:	e0bffd17 	ldw	r2,-12(fp)
   186b4:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   186b8:	e0bffd17 	ldw	r2,-12(fp)
   186bc:	d0a82b15 	stw	r2,-24404(gp)
   186c0:	e0bff717 	ldw	r2,-36(fp)
   186c4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   186c8:	e0bff817 	ldw	r2,-32(fp)
   186cc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   186d0:	e0bfff17 	ldw	r2,-4(fp)
   186d4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   186d8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   186dc:	00003706 	br	187bc <OSSemDel+0x228>
   186e0:	e0bff717 	ldw	r2,-36(fp)
   186e4:	e0bff915 	stw	r2,-28(fp)
   186e8:	e0bff917 	ldw	r2,-28(fp)
   186ec:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   186f0:	e0bfff17 	ldw	r2,-4(fp)
   186f4:	00c01244 	movi	r3,73
   186f8:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   186fc:	e0bffd17 	ldw	r2,-12(fp)
   18700:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   18704:	00002d06 	br	187bc <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   18708:	000f883a 	mov	r7,zero
   1870c:	01800044 	movi	r6,1
   18710:	000b883a 	mov	r5,zero
   18714:	e13ffd17 	ldw	r4,-12(fp)
   18718:	00141e00 	call	141e0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   1871c:	e0bffd17 	ldw	r2,-12(fp)
   18720:	10800283 	ldbu	r2,10(r2)
   18724:	10803fcc 	andi	r2,r2,255
   18728:	103ff71e 	bne	r2,zero,18708 <OSSemDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   1872c:	e0bffd17 	ldw	r2,-12(fp)
   18730:	00c00fc4 	movi	r3,63
   18734:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   18738:	e0bffd17 	ldw	r2,-12(fp)
   1873c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   18740:	e0bffd17 	ldw	r2,-12(fp)
   18744:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   18748:	d0e82b17 	ldw	r3,-24404(gp)
   1874c:	e0bffd17 	ldw	r2,-12(fp)
   18750:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   18754:	e0bffd17 	ldw	r2,-12(fp)
   18758:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   1875c:	e0bffd17 	ldw	r2,-12(fp)
   18760:	d0a82b15 	stw	r2,-24404(gp)
   18764:	e0bff717 	ldw	r2,-36(fp)
   18768:	e0bffa15 	stw	r2,-24(fp)
   1876c:	e0bffa17 	ldw	r2,-24(fp)
   18770:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   18774:	e0bff503 	ldbu	r2,-44(fp)
   18778:	10800058 	cmpnei	r2,r2,1
   1877c:	1000011e 	bne	r2,zero,18784 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   18780:	0014c2c0 	call	14c2c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   18784:	e0bfff17 	ldw	r2,-4(fp)
   18788:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   1878c:	e03ff615 	stw	zero,-40(fp)
             break;
   18790:	00000a06 	br	187bc <OSSemDel+0x228>
   18794:	e0bff717 	ldw	r2,-36(fp)
   18798:	e0bffb15 	stw	r2,-20(fp)
   1879c:	e0bffb17 	ldw	r2,-20(fp)
   187a0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   187a4:	e0bfff17 	ldw	r2,-4(fp)
   187a8:	00c001c4 	movi	r3,7
   187ac:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   187b0:	e0bffd17 	ldw	r2,-12(fp)
   187b4:	e0bff615 	stw	r2,-40(fp)
             break;
   187b8:	0001883a 	nop
    }
    return (pevent_return);
   187bc:	e0bff617 	ldw	r2,-40(fp)
}
   187c0:	e037883a 	mov	sp,fp
   187c4:	dfc00117 	ldw	ra,4(sp)
   187c8:	df000017 	ldw	fp,0(sp)
   187cc:	dec00204 	addi	sp,sp,8
   187d0:	f800283a 	ret

000187d4 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   187d4:	defff504 	addi	sp,sp,-44
   187d8:	dfc00a15 	stw	ra,40(sp)
   187dc:	df000915 	stw	fp,36(sp)
   187e0:	df000904 	addi	fp,sp,36
   187e4:	e13ffd15 	stw	r4,-12(fp)
   187e8:	2805883a 	mov	r2,r5
   187ec:	e1bfff15 	stw	r6,-4(fp)
   187f0:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   187f4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   187f8:	e0bfff17 	ldw	r2,-4(fp)
   187fc:	10007226 	beq	r2,zero,189c8 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   18800:	e0bffd17 	ldw	r2,-12(fp)
   18804:	1000041e 	bne	r2,zero,18818 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   18808:	e0bfff17 	ldw	r2,-4(fp)
   1880c:	00c00104 	movi	r3,4
   18810:	10c00005 	stb	r3,0(r2)
        return;
   18814:	00006d06 	br	189cc <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   18818:	e0bffd17 	ldw	r2,-12(fp)
   1881c:	10800003 	ldbu	r2,0(r2)
   18820:	10803fcc 	andi	r2,r2,255
   18824:	108000e0 	cmpeqi	r2,r2,3
   18828:	1000041e 	bne	r2,zero,1883c <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   1882c:	e0bfff17 	ldw	r2,-4(fp)
   18830:	00c00044 	movi	r3,1
   18834:	10c00005 	stb	r3,0(r2)
        return;
   18838:	00006406 	br	189cc <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   1883c:	d0a82c03 	ldbu	r2,-24400(gp)
   18840:	10803fcc 	andi	r2,r2,255
   18844:	10000426 	beq	r2,zero,18858 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   18848:	e0bfff17 	ldw	r2,-4(fp)
   1884c:	00c00084 	movi	r3,2
   18850:	10c00005 	stb	r3,0(r2)
        return;
   18854:	00005d06 	br	189cc <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   18858:	d0a81e03 	ldbu	r2,-24456(gp)
   1885c:	10803fcc 	andi	r2,r2,255
   18860:	10000426 	beq	r2,zero,18874 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   18864:	e0bfff17 	ldw	r2,-4(fp)
   18868:	00c00344 	movi	r3,13
   1886c:	10c00005 	stb	r3,0(r2)
        return;
   18870:	00005606 	br	189cc <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18874:	0005303a 	rdctl	r2,status
   18878:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1887c:	e0fffc17 	ldw	r3,-16(fp)
   18880:	00bfff84 	movi	r2,-2
   18884:	1884703a 	and	r2,r3,r2
   18888:	1001703a 	wrctl	status,r2
  
  return context;
   1888c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   18890:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   18894:	e0bffd17 	ldw	r2,-12(fp)
   18898:	1080020b 	ldhu	r2,8(r2)
   1889c:	10bfffcc 	andi	r2,r2,65535
   188a0:	10000d26 	beq	r2,zero,188d8 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   188a4:	e0bffd17 	ldw	r2,-12(fp)
   188a8:	1080020b 	ldhu	r2,8(r2)
   188ac:	10bfffc4 	addi	r2,r2,-1
   188b0:	1007883a 	mov	r3,r2
   188b4:	e0bffd17 	ldw	r2,-12(fp)
   188b8:	10c0020d 	sth	r3,8(r2)
   188bc:	e0bff717 	ldw	r2,-36(fp)
   188c0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   188c4:	e0bff817 	ldw	r2,-32(fp)
   188c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   188cc:	e0bfff17 	ldw	r2,-4(fp)
   188d0:	10000005 	stb	zero,0(r2)
        return;
   188d4:	00003d06 	br	189cc <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   188d8:	d0a82d17 	ldw	r2,-24396(gp)
   188dc:	d0e82d17 	ldw	r3,-24396(gp)
   188e0:	18c00c03 	ldbu	r3,48(r3)
   188e4:	18c00054 	ori	r3,r3,1
   188e8:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   188ec:	d0a82d17 	ldw	r2,-24396(gp)
   188f0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   188f4:	d0a82d17 	ldw	r2,-24396(gp)
   188f8:	e0fffe0b 	ldhu	r3,-8(fp)
   188fc:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   18900:	e13ffd17 	ldw	r4,-12(fp)
   18904:	00143780 	call	14378 <OS_EventTaskWait>
   18908:	e0bff717 	ldw	r2,-36(fp)
   1890c:	e0bffb15 	stw	r2,-20(fp)
   18910:	e0bffb17 	ldw	r2,-20(fp)
   18914:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   18918:	0014c2c0 	call	14c2c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1891c:	0005303a 	rdctl	r2,status
   18920:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18924:	e0fff917 	ldw	r3,-28(fp)
   18928:	00bfff84 	movi	r2,-2
   1892c:	1884703a 	and	r2,r3,r2
   18930:	1001703a 	wrctl	status,r2
  
  return context;
   18934:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   18938:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   1893c:	d0a82d17 	ldw	r2,-24396(gp)
   18940:	10800c43 	ldbu	r2,49(r2)
   18944:	10803fcc 	andi	r2,r2,255
   18948:	10000326 	beq	r2,zero,18958 <OSSemPend+0x184>
   1894c:	108000a0 	cmpeqi	r2,r2,2
   18950:	1000041e 	bne	r2,zero,18964 <OSSemPend+0x190>
   18954:	00000706 	br	18974 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   18958:	e0bfff17 	ldw	r2,-4(fp)
   1895c:	10000005 	stb	zero,0(r2)
             break;
   18960:	00000c06 	br	18994 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   18964:	e0bfff17 	ldw	r2,-4(fp)
   18968:	00c00384 	movi	r3,14
   1896c:	10c00005 	stb	r3,0(r2)
             break;
   18970:	00000806 	br	18994 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   18974:	d0a82d17 	ldw	r2,-24396(gp)
   18978:	e17ffd17 	ldw	r5,-12(fp)
   1897c:	1009883a 	mov	r4,r2
   18980:	00145d80 	call	145d8 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   18984:	e0bfff17 	ldw	r2,-4(fp)
   18988:	00c00284 	movi	r3,10
   1898c:	10c00005 	stb	r3,0(r2)
             break;
   18990:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   18994:	d0a82d17 	ldw	r2,-24396(gp)
   18998:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   1899c:	d0a82d17 	ldw	r2,-24396(gp)
   189a0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   189a4:	d0a82d17 	ldw	r2,-24396(gp)
   189a8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   189ac:	d0a82d17 	ldw	r2,-24396(gp)
   189b0:	10000815 	stw	zero,32(r2)
   189b4:	e0bff717 	ldw	r2,-36(fp)
   189b8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   189bc:	e0bffa17 	ldw	r2,-24(fp)
   189c0:	1001703a 	wrctl	status,r2
   189c4:	00000106 	br	189cc <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   189c8:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
   189cc:	e037883a 	mov	sp,fp
   189d0:	dfc00117 	ldw	ra,4(sp)
   189d4:	df000017 	ldw	fp,0(sp)
   189d8:	dec00204 	addi	sp,sp,8
   189dc:	f800283a 	ret

000189e0 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   189e0:	defff604 	addi	sp,sp,-40
   189e4:	dfc00915 	stw	ra,36(sp)
   189e8:	df000815 	stw	fp,32(sp)
   189ec:	df000804 	addi	fp,sp,32
   189f0:	e13ffd15 	stw	r4,-12(fp)
   189f4:	2805883a 	mov	r2,r5
   189f8:	e1bfff15 	stw	r6,-4(fp)
   189fc:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18a00:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   18a04:	e0bfff17 	ldw	r2,-4(fp)
   18a08:	1000021e 	bne	r2,zero,18a14 <OSSemPendAbort+0x34>
        return (0);
   18a0c:	0005883a 	mov	r2,zero
   18a10:	00004906 	br	18b38 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   18a14:	e0bffd17 	ldw	r2,-12(fp)
   18a18:	1000051e 	bne	r2,zero,18a30 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   18a1c:	e0bfff17 	ldw	r2,-4(fp)
   18a20:	00c00104 	movi	r3,4
   18a24:	10c00005 	stb	r3,0(r2)
        return (0);
   18a28:	0005883a 	mov	r2,zero
   18a2c:	00004206 	br	18b38 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   18a30:	e0bffd17 	ldw	r2,-12(fp)
   18a34:	10800003 	ldbu	r2,0(r2)
   18a38:	10803fcc 	andi	r2,r2,255
   18a3c:	108000e0 	cmpeqi	r2,r2,3
   18a40:	1000051e 	bne	r2,zero,18a58 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   18a44:	e0bfff17 	ldw	r2,-4(fp)
   18a48:	00c00044 	movi	r3,1
   18a4c:	10c00005 	stb	r3,0(r2)
        return (0);
   18a50:	0005883a 	mov	r2,zero
   18a54:	00003806 	br	18b38 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18a58:	0005303a 	rdctl	r2,status
   18a5c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18a60:	e0fffc17 	ldw	r3,-16(fp)
   18a64:	00bfff84 	movi	r2,-2
   18a68:	1884703a 	and	r2,r3,r2
   18a6c:	1001703a 	wrctl	status,r2
  
  return context;
   18a70:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   18a74:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   18a78:	e0bffd17 	ldw	r2,-12(fp)
   18a7c:	10800283 	ldbu	r2,10(r2)
   18a80:	10803fcc 	andi	r2,r2,255
   18a84:	10002526 	beq	r2,zero,18b1c <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   18a88:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   18a8c:	e0bffe03 	ldbu	r2,-8(fp)
   18a90:	10800060 	cmpeqi	r2,r2,1
   18a94:	10000e26 	beq	r2,zero,18ad0 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   18a98:	00000806 	br	18abc <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   18a9c:	01c00084 	movi	r7,2
   18aa0:	01800044 	movi	r6,1
   18aa4:	000b883a 	mov	r5,zero
   18aa8:	e13ffd17 	ldw	r4,-12(fp)
   18aac:	00141e00 	call	141e0 <OS_EventTaskRdy>
                     nbr_tasks++;
   18ab0:	e0bff803 	ldbu	r2,-32(fp)
   18ab4:	10800044 	addi	r2,r2,1
   18ab8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   18abc:	e0bffd17 	ldw	r2,-12(fp)
   18ac0:	10800283 	ldbu	r2,10(r2)
   18ac4:	10803fcc 	andi	r2,r2,255
   18ac8:	103ff41e 	bne	r2,zero,18a9c <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   18acc:	00000906 	br	18af4 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   18ad0:	01c00084 	movi	r7,2
   18ad4:	01800044 	movi	r6,1
   18ad8:	000b883a 	mov	r5,zero
   18adc:	e13ffd17 	ldw	r4,-12(fp)
   18ae0:	00141e00 	call	141e0 <OS_EventTaskRdy>
                 nbr_tasks++;
   18ae4:	e0bff803 	ldbu	r2,-32(fp)
   18ae8:	10800044 	addi	r2,r2,1
   18aec:	e0bff805 	stb	r2,-32(fp)
                 break;
   18af0:	0001883a 	nop
   18af4:	e0bff917 	ldw	r2,-28(fp)
   18af8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18afc:	e0bffa17 	ldw	r2,-24(fp)
   18b00:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   18b04:	0014c2c0 	call	14c2c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   18b08:	e0bfff17 	ldw	r2,-4(fp)
   18b0c:	00c00384 	movi	r3,14
   18b10:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   18b14:	e0bff803 	ldbu	r2,-32(fp)
   18b18:	00000706 	br	18b38 <OSSemPendAbort+0x158>
   18b1c:	e0bff917 	ldw	r2,-28(fp)
   18b20:	e0bffb15 	stw	r2,-20(fp)
   18b24:	e0bffb17 	ldw	r2,-20(fp)
   18b28:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   18b2c:	e0bfff17 	ldw	r2,-4(fp)
   18b30:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   18b34:	0005883a 	mov	r2,zero
}
   18b38:	e037883a 	mov	sp,fp
   18b3c:	dfc00117 	ldw	ra,4(sp)
   18b40:	df000017 	ldw	fp,0(sp)
   18b44:	dec00204 	addi	sp,sp,8
   18b48:	f800283a 	ret

00018b4c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   18b4c:	defff804 	addi	sp,sp,-32
   18b50:	dfc00715 	stw	ra,28(sp)
   18b54:	df000615 	stw	fp,24(sp)
   18b58:	df000604 	addi	fp,sp,24
   18b5c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18b60:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   18b64:	e0bfff17 	ldw	r2,-4(fp)
   18b68:	1000021e 	bne	r2,zero,18b74 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   18b6c:	00800104 	movi	r2,4
   18b70:	00003506 	br	18c48 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   18b74:	e0bfff17 	ldw	r2,-4(fp)
   18b78:	10800003 	ldbu	r2,0(r2)
   18b7c:	10803fcc 	andi	r2,r2,255
   18b80:	108000e0 	cmpeqi	r2,r2,3
   18b84:	1000021e 	bne	r2,zero,18b90 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   18b88:	00800044 	movi	r2,1
   18b8c:	00002e06 	br	18c48 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18b90:	0005303a 	rdctl	r2,status
   18b94:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18b98:	e0fffe17 	ldw	r3,-8(fp)
   18b9c:	00bfff84 	movi	r2,-2
   18ba0:	1884703a 	and	r2,r3,r2
   18ba4:	1001703a 	wrctl	status,r2
  
  return context;
   18ba8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   18bac:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   18bb0:	e0bfff17 	ldw	r2,-4(fp)
   18bb4:	10800283 	ldbu	r2,10(r2)
   18bb8:	10803fcc 	andi	r2,r2,255
   18bbc:	10000c26 	beq	r2,zero,18bf0 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   18bc0:	000f883a 	mov	r7,zero
   18bc4:	01800044 	movi	r6,1
   18bc8:	000b883a 	mov	r5,zero
   18bcc:	e13fff17 	ldw	r4,-4(fp)
   18bd0:	00141e00 	call	141e0 <OS_EventTaskRdy>
   18bd4:	e0bffa17 	ldw	r2,-24(fp)
   18bd8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18bdc:	e0bffb17 	ldw	r2,-20(fp)
   18be0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   18be4:	0014c2c0 	call	14c2c <OS_Sched>
        return (OS_ERR_NONE);
   18be8:	0005883a 	mov	r2,zero
   18bec:	00001606 	br	18c48 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   18bf0:	e0bfff17 	ldw	r2,-4(fp)
   18bf4:	1080020b 	ldhu	r2,8(r2)
   18bf8:	10ffffcc 	andi	r3,r2,65535
   18bfc:	00bfffd4 	movui	r2,65535
   18c00:	18800c26 	beq	r3,r2,18c34 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   18c04:	e0bfff17 	ldw	r2,-4(fp)
   18c08:	1080020b 	ldhu	r2,8(r2)
   18c0c:	10800044 	addi	r2,r2,1
   18c10:	1007883a 	mov	r3,r2
   18c14:	e0bfff17 	ldw	r2,-4(fp)
   18c18:	10c0020d 	sth	r3,8(r2)
   18c1c:	e0bffa17 	ldw	r2,-24(fp)
   18c20:	e0bffc15 	stw	r2,-16(fp)
   18c24:	e0bffc17 	ldw	r2,-16(fp)
   18c28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   18c2c:	0005883a 	mov	r2,zero
   18c30:	00000506 	br	18c48 <OSSemPost+0xfc>
   18c34:	e0bffa17 	ldw	r2,-24(fp)
   18c38:	e0bffd15 	stw	r2,-12(fp)
   18c3c:	e0bffd17 	ldw	r2,-12(fp)
   18c40:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   18c44:	00800c84 	movi	r2,50
}
   18c48:	e037883a 	mov	sp,fp
   18c4c:	dfc00117 	ldw	ra,4(sp)
   18c50:	df000017 	ldw	fp,0(sp)
   18c54:	dec00204 	addi	sp,sp,8
   18c58:	f800283a 	ret

00018c5c <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   18c5c:	defff704 	addi	sp,sp,-36
   18c60:	df000815 	stw	fp,32(sp)
   18c64:	df000804 	addi	fp,sp,32
   18c68:	e13ffe15 	stw	r4,-8(fp)
   18c6c:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   18c70:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   18c74:	e0bffe17 	ldw	r2,-8(fp)
   18c78:	1000021e 	bne	r2,zero,18c84 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   18c7c:	00800104 	movi	r2,4
   18c80:	00003606 	br	18d5c <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   18c84:	e0bfff17 	ldw	r2,-4(fp)
   18c88:	1000021e 	bne	r2,zero,18c94 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   18c8c:	00800244 	movi	r2,9
   18c90:	00003206 	br	18d5c <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   18c94:	e0bffe17 	ldw	r2,-8(fp)
   18c98:	10800003 	ldbu	r2,0(r2)
   18c9c:	10803fcc 	andi	r2,r2,255
   18ca0:	108000e0 	cmpeqi	r2,r2,3
   18ca4:	1000021e 	bne	r2,zero,18cb0 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   18ca8:	00800044 	movi	r2,1
   18cac:	00002b06 	br	18d5c <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18cb0:	0005303a 	rdctl	r2,status
   18cb4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18cb8:	e0fffd17 	ldw	r3,-12(fp)
   18cbc:	00bfff84 	movi	r2,-2
   18cc0:	1884703a 	and	r2,r3,r2
   18cc4:	1001703a 	wrctl	status,r2
  
  return context;
   18cc8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   18ccc:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   18cd0:	e0bffe17 	ldw	r2,-8(fp)
   18cd4:	10c00283 	ldbu	r3,10(r2)
   18cd8:	e0bfff17 	ldw	r2,-4(fp)
   18cdc:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   18ce0:	e0bffe17 	ldw	r2,-8(fp)
   18ce4:	108002c4 	addi	r2,r2,11
   18ce8:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   18cec:	e0bfff17 	ldw	r2,-4(fp)
   18cf0:	10800084 	addi	r2,r2,2
   18cf4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   18cf8:	e03ffa05 	stb	zero,-24(fp)
   18cfc:	00000b06 	br	18d2c <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   18d00:	e0bff917 	ldw	r2,-28(fp)
   18d04:	10c00044 	addi	r3,r2,1
   18d08:	e0fff915 	stw	r3,-28(fp)
   18d0c:	e0fff817 	ldw	r3,-32(fp)
   18d10:	19000044 	addi	r4,r3,1
   18d14:	e13ff815 	stw	r4,-32(fp)
   18d18:	18c00003 	ldbu	r3,0(r3)
   18d1c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   18d20:	e0bffa03 	ldbu	r2,-24(fp)
   18d24:	10800044 	addi	r2,r2,1
   18d28:	e0bffa05 	stb	r2,-24(fp)
   18d2c:	e0bffa03 	ldbu	r2,-24(fp)
   18d30:	108000f0 	cmpltui	r2,r2,3
   18d34:	103ff21e 	bne	r2,zero,18d00 <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   18d38:	e0bffe17 	ldw	r2,-8(fp)
   18d3c:	10c0020b 	ldhu	r3,8(r2)
   18d40:	e0bfff17 	ldw	r2,-4(fp)
   18d44:	10c0000d 	sth	r3,0(r2)
   18d48:	e0bffb17 	ldw	r2,-20(fp)
   18d4c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18d50:	e0bffc17 	ldw	r2,-16(fp)
   18d54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18d58:	0005883a 	mov	r2,zero
}
   18d5c:	e037883a 	mov	sp,fp
   18d60:	df000017 	ldw	fp,0(sp)
   18d64:	dec00104 	addi	sp,sp,4
   18d68:	f800283a 	ret

00018d6c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   18d6c:	defff904 	addi	sp,sp,-28
   18d70:	df000615 	stw	fp,24(sp)
   18d74:	df000604 	addi	fp,sp,24
   18d78:	e13ffd15 	stw	r4,-12(fp)
   18d7c:	2805883a 	mov	r2,r5
   18d80:	e1bfff15 	stw	r6,-4(fp)
   18d84:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18d88:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   18d8c:	e0bfff17 	ldw	r2,-4(fp)
   18d90:	10003126 	beq	r2,zero,18e58 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   18d94:	e0bffd17 	ldw	r2,-12(fp)
   18d98:	1000041e 	bne	r2,zero,18dac <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   18d9c:	e0bfff17 	ldw	r2,-4(fp)
   18da0:	00c00104 	movi	r3,4
   18da4:	10c00005 	stb	r3,0(r2)
        return;
   18da8:	00002c06 	br	18e5c <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   18dac:	e0bffd17 	ldw	r2,-12(fp)
   18db0:	10800003 	ldbu	r2,0(r2)
   18db4:	10803fcc 	andi	r2,r2,255
   18db8:	108000e0 	cmpeqi	r2,r2,3
   18dbc:	1000041e 	bne	r2,zero,18dd0 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
   18dc0:	e0bfff17 	ldw	r2,-4(fp)
   18dc4:	00c00044 	movi	r3,1
   18dc8:	10c00005 	stb	r3,0(r2)
        return;
   18dcc:	00002306 	br	18e5c <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18dd0:	0005303a 	rdctl	r2,status
   18dd4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18dd8:	e0fffc17 	ldw	r3,-16(fp)
   18ddc:	00bfff84 	movi	r2,-2
   18de0:	1884703a 	and	r2,r3,r2
   18de4:	1001703a 	wrctl	status,r2
  
  return context;
   18de8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   18dec:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   18df0:	e0bfff17 	ldw	r2,-4(fp)
   18df4:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   18df8:	e0bffd17 	ldw	r2,-12(fp)
   18dfc:	1080020b 	ldhu	r2,8(r2)
   18e00:	10bfffcc 	andi	r2,r2,65535
   18e04:	10000426 	beq	r2,zero,18e18 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   18e08:	e0bffd17 	ldw	r2,-12(fp)
   18e0c:	e0fffe0b 	ldhu	r3,-8(fp)
   18e10:	10c0020d 	sth	r3,8(r2)
   18e14:	00000b06 	br	18e44 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   18e18:	e0bffd17 	ldw	r2,-12(fp)
   18e1c:	10800283 	ldbu	r2,10(r2)
   18e20:	10803fcc 	andi	r2,r2,255
   18e24:	1000041e 	bne	r2,zero,18e38 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   18e28:	e0bffd17 	ldw	r2,-12(fp)
   18e2c:	e0fffe0b 	ldhu	r3,-8(fp)
   18e30:	10c0020d 	sth	r3,8(r2)
   18e34:	00000306 	br	18e44 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   18e38:	e0bfff17 	ldw	r2,-4(fp)
   18e3c:	00c01244 	movi	r3,73
   18e40:	10c00005 	stb	r3,0(r2)
   18e44:	e0bffa17 	ldw	r2,-24(fp)
   18e48:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18e4c:	e0bffb17 	ldw	r2,-20(fp)
   18e50:	1001703a 	wrctl	status,r2
   18e54:	00000106 	br	18e5c <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   18e58:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
   18e5c:	e037883a 	mov	sp,fp
   18e60:	df000017 	ldw	fp,0(sp)
   18e64:	dec00104 	addi	sp,sp,4
   18e68:	f800283a 	ret

00018e6c <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   18e6c:	defff104 	addi	sp,sp,-60
   18e70:	dfc00e15 	stw	ra,56(sp)
   18e74:	df000d15 	stw	fp,52(sp)
   18e78:	df000d04 	addi	fp,sp,52
   18e7c:	2007883a 	mov	r3,r4
   18e80:	2805883a 	mov	r2,r5
   18e84:	e0fffe05 	stb	r3,-8(fp)
   18e88:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   18e8c:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   18e90:	e0bffe03 	ldbu	r2,-8(fp)
   18e94:	10800530 	cmpltui	r2,r2,20
   18e98:	1000051e 	bne	r2,zero,18eb0 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   18e9c:	e0bffe03 	ldbu	r2,-8(fp)
   18ea0:	10803fe0 	cmpeqi	r2,r2,255
   18ea4:	1000021e 	bne	r2,zero,18eb0 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   18ea8:	00800a84 	movi	r2,42
   18eac:	00012606 	br	19348 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   18eb0:	e0bfff03 	ldbu	r2,-4(fp)
   18eb4:	10800530 	cmpltui	r2,r2,20
   18eb8:	1000021e 	bne	r2,zero,18ec4 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   18ebc:	00800a84 	movi	r2,42
   18ec0:	00012106 	br	19348 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18ec4:	0005303a 	rdctl	r2,status
   18ec8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18ecc:	e0fffd17 	ldw	r3,-12(fp)
   18ed0:	00bfff84 	movi	r2,-2
   18ed4:	1884703a 	and	r2,r3,r2
   18ed8:	1001703a 	wrctl	status,r2
  
  return context;
   18edc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   18ee0:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   18ee4:	e0ffff03 	ldbu	r3,-4(fp)
   18ee8:	008000f4 	movhi	r2,3
   18eec:	1092f004 	addi	r2,r2,19392
   18ef0:	18c7883a 	add	r3,r3,r3
   18ef4:	18c7883a 	add	r3,r3,r3
   18ef8:	10c5883a 	add	r2,r2,r3
   18efc:	10800017 	ldw	r2,0(r2)
   18f00:	10000626 	beq	r2,zero,18f1c <OSTaskChangePrio+0xb0>
   18f04:	e0bff517 	ldw	r2,-44(fp)
   18f08:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18f0c:	e0bff617 	ldw	r2,-40(fp)
   18f10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   18f14:	00800a04 	movi	r2,40
   18f18:	00010b06 	br	19348 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   18f1c:	e0bffe03 	ldbu	r2,-8(fp)
   18f20:	10803fd8 	cmpnei	r2,r2,255
   18f24:	1000031e 	bne	r2,zero,18f34 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   18f28:	d0a82d17 	ldw	r2,-24396(gp)
   18f2c:	10800c83 	ldbu	r2,50(r2)
   18f30:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   18f34:	e0fffe03 	ldbu	r3,-8(fp)
   18f38:	008000f4 	movhi	r2,3
   18f3c:	1092f004 	addi	r2,r2,19392
   18f40:	18c7883a 	add	r3,r3,r3
   18f44:	18c7883a 	add	r3,r3,r3
   18f48:	10c5883a 	add	r2,r2,r3
   18f4c:	10800017 	ldw	r2,0(r2)
   18f50:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   18f54:	e0bff817 	ldw	r2,-32(fp)
   18f58:	1000061e 	bne	r2,zero,18f74 <OSTaskChangePrio+0x108>
   18f5c:	e0bff517 	ldw	r2,-44(fp)
   18f60:	e0bff715 	stw	r2,-36(fp)
   18f64:	e0bff717 	ldw	r2,-36(fp)
   18f68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   18f6c:	00800a44 	movi	r2,41
   18f70:	0000f506 	br	19348 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   18f74:	e0bff817 	ldw	r2,-32(fp)
   18f78:	10800058 	cmpnei	r2,r2,1
   18f7c:	1000061e 	bne	r2,zero,18f98 <OSTaskChangePrio+0x12c>
   18f80:	e0bff517 	ldw	r2,-44(fp)
   18f84:	e0bff915 	stw	r2,-28(fp)
   18f88:	e0bff917 	ldw	r2,-28(fp)
   18f8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   18f90:	008010c4 	movi	r2,67
   18f94:	0000ec06 	br	19348 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   18f98:	e0bfff03 	ldbu	r2,-4(fp)
   18f9c:	1004d0fa 	srli	r2,r2,3
   18fa0:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   18fa4:	e0bfff03 	ldbu	r2,-4(fp)
   18fa8:	108001cc 	andi	r2,r2,7
   18fac:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
   18fb0:	e0bffb03 	ldbu	r2,-20(fp)
   18fb4:	00c00044 	movi	r3,1
   18fb8:	1884983a 	sll	r2,r3,r2
   18fbc:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
   18fc0:	e0bffb43 	ldbu	r2,-19(fp)
   18fc4:	00c00044 	movi	r3,1
   18fc8:	1884983a 	sll	r2,r3,r2
   18fcc:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   18fd0:	e0fffe03 	ldbu	r3,-8(fp)
   18fd4:	008000f4 	movhi	r2,3
   18fd8:	1092f004 	addi	r2,r2,19392
   18fdc:	18c7883a 	add	r3,r3,r3
   18fe0:	18c7883a 	add	r3,r3,r3
   18fe4:	10c5883a 	add	r2,r2,r3
   18fe8:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   18fec:	e0ffff03 	ldbu	r3,-4(fp)
   18ff0:	008000f4 	movhi	r2,3
   18ff4:	1092f004 	addi	r2,r2,19392
   18ff8:	18c7883a 	add	r3,r3,r3
   18ffc:	18c7883a 	add	r3,r3,r3
   19000:	10c5883a 	add	r2,r2,r3
   19004:	e0fff817 	ldw	r3,-32(fp)
   19008:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   1900c:	e0bff817 	ldw	r2,-32(fp)
   19010:	10800d03 	ldbu	r2,52(r2)
   19014:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
   19018:	e0bff817 	ldw	r2,-32(fp)
   1901c:	10800d83 	ldbu	r2,54(r2)
   19020:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   19024:	e0bff817 	ldw	r2,-32(fp)
   19028:	10800d43 	ldbu	r2,53(r2)
   1902c:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   19030:	e0fffc03 	ldbu	r3,-16(fp)
   19034:	d0a82a44 	addi	r2,gp,-24407
   19038:	1885883a 	add	r2,r3,r2
   1903c:	10c00003 	ldbu	r3,0(r2)
   19040:	e0bffc83 	ldbu	r2,-14(fp)
   19044:	1884703a 	and	r2,r3,r2
   19048:	10803fcc 	andi	r2,r2,255
   1904c:	10002826 	beq	r2,zero,190f0 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
   19050:	e0fffc03 	ldbu	r3,-16(fp)
   19054:	e13ffc03 	ldbu	r4,-16(fp)
   19058:	d0a82a44 	addi	r2,gp,-24407
   1905c:	2085883a 	add	r2,r4,r2
   19060:	10800003 	ldbu	r2,0(r2)
   19064:	1009883a 	mov	r4,r2
   19068:	e0bffc83 	ldbu	r2,-14(fp)
   1906c:	0084303a 	nor	r2,zero,r2
   19070:	2084703a 	and	r2,r4,r2
   19074:	1009883a 	mov	r4,r2
   19078:	d0a82a44 	addi	r2,gp,-24407
   1907c:	1885883a 	add	r2,r3,r2
   19080:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   19084:	e0fffc03 	ldbu	r3,-16(fp)
   19088:	d0a82a44 	addi	r2,gp,-24407
   1908c:	1885883a 	add	r2,r3,r2
   19090:	10800003 	ldbu	r2,0(r2)
   19094:	10803fcc 	andi	r2,r2,255
   19098:	1000061e 	bne	r2,zero,190b4 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
   1909c:	e0bffc43 	ldbu	r2,-15(fp)
   190a0:	0084303a 	nor	r2,zero,r2
   190a4:	1007883a 	mov	r3,r2
   190a8:	d0a82a03 	ldbu	r2,-24408(gp)
   190ac:	1884703a 	and	r2,r3,r2
   190b0:	d0a82a05 	stb	r2,-24408(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   190b4:	d0e82a03 	ldbu	r3,-24408(gp)
   190b8:	e0bffb83 	ldbu	r2,-18(fp)
   190bc:	1884b03a 	or	r2,r3,r2
   190c0:	d0a82a05 	stb	r2,-24408(gp)
         OSRdyTbl[y_new] |= bitx_new;
   190c4:	e0fffb03 	ldbu	r3,-20(fp)
   190c8:	e13ffb03 	ldbu	r4,-20(fp)
   190cc:	d0a82a44 	addi	r2,gp,-24407
   190d0:	2085883a 	add	r2,r4,r2
   190d4:	11000003 	ldbu	r4,0(r2)
   190d8:	e0bffbc3 	ldbu	r2,-17(fp)
   190dc:	2084b03a 	or	r2,r4,r2
   190e0:	1009883a 	mov	r4,r2
   190e4:	d0a82a44 	addi	r2,gp,-24407
   190e8:	1885883a 	add	r2,r3,r2
   190ec:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   190f0:	e0bff817 	ldw	r2,-32(fp)
   190f4:	10800717 	ldw	r2,28(r2)
   190f8:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   190fc:	e0bff317 	ldw	r2,-52(fp)
   19100:	10003326 	beq	r2,zero,191d0 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   19104:	e0bffc03 	ldbu	r2,-16(fp)
   19108:	e0fffc03 	ldbu	r3,-16(fp)
   1910c:	e13ff317 	ldw	r4,-52(fp)
   19110:	20c7883a 	add	r3,r4,r3
   19114:	18c002c4 	addi	r3,r3,11
   19118:	18c00003 	ldbu	r3,0(r3)
   1911c:	1809883a 	mov	r4,r3
   19120:	e0fffc83 	ldbu	r3,-14(fp)
   19124:	00c6303a 	nor	r3,zero,r3
   19128:	20c6703a 	and	r3,r4,r3
   1912c:	1809883a 	mov	r4,r3
   19130:	e0fff317 	ldw	r3,-52(fp)
   19134:	1885883a 	add	r2,r3,r2
   19138:	108002c4 	addi	r2,r2,11
   1913c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   19140:	e0bffc03 	ldbu	r2,-16(fp)
   19144:	e0fff317 	ldw	r3,-52(fp)
   19148:	1885883a 	add	r2,r3,r2
   1914c:	108002c4 	addi	r2,r2,11
   19150:	10800003 	ldbu	r2,0(r2)
   19154:	10803fcc 	andi	r2,r2,255
   19158:	1000091e 	bne	r2,zero,19180 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
   1915c:	e0bff317 	ldw	r2,-52(fp)
   19160:	10800283 	ldbu	r2,10(r2)
   19164:	1007883a 	mov	r3,r2
   19168:	e0bffc43 	ldbu	r2,-15(fp)
   1916c:	0084303a 	nor	r2,zero,r2
   19170:	1884703a 	and	r2,r3,r2
   19174:	1007883a 	mov	r3,r2
   19178:	e0bff317 	ldw	r2,-52(fp)
   1917c:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   19180:	e0bff317 	ldw	r2,-52(fp)
   19184:	10c00283 	ldbu	r3,10(r2)
   19188:	e0bffb83 	ldbu	r2,-18(fp)
   1918c:	1884b03a 	or	r2,r3,r2
   19190:	1007883a 	mov	r3,r2
   19194:	e0bff317 	ldw	r2,-52(fp)
   19198:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   1919c:	e0bffb03 	ldbu	r2,-20(fp)
   191a0:	e0fffb03 	ldbu	r3,-20(fp)
   191a4:	e13ff317 	ldw	r4,-52(fp)
   191a8:	20c7883a 	add	r3,r4,r3
   191ac:	18c002c4 	addi	r3,r3,11
   191b0:	19000003 	ldbu	r4,0(r3)
   191b4:	e0fffbc3 	ldbu	r3,-17(fp)
   191b8:	20c6b03a 	or	r3,r4,r3
   191bc:	1809883a 	mov	r4,r3
   191c0:	e0fff317 	ldw	r3,-52(fp)
   191c4:	1885883a 	add	r2,r3,r2
   191c8:	108002c4 	addi	r2,r2,11
   191cc:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   191d0:	e0bff817 	ldw	r2,-32(fp)
   191d4:	10800817 	ldw	r2,32(r2)
   191d8:	10004226 	beq	r2,zero,192e4 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
   191dc:	e0bff817 	ldw	r2,-32(fp)
   191e0:	10800817 	ldw	r2,32(r2)
   191e4:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   191e8:	e0bff417 	ldw	r2,-48(fp)
   191ec:	10800017 	ldw	r2,0(r2)
   191f0:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   191f4:	00003906 	br	192dc <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   191f8:	e0bffc03 	ldbu	r2,-16(fp)
   191fc:	e0fffc03 	ldbu	r3,-16(fp)
   19200:	e13ff317 	ldw	r4,-52(fp)
   19204:	20c7883a 	add	r3,r4,r3
   19208:	18c002c4 	addi	r3,r3,11
   1920c:	18c00003 	ldbu	r3,0(r3)
   19210:	1809883a 	mov	r4,r3
   19214:	e0fffc83 	ldbu	r3,-14(fp)
   19218:	00c6303a 	nor	r3,zero,r3
   1921c:	20c6703a 	and	r3,r4,r3
   19220:	1809883a 	mov	r4,r3
   19224:	e0fff317 	ldw	r3,-52(fp)
   19228:	1885883a 	add	r2,r3,r2
   1922c:	108002c4 	addi	r2,r2,11
   19230:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   19234:	e0bffc03 	ldbu	r2,-16(fp)
   19238:	e0fff317 	ldw	r3,-52(fp)
   1923c:	1885883a 	add	r2,r3,r2
   19240:	108002c4 	addi	r2,r2,11
   19244:	10800003 	ldbu	r2,0(r2)
   19248:	10803fcc 	andi	r2,r2,255
   1924c:	1000091e 	bne	r2,zero,19274 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
   19250:	e0bff317 	ldw	r2,-52(fp)
   19254:	10800283 	ldbu	r2,10(r2)
   19258:	1007883a 	mov	r3,r2
   1925c:	e0bffc43 	ldbu	r2,-15(fp)
   19260:	0084303a 	nor	r2,zero,r2
   19264:	1884703a 	and	r2,r3,r2
   19268:	1007883a 	mov	r3,r2
   1926c:	e0bff317 	ldw	r2,-52(fp)
   19270:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   19274:	e0bff317 	ldw	r2,-52(fp)
   19278:	10c00283 	ldbu	r3,10(r2)
   1927c:	e0bffb83 	ldbu	r2,-18(fp)
   19280:	1884b03a 	or	r2,r3,r2
   19284:	1007883a 	mov	r3,r2
   19288:	e0bff317 	ldw	r2,-52(fp)
   1928c:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   19290:	e0bffb03 	ldbu	r2,-20(fp)
   19294:	e0fffb03 	ldbu	r3,-20(fp)
   19298:	e13ff317 	ldw	r4,-52(fp)
   1929c:	20c7883a 	add	r3,r4,r3
   192a0:	18c002c4 	addi	r3,r3,11
   192a4:	19000003 	ldbu	r4,0(r3)
   192a8:	e0fffbc3 	ldbu	r3,-17(fp)
   192ac:	20c6b03a 	or	r3,r4,r3
   192b0:	1809883a 	mov	r4,r3
   192b4:	e0fff317 	ldw	r3,-52(fp)
   192b8:	1885883a 	add	r2,r3,r2
   192bc:	108002c4 	addi	r2,r2,11
   192c0:	11000005 	stb	r4,0(r2)
            pevents++;
   192c4:	e0bff417 	ldw	r2,-48(fp)
   192c8:	10800104 	addi	r2,r2,4
   192cc:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   192d0:	e0bff417 	ldw	r2,-48(fp)
   192d4:	10800017 	ldw	r2,0(r2)
   192d8:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   192dc:	e0bff317 	ldw	r2,-52(fp)
   192e0:	103fc51e 	bne	r2,zero,191f8 <OSTaskChangePrio+0x38c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   192e4:	e0bff817 	ldw	r2,-32(fp)
   192e8:	e0ffff03 	ldbu	r3,-4(fp)
   192ec:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   192f0:	e0bff817 	ldw	r2,-32(fp)
   192f4:	e0fffb03 	ldbu	r3,-20(fp)
   192f8:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   192fc:	e0bff817 	ldw	r2,-32(fp)
   19300:	e0fffb43 	ldbu	r3,-19(fp)
   19304:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   19308:	e0bff817 	ldw	r2,-32(fp)
   1930c:	e0fffb83 	ldbu	r3,-18(fp)
   19310:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   19314:	e0bff817 	ldw	r2,-32(fp)
   19318:	e0fffbc3 	ldbu	r3,-17(fp)
   1931c:	10c00d45 	stb	r3,53(r2)
   19320:	e0bff517 	ldw	r2,-44(fp)
   19324:	e0bffa15 	stw	r2,-24(fp)
   19328:	e0bffa17 	ldw	r2,-24(fp)
   1932c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   19330:	d0a81e43 	ldbu	r2,-24455(gp)
   19334:	10803fcc 	andi	r2,r2,255
   19338:	10800058 	cmpnei	r2,r2,1
   1933c:	1000011e 	bne	r2,zero,19344 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
   19340:	0014c2c0 	call	14c2c <OS_Sched>
    }
    return (OS_ERR_NONE);
   19344:	0005883a 	mov	r2,zero
}
   19348:	e037883a 	mov	sp,fp
   1934c:	dfc00117 	ldw	ra,4(sp)
   19350:	df000017 	ldw	fp,0(sp)
   19354:	dec00204 	addi	sp,sp,8
   19358:	f800283a 	ret

0001935c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   1935c:	deffee04 	addi	sp,sp,-72
   19360:	dfc01115 	stw	ra,68(sp)
   19364:	df001015 	stw	fp,64(sp)
   19368:	df001004 	addi	fp,sp,64
   1936c:	e13ffc15 	stw	r4,-16(fp)
   19370:	e17ffd15 	stw	r5,-12(fp)
   19374:	e1bffe15 	stw	r6,-8(fp)
   19378:	3805883a 	mov	r2,r7
   1937c:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   19380:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   19384:	e0bfff03 	ldbu	r2,-4(fp)
   19388:	10800570 	cmpltui	r2,r2,21
   1938c:	1000021e 	bne	r2,zero,19398 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   19390:	00800a84 	movi	r2,42
   19394:	00005706 	br	194f4 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19398:	0005303a 	rdctl	r2,status
   1939c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   193a0:	e0fffb17 	ldw	r3,-20(fp)
   193a4:	00bfff84 	movi	r2,-2
   193a8:	1884703a 	and	r2,r3,r2
   193ac:	1001703a 	wrctl	status,r2
  
  return context;
   193b0:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   193b4:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   193b8:	d0a82c03 	ldbu	r2,-24400(gp)
   193bc:	10803fcc 	andi	r2,r2,255
   193c0:	10000626 	beq	r2,zero,193dc <OSTaskCreate+0x80>
   193c4:	e0bff317 	ldw	r2,-52(fp)
   193c8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   193cc:	e0bff417 	ldw	r2,-48(fp)
   193d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   193d4:	00800f04 	movi	r2,60
   193d8:	00004606 	br	194f4 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   193dc:	e0ffff03 	ldbu	r3,-4(fp)
   193e0:	008000f4 	movhi	r2,3
   193e4:	1092f004 	addi	r2,r2,19392
   193e8:	18c7883a 	add	r3,r3,r3
   193ec:	18c7883a 	add	r3,r3,r3
   193f0:	10c5883a 	add	r2,r2,r3
   193f4:	10800017 	ldw	r2,0(r2)
   193f8:	1000391e 	bne	r2,zero,194e0 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   193fc:	e0ffff03 	ldbu	r3,-4(fp)
   19400:	008000f4 	movhi	r2,3
   19404:	1092f004 	addi	r2,r2,19392
   19408:	18c7883a 	add	r3,r3,r3
   1940c:	18c7883a 	add	r3,r3,r3
   19410:	10c5883a 	add	r2,r2,r3
   19414:	00c00044 	movi	r3,1
   19418:	10c00015 	stw	r3,0(r2)
   1941c:	e0bff317 	ldw	r2,-52(fp)
   19420:	e0bff515 	stw	r2,-44(fp)
   19424:	e0bff517 	ldw	r2,-44(fp)
   19428:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   1942c:	000f883a 	mov	r7,zero
   19430:	e1bffe17 	ldw	r6,-8(fp)
   19434:	e17ffd17 	ldw	r5,-12(fp)
   19438:	e13ffc17 	ldw	r4,-16(fp)
   1943c:	001e0d40 	call	1e0d4 <OSTaskStkInit>
   19440:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   19444:	e0bfff03 	ldbu	r2,-4(fp)
   19448:	d8000215 	stw	zero,8(sp)
   1944c:	d8000115 	stw	zero,4(sp)
   19450:	d8000015 	stw	zero,0(sp)
   19454:	000f883a 	mov	r7,zero
   19458:	000d883a 	mov	r6,zero
   1945c:	e17ff717 	ldw	r5,-36(fp)
   19460:	1009883a 	mov	r4,r2
   19464:	001503c0 	call	1503c <OS_TCBInit>
   19468:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
   1946c:	e0bff803 	ldbu	r2,-32(fp)
   19470:	1000061e 	bne	r2,zero,1948c <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   19474:	d0a81e43 	ldbu	r2,-24455(gp)
   19478:	10803fcc 	andi	r2,r2,255
   1947c:	10800058 	cmpnei	r2,r2,1
   19480:	1000151e 	bne	r2,zero,194d8 <OSTaskCreate+0x17c>
                OS_Sched();
   19484:	0014c2c0 	call	14c2c <OS_Sched>
   19488:	00001306 	br	194d8 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1948c:	0005303a 	rdctl	r2,status
   19490:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19494:	e0fffa17 	ldw	r3,-24(fp)
   19498:	00bfff84 	movi	r2,-2
   1949c:	1884703a 	and	r2,r3,r2
   194a0:	1001703a 	wrctl	status,r2
  
  return context;
   194a4:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   194a8:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   194ac:	e0ffff03 	ldbu	r3,-4(fp)
   194b0:	008000f4 	movhi	r2,3
   194b4:	1092f004 	addi	r2,r2,19392
   194b8:	18c7883a 	add	r3,r3,r3
   194bc:	18c7883a 	add	r3,r3,r3
   194c0:	10c5883a 	add	r2,r2,r3
   194c4:	10000015 	stw	zero,0(r2)
   194c8:	e0bff317 	ldw	r2,-52(fp)
   194cc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   194d0:	e0bff617 	ldw	r2,-40(fp)
   194d4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   194d8:	e0bff803 	ldbu	r2,-32(fp)
   194dc:	00000506 	br	194f4 <OSTaskCreate+0x198>
   194e0:	e0bff317 	ldw	r2,-52(fp)
   194e4:	e0bff915 	stw	r2,-28(fp)
   194e8:	e0bff917 	ldw	r2,-28(fp)
   194ec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   194f0:	00800a04 	movi	r2,40
}
   194f4:	e037883a 	mov	sp,fp
   194f8:	dfc00117 	ldw	ra,4(sp)
   194fc:	df000017 	ldw	fp,0(sp)
   19500:	dec00204 	addi	sp,sp,8
   19504:	f800283a 	ret

00019508 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   19508:	deffec04 	addi	sp,sp,-80
   1950c:	dfc01315 	stw	ra,76(sp)
   19510:	df001215 	stw	fp,72(sp)
   19514:	df001204 	addi	fp,sp,72
   19518:	e13ffa15 	stw	r4,-24(fp)
   1951c:	e17ffb15 	stw	r5,-20(fp)
   19520:	e1bffc15 	stw	r6,-16(fp)
   19524:	3809883a 	mov	r4,r7
   19528:	e0c00217 	ldw	r3,8(fp)
   1952c:	e0800617 	ldw	r2,24(fp)
   19530:	e13ffd05 	stb	r4,-12(fp)
   19534:	e0fffe0d 	sth	r3,-8(fp)
   19538:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   1953c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   19540:	e0bffd03 	ldbu	r2,-12(fp)
   19544:	10800570 	cmpltui	r2,r2,21
   19548:	1000021e 	bne	r2,zero,19554 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   1954c:	00800a84 	movi	r2,42
   19550:	00006106 	br	196d8 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19554:	0005303a 	rdctl	r2,status
   19558:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1955c:	e0fff917 	ldw	r3,-28(fp)
   19560:	00bfff84 	movi	r2,-2
   19564:	1884703a 	and	r2,r3,r2
   19568:	1001703a 	wrctl	status,r2
  
  return context;
   1956c:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   19570:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   19574:	d0a82c03 	ldbu	r2,-24400(gp)
   19578:	10803fcc 	andi	r2,r2,255
   1957c:	10000626 	beq	r2,zero,19598 <OSTaskCreateExt+0x90>
   19580:	e0bff117 	ldw	r2,-60(fp)
   19584:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19588:	e0bff217 	ldw	r2,-56(fp)
   1958c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   19590:	00800f04 	movi	r2,60
   19594:	00005006 	br	196d8 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   19598:	e0fffd03 	ldbu	r3,-12(fp)
   1959c:	008000f4 	movhi	r2,3
   195a0:	1092f004 	addi	r2,r2,19392
   195a4:	18c7883a 	add	r3,r3,r3
   195a8:	18c7883a 	add	r3,r3,r3
   195ac:	10c5883a 	add	r2,r2,r3
   195b0:	10800017 	ldw	r2,0(r2)
   195b4:	1000431e 	bne	r2,zero,196c4 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   195b8:	e0fffd03 	ldbu	r3,-12(fp)
   195bc:	008000f4 	movhi	r2,3
   195c0:	1092f004 	addi	r2,r2,19392
   195c4:	18c7883a 	add	r3,r3,r3
   195c8:	18c7883a 	add	r3,r3,r3
   195cc:	10c5883a 	add	r2,r2,r3
   195d0:	00c00044 	movi	r3,1
   195d4:	10c00015 	stw	r3,0(r2)
   195d8:	e0bff117 	ldw	r2,-60(fp)
   195dc:	e0bff315 	stw	r2,-52(fp)
   195e0:	e0bff317 	ldw	r2,-52(fp)
   195e4:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   195e8:	e0bfff0b 	ldhu	r2,-4(fp)
   195ec:	100d883a 	mov	r6,r2
   195f0:	e1400417 	ldw	r5,16(fp)
   195f4:	e1000317 	ldw	r4,12(fp)
   195f8:	001a5680 	call	1a568 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   195fc:	e0bfff0b 	ldhu	r2,-4(fp)
   19600:	100f883a 	mov	r7,r2
   19604:	e1bffc17 	ldw	r6,-16(fp)
   19608:	e17ffb17 	ldw	r5,-20(fp)
   1960c:	e13ffa17 	ldw	r4,-24(fp)
   19610:	001e0d40 	call	1e0d4 <OSTaskStkInit>
   19614:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   19618:	e0fffd03 	ldbu	r3,-12(fp)
   1961c:	e13ffe0b 	ldhu	r4,-8(fp)
   19620:	e0bfff0b 	ldhu	r2,-4(fp)
   19624:	d8800215 	stw	r2,8(sp)
   19628:	e0800517 	ldw	r2,20(fp)
   1962c:	d8800115 	stw	r2,4(sp)
   19630:	e0800417 	ldw	r2,16(fp)
   19634:	d8800015 	stw	r2,0(sp)
   19638:	200f883a 	mov	r7,r4
   1963c:	e1800317 	ldw	r6,12(fp)
   19640:	e17ff517 	ldw	r5,-44(fp)
   19644:	1809883a 	mov	r4,r3
   19648:	001503c0 	call	1503c <OS_TCBInit>
   1964c:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
   19650:	e0bff603 	ldbu	r2,-40(fp)
   19654:	1000061e 	bne	r2,zero,19670 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   19658:	d0a81e43 	ldbu	r2,-24455(gp)
   1965c:	10803fcc 	andi	r2,r2,255
   19660:	10800058 	cmpnei	r2,r2,1
   19664:	1000151e 	bne	r2,zero,196bc <OSTaskCreateExt+0x1b4>
                OS_Sched();
   19668:	0014c2c0 	call	14c2c <OS_Sched>
   1966c:	00001306 	br	196bc <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19670:	0005303a 	rdctl	r2,status
   19674:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19678:	e0fff817 	ldw	r3,-32(fp)
   1967c:	00bfff84 	movi	r2,-2
   19680:	1884703a 	and	r2,r3,r2
   19684:	1001703a 	wrctl	status,r2
  
  return context;
   19688:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   1968c:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   19690:	e0fffd03 	ldbu	r3,-12(fp)
   19694:	008000f4 	movhi	r2,3
   19698:	1092f004 	addi	r2,r2,19392
   1969c:	18c7883a 	add	r3,r3,r3
   196a0:	18c7883a 	add	r3,r3,r3
   196a4:	10c5883a 	add	r2,r2,r3
   196a8:	10000015 	stw	zero,0(r2)
   196ac:	e0bff117 	ldw	r2,-60(fp)
   196b0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   196b4:	e0bff417 	ldw	r2,-48(fp)
   196b8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   196bc:	e0bff603 	ldbu	r2,-40(fp)
   196c0:	00000506 	br	196d8 <OSTaskCreateExt+0x1d0>
   196c4:	e0bff117 	ldw	r2,-60(fp)
   196c8:	e0bff715 	stw	r2,-36(fp)
   196cc:	e0bff717 	ldw	r2,-36(fp)
   196d0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   196d4:	00800a04 	movi	r2,40
}
   196d8:	e037883a 	mov	sp,fp
   196dc:	dfc00117 	ldw	ra,4(sp)
   196e0:	df000017 	ldw	fp,0(sp)
   196e4:	dec00204 	addi	sp,sp,8
   196e8:	f800283a 	ret

000196ec <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   196ec:	defff404 	addi	sp,sp,-48
   196f0:	dfc00b15 	stw	ra,44(sp)
   196f4:	df000a15 	stw	fp,40(sp)
   196f8:	df000a04 	addi	fp,sp,40
   196fc:	2005883a 	mov	r2,r4
   19700:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   19704:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   19708:	d0a82c03 	ldbu	r2,-24400(gp)
   1970c:	10803fcc 	andi	r2,r2,255
   19710:	10000226 	beq	r2,zero,1971c <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
   19714:	00801004 	movi	r2,64
   19718:	0000c006 	br	19a1c <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   1971c:	e0bfff03 	ldbu	r2,-4(fp)
   19720:	10800518 	cmpnei	r2,r2,20
   19724:	1000021e 	bne	r2,zero,19730 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
   19728:	00800f84 	movi	r2,62
   1972c:	0000bb06 	br	19a1c <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   19730:	e0bfff03 	ldbu	r2,-4(fp)
   19734:	10800530 	cmpltui	r2,r2,20
   19738:	1000051e 	bne	r2,zero,19750 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
   1973c:	e0bfff03 	ldbu	r2,-4(fp)
   19740:	10803fe0 	cmpeqi	r2,r2,255
   19744:	1000021e 	bne	r2,zero,19750 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
   19748:	00800a84 	movi	r2,42
   1974c:	0000b306 	br	19a1c <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19750:	0005303a 	rdctl	r2,status
   19754:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19758:	e0fffe17 	ldw	r3,-8(fp)
   1975c:	00bfff84 	movi	r2,-2
   19760:	1884703a 	and	r2,r3,r2
   19764:	1001703a 	wrctl	status,r2
  
  return context;
   19768:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   1976c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   19770:	e0bfff03 	ldbu	r2,-4(fp)
   19774:	10803fd8 	cmpnei	r2,r2,255
   19778:	1000031e 	bne	r2,zero,19788 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   1977c:	d0a82d17 	ldw	r2,-24396(gp)
   19780:	10800c83 	ldbu	r2,50(r2)
   19784:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   19788:	e0ffff03 	ldbu	r3,-4(fp)
   1978c:	008000f4 	movhi	r2,3
   19790:	1092f004 	addi	r2,r2,19392
   19794:	18c7883a 	add	r3,r3,r3
   19798:	18c7883a 	add	r3,r3,r3
   1979c:	10c5883a 	add	r2,r2,r3
   197a0:	10800017 	ldw	r2,0(r2)
   197a4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   197a8:	e0bff817 	ldw	r2,-32(fp)
   197ac:	1000061e 	bne	r2,zero,197c8 <OSTaskDel+0xdc>
   197b0:	e0bff617 	ldw	r2,-40(fp)
   197b4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   197b8:	e0bff717 	ldw	r2,-36(fp)
   197bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   197c0:	008010c4 	movi	r2,67
   197c4:	00009506 	br	19a1c <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   197c8:	e0bff817 	ldw	r2,-32(fp)
   197cc:	10800058 	cmpnei	r2,r2,1
   197d0:	1000061e 	bne	r2,zero,197ec <OSTaskDel+0x100>
   197d4:	e0bff617 	ldw	r2,-40(fp)
   197d8:	e0bff915 	stw	r2,-28(fp)
   197dc:	e0bff917 	ldw	r2,-28(fp)
   197e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   197e4:	00800f44 	movi	r2,61
   197e8:	00008c06 	br	19a1c <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   197ec:	e0bff817 	ldw	r2,-32(fp)
   197f0:	10800d03 	ldbu	r2,52(r2)
   197f4:	10c03fcc 	andi	r3,r2,255
   197f8:	e0bff817 	ldw	r2,-32(fp)
   197fc:	10800d03 	ldbu	r2,52(r2)
   19800:	11003fcc 	andi	r4,r2,255
   19804:	d0a82a44 	addi	r2,gp,-24407
   19808:	2085883a 	add	r2,r4,r2
   1980c:	10800003 	ldbu	r2,0(r2)
   19810:	1009883a 	mov	r4,r2
   19814:	e0bff817 	ldw	r2,-32(fp)
   19818:	10800d43 	ldbu	r2,53(r2)
   1981c:	0084303a 	nor	r2,zero,r2
   19820:	2084703a 	and	r2,r4,r2
   19824:	1009883a 	mov	r4,r2
   19828:	d0a82a44 	addi	r2,gp,-24407
   1982c:	1885883a 	add	r2,r3,r2
   19830:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   19834:	e0bff817 	ldw	r2,-32(fp)
   19838:	10800d03 	ldbu	r2,52(r2)
   1983c:	10c03fcc 	andi	r3,r2,255
   19840:	d0a82a44 	addi	r2,gp,-24407
   19844:	1885883a 	add	r2,r3,r2
   19848:	10800003 	ldbu	r2,0(r2)
   1984c:	10803fcc 	andi	r2,r2,255
   19850:	1000071e 	bne	r2,zero,19870 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   19854:	e0bff817 	ldw	r2,-32(fp)
   19858:	10800d83 	ldbu	r2,54(r2)
   1985c:	0084303a 	nor	r2,zero,r2
   19860:	1007883a 	mov	r3,r2
   19864:	d0a82a03 	ldbu	r2,-24408(gp)
   19868:	1884703a 	and	r2,r3,r2
   1986c:	d0a82a05 	stb	r2,-24408(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   19870:	e0bff817 	ldw	r2,-32(fp)
   19874:	10800717 	ldw	r2,28(r2)
   19878:	10000526 	beq	r2,zero,19890 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   1987c:	e0bff817 	ldw	r2,-32(fp)
   19880:	10800717 	ldw	r2,28(r2)
   19884:	100b883a 	mov	r5,r2
   19888:	e13ff817 	ldw	r4,-32(fp)
   1988c:	00145d80 	call	145d8 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   19890:	e0bff817 	ldw	r2,-32(fp)
   19894:	10800817 	ldw	r2,32(r2)
   19898:	10000526 	beq	r2,zero,198b0 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   1989c:	e0bff817 	ldw	r2,-32(fp)
   198a0:	10800817 	ldw	r2,32(r2)
   198a4:	100b883a 	mov	r5,r2
   198a8:	e13ff817 	ldw	r4,-32(fp)
   198ac:	00146900 	call	14690 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   198b0:	e0bff817 	ldw	r2,-32(fp)
   198b4:	10800a17 	ldw	r2,40(r2)
   198b8:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   198bc:	e0bffb17 	ldw	r2,-20(fp)
   198c0:	10000226 	beq	r2,zero,198cc <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   198c4:	e13ffb17 	ldw	r4,-20(fp)
   198c8:	0016b100 	call	16b10 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   198cc:	e0bff817 	ldw	r2,-32(fp)
   198d0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   198d4:	e0bff817 	ldw	r2,-32(fp)
   198d8:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   198dc:	e0bff817 	ldw	r2,-32(fp)
   198e0:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   198e4:	d0a81e03 	ldbu	r2,-24456(gp)
   198e8:	10803fcc 	andi	r2,r2,255
   198ec:	10803fe0 	cmpeqi	r2,r2,255
   198f0:	1000031e 	bne	r2,zero,19900 <OSTaskDel+0x214>
        OSLockNesting++;
   198f4:	d0a81e03 	ldbu	r2,-24456(gp)
   198f8:	10800044 	addi	r2,r2,1
   198fc:	d0a81e05 	stb	r2,-24456(gp)
   19900:	e0bff617 	ldw	r2,-40(fp)
   19904:	e0bffd15 	stw	r2,-12(fp)
   19908:	e0bffd17 	ldw	r2,-12(fp)
   1990c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   19910:	00141c00 	call	141c0 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19914:	0005303a 	rdctl	r2,status
   19918:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1991c:	e0fffa17 	ldw	r3,-24(fp)
   19920:	00bfff84 	movi	r2,-2
   19924:	1884703a 	and	r2,r3,r2
   19928:	1001703a 	wrctl	status,r2
  
  return context;
   1992c:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   19930:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   19934:	d0a81e03 	ldbu	r2,-24456(gp)
   19938:	10803fcc 	andi	r2,r2,255
   1993c:	10000326 	beq	r2,zero,1994c <OSTaskDel+0x260>
        OSLockNesting--;
   19940:	d0a81e03 	ldbu	r2,-24456(gp)
   19944:	10bfffc4 	addi	r2,r2,-1
   19948:	d0a81e05 	stb	r2,-24456(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   1994c:	e13ff817 	ldw	r4,-32(fp)
   19950:	001e2540 	call	1e254 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   19954:	d0a82643 	ldbu	r2,-24423(gp)
   19958:	10bfffc4 	addi	r2,r2,-1
   1995c:	d0a82645 	stb	r2,-24423(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   19960:	e0ffff03 	ldbu	r3,-4(fp)
   19964:	008000f4 	movhi	r2,3
   19968:	1092f004 	addi	r2,r2,19392
   1996c:	18c7883a 	add	r3,r3,r3
   19970:	18c7883a 	add	r3,r3,r3
   19974:	10c5883a 	add	r2,r2,r3
   19978:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   1997c:	e0bff817 	ldw	r2,-32(fp)
   19980:	10800617 	ldw	r2,24(r2)
   19984:	1000071e 	bne	r2,zero,199a4 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   19988:	e0bff817 	ldw	r2,-32(fp)
   1998c:	10800517 	ldw	r2,20(r2)
   19990:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   19994:	e0bff817 	ldw	r2,-32(fp)
   19998:	10800517 	ldw	r2,20(r2)
   1999c:	d0a82115 	stw	r2,-24444(gp)
   199a0:	00000a06 	br	199cc <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   199a4:	e0bff817 	ldw	r2,-32(fp)
   199a8:	10800617 	ldw	r2,24(r2)
   199ac:	e0fff817 	ldw	r3,-32(fp)
   199b0:	18c00517 	ldw	r3,20(r3)
   199b4:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   199b8:	e0bff817 	ldw	r2,-32(fp)
   199bc:	10800517 	ldw	r2,20(r2)
   199c0:	e0fff817 	ldw	r3,-32(fp)
   199c4:	18c00617 	ldw	r3,24(r3)
   199c8:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   199cc:	d0e82517 	ldw	r3,-24428(gp)
   199d0:	e0bff817 	ldw	r2,-32(fp)
   199d4:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   199d8:	e0bff817 	ldw	r2,-32(fp)
   199dc:	d0a82515 	stw	r2,-24428(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   199e0:	e0bff817 	ldw	r2,-32(fp)
   199e4:	00c00fc4 	movi	r3,63
   199e8:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   199ec:	e0bff817 	ldw	r2,-32(fp)
   199f0:	10001345 	stb	zero,77(r2)
   199f4:	e0bff617 	ldw	r2,-40(fp)
   199f8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   199fc:	e0bffc17 	ldw	r2,-16(fp)
   19a00:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   19a04:	d0a81e43 	ldbu	r2,-24455(gp)
   19a08:	10803fcc 	andi	r2,r2,255
   19a0c:	10800058 	cmpnei	r2,r2,1
   19a10:	1000011e 	bne	r2,zero,19a18 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
   19a14:	0014c2c0 	call	14c2c <OS_Sched>
    }
    return (OS_ERR_NONE);
   19a18:	0005883a 	mov	r2,zero
}
   19a1c:	e037883a 	mov	sp,fp
   19a20:	dfc00117 	ldw	ra,4(sp)
   19a24:	df000017 	ldw	fp,0(sp)
   19a28:	dec00204 	addi	sp,sp,8
   19a2c:	f800283a 	ret

00019a30 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   19a30:	defff504 	addi	sp,sp,-44
   19a34:	df000a15 	stw	fp,40(sp)
   19a38:	df000a04 	addi	fp,sp,40
   19a3c:	2005883a 	mov	r2,r4
   19a40:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   19a44:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   19a48:	e0bfff03 	ldbu	r2,-4(fp)
   19a4c:	10800518 	cmpnei	r2,r2,20
   19a50:	1000021e 	bne	r2,zero,19a5c <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   19a54:	00800f84 	movi	r2,62
   19a58:	00004506 	br	19b70 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   19a5c:	e0bfff03 	ldbu	r2,-4(fp)
   19a60:	10800530 	cmpltui	r2,r2,20
   19a64:	1000051e 	bne	r2,zero,19a7c <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   19a68:	e0bfff03 	ldbu	r2,-4(fp)
   19a6c:	10803fe0 	cmpeqi	r2,r2,255
   19a70:	1000021e 	bne	r2,zero,19a7c <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   19a74:	00800a84 	movi	r2,42
   19a78:	00003d06 	br	19b70 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   19a7c:	e0bfff03 	ldbu	r2,-4(fp)
   19a80:	10803fd8 	cmpnei	r2,r2,255
   19a84:	1000111e 	bne	r2,zero,19acc <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19a88:	0005303a 	rdctl	r2,status
   19a8c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19a90:	e0fff917 	ldw	r3,-28(fp)
   19a94:	00bfff84 	movi	r2,-2
   19a98:	1884703a 	and	r2,r3,r2
   19a9c:	1001703a 	wrctl	status,r2
  
  return context;
   19aa0:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   19aa4:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   19aa8:	d0a82d17 	ldw	r2,-24396(gp)
   19aac:	10800dc3 	ldbu	r2,55(r2)
   19ab0:	e0bff805 	stb	r2,-32(fp)
   19ab4:	e0bff617 	ldw	r2,-40(fp)
   19ab8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19abc:	e0bffe17 	ldw	r2,-8(fp)
   19ac0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   19ac4:	e0bff803 	ldbu	r2,-32(fp)
   19ac8:	00002906 	br	19b70 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19acc:	0005303a 	rdctl	r2,status
   19ad0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19ad4:	e0fff717 	ldw	r3,-36(fp)
   19ad8:	00bfff84 	movi	r2,-2
   19adc:	1884703a 	and	r2,r3,r2
   19ae0:	1001703a 	wrctl	status,r2
  
  return context;
   19ae4:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   19ae8:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   19aec:	e0ffff03 	ldbu	r3,-4(fp)
   19af0:	008000f4 	movhi	r2,3
   19af4:	1092f004 	addi	r2,r2,19392
   19af8:	18c7883a 	add	r3,r3,r3
   19afc:	18c7883a 	add	r3,r3,r3
   19b00:	10c5883a 	add	r2,r2,r3
   19b04:	10800017 	ldw	r2,0(r2)
   19b08:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   19b0c:	e0bffb17 	ldw	r2,-20(fp)
   19b10:	1000061e 	bne	r2,zero,19b2c <OSTaskDelReq+0xfc>
   19b14:	e0bff617 	ldw	r2,-40(fp)
   19b18:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19b1c:	e0bffa17 	ldw	r2,-24(fp)
   19b20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   19b24:	008010c4 	movi	r2,67
   19b28:	00001106 	br	19b70 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   19b2c:	e0bffb17 	ldw	r2,-20(fp)
   19b30:	10800058 	cmpnei	r2,r2,1
   19b34:	1000061e 	bne	r2,zero,19b50 <OSTaskDelReq+0x120>
   19b38:	e0bff617 	ldw	r2,-40(fp)
   19b3c:	e0bffc15 	stw	r2,-16(fp)
   19b40:	e0bffc17 	ldw	r2,-16(fp)
   19b44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   19b48:	00800f44 	movi	r2,61
   19b4c:	00000806 	br	19b70 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   19b50:	e0bffb17 	ldw	r2,-20(fp)
   19b54:	00c00fc4 	movi	r3,63
   19b58:	10c00dc5 	stb	r3,55(r2)
   19b5c:	e0bff617 	ldw	r2,-40(fp)
   19b60:	e0bffd15 	stw	r2,-12(fp)
   19b64:	e0bffd17 	ldw	r2,-12(fp)
   19b68:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   19b6c:	0005883a 	mov	r2,zero
}
   19b70:	e037883a 	mov	sp,fp
   19b74:	df000017 	ldw	fp,0(sp)
   19b78:	dec00104 	addi	sp,sp,4
   19b7c:	f800283a 	ret

00019b80 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   19b80:	defff404 	addi	sp,sp,-48
   19b84:	dfc00b15 	stw	ra,44(sp)
   19b88:	df000a15 	stw	fp,40(sp)
   19b8c:	df000a04 	addi	fp,sp,40
   19b90:	2005883a 	mov	r2,r4
   19b94:	e17ffe15 	stw	r5,-8(fp)
   19b98:	e1bfff15 	stw	r6,-4(fp)
   19b9c:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   19ba0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   19ba4:	e0bfff17 	ldw	r2,-4(fp)
   19ba8:	1000021e 	bne	r2,zero,19bb4 <OSTaskNameGet+0x34>
        return (0);
   19bac:	0005883a 	mov	r2,zero
   19bb0:	00005406 	br	19d04 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   19bb4:	e0bffd03 	ldbu	r2,-12(fp)
   19bb8:	10800570 	cmpltui	r2,r2,21
   19bbc:	1000081e 	bne	r2,zero,19be0 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   19bc0:	e0bffd03 	ldbu	r2,-12(fp)
   19bc4:	10803fe0 	cmpeqi	r2,r2,255
   19bc8:	1000051e 	bne	r2,zero,19be0 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   19bcc:	e0bfff17 	ldw	r2,-4(fp)
   19bd0:	00c00a84 	movi	r3,42
   19bd4:	10c00005 	stb	r3,0(r2)
            return (0);
   19bd8:	0005883a 	mov	r2,zero
   19bdc:	00004906 	br	19d04 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   19be0:	e0bffe17 	ldw	r2,-8(fp)
   19be4:	1000051e 	bne	r2,zero,19bfc <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   19be8:	e0bfff17 	ldw	r2,-4(fp)
   19bec:	00c00304 	movi	r3,12
   19bf0:	10c00005 	stb	r3,0(r2)
        return (0);
   19bf4:	0005883a 	mov	r2,zero
   19bf8:	00004206 	br	19d04 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   19bfc:	d0a82c03 	ldbu	r2,-24400(gp)
   19c00:	10803fcc 	andi	r2,r2,255
   19c04:	10000526 	beq	r2,zero,19c1c <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
   19c08:	e0bfff17 	ldw	r2,-4(fp)
   19c0c:	00c00444 	movi	r3,17
   19c10:	10c00005 	stb	r3,0(r2)
        return (0);
   19c14:	0005883a 	mov	r2,zero
   19c18:	00003a06 	br	19d04 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19c1c:	0005303a 	rdctl	r2,status
   19c20:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19c24:	e0fffc17 	ldw	r3,-16(fp)
   19c28:	00bfff84 	movi	r2,-2
   19c2c:	1884703a 	and	r2,r3,r2
   19c30:	1001703a 	wrctl	status,r2
  
  return context;
   19c34:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   19c38:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   19c3c:	e0bffd03 	ldbu	r2,-12(fp)
   19c40:	10803fd8 	cmpnei	r2,r2,255
   19c44:	1000031e 	bne	r2,zero,19c54 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   19c48:	d0a82d17 	ldw	r2,-24396(gp)
   19c4c:	10800c83 	ldbu	r2,50(r2)
   19c50:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   19c54:	e0fffd03 	ldbu	r3,-12(fp)
   19c58:	008000f4 	movhi	r2,3
   19c5c:	1092f004 	addi	r2,r2,19392
   19c60:	18c7883a 	add	r3,r3,r3
   19c64:	18c7883a 	add	r3,r3,r3
   19c68:	10c5883a 	add	r2,r2,r3
   19c6c:	10800017 	ldw	r2,0(r2)
   19c70:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   19c74:	e0bff817 	ldw	r2,-32(fp)
   19c78:	1000091e 	bne	r2,zero,19ca0 <OSTaskNameGet+0x120>
   19c7c:	e0bff617 	ldw	r2,-40(fp)
   19c80:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19c84:	e0bff717 	ldw	r2,-36(fp)
   19c88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   19c8c:	e0bfff17 	ldw	r2,-4(fp)
   19c90:	00c010c4 	movi	r3,67
   19c94:	10c00005 	stb	r3,0(r2)
        return (0);
   19c98:	0005883a 	mov	r2,zero
   19c9c:	00001906 	br	19d04 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   19ca0:	e0bff817 	ldw	r2,-32(fp)
   19ca4:	10800058 	cmpnei	r2,r2,1
   19ca8:	1000091e 	bne	r2,zero,19cd0 <OSTaskNameGet+0x150>
   19cac:	e0bff617 	ldw	r2,-40(fp)
   19cb0:	e0bff915 	stw	r2,-28(fp)
   19cb4:	e0bff917 	ldw	r2,-28(fp)
   19cb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   19cbc:	e0bfff17 	ldw	r2,-4(fp)
   19cc0:	00c010c4 	movi	r3,67
   19cc4:	10c00005 	stb	r3,0(r2)
        return (0);
   19cc8:	0005883a 	mov	r2,zero
   19ccc:	00000d06 	br	19d04 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   19cd0:	e0bff817 	ldw	r2,-32(fp)
   19cd4:	10801304 	addi	r2,r2,76
   19cd8:	100b883a 	mov	r5,r2
   19cdc:	e13ffe17 	ldw	r4,-8(fp)
   19ce0:	0014d700 	call	14d70 <OS_StrCopy>
   19ce4:	e0bffb05 	stb	r2,-20(fp)
   19ce8:	e0bff617 	ldw	r2,-40(fp)
   19cec:	e0bffa15 	stw	r2,-24(fp)
   19cf0:	e0bffa17 	ldw	r2,-24(fp)
   19cf4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   19cf8:	e0bfff17 	ldw	r2,-4(fp)
   19cfc:	10000005 	stb	zero,0(r2)
    return (len);
   19d00:	e0bffb03 	ldbu	r2,-20(fp)
}
   19d04:	e037883a 	mov	sp,fp
   19d08:	dfc00117 	ldw	ra,4(sp)
   19d0c:	df000017 	ldw	fp,0(sp)
   19d10:	dec00204 	addi	sp,sp,8
   19d14:	f800283a 	ret

00019d18 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   19d18:	defff304 	addi	sp,sp,-52
   19d1c:	dfc00c15 	stw	ra,48(sp)
   19d20:	df000b15 	stw	fp,44(sp)
   19d24:	df000b04 	addi	fp,sp,44
   19d28:	2005883a 	mov	r2,r4
   19d2c:	e17ffe15 	stw	r5,-8(fp)
   19d30:	e1bfff15 	stw	r6,-4(fp)
   19d34:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   19d38:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   19d3c:	e0bfff17 	ldw	r2,-4(fp)
   19d40:	10005c26 	beq	r2,zero,19eb4 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   19d44:	e0bffd03 	ldbu	r2,-12(fp)
   19d48:	10800570 	cmpltui	r2,r2,21
   19d4c:	1000071e 	bne	r2,zero,19d6c <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   19d50:	e0bffd03 	ldbu	r2,-12(fp)
   19d54:	10803fe0 	cmpeqi	r2,r2,255
   19d58:	1000041e 	bne	r2,zero,19d6c <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   19d5c:	e0bfff17 	ldw	r2,-4(fp)
   19d60:	00c00a84 	movi	r3,42
   19d64:	10c00005 	stb	r3,0(r2)
            return;
   19d68:	00005306 	br	19eb8 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   19d6c:	e0bffe17 	ldw	r2,-8(fp)
   19d70:	1000041e 	bne	r2,zero,19d84 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   19d74:	e0bfff17 	ldw	r2,-4(fp)
   19d78:	00c00304 	movi	r3,12
   19d7c:	10c00005 	stb	r3,0(r2)
        return;
   19d80:	00004d06 	br	19eb8 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   19d84:	d0a82c03 	ldbu	r2,-24400(gp)
   19d88:	10803fcc 	andi	r2,r2,255
   19d8c:	10000426 	beq	r2,zero,19da0 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
   19d90:	e0bfff17 	ldw	r2,-4(fp)
   19d94:	00c00484 	movi	r3,18
   19d98:	10c00005 	stb	r3,0(r2)
        return;
   19d9c:	00004606 	br	19eb8 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19da0:	0005303a 	rdctl	r2,status
   19da4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19da8:	e0fffc17 	ldw	r3,-16(fp)
   19dac:	00bfff84 	movi	r2,-2
   19db0:	1884703a 	and	r2,r3,r2
   19db4:	1001703a 	wrctl	status,r2
  
  return context;
   19db8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   19dbc:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   19dc0:	e0bffd03 	ldbu	r2,-12(fp)
   19dc4:	10803fd8 	cmpnei	r2,r2,255
   19dc8:	1000031e 	bne	r2,zero,19dd8 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
   19dcc:	d0a82d17 	ldw	r2,-24396(gp)
   19dd0:	10800c83 	ldbu	r2,50(r2)
   19dd4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   19dd8:	e0fffd03 	ldbu	r3,-12(fp)
   19ddc:	008000f4 	movhi	r2,3
   19de0:	1092f004 	addi	r2,r2,19392
   19de4:	18c7883a 	add	r3,r3,r3
   19de8:	18c7883a 	add	r3,r3,r3
   19dec:	10c5883a 	add	r2,r2,r3
   19df0:	10800017 	ldw	r2,0(r2)
   19df4:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   19df8:	e0bff717 	ldw	r2,-36(fp)
   19dfc:	1000081e 	bne	r2,zero,19e20 <OSTaskNameSet+0x108>
   19e00:	e0bff517 	ldw	r2,-44(fp)
   19e04:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19e08:	e0bff617 	ldw	r2,-40(fp)
   19e0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   19e10:	e0bfff17 	ldw	r2,-4(fp)
   19e14:	00c010c4 	movi	r3,67
   19e18:	10c00005 	stb	r3,0(r2)
        return;
   19e1c:	00002606 	br	19eb8 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   19e20:	e0bff717 	ldw	r2,-36(fp)
   19e24:	10800058 	cmpnei	r2,r2,1
   19e28:	1000081e 	bne	r2,zero,19e4c <OSTaskNameSet+0x134>
   19e2c:	e0bff517 	ldw	r2,-44(fp)
   19e30:	e0bff815 	stw	r2,-32(fp)
   19e34:	e0bff817 	ldw	r2,-32(fp)
   19e38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   19e3c:	e0bfff17 	ldw	r2,-4(fp)
   19e40:	00c010c4 	movi	r3,67
   19e44:	10c00005 	stb	r3,0(r2)
        return;
   19e48:	00001b06 	br	19eb8 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   19e4c:	e13ffe17 	ldw	r4,-8(fp)
   19e50:	0014de40 	call	14de4 <OS_StrLen>
   19e54:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   19e58:	e0bffa03 	ldbu	r2,-24(fp)
   19e5c:	10800830 	cmpltui	r2,r2,32
   19e60:	1000081e 	bne	r2,zero,19e84 <OSTaskNameSet+0x16c>
   19e64:	e0bff517 	ldw	r2,-44(fp)
   19e68:	e0bff915 	stw	r2,-28(fp)
   19e6c:	e0bff917 	ldw	r2,-28(fp)
   19e70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   19e74:	e0bfff17 	ldw	r2,-4(fp)
   19e78:	00c01044 	movi	r3,65
   19e7c:	10c00005 	stb	r3,0(r2)
        return;
   19e80:	00000d06 	br	19eb8 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   19e84:	e0bff717 	ldw	r2,-36(fp)
   19e88:	10801304 	addi	r2,r2,76
   19e8c:	e17ffe17 	ldw	r5,-8(fp)
   19e90:	1009883a 	mov	r4,r2
   19e94:	0014d700 	call	14d70 <OS_StrCopy>
   19e98:	e0bff517 	ldw	r2,-44(fp)
   19e9c:	e0bffb15 	stw	r2,-20(fp)
   19ea0:	e0bffb17 	ldw	r2,-20(fp)
   19ea4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   19ea8:	e0bfff17 	ldw	r2,-4(fp)
   19eac:	10000005 	stb	zero,0(r2)
   19eb0:	00000106 	br	19eb8 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
   19eb4:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   19eb8:	e037883a 	mov	sp,fp
   19ebc:	dfc00117 	ldw	ra,4(sp)
   19ec0:	df000017 	ldw	fp,0(sp)
   19ec4:	dec00204 	addi	sp,sp,8
   19ec8:	f800283a 	ret

00019ecc <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   19ecc:	defff404 	addi	sp,sp,-48
   19ed0:	dfc00b15 	stw	ra,44(sp)
   19ed4:	df000a15 	stw	fp,40(sp)
   19ed8:	df000a04 	addi	fp,sp,40
   19edc:	2005883a 	mov	r2,r4
   19ee0:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   19ee4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   19ee8:	e0bfff03 	ldbu	r2,-4(fp)
   19eec:	10800530 	cmpltui	r2,r2,20
   19ef0:	1000021e 	bne	r2,zero,19efc <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   19ef4:	00800a84 	movi	r2,42
   19ef8:	00006406 	br	1a08c <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19efc:	0005303a 	rdctl	r2,status
   19f00:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19f04:	e0fffe17 	ldw	r3,-8(fp)
   19f08:	00bfff84 	movi	r2,-2
   19f0c:	1884703a 	and	r2,r3,r2
   19f10:	1001703a 	wrctl	status,r2
  
  return context;
   19f14:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   19f18:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   19f1c:	e0ffff03 	ldbu	r3,-4(fp)
   19f20:	008000f4 	movhi	r2,3
   19f24:	1092f004 	addi	r2,r2,19392
   19f28:	18c7883a 	add	r3,r3,r3
   19f2c:	18c7883a 	add	r3,r3,r3
   19f30:	10c5883a 	add	r2,r2,r3
   19f34:	10800017 	ldw	r2,0(r2)
   19f38:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   19f3c:	e0bff817 	ldw	r2,-32(fp)
   19f40:	1000061e 	bne	r2,zero,19f5c <OSTaskResume+0x90>
   19f44:	e0bff617 	ldw	r2,-40(fp)
   19f48:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19f4c:	e0bff717 	ldw	r2,-36(fp)
   19f50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   19f54:	00801184 	movi	r2,70
   19f58:	00004c06 	br	1a08c <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   19f5c:	e0bff817 	ldw	r2,-32(fp)
   19f60:	10800058 	cmpnei	r2,r2,1
   19f64:	1000061e 	bne	r2,zero,19f80 <OSTaskResume+0xb4>
   19f68:	e0bff617 	ldw	r2,-40(fp)
   19f6c:	e0bff915 	stw	r2,-28(fp)
   19f70:	e0bff917 	ldw	r2,-28(fp)
   19f74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   19f78:	008010c4 	movi	r2,67
   19f7c:	00004306 	br	1a08c <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   19f80:	e0bff817 	ldw	r2,-32(fp)
   19f84:	10800c03 	ldbu	r2,48(r2)
   19f88:	10803fcc 	andi	r2,r2,255
   19f8c:	1080020c 	andi	r2,r2,8
   19f90:	10003926 	beq	r2,zero,1a078 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   19f94:	e0bff817 	ldw	r2,-32(fp)
   19f98:	10c00c03 	ldbu	r3,48(r2)
   19f9c:	00bffdc4 	movi	r2,-9
   19fa0:	1884703a 	and	r2,r3,r2
   19fa4:	1007883a 	mov	r3,r2
   19fa8:	e0bff817 	ldw	r2,-32(fp)
   19fac:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   19fb0:	e0bff817 	ldw	r2,-32(fp)
   19fb4:	10800c03 	ldbu	r2,48(r2)
   19fb8:	10803fcc 	andi	r2,r2,255
   19fbc:	1000281e 	bne	r2,zero,1a060 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
   19fc0:	e0bff817 	ldw	r2,-32(fp)
   19fc4:	10800b8b 	ldhu	r2,46(r2)
   19fc8:	10bfffcc 	andi	r2,r2,65535
   19fcc:	10001f1e 	bne	r2,zero,1a04c <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   19fd0:	e0bff817 	ldw	r2,-32(fp)
   19fd4:	10c00d83 	ldbu	r3,54(r2)
   19fd8:	d0a82a03 	ldbu	r2,-24408(gp)
   19fdc:	1884b03a 	or	r2,r3,r2
   19fe0:	d0a82a05 	stb	r2,-24408(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   19fe4:	e0bff817 	ldw	r2,-32(fp)
   19fe8:	10800d03 	ldbu	r2,52(r2)
   19fec:	10c03fcc 	andi	r3,r2,255
   19ff0:	e0bff817 	ldw	r2,-32(fp)
   19ff4:	10800d03 	ldbu	r2,52(r2)
   19ff8:	11003fcc 	andi	r4,r2,255
   19ffc:	d0a82a44 	addi	r2,gp,-24407
   1a000:	2085883a 	add	r2,r4,r2
   1a004:	11000003 	ldbu	r4,0(r2)
   1a008:	e0bff817 	ldw	r2,-32(fp)
   1a00c:	10800d43 	ldbu	r2,53(r2)
   1a010:	2084b03a 	or	r2,r4,r2
   1a014:	1009883a 	mov	r4,r2
   1a018:	d0a82a44 	addi	r2,gp,-24407
   1a01c:	1885883a 	add	r2,r3,r2
   1a020:	11000005 	stb	r4,0(r2)
   1a024:	e0bff617 	ldw	r2,-40(fp)
   1a028:	e0bffa15 	stw	r2,-24(fp)
   1a02c:	e0bffa17 	ldw	r2,-24(fp)
   1a030:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   1a034:	d0a81e43 	ldbu	r2,-24455(gp)
   1a038:	10803fcc 	andi	r2,r2,255
   1a03c:	10800058 	cmpnei	r2,r2,1
   1a040:	10000b1e 	bne	r2,zero,1a070 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
   1a044:	0014c2c0 	call	14c2c <OS_Sched>
   1a048:	00000906 	br	1a070 <OSTaskResume+0x1a4>
   1a04c:	e0bff617 	ldw	r2,-40(fp)
   1a050:	e0bffb15 	stw	r2,-20(fp)
   1a054:	e0bffb17 	ldw	r2,-20(fp)
   1a058:	1001703a 	wrctl	status,r2
   1a05c:	00000406 	br	1a070 <OSTaskResume+0x1a4>
   1a060:	e0bff617 	ldw	r2,-40(fp)
   1a064:	e0bffc15 	stw	r2,-16(fp)
   1a068:	e0bffc17 	ldw	r2,-16(fp)
   1a06c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   1a070:	0005883a 	mov	r2,zero
   1a074:	00000506 	br	1a08c <OSTaskResume+0x1c0>
   1a078:	e0bff617 	ldw	r2,-40(fp)
   1a07c:	e0bffd15 	stw	r2,-12(fp)
   1a080:	e0bffd17 	ldw	r2,-12(fp)
   1a084:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   1a088:	00801104 	movi	r2,68
}
   1a08c:	e037883a 	mov	sp,fp
   1a090:	dfc00117 	ldw	ra,4(sp)
   1a094:	df000017 	ldw	fp,0(sp)
   1a098:	dec00204 	addi	sp,sp,8
   1a09c:	f800283a 	ret

0001a0a0 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   1a0a0:	defff304 	addi	sp,sp,-52
   1a0a4:	df000c15 	stw	fp,48(sp)
   1a0a8:	df000c04 	addi	fp,sp,48
   1a0ac:	2005883a 	mov	r2,r4
   1a0b0:	e17fff15 	stw	r5,-4(fp)
   1a0b4:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1a0b8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   1a0bc:	e0bffe03 	ldbu	r2,-8(fp)
   1a0c0:	10800570 	cmpltui	r2,r2,21
   1a0c4:	1000051e 	bne	r2,zero,1a0dc <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   1a0c8:	e0bffe03 	ldbu	r2,-8(fp)
   1a0cc:	10803fe0 	cmpeqi	r2,r2,255
   1a0d0:	1000021e 	bne	r2,zero,1a0dc <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   1a0d4:	00800a84 	movi	r2,42
   1a0d8:	00005d06 	br	1a250 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   1a0dc:	e0bfff17 	ldw	r2,-4(fp)
   1a0e0:	1000021e 	bne	r2,zero,1a0ec <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   1a0e4:	00800244 	movi	r2,9
   1a0e8:	00005906 	br	1a250 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   1a0ec:	e0bfff17 	ldw	r2,-4(fp)
   1a0f0:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   1a0f4:	e0bfff17 	ldw	r2,-4(fp)
   1a0f8:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a0fc:	0005303a 	rdctl	r2,status
   1a100:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a104:	e0fffd17 	ldw	r3,-12(fp)
   1a108:	00bfff84 	movi	r2,-2
   1a10c:	1884703a 	and	r2,r3,r2
   1a110:	1001703a 	wrctl	status,r2
  
  return context;
   1a114:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
   1a118:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   1a11c:	e0bffe03 	ldbu	r2,-8(fp)
   1a120:	10803fd8 	cmpnei	r2,r2,255
   1a124:	1000031e 	bne	r2,zero,1a134 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
   1a128:	d0a82d17 	ldw	r2,-24396(gp)
   1a12c:	10800c83 	ldbu	r2,50(r2)
   1a130:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1a134:	e0fffe03 	ldbu	r3,-8(fp)
   1a138:	008000f4 	movhi	r2,3
   1a13c:	1092f004 	addi	r2,r2,19392
   1a140:	18c7883a 	add	r3,r3,r3
   1a144:	18c7883a 	add	r3,r3,r3
   1a148:	10c5883a 	add	r2,r2,r3
   1a14c:	10800017 	ldw	r2,0(r2)
   1a150:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   1a154:	e0bff817 	ldw	r2,-32(fp)
   1a158:	1000061e 	bne	r2,zero,1a174 <OSTaskStkChk+0xd4>
   1a15c:	e0bff617 	ldw	r2,-40(fp)
   1a160:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a164:	e0bff717 	ldw	r2,-36(fp)
   1a168:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1a16c:	008010c4 	movi	r2,67
   1a170:	00003706 	br	1a250 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1a174:	e0bff817 	ldw	r2,-32(fp)
   1a178:	10800058 	cmpnei	r2,r2,1
   1a17c:	1000061e 	bne	r2,zero,1a198 <OSTaskStkChk+0xf8>
   1a180:	e0bff617 	ldw	r2,-40(fp)
   1a184:	e0bff915 	stw	r2,-28(fp)
   1a188:	e0bff917 	ldw	r2,-28(fp)
   1a18c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1a190:	008010c4 	movi	r2,67
   1a194:	00002e06 	br	1a250 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   1a198:	e0bff817 	ldw	r2,-32(fp)
   1a19c:	1080040b 	ldhu	r2,16(r2)
   1a1a0:	10bfffcc 	andi	r2,r2,65535
   1a1a4:	1080004c 	andi	r2,r2,1
   1a1a8:	1000061e 	bne	r2,zero,1a1c4 <OSTaskStkChk+0x124>
   1a1ac:	e0bff617 	ldw	r2,-40(fp)
   1a1b0:	e0bffa15 	stw	r2,-24(fp)
   1a1b4:	e0bffa17 	ldw	r2,-24(fp)
   1a1b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   1a1bc:	00801144 	movi	r2,69
   1a1c0:	00002306 	br	1a250 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
   1a1c4:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   1a1c8:	e0bff817 	ldw	r2,-32(fp)
   1a1cc:	10800317 	ldw	r2,12(r2)
   1a1d0:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
   1a1d4:	e0bff817 	ldw	r2,-32(fp)
   1a1d8:	10800217 	ldw	r2,8(r2)
   1a1dc:	e0bff415 	stw	r2,-48(fp)
   1a1e0:	e0bff617 	ldw	r2,-40(fp)
   1a1e4:	e0bffb15 	stw	r2,-20(fp)
   1a1e8:	e0bffb17 	ldw	r2,-20(fp)
   1a1ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1a1f0:	00000306 	br	1a200 <OSTaskStkChk+0x160>
        nfree++;
   1a1f4:	e0bff517 	ldw	r2,-44(fp)
   1a1f8:	10800044 	addi	r2,r2,1
   1a1fc:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1a200:	e0bff417 	ldw	r2,-48(fp)
   1a204:	10c00104 	addi	r3,r2,4
   1a208:	e0fff415 	stw	r3,-48(fp)
   1a20c:	10800017 	ldw	r2,0(r2)
   1a210:	103ff826 	beq	r2,zero,1a1f4 <OSTaskStkChk+0x154>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   1a214:	e0bff517 	ldw	r2,-44(fp)
   1a218:	1085883a 	add	r2,r2,r2
   1a21c:	1085883a 	add	r2,r2,r2
   1a220:	1007883a 	mov	r3,r2
   1a224:	e0bfff17 	ldw	r2,-4(fp)
   1a228:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   1a22c:	e0fffc17 	ldw	r3,-16(fp)
   1a230:	e0bff517 	ldw	r2,-44(fp)
   1a234:	1885c83a 	sub	r2,r3,r2
   1a238:	1085883a 	add	r2,r2,r2
   1a23c:	1085883a 	add	r2,r2,r2
   1a240:	1007883a 	mov	r3,r2
   1a244:	e0bfff17 	ldw	r2,-4(fp)
   1a248:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   1a24c:	0005883a 	mov	r2,zero
}
   1a250:	e037883a 	mov	sp,fp
   1a254:	df000017 	ldw	fp,0(sp)
   1a258:	dec00104 	addi	sp,sp,4
   1a25c:	f800283a 	ret

0001a260 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   1a260:	defff504 	addi	sp,sp,-44
   1a264:	dfc00a15 	stw	ra,40(sp)
   1a268:	df000915 	stw	fp,36(sp)
   1a26c:	df000904 	addi	fp,sp,36
   1a270:	2005883a 	mov	r2,r4
   1a274:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1a278:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   1a27c:	e0bfff03 	ldbu	r2,-4(fp)
   1a280:	10800518 	cmpnei	r2,r2,20
   1a284:	1000021e 	bne	r2,zero,1a290 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   1a288:	008011c4 	movi	r2,71
   1a28c:	00006806 	br	1a430 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1a290:	e0bfff03 	ldbu	r2,-4(fp)
   1a294:	10800530 	cmpltui	r2,r2,20
   1a298:	1000051e 	bne	r2,zero,1a2b0 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   1a29c:	e0bfff03 	ldbu	r2,-4(fp)
   1a2a0:	10803fe0 	cmpeqi	r2,r2,255
   1a2a4:	1000021e 	bne	r2,zero,1a2b0 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   1a2a8:	00800a84 	movi	r2,42
   1a2ac:	00006006 	br	1a430 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a2b0:	0005303a 	rdctl	r2,status
   1a2b4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a2b8:	e0fffe17 	ldw	r3,-8(fp)
   1a2bc:	00bfff84 	movi	r2,-2
   1a2c0:	1884703a 	and	r2,r3,r2
   1a2c4:	1001703a 	wrctl	status,r2
  
  return context;
   1a2c8:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   1a2cc:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   1a2d0:	e0bfff03 	ldbu	r2,-4(fp)
   1a2d4:	10803fd8 	cmpnei	r2,r2,255
   1a2d8:	1000061e 	bne	r2,zero,1a2f4 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
   1a2dc:	d0a82d17 	ldw	r2,-24396(gp)
   1a2e0:	10800c83 	ldbu	r2,50(r2)
   1a2e4:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   1a2e8:	00800044 	movi	r2,1
   1a2ec:	e0bff705 	stb	r2,-36(fp)
   1a2f0:	00000906 	br	1a318 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   1a2f4:	d0a82d17 	ldw	r2,-24396(gp)
   1a2f8:	10800c83 	ldbu	r2,50(r2)
   1a2fc:	10c03fcc 	andi	r3,r2,255
   1a300:	e0bfff03 	ldbu	r2,-4(fp)
   1a304:	1880031e 	bne	r3,r2,1a314 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
   1a308:	00800044 	movi	r2,1
   1a30c:	e0bff705 	stb	r2,-36(fp)
   1a310:	00000106 	br	1a318 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   1a314:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1a318:	e0ffff03 	ldbu	r3,-4(fp)
   1a31c:	008000f4 	movhi	r2,3
   1a320:	1092f004 	addi	r2,r2,19392
   1a324:	18c7883a 	add	r3,r3,r3
   1a328:	18c7883a 	add	r3,r3,r3
   1a32c:	10c5883a 	add	r2,r2,r3
   1a330:	10800017 	ldw	r2,0(r2)
   1a334:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   1a338:	e0bffa17 	ldw	r2,-24(fp)
   1a33c:	1000061e 	bne	r2,zero,1a358 <OSTaskSuspend+0xf8>
   1a340:	e0bff817 	ldw	r2,-32(fp)
   1a344:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a348:	e0bff917 	ldw	r2,-28(fp)
   1a34c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   1a350:	00801204 	movi	r2,72
   1a354:	00003606 	br	1a430 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   1a358:	e0bffa17 	ldw	r2,-24(fp)
   1a35c:	10800058 	cmpnei	r2,r2,1
   1a360:	1000061e 	bne	r2,zero,1a37c <OSTaskSuspend+0x11c>
   1a364:	e0bff817 	ldw	r2,-32(fp)
   1a368:	e0bffb15 	stw	r2,-20(fp)
   1a36c:	e0bffb17 	ldw	r2,-20(fp)
   1a370:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1a374:	008010c4 	movi	r2,67
   1a378:	00002d06 	br	1a430 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
   1a37c:	e0bffa17 	ldw	r2,-24(fp)
   1a380:	10800d03 	ldbu	r2,52(r2)
   1a384:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   1a388:	e0fffd03 	ldbu	r3,-12(fp)
   1a38c:	e13ffd03 	ldbu	r4,-12(fp)
   1a390:	d0a82a44 	addi	r2,gp,-24407
   1a394:	2085883a 	add	r2,r4,r2
   1a398:	10800003 	ldbu	r2,0(r2)
   1a39c:	1009883a 	mov	r4,r2
   1a3a0:	e0bffa17 	ldw	r2,-24(fp)
   1a3a4:	10800d43 	ldbu	r2,53(r2)
   1a3a8:	0084303a 	nor	r2,zero,r2
   1a3ac:	2084703a 	and	r2,r4,r2
   1a3b0:	1009883a 	mov	r4,r2
   1a3b4:	d0a82a44 	addi	r2,gp,-24407
   1a3b8:	1885883a 	add	r2,r3,r2
   1a3bc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   1a3c0:	e0fffd03 	ldbu	r3,-12(fp)
   1a3c4:	d0a82a44 	addi	r2,gp,-24407
   1a3c8:	1885883a 	add	r2,r3,r2
   1a3cc:	10800003 	ldbu	r2,0(r2)
   1a3d0:	10803fcc 	andi	r2,r2,255
   1a3d4:	1000071e 	bne	r2,zero,1a3f4 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   1a3d8:	e0bffa17 	ldw	r2,-24(fp)
   1a3dc:	10800d83 	ldbu	r2,54(r2)
   1a3e0:	0084303a 	nor	r2,zero,r2
   1a3e4:	1007883a 	mov	r3,r2
   1a3e8:	d0a82a03 	ldbu	r2,-24408(gp)
   1a3ec:	1884703a 	and	r2,r3,r2
   1a3f0:	d0a82a05 	stb	r2,-24408(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   1a3f4:	e0bffa17 	ldw	r2,-24(fp)
   1a3f8:	10800c03 	ldbu	r2,48(r2)
   1a3fc:	10800214 	ori	r2,r2,8
   1a400:	1007883a 	mov	r3,r2
   1a404:	e0bffa17 	ldw	r2,-24(fp)
   1a408:	10c00c05 	stb	r3,48(r2)
   1a40c:	e0bff817 	ldw	r2,-32(fp)
   1a410:	e0bffc15 	stw	r2,-16(fp)
   1a414:	e0bffc17 	ldw	r2,-16(fp)
   1a418:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   1a41c:	e0bff703 	ldbu	r2,-36(fp)
   1a420:	10800058 	cmpnei	r2,r2,1
   1a424:	1000011e 	bne	r2,zero,1a42c <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
   1a428:	0014c2c0 	call	14c2c <OS_Sched>
    }
    return (OS_ERR_NONE);
   1a42c:	0005883a 	mov	r2,zero
}
   1a430:	e037883a 	mov	sp,fp
   1a434:	dfc00117 	ldw	ra,4(sp)
   1a438:	df000017 	ldw	fp,0(sp)
   1a43c:	dec00204 	addi	sp,sp,8
   1a440:	f800283a 	ret

0001a444 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   1a444:	defff604 	addi	sp,sp,-40
   1a448:	dfc00915 	stw	ra,36(sp)
   1a44c:	df000815 	stw	fp,32(sp)
   1a450:	df000804 	addi	fp,sp,32
   1a454:	2005883a 	mov	r2,r4
   1a458:	e17fff15 	stw	r5,-4(fp)
   1a45c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1a460:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   1a464:	e0bffe03 	ldbu	r2,-8(fp)
   1a468:	10800570 	cmpltui	r2,r2,21
   1a46c:	1000051e 	bne	r2,zero,1a484 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   1a470:	e0bffe03 	ldbu	r2,-8(fp)
   1a474:	10803fe0 	cmpeqi	r2,r2,255
   1a478:	1000021e 	bne	r2,zero,1a484 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   1a47c:	00800a84 	movi	r2,42
   1a480:	00003406 	br	1a554 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   1a484:	e0bfff17 	ldw	r2,-4(fp)
   1a488:	1000021e 	bne	r2,zero,1a494 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   1a48c:	00800244 	movi	r2,9
   1a490:	00003006 	br	1a554 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a494:	0005303a 	rdctl	r2,status
   1a498:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a49c:	e0fffd17 	ldw	r3,-12(fp)
   1a4a0:	00bfff84 	movi	r2,-2
   1a4a4:	1884703a 	and	r2,r3,r2
   1a4a8:	1001703a 	wrctl	status,r2
  
  return context;
   1a4ac:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1a4b0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   1a4b4:	e0bffe03 	ldbu	r2,-8(fp)
   1a4b8:	10803fd8 	cmpnei	r2,r2,255
   1a4bc:	1000031e 	bne	r2,zero,1a4cc <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
   1a4c0:	d0a82d17 	ldw	r2,-24396(gp)
   1a4c4:	10800c83 	ldbu	r2,50(r2)
   1a4c8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1a4cc:	e0fffe03 	ldbu	r3,-8(fp)
   1a4d0:	008000f4 	movhi	r2,3
   1a4d4:	1092f004 	addi	r2,r2,19392
   1a4d8:	18c7883a 	add	r3,r3,r3
   1a4dc:	18c7883a 	add	r3,r3,r3
   1a4e0:	10c5883a 	add	r2,r2,r3
   1a4e4:	10800017 	ldw	r2,0(r2)
   1a4e8:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   1a4ec:	e0bffa17 	ldw	r2,-24(fp)
   1a4f0:	1000061e 	bne	r2,zero,1a50c <OSTaskQuery+0xc8>
   1a4f4:	e0bff817 	ldw	r2,-32(fp)
   1a4f8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a4fc:	e0bff917 	ldw	r2,-28(fp)
   1a500:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   1a504:	00800a44 	movi	r2,41
   1a508:	00001206 	br	1a554 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   1a50c:	e0bffa17 	ldw	r2,-24(fp)
   1a510:	10800058 	cmpnei	r2,r2,1
   1a514:	1000061e 	bne	r2,zero,1a530 <OSTaskQuery+0xec>
   1a518:	e0bff817 	ldw	r2,-32(fp)
   1a51c:	e0bffb15 	stw	r2,-20(fp)
   1a520:	e0bffb17 	ldw	r2,-20(fp)
   1a524:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1a528:	008010c4 	movi	r2,67
   1a52c:	00000906 	br	1a554 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   1a530:	01801b04 	movi	r6,108
   1a534:	e17ffa17 	ldw	r5,-24(fp)
   1a538:	e13fff17 	ldw	r4,-4(fp)
   1a53c:	0014bc40 	call	14bc4 <OS_MemCopy>
   1a540:	e0bff817 	ldw	r2,-32(fp)
   1a544:	e0bffc15 	stw	r2,-16(fp)
   1a548:	e0bffc17 	ldw	r2,-16(fp)
   1a54c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1a550:	0005883a 	mov	r2,zero
}
   1a554:	e037883a 	mov	sp,fp
   1a558:	dfc00117 	ldw	ra,4(sp)
   1a55c:	df000017 	ldw	fp,0(sp)
   1a560:	dec00204 	addi	sp,sp,8
   1a564:	f800283a 	ret

0001a568 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   1a568:	defffc04 	addi	sp,sp,-16
   1a56c:	df000315 	stw	fp,12(sp)
   1a570:	df000304 	addi	fp,sp,12
   1a574:	e13ffd15 	stw	r4,-12(fp)
   1a578:	e17ffe15 	stw	r5,-8(fp)
   1a57c:	3005883a 	mov	r2,r6
   1a580:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   1a584:	e0bfff0b 	ldhu	r2,-4(fp)
   1a588:	1080004c 	andi	r2,r2,1
   1a58c:	10000d26 	beq	r2,zero,1a5c4 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   1a590:	e0bfff0b 	ldhu	r2,-4(fp)
   1a594:	1080008c 	andi	r2,r2,2
   1a598:	10000a26 	beq	r2,zero,1a5c4 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1a59c:	00000706 	br	1a5bc <OS_TaskStkClr+0x54>
                size--;
   1a5a0:	e0bffe17 	ldw	r2,-8(fp)
   1a5a4:	10bfffc4 	addi	r2,r2,-1
   1a5a8:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   1a5ac:	e0bffd17 	ldw	r2,-12(fp)
   1a5b0:	10c00104 	addi	r3,r2,4
   1a5b4:	e0fffd15 	stw	r3,-12(fp)
   1a5b8:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1a5bc:	e0bffe17 	ldw	r2,-8(fp)
   1a5c0:	103ff71e 	bne	r2,zero,1a5a0 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   1a5c4:	0001883a 	nop
   1a5c8:	e037883a 	mov	sp,fp
   1a5cc:	df000017 	ldw	fp,0(sp)
   1a5d0:	dec00104 	addi	sp,sp,4
   1a5d4:	f800283a 	ret

0001a5d8 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   1a5d8:	defff904 	addi	sp,sp,-28
   1a5dc:	dfc00615 	stw	ra,24(sp)
   1a5e0:	df000515 	stw	fp,20(sp)
   1a5e4:	df000504 	addi	fp,sp,20
   1a5e8:	2005883a 	mov	r2,r4
   1a5ec:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1a5f0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1a5f4:	d0a82c03 	ldbu	r2,-24400(gp)
   1a5f8:	10803fcc 	andi	r2,r2,255
   1a5fc:	1000311e 	bne	r2,zero,1a6c4 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   1a600:	e0bfff0b 	ldhu	r2,-4(fp)
   1a604:	10003026 	beq	r2,zero,1a6c8 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a608:	0005303a 	rdctl	r2,status
   1a60c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a610:	e0fffe17 	ldw	r3,-8(fp)
   1a614:	00bfff84 	movi	r2,-2
   1a618:	1884703a 	and	r2,r3,r2
   1a61c:	1001703a 	wrctl	status,r2
  
  return context;
   1a620:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   1a624:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   1a628:	d0a82d17 	ldw	r2,-24396(gp)
   1a62c:	10800d03 	ldbu	r2,52(r2)
   1a630:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   1a634:	e0fffd03 	ldbu	r3,-12(fp)
   1a638:	e13ffd03 	ldbu	r4,-12(fp)
   1a63c:	d0a82a44 	addi	r2,gp,-24407
   1a640:	2085883a 	add	r2,r4,r2
   1a644:	10800003 	ldbu	r2,0(r2)
   1a648:	1009883a 	mov	r4,r2
   1a64c:	d0a82d17 	ldw	r2,-24396(gp)
   1a650:	10800d43 	ldbu	r2,53(r2)
   1a654:	0084303a 	nor	r2,zero,r2
   1a658:	2084703a 	and	r2,r4,r2
   1a65c:	1009883a 	mov	r4,r2
   1a660:	d0a82a44 	addi	r2,gp,-24407
   1a664:	1885883a 	add	r2,r3,r2
   1a668:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   1a66c:	e0fffd03 	ldbu	r3,-12(fp)
   1a670:	d0a82a44 	addi	r2,gp,-24407
   1a674:	1885883a 	add	r2,r3,r2
   1a678:	10800003 	ldbu	r2,0(r2)
   1a67c:	10803fcc 	andi	r2,r2,255
   1a680:	1000071e 	bne	r2,zero,1a6a0 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1a684:	d0a82d17 	ldw	r2,-24396(gp)
   1a688:	10800d83 	ldbu	r2,54(r2)
   1a68c:	0084303a 	nor	r2,zero,r2
   1a690:	1007883a 	mov	r3,r2
   1a694:	d0a82a03 	ldbu	r2,-24408(gp)
   1a698:	1884703a 	and	r2,r3,r2
   1a69c:	d0a82a05 	stb	r2,-24408(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   1a6a0:	d0a82d17 	ldw	r2,-24396(gp)
   1a6a4:	e0ffff0b 	ldhu	r3,-4(fp)
   1a6a8:	10c00b8d 	sth	r3,46(r2)
   1a6ac:	e0bffb17 	ldw	r2,-20(fp)
   1a6b0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a6b4:	e0bffc17 	ldw	r2,-16(fp)
   1a6b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   1a6bc:	0014c2c0 	call	14c2c <OS_Sched>
   1a6c0:	00000106 	br	1a6c8 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
   1a6c4:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
   1a6c8:	e037883a 	mov	sp,fp
   1a6cc:	dfc00117 	ldw	ra,4(sp)
   1a6d0:	df000017 	ldw	fp,0(sp)
   1a6d4:	dec00204 	addi	sp,sp,8
   1a6d8:	f800283a 	ret

0001a6dc <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   1a6dc:	defff804 	addi	sp,sp,-32
   1a6e0:	dfc00715 	stw	ra,28(sp)
   1a6e4:	df000615 	stw	fp,24(sp)
   1a6e8:	df000604 	addi	fp,sp,24
   1a6ec:	2015883a 	mov	r10,r4
   1a6f0:	2809883a 	mov	r4,r5
   1a6f4:	3007883a 	mov	r3,r6
   1a6f8:	3805883a 	mov	r2,r7
   1a6fc:	e2bffc05 	stb	r10,-16(fp)
   1a700:	e13ffd05 	stb	r4,-12(fp)
   1a704:	e0fffe05 	stb	r3,-8(fp)
   1a708:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1a70c:	d0a82c03 	ldbu	r2,-24400(gp)
   1a710:	10803fcc 	andi	r2,r2,255
   1a714:	10000226 	beq	r2,zero,1a720 <OSTimeDlyHMSM+0x44>
        return (OS_ERR_TIME_DLY_ISR);
   1a718:	00801544 	movi	r2,85
   1a71c:	00004206 	br	1a828 <OSTimeDlyHMSM+0x14c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   1a720:	e0bffc03 	ldbu	r2,-16(fp)
   1a724:	1000081e 	bne	r2,zero,1a748 <OSTimeDlyHMSM+0x6c>
        if (minutes == 0) {
   1a728:	e0bffd03 	ldbu	r2,-12(fp)
   1a72c:	1000061e 	bne	r2,zero,1a748 <OSTimeDlyHMSM+0x6c>
            if (seconds == 0) {
   1a730:	e0bffe03 	ldbu	r2,-8(fp)
   1a734:	1000041e 	bne	r2,zero,1a748 <OSTimeDlyHMSM+0x6c>
                if (ms == 0) {
   1a738:	e0bfff0b 	ldhu	r2,-4(fp)
   1a73c:	1000021e 	bne	r2,zero,1a748 <OSTimeDlyHMSM+0x6c>
                    return (OS_ERR_TIME_ZERO_DLY);
   1a740:	00801504 	movi	r2,84
   1a744:	00003806 	br	1a828 <OSTimeDlyHMSM+0x14c>
                }
            }
        }
    }
    if (minutes > 59) {
   1a748:	e0bffd03 	ldbu	r2,-12(fp)
   1a74c:	10800f30 	cmpltui	r2,r2,60
   1a750:	1000021e 	bne	r2,zero,1a75c <OSTimeDlyHMSM+0x80>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   1a754:	00801444 	movi	r2,81
   1a758:	00003306 	br	1a828 <OSTimeDlyHMSM+0x14c>
    }
    if (seconds > 59) {
   1a75c:	e0bffe03 	ldbu	r2,-8(fp)
   1a760:	10800f30 	cmpltui	r2,r2,60
   1a764:	1000021e 	bne	r2,zero,1a770 <OSTimeDlyHMSM+0x94>
        return (OS_ERR_TIME_INVALID_SECONDS);
   1a768:	00801484 	movi	r2,82
   1a76c:	00002e06 	br	1a828 <OSTimeDlyHMSM+0x14c>
    }
    if (ms > 999) {
   1a770:	e0bfff0b 	ldhu	r2,-4(fp)
   1a774:	1080fa30 	cmpltui	r2,r2,1000
   1a778:	1000021e 	bne	r2,zero,1a784 <OSTimeDlyHMSM+0xa8>
        return (OS_ERR_TIME_INVALID_MS);
   1a77c:	008014c4 	movi	r2,83
   1a780:	00002906 	br	1a828 <OSTimeDlyHMSM+0x14c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1a784:	e0bffc03 	ldbu	r2,-16(fp)
   1a788:	10c38424 	muli	r3,r2,3600
   1a78c:	e0bffd03 	ldbu	r2,-12(fp)
   1a790:	10800f24 	muli	r2,r2,60
   1a794:	1887883a 	add	r3,r3,r2
   1a798:	e0bffe03 	ldbu	r2,-8(fp)
   1a79c:	1885883a 	add	r2,r3,r2
   1a7a0:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   1a7a4:	e0bfff0b 	ldhu	r2,-4(fp)
   1a7a8:	10800f84 	addi	r2,r2,62
   1a7ac:	100690fa 	slli	r3,r2,3
   1a7b0:	008418b4 	movhi	r2,4194
   1a7b4:	109374c4 	addi	r2,r2,19923
   1a7b8:	188a383a 	mulxuu	r5,r3,r2
   1a7bc:	1885383a 	mul	r2,r3,r2
   1a7c0:	1011883a 	mov	r8,r2
   1a7c4:	2813883a 	mov	r9,r5
   1a7c8:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1a7cc:	2085883a 	add	r2,r4,r2
   1a7d0:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   1a7d4:	e0bffb17 	ldw	r2,-20(fp)
   1a7d8:	1004d43a 	srli	r2,r2,16
   1a7dc:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   1a7e0:	e0bffb17 	ldw	r2,-20(fp)
   1a7e4:	10bfffcc 	andi	r2,r2,65535
   1a7e8:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   1a7ec:	e0bffb17 	ldw	r2,-20(fp)
   1a7f0:	10bfffcc 	andi	r2,r2,65535
   1a7f4:	1009883a 	mov	r4,r2
   1a7f8:	001a5d80 	call	1a5d8 <OSTimeDly>
    while (loops > 0) {
   1a7fc:	00000706 	br	1a81c <OSTimeDlyHMSM+0x140>
        OSTimeDly((INT16U)32768u);
   1a800:	01200014 	movui	r4,32768
   1a804:	001a5d80 	call	1a5d8 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   1a808:	01200014 	movui	r4,32768
   1a80c:	001a5d80 	call	1a5d8 <OSTimeDly>
        loops--;
   1a810:	e0bffa0b 	ldhu	r2,-24(fp)
   1a814:	10bfffc4 	addi	r2,r2,-1
   1a818:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   1a81c:	e0bffa0b 	ldhu	r2,-24(fp)
   1a820:	103ff71e 	bne	r2,zero,1a800 <OSTimeDlyHMSM+0x124>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   1a824:	0005883a 	mov	r2,zero
}
   1a828:	e037883a 	mov	sp,fp
   1a82c:	dfc00117 	ldw	ra,4(sp)
   1a830:	df000017 	ldw	fp,0(sp)
   1a834:	dec00204 	addi	sp,sp,8
   1a838:	f800283a 	ret

0001a83c <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   1a83c:	defff504 	addi	sp,sp,-44
   1a840:	dfc00a15 	stw	ra,40(sp)
   1a844:	df000915 	stw	fp,36(sp)
   1a848:	df000904 	addi	fp,sp,36
   1a84c:	2005883a 	mov	r2,r4
   1a850:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1a854:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   1a858:	e0bfff03 	ldbu	r2,-4(fp)
   1a85c:	10800530 	cmpltui	r2,r2,20
   1a860:	1000021e 	bne	r2,zero,1a86c <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   1a864:	00800a84 	movi	r2,42
   1a868:	00006406 	br	1a9fc <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a86c:	0005303a 	rdctl	r2,status
   1a870:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a874:	e0fffe17 	ldw	r3,-8(fp)
   1a878:	00bfff84 	movi	r2,-2
   1a87c:	1884703a 	and	r2,r3,r2
   1a880:	1001703a 	wrctl	status,r2
  
  return context;
   1a884:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   1a888:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   1a88c:	e0ffff03 	ldbu	r3,-4(fp)
   1a890:	008000f4 	movhi	r2,3
   1a894:	1092f004 	addi	r2,r2,19392
   1a898:	18c7883a 	add	r3,r3,r3
   1a89c:	18c7883a 	add	r3,r3,r3
   1a8a0:	10c5883a 	add	r2,r2,r3
   1a8a4:	10800017 	ldw	r2,0(r2)
   1a8a8:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
   1a8ac:	e0bff917 	ldw	r2,-28(fp)
   1a8b0:	1000061e 	bne	r2,zero,1a8cc <OSTimeDlyResume+0x90>
   1a8b4:	e0bff717 	ldw	r2,-36(fp)
   1a8b8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a8bc:	e0bff817 	ldw	r2,-32(fp)
   1a8c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1a8c4:	008010c4 	movi	r2,67
   1a8c8:	00004c06 	br	1a9fc <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1a8cc:	e0bff917 	ldw	r2,-28(fp)
   1a8d0:	10800058 	cmpnei	r2,r2,1
   1a8d4:	1000061e 	bne	r2,zero,1a8f0 <OSTimeDlyResume+0xb4>
   1a8d8:	e0bff717 	ldw	r2,-36(fp)
   1a8dc:	e0bffa15 	stw	r2,-24(fp)
   1a8e0:	e0bffa17 	ldw	r2,-24(fp)
   1a8e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1a8e8:	008010c4 	movi	r2,67
   1a8ec:	00004306 	br	1a9fc <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   1a8f0:	e0bff917 	ldw	r2,-28(fp)
   1a8f4:	10800b8b 	ldhu	r2,46(r2)
   1a8f8:	10bfffcc 	andi	r2,r2,65535
   1a8fc:	1000061e 	bne	r2,zero,1a918 <OSTimeDlyResume+0xdc>
   1a900:	e0bff717 	ldw	r2,-36(fp)
   1a904:	e0bffb15 	stw	r2,-20(fp)
   1a908:	e0bffb17 	ldw	r2,-20(fp)
   1a90c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   1a910:	00801404 	movi	r2,80
   1a914:	00003906 	br	1a9fc <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   1a918:	e0bff917 	ldw	r2,-28(fp)
   1a91c:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   1a920:	e0bff917 	ldw	r2,-28(fp)
   1a924:	10800c03 	ldbu	r2,48(r2)
   1a928:	10803fcc 	andi	r2,r2,255
   1a92c:	10800dcc 	andi	r2,r2,55
   1a930:	10000b26 	beq	r2,zero,1a960 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   1a934:	e0bff917 	ldw	r2,-28(fp)
   1a938:	10c00c03 	ldbu	r3,48(r2)
   1a93c:	00bff204 	movi	r2,-56
   1a940:	1884703a 	and	r2,r3,r2
   1a944:	1007883a 	mov	r3,r2
   1a948:	e0bff917 	ldw	r2,-28(fp)
   1a94c:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   1a950:	e0bff917 	ldw	r2,-28(fp)
   1a954:	00c00044 	movi	r3,1
   1a958:	10c00c45 	stb	r3,49(r2)
   1a95c:	00000206 	br	1a968 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   1a960:	e0bff917 	ldw	r2,-28(fp)
   1a964:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   1a968:	e0bff917 	ldw	r2,-28(fp)
   1a96c:	10800c03 	ldbu	r2,48(r2)
   1a970:	10803fcc 	andi	r2,r2,255
   1a974:	1080020c 	andi	r2,r2,8
   1a978:	10001b1e 	bne	r2,zero,1a9e8 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   1a97c:	e0bff917 	ldw	r2,-28(fp)
   1a980:	10c00d83 	ldbu	r3,54(r2)
   1a984:	d0a82a03 	ldbu	r2,-24408(gp)
   1a988:	1884b03a 	or	r2,r3,r2
   1a98c:	d0a82a05 	stb	r2,-24408(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1a990:	e0bff917 	ldw	r2,-28(fp)
   1a994:	10800d03 	ldbu	r2,52(r2)
   1a998:	10c03fcc 	andi	r3,r2,255
   1a99c:	e0bff917 	ldw	r2,-28(fp)
   1a9a0:	10800d03 	ldbu	r2,52(r2)
   1a9a4:	11003fcc 	andi	r4,r2,255
   1a9a8:	d0a82a44 	addi	r2,gp,-24407
   1a9ac:	2085883a 	add	r2,r4,r2
   1a9b0:	11000003 	ldbu	r4,0(r2)
   1a9b4:	e0bff917 	ldw	r2,-28(fp)
   1a9b8:	10800d43 	ldbu	r2,53(r2)
   1a9bc:	2084b03a 	or	r2,r4,r2
   1a9c0:	1009883a 	mov	r4,r2
   1a9c4:	d0a82a44 	addi	r2,gp,-24407
   1a9c8:	1885883a 	add	r2,r3,r2
   1a9cc:	11000005 	stb	r4,0(r2)
   1a9d0:	e0bff717 	ldw	r2,-36(fp)
   1a9d4:	e0bffc15 	stw	r2,-16(fp)
   1a9d8:	e0bffc17 	ldw	r2,-16(fp)
   1a9dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   1a9e0:	0014c2c0 	call	14c2c <OS_Sched>
   1a9e4:	00000406 	br	1a9f8 <OSTimeDlyResume+0x1bc>
   1a9e8:	e0bff717 	ldw	r2,-36(fp)
   1a9ec:	e0bffd15 	stw	r2,-12(fp)
   1a9f0:	e0bffd17 	ldw	r2,-12(fp)
   1a9f4:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   1a9f8:	0005883a 	mov	r2,zero
}
   1a9fc:	e037883a 	mov	sp,fp
   1aa00:	dfc00117 	ldw	ra,4(sp)
   1aa04:	df000017 	ldw	fp,0(sp)
   1aa08:	dec00204 	addi	sp,sp,8
   1aa0c:	f800283a 	ret

0001aa10 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   1aa10:	defffb04 	addi	sp,sp,-20
   1aa14:	df000415 	stw	fp,16(sp)
   1aa18:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1aa1c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1aa20:	0005303a 	rdctl	r2,status
   1aa24:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1aa28:	e0fffe17 	ldw	r3,-8(fp)
   1aa2c:	00bfff84 	movi	r2,-2
   1aa30:	1884703a 	and	r2,r3,r2
   1aa34:	1001703a 	wrctl	status,r2
  
  return context;
   1aa38:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   1aa3c:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   1aa40:	d0a82e17 	ldw	r2,-24392(gp)
   1aa44:	e0bffd15 	stw	r2,-12(fp)
   1aa48:	e0bffc17 	ldw	r2,-16(fp)
   1aa4c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1aa50:	e0bfff17 	ldw	r2,-4(fp)
   1aa54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   1aa58:	e0bffd17 	ldw	r2,-12(fp)
}
   1aa5c:	e037883a 	mov	sp,fp
   1aa60:	df000017 	ldw	fp,0(sp)
   1aa64:	dec00104 	addi	sp,sp,4
   1aa68:	f800283a 	ret

0001aa6c <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   1aa6c:	defffb04 	addi	sp,sp,-20
   1aa70:	df000415 	stw	fp,16(sp)
   1aa74:	df000404 	addi	fp,sp,16
   1aa78:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1aa7c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1aa80:	0005303a 	rdctl	r2,status
   1aa84:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1aa88:	e0fffd17 	ldw	r3,-12(fp)
   1aa8c:	00bfff84 	movi	r2,-2
   1aa90:	1884703a 	and	r2,r3,r2
   1aa94:	1001703a 	wrctl	status,r2
  
  return context;
   1aa98:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   1aa9c:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   1aaa0:	e0bfff17 	ldw	r2,-4(fp)
   1aaa4:	d0a82e15 	stw	r2,-24392(gp)
   1aaa8:	e0bffc17 	ldw	r2,-16(fp)
   1aaac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1aab0:	e0bffe17 	ldw	r2,-8(fp)
   1aab4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   1aab8:	0001883a 	nop
   1aabc:	e037883a 	mov	sp,fp
   1aac0:	df000017 	ldw	fp,0(sp)
   1aac4:	dec00104 	addi	sp,sp,4
   1aac8:	f800283a 	ret

0001aacc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1aacc:	defffd04 	addi	sp,sp,-12
   1aad0:	dfc00215 	stw	ra,8(sp)
   1aad4:	df000115 	stw	fp,4(sp)
   1aad8:	df000104 	addi	fp,sp,4
   1aadc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1aae0:	d1600904 	addi	r5,gp,-32732
   1aae4:	e13fff17 	ldw	r4,-4(fp)
   1aae8:	001d7000 	call	1d700 <alt_dev_llist_insert>
}
   1aaec:	e037883a 	mov	sp,fp
   1aaf0:	dfc00117 	ldw	ra,4(sp)
   1aaf4:	df000017 	ldw	fp,0(sp)
   1aaf8:	dec00204 	addi	sp,sp,8
   1aafc:	f800283a 	ret

0001ab00 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1ab00:	defffd04 	addi	sp,sp,-12
   1ab04:	dfc00215 	stw	ra,8(sp)
   1ab08:	df000115 	stw	fp,4(sp)
   1ab0c:	df000104 	addi	fp,sp,4
   1ab10:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   1ab14:	001dfe00 	call	1dfe0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1ab18:	00800044 	movi	r2,1
   1ab1c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1ab20:	0001883a 	nop
   1ab24:	e037883a 	mov	sp,fp
   1ab28:	dfc00117 	ldw	ra,4(sp)
   1ab2c:	df000017 	ldw	fp,0(sp)
   1ab30:	dec00204 	addi	sp,sp,8
   1ab34:	f800283a 	ret

0001ab38 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1ab38:	defffb04 	addi	sp,sp,-20
   1ab3c:	dfc00415 	stw	ra,16(sp)
   1ab40:	df000315 	stw	fp,12(sp)
   1ab44:	df000304 	addi	fp,sp,12
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   1ab48:	01c00204 	movi	r7,8
   1ab4c:	000d883a 	mov	r6,zero
   1ab50:	000b883a 	mov	r5,zero
   1ab54:	013fc834 	movhi	r4,65312
   1ab58:	21080004 	addi	r4,r4,8192
   1ab5c:	001c2440 	call	1c244 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER_2, Interval_Timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   1ab60:	01800204 	movi	r6,8
   1ab64:	000b883a 	mov	r5,zero
   1ab68:	010000b4 	movhi	r4,2
   1ab6c:	21016804 	addi	r4,r4,1440
   1ab70:	001b6080 	call	1b608 <altera_avalon_jtag_uart_init>
   1ab74:	010000b4 	movhi	r4,2
   1ab78:	21015e04 	addi	r4,r4,1400
   1ab7c:	001aacc0 	call	1aacc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   1ab80:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   1ab84:	010000b4 	movhi	r4,2
   1ab88:	21057904 	addi	r4,r4,5604
   1ab8c:	001aacc0 	call	1aacc <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   1ab90:	010000b4 	movhi	r4,2
   1ab94:	21058504 	addi	r4,r4,5652
   1ab98:	001aacc0 	call	1aacc <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   1ab9c:	010000b4 	movhi	r4,2
   1aba0:	21059104 	addi	r4,r4,5700
   1aba4:	001c36c0 	call	1c36c <alt_up_character_lcd_init>
   1aba8:	010000b4 	movhi	r4,2
   1abac:	21059104 	addi	r4,r4,5700
   1abb0:	001aacc0 	call	1aacc <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   1abb4:	010000b4 	movhi	r4,2
   1abb8:	21059c04 	addi	r4,r4,5744
   1abbc:	001aacc0 	call	1aacc <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   1abc0:	010000b4 	movhi	r4,2
   1abc4:	2105a704 	addi	r4,r4,5788
   1abc8:	001cc600 	call	1cc60 <alt_up_ps2_init>
   1abcc:	010000b4 	movhi	r4,2
   1abd0:	2105a704 	addi	r4,r4,5788
   1abd4:	001aacc0 	call	1aacc <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   1abd8:	010000b4 	movhi	r4,2
   1abdc:	2105b504 	addi	r4,r4,5844
   1abe0:	001cc600 	call	1cc60 <alt_up_ps2_init>
   1abe4:	010000b4 	movhi	r4,2
   1abe8:	2105b504 	addi	r4,r4,5844
   1abec:	001aacc0 	call	1aacc <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   1abf0:	010000b4 	movhi	r4,2
   1abf4:	2105c304 	addi	r4,r4,5900
   1abf8:	001aacc0 	call	1aacc <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   1abfc:	010000b4 	movhi	r4,2
   1ac00:	2105ce04 	addi	r4,r4,5944
   1ac04:	001aacc0 	call	1aacc <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_CHAR_BUF_SUBSYSTEM_CHAR_BUF_DMA, VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA);
   1ac08:	008000b4 	movhi	r2,2
   1ac0c:	1085db04 	addi	r2,r2,5996
   1ac10:	10800a17 	ldw	r2,40(r2)
   1ac14:	10800017 	ldw	r2,0(r2)
   1ac18:	1007883a 	mov	r3,r2
   1ac1c:	008000b4 	movhi	r2,2
   1ac20:	1085db04 	addi	r2,r2,5996
   1ac24:	10c00b15 	stw	r3,44(r2)
   1ac28:	008000b4 	movhi	r2,2
   1ac2c:	1085db04 	addi	r2,r2,5996
   1ac30:	10800a17 	ldw	r2,40(r2)
   1ac34:	10800104 	addi	r2,r2,4
   1ac38:	10800017 	ldw	r2,0(r2)
   1ac3c:	1007883a 	mov	r3,r2
   1ac40:	008000b4 	movhi	r2,2
   1ac44:	1085db04 	addi	r2,r2,5996
   1ac48:	10c00c15 	stw	r3,48(r2)
   1ac4c:	008000b4 	movhi	r2,2
   1ac50:	1085db04 	addi	r2,r2,5996
   1ac54:	10800a17 	ldw	r2,40(r2)
   1ac58:	10800204 	addi	r2,r2,8
   1ac5c:	10800017 	ldw	r2,0(r2)
   1ac60:	10ffffcc 	andi	r3,r2,65535
   1ac64:	008000b4 	movhi	r2,2
   1ac68:	1085db04 	addi	r2,r2,5996
   1ac6c:	10c01115 	stw	r3,68(r2)
   1ac70:	008000b4 	movhi	r2,2
   1ac74:	1085db04 	addi	r2,r2,5996
   1ac78:	10800a17 	ldw	r2,40(r2)
   1ac7c:	10800204 	addi	r2,r2,8
   1ac80:	10800017 	ldw	r2,0(r2)
   1ac84:	1006d43a 	srli	r3,r2,16
   1ac88:	008000b4 	movhi	r2,2
   1ac8c:	1085db04 	addi	r2,r2,5996
   1ac90:	10c01215 	stw	r3,72(r2)
   1ac94:	008000b4 	movhi	r2,2
   1ac98:	1085db04 	addi	r2,r2,5996
   1ac9c:	10800a17 	ldw	r2,40(r2)
   1aca0:	10800304 	addi	r2,r2,12
   1aca4:	10800017 	ldw	r2,0(r2)
   1aca8:	1005d07a 	srai	r2,r2,1
   1acac:	10c0004c 	andi	r3,r2,1
   1acb0:	008000b4 	movhi	r2,2
   1acb4:	1085db04 	addi	r2,r2,5996
   1acb8:	10c00d15 	stw	r3,52(r2)
   1acbc:	008000b4 	movhi	r2,2
   1acc0:	1085db04 	addi	r2,r2,5996
   1acc4:	10800a17 	ldw	r2,40(r2)
   1acc8:	10800304 	addi	r2,r2,12
   1accc:	10800017 	ldw	r2,0(r2)
   1acd0:	1005d23a 	srai	r2,r2,8
   1acd4:	108003cc 	andi	r2,r2,15
   1acd8:	10800044 	addi	r2,r2,1
   1acdc:	1007883a 	mov	r3,r2
   1ace0:	008000b4 	movhi	r2,2
   1ace4:	1085db04 	addi	r2,r2,5996
   1ace8:	10c00e15 	stw	r3,56(r2)
   1acec:	008000b4 	movhi	r2,2
   1acf0:	1085db04 	addi	r2,r2,5996
   1acf4:	10800a17 	ldw	r2,40(r2)
   1acf8:	10800304 	addi	r2,r2,12
   1acfc:	10800017 	ldw	r2,0(r2)
   1ad00:	1005d1ba 	srai	r2,r2,6
   1ad04:	108000cc 	andi	r2,r2,3
   1ad08:	10800044 	addi	r2,r2,1
   1ad0c:	1007883a 	mov	r3,r2
   1ad10:	008000b4 	movhi	r2,2
   1ad14:	1085db04 	addi	r2,r2,5996
   1ad18:	10c00f15 	stw	r3,60(r2)
   1ad1c:	008000b4 	movhi	r2,2
   1ad20:	1085db04 	addi	r2,r2,5996
   1ad24:	10800e17 	ldw	r2,56(r2)
   1ad28:	1007883a 	mov	r3,r2
   1ad2c:	008000b4 	movhi	r2,2
   1ad30:	1085db04 	addi	r2,r2,5996
   1ad34:	10800f17 	ldw	r2,60(r2)
   1ad38:	1885383a 	mul	r2,r3,r2
   1ad3c:	e0bffd05 	stb	r2,-12(fp)
   1ad40:	e0bffd03 	ldbu	r2,-12(fp)
   1ad44:	10800268 	cmpgeui	r2,r2,9
   1ad48:	1000051e 	bne	r2,zero,1ad60 <alt_sys_init+0x228>
   1ad4c:	008000b4 	movhi	r2,2
   1ad50:	1085db04 	addi	r2,r2,5996
   1ad54:	00c00044 	movi	r3,1
   1ad58:	10c01015 	stw	r3,64(r2)
   1ad5c:	00000c06 	br	1ad90 <alt_sys_init+0x258>
   1ad60:	e0bffd03 	ldbu	r2,-12(fp)
   1ad64:	10800468 	cmpgeui	r2,r2,17
   1ad68:	1000051e 	bne	r2,zero,1ad80 <alt_sys_init+0x248>
   1ad6c:	008000b4 	movhi	r2,2
   1ad70:	1085db04 	addi	r2,r2,5996
   1ad74:	00c00084 	movi	r3,2
   1ad78:	10c01015 	stw	r3,64(r2)
   1ad7c:	00000406 	br	1ad90 <alt_sys_init+0x258>
   1ad80:	008000b4 	movhi	r2,2
   1ad84:	1085db04 	addi	r2,r2,5996
   1ad88:	00c00104 	movi	r3,4
   1ad8c:	10c01015 	stw	r3,64(r2)
   1ad90:	008000b4 	movhi	r2,2
   1ad94:	1085db04 	addi	r2,r2,5996
   1ad98:	10800a17 	ldw	r2,40(r2)
   1ad9c:	10800304 	addi	r2,r2,12
   1ada0:	10800017 	ldw	r2,0(r2)
   1ada4:	1005d43a 	srai	r2,r2,16
   1ada8:	e0bffd45 	stb	r2,-11(fp)
   1adac:	008000b4 	movhi	r2,2
   1adb0:	1085db04 	addi	r2,r2,5996
   1adb4:	10800a17 	ldw	r2,40(r2)
   1adb8:	10800304 	addi	r2,r2,12
   1adbc:	10800017 	ldw	r2,0(r2)
   1adc0:	1004d63a 	srli	r2,r2,24
   1adc4:	e0bffd85 	stb	r2,-10(fp)
   1adc8:	008000b4 	movhi	r2,2
   1adcc:	1085db04 	addi	r2,r2,5996
   1add0:	10801017 	ldw	r2,64(r2)
   1add4:	10800058 	cmpnei	r2,r2,1
   1add8:	1000041e 	bne	r2,zero,1adec <alt_sys_init+0x2b4>
   1addc:	008000b4 	movhi	r2,2
   1ade0:	1085db04 	addi	r2,r2,5996
   1ade4:	10001315 	stw	zero,76(r2)
   1ade8:	00000e06 	br	1ae24 <alt_sys_init+0x2ec>
   1adec:	008000b4 	movhi	r2,2
   1adf0:	1085db04 	addi	r2,r2,5996
   1adf4:	10801017 	ldw	r2,64(r2)
   1adf8:	10800098 	cmpnei	r2,r2,2
   1adfc:	1000051e 	bne	r2,zero,1ae14 <alt_sys_init+0x2dc>
   1ae00:	008000b4 	movhi	r2,2
   1ae04:	1085db04 	addi	r2,r2,5996
   1ae08:	00c00044 	movi	r3,1
   1ae0c:	10c01315 	stw	r3,76(r2)
   1ae10:	00000406 	br	1ae24 <alt_sys_init+0x2ec>
   1ae14:	008000b4 	movhi	r2,2
   1ae18:	1085db04 	addi	r2,r2,5996
   1ae1c:	00c00084 	movi	r3,2
   1ae20:	10c01315 	stw	r3,76(r2)
   1ae24:	e0bffd43 	ldbu	r2,-11(fp)
   1ae28:	00c00804 	movi	r3,32
   1ae2c:	1885c83a 	sub	r2,r3,r2
   1ae30:	00ffffc4 	movi	r3,-1
   1ae34:	1886d83a 	srl	r3,r3,r2
   1ae38:	008000b4 	movhi	r2,2
   1ae3c:	1085db04 	addi	r2,r2,5996
   1ae40:	10c01415 	stw	r3,80(r2)
   1ae44:	e0fffd43 	ldbu	r3,-11(fp)
   1ae48:	008000b4 	movhi	r2,2
   1ae4c:	1085db04 	addi	r2,r2,5996
   1ae50:	10801317 	ldw	r2,76(r2)
   1ae54:	1887883a 	add	r3,r3,r2
   1ae58:	008000b4 	movhi	r2,2
   1ae5c:	1085db04 	addi	r2,r2,5996
   1ae60:	10c01515 	stw	r3,84(r2)
   1ae64:	e0bffd83 	ldbu	r2,-10(fp)
   1ae68:	00c00804 	movi	r3,32
   1ae6c:	1885c83a 	sub	r2,r3,r2
   1ae70:	00ffffc4 	movi	r3,-1
   1ae74:	1886d83a 	srl	r3,r3,r2
   1ae78:	008000b4 	movhi	r2,2
   1ae7c:	1085db04 	addi	r2,r2,5996
   1ae80:	10c01615 	stw	r3,88(r2)
   1ae84:	010000b4 	movhi	r4,2
   1ae88:	2105db04 	addi	r4,r4,5996
   1ae8c:	001aacc0 	call	1aacc <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   1ae90:	008000b4 	movhi	r2,2
   1ae94:	1085f204 	addi	r2,r2,6088
   1ae98:	10800a17 	ldw	r2,40(r2)
   1ae9c:	10800017 	ldw	r2,0(r2)
   1aea0:	1007883a 	mov	r3,r2
   1aea4:	008000b4 	movhi	r2,2
   1aea8:	1085f204 	addi	r2,r2,6088
   1aeac:	10c00b15 	stw	r3,44(r2)
   1aeb0:	008000b4 	movhi	r2,2
   1aeb4:	1085f204 	addi	r2,r2,6088
   1aeb8:	10800a17 	ldw	r2,40(r2)
   1aebc:	10800104 	addi	r2,r2,4
   1aec0:	10800017 	ldw	r2,0(r2)
   1aec4:	1007883a 	mov	r3,r2
   1aec8:	008000b4 	movhi	r2,2
   1aecc:	1085f204 	addi	r2,r2,6088
   1aed0:	10c00c15 	stw	r3,48(r2)
   1aed4:	008000b4 	movhi	r2,2
   1aed8:	1085f204 	addi	r2,r2,6088
   1aedc:	10800a17 	ldw	r2,40(r2)
   1aee0:	10800204 	addi	r2,r2,8
   1aee4:	10800017 	ldw	r2,0(r2)
   1aee8:	10ffffcc 	andi	r3,r2,65535
   1aeec:	008000b4 	movhi	r2,2
   1aef0:	1085f204 	addi	r2,r2,6088
   1aef4:	10c01115 	stw	r3,68(r2)
   1aef8:	008000b4 	movhi	r2,2
   1aefc:	1085f204 	addi	r2,r2,6088
   1af00:	10800a17 	ldw	r2,40(r2)
   1af04:	10800204 	addi	r2,r2,8
   1af08:	10800017 	ldw	r2,0(r2)
   1af0c:	1006d43a 	srli	r3,r2,16
   1af10:	008000b4 	movhi	r2,2
   1af14:	1085f204 	addi	r2,r2,6088
   1af18:	10c01215 	stw	r3,72(r2)
   1af1c:	008000b4 	movhi	r2,2
   1af20:	1085f204 	addi	r2,r2,6088
   1af24:	10800a17 	ldw	r2,40(r2)
   1af28:	10800304 	addi	r2,r2,12
   1af2c:	10800017 	ldw	r2,0(r2)
   1af30:	1005d07a 	srai	r2,r2,1
   1af34:	10c0004c 	andi	r3,r2,1
   1af38:	008000b4 	movhi	r2,2
   1af3c:	1085f204 	addi	r2,r2,6088
   1af40:	10c00d15 	stw	r3,52(r2)
   1af44:	008000b4 	movhi	r2,2
   1af48:	1085f204 	addi	r2,r2,6088
   1af4c:	10800a17 	ldw	r2,40(r2)
   1af50:	10800304 	addi	r2,r2,12
   1af54:	10800017 	ldw	r2,0(r2)
   1af58:	1005d23a 	srai	r2,r2,8
   1af5c:	108003cc 	andi	r2,r2,15
   1af60:	10800044 	addi	r2,r2,1
   1af64:	1007883a 	mov	r3,r2
   1af68:	008000b4 	movhi	r2,2
   1af6c:	1085f204 	addi	r2,r2,6088
   1af70:	10c00e15 	stw	r3,56(r2)
   1af74:	008000b4 	movhi	r2,2
   1af78:	1085f204 	addi	r2,r2,6088
   1af7c:	10800a17 	ldw	r2,40(r2)
   1af80:	10800304 	addi	r2,r2,12
   1af84:	10800017 	ldw	r2,0(r2)
   1af88:	1005d1ba 	srai	r2,r2,6
   1af8c:	108000cc 	andi	r2,r2,3
   1af90:	10800044 	addi	r2,r2,1
   1af94:	1007883a 	mov	r3,r2
   1af98:	008000b4 	movhi	r2,2
   1af9c:	1085f204 	addi	r2,r2,6088
   1afa0:	10c00f15 	stw	r3,60(r2)
   1afa4:	008000b4 	movhi	r2,2
   1afa8:	1085f204 	addi	r2,r2,6088
   1afac:	10800e17 	ldw	r2,56(r2)
   1afb0:	1007883a 	mov	r3,r2
   1afb4:	008000b4 	movhi	r2,2
   1afb8:	1085f204 	addi	r2,r2,6088
   1afbc:	10800f17 	ldw	r2,60(r2)
   1afc0:	1885383a 	mul	r2,r3,r2
   1afc4:	e0bffdc5 	stb	r2,-9(fp)
   1afc8:	e0bffdc3 	ldbu	r2,-9(fp)
   1afcc:	10800268 	cmpgeui	r2,r2,9
   1afd0:	1000051e 	bne	r2,zero,1afe8 <alt_sys_init+0x4b0>
   1afd4:	008000b4 	movhi	r2,2
   1afd8:	1085f204 	addi	r2,r2,6088
   1afdc:	00c00044 	movi	r3,1
   1afe0:	10c01015 	stw	r3,64(r2)
   1afe4:	00000c06 	br	1b018 <alt_sys_init+0x4e0>
   1afe8:	e0bffdc3 	ldbu	r2,-9(fp)
   1afec:	10800468 	cmpgeui	r2,r2,17
   1aff0:	1000051e 	bne	r2,zero,1b008 <alt_sys_init+0x4d0>
   1aff4:	008000b4 	movhi	r2,2
   1aff8:	1085f204 	addi	r2,r2,6088
   1affc:	00c00084 	movi	r3,2
   1b000:	10c01015 	stw	r3,64(r2)
   1b004:	00000406 	br	1b018 <alt_sys_init+0x4e0>
   1b008:	008000b4 	movhi	r2,2
   1b00c:	1085f204 	addi	r2,r2,6088
   1b010:	00c00104 	movi	r3,4
   1b014:	10c01015 	stw	r3,64(r2)
   1b018:	008000b4 	movhi	r2,2
   1b01c:	1085f204 	addi	r2,r2,6088
   1b020:	10800a17 	ldw	r2,40(r2)
   1b024:	10800304 	addi	r2,r2,12
   1b028:	10800017 	ldw	r2,0(r2)
   1b02c:	1005d43a 	srai	r2,r2,16
   1b030:	e0bffe05 	stb	r2,-8(fp)
   1b034:	008000b4 	movhi	r2,2
   1b038:	1085f204 	addi	r2,r2,6088
   1b03c:	10800a17 	ldw	r2,40(r2)
   1b040:	10800304 	addi	r2,r2,12
   1b044:	10800017 	ldw	r2,0(r2)
   1b048:	1004d63a 	srli	r2,r2,24
   1b04c:	e0bffe45 	stb	r2,-7(fp)
   1b050:	008000b4 	movhi	r2,2
   1b054:	1085f204 	addi	r2,r2,6088
   1b058:	10801017 	ldw	r2,64(r2)
   1b05c:	10800058 	cmpnei	r2,r2,1
   1b060:	1000041e 	bne	r2,zero,1b074 <alt_sys_init+0x53c>
   1b064:	008000b4 	movhi	r2,2
   1b068:	1085f204 	addi	r2,r2,6088
   1b06c:	10001315 	stw	zero,76(r2)
   1b070:	00000e06 	br	1b0ac <alt_sys_init+0x574>
   1b074:	008000b4 	movhi	r2,2
   1b078:	1085f204 	addi	r2,r2,6088
   1b07c:	10801017 	ldw	r2,64(r2)
   1b080:	10800098 	cmpnei	r2,r2,2
   1b084:	1000051e 	bne	r2,zero,1b09c <alt_sys_init+0x564>
   1b088:	008000b4 	movhi	r2,2
   1b08c:	1085f204 	addi	r2,r2,6088
   1b090:	00c00044 	movi	r3,1
   1b094:	10c01315 	stw	r3,76(r2)
   1b098:	00000406 	br	1b0ac <alt_sys_init+0x574>
   1b09c:	008000b4 	movhi	r2,2
   1b0a0:	1085f204 	addi	r2,r2,6088
   1b0a4:	00c00084 	movi	r3,2
   1b0a8:	10c01315 	stw	r3,76(r2)
   1b0ac:	e0bffe03 	ldbu	r2,-8(fp)
   1b0b0:	00c00804 	movi	r3,32
   1b0b4:	1885c83a 	sub	r2,r3,r2
   1b0b8:	00ffffc4 	movi	r3,-1
   1b0bc:	1886d83a 	srl	r3,r3,r2
   1b0c0:	008000b4 	movhi	r2,2
   1b0c4:	1085f204 	addi	r2,r2,6088
   1b0c8:	10c01415 	stw	r3,80(r2)
   1b0cc:	e0fffe03 	ldbu	r3,-8(fp)
   1b0d0:	008000b4 	movhi	r2,2
   1b0d4:	1085f204 	addi	r2,r2,6088
   1b0d8:	10801317 	ldw	r2,76(r2)
   1b0dc:	1887883a 	add	r3,r3,r2
   1b0e0:	008000b4 	movhi	r2,2
   1b0e4:	1085f204 	addi	r2,r2,6088
   1b0e8:	10c01515 	stw	r3,84(r2)
   1b0ec:	e0bffe43 	ldbu	r2,-7(fp)
   1b0f0:	00c00804 	movi	r3,32
   1b0f4:	1885c83a 	sub	r2,r3,r2
   1b0f8:	00ffffc4 	movi	r3,-1
   1b0fc:	1886d83a 	srl	r3,r3,r2
   1b100:	008000b4 	movhi	r2,2
   1b104:	1085f204 	addi	r2,r2,6088
   1b108:	10c01615 	stw	r3,88(r2)
   1b10c:	010000b4 	movhi	r4,2
   1b110:	2105f204 	addi	r4,r4,6088
   1b114:	001aacc0 	call	1aacc <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VIDEO_IN_SUBSYSTEM_VIDEO_IN_DMA, Video_In_Subsystem_Video_In_DMA);
   1b118:	008000b4 	movhi	r2,2
   1b11c:	10860904 	addi	r2,r2,6180
   1b120:	10800a17 	ldw	r2,40(r2)
   1b124:	10800017 	ldw	r2,0(r2)
   1b128:	1007883a 	mov	r3,r2
   1b12c:	008000b4 	movhi	r2,2
   1b130:	10860904 	addi	r2,r2,6180
   1b134:	10c00b15 	stw	r3,44(r2)
   1b138:	008000b4 	movhi	r2,2
   1b13c:	10860904 	addi	r2,r2,6180
   1b140:	10800a17 	ldw	r2,40(r2)
   1b144:	10800104 	addi	r2,r2,4
   1b148:	10800017 	ldw	r2,0(r2)
   1b14c:	1007883a 	mov	r3,r2
   1b150:	008000b4 	movhi	r2,2
   1b154:	10860904 	addi	r2,r2,6180
   1b158:	10c00c15 	stw	r3,48(r2)
   1b15c:	008000b4 	movhi	r2,2
   1b160:	10860904 	addi	r2,r2,6180
   1b164:	10800a17 	ldw	r2,40(r2)
   1b168:	10800204 	addi	r2,r2,8
   1b16c:	10800017 	ldw	r2,0(r2)
   1b170:	10ffffcc 	andi	r3,r2,65535
   1b174:	008000b4 	movhi	r2,2
   1b178:	10860904 	addi	r2,r2,6180
   1b17c:	10c01115 	stw	r3,68(r2)
   1b180:	008000b4 	movhi	r2,2
   1b184:	10860904 	addi	r2,r2,6180
   1b188:	10800a17 	ldw	r2,40(r2)
   1b18c:	10800204 	addi	r2,r2,8
   1b190:	10800017 	ldw	r2,0(r2)
   1b194:	1006d43a 	srli	r3,r2,16
   1b198:	008000b4 	movhi	r2,2
   1b19c:	10860904 	addi	r2,r2,6180
   1b1a0:	10c01215 	stw	r3,72(r2)
   1b1a4:	008000b4 	movhi	r2,2
   1b1a8:	10860904 	addi	r2,r2,6180
   1b1ac:	10800a17 	ldw	r2,40(r2)
   1b1b0:	10800304 	addi	r2,r2,12
   1b1b4:	10800017 	ldw	r2,0(r2)
   1b1b8:	1005d07a 	srai	r2,r2,1
   1b1bc:	10c0004c 	andi	r3,r2,1
   1b1c0:	008000b4 	movhi	r2,2
   1b1c4:	10860904 	addi	r2,r2,6180
   1b1c8:	10c00d15 	stw	r3,52(r2)
   1b1cc:	008000b4 	movhi	r2,2
   1b1d0:	10860904 	addi	r2,r2,6180
   1b1d4:	10800a17 	ldw	r2,40(r2)
   1b1d8:	10800304 	addi	r2,r2,12
   1b1dc:	10800017 	ldw	r2,0(r2)
   1b1e0:	1005d23a 	srai	r2,r2,8
   1b1e4:	108003cc 	andi	r2,r2,15
   1b1e8:	10800044 	addi	r2,r2,1
   1b1ec:	1007883a 	mov	r3,r2
   1b1f0:	008000b4 	movhi	r2,2
   1b1f4:	10860904 	addi	r2,r2,6180
   1b1f8:	10c00e15 	stw	r3,56(r2)
   1b1fc:	008000b4 	movhi	r2,2
   1b200:	10860904 	addi	r2,r2,6180
   1b204:	10800a17 	ldw	r2,40(r2)
   1b208:	10800304 	addi	r2,r2,12
   1b20c:	10800017 	ldw	r2,0(r2)
   1b210:	1005d1ba 	srai	r2,r2,6
   1b214:	108000cc 	andi	r2,r2,3
   1b218:	10800044 	addi	r2,r2,1
   1b21c:	1007883a 	mov	r3,r2
   1b220:	008000b4 	movhi	r2,2
   1b224:	10860904 	addi	r2,r2,6180
   1b228:	10c00f15 	stw	r3,60(r2)
   1b22c:	008000b4 	movhi	r2,2
   1b230:	10860904 	addi	r2,r2,6180
   1b234:	10800e17 	ldw	r2,56(r2)
   1b238:	1007883a 	mov	r3,r2
   1b23c:	008000b4 	movhi	r2,2
   1b240:	10860904 	addi	r2,r2,6180
   1b244:	10800f17 	ldw	r2,60(r2)
   1b248:	1885383a 	mul	r2,r3,r2
   1b24c:	e0bffe85 	stb	r2,-6(fp)
   1b250:	e0bffe83 	ldbu	r2,-6(fp)
   1b254:	10800268 	cmpgeui	r2,r2,9
   1b258:	1000051e 	bne	r2,zero,1b270 <alt_sys_init+0x738>
   1b25c:	008000b4 	movhi	r2,2
   1b260:	10860904 	addi	r2,r2,6180
   1b264:	00c00044 	movi	r3,1
   1b268:	10c01015 	stw	r3,64(r2)
   1b26c:	00000c06 	br	1b2a0 <alt_sys_init+0x768>
   1b270:	e0bffe83 	ldbu	r2,-6(fp)
   1b274:	10800468 	cmpgeui	r2,r2,17
   1b278:	1000051e 	bne	r2,zero,1b290 <alt_sys_init+0x758>
   1b27c:	008000b4 	movhi	r2,2
   1b280:	10860904 	addi	r2,r2,6180
   1b284:	00c00084 	movi	r3,2
   1b288:	10c01015 	stw	r3,64(r2)
   1b28c:	00000406 	br	1b2a0 <alt_sys_init+0x768>
   1b290:	008000b4 	movhi	r2,2
   1b294:	10860904 	addi	r2,r2,6180
   1b298:	00c00104 	movi	r3,4
   1b29c:	10c01015 	stw	r3,64(r2)
   1b2a0:	008000b4 	movhi	r2,2
   1b2a4:	10860904 	addi	r2,r2,6180
   1b2a8:	10800a17 	ldw	r2,40(r2)
   1b2ac:	10800304 	addi	r2,r2,12
   1b2b0:	10800017 	ldw	r2,0(r2)
   1b2b4:	1005d43a 	srai	r2,r2,16
   1b2b8:	e0bffec5 	stb	r2,-5(fp)
   1b2bc:	008000b4 	movhi	r2,2
   1b2c0:	10860904 	addi	r2,r2,6180
   1b2c4:	10800a17 	ldw	r2,40(r2)
   1b2c8:	10800304 	addi	r2,r2,12
   1b2cc:	10800017 	ldw	r2,0(r2)
   1b2d0:	1004d63a 	srli	r2,r2,24
   1b2d4:	e0bfff05 	stb	r2,-4(fp)
   1b2d8:	008000b4 	movhi	r2,2
   1b2dc:	10860904 	addi	r2,r2,6180
   1b2e0:	10801017 	ldw	r2,64(r2)
   1b2e4:	10800058 	cmpnei	r2,r2,1
   1b2e8:	1000041e 	bne	r2,zero,1b2fc <alt_sys_init+0x7c4>
   1b2ec:	008000b4 	movhi	r2,2
   1b2f0:	10860904 	addi	r2,r2,6180
   1b2f4:	10001315 	stw	zero,76(r2)
   1b2f8:	00000e06 	br	1b334 <alt_sys_init+0x7fc>
   1b2fc:	008000b4 	movhi	r2,2
   1b300:	10860904 	addi	r2,r2,6180
   1b304:	10801017 	ldw	r2,64(r2)
   1b308:	10800098 	cmpnei	r2,r2,2
   1b30c:	1000051e 	bne	r2,zero,1b324 <alt_sys_init+0x7ec>
   1b310:	008000b4 	movhi	r2,2
   1b314:	10860904 	addi	r2,r2,6180
   1b318:	00c00044 	movi	r3,1
   1b31c:	10c01315 	stw	r3,76(r2)
   1b320:	00000406 	br	1b334 <alt_sys_init+0x7fc>
   1b324:	008000b4 	movhi	r2,2
   1b328:	10860904 	addi	r2,r2,6180
   1b32c:	00c00084 	movi	r3,2
   1b330:	10c01315 	stw	r3,76(r2)
   1b334:	e0bffec3 	ldbu	r2,-5(fp)
   1b338:	00c00804 	movi	r3,32
   1b33c:	1885c83a 	sub	r2,r3,r2
   1b340:	00ffffc4 	movi	r3,-1
   1b344:	1886d83a 	srl	r3,r3,r2
   1b348:	008000b4 	movhi	r2,2
   1b34c:	10860904 	addi	r2,r2,6180
   1b350:	10c01415 	stw	r3,80(r2)
   1b354:	e0fffec3 	ldbu	r3,-5(fp)
   1b358:	008000b4 	movhi	r2,2
   1b35c:	10860904 	addi	r2,r2,6180
   1b360:	10801317 	ldw	r2,76(r2)
   1b364:	1887883a 	add	r3,r3,r2
   1b368:	008000b4 	movhi	r2,2
   1b36c:	10860904 	addi	r2,r2,6180
   1b370:	10c01515 	stw	r3,84(r2)
   1b374:	e0bfff03 	ldbu	r2,-4(fp)
   1b378:	00c00804 	movi	r3,32
   1b37c:	1885c83a 	sub	r2,r3,r2
   1b380:	00ffffc4 	movi	r3,-1
   1b384:	1886d83a 	srl	r3,r3,r2
   1b388:	008000b4 	movhi	r2,2
   1b38c:	10860904 	addi	r2,r2,6180
   1b390:	10c01615 	stw	r3,88(r2)
   1b394:	010000b4 	movhi	r4,2
   1b398:	21060904 	addi	r4,r4,6180
   1b39c:	001aacc0 	call	1aacc <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_RGB_RESAMPLER, VGA_Subsystem_VGA_Pixel_RGB_Resampler);
   1b3a0:	008000b4 	movhi	r2,2
   1b3a4:	10862004 	addi	r2,r2,6272
   1b3a8:	10800a17 	ldw	r2,40(r2)
   1b3ac:	10800017 	ldw	r2,0(r2)
   1b3b0:	10c003cc 	andi	r3,r2,15
   1b3b4:	008000b4 	movhi	r2,2
   1b3b8:	10862004 	addi	r2,r2,6272
   1b3bc:	10c00b15 	stw	r3,44(r2)
   1b3c0:	008000b4 	movhi	r2,2
   1b3c4:	10862004 	addi	r2,r2,6272
   1b3c8:	10800a17 	ldw	r2,40(r2)
   1b3cc:	10800017 	ldw	r2,0(r2)
   1b3d0:	1005d13a 	srai	r2,r2,4
   1b3d4:	10c0004c 	andi	r3,r2,1
   1b3d8:	008000b4 	movhi	r2,2
   1b3dc:	10862004 	addi	r2,r2,6272
   1b3e0:	10c00c15 	stw	r3,48(r2)
   1b3e4:	008000b4 	movhi	r2,2
   1b3e8:	10862004 	addi	r2,r2,6272
   1b3ec:	10800a17 	ldw	r2,40(r2)
   1b3f0:	10800017 	ldw	r2,0(r2)
   1b3f4:	1005d17a 	srai	r2,r2,5
   1b3f8:	10c0004c 	andi	r3,r2,1
   1b3fc:	008000b4 	movhi	r2,2
   1b400:	10862004 	addi	r2,r2,6272
   1b404:	10c00d15 	stw	r3,52(r2)
   1b408:	008000b4 	movhi	r2,2
   1b40c:	10862004 	addi	r2,r2,6272
   1b410:	10800a17 	ldw	r2,40(r2)
   1b414:	10800017 	ldw	r2,0(r2)
   1b418:	1005d43a 	srai	r2,r2,16
   1b41c:	10c003cc 	andi	r3,r2,15
   1b420:	008000b4 	movhi	r2,2
   1b424:	10862004 	addi	r2,r2,6272
   1b428:	10c00e15 	stw	r3,56(r2)
   1b42c:	008000b4 	movhi	r2,2
   1b430:	10862004 	addi	r2,r2,6272
   1b434:	10800a17 	ldw	r2,40(r2)
   1b438:	10800017 	ldw	r2,0(r2)
   1b43c:	1005d53a 	srai	r2,r2,20
   1b440:	10c0004c 	andi	r3,r2,1
   1b444:	008000b4 	movhi	r2,2
   1b448:	10862004 	addi	r2,r2,6272
   1b44c:	10c00f15 	stw	r3,60(r2)
   1b450:	008000b4 	movhi	r2,2
   1b454:	10862004 	addi	r2,r2,6272
   1b458:	10800a17 	ldw	r2,40(r2)
   1b45c:	10800017 	ldw	r2,0(r2)
   1b460:	1005d57a 	srai	r2,r2,21
   1b464:	10c0004c 	andi	r3,r2,1
   1b468:	008000b4 	movhi	r2,2
   1b46c:	10862004 	addi	r2,r2,6272
   1b470:	10c01015 	stw	r3,64(r2)
   1b474:	010000b4 	movhi	r4,2
   1b478:	21062004 	addi	r4,r4,6272
   1b47c:	001aacc0 	call	1aacc <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   1b480:	010000b4 	movhi	r4,2
   1b484:	21063104 	addi	r4,r4,6340
   1b488:	001aacc0 	call	1aacc <alt_dev_reg>
}
   1b48c:	0001883a 	nop
   1b490:	e037883a 	mov	sp,fp
   1b494:	dfc00117 	ldw	ra,4(sp)
   1b498:	df000017 	ldw	fp,0(sp)
   1b49c:	dec00204 	addi	sp,sp,8
   1b4a0:	f800283a 	ret

0001b4a4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1b4a4:	defffa04 	addi	sp,sp,-24
   1b4a8:	dfc00515 	stw	ra,20(sp)
   1b4ac:	df000415 	stw	fp,16(sp)
   1b4b0:	df000404 	addi	fp,sp,16
   1b4b4:	e13ffd15 	stw	r4,-12(fp)
   1b4b8:	e17ffe15 	stw	r5,-8(fp)
   1b4bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1b4c0:	e0bffd17 	ldw	r2,-12(fp)
   1b4c4:	10800017 	ldw	r2,0(r2)
   1b4c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1b4cc:	e0bffc17 	ldw	r2,-16(fp)
   1b4d0:	10c00a04 	addi	r3,r2,40
   1b4d4:	e0bffd17 	ldw	r2,-12(fp)
   1b4d8:	10800217 	ldw	r2,8(r2)
   1b4dc:	100f883a 	mov	r7,r2
   1b4e0:	e1bfff17 	ldw	r6,-4(fp)
   1b4e4:	e17ffe17 	ldw	r5,-8(fp)
   1b4e8:	1809883a 	mov	r4,r3
   1b4ec:	001bc480 	call	1bc48 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1b4f0:	e037883a 	mov	sp,fp
   1b4f4:	dfc00117 	ldw	ra,4(sp)
   1b4f8:	df000017 	ldw	fp,0(sp)
   1b4fc:	dec00204 	addi	sp,sp,8
   1b500:	f800283a 	ret

0001b504 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1b504:	defffa04 	addi	sp,sp,-24
   1b508:	dfc00515 	stw	ra,20(sp)
   1b50c:	df000415 	stw	fp,16(sp)
   1b510:	df000404 	addi	fp,sp,16
   1b514:	e13ffd15 	stw	r4,-12(fp)
   1b518:	e17ffe15 	stw	r5,-8(fp)
   1b51c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1b520:	e0bffd17 	ldw	r2,-12(fp)
   1b524:	10800017 	ldw	r2,0(r2)
   1b528:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1b52c:	e0bffc17 	ldw	r2,-16(fp)
   1b530:	10c00a04 	addi	r3,r2,40
   1b534:	e0bffd17 	ldw	r2,-12(fp)
   1b538:	10800217 	ldw	r2,8(r2)
   1b53c:	100f883a 	mov	r7,r2
   1b540:	e1bfff17 	ldw	r6,-4(fp)
   1b544:	e17ffe17 	ldw	r5,-8(fp)
   1b548:	1809883a 	mov	r4,r3
   1b54c:	001bf040 	call	1bf04 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1b550:	e037883a 	mov	sp,fp
   1b554:	dfc00117 	ldw	ra,4(sp)
   1b558:	df000017 	ldw	fp,0(sp)
   1b55c:	dec00204 	addi	sp,sp,8
   1b560:	f800283a 	ret

0001b564 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1b564:	defffc04 	addi	sp,sp,-16
   1b568:	dfc00315 	stw	ra,12(sp)
   1b56c:	df000215 	stw	fp,8(sp)
   1b570:	df000204 	addi	fp,sp,8
   1b574:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1b578:	e0bfff17 	ldw	r2,-4(fp)
   1b57c:	10800017 	ldw	r2,0(r2)
   1b580:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1b584:	e0bffe17 	ldw	r2,-8(fp)
   1b588:	10c00a04 	addi	r3,r2,40
   1b58c:	e0bfff17 	ldw	r2,-4(fp)
   1b590:	10800217 	ldw	r2,8(r2)
   1b594:	100b883a 	mov	r5,r2
   1b598:	1809883a 	mov	r4,r3
   1b59c:	001baf00 	call	1baf0 <altera_avalon_jtag_uart_close>
}
   1b5a0:	e037883a 	mov	sp,fp
   1b5a4:	dfc00117 	ldw	ra,4(sp)
   1b5a8:	df000017 	ldw	fp,0(sp)
   1b5ac:	dec00204 	addi	sp,sp,8
   1b5b0:	f800283a 	ret

0001b5b4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1b5b4:	defffa04 	addi	sp,sp,-24
   1b5b8:	dfc00515 	stw	ra,20(sp)
   1b5bc:	df000415 	stw	fp,16(sp)
   1b5c0:	df000404 	addi	fp,sp,16
   1b5c4:	e13ffd15 	stw	r4,-12(fp)
   1b5c8:	e17ffe15 	stw	r5,-8(fp)
   1b5cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1b5d0:	e0bffd17 	ldw	r2,-12(fp)
   1b5d4:	10800017 	ldw	r2,0(r2)
   1b5d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1b5dc:	e0bffc17 	ldw	r2,-16(fp)
   1b5e0:	10800a04 	addi	r2,r2,40
   1b5e4:	e1bfff17 	ldw	r6,-4(fp)
   1b5e8:	e17ffe17 	ldw	r5,-8(fp)
   1b5ec:	1009883a 	mov	r4,r2
   1b5f0:	001bb580 	call	1bb58 <altera_avalon_jtag_uart_ioctl>
}
   1b5f4:	e037883a 	mov	sp,fp
   1b5f8:	dfc00117 	ldw	ra,4(sp)
   1b5fc:	df000017 	ldw	fp,0(sp)
   1b600:	dec00204 	addi	sp,sp,8
   1b604:	f800283a 	ret

0001b608 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1b608:	defff204 	addi	sp,sp,-56
   1b60c:	dfc00d15 	stw	ra,52(sp)
   1b610:	df000c15 	stw	fp,48(sp)
   1b614:	df000c04 	addi	fp,sp,48
   1b618:	e13ff915 	stw	r4,-28(fp)
   1b61c:	e17ffa15 	stw	r5,-24(fp)
   1b620:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   1b624:	e0bff917 	ldw	r2,-28(fp)
   1b628:	10800c04 	addi	r2,r2,48
   1b62c:	e0bff415 	stw	r2,-48(fp)
   1b630:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   1b634:	e0bff80b 	ldhu	r2,-32(fp)
   1b638:	e0fff884 	addi	r3,fp,-30
   1b63c:	180b883a 	mov	r5,r3
   1b640:	1009883a 	mov	r4,r2
   1b644:	00157a80 	call	157a8 <OSFlagCreate>
   1b648:	1007883a 	mov	r3,r2
   1b64c:	e0bff417 	ldw	r2,-48(fp)
   1b650:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   1b654:	e0bff917 	ldw	r2,-28(fp)
   1b658:	10800a04 	addi	r2,r2,40
   1b65c:	e0bff515 	stw	r2,-44(fp)
   1b660:	00800044 	movi	r2,1
   1b664:	e0bff78d 	sth	r2,-34(fp)
   1b668:	e0bff78b 	ldhu	r2,-34(fp)
   1b66c:	1009883a 	mov	r4,r2
   1b670:	00184bc0 	call	184bc <OSSemCreate>
   1b674:	1007883a 	mov	r3,r2
   1b678:	e0bff517 	ldw	r2,-44(fp)
   1b67c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   1b680:	e0bff917 	ldw	r2,-28(fp)
   1b684:	10800b04 	addi	r2,r2,44
   1b688:	e0bff615 	stw	r2,-40(fp)
   1b68c:	00800044 	movi	r2,1
   1b690:	e0bff70d 	sth	r2,-36(fp)
   1b694:	e0bff70b 	ldhu	r2,-36(fp)
   1b698:	1009883a 	mov	r4,r2
   1b69c:	00184bc0 	call	184bc <OSSemCreate>
   1b6a0:	1007883a 	mov	r3,r2
   1b6a4:	e0bff617 	ldw	r2,-40(fp)
   1b6a8:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1b6ac:	e0bff917 	ldw	r2,-28(fp)
   1b6b0:	00c00044 	movi	r3,1
   1b6b4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1b6b8:	e0bff917 	ldw	r2,-28(fp)
   1b6bc:	10800017 	ldw	r2,0(r2)
   1b6c0:	10800104 	addi	r2,r2,4
   1b6c4:	1007883a 	mov	r3,r2
   1b6c8:	e0bff917 	ldw	r2,-28(fp)
   1b6cc:	10800817 	ldw	r2,32(r2)
   1b6d0:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   1b6d4:	e0bffb17 	ldw	r2,-20(fp)
   1b6d8:	018000b4 	movhi	r6,2
   1b6dc:	31add104 	addi	r6,r6,-18620
   1b6e0:	e17ff917 	ldw	r5,-28(fp)
   1b6e4:	1009883a 	mov	r4,r2
   1b6e8:	001da680 	call	1da68 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1b6ec:	e0bff917 	ldw	r2,-28(fp)
   1b6f0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1b6f4:	e0bff917 	ldw	r2,-28(fp)
   1b6f8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1b6fc:	d0e83317 	ldw	r3,-24372(gp)
   1b700:	e1fff917 	ldw	r7,-28(fp)
   1b704:	018000b4 	movhi	r6,2
   1b708:	31ae7b04 	addi	r6,r6,-17940
   1b70c:	180b883a 	mov	r5,r3
   1b710:	1009883a 	mov	r4,r2
   1b714:	001d5780 	call	1d578 <alt_alarm_start>
   1b718:	1000040e 	bge	r2,zero,1b72c <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1b71c:	e0fff917 	ldw	r3,-28(fp)
   1b720:	00a00034 	movhi	r2,32768
   1b724:	10bfffc4 	addi	r2,r2,-1
   1b728:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1b72c:	0001883a 	nop
   1b730:	e037883a 	mov	sp,fp
   1b734:	dfc00117 	ldw	ra,4(sp)
   1b738:	df000017 	ldw	fp,0(sp)
   1b73c:	dec00204 	addi	sp,sp,8
   1b740:	f800283a 	ret

0001b744 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1b744:	defff104 	addi	sp,sp,-60
   1b748:	dfc00e15 	stw	ra,56(sp)
   1b74c:	df000d15 	stw	fp,52(sp)
   1b750:	df000d04 	addi	fp,sp,52
   1b754:	e13ffe15 	stw	r4,-8(fp)
   1b758:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1b75c:	e0bffe17 	ldw	r2,-8(fp)
   1b760:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   1b764:	e0bff517 	ldw	r2,-44(fp)
   1b768:	10800017 	ldw	r2,0(r2)
   1b76c:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1b770:	e0bff617 	ldw	r2,-40(fp)
   1b774:	10800104 	addi	r2,r2,4
   1b778:	10800037 	ldwio	r2,0(r2)
   1b77c:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1b780:	e0bff717 	ldw	r2,-36(fp)
   1b784:	1080c00c 	andi	r2,r2,768
   1b788:	10009126 	beq	r2,zero,1b9d0 <altera_avalon_jtag_uart_irq+0x28c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1b78c:	e0bff717 	ldw	r2,-36(fp)
   1b790:	1080400c 	andi	r2,r2,256
   1b794:	10004726 	beq	r2,zero,1b8b4 <altera_avalon_jtag_uart_irq+0x170>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1b798:	00800074 	movhi	r2,1
   1b79c:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1b7a0:	e0bff517 	ldw	r2,-44(fp)
   1b7a4:	10800d17 	ldw	r2,52(r2)
   1b7a8:	10800044 	addi	r2,r2,1
   1b7ac:	1081ffcc 	andi	r2,r2,2047
   1b7b0:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   1b7b4:	e0bff517 	ldw	r2,-44(fp)
   1b7b8:	10c00e17 	ldw	r3,56(r2)
   1b7bc:	e0bff817 	ldw	r2,-32(fp)
   1b7c0:	18802726 	beq	r3,r2,1b860 <altera_avalon_jtag_uart_irq+0x11c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1b7c4:	e0bff617 	ldw	r2,-40(fp)
   1b7c8:	10800037 	ldwio	r2,0(r2)
   1b7cc:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1b7d0:	e0bff317 	ldw	r2,-52(fp)
   1b7d4:	10a0000c 	andi	r2,r2,32768
   1b7d8:	10002326 	beq	r2,zero,1b868 <altera_avalon_jtag_uart_irq+0x124>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1b7dc:	e0bff517 	ldw	r2,-44(fp)
   1b7e0:	10800d17 	ldw	r2,52(r2)
   1b7e4:	e0fff317 	ldw	r3,-52(fp)
   1b7e8:	1809883a 	mov	r4,r3
   1b7ec:	e0fff517 	ldw	r3,-44(fp)
   1b7f0:	1885883a 	add	r2,r3,r2
   1b7f4:	10801104 	addi	r2,r2,68
   1b7f8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1b7fc:	e0bff517 	ldw	r2,-44(fp)
   1b800:	10800d17 	ldw	r2,52(r2)
   1b804:	10800044 	addi	r2,r2,1
   1b808:	10c1ffcc 	andi	r3,r2,2047
   1b80c:	e0bff517 	ldw	r2,-44(fp)
   1b810:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   1b814:	e0bff517 	ldw	r2,-44(fp)
   1b818:	10800c17 	ldw	r2,48(r2)
   1b81c:	e0bffa15 	stw	r2,-24(fp)
   1b820:	00800044 	movi	r2,1
   1b824:	e0bffb0d 	sth	r2,-20(fp)
   1b828:	00800044 	movi	r2,1
   1b82c:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1b830:	d0a81e43 	ldbu	r2,-24455(gp)
   1b834:	10803fcc 	andi	r2,r2,255
   1b838:	103fd926 	beq	r2,zero,1b7a0 <altera_avalon_jtag_uart_irq+0x5c>
  {
    OSFlagPost (group, flags, opt, &err);
   1b83c:	e0bffb0b 	ldhu	r2,-20(fp)
   1b840:	e0fffb83 	ldbu	r3,-18(fp)
   1b844:	e13ffcc4 	addi	r4,fp,-13
   1b848:	200f883a 	mov	r7,r4
   1b84c:	180d883a 	mov	r6,r3
   1b850:	100b883a 	mov	r5,r2
   1b854:	e13ffa17 	ldw	r4,-24(fp)
   1b858:	00163840 	call	16384 <OSFlagPost>
      }
   1b85c:	003fd006 	br	1b7a0 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   1b860:	0001883a 	nop
   1b864:	00000106 	br	1b86c <altera_avalon_jtag_uart_irq+0x128>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   1b868:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1b86c:	e0bff317 	ldw	r2,-52(fp)
   1b870:	10bfffec 	andhi	r2,r2,65535
   1b874:	10000f26 	beq	r2,zero,1b8b4 <altera_avalon_jtag_uart_irq+0x170>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1b878:	e0bff517 	ldw	r2,-44(fp)
   1b87c:	10c00817 	ldw	r3,32(r2)
   1b880:	00bfff84 	movi	r2,-2
   1b884:	1886703a 	and	r3,r3,r2
   1b888:	e0bff517 	ldw	r2,-44(fp)
   1b88c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1b890:	e0bff617 	ldw	r2,-40(fp)
   1b894:	10800104 	addi	r2,r2,4
   1b898:	1007883a 	mov	r3,r2
   1b89c:	e0bff517 	ldw	r2,-44(fp)
   1b8a0:	10800817 	ldw	r2,32(r2)
   1b8a4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1b8a8:	e0bff617 	ldw	r2,-40(fp)
   1b8ac:	10800104 	addi	r2,r2,4
   1b8b0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1b8b4:	e0bff717 	ldw	r2,-36(fp)
   1b8b8:	1080800c 	andi	r2,r2,512
   1b8bc:	103fac26 	beq	r2,zero,1b770 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1b8c0:	e0bff717 	ldw	r2,-36(fp)
   1b8c4:	1004d43a 	srli	r2,r2,16
   1b8c8:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1b8cc:	00002606 	br	1b968 <altera_avalon_jtag_uart_irq+0x224>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1b8d0:	e0bff617 	ldw	r2,-40(fp)
   1b8d4:	e0fff517 	ldw	r3,-44(fp)
   1b8d8:	18c01017 	ldw	r3,64(r3)
   1b8dc:	e13ff517 	ldw	r4,-44(fp)
   1b8e0:	20c7883a 	add	r3,r4,r3
   1b8e4:	18c21104 	addi	r3,r3,2116
   1b8e8:	18c00003 	ldbu	r3,0(r3)
   1b8ec:	18c03fcc 	andi	r3,r3,255
   1b8f0:	18c0201c 	xori	r3,r3,128
   1b8f4:	18ffe004 	addi	r3,r3,-128
   1b8f8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1b8fc:	e0bff517 	ldw	r2,-44(fp)
   1b900:	10801017 	ldw	r2,64(r2)
   1b904:	10800044 	addi	r2,r2,1
   1b908:	10c1ffcc 	andi	r3,r2,2047
   1b90c:	e0bff517 	ldw	r2,-44(fp)
   1b910:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   1b914:	e0bff517 	ldw	r2,-44(fp)
   1b918:	10800c17 	ldw	r2,48(r2)
   1b91c:	e0bff915 	stw	r2,-28(fp)
   1b920:	00800084 	movi	r2,2
   1b924:	e0bffc0d 	sth	r2,-16(fp)
   1b928:	00800044 	movi	r2,1
   1b92c:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1b930:	d0a81e43 	ldbu	r2,-24455(gp)
   1b934:	10803fcc 	andi	r2,r2,255
   1b938:	10000826 	beq	r2,zero,1b95c <altera_avalon_jtag_uart_irq+0x218>
  {
    OSFlagPost (group, flags, opt, &err);
   1b93c:	e0bffc0b 	ldhu	r2,-16(fp)
   1b940:	e0fffc83 	ldbu	r3,-14(fp)
   1b944:	e13ffd04 	addi	r4,fp,-12
   1b948:	200f883a 	mov	r7,r4
   1b94c:	180d883a 	mov	r6,r3
   1b950:	100b883a 	mov	r5,r2
   1b954:	e13ff917 	ldw	r4,-28(fp)
   1b958:	00163840 	call	16384 <OSFlagPost>

        space--;
   1b95c:	e0bff417 	ldw	r2,-48(fp)
   1b960:	10bfffc4 	addi	r2,r2,-1
   1b964:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1b968:	e0bff417 	ldw	r2,-48(fp)
   1b96c:	10000526 	beq	r2,zero,1b984 <altera_avalon_jtag_uart_irq+0x240>
   1b970:	e0bff517 	ldw	r2,-44(fp)
   1b974:	10c01017 	ldw	r3,64(r2)
   1b978:	e0bff517 	ldw	r2,-44(fp)
   1b97c:	10800f17 	ldw	r2,60(r2)
   1b980:	18bfd31e 	bne	r3,r2,1b8d0 <altera_avalon_jtag_uart_irq+0x18c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1b984:	e0bff417 	ldw	r2,-48(fp)
   1b988:	103f7926 	beq	r2,zero,1b770 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1b98c:	e0bff517 	ldw	r2,-44(fp)
   1b990:	10c00817 	ldw	r3,32(r2)
   1b994:	00bfff44 	movi	r2,-3
   1b998:	1886703a 	and	r3,r3,r2
   1b99c:	e0bff517 	ldw	r2,-44(fp)
   1b9a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1b9a4:	e0bff517 	ldw	r2,-44(fp)
   1b9a8:	10800017 	ldw	r2,0(r2)
   1b9ac:	10800104 	addi	r2,r2,4
   1b9b0:	1007883a 	mov	r3,r2
   1b9b4:	e0bff517 	ldw	r2,-44(fp)
   1b9b8:	10800817 	ldw	r2,32(r2)
   1b9bc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1b9c0:	e0bff617 	ldw	r2,-40(fp)
   1b9c4:	10800104 	addi	r2,r2,4
   1b9c8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1b9cc:	003f6806 	br	1b770 <altera_avalon_jtag_uart_irq+0x2c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   1b9d0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   1b9d4:	0001883a 	nop
   1b9d8:	e037883a 	mov	sp,fp
   1b9dc:	dfc00117 	ldw	ra,4(sp)
   1b9e0:	df000017 	ldw	fp,0(sp)
   1b9e4:	dec00204 	addi	sp,sp,8
   1b9e8:	f800283a 	ret

0001b9ec <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1b9ec:	defff904 	addi	sp,sp,-28
   1b9f0:	dfc00615 	stw	ra,24(sp)
   1b9f4:	df000515 	stw	fp,20(sp)
   1b9f8:	df000504 	addi	fp,sp,20
   1b9fc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1ba00:	e0bfff17 	ldw	r2,-4(fp)
   1ba04:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1ba08:	e0bffb17 	ldw	r2,-20(fp)
   1ba0c:	10800017 	ldw	r2,0(r2)
   1ba10:	10800104 	addi	r2,r2,4
   1ba14:	10800037 	ldwio	r2,0(r2)
   1ba18:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1ba1c:	e0bffc17 	ldw	r2,-16(fp)
   1ba20:	1081000c 	andi	r2,r2,1024
   1ba24:	10000b26 	beq	r2,zero,1ba54 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1ba28:	e0bffb17 	ldw	r2,-20(fp)
   1ba2c:	10800017 	ldw	r2,0(r2)
   1ba30:	10800104 	addi	r2,r2,4
   1ba34:	1007883a 	mov	r3,r2
   1ba38:	e0bffb17 	ldw	r2,-20(fp)
   1ba3c:	10800817 	ldw	r2,32(r2)
   1ba40:	10810014 	ori	r2,r2,1024
   1ba44:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   1ba48:	e0bffb17 	ldw	r2,-20(fp)
   1ba4c:	10000915 	stw	zero,36(r2)
   1ba50:	00002106 	br	1bad8 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1ba54:	e0bffb17 	ldw	r2,-20(fp)
   1ba58:	10c00917 	ldw	r3,36(r2)
   1ba5c:	00a00034 	movhi	r2,32768
   1ba60:	10bfff04 	addi	r2,r2,-4
   1ba64:	10c01c36 	bltu	r2,r3,1bad8 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
   1ba68:	e0bffb17 	ldw	r2,-20(fp)
   1ba6c:	10800917 	ldw	r2,36(r2)
   1ba70:	10c00044 	addi	r3,r2,1
   1ba74:	e0bffb17 	ldw	r2,-20(fp)
   1ba78:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   1ba7c:	e0bffb17 	ldw	r2,-20(fp)
   1ba80:	10c00917 	ldw	r3,36(r2)
   1ba84:	e0bffb17 	ldw	r2,-20(fp)
   1ba88:	10800117 	ldw	r2,4(r2)
   1ba8c:	18801236 	bltu	r3,r2,1bad8 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   1ba90:	e0bffb17 	ldw	r2,-20(fp)
   1ba94:	10800c17 	ldw	r2,48(r2)
   1ba98:	e0bffd15 	stw	r2,-12(fp)
   1ba9c:	00800104 	movi	r2,4
   1baa0:	e0bffe0d 	sth	r2,-8(fp)
   1baa4:	00800044 	movi	r2,1
   1baa8:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1baac:	d0a81e43 	ldbu	r2,-24455(gp)
   1bab0:	10803fcc 	andi	r2,r2,255
   1bab4:	10000826 	beq	r2,zero,1bad8 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
   1bab8:	e0bffe0b 	ldhu	r2,-8(fp)
   1babc:	e0fffe83 	ldbu	r3,-6(fp)
   1bac0:	e13ffec4 	addi	r4,fp,-5
   1bac4:	200f883a 	mov	r7,r4
   1bac8:	180d883a 	mov	r6,r3
   1bacc:	100b883a 	mov	r5,r2
   1bad0:	e13ffd17 	ldw	r4,-12(fp)
   1bad4:	00163840 	call	16384 <OSFlagPost>
   1bad8:	d0a83317 	ldw	r2,-24372(gp)
    }
  }

  return alt_ticks_per_second();
}
   1badc:	e037883a 	mov	sp,fp
   1bae0:	dfc00117 	ldw	ra,4(sp)
   1bae4:	df000017 	ldw	fp,0(sp)
   1bae8:	dec00204 	addi	sp,sp,8
   1baec:	f800283a 	ret

0001baf0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1baf0:	defffd04 	addi	sp,sp,-12
   1baf4:	df000215 	stw	fp,8(sp)
   1baf8:	df000204 	addi	fp,sp,8
   1bafc:	e13ffe15 	stw	r4,-8(fp)
   1bb00:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1bb04:	00000506 	br	1bb1c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1bb08:	e0bfff17 	ldw	r2,-4(fp)
   1bb0c:	1090000c 	andi	r2,r2,16384
   1bb10:	10000226 	beq	r2,zero,1bb1c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1bb14:	00bffd44 	movi	r2,-11
   1bb18:	00000b06 	br	1bb48 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1bb1c:	e0bffe17 	ldw	r2,-8(fp)
   1bb20:	10c01017 	ldw	r3,64(r2)
   1bb24:	e0bffe17 	ldw	r2,-8(fp)
   1bb28:	10800f17 	ldw	r2,60(r2)
   1bb2c:	18800526 	beq	r3,r2,1bb44 <altera_avalon_jtag_uart_close+0x54>
   1bb30:	e0bffe17 	ldw	r2,-8(fp)
   1bb34:	10c00917 	ldw	r3,36(r2)
   1bb38:	e0bffe17 	ldw	r2,-8(fp)
   1bb3c:	10800117 	ldw	r2,4(r2)
   1bb40:	18bff136 	bltu	r3,r2,1bb08 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1bb44:	0005883a 	mov	r2,zero
}
   1bb48:	e037883a 	mov	sp,fp
   1bb4c:	df000017 	ldw	fp,0(sp)
   1bb50:	dec00104 	addi	sp,sp,4
   1bb54:	f800283a 	ret

0001bb58 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1bb58:	defffa04 	addi	sp,sp,-24
   1bb5c:	df000515 	stw	fp,20(sp)
   1bb60:	df000504 	addi	fp,sp,20
   1bb64:	e13ffd15 	stw	r4,-12(fp)
   1bb68:	e17ffe15 	stw	r5,-8(fp)
   1bb6c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   1bb70:	00bff9c4 	movi	r2,-25
   1bb74:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1bb78:	e0bffe17 	ldw	r2,-8(fp)
   1bb7c:	10da8060 	cmpeqi	r3,r2,27137
   1bb80:	1800031e 	bne	r3,zero,1bb90 <altera_avalon_jtag_uart_ioctl+0x38>
   1bb84:	109a80a0 	cmpeqi	r2,r2,27138
   1bb88:	1000181e 	bne	r2,zero,1bbec <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   1bb8c:	00002906 	br	1bc34 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1bb90:	e0bffd17 	ldw	r2,-12(fp)
   1bb94:	10c00117 	ldw	r3,4(r2)
   1bb98:	00a00034 	movhi	r2,32768
   1bb9c:	10bfffc4 	addi	r2,r2,-1
   1bba0:	18802126 	beq	r3,r2,1bc28 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   1bba4:	e0bfff17 	ldw	r2,-4(fp)
   1bba8:	10800017 	ldw	r2,0(r2)
   1bbac:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1bbb0:	e0bffc17 	ldw	r2,-16(fp)
   1bbb4:	10800090 	cmplti	r2,r2,2
   1bbb8:	1000061e 	bne	r2,zero,1bbd4 <altera_avalon_jtag_uart_ioctl+0x7c>
   1bbbc:	e0fffc17 	ldw	r3,-16(fp)
   1bbc0:	00a00034 	movhi	r2,32768
   1bbc4:	10bfffc4 	addi	r2,r2,-1
   1bbc8:	18800226 	beq	r3,r2,1bbd4 <altera_avalon_jtag_uart_ioctl+0x7c>
   1bbcc:	e0bffc17 	ldw	r2,-16(fp)
   1bbd0:	00000206 	br	1bbdc <altera_avalon_jtag_uart_ioctl+0x84>
   1bbd4:	00a00034 	movhi	r2,32768
   1bbd8:	10bfff84 	addi	r2,r2,-2
   1bbdc:	e0fffd17 	ldw	r3,-12(fp)
   1bbe0:	18800115 	stw	r2,4(r3)
      rc = 0;
   1bbe4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1bbe8:	00000f06 	br	1bc28 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1bbec:	e0bffd17 	ldw	r2,-12(fp)
   1bbf0:	10c00117 	ldw	r3,4(r2)
   1bbf4:	00a00034 	movhi	r2,32768
   1bbf8:	10bfffc4 	addi	r2,r2,-1
   1bbfc:	18800c26 	beq	r3,r2,1bc30 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1bc00:	e0bffd17 	ldw	r2,-12(fp)
   1bc04:	10c00917 	ldw	r3,36(r2)
   1bc08:	e0bffd17 	ldw	r2,-12(fp)
   1bc0c:	10800117 	ldw	r2,4(r2)
   1bc10:	1885803a 	cmpltu	r2,r3,r2
   1bc14:	10c03fcc 	andi	r3,r2,255
   1bc18:	e0bfff17 	ldw	r2,-4(fp)
   1bc1c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1bc20:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1bc24:	00000206 	br	1bc30 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   1bc28:	0001883a 	nop
   1bc2c:	00000106 	br	1bc34 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   1bc30:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1bc34:	e0bffb17 	ldw	r2,-20(fp)
}
   1bc38:	e037883a 	mov	sp,fp
   1bc3c:	df000017 	ldw	fp,0(sp)
   1bc40:	dec00104 	addi	sp,sp,4
   1bc44:	f800283a 	ret

0001bc48 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1bc48:	deffed04 	addi	sp,sp,-76
   1bc4c:	dfc01215 	stw	ra,72(sp)
   1bc50:	df001115 	stw	fp,68(sp)
   1bc54:	df001104 	addi	fp,sp,68
   1bc58:	e13ffc15 	stw	r4,-16(fp)
   1bc5c:	e17ffd15 	stw	r5,-12(fp)
   1bc60:	e1bffe15 	stw	r6,-8(fp)
   1bc64:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1bc68:	e0bffd17 	ldw	r2,-12(fp)
   1bc6c:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   1bc70:	e0bffc17 	ldw	r2,-16(fp)
   1bc74:	10800a17 	ldw	r2,40(r2)
   1bc78:	e0bff815 	stw	r2,-32(fp)
   1bc7c:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   1bc80:	e0bff90b 	ldhu	r2,-28(fp)
   1bc84:	e0fffb04 	addi	r3,fp,-20
   1bc88:	180d883a 	mov	r6,r3
   1bc8c:	100b883a 	mov	r5,r2
   1bc90:	e13ff817 	ldw	r4,-32(fp)
   1bc94:	00187d40 	call	187d4 <OSSemPend>

  while (space > 0)
   1bc98:	00006106 	br	1be20 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1bc9c:	e0bffc17 	ldw	r2,-16(fp)
   1bca0:	10800d17 	ldw	r2,52(r2)
   1bca4:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
   1bca8:	e0bffc17 	ldw	r2,-16(fp)
   1bcac:	10800e17 	ldw	r2,56(r2)
   1bcb0:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
   1bcb4:	e0fff317 	ldw	r3,-52(fp)
   1bcb8:	e0bff417 	ldw	r2,-48(fp)
   1bcbc:	18800536 	bltu	r3,r2,1bcd4 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   1bcc0:	e0fff317 	ldw	r3,-52(fp)
   1bcc4:	e0bff417 	ldw	r2,-48(fp)
   1bcc8:	1885c83a 	sub	r2,r3,r2
   1bccc:	e0bff115 	stw	r2,-60(fp)
   1bcd0:	00000406 	br	1bce4 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1bcd4:	00c20004 	movi	r3,2048
   1bcd8:	e0bff417 	ldw	r2,-48(fp)
   1bcdc:	1885c83a 	sub	r2,r3,r2
   1bce0:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   1bce4:	e0bff117 	ldw	r2,-60(fp)
   1bce8:	10001e26 	beq	r2,zero,1bd64 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   1bcec:	e0fffe17 	ldw	r3,-8(fp)
   1bcf0:	e0bff117 	ldw	r2,-60(fp)
   1bcf4:	1880022e 	bgeu	r3,r2,1bd00 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
   1bcf8:	e0bffe17 	ldw	r2,-8(fp)
   1bcfc:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1bd00:	e0bffc17 	ldw	r2,-16(fp)
   1bd04:	10c01104 	addi	r3,r2,68
   1bd08:	e0bff417 	ldw	r2,-48(fp)
   1bd0c:	1885883a 	add	r2,r3,r2
   1bd10:	e1bff117 	ldw	r6,-60(fp)
   1bd14:	100b883a 	mov	r5,r2
   1bd18:	e13ff017 	ldw	r4,-64(fp)
   1bd1c:	0009eec0 	call	9eec <memcpy>
      ptr   += n;
   1bd20:	e0fff017 	ldw	r3,-64(fp)
   1bd24:	e0bff117 	ldw	r2,-60(fp)
   1bd28:	1885883a 	add	r2,r3,r2
   1bd2c:	e0bff015 	stw	r2,-64(fp)
      space -= n;
   1bd30:	e0fffe17 	ldw	r3,-8(fp)
   1bd34:	e0bff117 	ldw	r2,-60(fp)
   1bd38:	1885c83a 	sub	r2,r3,r2
   1bd3c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1bd40:	e0fff417 	ldw	r3,-48(fp)
   1bd44:	e0bff117 	ldw	r2,-60(fp)
   1bd48:	1885883a 	add	r2,r3,r2
   1bd4c:	10c1ffcc 	andi	r3,r2,2047
   1bd50:	e0bffc17 	ldw	r2,-16(fp)
   1bd54:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   1bd58:	e0bffe17 	ldw	r2,-8(fp)
   1bd5c:	00bfcf16 	blt	zero,r2,1bc9c <altera_avalon_jtag_uart_read+0x54>
   1bd60:	00000106 	br	1bd68 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   1bd64:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   1bd68:	e0fff017 	ldw	r3,-64(fp)
   1bd6c:	e0bffd17 	ldw	r2,-12(fp)
   1bd70:	18802e1e 	bne	r3,r2,1be2c <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1bd74:	e0bfff17 	ldw	r2,-4(fp)
   1bd78:	1090000c 	andi	r2,r2,16384
   1bd7c:	10002d1e 	bne	r2,zero,1be34 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   1bd80:	d0a81e43 	ldbu	r2,-24455(gp)
   1bd84:	10803fcc 	andi	r2,r2,255
   1bd88:	10800058 	cmpnei	r2,r2,1
   1bd8c:	1000161e 	bne	r2,zero,1bde8 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   1bd90:	e0bffc17 	ldw	r2,-16(fp)
   1bd94:	10800c17 	ldw	r2,48(r2)
   1bd98:	e0bff215 	stw	r2,-56(fp)
   1bd9c:	00800144 	movi	r2,5
   1bda0:	e0bff98d 	sth	r2,-26(fp)
   1bda4:	00bfe0c4 	movi	r2,-125
   1bda8:	e0bffa05 	stb	r2,-24(fp)
   1bdac:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1bdb0:	d0a81e43 	ldbu	r2,-24455(gp)
   1bdb4:	10803fcc 	andi	r2,r2,255
   1bdb8:	10001526 	beq	r2,zero,1be10 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1bdbc:	e0fff98b 	ldhu	r3,-26(fp)
   1bdc0:	e13ffa03 	ldbu	r4,-24(fp)
   1bdc4:	e17ffa8b 	ldhu	r5,-22(fp)
   1bdc8:	e0bffb44 	addi	r2,fp,-19
   1bdcc:	d8800015 	stw	r2,0(sp)
   1bdd0:	280f883a 	mov	r7,r5
   1bdd4:	200d883a 	mov	r6,r4
   1bdd8:	180b883a 	mov	r5,r3
   1bddc:	e13ff217 	ldw	r4,-56(fp)
   1bde0:	0015d6c0 	call	15d6c <OSFlagPend>
   1bde4:	00000a06 	br	1be10 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1bde8:	0001883a 	nop
   1bdec:	e0bffc17 	ldw	r2,-16(fp)
   1bdf0:	10c00d17 	ldw	r3,52(r2)
   1bdf4:	e0bff317 	ldw	r2,-52(fp)
   1bdf8:	1880051e 	bne	r3,r2,1be10 <altera_avalon_jtag_uart_read+0x1c8>
   1bdfc:	e0bffc17 	ldw	r2,-16(fp)
   1be00:	10c00917 	ldw	r3,36(r2)
   1be04:	e0bffc17 	ldw	r2,-16(fp)
   1be08:	10800117 	ldw	r2,4(r2)
   1be0c:	18bff736 	bltu	r3,r2,1bdec <altera_avalon_jtag_uart_read+0x1a4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1be10:	e0bffc17 	ldw	r2,-16(fp)
   1be14:	10c00d17 	ldw	r3,52(r2)
   1be18:	e0bff317 	ldw	r2,-52(fp)
   1be1c:	18800726 	beq	r3,r2,1be3c <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1be20:	e0bffe17 	ldw	r2,-8(fp)
   1be24:	00bf9d16 	blt	zero,r2,1bc9c <altera_avalon_jtag_uart_read+0x54>
   1be28:	00000506 	br	1be40 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   1be2c:	0001883a 	nop
   1be30:	00000306 	br	1be40 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   1be34:	0001883a 	nop
   1be38:	00000106 	br	1be40 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   1be3c:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   1be40:	e0bffc17 	ldw	r2,-16(fp)
   1be44:	10800a17 	ldw	r2,40(r2)
   1be48:	1009883a 	mov	r4,r2
   1be4c:	0018b4c0 	call	18b4c <OSSemPost>

  if (ptr != buffer)
   1be50:	e0fff017 	ldw	r3,-64(fp)
   1be54:	e0bffd17 	ldw	r2,-12(fp)
   1be58:	18801826 	beq	r3,r2,1bebc <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1be5c:	0005303a 	rdctl	r2,status
   1be60:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1be64:	e0fff717 	ldw	r3,-36(fp)
   1be68:	00bfff84 	movi	r2,-2
   1be6c:	1884703a 	and	r2,r3,r2
   1be70:	1001703a 	wrctl	status,r2
  
  return context;
   1be74:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1be78:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1be7c:	e0bffc17 	ldw	r2,-16(fp)
   1be80:	10800817 	ldw	r2,32(r2)
   1be84:	10c00054 	ori	r3,r2,1
   1be88:	e0bffc17 	ldw	r2,-16(fp)
   1be8c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1be90:	e0bffc17 	ldw	r2,-16(fp)
   1be94:	10800017 	ldw	r2,0(r2)
   1be98:	10800104 	addi	r2,r2,4
   1be9c:	1007883a 	mov	r3,r2
   1bea0:	e0bffc17 	ldw	r2,-16(fp)
   1bea4:	10800817 	ldw	r2,32(r2)
   1bea8:	18800035 	stwio	r2,0(r3)
   1beac:	e0bff617 	ldw	r2,-40(fp)
   1beb0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1beb4:	e0bff517 	ldw	r2,-44(fp)
   1beb8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1bebc:	e0fff017 	ldw	r3,-64(fp)
   1bec0:	e0bffd17 	ldw	r2,-12(fp)
   1bec4:	18800426 	beq	r3,r2,1bed8 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
   1bec8:	e0fff017 	ldw	r3,-64(fp)
   1becc:	e0bffd17 	ldw	r2,-12(fp)
   1bed0:	1885c83a 	sub	r2,r3,r2
   1bed4:	00000606 	br	1bef0 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   1bed8:	e0bfff17 	ldw	r2,-4(fp)
   1bedc:	1090000c 	andi	r2,r2,16384
   1bee0:	10000226 	beq	r2,zero,1beec <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
   1bee4:	00bffd44 	movi	r2,-11
   1bee8:	00000106 	br	1bef0 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   1beec:	00bffec4 	movi	r2,-5
}
   1bef0:	e037883a 	mov	sp,fp
   1bef4:	dfc00117 	ldw	ra,4(sp)
   1bef8:	df000017 	ldw	fp,0(sp)
   1befc:	dec00204 	addi	sp,sp,8
   1bf00:	f800283a 	ret

0001bf04 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1bf04:	deffed04 	addi	sp,sp,-76
   1bf08:	dfc01215 	stw	ra,72(sp)
   1bf0c:	df001115 	stw	fp,68(sp)
   1bf10:	df001104 	addi	fp,sp,68
   1bf14:	e13ffc15 	stw	r4,-16(fp)
   1bf18:	e17ffd15 	stw	r5,-12(fp)
   1bf1c:	e1bffe15 	stw	r6,-8(fp)
   1bf20:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1bf24:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1bf28:	e0bffd17 	ldw	r2,-12(fp)
   1bf2c:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   1bf30:	e0bffc17 	ldw	r2,-16(fp)
   1bf34:	10800b17 	ldw	r2,44(r2)
   1bf38:	e0bff815 	stw	r2,-32(fp)
   1bf3c:	e03ff90d 	sth	zero,-28(fp)
   1bf40:	e0bff90b 	ldhu	r2,-28(fp)
   1bf44:	e0fffb44 	addi	r3,fp,-19
   1bf48:	180d883a 	mov	r6,r3
   1bf4c:	100b883a 	mov	r5,r2
   1bf50:	e13ff817 	ldw	r4,-32(fp)
   1bf54:	00187d40 	call	187d4 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1bf58:	00003706 	br	1c038 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1bf5c:	e0bffc17 	ldw	r2,-16(fp)
   1bf60:	10800f17 	ldw	r2,60(r2)
   1bf64:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
   1bf68:	e0bffc17 	ldw	r2,-16(fp)
   1bf6c:	10801017 	ldw	r2,64(r2)
   1bf70:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   1bf74:	e0fff417 	ldw	r3,-48(fp)
   1bf78:	e0bff017 	ldw	r2,-64(fp)
   1bf7c:	1880062e 	bgeu	r3,r2,1bf98 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   1bf80:	e0fff017 	ldw	r3,-64(fp)
   1bf84:	e0bff417 	ldw	r2,-48(fp)
   1bf88:	1885c83a 	sub	r2,r3,r2
   1bf8c:	10bfffc4 	addi	r2,r2,-1
   1bf90:	e0bff115 	stw	r2,-60(fp)
   1bf94:	00000b06 	br	1bfc4 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   1bf98:	e0bff017 	ldw	r2,-64(fp)
   1bf9c:	10000526 	beq	r2,zero,1bfb4 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1bfa0:	00c20004 	movi	r3,2048
   1bfa4:	e0bff417 	ldw	r2,-48(fp)
   1bfa8:	1885c83a 	sub	r2,r3,r2
   1bfac:	e0bff115 	stw	r2,-60(fp)
   1bfb0:	00000406 	br	1bfc4 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1bfb4:	00c1ffc4 	movi	r3,2047
   1bfb8:	e0bff417 	ldw	r2,-48(fp)
   1bfbc:	1885c83a 	sub	r2,r3,r2
   1bfc0:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   1bfc4:	e0bff117 	ldw	r2,-60(fp)
   1bfc8:	10001e26 	beq	r2,zero,1c044 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
   1bfcc:	e0fffe17 	ldw	r3,-8(fp)
   1bfd0:	e0bff117 	ldw	r2,-60(fp)
   1bfd4:	1880022e 	bgeu	r3,r2,1bfe0 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   1bfd8:	e0bffe17 	ldw	r2,-8(fp)
   1bfdc:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1bfe0:	e0bffc17 	ldw	r2,-16(fp)
   1bfe4:	10c21104 	addi	r3,r2,2116
   1bfe8:	e0bff417 	ldw	r2,-48(fp)
   1bfec:	1885883a 	add	r2,r3,r2
   1bff0:	e1bff117 	ldw	r6,-60(fp)
   1bff4:	e17ffd17 	ldw	r5,-12(fp)
   1bff8:	1009883a 	mov	r4,r2
   1bffc:	0009eec0 	call	9eec <memcpy>
      ptr   += n;
   1c000:	e0fffd17 	ldw	r3,-12(fp)
   1c004:	e0bff117 	ldw	r2,-60(fp)
   1c008:	1885883a 	add	r2,r3,r2
   1c00c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1c010:	e0fffe17 	ldw	r3,-8(fp)
   1c014:	e0bff117 	ldw	r2,-60(fp)
   1c018:	1885c83a 	sub	r2,r3,r2
   1c01c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1c020:	e0fff417 	ldw	r3,-48(fp)
   1c024:	e0bff117 	ldw	r2,-60(fp)
   1c028:	1885883a 	add	r2,r3,r2
   1c02c:	10c1ffcc 	andi	r3,r2,2047
   1c030:	e0bffc17 	ldw	r2,-16(fp)
   1c034:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1c038:	e0bffe17 	ldw	r2,-8(fp)
   1c03c:	00bfc716 	blt	zero,r2,1bf5c <altera_avalon_jtag_uart_write+0x58>
   1c040:	00000106 	br	1c048 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   1c044:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c048:	0005303a 	rdctl	r2,status
   1c04c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c050:	e0fff717 	ldw	r3,-36(fp)
   1c054:	00bfff84 	movi	r2,-2
   1c058:	1884703a 	and	r2,r3,r2
   1c05c:	1001703a 	wrctl	status,r2
  
  return context;
   1c060:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1c064:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1c068:	e0bffc17 	ldw	r2,-16(fp)
   1c06c:	10800817 	ldw	r2,32(r2)
   1c070:	10c00094 	ori	r3,r2,2
   1c074:	e0bffc17 	ldw	r2,-16(fp)
   1c078:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1c07c:	e0bffc17 	ldw	r2,-16(fp)
   1c080:	10800017 	ldw	r2,0(r2)
   1c084:	10800104 	addi	r2,r2,4
   1c088:	1007883a 	mov	r3,r2
   1c08c:	e0bffc17 	ldw	r2,-16(fp)
   1c090:	10800817 	ldw	r2,32(r2)
   1c094:	18800035 	stwio	r2,0(r3)
   1c098:	e0bff617 	ldw	r2,-40(fp)
   1c09c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c0a0:	e0bff317 	ldw	r2,-52(fp)
   1c0a4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1c0a8:	e0bffe17 	ldw	r2,-8(fp)
   1c0ac:	00802a0e 	bge	zero,r2,1c158 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
   1c0b0:	e0bfff17 	ldw	r2,-4(fp)
   1c0b4:	1090000c 	andi	r2,r2,16384
   1c0b8:	10002a1e 	bne	r2,zero,1c164 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   1c0bc:	d0a81e43 	ldbu	r2,-24455(gp)
   1c0c0:	10803fcc 	andi	r2,r2,255
   1c0c4:	10800058 	cmpnei	r2,r2,1
   1c0c8:	1000161e 	bne	r2,zero,1c124 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   1c0cc:	e0bffc17 	ldw	r2,-16(fp)
   1c0d0:	10800c17 	ldw	r2,48(r2)
   1c0d4:	e0bff515 	stw	r2,-44(fp)
   1c0d8:	00800184 	movi	r2,6
   1c0dc:	e0bff98d 	sth	r2,-26(fp)
   1c0e0:	00bfe0c4 	movi	r2,-125
   1c0e4:	e0bffa05 	stb	r2,-24(fp)
   1c0e8:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1c0ec:	d0a81e43 	ldbu	r2,-24455(gp)
   1c0f0:	10803fcc 	andi	r2,r2,255
   1c0f4:	10001526 	beq	r2,zero,1c14c <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1c0f8:	e0fff98b 	ldhu	r3,-26(fp)
   1c0fc:	e13ffa03 	ldbu	r4,-24(fp)
   1c100:	e17ffa8b 	ldhu	r5,-22(fp)
   1c104:	e0bffb04 	addi	r2,fp,-20
   1c108:	d8800015 	stw	r2,0(sp)
   1c10c:	280f883a 	mov	r7,r5
   1c110:	200d883a 	mov	r6,r4
   1c114:	180b883a 	mov	r5,r3
   1c118:	e13ff517 	ldw	r4,-44(fp)
   1c11c:	0015d6c0 	call	15d6c <OSFlagPend>
   1c120:	00000a06 	br	1c14c <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1c124:	0001883a 	nop
   1c128:	e0bffc17 	ldw	r2,-16(fp)
   1c12c:	10c01017 	ldw	r3,64(r2)
   1c130:	e0bff017 	ldw	r2,-64(fp)
   1c134:	1880051e 	bne	r3,r2,1c14c <altera_avalon_jtag_uart_write+0x248>
   1c138:	e0bffc17 	ldw	r2,-16(fp)
   1c13c:	10c00917 	ldw	r3,36(r2)
   1c140:	e0bffc17 	ldw	r2,-16(fp)
   1c144:	10800117 	ldw	r2,4(r2)
   1c148:	18bff736 	bltu	r3,r2,1c128 <altera_avalon_jtag_uart_write+0x224>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1c14c:	e0bffc17 	ldw	r2,-16(fp)
   1c150:	10800917 	ldw	r2,36(r2)
   1c154:	1000051e 	bne	r2,zero,1c16c <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
   1c158:	e0bffe17 	ldw	r2,-8(fp)
   1c15c:	00bfb616 	blt	zero,r2,1c038 <altera_avalon_jtag_uart_write+0x134>
   1c160:	00000306 	br	1c170 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   1c164:	0001883a 	nop
   1c168:	00000106 	br	1c170 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   1c16c:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   1c170:	e0bffc17 	ldw	r2,-16(fp)
   1c174:	10800b17 	ldw	r2,44(r2)
   1c178:	1009883a 	mov	r4,r2
   1c17c:	0018b4c0 	call	18b4c <OSSemPost>

  if (ptr != start)
   1c180:	e0fffd17 	ldw	r3,-12(fp)
   1c184:	e0bff217 	ldw	r2,-56(fp)
   1c188:	18800426 	beq	r3,r2,1c19c <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
   1c18c:	e0fffd17 	ldw	r3,-12(fp)
   1c190:	e0bff217 	ldw	r2,-56(fp)
   1c194:	1885c83a 	sub	r2,r3,r2
   1c198:	00000606 	br	1c1b4 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
   1c19c:	e0bfff17 	ldw	r2,-4(fp)
   1c1a0:	1090000c 	andi	r2,r2,16384
   1c1a4:	10000226 	beq	r2,zero,1c1b0 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
   1c1a8:	00bffd44 	movi	r2,-11
   1c1ac:	00000106 	br	1c1b4 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1c1b0:	00bffec4 	movi	r2,-5
}
   1c1b4:	e037883a 	mov	sp,fp
   1c1b8:	dfc00117 	ldw	ra,4(sp)
   1c1bc:	df000017 	ldw	fp,0(sp)
   1c1c0:	dec00204 	addi	sp,sp,8
   1c1c4:	f800283a 	ret

0001c1c8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1c1c8:	defff904 	addi	sp,sp,-28
   1c1cc:	dfc00615 	stw	ra,24(sp)
   1c1d0:	df000515 	stw	fp,20(sp)
   1c1d4:	df000504 	addi	fp,sp,20
   1c1d8:	e13ffe15 	stw	r4,-8(fp)
   1c1dc:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1c1e0:	0007883a 	mov	r3,zero
   1c1e4:	e0bffe17 	ldw	r2,-8(fp)
   1c1e8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1c1ec:	e0bffe17 	ldw	r2,-8(fp)
   1c1f0:	10800104 	addi	r2,r2,4
   1c1f4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c1f8:	0005303a 	rdctl	r2,status
   1c1fc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c200:	e0fffc17 	ldw	r3,-16(fp)
   1c204:	00bfff84 	movi	r2,-2
   1c208:	1884703a 	and	r2,r3,r2
   1c20c:	1001703a 	wrctl	status,r2
  
  return context;
   1c210:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1c214:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   1c218:	001ded80 	call	1ded8 <alt_tick>
   1c21c:	e0bffb17 	ldw	r2,-20(fp)
   1c220:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c224:	e0bffd17 	ldw	r2,-12(fp)
   1c228:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1c22c:	0001883a 	nop
   1c230:	e037883a 	mov	sp,fp
   1c234:	dfc00117 	ldw	ra,4(sp)
   1c238:	df000017 	ldw	fp,0(sp)
   1c23c:	dec00204 	addi	sp,sp,8
   1c240:	f800283a 	ret

0001c244 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1c244:	defff904 	addi	sp,sp,-28
   1c248:	dfc00615 	stw	ra,24(sp)
   1c24c:	df000515 	stw	fp,20(sp)
   1c250:	df000504 	addi	fp,sp,20
   1c254:	e13ffc15 	stw	r4,-16(fp)
   1c258:	e17ffd15 	stw	r5,-12(fp)
   1c25c:	e1bffe15 	stw	r6,-8(fp)
   1c260:	e1ffff15 	stw	r7,-4(fp)
   1c264:	e0bfff17 	ldw	r2,-4(fp)
   1c268:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1c26c:	d0a83317 	ldw	r2,-24372(gp)
   1c270:	1000021e 	bne	r2,zero,1c27c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   1c274:	e0bffb17 	ldw	r2,-20(fp)
   1c278:	d0a83315 	stw	r2,-24372(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1c27c:	e0bffc17 	ldw	r2,-16(fp)
   1c280:	10800104 	addi	r2,r2,4
   1c284:	00c001c4 	movi	r3,7
   1c288:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   1c28c:	018000b4 	movhi	r6,2
   1c290:	31b07204 	addi	r6,r6,-15928
   1c294:	e17ffc17 	ldw	r5,-16(fp)
   1c298:	e13ffe17 	ldw	r4,-8(fp)
   1c29c:	001da680 	call	1da68 <alt_irq_register>
#endif  
}
   1c2a0:	0001883a 	nop
   1c2a4:	e037883a 	mov	sp,fp
   1c2a8:	dfc00117 	ldw	ra,4(sp)
   1c2ac:	df000017 	ldw	fp,0(sp)
   1c2b0:	dec00204 	addi	sp,sp,8
   1c2b4:	f800283a 	ret

0001c2b8 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   1c2b8:	defffc04 	addi	sp,sp,-16
   1c2bc:	df000315 	stw	fp,12(sp)
   1c2c0:	df000304 	addi	fp,sp,12
   1c2c4:	e13ffe15 	stw	r4,-8(fp)
   1c2c8:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   1c2cc:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   1c2d0:	e0bfff17 	ldw	r2,-4(fp)
   1c2d4:	1000061e 	bne	r2,zero,1c2f0 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   1c2d8:	e0bffe17 	ldw	r2,-8(fp)
   1c2dc:	1007883a 	mov	r3,r2
   1c2e0:	e0bffd03 	ldbu	r2,-12(fp)
   1c2e4:	1884b03a 	or	r2,r3,r2
   1c2e8:	e0bffd05 	stb	r2,-12(fp)
   1c2ec:	00000806 	br	1c310 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   1c2f0:	e0bffe17 	ldw	r2,-8(fp)
   1c2f4:	1007883a 	mov	r3,r2
   1c2f8:	e0bffd03 	ldbu	r2,-12(fp)
   1c2fc:	1884b03a 	or	r2,r3,r2
   1c300:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   1c304:	e0bffd03 	ldbu	r2,-12(fp)
   1c308:	10801014 	ori	r2,r2,64
   1c30c:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   1c310:	e0fffd03 	ldbu	r3,-12(fp)
   1c314:	00bfe004 	movi	r2,-128
   1c318:	1884b03a 	or	r2,r3,r2
}
   1c31c:	e037883a 	mov	sp,fp
   1c320:	df000017 	ldw	fp,0(sp)
   1c324:	dec00104 	addi	sp,sp,4
   1c328:	f800283a 	ret

0001c32c <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   1c32c:	defffd04 	addi	sp,sp,-12
   1c330:	df000215 	stw	fp,8(sp)
   1c334:	df000204 	addi	fp,sp,8
   1c338:	e13ffe15 	stw	r4,-8(fp)
   1c33c:	2805883a 	mov	r2,r5
   1c340:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   1c344:	e0bffe17 	ldw	r2,-8(fp)
   1c348:	10800a17 	ldw	r2,40(r2)
   1c34c:	1007883a 	mov	r3,r2
   1c350:	e0bfff03 	ldbu	r2,-4(fp)
   1c354:	18800025 	stbio	r2,0(r3)
}
   1c358:	0001883a 	nop
   1c35c:	e037883a 	mov	sp,fp
   1c360:	df000017 	ldw	fp,0(sp)
   1c364:	dec00104 	addi	sp,sp,4
   1c368:	f800283a 	ret

0001c36c <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   1c36c:	defffe04 	addi	sp,sp,-8
   1c370:	df000115 	stw	fp,4(sp)
   1c374:	df000104 	addi	fp,sp,4
   1c378:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   1c37c:	e0bfff17 	ldw	r2,-4(fp)
   1c380:	10800a17 	ldw	r2,40(r2)
   1c384:	1007883a 	mov	r3,r2
   1c388:	00800044 	movi	r2,1
   1c38c:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   1c390:	0001883a 	nop
   1c394:	e037883a 	mov	sp,fp
   1c398:	df000017 	ldw	fp,0(sp)
   1c39c:	dec00104 	addi	sp,sp,4
   1c3a0:	f800283a 	ret

0001c3a4 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   1c3a4:	defffc04 	addi	sp,sp,-16
   1c3a8:	dfc00315 	stw	ra,12(sp)
   1c3ac:	df000215 	stw	fp,8(sp)
   1c3b0:	df000204 	addi	fp,sp,8
   1c3b4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   1c3b8:	d1600904 	addi	r5,gp,-32732
   1c3bc:	e13fff17 	ldw	r4,-4(fp)
   1c3c0:	001d8640 	call	1d864 <alt_find_dev>
   1c3c4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1c3c8:	e0bffe17 	ldw	r2,-8(fp)
}
   1c3cc:	e037883a 	mov	sp,fp
   1c3d0:	dfc00117 	ldw	ra,4(sp)
   1c3d4:	df000017 	ldw	fp,0(sp)
   1c3d8:	dec00204 	addi	sp,sp,8
   1c3dc:	f800283a 	ret

0001c3e0 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   1c3e0:	defffb04 	addi	sp,sp,-20
   1c3e4:	df000415 	stw	fp,16(sp)
   1c3e8:	df000404 	addi	fp,sp,16
   1c3ec:	e13ffd15 	stw	r4,-12(fp)
   1c3f0:	e17ffe15 	stw	r5,-8(fp)
   1c3f4:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   1c3f8:	e03ffc15 	stw	zero,-16(fp)
   1c3fc:	00000f06 	br	1c43c <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   1c400:	e0bffd17 	ldw	r2,-12(fp)
   1c404:	10800a17 	ldw	r2,40(r2)
   1c408:	10800044 	addi	r2,r2,1
   1c40c:	1009883a 	mov	r4,r2
   1c410:	e0fffe17 	ldw	r3,-8(fp)
   1c414:	e0bffc17 	ldw	r2,-16(fp)
   1c418:	1885883a 	add	r2,r3,r2
   1c41c:	10800003 	ldbu	r2,0(r2)
   1c420:	10803fcc 	andi	r2,r2,255
   1c424:	1080201c 	xori	r2,r2,128
   1c428:	10bfe004 	addi	r2,r2,-128
   1c42c:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   1c430:	e0bffc17 	ldw	r2,-16(fp)
   1c434:	10800044 	addi	r2,r2,1
   1c438:	e0bffc15 	stw	r2,-16(fp)
   1c43c:	e0fffc17 	ldw	r3,-16(fp)
   1c440:	e0bfff17 	ldw	r2,-4(fp)
   1c444:	18bfee36 	bltu	r3,r2,1c400 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   1c448:	0001883a 	nop
   1c44c:	e037883a 	mov	sp,fp
   1c450:	df000017 	ldw	fp,0(sp)
   1c454:	dec00104 	addi	sp,sp,4
   1c458:	f800283a 	ret

0001c45c <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   1c45c:	defffd04 	addi	sp,sp,-12
   1c460:	df000215 	stw	fp,8(sp)
   1c464:	df000204 	addi	fp,sp,8
   1c468:	e13ffe15 	stw	r4,-8(fp)
   1c46c:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   1c470:	00000d06 	br	1c4a8 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   1c474:	e0bffe17 	ldw	r2,-8(fp)
   1c478:	10800a17 	ldw	r2,40(r2)
   1c47c:	10800044 	addi	r2,r2,1
   1c480:	1007883a 	mov	r3,r2
   1c484:	e0bfff17 	ldw	r2,-4(fp)
   1c488:	10800003 	ldbu	r2,0(r2)
   1c48c:	10803fcc 	andi	r2,r2,255
   1c490:	1080201c 	xori	r2,r2,128
   1c494:	10bfe004 	addi	r2,r2,-128
   1c498:	18800025 	stbio	r2,0(r3)
		++ptr;
   1c49c:	e0bfff17 	ldw	r2,-4(fp)
   1c4a0:	10800044 	addi	r2,r2,1
   1c4a4:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   1c4a8:	e0bfff17 	ldw	r2,-4(fp)
   1c4ac:	10800003 	ldbu	r2,0(r2)
   1c4b0:	10803fcc 	andi	r2,r2,255
   1c4b4:	1080201c 	xori	r2,r2,128
   1c4b8:	10bfe004 	addi	r2,r2,-128
   1c4bc:	103fed1e 	bne	r2,zero,1c474 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   1c4c0:	0001883a 	nop
   1c4c4:	e037883a 	mov	sp,fp
   1c4c8:	df000017 	ldw	fp,0(sp)
   1c4cc:	dec00104 	addi	sp,sp,4
   1c4d0:	f800283a 	ret

0001c4d4 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   1c4d4:	defffb04 	addi	sp,sp,-20
   1c4d8:	dfc00415 	stw	ra,16(sp)
   1c4dc:	df000315 	stw	fp,12(sp)
   1c4e0:	df000304 	addi	fp,sp,12
   1c4e4:	e13ffd15 	stw	r4,-12(fp)
   1c4e8:	e17ffe15 	stw	r5,-8(fp)
   1c4ec:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   1c4f0:	e0bffd17 	ldw	r2,-12(fp)
   1c4f4:	10800017 	ldw	r2,0(r2)
   1c4f8:	e0ffff17 	ldw	r3,-4(fp)
   1c4fc:	180d883a 	mov	r6,r3
   1c500:	e17ffe17 	ldw	r5,-8(fp)
   1c504:	1009883a 	mov	r4,r2
   1c508:	001c3e00 	call	1c3e0 <alt_up_character_lcd_write>
	return 0;
   1c50c:	0005883a 	mov	r2,zero
}
   1c510:	e037883a 	mov	sp,fp
   1c514:	dfc00117 	ldw	ra,4(sp)
   1c518:	df000017 	ldw	fp,0(sp)
   1c51c:	dec00204 	addi	sp,sp,8
   1c520:	f800283a 	ret

0001c524 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   1c524:	defffa04 	addi	sp,sp,-24
   1c528:	dfc00515 	stw	ra,20(sp)
   1c52c:	df000415 	stw	fp,16(sp)
   1c530:	df000404 	addi	fp,sp,16
   1c534:	e13ffd15 	stw	r4,-12(fp)
   1c538:	e17ffe15 	stw	r5,-8(fp)
   1c53c:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   1c540:	e0bffe17 	ldw	r2,-8(fp)
   1c544:	10800a28 	cmpgeui	r2,r2,40
   1c548:	1000031e 	bne	r2,zero,1c558 <alt_up_character_lcd_set_cursor_pos+0x34>
   1c54c:	e0bfff17 	ldw	r2,-4(fp)
   1c550:	108000b0 	cmpltui	r2,r2,2
   1c554:	1000021e 	bne	r2,zero,1c560 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   1c558:	00bfffc4 	movi	r2,-1
   1c55c:	00000906 	br	1c584 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1c560:	e17fff17 	ldw	r5,-4(fp)
   1c564:	e13ffe17 	ldw	r4,-8(fp)
   1c568:	001c2b80 	call	1c2b8 <get_DDRAM_addr>
   1c56c:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   1c570:	e0bffc03 	ldbu	r2,-16(fp)
   1c574:	100b883a 	mov	r5,r2
   1c578:	e13ffd17 	ldw	r4,-12(fp)
   1c57c:	001c32c0 	call	1c32c <alt_up_character_lcd_send_cmd>
	return 0;
   1c580:	0005883a 	mov	r2,zero
}
   1c584:	e037883a 	mov	sp,fp
   1c588:	dfc00117 	ldw	ra,4(sp)
   1c58c:	df000017 	ldw	fp,0(sp)
   1c590:	dec00204 	addi	sp,sp,8
   1c594:	f800283a 	ret

0001c598 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1c598:	defffb04 	addi	sp,sp,-20
   1c59c:	dfc00415 	stw	ra,16(sp)
   1c5a0:	df000315 	stw	fp,12(sp)
   1c5a4:	df000304 	addi	fp,sp,12
   1c5a8:	e13ffe15 	stw	r4,-8(fp)
   1c5ac:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   1c5b0:	e0bfff17 	ldw	r2,-4(fp)
   1c5b4:	10001526 	beq	r2,zero,1c60c <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1c5b8:	e0bfff17 	ldw	r2,-4(fp)
   1c5bc:	0080020e 	bge	zero,r2,1c5c8 <alt_up_character_lcd_shift_cursor+0x30>
   1c5c0:	00800504 	movi	r2,20
   1c5c4:	00000106 	br	1c5cc <alt_up_character_lcd_shift_cursor+0x34>
   1c5c8:	00800404 	movi	r2,16
   1c5cc:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1c5d0:	e0bfff17 	ldw	r2,-4(fp)
   1c5d4:	1000010e 	bge	r2,zero,1c5dc <alt_up_character_lcd_shift_cursor+0x44>
   1c5d8:	0085c83a 	sub	r2,zero,r2
   1c5dc:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1c5e0:	00000406 	br	1c5f4 <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1c5e4:	e0bffd43 	ldbu	r2,-11(fp)
   1c5e8:	100b883a 	mov	r5,r2
   1c5ec:	e13ffe17 	ldw	r4,-8(fp)
   1c5f0:	001c32c0 	call	1c32c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1c5f4:	e0bffd03 	ldbu	r2,-12(fp)
   1c5f8:	10ffffc4 	addi	r3,r2,-1
   1c5fc:	e0fffd05 	stb	r3,-12(fp)
   1c600:	10803fcc 	andi	r2,r2,255
   1c604:	103ff71e 	bne	r2,zero,1c5e4 <alt_up_character_lcd_shift_cursor+0x4c>
   1c608:	00000106 	br	1c610 <alt_up_character_lcd_shift_cursor+0x78>

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   1c60c:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   1c610:	e037883a 	mov	sp,fp
   1c614:	dfc00117 	ldw	ra,4(sp)
   1c618:	df000017 	ldw	fp,0(sp)
   1c61c:	dec00204 	addi	sp,sp,8
   1c620:	f800283a 	ret

0001c624 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1c624:	defffb04 	addi	sp,sp,-20
   1c628:	dfc00415 	stw	ra,16(sp)
   1c62c:	df000315 	stw	fp,12(sp)
   1c630:	df000304 	addi	fp,sp,12
   1c634:	e13ffe15 	stw	r4,-8(fp)
   1c638:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   1c63c:	e0bfff17 	ldw	r2,-4(fp)
   1c640:	10001526 	beq	r2,zero,1c698 <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1c644:	e0bfff17 	ldw	r2,-4(fp)
   1c648:	0080020e 	bge	zero,r2,1c654 <alt_up_character_lcd_shift_display+0x30>
   1c64c:	00800704 	movi	r2,28
   1c650:	00000106 	br	1c658 <alt_up_character_lcd_shift_display+0x34>
   1c654:	00800604 	movi	r2,24
   1c658:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1c65c:	e0bfff17 	ldw	r2,-4(fp)
   1c660:	1000010e 	bge	r2,zero,1c668 <alt_up_character_lcd_shift_display+0x44>
   1c664:	0085c83a 	sub	r2,zero,r2
   1c668:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1c66c:	00000406 	br	1c680 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1c670:	e0bffd43 	ldbu	r2,-11(fp)
   1c674:	100b883a 	mov	r5,r2
   1c678:	e13ffe17 	ldw	r4,-8(fp)
   1c67c:	001c32c0 	call	1c32c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1c680:	e0bffd03 	ldbu	r2,-12(fp)
   1c684:	10ffffc4 	addi	r3,r2,-1
   1c688:	e0fffd05 	stb	r3,-12(fp)
   1c68c:	10803fcc 	andi	r2,r2,255
   1c690:	103ff71e 	bne	r2,zero,1c670 <alt_up_character_lcd_shift_display+0x4c>
   1c694:	00000106 	br	1c69c <alt_up_character_lcd_shift_display+0x78>

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   1c698:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   1c69c:	e037883a 	mov	sp,fp
   1c6a0:	dfc00117 	ldw	ra,4(sp)
   1c6a4:	df000017 	ldw	fp,0(sp)
   1c6a8:	dec00204 	addi	sp,sp,8
   1c6ac:	f800283a 	ret

0001c6b0 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   1c6b0:	defffa04 	addi	sp,sp,-24
   1c6b4:	dfc00515 	stw	ra,20(sp)
   1c6b8:	df000415 	stw	fp,16(sp)
   1c6bc:	df000404 	addi	fp,sp,16
   1c6c0:	e13ffd15 	stw	r4,-12(fp)
   1c6c4:	e17ffe15 	stw	r5,-8(fp)
   1c6c8:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   1c6cc:	e0bffe17 	ldw	r2,-8(fp)
   1c6d0:	10800a28 	cmpgeui	r2,r2,40
   1c6d4:	1000031e 	bne	r2,zero,1c6e4 <alt_up_character_lcd_erase_pos+0x34>
   1c6d8:	e0bfff17 	ldw	r2,-4(fp)
   1c6dc:	108000b0 	cmpltui	r2,r2,2
   1c6e0:	1000021e 	bne	r2,zero,1c6ec <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   1c6e4:	00bfffc4 	movi	r2,-1
   1c6e8:	00000f06 	br	1c728 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1c6ec:	e17fff17 	ldw	r5,-4(fp)
   1c6f0:	e13ffe17 	ldw	r4,-8(fp)
   1c6f4:	001c2b80 	call	1c2b8 <get_DDRAM_addr>
   1c6f8:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   1c6fc:	e0bffc03 	ldbu	r2,-16(fp)
   1c700:	100b883a 	mov	r5,r2
   1c704:	e13ffd17 	ldw	r4,-12(fp)
   1c708:	001c32c0 	call	1c32c <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   1c70c:	e0bffd17 	ldw	r2,-12(fp)
   1c710:	10800a17 	ldw	r2,40(r2)
   1c714:	10800044 	addi	r2,r2,1
   1c718:	1007883a 	mov	r3,r2
   1c71c:	00800084 	movi	r2,2
   1c720:	18800025 	stbio	r2,0(r3)
	return 0;
   1c724:	0005883a 	mov	r2,zero
}
   1c728:	e037883a 	mov	sp,fp
   1c72c:	dfc00117 	ldw	ra,4(sp)
   1c730:	df000017 	ldw	fp,0(sp)
   1c734:	dec00204 	addi	sp,sp,8
   1c738:	f800283a 	ret

0001c73c <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   1c73c:	defffd04 	addi	sp,sp,-12
   1c740:	dfc00215 	stw	ra,8(sp)
   1c744:	df000115 	stw	fp,4(sp)
   1c748:	df000104 	addi	fp,sp,4
   1c74c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   1c750:	01400304 	movi	r5,12
   1c754:	e13fff17 	ldw	r4,-4(fp)
   1c758:	001c32c0 	call	1c32c <alt_up_character_lcd_send_cmd>
}
   1c75c:	0001883a 	nop
   1c760:	e037883a 	mov	sp,fp
   1c764:	dfc00117 	ldw	ra,4(sp)
   1c768:	df000017 	ldw	fp,0(sp)
   1c76c:	dec00204 	addi	sp,sp,8
   1c770:	f800283a 	ret

0001c774 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   1c774:	defffd04 	addi	sp,sp,-12
   1c778:	dfc00215 	stw	ra,8(sp)
   1c77c:	df000115 	stw	fp,4(sp)
   1c780:	df000104 	addi	fp,sp,4
   1c784:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   1c788:	014003c4 	movi	r5,15
   1c78c:	e13fff17 	ldw	r4,-4(fp)
   1c790:	001c32c0 	call	1c32c <alt_up_character_lcd_send_cmd>
}
   1c794:	0001883a 	nop
   1c798:	e037883a 	mov	sp,fp
   1c79c:	dfc00117 	ldw	ra,4(sp)
   1c7a0:	df000017 	ldw	fp,0(sp)
   1c7a4:	dec00204 	addi	sp,sp,8
   1c7a8:	f800283a 	ret

0001c7ac <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   1c7ac:	defffd04 	addi	sp,sp,-12
   1c7b0:	df000215 	stw	fp,8(sp)
   1c7b4:	df000204 	addi	fp,sp,8
   1c7b8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1c7bc:	e0bfff17 	ldw	r2,-4(fp)
   1c7c0:	10800a17 	ldw	r2,40(r2)
   1c7c4:	10800104 	addi	r2,r2,4
   1c7c8:	10800037 	ldwio	r2,0(r2)
   1c7cc:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   1c7d0:	e0bffe17 	ldw	r2,-8(fp)
   1c7d4:	10800054 	ori	r2,r2,1
   1c7d8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1c7dc:	e0bfff17 	ldw	r2,-4(fp)
   1c7e0:	10800a17 	ldw	r2,40(r2)
   1c7e4:	10800104 	addi	r2,r2,4
   1c7e8:	1007883a 	mov	r3,r2
   1c7ec:	e0bffe17 	ldw	r2,-8(fp)
   1c7f0:	18800035 	stwio	r2,0(r3)
}
   1c7f4:	0001883a 	nop
   1c7f8:	e037883a 	mov	sp,fp
   1c7fc:	df000017 	ldw	fp,0(sp)
   1c800:	dec00104 	addi	sp,sp,4
   1c804:	f800283a 	ret

0001c808 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   1c808:	defffd04 	addi	sp,sp,-12
   1c80c:	df000215 	stw	fp,8(sp)
   1c810:	df000204 	addi	fp,sp,8
   1c814:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1c818:	e0bfff17 	ldw	r2,-4(fp)
   1c81c:	10800a17 	ldw	r2,40(r2)
   1c820:	10800104 	addi	r2,r2,4
   1c824:	10800037 	ldwio	r2,0(r2)
   1c828:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   1c82c:	e0fffe17 	ldw	r3,-8(fp)
   1c830:	00bfff84 	movi	r2,-2
   1c834:	1884703a 	and	r2,r3,r2
   1c838:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1c83c:	e0bfff17 	ldw	r2,-4(fp)
   1c840:	10800a17 	ldw	r2,40(r2)
   1c844:	10800104 	addi	r2,r2,4
   1c848:	1007883a 	mov	r3,r2
   1c84c:	e0bffe17 	ldw	r2,-8(fp)
   1c850:	18800035 	stwio	r2,0(r3)
}
   1c854:	0001883a 	nop
   1c858:	e037883a 	mov	sp,fp
   1c85c:	df000017 	ldw	fp,0(sp)
   1c860:	dec00104 	addi	sp,sp,4
   1c864:	f800283a 	ret

0001c868 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   1c868:	defffd04 	addi	sp,sp,-12
   1c86c:	df000215 	stw	fp,8(sp)
   1c870:	df000204 	addi	fp,sp,8
   1c874:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1c878:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   1c87c:	e0bfff17 	ldw	r2,-4(fp)
   1c880:	10800a17 	ldw	r2,40(r2)
   1c884:	10800084 	addi	r2,r2,2
   1c888:	1080002b 	ldhuio	r2,0(r2)
   1c88c:	10bfffcc 	andi	r2,r2,65535
   1c890:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   1c894:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1c898:	e037883a 	mov	sp,fp
   1c89c:	df000017 	ldw	fp,0(sp)
   1c8a0:	dec00104 	addi	sp,sp,4
   1c8a4:	f800283a 	ret

0001c8a8 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   1c8a8:	defffd04 	addi	sp,sp,-12
   1c8ac:	df000215 	stw	fp,8(sp)
   1c8b0:	df000204 	addi	fp,sp,8
   1c8b4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1c8b8:	e0bfff17 	ldw	r2,-4(fp)
   1c8bc:	10800a17 	ldw	r2,40(r2)
   1c8c0:	10800104 	addi	r2,r2,4
   1c8c4:	10800037 	ldwio	r2,0(r2)
   1c8c8:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   1c8cc:	e0bffe17 	ldw	r2,-8(fp)
   1c8d0:	1004d43a 	srli	r2,r2,16
}
   1c8d4:	e037883a 	mov	sp,fp
   1c8d8:	df000017 	ldw	fp,0(sp)
   1c8dc:	dec00104 	addi	sp,sp,4
   1c8e0:	f800283a 	ret

0001c8e4 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   1c8e4:	defffd04 	addi	sp,sp,-12
   1c8e8:	df000215 	stw	fp,8(sp)
   1c8ec:	df000204 	addi	fp,sp,8
   1c8f0:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   1c8f4:	e0bfff17 	ldw	r2,-4(fp)
   1c8f8:	1080800c 	andi	r2,r2,512
   1c8fc:	1004d27a 	srli	r2,r2,9
   1c900:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1c904:	e0bffe17 	ldw	r2,-8(fp)
   1c908:	10000226 	beq	r2,zero,1c914 <alt_up_irda_check_parity+0x30>
   1c90c:	00bfffc4 	movi	r2,-1
   1c910:	00000106 	br	1c918 <alt_up_irda_check_parity+0x34>
   1c914:	0005883a 	mov	r2,zero
}
   1c918:	e037883a 	mov	sp,fp
   1c91c:	df000017 	ldw	fp,0(sp)
   1c920:	dec00104 	addi	sp,sp,4
   1c924:	f800283a 	ret

0001c928 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   1c928:	defffd04 	addi	sp,sp,-12
   1c92c:	df000215 	stw	fp,8(sp)
   1c930:	df000204 	addi	fp,sp,8
   1c934:	e13ffe15 	stw	r4,-8(fp)
   1c938:	2805883a 	mov	r2,r5
   1c93c:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   1c940:	e0bffe17 	ldw	r2,-8(fp)
   1c944:	10800a17 	ldw	r2,40(r2)
   1c948:	1007883a 	mov	r3,r2
   1c94c:	e0bfff03 	ldbu	r2,-4(fp)
   1c950:	18800035 	stwio	r2,0(r3)
	return 0;
   1c954:	0005883a 	mov	r2,zero
}
   1c958:	e037883a 	mov	sp,fp
   1c95c:	df000017 	ldw	fp,0(sp)
   1c960:	dec00104 	addi	sp,sp,4
   1c964:	f800283a 	ret

0001c968 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   1c968:	defffa04 	addi	sp,sp,-24
   1c96c:	dfc00515 	stw	ra,20(sp)
   1c970:	df000415 	stw	fp,16(sp)
   1c974:	df000404 	addi	fp,sp,16
   1c978:	e13ffd15 	stw	r4,-12(fp)
   1c97c:	e17ffe15 	stw	r5,-8(fp)
   1c980:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   1c984:	e0bffd17 	ldw	r2,-12(fp)
   1c988:	10800a17 	ldw	r2,40(r2)
   1c98c:	10800037 	ldwio	r2,0(r2)
   1c990:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   1c994:	e0bffc17 	ldw	r2,-16(fp)
   1c998:	1007883a 	mov	r3,r2
   1c99c:	e0bffe17 	ldw	r2,-8(fp)
   1c9a0:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   1c9a4:	e13ffc17 	ldw	r4,-16(fp)
   1c9a8:	001c8e40 	call	1c8e4 <alt_up_irda_check_parity>
   1c9ac:	1007883a 	mov	r3,r2
   1c9b0:	e0bfff17 	ldw	r2,-4(fp)
   1c9b4:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   1c9b8:	e0bffc17 	ldw	r2,-16(fp)
   1c9bc:	10a0000c 	andi	r2,r2,32768
   1c9c0:	1004d3fa 	srli	r2,r2,15
   1c9c4:	10bfffc4 	addi	r2,r2,-1
}
   1c9c8:	e037883a 	mov	sp,fp
   1c9cc:	dfc00117 	ldw	ra,4(sp)
   1c9d0:	df000017 	ldw	fp,0(sp)
   1c9d4:	dec00204 	addi	sp,sp,8
   1c9d8:	f800283a 	ret

0001c9dc <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   1c9dc:	defff804 	addi	sp,sp,-32
   1c9e0:	dfc00715 	stw	ra,28(sp)
   1c9e4:	df000615 	stw	fp,24(sp)
   1c9e8:	df000604 	addi	fp,sp,24
   1c9ec:	e13ffd15 	stw	r4,-12(fp)
   1c9f0:	e17ffe15 	stw	r5,-8(fp)
   1c9f4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1c9f8:	e0bffd17 	ldw	r2,-12(fp)
   1c9fc:	10800017 	ldw	r2,0(r2)
   1ca00:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1ca04:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1ca08:	00000c06 	br	1ca3c <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   1ca0c:	e0bffe17 	ldw	r2,-8(fp)
   1ca10:	10c00044 	addi	r3,r2,1
   1ca14:	e0fffe15 	stw	r3,-8(fp)
   1ca18:	e0fffc04 	addi	r3,fp,-16
   1ca1c:	180d883a 	mov	r6,r3
   1ca20:	100b883a 	mov	r5,r2
   1ca24:	e13ffb17 	ldw	r4,-20(fp)
   1ca28:	001c9680 	call	1c968 <alt_up_irda_read_data>
   1ca2c:	1000081e 	bne	r2,zero,1ca50 <alt_up_irda_read_fd+0x74>
			count++;
   1ca30:	e0bffa17 	ldw	r2,-24(fp)
   1ca34:	10800044 	addi	r2,r2,1
   1ca38:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1ca3c:	e0bfff17 	ldw	r2,-4(fp)
   1ca40:	10ffffc4 	addi	r3,r2,-1
   1ca44:	e0ffff15 	stw	r3,-4(fp)
   1ca48:	103ff01e 	bne	r2,zero,1ca0c <alt_up_irda_read_fd+0x30>
   1ca4c:	00000106 	br	1ca54 <alt_up_irda_read_fd+0x78>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   1ca50:	0001883a 	nop
	}
	return count;
   1ca54:	e0bffa17 	ldw	r2,-24(fp)
}
   1ca58:	e037883a 	mov	sp,fp
   1ca5c:	dfc00117 	ldw	ra,4(sp)
   1ca60:	df000017 	ldw	fp,0(sp)
   1ca64:	dec00204 	addi	sp,sp,8
   1ca68:	f800283a 	ret

0001ca6c <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1ca6c:	defff904 	addi	sp,sp,-28
   1ca70:	dfc00615 	stw	ra,24(sp)
   1ca74:	df000515 	stw	fp,20(sp)
   1ca78:	df000504 	addi	fp,sp,20
   1ca7c:	e13ffd15 	stw	r4,-12(fp)
   1ca80:	e17ffe15 	stw	r5,-8(fp)
   1ca84:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1ca88:	e0bffd17 	ldw	r2,-12(fp)
   1ca8c:	10800017 	ldw	r2,0(r2)
   1ca90:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1ca94:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1ca98:	00000c06 	br	1cacc <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   1ca9c:	e0bffe17 	ldw	r2,-8(fp)
   1caa0:	10c00044 	addi	r3,r2,1
   1caa4:	e0fffe15 	stw	r3,-8(fp)
   1caa8:	10800003 	ldbu	r2,0(r2)
   1caac:	10803fcc 	andi	r2,r2,255
   1cab0:	100b883a 	mov	r5,r2
   1cab4:	e13ffc17 	ldw	r4,-16(fp)
   1cab8:	001c9280 	call	1c928 <alt_up_irda_write_data>
   1cabc:	1000081e 	bne	r2,zero,1cae0 <alt_up_irda_write_fd+0x74>
			count++;
   1cac0:	e0bffb17 	ldw	r2,-20(fp)
   1cac4:	10800044 	addi	r2,r2,1
   1cac8:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   1cacc:	e0bfff17 	ldw	r2,-4(fp)
   1cad0:	10ffffc4 	addi	r3,r2,-1
   1cad4:	e0ffff15 	stw	r3,-4(fp)
   1cad8:	103ff01e 	bne	r2,zero,1ca9c <alt_up_irda_write_fd+0x30>
   1cadc:	00000106 	br	1cae4 <alt_up_irda_write_fd+0x78>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
   1cae0:	0001883a 	nop
	}
	return count;
   1cae4:	e0bffb17 	ldw	r2,-20(fp)
}
   1cae8:	e037883a 	mov	sp,fp
   1caec:	dfc00117 	ldw	ra,4(sp)
   1caf0:	df000017 	ldw	fp,0(sp)
   1caf4:	dec00204 	addi	sp,sp,8
   1caf8:	f800283a 	ret

0001cafc <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   1cafc:	defffc04 	addi	sp,sp,-16
   1cb00:	dfc00315 	stw	ra,12(sp)
   1cb04:	df000215 	stw	fp,8(sp)
   1cb08:	df000204 	addi	fp,sp,8
   1cb0c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   1cb10:	d1600904 	addi	r5,gp,-32732
   1cb14:	e13fff17 	ldw	r4,-4(fp)
   1cb18:	001d8640 	call	1d864 <alt_find_dev>
   1cb1c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1cb20:	e0bffe17 	ldw	r2,-8(fp)
}
   1cb24:	e037883a 	mov	sp,fp
   1cb28:	dfc00117 	ldw	ra,4(sp)
   1cb2c:	df000017 	ldw	fp,0(sp)
   1cb30:	dec00204 	addi	sp,sp,8
   1cb34:	f800283a 	ret

0001cb38 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   1cb38:	defffd04 	addi	sp,sp,-12
   1cb3c:	df000215 	stw	fp,8(sp)
   1cb40:	df000204 	addi	fp,sp,8
   1cb44:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   1cb48:	e0bfff17 	ldw	r2,-4(fp)
   1cb4c:	1080400c 	andi	r2,r2,256
   1cb50:	1004d23a 	srli	r2,r2,8
   1cb54:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   1cb58:	e0bffe03 	ldbu	r2,-8(fp)
}
   1cb5c:	e037883a 	mov	sp,fp
   1cb60:	df000017 	ldw	fp,0(sp)
   1cb64:	dec00104 	addi	sp,sp,4
   1cb68:	f800283a 	ret

0001cb6c <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   1cb6c:	defffd04 	addi	sp,sp,-12
   1cb70:	df000215 	stw	fp,8(sp)
   1cb74:	df000204 	addi	fp,sp,8
   1cb78:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   1cb7c:	e0bfff17 	ldw	r2,-4(fp)
   1cb80:	1080004c 	andi	r2,r2,1
   1cb84:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1cb88:	e0bffe03 	ldbu	r2,-8(fp)
}
   1cb8c:	e037883a 	mov	sp,fp
   1cb90:	df000017 	ldw	fp,0(sp)
   1cb94:	dec00104 	addi	sp,sp,4
   1cb98:	f800283a 	ret

0001cb9c <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   1cb9c:	defffd04 	addi	sp,sp,-12
   1cba0:	df000215 	stw	fp,8(sp)
   1cba4:	df000204 	addi	fp,sp,8
   1cba8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   1cbac:	e0bfff17 	ldw	r2,-4(fp)
   1cbb0:	1081000c 	andi	r2,r2,1024
   1cbb4:	1004d2ba 	srli	r2,r2,10
   1cbb8:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1cbbc:	e0bffe03 	ldbu	r2,-8(fp)
}
   1cbc0:	e037883a 	mov	sp,fp
   1cbc4:	df000017 	ldw	fp,0(sp)
   1cbc8:	dec00104 	addi	sp,sp,4
   1cbcc:	f800283a 	ret

0001cbd0 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   1cbd0:	defffd04 	addi	sp,sp,-12
   1cbd4:	df000215 	stw	fp,8(sp)
   1cbd8:	df000204 	addi	fp,sp,8
   1cbdc:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   1cbe0:	e0bfff17 	ldw	r2,-4(fp)
   1cbe4:	1004d43a 	srli	r2,r2,16
   1cbe8:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   1cbec:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1cbf0:	e037883a 	mov	sp,fp
   1cbf4:	df000017 	ldw	fp,0(sp)
   1cbf8:	dec00104 	addi	sp,sp,4
   1cbfc:	f800283a 	ret

0001cc00 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   1cc00:	defffd04 	addi	sp,sp,-12
   1cc04:	df000215 	stw	fp,8(sp)
   1cc08:	df000204 	addi	fp,sp,8
   1cc0c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   1cc10:	e0bfff17 	ldw	r2,-4(fp)
   1cc14:	10a0000c 	andi	r2,r2,32768
   1cc18:	1004d3fa 	srli	r2,r2,15
   1cc1c:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   1cc20:	e0bffe03 	ldbu	r2,-8(fp)
}
   1cc24:	e037883a 	mov	sp,fp
   1cc28:	df000017 	ldw	fp,0(sp)
   1cc2c:	dec00104 	addi	sp,sp,4
   1cc30:	f800283a 	ret

0001cc34 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   1cc34:	defffd04 	addi	sp,sp,-12
   1cc38:	df000215 	stw	fp,8(sp)
   1cc3c:	df000204 	addi	fp,sp,8
   1cc40:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   1cc44:	e0bfff17 	ldw	r2,-4(fp)
   1cc48:	e0bffe05 	stb	r2,-8(fp)
	return data;
   1cc4c:	e0bffe03 	ldbu	r2,-8(fp)
}
   1cc50:	e037883a 	mov	sp,fp
   1cc54:	df000017 	ldw	fp,0(sp)
   1cc58:	dec00104 	addi	sp,sp,4
   1cc5c:	f800283a 	ret

0001cc60 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   1cc60:	defffb04 	addi	sp,sp,-20
   1cc64:	dfc00415 	stw	ra,16(sp)
   1cc68:	df000315 	stw	fp,12(sp)
   1cc6c:	df000304 	addi	fp,sp,12
   1cc70:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   1cc74:	01403fc4 	movi	r5,255
   1cc78:	e13fff17 	ldw	r4,-4(fp)
   1cc7c:	001cec00 	call	1cec0 <alt_up_ps2_write_data_byte_with_ack>
   1cc80:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   1cc84:	e0bffd17 	ldw	r2,-12(fp)
   1cc88:	1000211e 	bne	r2,zero,1cd10 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1cc8c:	e0bffe04 	addi	r2,fp,-8
   1cc90:	100b883a 	mov	r5,r2
   1cc94:	e13fff17 	ldw	r4,-4(fp)
   1cc98:	001cf240 	call	1cf24 <alt_up_ps2_read_data_byte_timeout>
   1cc9c:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   1cca0:	e0bffd17 	ldw	r2,-12(fp)
   1cca4:	10001a1e 	bne	r2,zero,1cd10 <alt_up_ps2_init+0xb0>
   1cca8:	e0bffe03 	ldbu	r2,-8(fp)
   1ccac:	10803fcc 	andi	r2,r2,255
   1ccb0:	10802a98 	cmpnei	r2,r2,170
   1ccb4:	1000161e 	bne	r2,zero,1cd10 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1ccb8:	e0bffe04 	addi	r2,fp,-8
   1ccbc:	100b883a 	mov	r5,r2
   1ccc0:	e13fff17 	ldw	r4,-4(fp)
   1ccc4:	001cf240 	call	1cf24 <alt_up_ps2_read_data_byte_timeout>
   1ccc8:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   1cccc:	e0bffd17 	ldw	r2,-12(fp)
   1ccd0:	10bfe318 	cmpnei	r2,r2,-116
   1ccd4:	1000041e 	bne	r2,zero,1cce8 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   1ccd8:	e0bfff17 	ldw	r2,-4(fp)
   1ccdc:	00c00044 	movi	r3,1
   1cce0:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
   1cce4:	00000a06 	br	1cd10 <alt_up_ps2_init+0xb0>
			if (status == -ETIMEDOUT)
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
			}
			else if (status == 0 && byte == 0x00)
   1cce8:	e0bffd17 	ldw	r2,-12(fp)
   1ccec:	1000081e 	bne	r2,zero,1cd10 <alt_up_ps2_init+0xb0>
   1ccf0:	e0bffe03 	ldbu	r2,-8(fp)
   1ccf4:	10803fcc 	andi	r2,r2,255
   1ccf8:	1000051e 	bne	r2,zero,1cd10 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   1ccfc:	e0bfff17 	ldw	r2,-4(fp)
   1cd00:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   1cd04:	01403d04 	movi	r5,244
   1cd08:	e13fff17 	ldw	r4,-4(fp)
   1cd0c:	001cde40 	call	1cde4 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   1cd10:	0001883a 	nop
   1cd14:	e037883a 	mov	sp,fp
   1cd18:	dfc00117 	ldw	ra,4(sp)
   1cd1c:	df000017 	ldw	fp,0(sp)
   1cd20:	dec00204 	addi	sp,sp,8
   1cd24:	f800283a 	ret

0001cd28 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1cd28:	defffd04 	addi	sp,sp,-12
   1cd2c:	df000215 	stw	fp,8(sp)
   1cd30:	df000204 	addi	fp,sp,8
   1cd34:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1cd38:	e0bfff17 	ldw	r2,-4(fp)
   1cd3c:	10800a17 	ldw	r2,40(r2)
   1cd40:	10800104 	addi	r2,r2,4
   1cd44:	10800037 	ldwio	r2,0(r2)
   1cd48:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1cd4c:	e0bffe17 	ldw	r2,-8(fp)
   1cd50:	10800054 	ori	r2,r2,1
   1cd54:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1cd58:	e0bfff17 	ldw	r2,-4(fp)
   1cd5c:	10800a17 	ldw	r2,40(r2)
   1cd60:	10800104 	addi	r2,r2,4
   1cd64:	1007883a 	mov	r3,r2
   1cd68:	e0bffe17 	ldw	r2,-8(fp)
   1cd6c:	18800035 	stwio	r2,0(r3)
}
   1cd70:	0001883a 	nop
   1cd74:	e037883a 	mov	sp,fp
   1cd78:	df000017 	ldw	fp,0(sp)
   1cd7c:	dec00104 	addi	sp,sp,4
   1cd80:	f800283a 	ret

0001cd84 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1cd84:	defffd04 	addi	sp,sp,-12
   1cd88:	df000215 	stw	fp,8(sp)
   1cd8c:	df000204 	addi	fp,sp,8
   1cd90:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1cd94:	e0bfff17 	ldw	r2,-4(fp)
   1cd98:	10800a17 	ldw	r2,40(r2)
   1cd9c:	10800104 	addi	r2,r2,4
   1cda0:	10800037 	ldwio	r2,0(r2)
   1cda4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1cda8:	e0fffe17 	ldw	r3,-8(fp)
   1cdac:	00bfff84 	movi	r2,-2
   1cdb0:	1884703a 	and	r2,r3,r2
   1cdb4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1cdb8:	e0bfff17 	ldw	r2,-4(fp)
   1cdbc:	10800a17 	ldw	r2,40(r2)
   1cdc0:	10800104 	addi	r2,r2,4
   1cdc4:	1007883a 	mov	r3,r2
   1cdc8:	e0bffe17 	ldw	r2,-8(fp)
   1cdcc:	18800035 	stwio	r2,0(r3)
}
   1cdd0:	0001883a 	nop
   1cdd4:	e037883a 	mov	sp,fp
   1cdd8:	df000017 	ldw	fp,0(sp)
   1cddc:	dec00104 	addi	sp,sp,4
   1cde0:	f800283a 	ret

0001cde4 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1cde4:	defffb04 	addi	sp,sp,-20
   1cde8:	dfc00415 	stw	ra,16(sp)
   1cdec:	df000315 	stw	fp,12(sp)
   1cdf0:	df000304 	addi	fp,sp,12
   1cdf4:	e13ffe15 	stw	r4,-8(fp)
   1cdf8:	2805883a 	mov	r2,r5
   1cdfc:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   1ce00:	e0bffe17 	ldw	r2,-8(fp)
   1ce04:	10800a17 	ldw	r2,40(r2)
   1ce08:	1007883a 	mov	r3,r2
   1ce0c:	e0bfff03 	ldbu	r2,-4(fp)
   1ce10:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   1ce14:	e0bffe17 	ldw	r2,-8(fp)
   1ce18:	10800a17 	ldw	r2,40(r2)
   1ce1c:	10800104 	addi	r2,r2,4
   1ce20:	10800037 	ldwio	r2,0(r2)
   1ce24:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   1ce28:	e13ffd17 	ldw	r4,-12(fp)
   1ce2c:	001cb9c0 	call	1cb9c <read_CE_bit>
   1ce30:	10803fcc 	andi	r2,r2,255
   1ce34:	10000226 	beq	r2,zero,1ce40 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   1ce38:	00bffec4 	movi	r2,-5
   1ce3c:	00000106 	br	1ce44 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   1ce40:	0005883a 	mov	r2,zero
}
   1ce44:	e037883a 	mov	sp,fp
   1ce48:	dfc00117 	ldw	ra,4(sp)
   1ce4c:	df000017 	ldw	fp,0(sp)
   1ce50:	dec00204 	addi	sp,sp,8
   1ce54:	f800283a 	ret

0001ce58 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   1ce58:	defffc04 	addi	sp,sp,-16
   1ce5c:	dfc00315 	stw	ra,12(sp)
   1ce60:	df000215 	stw	fp,8(sp)
   1ce64:	df000204 	addi	fp,sp,8
   1ce68:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   1ce6c:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   1ce70:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   1ce74:	e0bffe44 	addi	r2,fp,-7
   1ce78:	100b883a 	mov	r5,r2
   1ce7c:	e13fff17 	ldw	r4,-4(fp)
   1ce80:	001cf240 	call	1cf24 <alt_up_ps2_read_data_byte_timeout>
   1ce84:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   1ce88:	e0bffe03 	ldbu	r2,-8(fp)
   1ce8c:	1000061e 	bne	r2,zero,1cea8 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   1ce90:	e0bffe43 	ldbu	r2,-7(fp)
   1ce94:	10803fcc 	andi	r2,r2,255
   1ce98:	10803e98 	cmpnei	r2,r2,250
   1ce9c:	103ff51e 	bne	r2,zero,1ce74 <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
   1cea0:	0005883a 	mov	r2,zero
   1cea4:	00000106 	br	1ceac <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
   1cea8:	e0bffe03 	ldbu	r2,-8(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
   1ceac:	e037883a 	mov	sp,fp
   1ceb0:	dfc00117 	ldw	ra,4(sp)
   1ceb4:	df000017 	ldw	fp,0(sp)
   1ceb8:	dec00204 	addi	sp,sp,8
   1cebc:	f800283a 	ret

0001cec0 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1cec0:	defffa04 	addi	sp,sp,-24
   1cec4:	dfc00515 	stw	ra,20(sp)
   1cec8:	df000415 	stw	fp,16(sp)
   1cecc:	df000404 	addi	fp,sp,16
   1ced0:	e13ffe15 	stw	r4,-8(fp)
   1ced4:	2805883a 	mov	r2,r5
   1ced8:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   1cedc:	e0bfff03 	ldbu	r2,-4(fp)
   1cee0:	100b883a 	mov	r5,r2
   1cee4:	e13ffe17 	ldw	r4,-8(fp)
   1cee8:	001cde40 	call	1cde4 <alt_up_ps2_write_data_byte>
   1ceec:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   1cef0:	e0bffc17 	ldw	r2,-16(fp)
   1cef4:	10000226 	beq	r2,zero,1cf00 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   1cef8:	e0bffc17 	ldw	r2,-16(fp)
   1cefc:	00000406 	br	1cf10 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   1cf00:	e13ffe17 	ldw	r4,-8(fp)
   1cf04:	001ce580 	call	1ce58 <alt_up_ps2_wait_for_ack>
   1cf08:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   1cf0c:	e0bffd17 	ldw	r2,-12(fp)
}
   1cf10:	e037883a 	mov	sp,fp
   1cf14:	dfc00117 	ldw	ra,4(sp)
   1cf18:	df000017 	ldw	fp,0(sp)
   1cf1c:	dec00204 	addi	sp,sp,8
   1cf20:	f800283a 	ret

0001cf24 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1cf24:	defffa04 	addi	sp,sp,-24
   1cf28:	dfc00515 	stw	ra,20(sp)
   1cf2c:	df000415 	stw	fp,16(sp)
   1cf30:	df000404 	addi	fp,sp,16
   1cf34:	e13ffe15 	stw	r4,-8(fp)
   1cf38:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1cf3c:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   1cf40:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   1cf44:	e0bffc17 	ldw	r2,-16(fp)
   1cf48:	10800044 	addi	r2,r2,1
   1cf4c:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1cf50:	e0bffe17 	ldw	r2,-8(fp)
   1cf54:	10800a17 	ldw	r2,40(r2)
   1cf58:	10800037 	ldwio	r2,0(r2)
   1cf5c:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   1cf60:	e13ffd17 	ldw	r4,-12(fp)
   1cf64:	001cc000 	call	1cc00 <read_data_valid>
   1cf68:	10803fcc 	andi	r2,r2,255
   1cf6c:	10000726 	beq	r2,zero,1cf8c <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   1cf70:	e13ffd17 	ldw	r4,-12(fp)
   1cf74:	001cc340 	call	1cc34 <read_data_byte>
   1cf78:	1007883a 	mov	r3,r2
   1cf7c:	e0bfff17 	ldw	r2,-4(fp)
   1cf80:	10c00005 	stb	r3,0(r2)
			return 0;
   1cf84:	0005883a 	mov	r2,zero
   1cf88:	00000806 	br	1cfac <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   1cf8c:	e0bffe17 	ldw	r2,-8(fp)
   1cf90:	10800c17 	ldw	r2,48(r2)
   1cf94:	103feb26 	beq	r2,zero,1cf44 <alt_up_ps2_read_data_byte_timeout+0x20>
   1cf98:	e0bffe17 	ldw	r2,-8(fp)
   1cf9c:	10c00c17 	ldw	r3,48(r2)
   1cfa0:	e0bffc17 	ldw	r2,-16(fp)
   1cfa4:	18bfe72e 	bgeu	r3,r2,1cf44 <alt_up_ps2_read_data_byte_timeout+0x20>
		{
			return -ETIMEDOUT;
   1cfa8:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
   1cfac:	e037883a 	mov	sp,fp
   1cfb0:	dfc00117 	ldw	ra,4(sp)
   1cfb4:	df000017 	ldw	fp,0(sp)
   1cfb8:	dec00204 	addi	sp,sp,8
   1cfbc:	f800283a 	ret

0001cfc0 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1cfc0:	defffb04 	addi	sp,sp,-20
   1cfc4:	dfc00415 	stw	ra,16(sp)
   1cfc8:	df000315 	stw	fp,12(sp)
   1cfcc:	df000304 	addi	fp,sp,12
   1cfd0:	e13ffe15 	stw	r4,-8(fp)
   1cfd4:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1cfd8:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1cfdc:	e0bffe17 	ldw	r2,-8(fp)
   1cfe0:	10800a17 	ldw	r2,40(r2)
   1cfe4:	10800037 	ldwio	r2,0(r2)
   1cfe8:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   1cfec:	e13ffd17 	ldw	r4,-12(fp)
   1cff0:	001cc000 	call	1cc00 <read_data_valid>
   1cff4:	10803fcc 	andi	r2,r2,255
   1cff8:	10000726 	beq	r2,zero,1d018 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   1cffc:	e13ffd17 	ldw	r4,-12(fp)
   1d000:	001cc340 	call	1cc34 <read_data_byte>
   1d004:	1007883a 	mov	r3,r2
   1d008:	e0bfff17 	ldw	r2,-4(fp)
   1d00c:	10c00005 	stb	r3,0(r2)
		return 0;
   1d010:	0005883a 	mov	r2,zero
   1d014:	00000106 	br	1d01c <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   1d018:	00bfffc4 	movi	r2,-1
}
   1d01c:	e037883a 	mov	sp,fp
   1d020:	dfc00117 	ldw	ra,4(sp)
   1d024:	df000017 	ldw	fp,0(sp)
   1d028:	dec00204 	addi	sp,sp,8
   1d02c:	f800283a 	ret

0001d030 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   1d030:	defffb04 	addi	sp,sp,-20
   1d034:	dfc00415 	stw	ra,16(sp)
   1d038:	df000315 	stw	fp,12(sp)
   1d03c:	df000304 	addi	fp,sp,12
   1d040:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   1d044:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   1d048:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1d04c:	e0bfff17 	ldw	r2,-4(fp)
   1d050:	10800a17 	ldw	r2,40(r2)
   1d054:	10800037 	ldwio	r2,0(r2)
   1d058:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   1d05c:	e13ffe17 	ldw	r4,-8(fp)
   1d060:	001cbd00 	call	1cbd0 <read_num_bytes_available>
   1d064:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   1d068:	e0bffd0b 	ldhu	r2,-12(fp)
   1d06c:	103ff71e 	bne	r2,zero,1d04c <alt_up_ps2_clear_fifo+0x1c>
}
   1d070:	0001883a 	nop
   1d074:	e037883a 	mov	sp,fp
   1d078:	dfc00117 	ldw	ra,4(sp)
   1d07c:	df000017 	ldw	fp,0(sp)
   1d080:	dec00204 	addi	sp,sp,8
   1d084:	f800283a 	ret

0001d088 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   1d088:	defff804 	addi	sp,sp,-32
   1d08c:	dfc00715 	stw	ra,28(sp)
   1d090:	df000615 	stw	fp,24(sp)
   1d094:	df000604 	addi	fp,sp,24
   1d098:	e13ffd15 	stw	r4,-12(fp)
   1d09c:	e17ffe15 	stw	r5,-8(fp)
   1d0a0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1d0a4:	e0bffd17 	ldw	r2,-12(fp)
   1d0a8:	10800017 	ldw	r2,0(r2)
   1d0ac:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   1d0b0:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   1d0b4:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   1d0b8:	e0fffc17 	ldw	r3,-16(fp)
   1d0bc:	e0bfff17 	ldw	r2,-4(fp)
   1d0c0:	18bffd16 	blt	r3,r2,1d0b8 <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   1d0c4:	e0bffe17 	ldw	r2,-8(fp)
   1d0c8:	10c00044 	addi	r3,r2,1
   1d0cc:	e0fffe15 	stw	r3,-8(fp)
   1d0d0:	100b883a 	mov	r5,r2
   1d0d4:	e13ffa17 	ldw	r4,-24(fp)
   1d0d8:	001cf240 	call	1cf24 <alt_up_ps2_read_data_byte_timeout>
   1d0dc:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   1d0e0:	e0bffb17 	ldw	r2,-20(fp)
   1d0e4:	10000226 	beq	r2,zero,1d0f0 <alt_up_ps2_read_fd+0x68>
			return count;
   1d0e8:	e0bffc17 	ldw	r2,-16(fp)
   1d0ec:	00000406 	br	1d100 <alt_up_ps2_read_fd+0x78>
		count++;
   1d0f0:	e0bffc17 	ldw	r2,-16(fp)
   1d0f4:	10800044 	addi	r2,r2,1
   1d0f8:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   1d0fc:	e0bffc17 	ldw	r2,-16(fp)
}
   1d100:	e037883a 	mov	sp,fp
   1d104:	dfc00117 	ldw	ra,4(sp)
   1d108:	df000017 	ldw	fp,0(sp)
   1d10c:	dec00204 	addi	sp,sp,8
   1d110:	f800283a 	ret

0001d114 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1d114:	defff804 	addi	sp,sp,-32
   1d118:	dfc00715 	stw	ra,28(sp)
   1d11c:	df000615 	stw	fp,24(sp)
   1d120:	df000604 	addi	fp,sp,24
   1d124:	e13ffd15 	stw	r4,-12(fp)
   1d128:	e17ffe15 	stw	r5,-8(fp)
   1d12c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1d130:	e0bffd17 	ldw	r2,-12(fp)
   1d134:	10800017 	ldw	r2,0(r2)
   1d138:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   1d13c:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   1d140:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   1d144:	00001006 	br	1d188 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   1d148:	e0bffe17 	ldw	r2,-8(fp)
   1d14c:	10c00044 	addi	r3,r2,1
   1d150:	e0fffe15 	stw	r3,-8(fp)
   1d154:	10800003 	ldbu	r2,0(r2)
   1d158:	10803fcc 	andi	r2,r2,255
   1d15c:	100b883a 	mov	r5,r2
   1d160:	e13ffb17 	ldw	r4,-20(fp)
   1d164:	001cde40 	call	1cde4 <alt_up_ps2_write_data_byte>
   1d168:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   1d16c:	e0bffc17 	ldw	r2,-16(fp)
   1d170:	10000226 	beq	r2,zero,1d17c <alt_up_ps2_write_fd+0x68>
			return count;
   1d174:	e0bffa17 	ldw	r2,-24(fp)
   1d178:	00000706 	br	1d198 <alt_up_ps2_write_fd+0x84>
		count++;
   1d17c:	e0bffa17 	ldw	r2,-24(fp)
   1d180:	10800044 	addi	r2,r2,1
   1d184:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   1d188:	e0fffa17 	ldw	r3,-24(fp)
   1d18c:	e0bfff17 	ldw	r2,-4(fp)
   1d190:	18bfed16 	blt	r3,r2,1d148 <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   1d194:	e0bffa17 	ldw	r2,-24(fp)
}
   1d198:	e037883a 	mov	sp,fp
   1d19c:	dfc00117 	ldw	ra,4(sp)
   1d1a0:	df000017 	ldw	fp,0(sp)
   1d1a4:	dec00204 	addi	sp,sp,8
   1d1a8:	f800283a 	ret

0001d1ac <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   1d1ac:	defffc04 	addi	sp,sp,-16
   1d1b0:	dfc00315 	stw	ra,12(sp)
   1d1b4:	df000215 	stw	fp,8(sp)
   1d1b8:	df000204 	addi	fp,sp,8
   1d1bc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   1d1c0:	d1600904 	addi	r5,gp,-32732
   1d1c4:	e13fff17 	ldw	r4,-4(fp)
   1d1c8:	001d8640 	call	1d864 <alt_find_dev>
   1d1cc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1d1d0:	e0bffe17 	ldw	r2,-8(fp)
}
   1d1d4:	e037883a 	mov	sp,fp
   1d1d8:	dfc00117 	ldw	ra,4(sp)
   1d1dc:	df000017 	ldw	fp,0(sp)
   1d1e0:	dec00204 	addi	sp,sp,8
   1d1e4:	f800283a 	ret

0001d1e8 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1d1e8:	defffd04 	addi	sp,sp,-12
   1d1ec:	df000215 	stw	fp,8(sp)
   1d1f0:	df000204 	addi	fp,sp,8
   1d1f4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1d1f8:	e0bfff17 	ldw	r2,-4(fp)
   1d1fc:	10800a17 	ldw	r2,40(r2)
   1d200:	10800104 	addi	r2,r2,4
   1d204:	10800037 	ldwio	r2,0(r2)
   1d208:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   1d20c:	e0bffe17 	ldw	r2,-8(fp)
   1d210:	10800054 	ori	r2,r2,1
   1d214:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1d218:	e0bfff17 	ldw	r2,-4(fp)
   1d21c:	10800a17 	ldw	r2,40(r2)
   1d220:	10800104 	addi	r2,r2,4
   1d224:	1007883a 	mov	r3,r2
   1d228:	e0bffe17 	ldw	r2,-8(fp)
   1d22c:	18800035 	stwio	r2,0(r3)
}
   1d230:	0001883a 	nop
   1d234:	e037883a 	mov	sp,fp
   1d238:	df000017 	ldw	fp,0(sp)
   1d23c:	dec00104 	addi	sp,sp,4
   1d240:	f800283a 	ret

0001d244 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1d244:	defffd04 	addi	sp,sp,-12
   1d248:	df000215 	stw	fp,8(sp)
   1d24c:	df000204 	addi	fp,sp,8
   1d250:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1d254:	e0bfff17 	ldw	r2,-4(fp)
   1d258:	10800a17 	ldw	r2,40(r2)
   1d25c:	10800104 	addi	r2,r2,4
   1d260:	10800037 	ldwio	r2,0(r2)
   1d264:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   1d268:	e0fffe17 	ldw	r3,-8(fp)
   1d26c:	00bfff84 	movi	r2,-2
   1d270:	1884703a 	and	r2,r3,r2
   1d274:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1d278:	e0bfff17 	ldw	r2,-4(fp)
   1d27c:	10800a17 	ldw	r2,40(r2)
   1d280:	10800104 	addi	r2,r2,4
   1d284:	1007883a 	mov	r3,r2
   1d288:	e0bffe17 	ldw	r2,-8(fp)
   1d28c:	18800035 	stwio	r2,0(r3)
}
   1d290:	0001883a 	nop
   1d294:	e037883a 	mov	sp,fp
   1d298:	df000017 	ldw	fp,0(sp)
   1d29c:	dec00104 	addi	sp,sp,4
   1d2a0:	f800283a 	ret

0001d2a4 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   1d2a4:	defffd04 	addi	sp,sp,-12
   1d2a8:	df000215 	stw	fp,8(sp)
   1d2ac:	df000204 	addi	fp,sp,8
   1d2b0:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1d2b4:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   1d2b8:	e0bfff17 	ldw	r2,-4(fp)
   1d2bc:	10800a17 	ldw	r2,40(r2)
   1d2c0:	10800084 	addi	r2,r2,2
   1d2c4:	1080002b 	ldhuio	r2,0(r2)
   1d2c8:	10bfffcc 	andi	r2,r2,65535
   1d2cc:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   1d2d0:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1d2d4:	e037883a 	mov	sp,fp
   1d2d8:	df000017 	ldw	fp,0(sp)
   1d2dc:	dec00104 	addi	sp,sp,4
   1d2e0:	f800283a 	ret

0001d2e4 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   1d2e4:	defffd04 	addi	sp,sp,-12
   1d2e8:	df000215 	stw	fp,8(sp)
   1d2ec:	df000204 	addi	fp,sp,8
   1d2f0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1d2f4:	e0bfff17 	ldw	r2,-4(fp)
   1d2f8:	10800a17 	ldw	r2,40(r2)
   1d2fc:	10800104 	addi	r2,r2,4
   1d300:	10800037 	ldwio	r2,0(r2)
   1d304:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   1d308:	e0bffe17 	ldw	r2,-8(fp)
   1d30c:	1004d43a 	srli	r2,r2,16
}
   1d310:	e037883a 	mov	sp,fp
   1d314:	df000017 	ldw	fp,0(sp)
   1d318:	dec00104 	addi	sp,sp,4
   1d31c:	f800283a 	ret

0001d320 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   1d320:	defffd04 	addi	sp,sp,-12
   1d324:	df000215 	stw	fp,8(sp)
   1d328:	df000204 	addi	fp,sp,8
   1d32c:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   1d330:	e0bfff17 	ldw	r2,-4(fp)
   1d334:	1080800c 	andi	r2,r2,512
   1d338:	1004d27a 	srli	r2,r2,9
   1d33c:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1d340:	e0bffe17 	ldw	r2,-8(fp)
   1d344:	10000226 	beq	r2,zero,1d350 <alt_up_rs232_check_parity+0x30>
   1d348:	00bfffc4 	movi	r2,-1
   1d34c:	00000106 	br	1d354 <alt_up_rs232_check_parity+0x34>
   1d350:	0005883a 	mov	r2,zero
}
   1d354:	e037883a 	mov	sp,fp
   1d358:	df000017 	ldw	fp,0(sp)
   1d35c:	dec00104 	addi	sp,sp,4
   1d360:	f800283a 	ret

0001d364 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   1d364:	defffd04 	addi	sp,sp,-12
   1d368:	df000215 	stw	fp,8(sp)
   1d36c:	df000204 	addi	fp,sp,8
   1d370:	e13ffe15 	stw	r4,-8(fp)
   1d374:	2805883a 	mov	r2,r5
   1d378:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   1d37c:	e0bffe17 	ldw	r2,-8(fp)
   1d380:	10800a17 	ldw	r2,40(r2)
   1d384:	1007883a 	mov	r3,r2
   1d388:	e0bfff03 	ldbu	r2,-4(fp)
   1d38c:	18800035 	stwio	r2,0(r3)
	return 0;
   1d390:	0005883a 	mov	r2,zero
}
   1d394:	e037883a 	mov	sp,fp
   1d398:	df000017 	ldw	fp,0(sp)
   1d39c:	dec00104 	addi	sp,sp,4
   1d3a0:	f800283a 	ret

0001d3a4 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   1d3a4:	defffa04 	addi	sp,sp,-24
   1d3a8:	dfc00515 	stw	ra,20(sp)
   1d3ac:	df000415 	stw	fp,16(sp)
   1d3b0:	df000404 	addi	fp,sp,16
   1d3b4:	e13ffd15 	stw	r4,-12(fp)
   1d3b8:	e17ffe15 	stw	r5,-8(fp)
   1d3bc:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   1d3c0:	e0bffd17 	ldw	r2,-12(fp)
   1d3c4:	10800a17 	ldw	r2,40(r2)
   1d3c8:	10800037 	ldwio	r2,0(r2)
   1d3cc:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   1d3d0:	e0bffc17 	ldw	r2,-16(fp)
   1d3d4:	1007883a 	mov	r3,r2
   1d3d8:	e0bffe17 	ldw	r2,-8(fp)
   1d3dc:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   1d3e0:	e13ffc17 	ldw	r4,-16(fp)
   1d3e4:	001d3200 	call	1d320 <alt_up_rs232_check_parity>
   1d3e8:	1007883a 	mov	r3,r2
   1d3ec:	e0bfff17 	ldw	r2,-4(fp)
   1d3f0:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   1d3f4:	e0bffc17 	ldw	r2,-16(fp)
   1d3f8:	10a0000c 	andi	r2,r2,32768
   1d3fc:	1004d3fa 	srli	r2,r2,15
   1d400:	10bfffc4 	addi	r2,r2,-1
}
   1d404:	e037883a 	mov	sp,fp
   1d408:	dfc00117 	ldw	ra,4(sp)
   1d40c:	df000017 	ldw	fp,0(sp)
   1d410:	dec00204 	addi	sp,sp,8
   1d414:	f800283a 	ret

0001d418 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   1d418:	defff804 	addi	sp,sp,-32
   1d41c:	dfc00715 	stw	ra,28(sp)
   1d420:	df000615 	stw	fp,24(sp)
   1d424:	df000604 	addi	fp,sp,24
   1d428:	e13ffd15 	stw	r4,-12(fp)
   1d42c:	e17ffe15 	stw	r5,-8(fp)
   1d430:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1d434:	e0bffd17 	ldw	r2,-12(fp)
   1d438:	10800017 	ldw	r2,0(r2)
   1d43c:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1d440:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1d444:	00000c06 	br	1d478 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   1d448:	e0bffe17 	ldw	r2,-8(fp)
   1d44c:	10c00044 	addi	r3,r2,1
   1d450:	e0fffe15 	stw	r3,-8(fp)
   1d454:	e0fffc04 	addi	r3,fp,-16
   1d458:	180d883a 	mov	r6,r3
   1d45c:	100b883a 	mov	r5,r2
   1d460:	e13ffb17 	ldw	r4,-20(fp)
   1d464:	001d3a40 	call	1d3a4 <alt_up_rs232_read_data>
   1d468:	1000081e 	bne	r2,zero,1d48c <alt_up_rs232_read_fd+0x74>
			count++;
   1d46c:	e0bffa17 	ldw	r2,-24(fp)
   1d470:	10800044 	addi	r2,r2,1
   1d474:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1d478:	e0bfff17 	ldw	r2,-4(fp)
   1d47c:	10ffffc4 	addi	r3,r2,-1
   1d480:	e0ffff15 	stw	r3,-4(fp)
   1d484:	103ff01e 	bne	r2,zero,1d448 <alt_up_rs232_read_fd+0x30>
   1d488:	00000106 	br	1d490 <alt_up_rs232_read_fd+0x78>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   1d48c:	0001883a 	nop
	}
	return count;
   1d490:	e0bffa17 	ldw	r2,-24(fp)
}
   1d494:	e037883a 	mov	sp,fp
   1d498:	dfc00117 	ldw	ra,4(sp)
   1d49c:	df000017 	ldw	fp,0(sp)
   1d4a0:	dec00204 	addi	sp,sp,8
   1d4a4:	f800283a 	ret

0001d4a8 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1d4a8:	defff904 	addi	sp,sp,-28
   1d4ac:	dfc00615 	stw	ra,24(sp)
   1d4b0:	df000515 	stw	fp,20(sp)
   1d4b4:	df000504 	addi	fp,sp,20
   1d4b8:	e13ffd15 	stw	r4,-12(fp)
   1d4bc:	e17ffe15 	stw	r5,-8(fp)
   1d4c0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1d4c4:	e0bffd17 	ldw	r2,-12(fp)
   1d4c8:	10800017 	ldw	r2,0(r2)
   1d4cc:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1d4d0:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1d4d4:	00000d06 	br	1d50c <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   1d4d8:	e0bffe17 	ldw	r2,-8(fp)
   1d4dc:	10800003 	ldbu	r2,0(r2)
   1d4e0:	10803fcc 	andi	r2,r2,255
   1d4e4:	100b883a 	mov	r5,r2
   1d4e8:	e13ffc17 	ldw	r4,-16(fp)
   1d4ec:	001d3640 	call	1d364 <alt_up_rs232_write_data>
   1d4f0:	10000b1e 	bne	r2,zero,1d520 <alt_up_rs232_write_fd+0x78>
		{
			count++;
   1d4f4:	e0bffb17 	ldw	r2,-20(fp)
   1d4f8:	10800044 	addi	r2,r2,1
   1d4fc:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   1d500:	e0bffe17 	ldw	r2,-8(fp)
   1d504:	10800044 	addi	r2,r2,1
   1d508:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   1d50c:	e0bfff17 	ldw	r2,-4(fp)
   1d510:	10ffffc4 	addi	r3,r2,-1
   1d514:	e0ffff15 	stw	r3,-4(fp)
   1d518:	103fef1e 	bne	r2,zero,1d4d8 <alt_up_rs232_write_fd+0x30>
   1d51c:	00000106 	br	1d524 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
			ptr++;
		}
		else
			break;
   1d520:	0001883a 	nop
	}
	return count;
   1d524:	e0bffb17 	ldw	r2,-20(fp)
}
   1d528:	e037883a 	mov	sp,fp
   1d52c:	dfc00117 	ldw	ra,4(sp)
   1d530:	df000017 	ldw	fp,0(sp)
   1d534:	dec00204 	addi	sp,sp,8
   1d538:	f800283a 	ret

0001d53c <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   1d53c:	defffc04 	addi	sp,sp,-16
   1d540:	dfc00315 	stw	ra,12(sp)
   1d544:	df000215 	stw	fp,8(sp)
   1d548:	df000204 	addi	fp,sp,8
   1d54c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   1d550:	d1600904 	addi	r5,gp,-32732
   1d554:	e13fff17 	ldw	r4,-4(fp)
   1d558:	001d8640 	call	1d864 <alt_find_dev>
   1d55c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1d560:	e0bffe17 	ldw	r2,-8(fp)
}
   1d564:	e037883a 	mov	sp,fp
   1d568:	dfc00117 	ldw	ra,4(sp)
   1d56c:	df000017 	ldw	fp,0(sp)
   1d570:	dec00204 	addi	sp,sp,8
   1d574:	f800283a 	ret

0001d578 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1d578:	defff504 	addi	sp,sp,-44
   1d57c:	df000a15 	stw	fp,40(sp)
   1d580:	df000a04 	addi	fp,sp,40
   1d584:	e13ffc15 	stw	r4,-16(fp)
   1d588:	e17ffd15 	stw	r5,-12(fp)
   1d58c:	e1bffe15 	stw	r6,-8(fp)
   1d590:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1d594:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1d598:	d0a83317 	ldw	r2,-24372(gp)
  
  if (alt_ticks_per_second ())
   1d59c:	10003c26 	beq	r2,zero,1d690 <alt_alarm_start+0x118>
  {
    if (alarm)
   1d5a0:	e0bffc17 	ldw	r2,-16(fp)
   1d5a4:	10003826 	beq	r2,zero,1d688 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   1d5a8:	e0bffc17 	ldw	r2,-16(fp)
   1d5ac:	e0fffe17 	ldw	r3,-8(fp)
   1d5b0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1d5b4:	e0bffc17 	ldw	r2,-16(fp)
   1d5b8:	e0ffff17 	ldw	r3,-4(fp)
   1d5bc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d5c0:	0005303a 	rdctl	r2,status
   1d5c4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d5c8:	e0fff917 	ldw	r3,-28(fp)
   1d5cc:	00bfff84 	movi	r2,-2
   1d5d0:	1884703a 	and	r2,r3,r2
   1d5d4:	1001703a 	wrctl	status,r2
  
  return context;
   1d5d8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   1d5dc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1d5e0:	d0a83417 	ldw	r2,-24368(gp)
      
      current_nticks = alt_nticks();
   1d5e4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1d5e8:	e0fffd17 	ldw	r3,-12(fp)
   1d5ec:	e0bff617 	ldw	r2,-40(fp)
   1d5f0:	1885883a 	add	r2,r3,r2
   1d5f4:	10c00044 	addi	r3,r2,1
   1d5f8:	e0bffc17 	ldw	r2,-16(fp)
   1d5fc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1d600:	e0bffc17 	ldw	r2,-16(fp)
   1d604:	10c00217 	ldw	r3,8(r2)
   1d608:	e0bff617 	ldw	r2,-40(fp)
   1d60c:	1880042e 	bgeu	r3,r2,1d620 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   1d610:	e0bffc17 	ldw	r2,-16(fp)
   1d614:	00c00044 	movi	r3,1
   1d618:	10c00405 	stb	r3,16(r2)
   1d61c:	00000206 	br	1d628 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   1d620:	e0bffc17 	ldw	r2,-16(fp)
   1d624:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1d628:	e0bffc17 	ldw	r2,-16(fp)
   1d62c:	d0e02e04 	addi	r3,gp,-32584
   1d630:	e0fffa15 	stw	r3,-24(fp)
   1d634:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1d638:	e0bffb17 	ldw	r2,-20(fp)
   1d63c:	e0fffa17 	ldw	r3,-24(fp)
   1d640:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1d644:	e0bffa17 	ldw	r2,-24(fp)
   1d648:	10c00017 	ldw	r3,0(r2)
   1d64c:	e0bffb17 	ldw	r2,-20(fp)
   1d650:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1d654:	e0bffa17 	ldw	r2,-24(fp)
   1d658:	10800017 	ldw	r2,0(r2)
   1d65c:	e0fffb17 	ldw	r3,-20(fp)
   1d660:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1d664:	e0bffa17 	ldw	r2,-24(fp)
   1d668:	e0fffb17 	ldw	r3,-20(fp)
   1d66c:	10c00015 	stw	r3,0(r2)
   1d670:	e0bff817 	ldw	r2,-32(fp)
   1d674:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d678:	e0bff717 	ldw	r2,-36(fp)
   1d67c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1d680:	0005883a 	mov	r2,zero
   1d684:	00000306 	br	1d694 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   1d688:	00bffa84 	movi	r2,-22
   1d68c:	00000106 	br	1d694 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   1d690:	00bfde84 	movi	r2,-134
  }
}
   1d694:	e037883a 	mov	sp,fp
   1d698:	df000017 	ldw	fp,0(sp)
   1d69c:	dec00104 	addi	sp,sp,4
   1d6a0:	f800283a 	ret

0001d6a4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1d6a4:	deffff04 	addi	sp,sp,-4
   1d6a8:	df000015 	stw	fp,0(sp)
   1d6ac:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1d6b0:	0001883a 	nop
   1d6b4:	e037883a 	mov	sp,fp
   1d6b8:	df000017 	ldw	fp,0(sp)
   1d6bc:	dec00104 	addi	sp,sp,4
   1d6c0:	f800283a 	ret

0001d6c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1d6c4:	defffe04 	addi	sp,sp,-8
   1d6c8:	dfc00115 	stw	ra,4(sp)
   1d6cc:	df000015 	stw	fp,0(sp)
   1d6d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1d6d4:	d0a00c17 	ldw	r2,-32720(gp)
   1d6d8:	10000326 	beq	r2,zero,1d6e8 <alt_get_errno+0x24>
   1d6dc:	d0a00c17 	ldw	r2,-32720(gp)
   1d6e0:	103ee83a 	callr	r2
   1d6e4:	00000106 	br	1d6ec <alt_get_errno+0x28>
   1d6e8:	d0a81504 	addi	r2,gp,-24492
}
   1d6ec:	e037883a 	mov	sp,fp
   1d6f0:	dfc00117 	ldw	ra,4(sp)
   1d6f4:	df000017 	ldw	fp,0(sp)
   1d6f8:	dec00204 	addi	sp,sp,8
   1d6fc:	f800283a 	ret

0001d700 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1d700:	defffa04 	addi	sp,sp,-24
   1d704:	dfc00515 	stw	ra,20(sp)
   1d708:	df000415 	stw	fp,16(sp)
   1d70c:	df000404 	addi	fp,sp,16
   1d710:	e13ffe15 	stw	r4,-8(fp)
   1d714:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1d718:	e0bffe17 	ldw	r2,-8(fp)
   1d71c:	10000326 	beq	r2,zero,1d72c <alt_dev_llist_insert+0x2c>
   1d720:	e0bffe17 	ldw	r2,-8(fp)
   1d724:	10800217 	ldw	r2,8(r2)
   1d728:	1000061e 	bne	r2,zero,1d744 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1d72c:	001d6c40 	call	1d6c4 <alt_get_errno>
   1d730:	1007883a 	mov	r3,r2
   1d734:	00800584 	movi	r2,22
   1d738:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1d73c:	00bffa84 	movi	r2,-22
   1d740:	00001306 	br	1d790 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1d744:	e0bffe17 	ldw	r2,-8(fp)
   1d748:	e0ffff17 	ldw	r3,-4(fp)
   1d74c:	e0fffc15 	stw	r3,-16(fp)
   1d750:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1d754:	e0bffd17 	ldw	r2,-12(fp)
   1d758:	e0fffc17 	ldw	r3,-16(fp)
   1d75c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1d760:	e0bffc17 	ldw	r2,-16(fp)
   1d764:	10c00017 	ldw	r3,0(r2)
   1d768:	e0bffd17 	ldw	r2,-12(fp)
   1d76c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1d770:	e0bffc17 	ldw	r2,-16(fp)
   1d774:	10800017 	ldw	r2,0(r2)
   1d778:	e0fffd17 	ldw	r3,-12(fp)
   1d77c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1d780:	e0bffc17 	ldw	r2,-16(fp)
   1d784:	e0fffd17 	ldw	r3,-12(fp)
   1d788:	10c00015 	stw	r3,0(r2)

  return 0;  
   1d78c:	0005883a 	mov	r2,zero
}
   1d790:	e037883a 	mov	sp,fp
   1d794:	dfc00117 	ldw	ra,4(sp)
   1d798:	df000017 	ldw	fp,0(sp)
   1d79c:	dec00204 	addi	sp,sp,8
   1d7a0:	f800283a 	ret

0001d7a4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1d7a4:	defffd04 	addi	sp,sp,-12
   1d7a8:	dfc00215 	stw	ra,8(sp)
   1d7ac:	df000115 	stw	fp,4(sp)
   1d7b0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1d7b4:	008000b4 	movhi	r2,2
   1d7b8:	10ba7f04 	addi	r2,r2,-5636
   1d7bc:	e0bfff15 	stw	r2,-4(fp)
   1d7c0:	00000606 	br	1d7dc <_do_ctors+0x38>
        (*ctor) (); 
   1d7c4:	e0bfff17 	ldw	r2,-4(fp)
   1d7c8:	10800017 	ldw	r2,0(r2)
   1d7cc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1d7d0:	e0bfff17 	ldw	r2,-4(fp)
   1d7d4:	10bfff04 	addi	r2,r2,-4
   1d7d8:	e0bfff15 	stw	r2,-4(fp)
   1d7dc:	e0ffff17 	ldw	r3,-4(fp)
   1d7e0:	008000b4 	movhi	r2,2
   1d7e4:	10ba8004 	addi	r2,r2,-5632
   1d7e8:	18bff62e 	bgeu	r3,r2,1d7c4 <_do_ctors+0x20>
        (*ctor) (); 
}
   1d7ec:	0001883a 	nop
   1d7f0:	e037883a 	mov	sp,fp
   1d7f4:	dfc00117 	ldw	ra,4(sp)
   1d7f8:	df000017 	ldw	fp,0(sp)
   1d7fc:	dec00204 	addi	sp,sp,8
   1d800:	f800283a 	ret

0001d804 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1d804:	defffd04 	addi	sp,sp,-12
   1d808:	dfc00215 	stw	ra,8(sp)
   1d80c:	df000115 	stw	fp,4(sp)
   1d810:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1d814:	008000b4 	movhi	r2,2
   1d818:	10ba7f04 	addi	r2,r2,-5636
   1d81c:	e0bfff15 	stw	r2,-4(fp)
   1d820:	00000606 	br	1d83c <_do_dtors+0x38>
        (*dtor) (); 
   1d824:	e0bfff17 	ldw	r2,-4(fp)
   1d828:	10800017 	ldw	r2,0(r2)
   1d82c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1d830:	e0bfff17 	ldw	r2,-4(fp)
   1d834:	10bfff04 	addi	r2,r2,-4
   1d838:	e0bfff15 	stw	r2,-4(fp)
   1d83c:	e0ffff17 	ldw	r3,-4(fp)
   1d840:	008000b4 	movhi	r2,2
   1d844:	10ba8004 	addi	r2,r2,-5632
   1d848:	18bff62e 	bgeu	r3,r2,1d824 <_do_dtors+0x20>
        (*dtor) (); 
}
   1d84c:	0001883a 	nop
   1d850:	e037883a 	mov	sp,fp
   1d854:	dfc00117 	ldw	ra,4(sp)
   1d858:	df000017 	ldw	fp,0(sp)
   1d85c:	dec00204 	addi	sp,sp,8
   1d860:	f800283a 	ret

0001d864 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1d864:	defffa04 	addi	sp,sp,-24
   1d868:	dfc00515 	stw	ra,20(sp)
   1d86c:	df000415 	stw	fp,16(sp)
   1d870:	df000404 	addi	fp,sp,16
   1d874:	e13ffe15 	stw	r4,-8(fp)
   1d878:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1d87c:	e0bfff17 	ldw	r2,-4(fp)
   1d880:	10800017 	ldw	r2,0(r2)
   1d884:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1d888:	e13ffe17 	ldw	r4,-8(fp)
   1d88c:	000b4380 	call	b438 <strlen>
   1d890:	10800044 	addi	r2,r2,1
   1d894:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1d898:	00000d06 	br	1d8d0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1d89c:	e0bffc17 	ldw	r2,-16(fp)
   1d8a0:	10800217 	ldw	r2,8(r2)
   1d8a4:	e0fffd17 	ldw	r3,-12(fp)
   1d8a8:	180d883a 	mov	r6,r3
   1d8ac:	e17ffe17 	ldw	r5,-8(fp)
   1d8b0:	1009883a 	mov	r4,r2
   1d8b4:	001e6b80 	call	1e6b8 <memcmp>
   1d8b8:	1000021e 	bne	r2,zero,1d8c4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1d8bc:	e0bffc17 	ldw	r2,-16(fp)
   1d8c0:	00000706 	br	1d8e0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1d8c4:	e0bffc17 	ldw	r2,-16(fp)
   1d8c8:	10800017 	ldw	r2,0(r2)
   1d8cc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1d8d0:	e0fffc17 	ldw	r3,-16(fp)
   1d8d4:	e0bfff17 	ldw	r2,-4(fp)
   1d8d8:	18bff01e 	bne	r3,r2,1d89c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1d8dc:	0005883a 	mov	r2,zero
}
   1d8e0:	e037883a 	mov	sp,fp
   1d8e4:	dfc00117 	ldw	ra,4(sp)
   1d8e8:	df000017 	ldw	fp,0(sp)
   1d8ec:	dec00204 	addi	sp,sp,8
   1d8f0:	f800283a 	ret

0001d8f4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1d8f4:	defffe04 	addi	sp,sp,-8
   1d8f8:	dfc00115 	stw	ra,4(sp)
   1d8fc:	df000015 	stw	fp,0(sp)
   1d900:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1d904:	01440004 	movi	r5,4096
   1d908:	0009883a 	mov	r4,zero
   1d90c:	001e5400 	call	1e540 <alt_icache_flush>
#endif
}
   1d910:	0001883a 	nop
   1d914:	e037883a 	mov	sp,fp
   1d918:	dfc00117 	ldw	ra,4(sp)
   1d91c:	df000017 	ldw	fp,0(sp)
   1d920:	dec00204 	addi	sp,sp,8
   1d924:	f800283a 	ret

0001d928 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1d928:	defff904 	addi	sp,sp,-28
   1d92c:	dfc00615 	stw	ra,24(sp)
   1d930:	df000515 	stw	fp,20(sp)
   1d934:	df000504 	addi	fp,sp,20
   1d938:	e13ffc15 	stw	r4,-16(fp)
   1d93c:	e17ffd15 	stw	r5,-12(fp)
   1d940:	e1bffe15 	stw	r6,-8(fp)
   1d944:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1d948:	e1bfff17 	ldw	r6,-4(fp)
   1d94c:	e17ffe17 	ldw	r5,-8(fp)
   1d950:	e13ffd17 	ldw	r4,-12(fp)
   1d954:	001dce80 	call	1dce8 <open>
   1d958:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1d95c:	e0bffb17 	ldw	r2,-20(fp)
   1d960:	10001c16 	blt	r2,zero,1d9d4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   1d964:	008000b4 	movhi	r2,2
   1d968:	1080fe04 	addi	r2,r2,1016
   1d96c:	e0fffb17 	ldw	r3,-20(fp)
   1d970:	18c00324 	muli	r3,r3,12
   1d974:	10c5883a 	add	r2,r2,r3
   1d978:	10c00017 	ldw	r3,0(r2)
   1d97c:	e0bffc17 	ldw	r2,-16(fp)
   1d980:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1d984:	008000b4 	movhi	r2,2
   1d988:	1080fe04 	addi	r2,r2,1016
   1d98c:	e0fffb17 	ldw	r3,-20(fp)
   1d990:	18c00324 	muli	r3,r3,12
   1d994:	10c5883a 	add	r2,r2,r3
   1d998:	10800104 	addi	r2,r2,4
   1d99c:	10c00017 	ldw	r3,0(r2)
   1d9a0:	e0bffc17 	ldw	r2,-16(fp)
   1d9a4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1d9a8:	008000b4 	movhi	r2,2
   1d9ac:	1080fe04 	addi	r2,r2,1016
   1d9b0:	e0fffb17 	ldw	r3,-20(fp)
   1d9b4:	18c00324 	muli	r3,r3,12
   1d9b8:	10c5883a 	add	r2,r2,r3
   1d9bc:	10800204 	addi	r2,r2,8
   1d9c0:	10c00017 	ldw	r3,0(r2)
   1d9c4:	e0bffc17 	ldw	r2,-16(fp)
   1d9c8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1d9cc:	e13ffb17 	ldw	r4,-20(fp)
   1d9d0:	0012d940 	call	12d94 <alt_release_fd>
  }
} 
   1d9d4:	0001883a 	nop
   1d9d8:	e037883a 	mov	sp,fp
   1d9dc:	dfc00117 	ldw	ra,4(sp)
   1d9e0:	df000017 	ldw	fp,0(sp)
   1d9e4:	dec00204 	addi	sp,sp,8
   1d9e8:	f800283a 	ret

0001d9ec <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1d9ec:	defffb04 	addi	sp,sp,-20
   1d9f0:	dfc00415 	stw	ra,16(sp)
   1d9f4:	df000315 	stw	fp,12(sp)
   1d9f8:	df000304 	addi	fp,sp,12
   1d9fc:	e13ffd15 	stw	r4,-12(fp)
   1da00:	e17ffe15 	stw	r5,-8(fp)
   1da04:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1da08:	01c07fc4 	movi	r7,511
   1da0c:	01800044 	movi	r6,1
   1da10:	e17ffd17 	ldw	r5,-12(fp)
   1da14:	010000b4 	movhi	r4,2
   1da18:	21010104 	addi	r4,r4,1028
   1da1c:	001d9280 	call	1d928 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1da20:	01c07fc4 	movi	r7,511
   1da24:	000d883a 	mov	r6,zero
   1da28:	e17ffe17 	ldw	r5,-8(fp)
   1da2c:	010000b4 	movhi	r4,2
   1da30:	2100fe04 	addi	r4,r4,1016
   1da34:	001d9280 	call	1d928 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1da38:	01c07fc4 	movi	r7,511
   1da3c:	01800044 	movi	r6,1
   1da40:	e17fff17 	ldw	r5,-4(fp)
   1da44:	010000b4 	movhi	r4,2
   1da48:	21010404 	addi	r4,r4,1040
   1da4c:	001d9280 	call	1d928 <alt_open_fd>
}  
   1da50:	0001883a 	nop
   1da54:	e037883a 	mov	sp,fp
   1da58:	dfc00117 	ldw	ra,4(sp)
   1da5c:	df000017 	ldw	fp,0(sp)
   1da60:	dec00204 	addi	sp,sp,8
   1da64:	f800283a 	ret

0001da68 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   1da68:	defff004 	addi	sp,sp,-64
   1da6c:	df000f15 	stw	fp,60(sp)
   1da70:	df000f04 	addi	fp,sp,60
   1da74:	e13ffd15 	stw	r4,-12(fp)
   1da78:	e17ffe15 	stw	r5,-8(fp)
   1da7c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   1da80:	00bffa84 	movi	r2,-22
   1da84:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1da88:	e0bffd17 	ldw	r2,-12(fp)
   1da8c:	10800828 	cmpgeui	r2,r2,32
   1da90:	1000501e 	bne	r2,zero,1dbd4 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1da94:	0005303a 	rdctl	r2,status
   1da98:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1da9c:	e0fff617 	ldw	r3,-40(fp)
   1daa0:	00bfff84 	movi	r2,-2
   1daa4:	1884703a 	and	r2,r3,r2
   1daa8:	1001703a 	wrctl	status,r2
  
  return context;
   1daac:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   1dab0:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   1dab4:	008000f4 	movhi	r2,3
   1dab8:	10930504 	addi	r2,r2,19476
   1dabc:	e0fffd17 	ldw	r3,-12(fp)
   1dac0:	180690fa 	slli	r3,r3,3
   1dac4:	10c5883a 	add	r2,r2,r3
   1dac8:	e0ffff17 	ldw	r3,-4(fp)
   1dacc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   1dad0:	008000f4 	movhi	r2,3
   1dad4:	10930504 	addi	r2,r2,19476
   1dad8:	e0fffd17 	ldw	r3,-12(fp)
   1dadc:	180690fa 	slli	r3,r3,3
   1dae0:	10c5883a 	add	r2,r2,r3
   1dae4:	10800104 	addi	r2,r2,4
   1dae8:	e0fffe17 	ldw	r3,-8(fp)
   1daec:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   1daf0:	e0bfff17 	ldw	r2,-4(fp)
   1daf4:	10001926 	beq	r2,zero,1db5c <alt_irq_register+0xf4>
   1daf8:	e0bffd17 	ldw	r2,-12(fp)
   1dafc:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1db00:	0005303a 	rdctl	r2,status
   1db04:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1db08:	e0fff717 	ldw	r3,-36(fp)
   1db0c:	00bfff84 	movi	r2,-2
   1db10:	1884703a 	and	r2,r3,r2
   1db14:	1001703a 	wrctl	status,r2
  
  return context;
   1db18:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1db1c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   1db20:	00c00044 	movi	r3,1
   1db24:	e0bff217 	ldw	r2,-56(fp)
   1db28:	1884983a 	sll	r2,r3,r2
   1db2c:	1007883a 	mov	r3,r2
   1db30:	d0a83217 	ldw	r2,-24376(gp)
   1db34:	1884b03a 	or	r2,r3,r2
   1db38:	d0a83215 	stw	r2,-24376(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1db3c:	d0a83217 	ldw	r2,-24376(gp)
   1db40:	100170fa 	wrctl	ienable,r2
   1db44:	e0bff817 	ldw	r2,-32(fp)
   1db48:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1db4c:	e0bff917 	ldw	r2,-28(fp)
   1db50:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1db54:	0005883a 	mov	r2,zero
   1db58:	00001906 	br	1dbc0 <alt_irq_register+0x158>
   1db5c:	e0bffd17 	ldw	r2,-12(fp)
   1db60:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1db64:	0005303a 	rdctl	r2,status
   1db68:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1db6c:	e0fffa17 	ldw	r3,-24(fp)
   1db70:	00bfff84 	movi	r2,-2
   1db74:	1884703a 	and	r2,r3,r2
   1db78:	1001703a 	wrctl	status,r2
  
  return context;
   1db7c:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1db80:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   1db84:	00c00044 	movi	r3,1
   1db88:	e0bff417 	ldw	r2,-48(fp)
   1db8c:	1884983a 	sll	r2,r3,r2
   1db90:	0084303a 	nor	r2,zero,r2
   1db94:	1007883a 	mov	r3,r2
   1db98:	d0a83217 	ldw	r2,-24376(gp)
   1db9c:	1884703a 	and	r2,r3,r2
   1dba0:	d0a83215 	stw	r2,-24376(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1dba4:	d0a83217 	ldw	r2,-24376(gp)
   1dba8:	100170fa 	wrctl	ienable,r2
   1dbac:	e0bffb17 	ldw	r2,-20(fp)
   1dbb0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1dbb4:	e0bffc17 	ldw	r2,-16(fp)
   1dbb8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1dbbc:	0005883a 	mov	r2,zero
   1dbc0:	e0bff115 	stw	r2,-60(fp)
   1dbc4:	e0bff317 	ldw	r2,-52(fp)
   1dbc8:	e0bff515 	stw	r2,-44(fp)
   1dbcc:	e0bff517 	ldw	r2,-44(fp)
   1dbd0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   1dbd4:	e0bff117 	ldw	r2,-60(fp)
}
   1dbd8:	e037883a 	mov	sp,fp
   1dbdc:	df000017 	ldw	fp,0(sp)
   1dbe0:	dec00104 	addi	sp,sp,4
   1dbe4:	f800283a 	ret

0001dbe8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1dbe8:	defffe04 	addi	sp,sp,-8
   1dbec:	dfc00115 	stw	ra,4(sp)
   1dbf0:	df000015 	stw	fp,0(sp)
   1dbf4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1dbf8:	d0a00c17 	ldw	r2,-32720(gp)
   1dbfc:	10000326 	beq	r2,zero,1dc0c <alt_get_errno+0x24>
   1dc00:	d0a00c17 	ldw	r2,-32720(gp)
   1dc04:	103ee83a 	callr	r2
   1dc08:	00000106 	br	1dc10 <alt_get_errno+0x28>
   1dc0c:	d0a81504 	addi	r2,gp,-24492
}
   1dc10:	e037883a 	mov	sp,fp
   1dc14:	dfc00117 	ldw	ra,4(sp)
   1dc18:	df000017 	ldw	fp,0(sp)
   1dc1c:	dec00204 	addi	sp,sp,8
   1dc20:	f800283a 	ret

0001dc24 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1dc24:	defffd04 	addi	sp,sp,-12
   1dc28:	df000215 	stw	fp,8(sp)
   1dc2c:	df000204 	addi	fp,sp,8
   1dc30:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1dc34:	e0bfff17 	ldw	r2,-4(fp)
   1dc38:	10800217 	ldw	r2,8(r2)
   1dc3c:	10d00034 	orhi	r3,r2,16384
   1dc40:	e0bfff17 	ldw	r2,-4(fp)
   1dc44:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1dc48:	e03ffe15 	stw	zero,-8(fp)
   1dc4c:	00001d06 	br	1dcc4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1dc50:	008000b4 	movhi	r2,2
   1dc54:	1080fe04 	addi	r2,r2,1016
   1dc58:	e0fffe17 	ldw	r3,-8(fp)
   1dc5c:	18c00324 	muli	r3,r3,12
   1dc60:	10c5883a 	add	r2,r2,r3
   1dc64:	10c00017 	ldw	r3,0(r2)
   1dc68:	e0bfff17 	ldw	r2,-4(fp)
   1dc6c:	10800017 	ldw	r2,0(r2)
   1dc70:	1880111e 	bne	r3,r2,1dcb8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1dc74:	008000b4 	movhi	r2,2
   1dc78:	1080fe04 	addi	r2,r2,1016
   1dc7c:	e0fffe17 	ldw	r3,-8(fp)
   1dc80:	18c00324 	muli	r3,r3,12
   1dc84:	10c5883a 	add	r2,r2,r3
   1dc88:	10800204 	addi	r2,r2,8
   1dc8c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1dc90:	1000090e 	bge	r2,zero,1dcb8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1dc94:	e0bffe17 	ldw	r2,-8(fp)
   1dc98:	10c00324 	muli	r3,r2,12
   1dc9c:	008000b4 	movhi	r2,2
   1dca0:	1080fe04 	addi	r2,r2,1016
   1dca4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1dca8:	e0bfff17 	ldw	r2,-4(fp)
   1dcac:	18800226 	beq	r3,r2,1dcb8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1dcb0:	00bffcc4 	movi	r2,-13
   1dcb4:	00000806 	br	1dcd8 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1dcb8:	e0bffe17 	ldw	r2,-8(fp)
   1dcbc:	10800044 	addi	r2,r2,1
   1dcc0:	e0bffe15 	stw	r2,-8(fp)
   1dcc4:	d0a00b17 	ldw	r2,-32724(gp)
   1dcc8:	1007883a 	mov	r3,r2
   1dccc:	e0bffe17 	ldw	r2,-8(fp)
   1dcd0:	18bfdf2e 	bgeu	r3,r2,1dc50 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1dcd4:	0005883a 	mov	r2,zero
}
   1dcd8:	e037883a 	mov	sp,fp
   1dcdc:	df000017 	ldw	fp,0(sp)
   1dce0:	dec00104 	addi	sp,sp,4
   1dce4:	f800283a 	ret

0001dce8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1dce8:	defff604 	addi	sp,sp,-40
   1dcec:	dfc00915 	stw	ra,36(sp)
   1dcf0:	df000815 	stw	fp,32(sp)
   1dcf4:	df000804 	addi	fp,sp,32
   1dcf8:	e13ffd15 	stw	r4,-12(fp)
   1dcfc:	e17ffe15 	stw	r5,-8(fp)
   1dd00:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1dd04:	00bfffc4 	movi	r2,-1
   1dd08:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1dd0c:	00bffb44 	movi	r2,-19
   1dd10:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1dd14:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1dd18:	d1600904 	addi	r5,gp,-32732
   1dd1c:	e13ffd17 	ldw	r4,-12(fp)
   1dd20:	001d8640 	call	1d864 <alt_find_dev>
   1dd24:	e0bff815 	stw	r2,-32(fp)
   1dd28:	e0bff817 	ldw	r2,-32(fp)
   1dd2c:	1000051e 	bne	r2,zero,1dd44 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1dd30:	e13ffd17 	ldw	r4,-12(fp)
   1dd34:	001e35c0 	call	1e35c <alt_find_file>
   1dd38:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1dd3c:	00800044 	movi	r2,1
   1dd40:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1dd44:	e0bff817 	ldw	r2,-32(fp)
   1dd48:	10002926 	beq	r2,zero,1ddf0 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1dd4c:	e13ff817 	ldw	r4,-32(fp)
   1dd50:	001e4640 	call	1e464 <alt_get_fd>
   1dd54:	e0bff915 	stw	r2,-28(fp)
   1dd58:	e0bff917 	ldw	r2,-28(fp)
   1dd5c:	1000030e 	bge	r2,zero,1dd6c <open+0x84>
    {
      status = index;
   1dd60:	e0bff917 	ldw	r2,-28(fp)
   1dd64:	e0bffa15 	stw	r2,-24(fp)
   1dd68:	00002306 	br	1ddf8 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   1dd6c:	e0bff917 	ldw	r2,-28(fp)
   1dd70:	10c00324 	muli	r3,r2,12
   1dd74:	008000b4 	movhi	r2,2
   1dd78:	1080fe04 	addi	r2,r2,1016
   1dd7c:	1885883a 	add	r2,r3,r2
   1dd80:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1dd84:	e0fffe17 	ldw	r3,-8(fp)
   1dd88:	00900034 	movhi	r2,16384
   1dd8c:	10bfffc4 	addi	r2,r2,-1
   1dd90:	1886703a 	and	r3,r3,r2
   1dd94:	e0bffc17 	ldw	r2,-16(fp)
   1dd98:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1dd9c:	e0bffb17 	ldw	r2,-20(fp)
   1dda0:	1000051e 	bne	r2,zero,1ddb8 <open+0xd0>
   1dda4:	e13ffc17 	ldw	r4,-16(fp)
   1dda8:	001dc240 	call	1dc24 <alt_file_locked>
   1ddac:	e0bffa15 	stw	r2,-24(fp)
   1ddb0:	e0bffa17 	ldw	r2,-24(fp)
   1ddb4:	10001016 	blt	r2,zero,1ddf8 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1ddb8:	e0bff817 	ldw	r2,-32(fp)
   1ddbc:	10800317 	ldw	r2,12(r2)
   1ddc0:	10000826 	beq	r2,zero,1dde4 <open+0xfc>
   1ddc4:	e0bff817 	ldw	r2,-32(fp)
   1ddc8:	10800317 	ldw	r2,12(r2)
   1ddcc:	e1ffff17 	ldw	r7,-4(fp)
   1ddd0:	e1bffe17 	ldw	r6,-8(fp)
   1ddd4:	e17ffd17 	ldw	r5,-12(fp)
   1ddd8:	e13ffc17 	ldw	r4,-16(fp)
   1dddc:	103ee83a 	callr	r2
   1dde0:	00000106 	br	1dde8 <open+0x100>
   1dde4:	0005883a 	mov	r2,zero
   1dde8:	e0bffa15 	stw	r2,-24(fp)
   1ddec:	00000206 	br	1ddf8 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1ddf0:	00bffb44 	movi	r2,-19
   1ddf4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1ddf8:	e0bffa17 	ldw	r2,-24(fp)
   1ddfc:	1000090e 	bge	r2,zero,1de24 <open+0x13c>
  {
    alt_release_fd (index);  
   1de00:	e13ff917 	ldw	r4,-28(fp)
   1de04:	0012d940 	call	12d94 <alt_release_fd>
    ALT_ERRNO = -status;
   1de08:	001dbe80 	call	1dbe8 <alt_get_errno>
   1de0c:	1007883a 	mov	r3,r2
   1de10:	e0bffa17 	ldw	r2,-24(fp)
   1de14:	0085c83a 	sub	r2,zero,r2
   1de18:	18800015 	stw	r2,0(r3)
    return -1;
   1de1c:	00bfffc4 	movi	r2,-1
   1de20:	00000106 	br	1de28 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   1de24:	e0bff917 	ldw	r2,-28(fp)
}
   1de28:	e037883a 	mov	sp,fp
   1de2c:	dfc00117 	ldw	ra,4(sp)
   1de30:	df000017 	ldw	fp,0(sp)
   1de34:	dec00204 	addi	sp,sp,8
   1de38:	f800283a 	ret

0001de3c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1de3c:	defffa04 	addi	sp,sp,-24
   1de40:	df000515 	stw	fp,20(sp)
   1de44:	df000504 	addi	fp,sp,20
   1de48:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1de4c:	0005303a 	rdctl	r2,status
   1de50:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1de54:	e0fffc17 	ldw	r3,-16(fp)
   1de58:	00bfff84 	movi	r2,-2
   1de5c:	1884703a 	and	r2,r3,r2
   1de60:	1001703a 	wrctl	status,r2
  
  return context;
   1de64:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1de68:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1de6c:	e0bfff17 	ldw	r2,-4(fp)
   1de70:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1de74:	e0bffd17 	ldw	r2,-12(fp)
   1de78:	10800017 	ldw	r2,0(r2)
   1de7c:	e0fffd17 	ldw	r3,-12(fp)
   1de80:	18c00117 	ldw	r3,4(r3)
   1de84:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1de88:	e0bffd17 	ldw	r2,-12(fp)
   1de8c:	10800117 	ldw	r2,4(r2)
   1de90:	e0fffd17 	ldw	r3,-12(fp)
   1de94:	18c00017 	ldw	r3,0(r3)
   1de98:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1de9c:	e0bffd17 	ldw	r2,-12(fp)
   1dea0:	e0fffd17 	ldw	r3,-12(fp)
   1dea4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1dea8:	e0bffd17 	ldw	r2,-12(fp)
   1deac:	e0fffd17 	ldw	r3,-12(fp)
   1deb0:	10c00015 	stw	r3,0(r2)
   1deb4:	e0bffb17 	ldw	r2,-20(fp)
   1deb8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1debc:	e0bffe17 	ldw	r2,-8(fp)
   1dec0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1dec4:	0001883a 	nop
   1dec8:	e037883a 	mov	sp,fp
   1decc:	df000017 	ldw	fp,0(sp)
   1ded0:	dec00104 	addi	sp,sp,4
   1ded4:	f800283a 	ret

0001ded8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1ded8:	defffb04 	addi	sp,sp,-20
   1dedc:	dfc00415 	stw	ra,16(sp)
   1dee0:	df000315 	stw	fp,12(sp)
   1dee4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1dee8:	d0a02e17 	ldw	r2,-32584(gp)
   1deec:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1def0:	d0a83417 	ldw	r2,-24368(gp)
   1def4:	10800044 	addi	r2,r2,1
   1def8:	d0a83415 	stw	r2,-24368(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1defc:	00002e06 	br	1dfb8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1df00:	e0bffd17 	ldw	r2,-12(fp)
   1df04:	10800017 	ldw	r2,0(r2)
   1df08:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1df0c:	e0bffd17 	ldw	r2,-12(fp)
   1df10:	10800403 	ldbu	r2,16(r2)
   1df14:	10803fcc 	andi	r2,r2,255
   1df18:	10000426 	beq	r2,zero,1df2c <alt_tick+0x54>
   1df1c:	d0a83417 	ldw	r2,-24368(gp)
   1df20:	1000021e 	bne	r2,zero,1df2c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1df24:	e0bffd17 	ldw	r2,-12(fp)
   1df28:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1df2c:	e0bffd17 	ldw	r2,-12(fp)
   1df30:	10800217 	ldw	r2,8(r2)
   1df34:	d0e83417 	ldw	r3,-24368(gp)
   1df38:	18801d36 	bltu	r3,r2,1dfb0 <alt_tick+0xd8>
   1df3c:	e0bffd17 	ldw	r2,-12(fp)
   1df40:	10800403 	ldbu	r2,16(r2)
   1df44:	10803fcc 	andi	r2,r2,255
   1df48:	1000191e 	bne	r2,zero,1dfb0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1df4c:	e0bffd17 	ldw	r2,-12(fp)
   1df50:	10800317 	ldw	r2,12(r2)
   1df54:	e0fffd17 	ldw	r3,-12(fp)
   1df58:	18c00517 	ldw	r3,20(r3)
   1df5c:	1809883a 	mov	r4,r3
   1df60:	103ee83a 	callr	r2
   1df64:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1df68:	e0bfff17 	ldw	r2,-4(fp)
   1df6c:	1000031e 	bne	r2,zero,1df7c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1df70:	e13ffd17 	ldw	r4,-12(fp)
   1df74:	001de3c0 	call	1de3c <alt_alarm_stop>
   1df78:	00000d06 	br	1dfb0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1df7c:	e0bffd17 	ldw	r2,-12(fp)
   1df80:	10c00217 	ldw	r3,8(r2)
   1df84:	e0bfff17 	ldw	r2,-4(fp)
   1df88:	1887883a 	add	r3,r3,r2
   1df8c:	e0bffd17 	ldw	r2,-12(fp)
   1df90:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1df94:	e0bffd17 	ldw	r2,-12(fp)
   1df98:	10c00217 	ldw	r3,8(r2)
   1df9c:	d0a83417 	ldw	r2,-24368(gp)
   1dfa0:	1880032e 	bgeu	r3,r2,1dfb0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1dfa4:	e0bffd17 	ldw	r2,-12(fp)
   1dfa8:	00c00044 	movi	r3,1
   1dfac:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1dfb0:	e0bffe17 	ldw	r2,-8(fp)
   1dfb4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1dfb8:	e0fffd17 	ldw	r3,-12(fp)
   1dfbc:	d0a02e04 	addi	r2,gp,-32584
   1dfc0:	18bfcf1e 	bne	r3,r2,1df00 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1dfc4:	0013f800 	call	13f80 <OSTimeTick>
}
   1dfc8:	0001883a 	nop
   1dfcc:	e037883a 	mov	sp,fp
   1dfd0:	dfc00117 	ldw	ra,4(sp)
   1dfd4:	df000017 	ldw	fp,0(sp)
   1dfd8:	dec00204 	addi	sp,sp,8
   1dfdc:	f800283a 	ret

0001dfe0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1dfe0:	deffff04 	addi	sp,sp,-4
   1dfe4:	df000015 	stw	fp,0(sp)
   1dfe8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1dfec:	000170fa 	wrctl	ienable,zero
}
   1dff0:	0001883a 	nop
   1dff4:	e037883a 	mov	sp,fp
   1dff8:	df000017 	ldw	fp,0(sp)
   1dffc:	dec00104 	addi	sp,sp,4
   1e000:	f800283a 	ret

0001e004 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   1e004:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   1e008:	d0e00217 	ldw	r3,-32760(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   1e00c:	d1282d17 	ldw	r4,-24396(gp)

      stw ra,  0(sp)
   1e010:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   1e014:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   1e018:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   1e01c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   1e020:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   1e024:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   1e028:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   1e02c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   1e030:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   1e034:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   1e038:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   1e03c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1e040:	001e2780 	call	1e278 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   1e044:	d1282817 	ldw	r4,-24416(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   1e048:	d1682007 	ldb	r5,-24448(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   1e04c:	d1282d15 	stw	r4,-24396(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   1e050:	d1682045 	stb	r5,-24447(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   1e054:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   1e058:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   1e05c:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   1e060:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   1e064:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   1e068:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   1e06c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   1e070:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   1e074:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   1e078:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   1e07c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   1e080:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   1e084:	d0e00215 	stw	r3,-32760(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   1e088:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   1e08c:	f800283a 	ret

0001e090 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   1e090:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   1e094:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   1e098:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   1e09c:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1e0a0:	001e2780 	call	1e278 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   1e0a4:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   1e0a8:	d4a81e45 	stb	r18,-24455(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   1e0ac:	003fe506 	br	1e044 <OSCtxSw+0x40>

0001e0b0 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   1e0b0:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   1e0b4:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   1e0b8:	10800054 	ori	r2,r2,1
      wrctl status, r2
   1e0bc:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   1e0c0:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   1e0c4:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   1e0c8:	dec00204 	addi	sp,sp,8

      callr r2
   1e0cc:	103ee83a 	callr	r2

      nop
   1e0d0:	0001883a 	nop

0001e0d4 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   1e0d4:	defff704 	addi	sp,sp,-36
   1e0d8:	dfc00815 	stw	ra,32(sp)
   1e0dc:	df000715 	stw	fp,28(sp)
   1e0e0:	df000704 	addi	fp,sp,28
   1e0e4:	e13ffc15 	stw	r4,-16(fp)
   1e0e8:	e17ffd15 	stw	r5,-12(fp)
   1e0ec:	e1bffe15 	stw	r6,-8(fp)
   1e0f0:	3805883a 	mov	r2,r7
   1e0f4:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   1e0f8:	e0fffe17 	ldw	r3,-8(fp)
   1e0fc:	00bfff04 	movi	r2,-4
   1e100:	1884703a 	and	r2,r3,r2
   1e104:	10bef704 	addi	r2,r2,-1060
   1e108:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   1e10c:	01810904 	movi	r6,1060
   1e110:	000b883a 	mov	r5,zero
   1e114:	e13ff917 	ldw	r4,-28(fp)
   1e118:	000a0340 	call	a034 <memset>
   1e11c:	e0bff917 	ldw	r2,-28(fp)
   1e120:	10c0bb04 	addi	r3,r2,748
   1e124:	e0bff917 	ldw	r2,-28(fp)
   1e128:	10c00115 	stw	r3,4(r2)
   1e12c:	e0bff917 	ldw	r2,-28(fp)
   1e130:	10c0d504 	addi	r3,r2,852
   1e134:	e0bff917 	ldw	r2,-28(fp)
   1e138:	10c00215 	stw	r3,8(r2)
   1e13c:	e0bff917 	ldw	r2,-28(fp)
   1e140:	10c0ef04 	addi	r3,r2,956
   1e144:	e0bff917 	ldw	r2,-28(fp)
   1e148:	10c00315 	stw	r3,12(r2)
   1e14c:	e0fff917 	ldw	r3,-28(fp)
   1e150:	008000b4 	movhi	r2,2
   1e154:	10beb804 	addi	r2,r2,-1312
   1e158:	18800d15 	stw	r2,52(r3)
   1e15c:	e0bff917 	ldw	r2,-28(fp)
   1e160:	00c00044 	movi	r3,1
   1e164:	10c02915 	stw	r3,164(r2)
   1e168:	10002a15 	stw	zero,168(r2)
   1e16c:	e0bff917 	ldw	r2,-28(fp)
   1e170:	00ccc384 	movi	r3,13070
   1e174:	10c02b0d 	sth	r3,172(r2)
   1e178:	e0bff917 	ldw	r2,-28(fp)
   1e17c:	00eaf344 	movi	r3,-21555
   1e180:	10c02b8d 	sth	r3,174(r2)
   1e184:	e0bff917 	ldw	r2,-28(fp)
   1e188:	00c48d04 	movi	r3,4660
   1e18c:	10c02c0d 	sth	r3,176(r2)
   1e190:	e0bff917 	ldw	r2,-28(fp)
   1e194:	00f99b44 	movi	r3,-6547
   1e198:	10c02c8d 	sth	r3,178(r2)
   1e19c:	e0bff917 	ldw	r2,-28(fp)
   1e1a0:	00f7bb04 	movi	r3,-8468
   1e1a4:	10c02d0d 	sth	r3,180(r2)
   1e1a8:	e0bff917 	ldw	r2,-28(fp)
   1e1ac:	00c00144 	movi	r3,5
   1e1b0:	10c02d8d 	sth	r3,182(r2)
   1e1b4:	e0bff917 	ldw	r2,-28(fp)
   1e1b8:	00c002c4 	movi	r3,11
   1e1bc:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   1e1c0:	e0bff917 	ldw	r2,-28(fp)
   1e1c4:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   1e1c8:	e0bffa17 	ldw	r2,-24(fp)
   1e1cc:	10bff304 	addi	r2,r2,-52
   1e1d0:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   1e1d4:	e0bffb17 	ldw	r2,-20(fp)
   1e1d8:	10800c04 	addi	r2,r2,48
   1e1dc:	e0fffc17 	ldw	r3,-16(fp)
   1e1e0:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   1e1e4:	e0bffb17 	ldw	r2,-20(fp)
   1e1e8:	10800b04 	addi	r2,r2,44
   1e1ec:	e0fffd17 	ldw	r3,-12(fp)
   1e1f0:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   1e1f4:	e0bffb17 	ldw	r2,-20(fp)
   1e1f8:	10800a04 	addi	r2,r2,40
   1e1fc:	e0fff917 	ldw	r3,-28(fp)
   1e200:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   1e204:	008000b4 	movhi	r2,2
   1e208:	10b82c04 	addi	r2,r2,-8016
   1e20c:	10c00104 	addi	r3,r2,4
   1e210:	e0bffb17 	ldw	r2,-20(fp)
   1e214:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   1e218:	e0bffb17 	ldw	r2,-20(fp)
}
   1e21c:	e037883a 	mov	sp,fp
   1e220:	dfc00117 	ldw	ra,4(sp)
   1e224:	df000017 	ldw	fp,0(sp)
   1e228:	dec00204 	addi	sp,sp,8
   1e22c:	f800283a 	ret

0001e230 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   1e230:	defffe04 	addi	sp,sp,-8
   1e234:	df000115 	stw	fp,4(sp)
   1e238:	df000104 	addi	fp,sp,4
   1e23c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   1e240:	0001883a 	nop
   1e244:	e037883a 	mov	sp,fp
   1e248:	df000017 	ldw	fp,0(sp)
   1e24c:	dec00104 	addi	sp,sp,4
   1e250:	f800283a 	ret

0001e254 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   1e254:	defffe04 	addi	sp,sp,-8
   1e258:	df000115 	stw	fp,4(sp)
   1e25c:	df000104 	addi	fp,sp,4
   1e260:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   1e264:	0001883a 	nop
   1e268:	e037883a 	mov	sp,fp
   1e26c:	df000017 	ldw	fp,0(sp)
   1e270:	dec00104 	addi	sp,sp,4
   1e274:	f800283a 	ret

0001e278 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   1e278:	deffff04 	addi	sp,sp,-4
   1e27c:	df000015 	stw	fp,0(sp)
   1e280:	d839883a 	mov	fp,sp
}
   1e284:	0001883a 	nop
   1e288:	e037883a 	mov	sp,fp
   1e28c:	df000017 	ldw	fp,0(sp)
   1e290:	dec00104 	addi	sp,sp,4
   1e294:	f800283a 	ret

0001e298 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   1e298:	deffff04 	addi	sp,sp,-4
   1e29c:	df000015 	stw	fp,0(sp)
   1e2a0:	d839883a 	mov	fp,sp
}
   1e2a4:	0001883a 	nop
   1e2a8:	e037883a 	mov	sp,fp
   1e2ac:	df000017 	ldw	fp,0(sp)
   1e2b0:	dec00104 	addi	sp,sp,4
   1e2b4:	f800283a 	ret

0001e2b8 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   1e2b8:	deffff04 	addi	sp,sp,-4
   1e2bc:	df000015 	stw	fp,0(sp)
   1e2c0:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   1e2c4:	0001883a 	nop
   1e2c8:	e037883a 	mov	sp,fp
   1e2cc:	df000017 	ldw	fp,0(sp)
   1e2d0:	dec00104 	addi	sp,sp,4
   1e2d4:	f800283a 	ret

0001e2d8 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   1e2d8:	deffff04 	addi	sp,sp,-4
   1e2dc:	df000015 	stw	fp,0(sp)
   1e2e0:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   1e2e4:	0001883a 	nop
   1e2e8:	e037883a 	mov	sp,fp
   1e2ec:	df000017 	ldw	fp,0(sp)
   1e2f0:	dec00104 	addi	sp,sp,4
   1e2f4:	f800283a 	ret

0001e2f8 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   1e2f8:	deffff04 	addi	sp,sp,-4
   1e2fc:	df000015 	stw	fp,0(sp)
   1e300:	d839883a 	mov	fp,sp
}
   1e304:	0001883a 	nop
   1e308:	e037883a 	mov	sp,fp
   1e30c:	df000017 	ldw	fp,0(sp)
   1e310:	dec00104 	addi	sp,sp,4
   1e314:	f800283a 	ret

0001e318 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   1e318:	deffff04 	addi	sp,sp,-4
   1e31c:	df000015 	stw	fp,0(sp)
   1e320:	d839883a 	mov	fp,sp
}
   1e324:	0001883a 	nop
   1e328:	e037883a 	mov	sp,fp
   1e32c:	df000017 	ldw	fp,0(sp)
   1e330:	dec00104 	addi	sp,sp,4
   1e334:	f800283a 	ret

0001e338 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   1e338:	defffe04 	addi	sp,sp,-8
   1e33c:	df000115 	stw	fp,4(sp)
   1e340:	df000104 	addi	fp,sp,4
   1e344:	e13fff15 	stw	r4,-4(fp)
}
   1e348:	0001883a 	nop
   1e34c:	e037883a 	mov	sp,fp
   1e350:	df000017 	ldw	fp,0(sp)
   1e354:	dec00104 	addi	sp,sp,4
   1e358:	f800283a 	ret

0001e35c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1e35c:	defffb04 	addi	sp,sp,-20
   1e360:	dfc00415 	stw	ra,16(sp)
   1e364:	df000315 	stw	fp,12(sp)
   1e368:	df000304 	addi	fp,sp,12
   1e36c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1e370:	d0a00717 	ldw	r2,-32740(gp)
   1e374:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1e378:	00003106 	br	1e440 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   1e37c:	e0bffd17 	ldw	r2,-12(fp)
   1e380:	10800217 	ldw	r2,8(r2)
   1e384:	1009883a 	mov	r4,r2
   1e388:	000b4380 	call	b438 <strlen>
   1e38c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1e390:	e0bffd17 	ldw	r2,-12(fp)
   1e394:	10c00217 	ldw	r3,8(r2)
   1e398:	e0bffe17 	ldw	r2,-8(fp)
   1e39c:	10bfffc4 	addi	r2,r2,-1
   1e3a0:	1885883a 	add	r2,r3,r2
   1e3a4:	10800003 	ldbu	r2,0(r2)
   1e3a8:	10803fcc 	andi	r2,r2,255
   1e3ac:	1080201c 	xori	r2,r2,128
   1e3b0:	10bfe004 	addi	r2,r2,-128
   1e3b4:	10800bd8 	cmpnei	r2,r2,47
   1e3b8:	1000031e 	bne	r2,zero,1e3c8 <alt_find_file+0x6c>
    {
      len -= 1;
   1e3bc:	e0bffe17 	ldw	r2,-8(fp)
   1e3c0:	10bfffc4 	addi	r2,r2,-1
   1e3c4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1e3c8:	e0bffe17 	ldw	r2,-8(fp)
   1e3cc:	e0ffff17 	ldw	r3,-4(fp)
   1e3d0:	1885883a 	add	r2,r3,r2
   1e3d4:	10800003 	ldbu	r2,0(r2)
   1e3d8:	10803fcc 	andi	r2,r2,255
   1e3dc:	1080201c 	xori	r2,r2,128
   1e3e0:	10bfe004 	addi	r2,r2,-128
   1e3e4:	10800be0 	cmpeqi	r2,r2,47
   1e3e8:	1000081e 	bne	r2,zero,1e40c <alt_find_file+0xb0>
   1e3ec:	e0bffe17 	ldw	r2,-8(fp)
   1e3f0:	e0ffff17 	ldw	r3,-4(fp)
   1e3f4:	1885883a 	add	r2,r3,r2
   1e3f8:	10800003 	ldbu	r2,0(r2)
   1e3fc:	10803fcc 	andi	r2,r2,255
   1e400:	1080201c 	xori	r2,r2,128
   1e404:	10bfe004 	addi	r2,r2,-128
   1e408:	10000a1e 	bne	r2,zero,1e434 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   1e40c:	e0bffd17 	ldw	r2,-12(fp)
   1e410:	10800217 	ldw	r2,8(r2)
   1e414:	e0fffe17 	ldw	r3,-8(fp)
   1e418:	180d883a 	mov	r6,r3
   1e41c:	e17fff17 	ldw	r5,-4(fp)
   1e420:	1009883a 	mov	r4,r2
   1e424:	001e6b80 	call	1e6b8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1e428:	1000021e 	bne	r2,zero,1e434 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1e42c:	e0bffd17 	ldw	r2,-12(fp)
   1e430:	00000706 	br	1e450 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   1e434:	e0bffd17 	ldw	r2,-12(fp)
   1e438:	10800017 	ldw	r2,0(r2)
   1e43c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1e440:	e0fffd17 	ldw	r3,-12(fp)
   1e444:	d0a00704 	addi	r2,gp,-32740
   1e448:	18bfcc1e 	bne	r3,r2,1e37c <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1e44c:	0005883a 	mov	r2,zero
}
   1e450:	e037883a 	mov	sp,fp
   1e454:	dfc00117 	ldw	ra,4(sp)
   1e458:	df000017 	ldw	fp,0(sp)
   1e45c:	dec00204 	addi	sp,sp,8
   1e460:	f800283a 	ret

0001e464 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1e464:	defff904 	addi	sp,sp,-28
   1e468:	dfc00615 	stw	ra,24(sp)
   1e46c:	df000515 	stw	fp,20(sp)
   1e470:	df000504 	addi	fp,sp,20
   1e474:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1e478:	00bffa04 	movi	r2,-24
   1e47c:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   1e480:	d0a81617 	ldw	r2,-24488(gp)
   1e484:	e0bffd15 	stw	r2,-12(fp)
   1e488:	e03ffe0d 	sth	zero,-8(fp)
   1e48c:	e0bffe0b 	ldhu	r2,-8(fp)
   1e490:	e0fffe84 	addi	r3,fp,-6
   1e494:	180d883a 	mov	r6,r3
   1e498:	100b883a 	mov	r5,r2
   1e49c:	e13ffd17 	ldw	r4,-12(fp)
   1e4a0:	00187d40 	call	187d4 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1e4a4:	e03ffb15 	stw	zero,-20(fp)
   1e4a8:	00001906 	br	1e510 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   1e4ac:	008000b4 	movhi	r2,2
   1e4b0:	1080fe04 	addi	r2,r2,1016
   1e4b4:	e0fffb17 	ldw	r3,-20(fp)
   1e4b8:	18c00324 	muli	r3,r3,12
   1e4bc:	10c5883a 	add	r2,r2,r3
   1e4c0:	10800017 	ldw	r2,0(r2)
   1e4c4:	10000f1e 	bne	r2,zero,1e504 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   1e4c8:	008000b4 	movhi	r2,2
   1e4cc:	1080fe04 	addi	r2,r2,1016
   1e4d0:	e0fffb17 	ldw	r3,-20(fp)
   1e4d4:	18c00324 	muli	r3,r3,12
   1e4d8:	10c5883a 	add	r2,r2,r3
   1e4dc:	e0ffff17 	ldw	r3,-4(fp)
   1e4e0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1e4e4:	d0e00b17 	ldw	r3,-32724(gp)
   1e4e8:	e0bffb17 	ldw	r2,-20(fp)
   1e4ec:	1880020e 	bge	r3,r2,1e4f8 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   1e4f0:	e0bffb17 	ldw	r2,-20(fp)
   1e4f4:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
   1e4f8:	e0bffb17 	ldw	r2,-20(fp)
   1e4fc:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   1e500:	00000606 	br	1e51c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1e504:	e0bffb17 	ldw	r2,-20(fp)
   1e508:	10800044 	addi	r2,r2,1
   1e50c:	e0bffb15 	stw	r2,-20(fp)
   1e510:	e0bffb17 	ldw	r2,-20(fp)
   1e514:	10800810 	cmplti	r2,r2,32
   1e518:	103fe41e 	bne	r2,zero,1e4ac <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   1e51c:	d0a81617 	ldw	r2,-24488(gp)
   1e520:	1009883a 	mov	r4,r2
   1e524:	0018b4c0 	call	18b4c <OSSemPost>

  return rc;
   1e528:	e0bffc17 	ldw	r2,-16(fp)
}
   1e52c:	e037883a 	mov	sp,fp
   1e530:	dfc00117 	ldw	ra,4(sp)
   1e534:	df000017 	ldw	fp,0(sp)
   1e538:	dec00204 	addi	sp,sp,8
   1e53c:	f800283a 	ret

0001e540 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1e540:	defffb04 	addi	sp,sp,-20
   1e544:	df000415 	stw	fp,16(sp)
   1e548:	df000404 	addi	fp,sp,16
   1e54c:	e13ffe15 	stw	r4,-8(fp)
   1e550:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1e554:	e0bfff17 	ldw	r2,-4(fp)
   1e558:	10840070 	cmpltui	r2,r2,4097
   1e55c:	1000021e 	bne	r2,zero,1e568 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1e560:	00840004 	movi	r2,4096
   1e564:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1e568:	e0fffe17 	ldw	r3,-8(fp)
   1e56c:	e0bfff17 	ldw	r2,-4(fp)
   1e570:	1885883a 	add	r2,r3,r2
   1e574:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1e578:	e0bffe17 	ldw	r2,-8(fp)
   1e57c:	e0bffc15 	stw	r2,-16(fp)
   1e580:	00000506 	br	1e598 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1e584:	e0bffc17 	ldw	r2,-16(fp)
   1e588:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1e58c:	e0bffc17 	ldw	r2,-16(fp)
   1e590:	10800804 	addi	r2,r2,32
   1e594:	e0bffc15 	stw	r2,-16(fp)
   1e598:	e0fffc17 	ldw	r3,-16(fp)
   1e59c:	e0bffd17 	ldw	r2,-12(fp)
   1e5a0:	18bff836 	bltu	r3,r2,1e584 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1e5a4:	e0bffe17 	ldw	r2,-8(fp)
   1e5a8:	108007cc 	andi	r2,r2,31
   1e5ac:	10000226 	beq	r2,zero,1e5b8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1e5b0:	e0bffc17 	ldw	r2,-16(fp)
   1e5b4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1e5b8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1e5bc:	0001883a 	nop
   1e5c0:	e037883a 	mov	sp,fp
   1e5c4:	df000017 	ldw	fp,0(sp)
   1e5c8:	dec00104 	addi	sp,sp,4
   1e5cc:	f800283a 	ret

0001e5d0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1e5d0:	defffe04 	addi	sp,sp,-8
   1e5d4:	df000115 	stw	fp,4(sp)
   1e5d8:	df000104 	addi	fp,sp,4
   1e5dc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   1e5e0:	e0bfff17 	ldw	r2,-4(fp)
   1e5e4:	10bffe84 	addi	r2,r2,-6
   1e5e8:	10c00428 	cmpgeui	r3,r2,16
   1e5ec:	18001a1e 	bne	r3,zero,1e658 <alt_exception_cause_generated_bad_addr+0x88>
   1e5f0:	100690ba 	slli	r3,r2,2
   1e5f4:	008000b4 	movhi	r2,2
   1e5f8:	10b98204 	addi	r2,r2,-6648
   1e5fc:	1885883a 	add	r2,r3,r2
   1e600:	10800017 	ldw	r2,0(r2)
   1e604:	1000683a 	jmp	r2
   1e608:	0001e648 	cmpgei	zero,zero,1945
   1e60c:	0001e648 	cmpgei	zero,zero,1945
   1e610:	0001e658 	cmpnei	zero,zero,1945
   1e614:	0001e658 	cmpnei	zero,zero,1945
   1e618:	0001e658 	cmpnei	zero,zero,1945
   1e61c:	0001e648 	cmpgei	zero,zero,1945
   1e620:	0001e650 	cmplti	zero,zero,1945
   1e624:	0001e658 	cmpnei	zero,zero,1945
   1e628:	0001e648 	cmpgei	zero,zero,1945
   1e62c:	0001e648 	cmpgei	zero,zero,1945
   1e630:	0001e658 	cmpnei	zero,zero,1945
   1e634:	0001e648 	cmpgei	zero,zero,1945
   1e638:	0001e650 	cmplti	zero,zero,1945
   1e63c:	0001e658 	cmpnei	zero,zero,1945
   1e640:	0001e658 	cmpnei	zero,zero,1945
   1e644:	0001e648 	cmpgei	zero,zero,1945
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1e648:	00800044 	movi	r2,1
   1e64c:	00000306 	br	1e65c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1e650:	0005883a 	mov	r2,zero
   1e654:	00000106 	br	1e65c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1e658:	0005883a 	mov	r2,zero
  }
}
   1e65c:	e037883a 	mov	sp,fp
   1e660:	df000017 	ldw	fp,0(sp)
   1e664:	dec00104 	addi	sp,sp,4
   1e668:	f800283a 	ret

0001e66c <atexit>:
   1e66c:	200b883a 	mov	r5,r4
   1e670:	000f883a 	mov	r7,zero
   1e674:	000d883a 	mov	r6,zero
   1e678:	0009883a 	mov	r4,zero
   1e67c:	001e7341 	jmpi	1e734 <__register_exitproc>

0001e680 <exit>:
   1e680:	defffe04 	addi	sp,sp,-8
   1e684:	000b883a 	mov	r5,zero
   1e688:	dc000015 	stw	r16,0(sp)
   1e68c:	dfc00115 	stw	ra,4(sp)
   1e690:	2021883a 	mov	r16,r4
   1e694:	001e84c0 	call	1e84c <__call_exitprocs>
   1e698:	008000b4 	movhi	r2,2
   1e69c:	10863d04 	addi	r2,r2,6388
   1e6a0:	11000017 	ldw	r4,0(r2)
   1e6a4:	20800f17 	ldw	r2,60(r4)
   1e6a8:	10000126 	beq	r2,zero,1e6b0 <exit+0x30>
   1e6ac:	103ee83a 	callr	r2
   1e6b0:	8009883a 	mov	r4,r16
   1e6b4:	001e9cc0 	call	1e9cc <_exit>

0001e6b8 <memcmp>:
   1e6b8:	01c000c4 	movi	r7,3
   1e6bc:	3980192e 	bgeu	r7,r6,1e724 <memcmp+0x6c>
   1e6c0:	2144b03a 	or	r2,r4,r5
   1e6c4:	11c4703a 	and	r2,r2,r7
   1e6c8:	10000f26 	beq	r2,zero,1e708 <memcmp+0x50>
   1e6cc:	20800003 	ldbu	r2,0(r4)
   1e6d0:	28c00003 	ldbu	r3,0(r5)
   1e6d4:	10c0151e 	bne	r2,r3,1e72c <memcmp+0x74>
   1e6d8:	31bfff84 	addi	r6,r6,-2
   1e6dc:	01ffffc4 	movi	r7,-1
   1e6e0:	00000406 	br	1e6f4 <memcmp+0x3c>
   1e6e4:	20800003 	ldbu	r2,0(r4)
   1e6e8:	28c00003 	ldbu	r3,0(r5)
   1e6ec:	31bfffc4 	addi	r6,r6,-1
   1e6f0:	10c00e1e 	bne	r2,r3,1e72c <memcmp+0x74>
   1e6f4:	21000044 	addi	r4,r4,1
   1e6f8:	29400044 	addi	r5,r5,1
   1e6fc:	31fff91e 	bne	r6,r7,1e6e4 <memcmp+0x2c>
   1e700:	0005883a 	mov	r2,zero
   1e704:	f800283a 	ret
   1e708:	20c00017 	ldw	r3,0(r4)
   1e70c:	28800017 	ldw	r2,0(r5)
   1e710:	18bfee1e 	bne	r3,r2,1e6cc <memcmp+0x14>
   1e714:	31bfff04 	addi	r6,r6,-4
   1e718:	21000104 	addi	r4,r4,4
   1e71c:	29400104 	addi	r5,r5,4
   1e720:	39bff936 	bltu	r7,r6,1e708 <memcmp+0x50>
   1e724:	303fe91e 	bne	r6,zero,1e6cc <memcmp+0x14>
   1e728:	003ff506 	br	1e700 <memcmp+0x48>
   1e72c:	10c5c83a 	sub	r2,r2,r3
   1e730:	f800283a 	ret

0001e734 <__register_exitproc>:
   1e734:	defffa04 	addi	sp,sp,-24
   1e738:	dc000315 	stw	r16,12(sp)
   1e73c:	040000b4 	movhi	r16,2
   1e740:	84063d04 	addi	r16,r16,6388
   1e744:	80c00017 	ldw	r3,0(r16)
   1e748:	dc400415 	stw	r17,16(sp)
   1e74c:	dfc00515 	stw	ra,20(sp)
   1e750:	18805217 	ldw	r2,328(r3)
   1e754:	2023883a 	mov	r17,r4
   1e758:	10003726 	beq	r2,zero,1e838 <__register_exitproc+0x104>
   1e75c:	10c00117 	ldw	r3,4(r2)
   1e760:	010007c4 	movi	r4,31
   1e764:	20c00e16 	blt	r4,r3,1e7a0 <__register_exitproc+0x6c>
   1e768:	1a000044 	addi	r8,r3,1
   1e76c:	8800221e 	bne	r17,zero,1e7f8 <__register_exitproc+0xc4>
   1e770:	18c00084 	addi	r3,r3,2
   1e774:	18c7883a 	add	r3,r3,r3
   1e778:	18c7883a 	add	r3,r3,r3
   1e77c:	12000115 	stw	r8,4(r2)
   1e780:	10c7883a 	add	r3,r2,r3
   1e784:	19400015 	stw	r5,0(r3)
   1e788:	0005883a 	mov	r2,zero
   1e78c:	dfc00517 	ldw	ra,20(sp)
   1e790:	dc400417 	ldw	r17,16(sp)
   1e794:	dc000317 	ldw	r16,12(sp)
   1e798:	dec00604 	addi	sp,sp,24
   1e79c:	f800283a 	ret
   1e7a0:	00800034 	movhi	r2,0
   1e7a4:	10800004 	addi	r2,r2,0
   1e7a8:	10002626 	beq	r2,zero,1e844 <__register_exitproc+0x110>
   1e7ac:	01006404 	movi	r4,400
   1e7b0:	d9400015 	stw	r5,0(sp)
   1e7b4:	d9800115 	stw	r6,4(sp)
   1e7b8:	d9c00215 	stw	r7,8(sp)
   1e7bc:	00000000 	call	0 <__alt_mem_SDRAM>
   1e7c0:	d9400017 	ldw	r5,0(sp)
   1e7c4:	d9800117 	ldw	r6,4(sp)
   1e7c8:	d9c00217 	ldw	r7,8(sp)
   1e7cc:	10001d26 	beq	r2,zero,1e844 <__register_exitproc+0x110>
   1e7d0:	81000017 	ldw	r4,0(r16)
   1e7d4:	10000115 	stw	zero,4(r2)
   1e7d8:	02000044 	movi	r8,1
   1e7dc:	22405217 	ldw	r9,328(r4)
   1e7e0:	0007883a 	mov	r3,zero
   1e7e4:	12400015 	stw	r9,0(r2)
   1e7e8:	20805215 	stw	r2,328(r4)
   1e7ec:	10006215 	stw	zero,392(r2)
   1e7f0:	10006315 	stw	zero,396(r2)
   1e7f4:	883fde26 	beq	r17,zero,1e770 <__register_exitproc+0x3c>
   1e7f8:	18c9883a 	add	r4,r3,r3
   1e7fc:	2109883a 	add	r4,r4,r4
   1e800:	1109883a 	add	r4,r2,r4
   1e804:	21802215 	stw	r6,136(r4)
   1e808:	01800044 	movi	r6,1
   1e80c:	12406217 	ldw	r9,392(r2)
   1e810:	30cc983a 	sll	r6,r6,r3
   1e814:	4992b03a 	or	r9,r9,r6
   1e818:	12406215 	stw	r9,392(r2)
   1e81c:	21c04215 	stw	r7,264(r4)
   1e820:	01000084 	movi	r4,2
   1e824:	893fd21e 	bne	r17,r4,1e770 <__register_exitproc+0x3c>
   1e828:	11006317 	ldw	r4,396(r2)
   1e82c:	218cb03a 	or	r6,r4,r6
   1e830:	11806315 	stw	r6,396(r2)
   1e834:	003fce06 	br	1e770 <__register_exitproc+0x3c>
   1e838:	18805304 	addi	r2,r3,332
   1e83c:	18805215 	stw	r2,328(r3)
   1e840:	003fc606 	br	1e75c <__register_exitproc+0x28>
   1e844:	00bfffc4 	movi	r2,-1
   1e848:	003fd006 	br	1e78c <__register_exitproc+0x58>

0001e84c <__call_exitprocs>:
   1e84c:	defff504 	addi	sp,sp,-44
   1e850:	df000915 	stw	fp,36(sp)
   1e854:	dd400615 	stw	r21,24(sp)
   1e858:	dc800315 	stw	r18,12(sp)
   1e85c:	dfc00a15 	stw	ra,40(sp)
   1e860:	ddc00815 	stw	r23,32(sp)
   1e864:	dd800715 	stw	r22,28(sp)
   1e868:	dd000515 	stw	r20,20(sp)
   1e86c:	dcc00415 	stw	r19,16(sp)
   1e870:	dc400215 	stw	r17,8(sp)
   1e874:	dc000115 	stw	r16,4(sp)
   1e878:	d9000015 	stw	r4,0(sp)
   1e87c:	2839883a 	mov	fp,r5
   1e880:	04800044 	movi	r18,1
   1e884:	057fffc4 	movi	r21,-1
   1e888:	008000b4 	movhi	r2,2
   1e88c:	10863d04 	addi	r2,r2,6388
   1e890:	12000017 	ldw	r8,0(r2)
   1e894:	45005217 	ldw	r20,328(r8)
   1e898:	44c05204 	addi	r19,r8,328
   1e89c:	a0001c26 	beq	r20,zero,1e910 <__call_exitprocs+0xc4>
   1e8a0:	a0800117 	ldw	r2,4(r20)
   1e8a4:	15ffffc4 	addi	r23,r2,-1
   1e8a8:	b8000d16 	blt	r23,zero,1e8e0 <__call_exitprocs+0x94>
   1e8ac:	14000044 	addi	r16,r2,1
   1e8b0:	8421883a 	add	r16,r16,r16
   1e8b4:	8421883a 	add	r16,r16,r16
   1e8b8:	84402004 	addi	r17,r16,128
   1e8bc:	a463883a 	add	r17,r20,r17
   1e8c0:	a421883a 	add	r16,r20,r16
   1e8c4:	e0001e26 	beq	fp,zero,1e940 <__call_exitprocs+0xf4>
   1e8c8:	80804017 	ldw	r2,256(r16)
   1e8cc:	e0801c26 	beq	fp,r2,1e940 <__call_exitprocs+0xf4>
   1e8d0:	bdffffc4 	addi	r23,r23,-1
   1e8d4:	843fff04 	addi	r16,r16,-4
   1e8d8:	8c7fff04 	addi	r17,r17,-4
   1e8dc:	bd7ff91e 	bne	r23,r21,1e8c4 <__call_exitprocs+0x78>
   1e8e0:	00800034 	movhi	r2,0
   1e8e4:	10800004 	addi	r2,r2,0
   1e8e8:	10000926 	beq	r2,zero,1e910 <__call_exitprocs+0xc4>
   1e8ec:	a0800117 	ldw	r2,4(r20)
   1e8f0:	1000301e 	bne	r2,zero,1e9b4 <__call_exitprocs+0x168>
   1e8f4:	a0800017 	ldw	r2,0(r20)
   1e8f8:	10003226 	beq	r2,zero,1e9c4 <__call_exitprocs+0x178>
   1e8fc:	a009883a 	mov	r4,r20
   1e900:	98800015 	stw	r2,0(r19)
   1e904:	00000000 	call	0 <__alt_mem_SDRAM>
   1e908:	9d000017 	ldw	r20,0(r19)
   1e90c:	a03fe41e 	bne	r20,zero,1e8a0 <__call_exitprocs+0x54>
   1e910:	dfc00a17 	ldw	ra,40(sp)
   1e914:	df000917 	ldw	fp,36(sp)
   1e918:	ddc00817 	ldw	r23,32(sp)
   1e91c:	dd800717 	ldw	r22,28(sp)
   1e920:	dd400617 	ldw	r21,24(sp)
   1e924:	dd000517 	ldw	r20,20(sp)
   1e928:	dcc00417 	ldw	r19,16(sp)
   1e92c:	dc800317 	ldw	r18,12(sp)
   1e930:	dc400217 	ldw	r17,8(sp)
   1e934:	dc000117 	ldw	r16,4(sp)
   1e938:	dec00b04 	addi	sp,sp,44
   1e93c:	f800283a 	ret
   1e940:	a0800117 	ldw	r2,4(r20)
   1e944:	80c00017 	ldw	r3,0(r16)
   1e948:	10bfffc4 	addi	r2,r2,-1
   1e94c:	15c01426 	beq	r2,r23,1e9a0 <__call_exitprocs+0x154>
   1e950:	80000015 	stw	zero,0(r16)
   1e954:	183fde26 	beq	r3,zero,1e8d0 <__call_exitprocs+0x84>
   1e958:	95c8983a 	sll	r4,r18,r23
   1e95c:	a0806217 	ldw	r2,392(r20)
   1e960:	a5800117 	ldw	r22,4(r20)
   1e964:	2084703a 	and	r2,r4,r2
   1e968:	10000b26 	beq	r2,zero,1e998 <__call_exitprocs+0x14c>
   1e96c:	a0806317 	ldw	r2,396(r20)
   1e970:	2088703a 	and	r4,r4,r2
   1e974:	20000c1e 	bne	r4,zero,1e9a8 <__call_exitprocs+0x15c>
   1e978:	89400017 	ldw	r5,0(r17)
   1e97c:	d9000017 	ldw	r4,0(sp)
   1e980:	183ee83a 	callr	r3
   1e984:	a0800117 	ldw	r2,4(r20)
   1e988:	15bfbf1e 	bne	r2,r22,1e888 <__call_exitprocs+0x3c>
   1e98c:	98800017 	ldw	r2,0(r19)
   1e990:	153fcf26 	beq	r2,r20,1e8d0 <__call_exitprocs+0x84>
   1e994:	003fbc06 	br	1e888 <__call_exitprocs+0x3c>
   1e998:	183ee83a 	callr	r3
   1e99c:	003ff906 	br	1e984 <__call_exitprocs+0x138>
   1e9a0:	a5c00115 	stw	r23,4(r20)
   1e9a4:	003feb06 	br	1e954 <__call_exitprocs+0x108>
   1e9a8:	89000017 	ldw	r4,0(r17)
   1e9ac:	183ee83a 	callr	r3
   1e9b0:	003ff406 	br	1e984 <__call_exitprocs+0x138>
   1e9b4:	a0800017 	ldw	r2,0(r20)
   1e9b8:	a027883a 	mov	r19,r20
   1e9bc:	1029883a 	mov	r20,r2
   1e9c0:	003fb606 	br	1e89c <__call_exitprocs+0x50>
   1e9c4:	0005883a 	mov	r2,zero
   1e9c8:	003ffb06 	br	1e9b8 <__call_exitprocs+0x16c>

0001e9cc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1e9cc:	defffd04 	addi	sp,sp,-12
   1e9d0:	df000215 	stw	fp,8(sp)
   1e9d4:	df000204 	addi	fp,sp,8
   1e9d8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1e9dc:	d0281e45 	stb	zero,-24455(gp)
   1e9e0:	e0bfff17 	ldw	r2,-4(fp)
   1e9e4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1e9e8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1e9ec:	10000226 	beq	r2,zero,1e9f8 <_exit+0x2c>
    ALT_SIM_FAIL();
   1e9f0:	002af070 	cmpltui	zero,zero,43969
   1e9f4:	00000106 	br	1e9fc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   1e9f8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1e9fc:	003fff06 	br	1e9fc <_exit+0x30>

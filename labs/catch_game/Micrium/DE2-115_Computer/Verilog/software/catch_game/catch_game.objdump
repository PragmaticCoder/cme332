
catch_game.elf:     file format elf32-littlenios2
catch_game.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001fae4 memsz 0x0001fae4 flags r-x
    LOAD off    0x00020b04 vaddr 0x0001fb04 paddr 0x000219d0 align 2**12
         filesz 0x00001ecc memsz 0x00001ecc flags rw-
    LOAD off    0x0002389c vaddr 0x0002389c paddr 0x0002389c align 2**12
         filesz 0x00000000 memsz 0x00011484 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001e7d8  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000010e4  0001ea20  0001ea20  0001fa20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ecc  0001fb04  000219d0  00020b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00011484  0002389c  0002389c  0002389c  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00034d20  00034d20  000229d0  2**0
                  CONTENTS
  7 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM 00000000  09000000  09000000  000229d0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000229d0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001170  00000000  00000000  000229f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00034a1b  00000000  00000000  00023b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000bf32  00000000  00000000  00058583  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001088f  00000000  00000000  000644b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003cac  00000000  00000000  00074d44  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005a42  00000000  00000000  000789f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001cd3e  00000000  00000000  0007e432  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  0009b170  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001aa8  00000000  00000000  0009b190  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  000a2a25  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  000a2a2b  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000a2a30  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000a2a31  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000a2a32  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000a2a36  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000a2a3a  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000a2a3e  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000a2a47  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000a2a50  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000f  00000000  00000000  000a2a59  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000044  00000000  00000000  000a2a68  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     001d2080  00000000  00000000  000a2aac  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
0001ea20 l    d  .rodata	00000000 .rodata
0001fb04 l    d  .rwdata	00000000 .rwdata
0002389c l    d  .bss	00000000 .bss
00034d20 l    d  .SDRAM	00000000 .SDRAM
09000000 l    d  .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM	00000000 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../catch_game_bsp//obj/HAL/src/crt0.o
00000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 utils.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 impure.c
0001fb4c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 strerror.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001f5a6 l     O .rodata	00000010 zeroes.4389
0001f5b6 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 u_strerr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001f5c6 l     O .rodata	00000010 zeroes.4404
00006ce8 l     F .text	000000bc __sbprintf
0001f5d6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00006ef8 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00008a28 l     F .text	00000008 __fp_unlock
00008a3c l     F .text	0000019c __sinit.part.1
00008bd8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
0001ff90 l     O .rwdata	00000020 lc_ctype_charset
0001ff70 l     O .rwdata	00000020 lc_message_charset
0001ffb0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0001f604 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001f738 l     O .rodata	00000010 blanks.4332
0001f728 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
0000c8fc l     F .text	000000fc __sprint_r.part.0
0001f758 l     O .rodata	00000010 blanks.4348
0001f748 l     O .rodata	00000010 zeroes.4349
0000de88 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
000126c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000127cc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000127f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000128e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000129c4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00012ab0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00012c7c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00021944 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00012ec8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00021948 l     O .rwdata	00000004 lockid
00023964 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0002194c l     O .rwdata	00000004 lockid
0002396c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
000148f8 l     F .text	00000048 OS_InitMisc
00014940 l     F .text	0000006c OS_InitRdyList
00014aac l     F .text	000000e4 OS_InitTCBList
00014818 l     F .text	000000e0 OS_InitEventList
000149ac l     F .text	00000080 OS_InitTaskIdle
00014a2c l     F .text	00000080 OS_InitTaskStat
00014d1c l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00016a3c l     F .text	000000f4 OS_FlagTaskRdy
000167fc l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001aaec l     F .text	00000034 alt_dev_reg
00020598 l     O .rwdata	0000106c JTAG_UART
00021604 l     O .rwdata	00000030 AV_Config
00021634 l     O .rwdata	00000030 Audio_Subsystem_Audio
00021664 l     O .rwdata	0000002c Char_LCD_16x2
00021690 l     O .rwdata	0000002c IrDA
000216bc l     O .rwdata	00000038 PS2_Port
000216f4 l     O .rwdata	00000038 PS2_Port_Dual
0002172c l     O .rwdata	0000002c Serial_Port
00021758 l     O .rwdata	00000034 USB
0002178c l     O .rwdata	0000005c VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA
000217e8 l     O .rwdata	0000005c VGA_Subsystem_VGA_Pixel_DMA
00021844 l     O .rwdata	0000005c Video_In_Subsystem_Video_In_DMA
000218a0 l     O .rwdata	00000044 VGA_Subsystem_VGA_Pixel_RGB_Resampler
000218e4 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001b764 l     F .text	000002a8 altera_avalon_jtag_uart_irq
0001ba0c l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001c1e8 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001d6e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001d948 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001dc08 l     F .text	0000003c alt_get_errno
0001dc44 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000239d0 g     O .bss	00000004 alt_instruction_exception_handler
0002389c g     O .bss	00000004 basket_pos_y
0000b000 g     F .text	00000074 _mprec_log10
0002199a g     O .rwdata	00000002 OSTaskNameSize
0000b0ec g     F .text	0000008c __any_on
0000e8e0 g     F .text	00000054 _isatty_r
0001f610 g     O .rodata	00000028 __mprec_tinytens
00012bc0 g     F .text	000000bc alt_main
000238a0 g     O .bss	00000004 video_resolution
00034c20 g     O .bss	00000100 alt_irq
0001cda4 g     F .text	00000060 alt_up_ps2_disable_read_interrupt
0000e934 g     F .text	00000060 _lseek_r
0001725c g     F .text	000000cc OS_MemInit
000238a4 g     O .bss	00000004 SEM_falling_blocks
000219d0 g       *ABS*	00000000 __flash_rwdata_start
0001aa8c g     F .text	00000060 OSTimeSet
0001c34c g     F .text	00000040 alt_up_character_lcd_send_cmd
000111ec g     F .text	00000088 .hidden __eqdf2
0001356c g     F .text	00000610 OSEventPendMulti
00034d20 g       *ABS*	00000000 __alt_heap_start
0001e250 g     F .text	00000024 OSTaskCreateHook
000238a8 g     O .bss	00000004 pos1_x
00021972 g     O .rwdata	00000002 OSMboxEn
00013bd4 g     F .text	0000004c OSIntEnter
0000f20c g     F .text	0000009c _wcrtomb_r
000238ac g     O .bss	00000004 pos3_y
0000b318 g     F .text	0000005c __sseek
000238b0 g     O .bss	00000004 right_key_pressed
00008d78 g     F .text	00000010 __sinit
0000f0b4 g     F .text	00000140 __swbuf_r
0001cbbc g     F .text	00000034 read_CE_bit
00021982 g     O .rwdata	00000002 OSQEn
00009384 g     F .text	0000007c _setlocale_r
00008be0 g     F .text	00000068 __sfmoreglue
00013240 g     F .text	000000cc __malloc_unlock
0001e2b8 g     F .text	00000020 OSTaskStatHook
0001cf44 g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
0001d438 g     F .text	00000090 alt_up_rs232_read_fd
00023974 g     O .bss	00000001 OSLockNesting
00001be8 g     F .text	000001a4 VGA_display_score
000028d8 g     F .text	0000001c strerror
000219c0 g     O .rwdata	00000002 OSDataSize
00023975 g     O .bss	00000001 OSRunning
00001198 g     F .text	00000070 VGA_clear_game_row
0000e994 g     F .text	0000015c memmove
0001e2f8 g     F .text	00000020 OSInitHookBegin
000219b8 g     O .rwdata	00000002 OSTmrSize
00008d60 g     F .text	00000018 _cleanup
00002198 g     F .text	000000e4 snprintf
0000a17c g     F .text	000000a8 _Balloc
000238b4 g     O .bss	00000004 pos3_val
000238b8 g     O .bss	00000004 screen_x
00023978 g     O .bss	00000004 OSIdleCtr
00011274 g     F .text	000000dc .hidden __gtdf2
0001e000 g     F .text	00000024 altera_nios2_gen2_irq_init
0001e0d0 g       .text	00000000 OSStartTsk
00001fec g     F .text	00000010 __errno
0001c2d8 g     F .text	00000074 get_DDRAM_addr
0001505c g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000001c __reset
000219be g     O .rwdata	00000002 OSTmrWheelTblSize
0000043c g     F .text	000000a0 Task_VGA_init
00000020 g       *ABS*	00000000 __flash_exceptions_start
0002195e g     O .rwdata	00000002 OSEventSize
0002397c g     O .bss	00000001 OSPrioHighRdy
0000e3c8 g     F .text	0000005c _fstat_r
0001e274 g     F .text	00000024 OSTaskDelHook
00023950 g     O .bss	00000004 errno
0000b294 g     F .text	00000008 __seofread
0001e0b0 g       .text	00000000 OSStartHighRdy
00019528 g     F .text	000001e4 OSTaskCreateExt
000238bc g     O .bss	00000004 enter_key_pressed
0000b6c0 g     F .text	0000123c ___svfiprintf_internal_r
00000fbc g     F .text	0000008c VGA_info_right
00016344 g     F .text	00000060 OSFlagPendGetFlagsRdy
0002199e g     O .rwdata	00000002 OSTaskStatStkSize
000154c0 g     F .text	00000308 OSFlagAccept
00017894 g     F .text	000000b8 OSQFlush
00017328 g     F .text	00000140 OSQAccept
0002395c g     O .bss	00000004 alt_argv
00029910 g       *ABS*	00000000 _gp
000238c0 g     O .bss	00000002 background_color
0001937c g     F .text	000001ac OSTaskCreate
00018e8c g     F .text	000004f0 OSTaskChangePrio
00023970 g     O .bss	00000004 alt_heapsem
00015330 g     F .text	00000190 OSDebugInit
0001970c g     F .text	00000344 OSTaskDel
0000054c g     F .text	00000068 Task_read_PS2_Keyboard
000238c4 g     O .bss	00000004 game_hh
00020418 g     O .rwdata	00000180 alt_fd_list
000319fc g     O .bss	00000370 OSFlagTbl
000145f8 g     F .text	000000b8 OS_EventTaskRemove
000238c8 g     O .bss	00000004 SEM_read_KEYs
0001d884 g     F .text	00000090 alt_find_dev
00009f0c g     F .text	00000148 memcpy
00021988 g     O .rwdata	00000002 OSRdyTblSize
0001c4f4 g     F .text	00000050 alt_up_character_lcd_write_fd
00008a30 g     F .text	0000000c _cleanup_r
000124d8 g     F .text	000000dc .hidden __floatsidf
0001da0c g     F .text	0000007c alt_io_redirect
00011350 g     F .text	000000f4 .hidden __ltdf2
0001ea20 g       *ABS*	00000000 __DTOR_END__
0001ca8c g     F .text	00000090 alt_up_irda_write_fd
0001d3c4 g     F .text	00000074 alt_up_rs232_read_data
0001e5f0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0001330c g     F .text	00000120 OSEventNameGet
0002196c g     O .rwdata	00000002 OSFlagMax
0000227c g     F .text	0000065c _strerror_r
0000b178 g     F .text	00000074 __fpclassifyd
0000af5c g     F .text	000000a4 __ratio
00013c20 g     F .text	000000f8 OSIntExit
0000de6c g     F .text	0000001c __vfiprintf_internal
000219a6 g     O .rwdata	00000002 OSTCBSize
0002397d g     O .bss	00000001 OSPrioCur
0001c888 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
0001bc68 g     F .text	000002bc altera_avalon_jtag_uart_read
0000ff9c g     F .text	00000064 .hidden __udivsi3
00012920 g     F .text	000000a4 isatty
00000f5c g     F .text	00000060 VGA_animated_char
0002198c g     O .rwdata	00000002 OSStkWidth
000239fc g     O .bss	00002000 task_vga_init_stk
0001f660 g     O .rodata	000000c8 __mprec_tens
00021980 g     O .rwdata	00000002 OSPtrSize
00009400 g     F .text	0000000c __locale_charset
0000076c g     F .text	00000114 Task_GameState_controller
00021960 g     O .rwdata	00000002 OSEventTblSize
0001c828 g     F .text	00000060 alt_up_irda_disable_read_interrupt
0001e024 g       .text	00000000 OSCtxSw
0001e560 g     F .text	00000090 alt_icache_flush
0002394c g     O .bss	00000004 __malloc_top_pad
00023980 g     O .bss	00000004 OSTCBList
00023954 g     O .bss	00000004 alt_fd_list_lock
0002191c g     O .rwdata	00000004 __mb_cur_max
00009430 g     F .text	0000000c _localeconv_r
0000e424 g     F .text	000004bc __sfvwrite_r
0000a588 g     F .text	0000003c __i2b
00031d6c g     O .bss	00000c30 OSMemTbl
00023984 g     O .bss	00000001 OSTickStepState
0000b1ec g     F .text	00000054 _sbrk_r
00021984 g     O .rwdata	00000002 OSQMax
0003299c g     O .bss	00000800 OSTaskStatStk
00016e98 g     F .text	000000f0 OSMemNameGet
00021964 g     O .rwdata	00000002 OSFlagEn
000238cc g     O .bss	00000004 game_mm
0000eaf0 g     F .text	00000060 _read_r
000219aa g     O .rwdata	00000002 OSTimeTickHookEn
00017d44 g     F .text	00000168 OSQPost
00016b30 g     F .text	000000a4 OS_FlagUnlink
0002193c g     O .rwdata	00000004 alt_max_fd
0001d340 g     F .text	00000044 alt_up_rs232_check_parity
000238d0 g     O .bss	00000004 col_offset
00014be4 g     F .text	00000068 OS_MemCopy
00014c4c g     F .text	000000d0 OS_Sched
0000e0bc g     F .text	000000f0 _fclose_r
00016da8 g     F .text	000000f0 OSMemGet
00019d38 g     F .text	000001b4 OSTaskNameSet
0001cbf0 g     F .text	00000030 read_num_bytes_available
000089f8 g     F .text	00000030 fflush
00023948 g     O .bss	00000004 __malloc_max_sbrked_mem
00023988 g     O .bss	00000004 OSCtxSwCtr
000259fc g     O .bss	00002000 task_disp_vga_char_stk
0001e2d8 g     F .text	00000020 OSTimeTickHook
0001da88 g     F .text	00000180 alt_irq_register
0002196e g     O .rwdata	00000002 OSFlagNameSize
0001cb58 g     F .text	00000034 read_RI_bit
000146b0 g     F .text	00000100 OS_EventTaskRemoveMulti
00010058 g     F .text	000008ac .hidden __adddf3
000238d4 g     O .bss	00000004 game_state
000144a8 g     F .text	00000150 OS_EventTaskWaitMulti
000279fc g     O .bss	00002000 task_falling_blocks
0000ad04 g     F .text	0000010c __b2d
000238d8 g     O .bss	00000004 game_ss
00021986 g     O .rwdata	00000002 OSQSize
0000f96c g     F .text	00000538 .hidden __umoddi3
00012aec g     F .text	000000d4 lseek
000187f4 g     F .text	0000020c OSSemPend
00021914 g     O .rwdata	00000004 _global_impure_ptr
000238dc g     O .bss	00000002 sidebar_color
0000eb50 g     F .text	00000564 _realloc_r
00021970 g     O .rwdata	00000002 OSLowestPrio
00034d20 g       *ABS*	00000000 __bss_end
0001e358 g     F .text	00000024 OSTCBInitHook
000219b6 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0001def8 g     F .text	00000108 alt_tick
0000f3f4 g     F .text	00000578 .hidden __udivdi3
0000e324 g     F .text	00000024 _fputwc_r
00021958 g     O .rwdata	00000002 OSEventEn
0001f638 g     O .rodata	00000028 __mprec_bigtens
0000a36c g     F .text	00000104 __s2b
000219b2 g     O .rwdata	00000002 OSTmrCfgNameSize
000125b4 g     F .text	000000a8 .hidden __floatunsidf
0000aa44 g     F .text	00000060 __mcmp
000238e0 g     O .bss	00000004 SEM_KEY_press
0001cc54 g     F .text	0000002c read_data_byte
00008d98 g     F .text	00000018 __fp_lock_all
0001695c g     F .text	000000e0 OS_FlagInit
0001de5c g     F .text	0000009c alt_alarm_stop
0001cb8c g     F .text	00000030 read_RE_bit
00021994 g     O .rwdata	00000002 OSTaskIdleStkSize
000239c4 g     O .bss	00000004 alt_irq_active
0001842c g     F .text	000000b0 OSSemAccept
00000cec g     F .text	00000094 VGA_text
0001709c g     F .text	000000d8 OSMemPut
00016bd4 g     F .text	000001d4 OSMemCreate
0002398c g     O .bss	00000004 OSIdleCtrMax
0001c8c8 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d8 alt_irq_handler
000203f0 g     O .rwdata	00000028 alt_dev_null
000219a8 g     O .rwdata	00000002 OSTicksPerSec
0001c794 g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
0001e024 g       .text	00000000 OSIntCtxSw
0001ce04 g     F .text	00000074 alt_up_ps2_write_data_byte
0001d6c4 g     F .text	00000020 alt_dcache_flush_all
0000a470 g     F .text	00000068 __hi0bits
000238e4 g     O .bss	00000004 pos2_val
00012458 g     F .text	00000080 .hidden __fixdfsi
00023990 g     O .bss	00000004 OSTCBFreeList
000219d0 g       *ABS*	00000000 __ram_rwdata_end
00018a00 g     F .text	0000016c OSSemPendAbort
00021934 g     O .rwdata	00000008 alt_dev_list
000238e8 g     O .bss	00000004 score
00012f04 g     F .text	000000f8 write
000219ac g     O .rwdata	00000002 OSVersionNbr
0001fb04 g       *ABS*	00000000 __ram_rodata_end
00012834 g     F .text	000000b0 fstat
00002024 g     F .text	00000024 fprintf
0001d4c8 g     F .text	00000094 alt_up_rs232_write_fd
000238ec g     O .bss	00000004 pos2_y
000238f0 g     O .bss	00000004 res_offset
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00011350 g     F .text	000000f4 .hidden __ledf2
000238f4 g     O .bss	00000002 basket_color
00021954 g     O .rwdata	00000004 OSEndiannessTest
0000a7bc g     F .text	00000140 __pow5mult
0000ca10 g     F .text	0000145c ___vfiprintf_internal_r
00023940 g     O .bss	00000004 __nlocale_changed
00010000 g     F .text	00000058 .hidden __umodsi3
00021966 g     O .rwdata	00000002 OSFlagGrpSize
00034d20 g       *ABS*	00000000 end
0001d134 g     F .text	00000098 alt_up_ps2_write_fd
0001c904 g     F .text	00000044 alt_up_irda_check_parity
00001100 g     F .text	00000098 VGA_clear_screen
00000364 g     F .text	000000d8 Task_move_basket
000299fc g     O .bss	00002000 task_move_basket_stk
0001b628 g     F .text	0000013c altera_avalon_jtag_uart_init
00014eb4 g     F .text	000000dc OS_TaskStat
0002b9fc g     O .bss	00002000 task_ps2_keyboard_stk
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
0001ea20 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0001c264 g     F .text	00000074 alt_avalon_timer_sc_init
0001265c g     F .text	00000064 .hidden __clzsi2
000020c0 g     F .text	000000d8 _snprintf_r
0001bf24 g     F .text	000002c4 altera_avalon_jtag_uart_write
00008d88 g     F .text	00000004 __sfp_lock_acquire
00009e28 g     F .text	000000e4 memchr
00014b90 g     F .text	00000054 OS_MemClr
0001c400 g     F .text	0000007c alt_up_character_lcd_write
00004ad4 g     F .text	000021f8 ___vfprintf_internal_r
0001e0f4 g     F .text	0000015c OSTaskStkInit
00008eec g     F .text	00000310 _free_r
0001fb04 g     O .rwdata	00000046 clear_row_text
0000940c g     F .text	00000010 __locale_mb_cur_max
00014200 g     F .text	00000198 OS_EventTaskRdy
000238f8 g     O .bss	00000004 screen_y
0001e86c g     F .text	00000180 __call_exitprocs
00023994 g     O .bss	00000001 OSCPUUsage
0002d9fc g     O .bss	00002000 task_game_timer_stk
0002f9fc g     O .bss	00002000 task_state_controller_stk
0002393c g     O .bss	00000004 __mlocale_changed
00021920 g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	0000003c _start
000239c8 g     O .bss	00000004 _alt_tick_rate
0001794c g     F .text	0000028c OSQPend
00004acc g     F .text	00000008 _user_strerror
0001a5f8 g     F .text	00000104 OSTimeDly
00002060 g     F .text	00000060 rand
0000a8fc g     F .text	00000148 __lshift
000239cc g     O .bss	00000004 _alt_nticks
00012cb8 g     F .text	000000fc read
0001ab58 g     F .text	0000096c alt_sys_init
0001c644 g     F .text	0000008c alt_up_character_lcd_shift_display
0000b4f0 g     F .text	000001d0 __ssprint_r
0001e754 g     F .text	00000118 __register_exitproc
000238fc g     O .bss	00000004 any_key_pressed
00023995 g     O .bss	00000001 OSTaskCtr
0001d050 g     F .text	00000058 alt_up_ps2_clear_fifo
0001d304 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00000d80 g     F .text	00000138 VGA_box
0001a6fc g     F .text	00000160 OSTimeDlyHMSM
0000a5c4 g     F .text	000001f8 __multiply
0001c6d0 g     F .text	0000008c alt_up_character_lcd_erase_pos
0001bb10 g     F .text	00000068 altera_avalon_jtag_uart_close
0001fb04 g       *ABS*	00000000 __ram_rwdata_start
0001ea20 g       *ABS*	00000000 __ram_rodata_start
000239d4 g     O .bss	00000028 __malloc_current_mallinfo
0002195a g     O .rwdata	00000002 OSEventMax
0000ae10 g     F .text	0000014c __d2b
00018b6c g     F .text	00000110 OSSemPost
00013da4 g     F .text	000000dc OSSchedUnlock
0001b4c4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001e484 g     F .text	000000dc alt_get_fd
00023998 g     O .bss	00000004 OSMemFreeList
00013ef0 g     F .text	000000b0 OSStatInit
00016738 g     F .text	000000c4 OSFlagQuery
00021990 g     O .rwdata	00000002 OSTaskCreateExtEn
0000dfa4 g     F .text	00000054 _close_r
0001e6d8 g     F .text	0000007c memcmp
000141e0 g     F .text	00000020 OS_Dummy
0001b584 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00001208 g     F .text	00000190 get_data_bits
00034d20 g       *ABS*	00000000 __alt_stack_base
0001b5d4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00023900 g     O .bss	00000004 basket_pos_x
0001c7cc g     F .text	0000005c alt_up_irda_enable_read_interrupt
00006da4 g     F .text	00000154 __swsetup_r
0003319c g     O .bss	000001e0 OSQTbl
00010904 g     F .text	000008e8 .hidden __divdf3
00008c48 g     F .text	00000118 __sfp
0000b074 g     F .text	00000078 __copybits
0001ffe8 g     O .rwdata	00000408 __malloc_av_
00008d94 g     F .text	00000004 __sinit_lock_release
0002399c g     O .bss	00000004 OSTCBHighRdy
00011444 g     F .text	00000718 .hidden __muldf3
0000b240 g     F .text	00000054 __sread
000239a0 g     O .bss	00000004 OSQFreeList
0001d264 g     F .text	00000060 alt_up_rs232_disable_read_interrupt
0001e37c g     F .text	00000108 alt_find_file
0001d720 g     F .text	000000a4 alt_dev_llist_insert
00013120 g     F .text	00000120 __malloc_lock
00001ffc g     F .text	00000028 _fprintf_r
00012e18 g     F .text	000000b0 sbrk
000028f4 g     F .text	000021d8 ___svfprintf_internal_r
0001342c g     F .text	00000140 OSEventNameSet
0000899c g     F .text	0000005c _fflush_r
0000dff8 g     F .text	000000c4 _calloc_r
000239a4 g     O .bss	00000001 OSRdyGrp
00000c84 g     F .text	00000068 get_State_name
0002389c g       *ABS*	00000000 __bss_start
0000a054 g     F .text	00000128 memset
00023904 g     O .bss	00000001 err
00000880 g     F .text	00000404 main
00023960 g     O .bss	00000004 alt_envp
00023944 g     O .bss	00000004 __malloc_max_total_mem
000004dc g     F .text	00000070 Task_VGA_char
0001b524 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000f1f4 g     F .text	00000018 __swbuf
00002048 g     F .text	00000018 srand
0001f884 g     O .rodata	00000100 OSUnMapTbl
0002198a g     O .rwdata	00000002 OSSemEn
0001c5b8 g     F .text	0000008c alt_up_character_lcd_shift_cursor
000163a4 g     F .text	00000394 OSFlagPost
0000b374 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0000e1ac g     F .text	00000014 fclose
00014398 g     F .text	00000110 OS_EventTaskWait
00023908 g     O .bss	00000004 left_key_pressed
0001cfe0 g     F .text	00000070 alt_up_ps2_read_data_byte
00014f90 g     F .text	000000cc OS_TaskStatStkChk
00019a50 g     F .text	00000150 OSTaskDelReq
000070f8 g     F .text	00001688 _dtoa_r
0000961c g     F .text	0000080c _malloc_r
0000f368 g     F .text	00000030 __ascii_wctomb
0002390c g     O .bss	00000004 pos1_y
00021940 g     O .rwdata	00000004 alt_errno
00013e80 g     F .text	00000070 OSStart
000130c0 g     F .text	00000060 __env_unlock
000091fc g     F .text	000000c4 _fwalk
00019eec g     F .text	000001d4 OSTaskResume
00017174 g     F .text	000000e8 OSMemQuery
0002199c g     O .rwdata	00000002 OSTaskStatEn
0001c948 g     F .text	00000040 alt_up_irda_write_data
00021976 g     O .rwdata	00000002 OSMemMax
00017eac g     F .text	00000170 OSQPostFront
0001d1cc g     F .text	0000003c alt_up_ps2_open_dev
0000fea4 g     F .text	00000084 .hidden __divsi3
000239a5 g     O .bss	00000003 OSRdyTbl
00021950 g     O .rwdata	00000002 OSDebugEn
0001c3c4 g     F .text	0000003c alt_up_character_lcd_open_dev
00008dc8 g     F .text	00000124 _malloc_trim_r
0001cd48 g     F .text	0000005c alt_up_ps2_enable_read_interrupt
0001ea20 g       *ABS*	00000000 __CTOR_END__
00021968 g     O .rwdata	00000002 OSFlagNodeSize
000219b0 g     O .rwdata	00000002 OSTmrCfgMax
0001c38c g     F .text	00000038 alt_up_character_lcd_init
0000b37c g     F .text	000000dc strcmp
00017468 g     F .text	000001ac OSQCreate
00019ba0 g     F .text	00000198 OSTaskNameGet
0001ea20 g       *ABS*	00000000 __flash_rodata_start
0001801c g     F .text	0000020c OSQPostOpt
00013fa0 g     F .text	00000220 OSTimeTick
00021998 g     O .rwdata	00000002 OSTaskMax
0001ea20 g       *ABS*	00000000 __DTOR_LIST__
000184dc g     F .text	000000d8 OSSemCreate
000219bc g     O .rwdata	00000002 OSTmrWheelSize
0001d55c g     F .text	0000003c alt_up_rs232_open_dev
000111ec g     F .text	00000088 .hidden __nedf2
00023910 g     O .bss	00000004 esc_key_pressed
00021992 g     O .rwdata	00000002 OSTaskDelEn
00018c7c g     F .text	00000110 OSSemQuery
00017614 g     F .text	00000280 OSQDel
00017bd8 g     F .text	0000016c OSQPendAbort
0001ab20 g     F .text	00000038 alt_irq_init
00012db4 g     F .text	00000064 alt_release_fd
0001cc20 g     F .text	00000034 read_data_valid
0001c75c g     F .text	00000038 alt_up_character_lcd_cursor_off
0001f768 g     O .rodata	00000100 .hidden __clz_tab
00023914 g     O .bss	00000004 pos3_x
00023938 g     O .bss	00000004 _PathLocale
0001cee0 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
0001e68c g     F .text	00000014 atexit
0000df44 g     F .text	00000060 _write_r
00013d18 g     F .text	0000008c OSSchedLock
0000943c g     F .text	00000018 setlocale
000157c8 g     F .text	00000108 OSFlagCreate
00000284 g     F .text	000000e0 Task_game_timer
00021918 g     O .rwdata	00000004 _impure_ptr
00023958 g     O .bss	00000004 alt_argc
00008780 g     F .text	0000021c __sflush_r
00021910 g     O .rwdata	00000002 clear_text
0001d824 g     F .text	00000060 _do_dtors
00009428 g     F .text	00000008 __locale_cjk_lang
00023918 g     O .bss	00000004 pos2_x
00021962 g     O .rwdata	00000002 OSEventMultiEn
09000000 g       *ABS*	00000000 __alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
000005b4 g     F .text	000001b8 Task_falling_blocks
000158d0 g     F .text	00000248 OSFlagDel
000239a8 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
0000aca0 g     F .text	00000064 __ulp
00015d8c g     F .text	000005b8 OSFlagPend
000219ae g     O .rwdata	00000002 OSTmrEn
00008db0 g     F .text	00000018 __fp_unlock_all
0002192c g     O .rwdata	00000008 alt_fs_list
00014d90 g     F .text	00000074 OS_StrCopy
0001d208 g     F .text	0000005c alt_up_rs232_enable_read_interrupt
0001d384 g     F .text	00000040 alt_up_rs232_write_data
00021978 g     O .rwdata	00000002 OSMemNameSize
0001e318 g     F .text	00000020 OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
000219a4 g     O .rwdata	00000002 OSTCBPrioTblMax
00009454 g     F .text	0000000c localeconv
000219a0 g     O .rwdata	00000002 OSTaskStatStkChkEn
00001a58 g     F .text	00000190 VGA_gametime_display
00021974 g     O .rwdata	00000002 OSMemEn
0002197e g     O .rwdata	00000002 OSMutexEn
000219d0 g       *ABS*	00000000 _edata
00034d20 g       *ABS*	00000000 _end
000239ac g     O .bss	00000001 OSIntNesting
0000e1c0 g     F .text	00000164 __fputwc
00000248 g       *ABS*	00000000 __ram_exceptions_end
0001bb78 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0001a85c g     F .text	000001d4 OSTimeDlyResume
00015c40 g     F .text	0000014c OSFlagNameSet
0001a0c0 g     F .text	000001c0 OSTaskStkChk
0002197a g     O .rwdata	00000002 OSMemSize
0000b29c g     F .text	0000007c __swrite
00021924 g     O .rwdata	00000004 __malloc_trim_threshold
0002391c g     O .bss	00000004 pos1_val
0000941c g     F .text	0000000c __locale_msgcharset
00001d8c g     F .text	00000260 read_PS2_KeyboardInput
000239b0 g     O .bss	00000004 OSTCBCur
0001e6a0 g     F .text	00000038 exit
0001c988 g     F .text	00000074 alt_up_irda_read_data
0002197c g     O .rwdata	00000002 OSMemTblSize
000092c0 g     F .text	000000c4 _fwalk_reent
0001cc80 g     F .text	000000c8 alt_up_ps2_init
0000aaa4 g     F .text	000001fc __mdiff
00023920 g     O .bss	00000004 SEM_moving_basket
0000ff28 g     F .text	00000074 .hidden __modsi3
00001048 g     F .text	000000b8 resample_rgb
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00008d8c g     F .text	00000004 __sfp_lock_release
00001398 g     F .text	000006c0 VGA_display_sidebar
00013b7c g     F .text	00000058 OSInit
0001a464 g     F .text	00000124 OSTaskQuery
0001c47c g     F .text	00000078 alt_up_character_lcd_string
00018384 g     F .text	000000a8 OS_QInit
00014e04 g     F .text	00000054 OS_StrLen
0001cb1c g     F .text	0000003c alt_up_irda_open_dev
00016f88 g     F .text	00000114 OSMemNameSet
00023924 g     O .bss	00000004 SEM_VGA_init
00021996 g     O .rwdata	00000002 OSTaskProfileEn
000239b4 g     O .bss	00000004 OSTime
0003337c g     O .bss	00000800 OSTaskIdleStk
0001e9ec g     F .text	00000034 _exit
0001d598 g     F .text	0000012c alt_alarm_start
00015b18 g     F .text	00000128 OSFlagNameGet
0001aa30 g     F .text	0000005c OSTimeGet
00009460 g     F .text	000001bc __smakebuf_r
00000eb8 g     F .text	000000a4 VGA_char_box
0001ce78 g     F .text	00000068 alt_up_ps2_wait_for_ack
0000b458 g     F .text	00000098 strlen
0001e298 g     F .text	00000020 OSTaskSwHook
0001dd08 g     F .text	00000154 open
00033b7c g     O .bss	00000b40 OSEventTbl
00011274 g     F .text	000000dc .hidden __gedf2
000346bc g     O .bss	00000510 OSTCBTbl
00018d8c g     F .text	00000100 OSSemSet
00023928 g     O .bss	00000004 SEM_game_timer
00021928 g     O .rwdata	00000004 __wctomb
0000c9f8 g     F .text	00000018 __sprint_r
0001d914 g     F .text	00000034 alt_icache_flush_all
0001c544 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
000219c4 g     O .rwdata	00000004 alt_priority_mask
000185b4 g     F .text	00000240 OSSemDel
000239b8 g     O .bss	00000004 OSFlagFreeList
0002195c g     O .rwdata	00000002 OSEventNameSize
00006ccc g     F .text	0000001c __vfprintf_internal
000239bc g     O .bss	00000001 OSStatRdy
00034bcc g     O .bss	00000054 OSTCBPrioTbl
0000f398 g     F .text	0000005c _wctomb_r
00012ffc g     F .text	000000c4 __env_lock
0001d0a8 g     F .text	0000008c alt_up_ps2_read_fd
000219a2 g     O .rwdata	00000002 OSTaskSwHookEn
00011b5c g     F .text	000008fc .hidden __subdf3
0001c9fc g     F .text	00000090 alt_up_irda_read_fd
0002392c g     O .bss	00000004 SEM_state_transition
00023930 g     O .bss	00000001 text_disp
0000a4d8 g     F .text	000000b0 __lo0bits
000219c8 g     O .rwdata	00000008 alt_alarm_list
0002196a g     O .rwdata	00000002 OSFlagWidth
0001d7c4 g     F .text	00000060 _do_ctors
0001d2c4 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000f2a8 g     F .text	000000c0 wcrtomb
000126fc g     F .text	000000d0 close
00023968 g     O .bss	00000004 alt_envsem
000239c0 g     O .bss	00000004 OSIdleCtrRun
000141c0 g     F .text	00000020 OSVersion
000219b4 g     O .rwdata	00000002 OSTmrCfgWheelSize
00012a2c g     F .text	00000084 alt_load
0001a588 g     F .text	00000070 OS_TaskStkClr
0002198e g     O .rwdata	00000002 OSTaskCreateEn
000147b0 g     F .text	00000068 OS_EventWaitListInit
0000e348 g     F .text	00000080 fputwc
0001e338 g     F .text	00000020 OSTaskIdleHook
00008d90 g     F .text	00000004 __sinit_lock_acquire
00023934 g     O .bss	00000004 rgb_status
0000a24c g     F .text	00000120 __multadd
0001a280 g     F .text	000001e4 OSTaskSuspend
0000a224 g     F .text	00000028 _Bfree
00014e58 g     F .text	0000005c OS_TaskIdle
000219ba g     O .rwdata	00000002 OSTmrTblSize
00018228 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0013bd40 	call	13bd4 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000f4 	movhi	r2,3
 140:	10930804 	addi	r2,r2,19488
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000f4 	movhi	r2,3
 158:	10930804 	addi	r2,r2,19488
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	0013c200 	call	13c20 <OSIntExit>
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a83017 	ldw	r2,-24384(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a83017 	ldw	r2,-24384(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     248:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     24c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     250:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     254:	d6a64414 	ori	gp,gp,39184
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     258:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     25c:	108e2714 	ori	r2,r2,14492

    movhi r3, %hi(__bss_end)
     260:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
     264:	18d34814 	ori	r3,r3,19744

    beq r2, r3, 1f
     268:	10c00326 	beq	r2,r3,278 <_start+0x30>

0:
    stw zero, (r2)
     26c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     274:	10fffd36 	bltu	r2,r3,26c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     278:	0012a2c0 	call	12a2c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     27c:	0012bc00 	call	12bc0 <alt_main>

00000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     280:	003fff06 	br	280 <alt_after_alt_main>

00000284 <Task_game_timer>:
/* ************************************************************************** */
/*                     Track Elapsed Time: Total Game Time                    */
/* ************************************************************************** */
void
Task_game_timer(void* pdata)
{
     284:	defffd04 	addi	sp,sp,-12
     288:	dfc00215 	stw	ra,8(sp)
     28c:	df000115 	stw	fp,4(sp)
     290:	df000104 	addi	fp,sp,4
     294:	e13fff15 	stw	r4,-4(fp)
  debug("Started Game Timer");
     298:	d0a00217 	ldw	r2,-32760(gp)
     29c:	10800317 	ldw	r2,12(r2)
     2a0:	01c01884 	movi	r7,98
     2a4:	018000b4 	movhi	r6,2
     2a8:	31ba8804 	addi	r6,r6,-5600
     2ac:	014000b4 	movhi	r5,2
     2b0:	297a8c04 	addi	r5,r5,-5584
     2b4:	1009883a 	mov	r4,r2
     2b8:	00020240 	call	2024 <fprintf>

  for (;;) {
    OSSemPend(SEM_game_timer, 0, &err);
     2bc:	d0a80617 	ldw	r2,-24552(gp)
     2c0:	d1a7fd04 	addi	r6,gp,-24588
     2c4:	000b883a 	mov	r5,zero
     2c8:	1009883a 	mov	r4,r2
     2cc:	00187f40 	call	187f4 <OSSemPend>
    game_ss++;
     2d0:	d0a7f217 	ldw	r2,-24632(gp)
     2d4:	10800044 	addi	r2,r2,1
     2d8:	d0a7f215 	stw	r2,-24632(gp)

    if (game_ss >= 60) {
     2dc:	d0a7f217 	ldw	r2,-24632(gp)
     2e0:	10800f10 	cmplti	r2,r2,60
     2e4:	1000041e 	bne	r2,zero,2f8 <Task_game_timer+0x74>
      game_mm++;
     2e8:	d0a7ef17 	ldw	r2,-24644(gp)
     2ec:	10800044 	addi	r2,r2,1
     2f0:	d0a7ef15 	stw	r2,-24644(gp)
      game_ss = 0;
     2f4:	d027f215 	stw	zero,-24632(gp)
    }

    if (game_mm >= 60) {
     2f8:	d0a7ef17 	ldw	r2,-24644(gp)
     2fc:	10800f10 	cmplti	r2,r2,60
     300:	1000041e 	bne	r2,zero,314 <Task_game_timer+0x90>
      game_hh++;
     304:	d0a7ed17 	ldw	r2,-24652(gp)
     308:	10800044 	addi	r2,r2,1
     30c:	d0a7ed15 	stw	r2,-24652(gp)
      game_mm = 0;
     310:	d027ef15 	stw	zero,-24644(gp)
    }

    if (game_hh >= 24)
     314:	d0a7ed17 	ldw	r2,-24652(gp)
     318:	10800610 	cmplti	r2,r2,24
     31c:	1000011e 	bne	r2,zero,324 <Task_game_timer+0xa0>
      game_hh, game_mm, game_ss = 0, 0, 0;
     320:	d027f215 	stw	zero,-24632(gp)

    VGA_gametime_display(game_hh, game_mm, game_ss);
     324:	d0a7ed17 	ldw	r2,-24652(gp)
     328:	d0e7ef17 	ldw	r3,-24644(gp)
     32c:	d127f217 	ldw	r4,-24632(gp)
     330:	200d883a 	mov	r6,r4
     334:	180b883a 	mov	r5,r3
     338:	1009883a 	mov	r4,r2
     33c:	0001a580 	call	1a58 <VGA_gametime_display>

    OSSemPost(SEM_game_timer);
     340:	d0a80617 	ldw	r2,-24552(gp)
     344:	1009883a 	mov	r4,r2
     348:	0018b6c0 	call	18b6c <OSSemPost>
    OSTimeDlyHMSM(0, 0, 1, 0);
     34c:	000f883a 	mov	r7,zero
     350:	01800044 	movi	r6,1
     354:	000b883a 	mov	r5,zero
     358:	0009883a 	mov	r4,zero
     35c:	001a6fc0 	call	1a6fc <OSTimeDlyHMSM>
  }
     360:	003fd606 	br	2bc <Task_game_timer+0x38>

00000364 <Task_move_basket>:
/* ************************************************************************** */
/*                   Detecting KEY1, KEY2, KEY3, KEY4 Press                   */
/* ************************************************************************** */
void
Task_move_basket(void* pdata)
{
     364:	defffd04 	addi	sp,sp,-12
     368:	dfc00215 	stw	ra,8(sp)
     36c:	df000115 	stw	fp,4(sp)
     370:	df000104 	addi	fp,sp,4
     374:	e13fff15 	stw	r4,-4(fp)
  debug("Started: Task_move_basket");
     378:	d0a00217 	ldw	r2,-32760(gp)
     37c:	10800317 	ldw	r2,12(r2)
     380:	01c02084 	movi	r7,130
     384:	018000b4 	movhi	r6,2
     388:	31ba8804 	addi	r6,r6,-5600
     38c:	014000b4 	movhi	r5,2
     390:	297a9504 	addi	r5,r5,-5548
     394:	1009883a 	mov	r4,r2
     398:	00020240 	call	2024 <fprintf>

  for (;;) {

    if (right_key_pressed && basket_pos_x < 69) {
     39c:	d0a7e817 	ldw	r2,-24672(gp)
     3a0:	10001126 	beq	r2,zero,3e8 <Task_move_basket+0x84>
     3a4:	d0a7fc17 	ldw	r2,-24592(gp)
     3a8:	10801148 	cmpgei	r2,r2,69
     3ac:	10000e1e 	bne	r2,zero,3e8 <Task_move_basket+0x84>
      debug("MOVE RIGHT");
     3b0:	d0a00217 	ldw	r2,-32760(gp)
     3b4:	10800317 	ldw	r2,12(r2)
     3b8:	01c021c4 	movi	r7,135
     3bc:	018000b4 	movhi	r6,2
     3c0:	31ba8804 	addi	r6,r6,-5600
     3c4:	014000b4 	movhi	r5,2
     3c8:	297a9f04 	addi	r5,r5,-5508
     3cc:	1009883a 	mov	r4,r2
     3d0:	00020240 	call	2024 <fprintf>
      VGA_clear_game_row(59);
     3d4:	01000ec4 	movi	r4,59
     3d8:	00011980 	call	1198 <VGA_clear_game_row>
      ++basket_pos_x;
     3dc:	d0a7fc17 	ldw	r2,-24592(gp)
     3e0:	10800044 	addi	r2,r2,1
     3e4:	d0a7fc15 	stw	r2,-24592(gp)
    }

    if (left_key_pressed && basket_pos_x > 0) {
     3e8:	d0a7fe17 	ldw	r2,-24584(gp)
     3ec:	10001026 	beq	r2,zero,430 <Task_move_basket+0xcc>
     3f0:	d0a7fc17 	ldw	r2,-24592(gp)
     3f4:	00800e0e 	bge	zero,r2,430 <Task_move_basket+0xcc>
      debug("MOVE LEFT");
     3f8:	d0a00217 	ldw	r2,-32760(gp)
     3fc:	10800317 	ldw	r2,12(r2)
     400:	01c02344 	movi	r7,141
     404:	018000b4 	movhi	r6,2
     408:	31ba8804 	addi	r6,r6,-5600
     40c:	014000b4 	movhi	r5,2
     410:	297aa604 	addi	r5,r5,-5480
     414:	1009883a 	mov	r4,r2
     418:	00020240 	call	2024 <fprintf>
      VGA_clear_game_row(59);
     41c:	01000ec4 	movi	r4,59
     420:	00011980 	call	1198 <VGA_clear_game_row>
      --basket_pos_x;
     424:	d0a7fc17 	ldw	r2,-24592(gp)
     428:	10bfffc4 	addi	r2,r2,-1
     42c:	d0a7fc15 	stw	r2,-24592(gp)
    }

    OSTimeDly(1);
     430:	01000044 	movi	r4,1
     434:	001a5f80 	call	1a5f8 <OSTimeDly>
  }
     438:	003fd806 	br	39c <Task_move_basket+0x38>

0000043c <Task_VGA_init>:
}

/* Initial Display Setup */
void
Task_VGA_init(void* pdata)
{
     43c:	defffd04 	addi	sp,sp,-12
     440:	dfc00215 	stw	ra,8(sp)
     444:	df000115 	stw	fp,4(sp)
     448:	df000104 	addi	fp,sp,4
     44c:	e13fff15 	stw	r4,-4(fp)
  debug("Started VGA initialization task");
     450:	d0a00217 	ldw	r2,-32760(gp)
     454:	10800317 	ldw	r2,12(r2)
     458:	01c02684 	movi	r7,154
     45c:	018000b4 	movhi	r6,2
     460:	31ba8804 	addi	r6,r6,-5600
     464:	014000b4 	movhi	r5,2
     468:	297aac04 	addi	r5,r5,-5456
     46c:	1009883a 	mov	r4,r2
     470:	00020240 	call	2024 <fprintf>

  for (;;) {

    OSSemPend(SEM_VGA_init, 0, &err);
     474:	d0a80517 	ldw	r2,-24556(gp)
     478:	d1a7fd04 	addi	r6,gp,-24588
     47c:	000b883a 	mov	r5,zero
     480:	1009883a 	mov	r4,r2
     484:	00187f40 	call	187f4 <OSSemPend>

    debug("Initializing VGA Display");
     488:	d0a00217 	ldw	r2,-32760(gp)
     48c:	10800317 	ldw	r2,12(r2)
     490:	01c02804 	movi	r7,160
     494:	018000b4 	movhi	r6,2
     498:	31ba8804 	addi	r6,r6,-5600
     49c:	014000b4 	movhi	r5,2
     4a0:	297ab804 	addi	r5,r5,-5408
     4a4:	1009883a 	mov	r4,r2
     4a8:	00020240 	call	2024 <fprintf>

    game_hh, game_mm, game_ss = 0, 0, 0;
     4ac:	d027f215 	stw	zero,-24632(gp)
    score = 0;
     4b0:	d027f615 	stw	zero,-24616(gp)

    VGA_clear_screen();
     4b4:	00011000 	call	1100 <VGA_clear_screen>
    VGA_display_sidebar(background_color);
     4b8:	d0a7ec0b 	ldhu	r2,-24656(gp)
     4bc:	10bfffcc 	andi	r2,r2,65535
     4c0:	10a0001c 	xori	r2,r2,32768
     4c4:	10a00004 	addi	r2,r2,-32768
     4c8:	1009883a 	mov	r4,r2
     4cc:	00013980 	call	1398 <VGA_display_sidebar>

    OSTimeDly(1);
     4d0:	01000044 	movi	r4,1
     4d4:	001a5f80 	call	1a5f8 <OSTimeDly>
  }
     4d8:	003fe606 	br	474 <Task_VGA_init+0x38>

000004dc <Task_VGA_char>:
}

/* Display Character using VGA Output */
void
Task_VGA_char(void* pdata)
{
     4dc:	defffd04 	addi	sp,sp,-12
     4e0:	dfc00215 	stw	ra,8(sp)
     4e4:	df000115 	stw	fp,4(sp)
     4e8:	df000104 	addi	fp,sp,4
     4ec:	e13fff15 	stw	r4,-4(fp)
  debug("Started: Task_VGA_char");
     4f0:	d0a00217 	ldw	r2,-32760(gp)
     4f4:	10800317 	ldw	r2,12(r2)
     4f8:	01c02c04 	movi	r7,176
     4fc:	018000b4 	movhi	r6,2
     500:	31ba8804 	addi	r6,r6,-5600
     504:	014000b4 	movhi	r5,2
     508:	297ac204 	addi	r5,r5,-5368
     50c:	1009883a 	mov	r4,r2
     510:	00020240 	call	2024 <fprintf>

  for (;;) {
    VGA_animated_char(basket_pos_x, 59, " ", basket_color);
     514:	d0a7fc17 	ldw	r2,-24592(gp)
     518:	d0e7f90b 	ldhu	r3,-24604(gp)
     51c:	18ffffcc 	andi	r3,r3,65535
     520:	18e0001c 	xori	r3,r3,32768
     524:	18e00004 	addi	r3,r3,-32768
     528:	180f883a 	mov	r7,r3
     52c:	018000b4 	movhi	r6,2
     530:	31bacc04 	addi	r6,r6,-5328
     534:	01400ec4 	movi	r5,59
     538:	1009883a 	mov	r4,r2
     53c:	0000f5c0 	call	f5c <VGA_animated_char>
    OSTimeDly(1);
     540:	01000044 	movi	r4,1
     544:	001a5f80 	call	1a5f8 <OSTimeDly>
  }
     548:	003ff206 	br	514 <Task_VGA_char+0x38>

0000054c <Task_read_PS2_Keyboard>:
/*                    Reads PS2 Keyboard input periodically                   */
/* ************************************************************************** */

void
Task_read_PS2_Keyboard(void* pdata)
{
     54c:	defffd04 	addi	sp,sp,-12
     550:	dfc00215 	stw	ra,8(sp)
     554:	df000115 	stw	fp,4(sp)
     558:	df000104 	addi	fp,sp,4
     55c:	e13fff15 	stw	r4,-4(fp)
  debug("Started: Read PS2 Keyboard Task");
     560:	d0a00217 	ldw	r2,-32760(gp)
     564:	10800317 	ldw	r2,12(r2)
     568:	01c02fc4 	movi	r7,191
     56c:	018000b4 	movhi	r6,2
     570:	31ba8804 	addi	r6,r6,-5600
     574:	014000b4 	movhi	r5,2
     578:	297acd04 	addi	r5,r5,-5324
     57c:	1009883a 	mov	r4,r2
     580:	00020240 	call	2024 <fprintf>

  for (;;) {
    OSSemPend(SEM_KEY_press, 0, &err);
     584:	d0a7f417 	ldw	r2,-24624(gp)
     588:	d1a7fd04 	addi	r6,gp,-24588
     58c:	000b883a 	mov	r5,zero
     590:	1009883a 	mov	r4,r2
     594:	00187f40 	call	187f4 <OSSemPend>
    read_PS2_KeyboardInput();
     598:	0001d8c0 	call	1d8c <read_PS2_KeyboardInput>
    OSSemPost(SEM_KEY_press);
     59c:	d0a7f417 	ldw	r2,-24624(gp)
     5a0:	1009883a 	mov	r4,r2
     5a4:	0018b6c0 	call	18b6c <OSSemPost>
    OSTimeDly(1);
     5a8:	01000044 	movi	r4,1
     5ac:	001a5f80 	call	1a5f8 <OSTimeDly>
  }
     5b0:	003ff406 	br	584 <Task_read_PS2_Keyboard+0x38>

000005b4 <Task_falling_blocks>:
/* ************************************************************************** */
/*           Generates Falling Blocks with Random Position and Value          */
/* ************************************************************************** */
void
Task_falling_blocks(void* pdata)
{
     5b4:	defffb04 	addi	sp,sp,-20
     5b8:	dfc00415 	stw	ra,16(sp)
     5bc:	df000315 	stw	fp,12(sp)
     5c0:	df000304 	addi	fp,sp,12
     5c4:	e13fff15 	stw	r4,-4(fp)
  debug("Started: Falling Block");
     5c8:	d0a00217 	ldw	r2,-32760(gp)
     5cc:	10800317 	ldw	r2,12(r2)
     5d0:	01c033c4 	movi	r7,207
     5d4:	018000b4 	movhi	r6,2
     5d8:	31ba8804 	addi	r6,r6,-5600
     5dc:	014000b4 	movhi	r5,2
     5e0:	297ad904 	addi	r5,r5,-5276
     5e4:	1009883a 	mov	r4,r2
     5e8:	00020240 	call	2024 <fprintf>

  for (;;) {

    OSSemPend(SEM_falling_blocks, 0, &err);
     5ec:	d0a7e517 	ldw	r2,-24684(gp)
     5f0:	d1a7fd04 	addi	r6,gp,-24588
     5f4:	000b883a 	mov	r5,zero
     5f8:	1009883a 	mov	r4,r2
     5fc:	00187f40 	call	187f4 <OSSemPend>

    if (pos1_y >= 60) {
     600:	d0a7ff17 	ldw	r2,-24580(gp)
     604:	10800f10 	cmplti	r2,r2,60
     608:	1000371e 	bne	r2,zero,6e8 <Task_falling_blocks+0x134>

      int lower = 0;
     60c:	e03ffd15 	stw	zero,-12(fp)
      int upper = GAMESCREEN_WIDTH - 1;
     610:	00801144 	movi	r2,69
     614:	e0bffe15 	stw	r2,-8(fp)

      /* Assuming the basket's velocity is same as falling block */
      if (basket_pos_x - lower > GAMESCREEN_HEIGHT)
     618:	d0e7fc17 	ldw	r3,-24592(gp)
     61c:	e0bffd17 	ldw	r2,-12(fp)
     620:	1885c83a 	sub	r2,r3,r2
     624:	10800f50 	cmplti	r2,r2,61
     628:	1000031e 	bne	r2,zero,638 <Task_falling_blocks+0x84>
        lower = basket_pos_x - GAMESCREEN_HEIGHT;
     62c:	d0a7fc17 	ldw	r2,-24592(gp)
     630:	10bff104 	addi	r2,r2,-60
     634:	e0bffd15 	stw	r2,-12(fp)

      if (upper - basket_pos_x > GAMESCREEN_HEIGHT)
     638:	d0a7fc17 	ldw	r2,-24592(gp)
     63c:	e0fffe17 	ldw	r3,-8(fp)
     640:	1885c83a 	sub	r2,r3,r2
     644:	10800f50 	cmplti	r2,r2,61
     648:	1000031e 	bne	r2,zero,658 <Task_falling_blocks+0xa4>
        upper = basket_pos_x + GAMESCREEN_HEIGHT;
     64c:	d0a7fc17 	ldw	r2,-24592(gp)
     650:	10800f04 	addi	r2,r2,60
     654:	e0bffe15 	stw	r2,-8(fp)

      pos1_x = (rand() % (upper - lower + 1)) + lower;
     658:	00020600 	call	2060 <rand>
     65c:	1007883a 	mov	r3,r2
     660:	e13ffe17 	ldw	r4,-8(fp)
     664:	e0bffd17 	ldw	r2,-12(fp)
     668:	2085c83a 	sub	r2,r4,r2
     66c:	10800044 	addi	r2,r2,1
     670:	1889283a 	div	r4,r3,r2
     674:	2085383a 	mul	r2,r4,r2
     678:	1887c83a 	sub	r3,r3,r2
     67c:	e0bffd17 	ldw	r2,-12(fp)
     680:	1885883a 	add	r2,r3,r2
     684:	d0a7e615 	stw	r2,-24680(gp)
      pos1_y = 0;
     688:	d027ff15 	stw	zero,-24580(gp)

      upper = 9;
     68c:	00800244 	movi	r2,9
     690:	e0bffe15 	stw	r2,-8(fp)
      lower = 1;
     694:	00800044 	movi	r2,1
     698:	e0bffd15 	stw	r2,-12(fp)

      pos1_val = (rand() % (upper - lower + 1)) + lower;
     69c:	00020600 	call	2060 <rand>
     6a0:	1007883a 	mov	r3,r2
     6a4:	e13ffe17 	ldw	r4,-8(fp)
     6a8:	e0bffd17 	ldw	r2,-12(fp)
     6ac:	2085c83a 	sub	r2,r4,r2
     6b0:	10800044 	addi	r2,r2,1
     6b4:	1889283a 	div	r4,r3,r2
     6b8:	2085383a 	mul	r2,r4,r2
     6bc:	1887c83a 	sub	r3,r3,r2
     6c0:	e0bffd17 	ldw	r2,-12(fp)
     6c4:	1885883a 	add	r2,r3,r2
     6c8:	d0a80315 	stw	r2,-24564(gp)
      snprintf(text_disp, 2, "%d\0", pos1_val);
     6cc:	d0a80317 	ldw	r2,-24564(gp)
     6d0:	100f883a 	mov	r7,r2
     6d4:	018000b4 	movhi	r6,2
     6d8:	31bae304 	addi	r6,r6,-5236
     6dc:	01400084 	movi	r5,2
     6e0:	d1280804 	addi	r4,gp,-24544
     6e4:	00021980 	call	2198 <snprintf>
    }

    VGA_clear_game_row(pos1_y);
     6e8:	d0a7ff17 	ldw	r2,-24580(gp)
     6ec:	1009883a 	mov	r4,r2
     6f0:	00011980 	call	1198 <VGA_clear_game_row>
    pos1_y++;
     6f4:	d0a7ff17 	ldw	r2,-24580(gp)
     6f8:	10800044 	addi	r2,r2,1
     6fc:	d0a7ff15 	stw	r2,-24580(gp)

    VGA_animated_char(pos1_x, pos1_y, text_disp, background_color);
     700:	d0a7e617 	ldw	r2,-24680(gp)
     704:	d0e7ff17 	ldw	r3,-24580(gp)
     708:	d127ec0b 	ldhu	r4,-24656(gp)
     70c:	213fffcc 	andi	r4,r4,65535
     710:	2120001c 	xori	r4,r4,32768
     714:	21200004 	addi	r4,r4,-32768
     718:	200f883a 	mov	r7,r4
     71c:	d1a80804 	addi	r6,gp,-24544
     720:	180b883a 	mov	r5,r3
     724:	1009883a 	mov	r4,r2
     728:	0000f5c0 	call	f5c <VGA_animated_char>

    if (pos1_y == 59 && basket_pos_x == pos1_x) {
     72c:	d0a7ff17 	ldw	r2,-24580(gp)
     730:	10800ed8 	cmpnei	r2,r2,59
     734:	10000a1e 	bne	r2,zero,760 <Task_falling_blocks+0x1ac>
     738:	d0e7fc17 	ldw	r3,-24592(gp)
     73c:	d0a7e617 	ldw	r2,-24680(gp)
     740:	1880071e 	bne	r3,r2,760 <Task_falling_blocks+0x1ac>
      score += pos1_val;
     744:	d0e7f617 	ldw	r3,-24616(gp)
     748:	d0a80317 	ldw	r2,-24564(gp)
     74c:	1885883a 	add	r2,r3,r2
     750:	d0a7f615 	stw	r2,-24616(gp)
      VGA_display_score(score);
     754:	d0a7f617 	ldw	r2,-24616(gp)
     758:	1009883a 	mov	r4,r2
     75c:	0001be80 	call	1be8 <VGA_display_score>
    }

    OSTimeDly(1);
     760:	01000044 	movi	r4,1
     764:	001a5f80 	call	1a5f8 <OSTimeDly>
  }
     768:	003fa006 	br	5ec <Task_falling_blocks+0x38>

0000076c <Task_GameState_controller>:
}

void
Task_GameState_controller(void* pdata)
{
     76c:	defffb04 	addi	sp,sp,-20
     770:	dfc00415 	stw	ra,16(sp)
     774:	df000315 	stw	fp,12(sp)
     778:	dc000215 	stw	r16,8(sp)
     77c:	df000304 	addi	fp,sp,12
     780:	e13ffe15 	stw	r4,-8(fp)
  debug("Started Game State controller task");
     784:	d0a00217 	ldw	r2,-32760(gp)
     788:	10800317 	ldw	r2,12(r2)
     78c:	01c03f04 	movi	r7,252
     790:	018000b4 	movhi	r6,2
     794:	31ba8804 	addi	r6,r6,-5600
     798:	014000b4 	movhi	r5,2
     79c:	297ae404 	addi	r5,r5,-5232
     7a0:	1009883a 	mov	r4,r2
     7a4:	00020240 	call	2024 <fprintf>

  for (;;) {

    /************************ Pre State Transition *************************/

    if (esc_key_pressed && game_state == PAUSE) {
     7a8:	d0a80017 	ldw	r2,-24576(gp)
     7ac:	10000726 	beq	r2,zero,7cc <Task_GameState_controller+0x60>
     7b0:	d0a7f117 	ldw	r2,-24636(gp)
     7b4:	10800098 	cmpnei	r2,r2,2
     7b8:	1000041e 	bne	r2,zero,7cc <Task_GameState_controller+0x60>
      OSSemPost(SEM_VGA_init);
     7bc:	d0a80517 	ldw	r2,-24556(gp)
     7c0:	1009883a 	mov	r4,r2
     7c4:	0018b6c0 	call	18b6c <OSSemPost>
      game_state = INIT;
     7c8:	d027f115 	stw	zero,-24636(gp)
    }

    if ((enter_key_pressed && game_state == INIT) ||
     7cc:	d0a7eb17 	ldw	r2,-24660(gp)
     7d0:	10000226 	beq	r2,zero,7dc <Task_GameState_controller+0x70>
     7d4:	d0a7f117 	ldw	r2,-24636(gp)
     7d8:	10000726 	beq	r2,zero,7f8 <Task_GameState_controller+0x8c>
        (any_key_pressed && !esc_key_pressed && game_state == PAUSE))
     7dc:	d0a7fb17 	ldw	r2,-24596(gp)
    if (esc_key_pressed && game_state == PAUSE) {
      OSSemPost(SEM_VGA_init);
      game_state = INIT;
    }

    if ((enter_key_pressed && game_state == INIT) ||
     7e0:	10000726 	beq	r2,zero,800 <Task_GameState_controller+0x94>
        (any_key_pressed && !esc_key_pressed && game_state == PAUSE))
     7e4:	d0a80017 	ldw	r2,-24576(gp)
     7e8:	1000051e 	bne	r2,zero,800 <Task_GameState_controller+0x94>
     7ec:	d0a7f117 	ldw	r2,-24636(gp)
     7f0:	10800098 	cmpnei	r2,r2,2
     7f4:	1000021e 	bne	r2,zero,800 <Task_GameState_controller+0x94>
      game_state = PLAY;
     7f8:	00800044 	movi	r2,1
     7fc:	d0a7f115 	stw	r2,-24636(gp)

    if (esc_key_pressed && game_state == PLAY)
     800:	d0a80017 	ldw	r2,-24576(gp)
     804:	10000526 	beq	r2,zero,81c <Task_GameState_controller+0xb0>
     808:	d0a7f117 	ldw	r2,-24636(gp)
     80c:	10800058 	cmpnei	r2,r2,1
     810:	1000021e 	bne	r2,zero,81c <Task_GameState_controller+0xb0>
      game_state = PAUSE;
     814:	00800084 	movi	r2,2
     818:	d0a7f115 	stw	r2,-24636(gp)

    /************** Handling Tasks post state transition **************/

    if (game_state == PLAY) {
     81c:	d0a7f117 	ldw	r2,-24636(gp)
     820:	10800058 	cmpnei	r2,r2,1
     824:	1000061e 	bne	r2,zero,840 <Task_GameState_controller+0xd4>
      OSSemPost(SEM_falling_blocks);
     828:	d0a7e517 	ldw	r2,-24684(gp)
     82c:	1009883a 	mov	r4,r2
     830:	0018b6c0 	call	18b6c <OSSemPost>
      OSSemPost(SEM_game_timer);
     834:	d0a80617 	ldw	r2,-24552(gp)
     838:	1009883a 	mov	r4,r2
     83c:	0018b6c0 	call	18b6c <OSSemPost>
    }

    debug("Game State: %s", get_State_name(game_state));
     840:	d0a00217 	ldw	r2,-32760(gp)
     844:	14000317 	ldw	r16,12(r2)
     848:	d0a7f117 	ldw	r2,-24636(gp)
     84c:	1009883a 	mov	r4,r2
     850:	0000c840 	call	c84 <get_State_name>
     854:	d8800015 	stw	r2,0(sp)
     858:	01c04544 	movi	r7,277
     85c:	018000b4 	movhi	r6,2
     860:	31ba8804 	addi	r6,r6,-5600
     864:	014000b4 	movhi	r5,2
     868:	297af104 	addi	r5,r5,-5180
     86c:	8009883a 	mov	r4,r16
     870:	00020240 	call	2024 <fprintf>
    OSTimeDly(1);
     874:	01000044 	movi	r4,1
     878:	001a5f80 	call	1a5f8 <OSTimeDly>
  }
     87c:	003fca06 	br	7a8 <Task_GameState_controller+0x3c>

00000880 <main>:
}

/* The main function creates two task and starts multi-tasking */
int
main(void)
{
     880:	defff504 	addi	sp,sp,-44
     884:	dfc00a15 	stw	ra,40(sp)
     888:	df000915 	stw	fp,36(sp)
     88c:	dc000815 	stw	r16,32(sp)
     890:	df000904 	addi	fp,sp,36

  /****************************** Initialization *****************************/

  score = 0;
     894:	d027f615 	stw	zero,-24616(gp)
  game_hh, game_mm, game_ss = 0, 0, 0;
     898:	d027f215 	stw	zero,-24632(gp)

  any_key_pressed = 0;
     89c:	d027fb15 	stw	zero,-24596(gp)

  left_key_pressed = 0;
     8a0:	d027fe15 	stw	zero,-24584(gp)
  right_key_pressed = 0;
     8a4:	d027e815 	stw	zero,-24672(gp)

  esc_key_pressed = 0;
     8a8:	d0280015 	stw	zero,-24576(gp)
  enter_key_pressed = 0;
     8ac:	d027eb15 	stw	zero,-24660(gp)

  game_state = INIT;
     8b0:	d027f115 	stw	zero,-24636(gp)

  /************************* Semaphores Initialization **********************/

  SEM_VGA_init = OSSemCreate(1);
     8b4:	01000044 	movi	r4,1
     8b8:	00184dc0 	call	184dc <OSSemCreate>
     8bc:	d0a80515 	stw	r2,-24556(gp)
  SEM_read_KEYs = OSSemCreate(1);
     8c0:	01000044 	movi	r4,1
     8c4:	00184dc0 	call	184dc <OSSemCreate>
     8c8:	d0a7ee15 	stw	r2,-24648(gp)
  SEM_KEY_press = OSSemCreate(1);
     8cc:	01000044 	movi	r4,1
     8d0:	00184dc0 	call	184dc <OSSemCreate>
     8d4:	d0a7f415 	stw	r2,-24624(gp)
  SEM_state_transition = OSSemCreate(1);
     8d8:	01000044 	movi	r4,1
     8dc:	00184dc0 	call	184dc <OSSemCreate>
     8e0:	d0a80715 	stw	r2,-24548(gp)

  SEM_game_timer = OSSemCreate(0);
     8e4:	0009883a 	mov	r4,zero
     8e8:	00184dc0 	call	184dc <OSSemCreate>
     8ec:	d0a80615 	stw	r2,-24552(gp)
  SEM_falling_blocks = OSSemCreate(0);
     8f0:	0009883a 	mov	r4,zero
     8f4:	00184dc0 	call	184dc <OSSemCreate>
     8f8:	d0a7e515 	stw	r2,-24684(gp)
  SEM_moving_basket = OSSemCreate(0);
     8fc:	0009883a 	mov	r4,zero
     900:	00184dc0 	call	184dc <OSSemCreate>
     904:	d0a80415 	stw	r2,-24560(gp)

  /**************************** VGA Display Setup ***************************/

  video_resolution = (int*)(PIXEL_BUF_CTRL_BASE + 0x8);
     908:	00bfc834 	movhi	r2,65312
     90c:	108c0a04 	addi	r2,r2,12328
     910:	d0a7e415 	stw	r2,-24688(gp)
  rgb_status = (int*)(RGB_RESAMPLER_BASE);
     914:	00bfc834 	movhi	r2,65312
     918:	108c0404 	addi	r2,r2,12304
     91c:	d0a80915 	stw	r2,-24540(gp)

  screen_x = *video_resolution & 0xFFFF;
     920:	d0a7e417 	ldw	r2,-24688(gp)
     924:	10800017 	ldw	r2,0(r2)
     928:	10bfffcc 	andi	r2,r2,65535
     92c:	d0a7ea15 	stw	r2,-24664(gp)
  screen_y = (*video_resolution >> 16) & 0xFFFF;
     930:	d0a7e417 	ldw	r2,-24688(gp)
     934:	10800017 	ldw	r2,0(r2)
     938:	1004d43a 	srli	r2,r2,16
     93c:	d0a7fa15 	stw	r2,-24600(gp)

  /* initially basket positioned at the center of screen */
  basket_pos_x = 40;
     940:	00800a04 	movi	r2,40
     944:	d0a7fc15 	stw	r2,-24592(gp)

  /* letter initially positioning falling box randomly */
  int lower = 0;
     948:	e03ffc15 	stw	zero,-16(fp)
  int upper = 69;
     94c:	00801144 	movi	r2,69
     950:	e0bffd15 	stw	r2,-12(fp)

  pos1_x = (rand() % (upper - lower + 1)) + lower;
     954:	00020600 	call	2060 <rand>
     958:	1007883a 	mov	r3,r2
     95c:	e13ffd17 	ldw	r4,-12(fp)
     960:	e0bffc17 	ldw	r2,-16(fp)
     964:	2085c83a 	sub	r2,r4,r2
     968:	10800044 	addi	r2,r2,1
     96c:	1889283a 	div	r4,r3,r2
     970:	2085383a 	mul	r2,r4,r2
     974:	1887c83a 	sub	r3,r3,r2
     978:	e0bffc17 	ldw	r2,-16(fp)
     97c:	1885883a 	add	r2,r3,r2
     980:	d0a7e615 	stw	r2,-24680(gp)
  pos1_y = 0;
     984:	d027ff15 	stw	zero,-24580(gp)

  upper = 9;
     988:	00800244 	movi	r2,9
     98c:	e0bffd15 	stw	r2,-12(fp)
  lower = 1;
     990:	00800044 	movi	r2,1
     994:	e0bffc15 	stw	r2,-16(fp)

  pos1_val = (rand() % (upper - lower + 1)) + lower;
     998:	00020600 	call	2060 <rand>
     99c:	1007883a 	mov	r3,r2
     9a0:	e13ffd17 	ldw	r4,-12(fp)
     9a4:	e0bffc17 	ldw	r2,-16(fp)
     9a8:	2085c83a 	sub	r2,r4,r2
     9ac:	10800044 	addi	r2,r2,1
     9b0:	1889283a 	div	r4,r3,r2
     9b4:	2085383a 	mul	r2,r4,r2
     9b8:	1887c83a 	sub	r3,r3,r2
     9bc:	e0bffc17 	ldw	r2,-16(fp)
     9c0:	1885883a 	add	r2,r3,r2
     9c4:	d0a80315 	stw	r2,-24564(gp)
  snprintf(text_disp, 2, "%d\0", pos1_val);
     9c8:	d0a80317 	ldw	r2,-24564(gp)
     9cc:	100f883a 	mov	r7,r2
     9d0:	018000b4 	movhi	r6,2
     9d4:	31bae304 	addi	r6,r6,-5236
     9d8:	01400084 	movi	r5,2
     9dc:	d1280804 	addi	r4,gp,-24544
     9e0:	00021980 	call	2198 <snprintf>

  int db = get_data_bits(*rgb_status & 0x3F);
     9e4:	d0a80917 	ldw	r2,-24540(gp)
     9e8:	10800017 	ldw	r2,0(r2)
     9ec:	10800fcc 	andi	r2,r2,63
     9f0:	1009883a 	mov	r4,r2
     9f4:	00012080 	call	1208 <get_data_bits>
     9f8:	e0bffe15 	stw	r2,-8(fp)

  /* check if resolution is smaller than the standard 320 x 240 */
  res_offset = (screen_x == 160) ? 1 : 0;
     9fc:	d0a7ea17 	ldw	r2,-24664(gp)
     a00:	10802820 	cmpeqi	r2,r2,160
     a04:	10803fcc 	andi	r2,r2,255
     a08:	d0a7f815 	stw	r2,-24608(gp)

  /* check if number of data bits is less than the standard 16-bits */
  col_offset = (db == 8) ? 1 : 0;
     a0c:	e0bffe17 	ldw	r2,-8(fp)
     a10:	10800220 	cmpeqi	r2,r2,8
     a14:	10803fcc 	andi	r2,r2,255
     a18:	d0a7f015 	stw	r2,-24640(gp)

  /* update color */
  background_color = resample_rgb(db, INTEL_RED);
     a1c:	01403db4 	movhi	r5,246
     a20:	294a46c4 	addi	r5,r5,10523
     a24:	e13ffe17 	ldw	r4,-8(fp)
     a28:	00010480 	call	1048 <resample_rgb>
     a2c:	d0a7ec0d 	sth	r2,-24656(gp)
  basket_color = resample_rgb(db, INTEL_LIGHT_YELLOW);
     a30:	01404034 	movhi	r5,256
     a34:	29638e84 	addi	r5,r5,-29126
     a38:	e13ffe17 	ldw	r4,-8(fp)
     a3c:	00010480 	call	1048 <resample_rgb>
     a40:	d0a7f90d 	sth	r2,-24604(gp)

  debug("Game State: %s", get_State_name(game_state));
     a44:	d0a00217 	ldw	r2,-32760(gp)
     a48:	14000317 	ldw	r16,12(r2)
     a4c:	d0a7f117 	ldw	r2,-24636(gp)
     a50:	1009883a 	mov	r4,r2
     a54:	0000c840 	call	c84 <get_State_name>
     a58:	d8800015 	stw	r2,0(sp)
     a5c:	01c05744 	movi	r7,349
     a60:	018000b4 	movhi	r6,2
     a64:	31ba8804 	addi	r6,r6,-5600
     a68:	014000b4 	movhi	r5,2
     a6c:	297af104 	addi	r5,r5,-5180
     a70:	8009883a 	mov	r4,r16
     a74:	00020240 	call	2024 <fprintf>

  VGA_animated_char(pos1_x, pos1_y, text_disp, background_color);
     a78:	d0a7e617 	ldw	r2,-24680(gp)
     a7c:	d0e7ff17 	ldw	r3,-24580(gp)
     a80:	d127ec0b 	ldhu	r4,-24656(gp)
     a84:	213fffcc 	andi	r4,r4,65535
     a88:	2120001c 	xori	r4,r4,32768
     a8c:	21200004 	addi	r4,r4,-32768
     a90:	200f883a 	mov	r7,r4
     a94:	d1a80804 	addi	r6,gp,-24544
     a98:	180b883a 	mov	r5,r3
     a9c:	1009883a 	mov	r4,r2
     aa0:	0000f5c0 	call	f5c <VGA_animated_char>

  OSTaskCreateExt(Task_VGA_init,
     aa4:	d8000415 	stw	zero,16(sp)
     aa8:	d8000315 	stw	zero,12(sp)
     aac:	00820004 	movi	r2,2048
     ab0:	d8800215 	stw	r2,8(sp)
     ab4:	008000b4 	movhi	r2,2
     ab8:	108e7f04 	addi	r2,r2,14844
     abc:	d8800115 	stw	r2,4(sp)
     ac0:	00800044 	movi	r2,1
     ac4:	d8800015 	stw	r2,0(sp)
     ac8:	01c00044 	movi	r7,1
     acc:	018000b4 	movhi	r6,2
     ad0:	31967e04 	addi	r6,r6,23032
     ad4:	000b883a 	mov	r5,zero
     ad8:	01000034 	movhi	r4,0
     adc:	21010f04 	addi	r4,r4,1084
     ae0:	00195280 	call	19528 <OSTaskCreateExt>
                  task_vga_init_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(Task_read_PS2_Keyboard,
     ae4:	d8000415 	stw	zero,16(sp)
     ae8:	d8000315 	stw	zero,12(sp)
     aec:	00820004 	movi	r2,2048
     af0:	d8800215 	stw	r2,8(sp)
     af4:	008000f4 	movhi	r2,3
     af8:	10ae7f04 	addi	r2,r2,-17924
     afc:	d8800115 	stw	r2,4(sp)
     b00:	008001c4 	movi	r2,7
     b04:	d8800015 	stw	r2,0(sp)
     b08:	01c001c4 	movi	r7,7
     b0c:	018000f4 	movhi	r6,3
     b10:	31b67e04 	addi	r6,r6,-9736
     b14:	000b883a 	mov	r5,zero
     b18:	01000034 	movhi	r4,0
     b1c:	21015304 	addi	r4,r4,1356
     b20:	00195280 	call	19528 <OSTaskCreateExt>
                  task_ps2_keyboard_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(Task_game_timer,
     b24:	d8000415 	stw	zero,16(sp)
     b28:	d8000315 	stw	zero,12(sp)
     b2c:	00820004 	movi	r2,2048
     b30:	d8800215 	stw	r2,8(sp)
     b34:	008000f4 	movhi	r2,3
     b38:	10b67f04 	addi	r2,r2,-9732
     b3c:	d8800115 	stw	r2,4(sp)
     b40:	00800184 	movi	r2,6
     b44:	d8800015 	stw	r2,0(sp)
     b48:	01c00184 	movi	r7,6
     b4c:	018000f4 	movhi	r6,3
     b50:	31be7e04 	addi	r6,r6,-1544
     b54:	000b883a 	mov	r5,zero
     b58:	01000034 	movhi	r4,0
     b5c:	2100a104 	addi	r4,r4,644
     b60:	00195280 	call	19528 <OSTaskCreateExt>
                  task_game_timer_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(Task_GameState_controller,
     b64:	d8000415 	stw	zero,16(sp)
     b68:	d8000315 	stw	zero,12(sp)
     b6c:	00820004 	movi	r2,2048
     b70:	d8800215 	stw	r2,8(sp)
     b74:	008000f4 	movhi	r2,3
     b78:	10be7f04 	addi	r2,r2,-1540
     b7c:	d8800115 	stw	r2,4(sp)
     b80:	008000c4 	movi	r2,3
     b84:	d8800015 	stw	r2,0(sp)
     b88:	01c000c4 	movi	r7,3
     b8c:	018000f4 	movhi	r6,3
     b90:	31867e04 	addi	r6,r6,6648
     b94:	000b883a 	mov	r5,zero
     b98:	01000034 	movhi	r4,0
     b9c:	2101db04 	addi	r4,r4,1900
     ba0:	00195280 	call	19528 <OSTaskCreateExt>
                  task_state_controller_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(Task_move_basket,
     ba4:	d8000415 	stw	zero,16(sp)
     ba8:	d8000315 	stw	zero,12(sp)
     bac:	00820004 	movi	r2,2048
     bb0:	d8800215 	stw	r2,8(sp)
     bb4:	008000f4 	movhi	r2,3
     bb8:	10a67f04 	addi	r2,r2,-26116
     bbc:	d8800115 	stw	r2,4(sp)
     bc0:	00800084 	movi	r2,2
     bc4:	d8800015 	stw	r2,0(sp)
     bc8:	01c00084 	movi	r7,2
     bcc:	018000f4 	movhi	r6,3
     bd0:	31ae7e04 	addi	r6,r6,-17928
     bd4:	000b883a 	mov	r5,zero
     bd8:	01000034 	movhi	r4,0
     bdc:	2100d904 	addi	r4,r4,868
     be0:	00195280 	call	19528 <OSTaskCreateExt>
                  task_move_basket_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(Task_VGA_char,
     be4:	d8000415 	stw	zero,16(sp)
     be8:	d8000315 	stw	zero,12(sp)
     bec:	00820004 	movi	r2,2048
     bf0:	d8800215 	stw	r2,8(sp)
     bf4:	008000b4 	movhi	r2,2
     bf8:	10967f04 	addi	r2,r2,23036
     bfc:	d8800115 	stw	r2,4(sp)
     c00:	00800144 	movi	r2,5
     c04:	d8800015 	stw	r2,0(sp)
     c08:	01c00144 	movi	r7,5
     c0c:	018000b4 	movhi	r6,2
     c10:	319e7e04 	addi	r6,r6,31224
     c14:	000b883a 	mov	r5,zero
     c18:	01000034 	movhi	r4,0
     c1c:	21013704 	addi	r4,r4,1244
     c20:	00195280 	call	19528 <OSTaskCreateExt>
                  task_disp_vga_char_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(Task_falling_blocks,
     c24:	d8000415 	stw	zero,16(sp)
     c28:	d8000315 	stw	zero,12(sp)
     c2c:	00820004 	movi	r2,2048
     c30:	d8800215 	stw	r2,8(sp)
     c34:	008000b4 	movhi	r2,2
     c38:	109e7f04 	addi	r2,r2,31228
     c3c:	d8800115 	stw	r2,4(sp)
     c40:	00800104 	movi	r2,4
     c44:	d8800015 	stw	r2,0(sp)
     c48:	01c00104 	movi	r7,4
     c4c:	018000f4 	movhi	r6,3
     c50:	31a67e04 	addi	r6,r6,-26120
     c54:	000b883a 	mov	r5,zero
     c58:	01000034 	movhi	r4,0
     c5c:	21016d04 	addi	r4,r4,1460
     c60:	00195280 	call	19528 <OSTaskCreateExt>
                  task_falling_blocks,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSStart();
     c64:	0013e800 	call	13e80 <OSStart>
  return 0;
     c68:	0005883a 	mov	r2,zero
}
     c6c:	e6ffff04 	addi	sp,fp,-4
     c70:	dfc00217 	ldw	ra,8(sp)
     c74:	df000117 	ldw	fp,4(sp)
     c78:	dc000017 	ldw	r16,0(sp)
     c7c:	dec00304 	addi	sp,sp,12
     c80:	f800283a 	ret

00000c84 <get_State_name>:
/* ************************************************************************** */
/*                                State Tracker                               */
/* ************************************************************************** */
const char*
get_State_name(Game_State_t game_state)
{
     c84:	defffe04 	addi	sp,sp,-8
     c88:	df000115 	stw	fp,4(sp)
     c8c:	df000104 	addi	fp,sp,4
     c90:	e13fff15 	stw	r4,-4(fp)
  switch (game_state) {
     c94:	e0bfff17 	ldw	r2,-4(fp)
     c98:	10c00060 	cmpeqi	r3,r2,1
     c9c:	1800071e 	bne	r3,zero,cbc <get_State_name+0x38>
     ca0:	0080032e 	bgeu	zero,r2,cb0 <get_State_name+0x2c>
     ca4:	108000a0 	cmpeqi	r2,r2,2
     ca8:	1000071e 	bne	r2,zero,cc8 <get_State_name+0x44>
     cac:	00000906 	br	cd4 <get_State_name+0x50>
    case INIT:
      return "INIT";
     cb0:	008000b4 	movhi	r2,2
     cb4:	10baf904 	addi	r2,r2,-5148
     cb8:	00000806 	br	cdc <get_State_name+0x58>
    case PLAY:
      return "PLAY";
     cbc:	008000b4 	movhi	r2,2
     cc0:	10bafb04 	addi	r2,r2,-5140
     cc4:	00000506 	br	cdc <get_State_name+0x58>
    case PAUSE:
      return "PAUSE";
     cc8:	008000b4 	movhi	r2,2
     ccc:	10bafd04 	addi	r2,r2,-5132
     cd0:	00000206 	br	cdc <get_State_name+0x58>
    default:
      return "INVALID";
     cd4:	008000b4 	movhi	r2,2
     cd8:	10baff04 	addi	r2,r2,-5124
  }
}
     cdc:	e037883a 	mov	sp,fp
     ce0:	df000017 	ldw	fp,0(sp)
     ce4:	dec00104 	addi	sp,sp,4
     ce8:	f800283a 	ret

00000cec <VGA_text>:
/*******************************************************************************
 * Subroutine to send a string of text to the video monitor
 ******************************************************************************/
void
VGA_text(int x, int y, char* text_ptr)
{
     cec:	defffa04 	addi	sp,sp,-24
     cf0:	df000515 	stw	fp,20(sp)
     cf4:	df000504 	addi	fp,sp,20
     cf8:	e13ffd15 	stw	r4,-12(fp)
     cfc:	e17ffe15 	stw	r5,-8(fp)
     d00:	e1bfff15 	stw	r6,-4(fp)
  int offset;
  volatile char* char_buf = (char*)FPGA_CHAR_BASE; // video character buffer
     d04:	00824034 	movhi	r2,2304
     d08:	e0bffc15 	stw	r2,-16(fp)

  /* assume that the text string fits on one line */
  offset = (y << 7) + x;
     d0c:	e0bffe17 	ldw	r2,-8(fp)
     d10:	100691fa 	slli	r3,r2,7
     d14:	e0bffd17 	ldw	r2,-12(fp)
     d18:	1885883a 	add	r2,r3,r2
     d1c:	e0bffb15 	stw	r2,-20(fp)
  while (*(text_ptr)) {
     d20:	00000c06 	br	d54 <VGA_text+0x68>
    *(char_buf + offset) = *(text_ptr); // write to the character buffer
     d24:	e0bffb17 	ldw	r2,-20(fp)
     d28:	e0fffc17 	ldw	r3,-16(fp)
     d2c:	1885883a 	add	r2,r3,r2
     d30:	e0ffff17 	ldw	r3,-4(fp)
     d34:	18c00003 	ldbu	r3,0(r3)
     d38:	10c00005 	stb	r3,0(r2)
    ++text_ptr;
     d3c:	e0bfff17 	ldw	r2,-4(fp)
     d40:	10800044 	addi	r2,r2,1
     d44:	e0bfff15 	stw	r2,-4(fp)
    ++offset;
     d48:	e0bffb17 	ldw	r2,-20(fp)
     d4c:	10800044 	addi	r2,r2,1
     d50:	e0bffb15 	stw	r2,-20(fp)
  int offset;
  volatile char* char_buf = (char*)FPGA_CHAR_BASE; // video character buffer

  /* assume that the text string fits on one line */
  offset = (y << 7) + x;
  while (*(text_ptr)) {
     d54:	e0bfff17 	ldw	r2,-4(fp)
     d58:	10800003 	ldbu	r2,0(r2)
     d5c:	10803fcc 	andi	r2,r2,255
     d60:	1080201c 	xori	r2,r2,128
     d64:	10bfe004 	addi	r2,r2,-128
     d68:	103fee1e 	bne	r2,zero,d24 <VGA_text+0x38>
    *(char_buf + offset) = *(text_ptr); // write to the character buffer
    ++text_ptr;
    ++offset;
  }
}
     d6c:	0001883a 	nop
     d70:	e037883a 	mov	sp,fp
     d74:	df000017 	ldw	fp,0(sp)
     d78:	dec00104 	addi	sp,sp,4
     d7c:	f800283a 	ret

00000d80 <VGA_box>:
/*        Takes in points assuming 320x240 resolution and adjusts based on    */
/*        differences in resolution and color bits.                           */
/* ************************************************************************** */
void
VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
     d80:	defff404 	addi	sp,sp,-48
     d84:	df000b15 	stw	fp,44(sp)
     d88:	df000b04 	addi	fp,sp,44
     d8c:	e13ffb15 	stw	r4,-20(fp)
     d90:	e17ffc15 	stw	r5,-16(fp)
     d94:	e1bffd15 	stw	r6,-12(fp)
     d98:	e1fffe15 	stw	r7,-8(fp)
     d9c:	e0800117 	ldw	r2,4(fp)
     da0:	e0bfff0d 	sth	r2,-4(fp)
  int pixel_buf_ptr = *(int*)PIXEL_BUF_CTRL_BASE;
     da4:	00bfc834 	movhi	r2,65312
     da8:	108c0804 	addi	r2,r2,12320
     dac:	10800017 	ldw	r2,0(r2)
     db0:	e0bff715 	stw	r2,-36(fp)
  int pixel_ptr, row, col;

  int x_factor = 0x1 << (res_offset + col_offset);
     db4:	d0e7f817 	ldw	r3,-24608(gp)
     db8:	d0a7f017 	ldw	r2,-24640(gp)
     dbc:	1885883a 	add	r2,r3,r2
     dc0:	00c00044 	movi	r3,1
     dc4:	1884983a 	sll	r2,r3,r2
     dc8:	e0bff815 	stw	r2,-32(fp)
  int y_factor = 0x1 << (res_offset);
     dcc:	d0a7f817 	ldw	r2,-24608(gp)
     dd0:	00c00044 	movi	r3,1
     dd4:	1884983a 	sll	r2,r3,r2
     dd8:	e0bff915 	stw	r2,-28(fp)

  x1 = x1 / x_factor;
     ddc:	e0fffb17 	ldw	r3,-20(fp)
     de0:	e0bff817 	ldw	r2,-32(fp)
     de4:	1885283a 	div	r2,r3,r2
     de8:	e0bffb15 	stw	r2,-20(fp)
  x2 = x2 / x_factor;
     dec:	e0fffd17 	ldw	r3,-12(fp)
     df0:	e0bff817 	ldw	r2,-32(fp)
     df4:	1885283a 	div	r2,r3,r2
     df8:	e0bffd15 	stw	r2,-12(fp)
  y1 = y1 / y_factor;
     dfc:	e0fffc17 	ldw	r3,-16(fp)
     e00:	e0bff917 	ldw	r2,-28(fp)
     e04:	1885283a 	div	r2,r3,r2
     e08:	e0bffc15 	stw	r2,-16(fp)
  y2 = y2 / y_factor;
     e0c:	e0fffe17 	ldw	r3,-8(fp)
     e10:	e0bff917 	ldw	r2,-28(fp)
     e14:	1885283a 	div	r2,r3,r2
     e18:	e0bffe15 	stw	r2,-8(fp)

  /* assume that the box coordinates are valid */
  for (row = y1; row <= y2; row++)
     e1c:	e0bffc17 	ldw	r2,-16(fp)
     e20:	e0bff515 	stw	r2,-44(fp)
     e24:	00001c06 	br	e98 <VGA_box+0x118>
    for (col = x1; col <= x2; ++col) {
     e28:	e0bffb17 	ldw	r2,-20(fp)
     e2c:	e0bff615 	stw	r2,-40(fp)
     e30:	00001306 	br	e80 <VGA_box+0x100>
      pixel_ptr =
        pixel_buf_ptr + (row << (10 - res_offset - col_offset)) + (col << 1);
     e34:	d0a7f817 	ldw	r2,-24608(gp)
     e38:	00c00284 	movi	r3,10
     e3c:	1887c83a 	sub	r3,r3,r2
     e40:	d0a7f017 	ldw	r2,-24640(gp)
     e44:	1885c83a 	sub	r2,r3,r2
     e48:	e0fff517 	ldw	r3,-44(fp)
     e4c:	1886983a 	sll	r3,r3,r2
     e50:	e0bff717 	ldw	r2,-36(fp)
     e54:	1887883a 	add	r3,r3,r2
     e58:	e0bff617 	ldw	r2,-40(fp)
     e5c:	1085883a 	add	r2,r2,r2
  y2 = y2 / y_factor;

  /* assume that the box coordinates are valid */
  for (row = y1; row <= y2; row++)
    for (col = x1; col <= x2; ++col) {
      pixel_ptr =
     e60:	1885883a 	add	r2,r3,r2
     e64:	e0bffa15 	stw	r2,-24(fp)
        pixel_buf_ptr + (row << (10 - res_offset - col_offset)) + (col << 1);
      *(short*)pixel_ptr = pixel_color; // set pixel color
     e68:	e0bffa17 	ldw	r2,-24(fp)
     e6c:	e0ffff0b 	ldhu	r3,-4(fp)
     e70:	10c0000d 	sth	r3,0(r2)
  y1 = y1 / y_factor;
  y2 = y2 / y_factor;

  /* assume that the box coordinates are valid */
  for (row = y1; row <= y2; row++)
    for (col = x1; col <= x2; ++col) {
     e74:	e0bff617 	ldw	r2,-40(fp)
     e78:	10800044 	addi	r2,r2,1
     e7c:	e0bff615 	stw	r2,-40(fp)
     e80:	e0bff617 	ldw	r2,-40(fp)
     e84:	e0fffd17 	ldw	r3,-12(fp)
     e88:	18bfea0e 	bge	r3,r2,e34 <VGA_box+0xb4>
  x2 = x2 / x_factor;
  y1 = y1 / y_factor;
  y2 = y2 / y_factor;

  /* assume that the box coordinates are valid */
  for (row = y1; row <= y2; row++)
     e8c:	e0bff517 	ldw	r2,-44(fp)
     e90:	10800044 	addi	r2,r2,1
     e94:	e0bff515 	stw	r2,-44(fp)
     e98:	e0bff517 	ldw	r2,-44(fp)
     e9c:	e0fffe17 	ldw	r3,-8(fp)
     ea0:	18bfe10e 	bge	r3,r2,e28 <VGA_box+0xa8>
    for (col = x1; col <= x2; ++col) {
      pixel_ptr =
        pixel_buf_ptr + (row << (10 - res_offset - col_offset)) + (col << 1);
      *(short*)pixel_ptr = pixel_color; // set pixel color
    }
}
     ea4:	0001883a 	nop
     ea8:	e037883a 	mov	sp,fp
     eac:	df000017 	ldw	fp,0(sp)
     eb0:	dec00104 	addi	sp,sp,4
     eb4:	f800283a 	ret

00000eb8 <VGA_char_box>:
/*              Character to Pixel mapping: 1 character = 4 pixels            */
/* ************************************************************************** */

void
VGA_char_box(int x, int y, short color)
{
     eb8:	defff604 	addi	sp,sp,-40
     ebc:	dfc00915 	stw	ra,36(sp)
     ec0:	df000815 	stw	fp,32(sp)
     ec4:	df000804 	addi	fp,sp,32
     ec8:	e13ffd15 	stw	r4,-12(fp)
     ecc:	e17ffe15 	stw	r5,-8(fp)
     ed0:	3005883a 	mov	r2,r6
     ed4:	e0bfff0d 	sth	r2,-4(fp)
  int x1 = x * 4;
     ed8:	e0bffd17 	ldw	r2,-12(fp)
     edc:	1085883a 	add	r2,r2,r2
     ee0:	1085883a 	add	r2,r2,r2
     ee4:	e0bff915 	stw	r2,-28(fp)
  int y1 = y * 4;
     ee8:	e0bffe17 	ldw	r2,-8(fp)
     eec:	1085883a 	add	r2,r2,r2
     ef0:	1085883a 	add	r2,r2,r2
     ef4:	e0bffa15 	stw	r2,-24(fp)
  int x2 = ((x + 1) * 4) - 1;
     ef8:	e0bffd17 	ldw	r2,-12(fp)
     efc:	10800044 	addi	r2,r2,1
     f00:	1085883a 	add	r2,r2,r2
     f04:	1085883a 	add	r2,r2,r2
     f08:	10bfffc4 	addi	r2,r2,-1
     f0c:	e0bffb15 	stw	r2,-20(fp)
  int y2 = ((y + 1) * 4) - 1;
     f10:	e0bffe17 	ldw	r2,-8(fp)
     f14:	10800044 	addi	r2,r2,1
     f18:	1085883a 	add	r2,r2,r2
     f1c:	1085883a 	add	r2,r2,r2
     f20:	10bfffc4 	addi	r2,r2,-1
     f24:	e0bffc15 	stw	r2,-16(fp)

  VGA_box(x1, y1, x2, y2, color);
     f28:	e0bfff0f 	ldh	r2,-4(fp)
     f2c:	d8800015 	stw	r2,0(sp)
     f30:	e1fffc17 	ldw	r7,-16(fp)
     f34:	e1bffb17 	ldw	r6,-20(fp)
     f38:	e17ffa17 	ldw	r5,-24(fp)
     f3c:	e13ff917 	ldw	r4,-28(fp)
     f40:	0000d800 	call	d80 <VGA_box>
}
     f44:	0001883a 	nop
     f48:	e037883a 	mov	sp,fp
     f4c:	dfc00117 	ldw	ra,4(sp)
     f50:	df000017 	ldw	fp,0(sp)
     f54:	dec00204 	addi	sp,sp,8
     f58:	f800283a 	ret

00000f5c <VGA_animated_char>:
/* ************************************************************************** */
/*         Synced Animated Character embedded on top of character box         */
/* ************************************************************************** */
void
VGA_animated_char(int x, int y, char* text_ptr, short char_bg_color)
{
     f5c:	defffa04 	addi	sp,sp,-24
     f60:	dfc00515 	stw	ra,20(sp)
     f64:	df000415 	stw	fp,16(sp)
     f68:	df000404 	addi	fp,sp,16
     f6c:	e13ffc15 	stw	r4,-16(fp)
     f70:	e17ffd15 	stw	r5,-12(fp)
     f74:	e1bffe15 	stw	r6,-8(fp)
     f78:	3805883a 	mov	r2,r7
     f7c:	e0bfff0d 	sth	r2,-4(fp)
  VGA_char_box(x, y, char_bg_color);
     f80:	e0bfff0f 	ldh	r2,-4(fp)
     f84:	100d883a 	mov	r6,r2
     f88:	e17ffd17 	ldw	r5,-12(fp)
     f8c:	e13ffc17 	ldw	r4,-16(fp)
     f90:	0000eb80 	call	eb8 <VGA_char_box>
  VGA_text(x, y, text_ptr);
     f94:	e1bffe17 	ldw	r6,-8(fp)
     f98:	e17ffd17 	ldw	r5,-12(fp)
     f9c:	e13ffc17 	ldw	r4,-16(fp)
     fa0:	0000cec0 	call	cec <VGA_text>
}
     fa4:	0001883a 	nop
     fa8:	e037883a 	mov	sp,fp
     fac:	dfc00117 	ldw	ra,4(sp)
     fb0:	df000017 	ldw	fp,0(sp)
     fb4:	dec00204 	addi	sp,sp,8
     fb8:	f800283a 	ret

00000fbc <VGA_info_right>:
/* ************************************************************************** */
/*            Display Character and Pixel Configuration for Sidebar           */
/* ************************************************************************** */
void
VGA_info_right(int x, int y, char* text_ptr, short char_bg_color)
{
     fbc:	defff904 	addi	sp,sp,-28
     fc0:	dfc00615 	stw	ra,24(sp)
     fc4:	df000515 	stw	fp,20(sp)
     fc8:	df000504 	addi	fp,sp,20
     fcc:	e13ffc15 	stw	r4,-16(fp)
     fd0:	e17ffd15 	stw	r5,-12(fp)
     fd4:	e1bffe15 	stw	r6,-8(fp)
     fd8:	3805883a 	mov	r2,r7
     fdc:	e0bfff0d 	sth	r2,-4(fp)
  int i = 0;
     fe0:	e03ffb15 	stw	zero,-20(fp)
  for (i = x; i < x + 10; i++)
     fe4:	e0bffc17 	ldw	r2,-16(fp)
     fe8:	e0bffb15 	stw	r2,-20(fp)
     fec:	00000806 	br	1010 <VGA_info_right+0x54>
    VGA_char_box(i, y, char_bg_color);
     ff0:	e0bfff0f 	ldh	r2,-4(fp)
     ff4:	100d883a 	mov	r6,r2
     ff8:	e17ffd17 	ldw	r5,-12(fp)
     ffc:	e13ffb17 	ldw	r4,-20(fp)
    1000:	0000eb80 	call	eb8 <VGA_char_box>
/* ************************************************************************** */
void
VGA_info_right(int x, int y, char* text_ptr, short char_bg_color)
{
  int i = 0;
  for (i = x; i < x + 10; i++)
    1004:	e0bffb17 	ldw	r2,-20(fp)
    1008:	10800044 	addi	r2,r2,1
    100c:	e0bffb15 	stw	r2,-20(fp)
    1010:	e0bffc17 	ldw	r2,-16(fp)
    1014:	10800284 	addi	r2,r2,10
    1018:	e0fffb17 	ldw	r3,-20(fp)
    101c:	18bff416 	blt	r3,r2,ff0 <VGA_info_right+0x34>
    VGA_char_box(i, y, char_bg_color);

  VGA_text(x, y, text_ptr);
    1020:	e1bffe17 	ldw	r6,-8(fp)
    1024:	e17ffd17 	ldw	r5,-12(fp)
    1028:	e13ffc17 	ldw	r4,-16(fp)
    102c:	0000cec0 	call	cec <VGA_text>
}
    1030:	0001883a 	nop
    1034:	e037883a 	mov	sp,fp
    1038:	dfc00117 	ldw	ra,4(sp)
    103c:	df000017 	ldw	fp,0(sp)
    1040:	dec00204 	addi	sp,sp,8
    1044:	f800283a 	ret

00001048 <resample_rgb>:
/* ************************************************************************** */
/*               Resamples 24-bit color to 16-bit or 8-bit color              */
/* ************************************************************************** */
int
resample_rgb(int num_bits, int color)
{
    1048:	defffd04 	addi	sp,sp,-12
    104c:	df000215 	stw	fp,8(sp)
    1050:	df000204 	addi	fp,sp,8
    1054:	e13ffe15 	stw	r4,-8(fp)
    1058:	e17fff15 	stw	r5,-4(fp)
  if (num_bits == 8) {
    105c:	e0bffe17 	ldw	r2,-8(fp)
    1060:	10800218 	cmpnei	r2,r2,8
    1064:	1000121e 	bne	r2,zero,10b0 <resample_rgb+0x68>

    color = (((color >> 16) & 0x000000E0) | ((color >> 11) & 0x0000001C) |
    1068:	e0bfff17 	ldw	r2,-4(fp)
    106c:	1005d43a 	srai	r2,r2,16
    1070:	10c0380c 	andi	r3,r2,224
    1074:	e0bfff17 	ldw	r2,-4(fp)
    1078:	1005d2fa 	srai	r2,r2,11
    107c:	1080070c 	andi	r2,r2,28
    1080:	1886b03a 	or	r3,r3,r2
             ((color >> 6) & 0x00000003));
    1084:	e0bfff17 	ldw	r2,-4(fp)
    1088:	1005d1ba 	srai	r2,r2,6
    108c:	108000cc 	andi	r2,r2,3
int
resample_rgb(int num_bits, int color)
{
  if (num_bits == 8) {

    color = (((color >> 16) & 0x000000E0) | ((color >> 11) & 0x0000001C) |
    1090:	1884b03a 	or	r2,r3,r2
    1094:	e0bfff15 	stw	r2,-4(fp)
             ((color >> 6) & 0x00000003));

    color = (color << 8) | color;
    1098:	e0bfff17 	ldw	r2,-4(fp)
    109c:	1004923a 	slli	r2,r2,8
    10a0:	e0ffff17 	ldw	r3,-4(fp)
    10a4:	1884b03a 	or	r2,r3,r2
    10a8:	e0bfff15 	stw	r2,-4(fp)
    10ac:	00000f06 	br	10ec <resample_rgb+0xa4>

  } else if (num_bits == 16) {
    10b0:	e0bffe17 	ldw	r2,-8(fp)
    10b4:	10800418 	cmpnei	r2,r2,16
    10b8:	10000c1e 	bne	r2,zero,10ec <resample_rgb+0xa4>

    color = (((color >> 8) & 0x0000F800) | ((color >> 5) & 0x000007E0) |
    10bc:	e0bfff17 	ldw	r2,-4(fp)
    10c0:	1005d23a 	srai	r2,r2,8
    10c4:	10fe000c 	andi	r3,r2,63488
    10c8:	e0bfff17 	ldw	r2,-4(fp)
    10cc:	1005d17a 	srai	r2,r2,5
    10d0:	1081f80c 	andi	r2,r2,2016
    10d4:	1886b03a 	or	r3,r3,r2
             ((color >> 3) & 0x0000001F));
    10d8:	e0bfff17 	ldw	r2,-4(fp)
    10dc:	1005d0fa 	srai	r2,r2,3
    10e0:	108007cc 	andi	r2,r2,31

    color = (color << 8) | color;

  } else if (num_bits == 16) {

    color = (((color >> 8) & 0x0000F800) | ((color >> 5) & 0x000007E0) |
    10e4:	1884b03a 	or	r2,r3,r2
    10e8:	e0bfff15 	stw	r2,-4(fp)
             ((color >> 3) & 0x0000001F));
  }

  return color;
    10ec:	e0bfff17 	ldw	r2,-4(fp)
}
    10f0:	e037883a 	mov	sp,fp
    10f4:	df000017 	ldw	fp,0(sp)
    10f8:	dec00104 	addi	sp,sp,4
    10fc:	f800283a 	ret

00001100 <VGA_clear_screen>:
/*                             Clear game screen                              */
/* ************************************************************************** */

void
VGA_clear_screen(void)
{
    1100:	defffc04 	addi	sp,sp,-16
    1104:	dfc00315 	stw	ra,12(sp)
    1108:	df000215 	stw	fp,8(sp)
    110c:	df000204 	addi	fp,sp,8
  debug("Clearing the screen");
    1110:	d0a00217 	ldw	r2,-32760(gp)
    1114:	10800317 	ldw	r2,12(r2)
    1118:	01c02544 	movi	r7,149
    111c:	018000b4 	movhi	r6,2
    1120:	31bb0104 	addi	r6,r6,-5116
    1124:	014000b4 	movhi	r5,2
    1128:	297b0304 	addi	r5,r5,-5108
    112c:	1009883a 	mov	r4,r2
    1130:	00020240 	call	2024 <fprintf>
  VGA_box(0, 0, STANDARD_X, STANDARD_Y, 0); /* clear the screen */
    1134:	d8000015 	stw	zero,0(sp)
    1138:	01c03c04 	movi	r7,240
    113c:	01805004 	movi	r6,320
    1140:	000b883a 	mov	r5,zero
    1144:	0009883a 	mov	r4,zero
    1148:	0000d800 	call	d80 <VGA_box>

  /* clearing all characters from the screen */
  for (int i = 0; i < 60; i++)
    114c:	e03fff15 	stw	zero,-4(fp)
    1150:	00000806 	br	1174 <VGA_clear_screen+0x74>
    VGA_text(0, i, clear_row_text);
    1154:	018000b4 	movhi	r6,2
    1158:	31bec104 	addi	r6,r6,-1276
    115c:	e17fff17 	ldw	r5,-4(fp)
    1160:	0009883a 	mov	r4,zero
    1164:	0000cec0 	call	cec <VGA_text>
{
  debug("Clearing the screen");
  VGA_box(0, 0, STANDARD_X, STANDARD_Y, 0); /* clear the screen */

  /* clearing all characters from the screen */
  for (int i = 0; i < 60; i++)
    1168:	e0bfff17 	ldw	r2,-4(fp)
    116c:	10800044 	addi	r2,r2,1
    1170:	e0bfff15 	stw	r2,-4(fp)
    1174:	e0bfff17 	ldw	r2,-4(fp)
    1178:	10800f10 	cmplti	r2,r2,60
    117c:	103ff51e 	bne	r2,zero,1154 <VGA_clear_screen+0x54>
    VGA_text(0, i, clear_row_text);
}
    1180:	0001883a 	nop
    1184:	e037883a 	mov	sp,fp
    1188:	dfc00117 	ldw	ra,4(sp)
    118c:	df000017 	ldw	fp,0(sp)
    1190:	dec00204 	addi	sp,sp,8
    1194:	f800283a 	ret

00001198 <VGA_clear_game_row>:
/* ************************************************************************** */
/*                            Clear Game Screen Row                           */
/* ************************************************************************** */
void
VGA_clear_game_row(int pos_y)
{
    1198:	defffc04 	addi	sp,sp,-16
    119c:	dfc00315 	stw	ra,12(sp)
    11a0:	df000215 	stw	fp,8(sp)
    11a4:	df000204 	addi	fp,sp,8
    11a8:	e13fff15 	stw	r4,-4(fp)

  for (int i = 0; i < 70; i++)
    11ac:	e03ffe15 	stw	zero,-8(fp)
    11b0:	00000706 	br	11d0 <VGA_clear_game_row+0x38>
    VGA_char_box(i, pos_y, 0);
    11b4:	000d883a 	mov	r6,zero
    11b8:	e17fff17 	ldw	r5,-4(fp)
    11bc:	e13ffe17 	ldw	r4,-8(fp)
    11c0:	0000eb80 	call	eb8 <VGA_char_box>
/* ************************************************************************** */
void
VGA_clear_game_row(int pos_y)
{

  for (int i = 0; i < 70; i++)
    11c4:	e0bffe17 	ldw	r2,-8(fp)
    11c8:	10800044 	addi	r2,r2,1
    11cc:	e0bffe15 	stw	r2,-8(fp)
    11d0:	e0bffe17 	ldw	r2,-8(fp)
    11d4:	10801190 	cmplti	r2,r2,70
    11d8:	103ff61e 	bne	r2,zero,11b4 <VGA_clear_game_row+0x1c>
    VGA_char_box(i, pos_y, 0);

  VGA_text(0, pos_y, clear_row_text);
    11dc:	018000b4 	movhi	r6,2
    11e0:	31bec104 	addi	r6,r6,-1276
    11e4:	e17fff17 	ldw	r5,-4(fp)
    11e8:	0009883a 	mov	r4,zero
    11ec:	0000cec0 	call	cec <VGA_text>
}
    11f0:	0001883a 	nop
    11f4:	e037883a 	mov	sp,fp
    11f8:	dfc00117 	ldw	ra,4(sp)
    11fc:	df000017 	ldw	fp,0(sp)
    1200:	dec00204 	addi	sp,sp,8
    1204:	f800283a 	ret

00001208 <get_data_bits>:
/*                 Finds the number of data bits from the mode                */
/* ************************************************************************** */

int
get_data_bits(int mode)
{
    1208:	defffe04 	addi	sp,sp,-8
    120c:	df000115 	stw	fp,4(sp)
    1210:	df000104 	addi	fp,sp,4
    1214:	e13fff15 	stw	r4,-4(fp)
  switch (mode) {
    1218:	e0bfff17 	ldw	r2,-4(fp)
    121c:	10800ea8 	cmpgeui	r2,r2,58
    1220:	1000591e 	bne	r2,zero,1388 <get_data_bits+0x180>
    1224:	e0bfff17 	ldw	r2,-4(fp)
    1228:	100690ba 	slli	r3,r2,2
    122c:	00800034 	movhi	r2,0
    1230:	10849004 	addi	r2,r2,4672
    1234:	1885883a 	add	r2,r3,r2
    1238:	10800017 	ldw	r2,0(r2)
    123c:	1000683a 	jmp	r2
    1240:	00001328 	cmpgeui	zero,zero,76
    1244:	00001388 	cmpgei	zero,zero,78
    1248:	00001388 	cmpgei	zero,zero,78
    124c:	00001388 	cmpgei	zero,zero,78
    1250:	00001388 	cmpgei	zero,zero,78
    1254:	00001388 	cmpgei	zero,zero,78
    1258:	00001388 	cmpgei	zero,zero,78
    125c:	00001330 	cmpltui	zero,zero,76
    1260:	00001388 	cmpgei	zero,zero,78
    1264:	00001388 	cmpgei	zero,zero,78
    1268:	00001388 	cmpgei	zero,zero,78
    126c:	00001388 	cmpgei	zero,zero,78
    1270:	00001388 	cmpgei	zero,zero,78
    1274:	00001388 	cmpgei	zero,zero,78
    1278:	00001388 	cmpgei	zero,zero,78
    127c:	00001388 	cmpgei	zero,zero,78
    1280:	00001388 	cmpgei	zero,zero,78
    1284:	00001338 	rdprs	zero,zero,76
    1288:	00001340 	call	134 <alt_irq_handler+0x38>
    128c:	00001388 	cmpgei	zero,zero,78
    1290:	00001348 	cmpgei	zero,zero,77
    1294:	00001388 	cmpgei	zero,zero,78
    1298:	00001388 	cmpgei	zero,zero,78
    129c:	00001350 	cmplti	zero,zero,77
    12a0:	00001388 	cmpgei	zero,zero,78
    12a4:	00001358 	cmpnei	zero,zero,77
    12a8:	00001388 	cmpgei	zero,zero,78
    12ac:	00001388 	cmpgei	zero,zero,78
    12b0:	00001388 	cmpgei	zero,zero,78
    12b4:	00001388 	cmpgei	zero,zero,78
    12b8:	00001388 	cmpgei	zero,zero,78
    12bc:	00001388 	cmpgei	zero,zero,78
    12c0:	00001388 	cmpgei	zero,zero,78
    12c4:	00001388 	cmpgei	zero,zero,78
    12c8:	00001388 	cmpgei	zero,zero,78
    12cc:	00001388 	cmpgei	zero,zero,78
    12d0:	00001388 	cmpgei	zero,zero,78
    12d4:	00001388 	cmpgei	zero,zero,78
    12d8:	00001388 	cmpgei	zero,zero,78
    12dc:	00001388 	cmpgei	zero,zero,78
    12e0:	00001388 	cmpgei	zero,zero,78
    12e4:	00001388 	cmpgei	zero,zero,78
    12e8:	00001388 	cmpgei	zero,zero,78
    12ec:	00001388 	cmpgei	zero,zero,78
    12f0:	00001388 	cmpgei	zero,zero,78
    12f4:	00001388 	cmpgei	zero,zero,78
    12f8:	00001388 	cmpgei	zero,zero,78
    12fc:	00001388 	cmpgei	zero,zero,78
    1300:	00001388 	cmpgei	zero,zero,78
    1304:	00001360 	cmpeqi	zero,zero,77
    1308:	00001368 	cmpgeui	zero,zero,77
    130c:	00001370 	cmpltui	zero,zero,77
    1310:	00001388 	cmpgei	zero,zero,78
    1314:	00001388 	cmpgei	zero,zero,78
    1318:	00001388 	cmpgei	zero,zero,78
    131c:	00001378 	rdprs	zero,zero,77
    1320:	00001388 	cmpgei	zero,zero,78
    1324:	00001380 	call	138 <alt_irq_handler+0x3c>
    case 0x0:
      return 1;
    1328:	00800044 	movi	r2,1
    132c:	00001606 	br	1388 <get_data_bits+0x180>
    case 0x7:
      return 8;
    1330:	00800204 	movi	r2,8
    1334:	00001406 	br	1388 <get_data_bits+0x180>
    case 0x11:
      return 8;
    1338:	00800204 	movi	r2,8
    133c:	00001206 	br	1388 <get_data_bits+0x180>
    case 0x12:
      return 9;
    1340:	00800244 	movi	r2,9
    1344:	00001006 	br	1388 <get_data_bits+0x180>
    case 0x14:
      return 16;
    1348:	00800404 	movi	r2,16
    134c:	00000e06 	br	1388 <get_data_bits+0x180>
    case 0x17:
      return 24;
    1350:	00800604 	movi	r2,24
    1354:	00000c06 	br	1388 <get_data_bits+0x180>
    case 0x19:
      return 30;
    1358:	00800784 	movi	r2,30
    135c:	00000a06 	br	1388 <get_data_bits+0x180>
    case 0x31:
      return 8;
    1360:	00800204 	movi	r2,8
    1364:	00000806 	br	1388 <get_data_bits+0x180>
    case 0x32:
      return 12;
    1368:	00800304 	movi	r2,12
    136c:	00000606 	br	1388 <get_data_bits+0x180>
    case 0x33:
      return 16;
    1370:	00800404 	movi	r2,16
    1374:	00000406 	br	1388 <get_data_bits+0x180>
    case 0x37:
      return 32;
    1378:	00800804 	movi	r2,32
    137c:	00000206 	br	1388 <get_data_bits+0x180>
    case 0x39:
      return 40;
    1380:	00800a04 	movi	r2,40
    1384:	00000006 	br	1388 <get_data_bits+0x180>
  }
}
    1388:	e037883a 	mov	sp,fp
    138c:	df000017 	ldw	fp,0(sp)
    1390:	dec00104 	addi	sp,sp,4
    1394:	f800283a 	ret

00001398 <VGA_display_sidebar>:
/*                            Display Right Sidebar                           */
/* ************************************************************************** */

void
VGA_display_sidebar(short sidebar_color)
{
    1398:	defffd04 	addi	sp,sp,-12
    139c:	dfc00215 	stw	ra,8(sp)
    13a0:	df000115 	stw	fp,4(sp)
    13a4:	df000104 	addi	fp,sp,4
    13a8:	2005883a 	mov	r2,r4
    13ac:	e0bfff0d 	sth	r2,-4(fp)
  VGA_info_right(70, 0, "          ", sidebar_color);
    13b0:	e0bfff0f 	ldh	r2,-4(fp)
    13b4:	100f883a 	mov	r7,r2
    13b8:	018000b4 	movhi	r6,2
    13bc:	31bb0c04 	addi	r6,r6,-5072
    13c0:	000b883a 	mov	r5,zero
    13c4:	01001184 	movi	r4,70
    13c8:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 1, " Catch the", sidebar_color);
    13cc:	e0bfff0f 	ldh	r2,-4(fp)
    13d0:	100f883a 	mov	r7,r2
    13d4:	018000b4 	movhi	r6,2
    13d8:	31bb0f04 	addi	r6,r6,-5060
    13dc:	01400044 	movi	r5,1
    13e0:	01001184 	movi	r4,70
    13e4:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 2, " Numbers! ", sidebar_color);
    13e8:	e0bfff0f 	ldh	r2,-4(fp)
    13ec:	100f883a 	mov	r7,r2
    13f0:	018000b4 	movhi	r6,2
    13f4:	31bb1204 	addi	r6,r6,-5048
    13f8:	01400084 	movi	r5,2
    13fc:	01001184 	movi	r4,70
    1400:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 3, "          ", sidebar_color);
    1404:	e0bfff0f 	ldh	r2,-4(fp)
    1408:	100f883a 	mov	r7,r2
    140c:	018000b4 	movhi	r6,2
    1410:	31bb0c04 	addi	r6,r6,-5072
    1414:	014000c4 	movi	r5,3
    1418:	01001184 	movi	r4,70
    141c:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 4, "          ", sidebar_color);
    1420:	e0bfff0f 	ldh	r2,-4(fp)
    1424:	100f883a 	mov	r7,r2
    1428:	018000b4 	movhi	r6,2
    142c:	31bb0c04 	addi	r6,r6,-5072
    1430:	01400104 	movi	r5,4
    1434:	01001184 	movi	r4,70
    1438:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 5, " Score:   ", sidebar_color);
    143c:	e0bfff0f 	ldh	r2,-4(fp)
    1440:	100f883a 	mov	r7,r2
    1444:	018000b4 	movhi	r6,2
    1448:	31bb1504 	addi	r6,r6,-5036
    144c:	01400144 	movi	r5,5
    1450:	01001184 	movi	r4,70
    1454:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 6, "      000 ", sidebar_color);
    1458:	e0bfff0f 	ldh	r2,-4(fp)
    145c:	100f883a 	mov	r7,r2
    1460:	018000b4 	movhi	r6,2
    1464:	31bb1804 	addi	r6,r6,-5024
    1468:	01400184 	movi	r5,6
    146c:	01001184 	movi	r4,70
    1470:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 7, "          ", sidebar_color);
    1474:	e0bfff0f 	ldh	r2,-4(fp)
    1478:	100f883a 	mov	r7,r2
    147c:	018000b4 	movhi	r6,2
    1480:	31bb0c04 	addi	r6,r6,-5072
    1484:	014001c4 	movi	r5,7
    1488:	01001184 	movi	r4,70
    148c:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 8, " Time:    ", sidebar_color);
    1490:	e0bfff0f 	ldh	r2,-4(fp)
    1494:	100f883a 	mov	r7,r2
    1498:	018000b4 	movhi	r6,2
    149c:	31bb1b04 	addi	r6,r6,-5012
    14a0:	01400204 	movi	r5,8
    14a4:	01001184 	movi	r4,70
    14a8:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 9, " 00:00:00 ", sidebar_color);
    14ac:	e0bfff0f 	ldh	r2,-4(fp)
    14b0:	100f883a 	mov	r7,r2
    14b4:	018000b4 	movhi	r6,2
    14b8:	31bb1e04 	addi	r6,r6,-5000
    14bc:	01400244 	movi	r5,9
    14c0:	01001184 	movi	r4,70
    14c4:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 10, "          ", sidebar_color);
    14c8:	e0bfff0f 	ldh	r2,-4(fp)
    14cc:	100f883a 	mov	r7,r2
    14d0:	018000b4 	movhi	r6,2
    14d4:	31bb0c04 	addi	r6,r6,-5072
    14d8:	01400284 	movi	r5,10
    14dc:	01001184 	movi	r4,70
    14e0:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 11, "          ", sidebar_color);
    14e4:	e0bfff0f 	ldh	r2,-4(fp)
    14e8:	100f883a 	mov	r7,r2
    14ec:	018000b4 	movhi	r6,2
    14f0:	31bb0c04 	addi	r6,r6,-5072
    14f4:	014002c4 	movi	r5,11
    14f8:	01001184 	movi	r4,70
    14fc:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 12, "          ", sidebar_color);
    1500:	e0bfff0f 	ldh	r2,-4(fp)
    1504:	100f883a 	mov	r7,r2
    1508:	018000b4 	movhi	r6,2
    150c:	31bb0c04 	addi	r6,r6,-5072
    1510:	01400304 	movi	r5,12
    1514:	01001184 	movi	r4,70
    1518:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 13, "          ", sidebar_color);
    151c:	e0bfff0f 	ldh	r2,-4(fp)
    1520:	100f883a 	mov	r7,r2
    1524:	018000b4 	movhi	r6,2
    1528:	31bb0c04 	addi	r6,r6,-5072
    152c:	01400344 	movi	r5,13
    1530:	01001184 	movi	r4,70
    1534:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 14, "          ", sidebar_color);
    1538:	e0bfff0f 	ldh	r2,-4(fp)
    153c:	100f883a 	mov	r7,r2
    1540:	018000b4 	movhi	r6,2
    1544:	31bb0c04 	addi	r6,r6,-5072
    1548:	01400384 	movi	r5,14
    154c:	01001184 	movi	r4,70
    1550:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 15, "          ", sidebar_color);
    1554:	e0bfff0f 	ldh	r2,-4(fp)
    1558:	100f883a 	mov	r7,r2
    155c:	018000b4 	movhi	r6,2
    1560:	31bb0c04 	addi	r6,r6,-5072
    1564:	014003c4 	movi	r5,15
    1568:	01001184 	movi	r4,70
    156c:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 16, "          ", sidebar_color);
    1570:	e0bfff0f 	ldh	r2,-4(fp)
    1574:	100f883a 	mov	r7,r2
    1578:	018000b4 	movhi	r6,2
    157c:	31bb0c04 	addi	r6,r6,-5072
    1580:	01400404 	movi	r5,16
    1584:	01001184 	movi	r4,70
    1588:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 17, "          ", sidebar_color);
    158c:	e0bfff0f 	ldh	r2,-4(fp)
    1590:	100f883a 	mov	r7,r2
    1594:	018000b4 	movhi	r6,2
    1598:	31bb0c04 	addi	r6,r6,-5072
    159c:	01400444 	movi	r5,17
    15a0:	01001184 	movi	r4,70
    15a4:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 18, "          ", sidebar_color);
    15a8:	e0bfff0f 	ldh	r2,-4(fp)
    15ac:	100f883a 	mov	r7,r2
    15b0:	018000b4 	movhi	r6,2
    15b4:	31bb0c04 	addi	r6,r6,-5072
    15b8:	01400484 	movi	r5,18
    15bc:	01001184 	movi	r4,70
    15c0:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 19, "          ", sidebar_color);
    15c4:	e0bfff0f 	ldh	r2,-4(fp)
    15c8:	100f883a 	mov	r7,r2
    15cc:	018000b4 	movhi	r6,2
    15d0:	31bb0c04 	addi	r6,r6,-5072
    15d4:	014004c4 	movi	r5,19
    15d8:	01001184 	movi	r4,70
    15dc:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 20, "          ", sidebar_color);
    15e0:	e0bfff0f 	ldh	r2,-4(fp)
    15e4:	100f883a 	mov	r7,r2
    15e8:	018000b4 	movhi	r6,2
    15ec:	31bb0c04 	addi	r6,r6,-5072
    15f0:	01400504 	movi	r5,20
    15f4:	01001184 	movi	r4,70
    15f8:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 21, "          ", sidebar_color);
    15fc:	e0bfff0f 	ldh	r2,-4(fp)
    1600:	100f883a 	mov	r7,r2
    1604:	018000b4 	movhi	r6,2
    1608:	31bb0c04 	addi	r6,r6,-5072
    160c:	01400544 	movi	r5,21
    1610:	01001184 	movi	r4,70
    1614:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 22, "          ", sidebar_color);
    1618:	e0bfff0f 	ldh	r2,-4(fp)
    161c:	100f883a 	mov	r7,r2
    1620:	018000b4 	movhi	r6,2
    1624:	31bb0c04 	addi	r6,r6,-5072
    1628:	01400584 	movi	r5,22
    162c:	01001184 	movi	r4,70
    1630:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 23, "          ", sidebar_color);
    1634:	e0bfff0f 	ldh	r2,-4(fp)
    1638:	100f883a 	mov	r7,r2
    163c:	018000b4 	movhi	r6,2
    1640:	31bb0c04 	addi	r6,r6,-5072
    1644:	014005c4 	movi	r5,23
    1648:	01001184 	movi	r4,70
    164c:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 24, "          ", sidebar_color);
    1650:	e0bfff0f 	ldh	r2,-4(fp)
    1654:	100f883a 	mov	r7,r2
    1658:	018000b4 	movhi	r6,2
    165c:	31bb0c04 	addi	r6,r6,-5072
    1660:	01400604 	movi	r5,24
    1664:	01001184 	movi	r4,70
    1668:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 25, "          ", sidebar_color);
    166c:	e0bfff0f 	ldh	r2,-4(fp)
    1670:	100f883a 	mov	r7,r2
    1674:	018000b4 	movhi	r6,2
    1678:	31bb0c04 	addi	r6,r6,-5072
    167c:	01400644 	movi	r5,25
    1680:	01001184 	movi	r4,70
    1684:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 26, "          ", sidebar_color);
    1688:	e0bfff0f 	ldh	r2,-4(fp)
    168c:	100f883a 	mov	r7,r2
    1690:	018000b4 	movhi	r6,2
    1694:	31bb0c04 	addi	r6,r6,-5072
    1698:	01400684 	movi	r5,26
    169c:	01001184 	movi	r4,70
    16a0:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 27, "          ", sidebar_color);
    16a4:	e0bfff0f 	ldh	r2,-4(fp)
    16a8:	100f883a 	mov	r7,r2
    16ac:	018000b4 	movhi	r6,2
    16b0:	31bb0c04 	addi	r6,r6,-5072
    16b4:	014006c4 	movi	r5,27
    16b8:	01001184 	movi	r4,70
    16bc:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 28, "          ", sidebar_color);
    16c0:	e0bfff0f 	ldh	r2,-4(fp)
    16c4:	100f883a 	mov	r7,r2
    16c8:	018000b4 	movhi	r6,2
    16cc:	31bb0c04 	addi	r6,r6,-5072
    16d0:	01400704 	movi	r5,28
    16d4:	01001184 	movi	r4,70
    16d8:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 29, "          ", sidebar_color);
    16dc:	e0bfff0f 	ldh	r2,-4(fp)
    16e0:	100f883a 	mov	r7,r2
    16e4:	018000b4 	movhi	r6,2
    16e8:	31bb0c04 	addi	r6,r6,-5072
    16ec:	01400744 	movi	r5,29
    16f0:	01001184 	movi	r4,70
    16f4:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 30, "          ", sidebar_color);
    16f8:	e0bfff0f 	ldh	r2,-4(fp)
    16fc:	100f883a 	mov	r7,r2
    1700:	018000b4 	movhi	r6,2
    1704:	31bb0c04 	addi	r6,r6,-5072
    1708:	01400784 	movi	r5,30
    170c:	01001184 	movi	r4,70
    1710:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 31, "          ", sidebar_color);
    1714:	e0bfff0f 	ldh	r2,-4(fp)
    1718:	100f883a 	mov	r7,r2
    171c:	018000b4 	movhi	r6,2
    1720:	31bb0c04 	addi	r6,r6,-5072
    1724:	014007c4 	movi	r5,31
    1728:	01001184 	movi	r4,70
    172c:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 32, "          ", sidebar_color);
    1730:	e0bfff0f 	ldh	r2,-4(fp)
    1734:	100f883a 	mov	r7,r2
    1738:	018000b4 	movhi	r6,2
    173c:	31bb0c04 	addi	r6,r6,-5072
    1740:	01400804 	movi	r5,32
    1744:	01001184 	movi	r4,70
    1748:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 33, "          ", sidebar_color);
    174c:	e0bfff0f 	ldh	r2,-4(fp)
    1750:	100f883a 	mov	r7,r2
    1754:	018000b4 	movhi	r6,2
    1758:	31bb0c04 	addi	r6,r6,-5072
    175c:	01400844 	movi	r5,33
    1760:	01001184 	movi	r4,70
    1764:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 34, "          ", sidebar_color);
    1768:	e0bfff0f 	ldh	r2,-4(fp)
    176c:	100f883a 	mov	r7,r2
    1770:	018000b4 	movhi	r6,2
    1774:	31bb0c04 	addi	r6,r6,-5072
    1778:	01400884 	movi	r5,34
    177c:	01001184 	movi	r4,70
    1780:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 35, "          ", sidebar_color);
    1784:	e0bfff0f 	ldh	r2,-4(fp)
    1788:	100f883a 	mov	r7,r2
    178c:	018000b4 	movhi	r6,2
    1790:	31bb0c04 	addi	r6,r6,-5072
    1794:	014008c4 	movi	r5,35
    1798:	01001184 	movi	r4,70
    179c:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 36, "          ", sidebar_color);
    17a0:	e0bfff0f 	ldh	r2,-4(fp)
    17a4:	100f883a 	mov	r7,r2
    17a8:	018000b4 	movhi	r6,2
    17ac:	31bb0c04 	addi	r6,r6,-5072
    17b0:	01400904 	movi	r5,36
    17b4:	01001184 	movi	r4,70
    17b8:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 37, "          ", sidebar_color);
    17bc:	e0bfff0f 	ldh	r2,-4(fp)
    17c0:	100f883a 	mov	r7,r2
    17c4:	018000b4 	movhi	r6,2
    17c8:	31bb0c04 	addi	r6,r6,-5072
    17cc:	01400944 	movi	r5,37
    17d0:	01001184 	movi	r4,70
    17d4:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 38, "          ", sidebar_color);
    17d8:	e0bfff0f 	ldh	r2,-4(fp)
    17dc:	100f883a 	mov	r7,r2
    17e0:	018000b4 	movhi	r6,2
    17e4:	31bb0c04 	addi	r6,r6,-5072
    17e8:	01400984 	movi	r5,38
    17ec:	01001184 	movi	r4,70
    17f0:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 39, "          ", sidebar_color);
    17f4:	e0bfff0f 	ldh	r2,-4(fp)
    17f8:	100f883a 	mov	r7,r2
    17fc:	018000b4 	movhi	r6,2
    1800:	31bb0c04 	addi	r6,r6,-5072
    1804:	014009c4 	movi	r5,39
    1808:	01001184 	movi	r4,70
    180c:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 40, "          ", sidebar_color);
    1810:	e0bfff0f 	ldh	r2,-4(fp)
    1814:	100f883a 	mov	r7,r2
    1818:	018000b4 	movhi	r6,2
    181c:	31bb0c04 	addi	r6,r6,-5072
    1820:	01400a04 	movi	r5,40
    1824:	01001184 	movi	r4,70
    1828:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 41, "          ", sidebar_color);
    182c:	e0bfff0f 	ldh	r2,-4(fp)
    1830:	100f883a 	mov	r7,r2
    1834:	018000b4 	movhi	r6,2
    1838:	31bb0c04 	addi	r6,r6,-5072
    183c:	01400a44 	movi	r5,41
    1840:	01001184 	movi	r4,70
    1844:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 42, "          ", sidebar_color);
    1848:	e0bfff0f 	ldh	r2,-4(fp)
    184c:	100f883a 	mov	r7,r2
    1850:	018000b4 	movhi	r6,2
    1854:	31bb0c04 	addi	r6,r6,-5072
    1858:	01400a84 	movi	r5,42
    185c:	01001184 	movi	r4,70
    1860:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 43, "          ", sidebar_color);
    1864:	e0bfff0f 	ldh	r2,-4(fp)
    1868:	100f883a 	mov	r7,r2
    186c:	018000b4 	movhi	r6,2
    1870:	31bb0c04 	addi	r6,r6,-5072
    1874:	01400ac4 	movi	r5,43
    1878:	01001184 	movi	r4,70
    187c:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 44, "          ", sidebar_color);
    1880:	e0bfff0f 	ldh	r2,-4(fp)
    1884:	100f883a 	mov	r7,r2
    1888:	018000b4 	movhi	r6,2
    188c:	31bb0c04 	addi	r6,r6,-5072
    1890:	01400b04 	movi	r5,44
    1894:	01001184 	movi	r4,70
    1898:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 45, "          ", sidebar_color);
    189c:	e0bfff0f 	ldh	r2,-4(fp)
    18a0:	100f883a 	mov	r7,r2
    18a4:	018000b4 	movhi	r6,2
    18a8:	31bb0c04 	addi	r6,r6,-5072
    18ac:	01400b44 	movi	r5,45
    18b0:	01001184 	movi	r4,70
    18b4:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 46, "          ", sidebar_color);
    18b8:	e0bfff0f 	ldh	r2,-4(fp)
    18bc:	100f883a 	mov	r7,r2
    18c0:	018000b4 	movhi	r6,2
    18c4:	31bb0c04 	addi	r6,r6,-5072
    18c8:	01400b84 	movi	r5,46
    18cc:	01001184 	movi	r4,70
    18d0:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 47, "          ", sidebar_color);
    18d4:	e0bfff0f 	ldh	r2,-4(fp)
    18d8:	100f883a 	mov	r7,r2
    18dc:	018000b4 	movhi	r6,2
    18e0:	31bb0c04 	addi	r6,r6,-5072
    18e4:	01400bc4 	movi	r5,47
    18e8:	01001184 	movi	r4,70
    18ec:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 48, "          ", sidebar_color);
    18f0:	e0bfff0f 	ldh	r2,-4(fp)
    18f4:	100f883a 	mov	r7,r2
    18f8:	018000b4 	movhi	r6,2
    18fc:	31bb0c04 	addi	r6,r6,-5072
    1900:	01400c04 	movi	r5,48
    1904:	01001184 	movi	r4,70
    1908:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 49, "          ", sidebar_color);
    190c:	e0bfff0f 	ldh	r2,-4(fp)
    1910:	100f883a 	mov	r7,r2
    1914:	018000b4 	movhi	r6,2
    1918:	31bb0c04 	addi	r6,r6,-5072
    191c:	01400c44 	movi	r5,49
    1920:	01001184 	movi	r4,70
    1924:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 50, "          ", sidebar_color);
    1928:	e0bfff0f 	ldh	r2,-4(fp)
    192c:	100f883a 	mov	r7,r2
    1930:	018000b4 	movhi	r6,2
    1934:	31bb0c04 	addi	r6,r6,-5072
    1938:	01400c84 	movi	r5,50
    193c:	01001184 	movi	r4,70
    1940:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 51, "          ", sidebar_color);
    1944:	e0bfff0f 	ldh	r2,-4(fp)
    1948:	100f883a 	mov	r7,r2
    194c:	018000b4 	movhi	r6,2
    1950:	31bb0c04 	addi	r6,r6,-5072
    1954:	01400cc4 	movi	r5,51
    1958:	01001184 	movi	r4,70
    195c:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 52, "          ", sidebar_color);
    1960:	e0bfff0f 	ldh	r2,-4(fp)
    1964:	100f883a 	mov	r7,r2
    1968:	018000b4 	movhi	r6,2
    196c:	31bb0c04 	addi	r6,r6,-5072
    1970:	01400d04 	movi	r5,52
    1974:	01001184 	movi	r4,70
    1978:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 53, "          ", sidebar_color);
    197c:	e0bfff0f 	ldh	r2,-4(fp)
    1980:	100f883a 	mov	r7,r2
    1984:	018000b4 	movhi	r6,2
    1988:	31bb0c04 	addi	r6,r6,-5072
    198c:	01400d44 	movi	r5,53
    1990:	01001184 	movi	r4,70
    1994:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 54, "          ", sidebar_color);
    1998:	e0bfff0f 	ldh	r2,-4(fp)
    199c:	100f883a 	mov	r7,r2
    19a0:	018000b4 	movhi	r6,2
    19a4:	31bb0c04 	addi	r6,r6,-5072
    19a8:	01400d84 	movi	r5,54
    19ac:	01001184 	movi	r4,70
    19b0:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 55, "          ", sidebar_color);
    19b4:	e0bfff0f 	ldh	r2,-4(fp)
    19b8:	100f883a 	mov	r7,r2
    19bc:	018000b4 	movhi	r6,2
    19c0:	31bb0c04 	addi	r6,r6,-5072
    19c4:	01400dc4 	movi	r5,55
    19c8:	01001184 	movi	r4,70
    19cc:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 56, " Press    ", sidebar_color);
    19d0:	e0bfff0f 	ldh	r2,-4(fp)
    19d4:	100f883a 	mov	r7,r2
    19d8:	018000b4 	movhi	r6,2
    19dc:	31bb2104 	addi	r6,r6,-4988
    19e0:	01400e04 	movi	r5,56
    19e4:	01001184 	movi	r4,70
    19e8:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 57, " 'ESC'    ", sidebar_color);
    19ec:	e0bfff0f 	ldh	r2,-4(fp)
    19f0:	100f883a 	mov	r7,r2
    19f4:	018000b4 	movhi	r6,2
    19f8:	31bb2404 	addi	r6,r6,-4976
    19fc:	01400e44 	movi	r5,57
    1a00:	01001184 	movi	r4,70
    1a04:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 58, " to Pause ", sidebar_color);
    1a08:	e0bfff0f 	ldh	r2,-4(fp)
    1a0c:	100f883a 	mov	r7,r2
    1a10:	018000b4 	movhi	r6,2
    1a14:	31bb2704 	addi	r6,r6,-4964
    1a18:	01400e84 	movi	r5,58
    1a1c:	01001184 	movi	r4,70
    1a20:	0000fbc0 	call	fbc <VGA_info_right>
  VGA_info_right(70, 59, "          ", sidebar_color);
    1a24:	e0bfff0f 	ldh	r2,-4(fp)
    1a28:	100f883a 	mov	r7,r2
    1a2c:	018000b4 	movhi	r6,2
    1a30:	31bb0c04 	addi	r6,r6,-5072
    1a34:	01400ec4 	movi	r5,59
    1a38:	01001184 	movi	r4,70
    1a3c:	0000fbc0 	call	fbc <VGA_info_right>
}
    1a40:	0001883a 	nop
    1a44:	e037883a 	mov	sp,fp
    1a48:	dfc00117 	ldw	ra,4(sp)
    1a4c:	df000017 	ldw	fp,0(sp)
    1a50:	dec00204 	addi	sp,sp,8
    1a54:	f800283a 	ret

00001a58 <VGA_gametime_display>:
/* ************************************************************************** */
/*                              Display Game Time                             */
/* ************************************************************************** */
void
VGA_gametime_display(int hour, int minute, int second)
{
    1a58:	defff404 	addi	sp,sp,-48
    1a5c:	dfc00b15 	stw	ra,44(sp)
    1a60:	df000a15 	stw	fp,40(sp)
    1a64:	dc000915 	stw	r16,36(sp)
    1a68:	df000a04 	addi	fp,sp,40
    1a6c:	e13ffc15 	stw	r4,-16(fp)
    1a70:	e17ffd15 	stw	r5,-12(fp)
    1a74:	e1bffe15 	stw	r6,-8(fp)
  int cx;
  char buffer[10];

  cx = snprintf(buffer, 10, " %02d:%02d:%02d\0", game_hh, game_mm, game_ss);
    1a78:	d167ed17 	ldw	r5,-24652(gp)
    1a7c:	d0a7ef17 	ldw	r2,-24644(gp)
    1a80:	d0e7f217 	ldw	r3,-24632(gp)
    1a84:	e13ff904 	addi	r4,fp,-28
    1a88:	d8c00115 	stw	r3,4(sp)
    1a8c:	d8800015 	stw	r2,0(sp)
    1a90:	280f883a 	mov	r7,r5
    1a94:	018000b4 	movhi	r6,2
    1a98:	31bb2a04 	addi	r6,r6,-4952
    1a9c:	01400284 	movi	r5,10
    1aa0:	00021980 	call	2198 <snprintf>
    1aa4:	e0bff815 	stw	r2,-32(fp)
  check(cx >= 0, "cx out of range");
    1aa8:	e0bff817 	ldw	r2,-32(fp)
    1aac:	10001d0e 	bge	r2,zero,1b24 <VGA_gametime_display+0xcc>
    1ab0:	d0a00217 	ldw	r2,-32760(gp)
    1ab4:	14000317 	ldw	r16,12(r2)
    1ab8:	0001fec0 	call	1fec <__errno>
    1abc:	10800017 	ldw	r2,0(r2)
    1ac0:	10000526 	beq	r2,zero,1ad8 <VGA_gametime_display+0x80>
    1ac4:	0001fec0 	call	1fec <__errno>
    1ac8:	10800017 	ldw	r2,0(r2)
    1acc:	1009883a 	mov	r4,r2
    1ad0:	00028d80 	call	28d8 <strerror>
    1ad4:	00000206 	br	1ae0 <VGA_gametime_display+0x88>
    1ad8:	008000b4 	movhi	r2,2
    1adc:	10bb2f04 	addi	r2,r2,-4932
    1ae0:	d8800015 	stw	r2,0(sp)
    1ae4:	01c04704 	movi	r7,284
    1ae8:	018000b4 	movhi	r6,2
    1aec:	31bb0104 	addi	r6,r6,-5116
    1af0:	014000b4 	movhi	r5,2
    1af4:	297b3104 	addi	r5,r5,-4924
    1af8:	8009883a 	mov	r4,r16
    1afc:	00020240 	call	2024 <fprintf>
    1b00:	0001fec0 	call	1fec <__errno>
    1b04:	10000015 	stw	zero,0(r2)
    1b08:	0001883a 	nop

  VGA_text(70, 9, buffer);
  return;

error:
  log_err("Error caused while formatting string");
    1b0c:	d0a00217 	ldw	r2,-32760(gp)
    1b10:	14000317 	ldw	r16,12(r2)
    1b14:	0001fec0 	call	1fec <__errno>
    1b18:	10800017 	ldw	r2,0(r2)
    1b1c:	10000c26 	beq	r2,zero,1b50 <VGA_gametime_display+0xf8>
    1b20:	00000606 	br	1b3c <VGA_gametime_display+0xe4>
  char buffer[10];

  cx = snprintf(buffer, 10, " %02d:%02d:%02d\0", game_hh, game_mm, game_ss);
  check(cx >= 0, "cx out of range");

  VGA_text(70, 9, buffer);
    1b24:	e0bff904 	addi	r2,fp,-28
    1b28:	100d883a 	mov	r6,r2
    1b2c:	01400244 	movi	r5,9
    1b30:	01001184 	movi	r4,70
    1b34:	0000cec0 	call	cec <VGA_text>
    1b38:	00002506 	br	1bd0 <VGA_gametime_display+0x178>
  return;

error:
  log_err("Error caused while formatting string");
    1b3c:	0001fec0 	call	1fec <__errno>
    1b40:	10800017 	ldw	r2,0(r2)
    1b44:	1009883a 	mov	r4,r2
    1b48:	00028d80 	call	28d8 <strerror>
    1b4c:	00000206 	br	1b58 <VGA_gametime_display+0x100>
    1b50:	008000b4 	movhi	r2,2
    1b54:	10bb2f04 	addi	r2,r2,-4932
    1b58:	d8800015 	stw	r2,0(sp)
    1b5c:	01c04884 	movi	r7,290
    1b60:	018000b4 	movhi	r6,2
    1b64:	31bb0104 	addi	r6,r6,-5116
    1b68:	014000b4 	movhi	r5,2
    1b6c:	297b3c04 	addi	r5,r5,-4880
    1b70:	8009883a 	mov	r4,r16
    1b74:	00020240 	call	2024 <fprintf>
  log_err("buffer: %s", buffer);
    1b78:	d0a00217 	ldw	r2,-32760(gp)
    1b7c:	14000317 	ldw	r16,12(r2)
    1b80:	0001fec0 	call	1fec <__errno>
    1b84:	10800017 	ldw	r2,0(r2)
    1b88:	10000526 	beq	r2,zero,1ba0 <VGA_gametime_display+0x148>
    1b8c:	0001fec0 	call	1fec <__errno>
    1b90:	10800017 	ldw	r2,0(r2)
    1b94:	1009883a 	mov	r4,r2
    1b98:	00028d80 	call	28d8 <strerror>
    1b9c:	00000206 	br	1ba8 <VGA_gametime_display+0x150>
    1ba0:	008000b4 	movhi	r2,2
    1ba4:	10bb2f04 	addi	r2,r2,-4932
    1ba8:	e0fff904 	addi	r3,fp,-28
    1bac:	d8c00115 	stw	r3,4(sp)
    1bb0:	d8800015 	stw	r2,0(sp)
    1bb4:	01c048c4 	movi	r7,291
    1bb8:	018000b4 	movhi	r6,2
    1bbc:	31bb0104 	addi	r6,r6,-5116
    1bc0:	014000b4 	movhi	r5,2
    1bc4:	297b4d04 	addi	r5,r5,-4812
    1bc8:	8009883a 	mov	r4,r16
    1bcc:	00020240 	call	2024 <fprintf>
}
    1bd0:	e6ffff04 	addi	sp,fp,-4
    1bd4:	dfc00217 	ldw	ra,8(sp)
    1bd8:	df000117 	ldw	fp,4(sp)
    1bdc:	dc000017 	ldw	r16,0(sp)
    1be0:	dec00304 	addi	sp,sp,12
    1be4:	f800283a 	ret

00001be8 <VGA_display_score>:
/* ************************************************************************** */
/*                             Display Game Score                             */
/* ************************************************************************** */
void
VGA_display_score(int score)
{
    1be8:	defff604 	addi	sp,sp,-40
    1bec:	dfc00915 	stw	ra,36(sp)
    1bf0:	df000815 	stw	fp,32(sp)
    1bf4:	dc000715 	stw	r16,28(sp)
    1bf8:	df000804 	addi	fp,sp,32
    1bfc:	e13ffe15 	stw	r4,-8(fp)
  char buffer[10];

  int cx;
  cx = snprintf(buffer, 10, "      %03d\0", score);
    1c00:	e0bffb04 	addi	r2,fp,-20
    1c04:	e1fffe17 	ldw	r7,-8(fp)
    1c08:	018000b4 	movhi	r6,2
    1c0c:	31bb5704 	addi	r6,r6,-4772
    1c10:	01400284 	movi	r5,10
    1c14:	1009883a 	mov	r4,r2
    1c18:	00021980 	call	2198 <snprintf>
    1c1c:	e0bffa15 	stw	r2,-24(fp)

  debug("buffer: %s", buffer);
    1c20:	d0a00217 	ldw	r2,-32760(gp)
    1c24:	10c00317 	ldw	r3,12(r2)
    1c28:	e0bffb04 	addi	r2,fp,-20
    1c2c:	d8800015 	stw	r2,0(sp)
    1c30:	01c04c44 	movi	r7,305
    1c34:	018000b4 	movhi	r6,2
    1c38:	31bb0104 	addi	r6,r6,-5116
    1c3c:	014000b4 	movhi	r5,2
    1c40:	297b5a04 	addi	r5,r5,-4760
    1c44:	1809883a 	mov	r4,r3
    1c48:	00020240 	call	2024 <fprintf>
  check(cx >= 0, "cx out of range");
    1c4c:	e0bffa17 	ldw	r2,-24(fp)
    1c50:	10001d0e 	bge	r2,zero,1cc8 <VGA_display_score+0xe0>
    1c54:	d0a00217 	ldw	r2,-32760(gp)
    1c58:	14000317 	ldw	r16,12(r2)
    1c5c:	0001fec0 	call	1fec <__errno>
    1c60:	10800017 	ldw	r2,0(r2)
    1c64:	10000526 	beq	r2,zero,1c7c <VGA_display_score+0x94>
    1c68:	0001fec0 	call	1fec <__errno>
    1c6c:	10800017 	ldw	r2,0(r2)
    1c70:	1009883a 	mov	r4,r2
    1c74:	00028d80 	call	28d8 <strerror>
    1c78:	00000206 	br	1c84 <VGA_display_score+0x9c>
    1c7c:	008000b4 	movhi	r2,2
    1c80:	10bb2f04 	addi	r2,r2,-4932
    1c84:	d8800015 	stw	r2,0(sp)
    1c88:	01c04c84 	movi	r7,306
    1c8c:	018000b4 	movhi	r6,2
    1c90:	31bb0104 	addi	r6,r6,-5116
    1c94:	014000b4 	movhi	r5,2
    1c98:	297b3104 	addi	r5,r5,-4924
    1c9c:	8009883a 	mov	r4,r16
    1ca0:	00020240 	call	2024 <fprintf>
    1ca4:	0001fec0 	call	1fec <__errno>
    1ca8:	10000015 	stw	zero,0(r2)
    1cac:	0001883a 	nop

  VGA_text(70, 6, buffer);
  return;

error:
  log_err("Error caused while formatting string");
    1cb0:	d0a00217 	ldw	r2,-32760(gp)
    1cb4:	14000317 	ldw	r16,12(r2)
    1cb8:	0001fec0 	call	1fec <__errno>
    1cbc:	10800017 	ldw	r2,0(r2)
    1cc0:	10000c26 	beq	r2,zero,1cf4 <VGA_display_score+0x10c>
    1cc4:	00000606 	br	1ce0 <VGA_display_score+0xf8>
  cx = snprintf(buffer, 10, "      %03d\0", score);

  debug("buffer: %s", buffer);
  check(cx >= 0, "cx out of range");

  VGA_text(70, 6, buffer);
    1cc8:	e0bffb04 	addi	r2,fp,-20
    1ccc:	100d883a 	mov	r6,r2
    1cd0:	01400184 	movi	r5,6
    1cd4:	01001184 	movi	r4,70
    1cd8:	0000cec0 	call	cec <VGA_text>
    1cdc:	00002506 	br	1d74 <VGA_display_score+0x18c>
  return;

error:
  log_err("Error caused while formatting string");
    1ce0:	0001fec0 	call	1fec <__errno>
    1ce4:	10800017 	ldw	r2,0(r2)
    1ce8:	1009883a 	mov	r4,r2
    1cec:	00028d80 	call	28d8 <strerror>
    1cf0:	00000206 	br	1cfc <VGA_display_score+0x114>
    1cf4:	008000b4 	movhi	r2,2
    1cf8:	10bb2f04 	addi	r2,r2,-4932
    1cfc:	d8800015 	stw	r2,0(sp)
    1d00:	01c04e04 	movi	r7,312
    1d04:	018000b4 	movhi	r6,2
    1d08:	31bb0104 	addi	r6,r6,-5116
    1d0c:	014000b4 	movhi	r5,2
    1d10:	297b3c04 	addi	r5,r5,-4880
    1d14:	8009883a 	mov	r4,r16
    1d18:	00020240 	call	2024 <fprintf>
  log_err("buffer: %s", buffer);
    1d1c:	d0a00217 	ldw	r2,-32760(gp)
    1d20:	14000317 	ldw	r16,12(r2)
    1d24:	0001fec0 	call	1fec <__errno>
    1d28:	10800017 	ldw	r2,0(r2)
    1d2c:	10000526 	beq	r2,zero,1d44 <VGA_display_score+0x15c>
    1d30:	0001fec0 	call	1fec <__errno>
    1d34:	10800017 	ldw	r2,0(r2)
    1d38:	1009883a 	mov	r4,r2
    1d3c:	00028d80 	call	28d8 <strerror>
    1d40:	00000206 	br	1d4c <VGA_display_score+0x164>
    1d44:	008000b4 	movhi	r2,2
    1d48:	10bb2f04 	addi	r2,r2,-4932
    1d4c:	e0fffb04 	addi	r3,fp,-20
    1d50:	d8c00115 	stw	r3,4(sp)
    1d54:	d8800015 	stw	r2,0(sp)
    1d58:	01c04e44 	movi	r7,313
    1d5c:	018000b4 	movhi	r6,2
    1d60:	31bb0104 	addi	r6,r6,-5116
    1d64:	014000b4 	movhi	r5,2
    1d68:	297b4d04 	addi	r5,r5,-4812
    1d6c:	8009883a 	mov	r4,r16
    1d70:	00020240 	call	2024 <fprintf>
}
    1d74:	e6ffff04 	addi	sp,fp,-4
    1d78:	dfc00217 	ldw	ra,8(sp)
    1d7c:	df000117 	ldw	fp,4(sp)
    1d80:	dc000017 	ldw	r16,0(sp)
    1d84:	dec00304 	addi	sp,sp,12
    1d88:	f800283a 	ret

00001d8c <read_PS2_KeyboardInput>:
/* ************************************************************************** */
/*                           Read PS2 Keyboard Input                          */
/* ************************************************************************** */
void
read_PS2_KeyboardInput(void)
{
    1d8c:	defff404 	addi	sp,sp,-48
    1d90:	dfc00b15 	stw	ra,44(sp)
    1d94:	df000a15 	stw	fp,40(sp)
    1d98:	df000a04 	addi	fp,sp,40
  volatile int* PS2_ptr = (int*)PS2_BASE;
    1d9c:	00bfc834 	movhi	r2,65312
    1da0:	10804004 	addi	r2,r2,256
    1da4:	e0bffc15 	stw	r2,-16(fp)

  int PS2_data, RVALID;
  unsigned char byte1 = 0, byte2 = 0, byte3 = 0, byte4 = 0, byte5 = 0;
    1da8:	e03ffd05 	stb	zero,-12(fp)
    1dac:	e03ffb05 	stb	zero,-20(fp)
    1db0:	e03ffb45 	stb	zero,-19(fp)
    1db4:	e03ffb85 	stb	zero,-18(fp)
    1db8:	e03ffbc5 	stb	zero,-17(fp)

  *(PS2_ptr) = 0xFF; // reset PS/2
    1dbc:	e0bffc17 	ldw	r2,-16(fp)
    1dc0:	00c03fc4 	movi	r3,255
    1dc4:	10c00015 	stw	r3,0(r2)

  while (1) {
    PS2_data = *(PS2_ptr); // read the Data register in the PS/2 port
    1dc8:	e0bffc17 	ldw	r2,-16(fp)
    1dcc:	10800017 	ldw	r2,0(r2)
    1dd0:	e0bffe15 	stw	r2,-8(fp)
    RVALID = (PS2_data & 0xFFFF0000) >> 16; // extract the RVALID field
    1dd4:	e0bffe17 	ldw	r2,-8(fp)
    1dd8:	1004d43a 	srli	r2,r2,16
    1ddc:	e0bfff15 	stw	r2,-4(fp)

    if (RVALID > 0) {
    1de0:	e0bfff17 	ldw	r2,-4(fp)
    1de4:	00807a0e 	bge	zero,r2,1fd0 <read_PS2_KeyboardInput+0x244>
      /* shift the next data byte into the display */
      byte1 = byte2;
    1de8:	e0bffb03 	ldbu	r2,-20(fp)
    1dec:	e0bffd05 	stb	r2,-12(fp)
      byte2 = byte3;
    1df0:	e0bffb43 	ldbu	r2,-19(fp)
    1df4:	e0bffb05 	stb	r2,-20(fp)
      byte3 = byte4;
    1df8:	e0bffb83 	ldbu	r2,-18(fp)
    1dfc:	e0bffb45 	stb	r2,-19(fp)
      byte4 = byte5;
    1e00:	e0bffbc3 	ldbu	r2,-17(fp)
    1e04:	e0bffb85 	stb	r2,-18(fp)
      byte5 = PS2_data & 0xFF;
    1e08:	e0bffe17 	ldw	r2,-8(fp)
    1e0c:	e0bffbc5 	stb	r2,-17(fp)

      debug("byte1: 0x%02x | byte2: 0x%02x | byte3: 0x%02x | byte4: 0x%02x | "
    1e10:	d0a00217 	ldw	r2,-32760(gp)
    1e14:	12000317 	ldw	r8,12(r2)
    1e18:	e0bffd03 	ldbu	r2,-12(fp)
    1e1c:	e0fffb03 	ldbu	r3,-20(fp)
    1e20:	e13ffb43 	ldbu	r4,-19(fp)
    1e24:	e17ffb83 	ldbu	r5,-18(fp)
    1e28:	e1bffbc3 	ldbu	r6,-17(fp)
    1e2c:	d9800415 	stw	r6,16(sp)
    1e30:	d9400315 	stw	r5,12(sp)
    1e34:	d9000215 	stw	r4,8(sp)
    1e38:	d8c00115 	stw	r3,4(sp)
    1e3c:	d8800015 	stw	r2,0(sp)
    1e40:	01c056c4 	movi	r7,347
    1e44:	018000b4 	movhi	r6,2
    1e48:	31bb0104 	addi	r6,r6,-5116
    1e4c:	014000b4 	movhi	r5,2
    1e50:	297b6104 	addi	r5,r5,-4732
    1e54:	4009883a 	mov	r4,r8
    1e58:	00020240 	call	2024 <fprintf>
            byte2 & 0xFF,
            byte3 & 0xFF,
            byte4 & 0xFF,
            byte5 & 0xFF);

      if (byte4 == 0xE0 && byte5 == 0x6B)
    1e5c:	e0bffb83 	ldbu	r2,-18(fp)
    1e60:	10803818 	cmpnei	r2,r2,224
    1e64:	1000051e 	bne	r2,zero,1e7c <read_PS2_KeyboardInput+0xf0>
    1e68:	e0bffbc3 	ldbu	r2,-17(fp)
    1e6c:	10801ad8 	cmpnei	r2,r2,107
    1e70:	1000021e 	bne	r2,zero,1e7c <read_PS2_KeyboardInput+0xf0>
        left_key_pressed = 1;
    1e74:	00800044 	movi	r2,1
    1e78:	d0a7fe15 	stw	r2,-24584(gp)

      if (byte3 == 0xE0 && byte4 == 0xF0 && byte5 == 0x6B)
    1e7c:	e0bffb43 	ldbu	r2,-19(fp)
    1e80:	10803818 	cmpnei	r2,r2,224
    1e84:	1000071e 	bne	r2,zero,1ea4 <read_PS2_KeyboardInput+0x118>
    1e88:	e0bffb83 	ldbu	r2,-18(fp)
    1e8c:	10803c18 	cmpnei	r2,r2,240
    1e90:	1000041e 	bne	r2,zero,1ea4 <read_PS2_KeyboardInput+0x118>
    1e94:	e0bffbc3 	ldbu	r2,-17(fp)
    1e98:	10801ad8 	cmpnei	r2,r2,107
    1e9c:	1000011e 	bne	r2,zero,1ea4 <read_PS2_KeyboardInput+0x118>
        left_key_pressed = 0;
    1ea0:	d027fe15 	stw	zero,-24584(gp)

      if (byte4 == 0xE0 && byte5 == 0x74)
    1ea4:	e0bffb83 	ldbu	r2,-18(fp)
    1ea8:	10803818 	cmpnei	r2,r2,224
    1eac:	1000051e 	bne	r2,zero,1ec4 <read_PS2_KeyboardInput+0x138>
    1eb0:	e0bffbc3 	ldbu	r2,-17(fp)
    1eb4:	10801d18 	cmpnei	r2,r2,116
    1eb8:	1000021e 	bne	r2,zero,1ec4 <read_PS2_KeyboardInput+0x138>
        right_key_pressed = 1;
    1ebc:	00800044 	movi	r2,1
    1ec0:	d0a7e815 	stw	r2,-24672(gp)

      if (byte3 == 0xE0 && byte4 == 0xF0 && byte5 == 0x74)
    1ec4:	e0bffb43 	ldbu	r2,-19(fp)
    1ec8:	10803818 	cmpnei	r2,r2,224
    1ecc:	1000071e 	bne	r2,zero,1eec <read_PS2_KeyboardInput+0x160>
    1ed0:	e0bffb83 	ldbu	r2,-18(fp)
    1ed4:	10803c18 	cmpnei	r2,r2,240
    1ed8:	1000041e 	bne	r2,zero,1eec <read_PS2_KeyboardInput+0x160>
    1edc:	e0bffbc3 	ldbu	r2,-17(fp)
    1ee0:	10801d18 	cmpnei	r2,r2,116
    1ee4:	1000011e 	bne	r2,zero,1eec <read_PS2_KeyboardInput+0x160>
        right_key_pressed = 0;
    1ee8:	d027e815 	stw	zero,-24672(gp)

      if (byte5 == 0x76)
    1eec:	e0bffbc3 	ldbu	r2,-17(fp)
    1ef0:	10801d98 	cmpnei	r2,r2,118
    1ef4:	1000021e 	bne	r2,zero,1f00 <read_PS2_KeyboardInput+0x174>
        esc_key_pressed = 1;
    1ef8:	00800044 	movi	r2,1
    1efc:	d0a80015 	stw	r2,-24576(gp)

      if (byte4 == 0xF0 && byte5 == 0x76)
    1f00:	e0bffb83 	ldbu	r2,-18(fp)
    1f04:	10803c18 	cmpnei	r2,r2,240
    1f08:	1000041e 	bne	r2,zero,1f1c <read_PS2_KeyboardInput+0x190>
    1f0c:	e0bffbc3 	ldbu	r2,-17(fp)
    1f10:	10801d98 	cmpnei	r2,r2,118
    1f14:	1000011e 	bne	r2,zero,1f1c <read_PS2_KeyboardInput+0x190>
        esc_key_pressed = 0;
    1f18:	d0280015 	stw	zero,-24576(gp)

      if (byte4 != 0xF0 && byte5 == 0x5A){
    1f1c:	e0bffb83 	ldbu	r2,-18(fp)
    1f20:	10803c20 	cmpeqi	r2,r2,240
    1f24:	1000061e 	bne	r2,zero,1f40 <read_PS2_KeyboardInput+0x1b4>
    1f28:	e0bffbc3 	ldbu	r2,-17(fp)
    1f2c:	10801698 	cmpnei	r2,r2,90
    1f30:	1000031e 	bne	r2,zero,1f40 <read_PS2_KeyboardInput+0x1b4>
        enter_key_pressed = 1;
    1f34:	00800044 	movi	r2,1
    1f38:	d0a7eb15 	stw	r2,-24660(gp)
        return;
    1f3c:	00002606 	br	1fd8 <read_PS2_KeyboardInput+0x24c>
      }
      if (byte4 == 0xF0 && byte5 == 0x5A)
    1f40:	e0bffb83 	ldbu	r2,-18(fp)
    1f44:	10803c18 	cmpnei	r2,r2,240
    1f48:	1000041e 	bne	r2,zero,1f5c <read_PS2_KeyboardInput+0x1d0>
    1f4c:	e0bffbc3 	ldbu	r2,-17(fp)
    1f50:	10801698 	cmpnei	r2,r2,90
    1f54:	1000011e 	bne	r2,zero,1f5c <read_PS2_KeyboardInput+0x1d0>
        enter_key_pressed = 0;
    1f58:	d027eb15 	stw	zero,-24660(gp)

      if (byte4 == 0xE0)
    1f5c:	e0bffb83 	ldbu	r2,-18(fp)
    1f60:	10803818 	cmpnei	r2,r2,224
    1f64:	1000021e 	bne	r2,zero,1f70 <read_PS2_KeyboardInput+0x1e4>
        any_key_pressed = 1;
    1f68:	00800044 	movi	r2,1
    1f6c:	d0a7fb15 	stw	r2,-24596(gp)

      if (byte4 == 0xF0)
    1f70:	e0bffb83 	ldbu	r2,-18(fp)
    1f74:	10803c18 	cmpnei	r2,r2,240
    1f78:	1000011e 	bne	r2,zero,1f80 <read_PS2_KeyboardInput+0x1f4>
        any_key_pressed = 0;
    1f7c:	d027fb15 	stw	zero,-24596(gp)

      debug("any_key_pressed: %d | left_key_pressed: %d | right_key_pressed: "
    1f80:	d0a00217 	ldw	r2,-32760(gp)
    1f84:	12000317 	ldw	r8,12(r2)
    1f88:	d0a7fb17 	ldw	r2,-24596(gp)
    1f8c:	d0e7fe17 	ldw	r3,-24584(gp)
    1f90:	d127e817 	ldw	r4,-24672(gp)
    1f94:	d1680017 	ldw	r5,-24576(gp)
    1f98:	d1a7eb17 	ldw	r6,-24660(gp)
    1f9c:	d9800415 	stw	r6,16(sp)
    1fa0:	d9400315 	stw	r5,12(sp)
    1fa4:	d9000215 	stw	r4,8(sp)
    1fa8:	d8c00115 	stw	r3,4(sp)
    1fac:	d8800015 	stw	r2,0(sp)
    1fb0:	01c06084 	movi	r7,386
    1fb4:	018000b4 	movhi	r6,2
    1fb8:	31bb0104 	addi	r6,r6,-5116
    1fbc:	014000b4 	movhi	r5,2
    1fc0:	297b7804 	addi	r5,r5,-4640
    1fc4:	4009883a 	mov	r4,r8
    1fc8:	00020240 	call	2024 <fprintf>
    1fcc:	003f7e06 	br	1dc8 <read_PS2_KeyboardInput+0x3c>
            left_key_pressed,
            right_key_pressed,
            esc_key_pressed,
            enter_key_pressed);
    } else {
      any_key_pressed, left_key_pressed, right_key_pressed, esc_key_pressed,
    1fd0:	d027eb15 	stw	zero,-24660(gp)
        enter_key_pressed = 0, 0, 0, 0, 0;
    }
  }
    1fd4:	003f7c06 	br	1dc8 <read_PS2_KeyboardInput+0x3c>
}
    1fd8:	e037883a 	mov	sp,fp
    1fdc:	dfc00117 	ldw	ra,4(sp)
    1fe0:	df000017 	ldw	fp,0(sp)
    1fe4:	dec00204 	addi	sp,sp,8
    1fe8:	f800283a 	ret

00001fec <__errno>:
    1fec:	008000b4 	movhi	r2,2
    1ff0:	10864604 	addi	r2,r2,6424
    1ff4:	10800017 	ldw	r2,0(r2)
    1ff8:	f800283a 	ret

00001ffc <_fprintf_r>:
    1ffc:	defffe04 	addi	sp,sp,-8
    2000:	2809883a 	mov	r4,r5
    2004:	300b883a 	mov	r5,r6
    2008:	dfc00015 	stw	ra,0(sp)
    200c:	d9c00115 	stw	r7,4(sp)
    2010:	d9800104 	addi	r6,sp,4
    2014:	0006ccc0 	call	6ccc <__vfprintf_internal>
    2018:	dfc00017 	ldw	ra,0(sp)
    201c:	dec00204 	addi	sp,sp,8
    2020:	f800283a 	ret

00002024 <fprintf>:
    2024:	defffd04 	addi	sp,sp,-12
    2028:	dfc00015 	stw	ra,0(sp)
    202c:	d9800115 	stw	r6,4(sp)
    2030:	d9c00215 	stw	r7,8(sp)
    2034:	d9800104 	addi	r6,sp,4
    2038:	0006ccc0 	call	6ccc <__vfprintf_internal>
    203c:	dfc00017 	ldw	ra,0(sp)
    2040:	dec00304 	addi	sp,sp,12
    2044:	f800283a 	ret

00002048 <srand>:
    2048:	008000b4 	movhi	r2,2
    204c:	10864604 	addi	r2,r2,6424
    2050:	10800017 	ldw	r2,0(r2)
    2054:	11002915 	stw	r4,164(r2)
    2058:	10002a15 	stw	zero,168(r2)
    205c:	f800283a 	ret

00002060 <rand>:
    2060:	008000b4 	movhi	r2,2
    2064:	10864604 	addi	r2,r2,6424
    2068:	11c00017 	ldw	r7,0(r2)
    206c:	01532574 	movhi	r5,19605
    2070:	019614b4 	movhi	r6,22610
    2074:	38c02917 	ldw	r3,164(r7)
    2078:	39002a17 	ldw	r4,168(r7)
    207c:	295fcb44 	addi	r5,r5,32557
    2080:	31bd0b44 	addi	r6,r6,-3027
    2084:	1951383a 	mul	r8,r3,r5
    2088:	2149383a 	mul	r4,r4,r5
    208c:	198d383a 	mul	r6,r3,r6
    2090:	194a383a 	mulxuu	r5,r3,r5
    2094:	40800044 	addi	r2,r8,1
    2098:	2187883a 	add	r3,r4,r6
    209c:	1949883a 	add	r4,r3,r5
    20a0:	38802915 	stw	r2,164(r7)
    20a4:	1207803a 	cmpltu	r3,r2,r8
    20a8:	00a00034 	movhi	r2,32768
    20ac:	1907883a 	add	r3,r3,r4
    20b0:	10bfffc4 	addi	r2,r2,-1
    20b4:	38c02a15 	stw	r3,168(r7)
    20b8:	1884703a 	and	r2,r3,r2
    20bc:	f800283a 	ret

000020c0 <_snprintf_r>:
    20c0:	30003116 	blt	r6,zero,2188 <_snprintf_r+0xc8>
    20c4:	deffe404 	addi	sp,sp,-112
    20c8:	00c08204 	movi	r3,520
    20cc:	dc001a15 	stw	r16,104(sp)
    20d0:	3005883a 	mov	r2,r6
    20d4:	dfc01b15 	stw	ra,108(sp)
    20d8:	d8c0030d 	sth	r3,12(sp)
    20dc:	d9400015 	stw	r5,0(sp)
    20e0:	d9400415 	stw	r5,16(sp)
    20e4:	380d883a 	mov	r6,r7
    20e8:	2021883a 	mov	r16,r4
    20ec:	10001026 	beq	r2,zero,2130 <_snprintf_r+0x70>
    20f0:	10bfffc4 	addi	r2,r2,-1
    20f4:	d8800215 	stw	r2,8(sp)
    20f8:	d8800515 	stw	r2,20(sp)
    20fc:	d9c01c04 	addi	r7,sp,112
    2100:	00bfffc4 	movi	r2,-1
    2104:	d80b883a 	mov	r5,sp
    2108:	d880038d 	sth	r2,14(sp)
    210c:	00028f40 	call	28f4 <___svfprintf_internal_r>
    2110:	00ffffc4 	movi	r3,-1
    2114:	10c01316 	blt	r2,r3,2164 <_snprintf_r+0xa4>
    2118:	d8c00017 	ldw	r3,0(sp)
    211c:	18000005 	stb	zero,0(r3)
    2120:	dfc01b17 	ldw	ra,108(sp)
    2124:	dc001a17 	ldw	r16,104(sp)
    2128:	dec01c04 	addi	sp,sp,112
    212c:	f800283a 	ret
    2130:	00bfffc4 	movi	r2,-1
    2134:	d9c01c04 	addi	r7,sp,112
    2138:	d80b883a 	mov	r5,sp
    213c:	d8000215 	stw	zero,8(sp)
    2140:	d8000515 	stw	zero,20(sp)
    2144:	d880038d 	sth	r2,14(sp)
    2148:	00028f40 	call	28f4 <___svfprintf_internal_r>
    214c:	00ffffc4 	movi	r3,-1
    2150:	10c00716 	blt	r2,r3,2170 <_snprintf_r+0xb0>
    2154:	dfc01b17 	ldw	ra,108(sp)
    2158:	dc001a17 	ldw	r16,104(sp)
    215c:	dec01c04 	addi	sp,sp,112
    2160:	f800283a 	ret
    2164:	00c022c4 	movi	r3,139
    2168:	80c00015 	stw	r3,0(r16)
    216c:	003fea06 	br	2118 <_snprintf_r+0x58>
    2170:	00c022c4 	movi	r3,139
    2174:	80c00015 	stw	r3,0(r16)
    2178:	dfc01b17 	ldw	ra,108(sp)
    217c:	dc001a17 	ldw	r16,104(sp)
    2180:	dec01c04 	addi	sp,sp,112
    2184:	f800283a 	ret
    2188:	008022c4 	movi	r2,139
    218c:	20800015 	stw	r2,0(r4)
    2190:	00bfffc4 	movi	r2,-1
    2194:	f800283a 	ret

00002198 <snprintf>:
    2198:	deffe304 	addi	sp,sp,-116
    219c:	dfc01b15 	stw	ra,108(sp)
    21a0:	dc001a15 	stw	r16,104(sp)
    21a4:	d9c01c15 	stw	r7,112(sp)
    21a8:	008000b4 	movhi	r2,2
    21ac:	10864604 	addi	r2,r2,6424
    21b0:	14000017 	ldw	r16,0(r2)
    21b4:	28002d16 	blt	r5,zero,226c <snprintf+0xd4>
    21b8:	00808204 	movi	r2,520
    21bc:	d880030d 	sth	r2,12(sp)
    21c0:	d9000015 	stw	r4,0(sp)
    21c4:	d9000415 	stw	r4,16(sp)
    21c8:	28001126 	beq	r5,zero,2210 <snprintf+0x78>
    21cc:	28bfffc4 	addi	r2,r5,-1
    21d0:	d8800215 	stw	r2,8(sp)
    21d4:	d8800515 	stw	r2,20(sp)
    21d8:	d9c01c04 	addi	r7,sp,112
    21dc:	00bfffc4 	movi	r2,-1
    21e0:	d80b883a 	mov	r5,sp
    21e4:	8009883a 	mov	r4,r16
    21e8:	d880038d 	sth	r2,14(sp)
    21ec:	00028f40 	call	28f4 <___svfprintf_internal_r>
    21f0:	00ffffc4 	movi	r3,-1
    21f4:	10c01416 	blt	r2,r3,2248 <snprintf+0xb0>
    21f8:	d8c00017 	ldw	r3,0(sp)
    21fc:	18000005 	stb	zero,0(r3)
    2200:	dfc01b17 	ldw	ra,108(sp)
    2204:	dc001a17 	ldw	r16,104(sp)
    2208:	dec01d04 	addi	sp,sp,116
    220c:	f800283a 	ret
    2210:	00bfffc4 	movi	r2,-1
    2214:	d9c01c04 	addi	r7,sp,112
    2218:	d80b883a 	mov	r5,sp
    221c:	8009883a 	mov	r4,r16
    2220:	d8000215 	stw	zero,8(sp)
    2224:	d8000515 	stw	zero,20(sp)
    2228:	d880038d 	sth	r2,14(sp)
    222c:	00028f40 	call	28f4 <___svfprintf_internal_r>
    2230:	00ffffc4 	movi	r3,-1
    2234:	10c00716 	blt	r2,r3,2254 <snprintf+0xbc>
    2238:	dfc01b17 	ldw	ra,108(sp)
    223c:	dc001a17 	ldw	r16,104(sp)
    2240:	dec01d04 	addi	sp,sp,116
    2244:	f800283a 	ret
    2248:	00c022c4 	movi	r3,139
    224c:	80c00015 	stw	r3,0(r16)
    2250:	003fe906 	br	21f8 <snprintf+0x60>
    2254:	00c022c4 	movi	r3,139
    2258:	80c00015 	stw	r3,0(r16)
    225c:	dfc01b17 	ldw	ra,108(sp)
    2260:	dc001a17 	ldw	r16,104(sp)
    2264:	dec01d04 	addi	sp,sp,116
    2268:	f800283a 	ret
    226c:	008022c4 	movi	r2,139
    2270:	80800015 	stw	r2,0(r16)
    2274:	00bfffc4 	movi	r2,-1
    2278:	003fef06 	br	2238 <snprintf+0xa0>

0000227c <_strerror_r>:
    227c:	deffff04 	addi	sp,sp,-4
    2280:	2807883a 	mov	r3,r5
    2284:	dfc00015 	stw	ra,0(sp)
    2288:	00802384 	movi	r2,142
    228c:	300b883a 	mov	r5,r6
    2290:	10c18736 	bltu	r2,r3,28b0 <_strerror_r+0x634>
    2294:	181090ba 	slli	r8,r3,2
    2298:	00800034 	movhi	r2,0
    229c:	1088ab04 	addi	r2,r2,8876
    22a0:	4085883a 	add	r2,r8,r2
    22a4:	10800017 	ldw	r2,0(r2)
    22a8:	1000683a 	jmp	r2
    22ac:	000024e8 	cmpgeui	zero,zero,147
    22b0:	000028a4 	muli	zero,zero,162
    22b4:	00002898 	cmpnei	zero,zero,162
    22b8:	0000288c 	andi	zero,zero,162
    22bc:	00002880 	call	288 <Task_game_timer+0x4>
    22c0:	00002874 	movhi	zero,161
    22c4:	00002868 	cmpgeui	zero,zero,161
    22c8:	0000285c 	xori	zero,zero,161
    22cc:	00002850 	cmplti	zero,zero,161
    22d0:	00002844 	movi	zero,161
    22d4:	00002838 	rdprs	zero,zero,160
    22d8:	0000282c 	andhi	zero,zero,160
    22dc:	00002820 	cmpeqi	zero,zero,160
    22e0:	00002814 	movui	zero,160
    22e4:	00002808 	cmpgei	zero,zero,160
    22e8:	000028b0 	cmpltui	zero,zero,162
    22ec:	000027fc 	xorhi	zero,zero,159
    22f0:	000027f0 	cmpltui	zero,zero,159
    22f4:	000027e4 	muli	zero,zero,159
    22f8:	000027d8 	cmpnei	zero,zero,159
    22fc:	000027cc 	andi	zero,zero,159
    2300:	000027c0 	call	27c <_start+0x34>
    2304:	000027b4 	movhi	zero,158
    2308:	000027a8 	cmpgeui	zero,zero,158
    230c:	0000279c 	xori	zero,zero,158
    2310:	00002790 	cmplti	zero,zero,158
    2314:	00002784 	movi	zero,158
    2318:	00002778 	rdprs	zero,zero,157
    231c:	0000276c 	andhi	zero,zero,157
    2320:	00002760 	cmpeqi	zero,zero,157
    2324:	00002754 	movui	zero,157
    2328:	00002748 	cmpgei	zero,zero,157
    232c:	0000273c 	xorhi	zero,zero,156
    2330:	00002730 	cmpltui	zero,zero,156
    2334:	00002724 	muli	zero,zero,156
    2338:	00002718 	cmpnei	zero,zero,156
    233c:	0000270c 	andi	zero,zero,156
    2340:	000028b0 	cmpltui	zero,zero,162
    2344:	000028b0 	cmpltui	zero,zero,162
    2348:	000028b0 	cmpltui	zero,zero,162
    234c:	000028b0 	cmpltui	zero,zero,162
    2350:	000028b0 	cmpltui	zero,zero,162
    2354:	000028b0 	cmpltui	zero,zero,162
    2358:	000028b0 	cmpltui	zero,zero,162
    235c:	000028b0 	cmpltui	zero,zero,162
    2360:	00002700 	call	270 <_start+0x28>
    2364:	000026f4 	movhi	zero,155
    2368:	000028b0 	cmpltui	zero,zero,162
    236c:	000028b0 	cmpltui	zero,zero,162
    2370:	000028b0 	cmpltui	zero,zero,162
    2374:	000028b0 	cmpltui	zero,zero,162
    2378:	000028b0 	cmpltui	zero,zero,162
    237c:	000028b0 	cmpltui	zero,zero,162
    2380:	000028b0 	cmpltui	zero,zero,162
    2384:	000028b0 	cmpltui	zero,zero,162
    2388:	000028b0 	cmpltui	zero,zero,162
    238c:	000028b0 	cmpltui	zero,zero,162
    2390:	000028b0 	cmpltui	zero,zero,162
    2394:	000028b0 	cmpltui	zero,zero,162
    2398:	000028b0 	cmpltui	zero,zero,162
    239c:	000026e8 	cmpgeui	zero,zero,155
    23a0:	000026dc 	xori	zero,zero,155
    23a4:	000026d0 	cmplti	zero,zero,155
    23a8:	000026c4 	movi	zero,155
    23ac:	000028b0 	cmpltui	zero,zero,162
    23b0:	000028b0 	cmpltui	zero,zero,162
    23b4:	000028b0 	cmpltui	zero,zero,162
    23b8:	000026b8 	rdprs	zero,zero,154
    23bc:	000028b0 	cmpltui	zero,zero,162
    23c0:	000028b0 	cmpltui	zero,zero,162
    23c4:	000028b0 	cmpltui	zero,zero,162
    23c8:	000026ac 	andhi	zero,zero,154
    23cc:	000028b0 	cmpltui	zero,zero,162
    23d0:	000028b0 	cmpltui	zero,zero,162
    23d4:	000026a0 	cmpeqi	zero,zero,154
    23d8:	000028b0 	cmpltui	zero,zero,162
    23dc:	000028b0 	cmpltui	zero,zero,162
    23e0:	00002694 	movui	zero,154
    23e4:	000028b0 	cmpltui	zero,zero,162
    23e8:	000028b0 	cmpltui	zero,zero,162
    23ec:	000028b0 	cmpltui	zero,zero,162
    23f0:	000028b0 	cmpltui	zero,zero,162
    23f4:	000028b0 	cmpltui	zero,zero,162
    23f8:	000028b0 	cmpltui	zero,zero,162
    23fc:	000028b0 	cmpltui	zero,zero,162
    2400:	000028b0 	cmpltui	zero,zero,162
    2404:	000028b0 	cmpltui	zero,zero,162
    2408:	000028b0 	cmpltui	zero,zero,162
    240c:	00002688 	cmpgei	zero,zero,154
    2410:	000028b0 	cmpltui	zero,zero,162
    2414:	0000267c 	xorhi	zero,zero,153
    2418:	00002670 	cmpltui	zero,zero,153
    241c:	00002664 	muli	zero,zero,153
    2420:	000028b0 	cmpltui	zero,zero,162
    2424:	000028b0 	cmpltui	zero,zero,162
    2428:	00002658 	cmpnei	zero,zero,153
    242c:	000028b0 	cmpltui	zero,zero,162
    2430:	000028b0 	cmpltui	zero,zero,162
    2434:	000028b0 	cmpltui	zero,zero,162
    2438:	000028b0 	cmpltui	zero,zero,162
    243c:	000028b0 	cmpltui	zero,zero,162
    2440:	000028b0 	cmpltui	zero,zero,162
    2444:	000028b0 	cmpltui	zero,zero,162
    2448:	000028b0 	cmpltui	zero,zero,162
    244c:	0000264c 	andi	zero,zero,153
    2450:	00002640 	call	264 <_start+0x1c>
    2454:	00002634 	movhi	zero,152
    2458:	00002628 	cmpgeui	zero,zero,152
    245c:	0000261c 	xori	zero,zero,152
    2460:	00002610 	cmplti	zero,zero,152
    2464:	000028b0 	cmpltui	zero,zero,162
    2468:	00002604 	movi	zero,152
    246c:	000025f8 	rdprs	zero,zero,151
    2470:	000025ec 	andhi	zero,zero,151
    2474:	000025e0 	cmpeqi	zero,zero,151
    2478:	000025d4 	movui	zero,151
    247c:	000025c8 	cmpgei	zero,zero,151
    2480:	000025bc 	xorhi	zero,zero,150
    2484:	000025b0 	cmpltui	zero,zero,150
    2488:	000025a4 	muli	zero,zero,150
    248c:	00002598 	cmpnei	zero,zero,150
    2490:	0000258c 	andi	zero,zero,150
    2494:	00002580 	call	258 <_start+0x10>
    2498:	00002574 	movhi	zero,149
    249c:	000028b0 	cmpltui	zero,zero,162
    24a0:	00002568 	cmpgeui	zero,zero,149
    24a4:	0000255c 	xori	zero,zero,149
    24a8:	00002550 	cmplti	zero,zero,149
    24ac:	00002544 	movi	zero,149
    24b0:	000028b0 	cmpltui	zero,zero,162
    24b4:	000028b0 	cmpltui	zero,zero,162
    24b8:	000028b0 	cmpltui	zero,zero,162
    24bc:	000028b0 	cmpltui	zero,zero,162
    24c0:	000028b0 	cmpltui	zero,zero,162
    24c4:	00002538 	rdprs	zero,zero,148
    24c8:	000028b0 	cmpltui	zero,zero,162
    24cc:	000028b0 	cmpltui	zero,zero,162
    24d0:	000028b0 	cmpltui	zero,zero,162
    24d4:	0000252c 	andhi	zero,zero,148
    24d8:	00002520 	cmpeqi	zero,zero,148
    24dc:	00002514 	movui	zero,148
    24e0:	00002508 	cmpgei	zero,zero,148
    24e4:	000024fc 	xorhi	zero,zero,147
    24e8:	008000b4 	movhi	r2,2
    24ec:	10bb9904 	addi	r2,r2,-4508
    24f0:	dfc00017 	ldw	ra,0(sp)
    24f4:	dec00104 	addi	sp,sp,4
    24f8:	f800283a 	ret
    24fc:	008000b4 	movhi	r2,2
    2500:	10bd3604 	addi	r2,r2,-2856
    2504:	003ffa06 	br	24f0 <_strerror_r+0x274>
    2508:	008000b4 	movhi	r2,2
    250c:	10bd3004 	addi	r2,r2,-2880
    2510:	003ff706 	br	24f0 <_strerror_r+0x274>
    2514:	008000b4 	movhi	r2,2
    2518:	10bd2b04 	addi	r2,r2,-2900
    251c:	003ff406 	br	24f0 <_strerror_r+0x274>
    2520:	008000b4 	movhi	r2,2
    2524:	10bd4404 	addi	r2,r2,-2800
    2528:	003ff106 	br	24f0 <_strerror_r+0x274>
    252c:	008000b4 	movhi	r2,2
    2530:	10bc8204 	addi	r2,r2,-3576
    2534:	003fee06 	br	24f0 <_strerror_r+0x274>
    2538:	008000b4 	movhi	r2,2
    253c:	10bc5004 	addi	r2,r2,-3776
    2540:	003feb06 	br	24f0 <_strerror_r+0x274>
    2544:	008000b4 	movhi	r2,2
    2548:	10bd1e04 	addi	r2,r2,-2952
    254c:	003fe806 	br	24f0 <_strerror_r+0x274>
    2550:	008000b4 	movhi	r2,2
    2554:	10bd2404 	addi	r2,r2,-2928
    2558:	003fe506 	br	24f0 <_strerror_r+0x274>
    255c:	008000b4 	movhi	r2,2
    2560:	10bc1f04 	addi	r2,r2,-3972
    2564:	003fe206 	br	24f0 <_strerror_r+0x274>
    2568:	008000b4 	movhi	r2,2
    256c:	10bd0f04 	addi	r2,r2,-3012
    2570:	003fdf06 	br	24f0 <_strerror_r+0x274>
    2574:	008000b4 	movhi	r2,2
    2578:	10bcac04 	addi	r2,r2,-3408
    257c:	003fdc06 	br	24f0 <_strerror_r+0x274>
    2580:	008000b4 	movhi	r2,2
    2584:	10bd4e04 	addi	r2,r2,-2760
    2588:	003fd906 	br	24f0 <_strerror_r+0x274>
    258c:	008000b4 	movhi	r2,2
    2590:	10bbd104 	addi	r2,r2,-4284
    2594:	003fd606 	br	24f0 <_strerror_r+0x274>
    2598:	008000b4 	movhi	r2,2
    259c:	10bbc304 	addi	r2,r2,-4340
    25a0:	003fd306 	br	24f0 <_strerror_r+0x274>
    25a4:	008000b4 	movhi	r2,2
    25a8:	10bc0504 	addi	r2,r2,-4076
    25ac:	003fd006 	br	24f0 <_strerror_r+0x274>
    25b0:	008000b4 	movhi	r2,2
    25b4:	10bc4504 	addi	r2,r2,-3820
    25b8:	003fcd06 	br	24f0 <_strerror_r+0x274>
    25bc:	008000b4 	movhi	r2,2
    25c0:	10bc0104 	addi	r2,r2,-4092
    25c4:	003fca06 	br	24f0 <_strerror_r+0x274>
    25c8:	008000b4 	movhi	r2,2
    25cc:	10bd5304 	addi	r2,r2,-2740
    25d0:	003fc706 	br	24f0 <_strerror_r+0x274>
    25d4:	008000b4 	movhi	r2,2
    25d8:	10bc1604 	addi	r2,r2,-4008
    25dc:	003fc406 	br	24f0 <_strerror_r+0x274>
    25e0:	008000b4 	movhi	r2,2
    25e4:	10bc8b04 	addi	r2,r2,-3540
    25e8:	003fc106 	br	24f0 <_strerror_r+0x274>
    25ec:	008000b4 	movhi	r2,2
    25f0:	10bd1504 	addi	r2,r2,-2988
    25f4:	003fbe06 	br	24f0 <_strerror_r+0x274>
    25f8:	008000b4 	movhi	r2,2
    25fc:	10bd0904 	addi	r2,r2,-3036
    2600:	003fbb06 	br	24f0 <_strerror_r+0x274>
    2604:	008000b4 	movhi	r2,2
    2608:	10bcfd04 	addi	r2,r2,-3084
    260c:	003fb806 	br	24f0 <_strerror_r+0x274>
    2610:	008000b4 	movhi	r2,2
    2614:	10bcf704 	addi	r2,r2,-3108
    2618:	003fb506 	br	24f0 <_strerror_r+0x274>
    261c:	008000b4 	movhi	r2,2
    2620:	10bcef04 	addi	r2,r2,-3140
    2624:	003fb206 	br	24f0 <_strerror_r+0x274>
    2628:	008000b4 	movhi	r2,2
    262c:	10bce704 	addi	r2,r2,-3172
    2630:	003faf06 	br	24f0 <_strerror_r+0x274>
    2634:	008000b4 	movhi	r2,2
    2638:	10bcdb04 	addi	r2,r2,-3220
    263c:	003fac06 	br	24f0 <_strerror_r+0x274>
    2640:	008000b4 	movhi	r2,2
    2644:	10bcd204 	addi	r2,r2,-3256
    2648:	003fa906 	br	24f0 <_strerror_r+0x274>
    264c:	008000b4 	movhi	r2,2
    2650:	10bd0204 	addi	r2,r2,-3064
    2654:	003fa606 	br	24f0 <_strerror_r+0x274>
    2658:	008000b4 	movhi	r2,2
    265c:	10bd3b04 	addi	r2,r2,-2836
    2660:	003fa306 	br	24f0 <_strerror_r+0x274>
    2664:	008000b4 	movhi	r2,2
    2668:	10bccc04 	addi	r2,r2,-3280
    266c:	003fa006 	br	24f0 <_strerror_r+0x274>
    2670:	008000b4 	movhi	r2,2
    2674:	10bcc504 	addi	r2,r2,-3308
    2678:	003f9d06 	br	24f0 <_strerror_r+0x274>
    267c:	008000b4 	movhi	r2,2
    2680:	10bcc004 	addi	r2,r2,-3328
    2684:	003f9a06 	br	24f0 <_strerror_r+0x274>
    2688:	008000b4 	movhi	r2,2
    268c:	10bcb904 	addi	r2,r2,-3356
    2690:	003f9706 	br	24f0 <_strerror_r+0x274>
    2694:	008000b4 	movhi	r2,2
    2698:	10bcb604 	addi	r2,r2,-3368
    269c:	003f9406 	br	24f0 <_strerror_r+0x274>
    26a0:	008000b4 	movhi	r2,2
    26a4:	10bcb104 	addi	r2,r2,-3388
    26a8:	003f9106 	br	24f0 <_strerror_r+0x274>
    26ac:	008000b4 	movhi	r2,2
    26b0:	10bca804 	addi	r2,r2,-3424
    26b4:	003f8e06 	br	24f0 <_strerror_r+0x274>
    26b8:	008000b4 	movhi	r2,2
    26bc:	10bca204 	addi	r2,r2,-3448
    26c0:	003f8b06 	br	24f0 <_strerror_r+0x274>
    26c4:	008000b4 	movhi	r2,2
    26c8:	10bc9d04 	addi	r2,r2,-3468
    26cc:	003f8806 	br	24f0 <_strerror_r+0x274>
    26d0:	008000b4 	movhi	r2,2
    26d4:	10bc9704 	addi	r2,r2,-3492
    26d8:	003f8506 	br	24f0 <_strerror_r+0x274>
    26dc:	008000b4 	movhi	r2,2
    26e0:	10bcd904 	addi	r2,r2,-3228
    26e4:	003f8206 	br	24f0 <_strerror_r+0x274>
    26e8:	008000b4 	movhi	r2,2
    26ec:	10bc9304 	addi	r2,r2,-3508
    26f0:	003f7f06 	br	24f0 <_strerror_r+0x274>
    26f4:	008000b4 	movhi	r2,2
    26f8:	10bc9104 	addi	r2,r2,-3516
    26fc:	003f7c06 	br	24f0 <_strerror_r+0x274>
    2700:	008000b4 	movhi	r2,2
    2704:	10bc8804 	addi	r2,r2,-3552
    2708:	003f7906 	br	24f0 <_strerror_r+0x274>
    270c:	008000b4 	movhi	r2,2
    2710:	10bc7d04 	addi	r2,r2,-3596
    2714:	003f7606 	br	24f0 <_strerror_r+0x274>
    2718:	008000b4 	movhi	r2,2
    271c:	10bc7604 	addi	r2,r2,-3624
    2720:	003f7306 	br	24f0 <_strerror_r+0x274>
    2724:	008000b4 	movhi	r2,2
    2728:	10bc7104 	addi	r2,r2,-3644
    272c:	003f7006 	br	24f0 <_strerror_r+0x274>
    2730:	008000b4 	movhi	r2,2
    2734:	10bc6504 	addi	r2,r2,-3692
    2738:	003f6d06 	br	24f0 <_strerror_r+0x274>
    273c:	008000b4 	movhi	r2,2
    2740:	10bc6204 	addi	r2,r2,-3704
    2744:	003f6a06 	br	24f0 <_strerror_r+0x274>
    2748:	008000b4 	movhi	r2,2
    274c:	10bc5e04 	addi	r2,r2,-3720
    2750:	003f6706 	br	24f0 <_strerror_r+0x274>
    2754:	008000b4 	movhi	r2,2
    2758:	10bc5804 	addi	r2,r2,-3744
    275c:	003f6406 	br	24f0 <_strerror_r+0x274>
    2760:	008000b4 	movhi	r2,2
    2764:	10bc5404 	addi	r2,r2,-3760
    2768:	003f6106 	br	24f0 <_strerror_r+0x274>
    276c:	008000b4 	movhi	r2,2
    2770:	10bc4a04 	addi	r2,r2,-3800
    2774:	003f5e06 	br	24f0 <_strerror_r+0x274>
    2778:	008000b4 	movhi	r2,2
    277c:	10bc4104 	addi	r2,r2,-3836
    2780:	003f5b06 	br	24f0 <_strerror_r+0x274>
    2784:	008000b4 	movhi	r2,2
    2788:	10bc3d04 	addi	r2,r2,-3852
    278c:	003f5806 	br	24f0 <_strerror_r+0x274>
    2790:	008000b4 	movhi	r2,2
    2794:	10bc3704 	addi	r2,r2,-3876
    2798:	003f5506 	br	24f0 <_strerror_r+0x274>
    279c:	008000b4 	movhi	r2,2
    27a0:	10bc2f04 	addi	r2,r2,-3908
    27a4:	003f5206 	br	24f0 <_strerror_r+0x274>
    27a8:	008000b4 	movhi	r2,2
    27ac:	10bc2704 	addi	r2,r2,-3940
    27b0:	003f4f06 	br	24f0 <_strerror_r+0x274>
    27b4:	008000b4 	movhi	r2,2
    27b8:	10bc1104 	addi	r2,r2,-4028
    27bc:	003f4c06 	br	24f0 <_strerror_r+0x274>
    27c0:	008000b4 	movhi	r2,2
    27c4:	10bc0d04 	addi	r2,r2,-4044
    27c8:	003f4906 	br	24f0 <_strerror_r+0x274>
    27cc:	008000b4 	movhi	r2,2
    27d0:	10bbfd04 	addi	r2,r2,-4108
    27d4:	003f4606 	br	24f0 <_strerror_r+0x274>
    27d8:	008000b4 	movhi	r2,2
    27dc:	10bbf904 	addi	r2,r2,-4124
    27e0:	003f4306 	br	24f0 <_strerror_r+0x274>
    27e4:	008000b4 	movhi	r2,2
    27e8:	10bbf404 	addi	r2,r2,-4144
    27ec:	003f4006 	br	24f0 <_strerror_r+0x274>
    27f0:	008000b4 	movhi	r2,2
    27f4:	10bbf104 	addi	r2,r2,-4156
    27f8:	003f3d06 	br	24f0 <_strerror_r+0x274>
    27fc:	008000b4 	movhi	r2,2
    2800:	10bbeb04 	addi	r2,r2,-4180
    2804:	003f3a06 	br	24f0 <_strerror_r+0x274>
    2808:	008000b4 	movhi	r2,2
    280c:	10bbe804 	addi	r2,r2,-4192
    2810:	003f3706 	br	24f0 <_strerror_r+0x274>
    2814:	008000b4 	movhi	r2,2
    2818:	10bbe304 	addi	r2,r2,-4212
    281c:	003f3406 	br	24f0 <_strerror_r+0x274>
    2820:	008000b4 	movhi	r2,2
    2824:	10bbde04 	addi	r2,r2,-4232
    2828:	003f3106 	br	24f0 <_strerror_r+0x274>
    282c:	008000b4 	movhi	r2,2
    2830:	10bbd904 	addi	r2,r2,-4252
    2834:	003f2e06 	br	24f0 <_strerror_r+0x274>
    2838:	008000b4 	movhi	r2,2
    283c:	10bbce04 	addi	r2,r2,-4296
    2840:	003f2b06 	br	24f0 <_strerror_r+0x274>
    2844:	008000b4 	movhi	r2,2
    2848:	10bbca04 	addi	r2,r2,-4312
    284c:	003f2806 	br	24f0 <_strerror_r+0x274>
    2850:	008000b4 	movhi	r2,2
    2854:	10bbbe04 	addi	r2,r2,-4360
    2858:	003f2506 	br	24f0 <_strerror_r+0x274>
    285c:	008000b4 	movhi	r2,2
    2860:	10bbb904 	addi	r2,r2,-4380
    2864:	003f2206 	br	24f0 <_strerror_r+0x274>
    2868:	008000b4 	movhi	r2,2
    286c:	10bbb204 	addi	r2,r2,-4408
    2870:	003f1f06 	br	24f0 <_strerror_r+0x274>
    2874:	008000b4 	movhi	r2,2
    2878:	10bbaf04 	addi	r2,r2,-4420
    287c:	003f1c06 	br	24f0 <_strerror_r+0x274>
    2880:	008000b4 	movhi	r2,2
    2884:	10bba904 	addi	r2,r2,-4444
    2888:	003f1906 	br	24f0 <_strerror_r+0x274>
    288c:	008000b4 	movhi	r2,2
    2890:	10bba504 	addi	r2,r2,-4460
    2894:	003f1606 	br	24f0 <_strerror_r+0x274>
    2898:	008000b4 	movhi	r2,2
    289c:	10bb9e04 	addi	r2,r2,-4488
    28a0:	003f1306 	br	24f0 <_strerror_r+0x274>
    28a4:	008000b4 	movhi	r2,2
    28a8:	10bb9b04 	addi	r2,r2,-4500
    28ac:	003f1006 	br	24f0 <_strerror_r+0x274>
    28b0:	38000726 	beq	r7,zero,28d0 <_strerror_r+0x654>
    28b4:	380d883a 	mov	r6,r7
    28b8:	1809883a 	mov	r4,r3
    28bc:	0004acc0 	call	4acc <_user_strerror>
    28c0:	103f0b1e 	bne	r2,zero,24f0 <_strerror_r+0x274>
    28c4:	008000b4 	movhi	r2,2
    28c8:	10bd6104 	addi	r2,r2,-2684
    28cc:	003f0806 	br	24f0 <_strerror_r+0x274>
    28d0:	200f883a 	mov	r7,r4
    28d4:	003ff706 	br	28b4 <_strerror_r+0x638>

000028d8 <strerror>:
    28d8:	008000b4 	movhi	r2,2
    28dc:	10864604 	addi	r2,r2,6424
    28e0:	200b883a 	mov	r5,r4
    28e4:	11000017 	ldw	r4,0(r2)
    28e8:	000f883a 	mov	r7,zero
    28ec:	000d883a 	mov	r6,zero
    28f0:	000227c1 	jmpi	227c <_strerror_r>

000028f4 <___svfprintf_internal_r>:
    28f4:	deffb704 	addi	sp,sp,-292
    28f8:	dfc04815 	stw	ra,288(sp)
    28fc:	ddc04615 	stw	r23,280(sp)
    2900:	d9402c15 	stw	r5,176(sp)
    2904:	d9003915 	stw	r4,228(sp)
    2908:	302f883a 	mov	r23,r6
    290c:	d9c02d15 	stw	r7,180(sp)
    2910:	df004715 	stw	fp,284(sp)
    2914:	dd804515 	stw	r22,276(sp)
    2918:	dd404415 	stw	r21,272(sp)
    291c:	dd004315 	stw	r20,268(sp)
    2920:	dcc04215 	stw	r19,264(sp)
    2924:	dc804115 	stw	r18,260(sp)
    2928:	dc404015 	stw	r17,256(sp)
    292c:	dc003f15 	stw	r16,252(sp)
    2930:	00094300 	call	9430 <_localeconv_r>
    2934:	10800017 	ldw	r2,0(r2)
    2938:	1009883a 	mov	r4,r2
    293c:	d8803415 	stw	r2,208(sp)
    2940:	000b4580 	call	b458 <strlen>
    2944:	d8c02c17 	ldw	r3,176(sp)
    2948:	d8803815 	stw	r2,224(sp)
    294c:	1880030b 	ldhu	r2,12(r3)
    2950:	1080200c 	andi	r2,r2,128
    2954:	10000226 	beq	r2,zero,2960 <___svfprintf_internal_r+0x6c>
    2958:	18800417 	ldw	r2,16(r3)
    295c:	10067f26 	beq	r2,zero,435c <___svfprintf_internal_r+0x1a68>
    2960:	dcc03917 	ldw	r19,228(sp)
    2964:	d8c00404 	addi	r3,sp,16
    2968:	054000b4 	movhi	r21,2
    296c:	d9001e04 	addi	r4,sp,120
    2970:	ad7d6984 	addi	r21,r21,-2650
    2974:	d8c01e15 	stw	r3,120(sp)
    2978:	d8002015 	stw	zero,128(sp)
    297c:	d8001f15 	stw	zero,124(sp)
    2980:	d8003315 	stw	zero,204(sp)
    2984:	d8003615 	stw	zero,216(sp)
    2988:	d8003715 	stw	zero,220(sp)
    298c:	1811883a 	mov	r8,r3
    2990:	d8003a15 	stw	zero,232(sp)
    2994:	d8003b15 	stw	zero,236(sp)
    2998:	d8002f15 	stw	zero,188(sp)
    299c:	d9002815 	stw	r4,160(sp)
    29a0:	b8800007 	ldb	r2,0(r23)
    29a4:	10026726 	beq	r2,zero,3344 <___svfprintf_internal_r+0xa50>
    29a8:	00c00944 	movi	r3,37
    29ac:	b821883a 	mov	r16,r23
    29b0:	10c0021e 	bne	r2,r3,29bc <___svfprintf_internal_r+0xc8>
    29b4:	00001406 	br	2a08 <___svfprintf_internal_r+0x114>
    29b8:	10c00326 	beq	r2,r3,29c8 <___svfprintf_internal_r+0xd4>
    29bc:	84000044 	addi	r16,r16,1
    29c0:	80800007 	ldb	r2,0(r16)
    29c4:	103ffc1e 	bne	r2,zero,29b8 <___svfprintf_internal_r+0xc4>
    29c8:	85e3c83a 	sub	r17,r16,r23
    29cc:	88000e26 	beq	r17,zero,2a08 <___svfprintf_internal_r+0x114>
    29d0:	d8c02017 	ldw	r3,128(sp)
    29d4:	d8801f17 	ldw	r2,124(sp)
    29d8:	45c00015 	stw	r23,0(r8)
    29dc:	1c47883a 	add	r3,r3,r17
    29e0:	10800044 	addi	r2,r2,1
    29e4:	d8c02015 	stw	r3,128(sp)
    29e8:	44400115 	stw	r17,4(r8)
    29ec:	d8801f15 	stw	r2,124(sp)
    29f0:	00c001c4 	movi	r3,7
    29f4:	18809716 	blt	r3,r2,2c54 <___svfprintf_internal_r+0x360>
    29f8:	42000204 	addi	r8,r8,8
    29fc:	d9402f17 	ldw	r5,188(sp)
    2a00:	2c4b883a 	add	r5,r5,r17
    2a04:	d9402f15 	stw	r5,188(sp)
    2a08:	80800007 	ldb	r2,0(r16)
    2a0c:	10009826 	beq	r2,zero,2c70 <___svfprintf_internal_r+0x37c>
    2a10:	84400047 	ldb	r17,1(r16)
    2a14:	00bfffc4 	movi	r2,-1
    2a18:	85c00044 	addi	r23,r16,1
    2a1c:	d8002785 	stb	zero,158(sp)
    2a20:	0007883a 	mov	r3,zero
    2a24:	000f883a 	mov	r7,zero
    2a28:	d8802915 	stw	r2,164(sp)
    2a2c:	d8003115 	stw	zero,196(sp)
    2a30:	0025883a 	mov	r18,zero
    2a34:	01401604 	movi	r5,88
    2a38:	01800244 	movi	r6,9
    2a3c:	02800a84 	movi	r10,42
    2a40:	02401b04 	movi	r9,108
    2a44:	bdc00044 	addi	r23,r23,1
    2a48:	88bff804 	addi	r2,r17,-32
    2a4c:	2882f036 	bltu	r5,r2,3610 <___svfprintf_internal_r+0xd1c>
    2a50:	100490ba 	slli	r2,r2,2
    2a54:	01000034 	movhi	r4,0
    2a58:	210a9a04 	addi	r4,r4,10856
    2a5c:	1105883a 	add	r2,r2,r4
    2a60:	10800017 	ldw	r2,0(r2)
    2a64:	1000683a 	jmp	r2
    2a68:	00003578 	rdprs	zero,zero,213
    2a6c:	00003610 	cmplti	zero,zero,216
    2a70:	00003610 	cmplti	zero,zero,216
    2a74:	0000356c 	andhi	zero,zero,213
    2a78:	00003610 	cmplti	zero,zero,216
    2a7c:	00003610 	cmplti	zero,zero,216
    2a80:	00003610 	cmplti	zero,zero,216
    2a84:	00003610 	cmplti	zero,zero,216
    2a88:	00003610 	cmplti	zero,zero,216
    2a8c:	00003610 	cmplti	zero,zero,216
    2a90:	00002ccc 	andi	zero,zero,179
    2a94:	000034a8 	cmpgeui	zero,zero,210
    2a98:	00003610 	cmplti	zero,zero,216
    2a9c:	00002bdc 	xori	zero,zero,175
    2aa0:	00002cf4 	movhi	zero,179
    2aa4:	00003610 	cmplti	zero,zero,216
    2aa8:	00002d68 	cmpgeui	zero,zero,181
    2aac:	00002d34 	movhi	zero,180
    2ab0:	00002d34 	movhi	zero,180
    2ab4:	00002d34 	movhi	zero,180
    2ab8:	00002d34 	movhi	zero,180
    2abc:	00002d34 	movhi	zero,180
    2ac0:	00002d34 	movhi	zero,180
    2ac4:	00002d34 	movhi	zero,180
    2ac8:	00002d34 	movhi	zero,180
    2acc:	00002d34 	movhi	zero,180
    2ad0:	00003610 	cmplti	zero,zero,216
    2ad4:	00003610 	cmplti	zero,zero,216
    2ad8:	00003610 	cmplti	zero,zero,216
    2adc:	00003610 	cmplti	zero,zero,216
    2ae0:	00003610 	cmplti	zero,zero,216
    2ae4:	00003610 	cmplti	zero,zero,216
    2ae8:	00003610 	cmplti	zero,zero,216
    2aec:	00003610 	cmplti	zero,zero,216
    2af0:	00003610 	cmplti	zero,zero,216
    2af4:	00003610 	cmplti	zero,zero,216
    2af8:	00002e20 	cmpeqi	zero,zero,184
    2afc:	00002d74 	movhi	zero,181
    2b00:	00003610 	cmplti	zero,zero,216
    2b04:	00002d74 	movhi	zero,181
    2b08:	00003610 	cmplti	zero,zero,216
    2b0c:	00003610 	cmplti	zero,zero,216
    2b10:	00003610 	cmplti	zero,zero,216
    2b14:	00003610 	cmplti	zero,zero,216
    2b18:	00002e14 	movui	zero,184
    2b1c:	00003610 	cmplti	zero,zero,216
    2b20:	00003610 	cmplti	zero,zero,216
    2b24:	00002edc 	xori	zero,zero,187
    2b28:	00003610 	cmplti	zero,zero,216
    2b2c:	00003610 	cmplti	zero,zero,216
    2b30:	00003610 	cmplti	zero,zero,216
    2b34:	00003610 	cmplti	zero,zero,216
    2b38:	00003610 	cmplti	zero,zero,216
    2b3c:	0000334c 	andi	zero,zero,205
    2b40:	00003610 	cmplti	zero,zero,216
    2b44:	00003610 	cmplti	zero,zero,216
    2b48:	000033ac 	andhi	zero,zero,206
    2b4c:	00003610 	cmplti	zero,zero,216
    2b50:	00003610 	cmplti	zero,zero,216
    2b54:	00003610 	cmplti	zero,zero,216
    2b58:	00003610 	cmplti	zero,zero,216
    2b5c:	00003610 	cmplti	zero,zero,216
    2b60:	00003610 	cmplti	zero,zero,216
    2b64:	00003610 	cmplti	zero,zero,216
    2b68:	00003610 	cmplti	zero,zero,216
    2b6c:	00003610 	cmplti	zero,zero,216
    2b70:	00003610 	cmplti	zero,zero,216
    2b74:	0000345c 	xori	zero,zero,209
    2b78:	00003598 	cmpnei	zero,zero,214
    2b7c:	00002d74 	movhi	zero,181
    2b80:	00002d74 	movhi	zero,181
    2b84:	00002d74 	movhi	zero,181
    2b88:	000035ec 	andhi	zero,zero,215
    2b8c:	00003598 	cmpnei	zero,zero,214
    2b90:	00003610 	cmplti	zero,zero,216
    2b94:	00003610 	cmplti	zero,zero,216
    2b98:	000035a8 	cmpgeui	zero,zero,214
    2b9c:	00003610 	cmplti	zero,zero,216
    2ba0:	000035b8 	rdprs	zero,zero,214
    2ba4:	00003498 	cmpnei	zero,zero,210
    2ba8:	00002be8 	cmpgeui	zero,zero,175
    2bac:	000034b8 	rdprs	zero,zero,210
    2bb0:	00003610 	cmplti	zero,zero,216
    2bb4:	000034c4 	movi	zero,211
    2bb8:	00003610 	cmplti	zero,zero,216
    2bbc:	00003520 	cmpeqi	zero,zero,212
    2bc0:	00003610 	cmplti	zero,zero,216
    2bc4:	00003610 	cmplti	zero,zero,216
    2bc8:	00003530 	cmpltui	zero,zero,212
    2bcc:	d9003117 	ldw	r4,196(sp)
    2bd0:	d8802d15 	stw	r2,180(sp)
    2bd4:	0109c83a 	sub	r4,zero,r4
    2bd8:	d9003115 	stw	r4,196(sp)
    2bdc:	94800114 	ori	r18,r18,4
    2be0:	bc400007 	ldb	r17,0(r23)
    2be4:	003f9706 	br	2a44 <___svfprintf_internal_r+0x150>
    2be8:	00800c04 	movi	r2,48
    2bec:	d9002d17 	ldw	r4,180(sp)
    2bf0:	d9402917 	ldw	r5,164(sp)
    2bf4:	d8802705 	stb	r2,156(sp)
    2bf8:	00801e04 	movi	r2,120
    2bfc:	d8802745 	stb	r2,157(sp)
    2c00:	d8002785 	stb	zero,158(sp)
    2c04:	20c00104 	addi	r3,r4,4
    2c08:	25000017 	ldw	r20,0(r4)
    2c0c:	002d883a 	mov	r22,zero
    2c10:	90800094 	ori	r2,r18,2
    2c14:	28028616 	blt	r5,zero,3630 <___svfprintf_internal_r+0xd3c>
    2c18:	00bfdfc4 	movi	r2,-129
    2c1c:	90a4703a 	and	r18,r18,r2
    2c20:	d8c02d15 	stw	r3,180(sp)
    2c24:	94800094 	ori	r18,r18,2
    2c28:	a002731e 	bne	r20,zero,35f8 <___svfprintf_internal_r+0xd04>
    2c2c:	008000b4 	movhi	r2,2
    2c30:	10bd6204 	addi	r2,r2,-2680
    2c34:	d8803a15 	stw	r2,232(sp)
    2c38:	04401e04 	movi	r17,120
    2c3c:	d8c02917 	ldw	r3,164(sp)
    2c40:	0039883a 	mov	fp,zero
    2c44:	1801d526 	beq	r3,zero,339c <___svfprintf_internal_r+0xaa8>
    2c48:	0029883a 	mov	r20,zero
    2c4c:	002d883a 	mov	r22,zero
    2c50:	0001f106 	br	3418 <___svfprintf_internal_r+0xb24>
    2c54:	d9402c17 	ldw	r5,176(sp)
    2c58:	d9801e04 	addi	r6,sp,120
    2c5c:	9809883a 	mov	r4,r19
    2c60:	000b4f00 	call	b4f0 <__ssprint_r>
    2c64:	1000081e 	bne	r2,zero,2c88 <___svfprintf_internal_r+0x394>
    2c68:	da000404 	addi	r8,sp,16
    2c6c:	003f6306 	br	29fc <___svfprintf_internal_r+0x108>
    2c70:	d8802017 	ldw	r2,128(sp)
    2c74:	10000426 	beq	r2,zero,2c88 <___svfprintf_internal_r+0x394>
    2c78:	d9402c17 	ldw	r5,176(sp)
    2c7c:	d9003917 	ldw	r4,228(sp)
    2c80:	d9801e04 	addi	r6,sp,120
    2c84:	000b4f00 	call	b4f0 <__ssprint_r>
    2c88:	d8802c17 	ldw	r2,176(sp)
    2c8c:	10c0030b 	ldhu	r3,12(r2)
    2c90:	d8802f17 	ldw	r2,188(sp)
    2c94:	18c0100c 	andi	r3,r3,64
    2c98:	1805f51e 	bne	r3,zero,4470 <___svfprintf_internal_r+0x1b7c>
    2c9c:	dfc04817 	ldw	ra,288(sp)
    2ca0:	df004717 	ldw	fp,284(sp)
    2ca4:	ddc04617 	ldw	r23,280(sp)
    2ca8:	dd804517 	ldw	r22,276(sp)
    2cac:	dd404417 	ldw	r21,272(sp)
    2cb0:	dd004317 	ldw	r20,268(sp)
    2cb4:	dcc04217 	ldw	r19,264(sp)
    2cb8:	dc804117 	ldw	r18,260(sp)
    2cbc:	dc404017 	ldw	r17,256(sp)
    2cc0:	dc003f17 	ldw	r16,252(sp)
    2cc4:	dec04904 	addi	sp,sp,292
    2cc8:	f800283a 	ret
    2ccc:	d8802d17 	ldw	r2,180(sp)
    2cd0:	d9002d17 	ldw	r4,180(sp)
    2cd4:	10800017 	ldw	r2,0(r2)
    2cd8:	d8803115 	stw	r2,196(sp)
    2cdc:	20800104 	addi	r2,r4,4
    2ce0:	d9003117 	ldw	r4,196(sp)
    2ce4:	203fb916 	blt	r4,zero,2bcc <___svfprintf_internal_r+0x2d8>
    2ce8:	d8802d15 	stw	r2,180(sp)
    2cec:	bc400007 	ldb	r17,0(r23)
    2cf0:	003f5406 	br	2a44 <___svfprintf_internal_r+0x150>
    2cf4:	bc400007 	ldb	r17,0(r23)
    2cf8:	bac00044 	addi	r11,r23,1
    2cfc:	8a873926 	beq	r17,r10,49e4 <___svfprintf_internal_r+0x20f0>
    2d00:	88bff404 	addi	r2,r17,-48
    2d04:	0009883a 	mov	r4,zero
    2d08:	30868836 	bltu	r6,r2,472c <___svfprintf_internal_r+0x1e38>
    2d0c:	5c400007 	ldb	r17,0(r11)
    2d10:	210002a4 	muli	r4,r4,10
    2d14:	5dc00044 	addi	r23,r11,1
    2d18:	b817883a 	mov	r11,r23
    2d1c:	2089883a 	add	r4,r4,r2
    2d20:	88bff404 	addi	r2,r17,-48
    2d24:	30bff92e 	bgeu	r6,r2,2d0c <___svfprintf_internal_r+0x418>
    2d28:	2005d716 	blt	r4,zero,4488 <___svfprintf_internal_r+0x1b94>
    2d2c:	d9002915 	stw	r4,164(sp)
    2d30:	003f4506 	br	2a48 <___svfprintf_internal_r+0x154>
    2d34:	b809883a 	mov	r4,r23
    2d38:	d8003115 	stw	zero,196(sp)
    2d3c:	88bff404 	addi	r2,r17,-48
    2d40:	0017883a 	mov	r11,zero
    2d44:	24400007 	ldb	r17,0(r4)
    2d48:	5ac002a4 	muli	r11,r11,10
    2d4c:	bdc00044 	addi	r23,r23,1
    2d50:	b809883a 	mov	r4,r23
    2d54:	12d7883a 	add	r11,r2,r11
    2d58:	88bff404 	addi	r2,r17,-48
    2d5c:	30bff92e 	bgeu	r6,r2,2d44 <___svfprintf_internal_r+0x450>
    2d60:	dac03115 	stw	r11,196(sp)
    2d64:	003f3806 	br	2a48 <___svfprintf_internal_r+0x154>
    2d68:	94802014 	ori	r18,r18,128
    2d6c:	bc400007 	ldb	r17,0(r23)
    2d70:	003f3406 	br	2a44 <___svfprintf_internal_r+0x150>
    2d74:	18c03fcc 	andi	r3,r3,255
    2d78:	1807471e 	bne	r3,zero,4a98 <___svfprintf_internal_r+0x21a4>
    2d7c:	9080020c 	andi	r2,r18,8
    2d80:	10047d26 	beq	r2,zero,3f78 <___svfprintf_internal_r+0x1684>
    2d84:	d8c02d17 	ldw	r3,180(sp)
    2d88:	d9002d17 	ldw	r4,180(sp)
    2d8c:	d9402d17 	ldw	r5,180(sp)
    2d90:	18c00017 	ldw	r3,0(r3)
    2d94:	21000117 	ldw	r4,4(r4)
    2d98:	29400204 	addi	r5,r5,8
    2d9c:	d8c03615 	stw	r3,216(sp)
    2da0:	d9003715 	stw	r4,220(sp)
    2da4:	d9402d15 	stw	r5,180(sp)
    2da8:	d9003617 	ldw	r4,216(sp)
    2dac:	d9403717 	ldw	r5,220(sp)
    2db0:	da003e15 	stw	r8,248(sp)
    2db4:	04000044 	movi	r16,1
    2db8:	000b1780 	call	b178 <__fpclassifyd>
    2dbc:	da003e17 	ldw	r8,248(sp)
    2dc0:	14044b1e 	bne	r2,r16,3ef0 <___svfprintf_internal_r+0x15fc>
    2dc4:	d9003617 	ldw	r4,216(sp)
    2dc8:	d9403717 	ldw	r5,220(sp)
    2dcc:	000d883a 	mov	r6,zero
    2dd0:	000f883a 	mov	r7,zero
    2dd4:	00113500 	call	11350 <__ledf2>
    2dd8:	da003e17 	ldw	r8,248(sp)
    2ddc:	1005f316 	blt	r2,zero,45ac <___svfprintf_internal_r+0x1cb8>
    2de0:	df002783 	ldbu	fp,158(sp)
    2de4:	008011c4 	movi	r2,71
    2de8:	1445590e 	bge	r2,r17,4350 <___svfprintf_internal_r+0x1a5c>
    2dec:	040000b4 	movhi	r16,2
    2df0:	843d5a04 	addi	r16,r16,-2712
    2df4:	00c000c4 	movi	r3,3
    2df8:	00bfdfc4 	movi	r2,-129
    2dfc:	d8c02a15 	stw	r3,168(sp)
    2e00:	90a4703a 	and	r18,r18,r2
    2e04:	d8c02e15 	stw	r3,184(sp)
    2e08:	d8002915 	stw	zero,164(sp)
    2e0c:	d8003215 	stw	zero,200(sp)
    2e10:	00006606 	br	2fac <___svfprintf_internal_r+0x6b8>
    2e14:	94800214 	ori	r18,r18,8
    2e18:	bc400007 	ldb	r17,0(r23)
    2e1c:	003f0906 	br	2a44 <___svfprintf_internal_r+0x150>
    2e20:	18c03fcc 	andi	r3,r3,255
    2e24:	1807181e 	bne	r3,zero,4a88 <___svfprintf_internal_r+0x2194>
    2e28:	94800414 	ori	r18,r18,16
    2e2c:	9080080c 	andi	r2,r18,32
    2e30:	10039626 	beq	r2,zero,3c8c <___svfprintf_internal_r+0x1398>
    2e34:	d9402d17 	ldw	r5,180(sp)
    2e38:	28800117 	ldw	r2,4(r5)
    2e3c:	2d000017 	ldw	r20,0(r5)
    2e40:	29400204 	addi	r5,r5,8
    2e44:	d9402d15 	stw	r5,180(sp)
    2e48:	102d883a 	mov	r22,r2
    2e4c:	10039816 	blt	r2,zero,3cb0 <___svfprintf_internal_r+0x13bc>
    2e50:	d9402917 	ldw	r5,164(sp)
    2e54:	df002783 	ldbu	fp,158(sp)
    2e58:	2803ab16 	blt	r5,zero,3d08 <___svfprintf_internal_r+0x1414>
    2e5c:	00ffdfc4 	movi	r3,-129
    2e60:	a584b03a 	or	r2,r20,r22
    2e64:	90e4703a 	and	r18,r18,r3
    2e68:	10014a26 	beq	r2,zero,3394 <___svfprintf_internal_r+0xaa0>
    2e6c:	b0034b26 	beq	r22,zero,3b9c <___svfprintf_internal_r+0x12a8>
    2e70:	dc402a15 	stw	r17,168(sp)
    2e74:	dc001e04 	addi	r16,sp,120
    2e78:	b023883a 	mov	r17,r22
    2e7c:	402d883a 	mov	r22,r8
    2e80:	a009883a 	mov	r4,r20
    2e84:	880b883a 	mov	r5,r17
    2e88:	01800284 	movi	r6,10
    2e8c:	000f883a 	mov	r7,zero
    2e90:	000f96c0 	call	f96c <__umoddi3>
    2e94:	10800c04 	addi	r2,r2,48
    2e98:	843fffc4 	addi	r16,r16,-1
    2e9c:	a009883a 	mov	r4,r20
    2ea0:	880b883a 	mov	r5,r17
    2ea4:	80800005 	stb	r2,0(r16)
    2ea8:	01800284 	movi	r6,10
    2eac:	000f883a 	mov	r7,zero
    2eb0:	000f3f40 	call	f3f4 <__udivdi3>
    2eb4:	1029883a 	mov	r20,r2
    2eb8:	10c4b03a 	or	r2,r2,r3
    2ebc:	1823883a 	mov	r17,r3
    2ec0:	103fef1e 	bne	r2,zero,2e80 <___svfprintf_internal_r+0x58c>
    2ec4:	d8c02817 	ldw	r3,160(sp)
    2ec8:	dc402a17 	ldw	r17,168(sp)
    2ecc:	b011883a 	mov	r8,r22
    2ed0:	1c07c83a 	sub	r3,r3,r16
    2ed4:	d8c02e15 	stw	r3,184(sp)
    2ed8:	00002e06 	br	2f94 <___svfprintf_internal_r+0x6a0>
    2edc:	18c03fcc 	andi	r3,r3,255
    2ee0:	1806e71e 	bne	r3,zero,4a80 <___svfprintf_internal_r+0x218c>
    2ee4:	94800414 	ori	r18,r18,16
    2ee8:	9080080c 	andi	r2,r18,32
    2eec:	1002d426 	beq	r2,zero,3a40 <___svfprintf_internal_r+0x114c>
    2ef0:	d9402d17 	ldw	r5,180(sp)
    2ef4:	d8c02917 	ldw	r3,164(sp)
    2ef8:	d8002785 	stb	zero,158(sp)
    2efc:	28800204 	addi	r2,r5,8
    2f00:	2d000017 	ldw	r20,0(r5)
    2f04:	2d800117 	ldw	r22,4(r5)
    2f08:	18041516 	blt	r3,zero,3f60 <___svfprintf_internal_r+0x166c>
    2f0c:	013fdfc4 	movi	r4,-129
    2f10:	a586b03a 	or	r3,r20,r22
    2f14:	d8802d15 	stw	r2,180(sp)
    2f18:	9124703a 	and	r18,r18,r4
    2f1c:	1802d51e 	bne	r3,zero,3a74 <___svfprintf_internal_r+0x1180>
    2f20:	d9402917 	ldw	r5,164(sp)
    2f24:	0039883a 	mov	fp,zero
    2f28:	2806be26 	beq	r5,zero,4a24 <___svfprintf_internal_r+0x2130>
    2f2c:	0029883a 	mov	r20,zero
    2f30:	002d883a 	mov	r22,zero
    2f34:	dc001e04 	addi	r16,sp,120
    2f38:	a006d0fa 	srli	r3,r20,3
    2f3c:	b008977a 	slli	r4,r22,29
    2f40:	b02cd0fa 	srli	r22,r22,3
    2f44:	a50001cc 	andi	r20,r20,7
    2f48:	a0800c04 	addi	r2,r20,48
    2f4c:	843fffc4 	addi	r16,r16,-1
    2f50:	20e8b03a 	or	r20,r4,r3
    2f54:	80800005 	stb	r2,0(r16)
    2f58:	a586b03a 	or	r3,r20,r22
    2f5c:	183ff61e 	bne	r3,zero,2f38 <___svfprintf_internal_r+0x644>
    2f60:	90c0004c 	andi	r3,r18,1
    2f64:	18013926 	beq	r3,zero,344c <___svfprintf_internal_r+0xb58>
    2f68:	10803fcc 	andi	r2,r2,255
    2f6c:	1080201c 	xori	r2,r2,128
    2f70:	10bfe004 	addi	r2,r2,-128
    2f74:	00c00c04 	movi	r3,48
    2f78:	10c13426 	beq	r2,r3,344c <___svfprintf_internal_r+0xb58>
    2f7c:	80ffffc5 	stb	r3,-1(r16)
    2f80:	d8c02817 	ldw	r3,160(sp)
    2f84:	80bfffc4 	addi	r2,r16,-1
    2f88:	1021883a 	mov	r16,r2
    2f8c:	1887c83a 	sub	r3,r3,r2
    2f90:	d8c02e15 	stw	r3,184(sp)
    2f94:	d8802e17 	ldw	r2,184(sp)
    2f98:	d9002917 	ldw	r4,164(sp)
    2f9c:	1100010e 	bge	r2,r4,2fa4 <___svfprintf_internal_r+0x6b0>
    2fa0:	2005883a 	mov	r2,r4
    2fa4:	d8802a15 	stw	r2,168(sp)
    2fa8:	d8003215 	stw	zero,200(sp)
    2fac:	e7003fcc 	andi	fp,fp,255
    2fb0:	e700201c 	xori	fp,fp,128
    2fb4:	e73fe004 	addi	fp,fp,-128
    2fb8:	e0000326 	beq	fp,zero,2fc8 <___svfprintf_internal_r+0x6d4>
    2fbc:	d8c02a17 	ldw	r3,168(sp)
    2fc0:	18c00044 	addi	r3,r3,1
    2fc4:	d8c02a15 	stw	r3,168(sp)
    2fc8:	90c0008c 	andi	r3,r18,2
    2fcc:	d8c02b15 	stw	r3,172(sp)
    2fd0:	18000326 	beq	r3,zero,2fe0 <___svfprintf_internal_r+0x6ec>
    2fd4:	d8c02a17 	ldw	r3,168(sp)
    2fd8:	18c00084 	addi	r3,r3,2
    2fdc:	d8c02a15 	stw	r3,168(sp)
    2fe0:	90c0210c 	andi	r3,r18,132
    2fe4:	d8c03015 	stw	r3,192(sp)
    2fe8:	1801a11e 	bne	r3,zero,3670 <___svfprintf_internal_r+0xd7c>
    2fec:	d9003117 	ldw	r4,196(sp)
    2ff0:	d8c02a17 	ldw	r3,168(sp)
    2ff4:	20e9c83a 	sub	r20,r4,r3
    2ff8:	05019d0e 	bge	zero,r20,3670 <___svfprintf_internal_r+0xd7c>
    2ffc:	02400404 	movi	r9,16
    3000:	d8c02017 	ldw	r3,128(sp)
    3004:	d8801f17 	ldw	r2,124(sp)
    3008:	4d051b0e 	bge	r9,r20,4478 <___svfprintf_internal_r+0x1b84>
    300c:	014000b4 	movhi	r5,2
    3010:	297d6d84 	addi	r5,r5,-2634
    3014:	dc403c15 	stw	r17,240(sp)
    3018:	d9403515 	stw	r5,212(sp)
    301c:	a023883a 	mov	r17,r20
    3020:	482d883a 	mov	r22,r9
    3024:	9029883a 	mov	r20,r18
    3028:	070001c4 	movi	fp,7
    302c:	8025883a 	mov	r18,r16
    3030:	dc002c17 	ldw	r16,176(sp)
    3034:	00000306 	br	3044 <___svfprintf_internal_r+0x750>
    3038:	8c7ffc04 	addi	r17,r17,-16
    303c:	42000204 	addi	r8,r8,8
    3040:	b440130e 	bge	r22,r17,3090 <___svfprintf_internal_r+0x79c>
    3044:	010000b4 	movhi	r4,2
    3048:	18c00404 	addi	r3,r3,16
    304c:	10800044 	addi	r2,r2,1
    3050:	213d6d84 	addi	r4,r4,-2634
    3054:	41000015 	stw	r4,0(r8)
    3058:	45800115 	stw	r22,4(r8)
    305c:	d8c02015 	stw	r3,128(sp)
    3060:	d8801f15 	stw	r2,124(sp)
    3064:	e0bff40e 	bge	fp,r2,3038 <___svfprintf_internal_r+0x744>
    3068:	d9801e04 	addi	r6,sp,120
    306c:	800b883a 	mov	r5,r16
    3070:	9809883a 	mov	r4,r19
    3074:	000b4f00 	call	b4f0 <__ssprint_r>
    3078:	103f031e 	bne	r2,zero,2c88 <___svfprintf_internal_r+0x394>
    307c:	8c7ffc04 	addi	r17,r17,-16
    3080:	d8c02017 	ldw	r3,128(sp)
    3084:	d8801f17 	ldw	r2,124(sp)
    3088:	da000404 	addi	r8,sp,16
    308c:	b47fed16 	blt	r22,r17,3044 <___svfprintf_internal_r+0x750>
    3090:	9021883a 	mov	r16,r18
    3094:	a025883a 	mov	r18,r20
    3098:	8829883a 	mov	r20,r17
    309c:	dc403c17 	ldw	r17,240(sp)
    30a0:	d9403517 	ldw	r5,212(sp)
    30a4:	a0c7883a 	add	r3,r20,r3
    30a8:	10800044 	addi	r2,r2,1
    30ac:	41400015 	stw	r5,0(r8)
    30b0:	45000115 	stw	r20,4(r8)
    30b4:	d8c02015 	stw	r3,128(sp)
    30b8:	d8801f15 	stw	r2,124(sp)
    30bc:	010001c4 	movi	r4,7
    30c0:	20829f16 	blt	r4,r2,3b40 <___svfprintf_internal_r+0x124c>
    30c4:	df002787 	ldb	fp,158(sp)
    30c8:	42000204 	addi	r8,r8,8
    30cc:	e0000c26 	beq	fp,zero,3100 <___svfprintf_internal_r+0x80c>
    30d0:	d8801f17 	ldw	r2,124(sp)
    30d4:	d9002784 	addi	r4,sp,158
    30d8:	18c00044 	addi	r3,r3,1
    30dc:	10800044 	addi	r2,r2,1
    30e0:	41000015 	stw	r4,0(r8)
    30e4:	01000044 	movi	r4,1
    30e8:	41000115 	stw	r4,4(r8)
    30ec:	d8c02015 	stw	r3,128(sp)
    30f0:	d8801f15 	stw	r2,124(sp)
    30f4:	010001c4 	movi	r4,7
    30f8:	20823816 	blt	r4,r2,39dc <___svfprintf_internal_r+0x10e8>
    30fc:	42000204 	addi	r8,r8,8
    3100:	d8802b17 	ldw	r2,172(sp)
    3104:	10000c26 	beq	r2,zero,3138 <___svfprintf_internal_r+0x844>
    3108:	d8801f17 	ldw	r2,124(sp)
    310c:	d9002704 	addi	r4,sp,156
    3110:	18c00084 	addi	r3,r3,2
    3114:	10800044 	addi	r2,r2,1
    3118:	41000015 	stw	r4,0(r8)
    311c:	01000084 	movi	r4,2
    3120:	41000115 	stw	r4,4(r8)
    3124:	d8c02015 	stw	r3,128(sp)
    3128:	d8801f15 	stw	r2,124(sp)
    312c:	010001c4 	movi	r4,7
    3130:	20823216 	blt	r4,r2,39fc <___svfprintf_internal_r+0x1108>
    3134:	42000204 	addi	r8,r8,8
    3138:	d9003017 	ldw	r4,192(sp)
    313c:	00802004 	movi	r2,128
    3140:	20819726 	beq	r4,r2,37a0 <___svfprintf_internal_r+0xeac>
    3144:	d9402917 	ldw	r5,164(sp)
    3148:	d8802e17 	ldw	r2,184(sp)
    314c:	28adc83a 	sub	r22,r5,r2
    3150:	05802f0e 	bge	zero,r22,3210 <___svfprintf_internal_r+0x91c>
    3154:	07000404 	movi	fp,16
    3158:	d8801f17 	ldw	r2,124(sp)
    315c:	e583c00e 	bge	fp,r22,4060 <___svfprintf_internal_r+0x176c>
    3160:	014000b4 	movhi	r5,2
    3164:	297d6984 	addi	r5,r5,-2650
    3168:	dc402915 	stw	r17,164(sp)
    316c:	d9402b15 	stw	r5,172(sp)
    3170:	b023883a 	mov	r17,r22
    3174:	050001c4 	movi	r20,7
    3178:	902d883a 	mov	r22,r18
    317c:	8025883a 	mov	r18,r16
    3180:	dc002c17 	ldw	r16,176(sp)
    3184:	00000306 	br	3194 <___svfprintf_internal_r+0x8a0>
    3188:	8c7ffc04 	addi	r17,r17,-16
    318c:	42000204 	addi	r8,r8,8
    3190:	e440110e 	bge	fp,r17,31d8 <___svfprintf_internal_r+0x8e4>
    3194:	18c00404 	addi	r3,r3,16
    3198:	10800044 	addi	r2,r2,1
    319c:	45400015 	stw	r21,0(r8)
    31a0:	47000115 	stw	fp,4(r8)
    31a4:	d8c02015 	stw	r3,128(sp)
    31a8:	d8801f15 	stw	r2,124(sp)
    31ac:	a0bff60e 	bge	r20,r2,3188 <___svfprintf_internal_r+0x894>
    31b0:	d9801e04 	addi	r6,sp,120
    31b4:	800b883a 	mov	r5,r16
    31b8:	9809883a 	mov	r4,r19
    31bc:	000b4f00 	call	b4f0 <__ssprint_r>
    31c0:	103eb11e 	bne	r2,zero,2c88 <___svfprintf_internal_r+0x394>
    31c4:	8c7ffc04 	addi	r17,r17,-16
    31c8:	d8c02017 	ldw	r3,128(sp)
    31cc:	d8801f17 	ldw	r2,124(sp)
    31d0:	da000404 	addi	r8,sp,16
    31d4:	e47fef16 	blt	fp,r17,3194 <___svfprintf_internal_r+0x8a0>
    31d8:	9021883a 	mov	r16,r18
    31dc:	b025883a 	mov	r18,r22
    31e0:	882d883a 	mov	r22,r17
    31e4:	dc402917 	ldw	r17,164(sp)
    31e8:	d9002b17 	ldw	r4,172(sp)
    31ec:	1d87883a 	add	r3,r3,r22
    31f0:	10800044 	addi	r2,r2,1
    31f4:	41000015 	stw	r4,0(r8)
    31f8:	45800115 	stw	r22,4(r8)
    31fc:	d8c02015 	stw	r3,128(sp)
    3200:	d8801f15 	stw	r2,124(sp)
    3204:	010001c4 	movi	r4,7
    3208:	2081ec16 	blt	r4,r2,39bc <___svfprintf_internal_r+0x10c8>
    320c:	42000204 	addi	r8,r8,8
    3210:	9080400c 	andi	r2,r18,256
    3214:	1001181e 	bne	r2,zero,3678 <___svfprintf_internal_r+0xd84>
    3218:	d9402e17 	ldw	r5,184(sp)
    321c:	d8801f17 	ldw	r2,124(sp)
    3220:	44000015 	stw	r16,0(r8)
    3224:	1947883a 	add	r3,r3,r5
    3228:	10800044 	addi	r2,r2,1
    322c:	41400115 	stw	r5,4(r8)
    3230:	d8c02015 	stw	r3,128(sp)
    3234:	d8801f15 	stw	r2,124(sp)
    3238:	010001c4 	movi	r4,7
    323c:	2081d116 	blt	r4,r2,3984 <___svfprintf_internal_r+0x1090>
    3240:	42000204 	addi	r8,r8,8
    3244:	9480010c 	andi	r18,r18,4
    3248:	90003226 	beq	r18,zero,3314 <___svfprintf_internal_r+0xa20>
    324c:	d9403117 	ldw	r5,196(sp)
    3250:	d8802a17 	ldw	r2,168(sp)
    3254:	28a1c83a 	sub	r16,r5,r2
    3258:	04002e0e 	bge	zero,r16,3314 <___svfprintf_internal_r+0xa20>
    325c:	04400404 	movi	r17,16
    3260:	d8801f17 	ldw	r2,124(sp)
    3264:	8c04b90e 	bge	r17,r16,454c <___svfprintf_internal_r+0x1c58>
    3268:	014000b4 	movhi	r5,2
    326c:	297d6d84 	addi	r5,r5,-2634
    3270:	d9403515 	stw	r5,212(sp)
    3274:	048001c4 	movi	r18,7
    3278:	dd002c17 	ldw	r20,176(sp)
    327c:	00000306 	br	328c <___svfprintf_internal_r+0x998>
    3280:	843ffc04 	addi	r16,r16,-16
    3284:	42000204 	addi	r8,r8,8
    3288:	8c00130e 	bge	r17,r16,32d8 <___svfprintf_internal_r+0x9e4>
    328c:	010000b4 	movhi	r4,2
    3290:	18c00404 	addi	r3,r3,16
    3294:	10800044 	addi	r2,r2,1
    3298:	213d6d84 	addi	r4,r4,-2634
    329c:	41000015 	stw	r4,0(r8)
    32a0:	44400115 	stw	r17,4(r8)
    32a4:	d8c02015 	stw	r3,128(sp)
    32a8:	d8801f15 	stw	r2,124(sp)
    32ac:	90bff40e 	bge	r18,r2,3280 <___svfprintf_internal_r+0x98c>
    32b0:	d9801e04 	addi	r6,sp,120
    32b4:	a00b883a 	mov	r5,r20
    32b8:	9809883a 	mov	r4,r19
    32bc:	000b4f00 	call	b4f0 <__ssprint_r>
    32c0:	103e711e 	bne	r2,zero,2c88 <___svfprintf_internal_r+0x394>
    32c4:	843ffc04 	addi	r16,r16,-16
    32c8:	d8c02017 	ldw	r3,128(sp)
    32cc:	d8801f17 	ldw	r2,124(sp)
    32d0:	da000404 	addi	r8,sp,16
    32d4:	8c3fed16 	blt	r17,r16,328c <___svfprintf_internal_r+0x998>
    32d8:	d9403517 	ldw	r5,212(sp)
    32dc:	1c07883a 	add	r3,r3,r16
    32e0:	10800044 	addi	r2,r2,1
    32e4:	41400015 	stw	r5,0(r8)
    32e8:	44000115 	stw	r16,4(r8)
    32ec:	d8c02015 	stw	r3,128(sp)
    32f0:	d8801f15 	stw	r2,124(sp)
    32f4:	010001c4 	movi	r4,7
    32f8:	2080060e 	bge	r4,r2,3314 <___svfprintf_internal_r+0xa20>
    32fc:	d9402c17 	ldw	r5,176(sp)
    3300:	d9801e04 	addi	r6,sp,120
    3304:	9809883a 	mov	r4,r19
    3308:	000b4f00 	call	b4f0 <__ssprint_r>
    330c:	103e5e1e 	bne	r2,zero,2c88 <___svfprintf_internal_r+0x394>
    3310:	d8c02017 	ldw	r3,128(sp)
    3314:	d8803117 	ldw	r2,196(sp)
    3318:	d9002a17 	ldw	r4,168(sp)
    331c:	1100010e 	bge	r2,r4,3324 <___svfprintf_internal_r+0xa30>
    3320:	2005883a 	mov	r2,r4
    3324:	d9402f17 	ldw	r5,188(sp)
    3328:	288b883a 	add	r5,r5,r2
    332c:	d9402f15 	stw	r5,188(sp)
    3330:	18019c1e 	bne	r3,zero,39a4 <___svfprintf_internal_r+0x10b0>
    3334:	b8800007 	ldb	r2,0(r23)
    3338:	d8001f15 	stw	zero,124(sp)
    333c:	da000404 	addi	r8,sp,16
    3340:	103d991e 	bne	r2,zero,29a8 <___svfprintf_internal_r+0xb4>
    3344:	b821883a 	mov	r16,r23
    3348:	003daf06 	br	2a08 <___svfprintf_internal_r+0x114>
    334c:	18c03fcc 	andi	r3,r3,255
    3350:	1805c71e 	bne	r3,zero,4a70 <___svfprintf_internal_r+0x217c>
    3354:	94800414 	ori	r18,r18,16
    3358:	9080080c 	andi	r2,r18,32
    335c:	10020126 	beq	r2,zero,3b64 <___svfprintf_internal_r+0x1270>
    3360:	d8802d17 	ldw	r2,180(sp)
    3364:	d9002917 	ldw	r4,164(sp)
    3368:	d8002785 	stb	zero,158(sp)
    336c:	10c00204 	addi	r3,r2,8
    3370:	15000017 	ldw	r20,0(r2)
    3374:	15800117 	ldw	r22,4(r2)
    3378:	20038e16 	blt	r4,zero,41b4 <___svfprintf_internal_r+0x18c0>
    337c:	013fdfc4 	movi	r4,-129
    3380:	a584b03a 	or	r2,r20,r22
    3384:	d8c02d15 	stw	r3,180(sp)
    3388:	9124703a 	and	r18,r18,r4
    338c:	0039883a 	mov	fp,zero
    3390:	103eb61e 	bne	r2,zero,2e6c <___svfprintf_internal_r+0x578>
    3394:	d8802917 	ldw	r2,164(sp)
    3398:	1002c81e 	bne	r2,zero,3ebc <___svfprintf_internal_r+0x15c8>
    339c:	d8002915 	stw	zero,164(sp)
    33a0:	d8002e15 	stw	zero,184(sp)
    33a4:	dc001e04 	addi	r16,sp,120
    33a8:	003efa06 	br	2f94 <___svfprintf_internal_r+0x6a0>
    33ac:	18c03fcc 	andi	r3,r3,255
    33b0:	1805ad1e 	bne	r3,zero,4a68 <___svfprintf_internal_r+0x2174>
    33b4:	014000b4 	movhi	r5,2
    33b8:	297d5d04 	addi	r5,r5,-2700
    33bc:	d9403a15 	stw	r5,232(sp)
    33c0:	9080080c 	andi	r2,r18,32
    33c4:	10006126 	beq	r2,zero,354c <___svfprintf_internal_r+0xc58>
    33c8:	d8802d17 	ldw	r2,180(sp)
    33cc:	15000017 	ldw	r20,0(r2)
    33d0:	15800117 	ldw	r22,4(r2)
    33d4:	10800204 	addi	r2,r2,8
    33d8:	d8802d15 	stw	r2,180(sp)
    33dc:	9080004c 	andi	r2,r18,1
    33e0:	10018e26 	beq	r2,zero,3a1c <___svfprintf_internal_r+0x1128>
    33e4:	a584b03a 	or	r2,r20,r22
    33e8:	10030926 	beq	r2,zero,4010 <___svfprintf_internal_r+0x171c>
    33ec:	d8c02917 	ldw	r3,164(sp)
    33f0:	00800c04 	movi	r2,48
    33f4:	d8802705 	stb	r2,156(sp)
    33f8:	dc402745 	stb	r17,157(sp)
    33fc:	d8002785 	stb	zero,158(sp)
    3400:	90800094 	ori	r2,r18,2
    3404:	18048716 	blt	r3,zero,4624 <___svfprintf_internal_r+0x1d30>
    3408:	00bfdfc4 	movi	r2,-129
    340c:	90a4703a 	and	r18,r18,r2
    3410:	94800094 	ori	r18,r18,2
    3414:	0039883a 	mov	fp,zero
    3418:	d9003a17 	ldw	r4,232(sp)
    341c:	dc001e04 	addi	r16,sp,120
    3420:	a08003cc 	andi	r2,r20,15
    3424:	b006973a 	slli	r3,r22,28
    3428:	2085883a 	add	r2,r4,r2
    342c:	a028d13a 	srli	r20,r20,4
    3430:	10800003 	ldbu	r2,0(r2)
    3434:	b02cd13a 	srli	r22,r22,4
    3438:	843fffc4 	addi	r16,r16,-1
    343c:	1d28b03a 	or	r20,r3,r20
    3440:	80800005 	stb	r2,0(r16)
    3444:	a584b03a 	or	r2,r20,r22
    3448:	103ff51e 	bne	r2,zero,3420 <___svfprintf_internal_r+0xb2c>
    344c:	d8c02817 	ldw	r3,160(sp)
    3450:	1c07c83a 	sub	r3,r3,r16
    3454:	d8c02e15 	stw	r3,184(sp)
    3458:	003ece06 	br	2f94 <___svfprintf_internal_r+0x6a0>
    345c:	d8c02d17 	ldw	r3,180(sp)
    3460:	d9002d17 	ldw	r4,180(sp)
    3464:	d8002785 	stb	zero,158(sp)
    3468:	18800017 	ldw	r2,0(r3)
    346c:	21000104 	addi	r4,r4,4
    3470:	00c00044 	movi	r3,1
    3474:	d8c02a15 	stw	r3,168(sp)
    3478:	d8801405 	stb	r2,80(sp)
    347c:	d9002d15 	stw	r4,180(sp)
    3480:	d8c02e15 	stw	r3,184(sp)
    3484:	d8002915 	stw	zero,164(sp)
    3488:	d8003215 	stw	zero,200(sp)
    348c:	dc001404 	addi	r16,sp,80
    3490:	0039883a 	mov	fp,zero
    3494:	003ecc06 	br	2fc8 <___svfprintf_internal_r+0x6d4>
    3498:	18c03fcc 	andi	r3,r3,255
    349c:	183e9226 	beq	r3,zero,2ee8 <___svfprintf_internal_r+0x5f4>
    34a0:	d9c02785 	stb	r7,158(sp)
    34a4:	003e9006 	br	2ee8 <___svfprintf_internal_r+0x5f4>
    34a8:	00c00044 	movi	r3,1
    34ac:	01c00ac4 	movi	r7,43
    34b0:	bc400007 	ldb	r17,0(r23)
    34b4:	003d6306 	br	2a44 <___svfprintf_internal_r+0x150>
    34b8:	94800814 	ori	r18,r18,32
    34bc:	bc400007 	ldb	r17,0(r23)
    34c0:	003d6006 	br	2a44 <___svfprintf_internal_r+0x150>
    34c4:	d8c02d17 	ldw	r3,180(sp)
    34c8:	d8002785 	stb	zero,158(sp)
    34cc:	1c000017 	ldw	r16,0(r3)
    34d0:	1d000104 	addi	r20,r3,4
    34d4:	80040f26 	beq	r16,zero,4514 <___svfprintf_internal_r+0x1c20>
    34d8:	d9002917 	ldw	r4,164(sp)
    34dc:	2003dc16 	blt	r4,zero,4450 <___svfprintf_internal_r+0x1b5c>
    34e0:	200d883a 	mov	r6,r4
    34e4:	000b883a 	mov	r5,zero
    34e8:	8009883a 	mov	r4,r16
    34ec:	da003e15 	stw	r8,248(sp)
    34f0:	0009e280 	call	9e28 <memchr>
    34f4:	da003e17 	ldw	r8,248(sp)
    34f8:	10045826 	beq	r2,zero,465c <___svfprintf_internal_r+0x1d68>
    34fc:	1405c83a 	sub	r2,r2,r16
    3500:	d8802e15 	stw	r2,184(sp)
    3504:	1003d816 	blt	r2,zero,4468 <___svfprintf_internal_r+0x1b74>
    3508:	df002783 	ldbu	fp,158(sp)
    350c:	d8802a15 	stw	r2,168(sp)
    3510:	dd002d15 	stw	r20,180(sp)
    3514:	d8002915 	stw	zero,164(sp)
    3518:	d8003215 	stw	zero,200(sp)
    351c:	003ea306 	br	2fac <___svfprintf_internal_r+0x6b8>
    3520:	18c03fcc 	andi	r3,r3,255
    3524:	183f8c26 	beq	r3,zero,3358 <___svfprintf_internal_r+0xa64>
    3528:	d9c02785 	stb	r7,158(sp)
    352c:	003f8a06 	br	3358 <___svfprintf_internal_r+0xa64>
    3530:	18c03fcc 	andi	r3,r3,255
    3534:	1805631e 	bne	r3,zero,4ac4 <___svfprintf_internal_r+0x21d0>
    3538:	014000b4 	movhi	r5,2
    353c:	297d6204 	addi	r5,r5,-2680
    3540:	d9403a15 	stw	r5,232(sp)
    3544:	9080080c 	andi	r2,r18,32
    3548:	103f9f1e 	bne	r2,zero,33c8 <___svfprintf_internal_r+0xad4>
    354c:	9080040c 	andi	r2,r18,16
    3550:	10029c26 	beq	r2,zero,3fc4 <___svfprintf_internal_r+0x16d0>
    3554:	d8c02d17 	ldw	r3,180(sp)
    3558:	002d883a 	mov	r22,zero
    355c:	1d000017 	ldw	r20,0(r3)
    3560:	18c00104 	addi	r3,r3,4
    3564:	d8c02d15 	stw	r3,180(sp)
    3568:	003f9c06 	br	33dc <___svfprintf_internal_r+0xae8>
    356c:	94800054 	ori	r18,r18,1
    3570:	bc400007 	ldb	r17,0(r23)
    3574:	003d3306 	br	2a44 <___svfprintf_internal_r+0x150>
    3578:	38803fcc 	andi	r2,r7,255
    357c:	1080201c 	xori	r2,r2,128
    3580:	10bfe004 	addi	r2,r2,-128
    3584:	1002971e 	bne	r2,zero,3fe4 <___svfprintf_internal_r+0x16f0>
    3588:	00c00044 	movi	r3,1
    358c:	01c00804 	movi	r7,32
    3590:	bc400007 	ldb	r17,0(r23)
    3594:	003d2b06 	br	2a44 <___svfprintf_internal_r+0x150>
    3598:	18c03fcc 	andi	r3,r3,255
    359c:	183e2326 	beq	r3,zero,2e2c <___svfprintf_internal_r+0x538>
    35a0:	d9c02785 	stb	r7,158(sp)
    35a4:	003e2106 	br	2e2c <___svfprintf_internal_r+0x538>
    35a8:	bc400007 	ldb	r17,0(r23)
    35ac:	8a430426 	beq	r17,r9,41c0 <___svfprintf_internal_r+0x18cc>
    35b0:	94800414 	ori	r18,r18,16
    35b4:	003d2306 	br	2a44 <___svfprintf_internal_r+0x150>
    35b8:	18c03fcc 	andi	r3,r3,255
    35bc:	18053f1e 	bne	r3,zero,4abc <___svfprintf_internal_r+0x21c8>
    35c0:	9080080c 	andi	r2,r18,32
    35c4:	10028926 	beq	r2,zero,3fec <___svfprintf_internal_r+0x16f8>
    35c8:	d9402d17 	ldw	r5,180(sp)
    35cc:	d9002f17 	ldw	r4,188(sp)
    35d0:	28800017 	ldw	r2,0(r5)
    35d4:	2007d7fa 	srai	r3,r4,31
    35d8:	29400104 	addi	r5,r5,4
    35dc:	d9402d15 	stw	r5,180(sp)
    35e0:	11000015 	stw	r4,0(r2)
    35e4:	10c00115 	stw	r3,4(r2)
    35e8:	003ced06 	br	29a0 <___svfprintf_internal_r+0xac>
    35ec:	94801014 	ori	r18,r18,64
    35f0:	bc400007 	ldb	r17,0(r23)
    35f4:	003d1306 	br	2a44 <___svfprintf_internal_r+0x150>
    35f8:	010000b4 	movhi	r4,2
    35fc:	213d6204 	addi	r4,r4,-2680
    3600:	0039883a 	mov	fp,zero
    3604:	d9003a15 	stw	r4,232(sp)
    3608:	04401e04 	movi	r17,120
    360c:	003f8206 	br	3418 <___svfprintf_internal_r+0xb24>
    3610:	18c03fcc 	andi	r3,r3,255
    3614:	1805221e 	bne	r3,zero,4aa0 <___svfprintf_internal_r+0x21ac>
    3618:	883d9526 	beq	r17,zero,2c70 <___svfprintf_internal_r+0x37c>
    361c:	00c00044 	movi	r3,1
    3620:	d8c02a15 	stw	r3,168(sp)
    3624:	dc401405 	stb	r17,80(sp)
    3628:	d8002785 	stb	zero,158(sp)
    362c:	003f9406 	br	3480 <___svfprintf_internal_r+0xb8c>
    3630:	010000b4 	movhi	r4,2
    3634:	213d6204 	addi	r4,r4,-2680
    3638:	d9003a15 	stw	r4,232(sp)
    363c:	d8c02d15 	stw	r3,180(sp)
    3640:	1025883a 	mov	r18,r2
    3644:	04401e04 	movi	r17,120
    3648:	a584b03a 	or	r2,r20,r22
    364c:	1000fa1e 	bne	r2,zero,3a38 <___svfprintf_internal_r+0x1144>
    3650:	0039883a 	mov	fp,zero
    3654:	00800084 	movi	r2,2
    3658:	10803fcc 	andi	r2,r2,255
    365c:	00c00044 	movi	r3,1
    3660:	10c21626 	beq	r2,r3,3ebc <___svfprintf_internal_r+0x15c8>
    3664:	00c00084 	movi	r3,2
    3668:	10fe301e 	bne	r2,r3,2f2c <___svfprintf_internal_r+0x638>
    366c:	003d7606 	br	2c48 <___svfprintf_internal_r+0x354>
    3670:	d8c02017 	ldw	r3,128(sp)
    3674:	003e9506 	br	30cc <___svfprintf_internal_r+0x7d8>
    3678:	00801944 	movi	r2,101
    367c:	14407c0e 	bge	r2,r17,3870 <___svfprintf_internal_r+0xf7c>
    3680:	d9003617 	ldw	r4,216(sp)
    3684:	d9403717 	ldw	r5,220(sp)
    3688:	000d883a 	mov	r6,zero
    368c:	000f883a 	mov	r7,zero
    3690:	d8c03d15 	stw	r3,244(sp)
    3694:	da003e15 	stw	r8,248(sp)
    3698:	00111ec0 	call	111ec <__eqdf2>
    369c:	d8c03d17 	ldw	r3,244(sp)
    36a0:	da003e17 	ldw	r8,248(sp)
    36a4:	1000f51e 	bne	r2,zero,3a7c <___svfprintf_internal_r+0x1188>
    36a8:	d8801f17 	ldw	r2,124(sp)
    36ac:	010000b4 	movhi	r4,2
    36b0:	213d6904 	addi	r4,r4,-2652
    36b4:	18c00044 	addi	r3,r3,1
    36b8:	10800044 	addi	r2,r2,1
    36bc:	41000015 	stw	r4,0(r8)
    36c0:	01000044 	movi	r4,1
    36c4:	41000115 	stw	r4,4(r8)
    36c8:	d8c02015 	stw	r3,128(sp)
    36cc:	d8801f15 	stw	r2,124(sp)
    36d0:	010001c4 	movi	r4,7
    36d4:	20826616 	blt	r4,r2,4070 <___svfprintf_internal_r+0x177c>
    36d8:	42000204 	addi	r8,r8,8
    36dc:	d8802617 	ldw	r2,152(sp)
    36e0:	d9403317 	ldw	r5,204(sp)
    36e4:	11400216 	blt	r2,r5,36f0 <___svfprintf_internal_r+0xdfc>
    36e8:	9080004c 	andi	r2,r18,1
    36ec:	103ed526 	beq	r2,zero,3244 <___svfprintf_internal_r+0x950>
    36f0:	d8803817 	ldw	r2,224(sp)
    36f4:	d9003417 	ldw	r4,208(sp)
    36f8:	d9403817 	ldw	r5,224(sp)
    36fc:	1887883a 	add	r3,r3,r2
    3700:	d8801f17 	ldw	r2,124(sp)
    3704:	41000015 	stw	r4,0(r8)
    3708:	41400115 	stw	r5,4(r8)
    370c:	10800044 	addi	r2,r2,1
    3710:	d8c02015 	stw	r3,128(sp)
    3714:	d8801f15 	stw	r2,124(sp)
    3718:	010001c4 	movi	r4,7
    371c:	2082af16 	blt	r4,r2,41dc <___svfprintf_internal_r+0x18e8>
    3720:	42000204 	addi	r8,r8,8
    3724:	d8803317 	ldw	r2,204(sp)
    3728:	143fffc4 	addi	r16,r2,-1
    372c:	043ec50e 	bge	zero,r16,3244 <___svfprintf_internal_r+0x950>
    3730:	04400404 	movi	r17,16
    3734:	d8801f17 	ldw	r2,124(sp)
    3738:	8c00860e 	bge	r17,r16,3954 <___svfprintf_internal_r+0x1060>
    373c:	014000b4 	movhi	r5,2
    3740:	297d6984 	addi	r5,r5,-2650
    3744:	d9402b15 	stw	r5,172(sp)
    3748:	058001c4 	movi	r22,7
    374c:	dd002c17 	ldw	r20,176(sp)
    3750:	00000306 	br	3760 <___svfprintf_internal_r+0xe6c>
    3754:	42000204 	addi	r8,r8,8
    3758:	843ffc04 	addi	r16,r16,-16
    375c:	8c00800e 	bge	r17,r16,3960 <___svfprintf_internal_r+0x106c>
    3760:	18c00404 	addi	r3,r3,16
    3764:	10800044 	addi	r2,r2,1
    3768:	45400015 	stw	r21,0(r8)
    376c:	44400115 	stw	r17,4(r8)
    3770:	d8c02015 	stw	r3,128(sp)
    3774:	d8801f15 	stw	r2,124(sp)
    3778:	b0bff60e 	bge	r22,r2,3754 <___svfprintf_internal_r+0xe60>
    377c:	d9801e04 	addi	r6,sp,120
    3780:	a00b883a 	mov	r5,r20
    3784:	9809883a 	mov	r4,r19
    3788:	000b4f00 	call	b4f0 <__ssprint_r>
    378c:	103d3e1e 	bne	r2,zero,2c88 <___svfprintf_internal_r+0x394>
    3790:	d8c02017 	ldw	r3,128(sp)
    3794:	d8801f17 	ldw	r2,124(sp)
    3798:	da000404 	addi	r8,sp,16
    379c:	003fee06 	br	3758 <___svfprintf_internal_r+0xe64>
    37a0:	d9403117 	ldw	r5,196(sp)
    37a4:	d8802a17 	ldw	r2,168(sp)
    37a8:	28adc83a 	sub	r22,r5,r2
    37ac:	05be650e 	bge	zero,r22,3144 <___svfprintf_internal_r+0x850>
    37b0:	07000404 	movi	fp,16
    37b4:	d8801f17 	ldw	r2,124(sp)
    37b8:	e583a20e 	bge	fp,r22,4644 <___svfprintf_internal_r+0x1d50>
    37bc:	014000b4 	movhi	r5,2
    37c0:	297d6984 	addi	r5,r5,-2650
    37c4:	dc403015 	stw	r17,192(sp)
    37c8:	d9402b15 	stw	r5,172(sp)
    37cc:	b023883a 	mov	r17,r22
    37d0:	050001c4 	movi	r20,7
    37d4:	902d883a 	mov	r22,r18
    37d8:	8025883a 	mov	r18,r16
    37dc:	dc002c17 	ldw	r16,176(sp)
    37e0:	00000306 	br	37f0 <___svfprintf_internal_r+0xefc>
    37e4:	8c7ffc04 	addi	r17,r17,-16
    37e8:	42000204 	addi	r8,r8,8
    37ec:	e440110e 	bge	fp,r17,3834 <___svfprintf_internal_r+0xf40>
    37f0:	18c00404 	addi	r3,r3,16
    37f4:	10800044 	addi	r2,r2,1
    37f8:	45400015 	stw	r21,0(r8)
    37fc:	47000115 	stw	fp,4(r8)
    3800:	d8c02015 	stw	r3,128(sp)
    3804:	d8801f15 	stw	r2,124(sp)
    3808:	a0bff60e 	bge	r20,r2,37e4 <___svfprintf_internal_r+0xef0>
    380c:	d9801e04 	addi	r6,sp,120
    3810:	800b883a 	mov	r5,r16
    3814:	9809883a 	mov	r4,r19
    3818:	000b4f00 	call	b4f0 <__ssprint_r>
    381c:	103d1a1e 	bne	r2,zero,2c88 <___svfprintf_internal_r+0x394>
    3820:	8c7ffc04 	addi	r17,r17,-16
    3824:	d8c02017 	ldw	r3,128(sp)
    3828:	d8801f17 	ldw	r2,124(sp)
    382c:	da000404 	addi	r8,sp,16
    3830:	e47fef16 	blt	fp,r17,37f0 <___svfprintf_internal_r+0xefc>
    3834:	9021883a 	mov	r16,r18
    3838:	b025883a 	mov	r18,r22
    383c:	882d883a 	mov	r22,r17
    3840:	dc403017 	ldw	r17,192(sp)
    3844:	d9002b17 	ldw	r4,172(sp)
    3848:	1d87883a 	add	r3,r3,r22
    384c:	10800044 	addi	r2,r2,1
    3850:	41000015 	stw	r4,0(r8)
    3854:	45800115 	stw	r22,4(r8)
    3858:	d8c02015 	stw	r3,128(sp)
    385c:	d8801f15 	stw	r2,124(sp)
    3860:	010001c4 	movi	r4,7
    3864:	20819a16 	blt	r4,r2,3ed0 <___svfprintf_internal_r+0x15dc>
    3868:	42000204 	addi	r8,r8,8
    386c:	003e3506 	br	3144 <___svfprintf_internal_r+0x850>
    3870:	d9403317 	ldw	r5,204(sp)
    3874:	00800044 	movi	r2,1
    3878:	18c00044 	addi	r3,r3,1
    387c:	1141710e 	bge	r2,r5,3e44 <___svfprintf_internal_r+0x1550>
    3880:	dc401f17 	ldw	r17,124(sp)
    3884:	00800044 	movi	r2,1
    3888:	40800115 	stw	r2,4(r8)
    388c:	8c400044 	addi	r17,r17,1
    3890:	44000015 	stw	r16,0(r8)
    3894:	d8c02015 	stw	r3,128(sp)
    3898:	dc401f15 	stw	r17,124(sp)
    389c:	008001c4 	movi	r2,7
    38a0:	14417416 	blt	r2,r17,3e74 <___svfprintf_internal_r+0x1580>
    38a4:	42000204 	addi	r8,r8,8
    38a8:	d8803817 	ldw	r2,224(sp)
    38ac:	d9003417 	ldw	r4,208(sp)
    38b0:	8c400044 	addi	r17,r17,1
    38b4:	10c7883a 	add	r3,r2,r3
    38b8:	40800115 	stw	r2,4(r8)
    38bc:	41000015 	stw	r4,0(r8)
    38c0:	d8c02015 	stw	r3,128(sp)
    38c4:	dc401f15 	stw	r17,124(sp)
    38c8:	008001c4 	movi	r2,7
    38cc:	14417216 	blt	r2,r17,3e98 <___svfprintf_internal_r+0x15a4>
    38d0:	45800204 	addi	r22,r8,8
    38d4:	d9003617 	ldw	r4,216(sp)
    38d8:	d9403717 	ldw	r5,220(sp)
    38dc:	000d883a 	mov	r6,zero
    38e0:	000f883a 	mov	r7,zero
    38e4:	d8c03d15 	stw	r3,244(sp)
    38e8:	00111ec0 	call	111ec <__eqdf2>
    38ec:	d8c03d17 	ldw	r3,244(sp)
    38f0:	1000b326 	beq	r2,zero,3bc0 <___svfprintf_internal_r+0x12cc>
    38f4:	d9403317 	ldw	r5,204(sp)
    38f8:	84000044 	addi	r16,r16,1
    38fc:	8c400044 	addi	r17,r17,1
    3900:	28bfffc4 	addi	r2,r5,-1
    3904:	1887883a 	add	r3,r3,r2
    3908:	b0800115 	stw	r2,4(r22)
    390c:	b4000015 	stw	r16,0(r22)
    3910:	d8c02015 	stw	r3,128(sp)
    3914:	dc401f15 	stw	r17,124(sp)
    3918:	008001c4 	movi	r2,7
    391c:	1440d216 	blt	r2,r17,3c68 <___svfprintf_internal_r+0x1374>
    3920:	b5800204 	addi	r22,r22,8
    3924:	d9003b17 	ldw	r4,236(sp)
    3928:	df0022c4 	addi	fp,sp,139
    392c:	8c400044 	addi	r17,r17,1
    3930:	20c7883a 	add	r3,r4,r3
    3934:	b7000015 	stw	fp,0(r22)
    3938:	b1000115 	stw	r4,4(r22)
    393c:	d8c02015 	stw	r3,128(sp)
    3940:	dc401f15 	stw	r17,124(sp)
    3944:	008001c4 	movi	r2,7
    3948:	14400e16 	blt	r2,r17,3984 <___svfprintf_internal_r+0x1090>
    394c:	b2000204 	addi	r8,r22,8
    3950:	003e3c06 	br	3244 <___svfprintf_internal_r+0x950>
    3954:	010000b4 	movhi	r4,2
    3958:	213d6984 	addi	r4,r4,-2650
    395c:	d9002b15 	stw	r4,172(sp)
    3960:	d9002b17 	ldw	r4,172(sp)
    3964:	1c07883a 	add	r3,r3,r16
    3968:	44000115 	stw	r16,4(r8)
    396c:	41000015 	stw	r4,0(r8)
    3970:	10800044 	addi	r2,r2,1
    3974:	d8c02015 	stw	r3,128(sp)
    3978:	d8801f15 	stw	r2,124(sp)
    397c:	010001c4 	movi	r4,7
    3980:	20be2f0e 	bge	r4,r2,3240 <___svfprintf_internal_r+0x94c>
    3984:	d9402c17 	ldw	r5,176(sp)
    3988:	d9801e04 	addi	r6,sp,120
    398c:	9809883a 	mov	r4,r19
    3990:	000b4f00 	call	b4f0 <__ssprint_r>
    3994:	103cbc1e 	bne	r2,zero,2c88 <___svfprintf_internal_r+0x394>
    3998:	d8c02017 	ldw	r3,128(sp)
    399c:	da000404 	addi	r8,sp,16
    39a0:	003e2806 	br	3244 <___svfprintf_internal_r+0x950>
    39a4:	d9402c17 	ldw	r5,176(sp)
    39a8:	d9801e04 	addi	r6,sp,120
    39ac:	9809883a 	mov	r4,r19
    39b0:	000b4f00 	call	b4f0 <__ssprint_r>
    39b4:	103e5f26 	beq	r2,zero,3334 <___svfprintf_internal_r+0xa40>
    39b8:	003cb306 	br	2c88 <___svfprintf_internal_r+0x394>
    39bc:	d9402c17 	ldw	r5,176(sp)
    39c0:	d9801e04 	addi	r6,sp,120
    39c4:	9809883a 	mov	r4,r19
    39c8:	000b4f00 	call	b4f0 <__ssprint_r>
    39cc:	103cae1e 	bne	r2,zero,2c88 <___svfprintf_internal_r+0x394>
    39d0:	d8c02017 	ldw	r3,128(sp)
    39d4:	da000404 	addi	r8,sp,16
    39d8:	003e0d06 	br	3210 <___svfprintf_internal_r+0x91c>
    39dc:	d9402c17 	ldw	r5,176(sp)
    39e0:	d9801e04 	addi	r6,sp,120
    39e4:	9809883a 	mov	r4,r19
    39e8:	000b4f00 	call	b4f0 <__ssprint_r>
    39ec:	103ca61e 	bne	r2,zero,2c88 <___svfprintf_internal_r+0x394>
    39f0:	d8c02017 	ldw	r3,128(sp)
    39f4:	da000404 	addi	r8,sp,16
    39f8:	003dc106 	br	3100 <___svfprintf_internal_r+0x80c>
    39fc:	d9402c17 	ldw	r5,176(sp)
    3a00:	d9801e04 	addi	r6,sp,120
    3a04:	9809883a 	mov	r4,r19
    3a08:	000b4f00 	call	b4f0 <__ssprint_r>
    3a0c:	103c9e1e 	bne	r2,zero,2c88 <___svfprintf_internal_r+0x394>
    3a10:	d8c02017 	ldw	r3,128(sp)
    3a14:	da000404 	addi	r8,sp,16
    3a18:	003dc706 	br	3138 <___svfprintf_internal_r+0x844>
    3a1c:	d8802917 	ldw	r2,164(sp)
    3a20:	d8002785 	stb	zero,158(sp)
    3a24:	103f0816 	blt	r2,zero,3648 <___svfprintf_internal_r+0xd54>
    3a28:	00ffdfc4 	movi	r3,-129
    3a2c:	a584b03a 	or	r2,r20,r22
    3a30:	90e4703a 	and	r18,r18,r3
    3a34:	103c8126 	beq	r2,zero,2c3c <___svfprintf_internal_r+0x348>
    3a38:	0039883a 	mov	fp,zero
    3a3c:	003e7606 	br	3418 <___svfprintf_internal_r+0xb24>
    3a40:	9080040c 	andi	r2,r18,16
    3a44:	10013d26 	beq	r2,zero,3f3c <___svfprintf_internal_r+0x1648>
    3a48:	d9002d17 	ldw	r4,180(sp)
    3a4c:	d9402917 	ldw	r5,164(sp)
    3a50:	d8002785 	stb	zero,158(sp)
    3a54:	20800104 	addi	r2,r4,4
    3a58:	25000017 	ldw	r20,0(r4)
    3a5c:	002d883a 	mov	r22,zero
    3a60:	28013f16 	blt	r5,zero,3f60 <___svfprintf_internal_r+0x166c>
    3a64:	00ffdfc4 	movi	r3,-129
    3a68:	d8802d15 	stw	r2,180(sp)
    3a6c:	90e4703a 	and	r18,r18,r3
    3a70:	a03d2b26 	beq	r20,zero,2f20 <___svfprintf_internal_r+0x62c>
    3a74:	0039883a 	mov	fp,zero
    3a78:	003d2e06 	br	2f34 <___svfprintf_internal_r+0x640>
    3a7c:	dc402617 	ldw	r17,152(sp)
    3a80:	0441830e 	bge	zero,r17,4090 <___svfprintf_internal_r+0x179c>
    3a84:	dc403217 	ldw	r17,200(sp)
    3a88:	d8803317 	ldw	r2,204(sp)
    3a8c:	1440010e 	bge	r2,r17,3a94 <___svfprintf_internal_r+0x11a0>
    3a90:	1023883a 	mov	r17,r2
    3a94:	04400a0e 	bge	zero,r17,3ac0 <___svfprintf_internal_r+0x11cc>
    3a98:	d8801f17 	ldw	r2,124(sp)
    3a9c:	1c47883a 	add	r3,r3,r17
    3aa0:	44000015 	stw	r16,0(r8)
    3aa4:	10800044 	addi	r2,r2,1
    3aa8:	44400115 	stw	r17,4(r8)
    3aac:	d8c02015 	stw	r3,128(sp)
    3ab0:	d8801f15 	stw	r2,124(sp)
    3ab4:	010001c4 	movi	r4,7
    3ab8:	20827516 	blt	r4,r2,4490 <___svfprintf_internal_r+0x1b9c>
    3abc:	42000204 	addi	r8,r8,8
    3ac0:	88027b16 	blt	r17,zero,44b0 <___svfprintf_internal_r+0x1bbc>
    3ac4:	d9003217 	ldw	r4,200(sp)
    3ac8:	2463c83a 	sub	r17,r4,r17
    3acc:	0440990e 	bge	zero,r17,3d34 <___svfprintf_internal_r+0x1440>
    3ad0:	05800404 	movi	r22,16
    3ad4:	d8801f17 	ldw	r2,124(sp)
    3ad8:	b441530e 	bge	r22,r17,4028 <___svfprintf_internal_r+0x1734>
    3adc:	010000b4 	movhi	r4,2
    3ae0:	213d6984 	addi	r4,r4,-2650
    3ae4:	d9002b15 	stw	r4,172(sp)
    3ae8:	070001c4 	movi	fp,7
    3aec:	dd002c17 	ldw	r20,176(sp)
    3af0:	00000306 	br	3b00 <___svfprintf_internal_r+0x120c>
    3af4:	42000204 	addi	r8,r8,8
    3af8:	8c7ffc04 	addi	r17,r17,-16
    3afc:	b4414d0e 	bge	r22,r17,4034 <___svfprintf_internal_r+0x1740>
    3b00:	18c00404 	addi	r3,r3,16
    3b04:	10800044 	addi	r2,r2,1
    3b08:	45400015 	stw	r21,0(r8)
    3b0c:	45800115 	stw	r22,4(r8)
    3b10:	d8c02015 	stw	r3,128(sp)
    3b14:	d8801f15 	stw	r2,124(sp)
    3b18:	e0bff60e 	bge	fp,r2,3af4 <___svfprintf_internal_r+0x1200>
    3b1c:	d9801e04 	addi	r6,sp,120
    3b20:	a00b883a 	mov	r5,r20
    3b24:	9809883a 	mov	r4,r19
    3b28:	000b4f00 	call	b4f0 <__ssprint_r>
    3b2c:	103c561e 	bne	r2,zero,2c88 <___svfprintf_internal_r+0x394>
    3b30:	d8c02017 	ldw	r3,128(sp)
    3b34:	d8801f17 	ldw	r2,124(sp)
    3b38:	da000404 	addi	r8,sp,16
    3b3c:	003fee06 	br	3af8 <___svfprintf_internal_r+0x1204>
    3b40:	d9402c17 	ldw	r5,176(sp)
    3b44:	d9801e04 	addi	r6,sp,120
    3b48:	9809883a 	mov	r4,r19
    3b4c:	000b4f00 	call	b4f0 <__ssprint_r>
    3b50:	103c4d1e 	bne	r2,zero,2c88 <___svfprintf_internal_r+0x394>
    3b54:	d8c02017 	ldw	r3,128(sp)
    3b58:	df002787 	ldb	fp,158(sp)
    3b5c:	da000404 	addi	r8,sp,16
    3b60:	003d5a06 	br	30cc <___svfprintf_internal_r+0x7d8>
    3b64:	9080040c 	andi	r2,r18,16
    3b68:	10005c26 	beq	r2,zero,3cdc <___svfprintf_internal_r+0x13e8>
    3b6c:	d9402d17 	ldw	r5,180(sp)
    3b70:	d8c02917 	ldw	r3,164(sp)
    3b74:	d8002785 	stb	zero,158(sp)
    3b78:	28800104 	addi	r2,r5,4
    3b7c:	2d000017 	ldw	r20,0(r5)
    3b80:	002d883a 	mov	r22,zero
    3b84:	18005e16 	blt	r3,zero,3d00 <___svfprintf_internal_r+0x140c>
    3b88:	00ffdfc4 	movi	r3,-129
    3b8c:	d8802d15 	stw	r2,180(sp)
    3b90:	90e4703a 	and	r18,r18,r3
    3b94:	0039883a 	mov	fp,zero
    3b98:	a03dfe26 	beq	r20,zero,3394 <___svfprintf_internal_r+0xaa0>
    3b9c:	00800244 	movi	r2,9
    3ba0:	153cb336 	bltu	r2,r20,2e70 <___svfprintf_internal_r+0x57c>
    3ba4:	a5000c04 	addi	r20,r20,48
    3ba8:	dc001dc4 	addi	r16,sp,119
    3bac:	dd001dc5 	stb	r20,119(sp)
    3bb0:	d8c02817 	ldw	r3,160(sp)
    3bb4:	1c07c83a 	sub	r3,r3,r16
    3bb8:	d8c02e15 	stw	r3,184(sp)
    3bbc:	003cf506 	br	2f94 <___svfprintf_internal_r+0x6a0>
    3bc0:	d8803317 	ldw	r2,204(sp)
    3bc4:	143fffc4 	addi	r16,r2,-1
    3bc8:	043f560e 	bge	zero,r16,3924 <___svfprintf_internal_r+0x1030>
    3bcc:	07000404 	movi	fp,16
    3bd0:	e403530e 	bge	fp,r16,4920 <___svfprintf_internal_r+0x202c>
    3bd4:	014000b4 	movhi	r5,2
    3bd8:	297d6984 	addi	r5,r5,-2650
    3bdc:	d9402b15 	stw	r5,172(sp)
    3be0:	01c001c4 	movi	r7,7
    3be4:	dd002c17 	ldw	r20,176(sp)
    3be8:	00000306 	br	3bf8 <___svfprintf_internal_r+0x1304>
    3bec:	843ffc04 	addi	r16,r16,-16
    3bf0:	b5800204 	addi	r22,r22,8
    3bf4:	e400130e 	bge	fp,r16,3c44 <___svfprintf_internal_r+0x1350>
    3bf8:	18c00404 	addi	r3,r3,16
    3bfc:	8c400044 	addi	r17,r17,1
    3c00:	b5400015 	stw	r21,0(r22)
    3c04:	b7000115 	stw	fp,4(r22)
    3c08:	d8c02015 	stw	r3,128(sp)
    3c0c:	dc401f15 	stw	r17,124(sp)
    3c10:	3c7ff60e 	bge	r7,r17,3bec <___svfprintf_internal_r+0x12f8>
    3c14:	d9801e04 	addi	r6,sp,120
    3c18:	a00b883a 	mov	r5,r20
    3c1c:	9809883a 	mov	r4,r19
    3c20:	d9c03d15 	stw	r7,244(sp)
    3c24:	000b4f00 	call	b4f0 <__ssprint_r>
    3c28:	d9c03d17 	ldw	r7,244(sp)
    3c2c:	103c161e 	bne	r2,zero,2c88 <___svfprintf_internal_r+0x394>
    3c30:	843ffc04 	addi	r16,r16,-16
    3c34:	d8c02017 	ldw	r3,128(sp)
    3c38:	dc401f17 	ldw	r17,124(sp)
    3c3c:	dd800404 	addi	r22,sp,16
    3c40:	e43fed16 	blt	fp,r16,3bf8 <___svfprintf_internal_r+0x1304>
    3c44:	d8802b17 	ldw	r2,172(sp)
    3c48:	1c07883a 	add	r3,r3,r16
    3c4c:	8c400044 	addi	r17,r17,1
    3c50:	b0800015 	stw	r2,0(r22)
    3c54:	b4000115 	stw	r16,4(r22)
    3c58:	d8c02015 	stw	r3,128(sp)
    3c5c:	dc401f15 	stw	r17,124(sp)
    3c60:	008001c4 	movi	r2,7
    3c64:	147f2e0e 	bge	r2,r17,3920 <___svfprintf_internal_r+0x102c>
    3c68:	d9402c17 	ldw	r5,176(sp)
    3c6c:	d9801e04 	addi	r6,sp,120
    3c70:	9809883a 	mov	r4,r19
    3c74:	000b4f00 	call	b4f0 <__ssprint_r>
    3c78:	103c031e 	bne	r2,zero,2c88 <___svfprintf_internal_r+0x394>
    3c7c:	d8c02017 	ldw	r3,128(sp)
    3c80:	dc401f17 	ldw	r17,124(sp)
    3c84:	dd800404 	addi	r22,sp,16
    3c88:	003f2606 	br	3924 <___svfprintf_internal_r+0x1030>
    3c8c:	9080040c 	andi	r2,r18,16
    3c90:	1000c326 	beq	r2,zero,3fa0 <___svfprintf_internal_r+0x16ac>
    3c94:	d8802d17 	ldw	r2,180(sp)
    3c98:	15000017 	ldw	r20,0(r2)
    3c9c:	10800104 	addi	r2,r2,4
    3ca0:	d8802d15 	stw	r2,180(sp)
    3ca4:	a02dd7fa 	srai	r22,r20,31
    3ca8:	b005883a 	mov	r2,r22
    3cac:	103c680e 	bge	r2,zero,2e50 <___svfprintf_internal_r+0x55c>
    3cb0:	0529c83a 	sub	r20,zero,r20
    3cb4:	a004c03a 	cmpne	r2,r20,zero
    3cb8:	05adc83a 	sub	r22,zero,r22
    3cbc:	b0adc83a 	sub	r22,r22,r2
    3cc0:	d8802917 	ldw	r2,164(sp)
    3cc4:	07000b44 	movi	fp,45
    3cc8:	df002785 	stb	fp,158(sp)
    3ccc:	10022e16 	blt	r2,zero,4588 <___svfprintf_internal_r+0x1c94>
    3cd0:	00bfdfc4 	movi	r2,-129
    3cd4:	90a4703a 	and	r18,r18,r2
    3cd8:	003c6406 	br	2e6c <___svfprintf_internal_r+0x578>
    3cdc:	9080100c 	andi	r2,r18,64
    3ce0:	d8002785 	stb	zero,158(sp)
    3ce4:	10012526 	beq	r2,zero,417c <___svfprintf_internal_r+0x1888>
    3ce8:	d9002d17 	ldw	r4,180(sp)
    3cec:	d9402917 	ldw	r5,164(sp)
    3cf0:	002d883a 	mov	r22,zero
    3cf4:	20800104 	addi	r2,r4,4
    3cf8:	2500000b 	ldhu	r20,0(r4)
    3cfc:	283fa20e 	bge	r5,zero,3b88 <___svfprintf_internal_r+0x1294>
    3d00:	d8802d15 	stw	r2,180(sp)
    3d04:	0039883a 	mov	fp,zero
    3d08:	a584b03a 	or	r2,r20,r22
    3d0c:	103c571e 	bne	r2,zero,2e6c <___svfprintf_internal_r+0x578>
    3d10:	00800044 	movi	r2,1
    3d14:	003e5006 	br	3658 <___svfprintf_internal_r+0xd64>
    3d18:	d9402c17 	ldw	r5,176(sp)
    3d1c:	d9801e04 	addi	r6,sp,120
    3d20:	9809883a 	mov	r4,r19
    3d24:	000b4f00 	call	b4f0 <__ssprint_r>
    3d28:	103bd71e 	bne	r2,zero,2c88 <___svfprintf_internal_r+0x394>
    3d2c:	d8c02017 	ldw	r3,128(sp)
    3d30:	da000404 	addi	r8,sp,16
    3d34:	d9003217 	ldw	r4,200(sp)
    3d38:	d8802617 	ldw	r2,152(sp)
    3d3c:	d9403317 	ldw	r5,204(sp)
    3d40:	8123883a 	add	r17,r16,r4
    3d44:	11400216 	blt	r2,r5,3d50 <___svfprintf_internal_r+0x145c>
    3d48:	9100004c 	andi	r4,r18,1
    3d4c:	20000d26 	beq	r4,zero,3d84 <___svfprintf_internal_r+0x1490>
    3d50:	d9003817 	ldw	r4,224(sp)
    3d54:	d9403417 	ldw	r5,208(sp)
    3d58:	1907883a 	add	r3,r3,r4
    3d5c:	d9001f17 	ldw	r4,124(sp)
    3d60:	41400015 	stw	r5,0(r8)
    3d64:	d9403817 	ldw	r5,224(sp)
    3d68:	21000044 	addi	r4,r4,1
    3d6c:	d8c02015 	stw	r3,128(sp)
    3d70:	41400115 	stw	r5,4(r8)
    3d74:	d9001f15 	stw	r4,124(sp)
    3d78:	014001c4 	movi	r5,7
    3d7c:	2901dc16 	blt	r5,r4,44f0 <___svfprintf_internal_r+0x1bfc>
    3d80:	42000204 	addi	r8,r8,8
    3d84:	d9003317 	ldw	r4,204(sp)
    3d88:	8121883a 	add	r16,r16,r4
    3d8c:	2085c83a 	sub	r2,r4,r2
    3d90:	8461c83a 	sub	r16,r16,r17
    3d94:	1400010e 	bge	r2,r16,3d9c <___svfprintf_internal_r+0x14a8>
    3d98:	1021883a 	mov	r16,r2
    3d9c:	04000a0e 	bge	zero,r16,3dc8 <___svfprintf_internal_r+0x14d4>
    3da0:	d9001f17 	ldw	r4,124(sp)
    3da4:	1c07883a 	add	r3,r3,r16
    3da8:	44400015 	stw	r17,0(r8)
    3dac:	21000044 	addi	r4,r4,1
    3db0:	44000115 	stw	r16,4(r8)
    3db4:	d8c02015 	stw	r3,128(sp)
    3db8:	d9001f15 	stw	r4,124(sp)
    3dbc:	014001c4 	movi	r5,7
    3dc0:	2901e616 	blt	r5,r4,455c <___svfprintf_internal_r+0x1c68>
    3dc4:	42000204 	addi	r8,r8,8
    3dc8:	8001f616 	blt	r16,zero,45a4 <___svfprintf_internal_r+0x1cb0>
    3dcc:	1421c83a 	sub	r16,r2,r16
    3dd0:	043d1c0e 	bge	zero,r16,3244 <___svfprintf_internal_r+0x950>
    3dd4:	04400404 	movi	r17,16
    3dd8:	d8801f17 	ldw	r2,124(sp)
    3ddc:	8c3edd0e 	bge	r17,r16,3954 <___svfprintf_internal_r+0x1060>
    3de0:	014000b4 	movhi	r5,2
    3de4:	297d6984 	addi	r5,r5,-2650
    3de8:	d9402b15 	stw	r5,172(sp)
    3dec:	058001c4 	movi	r22,7
    3df0:	dd002c17 	ldw	r20,176(sp)
    3df4:	00000306 	br	3e04 <___svfprintf_internal_r+0x1510>
    3df8:	42000204 	addi	r8,r8,8
    3dfc:	843ffc04 	addi	r16,r16,-16
    3e00:	8c3ed70e 	bge	r17,r16,3960 <___svfprintf_internal_r+0x106c>
    3e04:	18c00404 	addi	r3,r3,16
    3e08:	10800044 	addi	r2,r2,1
    3e0c:	45400015 	stw	r21,0(r8)
    3e10:	44400115 	stw	r17,4(r8)
    3e14:	d8c02015 	stw	r3,128(sp)
    3e18:	d8801f15 	stw	r2,124(sp)
    3e1c:	b0bff60e 	bge	r22,r2,3df8 <___svfprintf_internal_r+0x1504>
    3e20:	d9801e04 	addi	r6,sp,120
    3e24:	a00b883a 	mov	r5,r20
    3e28:	9809883a 	mov	r4,r19
    3e2c:	000b4f00 	call	b4f0 <__ssprint_r>
    3e30:	103b951e 	bne	r2,zero,2c88 <___svfprintf_internal_r+0x394>
    3e34:	d8c02017 	ldw	r3,128(sp)
    3e38:	d8801f17 	ldw	r2,124(sp)
    3e3c:	da000404 	addi	r8,sp,16
    3e40:	003fee06 	br	3dfc <___svfprintf_internal_r+0x1508>
    3e44:	9088703a 	and	r4,r18,r2
    3e48:	203e8d1e 	bne	r4,zero,3880 <___svfprintf_internal_r+0xf8c>
    3e4c:	dc401f17 	ldw	r17,124(sp)
    3e50:	40800115 	stw	r2,4(r8)
    3e54:	44000015 	stw	r16,0(r8)
    3e58:	8c400044 	addi	r17,r17,1
    3e5c:	d8c02015 	stw	r3,128(sp)
    3e60:	dc401f15 	stw	r17,124(sp)
    3e64:	008001c4 	movi	r2,7
    3e68:	147f7f16 	blt	r2,r17,3c68 <___svfprintf_internal_r+0x1374>
    3e6c:	45800204 	addi	r22,r8,8
    3e70:	003eac06 	br	3924 <___svfprintf_internal_r+0x1030>
    3e74:	d9402c17 	ldw	r5,176(sp)
    3e78:	d9801e04 	addi	r6,sp,120
    3e7c:	9809883a 	mov	r4,r19
    3e80:	000b4f00 	call	b4f0 <__ssprint_r>
    3e84:	103b801e 	bne	r2,zero,2c88 <___svfprintf_internal_r+0x394>
    3e88:	d8c02017 	ldw	r3,128(sp)
    3e8c:	dc401f17 	ldw	r17,124(sp)
    3e90:	da000404 	addi	r8,sp,16
    3e94:	003e8406 	br	38a8 <___svfprintf_internal_r+0xfb4>
    3e98:	d9402c17 	ldw	r5,176(sp)
    3e9c:	d9801e04 	addi	r6,sp,120
    3ea0:	9809883a 	mov	r4,r19
    3ea4:	000b4f00 	call	b4f0 <__ssprint_r>
    3ea8:	103b771e 	bne	r2,zero,2c88 <___svfprintf_internal_r+0x394>
    3eac:	d8c02017 	ldw	r3,128(sp)
    3eb0:	dc401f17 	ldw	r17,124(sp)
    3eb4:	dd800404 	addi	r22,sp,16
    3eb8:	003e8606 	br	38d4 <___svfprintf_internal_r+0xfe0>
    3ebc:	0029883a 	mov	r20,zero
    3ec0:	a5000c04 	addi	r20,r20,48
    3ec4:	dc001dc4 	addi	r16,sp,119
    3ec8:	dd001dc5 	stb	r20,119(sp)
    3ecc:	003f3806 	br	3bb0 <___svfprintf_internal_r+0x12bc>
    3ed0:	d9402c17 	ldw	r5,176(sp)
    3ed4:	d9801e04 	addi	r6,sp,120
    3ed8:	9809883a 	mov	r4,r19
    3edc:	000b4f00 	call	b4f0 <__ssprint_r>
    3ee0:	103b691e 	bne	r2,zero,2c88 <___svfprintf_internal_r+0x394>
    3ee4:	d8c02017 	ldw	r3,128(sp)
    3ee8:	da000404 	addi	r8,sp,16
    3eec:	003c9506 	br	3144 <___svfprintf_internal_r+0x850>
    3ef0:	d9003617 	ldw	r4,216(sp)
    3ef4:	d9403717 	ldw	r5,220(sp)
    3ef8:	da003e15 	stw	r8,248(sp)
    3efc:	000b1780 	call	b178 <__fpclassifyd>
    3f00:	da003e17 	ldw	r8,248(sp)
    3f04:	1000bd1e 	bne	r2,zero,41fc <___svfprintf_internal_r+0x1908>
    3f08:	008011c4 	movi	r2,71
    3f0c:	14411e0e 	bge	r2,r17,4388 <___svfprintf_internal_r+0x1a94>
    3f10:	040000b4 	movhi	r16,2
    3f14:	843d5c04 	addi	r16,r16,-2704
    3f18:	00c000c4 	movi	r3,3
    3f1c:	00bfdfc4 	movi	r2,-129
    3f20:	d8c02a15 	stw	r3,168(sp)
    3f24:	90a4703a 	and	r18,r18,r2
    3f28:	df002783 	ldbu	fp,158(sp)
    3f2c:	d8c02e15 	stw	r3,184(sp)
    3f30:	d8002915 	stw	zero,164(sp)
    3f34:	d8003215 	stw	zero,200(sp)
    3f38:	003c1c06 	br	2fac <___svfprintf_internal_r+0x6b8>
    3f3c:	9080100c 	andi	r2,r18,64
    3f40:	d8002785 	stb	zero,158(sp)
    3f44:	10009426 	beq	r2,zero,4198 <___svfprintf_internal_r+0x18a4>
    3f48:	d8c02d17 	ldw	r3,180(sp)
    3f4c:	d9002917 	ldw	r4,164(sp)
    3f50:	002d883a 	mov	r22,zero
    3f54:	18800104 	addi	r2,r3,4
    3f58:	1d00000b 	ldhu	r20,0(r3)
    3f5c:	203ec10e 	bge	r4,zero,3a64 <___svfprintf_internal_r+0x1170>
    3f60:	a586b03a 	or	r3,r20,r22
    3f64:	d8802d15 	stw	r2,180(sp)
    3f68:	183ec21e 	bne	r3,zero,3a74 <___svfprintf_internal_r+0x1180>
    3f6c:	0039883a 	mov	fp,zero
    3f70:	0005883a 	mov	r2,zero
    3f74:	003db806 	br	3658 <___svfprintf_internal_r+0xd64>
    3f78:	d8802d17 	ldw	r2,180(sp)
    3f7c:	d8c02d17 	ldw	r3,180(sp)
    3f80:	d9002d17 	ldw	r4,180(sp)
    3f84:	10800017 	ldw	r2,0(r2)
    3f88:	18c00117 	ldw	r3,4(r3)
    3f8c:	21000204 	addi	r4,r4,8
    3f90:	d8803615 	stw	r2,216(sp)
    3f94:	d8c03715 	stw	r3,220(sp)
    3f98:	d9002d15 	stw	r4,180(sp)
    3f9c:	003b8206 	br	2da8 <___svfprintf_internal_r+0x4b4>
    3fa0:	9080100c 	andi	r2,r18,64
    3fa4:	10010726 	beq	r2,zero,43c4 <___svfprintf_internal_r+0x1ad0>
    3fa8:	d8c02d17 	ldw	r3,180(sp)
    3fac:	1d00000f 	ldh	r20,0(r3)
    3fb0:	18c00104 	addi	r3,r3,4
    3fb4:	d8c02d15 	stw	r3,180(sp)
    3fb8:	a02dd7fa 	srai	r22,r20,31
    3fbc:	b005883a 	mov	r2,r22
    3fc0:	003ba206 	br	2e4c <___svfprintf_internal_r+0x558>
    3fc4:	9080100c 	andi	r2,r18,64
    3fc8:	10010526 	beq	r2,zero,43e0 <___svfprintf_internal_r+0x1aec>
    3fcc:	d9002d17 	ldw	r4,180(sp)
    3fd0:	002d883a 	mov	r22,zero
    3fd4:	2500000b 	ldhu	r20,0(r4)
    3fd8:	21000104 	addi	r4,r4,4
    3fdc:	d9002d15 	stw	r4,180(sp)
    3fe0:	003cfe06 	br	33dc <___svfprintf_internal_r+0xae8>
    3fe4:	bc400007 	ldb	r17,0(r23)
    3fe8:	003a9606 	br	2a44 <___svfprintf_internal_r+0x150>
    3fec:	9080040c 	andi	r2,r18,16
    3ff0:	10010126 	beq	r2,zero,43f8 <___svfprintf_internal_r+0x1b04>
    3ff4:	d9402d17 	ldw	r5,180(sp)
    3ff8:	d8c02f17 	ldw	r3,188(sp)
    3ffc:	28800017 	ldw	r2,0(r5)
    4000:	29400104 	addi	r5,r5,4
    4004:	d9402d15 	stw	r5,180(sp)
    4008:	10c00015 	stw	r3,0(r2)
    400c:	003a6406 	br	29a0 <___svfprintf_internal_r+0xac>
    4010:	d9002917 	ldw	r4,164(sp)
    4014:	d8002785 	stb	zero,158(sp)
    4018:	203d8d16 	blt	r4,zero,3650 <___svfprintf_internal_r+0xd5c>
    401c:	00bfdfc4 	movi	r2,-129
    4020:	90a4703a 	and	r18,r18,r2
    4024:	003b0506 	br	2c3c <___svfprintf_internal_r+0x348>
    4028:	014000b4 	movhi	r5,2
    402c:	297d6984 	addi	r5,r5,-2650
    4030:	d9402b15 	stw	r5,172(sp)
    4034:	d9402b17 	ldw	r5,172(sp)
    4038:	1c47883a 	add	r3,r3,r17
    403c:	10800044 	addi	r2,r2,1
    4040:	41400015 	stw	r5,0(r8)
    4044:	44400115 	stw	r17,4(r8)
    4048:	d8c02015 	stw	r3,128(sp)
    404c:	d8801f15 	stw	r2,124(sp)
    4050:	010001c4 	movi	r4,7
    4054:	20bf3016 	blt	r4,r2,3d18 <___svfprintf_internal_r+0x1424>
    4058:	42000204 	addi	r8,r8,8
    405c:	003f3506 	br	3d34 <___svfprintf_internal_r+0x1440>
    4060:	010000b4 	movhi	r4,2
    4064:	213d6984 	addi	r4,r4,-2650
    4068:	d9002b15 	stw	r4,172(sp)
    406c:	003c5e06 	br	31e8 <___svfprintf_internal_r+0x8f4>
    4070:	d9402c17 	ldw	r5,176(sp)
    4074:	d9801e04 	addi	r6,sp,120
    4078:	9809883a 	mov	r4,r19
    407c:	000b4f00 	call	b4f0 <__ssprint_r>
    4080:	103b011e 	bne	r2,zero,2c88 <___svfprintf_internal_r+0x394>
    4084:	d8c02017 	ldw	r3,128(sp)
    4088:	da000404 	addi	r8,sp,16
    408c:	003d9306 	br	36dc <___svfprintf_internal_r+0xde8>
    4090:	d8801f17 	ldw	r2,124(sp)
    4094:	014000b4 	movhi	r5,2
    4098:	01000044 	movi	r4,1
    409c:	18c00044 	addi	r3,r3,1
    40a0:	10800044 	addi	r2,r2,1
    40a4:	297d6904 	addi	r5,r5,-2652
    40a8:	41000115 	stw	r4,4(r8)
    40ac:	41400015 	stw	r5,0(r8)
    40b0:	d8c02015 	stw	r3,128(sp)
    40b4:	d8801f15 	stw	r2,124(sp)
    40b8:	010001c4 	movi	r4,7
    40bc:	2080b516 	blt	r4,r2,4394 <___svfprintf_internal_r+0x1aa0>
    40c0:	42000204 	addi	r8,r8,8
    40c4:	8800041e 	bne	r17,zero,40d8 <___svfprintf_internal_r+0x17e4>
    40c8:	d8803317 	ldw	r2,204(sp)
    40cc:	1000021e 	bne	r2,zero,40d8 <___svfprintf_internal_r+0x17e4>
    40d0:	9080004c 	andi	r2,r18,1
    40d4:	103c5b26 	beq	r2,zero,3244 <___svfprintf_internal_r+0x950>
    40d8:	d9003817 	ldw	r4,224(sp)
    40dc:	d8801f17 	ldw	r2,124(sp)
    40e0:	d9403417 	ldw	r5,208(sp)
    40e4:	20c7883a 	add	r3,r4,r3
    40e8:	10800044 	addi	r2,r2,1
    40ec:	41000115 	stw	r4,4(r8)
    40f0:	41400015 	stw	r5,0(r8)
    40f4:	d8c02015 	stw	r3,128(sp)
    40f8:	d8801f15 	stw	r2,124(sp)
    40fc:	010001c4 	movi	r4,7
    4100:	20818016 	blt	r4,r2,4704 <___svfprintf_internal_r+0x1e10>
    4104:	42000204 	addi	r8,r8,8
    4108:	0463c83a 	sub	r17,zero,r17
    410c:	0440cb0e 	bge	zero,r17,443c <___svfprintf_internal_r+0x1b48>
    4110:	05800404 	movi	r22,16
    4114:	b440e80e 	bge	r22,r17,44b8 <___svfprintf_internal_r+0x1bc4>
    4118:	014000b4 	movhi	r5,2
    411c:	297d6984 	addi	r5,r5,-2650
    4120:	d9402b15 	stw	r5,172(sp)
    4124:	070001c4 	movi	fp,7
    4128:	dd002c17 	ldw	r20,176(sp)
    412c:	00000306 	br	413c <___svfprintf_internal_r+0x1848>
    4130:	42000204 	addi	r8,r8,8
    4134:	8c7ffc04 	addi	r17,r17,-16
    4138:	b440e20e 	bge	r22,r17,44c4 <___svfprintf_internal_r+0x1bd0>
    413c:	18c00404 	addi	r3,r3,16
    4140:	10800044 	addi	r2,r2,1
    4144:	45400015 	stw	r21,0(r8)
    4148:	45800115 	stw	r22,4(r8)
    414c:	d8c02015 	stw	r3,128(sp)
    4150:	d8801f15 	stw	r2,124(sp)
    4154:	e0bff60e 	bge	fp,r2,4130 <___svfprintf_internal_r+0x183c>
    4158:	d9801e04 	addi	r6,sp,120
    415c:	a00b883a 	mov	r5,r20
    4160:	9809883a 	mov	r4,r19
    4164:	000b4f00 	call	b4f0 <__ssprint_r>
    4168:	103ac71e 	bne	r2,zero,2c88 <___svfprintf_internal_r+0x394>
    416c:	d8c02017 	ldw	r3,128(sp)
    4170:	d8801f17 	ldw	r2,124(sp)
    4174:	da000404 	addi	r8,sp,16
    4178:	003fee06 	br	4134 <___svfprintf_internal_r+0x1840>
    417c:	d8c02d17 	ldw	r3,180(sp)
    4180:	d9002917 	ldw	r4,164(sp)
    4184:	002d883a 	mov	r22,zero
    4188:	18800104 	addi	r2,r3,4
    418c:	1d000017 	ldw	r20,0(r3)
    4190:	203e7d0e 	bge	r4,zero,3b88 <___svfprintf_internal_r+0x1294>
    4194:	003eda06 	br	3d00 <___svfprintf_internal_r+0x140c>
    4198:	d9402d17 	ldw	r5,180(sp)
    419c:	d8c02917 	ldw	r3,164(sp)
    41a0:	002d883a 	mov	r22,zero
    41a4:	28800104 	addi	r2,r5,4
    41a8:	2d000017 	ldw	r20,0(r5)
    41ac:	183e2d0e 	bge	r3,zero,3a64 <___svfprintf_internal_r+0x1170>
    41b0:	003f6b06 	br	3f60 <___svfprintf_internal_r+0x166c>
    41b4:	d8c02d15 	stw	r3,180(sp)
    41b8:	0039883a 	mov	fp,zero
    41bc:	003ed206 	br	3d08 <___svfprintf_internal_r+0x1414>
    41c0:	bc400043 	ldbu	r17,1(r23)
    41c4:	94800814 	ori	r18,r18,32
    41c8:	bdc00044 	addi	r23,r23,1
    41cc:	8c403fcc 	andi	r17,r17,255
    41d0:	8c40201c 	xori	r17,r17,128
    41d4:	8c7fe004 	addi	r17,r17,-128
    41d8:	003a1a06 	br	2a44 <___svfprintf_internal_r+0x150>
    41dc:	d9402c17 	ldw	r5,176(sp)
    41e0:	d9801e04 	addi	r6,sp,120
    41e4:	9809883a 	mov	r4,r19
    41e8:	000b4f00 	call	b4f0 <__ssprint_r>
    41ec:	103aa61e 	bne	r2,zero,2c88 <___svfprintf_internal_r+0x394>
    41f0:	d8c02017 	ldw	r3,128(sp)
    41f4:	da000404 	addi	r8,sp,16
    41f8:	003d4a06 	br	3724 <___svfprintf_internal_r+0xe30>
    41fc:	d9002917 	ldw	r4,164(sp)
    4200:	05bff7c4 	movi	r22,-33
    4204:	00bfffc4 	movi	r2,-1
    4208:	8dac703a 	and	r22,r17,r22
    420c:	20806a26 	beq	r4,r2,43b8 <___svfprintf_internal_r+0x1ac4>
    4210:	008011c4 	movi	r2,71
    4214:	b0813726 	beq	r22,r2,46f4 <___svfprintf_internal_r+0x1e00>
    4218:	d9003717 	ldw	r4,220(sp)
    421c:	90c04014 	ori	r3,r18,256
    4220:	d8c02b15 	stw	r3,172(sp)
    4224:	20015d16 	blt	r4,zero,479c <___svfprintf_internal_r+0x1ea8>
    4228:	dd003717 	ldw	r20,220(sp)
    422c:	d8002a05 	stb	zero,168(sp)
    4230:	00801984 	movi	r2,102
    4234:	88814026 	beq	r17,r2,4738 <___svfprintf_internal_r+0x1e44>
    4238:	00801184 	movi	r2,70
    423c:	88817126 	beq	r17,r2,4804 <___svfprintf_internal_r+0x1f10>
    4240:	00801144 	movi	r2,69
    4244:	b0816226 	beq	r22,r2,47d0 <___svfprintf_internal_r+0x1edc>
    4248:	d8c02917 	ldw	r3,164(sp)
    424c:	d8802104 	addi	r2,sp,132
    4250:	d8800315 	stw	r2,12(sp)
    4254:	d9403617 	ldw	r5,216(sp)
    4258:	d8802504 	addi	r2,sp,148
    425c:	d8800215 	stw	r2,8(sp)
    4260:	d8802604 	addi	r2,sp,152
    4264:	d8c00015 	stw	r3,0(sp)
    4268:	d8800115 	stw	r2,4(sp)
    426c:	01c00084 	movi	r7,2
    4270:	a00d883a 	mov	r6,r20
    4274:	9809883a 	mov	r4,r19
    4278:	d8c03d15 	stw	r3,244(sp)
    427c:	da003e15 	stw	r8,248(sp)
    4280:	00070f80 	call	70f8 <_dtoa_r>
    4284:	1021883a 	mov	r16,r2
    4288:	008019c4 	movi	r2,103
    428c:	d8c03d17 	ldw	r3,244(sp)
    4290:	da003e17 	ldw	r8,248(sp)
    4294:	8880e726 	beq	r17,r2,4634 <___svfprintf_internal_r+0x1d40>
    4298:	008011c4 	movi	r2,71
    429c:	8880d426 	beq	r17,r2,45f0 <___svfprintf_internal_r+0x1cfc>
    42a0:	80f9883a 	add	fp,r16,r3
    42a4:	d9003617 	ldw	r4,216(sp)
    42a8:	000d883a 	mov	r6,zero
    42ac:	000f883a 	mov	r7,zero
    42b0:	a00b883a 	mov	r5,r20
    42b4:	da003e15 	stw	r8,248(sp)
    42b8:	00111ec0 	call	111ec <__eqdf2>
    42bc:	da003e17 	ldw	r8,248(sp)
    42c0:	1000e426 	beq	r2,zero,4654 <___svfprintf_internal_r+0x1d60>
    42c4:	d8802117 	ldw	r2,132(sp)
    42c8:	1700062e 	bgeu	r2,fp,42e4 <___svfprintf_internal_r+0x19f0>
    42cc:	01000c04 	movi	r4,48
    42d0:	10c00044 	addi	r3,r2,1
    42d4:	d8c02115 	stw	r3,132(sp)
    42d8:	11000005 	stb	r4,0(r2)
    42dc:	d8802117 	ldw	r2,132(sp)
    42e0:	173ffb36 	bltu	r2,fp,42d0 <___svfprintf_internal_r+0x19dc>
    42e4:	1405c83a 	sub	r2,r2,r16
    42e8:	d8803315 	stw	r2,204(sp)
    42ec:	008011c4 	movi	r2,71
    42f0:	b080c526 	beq	r22,r2,4608 <___svfprintf_internal_r+0x1d14>
    42f4:	00801944 	movi	r2,101
    42f8:	1441d90e 	bge	r2,r17,4a60 <___svfprintf_internal_r+0x216c>
    42fc:	d8c02617 	ldw	r3,152(sp)
    4300:	00801984 	movi	r2,102
    4304:	d8c03215 	stw	r3,200(sp)
    4308:	88813426 	beq	r17,r2,47dc <___svfprintf_internal_r+0x1ee8>
    430c:	d8c03217 	ldw	r3,200(sp)
    4310:	d9003317 	ldw	r4,204(sp)
    4314:	19012516 	blt	r3,r4,47ac <___svfprintf_internal_r+0x1eb8>
    4318:	9480004c 	andi	r18,r18,1
    431c:	9001841e 	bne	r18,zero,4930 <___svfprintf_internal_r+0x203c>
    4320:	1805883a 	mov	r2,r3
    4324:	1801cc16 	blt	r3,zero,4a58 <___svfprintf_internal_r+0x2164>
    4328:	d8c03217 	ldw	r3,200(sp)
    432c:	044019c4 	movi	r17,103
    4330:	d8c02e15 	stw	r3,184(sp)
    4334:	df002a07 	ldb	fp,168(sp)
    4338:	e000a61e 	bne	fp,zero,45d4 <___svfprintf_internal_r+0x1ce0>
    433c:	df002783 	ldbu	fp,158(sp)
    4340:	d8802a15 	stw	r2,168(sp)
    4344:	dc802b17 	ldw	r18,172(sp)
    4348:	d8002915 	stw	zero,164(sp)
    434c:	003b1706 	br	2fac <___svfprintf_internal_r+0x6b8>
    4350:	040000b4 	movhi	r16,2
    4354:	843d5904 	addi	r16,r16,-2716
    4358:	003aa606 	br	2df4 <___svfprintf_internal_r+0x500>
    435c:	d9003917 	ldw	r4,228(sp)
    4360:	04001004 	movi	r16,64
    4364:	800b883a 	mov	r5,r16
    4368:	000961c0 	call	961c <_malloc_r>
    436c:	d9002c17 	ldw	r4,176(sp)
    4370:	20800015 	stw	r2,0(r4)
    4374:	20800415 	stw	r2,16(r4)
    4378:	1001cb26 	beq	r2,zero,4aa8 <___svfprintf_internal_r+0x21b4>
    437c:	d8802c17 	ldw	r2,176(sp)
    4380:	14000515 	stw	r16,20(r2)
    4384:	00397606 	br	2960 <___svfprintf_internal_r+0x6c>
    4388:	040000b4 	movhi	r16,2
    438c:	843d5b04 	addi	r16,r16,-2708
    4390:	003ee106 	br	3f18 <___svfprintf_internal_r+0x1624>
    4394:	d9402c17 	ldw	r5,176(sp)
    4398:	d9801e04 	addi	r6,sp,120
    439c:	9809883a 	mov	r4,r19
    43a0:	000b4f00 	call	b4f0 <__ssprint_r>
    43a4:	103a381e 	bne	r2,zero,2c88 <___svfprintf_internal_r+0x394>
    43a8:	dc402617 	ldw	r17,152(sp)
    43ac:	d8c02017 	ldw	r3,128(sp)
    43b0:	da000404 	addi	r8,sp,16
    43b4:	003f4306 	br	40c4 <___svfprintf_internal_r+0x17d0>
    43b8:	01400184 	movi	r5,6
    43bc:	d9402915 	stw	r5,164(sp)
    43c0:	003f9506 	br	4218 <___svfprintf_internal_r+0x1924>
    43c4:	d9002d17 	ldw	r4,180(sp)
    43c8:	25000017 	ldw	r20,0(r4)
    43cc:	21000104 	addi	r4,r4,4
    43d0:	d9002d15 	stw	r4,180(sp)
    43d4:	a02dd7fa 	srai	r22,r20,31
    43d8:	b005883a 	mov	r2,r22
    43dc:	003a9b06 	br	2e4c <___svfprintf_internal_r+0x558>
    43e0:	d9402d17 	ldw	r5,180(sp)
    43e4:	002d883a 	mov	r22,zero
    43e8:	2d000017 	ldw	r20,0(r5)
    43ec:	29400104 	addi	r5,r5,4
    43f0:	d9402d15 	stw	r5,180(sp)
    43f4:	003bf906 	br	33dc <___svfprintf_internal_r+0xae8>
    43f8:	9480100c 	andi	r18,r18,64
    43fc:	90006e26 	beq	r18,zero,45b8 <___svfprintf_internal_r+0x1cc4>
    4400:	d9002d17 	ldw	r4,180(sp)
    4404:	d9402f17 	ldw	r5,188(sp)
    4408:	20800017 	ldw	r2,0(r4)
    440c:	21000104 	addi	r4,r4,4
    4410:	d9002d15 	stw	r4,180(sp)
    4414:	1140000d 	sth	r5,0(r2)
    4418:	00396106 	br	29a0 <___svfprintf_internal_r+0xac>
    441c:	d9402c17 	ldw	r5,176(sp)
    4420:	d9801e04 	addi	r6,sp,120
    4424:	9809883a 	mov	r4,r19
    4428:	000b4f00 	call	b4f0 <__ssprint_r>
    442c:	103a161e 	bne	r2,zero,2c88 <___svfprintf_internal_r+0x394>
    4430:	d8c02017 	ldw	r3,128(sp)
    4434:	d8801f17 	ldw	r2,124(sp)
    4438:	da000404 	addi	r8,sp,16
    443c:	d9403317 	ldw	r5,204(sp)
    4440:	10800044 	addi	r2,r2,1
    4444:	44000015 	stw	r16,0(r8)
    4448:	28c7883a 	add	r3,r5,r3
    444c:	003b7706 	br	322c <___svfprintf_internal_r+0x938>
    4450:	8009883a 	mov	r4,r16
    4454:	da003e15 	stw	r8,248(sp)
    4458:	000b4580 	call	b458 <strlen>
    445c:	d8802e15 	stw	r2,184(sp)
    4460:	da003e17 	ldw	r8,248(sp)
    4464:	103c280e 	bge	r2,zero,3508 <___svfprintf_internal_r+0xc14>
    4468:	0005883a 	mov	r2,zero
    446c:	003c2606 	br	3508 <___svfprintf_internal_r+0xc14>
    4470:	00bfffc4 	movi	r2,-1
    4474:	003a0906 	br	2c9c <___svfprintf_internal_r+0x3a8>
    4478:	010000b4 	movhi	r4,2
    447c:	213d6d84 	addi	r4,r4,-2634
    4480:	d9003515 	stw	r4,212(sp)
    4484:	003b0606 	br	30a0 <___svfprintf_internal_r+0x7ac>
    4488:	013fffc4 	movi	r4,-1
    448c:	003a2706 	br	2d2c <___svfprintf_internal_r+0x438>
    4490:	d9402c17 	ldw	r5,176(sp)
    4494:	d9801e04 	addi	r6,sp,120
    4498:	9809883a 	mov	r4,r19
    449c:	000b4f00 	call	b4f0 <__ssprint_r>
    44a0:	1039f91e 	bne	r2,zero,2c88 <___svfprintf_internal_r+0x394>
    44a4:	d8c02017 	ldw	r3,128(sp)
    44a8:	da000404 	addi	r8,sp,16
    44ac:	003d8406 	br	3ac0 <___svfprintf_internal_r+0x11cc>
    44b0:	0023883a 	mov	r17,zero
    44b4:	003d8306 	br	3ac4 <___svfprintf_internal_r+0x11d0>
    44b8:	010000b4 	movhi	r4,2
    44bc:	213d6984 	addi	r4,r4,-2650
    44c0:	d9002b15 	stw	r4,172(sp)
    44c4:	d9002b17 	ldw	r4,172(sp)
    44c8:	1c47883a 	add	r3,r3,r17
    44cc:	10800044 	addi	r2,r2,1
    44d0:	41000015 	stw	r4,0(r8)
    44d4:	44400115 	stw	r17,4(r8)
    44d8:	d8c02015 	stw	r3,128(sp)
    44dc:	d8801f15 	stw	r2,124(sp)
    44e0:	010001c4 	movi	r4,7
    44e4:	20bfcd16 	blt	r4,r2,441c <___svfprintf_internal_r+0x1b28>
    44e8:	42000204 	addi	r8,r8,8
    44ec:	003fd306 	br	443c <___svfprintf_internal_r+0x1b48>
    44f0:	d9402c17 	ldw	r5,176(sp)
    44f4:	d9801e04 	addi	r6,sp,120
    44f8:	9809883a 	mov	r4,r19
    44fc:	000b4f00 	call	b4f0 <__ssprint_r>
    4500:	1039e11e 	bne	r2,zero,2c88 <___svfprintf_internal_r+0x394>
    4504:	d8802617 	ldw	r2,152(sp)
    4508:	d8c02017 	ldw	r3,128(sp)
    450c:	da000404 	addi	r8,sp,16
    4510:	003e1c06 	br	3d84 <___svfprintf_internal_r+0x1490>
    4514:	d8802917 	ldw	r2,164(sp)
    4518:	00c00184 	movi	r3,6
    451c:	1880012e 	bgeu	r3,r2,4524 <___svfprintf_internal_r+0x1c30>
    4520:	1805883a 	mov	r2,r3
    4524:	d8802e15 	stw	r2,184(sp)
    4528:	1000f316 	blt	r2,zero,48f8 <___svfprintf_internal_r+0x2004>
    452c:	040000b4 	movhi	r16,2
    4530:	d8802a15 	stw	r2,168(sp)
    4534:	dd002d15 	stw	r20,180(sp)
    4538:	d8002915 	stw	zero,164(sp)
    453c:	d8003215 	stw	zero,200(sp)
    4540:	843d6704 	addi	r16,r16,-2660
    4544:	0039883a 	mov	fp,zero
    4548:	003a9f06 	br	2fc8 <___svfprintf_internal_r+0x6d4>
    454c:	010000b4 	movhi	r4,2
    4550:	213d6d84 	addi	r4,r4,-2634
    4554:	d9003515 	stw	r4,212(sp)
    4558:	003b5f06 	br	32d8 <___svfprintf_internal_r+0x9e4>
    455c:	d9402c17 	ldw	r5,176(sp)
    4560:	d9801e04 	addi	r6,sp,120
    4564:	9809883a 	mov	r4,r19
    4568:	000b4f00 	call	b4f0 <__ssprint_r>
    456c:	1039c61e 	bne	r2,zero,2c88 <___svfprintf_internal_r+0x394>
    4570:	d8802617 	ldw	r2,152(sp)
    4574:	d9403317 	ldw	r5,204(sp)
    4578:	d8c02017 	ldw	r3,128(sp)
    457c:	da000404 	addi	r8,sp,16
    4580:	2885c83a 	sub	r2,r5,r2
    4584:	003e1006 	br	3dc8 <___svfprintf_internal_r+0x14d4>
    4588:	00800044 	movi	r2,1
    458c:	10803fcc 	andi	r2,r2,255
    4590:	00c00044 	movi	r3,1
    4594:	10fa3526 	beq	r2,r3,2e6c <___svfprintf_internal_r+0x578>
    4598:	00c00084 	movi	r3,2
    459c:	10fb9e26 	beq	r2,r3,3418 <___svfprintf_internal_r+0xb24>
    45a0:	003a6406 	br	2f34 <___svfprintf_internal_r+0x640>
    45a4:	0021883a 	mov	r16,zero
    45a8:	003e0806 	br	3dcc <___svfprintf_internal_r+0x14d8>
    45ac:	07000b44 	movi	fp,45
    45b0:	df002785 	stb	fp,158(sp)
    45b4:	003a0b06 	br	2de4 <___svfprintf_internal_r+0x4f0>
    45b8:	d8c02d17 	ldw	r3,180(sp)
    45bc:	d9002f17 	ldw	r4,188(sp)
    45c0:	18800017 	ldw	r2,0(r3)
    45c4:	18c00104 	addi	r3,r3,4
    45c8:	d8c02d15 	stw	r3,180(sp)
    45cc:	11000015 	stw	r4,0(r2)
    45d0:	0038f306 	br	29a0 <___svfprintf_internal_r+0xac>
    45d4:	00c00b44 	movi	r3,45
    45d8:	d8c02785 	stb	r3,158(sp)
    45dc:	d8802a15 	stw	r2,168(sp)
    45e0:	dc802b17 	ldw	r18,172(sp)
    45e4:	d8002915 	stw	zero,164(sp)
    45e8:	07000b44 	movi	fp,45
    45ec:	003a7306 	br	2fbc <___svfprintf_internal_r+0x6c8>
    45f0:	9080004c 	andi	r2,r18,1
    45f4:	1000941e 	bne	r2,zero,4848 <___svfprintf_internal_r+0x1f54>
    45f8:	d8802117 	ldw	r2,132(sp)
    45fc:	1405c83a 	sub	r2,r2,r16
    4600:	d8803315 	stw	r2,204(sp)
    4604:	b441161e 	bne	r22,r17,4a60 <___svfprintf_internal_r+0x216c>
    4608:	dd802617 	ldw	r22,152(sp)
    460c:	00bfff44 	movi	r2,-3
    4610:	b0801a16 	blt	r22,r2,467c <___svfprintf_internal_r+0x1d88>
    4614:	d9402917 	ldw	r5,164(sp)
    4618:	2d801816 	blt	r5,r22,467c <___svfprintf_internal_r+0x1d88>
    461c:	dd803215 	stw	r22,200(sp)
    4620:	003f3a06 	br	430c <___svfprintf_internal_r+0x1a18>
    4624:	1025883a 	mov	r18,r2
    4628:	0039883a 	mov	fp,zero
    462c:	00800084 	movi	r2,2
    4630:	003fd606 	br	458c <___svfprintf_internal_r+0x1c98>
    4634:	9080004c 	andi	r2,r18,1
    4638:	103f191e 	bne	r2,zero,42a0 <___svfprintf_internal_r+0x19ac>
    463c:	d8802117 	ldw	r2,132(sp)
    4640:	003f2806 	br	42e4 <___svfprintf_internal_r+0x19f0>
    4644:	010000b4 	movhi	r4,2
    4648:	213d6984 	addi	r4,r4,-2650
    464c:	d9002b15 	stw	r4,172(sp)
    4650:	003c7c06 	br	3844 <___svfprintf_internal_r+0xf50>
    4654:	e005883a 	mov	r2,fp
    4658:	003f2206 	br	42e4 <___svfprintf_internal_r+0x19f0>
    465c:	d9402917 	ldw	r5,164(sp)
    4660:	df002783 	ldbu	fp,158(sp)
    4664:	dd002d15 	stw	r20,180(sp)
    4668:	d9402a15 	stw	r5,168(sp)
    466c:	d9402e15 	stw	r5,184(sp)
    4670:	d8002915 	stw	zero,164(sp)
    4674:	d8003215 	stw	zero,200(sp)
    4678:	003a4c06 	br	2fac <___svfprintf_internal_r+0x6b8>
    467c:	8c7fff84 	addi	r17,r17,-2
    4680:	b5bfffc4 	addi	r22,r22,-1
    4684:	dd802615 	stw	r22,152(sp)
    4688:	dc4022c5 	stb	r17,139(sp)
    468c:	b000c316 	blt	r22,zero,499c <___svfprintf_internal_r+0x20a8>
    4690:	00800ac4 	movi	r2,43
    4694:	d8802305 	stb	r2,140(sp)
    4698:	00800244 	movi	r2,9
    469c:	15806e16 	blt	r2,r22,4858 <___svfprintf_internal_r+0x1f64>
    46a0:	00800c04 	movi	r2,48
    46a4:	b5800c04 	addi	r22,r22,48
    46a8:	d8802345 	stb	r2,141(sp)
    46ac:	dd802385 	stb	r22,142(sp)
    46b0:	d88023c4 	addi	r2,sp,143
    46b4:	df0022c4 	addi	fp,sp,139
    46b8:	d8c03317 	ldw	r3,204(sp)
    46bc:	1739c83a 	sub	fp,r2,fp
    46c0:	d9003317 	ldw	r4,204(sp)
    46c4:	e0c7883a 	add	r3,fp,r3
    46c8:	df003b15 	stw	fp,236(sp)
    46cc:	d8c02e15 	stw	r3,184(sp)
    46d0:	00800044 	movi	r2,1
    46d4:	1100b70e 	bge	r2,r4,49b4 <___svfprintf_internal_r+0x20c0>
    46d8:	d8c02e17 	ldw	r3,184(sp)
    46dc:	18c00044 	addi	r3,r3,1
    46e0:	d8c02e15 	stw	r3,184(sp)
    46e4:	1805883a 	mov	r2,r3
    46e8:	1800b016 	blt	r3,zero,49ac <___svfprintf_internal_r+0x20b8>
    46ec:	d8003215 	stw	zero,200(sp)
    46f0:	003f1006 	br	4334 <___svfprintf_internal_r+0x1a40>
    46f4:	d8802917 	ldw	r2,164(sp)
    46f8:	103ec71e 	bne	r2,zero,4218 <___svfprintf_internal_r+0x1924>
    46fc:	dc002915 	stw	r16,164(sp)
    4700:	003ec506 	br	4218 <___svfprintf_internal_r+0x1924>
    4704:	d9402c17 	ldw	r5,176(sp)
    4708:	d9801e04 	addi	r6,sp,120
    470c:	9809883a 	mov	r4,r19
    4710:	000b4f00 	call	b4f0 <__ssprint_r>
    4714:	10395c1e 	bne	r2,zero,2c88 <___svfprintf_internal_r+0x394>
    4718:	dc402617 	ldw	r17,152(sp)
    471c:	d8c02017 	ldw	r3,128(sp)
    4720:	d8801f17 	ldw	r2,124(sp)
    4724:	da000404 	addi	r8,sp,16
    4728:	003e7706 	br	4108 <___svfprintf_internal_r+0x1814>
    472c:	582f883a 	mov	r23,r11
    4730:	d8002915 	stw	zero,164(sp)
    4734:	0038c406 	br	2a48 <___svfprintf_internal_r+0x154>
    4738:	d8c02917 	ldw	r3,164(sp)
    473c:	d8802104 	addi	r2,sp,132
    4740:	d8800315 	stw	r2,12(sp)
    4744:	d9403617 	ldw	r5,216(sp)
    4748:	d8802504 	addi	r2,sp,148
    474c:	d8800215 	stw	r2,8(sp)
    4750:	d8802604 	addi	r2,sp,152
    4754:	d8c00015 	stw	r3,0(sp)
    4758:	9809883a 	mov	r4,r19
    475c:	d8800115 	stw	r2,4(sp)
    4760:	01c000c4 	movi	r7,3
    4764:	a00d883a 	mov	r6,r20
    4768:	da003e15 	stw	r8,248(sp)
    476c:	00070f80 	call	70f8 <_dtoa_r>
    4770:	d9002917 	ldw	r4,164(sp)
    4774:	da003e17 	ldw	r8,248(sp)
    4778:	1021883a 	mov	r16,r2
    477c:	1139883a 	add	fp,r2,r4
    4780:	2007883a 	mov	r3,r4
    4784:	81000007 	ldb	r4,0(r16)
    4788:	00800c04 	movi	r2,48
    478c:	20806f26 	beq	r4,r2,494c <___svfprintf_internal_r+0x2058>
    4790:	d8c02617 	ldw	r3,152(sp)
    4794:	e0f9883a 	add	fp,fp,r3
    4798:	003ec206 	br	42a4 <___svfprintf_internal_r+0x19b0>
    479c:	00c00b44 	movi	r3,45
    47a0:	2520003c 	xorhi	r20,r4,32768
    47a4:	d8c02a05 	stb	r3,168(sp)
    47a8:	003ea106 	br	4230 <___svfprintf_internal_r+0x193c>
    47ac:	d8c03217 	ldw	r3,200(sp)
    47b0:	00c0890e 	bge	zero,r3,49d8 <___svfprintf_internal_r+0x20e4>
    47b4:	00800044 	movi	r2,1
    47b8:	d9003317 	ldw	r4,204(sp)
    47bc:	1105883a 	add	r2,r2,r4
    47c0:	d8802e15 	stw	r2,184(sp)
    47c4:	10005f16 	blt	r2,zero,4944 <___svfprintf_internal_r+0x2050>
    47c8:	044019c4 	movi	r17,103
    47cc:	003ed906 	br	4334 <___svfprintf_internal_r+0x1a40>
    47d0:	d9002917 	ldw	r4,164(sp)
    47d4:	20c00044 	addi	r3,r4,1
    47d8:	003e9c06 	br	424c <___svfprintf_internal_r+0x1958>
    47dc:	d9002917 	ldw	r4,164(sp)
    47e0:	00c0680e 	bge	zero,r3,4984 <___svfprintf_internal_r+0x2090>
    47e4:	2000461e 	bne	r4,zero,4900 <___svfprintf_internal_r+0x200c>
    47e8:	9480004c 	andi	r18,r18,1
    47ec:	9000441e 	bne	r18,zero,4900 <___svfprintf_internal_r+0x200c>
    47f0:	1805883a 	mov	r2,r3
    47f4:	1800a016 	blt	r3,zero,4a78 <___svfprintf_internal_r+0x2184>
    47f8:	d8c03217 	ldw	r3,200(sp)
    47fc:	d8c02e15 	stw	r3,184(sp)
    4800:	003ecc06 	br	4334 <___svfprintf_internal_r+0x1a40>
    4804:	d9402917 	ldw	r5,164(sp)
    4808:	d8802104 	addi	r2,sp,132
    480c:	d8800315 	stw	r2,12(sp)
    4810:	d9400015 	stw	r5,0(sp)
    4814:	d8802504 	addi	r2,sp,148
    4818:	d9403617 	ldw	r5,216(sp)
    481c:	d8800215 	stw	r2,8(sp)
    4820:	d8802604 	addi	r2,sp,152
    4824:	d8800115 	stw	r2,4(sp)
    4828:	01c000c4 	movi	r7,3
    482c:	a00d883a 	mov	r6,r20
    4830:	9809883a 	mov	r4,r19
    4834:	da003e15 	stw	r8,248(sp)
    4838:	00070f80 	call	70f8 <_dtoa_r>
    483c:	d8c02917 	ldw	r3,164(sp)
    4840:	da003e17 	ldw	r8,248(sp)
    4844:	1021883a 	mov	r16,r2
    4848:	00801184 	movi	r2,70
    484c:	80f9883a 	add	fp,r16,r3
    4850:	88bfcc26 	beq	r17,r2,4784 <___svfprintf_internal_r+0x1e90>
    4854:	003e9306 	br	42a4 <___svfprintf_internal_r+0x19b0>
    4858:	df0022c4 	addi	fp,sp,139
    485c:	dc002915 	stw	r16,164(sp)
    4860:	9829883a 	mov	r20,r19
    4864:	e021883a 	mov	r16,fp
    4868:	4027883a 	mov	r19,r8
    486c:	b009883a 	mov	r4,r22
    4870:	01400284 	movi	r5,10
    4874:	000ff280 	call	ff28 <__modsi3>
    4878:	10800c04 	addi	r2,r2,48
    487c:	843fffc4 	addi	r16,r16,-1
    4880:	b009883a 	mov	r4,r22
    4884:	01400284 	movi	r5,10
    4888:	80800005 	stb	r2,0(r16)
    488c:	000fea40 	call	fea4 <__divsi3>
    4890:	102d883a 	mov	r22,r2
    4894:	00800244 	movi	r2,9
    4898:	15bff416 	blt	r2,r22,486c <___svfprintf_internal_r+0x1f78>
    489c:	9811883a 	mov	r8,r19
    48a0:	b0800c04 	addi	r2,r22,48
    48a4:	a027883a 	mov	r19,r20
    48a8:	8029883a 	mov	r20,r16
    48ac:	a17fffc4 	addi	r5,r20,-1
    48b0:	a0bfffc5 	stb	r2,-1(r20)
    48b4:	dc002917 	ldw	r16,164(sp)
    48b8:	2f00752e 	bgeu	r5,fp,4a90 <___svfprintf_internal_r+0x219c>
    48bc:	d9c02384 	addi	r7,sp,142
    48c0:	3d0fc83a 	sub	r7,r7,r20
    48c4:	d9002344 	addi	r4,sp,141
    48c8:	e1cf883a 	add	r7,fp,r7
    48cc:	00000106 	br	48d4 <___svfprintf_internal_r+0x1fe0>
    48d0:	28800003 	ldbu	r2,0(r5)
    48d4:	20800005 	stb	r2,0(r4)
    48d8:	21000044 	addi	r4,r4,1
    48dc:	29400044 	addi	r5,r5,1
    48e0:	21fffb1e 	bne	r4,r7,48d0 <___svfprintf_internal_r+0x1fdc>
    48e4:	d8802304 	addi	r2,sp,140
    48e8:	1505c83a 	sub	r2,r2,r20
    48ec:	d8c02344 	addi	r3,sp,141
    48f0:	1885883a 	add	r2,r3,r2
    48f4:	003f7006 	br	46b8 <___svfprintf_internal_r+0x1dc4>
    48f8:	0005883a 	mov	r2,zero
    48fc:	003f0b06 	br	452c <___svfprintf_internal_r+0x1c38>
    4900:	d9002917 	ldw	r4,164(sp)
    4904:	d8c03217 	ldw	r3,200(sp)
    4908:	20800044 	addi	r2,r4,1
    490c:	1885883a 	add	r2,r3,r2
    4910:	d8802e15 	stw	r2,184(sp)
    4914:	103e870e 	bge	r2,zero,4334 <___svfprintf_internal_r+0x1a40>
    4918:	0005883a 	mov	r2,zero
    491c:	003e8506 	br	4334 <___svfprintf_internal_r+0x1a40>
    4920:	010000b4 	movhi	r4,2
    4924:	213d6984 	addi	r4,r4,-2650
    4928:	d9002b15 	stw	r4,172(sp)
    492c:	003cc506 	br	3c44 <___svfprintf_internal_r+0x1350>
    4930:	d8c03217 	ldw	r3,200(sp)
    4934:	18c00044 	addi	r3,r3,1
    4938:	d8c02e15 	stw	r3,184(sp)
    493c:	1805883a 	mov	r2,r3
    4940:	183fa10e 	bge	r3,zero,47c8 <___svfprintf_internal_r+0x1ed4>
    4944:	0005883a 	mov	r2,zero
    4948:	003f9f06 	br	47c8 <___svfprintf_internal_r+0x1ed4>
    494c:	d9003617 	ldw	r4,216(sp)
    4950:	000d883a 	mov	r6,zero
    4954:	000f883a 	mov	r7,zero
    4958:	a00b883a 	mov	r5,r20
    495c:	d8c03d15 	stw	r3,244(sp)
    4960:	da003e15 	stw	r8,248(sp)
    4964:	00111ec0 	call	111ec <__eqdf2>
    4968:	d8c03d17 	ldw	r3,244(sp)
    496c:	da003e17 	ldw	r8,248(sp)
    4970:	103f8726 	beq	r2,zero,4790 <___svfprintf_internal_r+0x1e9c>
    4974:	00800044 	movi	r2,1
    4978:	10c7c83a 	sub	r3,r2,r3
    497c:	d8c02615 	stw	r3,152(sp)
    4980:	003f8406 	br	4794 <___svfprintf_internal_r+0x1ea0>
    4984:	20000e1e 	bne	r4,zero,49c0 <___svfprintf_internal_r+0x20cc>
    4988:	9480004c 	andi	r18,r18,1
    498c:	90000c1e 	bne	r18,zero,49c0 <___svfprintf_internal_r+0x20cc>
    4990:	00800044 	movi	r2,1
    4994:	d8802e15 	stw	r2,184(sp)
    4998:	003e6606 	br	4334 <___svfprintf_internal_r+0x1a40>
    499c:	00800b44 	movi	r2,45
    49a0:	05adc83a 	sub	r22,zero,r22
    49a4:	d8802305 	stb	r2,140(sp)
    49a8:	003f3b06 	br	4698 <___svfprintf_internal_r+0x1da4>
    49ac:	0005883a 	mov	r2,zero
    49b0:	003f4e06 	br	46ec <___svfprintf_internal_r+0x1df8>
    49b4:	90a4703a 	and	r18,r18,r2
    49b8:	903f4a26 	beq	r18,zero,46e4 <___svfprintf_internal_r+0x1df0>
    49bc:	003f4606 	br	46d8 <___svfprintf_internal_r+0x1de4>
    49c0:	d8c02917 	ldw	r3,164(sp)
    49c4:	18c00084 	addi	r3,r3,2
    49c8:	d8c02e15 	stw	r3,184(sp)
    49cc:	1805883a 	mov	r2,r3
    49d0:	183e580e 	bge	r3,zero,4334 <___svfprintf_internal_r+0x1a40>
    49d4:	003fd006 	br	4918 <___svfprintf_internal_r+0x2024>
    49d8:	00800084 	movi	r2,2
    49dc:	10c5c83a 	sub	r2,r2,r3
    49e0:	003f7506 	br	47b8 <___svfprintf_internal_r+0x1ec4>
    49e4:	d8802d17 	ldw	r2,180(sp)
    49e8:	d9002d17 	ldw	r4,180(sp)
    49ec:	bc400043 	ldbu	r17,1(r23)
    49f0:	10800017 	ldw	r2,0(r2)
    49f4:	582f883a 	mov	r23,r11
    49f8:	d8802915 	stw	r2,164(sp)
    49fc:	20800104 	addi	r2,r4,4
    4a00:	d9002917 	ldw	r4,164(sp)
    4a04:	d8802d15 	stw	r2,180(sp)
    4a08:	203df00e 	bge	r4,zero,41cc <___svfprintf_internal_r+0x18d8>
    4a0c:	8c403fcc 	andi	r17,r17,255
    4a10:	00bfffc4 	movi	r2,-1
    4a14:	8c40201c 	xori	r17,r17,128
    4a18:	d8802915 	stw	r2,164(sp)
    4a1c:	8c7fe004 	addi	r17,r17,-128
    4a20:	00380806 	br	2a44 <___svfprintf_internal_r+0x150>
    4a24:	9080004c 	andi	r2,r18,1
    4a28:	0039883a 	mov	fp,zero
    4a2c:	10000726 	beq	r2,zero,4a4c <___svfprintf_internal_r+0x2158>
    4a30:	d8c02817 	ldw	r3,160(sp)
    4a34:	dc001dc4 	addi	r16,sp,119
    4a38:	00800c04 	movi	r2,48
    4a3c:	1c07c83a 	sub	r3,r3,r16
    4a40:	d8801dc5 	stb	r2,119(sp)
    4a44:	d8c02e15 	stw	r3,184(sp)
    4a48:	00395206 	br	2f94 <___svfprintf_internal_r+0x6a0>
    4a4c:	d8002e15 	stw	zero,184(sp)
    4a50:	dc001e04 	addi	r16,sp,120
    4a54:	00394f06 	br	2f94 <___svfprintf_internal_r+0x6a0>
    4a58:	0005883a 	mov	r2,zero
    4a5c:	003e3206 	br	4328 <___svfprintf_internal_r+0x1a34>
    4a60:	dd802617 	ldw	r22,152(sp)
    4a64:	003f0606 	br	4680 <___svfprintf_internal_r+0x1d8c>
    4a68:	d9c02785 	stb	r7,158(sp)
    4a6c:	003a5106 	br	33b4 <___svfprintf_internal_r+0xac0>
    4a70:	d9c02785 	stb	r7,158(sp)
    4a74:	003a3706 	br	3354 <___svfprintf_internal_r+0xa60>
    4a78:	0005883a 	mov	r2,zero
    4a7c:	003f5e06 	br	47f8 <___svfprintf_internal_r+0x1f04>
    4a80:	d9c02785 	stb	r7,158(sp)
    4a84:	00391706 	br	2ee4 <___svfprintf_internal_r+0x5f0>
    4a88:	d9c02785 	stb	r7,158(sp)
    4a8c:	0038e606 	br	2e28 <___svfprintf_internal_r+0x534>
    4a90:	d8802344 	addi	r2,sp,141
    4a94:	003f0806 	br	46b8 <___svfprintf_internal_r+0x1dc4>
    4a98:	d9c02785 	stb	r7,158(sp)
    4a9c:	0038b706 	br	2d7c <___svfprintf_internal_r+0x488>
    4aa0:	d9c02785 	stb	r7,158(sp)
    4aa4:	003adc06 	br	3618 <___svfprintf_internal_r+0xd24>
    4aa8:	d9403917 	ldw	r5,228(sp)
    4aac:	00800304 	movi	r2,12
    4ab0:	28800015 	stw	r2,0(r5)
    4ab4:	00bfffc4 	movi	r2,-1
    4ab8:	00387806 	br	2c9c <___svfprintf_internal_r+0x3a8>
    4abc:	d9c02785 	stb	r7,158(sp)
    4ac0:	003abf06 	br	35c0 <___svfprintf_internal_r+0xccc>
    4ac4:	d9c02785 	stb	r7,158(sp)
    4ac8:	003a9b06 	br	3538 <___svfprintf_internal_r+0xc44>

00004acc <_user_strerror>:
    4acc:	0005883a 	mov	r2,zero
    4ad0:	f800283a 	ret

00004ad4 <___vfprintf_internal_r>:
    4ad4:	deffb804 	addi	sp,sp,-288
    4ad8:	dfc04715 	stw	ra,284(sp)
    4adc:	ddc04515 	stw	r23,276(sp)
    4ae0:	dd404315 	stw	r21,268(sp)
    4ae4:	d9002c15 	stw	r4,176(sp)
    4ae8:	282f883a 	mov	r23,r5
    4aec:	302b883a 	mov	r21,r6
    4af0:	d9c02d15 	stw	r7,180(sp)
    4af4:	df004615 	stw	fp,280(sp)
    4af8:	dd804415 	stw	r22,272(sp)
    4afc:	dd004215 	stw	r20,264(sp)
    4b00:	dcc04115 	stw	r19,260(sp)
    4b04:	dc804015 	stw	r18,256(sp)
    4b08:	dc403f15 	stw	r17,252(sp)
    4b0c:	dc003e15 	stw	r16,248(sp)
    4b10:	00094300 	call	9430 <_localeconv_r>
    4b14:	10800017 	ldw	r2,0(r2)
    4b18:	1009883a 	mov	r4,r2
    4b1c:	d8803415 	stw	r2,208(sp)
    4b20:	000b4580 	call	b458 <strlen>
    4b24:	d8803715 	stw	r2,220(sp)
    4b28:	d8802c17 	ldw	r2,176(sp)
    4b2c:	10000226 	beq	r2,zero,4b38 <___vfprintf_internal_r+0x64>
    4b30:	10800e17 	ldw	r2,56(r2)
    4b34:	1000f926 	beq	r2,zero,4f1c <___vfprintf_internal_r+0x448>
    4b38:	b880030b 	ldhu	r2,12(r23)
    4b3c:	10c8000c 	andi	r3,r2,8192
    4b40:	1800061e 	bne	r3,zero,4b5c <___vfprintf_internal_r+0x88>
    4b44:	b9001917 	ldw	r4,100(r23)
    4b48:	00f7ffc4 	movi	r3,-8193
    4b4c:	10880014 	ori	r2,r2,8192
    4b50:	20c6703a 	and	r3,r4,r3
    4b54:	b880030d 	sth	r2,12(r23)
    4b58:	b8c01915 	stw	r3,100(r23)
    4b5c:	10c0020c 	andi	r3,r2,8
    4b60:	1800c126 	beq	r3,zero,4e68 <___vfprintf_internal_r+0x394>
    4b64:	b8c00417 	ldw	r3,16(r23)
    4b68:	1800bf26 	beq	r3,zero,4e68 <___vfprintf_internal_r+0x394>
    4b6c:	1080068c 	andi	r2,r2,26
    4b70:	00c00284 	movi	r3,10
    4b74:	10c0c426 	beq	r2,r3,4e88 <___vfprintf_internal_r+0x3b4>
    4b78:	d8c00404 	addi	r3,sp,16
    4b7c:	050000b4 	movhi	r20,2
    4b80:	d9001e04 	addi	r4,sp,120
    4b84:	a53d7184 	addi	r20,r20,-2618
    4b88:	d8c01e15 	stw	r3,120(sp)
    4b8c:	d8002015 	stw	zero,128(sp)
    4b90:	d8001f15 	stw	zero,124(sp)
    4b94:	d8003315 	stw	zero,204(sp)
    4b98:	d8003615 	stw	zero,216(sp)
    4b9c:	d8003815 	stw	zero,224(sp)
    4ba0:	1811883a 	mov	r8,r3
    4ba4:	d8003915 	stw	zero,228(sp)
    4ba8:	d8003a15 	stw	zero,232(sp)
    4bac:	d8002f15 	stw	zero,188(sp)
    4bb0:	d9002815 	stw	r4,160(sp)
    4bb4:	a8800007 	ldb	r2,0(r21)
    4bb8:	10027b26 	beq	r2,zero,55a8 <___vfprintf_internal_r+0xad4>
    4bbc:	00c00944 	movi	r3,37
    4bc0:	a821883a 	mov	r16,r21
    4bc4:	10c0021e 	bne	r2,r3,4bd0 <___vfprintf_internal_r+0xfc>
    4bc8:	00001406 	br	4c1c <___vfprintf_internal_r+0x148>
    4bcc:	10c00326 	beq	r2,r3,4bdc <___vfprintf_internal_r+0x108>
    4bd0:	84000044 	addi	r16,r16,1
    4bd4:	80800007 	ldb	r2,0(r16)
    4bd8:	103ffc1e 	bne	r2,zero,4bcc <___vfprintf_internal_r+0xf8>
    4bdc:	8563c83a 	sub	r17,r16,r21
    4be0:	88000e26 	beq	r17,zero,4c1c <___vfprintf_internal_r+0x148>
    4be4:	d8c02017 	ldw	r3,128(sp)
    4be8:	d8801f17 	ldw	r2,124(sp)
    4bec:	45400015 	stw	r21,0(r8)
    4bf0:	1c47883a 	add	r3,r3,r17
    4bf4:	10800044 	addi	r2,r2,1
    4bf8:	d8c02015 	stw	r3,128(sp)
    4bfc:	44400115 	stw	r17,4(r8)
    4c00:	d8801f15 	stw	r2,124(sp)
    4c04:	00c001c4 	movi	r3,7
    4c08:	1880a716 	blt	r3,r2,4ea8 <___vfprintf_internal_r+0x3d4>
    4c0c:	42000204 	addi	r8,r8,8
    4c10:	d9402f17 	ldw	r5,188(sp)
    4c14:	2c4b883a 	add	r5,r5,r17
    4c18:	d9402f15 	stw	r5,188(sp)
    4c1c:	80800007 	ldb	r2,0(r16)
    4c20:	1000a826 	beq	r2,zero,4ec4 <___vfprintf_internal_r+0x3f0>
    4c24:	84400047 	ldb	r17,1(r16)
    4c28:	00bfffc4 	movi	r2,-1
    4c2c:	85400044 	addi	r21,r16,1
    4c30:	d8002785 	stb	zero,158(sp)
    4c34:	0007883a 	mov	r3,zero
    4c38:	000f883a 	mov	r7,zero
    4c3c:	d8802915 	stw	r2,164(sp)
    4c40:	d8003115 	stw	zero,196(sp)
    4c44:	0025883a 	mov	r18,zero
    4c48:	01401604 	movi	r5,88
    4c4c:	01800244 	movi	r6,9
    4c50:	02800a84 	movi	r10,42
    4c54:	02401b04 	movi	r9,108
    4c58:	ad400044 	addi	r21,r21,1
    4c5c:	88bff804 	addi	r2,r17,-32
    4c60:	28830436 	bltu	r5,r2,5874 <___vfprintf_internal_r+0xda0>
    4c64:	100490ba 	slli	r2,r2,2
    4c68:	01000034 	movhi	r4,0
    4c6c:	21131f04 	addi	r4,r4,19580
    4c70:	1105883a 	add	r2,r2,r4
    4c74:	10800017 	ldw	r2,0(r2)
    4c78:	1000683a 	jmp	r2
    4c7c:	00005794 	movui	zero,350
    4c80:	00005874 	movhi	zero,353
    4c84:	00005874 	movhi	zero,353
    4c88:	000057b4 	movhi	zero,350
    4c8c:	00005874 	movhi	zero,353
    4c90:	00005874 	movhi	zero,353
    4c94:	00005874 	movhi	zero,353
    4c98:	00005874 	movhi	zero,353
    4c9c:	00005874 	movhi	zero,353
    4ca0:	00005874 	movhi	zero,353
    4ca4:	00004f28 	cmpgeui	zero,zero,316
    4ca8:	000056d0 	cmplti	zero,zero,347
    4cac:	00005874 	movhi	zero,353
    4cb0:	00004df0 	cmpltui	zero,zero,311
    4cb4:	00004f50 	cmplti	zero,zero,317
    4cb8:	00005874 	movhi	zero,353
    4cbc:	00004f90 	cmplti	zero,zero,318
    4cc0:	00004f9c 	xori	zero,zero,318
    4cc4:	00004f9c 	xori	zero,zero,318
    4cc8:	00004f9c 	xori	zero,zero,318
    4ccc:	00004f9c 	xori	zero,zero,318
    4cd0:	00004f9c 	xori	zero,zero,318
    4cd4:	00004f9c 	xori	zero,zero,318
    4cd8:	00004f9c 	xori	zero,zero,318
    4cdc:	00004f9c 	xori	zero,zero,318
    4ce0:	00004f9c 	xori	zero,zero,318
    4ce4:	00005874 	movhi	zero,353
    4ce8:	00005874 	movhi	zero,353
    4cec:	00005874 	movhi	zero,353
    4cf0:	00005874 	movhi	zero,353
    4cf4:	00005874 	movhi	zero,353
    4cf8:	00005874 	movhi	zero,353
    4cfc:	00005874 	movhi	zero,353
    4d00:	00005874 	movhi	zero,353
    4d04:	00005874 	movhi	zero,353
    4d08:	00005874 	movhi	zero,353
    4d0c:	00004fd0 	cmplti	zero,zero,319
    4d10:	0000508c 	andi	zero,zero,322
    4d14:	00005874 	movhi	zero,353
    4d18:	0000508c 	andi	zero,zero,322
    4d1c:	00005874 	movhi	zero,353
    4d20:	00005874 	movhi	zero,353
    4d24:	00005874 	movhi	zero,353
    4d28:	00005874 	movhi	zero,353
    4d2c:	0000512c 	andhi	zero,zero,324
    4d30:	00005874 	movhi	zero,353
    4d34:	00005874 	movhi	zero,353
    4d38:	00005138 	rdprs	zero,zero,324
    4d3c:	00005874 	movhi	zero,353
    4d40:	00005874 	movhi	zero,353
    4d44:	00005874 	movhi	zero,353
    4d48:	00005874 	movhi	zero,353
    4d4c:	00005874 	movhi	zero,353
    4d50:	000055b0 	cmpltui	zero,zero,342
    4d54:	00005874 	movhi	zero,353
    4d58:	00005874 	movhi	zero,353
    4d5c:	00005610 	cmplti	zero,zero,344
    4d60:	00005874 	movhi	zero,353
    4d64:	00005874 	movhi	zero,353
    4d68:	00005874 	movhi	zero,353
    4d6c:	00005874 	movhi	zero,353
    4d70:	00005874 	movhi	zero,353
    4d74:	00005874 	movhi	zero,353
    4d78:	00005874 	movhi	zero,353
    4d7c:	00005874 	movhi	zero,353
    4d80:	00005874 	movhi	zero,353
    4d84:	00005874 	movhi	zero,353
    4d88:	00005820 	cmpeqi	zero,zero,352
    4d8c:	000057c0 	call	57c <Task_read_PS2_Keyboard+0x30>
    4d90:	0000508c 	andi	zero,zero,322
    4d94:	0000508c 	andi	zero,zero,322
    4d98:	0000508c 	andi	zero,zero,322
    4d9c:	000057d0 	cmplti	zero,zero,351
    4da0:	000057c0 	call	57c <Task_read_PS2_Keyboard+0x30>
    4da4:	00005874 	movhi	zero,353
    4da8:	00005874 	movhi	zero,353
    4dac:	000057dc 	xori	zero,zero,351
    4db0:	00005874 	movhi	zero,353
    4db4:	000057ec 	andhi	zero,zero,351
    4db8:	000056c0 	call	56c <Task_read_PS2_Keyboard+0x20>
    4dbc:	00004dfc 	xorhi	zero,zero,311
    4dc0:	000056e0 	cmpeqi	zero,zero,347
    4dc4:	00005874 	movhi	zero,353
    4dc8:	000056ec 	andhi	zero,zero,347
    4dcc:	00005874 	movhi	zero,353
    4dd0:	00005748 	cmpgei	zero,zero,349
    4dd4:	00005874 	movhi	zero,353
    4dd8:	00005874 	movhi	zero,353
    4ddc:	00005758 	cmpnei	zero,zero,349
    4de0:	d9003117 	ldw	r4,196(sp)
    4de4:	d8802d15 	stw	r2,180(sp)
    4de8:	0109c83a 	sub	r4,zero,r4
    4dec:	d9003115 	stw	r4,196(sp)
    4df0:	94800114 	ori	r18,r18,4
    4df4:	ac400007 	ldb	r17,0(r21)
    4df8:	003f9706 	br	4c58 <___vfprintf_internal_r+0x184>
    4dfc:	00800c04 	movi	r2,48
    4e00:	d9002d17 	ldw	r4,180(sp)
    4e04:	d9402917 	ldw	r5,164(sp)
    4e08:	d8802705 	stb	r2,156(sp)
    4e0c:	00801e04 	movi	r2,120
    4e10:	d8802745 	stb	r2,157(sp)
    4e14:	d8002785 	stb	zero,158(sp)
    4e18:	20c00104 	addi	r3,r4,4
    4e1c:	24c00017 	ldw	r19,0(r4)
    4e20:	002d883a 	mov	r22,zero
    4e24:	90800094 	ori	r2,r18,2
    4e28:	28029a16 	blt	r5,zero,5894 <___vfprintf_internal_r+0xdc0>
    4e2c:	00bfdfc4 	movi	r2,-129
    4e30:	90a4703a 	and	r18,r18,r2
    4e34:	d8c02d15 	stw	r3,180(sp)
    4e38:	94800094 	ori	r18,r18,2
    4e3c:	9802871e 	bne	r19,zero,585c <___vfprintf_internal_r+0xd88>
    4e40:	008000b4 	movhi	r2,2
    4e44:	10bd6204 	addi	r2,r2,-2680
    4e48:	d8803915 	stw	r2,228(sp)
    4e4c:	04401e04 	movi	r17,120
    4e50:	d8802917 	ldw	r2,164(sp)
    4e54:	0039883a 	mov	fp,zero
    4e58:	1001e926 	beq	r2,zero,5600 <___vfprintf_internal_r+0xb2c>
    4e5c:	0027883a 	mov	r19,zero
    4e60:	002d883a 	mov	r22,zero
    4e64:	00020506 	br	567c <___vfprintf_internal_r+0xba8>
    4e68:	d9002c17 	ldw	r4,176(sp)
    4e6c:	b80b883a 	mov	r5,r23
    4e70:	0006da40 	call	6da4 <__swsetup_r>
    4e74:	1005ac1e 	bne	r2,zero,6528 <___vfprintf_internal_r+0x1a54>
    4e78:	b880030b 	ldhu	r2,12(r23)
    4e7c:	00c00284 	movi	r3,10
    4e80:	1080068c 	andi	r2,r2,26
    4e84:	10ff3c1e 	bne	r2,r3,4b78 <___vfprintf_internal_r+0xa4>
    4e88:	b880038f 	ldh	r2,14(r23)
    4e8c:	103f3a16 	blt	r2,zero,4b78 <___vfprintf_internal_r+0xa4>
    4e90:	d9c02d17 	ldw	r7,180(sp)
    4e94:	d9002c17 	ldw	r4,176(sp)
    4e98:	a80d883a 	mov	r6,r21
    4e9c:	b80b883a 	mov	r5,r23
    4ea0:	0006ce80 	call	6ce8 <__sbprintf>
    4ea4:	00001106 	br	4eec <___vfprintf_internal_r+0x418>
    4ea8:	d9002c17 	ldw	r4,176(sp)
    4eac:	d9801e04 	addi	r6,sp,120
    4eb0:	b80b883a 	mov	r5,r23
    4eb4:	000c9f80 	call	c9f8 <__sprint_r>
    4eb8:	1000081e 	bne	r2,zero,4edc <___vfprintf_internal_r+0x408>
    4ebc:	da000404 	addi	r8,sp,16
    4ec0:	003f5306 	br	4c10 <___vfprintf_internal_r+0x13c>
    4ec4:	d8802017 	ldw	r2,128(sp)
    4ec8:	10000426 	beq	r2,zero,4edc <___vfprintf_internal_r+0x408>
    4ecc:	d9002c17 	ldw	r4,176(sp)
    4ed0:	d9801e04 	addi	r6,sp,120
    4ed4:	b80b883a 	mov	r5,r23
    4ed8:	000c9f80 	call	c9f8 <__sprint_r>
    4edc:	b880030b 	ldhu	r2,12(r23)
    4ee0:	1080100c 	andi	r2,r2,64
    4ee4:	1005901e 	bne	r2,zero,6528 <___vfprintf_internal_r+0x1a54>
    4ee8:	d8802f17 	ldw	r2,188(sp)
    4eec:	dfc04717 	ldw	ra,284(sp)
    4ef0:	df004617 	ldw	fp,280(sp)
    4ef4:	ddc04517 	ldw	r23,276(sp)
    4ef8:	dd804417 	ldw	r22,272(sp)
    4efc:	dd404317 	ldw	r21,268(sp)
    4f00:	dd004217 	ldw	r20,264(sp)
    4f04:	dcc04117 	ldw	r19,260(sp)
    4f08:	dc804017 	ldw	r18,256(sp)
    4f0c:	dc403f17 	ldw	r17,252(sp)
    4f10:	dc003e17 	ldw	r16,248(sp)
    4f14:	dec04804 	addi	sp,sp,288
    4f18:	f800283a 	ret
    4f1c:	d9002c17 	ldw	r4,176(sp)
    4f20:	0008d780 	call	8d78 <__sinit>
    4f24:	003f0406 	br	4b38 <___vfprintf_internal_r+0x64>
    4f28:	d8802d17 	ldw	r2,180(sp)
    4f2c:	d9002d17 	ldw	r4,180(sp)
    4f30:	10800017 	ldw	r2,0(r2)
    4f34:	d8803115 	stw	r2,196(sp)
    4f38:	20800104 	addi	r2,r4,4
    4f3c:	d9003117 	ldw	r4,196(sp)
    4f40:	203fa716 	blt	r4,zero,4de0 <___vfprintf_internal_r+0x30c>
    4f44:	d8802d15 	stw	r2,180(sp)
    4f48:	ac400007 	ldb	r17,0(r21)
    4f4c:	003f4206 	br	4c58 <___vfprintf_internal_r+0x184>
    4f50:	ac400007 	ldb	r17,0(r21)
    4f54:	aac00044 	addi	r11,r21,1
    4f58:	8a872826 	beq	r17,r10,6bfc <___vfprintf_internal_r+0x2128>
    4f5c:	88bff404 	addi	r2,r17,-48
    4f60:	0009883a 	mov	r4,zero
    4f64:	30867d36 	bltu	r6,r2,695c <___vfprintf_internal_r+0x1e88>
    4f68:	5c400007 	ldb	r17,0(r11)
    4f6c:	210002a4 	muli	r4,r4,10
    4f70:	5d400044 	addi	r21,r11,1
    4f74:	a817883a 	mov	r11,r21
    4f78:	2089883a 	add	r4,r4,r2
    4f7c:	88bff404 	addi	r2,r17,-48
    4f80:	30bff92e 	bgeu	r6,r2,4f68 <___vfprintf_internal_r+0x494>
    4f84:	2005c916 	blt	r4,zero,66ac <___vfprintf_internal_r+0x1bd8>
    4f88:	d9002915 	stw	r4,164(sp)
    4f8c:	003f3306 	br	4c5c <___vfprintf_internal_r+0x188>
    4f90:	94802014 	ori	r18,r18,128
    4f94:	ac400007 	ldb	r17,0(r21)
    4f98:	003f2f06 	br	4c58 <___vfprintf_internal_r+0x184>
    4f9c:	a809883a 	mov	r4,r21
    4fa0:	d8003115 	stw	zero,196(sp)
    4fa4:	88bff404 	addi	r2,r17,-48
    4fa8:	0017883a 	mov	r11,zero
    4fac:	24400007 	ldb	r17,0(r4)
    4fb0:	5ac002a4 	muli	r11,r11,10
    4fb4:	ad400044 	addi	r21,r21,1
    4fb8:	a809883a 	mov	r4,r21
    4fbc:	12d7883a 	add	r11,r2,r11
    4fc0:	88bff404 	addi	r2,r17,-48
    4fc4:	30bff92e 	bgeu	r6,r2,4fac <___vfprintf_internal_r+0x4d8>
    4fc8:	dac03115 	stw	r11,196(sp)
    4fcc:	003f2306 	br	4c5c <___vfprintf_internal_r+0x188>
    4fd0:	18c03fcc 	andi	r3,r3,255
    4fd4:	18072b1e 	bne	r3,zero,6c84 <___vfprintf_internal_r+0x21b0>
    4fd8:	94800414 	ori	r18,r18,16
    4fdc:	9080080c 	andi	r2,r18,32
    4fe0:	10037b26 	beq	r2,zero,5dd0 <___vfprintf_internal_r+0x12fc>
    4fe4:	d9402d17 	ldw	r5,180(sp)
    4fe8:	28800117 	ldw	r2,4(r5)
    4fec:	2cc00017 	ldw	r19,0(r5)
    4ff0:	29400204 	addi	r5,r5,8
    4ff4:	d9402d15 	stw	r5,180(sp)
    4ff8:	102d883a 	mov	r22,r2
    4ffc:	10044b16 	blt	r2,zero,612c <___vfprintf_internal_r+0x1658>
    5000:	d9402917 	ldw	r5,164(sp)
    5004:	df002783 	ldbu	fp,158(sp)
    5008:	2803bc16 	blt	r5,zero,5efc <___vfprintf_internal_r+0x1428>
    500c:	00ffdfc4 	movi	r3,-129
    5010:	9d84b03a 	or	r2,r19,r22
    5014:	90e4703a 	and	r18,r18,r3
    5018:	10017726 	beq	r2,zero,55f8 <___vfprintf_internal_r+0xb24>
    501c:	b0038326 	beq	r22,zero,5e2c <___vfprintf_internal_r+0x1358>
    5020:	dc402a15 	stw	r17,168(sp)
    5024:	dc001e04 	addi	r16,sp,120
    5028:	b023883a 	mov	r17,r22
    502c:	402d883a 	mov	r22,r8
    5030:	9809883a 	mov	r4,r19
    5034:	880b883a 	mov	r5,r17
    5038:	01800284 	movi	r6,10
    503c:	000f883a 	mov	r7,zero
    5040:	000f96c0 	call	f96c <__umoddi3>
    5044:	10800c04 	addi	r2,r2,48
    5048:	843fffc4 	addi	r16,r16,-1
    504c:	9809883a 	mov	r4,r19
    5050:	880b883a 	mov	r5,r17
    5054:	80800005 	stb	r2,0(r16)
    5058:	01800284 	movi	r6,10
    505c:	000f883a 	mov	r7,zero
    5060:	000f3f40 	call	f3f4 <__udivdi3>
    5064:	1027883a 	mov	r19,r2
    5068:	10c4b03a 	or	r2,r2,r3
    506c:	1823883a 	mov	r17,r3
    5070:	103fef1e 	bne	r2,zero,5030 <___vfprintf_internal_r+0x55c>
    5074:	d8c02817 	ldw	r3,160(sp)
    5078:	dc402a17 	ldw	r17,168(sp)
    507c:	b011883a 	mov	r8,r22
    5080:	1c07c83a 	sub	r3,r3,r16
    5084:	d8c02e15 	stw	r3,184(sp)
    5088:	00005906 	br	51f0 <___vfprintf_internal_r+0x71c>
    508c:	18c03fcc 	andi	r3,r3,255
    5090:	1806fa1e 	bne	r3,zero,6c7c <___vfprintf_internal_r+0x21a8>
    5094:	9080020c 	andi	r2,r18,8
    5098:	10048a26 	beq	r2,zero,62c4 <___vfprintf_internal_r+0x17f0>
    509c:	d8c02d17 	ldw	r3,180(sp)
    50a0:	d9002d17 	ldw	r4,180(sp)
    50a4:	d9402d17 	ldw	r5,180(sp)
    50a8:	18c00017 	ldw	r3,0(r3)
    50ac:	21000117 	ldw	r4,4(r4)
    50b0:	29400204 	addi	r5,r5,8
    50b4:	d8c03615 	stw	r3,216(sp)
    50b8:	d9003815 	stw	r4,224(sp)
    50bc:	d9402d15 	stw	r5,180(sp)
    50c0:	d9003617 	ldw	r4,216(sp)
    50c4:	d9403817 	ldw	r5,224(sp)
    50c8:	da003d15 	stw	r8,244(sp)
    50cc:	04000044 	movi	r16,1
    50d0:	000b1780 	call	b178 <__fpclassifyd>
    50d4:	da003d17 	ldw	r8,244(sp)
    50d8:	14041f1e 	bne	r2,r16,6158 <___vfprintf_internal_r+0x1684>
    50dc:	d9003617 	ldw	r4,216(sp)
    50e0:	d9403817 	ldw	r5,224(sp)
    50e4:	000d883a 	mov	r6,zero
    50e8:	000f883a 	mov	r7,zero
    50ec:	00113500 	call	11350 <__ledf2>
    50f0:	da003d17 	ldw	r8,244(sp)
    50f4:	1005be16 	blt	r2,zero,67f0 <___vfprintf_internal_r+0x1d1c>
    50f8:	df002783 	ldbu	fp,158(sp)
    50fc:	008011c4 	movi	r2,71
    5100:	1445330e 	bge	r2,r17,65d0 <___vfprintf_internal_r+0x1afc>
    5104:	040000b4 	movhi	r16,2
    5108:	843d5a04 	addi	r16,r16,-2712
    510c:	00c000c4 	movi	r3,3
    5110:	00bfdfc4 	movi	r2,-129
    5114:	d8c02a15 	stw	r3,168(sp)
    5118:	90a4703a 	and	r18,r18,r2
    511c:	d8c02e15 	stw	r3,184(sp)
    5120:	d8002915 	stw	zero,164(sp)
    5124:	d8003215 	stw	zero,200(sp)
    5128:	00003706 	br	5208 <___vfprintf_internal_r+0x734>
    512c:	94800214 	ori	r18,r18,8
    5130:	ac400007 	ldb	r17,0(r21)
    5134:	003ec806 	br	4c58 <___vfprintf_internal_r+0x184>
    5138:	18c03fcc 	andi	r3,r3,255
    513c:	1806db1e 	bne	r3,zero,6cac <___vfprintf_internal_r+0x21d8>
    5140:	94800414 	ori	r18,r18,16
    5144:	9080080c 	andi	r2,r18,32
    5148:	1002d826 	beq	r2,zero,5cac <___vfprintf_internal_r+0x11d8>
    514c:	d9402d17 	ldw	r5,180(sp)
    5150:	d8c02917 	ldw	r3,164(sp)
    5154:	d8002785 	stb	zero,158(sp)
    5158:	28800204 	addi	r2,r5,8
    515c:	2cc00017 	ldw	r19,0(r5)
    5160:	2d800117 	ldw	r22,4(r5)
    5164:	18048f16 	blt	r3,zero,63a4 <___vfprintf_internal_r+0x18d0>
    5168:	013fdfc4 	movi	r4,-129
    516c:	9d86b03a 	or	r3,r19,r22
    5170:	d8802d15 	stw	r2,180(sp)
    5174:	9124703a 	and	r18,r18,r4
    5178:	1802d91e 	bne	r3,zero,5ce0 <___vfprintf_internal_r+0x120c>
    517c:	d8c02917 	ldw	r3,164(sp)
    5180:	0039883a 	mov	fp,zero
    5184:	1805c326 	beq	r3,zero,6894 <___vfprintf_internal_r+0x1dc0>
    5188:	0027883a 	mov	r19,zero
    518c:	002d883a 	mov	r22,zero
    5190:	dc001e04 	addi	r16,sp,120
    5194:	9806d0fa 	srli	r3,r19,3
    5198:	b008977a 	slli	r4,r22,29
    519c:	b02cd0fa 	srli	r22,r22,3
    51a0:	9cc001cc 	andi	r19,r19,7
    51a4:	98800c04 	addi	r2,r19,48
    51a8:	843fffc4 	addi	r16,r16,-1
    51ac:	20e6b03a 	or	r19,r4,r3
    51b0:	80800005 	stb	r2,0(r16)
    51b4:	9d86b03a 	or	r3,r19,r22
    51b8:	183ff61e 	bne	r3,zero,5194 <___vfprintf_internal_r+0x6c0>
    51bc:	90c0004c 	andi	r3,r18,1
    51c0:	18013b26 	beq	r3,zero,56b0 <___vfprintf_internal_r+0xbdc>
    51c4:	10803fcc 	andi	r2,r2,255
    51c8:	1080201c 	xori	r2,r2,128
    51cc:	10bfe004 	addi	r2,r2,-128
    51d0:	00c00c04 	movi	r3,48
    51d4:	10c13626 	beq	r2,r3,56b0 <___vfprintf_internal_r+0xbdc>
    51d8:	80ffffc5 	stb	r3,-1(r16)
    51dc:	d8c02817 	ldw	r3,160(sp)
    51e0:	80bfffc4 	addi	r2,r16,-1
    51e4:	1021883a 	mov	r16,r2
    51e8:	1887c83a 	sub	r3,r3,r2
    51ec:	d8c02e15 	stw	r3,184(sp)
    51f0:	d8802e17 	ldw	r2,184(sp)
    51f4:	d9002917 	ldw	r4,164(sp)
    51f8:	1100010e 	bge	r2,r4,5200 <___vfprintf_internal_r+0x72c>
    51fc:	2005883a 	mov	r2,r4
    5200:	d8802a15 	stw	r2,168(sp)
    5204:	d8003215 	stw	zero,200(sp)
    5208:	e7003fcc 	andi	fp,fp,255
    520c:	e700201c 	xori	fp,fp,128
    5210:	e73fe004 	addi	fp,fp,-128
    5214:	e0000326 	beq	fp,zero,5224 <___vfprintf_internal_r+0x750>
    5218:	d8c02a17 	ldw	r3,168(sp)
    521c:	18c00044 	addi	r3,r3,1
    5220:	d8c02a15 	stw	r3,168(sp)
    5224:	90c0008c 	andi	r3,r18,2
    5228:	d8c02b15 	stw	r3,172(sp)
    522c:	18000326 	beq	r3,zero,523c <___vfprintf_internal_r+0x768>
    5230:	d8c02a17 	ldw	r3,168(sp)
    5234:	18c00084 	addi	r3,r3,2
    5238:	d8c02a15 	stw	r3,168(sp)
    523c:	90c0210c 	andi	r3,r18,132
    5240:	d8c03015 	stw	r3,192(sp)
    5244:	1801a31e 	bne	r3,zero,58d4 <___vfprintf_internal_r+0xe00>
    5248:	d9003117 	ldw	r4,196(sp)
    524c:	d8c02a17 	ldw	r3,168(sp)
    5250:	20e7c83a 	sub	r19,r4,r3
    5254:	04c19f0e 	bge	zero,r19,58d4 <___vfprintf_internal_r+0xe00>
    5258:	02400404 	movi	r9,16
    525c:	d8c02017 	ldw	r3,128(sp)
    5260:	d8801f17 	ldw	r2,124(sp)
    5264:	4cc50d0e 	bge	r9,r19,669c <___vfprintf_internal_r+0x1bc8>
    5268:	014000b4 	movhi	r5,2
    526c:	297d7584 	addi	r5,r5,-2602
    5270:	dc403b15 	stw	r17,236(sp)
    5274:	d9403515 	stw	r5,212(sp)
    5278:	9823883a 	mov	r17,r19
    527c:	482d883a 	mov	r22,r9
    5280:	9027883a 	mov	r19,r18
    5284:	070001c4 	movi	fp,7
    5288:	8025883a 	mov	r18,r16
    528c:	dc002c17 	ldw	r16,176(sp)
    5290:	00000306 	br	52a0 <___vfprintf_internal_r+0x7cc>
    5294:	8c7ffc04 	addi	r17,r17,-16
    5298:	42000204 	addi	r8,r8,8
    529c:	b440130e 	bge	r22,r17,52ec <___vfprintf_internal_r+0x818>
    52a0:	010000b4 	movhi	r4,2
    52a4:	18c00404 	addi	r3,r3,16
    52a8:	10800044 	addi	r2,r2,1
    52ac:	213d7584 	addi	r4,r4,-2602
    52b0:	41000015 	stw	r4,0(r8)
    52b4:	45800115 	stw	r22,4(r8)
    52b8:	d8c02015 	stw	r3,128(sp)
    52bc:	d8801f15 	stw	r2,124(sp)
    52c0:	e0bff40e 	bge	fp,r2,5294 <___vfprintf_internal_r+0x7c0>
    52c4:	d9801e04 	addi	r6,sp,120
    52c8:	b80b883a 	mov	r5,r23
    52cc:	8009883a 	mov	r4,r16
    52d0:	000c9f80 	call	c9f8 <__sprint_r>
    52d4:	103f011e 	bne	r2,zero,4edc <___vfprintf_internal_r+0x408>
    52d8:	8c7ffc04 	addi	r17,r17,-16
    52dc:	d8c02017 	ldw	r3,128(sp)
    52e0:	d8801f17 	ldw	r2,124(sp)
    52e4:	da000404 	addi	r8,sp,16
    52e8:	b47fed16 	blt	r22,r17,52a0 <___vfprintf_internal_r+0x7cc>
    52ec:	9021883a 	mov	r16,r18
    52f0:	9825883a 	mov	r18,r19
    52f4:	8827883a 	mov	r19,r17
    52f8:	dc403b17 	ldw	r17,236(sp)
    52fc:	d9403517 	ldw	r5,212(sp)
    5300:	98c7883a 	add	r3,r19,r3
    5304:	10800044 	addi	r2,r2,1
    5308:	41400015 	stw	r5,0(r8)
    530c:	44c00115 	stw	r19,4(r8)
    5310:	d8c02015 	stw	r3,128(sp)
    5314:	d8801f15 	stw	r2,124(sp)
    5318:	010001c4 	movi	r4,7
    531c:	2082a316 	blt	r4,r2,5dac <___vfprintf_internal_r+0x12d8>
    5320:	df002787 	ldb	fp,158(sp)
    5324:	42000204 	addi	r8,r8,8
    5328:	e0000c26 	beq	fp,zero,535c <___vfprintf_internal_r+0x888>
    532c:	d8801f17 	ldw	r2,124(sp)
    5330:	d9002784 	addi	r4,sp,158
    5334:	18c00044 	addi	r3,r3,1
    5338:	10800044 	addi	r2,r2,1
    533c:	41000015 	stw	r4,0(r8)
    5340:	01000044 	movi	r4,1
    5344:	41000115 	stw	r4,4(r8)
    5348:	d8c02015 	stw	r3,128(sp)
    534c:	d8801f15 	stw	r2,124(sp)
    5350:	010001c4 	movi	r4,7
    5354:	20823c16 	blt	r4,r2,5c48 <___vfprintf_internal_r+0x1174>
    5358:	42000204 	addi	r8,r8,8
    535c:	d8802b17 	ldw	r2,172(sp)
    5360:	10000c26 	beq	r2,zero,5394 <___vfprintf_internal_r+0x8c0>
    5364:	d8801f17 	ldw	r2,124(sp)
    5368:	d9002704 	addi	r4,sp,156
    536c:	18c00084 	addi	r3,r3,2
    5370:	10800044 	addi	r2,r2,1
    5374:	41000015 	stw	r4,0(r8)
    5378:	01000084 	movi	r4,2
    537c:	41000115 	stw	r4,4(r8)
    5380:	d8c02015 	stw	r3,128(sp)
    5384:	d8801f15 	stw	r2,124(sp)
    5388:	010001c4 	movi	r4,7
    538c:	20823616 	blt	r4,r2,5c68 <___vfprintf_internal_r+0x1194>
    5390:	42000204 	addi	r8,r8,8
    5394:	d9003017 	ldw	r4,192(sp)
    5398:	00802004 	movi	r2,128
    539c:	20819926 	beq	r4,r2,5a04 <___vfprintf_internal_r+0xf30>
    53a0:	d9402917 	ldw	r5,164(sp)
    53a4:	d8802e17 	ldw	r2,184(sp)
    53a8:	28adc83a 	sub	r22,r5,r2
    53ac:	0580310e 	bge	zero,r22,5474 <___vfprintf_internal_r+0x9a0>
    53b0:	07000404 	movi	fp,16
    53b4:	d8801f17 	ldw	r2,124(sp)
    53b8:	e584140e 	bge	fp,r22,640c <___vfprintf_internal_r+0x1938>
    53bc:	014000b4 	movhi	r5,2
    53c0:	297d7184 	addi	r5,r5,-2618
    53c4:	dc402915 	stw	r17,164(sp)
    53c8:	d9402b15 	stw	r5,172(sp)
    53cc:	b023883a 	mov	r17,r22
    53d0:	04c001c4 	movi	r19,7
    53d4:	a82d883a 	mov	r22,r21
    53d8:	902b883a 	mov	r21,r18
    53dc:	8025883a 	mov	r18,r16
    53e0:	dc002c17 	ldw	r16,176(sp)
    53e4:	00000306 	br	53f4 <___vfprintf_internal_r+0x920>
    53e8:	8c7ffc04 	addi	r17,r17,-16
    53ec:	42000204 	addi	r8,r8,8
    53f0:	e440110e 	bge	fp,r17,5438 <___vfprintf_internal_r+0x964>
    53f4:	18c00404 	addi	r3,r3,16
    53f8:	10800044 	addi	r2,r2,1
    53fc:	45000015 	stw	r20,0(r8)
    5400:	47000115 	stw	fp,4(r8)
    5404:	d8c02015 	stw	r3,128(sp)
    5408:	d8801f15 	stw	r2,124(sp)
    540c:	98bff60e 	bge	r19,r2,53e8 <___vfprintf_internal_r+0x914>
    5410:	d9801e04 	addi	r6,sp,120
    5414:	b80b883a 	mov	r5,r23
    5418:	8009883a 	mov	r4,r16
    541c:	000c9f80 	call	c9f8 <__sprint_r>
    5420:	103eae1e 	bne	r2,zero,4edc <___vfprintf_internal_r+0x408>
    5424:	8c7ffc04 	addi	r17,r17,-16
    5428:	d8c02017 	ldw	r3,128(sp)
    542c:	d8801f17 	ldw	r2,124(sp)
    5430:	da000404 	addi	r8,sp,16
    5434:	e47fef16 	blt	fp,r17,53f4 <___vfprintf_internal_r+0x920>
    5438:	9021883a 	mov	r16,r18
    543c:	a825883a 	mov	r18,r21
    5440:	b02b883a 	mov	r21,r22
    5444:	882d883a 	mov	r22,r17
    5448:	dc402917 	ldw	r17,164(sp)
    544c:	d9002b17 	ldw	r4,172(sp)
    5450:	1d87883a 	add	r3,r3,r22
    5454:	10800044 	addi	r2,r2,1
    5458:	41000015 	stw	r4,0(r8)
    545c:	45800115 	stw	r22,4(r8)
    5460:	d8c02015 	stw	r3,128(sp)
    5464:	d8801f15 	stw	r2,124(sp)
    5468:	010001c4 	movi	r4,7
    546c:	2081ee16 	blt	r4,r2,5c28 <___vfprintf_internal_r+0x1154>
    5470:	42000204 	addi	r8,r8,8
    5474:	9080400c 	andi	r2,r18,256
    5478:	1001181e 	bne	r2,zero,58dc <___vfprintf_internal_r+0xe08>
    547c:	d9402e17 	ldw	r5,184(sp)
    5480:	d8801f17 	ldw	r2,124(sp)
    5484:	44000015 	stw	r16,0(r8)
    5488:	1947883a 	add	r3,r3,r5
    548c:	10800044 	addi	r2,r2,1
    5490:	41400115 	stw	r5,4(r8)
    5494:	d8c02015 	stw	r3,128(sp)
    5498:	d8801f15 	stw	r2,124(sp)
    549c:	010001c4 	movi	r4,7
    54a0:	2081d316 	blt	r4,r2,5bf0 <___vfprintf_internal_r+0x111c>
    54a4:	42000204 	addi	r8,r8,8
    54a8:	9480010c 	andi	r18,r18,4
    54ac:	90003226 	beq	r18,zero,5578 <___vfprintf_internal_r+0xaa4>
    54b0:	d9403117 	ldw	r5,196(sp)
    54b4:	d8802a17 	ldw	r2,168(sp)
    54b8:	28a1c83a 	sub	r16,r5,r2
    54bc:	04002e0e 	bge	zero,r16,5578 <___vfprintf_internal_r+0xaa4>
    54c0:	04400404 	movi	r17,16
    54c4:	d8801f17 	ldw	r2,124(sp)
    54c8:	8c04a20e 	bge	r17,r16,6754 <___vfprintf_internal_r+0x1c80>
    54cc:	014000b4 	movhi	r5,2
    54d0:	297d7584 	addi	r5,r5,-2602
    54d4:	d9403515 	stw	r5,212(sp)
    54d8:	048001c4 	movi	r18,7
    54dc:	dcc02c17 	ldw	r19,176(sp)
    54e0:	00000306 	br	54f0 <___vfprintf_internal_r+0xa1c>
    54e4:	843ffc04 	addi	r16,r16,-16
    54e8:	42000204 	addi	r8,r8,8
    54ec:	8c00130e 	bge	r17,r16,553c <___vfprintf_internal_r+0xa68>
    54f0:	010000b4 	movhi	r4,2
    54f4:	18c00404 	addi	r3,r3,16
    54f8:	10800044 	addi	r2,r2,1
    54fc:	213d7584 	addi	r4,r4,-2602
    5500:	41000015 	stw	r4,0(r8)
    5504:	44400115 	stw	r17,4(r8)
    5508:	d8c02015 	stw	r3,128(sp)
    550c:	d8801f15 	stw	r2,124(sp)
    5510:	90bff40e 	bge	r18,r2,54e4 <___vfprintf_internal_r+0xa10>
    5514:	d9801e04 	addi	r6,sp,120
    5518:	b80b883a 	mov	r5,r23
    551c:	9809883a 	mov	r4,r19
    5520:	000c9f80 	call	c9f8 <__sprint_r>
    5524:	103e6d1e 	bne	r2,zero,4edc <___vfprintf_internal_r+0x408>
    5528:	843ffc04 	addi	r16,r16,-16
    552c:	d8c02017 	ldw	r3,128(sp)
    5530:	d8801f17 	ldw	r2,124(sp)
    5534:	da000404 	addi	r8,sp,16
    5538:	8c3fed16 	blt	r17,r16,54f0 <___vfprintf_internal_r+0xa1c>
    553c:	d9403517 	ldw	r5,212(sp)
    5540:	1c07883a 	add	r3,r3,r16
    5544:	10800044 	addi	r2,r2,1
    5548:	41400015 	stw	r5,0(r8)
    554c:	44000115 	stw	r16,4(r8)
    5550:	d8c02015 	stw	r3,128(sp)
    5554:	d8801f15 	stw	r2,124(sp)
    5558:	010001c4 	movi	r4,7
    555c:	2080060e 	bge	r4,r2,5578 <___vfprintf_internal_r+0xaa4>
    5560:	d9002c17 	ldw	r4,176(sp)
    5564:	d9801e04 	addi	r6,sp,120
    5568:	b80b883a 	mov	r5,r23
    556c:	000c9f80 	call	c9f8 <__sprint_r>
    5570:	103e5a1e 	bne	r2,zero,4edc <___vfprintf_internal_r+0x408>
    5574:	d8c02017 	ldw	r3,128(sp)
    5578:	d8803117 	ldw	r2,196(sp)
    557c:	d9002a17 	ldw	r4,168(sp)
    5580:	1100010e 	bge	r2,r4,5588 <___vfprintf_internal_r+0xab4>
    5584:	2005883a 	mov	r2,r4
    5588:	d9402f17 	ldw	r5,188(sp)
    558c:	288b883a 	add	r5,r5,r2
    5590:	d9402f15 	stw	r5,188(sp)
    5594:	18019e1e 	bne	r3,zero,5c10 <___vfprintf_internal_r+0x113c>
    5598:	a8800007 	ldb	r2,0(r21)
    559c:	d8001f15 	stw	zero,124(sp)
    55a0:	da000404 	addi	r8,sp,16
    55a4:	103d851e 	bne	r2,zero,4bbc <___vfprintf_internal_r+0xe8>
    55a8:	a821883a 	mov	r16,r21
    55ac:	003d9b06 	br	4c1c <___vfprintf_internal_r+0x148>
    55b0:	18c03fcc 	andi	r3,r3,255
    55b4:	1805c11e 	bne	r3,zero,6cbc <___vfprintf_internal_r+0x21e8>
    55b8:	94800414 	ori	r18,r18,16
    55bc:	9080080c 	andi	r2,r18,32
    55c0:	10020c26 	beq	r2,zero,5df4 <___vfprintf_internal_r+0x1320>
    55c4:	d8802d17 	ldw	r2,180(sp)
    55c8:	d9002917 	ldw	r4,164(sp)
    55cc:	d8002785 	stb	zero,158(sp)
    55d0:	10c00204 	addi	r3,r2,8
    55d4:	14c00017 	ldw	r19,0(r2)
    55d8:	15800117 	ldw	r22,4(r2)
    55dc:	20040f16 	blt	r4,zero,661c <___vfprintf_internal_r+0x1b48>
    55e0:	013fdfc4 	movi	r4,-129
    55e4:	9d84b03a 	or	r2,r19,r22
    55e8:	d8c02d15 	stw	r3,180(sp)
    55ec:	9124703a 	and	r18,r18,r4
    55f0:	0039883a 	mov	fp,zero
    55f4:	103e891e 	bne	r2,zero,501c <___vfprintf_internal_r+0x548>
    55f8:	d9002917 	ldw	r4,164(sp)
    55fc:	2002c11e 	bne	r4,zero,6104 <___vfprintf_internal_r+0x1630>
    5600:	d8002915 	stw	zero,164(sp)
    5604:	d8002e15 	stw	zero,184(sp)
    5608:	dc001e04 	addi	r16,sp,120
    560c:	003ef806 	br	51f0 <___vfprintf_internal_r+0x71c>
    5610:	18c03fcc 	andi	r3,r3,255
    5614:	18059d1e 	bne	r3,zero,6c8c <___vfprintf_internal_r+0x21b8>
    5618:	014000b4 	movhi	r5,2
    561c:	297d5d04 	addi	r5,r5,-2700
    5620:	d9403915 	stw	r5,228(sp)
    5624:	9080080c 	andi	r2,r18,32
    5628:	10005226 	beq	r2,zero,5774 <___vfprintf_internal_r+0xca0>
    562c:	d8802d17 	ldw	r2,180(sp)
    5630:	14c00017 	ldw	r19,0(r2)
    5634:	15800117 	ldw	r22,4(r2)
    5638:	10800204 	addi	r2,r2,8
    563c:	d8802d15 	stw	r2,180(sp)
    5640:	9080004c 	andi	r2,r18,1
    5644:	10019026 	beq	r2,zero,5c88 <___vfprintf_internal_r+0x11b4>
    5648:	9d84b03a 	or	r2,r19,r22
    564c:	10036926 	beq	r2,zero,63f4 <___vfprintf_internal_r+0x1920>
    5650:	d8c02917 	ldw	r3,164(sp)
    5654:	00800c04 	movi	r2,48
    5658:	d8802705 	stb	r2,156(sp)
    565c:	dc402745 	stb	r17,157(sp)
    5660:	d8002785 	stb	zero,158(sp)
    5664:	90800094 	ori	r2,r18,2
    5668:	18045d16 	blt	r3,zero,67e0 <___vfprintf_internal_r+0x1d0c>
    566c:	00bfdfc4 	movi	r2,-129
    5670:	90a4703a 	and	r18,r18,r2
    5674:	94800094 	ori	r18,r18,2
    5678:	0039883a 	mov	fp,zero
    567c:	d9003917 	ldw	r4,228(sp)
    5680:	dc001e04 	addi	r16,sp,120
    5684:	988003cc 	andi	r2,r19,15
    5688:	b006973a 	slli	r3,r22,28
    568c:	2085883a 	add	r2,r4,r2
    5690:	9826d13a 	srli	r19,r19,4
    5694:	10800003 	ldbu	r2,0(r2)
    5698:	b02cd13a 	srli	r22,r22,4
    569c:	843fffc4 	addi	r16,r16,-1
    56a0:	1ce6b03a 	or	r19,r3,r19
    56a4:	80800005 	stb	r2,0(r16)
    56a8:	9d84b03a 	or	r2,r19,r22
    56ac:	103ff51e 	bne	r2,zero,5684 <___vfprintf_internal_r+0xbb0>
    56b0:	d8c02817 	ldw	r3,160(sp)
    56b4:	1c07c83a 	sub	r3,r3,r16
    56b8:	d8c02e15 	stw	r3,184(sp)
    56bc:	003ecc06 	br	51f0 <___vfprintf_internal_r+0x71c>
    56c0:	18c03fcc 	andi	r3,r3,255
    56c4:	183e9f26 	beq	r3,zero,5144 <___vfprintf_internal_r+0x670>
    56c8:	d9c02785 	stb	r7,158(sp)
    56cc:	003e9d06 	br	5144 <___vfprintf_internal_r+0x670>
    56d0:	00c00044 	movi	r3,1
    56d4:	01c00ac4 	movi	r7,43
    56d8:	ac400007 	ldb	r17,0(r21)
    56dc:	003d5e06 	br	4c58 <___vfprintf_internal_r+0x184>
    56e0:	94800814 	ori	r18,r18,32
    56e4:	ac400007 	ldb	r17,0(r21)
    56e8:	003d5b06 	br	4c58 <___vfprintf_internal_r+0x184>
    56ec:	d8c02d17 	ldw	r3,180(sp)
    56f0:	d8002785 	stb	zero,158(sp)
    56f4:	1c000017 	ldw	r16,0(r3)
    56f8:	1cc00104 	addi	r19,r3,4
    56fc:	80041926 	beq	r16,zero,6764 <___vfprintf_internal_r+0x1c90>
    5700:	d9002917 	ldw	r4,164(sp)
    5704:	2003d016 	blt	r4,zero,6648 <___vfprintf_internal_r+0x1b74>
    5708:	200d883a 	mov	r6,r4
    570c:	000b883a 	mov	r5,zero
    5710:	8009883a 	mov	r4,r16
    5714:	da003d15 	stw	r8,244(sp)
    5718:	0009e280 	call	9e28 <memchr>
    571c:	da003d17 	ldw	r8,244(sp)
    5720:	10045426 	beq	r2,zero,6874 <___vfprintf_internal_r+0x1da0>
    5724:	1405c83a 	sub	r2,r2,r16
    5728:	d8802e15 	stw	r2,184(sp)
    572c:	1003cc16 	blt	r2,zero,6660 <___vfprintf_internal_r+0x1b8c>
    5730:	df002783 	ldbu	fp,158(sp)
    5734:	d8802a15 	stw	r2,168(sp)
    5738:	dcc02d15 	stw	r19,180(sp)
    573c:	d8002915 	stw	zero,164(sp)
    5740:	d8003215 	stw	zero,200(sp)
    5744:	003eb006 	br	5208 <___vfprintf_internal_r+0x734>
    5748:	18c03fcc 	andi	r3,r3,255
    574c:	183f9b26 	beq	r3,zero,55bc <___vfprintf_internal_r+0xae8>
    5750:	d9c02785 	stb	r7,158(sp)
    5754:	003f9906 	br	55bc <___vfprintf_internal_r+0xae8>
    5758:	18c03fcc 	andi	r3,r3,255
    575c:	1805551e 	bne	r3,zero,6cb4 <___vfprintf_internal_r+0x21e0>
    5760:	014000b4 	movhi	r5,2
    5764:	297d6204 	addi	r5,r5,-2680
    5768:	d9403915 	stw	r5,228(sp)
    576c:	9080080c 	andi	r2,r18,32
    5770:	103fae1e 	bne	r2,zero,562c <___vfprintf_internal_r+0xb58>
    5774:	9080040c 	andi	r2,r18,16
    5778:	1002de26 	beq	r2,zero,62f4 <___vfprintf_internal_r+0x1820>
    577c:	d8c02d17 	ldw	r3,180(sp)
    5780:	002d883a 	mov	r22,zero
    5784:	1cc00017 	ldw	r19,0(r3)
    5788:	18c00104 	addi	r3,r3,4
    578c:	d8c02d15 	stw	r3,180(sp)
    5790:	003fab06 	br	5640 <___vfprintf_internal_r+0xb6c>
    5794:	38803fcc 	andi	r2,r7,255
    5798:	1080201c 	xori	r2,r2,128
    579c:	10bfe004 	addi	r2,r2,-128
    57a0:	1002d21e 	bne	r2,zero,62ec <___vfprintf_internal_r+0x1818>
    57a4:	00c00044 	movi	r3,1
    57a8:	01c00804 	movi	r7,32
    57ac:	ac400007 	ldb	r17,0(r21)
    57b0:	003d2906 	br	4c58 <___vfprintf_internal_r+0x184>
    57b4:	94800054 	ori	r18,r18,1
    57b8:	ac400007 	ldb	r17,0(r21)
    57bc:	003d2606 	br	4c58 <___vfprintf_internal_r+0x184>
    57c0:	18c03fcc 	andi	r3,r3,255
    57c4:	183e0526 	beq	r3,zero,4fdc <___vfprintf_internal_r+0x508>
    57c8:	d9c02785 	stb	r7,158(sp)
    57cc:	003e0306 	br	4fdc <___vfprintf_internal_r+0x508>
    57d0:	94801014 	ori	r18,r18,64
    57d4:	ac400007 	ldb	r17,0(r21)
    57d8:	003d1f06 	br	4c58 <___vfprintf_internal_r+0x184>
    57dc:	ac400007 	ldb	r17,0(r21)
    57e0:	8a438726 	beq	r17,r9,6600 <___vfprintf_internal_r+0x1b2c>
    57e4:	94800414 	ori	r18,r18,16
    57e8:	003d1b06 	br	4c58 <___vfprintf_internal_r+0x184>
    57ec:	18c03fcc 	andi	r3,r3,255
    57f0:	1805341e 	bne	r3,zero,6cc4 <___vfprintf_internal_r+0x21f0>
    57f4:	9080080c 	andi	r2,r18,32
    57f8:	1002cd26 	beq	r2,zero,6330 <___vfprintf_internal_r+0x185c>
    57fc:	d9402d17 	ldw	r5,180(sp)
    5800:	d9002f17 	ldw	r4,188(sp)
    5804:	28800017 	ldw	r2,0(r5)
    5808:	2007d7fa 	srai	r3,r4,31
    580c:	29400104 	addi	r5,r5,4
    5810:	d9402d15 	stw	r5,180(sp)
    5814:	11000015 	stw	r4,0(r2)
    5818:	10c00115 	stw	r3,4(r2)
    581c:	003ce506 	br	4bb4 <___vfprintf_internal_r+0xe0>
    5820:	d8c02d17 	ldw	r3,180(sp)
    5824:	d9002d17 	ldw	r4,180(sp)
    5828:	d8002785 	stb	zero,158(sp)
    582c:	18800017 	ldw	r2,0(r3)
    5830:	21000104 	addi	r4,r4,4
    5834:	00c00044 	movi	r3,1
    5838:	d8c02a15 	stw	r3,168(sp)
    583c:	d8801405 	stb	r2,80(sp)
    5840:	d9002d15 	stw	r4,180(sp)
    5844:	d8c02e15 	stw	r3,184(sp)
    5848:	d8002915 	stw	zero,164(sp)
    584c:	d8003215 	stw	zero,200(sp)
    5850:	dc001404 	addi	r16,sp,80
    5854:	0039883a 	mov	fp,zero
    5858:	003e7206 	br	5224 <___vfprintf_internal_r+0x750>
    585c:	010000b4 	movhi	r4,2
    5860:	213d6204 	addi	r4,r4,-2680
    5864:	0039883a 	mov	fp,zero
    5868:	d9003915 	stw	r4,228(sp)
    586c:	04401e04 	movi	r17,120
    5870:	003f8206 	br	567c <___vfprintf_internal_r+0xba8>
    5874:	18c03fcc 	andi	r3,r3,255
    5878:	1805061e 	bne	r3,zero,6c94 <___vfprintf_internal_r+0x21c0>
    587c:	883d9126 	beq	r17,zero,4ec4 <___vfprintf_internal_r+0x3f0>
    5880:	00c00044 	movi	r3,1
    5884:	d8c02a15 	stw	r3,168(sp)
    5888:	dc401405 	stb	r17,80(sp)
    588c:	d8002785 	stb	zero,158(sp)
    5890:	003fec06 	br	5844 <___vfprintf_internal_r+0xd70>
    5894:	014000b4 	movhi	r5,2
    5898:	297d6204 	addi	r5,r5,-2680
    589c:	d9403915 	stw	r5,228(sp)
    58a0:	d8c02d15 	stw	r3,180(sp)
    58a4:	1025883a 	mov	r18,r2
    58a8:	04401e04 	movi	r17,120
    58ac:	9d84b03a 	or	r2,r19,r22
    58b0:	1000fc1e 	bne	r2,zero,5ca4 <___vfprintf_internal_r+0x11d0>
    58b4:	0039883a 	mov	fp,zero
    58b8:	00800084 	movi	r2,2
    58bc:	10803fcc 	andi	r2,r2,255
    58c0:	00c00044 	movi	r3,1
    58c4:	10c20f26 	beq	r2,r3,6104 <___vfprintf_internal_r+0x1630>
    58c8:	00c00084 	movi	r3,2
    58cc:	10fd6326 	beq	r2,r3,4e5c <___vfprintf_internal_r+0x388>
    58d0:	003e2d06 	br	5188 <___vfprintf_internal_r+0x6b4>
    58d4:	d8c02017 	ldw	r3,128(sp)
    58d8:	003e9306 	br	5328 <___vfprintf_internal_r+0x854>
    58dc:	00801944 	movi	r2,101
    58e0:	14407e0e 	bge	r2,r17,5adc <___vfprintf_internal_r+0x1008>
    58e4:	d9003617 	ldw	r4,216(sp)
    58e8:	d9403817 	ldw	r5,224(sp)
    58ec:	000d883a 	mov	r6,zero
    58f0:	000f883a 	mov	r7,zero
    58f4:	d8c03c15 	stw	r3,240(sp)
    58f8:	da003d15 	stw	r8,244(sp)
    58fc:	00111ec0 	call	111ec <__eqdf2>
    5900:	d8c03c17 	ldw	r3,240(sp)
    5904:	da003d17 	ldw	r8,244(sp)
    5908:	1000f71e 	bne	r2,zero,5ce8 <___vfprintf_internal_r+0x1214>
    590c:	d8801f17 	ldw	r2,124(sp)
    5910:	010000b4 	movhi	r4,2
    5914:	213d6904 	addi	r4,r4,-2652
    5918:	18c00044 	addi	r3,r3,1
    591c:	10800044 	addi	r2,r2,1
    5920:	41000015 	stw	r4,0(r8)
    5924:	01000044 	movi	r4,1
    5928:	41000115 	stw	r4,4(r8)
    592c:	d8c02015 	stw	r3,128(sp)
    5930:	d8801f15 	stw	r2,124(sp)
    5934:	010001c4 	movi	r4,7
    5938:	2082b816 	blt	r4,r2,641c <___vfprintf_internal_r+0x1948>
    593c:	42000204 	addi	r8,r8,8
    5940:	d8802617 	ldw	r2,152(sp)
    5944:	d9403317 	ldw	r5,204(sp)
    5948:	11400216 	blt	r2,r5,5954 <___vfprintf_internal_r+0xe80>
    594c:	9080004c 	andi	r2,r18,1
    5950:	103ed526 	beq	r2,zero,54a8 <___vfprintf_internal_r+0x9d4>
    5954:	d8803717 	ldw	r2,220(sp)
    5958:	d9003417 	ldw	r4,208(sp)
    595c:	d9403717 	ldw	r5,220(sp)
    5960:	1887883a 	add	r3,r3,r2
    5964:	d8801f17 	ldw	r2,124(sp)
    5968:	41000015 	stw	r4,0(r8)
    596c:	41400115 	stw	r5,4(r8)
    5970:	10800044 	addi	r2,r2,1
    5974:	d8c02015 	stw	r3,128(sp)
    5978:	d8801f15 	stw	r2,124(sp)
    597c:	010001c4 	movi	r4,7
    5980:	20832916 	blt	r4,r2,6628 <___vfprintf_internal_r+0x1b54>
    5984:	42000204 	addi	r8,r8,8
    5988:	d8803317 	ldw	r2,204(sp)
    598c:	143fffc4 	addi	r16,r2,-1
    5990:	043ec50e 	bge	zero,r16,54a8 <___vfprintf_internal_r+0x9d4>
    5994:	04400404 	movi	r17,16
    5998:	d8801f17 	ldw	r2,124(sp)
    599c:	8c00880e 	bge	r17,r16,5bc0 <___vfprintf_internal_r+0x10ec>
    59a0:	014000b4 	movhi	r5,2
    59a4:	297d7184 	addi	r5,r5,-2618
    59a8:	d9402b15 	stw	r5,172(sp)
    59ac:	058001c4 	movi	r22,7
    59b0:	dcc02c17 	ldw	r19,176(sp)
    59b4:	00000306 	br	59c4 <___vfprintf_internal_r+0xef0>
    59b8:	42000204 	addi	r8,r8,8
    59bc:	843ffc04 	addi	r16,r16,-16
    59c0:	8c00820e 	bge	r17,r16,5bcc <___vfprintf_internal_r+0x10f8>
    59c4:	18c00404 	addi	r3,r3,16
    59c8:	10800044 	addi	r2,r2,1
    59cc:	45000015 	stw	r20,0(r8)
    59d0:	44400115 	stw	r17,4(r8)
    59d4:	d8c02015 	stw	r3,128(sp)
    59d8:	d8801f15 	stw	r2,124(sp)
    59dc:	b0bff60e 	bge	r22,r2,59b8 <___vfprintf_internal_r+0xee4>
    59e0:	d9801e04 	addi	r6,sp,120
    59e4:	b80b883a 	mov	r5,r23
    59e8:	9809883a 	mov	r4,r19
    59ec:	000c9f80 	call	c9f8 <__sprint_r>
    59f0:	103d3a1e 	bne	r2,zero,4edc <___vfprintf_internal_r+0x408>
    59f4:	d8c02017 	ldw	r3,128(sp)
    59f8:	d8801f17 	ldw	r2,124(sp)
    59fc:	da000404 	addi	r8,sp,16
    5a00:	003fee06 	br	59bc <___vfprintf_internal_r+0xee8>
    5a04:	d9403117 	ldw	r5,196(sp)
    5a08:	d8802a17 	ldw	r2,168(sp)
    5a0c:	28adc83a 	sub	r22,r5,r2
    5a10:	05be630e 	bge	zero,r22,53a0 <___vfprintf_internal_r+0x8cc>
    5a14:	07000404 	movi	fp,16
    5a18:	d8801f17 	ldw	r2,124(sp)
    5a1c:	e5838f0e 	bge	fp,r22,685c <___vfprintf_internal_r+0x1d88>
    5a20:	014000b4 	movhi	r5,2
    5a24:	297d7184 	addi	r5,r5,-2618
    5a28:	dc403015 	stw	r17,192(sp)
    5a2c:	d9402b15 	stw	r5,172(sp)
    5a30:	b023883a 	mov	r17,r22
    5a34:	04c001c4 	movi	r19,7
    5a38:	a82d883a 	mov	r22,r21
    5a3c:	902b883a 	mov	r21,r18
    5a40:	8025883a 	mov	r18,r16
    5a44:	dc002c17 	ldw	r16,176(sp)
    5a48:	00000306 	br	5a58 <___vfprintf_internal_r+0xf84>
    5a4c:	8c7ffc04 	addi	r17,r17,-16
    5a50:	42000204 	addi	r8,r8,8
    5a54:	e440110e 	bge	fp,r17,5a9c <___vfprintf_internal_r+0xfc8>
    5a58:	18c00404 	addi	r3,r3,16
    5a5c:	10800044 	addi	r2,r2,1
    5a60:	45000015 	stw	r20,0(r8)
    5a64:	47000115 	stw	fp,4(r8)
    5a68:	d8c02015 	stw	r3,128(sp)
    5a6c:	d8801f15 	stw	r2,124(sp)
    5a70:	98bff60e 	bge	r19,r2,5a4c <___vfprintf_internal_r+0xf78>
    5a74:	d9801e04 	addi	r6,sp,120
    5a78:	b80b883a 	mov	r5,r23
    5a7c:	8009883a 	mov	r4,r16
    5a80:	000c9f80 	call	c9f8 <__sprint_r>
    5a84:	103d151e 	bne	r2,zero,4edc <___vfprintf_internal_r+0x408>
    5a88:	8c7ffc04 	addi	r17,r17,-16
    5a8c:	d8c02017 	ldw	r3,128(sp)
    5a90:	d8801f17 	ldw	r2,124(sp)
    5a94:	da000404 	addi	r8,sp,16
    5a98:	e47fef16 	blt	fp,r17,5a58 <___vfprintf_internal_r+0xf84>
    5a9c:	9021883a 	mov	r16,r18
    5aa0:	a825883a 	mov	r18,r21
    5aa4:	b02b883a 	mov	r21,r22
    5aa8:	882d883a 	mov	r22,r17
    5aac:	dc403017 	ldw	r17,192(sp)
    5ab0:	d9002b17 	ldw	r4,172(sp)
    5ab4:	1d87883a 	add	r3,r3,r22
    5ab8:	10800044 	addi	r2,r2,1
    5abc:	41000015 	stw	r4,0(r8)
    5ac0:	45800115 	stw	r22,4(r8)
    5ac4:	d8c02015 	stw	r3,128(sp)
    5ac8:	d8801f15 	stw	r2,124(sp)
    5acc:	010001c4 	movi	r4,7
    5ad0:	20818e16 	blt	r4,r2,610c <___vfprintf_internal_r+0x1638>
    5ad4:	42000204 	addi	r8,r8,8
    5ad8:	003e3106 	br	53a0 <___vfprintf_internal_r+0x8cc>
    5adc:	d9403317 	ldw	r5,204(sp)
    5ae0:	00800044 	movi	r2,1
    5ae4:	18c00044 	addi	r3,r3,1
    5ae8:	1141530e 	bge	r2,r5,6038 <___vfprintf_internal_r+0x1564>
    5aec:	dc401f17 	ldw	r17,124(sp)
    5af0:	00800044 	movi	r2,1
    5af4:	40800115 	stw	r2,4(r8)
    5af8:	8c400044 	addi	r17,r17,1
    5afc:	44000015 	stw	r16,0(r8)
    5b00:	d8c02015 	stw	r3,128(sp)
    5b04:	dc401f15 	stw	r17,124(sp)
    5b08:	008001c4 	movi	r2,7
    5b0c:	14416b16 	blt	r2,r17,60bc <___vfprintf_internal_r+0x15e8>
    5b10:	42000204 	addi	r8,r8,8
    5b14:	d8803717 	ldw	r2,220(sp)
    5b18:	d9003417 	ldw	r4,208(sp)
    5b1c:	8c400044 	addi	r17,r17,1
    5b20:	10c7883a 	add	r3,r2,r3
    5b24:	40800115 	stw	r2,4(r8)
    5b28:	41000015 	stw	r4,0(r8)
    5b2c:	d8c02015 	stw	r3,128(sp)
    5b30:	dc401f15 	stw	r17,124(sp)
    5b34:	008001c4 	movi	r2,7
    5b38:	14416916 	blt	r2,r17,60e0 <___vfprintf_internal_r+0x160c>
    5b3c:	45800204 	addi	r22,r8,8
    5b40:	d9003617 	ldw	r4,216(sp)
    5b44:	d9403817 	ldw	r5,224(sp)
    5b48:	000d883a 	mov	r6,zero
    5b4c:	000f883a 	mov	r7,zero
    5b50:	d8c03c15 	stw	r3,240(sp)
    5b54:	00111ec0 	call	111ec <__eqdf2>
    5b58:	d8c03c17 	ldw	r3,240(sp)
    5b5c:	1000bc26 	beq	r2,zero,5e50 <___vfprintf_internal_r+0x137c>
    5b60:	d9403317 	ldw	r5,204(sp)
    5b64:	84000044 	addi	r16,r16,1
    5b68:	8c400044 	addi	r17,r17,1
    5b6c:	28bfffc4 	addi	r2,r5,-1
    5b70:	1887883a 	add	r3,r3,r2
    5b74:	b0800115 	stw	r2,4(r22)
    5b78:	b4000015 	stw	r16,0(r22)
    5b7c:	d8c02015 	stw	r3,128(sp)
    5b80:	dc401f15 	stw	r17,124(sp)
    5b84:	008001c4 	movi	r2,7
    5b88:	14414316 	blt	r2,r17,6098 <___vfprintf_internal_r+0x15c4>
    5b8c:	b5800204 	addi	r22,r22,8
    5b90:	d9003a17 	ldw	r4,232(sp)
    5b94:	df0022c4 	addi	fp,sp,139
    5b98:	8c400044 	addi	r17,r17,1
    5b9c:	20c7883a 	add	r3,r4,r3
    5ba0:	b7000015 	stw	fp,0(r22)
    5ba4:	b1000115 	stw	r4,4(r22)
    5ba8:	d8c02015 	stw	r3,128(sp)
    5bac:	dc401f15 	stw	r17,124(sp)
    5bb0:	008001c4 	movi	r2,7
    5bb4:	14400e16 	blt	r2,r17,5bf0 <___vfprintf_internal_r+0x111c>
    5bb8:	b2000204 	addi	r8,r22,8
    5bbc:	003e3a06 	br	54a8 <___vfprintf_internal_r+0x9d4>
    5bc0:	010000b4 	movhi	r4,2
    5bc4:	213d7184 	addi	r4,r4,-2618
    5bc8:	d9002b15 	stw	r4,172(sp)
    5bcc:	d9002b17 	ldw	r4,172(sp)
    5bd0:	1c07883a 	add	r3,r3,r16
    5bd4:	44000115 	stw	r16,4(r8)
    5bd8:	41000015 	stw	r4,0(r8)
    5bdc:	10800044 	addi	r2,r2,1
    5be0:	d8c02015 	stw	r3,128(sp)
    5be4:	d8801f15 	stw	r2,124(sp)
    5be8:	010001c4 	movi	r4,7
    5bec:	20be2d0e 	bge	r4,r2,54a4 <___vfprintf_internal_r+0x9d0>
    5bf0:	d9002c17 	ldw	r4,176(sp)
    5bf4:	d9801e04 	addi	r6,sp,120
    5bf8:	b80b883a 	mov	r5,r23
    5bfc:	000c9f80 	call	c9f8 <__sprint_r>
    5c00:	103cb61e 	bne	r2,zero,4edc <___vfprintf_internal_r+0x408>
    5c04:	d8c02017 	ldw	r3,128(sp)
    5c08:	da000404 	addi	r8,sp,16
    5c0c:	003e2606 	br	54a8 <___vfprintf_internal_r+0x9d4>
    5c10:	d9002c17 	ldw	r4,176(sp)
    5c14:	d9801e04 	addi	r6,sp,120
    5c18:	b80b883a 	mov	r5,r23
    5c1c:	000c9f80 	call	c9f8 <__sprint_r>
    5c20:	103e5d26 	beq	r2,zero,5598 <___vfprintf_internal_r+0xac4>
    5c24:	003cad06 	br	4edc <___vfprintf_internal_r+0x408>
    5c28:	d9002c17 	ldw	r4,176(sp)
    5c2c:	d9801e04 	addi	r6,sp,120
    5c30:	b80b883a 	mov	r5,r23
    5c34:	000c9f80 	call	c9f8 <__sprint_r>
    5c38:	103ca81e 	bne	r2,zero,4edc <___vfprintf_internal_r+0x408>
    5c3c:	d8c02017 	ldw	r3,128(sp)
    5c40:	da000404 	addi	r8,sp,16
    5c44:	003e0b06 	br	5474 <___vfprintf_internal_r+0x9a0>
    5c48:	d9002c17 	ldw	r4,176(sp)
    5c4c:	d9801e04 	addi	r6,sp,120
    5c50:	b80b883a 	mov	r5,r23
    5c54:	000c9f80 	call	c9f8 <__sprint_r>
    5c58:	103ca01e 	bne	r2,zero,4edc <___vfprintf_internal_r+0x408>
    5c5c:	d8c02017 	ldw	r3,128(sp)
    5c60:	da000404 	addi	r8,sp,16
    5c64:	003dbd06 	br	535c <___vfprintf_internal_r+0x888>
    5c68:	d9002c17 	ldw	r4,176(sp)
    5c6c:	d9801e04 	addi	r6,sp,120
    5c70:	b80b883a 	mov	r5,r23
    5c74:	000c9f80 	call	c9f8 <__sprint_r>
    5c78:	103c981e 	bne	r2,zero,4edc <___vfprintf_internal_r+0x408>
    5c7c:	d8c02017 	ldw	r3,128(sp)
    5c80:	da000404 	addi	r8,sp,16
    5c84:	003dc306 	br	5394 <___vfprintf_internal_r+0x8c0>
    5c88:	d8802917 	ldw	r2,164(sp)
    5c8c:	d8002785 	stb	zero,158(sp)
    5c90:	103f0616 	blt	r2,zero,58ac <___vfprintf_internal_r+0xdd8>
    5c94:	00ffdfc4 	movi	r3,-129
    5c98:	9d84b03a 	or	r2,r19,r22
    5c9c:	90e4703a 	and	r18,r18,r3
    5ca0:	103c6b26 	beq	r2,zero,4e50 <___vfprintf_internal_r+0x37c>
    5ca4:	0039883a 	mov	fp,zero
    5ca8:	003e7406 	br	567c <___vfprintf_internal_r+0xba8>
    5cac:	9080040c 	andi	r2,r18,16
    5cb0:	1001b326 	beq	r2,zero,6380 <___vfprintf_internal_r+0x18ac>
    5cb4:	d9002d17 	ldw	r4,180(sp)
    5cb8:	d9402917 	ldw	r5,164(sp)
    5cbc:	d8002785 	stb	zero,158(sp)
    5cc0:	20800104 	addi	r2,r4,4
    5cc4:	24c00017 	ldw	r19,0(r4)
    5cc8:	002d883a 	mov	r22,zero
    5ccc:	2801b516 	blt	r5,zero,63a4 <___vfprintf_internal_r+0x18d0>
    5cd0:	00ffdfc4 	movi	r3,-129
    5cd4:	d8802d15 	stw	r2,180(sp)
    5cd8:	90e4703a 	and	r18,r18,r3
    5cdc:	983d2726 	beq	r19,zero,517c <___vfprintf_internal_r+0x6a8>
    5ce0:	0039883a 	mov	fp,zero
    5ce4:	003d2a06 	br	5190 <___vfprintf_internal_r+0x6bc>
    5ce8:	dc402617 	ldw	r17,152(sp)
    5cec:	0441d30e 	bge	zero,r17,643c <___vfprintf_internal_r+0x1968>
    5cf0:	dc403217 	ldw	r17,200(sp)
    5cf4:	d8803317 	ldw	r2,204(sp)
    5cf8:	1440010e 	bge	r2,r17,5d00 <___vfprintf_internal_r+0x122c>
    5cfc:	1023883a 	mov	r17,r2
    5d00:	04400a0e 	bge	zero,r17,5d2c <___vfprintf_internal_r+0x1258>
    5d04:	d8801f17 	ldw	r2,124(sp)
    5d08:	1c47883a 	add	r3,r3,r17
    5d0c:	44000015 	stw	r16,0(r8)
    5d10:	10800044 	addi	r2,r2,1
    5d14:	44400115 	stw	r17,4(r8)
    5d18:	d8c02015 	stw	r3,128(sp)
    5d1c:	d8801f15 	stw	r2,124(sp)
    5d20:	010001c4 	movi	r4,7
    5d24:	20826516 	blt	r4,r2,66bc <___vfprintf_internal_r+0x1be8>
    5d28:	42000204 	addi	r8,r8,8
    5d2c:	88026116 	blt	r17,zero,66b4 <___vfprintf_internal_r+0x1be0>
    5d30:	d9003217 	ldw	r4,200(sp)
    5d34:	2463c83a 	sub	r17,r4,r17
    5d38:	04407b0e 	bge	zero,r17,5f28 <___vfprintf_internal_r+0x1454>
    5d3c:	05800404 	movi	r22,16
    5d40:	d8801f17 	ldw	r2,124(sp)
    5d44:	b4419d0e 	bge	r22,r17,63bc <___vfprintf_internal_r+0x18e8>
    5d48:	010000b4 	movhi	r4,2
    5d4c:	213d7184 	addi	r4,r4,-2618
    5d50:	d9002b15 	stw	r4,172(sp)
    5d54:	070001c4 	movi	fp,7
    5d58:	dcc02c17 	ldw	r19,176(sp)
    5d5c:	00000306 	br	5d6c <___vfprintf_internal_r+0x1298>
    5d60:	42000204 	addi	r8,r8,8
    5d64:	8c7ffc04 	addi	r17,r17,-16
    5d68:	b441970e 	bge	r22,r17,63c8 <___vfprintf_internal_r+0x18f4>
    5d6c:	18c00404 	addi	r3,r3,16
    5d70:	10800044 	addi	r2,r2,1
    5d74:	45000015 	stw	r20,0(r8)
    5d78:	45800115 	stw	r22,4(r8)
    5d7c:	d8c02015 	stw	r3,128(sp)
    5d80:	d8801f15 	stw	r2,124(sp)
    5d84:	e0bff60e 	bge	fp,r2,5d60 <___vfprintf_internal_r+0x128c>
    5d88:	d9801e04 	addi	r6,sp,120
    5d8c:	b80b883a 	mov	r5,r23
    5d90:	9809883a 	mov	r4,r19
    5d94:	000c9f80 	call	c9f8 <__sprint_r>
    5d98:	103c501e 	bne	r2,zero,4edc <___vfprintf_internal_r+0x408>
    5d9c:	d8c02017 	ldw	r3,128(sp)
    5da0:	d8801f17 	ldw	r2,124(sp)
    5da4:	da000404 	addi	r8,sp,16
    5da8:	003fee06 	br	5d64 <___vfprintf_internal_r+0x1290>
    5dac:	d9002c17 	ldw	r4,176(sp)
    5db0:	d9801e04 	addi	r6,sp,120
    5db4:	b80b883a 	mov	r5,r23
    5db8:	000c9f80 	call	c9f8 <__sprint_r>
    5dbc:	103c471e 	bne	r2,zero,4edc <___vfprintf_internal_r+0x408>
    5dc0:	d8c02017 	ldw	r3,128(sp)
    5dc4:	df002787 	ldb	fp,158(sp)
    5dc8:	da000404 	addi	r8,sp,16
    5dcc:	003d5606 	br	5328 <___vfprintf_internal_r+0x854>
    5dd0:	9080040c 	andi	r2,r18,16
    5dd4:	10016126 	beq	r2,zero,635c <___vfprintf_internal_r+0x1888>
    5dd8:	d8802d17 	ldw	r2,180(sp)
    5ddc:	14c00017 	ldw	r19,0(r2)
    5de0:	10800104 	addi	r2,r2,4
    5de4:	d8802d15 	stw	r2,180(sp)
    5de8:	982dd7fa 	srai	r22,r19,31
    5dec:	b005883a 	mov	r2,r22
    5df0:	003c8206 	br	4ffc <___vfprintf_internal_r+0x528>
    5df4:	9080040c 	andi	r2,r18,16
    5df8:	10003526 	beq	r2,zero,5ed0 <___vfprintf_internal_r+0x13fc>
    5dfc:	d9402d17 	ldw	r5,180(sp)
    5e00:	d8c02917 	ldw	r3,164(sp)
    5e04:	d8002785 	stb	zero,158(sp)
    5e08:	28800104 	addi	r2,r5,4
    5e0c:	2cc00017 	ldw	r19,0(r5)
    5e10:	002d883a 	mov	r22,zero
    5e14:	18003716 	blt	r3,zero,5ef4 <___vfprintf_internal_r+0x1420>
    5e18:	00ffdfc4 	movi	r3,-129
    5e1c:	d8802d15 	stw	r2,180(sp)
    5e20:	90e4703a 	and	r18,r18,r3
    5e24:	0039883a 	mov	fp,zero
    5e28:	983df326 	beq	r19,zero,55f8 <___vfprintf_internal_r+0xb24>
    5e2c:	00800244 	movi	r2,9
    5e30:	14fc7b36 	bltu	r2,r19,5020 <___vfprintf_internal_r+0x54c>
    5e34:	d8c02817 	ldw	r3,160(sp)
    5e38:	dc001dc4 	addi	r16,sp,119
    5e3c:	9cc00c04 	addi	r19,r19,48
    5e40:	1c07c83a 	sub	r3,r3,r16
    5e44:	dcc01dc5 	stb	r19,119(sp)
    5e48:	d8c02e15 	stw	r3,184(sp)
    5e4c:	003ce806 	br	51f0 <___vfprintf_internal_r+0x71c>
    5e50:	d8803317 	ldw	r2,204(sp)
    5e54:	143fffc4 	addi	r16,r2,-1
    5e58:	043f4d0e 	bge	zero,r16,5b90 <___vfprintf_internal_r+0x10bc>
    5e5c:	07000404 	movi	fp,16
    5e60:	e400810e 	bge	fp,r16,6068 <___vfprintf_internal_r+0x1594>
    5e64:	014000b4 	movhi	r5,2
    5e68:	297d7184 	addi	r5,r5,-2618
    5e6c:	d9402b15 	stw	r5,172(sp)
    5e70:	01c001c4 	movi	r7,7
    5e74:	dcc02c17 	ldw	r19,176(sp)
    5e78:	00000306 	br	5e88 <___vfprintf_internal_r+0x13b4>
    5e7c:	b5800204 	addi	r22,r22,8
    5e80:	843ffc04 	addi	r16,r16,-16
    5e84:	e4007b0e 	bge	fp,r16,6074 <___vfprintf_internal_r+0x15a0>
    5e88:	18c00404 	addi	r3,r3,16
    5e8c:	8c400044 	addi	r17,r17,1
    5e90:	b5000015 	stw	r20,0(r22)
    5e94:	b7000115 	stw	fp,4(r22)
    5e98:	d8c02015 	stw	r3,128(sp)
    5e9c:	dc401f15 	stw	r17,124(sp)
    5ea0:	3c7ff60e 	bge	r7,r17,5e7c <___vfprintf_internal_r+0x13a8>
    5ea4:	d9801e04 	addi	r6,sp,120
    5ea8:	b80b883a 	mov	r5,r23
    5eac:	9809883a 	mov	r4,r19
    5eb0:	d9c03c15 	stw	r7,240(sp)
    5eb4:	000c9f80 	call	c9f8 <__sprint_r>
    5eb8:	d9c03c17 	ldw	r7,240(sp)
    5ebc:	103c071e 	bne	r2,zero,4edc <___vfprintf_internal_r+0x408>
    5ec0:	d8c02017 	ldw	r3,128(sp)
    5ec4:	dc401f17 	ldw	r17,124(sp)
    5ec8:	dd800404 	addi	r22,sp,16
    5ecc:	003fec06 	br	5e80 <___vfprintf_internal_r+0x13ac>
    5ed0:	9080100c 	andi	r2,r18,64
    5ed4:	d8002785 	stb	zero,158(sp)
    5ed8:	10010e26 	beq	r2,zero,6314 <___vfprintf_internal_r+0x1840>
    5edc:	d9002d17 	ldw	r4,180(sp)
    5ee0:	d9402917 	ldw	r5,164(sp)
    5ee4:	002d883a 	mov	r22,zero
    5ee8:	20800104 	addi	r2,r4,4
    5eec:	24c0000b 	ldhu	r19,0(r4)
    5ef0:	283fc90e 	bge	r5,zero,5e18 <___vfprintf_internal_r+0x1344>
    5ef4:	d8802d15 	stw	r2,180(sp)
    5ef8:	0039883a 	mov	fp,zero
    5efc:	9d84b03a 	or	r2,r19,r22
    5f00:	103c461e 	bne	r2,zero,501c <___vfprintf_internal_r+0x548>
    5f04:	00800044 	movi	r2,1
    5f08:	003e6c06 	br	58bc <___vfprintf_internal_r+0xde8>
    5f0c:	d9002c17 	ldw	r4,176(sp)
    5f10:	d9801e04 	addi	r6,sp,120
    5f14:	b80b883a 	mov	r5,r23
    5f18:	000c9f80 	call	c9f8 <__sprint_r>
    5f1c:	103bef1e 	bne	r2,zero,4edc <___vfprintf_internal_r+0x408>
    5f20:	d8c02017 	ldw	r3,128(sp)
    5f24:	da000404 	addi	r8,sp,16
    5f28:	d9003217 	ldw	r4,200(sp)
    5f2c:	d8802617 	ldw	r2,152(sp)
    5f30:	d9403317 	ldw	r5,204(sp)
    5f34:	8123883a 	add	r17,r16,r4
    5f38:	11400216 	blt	r2,r5,5f44 <___vfprintf_internal_r+0x1470>
    5f3c:	9100004c 	andi	r4,r18,1
    5f40:	20000d26 	beq	r4,zero,5f78 <___vfprintf_internal_r+0x14a4>
    5f44:	d9003717 	ldw	r4,220(sp)
    5f48:	d9403417 	ldw	r5,208(sp)
    5f4c:	1907883a 	add	r3,r3,r4
    5f50:	d9001f17 	ldw	r4,124(sp)
    5f54:	41400015 	stw	r5,0(r8)
    5f58:	d9403717 	ldw	r5,220(sp)
    5f5c:	21000044 	addi	r4,r4,1
    5f60:	d8c02015 	stw	r3,128(sp)
    5f64:	41400115 	stw	r5,4(r8)
    5f68:	d9001f15 	stw	r4,124(sp)
    5f6c:	014001c4 	movi	r5,7
    5f70:	2901e816 	blt	r5,r4,6714 <___vfprintf_internal_r+0x1c40>
    5f74:	42000204 	addi	r8,r8,8
    5f78:	d9003317 	ldw	r4,204(sp)
    5f7c:	8121883a 	add	r16,r16,r4
    5f80:	2085c83a 	sub	r2,r4,r2
    5f84:	8461c83a 	sub	r16,r16,r17
    5f88:	1400010e 	bge	r2,r16,5f90 <___vfprintf_internal_r+0x14bc>
    5f8c:	1021883a 	mov	r16,r2
    5f90:	04000a0e 	bge	zero,r16,5fbc <___vfprintf_internal_r+0x14e8>
    5f94:	d9001f17 	ldw	r4,124(sp)
    5f98:	1c07883a 	add	r3,r3,r16
    5f9c:	44400015 	stw	r17,0(r8)
    5fa0:	21000044 	addi	r4,r4,1
    5fa4:	44000115 	stw	r16,4(r8)
    5fa8:	d8c02015 	stw	r3,128(sp)
    5fac:	d9001f15 	stw	r4,124(sp)
    5fb0:	014001c4 	movi	r5,7
    5fb4:	2901fb16 	blt	r5,r4,67a4 <___vfprintf_internal_r+0x1cd0>
    5fb8:	42000204 	addi	r8,r8,8
    5fbc:	8001f716 	blt	r16,zero,679c <___vfprintf_internal_r+0x1cc8>
    5fc0:	1421c83a 	sub	r16,r2,r16
    5fc4:	043d380e 	bge	zero,r16,54a8 <___vfprintf_internal_r+0x9d4>
    5fc8:	04400404 	movi	r17,16
    5fcc:	d8801f17 	ldw	r2,124(sp)
    5fd0:	8c3efb0e 	bge	r17,r16,5bc0 <___vfprintf_internal_r+0x10ec>
    5fd4:	014000b4 	movhi	r5,2
    5fd8:	297d7184 	addi	r5,r5,-2618
    5fdc:	d9402b15 	stw	r5,172(sp)
    5fe0:	058001c4 	movi	r22,7
    5fe4:	dcc02c17 	ldw	r19,176(sp)
    5fe8:	00000306 	br	5ff8 <___vfprintf_internal_r+0x1524>
    5fec:	42000204 	addi	r8,r8,8
    5ff0:	843ffc04 	addi	r16,r16,-16
    5ff4:	8c3ef50e 	bge	r17,r16,5bcc <___vfprintf_internal_r+0x10f8>
    5ff8:	18c00404 	addi	r3,r3,16
    5ffc:	10800044 	addi	r2,r2,1
    6000:	45000015 	stw	r20,0(r8)
    6004:	44400115 	stw	r17,4(r8)
    6008:	d8c02015 	stw	r3,128(sp)
    600c:	d8801f15 	stw	r2,124(sp)
    6010:	b0bff60e 	bge	r22,r2,5fec <___vfprintf_internal_r+0x1518>
    6014:	d9801e04 	addi	r6,sp,120
    6018:	b80b883a 	mov	r5,r23
    601c:	9809883a 	mov	r4,r19
    6020:	000c9f80 	call	c9f8 <__sprint_r>
    6024:	103bad1e 	bne	r2,zero,4edc <___vfprintf_internal_r+0x408>
    6028:	d8c02017 	ldw	r3,128(sp)
    602c:	d8801f17 	ldw	r2,124(sp)
    6030:	da000404 	addi	r8,sp,16
    6034:	003fee06 	br	5ff0 <___vfprintf_internal_r+0x151c>
    6038:	9088703a 	and	r4,r18,r2
    603c:	203eab1e 	bne	r4,zero,5aec <___vfprintf_internal_r+0x1018>
    6040:	dc401f17 	ldw	r17,124(sp)
    6044:	40800115 	stw	r2,4(r8)
    6048:	44000015 	stw	r16,0(r8)
    604c:	8c400044 	addi	r17,r17,1
    6050:	d8c02015 	stw	r3,128(sp)
    6054:	dc401f15 	stw	r17,124(sp)
    6058:	008001c4 	movi	r2,7
    605c:	14400e16 	blt	r2,r17,6098 <___vfprintf_internal_r+0x15c4>
    6060:	45800204 	addi	r22,r8,8
    6064:	003eca06 	br	5b90 <___vfprintf_internal_r+0x10bc>
    6068:	010000b4 	movhi	r4,2
    606c:	213d7184 	addi	r4,r4,-2618
    6070:	d9002b15 	stw	r4,172(sp)
    6074:	d8802b17 	ldw	r2,172(sp)
    6078:	1c07883a 	add	r3,r3,r16
    607c:	8c400044 	addi	r17,r17,1
    6080:	b0800015 	stw	r2,0(r22)
    6084:	b4000115 	stw	r16,4(r22)
    6088:	d8c02015 	stw	r3,128(sp)
    608c:	dc401f15 	stw	r17,124(sp)
    6090:	008001c4 	movi	r2,7
    6094:	147ebd0e 	bge	r2,r17,5b8c <___vfprintf_internal_r+0x10b8>
    6098:	d9002c17 	ldw	r4,176(sp)
    609c:	d9801e04 	addi	r6,sp,120
    60a0:	b80b883a 	mov	r5,r23
    60a4:	000c9f80 	call	c9f8 <__sprint_r>
    60a8:	103b8c1e 	bne	r2,zero,4edc <___vfprintf_internal_r+0x408>
    60ac:	d8c02017 	ldw	r3,128(sp)
    60b0:	dc401f17 	ldw	r17,124(sp)
    60b4:	dd800404 	addi	r22,sp,16
    60b8:	003eb506 	br	5b90 <___vfprintf_internal_r+0x10bc>
    60bc:	d9002c17 	ldw	r4,176(sp)
    60c0:	d9801e04 	addi	r6,sp,120
    60c4:	b80b883a 	mov	r5,r23
    60c8:	000c9f80 	call	c9f8 <__sprint_r>
    60cc:	103b831e 	bne	r2,zero,4edc <___vfprintf_internal_r+0x408>
    60d0:	d8c02017 	ldw	r3,128(sp)
    60d4:	dc401f17 	ldw	r17,124(sp)
    60d8:	da000404 	addi	r8,sp,16
    60dc:	003e8d06 	br	5b14 <___vfprintf_internal_r+0x1040>
    60e0:	d9002c17 	ldw	r4,176(sp)
    60e4:	d9801e04 	addi	r6,sp,120
    60e8:	b80b883a 	mov	r5,r23
    60ec:	000c9f80 	call	c9f8 <__sprint_r>
    60f0:	103b7a1e 	bne	r2,zero,4edc <___vfprintf_internal_r+0x408>
    60f4:	d8c02017 	ldw	r3,128(sp)
    60f8:	dc401f17 	ldw	r17,124(sp)
    60fc:	dd800404 	addi	r22,sp,16
    6100:	003e8f06 	br	5b40 <___vfprintf_internal_r+0x106c>
    6104:	0027883a 	mov	r19,zero
    6108:	003f4a06 	br	5e34 <___vfprintf_internal_r+0x1360>
    610c:	d9002c17 	ldw	r4,176(sp)
    6110:	d9801e04 	addi	r6,sp,120
    6114:	b80b883a 	mov	r5,r23
    6118:	000c9f80 	call	c9f8 <__sprint_r>
    611c:	103b6f1e 	bne	r2,zero,4edc <___vfprintf_internal_r+0x408>
    6120:	d8c02017 	ldw	r3,128(sp)
    6124:	da000404 	addi	r8,sp,16
    6128:	003c9d06 	br	53a0 <___vfprintf_internal_r+0x8cc>
    612c:	04e7c83a 	sub	r19,zero,r19
    6130:	9804c03a 	cmpne	r2,r19,zero
    6134:	05adc83a 	sub	r22,zero,r22
    6138:	b0adc83a 	sub	r22,r22,r2
    613c:	d8802917 	ldw	r2,164(sp)
    6140:	07000b44 	movi	fp,45
    6144:	df002785 	stb	fp,158(sp)
    6148:	10017b16 	blt	r2,zero,6738 <___vfprintf_internal_r+0x1c64>
    614c:	00bfdfc4 	movi	r2,-129
    6150:	90a4703a 	and	r18,r18,r2
    6154:	003bb106 	br	501c <___vfprintf_internal_r+0x548>
    6158:	d9003617 	ldw	r4,216(sp)
    615c:	d9403817 	ldw	r5,224(sp)
    6160:	da003d15 	stw	r8,244(sp)
    6164:	000b1780 	call	b178 <__fpclassifyd>
    6168:	da003d17 	ldw	r8,244(sp)
    616c:	1000f026 	beq	r2,zero,6530 <___vfprintf_internal_r+0x1a5c>
    6170:	d9002917 	ldw	r4,164(sp)
    6174:	05bff7c4 	movi	r22,-33
    6178:	00bfffc4 	movi	r2,-1
    617c:	8dac703a 	and	r22,r17,r22
    6180:	20820026 	beq	r4,r2,6984 <___vfprintf_internal_r+0x1eb0>
    6184:	008011c4 	movi	r2,71
    6188:	b081f726 	beq	r22,r2,6968 <___vfprintf_internal_r+0x1e94>
    618c:	d9003817 	ldw	r4,224(sp)
    6190:	90c04014 	ori	r3,r18,256
    6194:	d8c02b15 	stw	r3,172(sp)
    6198:	20021516 	blt	r4,zero,69f0 <___vfprintf_internal_r+0x1f1c>
    619c:	dcc03817 	ldw	r19,224(sp)
    61a0:	d8002a05 	stb	zero,168(sp)
    61a4:	00801984 	movi	r2,102
    61a8:	8881f926 	beq	r17,r2,6990 <___vfprintf_internal_r+0x1ebc>
    61ac:	00801184 	movi	r2,70
    61b0:	88821c26 	beq	r17,r2,6a24 <___vfprintf_internal_r+0x1f50>
    61b4:	00801144 	movi	r2,69
    61b8:	b081ef26 	beq	r22,r2,6978 <___vfprintf_internal_r+0x1ea4>
    61bc:	d8c02917 	ldw	r3,164(sp)
    61c0:	d8802104 	addi	r2,sp,132
    61c4:	d8800315 	stw	r2,12(sp)
    61c8:	d9403617 	ldw	r5,216(sp)
    61cc:	d8802504 	addi	r2,sp,148
    61d0:	d9002c17 	ldw	r4,176(sp)
    61d4:	d8800215 	stw	r2,8(sp)
    61d8:	d8802604 	addi	r2,sp,152
    61dc:	d8c00015 	stw	r3,0(sp)
    61e0:	d8800115 	stw	r2,4(sp)
    61e4:	01c00084 	movi	r7,2
    61e8:	980d883a 	mov	r6,r19
    61ec:	d8c03c15 	stw	r3,240(sp)
    61f0:	da003d15 	stw	r8,244(sp)
    61f4:	00070f80 	call	70f8 <_dtoa_r>
    61f8:	1021883a 	mov	r16,r2
    61fc:	008019c4 	movi	r2,103
    6200:	d8c03c17 	ldw	r3,240(sp)
    6204:	da003d17 	ldw	r8,244(sp)
    6208:	88817126 	beq	r17,r2,67d0 <___vfprintf_internal_r+0x1cfc>
    620c:	008011c4 	movi	r2,71
    6210:	88829226 	beq	r17,r2,6c5c <___vfprintf_internal_r+0x2188>
    6214:	80f9883a 	add	fp,r16,r3
    6218:	d9003617 	ldw	r4,216(sp)
    621c:	000d883a 	mov	r6,zero
    6220:	000f883a 	mov	r7,zero
    6224:	980b883a 	mov	r5,r19
    6228:	da003d15 	stw	r8,244(sp)
    622c:	00111ec0 	call	111ec <__eqdf2>
    6230:	da003d17 	ldw	r8,244(sp)
    6234:	10018d26 	beq	r2,zero,686c <___vfprintf_internal_r+0x1d98>
    6238:	d8802117 	ldw	r2,132(sp)
    623c:	1700062e 	bgeu	r2,fp,6258 <___vfprintf_internal_r+0x1784>
    6240:	01000c04 	movi	r4,48
    6244:	10c00044 	addi	r3,r2,1
    6248:	d8c02115 	stw	r3,132(sp)
    624c:	11000005 	stb	r4,0(r2)
    6250:	d8802117 	ldw	r2,132(sp)
    6254:	173ffb36 	bltu	r2,fp,6244 <___vfprintf_internal_r+0x1770>
    6258:	1405c83a 	sub	r2,r2,r16
    625c:	d8803315 	stw	r2,204(sp)
    6260:	008011c4 	movi	r2,71
    6264:	b0817626 	beq	r22,r2,6840 <___vfprintf_internal_r+0x1d6c>
    6268:	00801944 	movi	r2,101
    626c:	1442810e 	bge	r2,r17,6c74 <___vfprintf_internal_r+0x21a0>
    6270:	d8c02617 	ldw	r3,152(sp)
    6274:	00801984 	movi	r2,102
    6278:	d8c03215 	stw	r3,200(sp)
    627c:	8881fe26 	beq	r17,r2,6a78 <___vfprintf_internal_r+0x1fa4>
    6280:	d8c03217 	ldw	r3,200(sp)
    6284:	d9003317 	ldw	r4,204(sp)
    6288:	1901dd16 	blt	r3,r4,6a00 <___vfprintf_internal_r+0x1f2c>
    628c:	9480004c 	andi	r18,r18,1
    6290:	90022b1e 	bne	r18,zero,6b40 <___vfprintf_internal_r+0x206c>
    6294:	1805883a 	mov	r2,r3
    6298:	18028016 	blt	r3,zero,6c9c <___vfprintf_internal_r+0x21c8>
    629c:	d8c03217 	ldw	r3,200(sp)
    62a0:	044019c4 	movi	r17,103
    62a4:	d8c02e15 	stw	r3,184(sp)
    62a8:	df002a07 	ldb	fp,168(sp)
    62ac:	e001531e 	bne	fp,zero,67fc <___vfprintf_internal_r+0x1d28>
    62b0:	df002783 	ldbu	fp,158(sp)
    62b4:	d8802a15 	stw	r2,168(sp)
    62b8:	dc802b17 	ldw	r18,172(sp)
    62bc:	d8002915 	stw	zero,164(sp)
    62c0:	003bd106 	br	5208 <___vfprintf_internal_r+0x734>
    62c4:	d8802d17 	ldw	r2,180(sp)
    62c8:	d8c02d17 	ldw	r3,180(sp)
    62cc:	d9002d17 	ldw	r4,180(sp)
    62d0:	10800017 	ldw	r2,0(r2)
    62d4:	18c00117 	ldw	r3,4(r3)
    62d8:	21000204 	addi	r4,r4,8
    62dc:	d8803615 	stw	r2,216(sp)
    62e0:	d8c03815 	stw	r3,224(sp)
    62e4:	d9002d15 	stw	r4,180(sp)
    62e8:	003b7506 	br	50c0 <___vfprintf_internal_r+0x5ec>
    62ec:	ac400007 	ldb	r17,0(r21)
    62f0:	003a5906 	br	4c58 <___vfprintf_internal_r+0x184>
    62f4:	9080100c 	andi	r2,r18,64
    62f8:	1000a826 	beq	r2,zero,659c <___vfprintf_internal_r+0x1ac8>
    62fc:	d9002d17 	ldw	r4,180(sp)
    6300:	002d883a 	mov	r22,zero
    6304:	24c0000b 	ldhu	r19,0(r4)
    6308:	21000104 	addi	r4,r4,4
    630c:	d9002d15 	stw	r4,180(sp)
    6310:	003ccb06 	br	5640 <___vfprintf_internal_r+0xb6c>
    6314:	d8c02d17 	ldw	r3,180(sp)
    6318:	d9002917 	ldw	r4,164(sp)
    631c:	002d883a 	mov	r22,zero
    6320:	18800104 	addi	r2,r3,4
    6324:	1cc00017 	ldw	r19,0(r3)
    6328:	203ebb0e 	bge	r4,zero,5e18 <___vfprintf_internal_r+0x1344>
    632c:	003ef106 	br	5ef4 <___vfprintf_internal_r+0x1420>
    6330:	9080040c 	andi	r2,r18,16
    6334:	1000921e 	bne	r2,zero,6580 <___vfprintf_internal_r+0x1aac>
    6338:	9480100c 	andi	r18,r18,64
    633c:	90013926 	beq	r18,zero,6824 <___vfprintf_internal_r+0x1d50>
    6340:	d9002d17 	ldw	r4,180(sp)
    6344:	d9402f17 	ldw	r5,188(sp)
    6348:	20800017 	ldw	r2,0(r4)
    634c:	21000104 	addi	r4,r4,4
    6350:	d9002d15 	stw	r4,180(sp)
    6354:	1140000d 	sth	r5,0(r2)
    6358:	003a1606 	br	4bb4 <___vfprintf_internal_r+0xe0>
    635c:	9080100c 	andi	r2,r18,64
    6360:	10008026 	beq	r2,zero,6564 <___vfprintf_internal_r+0x1a90>
    6364:	d8c02d17 	ldw	r3,180(sp)
    6368:	1cc0000f 	ldh	r19,0(r3)
    636c:	18c00104 	addi	r3,r3,4
    6370:	d8c02d15 	stw	r3,180(sp)
    6374:	982dd7fa 	srai	r22,r19,31
    6378:	b005883a 	mov	r2,r22
    637c:	003b1f06 	br	4ffc <___vfprintf_internal_r+0x528>
    6380:	9080100c 	andi	r2,r18,64
    6384:	d8002785 	stb	zero,158(sp)
    6388:	10008a1e 	bne	r2,zero,65b4 <___vfprintf_internal_r+0x1ae0>
    638c:	d9402d17 	ldw	r5,180(sp)
    6390:	d8c02917 	ldw	r3,164(sp)
    6394:	002d883a 	mov	r22,zero
    6398:	28800104 	addi	r2,r5,4
    639c:	2cc00017 	ldw	r19,0(r5)
    63a0:	183e4b0e 	bge	r3,zero,5cd0 <___vfprintf_internal_r+0x11fc>
    63a4:	9d86b03a 	or	r3,r19,r22
    63a8:	d8802d15 	stw	r2,180(sp)
    63ac:	183e4c1e 	bne	r3,zero,5ce0 <___vfprintf_internal_r+0x120c>
    63b0:	0039883a 	mov	fp,zero
    63b4:	0005883a 	mov	r2,zero
    63b8:	003d4006 	br	58bc <___vfprintf_internal_r+0xde8>
    63bc:	014000b4 	movhi	r5,2
    63c0:	297d7184 	addi	r5,r5,-2618
    63c4:	d9402b15 	stw	r5,172(sp)
    63c8:	d9402b17 	ldw	r5,172(sp)
    63cc:	1c47883a 	add	r3,r3,r17
    63d0:	10800044 	addi	r2,r2,1
    63d4:	41400015 	stw	r5,0(r8)
    63d8:	44400115 	stw	r17,4(r8)
    63dc:	d8c02015 	stw	r3,128(sp)
    63e0:	d8801f15 	stw	r2,124(sp)
    63e4:	010001c4 	movi	r4,7
    63e8:	20bec816 	blt	r4,r2,5f0c <___vfprintf_internal_r+0x1438>
    63ec:	42000204 	addi	r8,r8,8
    63f0:	003ecd06 	br	5f28 <___vfprintf_internal_r+0x1454>
    63f4:	d9002917 	ldw	r4,164(sp)
    63f8:	d8002785 	stb	zero,158(sp)
    63fc:	203d2d16 	blt	r4,zero,58b4 <___vfprintf_internal_r+0xde0>
    6400:	00bfdfc4 	movi	r2,-129
    6404:	90a4703a 	and	r18,r18,r2
    6408:	003a9106 	br	4e50 <___vfprintf_internal_r+0x37c>
    640c:	010000b4 	movhi	r4,2
    6410:	213d7184 	addi	r4,r4,-2618
    6414:	d9002b15 	stw	r4,172(sp)
    6418:	003c0c06 	br	544c <___vfprintf_internal_r+0x978>
    641c:	d9002c17 	ldw	r4,176(sp)
    6420:	d9801e04 	addi	r6,sp,120
    6424:	b80b883a 	mov	r5,r23
    6428:	000c9f80 	call	c9f8 <__sprint_r>
    642c:	103aab1e 	bne	r2,zero,4edc <___vfprintf_internal_r+0x408>
    6430:	d8c02017 	ldw	r3,128(sp)
    6434:	da000404 	addi	r8,sp,16
    6438:	003d4106 	br	5940 <___vfprintf_internal_r+0xe6c>
    643c:	d8801f17 	ldw	r2,124(sp)
    6440:	014000b4 	movhi	r5,2
    6444:	01000044 	movi	r4,1
    6448:	18c00044 	addi	r3,r3,1
    644c:	10800044 	addi	r2,r2,1
    6450:	297d6904 	addi	r5,r5,-2652
    6454:	41000115 	stw	r4,4(r8)
    6458:	41400015 	stw	r5,0(r8)
    645c:	d8c02015 	stw	r3,128(sp)
    6460:	d8801f15 	stw	r2,124(sp)
    6464:	010001c4 	movi	r4,7
    6468:	20805c16 	blt	r4,r2,65dc <___vfprintf_internal_r+0x1b08>
    646c:	42000204 	addi	r8,r8,8
    6470:	8800041e 	bne	r17,zero,6484 <___vfprintf_internal_r+0x19b0>
    6474:	d8803317 	ldw	r2,204(sp)
    6478:	1000021e 	bne	r2,zero,6484 <___vfprintf_internal_r+0x19b0>
    647c:	9080004c 	andi	r2,r18,1
    6480:	103c0926 	beq	r2,zero,54a8 <___vfprintf_internal_r+0x9d4>
    6484:	d9003717 	ldw	r4,220(sp)
    6488:	d8801f17 	ldw	r2,124(sp)
    648c:	d9403417 	ldw	r5,208(sp)
    6490:	20c7883a 	add	r3,r4,r3
    6494:	10800044 	addi	r2,r2,1
    6498:	41000115 	stw	r4,4(r8)
    649c:	41400015 	stw	r5,0(r8)
    64a0:	d8c02015 	stw	r3,128(sp)
    64a4:	d8801f15 	stw	r2,124(sp)
    64a8:	010001c4 	movi	r4,7
    64ac:	20812116 	blt	r4,r2,6934 <___vfprintf_internal_r+0x1e60>
    64b0:	42000204 	addi	r8,r8,8
    64b4:	0463c83a 	sub	r17,zero,r17
    64b8:	0440730e 	bge	zero,r17,6688 <___vfprintf_internal_r+0x1bb4>
    64bc:	05800404 	movi	r22,16
    64c0:	b440860e 	bge	r22,r17,66dc <___vfprintf_internal_r+0x1c08>
    64c4:	014000b4 	movhi	r5,2
    64c8:	297d7184 	addi	r5,r5,-2618
    64cc:	d9402b15 	stw	r5,172(sp)
    64d0:	070001c4 	movi	fp,7
    64d4:	dcc02c17 	ldw	r19,176(sp)
    64d8:	00000306 	br	64e8 <___vfprintf_internal_r+0x1a14>
    64dc:	42000204 	addi	r8,r8,8
    64e0:	8c7ffc04 	addi	r17,r17,-16
    64e4:	b440800e 	bge	r22,r17,66e8 <___vfprintf_internal_r+0x1c14>
    64e8:	18c00404 	addi	r3,r3,16
    64ec:	10800044 	addi	r2,r2,1
    64f0:	45000015 	stw	r20,0(r8)
    64f4:	45800115 	stw	r22,4(r8)
    64f8:	d8c02015 	stw	r3,128(sp)
    64fc:	d8801f15 	stw	r2,124(sp)
    6500:	e0bff60e 	bge	fp,r2,64dc <___vfprintf_internal_r+0x1a08>
    6504:	d9801e04 	addi	r6,sp,120
    6508:	b80b883a 	mov	r5,r23
    650c:	9809883a 	mov	r4,r19
    6510:	000c9f80 	call	c9f8 <__sprint_r>
    6514:	103a711e 	bne	r2,zero,4edc <___vfprintf_internal_r+0x408>
    6518:	d8c02017 	ldw	r3,128(sp)
    651c:	d8801f17 	ldw	r2,124(sp)
    6520:	da000404 	addi	r8,sp,16
    6524:	003fee06 	br	64e0 <___vfprintf_internal_r+0x1a0c>
    6528:	00bfffc4 	movi	r2,-1
    652c:	003a6f06 	br	4eec <___vfprintf_internal_r+0x418>
    6530:	008011c4 	movi	r2,71
    6534:	1440b816 	blt	r2,r17,6818 <___vfprintf_internal_r+0x1d44>
    6538:	040000b4 	movhi	r16,2
    653c:	843d5b04 	addi	r16,r16,-2708
    6540:	00c000c4 	movi	r3,3
    6544:	00bfdfc4 	movi	r2,-129
    6548:	d8c02a15 	stw	r3,168(sp)
    654c:	90a4703a 	and	r18,r18,r2
    6550:	df002783 	ldbu	fp,158(sp)
    6554:	d8c02e15 	stw	r3,184(sp)
    6558:	d8002915 	stw	zero,164(sp)
    655c:	d8003215 	stw	zero,200(sp)
    6560:	003b2906 	br	5208 <___vfprintf_internal_r+0x734>
    6564:	d9002d17 	ldw	r4,180(sp)
    6568:	24c00017 	ldw	r19,0(r4)
    656c:	21000104 	addi	r4,r4,4
    6570:	d9002d15 	stw	r4,180(sp)
    6574:	982dd7fa 	srai	r22,r19,31
    6578:	b005883a 	mov	r2,r22
    657c:	003a9f06 	br	4ffc <___vfprintf_internal_r+0x528>
    6580:	d9402d17 	ldw	r5,180(sp)
    6584:	d8c02f17 	ldw	r3,188(sp)
    6588:	28800017 	ldw	r2,0(r5)
    658c:	29400104 	addi	r5,r5,4
    6590:	d9402d15 	stw	r5,180(sp)
    6594:	10c00015 	stw	r3,0(r2)
    6598:	00398606 	br	4bb4 <___vfprintf_internal_r+0xe0>
    659c:	d9402d17 	ldw	r5,180(sp)
    65a0:	002d883a 	mov	r22,zero
    65a4:	2cc00017 	ldw	r19,0(r5)
    65a8:	29400104 	addi	r5,r5,4
    65ac:	d9402d15 	stw	r5,180(sp)
    65b0:	003c2306 	br	5640 <___vfprintf_internal_r+0xb6c>
    65b4:	d8c02d17 	ldw	r3,180(sp)
    65b8:	d9002917 	ldw	r4,164(sp)
    65bc:	002d883a 	mov	r22,zero
    65c0:	18800104 	addi	r2,r3,4
    65c4:	1cc0000b 	ldhu	r19,0(r3)
    65c8:	203dc10e 	bge	r4,zero,5cd0 <___vfprintf_internal_r+0x11fc>
    65cc:	003f7506 	br	63a4 <___vfprintf_internal_r+0x18d0>
    65d0:	040000b4 	movhi	r16,2
    65d4:	843d5904 	addi	r16,r16,-2716
    65d8:	003acc06 	br	510c <___vfprintf_internal_r+0x638>
    65dc:	d9002c17 	ldw	r4,176(sp)
    65e0:	d9801e04 	addi	r6,sp,120
    65e4:	b80b883a 	mov	r5,r23
    65e8:	000c9f80 	call	c9f8 <__sprint_r>
    65ec:	103a3b1e 	bne	r2,zero,4edc <___vfprintf_internal_r+0x408>
    65f0:	dc402617 	ldw	r17,152(sp)
    65f4:	d8c02017 	ldw	r3,128(sp)
    65f8:	da000404 	addi	r8,sp,16
    65fc:	003f9c06 	br	6470 <___vfprintf_internal_r+0x199c>
    6600:	ac400043 	ldbu	r17,1(r21)
    6604:	94800814 	ori	r18,r18,32
    6608:	ad400044 	addi	r21,r21,1
    660c:	8c403fcc 	andi	r17,r17,255
    6610:	8c40201c 	xori	r17,r17,128
    6614:	8c7fe004 	addi	r17,r17,-128
    6618:	00398f06 	br	4c58 <___vfprintf_internal_r+0x184>
    661c:	d8c02d15 	stw	r3,180(sp)
    6620:	0039883a 	mov	fp,zero
    6624:	003e3506 	br	5efc <___vfprintf_internal_r+0x1428>
    6628:	d9002c17 	ldw	r4,176(sp)
    662c:	d9801e04 	addi	r6,sp,120
    6630:	b80b883a 	mov	r5,r23
    6634:	000c9f80 	call	c9f8 <__sprint_r>
    6638:	103a281e 	bne	r2,zero,4edc <___vfprintf_internal_r+0x408>
    663c:	d8c02017 	ldw	r3,128(sp)
    6640:	da000404 	addi	r8,sp,16
    6644:	003cd006 	br	5988 <___vfprintf_internal_r+0xeb4>
    6648:	8009883a 	mov	r4,r16
    664c:	da003d15 	stw	r8,244(sp)
    6650:	000b4580 	call	b458 <strlen>
    6654:	d8802e15 	stw	r2,184(sp)
    6658:	da003d17 	ldw	r8,244(sp)
    665c:	103c340e 	bge	r2,zero,5730 <___vfprintf_internal_r+0xc5c>
    6660:	0005883a 	mov	r2,zero
    6664:	003c3206 	br	5730 <___vfprintf_internal_r+0xc5c>
    6668:	d9002c17 	ldw	r4,176(sp)
    666c:	d9801e04 	addi	r6,sp,120
    6670:	b80b883a 	mov	r5,r23
    6674:	000c9f80 	call	c9f8 <__sprint_r>
    6678:	103a181e 	bne	r2,zero,4edc <___vfprintf_internal_r+0x408>
    667c:	d8c02017 	ldw	r3,128(sp)
    6680:	d8801f17 	ldw	r2,124(sp)
    6684:	da000404 	addi	r8,sp,16
    6688:	d9403317 	ldw	r5,204(sp)
    668c:	10800044 	addi	r2,r2,1
    6690:	44000015 	stw	r16,0(r8)
    6694:	28c7883a 	add	r3,r5,r3
    6698:	003b7d06 	br	5490 <___vfprintf_internal_r+0x9bc>
    669c:	010000b4 	movhi	r4,2
    66a0:	213d7584 	addi	r4,r4,-2602
    66a4:	d9003515 	stw	r4,212(sp)
    66a8:	003b1406 	br	52fc <___vfprintf_internal_r+0x828>
    66ac:	013fffc4 	movi	r4,-1
    66b0:	003a3506 	br	4f88 <___vfprintf_internal_r+0x4b4>
    66b4:	0023883a 	mov	r17,zero
    66b8:	003d9d06 	br	5d30 <___vfprintf_internal_r+0x125c>
    66bc:	d9002c17 	ldw	r4,176(sp)
    66c0:	d9801e04 	addi	r6,sp,120
    66c4:	b80b883a 	mov	r5,r23
    66c8:	000c9f80 	call	c9f8 <__sprint_r>
    66cc:	103a031e 	bne	r2,zero,4edc <___vfprintf_internal_r+0x408>
    66d0:	d8c02017 	ldw	r3,128(sp)
    66d4:	da000404 	addi	r8,sp,16
    66d8:	003d9406 	br	5d2c <___vfprintf_internal_r+0x1258>
    66dc:	010000b4 	movhi	r4,2
    66e0:	213d7184 	addi	r4,r4,-2618
    66e4:	d9002b15 	stw	r4,172(sp)
    66e8:	d9002b17 	ldw	r4,172(sp)
    66ec:	1c47883a 	add	r3,r3,r17
    66f0:	10800044 	addi	r2,r2,1
    66f4:	41000015 	stw	r4,0(r8)
    66f8:	44400115 	stw	r17,4(r8)
    66fc:	d8c02015 	stw	r3,128(sp)
    6700:	d8801f15 	stw	r2,124(sp)
    6704:	010001c4 	movi	r4,7
    6708:	20bfd716 	blt	r4,r2,6668 <___vfprintf_internal_r+0x1b94>
    670c:	42000204 	addi	r8,r8,8
    6710:	003fdd06 	br	6688 <___vfprintf_internal_r+0x1bb4>
    6714:	d9002c17 	ldw	r4,176(sp)
    6718:	d9801e04 	addi	r6,sp,120
    671c:	b80b883a 	mov	r5,r23
    6720:	000c9f80 	call	c9f8 <__sprint_r>
    6724:	1039ed1e 	bne	r2,zero,4edc <___vfprintf_internal_r+0x408>
    6728:	d8802617 	ldw	r2,152(sp)
    672c:	d8c02017 	ldw	r3,128(sp)
    6730:	da000404 	addi	r8,sp,16
    6734:	003e1006 	br	5f78 <___vfprintf_internal_r+0x14a4>
    6738:	00800044 	movi	r2,1
    673c:	10803fcc 	andi	r2,r2,255
    6740:	00c00044 	movi	r3,1
    6744:	10fa3526 	beq	r2,r3,501c <___vfprintf_internal_r+0x548>
    6748:	00c00084 	movi	r3,2
    674c:	10fbcb26 	beq	r2,r3,567c <___vfprintf_internal_r+0xba8>
    6750:	003a8f06 	br	5190 <___vfprintf_internal_r+0x6bc>
    6754:	010000b4 	movhi	r4,2
    6758:	213d7584 	addi	r4,r4,-2602
    675c:	d9003515 	stw	r4,212(sp)
    6760:	003b7606 	br	553c <___vfprintf_internal_r+0xa68>
    6764:	d8802917 	ldw	r2,164(sp)
    6768:	00c00184 	movi	r3,6
    676c:	1880012e 	bgeu	r3,r2,6774 <___vfprintf_internal_r+0x1ca0>
    6770:	1805883a 	mov	r2,r3
    6774:	d8802e15 	stw	r2,184(sp)
    6778:	1000ef16 	blt	r2,zero,6b38 <___vfprintf_internal_r+0x2064>
    677c:	040000b4 	movhi	r16,2
    6780:	d8802a15 	stw	r2,168(sp)
    6784:	dcc02d15 	stw	r19,180(sp)
    6788:	d8002915 	stw	zero,164(sp)
    678c:	d8003215 	stw	zero,200(sp)
    6790:	843d6704 	addi	r16,r16,-2660
    6794:	0039883a 	mov	fp,zero
    6798:	003aa206 	br	5224 <___vfprintf_internal_r+0x750>
    679c:	0021883a 	mov	r16,zero
    67a0:	003e0706 	br	5fc0 <___vfprintf_internal_r+0x14ec>
    67a4:	d9002c17 	ldw	r4,176(sp)
    67a8:	d9801e04 	addi	r6,sp,120
    67ac:	b80b883a 	mov	r5,r23
    67b0:	000c9f80 	call	c9f8 <__sprint_r>
    67b4:	1039c91e 	bne	r2,zero,4edc <___vfprintf_internal_r+0x408>
    67b8:	d8802617 	ldw	r2,152(sp)
    67bc:	d9403317 	ldw	r5,204(sp)
    67c0:	d8c02017 	ldw	r3,128(sp)
    67c4:	da000404 	addi	r8,sp,16
    67c8:	2885c83a 	sub	r2,r5,r2
    67cc:	003dfb06 	br	5fbc <___vfprintf_internal_r+0x14e8>
    67d0:	9080004c 	andi	r2,r18,1
    67d4:	103e8f1e 	bne	r2,zero,6214 <___vfprintf_internal_r+0x1740>
    67d8:	d8802117 	ldw	r2,132(sp)
    67dc:	003e9e06 	br	6258 <___vfprintf_internal_r+0x1784>
    67e0:	1025883a 	mov	r18,r2
    67e4:	0039883a 	mov	fp,zero
    67e8:	00800084 	movi	r2,2
    67ec:	003fd306 	br	673c <___vfprintf_internal_r+0x1c68>
    67f0:	07000b44 	movi	fp,45
    67f4:	df002785 	stb	fp,158(sp)
    67f8:	003a4006 	br	50fc <___vfprintf_internal_r+0x628>
    67fc:	00c00b44 	movi	r3,45
    6800:	d8c02785 	stb	r3,158(sp)
    6804:	d8802a15 	stw	r2,168(sp)
    6808:	dc802b17 	ldw	r18,172(sp)
    680c:	d8002915 	stw	zero,164(sp)
    6810:	07000b44 	movi	fp,45
    6814:	003a8006 	br	5218 <___vfprintf_internal_r+0x744>
    6818:	040000b4 	movhi	r16,2
    681c:	843d5c04 	addi	r16,r16,-2704
    6820:	003f4706 	br	6540 <___vfprintf_internal_r+0x1a6c>
    6824:	d8c02d17 	ldw	r3,180(sp)
    6828:	d9002f17 	ldw	r4,188(sp)
    682c:	18800017 	ldw	r2,0(r3)
    6830:	18c00104 	addi	r3,r3,4
    6834:	d8c02d15 	stw	r3,180(sp)
    6838:	11000015 	stw	r4,0(r2)
    683c:	0038dd06 	br	4bb4 <___vfprintf_internal_r+0xe0>
    6840:	dd802617 	ldw	r22,152(sp)
    6844:	00bfff44 	movi	r2,-3
    6848:	b0801c16 	blt	r22,r2,68bc <___vfprintf_internal_r+0x1de8>
    684c:	d9402917 	ldw	r5,164(sp)
    6850:	2d801a16 	blt	r5,r22,68bc <___vfprintf_internal_r+0x1de8>
    6854:	dd803215 	stw	r22,200(sp)
    6858:	003e8906 	br	6280 <___vfprintf_internal_r+0x17ac>
    685c:	010000b4 	movhi	r4,2
    6860:	213d7184 	addi	r4,r4,-2618
    6864:	d9002b15 	stw	r4,172(sp)
    6868:	003c9106 	br	5ab0 <___vfprintf_internal_r+0xfdc>
    686c:	e005883a 	mov	r2,fp
    6870:	003e7906 	br	6258 <___vfprintf_internal_r+0x1784>
    6874:	d9402917 	ldw	r5,164(sp)
    6878:	df002783 	ldbu	fp,158(sp)
    687c:	dcc02d15 	stw	r19,180(sp)
    6880:	d9402a15 	stw	r5,168(sp)
    6884:	d9402e15 	stw	r5,184(sp)
    6888:	d8002915 	stw	zero,164(sp)
    688c:	d8003215 	stw	zero,200(sp)
    6890:	003a5d06 	br	5208 <___vfprintf_internal_r+0x734>
    6894:	9080004c 	andi	r2,r18,1
    6898:	0039883a 	mov	fp,zero
    689c:	10000426 	beq	r2,zero,68b0 <___vfprintf_internal_r+0x1ddc>
    68a0:	00800c04 	movi	r2,48
    68a4:	dc001dc4 	addi	r16,sp,119
    68a8:	d8801dc5 	stb	r2,119(sp)
    68ac:	003b8006 	br	56b0 <___vfprintf_internal_r+0xbdc>
    68b0:	d8002e15 	stw	zero,184(sp)
    68b4:	dc001e04 	addi	r16,sp,120
    68b8:	003a4d06 	br	51f0 <___vfprintf_internal_r+0x71c>
    68bc:	8c7fff84 	addi	r17,r17,-2
    68c0:	b5bfffc4 	addi	r22,r22,-1
    68c4:	dd802615 	stw	r22,152(sp)
    68c8:	dc4022c5 	stb	r17,139(sp)
    68cc:	b000bf16 	blt	r22,zero,6bcc <___vfprintf_internal_r+0x20f8>
    68d0:	00800ac4 	movi	r2,43
    68d4:	d8802305 	stb	r2,140(sp)
    68d8:	00800244 	movi	r2,9
    68dc:	15807016 	blt	r2,r22,6aa0 <___vfprintf_internal_r+0x1fcc>
    68e0:	00800c04 	movi	r2,48
    68e4:	b5800c04 	addi	r22,r22,48
    68e8:	d8802345 	stb	r2,141(sp)
    68ec:	dd802385 	stb	r22,142(sp)
    68f0:	d88023c4 	addi	r2,sp,143
    68f4:	df0022c4 	addi	fp,sp,139
    68f8:	d8c03317 	ldw	r3,204(sp)
    68fc:	1739c83a 	sub	fp,r2,fp
    6900:	d9003317 	ldw	r4,204(sp)
    6904:	e0c7883a 	add	r3,fp,r3
    6908:	df003a15 	stw	fp,232(sp)
    690c:	d8c02e15 	stw	r3,184(sp)
    6910:	00800044 	movi	r2,1
    6914:	1100b30e 	bge	r2,r4,6be4 <___vfprintf_internal_r+0x2110>
    6918:	d8c02e17 	ldw	r3,184(sp)
    691c:	18c00044 	addi	r3,r3,1
    6920:	d8c02e15 	stw	r3,184(sp)
    6924:	1805883a 	mov	r2,r3
    6928:	1800ac16 	blt	r3,zero,6bdc <___vfprintf_internal_r+0x2108>
    692c:	d8003215 	stw	zero,200(sp)
    6930:	003e5d06 	br	62a8 <___vfprintf_internal_r+0x17d4>
    6934:	d9002c17 	ldw	r4,176(sp)
    6938:	d9801e04 	addi	r6,sp,120
    693c:	b80b883a 	mov	r5,r23
    6940:	000c9f80 	call	c9f8 <__sprint_r>
    6944:	1039651e 	bne	r2,zero,4edc <___vfprintf_internal_r+0x408>
    6948:	dc402617 	ldw	r17,152(sp)
    694c:	d8c02017 	ldw	r3,128(sp)
    6950:	d8801f17 	ldw	r2,124(sp)
    6954:	da000404 	addi	r8,sp,16
    6958:	003ed606 	br	64b4 <___vfprintf_internal_r+0x19e0>
    695c:	582b883a 	mov	r21,r11
    6960:	d8002915 	stw	zero,164(sp)
    6964:	0038bd06 	br	4c5c <___vfprintf_internal_r+0x188>
    6968:	d8802917 	ldw	r2,164(sp)
    696c:	103e071e 	bne	r2,zero,618c <___vfprintf_internal_r+0x16b8>
    6970:	dc002915 	stw	r16,164(sp)
    6974:	003e0506 	br	618c <___vfprintf_internal_r+0x16b8>
    6978:	d9002917 	ldw	r4,164(sp)
    697c:	20c00044 	addi	r3,r4,1
    6980:	003e0f06 	br	61c0 <___vfprintf_internal_r+0x16ec>
    6984:	01400184 	movi	r5,6
    6988:	d9402915 	stw	r5,164(sp)
    698c:	003dff06 	br	618c <___vfprintf_internal_r+0x16b8>
    6990:	d8802104 	addi	r2,sp,132
    6994:	d8800315 	stw	r2,12(sp)
    6998:	d8802504 	addi	r2,sp,148
    699c:	d8800215 	stw	r2,8(sp)
    69a0:	d8802604 	addi	r2,sp,152
    69a4:	d8800115 	stw	r2,4(sp)
    69a8:	d8802917 	ldw	r2,164(sp)
    69ac:	d9403617 	ldw	r5,216(sp)
    69b0:	d9002c17 	ldw	r4,176(sp)
    69b4:	d8800015 	stw	r2,0(sp)
    69b8:	01c000c4 	movi	r7,3
    69bc:	980d883a 	mov	r6,r19
    69c0:	da003d15 	stw	r8,244(sp)
    69c4:	00070f80 	call	70f8 <_dtoa_r>
    69c8:	d8c02917 	ldw	r3,164(sp)
    69cc:	da003d17 	ldw	r8,244(sp)
    69d0:	1021883a 	mov	r16,r2
    69d4:	10f9883a 	add	fp,r2,r3
    69d8:	81000007 	ldb	r4,0(r16)
    69dc:	00800c04 	movi	r2,48
    69e0:	20805e26 	beq	r4,r2,6b5c <___vfprintf_internal_r+0x2088>
    69e4:	d8c02617 	ldw	r3,152(sp)
    69e8:	e0f9883a 	add	fp,fp,r3
    69ec:	003e0a06 	br	6218 <___vfprintf_internal_r+0x1744>
    69f0:	00c00b44 	movi	r3,45
    69f4:	24e0003c 	xorhi	r19,r4,32768
    69f8:	d8c02a05 	stb	r3,168(sp)
    69fc:	003de906 	br	61a4 <___vfprintf_internal_r+0x16d0>
    6a00:	d8c03217 	ldw	r3,200(sp)
    6a04:	00c07a0e 	bge	zero,r3,6bf0 <___vfprintf_internal_r+0x211c>
    6a08:	00800044 	movi	r2,1
    6a0c:	d9003317 	ldw	r4,204(sp)
    6a10:	1105883a 	add	r2,r2,r4
    6a14:	d8802e15 	stw	r2,184(sp)
    6a18:	10004e16 	blt	r2,zero,6b54 <___vfprintf_internal_r+0x2080>
    6a1c:	044019c4 	movi	r17,103
    6a20:	003e2106 	br	62a8 <___vfprintf_internal_r+0x17d4>
    6a24:	d9002917 	ldw	r4,164(sp)
    6a28:	d8802104 	addi	r2,sp,132
    6a2c:	d8800315 	stw	r2,12(sp)
    6a30:	d9000015 	stw	r4,0(sp)
    6a34:	d8802504 	addi	r2,sp,148
    6a38:	d9403617 	ldw	r5,216(sp)
    6a3c:	d9002c17 	ldw	r4,176(sp)
    6a40:	d8800215 	stw	r2,8(sp)
    6a44:	d8802604 	addi	r2,sp,152
    6a48:	d8800115 	stw	r2,4(sp)
    6a4c:	01c000c4 	movi	r7,3
    6a50:	980d883a 	mov	r6,r19
    6a54:	da003d15 	stw	r8,244(sp)
    6a58:	00070f80 	call	70f8 <_dtoa_r>
    6a5c:	d8c02917 	ldw	r3,164(sp)
    6a60:	da003d17 	ldw	r8,244(sp)
    6a64:	1021883a 	mov	r16,r2
    6a68:	00801184 	movi	r2,70
    6a6c:	80f9883a 	add	fp,r16,r3
    6a70:	88bfd926 	beq	r17,r2,69d8 <___vfprintf_internal_r+0x1f04>
    6a74:	003de806 	br	6218 <___vfprintf_internal_r+0x1744>
    6a78:	d9002917 	ldw	r4,164(sp)
    6a7c:	00c04d0e 	bge	zero,r3,6bb4 <___vfprintf_internal_r+0x20e0>
    6a80:	2000441e 	bne	r4,zero,6b94 <___vfprintf_internal_r+0x20c0>
    6a84:	9480004c 	andi	r18,r18,1
    6a88:	9000421e 	bne	r18,zero,6b94 <___vfprintf_internal_r+0x20c0>
    6a8c:	1805883a 	mov	r2,r3
    6a90:	18007016 	blt	r3,zero,6c54 <___vfprintf_internal_r+0x2180>
    6a94:	d8c03217 	ldw	r3,200(sp)
    6a98:	d8c02e15 	stw	r3,184(sp)
    6a9c:	003e0206 	br	62a8 <___vfprintf_internal_r+0x17d4>
    6aa0:	df0022c4 	addi	fp,sp,139
    6aa4:	dc002915 	stw	r16,164(sp)
    6aa8:	4027883a 	mov	r19,r8
    6aac:	e021883a 	mov	r16,fp
    6ab0:	b009883a 	mov	r4,r22
    6ab4:	01400284 	movi	r5,10
    6ab8:	000ff280 	call	ff28 <__modsi3>
    6abc:	10800c04 	addi	r2,r2,48
    6ac0:	843fffc4 	addi	r16,r16,-1
    6ac4:	b009883a 	mov	r4,r22
    6ac8:	01400284 	movi	r5,10
    6acc:	80800005 	stb	r2,0(r16)
    6ad0:	000fea40 	call	fea4 <__divsi3>
    6ad4:	102d883a 	mov	r22,r2
    6ad8:	00800244 	movi	r2,9
    6adc:	15bff416 	blt	r2,r22,6ab0 <___vfprintf_internal_r+0x1fdc>
    6ae0:	9811883a 	mov	r8,r19
    6ae4:	b0800c04 	addi	r2,r22,48
    6ae8:	8027883a 	mov	r19,r16
    6aec:	997fffc4 	addi	r5,r19,-1
    6af0:	98bfffc5 	stb	r2,-1(r19)
    6af4:	dc002917 	ldw	r16,164(sp)
    6af8:	2f006a2e 	bgeu	r5,fp,6ca4 <___vfprintf_internal_r+0x21d0>
    6afc:	d9c02384 	addi	r7,sp,142
    6b00:	3ccfc83a 	sub	r7,r7,r19
    6b04:	d9002344 	addi	r4,sp,141
    6b08:	e1cf883a 	add	r7,fp,r7
    6b0c:	00000106 	br	6b14 <___vfprintf_internal_r+0x2040>
    6b10:	28800003 	ldbu	r2,0(r5)
    6b14:	20800005 	stb	r2,0(r4)
    6b18:	21000044 	addi	r4,r4,1
    6b1c:	29400044 	addi	r5,r5,1
    6b20:	393ffb1e 	bne	r7,r4,6b10 <___vfprintf_internal_r+0x203c>
    6b24:	d8802304 	addi	r2,sp,140
    6b28:	14c5c83a 	sub	r2,r2,r19
    6b2c:	d8c02344 	addi	r3,sp,141
    6b30:	1885883a 	add	r2,r3,r2
    6b34:	003f7006 	br	68f8 <___vfprintf_internal_r+0x1e24>
    6b38:	0005883a 	mov	r2,zero
    6b3c:	003f0f06 	br	677c <___vfprintf_internal_r+0x1ca8>
    6b40:	d8c03217 	ldw	r3,200(sp)
    6b44:	18c00044 	addi	r3,r3,1
    6b48:	d8c02e15 	stw	r3,184(sp)
    6b4c:	1805883a 	mov	r2,r3
    6b50:	183fb20e 	bge	r3,zero,6a1c <___vfprintf_internal_r+0x1f48>
    6b54:	0005883a 	mov	r2,zero
    6b58:	003fb006 	br	6a1c <___vfprintf_internal_r+0x1f48>
    6b5c:	d9003617 	ldw	r4,216(sp)
    6b60:	000d883a 	mov	r6,zero
    6b64:	000f883a 	mov	r7,zero
    6b68:	980b883a 	mov	r5,r19
    6b6c:	d8c03c15 	stw	r3,240(sp)
    6b70:	da003d15 	stw	r8,244(sp)
    6b74:	00111ec0 	call	111ec <__eqdf2>
    6b78:	d8c03c17 	ldw	r3,240(sp)
    6b7c:	da003d17 	ldw	r8,244(sp)
    6b80:	103f9826 	beq	r2,zero,69e4 <___vfprintf_internal_r+0x1f10>
    6b84:	00800044 	movi	r2,1
    6b88:	10c7c83a 	sub	r3,r2,r3
    6b8c:	d8c02615 	stw	r3,152(sp)
    6b90:	003f9506 	br	69e8 <___vfprintf_internal_r+0x1f14>
    6b94:	d9002917 	ldw	r4,164(sp)
    6b98:	d8c03217 	ldw	r3,200(sp)
    6b9c:	20800044 	addi	r2,r4,1
    6ba0:	1885883a 	add	r2,r3,r2
    6ba4:	d8802e15 	stw	r2,184(sp)
    6ba8:	103dbf0e 	bge	r2,zero,62a8 <___vfprintf_internal_r+0x17d4>
    6bac:	0005883a 	mov	r2,zero
    6bb0:	003dbd06 	br	62a8 <___vfprintf_internal_r+0x17d4>
    6bb4:	2000211e 	bne	r4,zero,6c3c <___vfprintf_internal_r+0x2168>
    6bb8:	9480004c 	andi	r18,r18,1
    6bbc:	90001f1e 	bne	r18,zero,6c3c <___vfprintf_internal_r+0x2168>
    6bc0:	00800044 	movi	r2,1
    6bc4:	d8802e15 	stw	r2,184(sp)
    6bc8:	003db706 	br	62a8 <___vfprintf_internal_r+0x17d4>
    6bcc:	00800b44 	movi	r2,45
    6bd0:	05adc83a 	sub	r22,zero,r22
    6bd4:	d8802305 	stb	r2,140(sp)
    6bd8:	003f3f06 	br	68d8 <___vfprintf_internal_r+0x1e04>
    6bdc:	0005883a 	mov	r2,zero
    6be0:	003f5206 	br	692c <___vfprintf_internal_r+0x1e58>
    6be4:	90a4703a 	and	r18,r18,r2
    6be8:	903f4e26 	beq	r18,zero,6924 <___vfprintf_internal_r+0x1e50>
    6bec:	003f4a06 	br	6918 <___vfprintf_internal_r+0x1e44>
    6bf0:	00800084 	movi	r2,2
    6bf4:	10c5c83a 	sub	r2,r2,r3
    6bf8:	003f8406 	br	6a0c <___vfprintf_internal_r+0x1f38>
    6bfc:	d8802d17 	ldw	r2,180(sp)
    6c00:	d9002d17 	ldw	r4,180(sp)
    6c04:	ac400043 	ldbu	r17,1(r21)
    6c08:	10800017 	ldw	r2,0(r2)
    6c0c:	582b883a 	mov	r21,r11
    6c10:	d8802915 	stw	r2,164(sp)
    6c14:	20800104 	addi	r2,r4,4
    6c18:	d9002917 	ldw	r4,164(sp)
    6c1c:	d8802d15 	stw	r2,180(sp)
    6c20:	203e7a0e 	bge	r4,zero,660c <___vfprintf_internal_r+0x1b38>
    6c24:	8c403fcc 	andi	r17,r17,255
    6c28:	00bfffc4 	movi	r2,-1
    6c2c:	8c40201c 	xori	r17,r17,128
    6c30:	d8802915 	stw	r2,164(sp)
    6c34:	8c7fe004 	addi	r17,r17,-128
    6c38:	00380706 	br	4c58 <___vfprintf_internal_r+0x184>
    6c3c:	d8c02917 	ldw	r3,164(sp)
    6c40:	18c00084 	addi	r3,r3,2
    6c44:	d8c02e15 	stw	r3,184(sp)
    6c48:	1805883a 	mov	r2,r3
    6c4c:	183d960e 	bge	r3,zero,62a8 <___vfprintf_internal_r+0x17d4>
    6c50:	003fd606 	br	6bac <___vfprintf_internal_r+0x20d8>
    6c54:	0005883a 	mov	r2,zero
    6c58:	003f8e06 	br	6a94 <___vfprintf_internal_r+0x1fc0>
    6c5c:	9080004c 	andi	r2,r18,1
    6c60:	103f811e 	bne	r2,zero,6a68 <___vfprintf_internal_r+0x1f94>
    6c64:	d8802117 	ldw	r2,132(sp)
    6c68:	1405c83a 	sub	r2,r2,r16
    6c6c:	d8803315 	stw	r2,204(sp)
    6c70:	b47ef326 	beq	r22,r17,6840 <___vfprintf_internal_r+0x1d6c>
    6c74:	dd802617 	ldw	r22,152(sp)
    6c78:	003f1106 	br	68c0 <___vfprintf_internal_r+0x1dec>
    6c7c:	d9c02785 	stb	r7,158(sp)
    6c80:	00390406 	br	5094 <___vfprintf_internal_r+0x5c0>
    6c84:	d9c02785 	stb	r7,158(sp)
    6c88:	0038d306 	br	4fd8 <___vfprintf_internal_r+0x504>
    6c8c:	d9c02785 	stb	r7,158(sp)
    6c90:	003a6106 	br	5618 <___vfprintf_internal_r+0xb44>
    6c94:	d9c02785 	stb	r7,158(sp)
    6c98:	003af806 	br	587c <___vfprintf_internal_r+0xda8>
    6c9c:	0005883a 	mov	r2,zero
    6ca0:	003d7e06 	br	629c <___vfprintf_internal_r+0x17c8>
    6ca4:	d8802344 	addi	r2,sp,141
    6ca8:	003f1306 	br	68f8 <___vfprintf_internal_r+0x1e24>
    6cac:	d9c02785 	stb	r7,158(sp)
    6cb0:	00392306 	br	5140 <___vfprintf_internal_r+0x66c>
    6cb4:	d9c02785 	stb	r7,158(sp)
    6cb8:	003aa906 	br	5760 <___vfprintf_internal_r+0xc8c>
    6cbc:	d9c02785 	stb	r7,158(sp)
    6cc0:	003a3d06 	br	55b8 <___vfprintf_internal_r+0xae4>
    6cc4:	d9c02785 	stb	r7,158(sp)
    6cc8:	003aca06 	br	57f4 <___vfprintf_internal_r+0xd20>

00006ccc <__vfprintf_internal>:
    6ccc:	008000b4 	movhi	r2,2
    6cd0:	10864604 	addi	r2,r2,6424
    6cd4:	300f883a 	mov	r7,r6
    6cd8:	280d883a 	mov	r6,r5
    6cdc:	200b883a 	mov	r5,r4
    6ce0:	11000017 	ldw	r4,0(r2)
    6ce4:	0004ad41 	jmpi	4ad4 <___vfprintf_internal_r>

00006ce8 <__sbprintf>:
    6ce8:	2880030b 	ldhu	r2,12(r5)
    6cec:	2ac01917 	ldw	r11,100(r5)
    6cf0:	2a80038b 	ldhu	r10,14(r5)
    6cf4:	2a400717 	ldw	r9,28(r5)
    6cf8:	2a000917 	ldw	r8,36(r5)
    6cfc:	defee204 	addi	sp,sp,-1144
    6d00:	00c10004 	movi	r3,1024
    6d04:	dc011a15 	stw	r16,1128(sp)
    6d08:	10bfff4c 	andi	r2,r2,65533
    6d0c:	2821883a 	mov	r16,r5
    6d10:	d8cb883a 	add	r5,sp,r3
    6d14:	dc811c15 	stw	r18,1136(sp)
    6d18:	dc411b15 	stw	r17,1132(sp)
    6d1c:	dfc11d15 	stw	ra,1140(sp)
    6d20:	2025883a 	mov	r18,r4
    6d24:	d881030d 	sth	r2,1036(sp)
    6d28:	dac11915 	stw	r11,1124(sp)
    6d2c:	da81038d 	sth	r10,1038(sp)
    6d30:	da410715 	stw	r9,1052(sp)
    6d34:	da010915 	stw	r8,1060(sp)
    6d38:	dec10015 	stw	sp,1024(sp)
    6d3c:	dec10415 	stw	sp,1040(sp)
    6d40:	d8c10215 	stw	r3,1032(sp)
    6d44:	d8c10515 	stw	r3,1044(sp)
    6d48:	d8010615 	stw	zero,1048(sp)
    6d4c:	0004ad40 	call	4ad4 <___vfprintf_internal_r>
    6d50:	1023883a 	mov	r17,r2
    6d54:	10000416 	blt	r2,zero,6d68 <__sbprintf+0x80>
    6d58:	d9410004 	addi	r5,sp,1024
    6d5c:	9009883a 	mov	r4,r18
    6d60:	000899c0 	call	899c <_fflush_r>
    6d64:	10000d1e 	bne	r2,zero,6d9c <__sbprintf+0xb4>
    6d68:	d881030b 	ldhu	r2,1036(sp)
    6d6c:	1080100c 	andi	r2,r2,64
    6d70:	10000326 	beq	r2,zero,6d80 <__sbprintf+0x98>
    6d74:	8080030b 	ldhu	r2,12(r16)
    6d78:	10801014 	ori	r2,r2,64
    6d7c:	8080030d 	sth	r2,12(r16)
    6d80:	8805883a 	mov	r2,r17
    6d84:	dfc11d17 	ldw	ra,1140(sp)
    6d88:	dc811c17 	ldw	r18,1136(sp)
    6d8c:	dc411b17 	ldw	r17,1132(sp)
    6d90:	dc011a17 	ldw	r16,1128(sp)
    6d94:	dec11e04 	addi	sp,sp,1144
    6d98:	f800283a 	ret
    6d9c:	047fffc4 	movi	r17,-1
    6da0:	003ff106 	br	6d68 <__sbprintf+0x80>

00006da4 <__swsetup_r>:
    6da4:	008000b4 	movhi	r2,2
    6da8:	defffd04 	addi	sp,sp,-12
    6dac:	10864604 	addi	r2,r2,6424
    6db0:	dc400115 	stw	r17,4(sp)
    6db4:	2023883a 	mov	r17,r4
    6db8:	11000017 	ldw	r4,0(r2)
    6dbc:	dc000015 	stw	r16,0(sp)
    6dc0:	dfc00215 	stw	ra,8(sp)
    6dc4:	2821883a 	mov	r16,r5
    6dc8:	20000226 	beq	r4,zero,6dd4 <__swsetup_r+0x30>
    6dcc:	20800e17 	ldw	r2,56(r4)
    6dd0:	10003126 	beq	r2,zero,6e98 <__swsetup_r+0xf4>
    6dd4:	8080030b 	ldhu	r2,12(r16)
    6dd8:	10c0020c 	andi	r3,r2,8
    6ddc:	1009883a 	mov	r4,r2
    6de0:	18000f26 	beq	r3,zero,6e20 <__swsetup_r+0x7c>
    6de4:	80c00417 	ldw	r3,16(r16)
    6de8:	18001526 	beq	r3,zero,6e40 <__swsetup_r+0x9c>
    6dec:	1100004c 	andi	r4,r2,1
    6df0:	20001c1e 	bne	r4,zero,6e64 <__swsetup_r+0xc0>
    6df4:	1080008c 	andi	r2,r2,2
    6df8:	1000291e 	bne	r2,zero,6ea0 <__swsetup_r+0xfc>
    6dfc:	80800517 	ldw	r2,20(r16)
    6e00:	80800215 	stw	r2,8(r16)
    6e04:	18001c26 	beq	r3,zero,6e78 <__swsetup_r+0xd4>
    6e08:	0005883a 	mov	r2,zero
    6e0c:	dfc00217 	ldw	ra,8(sp)
    6e10:	dc400117 	ldw	r17,4(sp)
    6e14:	dc000017 	ldw	r16,0(sp)
    6e18:	dec00304 	addi	sp,sp,12
    6e1c:	f800283a 	ret
    6e20:	2080040c 	andi	r2,r4,16
    6e24:	10002e26 	beq	r2,zero,6ee0 <__swsetup_r+0x13c>
    6e28:	2080010c 	andi	r2,r4,4
    6e2c:	10001e1e 	bne	r2,zero,6ea8 <__swsetup_r+0x104>
    6e30:	80c00417 	ldw	r3,16(r16)
    6e34:	20800214 	ori	r2,r4,8
    6e38:	8080030d 	sth	r2,12(r16)
    6e3c:	183feb1e 	bne	r3,zero,6dec <__swsetup_r+0x48>
    6e40:	1100a00c 	andi	r4,r2,640
    6e44:	01408004 	movi	r5,512
    6e48:	217fe826 	beq	r4,r5,6dec <__swsetup_r+0x48>
    6e4c:	800b883a 	mov	r5,r16
    6e50:	8809883a 	mov	r4,r17
    6e54:	00094600 	call	9460 <__smakebuf_r>
    6e58:	8080030b 	ldhu	r2,12(r16)
    6e5c:	80c00417 	ldw	r3,16(r16)
    6e60:	003fe206 	br	6dec <__swsetup_r+0x48>
    6e64:	80800517 	ldw	r2,20(r16)
    6e68:	80000215 	stw	zero,8(r16)
    6e6c:	0085c83a 	sub	r2,zero,r2
    6e70:	80800615 	stw	r2,24(r16)
    6e74:	183fe41e 	bne	r3,zero,6e08 <__swsetup_r+0x64>
    6e78:	80c0030b 	ldhu	r3,12(r16)
    6e7c:	0005883a 	mov	r2,zero
    6e80:	1900200c 	andi	r4,r3,128
    6e84:	203fe126 	beq	r4,zero,6e0c <__swsetup_r+0x68>
    6e88:	18c01014 	ori	r3,r3,64
    6e8c:	80c0030d 	sth	r3,12(r16)
    6e90:	00bfffc4 	movi	r2,-1
    6e94:	003fdd06 	br	6e0c <__swsetup_r+0x68>
    6e98:	0008d780 	call	8d78 <__sinit>
    6e9c:	003fcd06 	br	6dd4 <__swsetup_r+0x30>
    6ea0:	0005883a 	mov	r2,zero
    6ea4:	003fd606 	br	6e00 <__swsetup_r+0x5c>
    6ea8:	81400c17 	ldw	r5,48(r16)
    6eac:	28000626 	beq	r5,zero,6ec8 <__swsetup_r+0x124>
    6eb0:	80801004 	addi	r2,r16,64
    6eb4:	28800326 	beq	r5,r2,6ec4 <__swsetup_r+0x120>
    6eb8:	8809883a 	mov	r4,r17
    6ebc:	0008eec0 	call	8eec <_free_r>
    6ec0:	8100030b 	ldhu	r4,12(r16)
    6ec4:	80000c15 	stw	zero,48(r16)
    6ec8:	80c00417 	ldw	r3,16(r16)
    6ecc:	00bff6c4 	movi	r2,-37
    6ed0:	1108703a 	and	r4,r2,r4
    6ed4:	80000115 	stw	zero,4(r16)
    6ed8:	80c00015 	stw	r3,0(r16)
    6edc:	003fd506 	br	6e34 <__swsetup_r+0x90>
    6ee0:	00800244 	movi	r2,9
    6ee4:	88800015 	stw	r2,0(r17)
    6ee8:	20801014 	ori	r2,r4,64
    6eec:	8080030d 	sth	r2,12(r16)
    6ef0:	00bfffc4 	movi	r2,-1
    6ef4:	003fc506 	br	6e0c <__swsetup_r+0x68>

00006ef8 <quorem>:
    6ef8:	defff704 	addi	sp,sp,-36
    6efc:	dc800215 	stw	r18,8(sp)
    6f00:	20800417 	ldw	r2,16(r4)
    6f04:	2c800417 	ldw	r18,16(r5)
    6f08:	dfc00815 	stw	ra,32(sp)
    6f0c:	ddc00715 	stw	r23,28(sp)
    6f10:	dd800615 	stw	r22,24(sp)
    6f14:	dd400515 	stw	r21,20(sp)
    6f18:	dd000415 	stw	r20,16(sp)
    6f1c:	dcc00315 	stw	r19,12(sp)
    6f20:	dc400115 	stw	r17,4(sp)
    6f24:	dc000015 	stw	r16,0(sp)
    6f28:	14807116 	blt	r2,r18,70f0 <quorem+0x1f8>
    6f2c:	94bfffc4 	addi	r18,r18,-1
    6f30:	94ad883a 	add	r22,r18,r18
    6f34:	b5ad883a 	add	r22,r22,r22
    6f38:	2c400504 	addi	r17,r5,20
    6f3c:	8da9883a 	add	r20,r17,r22
    6f40:	25400504 	addi	r21,r4,20
    6f44:	282f883a 	mov	r23,r5
    6f48:	adad883a 	add	r22,r21,r22
    6f4c:	a1400017 	ldw	r5,0(r20)
    6f50:	2021883a 	mov	r16,r4
    6f54:	b1000017 	ldw	r4,0(r22)
    6f58:	29400044 	addi	r5,r5,1
    6f5c:	000ff9c0 	call	ff9c <__udivsi3>
    6f60:	1027883a 	mov	r19,r2
    6f64:	10002c26 	beq	r2,zero,7018 <quorem+0x120>
    6f68:	a813883a 	mov	r9,r21
    6f6c:	880b883a 	mov	r5,r17
    6f70:	0009883a 	mov	r4,zero
    6f74:	000d883a 	mov	r6,zero
    6f78:	2a000017 	ldw	r8,0(r5)
    6f7c:	49c00017 	ldw	r7,0(r9)
    6f80:	29400104 	addi	r5,r5,4
    6f84:	40bfffcc 	andi	r2,r8,65535
    6f88:	14c5383a 	mul	r2,r2,r19
    6f8c:	4010d43a 	srli	r8,r8,16
    6f90:	38ffffcc 	andi	r3,r7,65535
    6f94:	1105883a 	add	r2,r2,r4
    6f98:	1008d43a 	srli	r4,r2,16
    6f9c:	44d1383a 	mul	r8,r8,r19
    6fa0:	198d883a 	add	r6,r3,r6
    6fa4:	10ffffcc 	andi	r3,r2,65535
    6fa8:	30c7c83a 	sub	r3,r6,r3
    6fac:	380ed43a 	srli	r7,r7,16
    6fb0:	4105883a 	add	r2,r8,r4
    6fb4:	180dd43a 	srai	r6,r3,16
    6fb8:	113fffcc 	andi	r4,r2,65535
    6fbc:	390fc83a 	sub	r7,r7,r4
    6fc0:	398d883a 	add	r6,r7,r6
    6fc4:	300e943a 	slli	r7,r6,16
    6fc8:	18ffffcc 	andi	r3,r3,65535
    6fcc:	1008d43a 	srli	r4,r2,16
    6fd0:	38ceb03a 	or	r7,r7,r3
    6fd4:	49c00015 	stw	r7,0(r9)
    6fd8:	300dd43a 	srai	r6,r6,16
    6fdc:	4a400104 	addi	r9,r9,4
    6fe0:	a17fe52e 	bgeu	r20,r5,6f78 <quorem+0x80>
    6fe4:	b0800017 	ldw	r2,0(r22)
    6fe8:	10000b1e 	bne	r2,zero,7018 <quorem+0x120>
    6fec:	b0bfff04 	addi	r2,r22,-4
    6ff0:	a880082e 	bgeu	r21,r2,7014 <quorem+0x11c>
    6ff4:	b0ffff17 	ldw	r3,-4(r22)
    6ff8:	18000326 	beq	r3,zero,7008 <quorem+0x110>
    6ffc:	00000506 	br	7014 <quorem+0x11c>
    7000:	10c00017 	ldw	r3,0(r2)
    7004:	1800031e 	bne	r3,zero,7014 <quorem+0x11c>
    7008:	10bfff04 	addi	r2,r2,-4
    700c:	94bfffc4 	addi	r18,r18,-1
    7010:	a8bffb36 	bltu	r21,r2,7000 <quorem+0x108>
    7014:	84800415 	stw	r18,16(r16)
    7018:	b80b883a 	mov	r5,r23
    701c:	8009883a 	mov	r4,r16
    7020:	000aa440 	call	aa44 <__mcmp>
    7024:	10002616 	blt	r2,zero,70c0 <quorem+0x1c8>
    7028:	9cc00044 	addi	r19,r19,1
    702c:	a805883a 	mov	r2,r21
    7030:	000b883a 	mov	r5,zero
    7034:	11000017 	ldw	r4,0(r2)
    7038:	89800017 	ldw	r6,0(r17)
    703c:	10800104 	addi	r2,r2,4
    7040:	20ffffcc 	andi	r3,r4,65535
    7044:	194b883a 	add	r5,r3,r5
    7048:	30ffffcc 	andi	r3,r6,65535
    704c:	28c7c83a 	sub	r3,r5,r3
    7050:	300cd43a 	srli	r6,r6,16
    7054:	2008d43a 	srli	r4,r4,16
    7058:	180bd43a 	srai	r5,r3,16
    705c:	18ffffcc 	andi	r3,r3,65535
    7060:	2189c83a 	sub	r4,r4,r6
    7064:	2149883a 	add	r4,r4,r5
    7068:	200c943a 	slli	r6,r4,16
    706c:	8c400104 	addi	r17,r17,4
    7070:	200bd43a 	srai	r5,r4,16
    7074:	30c6b03a 	or	r3,r6,r3
    7078:	10ffff15 	stw	r3,-4(r2)
    707c:	a47fed2e 	bgeu	r20,r17,7034 <quorem+0x13c>
    7080:	9485883a 	add	r2,r18,r18
    7084:	1085883a 	add	r2,r2,r2
    7088:	a887883a 	add	r3,r21,r2
    708c:	18800017 	ldw	r2,0(r3)
    7090:	10000b1e 	bne	r2,zero,70c0 <quorem+0x1c8>
    7094:	18bfff04 	addi	r2,r3,-4
    7098:	a880082e 	bgeu	r21,r2,70bc <quorem+0x1c4>
    709c:	18ffff17 	ldw	r3,-4(r3)
    70a0:	18000326 	beq	r3,zero,70b0 <quorem+0x1b8>
    70a4:	00000506 	br	70bc <quorem+0x1c4>
    70a8:	10c00017 	ldw	r3,0(r2)
    70ac:	1800031e 	bne	r3,zero,70bc <quorem+0x1c4>
    70b0:	10bfff04 	addi	r2,r2,-4
    70b4:	94bfffc4 	addi	r18,r18,-1
    70b8:	a8bffb36 	bltu	r21,r2,70a8 <quorem+0x1b0>
    70bc:	84800415 	stw	r18,16(r16)
    70c0:	9805883a 	mov	r2,r19
    70c4:	dfc00817 	ldw	ra,32(sp)
    70c8:	ddc00717 	ldw	r23,28(sp)
    70cc:	dd800617 	ldw	r22,24(sp)
    70d0:	dd400517 	ldw	r21,20(sp)
    70d4:	dd000417 	ldw	r20,16(sp)
    70d8:	dcc00317 	ldw	r19,12(sp)
    70dc:	dc800217 	ldw	r18,8(sp)
    70e0:	dc400117 	ldw	r17,4(sp)
    70e4:	dc000017 	ldw	r16,0(sp)
    70e8:	dec00904 	addi	sp,sp,36
    70ec:	f800283a 	ret
    70f0:	0005883a 	mov	r2,zero
    70f4:	003ff306 	br	70c4 <quorem+0x1cc>

000070f8 <_dtoa_r>:
    70f8:	20801017 	ldw	r2,64(r4)
    70fc:	deffde04 	addi	sp,sp,-136
    7100:	df002015 	stw	fp,128(sp)
    7104:	dcc01b15 	stw	r19,108(sp)
    7108:	dc801a15 	stw	r18,104(sp)
    710c:	dc401915 	stw	r17,100(sp)
    7110:	dc001815 	stw	r16,96(sp)
    7114:	dfc02115 	stw	ra,132(sp)
    7118:	ddc01f15 	stw	r23,124(sp)
    711c:	dd801e15 	stw	r22,120(sp)
    7120:	dd401d15 	stw	r21,116(sp)
    7124:	dd001c15 	stw	r20,112(sp)
    7128:	d9c00315 	stw	r7,12(sp)
    712c:	2039883a 	mov	fp,r4
    7130:	3023883a 	mov	r17,r6
    7134:	2825883a 	mov	r18,r5
    7138:	dc002417 	ldw	r16,144(sp)
    713c:	3027883a 	mov	r19,r6
    7140:	10000826 	beq	r2,zero,7164 <_dtoa_r+0x6c>
    7144:	21801117 	ldw	r6,68(r4)
    7148:	00c00044 	movi	r3,1
    714c:	100b883a 	mov	r5,r2
    7150:	1986983a 	sll	r3,r3,r6
    7154:	11800115 	stw	r6,4(r2)
    7158:	10c00215 	stw	r3,8(r2)
    715c:	000a2240 	call	a224 <_Bfree>
    7160:	e0001015 	stw	zero,64(fp)
    7164:	88002e16 	blt	r17,zero,7220 <_dtoa_r+0x128>
    7168:	80000015 	stw	zero,0(r16)
    716c:	889ffc2c 	andhi	r2,r17,32752
    7170:	00dffc34 	movhi	r3,32752
    7174:	10c01c26 	beq	r2,r3,71e8 <_dtoa_r+0xf0>
    7178:	000d883a 	mov	r6,zero
    717c:	000f883a 	mov	r7,zero
    7180:	9009883a 	mov	r4,r18
    7184:	980b883a 	mov	r5,r19
    7188:	00111ec0 	call	111ec <__eqdf2>
    718c:	10002b1e 	bne	r2,zero,723c <_dtoa_r+0x144>
    7190:	d9c02317 	ldw	r7,140(sp)
    7194:	00800044 	movi	r2,1
    7198:	38800015 	stw	r2,0(r7)
    719c:	d8802517 	ldw	r2,148(sp)
    71a0:	10019e26 	beq	r2,zero,781c <_dtoa_r+0x724>
    71a4:	d8c02517 	ldw	r3,148(sp)
    71a8:	008000b4 	movhi	r2,2
    71ac:	10bd6944 	addi	r2,r2,-2651
    71b0:	18800015 	stw	r2,0(r3)
    71b4:	10bfffc4 	addi	r2,r2,-1
    71b8:	dfc02117 	ldw	ra,132(sp)
    71bc:	df002017 	ldw	fp,128(sp)
    71c0:	ddc01f17 	ldw	r23,124(sp)
    71c4:	dd801e17 	ldw	r22,120(sp)
    71c8:	dd401d17 	ldw	r21,116(sp)
    71cc:	dd001c17 	ldw	r20,112(sp)
    71d0:	dcc01b17 	ldw	r19,108(sp)
    71d4:	dc801a17 	ldw	r18,104(sp)
    71d8:	dc401917 	ldw	r17,100(sp)
    71dc:	dc001817 	ldw	r16,96(sp)
    71e0:	dec02204 	addi	sp,sp,136
    71e4:	f800283a 	ret
    71e8:	d8c02317 	ldw	r3,140(sp)
    71ec:	0089c3c4 	movi	r2,9999
    71f0:	18800015 	stw	r2,0(r3)
    71f4:	90017726 	beq	r18,zero,77d4 <_dtoa_r+0x6dc>
    71f8:	008000b4 	movhi	r2,2
    71fc:	10bd7d04 	addi	r2,r2,-2572
    7200:	d9002517 	ldw	r4,148(sp)
    7204:	203fec26 	beq	r4,zero,71b8 <_dtoa_r+0xc0>
    7208:	10c000c7 	ldb	r3,3(r2)
    720c:	1801781e 	bne	r3,zero,77f0 <_dtoa_r+0x6f8>
    7210:	10c000c4 	addi	r3,r2,3
    7214:	d9802517 	ldw	r6,148(sp)
    7218:	30c00015 	stw	r3,0(r6)
    721c:	003fe606 	br	71b8 <_dtoa_r+0xc0>
    7220:	04e00034 	movhi	r19,32768
    7224:	9cffffc4 	addi	r19,r19,-1
    7228:	00800044 	movi	r2,1
    722c:	8ce6703a 	and	r19,r17,r19
    7230:	80800015 	stw	r2,0(r16)
    7234:	9823883a 	mov	r17,r19
    7238:	003fcc06 	br	716c <_dtoa_r+0x74>
    723c:	d8800204 	addi	r2,sp,8
    7240:	d8800015 	stw	r2,0(sp)
    7244:	d9c00104 	addi	r7,sp,4
    7248:	900b883a 	mov	r5,r18
    724c:	980d883a 	mov	r6,r19
    7250:	e009883a 	mov	r4,fp
    7254:	8820d53a 	srli	r16,r17,20
    7258:	000ae100 	call	ae10 <__d2b>
    725c:	d8800915 	stw	r2,36(sp)
    7260:	8001651e 	bne	r16,zero,77f8 <_dtoa_r+0x700>
    7264:	dd800217 	ldw	r22,8(sp)
    7268:	dc000117 	ldw	r16,4(sp)
    726c:	00800804 	movi	r2,32
    7270:	b421883a 	add	r16,r22,r16
    7274:	80c10c84 	addi	r3,r16,1074
    7278:	10c2d10e 	bge	r2,r3,7dc0 <_dtoa_r+0xcc8>
    727c:	00801004 	movi	r2,64
    7280:	81010484 	addi	r4,r16,1042
    7284:	10c7c83a 	sub	r3,r2,r3
    7288:	9108d83a 	srl	r4,r18,r4
    728c:	88e2983a 	sll	r17,r17,r3
    7290:	2448b03a 	or	r4,r4,r17
    7294:	00125b40 	call	125b4 <__floatunsidf>
    7298:	017f8434 	movhi	r5,65040
    729c:	01800044 	movi	r6,1
    72a0:	1009883a 	mov	r4,r2
    72a4:	194b883a 	add	r5,r3,r5
    72a8:	843fffc4 	addi	r16,r16,-1
    72ac:	d9801115 	stw	r6,68(sp)
    72b0:	000d883a 	mov	r6,zero
    72b4:	01cffe34 	movhi	r7,16376
    72b8:	0011b5c0 	call	11b5c <__subdf3>
    72bc:	0198dbf4 	movhi	r6,25455
    72c0:	01cff4f4 	movhi	r7,16339
    72c4:	3190d844 	addi	r6,r6,17249
    72c8:	39e1e9c4 	addi	r7,r7,-30809
    72cc:	1009883a 	mov	r4,r2
    72d0:	180b883a 	mov	r5,r3
    72d4:	00114440 	call	11444 <__muldf3>
    72d8:	01a2d874 	movhi	r6,35681
    72dc:	01cff1f4 	movhi	r7,16327
    72e0:	31b22cc4 	addi	r6,r6,-14157
    72e4:	39e28a04 	addi	r7,r7,-30168
    72e8:	180b883a 	mov	r5,r3
    72ec:	1009883a 	mov	r4,r2
    72f0:	00100580 	call	10058 <__adddf3>
    72f4:	8009883a 	mov	r4,r16
    72f8:	1029883a 	mov	r20,r2
    72fc:	1823883a 	mov	r17,r3
    7300:	00124d80 	call	124d8 <__floatsidf>
    7304:	019427f4 	movhi	r6,20639
    7308:	01cff4f4 	movhi	r7,16339
    730c:	319e7ec4 	addi	r6,r6,31227
    7310:	39d104c4 	addi	r7,r7,17427
    7314:	1009883a 	mov	r4,r2
    7318:	180b883a 	mov	r5,r3
    731c:	00114440 	call	11444 <__muldf3>
    7320:	100d883a 	mov	r6,r2
    7324:	180f883a 	mov	r7,r3
    7328:	a009883a 	mov	r4,r20
    732c:	880b883a 	mov	r5,r17
    7330:	00100580 	call	10058 <__adddf3>
    7334:	1009883a 	mov	r4,r2
    7338:	180b883a 	mov	r5,r3
    733c:	1029883a 	mov	r20,r2
    7340:	1823883a 	mov	r17,r3
    7344:	00124580 	call	12458 <__fixdfsi>
    7348:	000d883a 	mov	r6,zero
    734c:	000f883a 	mov	r7,zero
    7350:	a009883a 	mov	r4,r20
    7354:	880b883a 	mov	r5,r17
    7358:	d8800515 	stw	r2,20(sp)
    735c:	00113500 	call	11350 <__ledf2>
    7360:	10028716 	blt	r2,zero,7d80 <_dtoa_r+0xc88>
    7364:	d8c00517 	ldw	r3,20(sp)
    7368:	00800584 	movi	r2,22
    736c:	10c27536 	bltu	r2,r3,7d44 <_dtoa_r+0xc4c>
    7370:	180490fa 	slli	r2,r3,3
    7374:	00c000b4 	movhi	r3,2
    7378:	18fd9804 	addi	r3,r3,-2464
    737c:	1885883a 	add	r2,r3,r2
    7380:	11000017 	ldw	r4,0(r2)
    7384:	11400117 	ldw	r5,4(r2)
    7388:	900d883a 	mov	r6,r18
    738c:	980f883a 	mov	r7,r19
    7390:	00112740 	call	11274 <__gedf2>
    7394:	00828d0e 	bge	zero,r2,7dcc <_dtoa_r+0xcd4>
    7398:	d9000517 	ldw	r4,20(sp)
    739c:	d8000e15 	stw	zero,56(sp)
    73a0:	213fffc4 	addi	r4,r4,-1
    73a4:	d9000515 	stw	r4,20(sp)
    73a8:	b42dc83a 	sub	r22,r22,r16
    73ac:	b5bfffc4 	addi	r22,r22,-1
    73b0:	b0026f16 	blt	r22,zero,7d70 <_dtoa_r+0xc78>
    73b4:	d8000815 	stw	zero,32(sp)
    73b8:	d9c00517 	ldw	r7,20(sp)
    73bc:	38026416 	blt	r7,zero,7d50 <_dtoa_r+0xc58>
    73c0:	b1ed883a 	add	r22,r22,r7
    73c4:	d9c00d15 	stw	r7,52(sp)
    73c8:	d8000a15 	stw	zero,40(sp)
    73cc:	d9800317 	ldw	r6,12(sp)
    73d0:	00800244 	movi	r2,9
    73d4:	11811436 	bltu	r2,r6,7828 <_dtoa_r+0x730>
    73d8:	00800144 	movi	r2,5
    73dc:	1184e10e 	bge	r2,r6,8764 <_dtoa_r+0x166c>
    73e0:	31bfff04 	addi	r6,r6,-4
    73e4:	d9800315 	stw	r6,12(sp)
    73e8:	0023883a 	mov	r17,zero
    73ec:	d9800317 	ldw	r6,12(sp)
    73f0:	008000c4 	movi	r2,3
    73f4:	30836726 	beq	r6,r2,8194 <_dtoa_r+0x109c>
    73f8:	1183410e 	bge	r2,r6,8100 <_dtoa_r+0x1008>
    73fc:	d9c00317 	ldw	r7,12(sp)
    7400:	00800104 	movi	r2,4
    7404:	38827c26 	beq	r7,r2,7df8 <_dtoa_r+0xd00>
    7408:	00800144 	movi	r2,5
    740c:	3884c41e 	bne	r7,r2,8720 <_dtoa_r+0x1628>
    7410:	00800044 	movi	r2,1
    7414:	d8800b15 	stw	r2,44(sp)
    7418:	d8c00517 	ldw	r3,20(sp)
    741c:	d9002217 	ldw	r4,136(sp)
    7420:	1907883a 	add	r3,r3,r4
    7424:	19800044 	addi	r6,r3,1
    7428:	d8c00c15 	stw	r3,48(sp)
    742c:	d9800615 	stw	r6,24(sp)
    7430:	0183a40e 	bge	zero,r6,82c4 <_dtoa_r+0x11cc>
    7434:	d9800617 	ldw	r6,24(sp)
    7438:	3021883a 	mov	r16,r6
    743c:	e0001115 	stw	zero,68(fp)
    7440:	008005c4 	movi	r2,23
    7444:	1184c92e 	bgeu	r2,r6,876c <_dtoa_r+0x1674>
    7448:	00c00044 	movi	r3,1
    744c:	00800104 	movi	r2,4
    7450:	1085883a 	add	r2,r2,r2
    7454:	11000504 	addi	r4,r2,20
    7458:	180b883a 	mov	r5,r3
    745c:	18c00044 	addi	r3,r3,1
    7460:	313ffb2e 	bgeu	r6,r4,7450 <_dtoa_r+0x358>
    7464:	e1401115 	stw	r5,68(fp)
    7468:	e009883a 	mov	r4,fp
    746c:	000a17c0 	call	a17c <_Balloc>
    7470:	d8800715 	stw	r2,28(sp)
    7474:	e0801015 	stw	r2,64(fp)
    7478:	00800384 	movi	r2,14
    747c:	1400f736 	bltu	r2,r16,785c <_dtoa_r+0x764>
    7480:	8800f626 	beq	r17,zero,785c <_dtoa_r+0x764>
    7484:	d9c00517 	ldw	r7,20(sp)
    7488:	01c39a0e 	bge	zero,r7,82f4 <_dtoa_r+0x11fc>
    748c:	388003cc 	andi	r2,r7,15
    7490:	100490fa 	slli	r2,r2,3
    7494:	382bd13a 	srai	r21,r7,4
    7498:	00c000b4 	movhi	r3,2
    749c:	18fd9804 	addi	r3,r3,-2464
    74a0:	1885883a 	add	r2,r3,r2
    74a4:	a8c0040c 	andi	r3,r21,16
    74a8:	12400017 	ldw	r9,0(r2)
    74ac:	12000117 	ldw	r8,4(r2)
    74b0:	18037926 	beq	r3,zero,8298 <_dtoa_r+0x11a0>
    74b4:	008000b4 	movhi	r2,2
    74b8:	10bd8e04 	addi	r2,r2,-2504
    74bc:	11800817 	ldw	r6,32(r2)
    74c0:	11c00917 	ldw	r7,36(r2)
    74c4:	9009883a 	mov	r4,r18
    74c8:	980b883a 	mov	r5,r19
    74cc:	da001715 	stw	r8,92(sp)
    74d0:	da401615 	stw	r9,88(sp)
    74d4:	00109040 	call	10904 <__divdf3>
    74d8:	da001717 	ldw	r8,92(sp)
    74dc:	da401617 	ldw	r9,88(sp)
    74e0:	ad4003cc 	andi	r21,r21,15
    74e4:	040000c4 	movi	r16,3
    74e8:	1023883a 	mov	r17,r2
    74ec:	1829883a 	mov	r20,r3
    74f0:	a8001126 	beq	r21,zero,7538 <_dtoa_r+0x440>
    74f4:	05c000b4 	movhi	r23,2
    74f8:	bdfd8e04 	addi	r23,r23,-2504
    74fc:	4805883a 	mov	r2,r9
    7500:	4007883a 	mov	r3,r8
    7504:	a980004c 	andi	r6,r21,1
    7508:	1009883a 	mov	r4,r2
    750c:	a82bd07a 	srai	r21,r21,1
    7510:	180b883a 	mov	r5,r3
    7514:	30000426 	beq	r6,zero,7528 <_dtoa_r+0x430>
    7518:	b9800017 	ldw	r6,0(r23)
    751c:	b9c00117 	ldw	r7,4(r23)
    7520:	84000044 	addi	r16,r16,1
    7524:	00114440 	call	11444 <__muldf3>
    7528:	bdc00204 	addi	r23,r23,8
    752c:	a83ff51e 	bne	r21,zero,7504 <_dtoa_r+0x40c>
    7530:	1013883a 	mov	r9,r2
    7534:	1811883a 	mov	r8,r3
    7538:	480d883a 	mov	r6,r9
    753c:	400f883a 	mov	r7,r8
    7540:	8809883a 	mov	r4,r17
    7544:	a00b883a 	mov	r5,r20
    7548:	00109040 	call	10904 <__divdf3>
    754c:	d8800f15 	stw	r2,60(sp)
    7550:	d8c01015 	stw	r3,64(sp)
    7554:	d8c00e17 	ldw	r3,56(sp)
    7558:	18000626 	beq	r3,zero,7574 <_dtoa_r+0x47c>
    755c:	d9000f17 	ldw	r4,60(sp)
    7560:	d9401017 	ldw	r5,64(sp)
    7564:	000d883a 	mov	r6,zero
    7568:	01cffc34 	movhi	r7,16368
    756c:	00113500 	call	11350 <__ledf2>
    7570:	10040b16 	blt	r2,zero,85a0 <_dtoa_r+0x14a8>
    7574:	8009883a 	mov	r4,r16
    7578:	00124d80 	call	124d8 <__floatsidf>
    757c:	d9800f17 	ldw	r6,60(sp)
    7580:	d9c01017 	ldw	r7,64(sp)
    7584:	1009883a 	mov	r4,r2
    7588:	180b883a 	mov	r5,r3
    758c:	00114440 	call	11444 <__muldf3>
    7590:	000d883a 	mov	r6,zero
    7594:	01d00734 	movhi	r7,16412
    7598:	1009883a 	mov	r4,r2
    759c:	180b883a 	mov	r5,r3
    75a0:	00100580 	call	10058 <__adddf3>
    75a4:	1021883a 	mov	r16,r2
    75a8:	d8800617 	ldw	r2,24(sp)
    75ac:	047f3034 	movhi	r17,64704
    75b0:	1c63883a 	add	r17,r3,r17
    75b4:	10031826 	beq	r2,zero,8218 <_dtoa_r+0x1120>
    75b8:	d8c00517 	ldw	r3,20(sp)
    75bc:	db000617 	ldw	r12,24(sp)
    75c0:	d8c01315 	stw	r3,76(sp)
    75c4:	d9000b17 	ldw	r4,44(sp)
    75c8:	20038f26 	beq	r4,zero,8408 <_dtoa_r+0x1310>
    75cc:	60bfffc4 	addi	r2,r12,-1
    75d0:	100490fa 	slli	r2,r2,3
    75d4:	00c000b4 	movhi	r3,2
    75d8:	18fd9804 	addi	r3,r3,-2464
    75dc:	1885883a 	add	r2,r3,r2
    75e0:	11800017 	ldw	r6,0(r2)
    75e4:	11c00117 	ldw	r7,4(r2)
    75e8:	d8800717 	ldw	r2,28(sp)
    75ec:	0009883a 	mov	r4,zero
    75f0:	014ff834 	movhi	r5,16352
    75f4:	db001615 	stw	r12,88(sp)
    75f8:	15c00044 	addi	r23,r2,1
    75fc:	00109040 	call	10904 <__divdf3>
    7600:	800d883a 	mov	r6,r16
    7604:	880f883a 	mov	r7,r17
    7608:	1009883a 	mov	r4,r2
    760c:	180b883a 	mov	r5,r3
    7610:	0011b5c0 	call	11b5c <__subdf3>
    7614:	d9401017 	ldw	r5,64(sp)
    7618:	d9000f17 	ldw	r4,60(sp)
    761c:	102b883a 	mov	r21,r2
    7620:	d8c01215 	stw	r3,72(sp)
    7624:	00124580 	call	12458 <__fixdfsi>
    7628:	1009883a 	mov	r4,r2
    762c:	1029883a 	mov	r20,r2
    7630:	00124d80 	call	124d8 <__floatsidf>
    7634:	d9000f17 	ldw	r4,60(sp)
    7638:	d9401017 	ldw	r5,64(sp)
    763c:	100d883a 	mov	r6,r2
    7640:	180f883a 	mov	r7,r3
    7644:	0011b5c0 	call	11b5c <__subdf3>
    7648:	1823883a 	mov	r17,r3
    764c:	d8c00717 	ldw	r3,28(sp)
    7650:	d9401217 	ldw	r5,72(sp)
    7654:	a2000c04 	addi	r8,r20,48
    7658:	1021883a 	mov	r16,r2
    765c:	1a000005 	stb	r8,0(r3)
    7660:	800d883a 	mov	r6,r16
    7664:	880f883a 	mov	r7,r17
    7668:	a809883a 	mov	r4,r21
    766c:	4029883a 	mov	r20,r8
    7670:	00112740 	call	11274 <__gedf2>
    7674:	00841d16 	blt	zero,r2,86ec <_dtoa_r+0x15f4>
    7678:	800d883a 	mov	r6,r16
    767c:	880f883a 	mov	r7,r17
    7680:	0009883a 	mov	r4,zero
    7684:	014ffc34 	movhi	r5,16368
    7688:	0011b5c0 	call	11b5c <__subdf3>
    768c:	d9401217 	ldw	r5,72(sp)
    7690:	100d883a 	mov	r6,r2
    7694:	180f883a 	mov	r7,r3
    7698:	a809883a 	mov	r4,r21
    769c:	00112740 	call	11274 <__gedf2>
    76a0:	db001617 	ldw	r12,88(sp)
    76a4:	00840e16 	blt	zero,r2,86e0 <_dtoa_r+0x15e8>
    76a8:	00800044 	movi	r2,1
    76ac:	13006b0e 	bge	r2,r12,785c <_dtoa_r+0x764>
    76b0:	d9000717 	ldw	r4,28(sp)
    76b4:	dd800f15 	stw	r22,60(sp)
    76b8:	dcc01015 	stw	r19,64(sp)
    76bc:	2319883a 	add	r12,r4,r12
    76c0:	dcc01217 	ldw	r19,72(sp)
    76c4:	602d883a 	mov	r22,r12
    76c8:	dc801215 	stw	r18,72(sp)
    76cc:	b825883a 	mov	r18,r23
    76d0:	00000906 	br	76f8 <_dtoa_r+0x600>
    76d4:	0011b5c0 	call	11b5c <__subdf3>
    76d8:	a80d883a 	mov	r6,r21
    76dc:	980f883a 	mov	r7,r19
    76e0:	1009883a 	mov	r4,r2
    76e4:	180b883a 	mov	r5,r3
    76e8:	00113500 	call	11350 <__ledf2>
    76ec:	1003e816 	blt	r2,zero,8690 <_dtoa_r+0x1598>
    76f0:	b825883a 	mov	r18,r23
    76f4:	bd83e926 	beq	r23,r22,869c <_dtoa_r+0x15a4>
    76f8:	a809883a 	mov	r4,r21
    76fc:	980b883a 	mov	r5,r19
    7700:	000d883a 	mov	r6,zero
    7704:	01d00934 	movhi	r7,16420
    7708:	00114440 	call	11444 <__muldf3>
    770c:	000d883a 	mov	r6,zero
    7710:	01d00934 	movhi	r7,16420
    7714:	8009883a 	mov	r4,r16
    7718:	880b883a 	mov	r5,r17
    771c:	102b883a 	mov	r21,r2
    7720:	1827883a 	mov	r19,r3
    7724:	00114440 	call	11444 <__muldf3>
    7728:	180b883a 	mov	r5,r3
    772c:	1009883a 	mov	r4,r2
    7730:	1821883a 	mov	r16,r3
    7734:	1023883a 	mov	r17,r2
    7738:	00124580 	call	12458 <__fixdfsi>
    773c:	1009883a 	mov	r4,r2
    7740:	1029883a 	mov	r20,r2
    7744:	00124d80 	call	124d8 <__floatsidf>
    7748:	8809883a 	mov	r4,r17
    774c:	800b883a 	mov	r5,r16
    7750:	100d883a 	mov	r6,r2
    7754:	180f883a 	mov	r7,r3
    7758:	0011b5c0 	call	11b5c <__subdf3>
    775c:	a5000c04 	addi	r20,r20,48
    7760:	a80d883a 	mov	r6,r21
    7764:	980f883a 	mov	r7,r19
    7768:	1009883a 	mov	r4,r2
    776c:	180b883a 	mov	r5,r3
    7770:	95000005 	stb	r20,0(r18)
    7774:	1021883a 	mov	r16,r2
    7778:	1823883a 	mov	r17,r3
    777c:	00113500 	call	11350 <__ledf2>
    7780:	bdc00044 	addi	r23,r23,1
    7784:	800d883a 	mov	r6,r16
    7788:	880f883a 	mov	r7,r17
    778c:	0009883a 	mov	r4,zero
    7790:	014ffc34 	movhi	r5,16368
    7794:	103fcf0e 	bge	r2,zero,76d4 <_dtoa_r+0x5dc>
    7798:	d8c01317 	ldw	r3,76(sp)
    779c:	d8c00515 	stw	r3,20(sp)
    77a0:	d9400917 	ldw	r5,36(sp)
    77a4:	e009883a 	mov	r4,fp
    77a8:	000a2240 	call	a224 <_Bfree>
    77ac:	d9000517 	ldw	r4,20(sp)
    77b0:	d9802317 	ldw	r6,140(sp)
    77b4:	d9c02517 	ldw	r7,148(sp)
    77b8:	b8000005 	stb	zero,0(r23)
    77bc:	20800044 	addi	r2,r4,1
    77c0:	30800015 	stw	r2,0(r6)
    77c4:	3802aa26 	beq	r7,zero,8270 <_dtoa_r+0x1178>
    77c8:	3dc00015 	stw	r23,0(r7)
    77cc:	d8800717 	ldw	r2,28(sp)
    77d0:	003e7906 	br	71b8 <_dtoa_r+0xc0>
    77d4:	00800434 	movhi	r2,16
    77d8:	10bfffc4 	addi	r2,r2,-1
    77dc:	88a2703a 	and	r17,r17,r2
    77e0:	883e851e 	bne	r17,zero,71f8 <_dtoa_r+0x100>
    77e4:	008000b4 	movhi	r2,2
    77e8:	10bd7a04 	addi	r2,r2,-2584
    77ec:	003e8406 	br	7200 <_dtoa_r+0x108>
    77f0:	10c00204 	addi	r3,r2,8
    77f4:	003e8706 	br	7214 <_dtoa_r+0x11c>
    77f8:	01400434 	movhi	r5,16
    77fc:	297fffc4 	addi	r5,r5,-1
    7800:	994a703a 	and	r5,r19,r5
    7804:	9009883a 	mov	r4,r18
    7808:	843f0044 	addi	r16,r16,-1023
    780c:	294ffc34 	orhi	r5,r5,16368
    7810:	dd800217 	ldw	r22,8(sp)
    7814:	d8001115 	stw	zero,68(sp)
    7818:	003ea506 	br	72b0 <_dtoa_r+0x1b8>
    781c:	008000b4 	movhi	r2,2
    7820:	10bd6904 	addi	r2,r2,-2652
    7824:	003e6406 	br	71b8 <_dtoa_r+0xc0>
    7828:	e0001115 	stw	zero,68(fp)
    782c:	000b883a 	mov	r5,zero
    7830:	e009883a 	mov	r4,fp
    7834:	000a17c0 	call	a17c <_Balloc>
    7838:	01bfffc4 	movi	r6,-1
    783c:	01c00044 	movi	r7,1
    7840:	d8800715 	stw	r2,28(sp)
    7844:	d9800c15 	stw	r6,48(sp)
    7848:	e0801015 	stw	r2,64(fp)
    784c:	d8000315 	stw	zero,12(sp)
    7850:	d9c00b15 	stw	r7,44(sp)
    7854:	d9800615 	stw	r6,24(sp)
    7858:	d8002215 	stw	zero,136(sp)
    785c:	d8800117 	ldw	r2,4(sp)
    7860:	10008916 	blt	r2,zero,7a88 <_dtoa_r+0x990>
    7864:	d9000517 	ldw	r4,20(sp)
    7868:	00c00384 	movi	r3,14
    786c:	19008616 	blt	r3,r4,7a88 <_dtoa_r+0x990>
    7870:	200490fa 	slli	r2,r4,3
    7874:	00c000b4 	movhi	r3,2
    7878:	d9802217 	ldw	r6,136(sp)
    787c:	18fd9804 	addi	r3,r3,-2464
    7880:	1885883a 	add	r2,r3,r2
    7884:	14000017 	ldw	r16,0(r2)
    7888:	14400117 	ldw	r17,4(r2)
    788c:	30016316 	blt	r6,zero,7e1c <_dtoa_r+0xd24>
    7890:	800d883a 	mov	r6,r16
    7894:	880f883a 	mov	r7,r17
    7898:	9009883a 	mov	r4,r18
    789c:	980b883a 	mov	r5,r19
    78a0:	00109040 	call	10904 <__divdf3>
    78a4:	180b883a 	mov	r5,r3
    78a8:	1009883a 	mov	r4,r2
    78ac:	00124580 	call	12458 <__fixdfsi>
    78b0:	1009883a 	mov	r4,r2
    78b4:	102b883a 	mov	r21,r2
    78b8:	00124d80 	call	124d8 <__floatsidf>
    78bc:	800d883a 	mov	r6,r16
    78c0:	880f883a 	mov	r7,r17
    78c4:	1009883a 	mov	r4,r2
    78c8:	180b883a 	mov	r5,r3
    78cc:	00114440 	call	11444 <__muldf3>
    78d0:	100d883a 	mov	r6,r2
    78d4:	180f883a 	mov	r7,r3
    78d8:	9009883a 	mov	r4,r18
    78dc:	980b883a 	mov	r5,r19
    78e0:	0011b5c0 	call	11b5c <__subdf3>
    78e4:	d9c00717 	ldw	r7,28(sp)
    78e8:	1009883a 	mov	r4,r2
    78ec:	a8800c04 	addi	r2,r21,48
    78f0:	38800005 	stb	r2,0(r7)
    78f4:	3dc00044 	addi	r23,r7,1
    78f8:	d9c00617 	ldw	r7,24(sp)
    78fc:	01800044 	movi	r6,1
    7900:	180b883a 	mov	r5,r3
    7904:	2005883a 	mov	r2,r4
    7908:	39803826 	beq	r7,r6,79ec <_dtoa_r+0x8f4>
    790c:	000d883a 	mov	r6,zero
    7910:	01d00934 	movhi	r7,16420
    7914:	00114440 	call	11444 <__muldf3>
    7918:	000d883a 	mov	r6,zero
    791c:	000f883a 	mov	r7,zero
    7920:	1009883a 	mov	r4,r2
    7924:	180b883a 	mov	r5,r3
    7928:	1025883a 	mov	r18,r2
    792c:	1827883a 	mov	r19,r3
    7930:	00111ec0 	call	111ec <__eqdf2>
    7934:	103f9a26 	beq	r2,zero,77a0 <_dtoa_r+0x6a8>
    7938:	d9c00617 	ldw	r7,24(sp)
    793c:	d8c00717 	ldw	r3,28(sp)
    7940:	b829883a 	mov	r20,r23
    7944:	38bfffc4 	addi	r2,r7,-1
    7948:	18ad883a 	add	r22,r3,r2
    794c:	00000a06 	br	7978 <_dtoa_r+0x880>
    7950:	00114440 	call	11444 <__muldf3>
    7954:	000d883a 	mov	r6,zero
    7958:	000f883a 	mov	r7,zero
    795c:	1009883a 	mov	r4,r2
    7960:	180b883a 	mov	r5,r3
    7964:	1025883a 	mov	r18,r2
    7968:	1827883a 	mov	r19,r3
    796c:	b829883a 	mov	r20,r23
    7970:	00111ec0 	call	111ec <__eqdf2>
    7974:	103f8a26 	beq	r2,zero,77a0 <_dtoa_r+0x6a8>
    7978:	800d883a 	mov	r6,r16
    797c:	880f883a 	mov	r7,r17
    7980:	9009883a 	mov	r4,r18
    7984:	980b883a 	mov	r5,r19
    7988:	00109040 	call	10904 <__divdf3>
    798c:	180b883a 	mov	r5,r3
    7990:	1009883a 	mov	r4,r2
    7994:	00124580 	call	12458 <__fixdfsi>
    7998:	1009883a 	mov	r4,r2
    799c:	102b883a 	mov	r21,r2
    79a0:	00124d80 	call	124d8 <__floatsidf>
    79a4:	800d883a 	mov	r6,r16
    79a8:	880f883a 	mov	r7,r17
    79ac:	1009883a 	mov	r4,r2
    79b0:	180b883a 	mov	r5,r3
    79b4:	00114440 	call	11444 <__muldf3>
    79b8:	100d883a 	mov	r6,r2
    79bc:	180f883a 	mov	r7,r3
    79c0:	9009883a 	mov	r4,r18
    79c4:	980b883a 	mov	r5,r19
    79c8:	0011b5c0 	call	11b5c <__subdf3>
    79cc:	aa000c04 	addi	r8,r21,48
    79d0:	a2000005 	stb	r8,0(r20)
    79d4:	000d883a 	mov	r6,zero
    79d8:	01d00934 	movhi	r7,16420
    79dc:	1009883a 	mov	r4,r2
    79e0:	180b883a 	mov	r5,r3
    79e4:	a5c00044 	addi	r23,r20,1
    79e8:	b53fd91e 	bne	r22,r20,7950 <_dtoa_r+0x858>
    79ec:	100d883a 	mov	r6,r2
    79f0:	180f883a 	mov	r7,r3
    79f4:	1009883a 	mov	r4,r2
    79f8:	180b883a 	mov	r5,r3
    79fc:	00100580 	call	10058 <__adddf3>
    7a00:	100d883a 	mov	r6,r2
    7a04:	180f883a 	mov	r7,r3
    7a08:	8009883a 	mov	r4,r16
    7a0c:	880b883a 	mov	r5,r17
    7a10:	1027883a 	mov	r19,r2
    7a14:	1825883a 	mov	r18,r3
    7a18:	00113500 	call	11350 <__ledf2>
    7a1c:	10000816 	blt	r2,zero,7a40 <_dtoa_r+0x948>
    7a20:	980d883a 	mov	r6,r19
    7a24:	900f883a 	mov	r7,r18
    7a28:	8009883a 	mov	r4,r16
    7a2c:	880b883a 	mov	r5,r17
    7a30:	00111ec0 	call	111ec <__eqdf2>
    7a34:	103f5a1e 	bne	r2,zero,77a0 <_dtoa_r+0x6a8>
    7a38:	ad40004c 	andi	r21,r21,1
    7a3c:	a83f5826 	beq	r21,zero,77a0 <_dtoa_r+0x6a8>
    7a40:	bd3fffc3 	ldbu	r20,-1(r23)
    7a44:	b8bfffc4 	addi	r2,r23,-1
    7a48:	1007883a 	mov	r3,r2
    7a4c:	01400e44 	movi	r5,57
    7a50:	d9800717 	ldw	r6,28(sp)
    7a54:	00000506 	br	7a6c <_dtoa_r+0x974>
    7a58:	18ffffc4 	addi	r3,r3,-1
    7a5c:	11824726 	beq	r2,r6,837c <_dtoa_r+0x1284>
    7a60:	1d000003 	ldbu	r20,0(r3)
    7a64:	102f883a 	mov	r23,r2
    7a68:	10bfffc4 	addi	r2,r2,-1
    7a6c:	a1003fcc 	andi	r4,r20,255
    7a70:	2100201c 	xori	r4,r4,128
    7a74:	213fe004 	addi	r4,r4,-128
    7a78:	217ff726 	beq	r4,r5,7a58 <_dtoa_r+0x960>
    7a7c:	a2000044 	addi	r8,r20,1
    7a80:	12000005 	stb	r8,0(r2)
    7a84:	003f4606 	br	77a0 <_dtoa_r+0x6a8>
    7a88:	d9000b17 	ldw	r4,44(sp)
    7a8c:	2000c826 	beq	r4,zero,7db0 <_dtoa_r+0xcb8>
    7a90:	d9800317 	ldw	r6,12(sp)
    7a94:	00c00044 	movi	r3,1
    7a98:	1980f90e 	bge	r3,r6,7e80 <_dtoa_r+0xd88>
    7a9c:	d8800617 	ldw	r2,24(sp)
    7aa0:	d8c00a17 	ldw	r3,40(sp)
    7aa4:	157fffc4 	addi	r21,r2,-1
    7aa8:	1d41f316 	blt	r3,r21,8278 <_dtoa_r+0x1180>
    7aac:	1d6bc83a 	sub	r21,r3,r21
    7ab0:	d9c00617 	ldw	r7,24(sp)
    7ab4:	3802aa16 	blt	r7,zero,8560 <_dtoa_r+0x1468>
    7ab8:	dd000817 	ldw	r20,32(sp)
    7abc:	d8800617 	ldw	r2,24(sp)
    7ac0:	d8c00817 	ldw	r3,32(sp)
    7ac4:	01400044 	movi	r5,1
    7ac8:	e009883a 	mov	r4,fp
    7acc:	1887883a 	add	r3,r3,r2
    7ad0:	d8c00815 	stw	r3,32(sp)
    7ad4:	b0ad883a 	add	r22,r22,r2
    7ad8:	000a5880 	call	a588 <__i2b>
    7adc:	1023883a 	mov	r17,r2
    7ae0:	a0000826 	beq	r20,zero,7b04 <_dtoa_r+0xa0c>
    7ae4:	0580070e 	bge	zero,r22,7b04 <_dtoa_r+0xa0c>
    7ae8:	a005883a 	mov	r2,r20
    7aec:	b500b916 	blt	r22,r20,7dd4 <_dtoa_r+0xcdc>
    7af0:	d9000817 	ldw	r4,32(sp)
    7af4:	a0a9c83a 	sub	r20,r20,r2
    7af8:	b0adc83a 	sub	r22,r22,r2
    7afc:	2089c83a 	sub	r4,r4,r2
    7b00:	d9000815 	stw	r4,32(sp)
    7b04:	d9800a17 	ldw	r6,40(sp)
    7b08:	0181810e 	bge	zero,r6,8110 <_dtoa_r+0x1018>
    7b0c:	d9c00b17 	ldw	r7,44(sp)
    7b10:	3800b326 	beq	r7,zero,7de0 <_dtoa_r+0xce8>
    7b14:	a800b226 	beq	r21,zero,7de0 <_dtoa_r+0xce8>
    7b18:	880b883a 	mov	r5,r17
    7b1c:	a80d883a 	mov	r6,r21
    7b20:	e009883a 	mov	r4,fp
    7b24:	000a7bc0 	call	a7bc <__pow5mult>
    7b28:	d9800917 	ldw	r6,36(sp)
    7b2c:	100b883a 	mov	r5,r2
    7b30:	e009883a 	mov	r4,fp
    7b34:	1023883a 	mov	r17,r2
    7b38:	000a5c40 	call	a5c4 <__multiply>
    7b3c:	1021883a 	mov	r16,r2
    7b40:	d8800a17 	ldw	r2,40(sp)
    7b44:	d9400917 	ldw	r5,36(sp)
    7b48:	e009883a 	mov	r4,fp
    7b4c:	1545c83a 	sub	r2,r2,r21
    7b50:	d8800a15 	stw	r2,40(sp)
    7b54:	000a2240 	call	a224 <_Bfree>
    7b58:	d8c00a17 	ldw	r3,40(sp)
    7b5c:	18009f1e 	bne	r3,zero,7ddc <_dtoa_r+0xce4>
    7b60:	05c00044 	movi	r23,1
    7b64:	e009883a 	mov	r4,fp
    7b68:	b80b883a 	mov	r5,r23
    7b6c:	000a5880 	call	a588 <__i2b>
    7b70:	d9000d17 	ldw	r4,52(sp)
    7b74:	102b883a 	mov	r21,r2
    7b78:	2000ce26 	beq	r4,zero,7eb4 <_dtoa_r+0xdbc>
    7b7c:	200d883a 	mov	r6,r4
    7b80:	100b883a 	mov	r5,r2
    7b84:	e009883a 	mov	r4,fp
    7b88:	000a7bc0 	call	a7bc <__pow5mult>
    7b8c:	d9800317 	ldw	r6,12(sp)
    7b90:	102b883a 	mov	r21,r2
    7b94:	b981810e 	bge	r23,r6,819c <_dtoa_r+0x10a4>
    7b98:	0027883a 	mov	r19,zero
    7b9c:	a8800417 	ldw	r2,16(r21)
    7ba0:	05c00804 	movi	r23,32
    7ba4:	10800104 	addi	r2,r2,4
    7ba8:	1085883a 	add	r2,r2,r2
    7bac:	1085883a 	add	r2,r2,r2
    7bb0:	a885883a 	add	r2,r21,r2
    7bb4:	11000017 	ldw	r4,0(r2)
    7bb8:	000a4700 	call	a470 <__hi0bits>
    7bbc:	b885c83a 	sub	r2,r23,r2
    7bc0:	1585883a 	add	r2,r2,r22
    7bc4:	108007cc 	andi	r2,r2,31
    7bc8:	1000b326 	beq	r2,zero,7e98 <_dtoa_r+0xda0>
    7bcc:	00c00804 	movi	r3,32
    7bd0:	1887c83a 	sub	r3,r3,r2
    7bd4:	01000104 	movi	r4,4
    7bd8:	20c2cd0e 	bge	r4,r3,8710 <_dtoa_r+0x1618>
    7bdc:	00c00704 	movi	r3,28
    7be0:	1885c83a 	sub	r2,r3,r2
    7be4:	d8c00817 	ldw	r3,32(sp)
    7be8:	a0a9883a 	add	r20,r20,r2
    7bec:	b0ad883a 	add	r22,r22,r2
    7bf0:	1887883a 	add	r3,r3,r2
    7bf4:	d8c00815 	stw	r3,32(sp)
    7bf8:	d9800817 	ldw	r6,32(sp)
    7bfc:	0180040e 	bge	zero,r6,7c10 <_dtoa_r+0xb18>
    7c00:	800b883a 	mov	r5,r16
    7c04:	e009883a 	mov	r4,fp
    7c08:	000a8fc0 	call	a8fc <__lshift>
    7c0c:	1021883a 	mov	r16,r2
    7c10:	0580050e 	bge	zero,r22,7c28 <_dtoa_r+0xb30>
    7c14:	a80b883a 	mov	r5,r21
    7c18:	b00d883a 	mov	r6,r22
    7c1c:	e009883a 	mov	r4,fp
    7c20:	000a8fc0 	call	a8fc <__lshift>
    7c24:	102b883a 	mov	r21,r2
    7c28:	d9c00e17 	ldw	r7,56(sp)
    7c2c:	3801211e 	bne	r7,zero,80b4 <_dtoa_r+0xfbc>
    7c30:	d9800617 	ldw	r6,24(sp)
    7c34:	0181380e 	bge	zero,r6,8118 <_dtoa_r+0x1020>
    7c38:	d8c00b17 	ldw	r3,44(sp)
    7c3c:	1800ab1e 	bne	r3,zero,7eec <_dtoa_r+0xdf4>
    7c40:	dc800717 	ldw	r18,28(sp)
    7c44:	dcc00617 	ldw	r19,24(sp)
    7c48:	9029883a 	mov	r20,r18
    7c4c:	00000206 	br	7c58 <_dtoa_r+0xb60>
    7c50:	000a24c0 	call	a24c <__multadd>
    7c54:	1021883a 	mov	r16,r2
    7c58:	a80b883a 	mov	r5,r21
    7c5c:	8009883a 	mov	r4,r16
    7c60:	0006ef80 	call	6ef8 <quorem>
    7c64:	10800c04 	addi	r2,r2,48
    7c68:	90800005 	stb	r2,0(r18)
    7c6c:	94800044 	addi	r18,r18,1
    7c70:	9507c83a 	sub	r3,r18,r20
    7c74:	000f883a 	mov	r7,zero
    7c78:	01800284 	movi	r6,10
    7c7c:	800b883a 	mov	r5,r16
    7c80:	e009883a 	mov	r4,fp
    7c84:	1cfff216 	blt	r3,r19,7c50 <_dtoa_r+0xb58>
    7c88:	1011883a 	mov	r8,r2
    7c8c:	d8800617 	ldw	r2,24(sp)
    7c90:	0082370e 	bge	zero,r2,8570 <_dtoa_r+0x1478>
    7c94:	d9000717 	ldw	r4,28(sp)
    7c98:	0025883a 	mov	r18,zero
    7c9c:	20af883a 	add	r23,r4,r2
    7ca0:	01800044 	movi	r6,1
    7ca4:	800b883a 	mov	r5,r16
    7ca8:	e009883a 	mov	r4,fp
    7cac:	da001715 	stw	r8,92(sp)
    7cb0:	000a8fc0 	call	a8fc <__lshift>
    7cb4:	a80b883a 	mov	r5,r21
    7cb8:	1009883a 	mov	r4,r2
    7cbc:	d8800915 	stw	r2,36(sp)
    7cc0:	000aa440 	call	aa44 <__mcmp>
    7cc4:	da001717 	ldw	r8,92(sp)
    7cc8:	0081800e 	bge	zero,r2,82cc <_dtoa_r+0x11d4>
    7ccc:	b93fffc3 	ldbu	r4,-1(r23)
    7cd0:	b8bfffc4 	addi	r2,r23,-1
    7cd4:	1007883a 	mov	r3,r2
    7cd8:	01800e44 	movi	r6,57
    7cdc:	d9c00717 	ldw	r7,28(sp)
    7ce0:	00000506 	br	7cf8 <_dtoa_r+0xc00>
    7ce4:	18ffffc4 	addi	r3,r3,-1
    7ce8:	11c12326 	beq	r2,r7,8178 <_dtoa_r+0x1080>
    7cec:	19000003 	ldbu	r4,0(r3)
    7cf0:	102f883a 	mov	r23,r2
    7cf4:	10bfffc4 	addi	r2,r2,-1
    7cf8:	21403fcc 	andi	r5,r4,255
    7cfc:	2940201c 	xori	r5,r5,128
    7d00:	297fe004 	addi	r5,r5,-128
    7d04:	29bff726 	beq	r5,r6,7ce4 <_dtoa_r+0xbec>
    7d08:	21000044 	addi	r4,r4,1
    7d0c:	11000005 	stb	r4,0(r2)
    7d10:	a80b883a 	mov	r5,r21
    7d14:	e009883a 	mov	r4,fp
    7d18:	000a2240 	call	a224 <_Bfree>
    7d1c:	883ea026 	beq	r17,zero,77a0 <_dtoa_r+0x6a8>
    7d20:	90000426 	beq	r18,zero,7d34 <_dtoa_r+0xc3c>
    7d24:	94400326 	beq	r18,r17,7d34 <_dtoa_r+0xc3c>
    7d28:	900b883a 	mov	r5,r18
    7d2c:	e009883a 	mov	r4,fp
    7d30:	000a2240 	call	a224 <_Bfree>
    7d34:	880b883a 	mov	r5,r17
    7d38:	e009883a 	mov	r4,fp
    7d3c:	000a2240 	call	a224 <_Bfree>
    7d40:	003e9706 	br	77a0 <_dtoa_r+0x6a8>
    7d44:	01800044 	movi	r6,1
    7d48:	d9800e15 	stw	r6,56(sp)
    7d4c:	003d9606 	br	73a8 <_dtoa_r+0x2b0>
    7d50:	d8800817 	ldw	r2,32(sp)
    7d54:	d8c00517 	ldw	r3,20(sp)
    7d58:	d8000d15 	stw	zero,52(sp)
    7d5c:	10c5c83a 	sub	r2,r2,r3
    7d60:	00c9c83a 	sub	r4,zero,r3
    7d64:	d8800815 	stw	r2,32(sp)
    7d68:	d9000a15 	stw	r4,40(sp)
    7d6c:	003d9706 	br	73cc <_dtoa_r+0x2d4>
    7d70:	05adc83a 	sub	r22,zero,r22
    7d74:	dd800815 	stw	r22,32(sp)
    7d78:	002d883a 	mov	r22,zero
    7d7c:	003d8e06 	br	73b8 <_dtoa_r+0x2c0>
    7d80:	d9000517 	ldw	r4,20(sp)
    7d84:	00124d80 	call	124d8 <__floatsidf>
    7d88:	100d883a 	mov	r6,r2
    7d8c:	180f883a 	mov	r7,r3
    7d90:	a009883a 	mov	r4,r20
    7d94:	880b883a 	mov	r5,r17
    7d98:	00111ec0 	call	111ec <__eqdf2>
    7d9c:	103d7126 	beq	r2,zero,7364 <_dtoa_r+0x26c>
    7da0:	d9c00517 	ldw	r7,20(sp)
    7da4:	39ffffc4 	addi	r7,r7,-1
    7da8:	d9c00515 	stw	r7,20(sp)
    7dac:	003d6d06 	br	7364 <_dtoa_r+0x26c>
    7db0:	dd400a17 	ldw	r21,40(sp)
    7db4:	dd000817 	ldw	r20,32(sp)
    7db8:	0023883a 	mov	r17,zero
    7dbc:	003f4806 	br	7ae0 <_dtoa_r+0x9e8>
    7dc0:	10e3c83a 	sub	r17,r2,r3
    7dc4:	9448983a 	sll	r4,r18,r17
    7dc8:	003d3206 	br	7294 <_dtoa_r+0x19c>
    7dcc:	d8000e15 	stw	zero,56(sp)
    7dd0:	003d7506 	br	73a8 <_dtoa_r+0x2b0>
    7dd4:	b005883a 	mov	r2,r22
    7dd8:	003f4506 	br	7af0 <_dtoa_r+0x9f8>
    7ddc:	dc000915 	stw	r16,36(sp)
    7de0:	d9800a17 	ldw	r6,40(sp)
    7de4:	d9400917 	ldw	r5,36(sp)
    7de8:	e009883a 	mov	r4,fp
    7dec:	000a7bc0 	call	a7bc <__pow5mult>
    7df0:	1021883a 	mov	r16,r2
    7df4:	003f5a06 	br	7b60 <_dtoa_r+0xa68>
    7df8:	01c00044 	movi	r7,1
    7dfc:	d9c00b15 	stw	r7,44(sp)
    7e00:	d8802217 	ldw	r2,136(sp)
    7e04:	0081280e 	bge	zero,r2,82a8 <_dtoa_r+0x11b0>
    7e08:	100d883a 	mov	r6,r2
    7e0c:	1021883a 	mov	r16,r2
    7e10:	d8800c15 	stw	r2,48(sp)
    7e14:	d8800615 	stw	r2,24(sp)
    7e18:	003d8806 	br	743c <_dtoa_r+0x344>
    7e1c:	d8800617 	ldw	r2,24(sp)
    7e20:	00be9b16 	blt	zero,r2,7890 <_dtoa_r+0x798>
    7e24:	10010f1e 	bne	r2,zero,8264 <_dtoa_r+0x116c>
    7e28:	880b883a 	mov	r5,r17
    7e2c:	000d883a 	mov	r6,zero
    7e30:	01d00534 	movhi	r7,16404
    7e34:	8009883a 	mov	r4,r16
    7e38:	00114440 	call	11444 <__muldf3>
    7e3c:	900d883a 	mov	r6,r18
    7e40:	980f883a 	mov	r7,r19
    7e44:	1009883a 	mov	r4,r2
    7e48:	180b883a 	mov	r5,r3
    7e4c:	00112740 	call	11274 <__gedf2>
    7e50:	002b883a 	mov	r21,zero
    7e54:	0023883a 	mov	r17,zero
    7e58:	1000bf16 	blt	r2,zero,8158 <_dtoa_r+0x1060>
    7e5c:	d9802217 	ldw	r6,136(sp)
    7e60:	ddc00717 	ldw	r23,28(sp)
    7e64:	018c303a 	nor	r6,zero,r6
    7e68:	d9800515 	stw	r6,20(sp)
    7e6c:	a80b883a 	mov	r5,r21
    7e70:	e009883a 	mov	r4,fp
    7e74:	000a2240 	call	a224 <_Bfree>
    7e78:	883e4926 	beq	r17,zero,77a0 <_dtoa_r+0x6a8>
    7e7c:	003fad06 	br	7d34 <_dtoa_r+0xc3c>
    7e80:	d9c01117 	ldw	r7,68(sp)
    7e84:	3801bc26 	beq	r7,zero,8578 <_dtoa_r+0x1480>
    7e88:	10810cc4 	addi	r2,r2,1075
    7e8c:	dd400a17 	ldw	r21,40(sp)
    7e90:	dd000817 	ldw	r20,32(sp)
    7e94:	003f0a06 	br	7ac0 <_dtoa_r+0x9c8>
    7e98:	00800704 	movi	r2,28
    7e9c:	d9000817 	ldw	r4,32(sp)
    7ea0:	a0a9883a 	add	r20,r20,r2
    7ea4:	b0ad883a 	add	r22,r22,r2
    7ea8:	2089883a 	add	r4,r4,r2
    7eac:	d9000815 	stw	r4,32(sp)
    7eb0:	003f5106 	br	7bf8 <_dtoa_r+0xb00>
    7eb4:	d8c00317 	ldw	r3,12(sp)
    7eb8:	b8c1fc0e 	bge	r23,r3,86ac <_dtoa_r+0x15b4>
    7ebc:	0027883a 	mov	r19,zero
    7ec0:	b805883a 	mov	r2,r23
    7ec4:	003f3e06 	br	7bc0 <_dtoa_r+0xac8>
    7ec8:	880b883a 	mov	r5,r17
    7ecc:	e009883a 	mov	r4,fp
    7ed0:	000f883a 	mov	r7,zero
    7ed4:	01800284 	movi	r6,10
    7ed8:	000a24c0 	call	a24c <__multadd>
    7edc:	d9000c17 	ldw	r4,48(sp)
    7ee0:	1023883a 	mov	r17,r2
    7ee4:	0102040e 	bge	zero,r4,86f8 <_dtoa_r+0x1600>
    7ee8:	d9000615 	stw	r4,24(sp)
    7eec:	0500050e 	bge	zero,r20,7f04 <_dtoa_r+0xe0c>
    7ef0:	880b883a 	mov	r5,r17
    7ef4:	a00d883a 	mov	r6,r20
    7ef8:	e009883a 	mov	r4,fp
    7efc:	000a8fc0 	call	a8fc <__lshift>
    7f00:	1023883a 	mov	r17,r2
    7f04:	9801241e 	bne	r19,zero,8398 <_dtoa_r+0x12a0>
    7f08:	8829883a 	mov	r20,r17
    7f0c:	d9000617 	ldw	r4,24(sp)
    7f10:	dcc00717 	ldw	r19,28(sp)
    7f14:	9480004c 	andi	r18,r18,1
    7f18:	20bfffc4 	addi	r2,r4,-1
    7f1c:	9885883a 	add	r2,r19,r2
    7f20:	d8800415 	stw	r2,16(sp)
    7f24:	dc800615 	stw	r18,24(sp)
    7f28:	a80b883a 	mov	r5,r21
    7f2c:	8009883a 	mov	r4,r16
    7f30:	0006ef80 	call	6ef8 <quorem>
    7f34:	880b883a 	mov	r5,r17
    7f38:	8009883a 	mov	r4,r16
    7f3c:	102f883a 	mov	r23,r2
    7f40:	000aa440 	call	aa44 <__mcmp>
    7f44:	a80b883a 	mov	r5,r21
    7f48:	a00d883a 	mov	r6,r20
    7f4c:	e009883a 	mov	r4,fp
    7f50:	102d883a 	mov	r22,r2
    7f54:	000aaa40 	call	aaa4 <__mdiff>
    7f58:	1007883a 	mov	r3,r2
    7f5c:	10800317 	ldw	r2,12(r2)
    7f60:	bc800c04 	addi	r18,r23,48
    7f64:	180b883a 	mov	r5,r3
    7f68:	10004e1e 	bne	r2,zero,80a4 <_dtoa_r+0xfac>
    7f6c:	8009883a 	mov	r4,r16
    7f70:	d8c01615 	stw	r3,88(sp)
    7f74:	000aa440 	call	aa44 <__mcmp>
    7f78:	d8c01617 	ldw	r3,88(sp)
    7f7c:	e009883a 	mov	r4,fp
    7f80:	d8801615 	stw	r2,88(sp)
    7f84:	180b883a 	mov	r5,r3
    7f88:	000a2240 	call	a224 <_Bfree>
    7f8c:	d8801617 	ldw	r2,88(sp)
    7f90:	1000041e 	bne	r2,zero,7fa4 <_dtoa_r+0xeac>
    7f94:	d9800317 	ldw	r6,12(sp)
    7f98:	3000021e 	bne	r6,zero,7fa4 <_dtoa_r+0xeac>
    7f9c:	d8c00617 	ldw	r3,24(sp)
    7fa0:	18003726 	beq	r3,zero,8080 <_dtoa_r+0xf88>
    7fa4:	b0002016 	blt	r22,zero,8028 <_dtoa_r+0xf30>
    7fa8:	b000041e 	bne	r22,zero,7fbc <_dtoa_r+0xec4>
    7fac:	d9000317 	ldw	r4,12(sp)
    7fb0:	2000021e 	bne	r4,zero,7fbc <_dtoa_r+0xec4>
    7fb4:	d8c00617 	ldw	r3,24(sp)
    7fb8:	18001b26 	beq	r3,zero,8028 <_dtoa_r+0xf30>
    7fbc:	00810716 	blt	zero,r2,83dc <_dtoa_r+0x12e4>
    7fc0:	d8c00417 	ldw	r3,16(sp)
    7fc4:	9d800044 	addi	r22,r19,1
    7fc8:	9c800005 	stb	r18,0(r19)
    7fcc:	b02f883a 	mov	r23,r22
    7fd0:	98c10626 	beq	r19,r3,83ec <_dtoa_r+0x12f4>
    7fd4:	800b883a 	mov	r5,r16
    7fd8:	000f883a 	mov	r7,zero
    7fdc:	01800284 	movi	r6,10
    7fe0:	e009883a 	mov	r4,fp
    7fe4:	000a24c0 	call	a24c <__multadd>
    7fe8:	1021883a 	mov	r16,r2
    7fec:	000f883a 	mov	r7,zero
    7ff0:	01800284 	movi	r6,10
    7ff4:	880b883a 	mov	r5,r17
    7ff8:	e009883a 	mov	r4,fp
    7ffc:	8d002526 	beq	r17,r20,8094 <_dtoa_r+0xf9c>
    8000:	000a24c0 	call	a24c <__multadd>
    8004:	a00b883a 	mov	r5,r20
    8008:	000f883a 	mov	r7,zero
    800c:	01800284 	movi	r6,10
    8010:	e009883a 	mov	r4,fp
    8014:	1023883a 	mov	r17,r2
    8018:	000a24c0 	call	a24c <__multadd>
    801c:	1029883a 	mov	r20,r2
    8020:	b027883a 	mov	r19,r22
    8024:	003fc006 	br	7f28 <_dtoa_r+0xe30>
    8028:	9011883a 	mov	r8,r18
    802c:	00800e0e 	bge	zero,r2,8068 <_dtoa_r+0xf70>
    8030:	800b883a 	mov	r5,r16
    8034:	01800044 	movi	r6,1
    8038:	e009883a 	mov	r4,fp
    803c:	da001715 	stw	r8,92(sp)
    8040:	000a8fc0 	call	a8fc <__lshift>
    8044:	a80b883a 	mov	r5,r21
    8048:	1009883a 	mov	r4,r2
    804c:	1021883a 	mov	r16,r2
    8050:	000aa440 	call	aa44 <__mcmp>
    8054:	da001717 	ldw	r8,92(sp)
    8058:	0081960e 	bge	zero,r2,86b4 <_dtoa_r+0x15bc>
    805c:	00800e44 	movi	r2,57
    8060:	40817026 	beq	r8,r2,8624 <_dtoa_r+0x152c>
    8064:	ba000c44 	addi	r8,r23,49
    8068:	8825883a 	mov	r18,r17
    806c:	9dc00044 	addi	r23,r19,1
    8070:	9a000005 	stb	r8,0(r19)
    8074:	a023883a 	mov	r17,r20
    8078:	dc000915 	stw	r16,36(sp)
    807c:	003f2406 	br	7d10 <_dtoa_r+0xc18>
    8080:	00800e44 	movi	r2,57
    8084:	9011883a 	mov	r8,r18
    8088:	90816626 	beq	r18,r2,8624 <_dtoa_r+0x152c>
    808c:	05bff516 	blt	zero,r22,8064 <_dtoa_r+0xf6c>
    8090:	003ff506 	br	8068 <_dtoa_r+0xf70>
    8094:	000a24c0 	call	a24c <__multadd>
    8098:	1023883a 	mov	r17,r2
    809c:	1029883a 	mov	r20,r2
    80a0:	003fdf06 	br	8020 <_dtoa_r+0xf28>
    80a4:	e009883a 	mov	r4,fp
    80a8:	000a2240 	call	a224 <_Bfree>
    80ac:	00800044 	movi	r2,1
    80b0:	003fbc06 	br	7fa4 <_dtoa_r+0xeac>
    80b4:	a80b883a 	mov	r5,r21
    80b8:	8009883a 	mov	r4,r16
    80bc:	000aa440 	call	aa44 <__mcmp>
    80c0:	103edb0e 	bge	r2,zero,7c30 <_dtoa_r+0xb38>
    80c4:	800b883a 	mov	r5,r16
    80c8:	000f883a 	mov	r7,zero
    80cc:	01800284 	movi	r6,10
    80d0:	e009883a 	mov	r4,fp
    80d4:	000a24c0 	call	a24c <__multadd>
    80d8:	1021883a 	mov	r16,r2
    80dc:	d8800517 	ldw	r2,20(sp)
    80e0:	d8c00b17 	ldw	r3,44(sp)
    80e4:	10bfffc4 	addi	r2,r2,-1
    80e8:	d8800515 	stw	r2,20(sp)
    80ec:	183f761e 	bne	r3,zero,7ec8 <_dtoa_r+0xdd0>
    80f0:	d9000c17 	ldw	r4,48(sp)
    80f4:	0101730e 	bge	zero,r4,86c4 <_dtoa_r+0x15cc>
    80f8:	d9000615 	stw	r4,24(sp)
    80fc:	003ed006 	br	7c40 <_dtoa_r+0xb48>
    8100:	00800084 	movi	r2,2
    8104:	3081861e 	bne	r6,r2,8720 <_dtoa_r+0x1628>
    8108:	d8000b15 	stw	zero,44(sp)
    810c:	003f3c06 	br	7e00 <_dtoa_r+0xd08>
    8110:	dc000917 	ldw	r16,36(sp)
    8114:	003e9206 	br	7b60 <_dtoa_r+0xa68>
    8118:	d9c00317 	ldw	r7,12(sp)
    811c:	00800084 	movi	r2,2
    8120:	11fec50e 	bge	r2,r7,7c38 <_dtoa_r+0xb40>
    8124:	d9000617 	ldw	r4,24(sp)
    8128:	20013c1e 	bne	r4,zero,861c <_dtoa_r+0x1524>
    812c:	a80b883a 	mov	r5,r21
    8130:	000f883a 	mov	r7,zero
    8134:	01800144 	movi	r6,5
    8138:	e009883a 	mov	r4,fp
    813c:	000a24c0 	call	a24c <__multadd>
    8140:	100b883a 	mov	r5,r2
    8144:	8009883a 	mov	r4,r16
    8148:	102b883a 	mov	r21,r2
    814c:	000aa440 	call	aa44 <__mcmp>
    8150:	dc000915 	stw	r16,36(sp)
    8154:	00bf410e 	bge	zero,r2,7e5c <_dtoa_r+0xd64>
    8158:	d9c00717 	ldw	r7,28(sp)
    815c:	00800c44 	movi	r2,49
    8160:	38800005 	stb	r2,0(r7)
    8164:	d8800517 	ldw	r2,20(sp)
    8168:	3dc00044 	addi	r23,r7,1
    816c:	10800044 	addi	r2,r2,1
    8170:	d8800515 	stw	r2,20(sp)
    8174:	003f3d06 	br	7e6c <_dtoa_r+0xd74>
    8178:	d9800517 	ldw	r6,20(sp)
    817c:	d9c00717 	ldw	r7,28(sp)
    8180:	00800c44 	movi	r2,49
    8184:	31800044 	addi	r6,r6,1
    8188:	d9800515 	stw	r6,20(sp)
    818c:	38800005 	stb	r2,0(r7)
    8190:	003edf06 	br	7d10 <_dtoa_r+0xc18>
    8194:	d8000b15 	stw	zero,44(sp)
    8198:	003c9f06 	br	7418 <_dtoa_r+0x320>
    819c:	903e7e1e 	bne	r18,zero,7b98 <_dtoa_r+0xaa0>
    81a0:	00800434 	movhi	r2,16
    81a4:	10bfffc4 	addi	r2,r2,-1
    81a8:	9884703a 	and	r2,r19,r2
    81ac:	1000ea1e 	bne	r2,zero,8558 <_dtoa_r+0x1460>
    81b0:	9cdffc2c 	andhi	r19,r19,32752
    81b4:	9800e826 	beq	r19,zero,8558 <_dtoa_r+0x1460>
    81b8:	d9c00817 	ldw	r7,32(sp)
    81bc:	b5800044 	addi	r22,r22,1
    81c0:	04c00044 	movi	r19,1
    81c4:	39c00044 	addi	r7,r7,1
    81c8:	d9c00815 	stw	r7,32(sp)
    81cc:	d8800d17 	ldw	r2,52(sp)
    81d0:	103e721e 	bne	r2,zero,7b9c <_dtoa_r+0xaa4>
    81d4:	00800044 	movi	r2,1
    81d8:	003e7906 	br	7bc0 <_dtoa_r+0xac8>
    81dc:	8009883a 	mov	r4,r16
    81e0:	00124d80 	call	124d8 <__floatsidf>
    81e4:	d9800f17 	ldw	r6,60(sp)
    81e8:	d9c01017 	ldw	r7,64(sp)
    81ec:	1009883a 	mov	r4,r2
    81f0:	180b883a 	mov	r5,r3
    81f4:	00114440 	call	11444 <__muldf3>
    81f8:	000d883a 	mov	r6,zero
    81fc:	01d00734 	movhi	r7,16412
    8200:	1009883a 	mov	r4,r2
    8204:	180b883a 	mov	r5,r3
    8208:	00100580 	call	10058 <__adddf3>
    820c:	047f3034 	movhi	r17,64704
    8210:	1021883a 	mov	r16,r2
    8214:	1c63883a 	add	r17,r3,r17
    8218:	d9000f17 	ldw	r4,60(sp)
    821c:	d9401017 	ldw	r5,64(sp)
    8220:	000d883a 	mov	r6,zero
    8224:	01d00534 	movhi	r7,16404
    8228:	0011b5c0 	call	11b5c <__subdf3>
    822c:	800d883a 	mov	r6,r16
    8230:	880f883a 	mov	r7,r17
    8234:	1009883a 	mov	r4,r2
    8238:	180b883a 	mov	r5,r3
    823c:	102b883a 	mov	r21,r2
    8240:	1829883a 	mov	r20,r3
    8244:	00112740 	call	11274 <__gedf2>
    8248:	00806c16 	blt	zero,r2,83fc <_dtoa_r+0x1304>
    824c:	89e0003c 	xorhi	r7,r17,32768
    8250:	800d883a 	mov	r6,r16
    8254:	a809883a 	mov	r4,r21
    8258:	a00b883a 	mov	r5,r20
    825c:	00113500 	call	11350 <__ledf2>
    8260:	103d7e0e 	bge	r2,zero,785c <_dtoa_r+0x764>
    8264:	002b883a 	mov	r21,zero
    8268:	0023883a 	mov	r17,zero
    826c:	003efb06 	br	7e5c <_dtoa_r+0xd64>
    8270:	d8800717 	ldw	r2,28(sp)
    8274:	003bd006 	br	71b8 <_dtoa_r+0xc0>
    8278:	d9000a17 	ldw	r4,40(sp)
    827c:	d9800d17 	ldw	r6,52(sp)
    8280:	dd400a15 	stw	r21,40(sp)
    8284:	a905c83a 	sub	r2,r21,r4
    8288:	308d883a 	add	r6,r6,r2
    828c:	d9800d15 	stw	r6,52(sp)
    8290:	002b883a 	mov	r21,zero
    8294:	003e0606 	br	7ab0 <_dtoa_r+0x9b8>
    8298:	9023883a 	mov	r17,r18
    829c:	9829883a 	mov	r20,r19
    82a0:	04000084 	movi	r16,2
    82a4:	003c9206 	br	74f0 <_dtoa_r+0x3f8>
    82a8:	04000044 	movi	r16,1
    82ac:	dc000c15 	stw	r16,48(sp)
    82b0:	dc000615 	stw	r16,24(sp)
    82b4:	dc002215 	stw	r16,136(sp)
    82b8:	e0001115 	stw	zero,68(fp)
    82bc:	000b883a 	mov	r5,zero
    82c0:	003c6906 	br	7468 <_dtoa_r+0x370>
    82c4:	3021883a 	mov	r16,r6
    82c8:	003ffb06 	br	82b8 <_dtoa_r+0x11c0>
    82cc:	1000021e 	bne	r2,zero,82d8 <_dtoa_r+0x11e0>
    82d0:	4200004c 	andi	r8,r8,1
    82d4:	403e7d1e 	bne	r8,zero,7ccc <_dtoa_r+0xbd4>
    82d8:	01000c04 	movi	r4,48
    82dc:	00000106 	br	82e4 <_dtoa_r+0x11ec>
    82e0:	102f883a 	mov	r23,r2
    82e4:	b8bfffc4 	addi	r2,r23,-1
    82e8:	10c00007 	ldb	r3,0(r2)
    82ec:	193ffc26 	beq	r3,r4,82e0 <_dtoa_r+0x11e8>
    82f0:	003e8706 	br	7d10 <_dtoa_r+0xc18>
    82f4:	d8800517 	ldw	r2,20(sp)
    82f8:	00a3c83a 	sub	r17,zero,r2
    82fc:	8800a426 	beq	r17,zero,8590 <_dtoa_r+0x1498>
    8300:	888003cc 	andi	r2,r17,15
    8304:	100490fa 	slli	r2,r2,3
    8308:	00c000b4 	movhi	r3,2
    830c:	18fd9804 	addi	r3,r3,-2464
    8310:	1885883a 	add	r2,r3,r2
    8314:	11800017 	ldw	r6,0(r2)
    8318:	11c00117 	ldw	r7,4(r2)
    831c:	9009883a 	mov	r4,r18
    8320:	980b883a 	mov	r5,r19
    8324:	8823d13a 	srai	r17,r17,4
    8328:	00114440 	call	11444 <__muldf3>
    832c:	d8800f15 	stw	r2,60(sp)
    8330:	d8c01015 	stw	r3,64(sp)
    8334:	8800e826 	beq	r17,zero,86d8 <_dtoa_r+0x15e0>
    8338:	050000b4 	movhi	r20,2
    833c:	a53d8e04 	addi	r20,r20,-2504
    8340:	04000084 	movi	r16,2
    8344:	8980004c 	andi	r6,r17,1
    8348:	1009883a 	mov	r4,r2
    834c:	8823d07a 	srai	r17,r17,1
    8350:	180b883a 	mov	r5,r3
    8354:	30000426 	beq	r6,zero,8368 <_dtoa_r+0x1270>
    8358:	a1800017 	ldw	r6,0(r20)
    835c:	a1c00117 	ldw	r7,4(r20)
    8360:	84000044 	addi	r16,r16,1
    8364:	00114440 	call	11444 <__muldf3>
    8368:	a5000204 	addi	r20,r20,8
    836c:	883ff51e 	bne	r17,zero,8344 <_dtoa_r+0x124c>
    8370:	d8800f15 	stw	r2,60(sp)
    8374:	d8c01015 	stw	r3,64(sp)
    8378:	003c7606 	br	7554 <_dtoa_r+0x45c>
    837c:	00c00c04 	movi	r3,48
    8380:	10c00005 	stb	r3,0(r2)
    8384:	d8c00517 	ldw	r3,20(sp)
    8388:	bd3fffc3 	ldbu	r20,-1(r23)
    838c:	18c00044 	addi	r3,r3,1
    8390:	d8c00515 	stw	r3,20(sp)
    8394:	003db906 	br	7a7c <_dtoa_r+0x984>
    8398:	89400117 	ldw	r5,4(r17)
    839c:	e009883a 	mov	r4,fp
    83a0:	000a17c0 	call	a17c <_Balloc>
    83a4:	89800417 	ldw	r6,16(r17)
    83a8:	89400304 	addi	r5,r17,12
    83ac:	11000304 	addi	r4,r2,12
    83b0:	31800084 	addi	r6,r6,2
    83b4:	318d883a 	add	r6,r6,r6
    83b8:	318d883a 	add	r6,r6,r6
    83bc:	1027883a 	mov	r19,r2
    83c0:	0009f0c0 	call	9f0c <memcpy>
    83c4:	01800044 	movi	r6,1
    83c8:	980b883a 	mov	r5,r19
    83cc:	e009883a 	mov	r4,fp
    83d0:	000a8fc0 	call	a8fc <__lshift>
    83d4:	1029883a 	mov	r20,r2
    83d8:	003ecc06 	br	7f0c <_dtoa_r+0xe14>
    83dc:	00800e44 	movi	r2,57
    83e0:	90809026 	beq	r18,r2,8624 <_dtoa_r+0x152c>
    83e4:	92000044 	addi	r8,r18,1
    83e8:	003f1f06 	br	8068 <_dtoa_r+0xf70>
    83ec:	9011883a 	mov	r8,r18
    83f0:	8825883a 	mov	r18,r17
    83f4:	a023883a 	mov	r17,r20
    83f8:	003e2906 	br	7ca0 <_dtoa_r+0xba8>
    83fc:	002b883a 	mov	r21,zero
    8400:	0023883a 	mov	r17,zero
    8404:	003f5406 	br	8158 <_dtoa_r+0x1060>
    8408:	61bfffc4 	addi	r6,r12,-1
    840c:	300490fa 	slli	r2,r6,3
    8410:	00c000b4 	movhi	r3,2
    8414:	18fd9804 	addi	r3,r3,-2464
    8418:	1885883a 	add	r2,r3,r2
    841c:	11000017 	ldw	r4,0(r2)
    8420:	11400117 	ldw	r5,4(r2)
    8424:	d8800717 	ldw	r2,28(sp)
    8428:	880f883a 	mov	r7,r17
    842c:	d9801215 	stw	r6,72(sp)
    8430:	800d883a 	mov	r6,r16
    8434:	db001615 	stw	r12,88(sp)
    8438:	15c00044 	addi	r23,r2,1
    843c:	00114440 	call	11444 <__muldf3>
    8440:	d9401017 	ldw	r5,64(sp)
    8444:	d9000f17 	ldw	r4,60(sp)
    8448:	d8c01515 	stw	r3,84(sp)
    844c:	d8801415 	stw	r2,80(sp)
    8450:	00124580 	call	12458 <__fixdfsi>
    8454:	1009883a 	mov	r4,r2
    8458:	1021883a 	mov	r16,r2
    845c:	00124d80 	call	124d8 <__floatsidf>
    8460:	d9000f17 	ldw	r4,60(sp)
    8464:	d9401017 	ldw	r5,64(sp)
    8468:	100d883a 	mov	r6,r2
    846c:	180f883a 	mov	r7,r3
    8470:	0011b5c0 	call	11b5c <__subdf3>
    8474:	1829883a 	mov	r20,r3
    8478:	d8c00717 	ldw	r3,28(sp)
    847c:	84000c04 	addi	r16,r16,48
    8480:	1023883a 	mov	r17,r2
    8484:	1c000005 	stb	r16,0(r3)
    8488:	db001617 	ldw	r12,88(sp)
    848c:	00800044 	movi	r2,1
    8490:	60802226 	beq	r12,r2,851c <_dtoa_r+0x1424>
    8494:	d9c00717 	ldw	r7,28(sp)
    8498:	8805883a 	mov	r2,r17
    849c:	b82b883a 	mov	r21,r23
    84a0:	3b19883a 	add	r12,r7,r12
    84a4:	6023883a 	mov	r17,r12
    84a8:	a007883a 	mov	r3,r20
    84ac:	dc800f15 	stw	r18,60(sp)
    84b0:	000d883a 	mov	r6,zero
    84b4:	01d00934 	movhi	r7,16420
    84b8:	1009883a 	mov	r4,r2
    84bc:	180b883a 	mov	r5,r3
    84c0:	00114440 	call	11444 <__muldf3>
    84c4:	180b883a 	mov	r5,r3
    84c8:	1009883a 	mov	r4,r2
    84cc:	1829883a 	mov	r20,r3
    84d0:	1025883a 	mov	r18,r2
    84d4:	00124580 	call	12458 <__fixdfsi>
    84d8:	1009883a 	mov	r4,r2
    84dc:	1021883a 	mov	r16,r2
    84e0:	00124d80 	call	124d8 <__floatsidf>
    84e4:	100d883a 	mov	r6,r2
    84e8:	180f883a 	mov	r7,r3
    84ec:	9009883a 	mov	r4,r18
    84f0:	a00b883a 	mov	r5,r20
    84f4:	84000c04 	addi	r16,r16,48
    84f8:	0011b5c0 	call	11b5c <__subdf3>
    84fc:	ad400044 	addi	r21,r21,1
    8500:	ac3fffc5 	stb	r16,-1(r21)
    8504:	ac7fea1e 	bne	r21,r17,84b0 <_dtoa_r+0x13b8>
    8508:	1023883a 	mov	r17,r2
    850c:	d8801217 	ldw	r2,72(sp)
    8510:	dc800f17 	ldw	r18,60(sp)
    8514:	1829883a 	mov	r20,r3
    8518:	b8af883a 	add	r23,r23,r2
    851c:	d9001417 	ldw	r4,80(sp)
    8520:	d9401517 	ldw	r5,84(sp)
    8524:	000d883a 	mov	r6,zero
    8528:	01cff834 	movhi	r7,16352
    852c:	00100580 	call	10058 <__adddf3>
    8530:	880d883a 	mov	r6,r17
    8534:	a00f883a 	mov	r7,r20
    8538:	1009883a 	mov	r4,r2
    853c:	180b883a 	mov	r5,r3
    8540:	00113500 	call	11350 <__ledf2>
    8544:	10003e0e 	bge	r2,zero,8640 <_dtoa_r+0x1548>
    8548:	d9001317 	ldw	r4,76(sp)
    854c:	bd3fffc3 	ldbu	r20,-1(r23)
    8550:	d9000515 	stw	r4,20(sp)
    8554:	003d3b06 	br	7a44 <_dtoa_r+0x94c>
    8558:	0027883a 	mov	r19,zero
    855c:	003f1b06 	br	81cc <_dtoa_r+0x10d4>
    8560:	d8800817 	ldw	r2,32(sp)
    8564:	11e9c83a 	sub	r20,r2,r7
    8568:	0005883a 	mov	r2,zero
    856c:	003d5406 	br	7ac0 <_dtoa_r+0x9c8>
    8570:	00800044 	movi	r2,1
    8574:	003dc706 	br	7c94 <_dtoa_r+0xb9c>
    8578:	d8c00217 	ldw	r3,8(sp)
    857c:	00800d84 	movi	r2,54
    8580:	dd400a17 	ldw	r21,40(sp)
    8584:	10c5c83a 	sub	r2,r2,r3
    8588:	dd000817 	ldw	r20,32(sp)
    858c:	003d4c06 	br	7ac0 <_dtoa_r+0x9c8>
    8590:	dc800f15 	stw	r18,60(sp)
    8594:	dcc01015 	stw	r19,64(sp)
    8598:	04000084 	movi	r16,2
    859c:	003bed06 	br	7554 <_dtoa_r+0x45c>
    85a0:	d9000617 	ldw	r4,24(sp)
    85a4:	203f0d26 	beq	r4,zero,81dc <_dtoa_r+0x10e4>
    85a8:	d9800c17 	ldw	r6,48(sp)
    85ac:	01bcab0e 	bge	zero,r6,785c <_dtoa_r+0x764>
    85b0:	d9401017 	ldw	r5,64(sp)
    85b4:	d9000f17 	ldw	r4,60(sp)
    85b8:	000d883a 	mov	r6,zero
    85bc:	01d00934 	movhi	r7,16420
    85c0:	00114440 	call	11444 <__muldf3>
    85c4:	81000044 	addi	r4,r16,1
    85c8:	d8800f15 	stw	r2,60(sp)
    85cc:	d8c01015 	stw	r3,64(sp)
    85d0:	00124d80 	call	124d8 <__floatsidf>
    85d4:	d9800f17 	ldw	r6,60(sp)
    85d8:	d9c01017 	ldw	r7,64(sp)
    85dc:	1009883a 	mov	r4,r2
    85e0:	180b883a 	mov	r5,r3
    85e4:	00114440 	call	11444 <__muldf3>
    85e8:	01d00734 	movhi	r7,16412
    85ec:	000d883a 	mov	r6,zero
    85f0:	1009883a 	mov	r4,r2
    85f4:	180b883a 	mov	r5,r3
    85f8:	00100580 	call	10058 <__adddf3>
    85fc:	d9c00517 	ldw	r7,20(sp)
    8600:	047f3034 	movhi	r17,64704
    8604:	1021883a 	mov	r16,r2
    8608:	39ffffc4 	addi	r7,r7,-1
    860c:	d9c01315 	stw	r7,76(sp)
    8610:	1c63883a 	add	r17,r3,r17
    8614:	db000c17 	ldw	r12,48(sp)
    8618:	003bea06 	br	75c4 <_dtoa_r+0x4cc>
    861c:	dc000915 	stw	r16,36(sp)
    8620:	003e0e06 	br	7e5c <_dtoa_r+0xd64>
    8624:	01000e44 	movi	r4,57
    8628:	8825883a 	mov	r18,r17
    862c:	9dc00044 	addi	r23,r19,1
    8630:	99000005 	stb	r4,0(r19)
    8634:	a023883a 	mov	r17,r20
    8638:	dc000915 	stw	r16,36(sp)
    863c:	003da406 	br	7cd0 <_dtoa_r+0xbd8>
    8640:	d9801417 	ldw	r6,80(sp)
    8644:	d9c01517 	ldw	r7,84(sp)
    8648:	0009883a 	mov	r4,zero
    864c:	014ff834 	movhi	r5,16352
    8650:	0011b5c0 	call	11b5c <__subdf3>
    8654:	880d883a 	mov	r6,r17
    8658:	a00f883a 	mov	r7,r20
    865c:	1009883a 	mov	r4,r2
    8660:	180b883a 	mov	r5,r3
    8664:	00112740 	call	11274 <__gedf2>
    8668:	00bc7c0e 	bge	zero,r2,785c <_dtoa_r+0x764>
    866c:	01000c04 	movi	r4,48
    8670:	00000106 	br	8678 <_dtoa_r+0x1580>
    8674:	102f883a 	mov	r23,r2
    8678:	b8bfffc4 	addi	r2,r23,-1
    867c:	10c00007 	ldb	r3,0(r2)
    8680:	193ffc26 	beq	r3,r4,8674 <_dtoa_r+0x157c>
    8684:	d9801317 	ldw	r6,76(sp)
    8688:	d9800515 	stw	r6,20(sp)
    868c:	003c4406 	br	77a0 <_dtoa_r+0x6a8>
    8690:	d9801317 	ldw	r6,76(sp)
    8694:	d9800515 	stw	r6,20(sp)
    8698:	003cea06 	br	7a44 <_dtoa_r+0x94c>
    869c:	dd800f17 	ldw	r22,60(sp)
    86a0:	dcc01017 	ldw	r19,64(sp)
    86a4:	dc801217 	ldw	r18,72(sp)
    86a8:	003c6c06 	br	785c <_dtoa_r+0x764>
    86ac:	903e031e 	bne	r18,zero,7ebc <_dtoa_r+0xdc4>
    86b0:	003ebb06 	br	81a0 <_dtoa_r+0x10a8>
    86b4:	103e6c1e 	bne	r2,zero,8068 <_dtoa_r+0xf70>
    86b8:	4080004c 	andi	r2,r8,1
    86bc:	103e6a26 	beq	r2,zero,8068 <_dtoa_r+0xf70>
    86c0:	003e6606 	br	805c <_dtoa_r+0xf64>
    86c4:	d8c00317 	ldw	r3,12(sp)
    86c8:	00800084 	movi	r2,2
    86cc:	10c02916 	blt	r2,r3,8774 <_dtoa_r+0x167c>
    86d0:	d9000c17 	ldw	r4,48(sp)
    86d4:	003e8806 	br	80f8 <_dtoa_r+0x1000>
    86d8:	04000084 	movi	r16,2
    86dc:	003b9d06 	br	7554 <_dtoa_r+0x45c>
    86e0:	d9001317 	ldw	r4,76(sp)
    86e4:	d9000515 	stw	r4,20(sp)
    86e8:	003cd606 	br	7a44 <_dtoa_r+0x94c>
    86ec:	d8801317 	ldw	r2,76(sp)
    86f0:	d8800515 	stw	r2,20(sp)
    86f4:	003c2a06 	br	77a0 <_dtoa_r+0x6a8>
    86f8:	d9800317 	ldw	r6,12(sp)
    86fc:	00800084 	movi	r2,2
    8700:	11801516 	blt	r2,r6,8758 <_dtoa_r+0x1660>
    8704:	d9c00c17 	ldw	r7,48(sp)
    8708:	d9c00615 	stw	r7,24(sp)
    870c:	003df706 	br	7eec <_dtoa_r+0xdf4>
    8710:	193d3926 	beq	r3,r4,7bf8 <_dtoa_r+0xb00>
    8714:	00c00f04 	movi	r3,60
    8718:	1885c83a 	sub	r2,r3,r2
    871c:	003ddf06 	br	7e9c <_dtoa_r+0xda4>
    8720:	e009883a 	mov	r4,fp
    8724:	e0001115 	stw	zero,68(fp)
    8728:	000b883a 	mov	r5,zero
    872c:	000a17c0 	call	a17c <_Balloc>
    8730:	d8800715 	stw	r2,28(sp)
    8734:	d8c00717 	ldw	r3,28(sp)
    8738:	00bfffc4 	movi	r2,-1
    873c:	01000044 	movi	r4,1
    8740:	d8800c15 	stw	r2,48(sp)
    8744:	e0c01015 	stw	r3,64(fp)
    8748:	d9000b15 	stw	r4,44(sp)
    874c:	d8800615 	stw	r2,24(sp)
    8750:	d8002215 	stw	zero,136(sp)
    8754:	003c4106 	br	785c <_dtoa_r+0x764>
    8758:	d8c00c17 	ldw	r3,48(sp)
    875c:	d8c00615 	stw	r3,24(sp)
    8760:	003e7006 	br	8124 <_dtoa_r+0x102c>
    8764:	04400044 	movi	r17,1
    8768:	003b2006 	br	73ec <_dtoa_r+0x2f4>
    876c:	000b883a 	mov	r5,zero
    8770:	003b3d06 	br	7468 <_dtoa_r+0x370>
    8774:	d8800c17 	ldw	r2,48(sp)
    8778:	d8800615 	stw	r2,24(sp)
    877c:	003e6906 	br	8124 <_dtoa_r+0x102c>

00008780 <__sflush_r>:
    8780:	2880030b 	ldhu	r2,12(r5)
    8784:	defffb04 	addi	sp,sp,-20
    8788:	dcc00315 	stw	r19,12(sp)
    878c:	dc400115 	stw	r17,4(sp)
    8790:	dfc00415 	stw	ra,16(sp)
    8794:	dc800215 	stw	r18,8(sp)
    8798:	dc000015 	stw	r16,0(sp)
    879c:	10c0020c 	andi	r3,r2,8
    87a0:	2823883a 	mov	r17,r5
    87a4:	2027883a 	mov	r19,r4
    87a8:	1800311e 	bne	r3,zero,8870 <__sflush_r+0xf0>
    87ac:	28c00117 	ldw	r3,4(r5)
    87b0:	10820014 	ori	r2,r2,2048
    87b4:	2880030d 	sth	r2,12(r5)
    87b8:	00c04b0e 	bge	zero,r3,88e8 <__sflush_r+0x168>
    87bc:	8a000a17 	ldw	r8,40(r17)
    87c0:	40002326 	beq	r8,zero,8850 <__sflush_r+0xd0>
    87c4:	9c000017 	ldw	r16,0(r19)
    87c8:	10c4000c 	andi	r3,r2,4096
    87cc:	98000015 	stw	zero,0(r19)
    87d0:	18004826 	beq	r3,zero,88f4 <__sflush_r+0x174>
    87d4:	89801417 	ldw	r6,80(r17)
    87d8:	10c0010c 	andi	r3,r2,4
    87dc:	18000626 	beq	r3,zero,87f8 <__sflush_r+0x78>
    87e0:	88c00117 	ldw	r3,4(r17)
    87e4:	88800c17 	ldw	r2,48(r17)
    87e8:	30cdc83a 	sub	r6,r6,r3
    87ec:	10000226 	beq	r2,zero,87f8 <__sflush_r+0x78>
    87f0:	88800f17 	ldw	r2,60(r17)
    87f4:	308dc83a 	sub	r6,r6,r2
    87f8:	89400717 	ldw	r5,28(r17)
    87fc:	000f883a 	mov	r7,zero
    8800:	9809883a 	mov	r4,r19
    8804:	403ee83a 	callr	r8
    8808:	00ffffc4 	movi	r3,-1
    880c:	10c04426 	beq	r2,r3,8920 <__sflush_r+0x1a0>
    8810:	88c0030b 	ldhu	r3,12(r17)
    8814:	89000417 	ldw	r4,16(r17)
    8818:	88000115 	stw	zero,4(r17)
    881c:	197dffcc 	andi	r5,r3,63487
    8820:	8940030d 	sth	r5,12(r17)
    8824:	89000015 	stw	r4,0(r17)
    8828:	18c4000c 	andi	r3,r3,4096
    882c:	18002c1e 	bne	r3,zero,88e0 <__sflush_r+0x160>
    8830:	89400c17 	ldw	r5,48(r17)
    8834:	9c000015 	stw	r16,0(r19)
    8838:	28000526 	beq	r5,zero,8850 <__sflush_r+0xd0>
    883c:	88801004 	addi	r2,r17,64
    8840:	28800226 	beq	r5,r2,884c <__sflush_r+0xcc>
    8844:	9809883a 	mov	r4,r19
    8848:	0008eec0 	call	8eec <_free_r>
    884c:	88000c15 	stw	zero,48(r17)
    8850:	0005883a 	mov	r2,zero
    8854:	dfc00417 	ldw	ra,16(sp)
    8858:	dcc00317 	ldw	r19,12(sp)
    885c:	dc800217 	ldw	r18,8(sp)
    8860:	dc400117 	ldw	r17,4(sp)
    8864:	dc000017 	ldw	r16,0(sp)
    8868:	dec00504 	addi	sp,sp,20
    886c:	f800283a 	ret
    8870:	2c800417 	ldw	r18,16(r5)
    8874:	903ff626 	beq	r18,zero,8850 <__sflush_r+0xd0>
    8878:	2c000017 	ldw	r16,0(r5)
    887c:	108000cc 	andi	r2,r2,3
    8880:	2c800015 	stw	r18,0(r5)
    8884:	84a1c83a 	sub	r16,r16,r18
    8888:	1000131e 	bne	r2,zero,88d8 <__sflush_r+0x158>
    888c:	28800517 	ldw	r2,20(r5)
    8890:	88800215 	stw	r2,8(r17)
    8894:	04000316 	blt	zero,r16,88a4 <__sflush_r+0x124>
    8898:	003fed06 	br	8850 <__sflush_r+0xd0>
    889c:	90a5883a 	add	r18,r18,r2
    88a0:	043feb0e 	bge	zero,r16,8850 <__sflush_r+0xd0>
    88a4:	88800917 	ldw	r2,36(r17)
    88a8:	89400717 	ldw	r5,28(r17)
    88ac:	800f883a 	mov	r7,r16
    88b0:	900d883a 	mov	r6,r18
    88b4:	9809883a 	mov	r4,r19
    88b8:	103ee83a 	callr	r2
    88bc:	80a1c83a 	sub	r16,r16,r2
    88c0:	00bff616 	blt	zero,r2,889c <__sflush_r+0x11c>
    88c4:	88c0030b 	ldhu	r3,12(r17)
    88c8:	00bfffc4 	movi	r2,-1
    88cc:	18c01014 	ori	r3,r3,64
    88d0:	88c0030d 	sth	r3,12(r17)
    88d4:	003fdf06 	br	8854 <__sflush_r+0xd4>
    88d8:	0005883a 	mov	r2,zero
    88dc:	003fec06 	br	8890 <__sflush_r+0x110>
    88e0:	88801415 	stw	r2,80(r17)
    88e4:	003fd206 	br	8830 <__sflush_r+0xb0>
    88e8:	28c00f17 	ldw	r3,60(r5)
    88ec:	00ffb316 	blt	zero,r3,87bc <__sflush_r+0x3c>
    88f0:	003fd706 	br	8850 <__sflush_r+0xd0>
    88f4:	89400717 	ldw	r5,28(r17)
    88f8:	000d883a 	mov	r6,zero
    88fc:	01c00044 	movi	r7,1
    8900:	9809883a 	mov	r4,r19
    8904:	403ee83a 	callr	r8
    8908:	100d883a 	mov	r6,r2
    890c:	00bfffc4 	movi	r2,-1
    8910:	30801426 	beq	r6,r2,8964 <__sflush_r+0x1e4>
    8914:	8880030b 	ldhu	r2,12(r17)
    8918:	8a000a17 	ldw	r8,40(r17)
    891c:	003fae06 	br	87d8 <__sflush_r+0x58>
    8920:	98c00017 	ldw	r3,0(r19)
    8924:	183fba26 	beq	r3,zero,8810 <__sflush_r+0x90>
    8928:	01000744 	movi	r4,29
    892c:	19000626 	beq	r3,r4,8948 <__sflush_r+0x1c8>
    8930:	01000584 	movi	r4,22
    8934:	19000426 	beq	r3,r4,8948 <__sflush_r+0x1c8>
    8938:	88c0030b 	ldhu	r3,12(r17)
    893c:	18c01014 	ori	r3,r3,64
    8940:	88c0030d 	sth	r3,12(r17)
    8944:	003fc306 	br	8854 <__sflush_r+0xd4>
    8948:	8880030b 	ldhu	r2,12(r17)
    894c:	88c00417 	ldw	r3,16(r17)
    8950:	88000115 	stw	zero,4(r17)
    8954:	10bdffcc 	andi	r2,r2,63487
    8958:	8880030d 	sth	r2,12(r17)
    895c:	88c00015 	stw	r3,0(r17)
    8960:	003fb306 	br	8830 <__sflush_r+0xb0>
    8964:	98800017 	ldw	r2,0(r19)
    8968:	103fea26 	beq	r2,zero,8914 <__sflush_r+0x194>
    896c:	00c00744 	movi	r3,29
    8970:	10c00226 	beq	r2,r3,897c <__sflush_r+0x1fc>
    8974:	00c00584 	movi	r3,22
    8978:	10c0031e 	bne	r2,r3,8988 <__sflush_r+0x208>
    897c:	9c000015 	stw	r16,0(r19)
    8980:	0005883a 	mov	r2,zero
    8984:	003fb306 	br	8854 <__sflush_r+0xd4>
    8988:	88c0030b 	ldhu	r3,12(r17)
    898c:	3005883a 	mov	r2,r6
    8990:	18c01014 	ori	r3,r3,64
    8994:	88c0030d 	sth	r3,12(r17)
    8998:	003fae06 	br	8854 <__sflush_r+0xd4>

0000899c <_fflush_r>:
    899c:	defffd04 	addi	sp,sp,-12
    89a0:	dc000115 	stw	r16,4(sp)
    89a4:	dfc00215 	stw	ra,8(sp)
    89a8:	2021883a 	mov	r16,r4
    89ac:	20000226 	beq	r4,zero,89b8 <_fflush_r+0x1c>
    89b0:	20800e17 	ldw	r2,56(r4)
    89b4:	10000c26 	beq	r2,zero,89e8 <_fflush_r+0x4c>
    89b8:	2880030f 	ldh	r2,12(r5)
    89bc:	1000051e 	bne	r2,zero,89d4 <_fflush_r+0x38>
    89c0:	0005883a 	mov	r2,zero
    89c4:	dfc00217 	ldw	ra,8(sp)
    89c8:	dc000117 	ldw	r16,4(sp)
    89cc:	dec00304 	addi	sp,sp,12
    89d0:	f800283a 	ret
    89d4:	8009883a 	mov	r4,r16
    89d8:	dfc00217 	ldw	ra,8(sp)
    89dc:	dc000117 	ldw	r16,4(sp)
    89e0:	dec00304 	addi	sp,sp,12
    89e4:	00087801 	jmpi	8780 <__sflush_r>
    89e8:	d9400015 	stw	r5,0(sp)
    89ec:	0008d780 	call	8d78 <__sinit>
    89f0:	d9400017 	ldw	r5,0(sp)
    89f4:	003ff006 	br	89b8 <_fflush_r+0x1c>

000089f8 <fflush>:
    89f8:	20000526 	beq	r4,zero,8a10 <fflush+0x18>
    89fc:	008000b4 	movhi	r2,2
    8a00:	10864604 	addi	r2,r2,6424
    8a04:	200b883a 	mov	r5,r4
    8a08:	11000017 	ldw	r4,0(r2)
    8a0c:	000899c1 	jmpi	899c <_fflush_r>
    8a10:	008000b4 	movhi	r2,2
    8a14:	10864504 	addi	r2,r2,6420
    8a18:	11000017 	ldw	r4,0(r2)
    8a1c:	01400074 	movhi	r5,1
    8a20:	29626704 	addi	r5,r5,-30308
    8a24:	00092c01 	jmpi	92c0 <_fwalk_reent>

00008a28 <__fp_unlock>:
    8a28:	0005883a 	mov	r2,zero
    8a2c:	f800283a 	ret

00008a30 <_cleanup_r>:
    8a30:	01400074 	movhi	r5,1
    8a34:	29782f04 	addi	r5,r5,-8004
    8a38:	00092c01 	jmpi	92c0 <_fwalk_reent>

00008a3c <__sinit.part.1>:
    8a3c:	defff704 	addi	sp,sp,-36
    8a40:	00c00074 	movhi	r3,1
    8a44:	dfc00815 	stw	ra,32(sp)
    8a48:	ddc00715 	stw	r23,28(sp)
    8a4c:	dd800615 	stw	r22,24(sp)
    8a50:	dd400515 	stw	r21,20(sp)
    8a54:	dd000415 	stw	r20,16(sp)
    8a58:	dcc00315 	stw	r19,12(sp)
    8a5c:	dc800215 	stw	r18,8(sp)
    8a60:	dc400115 	stw	r17,4(sp)
    8a64:	dc000015 	stw	r16,0(sp)
    8a68:	18e28c04 	addi	r3,r3,-30160
    8a6c:	24000117 	ldw	r16,4(r4)
    8a70:	20c00f15 	stw	r3,60(r4)
    8a74:	2080bb04 	addi	r2,r4,748
    8a78:	00c000c4 	movi	r3,3
    8a7c:	20c0b915 	stw	r3,740(r4)
    8a80:	2080ba15 	stw	r2,744(r4)
    8a84:	2000b815 	stw	zero,736(r4)
    8a88:	05c00204 	movi	r23,8
    8a8c:	00800104 	movi	r2,4
    8a90:	2025883a 	mov	r18,r4
    8a94:	b80d883a 	mov	r6,r23
    8a98:	81001704 	addi	r4,r16,92
    8a9c:	000b883a 	mov	r5,zero
    8aa0:	80000015 	stw	zero,0(r16)
    8aa4:	80000115 	stw	zero,4(r16)
    8aa8:	80000215 	stw	zero,8(r16)
    8aac:	8080030d 	sth	r2,12(r16)
    8ab0:	80001915 	stw	zero,100(r16)
    8ab4:	8000038d 	sth	zero,14(r16)
    8ab8:	80000415 	stw	zero,16(r16)
    8abc:	80000515 	stw	zero,20(r16)
    8ac0:	80000615 	stw	zero,24(r16)
    8ac4:	000a0540 	call	a054 <memset>
    8ac8:	05800074 	movhi	r22,1
    8acc:	94400217 	ldw	r17,8(r18)
    8ad0:	05400074 	movhi	r21,1
    8ad4:	05000074 	movhi	r20,1
    8ad8:	04c00074 	movhi	r19,1
    8adc:	b5ac9004 	addi	r22,r22,-19904
    8ae0:	ad6ca704 	addi	r21,r21,-19812
    8ae4:	a52cc604 	addi	r20,r20,-19688
    8ae8:	9cecdd04 	addi	r19,r19,-19596
    8aec:	85800815 	stw	r22,32(r16)
    8af0:	85400915 	stw	r21,36(r16)
    8af4:	85000a15 	stw	r20,40(r16)
    8af8:	84c00b15 	stw	r19,44(r16)
    8afc:	84000715 	stw	r16,28(r16)
    8b00:	00800284 	movi	r2,10
    8b04:	8880030d 	sth	r2,12(r17)
    8b08:	00800044 	movi	r2,1
    8b0c:	b80d883a 	mov	r6,r23
    8b10:	89001704 	addi	r4,r17,92
    8b14:	000b883a 	mov	r5,zero
    8b18:	88000015 	stw	zero,0(r17)
    8b1c:	88000115 	stw	zero,4(r17)
    8b20:	88000215 	stw	zero,8(r17)
    8b24:	88001915 	stw	zero,100(r17)
    8b28:	8880038d 	sth	r2,14(r17)
    8b2c:	88000415 	stw	zero,16(r17)
    8b30:	88000515 	stw	zero,20(r17)
    8b34:	88000615 	stw	zero,24(r17)
    8b38:	000a0540 	call	a054 <memset>
    8b3c:	94000317 	ldw	r16,12(r18)
    8b40:	00800484 	movi	r2,18
    8b44:	8c400715 	stw	r17,28(r17)
    8b48:	8d800815 	stw	r22,32(r17)
    8b4c:	8d400915 	stw	r21,36(r17)
    8b50:	8d000a15 	stw	r20,40(r17)
    8b54:	8cc00b15 	stw	r19,44(r17)
    8b58:	8080030d 	sth	r2,12(r16)
    8b5c:	00800084 	movi	r2,2
    8b60:	80000015 	stw	zero,0(r16)
    8b64:	80000115 	stw	zero,4(r16)
    8b68:	80000215 	stw	zero,8(r16)
    8b6c:	80001915 	stw	zero,100(r16)
    8b70:	8080038d 	sth	r2,14(r16)
    8b74:	80000415 	stw	zero,16(r16)
    8b78:	80000515 	stw	zero,20(r16)
    8b7c:	80000615 	stw	zero,24(r16)
    8b80:	b80d883a 	mov	r6,r23
    8b84:	000b883a 	mov	r5,zero
    8b88:	81001704 	addi	r4,r16,92
    8b8c:	000a0540 	call	a054 <memset>
    8b90:	00800044 	movi	r2,1
    8b94:	84000715 	stw	r16,28(r16)
    8b98:	85800815 	stw	r22,32(r16)
    8b9c:	85400915 	stw	r21,36(r16)
    8ba0:	85000a15 	stw	r20,40(r16)
    8ba4:	84c00b15 	stw	r19,44(r16)
    8ba8:	90800e15 	stw	r2,56(r18)
    8bac:	dfc00817 	ldw	ra,32(sp)
    8bb0:	ddc00717 	ldw	r23,28(sp)
    8bb4:	dd800617 	ldw	r22,24(sp)
    8bb8:	dd400517 	ldw	r21,20(sp)
    8bbc:	dd000417 	ldw	r20,16(sp)
    8bc0:	dcc00317 	ldw	r19,12(sp)
    8bc4:	dc800217 	ldw	r18,8(sp)
    8bc8:	dc400117 	ldw	r17,4(sp)
    8bcc:	dc000017 	ldw	r16,0(sp)
    8bd0:	dec00904 	addi	sp,sp,36
    8bd4:	f800283a 	ret

00008bd8 <__fp_lock>:
    8bd8:	0005883a 	mov	r2,zero
    8bdc:	f800283a 	ret

00008be0 <__sfmoreglue>:
    8be0:	defffc04 	addi	sp,sp,-16
    8be4:	dc400115 	stw	r17,4(sp)
    8be8:	2c7fffc4 	addi	r17,r5,-1
    8bec:	8c401a24 	muli	r17,r17,104
    8bf0:	dc800215 	stw	r18,8(sp)
    8bf4:	2825883a 	mov	r18,r5
    8bf8:	89401d04 	addi	r5,r17,116
    8bfc:	dc000015 	stw	r16,0(sp)
    8c00:	dfc00315 	stw	ra,12(sp)
    8c04:	000961c0 	call	961c <_malloc_r>
    8c08:	1021883a 	mov	r16,r2
    8c0c:	10000726 	beq	r2,zero,8c2c <__sfmoreglue+0x4c>
    8c10:	11000304 	addi	r4,r2,12
    8c14:	10000015 	stw	zero,0(r2)
    8c18:	14800115 	stw	r18,4(r2)
    8c1c:	11000215 	stw	r4,8(r2)
    8c20:	89801a04 	addi	r6,r17,104
    8c24:	000b883a 	mov	r5,zero
    8c28:	000a0540 	call	a054 <memset>
    8c2c:	8005883a 	mov	r2,r16
    8c30:	dfc00317 	ldw	ra,12(sp)
    8c34:	dc800217 	ldw	r18,8(sp)
    8c38:	dc400117 	ldw	r17,4(sp)
    8c3c:	dc000017 	ldw	r16,0(sp)
    8c40:	dec00404 	addi	sp,sp,16
    8c44:	f800283a 	ret

00008c48 <__sfp>:
    8c48:	defffb04 	addi	sp,sp,-20
    8c4c:	dc000015 	stw	r16,0(sp)
    8c50:	040000b4 	movhi	r16,2
    8c54:	84064504 	addi	r16,r16,6420
    8c58:	dcc00315 	stw	r19,12(sp)
    8c5c:	2027883a 	mov	r19,r4
    8c60:	81000017 	ldw	r4,0(r16)
    8c64:	dfc00415 	stw	ra,16(sp)
    8c68:	dc800215 	stw	r18,8(sp)
    8c6c:	20800e17 	ldw	r2,56(r4)
    8c70:	dc400115 	stw	r17,4(sp)
    8c74:	1000021e 	bne	r2,zero,8c80 <__sfp+0x38>
    8c78:	0008a3c0 	call	8a3c <__sinit.part.1>
    8c7c:	81000017 	ldw	r4,0(r16)
    8c80:	2480b804 	addi	r18,r4,736
    8c84:	047fffc4 	movi	r17,-1
    8c88:	91000117 	ldw	r4,4(r18)
    8c8c:	94000217 	ldw	r16,8(r18)
    8c90:	213fffc4 	addi	r4,r4,-1
    8c94:	20000a16 	blt	r4,zero,8cc0 <__sfp+0x78>
    8c98:	8080030f 	ldh	r2,12(r16)
    8c9c:	10000c26 	beq	r2,zero,8cd0 <__sfp+0x88>
    8ca0:	80c01d04 	addi	r3,r16,116
    8ca4:	00000206 	br	8cb0 <__sfp+0x68>
    8ca8:	18bfe60f 	ldh	r2,-104(r3)
    8cac:	10000826 	beq	r2,zero,8cd0 <__sfp+0x88>
    8cb0:	213fffc4 	addi	r4,r4,-1
    8cb4:	1c3ffd04 	addi	r16,r3,-12
    8cb8:	18c01a04 	addi	r3,r3,104
    8cbc:	247ffa1e 	bne	r4,r17,8ca8 <__sfp+0x60>
    8cc0:	90800017 	ldw	r2,0(r18)
    8cc4:	10001d26 	beq	r2,zero,8d3c <__sfp+0xf4>
    8cc8:	1025883a 	mov	r18,r2
    8ccc:	003fee06 	br	8c88 <__sfp+0x40>
    8cd0:	00bfffc4 	movi	r2,-1
    8cd4:	8080038d 	sth	r2,14(r16)
    8cd8:	00800044 	movi	r2,1
    8cdc:	8080030d 	sth	r2,12(r16)
    8ce0:	80001915 	stw	zero,100(r16)
    8ce4:	80000015 	stw	zero,0(r16)
    8ce8:	80000215 	stw	zero,8(r16)
    8cec:	80000115 	stw	zero,4(r16)
    8cf0:	80000415 	stw	zero,16(r16)
    8cf4:	80000515 	stw	zero,20(r16)
    8cf8:	80000615 	stw	zero,24(r16)
    8cfc:	01800204 	movi	r6,8
    8d00:	000b883a 	mov	r5,zero
    8d04:	81001704 	addi	r4,r16,92
    8d08:	000a0540 	call	a054 <memset>
    8d0c:	8005883a 	mov	r2,r16
    8d10:	80000c15 	stw	zero,48(r16)
    8d14:	80000d15 	stw	zero,52(r16)
    8d18:	80001115 	stw	zero,68(r16)
    8d1c:	80001215 	stw	zero,72(r16)
    8d20:	dfc00417 	ldw	ra,16(sp)
    8d24:	dcc00317 	ldw	r19,12(sp)
    8d28:	dc800217 	ldw	r18,8(sp)
    8d2c:	dc400117 	ldw	r17,4(sp)
    8d30:	dc000017 	ldw	r16,0(sp)
    8d34:	dec00504 	addi	sp,sp,20
    8d38:	f800283a 	ret
    8d3c:	01400104 	movi	r5,4
    8d40:	9809883a 	mov	r4,r19
    8d44:	0008be00 	call	8be0 <__sfmoreglue>
    8d48:	90800015 	stw	r2,0(r18)
    8d4c:	103fde1e 	bne	r2,zero,8cc8 <__sfp+0x80>
    8d50:	00800304 	movi	r2,12
    8d54:	98800015 	stw	r2,0(r19)
    8d58:	0005883a 	mov	r2,zero
    8d5c:	003ff006 	br	8d20 <__sfp+0xd8>

00008d60 <_cleanup>:
    8d60:	008000b4 	movhi	r2,2
    8d64:	10864504 	addi	r2,r2,6420
    8d68:	11000017 	ldw	r4,0(r2)
    8d6c:	01400074 	movhi	r5,1
    8d70:	29782f04 	addi	r5,r5,-8004
    8d74:	00092c01 	jmpi	92c0 <_fwalk_reent>

00008d78 <__sinit>:
    8d78:	20800e17 	ldw	r2,56(r4)
    8d7c:	10000126 	beq	r2,zero,8d84 <__sinit+0xc>
    8d80:	f800283a 	ret
    8d84:	0008a3c1 	jmpi	8a3c <__sinit.part.1>

00008d88 <__sfp_lock_acquire>:
    8d88:	f800283a 	ret

00008d8c <__sfp_lock_release>:
    8d8c:	f800283a 	ret

00008d90 <__sinit_lock_acquire>:
    8d90:	f800283a 	ret

00008d94 <__sinit_lock_release>:
    8d94:	f800283a 	ret

00008d98 <__fp_lock_all>:
    8d98:	008000b4 	movhi	r2,2
    8d9c:	10864604 	addi	r2,r2,6424
    8da0:	11000017 	ldw	r4,0(r2)
    8da4:	01400074 	movhi	r5,1
    8da8:	2962f604 	addi	r5,r5,-29736
    8dac:	00091fc1 	jmpi	91fc <_fwalk>

00008db0 <__fp_unlock_all>:
    8db0:	008000b4 	movhi	r2,2
    8db4:	10864604 	addi	r2,r2,6424
    8db8:	11000017 	ldw	r4,0(r2)
    8dbc:	01400074 	movhi	r5,1
    8dc0:	29628a04 	addi	r5,r5,-30168
    8dc4:	00091fc1 	jmpi	91fc <_fwalk>

00008dc8 <_malloc_trim_r>:
    8dc8:	defffb04 	addi	sp,sp,-20
    8dcc:	dcc00315 	stw	r19,12(sp)
    8dd0:	04c000b4 	movhi	r19,2
    8dd4:	dc800215 	stw	r18,8(sp)
    8dd8:	dc400115 	stw	r17,4(sp)
    8ddc:	dc000015 	stw	r16,0(sp)
    8de0:	dfc00415 	stw	ra,16(sp)
    8de4:	2821883a 	mov	r16,r5
    8de8:	9cfffa04 	addi	r19,r19,-24
    8dec:	2025883a 	mov	r18,r4
    8df0:	00131200 	call	13120 <__malloc_lock>
    8df4:	98800217 	ldw	r2,8(r19)
    8df8:	14400117 	ldw	r17,4(r2)
    8dfc:	00bfff04 	movi	r2,-4
    8e00:	88a2703a 	and	r17,r17,r2
    8e04:	8c21c83a 	sub	r16,r17,r16
    8e08:	8403fbc4 	addi	r16,r16,4079
    8e0c:	8020d33a 	srli	r16,r16,12
    8e10:	0083ffc4 	movi	r2,4095
    8e14:	843fffc4 	addi	r16,r16,-1
    8e18:	8020933a 	slli	r16,r16,12
    8e1c:	1400060e 	bge	r2,r16,8e38 <_malloc_trim_r+0x70>
    8e20:	000b883a 	mov	r5,zero
    8e24:	9009883a 	mov	r4,r18
    8e28:	000b1ec0 	call	b1ec <_sbrk_r>
    8e2c:	98c00217 	ldw	r3,8(r19)
    8e30:	1c47883a 	add	r3,r3,r17
    8e34:	10c00a26 	beq	r2,r3,8e60 <_malloc_trim_r+0x98>
    8e38:	9009883a 	mov	r4,r18
    8e3c:	00132400 	call	13240 <__malloc_unlock>
    8e40:	0005883a 	mov	r2,zero
    8e44:	dfc00417 	ldw	ra,16(sp)
    8e48:	dcc00317 	ldw	r19,12(sp)
    8e4c:	dc800217 	ldw	r18,8(sp)
    8e50:	dc400117 	ldw	r17,4(sp)
    8e54:	dc000017 	ldw	r16,0(sp)
    8e58:	dec00504 	addi	sp,sp,20
    8e5c:	f800283a 	ret
    8e60:	040bc83a 	sub	r5,zero,r16
    8e64:	9009883a 	mov	r4,r18
    8e68:	000b1ec0 	call	b1ec <_sbrk_r>
    8e6c:	00ffffc4 	movi	r3,-1
    8e70:	10c00d26 	beq	r2,r3,8ea8 <_malloc_trim_r+0xe0>
    8e74:	00c000b4 	movhi	r3,2
    8e78:	18ce7504 	addi	r3,r3,14804
    8e7c:	18800017 	ldw	r2,0(r3)
    8e80:	99000217 	ldw	r4,8(r19)
    8e84:	8c23c83a 	sub	r17,r17,r16
    8e88:	8c400054 	ori	r17,r17,1
    8e8c:	1421c83a 	sub	r16,r2,r16
    8e90:	24400115 	stw	r17,4(r4)
    8e94:	9009883a 	mov	r4,r18
    8e98:	1c000015 	stw	r16,0(r3)
    8e9c:	00132400 	call	13240 <__malloc_unlock>
    8ea0:	00800044 	movi	r2,1
    8ea4:	003fe706 	br	8e44 <_malloc_trim_r+0x7c>
    8ea8:	000b883a 	mov	r5,zero
    8eac:	9009883a 	mov	r4,r18
    8eb0:	000b1ec0 	call	b1ec <_sbrk_r>
    8eb4:	99000217 	ldw	r4,8(r19)
    8eb8:	014003c4 	movi	r5,15
    8ebc:	1107c83a 	sub	r3,r2,r4
    8ec0:	28ffdd0e 	bge	r5,r3,8e38 <_malloc_trim_r+0x70>
    8ec4:	014000b4 	movhi	r5,2
    8ec8:	29464804 	addi	r5,r5,6432
    8ecc:	29400017 	ldw	r5,0(r5)
    8ed0:	18c00054 	ori	r3,r3,1
    8ed4:	20c00115 	stw	r3,4(r4)
    8ed8:	00c000b4 	movhi	r3,2
    8edc:	1145c83a 	sub	r2,r2,r5
    8ee0:	18ce7504 	addi	r3,r3,14804
    8ee4:	18800015 	stw	r2,0(r3)
    8ee8:	003fd306 	br	8e38 <_malloc_trim_r+0x70>

00008eec <_free_r>:
    8eec:	28004126 	beq	r5,zero,8ff4 <_free_r+0x108>
    8ef0:	defffd04 	addi	sp,sp,-12
    8ef4:	dc400115 	stw	r17,4(sp)
    8ef8:	dc000015 	stw	r16,0(sp)
    8efc:	2023883a 	mov	r17,r4
    8f00:	2821883a 	mov	r16,r5
    8f04:	dfc00215 	stw	ra,8(sp)
    8f08:	00131200 	call	13120 <__malloc_lock>
    8f0c:	81ffff17 	ldw	r7,-4(r16)
    8f10:	00bfff84 	movi	r2,-2
    8f14:	010000b4 	movhi	r4,2
    8f18:	81bffe04 	addi	r6,r16,-8
    8f1c:	3884703a 	and	r2,r7,r2
    8f20:	213ffa04 	addi	r4,r4,-24
    8f24:	308b883a 	add	r5,r6,r2
    8f28:	2a400117 	ldw	r9,4(r5)
    8f2c:	22000217 	ldw	r8,8(r4)
    8f30:	00ffff04 	movi	r3,-4
    8f34:	48c6703a 	and	r3,r9,r3
    8f38:	2a005726 	beq	r5,r8,9098 <_free_r+0x1ac>
    8f3c:	28c00115 	stw	r3,4(r5)
    8f40:	39c0004c 	andi	r7,r7,1
    8f44:	3800091e 	bne	r7,zero,8f6c <_free_r+0x80>
    8f48:	823ffe17 	ldw	r8,-8(r16)
    8f4c:	22400204 	addi	r9,r4,8
    8f50:	320dc83a 	sub	r6,r6,r8
    8f54:	31c00217 	ldw	r7,8(r6)
    8f58:	1205883a 	add	r2,r2,r8
    8f5c:	3a406526 	beq	r7,r9,90f4 <_free_r+0x208>
    8f60:	32000317 	ldw	r8,12(r6)
    8f64:	3a000315 	stw	r8,12(r7)
    8f68:	41c00215 	stw	r7,8(r8)
    8f6c:	28cf883a 	add	r7,r5,r3
    8f70:	39c00117 	ldw	r7,4(r7)
    8f74:	39c0004c 	andi	r7,r7,1
    8f78:	38003a26 	beq	r7,zero,9064 <_free_r+0x178>
    8f7c:	10c00054 	ori	r3,r2,1
    8f80:	30c00115 	stw	r3,4(r6)
    8f84:	3087883a 	add	r3,r6,r2
    8f88:	18800015 	stw	r2,0(r3)
    8f8c:	00c07fc4 	movi	r3,511
    8f90:	18801936 	bltu	r3,r2,8ff8 <_free_r+0x10c>
    8f94:	1004d0fa 	srli	r2,r2,3
    8f98:	01c00044 	movi	r7,1
    8f9c:	21400117 	ldw	r5,4(r4)
    8fa0:	10c00044 	addi	r3,r2,1
    8fa4:	18c7883a 	add	r3,r3,r3
    8fa8:	1005d0ba 	srai	r2,r2,2
    8fac:	18c7883a 	add	r3,r3,r3
    8fb0:	18c7883a 	add	r3,r3,r3
    8fb4:	1907883a 	add	r3,r3,r4
    8fb8:	3884983a 	sll	r2,r7,r2
    8fbc:	19c00017 	ldw	r7,0(r3)
    8fc0:	1a3ffe04 	addi	r8,r3,-8
    8fc4:	1144b03a 	or	r2,r2,r5
    8fc8:	32000315 	stw	r8,12(r6)
    8fcc:	31c00215 	stw	r7,8(r6)
    8fd0:	20800115 	stw	r2,4(r4)
    8fd4:	19800015 	stw	r6,0(r3)
    8fd8:	39800315 	stw	r6,12(r7)
    8fdc:	8809883a 	mov	r4,r17
    8fe0:	dfc00217 	ldw	ra,8(sp)
    8fe4:	dc400117 	ldw	r17,4(sp)
    8fe8:	dc000017 	ldw	r16,0(sp)
    8fec:	dec00304 	addi	sp,sp,12
    8ff0:	00132401 	jmpi	13240 <__malloc_unlock>
    8ff4:	f800283a 	ret
    8ff8:	100ad27a 	srli	r5,r2,9
    8ffc:	00c00104 	movi	r3,4
    9000:	19404a36 	bltu	r3,r5,912c <_free_r+0x240>
    9004:	100ad1ba 	srli	r5,r2,6
    9008:	28c00e44 	addi	r3,r5,57
    900c:	18c7883a 	add	r3,r3,r3
    9010:	29400e04 	addi	r5,r5,56
    9014:	18c7883a 	add	r3,r3,r3
    9018:	18c7883a 	add	r3,r3,r3
    901c:	1909883a 	add	r4,r3,r4
    9020:	20c00017 	ldw	r3,0(r4)
    9024:	01c000b4 	movhi	r7,2
    9028:	213ffe04 	addi	r4,r4,-8
    902c:	39fffa04 	addi	r7,r7,-24
    9030:	20c04426 	beq	r4,r3,9144 <_free_r+0x258>
    9034:	01ffff04 	movi	r7,-4
    9038:	19400117 	ldw	r5,4(r3)
    903c:	29ca703a 	and	r5,r5,r7
    9040:	1140022e 	bgeu	r2,r5,904c <_free_r+0x160>
    9044:	18c00217 	ldw	r3,8(r3)
    9048:	20fffb1e 	bne	r4,r3,9038 <_free_r+0x14c>
    904c:	19000317 	ldw	r4,12(r3)
    9050:	31000315 	stw	r4,12(r6)
    9054:	30c00215 	stw	r3,8(r6)
    9058:	21800215 	stw	r6,8(r4)
    905c:	19800315 	stw	r6,12(r3)
    9060:	003fde06 	br	8fdc <_free_r+0xf0>
    9064:	29c00217 	ldw	r7,8(r5)
    9068:	10c5883a 	add	r2,r2,r3
    906c:	00c000b4 	movhi	r3,2
    9070:	18fffc04 	addi	r3,r3,-16
    9074:	38c03b26 	beq	r7,r3,9164 <_free_r+0x278>
    9078:	2a000317 	ldw	r8,12(r5)
    907c:	11400054 	ori	r5,r2,1
    9080:	3087883a 	add	r3,r6,r2
    9084:	3a000315 	stw	r8,12(r7)
    9088:	41c00215 	stw	r7,8(r8)
    908c:	31400115 	stw	r5,4(r6)
    9090:	18800015 	stw	r2,0(r3)
    9094:	003fbd06 	br	8f8c <_free_r+0xa0>
    9098:	39c0004c 	andi	r7,r7,1
    909c:	10c5883a 	add	r2,r2,r3
    90a0:	3800071e 	bne	r7,zero,90c0 <_free_r+0x1d4>
    90a4:	81fffe17 	ldw	r7,-8(r16)
    90a8:	31cdc83a 	sub	r6,r6,r7
    90ac:	30c00317 	ldw	r3,12(r6)
    90b0:	31400217 	ldw	r5,8(r6)
    90b4:	11c5883a 	add	r2,r2,r7
    90b8:	28c00315 	stw	r3,12(r5)
    90bc:	19400215 	stw	r5,8(r3)
    90c0:	10c00054 	ori	r3,r2,1
    90c4:	30c00115 	stw	r3,4(r6)
    90c8:	00c000b4 	movhi	r3,2
    90cc:	18c64904 	addi	r3,r3,6436
    90d0:	18c00017 	ldw	r3,0(r3)
    90d4:	21800215 	stw	r6,8(r4)
    90d8:	10ffc036 	bltu	r2,r3,8fdc <_free_r+0xf0>
    90dc:	008000b4 	movhi	r2,2
    90e0:	108e5304 	addi	r2,r2,14668
    90e4:	11400017 	ldw	r5,0(r2)
    90e8:	8809883a 	mov	r4,r17
    90ec:	0008dc80 	call	8dc8 <_malloc_trim_r>
    90f0:	003fba06 	br	8fdc <_free_r+0xf0>
    90f4:	28c9883a 	add	r4,r5,r3
    90f8:	21000117 	ldw	r4,4(r4)
    90fc:	2100004c 	andi	r4,r4,1
    9100:	2000391e 	bne	r4,zero,91e8 <_free_r+0x2fc>
    9104:	29c00217 	ldw	r7,8(r5)
    9108:	29000317 	ldw	r4,12(r5)
    910c:	1885883a 	add	r2,r3,r2
    9110:	10c00054 	ori	r3,r2,1
    9114:	39000315 	stw	r4,12(r7)
    9118:	21c00215 	stw	r7,8(r4)
    911c:	30c00115 	stw	r3,4(r6)
    9120:	308d883a 	add	r6,r6,r2
    9124:	30800015 	stw	r2,0(r6)
    9128:	003fac06 	br	8fdc <_free_r+0xf0>
    912c:	00c00504 	movi	r3,20
    9130:	19401536 	bltu	r3,r5,9188 <_free_r+0x29c>
    9134:	28c01704 	addi	r3,r5,92
    9138:	18c7883a 	add	r3,r3,r3
    913c:	294016c4 	addi	r5,r5,91
    9140:	003fb406 	br	9014 <_free_r+0x128>
    9144:	280bd0ba 	srai	r5,r5,2
    9148:	00c00044 	movi	r3,1
    914c:	38800117 	ldw	r2,4(r7)
    9150:	194a983a 	sll	r5,r3,r5
    9154:	2007883a 	mov	r3,r4
    9158:	2884b03a 	or	r2,r5,r2
    915c:	38800115 	stw	r2,4(r7)
    9160:	003fbb06 	br	9050 <_free_r+0x164>
    9164:	21800515 	stw	r6,20(r4)
    9168:	21800415 	stw	r6,16(r4)
    916c:	10c00054 	ori	r3,r2,1
    9170:	31c00315 	stw	r7,12(r6)
    9174:	31c00215 	stw	r7,8(r6)
    9178:	30c00115 	stw	r3,4(r6)
    917c:	308d883a 	add	r6,r6,r2
    9180:	30800015 	stw	r2,0(r6)
    9184:	003f9506 	br	8fdc <_free_r+0xf0>
    9188:	00c01504 	movi	r3,84
    918c:	19400536 	bltu	r3,r5,91a4 <_free_r+0x2b8>
    9190:	100ad33a 	srli	r5,r2,12
    9194:	28c01bc4 	addi	r3,r5,111
    9198:	18c7883a 	add	r3,r3,r3
    919c:	29401b84 	addi	r5,r5,110
    91a0:	003f9c06 	br	9014 <_free_r+0x128>
    91a4:	00c05504 	movi	r3,340
    91a8:	19400536 	bltu	r3,r5,91c0 <_free_r+0x2d4>
    91ac:	100ad3fa 	srli	r5,r2,15
    91b0:	28c01e04 	addi	r3,r5,120
    91b4:	18c7883a 	add	r3,r3,r3
    91b8:	29401dc4 	addi	r5,r5,119
    91bc:	003f9506 	br	9014 <_free_r+0x128>
    91c0:	00c15504 	movi	r3,1364
    91c4:	19400536 	bltu	r3,r5,91dc <_free_r+0x2f0>
    91c8:	100ad4ba 	srli	r5,r2,18
    91cc:	28c01f44 	addi	r3,r5,125
    91d0:	18c7883a 	add	r3,r3,r3
    91d4:	29401f04 	addi	r5,r5,124
    91d8:	003f8e06 	br	9014 <_free_r+0x128>
    91dc:	00c03f84 	movi	r3,254
    91e0:	01401f84 	movi	r5,126
    91e4:	003f8b06 	br	9014 <_free_r+0x128>
    91e8:	10c00054 	ori	r3,r2,1
    91ec:	30c00115 	stw	r3,4(r6)
    91f0:	308d883a 	add	r6,r6,r2
    91f4:	30800015 	stw	r2,0(r6)
    91f8:	003f7806 	br	8fdc <_free_r+0xf0>

000091fc <_fwalk>:
    91fc:	defff704 	addi	sp,sp,-36
    9200:	dd000415 	stw	r20,16(sp)
    9204:	dfc00815 	stw	ra,32(sp)
    9208:	ddc00715 	stw	r23,28(sp)
    920c:	dd800615 	stw	r22,24(sp)
    9210:	dd400515 	stw	r21,20(sp)
    9214:	dcc00315 	stw	r19,12(sp)
    9218:	dc800215 	stw	r18,8(sp)
    921c:	dc400115 	stw	r17,4(sp)
    9220:	dc000015 	stw	r16,0(sp)
    9224:	2500b804 	addi	r20,r4,736
    9228:	a0002326 	beq	r20,zero,92b8 <_fwalk+0xbc>
    922c:	282b883a 	mov	r21,r5
    9230:	002f883a 	mov	r23,zero
    9234:	05800044 	movi	r22,1
    9238:	04ffffc4 	movi	r19,-1
    923c:	a4400117 	ldw	r17,4(r20)
    9240:	a4800217 	ldw	r18,8(r20)
    9244:	8c7fffc4 	addi	r17,r17,-1
    9248:	88000d16 	blt	r17,zero,9280 <_fwalk+0x84>
    924c:	94000304 	addi	r16,r18,12
    9250:	94800384 	addi	r18,r18,14
    9254:	8080000b 	ldhu	r2,0(r16)
    9258:	8c7fffc4 	addi	r17,r17,-1
    925c:	813ffd04 	addi	r4,r16,-12
    9260:	b080042e 	bgeu	r22,r2,9274 <_fwalk+0x78>
    9264:	9080000f 	ldh	r2,0(r18)
    9268:	14c00226 	beq	r2,r19,9274 <_fwalk+0x78>
    926c:	a83ee83a 	callr	r21
    9270:	b8aeb03a 	or	r23,r23,r2
    9274:	84001a04 	addi	r16,r16,104
    9278:	94801a04 	addi	r18,r18,104
    927c:	8cfff51e 	bne	r17,r19,9254 <_fwalk+0x58>
    9280:	a5000017 	ldw	r20,0(r20)
    9284:	a03fed1e 	bne	r20,zero,923c <_fwalk+0x40>
    9288:	b805883a 	mov	r2,r23
    928c:	dfc00817 	ldw	ra,32(sp)
    9290:	ddc00717 	ldw	r23,28(sp)
    9294:	dd800617 	ldw	r22,24(sp)
    9298:	dd400517 	ldw	r21,20(sp)
    929c:	dd000417 	ldw	r20,16(sp)
    92a0:	dcc00317 	ldw	r19,12(sp)
    92a4:	dc800217 	ldw	r18,8(sp)
    92a8:	dc400117 	ldw	r17,4(sp)
    92ac:	dc000017 	ldw	r16,0(sp)
    92b0:	dec00904 	addi	sp,sp,36
    92b4:	f800283a 	ret
    92b8:	002f883a 	mov	r23,zero
    92bc:	003ff206 	br	9288 <_fwalk+0x8c>

000092c0 <_fwalk_reent>:
    92c0:	defff704 	addi	sp,sp,-36
    92c4:	dd000415 	stw	r20,16(sp)
    92c8:	dfc00815 	stw	ra,32(sp)
    92cc:	ddc00715 	stw	r23,28(sp)
    92d0:	dd800615 	stw	r22,24(sp)
    92d4:	dd400515 	stw	r21,20(sp)
    92d8:	dcc00315 	stw	r19,12(sp)
    92dc:	dc800215 	stw	r18,8(sp)
    92e0:	dc400115 	stw	r17,4(sp)
    92e4:	dc000015 	stw	r16,0(sp)
    92e8:	2500b804 	addi	r20,r4,736
    92ec:	a0002326 	beq	r20,zero,937c <_fwalk_reent+0xbc>
    92f0:	282b883a 	mov	r21,r5
    92f4:	2027883a 	mov	r19,r4
    92f8:	002f883a 	mov	r23,zero
    92fc:	05800044 	movi	r22,1
    9300:	04bfffc4 	movi	r18,-1
    9304:	a4400117 	ldw	r17,4(r20)
    9308:	a4000217 	ldw	r16,8(r20)
    930c:	8c7fffc4 	addi	r17,r17,-1
    9310:	88000c16 	blt	r17,zero,9344 <_fwalk_reent+0x84>
    9314:	84000304 	addi	r16,r16,12
    9318:	8080000b 	ldhu	r2,0(r16)
    931c:	8c7fffc4 	addi	r17,r17,-1
    9320:	817ffd04 	addi	r5,r16,-12
    9324:	b080052e 	bgeu	r22,r2,933c <_fwalk_reent+0x7c>
    9328:	8080008f 	ldh	r2,2(r16)
    932c:	9809883a 	mov	r4,r19
    9330:	14800226 	beq	r2,r18,933c <_fwalk_reent+0x7c>
    9334:	a83ee83a 	callr	r21
    9338:	b8aeb03a 	or	r23,r23,r2
    933c:	84001a04 	addi	r16,r16,104
    9340:	8cbff51e 	bne	r17,r18,9318 <_fwalk_reent+0x58>
    9344:	a5000017 	ldw	r20,0(r20)
    9348:	a03fee1e 	bne	r20,zero,9304 <_fwalk_reent+0x44>
    934c:	b805883a 	mov	r2,r23
    9350:	dfc00817 	ldw	ra,32(sp)
    9354:	ddc00717 	ldw	r23,28(sp)
    9358:	dd800617 	ldw	r22,24(sp)
    935c:	dd400517 	ldw	r21,20(sp)
    9360:	dd000417 	ldw	r20,16(sp)
    9364:	dcc00317 	ldw	r19,12(sp)
    9368:	dc800217 	ldw	r18,8(sp)
    936c:	dc400117 	ldw	r17,4(sp)
    9370:	dc000017 	ldw	r16,0(sp)
    9374:	dec00904 	addi	sp,sp,36
    9378:	f800283a 	ret
    937c:	002f883a 	mov	r23,zero
    9380:	003ff206 	br	934c <_fwalk_reent+0x8c>

00009384 <_setlocale_r>:
    9384:	30001b26 	beq	r6,zero,93f4 <_setlocale_r+0x70>
    9388:	014000b4 	movhi	r5,2
    938c:	defffe04 	addi	sp,sp,-8
    9390:	297d7e04 	addi	r5,r5,-2568
    9394:	3009883a 	mov	r4,r6
    9398:	dc000015 	stw	r16,0(sp)
    939c:	dfc00115 	stw	ra,4(sp)
    93a0:	3021883a 	mov	r16,r6
    93a4:	000b37c0 	call	b37c <strcmp>
    93a8:	1000061e 	bne	r2,zero,93c4 <_setlocale_r+0x40>
    93ac:	008000b4 	movhi	r2,2
    93b0:	10bb9804 	addi	r2,r2,-4512
    93b4:	dfc00117 	ldw	ra,4(sp)
    93b8:	dc000017 	ldw	r16,0(sp)
    93bc:	dec00204 	addi	sp,sp,8
    93c0:	f800283a 	ret
    93c4:	014000b4 	movhi	r5,2
    93c8:	297b9804 	addi	r5,r5,-4512
    93cc:	8009883a 	mov	r4,r16
    93d0:	000b37c0 	call	b37c <strcmp>
    93d4:	103ff526 	beq	r2,zero,93ac <_setlocale_r+0x28>
    93d8:	014000b4 	movhi	r5,2
    93dc:	297d6104 	addi	r5,r5,-2684
    93e0:	8009883a 	mov	r4,r16
    93e4:	000b37c0 	call	b37c <strcmp>
    93e8:	103ff026 	beq	r2,zero,93ac <_setlocale_r+0x28>
    93ec:	0005883a 	mov	r2,zero
    93f0:	003ff006 	br	93b4 <_setlocale_r+0x30>
    93f4:	008000b4 	movhi	r2,2
    93f8:	10bb9804 	addi	r2,r2,-4512
    93fc:	f800283a 	ret

00009400 <__locale_charset>:
    9400:	008000b4 	movhi	r2,2
    9404:	10bfe404 	addi	r2,r2,-112
    9408:	f800283a 	ret

0000940c <__locale_mb_cur_max>:
    940c:	008000b4 	movhi	r2,2
    9410:	10864704 	addi	r2,r2,6428
    9414:	10800017 	ldw	r2,0(r2)
    9418:	f800283a 	ret

0000941c <__locale_msgcharset>:
    941c:	008000b4 	movhi	r2,2
    9420:	10bfdc04 	addi	r2,r2,-144
    9424:	f800283a 	ret

00009428 <__locale_cjk_lang>:
    9428:	0005883a 	mov	r2,zero
    942c:	f800283a 	ret

00009430 <_localeconv_r>:
    9430:	008000b4 	movhi	r2,2
    9434:	10bfec04 	addi	r2,r2,-80
    9438:	f800283a 	ret

0000943c <setlocale>:
    943c:	008000b4 	movhi	r2,2
    9440:	10864604 	addi	r2,r2,6424
    9444:	280d883a 	mov	r6,r5
    9448:	200b883a 	mov	r5,r4
    944c:	11000017 	ldw	r4,0(r2)
    9450:	00093841 	jmpi	9384 <_setlocale_r>

00009454 <localeconv>:
    9454:	008000b4 	movhi	r2,2
    9458:	10bfec04 	addi	r2,r2,-80
    945c:	f800283a 	ret

00009460 <__smakebuf_r>:
    9460:	2880030b 	ldhu	r2,12(r5)
    9464:	10c0008c 	andi	r3,r2,2
    9468:	1800411e 	bne	r3,zero,9570 <__smakebuf_r+0x110>
    946c:	deffec04 	addi	sp,sp,-80
    9470:	dc000f15 	stw	r16,60(sp)
    9474:	2821883a 	mov	r16,r5
    9478:	2940038f 	ldh	r5,14(r5)
    947c:	dc401015 	stw	r17,64(sp)
    9480:	dfc01315 	stw	ra,76(sp)
    9484:	dcc01215 	stw	r19,72(sp)
    9488:	dc801115 	stw	r18,68(sp)
    948c:	2023883a 	mov	r17,r4
    9490:	28001c16 	blt	r5,zero,9504 <__smakebuf_r+0xa4>
    9494:	d80d883a 	mov	r6,sp
    9498:	000e3c80 	call	e3c8 <_fstat_r>
    949c:	10001816 	blt	r2,zero,9500 <__smakebuf_r+0xa0>
    94a0:	d8800117 	ldw	r2,4(sp)
    94a4:	00e00014 	movui	r3,32768
    94a8:	10bc000c 	andi	r2,r2,61440
    94ac:	14c80020 	cmpeqi	r19,r2,8192
    94b0:	10c03726 	beq	r2,r3,9590 <__smakebuf_r+0x130>
    94b4:	80c0030b 	ldhu	r3,12(r16)
    94b8:	18c20014 	ori	r3,r3,2048
    94bc:	80c0030d 	sth	r3,12(r16)
    94c0:	00c80004 	movi	r3,8192
    94c4:	10c0521e 	bne	r2,r3,9610 <__smakebuf_r+0x1b0>
    94c8:	8140038f 	ldh	r5,14(r16)
    94cc:	8809883a 	mov	r4,r17
    94d0:	000e8e00 	call	e8e0 <_isatty_r>
    94d4:	10004c26 	beq	r2,zero,9608 <__smakebuf_r+0x1a8>
    94d8:	8080030b 	ldhu	r2,12(r16)
    94dc:	80c010c4 	addi	r3,r16,67
    94e0:	80c00015 	stw	r3,0(r16)
    94e4:	10800054 	ori	r2,r2,1
    94e8:	8080030d 	sth	r2,12(r16)
    94ec:	00800044 	movi	r2,1
    94f0:	80c00415 	stw	r3,16(r16)
    94f4:	80800515 	stw	r2,20(r16)
    94f8:	04810004 	movi	r18,1024
    94fc:	00000706 	br	951c <__smakebuf_r+0xbc>
    9500:	8080030b 	ldhu	r2,12(r16)
    9504:	10c0200c 	andi	r3,r2,128
    9508:	18001f1e 	bne	r3,zero,9588 <__smakebuf_r+0x128>
    950c:	04810004 	movi	r18,1024
    9510:	10820014 	ori	r2,r2,2048
    9514:	8080030d 	sth	r2,12(r16)
    9518:	0027883a 	mov	r19,zero
    951c:	900b883a 	mov	r5,r18
    9520:	8809883a 	mov	r4,r17
    9524:	000961c0 	call	961c <_malloc_r>
    9528:	10002c26 	beq	r2,zero,95dc <__smakebuf_r+0x17c>
    952c:	80c0030b 	ldhu	r3,12(r16)
    9530:	01000074 	movhi	r4,1
    9534:	21228c04 	addi	r4,r4,-30160
    9538:	89000f15 	stw	r4,60(r17)
    953c:	18c02014 	ori	r3,r3,128
    9540:	80c0030d 	sth	r3,12(r16)
    9544:	80800015 	stw	r2,0(r16)
    9548:	80800415 	stw	r2,16(r16)
    954c:	84800515 	stw	r18,20(r16)
    9550:	98001a1e 	bne	r19,zero,95bc <__smakebuf_r+0x15c>
    9554:	dfc01317 	ldw	ra,76(sp)
    9558:	dcc01217 	ldw	r19,72(sp)
    955c:	dc801117 	ldw	r18,68(sp)
    9560:	dc401017 	ldw	r17,64(sp)
    9564:	dc000f17 	ldw	r16,60(sp)
    9568:	dec01404 	addi	sp,sp,80
    956c:	f800283a 	ret
    9570:	288010c4 	addi	r2,r5,67
    9574:	28800015 	stw	r2,0(r5)
    9578:	28800415 	stw	r2,16(r5)
    957c:	00800044 	movi	r2,1
    9580:	28800515 	stw	r2,20(r5)
    9584:	f800283a 	ret
    9588:	04801004 	movi	r18,64
    958c:	003fe006 	br	9510 <__smakebuf_r+0xb0>
    9590:	81000a17 	ldw	r4,40(r16)
    9594:	00c00074 	movhi	r3,1
    9598:	18ecc604 	addi	r3,r3,-19688
    959c:	20ffc51e 	bne	r4,r3,94b4 <__smakebuf_r+0x54>
    95a0:	8080030b 	ldhu	r2,12(r16)
    95a4:	04810004 	movi	r18,1024
    95a8:	84801315 	stw	r18,76(r16)
    95ac:	1484b03a 	or	r2,r2,r18
    95b0:	8080030d 	sth	r2,12(r16)
    95b4:	0027883a 	mov	r19,zero
    95b8:	003fd806 	br	951c <__smakebuf_r+0xbc>
    95bc:	8140038f 	ldh	r5,14(r16)
    95c0:	8809883a 	mov	r4,r17
    95c4:	000e8e00 	call	e8e0 <_isatty_r>
    95c8:	103fe226 	beq	r2,zero,9554 <__smakebuf_r+0xf4>
    95cc:	8080030b 	ldhu	r2,12(r16)
    95d0:	10800054 	ori	r2,r2,1
    95d4:	8080030d 	sth	r2,12(r16)
    95d8:	003fde06 	br	9554 <__smakebuf_r+0xf4>
    95dc:	8080030b 	ldhu	r2,12(r16)
    95e0:	10c0800c 	andi	r3,r2,512
    95e4:	183fdb1e 	bne	r3,zero,9554 <__smakebuf_r+0xf4>
    95e8:	10800094 	ori	r2,r2,2
    95ec:	80c010c4 	addi	r3,r16,67
    95f0:	8080030d 	sth	r2,12(r16)
    95f4:	00800044 	movi	r2,1
    95f8:	80c00015 	stw	r3,0(r16)
    95fc:	80c00415 	stw	r3,16(r16)
    9600:	80800515 	stw	r2,20(r16)
    9604:	003fd306 	br	9554 <__smakebuf_r+0xf4>
    9608:	04810004 	movi	r18,1024
    960c:	003fc306 	br	951c <__smakebuf_r+0xbc>
    9610:	0027883a 	mov	r19,zero
    9614:	04810004 	movi	r18,1024
    9618:	003fc006 	br	951c <__smakebuf_r+0xbc>

0000961c <_malloc_r>:
    961c:	defff504 	addi	sp,sp,-44
    9620:	dc800315 	stw	r18,12(sp)
    9624:	dfc00a15 	stw	ra,40(sp)
    9628:	df000915 	stw	fp,36(sp)
    962c:	ddc00815 	stw	r23,32(sp)
    9630:	dd800715 	stw	r22,28(sp)
    9634:	dd400615 	stw	r21,24(sp)
    9638:	dd000515 	stw	r20,20(sp)
    963c:	dcc00415 	stw	r19,16(sp)
    9640:	dc400215 	stw	r17,8(sp)
    9644:	dc000115 	stw	r16,4(sp)
    9648:	288002c4 	addi	r2,r5,11
    964c:	00c00584 	movi	r3,22
    9650:	2025883a 	mov	r18,r4
    9654:	18807f2e 	bgeu	r3,r2,9854 <_malloc_r+0x238>
    9658:	047ffe04 	movi	r17,-8
    965c:	1462703a 	and	r17,r2,r17
    9660:	8800a316 	blt	r17,zero,98f0 <_malloc_r+0x2d4>
    9664:	8940a236 	bltu	r17,r5,98f0 <_malloc_r+0x2d4>
    9668:	00131200 	call	13120 <__malloc_lock>
    966c:	00807dc4 	movi	r2,503
    9670:	1441e92e 	bgeu	r2,r17,9e18 <_malloc_r+0x7fc>
    9674:	8804d27a 	srli	r2,r17,9
    9678:	1000a126 	beq	r2,zero,9900 <_malloc_r+0x2e4>
    967c:	00c00104 	movi	r3,4
    9680:	18811e36 	bltu	r3,r2,9afc <_malloc_r+0x4e0>
    9684:	8804d1ba 	srli	r2,r17,6
    9688:	12000e44 	addi	r8,r2,57
    968c:	11c00e04 	addi	r7,r2,56
    9690:	4209883a 	add	r4,r8,r8
    9694:	04c000b4 	movhi	r19,2
    9698:	2109883a 	add	r4,r4,r4
    969c:	9cfffa04 	addi	r19,r19,-24
    96a0:	2109883a 	add	r4,r4,r4
    96a4:	9909883a 	add	r4,r19,r4
    96a8:	24000117 	ldw	r16,4(r4)
    96ac:	213ffe04 	addi	r4,r4,-8
    96b0:	24009726 	beq	r4,r16,9910 <_malloc_r+0x2f4>
    96b4:	80800117 	ldw	r2,4(r16)
    96b8:	01bfff04 	movi	r6,-4
    96bc:	014003c4 	movi	r5,15
    96c0:	1184703a 	and	r2,r2,r6
    96c4:	1447c83a 	sub	r3,r2,r17
    96c8:	28c00716 	blt	r5,r3,96e8 <_malloc_r+0xcc>
    96cc:	1800920e 	bge	r3,zero,9918 <_malloc_r+0x2fc>
    96d0:	84000317 	ldw	r16,12(r16)
    96d4:	24008e26 	beq	r4,r16,9910 <_malloc_r+0x2f4>
    96d8:	80800117 	ldw	r2,4(r16)
    96dc:	1184703a 	and	r2,r2,r6
    96e0:	1447c83a 	sub	r3,r2,r17
    96e4:	28fff90e 	bge	r5,r3,96cc <_malloc_r+0xb0>
    96e8:	3809883a 	mov	r4,r7
    96ec:	018000b4 	movhi	r6,2
    96f0:	9c000417 	ldw	r16,16(r19)
    96f4:	31bffa04 	addi	r6,r6,-24
    96f8:	32000204 	addi	r8,r6,8
    96fc:	82013426 	beq	r16,r8,9bd0 <_malloc_r+0x5b4>
    9700:	80c00117 	ldw	r3,4(r16)
    9704:	00bfff04 	movi	r2,-4
    9708:	188e703a 	and	r7,r3,r2
    970c:	3c45c83a 	sub	r2,r7,r17
    9710:	00c003c4 	movi	r3,15
    9714:	18811f16 	blt	r3,r2,9b94 <_malloc_r+0x578>
    9718:	32000515 	stw	r8,20(r6)
    971c:	32000415 	stw	r8,16(r6)
    9720:	10007f0e 	bge	r2,zero,9920 <_malloc_r+0x304>
    9724:	00807fc4 	movi	r2,511
    9728:	11c0fd36 	bltu	r2,r7,9b20 <_malloc_r+0x504>
    972c:	3806d0fa 	srli	r3,r7,3
    9730:	01c00044 	movi	r7,1
    9734:	30800117 	ldw	r2,4(r6)
    9738:	19400044 	addi	r5,r3,1
    973c:	294b883a 	add	r5,r5,r5
    9740:	1807d0ba 	srai	r3,r3,2
    9744:	294b883a 	add	r5,r5,r5
    9748:	294b883a 	add	r5,r5,r5
    974c:	298b883a 	add	r5,r5,r6
    9750:	38c6983a 	sll	r3,r7,r3
    9754:	29c00017 	ldw	r7,0(r5)
    9758:	2a7ffe04 	addi	r9,r5,-8
    975c:	1886b03a 	or	r3,r3,r2
    9760:	82400315 	stw	r9,12(r16)
    9764:	81c00215 	stw	r7,8(r16)
    9768:	30c00115 	stw	r3,4(r6)
    976c:	2c000015 	stw	r16,0(r5)
    9770:	3c000315 	stw	r16,12(r7)
    9774:	2005d0ba 	srai	r2,r4,2
    9778:	01400044 	movi	r5,1
    977c:	288a983a 	sll	r5,r5,r2
    9780:	19406f36 	bltu	r3,r5,9940 <_malloc_r+0x324>
    9784:	28c4703a 	and	r2,r5,r3
    9788:	10000a1e 	bne	r2,zero,97b4 <_malloc_r+0x198>
    978c:	00bfff04 	movi	r2,-4
    9790:	294b883a 	add	r5,r5,r5
    9794:	2088703a 	and	r4,r4,r2
    9798:	28c4703a 	and	r2,r5,r3
    979c:	21000104 	addi	r4,r4,4
    97a0:	1000041e 	bne	r2,zero,97b4 <_malloc_r+0x198>
    97a4:	294b883a 	add	r5,r5,r5
    97a8:	28c4703a 	and	r2,r5,r3
    97ac:	21000104 	addi	r4,r4,4
    97b0:	103ffc26 	beq	r2,zero,97a4 <_malloc_r+0x188>
    97b4:	02bfff04 	movi	r10,-4
    97b8:	024003c4 	movi	r9,15
    97bc:	21800044 	addi	r6,r4,1
    97c0:	318d883a 	add	r6,r6,r6
    97c4:	318d883a 	add	r6,r6,r6
    97c8:	318d883a 	add	r6,r6,r6
    97cc:	998d883a 	add	r6,r19,r6
    97d0:	333ffe04 	addi	r12,r6,-8
    97d4:	2017883a 	mov	r11,r4
    97d8:	31800104 	addi	r6,r6,4
    97dc:	34000017 	ldw	r16,0(r6)
    97e0:	31fffd04 	addi	r7,r6,-12
    97e4:	81c0041e 	bne	r16,r7,97f8 <_malloc_r+0x1dc>
    97e8:	0000fb06 	br	9bd8 <_malloc_r+0x5bc>
    97ec:	1801030e 	bge	r3,zero,9bfc <_malloc_r+0x5e0>
    97f0:	84000317 	ldw	r16,12(r16)
    97f4:	81c0f826 	beq	r16,r7,9bd8 <_malloc_r+0x5bc>
    97f8:	80800117 	ldw	r2,4(r16)
    97fc:	1284703a 	and	r2,r2,r10
    9800:	1447c83a 	sub	r3,r2,r17
    9804:	48fff90e 	bge	r9,r3,97ec <_malloc_r+0x1d0>
    9808:	80800317 	ldw	r2,12(r16)
    980c:	81000217 	ldw	r4,8(r16)
    9810:	89400054 	ori	r5,r17,1
    9814:	81400115 	stw	r5,4(r16)
    9818:	20800315 	stw	r2,12(r4)
    981c:	11000215 	stw	r4,8(r2)
    9820:	8463883a 	add	r17,r16,r17
    9824:	9c400515 	stw	r17,20(r19)
    9828:	9c400415 	stw	r17,16(r19)
    982c:	18800054 	ori	r2,r3,1
    9830:	88800115 	stw	r2,4(r17)
    9834:	8a000315 	stw	r8,12(r17)
    9838:	8a000215 	stw	r8,8(r17)
    983c:	88e3883a 	add	r17,r17,r3
    9840:	88c00015 	stw	r3,0(r17)
    9844:	9009883a 	mov	r4,r18
    9848:	00132400 	call	13240 <__malloc_unlock>
    984c:	80800204 	addi	r2,r16,8
    9850:	00001b06 	br	98c0 <_malloc_r+0x2a4>
    9854:	04400404 	movi	r17,16
    9858:	89402536 	bltu	r17,r5,98f0 <_malloc_r+0x2d4>
    985c:	00131200 	call	13120 <__malloc_lock>
    9860:	00800184 	movi	r2,6
    9864:	01000084 	movi	r4,2
    9868:	04c000b4 	movhi	r19,2
    986c:	1085883a 	add	r2,r2,r2
    9870:	9cfffa04 	addi	r19,r19,-24
    9874:	1085883a 	add	r2,r2,r2
    9878:	9885883a 	add	r2,r19,r2
    987c:	14000117 	ldw	r16,4(r2)
    9880:	10fffe04 	addi	r3,r2,-8
    9884:	80c0d926 	beq	r16,r3,9bec <_malloc_r+0x5d0>
    9888:	80c00117 	ldw	r3,4(r16)
    988c:	81000317 	ldw	r4,12(r16)
    9890:	00bfff04 	movi	r2,-4
    9894:	1884703a 	and	r2,r3,r2
    9898:	81400217 	ldw	r5,8(r16)
    989c:	8085883a 	add	r2,r16,r2
    98a0:	10c00117 	ldw	r3,4(r2)
    98a4:	29000315 	stw	r4,12(r5)
    98a8:	21400215 	stw	r5,8(r4)
    98ac:	18c00054 	ori	r3,r3,1
    98b0:	10c00115 	stw	r3,4(r2)
    98b4:	9009883a 	mov	r4,r18
    98b8:	00132400 	call	13240 <__malloc_unlock>
    98bc:	80800204 	addi	r2,r16,8
    98c0:	dfc00a17 	ldw	ra,40(sp)
    98c4:	df000917 	ldw	fp,36(sp)
    98c8:	ddc00817 	ldw	r23,32(sp)
    98cc:	dd800717 	ldw	r22,28(sp)
    98d0:	dd400617 	ldw	r21,24(sp)
    98d4:	dd000517 	ldw	r20,20(sp)
    98d8:	dcc00417 	ldw	r19,16(sp)
    98dc:	dc800317 	ldw	r18,12(sp)
    98e0:	dc400217 	ldw	r17,8(sp)
    98e4:	dc000117 	ldw	r16,4(sp)
    98e8:	dec00b04 	addi	sp,sp,44
    98ec:	f800283a 	ret
    98f0:	00800304 	movi	r2,12
    98f4:	90800015 	stw	r2,0(r18)
    98f8:	0005883a 	mov	r2,zero
    98fc:	003ff006 	br	98c0 <_malloc_r+0x2a4>
    9900:	01002004 	movi	r4,128
    9904:	02001004 	movi	r8,64
    9908:	01c00fc4 	movi	r7,63
    990c:	003f6106 	br	9694 <_malloc_r+0x78>
    9910:	4009883a 	mov	r4,r8
    9914:	003f7506 	br	96ec <_malloc_r+0xd0>
    9918:	81000317 	ldw	r4,12(r16)
    991c:	003fde06 	br	9898 <_malloc_r+0x27c>
    9920:	81c5883a 	add	r2,r16,r7
    9924:	11400117 	ldw	r5,4(r2)
    9928:	9009883a 	mov	r4,r18
    992c:	29400054 	ori	r5,r5,1
    9930:	11400115 	stw	r5,4(r2)
    9934:	00132400 	call	13240 <__malloc_unlock>
    9938:	80800204 	addi	r2,r16,8
    993c:	003fe006 	br	98c0 <_malloc_r+0x2a4>
    9940:	9c000217 	ldw	r16,8(r19)
    9944:	00bfff04 	movi	r2,-4
    9948:	85800117 	ldw	r22,4(r16)
    994c:	b0ac703a 	and	r22,r22,r2
    9950:	b4400336 	bltu	r22,r17,9960 <_malloc_r+0x344>
    9954:	b445c83a 	sub	r2,r22,r17
    9958:	00c003c4 	movi	r3,15
    995c:	18805d16 	blt	r3,r2,9ad4 <_malloc_r+0x4b8>
    9960:	05c000b4 	movhi	r23,2
    9964:	008000b4 	movhi	r2,2
    9968:	108e5304 	addi	r2,r2,14668
    996c:	bdc64804 	addi	r23,r23,6432
    9970:	15400017 	ldw	r21,0(r2)
    9974:	b8c00017 	ldw	r3,0(r23)
    9978:	00bfffc4 	movi	r2,-1
    997c:	858d883a 	add	r6,r16,r22
    9980:	8d6b883a 	add	r21,r17,r21
    9984:	1880ea26 	beq	r3,r2,9d30 <_malloc_r+0x714>
    9988:	ad4403c4 	addi	r21,r21,4111
    998c:	00bc0004 	movi	r2,-4096
    9990:	a8aa703a 	and	r21,r21,r2
    9994:	a80b883a 	mov	r5,r21
    9998:	9009883a 	mov	r4,r18
    999c:	d9800015 	stw	r6,0(sp)
    99a0:	000b1ec0 	call	b1ec <_sbrk_r>
    99a4:	1029883a 	mov	r20,r2
    99a8:	00bfffc4 	movi	r2,-1
    99ac:	d9800017 	ldw	r6,0(sp)
    99b0:	a080e826 	beq	r20,r2,9d54 <_malloc_r+0x738>
    99b4:	a180a636 	bltu	r20,r6,9c50 <_malloc_r+0x634>
    99b8:	070000b4 	movhi	fp,2
    99bc:	e70e7504 	addi	fp,fp,14804
    99c0:	e0800017 	ldw	r2,0(fp)
    99c4:	a887883a 	add	r3,r21,r2
    99c8:	e0c00015 	stw	r3,0(fp)
    99cc:	3500e626 	beq	r6,r20,9d68 <_malloc_r+0x74c>
    99d0:	b9000017 	ldw	r4,0(r23)
    99d4:	00bfffc4 	movi	r2,-1
    99d8:	2080ee26 	beq	r4,r2,9d94 <_malloc_r+0x778>
    99dc:	a185c83a 	sub	r2,r20,r6
    99e0:	10c5883a 	add	r2,r2,r3
    99e4:	e0800015 	stw	r2,0(fp)
    99e8:	a0c001cc 	andi	r3,r20,7
    99ec:	1800bc26 	beq	r3,zero,9ce0 <_malloc_r+0x6c4>
    99f0:	a0e9c83a 	sub	r20,r20,r3
    99f4:	00840204 	movi	r2,4104
    99f8:	a5000204 	addi	r20,r20,8
    99fc:	10c7c83a 	sub	r3,r2,r3
    9a00:	a545883a 	add	r2,r20,r21
    9a04:	1083ffcc 	andi	r2,r2,4095
    9a08:	18abc83a 	sub	r21,r3,r2
    9a0c:	a80b883a 	mov	r5,r21
    9a10:	9009883a 	mov	r4,r18
    9a14:	000b1ec0 	call	b1ec <_sbrk_r>
    9a18:	00ffffc4 	movi	r3,-1
    9a1c:	10c0e126 	beq	r2,r3,9da4 <_malloc_r+0x788>
    9a20:	1505c83a 	sub	r2,r2,r20
    9a24:	1545883a 	add	r2,r2,r21
    9a28:	10800054 	ori	r2,r2,1
    9a2c:	e0c00017 	ldw	r3,0(fp)
    9a30:	9d000215 	stw	r20,8(r19)
    9a34:	a0800115 	stw	r2,4(r20)
    9a38:	a8c7883a 	add	r3,r21,r3
    9a3c:	e0c00015 	stw	r3,0(fp)
    9a40:	84c00e26 	beq	r16,r19,9a7c <_malloc_r+0x460>
    9a44:	018003c4 	movi	r6,15
    9a48:	3580a72e 	bgeu	r6,r22,9ce8 <_malloc_r+0x6cc>
    9a4c:	81400117 	ldw	r5,4(r16)
    9a50:	013ffe04 	movi	r4,-8
    9a54:	b0bffd04 	addi	r2,r22,-12
    9a58:	1104703a 	and	r2,r2,r4
    9a5c:	2900004c 	andi	r4,r5,1
    9a60:	2088b03a 	or	r4,r4,r2
    9a64:	81000115 	stw	r4,4(r16)
    9a68:	01400144 	movi	r5,5
    9a6c:	8089883a 	add	r4,r16,r2
    9a70:	21400115 	stw	r5,4(r4)
    9a74:	21400215 	stw	r5,8(r4)
    9a78:	3080cd36 	bltu	r6,r2,9db0 <_malloc_r+0x794>
    9a7c:	008000b4 	movhi	r2,2
    9a80:	108e5204 	addi	r2,r2,14664
    9a84:	11000017 	ldw	r4,0(r2)
    9a88:	20c0012e 	bgeu	r4,r3,9a90 <_malloc_r+0x474>
    9a8c:	10c00015 	stw	r3,0(r2)
    9a90:	008000b4 	movhi	r2,2
    9a94:	108e5104 	addi	r2,r2,14660
    9a98:	11000017 	ldw	r4,0(r2)
    9a9c:	9c000217 	ldw	r16,8(r19)
    9aa0:	20c0012e 	bgeu	r4,r3,9aa8 <_malloc_r+0x48c>
    9aa4:	10c00015 	stw	r3,0(r2)
    9aa8:	80c00117 	ldw	r3,4(r16)
    9aac:	00bfff04 	movi	r2,-4
    9ab0:	1886703a 	and	r3,r3,r2
    9ab4:	1c45c83a 	sub	r2,r3,r17
    9ab8:	1c400236 	bltu	r3,r17,9ac4 <_malloc_r+0x4a8>
    9abc:	00c003c4 	movi	r3,15
    9ac0:	18800416 	blt	r3,r2,9ad4 <_malloc_r+0x4b8>
    9ac4:	9009883a 	mov	r4,r18
    9ac8:	00132400 	call	13240 <__malloc_unlock>
    9acc:	0005883a 	mov	r2,zero
    9ad0:	003f7b06 	br	98c0 <_malloc_r+0x2a4>
    9ad4:	88c00054 	ori	r3,r17,1
    9ad8:	80c00115 	stw	r3,4(r16)
    9adc:	8463883a 	add	r17,r16,r17
    9ae0:	10800054 	ori	r2,r2,1
    9ae4:	9c400215 	stw	r17,8(r19)
    9ae8:	88800115 	stw	r2,4(r17)
    9aec:	9009883a 	mov	r4,r18
    9af0:	00132400 	call	13240 <__malloc_unlock>
    9af4:	80800204 	addi	r2,r16,8
    9af8:	003f7106 	br	98c0 <_malloc_r+0x2a4>
    9afc:	00c00504 	movi	r3,20
    9b00:	18804a2e 	bgeu	r3,r2,9c2c <_malloc_r+0x610>
    9b04:	00c01504 	movi	r3,84
    9b08:	18806e36 	bltu	r3,r2,9cc4 <_malloc_r+0x6a8>
    9b0c:	8804d33a 	srli	r2,r17,12
    9b10:	12001bc4 	addi	r8,r2,111
    9b14:	11c01b84 	addi	r7,r2,110
    9b18:	4209883a 	add	r4,r8,r8
    9b1c:	003edd06 	br	9694 <_malloc_r+0x78>
    9b20:	3804d27a 	srli	r2,r7,9
    9b24:	00c00104 	movi	r3,4
    9b28:	1880442e 	bgeu	r3,r2,9c3c <_malloc_r+0x620>
    9b2c:	00c00504 	movi	r3,20
    9b30:	18808136 	bltu	r3,r2,9d38 <_malloc_r+0x71c>
    9b34:	11401704 	addi	r5,r2,92
    9b38:	10c016c4 	addi	r3,r2,91
    9b3c:	294b883a 	add	r5,r5,r5
    9b40:	294b883a 	add	r5,r5,r5
    9b44:	294b883a 	add	r5,r5,r5
    9b48:	994b883a 	add	r5,r19,r5
    9b4c:	28800017 	ldw	r2,0(r5)
    9b50:	018000b4 	movhi	r6,2
    9b54:	297ffe04 	addi	r5,r5,-8
    9b58:	31bffa04 	addi	r6,r6,-24
    9b5c:	28806526 	beq	r5,r2,9cf4 <_malloc_r+0x6d8>
    9b60:	01bfff04 	movi	r6,-4
    9b64:	10c00117 	ldw	r3,4(r2)
    9b68:	1986703a 	and	r3,r3,r6
    9b6c:	38c0022e 	bgeu	r7,r3,9b78 <_malloc_r+0x55c>
    9b70:	10800217 	ldw	r2,8(r2)
    9b74:	28bffb1e 	bne	r5,r2,9b64 <_malloc_r+0x548>
    9b78:	11400317 	ldw	r5,12(r2)
    9b7c:	98c00117 	ldw	r3,4(r19)
    9b80:	81400315 	stw	r5,12(r16)
    9b84:	80800215 	stw	r2,8(r16)
    9b88:	2c000215 	stw	r16,8(r5)
    9b8c:	14000315 	stw	r16,12(r2)
    9b90:	003ef806 	br	9774 <_malloc_r+0x158>
    9b94:	88c00054 	ori	r3,r17,1
    9b98:	80c00115 	stw	r3,4(r16)
    9b9c:	8463883a 	add	r17,r16,r17
    9ba0:	34400515 	stw	r17,20(r6)
    9ba4:	34400415 	stw	r17,16(r6)
    9ba8:	10c00054 	ori	r3,r2,1
    9bac:	8a000315 	stw	r8,12(r17)
    9bb0:	8a000215 	stw	r8,8(r17)
    9bb4:	88c00115 	stw	r3,4(r17)
    9bb8:	88a3883a 	add	r17,r17,r2
    9bbc:	88800015 	stw	r2,0(r17)
    9bc0:	9009883a 	mov	r4,r18
    9bc4:	00132400 	call	13240 <__malloc_unlock>
    9bc8:	80800204 	addi	r2,r16,8
    9bcc:	003f3c06 	br	98c0 <_malloc_r+0x2a4>
    9bd0:	30c00117 	ldw	r3,4(r6)
    9bd4:	003ee706 	br	9774 <_malloc_r+0x158>
    9bd8:	5ac00044 	addi	r11,r11,1
    9bdc:	588000cc 	andi	r2,r11,3
    9be0:	31800204 	addi	r6,r6,8
    9be4:	103efd1e 	bne	r2,zero,97dc <_malloc_r+0x1c0>
    9be8:	00002406 	br	9c7c <_malloc_r+0x660>
    9bec:	14000317 	ldw	r16,12(r2)
    9bf0:	143f251e 	bne	r2,r16,9888 <_malloc_r+0x26c>
    9bf4:	21000084 	addi	r4,r4,2
    9bf8:	003ebc06 	br	96ec <_malloc_r+0xd0>
    9bfc:	8085883a 	add	r2,r16,r2
    9c00:	10c00117 	ldw	r3,4(r2)
    9c04:	81000317 	ldw	r4,12(r16)
    9c08:	81400217 	ldw	r5,8(r16)
    9c0c:	18c00054 	ori	r3,r3,1
    9c10:	10c00115 	stw	r3,4(r2)
    9c14:	29000315 	stw	r4,12(r5)
    9c18:	21400215 	stw	r5,8(r4)
    9c1c:	9009883a 	mov	r4,r18
    9c20:	00132400 	call	13240 <__malloc_unlock>
    9c24:	80800204 	addi	r2,r16,8
    9c28:	003f2506 	br	98c0 <_malloc_r+0x2a4>
    9c2c:	12001704 	addi	r8,r2,92
    9c30:	11c016c4 	addi	r7,r2,91
    9c34:	4209883a 	add	r4,r8,r8
    9c38:	003e9606 	br	9694 <_malloc_r+0x78>
    9c3c:	3804d1ba 	srli	r2,r7,6
    9c40:	11400e44 	addi	r5,r2,57
    9c44:	10c00e04 	addi	r3,r2,56
    9c48:	294b883a 	add	r5,r5,r5
    9c4c:	003fbc06 	br	9b40 <_malloc_r+0x524>
    9c50:	84ff5926 	beq	r16,r19,99b8 <_malloc_r+0x39c>
    9c54:	008000b4 	movhi	r2,2
    9c58:	10bffa04 	addi	r2,r2,-24
    9c5c:	14000217 	ldw	r16,8(r2)
    9c60:	00bfff04 	movi	r2,-4
    9c64:	80c00117 	ldw	r3,4(r16)
    9c68:	1886703a 	and	r3,r3,r2
    9c6c:	003f9106 	br	9ab4 <_malloc_r+0x498>
    9c70:	60800217 	ldw	r2,8(r12)
    9c74:	213fffc4 	addi	r4,r4,-1
    9c78:	1300651e 	bne	r2,r12,9e10 <_malloc_r+0x7f4>
    9c7c:	208000cc 	andi	r2,r4,3
    9c80:	633ffe04 	addi	r12,r12,-8
    9c84:	103ffa1e 	bne	r2,zero,9c70 <_malloc_r+0x654>
    9c88:	98800117 	ldw	r2,4(r19)
    9c8c:	0146303a 	nor	r3,zero,r5
    9c90:	1884703a 	and	r2,r3,r2
    9c94:	98800115 	stw	r2,4(r19)
    9c98:	294b883a 	add	r5,r5,r5
    9c9c:	117f2836 	bltu	r2,r5,9940 <_malloc_r+0x324>
    9ca0:	283f2726 	beq	r5,zero,9940 <_malloc_r+0x324>
    9ca4:	2886703a 	and	r3,r5,r2
    9ca8:	5809883a 	mov	r4,r11
    9cac:	183ec31e 	bne	r3,zero,97bc <_malloc_r+0x1a0>
    9cb0:	294b883a 	add	r5,r5,r5
    9cb4:	2886703a 	and	r3,r5,r2
    9cb8:	21000104 	addi	r4,r4,4
    9cbc:	183ffc26 	beq	r3,zero,9cb0 <_malloc_r+0x694>
    9cc0:	003ebe06 	br	97bc <_malloc_r+0x1a0>
    9cc4:	00c05504 	movi	r3,340
    9cc8:	18801236 	bltu	r3,r2,9d14 <_malloc_r+0x6f8>
    9ccc:	8804d3fa 	srli	r2,r17,15
    9cd0:	12001e04 	addi	r8,r2,120
    9cd4:	11c01dc4 	addi	r7,r2,119
    9cd8:	4209883a 	add	r4,r8,r8
    9cdc:	003e6d06 	br	9694 <_malloc_r+0x78>
    9ce0:	00c40004 	movi	r3,4096
    9ce4:	003f4606 	br	9a00 <_malloc_r+0x3e4>
    9ce8:	00800044 	movi	r2,1
    9cec:	a0800115 	stw	r2,4(r20)
    9cf0:	003f7406 	br	9ac4 <_malloc_r+0x4a8>
    9cf4:	1805d0ba 	srai	r2,r3,2
    9cf8:	01c00044 	movi	r7,1
    9cfc:	30c00117 	ldw	r3,4(r6)
    9d00:	388e983a 	sll	r7,r7,r2
    9d04:	2805883a 	mov	r2,r5
    9d08:	38c6b03a 	or	r3,r7,r3
    9d0c:	30c00115 	stw	r3,4(r6)
    9d10:	003f9b06 	br	9b80 <_malloc_r+0x564>
    9d14:	00c15504 	movi	r3,1364
    9d18:	18801a36 	bltu	r3,r2,9d84 <_malloc_r+0x768>
    9d1c:	8804d4ba 	srli	r2,r17,18
    9d20:	12001f44 	addi	r8,r2,125
    9d24:	11c01f04 	addi	r7,r2,124
    9d28:	4209883a 	add	r4,r8,r8
    9d2c:	003e5906 	br	9694 <_malloc_r+0x78>
    9d30:	ad400404 	addi	r21,r21,16
    9d34:	003f1706 	br	9994 <_malloc_r+0x378>
    9d38:	00c01504 	movi	r3,84
    9d3c:	18802336 	bltu	r3,r2,9dcc <_malloc_r+0x7b0>
    9d40:	3804d33a 	srli	r2,r7,12
    9d44:	11401bc4 	addi	r5,r2,111
    9d48:	10c01b84 	addi	r3,r2,110
    9d4c:	294b883a 	add	r5,r5,r5
    9d50:	003f7b06 	br	9b40 <_malloc_r+0x524>
    9d54:	9c000217 	ldw	r16,8(r19)
    9d58:	00bfff04 	movi	r2,-4
    9d5c:	80c00117 	ldw	r3,4(r16)
    9d60:	1886703a 	and	r3,r3,r2
    9d64:	003f5306 	br	9ab4 <_malloc_r+0x498>
    9d68:	3083ffcc 	andi	r2,r6,4095
    9d6c:	103f181e 	bne	r2,zero,99d0 <_malloc_r+0x3b4>
    9d70:	99000217 	ldw	r4,8(r19)
    9d74:	b545883a 	add	r2,r22,r21
    9d78:	10800054 	ori	r2,r2,1
    9d7c:	20800115 	stw	r2,4(r4)
    9d80:	003f3e06 	br	9a7c <_malloc_r+0x460>
    9d84:	01003f84 	movi	r4,254
    9d88:	02001fc4 	movi	r8,127
    9d8c:	01c01f84 	movi	r7,126
    9d90:	003e4006 	br	9694 <_malloc_r+0x78>
    9d94:	008000b4 	movhi	r2,2
    9d98:	10864804 	addi	r2,r2,6432
    9d9c:	15000015 	stw	r20,0(r2)
    9da0:	003f1106 	br	99e8 <_malloc_r+0x3cc>
    9da4:	00800044 	movi	r2,1
    9da8:	002b883a 	mov	r21,zero
    9dac:	003f1f06 	br	9a2c <_malloc_r+0x410>
    9db0:	81400204 	addi	r5,r16,8
    9db4:	9009883a 	mov	r4,r18
    9db8:	0008eec0 	call	8eec <_free_r>
    9dbc:	008000b4 	movhi	r2,2
    9dc0:	108e7504 	addi	r2,r2,14804
    9dc4:	10c00017 	ldw	r3,0(r2)
    9dc8:	003f2c06 	br	9a7c <_malloc_r+0x460>
    9dcc:	00c05504 	movi	r3,340
    9dd0:	18800536 	bltu	r3,r2,9de8 <_malloc_r+0x7cc>
    9dd4:	3804d3fa 	srli	r2,r7,15
    9dd8:	11401e04 	addi	r5,r2,120
    9ddc:	10c01dc4 	addi	r3,r2,119
    9de0:	294b883a 	add	r5,r5,r5
    9de4:	003f5606 	br	9b40 <_malloc_r+0x524>
    9de8:	00c15504 	movi	r3,1364
    9dec:	18800536 	bltu	r3,r2,9e04 <_malloc_r+0x7e8>
    9df0:	3804d4ba 	srli	r2,r7,18
    9df4:	11401f44 	addi	r5,r2,125
    9df8:	10c01f04 	addi	r3,r2,124
    9dfc:	294b883a 	add	r5,r5,r5
    9e00:	003f4f06 	br	9b40 <_malloc_r+0x524>
    9e04:	01403f84 	movi	r5,254
    9e08:	00c01f84 	movi	r3,126
    9e0c:	003f4c06 	br	9b40 <_malloc_r+0x524>
    9e10:	98800117 	ldw	r2,4(r19)
    9e14:	003fa006 	br	9c98 <_malloc_r+0x67c>
    9e18:	8808d0fa 	srli	r4,r17,3
    9e1c:	20800044 	addi	r2,r4,1
    9e20:	1085883a 	add	r2,r2,r2
    9e24:	003e9006 	br	9868 <_malloc_r+0x24c>

00009e28 <memchr>:
    9e28:	208000cc 	andi	r2,r4,3
    9e2c:	280f883a 	mov	r7,r5
    9e30:	10003426 	beq	r2,zero,9f04 <memchr+0xdc>
    9e34:	30bfffc4 	addi	r2,r6,-1
    9e38:	30001a26 	beq	r6,zero,9ea4 <memchr+0x7c>
    9e3c:	20c00003 	ldbu	r3,0(r4)
    9e40:	29803fcc 	andi	r6,r5,255
    9e44:	30c0051e 	bne	r6,r3,9e5c <memchr+0x34>
    9e48:	00001806 	br	9eac <memchr+0x84>
    9e4c:	10001526 	beq	r2,zero,9ea4 <memchr+0x7c>
    9e50:	20c00003 	ldbu	r3,0(r4)
    9e54:	10bfffc4 	addi	r2,r2,-1
    9e58:	30c01426 	beq	r6,r3,9eac <memchr+0x84>
    9e5c:	21000044 	addi	r4,r4,1
    9e60:	20c000cc 	andi	r3,r4,3
    9e64:	183ff91e 	bne	r3,zero,9e4c <memchr+0x24>
    9e68:	020000c4 	movi	r8,3
    9e6c:	40801136 	bltu	r8,r2,9eb4 <memchr+0x8c>
    9e70:	10000c26 	beq	r2,zero,9ea4 <memchr+0x7c>
    9e74:	20c00003 	ldbu	r3,0(r4)
    9e78:	29403fcc 	andi	r5,r5,255
    9e7c:	28c00b26 	beq	r5,r3,9eac <memchr+0x84>
    9e80:	20c00044 	addi	r3,r4,1
    9e84:	39803fcc 	andi	r6,r7,255
    9e88:	2089883a 	add	r4,r4,r2
    9e8c:	00000306 	br	9e9c <memchr+0x74>
    9e90:	18c00044 	addi	r3,r3,1
    9e94:	197fffc3 	ldbu	r5,-1(r3)
    9e98:	31400526 	beq	r6,r5,9eb0 <memchr+0x88>
    9e9c:	1805883a 	mov	r2,r3
    9ea0:	20fffb1e 	bne	r4,r3,9e90 <memchr+0x68>
    9ea4:	0005883a 	mov	r2,zero
    9ea8:	f800283a 	ret
    9eac:	2005883a 	mov	r2,r4
    9eb0:	f800283a 	ret
    9eb4:	28c03fcc 	andi	r3,r5,255
    9eb8:	1812923a 	slli	r9,r3,8
    9ebc:	02ffbff4 	movhi	r11,65279
    9ec0:	02a02074 	movhi	r10,32897
    9ec4:	48d2b03a 	or	r9,r9,r3
    9ec8:	4806943a 	slli	r3,r9,16
    9ecc:	5affbfc4 	addi	r11,r11,-257
    9ed0:	52a02004 	addi	r10,r10,-32640
    9ed4:	48d2b03a 	or	r9,r9,r3
    9ed8:	20c00017 	ldw	r3,0(r4)
    9edc:	48c6f03a 	xor	r3,r9,r3
    9ee0:	1acd883a 	add	r6,r3,r11
    9ee4:	00c6303a 	nor	r3,zero,r3
    9ee8:	30c6703a 	and	r3,r6,r3
    9eec:	1a86703a 	and	r3,r3,r10
    9ef0:	183fe01e 	bne	r3,zero,9e74 <memchr+0x4c>
    9ef4:	10bfff04 	addi	r2,r2,-4
    9ef8:	21000104 	addi	r4,r4,4
    9efc:	40bff636 	bltu	r8,r2,9ed8 <memchr+0xb0>
    9f00:	003fdb06 	br	9e70 <memchr+0x48>
    9f04:	3005883a 	mov	r2,r6
    9f08:	003fd706 	br	9e68 <memchr+0x40>

00009f0c <memcpy>:
    9f0c:	defffd04 	addi	sp,sp,-12
    9f10:	dfc00215 	stw	ra,8(sp)
    9f14:	dc400115 	stw	r17,4(sp)
    9f18:	dc000015 	stw	r16,0(sp)
    9f1c:	00c003c4 	movi	r3,15
    9f20:	2005883a 	mov	r2,r4
    9f24:	1980452e 	bgeu	r3,r6,a03c <memcpy+0x130>
    9f28:	2906b03a 	or	r3,r5,r4
    9f2c:	18c000cc 	andi	r3,r3,3
    9f30:	1800441e 	bne	r3,zero,a044 <memcpy+0x138>
    9f34:	347ffc04 	addi	r17,r6,-16
    9f38:	8822d13a 	srli	r17,r17,4
    9f3c:	28c00104 	addi	r3,r5,4
    9f40:	23400104 	addi	r13,r4,4
    9f44:	8820913a 	slli	r16,r17,4
    9f48:	2b000204 	addi	r12,r5,8
    9f4c:	22c00204 	addi	r11,r4,8
    9f50:	84000504 	addi	r16,r16,20
    9f54:	2a800304 	addi	r10,r5,12
    9f58:	22400304 	addi	r9,r4,12
    9f5c:	2c21883a 	add	r16,r5,r16
    9f60:	2811883a 	mov	r8,r5
    9f64:	200f883a 	mov	r7,r4
    9f68:	41000017 	ldw	r4,0(r8)
    9f6c:	1fc00017 	ldw	ra,0(r3)
    9f70:	63c00017 	ldw	r15,0(r12)
    9f74:	39000015 	stw	r4,0(r7)
    9f78:	53800017 	ldw	r14,0(r10)
    9f7c:	6fc00015 	stw	ra,0(r13)
    9f80:	5bc00015 	stw	r15,0(r11)
    9f84:	4b800015 	stw	r14,0(r9)
    9f88:	18c00404 	addi	r3,r3,16
    9f8c:	39c00404 	addi	r7,r7,16
    9f90:	42000404 	addi	r8,r8,16
    9f94:	6b400404 	addi	r13,r13,16
    9f98:	63000404 	addi	r12,r12,16
    9f9c:	5ac00404 	addi	r11,r11,16
    9fa0:	52800404 	addi	r10,r10,16
    9fa4:	4a400404 	addi	r9,r9,16
    9fa8:	1c3fef1e 	bne	r3,r16,9f68 <memcpy+0x5c>
    9fac:	89c00044 	addi	r7,r17,1
    9fb0:	380e913a 	slli	r7,r7,4
    9fb4:	310003cc 	andi	r4,r6,15
    9fb8:	02c000c4 	movi	r11,3
    9fbc:	11c7883a 	add	r3,r2,r7
    9fc0:	29cb883a 	add	r5,r5,r7
    9fc4:	5900212e 	bgeu	r11,r4,a04c <memcpy+0x140>
    9fc8:	1813883a 	mov	r9,r3
    9fcc:	2811883a 	mov	r8,r5
    9fd0:	200f883a 	mov	r7,r4
    9fd4:	42800017 	ldw	r10,0(r8)
    9fd8:	4a400104 	addi	r9,r9,4
    9fdc:	39ffff04 	addi	r7,r7,-4
    9fe0:	4abfff15 	stw	r10,-4(r9)
    9fe4:	42000104 	addi	r8,r8,4
    9fe8:	59fffa36 	bltu	r11,r7,9fd4 <memcpy+0xc8>
    9fec:	213fff04 	addi	r4,r4,-4
    9ff0:	2008d0ba 	srli	r4,r4,2
    9ff4:	318000cc 	andi	r6,r6,3
    9ff8:	21000044 	addi	r4,r4,1
    9ffc:	2109883a 	add	r4,r4,r4
    a000:	2109883a 	add	r4,r4,r4
    a004:	1907883a 	add	r3,r3,r4
    a008:	290b883a 	add	r5,r5,r4
    a00c:	30000626 	beq	r6,zero,a028 <memcpy+0x11c>
    a010:	198d883a 	add	r6,r3,r6
    a014:	29c00003 	ldbu	r7,0(r5)
    a018:	18c00044 	addi	r3,r3,1
    a01c:	29400044 	addi	r5,r5,1
    a020:	19ffffc5 	stb	r7,-1(r3)
    a024:	19bffb1e 	bne	r3,r6,a014 <memcpy+0x108>
    a028:	dfc00217 	ldw	ra,8(sp)
    a02c:	dc400117 	ldw	r17,4(sp)
    a030:	dc000017 	ldw	r16,0(sp)
    a034:	dec00304 	addi	sp,sp,12
    a038:	f800283a 	ret
    a03c:	2007883a 	mov	r3,r4
    a040:	003ff206 	br	a00c <memcpy+0x100>
    a044:	2007883a 	mov	r3,r4
    a048:	003ff106 	br	a010 <memcpy+0x104>
    a04c:	200d883a 	mov	r6,r4
    a050:	003fee06 	br	a00c <memcpy+0x100>

0000a054 <memset>:
    a054:	20c000cc 	andi	r3,r4,3
    a058:	2005883a 	mov	r2,r4
    a05c:	18004426 	beq	r3,zero,a170 <memset+0x11c>
    a060:	31ffffc4 	addi	r7,r6,-1
    a064:	30004026 	beq	r6,zero,a168 <memset+0x114>
    a068:	2813883a 	mov	r9,r5
    a06c:	200d883a 	mov	r6,r4
    a070:	2007883a 	mov	r3,r4
    a074:	00000406 	br	a088 <memset+0x34>
    a078:	3a3fffc4 	addi	r8,r7,-1
    a07c:	31800044 	addi	r6,r6,1
    a080:	38003926 	beq	r7,zero,a168 <memset+0x114>
    a084:	400f883a 	mov	r7,r8
    a088:	18c00044 	addi	r3,r3,1
    a08c:	32400005 	stb	r9,0(r6)
    a090:	1a0000cc 	andi	r8,r3,3
    a094:	403ff81e 	bne	r8,zero,a078 <memset+0x24>
    a098:	010000c4 	movi	r4,3
    a09c:	21c02d2e 	bgeu	r4,r7,a154 <memset+0x100>
    a0a0:	29003fcc 	andi	r4,r5,255
    a0a4:	200c923a 	slli	r6,r4,8
    a0a8:	3108b03a 	or	r4,r6,r4
    a0ac:	200c943a 	slli	r6,r4,16
    a0b0:	218cb03a 	or	r6,r4,r6
    a0b4:	010003c4 	movi	r4,15
    a0b8:	21c0182e 	bgeu	r4,r7,a11c <memset+0xc8>
    a0bc:	3b3ffc04 	addi	r12,r7,-16
    a0c0:	6018d13a 	srli	r12,r12,4
    a0c4:	1a000104 	addi	r8,r3,4
    a0c8:	1ac00204 	addi	r11,r3,8
    a0cc:	6008913a 	slli	r4,r12,4
    a0d0:	1a800304 	addi	r10,r3,12
    a0d4:	1813883a 	mov	r9,r3
    a0d8:	21000504 	addi	r4,r4,20
    a0dc:	1909883a 	add	r4,r3,r4
    a0e0:	49800015 	stw	r6,0(r9)
    a0e4:	41800015 	stw	r6,0(r8)
    a0e8:	59800015 	stw	r6,0(r11)
    a0ec:	51800015 	stw	r6,0(r10)
    a0f0:	42000404 	addi	r8,r8,16
    a0f4:	4a400404 	addi	r9,r9,16
    a0f8:	5ac00404 	addi	r11,r11,16
    a0fc:	52800404 	addi	r10,r10,16
    a100:	413ff71e 	bne	r8,r4,a0e0 <memset+0x8c>
    a104:	63000044 	addi	r12,r12,1
    a108:	6018913a 	slli	r12,r12,4
    a10c:	39c003cc 	andi	r7,r7,15
    a110:	010000c4 	movi	r4,3
    a114:	1b07883a 	add	r3,r3,r12
    a118:	21c00e2e 	bgeu	r4,r7,a154 <memset+0x100>
    a11c:	1813883a 	mov	r9,r3
    a120:	3811883a 	mov	r8,r7
    a124:	010000c4 	movi	r4,3
    a128:	49800015 	stw	r6,0(r9)
    a12c:	423fff04 	addi	r8,r8,-4
    a130:	4a400104 	addi	r9,r9,4
    a134:	223ffc36 	bltu	r4,r8,a128 <memset+0xd4>
    a138:	393fff04 	addi	r4,r7,-4
    a13c:	2008d0ba 	srli	r4,r4,2
    a140:	39c000cc 	andi	r7,r7,3
    a144:	21000044 	addi	r4,r4,1
    a148:	2109883a 	add	r4,r4,r4
    a14c:	2109883a 	add	r4,r4,r4
    a150:	1907883a 	add	r3,r3,r4
    a154:	38000526 	beq	r7,zero,a16c <memset+0x118>
    a158:	19cf883a 	add	r7,r3,r7
    a15c:	19400005 	stb	r5,0(r3)
    a160:	18c00044 	addi	r3,r3,1
    a164:	38fffd1e 	bne	r7,r3,a15c <memset+0x108>
    a168:	f800283a 	ret
    a16c:	f800283a 	ret
    a170:	2007883a 	mov	r3,r4
    a174:	300f883a 	mov	r7,r6
    a178:	003fc706 	br	a098 <memset+0x44>

0000a17c <_Balloc>:
    a17c:	20801317 	ldw	r2,76(r4)
    a180:	defffc04 	addi	sp,sp,-16
    a184:	dc400115 	stw	r17,4(sp)
    a188:	dc000015 	stw	r16,0(sp)
    a18c:	dfc00315 	stw	ra,12(sp)
    a190:	dc800215 	stw	r18,8(sp)
    a194:	2023883a 	mov	r17,r4
    a198:	2821883a 	mov	r16,r5
    a19c:	10000f26 	beq	r2,zero,a1dc <_Balloc+0x60>
    a1a0:	8407883a 	add	r3,r16,r16
    a1a4:	18c7883a 	add	r3,r3,r3
    a1a8:	10c7883a 	add	r3,r2,r3
    a1ac:	18800017 	ldw	r2,0(r3)
    a1b0:	10001126 	beq	r2,zero,a1f8 <_Balloc+0x7c>
    a1b4:	11000017 	ldw	r4,0(r2)
    a1b8:	19000015 	stw	r4,0(r3)
    a1bc:	10000415 	stw	zero,16(r2)
    a1c0:	10000315 	stw	zero,12(r2)
    a1c4:	dfc00317 	ldw	ra,12(sp)
    a1c8:	dc800217 	ldw	r18,8(sp)
    a1cc:	dc400117 	ldw	r17,4(sp)
    a1d0:	dc000017 	ldw	r16,0(sp)
    a1d4:	dec00404 	addi	sp,sp,16
    a1d8:	f800283a 	ret
    a1dc:	01800844 	movi	r6,33
    a1e0:	01400104 	movi	r5,4
    a1e4:	000dff80 	call	dff8 <_calloc_r>
    a1e8:	88801315 	stw	r2,76(r17)
    a1ec:	103fec1e 	bne	r2,zero,a1a0 <_Balloc+0x24>
    a1f0:	0005883a 	mov	r2,zero
    a1f4:	003ff306 	br	a1c4 <_Balloc+0x48>
    a1f8:	01400044 	movi	r5,1
    a1fc:	2c24983a 	sll	r18,r5,r16
    a200:	8809883a 	mov	r4,r17
    a204:	91800144 	addi	r6,r18,5
    a208:	318d883a 	add	r6,r6,r6
    a20c:	318d883a 	add	r6,r6,r6
    a210:	000dff80 	call	dff8 <_calloc_r>
    a214:	103ff626 	beq	r2,zero,a1f0 <_Balloc+0x74>
    a218:	14000115 	stw	r16,4(r2)
    a21c:	14800215 	stw	r18,8(r2)
    a220:	003fe606 	br	a1bc <_Balloc+0x40>

0000a224 <_Bfree>:
    a224:	28000826 	beq	r5,zero,a248 <_Bfree+0x24>
    a228:	28c00117 	ldw	r3,4(r5)
    a22c:	20801317 	ldw	r2,76(r4)
    a230:	18c7883a 	add	r3,r3,r3
    a234:	18c7883a 	add	r3,r3,r3
    a238:	10c5883a 	add	r2,r2,r3
    a23c:	10c00017 	ldw	r3,0(r2)
    a240:	28c00015 	stw	r3,0(r5)
    a244:	11400015 	stw	r5,0(r2)
    a248:	f800283a 	ret

0000a24c <__multadd>:
    a24c:	defffa04 	addi	sp,sp,-24
    a250:	dc800315 	stw	r18,12(sp)
    a254:	dc400215 	stw	r17,8(sp)
    a258:	dc000115 	stw	r16,4(sp)
    a25c:	2823883a 	mov	r17,r5
    a260:	2c000417 	ldw	r16,16(r5)
    a264:	dfc00515 	stw	ra,20(sp)
    a268:	dcc00415 	stw	r19,16(sp)
    a26c:	2025883a 	mov	r18,r4
    a270:	29400504 	addi	r5,r5,20
    a274:	0011883a 	mov	r8,zero
    a278:	28c00017 	ldw	r3,0(r5)
    a27c:	29400104 	addi	r5,r5,4
    a280:	42000044 	addi	r8,r8,1
    a284:	18bfffcc 	andi	r2,r3,65535
    a288:	1185383a 	mul	r2,r2,r6
    a28c:	1806d43a 	srli	r3,r3,16
    a290:	11cf883a 	add	r7,r2,r7
    a294:	3808d43a 	srli	r4,r7,16
    a298:	1987383a 	mul	r3,r3,r6
    a29c:	38bfffcc 	andi	r2,r7,65535
    a2a0:	1907883a 	add	r3,r3,r4
    a2a4:	1808943a 	slli	r4,r3,16
    a2a8:	180ed43a 	srli	r7,r3,16
    a2ac:	2085883a 	add	r2,r4,r2
    a2b0:	28bfff15 	stw	r2,-4(r5)
    a2b4:	443ff016 	blt	r8,r16,a278 <__multadd+0x2c>
    a2b8:	38000926 	beq	r7,zero,a2e0 <__multadd+0x94>
    a2bc:	88800217 	ldw	r2,8(r17)
    a2c0:	80800f0e 	bge	r16,r2,a300 <__multadd+0xb4>
    a2c4:	80800144 	addi	r2,r16,5
    a2c8:	1085883a 	add	r2,r2,r2
    a2cc:	1085883a 	add	r2,r2,r2
    a2d0:	8885883a 	add	r2,r17,r2
    a2d4:	11c00015 	stw	r7,0(r2)
    a2d8:	84000044 	addi	r16,r16,1
    a2dc:	8c000415 	stw	r16,16(r17)
    a2e0:	8805883a 	mov	r2,r17
    a2e4:	dfc00517 	ldw	ra,20(sp)
    a2e8:	dcc00417 	ldw	r19,16(sp)
    a2ec:	dc800317 	ldw	r18,12(sp)
    a2f0:	dc400217 	ldw	r17,8(sp)
    a2f4:	dc000117 	ldw	r16,4(sp)
    a2f8:	dec00604 	addi	sp,sp,24
    a2fc:	f800283a 	ret
    a300:	89400117 	ldw	r5,4(r17)
    a304:	9009883a 	mov	r4,r18
    a308:	d9c00015 	stw	r7,0(sp)
    a30c:	29400044 	addi	r5,r5,1
    a310:	000a17c0 	call	a17c <_Balloc>
    a314:	89800417 	ldw	r6,16(r17)
    a318:	89400304 	addi	r5,r17,12
    a31c:	11000304 	addi	r4,r2,12
    a320:	31800084 	addi	r6,r6,2
    a324:	318d883a 	add	r6,r6,r6
    a328:	318d883a 	add	r6,r6,r6
    a32c:	1027883a 	mov	r19,r2
    a330:	0009f0c0 	call	9f0c <memcpy>
    a334:	d9c00017 	ldw	r7,0(sp)
    a338:	88000a26 	beq	r17,zero,a364 <__multadd+0x118>
    a33c:	88c00117 	ldw	r3,4(r17)
    a340:	90801317 	ldw	r2,76(r18)
    a344:	18c7883a 	add	r3,r3,r3
    a348:	18c7883a 	add	r3,r3,r3
    a34c:	10c5883a 	add	r2,r2,r3
    a350:	10c00017 	ldw	r3,0(r2)
    a354:	88c00015 	stw	r3,0(r17)
    a358:	14400015 	stw	r17,0(r2)
    a35c:	9823883a 	mov	r17,r19
    a360:	003fd806 	br	a2c4 <__multadd+0x78>
    a364:	9823883a 	mov	r17,r19
    a368:	003fd606 	br	a2c4 <__multadd+0x78>

0000a36c <__s2b>:
    a36c:	defff904 	addi	sp,sp,-28
    a370:	dc400115 	stw	r17,4(sp)
    a374:	dc000015 	stw	r16,0(sp)
    a378:	2023883a 	mov	r17,r4
    a37c:	2821883a 	mov	r16,r5
    a380:	39000204 	addi	r4,r7,8
    a384:	01400244 	movi	r5,9
    a388:	dcc00315 	stw	r19,12(sp)
    a38c:	dc800215 	stw	r18,8(sp)
    a390:	dfc00615 	stw	ra,24(sp)
    a394:	dd400515 	stw	r21,20(sp)
    a398:	dd000415 	stw	r20,16(sp)
    a39c:	3825883a 	mov	r18,r7
    a3a0:	3027883a 	mov	r19,r6
    a3a4:	000fea40 	call	fea4 <__divsi3>
    a3a8:	00c00044 	movi	r3,1
    a3ac:	000b883a 	mov	r5,zero
    a3b0:	1880030e 	bge	r3,r2,a3c0 <__s2b+0x54>
    a3b4:	18c7883a 	add	r3,r3,r3
    a3b8:	29400044 	addi	r5,r5,1
    a3bc:	18bffd16 	blt	r3,r2,a3b4 <__s2b+0x48>
    a3c0:	8809883a 	mov	r4,r17
    a3c4:	000a17c0 	call	a17c <_Balloc>
    a3c8:	d8c00717 	ldw	r3,28(sp)
    a3cc:	10c00515 	stw	r3,20(r2)
    a3d0:	00c00044 	movi	r3,1
    a3d4:	10c00415 	stw	r3,16(r2)
    a3d8:	00c00244 	movi	r3,9
    a3dc:	1cc0210e 	bge	r3,r19,a464 <__s2b+0xf8>
    a3e0:	80eb883a 	add	r21,r16,r3
    a3e4:	a829883a 	mov	r20,r21
    a3e8:	84e1883a 	add	r16,r16,r19
    a3ec:	a1c00007 	ldb	r7,0(r20)
    a3f0:	01800284 	movi	r6,10
    a3f4:	a5000044 	addi	r20,r20,1
    a3f8:	100b883a 	mov	r5,r2
    a3fc:	39fff404 	addi	r7,r7,-48
    a400:	8809883a 	mov	r4,r17
    a404:	000a24c0 	call	a24c <__multadd>
    a408:	a43ff81e 	bne	r20,r16,a3ec <__s2b+0x80>
    a40c:	ace1883a 	add	r16,r21,r19
    a410:	843ffe04 	addi	r16,r16,-8
    a414:	9c800a0e 	bge	r19,r18,a440 <__s2b+0xd4>
    a418:	94e5c83a 	sub	r18,r18,r19
    a41c:	84a5883a 	add	r18,r16,r18
    a420:	81c00007 	ldb	r7,0(r16)
    a424:	01800284 	movi	r6,10
    a428:	84000044 	addi	r16,r16,1
    a42c:	100b883a 	mov	r5,r2
    a430:	39fff404 	addi	r7,r7,-48
    a434:	8809883a 	mov	r4,r17
    a438:	000a24c0 	call	a24c <__multadd>
    a43c:	84bff81e 	bne	r16,r18,a420 <__s2b+0xb4>
    a440:	dfc00617 	ldw	ra,24(sp)
    a444:	dd400517 	ldw	r21,20(sp)
    a448:	dd000417 	ldw	r20,16(sp)
    a44c:	dcc00317 	ldw	r19,12(sp)
    a450:	dc800217 	ldw	r18,8(sp)
    a454:	dc400117 	ldw	r17,4(sp)
    a458:	dc000017 	ldw	r16,0(sp)
    a45c:	dec00704 	addi	sp,sp,28
    a460:	f800283a 	ret
    a464:	84000284 	addi	r16,r16,10
    a468:	1827883a 	mov	r19,r3
    a46c:	003fe906 	br	a414 <__s2b+0xa8>

0000a470 <__hi0bits>:
    a470:	20bfffec 	andhi	r2,r4,65535
    a474:	1000141e 	bne	r2,zero,a4c8 <__hi0bits+0x58>
    a478:	2008943a 	slli	r4,r4,16
    a47c:	00800404 	movi	r2,16
    a480:	20ffc02c 	andhi	r3,r4,65280
    a484:	1800021e 	bne	r3,zero,a490 <__hi0bits+0x20>
    a488:	2008923a 	slli	r4,r4,8
    a48c:	10800204 	addi	r2,r2,8
    a490:	20fc002c 	andhi	r3,r4,61440
    a494:	1800021e 	bne	r3,zero,a4a0 <__hi0bits+0x30>
    a498:	2008913a 	slli	r4,r4,4
    a49c:	10800104 	addi	r2,r2,4
    a4a0:	20f0002c 	andhi	r3,r4,49152
    a4a4:	1800031e 	bne	r3,zero,a4b4 <__hi0bits+0x44>
    a4a8:	2109883a 	add	r4,r4,r4
    a4ac:	10800084 	addi	r2,r2,2
    a4b0:	2109883a 	add	r4,r4,r4
    a4b4:	20000316 	blt	r4,zero,a4c4 <__hi0bits+0x54>
    a4b8:	2110002c 	andhi	r4,r4,16384
    a4bc:	2000041e 	bne	r4,zero,a4d0 <__hi0bits+0x60>
    a4c0:	00800804 	movi	r2,32
    a4c4:	f800283a 	ret
    a4c8:	0005883a 	mov	r2,zero
    a4cc:	003fec06 	br	a480 <__hi0bits+0x10>
    a4d0:	10800044 	addi	r2,r2,1
    a4d4:	f800283a 	ret

0000a4d8 <__lo0bits>:
    a4d8:	20c00017 	ldw	r3,0(r4)
    a4dc:	188001cc 	andi	r2,r3,7
    a4e0:	10000826 	beq	r2,zero,a504 <__lo0bits+0x2c>
    a4e4:	1880004c 	andi	r2,r3,1
    a4e8:	1000211e 	bne	r2,zero,a570 <__lo0bits+0x98>
    a4ec:	1880008c 	andi	r2,r3,2
    a4f0:	1000211e 	bne	r2,zero,a578 <__lo0bits+0xa0>
    a4f4:	1806d0ba 	srli	r3,r3,2
    a4f8:	00800084 	movi	r2,2
    a4fc:	20c00015 	stw	r3,0(r4)
    a500:	f800283a 	ret
    a504:	18bfffcc 	andi	r2,r3,65535
    a508:	10001326 	beq	r2,zero,a558 <__lo0bits+0x80>
    a50c:	0005883a 	mov	r2,zero
    a510:	19403fcc 	andi	r5,r3,255
    a514:	2800021e 	bne	r5,zero,a520 <__lo0bits+0x48>
    a518:	1806d23a 	srli	r3,r3,8
    a51c:	10800204 	addi	r2,r2,8
    a520:	194003cc 	andi	r5,r3,15
    a524:	2800021e 	bne	r5,zero,a530 <__lo0bits+0x58>
    a528:	1806d13a 	srli	r3,r3,4
    a52c:	10800104 	addi	r2,r2,4
    a530:	194000cc 	andi	r5,r3,3
    a534:	2800021e 	bne	r5,zero,a540 <__lo0bits+0x68>
    a538:	1806d0ba 	srli	r3,r3,2
    a53c:	10800084 	addi	r2,r2,2
    a540:	1940004c 	andi	r5,r3,1
    a544:	2800081e 	bne	r5,zero,a568 <__lo0bits+0x90>
    a548:	1806d07a 	srli	r3,r3,1
    a54c:	1800051e 	bne	r3,zero,a564 <__lo0bits+0x8c>
    a550:	00800804 	movi	r2,32
    a554:	f800283a 	ret
    a558:	1806d43a 	srli	r3,r3,16
    a55c:	00800404 	movi	r2,16
    a560:	003feb06 	br	a510 <__lo0bits+0x38>
    a564:	10800044 	addi	r2,r2,1
    a568:	20c00015 	stw	r3,0(r4)
    a56c:	f800283a 	ret
    a570:	0005883a 	mov	r2,zero
    a574:	f800283a 	ret
    a578:	1806d07a 	srli	r3,r3,1
    a57c:	00800044 	movi	r2,1
    a580:	20c00015 	stw	r3,0(r4)
    a584:	f800283a 	ret

0000a588 <__i2b>:
    a588:	defffd04 	addi	sp,sp,-12
    a58c:	dc000015 	stw	r16,0(sp)
    a590:	04000044 	movi	r16,1
    a594:	dc400115 	stw	r17,4(sp)
    a598:	2823883a 	mov	r17,r5
    a59c:	800b883a 	mov	r5,r16
    a5a0:	dfc00215 	stw	ra,8(sp)
    a5a4:	000a17c0 	call	a17c <_Balloc>
    a5a8:	14400515 	stw	r17,20(r2)
    a5ac:	14000415 	stw	r16,16(r2)
    a5b0:	dfc00217 	ldw	ra,8(sp)
    a5b4:	dc400117 	ldw	r17,4(sp)
    a5b8:	dc000017 	ldw	r16,0(sp)
    a5bc:	dec00304 	addi	sp,sp,12
    a5c0:	f800283a 	ret

0000a5c4 <__multiply>:
    a5c4:	defffa04 	addi	sp,sp,-24
    a5c8:	dcc00315 	stw	r19,12(sp)
    a5cc:	dc800215 	stw	r18,8(sp)
    a5d0:	34c00417 	ldw	r19,16(r6)
    a5d4:	2c800417 	ldw	r18,16(r5)
    a5d8:	dd000415 	stw	r20,16(sp)
    a5dc:	dc400115 	stw	r17,4(sp)
    a5e0:	dfc00515 	stw	ra,20(sp)
    a5e4:	dc000015 	stw	r16,0(sp)
    a5e8:	2829883a 	mov	r20,r5
    a5ec:	3023883a 	mov	r17,r6
    a5f0:	94c0050e 	bge	r18,r19,a608 <__multiply+0x44>
    a5f4:	9007883a 	mov	r3,r18
    a5f8:	3029883a 	mov	r20,r6
    a5fc:	9825883a 	mov	r18,r19
    a600:	2823883a 	mov	r17,r5
    a604:	1827883a 	mov	r19,r3
    a608:	a0800217 	ldw	r2,8(r20)
    a60c:	94e1883a 	add	r16,r18,r19
    a610:	a1400117 	ldw	r5,4(r20)
    a614:	1400010e 	bge	r2,r16,a61c <__multiply+0x58>
    a618:	29400044 	addi	r5,r5,1
    a61c:	000a17c0 	call	a17c <_Balloc>
    a620:	8415883a 	add	r10,r16,r16
    a624:	12c00504 	addi	r11,r2,20
    a628:	5295883a 	add	r10,r10,r10
    a62c:	5a95883a 	add	r10,r11,r10
    a630:	5807883a 	mov	r3,r11
    a634:	5a80032e 	bgeu	r11,r10,a644 <__multiply+0x80>
    a638:	18000015 	stw	zero,0(r3)
    a63c:	18c00104 	addi	r3,r3,4
    a640:	1abffd36 	bltu	r3,r10,a638 <__multiply+0x74>
    a644:	9ce7883a 	add	r19,r19,r19
    a648:	94a5883a 	add	r18,r18,r18
    a64c:	89800504 	addi	r6,r17,20
    a650:	9ce7883a 	add	r19,r19,r19
    a654:	a3400504 	addi	r13,r20,20
    a658:	94a5883a 	add	r18,r18,r18
    a65c:	34d9883a 	add	r12,r6,r19
    a660:	6c93883a 	add	r9,r13,r18
    a664:	3300422e 	bgeu	r6,r12,a770 <__multiply+0x1ac>
    a668:	37c00017 	ldw	ra,0(r6)
    a66c:	fbffffcc 	andi	r15,ra,65535
    a670:	78001b26 	beq	r15,zero,a6e0 <__multiply+0x11c>
    a674:	5811883a 	mov	r8,r11
    a678:	681d883a 	mov	r14,r13
    a67c:	000f883a 	mov	r7,zero
    a680:	71000017 	ldw	r4,0(r14)
    a684:	40c00017 	ldw	r3,0(r8)
    a688:	73800104 	addi	r14,r14,4
    a68c:	217fffcc 	andi	r5,r4,65535
    a690:	2bcb383a 	mul	r5,r5,r15
    a694:	2008d43a 	srli	r4,r4,16
    a698:	1c7fffcc 	andi	r17,r3,65535
    a69c:	2c4b883a 	add	r5,r5,r17
    a6a0:	29cb883a 	add	r5,r5,r7
    a6a4:	23c9383a 	mul	r4,r4,r15
    a6a8:	1806d43a 	srli	r3,r3,16
    a6ac:	280ed43a 	srli	r7,r5,16
    a6b0:	297fffcc 	andi	r5,r5,65535
    a6b4:	20c7883a 	add	r3,r4,r3
    a6b8:	19c7883a 	add	r3,r3,r7
    a6bc:	1808943a 	slli	r4,r3,16
    a6c0:	4023883a 	mov	r17,r8
    a6c4:	180ed43a 	srli	r7,r3,16
    a6c8:	214ab03a 	or	r5,r4,r5
    a6cc:	41400015 	stw	r5,0(r8)
    a6d0:	42000104 	addi	r8,r8,4
    a6d4:	727fea36 	bltu	r14,r9,a680 <__multiply+0xbc>
    a6d8:	89c00115 	stw	r7,4(r17)
    a6dc:	37c00017 	ldw	ra,0(r6)
    a6e0:	f83ed43a 	srli	ra,ra,16
    a6e4:	f8001f26 	beq	ra,zero,a764 <__multiply+0x1a0>
    a6e8:	58c00017 	ldw	r3,0(r11)
    a6ec:	681d883a 	mov	r14,r13
    a6f0:	581f883a 	mov	r15,r11
    a6f4:	1811883a 	mov	r8,r3
    a6f8:	5825883a 	mov	r18,r11
    a6fc:	000f883a 	mov	r7,zero
    a700:	00000106 	br	a708 <__multiply+0x144>
    a704:	8825883a 	mov	r18,r17
    a708:	7140000b 	ldhu	r5,0(r14)
    a70c:	4010d43a 	srli	r8,r8,16
    a710:	193fffcc 	andi	r4,r3,65535
    a714:	2fcb383a 	mul	r5,r5,ra
    a718:	7bc00104 	addi	r15,r15,4
    a71c:	73800104 	addi	r14,r14,4
    a720:	2a0b883a 	add	r5,r5,r8
    a724:	29cb883a 	add	r5,r5,r7
    a728:	2806943a 	slli	r3,r5,16
    a72c:	94400104 	addi	r17,r18,4
    a730:	280ad43a 	srli	r5,r5,16
    a734:	1908b03a 	or	r4,r3,r4
    a738:	793fff15 	stw	r4,-4(r15)
    a73c:	70ffff17 	ldw	r3,-4(r14)
    a740:	8a000017 	ldw	r8,0(r17)
    a744:	1806d43a 	srli	r3,r3,16
    a748:	413fffcc 	andi	r4,r8,65535
    a74c:	1fc7383a 	mul	r3,r3,ra
    a750:	1907883a 	add	r3,r3,r4
    a754:	1947883a 	add	r3,r3,r5
    a758:	180ed43a 	srli	r7,r3,16
    a75c:	727fe936 	bltu	r14,r9,a704 <__multiply+0x140>
    a760:	90c00115 	stw	r3,4(r18)
    a764:	31800104 	addi	r6,r6,4
    a768:	5ac00104 	addi	r11,r11,4
    a76c:	333fbe36 	bltu	r6,r12,a668 <__multiply+0xa4>
    a770:	0400090e 	bge	zero,r16,a798 <__multiply+0x1d4>
    a774:	50ffff17 	ldw	r3,-4(r10)
    a778:	52bfff04 	addi	r10,r10,-4
    a77c:	18000326 	beq	r3,zero,a78c <__multiply+0x1c8>
    a780:	00000506 	br	a798 <__multiply+0x1d4>
    a784:	50c00017 	ldw	r3,0(r10)
    a788:	1800031e 	bne	r3,zero,a798 <__multiply+0x1d4>
    a78c:	843fffc4 	addi	r16,r16,-1
    a790:	52bfff04 	addi	r10,r10,-4
    a794:	803ffb1e 	bne	r16,zero,a784 <__multiply+0x1c0>
    a798:	14000415 	stw	r16,16(r2)
    a79c:	dfc00517 	ldw	ra,20(sp)
    a7a0:	dd000417 	ldw	r20,16(sp)
    a7a4:	dcc00317 	ldw	r19,12(sp)
    a7a8:	dc800217 	ldw	r18,8(sp)
    a7ac:	dc400117 	ldw	r17,4(sp)
    a7b0:	dc000017 	ldw	r16,0(sp)
    a7b4:	dec00604 	addi	sp,sp,24
    a7b8:	f800283a 	ret

0000a7bc <__pow5mult>:
    a7bc:	defffa04 	addi	sp,sp,-24
    a7c0:	dcc00315 	stw	r19,12(sp)
    a7c4:	dc000015 	stw	r16,0(sp)
    a7c8:	dfc00515 	stw	ra,20(sp)
    a7cc:	dd000415 	stw	r20,16(sp)
    a7d0:	dc800215 	stw	r18,8(sp)
    a7d4:	dc400115 	stw	r17,4(sp)
    a7d8:	308000cc 	andi	r2,r6,3
    a7dc:	3021883a 	mov	r16,r6
    a7e0:	2027883a 	mov	r19,r4
    a7e4:	10002f1e 	bne	r2,zero,a8a4 <__pow5mult+0xe8>
    a7e8:	2825883a 	mov	r18,r5
    a7ec:	8021d0ba 	srai	r16,r16,2
    a7f0:	80001a26 	beq	r16,zero,a85c <__pow5mult+0xa0>
    a7f4:	9c401217 	ldw	r17,72(r19)
    a7f8:	8800061e 	bne	r17,zero,a814 <__pow5mult+0x58>
    a7fc:	00003406 	br	a8d0 <__pow5mult+0x114>
    a800:	8021d07a 	srai	r16,r16,1
    a804:	80001526 	beq	r16,zero,a85c <__pow5mult+0xa0>
    a808:	88800017 	ldw	r2,0(r17)
    a80c:	10001c26 	beq	r2,zero,a880 <__pow5mult+0xc4>
    a810:	1023883a 	mov	r17,r2
    a814:	8080004c 	andi	r2,r16,1
    a818:	103ff926 	beq	r2,zero,a800 <__pow5mult+0x44>
    a81c:	880d883a 	mov	r6,r17
    a820:	900b883a 	mov	r5,r18
    a824:	9809883a 	mov	r4,r19
    a828:	000a5c40 	call	a5c4 <__multiply>
    a82c:	90001b26 	beq	r18,zero,a89c <__pow5mult+0xe0>
    a830:	91000117 	ldw	r4,4(r18)
    a834:	98c01317 	ldw	r3,76(r19)
    a838:	8021d07a 	srai	r16,r16,1
    a83c:	2109883a 	add	r4,r4,r4
    a840:	2109883a 	add	r4,r4,r4
    a844:	1907883a 	add	r3,r3,r4
    a848:	19000017 	ldw	r4,0(r3)
    a84c:	91000015 	stw	r4,0(r18)
    a850:	1c800015 	stw	r18,0(r3)
    a854:	1025883a 	mov	r18,r2
    a858:	803feb1e 	bne	r16,zero,a808 <__pow5mult+0x4c>
    a85c:	9005883a 	mov	r2,r18
    a860:	dfc00517 	ldw	ra,20(sp)
    a864:	dd000417 	ldw	r20,16(sp)
    a868:	dcc00317 	ldw	r19,12(sp)
    a86c:	dc800217 	ldw	r18,8(sp)
    a870:	dc400117 	ldw	r17,4(sp)
    a874:	dc000017 	ldw	r16,0(sp)
    a878:	dec00604 	addi	sp,sp,24
    a87c:	f800283a 	ret
    a880:	880d883a 	mov	r6,r17
    a884:	880b883a 	mov	r5,r17
    a888:	9809883a 	mov	r4,r19
    a88c:	000a5c40 	call	a5c4 <__multiply>
    a890:	88800015 	stw	r2,0(r17)
    a894:	10000015 	stw	zero,0(r2)
    a898:	003fdd06 	br	a810 <__pow5mult+0x54>
    a89c:	1025883a 	mov	r18,r2
    a8a0:	003fd706 	br	a800 <__pow5mult+0x44>
    a8a4:	10bfffc4 	addi	r2,r2,-1
    a8a8:	1085883a 	add	r2,r2,r2
    a8ac:	00c000b4 	movhi	r3,2
    a8b0:	18fd8104 	addi	r3,r3,-2556
    a8b4:	1085883a 	add	r2,r2,r2
    a8b8:	1885883a 	add	r2,r3,r2
    a8bc:	11800017 	ldw	r6,0(r2)
    a8c0:	000f883a 	mov	r7,zero
    a8c4:	000a24c0 	call	a24c <__multadd>
    a8c8:	1025883a 	mov	r18,r2
    a8cc:	003fc706 	br	a7ec <__pow5mult+0x30>
    a8d0:	05000044 	movi	r20,1
    a8d4:	a00b883a 	mov	r5,r20
    a8d8:	9809883a 	mov	r4,r19
    a8dc:	000a17c0 	call	a17c <_Balloc>
    a8e0:	1023883a 	mov	r17,r2
    a8e4:	00809c44 	movi	r2,625
    a8e8:	88800515 	stw	r2,20(r17)
    a8ec:	8d000415 	stw	r20,16(r17)
    a8f0:	9c401215 	stw	r17,72(r19)
    a8f4:	88000015 	stw	zero,0(r17)
    a8f8:	003fc606 	br	a814 <__pow5mult+0x58>

0000a8fc <__lshift>:
    a8fc:	defff904 	addi	sp,sp,-28
    a900:	dd400515 	stw	r21,20(sp)
    a904:	dcc00315 	stw	r19,12(sp)
    a908:	302bd17a 	srai	r21,r6,5
    a90c:	2cc00417 	ldw	r19,16(r5)
    a910:	28800217 	ldw	r2,8(r5)
    a914:	dd000415 	stw	r20,16(sp)
    a918:	ace7883a 	add	r19,r21,r19
    a91c:	dc800215 	stw	r18,8(sp)
    a920:	dc400115 	stw	r17,4(sp)
    a924:	dc000015 	stw	r16,0(sp)
    a928:	dfc00615 	stw	ra,24(sp)
    a92c:	9c000044 	addi	r16,r19,1
    a930:	2823883a 	mov	r17,r5
    a934:	3029883a 	mov	r20,r6
    a938:	2025883a 	mov	r18,r4
    a93c:	29400117 	ldw	r5,4(r5)
    a940:	1400030e 	bge	r2,r16,a950 <__lshift+0x54>
    a944:	1085883a 	add	r2,r2,r2
    a948:	29400044 	addi	r5,r5,1
    a94c:	143ffd16 	blt	r2,r16,a944 <__lshift+0x48>
    a950:	9009883a 	mov	r4,r18
    a954:	000a17c0 	call	a17c <_Balloc>
    a958:	10c00504 	addi	r3,r2,20
    a95c:	0540070e 	bge	zero,r21,a97c <__lshift+0x80>
    a960:	ad6b883a 	add	r21,r21,r21
    a964:	ad6b883a 	add	r21,r21,r21
    a968:	1809883a 	mov	r4,r3
    a96c:	1d47883a 	add	r3,r3,r21
    a970:	20000015 	stw	zero,0(r4)
    a974:	21000104 	addi	r4,r4,4
    a978:	193ffd1e 	bne	r3,r4,a970 <__lshift+0x74>
    a97c:	8a000417 	ldw	r8,16(r17)
    a980:	89000504 	addi	r4,r17,20
    a984:	a18007cc 	andi	r6,r20,31
    a988:	4211883a 	add	r8,r8,r8
    a98c:	4211883a 	add	r8,r8,r8
    a990:	2211883a 	add	r8,r4,r8
    a994:	30002326 	beq	r6,zero,aa24 <__lshift+0x128>
    a998:	02400804 	movi	r9,32
    a99c:	4993c83a 	sub	r9,r9,r6
    a9a0:	000b883a 	mov	r5,zero
    a9a4:	21c00017 	ldw	r7,0(r4)
    a9a8:	1815883a 	mov	r10,r3
    a9ac:	18c00104 	addi	r3,r3,4
    a9b0:	398e983a 	sll	r7,r7,r6
    a9b4:	21000104 	addi	r4,r4,4
    a9b8:	394ab03a 	or	r5,r7,r5
    a9bc:	197fff15 	stw	r5,-4(r3)
    a9c0:	217fff17 	ldw	r5,-4(r4)
    a9c4:	2a4ad83a 	srl	r5,r5,r9
    a9c8:	223ff636 	bltu	r4,r8,a9a4 <__lshift+0xa8>
    a9cc:	51400115 	stw	r5,4(r10)
    a9d0:	28001a1e 	bne	r5,zero,aa3c <__lshift+0x140>
    a9d4:	843fffc4 	addi	r16,r16,-1
    a9d8:	14000415 	stw	r16,16(r2)
    a9dc:	88000826 	beq	r17,zero,aa00 <__lshift+0x104>
    a9e0:	89000117 	ldw	r4,4(r17)
    a9e4:	90c01317 	ldw	r3,76(r18)
    a9e8:	2109883a 	add	r4,r4,r4
    a9ec:	2109883a 	add	r4,r4,r4
    a9f0:	1907883a 	add	r3,r3,r4
    a9f4:	19000017 	ldw	r4,0(r3)
    a9f8:	89000015 	stw	r4,0(r17)
    a9fc:	1c400015 	stw	r17,0(r3)
    aa00:	dfc00617 	ldw	ra,24(sp)
    aa04:	dd400517 	ldw	r21,20(sp)
    aa08:	dd000417 	ldw	r20,16(sp)
    aa0c:	dcc00317 	ldw	r19,12(sp)
    aa10:	dc800217 	ldw	r18,8(sp)
    aa14:	dc400117 	ldw	r17,4(sp)
    aa18:	dc000017 	ldw	r16,0(sp)
    aa1c:	dec00704 	addi	sp,sp,28
    aa20:	f800283a 	ret
    aa24:	21400017 	ldw	r5,0(r4)
    aa28:	18c00104 	addi	r3,r3,4
    aa2c:	21000104 	addi	r4,r4,4
    aa30:	197fff15 	stw	r5,-4(r3)
    aa34:	223ffb36 	bltu	r4,r8,aa24 <__lshift+0x128>
    aa38:	003fe606 	br	a9d4 <__lshift+0xd8>
    aa3c:	9c000084 	addi	r16,r19,2
    aa40:	003fe406 	br	a9d4 <__lshift+0xd8>

0000aa44 <__mcmp>:
    aa44:	20800417 	ldw	r2,16(r4)
    aa48:	28c00417 	ldw	r3,16(r5)
    aa4c:	10c5c83a 	sub	r2,r2,r3
    aa50:	1000111e 	bne	r2,zero,aa98 <__mcmp+0x54>
    aa54:	18c7883a 	add	r3,r3,r3
    aa58:	18c7883a 	add	r3,r3,r3
    aa5c:	21000504 	addi	r4,r4,20
    aa60:	29400504 	addi	r5,r5,20
    aa64:	20c5883a 	add	r2,r4,r3
    aa68:	28cb883a 	add	r5,r5,r3
    aa6c:	00000106 	br	aa74 <__mcmp+0x30>
    aa70:	20800a2e 	bgeu	r4,r2,aa9c <__mcmp+0x58>
    aa74:	10bfff04 	addi	r2,r2,-4
    aa78:	297fff04 	addi	r5,r5,-4
    aa7c:	11800017 	ldw	r6,0(r2)
    aa80:	28c00017 	ldw	r3,0(r5)
    aa84:	30fffa26 	beq	r6,r3,aa70 <__mcmp+0x2c>
    aa88:	30c00236 	bltu	r6,r3,aa94 <__mcmp+0x50>
    aa8c:	00800044 	movi	r2,1
    aa90:	f800283a 	ret
    aa94:	00bfffc4 	movi	r2,-1
    aa98:	f800283a 	ret
    aa9c:	0005883a 	mov	r2,zero
    aaa0:	f800283a 	ret

0000aaa4 <__mdiff>:
    aaa4:	28c00417 	ldw	r3,16(r5)
    aaa8:	30800417 	ldw	r2,16(r6)
    aaac:	defffa04 	addi	sp,sp,-24
    aab0:	dcc00315 	stw	r19,12(sp)
    aab4:	dc800215 	stw	r18,8(sp)
    aab8:	dfc00515 	stw	ra,20(sp)
    aabc:	dd000415 	stw	r20,16(sp)
    aac0:	dc400115 	stw	r17,4(sp)
    aac4:	dc000015 	stw	r16,0(sp)
    aac8:	1887c83a 	sub	r3,r3,r2
    aacc:	2825883a 	mov	r18,r5
    aad0:	3027883a 	mov	r19,r6
    aad4:	1800141e 	bne	r3,zero,ab28 <__mdiff+0x84>
    aad8:	1085883a 	add	r2,r2,r2
    aadc:	1085883a 	add	r2,r2,r2
    aae0:	2a000504 	addi	r8,r5,20
    aae4:	34000504 	addi	r16,r6,20
    aae8:	4087883a 	add	r3,r8,r2
    aaec:	8085883a 	add	r2,r16,r2
    aaf0:	00000106 	br	aaf8 <__mdiff+0x54>
    aaf4:	40c0592e 	bgeu	r8,r3,ac5c <__mdiff+0x1b8>
    aaf8:	18ffff04 	addi	r3,r3,-4
    aafc:	10bfff04 	addi	r2,r2,-4
    ab00:	19c00017 	ldw	r7,0(r3)
    ab04:	11400017 	ldw	r5,0(r2)
    ab08:	397ffa26 	beq	r7,r5,aaf4 <__mdiff+0x50>
    ab0c:	3940592e 	bgeu	r7,r5,ac74 <__mdiff+0x1d0>
    ab10:	9005883a 	mov	r2,r18
    ab14:	4023883a 	mov	r17,r8
    ab18:	9825883a 	mov	r18,r19
    ab1c:	05000044 	movi	r20,1
    ab20:	1027883a 	mov	r19,r2
    ab24:	00000406 	br	ab38 <__mdiff+0x94>
    ab28:	18005616 	blt	r3,zero,ac84 <__mdiff+0x1e0>
    ab2c:	34400504 	addi	r17,r6,20
    ab30:	2c000504 	addi	r16,r5,20
    ab34:	0029883a 	mov	r20,zero
    ab38:	91400117 	ldw	r5,4(r18)
    ab3c:	000a17c0 	call	a17c <_Balloc>
    ab40:	92400417 	ldw	r9,16(r18)
    ab44:	9b000417 	ldw	r12,16(r19)
    ab48:	12c00504 	addi	r11,r2,20
    ab4c:	4a51883a 	add	r8,r9,r9
    ab50:	6319883a 	add	r12,r12,r12
    ab54:	4211883a 	add	r8,r8,r8
    ab58:	6319883a 	add	r12,r12,r12
    ab5c:	15000315 	stw	r20,12(r2)
    ab60:	8211883a 	add	r8,r16,r8
    ab64:	8b19883a 	add	r12,r17,r12
    ab68:	0007883a 	mov	r3,zero
    ab6c:	81400017 	ldw	r5,0(r16)
    ab70:	89c00017 	ldw	r7,0(r17)
    ab74:	59800104 	addi	r6,r11,4
    ab78:	293fffcc 	andi	r4,r5,65535
    ab7c:	20c7883a 	add	r3,r4,r3
    ab80:	393fffcc 	andi	r4,r7,65535
    ab84:	1909c83a 	sub	r4,r3,r4
    ab88:	280ad43a 	srli	r5,r5,16
    ab8c:	380ed43a 	srli	r7,r7,16
    ab90:	2007d43a 	srai	r3,r4,16
    ab94:	213fffcc 	andi	r4,r4,65535
    ab98:	29cbc83a 	sub	r5,r5,r7
    ab9c:	28c7883a 	add	r3,r5,r3
    aba0:	180a943a 	slli	r5,r3,16
    aba4:	8c400104 	addi	r17,r17,4
    aba8:	84000104 	addi	r16,r16,4
    abac:	2908b03a 	or	r4,r5,r4
    abb0:	59000015 	stw	r4,0(r11)
    abb4:	1807d43a 	srai	r3,r3,16
    abb8:	3015883a 	mov	r10,r6
    abbc:	3017883a 	mov	r11,r6
    abc0:	8b3fea36 	bltu	r17,r12,ab6c <__mdiff+0xc8>
    abc4:	8200162e 	bgeu	r16,r8,ac20 <__mdiff+0x17c>
    abc8:	8017883a 	mov	r11,r16
    abcc:	59400017 	ldw	r5,0(r11)
    abd0:	31800104 	addi	r6,r6,4
    abd4:	5ac00104 	addi	r11,r11,4
    abd8:	293fffcc 	andi	r4,r5,65535
    abdc:	20c7883a 	add	r3,r4,r3
    abe0:	280ed43a 	srli	r7,r5,16
    abe4:	180bd43a 	srai	r5,r3,16
    abe8:	193fffcc 	andi	r4,r3,65535
    abec:	3947883a 	add	r3,r7,r5
    abf0:	180a943a 	slli	r5,r3,16
    abf4:	1807d43a 	srai	r3,r3,16
    abf8:	2908b03a 	or	r4,r5,r4
    abfc:	313fff15 	stw	r4,-4(r6)
    ac00:	5a3ff236 	bltu	r11,r8,abcc <__mdiff+0x128>
    ac04:	0406303a 	nor	r3,zero,r16
    ac08:	1a07883a 	add	r3,r3,r8
    ac0c:	1806d0ba 	srli	r3,r3,2
    ac10:	18c00044 	addi	r3,r3,1
    ac14:	18c7883a 	add	r3,r3,r3
    ac18:	18c7883a 	add	r3,r3,r3
    ac1c:	50d5883a 	add	r10,r10,r3
    ac20:	50ffff04 	addi	r3,r10,-4
    ac24:	2000041e 	bne	r4,zero,ac38 <__mdiff+0x194>
    ac28:	18ffff04 	addi	r3,r3,-4
    ac2c:	19000017 	ldw	r4,0(r3)
    ac30:	4a7fffc4 	addi	r9,r9,-1
    ac34:	203ffc26 	beq	r4,zero,ac28 <__mdiff+0x184>
    ac38:	12400415 	stw	r9,16(r2)
    ac3c:	dfc00517 	ldw	ra,20(sp)
    ac40:	dd000417 	ldw	r20,16(sp)
    ac44:	dcc00317 	ldw	r19,12(sp)
    ac48:	dc800217 	ldw	r18,8(sp)
    ac4c:	dc400117 	ldw	r17,4(sp)
    ac50:	dc000017 	ldw	r16,0(sp)
    ac54:	dec00604 	addi	sp,sp,24
    ac58:	f800283a 	ret
    ac5c:	000b883a 	mov	r5,zero
    ac60:	000a17c0 	call	a17c <_Balloc>
    ac64:	00c00044 	movi	r3,1
    ac68:	10c00415 	stw	r3,16(r2)
    ac6c:	10000515 	stw	zero,20(r2)
    ac70:	003ff206 	br	ac3c <__mdiff+0x198>
    ac74:	8023883a 	mov	r17,r16
    ac78:	0029883a 	mov	r20,zero
    ac7c:	4021883a 	mov	r16,r8
    ac80:	003fad06 	br	ab38 <__mdiff+0x94>
    ac84:	9005883a 	mov	r2,r18
    ac88:	94400504 	addi	r17,r18,20
    ac8c:	9c000504 	addi	r16,r19,20
    ac90:	9825883a 	mov	r18,r19
    ac94:	05000044 	movi	r20,1
    ac98:	1027883a 	mov	r19,r2
    ac9c:	003fa606 	br	ab38 <__mdiff+0x94>

0000aca0 <__ulp>:
    aca0:	295ffc2c 	andhi	r5,r5,32752
    aca4:	00bf3034 	movhi	r2,64704
    aca8:	2887883a 	add	r3,r5,r2
    acac:	00c0020e 	bge	zero,r3,acb8 <__ulp+0x18>
    acb0:	0005883a 	mov	r2,zero
    acb4:	f800283a 	ret
    acb8:	00c7c83a 	sub	r3,zero,r3
    acbc:	1807d53a 	srai	r3,r3,20
    acc0:	008004c4 	movi	r2,19
    acc4:	10c00b0e 	bge	r2,r3,acf4 <__ulp+0x54>
    acc8:	18bffb04 	addi	r2,r3,-20
    accc:	01000784 	movi	r4,30
    acd0:	0007883a 	mov	r3,zero
    acd4:	20800516 	blt	r4,r2,acec <__ulp+0x4c>
    acd8:	010007c4 	movi	r4,31
    acdc:	2089c83a 	sub	r4,r4,r2
    ace0:	00800044 	movi	r2,1
    ace4:	1104983a 	sll	r2,r2,r4
    ace8:	f800283a 	ret
    acec:	00800044 	movi	r2,1
    acf0:	f800283a 	ret
    acf4:	01400234 	movhi	r5,8
    acf8:	28c7d83a 	sra	r3,r5,r3
    acfc:	0005883a 	mov	r2,zero
    ad00:	f800283a 	ret

0000ad04 <__b2d>:
    ad04:	defffa04 	addi	sp,sp,-24
    ad08:	dc000015 	stw	r16,0(sp)
    ad0c:	24000417 	ldw	r16,16(r4)
    ad10:	dc400115 	stw	r17,4(sp)
    ad14:	24400504 	addi	r17,r4,20
    ad18:	8421883a 	add	r16,r16,r16
    ad1c:	8421883a 	add	r16,r16,r16
    ad20:	8c21883a 	add	r16,r17,r16
    ad24:	dc800215 	stw	r18,8(sp)
    ad28:	84bfff17 	ldw	r18,-4(r16)
    ad2c:	dd000415 	stw	r20,16(sp)
    ad30:	dcc00315 	stw	r19,12(sp)
    ad34:	9009883a 	mov	r4,r18
    ad38:	2829883a 	mov	r20,r5
    ad3c:	dfc00515 	stw	ra,20(sp)
    ad40:	000a4700 	call	a470 <__hi0bits>
    ad44:	00c00804 	movi	r3,32
    ad48:	1889c83a 	sub	r4,r3,r2
    ad4c:	a1000015 	stw	r4,0(r20)
    ad50:	01000284 	movi	r4,10
    ad54:	84ffff04 	addi	r19,r16,-4
    ad58:	20801216 	blt	r4,r2,ada4 <__b2d+0xa0>
    ad5c:	018002c4 	movi	r6,11
    ad60:	308dc83a 	sub	r6,r6,r2
    ad64:	9186d83a 	srl	r3,r18,r6
    ad68:	18cffc34 	orhi	r3,r3,16368
    ad6c:	8cc0212e 	bgeu	r17,r19,adf4 <__b2d+0xf0>
    ad70:	813ffe17 	ldw	r4,-8(r16)
    ad74:	218cd83a 	srl	r6,r4,r6
    ad78:	10800544 	addi	r2,r2,21
    ad7c:	9084983a 	sll	r2,r18,r2
    ad80:	1184b03a 	or	r2,r2,r6
    ad84:	dfc00517 	ldw	ra,20(sp)
    ad88:	dd000417 	ldw	r20,16(sp)
    ad8c:	dcc00317 	ldw	r19,12(sp)
    ad90:	dc800217 	ldw	r18,8(sp)
    ad94:	dc400117 	ldw	r17,4(sp)
    ad98:	dc000017 	ldw	r16,0(sp)
    ad9c:	dec00604 	addi	sp,sp,24
    ada0:	f800283a 	ret
    ada4:	8cc00f2e 	bgeu	r17,r19,ade4 <__b2d+0xe0>
    ada8:	117ffd44 	addi	r5,r2,-11
    adac:	80bffe17 	ldw	r2,-8(r16)
    adb0:	28000e26 	beq	r5,zero,adec <__b2d+0xe8>
    adb4:	1949c83a 	sub	r4,r3,r5
    adb8:	9164983a 	sll	r18,r18,r5
    adbc:	1106d83a 	srl	r3,r2,r4
    adc0:	81bffe04 	addi	r6,r16,-8
    adc4:	948ffc34 	orhi	r18,r18,16368
    adc8:	90c6b03a 	or	r3,r18,r3
    adcc:	89800e2e 	bgeu	r17,r6,ae08 <__b2d+0x104>
    add0:	81bffd17 	ldw	r6,-12(r16)
    add4:	1144983a 	sll	r2,r2,r5
    add8:	310ad83a 	srl	r5,r6,r4
    addc:	2884b03a 	or	r2,r5,r2
    ade0:	003fe806 	br	ad84 <__b2d+0x80>
    ade4:	10bffd44 	addi	r2,r2,-11
    ade8:	1000041e 	bne	r2,zero,adfc <__b2d+0xf8>
    adec:	90cffc34 	orhi	r3,r18,16368
    adf0:	003fe406 	br	ad84 <__b2d+0x80>
    adf4:	000d883a 	mov	r6,zero
    adf8:	003fdf06 	br	ad78 <__b2d+0x74>
    adfc:	90a4983a 	sll	r18,r18,r2
    ae00:	0005883a 	mov	r2,zero
    ae04:	003ff906 	br	adec <__b2d+0xe8>
    ae08:	1144983a 	sll	r2,r2,r5
    ae0c:	003fdd06 	br	ad84 <__b2d+0x80>

0000ae10 <__d2b>:
    ae10:	defff804 	addi	sp,sp,-32
    ae14:	dc000215 	stw	r16,8(sp)
    ae18:	3021883a 	mov	r16,r6
    ae1c:	dc400315 	stw	r17,12(sp)
    ae20:	8022907a 	slli	r17,r16,1
    ae24:	dd000615 	stw	r20,24(sp)
    ae28:	2829883a 	mov	r20,r5
    ae2c:	01400044 	movi	r5,1
    ae30:	dcc00515 	stw	r19,20(sp)
    ae34:	dc800415 	stw	r18,16(sp)
    ae38:	dfc00715 	stw	ra,28(sp)
    ae3c:	3825883a 	mov	r18,r7
    ae40:	8822d57a 	srli	r17,r17,21
    ae44:	000a17c0 	call	a17c <_Balloc>
    ae48:	1027883a 	mov	r19,r2
    ae4c:	00800434 	movhi	r2,16
    ae50:	10bfffc4 	addi	r2,r2,-1
    ae54:	808c703a 	and	r6,r16,r2
    ae58:	88000126 	beq	r17,zero,ae60 <__d2b+0x50>
    ae5c:	31800434 	orhi	r6,r6,16
    ae60:	d9800015 	stw	r6,0(sp)
    ae64:	a0002426 	beq	r20,zero,aef8 <__d2b+0xe8>
    ae68:	d9000104 	addi	r4,sp,4
    ae6c:	dd000115 	stw	r20,4(sp)
    ae70:	000a4d80 	call	a4d8 <__lo0bits>
    ae74:	d8c00017 	ldw	r3,0(sp)
    ae78:	10002f1e 	bne	r2,zero,af38 <__d2b+0x128>
    ae7c:	d9000117 	ldw	r4,4(sp)
    ae80:	99000515 	stw	r4,20(r19)
    ae84:	1821003a 	cmpeq	r16,r3,zero
    ae88:	01000084 	movi	r4,2
    ae8c:	2421c83a 	sub	r16,r4,r16
    ae90:	98c00615 	stw	r3,24(r19)
    ae94:	9c000415 	stw	r16,16(r19)
    ae98:	88001f1e 	bne	r17,zero,af18 <__d2b+0x108>
    ae9c:	10bef384 	addi	r2,r2,-1074
    aea0:	90800015 	stw	r2,0(r18)
    aea4:	00900034 	movhi	r2,16384
    aea8:	10bfffc4 	addi	r2,r2,-1
    aeac:	8085883a 	add	r2,r16,r2
    aeb0:	1085883a 	add	r2,r2,r2
    aeb4:	1085883a 	add	r2,r2,r2
    aeb8:	9885883a 	add	r2,r19,r2
    aebc:	11000517 	ldw	r4,20(r2)
    aec0:	8020917a 	slli	r16,r16,5
    aec4:	000a4700 	call	a470 <__hi0bits>
    aec8:	d8c00817 	ldw	r3,32(sp)
    aecc:	8085c83a 	sub	r2,r16,r2
    aed0:	18800015 	stw	r2,0(r3)
    aed4:	9805883a 	mov	r2,r19
    aed8:	dfc00717 	ldw	ra,28(sp)
    aedc:	dd000617 	ldw	r20,24(sp)
    aee0:	dcc00517 	ldw	r19,20(sp)
    aee4:	dc800417 	ldw	r18,16(sp)
    aee8:	dc400317 	ldw	r17,12(sp)
    aeec:	dc000217 	ldw	r16,8(sp)
    aef0:	dec00804 	addi	sp,sp,32
    aef4:	f800283a 	ret
    aef8:	d809883a 	mov	r4,sp
    aefc:	000a4d80 	call	a4d8 <__lo0bits>
    af00:	d8c00017 	ldw	r3,0(sp)
    af04:	04000044 	movi	r16,1
    af08:	9c000415 	stw	r16,16(r19)
    af0c:	98c00515 	stw	r3,20(r19)
    af10:	10800804 	addi	r2,r2,32
    af14:	883fe126 	beq	r17,zero,ae9c <__d2b+0x8c>
    af18:	00c00d44 	movi	r3,53
    af1c:	8c7ef344 	addi	r17,r17,-1075
    af20:	88a3883a 	add	r17,r17,r2
    af24:	1885c83a 	sub	r2,r3,r2
    af28:	d8c00817 	ldw	r3,32(sp)
    af2c:	94400015 	stw	r17,0(r18)
    af30:	18800015 	stw	r2,0(r3)
    af34:	003fe706 	br	aed4 <__d2b+0xc4>
    af38:	01000804 	movi	r4,32
    af3c:	2089c83a 	sub	r4,r4,r2
    af40:	1908983a 	sll	r4,r3,r4
    af44:	d9400117 	ldw	r5,4(sp)
    af48:	1886d83a 	srl	r3,r3,r2
    af4c:	2148b03a 	or	r4,r4,r5
    af50:	99000515 	stw	r4,20(r19)
    af54:	d8c00015 	stw	r3,0(sp)
    af58:	003fca06 	br	ae84 <__d2b+0x74>

0000af5c <__ratio>:
    af5c:	defff904 	addi	sp,sp,-28
    af60:	dc400315 	stw	r17,12(sp)
    af64:	2823883a 	mov	r17,r5
    af68:	d9400104 	addi	r5,sp,4
    af6c:	dfc00615 	stw	ra,24(sp)
    af70:	dcc00515 	stw	r19,20(sp)
    af74:	dc800415 	stw	r18,16(sp)
    af78:	2027883a 	mov	r19,r4
    af7c:	dc000215 	stw	r16,8(sp)
    af80:	000ad040 	call	ad04 <__b2d>
    af84:	d80b883a 	mov	r5,sp
    af88:	8809883a 	mov	r4,r17
    af8c:	1025883a 	mov	r18,r2
    af90:	1821883a 	mov	r16,r3
    af94:	000ad040 	call	ad04 <__b2d>
    af98:	8a000417 	ldw	r8,16(r17)
    af9c:	99000417 	ldw	r4,16(r19)
    afa0:	d9400117 	ldw	r5,4(sp)
    afa4:	2209c83a 	sub	r4,r4,r8
    afa8:	2010917a 	slli	r8,r4,5
    afac:	d9000017 	ldw	r4,0(sp)
    afb0:	2909c83a 	sub	r4,r5,r4
    afb4:	4109883a 	add	r4,r8,r4
    afb8:	01000e0e 	bge	zero,r4,aff4 <__ratio+0x98>
    afbc:	2008953a 	slli	r4,r4,20
    afc0:	2421883a 	add	r16,r4,r16
    afc4:	100d883a 	mov	r6,r2
    afc8:	180f883a 	mov	r7,r3
    afcc:	9009883a 	mov	r4,r18
    afd0:	800b883a 	mov	r5,r16
    afd4:	00109040 	call	10904 <__divdf3>
    afd8:	dfc00617 	ldw	ra,24(sp)
    afdc:	dcc00517 	ldw	r19,20(sp)
    afe0:	dc800417 	ldw	r18,16(sp)
    afe4:	dc400317 	ldw	r17,12(sp)
    afe8:	dc000217 	ldw	r16,8(sp)
    afec:	dec00704 	addi	sp,sp,28
    aff0:	f800283a 	ret
    aff4:	2008953a 	slli	r4,r4,20
    aff8:	1907c83a 	sub	r3,r3,r4
    affc:	003ff106 	br	afc4 <__ratio+0x68>

0000b000 <_mprec_log10>:
    b000:	defffe04 	addi	sp,sp,-8
    b004:	dc000015 	stw	r16,0(sp)
    b008:	dfc00115 	stw	ra,4(sp)
    b00c:	008005c4 	movi	r2,23
    b010:	2021883a 	mov	r16,r4
    b014:	11000d0e 	bge	r2,r4,b04c <_mprec_log10+0x4c>
    b018:	0005883a 	mov	r2,zero
    b01c:	00cffc34 	movhi	r3,16368
    b020:	843fffc4 	addi	r16,r16,-1
    b024:	000d883a 	mov	r6,zero
    b028:	01d00934 	movhi	r7,16420
    b02c:	1009883a 	mov	r4,r2
    b030:	180b883a 	mov	r5,r3
    b034:	00114440 	call	11444 <__muldf3>
    b038:	803ff91e 	bne	r16,zero,b020 <_mprec_log10+0x20>
    b03c:	dfc00117 	ldw	ra,4(sp)
    b040:	dc000017 	ldw	r16,0(sp)
    b044:	dec00204 	addi	sp,sp,8
    b048:	f800283a 	ret
    b04c:	202090fa 	slli	r16,r4,3
    b050:	008000b4 	movhi	r2,2
    b054:	10bd9804 	addi	r2,r2,-2464
    b058:	1421883a 	add	r16,r2,r16
    b05c:	80800017 	ldw	r2,0(r16)
    b060:	80c00117 	ldw	r3,4(r16)
    b064:	dfc00117 	ldw	ra,4(sp)
    b068:	dc000017 	ldw	r16,0(sp)
    b06c:	dec00204 	addi	sp,sp,8
    b070:	f800283a 	ret

0000b074 <__copybits>:
    b074:	297fffc4 	addi	r5,r5,-1
    b078:	280fd17a 	srai	r7,r5,5
    b07c:	30c00417 	ldw	r3,16(r6)
    b080:	30800504 	addi	r2,r6,20
    b084:	39c00044 	addi	r7,r7,1
    b088:	18c7883a 	add	r3,r3,r3
    b08c:	39cf883a 	add	r7,r7,r7
    b090:	18c7883a 	add	r3,r3,r3
    b094:	39cf883a 	add	r7,r7,r7
    b098:	10c7883a 	add	r3,r2,r3
    b09c:	21cf883a 	add	r7,r4,r7
    b0a0:	10c00d2e 	bgeu	r2,r3,b0d8 <__copybits+0x64>
    b0a4:	200b883a 	mov	r5,r4
    b0a8:	12000017 	ldw	r8,0(r2)
    b0ac:	29400104 	addi	r5,r5,4
    b0b0:	10800104 	addi	r2,r2,4
    b0b4:	2a3fff15 	stw	r8,-4(r5)
    b0b8:	10fffb36 	bltu	r2,r3,b0a8 <__copybits+0x34>
    b0bc:	1985c83a 	sub	r2,r3,r6
    b0c0:	10bffac4 	addi	r2,r2,-21
    b0c4:	1004d0ba 	srli	r2,r2,2
    b0c8:	10800044 	addi	r2,r2,1
    b0cc:	1085883a 	add	r2,r2,r2
    b0d0:	1085883a 	add	r2,r2,r2
    b0d4:	2089883a 	add	r4,r4,r2
    b0d8:	21c0032e 	bgeu	r4,r7,b0e8 <__copybits+0x74>
    b0dc:	20000015 	stw	zero,0(r4)
    b0e0:	21000104 	addi	r4,r4,4
    b0e4:	21fffd36 	bltu	r4,r7,b0dc <__copybits+0x68>
    b0e8:	f800283a 	ret

0000b0ec <__any_on>:
    b0ec:	20c00417 	ldw	r3,16(r4)
    b0f0:	2805d17a 	srai	r2,r5,5
    b0f4:	21000504 	addi	r4,r4,20
    b0f8:	18800d0e 	bge	r3,r2,b130 <__any_on+0x44>
    b0fc:	18c7883a 	add	r3,r3,r3
    b100:	18c7883a 	add	r3,r3,r3
    b104:	20c7883a 	add	r3,r4,r3
    b108:	20c0192e 	bgeu	r4,r3,b170 <__any_on+0x84>
    b10c:	18bfff17 	ldw	r2,-4(r3)
    b110:	18ffff04 	addi	r3,r3,-4
    b114:	1000041e 	bne	r2,zero,b128 <__any_on+0x3c>
    b118:	20c0142e 	bgeu	r4,r3,b16c <__any_on+0x80>
    b11c:	18ffff04 	addi	r3,r3,-4
    b120:	19400017 	ldw	r5,0(r3)
    b124:	283ffc26 	beq	r5,zero,b118 <__any_on+0x2c>
    b128:	00800044 	movi	r2,1
    b12c:	f800283a 	ret
    b130:	10c00a0e 	bge	r2,r3,b15c <__any_on+0x70>
    b134:	1085883a 	add	r2,r2,r2
    b138:	1085883a 	add	r2,r2,r2
    b13c:	294007cc 	andi	r5,r5,31
    b140:	2087883a 	add	r3,r4,r2
    b144:	283ff026 	beq	r5,zero,b108 <__any_on+0x1c>
    b148:	19800017 	ldw	r6,0(r3)
    b14c:	3144d83a 	srl	r2,r6,r5
    b150:	114a983a 	sll	r5,r2,r5
    b154:	317ff41e 	bne	r6,r5,b128 <__any_on+0x3c>
    b158:	003feb06 	br	b108 <__any_on+0x1c>
    b15c:	1085883a 	add	r2,r2,r2
    b160:	1085883a 	add	r2,r2,r2
    b164:	2087883a 	add	r3,r4,r2
    b168:	003fe706 	br	b108 <__any_on+0x1c>
    b16c:	f800283a 	ret
    b170:	0005883a 	mov	r2,zero
    b174:	f800283a 	ret

0000b178 <__fpclassifyd>:
    b178:	00a00034 	movhi	r2,32768
    b17c:	10bfffc4 	addi	r2,r2,-1
    b180:	2884703a 	and	r2,r5,r2
    b184:	10000726 	beq	r2,zero,b1a4 <__fpclassifyd+0x2c>
    b188:	00fffc34 	movhi	r3,65520
    b18c:	019ff834 	movhi	r6,32736
    b190:	28c7883a 	add	r3,r5,r3
    b194:	31bfffc4 	addi	r6,r6,-1
    b198:	30c00536 	bltu	r6,r3,b1b0 <__fpclassifyd+0x38>
    b19c:	00800104 	movi	r2,4
    b1a0:	f800283a 	ret
    b1a4:	2000021e 	bne	r4,zero,b1b0 <__fpclassifyd+0x38>
    b1a8:	00800084 	movi	r2,2
    b1ac:	f800283a 	ret
    b1b0:	00dffc34 	movhi	r3,32752
    b1b4:	019ff834 	movhi	r6,32736
    b1b8:	28cb883a 	add	r5,r5,r3
    b1bc:	31bfffc4 	addi	r6,r6,-1
    b1c0:	317ff62e 	bgeu	r6,r5,b19c <__fpclassifyd+0x24>
    b1c4:	01400434 	movhi	r5,16
    b1c8:	297fffc4 	addi	r5,r5,-1
    b1cc:	28800236 	bltu	r5,r2,b1d8 <__fpclassifyd+0x60>
    b1d0:	008000c4 	movi	r2,3
    b1d4:	f800283a 	ret
    b1d8:	10c00226 	beq	r2,r3,b1e4 <__fpclassifyd+0x6c>
    b1dc:	0005883a 	mov	r2,zero
    b1e0:	f800283a 	ret
    b1e4:	2005003a 	cmpeq	r2,r4,zero
    b1e8:	f800283a 	ret

0000b1ec <_sbrk_r>:
    b1ec:	defffd04 	addi	sp,sp,-12
    b1f0:	dc000015 	stw	r16,0(sp)
    b1f4:	040000b4 	movhi	r16,2
    b1f8:	dc400115 	stw	r17,4(sp)
    b1fc:	840e5404 	addi	r16,r16,14672
    b200:	2023883a 	mov	r17,r4
    b204:	2809883a 	mov	r4,r5
    b208:	dfc00215 	stw	ra,8(sp)
    b20c:	80000015 	stw	zero,0(r16)
    b210:	0012e180 	call	12e18 <sbrk>
    b214:	00ffffc4 	movi	r3,-1
    b218:	10c00526 	beq	r2,r3,b230 <_sbrk_r+0x44>
    b21c:	dfc00217 	ldw	ra,8(sp)
    b220:	dc400117 	ldw	r17,4(sp)
    b224:	dc000017 	ldw	r16,0(sp)
    b228:	dec00304 	addi	sp,sp,12
    b22c:	f800283a 	ret
    b230:	80c00017 	ldw	r3,0(r16)
    b234:	183ff926 	beq	r3,zero,b21c <_sbrk_r+0x30>
    b238:	88c00015 	stw	r3,0(r17)
    b23c:	003ff706 	br	b21c <_sbrk_r+0x30>

0000b240 <__sread>:
    b240:	defffe04 	addi	sp,sp,-8
    b244:	dc000015 	stw	r16,0(sp)
    b248:	2821883a 	mov	r16,r5
    b24c:	2940038f 	ldh	r5,14(r5)
    b250:	dfc00115 	stw	ra,4(sp)
    b254:	000eaf00 	call	eaf0 <_read_r>
    b258:	10000716 	blt	r2,zero,b278 <__sread+0x38>
    b25c:	80c01417 	ldw	r3,80(r16)
    b260:	1887883a 	add	r3,r3,r2
    b264:	80c01415 	stw	r3,80(r16)
    b268:	dfc00117 	ldw	ra,4(sp)
    b26c:	dc000017 	ldw	r16,0(sp)
    b270:	dec00204 	addi	sp,sp,8
    b274:	f800283a 	ret
    b278:	80c0030b 	ldhu	r3,12(r16)
    b27c:	18fbffcc 	andi	r3,r3,61439
    b280:	80c0030d 	sth	r3,12(r16)
    b284:	dfc00117 	ldw	ra,4(sp)
    b288:	dc000017 	ldw	r16,0(sp)
    b28c:	dec00204 	addi	sp,sp,8
    b290:	f800283a 	ret

0000b294 <__seofread>:
    b294:	0005883a 	mov	r2,zero
    b298:	f800283a 	ret

0000b29c <__swrite>:
    b29c:	2880030b 	ldhu	r2,12(r5)
    b2a0:	defffb04 	addi	sp,sp,-20
    b2a4:	dcc00315 	stw	r19,12(sp)
    b2a8:	dc800215 	stw	r18,8(sp)
    b2ac:	dc400115 	stw	r17,4(sp)
    b2b0:	dc000015 	stw	r16,0(sp)
    b2b4:	dfc00415 	stw	ra,16(sp)
    b2b8:	10c0400c 	andi	r3,r2,256
    b2bc:	2821883a 	mov	r16,r5
    b2c0:	2023883a 	mov	r17,r4
    b2c4:	3025883a 	mov	r18,r6
    b2c8:	3827883a 	mov	r19,r7
    b2cc:	18000526 	beq	r3,zero,b2e4 <__swrite+0x48>
    b2d0:	2940038f 	ldh	r5,14(r5)
    b2d4:	01c00084 	movi	r7,2
    b2d8:	000d883a 	mov	r6,zero
    b2dc:	000e9340 	call	e934 <_lseek_r>
    b2e0:	8080030b 	ldhu	r2,12(r16)
    b2e4:	8140038f 	ldh	r5,14(r16)
    b2e8:	10bbffcc 	andi	r2,r2,61439
    b2ec:	980f883a 	mov	r7,r19
    b2f0:	900d883a 	mov	r6,r18
    b2f4:	8809883a 	mov	r4,r17
    b2f8:	8080030d 	sth	r2,12(r16)
    b2fc:	dfc00417 	ldw	ra,16(sp)
    b300:	dcc00317 	ldw	r19,12(sp)
    b304:	dc800217 	ldw	r18,8(sp)
    b308:	dc400117 	ldw	r17,4(sp)
    b30c:	dc000017 	ldw	r16,0(sp)
    b310:	dec00504 	addi	sp,sp,20
    b314:	000df441 	jmpi	df44 <_write_r>

0000b318 <__sseek>:
    b318:	defffe04 	addi	sp,sp,-8
    b31c:	dc000015 	stw	r16,0(sp)
    b320:	2821883a 	mov	r16,r5
    b324:	2940038f 	ldh	r5,14(r5)
    b328:	dfc00115 	stw	ra,4(sp)
    b32c:	000e9340 	call	e934 <_lseek_r>
    b330:	00ffffc4 	movi	r3,-1
    b334:	10c00826 	beq	r2,r3,b358 <__sseek+0x40>
    b338:	80c0030b 	ldhu	r3,12(r16)
    b33c:	80801415 	stw	r2,80(r16)
    b340:	18c40014 	ori	r3,r3,4096
    b344:	80c0030d 	sth	r3,12(r16)
    b348:	dfc00117 	ldw	ra,4(sp)
    b34c:	dc000017 	ldw	r16,0(sp)
    b350:	dec00204 	addi	sp,sp,8
    b354:	f800283a 	ret
    b358:	80c0030b 	ldhu	r3,12(r16)
    b35c:	18fbffcc 	andi	r3,r3,61439
    b360:	80c0030d 	sth	r3,12(r16)
    b364:	dfc00117 	ldw	ra,4(sp)
    b368:	dc000017 	ldw	r16,0(sp)
    b36c:	dec00204 	addi	sp,sp,8
    b370:	f800283a 	ret

0000b374 <__sclose>:
    b374:	2940038f 	ldh	r5,14(r5)
    b378:	000dfa41 	jmpi	dfa4 <_close_r>

0000b37c <strcmp>:
    b37c:	2144b03a 	or	r2,r4,r5
    b380:	108000cc 	andi	r2,r2,3
    b384:	1000171e 	bne	r2,zero,b3e4 <strcmp+0x68>
    b388:	20800017 	ldw	r2,0(r4)
    b38c:	28c00017 	ldw	r3,0(r5)
    b390:	10c0141e 	bne	r2,r3,b3e4 <strcmp+0x68>
    b394:	027fbff4 	movhi	r9,65279
    b398:	4a7fbfc4 	addi	r9,r9,-257
    b39c:	0086303a 	nor	r3,zero,r2
    b3a0:	02202074 	movhi	r8,32897
    b3a4:	1245883a 	add	r2,r2,r9
    b3a8:	42202004 	addi	r8,r8,-32640
    b3ac:	10c4703a 	and	r2,r2,r3
    b3b0:	1204703a 	and	r2,r2,r8
    b3b4:	10000226 	beq	r2,zero,b3c0 <strcmp+0x44>
    b3b8:	00002306 	br	b448 <strcmp+0xcc>
    b3bc:	1000221e 	bne	r2,zero,b448 <strcmp+0xcc>
    b3c0:	21000104 	addi	r4,r4,4
    b3c4:	20c00017 	ldw	r3,0(r4)
    b3c8:	29400104 	addi	r5,r5,4
    b3cc:	29800017 	ldw	r6,0(r5)
    b3d0:	1a4f883a 	add	r7,r3,r9
    b3d4:	00c4303a 	nor	r2,zero,r3
    b3d8:	3884703a 	and	r2,r7,r2
    b3dc:	1204703a 	and	r2,r2,r8
    b3e0:	19bff626 	beq	r3,r6,b3bc <strcmp+0x40>
    b3e4:	20800003 	ldbu	r2,0(r4)
    b3e8:	10c03fcc 	andi	r3,r2,255
    b3ec:	18c0201c 	xori	r3,r3,128
    b3f0:	18ffe004 	addi	r3,r3,-128
    b3f4:	18000c26 	beq	r3,zero,b428 <strcmp+0xac>
    b3f8:	29800007 	ldb	r6,0(r5)
    b3fc:	19800326 	beq	r3,r6,b40c <strcmp+0x90>
    b400:	00001306 	br	b450 <strcmp+0xd4>
    b404:	29800007 	ldb	r6,0(r5)
    b408:	11800b1e 	bne	r2,r6,b438 <strcmp+0xbc>
    b40c:	21000044 	addi	r4,r4,1
    b410:	20c00003 	ldbu	r3,0(r4)
    b414:	29400044 	addi	r5,r5,1
    b418:	18803fcc 	andi	r2,r3,255
    b41c:	1080201c 	xori	r2,r2,128
    b420:	10bfe004 	addi	r2,r2,-128
    b424:	103ff71e 	bne	r2,zero,b404 <strcmp+0x88>
    b428:	0007883a 	mov	r3,zero
    b42c:	28800003 	ldbu	r2,0(r5)
    b430:	1885c83a 	sub	r2,r3,r2
    b434:	f800283a 	ret
    b438:	28800003 	ldbu	r2,0(r5)
    b43c:	18c03fcc 	andi	r3,r3,255
    b440:	1885c83a 	sub	r2,r3,r2
    b444:	f800283a 	ret
    b448:	0005883a 	mov	r2,zero
    b44c:	f800283a 	ret
    b450:	10c03fcc 	andi	r3,r2,255
    b454:	003ff506 	br	b42c <strcmp+0xb0>

0000b458 <strlen>:
    b458:	208000cc 	andi	r2,r4,3
    b45c:	10002026 	beq	r2,zero,b4e0 <strlen+0x88>
    b460:	20800007 	ldb	r2,0(r4)
    b464:	10002026 	beq	r2,zero,b4e8 <strlen+0x90>
    b468:	2005883a 	mov	r2,r4
    b46c:	00000206 	br	b478 <strlen+0x20>
    b470:	10c00007 	ldb	r3,0(r2)
    b474:	18001826 	beq	r3,zero,b4d8 <strlen+0x80>
    b478:	10800044 	addi	r2,r2,1
    b47c:	10c000cc 	andi	r3,r2,3
    b480:	183ffb1e 	bne	r3,zero,b470 <strlen+0x18>
    b484:	10c00017 	ldw	r3,0(r2)
    b488:	01ffbff4 	movhi	r7,65279
    b48c:	39ffbfc4 	addi	r7,r7,-257
    b490:	00ca303a 	nor	r5,zero,r3
    b494:	01a02074 	movhi	r6,32897
    b498:	19c7883a 	add	r3,r3,r7
    b49c:	31a02004 	addi	r6,r6,-32640
    b4a0:	1946703a 	and	r3,r3,r5
    b4a4:	1986703a 	and	r3,r3,r6
    b4a8:	1800091e 	bne	r3,zero,b4d0 <strlen+0x78>
    b4ac:	10800104 	addi	r2,r2,4
    b4b0:	10c00017 	ldw	r3,0(r2)
    b4b4:	19cb883a 	add	r5,r3,r7
    b4b8:	00c6303a 	nor	r3,zero,r3
    b4bc:	28c6703a 	and	r3,r5,r3
    b4c0:	1986703a 	and	r3,r3,r6
    b4c4:	183ff926 	beq	r3,zero,b4ac <strlen+0x54>
    b4c8:	00000106 	br	b4d0 <strlen+0x78>
    b4cc:	10800044 	addi	r2,r2,1
    b4d0:	10c00007 	ldb	r3,0(r2)
    b4d4:	183ffd1e 	bne	r3,zero,b4cc <strlen+0x74>
    b4d8:	1105c83a 	sub	r2,r2,r4
    b4dc:	f800283a 	ret
    b4e0:	2005883a 	mov	r2,r4
    b4e4:	003fe706 	br	b484 <strlen+0x2c>
    b4e8:	0005883a 	mov	r2,zero
    b4ec:	f800283a 	ret

0000b4f0 <__ssprint_r>:
    b4f0:	30800217 	ldw	r2,8(r6)
    b4f4:	defff604 	addi	sp,sp,-40
    b4f8:	dc800215 	stw	r18,8(sp)
    b4fc:	dfc00915 	stw	ra,36(sp)
    b500:	df000815 	stw	fp,32(sp)
    b504:	ddc00715 	stw	r23,28(sp)
    b508:	dd800615 	stw	r22,24(sp)
    b50c:	dd400515 	stw	r21,20(sp)
    b510:	dd000415 	stw	r20,16(sp)
    b514:	dcc00315 	stw	r19,12(sp)
    b518:	dc400115 	stw	r17,4(sp)
    b51c:	dc000015 	stw	r16,0(sp)
    b520:	3025883a 	mov	r18,r6
    b524:	10005826 	beq	r2,zero,b688 <__ssprint_r+0x198>
    b528:	2027883a 	mov	r19,r4
    b52c:	35c00017 	ldw	r23,0(r6)
    b530:	29000017 	ldw	r4,0(r5)
    b534:	28800217 	ldw	r2,8(r5)
    b538:	2823883a 	mov	r17,r5
    b53c:	0039883a 	mov	fp,zero
    b540:	0021883a 	mov	r16,zero
    b544:	80003926 	beq	r16,zero,b62c <__ssprint_r+0x13c>
    b548:	102b883a 	mov	r21,r2
    b54c:	102d883a 	mov	r22,r2
    b550:	80803a36 	bltu	r16,r2,b63c <__ssprint_r+0x14c>
    b554:	88c0030b 	ldhu	r3,12(r17)
    b558:	1881200c 	andi	r2,r3,1152
    b55c:	10002626 	beq	r2,zero,b5f8 <__ssprint_r+0x108>
    b560:	88800517 	ldw	r2,20(r17)
    b564:	89400417 	ldw	r5,16(r17)
    b568:	81800044 	addi	r6,r16,1
    b56c:	108f883a 	add	r7,r2,r2
    b570:	3885883a 	add	r2,r7,r2
    b574:	100ed7fa 	srli	r7,r2,31
    b578:	216dc83a 	sub	r22,r4,r5
    b57c:	3589883a 	add	r4,r6,r22
    b580:	3885883a 	add	r2,r7,r2
    b584:	102bd07a 	srai	r21,r2,1
    b588:	a80d883a 	mov	r6,r21
    b58c:	a900022e 	bgeu	r21,r4,b598 <__ssprint_r+0xa8>
    b590:	202b883a 	mov	r21,r4
    b594:	200d883a 	mov	r6,r4
    b598:	18c1000c 	andi	r3,r3,1024
    b59c:	18002a26 	beq	r3,zero,b648 <__ssprint_r+0x158>
    b5a0:	300b883a 	mov	r5,r6
    b5a4:	9809883a 	mov	r4,r19
    b5a8:	000961c0 	call	961c <_malloc_r>
    b5ac:	1029883a 	mov	r20,r2
    b5b0:	10002c26 	beq	r2,zero,b664 <__ssprint_r+0x174>
    b5b4:	89400417 	ldw	r5,16(r17)
    b5b8:	b00d883a 	mov	r6,r22
    b5bc:	1009883a 	mov	r4,r2
    b5c0:	0009f0c0 	call	9f0c <memcpy>
    b5c4:	8880030b 	ldhu	r2,12(r17)
    b5c8:	00fedfc4 	movi	r3,-1153
    b5cc:	10c4703a 	and	r2,r2,r3
    b5d0:	10802014 	ori	r2,r2,128
    b5d4:	8880030d 	sth	r2,12(r17)
    b5d8:	a589883a 	add	r4,r20,r22
    b5dc:	adadc83a 	sub	r22,r21,r22
    b5e0:	8d400515 	stw	r21,20(r17)
    b5e4:	8d800215 	stw	r22,8(r17)
    b5e8:	8d000415 	stw	r20,16(r17)
    b5ec:	89000015 	stw	r4,0(r17)
    b5f0:	802b883a 	mov	r21,r16
    b5f4:	802d883a 	mov	r22,r16
    b5f8:	b00d883a 	mov	r6,r22
    b5fc:	e00b883a 	mov	r5,fp
    b600:	000e9940 	call	e994 <memmove>
    b604:	88800217 	ldw	r2,8(r17)
    b608:	89000017 	ldw	r4,0(r17)
    b60c:	90c00217 	ldw	r3,8(r18)
    b610:	1545c83a 	sub	r2,r2,r21
    b614:	2589883a 	add	r4,r4,r22
    b618:	88800215 	stw	r2,8(r17)
    b61c:	89000015 	stw	r4,0(r17)
    b620:	1c21c83a 	sub	r16,r3,r16
    b624:	94000215 	stw	r16,8(r18)
    b628:	80001726 	beq	r16,zero,b688 <__ssprint_r+0x198>
    b62c:	bf000017 	ldw	fp,0(r23)
    b630:	bc000117 	ldw	r16,4(r23)
    b634:	bdc00204 	addi	r23,r23,8
    b638:	003fc206 	br	b544 <__ssprint_r+0x54>
    b63c:	802b883a 	mov	r21,r16
    b640:	802d883a 	mov	r22,r16
    b644:	003fec06 	br	b5f8 <__ssprint_r+0x108>
    b648:	9809883a 	mov	r4,r19
    b64c:	000eb500 	call	eb50 <_realloc_r>
    b650:	1029883a 	mov	r20,r2
    b654:	103fe01e 	bne	r2,zero,b5d8 <__ssprint_r+0xe8>
    b658:	89400417 	ldw	r5,16(r17)
    b65c:	9809883a 	mov	r4,r19
    b660:	0008eec0 	call	8eec <_free_r>
    b664:	88c0030b 	ldhu	r3,12(r17)
    b668:	00800304 	movi	r2,12
    b66c:	98800015 	stw	r2,0(r19)
    b670:	18c01014 	ori	r3,r3,64
    b674:	88c0030d 	sth	r3,12(r17)
    b678:	00bfffc4 	movi	r2,-1
    b67c:	90000215 	stw	zero,8(r18)
    b680:	90000115 	stw	zero,4(r18)
    b684:	00000206 	br	b690 <__ssprint_r+0x1a0>
    b688:	90000115 	stw	zero,4(r18)
    b68c:	0005883a 	mov	r2,zero
    b690:	dfc00917 	ldw	ra,36(sp)
    b694:	df000817 	ldw	fp,32(sp)
    b698:	ddc00717 	ldw	r23,28(sp)
    b69c:	dd800617 	ldw	r22,24(sp)
    b6a0:	dd400517 	ldw	r21,20(sp)
    b6a4:	dd000417 	ldw	r20,16(sp)
    b6a8:	dcc00317 	ldw	r19,12(sp)
    b6ac:	dc800217 	ldw	r18,8(sp)
    b6b0:	dc400117 	ldw	r17,4(sp)
    b6b4:	dc000017 	ldw	r16,0(sp)
    b6b8:	dec00a04 	addi	sp,sp,40
    b6bc:	f800283a 	ret

0000b6c0 <___svfiprintf_internal_r>:
    b6c0:	2880030b 	ldhu	r2,12(r5)
    b6c4:	deffc804 	addi	sp,sp,-224
    b6c8:	dcc03115 	stw	r19,196(sp)
    b6cc:	dfc03715 	stw	ra,220(sp)
    b6d0:	df003615 	stw	fp,216(sp)
    b6d4:	ddc03515 	stw	r23,212(sp)
    b6d8:	dd803415 	stw	r22,208(sp)
    b6dc:	dd403315 	stw	r21,204(sp)
    b6e0:	dd003215 	stw	r20,200(sp)
    b6e4:	dc803015 	stw	r18,192(sp)
    b6e8:	dc402f15 	stw	r17,188(sp)
    b6ec:	dc002e15 	stw	r16,184(sp)
    b6f0:	d9402715 	stw	r5,156(sp)
    b6f4:	d9002a15 	stw	r4,168(sp)
    b6f8:	1080200c 	andi	r2,r2,128
    b6fc:	d9c02315 	stw	r7,140(sp)
    b700:	3027883a 	mov	r19,r6
    b704:	10000226 	beq	r2,zero,b710 <___svfiprintf_internal_r+0x50>
    b708:	28800417 	ldw	r2,16(r5)
    b70c:	10041d26 	beq	r2,zero,c784 <___svfiprintf_internal_r+0x10c4>
    b710:	dac01a04 	addi	r11,sp,104
    b714:	dac01e15 	stw	r11,120(sp)
    b718:	d8801e17 	ldw	r2,120(sp)
    b71c:	dac019c4 	addi	r11,sp,103
    b720:	dd402a17 	ldw	r21,168(sp)
    b724:	ddc02717 	ldw	r23,156(sp)
    b728:	058000b4 	movhi	r22,2
    b72c:	050000b4 	movhi	r20,2
    b730:	dac01f15 	stw	r11,124(sp)
    b734:	12d7c83a 	sub	r11,r2,r11
    b738:	b5bdce04 	addi	r22,r22,-2248
    b73c:	a53dca04 	addi	r20,r20,-2264
    b740:	dec01a15 	stw	sp,104(sp)
    b744:	d8001c15 	stw	zero,112(sp)
    b748:	d8001b15 	stw	zero,108(sp)
    b74c:	d811883a 	mov	r8,sp
    b750:	d8002915 	stw	zero,164(sp)
    b754:	d8002515 	stw	zero,148(sp)
    b758:	dac02b15 	stw	r11,172(sp)
    b75c:	98800007 	ldb	r2,0(r19)
    b760:	1002dd26 	beq	r2,zero,c2d8 <___svfiprintf_internal_r+0xc18>
    b764:	00c00944 	movi	r3,37
    b768:	9823883a 	mov	r17,r19
    b76c:	10c0021e 	bne	r2,r3,b778 <___svfiprintf_internal_r+0xb8>
    b770:	00001406 	br	b7c4 <___svfiprintf_internal_r+0x104>
    b774:	10c00326 	beq	r2,r3,b784 <___svfiprintf_internal_r+0xc4>
    b778:	8c400044 	addi	r17,r17,1
    b77c:	88800007 	ldb	r2,0(r17)
    b780:	103ffc1e 	bne	r2,zero,b774 <___svfiprintf_internal_r+0xb4>
    b784:	8ce1c83a 	sub	r16,r17,r19
    b788:	80000e26 	beq	r16,zero,b7c4 <___svfiprintf_internal_r+0x104>
    b78c:	d8c01c17 	ldw	r3,112(sp)
    b790:	d8801b17 	ldw	r2,108(sp)
    b794:	44c00015 	stw	r19,0(r8)
    b798:	1c07883a 	add	r3,r3,r16
    b79c:	10800044 	addi	r2,r2,1
    b7a0:	d8c01c15 	stw	r3,112(sp)
    b7a4:	44000115 	stw	r16,4(r8)
    b7a8:	d8801b15 	stw	r2,108(sp)
    b7ac:	00c001c4 	movi	r3,7
    b7b0:	18831e16 	blt	r3,r2,c42c <___svfiprintf_internal_r+0xd6c>
    b7b4:	42000204 	addi	r8,r8,8
    b7b8:	dac02517 	ldw	r11,148(sp)
    b7bc:	5c17883a 	add	r11,r11,r16
    b7c0:	dac02515 	stw	r11,148(sp)
    b7c4:	88800007 	ldb	r2,0(r17)
    b7c8:	1002c526 	beq	r2,zero,c2e0 <___svfiprintf_internal_r+0xc20>
    b7cc:	88c00047 	ldb	r3,1(r17)
    b7d0:	8cc00044 	addi	r19,r17,1
    b7d4:	d8001d85 	stb	zero,118(sp)
    b7d8:	0009883a 	mov	r4,zero
    b7dc:	000f883a 	mov	r7,zero
    b7e0:	043fffc4 	movi	r16,-1
    b7e4:	d8002415 	stw	zero,144(sp)
    b7e8:	0025883a 	mov	r18,zero
    b7ec:	01401604 	movi	r5,88
    b7f0:	01800244 	movi	r6,9
    b7f4:	02800a84 	movi	r10,42
    b7f8:	02401b04 	movi	r9,108
    b7fc:	9cc00044 	addi	r19,r19,1
    b800:	18bff804 	addi	r2,r3,-32
    b804:	2881dd36 	bltu	r5,r2,bf7c <___svfiprintf_internal_r+0x8bc>
    b808:	100490ba 	slli	r2,r2,2
    b80c:	02c00074 	movhi	r11,1
    b810:	5aee0804 	addi	r11,r11,-18400
    b814:	12c5883a 	add	r2,r2,r11
    b818:	10800017 	ldw	r2,0(r2)
    b81c:	1000683a 	jmp	r2
    b820:	0000ba1c 	xori	zero,zero,744
    b824:	0000bf7c 	xorhi	zero,zero,765
    b828:	0000bf7c 	xorhi	zero,zero,765
    b82c:	0000ba10 	cmplti	zero,zero,744
    b830:	0000bf7c 	xorhi	zero,zero,765
    b834:	0000bf7c 	xorhi	zero,zero,765
    b838:	0000bf7c 	xorhi	zero,zero,765
    b83c:	0000bf7c 	xorhi	zero,zero,765
    b840:	0000bf7c 	xorhi	zero,zero,765
    b844:	0000bf7c 	xorhi	zero,zero,765
    b848:	0000b984 	movi	zero,742
    b84c:	0000bb60 	cmpeqi	zero,zero,749
    b850:	0000bf7c 	xorhi	zero,zero,765
    b854:	0000b9b0 	cmpltui	zero,zero,742
    b858:	0000bfb0 	cmpltui	zero,zero,766
    b85c:	0000bf7c 	xorhi	zero,zero,765
    b860:	0000bfa4 	muli	zero,zero,766
    b864:	0000bf44 	movi	zero,765
    b868:	0000bf44 	movi	zero,765
    b86c:	0000bf44 	movi	zero,765
    b870:	0000bf44 	movi	zero,765
    b874:	0000bf44 	movi	zero,765
    b878:	0000bf44 	movi	zero,765
    b87c:	0000bf44 	movi	zero,765
    b880:	0000bf44 	movi	zero,765
    b884:	0000bf44 	movi	zero,765
    b888:	0000bf7c 	xorhi	zero,zero,765
    b88c:	0000bf7c 	xorhi	zero,zero,765
    b890:	0000bf7c 	xorhi	zero,zero,765
    b894:	0000bf7c 	xorhi	zero,zero,765
    b898:	0000bf7c 	xorhi	zero,zero,765
    b89c:	0000bf7c 	xorhi	zero,zero,765
    b8a0:	0000bf7c 	xorhi	zero,zero,765
    b8a4:	0000bf7c 	xorhi	zero,zero,765
    b8a8:	0000bf7c 	xorhi	zero,zero,765
    b8ac:	0000bf7c 	xorhi	zero,zero,765
    b8b0:	0000bee0 	cmpeqi	zero,zero,763
    b8b4:	0000bf7c 	xorhi	zero,zero,765
    b8b8:	0000bf7c 	xorhi	zero,zero,765
    b8bc:	0000bf7c 	xorhi	zero,zero,765
    b8c0:	0000bf7c 	xorhi	zero,zero,765
    b8c4:	0000bf7c 	xorhi	zero,zero,765
    b8c8:	0000bf7c 	xorhi	zero,zero,765
    b8cc:	0000bf7c 	xorhi	zero,zero,765
    b8d0:	0000bf7c 	xorhi	zero,zero,765
    b8d4:	0000bf7c 	xorhi	zero,zero,765
    b8d8:	0000bf7c 	xorhi	zero,zero,765
    b8dc:	0000c058 	cmpnei	zero,zero,769
    b8e0:	0000bf7c 	xorhi	zero,zero,765
    b8e4:	0000bf7c 	xorhi	zero,zero,765
    b8e8:	0000bf7c 	xorhi	zero,zero,765
    b8ec:	0000bf7c 	xorhi	zero,zero,765
    b8f0:	0000bf7c 	xorhi	zero,zero,765
    b8f4:	0000bff0 	cmpltui	zero,zero,767
    b8f8:	0000bf7c 	xorhi	zero,zero,765
    b8fc:	0000bf7c 	xorhi	zero,zero,765
    b900:	0000bd24 	muli	zero,zero,756
    b904:	0000bf7c 	xorhi	zero,zero,765
    b908:	0000bf7c 	xorhi	zero,zero,765
    b90c:	0000bf7c 	xorhi	zero,zero,765
    b910:	0000bf7c 	xorhi	zero,zero,765
    b914:	0000bf7c 	xorhi	zero,zero,765
    b918:	0000bf7c 	xorhi	zero,zero,765
    b91c:	0000bf7c 	xorhi	zero,zero,765
    b920:	0000bf7c 	xorhi	zero,zero,765
    b924:	0000bf7c 	xorhi	zero,zero,765
    b928:	0000bf7c 	xorhi	zero,zero,765
    b92c:	0000bc14 	movui	zero,752
    b930:	0000bdc0 	call	bdc <main+0x35c>
    b934:	0000bf7c 	xorhi	zero,zero,765
    b938:	0000bf7c 	xorhi	zero,zero,765
    b93c:	0000bf7c 	xorhi	zero,zero,765
    b940:	0000bdb4 	movhi	zero,758
    b944:	0000bdc0 	call	bdc <main+0x35c>
    b948:	0000bf7c 	xorhi	zero,zero,765
    b94c:	0000bf7c 	xorhi	zero,zero,765
    b950:	0000bda4 	muli	zero,zero,758
    b954:	0000bf7c 	xorhi	zero,zero,765
    b958:	0000bd68 	cmpgeui	zero,zero,757
    b95c:	0000bb70 	cmpltui	zero,zero,749
    b960:	0000b9bc 	xorhi	zero,zero,742
    b964:	0000bed4 	movui	zero,763
    b968:	0000bf7c 	xorhi	zero,zero,765
    b96c:	0000be88 	cmpgei	zero,zero,762
    b970:	0000bf7c 	xorhi	zero,zero,765
    b974:	0000bae0 	cmpeqi	zero,zero,747
    b978:	0000bf7c 	xorhi	zero,zero,765
    b97c:	0000bf7c 	xorhi	zero,zero,765
    b980:	0000ba3c 	xorhi	zero,zero,744
    b984:	dac02317 	ldw	r11,140(sp)
    b988:	5ac00017 	ldw	r11,0(r11)
    b98c:	dac02415 	stw	r11,144(sp)
    b990:	dac02317 	ldw	r11,140(sp)
    b994:	58800104 	addi	r2,r11,4
    b998:	dac02417 	ldw	r11,144(sp)
    b99c:	5802e90e 	bge	r11,zero,c544 <___svfiprintf_internal_r+0xe84>
    b9a0:	dac02417 	ldw	r11,144(sp)
    b9a4:	d8802315 	stw	r2,140(sp)
    b9a8:	02d7c83a 	sub	r11,zero,r11
    b9ac:	dac02415 	stw	r11,144(sp)
    b9b0:	94800114 	ori	r18,r18,4
    b9b4:	98c00007 	ldb	r3,0(r19)
    b9b8:	003f9006 	br	b7fc <___svfiprintf_internal_r+0x13c>
    b9bc:	00800c04 	movi	r2,48
    b9c0:	dac02317 	ldw	r11,140(sp)
    b9c4:	d8801d05 	stb	r2,116(sp)
    b9c8:	00801e04 	movi	r2,120
    b9cc:	d8801d45 	stb	r2,117(sp)
    b9d0:	d8001d85 	stb	zero,118(sp)
    b9d4:	58c00104 	addi	r3,r11,4
    b9d8:	5f000017 	ldw	fp,0(r11)
    b9dc:	0013883a 	mov	r9,zero
    b9e0:	90800094 	ori	r2,r18,2
    b9e4:	80032b16 	blt	r16,zero,c694 <___svfiprintf_internal_r+0xfd4>
    b9e8:	00bfdfc4 	movi	r2,-129
    b9ec:	90a4703a 	and	r18,r18,r2
    b9f0:	d8c02315 	stw	r3,140(sp)
    b9f4:	94800094 	ori	r18,r18,2
    b9f8:	e002dc26 	beq	fp,zero,c56c <___svfiprintf_internal_r+0xeac>
    b9fc:	010000b4 	movhi	r4,2
    ba00:	213d6204 	addi	r4,r4,-2680
    ba04:	0015883a 	mov	r10,zero
    ba08:	d9002915 	stw	r4,164(sp)
    ba0c:	00002306 	br	ba9c <___svfiprintf_internal_r+0x3dc>
    ba10:	94800054 	ori	r18,r18,1
    ba14:	98c00007 	ldb	r3,0(r19)
    ba18:	003f7806 	br	b7fc <___svfiprintf_internal_r+0x13c>
    ba1c:	38803fcc 	andi	r2,r7,255
    ba20:	1080201c 	xori	r2,r2,128
    ba24:	10bfe004 	addi	r2,r2,-128
    ba28:	1002f31e 	bne	r2,zero,c5f8 <___svfiprintf_internal_r+0xf38>
    ba2c:	01000044 	movi	r4,1
    ba30:	01c00804 	movi	r7,32
    ba34:	98c00007 	ldb	r3,0(r19)
    ba38:	003f7006 	br	b7fc <___svfiprintf_internal_r+0x13c>
    ba3c:	21003fcc 	andi	r4,r4,255
    ba40:	2003aa1e 	bne	r4,zero,c8ec <___svfiprintf_internal_r+0x122c>
    ba44:	008000b4 	movhi	r2,2
    ba48:	10bd6204 	addi	r2,r2,-2680
    ba4c:	d8802915 	stw	r2,164(sp)
    ba50:	9080080c 	andi	r2,r18,32
    ba54:	1000ba26 	beq	r2,zero,bd40 <___svfiprintf_internal_r+0x680>
    ba58:	dac02317 	ldw	r11,140(sp)
    ba5c:	5f000017 	ldw	fp,0(r11)
    ba60:	5a400117 	ldw	r9,4(r11)
    ba64:	5ac00204 	addi	r11,r11,8
    ba68:	dac02315 	stw	r11,140(sp)
    ba6c:	9080004c 	andi	r2,r18,1
    ba70:	10029026 	beq	r2,zero,c4b4 <___svfiprintf_internal_r+0xdf4>
    ba74:	e244b03a 	or	r2,fp,r9
    ba78:	1002d41e 	bne	r2,zero,c5cc <___svfiprintf_internal_r+0xf0c>
    ba7c:	d8001d85 	stb	zero,118(sp)
    ba80:	80030b16 	blt	r16,zero,c6b0 <___svfiprintf_internal_r+0xff0>
    ba84:	00bfdfc4 	movi	r2,-129
    ba88:	90a4703a 	and	r18,r18,r2
    ba8c:	0015883a 	mov	r10,zero
    ba90:	80002426 	beq	r16,zero,bb24 <___svfiprintf_internal_r+0x464>
    ba94:	0039883a 	mov	fp,zero
    ba98:	0013883a 	mov	r9,zero
    ba9c:	d9002917 	ldw	r4,164(sp)
    baa0:	dc401a04 	addi	r17,sp,104
    baa4:	e08003cc 	andi	r2,fp,15
    baa8:	4806973a 	slli	r3,r9,28
    baac:	2085883a 	add	r2,r4,r2
    bab0:	e038d13a 	srli	fp,fp,4
    bab4:	10800003 	ldbu	r2,0(r2)
    bab8:	4812d13a 	srli	r9,r9,4
    babc:	8c7fffc4 	addi	r17,r17,-1
    bac0:	1f38b03a 	or	fp,r3,fp
    bac4:	88800005 	stb	r2,0(r17)
    bac8:	e244b03a 	or	r2,fp,r9
    bacc:	103ff51e 	bne	r2,zero,baa4 <___svfiprintf_internal_r+0x3e4>
    bad0:	dac01e17 	ldw	r11,120(sp)
    bad4:	5c57c83a 	sub	r11,r11,r17
    bad8:	dac02115 	stw	r11,132(sp)
    badc:	00001406 	br	bb30 <___svfiprintf_internal_r+0x470>
    bae0:	21003fcc 	andi	r4,r4,255
    bae4:	2003741e 	bne	r4,zero,c8b8 <___svfiprintf_internal_r+0x11f8>
    bae8:	9080080c 	andi	r2,r18,32
    baec:	10014526 	beq	r2,zero,c004 <___svfiprintf_internal_r+0x944>
    baf0:	dac02317 	ldw	r11,140(sp)
    baf4:	d8001d85 	stb	zero,118(sp)
    baf8:	58c00204 	addi	r3,r11,8
    bafc:	5f000017 	ldw	fp,0(r11)
    bb00:	5a400117 	ldw	r9,4(r11)
    bb04:	8002d916 	blt	r16,zero,c66c <___svfiprintf_internal_r+0xfac>
    bb08:	013fdfc4 	movi	r4,-129
    bb0c:	e244b03a 	or	r2,fp,r9
    bb10:	d8c02315 	stw	r3,140(sp)
    bb14:	9124703a 	and	r18,r18,r4
    bb18:	0015883a 	mov	r10,zero
    bb1c:	1000b91e 	bne	r2,zero,be04 <___svfiprintf_internal_r+0x744>
    bb20:	8002e61e 	bne	r16,zero,c6bc <___svfiprintf_internal_r+0xffc>
    bb24:	0021883a 	mov	r16,zero
    bb28:	d8002115 	stw	zero,132(sp)
    bb2c:	dc401a04 	addi	r17,sp,104
    bb30:	d8c02117 	ldw	r3,132(sp)
    bb34:	dc002015 	stw	r16,128(sp)
    bb38:	80c0010e 	bge	r16,r3,bb40 <___svfiprintf_internal_r+0x480>
    bb3c:	d8c02015 	stw	r3,128(sp)
    bb40:	52803fcc 	andi	r10,r10,255
    bb44:	5280201c 	xori	r10,r10,128
    bb48:	52bfe004 	addi	r10,r10,-128
    bb4c:	50003c26 	beq	r10,zero,bc40 <___svfiprintf_internal_r+0x580>
    bb50:	dac02017 	ldw	r11,128(sp)
    bb54:	5ac00044 	addi	r11,r11,1
    bb58:	dac02015 	stw	r11,128(sp)
    bb5c:	00003806 	br	bc40 <___svfiprintf_internal_r+0x580>
    bb60:	01000044 	movi	r4,1
    bb64:	01c00ac4 	movi	r7,43
    bb68:	98c00007 	ldb	r3,0(r19)
    bb6c:	003f2306 	br	b7fc <___svfiprintf_internal_r+0x13c>
    bb70:	21003fcc 	andi	r4,r4,255
    bb74:	2003481e 	bne	r4,zero,c898 <___svfiprintf_internal_r+0x11d8>
    bb78:	9080080c 	andi	r2,r18,32
    bb7c:	10013b26 	beq	r2,zero,c06c <___svfiprintf_internal_r+0x9ac>
    bb80:	dac02317 	ldw	r11,140(sp)
    bb84:	d8001d85 	stb	zero,118(sp)
    bb88:	58800204 	addi	r2,r11,8
    bb8c:	5f000017 	ldw	fp,0(r11)
    bb90:	5a400117 	ldw	r9,4(r11)
    bb94:	8002a816 	blt	r16,zero,c638 <___svfiprintf_internal_r+0xf78>
    bb98:	013fdfc4 	movi	r4,-129
    bb9c:	e246b03a 	or	r3,fp,r9
    bba0:	d8802315 	stw	r2,140(sp)
    bba4:	9124703a 	and	r18,r18,r4
    bba8:	18013c26 	beq	r3,zero,c09c <___svfiprintf_internal_r+0x9dc>
    bbac:	0015883a 	mov	r10,zero
    bbb0:	dc401a04 	addi	r17,sp,104
    bbb4:	e006d0fa 	srli	r3,fp,3
    bbb8:	4808977a 	slli	r4,r9,29
    bbbc:	4812d0fa 	srli	r9,r9,3
    bbc0:	e70001cc 	andi	fp,fp,7
    bbc4:	e0800c04 	addi	r2,fp,48
    bbc8:	8c7fffc4 	addi	r17,r17,-1
    bbcc:	20f8b03a 	or	fp,r4,r3
    bbd0:	88800005 	stb	r2,0(r17)
    bbd4:	e246b03a 	or	r3,fp,r9
    bbd8:	183ff61e 	bne	r3,zero,bbb4 <___svfiprintf_internal_r+0x4f4>
    bbdc:	90c0004c 	andi	r3,r18,1
    bbe0:	1800a526 	beq	r3,zero,be78 <___svfiprintf_internal_r+0x7b8>
    bbe4:	10803fcc 	andi	r2,r2,255
    bbe8:	1080201c 	xori	r2,r2,128
    bbec:	10bfe004 	addi	r2,r2,-128
    bbf0:	00c00c04 	movi	r3,48
    bbf4:	10ffb626 	beq	r2,r3,bad0 <___svfiprintf_internal_r+0x410>
    bbf8:	88ffffc5 	stb	r3,-1(r17)
    bbfc:	d8c01e17 	ldw	r3,120(sp)
    bc00:	88bfffc4 	addi	r2,r17,-1
    bc04:	1023883a 	mov	r17,r2
    bc08:	1887c83a 	sub	r3,r3,r2
    bc0c:	d8c02115 	stw	r3,132(sp)
    bc10:	003fc706 	br	bb30 <___svfiprintf_internal_r+0x470>
    bc14:	dac02317 	ldw	r11,140(sp)
    bc18:	00c00044 	movi	r3,1
    bc1c:	d8c02015 	stw	r3,128(sp)
    bc20:	58800017 	ldw	r2,0(r11)
    bc24:	5ac00104 	addi	r11,r11,4
    bc28:	d8001d85 	stb	zero,118(sp)
    bc2c:	d8801005 	stb	r2,64(sp)
    bc30:	dac02315 	stw	r11,140(sp)
    bc34:	d8c02115 	stw	r3,132(sp)
    bc38:	dc401004 	addi	r17,sp,64
    bc3c:	0021883a 	mov	r16,zero
    bc40:	90c0008c 	andi	r3,r18,2
    bc44:	d8c02215 	stw	r3,136(sp)
    bc48:	18000326 	beq	r3,zero,bc58 <___svfiprintf_internal_r+0x598>
    bc4c:	dac02017 	ldw	r11,128(sp)
    bc50:	5ac00084 	addi	r11,r11,2
    bc54:	dac02015 	stw	r11,128(sp)
    bc58:	90c0210c 	andi	r3,r18,132
    bc5c:	d8c02615 	stw	r3,152(sp)
    bc60:	1801131e 	bne	r3,zero,c0b0 <___svfiprintf_internal_r+0x9f0>
    bc64:	dac02417 	ldw	r11,144(sp)
    bc68:	d8c02017 	ldw	r3,128(sp)
    bc6c:	58f9c83a 	sub	fp,r11,r3
    bc70:	07010f0e 	bge	zero,fp,c0b0 <___svfiprintf_internal_r+0x9f0>
    bc74:	02400404 	movi	r9,16
    bc78:	d8c01c17 	ldw	r3,112(sp)
    bc7c:	d8801b17 	ldw	r2,108(sp)
    bc80:	4f02d60e 	bge	r9,fp,c7dc <___svfiprintf_internal_r+0x111c>
    bc84:	014000b4 	movhi	r5,2
    bc88:	297dce04 	addi	r5,r5,-2248
    bc8c:	d9402815 	stw	r5,160(sp)
    bc90:	028001c4 	movi	r10,7
    bc94:	00000306 	br	bca4 <___svfiprintf_internal_r+0x5e4>
    bc98:	e73ffc04 	addi	fp,fp,-16
    bc9c:	42000204 	addi	r8,r8,8
    bca0:	4f00150e 	bge	r9,fp,bcf8 <___svfiprintf_internal_r+0x638>
    bca4:	18c00404 	addi	r3,r3,16
    bca8:	10800044 	addi	r2,r2,1
    bcac:	45800015 	stw	r22,0(r8)
    bcb0:	42400115 	stw	r9,4(r8)
    bcb4:	d8c01c15 	stw	r3,112(sp)
    bcb8:	d8801b15 	stw	r2,108(sp)
    bcbc:	50bff60e 	bge	r10,r2,bc98 <___svfiprintf_internal_r+0x5d8>
    bcc0:	d9801a04 	addi	r6,sp,104
    bcc4:	b80b883a 	mov	r5,r23
    bcc8:	a809883a 	mov	r4,r21
    bccc:	da402c15 	stw	r9,176(sp)
    bcd0:	da802d15 	stw	r10,180(sp)
    bcd4:	000b4f00 	call	b4f0 <__ssprint_r>
    bcd8:	da402c17 	ldw	r9,176(sp)
    bcdc:	da802d17 	ldw	r10,180(sp)
    bce0:	1001851e 	bne	r2,zero,c2f8 <___svfiprintf_internal_r+0xc38>
    bce4:	e73ffc04 	addi	fp,fp,-16
    bce8:	d8c01c17 	ldw	r3,112(sp)
    bcec:	d8801b17 	ldw	r2,108(sp)
    bcf0:	d811883a 	mov	r8,sp
    bcf4:	4f3feb16 	blt	r9,fp,bca4 <___svfiprintf_internal_r+0x5e4>
    bcf8:	dac02817 	ldw	r11,160(sp)
    bcfc:	e0c7883a 	add	r3,fp,r3
    bd00:	10800044 	addi	r2,r2,1
    bd04:	42c00015 	stw	r11,0(r8)
    bd08:	47000115 	stw	fp,4(r8)
    bd0c:	d8c01c15 	stw	r3,112(sp)
    bd10:	d8801b15 	stw	r2,108(sp)
    bd14:	010001c4 	movi	r4,7
    bd18:	2081ee16 	blt	r4,r2,c4d4 <___svfiprintf_internal_r+0xe14>
    bd1c:	42000204 	addi	r8,r8,8
    bd20:	0000e506 	br	c0b8 <___svfiprintf_internal_r+0x9f8>
    bd24:	21003fcc 	andi	r4,r4,255
    bd28:	2002dd1e 	bne	r4,zero,c8a0 <___svfiprintf_internal_r+0x11e0>
    bd2c:	008000b4 	movhi	r2,2
    bd30:	10bd5d04 	addi	r2,r2,-2700
    bd34:	d8802915 	stw	r2,164(sp)
    bd38:	9080080c 	andi	r2,r18,32
    bd3c:	103f461e 	bne	r2,zero,ba58 <___svfiprintf_internal_r+0x398>
    bd40:	9080040c 	andi	r2,r18,16
    bd44:	10022e1e 	bne	r2,zero,c600 <___svfiprintf_internal_r+0xf40>
    bd48:	9080100c 	andi	r2,r18,64
    bd4c:	dac02317 	ldw	r11,140(sp)
    bd50:	10027326 	beq	r2,zero,c720 <___svfiprintf_internal_r+0x1060>
    bd54:	5f00000b 	ldhu	fp,0(r11)
    bd58:	5ac00104 	addi	r11,r11,4
    bd5c:	0013883a 	mov	r9,zero
    bd60:	dac02315 	stw	r11,140(sp)
    bd64:	003f4106 	br	ba6c <___svfiprintf_internal_r+0x3ac>
    bd68:	21003fcc 	andi	r4,r4,255
    bd6c:	2002e11e 	bne	r4,zero,c8f4 <___svfiprintf_internal_r+0x1234>
    bd70:	9080080c 	andi	r2,r18,32
    bd74:	1002011e 	bne	r2,zero,c57c <___svfiprintf_internal_r+0xebc>
    bd78:	9080040c 	andi	r2,r18,16
    bd7c:	10023e1e 	bne	r2,zero,c678 <___svfiprintf_internal_r+0xfb8>
    bd80:	9480100c 	andi	r18,r18,64
    bd84:	90023c26 	beq	r18,zero,c678 <___svfiprintf_internal_r+0xfb8>
    bd88:	dac02317 	ldw	r11,140(sp)
    bd8c:	58800017 	ldw	r2,0(r11)
    bd90:	5ac00104 	addi	r11,r11,4
    bd94:	dac02315 	stw	r11,140(sp)
    bd98:	dac02517 	ldw	r11,148(sp)
    bd9c:	12c0000d 	sth	r11,0(r2)
    bda0:	003e6e06 	br	b75c <___svfiprintf_internal_r+0x9c>
    bda4:	98c00007 	ldb	r3,0(r19)
    bda8:	1a422926 	beq	r3,r9,c650 <___svfiprintf_internal_r+0xf90>
    bdac:	94800414 	ori	r18,r18,16
    bdb0:	003e9206 	br	b7fc <___svfiprintf_internal_r+0x13c>
    bdb4:	94801014 	ori	r18,r18,64
    bdb8:	98c00007 	ldb	r3,0(r19)
    bdbc:	003e8f06 	br	b7fc <___svfiprintf_internal_r+0x13c>
    bdc0:	21003fcc 	andi	r4,r4,255
    bdc4:	2002c71e 	bne	r4,zero,c8e4 <___svfiprintf_internal_r+0x1224>
    bdc8:	9080080c 	andi	r2,r18,32
    bdcc:	10004926 	beq	r2,zero,bef4 <___svfiprintf_internal_r+0x834>
    bdd0:	dac02317 	ldw	r11,140(sp)
    bdd4:	58800117 	ldw	r2,4(r11)
    bdd8:	5f000017 	ldw	fp,0(r11)
    bddc:	5ac00204 	addi	r11,r11,8
    bde0:	dac02315 	stw	r11,140(sp)
    bde4:	1013883a 	mov	r9,r2
    bde8:	10004b16 	blt	r2,zero,bf18 <___svfiprintf_internal_r+0x858>
    bdec:	da801d83 	ldbu	r10,118(sp)
    bdf0:	8001cb16 	blt	r16,zero,c520 <___svfiprintf_internal_r+0xe60>
    bdf4:	00ffdfc4 	movi	r3,-129
    bdf8:	e244b03a 	or	r2,fp,r9
    bdfc:	90e4703a 	and	r18,r18,r3
    be00:	103f4726 	beq	r2,zero,bb20 <___svfiprintf_internal_r+0x460>
    be04:	48008c26 	beq	r9,zero,c038 <___svfiprintf_internal_r+0x978>
    be08:	dc802015 	stw	r18,128(sp)
    be0c:	dc002115 	stw	r16,132(sp)
    be10:	dc401a04 	addi	r17,sp,104
    be14:	e021883a 	mov	r16,fp
    be18:	da002215 	stw	r8,136(sp)
    be1c:	5039883a 	mov	fp,r10
    be20:	4825883a 	mov	r18,r9
    be24:	8009883a 	mov	r4,r16
    be28:	900b883a 	mov	r5,r18
    be2c:	01800284 	movi	r6,10
    be30:	000f883a 	mov	r7,zero
    be34:	000f96c0 	call	f96c <__umoddi3>
    be38:	10800c04 	addi	r2,r2,48
    be3c:	8c7fffc4 	addi	r17,r17,-1
    be40:	8009883a 	mov	r4,r16
    be44:	900b883a 	mov	r5,r18
    be48:	88800005 	stb	r2,0(r17)
    be4c:	01800284 	movi	r6,10
    be50:	000f883a 	mov	r7,zero
    be54:	000f3f40 	call	f3f4 <__udivdi3>
    be58:	1021883a 	mov	r16,r2
    be5c:	10c4b03a 	or	r2,r2,r3
    be60:	1825883a 	mov	r18,r3
    be64:	103fef1e 	bne	r2,zero,be24 <___svfiprintf_internal_r+0x764>
    be68:	dc802017 	ldw	r18,128(sp)
    be6c:	dc002117 	ldw	r16,132(sp)
    be70:	da002217 	ldw	r8,136(sp)
    be74:	e015883a 	mov	r10,fp
    be78:	d8c01e17 	ldw	r3,120(sp)
    be7c:	1c47c83a 	sub	r3,r3,r17
    be80:	d8c02115 	stw	r3,132(sp)
    be84:	003f2a06 	br	bb30 <___svfiprintf_internal_r+0x470>
    be88:	dac02317 	ldw	r11,140(sp)
    be8c:	d8001d85 	stb	zero,118(sp)
    be90:	5c400017 	ldw	r17,0(r11)
    be94:	5f000104 	addi	fp,r11,4
    be98:	88022f26 	beq	r17,zero,c758 <___svfiprintf_internal_r+0x1098>
    be9c:	80022516 	blt	r16,zero,c734 <___svfiprintf_internal_r+0x1074>
    bea0:	800d883a 	mov	r6,r16
    bea4:	000b883a 	mov	r5,zero
    bea8:	8809883a 	mov	r4,r17
    beac:	da002c15 	stw	r8,176(sp)
    beb0:	0009e280 	call	9e28 <memchr>
    beb4:	da002c17 	ldw	r8,176(sp)
    beb8:	10026426 	beq	r2,zero,c84c <___svfiprintf_internal_r+0x118c>
    bebc:	1445c83a 	sub	r2,r2,r17
    bec0:	d8802115 	stw	r2,132(sp)
    bec4:	da801d83 	ldbu	r10,118(sp)
    bec8:	df002315 	stw	fp,140(sp)
    becc:	0021883a 	mov	r16,zero
    bed0:	003f1706 	br	bb30 <___svfiprintf_internal_r+0x470>
    bed4:	94800814 	ori	r18,r18,32
    bed8:	98c00007 	ldb	r3,0(r19)
    bedc:	003e4706 	br	b7fc <___svfiprintf_internal_r+0x13c>
    bee0:	21003fcc 	andi	r4,r4,255
    bee4:	2002701e 	bne	r4,zero,c8a8 <___svfiprintf_internal_r+0x11e8>
    bee8:	94800414 	ori	r18,r18,16
    beec:	9080080c 	andi	r2,r18,32
    bef0:	103fb71e 	bne	r2,zero,bdd0 <___svfiprintf_internal_r+0x710>
    bef4:	9080040c 	andi	r2,r18,16
    bef8:	1001ab26 	beq	r2,zero,c5a8 <___svfiprintf_internal_r+0xee8>
    befc:	dac02317 	ldw	r11,140(sp)
    bf00:	5f000017 	ldw	fp,0(r11)
    bf04:	5ac00104 	addi	r11,r11,4
    bf08:	dac02315 	stw	r11,140(sp)
    bf0c:	e013d7fa 	srai	r9,fp,31
    bf10:	4805883a 	mov	r2,r9
    bf14:	103fb50e 	bge	r2,zero,bdec <___svfiprintf_internal_r+0x72c>
    bf18:	0739c83a 	sub	fp,zero,fp
    bf1c:	02800b44 	movi	r10,45
    bf20:	e004c03a 	cmpne	r2,fp,zero
    bf24:	0253c83a 	sub	r9,zero,r9
    bf28:	da801d85 	stb	r10,118(sp)
    bf2c:	4893c83a 	sub	r9,r9,r2
    bf30:	80023016 	blt	r16,zero,c7f4 <___svfiprintf_internal_r+0x1134>
    bf34:	00bfdfc4 	movi	r2,-129
    bf38:	90a4703a 	and	r18,r18,r2
    bf3c:	483fb21e 	bne	r9,zero,be08 <___svfiprintf_internal_r+0x748>
    bf40:	00003d06 	br	c038 <___svfiprintf_internal_r+0x978>
    bf44:	9817883a 	mov	r11,r19
    bf48:	d8002415 	stw	zero,144(sp)
    bf4c:	18bff404 	addi	r2,r3,-48
    bf50:	0019883a 	mov	r12,zero
    bf54:	58c00007 	ldb	r3,0(r11)
    bf58:	630002a4 	muli	r12,r12,10
    bf5c:	9cc00044 	addi	r19,r19,1
    bf60:	9817883a 	mov	r11,r19
    bf64:	1319883a 	add	r12,r2,r12
    bf68:	18bff404 	addi	r2,r3,-48
    bf6c:	30bff92e 	bgeu	r6,r2,bf54 <___svfiprintf_internal_r+0x894>
    bf70:	db002415 	stw	r12,144(sp)
    bf74:	18bff804 	addi	r2,r3,-32
    bf78:	28be232e 	bgeu	r5,r2,b808 <___svfiprintf_internal_r+0x148>
    bf7c:	21003fcc 	andi	r4,r4,255
    bf80:	20024b1e 	bne	r4,zero,c8b0 <___svfiprintf_internal_r+0x11f0>
    bf84:	1800d626 	beq	r3,zero,c2e0 <___svfiprintf_internal_r+0xc20>
    bf88:	02c00044 	movi	r11,1
    bf8c:	dac02015 	stw	r11,128(sp)
    bf90:	d8c01005 	stb	r3,64(sp)
    bf94:	d8001d85 	stb	zero,118(sp)
    bf98:	dac02115 	stw	r11,132(sp)
    bf9c:	dc401004 	addi	r17,sp,64
    bfa0:	003f2606 	br	bc3c <___svfiprintf_internal_r+0x57c>
    bfa4:	94802014 	ori	r18,r18,128
    bfa8:	98c00007 	ldb	r3,0(r19)
    bfac:	003e1306 	br	b7fc <___svfiprintf_internal_r+0x13c>
    bfb0:	98c00007 	ldb	r3,0(r19)
    bfb4:	9ac00044 	addi	r11,r19,1
    bfb8:	1a822b26 	beq	r3,r10,c868 <___svfiprintf_internal_r+0x11a8>
    bfbc:	18bff404 	addi	r2,r3,-48
    bfc0:	0021883a 	mov	r16,zero
    bfc4:	30821e36 	bltu	r6,r2,c840 <___svfiprintf_internal_r+0x1180>
    bfc8:	58c00007 	ldb	r3,0(r11)
    bfcc:	840002a4 	muli	r16,r16,10
    bfd0:	5cc00044 	addi	r19,r11,1
    bfd4:	9817883a 	mov	r11,r19
    bfd8:	80a1883a 	add	r16,r16,r2
    bfdc:	18bff404 	addi	r2,r3,-48
    bfe0:	30bff92e 	bgeu	r6,r2,bfc8 <___svfiprintf_internal_r+0x908>
    bfe4:	803e060e 	bge	r16,zero,b800 <___svfiprintf_internal_r+0x140>
    bfe8:	043fffc4 	movi	r16,-1
    bfec:	003e0406 	br	b800 <___svfiprintf_internal_r+0x140>
    bff0:	21003fcc 	andi	r4,r4,255
    bff4:	2002371e 	bne	r4,zero,c8d4 <___svfiprintf_internal_r+0x1214>
    bff8:	94800414 	ori	r18,r18,16
    bffc:	9080080c 	andi	r2,r18,32
    c000:	103ebb1e 	bne	r2,zero,baf0 <___svfiprintf_internal_r+0x430>
    c004:	9080040c 	andi	r2,r18,16
    c008:	10013b26 	beq	r2,zero,c4f8 <___svfiprintf_internal_r+0xe38>
    c00c:	dac02317 	ldw	r11,140(sp)
    c010:	d8001d85 	stb	zero,118(sp)
    c014:	0013883a 	mov	r9,zero
    c018:	58800104 	addi	r2,r11,4
    c01c:	5f000017 	ldw	fp,0(r11)
    c020:	80013d16 	blt	r16,zero,c518 <___svfiprintf_internal_r+0xe58>
    c024:	00ffdfc4 	movi	r3,-129
    c028:	d8802315 	stw	r2,140(sp)
    c02c:	90e4703a 	and	r18,r18,r3
    c030:	0015883a 	mov	r10,zero
    c034:	e03eba26 	beq	fp,zero,bb20 <___svfiprintf_internal_r+0x460>
    c038:	00800244 	movi	r2,9
    c03c:	173f7236 	bltu	r2,fp,be08 <___svfiprintf_internal_r+0x748>
    c040:	dac02b17 	ldw	r11,172(sp)
    c044:	e7000c04 	addi	fp,fp,48
    c048:	df0019c5 	stb	fp,103(sp)
    c04c:	dac02115 	stw	r11,132(sp)
    c050:	dc4019c4 	addi	r17,sp,103
    c054:	003eb606 	br	bb30 <___svfiprintf_internal_r+0x470>
    c058:	21003fcc 	andi	r4,r4,255
    c05c:	20021f1e 	bne	r4,zero,c8dc <___svfiprintf_internal_r+0x121c>
    c060:	94800414 	ori	r18,r18,16
    c064:	9080080c 	andi	r2,r18,32
    c068:	103ec51e 	bne	r2,zero,bb80 <___svfiprintf_internal_r+0x4c0>
    c06c:	9080040c 	andi	r2,r18,16
    c070:	10016926 	beq	r2,zero,c618 <___svfiprintf_internal_r+0xf58>
    c074:	dac02317 	ldw	r11,140(sp)
    c078:	d8001d85 	stb	zero,118(sp)
    c07c:	0013883a 	mov	r9,zero
    c080:	58800104 	addi	r2,r11,4
    c084:	5f000017 	ldw	fp,0(r11)
    c088:	80016b16 	blt	r16,zero,c638 <___svfiprintf_internal_r+0xf78>
    c08c:	00ffdfc4 	movi	r3,-129
    c090:	d8802315 	stw	r2,140(sp)
    c094:	90e4703a 	and	r18,r18,r3
    c098:	e03ec41e 	bne	fp,zero,bbac <___svfiprintf_internal_r+0x4ec>
    c09c:	0015883a 	mov	r10,zero
    c0a0:	8001c226 	beq	r16,zero,c7ac <___svfiprintf_internal_r+0x10ec>
    c0a4:	0039883a 	mov	fp,zero
    c0a8:	0013883a 	mov	r9,zero
    c0ac:	003ec006 	br	bbb0 <___svfiprintf_internal_r+0x4f0>
    c0b0:	d8c01c17 	ldw	r3,112(sp)
    c0b4:	d8801b17 	ldw	r2,108(sp)
    c0b8:	d9001d87 	ldb	r4,118(sp)
    c0bc:	20000b26 	beq	r4,zero,c0ec <___svfiprintf_internal_r+0xa2c>
    c0c0:	d9001d84 	addi	r4,sp,118
    c0c4:	18c00044 	addi	r3,r3,1
    c0c8:	10800044 	addi	r2,r2,1
    c0cc:	41000015 	stw	r4,0(r8)
    c0d0:	01000044 	movi	r4,1
    c0d4:	41000115 	stw	r4,4(r8)
    c0d8:	d8c01c15 	stw	r3,112(sp)
    c0dc:	d8801b15 	stw	r2,108(sp)
    c0e0:	010001c4 	movi	r4,7
    c0e4:	2080e116 	blt	r4,r2,c46c <___svfiprintf_internal_r+0xdac>
    c0e8:	42000204 	addi	r8,r8,8
    c0ec:	dac02217 	ldw	r11,136(sp)
    c0f0:	58000b26 	beq	r11,zero,c120 <___svfiprintf_internal_r+0xa60>
    c0f4:	d9001d04 	addi	r4,sp,116
    c0f8:	18c00084 	addi	r3,r3,2
    c0fc:	10800044 	addi	r2,r2,1
    c100:	41000015 	stw	r4,0(r8)
    c104:	01000084 	movi	r4,2
    c108:	41000115 	stw	r4,4(r8)
    c10c:	d8c01c15 	stw	r3,112(sp)
    c110:	d8801b15 	stw	r2,108(sp)
    c114:	010001c4 	movi	r4,7
    c118:	2080dd16 	blt	r4,r2,c490 <___svfiprintf_internal_r+0xdd0>
    c11c:	42000204 	addi	r8,r8,8
    c120:	dac02617 	ldw	r11,152(sp)
    c124:	01002004 	movi	r4,128
    c128:	59008426 	beq	r11,r4,c33c <___svfiprintf_internal_r+0xc7c>
    c12c:	dac02117 	ldw	r11,132(sp)
    c130:	82e1c83a 	sub	r16,r16,r11
    c134:	0400270e 	bge	zero,r16,c1d4 <___svfiprintf_internal_r+0xb14>
    c138:	01c00404 	movi	r7,16
    c13c:	3c016a0e 	bge	r7,r16,c6e8 <___svfiprintf_internal_r+0x1028>
    c140:	014000b4 	movhi	r5,2
    c144:	297dca04 	addi	r5,r5,-2264
    c148:	d9402215 	stw	r5,136(sp)
    c14c:	070001c4 	movi	fp,7
    c150:	00000306 	br	c160 <___svfiprintf_internal_r+0xaa0>
    c154:	843ffc04 	addi	r16,r16,-16
    c158:	42000204 	addi	r8,r8,8
    c15c:	3c00130e 	bge	r7,r16,c1ac <___svfiprintf_internal_r+0xaec>
    c160:	18c00404 	addi	r3,r3,16
    c164:	10800044 	addi	r2,r2,1
    c168:	45000015 	stw	r20,0(r8)
    c16c:	41c00115 	stw	r7,4(r8)
    c170:	d8c01c15 	stw	r3,112(sp)
    c174:	d8801b15 	stw	r2,108(sp)
    c178:	e0bff60e 	bge	fp,r2,c154 <___svfiprintf_internal_r+0xa94>
    c17c:	d9801a04 	addi	r6,sp,104
    c180:	b80b883a 	mov	r5,r23
    c184:	a809883a 	mov	r4,r21
    c188:	d9c02c15 	stw	r7,176(sp)
    c18c:	000b4f00 	call	b4f0 <__ssprint_r>
    c190:	d9c02c17 	ldw	r7,176(sp)
    c194:	1000581e 	bne	r2,zero,c2f8 <___svfiprintf_internal_r+0xc38>
    c198:	843ffc04 	addi	r16,r16,-16
    c19c:	d8c01c17 	ldw	r3,112(sp)
    c1a0:	d8801b17 	ldw	r2,108(sp)
    c1a4:	d811883a 	mov	r8,sp
    c1a8:	3c3fed16 	blt	r7,r16,c160 <___svfiprintf_internal_r+0xaa0>
    c1ac:	dac02217 	ldw	r11,136(sp)
    c1b0:	1c07883a 	add	r3,r3,r16
    c1b4:	10800044 	addi	r2,r2,1
    c1b8:	42c00015 	stw	r11,0(r8)
    c1bc:	44000115 	stw	r16,4(r8)
    c1c0:	d8c01c15 	stw	r3,112(sp)
    c1c4:	d8801b15 	stw	r2,108(sp)
    c1c8:	010001c4 	movi	r4,7
    c1cc:	20809e16 	blt	r4,r2,c448 <___svfiprintf_internal_r+0xd88>
    c1d0:	42000204 	addi	r8,r8,8
    c1d4:	dac02117 	ldw	r11,132(sp)
    c1d8:	10800044 	addi	r2,r2,1
    c1dc:	44400015 	stw	r17,0(r8)
    c1e0:	58c7883a 	add	r3,r11,r3
    c1e4:	42c00115 	stw	r11,4(r8)
    c1e8:	d8c01c15 	stw	r3,112(sp)
    c1ec:	d8801b15 	stw	r2,108(sp)
    c1f0:	010001c4 	movi	r4,7
    c1f4:	20807f16 	blt	r4,r2,c3f4 <___svfiprintf_internal_r+0xd34>
    c1f8:	42000204 	addi	r8,r8,8
    c1fc:	9480010c 	andi	r18,r18,4
    c200:	90002926 	beq	r18,zero,c2a8 <___svfiprintf_internal_r+0xbe8>
    c204:	dac02417 	ldw	r11,144(sp)
    c208:	d8802017 	ldw	r2,128(sp)
    c20c:	58a1c83a 	sub	r16,r11,r2
    c210:	0400250e 	bge	zero,r16,c2a8 <___svfiprintf_internal_r+0xbe8>
    c214:	04400404 	movi	r17,16
    c218:	d8801b17 	ldw	r2,108(sp)
    c21c:	8c017c0e 	bge	r17,r16,c810 <___svfiprintf_internal_r+0x1150>
    c220:	014000b4 	movhi	r5,2
    c224:	297dce04 	addi	r5,r5,-2248
    c228:	d9402815 	stw	r5,160(sp)
    c22c:	048001c4 	movi	r18,7
    c230:	00000306 	br	c240 <___svfiprintf_internal_r+0xb80>
    c234:	843ffc04 	addi	r16,r16,-16
    c238:	42000204 	addi	r8,r8,8
    c23c:	8c00110e 	bge	r17,r16,c284 <___svfiprintf_internal_r+0xbc4>
    c240:	18c00404 	addi	r3,r3,16
    c244:	10800044 	addi	r2,r2,1
    c248:	45800015 	stw	r22,0(r8)
    c24c:	44400115 	stw	r17,4(r8)
    c250:	d8c01c15 	stw	r3,112(sp)
    c254:	d8801b15 	stw	r2,108(sp)
    c258:	90bff60e 	bge	r18,r2,c234 <___svfiprintf_internal_r+0xb74>
    c25c:	d9801a04 	addi	r6,sp,104
    c260:	b80b883a 	mov	r5,r23
    c264:	a809883a 	mov	r4,r21
    c268:	000b4f00 	call	b4f0 <__ssprint_r>
    c26c:	1000221e 	bne	r2,zero,c2f8 <___svfiprintf_internal_r+0xc38>
    c270:	843ffc04 	addi	r16,r16,-16
    c274:	d8c01c17 	ldw	r3,112(sp)
    c278:	d8801b17 	ldw	r2,108(sp)
    c27c:	d811883a 	mov	r8,sp
    c280:	8c3fef16 	blt	r17,r16,c240 <___svfiprintf_internal_r+0xb80>
    c284:	dac02817 	ldw	r11,160(sp)
    c288:	1c07883a 	add	r3,r3,r16
    c28c:	10800044 	addi	r2,r2,1
    c290:	42c00015 	stw	r11,0(r8)
    c294:	44000115 	stw	r16,4(r8)
    c298:	d8c01c15 	stw	r3,112(sp)
    c29c:	d8801b15 	stw	r2,108(sp)
    c2a0:	010001c4 	movi	r4,7
    c2a4:	2080aa16 	blt	r4,r2,c550 <___svfiprintf_internal_r+0xe90>
    c2a8:	d8802417 	ldw	r2,144(sp)
    c2ac:	dac02017 	ldw	r11,128(sp)
    c2b0:	12c0010e 	bge	r2,r11,c2b8 <___svfiprintf_internal_r+0xbf8>
    c2b4:	5805883a 	mov	r2,r11
    c2b8:	dac02517 	ldw	r11,148(sp)
    c2bc:	5897883a 	add	r11,r11,r2
    c2c0:	dac02515 	stw	r11,148(sp)
    c2c4:	1800531e 	bne	r3,zero,c414 <___svfiprintf_internal_r+0xd54>
    c2c8:	98800007 	ldb	r2,0(r19)
    c2cc:	d8001b15 	stw	zero,108(sp)
    c2d0:	d811883a 	mov	r8,sp
    c2d4:	103d231e 	bne	r2,zero,b764 <___svfiprintf_internal_r+0xa4>
    c2d8:	9823883a 	mov	r17,r19
    c2dc:	003d3906 	br	b7c4 <___svfiprintf_internal_r+0x104>
    c2e0:	d8801c17 	ldw	r2,112(sp)
    c2e4:	10000426 	beq	r2,zero,c2f8 <___svfiprintf_internal_r+0xc38>
    c2e8:	d9402717 	ldw	r5,156(sp)
    c2ec:	d9002a17 	ldw	r4,168(sp)
    c2f0:	d9801a04 	addi	r6,sp,104
    c2f4:	000b4f00 	call	b4f0 <__ssprint_r>
    c2f8:	dac02717 	ldw	r11,156(sp)
    c2fc:	d8802517 	ldw	r2,148(sp)
    c300:	58c0030b 	ldhu	r3,12(r11)
    c304:	18c0100c 	andi	r3,r3,64
    c308:	1801381e 	bne	r3,zero,c7ec <___svfiprintf_internal_r+0x112c>
    c30c:	dfc03717 	ldw	ra,220(sp)
    c310:	df003617 	ldw	fp,216(sp)
    c314:	ddc03517 	ldw	r23,212(sp)
    c318:	dd803417 	ldw	r22,208(sp)
    c31c:	dd403317 	ldw	r21,204(sp)
    c320:	dd003217 	ldw	r20,200(sp)
    c324:	dcc03117 	ldw	r19,196(sp)
    c328:	dc803017 	ldw	r18,192(sp)
    c32c:	dc402f17 	ldw	r17,188(sp)
    c330:	dc002e17 	ldw	r16,184(sp)
    c334:	dec03804 	addi	sp,sp,224
    c338:	f800283a 	ret
    c33c:	dac02417 	ldw	r11,144(sp)
    c340:	d9002017 	ldw	r4,128(sp)
    c344:	5939c83a 	sub	fp,r11,r4
    c348:	073f780e 	bge	zero,fp,c12c <___svfiprintf_internal_r+0xa6c>
    c34c:	02400404 	movi	r9,16
    c350:	4f01370e 	bge	r9,fp,c830 <___svfiprintf_internal_r+0x1170>
    c354:	02c000b4 	movhi	r11,2
    c358:	5afdca04 	addi	r11,r11,-2264
    c35c:	dac02215 	stw	r11,136(sp)
    c360:	028001c4 	movi	r10,7
    c364:	00000306 	br	c374 <___svfiprintf_internal_r+0xcb4>
    c368:	e73ffc04 	addi	fp,fp,-16
    c36c:	42000204 	addi	r8,r8,8
    c370:	4f00150e 	bge	r9,fp,c3c8 <___svfiprintf_internal_r+0xd08>
    c374:	18c00404 	addi	r3,r3,16
    c378:	10800044 	addi	r2,r2,1
    c37c:	45000015 	stw	r20,0(r8)
    c380:	42400115 	stw	r9,4(r8)
    c384:	d8c01c15 	stw	r3,112(sp)
    c388:	d8801b15 	stw	r2,108(sp)
    c38c:	50bff60e 	bge	r10,r2,c368 <___svfiprintf_internal_r+0xca8>
    c390:	d9801a04 	addi	r6,sp,104
    c394:	b80b883a 	mov	r5,r23
    c398:	a809883a 	mov	r4,r21
    c39c:	da402c15 	stw	r9,176(sp)
    c3a0:	da802d15 	stw	r10,180(sp)
    c3a4:	000b4f00 	call	b4f0 <__ssprint_r>
    c3a8:	da402c17 	ldw	r9,176(sp)
    c3ac:	da802d17 	ldw	r10,180(sp)
    c3b0:	103fd11e 	bne	r2,zero,c2f8 <___svfiprintf_internal_r+0xc38>
    c3b4:	e73ffc04 	addi	fp,fp,-16
    c3b8:	d8c01c17 	ldw	r3,112(sp)
    c3bc:	d8801b17 	ldw	r2,108(sp)
    c3c0:	d811883a 	mov	r8,sp
    c3c4:	4f3feb16 	blt	r9,fp,c374 <___svfiprintf_internal_r+0xcb4>
    c3c8:	dac02217 	ldw	r11,136(sp)
    c3cc:	1f07883a 	add	r3,r3,fp
    c3d0:	10800044 	addi	r2,r2,1
    c3d4:	42c00015 	stw	r11,0(r8)
    c3d8:	47000115 	stw	fp,4(r8)
    c3dc:	d8c01c15 	stw	r3,112(sp)
    c3e0:	d8801b15 	stw	r2,108(sp)
    c3e4:	010001c4 	movi	r4,7
    c3e8:	2080b616 	blt	r4,r2,c6c4 <___svfiprintf_internal_r+0x1004>
    c3ec:	42000204 	addi	r8,r8,8
    c3f0:	003f4e06 	br	c12c <___svfiprintf_internal_r+0xa6c>
    c3f4:	d9801a04 	addi	r6,sp,104
    c3f8:	b80b883a 	mov	r5,r23
    c3fc:	a809883a 	mov	r4,r21
    c400:	000b4f00 	call	b4f0 <__ssprint_r>
    c404:	103fbc1e 	bne	r2,zero,c2f8 <___svfiprintf_internal_r+0xc38>
    c408:	d8c01c17 	ldw	r3,112(sp)
    c40c:	d811883a 	mov	r8,sp
    c410:	003f7a06 	br	c1fc <___svfiprintf_internal_r+0xb3c>
    c414:	d9801a04 	addi	r6,sp,104
    c418:	b80b883a 	mov	r5,r23
    c41c:	a809883a 	mov	r4,r21
    c420:	000b4f00 	call	b4f0 <__ssprint_r>
    c424:	103fa826 	beq	r2,zero,c2c8 <___svfiprintf_internal_r+0xc08>
    c428:	003fb306 	br	c2f8 <___svfiprintf_internal_r+0xc38>
    c42c:	d9801a04 	addi	r6,sp,104
    c430:	b80b883a 	mov	r5,r23
    c434:	a809883a 	mov	r4,r21
    c438:	000b4f00 	call	b4f0 <__ssprint_r>
    c43c:	103fae1e 	bne	r2,zero,c2f8 <___svfiprintf_internal_r+0xc38>
    c440:	d811883a 	mov	r8,sp
    c444:	003cdc06 	br	b7b8 <___svfiprintf_internal_r+0xf8>
    c448:	d9801a04 	addi	r6,sp,104
    c44c:	b80b883a 	mov	r5,r23
    c450:	a809883a 	mov	r4,r21
    c454:	000b4f00 	call	b4f0 <__ssprint_r>
    c458:	103fa71e 	bne	r2,zero,c2f8 <___svfiprintf_internal_r+0xc38>
    c45c:	d8c01c17 	ldw	r3,112(sp)
    c460:	d8801b17 	ldw	r2,108(sp)
    c464:	d811883a 	mov	r8,sp
    c468:	003f5a06 	br	c1d4 <___svfiprintf_internal_r+0xb14>
    c46c:	d9801a04 	addi	r6,sp,104
    c470:	b80b883a 	mov	r5,r23
    c474:	a809883a 	mov	r4,r21
    c478:	000b4f00 	call	b4f0 <__ssprint_r>
    c47c:	103f9e1e 	bne	r2,zero,c2f8 <___svfiprintf_internal_r+0xc38>
    c480:	d8c01c17 	ldw	r3,112(sp)
    c484:	d8801b17 	ldw	r2,108(sp)
    c488:	d811883a 	mov	r8,sp
    c48c:	003f1706 	br	c0ec <___svfiprintf_internal_r+0xa2c>
    c490:	d9801a04 	addi	r6,sp,104
    c494:	b80b883a 	mov	r5,r23
    c498:	a809883a 	mov	r4,r21
    c49c:	000b4f00 	call	b4f0 <__ssprint_r>
    c4a0:	103f951e 	bne	r2,zero,c2f8 <___svfiprintf_internal_r+0xc38>
    c4a4:	d8c01c17 	ldw	r3,112(sp)
    c4a8:	d8801b17 	ldw	r2,108(sp)
    c4ac:	d811883a 	mov	r8,sp
    c4b0:	003f1b06 	br	c120 <___svfiprintf_internal_r+0xa60>
    c4b4:	d8001d85 	stb	zero,118(sp)
    c4b8:	80007b16 	blt	r16,zero,c6a8 <___svfiprintf_internal_r+0xfe8>
    c4bc:	00ffdfc4 	movi	r3,-129
    c4c0:	e244b03a 	or	r2,fp,r9
    c4c4:	90e4703a 	and	r18,r18,r3
    c4c8:	103d7026 	beq	r2,zero,ba8c <___svfiprintf_internal_r+0x3cc>
    c4cc:	0015883a 	mov	r10,zero
    c4d0:	003d7206 	br	ba9c <___svfiprintf_internal_r+0x3dc>
    c4d4:	d9801a04 	addi	r6,sp,104
    c4d8:	b80b883a 	mov	r5,r23
    c4dc:	a809883a 	mov	r4,r21
    c4e0:	000b4f00 	call	b4f0 <__ssprint_r>
    c4e4:	103f841e 	bne	r2,zero,c2f8 <___svfiprintf_internal_r+0xc38>
    c4e8:	d8c01c17 	ldw	r3,112(sp)
    c4ec:	d8801b17 	ldw	r2,108(sp)
    c4f0:	d811883a 	mov	r8,sp
    c4f4:	003ef006 	br	c0b8 <___svfiprintf_internal_r+0x9f8>
    c4f8:	9080100c 	andi	r2,r18,64
    c4fc:	d8001d85 	stb	zero,118(sp)
    c500:	dac02317 	ldw	r11,140(sp)
    c504:	10008126 	beq	r2,zero,c70c <___svfiprintf_internal_r+0x104c>
    c508:	58800104 	addi	r2,r11,4
    c50c:	5f00000b 	ldhu	fp,0(r11)
    c510:	0013883a 	mov	r9,zero
    c514:	803ec30e 	bge	r16,zero,c024 <___svfiprintf_internal_r+0x964>
    c518:	d8802315 	stw	r2,140(sp)
    c51c:	0015883a 	mov	r10,zero
    c520:	e244b03a 	or	r2,fp,r9
    c524:	103e371e 	bne	r2,zero,be04 <___svfiprintf_internal_r+0x744>
    c528:	00800044 	movi	r2,1
    c52c:	10803fcc 	andi	r2,r2,255
    c530:	00c00044 	movi	r3,1
    c534:	10c06126 	beq	r2,r3,c6bc <___svfiprintf_internal_r+0xffc>
    c538:	00c00084 	movi	r3,2
    c53c:	10fd5526 	beq	r2,r3,ba94 <___svfiprintf_internal_r+0x3d4>
    c540:	003ed806 	br	c0a4 <___svfiprintf_internal_r+0x9e4>
    c544:	d8802315 	stw	r2,140(sp)
    c548:	98c00007 	ldb	r3,0(r19)
    c54c:	003cab06 	br	b7fc <___svfiprintf_internal_r+0x13c>
    c550:	d9801a04 	addi	r6,sp,104
    c554:	b80b883a 	mov	r5,r23
    c558:	a809883a 	mov	r4,r21
    c55c:	000b4f00 	call	b4f0 <__ssprint_r>
    c560:	103f651e 	bne	r2,zero,c2f8 <___svfiprintf_internal_r+0xc38>
    c564:	d8c01c17 	ldw	r3,112(sp)
    c568:	003f4f06 	br	c2a8 <___svfiprintf_internal_r+0xbe8>
    c56c:	008000b4 	movhi	r2,2
    c570:	10bd6204 	addi	r2,r2,-2680
    c574:	d8802915 	stw	r2,164(sp)
    c578:	003d4406 	br	ba8c <___svfiprintf_internal_r+0x3cc>
    c57c:	dac02317 	ldw	r11,140(sp)
    c580:	58800017 	ldw	r2,0(r11)
    c584:	dac02517 	ldw	r11,148(sp)
    c588:	5807d7fa 	srai	r3,r11,31
    c58c:	dac02317 	ldw	r11,140(sp)
    c590:	10c00115 	stw	r3,4(r2)
    c594:	5ac00104 	addi	r11,r11,4
    c598:	dac02315 	stw	r11,140(sp)
    c59c:	dac02517 	ldw	r11,148(sp)
    c5a0:	12c00015 	stw	r11,0(r2)
    c5a4:	003c6d06 	br	b75c <___svfiprintf_internal_r+0x9c>
    c5a8:	9080100c 	andi	r2,r18,64
    c5ac:	dac02317 	ldw	r11,140(sp)
    c5b0:	103e5326 	beq	r2,zero,bf00 <___svfiprintf_internal_r+0x840>
    c5b4:	5f00000f 	ldh	fp,0(r11)
    c5b8:	5ac00104 	addi	r11,r11,4
    c5bc:	dac02315 	stw	r11,140(sp)
    c5c0:	e013d7fa 	srai	r9,fp,31
    c5c4:	4805883a 	mov	r2,r9
    c5c8:	003e0706 	br	bde8 <___svfiprintf_internal_r+0x728>
    c5cc:	00800c04 	movi	r2,48
    c5d0:	d8801d05 	stb	r2,116(sp)
    c5d4:	d8c01d45 	stb	r3,117(sp)
    c5d8:	d8001d85 	stb	zero,118(sp)
    c5dc:	90800094 	ori	r2,r18,2
    c5e0:	80008f16 	blt	r16,zero,c820 <___svfiprintf_internal_r+0x1160>
    c5e4:	00bfdfc4 	movi	r2,-129
    c5e8:	90a4703a 	and	r18,r18,r2
    c5ec:	94800094 	ori	r18,r18,2
    c5f0:	0015883a 	mov	r10,zero
    c5f4:	003d2906 	br	ba9c <___svfiprintf_internal_r+0x3dc>
    c5f8:	98c00007 	ldb	r3,0(r19)
    c5fc:	003c7f06 	br	b7fc <___svfiprintf_internal_r+0x13c>
    c600:	dac02317 	ldw	r11,140(sp)
    c604:	0013883a 	mov	r9,zero
    c608:	5f000017 	ldw	fp,0(r11)
    c60c:	5ac00104 	addi	r11,r11,4
    c610:	dac02315 	stw	r11,140(sp)
    c614:	003d1506 	br	ba6c <___svfiprintf_internal_r+0x3ac>
    c618:	9080100c 	andi	r2,r18,64
    c61c:	d8001d85 	stb	zero,118(sp)
    c620:	dac02317 	ldw	r11,140(sp)
    c624:	10003426 	beq	r2,zero,c6f8 <___svfiprintf_internal_r+0x1038>
    c628:	58800104 	addi	r2,r11,4
    c62c:	5f00000b 	ldhu	fp,0(r11)
    c630:	0013883a 	mov	r9,zero
    c634:	803e950e 	bge	r16,zero,c08c <___svfiprintf_internal_r+0x9cc>
    c638:	e246b03a 	or	r3,fp,r9
    c63c:	d8802315 	stw	r2,140(sp)
    c640:	183d5a1e 	bne	r3,zero,bbac <___svfiprintf_internal_r+0x4ec>
    c644:	0015883a 	mov	r10,zero
    c648:	0005883a 	mov	r2,zero
    c64c:	003fb706 	br	c52c <___svfiprintf_internal_r+0xe6c>
    c650:	98c00043 	ldbu	r3,1(r19)
    c654:	94800814 	ori	r18,r18,32
    c658:	9cc00044 	addi	r19,r19,1
    c65c:	18c03fcc 	andi	r3,r3,255
    c660:	18c0201c 	xori	r3,r3,128
    c664:	18ffe004 	addi	r3,r3,-128
    c668:	003c6406 	br	b7fc <___svfiprintf_internal_r+0x13c>
    c66c:	d8c02315 	stw	r3,140(sp)
    c670:	0015883a 	mov	r10,zero
    c674:	003faa06 	br	c520 <___svfiprintf_internal_r+0xe60>
    c678:	dac02317 	ldw	r11,140(sp)
    c67c:	58800017 	ldw	r2,0(r11)
    c680:	5ac00104 	addi	r11,r11,4
    c684:	dac02315 	stw	r11,140(sp)
    c688:	dac02517 	ldw	r11,148(sp)
    c68c:	12c00015 	stw	r11,0(r2)
    c690:	003c3206 	br	b75c <___svfiprintf_internal_r+0x9c>
    c694:	010000b4 	movhi	r4,2
    c698:	213d6204 	addi	r4,r4,-2680
    c69c:	d9002915 	stw	r4,164(sp)
    c6a0:	d8c02315 	stw	r3,140(sp)
    c6a4:	1025883a 	mov	r18,r2
    c6a8:	e244b03a 	or	r2,fp,r9
    c6ac:	103f871e 	bne	r2,zero,c4cc <___svfiprintf_internal_r+0xe0c>
    c6b0:	0015883a 	mov	r10,zero
    c6b4:	00800084 	movi	r2,2
    c6b8:	003f9c06 	br	c52c <___svfiprintf_internal_r+0xe6c>
    c6bc:	0039883a 	mov	fp,zero
    c6c0:	003e5f06 	br	c040 <___svfiprintf_internal_r+0x980>
    c6c4:	d9801a04 	addi	r6,sp,104
    c6c8:	b80b883a 	mov	r5,r23
    c6cc:	a809883a 	mov	r4,r21
    c6d0:	000b4f00 	call	b4f0 <__ssprint_r>
    c6d4:	103f081e 	bne	r2,zero,c2f8 <___svfiprintf_internal_r+0xc38>
    c6d8:	d8c01c17 	ldw	r3,112(sp)
    c6dc:	d8801b17 	ldw	r2,108(sp)
    c6e0:	d811883a 	mov	r8,sp
    c6e4:	003e9106 	br	c12c <___svfiprintf_internal_r+0xa6c>
    c6e8:	010000b4 	movhi	r4,2
    c6ec:	213dca04 	addi	r4,r4,-2264
    c6f0:	d9002215 	stw	r4,136(sp)
    c6f4:	003ead06 	br	c1ac <___svfiprintf_internal_r+0xaec>
    c6f8:	58800104 	addi	r2,r11,4
    c6fc:	5f000017 	ldw	fp,0(r11)
    c700:	0013883a 	mov	r9,zero
    c704:	803e610e 	bge	r16,zero,c08c <___svfiprintf_internal_r+0x9cc>
    c708:	003fcb06 	br	c638 <___svfiprintf_internal_r+0xf78>
    c70c:	58800104 	addi	r2,r11,4
    c710:	5f000017 	ldw	fp,0(r11)
    c714:	0013883a 	mov	r9,zero
    c718:	803e420e 	bge	r16,zero,c024 <___svfiprintf_internal_r+0x964>
    c71c:	003f7e06 	br	c518 <___svfiprintf_internal_r+0xe58>
    c720:	5f000017 	ldw	fp,0(r11)
    c724:	5ac00104 	addi	r11,r11,4
    c728:	0013883a 	mov	r9,zero
    c72c:	dac02315 	stw	r11,140(sp)
    c730:	003cce06 	br	ba6c <___svfiprintf_internal_r+0x3ac>
    c734:	8809883a 	mov	r4,r17
    c738:	da002c15 	stw	r8,176(sp)
    c73c:	000b4580 	call	b458 <strlen>
    c740:	d8802115 	stw	r2,132(sp)
    c744:	da801d83 	ldbu	r10,118(sp)
    c748:	df002315 	stw	fp,140(sp)
    c74c:	0021883a 	mov	r16,zero
    c750:	da002c17 	ldw	r8,176(sp)
    c754:	003cf606 	br	bb30 <___svfiprintf_internal_r+0x470>
    c758:	00800184 	movi	r2,6
    c75c:	1400012e 	bgeu	r2,r16,c764 <___svfiprintf_internal_r+0x10a4>
    c760:	1021883a 	mov	r16,r2
    c764:	dc002115 	stw	r16,132(sp)
    c768:	8005883a 	mov	r2,r16
    c76c:	80003c16 	blt	r16,zero,c860 <___svfiprintf_internal_r+0x11a0>
    c770:	044000b4 	movhi	r17,2
    c774:	d8802015 	stw	r2,128(sp)
    c778:	df002315 	stw	fp,140(sp)
    c77c:	8c7d6704 	addi	r17,r17,-2660
    c780:	003d2e06 	br	bc3c <___svfiprintf_internal_r+0x57c>
    c784:	04001004 	movi	r16,64
    c788:	800b883a 	mov	r5,r16
    c78c:	000961c0 	call	961c <_malloc_r>
    c790:	dac02717 	ldw	r11,156(sp)
    c794:	58800015 	stw	r2,0(r11)
    c798:	58800415 	stw	r2,16(r11)
    c79c:	10004826 	beq	r2,zero,c8c0 <___svfiprintf_internal_r+0x1200>
    c7a0:	dac02717 	ldw	r11,156(sp)
    c7a4:	5c000515 	stw	r16,20(r11)
    c7a8:	003bd906 	br	b710 <___svfiprintf_internal_r+0x50>
    c7ac:	9080004c 	andi	r2,r18,1
    c7b0:	0015883a 	mov	r10,zero
    c7b4:	10000626 	beq	r2,zero,c7d0 <___svfiprintf_internal_r+0x1110>
    c7b8:	dac02b17 	ldw	r11,172(sp)
    c7bc:	00800c04 	movi	r2,48
    c7c0:	d88019c5 	stb	r2,103(sp)
    c7c4:	dac02115 	stw	r11,132(sp)
    c7c8:	dc4019c4 	addi	r17,sp,103
    c7cc:	003cd806 	br	bb30 <___svfiprintf_internal_r+0x470>
    c7d0:	d8002115 	stw	zero,132(sp)
    c7d4:	dc401a04 	addi	r17,sp,104
    c7d8:	003cd506 	br	bb30 <___svfiprintf_internal_r+0x470>
    c7dc:	010000b4 	movhi	r4,2
    c7e0:	213dce04 	addi	r4,r4,-2248
    c7e4:	d9002815 	stw	r4,160(sp)
    c7e8:	003d4306 	br	bcf8 <___svfiprintf_internal_r+0x638>
    c7ec:	00bfffc4 	movi	r2,-1
    c7f0:	003ec606 	br	c30c <___svfiprintf_internal_r+0xc4c>
    c7f4:	00800044 	movi	r2,1
    c7f8:	10803fcc 	andi	r2,r2,255
    c7fc:	00c00044 	movi	r3,1
    c800:	10fd8026 	beq	r2,r3,be04 <___svfiprintf_internal_r+0x744>
    c804:	00c00084 	movi	r3,2
    c808:	10fca426 	beq	r2,r3,ba9c <___svfiprintf_internal_r+0x3dc>
    c80c:	003ce806 	br	bbb0 <___svfiprintf_internal_r+0x4f0>
    c810:	010000b4 	movhi	r4,2
    c814:	213dce04 	addi	r4,r4,-2248
    c818:	d9002815 	stw	r4,160(sp)
    c81c:	003e9906 	br	c284 <___svfiprintf_internal_r+0xbc4>
    c820:	1025883a 	mov	r18,r2
    c824:	0015883a 	mov	r10,zero
    c828:	00800084 	movi	r2,2
    c82c:	003ff206 	br	c7f8 <___svfiprintf_internal_r+0x1138>
    c830:	014000b4 	movhi	r5,2
    c834:	297dca04 	addi	r5,r5,-2264
    c838:	d9402215 	stw	r5,136(sp)
    c83c:	003ee206 	br	c3c8 <___svfiprintf_internal_r+0xd08>
    c840:	5827883a 	mov	r19,r11
    c844:	0021883a 	mov	r16,zero
    c848:	003bed06 	br	b800 <___svfiprintf_internal_r+0x140>
    c84c:	dc002115 	stw	r16,132(sp)
    c850:	da801d83 	ldbu	r10,118(sp)
    c854:	df002315 	stw	fp,140(sp)
    c858:	0021883a 	mov	r16,zero
    c85c:	003cb406 	br	bb30 <___svfiprintf_internal_r+0x470>
    c860:	0005883a 	mov	r2,zero
    c864:	003fc206 	br	c770 <___svfiprintf_internal_r+0x10b0>
    c868:	d8802317 	ldw	r2,140(sp)
    c86c:	98c00043 	ldbu	r3,1(r19)
    c870:	5827883a 	mov	r19,r11
    c874:	14000017 	ldw	r16,0(r2)
    c878:	10800104 	addi	r2,r2,4
    c87c:	d8802315 	stw	r2,140(sp)
    c880:	803f760e 	bge	r16,zero,c65c <___svfiprintf_internal_r+0xf9c>
    c884:	18c03fcc 	andi	r3,r3,255
    c888:	18c0201c 	xori	r3,r3,128
    c88c:	043fffc4 	movi	r16,-1
    c890:	18ffe004 	addi	r3,r3,-128
    c894:	003bd906 	br	b7fc <___svfiprintf_internal_r+0x13c>
    c898:	d9c01d85 	stb	r7,118(sp)
    c89c:	003cb606 	br	bb78 <___svfiprintf_internal_r+0x4b8>
    c8a0:	d9c01d85 	stb	r7,118(sp)
    c8a4:	003d2106 	br	bd2c <___svfiprintf_internal_r+0x66c>
    c8a8:	d9c01d85 	stb	r7,118(sp)
    c8ac:	003d8e06 	br	bee8 <___svfiprintf_internal_r+0x828>
    c8b0:	d9c01d85 	stb	r7,118(sp)
    c8b4:	003db306 	br	bf84 <___svfiprintf_internal_r+0x8c4>
    c8b8:	d9c01d85 	stb	r7,118(sp)
    c8bc:	003c8a06 	br	bae8 <___svfiprintf_internal_r+0x428>
    c8c0:	dac02a17 	ldw	r11,168(sp)
    c8c4:	00800304 	movi	r2,12
    c8c8:	58800015 	stw	r2,0(r11)
    c8cc:	00bfffc4 	movi	r2,-1
    c8d0:	003e8e06 	br	c30c <___svfiprintf_internal_r+0xc4c>
    c8d4:	d9c01d85 	stb	r7,118(sp)
    c8d8:	003dc706 	br	bff8 <___svfiprintf_internal_r+0x938>
    c8dc:	d9c01d85 	stb	r7,118(sp)
    c8e0:	003ddf06 	br	c060 <___svfiprintf_internal_r+0x9a0>
    c8e4:	d9c01d85 	stb	r7,118(sp)
    c8e8:	003d3706 	br	bdc8 <___svfiprintf_internal_r+0x708>
    c8ec:	d9c01d85 	stb	r7,118(sp)
    c8f0:	003c5406 	br	ba44 <___svfiprintf_internal_r+0x384>
    c8f4:	d9c01d85 	stb	r7,118(sp)
    c8f8:	003d1d06 	br	bd70 <___svfiprintf_internal_r+0x6b0>

0000c8fc <__sprint_r.part.0>:
    c8fc:	28801917 	ldw	r2,100(r5)
    c900:	defff604 	addi	sp,sp,-40
    c904:	dd400515 	stw	r21,20(sp)
    c908:	dfc00915 	stw	ra,36(sp)
    c90c:	df000815 	stw	fp,32(sp)
    c910:	ddc00715 	stw	r23,28(sp)
    c914:	dd800615 	stw	r22,24(sp)
    c918:	dd000415 	stw	r20,16(sp)
    c91c:	dcc00315 	stw	r19,12(sp)
    c920:	dc800215 	stw	r18,8(sp)
    c924:	dc400115 	stw	r17,4(sp)
    c928:	dc000015 	stw	r16,0(sp)
    c92c:	1088000c 	andi	r2,r2,8192
    c930:	302b883a 	mov	r21,r6
    c934:	10002e26 	beq	r2,zero,c9f0 <__sprint_r.part.0+0xf4>
    c938:	30800217 	ldw	r2,8(r6)
    c93c:	35800017 	ldw	r22,0(r6)
    c940:	10002926 	beq	r2,zero,c9e8 <__sprint_r.part.0+0xec>
    c944:	2827883a 	mov	r19,r5
    c948:	2029883a 	mov	r20,r4
    c94c:	b5c00104 	addi	r23,r22,4
    c950:	04bfffc4 	movi	r18,-1
    c954:	bc400017 	ldw	r17,0(r23)
    c958:	b4000017 	ldw	r16,0(r22)
    c95c:	0039883a 	mov	fp,zero
    c960:	8822d0ba 	srli	r17,r17,2
    c964:	8800031e 	bne	r17,zero,c974 <__sprint_r.part.0+0x78>
    c968:	00001806 	br	c9cc <__sprint_r.part.0+0xd0>
    c96c:	84000104 	addi	r16,r16,4
    c970:	8f001526 	beq	r17,fp,c9c8 <__sprint_r.part.0+0xcc>
    c974:	81400017 	ldw	r5,0(r16)
    c978:	980d883a 	mov	r6,r19
    c97c:	a009883a 	mov	r4,r20
    c980:	000e3240 	call	e324 <_fputwc_r>
    c984:	e7000044 	addi	fp,fp,1
    c988:	14bff81e 	bne	r2,r18,c96c <__sprint_r.part.0+0x70>
    c98c:	9005883a 	mov	r2,r18
    c990:	a8000215 	stw	zero,8(r21)
    c994:	a8000115 	stw	zero,4(r21)
    c998:	dfc00917 	ldw	ra,36(sp)
    c99c:	df000817 	ldw	fp,32(sp)
    c9a0:	ddc00717 	ldw	r23,28(sp)
    c9a4:	dd800617 	ldw	r22,24(sp)
    c9a8:	dd400517 	ldw	r21,20(sp)
    c9ac:	dd000417 	ldw	r20,16(sp)
    c9b0:	dcc00317 	ldw	r19,12(sp)
    c9b4:	dc800217 	ldw	r18,8(sp)
    c9b8:	dc400117 	ldw	r17,4(sp)
    c9bc:	dc000017 	ldw	r16,0(sp)
    c9c0:	dec00a04 	addi	sp,sp,40
    c9c4:	f800283a 	ret
    c9c8:	a8800217 	ldw	r2,8(r21)
    c9cc:	8c63883a 	add	r17,r17,r17
    c9d0:	8c63883a 	add	r17,r17,r17
    c9d4:	1445c83a 	sub	r2,r2,r17
    c9d8:	a8800215 	stw	r2,8(r21)
    c9dc:	b5800204 	addi	r22,r22,8
    c9e0:	bdc00204 	addi	r23,r23,8
    c9e4:	103fdb1e 	bne	r2,zero,c954 <__sprint_r.part.0+0x58>
    c9e8:	0005883a 	mov	r2,zero
    c9ec:	003fe806 	br	c990 <__sprint_r.part.0+0x94>
    c9f0:	000e4240 	call	e424 <__sfvwrite_r>
    c9f4:	003fe606 	br	c990 <__sprint_r.part.0+0x94>

0000c9f8 <__sprint_r>:
    c9f8:	30c00217 	ldw	r3,8(r6)
    c9fc:	18000126 	beq	r3,zero,ca04 <__sprint_r+0xc>
    ca00:	000c8fc1 	jmpi	c8fc <__sprint_r.part.0>
    ca04:	30000115 	stw	zero,4(r6)
    ca08:	0005883a 	mov	r2,zero
    ca0c:	f800283a 	ret

0000ca10 <___vfiprintf_internal_r>:
    ca10:	deffc904 	addi	sp,sp,-220
    ca14:	df003515 	stw	fp,212(sp)
    ca18:	dd003115 	stw	r20,196(sp)
    ca1c:	dfc03615 	stw	ra,216(sp)
    ca20:	ddc03415 	stw	r23,208(sp)
    ca24:	dd803315 	stw	r22,204(sp)
    ca28:	dd403215 	stw	r21,200(sp)
    ca2c:	dcc03015 	stw	r19,192(sp)
    ca30:	dc802f15 	stw	r18,188(sp)
    ca34:	dc402e15 	stw	r17,184(sp)
    ca38:	dc002d15 	stw	r16,180(sp)
    ca3c:	d9002015 	stw	r4,128(sp)
    ca40:	d9c02215 	stw	r7,136(sp)
    ca44:	2829883a 	mov	r20,r5
    ca48:	3039883a 	mov	fp,r6
    ca4c:	20000226 	beq	r4,zero,ca58 <___vfiprintf_internal_r+0x48>
    ca50:	20800e17 	ldw	r2,56(r4)
    ca54:	1000cf26 	beq	r2,zero,cd94 <___vfiprintf_internal_r+0x384>
    ca58:	a080030b 	ldhu	r2,12(r20)
    ca5c:	10c8000c 	andi	r3,r2,8192
    ca60:	1800061e 	bne	r3,zero,ca7c <___vfiprintf_internal_r+0x6c>
    ca64:	a1001917 	ldw	r4,100(r20)
    ca68:	00f7ffc4 	movi	r3,-8193
    ca6c:	10880014 	ori	r2,r2,8192
    ca70:	20c6703a 	and	r3,r4,r3
    ca74:	a080030d 	sth	r2,12(r20)
    ca78:	a0c01915 	stw	r3,100(r20)
    ca7c:	10c0020c 	andi	r3,r2,8
    ca80:	1800a926 	beq	r3,zero,cd28 <___vfiprintf_internal_r+0x318>
    ca84:	a0c00417 	ldw	r3,16(r20)
    ca88:	1800a726 	beq	r3,zero,cd28 <___vfiprintf_internal_r+0x318>
    ca8c:	1080068c 	andi	r2,r2,26
    ca90:	00c00284 	movi	r3,10
    ca94:	10c0ac26 	beq	r2,r3,cd48 <___vfiprintf_internal_r+0x338>
    ca98:	da801a04 	addi	r10,sp,104
    ca9c:	da801e15 	stw	r10,120(sp)
    caa0:	d8801e17 	ldw	r2,120(sp)
    caa4:	da8019c4 	addi	r10,sp,103
    caa8:	058000b4 	movhi	r22,2
    caac:	05c000b4 	movhi	r23,2
    cab0:	da801f15 	stw	r10,124(sp)
    cab4:	1295c83a 	sub	r10,r2,r10
    cab8:	b5bdd604 	addi	r22,r22,-2216
    cabc:	bdfdd204 	addi	r23,r23,-2232
    cac0:	dec01a15 	stw	sp,104(sp)
    cac4:	d8001c15 	stw	zero,112(sp)
    cac8:	d8001b15 	stw	zero,108(sp)
    cacc:	d8002615 	stw	zero,152(sp)
    cad0:	d8002315 	stw	zero,140(sp)
    cad4:	da802715 	stw	r10,156(sp)
    cad8:	d811883a 	mov	r8,sp
    cadc:	dd002115 	stw	r20,132(sp)
    cae0:	e021883a 	mov	r16,fp
    cae4:	80800007 	ldb	r2,0(r16)
    cae8:	1003ea26 	beq	r2,zero,da94 <___vfiprintf_internal_r+0x1084>
    caec:	00c00944 	movi	r3,37
    caf0:	8025883a 	mov	r18,r16
    caf4:	10c0021e 	bne	r2,r3,cb00 <___vfiprintf_internal_r+0xf0>
    caf8:	00001606 	br	cb54 <___vfiprintf_internal_r+0x144>
    cafc:	10c00326 	beq	r2,r3,cb0c <___vfiprintf_internal_r+0xfc>
    cb00:	94800044 	addi	r18,r18,1
    cb04:	90800007 	ldb	r2,0(r18)
    cb08:	103ffc1e 	bne	r2,zero,cafc <___vfiprintf_internal_r+0xec>
    cb0c:	9423c83a 	sub	r17,r18,r16
    cb10:	88001026 	beq	r17,zero,cb54 <___vfiprintf_internal_r+0x144>
    cb14:	d8c01c17 	ldw	r3,112(sp)
    cb18:	d8801b17 	ldw	r2,108(sp)
    cb1c:	44000015 	stw	r16,0(r8)
    cb20:	88c7883a 	add	r3,r17,r3
    cb24:	10800044 	addi	r2,r2,1
    cb28:	44400115 	stw	r17,4(r8)
    cb2c:	d8c01c15 	stw	r3,112(sp)
    cb30:	d8801b15 	stw	r2,108(sp)
    cb34:	010001c4 	movi	r4,7
    cb38:	2080760e 	bge	r4,r2,cd14 <___vfiprintf_internal_r+0x304>
    cb3c:	1803821e 	bne	r3,zero,d948 <___vfiprintf_internal_r+0xf38>
    cb40:	da802317 	ldw	r10,140(sp)
    cb44:	d8001b15 	stw	zero,108(sp)
    cb48:	d811883a 	mov	r8,sp
    cb4c:	5455883a 	add	r10,r10,r17
    cb50:	da802315 	stw	r10,140(sp)
    cb54:	90800007 	ldb	r2,0(r18)
    cb58:	10044626 	beq	r2,zero,dc74 <___vfiprintf_internal_r+0x1264>
    cb5c:	90c00047 	ldb	r3,1(r18)
    cb60:	94000044 	addi	r16,r18,1
    cb64:	d8001d85 	stb	zero,118(sp)
    cb68:	0009883a 	mov	r4,zero
    cb6c:	000f883a 	mov	r7,zero
    cb70:	027fffc4 	movi	r9,-1
    cb74:	0023883a 	mov	r17,zero
    cb78:	0029883a 	mov	r20,zero
    cb7c:	01401604 	movi	r5,88
    cb80:	01800244 	movi	r6,9
    cb84:	03400a84 	movi	r13,42
    cb88:	03001b04 	movi	r12,108
    cb8c:	84000044 	addi	r16,r16,1
    cb90:	18bff804 	addi	r2,r3,-32
    cb94:	28827336 	bltu	r5,r2,d564 <___vfiprintf_internal_r+0xb54>
    cb98:	100490ba 	slli	r2,r2,2
    cb9c:	02800074 	movhi	r10,1
    cba0:	52b2ec04 	addi	r10,r10,-13392
    cba4:	1285883a 	add	r2,r2,r10
    cba8:	10800017 	ldw	r2,0(r2)
    cbac:	1000683a 	jmp	r2
    cbb0:	0000d298 	cmpnei	zero,zero,842
    cbb4:	0000d564 	muli	zero,zero,853
    cbb8:	0000d564 	muli	zero,zero,853
    cbbc:	0000d2b8 	rdprs	zero,zero,842
    cbc0:	0000d564 	muli	zero,zero,853
    cbc4:	0000d564 	muli	zero,zero,853
    cbc8:	0000d564 	muli	zero,zero,853
    cbcc:	0000d564 	muli	zero,zero,853
    cbd0:	0000d564 	muli	zero,zero,853
    cbd4:	0000d564 	muli	zero,zero,853
    cbd8:	0000d4a0 	cmpeqi	zero,zero,850
    cbdc:	0000d4bc 	xorhi	zero,zero,850
    cbe0:	0000d564 	muli	zero,zero,853
    cbe4:	0000cda4 	muli	zero,zero,822
    cbe8:	0000d4cc 	andi	zero,zero,851
    cbec:	0000d564 	muli	zero,zero,853
    cbf0:	0000d2c4 	movi	zero,843
    cbf4:	0000d2d0 	cmplti	zero,zero,843
    cbf8:	0000d2d0 	cmplti	zero,zero,843
    cbfc:	0000d2d0 	cmplti	zero,zero,843
    cc00:	0000d2d0 	cmplti	zero,zero,843
    cc04:	0000d2d0 	cmplti	zero,zero,843
    cc08:	0000d2d0 	cmplti	zero,zero,843
    cc0c:	0000d2d0 	cmplti	zero,zero,843
    cc10:	0000d2d0 	cmplti	zero,zero,843
    cc14:	0000d2d0 	cmplti	zero,zero,843
    cc18:	0000d564 	muli	zero,zero,853
    cc1c:	0000d564 	muli	zero,zero,853
    cc20:	0000d564 	muli	zero,zero,853
    cc24:	0000d564 	muli	zero,zero,853
    cc28:	0000d564 	muli	zero,zero,853
    cc2c:	0000d564 	muli	zero,zero,853
    cc30:	0000d564 	muli	zero,zero,853
    cc34:	0000d564 	muli	zero,zero,853
    cc38:	0000d564 	muli	zero,zero,853
    cc3c:	0000d564 	muli	zero,zero,853
    cc40:	0000d2fc 	xorhi	zero,zero,843
    cc44:	0000d564 	muli	zero,zero,853
    cc48:	0000d564 	muli	zero,zero,853
    cc4c:	0000d564 	muli	zero,zero,853
    cc50:	0000d564 	muli	zero,zero,853
    cc54:	0000d564 	muli	zero,zero,853
    cc58:	0000d564 	muli	zero,zero,853
    cc5c:	0000d564 	muli	zero,zero,853
    cc60:	0000d564 	muli	zero,zero,853
    cc64:	0000d564 	muli	zero,zero,853
    cc68:	0000d564 	muli	zero,zero,853
    cc6c:	0000d334 	movhi	zero,844
    cc70:	0000d564 	muli	zero,zero,853
    cc74:	0000d564 	muli	zero,zero,853
    cc78:	0000d564 	muli	zero,zero,853
    cc7c:	0000d564 	muli	zero,zero,853
    cc80:	0000d564 	muli	zero,zero,853
    cc84:	0000d38c 	andi	zero,zero,846
    cc88:	0000d564 	muli	zero,zero,853
    cc8c:	0000d564 	muli	zero,zero,853
    cc90:	0000d3fc 	xorhi	zero,zero,847
    cc94:	0000d564 	muli	zero,zero,853
    cc98:	0000d564 	muli	zero,zero,853
    cc9c:	0000d564 	muli	zero,zero,853
    cca0:	0000d564 	muli	zero,zero,853
    cca4:	0000d564 	muli	zero,zero,853
    cca8:	0000d564 	muli	zero,zero,853
    ccac:	0000d564 	muli	zero,zero,853
    ccb0:	0000d564 	muli	zero,zero,853
    ccb4:	0000d564 	muli	zero,zero,853
    ccb8:	0000d564 	muli	zero,zero,853
    ccbc:	0000d1a8 	cmpgeui	zero,zero,838
    ccc0:	0000d1d4 	movui	zero,839
    ccc4:	0000d564 	muli	zero,zero,853
    ccc8:	0000d564 	muli	zero,zero,853
    cccc:	0000d564 	muli	zero,zero,853
    ccd0:	0000d50c 	andi	zero,zero,852
    ccd4:	0000d1d4 	movui	zero,839
    ccd8:	0000d564 	muli	zero,zero,853
    ccdc:	0000d564 	muli	zero,zero,853
    cce0:	0000d068 	cmpgeui	zero,zero,833
    cce4:	0000d564 	muli	zero,zero,853
    cce8:	0000d078 	rdprs	zero,zero,833
    ccec:	0000d0b4 	movhi	zero,834
    ccf0:	0000cdb0 	cmpltui	zero,zero,822
    ccf4:	0000d05c 	xori	zero,zero,833
    ccf8:	0000d564 	muli	zero,zero,853
    ccfc:	0000d438 	rdprs	zero,zero,848
    cd00:	0000d564 	muli	zero,zero,853
    cd04:	0000d490 	cmplti	zero,zero,850
    cd08:	0000d564 	muli	zero,zero,853
    cd0c:	0000d564 	muli	zero,zero,853
    cd10:	0000d154 	movui	zero,837
    cd14:	42000204 	addi	r8,r8,8
    cd18:	da802317 	ldw	r10,140(sp)
    cd1c:	5455883a 	add	r10,r10,r17
    cd20:	da802315 	stw	r10,140(sp)
    cd24:	003f8b06 	br	cb54 <___vfiprintf_internal_r+0x144>
    cd28:	d9002017 	ldw	r4,128(sp)
    cd2c:	a00b883a 	mov	r5,r20
    cd30:	0006da40 	call	6da4 <__swsetup_r>
    cd34:	1003b11e 	bne	r2,zero,dbfc <___vfiprintf_internal_r+0x11ec>
    cd38:	a080030b 	ldhu	r2,12(r20)
    cd3c:	00c00284 	movi	r3,10
    cd40:	1080068c 	andi	r2,r2,26
    cd44:	10ff541e 	bne	r2,r3,ca98 <___vfiprintf_internal_r+0x88>
    cd48:	a080038f 	ldh	r2,14(r20)
    cd4c:	103f5216 	blt	r2,zero,ca98 <___vfiprintf_internal_r+0x88>
    cd50:	d9c02217 	ldw	r7,136(sp)
    cd54:	d9002017 	ldw	r4,128(sp)
    cd58:	e00d883a 	mov	r6,fp
    cd5c:	a00b883a 	mov	r5,r20
    cd60:	000de880 	call	de88 <__sbprintf>
    cd64:	dfc03617 	ldw	ra,216(sp)
    cd68:	df003517 	ldw	fp,212(sp)
    cd6c:	ddc03417 	ldw	r23,208(sp)
    cd70:	dd803317 	ldw	r22,204(sp)
    cd74:	dd403217 	ldw	r21,200(sp)
    cd78:	dd003117 	ldw	r20,196(sp)
    cd7c:	dcc03017 	ldw	r19,192(sp)
    cd80:	dc802f17 	ldw	r18,188(sp)
    cd84:	dc402e17 	ldw	r17,184(sp)
    cd88:	dc002d17 	ldw	r16,180(sp)
    cd8c:	dec03704 	addi	sp,sp,220
    cd90:	f800283a 	ret
    cd94:	0008d780 	call	8d78 <__sinit>
    cd98:	003f2f06 	br	ca58 <___vfiprintf_internal_r+0x48>
    cd9c:	0463c83a 	sub	r17,zero,r17
    cda0:	d8802215 	stw	r2,136(sp)
    cda4:	a5000114 	ori	r20,r20,4
    cda8:	80c00007 	ldb	r3,0(r16)
    cdac:	003f7706 	br	cb8c <___vfiprintf_internal_r+0x17c>
    cdb0:	00800c04 	movi	r2,48
    cdb4:	da802217 	ldw	r10,136(sp)
    cdb8:	d8801d05 	stb	r2,116(sp)
    cdbc:	00801e04 	movi	r2,120
    cdc0:	d8801d45 	stb	r2,117(sp)
    cdc4:	d8001d85 	stb	zero,118(sp)
    cdc8:	50c00104 	addi	r3,r10,4
    cdcc:	54800017 	ldw	r18,0(r10)
    cdd0:	0027883a 	mov	r19,zero
    cdd4:	a0800094 	ori	r2,r20,2
    cdd8:	48030b16 	blt	r9,zero,da08 <___vfiprintf_internal_r+0xff8>
    cddc:	00bfdfc4 	movi	r2,-129
    cde0:	a096703a 	and	r11,r20,r2
    cde4:	d8c02215 	stw	r3,136(sp)
    cde8:	5d000094 	ori	r20,r11,2
    cdec:	90032b1e 	bne	r18,zero,da9c <___vfiprintf_internal_r+0x108c>
    cdf0:	008000b4 	movhi	r2,2
    cdf4:	10bd6204 	addi	r2,r2,-2680
    cdf8:	d8802615 	stw	r2,152(sp)
    cdfc:	0039883a 	mov	fp,zero
    ce00:	48017b1e 	bne	r9,zero,d3f0 <___vfiprintf_internal_r+0x9e0>
    ce04:	0013883a 	mov	r9,zero
    ce08:	0027883a 	mov	r19,zero
    ce0c:	dd401a04 	addi	r21,sp,104
    ce10:	4825883a 	mov	r18,r9
    ce14:	4cc0010e 	bge	r9,r19,ce1c <___vfiprintf_internal_r+0x40c>
    ce18:	9825883a 	mov	r18,r19
    ce1c:	e7003fcc 	andi	fp,fp,255
    ce20:	e700201c 	xori	fp,fp,128
    ce24:	e73fe004 	addi	fp,fp,-128
    ce28:	e0000126 	beq	fp,zero,ce30 <___vfiprintf_internal_r+0x420>
    ce2c:	94800044 	addi	r18,r18,1
    ce30:	a380008c 	andi	r14,r20,2
    ce34:	70000126 	beq	r14,zero,ce3c <___vfiprintf_internal_r+0x42c>
    ce38:	94800084 	addi	r18,r18,2
    ce3c:	a700210c 	andi	fp,r20,132
    ce40:	e001df1e 	bne	fp,zero,d5c0 <___vfiprintf_internal_r+0xbb0>
    ce44:	8c87c83a 	sub	r3,r17,r18
    ce48:	00c1dd0e 	bge	zero,r3,d5c0 <___vfiprintf_internal_r+0xbb0>
    ce4c:	01c00404 	movi	r7,16
    ce50:	d8801c17 	ldw	r2,112(sp)
    ce54:	38c3ad0e 	bge	r7,r3,dd0c <___vfiprintf_internal_r+0x12fc>
    ce58:	028000b4 	movhi	r10,2
    ce5c:	52bdd604 	addi	r10,r10,-2216
    ce60:	dc002915 	stw	r16,164(sp)
    ce64:	d9801b17 	ldw	r6,108(sp)
    ce68:	da802415 	stw	r10,144(sp)
    ce6c:	03c001c4 	movi	r15,7
    ce70:	da402515 	stw	r9,148(sp)
    ce74:	db802815 	stw	r14,160(sp)
    ce78:	1821883a 	mov	r16,r3
    ce7c:	00000506 	br	ce94 <___vfiprintf_internal_r+0x484>
    ce80:	31400084 	addi	r5,r6,2
    ce84:	42000204 	addi	r8,r8,8
    ce88:	200d883a 	mov	r6,r4
    ce8c:	843ffc04 	addi	r16,r16,-16
    ce90:	3c000d0e 	bge	r7,r16,cec8 <___vfiprintf_internal_r+0x4b8>
    ce94:	10800404 	addi	r2,r2,16
    ce98:	31000044 	addi	r4,r6,1
    ce9c:	45800015 	stw	r22,0(r8)
    cea0:	41c00115 	stw	r7,4(r8)
    cea4:	d8801c15 	stw	r2,112(sp)
    cea8:	d9001b15 	stw	r4,108(sp)
    ceac:	793ff40e 	bge	r15,r4,ce80 <___vfiprintf_internal_r+0x470>
    ceb0:	1001b51e 	bne	r2,zero,d588 <___vfiprintf_internal_r+0xb78>
    ceb4:	843ffc04 	addi	r16,r16,-16
    ceb8:	000d883a 	mov	r6,zero
    cebc:	01400044 	movi	r5,1
    cec0:	d811883a 	mov	r8,sp
    cec4:	3c3ff316 	blt	r7,r16,ce94 <___vfiprintf_internal_r+0x484>
    cec8:	8007883a 	mov	r3,r16
    cecc:	da402517 	ldw	r9,148(sp)
    ced0:	db802817 	ldw	r14,160(sp)
    ced4:	dc002917 	ldw	r16,164(sp)
    ced8:	da802417 	ldw	r10,144(sp)
    cedc:	1885883a 	add	r2,r3,r2
    cee0:	40c00115 	stw	r3,4(r8)
    cee4:	42800015 	stw	r10,0(r8)
    cee8:	d8801c15 	stw	r2,112(sp)
    ceec:	d9401b15 	stw	r5,108(sp)
    cef0:	00c001c4 	movi	r3,7
    cef4:	19426016 	blt	r3,r5,d878 <___vfiprintf_internal_r+0xe68>
    cef8:	d8c01d87 	ldb	r3,118(sp)
    cefc:	42000204 	addi	r8,r8,8
    cf00:	29000044 	addi	r4,r5,1
    cf04:	1801b31e 	bne	r3,zero,d5d4 <___vfiprintf_internal_r+0xbc4>
    cf08:	7001c026 	beq	r14,zero,d60c <___vfiprintf_internal_r+0xbfc>
    cf0c:	d8c01d04 	addi	r3,sp,116
    cf10:	10800084 	addi	r2,r2,2
    cf14:	40c00015 	stw	r3,0(r8)
    cf18:	00c00084 	movi	r3,2
    cf1c:	40c00115 	stw	r3,4(r8)
    cf20:	d8801c15 	stw	r2,112(sp)
    cf24:	d9001b15 	stw	r4,108(sp)
    cf28:	00c001c4 	movi	r3,7
    cf2c:	1902650e 	bge	r3,r4,d8c4 <___vfiprintf_internal_r+0xeb4>
    cf30:	10029a1e 	bne	r2,zero,d99c <___vfiprintf_internal_r+0xf8c>
    cf34:	00c02004 	movi	r3,128
    cf38:	01000044 	movi	r4,1
    cf3c:	000b883a 	mov	r5,zero
    cf40:	d811883a 	mov	r8,sp
    cf44:	e0c1b31e 	bne	fp,r3,d614 <___vfiprintf_internal_r+0xc04>
    cf48:	8cb9c83a 	sub	fp,r17,r18
    cf4c:	0701b10e 	bge	zero,fp,d614 <___vfiprintf_internal_r+0xc04>
    cf50:	01c00404 	movi	r7,16
    cf54:	3f03890e 	bge	r7,fp,dd7c <___vfiprintf_internal_r+0x136c>
    cf58:	00c000b4 	movhi	r3,2
    cf5c:	18fdd204 	addi	r3,r3,-2232
    cf60:	d8c02415 	stw	r3,144(sp)
    cf64:	8007883a 	mov	r3,r16
    cf68:	034001c4 	movi	r13,7
    cf6c:	e021883a 	mov	r16,fp
    cf70:	da402515 	stw	r9,148(sp)
    cf74:	1839883a 	mov	fp,r3
    cf78:	00000506 	br	cf90 <___vfiprintf_internal_r+0x580>
    cf7c:	29800084 	addi	r6,r5,2
    cf80:	42000204 	addi	r8,r8,8
    cf84:	180b883a 	mov	r5,r3
    cf88:	843ffc04 	addi	r16,r16,-16
    cf8c:	3c000d0e 	bge	r7,r16,cfc4 <___vfiprintf_internal_r+0x5b4>
    cf90:	10800404 	addi	r2,r2,16
    cf94:	28c00044 	addi	r3,r5,1
    cf98:	45c00015 	stw	r23,0(r8)
    cf9c:	41c00115 	stw	r7,4(r8)
    cfa0:	d8801c15 	stw	r2,112(sp)
    cfa4:	d8c01b15 	stw	r3,108(sp)
    cfa8:	68fff40e 	bge	r13,r3,cf7c <___vfiprintf_internal_r+0x56c>
    cfac:	1002241e 	bne	r2,zero,d840 <___vfiprintf_internal_r+0xe30>
    cfb0:	843ffc04 	addi	r16,r16,-16
    cfb4:	01800044 	movi	r6,1
    cfb8:	000b883a 	mov	r5,zero
    cfbc:	d811883a 	mov	r8,sp
    cfc0:	3c3ff316 	blt	r7,r16,cf90 <___vfiprintf_internal_r+0x580>
    cfc4:	da402517 	ldw	r9,148(sp)
    cfc8:	e007883a 	mov	r3,fp
    cfcc:	8039883a 	mov	fp,r16
    cfd0:	1821883a 	mov	r16,r3
    cfd4:	d8c02417 	ldw	r3,144(sp)
    cfd8:	1705883a 	add	r2,r2,fp
    cfdc:	47000115 	stw	fp,4(r8)
    cfe0:	40c00015 	stw	r3,0(r8)
    cfe4:	d8801c15 	stw	r2,112(sp)
    cfe8:	d9801b15 	stw	r6,108(sp)
    cfec:	00c001c4 	movi	r3,7
    cff0:	19827616 	blt	r3,r6,d9cc <___vfiprintf_internal_r+0xfbc>
    cff4:	4cf9c83a 	sub	fp,r9,r19
    cff8:	42000204 	addi	r8,r8,8
    cffc:	31000044 	addi	r4,r6,1
    d000:	300b883a 	mov	r5,r6
    d004:	07018516 	blt	zero,fp,d61c <___vfiprintf_internal_r+0xc0c>
    d008:	9885883a 	add	r2,r19,r2
    d00c:	45400015 	stw	r21,0(r8)
    d010:	44c00115 	stw	r19,4(r8)
    d014:	d8801c15 	stw	r2,112(sp)
    d018:	d9001b15 	stw	r4,108(sp)
    d01c:	00c001c4 	movi	r3,7
    d020:	1901dd0e 	bge	r3,r4,d798 <___vfiprintf_internal_r+0xd88>
    d024:	1002401e 	bne	r2,zero,d928 <___vfiprintf_internal_r+0xf18>
    d028:	d8001b15 	stw	zero,108(sp)
    d02c:	a2c0010c 	andi	r11,r20,4
    d030:	58000226 	beq	r11,zero,d03c <___vfiprintf_internal_r+0x62c>
    d034:	8ca7c83a 	sub	r19,r17,r18
    d038:	04c2f216 	blt	zero,r19,dc04 <___vfiprintf_internal_r+0x11f4>
    d03c:	8c80010e 	bge	r17,r18,d044 <___vfiprintf_internal_r+0x634>
    d040:	9023883a 	mov	r17,r18
    d044:	da802317 	ldw	r10,140(sp)
    d048:	5455883a 	add	r10,r10,r17
    d04c:	da802315 	stw	r10,140(sp)
    d050:	d8001b15 	stw	zero,108(sp)
    d054:	d811883a 	mov	r8,sp
    d058:	003ea206 	br	cae4 <___vfiprintf_internal_r+0xd4>
    d05c:	a5000814 	ori	r20,r20,32
    d060:	80c00007 	ldb	r3,0(r16)
    d064:	003ec906 	br	cb8c <___vfiprintf_internal_r+0x17c>
    d068:	80c00007 	ldb	r3,0(r16)
    d06c:	1b030926 	beq	r3,r12,dc94 <___vfiprintf_internal_r+0x1284>
    d070:	a5000414 	ori	r20,r20,16
    d074:	003ec506 	br	cb8c <___vfiprintf_internal_r+0x17c>
    d078:	21003fcc 	andi	r4,r4,255
    d07c:	20035e1e 	bne	r4,zero,ddf8 <___vfiprintf_internal_r+0x13e8>
    d080:	a080080c 	andi	r2,r20,32
    d084:	1002a526 	beq	r2,zero,db1c <___vfiprintf_internal_r+0x110c>
    d088:	da802217 	ldw	r10,136(sp)
    d08c:	50800017 	ldw	r2,0(r10)
    d090:	da802317 	ldw	r10,140(sp)
    d094:	5007d7fa 	srai	r3,r10,31
    d098:	da802217 	ldw	r10,136(sp)
    d09c:	10c00115 	stw	r3,4(r2)
    d0a0:	52800104 	addi	r10,r10,4
    d0a4:	da802215 	stw	r10,136(sp)
    d0a8:	da802317 	ldw	r10,140(sp)
    d0ac:	12800015 	stw	r10,0(r2)
    d0b0:	003e8c06 	br	cae4 <___vfiprintf_internal_r+0xd4>
    d0b4:	21003fcc 	andi	r4,r4,255
    d0b8:	2003511e 	bne	r4,zero,de00 <___vfiprintf_internal_r+0x13f0>
    d0bc:	a080080c 	andi	r2,r20,32
    d0c0:	1000a126 	beq	r2,zero,d348 <___vfiprintf_internal_r+0x938>
    d0c4:	da802217 	ldw	r10,136(sp)
    d0c8:	d8001d85 	stb	zero,118(sp)
    d0cc:	50800204 	addi	r2,r10,8
    d0d0:	54800017 	ldw	r18,0(r10)
    d0d4:	54c00117 	ldw	r19,4(r10)
    d0d8:	4802b416 	blt	r9,zero,dbac <___vfiprintf_internal_r+0x119c>
    d0dc:	013fdfc4 	movi	r4,-129
    d0e0:	94c6b03a 	or	r3,r18,r19
    d0e4:	d8802215 	stw	r2,136(sp)
    d0e8:	a128703a 	and	r20,r20,r4
    d0ec:	1800a226 	beq	r3,zero,d378 <___vfiprintf_internal_r+0x968>
    d0f0:	0039883a 	mov	fp,zero
    d0f4:	dd401a04 	addi	r21,sp,104
    d0f8:	9006d0fa 	srli	r3,r18,3
    d0fc:	9808977a 	slli	r4,r19,29
    d100:	9826d0fa 	srli	r19,r19,3
    d104:	948001cc 	andi	r18,r18,7
    d108:	90800c04 	addi	r2,r18,48
    d10c:	ad7fffc4 	addi	r21,r21,-1
    d110:	20e4b03a 	or	r18,r4,r3
    d114:	a8800005 	stb	r2,0(r21)
    d118:	94c6b03a 	or	r3,r18,r19
    d11c:	183ff61e 	bne	r3,zero,d0f8 <___vfiprintf_internal_r+0x6e8>
    d120:	a0c0004c 	andi	r3,r20,1
    d124:	18005926 	beq	r3,zero,d28c <___vfiprintf_internal_r+0x87c>
    d128:	10803fcc 	andi	r2,r2,255
    d12c:	1080201c 	xori	r2,r2,128
    d130:	10bfe004 	addi	r2,r2,-128
    d134:	00c00c04 	movi	r3,48
    d138:	10c05426 	beq	r2,r3,d28c <___vfiprintf_internal_r+0x87c>
    d13c:	da801e17 	ldw	r10,120(sp)
    d140:	a8bfffc4 	addi	r2,r21,-1
    d144:	a8ffffc5 	stb	r3,-1(r21)
    d148:	50a7c83a 	sub	r19,r10,r2
    d14c:	102b883a 	mov	r21,r2
    d150:	003f2f06 	br	ce10 <___vfiprintf_internal_r+0x400>
    d154:	21003fcc 	andi	r4,r4,255
    d158:	2003421e 	bne	r4,zero,de64 <___vfiprintf_internal_r+0x1454>
    d15c:	008000b4 	movhi	r2,2
    d160:	10bd6204 	addi	r2,r2,-2680
    d164:	d8802615 	stw	r2,152(sp)
    d168:	a080080c 	andi	r2,r20,32
    d16c:	1000aa26 	beq	r2,zero,d418 <___vfiprintf_internal_r+0xa08>
    d170:	da802217 	ldw	r10,136(sp)
    d174:	54800017 	ldw	r18,0(r10)
    d178:	54c00117 	ldw	r19,4(r10)
    d17c:	52800204 	addi	r10,r10,8
    d180:	da802215 	stw	r10,136(sp)
    d184:	a080004c 	andi	r2,r20,1
    d188:	1001d226 	beq	r2,zero,d8d4 <___vfiprintf_internal_r+0xec4>
    d18c:	94c4b03a 	or	r2,r18,r19
    d190:	1002351e 	bne	r2,zero,da68 <___vfiprintf_internal_r+0x1058>
    d194:	d8001d85 	stb	zero,118(sp)
    d198:	48022216 	blt	r9,zero,da24 <___vfiprintf_internal_r+0x1014>
    d19c:	00bfdfc4 	movi	r2,-129
    d1a0:	a0a8703a 	and	r20,r20,r2
    d1a4:	003f1506 	br	cdfc <___vfiprintf_internal_r+0x3ec>
    d1a8:	da802217 	ldw	r10,136(sp)
    d1ac:	04800044 	movi	r18,1
    d1b0:	d8001d85 	stb	zero,118(sp)
    d1b4:	50800017 	ldw	r2,0(r10)
    d1b8:	52800104 	addi	r10,r10,4
    d1bc:	da802215 	stw	r10,136(sp)
    d1c0:	d8801005 	stb	r2,64(sp)
    d1c4:	9027883a 	mov	r19,r18
    d1c8:	dd401004 	addi	r21,sp,64
    d1cc:	0013883a 	mov	r9,zero
    d1d0:	003f1706 	br	ce30 <___vfiprintf_internal_r+0x420>
    d1d4:	21003fcc 	andi	r4,r4,255
    d1d8:	2003201e 	bne	r4,zero,de5c <___vfiprintf_internal_r+0x144c>
    d1dc:	a080080c 	andi	r2,r20,32
    d1e0:	10004b26 	beq	r2,zero,d310 <___vfiprintf_internal_r+0x900>
    d1e4:	da802217 	ldw	r10,136(sp)
    d1e8:	50800117 	ldw	r2,4(r10)
    d1ec:	54800017 	ldw	r18,0(r10)
    d1f0:	52800204 	addi	r10,r10,8
    d1f4:	da802215 	stw	r10,136(sp)
    d1f8:	1027883a 	mov	r19,r2
    d1fc:	10022c16 	blt	r2,zero,dab0 <___vfiprintf_internal_r+0x10a0>
    d200:	df001d83 	ldbu	fp,118(sp)
    d204:	48007216 	blt	r9,zero,d3d0 <___vfiprintf_internal_r+0x9c0>
    d208:	00ffdfc4 	movi	r3,-129
    d20c:	94c4b03a 	or	r2,r18,r19
    d210:	a0e8703a 	and	r20,r20,r3
    d214:	1000cc26 	beq	r2,zero,d548 <___vfiprintf_internal_r+0xb38>
    d218:	98021026 	beq	r19,zero,da5c <___vfiprintf_internal_r+0x104c>
    d21c:	dc402415 	stw	r17,144(sp)
    d220:	dc002515 	stw	r16,148(sp)
    d224:	9823883a 	mov	r17,r19
    d228:	9021883a 	mov	r16,r18
    d22c:	dd401a04 	addi	r21,sp,104
    d230:	4825883a 	mov	r18,r9
    d234:	4027883a 	mov	r19,r8
    d238:	8009883a 	mov	r4,r16
    d23c:	880b883a 	mov	r5,r17
    d240:	01800284 	movi	r6,10
    d244:	000f883a 	mov	r7,zero
    d248:	000f96c0 	call	f96c <__umoddi3>
    d24c:	10800c04 	addi	r2,r2,48
    d250:	ad7fffc4 	addi	r21,r21,-1
    d254:	8009883a 	mov	r4,r16
    d258:	880b883a 	mov	r5,r17
    d25c:	a8800005 	stb	r2,0(r21)
    d260:	01800284 	movi	r6,10
    d264:	000f883a 	mov	r7,zero
    d268:	000f3f40 	call	f3f4 <__udivdi3>
    d26c:	1021883a 	mov	r16,r2
    d270:	10c4b03a 	or	r2,r2,r3
    d274:	1823883a 	mov	r17,r3
    d278:	103fef1e 	bne	r2,zero,d238 <___vfiprintf_internal_r+0x828>
    d27c:	dc402417 	ldw	r17,144(sp)
    d280:	dc002517 	ldw	r16,148(sp)
    d284:	9013883a 	mov	r9,r18
    d288:	9811883a 	mov	r8,r19
    d28c:	da801e17 	ldw	r10,120(sp)
    d290:	5567c83a 	sub	r19,r10,r21
    d294:	003ede06 	br	ce10 <___vfiprintf_internal_r+0x400>
    d298:	38803fcc 	andi	r2,r7,255
    d29c:	1080201c 	xori	r2,r2,128
    d2a0:	10bfe004 	addi	r2,r2,-128
    d2a4:	1002371e 	bne	r2,zero,db84 <___vfiprintf_internal_r+0x1174>
    d2a8:	01000044 	movi	r4,1
    d2ac:	01c00804 	movi	r7,32
    d2b0:	80c00007 	ldb	r3,0(r16)
    d2b4:	003e3506 	br	cb8c <___vfiprintf_internal_r+0x17c>
    d2b8:	a5000054 	ori	r20,r20,1
    d2bc:	80c00007 	ldb	r3,0(r16)
    d2c0:	003e3206 	br	cb8c <___vfiprintf_internal_r+0x17c>
    d2c4:	a5002014 	ori	r20,r20,128
    d2c8:	80c00007 	ldb	r3,0(r16)
    d2cc:	003e2f06 	br	cb8c <___vfiprintf_internal_r+0x17c>
    d2d0:	8015883a 	mov	r10,r16
    d2d4:	0023883a 	mov	r17,zero
    d2d8:	18bff404 	addi	r2,r3,-48
    d2dc:	50c00007 	ldb	r3,0(r10)
    d2e0:	8c4002a4 	muli	r17,r17,10
    d2e4:	84000044 	addi	r16,r16,1
    d2e8:	8015883a 	mov	r10,r16
    d2ec:	1463883a 	add	r17,r2,r17
    d2f0:	18bff404 	addi	r2,r3,-48
    d2f4:	30bff92e 	bgeu	r6,r2,d2dc <___vfiprintf_internal_r+0x8cc>
    d2f8:	003e2506 	br	cb90 <___vfiprintf_internal_r+0x180>
    d2fc:	21003fcc 	andi	r4,r4,255
    d300:	2002d41e 	bne	r4,zero,de54 <___vfiprintf_internal_r+0x1444>
    d304:	a5000414 	ori	r20,r20,16
    d308:	a080080c 	andi	r2,r20,32
    d30c:	103fb51e 	bne	r2,zero,d1e4 <___vfiprintf_internal_r+0x7d4>
    d310:	a080040c 	andi	r2,r20,16
    d314:	1001f826 	beq	r2,zero,daf8 <___vfiprintf_internal_r+0x10e8>
    d318:	da802217 	ldw	r10,136(sp)
    d31c:	54800017 	ldw	r18,0(r10)
    d320:	52800104 	addi	r10,r10,4
    d324:	da802215 	stw	r10,136(sp)
    d328:	9027d7fa 	srai	r19,r18,31
    d32c:	9805883a 	mov	r2,r19
    d330:	003fb206 	br	d1fc <___vfiprintf_internal_r+0x7ec>
    d334:	21003fcc 	andi	r4,r4,255
    d338:	2002c41e 	bne	r4,zero,de4c <___vfiprintf_internal_r+0x143c>
    d33c:	a5000414 	ori	r20,r20,16
    d340:	a080080c 	andi	r2,r20,32
    d344:	103f5f1e 	bne	r2,zero,d0c4 <___vfiprintf_internal_r+0x6b4>
    d348:	a080040c 	andi	r2,r20,16
    d34c:	10020f26 	beq	r2,zero,db8c <___vfiprintf_internal_r+0x117c>
    d350:	da802217 	ldw	r10,136(sp)
    d354:	d8001d85 	stb	zero,118(sp)
    d358:	0027883a 	mov	r19,zero
    d35c:	50800104 	addi	r2,r10,4
    d360:	54800017 	ldw	r18,0(r10)
    d364:	48021116 	blt	r9,zero,dbac <___vfiprintf_internal_r+0x119c>
    d368:	00ffdfc4 	movi	r3,-129
    d36c:	d8802215 	stw	r2,136(sp)
    d370:	a0e8703a 	and	r20,r20,r3
    d374:	903f5e1e 	bne	r18,zero,d0f0 <___vfiprintf_internal_r+0x6e0>
    d378:	0039883a 	mov	fp,zero
    d37c:	4802a626 	beq	r9,zero,de18 <___vfiprintf_internal_r+0x1408>
    d380:	0025883a 	mov	r18,zero
    d384:	0027883a 	mov	r19,zero
    d388:	003f5a06 	br	d0f4 <___vfiprintf_internal_r+0x6e4>
    d38c:	21003fcc 	andi	r4,r4,255
    d390:	20029f1e 	bne	r4,zero,de10 <___vfiprintf_internal_r+0x1400>
    d394:	a5000414 	ori	r20,r20,16
    d398:	a080080c 	andi	r2,r20,32
    d39c:	10005e1e 	bne	r2,zero,d518 <___vfiprintf_internal_r+0xb08>
    d3a0:	a080040c 	andi	r2,r20,16
    d3a4:	1001a21e 	bne	r2,zero,da30 <___vfiprintf_internal_r+0x1020>
    d3a8:	a080100c 	andi	r2,r20,64
    d3ac:	d8001d85 	stb	zero,118(sp)
    d3b0:	da802217 	ldw	r10,136(sp)
    d3b4:	1002231e 	bne	r2,zero,dc44 <___vfiprintf_internal_r+0x1234>
    d3b8:	50800104 	addi	r2,r10,4
    d3bc:	54800017 	ldw	r18,0(r10)
    d3c0:	0027883a 	mov	r19,zero
    d3c4:	4801a00e 	bge	r9,zero,da48 <___vfiprintf_internal_r+0x1038>
    d3c8:	d8802215 	stw	r2,136(sp)
    d3cc:	0039883a 	mov	fp,zero
    d3d0:	94c4b03a 	or	r2,r18,r19
    d3d4:	103f901e 	bne	r2,zero,d218 <___vfiprintf_internal_r+0x808>
    d3d8:	00800044 	movi	r2,1
    d3dc:	10803fcc 	andi	r2,r2,255
    d3e0:	00c00044 	movi	r3,1
    d3e4:	10c05926 	beq	r2,r3,d54c <___vfiprintf_internal_r+0xb3c>
    d3e8:	00c00084 	movi	r3,2
    d3ec:	10ffe41e 	bne	r2,r3,d380 <___vfiprintf_internal_r+0x970>
    d3f0:	0025883a 	mov	r18,zero
    d3f4:	0027883a 	mov	r19,zero
    d3f8:	00013d06 	br	d8f0 <___vfiprintf_internal_r+0xee0>
    d3fc:	21003fcc 	andi	r4,r4,255
    d400:	2002811e 	bne	r4,zero,de08 <___vfiprintf_internal_r+0x13f8>
    d404:	008000b4 	movhi	r2,2
    d408:	10bd5d04 	addi	r2,r2,-2700
    d40c:	d8802615 	stw	r2,152(sp)
    d410:	a080080c 	andi	r2,r20,32
    d414:	103f561e 	bne	r2,zero,d170 <___vfiprintf_internal_r+0x760>
    d418:	a080040c 	andi	r2,r20,16
    d41c:	1001d126 	beq	r2,zero,db64 <___vfiprintf_internal_r+0x1154>
    d420:	da802217 	ldw	r10,136(sp)
    d424:	0027883a 	mov	r19,zero
    d428:	54800017 	ldw	r18,0(r10)
    d42c:	52800104 	addi	r10,r10,4
    d430:	da802215 	stw	r10,136(sp)
    d434:	003f5306 	br	d184 <___vfiprintf_internal_r+0x774>
    d438:	da802217 	ldw	r10,136(sp)
    d43c:	d8001d85 	stb	zero,118(sp)
    d440:	55400017 	ldw	r21,0(r10)
    d444:	50c00104 	addi	r3,r10,4
    d448:	a8024226 	beq	r21,zero,dd54 <___vfiprintf_internal_r+0x1344>
    d44c:	48021816 	blt	r9,zero,dcb0 <___vfiprintf_internal_r+0x12a0>
    d450:	480d883a 	mov	r6,r9
    d454:	000b883a 	mov	r5,zero
    d458:	a809883a 	mov	r4,r21
    d45c:	d8c02a15 	stw	r3,168(sp)
    d460:	da002b15 	stw	r8,172(sp)
    d464:	da402c15 	stw	r9,176(sp)
    d468:	0009e280 	call	9e28 <memchr>
    d46c:	d8c02a17 	ldw	r3,168(sp)
    d470:	da002b17 	ldw	r8,172(sp)
    d474:	da402c17 	ldw	r9,176(sp)
    d478:	10024826 	beq	r2,zero,dd9c <___vfiprintf_internal_r+0x138c>
    d47c:	1567c83a 	sub	r19,r2,r21
    d480:	df001d83 	ldbu	fp,118(sp)
    d484:	d8c02215 	stw	r3,136(sp)
    d488:	0013883a 	mov	r9,zero
    d48c:	003e6006 	br	ce10 <___vfiprintf_internal_r+0x400>
    d490:	21003fcc 	andi	r4,r4,255
    d494:	203fc026 	beq	r4,zero,d398 <___vfiprintf_internal_r+0x988>
    d498:	d9c01d85 	stb	r7,118(sp)
    d49c:	003fbe06 	br	d398 <___vfiprintf_internal_r+0x988>
    d4a0:	da802217 	ldw	r10,136(sp)
    d4a4:	54400017 	ldw	r17,0(r10)
    d4a8:	50800104 	addi	r2,r10,4
    d4ac:	883e3b16 	blt	r17,zero,cd9c <___vfiprintf_internal_r+0x38c>
    d4b0:	d8802215 	stw	r2,136(sp)
    d4b4:	80c00007 	ldb	r3,0(r16)
    d4b8:	003db406 	br	cb8c <___vfiprintf_internal_r+0x17c>
    d4bc:	01000044 	movi	r4,1
    d4c0:	01c00ac4 	movi	r7,43
    d4c4:	80c00007 	ldb	r3,0(r16)
    d4c8:	003db006 	br	cb8c <___vfiprintf_internal_r+0x17c>
    d4cc:	80c00007 	ldb	r3,0(r16)
    d4d0:	82800044 	addi	r10,r16,1
    d4d4:	1b423c26 	beq	r3,r13,ddc8 <___vfiprintf_internal_r+0x13b8>
    d4d8:	18bff404 	addi	r2,r3,-48
    d4dc:	0013883a 	mov	r9,zero
    d4e0:	30822b36 	bltu	r6,r2,dd90 <___vfiprintf_internal_r+0x1380>
    d4e4:	50c00007 	ldb	r3,0(r10)
    d4e8:	4a4002a4 	muli	r9,r9,10
    d4ec:	54000044 	addi	r16,r10,1
    d4f0:	8015883a 	mov	r10,r16
    d4f4:	4893883a 	add	r9,r9,r2
    d4f8:	18bff404 	addi	r2,r3,-48
    d4fc:	30bff92e 	bgeu	r6,r2,d4e4 <___vfiprintf_internal_r+0xad4>
    d500:	483da30e 	bge	r9,zero,cb90 <___vfiprintf_internal_r+0x180>
    d504:	027fffc4 	movi	r9,-1
    d508:	003da106 	br	cb90 <___vfiprintf_internal_r+0x180>
    d50c:	a5001014 	ori	r20,r20,64
    d510:	80c00007 	ldb	r3,0(r16)
    d514:	003d9d06 	br	cb8c <___vfiprintf_internal_r+0x17c>
    d518:	da802217 	ldw	r10,136(sp)
    d51c:	d8001d85 	stb	zero,118(sp)
    d520:	50c00204 	addi	r3,r10,8
    d524:	54800017 	ldw	r18,0(r10)
    d528:	54c00117 	ldw	r19,4(r10)
    d52c:	4801ca16 	blt	r9,zero,dc58 <___vfiprintf_internal_r+0x1248>
    d530:	013fdfc4 	movi	r4,-129
    d534:	94c4b03a 	or	r2,r18,r19
    d538:	d8c02215 	stw	r3,136(sp)
    d53c:	a128703a 	and	r20,r20,r4
    d540:	0039883a 	mov	fp,zero
    d544:	103f341e 	bne	r2,zero,d218 <___vfiprintf_internal_r+0x808>
    d548:	483e2e26 	beq	r9,zero,ce04 <___vfiprintf_internal_r+0x3f4>
    d54c:	0025883a 	mov	r18,zero
    d550:	94800c04 	addi	r18,r18,48
    d554:	dc8019c5 	stb	r18,103(sp)
    d558:	dcc02717 	ldw	r19,156(sp)
    d55c:	dd4019c4 	addi	r21,sp,103
    d560:	003e2b06 	br	ce10 <___vfiprintf_internal_r+0x400>
    d564:	21003fcc 	andi	r4,r4,255
    d568:	2002361e 	bne	r4,zero,de44 <___vfiprintf_internal_r+0x1434>
    d56c:	1801c126 	beq	r3,zero,dc74 <___vfiprintf_internal_r+0x1264>
    d570:	04800044 	movi	r18,1
    d574:	d8c01005 	stb	r3,64(sp)
    d578:	d8001d85 	stb	zero,118(sp)
    d57c:	9027883a 	mov	r19,r18
    d580:	dd401004 	addi	r21,sp,64
    d584:	003f1106 	br	d1cc <___vfiprintf_internal_r+0x7bc>
    d588:	d9402117 	ldw	r5,132(sp)
    d58c:	d9002017 	ldw	r4,128(sp)
    d590:	d9801a04 	addi	r6,sp,104
    d594:	d9c02b15 	stw	r7,172(sp)
    d598:	dbc02a15 	stw	r15,168(sp)
    d59c:	000c8fc0 	call	c8fc <__sprint_r.part.0>
    d5a0:	d9c02b17 	ldw	r7,172(sp)
    d5a4:	dbc02a17 	ldw	r15,168(sp)
    d5a8:	10006d1e 	bne	r2,zero,d760 <___vfiprintf_internal_r+0xd50>
    d5ac:	d9801b17 	ldw	r6,108(sp)
    d5b0:	d8801c17 	ldw	r2,112(sp)
    d5b4:	d811883a 	mov	r8,sp
    d5b8:	31400044 	addi	r5,r6,1
    d5bc:	003e3306 	br	ce8c <___vfiprintf_internal_r+0x47c>
    d5c0:	d9401b17 	ldw	r5,108(sp)
    d5c4:	d8801c17 	ldw	r2,112(sp)
    d5c8:	29000044 	addi	r4,r5,1
    d5cc:	d8c01d87 	ldb	r3,118(sp)
    d5d0:	183e4d26 	beq	r3,zero,cf08 <___vfiprintf_internal_r+0x4f8>
    d5d4:	00c00044 	movi	r3,1
    d5d8:	d9401d84 	addi	r5,sp,118
    d5dc:	10c5883a 	add	r2,r2,r3
    d5e0:	41400015 	stw	r5,0(r8)
    d5e4:	40c00115 	stw	r3,4(r8)
    d5e8:	d8801c15 	stw	r2,112(sp)
    d5ec:	d9001b15 	stw	r4,108(sp)
    d5f0:	014001c4 	movi	r5,7
    d5f4:	2900a90e 	bge	r5,r4,d89c <___vfiprintf_internal_r+0xe8c>
    d5f8:	1000da1e 	bne	r2,zero,d964 <___vfiprintf_internal_r+0xf54>
    d5fc:	7000ab1e 	bne	r14,zero,d8ac <___vfiprintf_internal_r+0xe9c>
    d600:	000b883a 	mov	r5,zero
    d604:	1809883a 	mov	r4,r3
    d608:	d811883a 	mov	r8,sp
    d60c:	00c02004 	movi	r3,128
    d610:	e0fe4d26 	beq	fp,r3,cf48 <___vfiprintf_internal_r+0x538>
    d614:	4cf9c83a 	sub	fp,r9,r19
    d618:	073e7b0e 	bge	zero,fp,d008 <___vfiprintf_internal_r+0x5f8>
    d61c:	01c00404 	movi	r7,16
    d620:	3f01900e 	bge	r7,fp,dc64 <___vfiprintf_internal_r+0x1254>
    d624:	00c000b4 	movhi	r3,2
    d628:	18fdd204 	addi	r3,r3,-2232
    d62c:	d8c02415 	stw	r3,144(sp)
    d630:	034001c4 	movi	r13,7
    d634:	00000506 	br	d64c <___vfiprintf_internal_r+0xc3c>
    d638:	29000084 	addi	r4,r5,2
    d63c:	42000204 	addi	r8,r8,8
    d640:	180b883a 	mov	r5,r3
    d644:	e73ffc04 	addi	fp,fp,-16
    d648:	3f000d0e 	bge	r7,fp,d680 <___vfiprintf_internal_r+0xc70>
    d64c:	10800404 	addi	r2,r2,16
    d650:	28c00044 	addi	r3,r5,1
    d654:	45c00015 	stw	r23,0(r8)
    d658:	41c00115 	stw	r7,4(r8)
    d65c:	d8801c15 	stw	r2,112(sp)
    d660:	d8c01b15 	stw	r3,108(sp)
    d664:	68fff40e 	bge	r13,r3,d638 <___vfiprintf_internal_r+0xc28>
    d668:	1000101e 	bne	r2,zero,d6ac <___vfiprintf_internal_r+0xc9c>
    d66c:	e73ffc04 	addi	fp,fp,-16
    d670:	01000044 	movi	r4,1
    d674:	000b883a 	mov	r5,zero
    d678:	d811883a 	mov	r8,sp
    d67c:	3f3ff316 	blt	r7,fp,d64c <___vfiprintf_internal_r+0xc3c>
    d680:	da802417 	ldw	r10,144(sp)
    d684:	1705883a 	add	r2,r2,fp
    d688:	47000115 	stw	fp,4(r8)
    d68c:	42800015 	stw	r10,0(r8)
    d690:	d8801c15 	stw	r2,112(sp)
    d694:	d9001b15 	stw	r4,108(sp)
    d698:	00c001c4 	movi	r3,7
    d69c:	19003616 	blt	r3,r4,d778 <___vfiprintf_internal_r+0xd68>
    d6a0:	42000204 	addi	r8,r8,8
    d6a4:	21000044 	addi	r4,r4,1
    d6a8:	003e5706 	br	d008 <___vfiprintf_internal_r+0x5f8>
    d6ac:	d9402117 	ldw	r5,132(sp)
    d6b0:	d9002017 	ldw	r4,128(sp)
    d6b4:	d9801a04 	addi	r6,sp,104
    d6b8:	d9c02b15 	stw	r7,172(sp)
    d6bc:	db402a15 	stw	r13,168(sp)
    d6c0:	000c8fc0 	call	c8fc <__sprint_r.part.0>
    d6c4:	d9c02b17 	ldw	r7,172(sp)
    d6c8:	db402a17 	ldw	r13,168(sp)
    d6cc:	1000241e 	bne	r2,zero,d760 <___vfiprintf_internal_r+0xd50>
    d6d0:	d9401b17 	ldw	r5,108(sp)
    d6d4:	d8801c17 	ldw	r2,112(sp)
    d6d8:	d811883a 	mov	r8,sp
    d6dc:	29000044 	addi	r4,r5,1
    d6e0:	003fd806 	br	d644 <___vfiprintf_internal_r+0xc34>
    d6e4:	d9401b17 	ldw	r5,108(sp)
    d6e8:	00c000b4 	movhi	r3,2
    d6ec:	18fdd604 	addi	r3,r3,-2216
    d6f0:	d8c02415 	stw	r3,144(sp)
    d6f4:	29400044 	addi	r5,r5,1
    d6f8:	d8c02417 	ldw	r3,144(sp)
    d6fc:	14c5883a 	add	r2,r2,r19
    d700:	44c00115 	stw	r19,4(r8)
    d704:	40c00015 	stw	r3,0(r8)
    d708:	d8801c15 	stw	r2,112(sp)
    d70c:	d9401b15 	stw	r5,108(sp)
    d710:	00c001c4 	movi	r3,7
    d714:	1940070e 	bge	r3,r5,d734 <___vfiprintf_internal_r+0xd24>
    d718:	103e4826 	beq	r2,zero,d03c <___vfiprintf_internal_r+0x62c>
    d71c:	d9402117 	ldw	r5,132(sp)
    d720:	d9002017 	ldw	r4,128(sp)
    d724:	d9801a04 	addi	r6,sp,104
    d728:	000c8fc0 	call	c8fc <__sprint_r.part.0>
    d72c:	10000c1e 	bne	r2,zero,d760 <___vfiprintf_internal_r+0xd50>
    d730:	d8801c17 	ldw	r2,112(sp)
    d734:	8c80010e 	bge	r17,r18,d73c <___vfiprintf_internal_r+0xd2c>
    d738:	9023883a 	mov	r17,r18
    d73c:	da802317 	ldw	r10,140(sp)
    d740:	5455883a 	add	r10,r10,r17
    d744:	da802315 	stw	r10,140(sp)
    d748:	103e4126 	beq	r2,zero,d050 <___vfiprintf_internal_r+0x640>
    d74c:	d9402117 	ldw	r5,132(sp)
    d750:	d9002017 	ldw	r4,128(sp)
    d754:	d9801a04 	addi	r6,sp,104
    d758:	000c8fc0 	call	c8fc <__sprint_r.part.0>
    d75c:	103e3c26 	beq	r2,zero,d050 <___vfiprintf_internal_r+0x640>
    d760:	dd002117 	ldw	r20,132(sp)
    d764:	a080030b 	ldhu	r2,12(r20)
    d768:	1080100c 	andi	r2,r2,64
    d76c:	1001231e 	bne	r2,zero,dbfc <___vfiprintf_internal_r+0x11ec>
    d770:	d8802317 	ldw	r2,140(sp)
    d774:	003d7b06 	br	cd64 <___vfiprintf_internal_r+0x354>
    d778:	1000991e 	bne	r2,zero,d9e0 <___vfiprintf_internal_r+0xfd0>
    d77c:	00c00044 	movi	r3,1
    d780:	9805883a 	mov	r2,r19
    d784:	dd400015 	stw	r21,0(sp)
    d788:	dcc00115 	stw	r19,4(sp)
    d78c:	dcc01c15 	stw	r19,112(sp)
    d790:	d8c01b15 	stw	r3,108(sp)
    d794:	d811883a 	mov	r8,sp
    d798:	42000204 	addi	r8,r8,8
    d79c:	a2c0010c 	andi	r11,r20,4
    d7a0:	583fe426 	beq	r11,zero,d734 <___vfiprintf_internal_r+0xd24>
    d7a4:	8ca7c83a 	sub	r19,r17,r18
    d7a8:	04ffe20e 	bge	zero,r19,d734 <___vfiprintf_internal_r+0xd24>
    d7ac:	01c00404 	movi	r7,16
    d7b0:	3cffcc0e 	bge	r7,r19,d6e4 <___vfiprintf_internal_r+0xcd4>
    d7b4:	028000b4 	movhi	r10,2
    d7b8:	52bdd604 	addi	r10,r10,-2216
    d7bc:	d9001b17 	ldw	r4,108(sp)
    d7c0:	da802415 	stw	r10,144(sp)
    d7c4:	382b883a 	mov	r21,r7
    d7c8:	050001c4 	movi	r20,7
    d7cc:	df002017 	ldw	fp,128(sp)
    d7d0:	00000506 	br	d7e8 <___vfiprintf_internal_r+0xdd8>
    d7d4:	21400084 	addi	r5,r4,2
    d7d8:	42000204 	addi	r8,r8,8
    d7dc:	1809883a 	mov	r4,r3
    d7e0:	9cfffc04 	addi	r19,r19,-16
    d7e4:	acffc40e 	bge	r21,r19,d6f8 <___vfiprintf_internal_r+0xce8>
    d7e8:	10800404 	addi	r2,r2,16
    d7ec:	20c00044 	addi	r3,r4,1
    d7f0:	45800015 	stw	r22,0(r8)
    d7f4:	45400115 	stw	r21,4(r8)
    d7f8:	d8801c15 	stw	r2,112(sp)
    d7fc:	d8c01b15 	stw	r3,108(sp)
    d800:	a0fff40e 	bge	r20,r3,d7d4 <___vfiprintf_internal_r+0xdc4>
    d804:	1000041e 	bne	r2,zero,d818 <___vfiprintf_internal_r+0xe08>
    d808:	01400044 	movi	r5,1
    d80c:	0009883a 	mov	r4,zero
    d810:	d811883a 	mov	r8,sp
    d814:	003ff206 	br	d7e0 <___vfiprintf_internal_r+0xdd0>
    d818:	d9402117 	ldw	r5,132(sp)
    d81c:	d9801a04 	addi	r6,sp,104
    d820:	e009883a 	mov	r4,fp
    d824:	000c8fc0 	call	c8fc <__sprint_r.part.0>
    d828:	103fcd1e 	bne	r2,zero,d760 <___vfiprintf_internal_r+0xd50>
    d82c:	d9001b17 	ldw	r4,108(sp)
    d830:	d8801c17 	ldw	r2,112(sp)
    d834:	d811883a 	mov	r8,sp
    d838:	21400044 	addi	r5,r4,1
    d83c:	003fe806 	br	d7e0 <___vfiprintf_internal_r+0xdd0>
    d840:	d9402117 	ldw	r5,132(sp)
    d844:	d9002017 	ldw	r4,128(sp)
    d848:	d9801a04 	addi	r6,sp,104
    d84c:	d9c02b15 	stw	r7,172(sp)
    d850:	db402a15 	stw	r13,168(sp)
    d854:	000c8fc0 	call	c8fc <__sprint_r.part.0>
    d858:	d9c02b17 	ldw	r7,172(sp)
    d85c:	db402a17 	ldw	r13,168(sp)
    d860:	103fbf1e 	bne	r2,zero,d760 <___vfiprintf_internal_r+0xd50>
    d864:	d9401b17 	ldw	r5,108(sp)
    d868:	d8801c17 	ldw	r2,112(sp)
    d86c:	d811883a 	mov	r8,sp
    d870:	29800044 	addi	r6,r5,1
    d874:	003dc406 	br	cf88 <___vfiprintf_internal_r+0x578>
    d878:	1000d21e 	bne	r2,zero,dbc4 <___vfiprintf_internal_r+0x11b4>
    d87c:	d8c01d87 	ldb	r3,118(sp)
    d880:	18009526 	beq	r3,zero,dad8 <___vfiprintf_internal_r+0x10c8>
    d884:	00800044 	movi	r2,1
    d888:	d8c01d84 	addi	r3,sp,118
    d88c:	1009883a 	mov	r4,r2
    d890:	d8c00015 	stw	r3,0(sp)
    d894:	d8800115 	stw	r2,4(sp)
    d898:	d811883a 	mov	r8,sp
    d89c:	200b883a 	mov	r5,r4
    d8a0:	42000204 	addi	r8,r8,8
    d8a4:	21000044 	addi	r4,r4,1
    d8a8:	003d9706 	br	cf08 <___vfiprintf_internal_r+0x4f8>
    d8ac:	d9001d04 	addi	r4,sp,116
    d8b0:	00800084 	movi	r2,2
    d8b4:	d9000015 	stw	r4,0(sp)
    d8b8:	d8800115 	stw	r2,4(sp)
    d8bc:	1809883a 	mov	r4,r3
    d8c0:	d811883a 	mov	r8,sp
    d8c4:	200b883a 	mov	r5,r4
    d8c8:	42000204 	addi	r8,r8,8
    d8cc:	21000044 	addi	r4,r4,1
    d8d0:	003f4e06 	br	d60c <___vfiprintf_internal_r+0xbfc>
    d8d4:	d8001d85 	stb	zero,118(sp)
    d8d8:	48005016 	blt	r9,zero,da1c <___vfiprintf_internal_r+0x100c>
    d8dc:	00ffdfc4 	movi	r3,-129
    d8e0:	94c4b03a 	or	r2,r18,r19
    d8e4:	a0e8703a 	and	r20,r20,r3
    d8e8:	103d4426 	beq	r2,zero,cdfc <___vfiprintf_internal_r+0x3ec>
    d8ec:	0039883a 	mov	fp,zero
    d8f0:	d9002617 	ldw	r4,152(sp)
    d8f4:	dd401a04 	addi	r21,sp,104
    d8f8:	908003cc 	andi	r2,r18,15
    d8fc:	9806973a 	slli	r3,r19,28
    d900:	2085883a 	add	r2,r4,r2
    d904:	9024d13a 	srli	r18,r18,4
    d908:	10800003 	ldbu	r2,0(r2)
    d90c:	9826d13a 	srli	r19,r19,4
    d910:	ad7fffc4 	addi	r21,r21,-1
    d914:	1ca4b03a 	or	r18,r3,r18
    d918:	a8800005 	stb	r2,0(r21)
    d91c:	94c4b03a 	or	r2,r18,r19
    d920:	103ff51e 	bne	r2,zero,d8f8 <___vfiprintf_internal_r+0xee8>
    d924:	003e5906 	br	d28c <___vfiprintf_internal_r+0x87c>
    d928:	d9402117 	ldw	r5,132(sp)
    d92c:	d9002017 	ldw	r4,128(sp)
    d930:	d9801a04 	addi	r6,sp,104
    d934:	000c8fc0 	call	c8fc <__sprint_r.part.0>
    d938:	103f891e 	bne	r2,zero,d760 <___vfiprintf_internal_r+0xd50>
    d93c:	d8801c17 	ldw	r2,112(sp)
    d940:	d811883a 	mov	r8,sp
    d944:	003f9506 	br	d79c <___vfiprintf_internal_r+0xd8c>
    d948:	d9402117 	ldw	r5,132(sp)
    d94c:	d9002017 	ldw	r4,128(sp)
    d950:	d9801a04 	addi	r6,sp,104
    d954:	000c8fc0 	call	c8fc <__sprint_r.part.0>
    d958:	103f811e 	bne	r2,zero,d760 <___vfiprintf_internal_r+0xd50>
    d95c:	d811883a 	mov	r8,sp
    d960:	003ced06 	br	cd18 <___vfiprintf_internal_r+0x308>
    d964:	d9402117 	ldw	r5,132(sp)
    d968:	d9002017 	ldw	r4,128(sp)
    d96c:	d9801a04 	addi	r6,sp,104
    d970:	da402c15 	stw	r9,176(sp)
    d974:	db802a15 	stw	r14,168(sp)
    d978:	000c8fc0 	call	c8fc <__sprint_r.part.0>
    d97c:	da402c17 	ldw	r9,176(sp)
    d980:	db802a17 	ldw	r14,168(sp)
    d984:	103f761e 	bne	r2,zero,d760 <___vfiprintf_internal_r+0xd50>
    d988:	d9401b17 	ldw	r5,108(sp)
    d98c:	d8801c17 	ldw	r2,112(sp)
    d990:	d811883a 	mov	r8,sp
    d994:	29000044 	addi	r4,r5,1
    d998:	003d5b06 	br	cf08 <___vfiprintf_internal_r+0x4f8>
    d99c:	d9402117 	ldw	r5,132(sp)
    d9a0:	d9002017 	ldw	r4,128(sp)
    d9a4:	d9801a04 	addi	r6,sp,104
    d9a8:	da402c15 	stw	r9,176(sp)
    d9ac:	000c8fc0 	call	c8fc <__sprint_r.part.0>
    d9b0:	da402c17 	ldw	r9,176(sp)
    d9b4:	103f6a1e 	bne	r2,zero,d760 <___vfiprintf_internal_r+0xd50>
    d9b8:	d9401b17 	ldw	r5,108(sp)
    d9bc:	d8801c17 	ldw	r2,112(sp)
    d9c0:	d811883a 	mov	r8,sp
    d9c4:	29000044 	addi	r4,r5,1
    d9c8:	003f1006 	br	d60c <___vfiprintf_internal_r+0xbfc>
    d9cc:	1000c31e 	bne	r2,zero,dcdc <___vfiprintf_internal_r+0x12cc>
    d9d0:	01000044 	movi	r4,1
    d9d4:	000b883a 	mov	r5,zero
    d9d8:	d811883a 	mov	r8,sp
    d9dc:	003f0d06 	br	d614 <___vfiprintf_internal_r+0xc04>
    d9e0:	d9402117 	ldw	r5,132(sp)
    d9e4:	d9002017 	ldw	r4,128(sp)
    d9e8:	d9801a04 	addi	r6,sp,104
    d9ec:	000c8fc0 	call	c8fc <__sprint_r.part.0>
    d9f0:	103f5b1e 	bne	r2,zero,d760 <___vfiprintf_internal_r+0xd50>
    d9f4:	d9001b17 	ldw	r4,108(sp)
    d9f8:	d8801c17 	ldw	r2,112(sp)
    d9fc:	d811883a 	mov	r8,sp
    da00:	21000044 	addi	r4,r4,1
    da04:	003d8006 	br	d008 <___vfiprintf_internal_r+0x5f8>
    da08:	010000b4 	movhi	r4,2
    da0c:	213d6204 	addi	r4,r4,-2680
    da10:	d9002615 	stw	r4,152(sp)
    da14:	d8c02215 	stw	r3,136(sp)
    da18:	1029883a 	mov	r20,r2
    da1c:	94c4b03a 	or	r2,r18,r19
    da20:	103fb21e 	bne	r2,zero,d8ec <___vfiprintf_internal_r+0xedc>
    da24:	0039883a 	mov	fp,zero
    da28:	00800084 	movi	r2,2
    da2c:	003e6b06 	br	d3dc <___vfiprintf_internal_r+0x9cc>
    da30:	da802217 	ldw	r10,136(sp)
    da34:	d8001d85 	stb	zero,118(sp)
    da38:	0027883a 	mov	r19,zero
    da3c:	50800104 	addi	r2,r10,4
    da40:	54800017 	ldw	r18,0(r10)
    da44:	483e6016 	blt	r9,zero,d3c8 <___vfiprintf_internal_r+0x9b8>
    da48:	00ffdfc4 	movi	r3,-129
    da4c:	d8802215 	stw	r2,136(sp)
    da50:	a0e8703a 	and	r20,r20,r3
    da54:	0039883a 	mov	fp,zero
    da58:	903ebb26 	beq	r18,zero,d548 <___vfiprintf_internal_r+0xb38>
    da5c:	00800244 	movi	r2,9
    da60:	14bdee36 	bltu	r2,r18,d21c <___vfiprintf_internal_r+0x80c>
    da64:	003eba06 	br	d550 <___vfiprintf_internal_r+0xb40>
    da68:	00800c04 	movi	r2,48
    da6c:	d8c01d45 	stb	r3,117(sp)
    da70:	d8801d05 	stb	r2,116(sp)
    da74:	d8001d85 	stb	zero,118(sp)
    da78:	a0c00094 	ori	r3,r20,2
    da7c:	4800a916 	blt	r9,zero,dd24 <___vfiprintf_internal_r+0x1314>
    da80:	00bfdfc4 	movi	r2,-129
    da84:	a096703a 	and	r11,r20,r2
    da88:	5d000094 	ori	r20,r11,2
    da8c:	0039883a 	mov	fp,zero
    da90:	003f9706 	br	d8f0 <___vfiprintf_internal_r+0xee0>
    da94:	8025883a 	mov	r18,r16
    da98:	003c2e06 	br	cb54 <___vfiprintf_internal_r+0x144>
    da9c:	008000b4 	movhi	r2,2
    daa0:	10bd6204 	addi	r2,r2,-2680
    daa4:	0039883a 	mov	fp,zero
    daa8:	d8802615 	stw	r2,152(sp)
    daac:	003f9006 	br	d8f0 <___vfiprintf_internal_r+0xee0>
    dab0:	04a5c83a 	sub	r18,zero,r18
    dab4:	07000b44 	movi	fp,45
    dab8:	9004c03a 	cmpne	r2,r18,zero
    dabc:	04e7c83a 	sub	r19,zero,r19
    dac0:	df001d85 	stb	fp,118(sp)
    dac4:	98a7c83a 	sub	r19,r19,r2
    dac8:	48009f16 	blt	r9,zero,dd48 <___vfiprintf_internal_r+0x1338>
    dacc:	00bfdfc4 	movi	r2,-129
    dad0:	a0a8703a 	and	r20,r20,r2
    dad4:	003dd006 	br	d218 <___vfiprintf_internal_r+0x808>
    dad8:	70004c26 	beq	r14,zero,dc0c <___vfiprintf_internal_r+0x11fc>
    dadc:	00800084 	movi	r2,2
    dae0:	d8c01d04 	addi	r3,sp,116
    dae4:	d8c00015 	stw	r3,0(sp)
    dae8:	d8800115 	stw	r2,4(sp)
    daec:	01000044 	movi	r4,1
    daf0:	d811883a 	mov	r8,sp
    daf4:	003f7306 	br	d8c4 <___vfiprintf_internal_r+0xeb4>
    daf8:	a080100c 	andi	r2,r20,64
    dafc:	da802217 	ldw	r10,136(sp)
    db00:	103e0626 	beq	r2,zero,d31c <___vfiprintf_internal_r+0x90c>
    db04:	5480000f 	ldh	r18,0(r10)
    db08:	52800104 	addi	r10,r10,4
    db0c:	da802215 	stw	r10,136(sp)
    db10:	9027d7fa 	srai	r19,r18,31
    db14:	9805883a 	mov	r2,r19
    db18:	003db806 	br	d1fc <___vfiprintf_internal_r+0x7ec>
    db1c:	a080040c 	andi	r2,r20,16
    db20:	1000091e 	bne	r2,zero,db48 <___vfiprintf_internal_r+0x1138>
    db24:	a2c0100c 	andi	r11,r20,64
    db28:	58000726 	beq	r11,zero,db48 <___vfiprintf_internal_r+0x1138>
    db2c:	da802217 	ldw	r10,136(sp)
    db30:	50800017 	ldw	r2,0(r10)
    db34:	52800104 	addi	r10,r10,4
    db38:	da802215 	stw	r10,136(sp)
    db3c:	da802317 	ldw	r10,140(sp)
    db40:	1280000d 	sth	r10,0(r2)
    db44:	003be706 	br	cae4 <___vfiprintf_internal_r+0xd4>
    db48:	da802217 	ldw	r10,136(sp)
    db4c:	50800017 	ldw	r2,0(r10)
    db50:	52800104 	addi	r10,r10,4
    db54:	da802215 	stw	r10,136(sp)
    db58:	da802317 	ldw	r10,140(sp)
    db5c:	12800015 	stw	r10,0(r2)
    db60:	003be006 	br	cae4 <___vfiprintf_internal_r+0xd4>
    db64:	a080100c 	andi	r2,r20,64
    db68:	da802217 	ldw	r10,136(sp)
    db6c:	10003026 	beq	r2,zero,dc30 <___vfiprintf_internal_r+0x1220>
    db70:	5480000b 	ldhu	r18,0(r10)
    db74:	52800104 	addi	r10,r10,4
    db78:	0027883a 	mov	r19,zero
    db7c:	da802215 	stw	r10,136(sp)
    db80:	003d8006 	br	d184 <___vfiprintf_internal_r+0x774>
    db84:	80c00007 	ldb	r3,0(r16)
    db88:	003c0006 	br	cb8c <___vfiprintf_internal_r+0x17c>
    db8c:	a080100c 	andi	r2,r20,64
    db90:	d8001d85 	stb	zero,118(sp)
    db94:	da802217 	ldw	r10,136(sp)
    db98:	1000201e 	bne	r2,zero,dc1c <___vfiprintf_internal_r+0x120c>
    db9c:	50800104 	addi	r2,r10,4
    dba0:	54800017 	ldw	r18,0(r10)
    dba4:	0027883a 	mov	r19,zero
    dba8:	483def0e 	bge	r9,zero,d368 <___vfiprintf_internal_r+0x958>
    dbac:	94c6b03a 	or	r3,r18,r19
    dbb0:	d8802215 	stw	r2,136(sp)
    dbb4:	183d4e1e 	bne	r3,zero,d0f0 <___vfiprintf_internal_r+0x6e0>
    dbb8:	0039883a 	mov	fp,zero
    dbbc:	0005883a 	mov	r2,zero
    dbc0:	003e0606 	br	d3dc <___vfiprintf_internal_r+0x9cc>
    dbc4:	d9402117 	ldw	r5,132(sp)
    dbc8:	d9002017 	ldw	r4,128(sp)
    dbcc:	d9801a04 	addi	r6,sp,104
    dbd0:	da402c15 	stw	r9,176(sp)
    dbd4:	db802a15 	stw	r14,168(sp)
    dbd8:	000c8fc0 	call	c8fc <__sprint_r.part.0>
    dbdc:	da402c17 	ldw	r9,176(sp)
    dbe0:	db802a17 	ldw	r14,168(sp)
    dbe4:	103ede1e 	bne	r2,zero,d760 <___vfiprintf_internal_r+0xd50>
    dbe8:	d9401b17 	ldw	r5,108(sp)
    dbec:	d8801c17 	ldw	r2,112(sp)
    dbf0:	d811883a 	mov	r8,sp
    dbf4:	29000044 	addi	r4,r5,1
    dbf8:	003e7406 	br	d5cc <___vfiprintf_internal_r+0xbbc>
    dbfc:	00bfffc4 	movi	r2,-1
    dc00:	003c5806 	br	cd64 <___vfiprintf_internal_r+0x354>
    dc04:	d811883a 	mov	r8,sp
    dc08:	003ee806 	br	d7ac <___vfiprintf_internal_r+0xd9c>
    dc0c:	000b883a 	mov	r5,zero
    dc10:	01000044 	movi	r4,1
    dc14:	d811883a 	mov	r8,sp
    dc18:	003e7c06 	br	d60c <___vfiprintf_internal_r+0xbfc>
    dc1c:	50800104 	addi	r2,r10,4
    dc20:	5480000b 	ldhu	r18,0(r10)
    dc24:	0027883a 	mov	r19,zero
    dc28:	483dcf0e 	bge	r9,zero,d368 <___vfiprintf_internal_r+0x958>
    dc2c:	003fdf06 	br	dbac <___vfiprintf_internal_r+0x119c>
    dc30:	54800017 	ldw	r18,0(r10)
    dc34:	52800104 	addi	r10,r10,4
    dc38:	0027883a 	mov	r19,zero
    dc3c:	da802215 	stw	r10,136(sp)
    dc40:	003d5006 	br	d184 <___vfiprintf_internal_r+0x774>
    dc44:	50800104 	addi	r2,r10,4
    dc48:	5480000b 	ldhu	r18,0(r10)
    dc4c:	0027883a 	mov	r19,zero
    dc50:	483f7d0e 	bge	r9,zero,da48 <___vfiprintf_internal_r+0x1038>
    dc54:	003ddc06 	br	d3c8 <___vfiprintf_internal_r+0x9b8>
    dc58:	d8c02215 	stw	r3,136(sp)
    dc5c:	0039883a 	mov	fp,zero
    dc60:	003ddb06 	br	d3d0 <___vfiprintf_internal_r+0x9c0>
    dc64:	028000b4 	movhi	r10,2
    dc68:	52bdd204 	addi	r10,r10,-2232
    dc6c:	da802415 	stw	r10,144(sp)
    dc70:	003e8306 	br	d680 <___vfiprintf_internal_r+0xc70>
    dc74:	d8801c17 	ldw	r2,112(sp)
    dc78:	dd002117 	ldw	r20,132(sp)
    dc7c:	103eb926 	beq	r2,zero,d764 <___vfiprintf_internal_r+0xd54>
    dc80:	d9002017 	ldw	r4,128(sp)
    dc84:	d9801a04 	addi	r6,sp,104
    dc88:	a00b883a 	mov	r5,r20
    dc8c:	000c8fc0 	call	c8fc <__sprint_r.part.0>
    dc90:	003eb406 	br	d764 <___vfiprintf_internal_r+0xd54>
    dc94:	80c00043 	ldbu	r3,1(r16)
    dc98:	a5000814 	ori	r20,r20,32
    dc9c:	84000044 	addi	r16,r16,1
    dca0:	18c03fcc 	andi	r3,r3,255
    dca4:	18c0201c 	xori	r3,r3,128
    dca8:	18ffe004 	addi	r3,r3,-128
    dcac:	003bb706 	br	cb8c <___vfiprintf_internal_r+0x17c>
    dcb0:	a809883a 	mov	r4,r21
    dcb4:	d8c02a15 	stw	r3,168(sp)
    dcb8:	da002b15 	stw	r8,172(sp)
    dcbc:	000b4580 	call	b458 <strlen>
    dcc0:	d8c02a17 	ldw	r3,168(sp)
    dcc4:	1027883a 	mov	r19,r2
    dcc8:	df001d83 	ldbu	fp,118(sp)
    dccc:	d8c02215 	stw	r3,136(sp)
    dcd0:	0013883a 	mov	r9,zero
    dcd4:	da002b17 	ldw	r8,172(sp)
    dcd8:	003c4d06 	br	ce10 <___vfiprintf_internal_r+0x400>
    dcdc:	d9402117 	ldw	r5,132(sp)
    dce0:	d9002017 	ldw	r4,128(sp)
    dce4:	d9801a04 	addi	r6,sp,104
    dce8:	da402c15 	stw	r9,176(sp)
    dcec:	000c8fc0 	call	c8fc <__sprint_r.part.0>
    dcf0:	da402c17 	ldw	r9,176(sp)
    dcf4:	103e9a1e 	bne	r2,zero,d760 <___vfiprintf_internal_r+0xd50>
    dcf8:	d9401b17 	ldw	r5,108(sp)
    dcfc:	d8801c17 	ldw	r2,112(sp)
    dd00:	d811883a 	mov	r8,sp
    dd04:	29000044 	addi	r4,r5,1
    dd08:	003e4206 	br	d614 <___vfiprintf_internal_r+0xc04>
    dd0c:	d9401b17 	ldw	r5,108(sp)
    dd10:	010000b4 	movhi	r4,2
    dd14:	213dd604 	addi	r4,r4,-2216
    dd18:	d9002415 	stw	r4,144(sp)
    dd1c:	29400044 	addi	r5,r5,1
    dd20:	003c6d06 	br	ced8 <___vfiprintf_internal_r+0x4c8>
    dd24:	0039883a 	mov	fp,zero
    dd28:	00800084 	movi	r2,2
    dd2c:	10803fcc 	andi	r2,r2,255
    dd30:	01000044 	movi	r4,1
    dd34:	11001e26 	beq	r2,r4,ddb0 <___vfiprintf_internal_r+0x13a0>
    dd38:	01000084 	movi	r4,2
    dd3c:	11001e1e 	bne	r2,r4,ddb8 <___vfiprintf_internal_r+0x13a8>
    dd40:	1829883a 	mov	r20,r3
    dd44:	003eea06 	br	d8f0 <___vfiprintf_internal_r+0xee0>
    dd48:	a007883a 	mov	r3,r20
    dd4c:	00800044 	movi	r2,1
    dd50:	003ff606 	br	dd2c <___vfiprintf_internal_r+0x131c>
    dd54:	00800184 	movi	r2,6
    dd58:	1240012e 	bgeu	r2,r9,dd60 <___vfiprintf_internal_r+0x1350>
    dd5c:	1013883a 	mov	r9,r2
    dd60:	4827883a 	mov	r19,r9
    dd64:	4825883a 	mov	r18,r9
    dd68:	48001516 	blt	r9,zero,ddc0 <___vfiprintf_internal_r+0x13b0>
    dd6c:	054000b4 	movhi	r21,2
    dd70:	d8c02215 	stw	r3,136(sp)
    dd74:	ad7d6704 	addi	r21,r21,-2660
    dd78:	003d1406 	br	d1cc <___vfiprintf_internal_r+0x7bc>
    dd7c:	028000b4 	movhi	r10,2
    dd80:	52bdd204 	addi	r10,r10,-2232
    dd84:	da802415 	stw	r10,144(sp)
    dd88:	200d883a 	mov	r6,r4
    dd8c:	003c9106 	br	cfd4 <___vfiprintf_internal_r+0x5c4>
    dd90:	5021883a 	mov	r16,r10
    dd94:	0013883a 	mov	r9,zero
    dd98:	003b7d06 	br	cb90 <___vfiprintf_internal_r+0x180>
    dd9c:	4827883a 	mov	r19,r9
    dda0:	df001d83 	ldbu	fp,118(sp)
    dda4:	d8c02215 	stw	r3,136(sp)
    dda8:	0013883a 	mov	r9,zero
    ddac:	003c1806 	br	ce10 <___vfiprintf_internal_r+0x400>
    ddb0:	1829883a 	mov	r20,r3
    ddb4:	003d1806 	br	d218 <___vfiprintf_internal_r+0x808>
    ddb8:	1829883a 	mov	r20,r3
    ddbc:	003ccd06 	br	d0f4 <___vfiprintf_internal_r+0x6e4>
    ddc0:	0025883a 	mov	r18,zero
    ddc4:	003fe906 	br	dd6c <___vfiprintf_internal_r+0x135c>
    ddc8:	d8802217 	ldw	r2,136(sp)
    ddcc:	80c00043 	ldbu	r3,1(r16)
    ddd0:	5021883a 	mov	r16,r10
    ddd4:	12400017 	ldw	r9,0(r2)
    ddd8:	10800104 	addi	r2,r2,4
    dddc:	d8802215 	stw	r2,136(sp)
    dde0:	483faf0e 	bge	r9,zero,dca0 <___vfiprintf_internal_r+0x1290>
    dde4:	18c03fcc 	andi	r3,r3,255
    dde8:	18c0201c 	xori	r3,r3,128
    ddec:	027fffc4 	movi	r9,-1
    ddf0:	18ffe004 	addi	r3,r3,-128
    ddf4:	003b6506 	br	cb8c <___vfiprintf_internal_r+0x17c>
    ddf8:	d9c01d85 	stb	r7,118(sp)
    ddfc:	003ca006 	br	d080 <___vfiprintf_internal_r+0x670>
    de00:	d9c01d85 	stb	r7,118(sp)
    de04:	003cad06 	br	d0bc <___vfiprintf_internal_r+0x6ac>
    de08:	d9c01d85 	stb	r7,118(sp)
    de0c:	003d7d06 	br	d404 <___vfiprintf_internal_r+0x9f4>
    de10:	d9c01d85 	stb	r7,118(sp)
    de14:	003d5f06 	br	d394 <___vfiprintf_internal_r+0x984>
    de18:	a080004c 	andi	r2,r20,1
    de1c:	0039883a 	mov	fp,zero
    de20:	10000526 	beq	r2,zero,de38 <___vfiprintf_internal_r+0x1428>
    de24:	00800c04 	movi	r2,48
    de28:	d88019c5 	stb	r2,103(sp)
    de2c:	dcc02717 	ldw	r19,156(sp)
    de30:	dd4019c4 	addi	r21,sp,103
    de34:	003bf606 	br	ce10 <___vfiprintf_internal_r+0x400>
    de38:	0027883a 	mov	r19,zero
    de3c:	dd401a04 	addi	r21,sp,104
    de40:	003bf306 	br	ce10 <___vfiprintf_internal_r+0x400>
    de44:	d9c01d85 	stb	r7,118(sp)
    de48:	003dc806 	br	d56c <___vfiprintf_internal_r+0xb5c>
    de4c:	d9c01d85 	stb	r7,118(sp)
    de50:	003d3a06 	br	d33c <___vfiprintf_internal_r+0x92c>
    de54:	d9c01d85 	stb	r7,118(sp)
    de58:	003d2a06 	br	d304 <___vfiprintf_internal_r+0x8f4>
    de5c:	d9c01d85 	stb	r7,118(sp)
    de60:	003cde06 	br	d1dc <___vfiprintf_internal_r+0x7cc>
    de64:	d9c01d85 	stb	r7,118(sp)
    de68:	003cbc06 	br	d15c <___vfiprintf_internal_r+0x74c>

0000de6c <__vfiprintf_internal>:
    de6c:	008000b4 	movhi	r2,2
    de70:	10864604 	addi	r2,r2,6424
    de74:	300f883a 	mov	r7,r6
    de78:	280d883a 	mov	r6,r5
    de7c:	200b883a 	mov	r5,r4
    de80:	11000017 	ldw	r4,0(r2)
    de84:	000ca101 	jmpi	ca10 <___vfiprintf_internal_r>

0000de88 <__sbprintf>:
    de88:	2880030b 	ldhu	r2,12(r5)
    de8c:	2ac01917 	ldw	r11,100(r5)
    de90:	2a80038b 	ldhu	r10,14(r5)
    de94:	2a400717 	ldw	r9,28(r5)
    de98:	2a000917 	ldw	r8,36(r5)
    de9c:	defee204 	addi	sp,sp,-1144
    dea0:	00c10004 	movi	r3,1024
    dea4:	dc011a15 	stw	r16,1128(sp)
    dea8:	10bfff4c 	andi	r2,r2,65533
    deac:	2821883a 	mov	r16,r5
    deb0:	d8cb883a 	add	r5,sp,r3
    deb4:	dc811c15 	stw	r18,1136(sp)
    deb8:	dc411b15 	stw	r17,1132(sp)
    debc:	dfc11d15 	stw	ra,1140(sp)
    dec0:	2025883a 	mov	r18,r4
    dec4:	d881030d 	sth	r2,1036(sp)
    dec8:	dac11915 	stw	r11,1124(sp)
    decc:	da81038d 	sth	r10,1038(sp)
    ded0:	da410715 	stw	r9,1052(sp)
    ded4:	da010915 	stw	r8,1060(sp)
    ded8:	dec10015 	stw	sp,1024(sp)
    dedc:	dec10415 	stw	sp,1040(sp)
    dee0:	d8c10215 	stw	r3,1032(sp)
    dee4:	d8c10515 	stw	r3,1044(sp)
    dee8:	d8010615 	stw	zero,1048(sp)
    deec:	000ca100 	call	ca10 <___vfiprintf_internal_r>
    def0:	1023883a 	mov	r17,r2
    def4:	10000416 	blt	r2,zero,df08 <__sbprintf+0x80>
    def8:	d9410004 	addi	r5,sp,1024
    defc:	9009883a 	mov	r4,r18
    df00:	000899c0 	call	899c <_fflush_r>
    df04:	10000d1e 	bne	r2,zero,df3c <__sbprintf+0xb4>
    df08:	d881030b 	ldhu	r2,1036(sp)
    df0c:	1080100c 	andi	r2,r2,64
    df10:	10000326 	beq	r2,zero,df20 <__sbprintf+0x98>
    df14:	8080030b 	ldhu	r2,12(r16)
    df18:	10801014 	ori	r2,r2,64
    df1c:	8080030d 	sth	r2,12(r16)
    df20:	8805883a 	mov	r2,r17
    df24:	dfc11d17 	ldw	ra,1140(sp)
    df28:	dc811c17 	ldw	r18,1136(sp)
    df2c:	dc411b17 	ldw	r17,1132(sp)
    df30:	dc011a17 	ldw	r16,1128(sp)
    df34:	dec11e04 	addi	sp,sp,1144
    df38:	f800283a 	ret
    df3c:	047fffc4 	movi	r17,-1
    df40:	003ff106 	br	df08 <__sbprintf+0x80>

0000df44 <_write_r>:
    df44:	defffd04 	addi	sp,sp,-12
    df48:	2805883a 	mov	r2,r5
    df4c:	dc000015 	stw	r16,0(sp)
    df50:	040000b4 	movhi	r16,2
    df54:	dc400115 	stw	r17,4(sp)
    df58:	300b883a 	mov	r5,r6
    df5c:	840e5404 	addi	r16,r16,14672
    df60:	2023883a 	mov	r17,r4
    df64:	380d883a 	mov	r6,r7
    df68:	1009883a 	mov	r4,r2
    df6c:	dfc00215 	stw	ra,8(sp)
    df70:	80000015 	stw	zero,0(r16)
    df74:	0012f040 	call	12f04 <write>
    df78:	00ffffc4 	movi	r3,-1
    df7c:	10c00526 	beq	r2,r3,df94 <_write_r+0x50>
    df80:	dfc00217 	ldw	ra,8(sp)
    df84:	dc400117 	ldw	r17,4(sp)
    df88:	dc000017 	ldw	r16,0(sp)
    df8c:	dec00304 	addi	sp,sp,12
    df90:	f800283a 	ret
    df94:	80c00017 	ldw	r3,0(r16)
    df98:	183ff926 	beq	r3,zero,df80 <_write_r+0x3c>
    df9c:	88c00015 	stw	r3,0(r17)
    dfa0:	003ff706 	br	df80 <_write_r+0x3c>

0000dfa4 <_close_r>:
    dfa4:	defffd04 	addi	sp,sp,-12
    dfa8:	dc000015 	stw	r16,0(sp)
    dfac:	040000b4 	movhi	r16,2
    dfb0:	dc400115 	stw	r17,4(sp)
    dfb4:	840e5404 	addi	r16,r16,14672
    dfb8:	2023883a 	mov	r17,r4
    dfbc:	2809883a 	mov	r4,r5
    dfc0:	dfc00215 	stw	ra,8(sp)
    dfc4:	80000015 	stw	zero,0(r16)
    dfc8:	00126fc0 	call	126fc <close>
    dfcc:	00ffffc4 	movi	r3,-1
    dfd0:	10c00526 	beq	r2,r3,dfe8 <_close_r+0x44>
    dfd4:	dfc00217 	ldw	ra,8(sp)
    dfd8:	dc400117 	ldw	r17,4(sp)
    dfdc:	dc000017 	ldw	r16,0(sp)
    dfe0:	dec00304 	addi	sp,sp,12
    dfe4:	f800283a 	ret
    dfe8:	80c00017 	ldw	r3,0(r16)
    dfec:	183ff926 	beq	r3,zero,dfd4 <_close_r+0x30>
    dff0:	88c00015 	stw	r3,0(r17)
    dff4:	003ff706 	br	dfd4 <_close_r+0x30>

0000dff8 <_calloc_r>:
    dff8:	298b383a 	mul	r5,r5,r6
    dffc:	defffe04 	addi	sp,sp,-8
    e000:	dfc00115 	stw	ra,4(sp)
    e004:	dc000015 	stw	r16,0(sp)
    e008:	000961c0 	call	961c <_malloc_r>
    e00c:	10002926 	beq	r2,zero,e0b4 <_calloc_r+0xbc>
    e010:	11bfff17 	ldw	r6,-4(r2)
    e014:	1021883a 	mov	r16,r2
    e018:	00bfff04 	movi	r2,-4
    e01c:	308c703a 	and	r6,r6,r2
    e020:	00c00904 	movi	r3,36
    e024:	308d883a 	add	r6,r6,r2
    e028:	19801636 	bltu	r3,r6,e084 <_calloc_r+0x8c>
    e02c:	008004c4 	movi	r2,19
    e030:	11800b2e 	bgeu	r2,r6,e060 <_calloc_r+0x68>
    e034:	80000015 	stw	zero,0(r16)
    e038:	80000115 	stw	zero,4(r16)
    e03c:	008006c4 	movi	r2,27
    e040:	11801a2e 	bgeu	r2,r6,e0ac <_calloc_r+0xb4>
    e044:	80000215 	stw	zero,8(r16)
    e048:	80000315 	stw	zero,12(r16)
    e04c:	30c0151e 	bne	r6,r3,e0a4 <_calloc_r+0xac>
    e050:	80000415 	stw	zero,16(r16)
    e054:	80800604 	addi	r2,r16,24
    e058:	80000515 	stw	zero,20(r16)
    e05c:	00000106 	br	e064 <_calloc_r+0x6c>
    e060:	8005883a 	mov	r2,r16
    e064:	10000015 	stw	zero,0(r2)
    e068:	10000115 	stw	zero,4(r2)
    e06c:	10000215 	stw	zero,8(r2)
    e070:	8005883a 	mov	r2,r16
    e074:	dfc00117 	ldw	ra,4(sp)
    e078:	dc000017 	ldw	r16,0(sp)
    e07c:	dec00204 	addi	sp,sp,8
    e080:	f800283a 	ret
    e084:	000b883a 	mov	r5,zero
    e088:	8009883a 	mov	r4,r16
    e08c:	000a0540 	call	a054 <memset>
    e090:	8005883a 	mov	r2,r16
    e094:	dfc00117 	ldw	ra,4(sp)
    e098:	dc000017 	ldw	r16,0(sp)
    e09c:	dec00204 	addi	sp,sp,8
    e0a0:	f800283a 	ret
    e0a4:	80800404 	addi	r2,r16,16
    e0a8:	003fee06 	br	e064 <_calloc_r+0x6c>
    e0ac:	80800204 	addi	r2,r16,8
    e0b0:	003fec06 	br	e064 <_calloc_r+0x6c>
    e0b4:	0005883a 	mov	r2,zero
    e0b8:	003fee06 	br	e074 <_calloc_r+0x7c>

0000e0bc <_fclose_r>:
    e0bc:	28003926 	beq	r5,zero,e1a4 <_fclose_r+0xe8>
    e0c0:	defffc04 	addi	sp,sp,-16
    e0c4:	dc400115 	stw	r17,4(sp)
    e0c8:	dc000015 	stw	r16,0(sp)
    e0cc:	dfc00315 	stw	ra,12(sp)
    e0d0:	dc800215 	stw	r18,8(sp)
    e0d4:	2023883a 	mov	r17,r4
    e0d8:	2821883a 	mov	r16,r5
    e0dc:	20000226 	beq	r4,zero,e0e8 <_fclose_r+0x2c>
    e0e0:	20800e17 	ldw	r2,56(r4)
    e0e4:	10002726 	beq	r2,zero,e184 <_fclose_r+0xc8>
    e0e8:	8080030f 	ldh	r2,12(r16)
    e0ec:	1000071e 	bne	r2,zero,e10c <_fclose_r+0x50>
    e0f0:	0005883a 	mov	r2,zero
    e0f4:	dfc00317 	ldw	ra,12(sp)
    e0f8:	dc800217 	ldw	r18,8(sp)
    e0fc:	dc400117 	ldw	r17,4(sp)
    e100:	dc000017 	ldw	r16,0(sp)
    e104:	dec00404 	addi	sp,sp,16
    e108:	f800283a 	ret
    e10c:	800b883a 	mov	r5,r16
    e110:	8809883a 	mov	r4,r17
    e114:	00087800 	call	8780 <__sflush_r>
    e118:	1025883a 	mov	r18,r2
    e11c:	80800b17 	ldw	r2,44(r16)
    e120:	10000426 	beq	r2,zero,e134 <_fclose_r+0x78>
    e124:	81400717 	ldw	r5,28(r16)
    e128:	8809883a 	mov	r4,r17
    e12c:	103ee83a 	callr	r2
    e130:	10001616 	blt	r2,zero,e18c <_fclose_r+0xd0>
    e134:	8080030b 	ldhu	r2,12(r16)
    e138:	1080200c 	andi	r2,r2,128
    e13c:	1000151e 	bne	r2,zero,e194 <_fclose_r+0xd8>
    e140:	81400c17 	ldw	r5,48(r16)
    e144:	28000526 	beq	r5,zero,e15c <_fclose_r+0xa0>
    e148:	80801004 	addi	r2,r16,64
    e14c:	28800226 	beq	r5,r2,e158 <_fclose_r+0x9c>
    e150:	8809883a 	mov	r4,r17
    e154:	0008eec0 	call	8eec <_free_r>
    e158:	80000c15 	stw	zero,48(r16)
    e15c:	81401117 	ldw	r5,68(r16)
    e160:	28000326 	beq	r5,zero,e170 <_fclose_r+0xb4>
    e164:	8809883a 	mov	r4,r17
    e168:	0008eec0 	call	8eec <_free_r>
    e16c:	80001115 	stw	zero,68(r16)
    e170:	0008d880 	call	8d88 <__sfp_lock_acquire>
    e174:	8000030d 	sth	zero,12(r16)
    e178:	0008d8c0 	call	8d8c <__sfp_lock_release>
    e17c:	9005883a 	mov	r2,r18
    e180:	003fdc06 	br	e0f4 <_fclose_r+0x38>
    e184:	0008d780 	call	8d78 <__sinit>
    e188:	003fd706 	br	e0e8 <_fclose_r+0x2c>
    e18c:	04bfffc4 	movi	r18,-1
    e190:	003fe806 	br	e134 <_fclose_r+0x78>
    e194:	81400417 	ldw	r5,16(r16)
    e198:	8809883a 	mov	r4,r17
    e19c:	0008eec0 	call	8eec <_free_r>
    e1a0:	003fe706 	br	e140 <_fclose_r+0x84>
    e1a4:	0005883a 	mov	r2,zero
    e1a8:	f800283a 	ret

0000e1ac <fclose>:
    e1ac:	008000b4 	movhi	r2,2
    e1b0:	10864604 	addi	r2,r2,6424
    e1b4:	200b883a 	mov	r5,r4
    e1b8:	11000017 	ldw	r4,0(r2)
    e1bc:	000e0bc1 	jmpi	e0bc <_fclose_r>

0000e1c0 <__fputwc>:
    e1c0:	defff804 	addi	sp,sp,-32
    e1c4:	dcc00415 	stw	r19,16(sp)
    e1c8:	dc800315 	stw	r18,12(sp)
    e1cc:	dc000115 	stw	r16,4(sp)
    e1d0:	dfc00715 	stw	ra,28(sp)
    e1d4:	dd400615 	stw	r21,24(sp)
    e1d8:	dd000515 	stw	r20,20(sp)
    e1dc:	dc400215 	stw	r17,8(sp)
    e1e0:	2027883a 	mov	r19,r4
    e1e4:	2825883a 	mov	r18,r5
    e1e8:	3021883a 	mov	r16,r6
    e1ec:	000940c0 	call	940c <__locale_mb_cur_max>
    e1f0:	00c00044 	movi	r3,1
    e1f4:	10c03e26 	beq	r2,r3,e2f0 <__fputwc+0x130>
    e1f8:	81c01704 	addi	r7,r16,92
    e1fc:	900d883a 	mov	r6,r18
    e200:	d80b883a 	mov	r5,sp
    e204:	9809883a 	mov	r4,r19
    e208:	000f20c0 	call	f20c <_wcrtomb_r>
    e20c:	1029883a 	mov	r20,r2
    e210:	00bfffc4 	movi	r2,-1
    e214:	a0802026 	beq	r20,r2,e298 <__fputwc+0xd8>
    e218:	d9400003 	ldbu	r5,0(sp)
    e21c:	a0001c26 	beq	r20,zero,e290 <__fputwc+0xd0>
    e220:	0023883a 	mov	r17,zero
    e224:	05400284 	movi	r21,10
    e228:	00000906 	br	e250 <__fputwc+0x90>
    e22c:	80800017 	ldw	r2,0(r16)
    e230:	11400005 	stb	r5,0(r2)
    e234:	80c00017 	ldw	r3,0(r16)
    e238:	18c00044 	addi	r3,r3,1
    e23c:	80c00015 	stw	r3,0(r16)
    e240:	8c400044 	addi	r17,r17,1
    e244:	dc45883a 	add	r2,sp,r17
    e248:	8d00112e 	bgeu	r17,r20,e290 <__fputwc+0xd0>
    e24c:	11400003 	ldbu	r5,0(r2)
    e250:	80c00217 	ldw	r3,8(r16)
    e254:	18ffffc4 	addi	r3,r3,-1
    e258:	80c00215 	stw	r3,8(r16)
    e25c:	183ff30e 	bge	r3,zero,e22c <__fputwc+0x6c>
    e260:	80800617 	ldw	r2,24(r16)
    e264:	18801916 	blt	r3,r2,e2cc <__fputwc+0x10c>
    e268:	80800017 	ldw	r2,0(r16)
    e26c:	11400005 	stb	r5,0(r2)
    e270:	80800017 	ldw	r2,0(r16)
    e274:	10c00003 	ldbu	r3,0(r2)
    e278:	10800044 	addi	r2,r2,1
    e27c:	1d402326 	beq	r3,r21,e30c <__fputwc+0x14c>
    e280:	80800015 	stw	r2,0(r16)
    e284:	8c400044 	addi	r17,r17,1
    e288:	dc45883a 	add	r2,sp,r17
    e28c:	8d3fef36 	bltu	r17,r20,e24c <__fputwc+0x8c>
    e290:	9005883a 	mov	r2,r18
    e294:	00000406 	br	e2a8 <__fputwc+0xe8>
    e298:	80c0030b 	ldhu	r3,12(r16)
    e29c:	a005883a 	mov	r2,r20
    e2a0:	18c01014 	ori	r3,r3,64
    e2a4:	80c0030d 	sth	r3,12(r16)
    e2a8:	dfc00717 	ldw	ra,28(sp)
    e2ac:	dd400617 	ldw	r21,24(sp)
    e2b0:	dd000517 	ldw	r20,20(sp)
    e2b4:	dcc00417 	ldw	r19,16(sp)
    e2b8:	dc800317 	ldw	r18,12(sp)
    e2bc:	dc400217 	ldw	r17,8(sp)
    e2c0:	dc000117 	ldw	r16,4(sp)
    e2c4:	dec00804 	addi	sp,sp,32
    e2c8:	f800283a 	ret
    e2cc:	800d883a 	mov	r6,r16
    e2d0:	29403fcc 	andi	r5,r5,255
    e2d4:	9809883a 	mov	r4,r19
    e2d8:	000f0b40 	call	f0b4 <__swbuf_r>
    e2dc:	10bfffe0 	cmpeqi	r2,r2,-1
    e2e0:	10803fcc 	andi	r2,r2,255
    e2e4:	103fd626 	beq	r2,zero,e240 <__fputwc+0x80>
    e2e8:	00bfffc4 	movi	r2,-1
    e2ec:	003fee06 	br	e2a8 <__fputwc+0xe8>
    e2f0:	90ffffc4 	addi	r3,r18,-1
    e2f4:	01003f84 	movi	r4,254
    e2f8:	20ffbf36 	bltu	r4,r3,e1f8 <__fputwc+0x38>
    e2fc:	900b883a 	mov	r5,r18
    e300:	dc800005 	stb	r18,0(sp)
    e304:	1029883a 	mov	r20,r2
    e308:	003fc506 	br	e220 <__fputwc+0x60>
    e30c:	800d883a 	mov	r6,r16
    e310:	a80b883a 	mov	r5,r21
    e314:	9809883a 	mov	r4,r19
    e318:	000f0b40 	call	f0b4 <__swbuf_r>
    e31c:	10bfffe0 	cmpeqi	r2,r2,-1
    e320:	003fef06 	br	e2e0 <__fputwc+0x120>

0000e324 <_fputwc_r>:
    e324:	3080030b 	ldhu	r2,12(r6)
    e328:	10c8000c 	andi	r3,r2,8192
    e32c:	1800051e 	bne	r3,zero,e344 <_fputwc_r+0x20>
    e330:	30c01917 	ldw	r3,100(r6)
    e334:	10880014 	ori	r2,r2,8192
    e338:	3080030d 	sth	r2,12(r6)
    e33c:	18880014 	ori	r2,r3,8192
    e340:	30801915 	stw	r2,100(r6)
    e344:	000e1c01 	jmpi	e1c0 <__fputwc>

0000e348 <fputwc>:
    e348:	008000b4 	movhi	r2,2
    e34c:	defffc04 	addi	sp,sp,-16
    e350:	10864604 	addi	r2,r2,6424
    e354:	dc000115 	stw	r16,4(sp)
    e358:	14000017 	ldw	r16,0(r2)
    e35c:	dc400215 	stw	r17,8(sp)
    e360:	dfc00315 	stw	ra,12(sp)
    e364:	2023883a 	mov	r17,r4
    e368:	80000226 	beq	r16,zero,e374 <fputwc+0x2c>
    e36c:	80800e17 	ldw	r2,56(r16)
    e370:	10001026 	beq	r2,zero,e3b4 <fputwc+0x6c>
    e374:	2880030b 	ldhu	r2,12(r5)
    e378:	10c8000c 	andi	r3,r2,8192
    e37c:	1800051e 	bne	r3,zero,e394 <fputwc+0x4c>
    e380:	28c01917 	ldw	r3,100(r5)
    e384:	10880014 	ori	r2,r2,8192
    e388:	2880030d 	sth	r2,12(r5)
    e38c:	18880014 	ori	r2,r3,8192
    e390:	28801915 	stw	r2,100(r5)
    e394:	280d883a 	mov	r6,r5
    e398:	8009883a 	mov	r4,r16
    e39c:	880b883a 	mov	r5,r17
    e3a0:	dfc00317 	ldw	ra,12(sp)
    e3a4:	dc400217 	ldw	r17,8(sp)
    e3a8:	dc000117 	ldw	r16,4(sp)
    e3ac:	dec00404 	addi	sp,sp,16
    e3b0:	000e1c01 	jmpi	e1c0 <__fputwc>
    e3b4:	8009883a 	mov	r4,r16
    e3b8:	d9400015 	stw	r5,0(sp)
    e3bc:	0008d780 	call	8d78 <__sinit>
    e3c0:	d9400017 	ldw	r5,0(sp)
    e3c4:	003feb06 	br	e374 <fputwc+0x2c>

0000e3c8 <_fstat_r>:
    e3c8:	defffd04 	addi	sp,sp,-12
    e3cc:	2805883a 	mov	r2,r5
    e3d0:	dc000015 	stw	r16,0(sp)
    e3d4:	040000b4 	movhi	r16,2
    e3d8:	dc400115 	stw	r17,4(sp)
    e3dc:	840e5404 	addi	r16,r16,14672
    e3e0:	2023883a 	mov	r17,r4
    e3e4:	300b883a 	mov	r5,r6
    e3e8:	1009883a 	mov	r4,r2
    e3ec:	dfc00215 	stw	ra,8(sp)
    e3f0:	80000015 	stw	zero,0(r16)
    e3f4:	00128340 	call	12834 <fstat>
    e3f8:	00ffffc4 	movi	r3,-1
    e3fc:	10c00526 	beq	r2,r3,e414 <_fstat_r+0x4c>
    e400:	dfc00217 	ldw	ra,8(sp)
    e404:	dc400117 	ldw	r17,4(sp)
    e408:	dc000017 	ldw	r16,0(sp)
    e40c:	dec00304 	addi	sp,sp,12
    e410:	f800283a 	ret
    e414:	80c00017 	ldw	r3,0(r16)
    e418:	183ff926 	beq	r3,zero,e400 <_fstat_r+0x38>
    e41c:	88c00015 	stw	r3,0(r17)
    e420:	003ff706 	br	e400 <_fstat_r+0x38>

0000e424 <__sfvwrite_r>:
    e424:	30800217 	ldw	r2,8(r6)
    e428:	10006726 	beq	r2,zero,e5c8 <__sfvwrite_r+0x1a4>
    e42c:	28c0030b 	ldhu	r3,12(r5)
    e430:	defff404 	addi	sp,sp,-48
    e434:	dd400715 	stw	r21,28(sp)
    e438:	dd000615 	stw	r20,24(sp)
    e43c:	dc000215 	stw	r16,8(sp)
    e440:	dfc00b15 	stw	ra,44(sp)
    e444:	df000a15 	stw	fp,40(sp)
    e448:	ddc00915 	stw	r23,36(sp)
    e44c:	dd800815 	stw	r22,32(sp)
    e450:	dcc00515 	stw	r19,20(sp)
    e454:	dc800415 	stw	r18,16(sp)
    e458:	dc400315 	stw	r17,12(sp)
    e45c:	1880020c 	andi	r2,r3,8
    e460:	2821883a 	mov	r16,r5
    e464:	202b883a 	mov	r21,r4
    e468:	3029883a 	mov	r20,r6
    e46c:	10002726 	beq	r2,zero,e50c <__sfvwrite_r+0xe8>
    e470:	28800417 	ldw	r2,16(r5)
    e474:	10002526 	beq	r2,zero,e50c <__sfvwrite_r+0xe8>
    e478:	1880008c 	andi	r2,r3,2
    e47c:	a4400017 	ldw	r17,0(r20)
    e480:	10002a26 	beq	r2,zero,e52c <__sfvwrite_r+0x108>
    e484:	05a00034 	movhi	r22,32768
    e488:	0027883a 	mov	r19,zero
    e48c:	0025883a 	mov	r18,zero
    e490:	b5bf0004 	addi	r22,r22,-1024
    e494:	980d883a 	mov	r6,r19
    e498:	a809883a 	mov	r4,r21
    e49c:	90004626 	beq	r18,zero,e5b8 <__sfvwrite_r+0x194>
    e4a0:	900f883a 	mov	r7,r18
    e4a4:	b480022e 	bgeu	r22,r18,e4b0 <__sfvwrite_r+0x8c>
    e4a8:	01e00034 	movhi	r7,32768
    e4ac:	39ff0004 	addi	r7,r7,-1024
    e4b0:	80800917 	ldw	r2,36(r16)
    e4b4:	81400717 	ldw	r5,28(r16)
    e4b8:	103ee83a 	callr	r2
    e4bc:	0080570e 	bge	zero,r2,e61c <__sfvwrite_r+0x1f8>
    e4c0:	a0c00217 	ldw	r3,8(r20)
    e4c4:	98a7883a 	add	r19,r19,r2
    e4c8:	90a5c83a 	sub	r18,r18,r2
    e4cc:	1885c83a 	sub	r2,r3,r2
    e4d0:	a0800215 	stw	r2,8(r20)
    e4d4:	103fef1e 	bne	r2,zero,e494 <__sfvwrite_r+0x70>
    e4d8:	0005883a 	mov	r2,zero
    e4dc:	dfc00b17 	ldw	ra,44(sp)
    e4e0:	df000a17 	ldw	fp,40(sp)
    e4e4:	ddc00917 	ldw	r23,36(sp)
    e4e8:	dd800817 	ldw	r22,32(sp)
    e4ec:	dd400717 	ldw	r21,28(sp)
    e4f0:	dd000617 	ldw	r20,24(sp)
    e4f4:	dcc00517 	ldw	r19,20(sp)
    e4f8:	dc800417 	ldw	r18,16(sp)
    e4fc:	dc400317 	ldw	r17,12(sp)
    e500:	dc000217 	ldw	r16,8(sp)
    e504:	dec00c04 	addi	sp,sp,48
    e508:	f800283a 	ret
    e50c:	800b883a 	mov	r5,r16
    e510:	a809883a 	mov	r4,r21
    e514:	0006da40 	call	6da4 <__swsetup_r>
    e518:	1000eb1e 	bne	r2,zero,e8c8 <__sfvwrite_r+0x4a4>
    e51c:	80c0030b 	ldhu	r3,12(r16)
    e520:	a4400017 	ldw	r17,0(r20)
    e524:	1880008c 	andi	r2,r3,2
    e528:	103fd61e 	bne	r2,zero,e484 <__sfvwrite_r+0x60>
    e52c:	1880004c 	andi	r2,r3,1
    e530:	10003f1e 	bne	r2,zero,e630 <__sfvwrite_r+0x20c>
    e534:	0039883a 	mov	fp,zero
    e538:	0025883a 	mov	r18,zero
    e53c:	90001a26 	beq	r18,zero,e5a8 <__sfvwrite_r+0x184>
    e540:	1880800c 	andi	r2,r3,512
    e544:	84c00217 	ldw	r19,8(r16)
    e548:	10002126 	beq	r2,zero,e5d0 <__sfvwrite_r+0x1ac>
    e54c:	982f883a 	mov	r23,r19
    e550:	94c09336 	bltu	r18,r19,e7a0 <__sfvwrite_r+0x37c>
    e554:	1881200c 	andi	r2,r3,1152
    e558:	10009e1e 	bne	r2,zero,e7d4 <__sfvwrite_r+0x3b0>
    e55c:	81000017 	ldw	r4,0(r16)
    e560:	b80d883a 	mov	r6,r23
    e564:	e00b883a 	mov	r5,fp
    e568:	000e9940 	call	e994 <memmove>
    e56c:	80c00217 	ldw	r3,8(r16)
    e570:	81000017 	ldw	r4,0(r16)
    e574:	9005883a 	mov	r2,r18
    e578:	1ce7c83a 	sub	r19,r3,r19
    e57c:	25cf883a 	add	r7,r4,r23
    e580:	84c00215 	stw	r19,8(r16)
    e584:	81c00015 	stw	r7,0(r16)
    e588:	a0c00217 	ldw	r3,8(r20)
    e58c:	e0b9883a 	add	fp,fp,r2
    e590:	90a5c83a 	sub	r18,r18,r2
    e594:	18a7c83a 	sub	r19,r3,r2
    e598:	a4c00215 	stw	r19,8(r20)
    e59c:	983fce26 	beq	r19,zero,e4d8 <__sfvwrite_r+0xb4>
    e5a0:	80c0030b 	ldhu	r3,12(r16)
    e5a4:	903fe61e 	bne	r18,zero,e540 <__sfvwrite_r+0x11c>
    e5a8:	8f000017 	ldw	fp,0(r17)
    e5ac:	8c800117 	ldw	r18,4(r17)
    e5b0:	8c400204 	addi	r17,r17,8
    e5b4:	003fe106 	br	e53c <__sfvwrite_r+0x118>
    e5b8:	8cc00017 	ldw	r19,0(r17)
    e5bc:	8c800117 	ldw	r18,4(r17)
    e5c0:	8c400204 	addi	r17,r17,8
    e5c4:	003fb306 	br	e494 <__sfvwrite_r+0x70>
    e5c8:	0005883a 	mov	r2,zero
    e5cc:	f800283a 	ret
    e5d0:	81000017 	ldw	r4,0(r16)
    e5d4:	80800417 	ldw	r2,16(r16)
    e5d8:	11005736 	bltu	r2,r4,e738 <__sfvwrite_r+0x314>
    e5dc:	85c00517 	ldw	r23,20(r16)
    e5e0:	95c05536 	bltu	r18,r23,e738 <__sfvwrite_r+0x314>
    e5e4:	00a00034 	movhi	r2,32768
    e5e8:	10bfffc4 	addi	r2,r2,-1
    e5ec:	9009883a 	mov	r4,r18
    e5f0:	1480012e 	bgeu	r2,r18,e5f8 <__sfvwrite_r+0x1d4>
    e5f4:	1009883a 	mov	r4,r2
    e5f8:	b80b883a 	mov	r5,r23
    e5fc:	000fea40 	call	fea4 <__divsi3>
    e600:	15cf383a 	mul	r7,r2,r23
    e604:	81400717 	ldw	r5,28(r16)
    e608:	80800917 	ldw	r2,36(r16)
    e60c:	e00d883a 	mov	r6,fp
    e610:	a809883a 	mov	r4,r21
    e614:	103ee83a 	callr	r2
    e618:	00bfdb16 	blt	zero,r2,e588 <__sfvwrite_r+0x164>
    e61c:	8080030b 	ldhu	r2,12(r16)
    e620:	10801014 	ori	r2,r2,64
    e624:	8080030d 	sth	r2,12(r16)
    e628:	00bfffc4 	movi	r2,-1
    e62c:	003fab06 	br	e4dc <__sfvwrite_r+0xb8>
    e630:	0027883a 	mov	r19,zero
    e634:	0011883a 	mov	r8,zero
    e638:	0039883a 	mov	fp,zero
    e63c:	0025883a 	mov	r18,zero
    e640:	90001f26 	beq	r18,zero,e6c0 <__sfvwrite_r+0x29c>
    e644:	40005a26 	beq	r8,zero,e7b0 <__sfvwrite_r+0x38c>
    e648:	982d883a 	mov	r22,r19
    e64c:	94c0012e 	bgeu	r18,r19,e654 <__sfvwrite_r+0x230>
    e650:	902d883a 	mov	r22,r18
    e654:	81000017 	ldw	r4,0(r16)
    e658:	80800417 	ldw	r2,16(r16)
    e65c:	b02f883a 	mov	r23,r22
    e660:	81c00517 	ldw	r7,20(r16)
    e664:	1100032e 	bgeu	r2,r4,e674 <__sfvwrite_r+0x250>
    e668:	80c00217 	ldw	r3,8(r16)
    e66c:	38c7883a 	add	r3,r7,r3
    e670:	1d801816 	blt	r3,r22,e6d4 <__sfvwrite_r+0x2b0>
    e674:	b1c03e16 	blt	r22,r7,e770 <__sfvwrite_r+0x34c>
    e678:	80800917 	ldw	r2,36(r16)
    e67c:	81400717 	ldw	r5,28(r16)
    e680:	e00d883a 	mov	r6,fp
    e684:	da000115 	stw	r8,4(sp)
    e688:	a809883a 	mov	r4,r21
    e68c:	103ee83a 	callr	r2
    e690:	102f883a 	mov	r23,r2
    e694:	da000117 	ldw	r8,4(sp)
    e698:	00bfe00e 	bge	zero,r2,e61c <__sfvwrite_r+0x1f8>
    e69c:	9de7c83a 	sub	r19,r19,r23
    e6a0:	98001f26 	beq	r19,zero,e720 <__sfvwrite_r+0x2fc>
    e6a4:	a0800217 	ldw	r2,8(r20)
    e6a8:	e5f9883a 	add	fp,fp,r23
    e6ac:	95e5c83a 	sub	r18,r18,r23
    e6b0:	15efc83a 	sub	r23,r2,r23
    e6b4:	a5c00215 	stw	r23,8(r20)
    e6b8:	b83f8726 	beq	r23,zero,e4d8 <__sfvwrite_r+0xb4>
    e6bc:	903fe11e 	bne	r18,zero,e644 <__sfvwrite_r+0x220>
    e6c0:	8f000017 	ldw	fp,0(r17)
    e6c4:	8c800117 	ldw	r18,4(r17)
    e6c8:	0011883a 	mov	r8,zero
    e6cc:	8c400204 	addi	r17,r17,8
    e6d0:	003fdb06 	br	e640 <__sfvwrite_r+0x21c>
    e6d4:	180d883a 	mov	r6,r3
    e6d8:	e00b883a 	mov	r5,fp
    e6dc:	da000115 	stw	r8,4(sp)
    e6e0:	d8c00015 	stw	r3,0(sp)
    e6e4:	000e9940 	call	e994 <memmove>
    e6e8:	d8c00017 	ldw	r3,0(sp)
    e6ec:	80800017 	ldw	r2,0(r16)
    e6f0:	800b883a 	mov	r5,r16
    e6f4:	a809883a 	mov	r4,r21
    e6f8:	10c5883a 	add	r2,r2,r3
    e6fc:	80800015 	stw	r2,0(r16)
    e700:	d8c00015 	stw	r3,0(sp)
    e704:	000899c0 	call	899c <_fflush_r>
    e708:	d8c00017 	ldw	r3,0(sp)
    e70c:	da000117 	ldw	r8,4(sp)
    e710:	103fc21e 	bne	r2,zero,e61c <__sfvwrite_r+0x1f8>
    e714:	182f883a 	mov	r23,r3
    e718:	9de7c83a 	sub	r19,r19,r23
    e71c:	983fe11e 	bne	r19,zero,e6a4 <__sfvwrite_r+0x280>
    e720:	800b883a 	mov	r5,r16
    e724:	a809883a 	mov	r4,r21
    e728:	000899c0 	call	899c <_fflush_r>
    e72c:	103fbb1e 	bne	r2,zero,e61c <__sfvwrite_r+0x1f8>
    e730:	0011883a 	mov	r8,zero
    e734:	003fdb06 	br	e6a4 <__sfvwrite_r+0x280>
    e738:	94c0012e 	bgeu	r18,r19,e740 <__sfvwrite_r+0x31c>
    e73c:	9027883a 	mov	r19,r18
    e740:	980d883a 	mov	r6,r19
    e744:	e00b883a 	mov	r5,fp
    e748:	000e9940 	call	e994 <memmove>
    e74c:	80800217 	ldw	r2,8(r16)
    e750:	80c00017 	ldw	r3,0(r16)
    e754:	14c5c83a 	sub	r2,r2,r19
    e758:	1cc7883a 	add	r3,r3,r19
    e75c:	80800215 	stw	r2,8(r16)
    e760:	80c00015 	stw	r3,0(r16)
    e764:	10004326 	beq	r2,zero,e874 <__sfvwrite_r+0x450>
    e768:	9805883a 	mov	r2,r19
    e76c:	003f8606 	br	e588 <__sfvwrite_r+0x164>
    e770:	b00d883a 	mov	r6,r22
    e774:	e00b883a 	mov	r5,fp
    e778:	da000115 	stw	r8,4(sp)
    e77c:	000e9940 	call	e994 <memmove>
    e780:	80800217 	ldw	r2,8(r16)
    e784:	80c00017 	ldw	r3,0(r16)
    e788:	da000117 	ldw	r8,4(sp)
    e78c:	1585c83a 	sub	r2,r2,r22
    e790:	1dad883a 	add	r22,r3,r22
    e794:	80800215 	stw	r2,8(r16)
    e798:	85800015 	stw	r22,0(r16)
    e79c:	003fbf06 	br	e69c <__sfvwrite_r+0x278>
    e7a0:	81000017 	ldw	r4,0(r16)
    e7a4:	9027883a 	mov	r19,r18
    e7a8:	902f883a 	mov	r23,r18
    e7ac:	003f6c06 	br	e560 <__sfvwrite_r+0x13c>
    e7b0:	900d883a 	mov	r6,r18
    e7b4:	01400284 	movi	r5,10
    e7b8:	e009883a 	mov	r4,fp
    e7bc:	0009e280 	call	9e28 <memchr>
    e7c0:	10003e26 	beq	r2,zero,e8bc <__sfvwrite_r+0x498>
    e7c4:	10800044 	addi	r2,r2,1
    e7c8:	1727c83a 	sub	r19,r2,fp
    e7cc:	02000044 	movi	r8,1
    e7d0:	003f9d06 	br	e648 <__sfvwrite_r+0x224>
    e7d4:	80800517 	ldw	r2,20(r16)
    e7d8:	81400417 	ldw	r5,16(r16)
    e7dc:	81c00017 	ldw	r7,0(r16)
    e7e0:	10a7883a 	add	r19,r2,r2
    e7e4:	9885883a 	add	r2,r19,r2
    e7e8:	1026d7fa 	srli	r19,r2,31
    e7ec:	396dc83a 	sub	r22,r7,r5
    e7f0:	b1000044 	addi	r4,r22,1
    e7f4:	9885883a 	add	r2,r19,r2
    e7f8:	1027d07a 	srai	r19,r2,1
    e7fc:	2485883a 	add	r2,r4,r18
    e800:	980d883a 	mov	r6,r19
    e804:	9880022e 	bgeu	r19,r2,e810 <__sfvwrite_r+0x3ec>
    e808:	1027883a 	mov	r19,r2
    e80c:	100d883a 	mov	r6,r2
    e810:	18c1000c 	andi	r3,r3,1024
    e814:	18001c26 	beq	r3,zero,e888 <__sfvwrite_r+0x464>
    e818:	300b883a 	mov	r5,r6
    e81c:	a809883a 	mov	r4,r21
    e820:	000961c0 	call	961c <_malloc_r>
    e824:	102f883a 	mov	r23,r2
    e828:	10002926 	beq	r2,zero,e8d0 <__sfvwrite_r+0x4ac>
    e82c:	81400417 	ldw	r5,16(r16)
    e830:	b00d883a 	mov	r6,r22
    e834:	1009883a 	mov	r4,r2
    e838:	0009f0c0 	call	9f0c <memcpy>
    e83c:	8080030b 	ldhu	r2,12(r16)
    e840:	00fedfc4 	movi	r3,-1153
    e844:	10c4703a 	and	r2,r2,r3
    e848:	10802014 	ori	r2,r2,128
    e84c:	8080030d 	sth	r2,12(r16)
    e850:	bd89883a 	add	r4,r23,r22
    e854:	9d8fc83a 	sub	r7,r19,r22
    e858:	85c00415 	stw	r23,16(r16)
    e85c:	84c00515 	stw	r19,20(r16)
    e860:	81000015 	stw	r4,0(r16)
    e864:	9027883a 	mov	r19,r18
    e868:	81c00215 	stw	r7,8(r16)
    e86c:	902f883a 	mov	r23,r18
    e870:	003f3b06 	br	e560 <__sfvwrite_r+0x13c>
    e874:	800b883a 	mov	r5,r16
    e878:	a809883a 	mov	r4,r21
    e87c:	000899c0 	call	899c <_fflush_r>
    e880:	103fb926 	beq	r2,zero,e768 <__sfvwrite_r+0x344>
    e884:	003f6506 	br	e61c <__sfvwrite_r+0x1f8>
    e888:	a809883a 	mov	r4,r21
    e88c:	000eb500 	call	eb50 <_realloc_r>
    e890:	102f883a 	mov	r23,r2
    e894:	103fee1e 	bne	r2,zero,e850 <__sfvwrite_r+0x42c>
    e898:	81400417 	ldw	r5,16(r16)
    e89c:	a809883a 	mov	r4,r21
    e8a0:	0008eec0 	call	8eec <_free_r>
    e8a4:	8080030b 	ldhu	r2,12(r16)
    e8a8:	00ffdfc4 	movi	r3,-129
    e8ac:	1884703a 	and	r2,r3,r2
    e8b0:	00c00304 	movi	r3,12
    e8b4:	a8c00015 	stw	r3,0(r21)
    e8b8:	003f5906 	br	e620 <__sfvwrite_r+0x1fc>
    e8bc:	94c00044 	addi	r19,r18,1
    e8c0:	02000044 	movi	r8,1
    e8c4:	003f6006 	br	e648 <__sfvwrite_r+0x224>
    e8c8:	00bfffc4 	movi	r2,-1
    e8cc:	003f0306 	br	e4dc <__sfvwrite_r+0xb8>
    e8d0:	00800304 	movi	r2,12
    e8d4:	a8800015 	stw	r2,0(r21)
    e8d8:	8080030b 	ldhu	r2,12(r16)
    e8dc:	003f5006 	br	e620 <__sfvwrite_r+0x1fc>

0000e8e0 <_isatty_r>:
    e8e0:	defffd04 	addi	sp,sp,-12
    e8e4:	dc000015 	stw	r16,0(sp)
    e8e8:	040000b4 	movhi	r16,2
    e8ec:	dc400115 	stw	r17,4(sp)
    e8f0:	840e5404 	addi	r16,r16,14672
    e8f4:	2023883a 	mov	r17,r4
    e8f8:	2809883a 	mov	r4,r5
    e8fc:	dfc00215 	stw	ra,8(sp)
    e900:	80000015 	stw	zero,0(r16)
    e904:	00129200 	call	12920 <isatty>
    e908:	00ffffc4 	movi	r3,-1
    e90c:	10c00526 	beq	r2,r3,e924 <_isatty_r+0x44>
    e910:	dfc00217 	ldw	ra,8(sp)
    e914:	dc400117 	ldw	r17,4(sp)
    e918:	dc000017 	ldw	r16,0(sp)
    e91c:	dec00304 	addi	sp,sp,12
    e920:	f800283a 	ret
    e924:	80c00017 	ldw	r3,0(r16)
    e928:	183ff926 	beq	r3,zero,e910 <_isatty_r+0x30>
    e92c:	88c00015 	stw	r3,0(r17)
    e930:	003ff706 	br	e910 <_isatty_r+0x30>

0000e934 <_lseek_r>:
    e934:	defffd04 	addi	sp,sp,-12
    e938:	2805883a 	mov	r2,r5
    e93c:	dc000015 	stw	r16,0(sp)
    e940:	040000b4 	movhi	r16,2
    e944:	dc400115 	stw	r17,4(sp)
    e948:	300b883a 	mov	r5,r6
    e94c:	840e5404 	addi	r16,r16,14672
    e950:	2023883a 	mov	r17,r4
    e954:	380d883a 	mov	r6,r7
    e958:	1009883a 	mov	r4,r2
    e95c:	dfc00215 	stw	ra,8(sp)
    e960:	80000015 	stw	zero,0(r16)
    e964:	0012aec0 	call	12aec <lseek>
    e968:	00ffffc4 	movi	r3,-1
    e96c:	10c00526 	beq	r2,r3,e984 <_lseek_r+0x50>
    e970:	dfc00217 	ldw	ra,8(sp)
    e974:	dc400117 	ldw	r17,4(sp)
    e978:	dc000017 	ldw	r16,0(sp)
    e97c:	dec00304 	addi	sp,sp,12
    e980:	f800283a 	ret
    e984:	80c00017 	ldw	r3,0(r16)
    e988:	183ff926 	beq	r3,zero,e970 <_lseek_r+0x3c>
    e98c:	88c00015 	stw	r3,0(r17)
    e990:	003ff706 	br	e970 <_lseek_r+0x3c>

0000e994 <memmove>:
    e994:	2005883a 	mov	r2,r4
    e998:	29000b2e 	bgeu	r5,r4,e9c8 <memmove+0x34>
    e99c:	298f883a 	add	r7,r5,r6
    e9a0:	21c0092e 	bgeu	r4,r7,e9c8 <memmove+0x34>
    e9a4:	2187883a 	add	r3,r4,r6
    e9a8:	198bc83a 	sub	r5,r3,r6
    e9ac:	30004826 	beq	r6,zero,ead0 <memmove+0x13c>
    e9b0:	39ffffc4 	addi	r7,r7,-1
    e9b4:	39000003 	ldbu	r4,0(r7)
    e9b8:	18ffffc4 	addi	r3,r3,-1
    e9bc:	19000005 	stb	r4,0(r3)
    e9c0:	28fffb1e 	bne	r5,r3,e9b0 <memmove+0x1c>
    e9c4:	f800283a 	ret
    e9c8:	00c003c4 	movi	r3,15
    e9cc:	1980412e 	bgeu	r3,r6,ead4 <memmove+0x140>
    e9d0:	2886b03a 	or	r3,r5,r2
    e9d4:	18c000cc 	andi	r3,r3,3
    e9d8:	1800401e 	bne	r3,zero,eadc <memmove+0x148>
    e9dc:	33fffc04 	addi	r15,r6,-16
    e9e0:	781ed13a 	srli	r15,r15,4
    e9e4:	28c00104 	addi	r3,r5,4
    e9e8:	13400104 	addi	r13,r2,4
    e9ec:	781c913a 	slli	r14,r15,4
    e9f0:	2b000204 	addi	r12,r5,8
    e9f4:	12c00204 	addi	r11,r2,8
    e9f8:	73800504 	addi	r14,r14,20
    e9fc:	2a800304 	addi	r10,r5,12
    ea00:	12400304 	addi	r9,r2,12
    ea04:	2b9d883a 	add	r14,r5,r14
    ea08:	2811883a 	mov	r8,r5
    ea0c:	100f883a 	mov	r7,r2
    ea10:	41000017 	ldw	r4,0(r8)
    ea14:	39c00404 	addi	r7,r7,16
    ea18:	18c00404 	addi	r3,r3,16
    ea1c:	393ffc15 	stw	r4,-16(r7)
    ea20:	193ffc17 	ldw	r4,-16(r3)
    ea24:	6b400404 	addi	r13,r13,16
    ea28:	5ac00404 	addi	r11,r11,16
    ea2c:	693ffc15 	stw	r4,-16(r13)
    ea30:	61000017 	ldw	r4,0(r12)
    ea34:	4a400404 	addi	r9,r9,16
    ea38:	42000404 	addi	r8,r8,16
    ea3c:	593ffc15 	stw	r4,-16(r11)
    ea40:	51000017 	ldw	r4,0(r10)
    ea44:	63000404 	addi	r12,r12,16
    ea48:	52800404 	addi	r10,r10,16
    ea4c:	493ffc15 	stw	r4,-16(r9)
    ea50:	1bbfef1e 	bne	r3,r14,ea10 <memmove+0x7c>
    ea54:	79000044 	addi	r4,r15,1
    ea58:	2008913a 	slli	r4,r4,4
    ea5c:	328003cc 	andi	r10,r6,15
    ea60:	02c000c4 	movi	r11,3
    ea64:	1107883a 	add	r3,r2,r4
    ea68:	290b883a 	add	r5,r5,r4
    ea6c:	5a801e2e 	bgeu	r11,r10,eae8 <memmove+0x154>
    ea70:	1813883a 	mov	r9,r3
    ea74:	2811883a 	mov	r8,r5
    ea78:	500f883a 	mov	r7,r10
    ea7c:	41000017 	ldw	r4,0(r8)
    ea80:	4a400104 	addi	r9,r9,4
    ea84:	39ffff04 	addi	r7,r7,-4
    ea88:	493fff15 	stw	r4,-4(r9)
    ea8c:	42000104 	addi	r8,r8,4
    ea90:	59fffa36 	bltu	r11,r7,ea7c <memmove+0xe8>
    ea94:	513fff04 	addi	r4,r10,-4
    ea98:	2008d0ba 	srli	r4,r4,2
    ea9c:	318000cc 	andi	r6,r6,3
    eaa0:	21000044 	addi	r4,r4,1
    eaa4:	2109883a 	add	r4,r4,r4
    eaa8:	2109883a 	add	r4,r4,r4
    eaac:	1907883a 	add	r3,r3,r4
    eab0:	290b883a 	add	r5,r5,r4
    eab4:	30000b26 	beq	r6,zero,eae4 <memmove+0x150>
    eab8:	198d883a 	add	r6,r3,r6
    eabc:	29c00003 	ldbu	r7,0(r5)
    eac0:	18c00044 	addi	r3,r3,1
    eac4:	29400044 	addi	r5,r5,1
    eac8:	19ffffc5 	stb	r7,-1(r3)
    eacc:	19bffb1e 	bne	r3,r6,eabc <memmove+0x128>
    ead0:	f800283a 	ret
    ead4:	1007883a 	mov	r3,r2
    ead8:	003ff606 	br	eab4 <memmove+0x120>
    eadc:	1007883a 	mov	r3,r2
    eae0:	003ff506 	br	eab8 <memmove+0x124>
    eae4:	f800283a 	ret
    eae8:	500d883a 	mov	r6,r10
    eaec:	003ff106 	br	eab4 <memmove+0x120>

0000eaf0 <_read_r>:
    eaf0:	defffd04 	addi	sp,sp,-12
    eaf4:	2805883a 	mov	r2,r5
    eaf8:	dc000015 	stw	r16,0(sp)
    eafc:	040000b4 	movhi	r16,2
    eb00:	dc400115 	stw	r17,4(sp)
    eb04:	300b883a 	mov	r5,r6
    eb08:	840e5404 	addi	r16,r16,14672
    eb0c:	2023883a 	mov	r17,r4
    eb10:	380d883a 	mov	r6,r7
    eb14:	1009883a 	mov	r4,r2
    eb18:	dfc00215 	stw	ra,8(sp)
    eb1c:	80000015 	stw	zero,0(r16)
    eb20:	0012cb80 	call	12cb8 <read>
    eb24:	00ffffc4 	movi	r3,-1
    eb28:	10c00526 	beq	r2,r3,eb40 <_read_r+0x50>
    eb2c:	dfc00217 	ldw	ra,8(sp)
    eb30:	dc400117 	ldw	r17,4(sp)
    eb34:	dc000017 	ldw	r16,0(sp)
    eb38:	dec00304 	addi	sp,sp,12
    eb3c:	f800283a 	ret
    eb40:	80c00017 	ldw	r3,0(r16)
    eb44:	183ff926 	beq	r3,zero,eb2c <_read_r+0x3c>
    eb48:	88c00015 	stw	r3,0(r17)
    eb4c:	003ff706 	br	eb2c <_read_r+0x3c>

0000eb50 <_realloc_r>:
    eb50:	defff604 	addi	sp,sp,-40
    eb54:	dc800215 	stw	r18,8(sp)
    eb58:	dfc00915 	stw	ra,36(sp)
    eb5c:	df000815 	stw	fp,32(sp)
    eb60:	ddc00715 	stw	r23,28(sp)
    eb64:	dd800615 	stw	r22,24(sp)
    eb68:	dd400515 	stw	r21,20(sp)
    eb6c:	dd000415 	stw	r20,16(sp)
    eb70:	dcc00315 	stw	r19,12(sp)
    eb74:	dc400115 	stw	r17,4(sp)
    eb78:	dc000015 	stw	r16,0(sp)
    eb7c:	3025883a 	mov	r18,r6
    eb80:	2800b726 	beq	r5,zero,ee60 <_realloc_r+0x310>
    eb84:	282b883a 	mov	r21,r5
    eb88:	2029883a 	mov	r20,r4
    eb8c:	00131200 	call	13120 <__malloc_lock>
    eb90:	a8bfff17 	ldw	r2,-4(r21)
    eb94:	043fff04 	movi	r16,-4
    eb98:	90c002c4 	addi	r3,r18,11
    eb9c:	01000584 	movi	r4,22
    eba0:	acfffe04 	addi	r19,r21,-8
    eba4:	1420703a 	and	r16,r2,r16
    eba8:	20c0332e 	bgeu	r4,r3,ec78 <_realloc_r+0x128>
    ebac:	047ffe04 	movi	r17,-8
    ebb0:	1c62703a 	and	r17,r3,r17
    ebb4:	8807883a 	mov	r3,r17
    ebb8:	88005816 	blt	r17,zero,ed1c <_realloc_r+0x1cc>
    ebbc:	8c805736 	bltu	r17,r18,ed1c <_realloc_r+0x1cc>
    ebc0:	80c0300e 	bge	r16,r3,ec84 <_realloc_r+0x134>
    ebc4:	070000b4 	movhi	fp,2
    ebc8:	e73ffa04 	addi	fp,fp,-24
    ebcc:	e1c00217 	ldw	r7,8(fp)
    ebd0:	9c09883a 	add	r4,r19,r16
    ebd4:	22000117 	ldw	r8,4(r4)
    ebd8:	21c06326 	beq	r4,r7,ed68 <_realloc_r+0x218>
    ebdc:	017fff84 	movi	r5,-2
    ebe0:	414a703a 	and	r5,r8,r5
    ebe4:	214b883a 	add	r5,r4,r5
    ebe8:	29800117 	ldw	r6,4(r5)
    ebec:	3180004c 	andi	r6,r6,1
    ebf0:	30003f26 	beq	r6,zero,ecf0 <_realloc_r+0x1a0>
    ebf4:	1080004c 	andi	r2,r2,1
    ebf8:	10008326 	beq	r2,zero,ee08 <_realloc_r+0x2b8>
    ebfc:	900b883a 	mov	r5,r18
    ec00:	a009883a 	mov	r4,r20
    ec04:	000961c0 	call	961c <_malloc_r>
    ec08:	1025883a 	mov	r18,r2
    ec0c:	10011e26 	beq	r2,zero,f088 <_realloc_r+0x538>
    ec10:	a93fff17 	ldw	r4,-4(r21)
    ec14:	10fffe04 	addi	r3,r2,-8
    ec18:	00bfff84 	movi	r2,-2
    ec1c:	2084703a 	and	r2,r4,r2
    ec20:	9885883a 	add	r2,r19,r2
    ec24:	1880ee26 	beq	r3,r2,efe0 <_realloc_r+0x490>
    ec28:	81bfff04 	addi	r6,r16,-4
    ec2c:	00800904 	movi	r2,36
    ec30:	1180b836 	bltu	r2,r6,ef14 <_realloc_r+0x3c4>
    ec34:	00c004c4 	movi	r3,19
    ec38:	19809636 	bltu	r3,r6,ee94 <_realloc_r+0x344>
    ec3c:	9005883a 	mov	r2,r18
    ec40:	a807883a 	mov	r3,r21
    ec44:	19000017 	ldw	r4,0(r3)
    ec48:	11000015 	stw	r4,0(r2)
    ec4c:	19000117 	ldw	r4,4(r3)
    ec50:	11000115 	stw	r4,4(r2)
    ec54:	18c00217 	ldw	r3,8(r3)
    ec58:	10c00215 	stw	r3,8(r2)
    ec5c:	a80b883a 	mov	r5,r21
    ec60:	a009883a 	mov	r4,r20
    ec64:	0008eec0 	call	8eec <_free_r>
    ec68:	a009883a 	mov	r4,r20
    ec6c:	00132400 	call	13240 <__malloc_unlock>
    ec70:	9005883a 	mov	r2,r18
    ec74:	00001206 	br	ecc0 <_realloc_r+0x170>
    ec78:	00c00404 	movi	r3,16
    ec7c:	1823883a 	mov	r17,r3
    ec80:	003fce06 	br	ebbc <_realloc_r+0x6c>
    ec84:	a825883a 	mov	r18,r21
    ec88:	8445c83a 	sub	r2,r16,r17
    ec8c:	00c003c4 	movi	r3,15
    ec90:	18802636 	bltu	r3,r2,ed2c <_realloc_r+0x1dc>
    ec94:	99800117 	ldw	r6,4(r19)
    ec98:	9c07883a 	add	r3,r19,r16
    ec9c:	3180004c 	andi	r6,r6,1
    eca0:	3420b03a 	or	r16,r6,r16
    eca4:	9c000115 	stw	r16,4(r19)
    eca8:	18800117 	ldw	r2,4(r3)
    ecac:	10800054 	ori	r2,r2,1
    ecb0:	18800115 	stw	r2,4(r3)
    ecb4:	a009883a 	mov	r4,r20
    ecb8:	00132400 	call	13240 <__malloc_unlock>
    ecbc:	9005883a 	mov	r2,r18
    ecc0:	dfc00917 	ldw	ra,36(sp)
    ecc4:	df000817 	ldw	fp,32(sp)
    ecc8:	ddc00717 	ldw	r23,28(sp)
    eccc:	dd800617 	ldw	r22,24(sp)
    ecd0:	dd400517 	ldw	r21,20(sp)
    ecd4:	dd000417 	ldw	r20,16(sp)
    ecd8:	dcc00317 	ldw	r19,12(sp)
    ecdc:	dc800217 	ldw	r18,8(sp)
    ece0:	dc400117 	ldw	r17,4(sp)
    ece4:	dc000017 	ldw	r16,0(sp)
    ece8:	dec00a04 	addi	sp,sp,40
    ecec:	f800283a 	ret
    ecf0:	017fff04 	movi	r5,-4
    ecf4:	414a703a 	and	r5,r8,r5
    ecf8:	814d883a 	add	r6,r16,r5
    ecfc:	30c01f16 	blt	r6,r3,ed7c <_realloc_r+0x22c>
    ed00:	20800317 	ldw	r2,12(r4)
    ed04:	20c00217 	ldw	r3,8(r4)
    ed08:	a825883a 	mov	r18,r21
    ed0c:	3021883a 	mov	r16,r6
    ed10:	18800315 	stw	r2,12(r3)
    ed14:	10c00215 	stw	r3,8(r2)
    ed18:	003fdb06 	br	ec88 <_realloc_r+0x138>
    ed1c:	00800304 	movi	r2,12
    ed20:	a0800015 	stw	r2,0(r20)
    ed24:	0005883a 	mov	r2,zero
    ed28:	003fe506 	br	ecc0 <_realloc_r+0x170>
    ed2c:	98c00117 	ldw	r3,4(r19)
    ed30:	9c4b883a 	add	r5,r19,r17
    ed34:	11000054 	ori	r4,r2,1
    ed38:	18c0004c 	andi	r3,r3,1
    ed3c:	1c62b03a 	or	r17,r3,r17
    ed40:	9c400115 	stw	r17,4(r19)
    ed44:	29000115 	stw	r4,4(r5)
    ed48:	2885883a 	add	r2,r5,r2
    ed4c:	10c00117 	ldw	r3,4(r2)
    ed50:	29400204 	addi	r5,r5,8
    ed54:	a009883a 	mov	r4,r20
    ed58:	18c00054 	ori	r3,r3,1
    ed5c:	10c00115 	stw	r3,4(r2)
    ed60:	0008eec0 	call	8eec <_free_r>
    ed64:	003fd306 	br	ecb4 <_realloc_r+0x164>
    ed68:	017fff04 	movi	r5,-4
    ed6c:	414a703a 	and	r5,r8,r5
    ed70:	89800404 	addi	r6,r17,16
    ed74:	8151883a 	add	r8,r16,r5
    ed78:	4180590e 	bge	r8,r6,eee0 <_realloc_r+0x390>
    ed7c:	1080004c 	andi	r2,r2,1
    ed80:	103f9e1e 	bne	r2,zero,ebfc <_realloc_r+0xac>
    ed84:	adbffe17 	ldw	r22,-8(r21)
    ed88:	00bfff04 	movi	r2,-4
    ed8c:	9dadc83a 	sub	r22,r19,r22
    ed90:	b1800117 	ldw	r6,4(r22)
    ed94:	3084703a 	and	r2,r6,r2
    ed98:	20002026 	beq	r4,zero,ee1c <_realloc_r+0x2cc>
    ed9c:	80af883a 	add	r23,r16,r2
    eda0:	b96f883a 	add	r23,r23,r5
    eda4:	21c05f26 	beq	r4,r7,ef24 <_realloc_r+0x3d4>
    eda8:	b8c01c16 	blt	r23,r3,ee1c <_realloc_r+0x2cc>
    edac:	20800317 	ldw	r2,12(r4)
    edb0:	20c00217 	ldw	r3,8(r4)
    edb4:	81bfff04 	addi	r6,r16,-4
    edb8:	01000904 	movi	r4,36
    edbc:	18800315 	stw	r2,12(r3)
    edc0:	10c00215 	stw	r3,8(r2)
    edc4:	b0c00217 	ldw	r3,8(r22)
    edc8:	b0800317 	ldw	r2,12(r22)
    edcc:	b4800204 	addi	r18,r22,8
    edd0:	18800315 	stw	r2,12(r3)
    edd4:	10c00215 	stw	r3,8(r2)
    edd8:	21801b36 	bltu	r4,r6,ee48 <_realloc_r+0x2f8>
    eddc:	008004c4 	movi	r2,19
    ede0:	1180352e 	bgeu	r2,r6,eeb8 <_realloc_r+0x368>
    ede4:	a8800017 	ldw	r2,0(r21)
    ede8:	b0800215 	stw	r2,8(r22)
    edec:	a8800117 	ldw	r2,4(r21)
    edf0:	b0800315 	stw	r2,12(r22)
    edf4:	008006c4 	movi	r2,27
    edf8:	11807f36 	bltu	r2,r6,eff8 <_realloc_r+0x4a8>
    edfc:	b0800404 	addi	r2,r22,16
    ee00:	ad400204 	addi	r21,r21,8
    ee04:	00002d06 	br	eebc <_realloc_r+0x36c>
    ee08:	adbffe17 	ldw	r22,-8(r21)
    ee0c:	00bfff04 	movi	r2,-4
    ee10:	9dadc83a 	sub	r22,r19,r22
    ee14:	b1000117 	ldw	r4,4(r22)
    ee18:	2084703a 	and	r2,r4,r2
    ee1c:	b03f7726 	beq	r22,zero,ebfc <_realloc_r+0xac>
    ee20:	80af883a 	add	r23,r16,r2
    ee24:	b8ff7516 	blt	r23,r3,ebfc <_realloc_r+0xac>
    ee28:	b0800317 	ldw	r2,12(r22)
    ee2c:	b0c00217 	ldw	r3,8(r22)
    ee30:	81bfff04 	addi	r6,r16,-4
    ee34:	01000904 	movi	r4,36
    ee38:	18800315 	stw	r2,12(r3)
    ee3c:	10c00215 	stw	r3,8(r2)
    ee40:	b4800204 	addi	r18,r22,8
    ee44:	21bfe52e 	bgeu	r4,r6,eddc <_realloc_r+0x28c>
    ee48:	a80b883a 	mov	r5,r21
    ee4c:	9009883a 	mov	r4,r18
    ee50:	000e9940 	call	e994 <memmove>
    ee54:	b821883a 	mov	r16,r23
    ee58:	b027883a 	mov	r19,r22
    ee5c:	003f8a06 	br	ec88 <_realloc_r+0x138>
    ee60:	300b883a 	mov	r5,r6
    ee64:	dfc00917 	ldw	ra,36(sp)
    ee68:	df000817 	ldw	fp,32(sp)
    ee6c:	ddc00717 	ldw	r23,28(sp)
    ee70:	dd800617 	ldw	r22,24(sp)
    ee74:	dd400517 	ldw	r21,20(sp)
    ee78:	dd000417 	ldw	r20,16(sp)
    ee7c:	dcc00317 	ldw	r19,12(sp)
    ee80:	dc800217 	ldw	r18,8(sp)
    ee84:	dc400117 	ldw	r17,4(sp)
    ee88:	dc000017 	ldw	r16,0(sp)
    ee8c:	dec00a04 	addi	sp,sp,40
    ee90:	000961c1 	jmpi	961c <_malloc_r>
    ee94:	a8c00017 	ldw	r3,0(r21)
    ee98:	90c00015 	stw	r3,0(r18)
    ee9c:	a8c00117 	ldw	r3,4(r21)
    eea0:	90c00115 	stw	r3,4(r18)
    eea4:	00c006c4 	movi	r3,27
    eea8:	19804536 	bltu	r3,r6,efc0 <_realloc_r+0x470>
    eeac:	90800204 	addi	r2,r18,8
    eeb0:	a8c00204 	addi	r3,r21,8
    eeb4:	003f6306 	br	ec44 <_realloc_r+0xf4>
    eeb8:	9005883a 	mov	r2,r18
    eebc:	a8c00017 	ldw	r3,0(r21)
    eec0:	b821883a 	mov	r16,r23
    eec4:	b027883a 	mov	r19,r22
    eec8:	10c00015 	stw	r3,0(r2)
    eecc:	a8c00117 	ldw	r3,4(r21)
    eed0:	10c00115 	stw	r3,4(r2)
    eed4:	a8c00217 	ldw	r3,8(r21)
    eed8:	10c00215 	stw	r3,8(r2)
    eedc:	003f6a06 	br	ec88 <_realloc_r+0x138>
    eee0:	9c67883a 	add	r19,r19,r17
    eee4:	4445c83a 	sub	r2,r8,r17
    eee8:	e4c00215 	stw	r19,8(fp)
    eeec:	10800054 	ori	r2,r2,1
    eef0:	98800115 	stw	r2,4(r19)
    eef4:	a8bfff17 	ldw	r2,-4(r21)
    eef8:	a009883a 	mov	r4,r20
    eefc:	1080004c 	andi	r2,r2,1
    ef00:	1462b03a 	or	r17,r2,r17
    ef04:	ac7fff15 	stw	r17,-4(r21)
    ef08:	00132400 	call	13240 <__malloc_unlock>
    ef0c:	a805883a 	mov	r2,r21
    ef10:	003f6b06 	br	ecc0 <_realloc_r+0x170>
    ef14:	a80b883a 	mov	r5,r21
    ef18:	9009883a 	mov	r4,r18
    ef1c:	000e9940 	call	e994 <memmove>
    ef20:	003f4e06 	br	ec5c <_realloc_r+0x10c>
    ef24:	89000404 	addi	r4,r17,16
    ef28:	b93fbc16 	blt	r23,r4,ee1c <_realloc_r+0x2cc>
    ef2c:	b0800317 	ldw	r2,12(r22)
    ef30:	b0c00217 	ldw	r3,8(r22)
    ef34:	81bfff04 	addi	r6,r16,-4
    ef38:	01000904 	movi	r4,36
    ef3c:	18800315 	stw	r2,12(r3)
    ef40:	10c00215 	stw	r3,8(r2)
    ef44:	b4800204 	addi	r18,r22,8
    ef48:	21804336 	bltu	r4,r6,f058 <_realloc_r+0x508>
    ef4c:	008004c4 	movi	r2,19
    ef50:	11803f2e 	bgeu	r2,r6,f050 <_realloc_r+0x500>
    ef54:	a8800017 	ldw	r2,0(r21)
    ef58:	b0800215 	stw	r2,8(r22)
    ef5c:	a8800117 	ldw	r2,4(r21)
    ef60:	b0800315 	stw	r2,12(r22)
    ef64:	008006c4 	movi	r2,27
    ef68:	11803f36 	bltu	r2,r6,f068 <_realloc_r+0x518>
    ef6c:	b0800404 	addi	r2,r22,16
    ef70:	ad400204 	addi	r21,r21,8
    ef74:	a8c00017 	ldw	r3,0(r21)
    ef78:	10c00015 	stw	r3,0(r2)
    ef7c:	a8c00117 	ldw	r3,4(r21)
    ef80:	10c00115 	stw	r3,4(r2)
    ef84:	a8c00217 	ldw	r3,8(r21)
    ef88:	10c00215 	stw	r3,8(r2)
    ef8c:	b447883a 	add	r3,r22,r17
    ef90:	bc45c83a 	sub	r2,r23,r17
    ef94:	e0c00215 	stw	r3,8(fp)
    ef98:	10800054 	ori	r2,r2,1
    ef9c:	18800115 	stw	r2,4(r3)
    efa0:	b0800117 	ldw	r2,4(r22)
    efa4:	a009883a 	mov	r4,r20
    efa8:	1080004c 	andi	r2,r2,1
    efac:	1462b03a 	or	r17,r2,r17
    efb0:	b4400115 	stw	r17,4(r22)
    efb4:	00132400 	call	13240 <__malloc_unlock>
    efb8:	9005883a 	mov	r2,r18
    efbc:	003f4006 	br	ecc0 <_realloc_r+0x170>
    efc0:	a8c00217 	ldw	r3,8(r21)
    efc4:	90c00215 	stw	r3,8(r18)
    efc8:	a8c00317 	ldw	r3,12(r21)
    efcc:	90c00315 	stw	r3,12(r18)
    efd0:	30801126 	beq	r6,r2,f018 <_realloc_r+0x4c8>
    efd4:	90800404 	addi	r2,r18,16
    efd8:	a8c00404 	addi	r3,r21,16
    efdc:	003f1906 	br	ec44 <_realloc_r+0xf4>
    efe0:	90ffff17 	ldw	r3,-4(r18)
    efe4:	00bfff04 	movi	r2,-4
    efe8:	a825883a 	mov	r18,r21
    efec:	1884703a 	and	r2,r3,r2
    eff0:	80a1883a 	add	r16,r16,r2
    eff4:	003f2406 	br	ec88 <_realloc_r+0x138>
    eff8:	a8800217 	ldw	r2,8(r21)
    effc:	b0800415 	stw	r2,16(r22)
    f000:	a8800317 	ldw	r2,12(r21)
    f004:	b0800515 	stw	r2,20(r22)
    f008:	31000a26 	beq	r6,r4,f034 <_realloc_r+0x4e4>
    f00c:	b0800604 	addi	r2,r22,24
    f010:	ad400404 	addi	r21,r21,16
    f014:	003fa906 	br	eebc <_realloc_r+0x36c>
    f018:	a9000417 	ldw	r4,16(r21)
    f01c:	90800604 	addi	r2,r18,24
    f020:	a8c00604 	addi	r3,r21,24
    f024:	91000415 	stw	r4,16(r18)
    f028:	a9000517 	ldw	r4,20(r21)
    f02c:	91000515 	stw	r4,20(r18)
    f030:	003f0406 	br	ec44 <_realloc_r+0xf4>
    f034:	a8c00417 	ldw	r3,16(r21)
    f038:	ad400604 	addi	r21,r21,24
    f03c:	b0800804 	addi	r2,r22,32
    f040:	b0c00615 	stw	r3,24(r22)
    f044:	a8ffff17 	ldw	r3,-4(r21)
    f048:	b0c00715 	stw	r3,28(r22)
    f04c:	003f9b06 	br	eebc <_realloc_r+0x36c>
    f050:	9005883a 	mov	r2,r18
    f054:	003fc706 	br	ef74 <_realloc_r+0x424>
    f058:	a80b883a 	mov	r5,r21
    f05c:	9009883a 	mov	r4,r18
    f060:	000e9940 	call	e994 <memmove>
    f064:	003fc906 	br	ef8c <_realloc_r+0x43c>
    f068:	a8800217 	ldw	r2,8(r21)
    f06c:	b0800415 	stw	r2,16(r22)
    f070:	a8800317 	ldw	r2,12(r21)
    f074:	b0800515 	stw	r2,20(r22)
    f078:	31000726 	beq	r6,r4,f098 <_realloc_r+0x548>
    f07c:	b0800604 	addi	r2,r22,24
    f080:	ad400404 	addi	r21,r21,16
    f084:	003fbb06 	br	ef74 <_realloc_r+0x424>
    f088:	a009883a 	mov	r4,r20
    f08c:	00132400 	call	13240 <__malloc_unlock>
    f090:	0005883a 	mov	r2,zero
    f094:	003f0a06 	br	ecc0 <_realloc_r+0x170>
    f098:	a8c00417 	ldw	r3,16(r21)
    f09c:	ad400604 	addi	r21,r21,24
    f0a0:	b0800804 	addi	r2,r22,32
    f0a4:	b0c00615 	stw	r3,24(r22)
    f0a8:	a8ffff17 	ldw	r3,-4(r21)
    f0ac:	b0c00715 	stw	r3,28(r22)
    f0b0:	003fb006 	br	ef74 <_realloc_r+0x424>

0000f0b4 <__swbuf_r>:
    f0b4:	defffb04 	addi	sp,sp,-20
    f0b8:	dcc00315 	stw	r19,12(sp)
    f0bc:	dc800215 	stw	r18,8(sp)
    f0c0:	dc000015 	stw	r16,0(sp)
    f0c4:	dfc00415 	stw	ra,16(sp)
    f0c8:	dc400115 	stw	r17,4(sp)
    f0cc:	2025883a 	mov	r18,r4
    f0d0:	2827883a 	mov	r19,r5
    f0d4:	3021883a 	mov	r16,r6
    f0d8:	20000226 	beq	r4,zero,f0e4 <__swbuf_r+0x30>
    f0dc:	20800e17 	ldw	r2,56(r4)
    f0e0:	10004226 	beq	r2,zero,f1ec <__swbuf_r+0x138>
    f0e4:	80800617 	ldw	r2,24(r16)
    f0e8:	8100030b 	ldhu	r4,12(r16)
    f0ec:	80800215 	stw	r2,8(r16)
    f0f0:	2080020c 	andi	r2,r4,8
    f0f4:	10003626 	beq	r2,zero,f1d0 <__swbuf_r+0x11c>
    f0f8:	80c00417 	ldw	r3,16(r16)
    f0fc:	18003426 	beq	r3,zero,f1d0 <__swbuf_r+0x11c>
    f100:	2088000c 	andi	r2,r4,8192
    f104:	9c403fcc 	andi	r17,r19,255
    f108:	10001a26 	beq	r2,zero,f174 <__swbuf_r+0xc0>
    f10c:	80800017 	ldw	r2,0(r16)
    f110:	81000517 	ldw	r4,20(r16)
    f114:	10c7c83a 	sub	r3,r2,r3
    f118:	1900200e 	bge	r3,r4,f19c <__swbuf_r+0xe8>
    f11c:	18c00044 	addi	r3,r3,1
    f120:	81000217 	ldw	r4,8(r16)
    f124:	11400044 	addi	r5,r2,1
    f128:	81400015 	stw	r5,0(r16)
    f12c:	213fffc4 	addi	r4,r4,-1
    f130:	81000215 	stw	r4,8(r16)
    f134:	14c00005 	stb	r19,0(r2)
    f138:	80800517 	ldw	r2,20(r16)
    f13c:	10c01e26 	beq	r2,r3,f1b8 <__swbuf_r+0x104>
    f140:	8080030b 	ldhu	r2,12(r16)
    f144:	1080004c 	andi	r2,r2,1
    f148:	10000226 	beq	r2,zero,f154 <__swbuf_r+0xa0>
    f14c:	00800284 	movi	r2,10
    f150:	88801926 	beq	r17,r2,f1b8 <__swbuf_r+0x104>
    f154:	8805883a 	mov	r2,r17
    f158:	dfc00417 	ldw	ra,16(sp)
    f15c:	dcc00317 	ldw	r19,12(sp)
    f160:	dc800217 	ldw	r18,8(sp)
    f164:	dc400117 	ldw	r17,4(sp)
    f168:	dc000017 	ldw	r16,0(sp)
    f16c:	dec00504 	addi	sp,sp,20
    f170:	f800283a 	ret
    f174:	81401917 	ldw	r5,100(r16)
    f178:	00b7ffc4 	movi	r2,-8193
    f17c:	21080014 	ori	r4,r4,8192
    f180:	2884703a 	and	r2,r5,r2
    f184:	80801915 	stw	r2,100(r16)
    f188:	80800017 	ldw	r2,0(r16)
    f18c:	8100030d 	sth	r4,12(r16)
    f190:	81000517 	ldw	r4,20(r16)
    f194:	10c7c83a 	sub	r3,r2,r3
    f198:	193fe016 	blt	r3,r4,f11c <__swbuf_r+0x68>
    f19c:	800b883a 	mov	r5,r16
    f1a0:	9009883a 	mov	r4,r18
    f1a4:	000899c0 	call	899c <_fflush_r>
    f1a8:	1000071e 	bne	r2,zero,f1c8 <__swbuf_r+0x114>
    f1ac:	80800017 	ldw	r2,0(r16)
    f1b0:	00c00044 	movi	r3,1
    f1b4:	003fda06 	br	f120 <__swbuf_r+0x6c>
    f1b8:	800b883a 	mov	r5,r16
    f1bc:	9009883a 	mov	r4,r18
    f1c0:	000899c0 	call	899c <_fflush_r>
    f1c4:	103fe326 	beq	r2,zero,f154 <__swbuf_r+0xa0>
    f1c8:	00bfffc4 	movi	r2,-1
    f1cc:	003fe206 	br	f158 <__swbuf_r+0xa4>
    f1d0:	800b883a 	mov	r5,r16
    f1d4:	9009883a 	mov	r4,r18
    f1d8:	0006da40 	call	6da4 <__swsetup_r>
    f1dc:	103ffa1e 	bne	r2,zero,f1c8 <__swbuf_r+0x114>
    f1e0:	8100030b 	ldhu	r4,12(r16)
    f1e4:	80c00417 	ldw	r3,16(r16)
    f1e8:	003fc506 	br	f100 <__swbuf_r+0x4c>
    f1ec:	0008d780 	call	8d78 <__sinit>
    f1f0:	003fbc06 	br	f0e4 <__swbuf_r+0x30>

0000f1f4 <__swbuf>:
    f1f4:	008000b4 	movhi	r2,2
    f1f8:	10864604 	addi	r2,r2,6424
    f1fc:	280d883a 	mov	r6,r5
    f200:	200b883a 	mov	r5,r4
    f204:	11000017 	ldw	r4,0(r2)
    f208:	000f0b41 	jmpi	f0b4 <__swbuf_r>

0000f20c <_wcrtomb_r>:
    f20c:	defff604 	addi	sp,sp,-40
    f210:	008000b4 	movhi	r2,2
    f214:	dc800815 	stw	r18,32(sp)
    f218:	dc400715 	stw	r17,28(sp)
    f21c:	dc000615 	stw	r16,24(sp)
    f220:	10864a04 	addi	r2,r2,6440
    f224:	dfc00915 	stw	ra,36(sp)
    f228:	2021883a 	mov	r16,r4
    f22c:	3823883a 	mov	r17,r7
    f230:	14800017 	ldw	r18,0(r2)
    f234:	28001426 	beq	r5,zero,f288 <_wcrtomb_r+0x7c>
    f238:	d9400415 	stw	r5,16(sp)
    f23c:	d9800515 	stw	r6,20(sp)
    f240:	00094000 	call	9400 <__locale_charset>
    f244:	d9800517 	ldw	r6,20(sp)
    f248:	d9400417 	ldw	r5,16(sp)
    f24c:	100f883a 	mov	r7,r2
    f250:	dc400015 	stw	r17,0(sp)
    f254:	8009883a 	mov	r4,r16
    f258:	903ee83a 	callr	r18
    f25c:	00ffffc4 	movi	r3,-1
    f260:	10c0031e 	bne	r2,r3,f270 <_wcrtomb_r+0x64>
    f264:	88000015 	stw	zero,0(r17)
    f268:	00c02284 	movi	r3,138
    f26c:	80c00015 	stw	r3,0(r16)
    f270:	dfc00917 	ldw	ra,36(sp)
    f274:	dc800817 	ldw	r18,32(sp)
    f278:	dc400717 	ldw	r17,28(sp)
    f27c:	dc000617 	ldw	r16,24(sp)
    f280:	dec00a04 	addi	sp,sp,40
    f284:	f800283a 	ret
    f288:	00094000 	call	9400 <__locale_charset>
    f28c:	100f883a 	mov	r7,r2
    f290:	dc400015 	stw	r17,0(sp)
    f294:	000d883a 	mov	r6,zero
    f298:	d9400104 	addi	r5,sp,4
    f29c:	8009883a 	mov	r4,r16
    f2a0:	903ee83a 	callr	r18
    f2a4:	003fed06 	br	f25c <_wcrtomb_r+0x50>

0000f2a8 <wcrtomb>:
    f2a8:	defff604 	addi	sp,sp,-40
    f2ac:	008000b4 	movhi	r2,2
    f2b0:	dc800615 	stw	r18,24(sp)
    f2b4:	dc400515 	stw	r17,20(sp)
    f2b8:	10864604 	addi	r2,r2,6424
    f2bc:	dfc00915 	stw	ra,36(sp)
    f2c0:	dd000815 	stw	r20,32(sp)
    f2c4:	dcc00715 	stw	r19,28(sp)
    f2c8:	dc000415 	stw	r16,16(sp)
    f2cc:	3025883a 	mov	r18,r6
    f2d0:	14400017 	ldw	r17,0(r2)
    f2d4:	20001926 	beq	r4,zero,f33c <wcrtomb+0x94>
    f2d8:	008000b4 	movhi	r2,2
    f2dc:	10864a04 	addi	r2,r2,6440
    f2e0:	15000017 	ldw	r20,0(r2)
    f2e4:	2021883a 	mov	r16,r4
    f2e8:	2827883a 	mov	r19,r5
    f2ec:	00094000 	call	9400 <__locale_charset>
    f2f0:	100f883a 	mov	r7,r2
    f2f4:	dc800015 	stw	r18,0(sp)
    f2f8:	980d883a 	mov	r6,r19
    f2fc:	800b883a 	mov	r5,r16
    f300:	8809883a 	mov	r4,r17
    f304:	a03ee83a 	callr	r20
    f308:	00ffffc4 	movi	r3,-1
    f30c:	10c0031e 	bne	r2,r3,f31c <wcrtomb+0x74>
    f310:	90000015 	stw	zero,0(r18)
    f314:	00c02284 	movi	r3,138
    f318:	88c00015 	stw	r3,0(r17)
    f31c:	dfc00917 	ldw	ra,36(sp)
    f320:	dd000817 	ldw	r20,32(sp)
    f324:	dcc00717 	ldw	r19,28(sp)
    f328:	dc800617 	ldw	r18,24(sp)
    f32c:	dc400517 	ldw	r17,20(sp)
    f330:	dc000417 	ldw	r16,16(sp)
    f334:	dec00a04 	addi	sp,sp,40
    f338:	f800283a 	ret
    f33c:	008000b4 	movhi	r2,2
    f340:	10864a04 	addi	r2,r2,6440
    f344:	14000017 	ldw	r16,0(r2)
    f348:	00094000 	call	9400 <__locale_charset>
    f34c:	100f883a 	mov	r7,r2
    f350:	dc800015 	stw	r18,0(sp)
    f354:	000d883a 	mov	r6,zero
    f358:	d9400104 	addi	r5,sp,4
    f35c:	8809883a 	mov	r4,r17
    f360:	803ee83a 	callr	r16
    f364:	003fe806 	br	f308 <wcrtomb+0x60>

0000f368 <__ascii_wctomb>:
    f368:	28000526 	beq	r5,zero,f380 <__ascii_wctomb+0x18>
    f36c:	00803fc4 	movi	r2,255
    f370:	11800536 	bltu	r2,r6,f388 <__ascii_wctomb+0x20>
    f374:	29800005 	stb	r6,0(r5)
    f378:	00800044 	movi	r2,1
    f37c:	f800283a 	ret
    f380:	0005883a 	mov	r2,zero
    f384:	f800283a 	ret
    f388:	00802284 	movi	r2,138
    f38c:	20800015 	stw	r2,0(r4)
    f390:	00bfffc4 	movi	r2,-1
    f394:	f800283a 	ret

0000f398 <_wctomb_r>:
    f398:	008000b4 	movhi	r2,2
    f39c:	defff904 	addi	sp,sp,-28
    f3a0:	10864a04 	addi	r2,r2,6440
    f3a4:	dfc00615 	stw	ra,24(sp)
    f3a8:	dc400515 	stw	r17,20(sp)
    f3ac:	dc000415 	stw	r16,16(sp)
    f3b0:	3823883a 	mov	r17,r7
    f3b4:	14000017 	ldw	r16,0(r2)
    f3b8:	d9000115 	stw	r4,4(sp)
    f3bc:	d9400215 	stw	r5,8(sp)
    f3c0:	d9800315 	stw	r6,12(sp)
    f3c4:	00094000 	call	9400 <__locale_charset>
    f3c8:	d9800317 	ldw	r6,12(sp)
    f3cc:	d9400217 	ldw	r5,8(sp)
    f3d0:	d9000117 	ldw	r4,4(sp)
    f3d4:	100f883a 	mov	r7,r2
    f3d8:	dc400015 	stw	r17,0(sp)
    f3dc:	803ee83a 	callr	r16
    f3e0:	dfc00617 	ldw	ra,24(sp)
    f3e4:	dc400517 	ldw	r17,20(sp)
    f3e8:	dc000417 	ldw	r16,16(sp)
    f3ec:	dec00704 	addi	sp,sp,28
    f3f0:	f800283a 	ret

0000f3f4 <__udivdi3>:
    f3f4:	defff504 	addi	sp,sp,-44
    f3f8:	dcc00415 	stw	r19,16(sp)
    f3fc:	dc000115 	stw	r16,4(sp)
    f400:	dfc00a15 	stw	ra,40(sp)
    f404:	df000915 	stw	fp,36(sp)
    f408:	ddc00815 	stw	r23,32(sp)
    f40c:	dd800715 	stw	r22,28(sp)
    f410:	dd400615 	stw	r21,24(sp)
    f414:	dd000515 	stw	r20,20(sp)
    f418:	dc800315 	stw	r18,12(sp)
    f41c:	dc400215 	stw	r17,8(sp)
    f420:	2027883a 	mov	r19,r4
    f424:	2821883a 	mov	r16,r5
    f428:	3800411e 	bne	r7,zero,f530 <__udivdi3+0x13c>
    f42c:	3023883a 	mov	r17,r6
    f430:	2025883a 	mov	r18,r4
    f434:	2980522e 	bgeu	r5,r6,f580 <__udivdi3+0x18c>
    f438:	00bfffd4 	movui	r2,65535
    f43c:	282d883a 	mov	r22,r5
    f440:	1180a836 	bltu	r2,r6,f6e4 <__udivdi3+0x2f0>
    f444:	00803fc4 	movi	r2,255
    f448:	1185803a 	cmpltu	r2,r2,r6
    f44c:	100490fa 	slli	r2,r2,3
    f450:	3086d83a 	srl	r3,r6,r2
    f454:	010000b4 	movhi	r4,2
    f458:	213dda04 	addi	r4,r4,-2200
    f45c:	20c7883a 	add	r3,r4,r3
    f460:	18c00003 	ldbu	r3,0(r3)
    f464:	1885883a 	add	r2,r3,r2
    f468:	00c00804 	movi	r3,32
    f46c:	1887c83a 	sub	r3,r3,r2
    f470:	18000526 	beq	r3,zero,f488 <__udivdi3+0x94>
    f474:	80e0983a 	sll	r16,r16,r3
    f478:	9884d83a 	srl	r2,r19,r2
    f47c:	30e2983a 	sll	r17,r6,r3
    f480:	98e4983a 	sll	r18,r19,r3
    f484:	142cb03a 	or	r22,r2,r16
    f488:	882ad43a 	srli	r21,r17,16
    f48c:	b009883a 	mov	r4,r22
    f490:	8d3fffcc 	andi	r20,r17,65535
    f494:	a80b883a 	mov	r5,r21
    f498:	00100000 	call	10000 <__umodsi3>
    f49c:	b009883a 	mov	r4,r22
    f4a0:	a80b883a 	mov	r5,r21
    f4a4:	1027883a 	mov	r19,r2
    f4a8:	000ff9c0 	call	ff9c <__udivsi3>
    f4ac:	102d883a 	mov	r22,r2
    f4b0:	9826943a 	slli	r19,r19,16
    f4b4:	9004d43a 	srli	r2,r18,16
    f4b8:	a5a1383a 	mul	r16,r20,r22
    f4bc:	14c4b03a 	or	r2,r2,r19
    f4c0:	1400052e 	bgeu	r2,r16,f4d8 <__udivdi3+0xe4>
    f4c4:	1445883a 	add	r2,r2,r17
    f4c8:	b0ffffc4 	addi	r3,r22,-1
    f4cc:	14400136 	bltu	r2,r17,f4d4 <__udivdi3+0xe0>
    f4d0:	14012336 	bltu	r2,r16,f960 <__udivdi3+0x56c>
    f4d4:	182d883a 	mov	r22,r3
    f4d8:	1421c83a 	sub	r16,r2,r16
    f4dc:	a80b883a 	mov	r5,r21
    f4e0:	8009883a 	mov	r4,r16
    f4e4:	00100000 	call	10000 <__umodsi3>
    f4e8:	1027883a 	mov	r19,r2
    f4ec:	a80b883a 	mov	r5,r21
    f4f0:	8009883a 	mov	r4,r16
    f4f4:	000ff9c0 	call	ff9c <__udivsi3>
    f4f8:	9826943a 	slli	r19,r19,16
    f4fc:	a0a9383a 	mul	r20,r20,r2
    f500:	94bfffcc 	andi	r18,r18,65535
    f504:	94e4b03a 	or	r18,r18,r19
    f508:	9500052e 	bgeu	r18,r20,f520 <__udivdi3+0x12c>
    f50c:	8ca5883a 	add	r18,r17,r18
    f510:	10ffffc4 	addi	r3,r2,-1
    f514:	9440f136 	bltu	r18,r17,f8dc <__udivdi3+0x4e8>
    f518:	9500f02e 	bgeu	r18,r20,f8dc <__udivdi3+0x4e8>
    f51c:	10bfff84 	addi	r2,r2,-2
    f520:	b00c943a 	slli	r6,r22,16
    f524:	0007883a 	mov	r3,zero
    f528:	3084b03a 	or	r2,r6,r2
    f52c:	00005906 	br	f694 <__udivdi3+0x2a0>
    f530:	29c05636 	bltu	r5,r7,f68c <__udivdi3+0x298>
    f534:	00bfffd4 	movui	r2,65535
    f538:	11c0622e 	bgeu	r2,r7,f6c4 <__udivdi3+0x2d0>
    f53c:	00804034 	movhi	r2,256
    f540:	10bfffc4 	addi	r2,r2,-1
    f544:	11c0ee36 	bltu	r2,r7,f900 <__udivdi3+0x50c>
    f548:	00800404 	movi	r2,16
    f54c:	3886d83a 	srl	r3,r7,r2
    f550:	010000b4 	movhi	r4,2
    f554:	213dda04 	addi	r4,r4,-2200
    f558:	20c7883a 	add	r3,r4,r3
    f55c:	18c00003 	ldbu	r3,0(r3)
    f560:	05400804 	movi	r21,32
    f564:	1885883a 	add	r2,r3,r2
    f568:	a8abc83a 	sub	r21,r21,r2
    f56c:	a800621e 	bne	r21,zero,f6f8 <__udivdi3+0x304>
    f570:	3c00e936 	bltu	r7,r16,f918 <__udivdi3+0x524>
    f574:	9985403a 	cmpgeu	r2,r19,r6
    f578:	0007883a 	mov	r3,zero
    f57c:	00004506 	br	f694 <__udivdi3+0x2a0>
    f580:	3000041e 	bne	r6,zero,f594 <__udivdi3+0x1a0>
    f584:	000b883a 	mov	r5,zero
    f588:	01000044 	movi	r4,1
    f58c:	000ff9c0 	call	ff9c <__udivsi3>
    f590:	1023883a 	mov	r17,r2
    f594:	00bfffd4 	movui	r2,65535
    f598:	14404e2e 	bgeu	r2,r17,f6d4 <__udivdi3+0x2e0>
    f59c:	00804034 	movhi	r2,256
    f5a0:	10bfffc4 	addi	r2,r2,-1
    f5a4:	1440d836 	bltu	r2,r17,f908 <__udivdi3+0x514>
    f5a8:	00800404 	movi	r2,16
    f5ac:	8886d83a 	srl	r3,r17,r2
    f5b0:	010000b4 	movhi	r4,2
    f5b4:	213dda04 	addi	r4,r4,-2200
    f5b8:	20c7883a 	add	r3,r4,r3
    f5bc:	18c00003 	ldbu	r3,0(r3)
    f5c0:	1885883a 	add	r2,r3,r2
    f5c4:	00c00804 	movi	r3,32
    f5c8:	1887c83a 	sub	r3,r3,r2
    f5cc:	18008f1e 	bne	r3,zero,f80c <__udivdi3+0x418>
    f5d0:	882ad43a 	srli	r21,r17,16
    f5d4:	8461c83a 	sub	r16,r16,r17
    f5d8:	8d3fffcc 	andi	r20,r17,65535
    f5dc:	00c00044 	movi	r3,1
    f5e0:	8009883a 	mov	r4,r16
    f5e4:	a80b883a 	mov	r5,r21
    f5e8:	d8c00015 	stw	r3,0(sp)
    f5ec:	00100000 	call	10000 <__umodsi3>
    f5f0:	8009883a 	mov	r4,r16
    f5f4:	a80b883a 	mov	r5,r21
    f5f8:	1027883a 	mov	r19,r2
    f5fc:	000ff9c0 	call	ff9c <__udivsi3>
    f600:	9826943a 	slli	r19,r19,16
    f604:	9008d43a 	srli	r4,r18,16
    f608:	1521383a 	mul	r16,r2,r20
    f60c:	102d883a 	mov	r22,r2
    f610:	24c8b03a 	or	r4,r4,r19
    f614:	d8c00017 	ldw	r3,0(sp)
    f618:	2400052e 	bgeu	r4,r16,f630 <__udivdi3+0x23c>
    f61c:	2449883a 	add	r4,r4,r17
    f620:	b0bfffc4 	addi	r2,r22,-1
    f624:	24400136 	bltu	r4,r17,f62c <__udivdi3+0x238>
    f628:	2400ca36 	bltu	r4,r16,f954 <__udivdi3+0x560>
    f62c:	102d883a 	mov	r22,r2
    f630:	2421c83a 	sub	r16,r4,r16
    f634:	a80b883a 	mov	r5,r21
    f638:	8009883a 	mov	r4,r16
    f63c:	d8c00015 	stw	r3,0(sp)
    f640:	00100000 	call	10000 <__umodsi3>
    f644:	1027883a 	mov	r19,r2
    f648:	a80b883a 	mov	r5,r21
    f64c:	8009883a 	mov	r4,r16
    f650:	000ff9c0 	call	ff9c <__udivsi3>
    f654:	9826943a 	slli	r19,r19,16
    f658:	1529383a 	mul	r20,r2,r20
    f65c:	94bfffcc 	andi	r18,r18,65535
    f660:	94e4b03a 	or	r18,r18,r19
    f664:	d8c00017 	ldw	r3,0(sp)
    f668:	9500052e 	bgeu	r18,r20,f680 <__udivdi3+0x28c>
    f66c:	8ca5883a 	add	r18,r17,r18
    f670:	113fffc4 	addi	r4,r2,-1
    f674:	94409736 	bltu	r18,r17,f8d4 <__udivdi3+0x4e0>
    f678:	9500962e 	bgeu	r18,r20,f8d4 <__udivdi3+0x4e0>
    f67c:	10bfff84 	addi	r2,r2,-2
    f680:	b00c943a 	slli	r6,r22,16
    f684:	3084b03a 	or	r2,r6,r2
    f688:	00000206 	br	f694 <__udivdi3+0x2a0>
    f68c:	0007883a 	mov	r3,zero
    f690:	0005883a 	mov	r2,zero
    f694:	dfc00a17 	ldw	ra,40(sp)
    f698:	df000917 	ldw	fp,36(sp)
    f69c:	ddc00817 	ldw	r23,32(sp)
    f6a0:	dd800717 	ldw	r22,28(sp)
    f6a4:	dd400617 	ldw	r21,24(sp)
    f6a8:	dd000517 	ldw	r20,20(sp)
    f6ac:	dcc00417 	ldw	r19,16(sp)
    f6b0:	dc800317 	ldw	r18,12(sp)
    f6b4:	dc400217 	ldw	r17,8(sp)
    f6b8:	dc000117 	ldw	r16,4(sp)
    f6bc:	dec00b04 	addi	sp,sp,44
    f6c0:	f800283a 	ret
    f6c4:	00803fc4 	movi	r2,255
    f6c8:	11c5803a 	cmpltu	r2,r2,r7
    f6cc:	100490fa 	slli	r2,r2,3
    f6d0:	003f9e06 	br	f54c <__udivdi3+0x158>
    f6d4:	00803fc4 	movi	r2,255
    f6d8:	1445803a 	cmpltu	r2,r2,r17
    f6dc:	100490fa 	slli	r2,r2,3
    f6e0:	003fb206 	br	f5ac <__udivdi3+0x1b8>
    f6e4:	00804034 	movhi	r2,256
    f6e8:	10bfffc4 	addi	r2,r2,-1
    f6ec:	11808836 	bltu	r2,r6,f910 <__udivdi3+0x51c>
    f6f0:	00800404 	movi	r2,16
    f6f4:	003f5606 	br	f450 <__udivdi3+0x5c>
    f6f8:	30aed83a 	srl	r23,r6,r2
    f6fc:	3d4e983a 	sll	r7,r7,r21
    f700:	80acd83a 	srl	r22,r16,r2
    f704:	9884d83a 	srl	r2,r19,r2
    f708:	3deeb03a 	or	r23,r7,r23
    f70c:	b824d43a 	srli	r18,r23,16
    f710:	8560983a 	sll	r16,r16,r21
    f714:	b009883a 	mov	r4,r22
    f718:	900b883a 	mov	r5,r18
    f71c:	3568983a 	sll	r20,r6,r21
    f720:	1420b03a 	or	r16,r2,r16
    f724:	00100000 	call	10000 <__umodsi3>
    f728:	b009883a 	mov	r4,r22
    f72c:	900b883a 	mov	r5,r18
    f730:	1023883a 	mov	r17,r2
    f734:	000ff9c0 	call	ff9c <__udivsi3>
    f738:	8808943a 	slli	r4,r17,16
    f73c:	bf3fffcc 	andi	fp,r23,65535
    f740:	8006d43a 	srli	r3,r16,16
    f744:	e0a3383a 	mul	r17,fp,r2
    f748:	100d883a 	mov	r6,r2
    f74c:	1906b03a 	or	r3,r3,r4
    f750:	1c40042e 	bgeu	r3,r17,f764 <__udivdi3+0x370>
    f754:	1dc7883a 	add	r3,r3,r23
    f758:	10bfffc4 	addi	r2,r2,-1
    f75c:	1dc0752e 	bgeu	r3,r23,f934 <__udivdi3+0x540>
    f760:	100d883a 	mov	r6,r2
    f764:	1c63c83a 	sub	r17,r3,r17
    f768:	900b883a 	mov	r5,r18
    f76c:	8809883a 	mov	r4,r17
    f770:	d9800015 	stw	r6,0(sp)
    f774:	00100000 	call	10000 <__umodsi3>
    f778:	102d883a 	mov	r22,r2
    f77c:	8809883a 	mov	r4,r17
    f780:	900b883a 	mov	r5,r18
    f784:	000ff9c0 	call	ff9c <__udivsi3>
    f788:	b02c943a 	slli	r22,r22,16
    f78c:	e089383a 	mul	r4,fp,r2
    f790:	843fffcc 	andi	r16,r16,65535
    f794:	85a0b03a 	or	r16,r16,r22
    f798:	d9800017 	ldw	r6,0(sp)
    f79c:	8100042e 	bgeu	r16,r4,f7b0 <__udivdi3+0x3bc>
    f7a0:	85e1883a 	add	r16,r16,r23
    f7a4:	10ffffc4 	addi	r3,r2,-1
    f7a8:	85c05e2e 	bgeu	r16,r23,f924 <__udivdi3+0x530>
    f7ac:	1805883a 	mov	r2,r3
    f7b0:	300c943a 	slli	r6,r6,16
    f7b4:	a17fffcc 	andi	r5,r20,65535
    f7b8:	a028d43a 	srli	r20,r20,16
    f7bc:	3084b03a 	or	r2,r6,r2
    f7c0:	10ffffcc 	andi	r3,r2,65535
    f7c4:	100cd43a 	srli	r6,r2,16
    f7c8:	194f383a 	mul	r7,r3,r5
    f7cc:	1d07383a 	mul	r3,r3,r20
    f7d0:	314b383a 	mul	r5,r6,r5
    f7d4:	3810d43a 	srli	r8,r7,16
    f7d8:	8121c83a 	sub	r16,r16,r4
    f7dc:	1947883a 	add	r3,r3,r5
    f7e0:	40c7883a 	add	r3,r8,r3
    f7e4:	350d383a 	mul	r6,r6,r20
    f7e8:	1940022e 	bgeu	r3,r5,f7f4 <__udivdi3+0x400>
    f7ec:	01000074 	movhi	r4,1
    f7f0:	310d883a 	add	r6,r6,r4
    f7f4:	1828d43a 	srli	r20,r3,16
    f7f8:	a18d883a 	add	r6,r20,r6
    f7fc:	81803e36 	bltu	r16,r6,f8f8 <__udivdi3+0x504>
    f800:	81803826 	beq	r16,r6,f8e4 <__udivdi3+0x4f0>
    f804:	0007883a 	mov	r3,zero
    f808:	003fa206 	br	f694 <__udivdi3+0x2a0>
    f80c:	88e2983a 	sll	r17,r17,r3
    f810:	80a8d83a 	srl	r20,r16,r2
    f814:	80e0983a 	sll	r16,r16,r3
    f818:	882ad43a 	srli	r21,r17,16
    f81c:	9884d83a 	srl	r2,r19,r2
    f820:	a009883a 	mov	r4,r20
    f824:	a80b883a 	mov	r5,r21
    f828:	142eb03a 	or	r23,r2,r16
    f82c:	98e4983a 	sll	r18,r19,r3
    f830:	00100000 	call	10000 <__umodsi3>
    f834:	a009883a 	mov	r4,r20
    f838:	a80b883a 	mov	r5,r21
    f83c:	1021883a 	mov	r16,r2
    f840:	000ff9c0 	call	ff9c <__udivsi3>
    f844:	1039883a 	mov	fp,r2
    f848:	8d3fffcc 	andi	r20,r17,65535
    f84c:	8020943a 	slli	r16,r16,16
    f850:	b804d43a 	srli	r2,r23,16
    f854:	a72d383a 	mul	r22,r20,fp
    f858:	1404b03a 	or	r2,r2,r16
    f85c:	1580062e 	bgeu	r2,r22,f878 <__udivdi3+0x484>
    f860:	1445883a 	add	r2,r2,r17
    f864:	e0ffffc4 	addi	r3,fp,-1
    f868:	14403836 	bltu	r2,r17,f94c <__udivdi3+0x558>
    f86c:	1580372e 	bgeu	r2,r22,f94c <__udivdi3+0x558>
    f870:	e73fff84 	addi	fp,fp,-2
    f874:	1445883a 	add	r2,r2,r17
    f878:	15adc83a 	sub	r22,r2,r22
    f87c:	a80b883a 	mov	r5,r21
    f880:	b009883a 	mov	r4,r22
    f884:	00100000 	call	10000 <__umodsi3>
    f888:	1027883a 	mov	r19,r2
    f88c:	b009883a 	mov	r4,r22
    f890:	a80b883a 	mov	r5,r21
    f894:	000ff9c0 	call	ff9c <__udivsi3>
    f898:	9826943a 	slli	r19,r19,16
    f89c:	a0a1383a 	mul	r16,r20,r2
    f8a0:	b93fffcc 	andi	r4,r23,65535
    f8a4:	24c8b03a 	or	r4,r4,r19
    f8a8:	2400062e 	bgeu	r4,r16,f8c4 <__udivdi3+0x4d0>
    f8ac:	2449883a 	add	r4,r4,r17
    f8b0:	10ffffc4 	addi	r3,r2,-1
    f8b4:	24402336 	bltu	r4,r17,f944 <__udivdi3+0x550>
    f8b8:	2400222e 	bgeu	r4,r16,f944 <__udivdi3+0x550>
    f8bc:	10bfff84 	addi	r2,r2,-2
    f8c0:	2449883a 	add	r4,r4,r17
    f8c4:	e038943a 	slli	fp,fp,16
    f8c8:	2421c83a 	sub	r16,r4,r16
    f8cc:	e086b03a 	or	r3,fp,r2
    f8d0:	003f4306 	br	f5e0 <__udivdi3+0x1ec>
    f8d4:	2005883a 	mov	r2,r4
    f8d8:	003f6906 	br	f680 <__udivdi3+0x28c>
    f8dc:	1805883a 	mov	r2,r3
    f8e0:	003f0f06 	br	f520 <__udivdi3+0x12c>
    f8e4:	1806943a 	slli	r3,r3,16
    f8e8:	9d66983a 	sll	r19,r19,r21
    f8ec:	39ffffcc 	andi	r7,r7,65535
    f8f0:	19c7883a 	add	r3,r3,r7
    f8f4:	98ffc32e 	bgeu	r19,r3,f804 <__udivdi3+0x410>
    f8f8:	10bfffc4 	addi	r2,r2,-1
    f8fc:	003fc106 	br	f804 <__udivdi3+0x410>
    f900:	00800604 	movi	r2,24
    f904:	003f1106 	br	f54c <__udivdi3+0x158>
    f908:	00800604 	movi	r2,24
    f90c:	003f2706 	br	f5ac <__udivdi3+0x1b8>
    f910:	00800604 	movi	r2,24
    f914:	003ece06 	br	f450 <__udivdi3+0x5c>
    f918:	0007883a 	mov	r3,zero
    f91c:	00800044 	movi	r2,1
    f920:	003f5c06 	br	f694 <__udivdi3+0x2a0>
    f924:	813fa12e 	bgeu	r16,r4,f7ac <__udivdi3+0x3b8>
    f928:	10bfff84 	addi	r2,r2,-2
    f92c:	85e1883a 	add	r16,r16,r23
    f930:	003f9f06 	br	f7b0 <__udivdi3+0x3bc>
    f934:	1c7f8a2e 	bgeu	r3,r17,f760 <__udivdi3+0x36c>
    f938:	31bfff84 	addi	r6,r6,-2
    f93c:	1dc7883a 	add	r3,r3,r23
    f940:	003f8806 	br	f764 <__udivdi3+0x370>
    f944:	1805883a 	mov	r2,r3
    f948:	003fde06 	br	f8c4 <__udivdi3+0x4d0>
    f94c:	1839883a 	mov	fp,r3
    f950:	003fc906 	br	f878 <__udivdi3+0x484>
    f954:	b5bfff84 	addi	r22,r22,-2
    f958:	2449883a 	add	r4,r4,r17
    f95c:	003f3406 	br	f630 <__udivdi3+0x23c>
    f960:	b5bfff84 	addi	r22,r22,-2
    f964:	1445883a 	add	r2,r2,r17
    f968:	003edb06 	br	f4d8 <__udivdi3+0xe4>

0000f96c <__umoddi3>:
    f96c:	defff404 	addi	sp,sp,-48
    f970:	df000a15 	stw	fp,40(sp)
    f974:	dc400315 	stw	r17,12(sp)
    f978:	dc000215 	stw	r16,8(sp)
    f97c:	dfc00b15 	stw	ra,44(sp)
    f980:	ddc00915 	stw	r23,36(sp)
    f984:	dd800815 	stw	r22,32(sp)
    f988:	dd400715 	stw	r21,28(sp)
    f98c:	dd000615 	stw	r20,24(sp)
    f990:	dcc00515 	stw	r19,20(sp)
    f994:	dc800415 	stw	r18,16(sp)
    f998:	2021883a 	mov	r16,r4
    f99c:	2823883a 	mov	r17,r5
    f9a0:	2839883a 	mov	fp,r5
    f9a4:	38003c1e 	bne	r7,zero,fa98 <__umoddi3+0x12c>
    f9a8:	3027883a 	mov	r19,r6
    f9ac:	2029883a 	mov	r20,r4
    f9b0:	2980512e 	bgeu	r5,r6,faf8 <__umoddi3+0x18c>
    f9b4:	00bfffd4 	movui	r2,65535
    f9b8:	11809a36 	bltu	r2,r6,fc24 <__umoddi3+0x2b8>
    f9bc:	01003fc4 	movi	r4,255
    f9c0:	2189803a 	cmpltu	r4,r4,r6
    f9c4:	200890fa 	slli	r4,r4,3
    f9c8:	3104d83a 	srl	r2,r6,r4
    f9cc:	00c000b4 	movhi	r3,2
    f9d0:	18fdda04 	addi	r3,r3,-2200
    f9d4:	1885883a 	add	r2,r3,r2
    f9d8:	10c00003 	ldbu	r3,0(r2)
    f9dc:	00800804 	movi	r2,32
    f9e0:	1909883a 	add	r4,r3,r4
    f9e4:	1125c83a 	sub	r18,r2,r4
    f9e8:	90000526 	beq	r18,zero,fa00 <__umoddi3+0x94>
    f9ec:	8ca2983a 	sll	r17,r17,r18
    f9f0:	8108d83a 	srl	r4,r16,r4
    f9f4:	34a6983a 	sll	r19,r6,r18
    f9f8:	84a8983a 	sll	r20,r16,r18
    f9fc:	2478b03a 	or	fp,r4,r17
    fa00:	982ed43a 	srli	r23,r19,16
    fa04:	e009883a 	mov	r4,fp
    fa08:	9dbfffcc 	andi	r22,r19,65535
    fa0c:	b80b883a 	mov	r5,r23
    fa10:	00100000 	call	10000 <__umodsi3>
    fa14:	e009883a 	mov	r4,fp
    fa18:	b80b883a 	mov	r5,r23
    fa1c:	102b883a 	mov	r21,r2
    fa20:	000ff9c0 	call	ff9c <__udivsi3>
    fa24:	a806943a 	slli	r3,r21,16
    fa28:	a008d43a 	srli	r4,r20,16
    fa2c:	b085383a 	mul	r2,r22,r2
    fa30:	20c8b03a 	or	r4,r4,r3
    fa34:	2080032e 	bgeu	r4,r2,fa44 <__umoddi3+0xd8>
    fa38:	24c9883a 	add	r4,r4,r19
    fa3c:	24c00136 	bltu	r4,r19,fa44 <__umoddi3+0xd8>
    fa40:	20811036 	bltu	r4,r2,fe84 <__umoddi3+0x518>
    fa44:	20abc83a 	sub	r21,r4,r2
    fa48:	b80b883a 	mov	r5,r23
    fa4c:	a809883a 	mov	r4,r21
    fa50:	00100000 	call	10000 <__umodsi3>
    fa54:	1023883a 	mov	r17,r2
    fa58:	b80b883a 	mov	r5,r23
    fa5c:	a809883a 	mov	r4,r21
    fa60:	000ff9c0 	call	ff9c <__udivsi3>
    fa64:	8822943a 	slli	r17,r17,16
    fa68:	b085383a 	mul	r2,r22,r2
    fa6c:	a0ffffcc 	andi	r3,r20,65535
    fa70:	1c46b03a 	or	r3,r3,r17
    fa74:	1880042e 	bgeu	r3,r2,fa88 <__umoddi3+0x11c>
    fa78:	1cc7883a 	add	r3,r3,r19
    fa7c:	1cc00236 	bltu	r3,r19,fa88 <__umoddi3+0x11c>
    fa80:	1880012e 	bgeu	r3,r2,fa88 <__umoddi3+0x11c>
    fa84:	1cc7883a 	add	r3,r3,r19
    fa88:	1885c83a 	sub	r2,r3,r2
    fa8c:	1484d83a 	srl	r2,r2,r18
    fa90:	0007883a 	mov	r3,zero
    fa94:	00004f06 	br	fbd4 <__umoddi3+0x268>
    fa98:	29c04c36 	bltu	r5,r7,fbcc <__umoddi3+0x260>
    fa9c:	00bfffd4 	movui	r2,65535
    faa0:	11c0582e 	bgeu	r2,r7,fc04 <__umoddi3+0x298>
    faa4:	00804034 	movhi	r2,256
    faa8:	10bfffc4 	addi	r2,r2,-1
    faac:	11c0e736 	bltu	r2,r7,fe4c <__umoddi3+0x4e0>
    fab0:	01000404 	movi	r4,16
    fab4:	3904d83a 	srl	r2,r7,r4
    fab8:	00c000b4 	movhi	r3,2
    fabc:	18fdda04 	addi	r3,r3,-2200
    fac0:	1885883a 	add	r2,r3,r2
    fac4:	14c00003 	ldbu	r19,0(r2)
    fac8:	00c00804 	movi	r3,32
    facc:	9927883a 	add	r19,r19,r4
    fad0:	1ce9c83a 	sub	r20,r3,r19
    fad4:	a000581e 	bne	r20,zero,fc38 <__umoddi3+0x2cc>
    fad8:	3c400136 	bltu	r7,r17,fae0 <__umoddi3+0x174>
    fadc:	8180eb36 	bltu	r16,r6,fe8c <__umoddi3+0x520>
    fae0:	8185c83a 	sub	r2,r16,r6
    fae4:	89e3c83a 	sub	r17,r17,r7
    fae8:	8089803a 	cmpltu	r4,r16,r2
    faec:	8939c83a 	sub	fp,r17,r4
    faf0:	e007883a 	mov	r3,fp
    faf4:	00003706 	br	fbd4 <__umoddi3+0x268>
    faf8:	3000041e 	bne	r6,zero,fb0c <__umoddi3+0x1a0>
    fafc:	000b883a 	mov	r5,zero
    fb00:	01000044 	movi	r4,1
    fb04:	000ff9c0 	call	ff9c <__udivsi3>
    fb08:	1027883a 	mov	r19,r2
    fb0c:	00bfffd4 	movui	r2,65535
    fb10:	14c0402e 	bgeu	r2,r19,fc14 <__umoddi3+0x2a8>
    fb14:	00804034 	movhi	r2,256
    fb18:	10bfffc4 	addi	r2,r2,-1
    fb1c:	14c0cd36 	bltu	r2,r19,fe54 <__umoddi3+0x4e8>
    fb20:	00800404 	movi	r2,16
    fb24:	9886d83a 	srl	r3,r19,r2
    fb28:	010000b4 	movhi	r4,2
    fb2c:	213dda04 	addi	r4,r4,-2200
    fb30:	20c7883a 	add	r3,r4,r3
    fb34:	18c00003 	ldbu	r3,0(r3)
    fb38:	1887883a 	add	r3,r3,r2
    fb3c:	00800804 	movi	r2,32
    fb40:	10e5c83a 	sub	r18,r2,r3
    fb44:	9000901e 	bne	r18,zero,fd88 <__umoddi3+0x41c>
    fb48:	982cd43a 	srli	r22,r19,16
    fb4c:	8ce3c83a 	sub	r17,r17,r19
    fb50:	9d7fffcc 	andi	r21,r19,65535
    fb54:	b00b883a 	mov	r5,r22
    fb58:	8809883a 	mov	r4,r17
    fb5c:	00100000 	call	10000 <__umodsi3>
    fb60:	8809883a 	mov	r4,r17
    fb64:	b00b883a 	mov	r5,r22
    fb68:	1021883a 	mov	r16,r2
    fb6c:	000ff9c0 	call	ff9c <__udivsi3>
    fb70:	8006943a 	slli	r3,r16,16
    fb74:	a008d43a 	srli	r4,r20,16
    fb78:	1545383a 	mul	r2,r2,r21
    fb7c:	20c8b03a 	or	r4,r4,r3
    fb80:	2080042e 	bgeu	r4,r2,fb94 <__umoddi3+0x228>
    fb84:	24c9883a 	add	r4,r4,r19
    fb88:	24c00236 	bltu	r4,r19,fb94 <__umoddi3+0x228>
    fb8c:	2080012e 	bgeu	r4,r2,fb94 <__umoddi3+0x228>
    fb90:	24c9883a 	add	r4,r4,r19
    fb94:	20a1c83a 	sub	r16,r4,r2
    fb98:	b00b883a 	mov	r5,r22
    fb9c:	8009883a 	mov	r4,r16
    fba0:	00100000 	call	10000 <__umodsi3>
    fba4:	1023883a 	mov	r17,r2
    fba8:	b00b883a 	mov	r5,r22
    fbac:	8009883a 	mov	r4,r16
    fbb0:	000ff9c0 	call	ff9c <__udivsi3>
    fbb4:	8822943a 	slli	r17,r17,16
    fbb8:	1545383a 	mul	r2,r2,r21
    fbbc:	a53fffcc 	andi	r20,r20,65535
    fbc0:	a446b03a 	or	r3,r20,r17
    fbc4:	18bfb02e 	bgeu	r3,r2,fa88 <__umoddi3+0x11c>
    fbc8:	003fab06 	br	fa78 <__umoddi3+0x10c>
    fbcc:	2005883a 	mov	r2,r4
    fbd0:	2807883a 	mov	r3,r5
    fbd4:	dfc00b17 	ldw	ra,44(sp)
    fbd8:	df000a17 	ldw	fp,40(sp)
    fbdc:	ddc00917 	ldw	r23,36(sp)
    fbe0:	dd800817 	ldw	r22,32(sp)
    fbe4:	dd400717 	ldw	r21,28(sp)
    fbe8:	dd000617 	ldw	r20,24(sp)
    fbec:	dcc00517 	ldw	r19,20(sp)
    fbf0:	dc800417 	ldw	r18,16(sp)
    fbf4:	dc400317 	ldw	r17,12(sp)
    fbf8:	dc000217 	ldw	r16,8(sp)
    fbfc:	dec00c04 	addi	sp,sp,48
    fc00:	f800283a 	ret
    fc04:	04c03fc4 	movi	r19,255
    fc08:	99c9803a 	cmpltu	r4,r19,r7
    fc0c:	200890fa 	slli	r4,r4,3
    fc10:	003fa806 	br	fab4 <__umoddi3+0x148>
    fc14:	00803fc4 	movi	r2,255
    fc18:	14c5803a 	cmpltu	r2,r2,r19
    fc1c:	100490fa 	slli	r2,r2,3
    fc20:	003fc006 	br	fb24 <__umoddi3+0x1b8>
    fc24:	00804034 	movhi	r2,256
    fc28:	10bfffc4 	addi	r2,r2,-1
    fc2c:	11808b36 	bltu	r2,r6,fe5c <__umoddi3+0x4f0>
    fc30:	01000404 	movi	r4,16
    fc34:	003f6406 	br	f9c8 <__umoddi3+0x5c>
    fc38:	34c4d83a 	srl	r2,r6,r19
    fc3c:	3d0e983a 	sll	r7,r7,r20
    fc40:	8cf8d83a 	srl	fp,r17,r19
    fc44:	8d10983a 	sll	r8,r17,r20
    fc48:	38aab03a 	or	r21,r7,r2
    fc4c:	a82cd43a 	srli	r22,r21,16
    fc50:	84e2d83a 	srl	r17,r16,r19
    fc54:	e009883a 	mov	r4,fp
    fc58:	b00b883a 	mov	r5,r22
    fc5c:	8a22b03a 	or	r17,r17,r8
    fc60:	3524983a 	sll	r18,r6,r20
    fc64:	00100000 	call	10000 <__umodsi3>
    fc68:	e009883a 	mov	r4,fp
    fc6c:	b00b883a 	mov	r5,r22
    fc70:	102f883a 	mov	r23,r2
    fc74:	000ff9c0 	call	ff9c <__udivsi3>
    fc78:	100d883a 	mov	r6,r2
    fc7c:	b808943a 	slli	r4,r23,16
    fc80:	aa3fffcc 	andi	r8,r21,65535
    fc84:	8804d43a 	srli	r2,r17,16
    fc88:	41af383a 	mul	r23,r8,r6
    fc8c:	8520983a 	sll	r16,r16,r20
    fc90:	1104b03a 	or	r2,r2,r4
    fc94:	15c0042e 	bgeu	r2,r23,fca8 <__umoddi3+0x33c>
    fc98:	1545883a 	add	r2,r2,r21
    fc9c:	30ffffc4 	addi	r3,r6,-1
    fca0:	1540742e 	bgeu	r2,r21,fe74 <__umoddi3+0x508>
    fca4:	180d883a 	mov	r6,r3
    fca8:	15efc83a 	sub	r23,r2,r23
    fcac:	b00b883a 	mov	r5,r22
    fcb0:	b809883a 	mov	r4,r23
    fcb4:	d9800115 	stw	r6,4(sp)
    fcb8:	da000015 	stw	r8,0(sp)
    fcbc:	00100000 	call	10000 <__umodsi3>
    fcc0:	b00b883a 	mov	r5,r22
    fcc4:	b809883a 	mov	r4,r23
    fcc8:	1039883a 	mov	fp,r2
    fccc:	000ff9c0 	call	ff9c <__udivsi3>
    fcd0:	da000017 	ldw	r8,0(sp)
    fcd4:	e038943a 	slli	fp,fp,16
    fcd8:	100b883a 	mov	r5,r2
    fcdc:	4089383a 	mul	r4,r8,r2
    fce0:	8a3fffcc 	andi	r8,r17,65535
    fce4:	4710b03a 	or	r8,r8,fp
    fce8:	d9800117 	ldw	r6,4(sp)
    fcec:	4100042e 	bgeu	r8,r4,fd00 <__umoddi3+0x394>
    fcf0:	4551883a 	add	r8,r8,r21
    fcf4:	10bfffc4 	addi	r2,r2,-1
    fcf8:	45405a2e 	bgeu	r8,r21,fe64 <__umoddi3+0x4f8>
    fcfc:	100b883a 	mov	r5,r2
    fd00:	300c943a 	slli	r6,r6,16
    fd04:	91ffffcc 	andi	r7,r18,65535
    fd08:	9004d43a 	srli	r2,r18,16
    fd0c:	314cb03a 	or	r6,r6,r5
    fd10:	317fffcc 	andi	r5,r6,65535
    fd14:	300cd43a 	srli	r6,r6,16
    fd18:	29d3383a 	mul	r9,r5,r7
    fd1c:	288b383a 	mul	r5,r5,r2
    fd20:	31cf383a 	mul	r7,r6,r7
    fd24:	4806d43a 	srli	r3,r9,16
    fd28:	4111c83a 	sub	r8,r8,r4
    fd2c:	29cb883a 	add	r5,r5,r7
    fd30:	194b883a 	add	r5,r3,r5
    fd34:	3085383a 	mul	r2,r6,r2
    fd38:	29c0022e 	bgeu	r5,r7,fd44 <__umoddi3+0x3d8>
    fd3c:	00c00074 	movhi	r3,1
    fd40:	10c5883a 	add	r2,r2,r3
    fd44:	2808d43a 	srli	r4,r5,16
    fd48:	280a943a 	slli	r5,r5,16
    fd4c:	4a7fffcc 	andi	r9,r9,65535
    fd50:	2085883a 	add	r2,r4,r2
    fd54:	2a4b883a 	add	r5,r5,r9
    fd58:	40803636 	bltu	r8,r2,fe34 <__umoddi3+0x4c8>
    fd5c:	40804d26 	beq	r8,r2,fe94 <__umoddi3+0x528>
    fd60:	4089c83a 	sub	r4,r8,r2
    fd64:	280f883a 	mov	r7,r5
    fd68:	81cfc83a 	sub	r7,r16,r7
    fd6c:	81c7803a 	cmpltu	r3,r16,r7
    fd70:	20c7c83a 	sub	r3,r4,r3
    fd74:	1cc4983a 	sll	r2,r3,r19
    fd78:	3d0ed83a 	srl	r7,r7,r20
    fd7c:	1d06d83a 	srl	r3,r3,r20
    fd80:	11c4b03a 	or	r2,r2,r7
    fd84:	003f9306 	br	fbd4 <__umoddi3+0x268>
    fd88:	9ca6983a 	sll	r19,r19,r18
    fd8c:	88e8d83a 	srl	r20,r17,r3
    fd90:	80c4d83a 	srl	r2,r16,r3
    fd94:	982cd43a 	srli	r22,r19,16
    fd98:	8ca2983a 	sll	r17,r17,r18
    fd9c:	a009883a 	mov	r4,r20
    fda0:	b00b883a 	mov	r5,r22
    fda4:	1478b03a 	or	fp,r2,r17
    fda8:	00100000 	call	10000 <__umodsi3>
    fdac:	a009883a 	mov	r4,r20
    fdb0:	b00b883a 	mov	r5,r22
    fdb4:	1023883a 	mov	r17,r2
    fdb8:	000ff9c0 	call	ff9c <__udivsi3>
    fdbc:	9d7fffcc 	andi	r21,r19,65535
    fdc0:	880a943a 	slli	r5,r17,16
    fdc4:	e008d43a 	srli	r4,fp,16
    fdc8:	a885383a 	mul	r2,r21,r2
    fdcc:	84a8983a 	sll	r20,r16,r18
    fdd0:	2148b03a 	or	r4,r4,r5
    fdd4:	2080042e 	bgeu	r4,r2,fde8 <__umoddi3+0x47c>
    fdd8:	24c9883a 	add	r4,r4,r19
    fddc:	24c00236 	bltu	r4,r19,fde8 <__umoddi3+0x47c>
    fde0:	2080012e 	bgeu	r4,r2,fde8 <__umoddi3+0x47c>
    fde4:	24c9883a 	add	r4,r4,r19
    fde8:	20a3c83a 	sub	r17,r4,r2
    fdec:	b00b883a 	mov	r5,r22
    fdf0:	8809883a 	mov	r4,r17
    fdf4:	00100000 	call	10000 <__umodsi3>
    fdf8:	102f883a 	mov	r23,r2
    fdfc:	8809883a 	mov	r4,r17
    fe00:	b00b883a 	mov	r5,r22
    fe04:	000ff9c0 	call	ff9c <__udivsi3>
    fe08:	b82e943a 	slli	r23,r23,16
    fe0c:	a885383a 	mul	r2,r21,r2
    fe10:	e13fffcc 	andi	r4,fp,65535
    fe14:	25c8b03a 	or	r4,r4,r23
    fe18:	2080042e 	bgeu	r4,r2,fe2c <__umoddi3+0x4c0>
    fe1c:	24c9883a 	add	r4,r4,r19
    fe20:	24c00236 	bltu	r4,r19,fe2c <__umoddi3+0x4c0>
    fe24:	2080012e 	bgeu	r4,r2,fe2c <__umoddi3+0x4c0>
    fe28:	24c9883a 	add	r4,r4,r19
    fe2c:	20a3c83a 	sub	r17,r4,r2
    fe30:	003f4806 	br	fb54 <__umoddi3+0x1e8>
    fe34:	2c8fc83a 	sub	r7,r5,r18
    fe38:	1545c83a 	sub	r2,r2,r21
    fe3c:	29cb803a 	cmpltu	r5,r5,r7
    fe40:	1145c83a 	sub	r2,r2,r5
    fe44:	4089c83a 	sub	r4,r8,r2
    fe48:	003fc706 	br	fd68 <__umoddi3+0x3fc>
    fe4c:	01000604 	movi	r4,24
    fe50:	003f1806 	br	fab4 <__umoddi3+0x148>
    fe54:	00800604 	movi	r2,24
    fe58:	003f3206 	br	fb24 <__umoddi3+0x1b8>
    fe5c:	01000604 	movi	r4,24
    fe60:	003ed906 	br	f9c8 <__umoddi3+0x5c>
    fe64:	413fa52e 	bgeu	r8,r4,fcfc <__umoddi3+0x390>
    fe68:	297fff84 	addi	r5,r5,-2
    fe6c:	4551883a 	add	r8,r8,r21
    fe70:	003fa306 	br	fd00 <__umoddi3+0x394>
    fe74:	15ff8b2e 	bgeu	r2,r23,fca4 <__umoddi3+0x338>
    fe78:	31bfff84 	addi	r6,r6,-2
    fe7c:	1545883a 	add	r2,r2,r21
    fe80:	003f8906 	br	fca8 <__umoddi3+0x33c>
    fe84:	24c9883a 	add	r4,r4,r19
    fe88:	003eee06 	br	fa44 <__umoddi3+0xd8>
    fe8c:	8005883a 	mov	r2,r16
    fe90:	003f1706 	br	faf0 <__umoddi3+0x184>
    fe94:	817fe736 	bltu	r16,r5,fe34 <__umoddi3+0x4c8>
    fe98:	280f883a 	mov	r7,r5
    fe9c:	0009883a 	mov	r4,zero
    fea0:	003fb106 	br	fd68 <__umoddi3+0x3fc>

0000fea4 <__divsi3>:
    fea4:	20001b16 	blt	r4,zero,ff14 <__divsi3+0x70>
    fea8:	000f883a 	mov	r7,zero
    feac:	28001616 	blt	r5,zero,ff08 <__divsi3+0x64>
    feb0:	200d883a 	mov	r6,r4
    feb4:	29001a2e 	bgeu	r5,r4,ff20 <__divsi3+0x7c>
    feb8:	00800804 	movi	r2,32
    febc:	00c00044 	movi	r3,1
    fec0:	00000106 	br	fec8 <__divsi3+0x24>
    fec4:	10000d26 	beq	r2,zero,fefc <__divsi3+0x58>
    fec8:	294b883a 	add	r5,r5,r5
    fecc:	10bfffc4 	addi	r2,r2,-1
    fed0:	18c7883a 	add	r3,r3,r3
    fed4:	293ffb36 	bltu	r5,r4,fec4 <__divsi3+0x20>
    fed8:	0005883a 	mov	r2,zero
    fedc:	18000726 	beq	r3,zero,fefc <__divsi3+0x58>
    fee0:	0005883a 	mov	r2,zero
    fee4:	31400236 	bltu	r6,r5,fef0 <__divsi3+0x4c>
    fee8:	314dc83a 	sub	r6,r6,r5
    feec:	10c4b03a 	or	r2,r2,r3
    fef0:	1806d07a 	srli	r3,r3,1
    fef4:	280ad07a 	srli	r5,r5,1
    fef8:	183ffa1e 	bne	r3,zero,fee4 <__divsi3+0x40>
    fefc:	38000126 	beq	r7,zero,ff04 <__divsi3+0x60>
    ff00:	0085c83a 	sub	r2,zero,r2
    ff04:	f800283a 	ret
    ff08:	014bc83a 	sub	r5,zero,r5
    ff0c:	39c0005c 	xori	r7,r7,1
    ff10:	003fe706 	br	feb0 <__divsi3+0xc>
    ff14:	0109c83a 	sub	r4,zero,r4
    ff18:	01c00044 	movi	r7,1
    ff1c:	003fe306 	br	feac <__divsi3+0x8>
    ff20:	00c00044 	movi	r3,1
    ff24:	003fee06 	br	fee0 <__divsi3+0x3c>

0000ff28 <__modsi3>:
    ff28:	20001716 	blt	r4,zero,ff88 <__modsi3+0x60>
    ff2c:	000f883a 	mov	r7,zero
    ff30:	2005883a 	mov	r2,r4
    ff34:	28001216 	blt	r5,zero,ff80 <__modsi3+0x58>
    ff38:	2900162e 	bgeu	r5,r4,ff94 <__modsi3+0x6c>
    ff3c:	01800804 	movi	r6,32
    ff40:	00c00044 	movi	r3,1
    ff44:	00000106 	br	ff4c <__modsi3+0x24>
    ff48:	30000a26 	beq	r6,zero,ff74 <__modsi3+0x4c>
    ff4c:	294b883a 	add	r5,r5,r5
    ff50:	31bfffc4 	addi	r6,r6,-1
    ff54:	18c7883a 	add	r3,r3,r3
    ff58:	293ffb36 	bltu	r5,r4,ff48 <__modsi3+0x20>
    ff5c:	18000526 	beq	r3,zero,ff74 <__modsi3+0x4c>
    ff60:	1806d07a 	srli	r3,r3,1
    ff64:	11400136 	bltu	r2,r5,ff6c <__modsi3+0x44>
    ff68:	1145c83a 	sub	r2,r2,r5
    ff6c:	280ad07a 	srli	r5,r5,1
    ff70:	183ffb1e 	bne	r3,zero,ff60 <__modsi3+0x38>
    ff74:	38000126 	beq	r7,zero,ff7c <__modsi3+0x54>
    ff78:	0085c83a 	sub	r2,zero,r2
    ff7c:	f800283a 	ret
    ff80:	014bc83a 	sub	r5,zero,r5
    ff84:	003fec06 	br	ff38 <__modsi3+0x10>
    ff88:	0109c83a 	sub	r4,zero,r4
    ff8c:	01c00044 	movi	r7,1
    ff90:	003fe706 	br	ff30 <__modsi3+0x8>
    ff94:	00c00044 	movi	r3,1
    ff98:	003ff106 	br	ff60 <__modsi3+0x38>

0000ff9c <__udivsi3>:
    ff9c:	200d883a 	mov	r6,r4
    ffa0:	2900152e 	bgeu	r5,r4,fff8 <__udivsi3+0x5c>
    ffa4:	28001416 	blt	r5,zero,fff8 <__udivsi3+0x5c>
    ffa8:	00800804 	movi	r2,32
    ffac:	00c00044 	movi	r3,1
    ffb0:	00000206 	br	ffbc <__udivsi3+0x20>
    ffb4:	10000e26 	beq	r2,zero,fff0 <__udivsi3+0x54>
    ffb8:	28000516 	blt	r5,zero,ffd0 <__udivsi3+0x34>
    ffbc:	294b883a 	add	r5,r5,r5
    ffc0:	10bfffc4 	addi	r2,r2,-1
    ffc4:	18c7883a 	add	r3,r3,r3
    ffc8:	293ffa36 	bltu	r5,r4,ffb4 <__udivsi3+0x18>
    ffcc:	18000826 	beq	r3,zero,fff0 <__udivsi3+0x54>
    ffd0:	0005883a 	mov	r2,zero
    ffd4:	31400236 	bltu	r6,r5,ffe0 <__udivsi3+0x44>
    ffd8:	314dc83a 	sub	r6,r6,r5
    ffdc:	10c4b03a 	or	r2,r2,r3
    ffe0:	1806d07a 	srli	r3,r3,1
    ffe4:	280ad07a 	srli	r5,r5,1
    ffe8:	183ffa1e 	bne	r3,zero,ffd4 <__udivsi3+0x38>
    ffec:	f800283a 	ret
    fff0:	0005883a 	mov	r2,zero
    fff4:	f800283a 	ret
    fff8:	00c00044 	movi	r3,1
    fffc:	003ff406 	br	ffd0 <__udivsi3+0x34>

00010000 <__umodsi3>:
   10000:	2005883a 	mov	r2,r4
   10004:	2900122e 	bgeu	r5,r4,10050 <__umodsi3+0x50>
   10008:	28001116 	blt	r5,zero,10050 <__umodsi3+0x50>
   1000c:	01800804 	movi	r6,32
   10010:	00c00044 	movi	r3,1
   10014:	00000206 	br	10020 <__umodsi3+0x20>
   10018:	30000c26 	beq	r6,zero,1004c <__umodsi3+0x4c>
   1001c:	28000516 	blt	r5,zero,10034 <__umodsi3+0x34>
   10020:	294b883a 	add	r5,r5,r5
   10024:	31bfffc4 	addi	r6,r6,-1
   10028:	18c7883a 	add	r3,r3,r3
   1002c:	293ffa36 	bltu	r5,r4,10018 <__umodsi3+0x18>
   10030:	18000626 	beq	r3,zero,1004c <__umodsi3+0x4c>
   10034:	1806d07a 	srli	r3,r3,1
   10038:	11400136 	bltu	r2,r5,10040 <__umodsi3+0x40>
   1003c:	1145c83a 	sub	r2,r2,r5
   10040:	280ad07a 	srli	r5,r5,1
   10044:	183ffb1e 	bne	r3,zero,10034 <__umodsi3+0x34>
   10048:	f800283a 	ret
   1004c:	f800283a 	ret
   10050:	00c00044 	movi	r3,1
   10054:	003ff706 	br	10034 <__umodsi3+0x34>

00010058 <__adddf3>:
   10058:	02c00434 	movhi	r11,16
   1005c:	5affffc4 	addi	r11,r11,-1
   10060:	2806d7fa 	srli	r3,r5,31
   10064:	2ad4703a 	and	r10,r5,r11
   10068:	3ad2703a 	and	r9,r7,r11
   1006c:	3804d53a 	srli	r2,r7,20
   10070:	3018d77a 	srli	r12,r6,29
   10074:	280ad53a 	srli	r5,r5,20
   10078:	501490fa 	slli	r10,r10,3
   1007c:	2010d77a 	srli	r8,r4,29
   10080:	481290fa 	slli	r9,r9,3
   10084:	380ed7fa 	srli	r7,r7,31
   10088:	defffb04 	addi	sp,sp,-20
   1008c:	dc800215 	stw	r18,8(sp)
   10090:	dc400115 	stw	r17,4(sp)
   10094:	dc000015 	stw	r16,0(sp)
   10098:	dfc00415 	stw	ra,16(sp)
   1009c:	dcc00315 	stw	r19,12(sp)
   100a0:	1c803fcc 	andi	r18,r3,255
   100a4:	2c01ffcc 	andi	r16,r5,2047
   100a8:	5210b03a 	or	r8,r10,r8
   100ac:	202290fa 	slli	r17,r4,3
   100b0:	1081ffcc 	andi	r2,r2,2047
   100b4:	4b12b03a 	or	r9,r9,r12
   100b8:	300c90fa 	slli	r6,r6,3
   100bc:	91c07526 	beq	r18,r7,10294 <__adddf3+0x23c>
   100c0:	8087c83a 	sub	r3,r16,r2
   100c4:	00c0ab0e 	bge	zero,r3,10374 <__adddf3+0x31c>
   100c8:	10002a1e 	bne	r2,zero,10174 <__adddf3+0x11c>
   100cc:	4984b03a 	or	r2,r9,r6
   100d0:	1000961e 	bne	r2,zero,1032c <__adddf3+0x2d4>
   100d4:	888001cc 	andi	r2,r17,7
   100d8:	10000726 	beq	r2,zero,100f8 <__adddf3+0xa0>
   100dc:	888003cc 	andi	r2,r17,15
   100e0:	00c00104 	movi	r3,4
   100e4:	10c00426 	beq	r2,r3,100f8 <__adddf3+0xa0>
   100e8:	88c7883a 	add	r3,r17,r3
   100ec:	1c63803a 	cmpltu	r17,r3,r17
   100f0:	4451883a 	add	r8,r8,r17
   100f4:	1823883a 	mov	r17,r3
   100f8:	4080202c 	andhi	r2,r8,128
   100fc:	10005926 	beq	r2,zero,10264 <__adddf3+0x20c>
   10100:	84000044 	addi	r16,r16,1
   10104:	0081ffc4 	movi	r2,2047
   10108:	8080ba26 	beq	r16,r2,103f4 <__adddf3+0x39c>
   1010c:	00bfe034 	movhi	r2,65408
   10110:	10bfffc4 	addi	r2,r2,-1
   10114:	4090703a 	and	r8,r8,r2
   10118:	4004977a 	slli	r2,r8,29
   1011c:	4010927a 	slli	r8,r8,9
   10120:	8822d0fa 	srli	r17,r17,3
   10124:	8401ffcc 	andi	r16,r16,2047
   10128:	4010d33a 	srli	r8,r8,12
   1012c:	9007883a 	mov	r3,r18
   10130:	1444b03a 	or	r2,r2,r17
   10134:	8401ffcc 	andi	r16,r16,2047
   10138:	8020953a 	slli	r16,r16,20
   1013c:	18c03fcc 	andi	r3,r3,255
   10140:	01000434 	movhi	r4,16
   10144:	213fffc4 	addi	r4,r4,-1
   10148:	180697fa 	slli	r3,r3,31
   1014c:	4110703a 	and	r8,r8,r4
   10150:	4410b03a 	or	r8,r8,r16
   10154:	40c6b03a 	or	r3,r8,r3
   10158:	dfc00417 	ldw	ra,16(sp)
   1015c:	dcc00317 	ldw	r19,12(sp)
   10160:	dc800217 	ldw	r18,8(sp)
   10164:	dc400117 	ldw	r17,4(sp)
   10168:	dc000017 	ldw	r16,0(sp)
   1016c:	dec00504 	addi	sp,sp,20
   10170:	f800283a 	ret
   10174:	0081ffc4 	movi	r2,2047
   10178:	80bfd626 	beq	r16,r2,100d4 <__adddf3+0x7c>
   1017c:	4a402034 	orhi	r9,r9,128
   10180:	00800e04 	movi	r2,56
   10184:	10c09f16 	blt	r2,r3,10404 <__adddf3+0x3ac>
   10188:	008007c4 	movi	r2,31
   1018c:	10c0c216 	blt	r2,r3,10498 <__adddf3+0x440>
   10190:	00800804 	movi	r2,32
   10194:	10c5c83a 	sub	r2,r2,r3
   10198:	488a983a 	sll	r5,r9,r2
   1019c:	30c8d83a 	srl	r4,r6,r3
   101a0:	3084983a 	sll	r2,r6,r2
   101a4:	48c6d83a 	srl	r3,r9,r3
   101a8:	290cb03a 	or	r6,r5,r4
   101ac:	1004c03a 	cmpne	r2,r2,zero
   101b0:	308cb03a 	or	r6,r6,r2
   101b4:	898dc83a 	sub	r6,r17,r6
   101b8:	89a3803a 	cmpltu	r17,r17,r6
   101bc:	40d1c83a 	sub	r8,r8,r3
   101c0:	4451c83a 	sub	r8,r8,r17
   101c4:	3023883a 	mov	r17,r6
   101c8:	4080202c 	andhi	r2,r8,128
   101cc:	10002326 	beq	r2,zero,1025c <__adddf3+0x204>
   101d0:	04c02034 	movhi	r19,128
   101d4:	9cffffc4 	addi	r19,r19,-1
   101d8:	44e6703a 	and	r19,r8,r19
   101dc:	98007626 	beq	r19,zero,103b8 <__adddf3+0x360>
   101e0:	9809883a 	mov	r4,r19
   101e4:	001265c0 	call	1265c <__clzsi2>
   101e8:	10fffe04 	addi	r3,r2,-8
   101ec:	010007c4 	movi	r4,31
   101f0:	20c07716 	blt	r4,r3,103d0 <__adddf3+0x378>
   101f4:	00800804 	movi	r2,32
   101f8:	10c5c83a 	sub	r2,r2,r3
   101fc:	8884d83a 	srl	r2,r17,r2
   10200:	98d0983a 	sll	r8,r19,r3
   10204:	88e2983a 	sll	r17,r17,r3
   10208:	1204b03a 	or	r2,r2,r8
   1020c:	1c007416 	blt	r3,r16,103e0 <__adddf3+0x388>
   10210:	1c21c83a 	sub	r16,r3,r16
   10214:	82000044 	addi	r8,r16,1
   10218:	00c007c4 	movi	r3,31
   1021c:	1a009116 	blt	r3,r8,10464 <__adddf3+0x40c>
   10220:	00c00804 	movi	r3,32
   10224:	1a07c83a 	sub	r3,r3,r8
   10228:	8a08d83a 	srl	r4,r17,r8
   1022c:	88e2983a 	sll	r17,r17,r3
   10230:	10c6983a 	sll	r3,r2,r3
   10234:	1210d83a 	srl	r8,r2,r8
   10238:	8804c03a 	cmpne	r2,r17,zero
   1023c:	1906b03a 	or	r3,r3,r4
   10240:	18a2b03a 	or	r17,r3,r2
   10244:	0021883a 	mov	r16,zero
   10248:	003fa206 	br	100d4 <__adddf3+0x7c>
   1024c:	1890b03a 	or	r8,r3,r2
   10250:	40017d26 	beq	r8,zero,10848 <__adddf3+0x7f0>
   10254:	1011883a 	mov	r8,r2
   10258:	1823883a 	mov	r17,r3
   1025c:	888001cc 	andi	r2,r17,7
   10260:	103f9e1e 	bne	r2,zero,100dc <__adddf3+0x84>
   10264:	4004977a 	slli	r2,r8,29
   10268:	8822d0fa 	srli	r17,r17,3
   1026c:	4010d0fa 	srli	r8,r8,3
   10270:	9007883a 	mov	r3,r18
   10274:	1444b03a 	or	r2,r2,r17
   10278:	0101ffc4 	movi	r4,2047
   1027c:	81002426 	beq	r16,r4,10310 <__adddf3+0x2b8>
   10280:	8120703a 	and	r16,r16,r4
   10284:	01000434 	movhi	r4,16
   10288:	213fffc4 	addi	r4,r4,-1
   1028c:	4110703a 	and	r8,r8,r4
   10290:	003fa806 	br	10134 <__adddf3+0xdc>
   10294:	8089c83a 	sub	r4,r16,r2
   10298:	01005e0e 	bge	zero,r4,10414 <__adddf3+0x3bc>
   1029c:	10002b26 	beq	r2,zero,1034c <__adddf3+0x2f4>
   102a0:	0081ffc4 	movi	r2,2047
   102a4:	80bf8b26 	beq	r16,r2,100d4 <__adddf3+0x7c>
   102a8:	4a402034 	orhi	r9,r9,128
   102ac:	00800e04 	movi	r2,56
   102b0:	1100a40e 	bge	r2,r4,10544 <__adddf3+0x4ec>
   102b4:	498cb03a 	or	r6,r9,r6
   102b8:	300ac03a 	cmpne	r5,r6,zero
   102bc:	0013883a 	mov	r9,zero
   102c0:	2c4b883a 	add	r5,r5,r17
   102c4:	2c63803a 	cmpltu	r17,r5,r17
   102c8:	4a11883a 	add	r8,r9,r8
   102cc:	8a11883a 	add	r8,r17,r8
   102d0:	2823883a 	mov	r17,r5
   102d4:	4080202c 	andhi	r2,r8,128
   102d8:	103fe026 	beq	r2,zero,1025c <__adddf3+0x204>
   102dc:	84000044 	addi	r16,r16,1
   102e0:	0081ffc4 	movi	r2,2047
   102e4:	8080d226 	beq	r16,r2,10630 <__adddf3+0x5d8>
   102e8:	00bfe034 	movhi	r2,65408
   102ec:	10bfffc4 	addi	r2,r2,-1
   102f0:	4090703a 	and	r8,r8,r2
   102f4:	880ad07a 	srli	r5,r17,1
   102f8:	400897fa 	slli	r4,r8,31
   102fc:	88c0004c 	andi	r3,r17,1
   10300:	28e2b03a 	or	r17,r5,r3
   10304:	4010d07a 	srli	r8,r8,1
   10308:	2462b03a 	or	r17,r4,r17
   1030c:	003f7106 	br	100d4 <__adddf3+0x7c>
   10310:	4088b03a 	or	r4,r8,r2
   10314:	20014526 	beq	r4,zero,1082c <__adddf3+0x7d4>
   10318:	01000434 	movhi	r4,16
   1031c:	42000234 	orhi	r8,r8,8
   10320:	213fffc4 	addi	r4,r4,-1
   10324:	4110703a 	and	r8,r8,r4
   10328:	003f8206 	br	10134 <__adddf3+0xdc>
   1032c:	18ffffc4 	addi	r3,r3,-1
   10330:	1800491e 	bne	r3,zero,10458 <__adddf3+0x400>
   10334:	898bc83a 	sub	r5,r17,r6
   10338:	8963803a 	cmpltu	r17,r17,r5
   1033c:	4251c83a 	sub	r8,r8,r9
   10340:	4451c83a 	sub	r8,r8,r17
   10344:	2823883a 	mov	r17,r5
   10348:	003f9f06 	br	101c8 <__adddf3+0x170>
   1034c:	4984b03a 	or	r2,r9,r6
   10350:	103f6026 	beq	r2,zero,100d4 <__adddf3+0x7c>
   10354:	213fffc4 	addi	r4,r4,-1
   10358:	2000931e 	bne	r4,zero,105a8 <__adddf3+0x550>
   1035c:	898d883a 	add	r6,r17,r6
   10360:	3463803a 	cmpltu	r17,r6,r17
   10364:	4251883a 	add	r8,r8,r9
   10368:	8a11883a 	add	r8,r17,r8
   1036c:	3023883a 	mov	r17,r6
   10370:	003fd806 	br	102d4 <__adddf3+0x27c>
   10374:	1800541e 	bne	r3,zero,104c8 <__adddf3+0x470>
   10378:	80800044 	addi	r2,r16,1
   1037c:	1081ffcc 	andi	r2,r2,2047
   10380:	00c00044 	movi	r3,1
   10384:	1880a00e 	bge	r3,r2,10608 <__adddf3+0x5b0>
   10388:	8989c83a 	sub	r4,r17,r6
   1038c:	8905803a 	cmpltu	r2,r17,r4
   10390:	4267c83a 	sub	r19,r8,r9
   10394:	98a7c83a 	sub	r19,r19,r2
   10398:	9880202c 	andhi	r2,r19,128
   1039c:	10006326 	beq	r2,zero,1052c <__adddf3+0x4d4>
   103a0:	3463c83a 	sub	r17,r6,r17
   103a4:	4a07c83a 	sub	r3,r9,r8
   103a8:	344d803a 	cmpltu	r6,r6,r17
   103ac:	19a7c83a 	sub	r19,r3,r6
   103b0:	3825883a 	mov	r18,r7
   103b4:	983f8a1e 	bne	r19,zero,101e0 <__adddf3+0x188>
   103b8:	8809883a 	mov	r4,r17
   103bc:	001265c0 	call	1265c <__clzsi2>
   103c0:	10800804 	addi	r2,r2,32
   103c4:	10fffe04 	addi	r3,r2,-8
   103c8:	010007c4 	movi	r4,31
   103cc:	20ff890e 	bge	r4,r3,101f4 <__adddf3+0x19c>
   103d0:	10bff604 	addi	r2,r2,-40
   103d4:	8884983a 	sll	r2,r17,r2
   103d8:	0023883a 	mov	r17,zero
   103dc:	1c3f8c0e 	bge	r3,r16,10210 <__adddf3+0x1b8>
   103e0:	023fe034 	movhi	r8,65408
   103e4:	423fffc4 	addi	r8,r8,-1
   103e8:	80e1c83a 	sub	r16,r16,r3
   103ec:	1210703a 	and	r8,r2,r8
   103f0:	003f3806 	br	100d4 <__adddf3+0x7c>
   103f4:	9007883a 	mov	r3,r18
   103f8:	0011883a 	mov	r8,zero
   103fc:	0005883a 	mov	r2,zero
   10400:	003f4c06 	br	10134 <__adddf3+0xdc>
   10404:	498cb03a 	or	r6,r9,r6
   10408:	300cc03a 	cmpne	r6,r6,zero
   1040c:	0007883a 	mov	r3,zero
   10410:	003f6806 	br	101b4 <__adddf3+0x15c>
   10414:	20009c1e 	bne	r4,zero,10688 <__adddf3+0x630>
   10418:	80800044 	addi	r2,r16,1
   1041c:	1141ffcc 	andi	r5,r2,2047
   10420:	01000044 	movi	r4,1
   10424:	2140670e 	bge	r4,r5,105c4 <__adddf3+0x56c>
   10428:	0101ffc4 	movi	r4,2047
   1042c:	11007f26 	beq	r2,r4,1062c <__adddf3+0x5d4>
   10430:	898d883a 	add	r6,r17,r6
   10434:	4247883a 	add	r3,r8,r9
   10438:	3451803a 	cmpltu	r8,r6,r17
   1043c:	40d1883a 	add	r8,r8,r3
   10440:	402297fa 	slli	r17,r8,31
   10444:	300cd07a 	srli	r6,r6,1
   10448:	4010d07a 	srli	r8,r8,1
   1044c:	1021883a 	mov	r16,r2
   10450:	89a2b03a 	or	r17,r17,r6
   10454:	003f1f06 	br	100d4 <__adddf3+0x7c>
   10458:	0081ffc4 	movi	r2,2047
   1045c:	80bf481e 	bne	r16,r2,10180 <__adddf3+0x128>
   10460:	003f1c06 	br	100d4 <__adddf3+0x7c>
   10464:	843ff844 	addi	r16,r16,-31
   10468:	01000804 	movi	r4,32
   1046c:	1406d83a 	srl	r3,r2,r16
   10470:	41005026 	beq	r8,r4,105b4 <__adddf3+0x55c>
   10474:	01001004 	movi	r4,64
   10478:	2211c83a 	sub	r8,r4,r8
   1047c:	1204983a 	sll	r2,r2,r8
   10480:	88a2b03a 	or	r17,r17,r2
   10484:	8822c03a 	cmpne	r17,r17,zero
   10488:	1c62b03a 	or	r17,r3,r17
   1048c:	0011883a 	mov	r8,zero
   10490:	0021883a 	mov	r16,zero
   10494:	003f7106 	br	1025c <__adddf3+0x204>
   10498:	193ff804 	addi	r4,r3,-32
   1049c:	00800804 	movi	r2,32
   104a0:	4908d83a 	srl	r4,r9,r4
   104a4:	18804526 	beq	r3,r2,105bc <__adddf3+0x564>
   104a8:	00801004 	movi	r2,64
   104ac:	10c5c83a 	sub	r2,r2,r3
   104b0:	4886983a 	sll	r3,r9,r2
   104b4:	198cb03a 	or	r6,r3,r6
   104b8:	300cc03a 	cmpne	r6,r6,zero
   104bc:	218cb03a 	or	r6,r4,r6
   104c0:	0007883a 	mov	r3,zero
   104c4:	003f3b06 	br	101b4 <__adddf3+0x15c>
   104c8:	80002a26 	beq	r16,zero,10574 <__adddf3+0x51c>
   104cc:	0101ffc4 	movi	r4,2047
   104d0:	11006826 	beq	r2,r4,10674 <__adddf3+0x61c>
   104d4:	00c7c83a 	sub	r3,zero,r3
   104d8:	42002034 	orhi	r8,r8,128
   104dc:	01000e04 	movi	r4,56
   104e0:	20c07c16 	blt	r4,r3,106d4 <__adddf3+0x67c>
   104e4:	010007c4 	movi	r4,31
   104e8:	20c0da16 	blt	r4,r3,10854 <__adddf3+0x7fc>
   104ec:	01000804 	movi	r4,32
   104f0:	20c9c83a 	sub	r4,r4,r3
   104f4:	4114983a 	sll	r10,r8,r4
   104f8:	88cad83a 	srl	r5,r17,r3
   104fc:	8908983a 	sll	r4,r17,r4
   10500:	40c6d83a 	srl	r3,r8,r3
   10504:	5162b03a 	or	r17,r10,r5
   10508:	2008c03a 	cmpne	r4,r4,zero
   1050c:	8922b03a 	or	r17,r17,r4
   10510:	3463c83a 	sub	r17,r6,r17
   10514:	48c7c83a 	sub	r3,r9,r3
   10518:	344d803a 	cmpltu	r6,r6,r17
   1051c:	1991c83a 	sub	r8,r3,r6
   10520:	1021883a 	mov	r16,r2
   10524:	3825883a 	mov	r18,r7
   10528:	003f2706 	br	101c8 <__adddf3+0x170>
   1052c:	24d0b03a 	or	r8,r4,r19
   10530:	40001b1e 	bne	r8,zero,105a0 <__adddf3+0x548>
   10534:	0005883a 	mov	r2,zero
   10538:	0007883a 	mov	r3,zero
   1053c:	0021883a 	mov	r16,zero
   10540:	003f4d06 	br	10278 <__adddf3+0x220>
   10544:	008007c4 	movi	r2,31
   10548:	11003c16 	blt	r2,r4,1063c <__adddf3+0x5e4>
   1054c:	00800804 	movi	r2,32
   10550:	1105c83a 	sub	r2,r2,r4
   10554:	488e983a 	sll	r7,r9,r2
   10558:	310ad83a 	srl	r5,r6,r4
   1055c:	3084983a 	sll	r2,r6,r2
   10560:	4912d83a 	srl	r9,r9,r4
   10564:	394ab03a 	or	r5,r7,r5
   10568:	1004c03a 	cmpne	r2,r2,zero
   1056c:	288ab03a 	or	r5,r5,r2
   10570:	003f5306 	br	102c0 <__adddf3+0x268>
   10574:	4448b03a 	or	r4,r8,r17
   10578:	20003e26 	beq	r4,zero,10674 <__adddf3+0x61c>
   1057c:	00c6303a 	nor	r3,zero,r3
   10580:	18003a1e 	bne	r3,zero,1066c <__adddf3+0x614>
   10584:	3463c83a 	sub	r17,r6,r17
   10588:	4a07c83a 	sub	r3,r9,r8
   1058c:	344d803a 	cmpltu	r6,r6,r17
   10590:	1991c83a 	sub	r8,r3,r6
   10594:	1021883a 	mov	r16,r2
   10598:	3825883a 	mov	r18,r7
   1059c:	003f0a06 	br	101c8 <__adddf3+0x170>
   105a0:	2023883a 	mov	r17,r4
   105a4:	003f0d06 	br	101dc <__adddf3+0x184>
   105a8:	0081ffc4 	movi	r2,2047
   105ac:	80bf3f1e 	bne	r16,r2,102ac <__adddf3+0x254>
   105b0:	003ec806 	br	100d4 <__adddf3+0x7c>
   105b4:	0005883a 	mov	r2,zero
   105b8:	003fb106 	br	10480 <__adddf3+0x428>
   105bc:	0007883a 	mov	r3,zero
   105c0:	003fbc06 	br	104b4 <__adddf3+0x45c>
   105c4:	4444b03a 	or	r2,r8,r17
   105c8:	8000871e 	bne	r16,zero,107e8 <__adddf3+0x790>
   105cc:	1000ba26 	beq	r2,zero,108b8 <__adddf3+0x860>
   105d0:	4984b03a 	or	r2,r9,r6
   105d4:	103ebf26 	beq	r2,zero,100d4 <__adddf3+0x7c>
   105d8:	8985883a 	add	r2,r17,r6
   105dc:	4247883a 	add	r3,r8,r9
   105e0:	1451803a 	cmpltu	r8,r2,r17
   105e4:	40d1883a 	add	r8,r8,r3
   105e8:	40c0202c 	andhi	r3,r8,128
   105ec:	1023883a 	mov	r17,r2
   105f0:	183f1a26 	beq	r3,zero,1025c <__adddf3+0x204>
   105f4:	00bfe034 	movhi	r2,65408
   105f8:	10bfffc4 	addi	r2,r2,-1
   105fc:	2021883a 	mov	r16,r4
   10600:	4090703a 	and	r8,r8,r2
   10604:	003eb306 	br	100d4 <__adddf3+0x7c>
   10608:	4444b03a 	or	r2,r8,r17
   1060c:	8000291e 	bne	r16,zero,106b4 <__adddf3+0x65c>
   10610:	10004b1e 	bne	r2,zero,10740 <__adddf3+0x6e8>
   10614:	4990b03a 	or	r8,r9,r6
   10618:	40008b26 	beq	r8,zero,10848 <__adddf3+0x7f0>
   1061c:	4811883a 	mov	r8,r9
   10620:	3023883a 	mov	r17,r6
   10624:	3825883a 	mov	r18,r7
   10628:	003eaa06 	br	100d4 <__adddf3+0x7c>
   1062c:	1021883a 	mov	r16,r2
   10630:	0011883a 	mov	r8,zero
   10634:	0005883a 	mov	r2,zero
   10638:	003f0f06 	br	10278 <__adddf3+0x220>
   1063c:	217ff804 	addi	r5,r4,-32
   10640:	00800804 	movi	r2,32
   10644:	494ad83a 	srl	r5,r9,r5
   10648:	20807d26 	beq	r4,r2,10840 <__adddf3+0x7e8>
   1064c:	00801004 	movi	r2,64
   10650:	1109c83a 	sub	r4,r2,r4
   10654:	4912983a 	sll	r9,r9,r4
   10658:	498cb03a 	or	r6,r9,r6
   1065c:	300cc03a 	cmpne	r6,r6,zero
   10660:	298ab03a 	or	r5,r5,r6
   10664:	0013883a 	mov	r9,zero
   10668:	003f1506 	br	102c0 <__adddf3+0x268>
   1066c:	0101ffc4 	movi	r4,2047
   10670:	113f9a1e 	bne	r2,r4,104dc <__adddf3+0x484>
   10674:	4811883a 	mov	r8,r9
   10678:	3023883a 	mov	r17,r6
   1067c:	1021883a 	mov	r16,r2
   10680:	3825883a 	mov	r18,r7
   10684:	003e9306 	br	100d4 <__adddf3+0x7c>
   10688:	8000161e 	bne	r16,zero,106e4 <__adddf3+0x68c>
   1068c:	444ab03a 	or	r5,r8,r17
   10690:	28005126 	beq	r5,zero,107d8 <__adddf3+0x780>
   10694:	0108303a 	nor	r4,zero,r4
   10698:	20004d1e 	bne	r4,zero,107d0 <__adddf3+0x778>
   1069c:	89a3883a 	add	r17,r17,r6
   106a0:	4253883a 	add	r9,r8,r9
   106a4:	898d803a 	cmpltu	r6,r17,r6
   106a8:	3251883a 	add	r8,r6,r9
   106ac:	1021883a 	mov	r16,r2
   106b0:	003f0806 	br	102d4 <__adddf3+0x27c>
   106b4:	1000301e 	bne	r2,zero,10778 <__adddf3+0x720>
   106b8:	4984b03a 	or	r2,r9,r6
   106bc:	10007126 	beq	r2,zero,10884 <__adddf3+0x82c>
   106c0:	4811883a 	mov	r8,r9
   106c4:	3023883a 	mov	r17,r6
   106c8:	3825883a 	mov	r18,r7
   106cc:	0401ffc4 	movi	r16,2047
   106d0:	003e8006 	br	100d4 <__adddf3+0x7c>
   106d4:	4462b03a 	or	r17,r8,r17
   106d8:	8822c03a 	cmpne	r17,r17,zero
   106dc:	0007883a 	mov	r3,zero
   106e0:	003f8b06 	br	10510 <__adddf3+0x4b8>
   106e4:	0141ffc4 	movi	r5,2047
   106e8:	11403b26 	beq	r2,r5,107d8 <__adddf3+0x780>
   106ec:	0109c83a 	sub	r4,zero,r4
   106f0:	42002034 	orhi	r8,r8,128
   106f4:	01400e04 	movi	r5,56
   106f8:	29006716 	blt	r5,r4,10898 <__adddf3+0x840>
   106fc:	014007c4 	movi	r5,31
   10700:	29007016 	blt	r5,r4,108c4 <__adddf3+0x86c>
   10704:	01400804 	movi	r5,32
   10708:	290bc83a 	sub	r5,r5,r4
   1070c:	4154983a 	sll	r10,r8,r5
   10710:	890ed83a 	srl	r7,r17,r4
   10714:	894a983a 	sll	r5,r17,r5
   10718:	4108d83a 	srl	r4,r8,r4
   1071c:	51e2b03a 	or	r17,r10,r7
   10720:	280ac03a 	cmpne	r5,r5,zero
   10724:	8962b03a 	or	r17,r17,r5
   10728:	89a3883a 	add	r17,r17,r6
   1072c:	2253883a 	add	r9,r4,r9
   10730:	898d803a 	cmpltu	r6,r17,r6
   10734:	3251883a 	add	r8,r6,r9
   10738:	1021883a 	mov	r16,r2
   1073c:	003ee506 	br	102d4 <__adddf3+0x27c>
   10740:	4984b03a 	or	r2,r9,r6
   10744:	103e6326 	beq	r2,zero,100d4 <__adddf3+0x7c>
   10748:	8987c83a 	sub	r3,r17,r6
   1074c:	88c9803a 	cmpltu	r4,r17,r3
   10750:	4245c83a 	sub	r2,r8,r9
   10754:	1105c83a 	sub	r2,r2,r4
   10758:	1100202c 	andhi	r4,r2,128
   1075c:	203ebb26 	beq	r4,zero,1024c <__adddf3+0x1f4>
   10760:	3463c83a 	sub	r17,r6,r17
   10764:	4a07c83a 	sub	r3,r9,r8
   10768:	344d803a 	cmpltu	r6,r6,r17
   1076c:	1991c83a 	sub	r8,r3,r6
   10770:	3825883a 	mov	r18,r7
   10774:	003e5706 	br	100d4 <__adddf3+0x7c>
   10778:	4984b03a 	or	r2,r9,r6
   1077c:	10002e26 	beq	r2,zero,10838 <__adddf3+0x7e0>
   10780:	4004d0fa 	srli	r2,r8,3
   10784:	8822d0fa 	srli	r17,r17,3
   10788:	4010977a 	slli	r8,r8,29
   1078c:	10c0022c 	andhi	r3,r2,8
   10790:	4462b03a 	or	r17,r8,r17
   10794:	18000826 	beq	r3,zero,107b8 <__adddf3+0x760>
   10798:	4808d0fa 	srli	r4,r9,3
   1079c:	20c0022c 	andhi	r3,r4,8
   107a0:	1800051e 	bne	r3,zero,107b8 <__adddf3+0x760>
   107a4:	300cd0fa 	srli	r6,r6,3
   107a8:	4806977a 	slli	r3,r9,29
   107ac:	2005883a 	mov	r2,r4
   107b0:	3825883a 	mov	r18,r7
   107b4:	19a2b03a 	or	r17,r3,r6
   107b8:	8810d77a 	srli	r8,r17,29
   107bc:	100490fa 	slli	r2,r2,3
   107c0:	882290fa 	slli	r17,r17,3
   107c4:	0401ffc4 	movi	r16,2047
   107c8:	4090b03a 	or	r8,r8,r2
   107cc:	003e4106 	br	100d4 <__adddf3+0x7c>
   107d0:	0141ffc4 	movi	r5,2047
   107d4:	117fc71e 	bne	r2,r5,106f4 <__adddf3+0x69c>
   107d8:	4811883a 	mov	r8,r9
   107dc:	3023883a 	mov	r17,r6
   107e0:	1021883a 	mov	r16,r2
   107e4:	003e3b06 	br	100d4 <__adddf3+0x7c>
   107e8:	10002f26 	beq	r2,zero,108a8 <__adddf3+0x850>
   107ec:	4984b03a 	or	r2,r9,r6
   107f0:	10001126 	beq	r2,zero,10838 <__adddf3+0x7e0>
   107f4:	4004d0fa 	srli	r2,r8,3
   107f8:	8822d0fa 	srli	r17,r17,3
   107fc:	4010977a 	slli	r8,r8,29
   10800:	10c0022c 	andhi	r3,r2,8
   10804:	4462b03a 	or	r17,r8,r17
   10808:	183feb26 	beq	r3,zero,107b8 <__adddf3+0x760>
   1080c:	4808d0fa 	srli	r4,r9,3
   10810:	20c0022c 	andhi	r3,r4,8
   10814:	183fe81e 	bne	r3,zero,107b8 <__adddf3+0x760>
   10818:	300cd0fa 	srli	r6,r6,3
   1081c:	4806977a 	slli	r3,r9,29
   10820:	2005883a 	mov	r2,r4
   10824:	19a2b03a 	or	r17,r3,r6
   10828:	003fe306 	br	107b8 <__adddf3+0x760>
   1082c:	0011883a 	mov	r8,zero
   10830:	0005883a 	mov	r2,zero
   10834:	003e3f06 	br	10134 <__adddf3+0xdc>
   10838:	0401ffc4 	movi	r16,2047
   1083c:	003e2506 	br	100d4 <__adddf3+0x7c>
   10840:	0013883a 	mov	r9,zero
   10844:	003f8406 	br	10658 <__adddf3+0x600>
   10848:	0005883a 	mov	r2,zero
   1084c:	0007883a 	mov	r3,zero
   10850:	003e8906 	br	10278 <__adddf3+0x220>
   10854:	197ff804 	addi	r5,r3,-32
   10858:	01000804 	movi	r4,32
   1085c:	414ad83a 	srl	r5,r8,r5
   10860:	19002426 	beq	r3,r4,108f4 <__adddf3+0x89c>
   10864:	01001004 	movi	r4,64
   10868:	20c7c83a 	sub	r3,r4,r3
   1086c:	40c6983a 	sll	r3,r8,r3
   10870:	1c46b03a 	or	r3,r3,r17
   10874:	1806c03a 	cmpne	r3,r3,zero
   10878:	28e2b03a 	or	r17,r5,r3
   1087c:	0007883a 	mov	r3,zero
   10880:	003f2306 	br	10510 <__adddf3+0x4b8>
   10884:	0007883a 	mov	r3,zero
   10888:	5811883a 	mov	r8,r11
   1088c:	00bfffc4 	movi	r2,-1
   10890:	0401ffc4 	movi	r16,2047
   10894:	003e7806 	br	10278 <__adddf3+0x220>
   10898:	4462b03a 	or	r17,r8,r17
   1089c:	8822c03a 	cmpne	r17,r17,zero
   108a0:	0009883a 	mov	r4,zero
   108a4:	003fa006 	br	10728 <__adddf3+0x6d0>
   108a8:	4811883a 	mov	r8,r9
   108ac:	3023883a 	mov	r17,r6
   108b0:	0401ffc4 	movi	r16,2047
   108b4:	003e0706 	br	100d4 <__adddf3+0x7c>
   108b8:	4811883a 	mov	r8,r9
   108bc:	3023883a 	mov	r17,r6
   108c0:	003e0406 	br	100d4 <__adddf3+0x7c>
   108c4:	21fff804 	addi	r7,r4,-32
   108c8:	01400804 	movi	r5,32
   108cc:	41ced83a 	srl	r7,r8,r7
   108d0:	21400a26 	beq	r4,r5,108fc <__adddf3+0x8a4>
   108d4:	01401004 	movi	r5,64
   108d8:	2909c83a 	sub	r4,r5,r4
   108dc:	4108983a 	sll	r4,r8,r4
   108e0:	2448b03a 	or	r4,r4,r17
   108e4:	2008c03a 	cmpne	r4,r4,zero
   108e8:	3922b03a 	or	r17,r7,r4
   108ec:	0009883a 	mov	r4,zero
   108f0:	003f8d06 	br	10728 <__adddf3+0x6d0>
   108f4:	0007883a 	mov	r3,zero
   108f8:	003fdd06 	br	10870 <__adddf3+0x818>
   108fc:	0009883a 	mov	r4,zero
   10900:	003ff706 	br	108e0 <__adddf3+0x888>

00010904 <__divdf3>:
   10904:	defff204 	addi	sp,sp,-56
   10908:	dd400915 	stw	r21,36(sp)
   1090c:	282ad53a 	srli	r21,r5,20
   10910:	dd000815 	stw	r20,32(sp)
   10914:	2828d7fa 	srli	r20,r5,31
   10918:	dc000415 	stw	r16,16(sp)
   1091c:	04000434 	movhi	r16,16
   10920:	df000c15 	stw	fp,48(sp)
   10924:	843fffc4 	addi	r16,r16,-1
   10928:	dfc00d15 	stw	ra,52(sp)
   1092c:	ddc00b15 	stw	r23,44(sp)
   10930:	dd800a15 	stw	r22,40(sp)
   10934:	dcc00715 	stw	r19,28(sp)
   10938:	dc800615 	stw	r18,24(sp)
   1093c:	dc400515 	stw	r17,20(sp)
   10940:	ad41ffcc 	andi	r21,r21,2047
   10944:	2c20703a 	and	r16,r5,r16
   10948:	a7003fcc 	andi	fp,r20,255
   1094c:	a8006126 	beq	r21,zero,10ad4 <__divdf3+0x1d0>
   10950:	0081ffc4 	movi	r2,2047
   10954:	2025883a 	mov	r18,r4
   10958:	a8803726 	beq	r21,r2,10a38 <__divdf3+0x134>
   1095c:	80800434 	orhi	r2,r16,16
   10960:	100490fa 	slli	r2,r2,3
   10964:	2020d77a 	srli	r16,r4,29
   10968:	202490fa 	slli	r18,r4,3
   1096c:	ad7f0044 	addi	r21,r21,-1023
   10970:	80a0b03a 	or	r16,r16,r2
   10974:	0027883a 	mov	r19,zero
   10978:	0013883a 	mov	r9,zero
   1097c:	3804d53a 	srli	r2,r7,20
   10980:	382cd7fa 	srli	r22,r7,31
   10984:	04400434 	movhi	r17,16
   10988:	8c7fffc4 	addi	r17,r17,-1
   1098c:	1081ffcc 	andi	r2,r2,2047
   10990:	3011883a 	mov	r8,r6
   10994:	3c62703a 	and	r17,r7,r17
   10998:	b5c03fcc 	andi	r23,r22,255
   1099c:	10006c26 	beq	r2,zero,10b50 <__divdf3+0x24c>
   109a0:	00c1ffc4 	movi	r3,2047
   109a4:	10c06426 	beq	r2,r3,10b38 <__divdf3+0x234>
   109a8:	88c00434 	orhi	r3,r17,16
   109ac:	180690fa 	slli	r3,r3,3
   109b0:	3022d77a 	srli	r17,r6,29
   109b4:	301090fa 	slli	r8,r6,3
   109b8:	10bf0044 	addi	r2,r2,-1023
   109bc:	88e2b03a 	or	r17,r17,r3
   109c0:	000f883a 	mov	r7,zero
   109c4:	a58cf03a 	xor	r6,r20,r22
   109c8:	3cc8b03a 	or	r4,r7,r19
   109cc:	a8abc83a 	sub	r21,r21,r2
   109d0:	008003c4 	movi	r2,15
   109d4:	3007883a 	mov	r3,r6
   109d8:	34c03fcc 	andi	r19,r6,255
   109dc:	11009036 	bltu	r2,r4,10c20 <__divdf3+0x31c>
   109e0:	200890ba 	slli	r4,r4,2
   109e4:	00800074 	movhi	r2,1
   109e8:	10827e04 	addi	r2,r2,2552
   109ec:	2089883a 	add	r4,r4,r2
   109f0:	20800017 	ldw	r2,0(r4)
   109f4:	1000683a 	jmp	r2
   109f8:	00010c20 	cmpeqi	zero,zero,1072
   109fc:	00010a70 	cmpltui	zero,zero,1065
   10a00:	00010c10 	cmplti	zero,zero,1072
   10a04:	00010a64 	muli	zero,zero,1065
   10a08:	00010c10 	cmplti	zero,zero,1072
   10a0c:	00010be4 	muli	zero,zero,1071
   10a10:	00010c10 	cmplti	zero,zero,1072
   10a14:	00010a64 	muli	zero,zero,1065
   10a18:	00010a70 	cmpltui	zero,zero,1065
   10a1c:	00010a70 	cmpltui	zero,zero,1065
   10a20:	00010be4 	muli	zero,zero,1071
   10a24:	00010a64 	muli	zero,zero,1065
   10a28:	00010a54 	movui	zero,1065
   10a2c:	00010a54 	movui	zero,1065
   10a30:	00010a54 	movui	zero,1065
   10a34:	00010f04 	movi	zero,1084
   10a38:	2404b03a 	or	r2,r4,r16
   10a3c:	1000661e 	bne	r2,zero,10bd8 <__divdf3+0x2d4>
   10a40:	04c00204 	movi	r19,8
   10a44:	0021883a 	mov	r16,zero
   10a48:	0025883a 	mov	r18,zero
   10a4c:	02400084 	movi	r9,2
   10a50:	003fca06 	br	1097c <__divdf3+0x78>
   10a54:	8023883a 	mov	r17,r16
   10a58:	9011883a 	mov	r8,r18
   10a5c:	e02f883a 	mov	r23,fp
   10a60:	480f883a 	mov	r7,r9
   10a64:	00800084 	movi	r2,2
   10a68:	3881311e 	bne	r7,r2,10f30 <__divdf3+0x62c>
   10a6c:	b827883a 	mov	r19,r23
   10a70:	98c0004c 	andi	r3,r19,1
   10a74:	0081ffc4 	movi	r2,2047
   10a78:	000b883a 	mov	r5,zero
   10a7c:	0025883a 	mov	r18,zero
   10a80:	1004953a 	slli	r2,r2,20
   10a84:	18c03fcc 	andi	r3,r3,255
   10a88:	04400434 	movhi	r17,16
   10a8c:	8c7fffc4 	addi	r17,r17,-1
   10a90:	180697fa 	slli	r3,r3,31
   10a94:	2c4a703a 	and	r5,r5,r17
   10a98:	288ab03a 	or	r5,r5,r2
   10a9c:	28c6b03a 	or	r3,r5,r3
   10aa0:	9005883a 	mov	r2,r18
   10aa4:	dfc00d17 	ldw	ra,52(sp)
   10aa8:	df000c17 	ldw	fp,48(sp)
   10aac:	ddc00b17 	ldw	r23,44(sp)
   10ab0:	dd800a17 	ldw	r22,40(sp)
   10ab4:	dd400917 	ldw	r21,36(sp)
   10ab8:	dd000817 	ldw	r20,32(sp)
   10abc:	dcc00717 	ldw	r19,28(sp)
   10ac0:	dc800617 	ldw	r18,24(sp)
   10ac4:	dc400517 	ldw	r17,20(sp)
   10ac8:	dc000417 	ldw	r16,16(sp)
   10acc:	dec00e04 	addi	sp,sp,56
   10ad0:	f800283a 	ret
   10ad4:	2404b03a 	or	r2,r4,r16
   10ad8:	2027883a 	mov	r19,r4
   10adc:	10003926 	beq	r2,zero,10bc4 <__divdf3+0x2c0>
   10ae0:	80012e26 	beq	r16,zero,10f9c <__divdf3+0x698>
   10ae4:	8009883a 	mov	r4,r16
   10ae8:	d9800315 	stw	r6,12(sp)
   10aec:	d9c00215 	stw	r7,8(sp)
   10af0:	001265c0 	call	1265c <__clzsi2>
   10af4:	d9800317 	ldw	r6,12(sp)
   10af8:	d9c00217 	ldw	r7,8(sp)
   10afc:	113ffd44 	addi	r4,r2,-11
   10b00:	00c00704 	movi	r3,28
   10b04:	19012116 	blt	r3,r4,10f8c <__divdf3+0x688>
   10b08:	00c00744 	movi	r3,29
   10b0c:	147ffe04 	addi	r17,r2,-8
   10b10:	1907c83a 	sub	r3,r3,r4
   10b14:	8460983a 	sll	r16,r16,r17
   10b18:	98c6d83a 	srl	r3,r19,r3
   10b1c:	9c64983a 	sll	r18,r19,r17
   10b20:	1c20b03a 	or	r16,r3,r16
   10b24:	1080fcc4 	addi	r2,r2,1011
   10b28:	00abc83a 	sub	r21,zero,r2
   10b2c:	0027883a 	mov	r19,zero
   10b30:	0013883a 	mov	r9,zero
   10b34:	003f9106 	br	1097c <__divdf3+0x78>
   10b38:	3446b03a 	or	r3,r6,r17
   10b3c:	18001f1e 	bne	r3,zero,10bbc <__divdf3+0x2b8>
   10b40:	0023883a 	mov	r17,zero
   10b44:	0011883a 	mov	r8,zero
   10b48:	01c00084 	movi	r7,2
   10b4c:	003f9d06 	br	109c4 <__divdf3+0xc0>
   10b50:	3446b03a 	or	r3,r6,r17
   10b54:	18001526 	beq	r3,zero,10bac <__divdf3+0x2a8>
   10b58:	88011b26 	beq	r17,zero,10fc8 <__divdf3+0x6c4>
   10b5c:	8809883a 	mov	r4,r17
   10b60:	d9800315 	stw	r6,12(sp)
   10b64:	da400115 	stw	r9,4(sp)
   10b68:	001265c0 	call	1265c <__clzsi2>
   10b6c:	d9800317 	ldw	r6,12(sp)
   10b70:	da400117 	ldw	r9,4(sp)
   10b74:	113ffd44 	addi	r4,r2,-11
   10b78:	00c00704 	movi	r3,28
   10b7c:	19010e16 	blt	r3,r4,10fb8 <__divdf3+0x6b4>
   10b80:	00c00744 	movi	r3,29
   10b84:	123ffe04 	addi	r8,r2,-8
   10b88:	1907c83a 	sub	r3,r3,r4
   10b8c:	8a22983a 	sll	r17,r17,r8
   10b90:	30c6d83a 	srl	r3,r6,r3
   10b94:	3210983a 	sll	r8,r6,r8
   10b98:	1c62b03a 	or	r17,r3,r17
   10b9c:	1080fcc4 	addi	r2,r2,1011
   10ba0:	0085c83a 	sub	r2,zero,r2
   10ba4:	000f883a 	mov	r7,zero
   10ba8:	003f8606 	br	109c4 <__divdf3+0xc0>
   10bac:	0023883a 	mov	r17,zero
   10bb0:	0011883a 	mov	r8,zero
   10bb4:	01c00044 	movi	r7,1
   10bb8:	003f8206 	br	109c4 <__divdf3+0xc0>
   10bbc:	01c000c4 	movi	r7,3
   10bc0:	003f8006 	br	109c4 <__divdf3+0xc0>
   10bc4:	04c00104 	movi	r19,4
   10bc8:	0021883a 	mov	r16,zero
   10bcc:	0025883a 	mov	r18,zero
   10bd0:	02400044 	movi	r9,1
   10bd4:	003f6906 	br	1097c <__divdf3+0x78>
   10bd8:	04c00304 	movi	r19,12
   10bdc:	024000c4 	movi	r9,3
   10be0:	003f6606 	br	1097c <__divdf3+0x78>
   10be4:	01400434 	movhi	r5,16
   10be8:	0007883a 	mov	r3,zero
   10bec:	297fffc4 	addi	r5,r5,-1
   10bf0:	04bfffc4 	movi	r18,-1
   10bf4:	0081ffc4 	movi	r2,2047
   10bf8:	003fa106 	br	10a80 <__divdf3+0x17c>
   10bfc:	00c00044 	movi	r3,1
   10c00:	1887c83a 	sub	r3,r3,r2
   10c04:	01000e04 	movi	r4,56
   10c08:	20c1210e 	bge	r4,r3,11090 <__divdf3+0x78c>
   10c0c:	98c0004c 	andi	r3,r19,1
   10c10:	0005883a 	mov	r2,zero
   10c14:	000b883a 	mov	r5,zero
   10c18:	0025883a 	mov	r18,zero
   10c1c:	003f9806 	br	10a80 <__divdf3+0x17c>
   10c20:	8c00fd36 	bltu	r17,r16,11018 <__divdf3+0x714>
   10c24:	8440fb26 	beq	r16,r17,11014 <__divdf3+0x710>
   10c28:	8007883a 	mov	r3,r16
   10c2c:	ad7fffc4 	addi	r21,r21,-1
   10c30:	0021883a 	mov	r16,zero
   10c34:	4004d63a 	srli	r2,r8,24
   10c38:	8822923a 	slli	r17,r17,8
   10c3c:	1809883a 	mov	r4,r3
   10c40:	402c923a 	slli	r22,r8,8
   10c44:	88b8b03a 	or	fp,r17,r2
   10c48:	e028d43a 	srli	r20,fp,16
   10c4c:	d8c00015 	stw	r3,0(sp)
   10c50:	e5ffffcc 	andi	r23,fp,65535
   10c54:	a00b883a 	mov	r5,r20
   10c58:	000ff9c0 	call	ff9c <__udivsi3>
   10c5c:	d8c00017 	ldw	r3,0(sp)
   10c60:	a00b883a 	mov	r5,r20
   10c64:	d8800315 	stw	r2,12(sp)
   10c68:	1809883a 	mov	r4,r3
   10c6c:	00100000 	call	10000 <__umodsi3>
   10c70:	d9800317 	ldw	r6,12(sp)
   10c74:	1006943a 	slli	r3,r2,16
   10c78:	9004d43a 	srli	r2,r18,16
   10c7c:	b9a3383a 	mul	r17,r23,r6
   10c80:	10c4b03a 	or	r2,r2,r3
   10c84:	1440062e 	bgeu	r2,r17,10ca0 <__divdf3+0x39c>
   10c88:	1705883a 	add	r2,r2,fp
   10c8c:	30ffffc4 	addi	r3,r6,-1
   10c90:	1700ee36 	bltu	r2,fp,1104c <__divdf3+0x748>
   10c94:	1440ed2e 	bgeu	r2,r17,1104c <__divdf3+0x748>
   10c98:	31bfff84 	addi	r6,r6,-2
   10c9c:	1705883a 	add	r2,r2,fp
   10ca0:	1463c83a 	sub	r17,r2,r17
   10ca4:	a00b883a 	mov	r5,r20
   10ca8:	8809883a 	mov	r4,r17
   10cac:	d9800315 	stw	r6,12(sp)
   10cb0:	000ff9c0 	call	ff9c <__udivsi3>
   10cb4:	a00b883a 	mov	r5,r20
   10cb8:	8809883a 	mov	r4,r17
   10cbc:	d8800215 	stw	r2,8(sp)
   10cc0:	00100000 	call	10000 <__umodsi3>
   10cc4:	d9c00217 	ldw	r7,8(sp)
   10cc8:	1004943a 	slli	r2,r2,16
   10ccc:	94bfffcc 	andi	r18,r18,65535
   10cd0:	b9d1383a 	mul	r8,r23,r7
   10cd4:	90a4b03a 	or	r18,r18,r2
   10cd8:	d9800317 	ldw	r6,12(sp)
   10cdc:	9200062e 	bgeu	r18,r8,10cf8 <__divdf3+0x3f4>
   10ce0:	9725883a 	add	r18,r18,fp
   10ce4:	38bfffc4 	addi	r2,r7,-1
   10ce8:	9700d636 	bltu	r18,fp,11044 <__divdf3+0x740>
   10cec:	9200d52e 	bgeu	r18,r8,11044 <__divdf3+0x740>
   10cf0:	39ffff84 	addi	r7,r7,-2
   10cf4:	9725883a 	add	r18,r18,fp
   10cf8:	3004943a 	slli	r2,r6,16
   10cfc:	b012d43a 	srli	r9,r22,16
   10d00:	b1bfffcc 	andi	r6,r22,65535
   10d04:	11e2b03a 	or	r17,r2,r7
   10d08:	8806d43a 	srli	r3,r17,16
   10d0c:	893fffcc 	andi	r4,r17,65535
   10d10:	218b383a 	mul	r5,r4,r6
   10d14:	30c5383a 	mul	r2,r6,r3
   10d18:	2249383a 	mul	r4,r4,r9
   10d1c:	280ed43a 	srli	r7,r5,16
   10d20:	9225c83a 	sub	r18,r18,r8
   10d24:	2089883a 	add	r4,r4,r2
   10d28:	3909883a 	add	r4,r7,r4
   10d2c:	1a47383a 	mul	r3,r3,r9
   10d30:	2080022e 	bgeu	r4,r2,10d3c <__divdf3+0x438>
   10d34:	00800074 	movhi	r2,1
   10d38:	1887883a 	add	r3,r3,r2
   10d3c:	2004d43a 	srli	r2,r4,16
   10d40:	2008943a 	slli	r4,r4,16
   10d44:	297fffcc 	andi	r5,r5,65535
   10d48:	10c7883a 	add	r3,r2,r3
   10d4c:	2149883a 	add	r4,r4,r5
   10d50:	90c0a536 	bltu	r18,r3,10fe8 <__divdf3+0x6e4>
   10d54:	90c0bf26 	beq	r18,r3,11054 <__divdf3+0x750>
   10d58:	90c7c83a 	sub	r3,r18,r3
   10d5c:	810fc83a 	sub	r7,r16,r4
   10d60:	81e5803a 	cmpltu	r18,r16,r7
   10d64:	1ca5c83a 	sub	r18,r3,r18
   10d68:	e480c126 	beq	fp,r18,11070 <__divdf3+0x76c>
   10d6c:	a00b883a 	mov	r5,r20
   10d70:	9009883a 	mov	r4,r18
   10d74:	d9800315 	stw	r6,12(sp)
   10d78:	d9c00215 	stw	r7,8(sp)
   10d7c:	da400115 	stw	r9,4(sp)
   10d80:	000ff9c0 	call	ff9c <__udivsi3>
   10d84:	a00b883a 	mov	r5,r20
   10d88:	9009883a 	mov	r4,r18
   10d8c:	d8800015 	stw	r2,0(sp)
   10d90:	00100000 	call	10000 <__umodsi3>
   10d94:	d9c00217 	ldw	r7,8(sp)
   10d98:	da000017 	ldw	r8,0(sp)
   10d9c:	1006943a 	slli	r3,r2,16
   10da0:	3804d43a 	srli	r2,r7,16
   10da4:	ba21383a 	mul	r16,r23,r8
   10da8:	d9800317 	ldw	r6,12(sp)
   10dac:	10c4b03a 	or	r2,r2,r3
   10db0:	da400117 	ldw	r9,4(sp)
   10db4:	1400062e 	bgeu	r2,r16,10dd0 <__divdf3+0x4cc>
   10db8:	1705883a 	add	r2,r2,fp
   10dbc:	40ffffc4 	addi	r3,r8,-1
   10dc0:	1700ad36 	bltu	r2,fp,11078 <__divdf3+0x774>
   10dc4:	1400ac2e 	bgeu	r2,r16,11078 <__divdf3+0x774>
   10dc8:	423fff84 	addi	r8,r8,-2
   10dcc:	1705883a 	add	r2,r2,fp
   10dd0:	1421c83a 	sub	r16,r2,r16
   10dd4:	a00b883a 	mov	r5,r20
   10dd8:	8009883a 	mov	r4,r16
   10ddc:	d9800315 	stw	r6,12(sp)
   10de0:	d9c00215 	stw	r7,8(sp)
   10de4:	da000015 	stw	r8,0(sp)
   10de8:	da400115 	stw	r9,4(sp)
   10dec:	000ff9c0 	call	ff9c <__udivsi3>
   10df0:	8009883a 	mov	r4,r16
   10df4:	a00b883a 	mov	r5,r20
   10df8:	1025883a 	mov	r18,r2
   10dfc:	00100000 	call	10000 <__umodsi3>
   10e00:	d9c00217 	ldw	r7,8(sp)
   10e04:	1004943a 	slli	r2,r2,16
   10e08:	bcaf383a 	mul	r23,r23,r18
   10e0c:	393fffcc 	andi	r4,r7,65535
   10e10:	2088b03a 	or	r4,r4,r2
   10e14:	d9800317 	ldw	r6,12(sp)
   10e18:	da000017 	ldw	r8,0(sp)
   10e1c:	da400117 	ldw	r9,4(sp)
   10e20:	25c0062e 	bgeu	r4,r23,10e3c <__divdf3+0x538>
   10e24:	2709883a 	add	r4,r4,fp
   10e28:	90bfffc4 	addi	r2,r18,-1
   10e2c:	27009436 	bltu	r4,fp,11080 <__divdf3+0x77c>
   10e30:	25c0932e 	bgeu	r4,r23,11080 <__divdf3+0x77c>
   10e34:	94bfff84 	addi	r18,r18,-2
   10e38:	2709883a 	add	r4,r4,fp
   10e3c:	4004943a 	slli	r2,r8,16
   10e40:	25efc83a 	sub	r23,r4,r23
   10e44:	1490b03a 	or	r8,r2,r18
   10e48:	4008d43a 	srli	r4,r8,16
   10e4c:	40ffffcc 	andi	r3,r8,65535
   10e50:	30c5383a 	mul	r2,r6,r3
   10e54:	1a47383a 	mul	r3,r3,r9
   10e58:	310d383a 	mul	r6,r6,r4
   10e5c:	100ad43a 	srli	r5,r2,16
   10e60:	4913383a 	mul	r9,r9,r4
   10e64:	1987883a 	add	r3,r3,r6
   10e68:	28c7883a 	add	r3,r5,r3
   10e6c:	1980022e 	bgeu	r3,r6,10e78 <__divdf3+0x574>
   10e70:	01000074 	movhi	r4,1
   10e74:	4913883a 	add	r9,r9,r4
   10e78:	1808d43a 	srli	r4,r3,16
   10e7c:	1806943a 	slli	r3,r3,16
   10e80:	10bfffcc 	andi	r2,r2,65535
   10e84:	2253883a 	add	r9,r4,r9
   10e88:	1887883a 	add	r3,r3,r2
   10e8c:	ba403836 	bltu	r23,r9,10f70 <__divdf3+0x66c>
   10e90:	ba403626 	beq	r23,r9,10f6c <__divdf3+0x668>
   10e94:	42000054 	ori	r8,r8,1
   10e98:	a880ffc4 	addi	r2,r21,1023
   10e9c:	00bf570e 	bge	zero,r2,10bfc <__divdf3+0x2f8>
   10ea0:	40c001cc 	andi	r3,r8,7
   10ea4:	18000726 	beq	r3,zero,10ec4 <__divdf3+0x5c0>
   10ea8:	40c003cc 	andi	r3,r8,15
   10eac:	01000104 	movi	r4,4
   10eb0:	19000426 	beq	r3,r4,10ec4 <__divdf3+0x5c0>
   10eb4:	4107883a 	add	r3,r8,r4
   10eb8:	1a11803a 	cmpltu	r8,r3,r8
   10ebc:	8a23883a 	add	r17,r17,r8
   10ec0:	1811883a 	mov	r8,r3
   10ec4:	88c0402c 	andhi	r3,r17,256
   10ec8:	18000426 	beq	r3,zero,10edc <__divdf3+0x5d8>
   10ecc:	00ffc034 	movhi	r3,65280
   10ed0:	18ffffc4 	addi	r3,r3,-1
   10ed4:	a8810004 	addi	r2,r21,1024
   10ed8:	88e2703a 	and	r17,r17,r3
   10edc:	00c1ff84 	movi	r3,2046
   10ee0:	18bee316 	blt	r3,r2,10a70 <__divdf3+0x16c>
   10ee4:	8824977a 	slli	r18,r17,29
   10ee8:	4010d0fa 	srli	r8,r8,3
   10eec:	8822927a 	slli	r17,r17,9
   10ef0:	1081ffcc 	andi	r2,r2,2047
   10ef4:	9224b03a 	or	r18,r18,r8
   10ef8:	880ad33a 	srli	r5,r17,12
   10efc:	98c0004c 	andi	r3,r19,1
   10f00:	003edf06 	br	10a80 <__divdf3+0x17c>
   10f04:	8080022c 	andhi	r2,r16,8
   10f08:	10001226 	beq	r2,zero,10f54 <__divdf3+0x650>
   10f0c:	8880022c 	andhi	r2,r17,8
   10f10:	1000101e 	bne	r2,zero,10f54 <__divdf3+0x650>
   10f14:	00800434 	movhi	r2,16
   10f18:	89400234 	orhi	r5,r17,8
   10f1c:	10bfffc4 	addi	r2,r2,-1
   10f20:	b007883a 	mov	r3,r22
   10f24:	288a703a 	and	r5,r5,r2
   10f28:	4025883a 	mov	r18,r8
   10f2c:	003f3106 	br	10bf4 <__divdf3+0x2f0>
   10f30:	008000c4 	movi	r2,3
   10f34:	3880a626 	beq	r7,r2,111d0 <__divdf3+0x8cc>
   10f38:	00800044 	movi	r2,1
   10f3c:	3880521e 	bne	r7,r2,11088 <__divdf3+0x784>
   10f40:	b807883a 	mov	r3,r23
   10f44:	0005883a 	mov	r2,zero
   10f48:	000b883a 	mov	r5,zero
   10f4c:	0025883a 	mov	r18,zero
   10f50:	003ecb06 	br	10a80 <__divdf3+0x17c>
   10f54:	00800434 	movhi	r2,16
   10f58:	81400234 	orhi	r5,r16,8
   10f5c:	10bfffc4 	addi	r2,r2,-1
   10f60:	a007883a 	mov	r3,r20
   10f64:	288a703a 	and	r5,r5,r2
   10f68:	003f2206 	br	10bf4 <__divdf3+0x2f0>
   10f6c:	183fca26 	beq	r3,zero,10e98 <__divdf3+0x594>
   10f70:	e5ef883a 	add	r23,fp,r23
   10f74:	40bfffc4 	addi	r2,r8,-1
   10f78:	bf00392e 	bgeu	r23,fp,11060 <__divdf3+0x75c>
   10f7c:	1011883a 	mov	r8,r2
   10f80:	ba7fc41e 	bne	r23,r9,10e94 <__divdf3+0x590>
   10f84:	b0ffc31e 	bne	r22,r3,10e94 <__divdf3+0x590>
   10f88:	003fc306 	br	10e98 <__divdf3+0x594>
   10f8c:	143ff604 	addi	r16,r2,-40
   10f90:	9c20983a 	sll	r16,r19,r16
   10f94:	0025883a 	mov	r18,zero
   10f98:	003ee206 	br	10b24 <__divdf3+0x220>
   10f9c:	d9800315 	stw	r6,12(sp)
   10fa0:	d9c00215 	stw	r7,8(sp)
   10fa4:	001265c0 	call	1265c <__clzsi2>
   10fa8:	10800804 	addi	r2,r2,32
   10fac:	d9c00217 	ldw	r7,8(sp)
   10fb0:	d9800317 	ldw	r6,12(sp)
   10fb4:	003ed106 	br	10afc <__divdf3+0x1f8>
   10fb8:	147ff604 	addi	r17,r2,-40
   10fbc:	3462983a 	sll	r17,r6,r17
   10fc0:	0011883a 	mov	r8,zero
   10fc4:	003ef506 	br	10b9c <__divdf3+0x298>
   10fc8:	3009883a 	mov	r4,r6
   10fcc:	d9800315 	stw	r6,12(sp)
   10fd0:	da400115 	stw	r9,4(sp)
   10fd4:	001265c0 	call	1265c <__clzsi2>
   10fd8:	10800804 	addi	r2,r2,32
   10fdc:	da400117 	ldw	r9,4(sp)
   10fe0:	d9800317 	ldw	r6,12(sp)
   10fe4:	003ee306 	br	10b74 <__divdf3+0x270>
   10fe8:	85a1883a 	add	r16,r16,r22
   10fec:	8585803a 	cmpltu	r2,r16,r22
   10ff0:	1705883a 	add	r2,r2,fp
   10ff4:	14a5883a 	add	r18,r2,r18
   10ff8:	88bfffc4 	addi	r2,r17,-1
   10ffc:	e4800c2e 	bgeu	fp,r18,11030 <__divdf3+0x72c>
   11000:	90c03e36 	bltu	r18,r3,110fc <__divdf3+0x7f8>
   11004:	1c806926 	beq	r3,r18,111ac <__divdf3+0x8a8>
   11008:	90c7c83a 	sub	r3,r18,r3
   1100c:	1023883a 	mov	r17,r2
   11010:	003f5206 	br	10d5c <__divdf3+0x458>
   11014:	923f0436 	bltu	r18,r8,10c28 <__divdf3+0x324>
   11018:	800897fa 	slli	r4,r16,31
   1101c:	9004d07a 	srli	r2,r18,1
   11020:	8006d07a 	srli	r3,r16,1
   11024:	902097fa 	slli	r16,r18,31
   11028:	20a4b03a 	or	r18,r4,r2
   1102c:	003f0106 	br	10c34 <__divdf3+0x330>
   11030:	e4bff51e 	bne	fp,r18,11008 <__divdf3+0x704>
   11034:	85bff22e 	bgeu	r16,r22,11000 <__divdf3+0x6fc>
   11038:	e0c7c83a 	sub	r3,fp,r3
   1103c:	1023883a 	mov	r17,r2
   11040:	003f4606 	br	10d5c <__divdf3+0x458>
   11044:	100f883a 	mov	r7,r2
   11048:	003f2b06 	br	10cf8 <__divdf3+0x3f4>
   1104c:	180d883a 	mov	r6,r3
   11050:	003f1306 	br	10ca0 <__divdf3+0x39c>
   11054:	813fe436 	bltu	r16,r4,10fe8 <__divdf3+0x6e4>
   11058:	0007883a 	mov	r3,zero
   1105c:	003f3f06 	br	10d5c <__divdf3+0x458>
   11060:	ba402c36 	bltu	r23,r9,11114 <__divdf3+0x810>
   11064:	4dc05426 	beq	r9,r23,111b8 <__divdf3+0x8b4>
   11068:	1011883a 	mov	r8,r2
   1106c:	003f8906 	br	10e94 <__divdf3+0x590>
   11070:	023fffc4 	movi	r8,-1
   11074:	003f8806 	br	10e98 <__divdf3+0x594>
   11078:	1811883a 	mov	r8,r3
   1107c:	003f5406 	br	10dd0 <__divdf3+0x4cc>
   11080:	1025883a 	mov	r18,r2
   11084:	003f6d06 	br	10e3c <__divdf3+0x538>
   11088:	b827883a 	mov	r19,r23
   1108c:	003f8206 	br	10e98 <__divdf3+0x594>
   11090:	010007c4 	movi	r4,31
   11094:	20c02616 	blt	r4,r3,11130 <__divdf3+0x82c>
   11098:	00800804 	movi	r2,32
   1109c:	10c5c83a 	sub	r2,r2,r3
   110a0:	888a983a 	sll	r5,r17,r2
   110a4:	40c8d83a 	srl	r4,r8,r3
   110a8:	4084983a 	sll	r2,r8,r2
   110ac:	88e2d83a 	srl	r17,r17,r3
   110b0:	2906b03a 	or	r3,r5,r4
   110b4:	1004c03a 	cmpne	r2,r2,zero
   110b8:	1886b03a 	or	r3,r3,r2
   110bc:	188001cc 	andi	r2,r3,7
   110c0:	10000726 	beq	r2,zero,110e0 <__divdf3+0x7dc>
   110c4:	188003cc 	andi	r2,r3,15
   110c8:	01000104 	movi	r4,4
   110cc:	11000426 	beq	r2,r4,110e0 <__divdf3+0x7dc>
   110d0:	1805883a 	mov	r2,r3
   110d4:	10c00104 	addi	r3,r2,4
   110d8:	1885803a 	cmpltu	r2,r3,r2
   110dc:	88a3883a 	add	r17,r17,r2
   110e0:	8880202c 	andhi	r2,r17,128
   110e4:	10002726 	beq	r2,zero,11184 <__divdf3+0x880>
   110e8:	98c0004c 	andi	r3,r19,1
   110ec:	00800044 	movi	r2,1
   110f0:	000b883a 	mov	r5,zero
   110f4:	0025883a 	mov	r18,zero
   110f8:	003e6106 	br	10a80 <__divdf3+0x17c>
   110fc:	85a1883a 	add	r16,r16,r22
   11100:	8585803a 	cmpltu	r2,r16,r22
   11104:	1705883a 	add	r2,r2,fp
   11108:	14a5883a 	add	r18,r2,r18
   1110c:	8c7fff84 	addi	r17,r17,-2
   11110:	003f1106 	br	10d58 <__divdf3+0x454>
   11114:	b589883a 	add	r4,r22,r22
   11118:	25ad803a 	cmpltu	r22,r4,r22
   1111c:	b739883a 	add	fp,r22,fp
   11120:	40bfff84 	addi	r2,r8,-2
   11124:	bf2f883a 	add	r23,r23,fp
   11128:	202d883a 	mov	r22,r4
   1112c:	003f9306 	br	10f7c <__divdf3+0x678>
   11130:	013ff844 	movi	r4,-31
   11134:	2085c83a 	sub	r2,r4,r2
   11138:	8888d83a 	srl	r4,r17,r2
   1113c:	00800804 	movi	r2,32
   11140:	18802126 	beq	r3,r2,111c8 <__divdf3+0x8c4>
   11144:	00801004 	movi	r2,64
   11148:	10c5c83a 	sub	r2,r2,r3
   1114c:	8884983a 	sll	r2,r17,r2
   11150:	1204b03a 	or	r2,r2,r8
   11154:	1004c03a 	cmpne	r2,r2,zero
   11158:	2084b03a 	or	r2,r4,r2
   1115c:	144001cc 	andi	r17,r2,7
   11160:	88000d1e 	bne	r17,zero,11198 <__divdf3+0x894>
   11164:	000b883a 	mov	r5,zero
   11168:	1024d0fa 	srli	r18,r2,3
   1116c:	98c0004c 	andi	r3,r19,1
   11170:	0005883a 	mov	r2,zero
   11174:	9464b03a 	or	r18,r18,r17
   11178:	003e4106 	br	10a80 <__divdf3+0x17c>
   1117c:	1007883a 	mov	r3,r2
   11180:	0023883a 	mov	r17,zero
   11184:	880a927a 	slli	r5,r17,9
   11188:	1805883a 	mov	r2,r3
   1118c:	8822977a 	slli	r17,r17,29
   11190:	280ad33a 	srli	r5,r5,12
   11194:	003ff406 	br	11168 <__divdf3+0x864>
   11198:	10c003cc 	andi	r3,r2,15
   1119c:	01000104 	movi	r4,4
   111a0:	193ff626 	beq	r3,r4,1117c <__divdf3+0x878>
   111a4:	0023883a 	mov	r17,zero
   111a8:	003fca06 	br	110d4 <__divdf3+0x7d0>
   111ac:	813fd336 	bltu	r16,r4,110fc <__divdf3+0x7f8>
   111b0:	1023883a 	mov	r17,r2
   111b4:	003fa806 	br	11058 <__divdf3+0x754>
   111b8:	b0ffd636 	bltu	r22,r3,11114 <__divdf3+0x810>
   111bc:	1011883a 	mov	r8,r2
   111c0:	b0ff341e 	bne	r22,r3,10e94 <__divdf3+0x590>
   111c4:	003f3406 	br	10e98 <__divdf3+0x594>
   111c8:	0005883a 	mov	r2,zero
   111cc:	003fe006 	br	11150 <__divdf3+0x84c>
   111d0:	00800434 	movhi	r2,16
   111d4:	89400234 	orhi	r5,r17,8
   111d8:	10bfffc4 	addi	r2,r2,-1
   111dc:	b807883a 	mov	r3,r23
   111e0:	288a703a 	and	r5,r5,r2
   111e4:	4025883a 	mov	r18,r8
   111e8:	003e8206 	br	10bf4 <__divdf3+0x2f0>

000111ec <__eqdf2>:
   111ec:	2804d53a 	srli	r2,r5,20
   111f0:	3806d53a 	srli	r3,r7,20
   111f4:	02000434 	movhi	r8,16
   111f8:	423fffc4 	addi	r8,r8,-1
   111fc:	1081ffcc 	andi	r2,r2,2047
   11200:	0281ffc4 	movi	r10,2047
   11204:	2a12703a 	and	r9,r5,r8
   11208:	18c1ffcc 	andi	r3,r3,2047
   1120c:	3a10703a 	and	r8,r7,r8
   11210:	280ad7fa 	srli	r5,r5,31
   11214:	380ed7fa 	srli	r7,r7,31
   11218:	12801026 	beq	r2,r10,1125c <__eqdf2+0x70>
   1121c:	0281ffc4 	movi	r10,2047
   11220:	1a800a26 	beq	r3,r10,1124c <__eqdf2+0x60>
   11224:	10c00226 	beq	r2,r3,11230 <__eqdf2+0x44>
   11228:	00800044 	movi	r2,1
   1122c:	f800283a 	ret
   11230:	4a3ffd1e 	bne	r9,r8,11228 <__eqdf2+0x3c>
   11234:	21bffc1e 	bne	r4,r6,11228 <__eqdf2+0x3c>
   11238:	29c00c26 	beq	r5,r7,1126c <__eqdf2+0x80>
   1123c:	103ffa1e 	bne	r2,zero,11228 <__eqdf2+0x3c>
   11240:	2244b03a 	or	r2,r4,r9
   11244:	1004c03a 	cmpne	r2,r2,zero
   11248:	f800283a 	ret
   1124c:	3214b03a 	or	r10,r6,r8
   11250:	503ff426 	beq	r10,zero,11224 <__eqdf2+0x38>
   11254:	00800044 	movi	r2,1
   11258:	f800283a 	ret
   1125c:	2254b03a 	or	r10,r4,r9
   11260:	503fee26 	beq	r10,zero,1121c <__eqdf2+0x30>
   11264:	00800044 	movi	r2,1
   11268:	f800283a 	ret
   1126c:	0005883a 	mov	r2,zero
   11270:	f800283a 	ret

00011274 <__gedf2>:
   11274:	2804d53a 	srli	r2,r5,20
   11278:	3806d53a 	srli	r3,r7,20
   1127c:	02000434 	movhi	r8,16
   11280:	423fffc4 	addi	r8,r8,-1
   11284:	1081ffcc 	andi	r2,r2,2047
   11288:	0241ffc4 	movi	r9,2047
   1128c:	2a14703a 	and	r10,r5,r8
   11290:	18c1ffcc 	andi	r3,r3,2047
   11294:	3a10703a 	and	r8,r7,r8
   11298:	280ad7fa 	srli	r5,r5,31
   1129c:	380ed7fa 	srli	r7,r7,31
   112a0:	12401d26 	beq	r2,r9,11318 <__gedf2+0xa4>
   112a4:	0241ffc4 	movi	r9,2047
   112a8:	1a401226 	beq	r3,r9,112f4 <__gedf2+0x80>
   112ac:	1000081e 	bne	r2,zero,112d0 <__gedf2+0x5c>
   112b0:	2296b03a 	or	r11,r4,r10
   112b4:	5813003a 	cmpeq	r9,r11,zero
   112b8:	1800091e 	bne	r3,zero,112e0 <__gedf2+0x6c>
   112bc:	3218b03a 	or	r12,r6,r8
   112c0:	6000071e 	bne	r12,zero,112e0 <__gedf2+0x6c>
   112c4:	0005883a 	mov	r2,zero
   112c8:	5800101e 	bne	r11,zero,1130c <__gedf2+0x98>
   112cc:	f800283a 	ret
   112d0:	18000c1e 	bne	r3,zero,11304 <__gedf2+0x90>
   112d4:	3212b03a 	or	r9,r6,r8
   112d8:	48000c26 	beq	r9,zero,1130c <__gedf2+0x98>
   112dc:	0013883a 	mov	r9,zero
   112e0:	39c03fcc 	andi	r7,r7,255
   112e4:	48000826 	beq	r9,zero,11308 <__gedf2+0x94>
   112e8:	38000926 	beq	r7,zero,11310 <__gedf2+0x9c>
   112ec:	00800044 	movi	r2,1
   112f0:	f800283a 	ret
   112f4:	3212b03a 	or	r9,r6,r8
   112f8:	483fec26 	beq	r9,zero,112ac <__gedf2+0x38>
   112fc:	00bfff84 	movi	r2,-2
   11300:	f800283a 	ret
   11304:	39c03fcc 	andi	r7,r7,255
   11308:	29c00626 	beq	r5,r7,11324 <__gedf2+0xb0>
   1130c:	283ff726 	beq	r5,zero,112ec <__gedf2+0x78>
   11310:	00bfffc4 	movi	r2,-1
   11314:	f800283a 	ret
   11318:	2292b03a 	or	r9,r4,r10
   1131c:	483fe126 	beq	r9,zero,112a4 <__gedf2+0x30>
   11320:	003ff606 	br	112fc <__gedf2+0x88>
   11324:	18bff916 	blt	r3,r2,1130c <__gedf2+0x98>
   11328:	10c00316 	blt	r2,r3,11338 <__gedf2+0xc4>
   1132c:	42bff736 	bltu	r8,r10,1130c <__gedf2+0x98>
   11330:	52000326 	beq	r10,r8,11340 <__gedf2+0xcc>
   11334:	5200042e 	bgeu	r10,r8,11348 <__gedf2+0xd4>
   11338:	283fec1e 	bne	r5,zero,112ec <__gedf2+0x78>
   1133c:	003ff406 	br	11310 <__gedf2+0x9c>
   11340:	313ff236 	bltu	r6,r4,1130c <__gedf2+0x98>
   11344:	21bffc36 	bltu	r4,r6,11338 <__gedf2+0xc4>
   11348:	0005883a 	mov	r2,zero
   1134c:	f800283a 	ret

00011350 <__ledf2>:
   11350:	2804d53a 	srli	r2,r5,20
   11354:	3810d53a 	srli	r8,r7,20
   11358:	00c00434 	movhi	r3,16
   1135c:	18ffffc4 	addi	r3,r3,-1
   11360:	1081ffcc 	andi	r2,r2,2047
   11364:	0241ffc4 	movi	r9,2047
   11368:	28d4703a 	and	r10,r5,r3
   1136c:	4201ffcc 	andi	r8,r8,2047
   11370:	38c6703a 	and	r3,r7,r3
   11374:	280ad7fa 	srli	r5,r5,31
   11378:	380ed7fa 	srli	r7,r7,31
   1137c:	12401f26 	beq	r2,r9,113fc <__ledf2+0xac>
   11380:	0241ffc4 	movi	r9,2047
   11384:	42401426 	beq	r8,r9,113d8 <__ledf2+0x88>
   11388:	1000091e 	bne	r2,zero,113b0 <__ledf2+0x60>
   1138c:	2296b03a 	or	r11,r4,r10
   11390:	5813003a 	cmpeq	r9,r11,zero
   11394:	29403fcc 	andi	r5,r5,255
   11398:	40000a1e 	bne	r8,zero,113c4 <__ledf2+0x74>
   1139c:	30d8b03a 	or	r12,r6,r3
   113a0:	6000081e 	bne	r12,zero,113c4 <__ledf2+0x74>
   113a4:	0005883a 	mov	r2,zero
   113a8:	5800111e 	bne	r11,zero,113f0 <__ledf2+0xa0>
   113ac:	f800283a 	ret
   113b0:	29403fcc 	andi	r5,r5,255
   113b4:	40000c1e 	bne	r8,zero,113e8 <__ledf2+0x98>
   113b8:	30d2b03a 	or	r9,r6,r3
   113bc:	48000c26 	beq	r9,zero,113f0 <__ledf2+0xa0>
   113c0:	0013883a 	mov	r9,zero
   113c4:	39c03fcc 	andi	r7,r7,255
   113c8:	48000826 	beq	r9,zero,113ec <__ledf2+0x9c>
   113cc:	38001126 	beq	r7,zero,11414 <__ledf2+0xc4>
   113d0:	00800044 	movi	r2,1
   113d4:	f800283a 	ret
   113d8:	30d2b03a 	or	r9,r6,r3
   113dc:	483fea26 	beq	r9,zero,11388 <__ledf2+0x38>
   113e0:	00800084 	movi	r2,2
   113e4:	f800283a 	ret
   113e8:	39c03fcc 	andi	r7,r7,255
   113ec:	39400726 	beq	r7,r5,1140c <__ledf2+0xbc>
   113f0:	2800081e 	bne	r5,zero,11414 <__ledf2+0xc4>
   113f4:	00800044 	movi	r2,1
   113f8:	f800283a 	ret
   113fc:	2292b03a 	or	r9,r4,r10
   11400:	483fdf26 	beq	r9,zero,11380 <__ledf2+0x30>
   11404:	00800084 	movi	r2,2
   11408:	f800283a 	ret
   1140c:	4080030e 	bge	r8,r2,1141c <__ledf2+0xcc>
   11410:	383fef26 	beq	r7,zero,113d0 <__ledf2+0x80>
   11414:	00bfffc4 	movi	r2,-1
   11418:	f800283a 	ret
   1141c:	123feb16 	blt	r2,r8,113cc <__ledf2+0x7c>
   11420:	1abff336 	bltu	r3,r10,113f0 <__ledf2+0xa0>
   11424:	50c00326 	beq	r10,r3,11434 <__ledf2+0xe4>
   11428:	50c0042e 	bgeu	r10,r3,1143c <__ledf2+0xec>
   1142c:	283fe81e 	bne	r5,zero,113d0 <__ledf2+0x80>
   11430:	003ff806 	br	11414 <__ledf2+0xc4>
   11434:	313fee36 	bltu	r6,r4,113f0 <__ledf2+0xa0>
   11438:	21bffc36 	bltu	r4,r6,1142c <__ledf2+0xdc>
   1143c:	0005883a 	mov	r2,zero
   11440:	f800283a 	ret

00011444 <__muldf3>:
   11444:	defff304 	addi	sp,sp,-52
   11448:	2804d53a 	srli	r2,r5,20
   1144c:	dd800915 	stw	r22,36(sp)
   11450:	282cd7fa 	srli	r22,r5,31
   11454:	dc000315 	stw	r16,12(sp)
   11458:	04000434 	movhi	r16,16
   1145c:	dd400815 	stw	r21,32(sp)
   11460:	dc800515 	stw	r18,20(sp)
   11464:	843fffc4 	addi	r16,r16,-1
   11468:	dfc00c15 	stw	ra,48(sp)
   1146c:	df000b15 	stw	fp,44(sp)
   11470:	ddc00a15 	stw	r23,40(sp)
   11474:	dd000715 	stw	r20,28(sp)
   11478:	dcc00615 	stw	r19,24(sp)
   1147c:	dc400415 	stw	r17,16(sp)
   11480:	1481ffcc 	andi	r18,r2,2047
   11484:	2c20703a 	and	r16,r5,r16
   11488:	b02b883a 	mov	r21,r22
   1148c:	b2403fcc 	andi	r9,r22,255
   11490:	90006026 	beq	r18,zero,11614 <__muldf3+0x1d0>
   11494:	0081ffc4 	movi	r2,2047
   11498:	2029883a 	mov	r20,r4
   1149c:	90803626 	beq	r18,r2,11578 <__muldf3+0x134>
   114a0:	80800434 	orhi	r2,r16,16
   114a4:	100490fa 	slli	r2,r2,3
   114a8:	2020d77a 	srli	r16,r4,29
   114ac:	202890fa 	slli	r20,r4,3
   114b0:	94bf0044 	addi	r18,r18,-1023
   114b4:	80a0b03a 	or	r16,r16,r2
   114b8:	0027883a 	mov	r19,zero
   114bc:	0039883a 	mov	fp,zero
   114c0:	3804d53a 	srli	r2,r7,20
   114c4:	382ed7fa 	srli	r23,r7,31
   114c8:	04400434 	movhi	r17,16
   114cc:	8c7fffc4 	addi	r17,r17,-1
   114d0:	1081ffcc 	andi	r2,r2,2047
   114d4:	3011883a 	mov	r8,r6
   114d8:	3c62703a 	and	r17,r7,r17
   114dc:	ba803fcc 	andi	r10,r23,255
   114e0:	10006d26 	beq	r2,zero,11698 <__muldf3+0x254>
   114e4:	00c1ffc4 	movi	r3,2047
   114e8:	10c06526 	beq	r2,r3,11680 <__muldf3+0x23c>
   114ec:	88c00434 	orhi	r3,r17,16
   114f0:	180690fa 	slli	r3,r3,3
   114f4:	3022d77a 	srli	r17,r6,29
   114f8:	301090fa 	slli	r8,r6,3
   114fc:	10bf0044 	addi	r2,r2,-1023
   11500:	88e2b03a 	or	r17,r17,r3
   11504:	000b883a 	mov	r5,zero
   11508:	9085883a 	add	r2,r18,r2
   1150c:	2cc8b03a 	or	r4,r5,r19
   11510:	00c003c4 	movi	r3,15
   11514:	bdacf03a 	xor	r22,r23,r22
   11518:	12c00044 	addi	r11,r2,1
   1151c:	19009936 	bltu	r3,r4,11784 <__muldf3+0x340>
   11520:	200890ba 	slli	r4,r4,2
   11524:	00c00074 	movhi	r3,1
   11528:	18c54e04 	addi	r3,r3,5432
   1152c:	20c9883a 	add	r4,r4,r3
   11530:	20c00017 	ldw	r3,0(r4)
   11534:	1800683a 	jmp	r3
   11538:	00011784 	movi	zero,1118
   1153c:	00011598 	cmpnei	zero,zero,1110
   11540:	00011598 	cmpnei	zero,zero,1110
   11544:	00011594 	movui	zero,1110
   11548:	00011760 	cmpeqi	zero,zero,1117
   1154c:	00011760 	cmpeqi	zero,zero,1117
   11550:	00011748 	cmpgei	zero,zero,1117
   11554:	00011594 	movui	zero,1110
   11558:	00011760 	cmpeqi	zero,zero,1117
   1155c:	00011748 	cmpgei	zero,zero,1117
   11560:	00011760 	cmpeqi	zero,zero,1117
   11564:	00011594 	movui	zero,1110
   11568:	00011770 	cmpltui	zero,zero,1117
   1156c:	00011770 	cmpltui	zero,zero,1117
   11570:	00011770 	cmpltui	zero,zero,1117
   11574:	0001198c 	andi	zero,zero,1126
   11578:	2404b03a 	or	r2,r4,r16
   1157c:	10006f1e 	bne	r2,zero,1173c <__muldf3+0x2f8>
   11580:	04c00204 	movi	r19,8
   11584:	0021883a 	mov	r16,zero
   11588:	0029883a 	mov	r20,zero
   1158c:	07000084 	movi	fp,2
   11590:	003fcb06 	br	114c0 <__muldf3+0x7c>
   11594:	502d883a 	mov	r22,r10
   11598:	00800084 	movi	r2,2
   1159c:	28805726 	beq	r5,r2,116fc <__muldf3+0x2b8>
   115a0:	008000c4 	movi	r2,3
   115a4:	28816626 	beq	r5,r2,11b40 <__muldf3+0x6fc>
   115a8:	00800044 	movi	r2,1
   115ac:	2881411e 	bne	r5,r2,11ab4 <__muldf3+0x670>
   115b0:	b02b883a 	mov	r21,r22
   115b4:	0005883a 	mov	r2,zero
   115b8:	000b883a 	mov	r5,zero
   115bc:	0029883a 	mov	r20,zero
   115c0:	1004953a 	slli	r2,r2,20
   115c4:	a8c03fcc 	andi	r3,r21,255
   115c8:	04400434 	movhi	r17,16
   115cc:	8c7fffc4 	addi	r17,r17,-1
   115d0:	180697fa 	slli	r3,r3,31
   115d4:	2c4a703a 	and	r5,r5,r17
   115d8:	288ab03a 	or	r5,r5,r2
   115dc:	28c6b03a 	or	r3,r5,r3
   115e0:	a005883a 	mov	r2,r20
   115e4:	dfc00c17 	ldw	ra,48(sp)
   115e8:	df000b17 	ldw	fp,44(sp)
   115ec:	ddc00a17 	ldw	r23,40(sp)
   115f0:	dd800917 	ldw	r22,36(sp)
   115f4:	dd400817 	ldw	r21,32(sp)
   115f8:	dd000717 	ldw	r20,28(sp)
   115fc:	dcc00617 	ldw	r19,24(sp)
   11600:	dc800517 	ldw	r18,20(sp)
   11604:	dc400417 	ldw	r17,16(sp)
   11608:	dc000317 	ldw	r16,12(sp)
   1160c:	dec00d04 	addi	sp,sp,52
   11610:	f800283a 	ret
   11614:	2404b03a 	or	r2,r4,r16
   11618:	2027883a 	mov	r19,r4
   1161c:	10004226 	beq	r2,zero,11728 <__muldf3+0x2e4>
   11620:	8000fc26 	beq	r16,zero,11a14 <__muldf3+0x5d0>
   11624:	8009883a 	mov	r4,r16
   11628:	d9800215 	stw	r6,8(sp)
   1162c:	d9c00015 	stw	r7,0(sp)
   11630:	da400115 	stw	r9,4(sp)
   11634:	001265c0 	call	1265c <__clzsi2>
   11638:	d9800217 	ldw	r6,8(sp)
   1163c:	d9c00017 	ldw	r7,0(sp)
   11640:	da400117 	ldw	r9,4(sp)
   11644:	113ffd44 	addi	r4,r2,-11
   11648:	00c00704 	movi	r3,28
   1164c:	1900ed16 	blt	r3,r4,11a04 <__muldf3+0x5c0>
   11650:	00c00744 	movi	r3,29
   11654:	147ffe04 	addi	r17,r2,-8
   11658:	1907c83a 	sub	r3,r3,r4
   1165c:	8460983a 	sll	r16,r16,r17
   11660:	98c6d83a 	srl	r3,r19,r3
   11664:	9c68983a 	sll	r20,r19,r17
   11668:	1c20b03a 	or	r16,r3,r16
   1166c:	1080fcc4 	addi	r2,r2,1011
   11670:	00a5c83a 	sub	r18,zero,r2
   11674:	0027883a 	mov	r19,zero
   11678:	0039883a 	mov	fp,zero
   1167c:	003f9006 	br	114c0 <__muldf3+0x7c>
   11680:	3446b03a 	or	r3,r6,r17
   11684:	1800261e 	bne	r3,zero,11720 <__muldf3+0x2dc>
   11688:	0023883a 	mov	r17,zero
   1168c:	0011883a 	mov	r8,zero
   11690:	01400084 	movi	r5,2
   11694:	003f9c06 	br	11508 <__muldf3+0xc4>
   11698:	3446b03a 	or	r3,r6,r17
   1169c:	18001c26 	beq	r3,zero,11710 <__muldf3+0x2cc>
   116a0:	8800ce26 	beq	r17,zero,119dc <__muldf3+0x598>
   116a4:	8809883a 	mov	r4,r17
   116a8:	d9800215 	stw	r6,8(sp)
   116ac:	da400115 	stw	r9,4(sp)
   116b0:	da800015 	stw	r10,0(sp)
   116b4:	001265c0 	call	1265c <__clzsi2>
   116b8:	d9800217 	ldw	r6,8(sp)
   116bc:	da400117 	ldw	r9,4(sp)
   116c0:	da800017 	ldw	r10,0(sp)
   116c4:	113ffd44 	addi	r4,r2,-11
   116c8:	00c00704 	movi	r3,28
   116cc:	1900bf16 	blt	r3,r4,119cc <__muldf3+0x588>
   116d0:	00c00744 	movi	r3,29
   116d4:	123ffe04 	addi	r8,r2,-8
   116d8:	1907c83a 	sub	r3,r3,r4
   116dc:	8a22983a 	sll	r17,r17,r8
   116e0:	30c6d83a 	srl	r3,r6,r3
   116e4:	3210983a 	sll	r8,r6,r8
   116e8:	1c62b03a 	or	r17,r3,r17
   116ec:	1080fcc4 	addi	r2,r2,1011
   116f0:	0085c83a 	sub	r2,zero,r2
   116f4:	000b883a 	mov	r5,zero
   116f8:	003f8306 	br	11508 <__muldf3+0xc4>
   116fc:	b02b883a 	mov	r21,r22
   11700:	0081ffc4 	movi	r2,2047
   11704:	000b883a 	mov	r5,zero
   11708:	0029883a 	mov	r20,zero
   1170c:	003fac06 	br	115c0 <__muldf3+0x17c>
   11710:	0023883a 	mov	r17,zero
   11714:	0011883a 	mov	r8,zero
   11718:	01400044 	movi	r5,1
   1171c:	003f7a06 	br	11508 <__muldf3+0xc4>
   11720:	014000c4 	movi	r5,3
   11724:	003f7806 	br	11508 <__muldf3+0xc4>
   11728:	04c00104 	movi	r19,4
   1172c:	0021883a 	mov	r16,zero
   11730:	0029883a 	mov	r20,zero
   11734:	07000044 	movi	fp,1
   11738:	003f6106 	br	114c0 <__muldf3+0x7c>
   1173c:	04c00304 	movi	r19,12
   11740:	070000c4 	movi	fp,3
   11744:	003f5e06 	br	114c0 <__muldf3+0x7c>
   11748:	01400434 	movhi	r5,16
   1174c:	002b883a 	mov	r21,zero
   11750:	297fffc4 	addi	r5,r5,-1
   11754:	053fffc4 	movi	r20,-1
   11758:	0081ffc4 	movi	r2,2047
   1175c:	003f9806 	br	115c0 <__muldf3+0x17c>
   11760:	8023883a 	mov	r17,r16
   11764:	a011883a 	mov	r8,r20
   11768:	e00b883a 	mov	r5,fp
   1176c:	003f8a06 	br	11598 <__muldf3+0x154>
   11770:	8023883a 	mov	r17,r16
   11774:	a011883a 	mov	r8,r20
   11778:	482d883a 	mov	r22,r9
   1177c:	e00b883a 	mov	r5,fp
   11780:	003f8506 	br	11598 <__muldf3+0x154>
   11784:	a00ad43a 	srli	r5,r20,16
   11788:	401ad43a 	srli	r13,r8,16
   1178c:	a53fffcc 	andi	r20,r20,65535
   11790:	423fffcc 	andi	r8,r8,65535
   11794:	4519383a 	mul	r12,r8,r20
   11798:	4147383a 	mul	r3,r8,r5
   1179c:	6d09383a 	mul	r4,r13,r20
   117a0:	600cd43a 	srli	r6,r12,16
   117a4:	2b5d383a 	mul	r14,r5,r13
   117a8:	20c9883a 	add	r4,r4,r3
   117ac:	310d883a 	add	r6,r6,r4
   117b0:	30c0022e 	bgeu	r6,r3,117bc <__muldf3+0x378>
   117b4:	00c00074 	movhi	r3,1
   117b8:	70dd883a 	add	r14,r14,r3
   117bc:	8826d43a 	srli	r19,r17,16
   117c0:	8bffffcc 	andi	r15,r17,65535
   117c4:	7d23383a 	mul	r17,r15,r20
   117c8:	7949383a 	mul	r4,r15,r5
   117cc:	9d29383a 	mul	r20,r19,r20
   117d0:	8814d43a 	srli	r10,r17,16
   117d4:	3012943a 	slli	r9,r6,16
   117d8:	a129883a 	add	r20,r20,r4
   117dc:	633fffcc 	andi	r12,r12,65535
   117e0:	5515883a 	add	r10,r10,r20
   117e4:	3006d43a 	srli	r3,r6,16
   117e8:	4b13883a 	add	r9,r9,r12
   117ec:	2ccb383a 	mul	r5,r5,r19
   117f0:	5100022e 	bgeu	r10,r4,117fc <__muldf3+0x3b8>
   117f4:	01000074 	movhi	r4,1
   117f8:	290b883a 	add	r5,r5,r4
   117fc:	802ad43a 	srli	r21,r16,16
   11800:	843fffcc 	andi	r16,r16,65535
   11804:	440d383a 	mul	r6,r8,r16
   11808:	4565383a 	mul	r18,r8,r21
   1180c:	8349383a 	mul	r4,r16,r13
   11810:	500e943a 	slli	r7,r10,16
   11814:	3010d43a 	srli	r8,r6,16
   11818:	5028d43a 	srli	r20,r10,16
   1181c:	2489883a 	add	r4,r4,r18
   11820:	8abfffcc 	andi	r10,r17,65535
   11824:	3a95883a 	add	r10,r7,r10
   11828:	4119883a 	add	r12,r8,r4
   1182c:	a169883a 	add	r20,r20,r5
   11830:	1a87883a 	add	r3,r3,r10
   11834:	6d5b383a 	mul	r13,r13,r21
   11838:	6480022e 	bgeu	r12,r18,11844 <__muldf3+0x400>
   1183c:	01000074 	movhi	r4,1
   11840:	691b883a 	add	r13,r13,r4
   11844:	7c25383a 	mul	r18,r15,r16
   11848:	7d4b383a 	mul	r5,r15,r21
   1184c:	84cf383a 	mul	r7,r16,r19
   11850:	901ed43a 	srli	r15,r18,16
   11854:	6008d43a 	srli	r4,r12,16
   11858:	6010943a 	slli	r8,r12,16
   1185c:	394f883a 	add	r7,r7,r5
   11860:	333fffcc 	andi	r12,r6,65535
   11864:	79df883a 	add	r15,r15,r7
   11868:	235b883a 	add	r13,r4,r13
   1186c:	9d63383a 	mul	r17,r19,r21
   11870:	4309883a 	add	r4,r8,r12
   11874:	7940022e 	bgeu	r15,r5,11880 <__muldf3+0x43c>
   11878:	01400074 	movhi	r5,1
   1187c:	8963883a 	add	r17,r17,r5
   11880:	780a943a 	slli	r5,r15,16
   11884:	91bfffcc 	andi	r6,r18,65535
   11888:	70c7883a 	add	r3,r14,r3
   1188c:	298d883a 	add	r6,r5,r6
   11890:	1a8f803a 	cmpltu	r7,r3,r10
   11894:	350b883a 	add	r5,r6,r20
   11898:	20c7883a 	add	r3,r4,r3
   1189c:	3955883a 	add	r10,r7,r5
   118a0:	1909803a 	cmpltu	r4,r3,r4
   118a4:	6a91883a 	add	r8,r13,r10
   118a8:	780cd43a 	srli	r6,r15,16
   118ac:	2219883a 	add	r12,r4,r8
   118b0:	2d0b803a 	cmpltu	r5,r5,r20
   118b4:	51cf803a 	cmpltu	r7,r10,r7
   118b8:	29ceb03a 	or	r7,r5,r7
   118bc:	4351803a 	cmpltu	r8,r8,r13
   118c0:	610b803a 	cmpltu	r5,r12,r4
   118c4:	4148b03a 	or	r4,r8,r5
   118c8:	398f883a 	add	r7,r7,r6
   118cc:	3909883a 	add	r4,r7,r4
   118d0:	1810927a 	slli	r8,r3,9
   118d4:	2449883a 	add	r4,r4,r17
   118d8:	2008927a 	slli	r4,r4,9
   118dc:	6022d5fa 	srli	r17,r12,23
   118e0:	1806d5fa 	srli	r3,r3,23
   118e4:	4252b03a 	or	r9,r8,r9
   118e8:	600a927a 	slli	r5,r12,9
   118ec:	4810c03a 	cmpne	r8,r9,zero
   118f0:	2462b03a 	or	r17,r4,r17
   118f4:	40c6b03a 	or	r3,r8,r3
   118f8:	8900402c 	andhi	r4,r17,256
   118fc:	1950b03a 	or	r8,r3,r5
   11900:	20000726 	beq	r4,zero,11920 <__muldf3+0x4dc>
   11904:	4006d07a 	srli	r3,r8,1
   11908:	880497fa 	slli	r2,r17,31
   1190c:	4200004c 	andi	r8,r8,1
   11910:	8822d07a 	srli	r17,r17,1
   11914:	1a10b03a 	or	r8,r3,r8
   11918:	1210b03a 	or	r8,r2,r8
   1191c:	5805883a 	mov	r2,r11
   11920:	1140ffc4 	addi	r5,r2,1023
   11924:	0140440e 	bge	zero,r5,11a38 <__muldf3+0x5f4>
   11928:	40c001cc 	andi	r3,r8,7
   1192c:	18000726 	beq	r3,zero,1194c <__muldf3+0x508>
   11930:	40c003cc 	andi	r3,r8,15
   11934:	01000104 	movi	r4,4
   11938:	19000426 	beq	r3,r4,1194c <__muldf3+0x508>
   1193c:	4107883a 	add	r3,r8,r4
   11940:	1a11803a 	cmpltu	r8,r3,r8
   11944:	8a23883a 	add	r17,r17,r8
   11948:	1811883a 	mov	r8,r3
   1194c:	88c0402c 	andhi	r3,r17,256
   11950:	18000426 	beq	r3,zero,11964 <__muldf3+0x520>
   11954:	11410004 	addi	r5,r2,1024
   11958:	00bfc034 	movhi	r2,65280
   1195c:	10bfffc4 	addi	r2,r2,-1
   11960:	88a2703a 	and	r17,r17,r2
   11964:	0081ff84 	movi	r2,2046
   11968:	117f6416 	blt	r2,r5,116fc <__muldf3+0x2b8>
   1196c:	8828977a 	slli	r20,r17,29
   11970:	4010d0fa 	srli	r8,r8,3
   11974:	8822927a 	slli	r17,r17,9
   11978:	2881ffcc 	andi	r2,r5,2047
   1197c:	a228b03a 	or	r20,r20,r8
   11980:	880ad33a 	srli	r5,r17,12
   11984:	b02b883a 	mov	r21,r22
   11988:	003f0d06 	br	115c0 <__muldf3+0x17c>
   1198c:	8080022c 	andhi	r2,r16,8
   11990:	10000926 	beq	r2,zero,119b8 <__muldf3+0x574>
   11994:	8880022c 	andhi	r2,r17,8
   11998:	1000071e 	bne	r2,zero,119b8 <__muldf3+0x574>
   1199c:	00800434 	movhi	r2,16
   119a0:	89400234 	orhi	r5,r17,8
   119a4:	10bfffc4 	addi	r2,r2,-1
   119a8:	b82b883a 	mov	r21,r23
   119ac:	288a703a 	and	r5,r5,r2
   119b0:	4029883a 	mov	r20,r8
   119b4:	003f6806 	br	11758 <__muldf3+0x314>
   119b8:	00800434 	movhi	r2,16
   119bc:	81400234 	orhi	r5,r16,8
   119c0:	10bfffc4 	addi	r2,r2,-1
   119c4:	288a703a 	and	r5,r5,r2
   119c8:	003f6306 	br	11758 <__muldf3+0x314>
   119cc:	147ff604 	addi	r17,r2,-40
   119d0:	3462983a 	sll	r17,r6,r17
   119d4:	0011883a 	mov	r8,zero
   119d8:	003f4406 	br	116ec <__muldf3+0x2a8>
   119dc:	3009883a 	mov	r4,r6
   119e0:	d9800215 	stw	r6,8(sp)
   119e4:	da400115 	stw	r9,4(sp)
   119e8:	da800015 	stw	r10,0(sp)
   119ec:	001265c0 	call	1265c <__clzsi2>
   119f0:	10800804 	addi	r2,r2,32
   119f4:	da800017 	ldw	r10,0(sp)
   119f8:	da400117 	ldw	r9,4(sp)
   119fc:	d9800217 	ldw	r6,8(sp)
   11a00:	003f3006 	br	116c4 <__muldf3+0x280>
   11a04:	143ff604 	addi	r16,r2,-40
   11a08:	9c20983a 	sll	r16,r19,r16
   11a0c:	0029883a 	mov	r20,zero
   11a10:	003f1606 	br	1166c <__muldf3+0x228>
   11a14:	d9800215 	stw	r6,8(sp)
   11a18:	d9c00015 	stw	r7,0(sp)
   11a1c:	da400115 	stw	r9,4(sp)
   11a20:	001265c0 	call	1265c <__clzsi2>
   11a24:	10800804 	addi	r2,r2,32
   11a28:	da400117 	ldw	r9,4(sp)
   11a2c:	d9c00017 	ldw	r7,0(sp)
   11a30:	d9800217 	ldw	r6,8(sp)
   11a34:	003f0306 	br	11644 <__muldf3+0x200>
   11a38:	00c00044 	movi	r3,1
   11a3c:	1947c83a 	sub	r3,r3,r5
   11a40:	00800e04 	movi	r2,56
   11a44:	10feda16 	blt	r2,r3,115b0 <__muldf3+0x16c>
   11a48:	008007c4 	movi	r2,31
   11a4c:	10c01b16 	blt	r2,r3,11abc <__muldf3+0x678>
   11a50:	00800804 	movi	r2,32
   11a54:	10c5c83a 	sub	r2,r2,r3
   11a58:	888a983a 	sll	r5,r17,r2
   11a5c:	40c8d83a 	srl	r4,r8,r3
   11a60:	4084983a 	sll	r2,r8,r2
   11a64:	88e2d83a 	srl	r17,r17,r3
   11a68:	2906b03a 	or	r3,r5,r4
   11a6c:	1004c03a 	cmpne	r2,r2,zero
   11a70:	1886b03a 	or	r3,r3,r2
   11a74:	188001cc 	andi	r2,r3,7
   11a78:	10000726 	beq	r2,zero,11a98 <__muldf3+0x654>
   11a7c:	188003cc 	andi	r2,r3,15
   11a80:	01000104 	movi	r4,4
   11a84:	11000426 	beq	r2,r4,11a98 <__muldf3+0x654>
   11a88:	1805883a 	mov	r2,r3
   11a8c:	10c00104 	addi	r3,r2,4
   11a90:	1885803a 	cmpltu	r2,r3,r2
   11a94:	88a3883a 	add	r17,r17,r2
   11a98:	8880202c 	andhi	r2,r17,128
   11a9c:	10001c26 	beq	r2,zero,11b10 <__muldf3+0x6cc>
   11aa0:	b02b883a 	mov	r21,r22
   11aa4:	00800044 	movi	r2,1
   11aa8:	000b883a 	mov	r5,zero
   11aac:	0029883a 	mov	r20,zero
   11ab0:	003ec306 	br	115c0 <__muldf3+0x17c>
   11ab4:	5805883a 	mov	r2,r11
   11ab8:	003f9906 	br	11920 <__muldf3+0x4dc>
   11abc:	00bff844 	movi	r2,-31
   11ac0:	1145c83a 	sub	r2,r2,r5
   11ac4:	8888d83a 	srl	r4,r17,r2
   11ac8:	00800804 	movi	r2,32
   11acc:	18801a26 	beq	r3,r2,11b38 <__muldf3+0x6f4>
   11ad0:	00801004 	movi	r2,64
   11ad4:	10c5c83a 	sub	r2,r2,r3
   11ad8:	8884983a 	sll	r2,r17,r2
   11adc:	1204b03a 	or	r2,r2,r8
   11ae0:	1004c03a 	cmpne	r2,r2,zero
   11ae4:	2084b03a 	or	r2,r4,r2
   11ae8:	144001cc 	andi	r17,r2,7
   11aec:	88000d1e 	bne	r17,zero,11b24 <__muldf3+0x6e0>
   11af0:	000b883a 	mov	r5,zero
   11af4:	1028d0fa 	srli	r20,r2,3
   11af8:	b02b883a 	mov	r21,r22
   11afc:	0005883a 	mov	r2,zero
   11b00:	a468b03a 	or	r20,r20,r17
   11b04:	003eae06 	br	115c0 <__muldf3+0x17c>
   11b08:	1007883a 	mov	r3,r2
   11b0c:	0023883a 	mov	r17,zero
   11b10:	880a927a 	slli	r5,r17,9
   11b14:	1805883a 	mov	r2,r3
   11b18:	8822977a 	slli	r17,r17,29
   11b1c:	280ad33a 	srli	r5,r5,12
   11b20:	003ff406 	br	11af4 <__muldf3+0x6b0>
   11b24:	10c003cc 	andi	r3,r2,15
   11b28:	01000104 	movi	r4,4
   11b2c:	193ff626 	beq	r3,r4,11b08 <__muldf3+0x6c4>
   11b30:	0023883a 	mov	r17,zero
   11b34:	003fd506 	br	11a8c <__muldf3+0x648>
   11b38:	0005883a 	mov	r2,zero
   11b3c:	003fe706 	br	11adc <__muldf3+0x698>
   11b40:	00800434 	movhi	r2,16
   11b44:	89400234 	orhi	r5,r17,8
   11b48:	10bfffc4 	addi	r2,r2,-1
   11b4c:	b02b883a 	mov	r21,r22
   11b50:	288a703a 	and	r5,r5,r2
   11b54:	4029883a 	mov	r20,r8
   11b58:	003eff06 	br	11758 <__muldf3+0x314>

00011b5c <__subdf3>:
   11b5c:	02000434 	movhi	r8,16
   11b60:	423fffc4 	addi	r8,r8,-1
   11b64:	defffb04 	addi	sp,sp,-20
   11b68:	2a14703a 	and	r10,r5,r8
   11b6c:	3812d53a 	srli	r9,r7,20
   11b70:	3a10703a 	and	r8,r7,r8
   11b74:	2006d77a 	srli	r3,r4,29
   11b78:	3004d77a 	srli	r2,r6,29
   11b7c:	dc000015 	stw	r16,0(sp)
   11b80:	501490fa 	slli	r10,r10,3
   11b84:	2820d53a 	srli	r16,r5,20
   11b88:	401090fa 	slli	r8,r8,3
   11b8c:	dc800215 	stw	r18,8(sp)
   11b90:	dc400115 	stw	r17,4(sp)
   11b94:	dfc00415 	stw	ra,16(sp)
   11b98:	202290fa 	slli	r17,r4,3
   11b9c:	dcc00315 	stw	r19,12(sp)
   11ba0:	4a41ffcc 	andi	r9,r9,2047
   11ba4:	0101ffc4 	movi	r4,2047
   11ba8:	2824d7fa 	srli	r18,r5,31
   11bac:	8401ffcc 	andi	r16,r16,2047
   11bb0:	50c6b03a 	or	r3,r10,r3
   11bb4:	380ed7fa 	srli	r7,r7,31
   11bb8:	408ab03a 	or	r5,r8,r2
   11bbc:	300c90fa 	slli	r6,r6,3
   11bc0:	49009626 	beq	r9,r4,11e1c <__subdf3+0x2c0>
   11bc4:	39c0005c 	xori	r7,r7,1
   11bc8:	8245c83a 	sub	r2,r16,r9
   11bcc:	3c807426 	beq	r7,r18,11da0 <__subdf3+0x244>
   11bd0:	0080af0e 	bge	zero,r2,11e90 <__subdf3+0x334>
   11bd4:	48002a1e 	bne	r9,zero,11c80 <__subdf3+0x124>
   11bd8:	2988b03a 	or	r4,r5,r6
   11bdc:	20009a1e 	bne	r4,zero,11e48 <__subdf3+0x2ec>
   11be0:	888001cc 	andi	r2,r17,7
   11be4:	10000726 	beq	r2,zero,11c04 <__subdf3+0xa8>
   11be8:	888003cc 	andi	r2,r17,15
   11bec:	01000104 	movi	r4,4
   11bf0:	11000426 	beq	r2,r4,11c04 <__subdf3+0xa8>
   11bf4:	890b883a 	add	r5,r17,r4
   11bf8:	2c63803a 	cmpltu	r17,r5,r17
   11bfc:	1c47883a 	add	r3,r3,r17
   11c00:	2823883a 	mov	r17,r5
   11c04:	1880202c 	andhi	r2,r3,128
   11c08:	10005926 	beq	r2,zero,11d70 <__subdf3+0x214>
   11c0c:	84000044 	addi	r16,r16,1
   11c10:	0081ffc4 	movi	r2,2047
   11c14:	8080be26 	beq	r16,r2,11f10 <__subdf3+0x3b4>
   11c18:	017fe034 	movhi	r5,65408
   11c1c:	297fffc4 	addi	r5,r5,-1
   11c20:	1946703a 	and	r3,r3,r5
   11c24:	1804977a 	slli	r2,r3,29
   11c28:	1806927a 	slli	r3,r3,9
   11c2c:	8822d0fa 	srli	r17,r17,3
   11c30:	8401ffcc 	andi	r16,r16,2047
   11c34:	180ad33a 	srli	r5,r3,12
   11c38:	9100004c 	andi	r4,r18,1
   11c3c:	1444b03a 	or	r2,r2,r17
   11c40:	80c1ffcc 	andi	r3,r16,2047
   11c44:	1820953a 	slli	r16,r3,20
   11c48:	20c03fcc 	andi	r3,r4,255
   11c4c:	180897fa 	slli	r4,r3,31
   11c50:	00c00434 	movhi	r3,16
   11c54:	18ffffc4 	addi	r3,r3,-1
   11c58:	28c6703a 	and	r3,r5,r3
   11c5c:	1c06b03a 	or	r3,r3,r16
   11c60:	1906b03a 	or	r3,r3,r4
   11c64:	dfc00417 	ldw	ra,16(sp)
   11c68:	dcc00317 	ldw	r19,12(sp)
   11c6c:	dc800217 	ldw	r18,8(sp)
   11c70:	dc400117 	ldw	r17,4(sp)
   11c74:	dc000017 	ldw	r16,0(sp)
   11c78:	dec00504 	addi	sp,sp,20
   11c7c:	f800283a 	ret
   11c80:	0101ffc4 	movi	r4,2047
   11c84:	813fd626 	beq	r16,r4,11be0 <__subdf3+0x84>
   11c88:	29402034 	orhi	r5,r5,128
   11c8c:	01000e04 	movi	r4,56
   11c90:	2080a316 	blt	r4,r2,11f20 <__subdf3+0x3c4>
   11c94:	010007c4 	movi	r4,31
   11c98:	2080c616 	blt	r4,r2,11fb4 <__subdf3+0x458>
   11c9c:	01000804 	movi	r4,32
   11ca0:	2089c83a 	sub	r4,r4,r2
   11ca4:	2910983a 	sll	r8,r5,r4
   11ca8:	308ed83a 	srl	r7,r6,r2
   11cac:	3108983a 	sll	r4,r6,r4
   11cb0:	2884d83a 	srl	r2,r5,r2
   11cb4:	41ccb03a 	or	r6,r8,r7
   11cb8:	2008c03a 	cmpne	r4,r4,zero
   11cbc:	310cb03a 	or	r6,r6,r4
   11cc0:	898dc83a 	sub	r6,r17,r6
   11cc4:	89a3803a 	cmpltu	r17,r17,r6
   11cc8:	1887c83a 	sub	r3,r3,r2
   11ccc:	1c47c83a 	sub	r3,r3,r17
   11cd0:	3023883a 	mov	r17,r6
   11cd4:	1880202c 	andhi	r2,r3,128
   11cd8:	10002326 	beq	r2,zero,11d68 <__subdf3+0x20c>
   11cdc:	04c02034 	movhi	r19,128
   11ce0:	9cffffc4 	addi	r19,r19,-1
   11ce4:	1ce6703a 	and	r19,r3,r19
   11ce8:	98007a26 	beq	r19,zero,11ed4 <__subdf3+0x378>
   11cec:	9809883a 	mov	r4,r19
   11cf0:	001265c0 	call	1265c <__clzsi2>
   11cf4:	113ffe04 	addi	r4,r2,-8
   11cf8:	00c007c4 	movi	r3,31
   11cfc:	19007b16 	blt	r3,r4,11eec <__subdf3+0x390>
   11d00:	00800804 	movi	r2,32
   11d04:	1105c83a 	sub	r2,r2,r4
   11d08:	8884d83a 	srl	r2,r17,r2
   11d0c:	9906983a 	sll	r3,r19,r4
   11d10:	8922983a 	sll	r17,r17,r4
   11d14:	10c4b03a 	or	r2,r2,r3
   11d18:	24007816 	blt	r4,r16,11efc <__subdf3+0x3a0>
   11d1c:	2421c83a 	sub	r16,r4,r16
   11d20:	80c00044 	addi	r3,r16,1
   11d24:	010007c4 	movi	r4,31
   11d28:	20c09516 	blt	r4,r3,11f80 <__subdf3+0x424>
   11d2c:	01400804 	movi	r5,32
   11d30:	28cbc83a 	sub	r5,r5,r3
   11d34:	88c8d83a 	srl	r4,r17,r3
   11d38:	8962983a 	sll	r17,r17,r5
   11d3c:	114a983a 	sll	r5,r2,r5
   11d40:	10c6d83a 	srl	r3,r2,r3
   11d44:	8804c03a 	cmpne	r2,r17,zero
   11d48:	290ab03a 	or	r5,r5,r4
   11d4c:	28a2b03a 	or	r17,r5,r2
   11d50:	0021883a 	mov	r16,zero
   11d54:	003fa206 	br	11be0 <__subdf3+0x84>
   11d58:	2090b03a 	or	r8,r4,r2
   11d5c:	40018e26 	beq	r8,zero,12398 <__subdf3+0x83c>
   11d60:	1007883a 	mov	r3,r2
   11d64:	2023883a 	mov	r17,r4
   11d68:	888001cc 	andi	r2,r17,7
   11d6c:	103f9e1e 	bne	r2,zero,11be8 <__subdf3+0x8c>
   11d70:	1804977a 	slli	r2,r3,29
   11d74:	8822d0fa 	srli	r17,r17,3
   11d78:	1810d0fa 	srli	r8,r3,3
   11d7c:	9100004c 	andi	r4,r18,1
   11d80:	1444b03a 	or	r2,r2,r17
   11d84:	00c1ffc4 	movi	r3,2047
   11d88:	80c02826 	beq	r16,r3,11e2c <__subdf3+0x2d0>
   11d8c:	01400434 	movhi	r5,16
   11d90:	297fffc4 	addi	r5,r5,-1
   11d94:	80e0703a 	and	r16,r16,r3
   11d98:	414a703a 	and	r5,r8,r5
   11d9c:	003fa806 	br	11c40 <__subdf3+0xe4>
   11da0:	0080630e 	bge	zero,r2,11f30 <__subdf3+0x3d4>
   11da4:	48003026 	beq	r9,zero,11e68 <__subdf3+0x30c>
   11da8:	0101ffc4 	movi	r4,2047
   11dac:	813f8c26 	beq	r16,r4,11be0 <__subdf3+0x84>
   11db0:	29402034 	orhi	r5,r5,128
   11db4:	01000e04 	movi	r4,56
   11db8:	2080a90e 	bge	r4,r2,12060 <__subdf3+0x504>
   11dbc:	298cb03a 	or	r6,r5,r6
   11dc0:	3012c03a 	cmpne	r9,r6,zero
   11dc4:	0005883a 	mov	r2,zero
   11dc8:	4c53883a 	add	r9,r9,r17
   11dcc:	4c63803a 	cmpltu	r17,r9,r17
   11dd0:	10c7883a 	add	r3,r2,r3
   11dd4:	88c7883a 	add	r3,r17,r3
   11dd8:	4823883a 	mov	r17,r9
   11ddc:	1880202c 	andhi	r2,r3,128
   11de0:	1000d026 	beq	r2,zero,12124 <__subdf3+0x5c8>
   11de4:	84000044 	addi	r16,r16,1
   11de8:	0081ffc4 	movi	r2,2047
   11dec:	8080fe26 	beq	r16,r2,121e8 <__subdf3+0x68c>
   11df0:	00bfe034 	movhi	r2,65408
   11df4:	10bfffc4 	addi	r2,r2,-1
   11df8:	1886703a 	and	r3,r3,r2
   11dfc:	880ad07a 	srli	r5,r17,1
   11e00:	180497fa 	slli	r2,r3,31
   11e04:	8900004c 	andi	r4,r17,1
   11e08:	2922b03a 	or	r17,r5,r4
   11e0c:	1806d07a 	srli	r3,r3,1
   11e10:	1462b03a 	or	r17,r2,r17
   11e14:	3825883a 	mov	r18,r7
   11e18:	003f7106 	br	11be0 <__subdf3+0x84>
   11e1c:	2984b03a 	or	r2,r5,r6
   11e20:	103f6826 	beq	r2,zero,11bc4 <__subdf3+0x68>
   11e24:	39c03fcc 	andi	r7,r7,255
   11e28:	003f6706 	br	11bc8 <__subdf3+0x6c>
   11e2c:	4086b03a 	or	r3,r8,r2
   11e30:	18015226 	beq	r3,zero,1237c <__subdf3+0x820>
   11e34:	00c00434 	movhi	r3,16
   11e38:	41400234 	orhi	r5,r8,8
   11e3c:	18ffffc4 	addi	r3,r3,-1
   11e40:	28ca703a 	and	r5,r5,r3
   11e44:	003f7e06 	br	11c40 <__subdf3+0xe4>
   11e48:	10bfffc4 	addi	r2,r2,-1
   11e4c:	1000491e 	bne	r2,zero,11f74 <__subdf3+0x418>
   11e50:	898fc83a 	sub	r7,r17,r6
   11e54:	89e3803a 	cmpltu	r17,r17,r7
   11e58:	1947c83a 	sub	r3,r3,r5
   11e5c:	1c47c83a 	sub	r3,r3,r17
   11e60:	3823883a 	mov	r17,r7
   11e64:	003f9b06 	br	11cd4 <__subdf3+0x178>
   11e68:	2988b03a 	or	r4,r5,r6
   11e6c:	203f5c26 	beq	r4,zero,11be0 <__subdf3+0x84>
   11e70:	10bfffc4 	addi	r2,r2,-1
   11e74:	1000931e 	bne	r2,zero,120c4 <__subdf3+0x568>
   11e78:	898d883a 	add	r6,r17,r6
   11e7c:	3463803a 	cmpltu	r17,r6,r17
   11e80:	1947883a 	add	r3,r3,r5
   11e84:	88c7883a 	add	r3,r17,r3
   11e88:	3023883a 	mov	r17,r6
   11e8c:	003fd306 	br	11ddc <__subdf3+0x280>
   11e90:	1000541e 	bne	r2,zero,11fe4 <__subdf3+0x488>
   11e94:	80800044 	addi	r2,r16,1
   11e98:	1081ffcc 	andi	r2,r2,2047
   11e9c:	01000044 	movi	r4,1
   11ea0:	2080a20e 	bge	r4,r2,1212c <__subdf3+0x5d0>
   11ea4:	8989c83a 	sub	r4,r17,r6
   11ea8:	8905803a 	cmpltu	r2,r17,r4
   11eac:	1967c83a 	sub	r19,r3,r5
   11eb0:	98a7c83a 	sub	r19,r19,r2
   11eb4:	9880202c 	andhi	r2,r19,128
   11eb8:	10006326 	beq	r2,zero,12048 <__subdf3+0x4ec>
   11ebc:	3463c83a 	sub	r17,r6,r17
   11ec0:	28c7c83a 	sub	r3,r5,r3
   11ec4:	344d803a 	cmpltu	r6,r6,r17
   11ec8:	19a7c83a 	sub	r19,r3,r6
   11ecc:	3825883a 	mov	r18,r7
   11ed0:	983f861e 	bne	r19,zero,11cec <__subdf3+0x190>
   11ed4:	8809883a 	mov	r4,r17
   11ed8:	001265c0 	call	1265c <__clzsi2>
   11edc:	10800804 	addi	r2,r2,32
   11ee0:	113ffe04 	addi	r4,r2,-8
   11ee4:	00c007c4 	movi	r3,31
   11ee8:	193f850e 	bge	r3,r4,11d00 <__subdf3+0x1a4>
   11eec:	10bff604 	addi	r2,r2,-40
   11ef0:	8884983a 	sll	r2,r17,r2
   11ef4:	0023883a 	mov	r17,zero
   11ef8:	243f880e 	bge	r4,r16,11d1c <__subdf3+0x1c0>
   11efc:	00ffe034 	movhi	r3,65408
   11f00:	18ffffc4 	addi	r3,r3,-1
   11f04:	8121c83a 	sub	r16,r16,r4
   11f08:	10c6703a 	and	r3,r2,r3
   11f0c:	003f3406 	br	11be0 <__subdf3+0x84>
   11f10:	9100004c 	andi	r4,r18,1
   11f14:	000b883a 	mov	r5,zero
   11f18:	0005883a 	mov	r2,zero
   11f1c:	003f4806 	br	11c40 <__subdf3+0xe4>
   11f20:	298cb03a 	or	r6,r5,r6
   11f24:	300cc03a 	cmpne	r6,r6,zero
   11f28:	0005883a 	mov	r2,zero
   11f2c:	003f6406 	br	11cc0 <__subdf3+0x164>
   11f30:	10009a1e 	bne	r2,zero,1219c <__subdf3+0x640>
   11f34:	82400044 	addi	r9,r16,1
   11f38:	4881ffcc 	andi	r2,r9,2047
   11f3c:	02800044 	movi	r10,1
   11f40:	5080670e 	bge	r10,r2,120e0 <__subdf3+0x584>
   11f44:	0081ffc4 	movi	r2,2047
   11f48:	4880af26 	beq	r9,r2,12208 <__subdf3+0x6ac>
   11f4c:	898d883a 	add	r6,r17,r6
   11f50:	1945883a 	add	r2,r3,r5
   11f54:	3447803a 	cmpltu	r3,r6,r17
   11f58:	1887883a 	add	r3,r3,r2
   11f5c:	182297fa 	slli	r17,r3,31
   11f60:	300cd07a 	srli	r6,r6,1
   11f64:	1806d07a 	srli	r3,r3,1
   11f68:	4821883a 	mov	r16,r9
   11f6c:	89a2b03a 	or	r17,r17,r6
   11f70:	003f1b06 	br	11be0 <__subdf3+0x84>
   11f74:	0101ffc4 	movi	r4,2047
   11f78:	813f441e 	bne	r16,r4,11c8c <__subdf3+0x130>
   11f7c:	003f1806 	br	11be0 <__subdf3+0x84>
   11f80:	843ff844 	addi	r16,r16,-31
   11f84:	01400804 	movi	r5,32
   11f88:	1408d83a 	srl	r4,r2,r16
   11f8c:	19405026 	beq	r3,r5,120d0 <__subdf3+0x574>
   11f90:	01401004 	movi	r5,64
   11f94:	28c7c83a 	sub	r3,r5,r3
   11f98:	10c4983a 	sll	r2,r2,r3
   11f9c:	88a2b03a 	or	r17,r17,r2
   11fa0:	8822c03a 	cmpne	r17,r17,zero
   11fa4:	2462b03a 	or	r17,r4,r17
   11fa8:	0007883a 	mov	r3,zero
   11fac:	0021883a 	mov	r16,zero
   11fb0:	003f6d06 	br	11d68 <__subdf3+0x20c>
   11fb4:	11fff804 	addi	r7,r2,-32
   11fb8:	01000804 	movi	r4,32
   11fbc:	29ced83a 	srl	r7,r5,r7
   11fc0:	11004526 	beq	r2,r4,120d8 <__subdf3+0x57c>
   11fc4:	01001004 	movi	r4,64
   11fc8:	2089c83a 	sub	r4,r4,r2
   11fcc:	2904983a 	sll	r2,r5,r4
   11fd0:	118cb03a 	or	r6,r2,r6
   11fd4:	300cc03a 	cmpne	r6,r6,zero
   11fd8:	398cb03a 	or	r6,r7,r6
   11fdc:	0005883a 	mov	r2,zero
   11fe0:	003f3706 	br	11cc0 <__subdf3+0x164>
   11fe4:	80002a26 	beq	r16,zero,12090 <__subdf3+0x534>
   11fe8:	0101ffc4 	movi	r4,2047
   11fec:	49006626 	beq	r9,r4,12188 <__subdf3+0x62c>
   11ff0:	0085c83a 	sub	r2,zero,r2
   11ff4:	18c02034 	orhi	r3,r3,128
   11ff8:	01000e04 	movi	r4,56
   11ffc:	20807e16 	blt	r4,r2,121f8 <__subdf3+0x69c>
   12000:	010007c4 	movi	r4,31
   12004:	2080e716 	blt	r4,r2,123a4 <__subdf3+0x848>
   12008:	01000804 	movi	r4,32
   1200c:	2089c83a 	sub	r4,r4,r2
   12010:	1914983a 	sll	r10,r3,r4
   12014:	8890d83a 	srl	r8,r17,r2
   12018:	8908983a 	sll	r4,r17,r4
   1201c:	1884d83a 	srl	r2,r3,r2
   12020:	5222b03a 	or	r17,r10,r8
   12024:	2006c03a 	cmpne	r3,r4,zero
   12028:	88e2b03a 	or	r17,r17,r3
   1202c:	3463c83a 	sub	r17,r6,r17
   12030:	2885c83a 	sub	r2,r5,r2
   12034:	344d803a 	cmpltu	r6,r6,r17
   12038:	1187c83a 	sub	r3,r2,r6
   1203c:	4821883a 	mov	r16,r9
   12040:	3825883a 	mov	r18,r7
   12044:	003f2306 	br	11cd4 <__subdf3+0x178>
   12048:	24d0b03a 	or	r8,r4,r19
   1204c:	40001b1e 	bne	r8,zero,120bc <__subdf3+0x560>
   12050:	0005883a 	mov	r2,zero
   12054:	0009883a 	mov	r4,zero
   12058:	0021883a 	mov	r16,zero
   1205c:	003f4906 	br	11d84 <__subdf3+0x228>
   12060:	010007c4 	movi	r4,31
   12064:	20803a16 	blt	r4,r2,12150 <__subdf3+0x5f4>
   12068:	01000804 	movi	r4,32
   1206c:	2089c83a 	sub	r4,r4,r2
   12070:	2912983a 	sll	r9,r5,r4
   12074:	3090d83a 	srl	r8,r6,r2
   12078:	3108983a 	sll	r4,r6,r4
   1207c:	2884d83a 	srl	r2,r5,r2
   12080:	4a12b03a 	or	r9,r9,r8
   12084:	2008c03a 	cmpne	r4,r4,zero
   12088:	4912b03a 	or	r9,r9,r4
   1208c:	003f4e06 	br	11dc8 <__subdf3+0x26c>
   12090:	1c48b03a 	or	r4,r3,r17
   12094:	20003c26 	beq	r4,zero,12188 <__subdf3+0x62c>
   12098:	0084303a 	nor	r2,zero,r2
   1209c:	1000381e 	bne	r2,zero,12180 <__subdf3+0x624>
   120a0:	3463c83a 	sub	r17,r6,r17
   120a4:	28c5c83a 	sub	r2,r5,r3
   120a8:	344d803a 	cmpltu	r6,r6,r17
   120ac:	1187c83a 	sub	r3,r2,r6
   120b0:	4821883a 	mov	r16,r9
   120b4:	3825883a 	mov	r18,r7
   120b8:	003f0606 	br	11cd4 <__subdf3+0x178>
   120bc:	2023883a 	mov	r17,r4
   120c0:	003f0906 	br	11ce8 <__subdf3+0x18c>
   120c4:	0101ffc4 	movi	r4,2047
   120c8:	813f3a1e 	bne	r16,r4,11db4 <__subdf3+0x258>
   120cc:	003ec406 	br	11be0 <__subdf3+0x84>
   120d0:	0005883a 	mov	r2,zero
   120d4:	003fb106 	br	11f9c <__subdf3+0x440>
   120d8:	0005883a 	mov	r2,zero
   120dc:	003fbc06 	br	11fd0 <__subdf3+0x474>
   120e0:	1c44b03a 	or	r2,r3,r17
   120e4:	80008e1e 	bne	r16,zero,12320 <__subdf3+0x7c4>
   120e8:	1000c826 	beq	r2,zero,1240c <__subdf3+0x8b0>
   120ec:	2984b03a 	or	r2,r5,r6
   120f0:	103ebb26 	beq	r2,zero,11be0 <__subdf3+0x84>
   120f4:	8989883a 	add	r4,r17,r6
   120f8:	1945883a 	add	r2,r3,r5
   120fc:	2447803a 	cmpltu	r3,r4,r17
   12100:	1887883a 	add	r3,r3,r2
   12104:	1880202c 	andhi	r2,r3,128
   12108:	2023883a 	mov	r17,r4
   1210c:	103f1626 	beq	r2,zero,11d68 <__subdf3+0x20c>
   12110:	00bfe034 	movhi	r2,65408
   12114:	10bfffc4 	addi	r2,r2,-1
   12118:	5021883a 	mov	r16,r10
   1211c:	1886703a 	and	r3,r3,r2
   12120:	003eaf06 	br	11be0 <__subdf3+0x84>
   12124:	3825883a 	mov	r18,r7
   12128:	003f0f06 	br	11d68 <__subdf3+0x20c>
   1212c:	1c44b03a 	or	r2,r3,r17
   12130:	8000251e 	bne	r16,zero,121c8 <__subdf3+0x66c>
   12134:	1000661e 	bne	r2,zero,122d0 <__subdf3+0x774>
   12138:	2990b03a 	or	r8,r5,r6
   1213c:	40009626 	beq	r8,zero,12398 <__subdf3+0x83c>
   12140:	2807883a 	mov	r3,r5
   12144:	3023883a 	mov	r17,r6
   12148:	3825883a 	mov	r18,r7
   1214c:	003ea406 	br	11be0 <__subdf3+0x84>
   12150:	127ff804 	addi	r9,r2,-32
   12154:	01000804 	movi	r4,32
   12158:	2a52d83a 	srl	r9,r5,r9
   1215c:	11008c26 	beq	r2,r4,12390 <__subdf3+0x834>
   12160:	01001004 	movi	r4,64
   12164:	2085c83a 	sub	r2,r4,r2
   12168:	2884983a 	sll	r2,r5,r2
   1216c:	118cb03a 	or	r6,r2,r6
   12170:	300cc03a 	cmpne	r6,r6,zero
   12174:	4992b03a 	or	r9,r9,r6
   12178:	0005883a 	mov	r2,zero
   1217c:	003f1206 	br	11dc8 <__subdf3+0x26c>
   12180:	0101ffc4 	movi	r4,2047
   12184:	493f9c1e 	bne	r9,r4,11ff8 <__subdf3+0x49c>
   12188:	2807883a 	mov	r3,r5
   1218c:	3023883a 	mov	r17,r6
   12190:	4821883a 	mov	r16,r9
   12194:	3825883a 	mov	r18,r7
   12198:	003e9106 	br	11be0 <__subdf3+0x84>
   1219c:	80001f1e 	bne	r16,zero,1221c <__subdf3+0x6c0>
   121a0:	1c48b03a 	or	r4,r3,r17
   121a4:	20005a26 	beq	r4,zero,12310 <__subdf3+0x7b4>
   121a8:	0084303a 	nor	r2,zero,r2
   121ac:	1000561e 	bne	r2,zero,12308 <__subdf3+0x7ac>
   121b0:	89a3883a 	add	r17,r17,r6
   121b4:	1945883a 	add	r2,r3,r5
   121b8:	898d803a 	cmpltu	r6,r17,r6
   121bc:	3087883a 	add	r3,r6,r2
   121c0:	4821883a 	mov	r16,r9
   121c4:	003f0506 	br	11ddc <__subdf3+0x280>
   121c8:	10002b1e 	bne	r2,zero,12278 <__subdf3+0x71c>
   121cc:	2984b03a 	or	r2,r5,r6
   121d0:	10008026 	beq	r2,zero,123d4 <__subdf3+0x878>
   121d4:	2807883a 	mov	r3,r5
   121d8:	3023883a 	mov	r17,r6
   121dc:	3825883a 	mov	r18,r7
   121e0:	0401ffc4 	movi	r16,2047
   121e4:	003e7e06 	br	11be0 <__subdf3+0x84>
   121e8:	3809883a 	mov	r4,r7
   121ec:	0011883a 	mov	r8,zero
   121f0:	0005883a 	mov	r2,zero
   121f4:	003ee306 	br	11d84 <__subdf3+0x228>
   121f8:	1c62b03a 	or	r17,r3,r17
   121fc:	8822c03a 	cmpne	r17,r17,zero
   12200:	0005883a 	mov	r2,zero
   12204:	003f8906 	br	1202c <__subdf3+0x4d0>
   12208:	3809883a 	mov	r4,r7
   1220c:	4821883a 	mov	r16,r9
   12210:	0011883a 	mov	r8,zero
   12214:	0005883a 	mov	r2,zero
   12218:	003eda06 	br	11d84 <__subdf3+0x228>
   1221c:	0101ffc4 	movi	r4,2047
   12220:	49003b26 	beq	r9,r4,12310 <__subdf3+0x7b4>
   12224:	0085c83a 	sub	r2,zero,r2
   12228:	18c02034 	orhi	r3,r3,128
   1222c:	01000e04 	movi	r4,56
   12230:	20806e16 	blt	r4,r2,123ec <__subdf3+0x890>
   12234:	010007c4 	movi	r4,31
   12238:	20807716 	blt	r4,r2,12418 <__subdf3+0x8bc>
   1223c:	01000804 	movi	r4,32
   12240:	2089c83a 	sub	r4,r4,r2
   12244:	1914983a 	sll	r10,r3,r4
   12248:	8890d83a 	srl	r8,r17,r2
   1224c:	8908983a 	sll	r4,r17,r4
   12250:	1884d83a 	srl	r2,r3,r2
   12254:	5222b03a 	or	r17,r10,r8
   12258:	2006c03a 	cmpne	r3,r4,zero
   1225c:	88e2b03a 	or	r17,r17,r3
   12260:	89a3883a 	add	r17,r17,r6
   12264:	1145883a 	add	r2,r2,r5
   12268:	898d803a 	cmpltu	r6,r17,r6
   1226c:	3087883a 	add	r3,r6,r2
   12270:	4821883a 	mov	r16,r9
   12274:	003ed906 	br	11ddc <__subdf3+0x280>
   12278:	2984b03a 	or	r2,r5,r6
   1227c:	10004226 	beq	r2,zero,12388 <__subdf3+0x82c>
   12280:	1808d0fa 	srli	r4,r3,3
   12284:	8822d0fa 	srli	r17,r17,3
   12288:	1806977a 	slli	r3,r3,29
   1228c:	2080022c 	andhi	r2,r4,8
   12290:	1c62b03a 	or	r17,r3,r17
   12294:	10000826 	beq	r2,zero,122b8 <__subdf3+0x75c>
   12298:	2812d0fa 	srli	r9,r5,3
   1229c:	4880022c 	andhi	r2,r9,8
   122a0:	1000051e 	bne	r2,zero,122b8 <__subdf3+0x75c>
   122a4:	300cd0fa 	srli	r6,r6,3
   122a8:	2804977a 	slli	r2,r5,29
   122ac:	4809883a 	mov	r4,r9
   122b0:	3825883a 	mov	r18,r7
   122b4:	11a2b03a 	or	r17,r2,r6
   122b8:	8806d77a 	srli	r3,r17,29
   122bc:	200890fa 	slli	r4,r4,3
   122c0:	882290fa 	slli	r17,r17,3
   122c4:	0401ffc4 	movi	r16,2047
   122c8:	1906b03a 	or	r3,r3,r4
   122cc:	003e4406 	br	11be0 <__subdf3+0x84>
   122d0:	2984b03a 	or	r2,r5,r6
   122d4:	103e4226 	beq	r2,zero,11be0 <__subdf3+0x84>
   122d8:	8989c83a 	sub	r4,r17,r6
   122dc:	8911803a 	cmpltu	r8,r17,r4
   122e0:	1945c83a 	sub	r2,r3,r5
   122e4:	1205c83a 	sub	r2,r2,r8
   122e8:	1200202c 	andhi	r8,r2,128
   122ec:	403e9a26 	beq	r8,zero,11d58 <__subdf3+0x1fc>
   122f0:	3463c83a 	sub	r17,r6,r17
   122f4:	28c5c83a 	sub	r2,r5,r3
   122f8:	344d803a 	cmpltu	r6,r6,r17
   122fc:	1187c83a 	sub	r3,r2,r6
   12300:	3825883a 	mov	r18,r7
   12304:	003e3606 	br	11be0 <__subdf3+0x84>
   12308:	0101ffc4 	movi	r4,2047
   1230c:	493fc71e 	bne	r9,r4,1222c <__subdf3+0x6d0>
   12310:	2807883a 	mov	r3,r5
   12314:	3023883a 	mov	r17,r6
   12318:	4821883a 	mov	r16,r9
   1231c:	003e3006 	br	11be0 <__subdf3+0x84>
   12320:	10003626 	beq	r2,zero,123fc <__subdf3+0x8a0>
   12324:	2984b03a 	or	r2,r5,r6
   12328:	10001726 	beq	r2,zero,12388 <__subdf3+0x82c>
   1232c:	1808d0fa 	srli	r4,r3,3
   12330:	8822d0fa 	srli	r17,r17,3
   12334:	1806977a 	slli	r3,r3,29
   12338:	2080022c 	andhi	r2,r4,8
   1233c:	1c62b03a 	or	r17,r3,r17
   12340:	10000726 	beq	r2,zero,12360 <__subdf3+0x804>
   12344:	2812d0fa 	srli	r9,r5,3
   12348:	4880022c 	andhi	r2,r9,8
   1234c:	1000041e 	bne	r2,zero,12360 <__subdf3+0x804>
   12350:	300cd0fa 	srli	r6,r6,3
   12354:	2804977a 	slli	r2,r5,29
   12358:	4809883a 	mov	r4,r9
   1235c:	11a2b03a 	or	r17,r2,r6
   12360:	8806d77a 	srli	r3,r17,29
   12364:	200890fa 	slli	r4,r4,3
   12368:	882290fa 	slli	r17,r17,3
   1236c:	3825883a 	mov	r18,r7
   12370:	1906b03a 	or	r3,r3,r4
   12374:	0401ffc4 	movi	r16,2047
   12378:	003e1906 	br	11be0 <__subdf3+0x84>
   1237c:	000b883a 	mov	r5,zero
   12380:	0005883a 	mov	r2,zero
   12384:	003e2e06 	br	11c40 <__subdf3+0xe4>
   12388:	0401ffc4 	movi	r16,2047
   1238c:	003e1406 	br	11be0 <__subdf3+0x84>
   12390:	0005883a 	mov	r2,zero
   12394:	003f7506 	br	1216c <__subdf3+0x610>
   12398:	0005883a 	mov	r2,zero
   1239c:	0009883a 	mov	r4,zero
   123a0:	003e7806 	br	11d84 <__subdf3+0x228>
   123a4:	123ff804 	addi	r8,r2,-32
   123a8:	01000804 	movi	r4,32
   123ac:	1a10d83a 	srl	r8,r3,r8
   123b0:	11002526 	beq	r2,r4,12448 <__subdf3+0x8ec>
   123b4:	01001004 	movi	r4,64
   123b8:	2085c83a 	sub	r2,r4,r2
   123bc:	1884983a 	sll	r2,r3,r2
   123c0:	1444b03a 	or	r2,r2,r17
   123c4:	1004c03a 	cmpne	r2,r2,zero
   123c8:	40a2b03a 	or	r17,r8,r2
   123cc:	0005883a 	mov	r2,zero
   123d0:	003f1606 	br	1202c <__subdf3+0x4d0>
   123d4:	02000434 	movhi	r8,16
   123d8:	0009883a 	mov	r4,zero
   123dc:	423fffc4 	addi	r8,r8,-1
   123e0:	00bfffc4 	movi	r2,-1
   123e4:	0401ffc4 	movi	r16,2047
   123e8:	003e6606 	br	11d84 <__subdf3+0x228>
   123ec:	1c62b03a 	or	r17,r3,r17
   123f0:	8822c03a 	cmpne	r17,r17,zero
   123f4:	0005883a 	mov	r2,zero
   123f8:	003f9906 	br	12260 <__subdf3+0x704>
   123fc:	2807883a 	mov	r3,r5
   12400:	3023883a 	mov	r17,r6
   12404:	0401ffc4 	movi	r16,2047
   12408:	003df506 	br	11be0 <__subdf3+0x84>
   1240c:	2807883a 	mov	r3,r5
   12410:	3023883a 	mov	r17,r6
   12414:	003df206 	br	11be0 <__subdf3+0x84>
   12418:	123ff804 	addi	r8,r2,-32
   1241c:	01000804 	movi	r4,32
   12420:	1a10d83a 	srl	r8,r3,r8
   12424:	11000a26 	beq	r2,r4,12450 <__subdf3+0x8f4>
   12428:	01001004 	movi	r4,64
   1242c:	2085c83a 	sub	r2,r4,r2
   12430:	1884983a 	sll	r2,r3,r2
   12434:	1444b03a 	or	r2,r2,r17
   12438:	1004c03a 	cmpne	r2,r2,zero
   1243c:	40a2b03a 	or	r17,r8,r2
   12440:	0005883a 	mov	r2,zero
   12444:	003f8606 	br	12260 <__subdf3+0x704>
   12448:	0005883a 	mov	r2,zero
   1244c:	003fdc06 	br	123c0 <__subdf3+0x864>
   12450:	0005883a 	mov	r2,zero
   12454:	003ff706 	br	12434 <__subdf3+0x8d8>

00012458 <__fixdfsi>:
   12458:	280cd53a 	srli	r6,r5,20
   1245c:	00c00434 	movhi	r3,16
   12460:	18ffffc4 	addi	r3,r3,-1
   12464:	3181ffcc 	andi	r6,r6,2047
   12468:	01c0ff84 	movi	r7,1022
   1246c:	28c6703a 	and	r3,r5,r3
   12470:	280ad7fa 	srli	r5,r5,31
   12474:	3980120e 	bge	r7,r6,124c0 <__fixdfsi+0x68>
   12478:	00810744 	movi	r2,1053
   1247c:	11800c16 	blt	r2,r6,124b0 <__fixdfsi+0x58>
   12480:	00810cc4 	movi	r2,1075
   12484:	1185c83a 	sub	r2,r2,r6
   12488:	01c007c4 	movi	r7,31
   1248c:	18c00434 	orhi	r3,r3,16
   12490:	38800d16 	blt	r7,r2,124c8 <__fixdfsi+0x70>
   12494:	31befb44 	addi	r6,r6,-1043
   12498:	2084d83a 	srl	r2,r4,r2
   1249c:	1986983a 	sll	r3,r3,r6
   124a0:	1884b03a 	or	r2,r3,r2
   124a4:	28000726 	beq	r5,zero,124c4 <__fixdfsi+0x6c>
   124a8:	0085c83a 	sub	r2,zero,r2
   124ac:	f800283a 	ret
   124b0:	00a00034 	movhi	r2,32768
   124b4:	10bfffc4 	addi	r2,r2,-1
   124b8:	2885883a 	add	r2,r5,r2
   124bc:	f800283a 	ret
   124c0:	0005883a 	mov	r2,zero
   124c4:	f800283a 	ret
   124c8:	008104c4 	movi	r2,1043
   124cc:	1185c83a 	sub	r2,r2,r6
   124d0:	1884d83a 	srl	r2,r3,r2
   124d4:	003ff306 	br	124a4 <__fixdfsi+0x4c>

000124d8 <__floatsidf>:
   124d8:	defffd04 	addi	sp,sp,-12
   124dc:	dfc00215 	stw	ra,8(sp)
   124e0:	dc400115 	stw	r17,4(sp)
   124e4:	dc000015 	stw	r16,0(sp)
   124e8:	20002b26 	beq	r4,zero,12598 <__floatsidf+0xc0>
   124ec:	2023883a 	mov	r17,r4
   124f0:	2020d7fa 	srli	r16,r4,31
   124f4:	20002d16 	blt	r4,zero,125ac <__floatsidf+0xd4>
   124f8:	8809883a 	mov	r4,r17
   124fc:	001265c0 	call	1265c <__clzsi2>
   12500:	01410784 	movi	r5,1054
   12504:	288bc83a 	sub	r5,r5,r2
   12508:	01010cc4 	movi	r4,1075
   1250c:	2149c83a 	sub	r4,r4,r5
   12510:	00c007c4 	movi	r3,31
   12514:	1900160e 	bge	r3,r4,12570 <__floatsidf+0x98>
   12518:	00c104c4 	movi	r3,1043
   1251c:	1947c83a 	sub	r3,r3,r5
   12520:	88c6983a 	sll	r3,r17,r3
   12524:	00800434 	movhi	r2,16
   12528:	10bfffc4 	addi	r2,r2,-1
   1252c:	1886703a 	and	r3,r3,r2
   12530:	2941ffcc 	andi	r5,r5,2047
   12534:	800d883a 	mov	r6,r16
   12538:	0005883a 	mov	r2,zero
   1253c:	280a953a 	slli	r5,r5,20
   12540:	31803fcc 	andi	r6,r6,255
   12544:	01000434 	movhi	r4,16
   12548:	300c97fa 	slli	r6,r6,31
   1254c:	213fffc4 	addi	r4,r4,-1
   12550:	1906703a 	and	r3,r3,r4
   12554:	1946b03a 	or	r3,r3,r5
   12558:	1986b03a 	or	r3,r3,r6
   1255c:	dfc00217 	ldw	ra,8(sp)
   12560:	dc400117 	ldw	r17,4(sp)
   12564:	dc000017 	ldw	r16,0(sp)
   12568:	dec00304 	addi	sp,sp,12
   1256c:	f800283a 	ret
   12570:	00c002c4 	movi	r3,11
   12574:	1887c83a 	sub	r3,r3,r2
   12578:	88c6d83a 	srl	r3,r17,r3
   1257c:	8904983a 	sll	r2,r17,r4
   12580:	01000434 	movhi	r4,16
   12584:	213fffc4 	addi	r4,r4,-1
   12588:	2941ffcc 	andi	r5,r5,2047
   1258c:	1906703a 	and	r3,r3,r4
   12590:	800d883a 	mov	r6,r16
   12594:	003fe906 	br	1253c <__floatsidf+0x64>
   12598:	000d883a 	mov	r6,zero
   1259c:	000b883a 	mov	r5,zero
   125a0:	0007883a 	mov	r3,zero
   125a4:	0005883a 	mov	r2,zero
   125a8:	003fe406 	br	1253c <__floatsidf+0x64>
   125ac:	0123c83a 	sub	r17,zero,r4
   125b0:	003fd106 	br	124f8 <__floatsidf+0x20>

000125b4 <__floatunsidf>:
   125b4:	defffe04 	addi	sp,sp,-8
   125b8:	dc000015 	stw	r16,0(sp)
   125bc:	dfc00115 	stw	ra,4(sp)
   125c0:	2021883a 	mov	r16,r4
   125c4:	20002226 	beq	r4,zero,12650 <__floatunsidf+0x9c>
   125c8:	001265c0 	call	1265c <__clzsi2>
   125cc:	01010784 	movi	r4,1054
   125d0:	2089c83a 	sub	r4,r4,r2
   125d4:	01810cc4 	movi	r6,1075
   125d8:	310dc83a 	sub	r6,r6,r4
   125dc:	00c007c4 	movi	r3,31
   125e0:	1980120e 	bge	r3,r6,1262c <__floatunsidf+0x78>
   125e4:	00c104c4 	movi	r3,1043
   125e8:	1907c83a 	sub	r3,r3,r4
   125ec:	80ca983a 	sll	r5,r16,r3
   125f0:	00800434 	movhi	r2,16
   125f4:	10bfffc4 	addi	r2,r2,-1
   125f8:	2101ffcc 	andi	r4,r4,2047
   125fc:	0021883a 	mov	r16,zero
   12600:	288a703a 	and	r5,r5,r2
   12604:	2008953a 	slli	r4,r4,20
   12608:	00c00434 	movhi	r3,16
   1260c:	18ffffc4 	addi	r3,r3,-1
   12610:	28c6703a 	and	r3,r5,r3
   12614:	8005883a 	mov	r2,r16
   12618:	1906b03a 	or	r3,r3,r4
   1261c:	dfc00117 	ldw	ra,4(sp)
   12620:	dc000017 	ldw	r16,0(sp)
   12624:	dec00204 	addi	sp,sp,8
   12628:	f800283a 	ret
   1262c:	00c002c4 	movi	r3,11
   12630:	188bc83a 	sub	r5,r3,r2
   12634:	814ad83a 	srl	r5,r16,r5
   12638:	00c00434 	movhi	r3,16
   1263c:	18ffffc4 	addi	r3,r3,-1
   12640:	81a0983a 	sll	r16,r16,r6
   12644:	2101ffcc 	andi	r4,r4,2047
   12648:	28ca703a 	and	r5,r5,r3
   1264c:	003fed06 	br	12604 <__floatunsidf+0x50>
   12650:	0009883a 	mov	r4,zero
   12654:	000b883a 	mov	r5,zero
   12658:	003fea06 	br	12604 <__floatunsidf+0x50>

0001265c <__clzsi2>:
   1265c:	00bfffd4 	movui	r2,65535
   12660:	11000536 	bltu	r2,r4,12678 <__clzsi2+0x1c>
   12664:	00803fc4 	movi	r2,255
   12668:	11000f36 	bltu	r2,r4,126a8 <__clzsi2+0x4c>
   1266c:	00800804 	movi	r2,32
   12670:	0007883a 	mov	r3,zero
   12674:	00000506 	br	1268c <__clzsi2+0x30>
   12678:	00804034 	movhi	r2,256
   1267c:	10bfffc4 	addi	r2,r2,-1
   12680:	11000c2e 	bgeu	r2,r4,126b4 <__clzsi2+0x58>
   12684:	00800204 	movi	r2,8
   12688:	00c00604 	movi	r3,24
   1268c:	20c8d83a 	srl	r4,r4,r3
   12690:	00c000b4 	movhi	r3,2
   12694:	18fdda04 	addi	r3,r3,-2200
   12698:	1909883a 	add	r4,r3,r4
   1269c:	20c00003 	ldbu	r3,0(r4)
   126a0:	10c5c83a 	sub	r2,r2,r3
   126a4:	f800283a 	ret
   126a8:	00800604 	movi	r2,24
   126ac:	00c00204 	movi	r3,8
   126b0:	003ff606 	br	1268c <__clzsi2+0x30>
   126b4:	00800404 	movi	r2,16
   126b8:	1007883a 	mov	r3,r2
   126bc:	003ff306 	br	1268c <__clzsi2+0x30>

000126c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   126c0:	defffe04 	addi	sp,sp,-8
   126c4:	dfc00115 	stw	ra,4(sp)
   126c8:	df000015 	stw	fp,0(sp)
   126cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   126d0:	d0a00c17 	ldw	r2,-32720(gp)
   126d4:	10000326 	beq	r2,zero,126e4 <alt_get_errno+0x24>
   126d8:	d0a00c17 	ldw	r2,-32720(gp)
   126dc:	103ee83a 	callr	r2
   126e0:	00000106 	br	126e8 <alt_get_errno+0x28>
   126e4:	d0a81004 	addi	r2,gp,-24512
}
   126e8:	e037883a 	mov	sp,fp
   126ec:	dfc00117 	ldw	ra,4(sp)
   126f0:	df000017 	ldw	fp,0(sp)
   126f4:	dec00204 	addi	sp,sp,8
   126f8:	f800283a 	ret

000126fc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   126fc:	defffb04 	addi	sp,sp,-20
   12700:	dfc00415 	stw	ra,16(sp)
   12704:	df000315 	stw	fp,12(sp)
   12708:	df000304 	addi	fp,sp,12
   1270c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   12710:	e0bfff17 	ldw	r2,-4(fp)
   12714:	10000616 	blt	r2,zero,12730 <close+0x34>
   12718:	e0bfff17 	ldw	r2,-4(fp)
   1271c:	10c00324 	muli	r3,r2,12
   12720:	008000b4 	movhi	r2,2
   12724:	10810604 	addi	r2,r2,1048
   12728:	1885883a 	add	r2,r3,r2
   1272c:	00000106 	br	12734 <close+0x38>
   12730:	0005883a 	mov	r2,zero
   12734:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   12738:	e0bffd17 	ldw	r2,-12(fp)
   1273c:	10001926 	beq	r2,zero,127a4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   12740:	e0bffd17 	ldw	r2,-12(fp)
   12744:	10800017 	ldw	r2,0(r2)
   12748:	10800417 	ldw	r2,16(r2)
   1274c:	10000626 	beq	r2,zero,12768 <close+0x6c>
   12750:	e0bffd17 	ldw	r2,-12(fp)
   12754:	10800017 	ldw	r2,0(r2)
   12758:	10800417 	ldw	r2,16(r2)
   1275c:	e13ffd17 	ldw	r4,-12(fp)
   12760:	103ee83a 	callr	r2
   12764:	00000106 	br	1276c <close+0x70>
   12768:	0005883a 	mov	r2,zero
   1276c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   12770:	e13fff17 	ldw	r4,-4(fp)
   12774:	0012db40 	call	12db4 <alt_release_fd>
    if (rval < 0)
   12778:	e0bffe17 	ldw	r2,-8(fp)
   1277c:	1000070e 	bge	r2,zero,1279c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   12780:	00126c00 	call	126c0 <alt_get_errno>
   12784:	1007883a 	mov	r3,r2
   12788:	e0bffe17 	ldw	r2,-8(fp)
   1278c:	0085c83a 	sub	r2,zero,r2
   12790:	18800015 	stw	r2,0(r3)
      return -1;
   12794:	00bfffc4 	movi	r2,-1
   12798:	00000706 	br	127b8 <close+0xbc>
    }
    return 0;
   1279c:	0005883a 	mov	r2,zero
   127a0:	00000506 	br	127b8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   127a4:	00126c00 	call	126c0 <alt_get_errno>
   127a8:	1007883a 	mov	r3,r2
   127ac:	00801444 	movi	r2,81
   127b0:	18800015 	stw	r2,0(r3)
    return -1;
   127b4:	00bfffc4 	movi	r2,-1
  }
}
   127b8:	e037883a 	mov	sp,fp
   127bc:	dfc00117 	ldw	ra,4(sp)
   127c0:	df000017 	ldw	fp,0(sp)
   127c4:	dec00204 	addi	sp,sp,8
   127c8:	f800283a 	ret

000127cc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   127cc:	defffc04 	addi	sp,sp,-16
   127d0:	df000315 	stw	fp,12(sp)
   127d4:	df000304 	addi	fp,sp,12
   127d8:	e13ffd15 	stw	r4,-12(fp)
   127dc:	e17ffe15 	stw	r5,-8(fp)
   127e0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   127e4:	e0bfff17 	ldw	r2,-4(fp)
}
   127e8:	e037883a 	mov	sp,fp
   127ec:	df000017 	ldw	fp,0(sp)
   127f0:	dec00104 	addi	sp,sp,4
   127f4:	f800283a 	ret

000127f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   127f8:	defffe04 	addi	sp,sp,-8
   127fc:	dfc00115 	stw	ra,4(sp)
   12800:	df000015 	stw	fp,0(sp)
   12804:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12808:	d0a00c17 	ldw	r2,-32720(gp)
   1280c:	10000326 	beq	r2,zero,1281c <alt_get_errno+0x24>
   12810:	d0a00c17 	ldw	r2,-32720(gp)
   12814:	103ee83a 	callr	r2
   12818:	00000106 	br	12820 <alt_get_errno+0x28>
   1281c:	d0a81004 	addi	r2,gp,-24512
}
   12820:	e037883a 	mov	sp,fp
   12824:	dfc00117 	ldw	ra,4(sp)
   12828:	df000017 	ldw	fp,0(sp)
   1282c:	dec00204 	addi	sp,sp,8
   12830:	f800283a 	ret

00012834 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   12834:	defffb04 	addi	sp,sp,-20
   12838:	dfc00415 	stw	ra,16(sp)
   1283c:	df000315 	stw	fp,12(sp)
   12840:	df000304 	addi	fp,sp,12
   12844:	e13ffe15 	stw	r4,-8(fp)
   12848:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1284c:	e0bffe17 	ldw	r2,-8(fp)
   12850:	10000616 	blt	r2,zero,1286c <fstat+0x38>
   12854:	e0bffe17 	ldw	r2,-8(fp)
   12858:	10c00324 	muli	r3,r2,12
   1285c:	008000b4 	movhi	r2,2
   12860:	10810604 	addi	r2,r2,1048
   12864:	1885883a 	add	r2,r3,r2
   12868:	00000106 	br	12870 <fstat+0x3c>
   1286c:	0005883a 	mov	r2,zero
   12870:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   12874:	e0bffd17 	ldw	r2,-12(fp)
   12878:	10001026 	beq	r2,zero,128bc <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1287c:	e0bffd17 	ldw	r2,-12(fp)
   12880:	10800017 	ldw	r2,0(r2)
   12884:	10800817 	ldw	r2,32(r2)
   12888:	10000726 	beq	r2,zero,128a8 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   1288c:	e0bffd17 	ldw	r2,-12(fp)
   12890:	10800017 	ldw	r2,0(r2)
   12894:	10800817 	ldw	r2,32(r2)
   12898:	e17fff17 	ldw	r5,-4(fp)
   1289c:	e13ffd17 	ldw	r4,-12(fp)
   128a0:	103ee83a 	callr	r2
   128a4:	00000a06 	br	128d0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   128a8:	e0bfff17 	ldw	r2,-4(fp)
   128ac:	00c80004 	movi	r3,8192
   128b0:	10c00115 	stw	r3,4(r2)
      return 0;
   128b4:	0005883a 	mov	r2,zero
   128b8:	00000506 	br	128d0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   128bc:	00127f80 	call	127f8 <alt_get_errno>
   128c0:	1007883a 	mov	r3,r2
   128c4:	00801444 	movi	r2,81
   128c8:	18800015 	stw	r2,0(r3)
    return -1;
   128cc:	00bfffc4 	movi	r2,-1
  }
}
   128d0:	e037883a 	mov	sp,fp
   128d4:	dfc00117 	ldw	ra,4(sp)
   128d8:	df000017 	ldw	fp,0(sp)
   128dc:	dec00204 	addi	sp,sp,8
   128e0:	f800283a 	ret

000128e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   128e4:	defffe04 	addi	sp,sp,-8
   128e8:	dfc00115 	stw	ra,4(sp)
   128ec:	df000015 	stw	fp,0(sp)
   128f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   128f4:	d0a00c17 	ldw	r2,-32720(gp)
   128f8:	10000326 	beq	r2,zero,12908 <alt_get_errno+0x24>
   128fc:	d0a00c17 	ldw	r2,-32720(gp)
   12900:	103ee83a 	callr	r2
   12904:	00000106 	br	1290c <alt_get_errno+0x28>
   12908:	d0a81004 	addi	r2,gp,-24512
}
   1290c:	e037883a 	mov	sp,fp
   12910:	dfc00117 	ldw	ra,4(sp)
   12914:	df000017 	ldw	fp,0(sp)
   12918:	dec00204 	addi	sp,sp,8
   1291c:	f800283a 	ret

00012920 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   12920:	deffed04 	addi	sp,sp,-76
   12924:	dfc01215 	stw	ra,72(sp)
   12928:	df001115 	stw	fp,68(sp)
   1292c:	df001104 	addi	fp,sp,68
   12930:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12934:	e0bfff17 	ldw	r2,-4(fp)
   12938:	10000616 	blt	r2,zero,12954 <isatty+0x34>
   1293c:	e0bfff17 	ldw	r2,-4(fp)
   12940:	10c00324 	muli	r3,r2,12
   12944:	008000b4 	movhi	r2,2
   12948:	10810604 	addi	r2,r2,1048
   1294c:	1885883a 	add	r2,r3,r2
   12950:	00000106 	br	12958 <isatty+0x38>
   12954:	0005883a 	mov	r2,zero
   12958:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   1295c:	e0bfef17 	ldw	r2,-68(fp)
   12960:	10000e26 	beq	r2,zero,1299c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   12964:	e0bfef17 	ldw	r2,-68(fp)
   12968:	10800017 	ldw	r2,0(r2)
   1296c:	10800817 	ldw	r2,32(r2)
   12970:	1000021e 	bne	r2,zero,1297c <isatty+0x5c>
    {
      return 1;
   12974:	00800044 	movi	r2,1
   12978:	00000d06 	br	129b0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   1297c:	e0bff004 	addi	r2,fp,-64
   12980:	100b883a 	mov	r5,r2
   12984:	e13fff17 	ldw	r4,-4(fp)
   12988:	00128340 	call	12834 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   1298c:	e0bff117 	ldw	r2,-60(fp)
   12990:	10880020 	cmpeqi	r2,r2,8192
   12994:	10803fcc 	andi	r2,r2,255
   12998:	00000506 	br	129b0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1299c:	00128e40 	call	128e4 <alt_get_errno>
   129a0:	1007883a 	mov	r3,r2
   129a4:	00801444 	movi	r2,81
   129a8:	18800015 	stw	r2,0(r3)
    return 0;
   129ac:	0005883a 	mov	r2,zero
  }
}
   129b0:	e037883a 	mov	sp,fp
   129b4:	dfc00117 	ldw	ra,4(sp)
   129b8:	df000017 	ldw	fp,0(sp)
   129bc:	dec00204 	addi	sp,sp,8
   129c0:	f800283a 	ret

000129c4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   129c4:	defffc04 	addi	sp,sp,-16
   129c8:	df000315 	stw	fp,12(sp)
   129cc:	df000304 	addi	fp,sp,12
   129d0:	e13ffd15 	stw	r4,-12(fp)
   129d4:	e17ffe15 	stw	r5,-8(fp)
   129d8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   129dc:	e0fffe17 	ldw	r3,-8(fp)
   129e0:	e0bffd17 	ldw	r2,-12(fp)
   129e4:	18800c26 	beq	r3,r2,12a18 <alt_load_section+0x54>
  {
    while( to != end )
   129e8:	00000806 	br	12a0c <alt_load_section+0x48>
    {
      *to++ = *from++;
   129ec:	e0bffe17 	ldw	r2,-8(fp)
   129f0:	10c00104 	addi	r3,r2,4
   129f4:	e0fffe15 	stw	r3,-8(fp)
   129f8:	e0fffd17 	ldw	r3,-12(fp)
   129fc:	19000104 	addi	r4,r3,4
   12a00:	e13ffd15 	stw	r4,-12(fp)
   12a04:	18c00017 	ldw	r3,0(r3)
   12a08:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   12a0c:	e0fffe17 	ldw	r3,-8(fp)
   12a10:	e0bfff17 	ldw	r2,-4(fp)
   12a14:	18bff51e 	bne	r3,r2,129ec <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   12a18:	0001883a 	nop
   12a1c:	e037883a 	mov	sp,fp
   12a20:	df000017 	ldw	fp,0(sp)
   12a24:	dec00104 	addi	sp,sp,4
   12a28:	f800283a 	ret

00012a2c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   12a2c:	defffe04 	addi	sp,sp,-8
   12a30:	dfc00115 	stw	ra,4(sp)
   12a34:	df000015 	stw	fp,0(sp)
   12a38:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   12a3c:	018000b4 	movhi	r6,2
   12a40:	31867404 	addi	r6,r6,6608
   12a44:	014000b4 	movhi	r5,2
   12a48:	297ec104 	addi	r5,r5,-1276
   12a4c:	010000b4 	movhi	r4,2
   12a50:	21067404 	addi	r4,r4,6608
   12a54:	00129c40 	call	129c4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   12a58:	01800034 	movhi	r6,0
   12a5c:	31809204 	addi	r6,r6,584
   12a60:	01400034 	movhi	r5,0
   12a64:	29400804 	addi	r5,r5,32
   12a68:	01000034 	movhi	r4,0
   12a6c:	21000804 	addi	r4,r4,32
   12a70:	00129c40 	call	129c4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   12a74:	018000b4 	movhi	r6,2
   12a78:	31bec104 	addi	r6,r6,-1276
   12a7c:	014000b4 	movhi	r5,2
   12a80:	297a8804 	addi	r5,r5,-5600
   12a84:	010000b4 	movhi	r4,2
   12a88:	213a8804 	addi	r4,r4,-5600
   12a8c:	00129c40 	call	129c4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   12a90:	001d6c40 	call	1d6c4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   12a94:	001d9140 	call	1d914 <alt_icache_flush_all>
}
   12a98:	0001883a 	nop
   12a9c:	e037883a 	mov	sp,fp
   12aa0:	dfc00117 	ldw	ra,4(sp)
   12aa4:	df000017 	ldw	fp,0(sp)
   12aa8:	dec00204 	addi	sp,sp,8
   12aac:	f800283a 	ret

00012ab0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12ab0:	defffe04 	addi	sp,sp,-8
   12ab4:	dfc00115 	stw	ra,4(sp)
   12ab8:	df000015 	stw	fp,0(sp)
   12abc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12ac0:	d0a00c17 	ldw	r2,-32720(gp)
   12ac4:	10000326 	beq	r2,zero,12ad4 <alt_get_errno+0x24>
   12ac8:	d0a00c17 	ldw	r2,-32720(gp)
   12acc:	103ee83a 	callr	r2
   12ad0:	00000106 	br	12ad8 <alt_get_errno+0x28>
   12ad4:	d0a81004 	addi	r2,gp,-24512
}
   12ad8:	e037883a 	mov	sp,fp
   12adc:	dfc00117 	ldw	ra,4(sp)
   12ae0:	df000017 	ldw	fp,0(sp)
   12ae4:	dec00204 	addi	sp,sp,8
   12ae8:	f800283a 	ret

00012aec <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   12aec:	defff904 	addi	sp,sp,-28
   12af0:	dfc00615 	stw	ra,24(sp)
   12af4:	df000515 	stw	fp,20(sp)
   12af8:	df000504 	addi	fp,sp,20
   12afc:	e13ffd15 	stw	r4,-12(fp)
   12b00:	e17ffe15 	stw	r5,-8(fp)
   12b04:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   12b08:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12b0c:	e0bffd17 	ldw	r2,-12(fp)
   12b10:	10000616 	blt	r2,zero,12b2c <lseek+0x40>
   12b14:	e0bffd17 	ldw	r2,-12(fp)
   12b18:	10c00324 	muli	r3,r2,12
   12b1c:	008000b4 	movhi	r2,2
   12b20:	10810604 	addi	r2,r2,1048
   12b24:	1885883a 	add	r2,r3,r2
   12b28:	00000106 	br	12b30 <lseek+0x44>
   12b2c:	0005883a 	mov	r2,zero
   12b30:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   12b34:	e0bffc17 	ldw	r2,-16(fp)
   12b38:	10001026 	beq	r2,zero,12b7c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   12b3c:	e0bffc17 	ldw	r2,-16(fp)
   12b40:	10800017 	ldw	r2,0(r2)
   12b44:	10800717 	ldw	r2,28(r2)
   12b48:	10000926 	beq	r2,zero,12b70 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   12b4c:	e0bffc17 	ldw	r2,-16(fp)
   12b50:	10800017 	ldw	r2,0(r2)
   12b54:	10800717 	ldw	r2,28(r2)
   12b58:	e1bfff17 	ldw	r6,-4(fp)
   12b5c:	e17ffe17 	ldw	r5,-8(fp)
   12b60:	e13ffc17 	ldw	r4,-16(fp)
   12b64:	103ee83a 	callr	r2
   12b68:	e0bffb15 	stw	r2,-20(fp)
   12b6c:	00000506 	br	12b84 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   12b70:	00bfde84 	movi	r2,-134
   12b74:	e0bffb15 	stw	r2,-20(fp)
   12b78:	00000206 	br	12b84 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   12b7c:	00bfebc4 	movi	r2,-81
   12b80:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   12b84:	e0bffb17 	ldw	r2,-20(fp)
   12b88:	1000070e 	bge	r2,zero,12ba8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   12b8c:	0012ab00 	call	12ab0 <alt_get_errno>
   12b90:	1007883a 	mov	r3,r2
   12b94:	e0bffb17 	ldw	r2,-20(fp)
   12b98:	0085c83a 	sub	r2,zero,r2
   12b9c:	18800015 	stw	r2,0(r3)
    rc = -1;
   12ba0:	00bfffc4 	movi	r2,-1
   12ba4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   12ba8:	e0bffb17 	ldw	r2,-20(fp)
}
   12bac:	e037883a 	mov	sp,fp
   12bb0:	dfc00117 	ldw	ra,4(sp)
   12bb4:	df000017 	ldw	fp,0(sp)
   12bb8:	dec00204 	addi	sp,sp,8
   12bbc:	f800283a 	ret

00012bc0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   12bc0:	defff904 	addi	sp,sp,-28
   12bc4:	dfc00615 	stw	ra,24(sp)
   12bc8:	df000515 	stw	fp,20(sp)
   12bcc:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   12bd0:	0009883a 	mov	r4,zero
   12bd4:	001ab200 	call	1ab20 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   12bd8:	0013b7c0 	call	13b7c <OSInit>
   12bdc:	01000044 	movi	r4,1
   12be0:	00184dc0 	call	184dc <OSSemCreate>
   12be4:	d0a81615 	stw	r2,-24488(gp)
   12be8:	01000044 	movi	r4,1
   12bec:	00184dc0 	call	184dc <OSSemCreate>
   12bf0:	d0a81815 	stw	r2,-24480(gp)
   12bf4:	d0a81104 	addi	r2,gp,-24508
   12bf8:	e0bffc15 	stw	r2,-16(fp)
   12bfc:	00800044 	movi	r2,1
   12c00:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   12c04:	e0bffd0b 	ldhu	r2,-12(fp)
   12c08:	1009883a 	mov	r4,r2
   12c0c:	00184dc0 	call	184dc <OSSemCreate>
   12c10:	1007883a 	mov	r3,r2
   12c14:	e0bffc17 	ldw	r2,-16(fp)
   12c18:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   12c1c:	001ab580 	call	1ab58 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   12c20:	018000b4 	movhi	r6,2
   12c24:	31be1d04 	addi	r6,r6,-1932
   12c28:	014000b4 	movhi	r5,2
   12c2c:	297e1d04 	addi	r5,r5,-1932
   12c30:	010000b4 	movhi	r4,2
   12c34:	213e1d04 	addi	r4,r4,-1932
   12c38:	001da0c0 	call	1da0c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   12c3c:	001d7c40 	call	1d7c4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   12c40:	010000b4 	movhi	r4,2
   12c44:	21360904 	addi	r4,r4,-10204
   12c48:	001e68c0 	call	1e68c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   12c4c:	d0a81217 	ldw	r2,-24504(gp)
   12c50:	d0e81317 	ldw	r3,-24500(gp)
   12c54:	d1281417 	ldw	r4,-24496(gp)
   12c58:	200d883a 	mov	r6,r4
   12c5c:	180b883a 	mov	r5,r3
   12c60:	1009883a 	mov	r4,r2
   12c64:	00008800 	call	880 <main>
   12c68:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   12c6c:	01000044 	movi	r4,1
   12c70:	00126fc0 	call	126fc <close>
  exit (result);
   12c74:	e13ffb17 	ldw	r4,-20(fp)
   12c78:	001e6a00 	call	1e6a0 <exit>

00012c7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12c7c:	defffe04 	addi	sp,sp,-8
   12c80:	dfc00115 	stw	ra,4(sp)
   12c84:	df000015 	stw	fp,0(sp)
   12c88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12c8c:	d0a00c17 	ldw	r2,-32720(gp)
   12c90:	10000326 	beq	r2,zero,12ca0 <alt_get_errno+0x24>
   12c94:	d0a00c17 	ldw	r2,-32720(gp)
   12c98:	103ee83a 	callr	r2
   12c9c:	00000106 	br	12ca4 <alt_get_errno+0x28>
   12ca0:	d0a81004 	addi	r2,gp,-24512
}
   12ca4:	e037883a 	mov	sp,fp
   12ca8:	dfc00117 	ldw	ra,4(sp)
   12cac:	df000017 	ldw	fp,0(sp)
   12cb0:	dec00204 	addi	sp,sp,8
   12cb4:	f800283a 	ret

00012cb8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   12cb8:	defff904 	addi	sp,sp,-28
   12cbc:	dfc00615 	stw	ra,24(sp)
   12cc0:	df000515 	stw	fp,20(sp)
   12cc4:	df000504 	addi	fp,sp,20
   12cc8:	e13ffd15 	stw	r4,-12(fp)
   12ccc:	e17ffe15 	stw	r5,-8(fp)
   12cd0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12cd4:	e0bffd17 	ldw	r2,-12(fp)
   12cd8:	10000616 	blt	r2,zero,12cf4 <read+0x3c>
   12cdc:	e0bffd17 	ldw	r2,-12(fp)
   12ce0:	10c00324 	muli	r3,r2,12
   12ce4:	008000b4 	movhi	r2,2
   12ce8:	10810604 	addi	r2,r2,1048
   12cec:	1885883a 	add	r2,r3,r2
   12cf0:	00000106 	br	12cf8 <read+0x40>
   12cf4:	0005883a 	mov	r2,zero
   12cf8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   12cfc:	e0bffb17 	ldw	r2,-20(fp)
   12d00:	10002226 	beq	r2,zero,12d8c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   12d04:	e0bffb17 	ldw	r2,-20(fp)
   12d08:	10800217 	ldw	r2,8(r2)
   12d0c:	108000cc 	andi	r2,r2,3
   12d10:	10800060 	cmpeqi	r2,r2,1
   12d14:	1000181e 	bne	r2,zero,12d78 <read+0xc0>
        (fd->dev->read))
   12d18:	e0bffb17 	ldw	r2,-20(fp)
   12d1c:	10800017 	ldw	r2,0(r2)
   12d20:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   12d24:	10001426 	beq	r2,zero,12d78 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   12d28:	e0bffb17 	ldw	r2,-20(fp)
   12d2c:	10800017 	ldw	r2,0(r2)
   12d30:	10800517 	ldw	r2,20(r2)
   12d34:	e0ffff17 	ldw	r3,-4(fp)
   12d38:	180d883a 	mov	r6,r3
   12d3c:	e17ffe17 	ldw	r5,-8(fp)
   12d40:	e13ffb17 	ldw	r4,-20(fp)
   12d44:	103ee83a 	callr	r2
   12d48:	e0bffc15 	stw	r2,-16(fp)
   12d4c:	e0bffc17 	ldw	r2,-16(fp)
   12d50:	1000070e 	bge	r2,zero,12d70 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   12d54:	0012c7c0 	call	12c7c <alt_get_errno>
   12d58:	1007883a 	mov	r3,r2
   12d5c:	e0bffc17 	ldw	r2,-16(fp)
   12d60:	0085c83a 	sub	r2,zero,r2
   12d64:	18800015 	stw	r2,0(r3)
          return -1;
   12d68:	00bfffc4 	movi	r2,-1
   12d6c:	00000c06 	br	12da0 <read+0xe8>
        }
        return rval;
   12d70:	e0bffc17 	ldw	r2,-16(fp)
   12d74:	00000a06 	br	12da0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   12d78:	0012c7c0 	call	12c7c <alt_get_errno>
   12d7c:	1007883a 	mov	r3,r2
   12d80:	00800344 	movi	r2,13
   12d84:	18800015 	stw	r2,0(r3)
   12d88:	00000406 	br	12d9c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   12d8c:	0012c7c0 	call	12c7c <alt_get_errno>
   12d90:	1007883a 	mov	r3,r2
   12d94:	00801444 	movi	r2,81
   12d98:	18800015 	stw	r2,0(r3)
  }
  return -1;
   12d9c:	00bfffc4 	movi	r2,-1
}
   12da0:	e037883a 	mov	sp,fp
   12da4:	dfc00117 	ldw	ra,4(sp)
   12da8:	df000017 	ldw	fp,0(sp)
   12dac:	dec00204 	addi	sp,sp,8
   12db0:	f800283a 	ret

00012db4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   12db4:	defffe04 	addi	sp,sp,-8
   12db8:	df000115 	stw	fp,4(sp)
   12dbc:	df000104 	addi	fp,sp,4
   12dc0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   12dc4:	e0bfff17 	ldw	r2,-4(fp)
   12dc8:	108000d0 	cmplti	r2,r2,3
   12dcc:	10000d1e 	bne	r2,zero,12e04 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   12dd0:	008000b4 	movhi	r2,2
   12dd4:	10810604 	addi	r2,r2,1048
   12dd8:	e0ffff17 	ldw	r3,-4(fp)
   12ddc:	18c00324 	muli	r3,r3,12
   12de0:	10c5883a 	add	r2,r2,r3
   12de4:	10800204 	addi	r2,r2,8
   12de8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   12dec:	008000b4 	movhi	r2,2
   12df0:	10810604 	addi	r2,r2,1048
   12df4:	e0ffff17 	ldw	r3,-4(fp)
   12df8:	18c00324 	muli	r3,r3,12
   12dfc:	10c5883a 	add	r2,r2,r3
   12e00:	10000015 	stw	zero,0(r2)
  }
}
   12e04:	0001883a 	nop
   12e08:	e037883a 	mov	sp,fp
   12e0c:	df000017 	ldw	fp,0(sp)
   12e10:	dec00104 	addi	sp,sp,4
   12e14:	f800283a 	ret

00012e18 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   12e18:	defff904 	addi	sp,sp,-28
   12e1c:	df000615 	stw	fp,24(sp)
   12e20:	df000604 	addi	fp,sp,24
   12e24:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12e28:	0005303a 	rdctl	r2,status
   12e2c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12e30:	e0fffe17 	ldw	r3,-8(fp)
   12e34:	00bfff84 	movi	r2,-2
   12e38:	1884703a 	and	r2,r3,r2
   12e3c:	1001703a 	wrctl	status,r2
  
  return context;
   12e40:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   12e44:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   12e48:	d0a00d17 	ldw	r2,-32716(gp)
   12e4c:	10c000c4 	addi	r3,r2,3
   12e50:	00bfff04 	movi	r2,-4
   12e54:	1884703a 	and	r2,r3,r2
   12e58:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   12e5c:	d0e00d17 	ldw	r3,-32716(gp)
   12e60:	e0bfff17 	ldw	r2,-4(fp)
   12e64:	1887883a 	add	r3,r3,r2
   12e68:	00810034 	movhi	r2,1024
   12e6c:	10800004 	addi	r2,r2,0
   12e70:	10c0062e 	bgeu	r2,r3,12e8c <sbrk+0x74>
   12e74:	e0bffb17 	ldw	r2,-20(fp)
   12e78:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12e7c:	e0bffa17 	ldw	r2,-24(fp)
   12e80:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   12e84:	00bfffc4 	movi	r2,-1
   12e88:	00000b06 	br	12eb8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   12e8c:	d0a00d17 	ldw	r2,-32716(gp)
   12e90:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   12e94:	d0e00d17 	ldw	r3,-32716(gp)
   12e98:	e0bfff17 	ldw	r2,-4(fp)
   12e9c:	1885883a 	add	r2,r3,r2
   12ea0:	d0a00d15 	stw	r2,-32716(gp)
   12ea4:	e0bffb17 	ldw	r2,-20(fp)
   12ea8:	e0bffc15 	stw	r2,-16(fp)
   12eac:	e0bffc17 	ldw	r2,-16(fp)
   12eb0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   12eb4:	e0bffd17 	ldw	r2,-12(fp)
} 
   12eb8:	e037883a 	mov	sp,fp
   12ebc:	df000017 	ldw	fp,0(sp)
   12ec0:	dec00104 	addi	sp,sp,4
   12ec4:	f800283a 	ret

00012ec8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12ec8:	defffe04 	addi	sp,sp,-8
   12ecc:	dfc00115 	stw	ra,4(sp)
   12ed0:	df000015 	stw	fp,0(sp)
   12ed4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12ed8:	d0a00c17 	ldw	r2,-32720(gp)
   12edc:	10000326 	beq	r2,zero,12eec <alt_get_errno+0x24>
   12ee0:	d0a00c17 	ldw	r2,-32720(gp)
   12ee4:	103ee83a 	callr	r2
   12ee8:	00000106 	br	12ef0 <alt_get_errno+0x28>
   12eec:	d0a81004 	addi	r2,gp,-24512
}
   12ef0:	e037883a 	mov	sp,fp
   12ef4:	dfc00117 	ldw	ra,4(sp)
   12ef8:	df000017 	ldw	fp,0(sp)
   12efc:	dec00204 	addi	sp,sp,8
   12f00:	f800283a 	ret

00012f04 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   12f04:	defff904 	addi	sp,sp,-28
   12f08:	dfc00615 	stw	ra,24(sp)
   12f0c:	df000515 	stw	fp,20(sp)
   12f10:	df000504 	addi	fp,sp,20
   12f14:	e13ffd15 	stw	r4,-12(fp)
   12f18:	e17ffe15 	stw	r5,-8(fp)
   12f1c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12f20:	e0bffd17 	ldw	r2,-12(fp)
   12f24:	10000616 	blt	r2,zero,12f40 <write+0x3c>
   12f28:	e0bffd17 	ldw	r2,-12(fp)
   12f2c:	10c00324 	muli	r3,r2,12
   12f30:	008000b4 	movhi	r2,2
   12f34:	10810604 	addi	r2,r2,1048
   12f38:	1885883a 	add	r2,r3,r2
   12f3c:	00000106 	br	12f44 <write+0x40>
   12f40:	0005883a 	mov	r2,zero
   12f44:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   12f48:	e0bffb17 	ldw	r2,-20(fp)
   12f4c:	10002126 	beq	r2,zero,12fd4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   12f50:	e0bffb17 	ldw	r2,-20(fp)
   12f54:	10800217 	ldw	r2,8(r2)
   12f58:	108000cc 	andi	r2,r2,3
   12f5c:	10001826 	beq	r2,zero,12fc0 <write+0xbc>
   12f60:	e0bffb17 	ldw	r2,-20(fp)
   12f64:	10800017 	ldw	r2,0(r2)
   12f68:	10800617 	ldw	r2,24(r2)
   12f6c:	10001426 	beq	r2,zero,12fc0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   12f70:	e0bffb17 	ldw	r2,-20(fp)
   12f74:	10800017 	ldw	r2,0(r2)
   12f78:	10800617 	ldw	r2,24(r2)
   12f7c:	e0ffff17 	ldw	r3,-4(fp)
   12f80:	180d883a 	mov	r6,r3
   12f84:	e17ffe17 	ldw	r5,-8(fp)
   12f88:	e13ffb17 	ldw	r4,-20(fp)
   12f8c:	103ee83a 	callr	r2
   12f90:	e0bffc15 	stw	r2,-16(fp)
   12f94:	e0bffc17 	ldw	r2,-16(fp)
   12f98:	1000070e 	bge	r2,zero,12fb8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   12f9c:	0012ec80 	call	12ec8 <alt_get_errno>
   12fa0:	1007883a 	mov	r3,r2
   12fa4:	e0bffc17 	ldw	r2,-16(fp)
   12fa8:	0085c83a 	sub	r2,zero,r2
   12fac:	18800015 	stw	r2,0(r3)
        return -1;
   12fb0:	00bfffc4 	movi	r2,-1
   12fb4:	00000c06 	br	12fe8 <write+0xe4>
      }
      return rval;
   12fb8:	e0bffc17 	ldw	r2,-16(fp)
   12fbc:	00000a06 	br	12fe8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   12fc0:	0012ec80 	call	12ec8 <alt_get_errno>
   12fc4:	1007883a 	mov	r3,r2
   12fc8:	00800344 	movi	r2,13
   12fcc:	18800015 	stw	r2,0(r3)
   12fd0:	00000406 	br	12fe4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   12fd4:	0012ec80 	call	12ec8 <alt_get_errno>
   12fd8:	1007883a 	mov	r3,r2
   12fdc:	00801444 	movi	r2,81
   12fe0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   12fe4:	00bfffc4 	movi	r2,-1
}
   12fe8:	e037883a 	mov	sp,fp
   12fec:	dfc00117 	ldw	ra,4(sp)
   12ff0:	df000017 	ldw	fp,0(sp)
   12ff4:	dec00204 	addi	sp,sp,8
   12ff8:	f800283a 	ret

00012ffc <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   12ffc:	deffdf04 	addi	sp,sp,-132
   13000:	dfc02015 	stw	ra,128(sp)
   13004:	df001f15 	stw	fp,124(sp)
   13008:	df001f04 	addi	fp,sp,124
   1300c:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   13010:	e0bfe204 	addi	r2,fp,-120
   13014:	100b883a 	mov	r5,r2
   13018:	01003fc4 	movi	r4,255
   1301c:	001a4640 	call	1a464 <OSTaskQuery>
   13020:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   13024:	e0bffe83 	ldbu	r2,-6(fp)
   13028:	10803fcc 	andi	r2,r2,255
   1302c:	10001e1e 	bne	r2,zero,130a8 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
   13030:	e0bfee83 	ldbu	r2,-70(fp)
   13034:	10803fcc 	andi	r2,r2,255
   13038:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   1303c:	d0a81617 	ldw	r2,-24488(gp)
   13040:	e0fffd04 	addi	r3,fp,-12
   13044:	180b883a 	mov	r5,r3
   13048:	1009883a 	mov	r4,r2
   1304c:	0018c7c0 	call	18c7c <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   13050:	e0bffe43 	ldbu	r2,-7(fp)
   13054:	10803fcc 	andi	r2,r2,255
   13058:	10000726 	beq	r2,zero,13078 <__env_lock+0x7c>
   1305c:	d0a00e17 	ldw	r2,-32712(gp)
   13060:	e0ffe117 	ldw	r3,-124(fp)
   13064:	1880041e 	bne	r3,r2,13078 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
   13068:	d0a81517 	ldw	r2,-24492(gp)
   1306c:	10800044 	addi	r2,r2,1
   13070:	d0a81515 	stw	r2,-24492(gp)
   13074:	00000a06 	br	130a0 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   13078:	d0a81617 	ldw	r2,-24488(gp)
   1307c:	e0fffe84 	addi	r3,fp,-6
   13080:	180d883a 	mov	r6,r3
   13084:	000b883a 	mov	r5,zero
   13088:	1009883a 	mov	r4,r2
   1308c:	00187f40 	call	187f4 <OSSemPend>
    locks  = 1;
   13090:	00800044 	movi	r2,1
   13094:	d0a81515 	stw	r2,-24492(gp)
    lockid = id;
   13098:	e0bfe117 	ldw	r2,-124(fp)
   1309c:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   130a0:	0001883a 	nop
   130a4:	00000106 	br	130ac <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   130a8:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   130ac:	e037883a 	mov	sp,fp
   130b0:	dfc00117 	ldw	ra,4(sp)
   130b4:	df000017 	ldw	fp,0(sp)
   130b8:	dec00204 	addi	sp,sp,8
   130bc:	f800283a 	ret

000130c0 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   130c0:	defffd04 	addi	sp,sp,-12
   130c4:	dfc00215 	stw	ra,8(sp)
   130c8:	df000115 	stw	fp,4(sp)
   130cc:	df000104 	addi	fp,sp,4
   130d0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   130d4:	d0a81517 	ldw	r2,-24492(gp)
   130d8:	10000b26 	beq	r2,zero,13108 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   130dc:	d0a81517 	ldw	r2,-24492(gp)
   130e0:	10bfffc4 	addi	r2,r2,-1
   130e4:	d0a81515 	stw	r2,-24492(gp)
   130e8:	d0a81517 	ldw	r2,-24492(gp)
   130ec:	1000071e 	bne	r2,zero,1310c <__env_unlock+0x4c>
  {
    lockid = -1;
   130f0:	00bfffc4 	movi	r2,-1
   130f4:	d0a00e15 	stw	r2,-32712(gp)
    OSSemPost( alt_envsem );
   130f8:	d0a81617 	ldw	r2,-24488(gp)
   130fc:	1009883a 	mov	r4,r2
   13100:	0018b6c0 	call	18b6c <OSSemPost>
   13104:	00000106 	br	1310c <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
   13108:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   1310c:	e037883a 	mov	sp,fp
   13110:	dfc00117 	ldw	ra,4(sp)
   13114:	df000017 	ldw	fp,0(sp)
   13118:	dec00204 	addi	sp,sp,8
   1311c:	f800283a 	ret

00013120 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   13120:	deffdb04 	addi	sp,sp,-148
   13124:	dfc02415 	stw	ra,144(sp)
   13128:	df002315 	stw	fp,140(sp)
   1312c:	df002304 	addi	fp,sp,140
   13130:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13134:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   13138:	d0a81943 	ldbu	r2,-24475(gp)
   1313c:	10803fcc 	andi	r2,r2,255
   13140:	10800060 	cmpeqi	r2,r2,1
   13144:	10003626 	beq	r2,zero,13220 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   13148:	e0bfe204 	addi	r2,fp,-120
   1314c:	100b883a 	mov	r5,r2
   13150:	01003fc4 	movi	r4,255
   13154:	001a4640 	call	1a464 <OSTaskQuery>
   13158:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   1315c:	e0bffe83 	ldbu	r2,-6(fp)
   13160:	10803fcc 	andi	r2,r2,255
   13164:	1000301e 	bne	r2,zero,13228 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
   13168:	e0bfee83 	ldbu	r2,-70(fp)
   1316c:	10803fcc 	andi	r2,r2,255
   13170:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   13174:	d0a81817 	ldw	r2,-24480(gp)
   13178:	e0fffd04 	addi	r3,fp,-12
   1317c:	180b883a 	mov	r5,r3
   13180:	1009883a 	mov	r4,r2
   13184:	0018c7c0 	call	18c7c <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13188:	0005303a 	rdctl	r2,status
   1318c:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13190:	e0ffe117 	ldw	r3,-124(fp)
   13194:	00bfff84 	movi	r2,-2
   13198:	1884703a 	and	r2,r3,r2
   1319c:	1001703a 	wrctl	status,r2
  
  return context;
   131a0:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
   131a4:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   131a8:	e0bffd0b 	ldhu	r2,-12(fp)
   131ac:	10bfffcc 	andi	r2,r2,65535
   131b0:	10000b1e 	bne	r2,zero,131e0 <__malloc_lock+0xc0>
   131b4:	d0a00f17 	ldw	r2,-32708(gp)
   131b8:	e0ffde17 	ldw	r3,-136(fp)
   131bc:	1880081e 	bne	r3,r2,131e0 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
   131c0:	d0a81717 	ldw	r2,-24484(gp)
   131c4:	10800044 	addi	r2,r2,1
   131c8:	d0a81715 	stw	r2,-24484(gp)
   131cc:	e0bfdd17 	ldw	r2,-140(fp)
   131d0:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   131d4:	e0bfdf17 	ldw	r2,-132(fp)
   131d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   131dc:	00000e06 	br	13218 <__malloc_lock+0xf8>
   131e0:	e0bfdd17 	ldw	r2,-140(fp)
   131e4:	e0bfe015 	stw	r2,-128(fp)
   131e8:	e0bfe017 	ldw	r2,-128(fp)
   131ec:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   131f0:	d0a81817 	ldw	r2,-24480(gp)
   131f4:	e0fffe84 	addi	r3,fp,-6
   131f8:	180d883a 	mov	r6,r3
   131fc:	000b883a 	mov	r5,zero
   13200:	1009883a 	mov	r4,r2
   13204:	00187f40 	call	187f4 <OSSemPend>
    locks  = 1;
   13208:	00800044 	movi	r2,1
   1320c:	d0a81715 	stw	r2,-24484(gp)
    lockid = id;
   13210:	e0bfde17 	ldw	r2,-136(fp)
   13214:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   13218:	0001883a 	nop
   1321c:	00000306 	br	1322c <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
   13220:	0001883a 	nop
   13224:	00000106 	br	1322c <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   13228:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   1322c:	e037883a 	mov	sp,fp
   13230:	dfc00117 	ldw	ra,4(sp)
   13234:	df000017 	ldw	fp,0(sp)
   13238:	dec00204 	addi	sp,sp,8
   1323c:	f800283a 	ret

00013240 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   13240:	defff804 	addi	sp,sp,-32
   13244:	dfc00715 	stw	ra,28(sp)
   13248:	df000615 	stw	fp,24(sp)
   1324c:	df000604 	addi	fp,sp,24
   13250:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13254:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   13258:	d0a81943 	ldbu	r2,-24475(gp)
   1325c:	10803fcc 	andi	r2,r2,255
   13260:	10800060 	cmpeqi	r2,r2,1
   13264:	10002326 	beq	r2,zero,132f4 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13268:	0005303a 	rdctl	r2,status
   1326c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13270:	e0fffe17 	ldw	r3,-8(fp)
   13274:	00bfff84 	movi	r2,-2
   13278:	1884703a 	and	r2,r3,r2
   1327c:	1001703a 	wrctl	status,r2
  
  return context;
   13280:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
   13284:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   13288:	d0a81717 	ldw	r2,-24484(gp)
   1328c:	1000051e 	bne	r2,zero,132a4 <__malloc_unlock+0x64>
   13290:	e0bffa17 	ldw	r2,-24(fp)
   13294:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13298:	e0bffb17 	ldw	r2,-20(fp)
   1329c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   132a0:	00001506 	br	132f8 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   132a4:	d0a81717 	ldw	r2,-24484(gp)
   132a8:	10bfffc4 	addi	r2,r2,-1
   132ac:	d0a81715 	stw	r2,-24484(gp)
   132b0:	d0a81717 	ldw	r2,-24484(gp)
   132b4:	10000a1e 	bne	r2,zero,132e0 <__malloc_unlock+0xa0>
  {
    lockid = -1;
   132b8:	00bfffc4 	movi	r2,-1
   132bc:	d0a00f15 	stw	r2,-32708(gp)
   132c0:	e0bffa17 	ldw	r2,-24(fp)
   132c4:	e0bffc15 	stw	r2,-16(fp)
   132c8:	e0bffc17 	ldw	r2,-16(fp)
   132cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   132d0:	d0a81817 	ldw	r2,-24480(gp)
   132d4:	1009883a 	mov	r4,r2
   132d8:	0018b6c0 	call	18b6c <OSSemPost>
   132dc:	00000606 	br	132f8 <__malloc_unlock+0xb8>
   132e0:	e0bffa17 	ldw	r2,-24(fp)
   132e4:	e0bffd15 	stw	r2,-12(fp)
   132e8:	e0bffd17 	ldw	r2,-12(fp)
   132ec:	1001703a 	wrctl	status,r2
   132f0:	00000106 	br	132f8 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
   132f4:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   132f8:	e037883a 	mov	sp,fp
   132fc:	dfc00117 	ldw	ra,4(sp)
   13300:	df000017 	ldw	fp,0(sp)
   13304:	dec00204 	addi	sp,sp,8
   13308:	f800283a 	ret

0001330c <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   1330c:	defff704 	addi	sp,sp,-36
   13310:	dfc00815 	stw	ra,32(sp)
   13314:	df000715 	stw	fp,28(sp)
   13318:	df000704 	addi	fp,sp,28
   1331c:	e13ffd15 	stw	r4,-12(fp)
   13320:	e17ffe15 	stw	r5,-8(fp)
   13324:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13328:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1332c:	e0bfff17 	ldw	r2,-4(fp)
   13330:	1000021e 	bne	r2,zero,1333c <OSEventNameGet+0x30>
        return (0);
   13334:	0005883a 	mov	r2,zero
   13338:	00003706 	br	13418 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   1333c:	e0bffd17 	ldw	r2,-12(fp)
   13340:	1000051e 	bne	r2,zero,13358 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   13344:	e0bfff17 	ldw	r2,-4(fp)
   13348:	00c00104 	movi	r3,4
   1334c:	10c00005 	stb	r3,0(r2)
        return (0);
   13350:	0005883a 	mov	r2,zero
   13354:	00003006 	br	13418 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   13358:	e0bffe17 	ldw	r2,-8(fp)
   1335c:	1000051e 	bne	r2,zero,13374 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   13360:	e0bfff17 	ldw	r2,-4(fp)
   13364:	00c00304 	movi	r3,12
   13368:	10c00005 	stb	r3,0(r2)
        return (0);
   1336c:	0005883a 	mov	r2,zero
   13370:	00002906 	br	13418 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   13374:	d0a82703 	ldbu	r2,-24420(gp)
   13378:	10803fcc 	andi	r2,r2,255
   1337c:	10000526 	beq	r2,zero,13394 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   13380:	e0bfff17 	ldw	r2,-4(fp)
   13384:	00c00444 	movi	r3,17
   13388:	10c00005 	stb	r3,0(r2)
        return (0);
   1338c:	0005883a 	mov	r2,zero
   13390:	00002106 	br	13418 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   13394:	e0bffd17 	ldw	r2,-12(fp)
   13398:	10800003 	ldbu	r2,0(r2)
   1339c:	10803fcc 	andi	r2,r2,255
   133a0:	10bfffc4 	addi	r2,r2,-1
   133a4:	10800128 	cmpgeui	r2,r2,4
   133a8:	10000526 	beq	r2,zero,133c0 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   133ac:	e0bfff17 	ldw	r2,-4(fp)
   133b0:	00c00044 	movi	r3,1
   133b4:	10c00005 	stb	r3,0(r2)
             return (0);
   133b8:	0005883a 	mov	r2,zero
   133bc:	00001606 	br	13418 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   133c0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   133c4:	0005303a 	rdctl	r2,status
   133c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   133cc:	e0fffb17 	ldw	r3,-20(fp)
   133d0:	00bfff84 	movi	r2,-2
   133d4:	1884703a 	and	r2,r3,r2
   133d8:	1001703a 	wrctl	status,r2
  
  return context;
   133dc:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   133e0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   133e4:	e0bffd17 	ldw	r2,-12(fp)
   133e8:	10800384 	addi	r2,r2,14
   133ec:	100b883a 	mov	r5,r2
   133f0:	e13ffe17 	ldw	r4,-8(fp)
   133f4:	0014d900 	call	14d90 <OS_StrCopy>
   133f8:	e0bffa05 	stb	r2,-24(fp)
   133fc:	e0bff917 	ldw	r2,-28(fp)
   13400:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13404:	e0bffc17 	ldw	r2,-16(fp)
   13408:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1340c:	e0bfff17 	ldw	r2,-4(fp)
   13410:	10000005 	stb	zero,0(r2)
    return (len);
   13414:	e0bffa03 	ldbu	r2,-24(fp)
}
   13418:	e037883a 	mov	sp,fp
   1341c:	dfc00117 	ldw	ra,4(sp)
   13420:	df000017 	ldw	fp,0(sp)
   13424:	dec00204 	addi	sp,sp,8
   13428:	f800283a 	ret

0001342c <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   1342c:	defff604 	addi	sp,sp,-40
   13430:	dfc00915 	stw	ra,36(sp)
   13434:	df000815 	stw	fp,32(sp)
   13438:	df000804 	addi	fp,sp,32
   1343c:	e13ffd15 	stw	r4,-12(fp)
   13440:	e17ffe15 	stw	r5,-8(fp)
   13444:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13448:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1344c:	e0bfff17 	ldw	r2,-4(fp)
   13450:	10004026 	beq	r2,zero,13554 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   13454:	e0bffd17 	ldw	r2,-12(fp)
   13458:	1000041e 	bne	r2,zero,1346c <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   1345c:	e0bfff17 	ldw	r2,-4(fp)
   13460:	00c00104 	movi	r3,4
   13464:	10c00005 	stb	r3,0(r2)
        return;
   13468:	00003b06 	br	13558 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1346c:	e0bffe17 	ldw	r2,-8(fp)
   13470:	1000041e 	bne	r2,zero,13484 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   13474:	e0bfff17 	ldw	r2,-4(fp)
   13478:	00c00304 	movi	r3,12
   1347c:	10c00005 	stb	r3,0(r2)
        return;
   13480:	00003506 	br	13558 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   13484:	d0a82703 	ldbu	r2,-24420(gp)
   13488:	10803fcc 	andi	r2,r2,255
   1348c:	10000426 	beq	r2,zero,134a0 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   13490:	e0bfff17 	ldw	r2,-4(fp)
   13494:	00c00484 	movi	r3,18
   13498:	10c00005 	stb	r3,0(r2)
        return;
   1349c:	00002e06 	br	13558 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
   134a0:	e0bffd17 	ldw	r2,-12(fp)
   134a4:	10800003 	ldbu	r2,0(r2)
   134a8:	10803fcc 	andi	r2,r2,255
   134ac:	10bfffc4 	addi	r2,r2,-1
   134b0:	10800128 	cmpgeui	r2,r2,4
   134b4:	10000426 	beq	r2,zero,134c8 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   134b8:	e0bfff17 	ldw	r2,-4(fp)
   134bc:	00c00044 	movi	r3,1
   134c0:	10c00005 	stb	r3,0(r2)
             return;
   134c4:	00002406 	br	13558 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   134c8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   134cc:	0005303a 	rdctl	r2,status
   134d0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   134d4:	e0fffc17 	ldw	r3,-16(fp)
   134d8:	00bfff84 	movi	r2,-2
   134dc:	1884703a 	and	r2,r3,r2
   134e0:	1001703a 	wrctl	status,r2
  
  return context;
   134e4:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   134e8:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   134ec:	e13ffe17 	ldw	r4,-8(fp)
   134f0:	0014e040 	call	14e04 <OS_StrLen>
   134f4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   134f8:	e0bffa03 	ldbu	r2,-24(fp)
   134fc:	10800830 	cmpltui	r2,r2,32
   13500:	1000081e 	bne	r2,zero,13524 <OSEventNameSet+0xf8>
   13504:	e0bff817 	ldw	r2,-32(fp)
   13508:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1350c:	e0bff917 	ldw	r2,-28(fp)
   13510:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   13514:	e0bfff17 	ldw	r2,-4(fp)
   13518:	00c002c4 	movi	r3,11
   1351c:	10c00005 	stb	r3,0(r2)
        return;
   13520:	00000d06 	br	13558 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   13524:	e0bffd17 	ldw	r2,-12(fp)
   13528:	10800384 	addi	r2,r2,14
   1352c:	e17ffe17 	ldw	r5,-8(fp)
   13530:	1009883a 	mov	r4,r2
   13534:	0014d900 	call	14d90 <OS_StrCopy>
   13538:	e0bff817 	ldw	r2,-32(fp)
   1353c:	e0bffb15 	stw	r2,-20(fp)
   13540:	e0bffb17 	ldw	r2,-20(fp)
   13544:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13548:	e0bfff17 	ldw	r2,-4(fp)
   1354c:	10000005 	stb	zero,0(r2)
   13550:	00000106 	br	13558 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   13554:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   13558:	e037883a 	mov	sp,fp
   1355c:	dfc00117 	ldw	ra,4(sp)
   13560:	df000017 	ldw	fp,0(sp)
   13564:	dec00204 	addi	sp,sp,8
   13568:	f800283a 	ret

0001356c <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   1356c:	deffed04 	addi	sp,sp,-76
   13570:	dfc01215 	stw	ra,72(sp)
   13574:	df001115 	stw	fp,68(sp)
   13578:	df001104 	addi	fp,sp,68
   1357c:	e13ffc15 	stw	r4,-16(fp)
   13580:	e17ffd15 	stw	r5,-12(fp)
   13584:	e1bffe15 	stw	r6,-8(fp)
   13588:	3805883a 	mov	r2,r7
   1358c:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   13590:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   13594:	e0800217 	ldw	r2,8(fp)
   13598:	1000021e 	bne	r2,zero,135a4 <OSEventPendMulti+0x38>
        return (0);
   1359c:	0005883a 	mov	r2,zero
   135a0:	00017106 	br	13b68 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   135a4:	e0bffc17 	ldw	r2,-16(fp)
   135a8:	1000051e 	bne	r2,zero,135c0 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   135ac:	e0800217 	ldw	r2,8(fp)
   135b0:	00c00104 	movi	r3,4
   135b4:	10c00005 	stb	r3,0(r2)
        return (0);
   135b8:	0005883a 	mov	r2,zero
   135bc:	00016a06 	br	13b68 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   135c0:	e0bffd17 	ldw	r2,-12(fp)
   135c4:	1000051e 	bne	r2,zero,135dc <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   135c8:	e0800217 	ldw	r2,8(fp)
   135cc:	00c00104 	movi	r3,4
   135d0:	10c00005 	stb	r3,0(r2)
        return (0);
   135d4:	0005883a 	mov	r2,zero
   135d8:	00016306 	br	13b68 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   135dc:	e0bffe17 	ldw	r2,-8(fp)
   135e0:	1000051e 	bne	r2,zero,135f8 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   135e4:	e0800217 	ldw	r2,8(fp)
   135e8:	00c00104 	movi	r3,4
   135ec:	10c00005 	stb	r3,0(r2)
        return (0);
   135f0:	0005883a 	mov	r2,zero
   135f4:	00015c06 	br	13b68 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   135f8:	e0bffd17 	ldw	r2,-12(fp)
   135fc:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   13600:	e0bffc17 	ldw	r2,-16(fp)
   13604:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   13608:	e0bfef17 	ldw	r2,-68(fp)
   1360c:	10800017 	ldw	r2,0(r2)
   13610:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   13614:	00001906 	br	1367c <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   13618:	e0bff017 	ldw	r2,-64(fp)
   1361c:	10800003 	ldbu	r2,0(r2)
   13620:	10803fcc 	andi	r2,r2,255
   13624:	10c000a0 	cmpeqi	r3,r2,2
   13628:	1800091e 	bne	r3,zero,13650 <OSEventPendMulti+0xe4>
   1362c:	10c000e0 	cmpeqi	r3,r2,3
   13630:	1800091e 	bne	r3,zero,13658 <OSEventPendMulti+0xec>
   13634:	10800060 	cmpeqi	r2,r2,1
   13638:	1000091e 	bne	r2,zero,13660 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   1363c:	e0800217 	ldw	r2,8(fp)
   13640:	00c00044 	movi	r3,1
   13644:	10c00005 	stb	r3,0(r2)
                 return (0);
   13648:	0005883a 	mov	r2,zero
   1364c:	00014606 	br	13b68 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   13650:	0001883a 	nop
   13654:	00000306 	br	13664 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   13658:	0001883a 	nop
   1365c:	00000106 	br	13664 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   13660:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   13664:	e0bfef17 	ldw	r2,-68(fp)
   13668:	10800104 	addi	r2,r2,4
   1366c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   13670:	e0bfef17 	ldw	r2,-68(fp)
   13674:	10800017 	ldw	r2,0(r2)
   13678:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   1367c:	e0bff017 	ldw	r2,-64(fp)
   13680:	103fe51e 	bne	r2,zero,13618 <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   13684:	d0a82703 	ldbu	r2,-24420(gp)
   13688:	10803fcc 	andi	r2,r2,255
   1368c:	10000526 	beq	r2,zero,136a4 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   13690:	e0800217 	ldw	r2,8(fp)
   13694:	00c00084 	movi	r3,2
   13698:	10c00005 	stb	r3,0(r2)
        return (0);
   1369c:	0005883a 	mov	r2,zero
   136a0:	00013106 	br	13b68 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   136a4:	d0a81903 	ldbu	r2,-24476(gp)
   136a8:	10803fcc 	andi	r2,r2,255
   136ac:	10000526 	beq	r2,zero,136c4 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   136b0:	e0800217 	ldw	r2,8(fp)
   136b4:	00c00344 	movi	r3,13
   136b8:	10c00005 	stb	r3,0(r2)
        return (0);
   136bc:	0005883a 	mov	r2,zero
   136c0:	00012906 	br	13b68 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   136c4:	0005303a 	rdctl	r2,status
   136c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   136cc:	e0fffb17 	ldw	r3,-20(fp)
   136d0:	00bfff84 	movi	r2,-2
   136d4:	1884703a 	and	r2,r3,r2
   136d8:	1001703a 	wrctl	status,r2
  
  return context;
   136dc:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   136e0:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   136e4:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   136e8:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   136ec:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   136f0:	e0bffc17 	ldw	r2,-16(fp)
   136f4:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   136f8:	e0bfef17 	ldw	r2,-68(fp)
   136fc:	10800017 	ldw	r2,0(r2)
   13700:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   13704:	00008106 	br	1390c <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   13708:	e0bff017 	ldw	r2,-64(fp)
   1370c:	10800003 	ldbu	r2,0(r2)
   13710:	10803fcc 	andi	r2,r2,255
   13714:	10c000a0 	cmpeqi	r3,r2,2
   13718:	18003c1e 	bne	r3,zero,1380c <OSEventPendMulti+0x2a0>
   1371c:	10c000e0 	cmpeqi	r3,r2,3
   13720:	1800031e 	bne	r3,zero,13730 <OSEventPendMulti+0x1c4>
   13724:	10800060 	cmpeqi	r2,r2,1
   13728:	10001e1e 	bne	r2,zero,137a4 <OSEventPendMulti+0x238>
   1372c:	00006606 	br	138c8 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   13730:	e0bff017 	ldw	r2,-64(fp)
   13734:	1080020b 	ldhu	r2,8(r2)
   13738:	10bfffcc 	andi	r2,r2,65535
   1373c:	10001526 	beq	r2,zero,13794 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   13740:	e0bff017 	ldw	r2,-64(fp)
   13744:	1080020b 	ldhu	r2,8(r2)
   13748:	10bfffc4 	addi	r2,r2,-1
   1374c:	1007883a 	mov	r3,r2
   13750:	e0bff017 	ldw	r2,-64(fp)
   13754:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   13758:	e0bffd17 	ldw	r2,-12(fp)
   1375c:	10c00104 	addi	r3,r2,4
   13760:	e0fffd15 	stw	r3,-12(fp)
   13764:	e0fff017 	ldw	r3,-64(fp)
   13768:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   1376c:	00800044 	movi	r2,1
   13770:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   13774:	e0bffe17 	ldw	r2,-8(fp)
   13778:	10c00104 	addi	r3,r2,4
   1377c:	e0fffe15 	stw	r3,-8(fp)
   13780:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   13784:	e0bff18b 	ldhu	r2,-58(fp)
   13788:	10800044 	addi	r2,r2,1
   1378c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   13790:	00005806 	br	138f4 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   13794:	e0bff203 	ldbu	r2,-56(fp)
   13798:	10800054 	ori	r2,r2,1
   1379c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   137a0:	00005406 	br	138f4 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   137a4:	e0bff017 	ldw	r2,-64(fp)
   137a8:	10800117 	ldw	r2,4(r2)
   137ac:	10001326 	beq	r2,zero,137fc <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   137b0:	e0bffe17 	ldw	r2,-8(fp)
   137b4:	10c00104 	addi	r3,r2,4
   137b8:	e0fffe15 	stw	r3,-8(fp)
   137bc:	e0fff017 	ldw	r3,-64(fp)
   137c0:	18c00117 	ldw	r3,4(r3)
   137c4:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   137c8:	e0bff017 	ldw	r2,-64(fp)
   137cc:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   137d0:	e0bffd17 	ldw	r2,-12(fp)
   137d4:	10c00104 	addi	r3,r2,4
   137d8:	e0fffd15 	stw	r3,-12(fp)
   137dc:	e0fff017 	ldw	r3,-64(fp)
   137e0:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   137e4:	00800044 	movi	r2,1
   137e8:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   137ec:	e0bff18b 	ldhu	r2,-58(fp)
   137f0:	10800044 	addi	r2,r2,1
   137f4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   137f8:	00003e06 	br	138f4 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   137fc:	e0bff203 	ldbu	r2,-56(fp)
   13800:	10800094 	ori	r2,r2,2
   13804:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   13808:	00003a06 	br	138f4 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   1380c:	e0bff017 	ldw	r2,-64(fp)
   13810:	10800117 	ldw	r2,4(r2)
   13814:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   13818:	e0bff517 	ldw	r2,-44(fp)
   1381c:	1080058b 	ldhu	r2,22(r2)
   13820:	10bfffcc 	andi	r2,r2,65535
   13824:	10002426 	beq	r2,zero,138b8 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   13828:	e0bffe17 	ldw	r2,-8(fp)
   1382c:	10c00104 	addi	r3,r2,4
   13830:	e0fffe15 	stw	r3,-8(fp)
   13834:	e0fff517 	ldw	r3,-44(fp)
   13838:	18c00417 	ldw	r3,16(r3)
   1383c:	19400104 	addi	r5,r3,4
   13840:	e13ff517 	ldw	r4,-44(fp)
   13844:	21400415 	stw	r5,16(r4)
   13848:	18c00017 	ldw	r3,0(r3)
   1384c:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   13850:	e0bff517 	ldw	r2,-44(fp)
   13854:	10c00417 	ldw	r3,16(r2)
   13858:	e0bff517 	ldw	r2,-44(fp)
   1385c:	10800217 	ldw	r2,8(r2)
   13860:	1880041e 	bne	r3,r2,13874 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   13864:	e0bff517 	ldw	r2,-44(fp)
   13868:	10c00117 	ldw	r3,4(r2)
   1386c:	e0bff517 	ldw	r2,-44(fp)
   13870:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   13874:	e0bff517 	ldw	r2,-44(fp)
   13878:	1080058b 	ldhu	r2,22(r2)
   1387c:	10bfffc4 	addi	r2,r2,-1
   13880:	1007883a 	mov	r3,r2
   13884:	e0bff517 	ldw	r2,-44(fp)
   13888:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   1388c:	e0bffd17 	ldw	r2,-12(fp)
   13890:	10c00104 	addi	r3,r2,4
   13894:	e0fffd15 	stw	r3,-12(fp)
   13898:	e0fff017 	ldw	r3,-64(fp)
   1389c:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   138a0:	00800044 	movi	r2,1
   138a4:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   138a8:	e0bff18b 	ldhu	r2,-58(fp)
   138ac:	10800044 	addi	r2,r2,1
   138b0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   138b4:	00000f06 	br	138f4 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   138b8:	e0bff203 	ldbu	r2,-56(fp)
   138bc:	10800114 	ori	r2,r2,4
   138c0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   138c4:	00000b06 	br	138f4 <OSEventPendMulti+0x388>
   138c8:	e0bff317 	ldw	r2,-52(fp)
   138cc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   138d0:	e0bff417 	ldw	r2,-48(fp)
   138d4:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   138d8:	e0bffd17 	ldw	r2,-12(fp)
   138dc:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   138e0:	e0800217 	ldw	r2,8(fp)
   138e4:	00c00044 	movi	r3,1
   138e8:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   138ec:	e0bff18b 	ldhu	r2,-58(fp)
   138f0:	00009d06 	br	13b68 <OSEventPendMulti+0x5fc>
        }
        pevents++;
   138f4:	e0bfef17 	ldw	r2,-68(fp)
   138f8:	10800104 	addi	r2,r2,4
   138fc:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   13900:	e0bfef17 	ldw	r2,-68(fp)
   13904:	10800017 	ldw	r2,0(r2)
   13908:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   1390c:	e0bff017 	ldw	r2,-64(fp)
   13910:	103f7d1e 	bne	r2,zero,13708 <OSEventPendMulti+0x19c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   13914:	e0bff103 	ldbu	r2,-60(fp)
   13918:	10800058 	cmpnei	r2,r2,1
   1391c:	10000a1e 	bne	r2,zero,13948 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   13920:	e0bffd17 	ldw	r2,-12(fp)
   13924:	10000015 	stw	zero,0(r2)
   13928:	e0bff317 	ldw	r2,-52(fp)
   1392c:	e0bff615 	stw	r2,-40(fp)
   13930:	e0bff617 	ldw	r2,-40(fp)
   13934:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   13938:	e0800217 	ldw	r2,8(fp)
   1393c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   13940:	e0bff18b 	ldhu	r2,-58(fp)
   13944:	00008806 	br	13b68 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   13948:	d0a82817 	ldw	r2,-24416(gp)
   1394c:	d0e82817 	ldw	r3,-24416(gp)
   13950:	19000c03 	ldbu	r4,48(r3)
   13954:	e0fff203 	ldbu	r3,-56(fp)
   13958:	20c6b03a 	or	r3,r4,r3
   1395c:	1809883a 	mov	r4,r3
   13960:	00ffe004 	movi	r3,-128
   13964:	20c6b03a 	or	r3,r4,r3
   13968:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1396c:	d0a82817 	ldw	r2,-24416(gp)
   13970:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   13974:	d0a82817 	ldw	r2,-24416(gp)
   13978:	e0ffff0b 	ldhu	r3,-4(fp)
   1397c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   13980:	e13ffc17 	ldw	r4,-16(fp)
   13984:	00144a80 	call	144a8 <OS_EventTaskWaitMulti>
   13988:	e0bff317 	ldw	r2,-52(fp)
   1398c:	e0bff915 	stw	r2,-28(fp)
   13990:	e0bff917 	ldw	r2,-28(fp)
   13994:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   13998:	0014c4c0 	call	14c4c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1399c:	0005303a 	rdctl	r2,status
   139a0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   139a4:	e0fff717 	ldw	r3,-36(fp)
   139a8:	00bfff84 	movi	r2,-2
   139ac:	1884703a 	and	r2,r3,r2
   139b0:	1001703a 	wrctl	status,r2
  
  return context;
   139b4:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   139b8:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   139bc:	d0a82817 	ldw	r2,-24416(gp)
   139c0:	10800c43 	ldbu	r2,49(r2)
   139c4:	10803fcc 	andi	r2,r2,255
   139c8:	10000226 	beq	r2,zero,139d4 <OSEventPendMulti+0x468>
   139cc:	108000a0 	cmpeqi	r2,r2,2
   139d0:	10001826 	beq	r2,zero,13a34 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   139d4:	d0a82817 	ldw	r2,-24416(gp)
   139d8:	10800717 	ldw	r2,28(r2)
   139dc:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   139e0:	e0bff017 	ldw	r2,-64(fp)
   139e4:	10000b26 	beq	r2,zero,13a14 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   139e8:	e0bffd17 	ldw	r2,-12(fp)
   139ec:	10c00104 	addi	r3,r2,4
   139f0:	e0fffd15 	stw	r3,-12(fp)
   139f4:	e0fff017 	ldw	r3,-64(fp)
   139f8:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   139fc:	e0bffd17 	ldw	r2,-12(fp)
   13a00:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   13a04:	e0bff18b 	ldhu	r2,-58(fp)
   13a08:	10800044 	addi	r2,r2,1
   13a0c:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   13a10:	00000d06 	br	13a48 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   13a14:	d0a82817 	ldw	r2,-24416(gp)
   13a18:	00c00044 	movi	r3,1
   13a1c:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   13a20:	d0a82817 	ldw	r2,-24416(gp)
   13a24:	e17ffc17 	ldw	r5,-16(fp)
   13a28:	1009883a 	mov	r4,r2
   13a2c:	00146b00 	call	146b0 <OS_EventTaskRemoveMulti>
             }
			 break;
   13a30:	00000506 	br	13a48 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   13a34:	d0a82817 	ldw	r2,-24416(gp)
   13a38:	e17ffc17 	ldw	r5,-16(fp)
   13a3c:	1009883a 	mov	r4,r2
   13a40:	00146b00 	call	146b0 <OS_EventTaskRemoveMulti>
             break;
   13a44:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   13a48:	d0a82817 	ldw	r2,-24416(gp)
   13a4c:	10800c43 	ldbu	r2,49(r2)
   13a50:	10803fcc 	andi	r2,r2,255
   13a54:	10000326 	beq	r2,zero,13a64 <OSEventPendMulti+0x4f8>
   13a58:	108000a0 	cmpeqi	r2,r2,2
   13a5c:	1000231e 	bne	r2,zero,13aec <OSEventPendMulti+0x580>
   13a60:	00002a06 	br	13b0c <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   13a64:	e0bff017 	ldw	r2,-64(fp)
   13a68:	10800003 	ldbu	r2,0(r2)
   13a6c:	10803fcc 	andi	r2,r2,255
   13a70:	0080100e 	bge	zero,r2,13ab4 <OSEventPendMulti+0x548>
   13a74:	10c000d0 	cmplti	r3,r2,3
   13a78:	1800071e 	bne	r3,zero,13a98 <OSEventPendMulti+0x52c>
   13a7c:	108000e0 	cmpeqi	r2,r2,3
   13a80:	10000c26 	beq	r2,zero,13ab4 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   13a84:	e0bffe17 	ldw	r2,-8(fp)
   13a88:	10c00104 	addi	r3,r2,4
   13a8c:	e0fffe15 	stw	r3,-8(fp)
   13a90:	10000015 	stw	zero,0(r2)
                      break;
   13a94:	00001206 	br	13ae0 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   13a98:	e0bffe17 	ldw	r2,-8(fp)
   13a9c:	10c00104 	addi	r3,r2,4
   13aa0:	e0fffe15 	stw	r3,-8(fp)
   13aa4:	d0e82817 	ldw	r3,-24416(gp)
   13aa8:	18c00917 	ldw	r3,36(r3)
   13aac:	10c00015 	stw	r3,0(r2)
                      break;
   13ab0:	00000b06 	br	13ae0 <OSEventPendMulti+0x574>
   13ab4:	e0bff317 	ldw	r2,-52(fp)
   13ab8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13abc:	e0bff817 	ldw	r2,-32(fp)
   13ac0:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   13ac4:	e0bffd17 	ldw	r2,-12(fp)
   13ac8:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   13acc:	e0800217 	ldw	r2,8(fp)
   13ad0:	00c00044 	movi	r3,1
   13ad4:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   13ad8:	e0bff18b 	ldhu	r2,-58(fp)
   13adc:	00002206 	br	13b68 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   13ae0:	e0800217 	ldw	r2,8(fp)
   13ae4:	10000005 	stb	zero,0(r2)
             break;
   13ae8:	00001006 	br	13b2c <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   13aec:	e0bffe17 	ldw	r2,-8(fp)
   13af0:	10c00104 	addi	r3,r2,4
   13af4:	e0fffe15 	stw	r3,-8(fp)
   13af8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   13afc:	e0800217 	ldw	r2,8(fp)
   13b00:	00c00384 	movi	r3,14
   13b04:	10c00005 	stb	r3,0(r2)
             break;
   13b08:	00000806 	br	13b2c <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   13b0c:	e0bffe17 	ldw	r2,-8(fp)
   13b10:	10c00104 	addi	r3,r2,4
   13b14:	e0fffe15 	stw	r3,-8(fp)
   13b18:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   13b1c:	e0800217 	ldw	r2,8(fp)
   13b20:	00c00284 	movi	r3,10
   13b24:	10c00005 	stb	r3,0(r2)
             break;
   13b28:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   13b2c:	d0a82817 	ldw	r2,-24416(gp)
   13b30:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   13b34:	d0a82817 	ldw	r2,-24416(gp)
   13b38:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   13b3c:	d0a82817 	ldw	r2,-24416(gp)
   13b40:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   13b44:	d0a82817 	ldw	r2,-24416(gp)
   13b48:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   13b4c:	d0a82817 	ldw	r2,-24416(gp)
   13b50:	10000915 	stw	zero,36(r2)
   13b54:	e0bff317 	ldw	r2,-52(fp)
   13b58:	e0bffa15 	stw	r2,-24(fp)
   13b5c:	e0bffa17 	ldw	r2,-24(fp)
   13b60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   13b64:	e0bff18b 	ldhu	r2,-58(fp)
}
   13b68:	e037883a 	mov	sp,fp
   13b6c:	dfc00117 	ldw	ra,4(sp)
   13b70:	df000017 	ldw	fp,0(sp)
   13b74:	dec00204 	addi	sp,sp,8
   13b78:	f800283a 	ret

00013b7c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   13b7c:	defffe04 	addi	sp,sp,-8
   13b80:	dfc00115 	stw	ra,4(sp)
   13b84:	df000015 	stw	fp,0(sp)
   13b88:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   13b8c:	001e2f80 	call	1e2f8 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   13b90:	00148f80 	call	148f8 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   13b94:	00149400 	call	14940 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   13b98:	0014aac0 	call	14aac <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   13b9c:	00148180 	call	14818 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   13ba0:	001695c0 	call	1695c <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   13ba4:	001725c0 	call	1725c <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   13ba8:	00183840 	call	18384 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   13bac:	00149ac0 	call	149ac <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   13bb0:	0014a2c0 	call	14a2c <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   13bb4:	001e3180 	call	1e318 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   13bb8:	00153300 	call	15330 <OSDebugInit>
#endif
}
   13bbc:	0001883a 	nop
   13bc0:	e037883a 	mov	sp,fp
   13bc4:	dfc00117 	ldw	ra,4(sp)
   13bc8:	df000017 	ldw	fp,0(sp)
   13bcc:	dec00204 	addi	sp,sp,8
   13bd0:	f800283a 	ret

00013bd4 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   13bd4:	deffff04 	addi	sp,sp,-4
   13bd8:	df000015 	stw	fp,0(sp)
   13bdc:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
   13be0:	d0a81943 	ldbu	r2,-24475(gp)
   13be4:	10803fcc 	andi	r2,r2,255
   13be8:	10800058 	cmpnei	r2,r2,1
   13bec:	1000071e 	bne	r2,zero,13c0c <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
   13bf0:	d0a82703 	ldbu	r2,-24420(gp)
   13bf4:	10803fcc 	andi	r2,r2,255
   13bf8:	10803fe0 	cmpeqi	r2,r2,255
   13bfc:	1000031e 	bne	r2,zero,13c0c <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   13c00:	d0a82703 	ldbu	r2,-24420(gp)
   13c04:	10800044 	addi	r2,r2,1
   13c08:	d0a82705 	stb	r2,-24420(gp)
        }
    }
}
   13c0c:	0001883a 	nop
   13c10:	e037883a 	mov	sp,fp
   13c14:	df000017 	ldw	fp,0(sp)
   13c18:	dec00104 	addi	sp,sp,4
   13c1c:	f800283a 	ret

00013c20 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   13c20:	defffb04 	addi	sp,sp,-20
   13c24:	dfc00415 	stw	ra,16(sp)
   13c28:	df000315 	stw	fp,12(sp)
   13c2c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13c30:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   13c34:	d0a81943 	ldbu	r2,-24475(gp)
   13c38:	10803fcc 	andi	r2,r2,255
   13c3c:	10800058 	cmpnei	r2,r2,1
   13c40:	10002f1e 	bne	r2,zero,13d00 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13c44:	0005303a 	rdctl	r2,status
   13c48:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13c4c:	e0ffff17 	ldw	r3,-4(fp)
   13c50:	00bfff84 	movi	r2,-2
   13c54:	1884703a 	and	r2,r3,r2
   13c58:	1001703a 	wrctl	status,r2
  
  return context;
   13c5c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   13c60:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   13c64:	d0a82703 	ldbu	r2,-24420(gp)
   13c68:	10803fcc 	andi	r2,r2,255
   13c6c:	10000326 	beq	r2,zero,13c7c <OSIntExit+0x5c>
            OSIntNesting--;
   13c70:	d0a82703 	ldbu	r2,-24420(gp)
   13c74:	10bfffc4 	addi	r2,r2,-1
   13c78:	d0a82705 	stb	r2,-24420(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   13c7c:	d0a82703 	ldbu	r2,-24420(gp)
   13c80:	10803fcc 	andi	r2,r2,255
   13c84:	10001a1e 	bne	r2,zero,13cf0 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   13c88:	d0a81903 	ldbu	r2,-24476(gp)
   13c8c:	10803fcc 	andi	r2,r2,255
   13c90:	1000171e 	bne	r2,zero,13cf0 <OSIntExit+0xd0>
                OS_SchedNew();
   13c94:	0014d1c0 	call	14d1c <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   13c98:	d0e81b03 	ldbu	r3,-24468(gp)
   13c9c:	d0a81b43 	ldbu	r2,-24467(gp)
   13ca0:	18c03fcc 	andi	r3,r3,255
   13ca4:	10803fcc 	andi	r2,r2,255
   13ca8:	18801126 	beq	r3,r2,13cf0 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   13cac:	d0a81b03 	ldbu	r2,-24468(gp)
   13cb0:	10c03fcc 	andi	r3,r2,255
   13cb4:	008000f4 	movhi	r2,3
   13cb8:	1092f304 	addi	r2,r2,19404
   13cbc:	18c7883a 	add	r3,r3,r3
   13cc0:	18c7883a 	add	r3,r3,r3
   13cc4:	10c5883a 	add	r2,r2,r3
   13cc8:	10800017 	ldw	r2,0(r2)
   13ccc:	d0a82315 	stw	r2,-24436(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   13cd0:	d0a82317 	ldw	r2,-24436(gp)
   13cd4:	10c00e17 	ldw	r3,56(r2)
   13cd8:	18c00044 	addi	r3,r3,1
   13cdc:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   13ce0:	d0a81e17 	ldw	r2,-24456(gp)
   13ce4:	10800044 	addi	r2,r2,1
   13ce8:	d0a81e15 	stw	r2,-24456(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   13cec:	001e0240 	call	1e024 <OSCtxSw>
   13cf0:	e0bffd17 	ldw	r2,-12(fp)
   13cf4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13cf8:	e0bffe17 	ldw	r2,-8(fp)
   13cfc:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   13d00:	0001883a 	nop
   13d04:	e037883a 	mov	sp,fp
   13d08:	dfc00117 	ldw	ra,4(sp)
   13d0c:	df000017 	ldw	fp,0(sp)
   13d10:	dec00204 	addi	sp,sp,8
   13d14:	f800283a 	ret

00013d18 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   13d18:	defffc04 	addi	sp,sp,-16
   13d1c:	df000315 	stw	fp,12(sp)
   13d20:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13d24:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   13d28:	d0a81943 	ldbu	r2,-24475(gp)
   13d2c:	10803fcc 	andi	r2,r2,255
   13d30:	10800058 	cmpnei	r2,r2,1
   13d34:	1000161e 	bne	r2,zero,13d90 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13d38:	0005303a 	rdctl	r2,status
   13d3c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13d40:	e0ffff17 	ldw	r3,-4(fp)
   13d44:	00bfff84 	movi	r2,-2
   13d48:	1884703a 	and	r2,r3,r2
   13d4c:	1001703a 	wrctl	status,r2
  
  return context;
   13d50:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   13d54:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   13d58:	d0a82703 	ldbu	r2,-24420(gp)
   13d5c:	10803fcc 	andi	r2,r2,255
   13d60:	1000071e 	bne	r2,zero,13d80 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   13d64:	d0a81903 	ldbu	r2,-24476(gp)
   13d68:	10803fcc 	andi	r2,r2,255
   13d6c:	10803fe0 	cmpeqi	r2,r2,255
   13d70:	1000031e 	bne	r2,zero,13d80 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   13d74:	d0a81903 	ldbu	r2,-24476(gp)
   13d78:	10800044 	addi	r2,r2,1
   13d7c:	d0a81905 	stb	r2,-24476(gp)
   13d80:	e0bffd17 	ldw	r2,-12(fp)
   13d84:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13d88:	e0bffe17 	ldw	r2,-8(fp)
   13d8c:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   13d90:	0001883a 	nop
   13d94:	e037883a 	mov	sp,fp
   13d98:	df000017 	ldw	fp,0(sp)
   13d9c:	dec00104 	addi	sp,sp,4
   13da0:	f800283a 	ret

00013da4 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   13da4:	defff804 	addi	sp,sp,-32
   13da8:	dfc00715 	stw	ra,28(sp)
   13dac:	df000615 	stw	fp,24(sp)
   13db0:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13db4:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   13db8:	d0a81943 	ldbu	r2,-24475(gp)
   13dbc:	10803fcc 	andi	r2,r2,255
   13dc0:	10800058 	cmpnei	r2,r2,1
   13dc4:	1000281e 	bne	r2,zero,13e68 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13dc8:	0005303a 	rdctl	r2,status
   13dcc:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13dd0:	e0ffff17 	ldw	r3,-4(fp)
   13dd4:	00bfff84 	movi	r2,-2
   13dd8:	1884703a 	and	r2,r3,r2
   13ddc:	1001703a 	wrctl	status,r2
  
  return context;
   13de0:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   13de4:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   13de8:	d0a81903 	ldbu	r2,-24476(gp)
   13dec:	10803fcc 	andi	r2,r2,255
   13df0:	10001926 	beq	r2,zero,13e58 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   13df4:	d0a81903 	ldbu	r2,-24476(gp)
   13df8:	10bfffc4 	addi	r2,r2,-1
   13dfc:	d0a81905 	stb	r2,-24476(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   13e00:	d0a81903 	ldbu	r2,-24476(gp)
   13e04:	10803fcc 	andi	r2,r2,255
   13e08:	10000e1e 	bne	r2,zero,13e44 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   13e0c:	d0a82703 	ldbu	r2,-24420(gp)
   13e10:	10803fcc 	andi	r2,r2,255
   13e14:	1000061e 	bne	r2,zero,13e30 <OSSchedUnlock+0x8c>
   13e18:	e0bffa17 	ldw	r2,-24(fp)
   13e1c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13e20:	e0bffb17 	ldw	r2,-20(fp)
   13e24:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   13e28:	0014c4c0 	call	14c4c <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   13e2c:	00000e06 	br	13e68 <OSSchedUnlock+0xc4>
   13e30:	e0bffa17 	ldw	r2,-24(fp)
   13e34:	e0bffc15 	stw	r2,-16(fp)
   13e38:	e0bffc17 	ldw	r2,-16(fp)
   13e3c:	1001703a 	wrctl	status,r2
   13e40:	00000906 	br	13e68 <OSSchedUnlock+0xc4>
   13e44:	e0bffa17 	ldw	r2,-24(fp)
   13e48:	e0bffd15 	stw	r2,-12(fp)
   13e4c:	e0bffd17 	ldw	r2,-12(fp)
   13e50:	1001703a 	wrctl	status,r2
   13e54:	00000406 	br	13e68 <OSSchedUnlock+0xc4>
   13e58:	e0bffa17 	ldw	r2,-24(fp)
   13e5c:	e0bffe15 	stw	r2,-8(fp)
   13e60:	e0bffe17 	ldw	r2,-8(fp)
   13e64:	1001703a 	wrctl	status,r2
   13e68:	0001883a 	nop
   13e6c:	e037883a 	mov	sp,fp
   13e70:	dfc00117 	ldw	ra,4(sp)
   13e74:	df000017 	ldw	fp,0(sp)
   13e78:	dec00204 	addi	sp,sp,8
   13e7c:	f800283a 	ret

00013e80 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   13e80:	defffe04 	addi	sp,sp,-8
   13e84:	dfc00115 	stw	ra,4(sp)
   13e88:	df000015 	stw	fp,0(sp)
   13e8c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   13e90:	d0a81943 	ldbu	r2,-24475(gp)
   13e94:	10803fcc 	andi	r2,r2,255
   13e98:	10000f1e 	bne	r2,zero,13ed8 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   13e9c:	0014d1c0 	call	14d1c <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   13ea0:	d0a81b03 	ldbu	r2,-24468(gp)
   13ea4:	d0a81b45 	stb	r2,-24467(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   13ea8:	d0a81b03 	ldbu	r2,-24468(gp)
   13eac:	10c03fcc 	andi	r3,r2,255
   13eb0:	008000f4 	movhi	r2,3
   13eb4:	1092f304 	addi	r2,r2,19404
   13eb8:	18c7883a 	add	r3,r3,r3
   13ebc:	18c7883a 	add	r3,r3,r3
   13ec0:	10c5883a 	add	r2,r2,r3
   13ec4:	10800017 	ldw	r2,0(r2)
   13ec8:	d0a82315 	stw	r2,-24436(gp)
        OSTCBCur      = OSTCBHighRdy;
   13ecc:	d0a82317 	ldw	r2,-24436(gp)
   13ed0:	d0a82815 	stw	r2,-24416(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   13ed4:	001e0b00 	call	1e0b0 <OSStartHighRdy>
    }
}
   13ed8:	0001883a 	nop
   13edc:	e037883a 	mov	sp,fp
   13ee0:	dfc00117 	ldw	ra,4(sp)
   13ee4:	df000017 	ldw	fp,0(sp)
   13ee8:	dec00204 	addi	sp,sp,8
   13eec:	f800283a 	ret

00013ef0 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   13ef0:	defff904 	addi	sp,sp,-28
   13ef4:	dfc00615 	stw	ra,24(sp)
   13ef8:	df000515 	stw	fp,20(sp)
   13efc:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13f00:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   13f04:	01000084 	movi	r4,2
   13f08:	001a5f80 	call	1a5f8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13f0c:	0005303a 	rdctl	r2,status
   13f10:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13f14:	e0fffc17 	ldw	r3,-16(fp)
   13f18:	00bfff84 	movi	r2,-2
   13f1c:	1884703a 	and	r2,r3,r2
   13f20:	1001703a 	wrctl	status,r2
  
  return context;
   13f24:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   13f28:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   13f2c:	d0281a15 	stw	zero,-24472(gp)
   13f30:	e0bffb17 	ldw	r2,-20(fp)
   13f34:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13f38:	e0bffd17 	ldw	r2,-12(fp)
   13f3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   13f40:	0009883a 	mov	r4,zero
   13f44:	001a5f80 	call	1a5f8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13f48:	0005303a 	rdctl	r2,status
   13f4c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13f50:	e0fffe17 	ldw	r3,-8(fp)
   13f54:	00bfff84 	movi	r2,-2
   13f58:	1884703a 	and	r2,r3,r2
   13f5c:	1001703a 	wrctl	status,r2
  
  return context;
   13f60:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   13f64:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   13f68:	d0a81a17 	ldw	r2,-24472(gp)
   13f6c:	d0a81f15 	stw	r2,-24452(gp)
    OSStatRdy    = OS_TRUE;
   13f70:	00800044 	movi	r2,1
   13f74:	d0a82b05 	stb	r2,-24404(gp)
   13f78:	e0bffb17 	ldw	r2,-20(fp)
   13f7c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13f80:	e0bfff17 	ldw	r2,-4(fp)
   13f84:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   13f88:	0001883a 	nop
   13f8c:	e037883a 	mov	sp,fp
   13f90:	dfc00117 	ldw	ra,4(sp)
   13f94:	df000017 	ldw	fp,0(sp)
   13f98:	dec00204 	addi	sp,sp,8
   13f9c:	f800283a 	ret

00013fa0 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   13fa0:	defff704 	addi	sp,sp,-36
   13fa4:	dfc00815 	stw	ra,32(sp)
   13fa8:	df000715 	stw	fp,28(sp)
   13fac:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   13fb0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   13fb4:	001e2d80 	call	1e2d8 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13fb8:	0005303a 	rdctl	r2,status
   13fbc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13fc0:	e0fffd17 	ldw	r3,-12(fp)
   13fc4:	00bfff84 	movi	r2,-2
   13fc8:	1884703a 	and	r2,r3,r2
   13fcc:	1001703a 	wrctl	status,r2
  
  return context;
   13fd0:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   13fd4:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   13fd8:	d0a82917 	ldw	r2,-24412(gp)
   13fdc:	10800044 	addi	r2,r2,1
   13fe0:	d0a82915 	stw	r2,-24412(gp)
   13fe4:	e0bffb17 	ldw	r2,-20(fp)
   13fe8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13fec:	e0bfff17 	ldw	r2,-4(fp)
   13ff0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   13ff4:	d0a81943 	ldbu	r2,-24475(gp)
   13ff8:	10803fcc 	andi	r2,r2,255
   13ffc:	10800058 	cmpnei	r2,r2,1
   14000:	10006a1e 	bne	r2,zero,141ac <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   14004:	d0a81d03 	ldbu	r2,-24460(gp)
   14008:	10803fcc 	andi	r2,r2,255
   1400c:	10c00060 	cmpeqi	r3,r2,1
   14010:	1800061e 	bne	r3,zero,1402c <OSTimeTick+0x8c>
   14014:	10c000a0 	cmpeqi	r3,r2,2
   14018:	1800061e 	bne	r3,zero,14034 <OSTimeTick+0x94>
   1401c:	10000a1e 	bne	r2,zero,14048 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   14020:	00800044 	movi	r2,1
   14024:	e0bffa05 	stb	r2,-24(fp)
                 break;
   14028:	00000b06 	br	14058 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   1402c:	e03ffa05 	stb	zero,-24(fp)
                 break;
   14030:	00000906 	br	14058 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   14034:	00800044 	movi	r2,1
   14038:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   1403c:	00800044 	movi	r2,1
   14040:	d0a81d05 	stb	r2,-24460(gp)
                 break;
   14044:	00000406 	br	14058 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   14048:	00800044 	movi	r2,1
   1404c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   14050:	d0281d05 	stb	zero,-24460(gp)
                 break;
   14054:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   14058:	e0bffa03 	ldbu	r2,-24(fp)
   1405c:	10005226 	beq	r2,zero,141a8 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   14060:	d0a81c17 	ldw	r2,-24464(gp)
   14064:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   14068:	00004906 	br	14190 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1406c:	0005303a 	rdctl	r2,status
   14070:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14074:	e0fffc17 	ldw	r3,-16(fp)
   14078:	00bfff84 	movi	r2,-2
   1407c:	1884703a 	and	r2,r3,r2
   14080:	1001703a 	wrctl	status,r2
  
  return context;
   14084:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
   14088:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   1408c:	e0bff917 	ldw	r2,-28(fp)
   14090:	10800b8b 	ldhu	r2,46(r2)
   14094:	10bfffcc 	andi	r2,r2,65535
   14098:	10003626 	beq	r2,zero,14174 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   1409c:	e0bff917 	ldw	r2,-28(fp)
   140a0:	10800b8b 	ldhu	r2,46(r2)
   140a4:	10bfffc4 	addi	r2,r2,-1
   140a8:	1007883a 	mov	r3,r2
   140ac:	e0bff917 	ldw	r2,-28(fp)
   140b0:	10c00b8d 	sth	r3,46(r2)
   140b4:	e0bff917 	ldw	r2,-28(fp)
   140b8:	10800b8b 	ldhu	r2,46(r2)
   140bc:	10bfffcc 	andi	r2,r2,65535
   140c0:	10002c1e 	bne	r2,zero,14174 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   140c4:	e0bff917 	ldw	r2,-28(fp)
   140c8:	10800c03 	ldbu	r2,48(r2)
   140cc:	10803fcc 	andi	r2,r2,255
   140d0:	10800dcc 	andi	r2,r2,55
   140d4:	10000b26 	beq	r2,zero,14104 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   140d8:	e0bff917 	ldw	r2,-28(fp)
   140dc:	10c00c03 	ldbu	r3,48(r2)
   140e0:	00bff204 	movi	r2,-56
   140e4:	1884703a 	and	r2,r3,r2
   140e8:	1007883a 	mov	r3,r2
   140ec:	e0bff917 	ldw	r2,-28(fp)
   140f0:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   140f4:	e0bff917 	ldw	r2,-28(fp)
   140f8:	00c00044 	movi	r3,1
   140fc:	10c00c45 	stb	r3,49(r2)
   14100:	00000206 	br	1410c <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   14104:	e0bff917 	ldw	r2,-28(fp)
   14108:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   1410c:	e0bff917 	ldw	r2,-28(fp)
   14110:	10800c03 	ldbu	r2,48(r2)
   14114:	10803fcc 	andi	r2,r2,255
   14118:	1080020c 	andi	r2,r2,8
   1411c:	1000151e 	bne	r2,zero,14174 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   14120:	e0bff917 	ldw	r2,-28(fp)
   14124:	10c00d83 	ldbu	r3,54(r2)
   14128:	d0a82503 	ldbu	r2,-24428(gp)
   1412c:	1884b03a 	or	r2,r3,r2
   14130:	d0a82505 	stb	r2,-24428(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   14134:	e0bff917 	ldw	r2,-28(fp)
   14138:	10800d03 	ldbu	r2,52(r2)
   1413c:	10c03fcc 	andi	r3,r2,255
   14140:	e0bff917 	ldw	r2,-28(fp)
   14144:	10800d03 	ldbu	r2,52(r2)
   14148:	11003fcc 	andi	r4,r2,255
   1414c:	d0a82544 	addi	r2,gp,-24427
   14150:	2085883a 	add	r2,r4,r2
   14154:	11000003 	ldbu	r4,0(r2)
   14158:	e0bff917 	ldw	r2,-28(fp)
   1415c:	10800d43 	ldbu	r2,53(r2)
   14160:	2084b03a 	or	r2,r4,r2
   14164:	1009883a 	mov	r4,r2
   14168:	d0a82544 	addi	r2,gp,-24427
   1416c:	1885883a 	add	r2,r3,r2
   14170:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   14174:	e0bff917 	ldw	r2,-28(fp)
   14178:	10800517 	ldw	r2,20(r2)
   1417c:	e0bff915 	stw	r2,-28(fp)
   14180:	e0bffb17 	ldw	r2,-20(fp)
   14184:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14188:	e0bffe17 	ldw	r2,-8(fp)
   1418c:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   14190:	e0bff917 	ldw	r2,-28(fp)
   14194:	10800c83 	ldbu	r2,50(r2)
   14198:	10803fcc 	andi	r2,r2,255
   1419c:	10800518 	cmpnei	r2,r2,20
   141a0:	103fb21e 	bne	r2,zero,1406c <OSTimeTick+0xcc>
   141a4:	00000106 	br	141ac <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
   141a8:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   141ac:	e037883a 	mov	sp,fp
   141b0:	dfc00117 	ldw	ra,4(sp)
   141b4:	df000017 	ldw	fp,0(sp)
   141b8:	dec00204 	addi	sp,sp,8
   141bc:	f800283a 	ret

000141c0 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   141c0:	deffff04 	addi	sp,sp,-4
   141c4:	df000015 	stw	fp,0(sp)
   141c8:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   141cc:	00804784 	movi	r2,286
}
   141d0:	e037883a 	mov	sp,fp
   141d4:	df000017 	ldw	fp,0(sp)
   141d8:	dec00104 	addi	sp,sp,4
   141dc:	f800283a 	ret

000141e0 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   141e0:	deffff04 	addi	sp,sp,-4
   141e4:	df000015 	stw	fp,0(sp)
   141e8:	d839883a 	mov	fp,sp
}
   141ec:	0001883a 	nop
   141f0:	e037883a 	mov	sp,fp
   141f4:	df000017 	ldw	fp,0(sp)
   141f8:	dec00104 	addi	sp,sp,4
   141fc:	f800283a 	ret

00014200 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   14200:	defff804 	addi	sp,sp,-32
   14204:	dfc00715 	stw	ra,28(sp)
   14208:	df000615 	stw	fp,24(sp)
   1420c:	df000604 	addi	fp,sp,24
   14210:	e13ffc15 	stw	r4,-16(fp)
   14214:	e17ffd15 	stw	r5,-12(fp)
   14218:	3007883a 	mov	r3,r6
   1421c:	3805883a 	mov	r2,r7
   14220:	e0fffe05 	stb	r3,-8(fp)
   14224:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   14228:	e0bffc17 	ldw	r2,-16(fp)
   1422c:	10800283 	ldbu	r2,10(r2)
   14230:	10c03fcc 	andi	r3,r2,255
   14234:	008000b4 	movhi	r2,2
   14238:	10be2104 	addi	r2,r2,-1916
   1423c:	10c5883a 	add	r2,r2,r3
   14240:	10800003 	ldbu	r2,0(r2)
   14244:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   14248:	e0bffa03 	ldbu	r2,-24(fp)
   1424c:	e0fffc17 	ldw	r3,-16(fp)
   14250:	1885883a 	add	r2,r3,r2
   14254:	108002c4 	addi	r2,r2,11
   14258:	10800003 	ldbu	r2,0(r2)
   1425c:	10c03fcc 	andi	r3,r2,255
   14260:	008000b4 	movhi	r2,2
   14264:	10be2104 	addi	r2,r2,-1916
   14268:	10c5883a 	add	r2,r2,r3
   1426c:	10800003 	ldbu	r2,0(r2)
   14270:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   14274:	e0bffa03 	ldbu	r2,-24(fp)
   14278:	100490fa 	slli	r2,r2,3
   1427c:	1007883a 	mov	r3,r2
   14280:	e0bffa43 	ldbu	r2,-23(fp)
   14284:	1885883a 	add	r2,r3,r2
   14288:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   1428c:	e0fffa83 	ldbu	r3,-22(fp)
   14290:	008000f4 	movhi	r2,3
   14294:	1092f304 	addi	r2,r2,19404
   14298:	18c7883a 	add	r3,r3,r3
   1429c:	18c7883a 	add	r3,r3,r3
   142a0:	10c5883a 	add	r2,r2,r3
   142a4:	10800017 	ldw	r2,0(r2)
   142a8:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   142ac:	e0bffb17 	ldw	r2,-20(fp)
   142b0:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   142b4:	e0bffb17 	ldw	r2,-20(fp)
   142b8:	e0fffd17 	ldw	r3,-12(fp)
   142bc:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   142c0:	e0bffb17 	ldw	r2,-20(fp)
   142c4:	10800c03 	ldbu	r2,48(r2)
   142c8:	1007883a 	mov	r3,r2
   142cc:	e0bffe03 	ldbu	r2,-8(fp)
   142d0:	0084303a 	nor	r2,zero,r2
   142d4:	1884703a 	and	r2,r3,r2
   142d8:	1007883a 	mov	r3,r2
   142dc:	e0bffb17 	ldw	r2,-20(fp)
   142e0:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   142e4:	e0bffb17 	ldw	r2,-20(fp)
   142e8:	e0ffff03 	ldbu	r3,-4(fp)
   142ec:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   142f0:	e0bffb17 	ldw	r2,-20(fp)
   142f4:	10800c03 	ldbu	r2,48(r2)
   142f8:	10803fcc 	andi	r2,r2,255
   142fc:	1080020c 	andi	r2,r2,8
   14300:	1000111e 	bne	r2,zero,14348 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   14304:	e0bffb17 	ldw	r2,-20(fp)
   14308:	10c00d83 	ldbu	r3,54(r2)
   1430c:	d0a82503 	ldbu	r2,-24428(gp)
   14310:	1884b03a 	or	r2,r3,r2
   14314:	d0a82505 	stb	r2,-24428(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   14318:	e0fffa03 	ldbu	r3,-24(fp)
   1431c:	e13ffa03 	ldbu	r4,-24(fp)
   14320:	d0a82544 	addi	r2,gp,-24427
   14324:	2085883a 	add	r2,r4,r2
   14328:	11000003 	ldbu	r4,0(r2)
   1432c:	e0bffb17 	ldw	r2,-20(fp)
   14330:	10800d43 	ldbu	r2,53(r2)
   14334:	2084b03a 	or	r2,r4,r2
   14338:	1009883a 	mov	r4,r2
   1433c:	d0a82544 	addi	r2,gp,-24427
   14340:	1885883a 	add	r2,r3,r2
   14344:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   14348:	e17ffc17 	ldw	r5,-16(fp)
   1434c:	e13ffb17 	ldw	r4,-20(fp)
   14350:	00145f80 	call	145f8 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   14354:	e0bffb17 	ldw	r2,-20(fp)
   14358:	10800817 	ldw	r2,32(r2)
   1435c:	10000826 	beq	r2,zero,14380 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   14360:	e0bffb17 	ldw	r2,-20(fp)
   14364:	10800817 	ldw	r2,32(r2)
   14368:	100b883a 	mov	r5,r2
   1436c:	e13ffb17 	ldw	r4,-20(fp)
   14370:	00146b00 	call	146b0 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   14374:	e0bffb17 	ldw	r2,-20(fp)
   14378:	e0fffc17 	ldw	r3,-16(fp)
   1437c:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   14380:	e0bffa83 	ldbu	r2,-22(fp)
}
   14384:	e037883a 	mov	sp,fp
   14388:	dfc00117 	ldw	ra,4(sp)
   1438c:	df000017 	ldw	fp,0(sp)
   14390:	dec00204 	addi	sp,sp,8
   14394:	f800283a 	ret

00014398 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   14398:	defffd04 	addi	sp,sp,-12
   1439c:	df000215 	stw	fp,8(sp)
   143a0:	df000204 	addi	fp,sp,8
   143a4:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   143a8:	d0a82817 	ldw	r2,-24416(gp)
   143ac:	e0ffff17 	ldw	r3,-4(fp)
   143b0:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   143b4:	d0a82817 	ldw	r2,-24416(gp)
   143b8:	10800d03 	ldbu	r2,52(r2)
   143bc:	10803fcc 	andi	r2,r2,255
   143c0:	d0e82817 	ldw	r3,-24416(gp)
   143c4:	18c00d03 	ldbu	r3,52(r3)
   143c8:	18c03fcc 	andi	r3,r3,255
   143cc:	e13fff17 	ldw	r4,-4(fp)
   143d0:	20c7883a 	add	r3,r4,r3
   143d4:	18c002c4 	addi	r3,r3,11
   143d8:	19000003 	ldbu	r4,0(r3)
   143dc:	d0e82817 	ldw	r3,-24416(gp)
   143e0:	18c00d43 	ldbu	r3,53(r3)
   143e4:	20c6b03a 	or	r3,r4,r3
   143e8:	1809883a 	mov	r4,r3
   143ec:	e0ffff17 	ldw	r3,-4(fp)
   143f0:	1885883a 	add	r2,r3,r2
   143f4:	108002c4 	addi	r2,r2,11
   143f8:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   143fc:	e0bfff17 	ldw	r2,-4(fp)
   14400:	10c00283 	ldbu	r3,10(r2)
   14404:	d0a82817 	ldw	r2,-24416(gp)
   14408:	10800d83 	ldbu	r2,54(r2)
   1440c:	1884b03a 	or	r2,r3,r2
   14410:	1007883a 	mov	r3,r2
   14414:	e0bfff17 	ldw	r2,-4(fp)
   14418:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   1441c:	d0a82817 	ldw	r2,-24416(gp)
   14420:	10800d03 	ldbu	r2,52(r2)
   14424:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   14428:	e0fffe03 	ldbu	r3,-8(fp)
   1442c:	e13ffe03 	ldbu	r4,-8(fp)
   14430:	d0a82544 	addi	r2,gp,-24427
   14434:	2085883a 	add	r2,r4,r2
   14438:	10800003 	ldbu	r2,0(r2)
   1443c:	1009883a 	mov	r4,r2
   14440:	d0a82817 	ldw	r2,-24416(gp)
   14444:	10800d43 	ldbu	r2,53(r2)
   14448:	0084303a 	nor	r2,zero,r2
   1444c:	2084703a 	and	r2,r4,r2
   14450:	1009883a 	mov	r4,r2
   14454:	d0a82544 	addi	r2,gp,-24427
   14458:	1885883a 	add	r2,r3,r2
   1445c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   14460:	e0fffe03 	ldbu	r3,-8(fp)
   14464:	d0a82544 	addi	r2,gp,-24427
   14468:	1885883a 	add	r2,r3,r2
   1446c:	10800003 	ldbu	r2,0(r2)
   14470:	10803fcc 	andi	r2,r2,255
   14474:	1000071e 	bne	r2,zero,14494 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   14478:	d0a82817 	ldw	r2,-24416(gp)
   1447c:	10800d83 	ldbu	r2,54(r2)
   14480:	0084303a 	nor	r2,zero,r2
   14484:	1007883a 	mov	r3,r2
   14488:	d0a82503 	ldbu	r2,-24428(gp)
   1448c:	1884703a 	and	r2,r3,r2
   14490:	d0a82505 	stb	r2,-24428(gp)
    }
}
   14494:	0001883a 	nop
   14498:	e037883a 	mov	sp,fp
   1449c:	df000017 	ldw	fp,0(sp)
   144a0:	dec00104 	addi	sp,sp,4
   144a4:	f800283a 	ret

000144a8 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   144a8:	defffb04 	addi	sp,sp,-20
   144ac:	df000415 	stw	fp,16(sp)
   144b0:	df000404 	addi	fp,sp,16
   144b4:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   144b8:	d0a82817 	ldw	r2,-24416(gp)
   144bc:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   144c0:	d0a82817 	ldw	r2,-24416(gp)
   144c4:	e0ffff17 	ldw	r3,-4(fp)
   144c8:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   144cc:	e0bfff17 	ldw	r2,-4(fp)
   144d0:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   144d4:	e0bffc17 	ldw	r2,-16(fp)
   144d8:	10800017 	ldw	r2,0(r2)
   144dc:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   144e0:	00002006 	br	14564 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   144e4:	d0a82817 	ldw	r2,-24416(gp)
   144e8:	10800d03 	ldbu	r2,52(r2)
   144ec:	10803fcc 	andi	r2,r2,255
   144f0:	d0e82817 	ldw	r3,-24416(gp)
   144f4:	18c00d03 	ldbu	r3,52(r3)
   144f8:	18c03fcc 	andi	r3,r3,255
   144fc:	e13ffd17 	ldw	r4,-12(fp)
   14500:	20c7883a 	add	r3,r4,r3
   14504:	18c002c4 	addi	r3,r3,11
   14508:	19000003 	ldbu	r4,0(r3)
   1450c:	d0e82817 	ldw	r3,-24416(gp)
   14510:	18c00d43 	ldbu	r3,53(r3)
   14514:	20c6b03a 	or	r3,r4,r3
   14518:	1809883a 	mov	r4,r3
   1451c:	e0fffd17 	ldw	r3,-12(fp)
   14520:	1885883a 	add	r2,r3,r2
   14524:	108002c4 	addi	r2,r2,11
   14528:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   1452c:	e0bffd17 	ldw	r2,-12(fp)
   14530:	10c00283 	ldbu	r3,10(r2)
   14534:	d0a82817 	ldw	r2,-24416(gp)
   14538:	10800d83 	ldbu	r2,54(r2)
   1453c:	1884b03a 	or	r2,r3,r2
   14540:	1007883a 	mov	r3,r2
   14544:	e0bffd17 	ldw	r2,-12(fp)
   14548:	10c00285 	stb	r3,10(r2)
        pevents++;
   1454c:	e0bffc17 	ldw	r2,-16(fp)
   14550:	10800104 	addi	r2,r2,4
   14554:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   14558:	e0bffc17 	ldw	r2,-16(fp)
   1455c:	10800017 	ldw	r2,0(r2)
   14560:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   14564:	e0bffd17 	ldw	r2,-12(fp)
   14568:	103fde1e 	bne	r2,zero,144e4 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   1456c:	d0a82817 	ldw	r2,-24416(gp)
   14570:	10800d03 	ldbu	r2,52(r2)
   14574:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   14578:	e0fffe03 	ldbu	r3,-8(fp)
   1457c:	e13ffe03 	ldbu	r4,-8(fp)
   14580:	d0a82544 	addi	r2,gp,-24427
   14584:	2085883a 	add	r2,r4,r2
   14588:	10800003 	ldbu	r2,0(r2)
   1458c:	1009883a 	mov	r4,r2
   14590:	d0a82817 	ldw	r2,-24416(gp)
   14594:	10800d43 	ldbu	r2,53(r2)
   14598:	0084303a 	nor	r2,zero,r2
   1459c:	2084703a 	and	r2,r4,r2
   145a0:	1009883a 	mov	r4,r2
   145a4:	d0a82544 	addi	r2,gp,-24427
   145a8:	1885883a 	add	r2,r3,r2
   145ac:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   145b0:	e0fffe03 	ldbu	r3,-8(fp)
   145b4:	d0a82544 	addi	r2,gp,-24427
   145b8:	1885883a 	add	r2,r3,r2
   145bc:	10800003 	ldbu	r2,0(r2)
   145c0:	10803fcc 	andi	r2,r2,255
   145c4:	1000071e 	bne	r2,zero,145e4 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   145c8:	d0a82817 	ldw	r2,-24416(gp)
   145cc:	10800d83 	ldbu	r2,54(r2)
   145d0:	0084303a 	nor	r2,zero,r2
   145d4:	1007883a 	mov	r3,r2
   145d8:	d0a82503 	ldbu	r2,-24428(gp)
   145dc:	1884703a 	and	r2,r3,r2
   145e0:	d0a82505 	stb	r2,-24428(gp)
    }
}
   145e4:	0001883a 	nop
   145e8:	e037883a 	mov	sp,fp
   145ec:	df000017 	ldw	fp,0(sp)
   145f0:	dec00104 	addi	sp,sp,4
   145f4:	f800283a 	ret

000145f8 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   145f8:	defffc04 	addi	sp,sp,-16
   145fc:	df000315 	stw	fp,12(sp)
   14600:	df000304 	addi	fp,sp,12
   14604:	e13ffe15 	stw	r4,-8(fp)
   14608:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   1460c:	e0bffe17 	ldw	r2,-8(fp)
   14610:	10800d03 	ldbu	r2,52(r2)
   14614:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   14618:	e0bffd03 	ldbu	r2,-12(fp)
   1461c:	e0fffd03 	ldbu	r3,-12(fp)
   14620:	e13fff17 	ldw	r4,-4(fp)
   14624:	20c7883a 	add	r3,r4,r3
   14628:	18c002c4 	addi	r3,r3,11
   1462c:	18c00003 	ldbu	r3,0(r3)
   14630:	1809883a 	mov	r4,r3
   14634:	e0fffe17 	ldw	r3,-8(fp)
   14638:	18c00d43 	ldbu	r3,53(r3)
   1463c:	00c6303a 	nor	r3,zero,r3
   14640:	20c6703a 	and	r3,r4,r3
   14644:	1809883a 	mov	r4,r3
   14648:	e0ffff17 	ldw	r3,-4(fp)
   1464c:	1885883a 	add	r2,r3,r2
   14650:	108002c4 	addi	r2,r2,11
   14654:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
   14658:	e0bffd03 	ldbu	r2,-12(fp)
   1465c:	e0ffff17 	ldw	r3,-4(fp)
   14660:	1885883a 	add	r2,r3,r2
   14664:	108002c4 	addi	r2,r2,11
   14668:	10800003 	ldbu	r2,0(r2)
   1466c:	10803fcc 	andi	r2,r2,255
   14670:	10000a1e 	bne	r2,zero,1469c <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   14674:	e0bfff17 	ldw	r2,-4(fp)
   14678:	10800283 	ldbu	r2,10(r2)
   1467c:	1007883a 	mov	r3,r2
   14680:	e0bffe17 	ldw	r2,-8(fp)
   14684:	10800d83 	ldbu	r2,54(r2)
   14688:	0084303a 	nor	r2,zero,r2
   1468c:	1884703a 	and	r2,r3,r2
   14690:	1007883a 	mov	r3,r2
   14694:	e0bfff17 	ldw	r2,-4(fp)
   14698:	10c00285 	stb	r3,10(r2)
    }
}
   1469c:	0001883a 	nop
   146a0:	e037883a 	mov	sp,fp
   146a4:	df000017 	ldw	fp,0(sp)
   146a8:	dec00104 	addi	sp,sp,4
   146ac:	f800283a 	ret

000146b0 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   146b0:	defffa04 	addi	sp,sp,-24
   146b4:	df000515 	stw	fp,20(sp)
   146b8:	df000504 	addi	fp,sp,20
   146bc:	e13ffe15 	stw	r4,-8(fp)
   146c0:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   146c4:	e0bffe17 	ldw	r2,-8(fp)
   146c8:	10800d03 	ldbu	r2,52(r2)
   146cc:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   146d0:	e0bffe17 	ldw	r2,-8(fp)
   146d4:	10800d83 	ldbu	r2,54(r2)
   146d8:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   146dc:	e0bffe17 	ldw	r2,-8(fp)
   146e0:	10800d43 	ldbu	r2,53(r2)
   146e4:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   146e8:	e0bfff17 	ldw	r2,-4(fp)
   146ec:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   146f0:	e0bffb17 	ldw	r2,-20(fp)
   146f4:	10800017 	ldw	r2,0(r2)
   146f8:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   146fc:	00002506 	br	14794 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   14700:	e0bffd03 	ldbu	r2,-12(fp)
   14704:	e0fffd03 	ldbu	r3,-12(fp)
   14708:	e13ffc17 	ldw	r4,-16(fp)
   1470c:	20c7883a 	add	r3,r4,r3
   14710:	18c002c4 	addi	r3,r3,11
   14714:	18c00003 	ldbu	r3,0(r3)
   14718:	1809883a 	mov	r4,r3
   1471c:	e0fffd83 	ldbu	r3,-10(fp)
   14720:	00c6303a 	nor	r3,zero,r3
   14724:	20c6703a 	and	r3,r4,r3
   14728:	1809883a 	mov	r4,r3
   1472c:	e0fffc17 	ldw	r3,-16(fp)
   14730:	1885883a 	add	r2,r3,r2
   14734:	108002c4 	addi	r2,r2,11
   14738:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
   1473c:	e0bffd03 	ldbu	r2,-12(fp)
   14740:	e0fffc17 	ldw	r3,-16(fp)
   14744:	1885883a 	add	r2,r3,r2
   14748:	108002c4 	addi	r2,r2,11
   1474c:	10800003 	ldbu	r2,0(r2)
   14750:	10803fcc 	andi	r2,r2,255
   14754:	1000091e 	bne	r2,zero,1477c <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   14758:	e0bffc17 	ldw	r2,-16(fp)
   1475c:	10800283 	ldbu	r2,10(r2)
   14760:	1007883a 	mov	r3,r2
   14764:	e0bffd43 	ldbu	r2,-11(fp)
   14768:	0084303a 	nor	r2,zero,r2
   1476c:	1884703a 	and	r2,r3,r2
   14770:	1007883a 	mov	r3,r2
   14774:	e0bffc17 	ldw	r2,-16(fp)
   14778:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   1477c:	e0bffb17 	ldw	r2,-20(fp)
   14780:	10800104 	addi	r2,r2,4
   14784:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   14788:	e0bffb17 	ldw	r2,-20(fp)
   1478c:	10800017 	ldw	r2,0(r2)
   14790:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   14794:	e0bffc17 	ldw	r2,-16(fp)
   14798:	103fd91e 	bne	r2,zero,14700 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   1479c:	0001883a 	nop
   147a0:	e037883a 	mov	sp,fp
   147a4:	df000017 	ldw	fp,0(sp)
   147a8:	dec00104 	addi	sp,sp,4
   147ac:	f800283a 	ret

000147b0 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   147b0:	defffc04 	addi	sp,sp,-16
   147b4:	df000315 	stw	fp,12(sp)
   147b8:	df000304 	addi	fp,sp,12
   147bc:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   147c0:	e0bfff17 	ldw	r2,-4(fp)
   147c4:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   147c8:	e0bfff17 	ldw	r2,-4(fp)
   147cc:	108002c4 	addi	r2,r2,11
   147d0:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   147d4:	e03ffe05 	stb	zero,-8(fp)
   147d8:	00000706 	br	147f8 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   147dc:	e0bffd17 	ldw	r2,-12(fp)
   147e0:	10c00044 	addi	r3,r2,1
   147e4:	e0fffd15 	stw	r3,-12(fp)
   147e8:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   147ec:	e0bffe03 	ldbu	r2,-8(fp)
   147f0:	10800044 	addi	r2,r2,1
   147f4:	e0bffe05 	stb	r2,-8(fp)
   147f8:	e0bffe03 	ldbu	r2,-8(fp)
   147fc:	108000f0 	cmpltui	r2,r2,3
   14800:	103ff61e 	bne	r2,zero,147dc <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
   14804:	0001883a 	nop
   14808:	e037883a 	mov	sp,fp
   1480c:	df000017 	ldw	fp,0(sp)
   14810:	dec00104 	addi	sp,sp,4
   14814:	f800283a 	ret

00014818 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   14818:	defffb04 	addi	sp,sp,-20
   1481c:	dfc00415 	stw	ra,16(sp)
   14820:	df000315 	stw	fp,12(sp)
   14824:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   14828:	0142d004 	movi	r5,2880
   1482c:	010000f4 	movhi	r4,3
   14830:	210edf04 	addi	r4,r4,15228
   14834:	0014b900 	call	14b90 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   14838:	008000f4 	movhi	r2,3
   1483c:	108edf04 	addi	r2,r2,15228
   14840:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   14844:	008000f4 	movhi	r2,3
   14848:	108eeb04 	addi	r2,r2,15276
   1484c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   14850:	e03ffd0d 	sth	zero,-12(fp)
   14854:	00001306 	br	148a4 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   14858:	e0bffe17 	ldw	r2,-8(fp)
   1485c:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   14860:	e0bffe17 	ldw	r2,-8(fp)
   14864:	e0ffff17 	ldw	r3,-4(fp)
   14868:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   1486c:	e0bffe17 	ldw	r2,-8(fp)
   14870:	00c00fc4 	movi	r3,63
   14874:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   14878:	e0bffe17 	ldw	r2,-8(fp)
   1487c:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   14880:	e0bffe17 	ldw	r2,-8(fp)
   14884:	10800c04 	addi	r2,r2,48
   14888:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   1488c:	e0bfff17 	ldw	r2,-4(fp)
   14890:	10800c04 	addi	r2,r2,48
   14894:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   14898:	e0bffd0b 	ldhu	r2,-12(fp)
   1489c:	10800044 	addi	r2,r2,1
   148a0:	e0bffd0d 	sth	r2,-12(fp)
   148a4:	e0bffd0b 	ldhu	r2,-12(fp)
   148a8:	10800ef0 	cmpltui	r2,r2,59
   148ac:	103fea1e 	bne	r2,zero,14858 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   148b0:	e0bffe17 	ldw	r2,-8(fp)
   148b4:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   148b8:	e0bffe17 	ldw	r2,-8(fp)
   148bc:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   148c0:	e0bffe17 	ldw	r2,-8(fp)
   148c4:	00c00fc4 	movi	r3,63
   148c8:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   148cc:	e0bffe17 	ldw	r2,-8(fp)
   148d0:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   148d4:	008000f4 	movhi	r2,3
   148d8:	108edf04 	addi	r2,r2,15228
   148dc:	d0a82615 	stw	r2,-24424(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   148e0:	0001883a 	nop
   148e4:	e037883a 	mov	sp,fp
   148e8:	dfc00117 	ldw	ra,4(sp)
   148ec:	df000017 	ldw	fp,0(sp)
   148f0:	dec00204 	addi	sp,sp,8
   148f4:	f800283a 	ret

000148f8 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   148f8:	deffff04 	addi	sp,sp,-4
   148fc:	df000015 	stw	fp,0(sp)
   14900:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   14904:	d0282915 	stw	zero,-24412(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   14908:	d0282705 	stb	zero,-24420(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   1490c:	d0281905 	stb	zero,-24476(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   14910:	d0282145 	stb	zero,-24443(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   14914:	d0281945 	stb	zero,-24475(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   14918:	d0281e15 	stw	zero,-24456(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   1491c:	d0281a15 	stw	zero,-24472(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   14920:	d0282c15 	stw	zero,-24400(gp)
    OSIdleCtrMax  = 0L;
   14924:	d0281f15 	stw	zero,-24452(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   14928:	d0282b05 	stb	zero,-24404(gp)
#endif
}
   1492c:	0001883a 	nop
   14930:	e037883a 	mov	sp,fp
   14934:	df000017 	ldw	fp,0(sp)
   14938:	dec00104 	addi	sp,sp,4
   1493c:	f800283a 	ret

00014940 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   14940:	defffd04 	addi	sp,sp,-12
   14944:	df000215 	stw	fp,8(sp)
   14948:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   1494c:	d0282505 	stb	zero,-24428(gp)
    prdytbl       = &OSRdyTbl[0];
   14950:	d0a82544 	addi	r2,gp,-24427
   14954:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   14958:	e03ffe05 	stb	zero,-8(fp)
   1495c:	00000706 	br	1497c <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   14960:	e0bfff17 	ldw	r2,-4(fp)
   14964:	10c00044 	addi	r3,r2,1
   14968:	e0ffff15 	stw	r3,-4(fp)
   1496c:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   14970:	e0bffe03 	ldbu	r2,-8(fp)
   14974:	10800044 	addi	r2,r2,1
   14978:	e0bffe05 	stb	r2,-8(fp)
   1497c:	e0bffe03 	ldbu	r2,-8(fp)
   14980:	108000f0 	cmpltui	r2,r2,3
   14984:	103ff61e 	bne	r2,zero,14960 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   14988:	d0281b45 	stb	zero,-24467(gp)
    OSPrioHighRdy = 0;
   1498c:	d0281b05 	stb	zero,-24468(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   14990:	d0282315 	stw	zero,-24436(gp)
    OSTCBCur      = (OS_TCB *)0;
   14994:	d0282815 	stw	zero,-24416(gp)
}
   14998:	0001883a 	nop
   1499c:	e037883a 	mov	sp,fp
   149a0:	df000017 	ldw	fp,0(sp)
   149a4:	dec00104 	addi	sp,sp,4
   149a8:	f800283a 	ret

000149ac <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   149ac:	defff804 	addi	sp,sp,-32
   149b0:	dfc00715 	stw	ra,28(sp)
   149b4:	df000615 	stw	fp,24(sp)
   149b8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   149bc:	008000c4 	movi	r2,3
   149c0:	d8800415 	stw	r2,16(sp)
   149c4:	d8000315 	stw	zero,12(sp)
   149c8:	00808004 	movi	r2,512
   149cc:	d8800215 	stw	r2,8(sp)
   149d0:	008000f4 	movhi	r2,3
   149d4:	108cdf04 	addi	r2,r2,13180
   149d8:	d8800115 	stw	r2,4(sp)
   149dc:	00bfffd4 	movui	r2,65535
   149e0:	d8800015 	stw	r2,0(sp)
   149e4:	01c00504 	movi	r7,20
   149e8:	018000f4 	movhi	r6,3
   149ec:	318ede04 	addi	r6,r6,15224
   149f0:	000b883a 	mov	r5,zero
   149f4:	01000074 	movhi	r4,1
   149f8:	21139604 	addi	r4,r4,20056
   149fc:	00195280 	call	19528 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   14a00:	e1bfff04 	addi	r6,fp,-4
   14a04:	014000b4 	movhi	r5,2
   14a08:	297e6104 	addi	r5,r5,-1660
   14a0c:	01000504 	movi	r4,20
   14a10:	0019d380 	call	19d38 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   14a14:	0001883a 	nop
   14a18:	e037883a 	mov	sp,fp
   14a1c:	dfc00117 	ldw	ra,4(sp)
   14a20:	df000017 	ldw	fp,0(sp)
   14a24:	dec00204 	addi	sp,sp,8
   14a28:	f800283a 	ret

00014a2c <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   14a2c:	defff804 	addi	sp,sp,-32
   14a30:	dfc00715 	stw	ra,28(sp)
   14a34:	df000615 	stw	fp,24(sp)
   14a38:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   14a3c:	008000c4 	movi	r2,3
   14a40:	d8800415 	stw	r2,16(sp)
   14a44:	d8000315 	stw	zero,12(sp)
   14a48:	00808004 	movi	r2,512
   14a4c:	d8800215 	stw	r2,8(sp)
   14a50:	008000f4 	movhi	r2,3
   14a54:	108a6704 	addi	r2,r2,10652
   14a58:	d8800115 	stw	r2,4(sp)
   14a5c:	00bfff94 	movui	r2,65534
   14a60:	d8800015 	stw	r2,0(sp)
   14a64:	01c004c4 	movi	r7,19
   14a68:	018000f4 	movhi	r6,3
   14a6c:	318c6604 	addi	r6,r6,12696
   14a70:	000b883a 	mov	r5,zero
   14a74:	01000074 	movhi	r4,1
   14a78:	2113ad04 	addi	r4,r4,20148
   14a7c:	00195280 	call	19528 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   14a80:	e1bfff04 	addi	r6,fp,-4
   14a84:	014000b4 	movhi	r5,2
   14a88:	297e6504 	addi	r5,r5,-1644
   14a8c:	010004c4 	movi	r4,19
   14a90:	0019d380 	call	19d38 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   14a94:	0001883a 	nop
   14a98:	e037883a 	mov	sp,fp
   14a9c:	dfc00117 	ldw	ra,4(sp)
   14aa0:	df000017 	ldw	fp,0(sp)
   14aa4:	dec00204 	addi	sp,sp,8
   14aa8:	f800283a 	ret

00014aac <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   14aac:	defffb04 	addi	sp,sp,-20
   14ab0:	dfc00415 	stw	ra,16(sp)
   14ab4:	df000315 	stw	fp,12(sp)
   14ab8:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   14abc:	01414404 	movi	r5,1296
   14ac0:	010000f4 	movhi	r4,3
   14ac4:	2111af04 	addi	r4,r4,18108
   14ac8:	0014b900 	call	14b90 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   14acc:	01401504 	movi	r5,84
   14ad0:	010000f4 	movhi	r4,3
   14ad4:	2112f304 	addi	r4,r4,19404
   14ad8:	0014b900 	call	14b90 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   14adc:	008000f4 	movhi	r2,3
   14ae0:	1091af04 	addi	r2,r2,18108
   14ae4:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   14ae8:	008000f4 	movhi	r2,3
   14aec:	1091ca04 	addi	r2,r2,18216
   14af0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   14af4:	e03ffd05 	stb	zero,-12(fp)
   14af8:	00001106 	br	14b40 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   14afc:	e0bffe17 	ldw	r2,-8(fp)
   14b00:	e0ffff17 	ldw	r3,-4(fp)
   14b04:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   14b08:	e0bffe17 	ldw	r2,-8(fp)
   14b0c:	00c00fc4 	movi	r3,63
   14b10:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   14b14:	e0bffe17 	ldw	r2,-8(fp)
   14b18:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   14b1c:	e0bffe17 	ldw	r2,-8(fp)
   14b20:	10801b04 	addi	r2,r2,108
   14b24:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   14b28:	e0bfff17 	ldw	r2,-4(fp)
   14b2c:	10801b04 	addi	r2,r2,108
   14b30:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   14b34:	e0bffd03 	ldbu	r2,-12(fp)
   14b38:	10800044 	addi	r2,r2,1
   14b3c:	e0bffd05 	stb	r2,-12(fp)
   14b40:	e0bffd03 	ldbu	r2,-12(fp)
   14b44:	108002f0 	cmpltui	r2,r2,11
   14b48:	103fec1e 	bne	r2,zero,14afc <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   14b4c:	e0bffe17 	ldw	r2,-8(fp)
   14b50:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   14b54:	e0bffe17 	ldw	r2,-8(fp)
   14b58:	00c00fc4 	movi	r3,63
   14b5c:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   14b60:	e0bffe17 	ldw	r2,-8(fp)
   14b64:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   14b68:	d0281c15 	stw	zero,-24464(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   14b6c:	008000f4 	movhi	r2,3
   14b70:	1091af04 	addi	r2,r2,18108
   14b74:	d0a82015 	stw	r2,-24448(gp)
}
   14b78:	0001883a 	nop
   14b7c:	e037883a 	mov	sp,fp
   14b80:	dfc00117 	ldw	ra,4(sp)
   14b84:	df000017 	ldw	fp,0(sp)
   14b88:	dec00204 	addi	sp,sp,8
   14b8c:	f800283a 	ret

00014b90 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   14b90:	defffd04 	addi	sp,sp,-12
   14b94:	df000215 	stw	fp,8(sp)
   14b98:	df000204 	addi	fp,sp,8
   14b9c:	e13ffe15 	stw	r4,-8(fp)
   14ba0:	2805883a 	mov	r2,r5
   14ba4:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   14ba8:	00000706 	br	14bc8 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   14bac:	e0bffe17 	ldw	r2,-8(fp)
   14bb0:	10c00044 	addi	r3,r2,1
   14bb4:	e0fffe15 	stw	r3,-8(fp)
   14bb8:	10000005 	stb	zero,0(r2)
        size--;
   14bbc:	e0bfff0b 	ldhu	r2,-4(fp)
   14bc0:	10bfffc4 	addi	r2,r2,-1
   14bc4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   14bc8:	e0bfff0b 	ldhu	r2,-4(fp)
   14bcc:	103ff71e 	bne	r2,zero,14bac <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   14bd0:	0001883a 	nop
   14bd4:	e037883a 	mov	sp,fp
   14bd8:	df000017 	ldw	fp,0(sp)
   14bdc:	dec00104 	addi	sp,sp,4
   14be0:	f800283a 	ret

00014be4 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   14be4:	defffc04 	addi	sp,sp,-16
   14be8:	df000315 	stw	fp,12(sp)
   14bec:	df000304 	addi	fp,sp,12
   14bf0:	e13ffd15 	stw	r4,-12(fp)
   14bf4:	e17ffe15 	stw	r5,-8(fp)
   14bf8:	3005883a 	mov	r2,r6
   14bfc:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   14c00:	00000b06 	br	14c30 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   14c04:	e0bffd17 	ldw	r2,-12(fp)
   14c08:	10c00044 	addi	r3,r2,1
   14c0c:	e0fffd15 	stw	r3,-12(fp)
   14c10:	e0fffe17 	ldw	r3,-8(fp)
   14c14:	19000044 	addi	r4,r3,1
   14c18:	e13ffe15 	stw	r4,-8(fp)
   14c1c:	18c00003 	ldbu	r3,0(r3)
   14c20:	10c00005 	stb	r3,0(r2)
        size--;
   14c24:	e0bfff0b 	ldhu	r2,-4(fp)
   14c28:	10bfffc4 	addi	r2,r2,-1
   14c2c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   14c30:	e0bfff0b 	ldhu	r2,-4(fp)
   14c34:	103ff31e 	bne	r2,zero,14c04 <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
   14c38:	0001883a 	nop
   14c3c:	e037883a 	mov	sp,fp
   14c40:	df000017 	ldw	fp,0(sp)
   14c44:	dec00104 	addi	sp,sp,4
   14c48:	f800283a 	ret

00014c4c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   14c4c:	defffb04 	addi	sp,sp,-20
   14c50:	dfc00415 	stw	ra,16(sp)
   14c54:	df000315 	stw	fp,12(sp)
   14c58:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   14c5c:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14c60:	0005303a 	rdctl	r2,status
   14c64:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14c68:	e0ffff17 	ldw	r3,-4(fp)
   14c6c:	00bfff84 	movi	r2,-2
   14c70:	1884703a 	and	r2,r3,r2
   14c74:	1001703a 	wrctl	status,r2
  
  return context;
   14c78:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
   14c7c:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   14c80:	d0a82703 	ldbu	r2,-24420(gp)
   14c84:	10803fcc 	andi	r2,r2,255
   14c88:	10001a1e 	bne	r2,zero,14cf4 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   14c8c:	d0a81903 	ldbu	r2,-24476(gp)
   14c90:	10803fcc 	andi	r2,r2,255
   14c94:	1000171e 	bne	r2,zero,14cf4 <OS_Sched+0xa8>
            OS_SchedNew();
   14c98:	0014d1c0 	call	14d1c <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   14c9c:	d0e81b03 	ldbu	r3,-24468(gp)
   14ca0:	d0a81b43 	ldbu	r2,-24467(gp)
   14ca4:	18c03fcc 	andi	r3,r3,255
   14ca8:	10803fcc 	andi	r2,r2,255
   14cac:	18801126 	beq	r3,r2,14cf4 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   14cb0:	d0a81b03 	ldbu	r2,-24468(gp)
   14cb4:	10c03fcc 	andi	r3,r2,255
   14cb8:	008000f4 	movhi	r2,3
   14cbc:	1092f304 	addi	r2,r2,19404
   14cc0:	18c7883a 	add	r3,r3,r3
   14cc4:	18c7883a 	add	r3,r3,r3
   14cc8:	10c5883a 	add	r2,r2,r3
   14ccc:	10800017 	ldw	r2,0(r2)
   14cd0:	d0a82315 	stw	r2,-24436(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   14cd4:	d0a82317 	ldw	r2,-24436(gp)
   14cd8:	10c00e17 	ldw	r3,56(r2)
   14cdc:	18c00044 	addi	r3,r3,1
   14ce0:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   14ce4:	d0a81e17 	ldw	r2,-24456(gp)
   14ce8:	10800044 	addi	r2,r2,1
   14cec:	d0a81e15 	stw	r2,-24456(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   14cf0:	001e0240 	call	1e024 <OSCtxSw>
   14cf4:	e0bffd17 	ldw	r2,-12(fp)
   14cf8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14cfc:	e0bffe17 	ldw	r2,-8(fp)
   14d00:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   14d04:	0001883a 	nop
   14d08:	e037883a 	mov	sp,fp
   14d0c:	dfc00117 	ldw	ra,4(sp)
   14d10:	df000017 	ldw	fp,0(sp)
   14d14:	dec00204 	addi	sp,sp,8
   14d18:	f800283a 	ret

00014d1c <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   14d1c:	defffe04 	addi	sp,sp,-8
   14d20:	df000115 	stw	fp,4(sp)
   14d24:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   14d28:	d0a82503 	ldbu	r2,-24428(gp)
   14d2c:	10c03fcc 	andi	r3,r2,255
   14d30:	008000b4 	movhi	r2,2
   14d34:	10be2104 	addi	r2,r2,-1916
   14d38:	10c5883a 	add	r2,r2,r3
   14d3c:	10800003 	ldbu	r2,0(r2)
   14d40:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   14d44:	e0bfff03 	ldbu	r2,-4(fp)
   14d48:	100490fa 	slli	r2,r2,3
   14d4c:	1009883a 	mov	r4,r2
   14d50:	e0ffff03 	ldbu	r3,-4(fp)
   14d54:	d0a82544 	addi	r2,gp,-24427
   14d58:	1885883a 	add	r2,r3,r2
   14d5c:	10800003 	ldbu	r2,0(r2)
   14d60:	10c03fcc 	andi	r3,r2,255
   14d64:	008000b4 	movhi	r2,2
   14d68:	10be2104 	addi	r2,r2,-1916
   14d6c:	10c5883a 	add	r2,r2,r3
   14d70:	10800003 	ldbu	r2,0(r2)
   14d74:	2085883a 	add	r2,r4,r2
   14d78:	d0a81b05 	stb	r2,-24468(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   14d7c:	0001883a 	nop
   14d80:	e037883a 	mov	sp,fp
   14d84:	df000017 	ldw	fp,0(sp)
   14d88:	dec00104 	addi	sp,sp,4
   14d8c:	f800283a 	ret

00014d90 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   14d90:	defffc04 	addi	sp,sp,-16
   14d94:	df000315 	stw	fp,12(sp)
   14d98:	df000304 	addi	fp,sp,12
   14d9c:	e13ffe15 	stw	r4,-8(fp)
   14da0:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   14da4:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   14da8:	00000b06 	br	14dd8 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   14dac:	e0bffe17 	ldw	r2,-8(fp)
   14db0:	10c00044 	addi	r3,r2,1
   14db4:	e0fffe15 	stw	r3,-8(fp)
   14db8:	e0ffff17 	ldw	r3,-4(fp)
   14dbc:	19000044 	addi	r4,r3,1
   14dc0:	e13fff15 	stw	r4,-4(fp)
   14dc4:	18c00003 	ldbu	r3,0(r3)
   14dc8:	10c00005 	stb	r3,0(r2)
        len++;
   14dcc:	e0bffd03 	ldbu	r2,-12(fp)
   14dd0:	10800044 	addi	r2,r2,1
   14dd4:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   14dd8:	e0bfff17 	ldw	r2,-4(fp)
   14ddc:	10800003 	ldbu	r2,0(r2)
   14de0:	10803fcc 	andi	r2,r2,255
   14de4:	103ff11e 	bne	r2,zero,14dac <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   14de8:	e0bffe17 	ldw	r2,-8(fp)
   14dec:	10000005 	stb	zero,0(r2)
    return (len);
   14df0:	e0bffd03 	ldbu	r2,-12(fp)
}
   14df4:	e037883a 	mov	sp,fp
   14df8:	df000017 	ldw	fp,0(sp)
   14dfc:	dec00104 	addi	sp,sp,4
   14e00:	f800283a 	ret

00014e04 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   14e04:	defffd04 	addi	sp,sp,-12
   14e08:	df000215 	stw	fp,8(sp)
   14e0c:	df000204 	addi	fp,sp,8
   14e10:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   14e14:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   14e18:	00000606 	br	14e34 <OS_StrLen+0x30>
        psrc++;
   14e1c:	e0bfff17 	ldw	r2,-4(fp)
   14e20:	10800044 	addi	r2,r2,1
   14e24:	e0bfff15 	stw	r2,-4(fp)
        len++;
   14e28:	e0bffe03 	ldbu	r2,-8(fp)
   14e2c:	10800044 	addi	r2,r2,1
   14e30:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   14e34:	e0bfff17 	ldw	r2,-4(fp)
   14e38:	10800003 	ldbu	r2,0(r2)
   14e3c:	10803fcc 	andi	r2,r2,255
   14e40:	103ff61e 	bne	r2,zero,14e1c <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
   14e44:	e0bffe03 	ldbu	r2,-8(fp)
}
   14e48:	e037883a 	mov	sp,fp
   14e4c:	df000017 	ldw	fp,0(sp)
   14e50:	dec00104 	addi	sp,sp,4
   14e54:	f800283a 	ret

00014e58 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   14e58:	defffa04 	addi	sp,sp,-24
   14e5c:	dfc00515 	stw	ra,20(sp)
   14e60:	df000415 	stw	fp,16(sp)
   14e64:	df000404 	addi	fp,sp,16
   14e68:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14e6c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14e70:	0005303a 	rdctl	r2,status
   14e74:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14e78:	e0fffd17 	ldw	r3,-12(fp)
   14e7c:	00bfff84 	movi	r2,-2
   14e80:	1884703a 	and	r2,r3,r2
   14e84:	1001703a 	wrctl	status,r2
  
  return context;
   14e88:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   14e8c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   14e90:	d0a81a17 	ldw	r2,-24472(gp)
   14e94:	10800044 	addi	r2,r2,1
   14e98:	d0a81a15 	stw	r2,-24472(gp)
   14e9c:	e0bffc17 	ldw	r2,-16(fp)
   14ea0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14ea4:	e0bffe17 	ldw	r2,-8(fp)
   14ea8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   14eac:	001e3380 	call	1e338 <OSTaskIdleHook>
    }
   14eb0:	003fef06 	br	14e70 <OS_TaskIdle+0x18>

00014eb4 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   14eb4:	defff804 	addi	sp,sp,-32
   14eb8:	dfc00715 	stw	ra,28(sp)
   14ebc:	df000615 	stw	fp,24(sp)
   14ec0:	dc400515 	stw	r17,20(sp)
   14ec4:	dc000415 	stw	r16,16(sp)
   14ec8:	df000604 	addi	fp,sp,24
   14ecc:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14ed0:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   14ed4:	00000206 	br	14ee0 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   14ed8:	01000044 	movi	r4,1
   14edc:	001a5f80 	call	1a5f8 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   14ee0:	d0a82b03 	ldbu	r2,-24404(gp)
   14ee4:	10803fcc 	andi	r2,r2,255
   14ee8:	103ffb26 	beq	r2,zero,14ed8 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   14eec:	d0e81f17 	ldw	r3,-24452(gp)
   14ef0:	00947b34 	movhi	r2,20972
   14ef4:	10a147c4 	addi	r2,r2,-31457
   14ef8:	1888383a 	mulxuu	r4,r3,r2
   14efc:	1885383a 	mul	r2,r3,r2
   14f00:	1021883a 	mov	r16,r2
   14f04:	2023883a 	mov	r17,r4
   14f08:	8804d17a 	srli	r2,r17,5
   14f0c:	d0a81f15 	stw	r2,-24452(gp)
    if (OSIdleCtrMax == 0L) {
   14f10:	d0a81f17 	ldw	r2,-24452(gp)
   14f14:	1000031e 	bne	r2,zero,14f24 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
   14f18:	d0282105 	stb	zero,-24444(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   14f1c:	01003fc4 	movi	r4,255
   14f20:	001a2800 	call	1a280 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14f24:	0005303a 	rdctl	r2,status
   14f28:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14f2c:	e0fffb17 	ldw	r3,-20(fp)
   14f30:	00bfff84 	movi	r2,-2
   14f34:	1884703a 	and	r2,r3,r2
   14f38:	1001703a 	wrctl	status,r2
  
  return context;
   14f3c:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   14f40:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   14f44:	d0a81a17 	ldw	r2,-24472(gp)
   14f48:	d0a82c15 	stw	r2,-24400(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   14f4c:	d0281a15 	stw	zero,-24472(gp)
   14f50:	e0bffa17 	ldw	r2,-24(fp)
   14f54:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14f58:	e0bffc17 	ldw	r2,-16(fp)
   14f5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   14f60:	d0e82c17 	ldw	r3,-24400(gp)
   14f64:	d0a81f17 	ldw	r2,-24452(gp)
   14f68:	1885203a 	divu	r2,r3,r2
   14f6c:	1007883a 	mov	r3,r2
   14f70:	00801904 	movi	r2,100
   14f74:	10c5c83a 	sub	r2,r2,r3
   14f78:	d0a82105 	stb	r2,-24444(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   14f7c:	001e2b80 	call	1e2b8 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   14f80:	0014f900 	call	14f90 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   14f84:	0009883a 	mov	r4,zero
   14f88:	001a5f80 	call	1a5f8 <OSTimeDly>
    }
   14f8c:	003fe506 	br	14f24 <OS_TaskStat+0x70>

00014f90 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   14f90:	defffa04 	addi	sp,sp,-24
   14f94:	dfc00515 	stw	ra,20(sp)
   14f98:	df000415 	stw	fp,16(sp)
   14f9c:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   14fa0:	e03ffc05 	stb	zero,-16(fp)
   14fa4:	00002406 	br	15038 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   14fa8:	e0bffc03 	ldbu	r2,-16(fp)
   14fac:	e0fffe04 	addi	r3,fp,-8
   14fb0:	180b883a 	mov	r5,r3
   14fb4:	1009883a 	mov	r4,r2
   14fb8:	001a0c00 	call	1a0c0 <OSTaskStkChk>
   14fbc:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   14fc0:	e0bffc43 	ldbu	r2,-15(fp)
   14fc4:	1000191e 	bne	r2,zero,1502c <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   14fc8:	e0fffc03 	ldbu	r3,-16(fp)
   14fcc:	008000f4 	movhi	r2,3
   14fd0:	1092f304 	addi	r2,r2,19404
   14fd4:	18c7883a 	add	r3,r3,r3
   14fd8:	18c7883a 	add	r3,r3,r3
   14fdc:	10c5883a 	add	r2,r2,r3
   14fe0:	10800017 	ldw	r2,0(r2)
   14fe4:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   14fe8:	e0bffd17 	ldw	r2,-12(fp)
   14fec:	10000f26 	beq	r2,zero,1502c <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   14ff0:	e0bffd17 	ldw	r2,-12(fp)
   14ff4:	10800060 	cmpeqi	r2,r2,1
   14ff8:	10000c1e 	bne	r2,zero,1502c <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   14ffc:	e0bffd17 	ldw	r2,-12(fp)
   15000:	10c00217 	ldw	r3,8(r2)
   15004:	e0bffd17 	ldw	r2,-12(fp)
   15008:	10800317 	ldw	r2,12(r2)
   1500c:	1085883a 	add	r2,r2,r2
   15010:	1085883a 	add	r2,r2,r2
   15014:	1887883a 	add	r3,r3,r2
   15018:	e0bffd17 	ldw	r2,-12(fp)
   1501c:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   15020:	e0ffff17 	ldw	r3,-4(fp)
   15024:	e0bffd17 	ldw	r2,-12(fp)
   15028:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   1502c:	e0bffc03 	ldbu	r2,-16(fp)
   15030:	10800044 	addi	r2,r2,1
   15034:	e0bffc05 	stb	r2,-16(fp)
   15038:	e0bffc03 	ldbu	r2,-16(fp)
   1503c:	10800570 	cmpltui	r2,r2,21
   15040:	103fd91e 	bne	r2,zero,14fa8 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
   15044:	0001883a 	nop
   15048:	e037883a 	mov	sp,fp
   1504c:	dfc00117 	ldw	ra,4(sp)
   15050:	df000017 	ldw	fp,0(sp)
   15054:	dec00204 	addi	sp,sp,8
   15058:	f800283a 	ret

0001505c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   1505c:	defff204 	addi	sp,sp,-56
   15060:	dfc00d15 	stw	ra,52(sp)
   15064:	df000c15 	stw	fp,48(sp)
   15068:	df000c04 	addi	fp,sp,48
   1506c:	e17ffc15 	stw	r5,-16(fp)
   15070:	e1bffd15 	stw	r6,-12(fp)
   15074:	3807883a 	mov	r3,r7
   15078:	e0800417 	ldw	r2,16(fp)
   1507c:	e13ffb05 	stb	r4,-20(fp)
   15080:	e0fffe0d 	sth	r3,-8(fp)
   15084:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   15088:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1508c:	0005303a 	rdctl	r2,status
   15090:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15094:	e0fffa17 	ldw	r3,-24(fp)
   15098:	00bfff84 	movi	r2,-2
   1509c:	1884703a 	and	r2,r3,r2
   150a0:	1001703a 	wrctl	status,r2
  
  return context;
   150a4:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
   150a8:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   150ac:	d0a82017 	ldw	r2,-24448(gp)
   150b0:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
   150b4:	e0bff617 	ldw	r2,-40(fp)
   150b8:	10009326 	beq	r2,zero,15308 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   150bc:	e0bff617 	ldw	r2,-40(fp)
   150c0:	10800517 	ldw	r2,20(r2)
   150c4:	d0a82015 	stw	r2,-24448(gp)
   150c8:	e0bff417 	ldw	r2,-48(fp)
   150cc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   150d0:	e0bff817 	ldw	r2,-32(fp)
   150d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   150d8:	e0bff617 	ldw	r2,-40(fp)
   150dc:	e0fffc17 	ldw	r3,-16(fp)
   150e0:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   150e4:	e0bff617 	ldw	r2,-40(fp)
   150e8:	e0fffb03 	ldbu	r3,-20(fp)
   150ec:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   150f0:	e0bff617 	ldw	r2,-40(fp)
   150f4:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   150f8:	e0bff617 	ldw	r2,-40(fp)
   150fc:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   15100:	e0bff617 	ldw	r2,-40(fp)
   15104:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   15108:	e0bff617 	ldw	r2,-40(fp)
   1510c:	e0c00317 	ldw	r3,12(fp)
   15110:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   15114:	e0bff617 	ldw	r2,-40(fp)
   15118:	e0c00217 	ldw	r3,8(fp)
   1511c:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   15120:	e0bff617 	ldw	r2,-40(fp)
   15124:	e0fffd17 	ldw	r3,-12(fp)
   15128:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   1512c:	e0bff617 	ldw	r2,-40(fp)
   15130:	e0ffff0b 	ldhu	r3,-4(fp)
   15134:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   15138:	e0bff617 	ldw	r2,-40(fp)
   1513c:	e0fffe0b 	ldhu	r3,-8(fp)
   15140:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   15144:	e0bff617 	ldw	r2,-40(fp)
   15148:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   1514c:	e0bffb03 	ldbu	r2,-20(fp)
   15150:	1004d0fa 	srli	r2,r2,3
   15154:	1007883a 	mov	r3,r2
   15158:	e0bff617 	ldw	r2,-40(fp)
   1515c:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   15160:	e0bffb03 	ldbu	r2,-20(fp)
   15164:	108001cc 	andi	r2,r2,7
   15168:	1007883a 	mov	r3,r2
   1516c:	e0bff617 	ldw	r2,-40(fp)
   15170:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   15174:	e0bff617 	ldw	r2,-40(fp)
   15178:	10800d03 	ldbu	r2,52(r2)
   1517c:	10803fcc 	andi	r2,r2,255
   15180:	00c00044 	movi	r3,1
   15184:	1884983a 	sll	r2,r3,r2
   15188:	1007883a 	mov	r3,r2
   1518c:	e0bff617 	ldw	r2,-40(fp)
   15190:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   15194:	e0bff617 	ldw	r2,-40(fp)
   15198:	10800cc3 	ldbu	r2,51(r2)
   1519c:	10803fcc 	andi	r2,r2,255
   151a0:	00c00044 	movi	r3,1
   151a4:	1884983a 	sll	r2,r3,r2
   151a8:	1007883a 	mov	r3,r2
   151ac:	e0bff617 	ldw	r2,-40(fp)
   151b0:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   151b4:	e0bff617 	ldw	r2,-40(fp)
   151b8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   151bc:	e0bff617 	ldw	r2,-40(fp)
   151c0:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   151c4:	e0bff617 	ldw	r2,-40(fp)
   151c8:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   151cc:	e0bff617 	ldw	r2,-40(fp)
   151d0:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   151d4:	e0bff617 	ldw	r2,-40(fp)
   151d8:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   151dc:	e0bff617 	ldw	r2,-40(fp)
   151e0:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   151e4:	e0bff617 	ldw	r2,-40(fp)
   151e8:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   151ec:	e0bff617 	ldw	r2,-40(fp)
   151f0:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   151f4:	e0bff617 	ldw	r2,-40(fp)
   151f8:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   151fc:	e0bff617 	ldw	r2,-40(fp)
   15200:	00c00fc4 	movi	r3,63
   15204:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   15208:	e0bff617 	ldw	r2,-40(fp)
   1520c:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   15210:	e13ff617 	ldw	r4,-40(fp)
   15214:	001e3580 	call	1e358 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   15218:	e13ff617 	ldw	r4,-40(fp)
   1521c:	001e2500 	call	1e250 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15220:	0005303a 	rdctl	r2,status
   15224:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15228:	e0fff517 	ldw	r3,-44(fp)
   1522c:	00bfff84 	movi	r2,-2
   15230:	1884703a 	and	r2,r3,r2
   15234:	1001703a 	wrctl	status,r2
  
  return context;
   15238:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
   1523c:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   15240:	e0fffb03 	ldbu	r3,-20(fp)
   15244:	008000f4 	movhi	r2,3
   15248:	1092f304 	addi	r2,r2,19404
   1524c:	18c7883a 	add	r3,r3,r3
   15250:	18c7883a 	add	r3,r3,r3
   15254:	10c5883a 	add	r2,r2,r3
   15258:	e0fff617 	ldw	r3,-40(fp)
   1525c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   15260:	d0e81c17 	ldw	r3,-24464(gp)
   15264:	e0bff617 	ldw	r2,-40(fp)
   15268:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   1526c:	e0bff617 	ldw	r2,-40(fp)
   15270:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   15274:	d0a81c17 	ldw	r2,-24464(gp)
   15278:	10000326 	beq	r2,zero,15288 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   1527c:	d0a81c17 	ldw	r2,-24464(gp)
   15280:	e0fff617 	ldw	r3,-40(fp)
   15284:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   15288:	e0bff617 	ldw	r2,-40(fp)
   1528c:	d0a81c15 	stw	r2,-24464(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   15290:	e0bff617 	ldw	r2,-40(fp)
   15294:	10c00d83 	ldbu	r3,54(r2)
   15298:	d0a82503 	ldbu	r2,-24428(gp)
   1529c:	1884b03a 	or	r2,r3,r2
   152a0:	d0a82505 	stb	r2,-24428(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   152a4:	e0bff617 	ldw	r2,-40(fp)
   152a8:	10800d03 	ldbu	r2,52(r2)
   152ac:	10c03fcc 	andi	r3,r2,255
   152b0:	e0bff617 	ldw	r2,-40(fp)
   152b4:	10800d03 	ldbu	r2,52(r2)
   152b8:	11003fcc 	andi	r4,r2,255
   152bc:	d0a82544 	addi	r2,gp,-24427
   152c0:	2085883a 	add	r2,r4,r2
   152c4:	11000003 	ldbu	r4,0(r2)
   152c8:	e0bff617 	ldw	r2,-40(fp)
   152cc:	10800d43 	ldbu	r2,53(r2)
   152d0:	2084b03a 	or	r2,r4,r2
   152d4:	1009883a 	mov	r4,r2
   152d8:	d0a82544 	addi	r2,gp,-24427
   152dc:	1885883a 	add	r2,r3,r2
   152e0:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   152e4:	d0a82143 	ldbu	r2,-24443(gp)
   152e8:	10800044 	addi	r2,r2,1
   152ec:	d0a82145 	stb	r2,-24443(gp)
   152f0:	e0bff417 	ldw	r2,-48(fp)
   152f4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   152f8:	e0bff717 	ldw	r2,-36(fp)
   152fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   15300:	0005883a 	mov	r2,zero
   15304:	00000506 	br	1531c <OS_TCBInit+0x2c0>
   15308:	e0bff417 	ldw	r2,-48(fp)
   1530c:	e0bff915 	stw	r2,-28(fp)
   15310:	e0bff917 	ldw	r2,-28(fp)
   15314:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   15318:	00801084 	movi	r2,66
}
   1531c:	e037883a 	mov	sp,fp
   15320:	dfc00117 	ldw	ra,4(sp)
   15324:	df000017 	ldw	fp,0(sp)
   15328:	dec00204 	addi	sp,sp,8
   1532c:	f800283a 	ret

00015330 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   15330:	defffe04 	addi	sp,sp,-8
   15334:	df000115 	stw	fp,4(sp)
   15338:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   1533c:	d0a01004 	addi	r2,gp,-32704
   15340:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   15344:	d0a01104 	addi	r2,gp,-32700
   15348:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   1534c:	d0a01284 	addi	r2,gp,-32694
   15350:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   15354:	d0a01304 	addi	r2,gp,-32692
   15358:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   1535c:	d0a01204 	addi	r2,gp,-32696
   15360:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   15364:	d0a01384 	addi	r2,gp,-32690
   15368:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   1536c:	d0a01404 	addi	r2,gp,-32688
   15370:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   15374:	d0a01484 	addi	r2,gp,-32686
   15378:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   1537c:	d0a01504 	addi	r2,gp,-32684
   15380:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   15384:	d0a01584 	addi	r2,gp,-32682
   15388:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   1538c:	d0a01604 	addi	r2,gp,-32680
   15390:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   15394:	d0a01684 	addi	r2,gp,-32678
   15398:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   1539c:	d0a01704 	addi	r2,gp,-32676
   153a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   153a4:	d0a01784 	addi	r2,gp,-32674
   153a8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   153ac:	d0a01804 	addi	r2,gp,-32672
   153b0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   153b4:	d0a01884 	addi	r2,gp,-32670
   153b8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   153bc:	d0a01904 	addi	r2,gp,-32668
   153c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   153c4:	d0a01984 	addi	r2,gp,-32666
   153c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   153cc:	d0a01a04 	addi	r2,gp,-32664
   153d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   153d4:	d0a01a84 	addi	r2,gp,-32662
   153d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   153dc:	d0a01b04 	addi	r2,gp,-32660
   153e0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   153e4:	d0a01b84 	addi	r2,gp,-32658
   153e8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   153ec:	d0a01c04 	addi	r2,gp,-32656
   153f0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   153f4:	d0a01c84 	addi	r2,gp,-32654
   153f8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   153fc:	d0a01d04 	addi	r2,gp,-32652
   15400:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   15404:	d0a01d84 	addi	r2,gp,-32650
   15408:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   1540c:	d0a01e04 	addi	r2,gp,-32648
   15410:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   15414:	d0a01e84 	addi	r2,gp,-32646
   15418:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   1541c:	d0a01f04 	addi	r2,gp,-32644
   15420:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   15424:	d0a01f84 	addi	r2,gp,-32642
   15428:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   1542c:	d0a02004 	addi	r2,gp,-32640
   15430:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   15434:	d0a02084 	addi	r2,gp,-32638
   15438:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   1543c:	d0a02104 	addi	r2,gp,-32636
   15440:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   15444:	d0a02184 	addi	r2,gp,-32634
   15448:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   1544c:	d0a02204 	addi	r2,gp,-32632
   15450:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   15454:	d0a02284 	addi	r2,gp,-32630
   15458:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   1545c:	d0a02304 	addi	r2,gp,-32628
   15460:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   15464:	d0a02384 	addi	r2,gp,-32626
   15468:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   1546c:	d0a02404 	addi	r2,gp,-32624
   15470:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   15474:	d0a02484 	addi	r2,gp,-32622
   15478:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   1547c:	d0a02504 	addi	r2,gp,-32620
   15480:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   15484:	d0a02584 	addi	r2,gp,-32618
   15488:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   1548c:	d0a02604 	addi	r2,gp,-32616
   15490:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   15494:	d0a02684 	addi	r2,gp,-32614
   15498:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   1549c:	d0a02704 	addi	r2,gp,-32612
   154a0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   154a4:	d0a02c04 	addi	r2,gp,-32592
   154a8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   154ac:	0001883a 	nop
   154b0:	e037883a 	mov	sp,fp
   154b4:	df000017 	ldw	fp,0(sp)
   154b8:	dec00104 	addi	sp,sp,4
   154bc:	f800283a 	ret

000154c0 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   154c0:	defff204 	addi	sp,sp,-56
   154c4:	df000d15 	stw	fp,52(sp)
   154c8:	df000d04 	addi	fp,sp,52
   154cc:	e13ffc15 	stw	r4,-16(fp)
   154d0:	2807883a 	mov	r3,r5
   154d4:	3005883a 	mov	r2,r6
   154d8:	e1ffff15 	stw	r7,-4(fp)
   154dc:	e0fffd0d 	sth	r3,-12(fp)
   154e0:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   154e4:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   154e8:	e0bfff17 	ldw	r2,-4(fp)
   154ec:	1000021e 	bne	r2,zero,154f8 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   154f0:	0005883a 	mov	r2,zero
   154f4:	0000b006 	br	157b8 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   154f8:	e0bffc17 	ldw	r2,-16(fp)
   154fc:	1000051e 	bne	r2,zero,15514 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   15500:	e0bfff17 	ldw	r2,-4(fp)
   15504:	00c01b84 	movi	r3,110
   15508:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1550c:	0005883a 	mov	r2,zero
   15510:	0000a906 	br	157b8 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   15514:	e0bffc17 	ldw	r2,-16(fp)
   15518:	10800003 	ldbu	r2,0(r2)
   1551c:	10803fcc 	andi	r2,r2,255
   15520:	10800160 	cmpeqi	r2,r2,5
   15524:	1000051e 	bne	r2,zero,1553c <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   15528:	e0bfff17 	ldw	r2,-4(fp)
   1552c:	00c00044 	movi	r3,1
   15530:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15534:	0005883a 	mov	r2,zero
   15538:	00009f06 	br	157b8 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   1553c:	e0fffe03 	ldbu	r3,-8(fp)
   15540:	00bfe004 	movi	r2,-128
   15544:	1884703a 	and	r2,r3,r2
   15548:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   1554c:	e0bff503 	ldbu	r2,-44(fp)
   15550:	10000626 	beq	r2,zero,1556c <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   15554:	e0bffe03 	ldbu	r2,-8(fp)
   15558:	10801fcc 	andi	r2,r2,127
   1555c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   15560:	00800044 	movi	r2,1
   15564:	e0bff385 	stb	r2,-50(fp)
   15568:	00000106 	br	15570 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   1556c:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   15570:	e0bfff17 	ldw	r2,-4(fp)
   15574:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15578:	0005303a 	rdctl	r2,status
   1557c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15580:	e0fffb17 	ldw	r3,-20(fp)
   15584:	00bfff84 	movi	r2,-2
   15588:	1884703a 	and	r2,r3,r2
   1558c:	1001703a 	wrctl	status,r2
  
  return context;
   15590:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   15594:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   15598:	e0bffe03 	ldbu	r2,-8(fp)
   1559c:	10c00060 	cmpeqi	r3,r2,1
   155a0:	18005f1e 	bne	r3,zero,15720 <OSFlagAccept+0x260>
   155a4:	10c00088 	cmpgei	r3,r2,2
   155a8:	1800021e 	bne	r3,zero,155b4 <OSFlagAccept+0xf4>
   155ac:	10003f26 	beq	r2,zero,156ac <OSFlagAccept+0x1ec>
   155b0:	00007706 	br	15790 <OSFlagAccept+0x2d0>
   155b4:	10c000a0 	cmpeqi	r3,r2,2
   155b8:	1800031e 	bne	r3,zero,155c8 <OSFlagAccept+0x108>
   155bc:	108000e0 	cmpeqi	r2,r2,3
   155c0:	10001e1e 	bne	r2,zero,1563c <OSFlagAccept+0x17c>
   155c4:	00007206 	br	15790 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   155c8:	e0bffc17 	ldw	r2,-16(fp)
   155cc:	10c0020b 	ldhu	r3,8(r2)
   155d0:	e0bffd0b 	ldhu	r2,-12(fp)
   155d4:	1884703a 	and	r2,r3,r2
   155d8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   155dc:	e0fff30b 	ldhu	r3,-52(fp)
   155e0:	e0bffd0b 	ldhu	r2,-12(fp)
   155e4:	18800d1e 	bne	r3,r2,1561c <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   155e8:	e0bff383 	ldbu	r2,-50(fp)
   155ec:	10800058 	cmpnei	r2,r2,1
   155f0:	10000d1e 	bne	r2,zero,15628 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   155f4:	e0bffc17 	ldw	r2,-16(fp)
   155f8:	1080020b 	ldhu	r2,8(r2)
   155fc:	1007883a 	mov	r3,r2
   15600:	e0bff30b 	ldhu	r2,-52(fp)
   15604:	0084303a 	nor	r2,zero,r2
   15608:	1884703a 	and	r2,r3,r2
   1560c:	1007883a 	mov	r3,r2
   15610:	e0bffc17 	ldw	r2,-16(fp)
   15614:	10c0020d 	sth	r3,8(r2)
   15618:	00000306 	br	15628 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1561c:	e0bfff17 	ldw	r2,-4(fp)
   15620:	00c01c04 	movi	r3,112
   15624:	10c00005 	stb	r3,0(r2)
   15628:	e0bff417 	ldw	r2,-48(fp)
   1562c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15630:	e0bff617 	ldw	r2,-40(fp)
   15634:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   15638:	00005e06 	br	157b4 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   1563c:	e0bffc17 	ldw	r2,-16(fp)
   15640:	10c0020b 	ldhu	r3,8(r2)
   15644:	e0bffd0b 	ldhu	r2,-12(fp)
   15648:	1884703a 	and	r2,r3,r2
   1564c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   15650:	e0bff30b 	ldhu	r2,-52(fp)
   15654:	10000d26 	beq	r2,zero,1568c <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15658:	e0bff383 	ldbu	r2,-50(fp)
   1565c:	10800058 	cmpnei	r2,r2,1
   15660:	10000d1e 	bne	r2,zero,15698 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   15664:	e0bffc17 	ldw	r2,-16(fp)
   15668:	1080020b 	ldhu	r2,8(r2)
   1566c:	1007883a 	mov	r3,r2
   15670:	e0bff30b 	ldhu	r2,-52(fp)
   15674:	0084303a 	nor	r2,zero,r2
   15678:	1884703a 	and	r2,r3,r2
   1567c:	1007883a 	mov	r3,r2
   15680:	e0bffc17 	ldw	r2,-16(fp)
   15684:	10c0020d 	sth	r3,8(r2)
   15688:	00000306 	br	15698 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1568c:	e0bfff17 	ldw	r2,-4(fp)
   15690:	00c01c04 	movi	r3,112
   15694:	10c00005 	stb	r3,0(r2)
   15698:	e0bff417 	ldw	r2,-48(fp)
   1569c:	e0bff715 	stw	r2,-36(fp)
   156a0:	e0bff717 	ldw	r2,-36(fp)
   156a4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   156a8:	00004206 	br	157b4 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   156ac:	e0bffc17 	ldw	r2,-16(fp)
   156b0:	1080020b 	ldhu	r2,8(r2)
   156b4:	0084303a 	nor	r2,zero,r2
   156b8:	1007883a 	mov	r3,r2
   156bc:	e0bffd0b 	ldhu	r2,-12(fp)
   156c0:	1884703a 	and	r2,r3,r2
   156c4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   156c8:	e0fff30b 	ldhu	r3,-52(fp)
   156cc:	e0bffd0b 	ldhu	r2,-12(fp)
   156d0:	18800b1e 	bne	r3,r2,15700 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   156d4:	e0bff383 	ldbu	r2,-50(fp)
   156d8:	10800058 	cmpnei	r2,r2,1
   156dc:	10000b1e 	bne	r2,zero,1570c <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   156e0:	e0bffc17 	ldw	r2,-16(fp)
   156e4:	10c0020b 	ldhu	r3,8(r2)
   156e8:	e0bff30b 	ldhu	r2,-52(fp)
   156ec:	1884b03a 	or	r2,r3,r2
   156f0:	1007883a 	mov	r3,r2
   156f4:	e0bffc17 	ldw	r2,-16(fp)
   156f8:	10c0020d 	sth	r3,8(r2)
   156fc:	00000306 	br	1570c <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   15700:	e0bfff17 	ldw	r2,-4(fp)
   15704:	00c01c04 	movi	r3,112
   15708:	10c00005 	stb	r3,0(r2)
   1570c:	e0bff417 	ldw	r2,-48(fp)
   15710:	e0bff815 	stw	r2,-32(fp)
   15714:	e0bff817 	ldw	r2,-32(fp)
   15718:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1571c:	00002506 	br	157b4 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   15720:	e0bffc17 	ldw	r2,-16(fp)
   15724:	1080020b 	ldhu	r2,8(r2)
   15728:	0084303a 	nor	r2,zero,r2
   1572c:	1007883a 	mov	r3,r2
   15730:	e0bffd0b 	ldhu	r2,-12(fp)
   15734:	1884703a 	and	r2,r3,r2
   15738:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   1573c:	e0bff30b 	ldhu	r2,-52(fp)
   15740:	10000b26 	beq	r2,zero,15770 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15744:	e0bff383 	ldbu	r2,-50(fp)
   15748:	10800058 	cmpnei	r2,r2,1
   1574c:	10000b1e 	bne	r2,zero,1577c <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   15750:	e0bffc17 	ldw	r2,-16(fp)
   15754:	10c0020b 	ldhu	r3,8(r2)
   15758:	e0bff30b 	ldhu	r2,-52(fp)
   1575c:	1884b03a 	or	r2,r3,r2
   15760:	1007883a 	mov	r3,r2
   15764:	e0bffc17 	ldw	r2,-16(fp)
   15768:	10c0020d 	sth	r3,8(r2)
   1576c:	00000306 	br	1577c <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   15770:	e0bfff17 	ldw	r2,-4(fp)
   15774:	00c01c04 	movi	r3,112
   15778:	10c00005 	stb	r3,0(r2)
   1577c:	e0bff417 	ldw	r2,-48(fp)
   15780:	e0bff915 	stw	r2,-28(fp)
   15784:	e0bff917 	ldw	r2,-28(fp)
   15788:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1578c:	00000906 	br	157b4 <OSFlagAccept+0x2f4>
   15790:	e0bff417 	ldw	r2,-48(fp)
   15794:	e0bffa15 	stw	r2,-24(fp)
   15798:	e0bffa17 	ldw	r2,-24(fp)
   1579c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   157a0:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   157a4:	e0bfff17 	ldw	r2,-4(fp)
   157a8:	00c01bc4 	movi	r3,111
   157ac:	10c00005 	stb	r3,0(r2)
             break;
   157b0:	0001883a 	nop
    }
    return (flags_rdy);
   157b4:	e0bff30b 	ldhu	r2,-52(fp)
}
   157b8:	e037883a 	mov	sp,fp
   157bc:	df000017 	ldw	fp,0(sp)
   157c0:	dec00104 	addi	sp,sp,4
   157c4:	f800283a 	ret

000157c8 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   157c8:	defff804 	addi	sp,sp,-32
   157cc:	df000715 	stw	fp,28(sp)
   157d0:	df000704 	addi	fp,sp,28
   157d4:	2005883a 	mov	r2,r4
   157d8:	e17fff15 	stw	r5,-4(fp)
   157dc:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   157e0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   157e4:	e0bfff17 	ldw	r2,-4(fp)
   157e8:	1000021e 	bne	r2,zero,157f4 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   157ec:	0005883a 	mov	r2,zero
   157f0:	00003306 	br	158c0 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   157f4:	d0a82703 	ldbu	r2,-24420(gp)
   157f8:	10803fcc 	andi	r2,r2,255
   157fc:	10000526 	beq	r2,zero,15814 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   15800:	e0bfff17 	ldw	r2,-4(fp)
   15804:	00c00404 	movi	r3,16
   15808:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   1580c:	0005883a 	mov	r2,zero
   15810:	00002b06 	br	158c0 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15814:	0005303a 	rdctl	r2,status
   15818:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1581c:	e0fffd17 	ldw	r3,-12(fp)
   15820:	00bfff84 	movi	r2,-2
   15824:	1884703a 	and	r2,r3,r2
   15828:	1001703a 	wrctl	status,r2
  
  return context;
   1582c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   15830:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   15834:	d0a82a17 	ldw	r2,-24408(gp)
   15838:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   1583c:	e0bffb17 	ldw	r2,-20(fp)
   15840:	10001726 	beq	r2,zero,158a0 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   15844:	d0a82a17 	ldw	r2,-24408(gp)
   15848:	10800117 	ldw	r2,4(r2)
   1584c:	d0a82a15 	stw	r2,-24408(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   15850:	e0bffb17 	ldw	r2,-20(fp)
   15854:	00c00144 	movi	r3,5
   15858:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   1585c:	e0bffb17 	ldw	r2,-20(fp)
   15860:	e0fffe0b 	ldhu	r3,-8(fp)
   15864:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   15868:	e0bffb17 	ldw	r2,-20(fp)
   1586c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   15870:	e0bffb17 	ldw	r2,-20(fp)
   15874:	00c00fc4 	movi	r3,63
   15878:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   1587c:	e0bffb17 	ldw	r2,-20(fp)
   15880:	100002c5 	stb	zero,11(r2)
   15884:	e0bff917 	ldw	r2,-28(fp)
   15888:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1588c:	e0bffa17 	ldw	r2,-24(fp)
   15890:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   15894:	e0bfff17 	ldw	r2,-4(fp)
   15898:	10000005 	stb	zero,0(r2)
   1589c:	00000706 	br	158bc <OSFlagCreate+0xf4>
   158a0:	e0bff917 	ldw	r2,-28(fp)
   158a4:	e0bffc15 	stw	r2,-16(fp)
   158a8:	e0bffc17 	ldw	r2,-16(fp)
   158ac:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   158b0:	e0bfff17 	ldw	r2,-4(fp)
   158b4:	00c01c84 	movi	r3,114
   158b8:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   158bc:	e0bffb17 	ldw	r2,-20(fp)
}
   158c0:	e037883a 	mov	sp,fp
   158c4:	df000017 	ldw	fp,0(sp)
   158c8:	dec00104 	addi	sp,sp,4
   158cc:	f800283a 	ret

000158d0 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   158d0:	defff204 	addi	sp,sp,-56
   158d4:	dfc00d15 	stw	ra,52(sp)
   158d8:	df000c15 	stw	fp,48(sp)
   158dc:	df000c04 	addi	fp,sp,48
   158e0:	e13ffd15 	stw	r4,-12(fp)
   158e4:	2805883a 	mov	r2,r5
   158e8:	e1bfff15 	stw	r6,-4(fp)
   158ec:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   158f0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   158f4:	e0bfff17 	ldw	r2,-4(fp)
   158f8:	1000021e 	bne	r2,zero,15904 <OSFlagDel+0x34>
        return (pgrp);
   158fc:	e0bffd17 	ldw	r2,-12(fp)
   15900:	00008006 	br	15b04 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   15904:	e0bffd17 	ldw	r2,-12(fp)
   15908:	1000051e 	bne	r2,zero,15920 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1590c:	e0bfff17 	ldw	r2,-4(fp)
   15910:	00c01b84 	movi	r3,110
   15914:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   15918:	e0bffd17 	ldw	r2,-12(fp)
   1591c:	00007906 	br	15b04 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   15920:	d0a82703 	ldbu	r2,-24420(gp)
   15924:	10803fcc 	andi	r2,r2,255
   15928:	10000526 	beq	r2,zero,15940 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   1592c:	e0bfff17 	ldw	r2,-4(fp)
   15930:	00c003c4 	movi	r3,15
   15934:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   15938:	e0bffd17 	ldw	r2,-12(fp)
   1593c:	00007106 	br	15b04 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   15940:	e0bffd17 	ldw	r2,-12(fp)
   15944:	10800003 	ldbu	r2,0(r2)
   15948:	10803fcc 	andi	r2,r2,255
   1594c:	10800160 	cmpeqi	r2,r2,5
   15950:	1000051e 	bne	r2,zero,15968 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
   15954:	e0bfff17 	ldw	r2,-4(fp)
   15958:	00c00044 	movi	r3,1
   1595c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   15960:	e0bffd17 	ldw	r2,-12(fp)
   15964:	00006706 	br	15b04 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15968:	0005303a 	rdctl	r2,status
   1596c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15970:	e0fffc17 	ldw	r3,-16(fp)
   15974:	00bfff84 	movi	r2,-2
   15978:	1884703a 	and	r2,r3,r2
   1597c:	1001703a 	wrctl	status,r2
  
  return context;
   15980:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   15984:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   15988:	e0bffd17 	ldw	r2,-12(fp)
   1598c:	10800117 	ldw	r2,4(r2)
   15990:	10000326 	beq	r2,zero,159a0 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   15994:	00800044 	movi	r2,1
   15998:	e0bff405 	stb	r2,-48(fp)
   1599c:	00000106 	br	159a4 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   159a0:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   159a4:	e0bffe03 	ldbu	r2,-8(fp)
   159a8:	10000326 	beq	r2,zero,159b8 <OSFlagDel+0xe8>
   159ac:	10800060 	cmpeqi	r2,r2,1
   159b0:	1000231e 	bne	r2,zero,15a40 <OSFlagDel+0x170>
   159b4:	00004806 	br	15ad8 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   159b8:	e0bff403 	ldbu	r2,-48(fp)
   159bc:	1000161e 	bne	r2,zero,15a18 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   159c0:	e0bffd17 	ldw	r2,-12(fp)
   159c4:	00c00fc4 	movi	r3,63
   159c8:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   159cc:	e0bffd17 	ldw	r2,-12(fp)
   159d0:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   159d4:	e0bffd17 	ldw	r2,-12(fp)
   159d8:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   159dc:	d0e82a17 	ldw	r3,-24408(gp)
   159e0:	e0bffd17 	ldw	r2,-12(fp)
   159e4:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   159e8:	e0bffd17 	ldw	r2,-12(fp)
   159ec:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   159f0:	e0bffd17 	ldw	r2,-12(fp)
   159f4:	d0a82a15 	stw	r2,-24408(gp)
   159f8:	e0bff717 	ldw	r2,-36(fp)
   159fc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15a00:	e0bff817 	ldw	r2,-32(fp)
   15a04:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   15a08:	e0bfff17 	ldw	r2,-4(fp)
   15a0c:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   15a10:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   15a14:	00003a06 	br	15b00 <OSFlagDel+0x230>
   15a18:	e0bff717 	ldw	r2,-36(fp)
   15a1c:	e0bff915 	stw	r2,-28(fp)
   15a20:	e0bff917 	ldw	r2,-28(fp)
   15a24:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   15a28:	e0bfff17 	ldw	r2,-4(fp)
   15a2c:	00c01244 	movi	r3,73
   15a30:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   15a34:	e0bffd17 	ldw	r2,-12(fp)
   15a38:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   15a3c:	00003006 	br	15b00 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   15a40:	e0bffd17 	ldw	r2,-12(fp)
   15a44:	10800117 	ldw	r2,4(r2)
   15a48:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   15a4c:	00000606 	br	15a68 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   15a50:	000b883a 	mov	r5,zero
   15a54:	e13ff517 	ldw	r4,-44(fp)
   15a58:	0016a3c0 	call	16a3c <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   15a5c:	e0bff517 	ldw	r2,-44(fp)
   15a60:	10800017 	ldw	r2,0(r2)
   15a64:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   15a68:	e0bff517 	ldw	r2,-44(fp)
   15a6c:	103ff81e 	bne	r2,zero,15a50 <OSFlagDel+0x180>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   15a70:	e0bffd17 	ldw	r2,-12(fp)
   15a74:	00c00fc4 	movi	r3,63
   15a78:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   15a7c:	e0bffd17 	ldw	r2,-12(fp)
   15a80:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   15a84:	e0bffd17 	ldw	r2,-12(fp)
   15a88:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   15a8c:	d0e82a17 	ldw	r3,-24408(gp)
   15a90:	e0bffd17 	ldw	r2,-12(fp)
   15a94:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   15a98:	e0bffd17 	ldw	r2,-12(fp)
   15a9c:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   15aa0:	e0bffd17 	ldw	r2,-12(fp)
   15aa4:	d0a82a15 	stw	r2,-24408(gp)
   15aa8:	e0bff717 	ldw	r2,-36(fp)
   15aac:	e0bffa15 	stw	r2,-24(fp)
   15ab0:	e0bffa17 	ldw	r2,-24(fp)
   15ab4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   15ab8:	e0bff403 	ldbu	r2,-48(fp)
   15abc:	10800058 	cmpnei	r2,r2,1
   15ac0:	1000011e 	bne	r2,zero,15ac8 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   15ac4:	0014c4c0 	call	14c4c <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   15ac8:	e0bfff17 	ldw	r2,-4(fp)
   15acc:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   15ad0:	e03ff615 	stw	zero,-40(fp)
             break;
   15ad4:	00000a06 	br	15b00 <OSFlagDel+0x230>
   15ad8:	e0bff717 	ldw	r2,-36(fp)
   15adc:	e0bffb15 	stw	r2,-20(fp)
   15ae0:	e0bffb17 	ldw	r2,-20(fp)
   15ae4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   15ae8:	e0bfff17 	ldw	r2,-4(fp)
   15aec:	00c001c4 	movi	r3,7
   15af0:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   15af4:	e0bffd17 	ldw	r2,-12(fp)
   15af8:	e0bff615 	stw	r2,-40(fp)
             break;
   15afc:	0001883a 	nop
    }
    return (pgrp_return);
   15b00:	e0bff617 	ldw	r2,-40(fp)
}
   15b04:	e037883a 	mov	sp,fp
   15b08:	dfc00117 	ldw	ra,4(sp)
   15b0c:	df000017 	ldw	fp,0(sp)
   15b10:	dec00204 	addi	sp,sp,8
   15b14:	f800283a 	ret

00015b18 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   15b18:	defff604 	addi	sp,sp,-40
   15b1c:	dfc00915 	stw	ra,36(sp)
   15b20:	df000815 	stw	fp,32(sp)
   15b24:	df000804 	addi	fp,sp,32
   15b28:	e13ffd15 	stw	r4,-12(fp)
   15b2c:	e17ffe15 	stw	r5,-8(fp)
   15b30:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15b34:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   15b38:	e0bfff17 	ldw	r2,-4(fp)
   15b3c:	1000021e 	bne	r2,zero,15b48 <OSFlagNameGet+0x30>
        return (0);
   15b40:	0005883a 	mov	r2,zero
   15b44:	00003906 	br	15c2c <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   15b48:	e0bffd17 	ldw	r2,-12(fp)
   15b4c:	1000051e 	bne	r2,zero,15b64 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   15b50:	e0bfff17 	ldw	r2,-4(fp)
   15b54:	00c01b84 	movi	r3,110
   15b58:	10c00005 	stb	r3,0(r2)
        return (0);
   15b5c:	0005883a 	mov	r2,zero
   15b60:	00003206 	br	15c2c <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   15b64:	e0bffe17 	ldw	r2,-8(fp)
   15b68:	1000051e 	bne	r2,zero,15b80 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   15b6c:	e0bfff17 	ldw	r2,-4(fp)
   15b70:	00c00304 	movi	r3,12
   15b74:	10c00005 	stb	r3,0(r2)
        return (0);
   15b78:	0005883a 	mov	r2,zero
   15b7c:	00002b06 	br	15c2c <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   15b80:	d0a82703 	ldbu	r2,-24420(gp)
   15b84:	10803fcc 	andi	r2,r2,255
   15b88:	10000526 	beq	r2,zero,15ba0 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   15b8c:	e0bfff17 	ldw	r2,-4(fp)
   15b90:	00c00444 	movi	r3,17
   15b94:	10c00005 	stb	r3,0(r2)
        return (0);
   15b98:	0005883a 	mov	r2,zero
   15b9c:	00002306 	br	15c2c <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15ba0:	0005303a 	rdctl	r2,status
   15ba4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15ba8:	e0fffc17 	ldw	r3,-16(fp)
   15bac:	00bfff84 	movi	r2,-2
   15bb0:	1884703a 	and	r2,r3,r2
   15bb4:	1001703a 	wrctl	status,r2
  
  return context;
   15bb8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   15bbc:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   15bc0:	e0bffd17 	ldw	r2,-12(fp)
   15bc4:	10800003 	ldbu	r2,0(r2)
   15bc8:	10803fcc 	andi	r2,r2,255
   15bcc:	10800160 	cmpeqi	r2,r2,5
   15bd0:	1000091e 	bne	r2,zero,15bf8 <OSFlagNameGet+0xe0>
   15bd4:	e0bff817 	ldw	r2,-32(fp)
   15bd8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15bdc:	e0bff917 	ldw	r2,-28(fp)
   15be0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   15be4:	e0bfff17 	ldw	r2,-4(fp)
   15be8:	00c00044 	movi	r3,1
   15bec:	10c00005 	stb	r3,0(r2)
        return (0);
   15bf0:	0005883a 	mov	r2,zero
   15bf4:	00000d06 	br	15c2c <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   15bf8:	e0bffd17 	ldw	r2,-12(fp)
   15bfc:	10800284 	addi	r2,r2,10
   15c00:	100b883a 	mov	r5,r2
   15c04:	e13ffe17 	ldw	r4,-8(fp)
   15c08:	0014d900 	call	14d90 <OS_StrCopy>
   15c0c:	e0bffb05 	stb	r2,-20(fp)
   15c10:	e0bff817 	ldw	r2,-32(fp)
   15c14:	e0bffa15 	stw	r2,-24(fp)
   15c18:	e0bffa17 	ldw	r2,-24(fp)
   15c1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   15c20:	e0bfff17 	ldw	r2,-4(fp)
   15c24:	10000005 	stb	zero,0(r2)
    return (len);
   15c28:	e0bffb03 	ldbu	r2,-20(fp)
}
   15c2c:	e037883a 	mov	sp,fp
   15c30:	dfc00117 	ldw	ra,4(sp)
   15c34:	df000017 	ldw	fp,0(sp)
   15c38:	dec00204 	addi	sp,sp,8
   15c3c:	f800283a 	ret

00015c40 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   15c40:	defff504 	addi	sp,sp,-44
   15c44:	dfc00a15 	stw	ra,40(sp)
   15c48:	df000915 	stw	fp,36(sp)
   15c4c:	df000904 	addi	fp,sp,36
   15c50:	e13ffd15 	stw	r4,-12(fp)
   15c54:	e17ffe15 	stw	r5,-8(fp)
   15c58:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15c5c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   15c60:	e0bfff17 	ldw	r2,-4(fp)
   15c64:	10004326 	beq	r2,zero,15d74 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   15c68:	e0bffd17 	ldw	r2,-12(fp)
   15c6c:	1000041e 	bne	r2,zero,15c80 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   15c70:	e0bfff17 	ldw	r2,-4(fp)
   15c74:	00c01b84 	movi	r3,110
   15c78:	10c00005 	stb	r3,0(r2)
        return;
   15c7c:	00003e06 	br	15d78 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   15c80:	e0bffe17 	ldw	r2,-8(fp)
   15c84:	1000041e 	bne	r2,zero,15c98 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   15c88:	e0bfff17 	ldw	r2,-4(fp)
   15c8c:	00c00304 	movi	r3,12
   15c90:	10c00005 	stb	r3,0(r2)
        return;
   15c94:	00003806 	br	15d78 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   15c98:	d0a82703 	ldbu	r2,-24420(gp)
   15c9c:	10803fcc 	andi	r2,r2,255
   15ca0:	10000426 	beq	r2,zero,15cb4 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   15ca4:	e0bfff17 	ldw	r2,-4(fp)
   15ca8:	00c00484 	movi	r3,18
   15cac:	10c00005 	stb	r3,0(r2)
        return;
   15cb0:	00003106 	br	15d78 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15cb4:	0005303a 	rdctl	r2,status
   15cb8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15cbc:	e0fffc17 	ldw	r3,-16(fp)
   15cc0:	00bfff84 	movi	r2,-2
   15cc4:	1884703a 	and	r2,r3,r2
   15cc8:	1001703a 	wrctl	status,r2
  
  return context;
   15ccc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   15cd0:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   15cd4:	e0bffd17 	ldw	r2,-12(fp)
   15cd8:	10800003 	ldbu	r2,0(r2)
   15cdc:	10803fcc 	andi	r2,r2,255
   15ce0:	10800160 	cmpeqi	r2,r2,5
   15ce4:	1000081e 	bne	r2,zero,15d08 <OSFlagNameSet+0xc8>
   15ce8:	e0bff717 	ldw	r2,-36(fp)
   15cec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15cf0:	e0bff817 	ldw	r2,-32(fp)
   15cf4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   15cf8:	e0bfff17 	ldw	r2,-4(fp)
   15cfc:	00c00044 	movi	r3,1
   15d00:	10c00005 	stb	r3,0(r2)
        return;
   15d04:	00001c06 	br	15d78 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   15d08:	e13ffe17 	ldw	r4,-8(fp)
   15d0c:	0014e040 	call	14e04 <OS_StrLen>
   15d10:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   15d14:	e0bffa03 	ldbu	r2,-24(fp)
   15d18:	10800830 	cmpltui	r2,r2,32
   15d1c:	1000081e 	bne	r2,zero,15d40 <OSFlagNameSet+0x100>
   15d20:	e0bff717 	ldw	r2,-36(fp)
   15d24:	e0bff915 	stw	r2,-28(fp)
   15d28:	e0bff917 	ldw	r2,-28(fp)
   15d2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   15d30:	e0bfff17 	ldw	r2,-4(fp)
   15d34:	00c01cc4 	movi	r3,115
   15d38:	10c00005 	stb	r3,0(r2)
        return;
   15d3c:	00000e06 	br	15d78 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   15d40:	e0bffd17 	ldw	r2,-12(fp)
   15d44:	10800284 	addi	r2,r2,10
   15d48:	e17ffe17 	ldw	r5,-8(fp)
   15d4c:	1009883a 	mov	r4,r2
   15d50:	0014d900 	call	14d90 <OS_StrCopy>
   15d54:	e0bff717 	ldw	r2,-36(fp)
   15d58:	e0bffb15 	stw	r2,-20(fp)
   15d5c:	e0bffb17 	ldw	r2,-20(fp)
   15d60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   15d64:	e0bfff17 	ldw	r2,-4(fp)
   15d68:	10000005 	stb	zero,0(r2)
    return;
   15d6c:	0001883a 	nop
   15d70:	00000106 	br	15d78 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   15d74:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
   15d78:	e037883a 	mov	sp,fp
   15d7c:	dfc00117 	ldw	ra,4(sp)
   15d80:	df000017 	ldw	fp,0(sp)
   15d84:	dec00204 	addi	sp,sp,8
   15d88:	f800283a 	ret

00015d8c <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   15d8c:	deffe104 	addi	sp,sp,-124
   15d90:	dfc01e15 	stw	ra,120(sp)
   15d94:	df001d15 	stw	fp,116(sp)
   15d98:	df001d04 	addi	fp,sp,116
   15d9c:	e13ffc15 	stw	r4,-16(fp)
   15da0:	2809883a 	mov	r4,r5
   15da4:	3007883a 	mov	r3,r6
   15da8:	3805883a 	mov	r2,r7
   15dac:	e13ffd0d 	sth	r4,-12(fp)
   15db0:	e0fffe05 	stb	r3,-8(fp)
   15db4:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   15db8:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   15dbc:	e0800217 	ldw	r2,8(fp)
   15dc0:	1000021e 	bne	r2,zero,15dcc <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   15dc4:	0005883a 	mov	r2,zero
   15dc8:	00015906 	br	16330 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   15dcc:	e0bffc17 	ldw	r2,-16(fp)
   15dd0:	1000051e 	bne	r2,zero,15de8 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   15dd4:	e0800217 	ldw	r2,8(fp)
   15dd8:	00c01b84 	movi	r3,110
   15ddc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15de0:	0005883a 	mov	r2,zero
   15de4:	00015206 	br	16330 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   15de8:	d0a82703 	ldbu	r2,-24420(gp)
   15dec:	10803fcc 	andi	r2,r2,255
   15df0:	10000526 	beq	r2,zero,15e08 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   15df4:	e0800217 	ldw	r2,8(fp)
   15df8:	00c00084 	movi	r3,2
   15dfc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15e00:	0005883a 	mov	r2,zero
   15e04:	00014a06 	br	16330 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   15e08:	d0a81903 	ldbu	r2,-24476(gp)
   15e0c:	10803fcc 	andi	r2,r2,255
   15e10:	10000526 	beq	r2,zero,15e28 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   15e14:	e0800217 	ldw	r2,8(fp)
   15e18:	00c00344 	movi	r3,13
   15e1c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15e20:	0005883a 	mov	r2,zero
   15e24:	00014206 	br	16330 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   15e28:	e0bffc17 	ldw	r2,-16(fp)
   15e2c:	10800003 	ldbu	r2,0(r2)
   15e30:	10803fcc 	andi	r2,r2,255
   15e34:	10800160 	cmpeqi	r2,r2,5
   15e38:	1000051e 	bne	r2,zero,15e50 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
   15e3c:	e0800217 	ldw	r2,8(fp)
   15e40:	00c00044 	movi	r3,1
   15e44:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15e48:	0005883a 	mov	r2,zero
   15e4c:	00013806 	br	16330 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   15e50:	e0fffe03 	ldbu	r3,-8(fp)
   15e54:	00bfe004 	movi	r2,-128
   15e58:	1884703a 	and	r2,r3,r2
   15e5c:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   15e60:	e0bfe603 	ldbu	r2,-104(fp)
   15e64:	10000626 	beq	r2,zero,15e80 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   15e68:	e0bffe03 	ldbu	r2,-8(fp)
   15e6c:	10801fcc 	andi	r2,r2,127
   15e70:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   15e74:	00800044 	movi	r2,1
   15e78:	e0bfe405 	stb	r2,-112(fp)
   15e7c:	00000106 	br	15e84 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
   15e80:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15e84:	0005303a 	rdctl	r2,status
   15e88:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15e8c:	e0fff617 	ldw	r3,-40(fp)
   15e90:	00bfff84 	movi	r2,-2
   15e94:	1884703a 	and	r2,r3,r2
   15e98:	1001703a 	wrctl	status,r2
  
  return context;
   15e9c:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   15ea0:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
   15ea4:	e0bffe03 	ldbu	r2,-8(fp)
   15ea8:	10c00060 	cmpeqi	r3,r2,1
   15eac:	1800921e 	bne	r3,zero,160f8 <OSFlagPend+0x36c>
   15eb0:	10c00088 	cmpgei	r3,r2,2
   15eb4:	1800021e 	bne	r3,zero,15ec0 <OSFlagPend+0x134>
   15eb8:	10006126 	beq	r2,zero,16040 <OSFlagPend+0x2b4>
   15ebc:	0000bb06 	br	161ac <OSFlagPend+0x420>
   15ec0:	10c000a0 	cmpeqi	r3,r2,2
   15ec4:	1800031e 	bne	r3,zero,15ed4 <OSFlagPend+0x148>
   15ec8:	108000e0 	cmpeqi	r2,r2,3
   15ecc:	10002f1e 	bne	r2,zero,15f8c <OSFlagPend+0x200>
   15ed0:	0000b606 	br	161ac <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   15ed4:	e0bffc17 	ldw	r2,-16(fp)
   15ed8:	10c0020b 	ldhu	r3,8(r2)
   15edc:	e0bffd0b 	ldhu	r2,-12(fp)
   15ee0:	1884703a 	and	r2,r3,r2
   15ee4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   15ee8:	e0ffe80b 	ldhu	r3,-96(fp)
   15eec:	e0bffd0b 	ldhu	r2,-12(fp)
   15ef0:	1880171e 	bne	r3,r2,15f50 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15ef4:	e0bfe403 	ldbu	r2,-112(fp)
   15ef8:	10800058 	cmpnei	r2,r2,1
   15efc:	1000091e 	bne	r2,zero,15f24 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   15f00:	e0bffc17 	ldw	r2,-16(fp)
   15f04:	1080020b 	ldhu	r2,8(r2)
   15f08:	1007883a 	mov	r3,r2
   15f0c:	e0bfe80b 	ldhu	r2,-96(fp)
   15f10:	0084303a 	nor	r2,zero,r2
   15f14:	1884703a 	and	r2,r3,r2
   15f18:	1007883a 	mov	r3,r2
   15f1c:	e0bffc17 	ldw	r2,-16(fp)
   15f20:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   15f24:	d0a82817 	ldw	r2,-24416(gp)
   15f28:	e0ffe80b 	ldhu	r3,-96(fp)
   15f2c:	10c00b0d 	sth	r3,44(r2)
   15f30:	e0bfe517 	ldw	r2,-108(fp)
   15f34:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15f38:	e0bfe717 	ldw	r2,-100(fp)
   15f3c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   15f40:	e0800217 	ldw	r2,8(fp)
   15f44:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   15f48:	e0bfe80b 	ldhu	r2,-96(fp)
   15f4c:	0000f806 	br	16330 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   15f50:	e13ffd0b 	ldhu	r4,-12(fp)
   15f54:	e17ffe03 	ldbu	r5,-8(fp)
   15f58:	e0bfff0b 	ldhu	r2,-4(fp)
   15f5c:	e0fff704 	addi	r3,fp,-36
   15f60:	d8800015 	stw	r2,0(sp)
   15f64:	280f883a 	mov	r7,r5
   15f68:	200d883a 	mov	r6,r4
   15f6c:	180b883a 	mov	r5,r3
   15f70:	e13ffc17 	ldw	r4,-16(fp)
   15f74:	00167fc0 	call	167fc <OS_FlagBlock>
   15f78:	e0bfe517 	ldw	r2,-108(fp)
   15f7c:	e0bfe915 	stw	r2,-92(fp)
   15f80:	e0bfe917 	ldw	r2,-92(fp)
   15f84:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   15f88:	00009206 	br	161d4 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   15f8c:	e0bffc17 	ldw	r2,-16(fp)
   15f90:	10c0020b 	ldhu	r3,8(r2)
   15f94:	e0bffd0b 	ldhu	r2,-12(fp)
   15f98:	1884703a 	and	r2,r3,r2
   15f9c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   15fa0:	e0bfe80b 	ldhu	r2,-96(fp)
   15fa4:	10001726 	beq	r2,zero,16004 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15fa8:	e0bfe403 	ldbu	r2,-112(fp)
   15fac:	10800058 	cmpnei	r2,r2,1
   15fb0:	1000091e 	bne	r2,zero,15fd8 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   15fb4:	e0bffc17 	ldw	r2,-16(fp)
   15fb8:	1080020b 	ldhu	r2,8(r2)
   15fbc:	1007883a 	mov	r3,r2
   15fc0:	e0bfe80b 	ldhu	r2,-96(fp)
   15fc4:	0084303a 	nor	r2,zero,r2
   15fc8:	1884703a 	and	r2,r3,r2
   15fcc:	1007883a 	mov	r3,r2
   15fd0:	e0bffc17 	ldw	r2,-16(fp)
   15fd4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   15fd8:	d0a82817 	ldw	r2,-24416(gp)
   15fdc:	e0ffe80b 	ldhu	r3,-96(fp)
   15fe0:	10c00b0d 	sth	r3,44(r2)
   15fe4:	e0bfe517 	ldw	r2,-108(fp)
   15fe8:	e0bfea15 	stw	r2,-88(fp)
   15fec:	e0bfea17 	ldw	r2,-88(fp)
   15ff0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   15ff4:	e0800217 	ldw	r2,8(fp)
   15ff8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   15ffc:	e0bfe80b 	ldhu	r2,-96(fp)
   16000:	0000cb06 	br	16330 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   16004:	e13ffd0b 	ldhu	r4,-12(fp)
   16008:	e17ffe03 	ldbu	r5,-8(fp)
   1600c:	e0bfff0b 	ldhu	r2,-4(fp)
   16010:	e0fff704 	addi	r3,fp,-36
   16014:	d8800015 	stw	r2,0(sp)
   16018:	280f883a 	mov	r7,r5
   1601c:	200d883a 	mov	r6,r4
   16020:	180b883a 	mov	r5,r3
   16024:	e13ffc17 	ldw	r4,-16(fp)
   16028:	00167fc0 	call	167fc <OS_FlagBlock>
   1602c:	e0bfe517 	ldw	r2,-108(fp)
   16030:	e0bfeb15 	stw	r2,-84(fp)
   16034:	e0bfeb17 	ldw	r2,-84(fp)
   16038:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1603c:	00006506 	br	161d4 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   16040:	e0bffc17 	ldw	r2,-16(fp)
   16044:	1080020b 	ldhu	r2,8(r2)
   16048:	0084303a 	nor	r2,zero,r2
   1604c:	1007883a 	mov	r3,r2
   16050:	e0bffd0b 	ldhu	r2,-12(fp)
   16054:	1884703a 	and	r2,r3,r2
   16058:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1605c:	e0ffe80b 	ldhu	r3,-96(fp)
   16060:	e0bffd0b 	ldhu	r2,-12(fp)
   16064:	1880151e 	bne	r3,r2,160bc <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   16068:	e0bfe403 	ldbu	r2,-112(fp)
   1606c:	10800058 	cmpnei	r2,r2,1
   16070:	1000071e 	bne	r2,zero,16090 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   16074:	e0bffc17 	ldw	r2,-16(fp)
   16078:	10c0020b 	ldhu	r3,8(r2)
   1607c:	e0bfe80b 	ldhu	r2,-96(fp)
   16080:	1884b03a 	or	r2,r3,r2
   16084:	1007883a 	mov	r3,r2
   16088:	e0bffc17 	ldw	r2,-16(fp)
   1608c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   16090:	d0a82817 	ldw	r2,-24416(gp)
   16094:	e0ffe80b 	ldhu	r3,-96(fp)
   16098:	10c00b0d 	sth	r3,44(r2)
   1609c:	e0bfe517 	ldw	r2,-108(fp)
   160a0:	e0bfec15 	stw	r2,-80(fp)
   160a4:	e0bfec17 	ldw	r2,-80(fp)
   160a8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   160ac:	e0800217 	ldw	r2,8(fp)
   160b0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   160b4:	e0bfe80b 	ldhu	r2,-96(fp)
   160b8:	00009d06 	br	16330 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   160bc:	e13ffd0b 	ldhu	r4,-12(fp)
   160c0:	e17ffe03 	ldbu	r5,-8(fp)
   160c4:	e0bfff0b 	ldhu	r2,-4(fp)
   160c8:	e0fff704 	addi	r3,fp,-36
   160cc:	d8800015 	stw	r2,0(sp)
   160d0:	280f883a 	mov	r7,r5
   160d4:	200d883a 	mov	r6,r4
   160d8:	180b883a 	mov	r5,r3
   160dc:	e13ffc17 	ldw	r4,-16(fp)
   160e0:	00167fc0 	call	167fc <OS_FlagBlock>
   160e4:	e0bfe517 	ldw	r2,-108(fp)
   160e8:	e0bfed15 	stw	r2,-76(fp)
   160ec:	e0bfed17 	ldw	r2,-76(fp)
   160f0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   160f4:	00003706 	br	161d4 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   160f8:	e0bffc17 	ldw	r2,-16(fp)
   160fc:	1080020b 	ldhu	r2,8(r2)
   16100:	0084303a 	nor	r2,zero,r2
   16104:	1007883a 	mov	r3,r2
   16108:	e0bffd0b 	ldhu	r2,-12(fp)
   1610c:	1884703a 	and	r2,r3,r2
   16110:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   16114:	e0bfe80b 	ldhu	r2,-96(fp)
   16118:	10001526 	beq	r2,zero,16170 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1611c:	e0bfe403 	ldbu	r2,-112(fp)
   16120:	10800058 	cmpnei	r2,r2,1
   16124:	1000071e 	bne	r2,zero,16144 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   16128:	e0bffc17 	ldw	r2,-16(fp)
   1612c:	10c0020b 	ldhu	r3,8(r2)
   16130:	e0bfe80b 	ldhu	r2,-96(fp)
   16134:	1884b03a 	or	r2,r3,r2
   16138:	1007883a 	mov	r3,r2
   1613c:	e0bffc17 	ldw	r2,-16(fp)
   16140:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   16144:	d0a82817 	ldw	r2,-24416(gp)
   16148:	e0ffe80b 	ldhu	r3,-96(fp)
   1614c:	10c00b0d 	sth	r3,44(r2)
   16150:	e0bfe517 	ldw	r2,-108(fp)
   16154:	e0bfee15 	stw	r2,-72(fp)
   16158:	e0bfee17 	ldw	r2,-72(fp)
   1615c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   16160:	e0800217 	ldw	r2,8(fp)
   16164:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   16168:	e0bfe80b 	ldhu	r2,-96(fp)
   1616c:	00007006 	br	16330 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   16170:	e13ffd0b 	ldhu	r4,-12(fp)
   16174:	e17ffe03 	ldbu	r5,-8(fp)
   16178:	e0bfff0b 	ldhu	r2,-4(fp)
   1617c:	e0fff704 	addi	r3,fp,-36
   16180:	d8800015 	stw	r2,0(sp)
   16184:	280f883a 	mov	r7,r5
   16188:	200d883a 	mov	r6,r4
   1618c:	180b883a 	mov	r5,r3
   16190:	e13ffc17 	ldw	r4,-16(fp)
   16194:	00167fc0 	call	167fc <OS_FlagBlock>
   16198:	e0bfe517 	ldw	r2,-108(fp)
   1619c:	e0bfef15 	stw	r2,-68(fp)
   161a0:	e0bfef17 	ldw	r2,-68(fp)
   161a4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   161a8:	00000a06 	br	161d4 <OSFlagPend+0x448>
   161ac:	e0bfe517 	ldw	r2,-108(fp)
   161b0:	e0bff015 	stw	r2,-64(fp)
   161b4:	e0bff017 	ldw	r2,-64(fp)
   161b8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   161bc:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   161c0:	e0800217 	ldw	r2,8(fp)
   161c4:	00c01bc4 	movi	r3,111
   161c8:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   161cc:	e0bfe80b 	ldhu	r2,-96(fp)
   161d0:	00005706 	br	16330 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   161d4:	0014c4c0 	call	14c4c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   161d8:	0005303a 	rdctl	r2,status
   161dc:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   161e0:	e0fff117 	ldw	r3,-60(fp)
   161e4:	00bfff84 	movi	r2,-2
   161e8:	1884703a 	and	r2,r3,r2
   161ec:	1001703a 	wrctl	status,r2
  
  return context;
   161f0:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
   161f4:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   161f8:	d0a82817 	ldw	r2,-24416(gp)
   161fc:	10800c43 	ldbu	r2,49(r2)
   16200:	10803fcc 	andi	r2,r2,255
   16204:	10001c26 	beq	r2,zero,16278 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   16208:	d0a82817 	ldw	r2,-24416(gp)
   1620c:	10800c43 	ldbu	r2,49(r2)
   16210:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   16214:	d0a82817 	ldw	r2,-24416(gp)
   16218:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   1621c:	e0bff704 	addi	r2,fp,-36
   16220:	1009883a 	mov	r4,r2
   16224:	0016b300 	call	16b30 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   16228:	d0a82817 	ldw	r2,-24416(gp)
   1622c:	10000c05 	stb	zero,48(r2)
   16230:	e0bfe517 	ldw	r2,-108(fp)
   16234:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16238:	e0bff217 	ldw	r2,-56(fp)
   1623c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   16240:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
   16244:	e0bff303 	ldbu	r2,-52(fp)
   16248:	108000a0 	cmpeqi	r2,r2,2
   1624c:	10000426 	beq	r2,zero,16260 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   16250:	e0800217 	ldw	r2,8(fp)
   16254:	00c00384 	movi	r3,14
   16258:	10c00005 	stb	r3,0(r2)
                 break;
   1625c:	00000406 	br	16270 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   16260:	e0800217 	ldw	r2,8(fp)
   16264:	00c00284 	movi	r3,10
   16268:	10c00005 	stb	r3,0(r2)
                 break;
   1626c:	0001883a 	nop
        }
        return (flags_rdy);
   16270:	e0bfe80b 	ldhu	r2,-96(fp)
   16274:	00002e06 	br	16330 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   16278:	d0a82817 	ldw	r2,-24416(gp)
   1627c:	10800b0b 	ldhu	r2,44(r2)
   16280:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   16284:	e0bfe403 	ldbu	r2,-112(fp)
   16288:	10800058 	cmpnei	r2,r2,1
   1628c:	1000211e 	bne	r2,zero,16314 <OSFlagPend+0x588>
        switch (wait_type) {
   16290:	e0bffe03 	ldbu	r2,-8(fp)
   16294:	10001616 	blt	r2,zero,162f0 <OSFlagPend+0x564>
   16298:	10c00090 	cmplti	r3,r2,2
   1629c:	18000c1e 	bne	r3,zero,162d0 <OSFlagPend+0x544>
   162a0:	10800108 	cmpgei	r2,r2,4
   162a4:	1000121e 	bne	r2,zero,162f0 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   162a8:	e0bffc17 	ldw	r2,-16(fp)
   162ac:	1080020b 	ldhu	r2,8(r2)
   162b0:	1007883a 	mov	r3,r2
   162b4:	e0bfe80b 	ldhu	r2,-96(fp)
   162b8:	0084303a 	nor	r2,zero,r2
   162bc:	1884703a 	and	r2,r3,r2
   162c0:	1007883a 	mov	r3,r2
   162c4:	e0bffc17 	ldw	r2,-16(fp)
   162c8:	10c0020d 	sth	r3,8(r2)
                 break;
   162cc:	00001106 	br	16314 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   162d0:	e0bffc17 	ldw	r2,-16(fp)
   162d4:	10c0020b 	ldhu	r3,8(r2)
   162d8:	e0bfe80b 	ldhu	r2,-96(fp)
   162dc:	1884b03a 	or	r2,r3,r2
   162e0:	1007883a 	mov	r3,r2
   162e4:	e0bffc17 	ldw	r2,-16(fp)
   162e8:	10c0020d 	sth	r3,8(r2)
                 break;
   162ec:	00000906 	br	16314 <OSFlagPend+0x588>
   162f0:	e0bfe517 	ldw	r2,-108(fp)
   162f4:	e0bff415 	stw	r2,-48(fp)
   162f8:	e0bff417 	ldw	r2,-48(fp)
   162fc:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   16300:	e0800217 	ldw	r2,8(fp)
   16304:	00c01bc4 	movi	r3,111
   16308:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   1630c:	0005883a 	mov	r2,zero
   16310:	00000706 	br	16330 <OSFlagPend+0x5a4>
   16314:	e0bfe517 	ldw	r2,-108(fp)
   16318:	e0bff515 	stw	r2,-44(fp)
   1631c:	e0bff517 	ldw	r2,-44(fp)
   16320:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   16324:	e0800217 	ldw	r2,8(fp)
   16328:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   1632c:	e0bfe80b 	ldhu	r2,-96(fp)
}
   16330:	e037883a 	mov	sp,fp
   16334:	dfc00117 	ldw	ra,4(sp)
   16338:	df000017 	ldw	fp,0(sp)
   1633c:	dec00204 	addi	sp,sp,8
   16340:	f800283a 	ret

00016344 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   16344:	defffb04 	addi	sp,sp,-20
   16348:	df000415 	stw	fp,16(sp)
   1634c:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   16350:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16354:	0005303a 	rdctl	r2,status
   16358:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1635c:	e0fffe17 	ldw	r3,-8(fp)
   16360:	00bfff84 	movi	r2,-2
   16364:	1884703a 	and	r2,r3,r2
   16368:	1001703a 	wrctl	status,r2
  
  return context;
   1636c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   16370:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   16374:	d0a82817 	ldw	r2,-24416(gp)
   16378:	10800b0b 	ldhu	r2,44(r2)
   1637c:	e0bffd0d 	sth	r2,-12(fp)
   16380:	e0bffc17 	ldw	r2,-16(fp)
   16384:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16388:	e0bfff17 	ldw	r2,-4(fp)
   1638c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   16390:	e0bffd0b 	ldhu	r2,-12(fp)
}
   16394:	e037883a 	mov	sp,fp
   16398:	df000017 	ldw	fp,0(sp)
   1639c:	dec00104 	addi	sp,sp,4
   163a0:	f800283a 	ret

000163a4 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   163a4:	deffef04 	addi	sp,sp,-68
   163a8:	dfc01015 	stw	ra,64(sp)
   163ac:	df000f15 	stw	fp,60(sp)
   163b0:	df000f04 	addi	fp,sp,60
   163b4:	e13ffc15 	stw	r4,-16(fp)
   163b8:	2807883a 	mov	r3,r5
   163bc:	3005883a 	mov	r2,r6
   163c0:	e1ffff15 	stw	r7,-4(fp)
   163c4:	e0fffd0d 	sth	r3,-12(fp)
   163c8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   163cc:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   163d0:	e0bfff17 	ldw	r2,-4(fp)
   163d4:	1000021e 	bne	r2,zero,163e0 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   163d8:	0005883a 	mov	r2,zero
   163dc:	0000d106 	br	16724 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   163e0:	e0bffc17 	ldw	r2,-16(fp)
   163e4:	1000051e 	bne	r2,zero,163fc <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   163e8:	e0bfff17 	ldw	r2,-4(fp)
   163ec:	00c01b84 	movi	r3,110
   163f0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   163f4:	0005883a 	mov	r2,zero
   163f8:	0000ca06 	br	16724 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   163fc:	e0bffc17 	ldw	r2,-16(fp)
   16400:	10800003 	ldbu	r2,0(r2)
   16404:	10803fcc 	andi	r2,r2,255
   16408:	10800160 	cmpeqi	r2,r2,5
   1640c:	1000051e 	bne	r2,zero,16424 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   16410:	e0bfff17 	ldw	r2,-4(fp)
   16414:	00c00044 	movi	r3,1
   16418:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1641c:	0005883a 	mov	r2,zero
   16420:	0000c006 	br	16724 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16424:	0005303a 	rdctl	r2,status
   16428:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1642c:	e0fffb17 	ldw	r3,-20(fp)
   16430:	00bfff84 	movi	r2,-2
   16434:	1884703a 	and	r2,r3,r2
   16438:	1001703a 	wrctl	status,r2
  
  return context;
   1643c:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   16440:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   16444:	e0bffe03 	ldbu	r2,-8(fp)
   16448:	10000326 	beq	r2,zero,16458 <OSFlagPost+0xb4>
   1644c:	10800060 	cmpeqi	r2,r2,1
   16450:	10000b1e 	bne	r2,zero,16480 <OSFlagPost+0xdc>
   16454:	00001206 	br	164a0 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   16458:	e0bffc17 	ldw	r2,-16(fp)
   1645c:	1080020b 	ldhu	r2,8(r2)
   16460:	1007883a 	mov	r3,r2
   16464:	e0bffd0b 	ldhu	r2,-12(fp)
   16468:	0084303a 	nor	r2,zero,r2
   1646c:	1884703a 	and	r2,r3,r2
   16470:	1007883a 	mov	r3,r2
   16474:	e0bffc17 	ldw	r2,-16(fp)
   16478:	10c0020d 	sth	r3,8(r2)
             break;
   1647c:	00001106 	br	164c4 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   16480:	e0bffc17 	ldw	r2,-16(fp)
   16484:	10c0020b 	ldhu	r3,8(r2)
   16488:	e0bffd0b 	ldhu	r2,-12(fp)
   1648c:	1884b03a 	or	r2,r3,r2
   16490:	1007883a 	mov	r3,r2
   16494:	e0bffc17 	ldw	r2,-16(fp)
   16498:	10c0020d 	sth	r3,8(r2)
             break;
   1649c:	00000906 	br	164c4 <OSFlagPost+0x120>
   164a0:	e0bff317 	ldw	r2,-52(fp)
   164a4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   164a8:	e0bff417 	ldw	r2,-48(fp)
   164ac:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   164b0:	e0bfff17 	ldw	r2,-4(fp)
   164b4:	00c01c44 	movi	r3,113
   164b8:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   164bc:	0005883a 	mov	r2,zero
   164c0:	00009806 	br	16724 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   164c4:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   164c8:	e0bffc17 	ldw	r2,-16(fp)
   164cc:	10800117 	ldw	r2,4(r2)
   164d0:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   164d4:	00007706 	br	166b4 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
   164d8:	e0bff117 	ldw	r2,-60(fp)
   164dc:	10800483 	ldbu	r2,18(r2)
   164e0:	10803fcc 	andi	r2,r2,255
   164e4:	10c00060 	cmpeqi	r3,r2,1
   164e8:	18004a1e 	bne	r3,zero,16614 <OSFlagPost+0x270>
   164ec:	10c00088 	cmpgei	r3,r2,2
   164f0:	1800021e 	bne	r3,zero,164fc <OSFlagPost+0x158>
   164f4:	10002f26 	beq	r2,zero,165b4 <OSFlagPost+0x210>
   164f8:	00005b06 	br	16668 <OSFlagPost+0x2c4>
   164fc:	10c000a0 	cmpeqi	r3,r2,2
   16500:	1800031e 	bne	r3,zero,16510 <OSFlagPost+0x16c>
   16504:	108000e0 	cmpeqi	r2,r2,3
   16508:	1000171e 	bne	r2,zero,16568 <OSFlagPost+0x1c4>
   1650c:	00005606 	br	16668 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   16510:	e0bffc17 	ldw	r2,-16(fp)
   16514:	10c0020b 	ldhu	r3,8(r2)
   16518:	e0bff117 	ldw	r2,-60(fp)
   1651c:	1080040b 	ldhu	r2,16(r2)
   16520:	1884703a 	and	r2,r3,r2
   16524:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   16528:	e0bff117 	ldw	r2,-60(fp)
   1652c:	1080040b 	ldhu	r2,16(r2)
   16530:	10ffffcc 	andi	r3,r2,65535
   16534:	e0bff60b 	ldhu	r2,-40(fp)
   16538:	1880541e 	bne	r3,r2,1668c <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1653c:	e0bff60b 	ldhu	r2,-40(fp)
   16540:	100b883a 	mov	r5,r2
   16544:	e13ff117 	ldw	r4,-60(fp)
   16548:	0016a3c0 	call	16a3c <OS_FlagTaskRdy>
   1654c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   16550:	e0bff683 	ldbu	r2,-38(fp)
   16554:	10800058 	cmpnei	r2,r2,1
   16558:	10004c1e 	bne	r2,zero,1668c <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1655c:	00800044 	movi	r2,1
   16560:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   16564:	00004906 	br	1668c <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   16568:	e0bffc17 	ldw	r2,-16(fp)
   1656c:	10c0020b 	ldhu	r3,8(r2)
   16570:	e0bff117 	ldw	r2,-60(fp)
   16574:	1080040b 	ldhu	r2,16(r2)
   16578:	1884703a 	and	r2,r3,r2
   1657c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   16580:	e0bff60b 	ldhu	r2,-40(fp)
   16584:	10004326 	beq	r2,zero,16694 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   16588:	e0bff60b 	ldhu	r2,-40(fp)
   1658c:	100b883a 	mov	r5,r2
   16590:	e13ff117 	ldw	r4,-60(fp)
   16594:	0016a3c0 	call	16a3c <OS_FlagTaskRdy>
   16598:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   1659c:	e0bff683 	ldbu	r2,-38(fp)
   165a0:	10800058 	cmpnei	r2,r2,1
   165a4:	10003b1e 	bne	r2,zero,16694 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   165a8:	00800044 	movi	r2,1
   165ac:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   165b0:	00003806 	br	16694 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   165b4:	e0bffc17 	ldw	r2,-16(fp)
   165b8:	1080020b 	ldhu	r2,8(r2)
   165bc:	0084303a 	nor	r2,zero,r2
   165c0:	1007883a 	mov	r3,r2
   165c4:	e0bff117 	ldw	r2,-60(fp)
   165c8:	1080040b 	ldhu	r2,16(r2)
   165cc:	1884703a 	and	r2,r3,r2
   165d0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   165d4:	e0bff117 	ldw	r2,-60(fp)
   165d8:	1080040b 	ldhu	r2,16(r2)
   165dc:	10ffffcc 	andi	r3,r2,65535
   165e0:	e0bff60b 	ldhu	r2,-40(fp)
   165e4:	18802d1e 	bne	r3,r2,1669c <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   165e8:	e0bff60b 	ldhu	r2,-40(fp)
   165ec:	100b883a 	mov	r5,r2
   165f0:	e13ff117 	ldw	r4,-60(fp)
   165f4:	0016a3c0 	call	16a3c <OS_FlagTaskRdy>
   165f8:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   165fc:	e0bff683 	ldbu	r2,-38(fp)
   16600:	10800058 	cmpnei	r2,r2,1
   16604:	1000251e 	bne	r2,zero,1669c <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   16608:	00800044 	movi	r2,1
   1660c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   16610:	00002206 	br	1669c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   16614:	e0bffc17 	ldw	r2,-16(fp)
   16618:	1080020b 	ldhu	r2,8(r2)
   1661c:	0084303a 	nor	r2,zero,r2
   16620:	1007883a 	mov	r3,r2
   16624:	e0bff117 	ldw	r2,-60(fp)
   16628:	1080040b 	ldhu	r2,16(r2)
   1662c:	1884703a 	and	r2,r3,r2
   16630:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   16634:	e0bff60b 	ldhu	r2,-40(fp)
   16638:	10001a26 	beq	r2,zero,166a4 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1663c:	e0bff60b 	ldhu	r2,-40(fp)
   16640:	100b883a 	mov	r5,r2
   16644:	e13ff117 	ldw	r4,-60(fp)
   16648:	0016a3c0 	call	16a3c <OS_FlagTaskRdy>
   1664c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   16650:	e0bff683 	ldbu	r2,-38(fp)
   16654:	10800058 	cmpnei	r2,r2,1
   16658:	1000121e 	bne	r2,zero,166a4 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1665c:	00800044 	movi	r2,1
   16660:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   16664:	00000f06 	br	166a4 <OSFlagPost+0x300>
   16668:	e0bff317 	ldw	r2,-52(fp)
   1666c:	e0bff515 	stw	r2,-44(fp)
   16670:	e0bff517 	ldw	r2,-44(fp)
   16674:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   16678:	e0bfff17 	ldw	r2,-4(fp)
   1667c:	00c01bc4 	movi	r3,111
   16680:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   16684:	0005883a 	mov	r2,zero
   16688:	00002606 	br	16724 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   1668c:	0001883a 	nop
   16690:	00000506 	br	166a8 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   16694:	0001883a 	nop
   16698:	00000306 	br	166a8 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   1669c:	0001883a 	nop
   166a0:	00000106 	br	166a8 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   166a4:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   166a8:	e0bff117 	ldw	r2,-60(fp)
   166ac:	10800017 	ldw	r2,0(r2)
   166b0:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   166b4:	e0bff117 	ldw	r2,-60(fp)
   166b8:	103f871e 	bne	r2,zero,164d8 <OSFlagPost+0x134>
   166bc:	e0bff317 	ldw	r2,-52(fp)
   166c0:	e0bff715 	stw	r2,-36(fp)
   166c4:	e0bff717 	ldw	r2,-36(fp)
   166c8:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   166cc:	e0bff203 	ldbu	r2,-56(fp)
   166d0:	10800058 	cmpnei	r2,r2,1
   166d4:	1000011e 	bne	r2,zero,166dc <OSFlagPost+0x338>
        OS_Sched();
   166d8:	0014c4c0 	call	14c4c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   166dc:	0005303a 	rdctl	r2,status
   166e0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   166e4:	e0fffa17 	ldw	r3,-24(fp)
   166e8:	00bfff84 	movi	r2,-2
   166ec:	1884703a 	and	r2,r3,r2
   166f0:	1001703a 	wrctl	status,r2
  
  return context;
   166f4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   166f8:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   166fc:	e0bffc17 	ldw	r2,-16(fp)
   16700:	1080020b 	ldhu	r2,8(r2)
   16704:	e0bff90d 	sth	r2,-28(fp)
   16708:	e0bff317 	ldw	r2,-52(fp)
   1670c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16710:	e0bff817 	ldw	r2,-32(fp)
   16714:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   16718:	e0bfff17 	ldw	r2,-4(fp)
   1671c:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   16720:	e0bff90b 	ldhu	r2,-28(fp)
}
   16724:	e037883a 	mov	sp,fp
   16728:	dfc00117 	ldw	ra,4(sp)
   1672c:	df000017 	ldw	fp,0(sp)
   16730:	dec00204 	addi	sp,sp,8
   16734:	f800283a 	ret

00016738 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   16738:	defff904 	addi	sp,sp,-28
   1673c:	df000615 	stw	fp,24(sp)
   16740:	df000604 	addi	fp,sp,24
   16744:	e13ffe15 	stw	r4,-8(fp)
   16748:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   1674c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   16750:	e0bfff17 	ldw	r2,-4(fp)
   16754:	1000021e 	bne	r2,zero,16760 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   16758:	0005883a 	mov	r2,zero
   1675c:	00002306 	br	167ec <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   16760:	e0bffe17 	ldw	r2,-8(fp)
   16764:	1000051e 	bne	r2,zero,1677c <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   16768:	e0bfff17 	ldw	r2,-4(fp)
   1676c:	00c01b84 	movi	r3,110
   16770:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16774:	0005883a 	mov	r2,zero
   16778:	00001c06 	br	167ec <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   1677c:	e0bffe17 	ldw	r2,-8(fp)
   16780:	10800003 	ldbu	r2,0(r2)
   16784:	10803fcc 	andi	r2,r2,255
   16788:	10800160 	cmpeqi	r2,r2,5
   1678c:	1000051e 	bne	r2,zero,167a4 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   16790:	e0bfff17 	ldw	r2,-4(fp)
   16794:	00c00044 	movi	r3,1
   16798:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1679c:	0005883a 	mov	r2,zero
   167a0:	00001206 	br	167ec <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   167a4:	0005303a 	rdctl	r2,status
   167a8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   167ac:	e0fffc17 	ldw	r3,-16(fp)
   167b0:	00bfff84 	movi	r2,-2
   167b4:	1884703a 	and	r2,r3,r2
   167b8:	1001703a 	wrctl	status,r2
  
  return context;
   167bc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   167c0:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   167c4:	e0bffe17 	ldw	r2,-8(fp)
   167c8:	1080020b 	ldhu	r2,8(r2)
   167cc:	e0bffb0d 	sth	r2,-20(fp)
   167d0:	e0bffa17 	ldw	r2,-24(fp)
   167d4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   167d8:	e0bffd17 	ldw	r2,-12(fp)
   167dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   167e0:	e0bfff17 	ldw	r2,-4(fp)
   167e4:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   167e8:	e0bffb0b 	ldhu	r2,-20(fp)
}
   167ec:	e037883a 	mov	sp,fp
   167f0:	df000017 	ldw	fp,0(sp)
   167f4:	dec00104 	addi	sp,sp,4
   167f8:	f800283a 	ret

000167fc <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   167fc:	defff804 	addi	sp,sp,-32
   16800:	df000715 	stw	fp,28(sp)
   16804:	df000704 	addi	fp,sp,28
   16808:	e13ffb15 	stw	r4,-20(fp)
   1680c:	e17ffc15 	stw	r5,-16(fp)
   16810:	3009883a 	mov	r4,r6
   16814:	3807883a 	mov	r3,r7
   16818:	e0800117 	ldw	r2,4(fp)
   1681c:	e13ffd0d 	sth	r4,-12(fp)
   16820:	e0fffe05 	stb	r3,-8(fp)
   16824:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   16828:	d0a82817 	ldw	r2,-24416(gp)
   1682c:	d0e82817 	ldw	r3,-24416(gp)
   16830:	18c00c03 	ldbu	r3,48(r3)
   16834:	18c00814 	ori	r3,r3,32
   16838:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   1683c:	d0a82817 	ldw	r2,-24416(gp)
   16840:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   16844:	d0a82817 	ldw	r2,-24416(gp)
   16848:	e0ffff0b 	ldhu	r3,-4(fp)
   1684c:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   16850:	d0a82817 	ldw	r2,-24416(gp)
   16854:	e0fffc17 	ldw	r3,-16(fp)
   16858:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   1685c:	e0bffc17 	ldw	r2,-16(fp)
   16860:	e0fffd0b 	ldhu	r3,-12(fp)
   16864:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   16868:	e0bffc17 	ldw	r2,-16(fp)
   1686c:	e0fffe03 	ldbu	r3,-8(fp)
   16870:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   16874:	d0e82817 	ldw	r3,-24416(gp)
   16878:	e0bffc17 	ldw	r2,-16(fp)
   1687c:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   16880:	e0bffb17 	ldw	r2,-20(fp)
   16884:	10c00117 	ldw	r3,4(r2)
   16888:	e0bffc17 	ldw	r2,-16(fp)
   1688c:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   16890:	e0bffc17 	ldw	r2,-16(fp)
   16894:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   16898:	e0bffc17 	ldw	r2,-16(fp)
   1689c:	e0fffb17 	ldw	r3,-20(fp)
   168a0:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   168a4:	e0bffb17 	ldw	r2,-20(fp)
   168a8:	10800117 	ldw	r2,4(r2)
   168ac:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   168b0:	e0bff917 	ldw	r2,-28(fp)
   168b4:	10000326 	beq	r2,zero,168c4 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   168b8:	e0bff917 	ldw	r2,-28(fp)
   168bc:	e0fffc17 	ldw	r3,-16(fp)
   168c0:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   168c4:	e0bffb17 	ldw	r2,-20(fp)
   168c8:	e0fffc17 	ldw	r3,-16(fp)
   168cc:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   168d0:	d0a82817 	ldw	r2,-24416(gp)
   168d4:	10800d03 	ldbu	r2,52(r2)
   168d8:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   168dc:	e0fffa03 	ldbu	r3,-24(fp)
   168e0:	e13ffa03 	ldbu	r4,-24(fp)
   168e4:	d0a82544 	addi	r2,gp,-24427
   168e8:	2085883a 	add	r2,r4,r2
   168ec:	10800003 	ldbu	r2,0(r2)
   168f0:	1009883a 	mov	r4,r2
   168f4:	d0a82817 	ldw	r2,-24416(gp)
   168f8:	10800d43 	ldbu	r2,53(r2)
   168fc:	0084303a 	nor	r2,zero,r2
   16900:	2084703a 	and	r2,r4,r2
   16904:	1009883a 	mov	r4,r2
   16908:	d0a82544 	addi	r2,gp,-24427
   1690c:	1885883a 	add	r2,r3,r2
   16910:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   16914:	e0fffa03 	ldbu	r3,-24(fp)
   16918:	d0a82544 	addi	r2,gp,-24427
   1691c:	1885883a 	add	r2,r3,r2
   16920:	10800003 	ldbu	r2,0(r2)
   16924:	10803fcc 	andi	r2,r2,255
   16928:	1000071e 	bne	r2,zero,16948 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1692c:	d0a82817 	ldw	r2,-24416(gp)
   16930:	10800d83 	ldbu	r2,54(r2)
   16934:	0084303a 	nor	r2,zero,r2
   16938:	1007883a 	mov	r3,r2
   1693c:	d0a82503 	ldbu	r2,-24428(gp)
   16940:	1884703a 	and	r2,r3,r2
   16944:	d0a82505 	stb	r2,-24428(gp)
    }
}
   16948:	0001883a 	nop
   1694c:	e037883a 	mov	sp,fp
   16950:	df000017 	ldw	fp,0(sp)
   16954:	dec00104 	addi	sp,sp,4
   16958:	f800283a 	ret

0001695c <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   1695c:	defffb04 	addi	sp,sp,-20
   16960:	dfc00415 	stw	ra,16(sp)
   16964:	df000315 	stw	fp,12(sp)
   16968:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   1696c:	0140dc04 	movi	r5,880
   16970:	010000f4 	movhi	r4,3
   16974:	21067f04 	addi	r4,r4,6652
   16978:	0014b900 	call	14b90 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   1697c:	008000f4 	movhi	r2,3
   16980:	10867f04 	addi	r2,r2,6652
   16984:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   16988:	008000f4 	movhi	r2,3
   1698c:	10868a04 	addi	r2,r2,6696
   16990:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   16994:	e03ffd0d 	sth	zero,-12(fp)
   16998:	00001306 	br	169e8 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1699c:	e0bffe17 	ldw	r2,-8(fp)
   169a0:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   169a4:	e0bffe17 	ldw	r2,-8(fp)
   169a8:	e0ffff17 	ldw	r3,-4(fp)
   169ac:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   169b0:	e0bffe17 	ldw	r2,-8(fp)
   169b4:	00c00fc4 	movi	r3,63
   169b8:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   169bc:	e0bffe17 	ldw	r2,-8(fp)
   169c0:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   169c4:	e0bffe17 	ldw	r2,-8(fp)
   169c8:	10800b04 	addi	r2,r2,44
   169cc:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   169d0:	e0bfff17 	ldw	r2,-4(fp)
   169d4:	10800b04 	addi	r2,r2,44
   169d8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   169dc:	e0bffd0b 	ldhu	r2,-12(fp)
   169e0:	10800044 	addi	r2,r2,1
   169e4:	e0bffd0d 	sth	r2,-12(fp)
   169e8:	e0bffd0b 	ldhu	r2,-12(fp)
   169ec:	108004f0 	cmpltui	r2,r2,19
   169f0:	103fea1e 	bne	r2,zero,1699c <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   169f4:	e0bffe17 	ldw	r2,-8(fp)
   169f8:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   169fc:	e0bffe17 	ldw	r2,-8(fp)
   16a00:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   16a04:	e0bffe17 	ldw	r2,-8(fp)
   16a08:	00c00fc4 	movi	r3,63
   16a0c:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   16a10:	e0bffe17 	ldw	r2,-8(fp)
   16a14:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   16a18:	008000f4 	movhi	r2,3
   16a1c:	10867f04 	addi	r2,r2,6652
   16a20:	d0a82a15 	stw	r2,-24408(gp)
#endif
}
   16a24:	0001883a 	nop
   16a28:	e037883a 	mov	sp,fp
   16a2c:	dfc00117 	ldw	ra,4(sp)
   16a30:	df000017 	ldw	fp,0(sp)
   16a34:	dec00204 	addi	sp,sp,8
   16a38:	f800283a 	ret

00016a3c <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   16a3c:	defffa04 	addi	sp,sp,-24
   16a40:	dfc00515 	stw	ra,20(sp)
   16a44:	df000415 	stw	fp,16(sp)
   16a48:	df000404 	addi	fp,sp,16
   16a4c:	e13ffe15 	stw	r4,-8(fp)
   16a50:	2805883a 	mov	r2,r5
   16a54:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   16a58:	e0bffe17 	ldw	r2,-8(fp)
   16a5c:	10800217 	ldw	r2,8(r2)
   16a60:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   16a64:	e0bffd17 	ldw	r2,-12(fp)
   16a68:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   16a6c:	e0bffd17 	ldw	r2,-12(fp)
   16a70:	e0ffff0b 	ldhu	r3,-4(fp)
   16a74:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   16a78:	e0bffd17 	ldw	r2,-12(fp)
   16a7c:	10c00c03 	ldbu	r3,48(r2)
   16a80:	00bff7c4 	movi	r2,-33
   16a84:	1884703a 	and	r2,r3,r2
   16a88:	1007883a 	mov	r3,r2
   16a8c:	e0bffd17 	ldw	r2,-12(fp)
   16a90:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   16a94:	e0bffd17 	ldw	r2,-12(fp)
   16a98:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   16a9c:	e0bffd17 	ldw	r2,-12(fp)
   16aa0:	10800c03 	ldbu	r2,48(r2)
   16aa4:	10803fcc 	andi	r2,r2,255
   16aa8:	1000181e 	bne	r2,zero,16b0c <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   16aac:	e0bffd17 	ldw	r2,-12(fp)
   16ab0:	10c00d83 	ldbu	r3,54(r2)
   16ab4:	d0a82503 	ldbu	r2,-24428(gp)
   16ab8:	1884b03a 	or	r2,r3,r2
   16abc:	d0a82505 	stb	r2,-24428(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   16ac0:	e0bffd17 	ldw	r2,-12(fp)
   16ac4:	10800d03 	ldbu	r2,52(r2)
   16ac8:	10c03fcc 	andi	r3,r2,255
   16acc:	e0bffd17 	ldw	r2,-12(fp)
   16ad0:	10800d03 	ldbu	r2,52(r2)
   16ad4:	11003fcc 	andi	r4,r2,255
   16ad8:	d0a82544 	addi	r2,gp,-24427
   16adc:	2085883a 	add	r2,r4,r2
   16ae0:	11000003 	ldbu	r4,0(r2)
   16ae4:	e0bffd17 	ldw	r2,-12(fp)
   16ae8:	10800d43 	ldbu	r2,53(r2)
   16aec:	2084b03a 	or	r2,r4,r2
   16af0:	1009883a 	mov	r4,r2
   16af4:	d0a82544 	addi	r2,gp,-24427
   16af8:	1885883a 	add	r2,r3,r2
   16afc:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   16b00:	00800044 	movi	r2,1
   16b04:	e0bffc05 	stb	r2,-16(fp)
   16b08:	00000106 	br	16b10 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
   16b0c:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   16b10:	e13ffe17 	ldw	r4,-8(fp)
   16b14:	0016b300 	call	16b30 <OS_FlagUnlink>
    return (sched);
   16b18:	e0bffc03 	ldbu	r2,-16(fp)
}
   16b1c:	e037883a 	mov	sp,fp
   16b20:	dfc00117 	ldw	ra,4(sp)
   16b24:	df000017 	ldw	fp,0(sp)
   16b28:	dec00204 	addi	sp,sp,8
   16b2c:	f800283a 	ret

00016b30 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   16b30:	defffa04 	addi	sp,sp,-24
   16b34:	df000515 	stw	fp,20(sp)
   16b38:	df000504 	addi	fp,sp,20
   16b3c:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   16b40:	e0bfff17 	ldw	r2,-4(fp)
   16b44:	10800117 	ldw	r2,4(r2)
   16b48:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   16b4c:	e0bfff17 	ldw	r2,-4(fp)
   16b50:	10800017 	ldw	r2,0(r2)
   16b54:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   16b58:	e0bffb17 	ldw	r2,-20(fp)
   16b5c:	10000b1e 	bne	r2,zero,16b8c <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   16b60:	e0bfff17 	ldw	r2,-4(fp)
   16b64:	10800317 	ldw	r2,12(r2)
   16b68:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   16b6c:	e0bffd17 	ldw	r2,-12(fp)
   16b70:	e0fffc17 	ldw	r3,-16(fp)
   16b74:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   16b78:	e0bffc17 	ldw	r2,-16(fp)
   16b7c:	10000b26 	beq	r2,zero,16bac <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   16b80:	e0bffc17 	ldw	r2,-16(fp)
   16b84:	10000115 	stw	zero,4(r2)
   16b88:	00000806 	br	16bac <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   16b8c:	e0bffb17 	ldw	r2,-20(fp)
   16b90:	e0fffc17 	ldw	r3,-16(fp)
   16b94:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   16b98:	e0bffc17 	ldw	r2,-16(fp)
   16b9c:	10000326 	beq	r2,zero,16bac <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   16ba0:	e0bffc17 	ldw	r2,-16(fp)
   16ba4:	e0fffb17 	ldw	r3,-20(fp)
   16ba8:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   16bac:	e0bfff17 	ldw	r2,-4(fp)
   16bb0:	10800217 	ldw	r2,8(r2)
   16bb4:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   16bb8:	e0bffe17 	ldw	r2,-8(fp)
   16bbc:	10000a15 	stw	zero,40(r2)
#endif
}
   16bc0:	0001883a 	nop
   16bc4:	e037883a 	mov	sp,fp
   16bc8:	df000017 	ldw	fp,0(sp)
   16bcc:	dec00104 	addi	sp,sp,4
   16bd0:	f800283a 	ret

00016bd4 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   16bd4:	defff404 	addi	sp,sp,-48
   16bd8:	df000b15 	stw	fp,44(sp)
   16bdc:	df000b04 	addi	fp,sp,44
   16be0:	e13ffc15 	stw	r4,-16(fp)
   16be4:	e17ffd15 	stw	r5,-12(fp)
   16be8:	e1bffe15 	stw	r6,-8(fp)
   16bec:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   16bf0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   16bf4:	e0bfff17 	ldw	r2,-4(fp)
   16bf8:	1000021e 	bne	r2,zero,16c04 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   16bfc:	0005883a 	mov	r2,zero
   16c00:	00006506 	br	16d98 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   16c04:	e0bffc17 	ldw	r2,-16(fp)
   16c08:	1000051e 	bne	r2,zero,16c20 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   16c0c:	e0bfff17 	ldw	r2,-4(fp)
   16c10:	00c01884 	movi	r3,98
   16c14:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   16c18:	0005883a 	mov	r2,zero
   16c1c:	00005e06 	br	16d98 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   16c20:	e0bffc17 	ldw	r2,-16(fp)
   16c24:	108000cc 	andi	r2,r2,3
   16c28:	10000526 	beq	r2,zero,16c40 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   16c2c:	e0bfff17 	ldw	r2,-4(fp)
   16c30:	00c01884 	movi	r3,98
   16c34:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   16c38:	0005883a 	mov	r2,zero
   16c3c:	00005606 	br	16d98 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   16c40:	e0bffd17 	ldw	r2,-12(fp)
   16c44:	108000a8 	cmpgeui	r2,r2,2
   16c48:	1000051e 	bne	r2,zero,16c60 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   16c4c:	e0bfff17 	ldw	r2,-4(fp)
   16c50:	00c016c4 	movi	r3,91
   16c54:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   16c58:	0005883a 	mov	r2,zero
   16c5c:	00004e06 	br	16d98 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   16c60:	e0bffe17 	ldw	r2,-8(fp)
   16c64:	10800128 	cmpgeui	r2,r2,4
   16c68:	1000051e 	bne	r2,zero,16c80 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   16c6c:	e0bfff17 	ldw	r2,-4(fp)
   16c70:	00c01704 	movi	r3,92
   16c74:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   16c78:	0005883a 	mov	r2,zero
   16c7c:	00004606 	br	16d98 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16c80:	0005303a 	rdctl	r2,status
   16c84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16c88:	e0fffb17 	ldw	r3,-20(fp)
   16c8c:	00bfff84 	movi	r2,-2
   16c90:	1884703a 	and	r2,r3,r2
   16c94:	1001703a 	wrctl	status,r2
  
  return context;
   16c98:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   16c9c:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   16ca0:	d0a82217 	ldw	r2,-24440(gp)
   16ca4:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   16ca8:	d0a82217 	ldw	r2,-24440(gp)
   16cac:	10000326 	beq	r2,zero,16cbc <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   16cb0:	d0a82217 	ldw	r2,-24440(gp)
   16cb4:	10800117 	ldw	r2,4(r2)
   16cb8:	d0a82215 	stw	r2,-24440(gp)
   16cbc:	e0bff817 	ldw	r2,-32(fp)
   16cc0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16cc4:	e0bff917 	ldw	r2,-28(fp)
   16cc8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   16ccc:	e0bffa17 	ldw	r2,-24(fp)
   16cd0:	1000051e 	bne	r2,zero,16ce8 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
   16cd4:	e0bfff17 	ldw	r2,-4(fp)
   16cd8:	00c01684 	movi	r3,90
   16cdc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   16ce0:	0005883a 	mov	r2,zero
   16ce4:	00002c06 	br	16d98 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   16ce8:	e0bffc17 	ldw	r2,-16(fp)
   16cec:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   16cf0:	e0fffc17 	ldw	r3,-16(fp)
   16cf4:	e0bffe17 	ldw	r2,-8(fp)
   16cf8:	1885883a 	add	r2,r3,r2
   16cfc:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   16d00:	e03ff715 	stw	zero,-36(fp)
   16d04:	00000c06 	br	16d38 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   16d08:	e0bff617 	ldw	r2,-40(fp)
   16d0c:	e0fff517 	ldw	r3,-44(fp)
   16d10:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   16d14:	e0bff517 	ldw	r2,-44(fp)
   16d18:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   16d1c:	e0fff517 	ldw	r3,-44(fp)
   16d20:	e0bffe17 	ldw	r2,-8(fp)
   16d24:	1885883a 	add	r2,r3,r2
   16d28:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   16d2c:	e0bff717 	ldw	r2,-36(fp)
   16d30:	10800044 	addi	r2,r2,1
   16d34:	e0bff715 	stw	r2,-36(fp)
   16d38:	e0bffd17 	ldw	r2,-12(fp)
   16d3c:	10bfffc4 	addi	r2,r2,-1
   16d40:	e0fff717 	ldw	r3,-36(fp)
   16d44:	18bff036 	bltu	r3,r2,16d08 <OSMemCreate+0x134>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   16d48:	e0bff617 	ldw	r2,-40(fp)
   16d4c:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   16d50:	e0bffa17 	ldw	r2,-24(fp)
   16d54:	e0fffc17 	ldw	r3,-16(fp)
   16d58:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   16d5c:	e0bffa17 	ldw	r2,-24(fp)
   16d60:	e0fffc17 	ldw	r3,-16(fp)
   16d64:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   16d68:	e0bffa17 	ldw	r2,-24(fp)
   16d6c:	e0fffd17 	ldw	r3,-12(fp)
   16d70:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   16d74:	e0bffa17 	ldw	r2,-24(fp)
   16d78:	e0fffd17 	ldw	r3,-12(fp)
   16d7c:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   16d80:	e0bffa17 	ldw	r2,-24(fp)
   16d84:	e0fffe17 	ldw	r3,-8(fp)
   16d88:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   16d8c:	e0bfff17 	ldw	r2,-4(fp)
   16d90:	10000005 	stb	zero,0(r2)
    return (pmem);
   16d94:	e0bffa17 	ldw	r2,-24(fp)
}
   16d98:	e037883a 	mov	sp,fp
   16d9c:	df000017 	ldw	fp,0(sp)
   16da0:	dec00104 	addi	sp,sp,4
   16da4:	f800283a 	ret

00016da8 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   16da8:	defff804 	addi	sp,sp,-32
   16dac:	df000715 	stw	fp,28(sp)
   16db0:	df000704 	addi	fp,sp,28
   16db4:	e13ffe15 	stw	r4,-8(fp)
   16db8:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   16dbc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   16dc0:	e0bfff17 	ldw	r2,-4(fp)
   16dc4:	1000021e 	bne	r2,zero,16dd0 <OSMemGet+0x28>
        return ((void *)0);
   16dc8:	0005883a 	mov	r2,zero
   16dcc:	00002e06 	br	16e88 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   16dd0:	e0bffe17 	ldw	r2,-8(fp)
   16dd4:	1000051e 	bne	r2,zero,16dec <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   16dd8:	e0bfff17 	ldw	r2,-4(fp)
   16ddc:	00c01804 	movi	r3,96
   16de0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   16de4:	0005883a 	mov	r2,zero
   16de8:	00002706 	br	16e88 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16dec:	0005303a 	rdctl	r2,status
   16df0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16df4:	e0fffd17 	ldw	r3,-12(fp)
   16df8:	00bfff84 	movi	r2,-2
   16dfc:	1884703a 	and	r2,r3,r2
   16e00:	1001703a 	wrctl	status,r2
  
  return context;
   16e04:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   16e08:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   16e0c:	e0bffe17 	ldw	r2,-8(fp)
   16e10:	10800417 	ldw	r2,16(r2)
   16e14:	10001426 	beq	r2,zero,16e68 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   16e18:	e0bffe17 	ldw	r2,-8(fp)
   16e1c:	10800117 	ldw	r2,4(r2)
   16e20:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   16e24:	e0bffb17 	ldw	r2,-20(fp)
   16e28:	10c00017 	ldw	r3,0(r2)
   16e2c:	e0bffe17 	ldw	r2,-8(fp)
   16e30:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   16e34:	e0bffe17 	ldw	r2,-8(fp)
   16e38:	10800417 	ldw	r2,16(r2)
   16e3c:	10ffffc4 	addi	r3,r2,-1
   16e40:	e0bffe17 	ldw	r2,-8(fp)
   16e44:	10c00415 	stw	r3,16(r2)
   16e48:	e0bff917 	ldw	r2,-28(fp)
   16e4c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16e50:	e0bffa17 	ldw	r2,-24(fp)
   16e54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   16e58:	e0bfff17 	ldw	r2,-4(fp)
   16e5c:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   16e60:	e0bffb17 	ldw	r2,-20(fp)
   16e64:	00000806 	br	16e88 <OSMemGet+0xe0>
   16e68:	e0bff917 	ldw	r2,-28(fp)
   16e6c:	e0bffc15 	stw	r2,-16(fp)
   16e70:	e0bffc17 	ldw	r2,-16(fp)
   16e74:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   16e78:	e0bfff17 	ldw	r2,-4(fp)
   16e7c:	00c01744 	movi	r3,93
   16e80:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   16e84:	0005883a 	mov	r2,zero
}
   16e88:	e037883a 	mov	sp,fp
   16e8c:	df000017 	ldw	fp,0(sp)
   16e90:	dec00104 	addi	sp,sp,4
   16e94:	f800283a 	ret

00016e98 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   16e98:	defff704 	addi	sp,sp,-36
   16e9c:	dfc00815 	stw	ra,32(sp)
   16ea0:	df000715 	stw	fp,28(sp)
   16ea4:	df000704 	addi	fp,sp,28
   16ea8:	e13ffd15 	stw	r4,-12(fp)
   16eac:	e17ffe15 	stw	r5,-8(fp)
   16eb0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16eb4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   16eb8:	e0bfff17 	ldw	r2,-4(fp)
   16ebc:	1000021e 	bne	r2,zero,16ec8 <OSMemNameGet+0x30>
        return (0);
   16ec0:	0005883a 	mov	r2,zero
   16ec4:	00002b06 	br	16f74 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   16ec8:	e0bffd17 	ldw	r2,-12(fp)
   16ecc:	1000051e 	bne	r2,zero,16ee4 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   16ed0:	e0bfff17 	ldw	r2,-4(fp)
   16ed4:	00c01804 	movi	r3,96
   16ed8:	10c00005 	stb	r3,0(r2)
        return (0);
   16edc:	0005883a 	mov	r2,zero
   16ee0:	00002406 	br	16f74 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   16ee4:	e0bffe17 	ldw	r2,-8(fp)
   16ee8:	1000051e 	bne	r2,zero,16f00 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   16eec:	e0bfff17 	ldw	r2,-4(fp)
   16ef0:	00c00304 	movi	r3,12
   16ef4:	10c00005 	stb	r3,0(r2)
        return (0);
   16ef8:	0005883a 	mov	r2,zero
   16efc:	00001d06 	br	16f74 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   16f00:	d0a82703 	ldbu	r2,-24420(gp)
   16f04:	10803fcc 	andi	r2,r2,255
   16f08:	10000526 	beq	r2,zero,16f20 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   16f0c:	e0bfff17 	ldw	r2,-4(fp)
   16f10:	00c00444 	movi	r3,17
   16f14:	10c00005 	stb	r3,0(r2)
        return (0);
   16f18:	0005883a 	mov	r2,zero
   16f1c:	00001506 	br	16f74 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16f20:	0005303a 	rdctl	r2,status
   16f24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16f28:	e0fffb17 	ldw	r3,-20(fp)
   16f2c:	00bfff84 	movi	r2,-2
   16f30:	1884703a 	and	r2,r3,r2
   16f34:	1001703a 	wrctl	status,r2
  
  return context;
   16f38:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   16f3c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   16f40:	e0bffd17 	ldw	r2,-12(fp)
   16f44:	10800504 	addi	r2,r2,20
   16f48:	100b883a 	mov	r5,r2
   16f4c:	e13ffe17 	ldw	r4,-8(fp)
   16f50:	0014d900 	call	14d90 <OS_StrCopy>
   16f54:	e0bffa05 	stb	r2,-24(fp)
   16f58:	e0bff917 	ldw	r2,-28(fp)
   16f5c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16f60:	e0bffc17 	ldw	r2,-16(fp)
   16f64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   16f68:	e0bfff17 	ldw	r2,-4(fp)
   16f6c:	10000005 	stb	zero,0(r2)
    return (len);
   16f70:	e0bffa03 	ldbu	r2,-24(fp)
}
   16f74:	e037883a 	mov	sp,fp
   16f78:	dfc00117 	ldw	ra,4(sp)
   16f7c:	df000017 	ldw	fp,0(sp)
   16f80:	dec00204 	addi	sp,sp,8
   16f84:	f800283a 	ret

00016f88 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   16f88:	defff604 	addi	sp,sp,-40
   16f8c:	dfc00915 	stw	ra,36(sp)
   16f90:	df000815 	stw	fp,32(sp)
   16f94:	df000804 	addi	fp,sp,32
   16f98:	e13ffd15 	stw	r4,-12(fp)
   16f9c:	e17ffe15 	stw	r5,-8(fp)
   16fa0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16fa4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   16fa8:	e0bfff17 	ldw	r2,-4(fp)
   16fac:	10003526 	beq	r2,zero,17084 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   16fb0:	e0bffd17 	ldw	r2,-12(fp)
   16fb4:	1000041e 	bne	r2,zero,16fc8 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   16fb8:	e0bfff17 	ldw	r2,-4(fp)
   16fbc:	00c01804 	movi	r3,96
   16fc0:	10c00005 	stb	r3,0(r2)
        return;
   16fc4:	00003006 	br	17088 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   16fc8:	e0bffe17 	ldw	r2,-8(fp)
   16fcc:	1000041e 	bne	r2,zero,16fe0 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   16fd0:	e0bfff17 	ldw	r2,-4(fp)
   16fd4:	00c00304 	movi	r3,12
   16fd8:	10c00005 	stb	r3,0(r2)
        return;
   16fdc:	00002a06 	br	17088 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   16fe0:	d0a82703 	ldbu	r2,-24420(gp)
   16fe4:	10803fcc 	andi	r2,r2,255
   16fe8:	10000426 	beq	r2,zero,16ffc <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   16fec:	e0bfff17 	ldw	r2,-4(fp)
   16ff0:	00c00484 	movi	r3,18
   16ff4:	10c00005 	stb	r3,0(r2)
        return;
   16ff8:	00002306 	br	17088 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16ffc:	0005303a 	rdctl	r2,status
   17000:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17004:	e0fffc17 	ldw	r3,-16(fp)
   17008:	00bfff84 	movi	r2,-2
   1700c:	1884703a 	and	r2,r3,r2
   17010:	1001703a 	wrctl	status,r2
  
  return context;
   17014:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   17018:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   1701c:	e13ffe17 	ldw	r4,-8(fp)
   17020:	0014e040 	call	14e04 <OS_StrLen>
   17024:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   17028:	e0bffa03 	ldbu	r2,-24(fp)
   1702c:	10800830 	cmpltui	r2,r2,32
   17030:	1000081e 	bne	r2,zero,17054 <OSMemNameSet+0xcc>
   17034:	e0bff817 	ldw	r2,-32(fp)
   17038:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1703c:	e0bff917 	ldw	r2,-28(fp)
   17040:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   17044:	e0bfff17 	ldw	r2,-4(fp)
   17048:	00c018c4 	movi	r3,99
   1704c:	10c00005 	stb	r3,0(r2)
        return;
   17050:	00000d06 	br	17088 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   17054:	e0bffd17 	ldw	r2,-12(fp)
   17058:	10800504 	addi	r2,r2,20
   1705c:	e17ffe17 	ldw	r5,-8(fp)
   17060:	1009883a 	mov	r4,r2
   17064:	0014d900 	call	14d90 <OS_StrCopy>
   17068:	e0bff817 	ldw	r2,-32(fp)
   1706c:	e0bffb15 	stw	r2,-20(fp)
   17070:	e0bffb17 	ldw	r2,-20(fp)
   17074:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   17078:	e0bfff17 	ldw	r2,-4(fp)
   1707c:	10000005 	stb	zero,0(r2)
   17080:	00000106 	br	17088 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   17084:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   17088:	e037883a 	mov	sp,fp
   1708c:	dfc00117 	ldw	ra,4(sp)
   17090:	df000017 	ldw	fp,0(sp)
   17094:	dec00204 	addi	sp,sp,8
   17098:	f800283a 	ret

0001709c <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   1709c:	defff904 	addi	sp,sp,-28
   170a0:	df000615 	stw	fp,24(sp)
   170a4:	df000604 	addi	fp,sp,24
   170a8:	e13ffe15 	stw	r4,-8(fp)
   170ac:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   170b0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   170b4:	e0bffe17 	ldw	r2,-8(fp)
   170b8:	1000021e 	bne	r2,zero,170c4 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   170bc:	00801804 	movi	r2,96
   170c0:	00002806 	br	17164 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   170c4:	e0bfff17 	ldw	r2,-4(fp)
   170c8:	1000021e 	bne	r2,zero,170d4 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   170cc:	008017c4 	movi	r2,95
   170d0:	00002406 	br	17164 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   170d4:	0005303a 	rdctl	r2,status
   170d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   170dc:	e0fffd17 	ldw	r3,-12(fp)
   170e0:	00bfff84 	movi	r2,-2
   170e4:	1884703a 	and	r2,r3,r2
   170e8:	1001703a 	wrctl	status,r2
  
  return context;
   170ec:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   170f0:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   170f4:	e0bffe17 	ldw	r2,-8(fp)
   170f8:	10c00417 	ldw	r3,16(r2)
   170fc:	e0bffe17 	ldw	r2,-8(fp)
   17100:	10800317 	ldw	r2,12(r2)
   17104:	18800636 	bltu	r3,r2,17120 <OSMemPut+0x84>
   17108:	e0bffa17 	ldw	r2,-24(fp)
   1710c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17110:	e0bffb17 	ldw	r2,-20(fp)
   17114:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   17118:	00801784 	movi	r2,94
   1711c:	00001106 	br	17164 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   17120:	e0bffe17 	ldw	r2,-8(fp)
   17124:	10c00117 	ldw	r3,4(r2)
   17128:	e0bfff17 	ldw	r2,-4(fp)
   1712c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   17130:	e0bffe17 	ldw	r2,-8(fp)
   17134:	e0ffff17 	ldw	r3,-4(fp)
   17138:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   1713c:	e0bffe17 	ldw	r2,-8(fp)
   17140:	10800417 	ldw	r2,16(r2)
   17144:	10c00044 	addi	r3,r2,1
   17148:	e0bffe17 	ldw	r2,-8(fp)
   1714c:	10c00415 	stw	r3,16(r2)
   17150:	e0bffa17 	ldw	r2,-24(fp)
   17154:	e0bffc15 	stw	r2,-16(fp)
   17158:	e0bffc17 	ldw	r2,-16(fp)
   1715c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   17160:	0005883a 	mov	r2,zero
}
   17164:	e037883a 	mov	sp,fp
   17168:	df000017 	ldw	fp,0(sp)
   1716c:	dec00104 	addi	sp,sp,4
   17170:	f800283a 	ret

00017174 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   17174:	defffa04 	addi	sp,sp,-24
   17178:	df000515 	stw	fp,20(sp)
   1717c:	df000504 	addi	fp,sp,20
   17180:	e13ffe15 	stw	r4,-8(fp)
   17184:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17188:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   1718c:	e0bffe17 	ldw	r2,-8(fp)
   17190:	1000021e 	bne	r2,zero,1719c <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   17194:	00801804 	movi	r2,96
   17198:	00002c06 	br	1724c <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   1719c:	e0bfff17 	ldw	r2,-4(fp)
   171a0:	1000021e 	bne	r2,zero,171ac <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   171a4:	00801844 	movi	r2,97
   171a8:	00002806 	br	1724c <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   171ac:	0005303a 	rdctl	r2,status
   171b0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   171b4:	e0fffc17 	ldw	r3,-16(fp)
   171b8:	00bfff84 	movi	r2,-2
   171bc:	1884703a 	and	r2,r3,r2
   171c0:	1001703a 	wrctl	status,r2
  
  return context;
   171c4:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   171c8:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   171cc:	e0bffe17 	ldw	r2,-8(fp)
   171d0:	10c00017 	ldw	r3,0(r2)
   171d4:	e0bfff17 	ldw	r2,-4(fp)
   171d8:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   171dc:	e0bffe17 	ldw	r2,-8(fp)
   171e0:	10c00117 	ldw	r3,4(r2)
   171e4:	e0bfff17 	ldw	r2,-4(fp)
   171e8:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   171ec:	e0bffe17 	ldw	r2,-8(fp)
   171f0:	10c00217 	ldw	r3,8(r2)
   171f4:	e0bfff17 	ldw	r2,-4(fp)
   171f8:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   171fc:	e0bffe17 	ldw	r2,-8(fp)
   17200:	10c00317 	ldw	r3,12(r2)
   17204:	e0bfff17 	ldw	r2,-4(fp)
   17208:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   1720c:	e0bffe17 	ldw	r2,-8(fp)
   17210:	10c00417 	ldw	r3,16(r2)
   17214:	e0bfff17 	ldw	r2,-4(fp)
   17218:	10c00415 	stw	r3,16(r2)
   1721c:	e0bffb17 	ldw	r2,-20(fp)
   17220:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17224:	e0bffd17 	ldw	r2,-12(fp)
   17228:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   1722c:	e0bfff17 	ldw	r2,-4(fp)
   17230:	10c00317 	ldw	r3,12(r2)
   17234:	e0bfff17 	ldw	r2,-4(fp)
   17238:	10800417 	ldw	r2,16(r2)
   1723c:	1887c83a 	sub	r3,r3,r2
   17240:	e0bfff17 	ldw	r2,-4(fp)
   17244:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   17248:	0005883a 	mov	r2,zero
}
   1724c:	e037883a 	mov	sp,fp
   17250:	df000017 	ldw	fp,0(sp)
   17254:	dec00104 	addi	sp,sp,4
   17258:	f800283a 	ret

0001725c <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   1725c:	defffc04 	addi	sp,sp,-16
   17260:	dfc00315 	stw	ra,12(sp)
   17264:	df000215 	stw	fp,8(sp)
   17268:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   1726c:	01430c04 	movi	r5,3120
   17270:	010000f4 	movhi	r4,3
   17274:	21075b04 	addi	r4,r4,7532
   17278:	0014b900 	call	14b90 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   1727c:	008000f4 	movhi	r2,3
   17280:	10875b04 	addi	r2,r2,7532
   17284:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   17288:	e03fff0d 	sth	zero,-4(fp)
   1728c:	00001306 	br	172dc <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   17290:	e0bfff0b 	ldhu	r2,-4(fp)
   17294:	10800044 	addi	r2,r2,1
   17298:	10c00d24 	muli	r3,r2,52
   1729c:	008000f4 	movhi	r2,3
   172a0:	10875b04 	addi	r2,r2,7532
   172a4:	1887883a 	add	r3,r3,r2
   172a8:	e0bffe17 	ldw	r2,-8(fp)
   172ac:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   172b0:	e0bffe17 	ldw	r2,-8(fp)
   172b4:	00c00fc4 	movi	r3,63
   172b8:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   172bc:	e0bffe17 	ldw	r2,-8(fp)
   172c0:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   172c4:	e0bffe17 	ldw	r2,-8(fp)
   172c8:	10800d04 	addi	r2,r2,52
   172cc:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   172d0:	e0bfff0b 	ldhu	r2,-4(fp)
   172d4:	10800044 	addi	r2,r2,1
   172d8:	e0bfff0d 	sth	r2,-4(fp)
   172dc:	e0bfff0b 	ldhu	r2,-4(fp)
   172e0:	10800ef0 	cmpltui	r2,r2,59
   172e4:	103fea1e 	bne	r2,zero,17290 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   172e8:	e0bffe17 	ldw	r2,-8(fp)
   172ec:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   172f0:	e0bffe17 	ldw	r2,-8(fp)
   172f4:	00c00fc4 	movi	r3,63
   172f8:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   172fc:	e0bffe17 	ldw	r2,-8(fp)
   17300:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   17304:	008000f4 	movhi	r2,3
   17308:	10875b04 	addi	r2,r2,7532
   1730c:	d0a82215 	stw	r2,-24440(gp)
#endif
}
   17310:	0001883a 	nop
   17314:	e037883a 	mov	sp,fp
   17318:	dfc00117 	ldw	ra,4(sp)
   1731c:	df000017 	ldw	fp,0(sp)
   17320:	dec00204 	addi	sp,sp,8
   17324:	f800283a 	ret

00017328 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   17328:	defff804 	addi	sp,sp,-32
   1732c:	df000715 	stw	fp,28(sp)
   17330:	df000704 	addi	fp,sp,28
   17334:	e13ffe15 	stw	r4,-8(fp)
   17338:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1733c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   17340:	e0bfff17 	ldw	r2,-4(fp)
   17344:	1000021e 	bne	r2,zero,17350 <OSQAccept+0x28>
        return ((void *)0);
   17348:	0005883a 	mov	r2,zero
   1734c:	00004206 	br	17458 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   17350:	e0bffe17 	ldw	r2,-8(fp)
   17354:	1000051e 	bne	r2,zero,1736c <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   17358:	e0bfff17 	ldw	r2,-4(fp)
   1735c:	00c00104 	movi	r3,4
   17360:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   17364:	0005883a 	mov	r2,zero
   17368:	00003b06 	br	17458 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   1736c:	e0bffe17 	ldw	r2,-8(fp)
   17370:	10800003 	ldbu	r2,0(r2)
   17374:	10803fcc 	andi	r2,r2,255
   17378:	108000a0 	cmpeqi	r2,r2,2
   1737c:	1000051e 	bne	r2,zero,17394 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   17380:	e0bfff17 	ldw	r2,-4(fp)
   17384:	00c00044 	movi	r3,1
   17388:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1738c:	0005883a 	mov	r2,zero
   17390:	00003106 	br	17458 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17394:	0005303a 	rdctl	r2,status
   17398:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1739c:	e0fffd17 	ldw	r3,-12(fp)
   173a0:	00bfff84 	movi	r2,-2
   173a4:	1884703a 	and	r2,r3,r2
   173a8:	1001703a 	wrctl	status,r2
  
  return context;
   173ac:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   173b0:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   173b4:	e0bffe17 	ldw	r2,-8(fp)
   173b8:	10800117 	ldw	r2,4(r2)
   173bc:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   173c0:	e0bffc17 	ldw	r2,-16(fp)
   173c4:	1080058b 	ldhu	r2,22(r2)
   173c8:	10bfffcc 	andi	r2,r2,65535
   173cc:	10001926 	beq	r2,zero,17434 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   173d0:	e0bffc17 	ldw	r2,-16(fp)
   173d4:	10800417 	ldw	r2,16(r2)
   173d8:	11000104 	addi	r4,r2,4
   173dc:	e0fffc17 	ldw	r3,-16(fp)
   173e0:	19000415 	stw	r4,16(r3)
   173e4:	10800017 	ldw	r2,0(r2)
   173e8:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   173ec:	e0bffc17 	ldw	r2,-16(fp)
   173f0:	1080058b 	ldhu	r2,22(r2)
   173f4:	10bfffc4 	addi	r2,r2,-1
   173f8:	1007883a 	mov	r3,r2
   173fc:	e0bffc17 	ldw	r2,-16(fp)
   17400:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   17404:	e0bffc17 	ldw	r2,-16(fp)
   17408:	10c00417 	ldw	r3,16(r2)
   1740c:	e0bffc17 	ldw	r2,-16(fp)
   17410:	10800217 	ldw	r2,8(r2)
   17414:	1880041e 	bne	r3,r2,17428 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   17418:	e0bffc17 	ldw	r2,-16(fp)
   1741c:	10c00117 	ldw	r3,4(r2)
   17420:	e0bffc17 	ldw	r2,-16(fp)
   17424:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   17428:	e0bfff17 	ldw	r2,-4(fp)
   1742c:	10000005 	stb	zero,0(r2)
   17430:	00000406 	br	17444 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   17434:	e0bfff17 	ldw	r2,-4(fp)
   17438:	00c007c4 	movi	r3,31
   1743c:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   17440:	e03ff915 	stw	zero,-28(fp)
   17444:	e0bffa17 	ldw	r2,-24(fp)
   17448:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1744c:	e0bffb17 	ldw	r2,-20(fp)
   17450:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   17454:	e0bff917 	ldw	r2,-28(fp)
}
   17458:	e037883a 	mov	sp,fp
   1745c:	df000017 	ldw	fp,0(sp)
   17460:	dec00104 	addi	sp,sp,4
   17464:	f800283a 	ret

00017468 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   17468:	defff404 	addi	sp,sp,-48
   1746c:	dfc00b15 	stw	ra,44(sp)
   17470:	df000a15 	stw	fp,40(sp)
   17474:	df000a04 	addi	fp,sp,40
   17478:	e13ffe15 	stw	r4,-8(fp)
   1747c:	2805883a 	mov	r2,r5
   17480:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17484:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   17488:	d0a82703 	ldbu	r2,-24420(gp)
   1748c:	10803fcc 	andi	r2,r2,255
   17490:	10000226 	beq	r2,zero,1749c <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   17494:	0005883a 	mov	r2,zero
   17498:	00005906 	br	17600 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1749c:	0005303a 	rdctl	r2,status
   174a0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   174a4:	e0fffd17 	ldw	r3,-12(fp)
   174a8:	00bfff84 	movi	r2,-2
   174ac:	1884703a 	and	r2,r3,r2
   174b0:	1001703a 	wrctl	status,r2
  
  return context;
   174b4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   174b8:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   174bc:	d0a82617 	ldw	r2,-24424(gp)
   174c0:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   174c4:	d0a82617 	ldw	r2,-24424(gp)
   174c8:	10000326 	beq	r2,zero,174d8 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   174cc:	d0a82617 	ldw	r2,-24424(gp)
   174d0:	10800117 	ldw	r2,4(r2)
   174d4:	d0a82615 	stw	r2,-24424(gp)
   174d8:	e0bff717 	ldw	r2,-36(fp)
   174dc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   174e0:	e0bff817 	ldw	r2,-32(fp)
   174e4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   174e8:	e0bff617 	ldw	r2,-40(fp)
   174ec:	10004326 	beq	r2,zero,175fc <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   174f0:	0005303a 	rdctl	r2,status
   174f4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   174f8:	e0fff917 	ldw	r3,-28(fp)
   174fc:	00bfff84 	movi	r2,-2
   17500:	1884703a 	and	r2,r3,r2
   17504:	1001703a 	wrctl	status,r2
  
  return context;
   17508:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
   1750c:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   17510:	d0a82417 	ldw	r2,-24432(gp)
   17514:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   17518:	e0bffb17 	ldw	r2,-20(fp)
   1751c:	10002d26 	beq	r2,zero,175d4 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   17520:	d0a82417 	ldw	r2,-24432(gp)
   17524:	10800017 	ldw	r2,0(r2)
   17528:	d0a82415 	stw	r2,-24432(gp)
   1752c:	e0bff717 	ldw	r2,-36(fp)
   17530:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17534:	e0bffa17 	ldw	r2,-24(fp)
   17538:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   1753c:	e0bffb17 	ldw	r2,-20(fp)
   17540:	e0fffe17 	ldw	r3,-8(fp)
   17544:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   17548:	e0bfff0b 	ldhu	r2,-4(fp)
   1754c:	1085883a 	add	r2,r2,r2
   17550:	1085883a 	add	r2,r2,r2
   17554:	1007883a 	mov	r3,r2
   17558:	e0bffe17 	ldw	r2,-8(fp)
   1755c:	10c7883a 	add	r3,r2,r3
   17560:	e0bffb17 	ldw	r2,-20(fp)
   17564:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   17568:	e0bffb17 	ldw	r2,-20(fp)
   1756c:	e0fffe17 	ldw	r3,-8(fp)
   17570:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   17574:	e0bffb17 	ldw	r2,-20(fp)
   17578:	e0fffe17 	ldw	r3,-8(fp)
   1757c:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   17580:	e0bffb17 	ldw	r2,-20(fp)
   17584:	e0ffff0b 	ldhu	r3,-4(fp)
   17588:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   1758c:	e0bffb17 	ldw	r2,-20(fp)
   17590:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   17594:	e0bff617 	ldw	r2,-40(fp)
   17598:	00c00084 	movi	r3,2
   1759c:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   175a0:	e0bff617 	ldw	r2,-40(fp)
   175a4:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   175a8:	e0bff617 	ldw	r2,-40(fp)
   175ac:	e0fffb17 	ldw	r3,-20(fp)
   175b0:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   175b4:	e0bff617 	ldw	r2,-40(fp)
   175b8:	00c00fc4 	movi	r3,63
   175bc:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   175c0:	e0bff617 	ldw	r2,-40(fp)
   175c4:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   175c8:	e13ff617 	ldw	r4,-40(fp)
   175cc:	00147b00 	call	147b0 <OS_EventWaitListInit>
   175d0:	00000a06 	br	175fc <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   175d4:	d0e82617 	ldw	r3,-24424(gp)
   175d8:	e0bff617 	ldw	r2,-40(fp)
   175dc:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   175e0:	e0bff617 	ldw	r2,-40(fp)
   175e4:	d0a82615 	stw	r2,-24424(gp)
   175e8:	e0bff717 	ldw	r2,-36(fp)
   175ec:	e0bffc15 	stw	r2,-16(fp)
   175f0:	e0bffc17 	ldw	r2,-16(fp)
   175f4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   175f8:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   175fc:	e0bff617 	ldw	r2,-40(fp)
}
   17600:	e037883a 	mov	sp,fp
   17604:	dfc00117 	ldw	ra,4(sp)
   17608:	df000017 	ldw	fp,0(sp)
   1760c:	dec00204 	addi	sp,sp,8
   17610:	f800283a 	ret

00017614 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   17614:	defff204 	addi	sp,sp,-56
   17618:	dfc00d15 	stw	ra,52(sp)
   1761c:	df000c15 	stw	fp,48(sp)
   17620:	df000c04 	addi	fp,sp,48
   17624:	e13ffd15 	stw	r4,-12(fp)
   17628:	2805883a 	mov	r2,r5
   1762c:	e1bfff15 	stw	r6,-4(fp)
   17630:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   17634:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   17638:	e0bfff17 	ldw	r2,-4(fp)
   1763c:	1000021e 	bne	r2,zero,17648 <OSQDel+0x34>
        return (pevent);
   17640:	e0bffd17 	ldw	r2,-12(fp)
   17644:	00008e06 	br	17880 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   17648:	e0bffd17 	ldw	r2,-12(fp)
   1764c:	1000051e 	bne	r2,zero,17664 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   17650:	e0bfff17 	ldw	r2,-4(fp)
   17654:	00c00104 	movi	r3,4
   17658:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1765c:	e0bffd17 	ldw	r2,-12(fp)
   17660:	00008706 	br	17880 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   17664:	e0bffd17 	ldw	r2,-12(fp)
   17668:	10800003 	ldbu	r2,0(r2)
   1766c:	10803fcc 	andi	r2,r2,255
   17670:	108000a0 	cmpeqi	r2,r2,2
   17674:	1000051e 	bne	r2,zero,1768c <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   17678:	e0bfff17 	ldw	r2,-4(fp)
   1767c:	00c00044 	movi	r3,1
   17680:	10c00005 	stb	r3,0(r2)
        return (pevent);
   17684:	e0bffd17 	ldw	r2,-12(fp)
   17688:	00007d06 	br	17880 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1768c:	d0a82703 	ldbu	r2,-24420(gp)
   17690:	10803fcc 	andi	r2,r2,255
   17694:	10000526 	beq	r2,zero,176ac <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   17698:	e0bfff17 	ldw	r2,-4(fp)
   1769c:	00c003c4 	movi	r3,15
   176a0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   176a4:	e0bffd17 	ldw	r2,-12(fp)
   176a8:	00007506 	br	17880 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   176ac:	0005303a 	rdctl	r2,status
   176b0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   176b4:	e0fffc17 	ldw	r3,-16(fp)
   176b8:	00bfff84 	movi	r2,-2
   176bc:	1884703a 	and	r2,r3,r2
   176c0:	1001703a 	wrctl	status,r2
  
  return context;
   176c4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   176c8:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   176cc:	e0bffd17 	ldw	r2,-12(fp)
   176d0:	10800283 	ldbu	r2,10(r2)
   176d4:	10803fcc 	andi	r2,r2,255
   176d8:	10000326 	beq	r2,zero,176e8 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   176dc:	00800044 	movi	r2,1
   176e0:	e0bff405 	stb	r2,-48(fp)
   176e4:	00000106 	br	176ec <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   176e8:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   176ec:	e0bffe03 	ldbu	r2,-8(fp)
   176f0:	10000326 	beq	r2,zero,17700 <OSQDel+0xec>
   176f4:	10800060 	cmpeqi	r2,r2,1
   176f8:	1000301e 	bne	r2,zero,177bc <OSQDel+0x1a8>
   176fc:	00005506 	br	17854 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   17700:	e0bff403 	ldbu	r2,-48(fp)
   17704:	10001e1e 	bne	r2,zero,17780 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   17708:	e0bffd17 	ldw	r2,-12(fp)
   1770c:	00c00fc4 	movi	r3,63
   17710:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   17714:	e0bffd17 	ldw	r2,-12(fp)
   17718:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   1771c:	e0bffd17 	ldw	r2,-12(fp)
   17720:	10800117 	ldw	r2,4(r2)
   17724:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   17728:	d0e82417 	ldw	r3,-24432(gp)
   1772c:	e0bff817 	ldw	r2,-32(fp)
   17730:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   17734:	e0bff817 	ldw	r2,-32(fp)
   17738:	d0a82415 	stw	r2,-24432(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1773c:	e0bffd17 	ldw	r2,-12(fp)
   17740:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   17744:	d0e82617 	ldw	r3,-24424(gp)
   17748:	e0bffd17 	ldw	r2,-12(fp)
   1774c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   17750:	e0bffd17 	ldw	r2,-12(fp)
   17754:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   17758:	e0bffd17 	ldw	r2,-12(fp)
   1775c:	d0a82615 	stw	r2,-24424(gp)
   17760:	e0bff617 	ldw	r2,-40(fp)
   17764:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17768:	e0bff717 	ldw	r2,-36(fp)
   1776c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   17770:	e0bfff17 	ldw	r2,-4(fp)
   17774:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   17778:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   1777c:	00003f06 	br	1787c <OSQDel+0x268>
   17780:	e0bff617 	ldw	r2,-40(fp)
   17784:	e0bff915 	stw	r2,-28(fp)
   17788:	e0bff917 	ldw	r2,-28(fp)
   1778c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   17790:	e0bfff17 	ldw	r2,-4(fp)
   17794:	00c01244 	movi	r3,73
   17798:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   1779c:	e0bffd17 	ldw	r2,-12(fp)
   177a0:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   177a4:	00003506 	br	1787c <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   177a8:	000f883a 	mov	r7,zero
   177ac:	01800104 	movi	r6,4
   177b0:	000b883a 	mov	r5,zero
   177b4:	e13ffd17 	ldw	r4,-12(fp)
   177b8:	00142000 	call	14200 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   177bc:	e0bffd17 	ldw	r2,-12(fp)
   177c0:	10800283 	ldbu	r2,10(r2)
   177c4:	10803fcc 	andi	r2,r2,255
   177c8:	103ff71e 	bne	r2,zero,177a8 <OSQDel+0x194>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   177cc:	e0bffd17 	ldw	r2,-12(fp)
   177d0:	00c00fc4 	movi	r3,63
   177d4:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   177d8:	e0bffd17 	ldw	r2,-12(fp)
   177dc:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   177e0:	e0bffd17 	ldw	r2,-12(fp)
   177e4:	10800117 	ldw	r2,4(r2)
   177e8:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   177ec:	d0e82417 	ldw	r3,-24432(gp)
   177f0:	e0bff817 	ldw	r2,-32(fp)
   177f4:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   177f8:	e0bff817 	ldw	r2,-32(fp)
   177fc:	d0a82415 	stw	r2,-24432(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   17800:	e0bffd17 	ldw	r2,-12(fp)
   17804:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   17808:	d0e82617 	ldw	r3,-24424(gp)
   1780c:	e0bffd17 	ldw	r2,-12(fp)
   17810:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   17814:	e0bffd17 	ldw	r2,-12(fp)
   17818:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   1781c:	e0bffd17 	ldw	r2,-12(fp)
   17820:	d0a82615 	stw	r2,-24424(gp)
   17824:	e0bff617 	ldw	r2,-40(fp)
   17828:	e0bffa15 	stw	r2,-24(fp)
   1782c:	e0bffa17 	ldw	r2,-24(fp)
   17830:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   17834:	e0bff403 	ldbu	r2,-48(fp)
   17838:	10800058 	cmpnei	r2,r2,1
   1783c:	1000011e 	bne	r2,zero,17844 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   17840:	0014c4c0 	call	14c4c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   17844:	e0bfff17 	ldw	r2,-4(fp)
   17848:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   1784c:	e03ff515 	stw	zero,-44(fp)
             break;
   17850:	00000a06 	br	1787c <OSQDel+0x268>
   17854:	e0bff617 	ldw	r2,-40(fp)
   17858:	e0bffb15 	stw	r2,-20(fp)
   1785c:	e0bffb17 	ldw	r2,-20(fp)
   17860:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   17864:	e0bfff17 	ldw	r2,-4(fp)
   17868:	00c001c4 	movi	r3,7
   1786c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   17870:	e0bffd17 	ldw	r2,-12(fp)
   17874:	e0bff515 	stw	r2,-44(fp)
             break;
   17878:	0001883a 	nop
    }
    return (pevent_return);
   1787c:	e0bff517 	ldw	r2,-44(fp)
}
   17880:	e037883a 	mov	sp,fp
   17884:	dfc00117 	ldw	ra,4(sp)
   17888:	df000017 	ldw	fp,0(sp)
   1788c:	dec00204 	addi	sp,sp,8
   17890:	f800283a 	ret

00017894 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   17894:	defffa04 	addi	sp,sp,-24
   17898:	df000515 	stw	fp,20(sp)
   1789c:	df000504 	addi	fp,sp,20
   178a0:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   178a4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   178a8:	e0bfff17 	ldw	r2,-4(fp)
   178ac:	1000021e 	bne	r2,zero,178b8 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   178b0:	00800104 	movi	r2,4
   178b4:	00002106 	br	1793c <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   178b8:	e0bfff17 	ldw	r2,-4(fp)
   178bc:	10800003 	ldbu	r2,0(r2)
   178c0:	10803fcc 	andi	r2,r2,255
   178c4:	108000a0 	cmpeqi	r2,r2,2
   178c8:	1000021e 	bne	r2,zero,178d4 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   178cc:	00800044 	movi	r2,1
   178d0:	00001a06 	br	1793c <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   178d4:	0005303a 	rdctl	r2,status
   178d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   178dc:	e0fffd17 	ldw	r3,-12(fp)
   178e0:	00bfff84 	movi	r2,-2
   178e4:	1884703a 	and	r2,r3,r2
   178e8:	1001703a 	wrctl	status,r2
  
  return context;
   178ec:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   178f0:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   178f4:	e0bfff17 	ldw	r2,-4(fp)
   178f8:	10800117 	ldw	r2,4(r2)
   178fc:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   17900:	e0bffc17 	ldw	r2,-16(fp)
   17904:	10c00117 	ldw	r3,4(r2)
   17908:	e0bffc17 	ldw	r2,-16(fp)
   1790c:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   17910:	e0bffc17 	ldw	r2,-16(fp)
   17914:	10c00117 	ldw	r3,4(r2)
   17918:	e0bffc17 	ldw	r2,-16(fp)
   1791c:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   17920:	e0bffc17 	ldw	r2,-16(fp)
   17924:	1000058d 	sth	zero,22(r2)
   17928:	e0bffb17 	ldw	r2,-20(fp)
   1792c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17930:	e0bffe17 	ldw	r2,-8(fp)
   17934:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   17938:	0005883a 	mov	r2,zero
}
   1793c:	e037883a 	mov	sp,fp
   17940:	df000017 	ldw	fp,0(sp)
   17944:	dec00104 	addi	sp,sp,4
   17948:	f800283a 	ret

0001794c <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   1794c:	defff304 	addi	sp,sp,-52
   17950:	dfc00c15 	stw	ra,48(sp)
   17954:	df000b15 	stw	fp,44(sp)
   17958:	df000b04 	addi	fp,sp,44
   1795c:	e13ffd15 	stw	r4,-12(fp)
   17960:	2805883a 	mov	r2,r5
   17964:	e1bfff15 	stw	r6,-4(fp)
   17968:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1796c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   17970:	e0bfff17 	ldw	r2,-4(fp)
   17974:	1000021e 	bne	r2,zero,17980 <OSQPend+0x34>
        return ((void *)0);
   17978:	0005883a 	mov	r2,zero
   1797c:	00009106 	br	17bc4 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   17980:	e0bffd17 	ldw	r2,-12(fp)
   17984:	1000051e 	bne	r2,zero,1799c <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   17988:	e0bfff17 	ldw	r2,-4(fp)
   1798c:	00c00104 	movi	r3,4
   17990:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   17994:	0005883a 	mov	r2,zero
   17998:	00008a06 	br	17bc4 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   1799c:	e0bffd17 	ldw	r2,-12(fp)
   179a0:	10800003 	ldbu	r2,0(r2)
   179a4:	10803fcc 	andi	r2,r2,255
   179a8:	108000a0 	cmpeqi	r2,r2,2
   179ac:	1000051e 	bne	r2,zero,179c4 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   179b0:	e0bfff17 	ldw	r2,-4(fp)
   179b4:	00c00044 	movi	r3,1
   179b8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   179bc:	0005883a 	mov	r2,zero
   179c0:	00008006 	br	17bc4 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   179c4:	d0a82703 	ldbu	r2,-24420(gp)
   179c8:	10803fcc 	andi	r2,r2,255
   179cc:	10000526 	beq	r2,zero,179e4 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   179d0:	e0bfff17 	ldw	r2,-4(fp)
   179d4:	00c00084 	movi	r3,2
   179d8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   179dc:	0005883a 	mov	r2,zero
   179e0:	00007806 	br	17bc4 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   179e4:	d0a81903 	ldbu	r2,-24476(gp)
   179e8:	10803fcc 	andi	r2,r2,255
   179ec:	10000526 	beq	r2,zero,17a04 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   179f0:	e0bfff17 	ldw	r2,-4(fp)
   179f4:	00c00344 	movi	r3,13
   179f8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   179fc:	0005883a 	mov	r2,zero
   17a00:	00007006 	br	17bc4 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17a04:	0005303a 	rdctl	r2,status
   17a08:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17a0c:	e0fffc17 	ldw	r3,-16(fp)
   17a10:	00bfff84 	movi	r2,-2
   17a14:	1884703a 	and	r2,r3,r2
   17a18:	1001703a 	wrctl	status,r2
  
  return context;
   17a1c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   17a20:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   17a24:	e0bffd17 	ldw	r2,-12(fp)
   17a28:	10800117 	ldw	r2,4(r2)
   17a2c:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   17a30:	e0bff817 	ldw	r2,-32(fp)
   17a34:	1080058b 	ldhu	r2,22(r2)
   17a38:	10bfffcc 	andi	r2,r2,65535
   17a3c:	10001e26 	beq	r2,zero,17ab8 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   17a40:	e0bff817 	ldw	r2,-32(fp)
   17a44:	10800417 	ldw	r2,16(r2)
   17a48:	11000104 	addi	r4,r2,4
   17a4c:	e0fff817 	ldw	r3,-32(fp)
   17a50:	19000415 	stw	r4,16(r3)
   17a54:	10800017 	ldw	r2,0(r2)
   17a58:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   17a5c:	e0bff817 	ldw	r2,-32(fp)
   17a60:	1080058b 	ldhu	r2,22(r2)
   17a64:	10bfffc4 	addi	r2,r2,-1
   17a68:	1007883a 	mov	r3,r2
   17a6c:	e0bff817 	ldw	r2,-32(fp)
   17a70:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   17a74:	e0bff817 	ldw	r2,-32(fp)
   17a78:	10c00417 	ldw	r3,16(r2)
   17a7c:	e0bff817 	ldw	r2,-32(fp)
   17a80:	10800217 	ldw	r2,8(r2)
   17a84:	1880041e 	bne	r3,r2,17a98 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
   17a88:	e0bff817 	ldw	r2,-32(fp)
   17a8c:	10c00117 	ldw	r3,4(r2)
   17a90:	e0bff817 	ldw	r2,-32(fp)
   17a94:	10c00415 	stw	r3,16(r2)
   17a98:	e0bff617 	ldw	r2,-40(fp)
   17a9c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17aa0:	e0bff717 	ldw	r2,-36(fp)
   17aa4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   17aa8:	e0bfff17 	ldw	r2,-4(fp)
   17aac:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   17ab0:	e0bff517 	ldw	r2,-44(fp)
   17ab4:	00004306 	br	17bc4 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   17ab8:	d0a82817 	ldw	r2,-24416(gp)
   17abc:	d0e82817 	ldw	r3,-24416(gp)
   17ac0:	18c00c03 	ldbu	r3,48(r3)
   17ac4:	18c00114 	ori	r3,r3,4
   17ac8:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   17acc:	d0a82817 	ldw	r2,-24416(gp)
   17ad0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   17ad4:	d0a82817 	ldw	r2,-24416(gp)
   17ad8:	e0fffe0b 	ldhu	r3,-8(fp)
   17adc:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   17ae0:	e13ffd17 	ldw	r4,-12(fp)
   17ae4:	00143980 	call	14398 <OS_EventTaskWait>
   17ae8:	e0bff617 	ldw	r2,-40(fp)
   17aec:	e0bffb15 	stw	r2,-20(fp)
   17af0:	e0bffb17 	ldw	r2,-20(fp)
   17af4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   17af8:	0014c4c0 	call	14c4c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17afc:	0005303a 	rdctl	r2,status
   17b00:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17b04:	e0fff917 	ldw	r3,-28(fp)
   17b08:	00bfff84 	movi	r2,-2
   17b0c:	1884703a 	and	r2,r3,r2
   17b10:	1001703a 	wrctl	status,r2
  
  return context;
   17b14:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   17b18:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   17b1c:	d0a82817 	ldw	r2,-24416(gp)
   17b20:	10800c43 	ldbu	r2,49(r2)
   17b24:	10803fcc 	andi	r2,r2,255
   17b28:	10000326 	beq	r2,zero,17b38 <OSQPend+0x1ec>
   17b2c:	108000a0 	cmpeqi	r2,r2,2
   17b30:	1000071e 	bne	r2,zero,17b50 <OSQPend+0x204>
   17b34:	00000b06 	br	17b64 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   17b38:	d0a82817 	ldw	r2,-24416(gp)
   17b3c:	10800917 	ldw	r2,36(r2)
   17b40:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   17b44:	e0bfff17 	ldw	r2,-4(fp)
   17b48:	10000005 	stb	zero,0(r2)
             break;
   17b4c:	00000e06 	br	17b88 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   17b50:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   17b54:	e0bfff17 	ldw	r2,-4(fp)
   17b58:	00c00384 	movi	r3,14
   17b5c:	10c00005 	stb	r3,0(r2)
             break;
   17b60:	00000906 	br	17b88 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   17b64:	d0a82817 	ldw	r2,-24416(gp)
   17b68:	e17ffd17 	ldw	r5,-12(fp)
   17b6c:	1009883a 	mov	r4,r2
   17b70:	00145f80 	call	145f8 <OS_EventTaskRemove>
             pmsg = (void *)0;
   17b74:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   17b78:	e0bfff17 	ldw	r2,-4(fp)
   17b7c:	00c00284 	movi	r3,10
   17b80:	10c00005 	stb	r3,0(r2)
             break;
   17b84:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   17b88:	d0a82817 	ldw	r2,-24416(gp)
   17b8c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   17b90:	d0a82817 	ldw	r2,-24416(gp)
   17b94:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   17b98:	d0a82817 	ldw	r2,-24416(gp)
   17b9c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   17ba0:	d0a82817 	ldw	r2,-24416(gp)
   17ba4:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   17ba8:	d0a82817 	ldw	r2,-24416(gp)
   17bac:	10000915 	stw	zero,36(r2)
   17bb0:	e0bff617 	ldw	r2,-40(fp)
   17bb4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17bb8:	e0bffa17 	ldw	r2,-24(fp)
   17bbc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   17bc0:	e0bff517 	ldw	r2,-44(fp)
}
   17bc4:	e037883a 	mov	sp,fp
   17bc8:	dfc00117 	ldw	ra,4(sp)
   17bcc:	df000017 	ldw	fp,0(sp)
   17bd0:	dec00204 	addi	sp,sp,8
   17bd4:	f800283a 	ret

00017bd8 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   17bd8:	defff604 	addi	sp,sp,-40
   17bdc:	dfc00915 	stw	ra,36(sp)
   17be0:	df000815 	stw	fp,32(sp)
   17be4:	df000804 	addi	fp,sp,32
   17be8:	e13ffd15 	stw	r4,-12(fp)
   17bec:	2805883a 	mov	r2,r5
   17bf0:	e1bfff15 	stw	r6,-4(fp)
   17bf4:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   17bf8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   17bfc:	e0bfff17 	ldw	r2,-4(fp)
   17c00:	1000021e 	bne	r2,zero,17c0c <OSQPendAbort+0x34>
        return (0);
   17c04:	0005883a 	mov	r2,zero
   17c08:	00004906 	br	17d30 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   17c0c:	e0bffd17 	ldw	r2,-12(fp)
   17c10:	1000051e 	bne	r2,zero,17c28 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   17c14:	e0bfff17 	ldw	r2,-4(fp)
   17c18:	00c00104 	movi	r3,4
   17c1c:	10c00005 	stb	r3,0(r2)
        return (0);
   17c20:	0005883a 	mov	r2,zero
   17c24:	00004206 	br	17d30 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   17c28:	e0bffd17 	ldw	r2,-12(fp)
   17c2c:	10800003 	ldbu	r2,0(r2)
   17c30:	10803fcc 	andi	r2,r2,255
   17c34:	108000a0 	cmpeqi	r2,r2,2
   17c38:	1000051e 	bne	r2,zero,17c50 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   17c3c:	e0bfff17 	ldw	r2,-4(fp)
   17c40:	00c00044 	movi	r3,1
   17c44:	10c00005 	stb	r3,0(r2)
        return (0);
   17c48:	0005883a 	mov	r2,zero
   17c4c:	00003806 	br	17d30 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17c50:	0005303a 	rdctl	r2,status
   17c54:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17c58:	e0fffc17 	ldw	r3,-16(fp)
   17c5c:	00bfff84 	movi	r2,-2
   17c60:	1884703a 	and	r2,r3,r2
   17c64:	1001703a 	wrctl	status,r2
  
  return context;
   17c68:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   17c6c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   17c70:	e0bffd17 	ldw	r2,-12(fp)
   17c74:	10800283 	ldbu	r2,10(r2)
   17c78:	10803fcc 	andi	r2,r2,255
   17c7c:	10002526 	beq	r2,zero,17d14 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   17c80:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   17c84:	e0bffe03 	ldbu	r2,-8(fp)
   17c88:	10800060 	cmpeqi	r2,r2,1
   17c8c:	10000e26 	beq	r2,zero,17cc8 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   17c90:	00000806 	br	17cb4 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   17c94:	01c00084 	movi	r7,2
   17c98:	01800104 	movi	r6,4
   17c9c:	000b883a 	mov	r5,zero
   17ca0:	e13ffd17 	ldw	r4,-12(fp)
   17ca4:	00142000 	call	14200 <OS_EventTaskRdy>
                     nbr_tasks++;
   17ca8:	e0bff803 	ldbu	r2,-32(fp)
   17cac:	10800044 	addi	r2,r2,1
   17cb0:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   17cb4:	e0bffd17 	ldw	r2,-12(fp)
   17cb8:	10800283 	ldbu	r2,10(r2)
   17cbc:	10803fcc 	andi	r2,r2,255
   17cc0:	103ff41e 	bne	r2,zero,17c94 <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   17cc4:	00000906 	br	17cec <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   17cc8:	01c00084 	movi	r7,2
   17ccc:	01800104 	movi	r6,4
   17cd0:	000b883a 	mov	r5,zero
   17cd4:	e13ffd17 	ldw	r4,-12(fp)
   17cd8:	00142000 	call	14200 <OS_EventTaskRdy>
                 nbr_tasks++;
   17cdc:	e0bff803 	ldbu	r2,-32(fp)
   17ce0:	10800044 	addi	r2,r2,1
   17ce4:	e0bff805 	stb	r2,-32(fp)
                 break;
   17ce8:	0001883a 	nop
   17cec:	e0bff917 	ldw	r2,-28(fp)
   17cf0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17cf4:	e0bffa17 	ldw	r2,-24(fp)
   17cf8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   17cfc:	0014c4c0 	call	14c4c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   17d00:	e0bfff17 	ldw	r2,-4(fp)
   17d04:	00c00384 	movi	r3,14
   17d08:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   17d0c:	e0bff803 	ldbu	r2,-32(fp)
   17d10:	00000706 	br	17d30 <OSQPendAbort+0x158>
   17d14:	e0bff917 	ldw	r2,-28(fp)
   17d18:	e0bffb15 	stw	r2,-20(fp)
   17d1c:	e0bffb17 	ldw	r2,-20(fp)
   17d20:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   17d24:	e0bfff17 	ldw	r2,-4(fp)
   17d28:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   17d2c:	0005883a 	mov	r2,zero
}
   17d30:	e037883a 	mov	sp,fp
   17d34:	dfc00117 	ldw	ra,4(sp)
   17d38:	df000017 	ldw	fp,0(sp)
   17d3c:	dec00204 	addi	sp,sp,8
   17d40:	f800283a 	ret

00017d44 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   17d44:	defff604 	addi	sp,sp,-40
   17d48:	dfc00915 	stw	ra,36(sp)
   17d4c:	df000815 	stw	fp,32(sp)
   17d50:	df000804 	addi	fp,sp,32
   17d54:	e13ffe15 	stw	r4,-8(fp)
   17d58:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   17d5c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   17d60:	e0bffe17 	ldw	r2,-8(fp)
   17d64:	1000021e 	bne	r2,zero,17d70 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   17d68:	00800104 	movi	r2,4
   17d6c:	00004a06 	br	17e98 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   17d70:	e0bffe17 	ldw	r2,-8(fp)
   17d74:	10800003 	ldbu	r2,0(r2)
   17d78:	10803fcc 	andi	r2,r2,255
   17d7c:	108000a0 	cmpeqi	r2,r2,2
   17d80:	1000021e 	bne	r2,zero,17d8c <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   17d84:	00800044 	movi	r2,1
   17d88:	00004306 	br	17e98 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17d8c:	0005303a 	rdctl	r2,status
   17d90:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17d94:	e0fffd17 	ldw	r3,-12(fp)
   17d98:	00bfff84 	movi	r2,-2
   17d9c:	1884703a 	and	r2,r3,r2
   17da0:	1001703a 	wrctl	status,r2
  
  return context;
   17da4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   17da8:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   17dac:	e0bffe17 	ldw	r2,-8(fp)
   17db0:	10800283 	ldbu	r2,10(r2)
   17db4:	10803fcc 	andi	r2,r2,255
   17db8:	10000c26 	beq	r2,zero,17dec <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   17dbc:	000f883a 	mov	r7,zero
   17dc0:	01800104 	movi	r6,4
   17dc4:	e17fff17 	ldw	r5,-4(fp)
   17dc8:	e13ffe17 	ldw	r4,-8(fp)
   17dcc:	00142000 	call	14200 <OS_EventTaskRdy>
   17dd0:	e0bff817 	ldw	r2,-32(fp)
   17dd4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17dd8:	e0bff917 	ldw	r2,-28(fp)
   17ddc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   17de0:	0014c4c0 	call	14c4c <OS_Sched>
        return (OS_ERR_NONE);
   17de4:	0005883a 	mov	r2,zero
   17de8:	00002b06 	br	17e98 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   17dec:	e0bffe17 	ldw	r2,-8(fp)
   17df0:	10800117 	ldw	r2,4(r2)
   17df4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   17df8:	e0bffb17 	ldw	r2,-20(fp)
   17dfc:	10c0058b 	ldhu	r3,22(r2)
   17e00:	e0bffb17 	ldw	r2,-20(fp)
   17e04:	1080050b 	ldhu	r2,20(r2)
   17e08:	18ffffcc 	andi	r3,r3,65535
   17e0c:	10bfffcc 	andi	r2,r2,65535
   17e10:	18800636 	bltu	r3,r2,17e2c <OSQPost+0xe8>
   17e14:	e0bff817 	ldw	r2,-32(fp)
   17e18:	e0bffa15 	stw	r2,-24(fp)
   17e1c:	e0bffa17 	ldw	r2,-24(fp)
   17e20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   17e24:	00800784 	movi	r2,30
   17e28:	00001b06 	br	17e98 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   17e2c:	e0bffb17 	ldw	r2,-20(fp)
   17e30:	10800317 	ldw	r2,12(r2)
   17e34:	11000104 	addi	r4,r2,4
   17e38:	e0fffb17 	ldw	r3,-20(fp)
   17e3c:	19000315 	stw	r4,12(r3)
   17e40:	e0ffff17 	ldw	r3,-4(fp)
   17e44:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   17e48:	e0bffb17 	ldw	r2,-20(fp)
   17e4c:	1080058b 	ldhu	r2,22(r2)
   17e50:	10800044 	addi	r2,r2,1
   17e54:	1007883a 	mov	r3,r2
   17e58:	e0bffb17 	ldw	r2,-20(fp)
   17e5c:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   17e60:	e0bffb17 	ldw	r2,-20(fp)
   17e64:	10c00317 	ldw	r3,12(r2)
   17e68:	e0bffb17 	ldw	r2,-20(fp)
   17e6c:	10800217 	ldw	r2,8(r2)
   17e70:	1880041e 	bne	r3,r2,17e84 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   17e74:	e0bffb17 	ldw	r2,-20(fp)
   17e78:	10c00117 	ldw	r3,4(r2)
   17e7c:	e0bffb17 	ldw	r2,-20(fp)
   17e80:	10c00315 	stw	r3,12(r2)
   17e84:	e0bff817 	ldw	r2,-32(fp)
   17e88:	e0bffc15 	stw	r2,-16(fp)
   17e8c:	e0bffc17 	ldw	r2,-16(fp)
   17e90:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   17e94:	0005883a 	mov	r2,zero
}
   17e98:	e037883a 	mov	sp,fp
   17e9c:	dfc00117 	ldw	ra,4(sp)
   17ea0:	df000017 	ldw	fp,0(sp)
   17ea4:	dec00204 	addi	sp,sp,8
   17ea8:	f800283a 	ret

00017eac <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   17eac:	defff604 	addi	sp,sp,-40
   17eb0:	dfc00915 	stw	ra,36(sp)
   17eb4:	df000815 	stw	fp,32(sp)
   17eb8:	df000804 	addi	fp,sp,32
   17ebc:	e13ffe15 	stw	r4,-8(fp)
   17ec0:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17ec4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   17ec8:	e0bffe17 	ldw	r2,-8(fp)
   17ecc:	1000021e 	bne	r2,zero,17ed8 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   17ed0:	00800104 	movi	r2,4
   17ed4:	00004c06 	br	18008 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   17ed8:	e0bffe17 	ldw	r2,-8(fp)
   17edc:	10800003 	ldbu	r2,0(r2)
   17ee0:	10803fcc 	andi	r2,r2,255
   17ee4:	108000a0 	cmpeqi	r2,r2,2
   17ee8:	1000021e 	bne	r2,zero,17ef4 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   17eec:	00800044 	movi	r2,1
   17ef0:	00004506 	br	18008 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17ef4:	0005303a 	rdctl	r2,status
   17ef8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17efc:	e0fffd17 	ldw	r3,-12(fp)
   17f00:	00bfff84 	movi	r2,-2
   17f04:	1884703a 	and	r2,r3,r2
   17f08:	1001703a 	wrctl	status,r2
  
  return context;
   17f0c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   17f10:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   17f14:	e0bffe17 	ldw	r2,-8(fp)
   17f18:	10800283 	ldbu	r2,10(r2)
   17f1c:	10803fcc 	andi	r2,r2,255
   17f20:	10000c26 	beq	r2,zero,17f54 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   17f24:	000f883a 	mov	r7,zero
   17f28:	01800104 	movi	r6,4
   17f2c:	e17fff17 	ldw	r5,-4(fp)
   17f30:	e13ffe17 	ldw	r4,-8(fp)
   17f34:	00142000 	call	14200 <OS_EventTaskRdy>
   17f38:	e0bff817 	ldw	r2,-32(fp)
   17f3c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17f40:	e0bff917 	ldw	r2,-28(fp)
   17f44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   17f48:	0014c4c0 	call	14c4c <OS_Sched>
        return (OS_ERR_NONE);
   17f4c:	0005883a 	mov	r2,zero
   17f50:	00002d06 	br	18008 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   17f54:	e0bffe17 	ldw	r2,-8(fp)
   17f58:	10800117 	ldw	r2,4(r2)
   17f5c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   17f60:	e0bffb17 	ldw	r2,-20(fp)
   17f64:	10c0058b 	ldhu	r3,22(r2)
   17f68:	e0bffb17 	ldw	r2,-20(fp)
   17f6c:	1080050b 	ldhu	r2,20(r2)
   17f70:	18ffffcc 	andi	r3,r3,65535
   17f74:	10bfffcc 	andi	r2,r2,65535
   17f78:	18800636 	bltu	r3,r2,17f94 <OSQPostFront+0xe8>
   17f7c:	e0bff817 	ldw	r2,-32(fp)
   17f80:	e0bffa15 	stw	r2,-24(fp)
   17f84:	e0bffa17 	ldw	r2,-24(fp)
   17f88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   17f8c:	00800784 	movi	r2,30
   17f90:	00001d06 	br	18008 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   17f94:	e0bffb17 	ldw	r2,-20(fp)
   17f98:	10c00417 	ldw	r3,16(r2)
   17f9c:	e0bffb17 	ldw	r2,-20(fp)
   17fa0:	10800117 	ldw	r2,4(r2)
   17fa4:	1880041e 	bne	r3,r2,17fb8 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   17fa8:	e0bffb17 	ldw	r2,-20(fp)
   17fac:	10c00217 	ldw	r3,8(r2)
   17fb0:	e0bffb17 	ldw	r2,-20(fp)
   17fb4:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   17fb8:	e0bffb17 	ldw	r2,-20(fp)
   17fbc:	10800417 	ldw	r2,16(r2)
   17fc0:	10ffff04 	addi	r3,r2,-4
   17fc4:	e0bffb17 	ldw	r2,-20(fp)
   17fc8:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   17fcc:	e0bffb17 	ldw	r2,-20(fp)
   17fd0:	10800417 	ldw	r2,16(r2)
   17fd4:	e0ffff17 	ldw	r3,-4(fp)
   17fd8:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   17fdc:	e0bffb17 	ldw	r2,-20(fp)
   17fe0:	1080058b 	ldhu	r2,22(r2)
   17fe4:	10800044 	addi	r2,r2,1
   17fe8:	1007883a 	mov	r3,r2
   17fec:	e0bffb17 	ldw	r2,-20(fp)
   17ff0:	10c0058d 	sth	r3,22(r2)
   17ff4:	e0bff817 	ldw	r2,-32(fp)
   17ff8:	e0bffc15 	stw	r2,-16(fp)
   17ffc:	e0bffc17 	ldw	r2,-16(fp)
   18000:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18004:	0005883a 	mov	r2,zero
}
   18008:	e037883a 	mov	sp,fp
   1800c:	dfc00117 	ldw	ra,4(sp)
   18010:	df000017 	ldw	fp,0(sp)
   18014:	dec00204 	addi	sp,sp,8
   18018:	f800283a 	ret

0001801c <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   1801c:	defff504 	addi	sp,sp,-44
   18020:	dfc00a15 	stw	ra,40(sp)
   18024:	df000915 	stw	fp,36(sp)
   18028:	df000904 	addi	fp,sp,36
   1802c:	e13ffd15 	stw	r4,-12(fp)
   18030:	e17ffe15 	stw	r5,-8(fp)
   18034:	3005883a 	mov	r2,r6
   18038:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1803c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   18040:	e0bffd17 	ldw	r2,-12(fp)
   18044:	1000021e 	bne	r2,zero,18050 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   18048:	00800104 	movi	r2,4
   1804c:	00007106 	br	18214 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   18050:	e0bffd17 	ldw	r2,-12(fp)
   18054:	10800003 	ldbu	r2,0(r2)
   18058:	10803fcc 	andi	r2,r2,255
   1805c:	108000a0 	cmpeqi	r2,r2,2
   18060:	1000021e 	bne	r2,zero,1806c <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   18064:	00800044 	movi	r2,1
   18068:	00006a06 	br	18214 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1806c:	0005303a 	rdctl	r2,status
   18070:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18074:	e0fffc17 	ldw	r3,-16(fp)
   18078:	00bfff84 	movi	r2,-2
   1807c:	1884703a 	and	r2,r3,r2
   18080:	1001703a 	wrctl	status,r2
  
  return context;
   18084:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   18088:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   1808c:	e0bffd17 	ldw	r2,-12(fp)
   18090:	10800283 	ldbu	r2,10(r2)
   18094:	10803fcc 	andi	r2,r2,255
   18098:	10001d26 	beq	r2,zero,18110 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   1809c:	e0bfff03 	ldbu	r2,-4(fp)
   180a0:	1080004c 	andi	r2,r2,1
   180a4:	10000b26 	beq	r2,zero,180d4 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   180a8:	00000506 	br	180c0 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   180ac:	000f883a 	mov	r7,zero
   180b0:	01800104 	movi	r6,4
   180b4:	e17ffe17 	ldw	r5,-8(fp)
   180b8:	e13ffd17 	ldw	r4,-12(fp)
   180bc:	00142000 	call	14200 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   180c0:	e0bffd17 	ldw	r2,-12(fp)
   180c4:	10800283 	ldbu	r2,10(r2)
   180c8:	10803fcc 	andi	r2,r2,255
   180cc:	103ff71e 	bne	r2,zero,180ac <OSQPostOpt+0x90>
   180d0:	00000506 	br	180e8 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   180d4:	000f883a 	mov	r7,zero
   180d8:	01800104 	movi	r6,4
   180dc:	e17ffe17 	ldw	r5,-8(fp)
   180e0:	e13ffd17 	ldw	r4,-12(fp)
   180e4:	00142000 	call	14200 <OS_EventTaskRdy>
   180e8:	e0bff717 	ldw	r2,-36(fp)
   180ec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   180f0:	e0bff817 	ldw	r2,-32(fp)
   180f4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   180f8:	e0bfff03 	ldbu	r2,-4(fp)
   180fc:	1080010c 	andi	r2,r2,4
   18100:	1000011e 	bne	r2,zero,18108 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   18104:	0014c4c0 	call	14c4c <OS_Sched>
        }
        return (OS_ERR_NONE);
   18108:	0005883a 	mov	r2,zero
   1810c:	00004106 	br	18214 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   18110:	e0bffd17 	ldw	r2,-12(fp)
   18114:	10800117 	ldw	r2,4(r2)
   18118:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   1811c:	e0bffa17 	ldw	r2,-24(fp)
   18120:	10c0058b 	ldhu	r3,22(r2)
   18124:	e0bffa17 	ldw	r2,-24(fp)
   18128:	1080050b 	ldhu	r2,20(r2)
   1812c:	18ffffcc 	andi	r3,r3,65535
   18130:	10bfffcc 	andi	r2,r2,65535
   18134:	18800636 	bltu	r3,r2,18150 <OSQPostOpt+0x134>
   18138:	e0bff717 	ldw	r2,-36(fp)
   1813c:	e0bff915 	stw	r2,-28(fp)
   18140:	e0bff917 	ldw	r2,-28(fp)
   18144:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   18148:	00800784 	movi	r2,30
   1814c:	00003106 	br	18214 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   18150:	e0bfff03 	ldbu	r2,-4(fp)
   18154:	1080008c 	andi	r2,r2,2
   18158:	10001326 	beq	r2,zero,181a8 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   1815c:	e0bffa17 	ldw	r2,-24(fp)
   18160:	10c00417 	ldw	r3,16(r2)
   18164:	e0bffa17 	ldw	r2,-24(fp)
   18168:	10800117 	ldw	r2,4(r2)
   1816c:	1880041e 	bne	r3,r2,18180 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   18170:	e0bffa17 	ldw	r2,-24(fp)
   18174:	10c00217 	ldw	r3,8(r2)
   18178:	e0bffa17 	ldw	r2,-24(fp)
   1817c:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   18180:	e0bffa17 	ldw	r2,-24(fp)
   18184:	10800417 	ldw	r2,16(r2)
   18188:	10ffff04 	addi	r3,r2,-4
   1818c:	e0bffa17 	ldw	r2,-24(fp)
   18190:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   18194:	e0bffa17 	ldw	r2,-24(fp)
   18198:	10800417 	ldw	r2,16(r2)
   1819c:	e0fffe17 	ldw	r3,-8(fp)
   181a0:	10c00015 	stw	r3,0(r2)
   181a4:	00001006 	br	181e8 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   181a8:	e0bffa17 	ldw	r2,-24(fp)
   181ac:	10800317 	ldw	r2,12(r2)
   181b0:	11000104 	addi	r4,r2,4
   181b4:	e0fffa17 	ldw	r3,-24(fp)
   181b8:	19000315 	stw	r4,12(r3)
   181bc:	e0fffe17 	ldw	r3,-8(fp)
   181c0:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   181c4:	e0bffa17 	ldw	r2,-24(fp)
   181c8:	10c00317 	ldw	r3,12(r2)
   181cc:	e0bffa17 	ldw	r2,-24(fp)
   181d0:	10800217 	ldw	r2,8(r2)
   181d4:	1880041e 	bne	r3,r2,181e8 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   181d8:	e0bffa17 	ldw	r2,-24(fp)
   181dc:	10c00117 	ldw	r3,4(r2)
   181e0:	e0bffa17 	ldw	r2,-24(fp)
   181e4:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   181e8:	e0bffa17 	ldw	r2,-24(fp)
   181ec:	1080058b 	ldhu	r2,22(r2)
   181f0:	10800044 	addi	r2,r2,1
   181f4:	1007883a 	mov	r3,r2
   181f8:	e0bffa17 	ldw	r2,-24(fp)
   181fc:	10c0058d 	sth	r3,22(r2)
   18200:	e0bff717 	ldw	r2,-36(fp)
   18204:	e0bffb15 	stw	r2,-20(fp)
   18208:	e0bffb17 	ldw	r2,-20(fp)
   1820c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18210:	0005883a 	mov	r2,zero
}
   18214:	e037883a 	mov	sp,fp
   18218:	dfc00117 	ldw	ra,4(sp)
   1821c:	df000017 	ldw	fp,0(sp)
   18220:	dec00204 	addi	sp,sp,8
   18224:	f800283a 	ret

00018228 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   18228:	defff604 	addi	sp,sp,-40
   1822c:	df000915 	stw	fp,36(sp)
   18230:	df000904 	addi	fp,sp,36
   18234:	e13ffe15 	stw	r4,-8(fp)
   18238:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1823c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   18240:	e0bffe17 	ldw	r2,-8(fp)
   18244:	1000021e 	bne	r2,zero,18250 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   18248:	00800104 	movi	r2,4
   1824c:	00004906 	br	18374 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   18250:	e0bfff17 	ldw	r2,-4(fp)
   18254:	1000021e 	bne	r2,zero,18260 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   18258:	00800244 	movi	r2,9
   1825c:	00004506 	br	18374 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   18260:	e0bffe17 	ldw	r2,-8(fp)
   18264:	10800003 	ldbu	r2,0(r2)
   18268:	10803fcc 	andi	r2,r2,255
   1826c:	108000a0 	cmpeqi	r2,r2,2
   18270:	1000021e 	bne	r2,zero,1827c <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   18274:	00800044 	movi	r2,1
   18278:	00003e06 	br	18374 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1827c:	0005303a 	rdctl	r2,status
   18280:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18284:	e0fffd17 	ldw	r3,-12(fp)
   18288:	00bfff84 	movi	r2,-2
   1828c:	1884703a 	and	r2,r3,r2
   18290:	1001703a 	wrctl	status,r2
  
  return context;
   18294:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   18298:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   1829c:	e0bffe17 	ldw	r2,-8(fp)
   182a0:	10c00283 	ldbu	r3,10(r2)
   182a4:	e0bfff17 	ldw	r2,-4(fp)
   182a8:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   182ac:	e0bffe17 	ldw	r2,-8(fp)
   182b0:	108002c4 	addi	r2,r2,11
   182b4:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   182b8:	e0bfff17 	ldw	r2,-4(fp)
   182bc:	10800204 	addi	r2,r2,8
   182c0:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   182c4:	e03ff705 	stb	zero,-36(fp)
   182c8:	00000b06 	br	182f8 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   182cc:	e0bff917 	ldw	r2,-28(fp)
   182d0:	10c00044 	addi	r3,r2,1
   182d4:	e0fff915 	stw	r3,-28(fp)
   182d8:	e0fff817 	ldw	r3,-32(fp)
   182dc:	19000044 	addi	r4,r3,1
   182e0:	e13ff815 	stw	r4,-32(fp)
   182e4:	18c00003 	ldbu	r3,0(r3)
   182e8:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   182ec:	e0bff703 	ldbu	r2,-36(fp)
   182f0:	10800044 	addi	r2,r2,1
   182f4:	e0bff705 	stb	r2,-36(fp)
   182f8:	e0bff703 	ldbu	r2,-36(fp)
   182fc:	108000f0 	cmpltui	r2,r2,3
   18300:	103ff21e 	bne	r2,zero,182cc <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   18304:	e0bffe17 	ldw	r2,-8(fp)
   18308:	10800117 	ldw	r2,4(r2)
   1830c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   18310:	e0bffc17 	ldw	r2,-16(fp)
   18314:	1080058b 	ldhu	r2,22(r2)
   18318:	10bfffcc 	andi	r2,r2,65535
   1831c:	10000626 	beq	r2,zero,18338 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   18320:	e0bffc17 	ldw	r2,-16(fp)
   18324:	10800417 	ldw	r2,16(r2)
   18328:	10c00017 	ldw	r3,0(r2)
   1832c:	e0bfff17 	ldw	r2,-4(fp)
   18330:	10c00015 	stw	r3,0(r2)
   18334:	00000206 	br	18340 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   18338:	e0bfff17 	ldw	r2,-4(fp)
   1833c:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   18340:	e0bffc17 	ldw	r2,-16(fp)
   18344:	10c0058b 	ldhu	r3,22(r2)
   18348:	e0bfff17 	ldw	r2,-4(fp)
   1834c:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   18350:	e0bffc17 	ldw	r2,-16(fp)
   18354:	10c0050b 	ldhu	r3,20(r2)
   18358:	e0bfff17 	ldw	r2,-4(fp)
   1835c:	10c0018d 	sth	r3,6(r2)
   18360:	e0bffa17 	ldw	r2,-24(fp)
   18364:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18368:	e0bffb17 	ldw	r2,-20(fp)
   1836c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18370:	0005883a 	mov	r2,zero
}
   18374:	e037883a 	mov	sp,fp
   18378:	df000017 	ldw	fp,0(sp)
   1837c:	dec00104 	addi	sp,sp,4
   18380:	f800283a 	ret

00018384 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   18384:	defffb04 	addi	sp,sp,-20
   18388:	dfc00415 	stw	ra,16(sp)
   1838c:	df000315 	stw	fp,12(sp)
   18390:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   18394:	01407804 	movi	r5,480
   18398:	010000f4 	movhi	r4,3
   1839c:	210c6704 	addi	r4,r4,12700
   183a0:	0014b900 	call	14b90 <OS_MemClr>
    pq1 = &OSQTbl[0];
   183a4:	008000f4 	movhi	r2,3
   183a8:	108c6704 	addi	r2,r2,12700
   183ac:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   183b0:	008000f4 	movhi	r2,3
   183b4:	108c6d04 	addi	r2,r2,12724
   183b8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   183bc:	e03ffd0d 	sth	zero,-12(fp)
   183c0:	00000c06 	br	183f4 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   183c4:	e0bffe17 	ldw	r2,-8(fp)
   183c8:	e0ffff17 	ldw	r3,-4(fp)
   183cc:	10c00015 	stw	r3,0(r2)
        pq1++;
   183d0:	e0bffe17 	ldw	r2,-8(fp)
   183d4:	10800604 	addi	r2,r2,24
   183d8:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   183dc:	e0bfff17 	ldw	r2,-4(fp)
   183e0:	10800604 	addi	r2,r2,24
   183e4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   183e8:	e0bffd0b 	ldhu	r2,-12(fp)
   183ec:	10800044 	addi	r2,r2,1
   183f0:	e0bffd0d 	sth	r2,-12(fp)
   183f4:	e0bffd0b 	ldhu	r2,-12(fp)
   183f8:	108004f0 	cmpltui	r2,r2,19
   183fc:	103ff11e 	bne	r2,zero,183c4 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   18400:	e0bffe17 	ldw	r2,-8(fp)
   18404:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   18408:	008000f4 	movhi	r2,3
   1840c:	108c6704 	addi	r2,r2,12700
   18410:	d0a82415 	stw	r2,-24432(gp)
#endif
}
   18414:	0001883a 	nop
   18418:	e037883a 	mov	sp,fp
   1841c:	dfc00117 	ldw	ra,4(sp)
   18420:	df000017 	ldw	fp,0(sp)
   18424:	dec00204 	addi	sp,sp,8
   18428:	f800283a 	ret

0001842c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   1842c:	defffa04 	addi	sp,sp,-24
   18430:	df000515 	stw	fp,20(sp)
   18434:	df000504 	addi	fp,sp,20
   18438:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1843c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   18440:	e0bfff17 	ldw	r2,-4(fp)
   18444:	1000021e 	bne	r2,zero,18450 <OSSemAccept+0x24>
        return (0);
   18448:	0005883a 	mov	r2,zero
   1844c:	00001f06 	br	184cc <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   18450:	e0bfff17 	ldw	r2,-4(fp)
   18454:	10800003 	ldbu	r2,0(r2)
   18458:	10803fcc 	andi	r2,r2,255
   1845c:	108000e0 	cmpeqi	r2,r2,3
   18460:	1000021e 	bne	r2,zero,1846c <OSSemAccept+0x40>
        return (0);
   18464:	0005883a 	mov	r2,zero
   18468:	00001806 	br	184cc <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1846c:	0005303a 	rdctl	r2,status
   18470:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18474:	e0fffe17 	ldw	r3,-8(fp)
   18478:	00bfff84 	movi	r2,-2
   1847c:	1884703a 	and	r2,r3,r2
   18480:	1001703a 	wrctl	status,r2
  
  return context;
   18484:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   18488:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   1848c:	e0bfff17 	ldw	r2,-4(fp)
   18490:	1080020b 	ldhu	r2,8(r2)
   18494:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   18498:	e0bffd0b 	ldhu	r2,-12(fp)
   1849c:	10000626 	beq	r2,zero,184b8 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   184a0:	e0bfff17 	ldw	r2,-4(fp)
   184a4:	1080020b 	ldhu	r2,8(r2)
   184a8:	10bfffc4 	addi	r2,r2,-1
   184ac:	1007883a 	mov	r3,r2
   184b0:	e0bfff17 	ldw	r2,-4(fp)
   184b4:	10c0020d 	sth	r3,8(r2)
   184b8:	e0bffb17 	ldw	r2,-20(fp)
   184bc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   184c0:	e0bffc17 	ldw	r2,-16(fp)
   184c4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   184c8:	e0bffd0b 	ldhu	r2,-12(fp)
}
   184cc:	e037883a 	mov	sp,fp
   184d0:	df000017 	ldw	fp,0(sp)
   184d4:	dec00104 	addi	sp,sp,4
   184d8:	f800283a 	ret

000184dc <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   184dc:	defff904 	addi	sp,sp,-28
   184e0:	dfc00615 	stw	ra,24(sp)
   184e4:	df000515 	stw	fp,20(sp)
   184e8:	df000504 	addi	fp,sp,20
   184ec:	2005883a 	mov	r2,r4
   184f0:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   184f4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   184f8:	d0a82703 	ldbu	r2,-24420(gp)
   184fc:	10803fcc 	andi	r2,r2,255
   18500:	10000226 	beq	r2,zero,1850c <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   18504:	0005883a 	mov	r2,zero
   18508:	00002506 	br	185a0 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1850c:	0005303a 	rdctl	r2,status
   18510:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18514:	e0fffe17 	ldw	r3,-8(fp)
   18518:	00bfff84 	movi	r2,-2
   1851c:	1884703a 	and	r2,r3,r2
   18520:	1001703a 	wrctl	status,r2
  
  return context;
   18524:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   18528:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   1852c:	d0a82617 	ldw	r2,-24424(gp)
   18530:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   18534:	d0a82617 	ldw	r2,-24424(gp)
   18538:	10000326 	beq	r2,zero,18548 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   1853c:	d0a82617 	ldw	r2,-24424(gp)
   18540:	10800117 	ldw	r2,4(r2)
   18544:	d0a82615 	stw	r2,-24424(gp)
   18548:	e0bffb17 	ldw	r2,-20(fp)
   1854c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18550:	e0bffc17 	ldw	r2,-16(fp)
   18554:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   18558:	e0bffd17 	ldw	r2,-12(fp)
   1855c:	10000f26 	beq	r2,zero,1859c <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   18560:	e0bffd17 	ldw	r2,-12(fp)
   18564:	00c000c4 	movi	r3,3
   18568:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   1856c:	e0bffd17 	ldw	r2,-12(fp)
   18570:	e0ffff0b 	ldhu	r3,-4(fp)
   18574:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   18578:	e0bffd17 	ldw	r2,-12(fp)
   1857c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   18580:	e0bffd17 	ldw	r2,-12(fp)
   18584:	00c00fc4 	movi	r3,63
   18588:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   1858c:	e0bffd17 	ldw	r2,-12(fp)
   18590:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   18594:	e13ffd17 	ldw	r4,-12(fp)
   18598:	00147b00 	call	147b0 <OS_EventWaitListInit>
    }
    return (pevent);
   1859c:	e0bffd17 	ldw	r2,-12(fp)
}
   185a0:	e037883a 	mov	sp,fp
   185a4:	dfc00117 	ldw	ra,4(sp)
   185a8:	df000017 	ldw	fp,0(sp)
   185ac:	dec00204 	addi	sp,sp,8
   185b0:	f800283a 	ret

000185b4 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   185b4:	defff304 	addi	sp,sp,-52
   185b8:	dfc00c15 	stw	ra,48(sp)
   185bc:	df000b15 	stw	fp,44(sp)
   185c0:	df000b04 	addi	fp,sp,44
   185c4:	e13ffd15 	stw	r4,-12(fp)
   185c8:	2805883a 	mov	r2,r5
   185cc:	e1bfff15 	stw	r6,-4(fp)
   185d0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   185d4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   185d8:	e0bfff17 	ldw	r2,-4(fp)
   185dc:	1000021e 	bne	r2,zero,185e8 <OSSemDel+0x34>
        return (pevent);
   185e0:	e0bffd17 	ldw	r2,-12(fp)
   185e4:	00007e06 	br	187e0 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   185e8:	e0bffd17 	ldw	r2,-12(fp)
   185ec:	1000051e 	bne	r2,zero,18604 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   185f0:	e0bfff17 	ldw	r2,-4(fp)
   185f4:	00c00104 	movi	r3,4
   185f8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   185fc:	e0bffd17 	ldw	r2,-12(fp)
   18600:	00007706 	br	187e0 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   18604:	e0bffd17 	ldw	r2,-12(fp)
   18608:	10800003 	ldbu	r2,0(r2)
   1860c:	10803fcc 	andi	r2,r2,255
   18610:	108000e0 	cmpeqi	r2,r2,3
   18614:	1000051e 	bne	r2,zero,1862c <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   18618:	e0bfff17 	ldw	r2,-4(fp)
   1861c:	00c00044 	movi	r3,1
   18620:	10c00005 	stb	r3,0(r2)
        return (pevent);
   18624:	e0bffd17 	ldw	r2,-12(fp)
   18628:	00006d06 	br	187e0 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1862c:	d0a82703 	ldbu	r2,-24420(gp)
   18630:	10803fcc 	andi	r2,r2,255
   18634:	10000526 	beq	r2,zero,1864c <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   18638:	e0bfff17 	ldw	r2,-4(fp)
   1863c:	00c003c4 	movi	r3,15
   18640:	10c00005 	stb	r3,0(r2)
        return (pevent);
   18644:	e0bffd17 	ldw	r2,-12(fp)
   18648:	00006506 	br	187e0 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1864c:	0005303a 	rdctl	r2,status
   18650:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18654:	e0fffc17 	ldw	r3,-16(fp)
   18658:	00bfff84 	movi	r2,-2
   1865c:	1884703a 	and	r2,r3,r2
   18660:	1001703a 	wrctl	status,r2
  
  return context;
   18664:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   18668:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   1866c:	e0bffd17 	ldw	r2,-12(fp)
   18670:	10800283 	ldbu	r2,10(r2)
   18674:	10803fcc 	andi	r2,r2,255
   18678:	10000326 	beq	r2,zero,18688 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1867c:	00800044 	movi	r2,1
   18680:	e0bff505 	stb	r2,-44(fp)
   18684:	00000106 	br	1868c <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   18688:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   1868c:	e0bffe03 	ldbu	r2,-8(fp)
   18690:	10000326 	beq	r2,zero,186a0 <OSSemDel+0xec>
   18694:	10800060 	cmpeqi	r2,r2,1
   18698:	1000281e 	bne	r2,zero,1873c <OSSemDel+0x188>
   1869c:	00004506 	br	187b4 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   186a0:	e0bff503 	ldbu	r2,-44(fp)
   186a4:	1000161e 	bne	r2,zero,18700 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   186a8:	e0bffd17 	ldw	r2,-12(fp)
   186ac:	00c00fc4 	movi	r3,63
   186b0:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   186b4:	e0bffd17 	ldw	r2,-12(fp)
   186b8:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   186bc:	e0bffd17 	ldw	r2,-12(fp)
   186c0:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   186c4:	d0e82617 	ldw	r3,-24424(gp)
   186c8:	e0bffd17 	ldw	r2,-12(fp)
   186cc:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   186d0:	e0bffd17 	ldw	r2,-12(fp)
   186d4:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   186d8:	e0bffd17 	ldw	r2,-12(fp)
   186dc:	d0a82615 	stw	r2,-24424(gp)
   186e0:	e0bff717 	ldw	r2,-36(fp)
   186e4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   186e8:	e0bff817 	ldw	r2,-32(fp)
   186ec:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   186f0:	e0bfff17 	ldw	r2,-4(fp)
   186f4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   186f8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   186fc:	00003706 	br	187dc <OSSemDel+0x228>
   18700:	e0bff717 	ldw	r2,-36(fp)
   18704:	e0bff915 	stw	r2,-28(fp)
   18708:	e0bff917 	ldw	r2,-28(fp)
   1870c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   18710:	e0bfff17 	ldw	r2,-4(fp)
   18714:	00c01244 	movi	r3,73
   18718:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   1871c:	e0bffd17 	ldw	r2,-12(fp)
   18720:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   18724:	00002d06 	br	187dc <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   18728:	000f883a 	mov	r7,zero
   1872c:	01800044 	movi	r6,1
   18730:	000b883a 	mov	r5,zero
   18734:	e13ffd17 	ldw	r4,-12(fp)
   18738:	00142000 	call	14200 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   1873c:	e0bffd17 	ldw	r2,-12(fp)
   18740:	10800283 	ldbu	r2,10(r2)
   18744:	10803fcc 	andi	r2,r2,255
   18748:	103ff71e 	bne	r2,zero,18728 <OSSemDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   1874c:	e0bffd17 	ldw	r2,-12(fp)
   18750:	00c00fc4 	movi	r3,63
   18754:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   18758:	e0bffd17 	ldw	r2,-12(fp)
   1875c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   18760:	e0bffd17 	ldw	r2,-12(fp)
   18764:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   18768:	d0e82617 	ldw	r3,-24424(gp)
   1876c:	e0bffd17 	ldw	r2,-12(fp)
   18770:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   18774:	e0bffd17 	ldw	r2,-12(fp)
   18778:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   1877c:	e0bffd17 	ldw	r2,-12(fp)
   18780:	d0a82615 	stw	r2,-24424(gp)
   18784:	e0bff717 	ldw	r2,-36(fp)
   18788:	e0bffa15 	stw	r2,-24(fp)
   1878c:	e0bffa17 	ldw	r2,-24(fp)
   18790:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   18794:	e0bff503 	ldbu	r2,-44(fp)
   18798:	10800058 	cmpnei	r2,r2,1
   1879c:	1000011e 	bne	r2,zero,187a4 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   187a0:	0014c4c0 	call	14c4c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   187a4:	e0bfff17 	ldw	r2,-4(fp)
   187a8:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   187ac:	e03ff615 	stw	zero,-40(fp)
             break;
   187b0:	00000a06 	br	187dc <OSSemDel+0x228>
   187b4:	e0bff717 	ldw	r2,-36(fp)
   187b8:	e0bffb15 	stw	r2,-20(fp)
   187bc:	e0bffb17 	ldw	r2,-20(fp)
   187c0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   187c4:	e0bfff17 	ldw	r2,-4(fp)
   187c8:	00c001c4 	movi	r3,7
   187cc:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   187d0:	e0bffd17 	ldw	r2,-12(fp)
   187d4:	e0bff615 	stw	r2,-40(fp)
             break;
   187d8:	0001883a 	nop
    }
    return (pevent_return);
   187dc:	e0bff617 	ldw	r2,-40(fp)
}
   187e0:	e037883a 	mov	sp,fp
   187e4:	dfc00117 	ldw	ra,4(sp)
   187e8:	df000017 	ldw	fp,0(sp)
   187ec:	dec00204 	addi	sp,sp,8
   187f0:	f800283a 	ret

000187f4 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   187f4:	defff504 	addi	sp,sp,-44
   187f8:	dfc00a15 	stw	ra,40(sp)
   187fc:	df000915 	stw	fp,36(sp)
   18800:	df000904 	addi	fp,sp,36
   18804:	e13ffd15 	stw	r4,-12(fp)
   18808:	2805883a 	mov	r2,r5
   1880c:	e1bfff15 	stw	r6,-4(fp)
   18810:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18814:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   18818:	e0bfff17 	ldw	r2,-4(fp)
   1881c:	10007226 	beq	r2,zero,189e8 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   18820:	e0bffd17 	ldw	r2,-12(fp)
   18824:	1000041e 	bne	r2,zero,18838 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   18828:	e0bfff17 	ldw	r2,-4(fp)
   1882c:	00c00104 	movi	r3,4
   18830:	10c00005 	stb	r3,0(r2)
        return;
   18834:	00006d06 	br	189ec <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   18838:	e0bffd17 	ldw	r2,-12(fp)
   1883c:	10800003 	ldbu	r2,0(r2)
   18840:	10803fcc 	andi	r2,r2,255
   18844:	108000e0 	cmpeqi	r2,r2,3
   18848:	1000041e 	bne	r2,zero,1885c <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   1884c:	e0bfff17 	ldw	r2,-4(fp)
   18850:	00c00044 	movi	r3,1
   18854:	10c00005 	stb	r3,0(r2)
        return;
   18858:	00006406 	br	189ec <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   1885c:	d0a82703 	ldbu	r2,-24420(gp)
   18860:	10803fcc 	andi	r2,r2,255
   18864:	10000426 	beq	r2,zero,18878 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   18868:	e0bfff17 	ldw	r2,-4(fp)
   1886c:	00c00084 	movi	r3,2
   18870:	10c00005 	stb	r3,0(r2)
        return;
   18874:	00005d06 	br	189ec <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   18878:	d0a81903 	ldbu	r2,-24476(gp)
   1887c:	10803fcc 	andi	r2,r2,255
   18880:	10000426 	beq	r2,zero,18894 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   18884:	e0bfff17 	ldw	r2,-4(fp)
   18888:	00c00344 	movi	r3,13
   1888c:	10c00005 	stb	r3,0(r2)
        return;
   18890:	00005606 	br	189ec <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18894:	0005303a 	rdctl	r2,status
   18898:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1889c:	e0fffc17 	ldw	r3,-16(fp)
   188a0:	00bfff84 	movi	r2,-2
   188a4:	1884703a 	and	r2,r3,r2
   188a8:	1001703a 	wrctl	status,r2
  
  return context;
   188ac:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   188b0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   188b4:	e0bffd17 	ldw	r2,-12(fp)
   188b8:	1080020b 	ldhu	r2,8(r2)
   188bc:	10bfffcc 	andi	r2,r2,65535
   188c0:	10000d26 	beq	r2,zero,188f8 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   188c4:	e0bffd17 	ldw	r2,-12(fp)
   188c8:	1080020b 	ldhu	r2,8(r2)
   188cc:	10bfffc4 	addi	r2,r2,-1
   188d0:	1007883a 	mov	r3,r2
   188d4:	e0bffd17 	ldw	r2,-12(fp)
   188d8:	10c0020d 	sth	r3,8(r2)
   188dc:	e0bff717 	ldw	r2,-36(fp)
   188e0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   188e4:	e0bff817 	ldw	r2,-32(fp)
   188e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   188ec:	e0bfff17 	ldw	r2,-4(fp)
   188f0:	10000005 	stb	zero,0(r2)
        return;
   188f4:	00003d06 	br	189ec <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   188f8:	d0a82817 	ldw	r2,-24416(gp)
   188fc:	d0e82817 	ldw	r3,-24416(gp)
   18900:	18c00c03 	ldbu	r3,48(r3)
   18904:	18c00054 	ori	r3,r3,1
   18908:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1890c:	d0a82817 	ldw	r2,-24416(gp)
   18910:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   18914:	d0a82817 	ldw	r2,-24416(gp)
   18918:	e0fffe0b 	ldhu	r3,-8(fp)
   1891c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   18920:	e13ffd17 	ldw	r4,-12(fp)
   18924:	00143980 	call	14398 <OS_EventTaskWait>
   18928:	e0bff717 	ldw	r2,-36(fp)
   1892c:	e0bffb15 	stw	r2,-20(fp)
   18930:	e0bffb17 	ldw	r2,-20(fp)
   18934:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   18938:	0014c4c0 	call	14c4c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1893c:	0005303a 	rdctl	r2,status
   18940:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18944:	e0fff917 	ldw	r3,-28(fp)
   18948:	00bfff84 	movi	r2,-2
   1894c:	1884703a 	and	r2,r3,r2
   18950:	1001703a 	wrctl	status,r2
  
  return context;
   18954:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   18958:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   1895c:	d0a82817 	ldw	r2,-24416(gp)
   18960:	10800c43 	ldbu	r2,49(r2)
   18964:	10803fcc 	andi	r2,r2,255
   18968:	10000326 	beq	r2,zero,18978 <OSSemPend+0x184>
   1896c:	108000a0 	cmpeqi	r2,r2,2
   18970:	1000041e 	bne	r2,zero,18984 <OSSemPend+0x190>
   18974:	00000706 	br	18994 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   18978:	e0bfff17 	ldw	r2,-4(fp)
   1897c:	10000005 	stb	zero,0(r2)
             break;
   18980:	00000c06 	br	189b4 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   18984:	e0bfff17 	ldw	r2,-4(fp)
   18988:	00c00384 	movi	r3,14
   1898c:	10c00005 	stb	r3,0(r2)
             break;
   18990:	00000806 	br	189b4 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   18994:	d0a82817 	ldw	r2,-24416(gp)
   18998:	e17ffd17 	ldw	r5,-12(fp)
   1899c:	1009883a 	mov	r4,r2
   189a0:	00145f80 	call	145f8 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   189a4:	e0bfff17 	ldw	r2,-4(fp)
   189a8:	00c00284 	movi	r3,10
   189ac:	10c00005 	stb	r3,0(r2)
             break;
   189b0:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   189b4:	d0a82817 	ldw	r2,-24416(gp)
   189b8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   189bc:	d0a82817 	ldw	r2,-24416(gp)
   189c0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   189c4:	d0a82817 	ldw	r2,-24416(gp)
   189c8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   189cc:	d0a82817 	ldw	r2,-24416(gp)
   189d0:	10000815 	stw	zero,32(r2)
   189d4:	e0bff717 	ldw	r2,-36(fp)
   189d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   189dc:	e0bffa17 	ldw	r2,-24(fp)
   189e0:	1001703a 	wrctl	status,r2
   189e4:	00000106 	br	189ec <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   189e8:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
   189ec:	e037883a 	mov	sp,fp
   189f0:	dfc00117 	ldw	ra,4(sp)
   189f4:	df000017 	ldw	fp,0(sp)
   189f8:	dec00204 	addi	sp,sp,8
   189fc:	f800283a 	ret

00018a00 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   18a00:	defff604 	addi	sp,sp,-40
   18a04:	dfc00915 	stw	ra,36(sp)
   18a08:	df000815 	stw	fp,32(sp)
   18a0c:	df000804 	addi	fp,sp,32
   18a10:	e13ffd15 	stw	r4,-12(fp)
   18a14:	2805883a 	mov	r2,r5
   18a18:	e1bfff15 	stw	r6,-4(fp)
   18a1c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18a20:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   18a24:	e0bfff17 	ldw	r2,-4(fp)
   18a28:	1000021e 	bne	r2,zero,18a34 <OSSemPendAbort+0x34>
        return (0);
   18a2c:	0005883a 	mov	r2,zero
   18a30:	00004906 	br	18b58 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   18a34:	e0bffd17 	ldw	r2,-12(fp)
   18a38:	1000051e 	bne	r2,zero,18a50 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   18a3c:	e0bfff17 	ldw	r2,-4(fp)
   18a40:	00c00104 	movi	r3,4
   18a44:	10c00005 	stb	r3,0(r2)
        return (0);
   18a48:	0005883a 	mov	r2,zero
   18a4c:	00004206 	br	18b58 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   18a50:	e0bffd17 	ldw	r2,-12(fp)
   18a54:	10800003 	ldbu	r2,0(r2)
   18a58:	10803fcc 	andi	r2,r2,255
   18a5c:	108000e0 	cmpeqi	r2,r2,3
   18a60:	1000051e 	bne	r2,zero,18a78 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   18a64:	e0bfff17 	ldw	r2,-4(fp)
   18a68:	00c00044 	movi	r3,1
   18a6c:	10c00005 	stb	r3,0(r2)
        return (0);
   18a70:	0005883a 	mov	r2,zero
   18a74:	00003806 	br	18b58 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18a78:	0005303a 	rdctl	r2,status
   18a7c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18a80:	e0fffc17 	ldw	r3,-16(fp)
   18a84:	00bfff84 	movi	r2,-2
   18a88:	1884703a 	and	r2,r3,r2
   18a8c:	1001703a 	wrctl	status,r2
  
  return context;
   18a90:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   18a94:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   18a98:	e0bffd17 	ldw	r2,-12(fp)
   18a9c:	10800283 	ldbu	r2,10(r2)
   18aa0:	10803fcc 	andi	r2,r2,255
   18aa4:	10002526 	beq	r2,zero,18b3c <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   18aa8:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   18aac:	e0bffe03 	ldbu	r2,-8(fp)
   18ab0:	10800060 	cmpeqi	r2,r2,1
   18ab4:	10000e26 	beq	r2,zero,18af0 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   18ab8:	00000806 	br	18adc <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   18abc:	01c00084 	movi	r7,2
   18ac0:	01800044 	movi	r6,1
   18ac4:	000b883a 	mov	r5,zero
   18ac8:	e13ffd17 	ldw	r4,-12(fp)
   18acc:	00142000 	call	14200 <OS_EventTaskRdy>
                     nbr_tasks++;
   18ad0:	e0bff803 	ldbu	r2,-32(fp)
   18ad4:	10800044 	addi	r2,r2,1
   18ad8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   18adc:	e0bffd17 	ldw	r2,-12(fp)
   18ae0:	10800283 	ldbu	r2,10(r2)
   18ae4:	10803fcc 	andi	r2,r2,255
   18ae8:	103ff41e 	bne	r2,zero,18abc <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   18aec:	00000906 	br	18b14 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   18af0:	01c00084 	movi	r7,2
   18af4:	01800044 	movi	r6,1
   18af8:	000b883a 	mov	r5,zero
   18afc:	e13ffd17 	ldw	r4,-12(fp)
   18b00:	00142000 	call	14200 <OS_EventTaskRdy>
                 nbr_tasks++;
   18b04:	e0bff803 	ldbu	r2,-32(fp)
   18b08:	10800044 	addi	r2,r2,1
   18b0c:	e0bff805 	stb	r2,-32(fp)
                 break;
   18b10:	0001883a 	nop
   18b14:	e0bff917 	ldw	r2,-28(fp)
   18b18:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18b1c:	e0bffa17 	ldw	r2,-24(fp)
   18b20:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   18b24:	0014c4c0 	call	14c4c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   18b28:	e0bfff17 	ldw	r2,-4(fp)
   18b2c:	00c00384 	movi	r3,14
   18b30:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   18b34:	e0bff803 	ldbu	r2,-32(fp)
   18b38:	00000706 	br	18b58 <OSSemPendAbort+0x158>
   18b3c:	e0bff917 	ldw	r2,-28(fp)
   18b40:	e0bffb15 	stw	r2,-20(fp)
   18b44:	e0bffb17 	ldw	r2,-20(fp)
   18b48:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   18b4c:	e0bfff17 	ldw	r2,-4(fp)
   18b50:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   18b54:	0005883a 	mov	r2,zero
}
   18b58:	e037883a 	mov	sp,fp
   18b5c:	dfc00117 	ldw	ra,4(sp)
   18b60:	df000017 	ldw	fp,0(sp)
   18b64:	dec00204 	addi	sp,sp,8
   18b68:	f800283a 	ret

00018b6c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   18b6c:	defff804 	addi	sp,sp,-32
   18b70:	dfc00715 	stw	ra,28(sp)
   18b74:	df000615 	stw	fp,24(sp)
   18b78:	df000604 	addi	fp,sp,24
   18b7c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18b80:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   18b84:	e0bfff17 	ldw	r2,-4(fp)
   18b88:	1000021e 	bne	r2,zero,18b94 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   18b8c:	00800104 	movi	r2,4
   18b90:	00003506 	br	18c68 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   18b94:	e0bfff17 	ldw	r2,-4(fp)
   18b98:	10800003 	ldbu	r2,0(r2)
   18b9c:	10803fcc 	andi	r2,r2,255
   18ba0:	108000e0 	cmpeqi	r2,r2,3
   18ba4:	1000021e 	bne	r2,zero,18bb0 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   18ba8:	00800044 	movi	r2,1
   18bac:	00002e06 	br	18c68 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18bb0:	0005303a 	rdctl	r2,status
   18bb4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18bb8:	e0fffe17 	ldw	r3,-8(fp)
   18bbc:	00bfff84 	movi	r2,-2
   18bc0:	1884703a 	and	r2,r3,r2
   18bc4:	1001703a 	wrctl	status,r2
  
  return context;
   18bc8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   18bcc:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   18bd0:	e0bfff17 	ldw	r2,-4(fp)
   18bd4:	10800283 	ldbu	r2,10(r2)
   18bd8:	10803fcc 	andi	r2,r2,255
   18bdc:	10000c26 	beq	r2,zero,18c10 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   18be0:	000f883a 	mov	r7,zero
   18be4:	01800044 	movi	r6,1
   18be8:	000b883a 	mov	r5,zero
   18bec:	e13fff17 	ldw	r4,-4(fp)
   18bf0:	00142000 	call	14200 <OS_EventTaskRdy>
   18bf4:	e0bffa17 	ldw	r2,-24(fp)
   18bf8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18bfc:	e0bffb17 	ldw	r2,-20(fp)
   18c00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   18c04:	0014c4c0 	call	14c4c <OS_Sched>
        return (OS_ERR_NONE);
   18c08:	0005883a 	mov	r2,zero
   18c0c:	00001606 	br	18c68 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   18c10:	e0bfff17 	ldw	r2,-4(fp)
   18c14:	1080020b 	ldhu	r2,8(r2)
   18c18:	10ffffcc 	andi	r3,r2,65535
   18c1c:	00bfffd4 	movui	r2,65535
   18c20:	18800c26 	beq	r3,r2,18c54 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   18c24:	e0bfff17 	ldw	r2,-4(fp)
   18c28:	1080020b 	ldhu	r2,8(r2)
   18c2c:	10800044 	addi	r2,r2,1
   18c30:	1007883a 	mov	r3,r2
   18c34:	e0bfff17 	ldw	r2,-4(fp)
   18c38:	10c0020d 	sth	r3,8(r2)
   18c3c:	e0bffa17 	ldw	r2,-24(fp)
   18c40:	e0bffc15 	stw	r2,-16(fp)
   18c44:	e0bffc17 	ldw	r2,-16(fp)
   18c48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   18c4c:	0005883a 	mov	r2,zero
   18c50:	00000506 	br	18c68 <OSSemPost+0xfc>
   18c54:	e0bffa17 	ldw	r2,-24(fp)
   18c58:	e0bffd15 	stw	r2,-12(fp)
   18c5c:	e0bffd17 	ldw	r2,-12(fp)
   18c60:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   18c64:	00800c84 	movi	r2,50
}
   18c68:	e037883a 	mov	sp,fp
   18c6c:	dfc00117 	ldw	ra,4(sp)
   18c70:	df000017 	ldw	fp,0(sp)
   18c74:	dec00204 	addi	sp,sp,8
   18c78:	f800283a 	ret

00018c7c <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   18c7c:	defff704 	addi	sp,sp,-36
   18c80:	df000815 	stw	fp,32(sp)
   18c84:	df000804 	addi	fp,sp,32
   18c88:	e13ffe15 	stw	r4,-8(fp)
   18c8c:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   18c90:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   18c94:	e0bffe17 	ldw	r2,-8(fp)
   18c98:	1000021e 	bne	r2,zero,18ca4 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   18c9c:	00800104 	movi	r2,4
   18ca0:	00003606 	br	18d7c <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   18ca4:	e0bfff17 	ldw	r2,-4(fp)
   18ca8:	1000021e 	bne	r2,zero,18cb4 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   18cac:	00800244 	movi	r2,9
   18cb0:	00003206 	br	18d7c <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   18cb4:	e0bffe17 	ldw	r2,-8(fp)
   18cb8:	10800003 	ldbu	r2,0(r2)
   18cbc:	10803fcc 	andi	r2,r2,255
   18cc0:	108000e0 	cmpeqi	r2,r2,3
   18cc4:	1000021e 	bne	r2,zero,18cd0 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   18cc8:	00800044 	movi	r2,1
   18ccc:	00002b06 	br	18d7c <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18cd0:	0005303a 	rdctl	r2,status
   18cd4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18cd8:	e0fffd17 	ldw	r3,-12(fp)
   18cdc:	00bfff84 	movi	r2,-2
   18ce0:	1884703a 	and	r2,r3,r2
   18ce4:	1001703a 	wrctl	status,r2
  
  return context;
   18ce8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   18cec:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   18cf0:	e0bffe17 	ldw	r2,-8(fp)
   18cf4:	10c00283 	ldbu	r3,10(r2)
   18cf8:	e0bfff17 	ldw	r2,-4(fp)
   18cfc:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   18d00:	e0bffe17 	ldw	r2,-8(fp)
   18d04:	108002c4 	addi	r2,r2,11
   18d08:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   18d0c:	e0bfff17 	ldw	r2,-4(fp)
   18d10:	10800084 	addi	r2,r2,2
   18d14:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   18d18:	e03ffa05 	stb	zero,-24(fp)
   18d1c:	00000b06 	br	18d4c <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   18d20:	e0bff917 	ldw	r2,-28(fp)
   18d24:	10c00044 	addi	r3,r2,1
   18d28:	e0fff915 	stw	r3,-28(fp)
   18d2c:	e0fff817 	ldw	r3,-32(fp)
   18d30:	19000044 	addi	r4,r3,1
   18d34:	e13ff815 	stw	r4,-32(fp)
   18d38:	18c00003 	ldbu	r3,0(r3)
   18d3c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   18d40:	e0bffa03 	ldbu	r2,-24(fp)
   18d44:	10800044 	addi	r2,r2,1
   18d48:	e0bffa05 	stb	r2,-24(fp)
   18d4c:	e0bffa03 	ldbu	r2,-24(fp)
   18d50:	108000f0 	cmpltui	r2,r2,3
   18d54:	103ff21e 	bne	r2,zero,18d20 <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   18d58:	e0bffe17 	ldw	r2,-8(fp)
   18d5c:	10c0020b 	ldhu	r3,8(r2)
   18d60:	e0bfff17 	ldw	r2,-4(fp)
   18d64:	10c0000d 	sth	r3,0(r2)
   18d68:	e0bffb17 	ldw	r2,-20(fp)
   18d6c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18d70:	e0bffc17 	ldw	r2,-16(fp)
   18d74:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18d78:	0005883a 	mov	r2,zero
}
   18d7c:	e037883a 	mov	sp,fp
   18d80:	df000017 	ldw	fp,0(sp)
   18d84:	dec00104 	addi	sp,sp,4
   18d88:	f800283a 	ret

00018d8c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   18d8c:	defff904 	addi	sp,sp,-28
   18d90:	df000615 	stw	fp,24(sp)
   18d94:	df000604 	addi	fp,sp,24
   18d98:	e13ffd15 	stw	r4,-12(fp)
   18d9c:	2805883a 	mov	r2,r5
   18da0:	e1bfff15 	stw	r6,-4(fp)
   18da4:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18da8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   18dac:	e0bfff17 	ldw	r2,-4(fp)
   18db0:	10003126 	beq	r2,zero,18e78 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   18db4:	e0bffd17 	ldw	r2,-12(fp)
   18db8:	1000041e 	bne	r2,zero,18dcc <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   18dbc:	e0bfff17 	ldw	r2,-4(fp)
   18dc0:	00c00104 	movi	r3,4
   18dc4:	10c00005 	stb	r3,0(r2)
        return;
   18dc8:	00002c06 	br	18e7c <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   18dcc:	e0bffd17 	ldw	r2,-12(fp)
   18dd0:	10800003 	ldbu	r2,0(r2)
   18dd4:	10803fcc 	andi	r2,r2,255
   18dd8:	108000e0 	cmpeqi	r2,r2,3
   18ddc:	1000041e 	bne	r2,zero,18df0 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
   18de0:	e0bfff17 	ldw	r2,-4(fp)
   18de4:	00c00044 	movi	r3,1
   18de8:	10c00005 	stb	r3,0(r2)
        return;
   18dec:	00002306 	br	18e7c <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18df0:	0005303a 	rdctl	r2,status
   18df4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18df8:	e0fffc17 	ldw	r3,-16(fp)
   18dfc:	00bfff84 	movi	r2,-2
   18e00:	1884703a 	and	r2,r3,r2
   18e04:	1001703a 	wrctl	status,r2
  
  return context;
   18e08:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   18e0c:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   18e10:	e0bfff17 	ldw	r2,-4(fp)
   18e14:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   18e18:	e0bffd17 	ldw	r2,-12(fp)
   18e1c:	1080020b 	ldhu	r2,8(r2)
   18e20:	10bfffcc 	andi	r2,r2,65535
   18e24:	10000426 	beq	r2,zero,18e38 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   18e28:	e0bffd17 	ldw	r2,-12(fp)
   18e2c:	e0fffe0b 	ldhu	r3,-8(fp)
   18e30:	10c0020d 	sth	r3,8(r2)
   18e34:	00000b06 	br	18e64 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   18e38:	e0bffd17 	ldw	r2,-12(fp)
   18e3c:	10800283 	ldbu	r2,10(r2)
   18e40:	10803fcc 	andi	r2,r2,255
   18e44:	1000041e 	bne	r2,zero,18e58 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   18e48:	e0bffd17 	ldw	r2,-12(fp)
   18e4c:	e0fffe0b 	ldhu	r3,-8(fp)
   18e50:	10c0020d 	sth	r3,8(r2)
   18e54:	00000306 	br	18e64 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   18e58:	e0bfff17 	ldw	r2,-4(fp)
   18e5c:	00c01244 	movi	r3,73
   18e60:	10c00005 	stb	r3,0(r2)
   18e64:	e0bffa17 	ldw	r2,-24(fp)
   18e68:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18e6c:	e0bffb17 	ldw	r2,-20(fp)
   18e70:	1001703a 	wrctl	status,r2
   18e74:	00000106 	br	18e7c <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   18e78:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
   18e7c:	e037883a 	mov	sp,fp
   18e80:	df000017 	ldw	fp,0(sp)
   18e84:	dec00104 	addi	sp,sp,4
   18e88:	f800283a 	ret

00018e8c <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   18e8c:	defff104 	addi	sp,sp,-60
   18e90:	dfc00e15 	stw	ra,56(sp)
   18e94:	df000d15 	stw	fp,52(sp)
   18e98:	df000d04 	addi	fp,sp,52
   18e9c:	2007883a 	mov	r3,r4
   18ea0:	2805883a 	mov	r2,r5
   18ea4:	e0fffe05 	stb	r3,-8(fp)
   18ea8:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   18eac:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   18eb0:	e0bffe03 	ldbu	r2,-8(fp)
   18eb4:	10800530 	cmpltui	r2,r2,20
   18eb8:	1000051e 	bne	r2,zero,18ed0 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   18ebc:	e0bffe03 	ldbu	r2,-8(fp)
   18ec0:	10803fe0 	cmpeqi	r2,r2,255
   18ec4:	1000021e 	bne	r2,zero,18ed0 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   18ec8:	00800a84 	movi	r2,42
   18ecc:	00012606 	br	19368 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   18ed0:	e0bfff03 	ldbu	r2,-4(fp)
   18ed4:	10800530 	cmpltui	r2,r2,20
   18ed8:	1000021e 	bne	r2,zero,18ee4 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   18edc:	00800a84 	movi	r2,42
   18ee0:	00012106 	br	19368 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18ee4:	0005303a 	rdctl	r2,status
   18ee8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18eec:	e0fffd17 	ldw	r3,-12(fp)
   18ef0:	00bfff84 	movi	r2,-2
   18ef4:	1884703a 	and	r2,r3,r2
   18ef8:	1001703a 	wrctl	status,r2
  
  return context;
   18efc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   18f00:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   18f04:	e0ffff03 	ldbu	r3,-4(fp)
   18f08:	008000f4 	movhi	r2,3
   18f0c:	1092f304 	addi	r2,r2,19404
   18f10:	18c7883a 	add	r3,r3,r3
   18f14:	18c7883a 	add	r3,r3,r3
   18f18:	10c5883a 	add	r2,r2,r3
   18f1c:	10800017 	ldw	r2,0(r2)
   18f20:	10000626 	beq	r2,zero,18f3c <OSTaskChangePrio+0xb0>
   18f24:	e0bff517 	ldw	r2,-44(fp)
   18f28:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18f2c:	e0bff617 	ldw	r2,-40(fp)
   18f30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   18f34:	00800a04 	movi	r2,40
   18f38:	00010b06 	br	19368 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   18f3c:	e0bffe03 	ldbu	r2,-8(fp)
   18f40:	10803fd8 	cmpnei	r2,r2,255
   18f44:	1000031e 	bne	r2,zero,18f54 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   18f48:	d0a82817 	ldw	r2,-24416(gp)
   18f4c:	10800c83 	ldbu	r2,50(r2)
   18f50:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   18f54:	e0fffe03 	ldbu	r3,-8(fp)
   18f58:	008000f4 	movhi	r2,3
   18f5c:	1092f304 	addi	r2,r2,19404
   18f60:	18c7883a 	add	r3,r3,r3
   18f64:	18c7883a 	add	r3,r3,r3
   18f68:	10c5883a 	add	r2,r2,r3
   18f6c:	10800017 	ldw	r2,0(r2)
   18f70:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   18f74:	e0bff817 	ldw	r2,-32(fp)
   18f78:	1000061e 	bne	r2,zero,18f94 <OSTaskChangePrio+0x108>
   18f7c:	e0bff517 	ldw	r2,-44(fp)
   18f80:	e0bff715 	stw	r2,-36(fp)
   18f84:	e0bff717 	ldw	r2,-36(fp)
   18f88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   18f8c:	00800a44 	movi	r2,41
   18f90:	0000f506 	br	19368 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   18f94:	e0bff817 	ldw	r2,-32(fp)
   18f98:	10800058 	cmpnei	r2,r2,1
   18f9c:	1000061e 	bne	r2,zero,18fb8 <OSTaskChangePrio+0x12c>
   18fa0:	e0bff517 	ldw	r2,-44(fp)
   18fa4:	e0bff915 	stw	r2,-28(fp)
   18fa8:	e0bff917 	ldw	r2,-28(fp)
   18fac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   18fb0:	008010c4 	movi	r2,67
   18fb4:	0000ec06 	br	19368 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   18fb8:	e0bfff03 	ldbu	r2,-4(fp)
   18fbc:	1004d0fa 	srli	r2,r2,3
   18fc0:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   18fc4:	e0bfff03 	ldbu	r2,-4(fp)
   18fc8:	108001cc 	andi	r2,r2,7
   18fcc:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
   18fd0:	e0bffb03 	ldbu	r2,-20(fp)
   18fd4:	00c00044 	movi	r3,1
   18fd8:	1884983a 	sll	r2,r3,r2
   18fdc:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
   18fe0:	e0bffb43 	ldbu	r2,-19(fp)
   18fe4:	00c00044 	movi	r3,1
   18fe8:	1884983a 	sll	r2,r3,r2
   18fec:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   18ff0:	e0fffe03 	ldbu	r3,-8(fp)
   18ff4:	008000f4 	movhi	r2,3
   18ff8:	1092f304 	addi	r2,r2,19404
   18ffc:	18c7883a 	add	r3,r3,r3
   19000:	18c7883a 	add	r3,r3,r3
   19004:	10c5883a 	add	r2,r2,r3
   19008:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   1900c:	e0ffff03 	ldbu	r3,-4(fp)
   19010:	008000f4 	movhi	r2,3
   19014:	1092f304 	addi	r2,r2,19404
   19018:	18c7883a 	add	r3,r3,r3
   1901c:	18c7883a 	add	r3,r3,r3
   19020:	10c5883a 	add	r2,r2,r3
   19024:	e0fff817 	ldw	r3,-32(fp)
   19028:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   1902c:	e0bff817 	ldw	r2,-32(fp)
   19030:	10800d03 	ldbu	r2,52(r2)
   19034:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
   19038:	e0bff817 	ldw	r2,-32(fp)
   1903c:	10800d83 	ldbu	r2,54(r2)
   19040:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   19044:	e0bff817 	ldw	r2,-32(fp)
   19048:	10800d43 	ldbu	r2,53(r2)
   1904c:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   19050:	e0fffc03 	ldbu	r3,-16(fp)
   19054:	d0a82544 	addi	r2,gp,-24427
   19058:	1885883a 	add	r2,r3,r2
   1905c:	10c00003 	ldbu	r3,0(r2)
   19060:	e0bffc83 	ldbu	r2,-14(fp)
   19064:	1884703a 	and	r2,r3,r2
   19068:	10803fcc 	andi	r2,r2,255
   1906c:	10002826 	beq	r2,zero,19110 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
   19070:	e0fffc03 	ldbu	r3,-16(fp)
   19074:	e13ffc03 	ldbu	r4,-16(fp)
   19078:	d0a82544 	addi	r2,gp,-24427
   1907c:	2085883a 	add	r2,r4,r2
   19080:	10800003 	ldbu	r2,0(r2)
   19084:	1009883a 	mov	r4,r2
   19088:	e0bffc83 	ldbu	r2,-14(fp)
   1908c:	0084303a 	nor	r2,zero,r2
   19090:	2084703a 	and	r2,r4,r2
   19094:	1009883a 	mov	r4,r2
   19098:	d0a82544 	addi	r2,gp,-24427
   1909c:	1885883a 	add	r2,r3,r2
   190a0:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   190a4:	e0fffc03 	ldbu	r3,-16(fp)
   190a8:	d0a82544 	addi	r2,gp,-24427
   190ac:	1885883a 	add	r2,r3,r2
   190b0:	10800003 	ldbu	r2,0(r2)
   190b4:	10803fcc 	andi	r2,r2,255
   190b8:	1000061e 	bne	r2,zero,190d4 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
   190bc:	e0bffc43 	ldbu	r2,-15(fp)
   190c0:	0084303a 	nor	r2,zero,r2
   190c4:	1007883a 	mov	r3,r2
   190c8:	d0a82503 	ldbu	r2,-24428(gp)
   190cc:	1884703a 	and	r2,r3,r2
   190d0:	d0a82505 	stb	r2,-24428(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   190d4:	d0e82503 	ldbu	r3,-24428(gp)
   190d8:	e0bffb83 	ldbu	r2,-18(fp)
   190dc:	1884b03a 	or	r2,r3,r2
   190e0:	d0a82505 	stb	r2,-24428(gp)
         OSRdyTbl[y_new] |= bitx_new;
   190e4:	e0fffb03 	ldbu	r3,-20(fp)
   190e8:	e13ffb03 	ldbu	r4,-20(fp)
   190ec:	d0a82544 	addi	r2,gp,-24427
   190f0:	2085883a 	add	r2,r4,r2
   190f4:	11000003 	ldbu	r4,0(r2)
   190f8:	e0bffbc3 	ldbu	r2,-17(fp)
   190fc:	2084b03a 	or	r2,r4,r2
   19100:	1009883a 	mov	r4,r2
   19104:	d0a82544 	addi	r2,gp,-24427
   19108:	1885883a 	add	r2,r3,r2
   1910c:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   19110:	e0bff817 	ldw	r2,-32(fp)
   19114:	10800717 	ldw	r2,28(r2)
   19118:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   1911c:	e0bff317 	ldw	r2,-52(fp)
   19120:	10003326 	beq	r2,zero,191f0 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   19124:	e0bffc03 	ldbu	r2,-16(fp)
   19128:	e0fffc03 	ldbu	r3,-16(fp)
   1912c:	e13ff317 	ldw	r4,-52(fp)
   19130:	20c7883a 	add	r3,r4,r3
   19134:	18c002c4 	addi	r3,r3,11
   19138:	18c00003 	ldbu	r3,0(r3)
   1913c:	1809883a 	mov	r4,r3
   19140:	e0fffc83 	ldbu	r3,-14(fp)
   19144:	00c6303a 	nor	r3,zero,r3
   19148:	20c6703a 	and	r3,r4,r3
   1914c:	1809883a 	mov	r4,r3
   19150:	e0fff317 	ldw	r3,-52(fp)
   19154:	1885883a 	add	r2,r3,r2
   19158:	108002c4 	addi	r2,r2,11
   1915c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   19160:	e0bffc03 	ldbu	r2,-16(fp)
   19164:	e0fff317 	ldw	r3,-52(fp)
   19168:	1885883a 	add	r2,r3,r2
   1916c:	108002c4 	addi	r2,r2,11
   19170:	10800003 	ldbu	r2,0(r2)
   19174:	10803fcc 	andi	r2,r2,255
   19178:	1000091e 	bne	r2,zero,191a0 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
   1917c:	e0bff317 	ldw	r2,-52(fp)
   19180:	10800283 	ldbu	r2,10(r2)
   19184:	1007883a 	mov	r3,r2
   19188:	e0bffc43 	ldbu	r2,-15(fp)
   1918c:	0084303a 	nor	r2,zero,r2
   19190:	1884703a 	and	r2,r3,r2
   19194:	1007883a 	mov	r3,r2
   19198:	e0bff317 	ldw	r2,-52(fp)
   1919c:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   191a0:	e0bff317 	ldw	r2,-52(fp)
   191a4:	10c00283 	ldbu	r3,10(r2)
   191a8:	e0bffb83 	ldbu	r2,-18(fp)
   191ac:	1884b03a 	or	r2,r3,r2
   191b0:	1007883a 	mov	r3,r2
   191b4:	e0bff317 	ldw	r2,-52(fp)
   191b8:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   191bc:	e0bffb03 	ldbu	r2,-20(fp)
   191c0:	e0fffb03 	ldbu	r3,-20(fp)
   191c4:	e13ff317 	ldw	r4,-52(fp)
   191c8:	20c7883a 	add	r3,r4,r3
   191cc:	18c002c4 	addi	r3,r3,11
   191d0:	19000003 	ldbu	r4,0(r3)
   191d4:	e0fffbc3 	ldbu	r3,-17(fp)
   191d8:	20c6b03a 	or	r3,r4,r3
   191dc:	1809883a 	mov	r4,r3
   191e0:	e0fff317 	ldw	r3,-52(fp)
   191e4:	1885883a 	add	r2,r3,r2
   191e8:	108002c4 	addi	r2,r2,11
   191ec:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   191f0:	e0bff817 	ldw	r2,-32(fp)
   191f4:	10800817 	ldw	r2,32(r2)
   191f8:	10004226 	beq	r2,zero,19304 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
   191fc:	e0bff817 	ldw	r2,-32(fp)
   19200:	10800817 	ldw	r2,32(r2)
   19204:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   19208:	e0bff417 	ldw	r2,-48(fp)
   1920c:	10800017 	ldw	r2,0(r2)
   19210:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   19214:	00003906 	br	192fc <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   19218:	e0bffc03 	ldbu	r2,-16(fp)
   1921c:	e0fffc03 	ldbu	r3,-16(fp)
   19220:	e13ff317 	ldw	r4,-52(fp)
   19224:	20c7883a 	add	r3,r4,r3
   19228:	18c002c4 	addi	r3,r3,11
   1922c:	18c00003 	ldbu	r3,0(r3)
   19230:	1809883a 	mov	r4,r3
   19234:	e0fffc83 	ldbu	r3,-14(fp)
   19238:	00c6303a 	nor	r3,zero,r3
   1923c:	20c6703a 	and	r3,r4,r3
   19240:	1809883a 	mov	r4,r3
   19244:	e0fff317 	ldw	r3,-52(fp)
   19248:	1885883a 	add	r2,r3,r2
   1924c:	108002c4 	addi	r2,r2,11
   19250:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   19254:	e0bffc03 	ldbu	r2,-16(fp)
   19258:	e0fff317 	ldw	r3,-52(fp)
   1925c:	1885883a 	add	r2,r3,r2
   19260:	108002c4 	addi	r2,r2,11
   19264:	10800003 	ldbu	r2,0(r2)
   19268:	10803fcc 	andi	r2,r2,255
   1926c:	1000091e 	bne	r2,zero,19294 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
   19270:	e0bff317 	ldw	r2,-52(fp)
   19274:	10800283 	ldbu	r2,10(r2)
   19278:	1007883a 	mov	r3,r2
   1927c:	e0bffc43 	ldbu	r2,-15(fp)
   19280:	0084303a 	nor	r2,zero,r2
   19284:	1884703a 	and	r2,r3,r2
   19288:	1007883a 	mov	r3,r2
   1928c:	e0bff317 	ldw	r2,-52(fp)
   19290:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   19294:	e0bff317 	ldw	r2,-52(fp)
   19298:	10c00283 	ldbu	r3,10(r2)
   1929c:	e0bffb83 	ldbu	r2,-18(fp)
   192a0:	1884b03a 	or	r2,r3,r2
   192a4:	1007883a 	mov	r3,r2
   192a8:	e0bff317 	ldw	r2,-52(fp)
   192ac:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   192b0:	e0bffb03 	ldbu	r2,-20(fp)
   192b4:	e0fffb03 	ldbu	r3,-20(fp)
   192b8:	e13ff317 	ldw	r4,-52(fp)
   192bc:	20c7883a 	add	r3,r4,r3
   192c0:	18c002c4 	addi	r3,r3,11
   192c4:	19000003 	ldbu	r4,0(r3)
   192c8:	e0fffbc3 	ldbu	r3,-17(fp)
   192cc:	20c6b03a 	or	r3,r4,r3
   192d0:	1809883a 	mov	r4,r3
   192d4:	e0fff317 	ldw	r3,-52(fp)
   192d8:	1885883a 	add	r2,r3,r2
   192dc:	108002c4 	addi	r2,r2,11
   192e0:	11000005 	stb	r4,0(r2)
            pevents++;
   192e4:	e0bff417 	ldw	r2,-48(fp)
   192e8:	10800104 	addi	r2,r2,4
   192ec:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   192f0:	e0bff417 	ldw	r2,-48(fp)
   192f4:	10800017 	ldw	r2,0(r2)
   192f8:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   192fc:	e0bff317 	ldw	r2,-52(fp)
   19300:	103fc51e 	bne	r2,zero,19218 <OSTaskChangePrio+0x38c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   19304:	e0bff817 	ldw	r2,-32(fp)
   19308:	e0ffff03 	ldbu	r3,-4(fp)
   1930c:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   19310:	e0bff817 	ldw	r2,-32(fp)
   19314:	e0fffb03 	ldbu	r3,-20(fp)
   19318:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   1931c:	e0bff817 	ldw	r2,-32(fp)
   19320:	e0fffb43 	ldbu	r3,-19(fp)
   19324:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   19328:	e0bff817 	ldw	r2,-32(fp)
   1932c:	e0fffb83 	ldbu	r3,-18(fp)
   19330:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   19334:	e0bff817 	ldw	r2,-32(fp)
   19338:	e0fffbc3 	ldbu	r3,-17(fp)
   1933c:	10c00d45 	stb	r3,53(r2)
   19340:	e0bff517 	ldw	r2,-44(fp)
   19344:	e0bffa15 	stw	r2,-24(fp)
   19348:	e0bffa17 	ldw	r2,-24(fp)
   1934c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   19350:	d0a81943 	ldbu	r2,-24475(gp)
   19354:	10803fcc 	andi	r2,r2,255
   19358:	10800058 	cmpnei	r2,r2,1
   1935c:	1000011e 	bne	r2,zero,19364 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
   19360:	0014c4c0 	call	14c4c <OS_Sched>
    }
    return (OS_ERR_NONE);
   19364:	0005883a 	mov	r2,zero
}
   19368:	e037883a 	mov	sp,fp
   1936c:	dfc00117 	ldw	ra,4(sp)
   19370:	df000017 	ldw	fp,0(sp)
   19374:	dec00204 	addi	sp,sp,8
   19378:	f800283a 	ret

0001937c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   1937c:	deffee04 	addi	sp,sp,-72
   19380:	dfc01115 	stw	ra,68(sp)
   19384:	df001015 	stw	fp,64(sp)
   19388:	df001004 	addi	fp,sp,64
   1938c:	e13ffc15 	stw	r4,-16(fp)
   19390:	e17ffd15 	stw	r5,-12(fp)
   19394:	e1bffe15 	stw	r6,-8(fp)
   19398:	3805883a 	mov	r2,r7
   1939c:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   193a0:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   193a4:	e0bfff03 	ldbu	r2,-4(fp)
   193a8:	10800570 	cmpltui	r2,r2,21
   193ac:	1000021e 	bne	r2,zero,193b8 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   193b0:	00800a84 	movi	r2,42
   193b4:	00005706 	br	19514 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   193b8:	0005303a 	rdctl	r2,status
   193bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   193c0:	e0fffb17 	ldw	r3,-20(fp)
   193c4:	00bfff84 	movi	r2,-2
   193c8:	1884703a 	and	r2,r3,r2
   193cc:	1001703a 	wrctl	status,r2
  
  return context;
   193d0:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   193d4:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   193d8:	d0a82703 	ldbu	r2,-24420(gp)
   193dc:	10803fcc 	andi	r2,r2,255
   193e0:	10000626 	beq	r2,zero,193fc <OSTaskCreate+0x80>
   193e4:	e0bff317 	ldw	r2,-52(fp)
   193e8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   193ec:	e0bff417 	ldw	r2,-48(fp)
   193f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   193f4:	00800f04 	movi	r2,60
   193f8:	00004606 	br	19514 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   193fc:	e0ffff03 	ldbu	r3,-4(fp)
   19400:	008000f4 	movhi	r2,3
   19404:	1092f304 	addi	r2,r2,19404
   19408:	18c7883a 	add	r3,r3,r3
   1940c:	18c7883a 	add	r3,r3,r3
   19410:	10c5883a 	add	r2,r2,r3
   19414:	10800017 	ldw	r2,0(r2)
   19418:	1000391e 	bne	r2,zero,19500 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   1941c:	e0ffff03 	ldbu	r3,-4(fp)
   19420:	008000f4 	movhi	r2,3
   19424:	1092f304 	addi	r2,r2,19404
   19428:	18c7883a 	add	r3,r3,r3
   1942c:	18c7883a 	add	r3,r3,r3
   19430:	10c5883a 	add	r2,r2,r3
   19434:	00c00044 	movi	r3,1
   19438:	10c00015 	stw	r3,0(r2)
   1943c:	e0bff317 	ldw	r2,-52(fp)
   19440:	e0bff515 	stw	r2,-44(fp)
   19444:	e0bff517 	ldw	r2,-44(fp)
   19448:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   1944c:	000f883a 	mov	r7,zero
   19450:	e1bffe17 	ldw	r6,-8(fp)
   19454:	e17ffd17 	ldw	r5,-12(fp)
   19458:	e13ffc17 	ldw	r4,-16(fp)
   1945c:	001e0f40 	call	1e0f4 <OSTaskStkInit>
   19460:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   19464:	e0bfff03 	ldbu	r2,-4(fp)
   19468:	d8000215 	stw	zero,8(sp)
   1946c:	d8000115 	stw	zero,4(sp)
   19470:	d8000015 	stw	zero,0(sp)
   19474:	000f883a 	mov	r7,zero
   19478:	000d883a 	mov	r6,zero
   1947c:	e17ff717 	ldw	r5,-36(fp)
   19480:	1009883a 	mov	r4,r2
   19484:	001505c0 	call	1505c <OS_TCBInit>
   19488:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
   1948c:	e0bff803 	ldbu	r2,-32(fp)
   19490:	1000061e 	bne	r2,zero,194ac <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   19494:	d0a81943 	ldbu	r2,-24475(gp)
   19498:	10803fcc 	andi	r2,r2,255
   1949c:	10800058 	cmpnei	r2,r2,1
   194a0:	1000151e 	bne	r2,zero,194f8 <OSTaskCreate+0x17c>
                OS_Sched();
   194a4:	0014c4c0 	call	14c4c <OS_Sched>
   194a8:	00001306 	br	194f8 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   194ac:	0005303a 	rdctl	r2,status
   194b0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   194b4:	e0fffa17 	ldw	r3,-24(fp)
   194b8:	00bfff84 	movi	r2,-2
   194bc:	1884703a 	and	r2,r3,r2
   194c0:	1001703a 	wrctl	status,r2
  
  return context;
   194c4:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   194c8:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   194cc:	e0ffff03 	ldbu	r3,-4(fp)
   194d0:	008000f4 	movhi	r2,3
   194d4:	1092f304 	addi	r2,r2,19404
   194d8:	18c7883a 	add	r3,r3,r3
   194dc:	18c7883a 	add	r3,r3,r3
   194e0:	10c5883a 	add	r2,r2,r3
   194e4:	10000015 	stw	zero,0(r2)
   194e8:	e0bff317 	ldw	r2,-52(fp)
   194ec:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   194f0:	e0bff617 	ldw	r2,-40(fp)
   194f4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   194f8:	e0bff803 	ldbu	r2,-32(fp)
   194fc:	00000506 	br	19514 <OSTaskCreate+0x198>
   19500:	e0bff317 	ldw	r2,-52(fp)
   19504:	e0bff915 	stw	r2,-28(fp)
   19508:	e0bff917 	ldw	r2,-28(fp)
   1950c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   19510:	00800a04 	movi	r2,40
}
   19514:	e037883a 	mov	sp,fp
   19518:	dfc00117 	ldw	ra,4(sp)
   1951c:	df000017 	ldw	fp,0(sp)
   19520:	dec00204 	addi	sp,sp,8
   19524:	f800283a 	ret

00019528 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   19528:	deffec04 	addi	sp,sp,-80
   1952c:	dfc01315 	stw	ra,76(sp)
   19530:	df001215 	stw	fp,72(sp)
   19534:	df001204 	addi	fp,sp,72
   19538:	e13ffa15 	stw	r4,-24(fp)
   1953c:	e17ffb15 	stw	r5,-20(fp)
   19540:	e1bffc15 	stw	r6,-16(fp)
   19544:	3809883a 	mov	r4,r7
   19548:	e0c00217 	ldw	r3,8(fp)
   1954c:	e0800617 	ldw	r2,24(fp)
   19550:	e13ffd05 	stb	r4,-12(fp)
   19554:	e0fffe0d 	sth	r3,-8(fp)
   19558:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   1955c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   19560:	e0bffd03 	ldbu	r2,-12(fp)
   19564:	10800570 	cmpltui	r2,r2,21
   19568:	1000021e 	bne	r2,zero,19574 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   1956c:	00800a84 	movi	r2,42
   19570:	00006106 	br	196f8 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19574:	0005303a 	rdctl	r2,status
   19578:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1957c:	e0fff917 	ldw	r3,-28(fp)
   19580:	00bfff84 	movi	r2,-2
   19584:	1884703a 	and	r2,r3,r2
   19588:	1001703a 	wrctl	status,r2
  
  return context;
   1958c:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   19590:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   19594:	d0a82703 	ldbu	r2,-24420(gp)
   19598:	10803fcc 	andi	r2,r2,255
   1959c:	10000626 	beq	r2,zero,195b8 <OSTaskCreateExt+0x90>
   195a0:	e0bff117 	ldw	r2,-60(fp)
   195a4:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   195a8:	e0bff217 	ldw	r2,-56(fp)
   195ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   195b0:	00800f04 	movi	r2,60
   195b4:	00005006 	br	196f8 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   195b8:	e0fffd03 	ldbu	r3,-12(fp)
   195bc:	008000f4 	movhi	r2,3
   195c0:	1092f304 	addi	r2,r2,19404
   195c4:	18c7883a 	add	r3,r3,r3
   195c8:	18c7883a 	add	r3,r3,r3
   195cc:	10c5883a 	add	r2,r2,r3
   195d0:	10800017 	ldw	r2,0(r2)
   195d4:	1000431e 	bne	r2,zero,196e4 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   195d8:	e0fffd03 	ldbu	r3,-12(fp)
   195dc:	008000f4 	movhi	r2,3
   195e0:	1092f304 	addi	r2,r2,19404
   195e4:	18c7883a 	add	r3,r3,r3
   195e8:	18c7883a 	add	r3,r3,r3
   195ec:	10c5883a 	add	r2,r2,r3
   195f0:	00c00044 	movi	r3,1
   195f4:	10c00015 	stw	r3,0(r2)
   195f8:	e0bff117 	ldw	r2,-60(fp)
   195fc:	e0bff315 	stw	r2,-52(fp)
   19600:	e0bff317 	ldw	r2,-52(fp)
   19604:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   19608:	e0bfff0b 	ldhu	r2,-4(fp)
   1960c:	100d883a 	mov	r6,r2
   19610:	e1400417 	ldw	r5,16(fp)
   19614:	e1000317 	ldw	r4,12(fp)
   19618:	001a5880 	call	1a588 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   1961c:	e0bfff0b 	ldhu	r2,-4(fp)
   19620:	100f883a 	mov	r7,r2
   19624:	e1bffc17 	ldw	r6,-16(fp)
   19628:	e17ffb17 	ldw	r5,-20(fp)
   1962c:	e13ffa17 	ldw	r4,-24(fp)
   19630:	001e0f40 	call	1e0f4 <OSTaskStkInit>
   19634:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   19638:	e0fffd03 	ldbu	r3,-12(fp)
   1963c:	e13ffe0b 	ldhu	r4,-8(fp)
   19640:	e0bfff0b 	ldhu	r2,-4(fp)
   19644:	d8800215 	stw	r2,8(sp)
   19648:	e0800517 	ldw	r2,20(fp)
   1964c:	d8800115 	stw	r2,4(sp)
   19650:	e0800417 	ldw	r2,16(fp)
   19654:	d8800015 	stw	r2,0(sp)
   19658:	200f883a 	mov	r7,r4
   1965c:	e1800317 	ldw	r6,12(fp)
   19660:	e17ff517 	ldw	r5,-44(fp)
   19664:	1809883a 	mov	r4,r3
   19668:	001505c0 	call	1505c <OS_TCBInit>
   1966c:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
   19670:	e0bff603 	ldbu	r2,-40(fp)
   19674:	1000061e 	bne	r2,zero,19690 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   19678:	d0a81943 	ldbu	r2,-24475(gp)
   1967c:	10803fcc 	andi	r2,r2,255
   19680:	10800058 	cmpnei	r2,r2,1
   19684:	1000151e 	bne	r2,zero,196dc <OSTaskCreateExt+0x1b4>
                OS_Sched();
   19688:	0014c4c0 	call	14c4c <OS_Sched>
   1968c:	00001306 	br	196dc <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19690:	0005303a 	rdctl	r2,status
   19694:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19698:	e0fff817 	ldw	r3,-32(fp)
   1969c:	00bfff84 	movi	r2,-2
   196a0:	1884703a 	and	r2,r3,r2
   196a4:	1001703a 	wrctl	status,r2
  
  return context;
   196a8:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   196ac:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   196b0:	e0fffd03 	ldbu	r3,-12(fp)
   196b4:	008000f4 	movhi	r2,3
   196b8:	1092f304 	addi	r2,r2,19404
   196bc:	18c7883a 	add	r3,r3,r3
   196c0:	18c7883a 	add	r3,r3,r3
   196c4:	10c5883a 	add	r2,r2,r3
   196c8:	10000015 	stw	zero,0(r2)
   196cc:	e0bff117 	ldw	r2,-60(fp)
   196d0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   196d4:	e0bff417 	ldw	r2,-48(fp)
   196d8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   196dc:	e0bff603 	ldbu	r2,-40(fp)
   196e0:	00000506 	br	196f8 <OSTaskCreateExt+0x1d0>
   196e4:	e0bff117 	ldw	r2,-60(fp)
   196e8:	e0bff715 	stw	r2,-36(fp)
   196ec:	e0bff717 	ldw	r2,-36(fp)
   196f0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   196f4:	00800a04 	movi	r2,40
}
   196f8:	e037883a 	mov	sp,fp
   196fc:	dfc00117 	ldw	ra,4(sp)
   19700:	df000017 	ldw	fp,0(sp)
   19704:	dec00204 	addi	sp,sp,8
   19708:	f800283a 	ret

0001970c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   1970c:	defff404 	addi	sp,sp,-48
   19710:	dfc00b15 	stw	ra,44(sp)
   19714:	df000a15 	stw	fp,40(sp)
   19718:	df000a04 	addi	fp,sp,40
   1971c:	2005883a 	mov	r2,r4
   19720:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   19724:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   19728:	d0a82703 	ldbu	r2,-24420(gp)
   1972c:	10803fcc 	andi	r2,r2,255
   19730:	10000226 	beq	r2,zero,1973c <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
   19734:	00801004 	movi	r2,64
   19738:	0000c006 	br	19a3c <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   1973c:	e0bfff03 	ldbu	r2,-4(fp)
   19740:	10800518 	cmpnei	r2,r2,20
   19744:	1000021e 	bne	r2,zero,19750 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
   19748:	00800f84 	movi	r2,62
   1974c:	0000bb06 	br	19a3c <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   19750:	e0bfff03 	ldbu	r2,-4(fp)
   19754:	10800530 	cmpltui	r2,r2,20
   19758:	1000051e 	bne	r2,zero,19770 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
   1975c:	e0bfff03 	ldbu	r2,-4(fp)
   19760:	10803fe0 	cmpeqi	r2,r2,255
   19764:	1000021e 	bne	r2,zero,19770 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
   19768:	00800a84 	movi	r2,42
   1976c:	0000b306 	br	19a3c <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19770:	0005303a 	rdctl	r2,status
   19774:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19778:	e0fffe17 	ldw	r3,-8(fp)
   1977c:	00bfff84 	movi	r2,-2
   19780:	1884703a 	and	r2,r3,r2
   19784:	1001703a 	wrctl	status,r2
  
  return context;
   19788:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   1978c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   19790:	e0bfff03 	ldbu	r2,-4(fp)
   19794:	10803fd8 	cmpnei	r2,r2,255
   19798:	1000031e 	bne	r2,zero,197a8 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   1979c:	d0a82817 	ldw	r2,-24416(gp)
   197a0:	10800c83 	ldbu	r2,50(r2)
   197a4:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   197a8:	e0ffff03 	ldbu	r3,-4(fp)
   197ac:	008000f4 	movhi	r2,3
   197b0:	1092f304 	addi	r2,r2,19404
   197b4:	18c7883a 	add	r3,r3,r3
   197b8:	18c7883a 	add	r3,r3,r3
   197bc:	10c5883a 	add	r2,r2,r3
   197c0:	10800017 	ldw	r2,0(r2)
   197c4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   197c8:	e0bff817 	ldw	r2,-32(fp)
   197cc:	1000061e 	bne	r2,zero,197e8 <OSTaskDel+0xdc>
   197d0:	e0bff617 	ldw	r2,-40(fp)
   197d4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   197d8:	e0bff717 	ldw	r2,-36(fp)
   197dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   197e0:	008010c4 	movi	r2,67
   197e4:	00009506 	br	19a3c <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   197e8:	e0bff817 	ldw	r2,-32(fp)
   197ec:	10800058 	cmpnei	r2,r2,1
   197f0:	1000061e 	bne	r2,zero,1980c <OSTaskDel+0x100>
   197f4:	e0bff617 	ldw	r2,-40(fp)
   197f8:	e0bff915 	stw	r2,-28(fp)
   197fc:	e0bff917 	ldw	r2,-28(fp)
   19800:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   19804:	00800f44 	movi	r2,61
   19808:	00008c06 	br	19a3c <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   1980c:	e0bff817 	ldw	r2,-32(fp)
   19810:	10800d03 	ldbu	r2,52(r2)
   19814:	10c03fcc 	andi	r3,r2,255
   19818:	e0bff817 	ldw	r2,-32(fp)
   1981c:	10800d03 	ldbu	r2,52(r2)
   19820:	11003fcc 	andi	r4,r2,255
   19824:	d0a82544 	addi	r2,gp,-24427
   19828:	2085883a 	add	r2,r4,r2
   1982c:	10800003 	ldbu	r2,0(r2)
   19830:	1009883a 	mov	r4,r2
   19834:	e0bff817 	ldw	r2,-32(fp)
   19838:	10800d43 	ldbu	r2,53(r2)
   1983c:	0084303a 	nor	r2,zero,r2
   19840:	2084703a 	and	r2,r4,r2
   19844:	1009883a 	mov	r4,r2
   19848:	d0a82544 	addi	r2,gp,-24427
   1984c:	1885883a 	add	r2,r3,r2
   19850:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   19854:	e0bff817 	ldw	r2,-32(fp)
   19858:	10800d03 	ldbu	r2,52(r2)
   1985c:	10c03fcc 	andi	r3,r2,255
   19860:	d0a82544 	addi	r2,gp,-24427
   19864:	1885883a 	add	r2,r3,r2
   19868:	10800003 	ldbu	r2,0(r2)
   1986c:	10803fcc 	andi	r2,r2,255
   19870:	1000071e 	bne	r2,zero,19890 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   19874:	e0bff817 	ldw	r2,-32(fp)
   19878:	10800d83 	ldbu	r2,54(r2)
   1987c:	0084303a 	nor	r2,zero,r2
   19880:	1007883a 	mov	r3,r2
   19884:	d0a82503 	ldbu	r2,-24428(gp)
   19888:	1884703a 	and	r2,r3,r2
   1988c:	d0a82505 	stb	r2,-24428(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   19890:	e0bff817 	ldw	r2,-32(fp)
   19894:	10800717 	ldw	r2,28(r2)
   19898:	10000526 	beq	r2,zero,198b0 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   1989c:	e0bff817 	ldw	r2,-32(fp)
   198a0:	10800717 	ldw	r2,28(r2)
   198a4:	100b883a 	mov	r5,r2
   198a8:	e13ff817 	ldw	r4,-32(fp)
   198ac:	00145f80 	call	145f8 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   198b0:	e0bff817 	ldw	r2,-32(fp)
   198b4:	10800817 	ldw	r2,32(r2)
   198b8:	10000526 	beq	r2,zero,198d0 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   198bc:	e0bff817 	ldw	r2,-32(fp)
   198c0:	10800817 	ldw	r2,32(r2)
   198c4:	100b883a 	mov	r5,r2
   198c8:	e13ff817 	ldw	r4,-32(fp)
   198cc:	00146b00 	call	146b0 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   198d0:	e0bff817 	ldw	r2,-32(fp)
   198d4:	10800a17 	ldw	r2,40(r2)
   198d8:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   198dc:	e0bffb17 	ldw	r2,-20(fp)
   198e0:	10000226 	beq	r2,zero,198ec <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   198e4:	e13ffb17 	ldw	r4,-20(fp)
   198e8:	0016b300 	call	16b30 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   198ec:	e0bff817 	ldw	r2,-32(fp)
   198f0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   198f4:	e0bff817 	ldw	r2,-32(fp)
   198f8:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   198fc:	e0bff817 	ldw	r2,-32(fp)
   19900:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   19904:	d0a81903 	ldbu	r2,-24476(gp)
   19908:	10803fcc 	andi	r2,r2,255
   1990c:	10803fe0 	cmpeqi	r2,r2,255
   19910:	1000031e 	bne	r2,zero,19920 <OSTaskDel+0x214>
        OSLockNesting++;
   19914:	d0a81903 	ldbu	r2,-24476(gp)
   19918:	10800044 	addi	r2,r2,1
   1991c:	d0a81905 	stb	r2,-24476(gp)
   19920:	e0bff617 	ldw	r2,-40(fp)
   19924:	e0bffd15 	stw	r2,-12(fp)
   19928:	e0bffd17 	ldw	r2,-12(fp)
   1992c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   19930:	00141e00 	call	141e0 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19934:	0005303a 	rdctl	r2,status
   19938:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1993c:	e0fffa17 	ldw	r3,-24(fp)
   19940:	00bfff84 	movi	r2,-2
   19944:	1884703a 	and	r2,r3,r2
   19948:	1001703a 	wrctl	status,r2
  
  return context;
   1994c:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   19950:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   19954:	d0a81903 	ldbu	r2,-24476(gp)
   19958:	10803fcc 	andi	r2,r2,255
   1995c:	10000326 	beq	r2,zero,1996c <OSTaskDel+0x260>
        OSLockNesting--;
   19960:	d0a81903 	ldbu	r2,-24476(gp)
   19964:	10bfffc4 	addi	r2,r2,-1
   19968:	d0a81905 	stb	r2,-24476(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   1996c:	e13ff817 	ldw	r4,-32(fp)
   19970:	001e2740 	call	1e274 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   19974:	d0a82143 	ldbu	r2,-24443(gp)
   19978:	10bfffc4 	addi	r2,r2,-1
   1997c:	d0a82145 	stb	r2,-24443(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   19980:	e0ffff03 	ldbu	r3,-4(fp)
   19984:	008000f4 	movhi	r2,3
   19988:	1092f304 	addi	r2,r2,19404
   1998c:	18c7883a 	add	r3,r3,r3
   19990:	18c7883a 	add	r3,r3,r3
   19994:	10c5883a 	add	r2,r2,r3
   19998:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   1999c:	e0bff817 	ldw	r2,-32(fp)
   199a0:	10800617 	ldw	r2,24(r2)
   199a4:	1000071e 	bne	r2,zero,199c4 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   199a8:	e0bff817 	ldw	r2,-32(fp)
   199ac:	10800517 	ldw	r2,20(r2)
   199b0:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   199b4:	e0bff817 	ldw	r2,-32(fp)
   199b8:	10800517 	ldw	r2,20(r2)
   199bc:	d0a81c15 	stw	r2,-24464(gp)
   199c0:	00000a06 	br	199ec <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   199c4:	e0bff817 	ldw	r2,-32(fp)
   199c8:	10800617 	ldw	r2,24(r2)
   199cc:	e0fff817 	ldw	r3,-32(fp)
   199d0:	18c00517 	ldw	r3,20(r3)
   199d4:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   199d8:	e0bff817 	ldw	r2,-32(fp)
   199dc:	10800517 	ldw	r2,20(r2)
   199e0:	e0fff817 	ldw	r3,-32(fp)
   199e4:	18c00617 	ldw	r3,24(r3)
   199e8:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   199ec:	d0e82017 	ldw	r3,-24448(gp)
   199f0:	e0bff817 	ldw	r2,-32(fp)
   199f4:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   199f8:	e0bff817 	ldw	r2,-32(fp)
   199fc:	d0a82015 	stw	r2,-24448(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   19a00:	e0bff817 	ldw	r2,-32(fp)
   19a04:	00c00fc4 	movi	r3,63
   19a08:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   19a0c:	e0bff817 	ldw	r2,-32(fp)
   19a10:	10001345 	stb	zero,77(r2)
   19a14:	e0bff617 	ldw	r2,-40(fp)
   19a18:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19a1c:	e0bffc17 	ldw	r2,-16(fp)
   19a20:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   19a24:	d0a81943 	ldbu	r2,-24475(gp)
   19a28:	10803fcc 	andi	r2,r2,255
   19a2c:	10800058 	cmpnei	r2,r2,1
   19a30:	1000011e 	bne	r2,zero,19a38 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
   19a34:	0014c4c0 	call	14c4c <OS_Sched>
    }
    return (OS_ERR_NONE);
   19a38:	0005883a 	mov	r2,zero
}
   19a3c:	e037883a 	mov	sp,fp
   19a40:	dfc00117 	ldw	ra,4(sp)
   19a44:	df000017 	ldw	fp,0(sp)
   19a48:	dec00204 	addi	sp,sp,8
   19a4c:	f800283a 	ret

00019a50 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   19a50:	defff504 	addi	sp,sp,-44
   19a54:	df000a15 	stw	fp,40(sp)
   19a58:	df000a04 	addi	fp,sp,40
   19a5c:	2005883a 	mov	r2,r4
   19a60:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   19a64:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   19a68:	e0bfff03 	ldbu	r2,-4(fp)
   19a6c:	10800518 	cmpnei	r2,r2,20
   19a70:	1000021e 	bne	r2,zero,19a7c <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   19a74:	00800f84 	movi	r2,62
   19a78:	00004506 	br	19b90 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   19a7c:	e0bfff03 	ldbu	r2,-4(fp)
   19a80:	10800530 	cmpltui	r2,r2,20
   19a84:	1000051e 	bne	r2,zero,19a9c <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   19a88:	e0bfff03 	ldbu	r2,-4(fp)
   19a8c:	10803fe0 	cmpeqi	r2,r2,255
   19a90:	1000021e 	bne	r2,zero,19a9c <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   19a94:	00800a84 	movi	r2,42
   19a98:	00003d06 	br	19b90 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   19a9c:	e0bfff03 	ldbu	r2,-4(fp)
   19aa0:	10803fd8 	cmpnei	r2,r2,255
   19aa4:	1000111e 	bne	r2,zero,19aec <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19aa8:	0005303a 	rdctl	r2,status
   19aac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19ab0:	e0fff917 	ldw	r3,-28(fp)
   19ab4:	00bfff84 	movi	r2,-2
   19ab8:	1884703a 	and	r2,r3,r2
   19abc:	1001703a 	wrctl	status,r2
  
  return context;
   19ac0:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   19ac4:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   19ac8:	d0a82817 	ldw	r2,-24416(gp)
   19acc:	10800dc3 	ldbu	r2,55(r2)
   19ad0:	e0bff805 	stb	r2,-32(fp)
   19ad4:	e0bff617 	ldw	r2,-40(fp)
   19ad8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19adc:	e0bffe17 	ldw	r2,-8(fp)
   19ae0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   19ae4:	e0bff803 	ldbu	r2,-32(fp)
   19ae8:	00002906 	br	19b90 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19aec:	0005303a 	rdctl	r2,status
   19af0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19af4:	e0fff717 	ldw	r3,-36(fp)
   19af8:	00bfff84 	movi	r2,-2
   19afc:	1884703a 	and	r2,r3,r2
   19b00:	1001703a 	wrctl	status,r2
  
  return context;
   19b04:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   19b08:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   19b0c:	e0ffff03 	ldbu	r3,-4(fp)
   19b10:	008000f4 	movhi	r2,3
   19b14:	1092f304 	addi	r2,r2,19404
   19b18:	18c7883a 	add	r3,r3,r3
   19b1c:	18c7883a 	add	r3,r3,r3
   19b20:	10c5883a 	add	r2,r2,r3
   19b24:	10800017 	ldw	r2,0(r2)
   19b28:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   19b2c:	e0bffb17 	ldw	r2,-20(fp)
   19b30:	1000061e 	bne	r2,zero,19b4c <OSTaskDelReq+0xfc>
   19b34:	e0bff617 	ldw	r2,-40(fp)
   19b38:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19b3c:	e0bffa17 	ldw	r2,-24(fp)
   19b40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   19b44:	008010c4 	movi	r2,67
   19b48:	00001106 	br	19b90 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   19b4c:	e0bffb17 	ldw	r2,-20(fp)
   19b50:	10800058 	cmpnei	r2,r2,1
   19b54:	1000061e 	bne	r2,zero,19b70 <OSTaskDelReq+0x120>
   19b58:	e0bff617 	ldw	r2,-40(fp)
   19b5c:	e0bffc15 	stw	r2,-16(fp)
   19b60:	e0bffc17 	ldw	r2,-16(fp)
   19b64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   19b68:	00800f44 	movi	r2,61
   19b6c:	00000806 	br	19b90 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   19b70:	e0bffb17 	ldw	r2,-20(fp)
   19b74:	00c00fc4 	movi	r3,63
   19b78:	10c00dc5 	stb	r3,55(r2)
   19b7c:	e0bff617 	ldw	r2,-40(fp)
   19b80:	e0bffd15 	stw	r2,-12(fp)
   19b84:	e0bffd17 	ldw	r2,-12(fp)
   19b88:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   19b8c:	0005883a 	mov	r2,zero
}
   19b90:	e037883a 	mov	sp,fp
   19b94:	df000017 	ldw	fp,0(sp)
   19b98:	dec00104 	addi	sp,sp,4
   19b9c:	f800283a 	ret

00019ba0 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   19ba0:	defff404 	addi	sp,sp,-48
   19ba4:	dfc00b15 	stw	ra,44(sp)
   19ba8:	df000a15 	stw	fp,40(sp)
   19bac:	df000a04 	addi	fp,sp,40
   19bb0:	2005883a 	mov	r2,r4
   19bb4:	e17ffe15 	stw	r5,-8(fp)
   19bb8:	e1bfff15 	stw	r6,-4(fp)
   19bbc:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   19bc0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   19bc4:	e0bfff17 	ldw	r2,-4(fp)
   19bc8:	1000021e 	bne	r2,zero,19bd4 <OSTaskNameGet+0x34>
        return (0);
   19bcc:	0005883a 	mov	r2,zero
   19bd0:	00005406 	br	19d24 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   19bd4:	e0bffd03 	ldbu	r2,-12(fp)
   19bd8:	10800570 	cmpltui	r2,r2,21
   19bdc:	1000081e 	bne	r2,zero,19c00 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   19be0:	e0bffd03 	ldbu	r2,-12(fp)
   19be4:	10803fe0 	cmpeqi	r2,r2,255
   19be8:	1000051e 	bne	r2,zero,19c00 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   19bec:	e0bfff17 	ldw	r2,-4(fp)
   19bf0:	00c00a84 	movi	r3,42
   19bf4:	10c00005 	stb	r3,0(r2)
            return (0);
   19bf8:	0005883a 	mov	r2,zero
   19bfc:	00004906 	br	19d24 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   19c00:	e0bffe17 	ldw	r2,-8(fp)
   19c04:	1000051e 	bne	r2,zero,19c1c <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   19c08:	e0bfff17 	ldw	r2,-4(fp)
   19c0c:	00c00304 	movi	r3,12
   19c10:	10c00005 	stb	r3,0(r2)
        return (0);
   19c14:	0005883a 	mov	r2,zero
   19c18:	00004206 	br	19d24 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   19c1c:	d0a82703 	ldbu	r2,-24420(gp)
   19c20:	10803fcc 	andi	r2,r2,255
   19c24:	10000526 	beq	r2,zero,19c3c <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
   19c28:	e0bfff17 	ldw	r2,-4(fp)
   19c2c:	00c00444 	movi	r3,17
   19c30:	10c00005 	stb	r3,0(r2)
        return (0);
   19c34:	0005883a 	mov	r2,zero
   19c38:	00003a06 	br	19d24 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19c3c:	0005303a 	rdctl	r2,status
   19c40:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19c44:	e0fffc17 	ldw	r3,-16(fp)
   19c48:	00bfff84 	movi	r2,-2
   19c4c:	1884703a 	and	r2,r3,r2
   19c50:	1001703a 	wrctl	status,r2
  
  return context;
   19c54:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   19c58:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   19c5c:	e0bffd03 	ldbu	r2,-12(fp)
   19c60:	10803fd8 	cmpnei	r2,r2,255
   19c64:	1000031e 	bne	r2,zero,19c74 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   19c68:	d0a82817 	ldw	r2,-24416(gp)
   19c6c:	10800c83 	ldbu	r2,50(r2)
   19c70:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   19c74:	e0fffd03 	ldbu	r3,-12(fp)
   19c78:	008000f4 	movhi	r2,3
   19c7c:	1092f304 	addi	r2,r2,19404
   19c80:	18c7883a 	add	r3,r3,r3
   19c84:	18c7883a 	add	r3,r3,r3
   19c88:	10c5883a 	add	r2,r2,r3
   19c8c:	10800017 	ldw	r2,0(r2)
   19c90:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   19c94:	e0bff817 	ldw	r2,-32(fp)
   19c98:	1000091e 	bne	r2,zero,19cc0 <OSTaskNameGet+0x120>
   19c9c:	e0bff617 	ldw	r2,-40(fp)
   19ca0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19ca4:	e0bff717 	ldw	r2,-36(fp)
   19ca8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   19cac:	e0bfff17 	ldw	r2,-4(fp)
   19cb0:	00c010c4 	movi	r3,67
   19cb4:	10c00005 	stb	r3,0(r2)
        return (0);
   19cb8:	0005883a 	mov	r2,zero
   19cbc:	00001906 	br	19d24 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   19cc0:	e0bff817 	ldw	r2,-32(fp)
   19cc4:	10800058 	cmpnei	r2,r2,1
   19cc8:	1000091e 	bne	r2,zero,19cf0 <OSTaskNameGet+0x150>
   19ccc:	e0bff617 	ldw	r2,-40(fp)
   19cd0:	e0bff915 	stw	r2,-28(fp)
   19cd4:	e0bff917 	ldw	r2,-28(fp)
   19cd8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   19cdc:	e0bfff17 	ldw	r2,-4(fp)
   19ce0:	00c010c4 	movi	r3,67
   19ce4:	10c00005 	stb	r3,0(r2)
        return (0);
   19ce8:	0005883a 	mov	r2,zero
   19cec:	00000d06 	br	19d24 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   19cf0:	e0bff817 	ldw	r2,-32(fp)
   19cf4:	10801304 	addi	r2,r2,76
   19cf8:	100b883a 	mov	r5,r2
   19cfc:	e13ffe17 	ldw	r4,-8(fp)
   19d00:	0014d900 	call	14d90 <OS_StrCopy>
   19d04:	e0bffb05 	stb	r2,-20(fp)
   19d08:	e0bff617 	ldw	r2,-40(fp)
   19d0c:	e0bffa15 	stw	r2,-24(fp)
   19d10:	e0bffa17 	ldw	r2,-24(fp)
   19d14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   19d18:	e0bfff17 	ldw	r2,-4(fp)
   19d1c:	10000005 	stb	zero,0(r2)
    return (len);
   19d20:	e0bffb03 	ldbu	r2,-20(fp)
}
   19d24:	e037883a 	mov	sp,fp
   19d28:	dfc00117 	ldw	ra,4(sp)
   19d2c:	df000017 	ldw	fp,0(sp)
   19d30:	dec00204 	addi	sp,sp,8
   19d34:	f800283a 	ret

00019d38 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   19d38:	defff304 	addi	sp,sp,-52
   19d3c:	dfc00c15 	stw	ra,48(sp)
   19d40:	df000b15 	stw	fp,44(sp)
   19d44:	df000b04 	addi	fp,sp,44
   19d48:	2005883a 	mov	r2,r4
   19d4c:	e17ffe15 	stw	r5,-8(fp)
   19d50:	e1bfff15 	stw	r6,-4(fp)
   19d54:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   19d58:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   19d5c:	e0bfff17 	ldw	r2,-4(fp)
   19d60:	10005c26 	beq	r2,zero,19ed4 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   19d64:	e0bffd03 	ldbu	r2,-12(fp)
   19d68:	10800570 	cmpltui	r2,r2,21
   19d6c:	1000071e 	bne	r2,zero,19d8c <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   19d70:	e0bffd03 	ldbu	r2,-12(fp)
   19d74:	10803fe0 	cmpeqi	r2,r2,255
   19d78:	1000041e 	bne	r2,zero,19d8c <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   19d7c:	e0bfff17 	ldw	r2,-4(fp)
   19d80:	00c00a84 	movi	r3,42
   19d84:	10c00005 	stb	r3,0(r2)
            return;
   19d88:	00005306 	br	19ed8 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   19d8c:	e0bffe17 	ldw	r2,-8(fp)
   19d90:	1000041e 	bne	r2,zero,19da4 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   19d94:	e0bfff17 	ldw	r2,-4(fp)
   19d98:	00c00304 	movi	r3,12
   19d9c:	10c00005 	stb	r3,0(r2)
        return;
   19da0:	00004d06 	br	19ed8 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   19da4:	d0a82703 	ldbu	r2,-24420(gp)
   19da8:	10803fcc 	andi	r2,r2,255
   19dac:	10000426 	beq	r2,zero,19dc0 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
   19db0:	e0bfff17 	ldw	r2,-4(fp)
   19db4:	00c00484 	movi	r3,18
   19db8:	10c00005 	stb	r3,0(r2)
        return;
   19dbc:	00004606 	br	19ed8 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19dc0:	0005303a 	rdctl	r2,status
   19dc4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19dc8:	e0fffc17 	ldw	r3,-16(fp)
   19dcc:	00bfff84 	movi	r2,-2
   19dd0:	1884703a 	and	r2,r3,r2
   19dd4:	1001703a 	wrctl	status,r2
  
  return context;
   19dd8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   19ddc:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   19de0:	e0bffd03 	ldbu	r2,-12(fp)
   19de4:	10803fd8 	cmpnei	r2,r2,255
   19de8:	1000031e 	bne	r2,zero,19df8 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
   19dec:	d0a82817 	ldw	r2,-24416(gp)
   19df0:	10800c83 	ldbu	r2,50(r2)
   19df4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   19df8:	e0fffd03 	ldbu	r3,-12(fp)
   19dfc:	008000f4 	movhi	r2,3
   19e00:	1092f304 	addi	r2,r2,19404
   19e04:	18c7883a 	add	r3,r3,r3
   19e08:	18c7883a 	add	r3,r3,r3
   19e0c:	10c5883a 	add	r2,r2,r3
   19e10:	10800017 	ldw	r2,0(r2)
   19e14:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   19e18:	e0bff717 	ldw	r2,-36(fp)
   19e1c:	1000081e 	bne	r2,zero,19e40 <OSTaskNameSet+0x108>
   19e20:	e0bff517 	ldw	r2,-44(fp)
   19e24:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19e28:	e0bff617 	ldw	r2,-40(fp)
   19e2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   19e30:	e0bfff17 	ldw	r2,-4(fp)
   19e34:	00c010c4 	movi	r3,67
   19e38:	10c00005 	stb	r3,0(r2)
        return;
   19e3c:	00002606 	br	19ed8 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   19e40:	e0bff717 	ldw	r2,-36(fp)
   19e44:	10800058 	cmpnei	r2,r2,1
   19e48:	1000081e 	bne	r2,zero,19e6c <OSTaskNameSet+0x134>
   19e4c:	e0bff517 	ldw	r2,-44(fp)
   19e50:	e0bff815 	stw	r2,-32(fp)
   19e54:	e0bff817 	ldw	r2,-32(fp)
   19e58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   19e5c:	e0bfff17 	ldw	r2,-4(fp)
   19e60:	00c010c4 	movi	r3,67
   19e64:	10c00005 	stb	r3,0(r2)
        return;
   19e68:	00001b06 	br	19ed8 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   19e6c:	e13ffe17 	ldw	r4,-8(fp)
   19e70:	0014e040 	call	14e04 <OS_StrLen>
   19e74:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   19e78:	e0bffa03 	ldbu	r2,-24(fp)
   19e7c:	10800830 	cmpltui	r2,r2,32
   19e80:	1000081e 	bne	r2,zero,19ea4 <OSTaskNameSet+0x16c>
   19e84:	e0bff517 	ldw	r2,-44(fp)
   19e88:	e0bff915 	stw	r2,-28(fp)
   19e8c:	e0bff917 	ldw	r2,-28(fp)
   19e90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   19e94:	e0bfff17 	ldw	r2,-4(fp)
   19e98:	00c01044 	movi	r3,65
   19e9c:	10c00005 	stb	r3,0(r2)
        return;
   19ea0:	00000d06 	br	19ed8 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   19ea4:	e0bff717 	ldw	r2,-36(fp)
   19ea8:	10801304 	addi	r2,r2,76
   19eac:	e17ffe17 	ldw	r5,-8(fp)
   19eb0:	1009883a 	mov	r4,r2
   19eb4:	0014d900 	call	14d90 <OS_StrCopy>
   19eb8:	e0bff517 	ldw	r2,-44(fp)
   19ebc:	e0bffb15 	stw	r2,-20(fp)
   19ec0:	e0bffb17 	ldw	r2,-20(fp)
   19ec4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   19ec8:	e0bfff17 	ldw	r2,-4(fp)
   19ecc:	10000005 	stb	zero,0(r2)
   19ed0:	00000106 	br	19ed8 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
   19ed4:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   19ed8:	e037883a 	mov	sp,fp
   19edc:	dfc00117 	ldw	ra,4(sp)
   19ee0:	df000017 	ldw	fp,0(sp)
   19ee4:	dec00204 	addi	sp,sp,8
   19ee8:	f800283a 	ret

00019eec <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   19eec:	defff404 	addi	sp,sp,-48
   19ef0:	dfc00b15 	stw	ra,44(sp)
   19ef4:	df000a15 	stw	fp,40(sp)
   19ef8:	df000a04 	addi	fp,sp,40
   19efc:	2005883a 	mov	r2,r4
   19f00:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   19f04:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   19f08:	e0bfff03 	ldbu	r2,-4(fp)
   19f0c:	10800530 	cmpltui	r2,r2,20
   19f10:	1000021e 	bne	r2,zero,19f1c <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   19f14:	00800a84 	movi	r2,42
   19f18:	00006406 	br	1a0ac <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19f1c:	0005303a 	rdctl	r2,status
   19f20:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19f24:	e0fffe17 	ldw	r3,-8(fp)
   19f28:	00bfff84 	movi	r2,-2
   19f2c:	1884703a 	and	r2,r3,r2
   19f30:	1001703a 	wrctl	status,r2
  
  return context;
   19f34:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   19f38:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   19f3c:	e0ffff03 	ldbu	r3,-4(fp)
   19f40:	008000f4 	movhi	r2,3
   19f44:	1092f304 	addi	r2,r2,19404
   19f48:	18c7883a 	add	r3,r3,r3
   19f4c:	18c7883a 	add	r3,r3,r3
   19f50:	10c5883a 	add	r2,r2,r3
   19f54:	10800017 	ldw	r2,0(r2)
   19f58:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   19f5c:	e0bff817 	ldw	r2,-32(fp)
   19f60:	1000061e 	bne	r2,zero,19f7c <OSTaskResume+0x90>
   19f64:	e0bff617 	ldw	r2,-40(fp)
   19f68:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19f6c:	e0bff717 	ldw	r2,-36(fp)
   19f70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   19f74:	00801184 	movi	r2,70
   19f78:	00004c06 	br	1a0ac <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   19f7c:	e0bff817 	ldw	r2,-32(fp)
   19f80:	10800058 	cmpnei	r2,r2,1
   19f84:	1000061e 	bne	r2,zero,19fa0 <OSTaskResume+0xb4>
   19f88:	e0bff617 	ldw	r2,-40(fp)
   19f8c:	e0bff915 	stw	r2,-28(fp)
   19f90:	e0bff917 	ldw	r2,-28(fp)
   19f94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   19f98:	008010c4 	movi	r2,67
   19f9c:	00004306 	br	1a0ac <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   19fa0:	e0bff817 	ldw	r2,-32(fp)
   19fa4:	10800c03 	ldbu	r2,48(r2)
   19fa8:	10803fcc 	andi	r2,r2,255
   19fac:	1080020c 	andi	r2,r2,8
   19fb0:	10003926 	beq	r2,zero,1a098 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   19fb4:	e0bff817 	ldw	r2,-32(fp)
   19fb8:	10c00c03 	ldbu	r3,48(r2)
   19fbc:	00bffdc4 	movi	r2,-9
   19fc0:	1884703a 	and	r2,r3,r2
   19fc4:	1007883a 	mov	r3,r2
   19fc8:	e0bff817 	ldw	r2,-32(fp)
   19fcc:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   19fd0:	e0bff817 	ldw	r2,-32(fp)
   19fd4:	10800c03 	ldbu	r2,48(r2)
   19fd8:	10803fcc 	andi	r2,r2,255
   19fdc:	1000281e 	bne	r2,zero,1a080 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
   19fe0:	e0bff817 	ldw	r2,-32(fp)
   19fe4:	10800b8b 	ldhu	r2,46(r2)
   19fe8:	10bfffcc 	andi	r2,r2,65535
   19fec:	10001f1e 	bne	r2,zero,1a06c <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   19ff0:	e0bff817 	ldw	r2,-32(fp)
   19ff4:	10c00d83 	ldbu	r3,54(r2)
   19ff8:	d0a82503 	ldbu	r2,-24428(gp)
   19ffc:	1884b03a 	or	r2,r3,r2
   1a000:	d0a82505 	stb	r2,-24428(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1a004:	e0bff817 	ldw	r2,-32(fp)
   1a008:	10800d03 	ldbu	r2,52(r2)
   1a00c:	10c03fcc 	andi	r3,r2,255
   1a010:	e0bff817 	ldw	r2,-32(fp)
   1a014:	10800d03 	ldbu	r2,52(r2)
   1a018:	11003fcc 	andi	r4,r2,255
   1a01c:	d0a82544 	addi	r2,gp,-24427
   1a020:	2085883a 	add	r2,r4,r2
   1a024:	11000003 	ldbu	r4,0(r2)
   1a028:	e0bff817 	ldw	r2,-32(fp)
   1a02c:	10800d43 	ldbu	r2,53(r2)
   1a030:	2084b03a 	or	r2,r4,r2
   1a034:	1009883a 	mov	r4,r2
   1a038:	d0a82544 	addi	r2,gp,-24427
   1a03c:	1885883a 	add	r2,r3,r2
   1a040:	11000005 	stb	r4,0(r2)
   1a044:	e0bff617 	ldw	r2,-40(fp)
   1a048:	e0bffa15 	stw	r2,-24(fp)
   1a04c:	e0bffa17 	ldw	r2,-24(fp)
   1a050:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   1a054:	d0a81943 	ldbu	r2,-24475(gp)
   1a058:	10803fcc 	andi	r2,r2,255
   1a05c:	10800058 	cmpnei	r2,r2,1
   1a060:	10000b1e 	bne	r2,zero,1a090 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
   1a064:	0014c4c0 	call	14c4c <OS_Sched>
   1a068:	00000906 	br	1a090 <OSTaskResume+0x1a4>
   1a06c:	e0bff617 	ldw	r2,-40(fp)
   1a070:	e0bffb15 	stw	r2,-20(fp)
   1a074:	e0bffb17 	ldw	r2,-20(fp)
   1a078:	1001703a 	wrctl	status,r2
   1a07c:	00000406 	br	1a090 <OSTaskResume+0x1a4>
   1a080:	e0bff617 	ldw	r2,-40(fp)
   1a084:	e0bffc15 	stw	r2,-16(fp)
   1a088:	e0bffc17 	ldw	r2,-16(fp)
   1a08c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   1a090:	0005883a 	mov	r2,zero
   1a094:	00000506 	br	1a0ac <OSTaskResume+0x1c0>
   1a098:	e0bff617 	ldw	r2,-40(fp)
   1a09c:	e0bffd15 	stw	r2,-12(fp)
   1a0a0:	e0bffd17 	ldw	r2,-12(fp)
   1a0a4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   1a0a8:	00801104 	movi	r2,68
}
   1a0ac:	e037883a 	mov	sp,fp
   1a0b0:	dfc00117 	ldw	ra,4(sp)
   1a0b4:	df000017 	ldw	fp,0(sp)
   1a0b8:	dec00204 	addi	sp,sp,8
   1a0bc:	f800283a 	ret

0001a0c0 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   1a0c0:	defff304 	addi	sp,sp,-52
   1a0c4:	df000c15 	stw	fp,48(sp)
   1a0c8:	df000c04 	addi	fp,sp,48
   1a0cc:	2005883a 	mov	r2,r4
   1a0d0:	e17fff15 	stw	r5,-4(fp)
   1a0d4:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1a0d8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   1a0dc:	e0bffe03 	ldbu	r2,-8(fp)
   1a0e0:	10800570 	cmpltui	r2,r2,21
   1a0e4:	1000051e 	bne	r2,zero,1a0fc <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   1a0e8:	e0bffe03 	ldbu	r2,-8(fp)
   1a0ec:	10803fe0 	cmpeqi	r2,r2,255
   1a0f0:	1000021e 	bne	r2,zero,1a0fc <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   1a0f4:	00800a84 	movi	r2,42
   1a0f8:	00005d06 	br	1a270 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   1a0fc:	e0bfff17 	ldw	r2,-4(fp)
   1a100:	1000021e 	bne	r2,zero,1a10c <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   1a104:	00800244 	movi	r2,9
   1a108:	00005906 	br	1a270 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   1a10c:	e0bfff17 	ldw	r2,-4(fp)
   1a110:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   1a114:	e0bfff17 	ldw	r2,-4(fp)
   1a118:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a11c:	0005303a 	rdctl	r2,status
   1a120:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a124:	e0fffd17 	ldw	r3,-12(fp)
   1a128:	00bfff84 	movi	r2,-2
   1a12c:	1884703a 	and	r2,r3,r2
   1a130:	1001703a 	wrctl	status,r2
  
  return context;
   1a134:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
   1a138:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   1a13c:	e0bffe03 	ldbu	r2,-8(fp)
   1a140:	10803fd8 	cmpnei	r2,r2,255
   1a144:	1000031e 	bne	r2,zero,1a154 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
   1a148:	d0a82817 	ldw	r2,-24416(gp)
   1a14c:	10800c83 	ldbu	r2,50(r2)
   1a150:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1a154:	e0fffe03 	ldbu	r3,-8(fp)
   1a158:	008000f4 	movhi	r2,3
   1a15c:	1092f304 	addi	r2,r2,19404
   1a160:	18c7883a 	add	r3,r3,r3
   1a164:	18c7883a 	add	r3,r3,r3
   1a168:	10c5883a 	add	r2,r2,r3
   1a16c:	10800017 	ldw	r2,0(r2)
   1a170:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   1a174:	e0bff817 	ldw	r2,-32(fp)
   1a178:	1000061e 	bne	r2,zero,1a194 <OSTaskStkChk+0xd4>
   1a17c:	e0bff617 	ldw	r2,-40(fp)
   1a180:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a184:	e0bff717 	ldw	r2,-36(fp)
   1a188:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1a18c:	008010c4 	movi	r2,67
   1a190:	00003706 	br	1a270 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1a194:	e0bff817 	ldw	r2,-32(fp)
   1a198:	10800058 	cmpnei	r2,r2,1
   1a19c:	1000061e 	bne	r2,zero,1a1b8 <OSTaskStkChk+0xf8>
   1a1a0:	e0bff617 	ldw	r2,-40(fp)
   1a1a4:	e0bff915 	stw	r2,-28(fp)
   1a1a8:	e0bff917 	ldw	r2,-28(fp)
   1a1ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1a1b0:	008010c4 	movi	r2,67
   1a1b4:	00002e06 	br	1a270 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   1a1b8:	e0bff817 	ldw	r2,-32(fp)
   1a1bc:	1080040b 	ldhu	r2,16(r2)
   1a1c0:	10bfffcc 	andi	r2,r2,65535
   1a1c4:	1080004c 	andi	r2,r2,1
   1a1c8:	1000061e 	bne	r2,zero,1a1e4 <OSTaskStkChk+0x124>
   1a1cc:	e0bff617 	ldw	r2,-40(fp)
   1a1d0:	e0bffa15 	stw	r2,-24(fp)
   1a1d4:	e0bffa17 	ldw	r2,-24(fp)
   1a1d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   1a1dc:	00801144 	movi	r2,69
   1a1e0:	00002306 	br	1a270 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
   1a1e4:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   1a1e8:	e0bff817 	ldw	r2,-32(fp)
   1a1ec:	10800317 	ldw	r2,12(r2)
   1a1f0:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
   1a1f4:	e0bff817 	ldw	r2,-32(fp)
   1a1f8:	10800217 	ldw	r2,8(r2)
   1a1fc:	e0bff415 	stw	r2,-48(fp)
   1a200:	e0bff617 	ldw	r2,-40(fp)
   1a204:	e0bffb15 	stw	r2,-20(fp)
   1a208:	e0bffb17 	ldw	r2,-20(fp)
   1a20c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1a210:	00000306 	br	1a220 <OSTaskStkChk+0x160>
        nfree++;
   1a214:	e0bff517 	ldw	r2,-44(fp)
   1a218:	10800044 	addi	r2,r2,1
   1a21c:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1a220:	e0bff417 	ldw	r2,-48(fp)
   1a224:	10c00104 	addi	r3,r2,4
   1a228:	e0fff415 	stw	r3,-48(fp)
   1a22c:	10800017 	ldw	r2,0(r2)
   1a230:	103ff826 	beq	r2,zero,1a214 <OSTaskStkChk+0x154>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   1a234:	e0bff517 	ldw	r2,-44(fp)
   1a238:	1085883a 	add	r2,r2,r2
   1a23c:	1085883a 	add	r2,r2,r2
   1a240:	1007883a 	mov	r3,r2
   1a244:	e0bfff17 	ldw	r2,-4(fp)
   1a248:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   1a24c:	e0fffc17 	ldw	r3,-16(fp)
   1a250:	e0bff517 	ldw	r2,-44(fp)
   1a254:	1885c83a 	sub	r2,r3,r2
   1a258:	1085883a 	add	r2,r2,r2
   1a25c:	1085883a 	add	r2,r2,r2
   1a260:	1007883a 	mov	r3,r2
   1a264:	e0bfff17 	ldw	r2,-4(fp)
   1a268:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   1a26c:	0005883a 	mov	r2,zero
}
   1a270:	e037883a 	mov	sp,fp
   1a274:	df000017 	ldw	fp,0(sp)
   1a278:	dec00104 	addi	sp,sp,4
   1a27c:	f800283a 	ret

0001a280 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   1a280:	defff504 	addi	sp,sp,-44
   1a284:	dfc00a15 	stw	ra,40(sp)
   1a288:	df000915 	stw	fp,36(sp)
   1a28c:	df000904 	addi	fp,sp,36
   1a290:	2005883a 	mov	r2,r4
   1a294:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1a298:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   1a29c:	e0bfff03 	ldbu	r2,-4(fp)
   1a2a0:	10800518 	cmpnei	r2,r2,20
   1a2a4:	1000021e 	bne	r2,zero,1a2b0 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   1a2a8:	008011c4 	movi	r2,71
   1a2ac:	00006806 	br	1a450 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1a2b0:	e0bfff03 	ldbu	r2,-4(fp)
   1a2b4:	10800530 	cmpltui	r2,r2,20
   1a2b8:	1000051e 	bne	r2,zero,1a2d0 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   1a2bc:	e0bfff03 	ldbu	r2,-4(fp)
   1a2c0:	10803fe0 	cmpeqi	r2,r2,255
   1a2c4:	1000021e 	bne	r2,zero,1a2d0 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   1a2c8:	00800a84 	movi	r2,42
   1a2cc:	00006006 	br	1a450 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a2d0:	0005303a 	rdctl	r2,status
   1a2d4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a2d8:	e0fffe17 	ldw	r3,-8(fp)
   1a2dc:	00bfff84 	movi	r2,-2
   1a2e0:	1884703a 	and	r2,r3,r2
   1a2e4:	1001703a 	wrctl	status,r2
  
  return context;
   1a2e8:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   1a2ec:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   1a2f0:	e0bfff03 	ldbu	r2,-4(fp)
   1a2f4:	10803fd8 	cmpnei	r2,r2,255
   1a2f8:	1000061e 	bne	r2,zero,1a314 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
   1a2fc:	d0a82817 	ldw	r2,-24416(gp)
   1a300:	10800c83 	ldbu	r2,50(r2)
   1a304:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   1a308:	00800044 	movi	r2,1
   1a30c:	e0bff705 	stb	r2,-36(fp)
   1a310:	00000906 	br	1a338 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   1a314:	d0a82817 	ldw	r2,-24416(gp)
   1a318:	10800c83 	ldbu	r2,50(r2)
   1a31c:	10c03fcc 	andi	r3,r2,255
   1a320:	e0bfff03 	ldbu	r2,-4(fp)
   1a324:	1880031e 	bne	r3,r2,1a334 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
   1a328:	00800044 	movi	r2,1
   1a32c:	e0bff705 	stb	r2,-36(fp)
   1a330:	00000106 	br	1a338 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   1a334:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1a338:	e0ffff03 	ldbu	r3,-4(fp)
   1a33c:	008000f4 	movhi	r2,3
   1a340:	1092f304 	addi	r2,r2,19404
   1a344:	18c7883a 	add	r3,r3,r3
   1a348:	18c7883a 	add	r3,r3,r3
   1a34c:	10c5883a 	add	r2,r2,r3
   1a350:	10800017 	ldw	r2,0(r2)
   1a354:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   1a358:	e0bffa17 	ldw	r2,-24(fp)
   1a35c:	1000061e 	bne	r2,zero,1a378 <OSTaskSuspend+0xf8>
   1a360:	e0bff817 	ldw	r2,-32(fp)
   1a364:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a368:	e0bff917 	ldw	r2,-28(fp)
   1a36c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   1a370:	00801204 	movi	r2,72
   1a374:	00003606 	br	1a450 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   1a378:	e0bffa17 	ldw	r2,-24(fp)
   1a37c:	10800058 	cmpnei	r2,r2,1
   1a380:	1000061e 	bne	r2,zero,1a39c <OSTaskSuspend+0x11c>
   1a384:	e0bff817 	ldw	r2,-32(fp)
   1a388:	e0bffb15 	stw	r2,-20(fp)
   1a38c:	e0bffb17 	ldw	r2,-20(fp)
   1a390:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1a394:	008010c4 	movi	r2,67
   1a398:	00002d06 	br	1a450 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
   1a39c:	e0bffa17 	ldw	r2,-24(fp)
   1a3a0:	10800d03 	ldbu	r2,52(r2)
   1a3a4:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   1a3a8:	e0fffd03 	ldbu	r3,-12(fp)
   1a3ac:	e13ffd03 	ldbu	r4,-12(fp)
   1a3b0:	d0a82544 	addi	r2,gp,-24427
   1a3b4:	2085883a 	add	r2,r4,r2
   1a3b8:	10800003 	ldbu	r2,0(r2)
   1a3bc:	1009883a 	mov	r4,r2
   1a3c0:	e0bffa17 	ldw	r2,-24(fp)
   1a3c4:	10800d43 	ldbu	r2,53(r2)
   1a3c8:	0084303a 	nor	r2,zero,r2
   1a3cc:	2084703a 	and	r2,r4,r2
   1a3d0:	1009883a 	mov	r4,r2
   1a3d4:	d0a82544 	addi	r2,gp,-24427
   1a3d8:	1885883a 	add	r2,r3,r2
   1a3dc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   1a3e0:	e0fffd03 	ldbu	r3,-12(fp)
   1a3e4:	d0a82544 	addi	r2,gp,-24427
   1a3e8:	1885883a 	add	r2,r3,r2
   1a3ec:	10800003 	ldbu	r2,0(r2)
   1a3f0:	10803fcc 	andi	r2,r2,255
   1a3f4:	1000071e 	bne	r2,zero,1a414 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   1a3f8:	e0bffa17 	ldw	r2,-24(fp)
   1a3fc:	10800d83 	ldbu	r2,54(r2)
   1a400:	0084303a 	nor	r2,zero,r2
   1a404:	1007883a 	mov	r3,r2
   1a408:	d0a82503 	ldbu	r2,-24428(gp)
   1a40c:	1884703a 	and	r2,r3,r2
   1a410:	d0a82505 	stb	r2,-24428(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   1a414:	e0bffa17 	ldw	r2,-24(fp)
   1a418:	10800c03 	ldbu	r2,48(r2)
   1a41c:	10800214 	ori	r2,r2,8
   1a420:	1007883a 	mov	r3,r2
   1a424:	e0bffa17 	ldw	r2,-24(fp)
   1a428:	10c00c05 	stb	r3,48(r2)
   1a42c:	e0bff817 	ldw	r2,-32(fp)
   1a430:	e0bffc15 	stw	r2,-16(fp)
   1a434:	e0bffc17 	ldw	r2,-16(fp)
   1a438:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   1a43c:	e0bff703 	ldbu	r2,-36(fp)
   1a440:	10800058 	cmpnei	r2,r2,1
   1a444:	1000011e 	bne	r2,zero,1a44c <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
   1a448:	0014c4c0 	call	14c4c <OS_Sched>
    }
    return (OS_ERR_NONE);
   1a44c:	0005883a 	mov	r2,zero
}
   1a450:	e037883a 	mov	sp,fp
   1a454:	dfc00117 	ldw	ra,4(sp)
   1a458:	df000017 	ldw	fp,0(sp)
   1a45c:	dec00204 	addi	sp,sp,8
   1a460:	f800283a 	ret

0001a464 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   1a464:	defff604 	addi	sp,sp,-40
   1a468:	dfc00915 	stw	ra,36(sp)
   1a46c:	df000815 	stw	fp,32(sp)
   1a470:	df000804 	addi	fp,sp,32
   1a474:	2005883a 	mov	r2,r4
   1a478:	e17fff15 	stw	r5,-4(fp)
   1a47c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1a480:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   1a484:	e0bffe03 	ldbu	r2,-8(fp)
   1a488:	10800570 	cmpltui	r2,r2,21
   1a48c:	1000051e 	bne	r2,zero,1a4a4 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   1a490:	e0bffe03 	ldbu	r2,-8(fp)
   1a494:	10803fe0 	cmpeqi	r2,r2,255
   1a498:	1000021e 	bne	r2,zero,1a4a4 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   1a49c:	00800a84 	movi	r2,42
   1a4a0:	00003406 	br	1a574 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   1a4a4:	e0bfff17 	ldw	r2,-4(fp)
   1a4a8:	1000021e 	bne	r2,zero,1a4b4 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   1a4ac:	00800244 	movi	r2,9
   1a4b0:	00003006 	br	1a574 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a4b4:	0005303a 	rdctl	r2,status
   1a4b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a4bc:	e0fffd17 	ldw	r3,-12(fp)
   1a4c0:	00bfff84 	movi	r2,-2
   1a4c4:	1884703a 	and	r2,r3,r2
   1a4c8:	1001703a 	wrctl	status,r2
  
  return context;
   1a4cc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1a4d0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   1a4d4:	e0bffe03 	ldbu	r2,-8(fp)
   1a4d8:	10803fd8 	cmpnei	r2,r2,255
   1a4dc:	1000031e 	bne	r2,zero,1a4ec <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
   1a4e0:	d0a82817 	ldw	r2,-24416(gp)
   1a4e4:	10800c83 	ldbu	r2,50(r2)
   1a4e8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1a4ec:	e0fffe03 	ldbu	r3,-8(fp)
   1a4f0:	008000f4 	movhi	r2,3
   1a4f4:	1092f304 	addi	r2,r2,19404
   1a4f8:	18c7883a 	add	r3,r3,r3
   1a4fc:	18c7883a 	add	r3,r3,r3
   1a500:	10c5883a 	add	r2,r2,r3
   1a504:	10800017 	ldw	r2,0(r2)
   1a508:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   1a50c:	e0bffa17 	ldw	r2,-24(fp)
   1a510:	1000061e 	bne	r2,zero,1a52c <OSTaskQuery+0xc8>
   1a514:	e0bff817 	ldw	r2,-32(fp)
   1a518:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a51c:	e0bff917 	ldw	r2,-28(fp)
   1a520:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   1a524:	00800a44 	movi	r2,41
   1a528:	00001206 	br	1a574 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   1a52c:	e0bffa17 	ldw	r2,-24(fp)
   1a530:	10800058 	cmpnei	r2,r2,1
   1a534:	1000061e 	bne	r2,zero,1a550 <OSTaskQuery+0xec>
   1a538:	e0bff817 	ldw	r2,-32(fp)
   1a53c:	e0bffb15 	stw	r2,-20(fp)
   1a540:	e0bffb17 	ldw	r2,-20(fp)
   1a544:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1a548:	008010c4 	movi	r2,67
   1a54c:	00000906 	br	1a574 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   1a550:	01801b04 	movi	r6,108
   1a554:	e17ffa17 	ldw	r5,-24(fp)
   1a558:	e13fff17 	ldw	r4,-4(fp)
   1a55c:	0014be40 	call	14be4 <OS_MemCopy>
   1a560:	e0bff817 	ldw	r2,-32(fp)
   1a564:	e0bffc15 	stw	r2,-16(fp)
   1a568:	e0bffc17 	ldw	r2,-16(fp)
   1a56c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1a570:	0005883a 	mov	r2,zero
}
   1a574:	e037883a 	mov	sp,fp
   1a578:	dfc00117 	ldw	ra,4(sp)
   1a57c:	df000017 	ldw	fp,0(sp)
   1a580:	dec00204 	addi	sp,sp,8
   1a584:	f800283a 	ret

0001a588 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   1a588:	defffc04 	addi	sp,sp,-16
   1a58c:	df000315 	stw	fp,12(sp)
   1a590:	df000304 	addi	fp,sp,12
   1a594:	e13ffd15 	stw	r4,-12(fp)
   1a598:	e17ffe15 	stw	r5,-8(fp)
   1a59c:	3005883a 	mov	r2,r6
   1a5a0:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   1a5a4:	e0bfff0b 	ldhu	r2,-4(fp)
   1a5a8:	1080004c 	andi	r2,r2,1
   1a5ac:	10000d26 	beq	r2,zero,1a5e4 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   1a5b0:	e0bfff0b 	ldhu	r2,-4(fp)
   1a5b4:	1080008c 	andi	r2,r2,2
   1a5b8:	10000a26 	beq	r2,zero,1a5e4 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1a5bc:	00000706 	br	1a5dc <OS_TaskStkClr+0x54>
                size--;
   1a5c0:	e0bffe17 	ldw	r2,-8(fp)
   1a5c4:	10bfffc4 	addi	r2,r2,-1
   1a5c8:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   1a5cc:	e0bffd17 	ldw	r2,-12(fp)
   1a5d0:	10c00104 	addi	r3,r2,4
   1a5d4:	e0fffd15 	stw	r3,-12(fp)
   1a5d8:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1a5dc:	e0bffe17 	ldw	r2,-8(fp)
   1a5e0:	103ff71e 	bne	r2,zero,1a5c0 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   1a5e4:	0001883a 	nop
   1a5e8:	e037883a 	mov	sp,fp
   1a5ec:	df000017 	ldw	fp,0(sp)
   1a5f0:	dec00104 	addi	sp,sp,4
   1a5f4:	f800283a 	ret

0001a5f8 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   1a5f8:	defff904 	addi	sp,sp,-28
   1a5fc:	dfc00615 	stw	ra,24(sp)
   1a600:	df000515 	stw	fp,20(sp)
   1a604:	df000504 	addi	fp,sp,20
   1a608:	2005883a 	mov	r2,r4
   1a60c:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1a610:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1a614:	d0a82703 	ldbu	r2,-24420(gp)
   1a618:	10803fcc 	andi	r2,r2,255
   1a61c:	1000311e 	bne	r2,zero,1a6e4 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   1a620:	e0bfff0b 	ldhu	r2,-4(fp)
   1a624:	10003026 	beq	r2,zero,1a6e8 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a628:	0005303a 	rdctl	r2,status
   1a62c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a630:	e0fffe17 	ldw	r3,-8(fp)
   1a634:	00bfff84 	movi	r2,-2
   1a638:	1884703a 	and	r2,r3,r2
   1a63c:	1001703a 	wrctl	status,r2
  
  return context;
   1a640:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   1a644:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   1a648:	d0a82817 	ldw	r2,-24416(gp)
   1a64c:	10800d03 	ldbu	r2,52(r2)
   1a650:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   1a654:	e0fffd03 	ldbu	r3,-12(fp)
   1a658:	e13ffd03 	ldbu	r4,-12(fp)
   1a65c:	d0a82544 	addi	r2,gp,-24427
   1a660:	2085883a 	add	r2,r4,r2
   1a664:	10800003 	ldbu	r2,0(r2)
   1a668:	1009883a 	mov	r4,r2
   1a66c:	d0a82817 	ldw	r2,-24416(gp)
   1a670:	10800d43 	ldbu	r2,53(r2)
   1a674:	0084303a 	nor	r2,zero,r2
   1a678:	2084703a 	and	r2,r4,r2
   1a67c:	1009883a 	mov	r4,r2
   1a680:	d0a82544 	addi	r2,gp,-24427
   1a684:	1885883a 	add	r2,r3,r2
   1a688:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   1a68c:	e0fffd03 	ldbu	r3,-12(fp)
   1a690:	d0a82544 	addi	r2,gp,-24427
   1a694:	1885883a 	add	r2,r3,r2
   1a698:	10800003 	ldbu	r2,0(r2)
   1a69c:	10803fcc 	andi	r2,r2,255
   1a6a0:	1000071e 	bne	r2,zero,1a6c0 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1a6a4:	d0a82817 	ldw	r2,-24416(gp)
   1a6a8:	10800d83 	ldbu	r2,54(r2)
   1a6ac:	0084303a 	nor	r2,zero,r2
   1a6b0:	1007883a 	mov	r3,r2
   1a6b4:	d0a82503 	ldbu	r2,-24428(gp)
   1a6b8:	1884703a 	and	r2,r3,r2
   1a6bc:	d0a82505 	stb	r2,-24428(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   1a6c0:	d0a82817 	ldw	r2,-24416(gp)
   1a6c4:	e0ffff0b 	ldhu	r3,-4(fp)
   1a6c8:	10c00b8d 	sth	r3,46(r2)
   1a6cc:	e0bffb17 	ldw	r2,-20(fp)
   1a6d0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a6d4:	e0bffc17 	ldw	r2,-16(fp)
   1a6d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   1a6dc:	0014c4c0 	call	14c4c <OS_Sched>
   1a6e0:	00000106 	br	1a6e8 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
   1a6e4:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
   1a6e8:	e037883a 	mov	sp,fp
   1a6ec:	dfc00117 	ldw	ra,4(sp)
   1a6f0:	df000017 	ldw	fp,0(sp)
   1a6f4:	dec00204 	addi	sp,sp,8
   1a6f8:	f800283a 	ret

0001a6fc <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   1a6fc:	defff804 	addi	sp,sp,-32
   1a700:	dfc00715 	stw	ra,28(sp)
   1a704:	df000615 	stw	fp,24(sp)
   1a708:	df000604 	addi	fp,sp,24
   1a70c:	2015883a 	mov	r10,r4
   1a710:	2809883a 	mov	r4,r5
   1a714:	3007883a 	mov	r3,r6
   1a718:	3805883a 	mov	r2,r7
   1a71c:	e2bffc05 	stb	r10,-16(fp)
   1a720:	e13ffd05 	stb	r4,-12(fp)
   1a724:	e0fffe05 	stb	r3,-8(fp)
   1a728:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1a72c:	d0a82703 	ldbu	r2,-24420(gp)
   1a730:	10803fcc 	andi	r2,r2,255
   1a734:	10000226 	beq	r2,zero,1a740 <OSTimeDlyHMSM+0x44>
        return (OS_ERR_TIME_DLY_ISR);
   1a738:	00801544 	movi	r2,85
   1a73c:	00004206 	br	1a848 <OSTimeDlyHMSM+0x14c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   1a740:	e0bffc03 	ldbu	r2,-16(fp)
   1a744:	1000081e 	bne	r2,zero,1a768 <OSTimeDlyHMSM+0x6c>
        if (minutes == 0) {
   1a748:	e0bffd03 	ldbu	r2,-12(fp)
   1a74c:	1000061e 	bne	r2,zero,1a768 <OSTimeDlyHMSM+0x6c>
            if (seconds == 0) {
   1a750:	e0bffe03 	ldbu	r2,-8(fp)
   1a754:	1000041e 	bne	r2,zero,1a768 <OSTimeDlyHMSM+0x6c>
                if (ms == 0) {
   1a758:	e0bfff0b 	ldhu	r2,-4(fp)
   1a75c:	1000021e 	bne	r2,zero,1a768 <OSTimeDlyHMSM+0x6c>
                    return (OS_ERR_TIME_ZERO_DLY);
   1a760:	00801504 	movi	r2,84
   1a764:	00003806 	br	1a848 <OSTimeDlyHMSM+0x14c>
                }
            }
        }
    }
    if (minutes > 59) {
   1a768:	e0bffd03 	ldbu	r2,-12(fp)
   1a76c:	10800f30 	cmpltui	r2,r2,60
   1a770:	1000021e 	bne	r2,zero,1a77c <OSTimeDlyHMSM+0x80>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   1a774:	00801444 	movi	r2,81
   1a778:	00003306 	br	1a848 <OSTimeDlyHMSM+0x14c>
    }
    if (seconds > 59) {
   1a77c:	e0bffe03 	ldbu	r2,-8(fp)
   1a780:	10800f30 	cmpltui	r2,r2,60
   1a784:	1000021e 	bne	r2,zero,1a790 <OSTimeDlyHMSM+0x94>
        return (OS_ERR_TIME_INVALID_SECONDS);
   1a788:	00801484 	movi	r2,82
   1a78c:	00002e06 	br	1a848 <OSTimeDlyHMSM+0x14c>
    }
    if (ms > 999) {
   1a790:	e0bfff0b 	ldhu	r2,-4(fp)
   1a794:	1080fa30 	cmpltui	r2,r2,1000
   1a798:	1000021e 	bne	r2,zero,1a7a4 <OSTimeDlyHMSM+0xa8>
        return (OS_ERR_TIME_INVALID_MS);
   1a79c:	008014c4 	movi	r2,83
   1a7a0:	00002906 	br	1a848 <OSTimeDlyHMSM+0x14c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1a7a4:	e0bffc03 	ldbu	r2,-16(fp)
   1a7a8:	10c38424 	muli	r3,r2,3600
   1a7ac:	e0bffd03 	ldbu	r2,-12(fp)
   1a7b0:	10800f24 	muli	r2,r2,60
   1a7b4:	1887883a 	add	r3,r3,r2
   1a7b8:	e0bffe03 	ldbu	r2,-8(fp)
   1a7bc:	1885883a 	add	r2,r3,r2
   1a7c0:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   1a7c4:	e0bfff0b 	ldhu	r2,-4(fp)
   1a7c8:	10800f84 	addi	r2,r2,62
   1a7cc:	100690fa 	slli	r3,r2,3
   1a7d0:	008418b4 	movhi	r2,4194
   1a7d4:	109374c4 	addi	r2,r2,19923
   1a7d8:	188a383a 	mulxuu	r5,r3,r2
   1a7dc:	1885383a 	mul	r2,r3,r2
   1a7e0:	1011883a 	mov	r8,r2
   1a7e4:	2813883a 	mov	r9,r5
   1a7e8:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1a7ec:	2085883a 	add	r2,r4,r2
   1a7f0:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   1a7f4:	e0bffb17 	ldw	r2,-20(fp)
   1a7f8:	1004d43a 	srli	r2,r2,16
   1a7fc:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   1a800:	e0bffb17 	ldw	r2,-20(fp)
   1a804:	10bfffcc 	andi	r2,r2,65535
   1a808:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   1a80c:	e0bffb17 	ldw	r2,-20(fp)
   1a810:	10bfffcc 	andi	r2,r2,65535
   1a814:	1009883a 	mov	r4,r2
   1a818:	001a5f80 	call	1a5f8 <OSTimeDly>
    while (loops > 0) {
   1a81c:	00000706 	br	1a83c <OSTimeDlyHMSM+0x140>
        OSTimeDly((INT16U)32768u);
   1a820:	01200014 	movui	r4,32768
   1a824:	001a5f80 	call	1a5f8 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   1a828:	01200014 	movui	r4,32768
   1a82c:	001a5f80 	call	1a5f8 <OSTimeDly>
        loops--;
   1a830:	e0bffa0b 	ldhu	r2,-24(fp)
   1a834:	10bfffc4 	addi	r2,r2,-1
   1a838:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   1a83c:	e0bffa0b 	ldhu	r2,-24(fp)
   1a840:	103ff71e 	bne	r2,zero,1a820 <OSTimeDlyHMSM+0x124>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   1a844:	0005883a 	mov	r2,zero
}
   1a848:	e037883a 	mov	sp,fp
   1a84c:	dfc00117 	ldw	ra,4(sp)
   1a850:	df000017 	ldw	fp,0(sp)
   1a854:	dec00204 	addi	sp,sp,8
   1a858:	f800283a 	ret

0001a85c <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   1a85c:	defff504 	addi	sp,sp,-44
   1a860:	dfc00a15 	stw	ra,40(sp)
   1a864:	df000915 	stw	fp,36(sp)
   1a868:	df000904 	addi	fp,sp,36
   1a86c:	2005883a 	mov	r2,r4
   1a870:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1a874:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   1a878:	e0bfff03 	ldbu	r2,-4(fp)
   1a87c:	10800530 	cmpltui	r2,r2,20
   1a880:	1000021e 	bne	r2,zero,1a88c <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   1a884:	00800a84 	movi	r2,42
   1a888:	00006406 	br	1aa1c <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a88c:	0005303a 	rdctl	r2,status
   1a890:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a894:	e0fffe17 	ldw	r3,-8(fp)
   1a898:	00bfff84 	movi	r2,-2
   1a89c:	1884703a 	and	r2,r3,r2
   1a8a0:	1001703a 	wrctl	status,r2
  
  return context;
   1a8a4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   1a8a8:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   1a8ac:	e0ffff03 	ldbu	r3,-4(fp)
   1a8b0:	008000f4 	movhi	r2,3
   1a8b4:	1092f304 	addi	r2,r2,19404
   1a8b8:	18c7883a 	add	r3,r3,r3
   1a8bc:	18c7883a 	add	r3,r3,r3
   1a8c0:	10c5883a 	add	r2,r2,r3
   1a8c4:	10800017 	ldw	r2,0(r2)
   1a8c8:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
   1a8cc:	e0bff917 	ldw	r2,-28(fp)
   1a8d0:	1000061e 	bne	r2,zero,1a8ec <OSTimeDlyResume+0x90>
   1a8d4:	e0bff717 	ldw	r2,-36(fp)
   1a8d8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a8dc:	e0bff817 	ldw	r2,-32(fp)
   1a8e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1a8e4:	008010c4 	movi	r2,67
   1a8e8:	00004c06 	br	1aa1c <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1a8ec:	e0bff917 	ldw	r2,-28(fp)
   1a8f0:	10800058 	cmpnei	r2,r2,1
   1a8f4:	1000061e 	bne	r2,zero,1a910 <OSTimeDlyResume+0xb4>
   1a8f8:	e0bff717 	ldw	r2,-36(fp)
   1a8fc:	e0bffa15 	stw	r2,-24(fp)
   1a900:	e0bffa17 	ldw	r2,-24(fp)
   1a904:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1a908:	008010c4 	movi	r2,67
   1a90c:	00004306 	br	1aa1c <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   1a910:	e0bff917 	ldw	r2,-28(fp)
   1a914:	10800b8b 	ldhu	r2,46(r2)
   1a918:	10bfffcc 	andi	r2,r2,65535
   1a91c:	1000061e 	bne	r2,zero,1a938 <OSTimeDlyResume+0xdc>
   1a920:	e0bff717 	ldw	r2,-36(fp)
   1a924:	e0bffb15 	stw	r2,-20(fp)
   1a928:	e0bffb17 	ldw	r2,-20(fp)
   1a92c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   1a930:	00801404 	movi	r2,80
   1a934:	00003906 	br	1aa1c <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   1a938:	e0bff917 	ldw	r2,-28(fp)
   1a93c:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   1a940:	e0bff917 	ldw	r2,-28(fp)
   1a944:	10800c03 	ldbu	r2,48(r2)
   1a948:	10803fcc 	andi	r2,r2,255
   1a94c:	10800dcc 	andi	r2,r2,55
   1a950:	10000b26 	beq	r2,zero,1a980 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   1a954:	e0bff917 	ldw	r2,-28(fp)
   1a958:	10c00c03 	ldbu	r3,48(r2)
   1a95c:	00bff204 	movi	r2,-56
   1a960:	1884703a 	and	r2,r3,r2
   1a964:	1007883a 	mov	r3,r2
   1a968:	e0bff917 	ldw	r2,-28(fp)
   1a96c:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   1a970:	e0bff917 	ldw	r2,-28(fp)
   1a974:	00c00044 	movi	r3,1
   1a978:	10c00c45 	stb	r3,49(r2)
   1a97c:	00000206 	br	1a988 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   1a980:	e0bff917 	ldw	r2,-28(fp)
   1a984:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   1a988:	e0bff917 	ldw	r2,-28(fp)
   1a98c:	10800c03 	ldbu	r2,48(r2)
   1a990:	10803fcc 	andi	r2,r2,255
   1a994:	1080020c 	andi	r2,r2,8
   1a998:	10001b1e 	bne	r2,zero,1aa08 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   1a99c:	e0bff917 	ldw	r2,-28(fp)
   1a9a0:	10c00d83 	ldbu	r3,54(r2)
   1a9a4:	d0a82503 	ldbu	r2,-24428(gp)
   1a9a8:	1884b03a 	or	r2,r3,r2
   1a9ac:	d0a82505 	stb	r2,-24428(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1a9b0:	e0bff917 	ldw	r2,-28(fp)
   1a9b4:	10800d03 	ldbu	r2,52(r2)
   1a9b8:	10c03fcc 	andi	r3,r2,255
   1a9bc:	e0bff917 	ldw	r2,-28(fp)
   1a9c0:	10800d03 	ldbu	r2,52(r2)
   1a9c4:	11003fcc 	andi	r4,r2,255
   1a9c8:	d0a82544 	addi	r2,gp,-24427
   1a9cc:	2085883a 	add	r2,r4,r2
   1a9d0:	11000003 	ldbu	r4,0(r2)
   1a9d4:	e0bff917 	ldw	r2,-28(fp)
   1a9d8:	10800d43 	ldbu	r2,53(r2)
   1a9dc:	2084b03a 	or	r2,r4,r2
   1a9e0:	1009883a 	mov	r4,r2
   1a9e4:	d0a82544 	addi	r2,gp,-24427
   1a9e8:	1885883a 	add	r2,r3,r2
   1a9ec:	11000005 	stb	r4,0(r2)
   1a9f0:	e0bff717 	ldw	r2,-36(fp)
   1a9f4:	e0bffc15 	stw	r2,-16(fp)
   1a9f8:	e0bffc17 	ldw	r2,-16(fp)
   1a9fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   1aa00:	0014c4c0 	call	14c4c <OS_Sched>
   1aa04:	00000406 	br	1aa18 <OSTimeDlyResume+0x1bc>
   1aa08:	e0bff717 	ldw	r2,-36(fp)
   1aa0c:	e0bffd15 	stw	r2,-12(fp)
   1aa10:	e0bffd17 	ldw	r2,-12(fp)
   1aa14:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   1aa18:	0005883a 	mov	r2,zero
}
   1aa1c:	e037883a 	mov	sp,fp
   1aa20:	dfc00117 	ldw	ra,4(sp)
   1aa24:	df000017 	ldw	fp,0(sp)
   1aa28:	dec00204 	addi	sp,sp,8
   1aa2c:	f800283a 	ret

0001aa30 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   1aa30:	defffb04 	addi	sp,sp,-20
   1aa34:	df000415 	stw	fp,16(sp)
   1aa38:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1aa3c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1aa40:	0005303a 	rdctl	r2,status
   1aa44:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1aa48:	e0fffe17 	ldw	r3,-8(fp)
   1aa4c:	00bfff84 	movi	r2,-2
   1aa50:	1884703a 	and	r2,r3,r2
   1aa54:	1001703a 	wrctl	status,r2
  
  return context;
   1aa58:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   1aa5c:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   1aa60:	d0a82917 	ldw	r2,-24412(gp)
   1aa64:	e0bffd15 	stw	r2,-12(fp)
   1aa68:	e0bffc17 	ldw	r2,-16(fp)
   1aa6c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1aa70:	e0bfff17 	ldw	r2,-4(fp)
   1aa74:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   1aa78:	e0bffd17 	ldw	r2,-12(fp)
}
   1aa7c:	e037883a 	mov	sp,fp
   1aa80:	df000017 	ldw	fp,0(sp)
   1aa84:	dec00104 	addi	sp,sp,4
   1aa88:	f800283a 	ret

0001aa8c <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   1aa8c:	defffb04 	addi	sp,sp,-20
   1aa90:	df000415 	stw	fp,16(sp)
   1aa94:	df000404 	addi	fp,sp,16
   1aa98:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1aa9c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1aaa0:	0005303a 	rdctl	r2,status
   1aaa4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1aaa8:	e0fffd17 	ldw	r3,-12(fp)
   1aaac:	00bfff84 	movi	r2,-2
   1aab0:	1884703a 	and	r2,r3,r2
   1aab4:	1001703a 	wrctl	status,r2
  
  return context;
   1aab8:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   1aabc:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   1aac0:	e0bfff17 	ldw	r2,-4(fp)
   1aac4:	d0a82915 	stw	r2,-24412(gp)
   1aac8:	e0bffc17 	ldw	r2,-16(fp)
   1aacc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1aad0:	e0bffe17 	ldw	r2,-8(fp)
   1aad4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   1aad8:	0001883a 	nop
   1aadc:	e037883a 	mov	sp,fp
   1aae0:	df000017 	ldw	fp,0(sp)
   1aae4:	dec00104 	addi	sp,sp,4
   1aae8:	f800283a 	ret

0001aaec <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1aaec:	defffd04 	addi	sp,sp,-12
   1aaf0:	dfc00215 	stw	ra,8(sp)
   1aaf4:	df000115 	stw	fp,4(sp)
   1aaf8:	df000104 	addi	fp,sp,4
   1aafc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1ab00:	d1600904 	addi	r5,gp,-32732
   1ab04:	e13fff17 	ldw	r4,-4(fp)
   1ab08:	001d7200 	call	1d720 <alt_dev_llist_insert>
}
   1ab0c:	e037883a 	mov	sp,fp
   1ab10:	dfc00117 	ldw	ra,4(sp)
   1ab14:	df000017 	ldw	fp,0(sp)
   1ab18:	dec00204 	addi	sp,sp,8
   1ab1c:	f800283a 	ret

0001ab20 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1ab20:	defffd04 	addi	sp,sp,-12
   1ab24:	dfc00215 	stw	ra,8(sp)
   1ab28:	df000115 	stw	fp,4(sp)
   1ab2c:	df000104 	addi	fp,sp,4
   1ab30:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   1ab34:	001e0000 	call	1e000 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1ab38:	00800044 	movi	r2,1
   1ab3c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1ab40:	0001883a 	nop
   1ab44:	e037883a 	mov	sp,fp
   1ab48:	dfc00117 	ldw	ra,4(sp)
   1ab4c:	df000017 	ldw	fp,0(sp)
   1ab50:	dec00204 	addi	sp,sp,8
   1ab54:	f800283a 	ret

0001ab58 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1ab58:	defffb04 	addi	sp,sp,-20
   1ab5c:	dfc00415 	stw	ra,16(sp)
   1ab60:	df000315 	stw	fp,12(sp)
   1ab64:	df000304 	addi	fp,sp,12
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   1ab68:	01c00204 	movi	r7,8
   1ab6c:	000d883a 	mov	r6,zero
   1ab70:	000b883a 	mov	r5,zero
   1ab74:	013fc834 	movhi	r4,65312
   1ab78:	21080004 	addi	r4,r4,8192
   1ab7c:	001c2640 	call	1c264 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER_2, Interval_Timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   1ab80:	01800204 	movi	r6,8
   1ab84:	000b883a 	mov	r5,zero
   1ab88:	010000b4 	movhi	r4,2
   1ab8c:	21017004 	addi	r4,r4,1472
   1ab90:	001b6280 	call	1b628 <altera_avalon_jtag_uart_init>
   1ab94:	010000b4 	movhi	r4,2
   1ab98:	21016604 	addi	r4,r4,1432
   1ab9c:	001aaec0 	call	1aaec <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   1aba0:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   1aba4:	010000b4 	movhi	r4,2
   1aba8:	21058104 	addi	r4,r4,5636
   1abac:	001aaec0 	call	1aaec <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   1abb0:	010000b4 	movhi	r4,2
   1abb4:	21058d04 	addi	r4,r4,5684
   1abb8:	001aaec0 	call	1aaec <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   1abbc:	010000b4 	movhi	r4,2
   1abc0:	21059904 	addi	r4,r4,5732
   1abc4:	001c38c0 	call	1c38c <alt_up_character_lcd_init>
   1abc8:	010000b4 	movhi	r4,2
   1abcc:	21059904 	addi	r4,r4,5732
   1abd0:	001aaec0 	call	1aaec <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   1abd4:	010000b4 	movhi	r4,2
   1abd8:	2105a404 	addi	r4,r4,5776
   1abdc:	001aaec0 	call	1aaec <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   1abe0:	010000b4 	movhi	r4,2
   1abe4:	2105af04 	addi	r4,r4,5820
   1abe8:	001cc800 	call	1cc80 <alt_up_ps2_init>
   1abec:	010000b4 	movhi	r4,2
   1abf0:	2105af04 	addi	r4,r4,5820
   1abf4:	001aaec0 	call	1aaec <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   1abf8:	010000b4 	movhi	r4,2
   1abfc:	2105bd04 	addi	r4,r4,5876
   1ac00:	001cc800 	call	1cc80 <alt_up_ps2_init>
   1ac04:	010000b4 	movhi	r4,2
   1ac08:	2105bd04 	addi	r4,r4,5876
   1ac0c:	001aaec0 	call	1aaec <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   1ac10:	010000b4 	movhi	r4,2
   1ac14:	2105cb04 	addi	r4,r4,5932
   1ac18:	001aaec0 	call	1aaec <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   1ac1c:	010000b4 	movhi	r4,2
   1ac20:	2105d604 	addi	r4,r4,5976
   1ac24:	001aaec0 	call	1aaec <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_CHAR_BUF_SUBSYSTEM_CHAR_BUF_DMA, VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA);
   1ac28:	008000b4 	movhi	r2,2
   1ac2c:	1085e304 	addi	r2,r2,6028
   1ac30:	10800a17 	ldw	r2,40(r2)
   1ac34:	10800017 	ldw	r2,0(r2)
   1ac38:	1007883a 	mov	r3,r2
   1ac3c:	008000b4 	movhi	r2,2
   1ac40:	1085e304 	addi	r2,r2,6028
   1ac44:	10c00b15 	stw	r3,44(r2)
   1ac48:	008000b4 	movhi	r2,2
   1ac4c:	1085e304 	addi	r2,r2,6028
   1ac50:	10800a17 	ldw	r2,40(r2)
   1ac54:	10800104 	addi	r2,r2,4
   1ac58:	10800017 	ldw	r2,0(r2)
   1ac5c:	1007883a 	mov	r3,r2
   1ac60:	008000b4 	movhi	r2,2
   1ac64:	1085e304 	addi	r2,r2,6028
   1ac68:	10c00c15 	stw	r3,48(r2)
   1ac6c:	008000b4 	movhi	r2,2
   1ac70:	1085e304 	addi	r2,r2,6028
   1ac74:	10800a17 	ldw	r2,40(r2)
   1ac78:	10800204 	addi	r2,r2,8
   1ac7c:	10800017 	ldw	r2,0(r2)
   1ac80:	10ffffcc 	andi	r3,r2,65535
   1ac84:	008000b4 	movhi	r2,2
   1ac88:	1085e304 	addi	r2,r2,6028
   1ac8c:	10c01115 	stw	r3,68(r2)
   1ac90:	008000b4 	movhi	r2,2
   1ac94:	1085e304 	addi	r2,r2,6028
   1ac98:	10800a17 	ldw	r2,40(r2)
   1ac9c:	10800204 	addi	r2,r2,8
   1aca0:	10800017 	ldw	r2,0(r2)
   1aca4:	1006d43a 	srli	r3,r2,16
   1aca8:	008000b4 	movhi	r2,2
   1acac:	1085e304 	addi	r2,r2,6028
   1acb0:	10c01215 	stw	r3,72(r2)
   1acb4:	008000b4 	movhi	r2,2
   1acb8:	1085e304 	addi	r2,r2,6028
   1acbc:	10800a17 	ldw	r2,40(r2)
   1acc0:	10800304 	addi	r2,r2,12
   1acc4:	10800017 	ldw	r2,0(r2)
   1acc8:	1005d07a 	srai	r2,r2,1
   1accc:	10c0004c 	andi	r3,r2,1
   1acd0:	008000b4 	movhi	r2,2
   1acd4:	1085e304 	addi	r2,r2,6028
   1acd8:	10c00d15 	stw	r3,52(r2)
   1acdc:	008000b4 	movhi	r2,2
   1ace0:	1085e304 	addi	r2,r2,6028
   1ace4:	10800a17 	ldw	r2,40(r2)
   1ace8:	10800304 	addi	r2,r2,12
   1acec:	10800017 	ldw	r2,0(r2)
   1acf0:	1005d23a 	srai	r2,r2,8
   1acf4:	108003cc 	andi	r2,r2,15
   1acf8:	10800044 	addi	r2,r2,1
   1acfc:	1007883a 	mov	r3,r2
   1ad00:	008000b4 	movhi	r2,2
   1ad04:	1085e304 	addi	r2,r2,6028
   1ad08:	10c00e15 	stw	r3,56(r2)
   1ad0c:	008000b4 	movhi	r2,2
   1ad10:	1085e304 	addi	r2,r2,6028
   1ad14:	10800a17 	ldw	r2,40(r2)
   1ad18:	10800304 	addi	r2,r2,12
   1ad1c:	10800017 	ldw	r2,0(r2)
   1ad20:	1005d1ba 	srai	r2,r2,6
   1ad24:	108000cc 	andi	r2,r2,3
   1ad28:	10800044 	addi	r2,r2,1
   1ad2c:	1007883a 	mov	r3,r2
   1ad30:	008000b4 	movhi	r2,2
   1ad34:	1085e304 	addi	r2,r2,6028
   1ad38:	10c00f15 	stw	r3,60(r2)
   1ad3c:	008000b4 	movhi	r2,2
   1ad40:	1085e304 	addi	r2,r2,6028
   1ad44:	10800e17 	ldw	r2,56(r2)
   1ad48:	1007883a 	mov	r3,r2
   1ad4c:	008000b4 	movhi	r2,2
   1ad50:	1085e304 	addi	r2,r2,6028
   1ad54:	10800f17 	ldw	r2,60(r2)
   1ad58:	1885383a 	mul	r2,r3,r2
   1ad5c:	e0bffd05 	stb	r2,-12(fp)
   1ad60:	e0bffd03 	ldbu	r2,-12(fp)
   1ad64:	10800268 	cmpgeui	r2,r2,9
   1ad68:	1000051e 	bne	r2,zero,1ad80 <alt_sys_init+0x228>
   1ad6c:	008000b4 	movhi	r2,2
   1ad70:	1085e304 	addi	r2,r2,6028
   1ad74:	00c00044 	movi	r3,1
   1ad78:	10c01015 	stw	r3,64(r2)
   1ad7c:	00000c06 	br	1adb0 <alt_sys_init+0x258>
   1ad80:	e0bffd03 	ldbu	r2,-12(fp)
   1ad84:	10800468 	cmpgeui	r2,r2,17
   1ad88:	1000051e 	bne	r2,zero,1ada0 <alt_sys_init+0x248>
   1ad8c:	008000b4 	movhi	r2,2
   1ad90:	1085e304 	addi	r2,r2,6028
   1ad94:	00c00084 	movi	r3,2
   1ad98:	10c01015 	stw	r3,64(r2)
   1ad9c:	00000406 	br	1adb0 <alt_sys_init+0x258>
   1ada0:	008000b4 	movhi	r2,2
   1ada4:	1085e304 	addi	r2,r2,6028
   1ada8:	00c00104 	movi	r3,4
   1adac:	10c01015 	stw	r3,64(r2)
   1adb0:	008000b4 	movhi	r2,2
   1adb4:	1085e304 	addi	r2,r2,6028
   1adb8:	10800a17 	ldw	r2,40(r2)
   1adbc:	10800304 	addi	r2,r2,12
   1adc0:	10800017 	ldw	r2,0(r2)
   1adc4:	1005d43a 	srai	r2,r2,16
   1adc8:	e0bffd45 	stb	r2,-11(fp)
   1adcc:	008000b4 	movhi	r2,2
   1add0:	1085e304 	addi	r2,r2,6028
   1add4:	10800a17 	ldw	r2,40(r2)
   1add8:	10800304 	addi	r2,r2,12
   1addc:	10800017 	ldw	r2,0(r2)
   1ade0:	1004d63a 	srli	r2,r2,24
   1ade4:	e0bffd85 	stb	r2,-10(fp)
   1ade8:	008000b4 	movhi	r2,2
   1adec:	1085e304 	addi	r2,r2,6028
   1adf0:	10801017 	ldw	r2,64(r2)
   1adf4:	10800058 	cmpnei	r2,r2,1
   1adf8:	1000041e 	bne	r2,zero,1ae0c <alt_sys_init+0x2b4>
   1adfc:	008000b4 	movhi	r2,2
   1ae00:	1085e304 	addi	r2,r2,6028
   1ae04:	10001315 	stw	zero,76(r2)
   1ae08:	00000e06 	br	1ae44 <alt_sys_init+0x2ec>
   1ae0c:	008000b4 	movhi	r2,2
   1ae10:	1085e304 	addi	r2,r2,6028
   1ae14:	10801017 	ldw	r2,64(r2)
   1ae18:	10800098 	cmpnei	r2,r2,2
   1ae1c:	1000051e 	bne	r2,zero,1ae34 <alt_sys_init+0x2dc>
   1ae20:	008000b4 	movhi	r2,2
   1ae24:	1085e304 	addi	r2,r2,6028
   1ae28:	00c00044 	movi	r3,1
   1ae2c:	10c01315 	stw	r3,76(r2)
   1ae30:	00000406 	br	1ae44 <alt_sys_init+0x2ec>
   1ae34:	008000b4 	movhi	r2,2
   1ae38:	1085e304 	addi	r2,r2,6028
   1ae3c:	00c00084 	movi	r3,2
   1ae40:	10c01315 	stw	r3,76(r2)
   1ae44:	e0bffd43 	ldbu	r2,-11(fp)
   1ae48:	00c00804 	movi	r3,32
   1ae4c:	1885c83a 	sub	r2,r3,r2
   1ae50:	00ffffc4 	movi	r3,-1
   1ae54:	1886d83a 	srl	r3,r3,r2
   1ae58:	008000b4 	movhi	r2,2
   1ae5c:	1085e304 	addi	r2,r2,6028
   1ae60:	10c01415 	stw	r3,80(r2)
   1ae64:	e0fffd43 	ldbu	r3,-11(fp)
   1ae68:	008000b4 	movhi	r2,2
   1ae6c:	1085e304 	addi	r2,r2,6028
   1ae70:	10801317 	ldw	r2,76(r2)
   1ae74:	1887883a 	add	r3,r3,r2
   1ae78:	008000b4 	movhi	r2,2
   1ae7c:	1085e304 	addi	r2,r2,6028
   1ae80:	10c01515 	stw	r3,84(r2)
   1ae84:	e0bffd83 	ldbu	r2,-10(fp)
   1ae88:	00c00804 	movi	r3,32
   1ae8c:	1885c83a 	sub	r2,r3,r2
   1ae90:	00ffffc4 	movi	r3,-1
   1ae94:	1886d83a 	srl	r3,r3,r2
   1ae98:	008000b4 	movhi	r2,2
   1ae9c:	1085e304 	addi	r2,r2,6028
   1aea0:	10c01615 	stw	r3,88(r2)
   1aea4:	010000b4 	movhi	r4,2
   1aea8:	2105e304 	addi	r4,r4,6028
   1aeac:	001aaec0 	call	1aaec <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   1aeb0:	008000b4 	movhi	r2,2
   1aeb4:	1085fa04 	addi	r2,r2,6120
   1aeb8:	10800a17 	ldw	r2,40(r2)
   1aebc:	10800017 	ldw	r2,0(r2)
   1aec0:	1007883a 	mov	r3,r2
   1aec4:	008000b4 	movhi	r2,2
   1aec8:	1085fa04 	addi	r2,r2,6120
   1aecc:	10c00b15 	stw	r3,44(r2)
   1aed0:	008000b4 	movhi	r2,2
   1aed4:	1085fa04 	addi	r2,r2,6120
   1aed8:	10800a17 	ldw	r2,40(r2)
   1aedc:	10800104 	addi	r2,r2,4
   1aee0:	10800017 	ldw	r2,0(r2)
   1aee4:	1007883a 	mov	r3,r2
   1aee8:	008000b4 	movhi	r2,2
   1aeec:	1085fa04 	addi	r2,r2,6120
   1aef0:	10c00c15 	stw	r3,48(r2)
   1aef4:	008000b4 	movhi	r2,2
   1aef8:	1085fa04 	addi	r2,r2,6120
   1aefc:	10800a17 	ldw	r2,40(r2)
   1af00:	10800204 	addi	r2,r2,8
   1af04:	10800017 	ldw	r2,0(r2)
   1af08:	10ffffcc 	andi	r3,r2,65535
   1af0c:	008000b4 	movhi	r2,2
   1af10:	1085fa04 	addi	r2,r2,6120
   1af14:	10c01115 	stw	r3,68(r2)
   1af18:	008000b4 	movhi	r2,2
   1af1c:	1085fa04 	addi	r2,r2,6120
   1af20:	10800a17 	ldw	r2,40(r2)
   1af24:	10800204 	addi	r2,r2,8
   1af28:	10800017 	ldw	r2,0(r2)
   1af2c:	1006d43a 	srli	r3,r2,16
   1af30:	008000b4 	movhi	r2,2
   1af34:	1085fa04 	addi	r2,r2,6120
   1af38:	10c01215 	stw	r3,72(r2)
   1af3c:	008000b4 	movhi	r2,2
   1af40:	1085fa04 	addi	r2,r2,6120
   1af44:	10800a17 	ldw	r2,40(r2)
   1af48:	10800304 	addi	r2,r2,12
   1af4c:	10800017 	ldw	r2,0(r2)
   1af50:	1005d07a 	srai	r2,r2,1
   1af54:	10c0004c 	andi	r3,r2,1
   1af58:	008000b4 	movhi	r2,2
   1af5c:	1085fa04 	addi	r2,r2,6120
   1af60:	10c00d15 	stw	r3,52(r2)
   1af64:	008000b4 	movhi	r2,2
   1af68:	1085fa04 	addi	r2,r2,6120
   1af6c:	10800a17 	ldw	r2,40(r2)
   1af70:	10800304 	addi	r2,r2,12
   1af74:	10800017 	ldw	r2,0(r2)
   1af78:	1005d23a 	srai	r2,r2,8
   1af7c:	108003cc 	andi	r2,r2,15
   1af80:	10800044 	addi	r2,r2,1
   1af84:	1007883a 	mov	r3,r2
   1af88:	008000b4 	movhi	r2,2
   1af8c:	1085fa04 	addi	r2,r2,6120
   1af90:	10c00e15 	stw	r3,56(r2)
   1af94:	008000b4 	movhi	r2,2
   1af98:	1085fa04 	addi	r2,r2,6120
   1af9c:	10800a17 	ldw	r2,40(r2)
   1afa0:	10800304 	addi	r2,r2,12
   1afa4:	10800017 	ldw	r2,0(r2)
   1afa8:	1005d1ba 	srai	r2,r2,6
   1afac:	108000cc 	andi	r2,r2,3
   1afb0:	10800044 	addi	r2,r2,1
   1afb4:	1007883a 	mov	r3,r2
   1afb8:	008000b4 	movhi	r2,2
   1afbc:	1085fa04 	addi	r2,r2,6120
   1afc0:	10c00f15 	stw	r3,60(r2)
   1afc4:	008000b4 	movhi	r2,2
   1afc8:	1085fa04 	addi	r2,r2,6120
   1afcc:	10800e17 	ldw	r2,56(r2)
   1afd0:	1007883a 	mov	r3,r2
   1afd4:	008000b4 	movhi	r2,2
   1afd8:	1085fa04 	addi	r2,r2,6120
   1afdc:	10800f17 	ldw	r2,60(r2)
   1afe0:	1885383a 	mul	r2,r3,r2
   1afe4:	e0bffdc5 	stb	r2,-9(fp)
   1afe8:	e0bffdc3 	ldbu	r2,-9(fp)
   1afec:	10800268 	cmpgeui	r2,r2,9
   1aff0:	1000051e 	bne	r2,zero,1b008 <alt_sys_init+0x4b0>
   1aff4:	008000b4 	movhi	r2,2
   1aff8:	1085fa04 	addi	r2,r2,6120
   1affc:	00c00044 	movi	r3,1
   1b000:	10c01015 	stw	r3,64(r2)
   1b004:	00000c06 	br	1b038 <alt_sys_init+0x4e0>
   1b008:	e0bffdc3 	ldbu	r2,-9(fp)
   1b00c:	10800468 	cmpgeui	r2,r2,17
   1b010:	1000051e 	bne	r2,zero,1b028 <alt_sys_init+0x4d0>
   1b014:	008000b4 	movhi	r2,2
   1b018:	1085fa04 	addi	r2,r2,6120
   1b01c:	00c00084 	movi	r3,2
   1b020:	10c01015 	stw	r3,64(r2)
   1b024:	00000406 	br	1b038 <alt_sys_init+0x4e0>
   1b028:	008000b4 	movhi	r2,2
   1b02c:	1085fa04 	addi	r2,r2,6120
   1b030:	00c00104 	movi	r3,4
   1b034:	10c01015 	stw	r3,64(r2)
   1b038:	008000b4 	movhi	r2,2
   1b03c:	1085fa04 	addi	r2,r2,6120
   1b040:	10800a17 	ldw	r2,40(r2)
   1b044:	10800304 	addi	r2,r2,12
   1b048:	10800017 	ldw	r2,0(r2)
   1b04c:	1005d43a 	srai	r2,r2,16
   1b050:	e0bffe05 	stb	r2,-8(fp)
   1b054:	008000b4 	movhi	r2,2
   1b058:	1085fa04 	addi	r2,r2,6120
   1b05c:	10800a17 	ldw	r2,40(r2)
   1b060:	10800304 	addi	r2,r2,12
   1b064:	10800017 	ldw	r2,0(r2)
   1b068:	1004d63a 	srli	r2,r2,24
   1b06c:	e0bffe45 	stb	r2,-7(fp)
   1b070:	008000b4 	movhi	r2,2
   1b074:	1085fa04 	addi	r2,r2,6120
   1b078:	10801017 	ldw	r2,64(r2)
   1b07c:	10800058 	cmpnei	r2,r2,1
   1b080:	1000041e 	bne	r2,zero,1b094 <alt_sys_init+0x53c>
   1b084:	008000b4 	movhi	r2,2
   1b088:	1085fa04 	addi	r2,r2,6120
   1b08c:	10001315 	stw	zero,76(r2)
   1b090:	00000e06 	br	1b0cc <alt_sys_init+0x574>
   1b094:	008000b4 	movhi	r2,2
   1b098:	1085fa04 	addi	r2,r2,6120
   1b09c:	10801017 	ldw	r2,64(r2)
   1b0a0:	10800098 	cmpnei	r2,r2,2
   1b0a4:	1000051e 	bne	r2,zero,1b0bc <alt_sys_init+0x564>
   1b0a8:	008000b4 	movhi	r2,2
   1b0ac:	1085fa04 	addi	r2,r2,6120
   1b0b0:	00c00044 	movi	r3,1
   1b0b4:	10c01315 	stw	r3,76(r2)
   1b0b8:	00000406 	br	1b0cc <alt_sys_init+0x574>
   1b0bc:	008000b4 	movhi	r2,2
   1b0c0:	1085fa04 	addi	r2,r2,6120
   1b0c4:	00c00084 	movi	r3,2
   1b0c8:	10c01315 	stw	r3,76(r2)
   1b0cc:	e0bffe03 	ldbu	r2,-8(fp)
   1b0d0:	00c00804 	movi	r3,32
   1b0d4:	1885c83a 	sub	r2,r3,r2
   1b0d8:	00ffffc4 	movi	r3,-1
   1b0dc:	1886d83a 	srl	r3,r3,r2
   1b0e0:	008000b4 	movhi	r2,2
   1b0e4:	1085fa04 	addi	r2,r2,6120
   1b0e8:	10c01415 	stw	r3,80(r2)
   1b0ec:	e0fffe03 	ldbu	r3,-8(fp)
   1b0f0:	008000b4 	movhi	r2,2
   1b0f4:	1085fa04 	addi	r2,r2,6120
   1b0f8:	10801317 	ldw	r2,76(r2)
   1b0fc:	1887883a 	add	r3,r3,r2
   1b100:	008000b4 	movhi	r2,2
   1b104:	1085fa04 	addi	r2,r2,6120
   1b108:	10c01515 	stw	r3,84(r2)
   1b10c:	e0bffe43 	ldbu	r2,-7(fp)
   1b110:	00c00804 	movi	r3,32
   1b114:	1885c83a 	sub	r2,r3,r2
   1b118:	00ffffc4 	movi	r3,-1
   1b11c:	1886d83a 	srl	r3,r3,r2
   1b120:	008000b4 	movhi	r2,2
   1b124:	1085fa04 	addi	r2,r2,6120
   1b128:	10c01615 	stw	r3,88(r2)
   1b12c:	010000b4 	movhi	r4,2
   1b130:	2105fa04 	addi	r4,r4,6120
   1b134:	001aaec0 	call	1aaec <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VIDEO_IN_SUBSYSTEM_VIDEO_IN_DMA, Video_In_Subsystem_Video_In_DMA);
   1b138:	008000b4 	movhi	r2,2
   1b13c:	10861104 	addi	r2,r2,6212
   1b140:	10800a17 	ldw	r2,40(r2)
   1b144:	10800017 	ldw	r2,0(r2)
   1b148:	1007883a 	mov	r3,r2
   1b14c:	008000b4 	movhi	r2,2
   1b150:	10861104 	addi	r2,r2,6212
   1b154:	10c00b15 	stw	r3,44(r2)
   1b158:	008000b4 	movhi	r2,2
   1b15c:	10861104 	addi	r2,r2,6212
   1b160:	10800a17 	ldw	r2,40(r2)
   1b164:	10800104 	addi	r2,r2,4
   1b168:	10800017 	ldw	r2,0(r2)
   1b16c:	1007883a 	mov	r3,r2
   1b170:	008000b4 	movhi	r2,2
   1b174:	10861104 	addi	r2,r2,6212
   1b178:	10c00c15 	stw	r3,48(r2)
   1b17c:	008000b4 	movhi	r2,2
   1b180:	10861104 	addi	r2,r2,6212
   1b184:	10800a17 	ldw	r2,40(r2)
   1b188:	10800204 	addi	r2,r2,8
   1b18c:	10800017 	ldw	r2,0(r2)
   1b190:	10ffffcc 	andi	r3,r2,65535
   1b194:	008000b4 	movhi	r2,2
   1b198:	10861104 	addi	r2,r2,6212
   1b19c:	10c01115 	stw	r3,68(r2)
   1b1a0:	008000b4 	movhi	r2,2
   1b1a4:	10861104 	addi	r2,r2,6212
   1b1a8:	10800a17 	ldw	r2,40(r2)
   1b1ac:	10800204 	addi	r2,r2,8
   1b1b0:	10800017 	ldw	r2,0(r2)
   1b1b4:	1006d43a 	srli	r3,r2,16
   1b1b8:	008000b4 	movhi	r2,2
   1b1bc:	10861104 	addi	r2,r2,6212
   1b1c0:	10c01215 	stw	r3,72(r2)
   1b1c4:	008000b4 	movhi	r2,2
   1b1c8:	10861104 	addi	r2,r2,6212
   1b1cc:	10800a17 	ldw	r2,40(r2)
   1b1d0:	10800304 	addi	r2,r2,12
   1b1d4:	10800017 	ldw	r2,0(r2)
   1b1d8:	1005d07a 	srai	r2,r2,1
   1b1dc:	10c0004c 	andi	r3,r2,1
   1b1e0:	008000b4 	movhi	r2,2
   1b1e4:	10861104 	addi	r2,r2,6212
   1b1e8:	10c00d15 	stw	r3,52(r2)
   1b1ec:	008000b4 	movhi	r2,2
   1b1f0:	10861104 	addi	r2,r2,6212
   1b1f4:	10800a17 	ldw	r2,40(r2)
   1b1f8:	10800304 	addi	r2,r2,12
   1b1fc:	10800017 	ldw	r2,0(r2)
   1b200:	1005d23a 	srai	r2,r2,8
   1b204:	108003cc 	andi	r2,r2,15
   1b208:	10800044 	addi	r2,r2,1
   1b20c:	1007883a 	mov	r3,r2
   1b210:	008000b4 	movhi	r2,2
   1b214:	10861104 	addi	r2,r2,6212
   1b218:	10c00e15 	stw	r3,56(r2)
   1b21c:	008000b4 	movhi	r2,2
   1b220:	10861104 	addi	r2,r2,6212
   1b224:	10800a17 	ldw	r2,40(r2)
   1b228:	10800304 	addi	r2,r2,12
   1b22c:	10800017 	ldw	r2,0(r2)
   1b230:	1005d1ba 	srai	r2,r2,6
   1b234:	108000cc 	andi	r2,r2,3
   1b238:	10800044 	addi	r2,r2,1
   1b23c:	1007883a 	mov	r3,r2
   1b240:	008000b4 	movhi	r2,2
   1b244:	10861104 	addi	r2,r2,6212
   1b248:	10c00f15 	stw	r3,60(r2)
   1b24c:	008000b4 	movhi	r2,2
   1b250:	10861104 	addi	r2,r2,6212
   1b254:	10800e17 	ldw	r2,56(r2)
   1b258:	1007883a 	mov	r3,r2
   1b25c:	008000b4 	movhi	r2,2
   1b260:	10861104 	addi	r2,r2,6212
   1b264:	10800f17 	ldw	r2,60(r2)
   1b268:	1885383a 	mul	r2,r3,r2
   1b26c:	e0bffe85 	stb	r2,-6(fp)
   1b270:	e0bffe83 	ldbu	r2,-6(fp)
   1b274:	10800268 	cmpgeui	r2,r2,9
   1b278:	1000051e 	bne	r2,zero,1b290 <alt_sys_init+0x738>
   1b27c:	008000b4 	movhi	r2,2
   1b280:	10861104 	addi	r2,r2,6212
   1b284:	00c00044 	movi	r3,1
   1b288:	10c01015 	stw	r3,64(r2)
   1b28c:	00000c06 	br	1b2c0 <alt_sys_init+0x768>
   1b290:	e0bffe83 	ldbu	r2,-6(fp)
   1b294:	10800468 	cmpgeui	r2,r2,17
   1b298:	1000051e 	bne	r2,zero,1b2b0 <alt_sys_init+0x758>
   1b29c:	008000b4 	movhi	r2,2
   1b2a0:	10861104 	addi	r2,r2,6212
   1b2a4:	00c00084 	movi	r3,2
   1b2a8:	10c01015 	stw	r3,64(r2)
   1b2ac:	00000406 	br	1b2c0 <alt_sys_init+0x768>
   1b2b0:	008000b4 	movhi	r2,2
   1b2b4:	10861104 	addi	r2,r2,6212
   1b2b8:	00c00104 	movi	r3,4
   1b2bc:	10c01015 	stw	r3,64(r2)
   1b2c0:	008000b4 	movhi	r2,2
   1b2c4:	10861104 	addi	r2,r2,6212
   1b2c8:	10800a17 	ldw	r2,40(r2)
   1b2cc:	10800304 	addi	r2,r2,12
   1b2d0:	10800017 	ldw	r2,0(r2)
   1b2d4:	1005d43a 	srai	r2,r2,16
   1b2d8:	e0bffec5 	stb	r2,-5(fp)
   1b2dc:	008000b4 	movhi	r2,2
   1b2e0:	10861104 	addi	r2,r2,6212
   1b2e4:	10800a17 	ldw	r2,40(r2)
   1b2e8:	10800304 	addi	r2,r2,12
   1b2ec:	10800017 	ldw	r2,0(r2)
   1b2f0:	1004d63a 	srli	r2,r2,24
   1b2f4:	e0bfff05 	stb	r2,-4(fp)
   1b2f8:	008000b4 	movhi	r2,2
   1b2fc:	10861104 	addi	r2,r2,6212
   1b300:	10801017 	ldw	r2,64(r2)
   1b304:	10800058 	cmpnei	r2,r2,1
   1b308:	1000041e 	bne	r2,zero,1b31c <alt_sys_init+0x7c4>
   1b30c:	008000b4 	movhi	r2,2
   1b310:	10861104 	addi	r2,r2,6212
   1b314:	10001315 	stw	zero,76(r2)
   1b318:	00000e06 	br	1b354 <alt_sys_init+0x7fc>
   1b31c:	008000b4 	movhi	r2,2
   1b320:	10861104 	addi	r2,r2,6212
   1b324:	10801017 	ldw	r2,64(r2)
   1b328:	10800098 	cmpnei	r2,r2,2
   1b32c:	1000051e 	bne	r2,zero,1b344 <alt_sys_init+0x7ec>
   1b330:	008000b4 	movhi	r2,2
   1b334:	10861104 	addi	r2,r2,6212
   1b338:	00c00044 	movi	r3,1
   1b33c:	10c01315 	stw	r3,76(r2)
   1b340:	00000406 	br	1b354 <alt_sys_init+0x7fc>
   1b344:	008000b4 	movhi	r2,2
   1b348:	10861104 	addi	r2,r2,6212
   1b34c:	00c00084 	movi	r3,2
   1b350:	10c01315 	stw	r3,76(r2)
   1b354:	e0bffec3 	ldbu	r2,-5(fp)
   1b358:	00c00804 	movi	r3,32
   1b35c:	1885c83a 	sub	r2,r3,r2
   1b360:	00ffffc4 	movi	r3,-1
   1b364:	1886d83a 	srl	r3,r3,r2
   1b368:	008000b4 	movhi	r2,2
   1b36c:	10861104 	addi	r2,r2,6212
   1b370:	10c01415 	stw	r3,80(r2)
   1b374:	e0fffec3 	ldbu	r3,-5(fp)
   1b378:	008000b4 	movhi	r2,2
   1b37c:	10861104 	addi	r2,r2,6212
   1b380:	10801317 	ldw	r2,76(r2)
   1b384:	1887883a 	add	r3,r3,r2
   1b388:	008000b4 	movhi	r2,2
   1b38c:	10861104 	addi	r2,r2,6212
   1b390:	10c01515 	stw	r3,84(r2)
   1b394:	e0bfff03 	ldbu	r2,-4(fp)
   1b398:	00c00804 	movi	r3,32
   1b39c:	1885c83a 	sub	r2,r3,r2
   1b3a0:	00ffffc4 	movi	r3,-1
   1b3a4:	1886d83a 	srl	r3,r3,r2
   1b3a8:	008000b4 	movhi	r2,2
   1b3ac:	10861104 	addi	r2,r2,6212
   1b3b0:	10c01615 	stw	r3,88(r2)
   1b3b4:	010000b4 	movhi	r4,2
   1b3b8:	21061104 	addi	r4,r4,6212
   1b3bc:	001aaec0 	call	1aaec <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_RGB_RESAMPLER, VGA_Subsystem_VGA_Pixel_RGB_Resampler);
   1b3c0:	008000b4 	movhi	r2,2
   1b3c4:	10862804 	addi	r2,r2,6304
   1b3c8:	10800a17 	ldw	r2,40(r2)
   1b3cc:	10800017 	ldw	r2,0(r2)
   1b3d0:	10c003cc 	andi	r3,r2,15
   1b3d4:	008000b4 	movhi	r2,2
   1b3d8:	10862804 	addi	r2,r2,6304
   1b3dc:	10c00b15 	stw	r3,44(r2)
   1b3e0:	008000b4 	movhi	r2,2
   1b3e4:	10862804 	addi	r2,r2,6304
   1b3e8:	10800a17 	ldw	r2,40(r2)
   1b3ec:	10800017 	ldw	r2,0(r2)
   1b3f0:	1005d13a 	srai	r2,r2,4
   1b3f4:	10c0004c 	andi	r3,r2,1
   1b3f8:	008000b4 	movhi	r2,2
   1b3fc:	10862804 	addi	r2,r2,6304
   1b400:	10c00c15 	stw	r3,48(r2)
   1b404:	008000b4 	movhi	r2,2
   1b408:	10862804 	addi	r2,r2,6304
   1b40c:	10800a17 	ldw	r2,40(r2)
   1b410:	10800017 	ldw	r2,0(r2)
   1b414:	1005d17a 	srai	r2,r2,5
   1b418:	10c0004c 	andi	r3,r2,1
   1b41c:	008000b4 	movhi	r2,2
   1b420:	10862804 	addi	r2,r2,6304
   1b424:	10c00d15 	stw	r3,52(r2)
   1b428:	008000b4 	movhi	r2,2
   1b42c:	10862804 	addi	r2,r2,6304
   1b430:	10800a17 	ldw	r2,40(r2)
   1b434:	10800017 	ldw	r2,0(r2)
   1b438:	1005d43a 	srai	r2,r2,16
   1b43c:	10c003cc 	andi	r3,r2,15
   1b440:	008000b4 	movhi	r2,2
   1b444:	10862804 	addi	r2,r2,6304
   1b448:	10c00e15 	stw	r3,56(r2)
   1b44c:	008000b4 	movhi	r2,2
   1b450:	10862804 	addi	r2,r2,6304
   1b454:	10800a17 	ldw	r2,40(r2)
   1b458:	10800017 	ldw	r2,0(r2)
   1b45c:	1005d53a 	srai	r2,r2,20
   1b460:	10c0004c 	andi	r3,r2,1
   1b464:	008000b4 	movhi	r2,2
   1b468:	10862804 	addi	r2,r2,6304
   1b46c:	10c00f15 	stw	r3,60(r2)
   1b470:	008000b4 	movhi	r2,2
   1b474:	10862804 	addi	r2,r2,6304
   1b478:	10800a17 	ldw	r2,40(r2)
   1b47c:	10800017 	ldw	r2,0(r2)
   1b480:	1005d57a 	srai	r2,r2,21
   1b484:	10c0004c 	andi	r3,r2,1
   1b488:	008000b4 	movhi	r2,2
   1b48c:	10862804 	addi	r2,r2,6304
   1b490:	10c01015 	stw	r3,64(r2)
   1b494:	010000b4 	movhi	r4,2
   1b498:	21062804 	addi	r4,r4,6304
   1b49c:	001aaec0 	call	1aaec <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   1b4a0:	010000b4 	movhi	r4,2
   1b4a4:	21063904 	addi	r4,r4,6372
   1b4a8:	001aaec0 	call	1aaec <alt_dev_reg>
}
   1b4ac:	0001883a 	nop
   1b4b0:	e037883a 	mov	sp,fp
   1b4b4:	dfc00117 	ldw	ra,4(sp)
   1b4b8:	df000017 	ldw	fp,0(sp)
   1b4bc:	dec00204 	addi	sp,sp,8
   1b4c0:	f800283a 	ret

0001b4c4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1b4c4:	defffa04 	addi	sp,sp,-24
   1b4c8:	dfc00515 	stw	ra,20(sp)
   1b4cc:	df000415 	stw	fp,16(sp)
   1b4d0:	df000404 	addi	fp,sp,16
   1b4d4:	e13ffd15 	stw	r4,-12(fp)
   1b4d8:	e17ffe15 	stw	r5,-8(fp)
   1b4dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1b4e0:	e0bffd17 	ldw	r2,-12(fp)
   1b4e4:	10800017 	ldw	r2,0(r2)
   1b4e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1b4ec:	e0bffc17 	ldw	r2,-16(fp)
   1b4f0:	10c00a04 	addi	r3,r2,40
   1b4f4:	e0bffd17 	ldw	r2,-12(fp)
   1b4f8:	10800217 	ldw	r2,8(r2)
   1b4fc:	100f883a 	mov	r7,r2
   1b500:	e1bfff17 	ldw	r6,-4(fp)
   1b504:	e17ffe17 	ldw	r5,-8(fp)
   1b508:	1809883a 	mov	r4,r3
   1b50c:	001bc680 	call	1bc68 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1b510:	e037883a 	mov	sp,fp
   1b514:	dfc00117 	ldw	ra,4(sp)
   1b518:	df000017 	ldw	fp,0(sp)
   1b51c:	dec00204 	addi	sp,sp,8
   1b520:	f800283a 	ret

0001b524 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1b524:	defffa04 	addi	sp,sp,-24
   1b528:	dfc00515 	stw	ra,20(sp)
   1b52c:	df000415 	stw	fp,16(sp)
   1b530:	df000404 	addi	fp,sp,16
   1b534:	e13ffd15 	stw	r4,-12(fp)
   1b538:	e17ffe15 	stw	r5,-8(fp)
   1b53c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1b540:	e0bffd17 	ldw	r2,-12(fp)
   1b544:	10800017 	ldw	r2,0(r2)
   1b548:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1b54c:	e0bffc17 	ldw	r2,-16(fp)
   1b550:	10c00a04 	addi	r3,r2,40
   1b554:	e0bffd17 	ldw	r2,-12(fp)
   1b558:	10800217 	ldw	r2,8(r2)
   1b55c:	100f883a 	mov	r7,r2
   1b560:	e1bfff17 	ldw	r6,-4(fp)
   1b564:	e17ffe17 	ldw	r5,-8(fp)
   1b568:	1809883a 	mov	r4,r3
   1b56c:	001bf240 	call	1bf24 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1b570:	e037883a 	mov	sp,fp
   1b574:	dfc00117 	ldw	ra,4(sp)
   1b578:	df000017 	ldw	fp,0(sp)
   1b57c:	dec00204 	addi	sp,sp,8
   1b580:	f800283a 	ret

0001b584 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1b584:	defffc04 	addi	sp,sp,-16
   1b588:	dfc00315 	stw	ra,12(sp)
   1b58c:	df000215 	stw	fp,8(sp)
   1b590:	df000204 	addi	fp,sp,8
   1b594:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1b598:	e0bfff17 	ldw	r2,-4(fp)
   1b59c:	10800017 	ldw	r2,0(r2)
   1b5a0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1b5a4:	e0bffe17 	ldw	r2,-8(fp)
   1b5a8:	10c00a04 	addi	r3,r2,40
   1b5ac:	e0bfff17 	ldw	r2,-4(fp)
   1b5b0:	10800217 	ldw	r2,8(r2)
   1b5b4:	100b883a 	mov	r5,r2
   1b5b8:	1809883a 	mov	r4,r3
   1b5bc:	001bb100 	call	1bb10 <altera_avalon_jtag_uart_close>
}
   1b5c0:	e037883a 	mov	sp,fp
   1b5c4:	dfc00117 	ldw	ra,4(sp)
   1b5c8:	df000017 	ldw	fp,0(sp)
   1b5cc:	dec00204 	addi	sp,sp,8
   1b5d0:	f800283a 	ret

0001b5d4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1b5d4:	defffa04 	addi	sp,sp,-24
   1b5d8:	dfc00515 	stw	ra,20(sp)
   1b5dc:	df000415 	stw	fp,16(sp)
   1b5e0:	df000404 	addi	fp,sp,16
   1b5e4:	e13ffd15 	stw	r4,-12(fp)
   1b5e8:	e17ffe15 	stw	r5,-8(fp)
   1b5ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1b5f0:	e0bffd17 	ldw	r2,-12(fp)
   1b5f4:	10800017 	ldw	r2,0(r2)
   1b5f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1b5fc:	e0bffc17 	ldw	r2,-16(fp)
   1b600:	10800a04 	addi	r2,r2,40
   1b604:	e1bfff17 	ldw	r6,-4(fp)
   1b608:	e17ffe17 	ldw	r5,-8(fp)
   1b60c:	1009883a 	mov	r4,r2
   1b610:	001bb780 	call	1bb78 <altera_avalon_jtag_uart_ioctl>
}
   1b614:	e037883a 	mov	sp,fp
   1b618:	dfc00117 	ldw	ra,4(sp)
   1b61c:	df000017 	ldw	fp,0(sp)
   1b620:	dec00204 	addi	sp,sp,8
   1b624:	f800283a 	ret

0001b628 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1b628:	defff204 	addi	sp,sp,-56
   1b62c:	dfc00d15 	stw	ra,52(sp)
   1b630:	df000c15 	stw	fp,48(sp)
   1b634:	df000c04 	addi	fp,sp,48
   1b638:	e13ff915 	stw	r4,-28(fp)
   1b63c:	e17ffa15 	stw	r5,-24(fp)
   1b640:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   1b644:	e0bff917 	ldw	r2,-28(fp)
   1b648:	10800c04 	addi	r2,r2,48
   1b64c:	e0bff415 	stw	r2,-48(fp)
   1b650:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   1b654:	e0bff80b 	ldhu	r2,-32(fp)
   1b658:	e0fff884 	addi	r3,fp,-30
   1b65c:	180b883a 	mov	r5,r3
   1b660:	1009883a 	mov	r4,r2
   1b664:	00157c80 	call	157c8 <OSFlagCreate>
   1b668:	1007883a 	mov	r3,r2
   1b66c:	e0bff417 	ldw	r2,-48(fp)
   1b670:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   1b674:	e0bff917 	ldw	r2,-28(fp)
   1b678:	10800a04 	addi	r2,r2,40
   1b67c:	e0bff515 	stw	r2,-44(fp)
   1b680:	00800044 	movi	r2,1
   1b684:	e0bff78d 	sth	r2,-34(fp)
   1b688:	e0bff78b 	ldhu	r2,-34(fp)
   1b68c:	1009883a 	mov	r4,r2
   1b690:	00184dc0 	call	184dc <OSSemCreate>
   1b694:	1007883a 	mov	r3,r2
   1b698:	e0bff517 	ldw	r2,-44(fp)
   1b69c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   1b6a0:	e0bff917 	ldw	r2,-28(fp)
   1b6a4:	10800b04 	addi	r2,r2,44
   1b6a8:	e0bff615 	stw	r2,-40(fp)
   1b6ac:	00800044 	movi	r2,1
   1b6b0:	e0bff70d 	sth	r2,-36(fp)
   1b6b4:	e0bff70b 	ldhu	r2,-36(fp)
   1b6b8:	1009883a 	mov	r4,r2
   1b6bc:	00184dc0 	call	184dc <OSSemCreate>
   1b6c0:	1007883a 	mov	r3,r2
   1b6c4:	e0bff617 	ldw	r2,-40(fp)
   1b6c8:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1b6cc:	e0bff917 	ldw	r2,-28(fp)
   1b6d0:	00c00044 	movi	r3,1
   1b6d4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1b6d8:	e0bff917 	ldw	r2,-28(fp)
   1b6dc:	10800017 	ldw	r2,0(r2)
   1b6e0:	10800104 	addi	r2,r2,4
   1b6e4:	1007883a 	mov	r3,r2
   1b6e8:	e0bff917 	ldw	r2,-28(fp)
   1b6ec:	10800817 	ldw	r2,32(r2)
   1b6f0:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   1b6f4:	e0bffb17 	ldw	r2,-20(fp)
   1b6f8:	018000b4 	movhi	r6,2
   1b6fc:	31add904 	addi	r6,r6,-18588
   1b700:	e17ff917 	ldw	r5,-28(fp)
   1b704:	1009883a 	mov	r4,r2
   1b708:	001da880 	call	1da88 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1b70c:	e0bff917 	ldw	r2,-28(fp)
   1b710:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1b714:	e0bff917 	ldw	r2,-28(fp)
   1b718:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1b71c:	d0e82e17 	ldw	r3,-24392(gp)
   1b720:	e1fff917 	ldw	r7,-28(fp)
   1b724:	018000b4 	movhi	r6,2
   1b728:	31ae8304 	addi	r6,r6,-17908
   1b72c:	180b883a 	mov	r5,r3
   1b730:	1009883a 	mov	r4,r2
   1b734:	001d5980 	call	1d598 <alt_alarm_start>
   1b738:	1000040e 	bge	r2,zero,1b74c <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1b73c:	e0fff917 	ldw	r3,-28(fp)
   1b740:	00a00034 	movhi	r2,32768
   1b744:	10bfffc4 	addi	r2,r2,-1
   1b748:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1b74c:	0001883a 	nop
   1b750:	e037883a 	mov	sp,fp
   1b754:	dfc00117 	ldw	ra,4(sp)
   1b758:	df000017 	ldw	fp,0(sp)
   1b75c:	dec00204 	addi	sp,sp,8
   1b760:	f800283a 	ret

0001b764 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1b764:	defff104 	addi	sp,sp,-60
   1b768:	dfc00e15 	stw	ra,56(sp)
   1b76c:	df000d15 	stw	fp,52(sp)
   1b770:	df000d04 	addi	fp,sp,52
   1b774:	e13ffe15 	stw	r4,-8(fp)
   1b778:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1b77c:	e0bffe17 	ldw	r2,-8(fp)
   1b780:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   1b784:	e0bff517 	ldw	r2,-44(fp)
   1b788:	10800017 	ldw	r2,0(r2)
   1b78c:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1b790:	e0bff617 	ldw	r2,-40(fp)
   1b794:	10800104 	addi	r2,r2,4
   1b798:	10800037 	ldwio	r2,0(r2)
   1b79c:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1b7a0:	e0bff717 	ldw	r2,-36(fp)
   1b7a4:	1080c00c 	andi	r2,r2,768
   1b7a8:	10009126 	beq	r2,zero,1b9f0 <altera_avalon_jtag_uart_irq+0x28c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1b7ac:	e0bff717 	ldw	r2,-36(fp)
   1b7b0:	1080400c 	andi	r2,r2,256
   1b7b4:	10004726 	beq	r2,zero,1b8d4 <altera_avalon_jtag_uart_irq+0x170>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1b7b8:	00800074 	movhi	r2,1
   1b7bc:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1b7c0:	e0bff517 	ldw	r2,-44(fp)
   1b7c4:	10800d17 	ldw	r2,52(r2)
   1b7c8:	10800044 	addi	r2,r2,1
   1b7cc:	1081ffcc 	andi	r2,r2,2047
   1b7d0:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   1b7d4:	e0bff517 	ldw	r2,-44(fp)
   1b7d8:	10c00e17 	ldw	r3,56(r2)
   1b7dc:	e0bff817 	ldw	r2,-32(fp)
   1b7e0:	18802726 	beq	r3,r2,1b880 <altera_avalon_jtag_uart_irq+0x11c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1b7e4:	e0bff617 	ldw	r2,-40(fp)
   1b7e8:	10800037 	ldwio	r2,0(r2)
   1b7ec:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1b7f0:	e0bff317 	ldw	r2,-52(fp)
   1b7f4:	10a0000c 	andi	r2,r2,32768
   1b7f8:	10002326 	beq	r2,zero,1b888 <altera_avalon_jtag_uart_irq+0x124>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1b7fc:	e0bff517 	ldw	r2,-44(fp)
   1b800:	10800d17 	ldw	r2,52(r2)
   1b804:	e0fff317 	ldw	r3,-52(fp)
   1b808:	1809883a 	mov	r4,r3
   1b80c:	e0fff517 	ldw	r3,-44(fp)
   1b810:	1885883a 	add	r2,r3,r2
   1b814:	10801104 	addi	r2,r2,68
   1b818:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1b81c:	e0bff517 	ldw	r2,-44(fp)
   1b820:	10800d17 	ldw	r2,52(r2)
   1b824:	10800044 	addi	r2,r2,1
   1b828:	10c1ffcc 	andi	r3,r2,2047
   1b82c:	e0bff517 	ldw	r2,-44(fp)
   1b830:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   1b834:	e0bff517 	ldw	r2,-44(fp)
   1b838:	10800c17 	ldw	r2,48(r2)
   1b83c:	e0bffa15 	stw	r2,-24(fp)
   1b840:	00800044 	movi	r2,1
   1b844:	e0bffb0d 	sth	r2,-20(fp)
   1b848:	00800044 	movi	r2,1
   1b84c:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1b850:	d0a81943 	ldbu	r2,-24475(gp)
   1b854:	10803fcc 	andi	r2,r2,255
   1b858:	103fd926 	beq	r2,zero,1b7c0 <altera_avalon_jtag_uart_irq+0x5c>
  {
    OSFlagPost (group, flags, opt, &err);
   1b85c:	e0bffb0b 	ldhu	r2,-20(fp)
   1b860:	e0fffb83 	ldbu	r3,-18(fp)
   1b864:	e13ffcc4 	addi	r4,fp,-13
   1b868:	200f883a 	mov	r7,r4
   1b86c:	180d883a 	mov	r6,r3
   1b870:	100b883a 	mov	r5,r2
   1b874:	e13ffa17 	ldw	r4,-24(fp)
   1b878:	00163a40 	call	163a4 <OSFlagPost>
      }
   1b87c:	003fd006 	br	1b7c0 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   1b880:	0001883a 	nop
   1b884:	00000106 	br	1b88c <altera_avalon_jtag_uart_irq+0x128>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   1b888:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1b88c:	e0bff317 	ldw	r2,-52(fp)
   1b890:	10bfffec 	andhi	r2,r2,65535
   1b894:	10000f26 	beq	r2,zero,1b8d4 <altera_avalon_jtag_uart_irq+0x170>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1b898:	e0bff517 	ldw	r2,-44(fp)
   1b89c:	10c00817 	ldw	r3,32(r2)
   1b8a0:	00bfff84 	movi	r2,-2
   1b8a4:	1886703a 	and	r3,r3,r2
   1b8a8:	e0bff517 	ldw	r2,-44(fp)
   1b8ac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1b8b0:	e0bff617 	ldw	r2,-40(fp)
   1b8b4:	10800104 	addi	r2,r2,4
   1b8b8:	1007883a 	mov	r3,r2
   1b8bc:	e0bff517 	ldw	r2,-44(fp)
   1b8c0:	10800817 	ldw	r2,32(r2)
   1b8c4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1b8c8:	e0bff617 	ldw	r2,-40(fp)
   1b8cc:	10800104 	addi	r2,r2,4
   1b8d0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1b8d4:	e0bff717 	ldw	r2,-36(fp)
   1b8d8:	1080800c 	andi	r2,r2,512
   1b8dc:	103fac26 	beq	r2,zero,1b790 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1b8e0:	e0bff717 	ldw	r2,-36(fp)
   1b8e4:	1004d43a 	srli	r2,r2,16
   1b8e8:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1b8ec:	00002606 	br	1b988 <altera_avalon_jtag_uart_irq+0x224>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1b8f0:	e0bff617 	ldw	r2,-40(fp)
   1b8f4:	e0fff517 	ldw	r3,-44(fp)
   1b8f8:	18c01017 	ldw	r3,64(r3)
   1b8fc:	e13ff517 	ldw	r4,-44(fp)
   1b900:	20c7883a 	add	r3,r4,r3
   1b904:	18c21104 	addi	r3,r3,2116
   1b908:	18c00003 	ldbu	r3,0(r3)
   1b90c:	18c03fcc 	andi	r3,r3,255
   1b910:	18c0201c 	xori	r3,r3,128
   1b914:	18ffe004 	addi	r3,r3,-128
   1b918:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1b91c:	e0bff517 	ldw	r2,-44(fp)
   1b920:	10801017 	ldw	r2,64(r2)
   1b924:	10800044 	addi	r2,r2,1
   1b928:	10c1ffcc 	andi	r3,r2,2047
   1b92c:	e0bff517 	ldw	r2,-44(fp)
   1b930:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   1b934:	e0bff517 	ldw	r2,-44(fp)
   1b938:	10800c17 	ldw	r2,48(r2)
   1b93c:	e0bff915 	stw	r2,-28(fp)
   1b940:	00800084 	movi	r2,2
   1b944:	e0bffc0d 	sth	r2,-16(fp)
   1b948:	00800044 	movi	r2,1
   1b94c:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1b950:	d0a81943 	ldbu	r2,-24475(gp)
   1b954:	10803fcc 	andi	r2,r2,255
   1b958:	10000826 	beq	r2,zero,1b97c <altera_avalon_jtag_uart_irq+0x218>
  {
    OSFlagPost (group, flags, opt, &err);
   1b95c:	e0bffc0b 	ldhu	r2,-16(fp)
   1b960:	e0fffc83 	ldbu	r3,-14(fp)
   1b964:	e13ffd04 	addi	r4,fp,-12
   1b968:	200f883a 	mov	r7,r4
   1b96c:	180d883a 	mov	r6,r3
   1b970:	100b883a 	mov	r5,r2
   1b974:	e13ff917 	ldw	r4,-28(fp)
   1b978:	00163a40 	call	163a4 <OSFlagPost>

        space--;
   1b97c:	e0bff417 	ldw	r2,-48(fp)
   1b980:	10bfffc4 	addi	r2,r2,-1
   1b984:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1b988:	e0bff417 	ldw	r2,-48(fp)
   1b98c:	10000526 	beq	r2,zero,1b9a4 <altera_avalon_jtag_uart_irq+0x240>
   1b990:	e0bff517 	ldw	r2,-44(fp)
   1b994:	10c01017 	ldw	r3,64(r2)
   1b998:	e0bff517 	ldw	r2,-44(fp)
   1b99c:	10800f17 	ldw	r2,60(r2)
   1b9a0:	18bfd31e 	bne	r3,r2,1b8f0 <altera_avalon_jtag_uart_irq+0x18c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1b9a4:	e0bff417 	ldw	r2,-48(fp)
   1b9a8:	103f7926 	beq	r2,zero,1b790 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1b9ac:	e0bff517 	ldw	r2,-44(fp)
   1b9b0:	10c00817 	ldw	r3,32(r2)
   1b9b4:	00bfff44 	movi	r2,-3
   1b9b8:	1886703a 	and	r3,r3,r2
   1b9bc:	e0bff517 	ldw	r2,-44(fp)
   1b9c0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1b9c4:	e0bff517 	ldw	r2,-44(fp)
   1b9c8:	10800017 	ldw	r2,0(r2)
   1b9cc:	10800104 	addi	r2,r2,4
   1b9d0:	1007883a 	mov	r3,r2
   1b9d4:	e0bff517 	ldw	r2,-44(fp)
   1b9d8:	10800817 	ldw	r2,32(r2)
   1b9dc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1b9e0:	e0bff617 	ldw	r2,-40(fp)
   1b9e4:	10800104 	addi	r2,r2,4
   1b9e8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1b9ec:	003f6806 	br	1b790 <altera_avalon_jtag_uart_irq+0x2c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   1b9f0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   1b9f4:	0001883a 	nop
   1b9f8:	e037883a 	mov	sp,fp
   1b9fc:	dfc00117 	ldw	ra,4(sp)
   1ba00:	df000017 	ldw	fp,0(sp)
   1ba04:	dec00204 	addi	sp,sp,8
   1ba08:	f800283a 	ret

0001ba0c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1ba0c:	defff904 	addi	sp,sp,-28
   1ba10:	dfc00615 	stw	ra,24(sp)
   1ba14:	df000515 	stw	fp,20(sp)
   1ba18:	df000504 	addi	fp,sp,20
   1ba1c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1ba20:	e0bfff17 	ldw	r2,-4(fp)
   1ba24:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1ba28:	e0bffb17 	ldw	r2,-20(fp)
   1ba2c:	10800017 	ldw	r2,0(r2)
   1ba30:	10800104 	addi	r2,r2,4
   1ba34:	10800037 	ldwio	r2,0(r2)
   1ba38:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1ba3c:	e0bffc17 	ldw	r2,-16(fp)
   1ba40:	1081000c 	andi	r2,r2,1024
   1ba44:	10000b26 	beq	r2,zero,1ba74 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1ba48:	e0bffb17 	ldw	r2,-20(fp)
   1ba4c:	10800017 	ldw	r2,0(r2)
   1ba50:	10800104 	addi	r2,r2,4
   1ba54:	1007883a 	mov	r3,r2
   1ba58:	e0bffb17 	ldw	r2,-20(fp)
   1ba5c:	10800817 	ldw	r2,32(r2)
   1ba60:	10810014 	ori	r2,r2,1024
   1ba64:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   1ba68:	e0bffb17 	ldw	r2,-20(fp)
   1ba6c:	10000915 	stw	zero,36(r2)
   1ba70:	00002106 	br	1baf8 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1ba74:	e0bffb17 	ldw	r2,-20(fp)
   1ba78:	10c00917 	ldw	r3,36(r2)
   1ba7c:	00a00034 	movhi	r2,32768
   1ba80:	10bfff04 	addi	r2,r2,-4
   1ba84:	10c01c36 	bltu	r2,r3,1baf8 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
   1ba88:	e0bffb17 	ldw	r2,-20(fp)
   1ba8c:	10800917 	ldw	r2,36(r2)
   1ba90:	10c00044 	addi	r3,r2,1
   1ba94:	e0bffb17 	ldw	r2,-20(fp)
   1ba98:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   1ba9c:	e0bffb17 	ldw	r2,-20(fp)
   1baa0:	10c00917 	ldw	r3,36(r2)
   1baa4:	e0bffb17 	ldw	r2,-20(fp)
   1baa8:	10800117 	ldw	r2,4(r2)
   1baac:	18801236 	bltu	r3,r2,1baf8 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   1bab0:	e0bffb17 	ldw	r2,-20(fp)
   1bab4:	10800c17 	ldw	r2,48(r2)
   1bab8:	e0bffd15 	stw	r2,-12(fp)
   1babc:	00800104 	movi	r2,4
   1bac0:	e0bffe0d 	sth	r2,-8(fp)
   1bac4:	00800044 	movi	r2,1
   1bac8:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1bacc:	d0a81943 	ldbu	r2,-24475(gp)
   1bad0:	10803fcc 	andi	r2,r2,255
   1bad4:	10000826 	beq	r2,zero,1baf8 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
   1bad8:	e0bffe0b 	ldhu	r2,-8(fp)
   1badc:	e0fffe83 	ldbu	r3,-6(fp)
   1bae0:	e13ffec4 	addi	r4,fp,-5
   1bae4:	200f883a 	mov	r7,r4
   1bae8:	180d883a 	mov	r6,r3
   1baec:	100b883a 	mov	r5,r2
   1baf0:	e13ffd17 	ldw	r4,-12(fp)
   1baf4:	00163a40 	call	163a4 <OSFlagPost>
   1baf8:	d0a82e17 	ldw	r2,-24392(gp)
    }
  }

  return alt_ticks_per_second();
}
   1bafc:	e037883a 	mov	sp,fp
   1bb00:	dfc00117 	ldw	ra,4(sp)
   1bb04:	df000017 	ldw	fp,0(sp)
   1bb08:	dec00204 	addi	sp,sp,8
   1bb0c:	f800283a 	ret

0001bb10 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1bb10:	defffd04 	addi	sp,sp,-12
   1bb14:	df000215 	stw	fp,8(sp)
   1bb18:	df000204 	addi	fp,sp,8
   1bb1c:	e13ffe15 	stw	r4,-8(fp)
   1bb20:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1bb24:	00000506 	br	1bb3c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1bb28:	e0bfff17 	ldw	r2,-4(fp)
   1bb2c:	1090000c 	andi	r2,r2,16384
   1bb30:	10000226 	beq	r2,zero,1bb3c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1bb34:	00bffd44 	movi	r2,-11
   1bb38:	00000b06 	br	1bb68 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1bb3c:	e0bffe17 	ldw	r2,-8(fp)
   1bb40:	10c01017 	ldw	r3,64(r2)
   1bb44:	e0bffe17 	ldw	r2,-8(fp)
   1bb48:	10800f17 	ldw	r2,60(r2)
   1bb4c:	18800526 	beq	r3,r2,1bb64 <altera_avalon_jtag_uart_close+0x54>
   1bb50:	e0bffe17 	ldw	r2,-8(fp)
   1bb54:	10c00917 	ldw	r3,36(r2)
   1bb58:	e0bffe17 	ldw	r2,-8(fp)
   1bb5c:	10800117 	ldw	r2,4(r2)
   1bb60:	18bff136 	bltu	r3,r2,1bb28 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1bb64:	0005883a 	mov	r2,zero
}
   1bb68:	e037883a 	mov	sp,fp
   1bb6c:	df000017 	ldw	fp,0(sp)
   1bb70:	dec00104 	addi	sp,sp,4
   1bb74:	f800283a 	ret

0001bb78 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1bb78:	defffa04 	addi	sp,sp,-24
   1bb7c:	df000515 	stw	fp,20(sp)
   1bb80:	df000504 	addi	fp,sp,20
   1bb84:	e13ffd15 	stw	r4,-12(fp)
   1bb88:	e17ffe15 	stw	r5,-8(fp)
   1bb8c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   1bb90:	00bff9c4 	movi	r2,-25
   1bb94:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1bb98:	e0bffe17 	ldw	r2,-8(fp)
   1bb9c:	10da8060 	cmpeqi	r3,r2,27137
   1bba0:	1800031e 	bne	r3,zero,1bbb0 <altera_avalon_jtag_uart_ioctl+0x38>
   1bba4:	109a80a0 	cmpeqi	r2,r2,27138
   1bba8:	1000181e 	bne	r2,zero,1bc0c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   1bbac:	00002906 	br	1bc54 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1bbb0:	e0bffd17 	ldw	r2,-12(fp)
   1bbb4:	10c00117 	ldw	r3,4(r2)
   1bbb8:	00a00034 	movhi	r2,32768
   1bbbc:	10bfffc4 	addi	r2,r2,-1
   1bbc0:	18802126 	beq	r3,r2,1bc48 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   1bbc4:	e0bfff17 	ldw	r2,-4(fp)
   1bbc8:	10800017 	ldw	r2,0(r2)
   1bbcc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1bbd0:	e0bffc17 	ldw	r2,-16(fp)
   1bbd4:	10800090 	cmplti	r2,r2,2
   1bbd8:	1000061e 	bne	r2,zero,1bbf4 <altera_avalon_jtag_uart_ioctl+0x7c>
   1bbdc:	e0fffc17 	ldw	r3,-16(fp)
   1bbe0:	00a00034 	movhi	r2,32768
   1bbe4:	10bfffc4 	addi	r2,r2,-1
   1bbe8:	18800226 	beq	r3,r2,1bbf4 <altera_avalon_jtag_uart_ioctl+0x7c>
   1bbec:	e0bffc17 	ldw	r2,-16(fp)
   1bbf0:	00000206 	br	1bbfc <altera_avalon_jtag_uart_ioctl+0x84>
   1bbf4:	00a00034 	movhi	r2,32768
   1bbf8:	10bfff84 	addi	r2,r2,-2
   1bbfc:	e0fffd17 	ldw	r3,-12(fp)
   1bc00:	18800115 	stw	r2,4(r3)
      rc = 0;
   1bc04:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1bc08:	00000f06 	br	1bc48 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1bc0c:	e0bffd17 	ldw	r2,-12(fp)
   1bc10:	10c00117 	ldw	r3,4(r2)
   1bc14:	00a00034 	movhi	r2,32768
   1bc18:	10bfffc4 	addi	r2,r2,-1
   1bc1c:	18800c26 	beq	r3,r2,1bc50 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1bc20:	e0bffd17 	ldw	r2,-12(fp)
   1bc24:	10c00917 	ldw	r3,36(r2)
   1bc28:	e0bffd17 	ldw	r2,-12(fp)
   1bc2c:	10800117 	ldw	r2,4(r2)
   1bc30:	1885803a 	cmpltu	r2,r3,r2
   1bc34:	10c03fcc 	andi	r3,r2,255
   1bc38:	e0bfff17 	ldw	r2,-4(fp)
   1bc3c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1bc40:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1bc44:	00000206 	br	1bc50 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   1bc48:	0001883a 	nop
   1bc4c:	00000106 	br	1bc54 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   1bc50:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1bc54:	e0bffb17 	ldw	r2,-20(fp)
}
   1bc58:	e037883a 	mov	sp,fp
   1bc5c:	df000017 	ldw	fp,0(sp)
   1bc60:	dec00104 	addi	sp,sp,4
   1bc64:	f800283a 	ret

0001bc68 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1bc68:	deffed04 	addi	sp,sp,-76
   1bc6c:	dfc01215 	stw	ra,72(sp)
   1bc70:	df001115 	stw	fp,68(sp)
   1bc74:	df001104 	addi	fp,sp,68
   1bc78:	e13ffc15 	stw	r4,-16(fp)
   1bc7c:	e17ffd15 	stw	r5,-12(fp)
   1bc80:	e1bffe15 	stw	r6,-8(fp)
   1bc84:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1bc88:	e0bffd17 	ldw	r2,-12(fp)
   1bc8c:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   1bc90:	e0bffc17 	ldw	r2,-16(fp)
   1bc94:	10800a17 	ldw	r2,40(r2)
   1bc98:	e0bff815 	stw	r2,-32(fp)
   1bc9c:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   1bca0:	e0bff90b 	ldhu	r2,-28(fp)
   1bca4:	e0fffb04 	addi	r3,fp,-20
   1bca8:	180d883a 	mov	r6,r3
   1bcac:	100b883a 	mov	r5,r2
   1bcb0:	e13ff817 	ldw	r4,-32(fp)
   1bcb4:	00187f40 	call	187f4 <OSSemPend>

  while (space > 0)
   1bcb8:	00006106 	br	1be40 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1bcbc:	e0bffc17 	ldw	r2,-16(fp)
   1bcc0:	10800d17 	ldw	r2,52(r2)
   1bcc4:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
   1bcc8:	e0bffc17 	ldw	r2,-16(fp)
   1bccc:	10800e17 	ldw	r2,56(r2)
   1bcd0:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
   1bcd4:	e0fff317 	ldw	r3,-52(fp)
   1bcd8:	e0bff417 	ldw	r2,-48(fp)
   1bcdc:	18800536 	bltu	r3,r2,1bcf4 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   1bce0:	e0fff317 	ldw	r3,-52(fp)
   1bce4:	e0bff417 	ldw	r2,-48(fp)
   1bce8:	1885c83a 	sub	r2,r3,r2
   1bcec:	e0bff115 	stw	r2,-60(fp)
   1bcf0:	00000406 	br	1bd04 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1bcf4:	00c20004 	movi	r3,2048
   1bcf8:	e0bff417 	ldw	r2,-48(fp)
   1bcfc:	1885c83a 	sub	r2,r3,r2
   1bd00:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   1bd04:	e0bff117 	ldw	r2,-60(fp)
   1bd08:	10001e26 	beq	r2,zero,1bd84 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   1bd0c:	e0fffe17 	ldw	r3,-8(fp)
   1bd10:	e0bff117 	ldw	r2,-60(fp)
   1bd14:	1880022e 	bgeu	r3,r2,1bd20 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
   1bd18:	e0bffe17 	ldw	r2,-8(fp)
   1bd1c:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1bd20:	e0bffc17 	ldw	r2,-16(fp)
   1bd24:	10c01104 	addi	r3,r2,68
   1bd28:	e0bff417 	ldw	r2,-48(fp)
   1bd2c:	1885883a 	add	r2,r3,r2
   1bd30:	e1bff117 	ldw	r6,-60(fp)
   1bd34:	100b883a 	mov	r5,r2
   1bd38:	e13ff017 	ldw	r4,-64(fp)
   1bd3c:	0009f0c0 	call	9f0c <memcpy>
      ptr   += n;
   1bd40:	e0fff017 	ldw	r3,-64(fp)
   1bd44:	e0bff117 	ldw	r2,-60(fp)
   1bd48:	1885883a 	add	r2,r3,r2
   1bd4c:	e0bff015 	stw	r2,-64(fp)
      space -= n;
   1bd50:	e0fffe17 	ldw	r3,-8(fp)
   1bd54:	e0bff117 	ldw	r2,-60(fp)
   1bd58:	1885c83a 	sub	r2,r3,r2
   1bd5c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1bd60:	e0fff417 	ldw	r3,-48(fp)
   1bd64:	e0bff117 	ldw	r2,-60(fp)
   1bd68:	1885883a 	add	r2,r3,r2
   1bd6c:	10c1ffcc 	andi	r3,r2,2047
   1bd70:	e0bffc17 	ldw	r2,-16(fp)
   1bd74:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   1bd78:	e0bffe17 	ldw	r2,-8(fp)
   1bd7c:	00bfcf16 	blt	zero,r2,1bcbc <altera_avalon_jtag_uart_read+0x54>
   1bd80:	00000106 	br	1bd88 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   1bd84:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   1bd88:	e0fff017 	ldw	r3,-64(fp)
   1bd8c:	e0bffd17 	ldw	r2,-12(fp)
   1bd90:	18802e1e 	bne	r3,r2,1be4c <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1bd94:	e0bfff17 	ldw	r2,-4(fp)
   1bd98:	1090000c 	andi	r2,r2,16384
   1bd9c:	10002d1e 	bne	r2,zero,1be54 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   1bda0:	d0a81943 	ldbu	r2,-24475(gp)
   1bda4:	10803fcc 	andi	r2,r2,255
   1bda8:	10800058 	cmpnei	r2,r2,1
   1bdac:	1000161e 	bne	r2,zero,1be08 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   1bdb0:	e0bffc17 	ldw	r2,-16(fp)
   1bdb4:	10800c17 	ldw	r2,48(r2)
   1bdb8:	e0bff215 	stw	r2,-56(fp)
   1bdbc:	00800144 	movi	r2,5
   1bdc0:	e0bff98d 	sth	r2,-26(fp)
   1bdc4:	00bfe0c4 	movi	r2,-125
   1bdc8:	e0bffa05 	stb	r2,-24(fp)
   1bdcc:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1bdd0:	d0a81943 	ldbu	r2,-24475(gp)
   1bdd4:	10803fcc 	andi	r2,r2,255
   1bdd8:	10001526 	beq	r2,zero,1be30 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1bddc:	e0fff98b 	ldhu	r3,-26(fp)
   1bde0:	e13ffa03 	ldbu	r4,-24(fp)
   1bde4:	e17ffa8b 	ldhu	r5,-22(fp)
   1bde8:	e0bffb44 	addi	r2,fp,-19
   1bdec:	d8800015 	stw	r2,0(sp)
   1bdf0:	280f883a 	mov	r7,r5
   1bdf4:	200d883a 	mov	r6,r4
   1bdf8:	180b883a 	mov	r5,r3
   1bdfc:	e13ff217 	ldw	r4,-56(fp)
   1be00:	0015d8c0 	call	15d8c <OSFlagPend>
   1be04:	00000a06 	br	1be30 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1be08:	0001883a 	nop
   1be0c:	e0bffc17 	ldw	r2,-16(fp)
   1be10:	10c00d17 	ldw	r3,52(r2)
   1be14:	e0bff317 	ldw	r2,-52(fp)
   1be18:	1880051e 	bne	r3,r2,1be30 <altera_avalon_jtag_uart_read+0x1c8>
   1be1c:	e0bffc17 	ldw	r2,-16(fp)
   1be20:	10c00917 	ldw	r3,36(r2)
   1be24:	e0bffc17 	ldw	r2,-16(fp)
   1be28:	10800117 	ldw	r2,4(r2)
   1be2c:	18bff736 	bltu	r3,r2,1be0c <altera_avalon_jtag_uart_read+0x1a4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1be30:	e0bffc17 	ldw	r2,-16(fp)
   1be34:	10c00d17 	ldw	r3,52(r2)
   1be38:	e0bff317 	ldw	r2,-52(fp)
   1be3c:	18800726 	beq	r3,r2,1be5c <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1be40:	e0bffe17 	ldw	r2,-8(fp)
   1be44:	00bf9d16 	blt	zero,r2,1bcbc <altera_avalon_jtag_uart_read+0x54>
   1be48:	00000506 	br	1be60 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   1be4c:	0001883a 	nop
   1be50:	00000306 	br	1be60 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   1be54:	0001883a 	nop
   1be58:	00000106 	br	1be60 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   1be5c:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   1be60:	e0bffc17 	ldw	r2,-16(fp)
   1be64:	10800a17 	ldw	r2,40(r2)
   1be68:	1009883a 	mov	r4,r2
   1be6c:	0018b6c0 	call	18b6c <OSSemPost>

  if (ptr != buffer)
   1be70:	e0fff017 	ldw	r3,-64(fp)
   1be74:	e0bffd17 	ldw	r2,-12(fp)
   1be78:	18801826 	beq	r3,r2,1bedc <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1be7c:	0005303a 	rdctl	r2,status
   1be80:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1be84:	e0fff717 	ldw	r3,-36(fp)
   1be88:	00bfff84 	movi	r2,-2
   1be8c:	1884703a 	and	r2,r3,r2
   1be90:	1001703a 	wrctl	status,r2
  
  return context;
   1be94:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1be98:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1be9c:	e0bffc17 	ldw	r2,-16(fp)
   1bea0:	10800817 	ldw	r2,32(r2)
   1bea4:	10c00054 	ori	r3,r2,1
   1bea8:	e0bffc17 	ldw	r2,-16(fp)
   1beac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1beb0:	e0bffc17 	ldw	r2,-16(fp)
   1beb4:	10800017 	ldw	r2,0(r2)
   1beb8:	10800104 	addi	r2,r2,4
   1bebc:	1007883a 	mov	r3,r2
   1bec0:	e0bffc17 	ldw	r2,-16(fp)
   1bec4:	10800817 	ldw	r2,32(r2)
   1bec8:	18800035 	stwio	r2,0(r3)
   1becc:	e0bff617 	ldw	r2,-40(fp)
   1bed0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bed4:	e0bff517 	ldw	r2,-44(fp)
   1bed8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1bedc:	e0fff017 	ldw	r3,-64(fp)
   1bee0:	e0bffd17 	ldw	r2,-12(fp)
   1bee4:	18800426 	beq	r3,r2,1bef8 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
   1bee8:	e0fff017 	ldw	r3,-64(fp)
   1beec:	e0bffd17 	ldw	r2,-12(fp)
   1bef0:	1885c83a 	sub	r2,r3,r2
   1bef4:	00000606 	br	1bf10 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   1bef8:	e0bfff17 	ldw	r2,-4(fp)
   1befc:	1090000c 	andi	r2,r2,16384
   1bf00:	10000226 	beq	r2,zero,1bf0c <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
   1bf04:	00bffd44 	movi	r2,-11
   1bf08:	00000106 	br	1bf10 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   1bf0c:	00bffec4 	movi	r2,-5
}
   1bf10:	e037883a 	mov	sp,fp
   1bf14:	dfc00117 	ldw	ra,4(sp)
   1bf18:	df000017 	ldw	fp,0(sp)
   1bf1c:	dec00204 	addi	sp,sp,8
   1bf20:	f800283a 	ret

0001bf24 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1bf24:	deffed04 	addi	sp,sp,-76
   1bf28:	dfc01215 	stw	ra,72(sp)
   1bf2c:	df001115 	stw	fp,68(sp)
   1bf30:	df001104 	addi	fp,sp,68
   1bf34:	e13ffc15 	stw	r4,-16(fp)
   1bf38:	e17ffd15 	stw	r5,-12(fp)
   1bf3c:	e1bffe15 	stw	r6,-8(fp)
   1bf40:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1bf44:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1bf48:	e0bffd17 	ldw	r2,-12(fp)
   1bf4c:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   1bf50:	e0bffc17 	ldw	r2,-16(fp)
   1bf54:	10800b17 	ldw	r2,44(r2)
   1bf58:	e0bff815 	stw	r2,-32(fp)
   1bf5c:	e03ff90d 	sth	zero,-28(fp)
   1bf60:	e0bff90b 	ldhu	r2,-28(fp)
   1bf64:	e0fffb44 	addi	r3,fp,-19
   1bf68:	180d883a 	mov	r6,r3
   1bf6c:	100b883a 	mov	r5,r2
   1bf70:	e13ff817 	ldw	r4,-32(fp)
   1bf74:	00187f40 	call	187f4 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1bf78:	00003706 	br	1c058 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1bf7c:	e0bffc17 	ldw	r2,-16(fp)
   1bf80:	10800f17 	ldw	r2,60(r2)
   1bf84:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
   1bf88:	e0bffc17 	ldw	r2,-16(fp)
   1bf8c:	10801017 	ldw	r2,64(r2)
   1bf90:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   1bf94:	e0fff417 	ldw	r3,-48(fp)
   1bf98:	e0bff017 	ldw	r2,-64(fp)
   1bf9c:	1880062e 	bgeu	r3,r2,1bfb8 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   1bfa0:	e0fff017 	ldw	r3,-64(fp)
   1bfa4:	e0bff417 	ldw	r2,-48(fp)
   1bfa8:	1885c83a 	sub	r2,r3,r2
   1bfac:	10bfffc4 	addi	r2,r2,-1
   1bfb0:	e0bff115 	stw	r2,-60(fp)
   1bfb4:	00000b06 	br	1bfe4 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   1bfb8:	e0bff017 	ldw	r2,-64(fp)
   1bfbc:	10000526 	beq	r2,zero,1bfd4 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1bfc0:	00c20004 	movi	r3,2048
   1bfc4:	e0bff417 	ldw	r2,-48(fp)
   1bfc8:	1885c83a 	sub	r2,r3,r2
   1bfcc:	e0bff115 	stw	r2,-60(fp)
   1bfd0:	00000406 	br	1bfe4 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1bfd4:	00c1ffc4 	movi	r3,2047
   1bfd8:	e0bff417 	ldw	r2,-48(fp)
   1bfdc:	1885c83a 	sub	r2,r3,r2
   1bfe0:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   1bfe4:	e0bff117 	ldw	r2,-60(fp)
   1bfe8:	10001e26 	beq	r2,zero,1c064 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
   1bfec:	e0fffe17 	ldw	r3,-8(fp)
   1bff0:	e0bff117 	ldw	r2,-60(fp)
   1bff4:	1880022e 	bgeu	r3,r2,1c000 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   1bff8:	e0bffe17 	ldw	r2,-8(fp)
   1bffc:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1c000:	e0bffc17 	ldw	r2,-16(fp)
   1c004:	10c21104 	addi	r3,r2,2116
   1c008:	e0bff417 	ldw	r2,-48(fp)
   1c00c:	1885883a 	add	r2,r3,r2
   1c010:	e1bff117 	ldw	r6,-60(fp)
   1c014:	e17ffd17 	ldw	r5,-12(fp)
   1c018:	1009883a 	mov	r4,r2
   1c01c:	0009f0c0 	call	9f0c <memcpy>
      ptr   += n;
   1c020:	e0fffd17 	ldw	r3,-12(fp)
   1c024:	e0bff117 	ldw	r2,-60(fp)
   1c028:	1885883a 	add	r2,r3,r2
   1c02c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1c030:	e0fffe17 	ldw	r3,-8(fp)
   1c034:	e0bff117 	ldw	r2,-60(fp)
   1c038:	1885c83a 	sub	r2,r3,r2
   1c03c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1c040:	e0fff417 	ldw	r3,-48(fp)
   1c044:	e0bff117 	ldw	r2,-60(fp)
   1c048:	1885883a 	add	r2,r3,r2
   1c04c:	10c1ffcc 	andi	r3,r2,2047
   1c050:	e0bffc17 	ldw	r2,-16(fp)
   1c054:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1c058:	e0bffe17 	ldw	r2,-8(fp)
   1c05c:	00bfc716 	blt	zero,r2,1bf7c <altera_avalon_jtag_uart_write+0x58>
   1c060:	00000106 	br	1c068 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   1c064:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c068:	0005303a 	rdctl	r2,status
   1c06c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c070:	e0fff717 	ldw	r3,-36(fp)
   1c074:	00bfff84 	movi	r2,-2
   1c078:	1884703a 	and	r2,r3,r2
   1c07c:	1001703a 	wrctl	status,r2
  
  return context;
   1c080:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1c084:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1c088:	e0bffc17 	ldw	r2,-16(fp)
   1c08c:	10800817 	ldw	r2,32(r2)
   1c090:	10c00094 	ori	r3,r2,2
   1c094:	e0bffc17 	ldw	r2,-16(fp)
   1c098:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1c09c:	e0bffc17 	ldw	r2,-16(fp)
   1c0a0:	10800017 	ldw	r2,0(r2)
   1c0a4:	10800104 	addi	r2,r2,4
   1c0a8:	1007883a 	mov	r3,r2
   1c0ac:	e0bffc17 	ldw	r2,-16(fp)
   1c0b0:	10800817 	ldw	r2,32(r2)
   1c0b4:	18800035 	stwio	r2,0(r3)
   1c0b8:	e0bff617 	ldw	r2,-40(fp)
   1c0bc:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c0c0:	e0bff317 	ldw	r2,-52(fp)
   1c0c4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1c0c8:	e0bffe17 	ldw	r2,-8(fp)
   1c0cc:	00802a0e 	bge	zero,r2,1c178 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
   1c0d0:	e0bfff17 	ldw	r2,-4(fp)
   1c0d4:	1090000c 	andi	r2,r2,16384
   1c0d8:	10002a1e 	bne	r2,zero,1c184 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   1c0dc:	d0a81943 	ldbu	r2,-24475(gp)
   1c0e0:	10803fcc 	andi	r2,r2,255
   1c0e4:	10800058 	cmpnei	r2,r2,1
   1c0e8:	1000161e 	bne	r2,zero,1c144 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   1c0ec:	e0bffc17 	ldw	r2,-16(fp)
   1c0f0:	10800c17 	ldw	r2,48(r2)
   1c0f4:	e0bff515 	stw	r2,-44(fp)
   1c0f8:	00800184 	movi	r2,6
   1c0fc:	e0bff98d 	sth	r2,-26(fp)
   1c100:	00bfe0c4 	movi	r2,-125
   1c104:	e0bffa05 	stb	r2,-24(fp)
   1c108:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1c10c:	d0a81943 	ldbu	r2,-24475(gp)
   1c110:	10803fcc 	andi	r2,r2,255
   1c114:	10001526 	beq	r2,zero,1c16c <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1c118:	e0fff98b 	ldhu	r3,-26(fp)
   1c11c:	e13ffa03 	ldbu	r4,-24(fp)
   1c120:	e17ffa8b 	ldhu	r5,-22(fp)
   1c124:	e0bffb04 	addi	r2,fp,-20
   1c128:	d8800015 	stw	r2,0(sp)
   1c12c:	280f883a 	mov	r7,r5
   1c130:	200d883a 	mov	r6,r4
   1c134:	180b883a 	mov	r5,r3
   1c138:	e13ff517 	ldw	r4,-44(fp)
   1c13c:	0015d8c0 	call	15d8c <OSFlagPend>
   1c140:	00000a06 	br	1c16c <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1c144:	0001883a 	nop
   1c148:	e0bffc17 	ldw	r2,-16(fp)
   1c14c:	10c01017 	ldw	r3,64(r2)
   1c150:	e0bff017 	ldw	r2,-64(fp)
   1c154:	1880051e 	bne	r3,r2,1c16c <altera_avalon_jtag_uart_write+0x248>
   1c158:	e0bffc17 	ldw	r2,-16(fp)
   1c15c:	10c00917 	ldw	r3,36(r2)
   1c160:	e0bffc17 	ldw	r2,-16(fp)
   1c164:	10800117 	ldw	r2,4(r2)
   1c168:	18bff736 	bltu	r3,r2,1c148 <altera_avalon_jtag_uart_write+0x224>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1c16c:	e0bffc17 	ldw	r2,-16(fp)
   1c170:	10800917 	ldw	r2,36(r2)
   1c174:	1000051e 	bne	r2,zero,1c18c <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
   1c178:	e0bffe17 	ldw	r2,-8(fp)
   1c17c:	00bfb616 	blt	zero,r2,1c058 <altera_avalon_jtag_uart_write+0x134>
   1c180:	00000306 	br	1c190 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   1c184:	0001883a 	nop
   1c188:	00000106 	br	1c190 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   1c18c:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   1c190:	e0bffc17 	ldw	r2,-16(fp)
   1c194:	10800b17 	ldw	r2,44(r2)
   1c198:	1009883a 	mov	r4,r2
   1c19c:	0018b6c0 	call	18b6c <OSSemPost>

  if (ptr != start)
   1c1a0:	e0fffd17 	ldw	r3,-12(fp)
   1c1a4:	e0bff217 	ldw	r2,-56(fp)
   1c1a8:	18800426 	beq	r3,r2,1c1bc <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
   1c1ac:	e0fffd17 	ldw	r3,-12(fp)
   1c1b0:	e0bff217 	ldw	r2,-56(fp)
   1c1b4:	1885c83a 	sub	r2,r3,r2
   1c1b8:	00000606 	br	1c1d4 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
   1c1bc:	e0bfff17 	ldw	r2,-4(fp)
   1c1c0:	1090000c 	andi	r2,r2,16384
   1c1c4:	10000226 	beq	r2,zero,1c1d0 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
   1c1c8:	00bffd44 	movi	r2,-11
   1c1cc:	00000106 	br	1c1d4 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1c1d0:	00bffec4 	movi	r2,-5
}
   1c1d4:	e037883a 	mov	sp,fp
   1c1d8:	dfc00117 	ldw	ra,4(sp)
   1c1dc:	df000017 	ldw	fp,0(sp)
   1c1e0:	dec00204 	addi	sp,sp,8
   1c1e4:	f800283a 	ret

0001c1e8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1c1e8:	defff904 	addi	sp,sp,-28
   1c1ec:	dfc00615 	stw	ra,24(sp)
   1c1f0:	df000515 	stw	fp,20(sp)
   1c1f4:	df000504 	addi	fp,sp,20
   1c1f8:	e13ffe15 	stw	r4,-8(fp)
   1c1fc:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1c200:	0007883a 	mov	r3,zero
   1c204:	e0bffe17 	ldw	r2,-8(fp)
   1c208:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1c20c:	e0bffe17 	ldw	r2,-8(fp)
   1c210:	10800104 	addi	r2,r2,4
   1c214:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c218:	0005303a 	rdctl	r2,status
   1c21c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c220:	e0fffc17 	ldw	r3,-16(fp)
   1c224:	00bfff84 	movi	r2,-2
   1c228:	1884703a 	and	r2,r3,r2
   1c22c:	1001703a 	wrctl	status,r2
  
  return context;
   1c230:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1c234:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   1c238:	001def80 	call	1def8 <alt_tick>
   1c23c:	e0bffb17 	ldw	r2,-20(fp)
   1c240:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c244:	e0bffd17 	ldw	r2,-12(fp)
   1c248:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1c24c:	0001883a 	nop
   1c250:	e037883a 	mov	sp,fp
   1c254:	dfc00117 	ldw	ra,4(sp)
   1c258:	df000017 	ldw	fp,0(sp)
   1c25c:	dec00204 	addi	sp,sp,8
   1c260:	f800283a 	ret

0001c264 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1c264:	defff904 	addi	sp,sp,-28
   1c268:	dfc00615 	stw	ra,24(sp)
   1c26c:	df000515 	stw	fp,20(sp)
   1c270:	df000504 	addi	fp,sp,20
   1c274:	e13ffc15 	stw	r4,-16(fp)
   1c278:	e17ffd15 	stw	r5,-12(fp)
   1c27c:	e1bffe15 	stw	r6,-8(fp)
   1c280:	e1ffff15 	stw	r7,-4(fp)
   1c284:	e0bfff17 	ldw	r2,-4(fp)
   1c288:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1c28c:	d0a82e17 	ldw	r2,-24392(gp)
   1c290:	1000021e 	bne	r2,zero,1c29c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   1c294:	e0bffb17 	ldw	r2,-20(fp)
   1c298:	d0a82e15 	stw	r2,-24392(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1c29c:	e0bffc17 	ldw	r2,-16(fp)
   1c2a0:	10800104 	addi	r2,r2,4
   1c2a4:	00c001c4 	movi	r3,7
   1c2a8:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   1c2ac:	018000b4 	movhi	r6,2
   1c2b0:	31b07a04 	addi	r6,r6,-15896
   1c2b4:	e17ffc17 	ldw	r5,-16(fp)
   1c2b8:	e13ffe17 	ldw	r4,-8(fp)
   1c2bc:	001da880 	call	1da88 <alt_irq_register>
#endif  
}
   1c2c0:	0001883a 	nop
   1c2c4:	e037883a 	mov	sp,fp
   1c2c8:	dfc00117 	ldw	ra,4(sp)
   1c2cc:	df000017 	ldw	fp,0(sp)
   1c2d0:	dec00204 	addi	sp,sp,8
   1c2d4:	f800283a 	ret

0001c2d8 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   1c2d8:	defffc04 	addi	sp,sp,-16
   1c2dc:	df000315 	stw	fp,12(sp)
   1c2e0:	df000304 	addi	fp,sp,12
   1c2e4:	e13ffe15 	stw	r4,-8(fp)
   1c2e8:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   1c2ec:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   1c2f0:	e0bfff17 	ldw	r2,-4(fp)
   1c2f4:	1000061e 	bne	r2,zero,1c310 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   1c2f8:	e0bffe17 	ldw	r2,-8(fp)
   1c2fc:	1007883a 	mov	r3,r2
   1c300:	e0bffd03 	ldbu	r2,-12(fp)
   1c304:	1884b03a 	or	r2,r3,r2
   1c308:	e0bffd05 	stb	r2,-12(fp)
   1c30c:	00000806 	br	1c330 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   1c310:	e0bffe17 	ldw	r2,-8(fp)
   1c314:	1007883a 	mov	r3,r2
   1c318:	e0bffd03 	ldbu	r2,-12(fp)
   1c31c:	1884b03a 	or	r2,r3,r2
   1c320:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   1c324:	e0bffd03 	ldbu	r2,-12(fp)
   1c328:	10801014 	ori	r2,r2,64
   1c32c:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   1c330:	e0fffd03 	ldbu	r3,-12(fp)
   1c334:	00bfe004 	movi	r2,-128
   1c338:	1884b03a 	or	r2,r3,r2
}
   1c33c:	e037883a 	mov	sp,fp
   1c340:	df000017 	ldw	fp,0(sp)
   1c344:	dec00104 	addi	sp,sp,4
   1c348:	f800283a 	ret

0001c34c <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   1c34c:	defffd04 	addi	sp,sp,-12
   1c350:	df000215 	stw	fp,8(sp)
   1c354:	df000204 	addi	fp,sp,8
   1c358:	e13ffe15 	stw	r4,-8(fp)
   1c35c:	2805883a 	mov	r2,r5
   1c360:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   1c364:	e0bffe17 	ldw	r2,-8(fp)
   1c368:	10800a17 	ldw	r2,40(r2)
   1c36c:	1007883a 	mov	r3,r2
   1c370:	e0bfff03 	ldbu	r2,-4(fp)
   1c374:	18800025 	stbio	r2,0(r3)
}
   1c378:	0001883a 	nop
   1c37c:	e037883a 	mov	sp,fp
   1c380:	df000017 	ldw	fp,0(sp)
   1c384:	dec00104 	addi	sp,sp,4
   1c388:	f800283a 	ret

0001c38c <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   1c38c:	defffe04 	addi	sp,sp,-8
   1c390:	df000115 	stw	fp,4(sp)
   1c394:	df000104 	addi	fp,sp,4
   1c398:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   1c39c:	e0bfff17 	ldw	r2,-4(fp)
   1c3a0:	10800a17 	ldw	r2,40(r2)
   1c3a4:	1007883a 	mov	r3,r2
   1c3a8:	00800044 	movi	r2,1
   1c3ac:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   1c3b0:	0001883a 	nop
   1c3b4:	e037883a 	mov	sp,fp
   1c3b8:	df000017 	ldw	fp,0(sp)
   1c3bc:	dec00104 	addi	sp,sp,4
   1c3c0:	f800283a 	ret

0001c3c4 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   1c3c4:	defffc04 	addi	sp,sp,-16
   1c3c8:	dfc00315 	stw	ra,12(sp)
   1c3cc:	df000215 	stw	fp,8(sp)
   1c3d0:	df000204 	addi	fp,sp,8
   1c3d4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   1c3d8:	d1600904 	addi	r5,gp,-32732
   1c3dc:	e13fff17 	ldw	r4,-4(fp)
   1c3e0:	001d8840 	call	1d884 <alt_find_dev>
   1c3e4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1c3e8:	e0bffe17 	ldw	r2,-8(fp)
}
   1c3ec:	e037883a 	mov	sp,fp
   1c3f0:	dfc00117 	ldw	ra,4(sp)
   1c3f4:	df000017 	ldw	fp,0(sp)
   1c3f8:	dec00204 	addi	sp,sp,8
   1c3fc:	f800283a 	ret

0001c400 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   1c400:	defffb04 	addi	sp,sp,-20
   1c404:	df000415 	stw	fp,16(sp)
   1c408:	df000404 	addi	fp,sp,16
   1c40c:	e13ffd15 	stw	r4,-12(fp)
   1c410:	e17ffe15 	stw	r5,-8(fp)
   1c414:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   1c418:	e03ffc15 	stw	zero,-16(fp)
   1c41c:	00000f06 	br	1c45c <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   1c420:	e0bffd17 	ldw	r2,-12(fp)
   1c424:	10800a17 	ldw	r2,40(r2)
   1c428:	10800044 	addi	r2,r2,1
   1c42c:	1009883a 	mov	r4,r2
   1c430:	e0fffe17 	ldw	r3,-8(fp)
   1c434:	e0bffc17 	ldw	r2,-16(fp)
   1c438:	1885883a 	add	r2,r3,r2
   1c43c:	10800003 	ldbu	r2,0(r2)
   1c440:	10803fcc 	andi	r2,r2,255
   1c444:	1080201c 	xori	r2,r2,128
   1c448:	10bfe004 	addi	r2,r2,-128
   1c44c:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   1c450:	e0bffc17 	ldw	r2,-16(fp)
   1c454:	10800044 	addi	r2,r2,1
   1c458:	e0bffc15 	stw	r2,-16(fp)
   1c45c:	e0fffc17 	ldw	r3,-16(fp)
   1c460:	e0bfff17 	ldw	r2,-4(fp)
   1c464:	18bfee36 	bltu	r3,r2,1c420 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   1c468:	0001883a 	nop
   1c46c:	e037883a 	mov	sp,fp
   1c470:	df000017 	ldw	fp,0(sp)
   1c474:	dec00104 	addi	sp,sp,4
   1c478:	f800283a 	ret

0001c47c <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   1c47c:	defffd04 	addi	sp,sp,-12
   1c480:	df000215 	stw	fp,8(sp)
   1c484:	df000204 	addi	fp,sp,8
   1c488:	e13ffe15 	stw	r4,-8(fp)
   1c48c:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   1c490:	00000d06 	br	1c4c8 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   1c494:	e0bffe17 	ldw	r2,-8(fp)
   1c498:	10800a17 	ldw	r2,40(r2)
   1c49c:	10800044 	addi	r2,r2,1
   1c4a0:	1007883a 	mov	r3,r2
   1c4a4:	e0bfff17 	ldw	r2,-4(fp)
   1c4a8:	10800003 	ldbu	r2,0(r2)
   1c4ac:	10803fcc 	andi	r2,r2,255
   1c4b0:	1080201c 	xori	r2,r2,128
   1c4b4:	10bfe004 	addi	r2,r2,-128
   1c4b8:	18800025 	stbio	r2,0(r3)
		++ptr;
   1c4bc:	e0bfff17 	ldw	r2,-4(fp)
   1c4c0:	10800044 	addi	r2,r2,1
   1c4c4:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   1c4c8:	e0bfff17 	ldw	r2,-4(fp)
   1c4cc:	10800003 	ldbu	r2,0(r2)
   1c4d0:	10803fcc 	andi	r2,r2,255
   1c4d4:	1080201c 	xori	r2,r2,128
   1c4d8:	10bfe004 	addi	r2,r2,-128
   1c4dc:	103fed1e 	bne	r2,zero,1c494 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   1c4e0:	0001883a 	nop
   1c4e4:	e037883a 	mov	sp,fp
   1c4e8:	df000017 	ldw	fp,0(sp)
   1c4ec:	dec00104 	addi	sp,sp,4
   1c4f0:	f800283a 	ret

0001c4f4 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   1c4f4:	defffb04 	addi	sp,sp,-20
   1c4f8:	dfc00415 	stw	ra,16(sp)
   1c4fc:	df000315 	stw	fp,12(sp)
   1c500:	df000304 	addi	fp,sp,12
   1c504:	e13ffd15 	stw	r4,-12(fp)
   1c508:	e17ffe15 	stw	r5,-8(fp)
   1c50c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   1c510:	e0bffd17 	ldw	r2,-12(fp)
   1c514:	10800017 	ldw	r2,0(r2)
   1c518:	e0ffff17 	ldw	r3,-4(fp)
   1c51c:	180d883a 	mov	r6,r3
   1c520:	e17ffe17 	ldw	r5,-8(fp)
   1c524:	1009883a 	mov	r4,r2
   1c528:	001c4000 	call	1c400 <alt_up_character_lcd_write>
	return 0;
   1c52c:	0005883a 	mov	r2,zero
}
   1c530:	e037883a 	mov	sp,fp
   1c534:	dfc00117 	ldw	ra,4(sp)
   1c538:	df000017 	ldw	fp,0(sp)
   1c53c:	dec00204 	addi	sp,sp,8
   1c540:	f800283a 	ret

0001c544 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   1c544:	defffa04 	addi	sp,sp,-24
   1c548:	dfc00515 	stw	ra,20(sp)
   1c54c:	df000415 	stw	fp,16(sp)
   1c550:	df000404 	addi	fp,sp,16
   1c554:	e13ffd15 	stw	r4,-12(fp)
   1c558:	e17ffe15 	stw	r5,-8(fp)
   1c55c:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   1c560:	e0bffe17 	ldw	r2,-8(fp)
   1c564:	10800a28 	cmpgeui	r2,r2,40
   1c568:	1000031e 	bne	r2,zero,1c578 <alt_up_character_lcd_set_cursor_pos+0x34>
   1c56c:	e0bfff17 	ldw	r2,-4(fp)
   1c570:	108000b0 	cmpltui	r2,r2,2
   1c574:	1000021e 	bne	r2,zero,1c580 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   1c578:	00bfffc4 	movi	r2,-1
   1c57c:	00000906 	br	1c5a4 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1c580:	e17fff17 	ldw	r5,-4(fp)
   1c584:	e13ffe17 	ldw	r4,-8(fp)
   1c588:	001c2d80 	call	1c2d8 <get_DDRAM_addr>
   1c58c:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   1c590:	e0bffc03 	ldbu	r2,-16(fp)
   1c594:	100b883a 	mov	r5,r2
   1c598:	e13ffd17 	ldw	r4,-12(fp)
   1c59c:	001c34c0 	call	1c34c <alt_up_character_lcd_send_cmd>
	return 0;
   1c5a0:	0005883a 	mov	r2,zero
}
   1c5a4:	e037883a 	mov	sp,fp
   1c5a8:	dfc00117 	ldw	ra,4(sp)
   1c5ac:	df000017 	ldw	fp,0(sp)
   1c5b0:	dec00204 	addi	sp,sp,8
   1c5b4:	f800283a 	ret

0001c5b8 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1c5b8:	defffb04 	addi	sp,sp,-20
   1c5bc:	dfc00415 	stw	ra,16(sp)
   1c5c0:	df000315 	stw	fp,12(sp)
   1c5c4:	df000304 	addi	fp,sp,12
   1c5c8:	e13ffe15 	stw	r4,-8(fp)
   1c5cc:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   1c5d0:	e0bfff17 	ldw	r2,-4(fp)
   1c5d4:	10001526 	beq	r2,zero,1c62c <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1c5d8:	e0bfff17 	ldw	r2,-4(fp)
   1c5dc:	0080020e 	bge	zero,r2,1c5e8 <alt_up_character_lcd_shift_cursor+0x30>
   1c5e0:	00800504 	movi	r2,20
   1c5e4:	00000106 	br	1c5ec <alt_up_character_lcd_shift_cursor+0x34>
   1c5e8:	00800404 	movi	r2,16
   1c5ec:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1c5f0:	e0bfff17 	ldw	r2,-4(fp)
   1c5f4:	1000010e 	bge	r2,zero,1c5fc <alt_up_character_lcd_shift_cursor+0x44>
   1c5f8:	0085c83a 	sub	r2,zero,r2
   1c5fc:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1c600:	00000406 	br	1c614 <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1c604:	e0bffd43 	ldbu	r2,-11(fp)
   1c608:	100b883a 	mov	r5,r2
   1c60c:	e13ffe17 	ldw	r4,-8(fp)
   1c610:	001c34c0 	call	1c34c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1c614:	e0bffd03 	ldbu	r2,-12(fp)
   1c618:	10ffffc4 	addi	r3,r2,-1
   1c61c:	e0fffd05 	stb	r3,-12(fp)
   1c620:	10803fcc 	andi	r2,r2,255
   1c624:	103ff71e 	bne	r2,zero,1c604 <alt_up_character_lcd_shift_cursor+0x4c>
   1c628:	00000106 	br	1c630 <alt_up_character_lcd_shift_cursor+0x78>

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   1c62c:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   1c630:	e037883a 	mov	sp,fp
   1c634:	dfc00117 	ldw	ra,4(sp)
   1c638:	df000017 	ldw	fp,0(sp)
   1c63c:	dec00204 	addi	sp,sp,8
   1c640:	f800283a 	ret

0001c644 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1c644:	defffb04 	addi	sp,sp,-20
   1c648:	dfc00415 	stw	ra,16(sp)
   1c64c:	df000315 	stw	fp,12(sp)
   1c650:	df000304 	addi	fp,sp,12
   1c654:	e13ffe15 	stw	r4,-8(fp)
   1c658:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   1c65c:	e0bfff17 	ldw	r2,-4(fp)
   1c660:	10001526 	beq	r2,zero,1c6b8 <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1c664:	e0bfff17 	ldw	r2,-4(fp)
   1c668:	0080020e 	bge	zero,r2,1c674 <alt_up_character_lcd_shift_display+0x30>
   1c66c:	00800704 	movi	r2,28
   1c670:	00000106 	br	1c678 <alt_up_character_lcd_shift_display+0x34>
   1c674:	00800604 	movi	r2,24
   1c678:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1c67c:	e0bfff17 	ldw	r2,-4(fp)
   1c680:	1000010e 	bge	r2,zero,1c688 <alt_up_character_lcd_shift_display+0x44>
   1c684:	0085c83a 	sub	r2,zero,r2
   1c688:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1c68c:	00000406 	br	1c6a0 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1c690:	e0bffd43 	ldbu	r2,-11(fp)
   1c694:	100b883a 	mov	r5,r2
   1c698:	e13ffe17 	ldw	r4,-8(fp)
   1c69c:	001c34c0 	call	1c34c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1c6a0:	e0bffd03 	ldbu	r2,-12(fp)
   1c6a4:	10ffffc4 	addi	r3,r2,-1
   1c6a8:	e0fffd05 	stb	r3,-12(fp)
   1c6ac:	10803fcc 	andi	r2,r2,255
   1c6b0:	103ff71e 	bne	r2,zero,1c690 <alt_up_character_lcd_shift_display+0x4c>
   1c6b4:	00000106 	br	1c6bc <alt_up_character_lcd_shift_display+0x78>

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   1c6b8:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   1c6bc:	e037883a 	mov	sp,fp
   1c6c0:	dfc00117 	ldw	ra,4(sp)
   1c6c4:	df000017 	ldw	fp,0(sp)
   1c6c8:	dec00204 	addi	sp,sp,8
   1c6cc:	f800283a 	ret

0001c6d0 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   1c6d0:	defffa04 	addi	sp,sp,-24
   1c6d4:	dfc00515 	stw	ra,20(sp)
   1c6d8:	df000415 	stw	fp,16(sp)
   1c6dc:	df000404 	addi	fp,sp,16
   1c6e0:	e13ffd15 	stw	r4,-12(fp)
   1c6e4:	e17ffe15 	stw	r5,-8(fp)
   1c6e8:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   1c6ec:	e0bffe17 	ldw	r2,-8(fp)
   1c6f0:	10800a28 	cmpgeui	r2,r2,40
   1c6f4:	1000031e 	bne	r2,zero,1c704 <alt_up_character_lcd_erase_pos+0x34>
   1c6f8:	e0bfff17 	ldw	r2,-4(fp)
   1c6fc:	108000b0 	cmpltui	r2,r2,2
   1c700:	1000021e 	bne	r2,zero,1c70c <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   1c704:	00bfffc4 	movi	r2,-1
   1c708:	00000f06 	br	1c748 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1c70c:	e17fff17 	ldw	r5,-4(fp)
   1c710:	e13ffe17 	ldw	r4,-8(fp)
   1c714:	001c2d80 	call	1c2d8 <get_DDRAM_addr>
   1c718:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   1c71c:	e0bffc03 	ldbu	r2,-16(fp)
   1c720:	100b883a 	mov	r5,r2
   1c724:	e13ffd17 	ldw	r4,-12(fp)
   1c728:	001c34c0 	call	1c34c <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   1c72c:	e0bffd17 	ldw	r2,-12(fp)
   1c730:	10800a17 	ldw	r2,40(r2)
   1c734:	10800044 	addi	r2,r2,1
   1c738:	1007883a 	mov	r3,r2
   1c73c:	00800084 	movi	r2,2
   1c740:	18800025 	stbio	r2,0(r3)
	return 0;
   1c744:	0005883a 	mov	r2,zero
}
   1c748:	e037883a 	mov	sp,fp
   1c74c:	dfc00117 	ldw	ra,4(sp)
   1c750:	df000017 	ldw	fp,0(sp)
   1c754:	dec00204 	addi	sp,sp,8
   1c758:	f800283a 	ret

0001c75c <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   1c75c:	defffd04 	addi	sp,sp,-12
   1c760:	dfc00215 	stw	ra,8(sp)
   1c764:	df000115 	stw	fp,4(sp)
   1c768:	df000104 	addi	fp,sp,4
   1c76c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   1c770:	01400304 	movi	r5,12
   1c774:	e13fff17 	ldw	r4,-4(fp)
   1c778:	001c34c0 	call	1c34c <alt_up_character_lcd_send_cmd>
}
   1c77c:	0001883a 	nop
   1c780:	e037883a 	mov	sp,fp
   1c784:	dfc00117 	ldw	ra,4(sp)
   1c788:	df000017 	ldw	fp,0(sp)
   1c78c:	dec00204 	addi	sp,sp,8
   1c790:	f800283a 	ret

0001c794 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   1c794:	defffd04 	addi	sp,sp,-12
   1c798:	dfc00215 	stw	ra,8(sp)
   1c79c:	df000115 	stw	fp,4(sp)
   1c7a0:	df000104 	addi	fp,sp,4
   1c7a4:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   1c7a8:	014003c4 	movi	r5,15
   1c7ac:	e13fff17 	ldw	r4,-4(fp)
   1c7b0:	001c34c0 	call	1c34c <alt_up_character_lcd_send_cmd>
}
   1c7b4:	0001883a 	nop
   1c7b8:	e037883a 	mov	sp,fp
   1c7bc:	dfc00117 	ldw	ra,4(sp)
   1c7c0:	df000017 	ldw	fp,0(sp)
   1c7c4:	dec00204 	addi	sp,sp,8
   1c7c8:	f800283a 	ret

0001c7cc <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   1c7cc:	defffd04 	addi	sp,sp,-12
   1c7d0:	df000215 	stw	fp,8(sp)
   1c7d4:	df000204 	addi	fp,sp,8
   1c7d8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1c7dc:	e0bfff17 	ldw	r2,-4(fp)
   1c7e0:	10800a17 	ldw	r2,40(r2)
   1c7e4:	10800104 	addi	r2,r2,4
   1c7e8:	10800037 	ldwio	r2,0(r2)
   1c7ec:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   1c7f0:	e0bffe17 	ldw	r2,-8(fp)
   1c7f4:	10800054 	ori	r2,r2,1
   1c7f8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1c7fc:	e0bfff17 	ldw	r2,-4(fp)
   1c800:	10800a17 	ldw	r2,40(r2)
   1c804:	10800104 	addi	r2,r2,4
   1c808:	1007883a 	mov	r3,r2
   1c80c:	e0bffe17 	ldw	r2,-8(fp)
   1c810:	18800035 	stwio	r2,0(r3)
}
   1c814:	0001883a 	nop
   1c818:	e037883a 	mov	sp,fp
   1c81c:	df000017 	ldw	fp,0(sp)
   1c820:	dec00104 	addi	sp,sp,4
   1c824:	f800283a 	ret

0001c828 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   1c828:	defffd04 	addi	sp,sp,-12
   1c82c:	df000215 	stw	fp,8(sp)
   1c830:	df000204 	addi	fp,sp,8
   1c834:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1c838:	e0bfff17 	ldw	r2,-4(fp)
   1c83c:	10800a17 	ldw	r2,40(r2)
   1c840:	10800104 	addi	r2,r2,4
   1c844:	10800037 	ldwio	r2,0(r2)
   1c848:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   1c84c:	e0fffe17 	ldw	r3,-8(fp)
   1c850:	00bfff84 	movi	r2,-2
   1c854:	1884703a 	and	r2,r3,r2
   1c858:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1c85c:	e0bfff17 	ldw	r2,-4(fp)
   1c860:	10800a17 	ldw	r2,40(r2)
   1c864:	10800104 	addi	r2,r2,4
   1c868:	1007883a 	mov	r3,r2
   1c86c:	e0bffe17 	ldw	r2,-8(fp)
   1c870:	18800035 	stwio	r2,0(r3)
}
   1c874:	0001883a 	nop
   1c878:	e037883a 	mov	sp,fp
   1c87c:	df000017 	ldw	fp,0(sp)
   1c880:	dec00104 	addi	sp,sp,4
   1c884:	f800283a 	ret

0001c888 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   1c888:	defffd04 	addi	sp,sp,-12
   1c88c:	df000215 	stw	fp,8(sp)
   1c890:	df000204 	addi	fp,sp,8
   1c894:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1c898:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   1c89c:	e0bfff17 	ldw	r2,-4(fp)
   1c8a0:	10800a17 	ldw	r2,40(r2)
   1c8a4:	10800084 	addi	r2,r2,2
   1c8a8:	1080002b 	ldhuio	r2,0(r2)
   1c8ac:	10bfffcc 	andi	r2,r2,65535
   1c8b0:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   1c8b4:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1c8b8:	e037883a 	mov	sp,fp
   1c8bc:	df000017 	ldw	fp,0(sp)
   1c8c0:	dec00104 	addi	sp,sp,4
   1c8c4:	f800283a 	ret

0001c8c8 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   1c8c8:	defffd04 	addi	sp,sp,-12
   1c8cc:	df000215 	stw	fp,8(sp)
   1c8d0:	df000204 	addi	fp,sp,8
   1c8d4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1c8d8:	e0bfff17 	ldw	r2,-4(fp)
   1c8dc:	10800a17 	ldw	r2,40(r2)
   1c8e0:	10800104 	addi	r2,r2,4
   1c8e4:	10800037 	ldwio	r2,0(r2)
   1c8e8:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   1c8ec:	e0bffe17 	ldw	r2,-8(fp)
   1c8f0:	1004d43a 	srli	r2,r2,16
}
   1c8f4:	e037883a 	mov	sp,fp
   1c8f8:	df000017 	ldw	fp,0(sp)
   1c8fc:	dec00104 	addi	sp,sp,4
   1c900:	f800283a 	ret

0001c904 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   1c904:	defffd04 	addi	sp,sp,-12
   1c908:	df000215 	stw	fp,8(sp)
   1c90c:	df000204 	addi	fp,sp,8
   1c910:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   1c914:	e0bfff17 	ldw	r2,-4(fp)
   1c918:	1080800c 	andi	r2,r2,512
   1c91c:	1004d27a 	srli	r2,r2,9
   1c920:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1c924:	e0bffe17 	ldw	r2,-8(fp)
   1c928:	10000226 	beq	r2,zero,1c934 <alt_up_irda_check_parity+0x30>
   1c92c:	00bfffc4 	movi	r2,-1
   1c930:	00000106 	br	1c938 <alt_up_irda_check_parity+0x34>
   1c934:	0005883a 	mov	r2,zero
}
   1c938:	e037883a 	mov	sp,fp
   1c93c:	df000017 	ldw	fp,0(sp)
   1c940:	dec00104 	addi	sp,sp,4
   1c944:	f800283a 	ret

0001c948 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   1c948:	defffd04 	addi	sp,sp,-12
   1c94c:	df000215 	stw	fp,8(sp)
   1c950:	df000204 	addi	fp,sp,8
   1c954:	e13ffe15 	stw	r4,-8(fp)
   1c958:	2805883a 	mov	r2,r5
   1c95c:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   1c960:	e0bffe17 	ldw	r2,-8(fp)
   1c964:	10800a17 	ldw	r2,40(r2)
   1c968:	1007883a 	mov	r3,r2
   1c96c:	e0bfff03 	ldbu	r2,-4(fp)
   1c970:	18800035 	stwio	r2,0(r3)
	return 0;
   1c974:	0005883a 	mov	r2,zero
}
   1c978:	e037883a 	mov	sp,fp
   1c97c:	df000017 	ldw	fp,0(sp)
   1c980:	dec00104 	addi	sp,sp,4
   1c984:	f800283a 	ret

0001c988 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   1c988:	defffa04 	addi	sp,sp,-24
   1c98c:	dfc00515 	stw	ra,20(sp)
   1c990:	df000415 	stw	fp,16(sp)
   1c994:	df000404 	addi	fp,sp,16
   1c998:	e13ffd15 	stw	r4,-12(fp)
   1c99c:	e17ffe15 	stw	r5,-8(fp)
   1c9a0:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   1c9a4:	e0bffd17 	ldw	r2,-12(fp)
   1c9a8:	10800a17 	ldw	r2,40(r2)
   1c9ac:	10800037 	ldwio	r2,0(r2)
   1c9b0:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   1c9b4:	e0bffc17 	ldw	r2,-16(fp)
   1c9b8:	1007883a 	mov	r3,r2
   1c9bc:	e0bffe17 	ldw	r2,-8(fp)
   1c9c0:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   1c9c4:	e13ffc17 	ldw	r4,-16(fp)
   1c9c8:	001c9040 	call	1c904 <alt_up_irda_check_parity>
   1c9cc:	1007883a 	mov	r3,r2
   1c9d0:	e0bfff17 	ldw	r2,-4(fp)
   1c9d4:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   1c9d8:	e0bffc17 	ldw	r2,-16(fp)
   1c9dc:	10a0000c 	andi	r2,r2,32768
   1c9e0:	1004d3fa 	srli	r2,r2,15
   1c9e4:	10bfffc4 	addi	r2,r2,-1
}
   1c9e8:	e037883a 	mov	sp,fp
   1c9ec:	dfc00117 	ldw	ra,4(sp)
   1c9f0:	df000017 	ldw	fp,0(sp)
   1c9f4:	dec00204 	addi	sp,sp,8
   1c9f8:	f800283a 	ret

0001c9fc <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   1c9fc:	defff804 	addi	sp,sp,-32
   1ca00:	dfc00715 	stw	ra,28(sp)
   1ca04:	df000615 	stw	fp,24(sp)
   1ca08:	df000604 	addi	fp,sp,24
   1ca0c:	e13ffd15 	stw	r4,-12(fp)
   1ca10:	e17ffe15 	stw	r5,-8(fp)
   1ca14:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1ca18:	e0bffd17 	ldw	r2,-12(fp)
   1ca1c:	10800017 	ldw	r2,0(r2)
   1ca20:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1ca24:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1ca28:	00000c06 	br	1ca5c <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   1ca2c:	e0bffe17 	ldw	r2,-8(fp)
   1ca30:	10c00044 	addi	r3,r2,1
   1ca34:	e0fffe15 	stw	r3,-8(fp)
   1ca38:	e0fffc04 	addi	r3,fp,-16
   1ca3c:	180d883a 	mov	r6,r3
   1ca40:	100b883a 	mov	r5,r2
   1ca44:	e13ffb17 	ldw	r4,-20(fp)
   1ca48:	001c9880 	call	1c988 <alt_up_irda_read_data>
   1ca4c:	1000081e 	bne	r2,zero,1ca70 <alt_up_irda_read_fd+0x74>
			count++;
   1ca50:	e0bffa17 	ldw	r2,-24(fp)
   1ca54:	10800044 	addi	r2,r2,1
   1ca58:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1ca5c:	e0bfff17 	ldw	r2,-4(fp)
   1ca60:	10ffffc4 	addi	r3,r2,-1
   1ca64:	e0ffff15 	stw	r3,-4(fp)
   1ca68:	103ff01e 	bne	r2,zero,1ca2c <alt_up_irda_read_fd+0x30>
   1ca6c:	00000106 	br	1ca74 <alt_up_irda_read_fd+0x78>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   1ca70:	0001883a 	nop
	}
	return count;
   1ca74:	e0bffa17 	ldw	r2,-24(fp)
}
   1ca78:	e037883a 	mov	sp,fp
   1ca7c:	dfc00117 	ldw	ra,4(sp)
   1ca80:	df000017 	ldw	fp,0(sp)
   1ca84:	dec00204 	addi	sp,sp,8
   1ca88:	f800283a 	ret

0001ca8c <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1ca8c:	defff904 	addi	sp,sp,-28
   1ca90:	dfc00615 	stw	ra,24(sp)
   1ca94:	df000515 	stw	fp,20(sp)
   1ca98:	df000504 	addi	fp,sp,20
   1ca9c:	e13ffd15 	stw	r4,-12(fp)
   1caa0:	e17ffe15 	stw	r5,-8(fp)
   1caa4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1caa8:	e0bffd17 	ldw	r2,-12(fp)
   1caac:	10800017 	ldw	r2,0(r2)
   1cab0:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1cab4:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1cab8:	00000c06 	br	1caec <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   1cabc:	e0bffe17 	ldw	r2,-8(fp)
   1cac0:	10c00044 	addi	r3,r2,1
   1cac4:	e0fffe15 	stw	r3,-8(fp)
   1cac8:	10800003 	ldbu	r2,0(r2)
   1cacc:	10803fcc 	andi	r2,r2,255
   1cad0:	100b883a 	mov	r5,r2
   1cad4:	e13ffc17 	ldw	r4,-16(fp)
   1cad8:	001c9480 	call	1c948 <alt_up_irda_write_data>
   1cadc:	1000081e 	bne	r2,zero,1cb00 <alt_up_irda_write_fd+0x74>
			count++;
   1cae0:	e0bffb17 	ldw	r2,-20(fp)
   1cae4:	10800044 	addi	r2,r2,1
   1cae8:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   1caec:	e0bfff17 	ldw	r2,-4(fp)
   1caf0:	10ffffc4 	addi	r3,r2,-1
   1caf4:	e0ffff15 	stw	r3,-4(fp)
   1caf8:	103ff01e 	bne	r2,zero,1cabc <alt_up_irda_write_fd+0x30>
   1cafc:	00000106 	br	1cb04 <alt_up_irda_write_fd+0x78>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
   1cb00:	0001883a 	nop
	}
	return count;
   1cb04:	e0bffb17 	ldw	r2,-20(fp)
}
   1cb08:	e037883a 	mov	sp,fp
   1cb0c:	dfc00117 	ldw	ra,4(sp)
   1cb10:	df000017 	ldw	fp,0(sp)
   1cb14:	dec00204 	addi	sp,sp,8
   1cb18:	f800283a 	ret

0001cb1c <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   1cb1c:	defffc04 	addi	sp,sp,-16
   1cb20:	dfc00315 	stw	ra,12(sp)
   1cb24:	df000215 	stw	fp,8(sp)
   1cb28:	df000204 	addi	fp,sp,8
   1cb2c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   1cb30:	d1600904 	addi	r5,gp,-32732
   1cb34:	e13fff17 	ldw	r4,-4(fp)
   1cb38:	001d8840 	call	1d884 <alt_find_dev>
   1cb3c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1cb40:	e0bffe17 	ldw	r2,-8(fp)
}
   1cb44:	e037883a 	mov	sp,fp
   1cb48:	dfc00117 	ldw	ra,4(sp)
   1cb4c:	df000017 	ldw	fp,0(sp)
   1cb50:	dec00204 	addi	sp,sp,8
   1cb54:	f800283a 	ret

0001cb58 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   1cb58:	defffd04 	addi	sp,sp,-12
   1cb5c:	df000215 	stw	fp,8(sp)
   1cb60:	df000204 	addi	fp,sp,8
   1cb64:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   1cb68:	e0bfff17 	ldw	r2,-4(fp)
   1cb6c:	1080400c 	andi	r2,r2,256
   1cb70:	1004d23a 	srli	r2,r2,8
   1cb74:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   1cb78:	e0bffe03 	ldbu	r2,-8(fp)
}
   1cb7c:	e037883a 	mov	sp,fp
   1cb80:	df000017 	ldw	fp,0(sp)
   1cb84:	dec00104 	addi	sp,sp,4
   1cb88:	f800283a 	ret

0001cb8c <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   1cb8c:	defffd04 	addi	sp,sp,-12
   1cb90:	df000215 	stw	fp,8(sp)
   1cb94:	df000204 	addi	fp,sp,8
   1cb98:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   1cb9c:	e0bfff17 	ldw	r2,-4(fp)
   1cba0:	1080004c 	andi	r2,r2,1
   1cba4:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1cba8:	e0bffe03 	ldbu	r2,-8(fp)
}
   1cbac:	e037883a 	mov	sp,fp
   1cbb0:	df000017 	ldw	fp,0(sp)
   1cbb4:	dec00104 	addi	sp,sp,4
   1cbb8:	f800283a 	ret

0001cbbc <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   1cbbc:	defffd04 	addi	sp,sp,-12
   1cbc0:	df000215 	stw	fp,8(sp)
   1cbc4:	df000204 	addi	fp,sp,8
   1cbc8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   1cbcc:	e0bfff17 	ldw	r2,-4(fp)
   1cbd0:	1081000c 	andi	r2,r2,1024
   1cbd4:	1004d2ba 	srli	r2,r2,10
   1cbd8:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1cbdc:	e0bffe03 	ldbu	r2,-8(fp)
}
   1cbe0:	e037883a 	mov	sp,fp
   1cbe4:	df000017 	ldw	fp,0(sp)
   1cbe8:	dec00104 	addi	sp,sp,4
   1cbec:	f800283a 	ret

0001cbf0 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   1cbf0:	defffd04 	addi	sp,sp,-12
   1cbf4:	df000215 	stw	fp,8(sp)
   1cbf8:	df000204 	addi	fp,sp,8
   1cbfc:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   1cc00:	e0bfff17 	ldw	r2,-4(fp)
   1cc04:	1004d43a 	srli	r2,r2,16
   1cc08:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   1cc0c:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1cc10:	e037883a 	mov	sp,fp
   1cc14:	df000017 	ldw	fp,0(sp)
   1cc18:	dec00104 	addi	sp,sp,4
   1cc1c:	f800283a 	ret

0001cc20 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   1cc20:	defffd04 	addi	sp,sp,-12
   1cc24:	df000215 	stw	fp,8(sp)
   1cc28:	df000204 	addi	fp,sp,8
   1cc2c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   1cc30:	e0bfff17 	ldw	r2,-4(fp)
   1cc34:	10a0000c 	andi	r2,r2,32768
   1cc38:	1004d3fa 	srli	r2,r2,15
   1cc3c:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   1cc40:	e0bffe03 	ldbu	r2,-8(fp)
}
   1cc44:	e037883a 	mov	sp,fp
   1cc48:	df000017 	ldw	fp,0(sp)
   1cc4c:	dec00104 	addi	sp,sp,4
   1cc50:	f800283a 	ret

0001cc54 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   1cc54:	defffd04 	addi	sp,sp,-12
   1cc58:	df000215 	stw	fp,8(sp)
   1cc5c:	df000204 	addi	fp,sp,8
   1cc60:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   1cc64:	e0bfff17 	ldw	r2,-4(fp)
   1cc68:	e0bffe05 	stb	r2,-8(fp)
	return data;
   1cc6c:	e0bffe03 	ldbu	r2,-8(fp)
}
   1cc70:	e037883a 	mov	sp,fp
   1cc74:	df000017 	ldw	fp,0(sp)
   1cc78:	dec00104 	addi	sp,sp,4
   1cc7c:	f800283a 	ret

0001cc80 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   1cc80:	defffb04 	addi	sp,sp,-20
   1cc84:	dfc00415 	stw	ra,16(sp)
   1cc88:	df000315 	stw	fp,12(sp)
   1cc8c:	df000304 	addi	fp,sp,12
   1cc90:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   1cc94:	01403fc4 	movi	r5,255
   1cc98:	e13fff17 	ldw	r4,-4(fp)
   1cc9c:	001cee00 	call	1cee0 <alt_up_ps2_write_data_byte_with_ack>
   1cca0:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   1cca4:	e0bffd17 	ldw	r2,-12(fp)
   1cca8:	1000211e 	bne	r2,zero,1cd30 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1ccac:	e0bffe04 	addi	r2,fp,-8
   1ccb0:	100b883a 	mov	r5,r2
   1ccb4:	e13fff17 	ldw	r4,-4(fp)
   1ccb8:	001cf440 	call	1cf44 <alt_up_ps2_read_data_byte_timeout>
   1ccbc:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   1ccc0:	e0bffd17 	ldw	r2,-12(fp)
   1ccc4:	10001a1e 	bne	r2,zero,1cd30 <alt_up_ps2_init+0xb0>
   1ccc8:	e0bffe03 	ldbu	r2,-8(fp)
   1cccc:	10803fcc 	andi	r2,r2,255
   1ccd0:	10802a98 	cmpnei	r2,r2,170
   1ccd4:	1000161e 	bne	r2,zero,1cd30 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1ccd8:	e0bffe04 	addi	r2,fp,-8
   1ccdc:	100b883a 	mov	r5,r2
   1cce0:	e13fff17 	ldw	r4,-4(fp)
   1cce4:	001cf440 	call	1cf44 <alt_up_ps2_read_data_byte_timeout>
   1cce8:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   1ccec:	e0bffd17 	ldw	r2,-12(fp)
   1ccf0:	10bfe318 	cmpnei	r2,r2,-116
   1ccf4:	1000041e 	bne	r2,zero,1cd08 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   1ccf8:	e0bfff17 	ldw	r2,-4(fp)
   1ccfc:	00c00044 	movi	r3,1
   1cd00:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
   1cd04:	00000a06 	br	1cd30 <alt_up_ps2_init+0xb0>
			if (status == -ETIMEDOUT)
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
			}
			else if (status == 0 && byte == 0x00)
   1cd08:	e0bffd17 	ldw	r2,-12(fp)
   1cd0c:	1000081e 	bne	r2,zero,1cd30 <alt_up_ps2_init+0xb0>
   1cd10:	e0bffe03 	ldbu	r2,-8(fp)
   1cd14:	10803fcc 	andi	r2,r2,255
   1cd18:	1000051e 	bne	r2,zero,1cd30 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   1cd1c:	e0bfff17 	ldw	r2,-4(fp)
   1cd20:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   1cd24:	01403d04 	movi	r5,244
   1cd28:	e13fff17 	ldw	r4,-4(fp)
   1cd2c:	001ce040 	call	1ce04 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   1cd30:	0001883a 	nop
   1cd34:	e037883a 	mov	sp,fp
   1cd38:	dfc00117 	ldw	ra,4(sp)
   1cd3c:	df000017 	ldw	fp,0(sp)
   1cd40:	dec00204 	addi	sp,sp,8
   1cd44:	f800283a 	ret

0001cd48 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1cd48:	defffd04 	addi	sp,sp,-12
   1cd4c:	df000215 	stw	fp,8(sp)
   1cd50:	df000204 	addi	fp,sp,8
   1cd54:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1cd58:	e0bfff17 	ldw	r2,-4(fp)
   1cd5c:	10800a17 	ldw	r2,40(r2)
   1cd60:	10800104 	addi	r2,r2,4
   1cd64:	10800037 	ldwio	r2,0(r2)
   1cd68:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1cd6c:	e0bffe17 	ldw	r2,-8(fp)
   1cd70:	10800054 	ori	r2,r2,1
   1cd74:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1cd78:	e0bfff17 	ldw	r2,-4(fp)
   1cd7c:	10800a17 	ldw	r2,40(r2)
   1cd80:	10800104 	addi	r2,r2,4
   1cd84:	1007883a 	mov	r3,r2
   1cd88:	e0bffe17 	ldw	r2,-8(fp)
   1cd8c:	18800035 	stwio	r2,0(r3)
}
   1cd90:	0001883a 	nop
   1cd94:	e037883a 	mov	sp,fp
   1cd98:	df000017 	ldw	fp,0(sp)
   1cd9c:	dec00104 	addi	sp,sp,4
   1cda0:	f800283a 	ret

0001cda4 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1cda4:	defffd04 	addi	sp,sp,-12
   1cda8:	df000215 	stw	fp,8(sp)
   1cdac:	df000204 	addi	fp,sp,8
   1cdb0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1cdb4:	e0bfff17 	ldw	r2,-4(fp)
   1cdb8:	10800a17 	ldw	r2,40(r2)
   1cdbc:	10800104 	addi	r2,r2,4
   1cdc0:	10800037 	ldwio	r2,0(r2)
   1cdc4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1cdc8:	e0fffe17 	ldw	r3,-8(fp)
   1cdcc:	00bfff84 	movi	r2,-2
   1cdd0:	1884703a 	and	r2,r3,r2
   1cdd4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1cdd8:	e0bfff17 	ldw	r2,-4(fp)
   1cddc:	10800a17 	ldw	r2,40(r2)
   1cde0:	10800104 	addi	r2,r2,4
   1cde4:	1007883a 	mov	r3,r2
   1cde8:	e0bffe17 	ldw	r2,-8(fp)
   1cdec:	18800035 	stwio	r2,0(r3)
}
   1cdf0:	0001883a 	nop
   1cdf4:	e037883a 	mov	sp,fp
   1cdf8:	df000017 	ldw	fp,0(sp)
   1cdfc:	dec00104 	addi	sp,sp,4
   1ce00:	f800283a 	ret

0001ce04 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1ce04:	defffb04 	addi	sp,sp,-20
   1ce08:	dfc00415 	stw	ra,16(sp)
   1ce0c:	df000315 	stw	fp,12(sp)
   1ce10:	df000304 	addi	fp,sp,12
   1ce14:	e13ffe15 	stw	r4,-8(fp)
   1ce18:	2805883a 	mov	r2,r5
   1ce1c:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   1ce20:	e0bffe17 	ldw	r2,-8(fp)
   1ce24:	10800a17 	ldw	r2,40(r2)
   1ce28:	1007883a 	mov	r3,r2
   1ce2c:	e0bfff03 	ldbu	r2,-4(fp)
   1ce30:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   1ce34:	e0bffe17 	ldw	r2,-8(fp)
   1ce38:	10800a17 	ldw	r2,40(r2)
   1ce3c:	10800104 	addi	r2,r2,4
   1ce40:	10800037 	ldwio	r2,0(r2)
   1ce44:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   1ce48:	e13ffd17 	ldw	r4,-12(fp)
   1ce4c:	001cbbc0 	call	1cbbc <read_CE_bit>
   1ce50:	10803fcc 	andi	r2,r2,255
   1ce54:	10000226 	beq	r2,zero,1ce60 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   1ce58:	00bffec4 	movi	r2,-5
   1ce5c:	00000106 	br	1ce64 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   1ce60:	0005883a 	mov	r2,zero
}
   1ce64:	e037883a 	mov	sp,fp
   1ce68:	dfc00117 	ldw	ra,4(sp)
   1ce6c:	df000017 	ldw	fp,0(sp)
   1ce70:	dec00204 	addi	sp,sp,8
   1ce74:	f800283a 	ret

0001ce78 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   1ce78:	defffc04 	addi	sp,sp,-16
   1ce7c:	dfc00315 	stw	ra,12(sp)
   1ce80:	df000215 	stw	fp,8(sp)
   1ce84:	df000204 	addi	fp,sp,8
   1ce88:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   1ce8c:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   1ce90:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   1ce94:	e0bffe44 	addi	r2,fp,-7
   1ce98:	100b883a 	mov	r5,r2
   1ce9c:	e13fff17 	ldw	r4,-4(fp)
   1cea0:	001cf440 	call	1cf44 <alt_up_ps2_read_data_byte_timeout>
   1cea4:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   1cea8:	e0bffe03 	ldbu	r2,-8(fp)
   1ceac:	1000061e 	bne	r2,zero,1cec8 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   1ceb0:	e0bffe43 	ldbu	r2,-7(fp)
   1ceb4:	10803fcc 	andi	r2,r2,255
   1ceb8:	10803e98 	cmpnei	r2,r2,250
   1cebc:	103ff51e 	bne	r2,zero,1ce94 <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
   1cec0:	0005883a 	mov	r2,zero
   1cec4:	00000106 	br	1cecc <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
   1cec8:	e0bffe03 	ldbu	r2,-8(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
   1cecc:	e037883a 	mov	sp,fp
   1ced0:	dfc00117 	ldw	ra,4(sp)
   1ced4:	df000017 	ldw	fp,0(sp)
   1ced8:	dec00204 	addi	sp,sp,8
   1cedc:	f800283a 	ret

0001cee0 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1cee0:	defffa04 	addi	sp,sp,-24
   1cee4:	dfc00515 	stw	ra,20(sp)
   1cee8:	df000415 	stw	fp,16(sp)
   1ceec:	df000404 	addi	fp,sp,16
   1cef0:	e13ffe15 	stw	r4,-8(fp)
   1cef4:	2805883a 	mov	r2,r5
   1cef8:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   1cefc:	e0bfff03 	ldbu	r2,-4(fp)
   1cf00:	100b883a 	mov	r5,r2
   1cf04:	e13ffe17 	ldw	r4,-8(fp)
   1cf08:	001ce040 	call	1ce04 <alt_up_ps2_write_data_byte>
   1cf0c:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   1cf10:	e0bffc17 	ldw	r2,-16(fp)
   1cf14:	10000226 	beq	r2,zero,1cf20 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   1cf18:	e0bffc17 	ldw	r2,-16(fp)
   1cf1c:	00000406 	br	1cf30 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   1cf20:	e13ffe17 	ldw	r4,-8(fp)
   1cf24:	001ce780 	call	1ce78 <alt_up_ps2_wait_for_ack>
   1cf28:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   1cf2c:	e0bffd17 	ldw	r2,-12(fp)
}
   1cf30:	e037883a 	mov	sp,fp
   1cf34:	dfc00117 	ldw	ra,4(sp)
   1cf38:	df000017 	ldw	fp,0(sp)
   1cf3c:	dec00204 	addi	sp,sp,8
   1cf40:	f800283a 	ret

0001cf44 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1cf44:	defffa04 	addi	sp,sp,-24
   1cf48:	dfc00515 	stw	ra,20(sp)
   1cf4c:	df000415 	stw	fp,16(sp)
   1cf50:	df000404 	addi	fp,sp,16
   1cf54:	e13ffe15 	stw	r4,-8(fp)
   1cf58:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1cf5c:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   1cf60:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   1cf64:	e0bffc17 	ldw	r2,-16(fp)
   1cf68:	10800044 	addi	r2,r2,1
   1cf6c:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1cf70:	e0bffe17 	ldw	r2,-8(fp)
   1cf74:	10800a17 	ldw	r2,40(r2)
   1cf78:	10800037 	ldwio	r2,0(r2)
   1cf7c:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   1cf80:	e13ffd17 	ldw	r4,-12(fp)
   1cf84:	001cc200 	call	1cc20 <read_data_valid>
   1cf88:	10803fcc 	andi	r2,r2,255
   1cf8c:	10000726 	beq	r2,zero,1cfac <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   1cf90:	e13ffd17 	ldw	r4,-12(fp)
   1cf94:	001cc540 	call	1cc54 <read_data_byte>
   1cf98:	1007883a 	mov	r3,r2
   1cf9c:	e0bfff17 	ldw	r2,-4(fp)
   1cfa0:	10c00005 	stb	r3,0(r2)
			return 0;
   1cfa4:	0005883a 	mov	r2,zero
   1cfa8:	00000806 	br	1cfcc <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   1cfac:	e0bffe17 	ldw	r2,-8(fp)
   1cfb0:	10800c17 	ldw	r2,48(r2)
   1cfb4:	103feb26 	beq	r2,zero,1cf64 <alt_up_ps2_read_data_byte_timeout+0x20>
   1cfb8:	e0bffe17 	ldw	r2,-8(fp)
   1cfbc:	10c00c17 	ldw	r3,48(r2)
   1cfc0:	e0bffc17 	ldw	r2,-16(fp)
   1cfc4:	18bfe72e 	bgeu	r3,r2,1cf64 <alt_up_ps2_read_data_byte_timeout+0x20>
		{
			return -ETIMEDOUT;
   1cfc8:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
   1cfcc:	e037883a 	mov	sp,fp
   1cfd0:	dfc00117 	ldw	ra,4(sp)
   1cfd4:	df000017 	ldw	fp,0(sp)
   1cfd8:	dec00204 	addi	sp,sp,8
   1cfdc:	f800283a 	ret

0001cfe0 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1cfe0:	defffb04 	addi	sp,sp,-20
   1cfe4:	dfc00415 	stw	ra,16(sp)
   1cfe8:	df000315 	stw	fp,12(sp)
   1cfec:	df000304 	addi	fp,sp,12
   1cff0:	e13ffe15 	stw	r4,-8(fp)
   1cff4:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1cff8:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1cffc:	e0bffe17 	ldw	r2,-8(fp)
   1d000:	10800a17 	ldw	r2,40(r2)
   1d004:	10800037 	ldwio	r2,0(r2)
   1d008:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   1d00c:	e13ffd17 	ldw	r4,-12(fp)
   1d010:	001cc200 	call	1cc20 <read_data_valid>
   1d014:	10803fcc 	andi	r2,r2,255
   1d018:	10000726 	beq	r2,zero,1d038 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   1d01c:	e13ffd17 	ldw	r4,-12(fp)
   1d020:	001cc540 	call	1cc54 <read_data_byte>
   1d024:	1007883a 	mov	r3,r2
   1d028:	e0bfff17 	ldw	r2,-4(fp)
   1d02c:	10c00005 	stb	r3,0(r2)
		return 0;
   1d030:	0005883a 	mov	r2,zero
   1d034:	00000106 	br	1d03c <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   1d038:	00bfffc4 	movi	r2,-1
}
   1d03c:	e037883a 	mov	sp,fp
   1d040:	dfc00117 	ldw	ra,4(sp)
   1d044:	df000017 	ldw	fp,0(sp)
   1d048:	dec00204 	addi	sp,sp,8
   1d04c:	f800283a 	ret

0001d050 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   1d050:	defffb04 	addi	sp,sp,-20
   1d054:	dfc00415 	stw	ra,16(sp)
   1d058:	df000315 	stw	fp,12(sp)
   1d05c:	df000304 	addi	fp,sp,12
   1d060:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   1d064:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   1d068:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1d06c:	e0bfff17 	ldw	r2,-4(fp)
   1d070:	10800a17 	ldw	r2,40(r2)
   1d074:	10800037 	ldwio	r2,0(r2)
   1d078:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   1d07c:	e13ffe17 	ldw	r4,-8(fp)
   1d080:	001cbf00 	call	1cbf0 <read_num_bytes_available>
   1d084:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   1d088:	e0bffd0b 	ldhu	r2,-12(fp)
   1d08c:	103ff71e 	bne	r2,zero,1d06c <alt_up_ps2_clear_fifo+0x1c>
}
   1d090:	0001883a 	nop
   1d094:	e037883a 	mov	sp,fp
   1d098:	dfc00117 	ldw	ra,4(sp)
   1d09c:	df000017 	ldw	fp,0(sp)
   1d0a0:	dec00204 	addi	sp,sp,8
   1d0a4:	f800283a 	ret

0001d0a8 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   1d0a8:	defff804 	addi	sp,sp,-32
   1d0ac:	dfc00715 	stw	ra,28(sp)
   1d0b0:	df000615 	stw	fp,24(sp)
   1d0b4:	df000604 	addi	fp,sp,24
   1d0b8:	e13ffd15 	stw	r4,-12(fp)
   1d0bc:	e17ffe15 	stw	r5,-8(fp)
   1d0c0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1d0c4:	e0bffd17 	ldw	r2,-12(fp)
   1d0c8:	10800017 	ldw	r2,0(r2)
   1d0cc:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   1d0d0:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   1d0d4:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   1d0d8:	e0fffc17 	ldw	r3,-16(fp)
   1d0dc:	e0bfff17 	ldw	r2,-4(fp)
   1d0e0:	18bffd16 	blt	r3,r2,1d0d8 <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   1d0e4:	e0bffe17 	ldw	r2,-8(fp)
   1d0e8:	10c00044 	addi	r3,r2,1
   1d0ec:	e0fffe15 	stw	r3,-8(fp)
   1d0f0:	100b883a 	mov	r5,r2
   1d0f4:	e13ffa17 	ldw	r4,-24(fp)
   1d0f8:	001cf440 	call	1cf44 <alt_up_ps2_read_data_byte_timeout>
   1d0fc:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   1d100:	e0bffb17 	ldw	r2,-20(fp)
   1d104:	10000226 	beq	r2,zero,1d110 <alt_up_ps2_read_fd+0x68>
			return count;
   1d108:	e0bffc17 	ldw	r2,-16(fp)
   1d10c:	00000406 	br	1d120 <alt_up_ps2_read_fd+0x78>
		count++;
   1d110:	e0bffc17 	ldw	r2,-16(fp)
   1d114:	10800044 	addi	r2,r2,1
   1d118:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   1d11c:	e0bffc17 	ldw	r2,-16(fp)
}
   1d120:	e037883a 	mov	sp,fp
   1d124:	dfc00117 	ldw	ra,4(sp)
   1d128:	df000017 	ldw	fp,0(sp)
   1d12c:	dec00204 	addi	sp,sp,8
   1d130:	f800283a 	ret

0001d134 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1d134:	defff804 	addi	sp,sp,-32
   1d138:	dfc00715 	stw	ra,28(sp)
   1d13c:	df000615 	stw	fp,24(sp)
   1d140:	df000604 	addi	fp,sp,24
   1d144:	e13ffd15 	stw	r4,-12(fp)
   1d148:	e17ffe15 	stw	r5,-8(fp)
   1d14c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1d150:	e0bffd17 	ldw	r2,-12(fp)
   1d154:	10800017 	ldw	r2,0(r2)
   1d158:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   1d15c:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   1d160:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   1d164:	00001006 	br	1d1a8 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   1d168:	e0bffe17 	ldw	r2,-8(fp)
   1d16c:	10c00044 	addi	r3,r2,1
   1d170:	e0fffe15 	stw	r3,-8(fp)
   1d174:	10800003 	ldbu	r2,0(r2)
   1d178:	10803fcc 	andi	r2,r2,255
   1d17c:	100b883a 	mov	r5,r2
   1d180:	e13ffb17 	ldw	r4,-20(fp)
   1d184:	001ce040 	call	1ce04 <alt_up_ps2_write_data_byte>
   1d188:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   1d18c:	e0bffc17 	ldw	r2,-16(fp)
   1d190:	10000226 	beq	r2,zero,1d19c <alt_up_ps2_write_fd+0x68>
			return count;
   1d194:	e0bffa17 	ldw	r2,-24(fp)
   1d198:	00000706 	br	1d1b8 <alt_up_ps2_write_fd+0x84>
		count++;
   1d19c:	e0bffa17 	ldw	r2,-24(fp)
   1d1a0:	10800044 	addi	r2,r2,1
   1d1a4:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   1d1a8:	e0fffa17 	ldw	r3,-24(fp)
   1d1ac:	e0bfff17 	ldw	r2,-4(fp)
   1d1b0:	18bfed16 	blt	r3,r2,1d168 <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   1d1b4:	e0bffa17 	ldw	r2,-24(fp)
}
   1d1b8:	e037883a 	mov	sp,fp
   1d1bc:	dfc00117 	ldw	ra,4(sp)
   1d1c0:	df000017 	ldw	fp,0(sp)
   1d1c4:	dec00204 	addi	sp,sp,8
   1d1c8:	f800283a 	ret

0001d1cc <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   1d1cc:	defffc04 	addi	sp,sp,-16
   1d1d0:	dfc00315 	stw	ra,12(sp)
   1d1d4:	df000215 	stw	fp,8(sp)
   1d1d8:	df000204 	addi	fp,sp,8
   1d1dc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   1d1e0:	d1600904 	addi	r5,gp,-32732
   1d1e4:	e13fff17 	ldw	r4,-4(fp)
   1d1e8:	001d8840 	call	1d884 <alt_find_dev>
   1d1ec:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1d1f0:	e0bffe17 	ldw	r2,-8(fp)
}
   1d1f4:	e037883a 	mov	sp,fp
   1d1f8:	dfc00117 	ldw	ra,4(sp)
   1d1fc:	df000017 	ldw	fp,0(sp)
   1d200:	dec00204 	addi	sp,sp,8
   1d204:	f800283a 	ret

0001d208 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1d208:	defffd04 	addi	sp,sp,-12
   1d20c:	df000215 	stw	fp,8(sp)
   1d210:	df000204 	addi	fp,sp,8
   1d214:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1d218:	e0bfff17 	ldw	r2,-4(fp)
   1d21c:	10800a17 	ldw	r2,40(r2)
   1d220:	10800104 	addi	r2,r2,4
   1d224:	10800037 	ldwio	r2,0(r2)
   1d228:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   1d22c:	e0bffe17 	ldw	r2,-8(fp)
   1d230:	10800054 	ori	r2,r2,1
   1d234:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1d238:	e0bfff17 	ldw	r2,-4(fp)
   1d23c:	10800a17 	ldw	r2,40(r2)
   1d240:	10800104 	addi	r2,r2,4
   1d244:	1007883a 	mov	r3,r2
   1d248:	e0bffe17 	ldw	r2,-8(fp)
   1d24c:	18800035 	stwio	r2,0(r3)
}
   1d250:	0001883a 	nop
   1d254:	e037883a 	mov	sp,fp
   1d258:	df000017 	ldw	fp,0(sp)
   1d25c:	dec00104 	addi	sp,sp,4
   1d260:	f800283a 	ret

0001d264 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1d264:	defffd04 	addi	sp,sp,-12
   1d268:	df000215 	stw	fp,8(sp)
   1d26c:	df000204 	addi	fp,sp,8
   1d270:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1d274:	e0bfff17 	ldw	r2,-4(fp)
   1d278:	10800a17 	ldw	r2,40(r2)
   1d27c:	10800104 	addi	r2,r2,4
   1d280:	10800037 	ldwio	r2,0(r2)
   1d284:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   1d288:	e0fffe17 	ldw	r3,-8(fp)
   1d28c:	00bfff84 	movi	r2,-2
   1d290:	1884703a 	and	r2,r3,r2
   1d294:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1d298:	e0bfff17 	ldw	r2,-4(fp)
   1d29c:	10800a17 	ldw	r2,40(r2)
   1d2a0:	10800104 	addi	r2,r2,4
   1d2a4:	1007883a 	mov	r3,r2
   1d2a8:	e0bffe17 	ldw	r2,-8(fp)
   1d2ac:	18800035 	stwio	r2,0(r3)
}
   1d2b0:	0001883a 	nop
   1d2b4:	e037883a 	mov	sp,fp
   1d2b8:	df000017 	ldw	fp,0(sp)
   1d2bc:	dec00104 	addi	sp,sp,4
   1d2c0:	f800283a 	ret

0001d2c4 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   1d2c4:	defffd04 	addi	sp,sp,-12
   1d2c8:	df000215 	stw	fp,8(sp)
   1d2cc:	df000204 	addi	fp,sp,8
   1d2d0:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1d2d4:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   1d2d8:	e0bfff17 	ldw	r2,-4(fp)
   1d2dc:	10800a17 	ldw	r2,40(r2)
   1d2e0:	10800084 	addi	r2,r2,2
   1d2e4:	1080002b 	ldhuio	r2,0(r2)
   1d2e8:	10bfffcc 	andi	r2,r2,65535
   1d2ec:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   1d2f0:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1d2f4:	e037883a 	mov	sp,fp
   1d2f8:	df000017 	ldw	fp,0(sp)
   1d2fc:	dec00104 	addi	sp,sp,4
   1d300:	f800283a 	ret

0001d304 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   1d304:	defffd04 	addi	sp,sp,-12
   1d308:	df000215 	stw	fp,8(sp)
   1d30c:	df000204 	addi	fp,sp,8
   1d310:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1d314:	e0bfff17 	ldw	r2,-4(fp)
   1d318:	10800a17 	ldw	r2,40(r2)
   1d31c:	10800104 	addi	r2,r2,4
   1d320:	10800037 	ldwio	r2,0(r2)
   1d324:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   1d328:	e0bffe17 	ldw	r2,-8(fp)
   1d32c:	1004d43a 	srli	r2,r2,16
}
   1d330:	e037883a 	mov	sp,fp
   1d334:	df000017 	ldw	fp,0(sp)
   1d338:	dec00104 	addi	sp,sp,4
   1d33c:	f800283a 	ret

0001d340 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   1d340:	defffd04 	addi	sp,sp,-12
   1d344:	df000215 	stw	fp,8(sp)
   1d348:	df000204 	addi	fp,sp,8
   1d34c:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   1d350:	e0bfff17 	ldw	r2,-4(fp)
   1d354:	1080800c 	andi	r2,r2,512
   1d358:	1004d27a 	srli	r2,r2,9
   1d35c:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1d360:	e0bffe17 	ldw	r2,-8(fp)
   1d364:	10000226 	beq	r2,zero,1d370 <alt_up_rs232_check_parity+0x30>
   1d368:	00bfffc4 	movi	r2,-1
   1d36c:	00000106 	br	1d374 <alt_up_rs232_check_parity+0x34>
   1d370:	0005883a 	mov	r2,zero
}
   1d374:	e037883a 	mov	sp,fp
   1d378:	df000017 	ldw	fp,0(sp)
   1d37c:	dec00104 	addi	sp,sp,4
   1d380:	f800283a 	ret

0001d384 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   1d384:	defffd04 	addi	sp,sp,-12
   1d388:	df000215 	stw	fp,8(sp)
   1d38c:	df000204 	addi	fp,sp,8
   1d390:	e13ffe15 	stw	r4,-8(fp)
   1d394:	2805883a 	mov	r2,r5
   1d398:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   1d39c:	e0bffe17 	ldw	r2,-8(fp)
   1d3a0:	10800a17 	ldw	r2,40(r2)
   1d3a4:	1007883a 	mov	r3,r2
   1d3a8:	e0bfff03 	ldbu	r2,-4(fp)
   1d3ac:	18800035 	stwio	r2,0(r3)
	return 0;
   1d3b0:	0005883a 	mov	r2,zero
}
   1d3b4:	e037883a 	mov	sp,fp
   1d3b8:	df000017 	ldw	fp,0(sp)
   1d3bc:	dec00104 	addi	sp,sp,4
   1d3c0:	f800283a 	ret

0001d3c4 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   1d3c4:	defffa04 	addi	sp,sp,-24
   1d3c8:	dfc00515 	stw	ra,20(sp)
   1d3cc:	df000415 	stw	fp,16(sp)
   1d3d0:	df000404 	addi	fp,sp,16
   1d3d4:	e13ffd15 	stw	r4,-12(fp)
   1d3d8:	e17ffe15 	stw	r5,-8(fp)
   1d3dc:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   1d3e0:	e0bffd17 	ldw	r2,-12(fp)
   1d3e4:	10800a17 	ldw	r2,40(r2)
   1d3e8:	10800037 	ldwio	r2,0(r2)
   1d3ec:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   1d3f0:	e0bffc17 	ldw	r2,-16(fp)
   1d3f4:	1007883a 	mov	r3,r2
   1d3f8:	e0bffe17 	ldw	r2,-8(fp)
   1d3fc:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   1d400:	e13ffc17 	ldw	r4,-16(fp)
   1d404:	001d3400 	call	1d340 <alt_up_rs232_check_parity>
   1d408:	1007883a 	mov	r3,r2
   1d40c:	e0bfff17 	ldw	r2,-4(fp)
   1d410:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   1d414:	e0bffc17 	ldw	r2,-16(fp)
   1d418:	10a0000c 	andi	r2,r2,32768
   1d41c:	1004d3fa 	srli	r2,r2,15
   1d420:	10bfffc4 	addi	r2,r2,-1
}
   1d424:	e037883a 	mov	sp,fp
   1d428:	dfc00117 	ldw	ra,4(sp)
   1d42c:	df000017 	ldw	fp,0(sp)
   1d430:	dec00204 	addi	sp,sp,8
   1d434:	f800283a 	ret

0001d438 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   1d438:	defff804 	addi	sp,sp,-32
   1d43c:	dfc00715 	stw	ra,28(sp)
   1d440:	df000615 	stw	fp,24(sp)
   1d444:	df000604 	addi	fp,sp,24
   1d448:	e13ffd15 	stw	r4,-12(fp)
   1d44c:	e17ffe15 	stw	r5,-8(fp)
   1d450:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1d454:	e0bffd17 	ldw	r2,-12(fp)
   1d458:	10800017 	ldw	r2,0(r2)
   1d45c:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1d460:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1d464:	00000c06 	br	1d498 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   1d468:	e0bffe17 	ldw	r2,-8(fp)
   1d46c:	10c00044 	addi	r3,r2,1
   1d470:	e0fffe15 	stw	r3,-8(fp)
   1d474:	e0fffc04 	addi	r3,fp,-16
   1d478:	180d883a 	mov	r6,r3
   1d47c:	100b883a 	mov	r5,r2
   1d480:	e13ffb17 	ldw	r4,-20(fp)
   1d484:	001d3c40 	call	1d3c4 <alt_up_rs232_read_data>
   1d488:	1000081e 	bne	r2,zero,1d4ac <alt_up_rs232_read_fd+0x74>
			count++;
   1d48c:	e0bffa17 	ldw	r2,-24(fp)
   1d490:	10800044 	addi	r2,r2,1
   1d494:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1d498:	e0bfff17 	ldw	r2,-4(fp)
   1d49c:	10ffffc4 	addi	r3,r2,-1
   1d4a0:	e0ffff15 	stw	r3,-4(fp)
   1d4a4:	103ff01e 	bne	r2,zero,1d468 <alt_up_rs232_read_fd+0x30>
   1d4a8:	00000106 	br	1d4b0 <alt_up_rs232_read_fd+0x78>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   1d4ac:	0001883a 	nop
	}
	return count;
   1d4b0:	e0bffa17 	ldw	r2,-24(fp)
}
   1d4b4:	e037883a 	mov	sp,fp
   1d4b8:	dfc00117 	ldw	ra,4(sp)
   1d4bc:	df000017 	ldw	fp,0(sp)
   1d4c0:	dec00204 	addi	sp,sp,8
   1d4c4:	f800283a 	ret

0001d4c8 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1d4c8:	defff904 	addi	sp,sp,-28
   1d4cc:	dfc00615 	stw	ra,24(sp)
   1d4d0:	df000515 	stw	fp,20(sp)
   1d4d4:	df000504 	addi	fp,sp,20
   1d4d8:	e13ffd15 	stw	r4,-12(fp)
   1d4dc:	e17ffe15 	stw	r5,-8(fp)
   1d4e0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1d4e4:	e0bffd17 	ldw	r2,-12(fp)
   1d4e8:	10800017 	ldw	r2,0(r2)
   1d4ec:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1d4f0:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1d4f4:	00000d06 	br	1d52c <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   1d4f8:	e0bffe17 	ldw	r2,-8(fp)
   1d4fc:	10800003 	ldbu	r2,0(r2)
   1d500:	10803fcc 	andi	r2,r2,255
   1d504:	100b883a 	mov	r5,r2
   1d508:	e13ffc17 	ldw	r4,-16(fp)
   1d50c:	001d3840 	call	1d384 <alt_up_rs232_write_data>
   1d510:	10000b1e 	bne	r2,zero,1d540 <alt_up_rs232_write_fd+0x78>
		{
			count++;
   1d514:	e0bffb17 	ldw	r2,-20(fp)
   1d518:	10800044 	addi	r2,r2,1
   1d51c:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   1d520:	e0bffe17 	ldw	r2,-8(fp)
   1d524:	10800044 	addi	r2,r2,1
   1d528:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   1d52c:	e0bfff17 	ldw	r2,-4(fp)
   1d530:	10ffffc4 	addi	r3,r2,-1
   1d534:	e0ffff15 	stw	r3,-4(fp)
   1d538:	103fef1e 	bne	r2,zero,1d4f8 <alt_up_rs232_write_fd+0x30>
   1d53c:	00000106 	br	1d544 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
			ptr++;
		}
		else
			break;
   1d540:	0001883a 	nop
	}
	return count;
   1d544:	e0bffb17 	ldw	r2,-20(fp)
}
   1d548:	e037883a 	mov	sp,fp
   1d54c:	dfc00117 	ldw	ra,4(sp)
   1d550:	df000017 	ldw	fp,0(sp)
   1d554:	dec00204 	addi	sp,sp,8
   1d558:	f800283a 	ret

0001d55c <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   1d55c:	defffc04 	addi	sp,sp,-16
   1d560:	dfc00315 	stw	ra,12(sp)
   1d564:	df000215 	stw	fp,8(sp)
   1d568:	df000204 	addi	fp,sp,8
   1d56c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   1d570:	d1600904 	addi	r5,gp,-32732
   1d574:	e13fff17 	ldw	r4,-4(fp)
   1d578:	001d8840 	call	1d884 <alt_find_dev>
   1d57c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1d580:	e0bffe17 	ldw	r2,-8(fp)
}
   1d584:	e037883a 	mov	sp,fp
   1d588:	dfc00117 	ldw	ra,4(sp)
   1d58c:	df000017 	ldw	fp,0(sp)
   1d590:	dec00204 	addi	sp,sp,8
   1d594:	f800283a 	ret

0001d598 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1d598:	defff504 	addi	sp,sp,-44
   1d59c:	df000a15 	stw	fp,40(sp)
   1d5a0:	df000a04 	addi	fp,sp,40
   1d5a4:	e13ffc15 	stw	r4,-16(fp)
   1d5a8:	e17ffd15 	stw	r5,-12(fp)
   1d5ac:	e1bffe15 	stw	r6,-8(fp)
   1d5b0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1d5b4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1d5b8:	d0a82e17 	ldw	r2,-24392(gp)
  
  if (alt_ticks_per_second ())
   1d5bc:	10003c26 	beq	r2,zero,1d6b0 <alt_alarm_start+0x118>
  {
    if (alarm)
   1d5c0:	e0bffc17 	ldw	r2,-16(fp)
   1d5c4:	10003826 	beq	r2,zero,1d6a8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   1d5c8:	e0bffc17 	ldw	r2,-16(fp)
   1d5cc:	e0fffe17 	ldw	r3,-8(fp)
   1d5d0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1d5d4:	e0bffc17 	ldw	r2,-16(fp)
   1d5d8:	e0ffff17 	ldw	r3,-4(fp)
   1d5dc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d5e0:	0005303a 	rdctl	r2,status
   1d5e4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d5e8:	e0fff917 	ldw	r3,-28(fp)
   1d5ec:	00bfff84 	movi	r2,-2
   1d5f0:	1884703a 	and	r2,r3,r2
   1d5f4:	1001703a 	wrctl	status,r2
  
  return context;
   1d5f8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   1d5fc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1d600:	d0a82f17 	ldw	r2,-24388(gp)
      
      current_nticks = alt_nticks();
   1d604:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1d608:	e0fffd17 	ldw	r3,-12(fp)
   1d60c:	e0bff617 	ldw	r2,-40(fp)
   1d610:	1885883a 	add	r2,r3,r2
   1d614:	10c00044 	addi	r3,r2,1
   1d618:	e0bffc17 	ldw	r2,-16(fp)
   1d61c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1d620:	e0bffc17 	ldw	r2,-16(fp)
   1d624:	10c00217 	ldw	r3,8(r2)
   1d628:	e0bff617 	ldw	r2,-40(fp)
   1d62c:	1880042e 	bgeu	r3,r2,1d640 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   1d630:	e0bffc17 	ldw	r2,-16(fp)
   1d634:	00c00044 	movi	r3,1
   1d638:	10c00405 	stb	r3,16(r2)
   1d63c:	00000206 	br	1d648 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   1d640:	e0bffc17 	ldw	r2,-16(fp)
   1d644:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1d648:	e0bffc17 	ldw	r2,-16(fp)
   1d64c:	d0e02e04 	addi	r3,gp,-32584
   1d650:	e0fffa15 	stw	r3,-24(fp)
   1d654:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1d658:	e0bffb17 	ldw	r2,-20(fp)
   1d65c:	e0fffa17 	ldw	r3,-24(fp)
   1d660:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1d664:	e0bffa17 	ldw	r2,-24(fp)
   1d668:	10c00017 	ldw	r3,0(r2)
   1d66c:	e0bffb17 	ldw	r2,-20(fp)
   1d670:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1d674:	e0bffa17 	ldw	r2,-24(fp)
   1d678:	10800017 	ldw	r2,0(r2)
   1d67c:	e0fffb17 	ldw	r3,-20(fp)
   1d680:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1d684:	e0bffa17 	ldw	r2,-24(fp)
   1d688:	e0fffb17 	ldw	r3,-20(fp)
   1d68c:	10c00015 	stw	r3,0(r2)
   1d690:	e0bff817 	ldw	r2,-32(fp)
   1d694:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d698:	e0bff717 	ldw	r2,-36(fp)
   1d69c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1d6a0:	0005883a 	mov	r2,zero
   1d6a4:	00000306 	br	1d6b4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   1d6a8:	00bffa84 	movi	r2,-22
   1d6ac:	00000106 	br	1d6b4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   1d6b0:	00bfde84 	movi	r2,-134
  }
}
   1d6b4:	e037883a 	mov	sp,fp
   1d6b8:	df000017 	ldw	fp,0(sp)
   1d6bc:	dec00104 	addi	sp,sp,4
   1d6c0:	f800283a 	ret

0001d6c4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1d6c4:	deffff04 	addi	sp,sp,-4
   1d6c8:	df000015 	stw	fp,0(sp)
   1d6cc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1d6d0:	0001883a 	nop
   1d6d4:	e037883a 	mov	sp,fp
   1d6d8:	df000017 	ldw	fp,0(sp)
   1d6dc:	dec00104 	addi	sp,sp,4
   1d6e0:	f800283a 	ret

0001d6e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1d6e4:	defffe04 	addi	sp,sp,-8
   1d6e8:	dfc00115 	stw	ra,4(sp)
   1d6ec:	df000015 	stw	fp,0(sp)
   1d6f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1d6f4:	d0a00c17 	ldw	r2,-32720(gp)
   1d6f8:	10000326 	beq	r2,zero,1d708 <alt_get_errno+0x24>
   1d6fc:	d0a00c17 	ldw	r2,-32720(gp)
   1d700:	103ee83a 	callr	r2
   1d704:	00000106 	br	1d70c <alt_get_errno+0x28>
   1d708:	d0a81004 	addi	r2,gp,-24512
}
   1d70c:	e037883a 	mov	sp,fp
   1d710:	dfc00117 	ldw	ra,4(sp)
   1d714:	df000017 	ldw	fp,0(sp)
   1d718:	dec00204 	addi	sp,sp,8
   1d71c:	f800283a 	ret

0001d720 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1d720:	defffa04 	addi	sp,sp,-24
   1d724:	dfc00515 	stw	ra,20(sp)
   1d728:	df000415 	stw	fp,16(sp)
   1d72c:	df000404 	addi	fp,sp,16
   1d730:	e13ffe15 	stw	r4,-8(fp)
   1d734:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1d738:	e0bffe17 	ldw	r2,-8(fp)
   1d73c:	10000326 	beq	r2,zero,1d74c <alt_dev_llist_insert+0x2c>
   1d740:	e0bffe17 	ldw	r2,-8(fp)
   1d744:	10800217 	ldw	r2,8(r2)
   1d748:	1000061e 	bne	r2,zero,1d764 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1d74c:	001d6e40 	call	1d6e4 <alt_get_errno>
   1d750:	1007883a 	mov	r3,r2
   1d754:	00800584 	movi	r2,22
   1d758:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1d75c:	00bffa84 	movi	r2,-22
   1d760:	00001306 	br	1d7b0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1d764:	e0bffe17 	ldw	r2,-8(fp)
   1d768:	e0ffff17 	ldw	r3,-4(fp)
   1d76c:	e0fffc15 	stw	r3,-16(fp)
   1d770:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1d774:	e0bffd17 	ldw	r2,-12(fp)
   1d778:	e0fffc17 	ldw	r3,-16(fp)
   1d77c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1d780:	e0bffc17 	ldw	r2,-16(fp)
   1d784:	10c00017 	ldw	r3,0(r2)
   1d788:	e0bffd17 	ldw	r2,-12(fp)
   1d78c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1d790:	e0bffc17 	ldw	r2,-16(fp)
   1d794:	10800017 	ldw	r2,0(r2)
   1d798:	e0fffd17 	ldw	r3,-12(fp)
   1d79c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1d7a0:	e0bffc17 	ldw	r2,-16(fp)
   1d7a4:	e0fffd17 	ldw	r3,-12(fp)
   1d7a8:	10c00015 	stw	r3,0(r2)

  return 0;  
   1d7ac:	0005883a 	mov	r2,zero
}
   1d7b0:	e037883a 	mov	sp,fp
   1d7b4:	dfc00117 	ldw	ra,4(sp)
   1d7b8:	df000017 	ldw	fp,0(sp)
   1d7bc:	dec00204 	addi	sp,sp,8
   1d7c0:	f800283a 	ret

0001d7c4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1d7c4:	defffd04 	addi	sp,sp,-12
   1d7c8:	dfc00215 	stw	ra,8(sp)
   1d7cc:	df000115 	stw	fp,4(sp)
   1d7d0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1d7d4:	008000b4 	movhi	r2,2
   1d7d8:	10ba8704 	addi	r2,r2,-5604
   1d7dc:	e0bfff15 	stw	r2,-4(fp)
   1d7e0:	00000606 	br	1d7fc <_do_ctors+0x38>
        (*ctor) (); 
   1d7e4:	e0bfff17 	ldw	r2,-4(fp)
   1d7e8:	10800017 	ldw	r2,0(r2)
   1d7ec:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1d7f0:	e0bfff17 	ldw	r2,-4(fp)
   1d7f4:	10bfff04 	addi	r2,r2,-4
   1d7f8:	e0bfff15 	stw	r2,-4(fp)
   1d7fc:	e0ffff17 	ldw	r3,-4(fp)
   1d800:	008000b4 	movhi	r2,2
   1d804:	10ba8804 	addi	r2,r2,-5600
   1d808:	18bff62e 	bgeu	r3,r2,1d7e4 <_do_ctors+0x20>
        (*ctor) (); 
}
   1d80c:	0001883a 	nop
   1d810:	e037883a 	mov	sp,fp
   1d814:	dfc00117 	ldw	ra,4(sp)
   1d818:	df000017 	ldw	fp,0(sp)
   1d81c:	dec00204 	addi	sp,sp,8
   1d820:	f800283a 	ret

0001d824 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1d824:	defffd04 	addi	sp,sp,-12
   1d828:	dfc00215 	stw	ra,8(sp)
   1d82c:	df000115 	stw	fp,4(sp)
   1d830:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1d834:	008000b4 	movhi	r2,2
   1d838:	10ba8704 	addi	r2,r2,-5604
   1d83c:	e0bfff15 	stw	r2,-4(fp)
   1d840:	00000606 	br	1d85c <_do_dtors+0x38>
        (*dtor) (); 
   1d844:	e0bfff17 	ldw	r2,-4(fp)
   1d848:	10800017 	ldw	r2,0(r2)
   1d84c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1d850:	e0bfff17 	ldw	r2,-4(fp)
   1d854:	10bfff04 	addi	r2,r2,-4
   1d858:	e0bfff15 	stw	r2,-4(fp)
   1d85c:	e0ffff17 	ldw	r3,-4(fp)
   1d860:	008000b4 	movhi	r2,2
   1d864:	10ba8804 	addi	r2,r2,-5600
   1d868:	18bff62e 	bgeu	r3,r2,1d844 <_do_dtors+0x20>
        (*dtor) (); 
}
   1d86c:	0001883a 	nop
   1d870:	e037883a 	mov	sp,fp
   1d874:	dfc00117 	ldw	ra,4(sp)
   1d878:	df000017 	ldw	fp,0(sp)
   1d87c:	dec00204 	addi	sp,sp,8
   1d880:	f800283a 	ret

0001d884 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1d884:	defffa04 	addi	sp,sp,-24
   1d888:	dfc00515 	stw	ra,20(sp)
   1d88c:	df000415 	stw	fp,16(sp)
   1d890:	df000404 	addi	fp,sp,16
   1d894:	e13ffe15 	stw	r4,-8(fp)
   1d898:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1d89c:	e0bfff17 	ldw	r2,-4(fp)
   1d8a0:	10800017 	ldw	r2,0(r2)
   1d8a4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1d8a8:	e13ffe17 	ldw	r4,-8(fp)
   1d8ac:	000b4580 	call	b458 <strlen>
   1d8b0:	10800044 	addi	r2,r2,1
   1d8b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1d8b8:	00000d06 	br	1d8f0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1d8bc:	e0bffc17 	ldw	r2,-16(fp)
   1d8c0:	10800217 	ldw	r2,8(r2)
   1d8c4:	e0fffd17 	ldw	r3,-12(fp)
   1d8c8:	180d883a 	mov	r6,r3
   1d8cc:	e17ffe17 	ldw	r5,-8(fp)
   1d8d0:	1009883a 	mov	r4,r2
   1d8d4:	001e6d80 	call	1e6d8 <memcmp>
   1d8d8:	1000021e 	bne	r2,zero,1d8e4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1d8dc:	e0bffc17 	ldw	r2,-16(fp)
   1d8e0:	00000706 	br	1d900 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1d8e4:	e0bffc17 	ldw	r2,-16(fp)
   1d8e8:	10800017 	ldw	r2,0(r2)
   1d8ec:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1d8f0:	e0fffc17 	ldw	r3,-16(fp)
   1d8f4:	e0bfff17 	ldw	r2,-4(fp)
   1d8f8:	18bff01e 	bne	r3,r2,1d8bc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1d8fc:	0005883a 	mov	r2,zero
}
   1d900:	e037883a 	mov	sp,fp
   1d904:	dfc00117 	ldw	ra,4(sp)
   1d908:	df000017 	ldw	fp,0(sp)
   1d90c:	dec00204 	addi	sp,sp,8
   1d910:	f800283a 	ret

0001d914 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1d914:	defffe04 	addi	sp,sp,-8
   1d918:	dfc00115 	stw	ra,4(sp)
   1d91c:	df000015 	stw	fp,0(sp)
   1d920:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1d924:	01440004 	movi	r5,4096
   1d928:	0009883a 	mov	r4,zero
   1d92c:	001e5600 	call	1e560 <alt_icache_flush>
#endif
}
   1d930:	0001883a 	nop
   1d934:	e037883a 	mov	sp,fp
   1d938:	dfc00117 	ldw	ra,4(sp)
   1d93c:	df000017 	ldw	fp,0(sp)
   1d940:	dec00204 	addi	sp,sp,8
   1d944:	f800283a 	ret

0001d948 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1d948:	defff904 	addi	sp,sp,-28
   1d94c:	dfc00615 	stw	ra,24(sp)
   1d950:	df000515 	stw	fp,20(sp)
   1d954:	df000504 	addi	fp,sp,20
   1d958:	e13ffc15 	stw	r4,-16(fp)
   1d95c:	e17ffd15 	stw	r5,-12(fp)
   1d960:	e1bffe15 	stw	r6,-8(fp)
   1d964:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1d968:	e1bfff17 	ldw	r6,-4(fp)
   1d96c:	e17ffe17 	ldw	r5,-8(fp)
   1d970:	e13ffd17 	ldw	r4,-12(fp)
   1d974:	001dd080 	call	1dd08 <open>
   1d978:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1d97c:	e0bffb17 	ldw	r2,-20(fp)
   1d980:	10001c16 	blt	r2,zero,1d9f4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   1d984:	008000b4 	movhi	r2,2
   1d988:	10810604 	addi	r2,r2,1048
   1d98c:	e0fffb17 	ldw	r3,-20(fp)
   1d990:	18c00324 	muli	r3,r3,12
   1d994:	10c5883a 	add	r2,r2,r3
   1d998:	10c00017 	ldw	r3,0(r2)
   1d99c:	e0bffc17 	ldw	r2,-16(fp)
   1d9a0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1d9a4:	008000b4 	movhi	r2,2
   1d9a8:	10810604 	addi	r2,r2,1048
   1d9ac:	e0fffb17 	ldw	r3,-20(fp)
   1d9b0:	18c00324 	muli	r3,r3,12
   1d9b4:	10c5883a 	add	r2,r2,r3
   1d9b8:	10800104 	addi	r2,r2,4
   1d9bc:	10c00017 	ldw	r3,0(r2)
   1d9c0:	e0bffc17 	ldw	r2,-16(fp)
   1d9c4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1d9c8:	008000b4 	movhi	r2,2
   1d9cc:	10810604 	addi	r2,r2,1048
   1d9d0:	e0fffb17 	ldw	r3,-20(fp)
   1d9d4:	18c00324 	muli	r3,r3,12
   1d9d8:	10c5883a 	add	r2,r2,r3
   1d9dc:	10800204 	addi	r2,r2,8
   1d9e0:	10c00017 	ldw	r3,0(r2)
   1d9e4:	e0bffc17 	ldw	r2,-16(fp)
   1d9e8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1d9ec:	e13ffb17 	ldw	r4,-20(fp)
   1d9f0:	0012db40 	call	12db4 <alt_release_fd>
  }
} 
   1d9f4:	0001883a 	nop
   1d9f8:	e037883a 	mov	sp,fp
   1d9fc:	dfc00117 	ldw	ra,4(sp)
   1da00:	df000017 	ldw	fp,0(sp)
   1da04:	dec00204 	addi	sp,sp,8
   1da08:	f800283a 	ret

0001da0c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1da0c:	defffb04 	addi	sp,sp,-20
   1da10:	dfc00415 	stw	ra,16(sp)
   1da14:	df000315 	stw	fp,12(sp)
   1da18:	df000304 	addi	fp,sp,12
   1da1c:	e13ffd15 	stw	r4,-12(fp)
   1da20:	e17ffe15 	stw	r5,-8(fp)
   1da24:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1da28:	01c07fc4 	movi	r7,511
   1da2c:	01800044 	movi	r6,1
   1da30:	e17ffd17 	ldw	r5,-12(fp)
   1da34:	010000b4 	movhi	r4,2
   1da38:	21010904 	addi	r4,r4,1060
   1da3c:	001d9480 	call	1d948 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1da40:	01c07fc4 	movi	r7,511
   1da44:	000d883a 	mov	r6,zero
   1da48:	e17ffe17 	ldw	r5,-8(fp)
   1da4c:	010000b4 	movhi	r4,2
   1da50:	21010604 	addi	r4,r4,1048
   1da54:	001d9480 	call	1d948 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1da58:	01c07fc4 	movi	r7,511
   1da5c:	01800044 	movi	r6,1
   1da60:	e17fff17 	ldw	r5,-4(fp)
   1da64:	010000b4 	movhi	r4,2
   1da68:	21010c04 	addi	r4,r4,1072
   1da6c:	001d9480 	call	1d948 <alt_open_fd>
}  
   1da70:	0001883a 	nop
   1da74:	e037883a 	mov	sp,fp
   1da78:	dfc00117 	ldw	ra,4(sp)
   1da7c:	df000017 	ldw	fp,0(sp)
   1da80:	dec00204 	addi	sp,sp,8
   1da84:	f800283a 	ret

0001da88 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   1da88:	defff004 	addi	sp,sp,-64
   1da8c:	df000f15 	stw	fp,60(sp)
   1da90:	df000f04 	addi	fp,sp,60
   1da94:	e13ffd15 	stw	r4,-12(fp)
   1da98:	e17ffe15 	stw	r5,-8(fp)
   1da9c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   1daa0:	00bffa84 	movi	r2,-22
   1daa4:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1daa8:	e0bffd17 	ldw	r2,-12(fp)
   1daac:	10800828 	cmpgeui	r2,r2,32
   1dab0:	1000501e 	bne	r2,zero,1dbf4 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1dab4:	0005303a 	rdctl	r2,status
   1dab8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1dabc:	e0fff617 	ldw	r3,-40(fp)
   1dac0:	00bfff84 	movi	r2,-2
   1dac4:	1884703a 	and	r2,r3,r2
   1dac8:	1001703a 	wrctl	status,r2
  
  return context;
   1dacc:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   1dad0:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   1dad4:	008000f4 	movhi	r2,3
   1dad8:	10930804 	addi	r2,r2,19488
   1dadc:	e0fffd17 	ldw	r3,-12(fp)
   1dae0:	180690fa 	slli	r3,r3,3
   1dae4:	10c5883a 	add	r2,r2,r3
   1dae8:	e0ffff17 	ldw	r3,-4(fp)
   1daec:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   1daf0:	008000f4 	movhi	r2,3
   1daf4:	10930804 	addi	r2,r2,19488
   1daf8:	e0fffd17 	ldw	r3,-12(fp)
   1dafc:	180690fa 	slli	r3,r3,3
   1db00:	10c5883a 	add	r2,r2,r3
   1db04:	10800104 	addi	r2,r2,4
   1db08:	e0fffe17 	ldw	r3,-8(fp)
   1db0c:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   1db10:	e0bfff17 	ldw	r2,-4(fp)
   1db14:	10001926 	beq	r2,zero,1db7c <alt_irq_register+0xf4>
   1db18:	e0bffd17 	ldw	r2,-12(fp)
   1db1c:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1db20:	0005303a 	rdctl	r2,status
   1db24:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1db28:	e0fff717 	ldw	r3,-36(fp)
   1db2c:	00bfff84 	movi	r2,-2
   1db30:	1884703a 	and	r2,r3,r2
   1db34:	1001703a 	wrctl	status,r2
  
  return context;
   1db38:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1db3c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   1db40:	00c00044 	movi	r3,1
   1db44:	e0bff217 	ldw	r2,-56(fp)
   1db48:	1884983a 	sll	r2,r3,r2
   1db4c:	1007883a 	mov	r3,r2
   1db50:	d0a82d17 	ldw	r2,-24396(gp)
   1db54:	1884b03a 	or	r2,r3,r2
   1db58:	d0a82d15 	stw	r2,-24396(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1db5c:	d0a82d17 	ldw	r2,-24396(gp)
   1db60:	100170fa 	wrctl	ienable,r2
   1db64:	e0bff817 	ldw	r2,-32(fp)
   1db68:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1db6c:	e0bff917 	ldw	r2,-28(fp)
   1db70:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1db74:	0005883a 	mov	r2,zero
   1db78:	00001906 	br	1dbe0 <alt_irq_register+0x158>
   1db7c:	e0bffd17 	ldw	r2,-12(fp)
   1db80:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1db84:	0005303a 	rdctl	r2,status
   1db88:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1db8c:	e0fffa17 	ldw	r3,-24(fp)
   1db90:	00bfff84 	movi	r2,-2
   1db94:	1884703a 	and	r2,r3,r2
   1db98:	1001703a 	wrctl	status,r2
  
  return context;
   1db9c:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1dba0:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   1dba4:	00c00044 	movi	r3,1
   1dba8:	e0bff417 	ldw	r2,-48(fp)
   1dbac:	1884983a 	sll	r2,r3,r2
   1dbb0:	0084303a 	nor	r2,zero,r2
   1dbb4:	1007883a 	mov	r3,r2
   1dbb8:	d0a82d17 	ldw	r2,-24396(gp)
   1dbbc:	1884703a 	and	r2,r3,r2
   1dbc0:	d0a82d15 	stw	r2,-24396(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1dbc4:	d0a82d17 	ldw	r2,-24396(gp)
   1dbc8:	100170fa 	wrctl	ienable,r2
   1dbcc:	e0bffb17 	ldw	r2,-20(fp)
   1dbd0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1dbd4:	e0bffc17 	ldw	r2,-16(fp)
   1dbd8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1dbdc:	0005883a 	mov	r2,zero
   1dbe0:	e0bff115 	stw	r2,-60(fp)
   1dbe4:	e0bff317 	ldw	r2,-52(fp)
   1dbe8:	e0bff515 	stw	r2,-44(fp)
   1dbec:	e0bff517 	ldw	r2,-44(fp)
   1dbf0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   1dbf4:	e0bff117 	ldw	r2,-60(fp)
}
   1dbf8:	e037883a 	mov	sp,fp
   1dbfc:	df000017 	ldw	fp,0(sp)
   1dc00:	dec00104 	addi	sp,sp,4
   1dc04:	f800283a 	ret

0001dc08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1dc08:	defffe04 	addi	sp,sp,-8
   1dc0c:	dfc00115 	stw	ra,4(sp)
   1dc10:	df000015 	stw	fp,0(sp)
   1dc14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1dc18:	d0a00c17 	ldw	r2,-32720(gp)
   1dc1c:	10000326 	beq	r2,zero,1dc2c <alt_get_errno+0x24>
   1dc20:	d0a00c17 	ldw	r2,-32720(gp)
   1dc24:	103ee83a 	callr	r2
   1dc28:	00000106 	br	1dc30 <alt_get_errno+0x28>
   1dc2c:	d0a81004 	addi	r2,gp,-24512
}
   1dc30:	e037883a 	mov	sp,fp
   1dc34:	dfc00117 	ldw	ra,4(sp)
   1dc38:	df000017 	ldw	fp,0(sp)
   1dc3c:	dec00204 	addi	sp,sp,8
   1dc40:	f800283a 	ret

0001dc44 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1dc44:	defffd04 	addi	sp,sp,-12
   1dc48:	df000215 	stw	fp,8(sp)
   1dc4c:	df000204 	addi	fp,sp,8
   1dc50:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1dc54:	e0bfff17 	ldw	r2,-4(fp)
   1dc58:	10800217 	ldw	r2,8(r2)
   1dc5c:	10d00034 	orhi	r3,r2,16384
   1dc60:	e0bfff17 	ldw	r2,-4(fp)
   1dc64:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1dc68:	e03ffe15 	stw	zero,-8(fp)
   1dc6c:	00001d06 	br	1dce4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1dc70:	008000b4 	movhi	r2,2
   1dc74:	10810604 	addi	r2,r2,1048
   1dc78:	e0fffe17 	ldw	r3,-8(fp)
   1dc7c:	18c00324 	muli	r3,r3,12
   1dc80:	10c5883a 	add	r2,r2,r3
   1dc84:	10c00017 	ldw	r3,0(r2)
   1dc88:	e0bfff17 	ldw	r2,-4(fp)
   1dc8c:	10800017 	ldw	r2,0(r2)
   1dc90:	1880111e 	bne	r3,r2,1dcd8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1dc94:	008000b4 	movhi	r2,2
   1dc98:	10810604 	addi	r2,r2,1048
   1dc9c:	e0fffe17 	ldw	r3,-8(fp)
   1dca0:	18c00324 	muli	r3,r3,12
   1dca4:	10c5883a 	add	r2,r2,r3
   1dca8:	10800204 	addi	r2,r2,8
   1dcac:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1dcb0:	1000090e 	bge	r2,zero,1dcd8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1dcb4:	e0bffe17 	ldw	r2,-8(fp)
   1dcb8:	10c00324 	muli	r3,r2,12
   1dcbc:	008000b4 	movhi	r2,2
   1dcc0:	10810604 	addi	r2,r2,1048
   1dcc4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1dcc8:	e0bfff17 	ldw	r2,-4(fp)
   1dccc:	18800226 	beq	r3,r2,1dcd8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1dcd0:	00bffcc4 	movi	r2,-13
   1dcd4:	00000806 	br	1dcf8 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1dcd8:	e0bffe17 	ldw	r2,-8(fp)
   1dcdc:	10800044 	addi	r2,r2,1
   1dce0:	e0bffe15 	stw	r2,-8(fp)
   1dce4:	d0a00b17 	ldw	r2,-32724(gp)
   1dce8:	1007883a 	mov	r3,r2
   1dcec:	e0bffe17 	ldw	r2,-8(fp)
   1dcf0:	18bfdf2e 	bgeu	r3,r2,1dc70 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1dcf4:	0005883a 	mov	r2,zero
}
   1dcf8:	e037883a 	mov	sp,fp
   1dcfc:	df000017 	ldw	fp,0(sp)
   1dd00:	dec00104 	addi	sp,sp,4
   1dd04:	f800283a 	ret

0001dd08 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1dd08:	defff604 	addi	sp,sp,-40
   1dd0c:	dfc00915 	stw	ra,36(sp)
   1dd10:	df000815 	stw	fp,32(sp)
   1dd14:	df000804 	addi	fp,sp,32
   1dd18:	e13ffd15 	stw	r4,-12(fp)
   1dd1c:	e17ffe15 	stw	r5,-8(fp)
   1dd20:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1dd24:	00bfffc4 	movi	r2,-1
   1dd28:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1dd2c:	00bffb44 	movi	r2,-19
   1dd30:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1dd34:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1dd38:	d1600904 	addi	r5,gp,-32732
   1dd3c:	e13ffd17 	ldw	r4,-12(fp)
   1dd40:	001d8840 	call	1d884 <alt_find_dev>
   1dd44:	e0bff815 	stw	r2,-32(fp)
   1dd48:	e0bff817 	ldw	r2,-32(fp)
   1dd4c:	1000051e 	bne	r2,zero,1dd64 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1dd50:	e13ffd17 	ldw	r4,-12(fp)
   1dd54:	001e37c0 	call	1e37c <alt_find_file>
   1dd58:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1dd5c:	00800044 	movi	r2,1
   1dd60:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1dd64:	e0bff817 	ldw	r2,-32(fp)
   1dd68:	10002926 	beq	r2,zero,1de10 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1dd6c:	e13ff817 	ldw	r4,-32(fp)
   1dd70:	001e4840 	call	1e484 <alt_get_fd>
   1dd74:	e0bff915 	stw	r2,-28(fp)
   1dd78:	e0bff917 	ldw	r2,-28(fp)
   1dd7c:	1000030e 	bge	r2,zero,1dd8c <open+0x84>
    {
      status = index;
   1dd80:	e0bff917 	ldw	r2,-28(fp)
   1dd84:	e0bffa15 	stw	r2,-24(fp)
   1dd88:	00002306 	br	1de18 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   1dd8c:	e0bff917 	ldw	r2,-28(fp)
   1dd90:	10c00324 	muli	r3,r2,12
   1dd94:	008000b4 	movhi	r2,2
   1dd98:	10810604 	addi	r2,r2,1048
   1dd9c:	1885883a 	add	r2,r3,r2
   1dda0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1dda4:	e0fffe17 	ldw	r3,-8(fp)
   1dda8:	00900034 	movhi	r2,16384
   1ddac:	10bfffc4 	addi	r2,r2,-1
   1ddb0:	1886703a 	and	r3,r3,r2
   1ddb4:	e0bffc17 	ldw	r2,-16(fp)
   1ddb8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1ddbc:	e0bffb17 	ldw	r2,-20(fp)
   1ddc0:	1000051e 	bne	r2,zero,1ddd8 <open+0xd0>
   1ddc4:	e13ffc17 	ldw	r4,-16(fp)
   1ddc8:	001dc440 	call	1dc44 <alt_file_locked>
   1ddcc:	e0bffa15 	stw	r2,-24(fp)
   1ddd0:	e0bffa17 	ldw	r2,-24(fp)
   1ddd4:	10001016 	blt	r2,zero,1de18 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1ddd8:	e0bff817 	ldw	r2,-32(fp)
   1dddc:	10800317 	ldw	r2,12(r2)
   1dde0:	10000826 	beq	r2,zero,1de04 <open+0xfc>
   1dde4:	e0bff817 	ldw	r2,-32(fp)
   1dde8:	10800317 	ldw	r2,12(r2)
   1ddec:	e1ffff17 	ldw	r7,-4(fp)
   1ddf0:	e1bffe17 	ldw	r6,-8(fp)
   1ddf4:	e17ffd17 	ldw	r5,-12(fp)
   1ddf8:	e13ffc17 	ldw	r4,-16(fp)
   1ddfc:	103ee83a 	callr	r2
   1de00:	00000106 	br	1de08 <open+0x100>
   1de04:	0005883a 	mov	r2,zero
   1de08:	e0bffa15 	stw	r2,-24(fp)
   1de0c:	00000206 	br	1de18 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1de10:	00bffb44 	movi	r2,-19
   1de14:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1de18:	e0bffa17 	ldw	r2,-24(fp)
   1de1c:	1000090e 	bge	r2,zero,1de44 <open+0x13c>
  {
    alt_release_fd (index);  
   1de20:	e13ff917 	ldw	r4,-28(fp)
   1de24:	0012db40 	call	12db4 <alt_release_fd>
    ALT_ERRNO = -status;
   1de28:	001dc080 	call	1dc08 <alt_get_errno>
   1de2c:	1007883a 	mov	r3,r2
   1de30:	e0bffa17 	ldw	r2,-24(fp)
   1de34:	0085c83a 	sub	r2,zero,r2
   1de38:	18800015 	stw	r2,0(r3)
    return -1;
   1de3c:	00bfffc4 	movi	r2,-1
   1de40:	00000106 	br	1de48 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   1de44:	e0bff917 	ldw	r2,-28(fp)
}
   1de48:	e037883a 	mov	sp,fp
   1de4c:	dfc00117 	ldw	ra,4(sp)
   1de50:	df000017 	ldw	fp,0(sp)
   1de54:	dec00204 	addi	sp,sp,8
   1de58:	f800283a 	ret

0001de5c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1de5c:	defffa04 	addi	sp,sp,-24
   1de60:	df000515 	stw	fp,20(sp)
   1de64:	df000504 	addi	fp,sp,20
   1de68:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1de6c:	0005303a 	rdctl	r2,status
   1de70:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1de74:	e0fffc17 	ldw	r3,-16(fp)
   1de78:	00bfff84 	movi	r2,-2
   1de7c:	1884703a 	and	r2,r3,r2
   1de80:	1001703a 	wrctl	status,r2
  
  return context;
   1de84:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1de88:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1de8c:	e0bfff17 	ldw	r2,-4(fp)
   1de90:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1de94:	e0bffd17 	ldw	r2,-12(fp)
   1de98:	10800017 	ldw	r2,0(r2)
   1de9c:	e0fffd17 	ldw	r3,-12(fp)
   1dea0:	18c00117 	ldw	r3,4(r3)
   1dea4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1dea8:	e0bffd17 	ldw	r2,-12(fp)
   1deac:	10800117 	ldw	r2,4(r2)
   1deb0:	e0fffd17 	ldw	r3,-12(fp)
   1deb4:	18c00017 	ldw	r3,0(r3)
   1deb8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1debc:	e0bffd17 	ldw	r2,-12(fp)
   1dec0:	e0fffd17 	ldw	r3,-12(fp)
   1dec4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1dec8:	e0bffd17 	ldw	r2,-12(fp)
   1decc:	e0fffd17 	ldw	r3,-12(fp)
   1ded0:	10c00015 	stw	r3,0(r2)
   1ded4:	e0bffb17 	ldw	r2,-20(fp)
   1ded8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1dedc:	e0bffe17 	ldw	r2,-8(fp)
   1dee0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1dee4:	0001883a 	nop
   1dee8:	e037883a 	mov	sp,fp
   1deec:	df000017 	ldw	fp,0(sp)
   1def0:	dec00104 	addi	sp,sp,4
   1def4:	f800283a 	ret

0001def8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1def8:	defffb04 	addi	sp,sp,-20
   1defc:	dfc00415 	stw	ra,16(sp)
   1df00:	df000315 	stw	fp,12(sp)
   1df04:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1df08:	d0a02e17 	ldw	r2,-32584(gp)
   1df0c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1df10:	d0a82f17 	ldw	r2,-24388(gp)
   1df14:	10800044 	addi	r2,r2,1
   1df18:	d0a82f15 	stw	r2,-24388(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1df1c:	00002e06 	br	1dfd8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1df20:	e0bffd17 	ldw	r2,-12(fp)
   1df24:	10800017 	ldw	r2,0(r2)
   1df28:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1df2c:	e0bffd17 	ldw	r2,-12(fp)
   1df30:	10800403 	ldbu	r2,16(r2)
   1df34:	10803fcc 	andi	r2,r2,255
   1df38:	10000426 	beq	r2,zero,1df4c <alt_tick+0x54>
   1df3c:	d0a82f17 	ldw	r2,-24388(gp)
   1df40:	1000021e 	bne	r2,zero,1df4c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1df44:	e0bffd17 	ldw	r2,-12(fp)
   1df48:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1df4c:	e0bffd17 	ldw	r2,-12(fp)
   1df50:	10800217 	ldw	r2,8(r2)
   1df54:	d0e82f17 	ldw	r3,-24388(gp)
   1df58:	18801d36 	bltu	r3,r2,1dfd0 <alt_tick+0xd8>
   1df5c:	e0bffd17 	ldw	r2,-12(fp)
   1df60:	10800403 	ldbu	r2,16(r2)
   1df64:	10803fcc 	andi	r2,r2,255
   1df68:	1000191e 	bne	r2,zero,1dfd0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1df6c:	e0bffd17 	ldw	r2,-12(fp)
   1df70:	10800317 	ldw	r2,12(r2)
   1df74:	e0fffd17 	ldw	r3,-12(fp)
   1df78:	18c00517 	ldw	r3,20(r3)
   1df7c:	1809883a 	mov	r4,r3
   1df80:	103ee83a 	callr	r2
   1df84:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1df88:	e0bfff17 	ldw	r2,-4(fp)
   1df8c:	1000031e 	bne	r2,zero,1df9c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1df90:	e13ffd17 	ldw	r4,-12(fp)
   1df94:	001de5c0 	call	1de5c <alt_alarm_stop>
   1df98:	00000d06 	br	1dfd0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1df9c:	e0bffd17 	ldw	r2,-12(fp)
   1dfa0:	10c00217 	ldw	r3,8(r2)
   1dfa4:	e0bfff17 	ldw	r2,-4(fp)
   1dfa8:	1887883a 	add	r3,r3,r2
   1dfac:	e0bffd17 	ldw	r2,-12(fp)
   1dfb0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1dfb4:	e0bffd17 	ldw	r2,-12(fp)
   1dfb8:	10c00217 	ldw	r3,8(r2)
   1dfbc:	d0a82f17 	ldw	r2,-24388(gp)
   1dfc0:	1880032e 	bgeu	r3,r2,1dfd0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1dfc4:	e0bffd17 	ldw	r2,-12(fp)
   1dfc8:	00c00044 	movi	r3,1
   1dfcc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1dfd0:	e0bffe17 	ldw	r2,-8(fp)
   1dfd4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1dfd8:	e0fffd17 	ldw	r3,-12(fp)
   1dfdc:	d0a02e04 	addi	r2,gp,-32584
   1dfe0:	18bfcf1e 	bne	r3,r2,1df20 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1dfe4:	0013fa00 	call	13fa0 <OSTimeTick>
}
   1dfe8:	0001883a 	nop
   1dfec:	e037883a 	mov	sp,fp
   1dff0:	dfc00117 	ldw	ra,4(sp)
   1dff4:	df000017 	ldw	fp,0(sp)
   1dff8:	dec00204 	addi	sp,sp,8
   1dffc:	f800283a 	ret

0001e000 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1e000:	deffff04 	addi	sp,sp,-4
   1e004:	df000015 	stw	fp,0(sp)
   1e008:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1e00c:	000170fa 	wrctl	ienable,zero
}
   1e010:	0001883a 	nop
   1e014:	e037883a 	mov	sp,fp
   1e018:	df000017 	ldw	fp,0(sp)
   1e01c:	dec00104 	addi	sp,sp,4
   1e020:	f800283a 	ret

0001e024 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   1e024:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   1e028:	d0e00217 	ldw	r3,-32760(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   1e02c:	d1282817 	ldw	r4,-24416(gp)

      stw ra,  0(sp)
   1e030:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   1e034:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   1e038:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   1e03c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   1e040:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   1e044:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   1e048:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   1e04c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   1e050:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   1e054:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   1e058:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   1e05c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1e060:	001e2980 	call	1e298 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   1e064:	d1282317 	ldw	r4,-24436(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   1e068:	d1681b07 	ldb	r5,-24468(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   1e06c:	d1282815 	stw	r4,-24416(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   1e070:	d1681b45 	stb	r5,-24467(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   1e074:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   1e078:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   1e07c:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   1e080:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   1e084:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   1e088:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   1e08c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   1e090:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   1e094:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   1e098:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   1e09c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   1e0a0:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   1e0a4:	d0e00215 	stw	r3,-32760(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   1e0a8:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   1e0ac:	f800283a 	ret

0001e0b0 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   1e0b0:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   1e0b4:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   1e0b8:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   1e0bc:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1e0c0:	001e2980 	call	1e298 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   1e0c4:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   1e0c8:	d4a81945 	stb	r18,-24475(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   1e0cc:	003fe506 	br	1e064 <OSCtxSw+0x40>

0001e0d0 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   1e0d0:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   1e0d4:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   1e0d8:	10800054 	ori	r2,r2,1
      wrctl status, r2
   1e0dc:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   1e0e0:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   1e0e4:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   1e0e8:	dec00204 	addi	sp,sp,8

      callr r2
   1e0ec:	103ee83a 	callr	r2

      nop
   1e0f0:	0001883a 	nop

0001e0f4 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   1e0f4:	defff704 	addi	sp,sp,-36
   1e0f8:	dfc00815 	stw	ra,32(sp)
   1e0fc:	df000715 	stw	fp,28(sp)
   1e100:	df000704 	addi	fp,sp,28
   1e104:	e13ffc15 	stw	r4,-16(fp)
   1e108:	e17ffd15 	stw	r5,-12(fp)
   1e10c:	e1bffe15 	stw	r6,-8(fp)
   1e110:	3805883a 	mov	r2,r7
   1e114:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   1e118:	e0fffe17 	ldw	r3,-8(fp)
   1e11c:	00bfff04 	movi	r2,-4
   1e120:	1884703a 	and	r2,r3,r2
   1e124:	10bef704 	addi	r2,r2,-1060
   1e128:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   1e12c:	01810904 	movi	r6,1060
   1e130:	000b883a 	mov	r5,zero
   1e134:	e13ff917 	ldw	r4,-28(fp)
   1e138:	000a0540 	call	a054 <memset>
   1e13c:	e0bff917 	ldw	r2,-28(fp)
   1e140:	10c0bb04 	addi	r3,r2,748
   1e144:	e0bff917 	ldw	r2,-28(fp)
   1e148:	10c00115 	stw	r3,4(r2)
   1e14c:	e0bff917 	ldw	r2,-28(fp)
   1e150:	10c0d504 	addi	r3,r2,852
   1e154:	e0bff917 	ldw	r2,-28(fp)
   1e158:	10c00215 	stw	r3,8(r2)
   1e15c:	e0bff917 	ldw	r2,-28(fp)
   1e160:	10c0ef04 	addi	r3,r2,956
   1e164:	e0bff917 	ldw	r2,-28(fp)
   1e168:	10c00315 	stw	r3,12(r2)
   1e16c:	e0fff917 	ldw	r3,-28(fp)
   1e170:	008000b4 	movhi	r2,2
   1e174:	10bec004 	addi	r2,r2,-1280
   1e178:	18800d15 	stw	r2,52(r3)
   1e17c:	e0bff917 	ldw	r2,-28(fp)
   1e180:	00c00044 	movi	r3,1
   1e184:	10c02915 	stw	r3,164(r2)
   1e188:	10002a15 	stw	zero,168(r2)
   1e18c:	e0bff917 	ldw	r2,-28(fp)
   1e190:	00ccc384 	movi	r3,13070
   1e194:	10c02b0d 	sth	r3,172(r2)
   1e198:	e0bff917 	ldw	r2,-28(fp)
   1e19c:	00eaf344 	movi	r3,-21555
   1e1a0:	10c02b8d 	sth	r3,174(r2)
   1e1a4:	e0bff917 	ldw	r2,-28(fp)
   1e1a8:	00c48d04 	movi	r3,4660
   1e1ac:	10c02c0d 	sth	r3,176(r2)
   1e1b0:	e0bff917 	ldw	r2,-28(fp)
   1e1b4:	00f99b44 	movi	r3,-6547
   1e1b8:	10c02c8d 	sth	r3,178(r2)
   1e1bc:	e0bff917 	ldw	r2,-28(fp)
   1e1c0:	00f7bb04 	movi	r3,-8468
   1e1c4:	10c02d0d 	sth	r3,180(r2)
   1e1c8:	e0bff917 	ldw	r2,-28(fp)
   1e1cc:	00c00144 	movi	r3,5
   1e1d0:	10c02d8d 	sth	r3,182(r2)
   1e1d4:	e0bff917 	ldw	r2,-28(fp)
   1e1d8:	00c002c4 	movi	r3,11
   1e1dc:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   1e1e0:	e0bff917 	ldw	r2,-28(fp)
   1e1e4:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   1e1e8:	e0bffa17 	ldw	r2,-24(fp)
   1e1ec:	10bff304 	addi	r2,r2,-52
   1e1f0:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   1e1f4:	e0bffb17 	ldw	r2,-20(fp)
   1e1f8:	10800c04 	addi	r2,r2,48
   1e1fc:	e0fffc17 	ldw	r3,-16(fp)
   1e200:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   1e204:	e0bffb17 	ldw	r2,-20(fp)
   1e208:	10800b04 	addi	r2,r2,44
   1e20c:	e0fffd17 	ldw	r3,-12(fp)
   1e210:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   1e214:	e0bffb17 	ldw	r2,-20(fp)
   1e218:	10800a04 	addi	r2,r2,40
   1e21c:	e0fff917 	ldw	r3,-28(fp)
   1e220:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   1e224:	008000b4 	movhi	r2,2
   1e228:	10b83404 	addi	r2,r2,-7984
   1e22c:	10c00104 	addi	r3,r2,4
   1e230:	e0bffb17 	ldw	r2,-20(fp)
   1e234:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   1e238:	e0bffb17 	ldw	r2,-20(fp)
}
   1e23c:	e037883a 	mov	sp,fp
   1e240:	dfc00117 	ldw	ra,4(sp)
   1e244:	df000017 	ldw	fp,0(sp)
   1e248:	dec00204 	addi	sp,sp,8
   1e24c:	f800283a 	ret

0001e250 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   1e250:	defffe04 	addi	sp,sp,-8
   1e254:	df000115 	stw	fp,4(sp)
   1e258:	df000104 	addi	fp,sp,4
   1e25c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   1e260:	0001883a 	nop
   1e264:	e037883a 	mov	sp,fp
   1e268:	df000017 	ldw	fp,0(sp)
   1e26c:	dec00104 	addi	sp,sp,4
   1e270:	f800283a 	ret

0001e274 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   1e274:	defffe04 	addi	sp,sp,-8
   1e278:	df000115 	stw	fp,4(sp)
   1e27c:	df000104 	addi	fp,sp,4
   1e280:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   1e284:	0001883a 	nop
   1e288:	e037883a 	mov	sp,fp
   1e28c:	df000017 	ldw	fp,0(sp)
   1e290:	dec00104 	addi	sp,sp,4
   1e294:	f800283a 	ret

0001e298 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   1e298:	deffff04 	addi	sp,sp,-4
   1e29c:	df000015 	stw	fp,0(sp)
   1e2a0:	d839883a 	mov	fp,sp
}
   1e2a4:	0001883a 	nop
   1e2a8:	e037883a 	mov	sp,fp
   1e2ac:	df000017 	ldw	fp,0(sp)
   1e2b0:	dec00104 	addi	sp,sp,4
   1e2b4:	f800283a 	ret

0001e2b8 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   1e2b8:	deffff04 	addi	sp,sp,-4
   1e2bc:	df000015 	stw	fp,0(sp)
   1e2c0:	d839883a 	mov	fp,sp
}
   1e2c4:	0001883a 	nop
   1e2c8:	e037883a 	mov	sp,fp
   1e2cc:	df000017 	ldw	fp,0(sp)
   1e2d0:	dec00104 	addi	sp,sp,4
   1e2d4:	f800283a 	ret

0001e2d8 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   1e2d8:	deffff04 	addi	sp,sp,-4
   1e2dc:	df000015 	stw	fp,0(sp)
   1e2e0:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   1e2e4:	0001883a 	nop
   1e2e8:	e037883a 	mov	sp,fp
   1e2ec:	df000017 	ldw	fp,0(sp)
   1e2f0:	dec00104 	addi	sp,sp,4
   1e2f4:	f800283a 	ret

0001e2f8 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   1e2f8:	deffff04 	addi	sp,sp,-4
   1e2fc:	df000015 	stw	fp,0(sp)
   1e300:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   1e304:	0001883a 	nop
   1e308:	e037883a 	mov	sp,fp
   1e30c:	df000017 	ldw	fp,0(sp)
   1e310:	dec00104 	addi	sp,sp,4
   1e314:	f800283a 	ret

0001e318 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   1e318:	deffff04 	addi	sp,sp,-4
   1e31c:	df000015 	stw	fp,0(sp)
   1e320:	d839883a 	mov	fp,sp
}
   1e324:	0001883a 	nop
   1e328:	e037883a 	mov	sp,fp
   1e32c:	df000017 	ldw	fp,0(sp)
   1e330:	dec00104 	addi	sp,sp,4
   1e334:	f800283a 	ret

0001e338 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   1e338:	deffff04 	addi	sp,sp,-4
   1e33c:	df000015 	stw	fp,0(sp)
   1e340:	d839883a 	mov	fp,sp
}
   1e344:	0001883a 	nop
   1e348:	e037883a 	mov	sp,fp
   1e34c:	df000017 	ldw	fp,0(sp)
   1e350:	dec00104 	addi	sp,sp,4
   1e354:	f800283a 	ret

0001e358 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   1e358:	defffe04 	addi	sp,sp,-8
   1e35c:	df000115 	stw	fp,4(sp)
   1e360:	df000104 	addi	fp,sp,4
   1e364:	e13fff15 	stw	r4,-4(fp)
}
   1e368:	0001883a 	nop
   1e36c:	e037883a 	mov	sp,fp
   1e370:	df000017 	ldw	fp,0(sp)
   1e374:	dec00104 	addi	sp,sp,4
   1e378:	f800283a 	ret

0001e37c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1e37c:	defffb04 	addi	sp,sp,-20
   1e380:	dfc00415 	stw	ra,16(sp)
   1e384:	df000315 	stw	fp,12(sp)
   1e388:	df000304 	addi	fp,sp,12
   1e38c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1e390:	d0a00717 	ldw	r2,-32740(gp)
   1e394:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1e398:	00003106 	br	1e460 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   1e39c:	e0bffd17 	ldw	r2,-12(fp)
   1e3a0:	10800217 	ldw	r2,8(r2)
   1e3a4:	1009883a 	mov	r4,r2
   1e3a8:	000b4580 	call	b458 <strlen>
   1e3ac:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1e3b0:	e0bffd17 	ldw	r2,-12(fp)
   1e3b4:	10c00217 	ldw	r3,8(r2)
   1e3b8:	e0bffe17 	ldw	r2,-8(fp)
   1e3bc:	10bfffc4 	addi	r2,r2,-1
   1e3c0:	1885883a 	add	r2,r3,r2
   1e3c4:	10800003 	ldbu	r2,0(r2)
   1e3c8:	10803fcc 	andi	r2,r2,255
   1e3cc:	1080201c 	xori	r2,r2,128
   1e3d0:	10bfe004 	addi	r2,r2,-128
   1e3d4:	10800bd8 	cmpnei	r2,r2,47
   1e3d8:	1000031e 	bne	r2,zero,1e3e8 <alt_find_file+0x6c>
    {
      len -= 1;
   1e3dc:	e0bffe17 	ldw	r2,-8(fp)
   1e3e0:	10bfffc4 	addi	r2,r2,-1
   1e3e4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1e3e8:	e0bffe17 	ldw	r2,-8(fp)
   1e3ec:	e0ffff17 	ldw	r3,-4(fp)
   1e3f0:	1885883a 	add	r2,r3,r2
   1e3f4:	10800003 	ldbu	r2,0(r2)
   1e3f8:	10803fcc 	andi	r2,r2,255
   1e3fc:	1080201c 	xori	r2,r2,128
   1e400:	10bfe004 	addi	r2,r2,-128
   1e404:	10800be0 	cmpeqi	r2,r2,47
   1e408:	1000081e 	bne	r2,zero,1e42c <alt_find_file+0xb0>
   1e40c:	e0bffe17 	ldw	r2,-8(fp)
   1e410:	e0ffff17 	ldw	r3,-4(fp)
   1e414:	1885883a 	add	r2,r3,r2
   1e418:	10800003 	ldbu	r2,0(r2)
   1e41c:	10803fcc 	andi	r2,r2,255
   1e420:	1080201c 	xori	r2,r2,128
   1e424:	10bfe004 	addi	r2,r2,-128
   1e428:	10000a1e 	bne	r2,zero,1e454 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   1e42c:	e0bffd17 	ldw	r2,-12(fp)
   1e430:	10800217 	ldw	r2,8(r2)
   1e434:	e0fffe17 	ldw	r3,-8(fp)
   1e438:	180d883a 	mov	r6,r3
   1e43c:	e17fff17 	ldw	r5,-4(fp)
   1e440:	1009883a 	mov	r4,r2
   1e444:	001e6d80 	call	1e6d8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1e448:	1000021e 	bne	r2,zero,1e454 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1e44c:	e0bffd17 	ldw	r2,-12(fp)
   1e450:	00000706 	br	1e470 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   1e454:	e0bffd17 	ldw	r2,-12(fp)
   1e458:	10800017 	ldw	r2,0(r2)
   1e45c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1e460:	e0fffd17 	ldw	r3,-12(fp)
   1e464:	d0a00704 	addi	r2,gp,-32740
   1e468:	18bfcc1e 	bne	r3,r2,1e39c <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1e46c:	0005883a 	mov	r2,zero
}
   1e470:	e037883a 	mov	sp,fp
   1e474:	dfc00117 	ldw	ra,4(sp)
   1e478:	df000017 	ldw	fp,0(sp)
   1e47c:	dec00204 	addi	sp,sp,8
   1e480:	f800283a 	ret

0001e484 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1e484:	defff904 	addi	sp,sp,-28
   1e488:	dfc00615 	stw	ra,24(sp)
   1e48c:	df000515 	stw	fp,20(sp)
   1e490:	df000504 	addi	fp,sp,20
   1e494:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1e498:	00bffa04 	movi	r2,-24
   1e49c:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   1e4a0:	d0a81117 	ldw	r2,-24508(gp)
   1e4a4:	e0bffd15 	stw	r2,-12(fp)
   1e4a8:	e03ffe0d 	sth	zero,-8(fp)
   1e4ac:	e0bffe0b 	ldhu	r2,-8(fp)
   1e4b0:	e0fffe84 	addi	r3,fp,-6
   1e4b4:	180d883a 	mov	r6,r3
   1e4b8:	100b883a 	mov	r5,r2
   1e4bc:	e13ffd17 	ldw	r4,-12(fp)
   1e4c0:	00187f40 	call	187f4 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1e4c4:	e03ffb15 	stw	zero,-20(fp)
   1e4c8:	00001906 	br	1e530 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   1e4cc:	008000b4 	movhi	r2,2
   1e4d0:	10810604 	addi	r2,r2,1048
   1e4d4:	e0fffb17 	ldw	r3,-20(fp)
   1e4d8:	18c00324 	muli	r3,r3,12
   1e4dc:	10c5883a 	add	r2,r2,r3
   1e4e0:	10800017 	ldw	r2,0(r2)
   1e4e4:	10000f1e 	bne	r2,zero,1e524 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   1e4e8:	008000b4 	movhi	r2,2
   1e4ec:	10810604 	addi	r2,r2,1048
   1e4f0:	e0fffb17 	ldw	r3,-20(fp)
   1e4f4:	18c00324 	muli	r3,r3,12
   1e4f8:	10c5883a 	add	r2,r2,r3
   1e4fc:	e0ffff17 	ldw	r3,-4(fp)
   1e500:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1e504:	d0e00b17 	ldw	r3,-32724(gp)
   1e508:	e0bffb17 	ldw	r2,-20(fp)
   1e50c:	1880020e 	bge	r3,r2,1e518 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   1e510:	e0bffb17 	ldw	r2,-20(fp)
   1e514:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
   1e518:	e0bffb17 	ldw	r2,-20(fp)
   1e51c:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   1e520:	00000606 	br	1e53c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1e524:	e0bffb17 	ldw	r2,-20(fp)
   1e528:	10800044 	addi	r2,r2,1
   1e52c:	e0bffb15 	stw	r2,-20(fp)
   1e530:	e0bffb17 	ldw	r2,-20(fp)
   1e534:	10800810 	cmplti	r2,r2,32
   1e538:	103fe41e 	bne	r2,zero,1e4cc <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   1e53c:	d0a81117 	ldw	r2,-24508(gp)
   1e540:	1009883a 	mov	r4,r2
   1e544:	0018b6c0 	call	18b6c <OSSemPost>

  return rc;
   1e548:	e0bffc17 	ldw	r2,-16(fp)
}
   1e54c:	e037883a 	mov	sp,fp
   1e550:	dfc00117 	ldw	ra,4(sp)
   1e554:	df000017 	ldw	fp,0(sp)
   1e558:	dec00204 	addi	sp,sp,8
   1e55c:	f800283a 	ret

0001e560 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1e560:	defffb04 	addi	sp,sp,-20
   1e564:	df000415 	stw	fp,16(sp)
   1e568:	df000404 	addi	fp,sp,16
   1e56c:	e13ffe15 	stw	r4,-8(fp)
   1e570:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1e574:	e0bfff17 	ldw	r2,-4(fp)
   1e578:	10840070 	cmpltui	r2,r2,4097
   1e57c:	1000021e 	bne	r2,zero,1e588 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1e580:	00840004 	movi	r2,4096
   1e584:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1e588:	e0fffe17 	ldw	r3,-8(fp)
   1e58c:	e0bfff17 	ldw	r2,-4(fp)
   1e590:	1885883a 	add	r2,r3,r2
   1e594:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1e598:	e0bffe17 	ldw	r2,-8(fp)
   1e59c:	e0bffc15 	stw	r2,-16(fp)
   1e5a0:	00000506 	br	1e5b8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1e5a4:	e0bffc17 	ldw	r2,-16(fp)
   1e5a8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1e5ac:	e0bffc17 	ldw	r2,-16(fp)
   1e5b0:	10800804 	addi	r2,r2,32
   1e5b4:	e0bffc15 	stw	r2,-16(fp)
   1e5b8:	e0fffc17 	ldw	r3,-16(fp)
   1e5bc:	e0bffd17 	ldw	r2,-12(fp)
   1e5c0:	18bff836 	bltu	r3,r2,1e5a4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1e5c4:	e0bffe17 	ldw	r2,-8(fp)
   1e5c8:	108007cc 	andi	r2,r2,31
   1e5cc:	10000226 	beq	r2,zero,1e5d8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1e5d0:	e0bffc17 	ldw	r2,-16(fp)
   1e5d4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1e5d8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1e5dc:	0001883a 	nop
   1e5e0:	e037883a 	mov	sp,fp
   1e5e4:	df000017 	ldw	fp,0(sp)
   1e5e8:	dec00104 	addi	sp,sp,4
   1e5ec:	f800283a 	ret

0001e5f0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1e5f0:	defffe04 	addi	sp,sp,-8
   1e5f4:	df000115 	stw	fp,4(sp)
   1e5f8:	df000104 	addi	fp,sp,4
   1e5fc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   1e600:	e0bfff17 	ldw	r2,-4(fp)
   1e604:	10bffe84 	addi	r2,r2,-6
   1e608:	10c00428 	cmpgeui	r3,r2,16
   1e60c:	18001a1e 	bne	r3,zero,1e678 <alt_exception_cause_generated_bad_addr+0x88>
   1e610:	100690ba 	slli	r3,r2,2
   1e614:	008000b4 	movhi	r2,2
   1e618:	10b98a04 	addi	r2,r2,-6616
   1e61c:	1885883a 	add	r2,r3,r2
   1e620:	10800017 	ldw	r2,0(r2)
   1e624:	1000683a 	jmp	r2
   1e628:	0001e668 	cmpgeui	zero,zero,1945
   1e62c:	0001e668 	cmpgeui	zero,zero,1945
   1e630:	0001e678 	rdprs	zero,zero,1945
   1e634:	0001e678 	rdprs	zero,zero,1945
   1e638:	0001e678 	rdprs	zero,zero,1945
   1e63c:	0001e668 	cmpgeui	zero,zero,1945
   1e640:	0001e670 	cmpltui	zero,zero,1945
   1e644:	0001e678 	rdprs	zero,zero,1945
   1e648:	0001e668 	cmpgeui	zero,zero,1945
   1e64c:	0001e668 	cmpgeui	zero,zero,1945
   1e650:	0001e678 	rdprs	zero,zero,1945
   1e654:	0001e668 	cmpgeui	zero,zero,1945
   1e658:	0001e670 	cmpltui	zero,zero,1945
   1e65c:	0001e678 	rdprs	zero,zero,1945
   1e660:	0001e678 	rdprs	zero,zero,1945
   1e664:	0001e668 	cmpgeui	zero,zero,1945
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1e668:	00800044 	movi	r2,1
   1e66c:	00000306 	br	1e67c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1e670:	0005883a 	mov	r2,zero
   1e674:	00000106 	br	1e67c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1e678:	0005883a 	mov	r2,zero
  }
}
   1e67c:	e037883a 	mov	sp,fp
   1e680:	df000017 	ldw	fp,0(sp)
   1e684:	dec00104 	addi	sp,sp,4
   1e688:	f800283a 	ret

0001e68c <atexit>:
   1e68c:	200b883a 	mov	r5,r4
   1e690:	000f883a 	mov	r7,zero
   1e694:	000d883a 	mov	r6,zero
   1e698:	0009883a 	mov	r4,zero
   1e69c:	001e7541 	jmpi	1e754 <__register_exitproc>

0001e6a0 <exit>:
   1e6a0:	defffe04 	addi	sp,sp,-8
   1e6a4:	000b883a 	mov	r5,zero
   1e6a8:	dc000015 	stw	r16,0(sp)
   1e6ac:	dfc00115 	stw	ra,4(sp)
   1e6b0:	2021883a 	mov	r16,r4
   1e6b4:	001e86c0 	call	1e86c <__call_exitprocs>
   1e6b8:	008000b4 	movhi	r2,2
   1e6bc:	10864504 	addi	r2,r2,6420
   1e6c0:	11000017 	ldw	r4,0(r2)
   1e6c4:	20800f17 	ldw	r2,60(r4)
   1e6c8:	10000126 	beq	r2,zero,1e6d0 <exit+0x30>
   1e6cc:	103ee83a 	callr	r2
   1e6d0:	8009883a 	mov	r4,r16
   1e6d4:	001e9ec0 	call	1e9ec <_exit>

0001e6d8 <memcmp>:
   1e6d8:	01c000c4 	movi	r7,3
   1e6dc:	3980192e 	bgeu	r7,r6,1e744 <memcmp+0x6c>
   1e6e0:	2144b03a 	or	r2,r4,r5
   1e6e4:	11c4703a 	and	r2,r2,r7
   1e6e8:	10000f26 	beq	r2,zero,1e728 <memcmp+0x50>
   1e6ec:	20800003 	ldbu	r2,0(r4)
   1e6f0:	28c00003 	ldbu	r3,0(r5)
   1e6f4:	10c0151e 	bne	r2,r3,1e74c <memcmp+0x74>
   1e6f8:	31bfff84 	addi	r6,r6,-2
   1e6fc:	01ffffc4 	movi	r7,-1
   1e700:	00000406 	br	1e714 <memcmp+0x3c>
   1e704:	20800003 	ldbu	r2,0(r4)
   1e708:	28c00003 	ldbu	r3,0(r5)
   1e70c:	31bfffc4 	addi	r6,r6,-1
   1e710:	10c00e1e 	bne	r2,r3,1e74c <memcmp+0x74>
   1e714:	21000044 	addi	r4,r4,1
   1e718:	29400044 	addi	r5,r5,1
   1e71c:	31fff91e 	bne	r6,r7,1e704 <memcmp+0x2c>
   1e720:	0005883a 	mov	r2,zero
   1e724:	f800283a 	ret
   1e728:	20c00017 	ldw	r3,0(r4)
   1e72c:	28800017 	ldw	r2,0(r5)
   1e730:	18bfee1e 	bne	r3,r2,1e6ec <memcmp+0x14>
   1e734:	31bfff04 	addi	r6,r6,-4
   1e738:	21000104 	addi	r4,r4,4
   1e73c:	29400104 	addi	r5,r5,4
   1e740:	39bff936 	bltu	r7,r6,1e728 <memcmp+0x50>
   1e744:	303fe91e 	bne	r6,zero,1e6ec <memcmp+0x14>
   1e748:	003ff506 	br	1e720 <memcmp+0x48>
   1e74c:	10c5c83a 	sub	r2,r2,r3
   1e750:	f800283a 	ret

0001e754 <__register_exitproc>:
   1e754:	defffa04 	addi	sp,sp,-24
   1e758:	dc000315 	stw	r16,12(sp)
   1e75c:	040000b4 	movhi	r16,2
   1e760:	84064504 	addi	r16,r16,6420
   1e764:	80c00017 	ldw	r3,0(r16)
   1e768:	dc400415 	stw	r17,16(sp)
   1e76c:	dfc00515 	stw	ra,20(sp)
   1e770:	18805217 	ldw	r2,328(r3)
   1e774:	2023883a 	mov	r17,r4
   1e778:	10003726 	beq	r2,zero,1e858 <__register_exitproc+0x104>
   1e77c:	10c00117 	ldw	r3,4(r2)
   1e780:	010007c4 	movi	r4,31
   1e784:	20c00e16 	blt	r4,r3,1e7c0 <__register_exitproc+0x6c>
   1e788:	1a000044 	addi	r8,r3,1
   1e78c:	8800221e 	bne	r17,zero,1e818 <__register_exitproc+0xc4>
   1e790:	18c00084 	addi	r3,r3,2
   1e794:	18c7883a 	add	r3,r3,r3
   1e798:	18c7883a 	add	r3,r3,r3
   1e79c:	12000115 	stw	r8,4(r2)
   1e7a0:	10c7883a 	add	r3,r2,r3
   1e7a4:	19400015 	stw	r5,0(r3)
   1e7a8:	0005883a 	mov	r2,zero
   1e7ac:	dfc00517 	ldw	ra,20(sp)
   1e7b0:	dc400417 	ldw	r17,16(sp)
   1e7b4:	dc000317 	ldw	r16,12(sp)
   1e7b8:	dec00604 	addi	sp,sp,24
   1e7bc:	f800283a 	ret
   1e7c0:	00800034 	movhi	r2,0
   1e7c4:	10800004 	addi	r2,r2,0
   1e7c8:	10002626 	beq	r2,zero,1e864 <__register_exitproc+0x110>
   1e7cc:	01006404 	movi	r4,400
   1e7d0:	d9400015 	stw	r5,0(sp)
   1e7d4:	d9800115 	stw	r6,4(sp)
   1e7d8:	d9c00215 	stw	r7,8(sp)
   1e7dc:	00000000 	call	0 <__alt_mem_SDRAM>
   1e7e0:	d9400017 	ldw	r5,0(sp)
   1e7e4:	d9800117 	ldw	r6,4(sp)
   1e7e8:	d9c00217 	ldw	r7,8(sp)
   1e7ec:	10001d26 	beq	r2,zero,1e864 <__register_exitproc+0x110>
   1e7f0:	81000017 	ldw	r4,0(r16)
   1e7f4:	10000115 	stw	zero,4(r2)
   1e7f8:	02000044 	movi	r8,1
   1e7fc:	22405217 	ldw	r9,328(r4)
   1e800:	0007883a 	mov	r3,zero
   1e804:	12400015 	stw	r9,0(r2)
   1e808:	20805215 	stw	r2,328(r4)
   1e80c:	10006215 	stw	zero,392(r2)
   1e810:	10006315 	stw	zero,396(r2)
   1e814:	883fde26 	beq	r17,zero,1e790 <__register_exitproc+0x3c>
   1e818:	18c9883a 	add	r4,r3,r3
   1e81c:	2109883a 	add	r4,r4,r4
   1e820:	1109883a 	add	r4,r2,r4
   1e824:	21802215 	stw	r6,136(r4)
   1e828:	01800044 	movi	r6,1
   1e82c:	12406217 	ldw	r9,392(r2)
   1e830:	30cc983a 	sll	r6,r6,r3
   1e834:	4992b03a 	or	r9,r9,r6
   1e838:	12406215 	stw	r9,392(r2)
   1e83c:	21c04215 	stw	r7,264(r4)
   1e840:	01000084 	movi	r4,2
   1e844:	893fd21e 	bne	r17,r4,1e790 <__register_exitproc+0x3c>
   1e848:	11006317 	ldw	r4,396(r2)
   1e84c:	218cb03a 	or	r6,r4,r6
   1e850:	11806315 	stw	r6,396(r2)
   1e854:	003fce06 	br	1e790 <__register_exitproc+0x3c>
   1e858:	18805304 	addi	r2,r3,332
   1e85c:	18805215 	stw	r2,328(r3)
   1e860:	003fc606 	br	1e77c <__register_exitproc+0x28>
   1e864:	00bfffc4 	movi	r2,-1
   1e868:	003fd006 	br	1e7ac <__register_exitproc+0x58>

0001e86c <__call_exitprocs>:
   1e86c:	defff504 	addi	sp,sp,-44
   1e870:	df000915 	stw	fp,36(sp)
   1e874:	dd400615 	stw	r21,24(sp)
   1e878:	dc800315 	stw	r18,12(sp)
   1e87c:	dfc00a15 	stw	ra,40(sp)
   1e880:	ddc00815 	stw	r23,32(sp)
   1e884:	dd800715 	stw	r22,28(sp)
   1e888:	dd000515 	stw	r20,20(sp)
   1e88c:	dcc00415 	stw	r19,16(sp)
   1e890:	dc400215 	stw	r17,8(sp)
   1e894:	dc000115 	stw	r16,4(sp)
   1e898:	d9000015 	stw	r4,0(sp)
   1e89c:	2839883a 	mov	fp,r5
   1e8a0:	04800044 	movi	r18,1
   1e8a4:	057fffc4 	movi	r21,-1
   1e8a8:	008000b4 	movhi	r2,2
   1e8ac:	10864504 	addi	r2,r2,6420
   1e8b0:	12000017 	ldw	r8,0(r2)
   1e8b4:	45005217 	ldw	r20,328(r8)
   1e8b8:	44c05204 	addi	r19,r8,328
   1e8bc:	a0001c26 	beq	r20,zero,1e930 <__call_exitprocs+0xc4>
   1e8c0:	a0800117 	ldw	r2,4(r20)
   1e8c4:	15ffffc4 	addi	r23,r2,-1
   1e8c8:	b8000d16 	blt	r23,zero,1e900 <__call_exitprocs+0x94>
   1e8cc:	14000044 	addi	r16,r2,1
   1e8d0:	8421883a 	add	r16,r16,r16
   1e8d4:	8421883a 	add	r16,r16,r16
   1e8d8:	84402004 	addi	r17,r16,128
   1e8dc:	a463883a 	add	r17,r20,r17
   1e8e0:	a421883a 	add	r16,r20,r16
   1e8e4:	e0001e26 	beq	fp,zero,1e960 <__call_exitprocs+0xf4>
   1e8e8:	80804017 	ldw	r2,256(r16)
   1e8ec:	e0801c26 	beq	fp,r2,1e960 <__call_exitprocs+0xf4>
   1e8f0:	bdffffc4 	addi	r23,r23,-1
   1e8f4:	843fff04 	addi	r16,r16,-4
   1e8f8:	8c7fff04 	addi	r17,r17,-4
   1e8fc:	bd7ff91e 	bne	r23,r21,1e8e4 <__call_exitprocs+0x78>
   1e900:	00800034 	movhi	r2,0
   1e904:	10800004 	addi	r2,r2,0
   1e908:	10000926 	beq	r2,zero,1e930 <__call_exitprocs+0xc4>
   1e90c:	a0800117 	ldw	r2,4(r20)
   1e910:	1000301e 	bne	r2,zero,1e9d4 <__call_exitprocs+0x168>
   1e914:	a0800017 	ldw	r2,0(r20)
   1e918:	10003226 	beq	r2,zero,1e9e4 <__call_exitprocs+0x178>
   1e91c:	a009883a 	mov	r4,r20
   1e920:	98800015 	stw	r2,0(r19)
   1e924:	00000000 	call	0 <__alt_mem_SDRAM>
   1e928:	9d000017 	ldw	r20,0(r19)
   1e92c:	a03fe41e 	bne	r20,zero,1e8c0 <__call_exitprocs+0x54>
   1e930:	dfc00a17 	ldw	ra,40(sp)
   1e934:	df000917 	ldw	fp,36(sp)
   1e938:	ddc00817 	ldw	r23,32(sp)
   1e93c:	dd800717 	ldw	r22,28(sp)
   1e940:	dd400617 	ldw	r21,24(sp)
   1e944:	dd000517 	ldw	r20,20(sp)
   1e948:	dcc00417 	ldw	r19,16(sp)
   1e94c:	dc800317 	ldw	r18,12(sp)
   1e950:	dc400217 	ldw	r17,8(sp)
   1e954:	dc000117 	ldw	r16,4(sp)
   1e958:	dec00b04 	addi	sp,sp,44
   1e95c:	f800283a 	ret
   1e960:	a0800117 	ldw	r2,4(r20)
   1e964:	80c00017 	ldw	r3,0(r16)
   1e968:	10bfffc4 	addi	r2,r2,-1
   1e96c:	15c01426 	beq	r2,r23,1e9c0 <__call_exitprocs+0x154>
   1e970:	80000015 	stw	zero,0(r16)
   1e974:	183fde26 	beq	r3,zero,1e8f0 <__call_exitprocs+0x84>
   1e978:	95c8983a 	sll	r4,r18,r23
   1e97c:	a0806217 	ldw	r2,392(r20)
   1e980:	a5800117 	ldw	r22,4(r20)
   1e984:	2084703a 	and	r2,r4,r2
   1e988:	10000b26 	beq	r2,zero,1e9b8 <__call_exitprocs+0x14c>
   1e98c:	a0806317 	ldw	r2,396(r20)
   1e990:	2088703a 	and	r4,r4,r2
   1e994:	20000c1e 	bne	r4,zero,1e9c8 <__call_exitprocs+0x15c>
   1e998:	89400017 	ldw	r5,0(r17)
   1e99c:	d9000017 	ldw	r4,0(sp)
   1e9a0:	183ee83a 	callr	r3
   1e9a4:	a0800117 	ldw	r2,4(r20)
   1e9a8:	15bfbf1e 	bne	r2,r22,1e8a8 <__call_exitprocs+0x3c>
   1e9ac:	98800017 	ldw	r2,0(r19)
   1e9b0:	153fcf26 	beq	r2,r20,1e8f0 <__call_exitprocs+0x84>
   1e9b4:	003fbc06 	br	1e8a8 <__call_exitprocs+0x3c>
   1e9b8:	183ee83a 	callr	r3
   1e9bc:	003ff906 	br	1e9a4 <__call_exitprocs+0x138>
   1e9c0:	a5c00115 	stw	r23,4(r20)
   1e9c4:	003feb06 	br	1e974 <__call_exitprocs+0x108>
   1e9c8:	89000017 	ldw	r4,0(r17)
   1e9cc:	183ee83a 	callr	r3
   1e9d0:	003ff406 	br	1e9a4 <__call_exitprocs+0x138>
   1e9d4:	a0800017 	ldw	r2,0(r20)
   1e9d8:	a027883a 	mov	r19,r20
   1e9dc:	1029883a 	mov	r20,r2
   1e9e0:	003fb606 	br	1e8bc <__call_exitprocs+0x50>
   1e9e4:	0005883a 	mov	r2,zero
   1e9e8:	003ffb06 	br	1e9d8 <__call_exitprocs+0x16c>

0001e9ec <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1e9ec:	defffd04 	addi	sp,sp,-12
   1e9f0:	df000215 	stw	fp,8(sp)
   1e9f4:	df000204 	addi	fp,sp,8
   1e9f8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1e9fc:	d0281945 	stb	zero,-24475(gp)
   1ea00:	e0bfff17 	ldw	r2,-4(fp)
   1ea04:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1ea08:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1ea0c:	10000226 	beq	r2,zero,1ea18 <_exit+0x2c>
    ALT_SIM_FAIL();
   1ea10:	002af070 	cmpltui	zero,zero,43969
   1ea14:	00000106 	br	1ea1c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   1ea18:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1ea1c:	003fff06 	br	1ea1c <_exit+0x30>


catch_game.elf:     file format elf32-littlenios2
catch_game.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001f984 memsz 0x0001f984 flags r-x
    LOAD off    0x000209a4 vaddr 0x0001f9a4 paddr 0x00021874 align 2**12
         filesz 0x00001ed0 memsz 0x00001ed0 flags rw-
    LOAD off    0x00023744 vaddr 0x00023744 paddr 0x00023744 align 2**12
         filesz 0x00000000 memsz 0x0000d45c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001e658  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001104  0001e8a0  0001e8a0  0001f8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ed0  0001f9a4  00021874  000209a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000d45c  00023744  00023744  00023744  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00030ba0  00030ba0  00022874  2**0
                  CONTENTS
  7 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM 00000000  09000000  09000000  00022874  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00022874  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001170  00000000  00000000  00022898  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000348fe  00000000  00000000  00023a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000bf05  00000000  00000000  00058306  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001080e  00000000  00000000  0006420b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003cb0  00000000  00000000  00074a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000059a0  00000000  00000000  000786cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001cd3e  00000000  00000000  0007e06c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  0009adac  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001aa8  00000000  00000000  0009add0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  000a24cd  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  000a24d3  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000a24d8  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000a24d9  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000a24da  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000a24de  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000a24e2  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000a24e6  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000a24ef  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000a24f8  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000f  00000000  00000000  000a2501  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000044  00000000  00000000  000a2510  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     001d2080  00000000  00000000  000a2554  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
0001e8a0 l    d  .rodata	00000000 .rodata
0001f9a4 l    d  .rwdata	00000000 .rwdata
00023744 l    d  .bss	00000000 .bss
00030ba0 l    d  .SDRAM	00000000 .SDRAM
09000000 l    d  .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM	00000000 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../catch_game_bsp//obj/HAL/src/crt0.o
00000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
000004e4 l     F .text	00000068 Task_VGA_init
00000000 l    df *ABS*	00000000 utils.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 impure.c
0001f9ec l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 strerror.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001f446 l     O .rodata	00000010 zeroes.4389
0001f456 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 u_strerr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001f466 l     O .rodata	00000010 zeroes.4404
00006cb0 l     F .text	000000bc __sbprintf
0001f476 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00006ec0 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000089f0 l     F .text	00000008 __fp_unlock
00008a04 l     F .text	0000019c __sinit.part.1
00008ba0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
0001fe30 l     O .rwdata	00000020 lc_ctype_charset
0001fe10 l     O .rwdata	00000020 lc_message_charset
0001fe50 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0001f4a4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001f5d8 l     O .rodata	00000010 blanks.4332
0001f5c8 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
0000c77c l     F .text	000000fc __sprint_r.part.0
0001f5f8 l     O .rodata	00000010 blanks.4348
0001f5e8 l     O .rodata	00000010 zeroes.4349
0000dd08 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00012540 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0001264c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00012678 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00012764 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00012844 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00012930 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00012afc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000217e8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00012d48 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
000217ec l     O .rwdata	00000004 lockid
000237e4 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
000217f0 l     O .rwdata	00000004 lockid
000237ec l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00014778 l     F .text	00000048 OS_InitMisc
000147c0 l     F .text	0000006c OS_InitRdyList
0001492c l     F .text	000000e4 OS_InitTCBList
00014698 l     F .text	000000e0 OS_InitEventList
0001482c l     F .text	00000080 OS_InitTaskIdle
000148ac l     F .text	00000080 OS_InitTaskStat
00014b9c l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
000168bc l     F .text	000000f4 OS_FlagTaskRdy
0001667c l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001a96c l     F .text	00000034 alt_dev_reg
00020438 l     O .rwdata	0000106c JTAG_UART
000214a4 l     O .rwdata	00000030 AV_Config
000214d4 l     O .rwdata	00000030 Audio_Subsystem_Audio
00021504 l     O .rwdata	0000002c Char_LCD_16x2
00021530 l     O .rwdata	0000002c IrDA
0002155c l     O .rwdata	00000038 PS2_Port
00021594 l     O .rwdata	00000038 PS2_Port_Dual
000215cc l     O .rwdata	0000002c Serial_Port
000215f8 l     O .rwdata	00000034 USB
0002162c l     O .rwdata	0000005c VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA
00021688 l     O .rwdata	0000005c VGA_Subsystem_VGA_Pixel_DMA
000216e4 l     O .rwdata	0000005c Video_In_Subsystem_Video_In_DMA
00021740 l     O .rwdata	00000044 VGA_Subsystem_VGA_Pixel_RGB_Resampler
00021784 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001b5e4 l     F .text	000002a8 altera_avalon_jtag_uart_irq
0001b88c l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001c068 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001d564 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001d7c8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001da88 l     F .text	0000003c alt_get_errno
0001dac4 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00023850 g     O .bss	00000004 alt_instruction_exception_handler
00023744 g     O .bss	00000004 basket_pos_y
0000ae80 g     F .text	00000074 _mprec_log10
0002183e g     O .rwdata	00000002 OSTaskNameSize
0000af6c g     F .text	0000008c __any_on
0000e760 g     F .text	00000054 _isatty_r
0001f4b0 g     O .rodata	00000028 __mprec_tinytens
00012a40 g     F .text	000000bc alt_main
00023748 g     O .bss	00000004 video_resolution
00030aa0 g     O .bss	00000100 alt_irq
0001cc24 g     F .text	00000060 alt_up_ps2_disable_read_interrupt
0000e7b4 g     F .text	00000060 _lseek_r
000170dc g     F .text	000000cc OS_MemInit
00021874 g       *ABS*	00000000 __flash_rwdata_start
0001a90c g     F .text	00000060 OSTimeSet
0001c1cc g     F .text	00000040 alt_up_character_lcd_send_cmd
0001106c g     F .text	00000088 .hidden __eqdf2
000133ec g     F .text	00000610 OSEventPendMulti
00030ba0 g       *ABS*	00000000 __alt_heap_start
0001e0d0 g     F .text	00000024 OSTaskCreateHook
0002374c g     O .bss	00000004 pos1_x
00021816 g     O .rwdata	00000002 OSMboxEn
00013a54 g     F .text	0000004c OSIntEnter
0000f08c g     F .text	0000009c _wcrtomb_r
00023750 g     O .bss	00000004 pos3_y
0000b198 g     F .text	0000005c __sseek
00008d40 g     F .text	00000010 __sinit
0000ef34 g     F .text	00000140 __swbuf_r
0001ca3c g     F .text	00000034 read_CE_bit
00021826 g     O .rwdata	00000002 OSQEn
0000934c g     F .text	0000007c _setlocale_r
00008ba8 g     F .text	00000068 __sfmoreglue
000130c0 g     F .text	000000cc __malloc_unlock
0001e138 g     F .text	00000020 OSTaskStatHook
0001cdc4 g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
0001d2b8 g     F .text	00000090 alt_up_rs232_read_fd
000237f4 g     O .bss	00000001 OSLockNesting
00001ac0 g     F .text	000001a4 VGA_display_score
000028a0 g     F .text	0000001c strerror
00021864 g     O .rwdata	00000002 OSDataSize
000237f5 g     O .bss	00000001 OSRunning
00001044 g     F .text	00000070 VGA_clear_game_row
0000e814 g     F .text	0000015c memmove
0001e178 g     F .text	00000020 OSInitHookBegin
0002185c g     O .rwdata	00000002 OSTmrSize
00008d28 g     F .text	00000018 _cleanup
00002160 g     F .text	000000e4 snprintf
00009ffc g     F .text	000000a8 _Balloc
00023754 g     O .bss	00000004 screen_x
000237f8 g     O .bss	00000004 OSIdleCtr
000110f4 g     F .text	000000dc .hidden __gtdf2
0001de80 g     F .text	00000024 altera_nios2_gen2_irq_init
0001df50 g       .text	00000000 OSStartTsk
00001e6c g     F .text	00000010 __errno
0001c158 g     F .text	00000074 get_DDRAM_addr
00014edc g     F .text	000002d4 OS_TCBInit
0002387c g     O .bss	00002000 task_key_press_stk
00000000 g     F .entry	0000001c __reset
00021862 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
00021802 g     O .rwdata	00000002 OSEventSize
000237fc g     O .bss	00000001 OSPrioHighRdy
0000e248 g     F .text	0000005c _fstat_r
0001e0f4 g     F .text	00000024 OSTaskDelHook
000237d0 g     O .bss	00000004 errno
0000b114 g     F .text	00000008 __seofread
0001df30 g       .text	00000000 OSStartHighRdy
000193a8 g     F .text	000001e4 OSTaskCreateExt
0000b540 g     F .text	0000123c ___svfiprintf_internal_r
00000e68 g     F .text	0000008c VGA_info_right
000161c4 g     F .text	00000060 OSFlagPendGetFlagsRdy
00021842 g     O .rwdata	00000002 OSTaskStatStkSize
00015340 g     F .text	00000308 OSFlagAccept
00017714 g     F .text	000000b8 OSQFlush
000171a8 g     F .text	00000140 OSQAccept
000237dc g     O .bss	00000004 alt_argv
000297b0 g       *ABS*	00000000 _gp
00023758 g     O .bss	00000002 background_color
000191fc g     F .text	000001ac OSTaskCreate
00018d0c g     F .text	000004f0 OSTaskChangePrio
000237f0 g     O .bss	00000004 alt_heapsem
000151b0 g     F .text	00000190 OSDebugInit
0001958c g     F .text	00000344 OSTaskDel
000005f8 g     F .text	0000006c Task_read_PS2_Keyboard
0002375c g     O .bss	00000004 game_hh
000202b8 g     O .rwdata	00000180 alt_fd_list
0002d87c g     O .bss	00000370 OSFlagTbl
00014478 g     F .text	000000b8 OS_EventTaskRemove
00023760 g     O .bss	00000004 SEM_read_KEYs
0001d704 g     F .text	00000090 alt_find_dev
00001ec8 g     F .text	00000148 memcpy
0002182c g     O .rwdata	00000002 OSRdyTblSize
0001c374 g     F .text	00000050 alt_up_character_lcd_write_fd
000089f8 g     F .text	0000000c _cleanup_r
00012358 g     F .text	000000dc .hidden __floatsidf
0001d88c g     F .text	0000007c alt_io_redirect
000111d0 g     F .text	000000f4 .hidden __ltdf2
0001e8a0 g       *ABS*	00000000 __DTOR_END__
0001c90c g     F .text	00000090 alt_up_irda_write_fd
0001d244 g     F .text	00000074 alt_up_rs232_read_data
0001e470 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0001318c g     F .text	00000120 OSEventNameGet
00021810 g     O .rwdata	00000002 OSFlagMax
00002244 g     F .text	0000065c _strerror_r
0000aff8 g     F .text	00000074 __fpclassifyd
0000addc g     F .text	000000a4 __ratio
00013aa0 g     F .text	000000f8 OSIntExit
0000dcec g     F .text	0000001c __vfiprintf_internal
0002184a g     O .rwdata	00000002 OSTCBSize
000237fd g     O .bss	00000001 OSPrioCur
00023764 g     O .bss	00000004 KEY2_flag
0001c708 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
0001bae8 g     F .text	000002bc altera_avalon_jtag_uart_read
0000fe1c g     F .text	00000064 .hidden __udivsi3
000127a0 g     F .text	000000a4 isatty
00000e08 g     F .text	00000060 VGA_animated_char
00021830 g     O .rwdata	00000002 OSStkWidth
0001f500 g     O .rodata	000000c8 __mprec_tens
00021824 g     O .rwdata	00000002 OSPtrSize
000093c8 g     F .text	0000000c __locale_charset
00021804 g     O .rwdata	00000002 OSEventTblSize
0001c6a8 g     F .text	00000060 alt_up_irda_disable_read_interrupt
0001dea4 g       .text	00000000 OSCtxSw
0001e3e0 g     F .text	00000090 alt_icache_flush
000237cc g     O .bss	00000004 __malloc_top_pad
00023800 g     O .bss	00000004 OSTCBList
000237d4 g     O .bss	00000004 alt_fd_list_lock
000217c0 g     O .rwdata	00000004 __mb_cur_max
000093f8 g     F .text	0000000c _localeconv_r
0000e2a4 g     F .text	000004bc __sfvwrite_r
0000a408 g     F .text	0000003c __i2b
0002dbec g     O .bss	00000c30 OSMemTbl
00023804 g     O .bss	00000001 OSTickStepState
0000b06c g     F .text	00000054 _sbrk_r
00021828 g     O .rwdata	00000002 OSQMax
0002e81c g     O .bss	00000800 OSTaskStatStk
00016d18 g     F .text	000000f0 OSMemNameGet
00021808 g     O .rwdata	00000002 OSFlagEn
00023768 g     O .bss	00000004 game_mm
0000e970 g     F .text	00000060 _read_r
0002184e g     O .rwdata	00000002 OSTimeTickHookEn
00017bc4 g     F .text	00000168 OSQPost
000169b0 g     F .text	000000a4 OS_FlagUnlink
000217e0 g     O .rwdata	00000004 alt_max_fd
0001d1c0 g     F .text	00000044 alt_up_rs232_check_parity
0002376c g     O .bss	00000004 col_offset
00014a64 g     F .text	00000068 OS_MemCopy
00014acc g     F .text	000000d0 OS_Sched
0000df3c g     F .text	000000f0 _fclose_r
00016c28 g     F .text	000000f0 OSMemGet
00019bb8 g     F .text	000001b4 OSTaskNameSet
0001ca70 g     F .text	00000030 read_num_bytes_available
000089c0 g     F .text	00000030 fflush
000237c8 g     O .bss	00000004 __malloc_max_sbrked_mem
00023808 g     O .bss	00000004 OSCtxSwCtr
0002587c g     O .bss	00002000 task_disp_vga_char_stk
0001e158 g     F .text	00000020 OSTimeTickHook
0001d908 g     F .text	00000180 alt_irq_register
00021812 g     O .rwdata	00000002 OSFlagNameSize
0001c9d8 g     F .text	00000034 read_RI_bit
00014530 g     F .text	00000100 OS_EventTaskRemoveMulti
0000fed8 g     F .text	000008ac .hidden __adddf3
00014328 g     F .text	00000150 OS_EventTaskWaitMulti
0002787c g     O .bss	00002000 task_falling_blocks
0000ab84 g     F .text	0000010c __b2d
00023770 g     O .bss	00000004 game_ss
0002182a g     O .rwdata	00000002 OSQSize
0000f7ec g     F .text	00000538 .hidden __umoddi3
0001296c g     F .text	000000d4 lseek
00018674 g     F .text	0000020c OSSemPend
000217b8 g     O .rwdata	00000004 _global_impure_ptr
00023774 g     O .bss	00000002 sidebar_color
0000e9d0 g     F .text	00000564 _realloc_r
00021814 g     O .rwdata	00000002 OSLowestPrio
00030ba0 g       *ABS*	00000000 __bss_end
0001e1d8 g     F .text	00000024 OSTCBInitHook
0002185a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0001dd78 g     F .text	00000108 alt_tick
0000f274 g     F .text	00000578 .hidden __udivdi3
0000e1a4 g     F .text	00000024 _fputwc_r
000217fc g     O .rwdata	00000002 OSEventEn
0001f4d8 g     O .rodata	00000028 __mprec_bigtens
0000a1ec g     F .text	00000104 __s2b
00021856 g     O .rwdata	00000002 OSTmrCfgNameSize
00012434 g     F .text	000000a8 .hidden __floatunsidf
0000a8c4 g     F .text	00000060 __mcmp
0001cad4 g     F .text	0000002c read_data_byte
00008d60 g     F .text	00000018 __fp_lock_all
000167dc g     F .text	000000e0 OS_FlagInit
0001dcdc g     F .text	0000009c alt_alarm_stop
0001ca0c g     F .text	00000030 read_RE_bit
00021838 g     O .rwdata	00000002 OSTaskIdleStkSize
00000a30 g     F .text	00000168 Check_KEYs
00023844 g     O .bss	00000004 alt_irq_active
000182ac g     F .text	000000b0 OSSemAccept
00000b98 g     F .text	00000094 VGA_text
00016f1c g     F .text	000000d8 OSMemPut
00016a54 g     F .text	000001d4 OSMemCreate
0002380c g     O .bss	00000004 OSIdleCtrMax
0001c748 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d8 alt_irq_handler
00020290 g     O .rwdata	00000028 alt_dev_null
0002184c g     O .rwdata	00000002 OSTicksPerSec
00023778 g     O .bss	00000004 KEY_val
0001c614 g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
0001dea4 g       .text	00000000 OSIntCtxSw
0001cc84 g     F .text	00000074 alt_up_ps2_write_data_byte
0001d544 g     F .text	00000020 alt_dcache_flush_all
0000a2f0 g     F .text	00000068 __hi0bits
000122d8 g     F .text	00000080 .hidden __fixdfsi
00023810 g     O .bss	00000004 OSTCBFreeList
00021874 g       *ABS*	00000000 __ram_rwdata_end
00018880 g     F .text	0000016c OSSemPendAbort
000217d8 g     O .rwdata	00000008 alt_dev_list
0002377c g     O .bss	00000004 score
00012d84 g     F .text	000000f8 write
00021850 g     O .rwdata	00000002 OSVersionNbr
0001f9a4 g       *ABS*	00000000 __ram_rodata_end
000126b4 g     F .text	000000b0 fstat
00001ea4 g     F .text	00000024 fprintf
0001d348 g     F .text	00000094 alt_up_rs232_write_fd
00023780 g     O .bss	00000004 pos2_y
00023784 g     O .bss	00000004 res_offset
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
000111d0 g     F .text	000000f4 .hidden __ledf2
00023788 g     O .bss	00000002 basket_color
000217f8 g     O .rwdata	00000004 OSEndiannessTest
0000a63c g     F .text	00000140 __pow5mult
0000c890 g     F .text	0000145c ___vfiprintf_internal_r
000237c0 g     O .bss	00000004 __nlocale_changed
0000fe80 g     F .text	00000058 .hidden __umodsi3
0002180a g     O .rwdata	00000002 OSFlagGrpSize
00030ba0 g       *ABS*	00000000 end
0001cfb4 g     F .text	00000098 alt_up_ps2_write_fd
0001c784 g     F .text	00000044 alt_up_irda_check_parity
00000fac g     F .text	00000098 VGA_clear_screen
0001b4a8 g     F .text	0000013c altera_avalon_jtag_uart_init
00014d34 g     F .text	000000dc OS_TaskStat
0002987c g     O .bss	00002000 task_ps2_keyboard_stk
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
0001e8a0 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00001c64 g     F .text	0000015c HEX_PS2
0001c0e4 g     F .text	00000074 alt_avalon_timer_sc_init
000124dc g     F .text	00000064 .hidden __clzsi2
00002088 g     F .text	000000d8 _snprintf_r
0001bda4 g     F .text	000002c4 altera_avalon_jtag_uart_write
00008d50 g     F .text	00000004 __sfp_lock_acquire
00009df0 g     F .text	000000e4 memchr
00014a10 g     F .text	00000054 OS_MemClr
0001c280 g     F .text	0000007c alt_up_character_lcd_write
00004a9c g     F .text	000021f8 ___vfprintf_internal_r
0001df74 g     F .text	0000015c OSTaskStkInit
00008eb4 g     F .text	00000310 _free_r
0001f9a4 g     O .rwdata	00000046 clear_row_text
000093d4 g     F .text	00000010 __locale_mb_cur_max
00014080 g     F .text	00000198 OS_EventTaskRdy
0002378c g     O .bss	00000004 screen_y
0001e6ec g     F .text	00000180 __call_exitprocs
00023814 g     O .bss	00000001 OSCPUUsage
0002b87c g     O .bss	00002000 task_game_timer_stk
000237bc g     O .bss	00000004 __mlocale_changed
000217c4 g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	0000003c _start
00023848 g     O .bss	00000004 _alt_tick_rate
000177cc g     F .text	0000028c OSQPend
00004a94 g     F .text	00000008 _user_strerror
0001a478 g     F .text	00000104 OSTimeDly
00002028 g     F .text	00000060 rand
0000a77c g     F .text	00000148 __lshift
0002384c g     O .bss	00000004 _alt_nticks
00012b38 g     F .text	000000fc read
0001a9d8 g     F .text	0000096c alt_sys_init
0001c4c4 g     F .text	0000008c alt_up_character_lcd_shift_display
0000b370 g     F .text	000001d0 __ssprint_r
0001e5d4 g     F .text	00000118 __register_exitproc
00023815 g     O .bss	00000001 OSTaskCtr
0001ced0 g     F .text	00000058 alt_up_ps2_clear_fifo
0001d184 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00000c2c g     F .text	00000138 VGA_box
0001a57c g     F .text	00000160 OSTimeDlyHMSM
0000a444 g     F .text	000001f8 __multiply
0001c550 g     F .text	0000008c alt_up_character_lcd_erase_pos
0001b990 g     F .text	00000068 altera_avalon_jtag_uart_close
0001f9a4 g       *ABS*	00000000 __ram_rwdata_start
0001e8a0 g       *ABS*	00000000 __ram_rodata_start
00023854 g     O .bss	00000028 __malloc_current_mallinfo
000217fe g     O .rwdata	00000002 OSEventMax
0000ac90 g     F .text	0000014c __d2b
000189ec g     F .text	00000110 OSSemPost
00013c24 g     F .text	000000dc OSSchedUnlock
0001b344 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001e304 g     F .text	000000dc alt_get_fd
00023818 g     O .bss	00000004 OSMemFreeList
00013d70 g     F .text	000000b0 OSStatInit
000165b8 g     F .text	000000c4 OSFlagQuery
00023790 g     O .bss	00000004 KEY1_flag
00021834 g     O .rwdata	00000002 OSTaskCreateExtEn
0000de24 g     F .text	00000054 _close_r
0001e558 g     F .text	0000007c memcmp
00014060 g     F .text	00000020 OS_Dummy
0001b404 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000010b4 g     F .text	00000190 get_data_bits
00030ba0 g       *ABS*	00000000 __alt_stack_base
0001b454 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00023794 g     O .bss	00000004 basket_pos_x
0001c64c g     F .text	0000005c alt_up_irda_enable_read_interrupt
00006d6c g     F .text	00000154 __swsetup_r
0002f01c g     O .bss	000001e0 OSQTbl
00010784 g     F .text	000008e8 .hidden __divdf3
00008c10 g     F .text	00000118 __sfp
0000aef4 g     F .text	00000078 __copybits
0001fe88 g     O .rwdata	00000408 __malloc_av_
00008d5c g     F .text	00000004 __sinit_lock_release
0002381c g     O .bss	00000004 OSTCBHighRdy
000112c4 g     F .text	00000718 .hidden __muldf3
0000b0c0 g     F .text	00000054 __sread
00023820 g     O .bss	00000004 OSQFreeList
0001d0e4 g     F .text	00000060 alt_up_rs232_disable_read_interrupt
0001e1fc g     F .text	00000108 alt_find_file
0001d5a0 g     F .text	000000a4 alt_dev_llist_insert
00012fa0 g     F .text	00000120 __malloc_lock
00001e7c g     F .text	00000028 _fprintf_r
00012c98 g     F .text	000000b0 sbrk
000028bc g     F .text	000021d8 ___svfprintf_internal_r
000132ac g     F .text	00000140 OSEventNameSet
00008964 g     F .text	0000005c _fflush_r
0000de78 g     F .text	000000c4 _calloc_r
00023824 g     O .bss	00000001 OSRdyGrp
000003a0 g     F .text	00000144 Task_read_KEYs
00023744 g       *ABS*	00000000 __bss_start
00009ed4 g     F .text	00000128 memset
00023798 g     O .bss	00000001 err
000007c4 g     F .text	0000026c main
000237e0 g     O .bss	00000004 alt_envp
000237c4 g     O .bss	00000004 __malloc_max_total_mem
0000054c g     F .text	000000ac Task_VGA_char
0001b3a4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000f074 g     F .text	00000018 __swbuf
00002010 g     F .text	00000018 srand
0001f724 g     O .rodata	00000100 OSUnMapTbl
0002182e g     O .rwdata	00000002 OSSemEn
0001c438 g     F .text	0000008c alt_up_character_lcd_shift_cursor
00016224 g     F .text	00000394 OSFlagPost
0000b1f4 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0000e02c g     F .text	00000014 fclose
00014218 g     F .text	00000110 OS_EventTaskWait
0001ce60 g     F .text	00000070 alt_up_ps2_read_data_byte
00014e10 g     F .text	000000cc OS_TaskStatStkChk
000198d0 g     F .text	00000150 OSTaskDelReq
000070c0 g     F .text	00001688 _dtoa_r
000095e4 g     F .text	0000080c _malloc_r
0000f1e8 g     F .text	00000030 __ascii_wctomb
0002379c g     O .bss	00000004 pos1_y
000217e4 g     O .rwdata	00000004 alt_errno
00013d00 g     F .text	00000070 OSStart
00012f40 g     F .text	00000060 __env_unlock
000091c4 g     F .text	000000c4 _fwalk
00019d6c g     F .text	000001d4 OSTaskResume
00016ff4 g     F .text	000000e8 OSMemQuery
00021840 g     O .rwdata	00000002 OSTaskStatEn
0001c7c8 g     F .text	00000040 alt_up_irda_write_data
0002181a g     O .rwdata	00000002 OSMemMax
00017d2c g     F .text	00000170 OSQPostFront
0001d04c g     F .text	0000003c alt_up_ps2_open_dev
0000fd24 g     F .text	00000084 .hidden __divsi3
00023825 g     O .bss	00000003 OSRdyTbl
000217f4 g     O .rwdata	00000002 OSDebugEn
0001c244 g     F .text	0000003c alt_up_character_lcd_open_dev
00008d90 g     F .text	00000124 _malloc_trim_r
0001cbc8 g     F .text	0000005c alt_up_ps2_enable_read_interrupt
0001e8a0 g       *ABS*	00000000 __CTOR_END__
0002180c g     O .rwdata	00000002 OSFlagNodeSize
00021854 g     O .rwdata	00000002 OSTmrCfgMax
0001c20c g     F .text	00000038 alt_up_character_lcd_init
0000b1fc g     F .text	000000dc strcmp
000172e8 g     F .text	000001ac OSQCreate
00019a20 g     F .text	00000198 OSTaskNameGet
0001e8a0 g       *ABS*	00000000 __flash_rodata_start
00017e9c g     F .text	0000020c OSQPostOpt
00013e20 g     F .text	00000220 OSTimeTick
0002183c g     O .rwdata	00000002 OSTaskMax
0001e8a0 g       *ABS*	00000000 __DTOR_LIST__
0001835c g     F .text	000000d8 OSSemCreate
00021860 g     O .rwdata	00000002 OSTmrWheelSize
000237a0 g     O .bss	00000004 KEY3_flag
0001d3dc g     F .text	0000003c alt_up_rs232_open_dev
0001106c g     F .text	00000088 .hidden __nedf2
00021836 g     O .rwdata	00000002 OSTaskDelEn
00018afc g     F .text	00000110 OSSemQuery
00017494 g     F .text	00000280 OSQDel
00017a58 g     F .text	0000016c OSQPendAbort
0001a9a0 g     F .text	00000038 alt_irq_init
00012c34 g     F .text	00000064 alt_release_fd
0001caa0 g     F .text	00000034 read_data_valid
0001c5dc g     F .text	00000038 alt_up_character_lcd_cursor_off
0001f608 g     O .rodata	00000100 .hidden __clz_tab
000237a4 g     O .bss	00000004 pos3_x
000237b8 g     O .bss	00000004 _PathLocale
0001cd60 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
0001e50c g     F .text	00000014 atexit
0000ddc4 g     F .text	00000060 _write_r
00013b98 g     F .text	0000008c OSSchedLock
00009404 g     F .text	00000018 setlocale
00015648 g     F .text	00000108 OSFlagCreate
00000284 g     F .text	0000011c Task_game_timer
000217bc g     O .rwdata	00000004 _impure_ptr
000237d8 g     O .bss	00000004 alt_argc
00008748 g     F .text	0000021c __sflush_r
000217b4 g     O .rwdata	00000002 clear_text
0001d6a4 g     F .text	00000060 _do_dtors
000093f0 g     F .text	00000008 __locale_cjk_lang
000237a8 g     O .bss	00000004 pos2_x
00021806 g     O .rwdata	00000002 OSEventMultiEn
09000000 g       *ABS*	00000000 __alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000664 g     F .text	00000160 Task_falling_blocks
00015750 g     F .text	00000248 OSFlagDel
00023828 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
0000ab20 g     F .text	00000064 __ulp
00015c0c g     F .text	000005b8 OSFlagPend
00021852 g     O .rwdata	00000002 OSTmrEn
00008d78 g     F .text	00000018 __fp_unlock_all
000217d0 g     O .rwdata	00000008 alt_fs_list
00014c10 g     F .text	00000074 OS_StrCopy
0001d088 g     F .text	0000005c alt_up_rs232_enable_read_interrupt
0001d204 g     F .text	00000040 alt_up_rs232_write_data
0002181c g     O .rwdata	00000002 OSMemNameSize
0001e198 g     F .text	00000020 OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
00021848 g     O .rwdata	00000002 OSTCBPrioTblMax
0000941c g     F .text	0000000c localeconv
00021844 g     O .rwdata	00000002 OSTaskStatStkChkEn
00001904 g     F .text	000001bc VGA_gametime_display
00021818 g     O .rwdata	00000002 OSMemEn
00021822 g     O .rwdata	00000002 OSMutexEn
00021874 g       *ABS*	00000000 _edata
000237ac g     O .bss	00000004 KEY0_flag
00030ba0 g       *ABS*	00000000 _end
0002382c g     O .bss	00000001 OSIntNesting
0000e040 g     F .text	00000164 __fputwc
00000248 g       *ABS*	00000000 __ram_exceptions_end
0001b9f8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0001a6dc g     F .text	000001d4 OSTimeDlyResume
00015ac0 g     F .text	0000014c OSFlagNameSet
00019f40 g     F .text	000001c0 OSTaskStkChk
0002181e g     O .rwdata	00000002 OSMemSize
0000b11c g     F .text	0000007c __swrite
000217c8 g     O .rwdata	00000004 __malloc_trim_threshold
000093e4 g     F .text	0000000c __locale_msgcharset
00001dc0 g     F .text	000000ac read_PS2_KeyboardInput
00023830 g     O .bss	00000004 OSTCBCur
0001e520 g     F .text	00000038 exit
0001c808 g     F .text	00000074 alt_up_irda_read_data
00021820 g     O .rwdata	00000002 OSMemTblSize
00009288 g     F .text	000000c4 _fwalk_reent
0001cb00 g     F .text	000000c8 alt_up_ps2_init
0000a924 g     F .text	000001fc __mdiff
0000fda8 g     F .text	00000074 .hidden __modsi3
00000ef4 g     F .text	000000b8 resample_rgb
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00008d54 g     F .text	00000004 __sfp_lock_release
00001244 g     F .text	000006c0 VGA_display_sidebar
000139fc g     F .text	00000058 OSInit
0001a2e4 g     F .text	00000124 OSTaskQuery
0001c2fc g     F .text	00000078 alt_up_character_lcd_string
00018204 g     F .text	000000a8 OS_QInit
00014c84 g     F .text	00000054 OS_StrLen
0001c99c g     F .text	0000003c alt_up_irda_open_dev
00016e08 g     F .text	00000114 OSMemNameSet
0002183a g     O .rwdata	00000002 OSTaskProfileEn
00023834 g     O .bss	00000004 OSTime
0002f1fc g     O .bss	00000800 OSTaskIdleStk
0001e86c g     F .text	00000034 _exit
0001d418 g     F .text	0000012c alt_alarm_start
00015998 g     F .text	00000128 OSFlagNameGet
0001a8b0 g     F .text	0000005c OSTimeGet
00009428 g     F .text	000001bc __smakebuf_r
00000d64 g     F .text	000000a4 VGA_char_box
0001ccf8 g     F .text	00000068 alt_up_ps2_wait_for_ack
0000b2d8 g     F .text	00000098 strlen
0001e118 g     F .text	00000020 OSTaskSwHook
0001db88 g     F .text	00000154 open
0002f9fc g     O .bss	00000b40 OSEventTbl
000110f4 g     F .text	000000dc .hidden __gedf2
0003053c g     O .bss	00000510 OSTCBTbl
00018c0c g     F .text	00000100 OSSemSet
000237b0 g     O .bss	00000004 SEM_game_timer
000217cc g     O .rwdata	00000004 __wctomb
0000c878 g     F .text	00000018 __sprint_r
0001d794 g     F .text	00000034 alt_icache_flush_all
0001c3c4 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
00021868 g     O .rwdata	00000004 alt_priority_mask
00018434 g     F .text	00000240 OSSemDel
00023838 g     O .bss	00000004 OSFlagFreeList
00021800 g     O .rwdata	00000002 OSEventNameSize
00006c94 g     F .text	0000001c __vfprintf_internal
0002383c g     O .bss	00000001 OSStatRdy
00030a4c g     O .bss	00000054 OSTCBPrioTbl
0000f218 g     F .text	0000005c _wctomb_r
00012e7c g     F .text	000000c4 __env_lock
0001cf28 g     F .text	0000008c alt_up_ps2_read_fd
00021846 g     O .rwdata	00000002 OSTaskSwHookEn
000119dc g     F .text	000008fc .hidden __subdf3
0001c87c g     F .text	00000090 alt_up_irda_read_fd
000217b0 g     O .rwdata	00000002 text_disp
0000a358 g     F .text	000000b0 __lo0bits
0002186c g     O .rwdata	00000008 alt_alarm_list
0002180e g     O .rwdata	00000002 OSFlagWidth
0001d644 g     F .text	00000060 _do_ctors
0001d144 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000f128 g     F .text	000000c0 wcrtomb
0001257c g     F .text	000000d0 close
000237e8 g     O .bss	00000004 alt_envsem
00023840 g     O .bss	00000004 OSIdleCtrRun
00014040 g     F .text	00000020 OSVersion
00021858 g     O .rwdata	00000002 OSTmrCfgWheelSize
000128ac g     F .text	00000084 alt_load
0001a408 g     F .text	00000070 OS_TaskStkClr
00021832 g     O .rwdata	00000002 OSTaskCreateEn
00014630 g     F .text	00000068 OS_EventWaitListInit
0000e1c8 g     F .text	00000080 fputwc
0001e1b8 g     F .text	00000020 OSTaskIdleHook
00008d58 g     F .text	00000004 __sinit_lock_acquire
000237b4 g     O .bss	00000004 rgb_status
0000a0cc g     F .text	00000120 __multadd
0001a100 g     F .text	000001e4 OSTaskSuspend
0000a0a4 g     F .text	00000028 _Bfree
00014cd8 g     F .text	0000005c OS_TaskIdle
0002185e g     O .rwdata	00000002 OSTmrTblSize
000180a8 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0013a540 	call	13a54 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000f4 	movhi	r2,3
 140:	1082a804 	addi	r2,r2,2720
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000f4 	movhi	r2,3
 158:	1082a804 	addi	r2,r2,2720
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	0013aa00 	call	13aa0 <OSIntExit>
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a82817 	ldw	r2,-24416(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a82817 	ldw	r2,-24416(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     248:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     24c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     250:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     254:	d6a5ec14 	ori	gp,gp,38832
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     258:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     25c:	108dd114 	ori	r2,r2,14148

    movhi r3, %hi(__bss_end)
     260:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
     264:	18c2e814 	ori	r3,r3,2976

    beq r2, r3, 1f
     268:	10c00326 	beq	r2,r3,278 <_start+0x30>

0:
    stw zero, (r2)
     26c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     274:	10fffd36 	bltu	r2,r3,26c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     278:	00128ac0 	call	128ac <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     27c:	0012a400 	call	12a40 <alt_main>

00000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     280:	003fff06 	br	280 <alt_after_alt_main>

00000284 <Task_game_timer>:
/* ************************************************************************** */
/*                     Track Elapsed Time: Total Game Time                    */
/* ************************************************************************** */
void
Task_game_timer(void* pdata)
{
     284:	defffa04 	addi	sp,sp,-24
     288:	dfc00515 	stw	ra,20(sp)
     28c:	df000415 	stw	fp,16(sp)
     290:	df000404 	addi	fp,sp,16
     294:	e13fff15 	stw	r4,-4(fp)
  debug("Started Game Timer");
     298:	d0a00317 	ldw	r2,-32756(gp)
     29c:	10800317 	ldw	r2,12(r2)
     2a0:	01c00fc4 	movi	r7,63
     2a4:	018000b4 	movhi	r6,2
     2a8:	31ba2804 	addi	r6,r6,-5984
     2ac:	014000b4 	movhi	r5,2
     2b0:	297a2c04 	addi	r5,r5,-5968
     2b4:	1009883a 	mov	r4,r2
     2b8:	0001ea40 	call	1ea4 <fprintf>
  for (;;) {
    OSSemPend(SEM_game_timer, 0, &err);
     2bc:	d0a80017 	ldw	r2,-24576(gp)
     2c0:	d1a7fa04 	addi	r6,gp,-24600
     2c4:	000b883a 	mov	r5,zero
     2c8:	1009883a 	mov	r4,r2
     2cc:	00186740 	call	18674 <OSSemPend>
    game_ss++;
     2d0:	d0a7f017 	ldw	r2,-24640(gp)
     2d4:	10800044 	addi	r2,r2,1
     2d8:	d0a7f015 	stw	r2,-24640(gp)

    if (game_ss >= 60) {
     2dc:	d0a7f017 	ldw	r2,-24640(gp)
     2e0:	10800f10 	cmplti	r2,r2,60
     2e4:	1000041e 	bne	r2,zero,2f8 <Task_game_timer+0x74>
      game_mm++;
     2e8:	d0a7ee17 	ldw	r2,-24648(gp)
     2ec:	10800044 	addi	r2,r2,1
     2f0:	d0a7ee15 	stw	r2,-24648(gp)
      game_ss = 0;
     2f4:	d027f015 	stw	zero,-24640(gp)
    }

    if (game_mm >= 60) {
     2f8:	d0a7ee17 	ldw	r2,-24648(gp)
     2fc:	10800f10 	cmplti	r2,r2,60
     300:	1000041e 	bne	r2,zero,314 <Task_game_timer+0x90>
      game_hh++;
     304:	d0a7eb17 	ldw	r2,-24660(gp)
     308:	10800044 	addi	r2,r2,1
     30c:	d0a7eb15 	stw	r2,-24660(gp)
      game_mm = 0;
     310:	d027ee15 	stw	zero,-24648(gp)
    }

    if (game_hh >= 60)
     314:	d0a7eb17 	ldw	r2,-24660(gp)
     318:	10800f10 	cmplti	r2,r2,60
     31c:	1000011e 	bne	r2,zero,324 <Task_game_timer+0xa0>
      game_hh, game_mm, game_ss = 0, 0, 0;
     320:	d027f015 	stw	zero,-24640(gp)

    debug("GAME TIME: %02d:%02d:%02d", game_hh, game_mm, game_ss);
     324:	d0a00317 	ldw	r2,-32756(gp)
     328:	12000317 	ldw	r8,12(r2)
     32c:	d0a7eb17 	ldw	r2,-24660(gp)
     330:	d0e7ee17 	ldw	r3,-24648(gp)
     334:	d127f017 	ldw	r4,-24640(gp)
     338:	d9000215 	stw	r4,8(sp)
     33c:	d8c00115 	stw	r3,4(sp)
     340:	d8800015 	stw	r2,0(sp)
     344:	01c01444 	movi	r7,81
     348:	018000b4 	movhi	r6,2
     34c:	31ba2804 	addi	r6,r6,-5984
     350:	014000b4 	movhi	r5,2
     354:	297a3504 	addi	r5,r5,-5932
     358:	4009883a 	mov	r4,r8
     35c:	0001ea40 	call	1ea4 <fprintf>

    VGA_gametime_display(game_hh, game_mm, game_ss);
     360:	d0a7eb17 	ldw	r2,-24660(gp)
     364:	d0e7ee17 	ldw	r3,-24648(gp)
     368:	d127f017 	ldw	r4,-24640(gp)
     36c:	200d883a 	mov	r6,r4
     370:	180b883a 	mov	r5,r3
     374:	1009883a 	mov	r4,r2
     378:	00019040 	call	1904 <VGA_gametime_display>

    OSSemPost(SEM_game_timer);
     37c:	d0a80017 	ldw	r2,-24576(gp)
     380:	1009883a 	mov	r4,r2
     384:	00189ec0 	call	189ec <OSSemPost>
    OSTimeDlyHMSM(0, 0, 1, 0);
     388:	000f883a 	mov	r7,zero
     38c:	01800044 	movi	r6,1
     390:	000b883a 	mov	r5,zero
     394:	0009883a 	mov	r4,zero
     398:	001a57c0 	call	1a57c <OSTimeDlyHMSM>
  }
     39c:	003fc706 	br	2bc <Task_game_timer+0x38>

000003a0 <Task_read_KEYs>:
/* ************************************************************************** */
/*                   Detecting KEY1, KEY2, KEY3, KEY4 Press                   */
/* ************************************************************************** */
void
Task_read_KEYs(void* pdata)
{
     3a0:	defffc04 	addi	sp,sp,-16
     3a4:	dfc00315 	stw	ra,12(sp)
     3a8:	df000215 	stw	fp,8(sp)
     3ac:	df000204 	addi	fp,sp,8
     3b0:	e13fff15 	stw	r4,-4(fp)
  debug("Started: Task_read_KEYs");
     3b4:	d0a00317 	ldw	r2,-32756(gp)
     3b8:	10800317 	ldw	r2,12(r2)
     3bc:	01c01804 	movi	r7,96
     3c0:	018000b4 	movhi	r6,2
     3c4:	31ba2804 	addi	r6,r6,-5984
     3c8:	014000b4 	movhi	r5,2
     3cc:	297a3f04 	addi	r5,r5,-5892
     3d0:	1009883a 	mov	r4,r2
     3d4:	0001ea40 	call	1ea4 <fprintf>
  KEY0_flag, KEY1_flag, KEY2_flag, KEY3_flag = 0, 0, 0, 0;
     3d8:	d027fc15 	stw	zero,-24592(gp)

  for (;;) {
    OSSemPend(SEM_read_KEYs, 0, &err);
     3dc:	d0a7ec17 	ldw	r2,-24656(gp)
     3e0:	d1a7fa04 	addi	r6,gp,-24600
     3e4:	000b883a 	mov	r5,zero
     3e8:	1009883a 	mov	r4,r2
     3ec:	00186740 	call	18674 <OSSemPend>

    debug("%u: \tHello from Task_read_KEYs", OSTime);
     3f0:	d0a00317 	ldw	r2,-32756(gp)
     3f4:	10c00317 	ldw	r3,12(r2)
     3f8:	d0a82117 	ldw	r2,-24444(gp)
     3fc:	d8800015 	stw	r2,0(sp)
     400:	01c01984 	movi	r7,102
     404:	018000b4 	movhi	r6,2
     408:	31ba2804 	addi	r6,r6,-5984
     40c:	014000b4 	movhi	r5,2
     410:	297a4904 	addi	r5,r5,-5852
     414:	1809883a 	mov	r4,r3
     418:	0001ea40 	call	1ea4 <fprintf>
    Check_KEYs(&KEY0_flag, &KEY1_flag, &KEY2_flag, &KEY3_flag);
     41c:	d1e7fc04 	addi	r7,gp,-24592
     420:	d1a7ed04 	addi	r6,gp,-24652
     424:	d167f804 	addi	r5,gp,-24608
     428:	d127ff04 	addi	r4,gp,-24580
     42c:	0000a300 	call	a30 <Check_KEYs>

    if (KEY0_flag && basket_pos_x < 69) {
     430:	d0a7ff17 	ldw	r2,-24580(gp)
     434:	10001226 	beq	r2,zero,480 <Task_read_KEYs+0xe0>
     438:	d0a7f917 	ldw	r2,-24604(gp)
     43c:	10801148 	cmpgei	r2,r2,69
     440:	10000f1e 	bne	r2,zero,480 <Task_read_KEYs+0xe0>
      debug("MOVE RIGHT");
     444:	d0a00317 	ldw	r2,-32756(gp)
     448:	10800317 	ldw	r2,12(r2)
     44c:	01c01a84 	movi	r7,106
     450:	018000b4 	movhi	r6,2
     454:	31ba2804 	addi	r6,r6,-5984
     458:	014000b4 	movhi	r5,2
     45c:	297a5504 	addi	r5,r5,-5804
     460:	1009883a 	mov	r4,r2
     464:	0001ea40 	call	1ea4 <fprintf>

      VGA_clear_game_row(59);
     468:	01000ec4 	movi	r4,59
     46c:	00010440 	call	1044 <VGA_clear_game_row>
      ++basket_pos_x;
     470:	d0a7f917 	ldw	r2,-24604(gp)
     474:	10800044 	addi	r2,r2,1
     478:	d0a7f915 	stw	r2,-24604(gp)

      KEY0_flag = 0;
     47c:	d027ff15 	stw	zero,-24580(gp)
    }

    if (KEY3_flag && basket_pos_x > 0) {
     480:	d0a7fc17 	ldw	r2,-24592(gp)
     484:	10001126 	beq	r2,zero,4cc <Task_read_KEYs+0x12c>
     488:	d0a7f917 	ldw	r2,-24604(gp)
     48c:	00800f0e 	bge	zero,r2,4cc <Task_read_KEYs+0x12c>
      debug("MOVE LEFT");
     490:	d0a00317 	ldw	r2,-32756(gp)
     494:	10800317 	ldw	r2,12(r2)
     498:	01c01cc4 	movi	r7,115
     49c:	018000b4 	movhi	r6,2
     4a0:	31ba2804 	addi	r6,r6,-5984
     4a4:	014000b4 	movhi	r5,2
     4a8:	297a5c04 	addi	r5,r5,-5776
     4ac:	1009883a 	mov	r4,r2
     4b0:	0001ea40 	call	1ea4 <fprintf>

      VGA_clear_game_row(59);
     4b4:	01000ec4 	movi	r4,59
     4b8:	00010440 	call	1044 <VGA_clear_game_row>
      --basket_pos_x;
     4bc:	d0a7f917 	ldw	r2,-24604(gp)
     4c0:	10bfffc4 	addi	r2,r2,-1
     4c4:	d0a7f915 	stw	r2,-24604(gp)

      KEY3_flag = 0;
     4c8:	d027fc15 	stw	zero,-24592(gp)
    }

    OSSemPost(SEM_read_KEYs);
     4cc:	d0a7ec17 	ldw	r2,-24656(gp)
     4d0:	1009883a 	mov	r4,r2
     4d4:	00189ec0 	call	189ec <OSSemPost>
    OSTimeDly(1);
     4d8:	01000044 	movi	r4,1
     4dc:	001a4780 	call	1a478 <OSTimeDly>
  }
     4e0:	003fbe06 	br	3dc <Task_read_KEYs+0x3c>

000004e4 <Task_VGA_init>:
}

/* Initial Display Setup */
static void
Task_VGA_init(void)
{
     4e4:	defffe04 	addi	sp,sp,-8
     4e8:	dfc00115 	stw	ra,4(sp)
     4ec:	df000015 	stw	fp,0(sp)
     4f0:	d839883a 	mov	fp,sp
  debug("Initializing VGA Display");
     4f4:	d0a00317 	ldw	r2,-32756(gp)
     4f8:	10800317 	ldw	r2,12(r2)
     4fc:	01c02104 	movi	r7,132
     500:	018000b4 	movhi	r6,2
     504:	31ba2804 	addi	r6,r6,-5984
     508:	014000b4 	movhi	r5,2
     50c:	297a6204 	addi	r5,r5,-5752
     510:	1009883a 	mov	r4,r2
     514:	0001ea40 	call	1ea4 <fprintf>

  VGA_clear_screen();
     518:	0000fac0 	call	fac <VGA_clear_screen>
  VGA_display_sidebar(background_color);
     51c:	d0a7ea0b 	ldhu	r2,-24664(gp)
     520:	10bfffcc 	andi	r2,r2,65535
     524:	10a0001c 	xori	r2,r2,32768
     528:	10a00004 	addi	r2,r2,-32768
     52c:	1009883a 	mov	r4,r2
     530:	00012440 	call	1244 <VGA_display_sidebar>
}
     534:	0001883a 	nop
     538:	e037883a 	mov	sp,fp
     53c:	dfc00117 	ldw	ra,4(sp)
     540:	df000017 	ldw	fp,0(sp)
     544:	dec00204 	addi	sp,sp,8
     548:	f800283a 	ret

0000054c <Task_VGA_char>:

/* Display Character using VGA Output */
void
Task_VGA_char(void* pdata)
{
     54c:	defffa04 	addi	sp,sp,-24
     550:	dfc00515 	stw	ra,20(sp)
     554:	df000415 	stw	fp,16(sp)
     558:	df000404 	addi	fp,sp,16
     55c:	e13fff15 	stw	r4,-4(fp)
  debug("Started: Task_VGA_char");
     560:	d0a00317 	ldw	r2,-32756(gp)
     564:	10800317 	ldw	r2,12(r2)
     568:	01c02384 	movi	r7,142
     56c:	018000b4 	movhi	r6,2
     570:	31ba2804 	addi	r6,r6,-5984
     574:	014000b4 	movhi	r5,2
     578:	297a6c04 	addi	r5,r5,-5712
     57c:	1009883a 	mov	r4,r2
     580:	0001ea40 	call	1ea4 <fprintf>

  for (;;) {
    debug("%u:Basket Position (pos1_x, pos1_y) = (%d, %d)",
     584:	d0a00317 	ldw	r2,-32756(gp)
     588:	12000317 	ldw	r8,12(r2)
     58c:	d0a82117 	ldw	r2,-24444(gp)
     590:	d0e7f917 	ldw	r3,-24604(gp)
     594:	d127e517 	ldw	r4,-24684(gp)
     598:	d9000215 	stw	r4,8(sp)
     59c:	d8c00115 	stw	r3,4(sp)
     5a0:	d8800015 	stw	r2,0(sp)
     5a4:	01c02504 	movi	r7,148
     5a8:	018000b4 	movhi	r6,2
     5ac:	31ba2804 	addi	r6,r6,-5984
     5b0:	014000b4 	movhi	r5,2
     5b4:	297a7604 	addi	r5,r5,-5672
     5b8:	4009883a 	mov	r4,r8
     5bc:	0001ea40 	call	1ea4 <fprintf>
          OSTime,
          basket_pos_x,
          basket_pos_y);

    VGA_animated_char(basket_pos_x, 59, "U", basket_color);
     5c0:	d0a7f917 	ldw	r2,-24604(gp)
     5c4:	d0e7f60b 	ldhu	r3,-24616(gp)
     5c8:	18ffffcc 	andi	r3,r3,65535
     5cc:	18e0001c 	xori	r3,r3,32768
     5d0:	18e00004 	addi	r3,r3,-32768
     5d4:	180f883a 	mov	r7,r3
     5d8:	018000b4 	movhi	r6,2
     5dc:	31ba8604 	addi	r6,r6,-5608
     5e0:	01400ec4 	movi	r5,59
     5e4:	1009883a 	mov	r4,r2
     5e8:	0000e080 	call	e08 <VGA_animated_char>

    OSTimeDly(1);
     5ec:	01000044 	movi	r4,1
     5f0:	001a4780 	call	1a478 <OSTimeDly>
  }
     5f4:	003fe306 	br	584 <Task_VGA_char+0x38>

000005f8 <Task_read_PS2_Keyboard>:
/*                    Reads PS2 Keyboard input periodically                   */
/* ************************************************************************** */

void
Task_read_PS2_Keyboard(void* pdata)
{
     5f8:	defffd04 	addi	sp,sp,-12
     5fc:	dfc00215 	stw	ra,8(sp)
     600:	df000115 	stw	fp,4(sp)
     604:	df000104 	addi	fp,sp,4
     608:	e13fff15 	stw	r4,-4(fp)
  debug("Started: Read PS2 Keyboard Task");
     60c:	d0a00317 	ldw	r2,-32756(gp)
     610:	10800317 	ldw	r2,12(r2)
     614:	01c028c4 	movi	r7,163
     618:	018000b4 	movhi	r6,2
     61c:	31ba2804 	addi	r6,r6,-5984
     620:	014000b4 	movhi	r5,2
     624:	297a8704 	addi	r5,r5,-5604
     628:	1009883a 	mov	r4,r2
     62c:	0001ea40 	call	1ea4 <fprintf>

  for (;;) {
    debug("Reading PS2 Input");
     630:	d0a00317 	ldw	r2,-32756(gp)
     634:	10800317 	ldw	r2,12(r2)
     638:	01c02984 	movi	r7,166
     63c:	018000b4 	movhi	r6,2
     640:	31ba2804 	addi	r6,r6,-5984
     644:	014000b4 	movhi	r5,2
     648:	297a9304 	addi	r5,r5,-5556
     64c:	1009883a 	mov	r4,r2
     650:	0001ea40 	call	1ea4 <fprintf>
    read_PS2_KeyboardInput();
     654:	0001dc00 	call	1dc0 <read_PS2_KeyboardInput>

    OSTimeDly(1);
     658:	01000044 	movi	r4,1
     65c:	001a4780 	call	1a478 <OSTimeDly>
  }
     660:	003ff306 	br	630 <Task_read_PS2_Keyboard+0x38>

00000664 <Task_falling_blocks>:
}

void
Task_falling_blocks(void* pdata)
{
     664:	defff904 	addi	sp,sp,-28
     668:	dfc00615 	stw	ra,24(sp)
     66c:	df000515 	stw	fp,20(sp)
     670:	df000504 	addi	fp,sp,20
     674:	e13fff15 	stw	r4,-4(fp)
  debug("Started: Falling Block");
     678:	d0a00317 	ldw	r2,-32756(gp)
     67c:	10800317 	ldw	r2,12(r2)
     680:	01c02c04 	movi	r7,176
     684:	018000b4 	movhi	r6,2
     688:	31ba2804 	addi	r6,r6,-5984
     68c:	014000b4 	movhi	r5,2
     690:	297a9b04 	addi	r5,r5,-5524
     694:	1009883a 	mov	r4,r2
     698:	0001ea40 	call	1ea4 <fprintf>

  for (;;) {
    debug("Falling block: pos: (%d, %d)", pos1_x, pos1_y);
     69c:	d0a00317 	ldw	r2,-32756(gp)
     6a0:	11000317 	ldw	r4,12(r2)
     6a4:	d0a7e717 	ldw	r2,-24676(gp)
     6a8:	d0e7fb17 	ldw	r3,-24596(gp)
     6ac:	d8c00115 	stw	r3,4(sp)
     6b0:	d8800015 	stw	r2,0(sp)
     6b4:	01c02cc4 	movi	r7,179
     6b8:	018000b4 	movhi	r6,2
     6bc:	31ba2804 	addi	r6,r6,-5984
     6c0:	014000b4 	movhi	r5,2
     6c4:	297aa504 	addi	r5,r5,-5484
     6c8:	0001ea40 	call	1ea4 <fprintf>

    if (pos1_y >= 60) {
     6cc:	d0a7fb17 	ldw	r2,-24596(gp)
     6d0:	10800f10 	cmplti	r2,r2,60
     6d4:	1000101e 	bne	r2,zero,718 <Task_falling_blocks+0xb4>
      int lower = 0;
     6d8:	e03ffd15 	stw	zero,-12(fp)
      int upper = 69;
     6dc:	00801144 	movi	r2,69
     6e0:	e0bffe15 	stw	r2,-8(fp)

      pos1_x = (rand() % (upper - lower + 1)) + lower;
     6e4:	00020280 	call	2028 <rand>
     6e8:	1007883a 	mov	r3,r2
     6ec:	e13ffe17 	ldw	r4,-8(fp)
     6f0:	e0bffd17 	ldw	r2,-12(fp)
     6f4:	2085c83a 	sub	r2,r4,r2
     6f8:	10800044 	addi	r2,r2,1
     6fc:	1889283a 	div	r4,r3,r2
     700:	2085383a 	mul	r2,r4,r2
     704:	1887c83a 	sub	r3,r3,r2
     708:	e0bffd17 	ldw	r2,-12(fp)
     70c:	1885883a 	add	r2,r3,r2
     710:	d0a7e715 	stw	r2,-24676(gp)
      pos1_y = 0;
     714:	d027fb15 	stw	zero,-24596(gp)
    }

    VGA_clear_game_row(pos1_y);
     718:	d0a7fb17 	ldw	r2,-24596(gp)
     71c:	1009883a 	mov	r4,r2
     720:	00010440 	call	1044 <VGA_clear_game_row>
    pos1_y++;
     724:	d0a7fb17 	ldw	r2,-24596(gp)
     728:	10800044 	addi	r2,r2,1
     72c:	d0a7fb15 	stw	r2,-24596(gp)

    VGA_animated_char(pos1_x, pos1_y, text_disp, background_color);
     730:	d0a7e717 	ldw	r2,-24676(gp)
     734:	d0e7fb17 	ldw	r3,-24596(gp)
     738:	d127ea0b 	ldhu	r4,-24664(gp)
     73c:	213fffcc 	andi	r4,r4,65535
     740:	2120001c 	xori	r4,r4,32768
     744:	21200004 	addi	r4,r4,-32768
     748:	200f883a 	mov	r7,r4
     74c:	d1a00004 	addi	r6,gp,-32768
     750:	180b883a 	mov	r5,r3
     754:	1009883a 	mov	r4,r2
     758:	0000e080 	call	e08 <VGA_animated_char>

    if (pos1_y == 59 && basket_pos_x == pos1_x){
     75c:	d0a7fb17 	ldw	r2,-24596(gp)
     760:	10800ed8 	cmpnei	r2,r2,59
     764:	1000091e 	bne	r2,zero,78c <Task_falling_blocks+0x128>
     768:	d0e7f917 	ldw	r3,-24604(gp)
     76c:	d0a7e717 	ldw	r2,-24676(gp)
     770:	1880061e 	bne	r3,r2,78c <Task_falling_blocks+0x128>
      score++;
     774:	d0a7f317 	ldw	r2,-24628(gp)
     778:	10800044 	addi	r2,r2,1
     77c:	d0a7f315 	stw	r2,-24628(gp)
      VGA_display_score(score);
     780:	d0a7f317 	ldw	r2,-24628(gp)
     784:	1009883a 	mov	r4,r2
     788:	0001ac00 	call	1ac0 <VGA_display_score>
    }

    debug("SCORE: %d", score);
     78c:	d0a00317 	ldw	r2,-32756(gp)
     790:	10c00317 	ldw	r3,12(r2)
     794:	d0a7f317 	ldw	r2,-24628(gp)
     798:	d8800015 	stw	r2,0(sp)
     79c:	01c031c4 	movi	r7,199
     7a0:	018000b4 	movhi	r6,2
     7a4:	31ba2804 	addi	r6,r6,-5984
     7a8:	014000b4 	movhi	r5,2
     7ac:	297ab004 	addi	r5,r5,-5440
     7b0:	1809883a 	mov	r4,r3
     7b4:	0001ea40 	call	1ea4 <fprintf>

    OSTimeDly(1);
     7b8:	01000044 	movi	r4,1
     7bc:	001a4780 	call	1a478 <OSTimeDly>
  }
     7c0:	003fb606 	br	69c <Task_falling_blocks+0x38>

000007c4 <main>:
}

/* The main function creates two task and starts multi-tasking */
int
main(void)
{
     7c4:	defff804 	addi	sp,sp,-32
     7c8:	dfc00715 	stw	ra,28(sp)
     7cc:	df000615 	stw	fp,24(sp)
     7d0:	df000604 	addi	fp,sp,24

  /* ***************************** Initialization *****************************
   */

  score = 0;
     7d4:	d027f315 	stw	zero,-24628(gp)
  game_hh, game_mm, game_ss = 0, 0, 0;
     7d8:	d027f015 	stw	zero,-24640(gp)

  KEY0_flag, KEY1_flag, KEY2_flag, KEY3_flag = 0, 0, 0, 0;
     7dc:	d027fc15 	stw	zero,-24592(gp)

  /* ************************ Semaphores Initialization ***********************
   */

  SEM_read_KEYs = OSSemCreate(1);
     7e0:	01000044 	movi	r4,1
     7e4:	001835c0 	call	1835c <OSSemCreate>
     7e8:	d0a7ec15 	stw	r2,-24656(gp)
  SEM_game_timer = OSSemCreate(1);
     7ec:	01000044 	movi	r4,1
     7f0:	001835c0 	call	1835c <OSSemCreate>
     7f4:	d0a80015 	stw	r2,-24576(gp)

  /* **************************** VGA Display Setup ***************************
   */

  video_resolution = (int*)(PIXEL_BUF_CTRL_BASE + 0x8);
     7f8:	00bfc834 	movhi	r2,65312
     7fc:	108c0a04 	addi	r2,r2,12328
     800:	d0a7e615 	stw	r2,-24680(gp)
  rgb_status = (int*)(RGB_RESAMPLER_BASE);
     804:	00bfc834 	movhi	r2,65312
     808:	108c0404 	addi	r2,r2,12304
     80c:	d0a80115 	stw	r2,-24572(gp)

  screen_x = *video_resolution & 0xFFFF;
     810:	d0a7e617 	ldw	r2,-24680(gp)
     814:	10800017 	ldw	r2,0(r2)
     818:	10bfffcc 	andi	r2,r2,65535
     81c:	d0a7e915 	stw	r2,-24668(gp)
  screen_y = (*video_resolution >> 16) & 0xFFFF;
     820:	d0a7e617 	ldw	r2,-24680(gp)
     824:	10800017 	ldw	r2,0(r2)
     828:	1004d43a 	srli	r2,r2,16
     82c:	d0a7f715 	stw	r2,-24612(gp)

  /* initially basket positioned at the center of screen */
  basket_pos_x = 40;
     830:	00800a04 	movi	r2,40
     834:	d0a7f915 	stw	r2,-24604(gp)

  /* letter initially positioned at the center of screen */
  pos1_x = 40;
     838:	00800a04 	movi	r2,40
     83c:	d0a7e715 	stw	r2,-24676(gp)
  pos1_y = 0;
     840:	d027fb15 	stw	zero,-24596(gp)

  int db = get_data_bits(*rgb_status & 0x3F);
     844:	d0a80117 	ldw	r2,-24572(gp)
     848:	10800017 	ldw	r2,0(r2)
     84c:	10800fcc 	andi	r2,r2,63
     850:	1009883a 	mov	r4,r2
     854:	00010b40 	call	10b4 <get_data_bits>
     858:	e0bfff15 	stw	r2,-4(fp)

  /* check if resolution is smaller than the standard 320 x 240 */
  res_offset = (screen_x == 160) ? 1 : 0;
     85c:	d0a7e917 	ldw	r2,-24668(gp)
     860:	10802820 	cmpeqi	r2,r2,160
     864:	10803fcc 	andi	r2,r2,255
     868:	d0a7f515 	stw	r2,-24620(gp)

  /* check if number of data bits is less than the standard 16-bits */
  col_offset = (db == 8) ? 1 : 0;
     86c:	e0bfff17 	ldw	r2,-4(fp)
     870:	10800220 	cmpeqi	r2,r2,8
     874:	10803fcc 	andi	r2,r2,255
     878:	d0a7ef15 	stw	r2,-24644(gp)

  /* update color */
  background_color = resample_rgb(db, INTEL_RED);
     87c:	01403db4 	movhi	r5,246
     880:	294a46c4 	addi	r5,r5,10523
     884:	e13fff17 	ldw	r4,-4(fp)
     888:	0000ef40 	call	ef4 <resample_rgb>
     88c:	d0a7ea0d 	sth	r2,-24664(gp)
  basket_color = resample_rgb(db, INTEL_LIGHT_YELLOW);
     890:	01440034 	movhi	r5,4096
     894:	297f3304 	addi	r5,r5,-820
     898:	e13fff17 	ldw	r4,-4(fp)
     89c:	0000ef40 	call	ef4 <resample_rgb>
     8a0:	d0a7f60d 	sth	r2,-24616(gp)

  VGA_animated_char(pos1_x, pos1_y, text_disp, background_color);
     8a4:	d0a7e717 	ldw	r2,-24676(gp)
     8a8:	d0e7fb17 	ldw	r3,-24596(gp)
     8ac:	d127ea0b 	ldhu	r4,-24664(gp)
     8b0:	213fffcc 	andi	r4,r4,65535
     8b4:	2120001c 	xori	r4,r4,32768
     8b8:	21200004 	addi	r4,r4,-32768
     8bc:	200f883a 	mov	r7,r4
     8c0:	d1a00004 	addi	r6,gp,-32768
     8c4:	180b883a 	mov	r5,r3
     8c8:	1009883a 	mov	r4,r2
     8cc:	0000e080 	call	e08 <VGA_animated_char>

  /* **************************************************************************
   */

  Task_VGA_init(); /* Initial Display Layout Setup */
     8d0:	00004e40 	call	4e4 <Task_VGA_init>

  OSTaskCreateExt(Task_game_timer,
     8d4:	d8000415 	stw	zero,16(sp)
     8d8:	d8000315 	stw	zero,12(sp)
     8dc:	00820004 	movi	r2,2048
     8e0:	d8800215 	stw	r2,8(sp)
     8e4:	008000f4 	movhi	r2,3
     8e8:	10ae1f04 	addi	r2,r2,-18308
     8ec:	d8800115 	stw	r2,4(sp)
     8f0:	00800144 	movi	r2,5
     8f4:	d8800015 	stw	r2,0(sp)
     8f8:	01c00144 	movi	r7,5
     8fc:	018000f4 	movhi	r6,3
     900:	31b61e04 	addi	r6,r6,-10120
     904:	000b883a 	mov	r5,zero
     908:	01000034 	movhi	r4,0
     90c:	2100a104 	addi	r4,r4,644
     910:	00193a80 	call	193a8 <OSTaskCreateExt>
                  task_game_timer_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(Task_read_PS2_Keyboard,
     914:	d8000415 	stw	zero,16(sp)
     918:	d8000315 	stw	zero,12(sp)
     91c:	00820004 	movi	r2,2048
     920:	d8800215 	stw	r2,8(sp)
     924:	008000f4 	movhi	r2,3
     928:	10a61f04 	addi	r2,r2,-26500
     92c:	d8800115 	stw	r2,4(sp)
     930:	00800184 	movi	r2,6
     934:	d8800015 	stw	r2,0(sp)
     938:	01c00184 	movi	r7,6
     93c:	018000f4 	movhi	r6,3
     940:	31ae1e04 	addi	r6,r6,-18312
     944:	000b883a 	mov	r5,zero
     948:	01000034 	movhi	r4,0
     94c:	21017e04 	addi	r4,r4,1528
     950:	00193a80 	call	193a8 <OSTaskCreateExt>
                  task_ps2_keyboard_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(Task_read_KEYs,
     954:	d8000415 	stw	zero,16(sp)
     958:	d8000315 	stw	zero,12(sp)
     95c:	00820004 	movi	r2,2048
     960:	d8800215 	stw	r2,8(sp)
     964:	008000b4 	movhi	r2,2
     968:	108e1f04 	addi	r2,r2,14460
     96c:	d8800115 	stw	r2,4(sp)
     970:	00800044 	movi	r2,1
     974:	d8800015 	stw	r2,0(sp)
     978:	01c00044 	movi	r7,1
     97c:	018000b4 	movhi	r6,2
     980:	31961e04 	addi	r6,r6,22648
     984:	000b883a 	mov	r5,zero
     988:	01000034 	movhi	r4,0
     98c:	2100e804 	addi	r4,r4,928
     990:	00193a80 	call	193a8 <OSTaskCreateExt>
                  task_key_press_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(Task_VGA_char,
     994:	d8000415 	stw	zero,16(sp)
     998:	d8000315 	stw	zero,12(sp)
     99c:	00820004 	movi	r2,2048
     9a0:	d8800215 	stw	r2,8(sp)
     9a4:	008000b4 	movhi	r2,2
     9a8:	10961f04 	addi	r2,r2,22652
     9ac:	d8800115 	stw	r2,4(sp)
     9b0:	008000c4 	movi	r2,3
     9b4:	d8800015 	stw	r2,0(sp)
     9b8:	01c000c4 	movi	r7,3
     9bc:	018000b4 	movhi	r6,2
     9c0:	319e1e04 	addi	r6,r6,30840
     9c4:	000b883a 	mov	r5,zero
     9c8:	01000034 	movhi	r4,0
     9cc:	21015304 	addi	r4,r4,1356
     9d0:	00193a80 	call	193a8 <OSTaskCreateExt>
                  task_disp_vga_char_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(Task_falling_blocks,
     9d4:	d8000415 	stw	zero,16(sp)
     9d8:	d8000315 	stw	zero,12(sp)
     9dc:	00820004 	movi	r2,2048
     9e0:	d8800215 	stw	r2,8(sp)
     9e4:	008000b4 	movhi	r2,2
     9e8:	109e1f04 	addi	r2,r2,30844
     9ec:	d8800115 	stw	r2,4(sp)
     9f0:	00800084 	movi	r2,2
     9f4:	d8800015 	stw	r2,0(sp)
     9f8:	01c00084 	movi	r7,2
     9fc:	018000f4 	movhi	r6,3
     a00:	31a61e04 	addi	r6,r6,-26504
     a04:	000b883a 	mov	r5,zero
     a08:	01000034 	movhi	r4,0
     a0c:	21019904 	addi	r4,r4,1636
     a10:	00193a80 	call	193a8 <OSTaskCreateExt>
                  task_falling_blocks,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSStart();
     a14:	0013d000 	call	13d00 <OSStart>
  return 0;
     a18:	0005883a 	mov	r2,zero
}
     a1c:	e037883a 	mov	sp,fp
     a20:	dfc00117 	ldw	ra,4(sp)
     a24:	df000017 	ldw	fp,0(sp)
     a28:	dec00204 	addi	sp,sp,8
     a2c:	f800283a 	ret

00000a30 <Check_KEYs>:
extern unsigned KEY_val;
extern int KEY0_flag, KEY1_flag, KEY2_flag, KEY3_flag;

void
Check_KEYs(int* KEY0_ptr, int* KEY1_ptr, int* KEY2_ptr, int* KEY3_ptr)
{
     a30:	defff904 	addi	sp,sp,-28
     a34:	dfc00615 	stw	ra,24(sp)
     a38:	df000515 	stw	fp,20(sp)
     a3c:	df000504 	addi	fp,sp,20
     a40:	e13ffc15 	stw	r4,-16(fp)
     a44:	e17ffd15 	stw	r5,-12(fp)
     a48:	e1bffe15 	stw	r6,-8(fp)
     a4c:	e1ffff15 	stw	r7,-4(fp)

  KEY_val = *(KEY_ptr);
     a50:	00bfc834 	movhi	r2,65312
     a54:	10801404 	addi	r2,r2,80
     a58:	10800017 	ldw	r2,0(r2)
     a5c:	d0a7f215 	stw	r2,-24632(gp)

  if (KEY_val == KEY0) {
     a60:	d0a7f217 	ldw	r2,-24632(gp)
     a64:	10800058 	cmpnei	r2,r2,1
     a68:	10000c1e 	bne	r2,zero,a9c <Check_KEYs+0x6c>
    debug("KEY0 Pressed!"); // check KEY0
     a6c:	d0a00317 	ldw	r2,-32756(gp)
     a70:	10800317 	ldw	r2,12(r2)
     a74:	01c00544 	movi	r7,21
     a78:	018000b4 	movhi	r6,2
     a7c:	31bab604 	addi	r6,r6,-5416
     a80:	014000b4 	movhi	r5,2
     a84:	297ab804 	addi	r5,r5,-5408
     a88:	1009883a 	mov	r4,r2
     a8c:	0001ea40 	call	1ea4 <fprintf>
    KEY0_flag = 1;
     a90:	00800044 	movi	r2,1
     a94:	d0a7ff15 	stw	r2,-24580(gp)
     a98:	00002c06 	br	b4c <Check_KEYs+0x11c>
  } else if (KEY_val == KEY1) // check KEY1
     a9c:	d0a7f217 	ldw	r2,-24632(gp)
     aa0:	10800098 	cmpnei	r2,r2,2
     aa4:	10000c1e 	bne	r2,zero,ad8 <Check_KEYs+0xa8>
  {
    debug("KEY1 Pressed!");
     aa8:	d0a00317 	ldw	r2,-32756(gp)
     aac:	10800317 	ldw	r2,12(r2)
     ab0:	01c00644 	movi	r7,25
     ab4:	018000b4 	movhi	r6,2
     ab8:	31bab604 	addi	r6,r6,-5416
     abc:	014000b4 	movhi	r5,2
     ac0:	297abf04 	addi	r5,r5,-5380
     ac4:	1009883a 	mov	r4,r2
     ac8:	0001ea40 	call	1ea4 <fprintf>
    KEY1_flag = 1;
     acc:	00800044 	movi	r2,1
     ad0:	d0a7f815 	stw	r2,-24608(gp)
     ad4:	00001d06 	br	b4c <Check_KEYs+0x11c>
  } else if (KEY_val == KEY2) // check KEY2
     ad8:	d0a7f217 	ldw	r2,-24632(gp)
     adc:	10800118 	cmpnei	r2,r2,4
     ae0:	10000c1e 	bne	r2,zero,b14 <Check_KEYs+0xe4>
  {
    debug("KEY2 Pressed!");
     ae4:	d0a00317 	ldw	r2,-32756(gp)
     ae8:	10800317 	ldw	r2,12(r2)
     aec:	01c00744 	movi	r7,29
     af0:	018000b4 	movhi	r6,2
     af4:	31bab604 	addi	r6,r6,-5416
     af8:	014000b4 	movhi	r5,2
     afc:	297ac604 	addi	r5,r5,-5352
     b00:	1009883a 	mov	r4,r2
     b04:	0001ea40 	call	1ea4 <fprintf>
    KEY2_flag = 1;
     b08:	00800044 	movi	r2,1
     b0c:	d0a7ed15 	stw	r2,-24652(gp)
     b10:	00000e06 	br	b4c <Check_KEYs+0x11c>
  } else if (KEY_val == KEY3) // check KEY3
     b14:	d0a7f217 	ldw	r2,-24632(gp)
     b18:	10800218 	cmpnei	r2,r2,8
     b1c:	10000b1e 	bne	r2,zero,b4c <Check_KEYs+0x11c>
  {
    debug("KEY3 Pressed!");
     b20:	d0a00317 	ldw	r2,-32756(gp)
     b24:	10800317 	ldw	r2,12(r2)
     b28:	01c00844 	movi	r7,33
     b2c:	018000b4 	movhi	r6,2
     b30:	31bab604 	addi	r6,r6,-5416
     b34:	014000b4 	movhi	r5,2
     b38:	297acd04 	addi	r5,r5,-5324
     b3c:	1009883a 	mov	r4,r2
     b40:	0001ea40 	call	1ea4 <fprintf>
    KEY3_flag = 1;
     b44:	00800044 	movi	r2,1
     b48:	d0a7fc15 	stw	r2,-24592(gp)
  }

  if (KEY_val)
     b4c:	d0a7f217 	ldw	r2,-24632(gp)
     b50:	10000b26 	beq	r2,zero,b80 <Check_KEYs+0x150>
    debug("KEY_value: %d", KEY_val);
     b54:	d0a00317 	ldw	r2,-32756(gp)
     b58:	10c00317 	ldw	r3,12(r2)
     b5c:	d0a7f217 	ldw	r2,-24632(gp)
     b60:	d8800015 	stw	r2,0(sp)
     b64:	01c00984 	movi	r7,38
     b68:	018000b4 	movhi	r6,2
     b6c:	31bab604 	addi	r6,r6,-5416
     b70:	014000b4 	movhi	r5,2
     b74:	297ad404 	addi	r5,r5,-5296
     b78:	1809883a 	mov	r4,r3
     b7c:	0001ea40 	call	1ea4 <fprintf>
}
     b80:	0001883a 	nop
     b84:	e037883a 	mov	sp,fp
     b88:	dfc00117 	ldw	ra,4(sp)
     b8c:	df000017 	ldw	fp,0(sp)
     b90:	dec00204 	addi	sp,sp,8
     b94:	f800283a 	ret

00000b98 <VGA_text>:
/*******************************************************************************
 * Subroutine to send a string of text to the video monitor
 ******************************************************************************/
void
VGA_text(int x, int y, char* text_ptr)
{
     b98:	defffa04 	addi	sp,sp,-24
     b9c:	df000515 	stw	fp,20(sp)
     ba0:	df000504 	addi	fp,sp,20
     ba4:	e13ffd15 	stw	r4,-12(fp)
     ba8:	e17ffe15 	stw	r5,-8(fp)
     bac:	e1bfff15 	stw	r6,-4(fp)
  int offset;
  volatile char* char_buf = (char*)FPGA_CHAR_BASE; // video character buffer
     bb0:	00824034 	movhi	r2,2304
     bb4:	e0bffc15 	stw	r2,-16(fp)

  /* assume that the text string fits on one line */
  offset = (y << 7) + x;
     bb8:	e0bffe17 	ldw	r2,-8(fp)
     bbc:	100691fa 	slli	r3,r2,7
     bc0:	e0bffd17 	ldw	r2,-12(fp)
     bc4:	1885883a 	add	r2,r3,r2
     bc8:	e0bffb15 	stw	r2,-20(fp)
  while (*(text_ptr)) {
     bcc:	00000c06 	br	c00 <VGA_text+0x68>
    *(char_buf + offset) = *(text_ptr); // write to the character buffer
     bd0:	e0bffb17 	ldw	r2,-20(fp)
     bd4:	e0fffc17 	ldw	r3,-16(fp)
     bd8:	1885883a 	add	r2,r3,r2
     bdc:	e0ffff17 	ldw	r3,-4(fp)
     be0:	18c00003 	ldbu	r3,0(r3)
     be4:	10c00005 	stb	r3,0(r2)
    ++text_ptr;
     be8:	e0bfff17 	ldw	r2,-4(fp)
     bec:	10800044 	addi	r2,r2,1
     bf0:	e0bfff15 	stw	r2,-4(fp)
    ++offset;
     bf4:	e0bffb17 	ldw	r2,-20(fp)
     bf8:	10800044 	addi	r2,r2,1
     bfc:	e0bffb15 	stw	r2,-20(fp)
  int offset;
  volatile char* char_buf = (char*)FPGA_CHAR_BASE; // video character buffer

  /* assume that the text string fits on one line */
  offset = (y << 7) + x;
  while (*(text_ptr)) {
     c00:	e0bfff17 	ldw	r2,-4(fp)
     c04:	10800003 	ldbu	r2,0(r2)
     c08:	10803fcc 	andi	r2,r2,255
     c0c:	1080201c 	xori	r2,r2,128
     c10:	10bfe004 	addi	r2,r2,-128
     c14:	103fee1e 	bne	r2,zero,bd0 <VGA_text+0x38>
    *(char_buf + offset) = *(text_ptr); // write to the character buffer
    ++text_ptr;
    ++offset;
  }
}
     c18:	0001883a 	nop
     c1c:	e037883a 	mov	sp,fp
     c20:	df000017 	ldw	fp,0(sp)
     c24:	dec00104 	addi	sp,sp,4
     c28:	f800283a 	ret

00000c2c <VGA_box>:
/*        Takes in points assuming 320x240 resolution and adjusts based on    */
/*        differences in resolution and color bits.                           */
/* ************************************************************************** */
void
VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
     c2c:	defff404 	addi	sp,sp,-48
     c30:	df000b15 	stw	fp,44(sp)
     c34:	df000b04 	addi	fp,sp,44
     c38:	e13ffb15 	stw	r4,-20(fp)
     c3c:	e17ffc15 	stw	r5,-16(fp)
     c40:	e1bffd15 	stw	r6,-12(fp)
     c44:	e1fffe15 	stw	r7,-8(fp)
     c48:	e0800117 	ldw	r2,4(fp)
     c4c:	e0bfff0d 	sth	r2,-4(fp)
  int pixel_buf_ptr = *(int*)PIXEL_BUF_CTRL_BASE;
     c50:	00bfc834 	movhi	r2,65312
     c54:	108c0804 	addi	r2,r2,12320
     c58:	10800017 	ldw	r2,0(r2)
     c5c:	e0bff715 	stw	r2,-36(fp)
  int pixel_ptr, row, col;

  int x_factor = 0x1 << (res_offset + col_offset);
     c60:	d0e7f517 	ldw	r3,-24620(gp)
     c64:	d0a7ef17 	ldw	r2,-24644(gp)
     c68:	1885883a 	add	r2,r3,r2
     c6c:	00c00044 	movi	r3,1
     c70:	1884983a 	sll	r2,r3,r2
     c74:	e0bff815 	stw	r2,-32(fp)
  int y_factor = 0x1 << (res_offset);
     c78:	d0a7f517 	ldw	r2,-24620(gp)
     c7c:	00c00044 	movi	r3,1
     c80:	1884983a 	sll	r2,r3,r2
     c84:	e0bff915 	stw	r2,-28(fp)

  x1 = x1 / x_factor;
     c88:	e0fffb17 	ldw	r3,-20(fp)
     c8c:	e0bff817 	ldw	r2,-32(fp)
     c90:	1885283a 	div	r2,r3,r2
     c94:	e0bffb15 	stw	r2,-20(fp)
  x2 = x2 / x_factor;
     c98:	e0fffd17 	ldw	r3,-12(fp)
     c9c:	e0bff817 	ldw	r2,-32(fp)
     ca0:	1885283a 	div	r2,r3,r2
     ca4:	e0bffd15 	stw	r2,-12(fp)
  y1 = y1 / y_factor;
     ca8:	e0fffc17 	ldw	r3,-16(fp)
     cac:	e0bff917 	ldw	r2,-28(fp)
     cb0:	1885283a 	div	r2,r3,r2
     cb4:	e0bffc15 	stw	r2,-16(fp)
  y2 = y2 / y_factor;
     cb8:	e0fffe17 	ldw	r3,-8(fp)
     cbc:	e0bff917 	ldw	r2,-28(fp)
     cc0:	1885283a 	div	r2,r3,r2
     cc4:	e0bffe15 	stw	r2,-8(fp)

  /* assume that the box coordinates are valid */
  for (row = y1; row <= y2; row++)
     cc8:	e0bffc17 	ldw	r2,-16(fp)
     ccc:	e0bff515 	stw	r2,-44(fp)
     cd0:	00001c06 	br	d44 <VGA_box+0x118>
    for (col = x1; col <= x2; ++col) {
     cd4:	e0bffb17 	ldw	r2,-20(fp)
     cd8:	e0bff615 	stw	r2,-40(fp)
     cdc:	00001306 	br	d2c <VGA_box+0x100>
      pixel_ptr =
        pixel_buf_ptr + (row << (10 - res_offset - col_offset)) + (col << 1);
     ce0:	d0a7f517 	ldw	r2,-24620(gp)
     ce4:	00c00284 	movi	r3,10
     ce8:	1887c83a 	sub	r3,r3,r2
     cec:	d0a7ef17 	ldw	r2,-24644(gp)
     cf0:	1885c83a 	sub	r2,r3,r2
     cf4:	e0fff517 	ldw	r3,-44(fp)
     cf8:	1886983a 	sll	r3,r3,r2
     cfc:	e0bff717 	ldw	r2,-36(fp)
     d00:	1887883a 	add	r3,r3,r2
     d04:	e0bff617 	ldw	r2,-40(fp)
     d08:	1085883a 	add	r2,r2,r2
  y2 = y2 / y_factor;

  /* assume that the box coordinates are valid */
  for (row = y1; row <= y2; row++)
    for (col = x1; col <= x2; ++col) {
      pixel_ptr =
     d0c:	1885883a 	add	r2,r3,r2
     d10:	e0bffa15 	stw	r2,-24(fp)
        pixel_buf_ptr + (row << (10 - res_offset - col_offset)) + (col << 1);
      *(short*)pixel_ptr = pixel_color; // set pixel color
     d14:	e0bffa17 	ldw	r2,-24(fp)
     d18:	e0ffff0b 	ldhu	r3,-4(fp)
     d1c:	10c0000d 	sth	r3,0(r2)
  y1 = y1 / y_factor;
  y2 = y2 / y_factor;

  /* assume that the box coordinates are valid */
  for (row = y1; row <= y2; row++)
    for (col = x1; col <= x2; ++col) {
     d20:	e0bff617 	ldw	r2,-40(fp)
     d24:	10800044 	addi	r2,r2,1
     d28:	e0bff615 	stw	r2,-40(fp)
     d2c:	e0bff617 	ldw	r2,-40(fp)
     d30:	e0fffd17 	ldw	r3,-12(fp)
     d34:	18bfea0e 	bge	r3,r2,ce0 <VGA_box+0xb4>
  x2 = x2 / x_factor;
  y1 = y1 / y_factor;
  y2 = y2 / y_factor;

  /* assume that the box coordinates are valid */
  for (row = y1; row <= y2; row++)
     d38:	e0bff517 	ldw	r2,-44(fp)
     d3c:	10800044 	addi	r2,r2,1
     d40:	e0bff515 	stw	r2,-44(fp)
     d44:	e0bff517 	ldw	r2,-44(fp)
     d48:	e0fffe17 	ldw	r3,-8(fp)
     d4c:	18bfe10e 	bge	r3,r2,cd4 <VGA_box+0xa8>
    for (col = x1; col <= x2; ++col) {
      pixel_ptr =
        pixel_buf_ptr + (row << (10 - res_offset - col_offset)) + (col << 1);
      *(short*)pixel_ptr = pixel_color; // set pixel color
    }
}
     d50:	0001883a 	nop
     d54:	e037883a 	mov	sp,fp
     d58:	df000017 	ldw	fp,0(sp)
     d5c:	dec00104 	addi	sp,sp,4
     d60:	f800283a 	ret

00000d64 <VGA_char_box>:
/*              Character to Pixel mapping: 1 character = 4 pixels            */
/* ************************************************************************** */

void
VGA_char_box(int x, int y, short color)
{
     d64:	defff604 	addi	sp,sp,-40
     d68:	dfc00915 	stw	ra,36(sp)
     d6c:	df000815 	stw	fp,32(sp)
     d70:	df000804 	addi	fp,sp,32
     d74:	e13ffd15 	stw	r4,-12(fp)
     d78:	e17ffe15 	stw	r5,-8(fp)
     d7c:	3005883a 	mov	r2,r6
     d80:	e0bfff0d 	sth	r2,-4(fp)
  int x1 = x * 4;
     d84:	e0bffd17 	ldw	r2,-12(fp)
     d88:	1085883a 	add	r2,r2,r2
     d8c:	1085883a 	add	r2,r2,r2
     d90:	e0bff915 	stw	r2,-28(fp)
  int y1 = y * 4;
     d94:	e0bffe17 	ldw	r2,-8(fp)
     d98:	1085883a 	add	r2,r2,r2
     d9c:	1085883a 	add	r2,r2,r2
     da0:	e0bffa15 	stw	r2,-24(fp)
  int x2 = ((x + 1) * 4) - 1;
     da4:	e0bffd17 	ldw	r2,-12(fp)
     da8:	10800044 	addi	r2,r2,1
     dac:	1085883a 	add	r2,r2,r2
     db0:	1085883a 	add	r2,r2,r2
     db4:	10bfffc4 	addi	r2,r2,-1
     db8:	e0bffb15 	stw	r2,-20(fp)
  int y2 = ((y + 1) * 4) - 1;
     dbc:	e0bffe17 	ldw	r2,-8(fp)
     dc0:	10800044 	addi	r2,r2,1
     dc4:	1085883a 	add	r2,r2,r2
     dc8:	1085883a 	add	r2,r2,r2
     dcc:	10bfffc4 	addi	r2,r2,-1
     dd0:	e0bffc15 	stw	r2,-16(fp)

  VGA_box(x1, y1, x2, y2, color);
     dd4:	e0bfff0f 	ldh	r2,-4(fp)
     dd8:	d8800015 	stw	r2,0(sp)
     ddc:	e1fffc17 	ldw	r7,-16(fp)
     de0:	e1bffb17 	ldw	r6,-20(fp)
     de4:	e17ffa17 	ldw	r5,-24(fp)
     de8:	e13ff917 	ldw	r4,-28(fp)
     dec:	0000c2c0 	call	c2c <VGA_box>
}
     df0:	0001883a 	nop
     df4:	e037883a 	mov	sp,fp
     df8:	dfc00117 	ldw	ra,4(sp)
     dfc:	df000017 	ldw	fp,0(sp)
     e00:	dec00204 	addi	sp,sp,8
     e04:	f800283a 	ret

00000e08 <VGA_animated_char>:
/* ************************************************************************** */
/*         Synced Animated Character embedded on top of character box         */
/* ************************************************************************** */
void
VGA_animated_char(int x, int y, char* text_ptr, short char_bg_color)
{
     e08:	defffa04 	addi	sp,sp,-24
     e0c:	dfc00515 	stw	ra,20(sp)
     e10:	df000415 	stw	fp,16(sp)
     e14:	df000404 	addi	fp,sp,16
     e18:	e13ffc15 	stw	r4,-16(fp)
     e1c:	e17ffd15 	stw	r5,-12(fp)
     e20:	e1bffe15 	stw	r6,-8(fp)
     e24:	3805883a 	mov	r2,r7
     e28:	e0bfff0d 	sth	r2,-4(fp)
  VGA_char_box(x, y, char_bg_color);
     e2c:	e0bfff0f 	ldh	r2,-4(fp)
     e30:	100d883a 	mov	r6,r2
     e34:	e17ffd17 	ldw	r5,-12(fp)
     e38:	e13ffc17 	ldw	r4,-16(fp)
     e3c:	0000d640 	call	d64 <VGA_char_box>
  VGA_text(x, y, text_ptr);
     e40:	e1bffe17 	ldw	r6,-8(fp)
     e44:	e17ffd17 	ldw	r5,-12(fp)
     e48:	e13ffc17 	ldw	r4,-16(fp)
     e4c:	0000b980 	call	b98 <VGA_text>
}
     e50:	0001883a 	nop
     e54:	e037883a 	mov	sp,fp
     e58:	dfc00117 	ldw	ra,4(sp)
     e5c:	df000017 	ldw	fp,0(sp)
     e60:	dec00204 	addi	sp,sp,8
     e64:	f800283a 	ret

00000e68 <VGA_info_right>:
/* ************************************************************************** */
/*            Display Character and Pixel Configuration for Sidebar           */
/* ************************************************************************** */
void
VGA_info_right(int x, int y, char* text_ptr, short char_bg_color)
{
     e68:	defff904 	addi	sp,sp,-28
     e6c:	dfc00615 	stw	ra,24(sp)
     e70:	df000515 	stw	fp,20(sp)
     e74:	df000504 	addi	fp,sp,20
     e78:	e13ffc15 	stw	r4,-16(fp)
     e7c:	e17ffd15 	stw	r5,-12(fp)
     e80:	e1bffe15 	stw	r6,-8(fp)
     e84:	3805883a 	mov	r2,r7
     e88:	e0bfff0d 	sth	r2,-4(fp)
  int i = 0;
     e8c:	e03ffb15 	stw	zero,-20(fp)
  for (i = x; i < x + 10; i++)
     e90:	e0bffc17 	ldw	r2,-16(fp)
     e94:	e0bffb15 	stw	r2,-20(fp)
     e98:	00000806 	br	ebc <VGA_info_right+0x54>
    VGA_char_box(i, y, char_bg_color);
     e9c:	e0bfff0f 	ldh	r2,-4(fp)
     ea0:	100d883a 	mov	r6,r2
     ea4:	e17ffd17 	ldw	r5,-12(fp)
     ea8:	e13ffb17 	ldw	r4,-20(fp)
     eac:	0000d640 	call	d64 <VGA_char_box>
/* ************************************************************************** */
void
VGA_info_right(int x, int y, char* text_ptr, short char_bg_color)
{
  int i = 0;
  for (i = x; i < x + 10; i++)
     eb0:	e0bffb17 	ldw	r2,-20(fp)
     eb4:	10800044 	addi	r2,r2,1
     eb8:	e0bffb15 	stw	r2,-20(fp)
     ebc:	e0bffc17 	ldw	r2,-16(fp)
     ec0:	10800284 	addi	r2,r2,10
     ec4:	e0fffb17 	ldw	r3,-20(fp)
     ec8:	18bff416 	blt	r3,r2,e9c <VGA_info_right+0x34>
    VGA_char_box(i, y, char_bg_color);

  VGA_text(x, y, text_ptr);
     ecc:	e1bffe17 	ldw	r6,-8(fp)
     ed0:	e17ffd17 	ldw	r5,-12(fp)
     ed4:	e13ffc17 	ldw	r4,-16(fp)
     ed8:	0000b980 	call	b98 <VGA_text>
}
     edc:	0001883a 	nop
     ee0:	e037883a 	mov	sp,fp
     ee4:	dfc00117 	ldw	ra,4(sp)
     ee8:	df000017 	ldw	fp,0(sp)
     eec:	dec00204 	addi	sp,sp,8
     ef0:	f800283a 	ret

00000ef4 <resample_rgb>:
/* ************************************************************************** */
/*               Resamples 24-bit color to 16-bit or 8-bit color              */
/* ************************************************************************** */
int
resample_rgb(int num_bits, int color)
{
     ef4:	defffd04 	addi	sp,sp,-12
     ef8:	df000215 	stw	fp,8(sp)
     efc:	df000204 	addi	fp,sp,8
     f00:	e13ffe15 	stw	r4,-8(fp)
     f04:	e17fff15 	stw	r5,-4(fp)
  if (num_bits == 8) {
     f08:	e0bffe17 	ldw	r2,-8(fp)
     f0c:	10800218 	cmpnei	r2,r2,8
     f10:	1000121e 	bne	r2,zero,f5c <resample_rgb+0x68>

    color = (((color >> 16) & 0x000000E0) | ((color >> 11) & 0x0000001C) |
     f14:	e0bfff17 	ldw	r2,-4(fp)
     f18:	1005d43a 	srai	r2,r2,16
     f1c:	10c0380c 	andi	r3,r2,224
     f20:	e0bfff17 	ldw	r2,-4(fp)
     f24:	1005d2fa 	srai	r2,r2,11
     f28:	1080070c 	andi	r2,r2,28
     f2c:	1886b03a 	or	r3,r3,r2
             ((color >> 6) & 0x00000003));
     f30:	e0bfff17 	ldw	r2,-4(fp)
     f34:	1005d1ba 	srai	r2,r2,6
     f38:	108000cc 	andi	r2,r2,3
int
resample_rgb(int num_bits, int color)
{
  if (num_bits == 8) {

    color = (((color >> 16) & 0x000000E0) | ((color >> 11) & 0x0000001C) |
     f3c:	1884b03a 	or	r2,r3,r2
     f40:	e0bfff15 	stw	r2,-4(fp)
             ((color >> 6) & 0x00000003));

    color = (color << 8) | color;
     f44:	e0bfff17 	ldw	r2,-4(fp)
     f48:	1004923a 	slli	r2,r2,8
     f4c:	e0ffff17 	ldw	r3,-4(fp)
     f50:	1884b03a 	or	r2,r3,r2
     f54:	e0bfff15 	stw	r2,-4(fp)
     f58:	00000f06 	br	f98 <resample_rgb+0xa4>

  } else if (num_bits == 16) {
     f5c:	e0bffe17 	ldw	r2,-8(fp)
     f60:	10800418 	cmpnei	r2,r2,16
     f64:	10000c1e 	bne	r2,zero,f98 <resample_rgb+0xa4>

    color = (((color >> 8) & 0x0000F800) | ((color >> 5) & 0x000007E0) |
     f68:	e0bfff17 	ldw	r2,-4(fp)
     f6c:	1005d23a 	srai	r2,r2,8
     f70:	10fe000c 	andi	r3,r2,63488
     f74:	e0bfff17 	ldw	r2,-4(fp)
     f78:	1005d17a 	srai	r2,r2,5
     f7c:	1081f80c 	andi	r2,r2,2016
     f80:	1886b03a 	or	r3,r3,r2
             ((color >> 3) & 0x0000001F));
     f84:	e0bfff17 	ldw	r2,-4(fp)
     f88:	1005d0fa 	srai	r2,r2,3
     f8c:	108007cc 	andi	r2,r2,31

    color = (color << 8) | color;

  } else if (num_bits == 16) {

    color = (((color >> 8) & 0x0000F800) | ((color >> 5) & 0x000007E0) |
     f90:	1884b03a 	or	r2,r3,r2
     f94:	e0bfff15 	stw	r2,-4(fp)
             ((color >> 3) & 0x0000001F));
  }

  return color;
     f98:	e0bfff17 	ldw	r2,-4(fp)
}
     f9c:	e037883a 	mov	sp,fp
     fa0:	df000017 	ldw	fp,0(sp)
     fa4:	dec00104 	addi	sp,sp,4
     fa8:	f800283a 	ret

00000fac <VGA_clear_screen>:
/*                             Clear game screen                              */
/* ************************************************************************** */

void
VGA_clear_screen(void)
{
     fac:	defffc04 	addi	sp,sp,-16
     fb0:	dfc00315 	stw	ra,12(sp)
     fb4:	df000215 	stw	fp,8(sp)
     fb8:	df000204 	addi	fp,sp,8
  debug("Clearing the screen");
     fbc:	d0a00317 	ldw	r2,-32756(gp)
     fc0:	10800317 	ldw	r2,12(r2)
     fc4:	01c026c4 	movi	r7,155
     fc8:	018000b4 	movhi	r6,2
     fcc:	31bab604 	addi	r6,r6,-5416
     fd0:	014000b4 	movhi	r5,2
     fd4:	297adb04 	addi	r5,r5,-5268
     fd8:	1009883a 	mov	r4,r2
     fdc:	0001ea40 	call	1ea4 <fprintf>
  VGA_box(0, 0, STANDARD_X, STANDARD_Y, 0); /* clear the screen */
     fe0:	d8000015 	stw	zero,0(sp)
     fe4:	01c03c04 	movi	r7,240
     fe8:	01805004 	movi	r6,320
     fec:	000b883a 	mov	r5,zero
     ff0:	0009883a 	mov	r4,zero
     ff4:	0000c2c0 	call	c2c <VGA_box>

  /* clearing all characters from the screen */
  for (int i = 0; i < 60; i++)
     ff8:	e03fff15 	stw	zero,-4(fp)
     ffc:	00000806 	br	1020 <VGA_clear_screen+0x74>
    VGA_text(0, i, clear_row_text);
    1000:	018000b4 	movhi	r6,2
    1004:	31be6904 	addi	r6,r6,-1628
    1008:	e17fff17 	ldw	r5,-4(fp)
    100c:	0009883a 	mov	r4,zero
    1010:	0000b980 	call	b98 <VGA_text>
{
  debug("Clearing the screen");
  VGA_box(0, 0, STANDARD_X, STANDARD_Y, 0); /* clear the screen */

  /* clearing all characters from the screen */
  for (int i = 0; i < 60; i++)
    1014:	e0bfff17 	ldw	r2,-4(fp)
    1018:	10800044 	addi	r2,r2,1
    101c:	e0bfff15 	stw	r2,-4(fp)
    1020:	e0bfff17 	ldw	r2,-4(fp)
    1024:	10800f10 	cmplti	r2,r2,60
    1028:	103ff51e 	bne	r2,zero,1000 <VGA_clear_screen+0x54>
    VGA_text(0, i, clear_row_text);
}
    102c:	0001883a 	nop
    1030:	e037883a 	mov	sp,fp
    1034:	dfc00117 	ldw	ra,4(sp)
    1038:	df000017 	ldw	fp,0(sp)
    103c:	dec00204 	addi	sp,sp,8
    1040:	f800283a 	ret

00001044 <VGA_clear_game_row>:
/* ************************************************************************** */
/*                            Clear Game Screen Row                           */
/* ************************************************************************** */
void
VGA_clear_game_row(int pos_y)
{
    1044:	defffc04 	addi	sp,sp,-16
    1048:	dfc00315 	stw	ra,12(sp)
    104c:	df000215 	stw	fp,8(sp)
    1050:	df000204 	addi	fp,sp,8
    1054:	e13fff15 	stw	r4,-4(fp)

  for (int i = 0; i < 70; i++)
    1058:	e03ffe15 	stw	zero,-8(fp)
    105c:	00000706 	br	107c <VGA_clear_game_row+0x38>
    VGA_char_box(i, pos_y, 0);
    1060:	000d883a 	mov	r6,zero
    1064:	e17fff17 	ldw	r5,-4(fp)
    1068:	e13ffe17 	ldw	r4,-8(fp)
    106c:	0000d640 	call	d64 <VGA_char_box>
/* ************************************************************************** */
void
VGA_clear_game_row(int pos_y)
{

  for (int i = 0; i < 70; i++)
    1070:	e0bffe17 	ldw	r2,-8(fp)
    1074:	10800044 	addi	r2,r2,1
    1078:	e0bffe15 	stw	r2,-8(fp)
    107c:	e0bffe17 	ldw	r2,-8(fp)
    1080:	10801190 	cmplti	r2,r2,70
    1084:	103ff61e 	bne	r2,zero,1060 <VGA_clear_game_row+0x1c>
    VGA_char_box(i, pos_y, 0);

  VGA_text(0, pos_y, clear_row_text);
    1088:	018000b4 	movhi	r6,2
    108c:	31be6904 	addi	r6,r6,-1628
    1090:	e17fff17 	ldw	r5,-4(fp)
    1094:	0009883a 	mov	r4,zero
    1098:	0000b980 	call	b98 <VGA_text>
}
    109c:	0001883a 	nop
    10a0:	e037883a 	mov	sp,fp
    10a4:	dfc00117 	ldw	ra,4(sp)
    10a8:	df000017 	ldw	fp,0(sp)
    10ac:	dec00204 	addi	sp,sp,8
    10b0:	f800283a 	ret

000010b4 <get_data_bits>:
/*                 Finds the number of data bits from the mode                */
/* ************************************************************************** */

int
get_data_bits(int mode)
{
    10b4:	defffe04 	addi	sp,sp,-8
    10b8:	df000115 	stw	fp,4(sp)
    10bc:	df000104 	addi	fp,sp,4
    10c0:	e13fff15 	stw	r4,-4(fp)
  switch (mode) {
    10c4:	e0bfff17 	ldw	r2,-4(fp)
    10c8:	10800ea8 	cmpgeui	r2,r2,58
    10cc:	1000591e 	bne	r2,zero,1234 <get_data_bits+0x180>
    10d0:	e0bfff17 	ldw	r2,-4(fp)
    10d4:	100690ba 	slli	r3,r2,2
    10d8:	00800034 	movhi	r2,0
    10dc:	10843b04 	addi	r2,r2,4332
    10e0:	1885883a 	add	r2,r3,r2
    10e4:	10800017 	ldw	r2,0(r2)
    10e8:	1000683a 	jmp	r2
    10ec:	000011d4 	movui	zero,71
    10f0:	00001234 	movhi	zero,72
    10f4:	00001234 	movhi	zero,72
    10f8:	00001234 	movhi	zero,72
    10fc:	00001234 	movhi	zero,72
    1100:	00001234 	movhi	zero,72
    1104:	00001234 	movhi	zero,72
    1108:	000011dc 	xori	zero,zero,71
    110c:	00001234 	movhi	zero,72
    1110:	00001234 	movhi	zero,72
    1114:	00001234 	movhi	zero,72
    1118:	00001234 	movhi	zero,72
    111c:	00001234 	movhi	zero,72
    1120:	00001234 	movhi	zero,72
    1124:	00001234 	movhi	zero,72
    1128:	00001234 	movhi	zero,72
    112c:	00001234 	movhi	zero,72
    1130:	000011e4 	muli	zero,zero,71
    1134:	000011ec 	andhi	zero,zero,71
    1138:	00001234 	movhi	zero,72
    113c:	000011f4 	movhi	zero,71
    1140:	00001234 	movhi	zero,72
    1144:	00001234 	movhi	zero,72
    1148:	000011fc 	xorhi	zero,zero,71
    114c:	00001234 	movhi	zero,72
    1150:	00001204 	movi	zero,72
    1154:	00001234 	movhi	zero,72
    1158:	00001234 	movhi	zero,72
    115c:	00001234 	movhi	zero,72
    1160:	00001234 	movhi	zero,72
    1164:	00001234 	movhi	zero,72
    1168:	00001234 	movhi	zero,72
    116c:	00001234 	movhi	zero,72
    1170:	00001234 	movhi	zero,72
    1174:	00001234 	movhi	zero,72
    1178:	00001234 	movhi	zero,72
    117c:	00001234 	movhi	zero,72
    1180:	00001234 	movhi	zero,72
    1184:	00001234 	movhi	zero,72
    1188:	00001234 	movhi	zero,72
    118c:	00001234 	movhi	zero,72
    1190:	00001234 	movhi	zero,72
    1194:	00001234 	movhi	zero,72
    1198:	00001234 	movhi	zero,72
    119c:	00001234 	movhi	zero,72
    11a0:	00001234 	movhi	zero,72
    11a4:	00001234 	movhi	zero,72
    11a8:	00001234 	movhi	zero,72
    11ac:	00001234 	movhi	zero,72
    11b0:	0000120c 	andi	zero,zero,72
    11b4:	00001214 	movui	zero,72
    11b8:	0000121c 	xori	zero,zero,72
    11bc:	00001234 	movhi	zero,72
    11c0:	00001234 	movhi	zero,72
    11c4:	00001234 	movhi	zero,72
    11c8:	00001224 	muli	zero,zero,72
    11cc:	00001234 	movhi	zero,72
    11d0:	0000122c 	andhi	zero,zero,72
    case 0x0:
      return 1;
    11d4:	00800044 	movi	r2,1
    11d8:	00001606 	br	1234 <get_data_bits+0x180>
    case 0x7:
      return 8;
    11dc:	00800204 	movi	r2,8
    11e0:	00001406 	br	1234 <get_data_bits+0x180>
    case 0x11:
      return 8;
    11e4:	00800204 	movi	r2,8
    11e8:	00001206 	br	1234 <get_data_bits+0x180>
    case 0x12:
      return 9;
    11ec:	00800244 	movi	r2,9
    11f0:	00001006 	br	1234 <get_data_bits+0x180>
    case 0x14:
      return 16;
    11f4:	00800404 	movi	r2,16
    11f8:	00000e06 	br	1234 <get_data_bits+0x180>
    case 0x17:
      return 24;
    11fc:	00800604 	movi	r2,24
    1200:	00000c06 	br	1234 <get_data_bits+0x180>
    case 0x19:
      return 30;
    1204:	00800784 	movi	r2,30
    1208:	00000a06 	br	1234 <get_data_bits+0x180>
    case 0x31:
      return 8;
    120c:	00800204 	movi	r2,8
    1210:	00000806 	br	1234 <get_data_bits+0x180>
    case 0x32:
      return 12;
    1214:	00800304 	movi	r2,12
    1218:	00000606 	br	1234 <get_data_bits+0x180>
    case 0x33:
      return 16;
    121c:	00800404 	movi	r2,16
    1220:	00000406 	br	1234 <get_data_bits+0x180>
    case 0x37:
      return 32;
    1224:	00800804 	movi	r2,32
    1228:	00000206 	br	1234 <get_data_bits+0x180>
    case 0x39:
      return 40;
    122c:	00800a04 	movi	r2,40
    1230:	00000006 	br	1234 <get_data_bits+0x180>
  }
}
    1234:	e037883a 	mov	sp,fp
    1238:	df000017 	ldw	fp,0(sp)
    123c:	dec00104 	addi	sp,sp,4
    1240:	f800283a 	ret

00001244 <VGA_display_sidebar>:
/*                            Display Right Sidebar                           */
/* ************************************************************************** */

void
VGA_display_sidebar(short sidebar_color)
{
    1244:	defffd04 	addi	sp,sp,-12
    1248:	dfc00215 	stw	ra,8(sp)
    124c:	df000115 	stw	fp,4(sp)
    1250:	df000104 	addi	fp,sp,4
    1254:	2005883a 	mov	r2,r4
    1258:	e0bfff0d 	sth	r2,-4(fp)
  VGA_info_right(70, 0, "          ", sidebar_color);
    125c:	e0bfff0f 	ldh	r2,-4(fp)
    1260:	100f883a 	mov	r7,r2
    1264:	018000b4 	movhi	r6,2
    1268:	31bae404 	addi	r6,r6,-5232
    126c:	000b883a 	mov	r5,zero
    1270:	01001184 	movi	r4,70
    1274:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 1, " CATCH    ", sidebar_color);
    1278:	e0bfff0f 	ldh	r2,-4(fp)
    127c:	100f883a 	mov	r7,r2
    1280:	018000b4 	movhi	r6,2
    1284:	31bae704 	addi	r6,r6,-5220
    1288:	01400044 	movi	r5,1
    128c:	01001184 	movi	r4,70
    1290:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 2, " THE      ", sidebar_color);
    1294:	e0bfff0f 	ldh	r2,-4(fp)
    1298:	100f883a 	mov	r7,r2
    129c:	018000b4 	movhi	r6,2
    12a0:	31baea04 	addi	r6,r6,-5208
    12a4:	01400084 	movi	r5,2
    12a8:	01001184 	movi	r4,70
    12ac:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 3, " NUMBERS! ", sidebar_color);
    12b0:	e0bfff0f 	ldh	r2,-4(fp)
    12b4:	100f883a 	mov	r7,r2
    12b8:	018000b4 	movhi	r6,2
    12bc:	31baed04 	addi	r6,r6,-5196
    12c0:	014000c4 	movi	r5,3
    12c4:	01001184 	movi	r4,70
    12c8:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 4, "          ", sidebar_color);
    12cc:	e0bfff0f 	ldh	r2,-4(fp)
    12d0:	100f883a 	mov	r7,r2
    12d4:	018000b4 	movhi	r6,2
    12d8:	31bae404 	addi	r6,r6,-5232
    12dc:	01400104 	movi	r5,4
    12e0:	01001184 	movi	r4,70
    12e4:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 5, " SCORE:   ", sidebar_color);
    12e8:	e0bfff0f 	ldh	r2,-4(fp)
    12ec:	100f883a 	mov	r7,r2
    12f0:	018000b4 	movhi	r6,2
    12f4:	31baf004 	addi	r6,r6,-5184
    12f8:	01400144 	movi	r5,5
    12fc:	01001184 	movi	r4,70
    1300:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 6, "        0 ", sidebar_color);
    1304:	e0bfff0f 	ldh	r2,-4(fp)
    1308:	100f883a 	mov	r7,r2
    130c:	018000b4 	movhi	r6,2
    1310:	31baf304 	addi	r6,r6,-5172
    1314:	01400184 	movi	r5,6
    1318:	01001184 	movi	r4,70
    131c:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 7, "          ", sidebar_color);
    1320:	e0bfff0f 	ldh	r2,-4(fp)
    1324:	100f883a 	mov	r7,r2
    1328:	018000b4 	movhi	r6,2
    132c:	31bae404 	addi	r6,r6,-5232
    1330:	014001c4 	movi	r5,7
    1334:	01001184 	movi	r4,70
    1338:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 8, " TIME:    ", sidebar_color);
    133c:	e0bfff0f 	ldh	r2,-4(fp)
    1340:	100f883a 	mov	r7,r2
    1344:	018000b4 	movhi	r6,2
    1348:	31baf604 	addi	r6,r6,-5160
    134c:	01400204 	movi	r5,8
    1350:	01001184 	movi	r4,70
    1354:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 9, " 00:00:00 ", sidebar_color);
    1358:	e0bfff0f 	ldh	r2,-4(fp)
    135c:	100f883a 	mov	r7,r2
    1360:	018000b4 	movhi	r6,2
    1364:	31baf904 	addi	r6,r6,-5148
    1368:	01400244 	movi	r5,9
    136c:	01001184 	movi	r4,70
    1370:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 10, "          ", sidebar_color);
    1374:	e0bfff0f 	ldh	r2,-4(fp)
    1378:	100f883a 	mov	r7,r2
    137c:	018000b4 	movhi	r6,2
    1380:	31bae404 	addi	r6,r6,-5232
    1384:	01400284 	movi	r5,10
    1388:	01001184 	movi	r4,70
    138c:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 11, "          ", sidebar_color);
    1390:	e0bfff0f 	ldh	r2,-4(fp)
    1394:	100f883a 	mov	r7,r2
    1398:	018000b4 	movhi	r6,2
    139c:	31bae404 	addi	r6,r6,-5232
    13a0:	014002c4 	movi	r5,11
    13a4:	01001184 	movi	r4,70
    13a8:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 12, "          ", sidebar_color);
    13ac:	e0bfff0f 	ldh	r2,-4(fp)
    13b0:	100f883a 	mov	r7,r2
    13b4:	018000b4 	movhi	r6,2
    13b8:	31bae404 	addi	r6,r6,-5232
    13bc:	01400304 	movi	r5,12
    13c0:	01001184 	movi	r4,70
    13c4:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 13, "          ", sidebar_color);
    13c8:	e0bfff0f 	ldh	r2,-4(fp)
    13cc:	100f883a 	mov	r7,r2
    13d0:	018000b4 	movhi	r6,2
    13d4:	31bae404 	addi	r6,r6,-5232
    13d8:	01400344 	movi	r5,13
    13dc:	01001184 	movi	r4,70
    13e0:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 14, "          ", sidebar_color);
    13e4:	e0bfff0f 	ldh	r2,-4(fp)
    13e8:	100f883a 	mov	r7,r2
    13ec:	018000b4 	movhi	r6,2
    13f0:	31bae404 	addi	r6,r6,-5232
    13f4:	01400384 	movi	r5,14
    13f8:	01001184 	movi	r4,70
    13fc:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 15, "          ", sidebar_color);
    1400:	e0bfff0f 	ldh	r2,-4(fp)
    1404:	100f883a 	mov	r7,r2
    1408:	018000b4 	movhi	r6,2
    140c:	31bae404 	addi	r6,r6,-5232
    1410:	014003c4 	movi	r5,15
    1414:	01001184 	movi	r4,70
    1418:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 16, "          ", sidebar_color);
    141c:	e0bfff0f 	ldh	r2,-4(fp)
    1420:	100f883a 	mov	r7,r2
    1424:	018000b4 	movhi	r6,2
    1428:	31bae404 	addi	r6,r6,-5232
    142c:	01400404 	movi	r5,16
    1430:	01001184 	movi	r4,70
    1434:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 17, "          ", sidebar_color);
    1438:	e0bfff0f 	ldh	r2,-4(fp)
    143c:	100f883a 	mov	r7,r2
    1440:	018000b4 	movhi	r6,2
    1444:	31bae404 	addi	r6,r6,-5232
    1448:	01400444 	movi	r5,17
    144c:	01001184 	movi	r4,70
    1450:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 18, "          ", sidebar_color);
    1454:	e0bfff0f 	ldh	r2,-4(fp)
    1458:	100f883a 	mov	r7,r2
    145c:	018000b4 	movhi	r6,2
    1460:	31bae404 	addi	r6,r6,-5232
    1464:	01400484 	movi	r5,18
    1468:	01001184 	movi	r4,70
    146c:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 19, "          ", sidebar_color);
    1470:	e0bfff0f 	ldh	r2,-4(fp)
    1474:	100f883a 	mov	r7,r2
    1478:	018000b4 	movhi	r6,2
    147c:	31bae404 	addi	r6,r6,-5232
    1480:	014004c4 	movi	r5,19
    1484:	01001184 	movi	r4,70
    1488:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 20, "          ", sidebar_color);
    148c:	e0bfff0f 	ldh	r2,-4(fp)
    1490:	100f883a 	mov	r7,r2
    1494:	018000b4 	movhi	r6,2
    1498:	31bae404 	addi	r6,r6,-5232
    149c:	01400504 	movi	r5,20
    14a0:	01001184 	movi	r4,70
    14a4:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 21, "          ", sidebar_color);
    14a8:	e0bfff0f 	ldh	r2,-4(fp)
    14ac:	100f883a 	mov	r7,r2
    14b0:	018000b4 	movhi	r6,2
    14b4:	31bae404 	addi	r6,r6,-5232
    14b8:	01400544 	movi	r5,21
    14bc:	01001184 	movi	r4,70
    14c0:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 22, "          ", sidebar_color);
    14c4:	e0bfff0f 	ldh	r2,-4(fp)
    14c8:	100f883a 	mov	r7,r2
    14cc:	018000b4 	movhi	r6,2
    14d0:	31bae404 	addi	r6,r6,-5232
    14d4:	01400584 	movi	r5,22
    14d8:	01001184 	movi	r4,70
    14dc:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 23, "          ", sidebar_color);
    14e0:	e0bfff0f 	ldh	r2,-4(fp)
    14e4:	100f883a 	mov	r7,r2
    14e8:	018000b4 	movhi	r6,2
    14ec:	31bae404 	addi	r6,r6,-5232
    14f0:	014005c4 	movi	r5,23
    14f4:	01001184 	movi	r4,70
    14f8:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 24, "          ", sidebar_color);
    14fc:	e0bfff0f 	ldh	r2,-4(fp)
    1500:	100f883a 	mov	r7,r2
    1504:	018000b4 	movhi	r6,2
    1508:	31bae404 	addi	r6,r6,-5232
    150c:	01400604 	movi	r5,24
    1510:	01001184 	movi	r4,70
    1514:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 25, "          ", sidebar_color);
    1518:	e0bfff0f 	ldh	r2,-4(fp)
    151c:	100f883a 	mov	r7,r2
    1520:	018000b4 	movhi	r6,2
    1524:	31bae404 	addi	r6,r6,-5232
    1528:	01400644 	movi	r5,25
    152c:	01001184 	movi	r4,70
    1530:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 26, "          ", sidebar_color);
    1534:	e0bfff0f 	ldh	r2,-4(fp)
    1538:	100f883a 	mov	r7,r2
    153c:	018000b4 	movhi	r6,2
    1540:	31bae404 	addi	r6,r6,-5232
    1544:	01400684 	movi	r5,26
    1548:	01001184 	movi	r4,70
    154c:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 27, "          ", sidebar_color);
    1550:	e0bfff0f 	ldh	r2,-4(fp)
    1554:	100f883a 	mov	r7,r2
    1558:	018000b4 	movhi	r6,2
    155c:	31bae404 	addi	r6,r6,-5232
    1560:	014006c4 	movi	r5,27
    1564:	01001184 	movi	r4,70
    1568:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 28, "          ", sidebar_color);
    156c:	e0bfff0f 	ldh	r2,-4(fp)
    1570:	100f883a 	mov	r7,r2
    1574:	018000b4 	movhi	r6,2
    1578:	31bae404 	addi	r6,r6,-5232
    157c:	01400704 	movi	r5,28
    1580:	01001184 	movi	r4,70
    1584:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 29, "          ", sidebar_color);
    1588:	e0bfff0f 	ldh	r2,-4(fp)
    158c:	100f883a 	mov	r7,r2
    1590:	018000b4 	movhi	r6,2
    1594:	31bae404 	addi	r6,r6,-5232
    1598:	01400744 	movi	r5,29
    159c:	01001184 	movi	r4,70
    15a0:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 30, "          ", sidebar_color);
    15a4:	e0bfff0f 	ldh	r2,-4(fp)
    15a8:	100f883a 	mov	r7,r2
    15ac:	018000b4 	movhi	r6,2
    15b0:	31bae404 	addi	r6,r6,-5232
    15b4:	01400784 	movi	r5,30
    15b8:	01001184 	movi	r4,70
    15bc:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 31, "          ", sidebar_color);
    15c0:	e0bfff0f 	ldh	r2,-4(fp)
    15c4:	100f883a 	mov	r7,r2
    15c8:	018000b4 	movhi	r6,2
    15cc:	31bae404 	addi	r6,r6,-5232
    15d0:	014007c4 	movi	r5,31
    15d4:	01001184 	movi	r4,70
    15d8:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 32, "          ", sidebar_color);
    15dc:	e0bfff0f 	ldh	r2,-4(fp)
    15e0:	100f883a 	mov	r7,r2
    15e4:	018000b4 	movhi	r6,2
    15e8:	31bae404 	addi	r6,r6,-5232
    15ec:	01400804 	movi	r5,32
    15f0:	01001184 	movi	r4,70
    15f4:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 33, "          ", sidebar_color);
    15f8:	e0bfff0f 	ldh	r2,-4(fp)
    15fc:	100f883a 	mov	r7,r2
    1600:	018000b4 	movhi	r6,2
    1604:	31bae404 	addi	r6,r6,-5232
    1608:	01400844 	movi	r5,33
    160c:	01001184 	movi	r4,70
    1610:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 34, "          ", sidebar_color);
    1614:	e0bfff0f 	ldh	r2,-4(fp)
    1618:	100f883a 	mov	r7,r2
    161c:	018000b4 	movhi	r6,2
    1620:	31bae404 	addi	r6,r6,-5232
    1624:	01400884 	movi	r5,34
    1628:	01001184 	movi	r4,70
    162c:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 35, "          ", sidebar_color);
    1630:	e0bfff0f 	ldh	r2,-4(fp)
    1634:	100f883a 	mov	r7,r2
    1638:	018000b4 	movhi	r6,2
    163c:	31bae404 	addi	r6,r6,-5232
    1640:	014008c4 	movi	r5,35
    1644:	01001184 	movi	r4,70
    1648:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 36, "          ", sidebar_color);
    164c:	e0bfff0f 	ldh	r2,-4(fp)
    1650:	100f883a 	mov	r7,r2
    1654:	018000b4 	movhi	r6,2
    1658:	31bae404 	addi	r6,r6,-5232
    165c:	01400904 	movi	r5,36
    1660:	01001184 	movi	r4,70
    1664:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 37, "          ", sidebar_color);
    1668:	e0bfff0f 	ldh	r2,-4(fp)
    166c:	100f883a 	mov	r7,r2
    1670:	018000b4 	movhi	r6,2
    1674:	31bae404 	addi	r6,r6,-5232
    1678:	01400944 	movi	r5,37
    167c:	01001184 	movi	r4,70
    1680:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 38, "          ", sidebar_color);
    1684:	e0bfff0f 	ldh	r2,-4(fp)
    1688:	100f883a 	mov	r7,r2
    168c:	018000b4 	movhi	r6,2
    1690:	31bae404 	addi	r6,r6,-5232
    1694:	01400984 	movi	r5,38
    1698:	01001184 	movi	r4,70
    169c:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 39, "          ", sidebar_color);
    16a0:	e0bfff0f 	ldh	r2,-4(fp)
    16a4:	100f883a 	mov	r7,r2
    16a8:	018000b4 	movhi	r6,2
    16ac:	31bae404 	addi	r6,r6,-5232
    16b0:	014009c4 	movi	r5,39
    16b4:	01001184 	movi	r4,70
    16b8:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 40, "          ", sidebar_color);
    16bc:	e0bfff0f 	ldh	r2,-4(fp)
    16c0:	100f883a 	mov	r7,r2
    16c4:	018000b4 	movhi	r6,2
    16c8:	31bae404 	addi	r6,r6,-5232
    16cc:	01400a04 	movi	r5,40
    16d0:	01001184 	movi	r4,70
    16d4:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 41, "          ", sidebar_color);
    16d8:	e0bfff0f 	ldh	r2,-4(fp)
    16dc:	100f883a 	mov	r7,r2
    16e0:	018000b4 	movhi	r6,2
    16e4:	31bae404 	addi	r6,r6,-5232
    16e8:	01400a44 	movi	r5,41
    16ec:	01001184 	movi	r4,70
    16f0:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 42, "          ", sidebar_color);
    16f4:	e0bfff0f 	ldh	r2,-4(fp)
    16f8:	100f883a 	mov	r7,r2
    16fc:	018000b4 	movhi	r6,2
    1700:	31bae404 	addi	r6,r6,-5232
    1704:	01400a84 	movi	r5,42
    1708:	01001184 	movi	r4,70
    170c:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 43, "          ", sidebar_color);
    1710:	e0bfff0f 	ldh	r2,-4(fp)
    1714:	100f883a 	mov	r7,r2
    1718:	018000b4 	movhi	r6,2
    171c:	31bae404 	addi	r6,r6,-5232
    1720:	01400ac4 	movi	r5,43
    1724:	01001184 	movi	r4,70
    1728:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 44, "          ", sidebar_color);
    172c:	e0bfff0f 	ldh	r2,-4(fp)
    1730:	100f883a 	mov	r7,r2
    1734:	018000b4 	movhi	r6,2
    1738:	31bae404 	addi	r6,r6,-5232
    173c:	01400b04 	movi	r5,44
    1740:	01001184 	movi	r4,70
    1744:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 45, "          ", sidebar_color);
    1748:	e0bfff0f 	ldh	r2,-4(fp)
    174c:	100f883a 	mov	r7,r2
    1750:	018000b4 	movhi	r6,2
    1754:	31bae404 	addi	r6,r6,-5232
    1758:	01400b44 	movi	r5,45
    175c:	01001184 	movi	r4,70
    1760:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 46, "          ", sidebar_color);
    1764:	e0bfff0f 	ldh	r2,-4(fp)
    1768:	100f883a 	mov	r7,r2
    176c:	018000b4 	movhi	r6,2
    1770:	31bae404 	addi	r6,r6,-5232
    1774:	01400b84 	movi	r5,46
    1778:	01001184 	movi	r4,70
    177c:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 47, "          ", sidebar_color);
    1780:	e0bfff0f 	ldh	r2,-4(fp)
    1784:	100f883a 	mov	r7,r2
    1788:	018000b4 	movhi	r6,2
    178c:	31bae404 	addi	r6,r6,-5232
    1790:	01400bc4 	movi	r5,47
    1794:	01001184 	movi	r4,70
    1798:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 48, "          ", sidebar_color);
    179c:	e0bfff0f 	ldh	r2,-4(fp)
    17a0:	100f883a 	mov	r7,r2
    17a4:	018000b4 	movhi	r6,2
    17a8:	31bae404 	addi	r6,r6,-5232
    17ac:	01400c04 	movi	r5,48
    17b0:	01001184 	movi	r4,70
    17b4:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 49, "          ", sidebar_color);
    17b8:	e0bfff0f 	ldh	r2,-4(fp)
    17bc:	100f883a 	mov	r7,r2
    17c0:	018000b4 	movhi	r6,2
    17c4:	31bae404 	addi	r6,r6,-5232
    17c8:	01400c44 	movi	r5,49
    17cc:	01001184 	movi	r4,70
    17d0:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 50, "          ", sidebar_color);
    17d4:	e0bfff0f 	ldh	r2,-4(fp)
    17d8:	100f883a 	mov	r7,r2
    17dc:	018000b4 	movhi	r6,2
    17e0:	31bae404 	addi	r6,r6,-5232
    17e4:	01400c84 	movi	r5,50
    17e8:	01001184 	movi	r4,70
    17ec:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 51, "          ", sidebar_color);
    17f0:	e0bfff0f 	ldh	r2,-4(fp)
    17f4:	100f883a 	mov	r7,r2
    17f8:	018000b4 	movhi	r6,2
    17fc:	31bae404 	addi	r6,r6,-5232
    1800:	01400cc4 	movi	r5,51
    1804:	01001184 	movi	r4,70
    1808:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 52, "          ", sidebar_color);
    180c:	e0bfff0f 	ldh	r2,-4(fp)
    1810:	100f883a 	mov	r7,r2
    1814:	018000b4 	movhi	r6,2
    1818:	31bae404 	addi	r6,r6,-5232
    181c:	01400d04 	movi	r5,52
    1820:	01001184 	movi	r4,70
    1824:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 53, "          ", sidebar_color);
    1828:	e0bfff0f 	ldh	r2,-4(fp)
    182c:	100f883a 	mov	r7,r2
    1830:	018000b4 	movhi	r6,2
    1834:	31bae404 	addi	r6,r6,-5232
    1838:	01400d44 	movi	r5,53
    183c:	01001184 	movi	r4,70
    1840:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 54, "          ", sidebar_color);
    1844:	e0bfff0f 	ldh	r2,-4(fp)
    1848:	100f883a 	mov	r7,r2
    184c:	018000b4 	movhi	r6,2
    1850:	31bae404 	addi	r6,r6,-5232
    1854:	01400d84 	movi	r5,54
    1858:	01001184 	movi	r4,70
    185c:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 55, "          ", sidebar_color);
    1860:	e0bfff0f 	ldh	r2,-4(fp)
    1864:	100f883a 	mov	r7,r2
    1868:	018000b4 	movhi	r6,2
    186c:	31bae404 	addi	r6,r6,-5232
    1870:	01400dc4 	movi	r5,55
    1874:	01001184 	movi	r4,70
    1878:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 56, " PRESS    ", sidebar_color);
    187c:	e0bfff0f 	ldh	r2,-4(fp)
    1880:	100f883a 	mov	r7,r2
    1884:	018000b4 	movhi	r6,2
    1888:	31bafc04 	addi	r6,r6,-5136
    188c:	01400e04 	movi	r5,56
    1890:	01001184 	movi	r4,70
    1894:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 57, "  ESC     ", sidebar_color);
    1898:	e0bfff0f 	ldh	r2,-4(fp)
    189c:	100f883a 	mov	r7,r2
    18a0:	018000b4 	movhi	r6,2
    18a4:	31baff04 	addi	r6,r6,-5124
    18a8:	01400e44 	movi	r5,57
    18ac:	01001184 	movi	r4,70
    18b0:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 58, " TO QUIT  ", sidebar_color);
    18b4:	e0bfff0f 	ldh	r2,-4(fp)
    18b8:	100f883a 	mov	r7,r2
    18bc:	018000b4 	movhi	r6,2
    18c0:	31bb0204 	addi	r6,r6,-5112
    18c4:	01400e84 	movi	r5,58
    18c8:	01001184 	movi	r4,70
    18cc:	0000e680 	call	e68 <VGA_info_right>
  VGA_info_right(70, 59, "          ", sidebar_color);
    18d0:	e0bfff0f 	ldh	r2,-4(fp)
    18d4:	100f883a 	mov	r7,r2
    18d8:	018000b4 	movhi	r6,2
    18dc:	31bae404 	addi	r6,r6,-5232
    18e0:	01400ec4 	movi	r5,59
    18e4:	01001184 	movi	r4,70
    18e8:	0000e680 	call	e68 <VGA_info_right>
}
    18ec:	0001883a 	nop
    18f0:	e037883a 	mov	sp,fp
    18f4:	dfc00117 	ldw	ra,4(sp)
    18f8:	df000017 	ldw	fp,0(sp)
    18fc:	dec00204 	addi	sp,sp,8
    1900:	f800283a 	ret

00001904 <VGA_gametime_display>:
/* ************************************************************************** */
/*                              Display Game Time                             */
/* ************************************************************************** */
void
VGA_gametime_display(int hour, int minute, int second)
{
    1904:	defff404 	addi	sp,sp,-48
    1908:	dfc00b15 	stw	ra,44(sp)
    190c:	df000a15 	stw	fp,40(sp)
    1910:	dc000915 	stw	r16,36(sp)
    1914:	df000a04 	addi	fp,sp,40
    1918:	e13ffc15 	stw	r4,-16(fp)
    191c:	e17ffd15 	stw	r5,-12(fp)
    1920:	e1bffe15 	stw	r6,-8(fp)
  char buffer[10];

  int cx;
  cx = snprintf(buffer, 10, " %02d:%02d:%02d\0", game_hh, game_mm, game_ss);
    1924:	d167eb17 	ldw	r5,-24660(gp)
    1928:	d0a7ee17 	ldw	r2,-24648(gp)
    192c:	d0e7f017 	ldw	r3,-24640(gp)
    1930:	e13ff904 	addi	r4,fp,-28
    1934:	d8c00115 	stw	r3,4(sp)
    1938:	d8800015 	stw	r2,0(sp)
    193c:	280f883a 	mov	r7,r5
    1940:	018000b4 	movhi	r6,2
    1944:	31bb0504 	addi	r6,r6,-5100
    1948:	01400284 	movi	r5,10
    194c:	00021600 	call	2160 <snprintf>
    1950:	e0bff815 	stw	r2,-32(fp)

  debug("buffer: %s", buffer);
    1954:	d0a00317 	ldw	r2,-32756(gp)
    1958:	10c00317 	ldw	r3,12(r2)
    195c:	e0bff904 	addi	r2,fp,-28
    1960:	d8800015 	stw	r2,0(sp)
    1964:	01c048c4 	movi	r7,291
    1968:	018000b4 	movhi	r6,2
    196c:	31bab604 	addi	r6,r6,-5416
    1970:	014000b4 	movhi	r5,2
    1974:	297b0a04 	addi	r5,r5,-5080
    1978:	1809883a 	mov	r4,r3
    197c:	0001ea40 	call	1ea4 <fprintf>
  check(cx >= 0, "cx out of range");
    1980:	e0bff817 	ldw	r2,-32(fp)
    1984:	10001d0e 	bge	r2,zero,19fc <VGA_gametime_display+0xf8>
    1988:	d0a00317 	ldw	r2,-32756(gp)
    198c:	14000317 	ldw	r16,12(r2)
    1990:	0001e6c0 	call	1e6c <__errno>
    1994:	10800017 	ldw	r2,0(r2)
    1998:	10000526 	beq	r2,zero,19b0 <VGA_gametime_display+0xac>
    199c:	0001e6c0 	call	1e6c <__errno>
    19a0:	10800017 	ldw	r2,0(r2)
    19a4:	1009883a 	mov	r4,r2
    19a8:	00028a00 	call	28a0 <strerror>
    19ac:	00000206 	br	19b8 <VGA_gametime_display+0xb4>
    19b0:	008000b4 	movhi	r2,2
    19b4:	10bb1104 	addi	r2,r2,-5052
    19b8:	d8800015 	stw	r2,0(sp)
    19bc:	01c04904 	movi	r7,292
    19c0:	018000b4 	movhi	r6,2
    19c4:	31bab604 	addi	r6,r6,-5416
    19c8:	014000b4 	movhi	r5,2
    19cc:	297b1304 	addi	r5,r5,-5044
    19d0:	8009883a 	mov	r4,r16
    19d4:	0001ea40 	call	1ea4 <fprintf>
    19d8:	0001e6c0 	call	1e6c <__errno>
    19dc:	10000015 	stw	zero,0(r2)
    19e0:	0001883a 	nop

  VGA_text(70, 9, buffer);
  return;

error:
  log_err("Error caused while formatting string");
    19e4:	d0a00317 	ldw	r2,-32756(gp)
    19e8:	14000317 	ldw	r16,12(r2)
    19ec:	0001e6c0 	call	1e6c <__errno>
    19f0:	10800017 	ldw	r2,0(r2)
    19f4:	10000c26 	beq	r2,zero,1a28 <VGA_gametime_display+0x124>
    19f8:	00000606 	br	1a14 <VGA_gametime_display+0x110>
  cx = snprintf(buffer, 10, " %02d:%02d:%02d\0", game_hh, game_mm, game_ss);

  debug("buffer: %s", buffer);
  check(cx >= 0, "cx out of range");

  VGA_text(70, 9, buffer);
    19fc:	e0bff904 	addi	r2,fp,-28
    1a00:	100d883a 	mov	r6,r2
    1a04:	01400244 	movi	r5,9
    1a08:	01001184 	movi	r4,70
    1a0c:	0000b980 	call	b98 <VGA_text>
    1a10:	00002506 	br	1aa8 <VGA_gametime_display+0x1a4>
  return;

error:
  log_err("Error caused while formatting string");
    1a14:	0001e6c0 	call	1e6c <__errno>
    1a18:	10800017 	ldw	r2,0(r2)
    1a1c:	1009883a 	mov	r4,r2
    1a20:	00028a00 	call	28a0 <strerror>
    1a24:	00000206 	br	1a30 <VGA_gametime_display+0x12c>
    1a28:	008000b4 	movhi	r2,2
    1a2c:	10bb1104 	addi	r2,r2,-5052
    1a30:	d8800015 	stw	r2,0(sp)
    1a34:	01c04a84 	movi	r7,298
    1a38:	018000b4 	movhi	r6,2
    1a3c:	31bab604 	addi	r6,r6,-5416
    1a40:	014000b4 	movhi	r5,2
    1a44:	297b1e04 	addi	r5,r5,-5000
    1a48:	8009883a 	mov	r4,r16
    1a4c:	0001ea40 	call	1ea4 <fprintf>
  log_err("buffer: %s", buffer);
    1a50:	d0a00317 	ldw	r2,-32756(gp)
    1a54:	14000317 	ldw	r16,12(r2)
    1a58:	0001e6c0 	call	1e6c <__errno>
    1a5c:	10800017 	ldw	r2,0(r2)
    1a60:	10000526 	beq	r2,zero,1a78 <VGA_gametime_display+0x174>
    1a64:	0001e6c0 	call	1e6c <__errno>
    1a68:	10800017 	ldw	r2,0(r2)
    1a6c:	1009883a 	mov	r4,r2
    1a70:	00028a00 	call	28a0 <strerror>
    1a74:	00000206 	br	1a80 <VGA_gametime_display+0x17c>
    1a78:	008000b4 	movhi	r2,2
    1a7c:	10bb1104 	addi	r2,r2,-5052
    1a80:	e0fff904 	addi	r3,fp,-28
    1a84:	d8c00115 	stw	r3,4(sp)
    1a88:	d8800015 	stw	r2,0(sp)
    1a8c:	01c04ac4 	movi	r7,299
    1a90:	018000b4 	movhi	r6,2
    1a94:	31bab604 	addi	r6,r6,-5416
    1a98:	014000b4 	movhi	r5,2
    1a9c:	297b2f04 	addi	r5,r5,-4932
    1aa0:	8009883a 	mov	r4,r16
    1aa4:	0001ea40 	call	1ea4 <fprintf>
}
    1aa8:	e6ffff04 	addi	sp,fp,-4
    1aac:	dfc00217 	ldw	ra,8(sp)
    1ab0:	df000117 	ldw	fp,4(sp)
    1ab4:	dc000017 	ldw	r16,0(sp)
    1ab8:	dec00304 	addi	sp,sp,12
    1abc:	f800283a 	ret

00001ac0 <VGA_display_score>:
/* ************************************************************************** */
/*                             Display Game Score                             */
/* ************************************************************************** */
void
VGA_display_score(int score)
{
    1ac0:	defff604 	addi	sp,sp,-40
    1ac4:	dfc00915 	stw	ra,36(sp)
    1ac8:	df000815 	stw	fp,32(sp)
    1acc:	dc000715 	stw	r16,28(sp)
    1ad0:	df000804 	addi	fp,sp,32
    1ad4:	e13ffe15 	stw	r4,-8(fp)
  char buffer[10];

  int cx;
  cx = snprintf(buffer, 10, "      %03d\0", score);
    1ad8:	e0bffb04 	addi	r2,fp,-20
    1adc:	e1fffe17 	ldw	r7,-8(fp)
    1ae0:	018000b4 	movhi	r6,2
    1ae4:	31bb3904 	addi	r6,r6,-4892
    1ae8:	01400284 	movi	r5,10
    1aec:	1009883a 	mov	r4,r2
    1af0:	00021600 	call	2160 <snprintf>
    1af4:	e0bffa15 	stw	r2,-24(fp)

  debug("buffer: %s", buffer);
    1af8:	d0a00317 	ldw	r2,-32756(gp)
    1afc:	10c00317 	ldw	r3,12(r2)
    1b00:	e0bffb04 	addi	r2,fp,-20
    1b04:	d8800015 	stw	r2,0(sp)
    1b08:	01c04e44 	movi	r7,313
    1b0c:	018000b4 	movhi	r6,2
    1b10:	31bab604 	addi	r6,r6,-5416
    1b14:	014000b4 	movhi	r5,2
    1b18:	297b0a04 	addi	r5,r5,-5080
    1b1c:	1809883a 	mov	r4,r3
    1b20:	0001ea40 	call	1ea4 <fprintf>
  check(cx >= 0, "cx out of range");
    1b24:	e0bffa17 	ldw	r2,-24(fp)
    1b28:	10001d0e 	bge	r2,zero,1ba0 <VGA_display_score+0xe0>
    1b2c:	d0a00317 	ldw	r2,-32756(gp)
    1b30:	14000317 	ldw	r16,12(r2)
    1b34:	0001e6c0 	call	1e6c <__errno>
    1b38:	10800017 	ldw	r2,0(r2)
    1b3c:	10000526 	beq	r2,zero,1b54 <VGA_display_score+0x94>
    1b40:	0001e6c0 	call	1e6c <__errno>
    1b44:	10800017 	ldw	r2,0(r2)
    1b48:	1009883a 	mov	r4,r2
    1b4c:	00028a00 	call	28a0 <strerror>
    1b50:	00000206 	br	1b5c <VGA_display_score+0x9c>
    1b54:	008000b4 	movhi	r2,2
    1b58:	10bb1104 	addi	r2,r2,-5052
    1b5c:	d8800015 	stw	r2,0(sp)
    1b60:	01c04e84 	movi	r7,314
    1b64:	018000b4 	movhi	r6,2
    1b68:	31bab604 	addi	r6,r6,-5416
    1b6c:	014000b4 	movhi	r5,2
    1b70:	297b1304 	addi	r5,r5,-5044
    1b74:	8009883a 	mov	r4,r16
    1b78:	0001ea40 	call	1ea4 <fprintf>
    1b7c:	0001e6c0 	call	1e6c <__errno>
    1b80:	10000015 	stw	zero,0(r2)
    1b84:	0001883a 	nop

  VGA_text(70, 6, buffer);
  return;

error:
  log_err("Error caused while formatting string");
    1b88:	d0a00317 	ldw	r2,-32756(gp)
    1b8c:	14000317 	ldw	r16,12(r2)
    1b90:	0001e6c0 	call	1e6c <__errno>
    1b94:	10800017 	ldw	r2,0(r2)
    1b98:	10000c26 	beq	r2,zero,1bcc <VGA_display_score+0x10c>
    1b9c:	00000606 	br	1bb8 <VGA_display_score+0xf8>
  cx = snprintf(buffer, 10, "      %03d\0", score);

  debug("buffer: %s", buffer);
  check(cx >= 0, "cx out of range");

  VGA_text(70, 6, buffer);
    1ba0:	e0bffb04 	addi	r2,fp,-20
    1ba4:	100d883a 	mov	r6,r2
    1ba8:	01400184 	movi	r5,6
    1bac:	01001184 	movi	r4,70
    1bb0:	0000b980 	call	b98 <VGA_text>
    1bb4:	00002506 	br	1c4c <VGA_display_score+0x18c>
  return;

error:
  log_err("Error caused while formatting string");
    1bb8:	0001e6c0 	call	1e6c <__errno>
    1bbc:	10800017 	ldw	r2,0(r2)
    1bc0:	1009883a 	mov	r4,r2
    1bc4:	00028a00 	call	28a0 <strerror>
    1bc8:	00000206 	br	1bd4 <VGA_display_score+0x114>
    1bcc:	008000b4 	movhi	r2,2
    1bd0:	10bb1104 	addi	r2,r2,-5052
    1bd4:	d8800015 	stw	r2,0(sp)
    1bd8:	01c05004 	movi	r7,320
    1bdc:	018000b4 	movhi	r6,2
    1be0:	31bab604 	addi	r6,r6,-5416
    1be4:	014000b4 	movhi	r5,2
    1be8:	297b1e04 	addi	r5,r5,-5000
    1bec:	8009883a 	mov	r4,r16
    1bf0:	0001ea40 	call	1ea4 <fprintf>
  log_err("buffer: %s", buffer);
    1bf4:	d0a00317 	ldw	r2,-32756(gp)
    1bf8:	14000317 	ldw	r16,12(r2)
    1bfc:	0001e6c0 	call	1e6c <__errno>
    1c00:	10800017 	ldw	r2,0(r2)
    1c04:	10000526 	beq	r2,zero,1c1c <VGA_display_score+0x15c>
    1c08:	0001e6c0 	call	1e6c <__errno>
    1c0c:	10800017 	ldw	r2,0(r2)
    1c10:	1009883a 	mov	r4,r2
    1c14:	00028a00 	call	28a0 <strerror>
    1c18:	00000206 	br	1c24 <VGA_display_score+0x164>
    1c1c:	008000b4 	movhi	r2,2
    1c20:	10bb1104 	addi	r2,r2,-5052
    1c24:	e0fffb04 	addi	r3,fp,-20
    1c28:	d8c00115 	stw	r3,4(sp)
    1c2c:	d8800015 	stw	r2,0(sp)
    1c30:	01c05044 	movi	r7,321
    1c34:	018000b4 	movhi	r6,2
    1c38:	31bab604 	addi	r6,r6,-5416
    1c3c:	014000b4 	movhi	r5,2
    1c40:	297b2f04 	addi	r5,r5,-4932
    1c44:	8009883a 	mov	r4,r16
    1c48:	0001ea40 	call	1ea4 <fprintf>
}
    1c4c:	e6ffff04 	addi	sp,fp,-4
    1c50:	dfc00217 	ldw	ra,8(sp)
    1c54:	df000117 	ldw	fp,4(sp)
    1c58:	dc000017 	ldw	r16,0(sp)
    1c5c:	dec00304 	addi	sp,sp,12
    1c60:	f800283a 	ret

00001c64 <HEX_PS2>:
/****************************************************************************************
 * Subroutine to show a string of HEX data on the HEX displays
 ****************************************************************************************/
void
HEX_PS2(char b1, char b2, char b3)
{
    1c64:	deffef04 	addi	sp,sp,-68
    1c68:	dfc01015 	stw	ra,64(sp)
    1c6c:	df000f15 	stw	fp,60(sp)
    1c70:	df000f04 	addi	fp,sp,60
    1c74:	2807883a 	mov	r3,r5
    1c78:	3005883a 	mov	r2,r6
    1c7c:	e13ffd05 	stb	r4,-12(fp)
    1c80:	e0fffe05 	stb	r3,-8(fp)
    1c84:	e0bfff05 	stb	r2,-4(fp)
  volatile int* HEX3_HEX0_ptr = (int*)HEX3_HEX0_BASE;
    1c88:	00bfc834 	movhi	r2,65312
    1c8c:	10800804 	addi	r2,r2,32
    1c90:	e0bff315 	stw	r2,-52(fp)
  volatile int* HEX5_HEX4_ptr = (int*)HEX5_HEX4_BASE;
    1c94:	00bfc834 	movhi	r2,65312
    1c98:	10800c04 	addi	r2,r2,48
    1c9c:	e0bff415 	stw	r2,-48(fp)

  /* SEVEN_SEGMENT_DECODE_TABLE gives the on/off settings for all segments in
   * a single 7-seg display in the DE1-SoC Computer, for the hex digits 0 - F
   */
  unsigned char seven_seg_decode_table[] = { 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D,
    1ca0:	008000b4 	movhi	r2,2
    1ca4:	10bb3c04 	addi	r2,r2,-4880
    1ca8:	e0fff644 	addi	r3,fp,-39
    1cac:	1009883a 	mov	r4,r2
    1cb0:	00800404 	movi	r2,16
    1cb4:	100d883a 	mov	r6,r2
    1cb8:	200b883a 	mov	r5,r4
    1cbc:	1809883a 	mov	r4,r3
    1cc0:	0001ec80 	call	1ec8 <memcpy>
                                             0x7D, 0x07, 0x7F, 0x67, 0x77, 0x7C,
                                             0x39, 0x5E, 0x79, 0x71 };

  unsigned char hex_segs[] = { 0, 0, 0, 0, 0, 0, 0, 0 };
    1cc4:	e03ffa45 	stb	zero,-23(fp)
    1cc8:	e03ffa85 	stb	zero,-22(fp)
    1ccc:	e03ffac5 	stb	zero,-21(fp)
    1cd0:	e03ffb05 	stb	zero,-20(fp)
    1cd4:	e03ffb45 	stb	zero,-19(fp)
    1cd8:	e03ffb85 	stb	zero,-18(fp)
    1cdc:	e03ffbc5 	stb	zero,-17(fp)
    1ce0:	e03ffc05 	stb	zero,-16(fp)
  unsigned int shift_buffer, nibble;
  unsigned char code;

  int i;

  shift_buffer = (b1 << 16) | (b2 << 8) | b3;
    1ce4:	e0bffd07 	ldb	r2,-12(fp)
    1ce8:	1006943a 	slli	r3,r2,16
    1cec:	e0bffe07 	ldb	r2,-8(fp)
    1cf0:	1004923a 	slli	r2,r2,8
    1cf4:	1886b03a 	or	r3,r3,r2
    1cf8:	e0bfff07 	ldb	r2,-4(fp)
    1cfc:	1884b03a 	or	r2,r3,r2
    1d00:	e0bff115 	stw	r2,-60(fp)

  for (i = 0; i < 6; ++i) {
    1d04:	e03ff215 	stw	zero,-56(fp)
    1d08:	00001306 	br	1d58 <HEX_PS2+0xf4>
    nibble = shift_buffer & 0x0000000F; // character is in rightmost nibble
    1d0c:	e0bff117 	ldw	r2,-60(fp)
    1d10:	108003cc 	andi	r2,r2,15
    1d14:	e0bff515 	stw	r2,-44(fp)
    code = seven_seg_decode_table[nibble];
    1d18:	e0fff644 	addi	r3,fp,-39
    1d1c:	e0bff517 	ldw	r2,-44(fp)
    1d20:	1885883a 	add	r2,r3,r2
    1d24:	10800003 	ldbu	r2,0(r2)
    1d28:	e0bff605 	stb	r2,-40(fp)
    hex_segs[i] = code;
    1d2c:	e0fffa44 	addi	r3,fp,-23
    1d30:	e0bff217 	ldw	r2,-56(fp)
    1d34:	1885883a 	add	r2,r3,r2
    1d38:	e0fff603 	ldbu	r3,-40(fp)
    1d3c:	10c00005 	stb	r3,0(r2)
    shift_buffer = shift_buffer >> 4;
    1d40:	e0bff117 	ldw	r2,-60(fp)
    1d44:	1004d13a 	srli	r2,r2,4
    1d48:	e0bff115 	stw	r2,-60(fp)

  int i;

  shift_buffer = (b1 << 16) | (b2 << 8) | b3;

  for (i = 0; i < 6; ++i) {
    1d4c:	e0bff217 	ldw	r2,-56(fp)
    1d50:	10800044 	addi	r2,r2,1
    1d54:	e0bff215 	stw	r2,-56(fp)
    1d58:	e0bff217 	ldw	r2,-56(fp)
    1d5c:	10800190 	cmplti	r2,r2,6
    1d60:	103fea1e 	bne	r2,zero,1d0c <HEX_PS2+0xa8>
    hex_segs[i] = code;
    shift_buffer = shift_buffer >> 4;
  }

  /* drive the hex displays */
  *(HEX3_HEX0_ptr) = *(int*)(hex_segs);
    1d64:	e0bffa44 	addi	r2,fp,-23
    1d68:	10c00017 	ldw	r3,0(r2)
    1d6c:	e0bff317 	ldw	r2,-52(fp)
    1d70:	10c00015 	stw	r3,0(r2)
  *(HEX5_HEX4_ptr) = *(int*)(hex_segs + 4);
    1d74:	e0bffb43 	ldbu	r2,-19(fp)
    1d78:	e0fffb83 	ldbu	r3,-18(fp)
    1d7c:	1806923a 	slli	r3,r3,8
    1d80:	1884b03a 	or	r2,r3,r2
    1d84:	e0fffbc3 	ldbu	r3,-17(fp)
    1d88:	1806943a 	slli	r3,r3,16
    1d8c:	1884b03a 	or	r2,r3,r2
    1d90:	e0fffc03 	ldbu	r3,-16(fp)
    1d94:	1806963a 	slli	r3,r3,24
    1d98:	1884b03a 	or	r2,r3,r2
    1d9c:	1007883a 	mov	r3,r2
    1da0:	e0bff417 	ldw	r2,-48(fp)
    1da4:	10c00015 	stw	r3,0(r2)
}
    1da8:	0001883a 	nop
    1dac:	e037883a 	mov	sp,fp
    1db0:	dfc00117 	ldw	ra,4(sp)
    1db4:	df000017 	ldw	fp,0(sp)
    1db8:	dec00204 	addi	sp,sp,8
    1dbc:	f800283a 	ret

00001dc0 <read_PS2_KeyboardInput>:
/* ************************************************************************** */
/*                           Read PS2 Keyboard Input                          */
/* ************************************************************************** */
void
read_PS2_KeyboardInput(void)
{
    1dc0:	defff904 	addi	sp,sp,-28
    1dc4:	dfc00615 	stw	ra,24(sp)
    1dc8:	df000515 	stw	fp,20(sp)
    1dcc:	df000504 	addi	fp,sp,20
  volatile int* PS2_ptr = (int*)PS2_BASE;
    1dd0:	00bfc834 	movhi	r2,65312
    1dd4:	10804004 	addi	r2,r2,256
    1dd8:	e0bffc15 	stw	r2,-16(fp)

  int PS2_data, RVALID;
  char byte1 = 0, byte2 = 0, byte3 = 0;
    1ddc:	e03ffd05 	stb	zero,-12(fp)
    1de0:	e03ffb05 	stb	zero,-20(fp)
    1de4:	e03ffb45 	stb	zero,-19(fp)

  *(PS2_ptr) = 0xFF; // reset
    1de8:	e0bffc17 	ldw	r2,-16(fp)
    1dec:	00c03fc4 	movi	r3,255
    1df0:	10c00015 	stw	r3,0(r2)

  while (1) {
    PS2_data = *(PS2_ptr);      // read the Data register in the PS/2 port
    1df4:	e0bffc17 	ldw	r2,-16(fp)
    1df8:	10800017 	ldw	r2,0(r2)
    1dfc:	e0bffe15 	stw	r2,-8(fp)
    RVALID = PS2_data & 0x8000; // extract the RVALID field
    1e00:	e0bffe17 	ldw	r2,-8(fp)
    1e04:	10a0000c 	andi	r2,r2,32768
    1e08:	e0bfff15 	stw	r2,-4(fp)

    if (RVALID) {
    1e0c:	e0bfff17 	ldw	r2,-4(fp)
    1e10:	103ff826 	beq	r2,zero,1df4 <read_PS2_KeyboardInput+0x34>
      /* shift the next data byte into the display */
      byte1 = byte2;
    1e14:	e0bffb03 	ldbu	r2,-20(fp)
    1e18:	e0bffd05 	stb	r2,-12(fp)
      byte2 = byte3;
    1e1c:	e0bffb43 	ldbu	r2,-19(fp)
    1e20:	e0bffb05 	stb	r2,-20(fp)
      byte3 = PS2_data & 0xFF;
    1e24:	e0bffe17 	ldw	r2,-8(fp)
    1e28:	e0bffb45 	stb	r2,-19(fp)

      HEX_PS2(byte1, byte2, byte3);
    1e2c:	e0bffd07 	ldb	r2,-12(fp)
    1e30:	e0fffb07 	ldb	r3,-20(fp)
    1e34:	e13ffb47 	ldb	r4,-19(fp)
    1e38:	200d883a 	mov	r6,r4
    1e3c:	180b883a 	mov	r5,r3
    1e40:	1009883a 	mov	r4,r2
    1e44:	0001c640 	call	1c64 <HEX_PS2>

      if ((byte2 == (char)0xAA) && (byte3 == (char)0x00))
    1e48:	e0bffb07 	ldb	r2,-20(fp)
    1e4c:	10bfea98 	cmpnei	r2,r2,-86
    1e50:	103fe81e 	bne	r2,zero,1df4 <read_PS2_KeyboardInput+0x34>
    1e54:	e0bffb47 	ldb	r2,-19(fp)
    1e58:	103fe61e 	bne	r2,zero,1df4 <read_PS2_KeyboardInput+0x34>
        *(PS2_ptr) = 0xF4;
    1e5c:	e0bffc17 	ldw	r2,-16(fp)
    1e60:	00c03d04 	movi	r3,244
    1e64:	10c00015 	stw	r3,0(r2)
    }
  }
    1e68:	003fe206 	br	1df4 <read_PS2_KeyboardInput+0x34>

00001e6c <__errno>:
    1e6c:	008000b4 	movhi	r2,2
    1e70:	1085ef04 	addi	r2,r2,6076
    1e74:	10800017 	ldw	r2,0(r2)
    1e78:	f800283a 	ret

00001e7c <_fprintf_r>:
    1e7c:	defffe04 	addi	sp,sp,-8
    1e80:	2809883a 	mov	r4,r5
    1e84:	300b883a 	mov	r5,r6
    1e88:	dfc00015 	stw	ra,0(sp)
    1e8c:	d9c00115 	stw	r7,4(sp)
    1e90:	d9800104 	addi	r6,sp,4
    1e94:	0006c940 	call	6c94 <__vfprintf_internal>
    1e98:	dfc00017 	ldw	ra,0(sp)
    1e9c:	dec00204 	addi	sp,sp,8
    1ea0:	f800283a 	ret

00001ea4 <fprintf>:
    1ea4:	defffd04 	addi	sp,sp,-12
    1ea8:	dfc00015 	stw	ra,0(sp)
    1eac:	d9800115 	stw	r6,4(sp)
    1eb0:	d9c00215 	stw	r7,8(sp)
    1eb4:	d9800104 	addi	r6,sp,4
    1eb8:	0006c940 	call	6c94 <__vfprintf_internal>
    1ebc:	dfc00017 	ldw	ra,0(sp)
    1ec0:	dec00304 	addi	sp,sp,12
    1ec4:	f800283a 	ret

00001ec8 <memcpy>:
    1ec8:	defffd04 	addi	sp,sp,-12
    1ecc:	dfc00215 	stw	ra,8(sp)
    1ed0:	dc400115 	stw	r17,4(sp)
    1ed4:	dc000015 	stw	r16,0(sp)
    1ed8:	00c003c4 	movi	r3,15
    1edc:	2005883a 	mov	r2,r4
    1ee0:	1980452e 	bgeu	r3,r6,1ff8 <memcpy+0x130>
    1ee4:	2906b03a 	or	r3,r5,r4
    1ee8:	18c000cc 	andi	r3,r3,3
    1eec:	1800441e 	bne	r3,zero,2000 <memcpy+0x138>
    1ef0:	347ffc04 	addi	r17,r6,-16
    1ef4:	8822d13a 	srli	r17,r17,4
    1ef8:	28c00104 	addi	r3,r5,4
    1efc:	23400104 	addi	r13,r4,4
    1f00:	8820913a 	slli	r16,r17,4
    1f04:	2b000204 	addi	r12,r5,8
    1f08:	22c00204 	addi	r11,r4,8
    1f0c:	84000504 	addi	r16,r16,20
    1f10:	2a800304 	addi	r10,r5,12
    1f14:	22400304 	addi	r9,r4,12
    1f18:	2c21883a 	add	r16,r5,r16
    1f1c:	2811883a 	mov	r8,r5
    1f20:	200f883a 	mov	r7,r4
    1f24:	41000017 	ldw	r4,0(r8)
    1f28:	1fc00017 	ldw	ra,0(r3)
    1f2c:	63c00017 	ldw	r15,0(r12)
    1f30:	39000015 	stw	r4,0(r7)
    1f34:	53800017 	ldw	r14,0(r10)
    1f38:	6fc00015 	stw	ra,0(r13)
    1f3c:	5bc00015 	stw	r15,0(r11)
    1f40:	4b800015 	stw	r14,0(r9)
    1f44:	18c00404 	addi	r3,r3,16
    1f48:	39c00404 	addi	r7,r7,16
    1f4c:	42000404 	addi	r8,r8,16
    1f50:	6b400404 	addi	r13,r13,16
    1f54:	63000404 	addi	r12,r12,16
    1f58:	5ac00404 	addi	r11,r11,16
    1f5c:	52800404 	addi	r10,r10,16
    1f60:	4a400404 	addi	r9,r9,16
    1f64:	1c3fef1e 	bne	r3,r16,1f24 <memcpy+0x5c>
    1f68:	89c00044 	addi	r7,r17,1
    1f6c:	380e913a 	slli	r7,r7,4
    1f70:	310003cc 	andi	r4,r6,15
    1f74:	02c000c4 	movi	r11,3
    1f78:	11c7883a 	add	r3,r2,r7
    1f7c:	29cb883a 	add	r5,r5,r7
    1f80:	5900212e 	bgeu	r11,r4,2008 <memcpy+0x140>
    1f84:	1813883a 	mov	r9,r3
    1f88:	2811883a 	mov	r8,r5
    1f8c:	200f883a 	mov	r7,r4
    1f90:	42800017 	ldw	r10,0(r8)
    1f94:	4a400104 	addi	r9,r9,4
    1f98:	39ffff04 	addi	r7,r7,-4
    1f9c:	4abfff15 	stw	r10,-4(r9)
    1fa0:	42000104 	addi	r8,r8,4
    1fa4:	59fffa36 	bltu	r11,r7,1f90 <memcpy+0xc8>
    1fa8:	213fff04 	addi	r4,r4,-4
    1fac:	2008d0ba 	srli	r4,r4,2
    1fb0:	318000cc 	andi	r6,r6,3
    1fb4:	21000044 	addi	r4,r4,1
    1fb8:	2109883a 	add	r4,r4,r4
    1fbc:	2109883a 	add	r4,r4,r4
    1fc0:	1907883a 	add	r3,r3,r4
    1fc4:	290b883a 	add	r5,r5,r4
    1fc8:	30000626 	beq	r6,zero,1fe4 <memcpy+0x11c>
    1fcc:	198d883a 	add	r6,r3,r6
    1fd0:	29c00003 	ldbu	r7,0(r5)
    1fd4:	18c00044 	addi	r3,r3,1
    1fd8:	29400044 	addi	r5,r5,1
    1fdc:	19ffffc5 	stb	r7,-1(r3)
    1fe0:	19bffb1e 	bne	r3,r6,1fd0 <memcpy+0x108>
    1fe4:	dfc00217 	ldw	ra,8(sp)
    1fe8:	dc400117 	ldw	r17,4(sp)
    1fec:	dc000017 	ldw	r16,0(sp)
    1ff0:	dec00304 	addi	sp,sp,12
    1ff4:	f800283a 	ret
    1ff8:	2007883a 	mov	r3,r4
    1ffc:	003ff206 	br	1fc8 <memcpy+0x100>
    2000:	2007883a 	mov	r3,r4
    2004:	003ff106 	br	1fcc <memcpy+0x104>
    2008:	200d883a 	mov	r6,r4
    200c:	003fee06 	br	1fc8 <memcpy+0x100>

00002010 <srand>:
    2010:	008000b4 	movhi	r2,2
    2014:	1085ef04 	addi	r2,r2,6076
    2018:	10800017 	ldw	r2,0(r2)
    201c:	11002915 	stw	r4,164(r2)
    2020:	10002a15 	stw	zero,168(r2)
    2024:	f800283a 	ret

00002028 <rand>:
    2028:	008000b4 	movhi	r2,2
    202c:	1085ef04 	addi	r2,r2,6076
    2030:	11c00017 	ldw	r7,0(r2)
    2034:	01532574 	movhi	r5,19605
    2038:	019614b4 	movhi	r6,22610
    203c:	38c02917 	ldw	r3,164(r7)
    2040:	39002a17 	ldw	r4,168(r7)
    2044:	295fcb44 	addi	r5,r5,32557
    2048:	31bd0b44 	addi	r6,r6,-3027
    204c:	1951383a 	mul	r8,r3,r5
    2050:	2149383a 	mul	r4,r4,r5
    2054:	198d383a 	mul	r6,r3,r6
    2058:	194a383a 	mulxuu	r5,r3,r5
    205c:	40800044 	addi	r2,r8,1
    2060:	2187883a 	add	r3,r4,r6
    2064:	1949883a 	add	r4,r3,r5
    2068:	38802915 	stw	r2,164(r7)
    206c:	1207803a 	cmpltu	r3,r2,r8
    2070:	00a00034 	movhi	r2,32768
    2074:	1907883a 	add	r3,r3,r4
    2078:	10bfffc4 	addi	r2,r2,-1
    207c:	38c02a15 	stw	r3,168(r7)
    2080:	1884703a 	and	r2,r3,r2
    2084:	f800283a 	ret

00002088 <_snprintf_r>:
    2088:	30003116 	blt	r6,zero,2150 <_snprintf_r+0xc8>
    208c:	deffe404 	addi	sp,sp,-112
    2090:	00c08204 	movi	r3,520
    2094:	dc001a15 	stw	r16,104(sp)
    2098:	3005883a 	mov	r2,r6
    209c:	dfc01b15 	stw	ra,108(sp)
    20a0:	d8c0030d 	sth	r3,12(sp)
    20a4:	d9400015 	stw	r5,0(sp)
    20a8:	d9400415 	stw	r5,16(sp)
    20ac:	380d883a 	mov	r6,r7
    20b0:	2021883a 	mov	r16,r4
    20b4:	10001026 	beq	r2,zero,20f8 <_snprintf_r+0x70>
    20b8:	10bfffc4 	addi	r2,r2,-1
    20bc:	d8800215 	stw	r2,8(sp)
    20c0:	d8800515 	stw	r2,20(sp)
    20c4:	d9c01c04 	addi	r7,sp,112
    20c8:	00bfffc4 	movi	r2,-1
    20cc:	d80b883a 	mov	r5,sp
    20d0:	d880038d 	sth	r2,14(sp)
    20d4:	00028bc0 	call	28bc <___svfprintf_internal_r>
    20d8:	00ffffc4 	movi	r3,-1
    20dc:	10c01316 	blt	r2,r3,212c <_snprintf_r+0xa4>
    20e0:	d8c00017 	ldw	r3,0(sp)
    20e4:	18000005 	stb	zero,0(r3)
    20e8:	dfc01b17 	ldw	ra,108(sp)
    20ec:	dc001a17 	ldw	r16,104(sp)
    20f0:	dec01c04 	addi	sp,sp,112
    20f4:	f800283a 	ret
    20f8:	00bfffc4 	movi	r2,-1
    20fc:	d9c01c04 	addi	r7,sp,112
    2100:	d80b883a 	mov	r5,sp
    2104:	d8000215 	stw	zero,8(sp)
    2108:	d8000515 	stw	zero,20(sp)
    210c:	d880038d 	sth	r2,14(sp)
    2110:	00028bc0 	call	28bc <___svfprintf_internal_r>
    2114:	00ffffc4 	movi	r3,-1
    2118:	10c00716 	blt	r2,r3,2138 <_snprintf_r+0xb0>
    211c:	dfc01b17 	ldw	ra,108(sp)
    2120:	dc001a17 	ldw	r16,104(sp)
    2124:	dec01c04 	addi	sp,sp,112
    2128:	f800283a 	ret
    212c:	00c022c4 	movi	r3,139
    2130:	80c00015 	stw	r3,0(r16)
    2134:	003fea06 	br	20e0 <_snprintf_r+0x58>
    2138:	00c022c4 	movi	r3,139
    213c:	80c00015 	stw	r3,0(r16)
    2140:	dfc01b17 	ldw	ra,108(sp)
    2144:	dc001a17 	ldw	r16,104(sp)
    2148:	dec01c04 	addi	sp,sp,112
    214c:	f800283a 	ret
    2150:	008022c4 	movi	r2,139
    2154:	20800015 	stw	r2,0(r4)
    2158:	00bfffc4 	movi	r2,-1
    215c:	f800283a 	ret

00002160 <snprintf>:
    2160:	deffe304 	addi	sp,sp,-116
    2164:	dfc01b15 	stw	ra,108(sp)
    2168:	dc001a15 	stw	r16,104(sp)
    216c:	d9c01c15 	stw	r7,112(sp)
    2170:	008000b4 	movhi	r2,2
    2174:	1085ef04 	addi	r2,r2,6076
    2178:	14000017 	ldw	r16,0(r2)
    217c:	28002d16 	blt	r5,zero,2234 <snprintf+0xd4>
    2180:	00808204 	movi	r2,520
    2184:	d880030d 	sth	r2,12(sp)
    2188:	d9000015 	stw	r4,0(sp)
    218c:	d9000415 	stw	r4,16(sp)
    2190:	28001126 	beq	r5,zero,21d8 <snprintf+0x78>
    2194:	28bfffc4 	addi	r2,r5,-1
    2198:	d8800215 	stw	r2,8(sp)
    219c:	d8800515 	stw	r2,20(sp)
    21a0:	d9c01c04 	addi	r7,sp,112
    21a4:	00bfffc4 	movi	r2,-1
    21a8:	d80b883a 	mov	r5,sp
    21ac:	8009883a 	mov	r4,r16
    21b0:	d880038d 	sth	r2,14(sp)
    21b4:	00028bc0 	call	28bc <___svfprintf_internal_r>
    21b8:	00ffffc4 	movi	r3,-1
    21bc:	10c01416 	blt	r2,r3,2210 <snprintf+0xb0>
    21c0:	d8c00017 	ldw	r3,0(sp)
    21c4:	18000005 	stb	zero,0(r3)
    21c8:	dfc01b17 	ldw	ra,108(sp)
    21cc:	dc001a17 	ldw	r16,104(sp)
    21d0:	dec01d04 	addi	sp,sp,116
    21d4:	f800283a 	ret
    21d8:	00bfffc4 	movi	r2,-1
    21dc:	d9c01c04 	addi	r7,sp,112
    21e0:	d80b883a 	mov	r5,sp
    21e4:	8009883a 	mov	r4,r16
    21e8:	d8000215 	stw	zero,8(sp)
    21ec:	d8000515 	stw	zero,20(sp)
    21f0:	d880038d 	sth	r2,14(sp)
    21f4:	00028bc0 	call	28bc <___svfprintf_internal_r>
    21f8:	00ffffc4 	movi	r3,-1
    21fc:	10c00716 	blt	r2,r3,221c <snprintf+0xbc>
    2200:	dfc01b17 	ldw	ra,108(sp)
    2204:	dc001a17 	ldw	r16,104(sp)
    2208:	dec01d04 	addi	sp,sp,116
    220c:	f800283a 	ret
    2210:	00c022c4 	movi	r3,139
    2214:	80c00015 	stw	r3,0(r16)
    2218:	003fe906 	br	21c0 <snprintf+0x60>
    221c:	00c022c4 	movi	r3,139
    2220:	80c00015 	stw	r3,0(r16)
    2224:	dfc01b17 	ldw	ra,108(sp)
    2228:	dc001a17 	ldw	r16,104(sp)
    222c:	dec01d04 	addi	sp,sp,116
    2230:	f800283a 	ret
    2234:	008022c4 	movi	r2,139
    2238:	80800015 	stw	r2,0(r16)
    223c:	00bfffc4 	movi	r2,-1
    2240:	003fef06 	br	2200 <snprintf+0xa0>

00002244 <_strerror_r>:
    2244:	deffff04 	addi	sp,sp,-4
    2248:	2807883a 	mov	r3,r5
    224c:	dfc00015 	stw	ra,0(sp)
    2250:	00802384 	movi	r2,142
    2254:	300b883a 	mov	r5,r6
    2258:	10c18736 	bltu	r2,r3,2878 <_strerror_r+0x634>
    225c:	181090ba 	slli	r8,r3,2
    2260:	00800034 	movhi	r2,0
    2264:	10889d04 	addi	r2,r2,8820
    2268:	4085883a 	add	r2,r8,r2
    226c:	10800017 	ldw	r2,0(r2)
    2270:	1000683a 	jmp	r2
    2274:	000024b0 	cmpltui	zero,zero,146
    2278:	0000286c 	andhi	zero,zero,161
    227c:	00002860 	cmpeqi	zero,zero,161
    2280:	00002854 	movui	zero,161
    2284:	00002848 	cmpgei	zero,zero,161
    2288:	0000283c 	xorhi	zero,zero,160
    228c:	00002830 	cmpltui	zero,zero,160
    2290:	00002824 	muli	zero,zero,160
    2294:	00002818 	cmpnei	zero,zero,160
    2298:	0000280c 	andi	zero,zero,160
    229c:	00002800 	call	280 <alt_after_alt_main>
    22a0:	000027f4 	movhi	zero,159
    22a4:	000027e8 	cmpgeui	zero,zero,159
    22a8:	000027dc 	xori	zero,zero,159
    22ac:	000027d0 	cmplti	zero,zero,159
    22b0:	00002878 	rdprs	zero,zero,161
    22b4:	000027c4 	movi	zero,159
    22b8:	000027b8 	rdprs	zero,zero,158
    22bc:	000027ac 	andhi	zero,zero,158
    22c0:	000027a0 	cmpeqi	zero,zero,158
    22c4:	00002794 	movui	zero,158
    22c8:	00002788 	cmpgei	zero,zero,158
    22cc:	0000277c 	xorhi	zero,zero,157
    22d0:	00002770 	cmpltui	zero,zero,157
    22d4:	00002764 	muli	zero,zero,157
    22d8:	00002758 	cmpnei	zero,zero,157
    22dc:	0000274c 	andi	zero,zero,157
    22e0:	00002740 	call	274 <_start+0x2c>
    22e4:	00002734 	movhi	zero,156
    22e8:	00002728 	cmpgeui	zero,zero,156
    22ec:	0000271c 	xori	zero,zero,156
    22f0:	00002710 	cmplti	zero,zero,156
    22f4:	00002704 	movi	zero,156
    22f8:	000026f8 	rdprs	zero,zero,155
    22fc:	000026ec 	andhi	zero,zero,155
    2300:	000026e0 	cmpeqi	zero,zero,155
    2304:	000026d4 	movui	zero,155
    2308:	00002878 	rdprs	zero,zero,161
    230c:	00002878 	rdprs	zero,zero,161
    2310:	00002878 	rdprs	zero,zero,161
    2314:	00002878 	rdprs	zero,zero,161
    2318:	00002878 	rdprs	zero,zero,161
    231c:	00002878 	rdprs	zero,zero,161
    2320:	00002878 	rdprs	zero,zero,161
    2324:	00002878 	rdprs	zero,zero,161
    2328:	000026c8 	cmpgei	zero,zero,155
    232c:	000026bc 	xorhi	zero,zero,154
    2330:	00002878 	rdprs	zero,zero,161
    2334:	00002878 	rdprs	zero,zero,161
    2338:	00002878 	rdprs	zero,zero,161
    233c:	00002878 	rdprs	zero,zero,161
    2340:	00002878 	rdprs	zero,zero,161
    2344:	00002878 	rdprs	zero,zero,161
    2348:	00002878 	rdprs	zero,zero,161
    234c:	00002878 	rdprs	zero,zero,161
    2350:	00002878 	rdprs	zero,zero,161
    2354:	00002878 	rdprs	zero,zero,161
    2358:	00002878 	rdprs	zero,zero,161
    235c:	00002878 	rdprs	zero,zero,161
    2360:	00002878 	rdprs	zero,zero,161
    2364:	000026b0 	cmpltui	zero,zero,154
    2368:	000026a4 	muli	zero,zero,154
    236c:	00002698 	cmpnei	zero,zero,154
    2370:	0000268c 	andi	zero,zero,154
    2374:	00002878 	rdprs	zero,zero,161
    2378:	00002878 	rdprs	zero,zero,161
    237c:	00002878 	rdprs	zero,zero,161
    2380:	00002680 	call	268 <_start+0x20>
    2384:	00002878 	rdprs	zero,zero,161
    2388:	00002878 	rdprs	zero,zero,161
    238c:	00002878 	rdprs	zero,zero,161
    2390:	00002674 	movhi	zero,153
    2394:	00002878 	rdprs	zero,zero,161
    2398:	00002878 	rdprs	zero,zero,161
    239c:	00002668 	cmpgeui	zero,zero,153
    23a0:	00002878 	rdprs	zero,zero,161
    23a4:	00002878 	rdprs	zero,zero,161
    23a8:	0000265c 	xori	zero,zero,153
    23ac:	00002878 	rdprs	zero,zero,161
    23b0:	00002878 	rdprs	zero,zero,161
    23b4:	00002878 	rdprs	zero,zero,161
    23b8:	00002878 	rdprs	zero,zero,161
    23bc:	00002878 	rdprs	zero,zero,161
    23c0:	00002878 	rdprs	zero,zero,161
    23c4:	00002878 	rdprs	zero,zero,161
    23c8:	00002878 	rdprs	zero,zero,161
    23cc:	00002878 	rdprs	zero,zero,161
    23d0:	00002878 	rdprs	zero,zero,161
    23d4:	00002650 	cmplti	zero,zero,153
    23d8:	00002878 	rdprs	zero,zero,161
    23dc:	00002644 	movi	zero,153
    23e0:	00002638 	rdprs	zero,zero,152
    23e4:	0000262c 	andhi	zero,zero,152
    23e8:	00002878 	rdprs	zero,zero,161
    23ec:	00002878 	rdprs	zero,zero,161
    23f0:	00002620 	cmpeqi	zero,zero,152
    23f4:	00002878 	rdprs	zero,zero,161
    23f8:	00002878 	rdprs	zero,zero,161
    23fc:	00002878 	rdprs	zero,zero,161
    2400:	00002878 	rdprs	zero,zero,161
    2404:	00002878 	rdprs	zero,zero,161
    2408:	00002878 	rdprs	zero,zero,161
    240c:	00002878 	rdprs	zero,zero,161
    2410:	00002878 	rdprs	zero,zero,161
    2414:	00002614 	movui	zero,152
    2418:	00002608 	cmpgei	zero,zero,152
    241c:	000025fc 	xorhi	zero,zero,151
    2420:	000025f0 	cmpltui	zero,zero,151
    2424:	000025e4 	muli	zero,zero,151
    2428:	000025d8 	cmpnei	zero,zero,151
    242c:	00002878 	rdprs	zero,zero,161
    2430:	000025cc 	andi	zero,zero,151
    2434:	000025c0 	call	25c <_start+0x14>
    2438:	000025b4 	movhi	zero,150
    243c:	000025a8 	cmpgeui	zero,zero,150
    2440:	0000259c 	xori	zero,zero,150
    2444:	00002590 	cmplti	zero,zero,150
    2448:	00002584 	movi	zero,150
    244c:	00002578 	rdprs	zero,zero,149
    2450:	0000256c 	andhi	zero,zero,149
    2454:	00002560 	cmpeqi	zero,zero,149
    2458:	00002554 	movui	zero,149
    245c:	00002548 	cmpgei	zero,zero,149
    2460:	0000253c 	xorhi	zero,zero,148
    2464:	00002878 	rdprs	zero,zero,161
    2468:	00002530 	cmpltui	zero,zero,148
    246c:	00002524 	muli	zero,zero,148
    2470:	00002518 	cmpnei	zero,zero,148
    2474:	0000250c 	andi	zero,zero,148
    2478:	00002878 	rdprs	zero,zero,161
    247c:	00002878 	rdprs	zero,zero,161
    2480:	00002878 	rdprs	zero,zero,161
    2484:	00002878 	rdprs	zero,zero,161
    2488:	00002878 	rdprs	zero,zero,161
    248c:	00002500 	call	250 <_start+0x8>
    2490:	00002878 	rdprs	zero,zero,161
    2494:	00002878 	rdprs	zero,zero,161
    2498:	00002878 	rdprs	zero,zero,161
    249c:	000024f4 	movhi	zero,147
    24a0:	000024e8 	cmpgeui	zero,zero,147
    24a4:	000024dc 	xori	zero,zero,147
    24a8:	000024d0 	cmplti	zero,zero,147
    24ac:	000024c4 	movi	zero,147
    24b0:	008000b4 	movhi	r2,2
    24b4:	10bb4104 	addi	r2,r2,-4860
    24b8:	dfc00017 	ldw	ra,0(sp)
    24bc:	dec00104 	addi	sp,sp,4
    24c0:	f800283a 	ret
    24c4:	008000b4 	movhi	r2,2
    24c8:	10bcde04 	addi	r2,r2,-3208
    24cc:	003ffa06 	br	24b8 <_strerror_r+0x274>
    24d0:	008000b4 	movhi	r2,2
    24d4:	10bcd804 	addi	r2,r2,-3232
    24d8:	003ff706 	br	24b8 <_strerror_r+0x274>
    24dc:	008000b4 	movhi	r2,2
    24e0:	10bcd304 	addi	r2,r2,-3252
    24e4:	003ff406 	br	24b8 <_strerror_r+0x274>
    24e8:	008000b4 	movhi	r2,2
    24ec:	10bcec04 	addi	r2,r2,-3152
    24f0:	003ff106 	br	24b8 <_strerror_r+0x274>
    24f4:	008000b4 	movhi	r2,2
    24f8:	10bc2a04 	addi	r2,r2,-3928
    24fc:	003fee06 	br	24b8 <_strerror_r+0x274>
    2500:	008000b4 	movhi	r2,2
    2504:	10bbf804 	addi	r2,r2,-4128
    2508:	003feb06 	br	24b8 <_strerror_r+0x274>
    250c:	008000b4 	movhi	r2,2
    2510:	10bcc604 	addi	r2,r2,-3304
    2514:	003fe806 	br	24b8 <_strerror_r+0x274>
    2518:	008000b4 	movhi	r2,2
    251c:	10bccc04 	addi	r2,r2,-3280
    2520:	003fe506 	br	24b8 <_strerror_r+0x274>
    2524:	008000b4 	movhi	r2,2
    2528:	10bbc704 	addi	r2,r2,-4324
    252c:	003fe206 	br	24b8 <_strerror_r+0x274>
    2530:	008000b4 	movhi	r2,2
    2534:	10bcb704 	addi	r2,r2,-3364
    2538:	003fdf06 	br	24b8 <_strerror_r+0x274>
    253c:	008000b4 	movhi	r2,2
    2540:	10bc5404 	addi	r2,r2,-3760
    2544:	003fdc06 	br	24b8 <_strerror_r+0x274>
    2548:	008000b4 	movhi	r2,2
    254c:	10bcf604 	addi	r2,r2,-3112
    2550:	003fd906 	br	24b8 <_strerror_r+0x274>
    2554:	008000b4 	movhi	r2,2
    2558:	10bb7904 	addi	r2,r2,-4636
    255c:	003fd606 	br	24b8 <_strerror_r+0x274>
    2560:	008000b4 	movhi	r2,2
    2564:	10bb6b04 	addi	r2,r2,-4692
    2568:	003fd306 	br	24b8 <_strerror_r+0x274>
    256c:	008000b4 	movhi	r2,2
    2570:	10bbad04 	addi	r2,r2,-4428
    2574:	003fd006 	br	24b8 <_strerror_r+0x274>
    2578:	008000b4 	movhi	r2,2
    257c:	10bbed04 	addi	r2,r2,-4172
    2580:	003fcd06 	br	24b8 <_strerror_r+0x274>
    2584:	008000b4 	movhi	r2,2
    2588:	10bba904 	addi	r2,r2,-4444
    258c:	003fca06 	br	24b8 <_strerror_r+0x274>
    2590:	008000b4 	movhi	r2,2
    2594:	10bcfb04 	addi	r2,r2,-3092
    2598:	003fc706 	br	24b8 <_strerror_r+0x274>
    259c:	008000b4 	movhi	r2,2
    25a0:	10bbbe04 	addi	r2,r2,-4360
    25a4:	003fc406 	br	24b8 <_strerror_r+0x274>
    25a8:	008000b4 	movhi	r2,2
    25ac:	10bc3304 	addi	r2,r2,-3892
    25b0:	003fc106 	br	24b8 <_strerror_r+0x274>
    25b4:	008000b4 	movhi	r2,2
    25b8:	10bcbd04 	addi	r2,r2,-3340
    25bc:	003fbe06 	br	24b8 <_strerror_r+0x274>
    25c0:	008000b4 	movhi	r2,2
    25c4:	10bcb104 	addi	r2,r2,-3388
    25c8:	003fbb06 	br	24b8 <_strerror_r+0x274>
    25cc:	008000b4 	movhi	r2,2
    25d0:	10bca504 	addi	r2,r2,-3436
    25d4:	003fb806 	br	24b8 <_strerror_r+0x274>
    25d8:	008000b4 	movhi	r2,2
    25dc:	10bc9f04 	addi	r2,r2,-3460
    25e0:	003fb506 	br	24b8 <_strerror_r+0x274>
    25e4:	008000b4 	movhi	r2,2
    25e8:	10bc9704 	addi	r2,r2,-3492
    25ec:	003fb206 	br	24b8 <_strerror_r+0x274>
    25f0:	008000b4 	movhi	r2,2
    25f4:	10bc8f04 	addi	r2,r2,-3524
    25f8:	003faf06 	br	24b8 <_strerror_r+0x274>
    25fc:	008000b4 	movhi	r2,2
    2600:	10bc8304 	addi	r2,r2,-3572
    2604:	003fac06 	br	24b8 <_strerror_r+0x274>
    2608:	008000b4 	movhi	r2,2
    260c:	10bc7a04 	addi	r2,r2,-3608
    2610:	003fa906 	br	24b8 <_strerror_r+0x274>
    2614:	008000b4 	movhi	r2,2
    2618:	10bcaa04 	addi	r2,r2,-3416
    261c:	003fa606 	br	24b8 <_strerror_r+0x274>
    2620:	008000b4 	movhi	r2,2
    2624:	10bce304 	addi	r2,r2,-3188
    2628:	003fa306 	br	24b8 <_strerror_r+0x274>
    262c:	008000b4 	movhi	r2,2
    2630:	10bc7404 	addi	r2,r2,-3632
    2634:	003fa006 	br	24b8 <_strerror_r+0x274>
    2638:	008000b4 	movhi	r2,2
    263c:	10bc6d04 	addi	r2,r2,-3660
    2640:	003f9d06 	br	24b8 <_strerror_r+0x274>
    2644:	008000b4 	movhi	r2,2
    2648:	10bc6804 	addi	r2,r2,-3680
    264c:	003f9a06 	br	24b8 <_strerror_r+0x274>
    2650:	008000b4 	movhi	r2,2
    2654:	10bc6104 	addi	r2,r2,-3708
    2658:	003f9706 	br	24b8 <_strerror_r+0x274>
    265c:	008000b4 	movhi	r2,2
    2660:	10bc5e04 	addi	r2,r2,-3720
    2664:	003f9406 	br	24b8 <_strerror_r+0x274>
    2668:	008000b4 	movhi	r2,2
    266c:	10bc5904 	addi	r2,r2,-3740
    2670:	003f9106 	br	24b8 <_strerror_r+0x274>
    2674:	008000b4 	movhi	r2,2
    2678:	10bc5004 	addi	r2,r2,-3776
    267c:	003f8e06 	br	24b8 <_strerror_r+0x274>
    2680:	008000b4 	movhi	r2,2
    2684:	10bc4a04 	addi	r2,r2,-3800
    2688:	003f8b06 	br	24b8 <_strerror_r+0x274>
    268c:	008000b4 	movhi	r2,2
    2690:	10bc4504 	addi	r2,r2,-3820
    2694:	003f8806 	br	24b8 <_strerror_r+0x274>
    2698:	008000b4 	movhi	r2,2
    269c:	10bc3f04 	addi	r2,r2,-3844
    26a0:	003f8506 	br	24b8 <_strerror_r+0x274>
    26a4:	008000b4 	movhi	r2,2
    26a8:	10bc8104 	addi	r2,r2,-3580
    26ac:	003f8206 	br	24b8 <_strerror_r+0x274>
    26b0:	008000b4 	movhi	r2,2
    26b4:	10bc3b04 	addi	r2,r2,-3860
    26b8:	003f7f06 	br	24b8 <_strerror_r+0x274>
    26bc:	008000b4 	movhi	r2,2
    26c0:	10bc3904 	addi	r2,r2,-3868
    26c4:	003f7c06 	br	24b8 <_strerror_r+0x274>
    26c8:	008000b4 	movhi	r2,2
    26cc:	10bc3004 	addi	r2,r2,-3904
    26d0:	003f7906 	br	24b8 <_strerror_r+0x274>
    26d4:	008000b4 	movhi	r2,2
    26d8:	10bc2504 	addi	r2,r2,-3948
    26dc:	003f7606 	br	24b8 <_strerror_r+0x274>
    26e0:	008000b4 	movhi	r2,2
    26e4:	10bc1e04 	addi	r2,r2,-3976
    26e8:	003f7306 	br	24b8 <_strerror_r+0x274>
    26ec:	008000b4 	movhi	r2,2
    26f0:	10bc1904 	addi	r2,r2,-3996
    26f4:	003f7006 	br	24b8 <_strerror_r+0x274>
    26f8:	008000b4 	movhi	r2,2
    26fc:	10bc0d04 	addi	r2,r2,-4044
    2700:	003f6d06 	br	24b8 <_strerror_r+0x274>
    2704:	008000b4 	movhi	r2,2
    2708:	10bc0a04 	addi	r2,r2,-4056
    270c:	003f6a06 	br	24b8 <_strerror_r+0x274>
    2710:	008000b4 	movhi	r2,2
    2714:	10bc0604 	addi	r2,r2,-4072
    2718:	003f6706 	br	24b8 <_strerror_r+0x274>
    271c:	008000b4 	movhi	r2,2
    2720:	10bc0004 	addi	r2,r2,-4096
    2724:	003f6406 	br	24b8 <_strerror_r+0x274>
    2728:	008000b4 	movhi	r2,2
    272c:	10bbfc04 	addi	r2,r2,-4112
    2730:	003f6106 	br	24b8 <_strerror_r+0x274>
    2734:	008000b4 	movhi	r2,2
    2738:	10bbf204 	addi	r2,r2,-4152
    273c:	003f5e06 	br	24b8 <_strerror_r+0x274>
    2740:	008000b4 	movhi	r2,2
    2744:	10bbe904 	addi	r2,r2,-4188
    2748:	003f5b06 	br	24b8 <_strerror_r+0x274>
    274c:	008000b4 	movhi	r2,2
    2750:	10bbe504 	addi	r2,r2,-4204
    2754:	003f5806 	br	24b8 <_strerror_r+0x274>
    2758:	008000b4 	movhi	r2,2
    275c:	10bbdf04 	addi	r2,r2,-4228
    2760:	003f5506 	br	24b8 <_strerror_r+0x274>
    2764:	008000b4 	movhi	r2,2
    2768:	10bbd704 	addi	r2,r2,-4260
    276c:	003f5206 	br	24b8 <_strerror_r+0x274>
    2770:	008000b4 	movhi	r2,2
    2774:	10bbcf04 	addi	r2,r2,-4292
    2778:	003f4f06 	br	24b8 <_strerror_r+0x274>
    277c:	008000b4 	movhi	r2,2
    2780:	10bbb904 	addi	r2,r2,-4380
    2784:	003f4c06 	br	24b8 <_strerror_r+0x274>
    2788:	008000b4 	movhi	r2,2
    278c:	10bbb504 	addi	r2,r2,-4396
    2790:	003f4906 	br	24b8 <_strerror_r+0x274>
    2794:	008000b4 	movhi	r2,2
    2798:	10bba504 	addi	r2,r2,-4460
    279c:	003f4606 	br	24b8 <_strerror_r+0x274>
    27a0:	008000b4 	movhi	r2,2
    27a4:	10bba104 	addi	r2,r2,-4476
    27a8:	003f4306 	br	24b8 <_strerror_r+0x274>
    27ac:	008000b4 	movhi	r2,2
    27b0:	10bb9c04 	addi	r2,r2,-4496
    27b4:	003f4006 	br	24b8 <_strerror_r+0x274>
    27b8:	008000b4 	movhi	r2,2
    27bc:	10bb9904 	addi	r2,r2,-4508
    27c0:	003f3d06 	br	24b8 <_strerror_r+0x274>
    27c4:	008000b4 	movhi	r2,2
    27c8:	10bb9304 	addi	r2,r2,-4532
    27cc:	003f3a06 	br	24b8 <_strerror_r+0x274>
    27d0:	008000b4 	movhi	r2,2
    27d4:	10bb9004 	addi	r2,r2,-4544
    27d8:	003f3706 	br	24b8 <_strerror_r+0x274>
    27dc:	008000b4 	movhi	r2,2
    27e0:	10bb8b04 	addi	r2,r2,-4564
    27e4:	003f3406 	br	24b8 <_strerror_r+0x274>
    27e8:	008000b4 	movhi	r2,2
    27ec:	10bb8604 	addi	r2,r2,-4584
    27f0:	003f3106 	br	24b8 <_strerror_r+0x274>
    27f4:	008000b4 	movhi	r2,2
    27f8:	10bb8104 	addi	r2,r2,-4604
    27fc:	003f2e06 	br	24b8 <_strerror_r+0x274>
    2800:	008000b4 	movhi	r2,2
    2804:	10bb7604 	addi	r2,r2,-4648
    2808:	003f2b06 	br	24b8 <_strerror_r+0x274>
    280c:	008000b4 	movhi	r2,2
    2810:	10bb7204 	addi	r2,r2,-4664
    2814:	003f2806 	br	24b8 <_strerror_r+0x274>
    2818:	008000b4 	movhi	r2,2
    281c:	10bb6604 	addi	r2,r2,-4712
    2820:	003f2506 	br	24b8 <_strerror_r+0x274>
    2824:	008000b4 	movhi	r2,2
    2828:	10bb6104 	addi	r2,r2,-4732
    282c:	003f2206 	br	24b8 <_strerror_r+0x274>
    2830:	008000b4 	movhi	r2,2
    2834:	10bb5a04 	addi	r2,r2,-4760
    2838:	003f1f06 	br	24b8 <_strerror_r+0x274>
    283c:	008000b4 	movhi	r2,2
    2840:	10bb5704 	addi	r2,r2,-4772
    2844:	003f1c06 	br	24b8 <_strerror_r+0x274>
    2848:	008000b4 	movhi	r2,2
    284c:	10bb5104 	addi	r2,r2,-4796
    2850:	003f1906 	br	24b8 <_strerror_r+0x274>
    2854:	008000b4 	movhi	r2,2
    2858:	10bb4d04 	addi	r2,r2,-4812
    285c:	003f1606 	br	24b8 <_strerror_r+0x274>
    2860:	008000b4 	movhi	r2,2
    2864:	10bb4604 	addi	r2,r2,-4840
    2868:	003f1306 	br	24b8 <_strerror_r+0x274>
    286c:	008000b4 	movhi	r2,2
    2870:	10bb4304 	addi	r2,r2,-4852
    2874:	003f1006 	br	24b8 <_strerror_r+0x274>
    2878:	38000726 	beq	r7,zero,2898 <_strerror_r+0x654>
    287c:	380d883a 	mov	r6,r7
    2880:	1809883a 	mov	r4,r3
    2884:	0004a940 	call	4a94 <_user_strerror>
    2888:	103f0b1e 	bne	r2,zero,24b8 <_strerror_r+0x274>
    288c:	008000b4 	movhi	r2,2
    2890:	10bd0904 	addi	r2,r2,-3036
    2894:	003f0806 	br	24b8 <_strerror_r+0x274>
    2898:	200f883a 	mov	r7,r4
    289c:	003ff706 	br	287c <_strerror_r+0x638>

000028a0 <strerror>:
    28a0:	008000b4 	movhi	r2,2
    28a4:	1085ef04 	addi	r2,r2,6076
    28a8:	200b883a 	mov	r5,r4
    28ac:	11000017 	ldw	r4,0(r2)
    28b0:	000f883a 	mov	r7,zero
    28b4:	000d883a 	mov	r6,zero
    28b8:	00022441 	jmpi	2244 <_strerror_r>

000028bc <___svfprintf_internal_r>:
    28bc:	deffb704 	addi	sp,sp,-292
    28c0:	dfc04815 	stw	ra,288(sp)
    28c4:	ddc04615 	stw	r23,280(sp)
    28c8:	d9402c15 	stw	r5,176(sp)
    28cc:	d9003915 	stw	r4,228(sp)
    28d0:	302f883a 	mov	r23,r6
    28d4:	d9c02d15 	stw	r7,180(sp)
    28d8:	df004715 	stw	fp,284(sp)
    28dc:	dd804515 	stw	r22,276(sp)
    28e0:	dd404415 	stw	r21,272(sp)
    28e4:	dd004315 	stw	r20,268(sp)
    28e8:	dcc04215 	stw	r19,264(sp)
    28ec:	dc804115 	stw	r18,260(sp)
    28f0:	dc404015 	stw	r17,256(sp)
    28f4:	dc003f15 	stw	r16,252(sp)
    28f8:	00093f80 	call	93f8 <_localeconv_r>
    28fc:	10800017 	ldw	r2,0(r2)
    2900:	1009883a 	mov	r4,r2
    2904:	d8803415 	stw	r2,208(sp)
    2908:	000b2d80 	call	b2d8 <strlen>
    290c:	d8c02c17 	ldw	r3,176(sp)
    2910:	d8803815 	stw	r2,224(sp)
    2914:	1880030b 	ldhu	r2,12(r3)
    2918:	1080200c 	andi	r2,r2,128
    291c:	10000226 	beq	r2,zero,2928 <___svfprintf_internal_r+0x6c>
    2920:	18800417 	ldw	r2,16(r3)
    2924:	10067f26 	beq	r2,zero,4324 <___svfprintf_internal_r+0x1a68>
    2928:	dcc03917 	ldw	r19,228(sp)
    292c:	d8c00404 	addi	r3,sp,16
    2930:	054000b4 	movhi	r21,2
    2934:	d9001e04 	addi	r4,sp,120
    2938:	ad7d1184 	addi	r21,r21,-3002
    293c:	d8c01e15 	stw	r3,120(sp)
    2940:	d8002015 	stw	zero,128(sp)
    2944:	d8001f15 	stw	zero,124(sp)
    2948:	d8003315 	stw	zero,204(sp)
    294c:	d8003615 	stw	zero,216(sp)
    2950:	d8003715 	stw	zero,220(sp)
    2954:	1811883a 	mov	r8,r3
    2958:	d8003a15 	stw	zero,232(sp)
    295c:	d8003b15 	stw	zero,236(sp)
    2960:	d8002f15 	stw	zero,188(sp)
    2964:	d9002815 	stw	r4,160(sp)
    2968:	b8800007 	ldb	r2,0(r23)
    296c:	10026726 	beq	r2,zero,330c <___svfprintf_internal_r+0xa50>
    2970:	00c00944 	movi	r3,37
    2974:	b821883a 	mov	r16,r23
    2978:	10c0021e 	bne	r2,r3,2984 <___svfprintf_internal_r+0xc8>
    297c:	00001406 	br	29d0 <___svfprintf_internal_r+0x114>
    2980:	10c00326 	beq	r2,r3,2990 <___svfprintf_internal_r+0xd4>
    2984:	84000044 	addi	r16,r16,1
    2988:	80800007 	ldb	r2,0(r16)
    298c:	103ffc1e 	bne	r2,zero,2980 <___svfprintf_internal_r+0xc4>
    2990:	85e3c83a 	sub	r17,r16,r23
    2994:	88000e26 	beq	r17,zero,29d0 <___svfprintf_internal_r+0x114>
    2998:	d8c02017 	ldw	r3,128(sp)
    299c:	d8801f17 	ldw	r2,124(sp)
    29a0:	45c00015 	stw	r23,0(r8)
    29a4:	1c47883a 	add	r3,r3,r17
    29a8:	10800044 	addi	r2,r2,1
    29ac:	d8c02015 	stw	r3,128(sp)
    29b0:	44400115 	stw	r17,4(r8)
    29b4:	d8801f15 	stw	r2,124(sp)
    29b8:	00c001c4 	movi	r3,7
    29bc:	18809716 	blt	r3,r2,2c1c <___svfprintf_internal_r+0x360>
    29c0:	42000204 	addi	r8,r8,8
    29c4:	d9402f17 	ldw	r5,188(sp)
    29c8:	2c4b883a 	add	r5,r5,r17
    29cc:	d9402f15 	stw	r5,188(sp)
    29d0:	80800007 	ldb	r2,0(r16)
    29d4:	10009826 	beq	r2,zero,2c38 <___svfprintf_internal_r+0x37c>
    29d8:	84400047 	ldb	r17,1(r16)
    29dc:	00bfffc4 	movi	r2,-1
    29e0:	85c00044 	addi	r23,r16,1
    29e4:	d8002785 	stb	zero,158(sp)
    29e8:	0007883a 	mov	r3,zero
    29ec:	000f883a 	mov	r7,zero
    29f0:	d8802915 	stw	r2,164(sp)
    29f4:	d8003115 	stw	zero,196(sp)
    29f8:	0025883a 	mov	r18,zero
    29fc:	01401604 	movi	r5,88
    2a00:	01800244 	movi	r6,9
    2a04:	02800a84 	movi	r10,42
    2a08:	02401b04 	movi	r9,108
    2a0c:	bdc00044 	addi	r23,r23,1
    2a10:	88bff804 	addi	r2,r17,-32
    2a14:	2882f036 	bltu	r5,r2,35d8 <___svfprintf_internal_r+0xd1c>
    2a18:	100490ba 	slli	r2,r2,2
    2a1c:	01000034 	movhi	r4,0
    2a20:	210a8c04 	addi	r4,r4,10800
    2a24:	1105883a 	add	r2,r2,r4
    2a28:	10800017 	ldw	r2,0(r2)
    2a2c:	1000683a 	jmp	r2
    2a30:	00003540 	call	354 <Task_game_timer+0xd0>
    2a34:	000035d8 	cmpnei	zero,zero,215
    2a38:	000035d8 	cmpnei	zero,zero,215
    2a3c:	00003534 	movhi	zero,212
    2a40:	000035d8 	cmpnei	zero,zero,215
    2a44:	000035d8 	cmpnei	zero,zero,215
    2a48:	000035d8 	cmpnei	zero,zero,215
    2a4c:	000035d8 	cmpnei	zero,zero,215
    2a50:	000035d8 	cmpnei	zero,zero,215
    2a54:	000035d8 	cmpnei	zero,zero,215
    2a58:	00002c94 	movui	zero,178
    2a5c:	00003470 	cmpltui	zero,zero,209
    2a60:	000035d8 	cmpnei	zero,zero,215
    2a64:	00002ba4 	muli	zero,zero,174
    2a68:	00002cbc 	xorhi	zero,zero,178
    2a6c:	000035d8 	cmpnei	zero,zero,215
    2a70:	00002d30 	cmpltui	zero,zero,180
    2a74:	00002cfc 	xorhi	zero,zero,179
    2a78:	00002cfc 	xorhi	zero,zero,179
    2a7c:	00002cfc 	xorhi	zero,zero,179
    2a80:	00002cfc 	xorhi	zero,zero,179
    2a84:	00002cfc 	xorhi	zero,zero,179
    2a88:	00002cfc 	xorhi	zero,zero,179
    2a8c:	00002cfc 	xorhi	zero,zero,179
    2a90:	00002cfc 	xorhi	zero,zero,179
    2a94:	00002cfc 	xorhi	zero,zero,179
    2a98:	000035d8 	cmpnei	zero,zero,215
    2a9c:	000035d8 	cmpnei	zero,zero,215
    2aa0:	000035d8 	cmpnei	zero,zero,215
    2aa4:	000035d8 	cmpnei	zero,zero,215
    2aa8:	000035d8 	cmpnei	zero,zero,215
    2aac:	000035d8 	cmpnei	zero,zero,215
    2ab0:	000035d8 	cmpnei	zero,zero,215
    2ab4:	000035d8 	cmpnei	zero,zero,215
    2ab8:	000035d8 	cmpnei	zero,zero,215
    2abc:	000035d8 	cmpnei	zero,zero,215
    2ac0:	00002de8 	cmpgeui	zero,zero,183
    2ac4:	00002d3c 	xorhi	zero,zero,180
    2ac8:	000035d8 	cmpnei	zero,zero,215
    2acc:	00002d3c 	xorhi	zero,zero,180
    2ad0:	000035d8 	cmpnei	zero,zero,215
    2ad4:	000035d8 	cmpnei	zero,zero,215
    2ad8:	000035d8 	cmpnei	zero,zero,215
    2adc:	000035d8 	cmpnei	zero,zero,215
    2ae0:	00002ddc 	xori	zero,zero,183
    2ae4:	000035d8 	cmpnei	zero,zero,215
    2ae8:	000035d8 	cmpnei	zero,zero,215
    2aec:	00002ea4 	muli	zero,zero,186
    2af0:	000035d8 	cmpnei	zero,zero,215
    2af4:	000035d8 	cmpnei	zero,zero,215
    2af8:	000035d8 	cmpnei	zero,zero,215
    2afc:	000035d8 	cmpnei	zero,zero,215
    2b00:	000035d8 	cmpnei	zero,zero,215
    2b04:	00003314 	movui	zero,204
    2b08:	000035d8 	cmpnei	zero,zero,215
    2b0c:	000035d8 	cmpnei	zero,zero,215
    2b10:	00003374 	movhi	zero,205
    2b14:	000035d8 	cmpnei	zero,zero,215
    2b18:	000035d8 	cmpnei	zero,zero,215
    2b1c:	000035d8 	cmpnei	zero,zero,215
    2b20:	000035d8 	cmpnei	zero,zero,215
    2b24:	000035d8 	cmpnei	zero,zero,215
    2b28:	000035d8 	cmpnei	zero,zero,215
    2b2c:	000035d8 	cmpnei	zero,zero,215
    2b30:	000035d8 	cmpnei	zero,zero,215
    2b34:	000035d8 	cmpnei	zero,zero,215
    2b38:	000035d8 	cmpnei	zero,zero,215
    2b3c:	00003424 	muli	zero,zero,208
    2b40:	00003560 	cmpeqi	zero,zero,213
    2b44:	00002d3c 	xorhi	zero,zero,180
    2b48:	00002d3c 	xorhi	zero,zero,180
    2b4c:	00002d3c 	xorhi	zero,zero,180
    2b50:	000035b4 	movhi	zero,214
    2b54:	00003560 	cmpeqi	zero,zero,213
    2b58:	000035d8 	cmpnei	zero,zero,215
    2b5c:	000035d8 	cmpnei	zero,zero,215
    2b60:	00003570 	cmpltui	zero,zero,213
    2b64:	000035d8 	cmpnei	zero,zero,215
    2b68:	00003580 	call	358 <Task_game_timer+0xd4>
    2b6c:	00003460 	cmpeqi	zero,zero,209
    2b70:	00002bb0 	cmpltui	zero,zero,174
    2b74:	00003480 	call	348 <Task_game_timer+0xc4>
    2b78:	000035d8 	cmpnei	zero,zero,215
    2b7c:	0000348c 	andi	zero,zero,210
    2b80:	000035d8 	cmpnei	zero,zero,215
    2b84:	000034e8 	cmpgeui	zero,zero,211
    2b88:	000035d8 	cmpnei	zero,zero,215
    2b8c:	000035d8 	cmpnei	zero,zero,215
    2b90:	000034f8 	rdprs	zero,zero,211
    2b94:	d9003117 	ldw	r4,196(sp)
    2b98:	d8802d15 	stw	r2,180(sp)
    2b9c:	0109c83a 	sub	r4,zero,r4
    2ba0:	d9003115 	stw	r4,196(sp)
    2ba4:	94800114 	ori	r18,r18,4
    2ba8:	bc400007 	ldb	r17,0(r23)
    2bac:	003f9706 	br	2a0c <___svfprintf_internal_r+0x150>
    2bb0:	00800c04 	movi	r2,48
    2bb4:	d9002d17 	ldw	r4,180(sp)
    2bb8:	d9402917 	ldw	r5,164(sp)
    2bbc:	d8802705 	stb	r2,156(sp)
    2bc0:	00801e04 	movi	r2,120
    2bc4:	d8802745 	stb	r2,157(sp)
    2bc8:	d8002785 	stb	zero,158(sp)
    2bcc:	20c00104 	addi	r3,r4,4
    2bd0:	25000017 	ldw	r20,0(r4)
    2bd4:	002d883a 	mov	r22,zero
    2bd8:	90800094 	ori	r2,r18,2
    2bdc:	28028616 	blt	r5,zero,35f8 <___svfprintf_internal_r+0xd3c>
    2be0:	00bfdfc4 	movi	r2,-129
    2be4:	90a4703a 	and	r18,r18,r2
    2be8:	d8c02d15 	stw	r3,180(sp)
    2bec:	94800094 	ori	r18,r18,2
    2bf0:	a002731e 	bne	r20,zero,35c0 <___svfprintf_internal_r+0xd04>
    2bf4:	008000b4 	movhi	r2,2
    2bf8:	10bd0a04 	addi	r2,r2,-3032
    2bfc:	d8803a15 	stw	r2,232(sp)
    2c00:	04401e04 	movi	r17,120
    2c04:	d8c02917 	ldw	r3,164(sp)
    2c08:	0039883a 	mov	fp,zero
    2c0c:	1801d526 	beq	r3,zero,3364 <___svfprintf_internal_r+0xaa8>
    2c10:	0029883a 	mov	r20,zero
    2c14:	002d883a 	mov	r22,zero
    2c18:	0001f106 	br	33e0 <___svfprintf_internal_r+0xb24>
    2c1c:	d9402c17 	ldw	r5,176(sp)
    2c20:	d9801e04 	addi	r6,sp,120
    2c24:	9809883a 	mov	r4,r19
    2c28:	000b3700 	call	b370 <__ssprint_r>
    2c2c:	1000081e 	bne	r2,zero,2c50 <___svfprintf_internal_r+0x394>
    2c30:	da000404 	addi	r8,sp,16
    2c34:	003f6306 	br	29c4 <___svfprintf_internal_r+0x108>
    2c38:	d8802017 	ldw	r2,128(sp)
    2c3c:	10000426 	beq	r2,zero,2c50 <___svfprintf_internal_r+0x394>
    2c40:	d9402c17 	ldw	r5,176(sp)
    2c44:	d9003917 	ldw	r4,228(sp)
    2c48:	d9801e04 	addi	r6,sp,120
    2c4c:	000b3700 	call	b370 <__ssprint_r>
    2c50:	d8802c17 	ldw	r2,176(sp)
    2c54:	10c0030b 	ldhu	r3,12(r2)
    2c58:	d8802f17 	ldw	r2,188(sp)
    2c5c:	18c0100c 	andi	r3,r3,64
    2c60:	1805f51e 	bne	r3,zero,4438 <___svfprintf_internal_r+0x1b7c>
    2c64:	dfc04817 	ldw	ra,288(sp)
    2c68:	df004717 	ldw	fp,284(sp)
    2c6c:	ddc04617 	ldw	r23,280(sp)
    2c70:	dd804517 	ldw	r22,276(sp)
    2c74:	dd404417 	ldw	r21,272(sp)
    2c78:	dd004317 	ldw	r20,268(sp)
    2c7c:	dcc04217 	ldw	r19,264(sp)
    2c80:	dc804117 	ldw	r18,260(sp)
    2c84:	dc404017 	ldw	r17,256(sp)
    2c88:	dc003f17 	ldw	r16,252(sp)
    2c8c:	dec04904 	addi	sp,sp,292
    2c90:	f800283a 	ret
    2c94:	d8802d17 	ldw	r2,180(sp)
    2c98:	d9002d17 	ldw	r4,180(sp)
    2c9c:	10800017 	ldw	r2,0(r2)
    2ca0:	d8803115 	stw	r2,196(sp)
    2ca4:	20800104 	addi	r2,r4,4
    2ca8:	d9003117 	ldw	r4,196(sp)
    2cac:	203fb916 	blt	r4,zero,2b94 <___svfprintf_internal_r+0x2d8>
    2cb0:	d8802d15 	stw	r2,180(sp)
    2cb4:	bc400007 	ldb	r17,0(r23)
    2cb8:	003f5406 	br	2a0c <___svfprintf_internal_r+0x150>
    2cbc:	bc400007 	ldb	r17,0(r23)
    2cc0:	bac00044 	addi	r11,r23,1
    2cc4:	8a873926 	beq	r17,r10,49ac <___svfprintf_internal_r+0x20f0>
    2cc8:	88bff404 	addi	r2,r17,-48
    2ccc:	0009883a 	mov	r4,zero
    2cd0:	30868836 	bltu	r6,r2,46f4 <___svfprintf_internal_r+0x1e38>
    2cd4:	5c400007 	ldb	r17,0(r11)
    2cd8:	210002a4 	muli	r4,r4,10
    2cdc:	5dc00044 	addi	r23,r11,1
    2ce0:	b817883a 	mov	r11,r23
    2ce4:	2089883a 	add	r4,r4,r2
    2ce8:	88bff404 	addi	r2,r17,-48
    2cec:	30bff92e 	bgeu	r6,r2,2cd4 <___svfprintf_internal_r+0x418>
    2cf0:	2005d716 	blt	r4,zero,4450 <___svfprintf_internal_r+0x1b94>
    2cf4:	d9002915 	stw	r4,164(sp)
    2cf8:	003f4506 	br	2a10 <___svfprintf_internal_r+0x154>
    2cfc:	b809883a 	mov	r4,r23
    2d00:	d8003115 	stw	zero,196(sp)
    2d04:	88bff404 	addi	r2,r17,-48
    2d08:	0017883a 	mov	r11,zero
    2d0c:	24400007 	ldb	r17,0(r4)
    2d10:	5ac002a4 	muli	r11,r11,10
    2d14:	bdc00044 	addi	r23,r23,1
    2d18:	b809883a 	mov	r4,r23
    2d1c:	12d7883a 	add	r11,r2,r11
    2d20:	88bff404 	addi	r2,r17,-48
    2d24:	30bff92e 	bgeu	r6,r2,2d0c <___svfprintf_internal_r+0x450>
    2d28:	dac03115 	stw	r11,196(sp)
    2d2c:	003f3806 	br	2a10 <___svfprintf_internal_r+0x154>
    2d30:	94802014 	ori	r18,r18,128
    2d34:	bc400007 	ldb	r17,0(r23)
    2d38:	003f3406 	br	2a0c <___svfprintf_internal_r+0x150>
    2d3c:	18c03fcc 	andi	r3,r3,255
    2d40:	1807471e 	bne	r3,zero,4a60 <___svfprintf_internal_r+0x21a4>
    2d44:	9080020c 	andi	r2,r18,8
    2d48:	10047d26 	beq	r2,zero,3f40 <___svfprintf_internal_r+0x1684>
    2d4c:	d8c02d17 	ldw	r3,180(sp)
    2d50:	d9002d17 	ldw	r4,180(sp)
    2d54:	d9402d17 	ldw	r5,180(sp)
    2d58:	18c00017 	ldw	r3,0(r3)
    2d5c:	21000117 	ldw	r4,4(r4)
    2d60:	29400204 	addi	r5,r5,8
    2d64:	d8c03615 	stw	r3,216(sp)
    2d68:	d9003715 	stw	r4,220(sp)
    2d6c:	d9402d15 	stw	r5,180(sp)
    2d70:	d9003617 	ldw	r4,216(sp)
    2d74:	d9403717 	ldw	r5,220(sp)
    2d78:	da003e15 	stw	r8,248(sp)
    2d7c:	04000044 	movi	r16,1
    2d80:	000aff80 	call	aff8 <__fpclassifyd>
    2d84:	da003e17 	ldw	r8,248(sp)
    2d88:	14044b1e 	bne	r2,r16,3eb8 <___svfprintf_internal_r+0x15fc>
    2d8c:	d9003617 	ldw	r4,216(sp)
    2d90:	d9403717 	ldw	r5,220(sp)
    2d94:	000d883a 	mov	r6,zero
    2d98:	000f883a 	mov	r7,zero
    2d9c:	00111d00 	call	111d0 <__ledf2>
    2da0:	da003e17 	ldw	r8,248(sp)
    2da4:	1005f316 	blt	r2,zero,4574 <___svfprintf_internal_r+0x1cb8>
    2da8:	df002783 	ldbu	fp,158(sp)
    2dac:	008011c4 	movi	r2,71
    2db0:	1445590e 	bge	r2,r17,4318 <___svfprintf_internal_r+0x1a5c>
    2db4:	040000b4 	movhi	r16,2
    2db8:	843d0204 	addi	r16,r16,-3064
    2dbc:	00c000c4 	movi	r3,3
    2dc0:	00bfdfc4 	movi	r2,-129
    2dc4:	d8c02a15 	stw	r3,168(sp)
    2dc8:	90a4703a 	and	r18,r18,r2
    2dcc:	d8c02e15 	stw	r3,184(sp)
    2dd0:	d8002915 	stw	zero,164(sp)
    2dd4:	d8003215 	stw	zero,200(sp)
    2dd8:	00006606 	br	2f74 <___svfprintf_internal_r+0x6b8>
    2ddc:	94800214 	ori	r18,r18,8
    2de0:	bc400007 	ldb	r17,0(r23)
    2de4:	003f0906 	br	2a0c <___svfprintf_internal_r+0x150>
    2de8:	18c03fcc 	andi	r3,r3,255
    2dec:	1807181e 	bne	r3,zero,4a50 <___svfprintf_internal_r+0x2194>
    2df0:	94800414 	ori	r18,r18,16
    2df4:	9080080c 	andi	r2,r18,32
    2df8:	10039626 	beq	r2,zero,3c54 <___svfprintf_internal_r+0x1398>
    2dfc:	d9402d17 	ldw	r5,180(sp)
    2e00:	28800117 	ldw	r2,4(r5)
    2e04:	2d000017 	ldw	r20,0(r5)
    2e08:	29400204 	addi	r5,r5,8
    2e0c:	d9402d15 	stw	r5,180(sp)
    2e10:	102d883a 	mov	r22,r2
    2e14:	10039816 	blt	r2,zero,3c78 <___svfprintf_internal_r+0x13bc>
    2e18:	d9402917 	ldw	r5,164(sp)
    2e1c:	df002783 	ldbu	fp,158(sp)
    2e20:	2803ab16 	blt	r5,zero,3cd0 <___svfprintf_internal_r+0x1414>
    2e24:	00ffdfc4 	movi	r3,-129
    2e28:	a584b03a 	or	r2,r20,r22
    2e2c:	90e4703a 	and	r18,r18,r3
    2e30:	10014a26 	beq	r2,zero,335c <___svfprintf_internal_r+0xaa0>
    2e34:	b0034b26 	beq	r22,zero,3b64 <___svfprintf_internal_r+0x12a8>
    2e38:	dc402a15 	stw	r17,168(sp)
    2e3c:	dc001e04 	addi	r16,sp,120
    2e40:	b023883a 	mov	r17,r22
    2e44:	402d883a 	mov	r22,r8
    2e48:	a009883a 	mov	r4,r20
    2e4c:	880b883a 	mov	r5,r17
    2e50:	01800284 	movi	r6,10
    2e54:	000f883a 	mov	r7,zero
    2e58:	000f7ec0 	call	f7ec <__umoddi3>
    2e5c:	10800c04 	addi	r2,r2,48
    2e60:	843fffc4 	addi	r16,r16,-1
    2e64:	a009883a 	mov	r4,r20
    2e68:	880b883a 	mov	r5,r17
    2e6c:	80800005 	stb	r2,0(r16)
    2e70:	01800284 	movi	r6,10
    2e74:	000f883a 	mov	r7,zero
    2e78:	000f2740 	call	f274 <__udivdi3>
    2e7c:	1029883a 	mov	r20,r2
    2e80:	10c4b03a 	or	r2,r2,r3
    2e84:	1823883a 	mov	r17,r3
    2e88:	103fef1e 	bne	r2,zero,2e48 <___svfprintf_internal_r+0x58c>
    2e8c:	d8c02817 	ldw	r3,160(sp)
    2e90:	dc402a17 	ldw	r17,168(sp)
    2e94:	b011883a 	mov	r8,r22
    2e98:	1c07c83a 	sub	r3,r3,r16
    2e9c:	d8c02e15 	stw	r3,184(sp)
    2ea0:	00002e06 	br	2f5c <___svfprintf_internal_r+0x6a0>
    2ea4:	18c03fcc 	andi	r3,r3,255
    2ea8:	1806e71e 	bne	r3,zero,4a48 <___svfprintf_internal_r+0x218c>
    2eac:	94800414 	ori	r18,r18,16
    2eb0:	9080080c 	andi	r2,r18,32
    2eb4:	1002d426 	beq	r2,zero,3a08 <___svfprintf_internal_r+0x114c>
    2eb8:	d9402d17 	ldw	r5,180(sp)
    2ebc:	d8c02917 	ldw	r3,164(sp)
    2ec0:	d8002785 	stb	zero,158(sp)
    2ec4:	28800204 	addi	r2,r5,8
    2ec8:	2d000017 	ldw	r20,0(r5)
    2ecc:	2d800117 	ldw	r22,4(r5)
    2ed0:	18041516 	blt	r3,zero,3f28 <___svfprintf_internal_r+0x166c>
    2ed4:	013fdfc4 	movi	r4,-129
    2ed8:	a586b03a 	or	r3,r20,r22
    2edc:	d8802d15 	stw	r2,180(sp)
    2ee0:	9124703a 	and	r18,r18,r4
    2ee4:	1802d51e 	bne	r3,zero,3a3c <___svfprintf_internal_r+0x1180>
    2ee8:	d9402917 	ldw	r5,164(sp)
    2eec:	0039883a 	mov	fp,zero
    2ef0:	2806be26 	beq	r5,zero,49ec <___svfprintf_internal_r+0x2130>
    2ef4:	0029883a 	mov	r20,zero
    2ef8:	002d883a 	mov	r22,zero
    2efc:	dc001e04 	addi	r16,sp,120
    2f00:	a006d0fa 	srli	r3,r20,3
    2f04:	b008977a 	slli	r4,r22,29
    2f08:	b02cd0fa 	srli	r22,r22,3
    2f0c:	a50001cc 	andi	r20,r20,7
    2f10:	a0800c04 	addi	r2,r20,48
    2f14:	843fffc4 	addi	r16,r16,-1
    2f18:	20e8b03a 	or	r20,r4,r3
    2f1c:	80800005 	stb	r2,0(r16)
    2f20:	a586b03a 	or	r3,r20,r22
    2f24:	183ff61e 	bne	r3,zero,2f00 <___svfprintf_internal_r+0x644>
    2f28:	90c0004c 	andi	r3,r18,1
    2f2c:	18013926 	beq	r3,zero,3414 <___svfprintf_internal_r+0xb58>
    2f30:	10803fcc 	andi	r2,r2,255
    2f34:	1080201c 	xori	r2,r2,128
    2f38:	10bfe004 	addi	r2,r2,-128
    2f3c:	00c00c04 	movi	r3,48
    2f40:	10c13426 	beq	r2,r3,3414 <___svfprintf_internal_r+0xb58>
    2f44:	80ffffc5 	stb	r3,-1(r16)
    2f48:	d8c02817 	ldw	r3,160(sp)
    2f4c:	80bfffc4 	addi	r2,r16,-1
    2f50:	1021883a 	mov	r16,r2
    2f54:	1887c83a 	sub	r3,r3,r2
    2f58:	d8c02e15 	stw	r3,184(sp)
    2f5c:	d8802e17 	ldw	r2,184(sp)
    2f60:	d9002917 	ldw	r4,164(sp)
    2f64:	1100010e 	bge	r2,r4,2f6c <___svfprintf_internal_r+0x6b0>
    2f68:	2005883a 	mov	r2,r4
    2f6c:	d8802a15 	stw	r2,168(sp)
    2f70:	d8003215 	stw	zero,200(sp)
    2f74:	e7003fcc 	andi	fp,fp,255
    2f78:	e700201c 	xori	fp,fp,128
    2f7c:	e73fe004 	addi	fp,fp,-128
    2f80:	e0000326 	beq	fp,zero,2f90 <___svfprintf_internal_r+0x6d4>
    2f84:	d8c02a17 	ldw	r3,168(sp)
    2f88:	18c00044 	addi	r3,r3,1
    2f8c:	d8c02a15 	stw	r3,168(sp)
    2f90:	90c0008c 	andi	r3,r18,2
    2f94:	d8c02b15 	stw	r3,172(sp)
    2f98:	18000326 	beq	r3,zero,2fa8 <___svfprintf_internal_r+0x6ec>
    2f9c:	d8c02a17 	ldw	r3,168(sp)
    2fa0:	18c00084 	addi	r3,r3,2
    2fa4:	d8c02a15 	stw	r3,168(sp)
    2fa8:	90c0210c 	andi	r3,r18,132
    2fac:	d8c03015 	stw	r3,192(sp)
    2fb0:	1801a11e 	bne	r3,zero,3638 <___svfprintf_internal_r+0xd7c>
    2fb4:	d9003117 	ldw	r4,196(sp)
    2fb8:	d8c02a17 	ldw	r3,168(sp)
    2fbc:	20e9c83a 	sub	r20,r4,r3
    2fc0:	05019d0e 	bge	zero,r20,3638 <___svfprintf_internal_r+0xd7c>
    2fc4:	02400404 	movi	r9,16
    2fc8:	d8c02017 	ldw	r3,128(sp)
    2fcc:	d8801f17 	ldw	r2,124(sp)
    2fd0:	4d051b0e 	bge	r9,r20,4440 <___svfprintf_internal_r+0x1b84>
    2fd4:	014000b4 	movhi	r5,2
    2fd8:	297d1584 	addi	r5,r5,-2986
    2fdc:	dc403c15 	stw	r17,240(sp)
    2fe0:	d9403515 	stw	r5,212(sp)
    2fe4:	a023883a 	mov	r17,r20
    2fe8:	482d883a 	mov	r22,r9
    2fec:	9029883a 	mov	r20,r18
    2ff0:	070001c4 	movi	fp,7
    2ff4:	8025883a 	mov	r18,r16
    2ff8:	dc002c17 	ldw	r16,176(sp)
    2ffc:	00000306 	br	300c <___svfprintf_internal_r+0x750>
    3000:	8c7ffc04 	addi	r17,r17,-16
    3004:	42000204 	addi	r8,r8,8
    3008:	b440130e 	bge	r22,r17,3058 <___svfprintf_internal_r+0x79c>
    300c:	010000b4 	movhi	r4,2
    3010:	18c00404 	addi	r3,r3,16
    3014:	10800044 	addi	r2,r2,1
    3018:	213d1584 	addi	r4,r4,-2986
    301c:	41000015 	stw	r4,0(r8)
    3020:	45800115 	stw	r22,4(r8)
    3024:	d8c02015 	stw	r3,128(sp)
    3028:	d8801f15 	stw	r2,124(sp)
    302c:	e0bff40e 	bge	fp,r2,3000 <___svfprintf_internal_r+0x744>
    3030:	d9801e04 	addi	r6,sp,120
    3034:	800b883a 	mov	r5,r16
    3038:	9809883a 	mov	r4,r19
    303c:	000b3700 	call	b370 <__ssprint_r>
    3040:	103f031e 	bne	r2,zero,2c50 <___svfprintf_internal_r+0x394>
    3044:	8c7ffc04 	addi	r17,r17,-16
    3048:	d8c02017 	ldw	r3,128(sp)
    304c:	d8801f17 	ldw	r2,124(sp)
    3050:	da000404 	addi	r8,sp,16
    3054:	b47fed16 	blt	r22,r17,300c <___svfprintf_internal_r+0x750>
    3058:	9021883a 	mov	r16,r18
    305c:	a025883a 	mov	r18,r20
    3060:	8829883a 	mov	r20,r17
    3064:	dc403c17 	ldw	r17,240(sp)
    3068:	d9403517 	ldw	r5,212(sp)
    306c:	a0c7883a 	add	r3,r20,r3
    3070:	10800044 	addi	r2,r2,1
    3074:	41400015 	stw	r5,0(r8)
    3078:	45000115 	stw	r20,4(r8)
    307c:	d8c02015 	stw	r3,128(sp)
    3080:	d8801f15 	stw	r2,124(sp)
    3084:	010001c4 	movi	r4,7
    3088:	20829f16 	blt	r4,r2,3b08 <___svfprintf_internal_r+0x124c>
    308c:	df002787 	ldb	fp,158(sp)
    3090:	42000204 	addi	r8,r8,8
    3094:	e0000c26 	beq	fp,zero,30c8 <___svfprintf_internal_r+0x80c>
    3098:	d8801f17 	ldw	r2,124(sp)
    309c:	d9002784 	addi	r4,sp,158
    30a0:	18c00044 	addi	r3,r3,1
    30a4:	10800044 	addi	r2,r2,1
    30a8:	41000015 	stw	r4,0(r8)
    30ac:	01000044 	movi	r4,1
    30b0:	41000115 	stw	r4,4(r8)
    30b4:	d8c02015 	stw	r3,128(sp)
    30b8:	d8801f15 	stw	r2,124(sp)
    30bc:	010001c4 	movi	r4,7
    30c0:	20823816 	blt	r4,r2,39a4 <___svfprintf_internal_r+0x10e8>
    30c4:	42000204 	addi	r8,r8,8
    30c8:	d8802b17 	ldw	r2,172(sp)
    30cc:	10000c26 	beq	r2,zero,3100 <___svfprintf_internal_r+0x844>
    30d0:	d8801f17 	ldw	r2,124(sp)
    30d4:	d9002704 	addi	r4,sp,156
    30d8:	18c00084 	addi	r3,r3,2
    30dc:	10800044 	addi	r2,r2,1
    30e0:	41000015 	stw	r4,0(r8)
    30e4:	01000084 	movi	r4,2
    30e8:	41000115 	stw	r4,4(r8)
    30ec:	d8c02015 	stw	r3,128(sp)
    30f0:	d8801f15 	stw	r2,124(sp)
    30f4:	010001c4 	movi	r4,7
    30f8:	20823216 	blt	r4,r2,39c4 <___svfprintf_internal_r+0x1108>
    30fc:	42000204 	addi	r8,r8,8
    3100:	d9003017 	ldw	r4,192(sp)
    3104:	00802004 	movi	r2,128
    3108:	20819726 	beq	r4,r2,3768 <___svfprintf_internal_r+0xeac>
    310c:	d9402917 	ldw	r5,164(sp)
    3110:	d8802e17 	ldw	r2,184(sp)
    3114:	28adc83a 	sub	r22,r5,r2
    3118:	05802f0e 	bge	zero,r22,31d8 <___svfprintf_internal_r+0x91c>
    311c:	07000404 	movi	fp,16
    3120:	d8801f17 	ldw	r2,124(sp)
    3124:	e583c00e 	bge	fp,r22,4028 <___svfprintf_internal_r+0x176c>
    3128:	014000b4 	movhi	r5,2
    312c:	297d1184 	addi	r5,r5,-3002
    3130:	dc402915 	stw	r17,164(sp)
    3134:	d9402b15 	stw	r5,172(sp)
    3138:	b023883a 	mov	r17,r22
    313c:	050001c4 	movi	r20,7
    3140:	902d883a 	mov	r22,r18
    3144:	8025883a 	mov	r18,r16
    3148:	dc002c17 	ldw	r16,176(sp)
    314c:	00000306 	br	315c <___svfprintf_internal_r+0x8a0>
    3150:	8c7ffc04 	addi	r17,r17,-16
    3154:	42000204 	addi	r8,r8,8
    3158:	e440110e 	bge	fp,r17,31a0 <___svfprintf_internal_r+0x8e4>
    315c:	18c00404 	addi	r3,r3,16
    3160:	10800044 	addi	r2,r2,1
    3164:	45400015 	stw	r21,0(r8)
    3168:	47000115 	stw	fp,4(r8)
    316c:	d8c02015 	stw	r3,128(sp)
    3170:	d8801f15 	stw	r2,124(sp)
    3174:	a0bff60e 	bge	r20,r2,3150 <___svfprintf_internal_r+0x894>
    3178:	d9801e04 	addi	r6,sp,120
    317c:	800b883a 	mov	r5,r16
    3180:	9809883a 	mov	r4,r19
    3184:	000b3700 	call	b370 <__ssprint_r>
    3188:	103eb11e 	bne	r2,zero,2c50 <___svfprintf_internal_r+0x394>
    318c:	8c7ffc04 	addi	r17,r17,-16
    3190:	d8c02017 	ldw	r3,128(sp)
    3194:	d8801f17 	ldw	r2,124(sp)
    3198:	da000404 	addi	r8,sp,16
    319c:	e47fef16 	blt	fp,r17,315c <___svfprintf_internal_r+0x8a0>
    31a0:	9021883a 	mov	r16,r18
    31a4:	b025883a 	mov	r18,r22
    31a8:	882d883a 	mov	r22,r17
    31ac:	dc402917 	ldw	r17,164(sp)
    31b0:	d9002b17 	ldw	r4,172(sp)
    31b4:	1d87883a 	add	r3,r3,r22
    31b8:	10800044 	addi	r2,r2,1
    31bc:	41000015 	stw	r4,0(r8)
    31c0:	45800115 	stw	r22,4(r8)
    31c4:	d8c02015 	stw	r3,128(sp)
    31c8:	d8801f15 	stw	r2,124(sp)
    31cc:	010001c4 	movi	r4,7
    31d0:	2081ec16 	blt	r4,r2,3984 <___svfprintf_internal_r+0x10c8>
    31d4:	42000204 	addi	r8,r8,8
    31d8:	9080400c 	andi	r2,r18,256
    31dc:	1001181e 	bne	r2,zero,3640 <___svfprintf_internal_r+0xd84>
    31e0:	d9402e17 	ldw	r5,184(sp)
    31e4:	d8801f17 	ldw	r2,124(sp)
    31e8:	44000015 	stw	r16,0(r8)
    31ec:	1947883a 	add	r3,r3,r5
    31f0:	10800044 	addi	r2,r2,1
    31f4:	41400115 	stw	r5,4(r8)
    31f8:	d8c02015 	stw	r3,128(sp)
    31fc:	d8801f15 	stw	r2,124(sp)
    3200:	010001c4 	movi	r4,7
    3204:	2081d116 	blt	r4,r2,394c <___svfprintf_internal_r+0x1090>
    3208:	42000204 	addi	r8,r8,8
    320c:	9480010c 	andi	r18,r18,4
    3210:	90003226 	beq	r18,zero,32dc <___svfprintf_internal_r+0xa20>
    3214:	d9403117 	ldw	r5,196(sp)
    3218:	d8802a17 	ldw	r2,168(sp)
    321c:	28a1c83a 	sub	r16,r5,r2
    3220:	04002e0e 	bge	zero,r16,32dc <___svfprintf_internal_r+0xa20>
    3224:	04400404 	movi	r17,16
    3228:	d8801f17 	ldw	r2,124(sp)
    322c:	8c04b90e 	bge	r17,r16,4514 <___svfprintf_internal_r+0x1c58>
    3230:	014000b4 	movhi	r5,2
    3234:	297d1584 	addi	r5,r5,-2986
    3238:	d9403515 	stw	r5,212(sp)
    323c:	048001c4 	movi	r18,7
    3240:	dd002c17 	ldw	r20,176(sp)
    3244:	00000306 	br	3254 <___svfprintf_internal_r+0x998>
    3248:	843ffc04 	addi	r16,r16,-16
    324c:	42000204 	addi	r8,r8,8
    3250:	8c00130e 	bge	r17,r16,32a0 <___svfprintf_internal_r+0x9e4>
    3254:	010000b4 	movhi	r4,2
    3258:	18c00404 	addi	r3,r3,16
    325c:	10800044 	addi	r2,r2,1
    3260:	213d1584 	addi	r4,r4,-2986
    3264:	41000015 	stw	r4,0(r8)
    3268:	44400115 	stw	r17,4(r8)
    326c:	d8c02015 	stw	r3,128(sp)
    3270:	d8801f15 	stw	r2,124(sp)
    3274:	90bff40e 	bge	r18,r2,3248 <___svfprintf_internal_r+0x98c>
    3278:	d9801e04 	addi	r6,sp,120
    327c:	a00b883a 	mov	r5,r20
    3280:	9809883a 	mov	r4,r19
    3284:	000b3700 	call	b370 <__ssprint_r>
    3288:	103e711e 	bne	r2,zero,2c50 <___svfprintf_internal_r+0x394>
    328c:	843ffc04 	addi	r16,r16,-16
    3290:	d8c02017 	ldw	r3,128(sp)
    3294:	d8801f17 	ldw	r2,124(sp)
    3298:	da000404 	addi	r8,sp,16
    329c:	8c3fed16 	blt	r17,r16,3254 <___svfprintf_internal_r+0x998>
    32a0:	d9403517 	ldw	r5,212(sp)
    32a4:	1c07883a 	add	r3,r3,r16
    32a8:	10800044 	addi	r2,r2,1
    32ac:	41400015 	stw	r5,0(r8)
    32b0:	44000115 	stw	r16,4(r8)
    32b4:	d8c02015 	stw	r3,128(sp)
    32b8:	d8801f15 	stw	r2,124(sp)
    32bc:	010001c4 	movi	r4,7
    32c0:	2080060e 	bge	r4,r2,32dc <___svfprintf_internal_r+0xa20>
    32c4:	d9402c17 	ldw	r5,176(sp)
    32c8:	d9801e04 	addi	r6,sp,120
    32cc:	9809883a 	mov	r4,r19
    32d0:	000b3700 	call	b370 <__ssprint_r>
    32d4:	103e5e1e 	bne	r2,zero,2c50 <___svfprintf_internal_r+0x394>
    32d8:	d8c02017 	ldw	r3,128(sp)
    32dc:	d8803117 	ldw	r2,196(sp)
    32e0:	d9002a17 	ldw	r4,168(sp)
    32e4:	1100010e 	bge	r2,r4,32ec <___svfprintf_internal_r+0xa30>
    32e8:	2005883a 	mov	r2,r4
    32ec:	d9402f17 	ldw	r5,188(sp)
    32f0:	288b883a 	add	r5,r5,r2
    32f4:	d9402f15 	stw	r5,188(sp)
    32f8:	18019c1e 	bne	r3,zero,396c <___svfprintf_internal_r+0x10b0>
    32fc:	b8800007 	ldb	r2,0(r23)
    3300:	d8001f15 	stw	zero,124(sp)
    3304:	da000404 	addi	r8,sp,16
    3308:	103d991e 	bne	r2,zero,2970 <___svfprintf_internal_r+0xb4>
    330c:	b821883a 	mov	r16,r23
    3310:	003daf06 	br	29d0 <___svfprintf_internal_r+0x114>
    3314:	18c03fcc 	andi	r3,r3,255
    3318:	1805c71e 	bne	r3,zero,4a38 <___svfprintf_internal_r+0x217c>
    331c:	94800414 	ori	r18,r18,16
    3320:	9080080c 	andi	r2,r18,32
    3324:	10020126 	beq	r2,zero,3b2c <___svfprintf_internal_r+0x1270>
    3328:	d8802d17 	ldw	r2,180(sp)
    332c:	d9002917 	ldw	r4,164(sp)
    3330:	d8002785 	stb	zero,158(sp)
    3334:	10c00204 	addi	r3,r2,8
    3338:	15000017 	ldw	r20,0(r2)
    333c:	15800117 	ldw	r22,4(r2)
    3340:	20038e16 	blt	r4,zero,417c <___svfprintf_internal_r+0x18c0>
    3344:	013fdfc4 	movi	r4,-129
    3348:	a584b03a 	or	r2,r20,r22
    334c:	d8c02d15 	stw	r3,180(sp)
    3350:	9124703a 	and	r18,r18,r4
    3354:	0039883a 	mov	fp,zero
    3358:	103eb61e 	bne	r2,zero,2e34 <___svfprintf_internal_r+0x578>
    335c:	d8802917 	ldw	r2,164(sp)
    3360:	1002c81e 	bne	r2,zero,3e84 <___svfprintf_internal_r+0x15c8>
    3364:	d8002915 	stw	zero,164(sp)
    3368:	d8002e15 	stw	zero,184(sp)
    336c:	dc001e04 	addi	r16,sp,120
    3370:	003efa06 	br	2f5c <___svfprintf_internal_r+0x6a0>
    3374:	18c03fcc 	andi	r3,r3,255
    3378:	1805ad1e 	bne	r3,zero,4a30 <___svfprintf_internal_r+0x2174>
    337c:	014000b4 	movhi	r5,2
    3380:	297d0504 	addi	r5,r5,-3052
    3384:	d9403a15 	stw	r5,232(sp)
    3388:	9080080c 	andi	r2,r18,32
    338c:	10006126 	beq	r2,zero,3514 <___svfprintf_internal_r+0xc58>
    3390:	d8802d17 	ldw	r2,180(sp)
    3394:	15000017 	ldw	r20,0(r2)
    3398:	15800117 	ldw	r22,4(r2)
    339c:	10800204 	addi	r2,r2,8
    33a0:	d8802d15 	stw	r2,180(sp)
    33a4:	9080004c 	andi	r2,r18,1
    33a8:	10018e26 	beq	r2,zero,39e4 <___svfprintf_internal_r+0x1128>
    33ac:	a584b03a 	or	r2,r20,r22
    33b0:	10030926 	beq	r2,zero,3fd8 <___svfprintf_internal_r+0x171c>
    33b4:	d8c02917 	ldw	r3,164(sp)
    33b8:	00800c04 	movi	r2,48
    33bc:	d8802705 	stb	r2,156(sp)
    33c0:	dc402745 	stb	r17,157(sp)
    33c4:	d8002785 	stb	zero,158(sp)
    33c8:	90800094 	ori	r2,r18,2
    33cc:	18048716 	blt	r3,zero,45ec <___svfprintf_internal_r+0x1d30>
    33d0:	00bfdfc4 	movi	r2,-129
    33d4:	90a4703a 	and	r18,r18,r2
    33d8:	94800094 	ori	r18,r18,2
    33dc:	0039883a 	mov	fp,zero
    33e0:	d9003a17 	ldw	r4,232(sp)
    33e4:	dc001e04 	addi	r16,sp,120
    33e8:	a08003cc 	andi	r2,r20,15
    33ec:	b006973a 	slli	r3,r22,28
    33f0:	2085883a 	add	r2,r4,r2
    33f4:	a028d13a 	srli	r20,r20,4
    33f8:	10800003 	ldbu	r2,0(r2)
    33fc:	b02cd13a 	srli	r22,r22,4
    3400:	843fffc4 	addi	r16,r16,-1
    3404:	1d28b03a 	or	r20,r3,r20
    3408:	80800005 	stb	r2,0(r16)
    340c:	a584b03a 	or	r2,r20,r22
    3410:	103ff51e 	bne	r2,zero,33e8 <___svfprintf_internal_r+0xb2c>
    3414:	d8c02817 	ldw	r3,160(sp)
    3418:	1c07c83a 	sub	r3,r3,r16
    341c:	d8c02e15 	stw	r3,184(sp)
    3420:	003ece06 	br	2f5c <___svfprintf_internal_r+0x6a0>
    3424:	d8c02d17 	ldw	r3,180(sp)
    3428:	d9002d17 	ldw	r4,180(sp)
    342c:	d8002785 	stb	zero,158(sp)
    3430:	18800017 	ldw	r2,0(r3)
    3434:	21000104 	addi	r4,r4,4
    3438:	00c00044 	movi	r3,1
    343c:	d8c02a15 	stw	r3,168(sp)
    3440:	d8801405 	stb	r2,80(sp)
    3444:	d9002d15 	stw	r4,180(sp)
    3448:	d8c02e15 	stw	r3,184(sp)
    344c:	d8002915 	stw	zero,164(sp)
    3450:	d8003215 	stw	zero,200(sp)
    3454:	dc001404 	addi	r16,sp,80
    3458:	0039883a 	mov	fp,zero
    345c:	003ecc06 	br	2f90 <___svfprintf_internal_r+0x6d4>
    3460:	18c03fcc 	andi	r3,r3,255
    3464:	183e9226 	beq	r3,zero,2eb0 <___svfprintf_internal_r+0x5f4>
    3468:	d9c02785 	stb	r7,158(sp)
    346c:	003e9006 	br	2eb0 <___svfprintf_internal_r+0x5f4>
    3470:	00c00044 	movi	r3,1
    3474:	01c00ac4 	movi	r7,43
    3478:	bc400007 	ldb	r17,0(r23)
    347c:	003d6306 	br	2a0c <___svfprintf_internal_r+0x150>
    3480:	94800814 	ori	r18,r18,32
    3484:	bc400007 	ldb	r17,0(r23)
    3488:	003d6006 	br	2a0c <___svfprintf_internal_r+0x150>
    348c:	d8c02d17 	ldw	r3,180(sp)
    3490:	d8002785 	stb	zero,158(sp)
    3494:	1c000017 	ldw	r16,0(r3)
    3498:	1d000104 	addi	r20,r3,4
    349c:	80040f26 	beq	r16,zero,44dc <___svfprintf_internal_r+0x1c20>
    34a0:	d9002917 	ldw	r4,164(sp)
    34a4:	2003dc16 	blt	r4,zero,4418 <___svfprintf_internal_r+0x1b5c>
    34a8:	200d883a 	mov	r6,r4
    34ac:	000b883a 	mov	r5,zero
    34b0:	8009883a 	mov	r4,r16
    34b4:	da003e15 	stw	r8,248(sp)
    34b8:	0009df00 	call	9df0 <memchr>
    34bc:	da003e17 	ldw	r8,248(sp)
    34c0:	10045826 	beq	r2,zero,4624 <___svfprintf_internal_r+0x1d68>
    34c4:	1405c83a 	sub	r2,r2,r16
    34c8:	d8802e15 	stw	r2,184(sp)
    34cc:	1003d816 	blt	r2,zero,4430 <___svfprintf_internal_r+0x1b74>
    34d0:	df002783 	ldbu	fp,158(sp)
    34d4:	d8802a15 	stw	r2,168(sp)
    34d8:	dd002d15 	stw	r20,180(sp)
    34dc:	d8002915 	stw	zero,164(sp)
    34e0:	d8003215 	stw	zero,200(sp)
    34e4:	003ea306 	br	2f74 <___svfprintf_internal_r+0x6b8>
    34e8:	18c03fcc 	andi	r3,r3,255
    34ec:	183f8c26 	beq	r3,zero,3320 <___svfprintf_internal_r+0xa64>
    34f0:	d9c02785 	stb	r7,158(sp)
    34f4:	003f8a06 	br	3320 <___svfprintf_internal_r+0xa64>
    34f8:	18c03fcc 	andi	r3,r3,255
    34fc:	1805631e 	bne	r3,zero,4a8c <___svfprintf_internal_r+0x21d0>
    3500:	014000b4 	movhi	r5,2
    3504:	297d0a04 	addi	r5,r5,-3032
    3508:	d9403a15 	stw	r5,232(sp)
    350c:	9080080c 	andi	r2,r18,32
    3510:	103f9f1e 	bne	r2,zero,3390 <___svfprintf_internal_r+0xad4>
    3514:	9080040c 	andi	r2,r18,16
    3518:	10029c26 	beq	r2,zero,3f8c <___svfprintf_internal_r+0x16d0>
    351c:	d8c02d17 	ldw	r3,180(sp)
    3520:	002d883a 	mov	r22,zero
    3524:	1d000017 	ldw	r20,0(r3)
    3528:	18c00104 	addi	r3,r3,4
    352c:	d8c02d15 	stw	r3,180(sp)
    3530:	003f9c06 	br	33a4 <___svfprintf_internal_r+0xae8>
    3534:	94800054 	ori	r18,r18,1
    3538:	bc400007 	ldb	r17,0(r23)
    353c:	003d3306 	br	2a0c <___svfprintf_internal_r+0x150>
    3540:	38803fcc 	andi	r2,r7,255
    3544:	1080201c 	xori	r2,r2,128
    3548:	10bfe004 	addi	r2,r2,-128
    354c:	1002971e 	bne	r2,zero,3fac <___svfprintf_internal_r+0x16f0>
    3550:	00c00044 	movi	r3,1
    3554:	01c00804 	movi	r7,32
    3558:	bc400007 	ldb	r17,0(r23)
    355c:	003d2b06 	br	2a0c <___svfprintf_internal_r+0x150>
    3560:	18c03fcc 	andi	r3,r3,255
    3564:	183e2326 	beq	r3,zero,2df4 <___svfprintf_internal_r+0x538>
    3568:	d9c02785 	stb	r7,158(sp)
    356c:	003e2106 	br	2df4 <___svfprintf_internal_r+0x538>
    3570:	bc400007 	ldb	r17,0(r23)
    3574:	8a430426 	beq	r17,r9,4188 <___svfprintf_internal_r+0x18cc>
    3578:	94800414 	ori	r18,r18,16
    357c:	003d2306 	br	2a0c <___svfprintf_internal_r+0x150>
    3580:	18c03fcc 	andi	r3,r3,255
    3584:	18053f1e 	bne	r3,zero,4a84 <___svfprintf_internal_r+0x21c8>
    3588:	9080080c 	andi	r2,r18,32
    358c:	10028926 	beq	r2,zero,3fb4 <___svfprintf_internal_r+0x16f8>
    3590:	d9402d17 	ldw	r5,180(sp)
    3594:	d9002f17 	ldw	r4,188(sp)
    3598:	28800017 	ldw	r2,0(r5)
    359c:	2007d7fa 	srai	r3,r4,31
    35a0:	29400104 	addi	r5,r5,4
    35a4:	d9402d15 	stw	r5,180(sp)
    35a8:	11000015 	stw	r4,0(r2)
    35ac:	10c00115 	stw	r3,4(r2)
    35b0:	003ced06 	br	2968 <___svfprintf_internal_r+0xac>
    35b4:	94801014 	ori	r18,r18,64
    35b8:	bc400007 	ldb	r17,0(r23)
    35bc:	003d1306 	br	2a0c <___svfprintf_internal_r+0x150>
    35c0:	010000b4 	movhi	r4,2
    35c4:	213d0a04 	addi	r4,r4,-3032
    35c8:	0039883a 	mov	fp,zero
    35cc:	d9003a15 	stw	r4,232(sp)
    35d0:	04401e04 	movi	r17,120
    35d4:	003f8206 	br	33e0 <___svfprintf_internal_r+0xb24>
    35d8:	18c03fcc 	andi	r3,r3,255
    35dc:	1805221e 	bne	r3,zero,4a68 <___svfprintf_internal_r+0x21ac>
    35e0:	883d9526 	beq	r17,zero,2c38 <___svfprintf_internal_r+0x37c>
    35e4:	00c00044 	movi	r3,1
    35e8:	d8c02a15 	stw	r3,168(sp)
    35ec:	dc401405 	stb	r17,80(sp)
    35f0:	d8002785 	stb	zero,158(sp)
    35f4:	003f9406 	br	3448 <___svfprintf_internal_r+0xb8c>
    35f8:	010000b4 	movhi	r4,2
    35fc:	213d0a04 	addi	r4,r4,-3032
    3600:	d9003a15 	stw	r4,232(sp)
    3604:	d8c02d15 	stw	r3,180(sp)
    3608:	1025883a 	mov	r18,r2
    360c:	04401e04 	movi	r17,120
    3610:	a584b03a 	or	r2,r20,r22
    3614:	1000fa1e 	bne	r2,zero,3a00 <___svfprintf_internal_r+0x1144>
    3618:	0039883a 	mov	fp,zero
    361c:	00800084 	movi	r2,2
    3620:	10803fcc 	andi	r2,r2,255
    3624:	00c00044 	movi	r3,1
    3628:	10c21626 	beq	r2,r3,3e84 <___svfprintf_internal_r+0x15c8>
    362c:	00c00084 	movi	r3,2
    3630:	10fe301e 	bne	r2,r3,2ef4 <___svfprintf_internal_r+0x638>
    3634:	003d7606 	br	2c10 <___svfprintf_internal_r+0x354>
    3638:	d8c02017 	ldw	r3,128(sp)
    363c:	003e9506 	br	3094 <___svfprintf_internal_r+0x7d8>
    3640:	00801944 	movi	r2,101
    3644:	14407c0e 	bge	r2,r17,3838 <___svfprintf_internal_r+0xf7c>
    3648:	d9003617 	ldw	r4,216(sp)
    364c:	d9403717 	ldw	r5,220(sp)
    3650:	000d883a 	mov	r6,zero
    3654:	000f883a 	mov	r7,zero
    3658:	d8c03d15 	stw	r3,244(sp)
    365c:	da003e15 	stw	r8,248(sp)
    3660:	001106c0 	call	1106c <__eqdf2>
    3664:	d8c03d17 	ldw	r3,244(sp)
    3668:	da003e17 	ldw	r8,248(sp)
    366c:	1000f51e 	bne	r2,zero,3a44 <___svfprintf_internal_r+0x1188>
    3670:	d8801f17 	ldw	r2,124(sp)
    3674:	010000b4 	movhi	r4,2
    3678:	213d1104 	addi	r4,r4,-3004
    367c:	18c00044 	addi	r3,r3,1
    3680:	10800044 	addi	r2,r2,1
    3684:	41000015 	stw	r4,0(r8)
    3688:	01000044 	movi	r4,1
    368c:	41000115 	stw	r4,4(r8)
    3690:	d8c02015 	stw	r3,128(sp)
    3694:	d8801f15 	stw	r2,124(sp)
    3698:	010001c4 	movi	r4,7
    369c:	20826616 	blt	r4,r2,4038 <___svfprintf_internal_r+0x177c>
    36a0:	42000204 	addi	r8,r8,8
    36a4:	d8802617 	ldw	r2,152(sp)
    36a8:	d9403317 	ldw	r5,204(sp)
    36ac:	11400216 	blt	r2,r5,36b8 <___svfprintf_internal_r+0xdfc>
    36b0:	9080004c 	andi	r2,r18,1
    36b4:	103ed526 	beq	r2,zero,320c <___svfprintf_internal_r+0x950>
    36b8:	d8803817 	ldw	r2,224(sp)
    36bc:	d9003417 	ldw	r4,208(sp)
    36c0:	d9403817 	ldw	r5,224(sp)
    36c4:	1887883a 	add	r3,r3,r2
    36c8:	d8801f17 	ldw	r2,124(sp)
    36cc:	41000015 	stw	r4,0(r8)
    36d0:	41400115 	stw	r5,4(r8)
    36d4:	10800044 	addi	r2,r2,1
    36d8:	d8c02015 	stw	r3,128(sp)
    36dc:	d8801f15 	stw	r2,124(sp)
    36e0:	010001c4 	movi	r4,7
    36e4:	2082af16 	blt	r4,r2,41a4 <___svfprintf_internal_r+0x18e8>
    36e8:	42000204 	addi	r8,r8,8
    36ec:	d8803317 	ldw	r2,204(sp)
    36f0:	143fffc4 	addi	r16,r2,-1
    36f4:	043ec50e 	bge	zero,r16,320c <___svfprintf_internal_r+0x950>
    36f8:	04400404 	movi	r17,16
    36fc:	d8801f17 	ldw	r2,124(sp)
    3700:	8c00860e 	bge	r17,r16,391c <___svfprintf_internal_r+0x1060>
    3704:	014000b4 	movhi	r5,2
    3708:	297d1184 	addi	r5,r5,-3002
    370c:	d9402b15 	stw	r5,172(sp)
    3710:	058001c4 	movi	r22,7
    3714:	dd002c17 	ldw	r20,176(sp)
    3718:	00000306 	br	3728 <___svfprintf_internal_r+0xe6c>
    371c:	42000204 	addi	r8,r8,8
    3720:	843ffc04 	addi	r16,r16,-16
    3724:	8c00800e 	bge	r17,r16,3928 <___svfprintf_internal_r+0x106c>
    3728:	18c00404 	addi	r3,r3,16
    372c:	10800044 	addi	r2,r2,1
    3730:	45400015 	stw	r21,0(r8)
    3734:	44400115 	stw	r17,4(r8)
    3738:	d8c02015 	stw	r3,128(sp)
    373c:	d8801f15 	stw	r2,124(sp)
    3740:	b0bff60e 	bge	r22,r2,371c <___svfprintf_internal_r+0xe60>
    3744:	d9801e04 	addi	r6,sp,120
    3748:	a00b883a 	mov	r5,r20
    374c:	9809883a 	mov	r4,r19
    3750:	000b3700 	call	b370 <__ssprint_r>
    3754:	103d3e1e 	bne	r2,zero,2c50 <___svfprintf_internal_r+0x394>
    3758:	d8c02017 	ldw	r3,128(sp)
    375c:	d8801f17 	ldw	r2,124(sp)
    3760:	da000404 	addi	r8,sp,16
    3764:	003fee06 	br	3720 <___svfprintf_internal_r+0xe64>
    3768:	d9403117 	ldw	r5,196(sp)
    376c:	d8802a17 	ldw	r2,168(sp)
    3770:	28adc83a 	sub	r22,r5,r2
    3774:	05be650e 	bge	zero,r22,310c <___svfprintf_internal_r+0x850>
    3778:	07000404 	movi	fp,16
    377c:	d8801f17 	ldw	r2,124(sp)
    3780:	e583a20e 	bge	fp,r22,460c <___svfprintf_internal_r+0x1d50>
    3784:	014000b4 	movhi	r5,2
    3788:	297d1184 	addi	r5,r5,-3002
    378c:	dc403015 	stw	r17,192(sp)
    3790:	d9402b15 	stw	r5,172(sp)
    3794:	b023883a 	mov	r17,r22
    3798:	050001c4 	movi	r20,7
    379c:	902d883a 	mov	r22,r18
    37a0:	8025883a 	mov	r18,r16
    37a4:	dc002c17 	ldw	r16,176(sp)
    37a8:	00000306 	br	37b8 <___svfprintf_internal_r+0xefc>
    37ac:	8c7ffc04 	addi	r17,r17,-16
    37b0:	42000204 	addi	r8,r8,8
    37b4:	e440110e 	bge	fp,r17,37fc <___svfprintf_internal_r+0xf40>
    37b8:	18c00404 	addi	r3,r3,16
    37bc:	10800044 	addi	r2,r2,1
    37c0:	45400015 	stw	r21,0(r8)
    37c4:	47000115 	stw	fp,4(r8)
    37c8:	d8c02015 	stw	r3,128(sp)
    37cc:	d8801f15 	stw	r2,124(sp)
    37d0:	a0bff60e 	bge	r20,r2,37ac <___svfprintf_internal_r+0xef0>
    37d4:	d9801e04 	addi	r6,sp,120
    37d8:	800b883a 	mov	r5,r16
    37dc:	9809883a 	mov	r4,r19
    37e0:	000b3700 	call	b370 <__ssprint_r>
    37e4:	103d1a1e 	bne	r2,zero,2c50 <___svfprintf_internal_r+0x394>
    37e8:	8c7ffc04 	addi	r17,r17,-16
    37ec:	d8c02017 	ldw	r3,128(sp)
    37f0:	d8801f17 	ldw	r2,124(sp)
    37f4:	da000404 	addi	r8,sp,16
    37f8:	e47fef16 	blt	fp,r17,37b8 <___svfprintf_internal_r+0xefc>
    37fc:	9021883a 	mov	r16,r18
    3800:	b025883a 	mov	r18,r22
    3804:	882d883a 	mov	r22,r17
    3808:	dc403017 	ldw	r17,192(sp)
    380c:	d9002b17 	ldw	r4,172(sp)
    3810:	1d87883a 	add	r3,r3,r22
    3814:	10800044 	addi	r2,r2,1
    3818:	41000015 	stw	r4,0(r8)
    381c:	45800115 	stw	r22,4(r8)
    3820:	d8c02015 	stw	r3,128(sp)
    3824:	d8801f15 	stw	r2,124(sp)
    3828:	010001c4 	movi	r4,7
    382c:	20819a16 	blt	r4,r2,3e98 <___svfprintf_internal_r+0x15dc>
    3830:	42000204 	addi	r8,r8,8
    3834:	003e3506 	br	310c <___svfprintf_internal_r+0x850>
    3838:	d9403317 	ldw	r5,204(sp)
    383c:	00800044 	movi	r2,1
    3840:	18c00044 	addi	r3,r3,1
    3844:	1141710e 	bge	r2,r5,3e0c <___svfprintf_internal_r+0x1550>
    3848:	dc401f17 	ldw	r17,124(sp)
    384c:	00800044 	movi	r2,1
    3850:	40800115 	stw	r2,4(r8)
    3854:	8c400044 	addi	r17,r17,1
    3858:	44000015 	stw	r16,0(r8)
    385c:	d8c02015 	stw	r3,128(sp)
    3860:	dc401f15 	stw	r17,124(sp)
    3864:	008001c4 	movi	r2,7
    3868:	14417416 	blt	r2,r17,3e3c <___svfprintf_internal_r+0x1580>
    386c:	42000204 	addi	r8,r8,8
    3870:	d8803817 	ldw	r2,224(sp)
    3874:	d9003417 	ldw	r4,208(sp)
    3878:	8c400044 	addi	r17,r17,1
    387c:	10c7883a 	add	r3,r2,r3
    3880:	40800115 	stw	r2,4(r8)
    3884:	41000015 	stw	r4,0(r8)
    3888:	d8c02015 	stw	r3,128(sp)
    388c:	dc401f15 	stw	r17,124(sp)
    3890:	008001c4 	movi	r2,7
    3894:	14417216 	blt	r2,r17,3e60 <___svfprintf_internal_r+0x15a4>
    3898:	45800204 	addi	r22,r8,8
    389c:	d9003617 	ldw	r4,216(sp)
    38a0:	d9403717 	ldw	r5,220(sp)
    38a4:	000d883a 	mov	r6,zero
    38a8:	000f883a 	mov	r7,zero
    38ac:	d8c03d15 	stw	r3,244(sp)
    38b0:	001106c0 	call	1106c <__eqdf2>
    38b4:	d8c03d17 	ldw	r3,244(sp)
    38b8:	1000b326 	beq	r2,zero,3b88 <___svfprintf_internal_r+0x12cc>
    38bc:	d9403317 	ldw	r5,204(sp)
    38c0:	84000044 	addi	r16,r16,1
    38c4:	8c400044 	addi	r17,r17,1
    38c8:	28bfffc4 	addi	r2,r5,-1
    38cc:	1887883a 	add	r3,r3,r2
    38d0:	b0800115 	stw	r2,4(r22)
    38d4:	b4000015 	stw	r16,0(r22)
    38d8:	d8c02015 	stw	r3,128(sp)
    38dc:	dc401f15 	stw	r17,124(sp)
    38e0:	008001c4 	movi	r2,7
    38e4:	1440d216 	blt	r2,r17,3c30 <___svfprintf_internal_r+0x1374>
    38e8:	b5800204 	addi	r22,r22,8
    38ec:	d9003b17 	ldw	r4,236(sp)
    38f0:	df0022c4 	addi	fp,sp,139
    38f4:	8c400044 	addi	r17,r17,1
    38f8:	20c7883a 	add	r3,r4,r3
    38fc:	b7000015 	stw	fp,0(r22)
    3900:	b1000115 	stw	r4,4(r22)
    3904:	d8c02015 	stw	r3,128(sp)
    3908:	dc401f15 	stw	r17,124(sp)
    390c:	008001c4 	movi	r2,7
    3910:	14400e16 	blt	r2,r17,394c <___svfprintf_internal_r+0x1090>
    3914:	b2000204 	addi	r8,r22,8
    3918:	003e3c06 	br	320c <___svfprintf_internal_r+0x950>
    391c:	010000b4 	movhi	r4,2
    3920:	213d1184 	addi	r4,r4,-3002
    3924:	d9002b15 	stw	r4,172(sp)
    3928:	d9002b17 	ldw	r4,172(sp)
    392c:	1c07883a 	add	r3,r3,r16
    3930:	44000115 	stw	r16,4(r8)
    3934:	41000015 	stw	r4,0(r8)
    3938:	10800044 	addi	r2,r2,1
    393c:	d8c02015 	stw	r3,128(sp)
    3940:	d8801f15 	stw	r2,124(sp)
    3944:	010001c4 	movi	r4,7
    3948:	20be2f0e 	bge	r4,r2,3208 <___svfprintf_internal_r+0x94c>
    394c:	d9402c17 	ldw	r5,176(sp)
    3950:	d9801e04 	addi	r6,sp,120
    3954:	9809883a 	mov	r4,r19
    3958:	000b3700 	call	b370 <__ssprint_r>
    395c:	103cbc1e 	bne	r2,zero,2c50 <___svfprintf_internal_r+0x394>
    3960:	d8c02017 	ldw	r3,128(sp)
    3964:	da000404 	addi	r8,sp,16
    3968:	003e2806 	br	320c <___svfprintf_internal_r+0x950>
    396c:	d9402c17 	ldw	r5,176(sp)
    3970:	d9801e04 	addi	r6,sp,120
    3974:	9809883a 	mov	r4,r19
    3978:	000b3700 	call	b370 <__ssprint_r>
    397c:	103e5f26 	beq	r2,zero,32fc <___svfprintf_internal_r+0xa40>
    3980:	003cb306 	br	2c50 <___svfprintf_internal_r+0x394>
    3984:	d9402c17 	ldw	r5,176(sp)
    3988:	d9801e04 	addi	r6,sp,120
    398c:	9809883a 	mov	r4,r19
    3990:	000b3700 	call	b370 <__ssprint_r>
    3994:	103cae1e 	bne	r2,zero,2c50 <___svfprintf_internal_r+0x394>
    3998:	d8c02017 	ldw	r3,128(sp)
    399c:	da000404 	addi	r8,sp,16
    39a0:	003e0d06 	br	31d8 <___svfprintf_internal_r+0x91c>
    39a4:	d9402c17 	ldw	r5,176(sp)
    39a8:	d9801e04 	addi	r6,sp,120
    39ac:	9809883a 	mov	r4,r19
    39b0:	000b3700 	call	b370 <__ssprint_r>
    39b4:	103ca61e 	bne	r2,zero,2c50 <___svfprintf_internal_r+0x394>
    39b8:	d8c02017 	ldw	r3,128(sp)
    39bc:	da000404 	addi	r8,sp,16
    39c0:	003dc106 	br	30c8 <___svfprintf_internal_r+0x80c>
    39c4:	d9402c17 	ldw	r5,176(sp)
    39c8:	d9801e04 	addi	r6,sp,120
    39cc:	9809883a 	mov	r4,r19
    39d0:	000b3700 	call	b370 <__ssprint_r>
    39d4:	103c9e1e 	bne	r2,zero,2c50 <___svfprintf_internal_r+0x394>
    39d8:	d8c02017 	ldw	r3,128(sp)
    39dc:	da000404 	addi	r8,sp,16
    39e0:	003dc706 	br	3100 <___svfprintf_internal_r+0x844>
    39e4:	d8802917 	ldw	r2,164(sp)
    39e8:	d8002785 	stb	zero,158(sp)
    39ec:	103f0816 	blt	r2,zero,3610 <___svfprintf_internal_r+0xd54>
    39f0:	00ffdfc4 	movi	r3,-129
    39f4:	a584b03a 	or	r2,r20,r22
    39f8:	90e4703a 	and	r18,r18,r3
    39fc:	103c8126 	beq	r2,zero,2c04 <___svfprintf_internal_r+0x348>
    3a00:	0039883a 	mov	fp,zero
    3a04:	003e7606 	br	33e0 <___svfprintf_internal_r+0xb24>
    3a08:	9080040c 	andi	r2,r18,16
    3a0c:	10013d26 	beq	r2,zero,3f04 <___svfprintf_internal_r+0x1648>
    3a10:	d9002d17 	ldw	r4,180(sp)
    3a14:	d9402917 	ldw	r5,164(sp)
    3a18:	d8002785 	stb	zero,158(sp)
    3a1c:	20800104 	addi	r2,r4,4
    3a20:	25000017 	ldw	r20,0(r4)
    3a24:	002d883a 	mov	r22,zero
    3a28:	28013f16 	blt	r5,zero,3f28 <___svfprintf_internal_r+0x166c>
    3a2c:	00ffdfc4 	movi	r3,-129
    3a30:	d8802d15 	stw	r2,180(sp)
    3a34:	90e4703a 	and	r18,r18,r3
    3a38:	a03d2b26 	beq	r20,zero,2ee8 <___svfprintf_internal_r+0x62c>
    3a3c:	0039883a 	mov	fp,zero
    3a40:	003d2e06 	br	2efc <___svfprintf_internal_r+0x640>
    3a44:	dc402617 	ldw	r17,152(sp)
    3a48:	0441830e 	bge	zero,r17,4058 <___svfprintf_internal_r+0x179c>
    3a4c:	dc403217 	ldw	r17,200(sp)
    3a50:	d8803317 	ldw	r2,204(sp)
    3a54:	1440010e 	bge	r2,r17,3a5c <___svfprintf_internal_r+0x11a0>
    3a58:	1023883a 	mov	r17,r2
    3a5c:	04400a0e 	bge	zero,r17,3a88 <___svfprintf_internal_r+0x11cc>
    3a60:	d8801f17 	ldw	r2,124(sp)
    3a64:	1c47883a 	add	r3,r3,r17
    3a68:	44000015 	stw	r16,0(r8)
    3a6c:	10800044 	addi	r2,r2,1
    3a70:	44400115 	stw	r17,4(r8)
    3a74:	d8c02015 	stw	r3,128(sp)
    3a78:	d8801f15 	stw	r2,124(sp)
    3a7c:	010001c4 	movi	r4,7
    3a80:	20827516 	blt	r4,r2,4458 <___svfprintf_internal_r+0x1b9c>
    3a84:	42000204 	addi	r8,r8,8
    3a88:	88027b16 	blt	r17,zero,4478 <___svfprintf_internal_r+0x1bbc>
    3a8c:	d9003217 	ldw	r4,200(sp)
    3a90:	2463c83a 	sub	r17,r4,r17
    3a94:	0440990e 	bge	zero,r17,3cfc <___svfprintf_internal_r+0x1440>
    3a98:	05800404 	movi	r22,16
    3a9c:	d8801f17 	ldw	r2,124(sp)
    3aa0:	b441530e 	bge	r22,r17,3ff0 <___svfprintf_internal_r+0x1734>
    3aa4:	010000b4 	movhi	r4,2
    3aa8:	213d1184 	addi	r4,r4,-3002
    3aac:	d9002b15 	stw	r4,172(sp)
    3ab0:	070001c4 	movi	fp,7
    3ab4:	dd002c17 	ldw	r20,176(sp)
    3ab8:	00000306 	br	3ac8 <___svfprintf_internal_r+0x120c>
    3abc:	42000204 	addi	r8,r8,8
    3ac0:	8c7ffc04 	addi	r17,r17,-16
    3ac4:	b4414d0e 	bge	r22,r17,3ffc <___svfprintf_internal_r+0x1740>
    3ac8:	18c00404 	addi	r3,r3,16
    3acc:	10800044 	addi	r2,r2,1
    3ad0:	45400015 	stw	r21,0(r8)
    3ad4:	45800115 	stw	r22,4(r8)
    3ad8:	d8c02015 	stw	r3,128(sp)
    3adc:	d8801f15 	stw	r2,124(sp)
    3ae0:	e0bff60e 	bge	fp,r2,3abc <___svfprintf_internal_r+0x1200>
    3ae4:	d9801e04 	addi	r6,sp,120
    3ae8:	a00b883a 	mov	r5,r20
    3aec:	9809883a 	mov	r4,r19
    3af0:	000b3700 	call	b370 <__ssprint_r>
    3af4:	103c561e 	bne	r2,zero,2c50 <___svfprintf_internal_r+0x394>
    3af8:	d8c02017 	ldw	r3,128(sp)
    3afc:	d8801f17 	ldw	r2,124(sp)
    3b00:	da000404 	addi	r8,sp,16
    3b04:	003fee06 	br	3ac0 <___svfprintf_internal_r+0x1204>
    3b08:	d9402c17 	ldw	r5,176(sp)
    3b0c:	d9801e04 	addi	r6,sp,120
    3b10:	9809883a 	mov	r4,r19
    3b14:	000b3700 	call	b370 <__ssprint_r>
    3b18:	103c4d1e 	bne	r2,zero,2c50 <___svfprintf_internal_r+0x394>
    3b1c:	d8c02017 	ldw	r3,128(sp)
    3b20:	df002787 	ldb	fp,158(sp)
    3b24:	da000404 	addi	r8,sp,16
    3b28:	003d5a06 	br	3094 <___svfprintf_internal_r+0x7d8>
    3b2c:	9080040c 	andi	r2,r18,16
    3b30:	10005c26 	beq	r2,zero,3ca4 <___svfprintf_internal_r+0x13e8>
    3b34:	d9402d17 	ldw	r5,180(sp)
    3b38:	d8c02917 	ldw	r3,164(sp)
    3b3c:	d8002785 	stb	zero,158(sp)
    3b40:	28800104 	addi	r2,r5,4
    3b44:	2d000017 	ldw	r20,0(r5)
    3b48:	002d883a 	mov	r22,zero
    3b4c:	18005e16 	blt	r3,zero,3cc8 <___svfprintf_internal_r+0x140c>
    3b50:	00ffdfc4 	movi	r3,-129
    3b54:	d8802d15 	stw	r2,180(sp)
    3b58:	90e4703a 	and	r18,r18,r3
    3b5c:	0039883a 	mov	fp,zero
    3b60:	a03dfe26 	beq	r20,zero,335c <___svfprintf_internal_r+0xaa0>
    3b64:	00800244 	movi	r2,9
    3b68:	153cb336 	bltu	r2,r20,2e38 <___svfprintf_internal_r+0x57c>
    3b6c:	a5000c04 	addi	r20,r20,48
    3b70:	dc001dc4 	addi	r16,sp,119
    3b74:	dd001dc5 	stb	r20,119(sp)
    3b78:	d8c02817 	ldw	r3,160(sp)
    3b7c:	1c07c83a 	sub	r3,r3,r16
    3b80:	d8c02e15 	stw	r3,184(sp)
    3b84:	003cf506 	br	2f5c <___svfprintf_internal_r+0x6a0>
    3b88:	d8803317 	ldw	r2,204(sp)
    3b8c:	143fffc4 	addi	r16,r2,-1
    3b90:	043f560e 	bge	zero,r16,38ec <___svfprintf_internal_r+0x1030>
    3b94:	07000404 	movi	fp,16
    3b98:	e403530e 	bge	fp,r16,48e8 <___svfprintf_internal_r+0x202c>
    3b9c:	014000b4 	movhi	r5,2
    3ba0:	297d1184 	addi	r5,r5,-3002
    3ba4:	d9402b15 	stw	r5,172(sp)
    3ba8:	01c001c4 	movi	r7,7
    3bac:	dd002c17 	ldw	r20,176(sp)
    3bb0:	00000306 	br	3bc0 <___svfprintf_internal_r+0x1304>
    3bb4:	843ffc04 	addi	r16,r16,-16
    3bb8:	b5800204 	addi	r22,r22,8
    3bbc:	e400130e 	bge	fp,r16,3c0c <___svfprintf_internal_r+0x1350>
    3bc0:	18c00404 	addi	r3,r3,16
    3bc4:	8c400044 	addi	r17,r17,1
    3bc8:	b5400015 	stw	r21,0(r22)
    3bcc:	b7000115 	stw	fp,4(r22)
    3bd0:	d8c02015 	stw	r3,128(sp)
    3bd4:	dc401f15 	stw	r17,124(sp)
    3bd8:	3c7ff60e 	bge	r7,r17,3bb4 <___svfprintf_internal_r+0x12f8>
    3bdc:	d9801e04 	addi	r6,sp,120
    3be0:	a00b883a 	mov	r5,r20
    3be4:	9809883a 	mov	r4,r19
    3be8:	d9c03d15 	stw	r7,244(sp)
    3bec:	000b3700 	call	b370 <__ssprint_r>
    3bf0:	d9c03d17 	ldw	r7,244(sp)
    3bf4:	103c161e 	bne	r2,zero,2c50 <___svfprintf_internal_r+0x394>
    3bf8:	843ffc04 	addi	r16,r16,-16
    3bfc:	d8c02017 	ldw	r3,128(sp)
    3c00:	dc401f17 	ldw	r17,124(sp)
    3c04:	dd800404 	addi	r22,sp,16
    3c08:	e43fed16 	blt	fp,r16,3bc0 <___svfprintf_internal_r+0x1304>
    3c0c:	d8802b17 	ldw	r2,172(sp)
    3c10:	1c07883a 	add	r3,r3,r16
    3c14:	8c400044 	addi	r17,r17,1
    3c18:	b0800015 	stw	r2,0(r22)
    3c1c:	b4000115 	stw	r16,4(r22)
    3c20:	d8c02015 	stw	r3,128(sp)
    3c24:	dc401f15 	stw	r17,124(sp)
    3c28:	008001c4 	movi	r2,7
    3c2c:	147f2e0e 	bge	r2,r17,38e8 <___svfprintf_internal_r+0x102c>
    3c30:	d9402c17 	ldw	r5,176(sp)
    3c34:	d9801e04 	addi	r6,sp,120
    3c38:	9809883a 	mov	r4,r19
    3c3c:	000b3700 	call	b370 <__ssprint_r>
    3c40:	103c031e 	bne	r2,zero,2c50 <___svfprintf_internal_r+0x394>
    3c44:	d8c02017 	ldw	r3,128(sp)
    3c48:	dc401f17 	ldw	r17,124(sp)
    3c4c:	dd800404 	addi	r22,sp,16
    3c50:	003f2606 	br	38ec <___svfprintf_internal_r+0x1030>
    3c54:	9080040c 	andi	r2,r18,16
    3c58:	1000c326 	beq	r2,zero,3f68 <___svfprintf_internal_r+0x16ac>
    3c5c:	d8802d17 	ldw	r2,180(sp)
    3c60:	15000017 	ldw	r20,0(r2)
    3c64:	10800104 	addi	r2,r2,4
    3c68:	d8802d15 	stw	r2,180(sp)
    3c6c:	a02dd7fa 	srai	r22,r20,31
    3c70:	b005883a 	mov	r2,r22
    3c74:	103c680e 	bge	r2,zero,2e18 <___svfprintf_internal_r+0x55c>
    3c78:	0529c83a 	sub	r20,zero,r20
    3c7c:	a004c03a 	cmpne	r2,r20,zero
    3c80:	05adc83a 	sub	r22,zero,r22
    3c84:	b0adc83a 	sub	r22,r22,r2
    3c88:	d8802917 	ldw	r2,164(sp)
    3c8c:	07000b44 	movi	fp,45
    3c90:	df002785 	stb	fp,158(sp)
    3c94:	10022e16 	blt	r2,zero,4550 <___svfprintf_internal_r+0x1c94>
    3c98:	00bfdfc4 	movi	r2,-129
    3c9c:	90a4703a 	and	r18,r18,r2
    3ca0:	003c6406 	br	2e34 <___svfprintf_internal_r+0x578>
    3ca4:	9080100c 	andi	r2,r18,64
    3ca8:	d8002785 	stb	zero,158(sp)
    3cac:	10012526 	beq	r2,zero,4144 <___svfprintf_internal_r+0x1888>
    3cb0:	d9002d17 	ldw	r4,180(sp)
    3cb4:	d9402917 	ldw	r5,164(sp)
    3cb8:	002d883a 	mov	r22,zero
    3cbc:	20800104 	addi	r2,r4,4
    3cc0:	2500000b 	ldhu	r20,0(r4)
    3cc4:	283fa20e 	bge	r5,zero,3b50 <___svfprintf_internal_r+0x1294>
    3cc8:	d8802d15 	stw	r2,180(sp)
    3ccc:	0039883a 	mov	fp,zero
    3cd0:	a584b03a 	or	r2,r20,r22
    3cd4:	103c571e 	bne	r2,zero,2e34 <___svfprintf_internal_r+0x578>
    3cd8:	00800044 	movi	r2,1
    3cdc:	003e5006 	br	3620 <___svfprintf_internal_r+0xd64>
    3ce0:	d9402c17 	ldw	r5,176(sp)
    3ce4:	d9801e04 	addi	r6,sp,120
    3ce8:	9809883a 	mov	r4,r19
    3cec:	000b3700 	call	b370 <__ssprint_r>
    3cf0:	103bd71e 	bne	r2,zero,2c50 <___svfprintf_internal_r+0x394>
    3cf4:	d8c02017 	ldw	r3,128(sp)
    3cf8:	da000404 	addi	r8,sp,16
    3cfc:	d9003217 	ldw	r4,200(sp)
    3d00:	d8802617 	ldw	r2,152(sp)
    3d04:	d9403317 	ldw	r5,204(sp)
    3d08:	8123883a 	add	r17,r16,r4
    3d0c:	11400216 	blt	r2,r5,3d18 <___svfprintf_internal_r+0x145c>
    3d10:	9100004c 	andi	r4,r18,1
    3d14:	20000d26 	beq	r4,zero,3d4c <___svfprintf_internal_r+0x1490>
    3d18:	d9003817 	ldw	r4,224(sp)
    3d1c:	d9403417 	ldw	r5,208(sp)
    3d20:	1907883a 	add	r3,r3,r4
    3d24:	d9001f17 	ldw	r4,124(sp)
    3d28:	41400015 	stw	r5,0(r8)
    3d2c:	d9403817 	ldw	r5,224(sp)
    3d30:	21000044 	addi	r4,r4,1
    3d34:	d8c02015 	stw	r3,128(sp)
    3d38:	41400115 	stw	r5,4(r8)
    3d3c:	d9001f15 	stw	r4,124(sp)
    3d40:	014001c4 	movi	r5,7
    3d44:	2901dc16 	blt	r5,r4,44b8 <___svfprintf_internal_r+0x1bfc>
    3d48:	42000204 	addi	r8,r8,8
    3d4c:	d9003317 	ldw	r4,204(sp)
    3d50:	8121883a 	add	r16,r16,r4
    3d54:	2085c83a 	sub	r2,r4,r2
    3d58:	8461c83a 	sub	r16,r16,r17
    3d5c:	1400010e 	bge	r2,r16,3d64 <___svfprintf_internal_r+0x14a8>
    3d60:	1021883a 	mov	r16,r2
    3d64:	04000a0e 	bge	zero,r16,3d90 <___svfprintf_internal_r+0x14d4>
    3d68:	d9001f17 	ldw	r4,124(sp)
    3d6c:	1c07883a 	add	r3,r3,r16
    3d70:	44400015 	stw	r17,0(r8)
    3d74:	21000044 	addi	r4,r4,1
    3d78:	44000115 	stw	r16,4(r8)
    3d7c:	d8c02015 	stw	r3,128(sp)
    3d80:	d9001f15 	stw	r4,124(sp)
    3d84:	014001c4 	movi	r5,7
    3d88:	2901e616 	blt	r5,r4,4524 <___svfprintf_internal_r+0x1c68>
    3d8c:	42000204 	addi	r8,r8,8
    3d90:	8001f616 	blt	r16,zero,456c <___svfprintf_internal_r+0x1cb0>
    3d94:	1421c83a 	sub	r16,r2,r16
    3d98:	043d1c0e 	bge	zero,r16,320c <___svfprintf_internal_r+0x950>
    3d9c:	04400404 	movi	r17,16
    3da0:	d8801f17 	ldw	r2,124(sp)
    3da4:	8c3edd0e 	bge	r17,r16,391c <___svfprintf_internal_r+0x1060>
    3da8:	014000b4 	movhi	r5,2
    3dac:	297d1184 	addi	r5,r5,-3002
    3db0:	d9402b15 	stw	r5,172(sp)
    3db4:	058001c4 	movi	r22,7
    3db8:	dd002c17 	ldw	r20,176(sp)
    3dbc:	00000306 	br	3dcc <___svfprintf_internal_r+0x1510>
    3dc0:	42000204 	addi	r8,r8,8
    3dc4:	843ffc04 	addi	r16,r16,-16
    3dc8:	8c3ed70e 	bge	r17,r16,3928 <___svfprintf_internal_r+0x106c>
    3dcc:	18c00404 	addi	r3,r3,16
    3dd0:	10800044 	addi	r2,r2,1
    3dd4:	45400015 	stw	r21,0(r8)
    3dd8:	44400115 	stw	r17,4(r8)
    3ddc:	d8c02015 	stw	r3,128(sp)
    3de0:	d8801f15 	stw	r2,124(sp)
    3de4:	b0bff60e 	bge	r22,r2,3dc0 <___svfprintf_internal_r+0x1504>
    3de8:	d9801e04 	addi	r6,sp,120
    3dec:	a00b883a 	mov	r5,r20
    3df0:	9809883a 	mov	r4,r19
    3df4:	000b3700 	call	b370 <__ssprint_r>
    3df8:	103b951e 	bne	r2,zero,2c50 <___svfprintf_internal_r+0x394>
    3dfc:	d8c02017 	ldw	r3,128(sp)
    3e00:	d8801f17 	ldw	r2,124(sp)
    3e04:	da000404 	addi	r8,sp,16
    3e08:	003fee06 	br	3dc4 <___svfprintf_internal_r+0x1508>
    3e0c:	9088703a 	and	r4,r18,r2
    3e10:	203e8d1e 	bne	r4,zero,3848 <___svfprintf_internal_r+0xf8c>
    3e14:	dc401f17 	ldw	r17,124(sp)
    3e18:	40800115 	stw	r2,4(r8)
    3e1c:	44000015 	stw	r16,0(r8)
    3e20:	8c400044 	addi	r17,r17,1
    3e24:	d8c02015 	stw	r3,128(sp)
    3e28:	dc401f15 	stw	r17,124(sp)
    3e2c:	008001c4 	movi	r2,7
    3e30:	147f7f16 	blt	r2,r17,3c30 <___svfprintf_internal_r+0x1374>
    3e34:	45800204 	addi	r22,r8,8
    3e38:	003eac06 	br	38ec <___svfprintf_internal_r+0x1030>
    3e3c:	d9402c17 	ldw	r5,176(sp)
    3e40:	d9801e04 	addi	r6,sp,120
    3e44:	9809883a 	mov	r4,r19
    3e48:	000b3700 	call	b370 <__ssprint_r>
    3e4c:	103b801e 	bne	r2,zero,2c50 <___svfprintf_internal_r+0x394>
    3e50:	d8c02017 	ldw	r3,128(sp)
    3e54:	dc401f17 	ldw	r17,124(sp)
    3e58:	da000404 	addi	r8,sp,16
    3e5c:	003e8406 	br	3870 <___svfprintf_internal_r+0xfb4>
    3e60:	d9402c17 	ldw	r5,176(sp)
    3e64:	d9801e04 	addi	r6,sp,120
    3e68:	9809883a 	mov	r4,r19
    3e6c:	000b3700 	call	b370 <__ssprint_r>
    3e70:	103b771e 	bne	r2,zero,2c50 <___svfprintf_internal_r+0x394>
    3e74:	d8c02017 	ldw	r3,128(sp)
    3e78:	dc401f17 	ldw	r17,124(sp)
    3e7c:	dd800404 	addi	r22,sp,16
    3e80:	003e8606 	br	389c <___svfprintf_internal_r+0xfe0>
    3e84:	0029883a 	mov	r20,zero
    3e88:	a5000c04 	addi	r20,r20,48
    3e8c:	dc001dc4 	addi	r16,sp,119
    3e90:	dd001dc5 	stb	r20,119(sp)
    3e94:	003f3806 	br	3b78 <___svfprintf_internal_r+0x12bc>
    3e98:	d9402c17 	ldw	r5,176(sp)
    3e9c:	d9801e04 	addi	r6,sp,120
    3ea0:	9809883a 	mov	r4,r19
    3ea4:	000b3700 	call	b370 <__ssprint_r>
    3ea8:	103b691e 	bne	r2,zero,2c50 <___svfprintf_internal_r+0x394>
    3eac:	d8c02017 	ldw	r3,128(sp)
    3eb0:	da000404 	addi	r8,sp,16
    3eb4:	003c9506 	br	310c <___svfprintf_internal_r+0x850>
    3eb8:	d9003617 	ldw	r4,216(sp)
    3ebc:	d9403717 	ldw	r5,220(sp)
    3ec0:	da003e15 	stw	r8,248(sp)
    3ec4:	000aff80 	call	aff8 <__fpclassifyd>
    3ec8:	da003e17 	ldw	r8,248(sp)
    3ecc:	1000bd1e 	bne	r2,zero,41c4 <___svfprintf_internal_r+0x1908>
    3ed0:	008011c4 	movi	r2,71
    3ed4:	14411e0e 	bge	r2,r17,4350 <___svfprintf_internal_r+0x1a94>
    3ed8:	040000b4 	movhi	r16,2
    3edc:	843d0404 	addi	r16,r16,-3056
    3ee0:	00c000c4 	movi	r3,3
    3ee4:	00bfdfc4 	movi	r2,-129
    3ee8:	d8c02a15 	stw	r3,168(sp)
    3eec:	90a4703a 	and	r18,r18,r2
    3ef0:	df002783 	ldbu	fp,158(sp)
    3ef4:	d8c02e15 	stw	r3,184(sp)
    3ef8:	d8002915 	stw	zero,164(sp)
    3efc:	d8003215 	stw	zero,200(sp)
    3f00:	003c1c06 	br	2f74 <___svfprintf_internal_r+0x6b8>
    3f04:	9080100c 	andi	r2,r18,64
    3f08:	d8002785 	stb	zero,158(sp)
    3f0c:	10009426 	beq	r2,zero,4160 <___svfprintf_internal_r+0x18a4>
    3f10:	d8c02d17 	ldw	r3,180(sp)
    3f14:	d9002917 	ldw	r4,164(sp)
    3f18:	002d883a 	mov	r22,zero
    3f1c:	18800104 	addi	r2,r3,4
    3f20:	1d00000b 	ldhu	r20,0(r3)
    3f24:	203ec10e 	bge	r4,zero,3a2c <___svfprintf_internal_r+0x1170>
    3f28:	a586b03a 	or	r3,r20,r22
    3f2c:	d8802d15 	stw	r2,180(sp)
    3f30:	183ec21e 	bne	r3,zero,3a3c <___svfprintf_internal_r+0x1180>
    3f34:	0039883a 	mov	fp,zero
    3f38:	0005883a 	mov	r2,zero
    3f3c:	003db806 	br	3620 <___svfprintf_internal_r+0xd64>
    3f40:	d8802d17 	ldw	r2,180(sp)
    3f44:	d8c02d17 	ldw	r3,180(sp)
    3f48:	d9002d17 	ldw	r4,180(sp)
    3f4c:	10800017 	ldw	r2,0(r2)
    3f50:	18c00117 	ldw	r3,4(r3)
    3f54:	21000204 	addi	r4,r4,8
    3f58:	d8803615 	stw	r2,216(sp)
    3f5c:	d8c03715 	stw	r3,220(sp)
    3f60:	d9002d15 	stw	r4,180(sp)
    3f64:	003b8206 	br	2d70 <___svfprintf_internal_r+0x4b4>
    3f68:	9080100c 	andi	r2,r18,64
    3f6c:	10010726 	beq	r2,zero,438c <___svfprintf_internal_r+0x1ad0>
    3f70:	d8c02d17 	ldw	r3,180(sp)
    3f74:	1d00000f 	ldh	r20,0(r3)
    3f78:	18c00104 	addi	r3,r3,4
    3f7c:	d8c02d15 	stw	r3,180(sp)
    3f80:	a02dd7fa 	srai	r22,r20,31
    3f84:	b005883a 	mov	r2,r22
    3f88:	003ba206 	br	2e14 <___svfprintf_internal_r+0x558>
    3f8c:	9080100c 	andi	r2,r18,64
    3f90:	10010526 	beq	r2,zero,43a8 <___svfprintf_internal_r+0x1aec>
    3f94:	d9002d17 	ldw	r4,180(sp)
    3f98:	002d883a 	mov	r22,zero
    3f9c:	2500000b 	ldhu	r20,0(r4)
    3fa0:	21000104 	addi	r4,r4,4
    3fa4:	d9002d15 	stw	r4,180(sp)
    3fa8:	003cfe06 	br	33a4 <___svfprintf_internal_r+0xae8>
    3fac:	bc400007 	ldb	r17,0(r23)
    3fb0:	003a9606 	br	2a0c <___svfprintf_internal_r+0x150>
    3fb4:	9080040c 	andi	r2,r18,16
    3fb8:	10010126 	beq	r2,zero,43c0 <___svfprintf_internal_r+0x1b04>
    3fbc:	d9402d17 	ldw	r5,180(sp)
    3fc0:	d8c02f17 	ldw	r3,188(sp)
    3fc4:	28800017 	ldw	r2,0(r5)
    3fc8:	29400104 	addi	r5,r5,4
    3fcc:	d9402d15 	stw	r5,180(sp)
    3fd0:	10c00015 	stw	r3,0(r2)
    3fd4:	003a6406 	br	2968 <___svfprintf_internal_r+0xac>
    3fd8:	d9002917 	ldw	r4,164(sp)
    3fdc:	d8002785 	stb	zero,158(sp)
    3fe0:	203d8d16 	blt	r4,zero,3618 <___svfprintf_internal_r+0xd5c>
    3fe4:	00bfdfc4 	movi	r2,-129
    3fe8:	90a4703a 	and	r18,r18,r2
    3fec:	003b0506 	br	2c04 <___svfprintf_internal_r+0x348>
    3ff0:	014000b4 	movhi	r5,2
    3ff4:	297d1184 	addi	r5,r5,-3002
    3ff8:	d9402b15 	stw	r5,172(sp)
    3ffc:	d9402b17 	ldw	r5,172(sp)
    4000:	1c47883a 	add	r3,r3,r17
    4004:	10800044 	addi	r2,r2,1
    4008:	41400015 	stw	r5,0(r8)
    400c:	44400115 	stw	r17,4(r8)
    4010:	d8c02015 	stw	r3,128(sp)
    4014:	d8801f15 	stw	r2,124(sp)
    4018:	010001c4 	movi	r4,7
    401c:	20bf3016 	blt	r4,r2,3ce0 <___svfprintf_internal_r+0x1424>
    4020:	42000204 	addi	r8,r8,8
    4024:	003f3506 	br	3cfc <___svfprintf_internal_r+0x1440>
    4028:	010000b4 	movhi	r4,2
    402c:	213d1184 	addi	r4,r4,-3002
    4030:	d9002b15 	stw	r4,172(sp)
    4034:	003c5e06 	br	31b0 <___svfprintf_internal_r+0x8f4>
    4038:	d9402c17 	ldw	r5,176(sp)
    403c:	d9801e04 	addi	r6,sp,120
    4040:	9809883a 	mov	r4,r19
    4044:	000b3700 	call	b370 <__ssprint_r>
    4048:	103b011e 	bne	r2,zero,2c50 <___svfprintf_internal_r+0x394>
    404c:	d8c02017 	ldw	r3,128(sp)
    4050:	da000404 	addi	r8,sp,16
    4054:	003d9306 	br	36a4 <___svfprintf_internal_r+0xde8>
    4058:	d8801f17 	ldw	r2,124(sp)
    405c:	014000b4 	movhi	r5,2
    4060:	01000044 	movi	r4,1
    4064:	18c00044 	addi	r3,r3,1
    4068:	10800044 	addi	r2,r2,1
    406c:	297d1104 	addi	r5,r5,-3004
    4070:	41000115 	stw	r4,4(r8)
    4074:	41400015 	stw	r5,0(r8)
    4078:	d8c02015 	stw	r3,128(sp)
    407c:	d8801f15 	stw	r2,124(sp)
    4080:	010001c4 	movi	r4,7
    4084:	2080b516 	blt	r4,r2,435c <___svfprintf_internal_r+0x1aa0>
    4088:	42000204 	addi	r8,r8,8
    408c:	8800041e 	bne	r17,zero,40a0 <___svfprintf_internal_r+0x17e4>
    4090:	d8803317 	ldw	r2,204(sp)
    4094:	1000021e 	bne	r2,zero,40a0 <___svfprintf_internal_r+0x17e4>
    4098:	9080004c 	andi	r2,r18,1
    409c:	103c5b26 	beq	r2,zero,320c <___svfprintf_internal_r+0x950>
    40a0:	d9003817 	ldw	r4,224(sp)
    40a4:	d8801f17 	ldw	r2,124(sp)
    40a8:	d9403417 	ldw	r5,208(sp)
    40ac:	20c7883a 	add	r3,r4,r3
    40b0:	10800044 	addi	r2,r2,1
    40b4:	41000115 	stw	r4,4(r8)
    40b8:	41400015 	stw	r5,0(r8)
    40bc:	d8c02015 	stw	r3,128(sp)
    40c0:	d8801f15 	stw	r2,124(sp)
    40c4:	010001c4 	movi	r4,7
    40c8:	20818016 	blt	r4,r2,46cc <___svfprintf_internal_r+0x1e10>
    40cc:	42000204 	addi	r8,r8,8
    40d0:	0463c83a 	sub	r17,zero,r17
    40d4:	0440cb0e 	bge	zero,r17,4404 <___svfprintf_internal_r+0x1b48>
    40d8:	05800404 	movi	r22,16
    40dc:	b440e80e 	bge	r22,r17,4480 <___svfprintf_internal_r+0x1bc4>
    40e0:	014000b4 	movhi	r5,2
    40e4:	297d1184 	addi	r5,r5,-3002
    40e8:	d9402b15 	stw	r5,172(sp)
    40ec:	070001c4 	movi	fp,7
    40f0:	dd002c17 	ldw	r20,176(sp)
    40f4:	00000306 	br	4104 <___svfprintf_internal_r+0x1848>
    40f8:	42000204 	addi	r8,r8,8
    40fc:	8c7ffc04 	addi	r17,r17,-16
    4100:	b440e20e 	bge	r22,r17,448c <___svfprintf_internal_r+0x1bd0>
    4104:	18c00404 	addi	r3,r3,16
    4108:	10800044 	addi	r2,r2,1
    410c:	45400015 	stw	r21,0(r8)
    4110:	45800115 	stw	r22,4(r8)
    4114:	d8c02015 	stw	r3,128(sp)
    4118:	d8801f15 	stw	r2,124(sp)
    411c:	e0bff60e 	bge	fp,r2,40f8 <___svfprintf_internal_r+0x183c>
    4120:	d9801e04 	addi	r6,sp,120
    4124:	a00b883a 	mov	r5,r20
    4128:	9809883a 	mov	r4,r19
    412c:	000b3700 	call	b370 <__ssprint_r>
    4130:	103ac71e 	bne	r2,zero,2c50 <___svfprintf_internal_r+0x394>
    4134:	d8c02017 	ldw	r3,128(sp)
    4138:	d8801f17 	ldw	r2,124(sp)
    413c:	da000404 	addi	r8,sp,16
    4140:	003fee06 	br	40fc <___svfprintf_internal_r+0x1840>
    4144:	d8c02d17 	ldw	r3,180(sp)
    4148:	d9002917 	ldw	r4,164(sp)
    414c:	002d883a 	mov	r22,zero
    4150:	18800104 	addi	r2,r3,4
    4154:	1d000017 	ldw	r20,0(r3)
    4158:	203e7d0e 	bge	r4,zero,3b50 <___svfprintf_internal_r+0x1294>
    415c:	003eda06 	br	3cc8 <___svfprintf_internal_r+0x140c>
    4160:	d9402d17 	ldw	r5,180(sp)
    4164:	d8c02917 	ldw	r3,164(sp)
    4168:	002d883a 	mov	r22,zero
    416c:	28800104 	addi	r2,r5,4
    4170:	2d000017 	ldw	r20,0(r5)
    4174:	183e2d0e 	bge	r3,zero,3a2c <___svfprintf_internal_r+0x1170>
    4178:	003f6b06 	br	3f28 <___svfprintf_internal_r+0x166c>
    417c:	d8c02d15 	stw	r3,180(sp)
    4180:	0039883a 	mov	fp,zero
    4184:	003ed206 	br	3cd0 <___svfprintf_internal_r+0x1414>
    4188:	bc400043 	ldbu	r17,1(r23)
    418c:	94800814 	ori	r18,r18,32
    4190:	bdc00044 	addi	r23,r23,1
    4194:	8c403fcc 	andi	r17,r17,255
    4198:	8c40201c 	xori	r17,r17,128
    419c:	8c7fe004 	addi	r17,r17,-128
    41a0:	003a1a06 	br	2a0c <___svfprintf_internal_r+0x150>
    41a4:	d9402c17 	ldw	r5,176(sp)
    41a8:	d9801e04 	addi	r6,sp,120
    41ac:	9809883a 	mov	r4,r19
    41b0:	000b3700 	call	b370 <__ssprint_r>
    41b4:	103aa61e 	bne	r2,zero,2c50 <___svfprintf_internal_r+0x394>
    41b8:	d8c02017 	ldw	r3,128(sp)
    41bc:	da000404 	addi	r8,sp,16
    41c0:	003d4a06 	br	36ec <___svfprintf_internal_r+0xe30>
    41c4:	d9002917 	ldw	r4,164(sp)
    41c8:	05bff7c4 	movi	r22,-33
    41cc:	00bfffc4 	movi	r2,-1
    41d0:	8dac703a 	and	r22,r17,r22
    41d4:	20806a26 	beq	r4,r2,4380 <___svfprintf_internal_r+0x1ac4>
    41d8:	008011c4 	movi	r2,71
    41dc:	b0813726 	beq	r22,r2,46bc <___svfprintf_internal_r+0x1e00>
    41e0:	d9003717 	ldw	r4,220(sp)
    41e4:	90c04014 	ori	r3,r18,256
    41e8:	d8c02b15 	stw	r3,172(sp)
    41ec:	20015d16 	blt	r4,zero,4764 <___svfprintf_internal_r+0x1ea8>
    41f0:	dd003717 	ldw	r20,220(sp)
    41f4:	d8002a05 	stb	zero,168(sp)
    41f8:	00801984 	movi	r2,102
    41fc:	88814026 	beq	r17,r2,4700 <___svfprintf_internal_r+0x1e44>
    4200:	00801184 	movi	r2,70
    4204:	88817126 	beq	r17,r2,47cc <___svfprintf_internal_r+0x1f10>
    4208:	00801144 	movi	r2,69
    420c:	b0816226 	beq	r22,r2,4798 <___svfprintf_internal_r+0x1edc>
    4210:	d8c02917 	ldw	r3,164(sp)
    4214:	d8802104 	addi	r2,sp,132
    4218:	d8800315 	stw	r2,12(sp)
    421c:	d9403617 	ldw	r5,216(sp)
    4220:	d8802504 	addi	r2,sp,148
    4224:	d8800215 	stw	r2,8(sp)
    4228:	d8802604 	addi	r2,sp,152
    422c:	d8c00015 	stw	r3,0(sp)
    4230:	d8800115 	stw	r2,4(sp)
    4234:	01c00084 	movi	r7,2
    4238:	a00d883a 	mov	r6,r20
    423c:	9809883a 	mov	r4,r19
    4240:	d8c03d15 	stw	r3,244(sp)
    4244:	da003e15 	stw	r8,248(sp)
    4248:	00070c00 	call	70c0 <_dtoa_r>
    424c:	1021883a 	mov	r16,r2
    4250:	008019c4 	movi	r2,103
    4254:	d8c03d17 	ldw	r3,244(sp)
    4258:	da003e17 	ldw	r8,248(sp)
    425c:	8880e726 	beq	r17,r2,45fc <___svfprintf_internal_r+0x1d40>
    4260:	008011c4 	movi	r2,71
    4264:	8880d426 	beq	r17,r2,45b8 <___svfprintf_internal_r+0x1cfc>
    4268:	80f9883a 	add	fp,r16,r3
    426c:	d9003617 	ldw	r4,216(sp)
    4270:	000d883a 	mov	r6,zero
    4274:	000f883a 	mov	r7,zero
    4278:	a00b883a 	mov	r5,r20
    427c:	da003e15 	stw	r8,248(sp)
    4280:	001106c0 	call	1106c <__eqdf2>
    4284:	da003e17 	ldw	r8,248(sp)
    4288:	1000e426 	beq	r2,zero,461c <___svfprintf_internal_r+0x1d60>
    428c:	d8802117 	ldw	r2,132(sp)
    4290:	1700062e 	bgeu	r2,fp,42ac <___svfprintf_internal_r+0x19f0>
    4294:	01000c04 	movi	r4,48
    4298:	10c00044 	addi	r3,r2,1
    429c:	d8c02115 	stw	r3,132(sp)
    42a0:	11000005 	stb	r4,0(r2)
    42a4:	d8802117 	ldw	r2,132(sp)
    42a8:	173ffb36 	bltu	r2,fp,4298 <___svfprintf_internal_r+0x19dc>
    42ac:	1405c83a 	sub	r2,r2,r16
    42b0:	d8803315 	stw	r2,204(sp)
    42b4:	008011c4 	movi	r2,71
    42b8:	b080c526 	beq	r22,r2,45d0 <___svfprintf_internal_r+0x1d14>
    42bc:	00801944 	movi	r2,101
    42c0:	1441d90e 	bge	r2,r17,4a28 <___svfprintf_internal_r+0x216c>
    42c4:	d8c02617 	ldw	r3,152(sp)
    42c8:	00801984 	movi	r2,102
    42cc:	d8c03215 	stw	r3,200(sp)
    42d0:	88813426 	beq	r17,r2,47a4 <___svfprintf_internal_r+0x1ee8>
    42d4:	d8c03217 	ldw	r3,200(sp)
    42d8:	d9003317 	ldw	r4,204(sp)
    42dc:	19012516 	blt	r3,r4,4774 <___svfprintf_internal_r+0x1eb8>
    42e0:	9480004c 	andi	r18,r18,1
    42e4:	9001841e 	bne	r18,zero,48f8 <___svfprintf_internal_r+0x203c>
    42e8:	1805883a 	mov	r2,r3
    42ec:	1801cc16 	blt	r3,zero,4a20 <___svfprintf_internal_r+0x2164>
    42f0:	d8c03217 	ldw	r3,200(sp)
    42f4:	044019c4 	movi	r17,103
    42f8:	d8c02e15 	stw	r3,184(sp)
    42fc:	df002a07 	ldb	fp,168(sp)
    4300:	e000a61e 	bne	fp,zero,459c <___svfprintf_internal_r+0x1ce0>
    4304:	df002783 	ldbu	fp,158(sp)
    4308:	d8802a15 	stw	r2,168(sp)
    430c:	dc802b17 	ldw	r18,172(sp)
    4310:	d8002915 	stw	zero,164(sp)
    4314:	003b1706 	br	2f74 <___svfprintf_internal_r+0x6b8>
    4318:	040000b4 	movhi	r16,2
    431c:	843d0104 	addi	r16,r16,-3068
    4320:	003aa606 	br	2dbc <___svfprintf_internal_r+0x500>
    4324:	d9003917 	ldw	r4,228(sp)
    4328:	04001004 	movi	r16,64
    432c:	800b883a 	mov	r5,r16
    4330:	00095e40 	call	95e4 <_malloc_r>
    4334:	d9002c17 	ldw	r4,176(sp)
    4338:	20800015 	stw	r2,0(r4)
    433c:	20800415 	stw	r2,16(r4)
    4340:	1001cb26 	beq	r2,zero,4a70 <___svfprintf_internal_r+0x21b4>
    4344:	d8802c17 	ldw	r2,176(sp)
    4348:	14000515 	stw	r16,20(r2)
    434c:	00397606 	br	2928 <___svfprintf_internal_r+0x6c>
    4350:	040000b4 	movhi	r16,2
    4354:	843d0304 	addi	r16,r16,-3060
    4358:	003ee106 	br	3ee0 <___svfprintf_internal_r+0x1624>
    435c:	d9402c17 	ldw	r5,176(sp)
    4360:	d9801e04 	addi	r6,sp,120
    4364:	9809883a 	mov	r4,r19
    4368:	000b3700 	call	b370 <__ssprint_r>
    436c:	103a381e 	bne	r2,zero,2c50 <___svfprintf_internal_r+0x394>
    4370:	dc402617 	ldw	r17,152(sp)
    4374:	d8c02017 	ldw	r3,128(sp)
    4378:	da000404 	addi	r8,sp,16
    437c:	003f4306 	br	408c <___svfprintf_internal_r+0x17d0>
    4380:	01400184 	movi	r5,6
    4384:	d9402915 	stw	r5,164(sp)
    4388:	003f9506 	br	41e0 <___svfprintf_internal_r+0x1924>
    438c:	d9002d17 	ldw	r4,180(sp)
    4390:	25000017 	ldw	r20,0(r4)
    4394:	21000104 	addi	r4,r4,4
    4398:	d9002d15 	stw	r4,180(sp)
    439c:	a02dd7fa 	srai	r22,r20,31
    43a0:	b005883a 	mov	r2,r22
    43a4:	003a9b06 	br	2e14 <___svfprintf_internal_r+0x558>
    43a8:	d9402d17 	ldw	r5,180(sp)
    43ac:	002d883a 	mov	r22,zero
    43b0:	2d000017 	ldw	r20,0(r5)
    43b4:	29400104 	addi	r5,r5,4
    43b8:	d9402d15 	stw	r5,180(sp)
    43bc:	003bf906 	br	33a4 <___svfprintf_internal_r+0xae8>
    43c0:	9480100c 	andi	r18,r18,64
    43c4:	90006e26 	beq	r18,zero,4580 <___svfprintf_internal_r+0x1cc4>
    43c8:	d9002d17 	ldw	r4,180(sp)
    43cc:	d9402f17 	ldw	r5,188(sp)
    43d0:	20800017 	ldw	r2,0(r4)
    43d4:	21000104 	addi	r4,r4,4
    43d8:	d9002d15 	stw	r4,180(sp)
    43dc:	1140000d 	sth	r5,0(r2)
    43e0:	00396106 	br	2968 <___svfprintf_internal_r+0xac>
    43e4:	d9402c17 	ldw	r5,176(sp)
    43e8:	d9801e04 	addi	r6,sp,120
    43ec:	9809883a 	mov	r4,r19
    43f0:	000b3700 	call	b370 <__ssprint_r>
    43f4:	103a161e 	bne	r2,zero,2c50 <___svfprintf_internal_r+0x394>
    43f8:	d8c02017 	ldw	r3,128(sp)
    43fc:	d8801f17 	ldw	r2,124(sp)
    4400:	da000404 	addi	r8,sp,16
    4404:	d9403317 	ldw	r5,204(sp)
    4408:	10800044 	addi	r2,r2,1
    440c:	44000015 	stw	r16,0(r8)
    4410:	28c7883a 	add	r3,r5,r3
    4414:	003b7706 	br	31f4 <___svfprintf_internal_r+0x938>
    4418:	8009883a 	mov	r4,r16
    441c:	da003e15 	stw	r8,248(sp)
    4420:	000b2d80 	call	b2d8 <strlen>
    4424:	d8802e15 	stw	r2,184(sp)
    4428:	da003e17 	ldw	r8,248(sp)
    442c:	103c280e 	bge	r2,zero,34d0 <___svfprintf_internal_r+0xc14>
    4430:	0005883a 	mov	r2,zero
    4434:	003c2606 	br	34d0 <___svfprintf_internal_r+0xc14>
    4438:	00bfffc4 	movi	r2,-1
    443c:	003a0906 	br	2c64 <___svfprintf_internal_r+0x3a8>
    4440:	010000b4 	movhi	r4,2
    4444:	213d1584 	addi	r4,r4,-2986
    4448:	d9003515 	stw	r4,212(sp)
    444c:	003b0606 	br	3068 <___svfprintf_internal_r+0x7ac>
    4450:	013fffc4 	movi	r4,-1
    4454:	003a2706 	br	2cf4 <___svfprintf_internal_r+0x438>
    4458:	d9402c17 	ldw	r5,176(sp)
    445c:	d9801e04 	addi	r6,sp,120
    4460:	9809883a 	mov	r4,r19
    4464:	000b3700 	call	b370 <__ssprint_r>
    4468:	1039f91e 	bne	r2,zero,2c50 <___svfprintf_internal_r+0x394>
    446c:	d8c02017 	ldw	r3,128(sp)
    4470:	da000404 	addi	r8,sp,16
    4474:	003d8406 	br	3a88 <___svfprintf_internal_r+0x11cc>
    4478:	0023883a 	mov	r17,zero
    447c:	003d8306 	br	3a8c <___svfprintf_internal_r+0x11d0>
    4480:	010000b4 	movhi	r4,2
    4484:	213d1184 	addi	r4,r4,-3002
    4488:	d9002b15 	stw	r4,172(sp)
    448c:	d9002b17 	ldw	r4,172(sp)
    4490:	1c47883a 	add	r3,r3,r17
    4494:	10800044 	addi	r2,r2,1
    4498:	41000015 	stw	r4,0(r8)
    449c:	44400115 	stw	r17,4(r8)
    44a0:	d8c02015 	stw	r3,128(sp)
    44a4:	d8801f15 	stw	r2,124(sp)
    44a8:	010001c4 	movi	r4,7
    44ac:	20bfcd16 	blt	r4,r2,43e4 <___svfprintf_internal_r+0x1b28>
    44b0:	42000204 	addi	r8,r8,8
    44b4:	003fd306 	br	4404 <___svfprintf_internal_r+0x1b48>
    44b8:	d9402c17 	ldw	r5,176(sp)
    44bc:	d9801e04 	addi	r6,sp,120
    44c0:	9809883a 	mov	r4,r19
    44c4:	000b3700 	call	b370 <__ssprint_r>
    44c8:	1039e11e 	bne	r2,zero,2c50 <___svfprintf_internal_r+0x394>
    44cc:	d8802617 	ldw	r2,152(sp)
    44d0:	d8c02017 	ldw	r3,128(sp)
    44d4:	da000404 	addi	r8,sp,16
    44d8:	003e1c06 	br	3d4c <___svfprintf_internal_r+0x1490>
    44dc:	d8802917 	ldw	r2,164(sp)
    44e0:	00c00184 	movi	r3,6
    44e4:	1880012e 	bgeu	r3,r2,44ec <___svfprintf_internal_r+0x1c30>
    44e8:	1805883a 	mov	r2,r3
    44ec:	d8802e15 	stw	r2,184(sp)
    44f0:	1000f316 	blt	r2,zero,48c0 <___svfprintf_internal_r+0x2004>
    44f4:	040000b4 	movhi	r16,2
    44f8:	d8802a15 	stw	r2,168(sp)
    44fc:	dd002d15 	stw	r20,180(sp)
    4500:	d8002915 	stw	zero,164(sp)
    4504:	d8003215 	stw	zero,200(sp)
    4508:	843d0f04 	addi	r16,r16,-3012
    450c:	0039883a 	mov	fp,zero
    4510:	003a9f06 	br	2f90 <___svfprintf_internal_r+0x6d4>
    4514:	010000b4 	movhi	r4,2
    4518:	213d1584 	addi	r4,r4,-2986
    451c:	d9003515 	stw	r4,212(sp)
    4520:	003b5f06 	br	32a0 <___svfprintf_internal_r+0x9e4>
    4524:	d9402c17 	ldw	r5,176(sp)
    4528:	d9801e04 	addi	r6,sp,120
    452c:	9809883a 	mov	r4,r19
    4530:	000b3700 	call	b370 <__ssprint_r>
    4534:	1039c61e 	bne	r2,zero,2c50 <___svfprintf_internal_r+0x394>
    4538:	d8802617 	ldw	r2,152(sp)
    453c:	d9403317 	ldw	r5,204(sp)
    4540:	d8c02017 	ldw	r3,128(sp)
    4544:	da000404 	addi	r8,sp,16
    4548:	2885c83a 	sub	r2,r5,r2
    454c:	003e1006 	br	3d90 <___svfprintf_internal_r+0x14d4>
    4550:	00800044 	movi	r2,1
    4554:	10803fcc 	andi	r2,r2,255
    4558:	00c00044 	movi	r3,1
    455c:	10fa3526 	beq	r2,r3,2e34 <___svfprintf_internal_r+0x578>
    4560:	00c00084 	movi	r3,2
    4564:	10fb9e26 	beq	r2,r3,33e0 <___svfprintf_internal_r+0xb24>
    4568:	003a6406 	br	2efc <___svfprintf_internal_r+0x640>
    456c:	0021883a 	mov	r16,zero
    4570:	003e0806 	br	3d94 <___svfprintf_internal_r+0x14d8>
    4574:	07000b44 	movi	fp,45
    4578:	df002785 	stb	fp,158(sp)
    457c:	003a0b06 	br	2dac <___svfprintf_internal_r+0x4f0>
    4580:	d8c02d17 	ldw	r3,180(sp)
    4584:	d9002f17 	ldw	r4,188(sp)
    4588:	18800017 	ldw	r2,0(r3)
    458c:	18c00104 	addi	r3,r3,4
    4590:	d8c02d15 	stw	r3,180(sp)
    4594:	11000015 	stw	r4,0(r2)
    4598:	0038f306 	br	2968 <___svfprintf_internal_r+0xac>
    459c:	00c00b44 	movi	r3,45
    45a0:	d8c02785 	stb	r3,158(sp)
    45a4:	d8802a15 	stw	r2,168(sp)
    45a8:	dc802b17 	ldw	r18,172(sp)
    45ac:	d8002915 	stw	zero,164(sp)
    45b0:	07000b44 	movi	fp,45
    45b4:	003a7306 	br	2f84 <___svfprintf_internal_r+0x6c8>
    45b8:	9080004c 	andi	r2,r18,1
    45bc:	1000941e 	bne	r2,zero,4810 <___svfprintf_internal_r+0x1f54>
    45c0:	d8802117 	ldw	r2,132(sp)
    45c4:	1405c83a 	sub	r2,r2,r16
    45c8:	d8803315 	stw	r2,204(sp)
    45cc:	b441161e 	bne	r22,r17,4a28 <___svfprintf_internal_r+0x216c>
    45d0:	dd802617 	ldw	r22,152(sp)
    45d4:	00bfff44 	movi	r2,-3
    45d8:	b0801a16 	blt	r22,r2,4644 <___svfprintf_internal_r+0x1d88>
    45dc:	d9402917 	ldw	r5,164(sp)
    45e0:	2d801816 	blt	r5,r22,4644 <___svfprintf_internal_r+0x1d88>
    45e4:	dd803215 	stw	r22,200(sp)
    45e8:	003f3a06 	br	42d4 <___svfprintf_internal_r+0x1a18>
    45ec:	1025883a 	mov	r18,r2
    45f0:	0039883a 	mov	fp,zero
    45f4:	00800084 	movi	r2,2
    45f8:	003fd606 	br	4554 <___svfprintf_internal_r+0x1c98>
    45fc:	9080004c 	andi	r2,r18,1
    4600:	103f191e 	bne	r2,zero,4268 <___svfprintf_internal_r+0x19ac>
    4604:	d8802117 	ldw	r2,132(sp)
    4608:	003f2806 	br	42ac <___svfprintf_internal_r+0x19f0>
    460c:	010000b4 	movhi	r4,2
    4610:	213d1184 	addi	r4,r4,-3002
    4614:	d9002b15 	stw	r4,172(sp)
    4618:	003c7c06 	br	380c <___svfprintf_internal_r+0xf50>
    461c:	e005883a 	mov	r2,fp
    4620:	003f2206 	br	42ac <___svfprintf_internal_r+0x19f0>
    4624:	d9402917 	ldw	r5,164(sp)
    4628:	df002783 	ldbu	fp,158(sp)
    462c:	dd002d15 	stw	r20,180(sp)
    4630:	d9402a15 	stw	r5,168(sp)
    4634:	d9402e15 	stw	r5,184(sp)
    4638:	d8002915 	stw	zero,164(sp)
    463c:	d8003215 	stw	zero,200(sp)
    4640:	003a4c06 	br	2f74 <___svfprintf_internal_r+0x6b8>
    4644:	8c7fff84 	addi	r17,r17,-2
    4648:	b5bfffc4 	addi	r22,r22,-1
    464c:	dd802615 	stw	r22,152(sp)
    4650:	dc4022c5 	stb	r17,139(sp)
    4654:	b000c316 	blt	r22,zero,4964 <___svfprintf_internal_r+0x20a8>
    4658:	00800ac4 	movi	r2,43
    465c:	d8802305 	stb	r2,140(sp)
    4660:	00800244 	movi	r2,9
    4664:	15806e16 	blt	r2,r22,4820 <___svfprintf_internal_r+0x1f64>
    4668:	00800c04 	movi	r2,48
    466c:	b5800c04 	addi	r22,r22,48
    4670:	d8802345 	stb	r2,141(sp)
    4674:	dd802385 	stb	r22,142(sp)
    4678:	d88023c4 	addi	r2,sp,143
    467c:	df0022c4 	addi	fp,sp,139
    4680:	d8c03317 	ldw	r3,204(sp)
    4684:	1739c83a 	sub	fp,r2,fp
    4688:	d9003317 	ldw	r4,204(sp)
    468c:	e0c7883a 	add	r3,fp,r3
    4690:	df003b15 	stw	fp,236(sp)
    4694:	d8c02e15 	stw	r3,184(sp)
    4698:	00800044 	movi	r2,1
    469c:	1100b70e 	bge	r2,r4,497c <___svfprintf_internal_r+0x20c0>
    46a0:	d8c02e17 	ldw	r3,184(sp)
    46a4:	18c00044 	addi	r3,r3,1
    46a8:	d8c02e15 	stw	r3,184(sp)
    46ac:	1805883a 	mov	r2,r3
    46b0:	1800b016 	blt	r3,zero,4974 <___svfprintf_internal_r+0x20b8>
    46b4:	d8003215 	stw	zero,200(sp)
    46b8:	003f1006 	br	42fc <___svfprintf_internal_r+0x1a40>
    46bc:	d8802917 	ldw	r2,164(sp)
    46c0:	103ec71e 	bne	r2,zero,41e0 <___svfprintf_internal_r+0x1924>
    46c4:	dc002915 	stw	r16,164(sp)
    46c8:	003ec506 	br	41e0 <___svfprintf_internal_r+0x1924>
    46cc:	d9402c17 	ldw	r5,176(sp)
    46d0:	d9801e04 	addi	r6,sp,120
    46d4:	9809883a 	mov	r4,r19
    46d8:	000b3700 	call	b370 <__ssprint_r>
    46dc:	10395c1e 	bne	r2,zero,2c50 <___svfprintf_internal_r+0x394>
    46e0:	dc402617 	ldw	r17,152(sp)
    46e4:	d8c02017 	ldw	r3,128(sp)
    46e8:	d8801f17 	ldw	r2,124(sp)
    46ec:	da000404 	addi	r8,sp,16
    46f0:	003e7706 	br	40d0 <___svfprintf_internal_r+0x1814>
    46f4:	582f883a 	mov	r23,r11
    46f8:	d8002915 	stw	zero,164(sp)
    46fc:	0038c406 	br	2a10 <___svfprintf_internal_r+0x154>
    4700:	d8c02917 	ldw	r3,164(sp)
    4704:	d8802104 	addi	r2,sp,132
    4708:	d8800315 	stw	r2,12(sp)
    470c:	d9403617 	ldw	r5,216(sp)
    4710:	d8802504 	addi	r2,sp,148
    4714:	d8800215 	stw	r2,8(sp)
    4718:	d8802604 	addi	r2,sp,152
    471c:	d8c00015 	stw	r3,0(sp)
    4720:	9809883a 	mov	r4,r19
    4724:	d8800115 	stw	r2,4(sp)
    4728:	01c000c4 	movi	r7,3
    472c:	a00d883a 	mov	r6,r20
    4730:	da003e15 	stw	r8,248(sp)
    4734:	00070c00 	call	70c0 <_dtoa_r>
    4738:	d9002917 	ldw	r4,164(sp)
    473c:	da003e17 	ldw	r8,248(sp)
    4740:	1021883a 	mov	r16,r2
    4744:	1139883a 	add	fp,r2,r4
    4748:	2007883a 	mov	r3,r4
    474c:	81000007 	ldb	r4,0(r16)
    4750:	00800c04 	movi	r2,48
    4754:	20806f26 	beq	r4,r2,4914 <___svfprintf_internal_r+0x2058>
    4758:	d8c02617 	ldw	r3,152(sp)
    475c:	e0f9883a 	add	fp,fp,r3
    4760:	003ec206 	br	426c <___svfprintf_internal_r+0x19b0>
    4764:	00c00b44 	movi	r3,45
    4768:	2520003c 	xorhi	r20,r4,32768
    476c:	d8c02a05 	stb	r3,168(sp)
    4770:	003ea106 	br	41f8 <___svfprintf_internal_r+0x193c>
    4774:	d8c03217 	ldw	r3,200(sp)
    4778:	00c0890e 	bge	zero,r3,49a0 <___svfprintf_internal_r+0x20e4>
    477c:	00800044 	movi	r2,1
    4780:	d9003317 	ldw	r4,204(sp)
    4784:	1105883a 	add	r2,r2,r4
    4788:	d8802e15 	stw	r2,184(sp)
    478c:	10005f16 	blt	r2,zero,490c <___svfprintf_internal_r+0x2050>
    4790:	044019c4 	movi	r17,103
    4794:	003ed906 	br	42fc <___svfprintf_internal_r+0x1a40>
    4798:	d9002917 	ldw	r4,164(sp)
    479c:	20c00044 	addi	r3,r4,1
    47a0:	003e9c06 	br	4214 <___svfprintf_internal_r+0x1958>
    47a4:	d9002917 	ldw	r4,164(sp)
    47a8:	00c0680e 	bge	zero,r3,494c <___svfprintf_internal_r+0x2090>
    47ac:	2000461e 	bne	r4,zero,48c8 <___svfprintf_internal_r+0x200c>
    47b0:	9480004c 	andi	r18,r18,1
    47b4:	9000441e 	bne	r18,zero,48c8 <___svfprintf_internal_r+0x200c>
    47b8:	1805883a 	mov	r2,r3
    47bc:	1800a016 	blt	r3,zero,4a40 <___svfprintf_internal_r+0x2184>
    47c0:	d8c03217 	ldw	r3,200(sp)
    47c4:	d8c02e15 	stw	r3,184(sp)
    47c8:	003ecc06 	br	42fc <___svfprintf_internal_r+0x1a40>
    47cc:	d9402917 	ldw	r5,164(sp)
    47d0:	d8802104 	addi	r2,sp,132
    47d4:	d8800315 	stw	r2,12(sp)
    47d8:	d9400015 	stw	r5,0(sp)
    47dc:	d8802504 	addi	r2,sp,148
    47e0:	d9403617 	ldw	r5,216(sp)
    47e4:	d8800215 	stw	r2,8(sp)
    47e8:	d8802604 	addi	r2,sp,152
    47ec:	d8800115 	stw	r2,4(sp)
    47f0:	01c000c4 	movi	r7,3
    47f4:	a00d883a 	mov	r6,r20
    47f8:	9809883a 	mov	r4,r19
    47fc:	da003e15 	stw	r8,248(sp)
    4800:	00070c00 	call	70c0 <_dtoa_r>
    4804:	d8c02917 	ldw	r3,164(sp)
    4808:	da003e17 	ldw	r8,248(sp)
    480c:	1021883a 	mov	r16,r2
    4810:	00801184 	movi	r2,70
    4814:	80f9883a 	add	fp,r16,r3
    4818:	88bfcc26 	beq	r17,r2,474c <___svfprintf_internal_r+0x1e90>
    481c:	003e9306 	br	426c <___svfprintf_internal_r+0x19b0>
    4820:	df0022c4 	addi	fp,sp,139
    4824:	dc002915 	stw	r16,164(sp)
    4828:	9829883a 	mov	r20,r19
    482c:	e021883a 	mov	r16,fp
    4830:	4027883a 	mov	r19,r8
    4834:	b009883a 	mov	r4,r22
    4838:	01400284 	movi	r5,10
    483c:	000fda80 	call	fda8 <__modsi3>
    4840:	10800c04 	addi	r2,r2,48
    4844:	843fffc4 	addi	r16,r16,-1
    4848:	b009883a 	mov	r4,r22
    484c:	01400284 	movi	r5,10
    4850:	80800005 	stb	r2,0(r16)
    4854:	000fd240 	call	fd24 <__divsi3>
    4858:	102d883a 	mov	r22,r2
    485c:	00800244 	movi	r2,9
    4860:	15bff416 	blt	r2,r22,4834 <___svfprintf_internal_r+0x1f78>
    4864:	9811883a 	mov	r8,r19
    4868:	b0800c04 	addi	r2,r22,48
    486c:	a027883a 	mov	r19,r20
    4870:	8029883a 	mov	r20,r16
    4874:	a17fffc4 	addi	r5,r20,-1
    4878:	a0bfffc5 	stb	r2,-1(r20)
    487c:	dc002917 	ldw	r16,164(sp)
    4880:	2f00752e 	bgeu	r5,fp,4a58 <___svfprintf_internal_r+0x219c>
    4884:	d9c02384 	addi	r7,sp,142
    4888:	3d0fc83a 	sub	r7,r7,r20
    488c:	d9002344 	addi	r4,sp,141
    4890:	e1cf883a 	add	r7,fp,r7
    4894:	00000106 	br	489c <___svfprintf_internal_r+0x1fe0>
    4898:	28800003 	ldbu	r2,0(r5)
    489c:	20800005 	stb	r2,0(r4)
    48a0:	21000044 	addi	r4,r4,1
    48a4:	29400044 	addi	r5,r5,1
    48a8:	21fffb1e 	bne	r4,r7,4898 <___svfprintf_internal_r+0x1fdc>
    48ac:	d8802304 	addi	r2,sp,140
    48b0:	1505c83a 	sub	r2,r2,r20
    48b4:	d8c02344 	addi	r3,sp,141
    48b8:	1885883a 	add	r2,r3,r2
    48bc:	003f7006 	br	4680 <___svfprintf_internal_r+0x1dc4>
    48c0:	0005883a 	mov	r2,zero
    48c4:	003f0b06 	br	44f4 <___svfprintf_internal_r+0x1c38>
    48c8:	d9002917 	ldw	r4,164(sp)
    48cc:	d8c03217 	ldw	r3,200(sp)
    48d0:	20800044 	addi	r2,r4,1
    48d4:	1885883a 	add	r2,r3,r2
    48d8:	d8802e15 	stw	r2,184(sp)
    48dc:	103e870e 	bge	r2,zero,42fc <___svfprintf_internal_r+0x1a40>
    48e0:	0005883a 	mov	r2,zero
    48e4:	003e8506 	br	42fc <___svfprintf_internal_r+0x1a40>
    48e8:	010000b4 	movhi	r4,2
    48ec:	213d1184 	addi	r4,r4,-3002
    48f0:	d9002b15 	stw	r4,172(sp)
    48f4:	003cc506 	br	3c0c <___svfprintf_internal_r+0x1350>
    48f8:	d8c03217 	ldw	r3,200(sp)
    48fc:	18c00044 	addi	r3,r3,1
    4900:	d8c02e15 	stw	r3,184(sp)
    4904:	1805883a 	mov	r2,r3
    4908:	183fa10e 	bge	r3,zero,4790 <___svfprintf_internal_r+0x1ed4>
    490c:	0005883a 	mov	r2,zero
    4910:	003f9f06 	br	4790 <___svfprintf_internal_r+0x1ed4>
    4914:	d9003617 	ldw	r4,216(sp)
    4918:	000d883a 	mov	r6,zero
    491c:	000f883a 	mov	r7,zero
    4920:	a00b883a 	mov	r5,r20
    4924:	d8c03d15 	stw	r3,244(sp)
    4928:	da003e15 	stw	r8,248(sp)
    492c:	001106c0 	call	1106c <__eqdf2>
    4930:	d8c03d17 	ldw	r3,244(sp)
    4934:	da003e17 	ldw	r8,248(sp)
    4938:	103f8726 	beq	r2,zero,4758 <___svfprintf_internal_r+0x1e9c>
    493c:	00800044 	movi	r2,1
    4940:	10c7c83a 	sub	r3,r2,r3
    4944:	d8c02615 	stw	r3,152(sp)
    4948:	003f8406 	br	475c <___svfprintf_internal_r+0x1ea0>
    494c:	20000e1e 	bne	r4,zero,4988 <___svfprintf_internal_r+0x20cc>
    4950:	9480004c 	andi	r18,r18,1
    4954:	90000c1e 	bne	r18,zero,4988 <___svfprintf_internal_r+0x20cc>
    4958:	00800044 	movi	r2,1
    495c:	d8802e15 	stw	r2,184(sp)
    4960:	003e6606 	br	42fc <___svfprintf_internal_r+0x1a40>
    4964:	00800b44 	movi	r2,45
    4968:	05adc83a 	sub	r22,zero,r22
    496c:	d8802305 	stb	r2,140(sp)
    4970:	003f3b06 	br	4660 <___svfprintf_internal_r+0x1da4>
    4974:	0005883a 	mov	r2,zero
    4978:	003f4e06 	br	46b4 <___svfprintf_internal_r+0x1df8>
    497c:	90a4703a 	and	r18,r18,r2
    4980:	903f4a26 	beq	r18,zero,46ac <___svfprintf_internal_r+0x1df0>
    4984:	003f4606 	br	46a0 <___svfprintf_internal_r+0x1de4>
    4988:	d8c02917 	ldw	r3,164(sp)
    498c:	18c00084 	addi	r3,r3,2
    4990:	d8c02e15 	stw	r3,184(sp)
    4994:	1805883a 	mov	r2,r3
    4998:	183e580e 	bge	r3,zero,42fc <___svfprintf_internal_r+0x1a40>
    499c:	003fd006 	br	48e0 <___svfprintf_internal_r+0x2024>
    49a0:	00800084 	movi	r2,2
    49a4:	10c5c83a 	sub	r2,r2,r3
    49a8:	003f7506 	br	4780 <___svfprintf_internal_r+0x1ec4>
    49ac:	d8802d17 	ldw	r2,180(sp)
    49b0:	d9002d17 	ldw	r4,180(sp)
    49b4:	bc400043 	ldbu	r17,1(r23)
    49b8:	10800017 	ldw	r2,0(r2)
    49bc:	582f883a 	mov	r23,r11
    49c0:	d8802915 	stw	r2,164(sp)
    49c4:	20800104 	addi	r2,r4,4
    49c8:	d9002917 	ldw	r4,164(sp)
    49cc:	d8802d15 	stw	r2,180(sp)
    49d0:	203df00e 	bge	r4,zero,4194 <___svfprintf_internal_r+0x18d8>
    49d4:	8c403fcc 	andi	r17,r17,255
    49d8:	00bfffc4 	movi	r2,-1
    49dc:	8c40201c 	xori	r17,r17,128
    49e0:	d8802915 	stw	r2,164(sp)
    49e4:	8c7fe004 	addi	r17,r17,-128
    49e8:	00380806 	br	2a0c <___svfprintf_internal_r+0x150>
    49ec:	9080004c 	andi	r2,r18,1
    49f0:	0039883a 	mov	fp,zero
    49f4:	10000726 	beq	r2,zero,4a14 <___svfprintf_internal_r+0x2158>
    49f8:	d8c02817 	ldw	r3,160(sp)
    49fc:	dc001dc4 	addi	r16,sp,119
    4a00:	00800c04 	movi	r2,48
    4a04:	1c07c83a 	sub	r3,r3,r16
    4a08:	d8801dc5 	stb	r2,119(sp)
    4a0c:	d8c02e15 	stw	r3,184(sp)
    4a10:	00395206 	br	2f5c <___svfprintf_internal_r+0x6a0>
    4a14:	d8002e15 	stw	zero,184(sp)
    4a18:	dc001e04 	addi	r16,sp,120
    4a1c:	00394f06 	br	2f5c <___svfprintf_internal_r+0x6a0>
    4a20:	0005883a 	mov	r2,zero
    4a24:	003e3206 	br	42f0 <___svfprintf_internal_r+0x1a34>
    4a28:	dd802617 	ldw	r22,152(sp)
    4a2c:	003f0606 	br	4648 <___svfprintf_internal_r+0x1d8c>
    4a30:	d9c02785 	stb	r7,158(sp)
    4a34:	003a5106 	br	337c <___svfprintf_internal_r+0xac0>
    4a38:	d9c02785 	stb	r7,158(sp)
    4a3c:	003a3706 	br	331c <___svfprintf_internal_r+0xa60>
    4a40:	0005883a 	mov	r2,zero
    4a44:	003f5e06 	br	47c0 <___svfprintf_internal_r+0x1f04>
    4a48:	d9c02785 	stb	r7,158(sp)
    4a4c:	00391706 	br	2eac <___svfprintf_internal_r+0x5f0>
    4a50:	d9c02785 	stb	r7,158(sp)
    4a54:	0038e606 	br	2df0 <___svfprintf_internal_r+0x534>
    4a58:	d8802344 	addi	r2,sp,141
    4a5c:	003f0806 	br	4680 <___svfprintf_internal_r+0x1dc4>
    4a60:	d9c02785 	stb	r7,158(sp)
    4a64:	0038b706 	br	2d44 <___svfprintf_internal_r+0x488>
    4a68:	d9c02785 	stb	r7,158(sp)
    4a6c:	003adc06 	br	35e0 <___svfprintf_internal_r+0xd24>
    4a70:	d9403917 	ldw	r5,228(sp)
    4a74:	00800304 	movi	r2,12
    4a78:	28800015 	stw	r2,0(r5)
    4a7c:	00bfffc4 	movi	r2,-1
    4a80:	00387806 	br	2c64 <___svfprintf_internal_r+0x3a8>
    4a84:	d9c02785 	stb	r7,158(sp)
    4a88:	003abf06 	br	3588 <___svfprintf_internal_r+0xccc>
    4a8c:	d9c02785 	stb	r7,158(sp)
    4a90:	003a9b06 	br	3500 <___svfprintf_internal_r+0xc44>

00004a94 <_user_strerror>:
    4a94:	0005883a 	mov	r2,zero
    4a98:	f800283a 	ret

00004a9c <___vfprintf_internal_r>:
    4a9c:	deffb804 	addi	sp,sp,-288
    4aa0:	dfc04715 	stw	ra,284(sp)
    4aa4:	ddc04515 	stw	r23,276(sp)
    4aa8:	dd404315 	stw	r21,268(sp)
    4aac:	d9002c15 	stw	r4,176(sp)
    4ab0:	282f883a 	mov	r23,r5
    4ab4:	302b883a 	mov	r21,r6
    4ab8:	d9c02d15 	stw	r7,180(sp)
    4abc:	df004615 	stw	fp,280(sp)
    4ac0:	dd804415 	stw	r22,272(sp)
    4ac4:	dd004215 	stw	r20,264(sp)
    4ac8:	dcc04115 	stw	r19,260(sp)
    4acc:	dc804015 	stw	r18,256(sp)
    4ad0:	dc403f15 	stw	r17,252(sp)
    4ad4:	dc003e15 	stw	r16,248(sp)
    4ad8:	00093f80 	call	93f8 <_localeconv_r>
    4adc:	10800017 	ldw	r2,0(r2)
    4ae0:	1009883a 	mov	r4,r2
    4ae4:	d8803415 	stw	r2,208(sp)
    4ae8:	000b2d80 	call	b2d8 <strlen>
    4aec:	d8803715 	stw	r2,220(sp)
    4af0:	d8802c17 	ldw	r2,176(sp)
    4af4:	10000226 	beq	r2,zero,4b00 <___vfprintf_internal_r+0x64>
    4af8:	10800e17 	ldw	r2,56(r2)
    4afc:	1000f926 	beq	r2,zero,4ee4 <___vfprintf_internal_r+0x448>
    4b00:	b880030b 	ldhu	r2,12(r23)
    4b04:	10c8000c 	andi	r3,r2,8192
    4b08:	1800061e 	bne	r3,zero,4b24 <___vfprintf_internal_r+0x88>
    4b0c:	b9001917 	ldw	r4,100(r23)
    4b10:	00f7ffc4 	movi	r3,-8193
    4b14:	10880014 	ori	r2,r2,8192
    4b18:	20c6703a 	and	r3,r4,r3
    4b1c:	b880030d 	sth	r2,12(r23)
    4b20:	b8c01915 	stw	r3,100(r23)
    4b24:	10c0020c 	andi	r3,r2,8
    4b28:	1800c126 	beq	r3,zero,4e30 <___vfprintf_internal_r+0x394>
    4b2c:	b8c00417 	ldw	r3,16(r23)
    4b30:	1800bf26 	beq	r3,zero,4e30 <___vfprintf_internal_r+0x394>
    4b34:	1080068c 	andi	r2,r2,26
    4b38:	00c00284 	movi	r3,10
    4b3c:	10c0c426 	beq	r2,r3,4e50 <___vfprintf_internal_r+0x3b4>
    4b40:	d8c00404 	addi	r3,sp,16
    4b44:	050000b4 	movhi	r20,2
    4b48:	d9001e04 	addi	r4,sp,120
    4b4c:	a53d1984 	addi	r20,r20,-2970
    4b50:	d8c01e15 	stw	r3,120(sp)
    4b54:	d8002015 	stw	zero,128(sp)
    4b58:	d8001f15 	stw	zero,124(sp)
    4b5c:	d8003315 	stw	zero,204(sp)
    4b60:	d8003615 	stw	zero,216(sp)
    4b64:	d8003815 	stw	zero,224(sp)
    4b68:	1811883a 	mov	r8,r3
    4b6c:	d8003915 	stw	zero,228(sp)
    4b70:	d8003a15 	stw	zero,232(sp)
    4b74:	d8002f15 	stw	zero,188(sp)
    4b78:	d9002815 	stw	r4,160(sp)
    4b7c:	a8800007 	ldb	r2,0(r21)
    4b80:	10027b26 	beq	r2,zero,5570 <___vfprintf_internal_r+0xad4>
    4b84:	00c00944 	movi	r3,37
    4b88:	a821883a 	mov	r16,r21
    4b8c:	10c0021e 	bne	r2,r3,4b98 <___vfprintf_internal_r+0xfc>
    4b90:	00001406 	br	4be4 <___vfprintf_internal_r+0x148>
    4b94:	10c00326 	beq	r2,r3,4ba4 <___vfprintf_internal_r+0x108>
    4b98:	84000044 	addi	r16,r16,1
    4b9c:	80800007 	ldb	r2,0(r16)
    4ba0:	103ffc1e 	bne	r2,zero,4b94 <___vfprintf_internal_r+0xf8>
    4ba4:	8563c83a 	sub	r17,r16,r21
    4ba8:	88000e26 	beq	r17,zero,4be4 <___vfprintf_internal_r+0x148>
    4bac:	d8c02017 	ldw	r3,128(sp)
    4bb0:	d8801f17 	ldw	r2,124(sp)
    4bb4:	45400015 	stw	r21,0(r8)
    4bb8:	1c47883a 	add	r3,r3,r17
    4bbc:	10800044 	addi	r2,r2,1
    4bc0:	d8c02015 	stw	r3,128(sp)
    4bc4:	44400115 	stw	r17,4(r8)
    4bc8:	d8801f15 	stw	r2,124(sp)
    4bcc:	00c001c4 	movi	r3,7
    4bd0:	1880a716 	blt	r3,r2,4e70 <___vfprintf_internal_r+0x3d4>
    4bd4:	42000204 	addi	r8,r8,8
    4bd8:	d9402f17 	ldw	r5,188(sp)
    4bdc:	2c4b883a 	add	r5,r5,r17
    4be0:	d9402f15 	stw	r5,188(sp)
    4be4:	80800007 	ldb	r2,0(r16)
    4be8:	1000a826 	beq	r2,zero,4e8c <___vfprintf_internal_r+0x3f0>
    4bec:	84400047 	ldb	r17,1(r16)
    4bf0:	00bfffc4 	movi	r2,-1
    4bf4:	85400044 	addi	r21,r16,1
    4bf8:	d8002785 	stb	zero,158(sp)
    4bfc:	0007883a 	mov	r3,zero
    4c00:	000f883a 	mov	r7,zero
    4c04:	d8802915 	stw	r2,164(sp)
    4c08:	d8003115 	stw	zero,196(sp)
    4c0c:	0025883a 	mov	r18,zero
    4c10:	01401604 	movi	r5,88
    4c14:	01800244 	movi	r6,9
    4c18:	02800a84 	movi	r10,42
    4c1c:	02401b04 	movi	r9,108
    4c20:	ad400044 	addi	r21,r21,1
    4c24:	88bff804 	addi	r2,r17,-32
    4c28:	28830436 	bltu	r5,r2,583c <___vfprintf_internal_r+0xda0>
    4c2c:	100490ba 	slli	r2,r2,2
    4c30:	01000034 	movhi	r4,0
    4c34:	21131104 	addi	r4,r4,19524
    4c38:	1105883a 	add	r2,r2,r4
    4c3c:	10800017 	ldw	r2,0(r2)
    4c40:	1000683a 	jmp	r2
    4c44:	0000575c 	xori	zero,zero,349
    4c48:	0000583c 	xorhi	zero,zero,352
    4c4c:	0000583c 	xorhi	zero,zero,352
    4c50:	0000577c 	xorhi	zero,zero,349
    4c54:	0000583c 	xorhi	zero,zero,352
    4c58:	0000583c 	xorhi	zero,zero,352
    4c5c:	0000583c 	xorhi	zero,zero,352
    4c60:	0000583c 	xorhi	zero,zero,352
    4c64:	0000583c 	xorhi	zero,zero,352
    4c68:	0000583c 	xorhi	zero,zero,352
    4c6c:	00004ef0 	cmpltui	zero,zero,315
    4c70:	00005698 	cmpnei	zero,zero,346
    4c74:	0000583c 	xorhi	zero,zero,352
    4c78:	00004db8 	rdprs	zero,zero,310
    4c7c:	00004f18 	cmpnei	zero,zero,316
    4c80:	0000583c 	xorhi	zero,zero,352
    4c84:	00004f58 	cmpnei	zero,zero,317
    4c88:	00004f64 	muli	zero,zero,317
    4c8c:	00004f64 	muli	zero,zero,317
    4c90:	00004f64 	muli	zero,zero,317
    4c94:	00004f64 	muli	zero,zero,317
    4c98:	00004f64 	muli	zero,zero,317
    4c9c:	00004f64 	muli	zero,zero,317
    4ca0:	00004f64 	muli	zero,zero,317
    4ca4:	00004f64 	muli	zero,zero,317
    4ca8:	00004f64 	muli	zero,zero,317
    4cac:	0000583c 	xorhi	zero,zero,352
    4cb0:	0000583c 	xorhi	zero,zero,352
    4cb4:	0000583c 	xorhi	zero,zero,352
    4cb8:	0000583c 	xorhi	zero,zero,352
    4cbc:	0000583c 	xorhi	zero,zero,352
    4cc0:	0000583c 	xorhi	zero,zero,352
    4cc4:	0000583c 	xorhi	zero,zero,352
    4cc8:	0000583c 	xorhi	zero,zero,352
    4ccc:	0000583c 	xorhi	zero,zero,352
    4cd0:	0000583c 	xorhi	zero,zero,352
    4cd4:	00004f98 	cmpnei	zero,zero,318
    4cd8:	00005054 	movui	zero,321
    4cdc:	0000583c 	xorhi	zero,zero,352
    4ce0:	00005054 	movui	zero,321
    4ce4:	0000583c 	xorhi	zero,zero,352
    4ce8:	0000583c 	xorhi	zero,zero,352
    4cec:	0000583c 	xorhi	zero,zero,352
    4cf0:	0000583c 	xorhi	zero,zero,352
    4cf4:	000050f4 	movhi	zero,323
    4cf8:	0000583c 	xorhi	zero,zero,352
    4cfc:	0000583c 	xorhi	zero,zero,352
    4d00:	00005100 	call	510 <Task_VGA_init+0x2c>
    4d04:	0000583c 	xorhi	zero,zero,352
    4d08:	0000583c 	xorhi	zero,zero,352
    4d0c:	0000583c 	xorhi	zero,zero,352
    4d10:	0000583c 	xorhi	zero,zero,352
    4d14:	0000583c 	xorhi	zero,zero,352
    4d18:	00005578 	rdprs	zero,zero,341
    4d1c:	0000583c 	xorhi	zero,zero,352
    4d20:	0000583c 	xorhi	zero,zero,352
    4d24:	000055d8 	cmpnei	zero,zero,343
    4d28:	0000583c 	xorhi	zero,zero,352
    4d2c:	0000583c 	xorhi	zero,zero,352
    4d30:	0000583c 	xorhi	zero,zero,352
    4d34:	0000583c 	xorhi	zero,zero,352
    4d38:	0000583c 	xorhi	zero,zero,352
    4d3c:	0000583c 	xorhi	zero,zero,352
    4d40:	0000583c 	xorhi	zero,zero,352
    4d44:	0000583c 	xorhi	zero,zero,352
    4d48:	0000583c 	xorhi	zero,zero,352
    4d4c:	0000583c 	xorhi	zero,zero,352
    4d50:	000057e8 	cmpgeui	zero,zero,351
    4d54:	00005788 	cmpgei	zero,zero,350
    4d58:	00005054 	movui	zero,321
    4d5c:	00005054 	movui	zero,321
    4d60:	00005054 	movui	zero,321
    4d64:	00005798 	cmpnei	zero,zero,350
    4d68:	00005788 	cmpgei	zero,zero,350
    4d6c:	0000583c 	xorhi	zero,zero,352
    4d70:	0000583c 	xorhi	zero,zero,352
    4d74:	000057a4 	muli	zero,zero,350
    4d78:	0000583c 	xorhi	zero,zero,352
    4d7c:	000057b4 	movhi	zero,350
    4d80:	00005688 	cmpgei	zero,zero,346
    4d84:	00004dc4 	movi	zero,311
    4d88:	000056a8 	cmpgeui	zero,zero,346
    4d8c:	0000583c 	xorhi	zero,zero,352
    4d90:	000056b4 	movhi	zero,346
    4d94:	0000583c 	xorhi	zero,zero,352
    4d98:	00005710 	cmplti	zero,zero,348
    4d9c:	0000583c 	xorhi	zero,zero,352
    4da0:	0000583c 	xorhi	zero,zero,352
    4da4:	00005720 	cmpeqi	zero,zero,348
    4da8:	d9003117 	ldw	r4,196(sp)
    4dac:	d8802d15 	stw	r2,180(sp)
    4db0:	0109c83a 	sub	r4,zero,r4
    4db4:	d9003115 	stw	r4,196(sp)
    4db8:	94800114 	ori	r18,r18,4
    4dbc:	ac400007 	ldb	r17,0(r21)
    4dc0:	003f9706 	br	4c20 <___vfprintf_internal_r+0x184>
    4dc4:	00800c04 	movi	r2,48
    4dc8:	d9002d17 	ldw	r4,180(sp)
    4dcc:	d9402917 	ldw	r5,164(sp)
    4dd0:	d8802705 	stb	r2,156(sp)
    4dd4:	00801e04 	movi	r2,120
    4dd8:	d8802745 	stb	r2,157(sp)
    4ddc:	d8002785 	stb	zero,158(sp)
    4de0:	20c00104 	addi	r3,r4,4
    4de4:	24c00017 	ldw	r19,0(r4)
    4de8:	002d883a 	mov	r22,zero
    4dec:	90800094 	ori	r2,r18,2
    4df0:	28029a16 	blt	r5,zero,585c <___vfprintf_internal_r+0xdc0>
    4df4:	00bfdfc4 	movi	r2,-129
    4df8:	90a4703a 	and	r18,r18,r2
    4dfc:	d8c02d15 	stw	r3,180(sp)
    4e00:	94800094 	ori	r18,r18,2
    4e04:	9802871e 	bne	r19,zero,5824 <___vfprintf_internal_r+0xd88>
    4e08:	008000b4 	movhi	r2,2
    4e0c:	10bd0a04 	addi	r2,r2,-3032
    4e10:	d8803915 	stw	r2,228(sp)
    4e14:	04401e04 	movi	r17,120
    4e18:	d8802917 	ldw	r2,164(sp)
    4e1c:	0039883a 	mov	fp,zero
    4e20:	1001e926 	beq	r2,zero,55c8 <___vfprintf_internal_r+0xb2c>
    4e24:	0027883a 	mov	r19,zero
    4e28:	002d883a 	mov	r22,zero
    4e2c:	00020506 	br	5644 <___vfprintf_internal_r+0xba8>
    4e30:	d9002c17 	ldw	r4,176(sp)
    4e34:	b80b883a 	mov	r5,r23
    4e38:	0006d6c0 	call	6d6c <__swsetup_r>
    4e3c:	1005ac1e 	bne	r2,zero,64f0 <___vfprintf_internal_r+0x1a54>
    4e40:	b880030b 	ldhu	r2,12(r23)
    4e44:	00c00284 	movi	r3,10
    4e48:	1080068c 	andi	r2,r2,26
    4e4c:	10ff3c1e 	bne	r2,r3,4b40 <___vfprintf_internal_r+0xa4>
    4e50:	b880038f 	ldh	r2,14(r23)
    4e54:	103f3a16 	blt	r2,zero,4b40 <___vfprintf_internal_r+0xa4>
    4e58:	d9c02d17 	ldw	r7,180(sp)
    4e5c:	d9002c17 	ldw	r4,176(sp)
    4e60:	a80d883a 	mov	r6,r21
    4e64:	b80b883a 	mov	r5,r23
    4e68:	0006cb00 	call	6cb0 <__sbprintf>
    4e6c:	00001106 	br	4eb4 <___vfprintf_internal_r+0x418>
    4e70:	d9002c17 	ldw	r4,176(sp)
    4e74:	d9801e04 	addi	r6,sp,120
    4e78:	b80b883a 	mov	r5,r23
    4e7c:	000c8780 	call	c878 <__sprint_r>
    4e80:	1000081e 	bne	r2,zero,4ea4 <___vfprintf_internal_r+0x408>
    4e84:	da000404 	addi	r8,sp,16
    4e88:	003f5306 	br	4bd8 <___vfprintf_internal_r+0x13c>
    4e8c:	d8802017 	ldw	r2,128(sp)
    4e90:	10000426 	beq	r2,zero,4ea4 <___vfprintf_internal_r+0x408>
    4e94:	d9002c17 	ldw	r4,176(sp)
    4e98:	d9801e04 	addi	r6,sp,120
    4e9c:	b80b883a 	mov	r5,r23
    4ea0:	000c8780 	call	c878 <__sprint_r>
    4ea4:	b880030b 	ldhu	r2,12(r23)
    4ea8:	1080100c 	andi	r2,r2,64
    4eac:	1005901e 	bne	r2,zero,64f0 <___vfprintf_internal_r+0x1a54>
    4eb0:	d8802f17 	ldw	r2,188(sp)
    4eb4:	dfc04717 	ldw	ra,284(sp)
    4eb8:	df004617 	ldw	fp,280(sp)
    4ebc:	ddc04517 	ldw	r23,276(sp)
    4ec0:	dd804417 	ldw	r22,272(sp)
    4ec4:	dd404317 	ldw	r21,268(sp)
    4ec8:	dd004217 	ldw	r20,264(sp)
    4ecc:	dcc04117 	ldw	r19,260(sp)
    4ed0:	dc804017 	ldw	r18,256(sp)
    4ed4:	dc403f17 	ldw	r17,252(sp)
    4ed8:	dc003e17 	ldw	r16,248(sp)
    4edc:	dec04804 	addi	sp,sp,288
    4ee0:	f800283a 	ret
    4ee4:	d9002c17 	ldw	r4,176(sp)
    4ee8:	0008d400 	call	8d40 <__sinit>
    4eec:	003f0406 	br	4b00 <___vfprintf_internal_r+0x64>
    4ef0:	d8802d17 	ldw	r2,180(sp)
    4ef4:	d9002d17 	ldw	r4,180(sp)
    4ef8:	10800017 	ldw	r2,0(r2)
    4efc:	d8803115 	stw	r2,196(sp)
    4f00:	20800104 	addi	r2,r4,4
    4f04:	d9003117 	ldw	r4,196(sp)
    4f08:	203fa716 	blt	r4,zero,4da8 <___vfprintf_internal_r+0x30c>
    4f0c:	d8802d15 	stw	r2,180(sp)
    4f10:	ac400007 	ldb	r17,0(r21)
    4f14:	003f4206 	br	4c20 <___vfprintf_internal_r+0x184>
    4f18:	ac400007 	ldb	r17,0(r21)
    4f1c:	aac00044 	addi	r11,r21,1
    4f20:	8a872826 	beq	r17,r10,6bc4 <___vfprintf_internal_r+0x2128>
    4f24:	88bff404 	addi	r2,r17,-48
    4f28:	0009883a 	mov	r4,zero
    4f2c:	30867d36 	bltu	r6,r2,6924 <___vfprintf_internal_r+0x1e88>
    4f30:	5c400007 	ldb	r17,0(r11)
    4f34:	210002a4 	muli	r4,r4,10
    4f38:	5d400044 	addi	r21,r11,1
    4f3c:	a817883a 	mov	r11,r21
    4f40:	2089883a 	add	r4,r4,r2
    4f44:	88bff404 	addi	r2,r17,-48
    4f48:	30bff92e 	bgeu	r6,r2,4f30 <___vfprintf_internal_r+0x494>
    4f4c:	2005c916 	blt	r4,zero,6674 <___vfprintf_internal_r+0x1bd8>
    4f50:	d9002915 	stw	r4,164(sp)
    4f54:	003f3306 	br	4c24 <___vfprintf_internal_r+0x188>
    4f58:	94802014 	ori	r18,r18,128
    4f5c:	ac400007 	ldb	r17,0(r21)
    4f60:	003f2f06 	br	4c20 <___vfprintf_internal_r+0x184>
    4f64:	a809883a 	mov	r4,r21
    4f68:	d8003115 	stw	zero,196(sp)
    4f6c:	88bff404 	addi	r2,r17,-48
    4f70:	0017883a 	mov	r11,zero
    4f74:	24400007 	ldb	r17,0(r4)
    4f78:	5ac002a4 	muli	r11,r11,10
    4f7c:	ad400044 	addi	r21,r21,1
    4f80:	a809883a 	mov	r4,r21
    4f84:	12d7883a 	add	r11,r2,r11
    4f88:	88bff404 	addi	r2,r17,-48
    4f8c:	30bff92e 	bgeu	r6,r2,4f74 <___vfprintf_internal_r+0x4d8>
    4f90:	dac03115 	stw	r11,196(sp)
    4f94:	003f2306 	br	4c24 <___vfprintf_internal_r+0x188>
    4f98:	18c03fcc 	andi	r3,r3,255
    4f9c:	18072b1e 	bne	r3,zero,6c4c <___vfprintf_internal_r+0x21b0>
    4fa0:	94800414 	ori	r18,r18,16
    4fa4:	9080080c 	andi	r2,r18,32
    4fa8:	10037b26 	beq	r2,zero,5d98 <___vfprintf_internal_r+0x12fc>
    4fac:	d9402d17 	ldw	r5,180(sp)
    4fb0:	28800117 	ldw	r2,4(r5)
    4fb4:	2cc00017 	ldw	r19,0(r5)
    4fb8:	29400204 	addi	r5,r5,8
    4fbc:	d9402d15 	stw	r5,180(sp)
    4fc0:	102d883a 	mov	r22,r2
    4fc4:	10044b16 	blt	r2,zero,60f4 <___vfprintf_internal_r+0x1658>
    4fc8:	d9402917 	ldw	r5,164(sp)
    4fcc:	df002783 	ldbu	fp,158(sp)
    4fd0:	2803bc16 	blt	r5,zero,5ec4 <___vfprintf_internal_r+0x1428>
    4fd4:	00ffdfc4 	movi	r3,-129
    4fd8:	9d84b03a 	or	r2,r19,r22
    4fdc:	90e4703a 	and	r18,r18,r3
    4fe0:	10017726 	beq	r2,zero,55c0 <___vfprintf_internal_r+0xb24>
    4fe4:	b0038326 	beq	r22,zero,5df4 <___vfprintf_internal_r+0x1358>
    4fe8:	dc402a15 	stw	r17,168(sp)
    4fec:	dc001e04 	addi	r16,sp,120
    4ff0:	b023883a 	mov	r17,r22
    4ff4:	402d883a 	mov	r22,r8
    4ff8:	9809883a 	mov	r4,r19
    4ffc:	880b883a 	mov	r5,r17
    5000:	01800284 	movi	r6,10
    5004:	000f883a 	mov	r7,zero
    5008:	000f7ec0 	call	f7ec <__umoddi3>
    500c:	10800c04 	addi	r2,r2,48
    5010:	843fffc4 	addi	r16,r16,-1
    5014:	9809883a 	mov	r4,r19
    5018:	880b883a 	mov	r5,r17
    501c:	80800005 	stb	r2,0(r16)
    5020:	01800284 	movi	r6,10
    5024:	000f883a 	mov	r7,zero
    5028:	000f2740 	call	f274 <__udivdi3>
    502c:	1027883a 	mov	r19,r2
    5030:	10c4b03a 	or	r2,r2,r3
    5034:	1823883a 	mov	r17,r3
    5038:	103fef1e 	bne	r2,zero,4ff8 <___vfprintf_internal_r+0x55c>
    503c:	d8c02817 	ldw	r3,160(sp)
    5040:	dc402a17 	ldw	r17,168(sp)
    5044:	b011883a 	mov	r8,r22
    5048:	1c07c83a 	sub	r3,r3,r16
    504c:	d8c02e15 	stw	r3,184(sp)
    5050:	00005906 	br	51b8 <___vfprintf_internal_r+0x71c>
    5054:	18c03fcc 	andi	r3,r3,255
    5058:	1806fa1e 	bne	r3,zero,6c44 <___vfprintf_internal_r+0x21a8>
    505c:	9080020c 	andi	r2,r18,8
    5060:	10048a26 	beq	r2,zero,628c <___vfprintf_internal_r+0x17f0>
    5064:	d8c02d17 	ldw	r3,180(sp)
    5068:	d9002d17 	ldw	r4,180(sp)
    506c:	d9402d17 	ldw	r5,180(sp)
    5070:	18c00017 	ldw	r3,0(r3)
    5074:	21000117 	ldw	r4,4(r4)
    5078:	29400204 	addi	r5,r5,8
    507c:	d8c03615 	stw	r3,216(sp)
    5080:	d9003815 	stw	r4,224(sp)
    5084:	d9402d15 	stw	r5,180(sp)
    5088:	d9003617 	ldw	r4,216(sp)
    508c:	d9403817 	ldw	r5,224(sp)
    5090:	da003d15 	stw	r8,244(sp)
    5094:	04000044 	movi	r16,1
    5098:	000aff80 	call	aff8 <__fpclassifyd>
    509c:	da003d17 	ldw	r8,244(sp)
    50a0:	14041f1e 	bne	r2,r16,6120 <___vfprintf_internal_r+0x1684>
    50a4:	d9003617 	ldw	r4,216(sp)
    50a8:	d9403817 	ldw	r5,224(sp)
    50ac:	000d883a 	mov	r6,zero
    50b0:	000f883a 	mov	r7,zero
    50b4:	00111d00 	call	111d0 <__ledf2>
    50b8:	da003d17 	ldw	r8,244(sp)
    50bc:	1005be16 	blt	r2,zero,67b8 <___vfprintf_internal_r+0x1d1c>
    50c0:	df002783 	ldbu	fp,158(sp)
    50c4:	008011c4 	movi	r2,71
    50c8:	1445330e 	bge	r2,r17,6598 <___vfprintf_internal_r+0x1afc>
    50cc:	040000b4 	movhi	r16,2
    50d0:	843d0204 	addi	r16,r16,-3064
    50d4:	00c000c4 	movi	r3,3
    50d8:	00bfdfc4 	movi	r2,-129
    50dc:	d8c02a15 	stw	r3,168(sp)
    50e0:	90a4703a 	and	r18,r18,r2
    50e4:	d8c02e15 	stw	r3,184(sp)
    50e8:	d8002915 	stw	zero,164(sp)
    50ec:	d8003215 	stw	zero,200(sp)
    50f0:	00003706 	br	51d0 <___vfprintf_internal_r+0x734>
    50f4:	94800214 	ori	r18,r18,8
    50f8:	ac400007 	ldb	r17,0(r21)
    50fc:	003ec806 	br	4c20 <___vfprintf_internal_r+0x184>
    5100:	18c03fcc 	andi	r3,r3,255
    5104:	1806db1e 	bne	r3,zero,6c74 <___vfprintf_internal_r+0x21d8>
    5108:	94800414 	ori	r18,r18,16
    510c:	9080080c 	andi	r2,r18,32
    5110:	1002d826 	beq	r2,zero,5c74 <___vfprintf_internal_r+0x11d8>
    5114:	d9402d17 	ldw	r5,180(sp)
    5118:	d8c02917 	ldw	r3,164(sp)
    511c:	d8002785 	stb	zero,158(sp)
    5120:	28800204 	addi	r2,r5,8
    5124:	2cc00017 	ldw	r19,0(r5)
    5128:	2d800117 	ldw	r22,4(r5)
    512c:	18048f16 	blt	r3,zero,636c <___vfprintf_internal_r+0x18d0>
    5130:	013fdfc4 	movi	r4,-129
    5134:	9d86b03a 	or	r3,r19,r22
    5138:	d8802d15 	stw	r2,180(sp)
    513c:	9124703a 	and	r18,r18,r4
    5140:	1802d91e 	bne	r3,zero,5ca8 <___vfprintf_internal_r+0x120c>
    5144:	d8c02917 	ldw	r3,164(sp)
    5148:	0039883a 	mov	fp,zero
    514c:	1805c326 	beq	r3,zero,685c <___vfprintf_internal_r+0x1dc0>
    5150:	0027883a 	mov	r19,zero
    5154:	002d883a 	mov	r22,zero
    5158:	dc001e04 	addi	r16,sp,120
    515c:	9806d0fa 	srli	r3,r19,3
    5160:	b008977a 	slli	r4,r22,29
    5164:	b02cd0fa 	srli	r22,r22,3
    5168:	9cc001cc 	andi	r19,r19,7
    516c:	98800c04 	addi	r2,r19,48
    5170:	843fffc4 	addi	r16,r16,-1
    5174:	20e6b03a 	or	r19,r4,r3
    5178:	80800005 	stb	r2,0(r16)
    517c:	9d86b03a 	or	r3,r19,r22
    5180:	183ff61e 	bne	r3,zero,515c <___vfprintf_internal_r+0x6c0>
    5184:	90c0004c 	andi	r3,r18,1
    5188:	18013b26 	beq	r3,zero,5678 <___vfprintf_internal_r+0xbdc>
    518c:	10803fcc 	andi	r2,r2,255
    5190:	1080201c 	xori	r2,r2,128
    5194:	10bfe004 	addi	r2,r2,-128
    5198:	00c00c04 	movi	r3,48
    519c:	10c13626 	beq	r2,r3,5678 <___vfprintf_internal_r+0xbdc>
    51a0:	80ffffc5 	stb	r3,-1(r16)
    51a4:	d8c02817 	ldw	r3,160(sp)
    51a8:	80bfffc4 	addi	r2,r16,-1
    51ac:	1021883a 	mov	r16,r2
    51b0:	1887c83a 	sub	r3,r3,r2
    51b4:	d8c02e15 	stw	r3,184(sp)
    51b8:	d8802e17 	ldw	r2,184(sp)
    51bc:	d9002917 	ldw	r4,164(sp)
    51c0:	1100010e 	bge	r2,r4,51c8 <___vfprintf_internal_r+0x72c>
    51c4:	2005883a 	mov	r2,r4
    51c8:	d8802a15 	stw	r2,168(sp)
    51cc:	d8003215 	stw	zero,200(sp)
    51d0:	e7003fcc 	andi	fp,fp,255
    51d4:	e700201c 	xori	fp,fp,128
    51d8:	e73fe004 	addi	fp,fp,-128
    51dc:	e0000326 	beq	fp,zero,51ec <___vfprintf_internal_r+0x750>
    51e0:	d8c02a17 	ldw	r3,168(sp)
    51e4:	18c00044 	addi	r3,r3,1
    51e8:	d8c02a15 	stw	r3,168(sp)
    51ec:	90c0008c 	andi	r3,r18,2
    51f0:	d8c02b15 	stw	r3,172(sp)
    51f4:	18000326 	beq	r3,zero,5204 <___vfprintf_internal_r+0x768>
    51f8:	d8c02a17 	ldw	r3,168(sp)
    51fc:	18c00084 	addi	r3,r3,2
    5200:	d8c02a15 	stw	r3,168(sp)
    5204:	90c0210c 	andi	r3,r18,132
    5208:	d8c03015 	stw	r3,192(sp)
    520c:	1801a31e 	bne	r3,zero,589c <___vfprintf_internal_r+0xe00>
    5210:	d9003117 	ldw	r4,196(sp)
    5214:	d8c02a17 	ldw	r3,168(sp)
    5218:	20e7c83a 	sub	r19,r4,r3
    521c:	04c19f0e 	bge	zero,r19,589c <___vfprintf_internal_r+0xe00>
    5220:	02400404 	movi	r9,16
    5224:	d8c02017 	ldw	r3,128(sp)
    5228:	d8801f17 	ldw	r2,124(sp)
    522c:	4cc50d0e 	bge	r9,r19,6664 <___vfprintf_internal_r+0x1bc8>
    5230:	014000b4 	movhi	r5,2
    5234:	297d1d84 	addi	r5,r5,-2954
    5238:	dc403b15 	stw	r17,236(sp)
    523c:	d9403515 	stw	r5,212(sp)
    5240:	9823883a 	mov	r17,r19
    5244:	482d883a 	mov	r22,r9
    5248:	9027883a 	mov	r19,r18
    524c:	070001c4 	movi	fp,7
    5250:	8025883a 	mov	r18,r16
    5254:	dc002c17 	ldw	r16,176(sp)
    5258:	00000306 	br	5268 <___vfprintf_internal_r+0x7cc>
    525c:	8c7ffc04 	addi	r17,r17,-16
    5260:	42000204 	addi	r8,r8,8
    5264:	b440130e 	bge	r22,r17,52b4 <___vfprintf_internal_r+0x818>
    5268:	010000b4 	movhi	r4,2
    526c:	18c00404 	addi	r3,r3,16
    5270:	10800044 	addi	r2,r2,1
    5274:	213d1d84 	addi	r4,r4,-2954
    5278:	41000015 	stw	r4,0(r8)
    527c:	45800115 	stw	r22,4(r8)
    5280:	d8c02015 	stw	r3,128(sp)
    5284:	d8801f15 	stw	r2,124(sp)
    5288:	e0bff40e 	bge	fp,r2,525c <___vfprintf_internal_r+0x7c0>
    528c:	d9801e04 	addi	r6,sp,120
    5290:	b80b883a 	mov	r5,r23
    5294:	8009883a 	mov	r4,r16
    5298:	000c8780 	call	c878 <__sprint_r>
    529c:	103f011e 	bne	r2,zero,4ea4 <___vfprintf_internal_r+0x408>
    52a0:	8c7ffc04 	addi	r17,r17,-16
    52a4:	d8c02017 	ldw	r3,128(sp)
    52a8:	d8801f17 	ldw	r2,124(sp)
    52ac:	da000404 	addi	r8,sp,16
    52b0:	b47fed16 	blt	r22,r17,5268 <___vfprintf_internal_r+0x7cc>
    52b4:	9021883a 	mov	r16,r18
    52b8:	9825883a 	mov	r18,r19
    52bc:	8827883a 	mov	r19,r17
    52c0:	dc403b17 	ldw	r17,236(sp)
    52c4:	d9403517 	ldw	r5,212(sp)
    52c8:	98c7883a 	add	r3,r19,r3
    52cc:	10800044 	addi	r2,r2,1
    52d0:	41400015 	stw	r5,0(r8)
    52d4:	44c00115 	stw	r19,4(r8)
    52d8:	d8c02015 	stw	r3,128(sp)
    52dc:	d8801f15 	stw	r2,124(sp)
    52e0:	010001c4 	movi	r4,7
    52e4:	2082a316 	blt	r4,r2,5d74 <___vfprintf_internal_r+0x12d8>
    52e8:	df002787 	ldb	fp,158(sp)
    52ec:	42000204 	addi	r8,r8,8
    52f0:	e0000c26 	beq	fp,zero,5324 <___vfprintf_internal_r+0x888>
    52f4:	d8801f17 	ldw	r2,124(sp)
    52f8:	d9002784 	addi	r4,sp,158
    52fc:	18c00044 	addi	r3,r3,1
    5300:	10800044 	addi	r2,r2,1
    5304:	41000015 	stw	r4,0(r8)
    5308:	01000044 	movi	r4,1
    530c:	41000115 	stw	r4,4(r8)
    5310:	d8c02015 	stw	r3,128(sp)
    5314:	d8801f15 	stw	r2,124(sp)
    5318:	010001c4 	movi	r4,7
    531c:	20823c16 	blt	r4,r2,5c10 <___vfprintf_internal_r+0x1174>
    5320:	42000204 	addi	r8,r8,8
    5324:	d8802b17 	ldw	r2,172(sp)
    5328:	10000c26 	beq	r2,zero,535c <___vfprintf_internal_r+0x8c0>
    532c:	d8801f17 	ldw	r2,124(sp)
    5330:	d9002704 	addi	r4,sp,156
    5334:	18c00084 	addi	r3,r3,2
    5338:	10800044 	addi	r2,r2,1
    533c:	41000015 	stw	r4,0(r8)
    5340:	01000084 	movi	r4,2
    5344:	41000115 	stw	r4,4(r8)
    5348:	d8c02015 	stw	r3,128(sp)
    534c:	d8801f15 	stw	r2,124(sp)
    5350:	010001c4 	movi	r4,7
    5354:	20823616 	blt	r4,r2,5c30 <___vfprintf_internal_r+0x1194>
    5358:	42000204 	addi	r8,r8,8
    535c:	d9003017 	ldw	r4,192(sp)
    5360:	00802004 	movi	r2,128
    5364:	20819926 	beq	r4,r2,59cc <___vfprintf_internal_r+0xf30>
    5368:	d9402917 	ldw	r5,164(sp)
    536c:	d8802e17 	ldw	r2,184(sp)
    5370:	28adc83a 	sub	r22,r5,r2
    5374:	0580310e 	bge	zero,r22,543c <___vfprintf_internal_r+0x9a0>
    5378:	07000404 	movi	fp,16
    537c:	d8801f17 	ldw	r2,124(sp)
    5380:	e584140e 	bge	fp,r22,63d4 <___vfprintf_internal_r+0x1938>
    5384:	014000b4 	movhi	r5,2
    5388:	297d1984 	addi	r5,r5,-2970
    538c:	dc402915 	stw	r17,164(sp)
    5390:	d9402b15 	stw	r5,172(sp)
    5394:	b023883a 	mov	r17,r22
    5398:	04c001c4 	movi	r19,7
    539c:	a82d883a 	mov	r22,r21
    53a0:	902b883a 	mov	r21,r18
    53a4:	8025883a 	mov	r18,r16
    53a8:	dc002c17 	ldw	r16,176(sp)
    53ac:	00000306 	br	53bc <___vfprintf_internal_r+0x920>
    53b0:	8c7ffc04 	addi	r17,r17,-16
    53b4:	42000204 	addi	r8,r8,8
    53b8:	e440110e 	bge	fp,r17,5400 <___vfprintf_internal_r+0x964>
    53bc:	18c00404 	addi	r3,r3,16
    53c0:	10800044 	addi	r2,r2,1
    53c4:	45000015 	stw	r20,0(r8)
    53c8:	47000115 	stw	fp,4(r8)
    53cc:	d8c02015 	stw	r3,128(sp)
    53d0:	d8801f15 	stw	r2,124(sp)
    53d4:	98bff60e 	bge	r19,r2,53b0 <___vfprintf_internal_r+0x914>
    53d8:	d9801e04 	addi	r6,sp,120
    53dc:	b80b883a 	mov	r5,r23
    53e0:	8009883a 	mov	r4,r16
    53e4:	000c8780 	call	c878 <__sprint_r>
    53e8:	103eae1e 	bne	r2,zero,4ea4 <___vfprintf_internal_r+0x408>
    53ec:	8c7ffc04 	addi	r17,r17,-16
    53f0:	d8c02017 	ldw	r3,128(sp)
    53f4:	d8801f17 	ldw	r2,124(sp)
    53f8:	da000404 	addi	r8,sp,16
    53fc:	e47fef16 	blt	fp,r17,53bc <___vfprintf_internal_r+0x920>
    5400:	9021883a 	mov	r16,r18
    5404:	a825883a 	mov	r18,r21
    5408:	b02b883a 	mov	r21,r22
    540c:	882d883a 	mov	r22,r17
    5410:	dc402917 	ldw	r17,164(sp)
    5414:	d9002b17 	ldw	r4,172(sp)
    5418:	1d87883a 	add	r3,r3,r22
    541c:	10800044 	addi	r2,r2,1
    5420:	41000015 	stw	r4,0(r8)
    5424:	45800115 	stw	r22,4(r8)
    5428:	d8c02015 	stw	r3,128(sp)
    542c:	d8801f15 	stw	r2,124(sp)
    5430:	010001c4 	movi	r4,7
    5434:	2081ee16 	blt	r4,r2,5bf0 <___vfprintf_internal_r+0x1154>
    5438:	42000204 	addi	r8,r8,8
    543c:	9080400c 	andi	r2,r18,256
    5440:	1001181e 	bne	r2,zero,58a4 <___vfprintf_internal_r+0xe08>
    5444:	d9402e17 	ldw	r5,184(sp)
    5448:	d8801f17 	ldw	r2,124(sp)
    544c:	44000015 	stw	r16,0(r8)
    5450:	1947883a 	add	r3,r3,r5
    5454:	10800044 	addi	r2,r2,1
    5458:	41400115 	stw	r5,4(r8)
    545c:	d8c02015 	stw	r3,128(sp)
    5460:	d8801f15 	stw	r2,124(sp)
    5464:	010001c4 	movi	r4,7
    5468:	2081d316 	blt	r4,r2,5bb8 <___vfprintf_internal_r+0x111c>
    546c:	42000204 	addi	r8,r8,8
    5470:	9480010c 	andi	r18,r18,4
    5474:	90003226 	beq	r18,zero,5540 <___vfprintf_internal_r+0xaa4>
    5478:	d9403117 	ldw	r5,196(sp)
    547c:	d8802a17 	ldw	r2,168(sp)
    5480:	28a1c83a 	sub	r16,r5,r2
    5484:	04002e0e 	bge	zero,r16,5540 <___vfprintf_internal_r+0xaa4>
    5488:	04400404 	movi	r17,16
    548c:	d8801f17 	ldw	r2,124(sp)
    5490:	8c04a20e 	bge	r17,r16,671c <___vfprintf_internal_r+0x1c80>
    5494:	014000b4 	movhi	r5,2
    5498:	297d1d84 	addi	r5,r5,-2954
    549c:	d9403515 	stw	r5,212(sp)
    54a0:	048001c4 	movi	r18,7
    54a4:	dcc02c17 	ldw	r19,176(sp)
    54a8:	00000306 	br	54b8 <___vfprintf_internal_r+0xa1c>
    54ac:	843ffc04 	addi	r16,r16,-16
    54b0:	42000204 	addi	r8,r8,8
    54b4:	8c00130e 	bge	r17,r16,5504 <___vfprintf_internal_r+0xa68>
    54b8:	010000b4 	movhi	r4,2
    54bc:	18c00404 	addi	r3,r3,16
    54c0:	10800044 	addi	r2,r2,1
    54c4:	213d1d84 	addi	r4,r4,-2954
    54c8:	41000015 	stw	r4,0(r8)
    54cc:	44400115 	stw	r17,4(r8)
    54d0:	d8c02015 	stw	r3,128(sp)
    54d4:	d8801f15 	stw	r2,124(sp)
    54d8:	90bff40e 	bge	r18,r2,54ac <___vfprintf_internal_r+0xa10>
    54dc:	d9801e04 	addi	r6,sp,120
    54e0:	b80b883a 	mov	r5,r23
    54e4:	9809883a 	mov	r4,r19
    54e8:	000c8780 	call	c878 <__sprint_r>
    54ec:	103e6d1e 	bne	r2,zero,4ea4 <___vfprintf_internal_r+0x408>
    54f0:	843ffc04 	addi	r16,r16,-16
    54f4:	d8c02017 	ldw	r3,128(sp)
    54f8:	d8801f17 	ldw	r2,124(sp)
    54fc:	da000404 	addi	r8,sp,16
    5500:	8c3fed16 	blt	r17,r16,54b8 <___vfprintf_internal_r+0xa1c>
    5504:	d9403517 	ldw	r5,212(sp)
    5508:	1c07883a 	add	r3,r3,r16
    550c:	10800044 	addi	r2,r2,1
    5510:	41400015 	stw	r5,0(r8)
    5514:	44000115 	stw	r16,4(r8)
    5518:	d8c02015 	stw	r3,128(sp)
    551c:	d8801f15 	stw	r2,124(sp)
    5520:	010001c4 	movi	r4,7
    5524:	2080060e 	bge	r4,r2,5540 <___vfprintf_internal_r+0xaa4>
    5528:	d9002c17 	ldw	r4,176(sp)
    552c:	d9801e04 	addi	r6,sp,120
    5530:	b80b883a 	mov	r5,r23
    5534:	000c8780 	call	c878 <__sprint_r>
    5538:	103e5a1e 	bne	r2,zero,4ea4 <___vfprintf_internal_r+0x408>
    553c:	d8c02017 	ldw	r3,128(sp)
    5540:	d8803117 	ldw	r2,196(sp)
    5544:	d9002a17 	ldw	r4,168(sp)
    5548:	1100010e 	bge	r2,r4,5550 <___vfprintf_internal_r+0xab4>
    554c:	2005883a 	mov	r2,r4
    5550:	d9402f17 	ldw	r5,188(sp)
    5554:	288b883a 	add	r5,r5,r2
    5558:	d9402f15 	stw	r5,188(sp)
    555c:	18019e1e 	bne	r3,zero,5bd8 <___vfprintf_internal_r+0x113c>
    5560:	a8800007 	ldb	r2,0(r21)
    5564:	d8001f15 	stw	zero,124(sp)
    5568:	da000404 	addi	r8,sp,16
    556c:	103d851e 	bne	r2,zero,4b84 <___vfprintf_internal_r+0xe8>
    5570:	a821883a 	mov	r16,r21
    5574:	003d9b06 	br	4be4 <___vfprintf_internal_r+0x148>
    5578:	18c03fcc 	andi	r3,r3,255
    557c:	1805c11e 	bne	r3,zero,6c84 <___vfprintf_internal_r+0x21e8>
    5580:	94800414 	ori	r18,r18,16
    5584:	9080080c 	andi	r2,r18,32
    5588:	10020c26 	beq	r2,zero,5dbc <___vfprintf_internal_r+0x1320>
    558c:	d8802d17 	ldw	r2,180(sp)
    5590:	d9002917 	ldw	r4,164(sp)
    5594:	d8002785 	stb	zero,158(sp)
    5598:	10c00204 	addi	r3,r2,8
    559c:	14c00017 	ldw	r19,0(r2)
    55a0:	15800117 	ldw	r22,4(r2)
    55a4:	20040f16 	blt	r4,zero,65e4 <___vfprintf_internal_r+0x1b48>
    55a8:	013fdfc4 	movi	r4,-129
    55ac:	9d84b03a 	or	r2,r19,r22
    55b0:	d8c02d15 	stw	r3,180(sp)
    55b4:	9124703a 	and	r18,r18,r4
    55b8:	0039883a 	mov	fp,zero
    55bc:	103e891e 	bne	r2,zero,4fe4 <___vfprintf_internal_r+0x548>
    55c0:	d9002917 	ldw	r4,164(sp)
    55c4:	2002c11e 	bne	r4,zero,60cc <___vfprintf_internal_r+0x1630>
    55c8:	d8002915 	stw	zero,164(sp)
    55cc:	d8002e15 	stw	zero,184(sp)
    55d0:	dc001e04 	addi	r16,sp,120
    55d4:	003ef806 	br	51b8 <___vfprintf_internal_r+0x71c>
    55d8:	18c03fcc 	andi	r3,r3,255
    55dc:	18059d1e 	bne	r3,zero,6c54 <___vfprintf_internal_r+0x21b8>
    55e0:	014000b4 	movhi	r5,2
    55e4:	297d0504 	addi	r5,r5,-3052
    55e8:	d9403915 	stw	r5,228(sp)
    55ec:	9080080c 	andi	r2,r18,32
    55f0:	10005226 	beq	r2,zero,573c <___vfprintf_internal_r+0xca0>
    55f4:	d8802d17 	ldw	r2,180(sp)
    55f8:	14c00017 	ldw	r19,0(r2)
    55fc:	15800117 	ldw	r22,4(r2)
    5600:	10800204 	addi	r2,r2,8
    5604:	d8802d15 	stw	r2,180(sp)
    5608:	9080004c 	andi	r2,r18,1
    560c:	10019026 	beq	r2,zero,5c50 <___vfprintf_internal_r+0x11b4>
    5610:	9d84b03a 	or	r2,r19,r22
    5614:	10036926 	beq	r2,zero,63bc <___vfprintf_internal_r+0x1920>
    5618:	d8c02917 	ldw	r3,164(sp)
    561c:	00800c04 	movi	r2,48
    5620:	d8802705 	stb	r2,156(sp)
    5624:	dc402745 	stb	r17,157(sp)
    5628:	d8002785 	stb	zero,158(sp)
    562c:	90800094 	ori	r2,r18,2
    5630:	18045d16 	blt	r3,zero,67a8 <___vfprintf_internal_r+0x1d0c>
    5634:	00bfdfc4 	movi	r2,-129
    5638:	90a4703a 	and	r18,r18,r2
    563c:	94800094 	ori	r18,r18,2
    5640:	0039883a 	mov	fp,zero
    5644:	d9003917 	ldw	r4,228(sp)
    5648:	dc001e04 	addi	r16,sp,120
    564c:	988003cc 	andi	r2,r19,15
    5650:	b006973a 	slli	r3,r22,28
    5654:	2085883a 	add	r2,r4,r2
    5658:	9826d13a 	srli	r19,r19,4
    565c:	10800003 	ldbu	r2,0(r2)
    5660:	b02cd13a 	srli	r22,r22,4
    5664:	843fffc4 	addi	r16,r16,-1
    5668:	1ce6b03a 	or	r19,r3,r19
    566c:	80800005 	stb	r2,0(r16)
    5670:	9d84b03a 	or	r2,r19,r22
    5674:	103ff51e 	bne	r2,zero,564c <___vfprintf_internal_r+0xbb0>
    5678:	d8c02817 	ldw	r3,160(sp)
    567c:	1c07c83a 	sub	r3,r3,r16
    5680:	d8c02e15 	stw	r3,184(sp)
    5684:	003ecc06 	br	51b8 <___vfprintf_internal_r+0x71c>
    5688:	18c03fcc 	andi	r3,r3,255
    568c:	183e9f26 	beq	r3,zero,510c <___vfprintf_internal_r+0x670>
    5690:	d9c02785 	stb	r7,158(sp)
    5694:	003e9d06 	br	510c <___vfprintf_internal_r+0x670>
    5698:	00c00044 	movi	r3,1
    569c:	01c00ac4 	movi	r7,43
    56a0:	ac400007 	ldb	r17,0(r21)
    56a4:	003d5e06 	br	4c20 <___vfprintf_internal_r+0x184>
    56a8:	94800814 	ori	r18,r18,32
    56ac:	ac400007 	ldb	r17,0(r21)
    56b0:	003d5b06 	br	4c20 <___vfprintf_internal_r+0x184>
    56b4:	d8c02d17 	ldw	r3,180(sp)
    56b8:	d8002785 	stb	zero,158(sp)
    56bc:	1c000017 	ldw	r16,0(r3)
    56c0:	1cc00104 	addi	r19,r3,4
    56c4:	80041926 	beq	r16,zero,672c <___vfprintf_internal_r+0x1c90>
    56c8:	d9002917 	ldw	r4,164(sp)
    56cc:	2003d016 	blt	r4,zero,6610 <___vfprintf_internal_r+0x1b74>
    56d0:	200d883a 	mov	r6,r4
    56d4:	000b883a 	mov	r5,zero
    56d8:	8009883a 	mov	r4,r16
    56dc:	da003d15 	stw	r8,244(sp)
    56e0:	0009df00 	call	9df0 <memchr>
    56e4:	da003d17 	ldw	r8,244(sp)
    56e8:	10045426 	beq	r2,zero,683c <___vfprintf_internal_r+0x1da0>
    56ec:	1405c83a 	sub	r2,r2,r16
    56f0:	d8802e15 	stw	r2,184(sp)
    56f4:	1003cc16 	blt	r2,zero,6628 <___vfprintf_internal_r+0x1b8c>
    56f8:	df002783 	ldbu	fp,158(sp)
    56fc:	d8802a15 	stw	r2,168(sp)
    5700:	dcc02d15 	stw	r19,180(sp)
    5704:	d8002915 	stw	zero,164(sp)
    5708:	d8003215 	stw	zero,200(sp)
    570c:	003eb006 	br	51d0 <___vfprintf_internal_r+0x734>
    5710:	18c03fcc 	andi	r3,r3,255
    5714:	183f9b26 	beq	r3,zero,5584 <___vfprintf_internal_r+0xae8>
    5718:	d9c02785 	stb	r7,158(sp)
    571c:	003f9906 	br	5584 <___vfprintf_internal_r+0xae8>
    5720:	18c03fcc 	andi	r3,r3,255
    5724:	1805551e 	bne	r3,zero,6c7c <___vfprintf_internal_r+0x21e0>
    5728:	014000b4 	movhi	r5,2
    572c:	297d0a04 	addi	r5,r5,-3032
    5730:	d9403915 	stw	r5,228(sp)
    5734:	9080080c 	andi	r2,r18,32
    5738:	103fae1e 	bne	r2,zero,55f4 <___vfprintf_internal_r+0xb58>
    573c:	9080040c 	andi	r2,r18,16
    5740:	1002de26 	beq	r2,zero,62bc <___vfprintf_internal_r+0x1820>
    5744:	d8c02d17 	ldw	r3,180(sp)
    5748:	002d883a 	mov	r22,zero
    574c:	1cc00017 	ldw	r19,0(r3)
    5750:	18c00104 	addi	r3,r3,4
    5754:	d8c02d15 	stw	r3,180(sp)
    5758:	003fab06 	br	5608 <___vfprintf_internal_r+0xb6c>
    575c:	38803fcc 	andi	r2,r7,255
    5760:	1080201c 	xori	r2,r2,128
    5764:	10bfe004 	addi	r2,r2,-128
    5768:	1002d21e 	bne	r2,zero,62b4 <___vfprintf_internal_r+0x1818>
    576c:	00c00044 	movi	r3,1
    5770:	01c00804 	movi	r7,32
    5774:	ac400007 	ldb	r17,0(r21)
    5778:	003d2906 	br	4c20 <___vfprintf_internal_r+0x184>
    577c:	94800054 	ori	r18,r18,1
    5780:	ac400007 	ldb	r17,0(r21)
    5784:	003d2606 	br	4c20 <___vfprintf_internal_r+0x184>
    5788:	18c03fcc 	andi	r3,r3,255
    578c:	183e0526 	beq	r3,zero,4fa4 <___vfprintf_internal_r+0x508>
    5790:	d9c02785 	stb	r7,158(sp)
    5794:	003e0306 	br	4fa4 <___vfprintf_internal_r+0x508>
    5798:	94801014 	ori	r18,r18,64
    579c:	ac400007 	ldb	r17,0(r21)
    57a0:	003d1f06 	br	4c20 <___vfprintf_internal_r+0x184>
    57a4:	ac400007 	ldb	r17,0(r21)
    57a8:	8a438726 	beq	r17,r9,65c8 <___vfprintf_internal_r+0x1b2c>
    57ac:	94800414 	ori	r18,r18,16
    57b0:	003d1b06 	br	4c20 <___vfprintf_internal_r+0x184>
    57b4:	18c03fcc 	andi	r3,r3,255
    57b8:	1805341e 	bne	r3,zero,6c8c <___vfprintf_internal_r+0x21f0>
    57bc:	9080080c 	andi	r2,r18,32
    57c0:	1002cd26 	beq	r2,zero,62f8 <___vfprintf_internal_r+0x185c>
    57c4:	d9402d17 	ldw	r5,180(sp)
    57c8:	d9002f17 	ldw	r4,188(sp)
    57cc:	28800017 	ldw	r2,0(r5)
    57d0:	2007d7fa 	srai	r3,r4,31
    57d4:	29400104 	addi	r5,r5,4
    57d8:	d9402d15 	stw	r5,180(sp)
    57dc:	11000015 	stw	r4,0(r2)
    57e0:	10c00115 	stw	r3,4(r2)
    57e4:	003ce506 	br	4b7c <___vfprintf_internal_r+0xe0>
    57e8:	d8c02d17 	ldw	r3,180(sp)
    57ec:	d9002d17 	ldw	r4,180(sp)
    57f0:	d8002785 	stb	zero,158(sp)
    57f4:	18800017 	ldw	r2,0(r3)
    57f8:	21000104 	addi	r4,r4,4
    57fc:	00c00044 	movi	r3,1
    5800:	d8c02a15 	stw	r3,168(sp)
    5804:	d8801405 	stb	r2,80(sp)
    5808:	d9002d15 	stw	r4,180(sp)
    580c:	d8c02e15 	stw	r3,184(sp)
    5810:	d8002915 	stw	zero,164(sp)
    5814:	d8003215 	stw	zero,200(sp)
    5818:	dc001404 	addi	r16,sp,80
    581c:	0039883a 	mov	fp,zero
    5820:	003e7206 	br	51ec <___vfprintf_internal_r+0x750>
    5824:	010000b4 	movhi	r4,2
    5828:	213d0a04 	addi	r4,r4,-3032
    582c:	0039883a 	mov	fp,zero
    5830:	d9003915 	stw	r4,228(sp)
    5834:	04401e04 	movi	r17,120
    5838:	003f8206 	br	5644 <___vfprintf_internal_r+0xba8>
    583c:	18c03fcc 	andi	r3,r3,255
    5840:	1805061e 	bne	r3,zero,6c5c <___vfprintf_internal_r+0x21c0>
    5844:	883d9126 	beq	r17,zero,4e8c <___vfprintf_internal_r+0x3f0>
    5848:	00c00044 	movi	r3,1
    584c:	d8c02a15 	stw	r3,168(sp)
    5850:	dc401405 	stb	r17,80(sp)
    5854:	d8002785 	stb	zero,158(sp)
    5858:	003fec06 	br	580c <___vfprintf_internal_r+0xd70>
    585c:	014000b4 	movhi	r5,2
    5860:	297d0a04 	addi	r5,r5,-3032
    5864:	d9403915 	stw	r5,228(sp)
    5868:	d8c02d15 	stw	r3,180(sp)
    586c:	1025883a 	mov	r18,r2
    5870:	04401e04 	movi	r17,120
    5874:	9d84b03a 	or	r2,r19,r22
    5878:	1000fc1e 	bne	r2,zero,5c6c <___vfprintf_internal_r+0x11d0>
    587c:	0039883a 	mov	fp,zero
    5880:	00800084 	movi	r2,2
    5884:	10803fcc 	andi	r2,r2,255
    5888:	00c00044 	movi	r3,1
    588c:	10c20f26 	beq	r2,r3,60cc <___vfprintf_internal_r+0x1630>
    5890:	00c00084 	movi	r3,2
    5894:	10fd6326 	beq	r2,r3,4e24 <___vfprintf_internal_r+0x388>
    5898:	003e2d06 	br	5150 <___vfprintf_internal_r+0x6b4>
    589c:	d8c02017 	ldw	r3,128(sp)
    58a0:	003e9306 	br	52f0 <___vfprintf_internal_r+0x854>
    58a4:	00801944 	movi	r2,101
    58a8:	14407e0e 	bge	r2,r17,5aa4 <___vfprintf_internal_r+0x1008>
    58ac:	d9003617 	ldw	r4,216(sp)
    58b0:	d9403817 	ldw	r5,224(sp)
    58b4:	000d883a 	mov	r6,zero
    58b8:	000f883a 	mov	r7,zero
    58bc:	d8c03c15 	stw	r3,240(sp)
    58c0:	da003d15 	stw	r8,244(sp)
    58c4:	001106c0 	call	1106c <__eqdf2>
    58c8:	d8c03c17 	ldw	r3,240(sp)
    58cc:	da003d17 	ldw	r8,244(sp)
    58d0:	1000f71e 	bne	r2,zero,5cb0 <___vfprintf_internal_r+0x1214>
    58d4:	d8801f17 	ldw	r2,124(sp)
    58d8:	010000b4 	movhi	r4,2
    58dc:	213d1104 	addi	r4,r4,-3004
    58e0:	18c00044 	addi	r3,r3,1
    58e4:	10800044 	addi	r2,r2,1
    58e8:	41000015 	stw	r4,0(r8)
    58ec:	01000044 	movi	r4,1
    58f0:	41000115 	stw	r4,4(r8)
    58f4:	d8c02015 	stw	r3,128(sp)
    58f8:	d8801f15 	stw	r2,124(sp)
    58fc:	010001c4 	movi	r4,7
    5900:	2082b816 	blt	r4,r2,63e4 <___vfprintf_internal_r+0x1948>
    5904:	42000204 	addi	r8,r8,8
    5908:	d8802617 	ldw	r2,152(sp)
    590c:	d9403317 	ldw	r5,204(sp)
    5910:	11400216 	blt	r2,r5,591c <___vfprintf_internal_r+0xe80>
    5914:	9080004c 	andi	r2,r18,1
    5918:	103ed526 	beq	r2,zero,5470 <___vfprintf_internal_r+0x9d4>
    591c:	d8803717 	ldw	r2,220(sp)
    5920:	d9003417 	ldw	r4,208(sp)
    5924:	d9403717 	ldw	r5,220(sp)
    5928:	1887883a 	add	r3,r3,r2
    592c:	d8801f17 	ldw	r2,124(sp)
    5930:	41000015 	stw	r4,0(r8)
    5934:	41400115 	stw	r5,4(r8)
    5938:	10800044 	addi	r2,r2,1
    593c:	d8c02015 	stw	r3,128(sp)
    5940:	d8801f15 	stw	r2,124(sp)
    5944:	010001c4 	movi	r4,7
    5948:	20832916 	blt	r4,r2,65f0 <___vfprintf_internal_r+0x1b54>
    594c:	42000204 	addi	r8,r8,8
    5950:	d8803317 	ldw	r2,204(sp)
    5954:	143fffc4 	addi	r16,r2,-1
    5958:	043ec50e 	bge	zero,r16,5470 <___vfprintf_internal_r+0x9d4>
    595c:	04400404 	movi	r17,16
    5960:	d8801f17 	ldw	r2,124(sp)
    5964:	8c00880e 	bge	r17,r16,5b88 <___vfprintf_internal_r+0x10ec>
    5968:	014000b4 	movhi	r5,2
    596c:	297d1984 	addi	r5,r5,-2970
    5970:	d9402b15 	stw	r5,172(sp)
    5974:	058001c4 	movi	r22,7
    5978:	dcc02c17 	ldw	r19,176(sp)
    597c:	00000306 	br	598c <___vfprintf_internal_r+0xef0>
    5980:	42000204 	addi	r8,r8,8
    5984:	843ffc04 	addi	r16,r16,-16
    5988:	8c00820e 	bge	r17,r16,5b94 <___vfprintf_internal_r+0x10f8>
    598c:	18c00404 	addi	r3,r3,16
    5990:	10800044 	addi	r2,r2,1
    5994:	45000015 	stw	r20,0(r8)
    5998:	44400115 	stw	r17,4(r8)
    599c:	d8c02015 	stw	r3,128(sp)
    59a0:	d8801f15 	stw	r2,124(sp)
    59a4:	b0bff60e 	bge	r22,r2,5980 <___vfprintf_internal_r+0xee4>
    59a8:	d9801e04 	addi	r6,sp,120
    59ac:	b80b883a 	mov	r5,r23
    59b0:	9809883a 	mov	r4,r19
    59b4:	000c8780 	call	c878 <__sprint_r>
    59b8:	103d3a1e 	bne	r2,zero,4ea4 <___vfprintf_internal_r+0x408>
    59bc:	d8c02017 	ldw	r3,128(sp)
    59c0:	d8801f17 	ldw	r2,124(sp)
    59c4:	da000404 	addi	r8,sp,16
    59c8:	003fee06 	br	5984 <___vfprintf_internal_r+0xee8>
    59cc:	d9403117 	ldw	r5,196(sp)
    59d0:	d8802a17 	ldw	r2,168(sp)
    59d4:	28adc83a 	sub	r22,r5,r2
    59d8:	05be630e 	bge	zero,r22,5368 <___vfprintf_internal_r+0x8cc>
    59dc:	07000404 	movi	fp,16
    59e0:	d8801f17 	ldw	r2,124(sp)
    59e4:	e5838f0e 	bge	fp,r22,6824 <___vfprintf_internal_r+0x1d88>
    59e8:	014000b4 	movhi	r5,2
    59ec:	297d1984 	addi	r5,r5,-2970
    59f0:	dc403015 	stw	r17,192(sp)
    59f4:	d9402b15 	stw	r5,172(sp)
    59f8:	b023883a 	mov	r17,r22
    59fc:	04c001c4 	movi	r19,7
    5a00:	a82d883a 	mov	r22,r21
    5a04:	902b883a 	mov	r21,r18
    5a08:	8025883a 	mov	r18,r16
    5a0c:	dc002c17 	ldw	r16,176(sp)
    5a10:	00000306 	br	5a20 <___vfprintf_internal_r+0xf84>
    5a14:	8c7ffc04 	addi	r17,r17,-16
    5a18:	42000204 	addi	r8,r8,8
    5a1c:	e440110e 	bge	fp,r17,5a64 <___vfprintf_internal_r+0xfc8>
    5a20:	18c00404 	addi	r3,r3,16
    5a24:	10800044 	addi	r2,r2,1
    5a28:	45000015 	stw	r20,0(r8)
    5a2c:	47000115 	stw	fp,4(r8)
    5a30:	d8c02015 	stw	r3,128(sp)
    5a34:	d8801f15 	stw	r2,124(sp)
    5a38:	98bff60e 	bge	r19,r2,5a14 <___vfprintf_internal_r+0xf78>
    5a3c:	d9801e04 	addi	r6,sp,120
    5a40:	b80b883a 	mov	r5,r23
    5a44:	8009883a 	mov	r4,r16
    5a48:	000c8780 	call	c878 <__sprint_r>
    5a4c:	103d151e 	bne	r2,zero,4ea4 <___vfprintf_internal_r+0x408>
    5a50:	8c7ffc04 	addi	r17,r17,-16
    5a54:	d8c02017 	ldw	r3,128(sp)
    5a58:	d8801f17 	ldw	r2,124(sp)
    5a5c:	da000404 	addi	r8,sp,16
    5a60:	e47fef16 	blt	fp,r17,5a20 <___vfprintf_internal_r+0xf84>
    5a64:	9021883a 	mov	r16,r18
    5a68:	a825883a 	mov	r18,r21
    5a6c:	b02b883a 	mov	r21,r22
    5a70:	882d883a 	mov	r22,r17
    5a74:	dc403017 	ldw	r17,192(sp)
    5a78:	d9002b17 	ldw	r4,172(sp)
    5a7c:	1d87883a 	add	r3,r3,r22
    5a80:	10800044 	addi	r2,r2,1
    5a84:	41000015 	stw	r4,0(r8)
    5a88:	45800115 	stw	r22,4(r8)
    5a8c:	d8c02015 	stw	r3,128(sp)
    5a90:	d8801f15 	stw	r2,124(sp)
    5a94:	010001c4 	movi	r4,7
    5a98:	20818e16 	blt	r4,r2,60d4 <___vfprintf_internal_r+0x1638>
    5a9c:	42000204 	addi	r8,r8,8
    5aa0:	003e3106 	br	5368 <___vfprintf_internal_r+0x8cc>
    5aa4:	d9403317 	ldw	r5,204(sp)
    5aa8:	00800044 	movi	r2,1
    5aac:	18c00044 	addi	r3,r3,1
    5ab0:	1141530e 	bge	r2,r5,6000 <___vfprintf_internal_r+0x1564>
    5ab4:	dc401f17 	ldw	r17,124(sp)
    5ab8:	00800044 	movi	r2,1
    5abc:	40800115 	stw	r2,4(r8)
    5ac0:	8c400044 	addi	r17,r17,1
    5ac4:	44000015 	stw	r16,0(r8)
    5ac8:	d8c02015 	stw	r3,128(sp)
    5acc:	dc401f15 	stw	r17,124(sp)
    5ad0:	008001c4 	movi	r2,7
    5ad4:	14416b16 	blt	r2,r17,6084 <___vfprintf_internal_r+0x15e8>
    5ad8:	42000204 	addi	r8,r8,8
    5adc:	d8803717 	ldw	r2,220(sp)
    5ae0:	d9003417 	ldw	r4,208(sp)
    5ae4:	8c400044 	addi	r17,r17,1
    5ae8:	10c7883a 	add	r3,r2,r3
    5aec:	40800115 	stw	r2,4(r8)
    5af0:	41000015 	stw	r4,0(r8)
    5af4:	d8c02015 	stw	r3,128(sp)
    5af8:	dc401f15 	stw	r17,124(sp)
    5afc:	008001c4 	movi	r2,7
    5b00:	14416916 	blt	r2,r17,60a8 <___vfprintf_internal_r+0x160c>
    5b04:	45800204 	addi	r22,r8,8
    5b08:	d9003617 	ldw	r4,216(sp)
    5b0c:	d9403817 	ldw	r5,224(sp)
    5b10:	000d883a 	mov	r6,zero
    5b14:	000f883a 	mov	r7,zero
    5b18:	d8c03c15 	stw	r3,240(sp)
    5b1c:	001106c0 	call	1106c <__eqdf2>
    5b20:	d8c03c17 	ldw	r3,240(sp)
    5b24:	1000bc26 	beq	r2,zero,5e18 <___vfprintf_internal_r+0x137c>
    5b28:	d9403317 	ldw	r5,204(sp)
    5b2c:	84000044 	addi	r16,r16,1
    5b30:	8c400044 	addi	r17,r17,1
    5b34:	28bfffc4 	addi	r2,r5,-1
    5b38:	1887883a 	add	r3,r3,r2
    5b3c:	b0800115 	stw	r2,4(r22)
    5b40:	b4000015 	stw	r16,0(r22)
    5b44:	d8c02015 	stw	r3,128(sp)
    5b48:	dc401f15 	stw	r17,124(sp)
    5b4c:	008001c4 	movi	r2,7
    5b50:	14414316 	blt	r2,r17,6060 <___vfprintf_internal_r+0x15c4>
    5b54:	b5800204 	addi	r22,r22,8
    5b58:	d9003a17 	ldw	r4,232(sp)
    5b5c:	df0022c4 	addi	fp,sp,139
    5b60:	8c400044 	addi	r17,r17,1
    5b64:	20c7883a 	add	r3,r4,r3
    5b68:	b7000015 	stw	fp,0(r22)
    5b6c:	b1000115 	stw	r4,4(r22)
    5b70:	d8c02015 	stw	r3,128(sp)
    5b74:	dc401f15 	stw	r17,124(sp)
    5b78:	008001c4 	movi	r2,7
    5b7c:	14400e16 	blt	r2,r17,5bb8 <___vfprintf_internal_r+0x111c>
    5b80:	b2000204 	addi	r8,r22,8
    5b84:	003e3a06 	br	5470 <___vfprintf_internal_r+0x9d4>
    5b88:	010000b4 	movhi	r4,2
    5b8c:	213d1984 	addi	r4,r4,-2970
    5b90:	d9002b15 	stw	r4,172(sp)
    5b94:	d9002b17 	ldw	r4,172(sp)
    5b98:	1c07883a 	add	r3,r3,r16
    5b9c:	44000115 	stw	r16,4(r8)
    5ba0:	41000015 	stw	r4,0(r8)
    5ba4:	10800044 	addi	r2,r2,1
    5ba8:	d8c02015 	stw	r3,128(sp)
    5bac:	d8801f15 	stw	r2,124(sp)
    5bb0:	010001c4 	movi	r4,7
    5bb4:	20be2d0e 	bge	r4,r2,546c <___vfprintf_internal_r+0x9d0>
    5bb8:	d9002c17 	ldw	r4,176(sp)
    5bbc:	d9801e04 	addi	r6,sp,120
    5bc0:	b80b883a 	mov	r5,r23
    5bc4:	000c8780 	call	c878 <__sprint_r>
    5bc8:	103cb61e 	bne	r2,zero,4ea4 <___vfprintf_internal_r+0x408>
    5bcc:	d8c02017 	ldw	r3,128(sp)
    5bd0:	da000404 	addi	r8,sp,16
    5bd4:	003e2606 	br	5470 <___vfprintf_internal_r+0x9d4>
    5bd8:	d9002c17 	ldw	r4,176(sp)
    5bdc:	d9801e04 	addi	r6,sp,120
    5be0:	b80b883a 	mov	r5,r23
    5be4:	000c8780 	call	c878 <__sprint_r>
    5be8:	103e5d26 	beq	r2,zero,5560 <___vfprintf_internal_r+0xac4>
    5bec:	003cad06 	br	4ea4 <___vfprintf_internal_r+0x408>
    5bf0:	d9002c17 	ldw	r4,176(sp)
    5bf4:	d9801e04 	addi	r6,sp,120
    5bf8:	b80b883a 	mov	r5,r23
    5bfc:	000c8780 	call	c878 <__sprint_r>
    5c00:	103ca81e 	bne	r2,zero,4ea4 <___vfprintf_internal_r+0x408>
    5c04:	d8c02017 	ldw	r3,128(sp)
    5c08:	da000404 	addi	r8,sp,16
    5c0c:	003e0b06 	br	543c <___vfprintf_internal_r+0x9a0>
    5c10:	d9002c17 	ldw	r4,176(sp)
    5c14:	d9801e04 	addi	r6,sp,120
    5c18:	b80b883a 	mov	r5,r23
    5c1c:	000c8780 	call	c878 <__sprint_r>
    5c20:	103ca01e 	bne	r2,zero,4ea4 <___vfprintf_internal_r+0x408>
    5c24:	d8c02017 	ldw	r3,128(sp)
    5c28:	da000404 	addi	r8,sp,16
    5c2c:	003dbd06 	br	5324 <___vfprintf_internal_r+0x888>
    5c30:	d9002c17 	ldw	r4,176(sp)
    5c34:	d9801e04 	addi	r6,sp,120
    5c38:	b80b883a 	mov	r5,r23
    5c3c:	000c8780 	call	c878 <__sprint_r>
    5c40:	103c981e 	bne	r2,zero,4ea4 <___vfprintf_internal_r+0x408>
    5c44:	d8c02017 	ldw	r3,128(sp)
    5c48:	da000404 	addi	r8,sp,16
    5c4c:	003dc306 	br	535c <___vfprintf_internal_r+0x8c0>
    5c50:	d8802917 	ldw	r2,164(sp)
    5c54:	d8002785 	stb	zero,158(sp)
    5c58:	103f0616 	blt	r2,zero,5874 <___vfprintf_internal_r+0xdd8>
    5c5c:	00ffdfc4 	movi	r3,-129
    5c60:	9d84b03a 	or	r2,r19,r22
    5c64:	90e4703a 	and	r18,r18,r3
    5c68:	103c6b26 	beq	r2,zero,4e18 <___vfprintf_internal_r+0x37c>
    5c6c:	0039883a 	mov	fp,zero
    5c70:	003e7406 	br	5644 <___vfprintf_internal_r+0xba8>
    5c74:	9080040c 	andi	r2,r18,16
    5c78:	1001b326 	beq	r2,zero,6348 <___vfprintf_internal_r+0x18ac>
    5c7c:	d9002d17 	ldw	r4,180(sp)
    5c80:	d9402917 	ldw	r5,164(sp)
    5c84:	d8002785 	stb	zero,158(sp)
    5c88:	20800104 	addi	r2,r4,4
    5c8c:	24c00017 	ldw	r19,0(r4)
    5c90:	002d883a 	mov	r22,zero
    5c94:	2801b516 	blt	r5,zero,636c <___vfprintf_internal_r+0x18d0>
    5c98:	00ffdfc4 	movi	r3,-129
    5c9c:	d8802d15 	stw	r2,180(sp)
    5ca0:	90e4703a 	and	r18,r18,r3
    5ca4:	983d2726 	beq	r19,zero,5144 <___vfprintf_internal_r+0x6a8>
    5ca8:	0039883a 	mov	fp,zero
    5cac:	003d2a06 	br	5158 <___vfprintf_internal_r+0x6bc>
    5cb0:	dc402617 	ldw	r17,152(sp)
    5cb4:	0441d30e 	bge	zero,r17,6404 <___vfprintf_internal_r+0x1968>
    5cb8:	dc403217 	ldw	r17,200(sp)
    5cbc:	d8803317 	ldw	r2,204(sp)
    5cc0:	1440010e 	bge	r2,r17,5cc8 <___vfprintf_internal_r+0x122c>
    5cc4:	1023883a 	mov	r17,r2
    5cc8:	04400a0e 	bge	zero,r17,5cf4 <___vfprintf_internal_r+0x1258>
    5ccc:	d8801f17 	ldw	r2,124(sp)
    5cd0:	1c47883a 	add	r3,r3,r17
    5cd4:	44000015 	stw	r16,0(r8)
    5cd8:	10800044 	addi	r2,r2,1
    5cdc:	44400115 	stw	r17,4(r8)
    5ce0:	d8c02015 	stw	r3,128(sp)
    5ce4:	d8801f15 	stw	r2,124(sp)
    5ce8:	010001c4 	movi	r4,7
    5cec:	20826516 	blt	r4,r2,6684 <___vfprintf_internal_r+0x1be8>
    5cf0:	42000204 	addi	r8,r8,8
    5cf4:	88026116 	blt	r17,zero,667c <___vfprintf_internal_r+0x1be0>
    5cf8:	d9003217 	ldw	r4,200(sp)
    5cfc:	2463c83a 	sub	r17,r4,r17
    5d00:	04407b0e 	bge	zero,r17,5ef0 <___vfprintf_internal_r+0x1454>
    5d04:	05800404 	movi	r22,16
    5d08:	d8801f17 	ldw	r2,124(sp)
    5d0c:	b4419d0e 	bge	r22,r17,6384 <___vfprintf_internal_r+0x18e8>
    5d10:	010000b4 	movhi	r4,2
    5d14:	213d1984 	addi	r4,r4,-2970
    5d18:	d9002b15 	stw	r4,172(sp)
    5d1c:	070001c4 	movi	fp,7
    5d20:	dcc02c17 	ldw	r19,176(sp)
    5d24:	00000306 	br	5d34 <___vfprintf_internal_r+0x1298>
    5d28:	42000204 	addi	r8,r8,8
    5d2c:	8c7ffc04 	addi	r17,r17,-16
    5d30:	b441970e 	bge	r22,r17,6390 <___vfprintf_internal_r+0x18f4>
    5d34:	18c00404 	addi	r3,r3,16
    5d38:	10800044 	addi	r2,r2,1
    5d3c:	45000015 	stw	r20,0(r8)
    5d40:	45800115 	stw	r22,4(r8)
    5d44:	d8c02015 	stw	r3,128(sp)
    5d48:	d8801f15 	stw	r2,124(sp)
    5d4c:	e0bff60e 	bge	fp,r2,5d28 <___vfprintf_internal_r+0x128c>
    5d50:	d9801e04 	addi	r6,sp,120
    5d54:	b80b883a 	mov	r5,r23
    5d58:	9809883a 	mov	r4,r19
    5d5c:	000c8780 	call	c878 <__sprint_r>
    5d60:	103c501e 	bne	r2,zero,4ea4 <___vfprintf_internal_r+0x408>
    5d64:	d8c02017 	ldw	r3,128(sp)
    5d68:	d8801f17 	ldw	r2,124(sp)
    5d6c:	da000404 	addi	r8,sp,16
    5d70:	003fee06 	br	5d2c <___vfprintf_internal_r+0x1290>
    5d74:	d9002c17 	ldw	r4,176(sp)
    5d78:	d9801e04 	addi	r6,sp,120
    5d7c:	b80b883a 	mov	r5,r23
    5d80:	000c8780 	call	c878 <__sprint_r>
    5d84:	103c471e 	bne	r2,zero,4ea4 <___vfprintf_internal_r+0x408>
    5d88:	d8c02017 	ldw	r3,128(sp)
    5d8c:	df002787 	ldb	fp,158(sp)
    5d90:	da000404 	addi	r8,sp,16
    5d94:	003d5606 	br	52f0 <___vfprintf_internal_r+0x854>
    5d98:	9080040c 	andi	r2,r18,16
    5d9c:	10016126 	beq	r2,zero,6324 <___vfprintf_internal_r+0x1888>
    5da0:	d8802d17 	ldw	r2,180(sp)
    5da4:	14c00017 	ldw	r19,0(r2)
    5da8:	10800104 	addi	r2,r2,4
    5dac:	d8802d15 	stw	r2,180(sp)
    5db0:	982dd7fa 	srai	r22,r19,31
    5db4:	b005883a 	mov	r2,r22
    5db8:	003c8206 	br	4fc4 <___vfprintf_internal_r+0x528>
    5dbc:	9080040c 	andi	r2,r18,16
    5dc0:	10003526 	beq	r2,zero,5e98 <___vfprintf_internal_r+0x13fc>
    5dc4:	d9402d17 	ldw	r5,180(sp)
    5dc8:	d8c02917 	ldw	r3,164(sp)
    5dcc:	d8002785 	stb	zero,158(sp)
    5dd0:	28800104 	addi	r2,r5,4
    5dd4:	2cc00017 	ldw	r19,0(r5)
    5dd8:	002d883a 	mov	r22,zero
    5ddc:	18003716 	blt	r3,zero,5ebc <___vfprintf_internal_r+0x1420>
    5de0:	00ffdfc4 	movi	r3,-129
    5de4:	d8802d15 	stw	r2,180(sp)
    5de8:	90e4703a 	and	r18,r18,r3
    5dec:	0039883a 	mov	fp,zero
    5df0:	983df326 	beq	r19,zero,55c0 <___vfprintf_internal_r+0xb24>
    5df4:	00800244 	movi	r2,9
    5df8:	14fc7b36 	bltu	r2,r19,4fe8 <___vfprintf_internal_r+0x54c>
    5dfc:	d8c02817 	ldw	r3,160(sp)
    5e00:	dc001dc4 	addi	r16,sp,119
    5e04:	9cc00c04 	addi	r19,r19,48
    5e08:	1c07c83a 	sub	r3,r3,r16
    5e0c:	dcc01dc5 	stb	r19,119(sp)
    5e10:	d8c02e15 	stw	r3,184(sp)
    5e14:	003ce806 	br	51b8 <___vfprintf_internal_r+0x71c>
    5e18:	d8803317 	ldw	r2,204(sp)
    5e1c:	143fffc4 	addi	r16,r2,-1
    5e20:	043f4d0e 	bge	zero,r16,5b58 <___vfprintf_internal_r+0x10bc>
    5e24:	07000404 	movi	fp,16
    5e28:	e400810e 	bge	fp,r16,6030 <___vfprintf_internal_r+0x1594>
    5e2c:	014000b4 	movhi	r5,2
    5e30:	297d1984 	addi	r5,r5,-2970
    5e34:	d9402b15 	stw	r5,172(sp)
    5e38:	01c001c4 	movi	r7,7
    5e3c:	dcc02c17 	ldw	r19,176(sp)
    5e40:	00000306 	br	5e50 <___vfprintf_internal_r+0x13b4>
    5e44:	b5800204 	addi	r22,r22,8
    5e48:	843ffc04 	addi	r16,r16,-16
    5e4c:	e4007b0e 	bge	fp,r16,603c <___vfprintf_internal_r+0x15a0>
    5e50:	18c00404 	addi	r3,r3,16
    5e54:	8c400044 	addi	r17,r17,1
    5e58:	b5000015 	stw	r20,0(r22)
    5e5c:	b7000115 	stw	fp,4(r22)
    5e60:	d8c02015 	stw	r3,128(sp)
    5e64:	dc401f15 	stw	r17,124(sp)
    5e68:	3c7ff60e 	bge	r7,r17,5e44 <___vfprintf_internal_r+0x13a8>
    5e6c:	d9801e04 	addi	r6,sp,120
    5e70:	b80b883a 	mov	r5,r23
    5e74:	9809883a 	mov	r4,r19
    5e78:	d9c03c15 	stw	r7,240(sp)
    5e7c:	000c8780 	call	c878 <__sprint_r>
    5e80:	d9c03c17 	ldw	r7,240(sp)
    5e84:	103c071e 	bne	r2,zero,4ea4 <___vfprintf_internal_r+0x408>
    5e88:	d8c02017 	ldw	r3,128(sp)
    5e8c:	dc401f17 	ldw	r17,124(sp)
    5e90:	dd800404 	addi	r22,sp,16
    5e94:	003fec06 	br	5e48 <___vfprintf_internal_r+0x13ac>
    5e98:	9080100c 	andi	r2,r18,64
    5e9c:	d8002785 	stb	zero,158(sp)
    5ea0:	10010e26 	beq	r2,zero,62dc <___vfprintf_internal_r+0x1840>
    5ea4:	d9002d17 	ldw	r4,180(sp)
    5ea8:	d9402917 	ldw	r5,164(sp)
    5eac:	002d883a 	mov	r22,zero
    5eb0:	20800104 	addi	r2,r4,4
    5eb4:	24c0000b 	ldhu	r19,0(r4)
    5eb8:	283fc90e 	bge	r5,zero,5de0 <___vfprintf_internal_r+0x1344>
    5ebc:	d8802d15 	stw	r2,180(sp)
    5ec0:	0039883a 	mov	fp,zero
    5ec4:	9d84b03a 	or	r2,r19,r22
    5ec8:	103c461e 	bne	r2,zero,4fe4 <___vfprintf_internal_r+0x548>
    5ecc:	00800044 	movi	r2,1
    5ed0:	003e6c06 	br	5884 <___vfprintf_internal_r+0xde8>
    5ed4:	d9002c17 	ldw	r4,176(sp)
    5ed8:	d9801e04 	addi	r6,sp,120
    5edc:	b80b883a 	mov	r5,r23
    5ee0:	000c8780 	call	c878 <__sprint_r>
    5ee4:	103bef1e 	bne	r2,zero,4ea4 <___vfprintf_internal_r+0x408>
    5ee8:	d8c02017 	ldw	r3,128(sp)
    5eec:	da000404 	addi	r8,sp,16
    5ef0:	d9003217 	ldw	r4,200(sp)
    5ef4:	d8802617 	ldw	r2,152(sp)
    5ef8:	d9403317 	ldw	r5,204(sp)
    5efc:	8123883a 	add	r17,r16,r4
    5f00:	11400216 	blt	r2,r5,5f0c <___vfprintf_internal_r+0x1470>
    5f04:	9100004c 	andi	r4,r18,1
    5f08:	20000d26 	beq	r4,zero,5f40 <___vfprintf_internal_r+0x14a4>
    5f0c:	d9003717 	ldw	r4,220(sp)
    5f10:	d9403417 	ldw	r5,208(sp)
    5f14:	1907883a 	add	r3,r3,r4
    5f18:	d9001f17 	ldw	r4,124(sp)
    5f1c:	41400015 	stw	r5,0(r8)
    5f20:	d9403717 	ldw	r5,220(sp)
    5f24:	21000044 	addi	r4,r4,1
    5f28:	d8c02015 	stw	r3,128(sp)
    5f2c:	41400115 	stw	r5,4(r8)
    5f30:	d9001f15 	stw	r4,124(sp)
    5f34:	014001c4 	movi	r5,7
    5f38:	2901e816 	blt	r5,r4,66dc <___vfprintf_internal_r+0x1c40>
    5f3c:	42000204 	addi	r8,r8,8
    5f40:	d9003317 	ldw	r4,204(sp)
    5f44:	8121883a 	add	r16,r16,r4
    5f48:	2085c83a 	sub	r2,r4,r2
    5f4c:	8461c83a 	sub	r16,r16,r17
    5f50:	1400010e 	bge	r2,r16,5f58 <___vfprintf_internal_r+0x14bc>
    5f54:	1021883a 	mov	r16,r2
    5f58:	04000a0e 	bge	zero,r16,5f84 <___vfprintf_internal_r+0x14e8>
    5f5c:	d9001f17 	ldw	r4,124(sp)
    5f60:	1c07883a 	add	r3,r3,r16
    5f64:	44400015 	stw	r17,0(r8)
    5f68:	21000044 	addi	r4,r4,1
    5f6c:	44000115 	stw	r16,4(r8)
    5f70:	d8c02015 	stw	r3,128(sp)
    5f74:	d9001f15 	stw	r4,124(sp)
    5f78:	014001c4 	movi	r5,7
    5f7c:	2901fb16 	blt	r5,r4,676c <___vfprintf_internal_r+0x1cd0>
    5f80:	42000204 	addi	r8,r8,8
    5f84:	8001f716 	blt	r16,zero,6764 <___vfprintf_internal_r+0x1cc8>
    5f88:	1421c83a 	sub	r16,r2,r16
    5f8c:	043d380e 	bge	zero,r16,5470 <___vfprintf_internal_r+0x9d4>
    5f90:	04400404 	movi	r17,16
    5f94:	d8801f17 	ldw	r2,124(sp)
    5f98:	8c3efb0e 	bge	r17,r16,5b88 <___vfprintf_internal_r+0x10ec>
    5f9c:	014000b4 	movhi	r5,2
    5fa0:	297d1984 	addi	r5,r5,-2970
    5fa4:	d9402b15 	stw	r5,172(sp)
    5fa8:	058001c4 	movi	r22,7
    5fac:	dcc02c17 	ldw	r19,176(sp)
    5fb0:	00000306 	br	5fc0 <___vfprintf_internal_r+0x1524>
    5fb4:	42000204 	addi	r8,r8,8
    5fb8:	843ffc04 	addi	r16,r16,-16
    5fbc:	8c3ef50e 	bge	r17,r16,5b94 <___vfprintf_internal_r+0x10f8>
    5fc0:	18c00404 	addi	r3,r3,16
    5fc4:	10800044 	addi	r2,r2,1
    5fc8:	45000015 	stw	r20,0(r8)
    5fcc:	44400115 	stw	r17,4(r8)
    5fd0:	d8c02015 	stw	r3,128(sp)
    5fd4:	d8801f15 	stw	r2,124(sp)
    5fd8:	b0bff60e 	bge	r22,r2,5fb4 <___vfprintf_internal_r+0x1518>
    5fdc:	d9801e04 	addi	r6,sp,120
    5fe0:	b80b883a 	mov	r5,r23
    5fe4:	9809883a 	mov	r4,r19
    5fe8:	000c8780 	call	c878 <__sprint_r>
    5fec:	103bad1e 	bne	r2,zero,4ea4 <___vfprintf_internal_r+0x408>
    5ff0:	d8c02017 	ldw	r3,128(sp)
    5ff4:	d8801f17 	ldw	r2,124(sp)
    5ff8:	da000404 	addi	r8,sp,16
    5ffc:	003fee06 	br	5fb8 <___vfprintf_internal_r+0x151c>
    6000:	9088703a 	and	r4,r18,r2
    6004:	203eab1e 	bne	r4,zero,5ab4 <___vfprintf_internal_r+0x1018>
    6008:	dc401f17 	ldw	r17,124(sp)
    600c:	40800115 	stw	r2,4(r8)
    6010:	44000015 	stw	r16,0(r8)
    6014:	8c400044 	addi	r17,r17,1
    6018:	d8c02015 	stw	r3,128(sp)
    601c:	dc401f15 	stw	r17,124(sp)
    6020:	008001c4 	movi	r2,7
    6024:	14400e16 	blt	r2,r17,6060 <___vfprintf_internal_r+0x15c4>
    6028:	45800204 	addi	r22,r8,8
    602c:	003eca06 	br	5b58 <___vfprintf_internal_r+0x10bc>
    6030:	010000b4 	movhi	r4,2
    6034:	213d1984 	addi	r4,r4,-2970
    6038:	d9002b15 	stw	r4,172(sp)
    603c:	d8802b17 	ldw	r2,172(sp)
    6040:	1c07883a 	add	r3,r3,r16
    6044:	8c400044 	addi	r17,r17,1
    6048:	b0800015 	stw	r2,0(r22)
    604c:	b4000115 	stw	r16,4(r22)
    6050:	d8c02015 	stw	r3,128(sp)
    6054:	dc401f15 	stw	r17,124(sp)
    6058:	008001c4 	movi	r2,7
    605c:	147ebd0e 	bge	r2,r17,5b54 <___vfprintf_internal_r+0x10b8>
    6060:	d9002c17 	ldw	r4,176(sp)
    6064:	d9801e04 	addi	r6,sp,120
    6068:	b80b883a 	mov	r5,r23
    606c:	000c8780 	call	c878 <__sprint_r>
    6070:	103b8c1e 	bne	r2,zero,4ea4 <___vfprintf_internal_r+0x408>
    6074:	d8c02017 	ldw	r3,128(sp)
    6078:	dc401f17 	ldw	r17,124(sp)
    607c:	dd800404 	addi	r22,sp,16
    6080:	003eb506 	br	5b58 <___vfprintf_internal_r+0x10bc>
    6084:	d9002c17 	ldw	r4,176(sp)
    6088:	d9801e04 	addi	r6,sp,120
    608c:	b80b883a 	mov	r5,r23
    6090:	000c8780 	call	c878 <__sprint_r>
    6094:	103b831e 	bne	r2,zero,4ea4 <___vfprintf_internal_r+0x408>
    6098:	d8c02017 	ldw	r3,128(sp)
    609c:	dc401f17 	ldw	r17,124(sp)
    60a0:	da000404 	addi	r8,sp,16
    60a4:	003e8d06 	br	5adc <___vfprintf_internal_r+0x1040>
    60a8:	d9002c17 	ldw	r4,176(sp)
    60ac:	d9801e04 	addi	r6,sp,120
    60b0:	b80b883a 	mov	r5,r23
    60b4:	000c8780 	call	c878 <__sprint_r>
    60b8:	103b7a1e 	bne	r2,zero,4ea4 <___vfprintf_internal_r+0x408>
    60bc:	d8c02017 	ldw	r3,128(sp)
    60c0:	dc401f17 	ldw	r17,124(sp)
    60c4:	dd800404 	addi	r22,sp,16
    60c8:	003e8f06 	br	5b08 <___vfprintf_internal_r+0x106c>
    60cc:	0027883a 	mov	r19,zero
    60d0:	003f4a06 	br	5dfc <___vfprintf_internal_r+0x1360>
    60d4:	d9002c17 	ldw	r4,176(sp)
    60d8:	d9801e04 	addi	r6,sp,120
    60dc:	b80b883a 	mov	r5,r23
    60e0:	000c8780 	call	c878 <__sprint_r>
    60e4:	103b6f1e 	bne	r2,zero,4ea4 <___vfprintf_internal_r+0x408>
    60e8:	d8c02017 	ldw	r3,128(sp)
    60ec:	da000404 	addi	r8,sp,16
    60f0:	003c9d06 	br	5368 <___vfprintf_internal_r+0x8cc>
    60f4:	04e7c83a 	sub	r19,zero,r19
    60f8:	9804c03a 	cmpne	r2,r19,zero
    60fc:	05adc83a 	sub	r22,zero,r22
    6100:	b0adc83a 	sub	r22,r22,r2
    6104:	d8802917 	ldw	r2,164(sp)
    6108:	07000b44 	movi	fp,45
    610c:	df002785 	stb	fp,158(sp)
    6110:	10017b16 	blt	r2,zero,6700 <___vfprintf_internal_r+0x1c64>
    6114:	00bfdfc4 	movi	r2,-129
    6118:	90a4703a 	and	r18,r18,r2
    611c:	003bb106 	br	4fe4 <___vfprintf_internal_r+0x548>
    6120:	d9003617 	ldw	r4,216(sp)
    6124:	d9403817 	ldw	r5,224(sp)
    6128:	da003d15 	stw	r8,244(sp)
    612c:	000aff80 	call	aff8 <__fpclassifyd>
    6130:	da003d17 	ldw	r8,244(sp)
    6134:	1000f026 	beq	r2,zero,64f8 <___vfprintf_internal_r+0x1a5c>
    6138:	d9002917 	ldw	r4,164(sp)
    613c:	05bff7c4 	movi	r22,-33
    6140:	00bfffc4 	movi	r2,-1
    6144:	8dac703a 	and	r22,r17,r22
    6148:	20820026 	beq	r4,r2,694c <___vfprintf_internal_r+0x1eb0>
    614c:	008011c4 	movi	r2,71
    6150:	b081f726 	beq	r22,r2,6930 <___vfprintf_internal_r+0x1e94>
    6154:	d9003817 	ldw	r4,224(sp)
    6158:	90c04014 	ori	r3,r18,256
    615c:	d8c02b15 	stw	r3,172(sp)
    6160:	20021516 	blt	r4,zero,69b8 <___vfprintf_internal_r+0x1f1c>
    6164:	dcc03817 	ldw	r19,224(sp)
    6168:	d8002a05 	stb	zero,168(sp)
    616c:	00801984 	movi	r2,102
    6170:	8881f926 	beq	r17,r2,6958 <___vfprintf_internal_r+0x1ebc>
    6174:	00801184 	movi	r2,70
    6178:	88821c26 	beq	r17,r2,69ec <___vfprintf_internal_r+0x1f50>
    617c:	00801144 	movi	r2,69
    6180:	b081ef26 	beq	r22,r2,6940 <___vfprintf_internal_r+0x1ea4>
    6184:	d8c02917 	ldw	r3,164(sp)
    6188:	d8802104 	addi	r2,sp,132
    618c:	d8800315 	stw	r2,12(sp)
    6190:	d9403617 	ldw	r5,216(sp)
    6194:	d8802504 	addi	r2,sp,148
    6198:	d9002c17 	ldw	r4,176(sp)
    619c:	d8800215 	stw	r2,8(sp)
    61a0:	d8802604 	addi	r2,sp,152
    61a4:	d8c00015 	stw	r3,0(sp)
    61a8:	d8800115 	stw	r2,4(sp)
    61ac:	01c00084 	movi	r7,2
    61b0:	980d883a 	mov	r6,r19
    61b4:	d8c03c15 	stw	r3,240(sp)
    61b8:	da003d15 	stw	r8,244(sp)
    61bc:	00070c00 	call	70c0 <_dtoa_r>
    61c0:	1021883a 	mov	r16,r2
    61c4:	008019c4 	movi	r2,103
    61c8:	d8c03c17 	ldw	r3,240(sp)
    61cc:	da003d17 	ldw	r8,244(sp)
    61d0:	88817126 	beq	r17,r2,6798 <___vfprintf_internal_r+0x1cfc>
    61d4:	008011c4 	movi	r2,71
    61d8:	88829226 	beq	r17,r2,6c24 <___vfprintf_internal_r+0x2188>
    61dc:	80f9883a 	add	fp,r16,r3
    61e0:	d9003617 	ldw	r4,216(sp)
    61e4:	000d883a 	mov	r6,zero
    61e8:	000f883a 	mov	r7,zero
    61ec:	980b883a 	mov	r5,r19
    61f0:	da003d15 	stw	r8,244(sp)
    61f4:	001106c0 	call	1106c <__eqdf2>
    61f8:	da003d17 	ldw	r8,244(sp)
    61fc:	10018d26 	beq	r2,zero,6834 <___vfprintf_internal_r+0x1d98>
    6200:	d8802117 	ldw	r2,132(sp)
    6204:	1700062e 	bgeu	r2,fp,6220 <___vfprintf_internal_r+0x1784>
    6208:	01000c04 	movi	r4,48
    620c:	10c00044 	addi	r3,r2,1
    6210:	d8c02115 	stw	r3,132(sp)
    6214:	11000005 	stb	r4,0(r2)
    6218:	d8802117 	ldw	r2,132(sp)
    621c:	173ffb36 	bltu	r2,fp,620c <___vfprintf_internal_r+0x1770>
    6220:	1405c83a 	sub	r2,r2,r16
    6224:	d8803315 	stw	r2,204(sp)
    6228:	008011c4 	movi	r2,71
    622c:	b0817626 	beq	r22,r2,6808 <___vfprintf_internal_r+0x1d6c>
    6230:	00801944 	movi	r2,101
    6234:	1442810e 	bge	r2,r17,6c3c <___vfprintf_internal_r+0x21a0>
    6238:	d8c02617 	ldw	r3,152(sp)
    623c:	00801984 	movi	r2,102
    6240:	d8c03215 	stw	r3,200(sp)
    6244:	8881fe26 	beq	r17,r2,6a40 <___vfprintf_internal_r+0x1fa4>
    6248:	d8c03217 	ldw	r3,200(sp)
    624c:	d9003317 	ldw	r4,204(sp)
    6250:	1901dd16 	blt	r3,r4,69c8 <___vfprintf_internal_r+0x1f2c>
    6254:	9480004c 	andi	r18,r18,1
    6258:	90022b1e 	bne	r18,zero,6b08 <___vfprintf_internal_r+0x206c>
    625c:	1805883a 	mov	r2,r3
    6260:	18028016 	blt	r3,zero,6c64 <___vfprintf_internal_r+0x21c8>
    6264:	d8c03217 	ldw	r3,200(sp)
    6268:	044019c4 	movi	r17,103
    626c:	d8c02e15 	stw	r3,184(sp)
    6270:	df002a07 	ldb	fp,168(sp)
    6274:	e001531e 	bne	fp,zero,67c4 <___vfprintf_internal_r+0x1d28>
    6278:	df002783 	ldbu	fp,158(sp)
    627c:	d8802a15 	stw	r2,168(sp)
    6280:	dc802b17 	ldw	r18,172(sp)
    6284:	d8002915 	stw	zero,164(sp)
    6288:	003bd106 	br	51d0 <___vfprintf_internal_r+0x734>
    628c:	d8802d17 	ldw	r2,180(sp)
    6290:	d8c02d17 	ldw	r3,180(sp)
    6294:	d9002d17 	ldw	r4,180(sp)
    6298:	10800017 	ldw	r2,0(r2)
    629c:	18c00117 	ldw	r3,4(r3)
    62a0:	21000204 	addi	r4,r4,8
    62a4:	d8803615 	stw	r2,216(sp)
    62a8:	d8c03815 	stw	r3,224(sp)
    62ac:	d9002d15 	stw	r4,180(sp)
    62b0:	003b7506 	br	5088 <___vfprintf_internal_r+0x5ec>
    62b4:	ac400007 	ldb	r17,0(r21)
    62b8:	003a5906 	br	4c20 <___vfprintf_internal_r+0x184>
    62bc:	9080100c 	andi	r2,r18,64
    62c0:	1000a826 	beq	r2,zero,6564 <___vfprintf_internal_r+0x1ac8>
    62c4:	d9002d17 	ldw	r4,180(sp)
    62c8:	002d883a 	mov	r22,zero
    62cc:	24c0000b 	ldhu	r19,0(r4)
    62d0:	21000104 	addi	r4,r4,4
    62d4:	d9002d15 	stw	r4,180(sp)
    62d8:	003ccb06 	br	5608 <___vfprintf_internal_r+0xb6c>
    62dc:	d8c02d17 	ldw	r3,180(sp)
    62e0:	d9002917 	ldw	r4,164(sp)
    62e4:	002d883a 	mov	r22,zero
    62e8:	18800104 	addi	r2,r3,4
    62ec:	1cc00017 	ldw	r19,0(r3)
    62f0:	203ebb0e 	bge	r4,zero,5de0 <___vfprintf_internal_r+0x1344>
    62f4:	003ef106 	br	5ebc <___vfprintf_internal_r+0x1420>
    62f8:	9080040c 	andi	r2,r18,16
    62fc:	1000921e 	bne	r2,zero,6548 <___vfprintf_internal_r+0x1aac>
    6300:	9480100c 	andi	r18,r18,64
    6304:	90013926 	beq	r18,zero,67ec <___vfprintf_internal_r+0x1d50>
    6308:	d9002d17 	ldw	r4,180(sp)
    630c:	d9402f17 	ldw	r5,188(sp)
    6310:	20800017 	ldw	r2,0(r4)
    6314:	21000104 	addi	r4,r4,4
    6318:	d9002d15 	stw	r4,180(sp)
    631c:	1140000d 	sth	r5,0(r2)
    6320:	003a1606 	br	4b7c <___vfprintf_internal_r+0xe0>
    6324:	9080100c 	andi	r2,r18,64
    6328:	10008026 	beq	r2,zero,652c <___vfprintf_internal_r+0x1a90>
    632c:	d8c02d17 	ldw	r3,180(sp)
    6330:	1cc0000f 	ldh	r19,0(r3)
    6334:	18c00104 	addi	r3,r3,4
    6338:	d8c02d15 	stw	r3,180(sp)
    633c:	982dd7fa 	srai	r22,r19,31
    6340:	b005883a 	mov	r2,r22
    6344:	003b1f06 	br	4fc4 <___vfprintf_internal_r+0x528>
    6348:	9080100c 	andi	r2,r18,64
    634c:	d8002785 	stb	zero,158(sp)
    6350:	10008a1e 	bne	r2,zero,657c <___vfprintf_internal_r+0x1ae0>
    6354:	d9402d17 	ldw	r5,180(sp)
    6358:	d8c02917 	ldw	r3,164(sp)
    635c:	002d883a 	mov	r22,zero
    6360:	28800104 	addi	r2,r5,4
    6364:	2cc00017 	ldw	r19,0(r5)
    6368:	183e4b0e 	bge	r3,zero,5c98 <___vfprintf_internal_r+0x11fc>
    636c:	9d86b03a 	or	r3,r19,r22
    6370:	d8802d15 	stw	r2,180(sp)
    6374:	183e4c1e 	bne	r3,zero,5ca8 <___vfprintf_internal_r+0x120c>
    6378:	0039883a 	mov	fp,zero
    637c:	0005883a 	mov	r2,zero
    6380:	003d4006 	br	5884 <___vfprintf_internal_r+0xde8>
    6384:	014000b4 	movhi	r5,2
    6388:	297d1984 	addi	r5,r5,-2970
    638c:	d9402b15 	stw	r5,172(sp)
    6390:	d9402b17 	ldw	r5,172(sp)
    6394:	1c47883a 	add	r3,r3,r17
    6398:	10800044 	addi	r2,r2,1
    639c:	41400015 	stw	r5,0(r8)
    63a0:	44400115 	stw	r17,4(r8)
    63a4:	d8c02015 	stw	r3,128(sp)
    63a8:	d8801f15 	stw	r2,124(sp)
    63ac:	010001c4 	movi	r4,7
    63b0:	20bec816 	blt	r4,r2,5ed4 <___vfprintf_internal_r+0x1438>
    63b4:	42000204 	addi	r8,r8,8
    63b8:	003ecd06 	br	5ef0 <___vfprintf_internal_r+0x1454>
    63bc:	d9002917 	ldw	r4,164(sp)
    63c0:	d8002785 	stb	zero,158(sp)
    63c4:	203d2d16 	blt	r4,zero,587c <___vfprintf_internal_r+0xde0>
    63c8:	00bfdfc4 	movi	r2,-129
    63cc:	90a4703a 	and	r18,r18,r2
    63d0:	003a9106 	br	4e18 <___vfprintf_internal_r+0x37c>
    63d4:	010000b4 	movhi	r4,2
    63d8:	213d1984 	addi	r4,r4,-2970
    63dc:	d9002b15 	stw	r4,172(sp)
    63e0:	003c0c06 	br	5414 <___vfprintf_internal_r+0x978>
    63e4:	d9002c17 	ldw	r4,176(sp)
    63e8:	d9801e04 	addi	r6,sp,120
    63ec:	b80b883a 	mov	r5,r23
    63f0:	000c8780 	call	c878 <__sprint_r>
    63f4:	103aab1e 	bne	r2,zero,4ea4 <___vfprintf_internal_r+0x408>
    63f8:	d8c02017 	ldw	r3,128(sp)
    63fc:	da000404 	addi	r8,sp,16
    6400:	003d4106 	br	5908 <___vfprintf_internal_r+0xe6c>
    6404:	d8801f17 	ldw	r2,124(sp)
    6408:	014000b4 	movhi	r5,2
    640c:	01000044 	movi	r4,1
    6410:	18c00044 	addi	r3,r3,1
    6414:	10800044 	addi	r2,r2,1
    6418:	297d1104 	addi	r5,r5,-3004
    641c:	41000115 	stw	r4,4(r8)
    6420:	41400015 	stw	r5,0(r8)
    6424:	d8c02015 	stw	r3,128(sp)
    6428:	d8801f15 	stw	r2,124(sp)
    642c:	010001c4 	movi	r4,7
    6430:	20805c16 	blt	r4,r2,65a4 <___vfprintf_internal_r+0x1b08>
    6434:	42000204 	addi	r8,r8,8
    6438:	8800041e 	bne	r17,zero,644c <___vfprintf_internal_r+0x19b0>
    643c:	d8803317 	ldw	r2,204(sp)
    6440:	1000021e 	bne	r2,zero,644c <___vfprintf_internal_r+0x19b0>
    6444:	9080004c 	andi	r2,r18,1
    6448:	103c0926 	beq	r2,zero,5470 <___vfprintf_internal_r+0x9d4>
    644c:	d9003717 	ldw	r4,220(sp)
    6450:	d8801f17 	ldw	r2,124(sp)
    6454:	d9403417 	ldw	r5,208(sp)
    6458:	20c7883a 	add	r3,r4,r3
    645c:	10800044 	addi	r2,r2,1
    6460:	41000115 	stw	r4,4(r8)
    6464:	41400015 	stw	r5,0(r8)
    6468:	d8c02015 	stw	r3,128(sp)
    646c:	d8801f15 	stw	r2,124(sp)
    6470:	010001c4 	movi	r4,7
    6474:	20812116 	blt	r4,r2,68fc <___vfprintf_internal_r+0x1e60>
    6478:	42000204 	addi	r8,r8,8
    647c:	0463c83a 	sub	r17,zero,r17
    6480:	0440730e 	bge	zero,r17,6650 <___vfprintf_internal_r+0x1bb4>
    6484:	05800404 	movi	r22,16
    6488:	b440860e 	bge	r22,r17,66a4 <___vfprintf_internal_r+0x1c08>
    648c:	014000b4 	movhi	r5,2
    6490:	297d1984 	addi	r5,r5,-2970
    6494:	d9402b15 	stw	r5,172(sp)
    6498:	070001c4 	movi	fp,7
    649c:	dcc02c17 	ldw	r19,176(sp)
    64a0:	00000306 	br	64b0 <___vfprintf_internal_r+0x1a14>
    64a4:	42000204 	addi	r8,r8,8
    64a8:	8c7ffc04 	addi	r17,r17,-16
    64ac:	b440800e 	bge	r22,r17,66b0 <___vfprintf_internal_r+0x1c14>
    64b0:	18c00404 	addi	r3,r3,16
    64b4:	10800044 	addi	r2,r2,1
    64b8:	45000015 	stw	r20,0(r8)
    64bc:	45800115 	stw	r22,4(r8)
    64c0:	d8c02015 	stw	r3,128(sp)
    64c4:	d8801f15 	stw	r2,124(sp)
    64c8:	e0bff60e 	bge	fp,r2,64a4 <___vfprintf_internal_r+0x1a08>
    64cc:	d9801e04 	addi	r6,sp,120
    64d0:	b80b883a 	mov	r5,r23
    64d4:	9809883a 	mov	r4,r19
    64d8:	000c8780 	call	c878 <__sprint_r>
    64dc:	103a711e 	bne	r2,zero,4ea4 <___vfprintf_internal_r+0x408>
    64e0:	d8c02017 	ldw	r3,128(sp)
    64e4:	d8801f17 	ldw	r2,124(sp)
    64e8:	da000404 	addi	r8,sp,16
    64ec:	003fee06 	br	64a8 <___vfprintf_internal_r+0x1a0c>
    64f0:	00bfffc4 	movi	r2,-1
    64f4:	003a6f06 	br	4eb4 <___vfprintf_internal_r+0x418>
    64f8:	008011c4 	movi	r2,71
    64fc:	1440b816 	blt	r2,r17,67e0 <___vfprintf_internal_r+0x1d44>
    6500:	040000b4 	movhi	r16,2
    6504:	843d0304 	addi	r16,r16,-3060
    6508:	00c000c4 	movi	r3,3
    650c:	00bfdfc4 	movi	r2,-129
    6510:	d8c02a15 	stw	r3,168(sp)
    6514:	90a4703a 	and	r18,r18,r2
    6518:	df002783 	ldbu	fp,158(sp)
    651c:	d8c02e15 	stw	r3,184(sp)
    6520:	d8002915 	stw	zero,164(sp)
    6524:	d8003215 	stw	zero,200(sp)
    6528:	003b2906 	br	51d0 <___vfprintf_internal_r+0x734>
    652c:	d9002d17 	ldw	r4,180(sp)
    6530:	24c00017 	ldw	r19,0(r4)
    6534:	21000104 	addi	r4,r4,4
    6538:	d9002d15 	stw	r4,180(sp)
    653c:	982dd7fa 	srai	r22,r19,31
    6540:	b005883a 	mov	r2,r22
    6544:	003a9f06 	br	4fc4 <___vfprintf_internal_r+0x528>
    6548:	d9402d17 	ldw	r5,180(sp)
    654c:	d8c02f17 	ldw	r3,188(sp)
    6550:	28800017 	ldw	r2,0(r5)
    6554:	29400104 	addi	r5,r5,4
    6558:	d9402d15 	stw	r5,180(sp)
    655c:	10c00015 	stw	r3,0(r2)
    6560:	00398606 	br	4b7c <___vfprintf_internal_r+0xe0>
    6564:	d9402d17 	ldw	r5,180(sp)
    6568:	002d883a 	mov	r22,zero
    656c:	2cc00017 	ldw	r19,0(r5)
    6570:	29400104 	addi	r5,r5,4
    6574:	d9402d15 	stw	r5,180(sp)
    6578:	003c2306 	br	5608 <___vfprintf_internal_r+0xb6c>
    657c:	d8c02d17 	ldw	r3,180(sp)
    6580:	d9002917 	ldw	r4,164(sp)
    6584:	002d883a 	mov	r22,zero
    6588:	18800104 	addi	r2,r3,4
    658c:	1cc0000b 	ldhu	r19,0(r3)
    6590:	203dc10e 	bge	r4,zero,5c98 <___vfprintf_internal_r+0x11fc>
    6594:	003f7506 	br	636c <___vfprintf_internal_r+0x18d0>
    6598:	040000b4 	movhi	r16,2
    659c:	843d0104 	addi	r16,r16,-3068
    65a0:	003acc06 	br	50d4 <___vfprintf_internal_r+0x638>
    65a4:	d9002c17 	ldw	r4,176(sp)
    65a8:	d9801e04 	addi	r6,sp,120
    65ac:	b80b883a 	mov	r5,r23
    65b0:	000c8780 	call	c878 <__sprint_r>
    65b4:	103a3b1e 	bne	r2,zero,4ea4 <___vfprintf_internal_r+0x408>
    65b8:	dc402617 	ldw	r17,152(sp)
    65bc:	d8c02017 	ldw	r3,128(sp)
    65c0:	da000404 	addi	r8,sp,16
    65c4:	003f9c06 	br	6438 <___vfprintf_internal_r+0x199c>
    65c8:	ac400043 	ldbu	r17,1(r21)
    65cc:	94800814 	ori	r18,r18,32
    65d0:	ad400044 	addi	r21,r21,1
    65d4:	8c403fcc 	andi	r17,r17,255
    65d8:	8c40201c 	xori	r17,r17,128
    65dc:	8c7fe004 	addi	r17,r17,-128
    65e0:	00398f06 	br	4c20 <___vfprintf_internal_r+0x184>
    65e4:	d8c02d15 	stw	r3,180(sp)
    65e8:	0039883a 	mov	fp,zero
    65ec:	003e3506 	br	5ec4 <___vfprintf_internal_r+0x1428>
    65f0:	d9002c17 	ldw	r4,176(sp)
    65f4:	d9801e04 	addi	r6,sp,120
    65f8:	b80b883a 	mov	r5,r23
    65fc:	000c8780 	call	c878 <__sprint_r>
    6600:	103a281e 	bne	r2,zero,4ea4 <___vfprintf_internal_r+0x408>
    6604:	d8c02017 	ldw	r3,128(sp)
    6608:	da000404 	addi	r8,sp,16
    660c:	003cd006 	br	5950 <___vfprintf_internal_r+0xeb4>
    6610:	8009883a 	mov	r4,r16
    6614:	da003d15 	stw	r8,244(sp)
    6618:	000b2d80 	call	b2d8 <strlen>
    661c:	d8802e15 	stw	r2,184(sp)
    6620:	da003d17 	ldw	r8,244(sp)
    6624:	103c340e 	bge	r2,zero,56f8 <___vfprintf_internal_r+0xc5c>
    6628:	0005883a 	mov	r2,zero
    662c:	003c3206 	br	56f8 <___vfprintf_internal_r+0xc5c>
    6630:	d9002c17 	ldw	r4,176(sp)
    6634:	d9801e04 	addi	r6,sp,120
    6638:	b80b883a 	mov	r5,r23
    663c:	000c8780 	call	c878 <__sprint_r>
    6640:	103a181e 	bne	r2,zero,4ea4 <___vfprintf_internal_r+0x408>
    6644:	d8c02017 	ldw	r3,128(sp)
    6648:	d8801f17 	ldw	r2,124(sp)
    664c:	da000404 	addi	r8,sp,16
    6650:	d9403317 	ldw	r5,204(sp)
    6654:	10800044 	addi	r2,r2,1
    6658:	44000015 	stw	r16,0(r8)
    665c:	28c7883a 	add	r3,r5,r3
    6660:	003b7d06 	br	5458 <___vfprintf_internal_r+0x9bc>
    6664:	010000b4 	movhi	r4,2
    6668:	213d1d84 	addi	r4,r4,-2954
    666c:	d9003515 	stw	r4,212(sp)
    6670:	003b1406 	br	52c4 <___vfprintf_internal_r+0x828>
    6674:	013fffc4 	movi	r4,-1
    6678:	003a3506 	br	4f50 <___vfprintf_internal_r+0x4b4>
    667c:	0023883a 	mov	r17,zero
    6680:	003d9d06 	br	5cf8 <___vfprintf_internal_r+0x125c>
    6684:	d9002c17 	ldw	r4,176(sp)
    6688:	d9801e04 	addi	r6,sp,120
    668c:	b80b883a 	mov	r5,r23
    6690:	000c8780 	call	c878 <__sprint_r>
    6694:	103a031e 	bne	r2,zero,4ea4 <___vfprintf_internal_r+0x408>
    6698:	d8c02017 	ldw	r3,128(sp)
    669c:	da000404 	addi	r8,sp,16
    66a0:	003d9406 	br	5cf4 <___vfprintf_internal_r+0x1258>
    66a4:	010000b4 	movhi	r4,2
    66a8:	213d1984 	addi	r4,r4,-2970
    66ac:	d9002b15 	stw	r4,172(sp)
    66b0:	d9002b17 	ldw	r4,172(sp)
    66b4:	1c47883a 	add	r3,r3,r17
    66b8:	10800044 	addi	r2,r2,1
    66bc:	41000015 	stw	r4,0(r8)
    66c0:	44400115 	stw	r17,4(r8)
    66c4:	d8c02015 	stw	r3,128(sp)
    66c8:	d8801f15 	stw	r2,124(sp)
    66cc:	010001c4 	movi	r4,7
    66d0:	20bfd716 	blt	r4,r2,6630 <___vfprintf_internal_r+0x1b94>
    66d4:	42000204 	addi	r8,r8,8
    66d8:	003fdd06 	br	6650 <___vfprintf_internal_r+0x1bb4>
    66dc:	d9002c17 	ldw	r4,176(sp)
    66e0:	d9801e04 	addi	r6,sp,120
    66e4:	b80b883a 	mov	r5,r23
    66e8:	000c8780 	call	c878 <__sprint_r>
    66ec:	1039ed1e 	bne	r2,zero,4ea4 <___vfprintf_internal_r+0x408>
    66f0:	d8802617 	ldw	r2,152(sp)
    66f4:	d8c02017 	ldw	r3,128(sp)
    66f8:	da000404 	addi	r8,sp,16
    66fc:	003e1006 	br	5f40 <___vfprintf_internal_r+0x14a4>
    6700:	00800044 	movi	r2,1
    6704:	10803fcc 	andi	r2,r2,255
    6708:	00c00044 	movi	r3,1
    670c:	10fa3526 	beq	r2,r3,4fe4 <___vfprintf_internal_r+0x548>
    6710:	00c00084 	movi	r3,2
    6714:	10fbcb26 	beq	r2,r3,5644 <___vfprintf_internal_r+0xba8>
    6718:	003a8f06 	br	5158 <___vfprintf_internal_r+0x6bc>
    671c:	010000b4 	movhi	r4,2
    6720:	213d1d84 	addi	r4,r4,-2954
    6724:	d9003515 	stw	r4,212(sp)
    6728:	003b7606 	br	5504 <___vfprintf_internal_r+0xa68>
    672c:	d8802917 	ldw	r2,164(sp)
    6730:	00c00184 	movi	r3,6
    6734:	1880012e 	bgeu	r3,r2,673c <___vfprintf_internal_r+0x1ca0>
    6738:	1805883a 	mov	r2,r3
    673c:	d8802e15 	stw	r2,184(sp)
    6740:	1000ef16 	blt	r2,zero,6b00 <___vfprintf_internal_r+0x2064>
    6744:	040000b4 	movhi	r16,2
    6748:	d8802a15 	stw	r2,168(sp)
    674c:	dcc02d15 	stw	r19,180(sp)
    6750:	d8002915 	stw	zero,164(sp)
    6754:	d8003215 	stw	zero,200(sp)
    6758:	843d0f04 	addi	r16,r16,-3012
    675c:	0039883a 	mov	fp,zero
    6760:	003aa206 	br	51ec <___vfprintf_internal_r+0x750>
    6764:	0021883a 	mov	r16,zero
    6768:	003e0706 	br	5f88 <___vfprintf_internal_r+0x14ec>
    676c:	d9002c17 	ldw	r4,176(sp)
    6770:	d9801e04 	addi	r6,sp,120
    6774:	b80b883a 	mov	r5,r23
    6778:	000c8780 	call	c878 <__sprint_r>
    677c:	1039c91e 	bne	r2,zero,4ea4 <___vfprintf_internal_r+0x408>
    6780:	d8802617 	ldw	r2,152(sp)
    6784:	d9403317 	ldw	r5,204(sp)
    6788:	d8c02017 	ldw	r3,128(sp)
    678c:	da000404 	addi	r8,sp,16
    6790:	2885c83a 	sub	r2,r5,r2
    6794:	003dfb06 	br	5f84 <___vfprintf_internal_r+0x14e8>
    6798:	9080004c 	andi	r2,r18,1
    679c:	103e8f1e 	bne	r2,zero,61dc <___vfprintf_internal_r+0x1740>
    67a0:	d8802117 	ldw	r2,132(sp)
    67a4:	003e9e06 	br	6220 <___vfprintf_internal_r+0x1784>
    67a8:	1025883a 	mov	r18,r2
    67ac:	0039883a 	mov	fp,zero
    67b0:	00800084 	movi	r2,2
    67b4:	003fd306 	br	6704 <___vfprintf_internal_r+0x1c68>
    67b8:	07000b44 	movi	fp,45
    67bc:	df002785 	stb	fp,158(sp)
    67c0:	003a4006 	br	50c4 <___vfprintf_internal_r+0x628>
    67c4:	00c00b44 	movi	r3,45
    67c8:	d8c02785 	stb	r3,158(sp)
    67cc:	d8802a15 	stw	r2,168(sp)
    67d0:	dc802b17 	ldw	r18,172(sp)
    67d4:	d8002915 	stw	zero,164(sp)
    67d8:	07000b44 	movi	fp,45
    67dc:	003a8006 	br	51e0 <___vfprintf_internal_r+0x744>
    67e0:	040000b4 	movhi	r16,2
    67e4:	843d0404 	addi	r16,r16,-3056
    67e8:	003f4706 	br	6508 <___vfprintf_internal_r+0x1a6c>
    67ec:	d8c02d17 	ldw	r3,180(sp)
    67f0:	d9002f17 	ldw	r4,188(sp)
    67f4:	18800017 	ldw	r2,0(r3)
    67f8:	18c00104 	addi	r3,r3,4
    67fc:	d8c02d15 	stw	r3,180(sp)
    6800:	11000015 	stw	r4,0(r2)
    6804:	0038dd06 	br	4b7c <___vfprintf_internal_r+0xe0>
    6808:	dd802617 	ldw	r22,152(sp)
    680c:	00bfff44 	movi	r2,-3
    6810:	b0801c16 	blt	r22,r2,6884 <___vfprintf_internal_r+0x1de8>
    6814:	d9402917 	ldw	r5,164(sp)
    6818:	2d801a16 	blt	r5,r22,6884 <___vfprintf_internal_r+0x1de8>
    681c:	dd803215 	stw	r22,200(sp)
    6820:	003e8906 	br	6248 <___vfprintf_internal_r+0x17ac>
    6824:	010000b4 	movhi	r4,2
    6828:	213d1984 	addi	r4,r4,-2970
    682c:	d9002b15 	stw	r4,172(sp)
    6830:	003c9106 	br	5a78 <___vfprintf_internal_r+0xfdc>
    6834:	e005883a 	mov	r2,fp
    6838:	003e7906 	br	6220 <___vfprintf_internal_r+0x1784>
    683c:	d9402917 	ldw	r5,164(sp)
    6840:	df002783 	ldbu	fp,158(sp)
    6844:	dcc02d15 	stw	r19,180(sp)
    6848:	d9402a15 	stw	r5,168(sp)
    684c:	d9402e15 	stw	r5,184(sp)
    6850:	d8002915 	stw	zero,164(sp)
    6854:	d8003215 	stw	zero,200(sp)
    6858:	003a5d06 	br	51d0 <___vfprintf_internal_r+0x734>
    685c:	9080004c 	andi	r2,r18,1
    6860:	0039883a 	mov	fp,zero
    6864:	10000426 	beq	r2,zero,6878 <___vfprintf_internal_r+0x1ddc>
    6868:	00800c04 	movi	r2,48
    686c:	dc001dc4 	addi	r16,sp,119
    6870:	d8801dc5 	stb	r2,119(sp)
    6874:	003b8006 	br	5678 <___vfprintf_internal_r+0xbdc>
    6878:	d8002e15 	stw	zero,184(sp)
    687c:	dc001e04 	addi	r16,sp,120
    6880:	003a4d06 	br	51b8 <___vfprintf_internal_r+0x71c>
    6884:	8c7fff84 	addi	r17,r17,-2
    6888:	b5bfffc4 	addi	r22,r22,-1
    688c:	dd802615 	stw	r22,152(sp)
    6890:	dc4022c5 	stb	r17,139(sp)
    6894:	b000bf16 	blt	r22,zero,6b94 <___vfprintf_internal_r+0x20f8>
    6898:	00800ac4 	movi	r2,43
    689c:	d8802305 	stb	r2,140(sp)
    68a0:	00800244 	movi	r2,9
    68a4:	15807016 	blt	r2,r22,6a68 <___vfprintf_internal_r+0x1fcc>
    68a8:	00800c04 	movi	r2,48
    68ac:	b5800c04 	addi	r22,r22,48
    68b0:	d8802345 	stb	r2,141(sp)
    68b4:	dd802385 	stb	r22,142(sp)
    68b8:	d88023c4 	addi	r2,sp,143
    68bc:	df0022c4 	addi	fp,sp,139
    68c0:	d8c03317 	ldw	r3,204(sp)
    68c4:	1739c83a 	sub	fp,r2,fp
    68c8:	d9003317 	ldw	r4,204(sp)
    68cc:	e0c7883a 	add	r3,fp,r3
    68d0:	df003a15 	stw	fp,232(sp)
    68d4:	d8c02e15 	stw	r3,184(sp)
    68d8:	00800044 	movi	r2,1
    68dc:	1100b30e 	bge	r2,r4,6bac <___vfprintf_internal_r+0x2110>
    68e0:	d8c02e17 	ldw	r3,184(sp)
    68e4:	18c00044 	addi	r3,r3,1
    68e8:	d8c02e15 	stw	r3,184(sp)
    68ec:	1805883a 	mov	r2,r3
    68f0:	1800ac16 	blt	r3,zero,6ba4 <___vfprintf_internal_r+0x2108>
    68f4:	d8003215 	stw	zero,200(sp)
    68f8:	003e5d06 	br	6270 <___vfprintf_internal_r+0x17d4>
    68fc:	d9002c17 	ldw	r4,176(sp)
    6900:	d9801e04 	addi	r6,sp,120
    6904:	b80b883a 	mov	r5,r23
    6908:	000c8780 	call	c878 <__sprint_r>
    690c:	1039651e 	bne	r2,zero,4ea4 <___vfprintf_internal_r+0x408>
    6910:	dc402617 	ldw	r17,152(sp)
    6914:	d8c02017 	ldw	r3,128(sp)
    6918:	d8801f17 	ldw	r2,124(sp)
    691c:	da000404 	addi	r8,sp,16
    6920:	003ed606 	br	647c <___vfprintf_internal_r+0x19e0>
    6924:	582b883a 	mov	r21,r11
    6928:	d8002915 	stw	zero,164(sp)
    692c:	0038bd06 	br	4c24 <___vfprintf_internal_r+0x188>
    6930:	d8802917 	ldw	r2,164(sp)
    6934:	103e071e 	bne	r2,zero,6154 <___vfprintf_internal_r+0x16b8>
    6938:	dc002915 	stw	r16,164(sp)
    693c:	003e0506 	br	6154 <___vfprintf_internal_r+0x16b8>
    6940:	d9002917 	ldw	r4,164(sp)
    6944:	20c00044 	addi	r3,r4,1
    6948:	003e0f06 	br	6188 <___vfprintf_internal_r+0x16ec>
    694c:	01400184 	movi	r5,6
    6950:	d9402915 	stw	r5,164(sp)
    6954:	003dff06 	br	6154 <___vfprintf_internal_r+0x16b8>
    6958:	d8802104 	addi	r2,sp,132
    695c:	d8800315 	stw	r2,12(sp)
    6960:	d8802504 	addi	r2,sp,148
    6964:	d8800215 	stw	r2,8(sp)
    6968:	d8802604 	addi	r2,sp,152
    696c:	d8800115 	stw	r2,4(sp)
    6970:	d8802917 	ldw	r2,164(sp)
    6974:	d9403617 	ldw	r5,216(sp)
    6978:	d9002c17 	ldw	r4,176(sp)
    697c:	d8800015 	stw	r2,0(sp)
    6980:	01c000c4 	movi	r7,3
    6984:	980d883a 	mov	r6,r19
    6988:	da003d15 	stw	r8,244(sp)
    698c:	00070c00 	call	70c0 <_dtoa_r>
    6990:	d8c02917 	ldw	r3,164(sp)
    6994:	da003d17 	ldw	r8,244(sp)
    6998:	1021883a 	mov	r16,r2
    699c:	10f9883a 	add	fp,r2,r3
    69a0:	81000007 	ldb	r4,0(r16)
    69a4:	00800c04 	movi	r2,48
    69a8:	20805e26 	beq	r4,r2,6b24 <___vfprintf_internal_r+0x2088>
    69ac:	d8c02617 	ldw	r3,152(sp)
    69b0:	e0f9883a 	add	fp,fp,r3
    69b4:	003e0a06 	br	61e0 <___vfprintf_internal_r+0x1744>
    69b8:	00c00b44 	movi	r3,45
    69bc:	24e0003c 	xorhi	r19,r4,32768
    69c0:	d8c02a05 	stb	r3,168(sp)
    69c4:	003de906 	br	616c <___vfprintf_internal_r+0x16d0>
    69c8:	d8c03217 	ldw	r3,200(sp)
    69cc:	00c07a0e 	bge	zero,r3,6bb8 <___vfprintf_internal_r+0x211c>
    69d0:	00800044 	movi	r2,1
    69d4:	d9003317 	ldw	r4,204(sp)
    69d8:	1105883a 	add	r2,r2,r4
    69dc:	d8802e15 	stw	r2,184(sp)
    69e0:	10004e16 	blt	r2,zero,6b1c <___vfprintf_internal_r+0x2080>
    69e4:	044019c4 	movi	r17,103
    69e8:	003e2106 	br	6270 <___vfprintf_internal_r+0x17d4>
    69ec:	d9002917 	ldw	r4,164(sp)
    69f0:	d8802104 	addi	r2,sp,132
    69f4:	d8800315 	stw	r2,12(sp)
    69f8:	d9000015 	stw	r4,0(sp)
    69fc:	d8802504 	addi	r2,sp,148
    6a00:	d9403617 	ldw	r5,216(sp)
    6a04:	d9002c17 	ldw	r4,176(sp)
    6a08:	d8800215 	stw	r2,8(sp)
    6a0c:	d8802604 	addi	r2,sp,152
    6a10:	d8800115 	stw	r2,4(sp)
    6a14:	01c000c4 	movi	r7,3
    6a18:	980d883a 	mov	r6,r19
    6a1c:	da003d15 	stw	r8,244(sp)
    6a20:	00070c00 	call	70c0 <_dtoa_r>
    6a24:	d8c02917 	ldw	r3,164(sp)
    6a28:	da003d17 	ldw	r8,244(sp)
    6a2c:	1021883a 	mov	r16,r2
    6a30:	00801184 	movi	r2,70
    6a34:	80f9883a 	add	fp,r16,r3
    6a38:	88bfd926 	beq	r17,r2,69a0 <___vfprintf_internal_r+0x1f04>
    6a3c:	003de806 	br	61e0 <___vfprintf_internal_r+0x1744>
    6a40:	d9002917 	ldw	r4,164(sp)
    6a44:	00c04d0e 	bge	zero,r3,6b7c <___vfprintf_internal_r+0x20e0>
    6a48:	2000441e 	bne	r4,zero,6b5c <___vfprintf_internal_r+0x20c0>
    6a4c:	9480004c 	andi	r18,r18,1
    6a50:	9000421e 	bne	r18,zero,6b5c <___vfprintf_internal_r+0x20c0>
    6a54:	1805883a 	mov	r2,r3
    6a58:	18007016 	blt	r3,zero,6c1c <___vfprintf_internal_r+0x2180>
    6a5c:	d8c03217 	ldw	r3,200(sp)
    6a60:	d8c02e15 	stw	r3,184(sp)
    6a64:	003e0206 	br	6270 <___vfprintf_internal_r+0x17d4>
    6a68:	df0022c4 	addi	fp,sp,139
    6a6c:	dc002915 	stw	r16,164(sp)
    6a70:	4027883a 	mov	r19,r8
    6a74:	e021883a 	mov	r16,fp
    6a78:	b009883a 	mov	r4,r22
    6a7c:	01400284 	movi	r5,10
    6a80:	000fda80 	call	fda8 <__modsi3>
    6a84:	10800c04 	addi	r2,r2,48
    6a88:	843fffc4 	addi	r16,r16,-1
    6a8c:	b009883a 	mov	r4,r22
    6a90:	01400284 	movi	r5,10
    6a94:	80800005 	stb	r2,0(r16)
    6a98:	000fd240 	call	fd24 <__divsi3>
    6a9c:	102d883a 	mov	r22,r2
    6aa0:	00800244 	movi	r2,9
    6aa4:	15bff416 	blt	r2,r22,6a78 <___vfprintf_internal_r+0x1fdc>
    6aa8:	9811883a 	mov	r8,r19
    6aac:	b0800c04 	addi	r2,r22,48
    6ab0:	8027883a 	mov	r19,r16
    6ab4:	997fffc4 	addi	r5,r19,-1
    6ab8:	98bfffc5 	stb	r2,-1(r19)
    6abc:	dc002917 	ldw	r16,164(sp)
    6ac0:	2f006a2e 	bgeu	r5,fp,6c6c <___vfprintf_internal_r+0x21d0>
    6ac4:	d9c02384 	addi	r7,sp,142
    6ac8:	3ccfc83a 	sub	r7,r7,r19
    6acc:	d9002344 	addi	r4,sp,141
    6ad0:	e1cf883a 	add	r7,fp,r7
    6ad4:	00000106 	br	6adc <___vfprintf_internal_r+0x2040>
    6ad8:	28800003 	ldbu	r2,0(r5)
    6adc:	20800005 	stb	r2,0(r4)
    6ae0:	21000044 	addi	r4,r4,1
    6ae4:	29400044 	addi	r5,r5,1
    6ae8:	393ffb1e 	bne	r7,r4,6ad8 <___vfprintf_internal_r+0x203c>
    6aec:	d8802304 	addi	r2,sp,140
    6af0:	14c5c83a 	sub	r2,r2,r19
    6af4:	d8c02344 	addi	r3,sp,141
    6af8:	1885883a 	add	r2,r3,r2
    6afc:	003f7006 	br	68c0 <___vfprintf_internal_r+0x1e24>
    6b00:	0005883a 	mov	r2,zero
    6b04:	003f0f06 	br	6744 <___vfprintf_internal_r+0x1ca8>
    6b08:	d8c03217 	ldw	r3,200(sp)
    6b0c:	18c00044 	addi	r3,r3,1
    6b10:	d8c02e15 	stw	r3,184(sp)
    6b14:	1805883a 	mov	r2,r3
    6b18:	183fb20e 	bge	r3,zero,69e4 <___vfprintf_internal_r+0x1f48>
    6b1c:	0005883a 	mov	r2,zero
    6b20:	003fb006 	br	69e4 <___vfprintf_internal_r+0x1f48>
    6b24:	d9003617 	ldw	r4,216(sp)
    6b28:	000d883a 	mov	r6,zero
    6b2c:	000f883a 	mov	r7,zero
    6b30:	980b883a 	mov	r5,r19
    6b34:	d8c03c15 	stw	r3,240(sp)
    6b38:	da003d15 	stw	r8,244(sp)
    6b3c:	001106c0 	call	1106c <__eqdf2>
    6b40:	d8c03c17 	ldw	r3,240(sp)
    6b44:	da003d17 	ldw	r8,244(sp)
    6b48:	103f9826 	beq	r2,zero,69ac <___vfprintf_internal_r+0x1f10>
    6b4c:	00800044 	movi	r2,1
    6b50:	10c7c83a 	sub	r3,r2,r3
    6b54:	d8c02615 	stw	r3,152(sp)
    6b58:	003f9506 	br	69b0 <___vfprintf_internal_r+0x1f14>
    6b5c:	d9002917 	ldw	r4,164(sp)
    6b60:	d8c03217 	ldw	r3,200(sp)
    6b64:	20800044 	addi	r2,r4,1
    6b68:	1885883a 	add	r2,r3,r2
    6b6c:	d8802e15 	stw	r2,184(sp)
    6b70:	103dbf0e 	bge	r2,zero,6270 <___vfprintf_internal_r+0x17d4>
    6b74:	0005883a 	mov	r2,zero
    6b78:	003dbd06 	br	6270 <___vfprintf_internal_r+0x17d4>
    6b7c:	2000211e 	bne	r4,zero,6c04 <___vfprintf_internal_r+0x2168>
    6b80:	9480004c 	andi	r18,r18,1
    6b84:	90001f1e 	bne	r18,zero,6c04 <___vfprintf_internal_r+0x2168>
    6b88:	00800044 	movi	r2,1
    6b8c:	d8802e15 	stw	r2,184(sp)
    6b90:	003db706 	br	6270 <___vfprintf_internal_r+0x17d4>
    6b94:	00800b44 	movi	r2,45
    6b98:	05adc83a 	sub	r22,zero,r22
    6b9c:	d8802305 	stb	r2,140(sp)
    6ba0:	003f3f06 	br	68a0 <___vfprintf_internal_r+0x1e04>
    6ba4:	0005883a 	mov	r2,zero
    6ba8:	003f5206 	br	68f4 <___vfprintf_internal_r+0x1e58>
    6bac:	90a4703a 	and	r18,r18,r2
    6bb0:	903f4e26 	beq	r18,zero,68ec <___vfprintf_internal_r+0x1e50>
    6bb4:	003f4a06 	br	68e0 <___vfprintf_internal_r+0x1e44>
    6bb8:	00800084 	movi	r2,2
    6bbc:	10c5c83a 	sub	r2,r2,r3
    6bc0:	003f8406 	br	69d4 <___vfprintf_internal_r+0x1f38>
    6bc4:	d8802d17 	ldw	r2,180(sp)
    6bc8:	d9002d17 	ldw	r4,180(sp)
    6bcc:	ac400043 	ldbu	r17,1(r21)
    6bd0:	10800017 	ldw	r2,0(r2)
    6bd4:	582b883a 	mov	r21,r11
    6bd8:	d8802915 	stw	r2,164(sp)
    6bdc:	20800104 	addi	r2,r4,4
    6be0:	d9002917 	ldw	r4,164(sp)
    6be4:	d8802d15 	stw	r2,180(sp)
    6be8:	203e7a0e 	bge	r4,zero,65d4 <___vfprintf_internal_r+0x1b38>
    6bec:	8c403fcc 	andi	r17,r17,255
    6bf0:	00bfffc4 	movi	r2,-1
    6bf4:	8c40201c 	xori	r17,r17,128
    6bf8:	d8802915 	stw	r2,164(sp)
    6bfc:	8c7fe004 	addi	r17,r17,-128
    6c00:	00380706 	br	4c20 <___vfprintf_internal_r+0x184>
    6c04:	d8c02917 	ldw	r3,164(sp)
    6c08:	18c00084 	addi	r3,r3,2
    6c0c:	d8c02e15 	stw	r3,184(sp)
    6c10:	1805883a 	mov	r2,r3
    6c14:	183d960e 	bge	r3,zero,6270 <___vfprintf_internal_r+0x17d4>
    6c18:	003fd606 	br	6b74 <___vfprintf_internal_r+0x20d8>
    6c1c:	0005883a 	mov	r2,zero
    6c20:	003f8e06 	br	6a5c <___vfprintf_internal_r+0x1fc0>
    6c24:	9080004c 	andi	r2,r18,1
    6c28:	103f811e 	bne	r2,zero,6a30 <___vfprintf_internal_r+0x1f94>
    6c2c:	d8802117 	ldw	r2,132(sp)
    6c30:	1405c83a 	sub	r2,r2,r16
    6c34:	d8803315 	stw	r2,204(sp)
    6c38:	b47ef326 	beq	r22,r17,6808 <___vfprintf_internal_r+0x1d6c>
    6c3c:	dd802617 	ldw	r22,152(sp)
    6c40:	003f1106 	br	6888 <___vfprintf_internal_r+0x1dec>
    6c44:	d9c02785 	stb	r7,158(sp)
    6c48:	00390406 	br	505c <___vfprintf_internal_r+0x5c0>
    6c4c:	d9c02785 	stb	r7,158(sp)
    6c50:	0038d306 	br	4fa0 <___vfprintf_internal_r+0x504>
    6c54:	d9c02785 	stb	r7,158(sp)
    6c58:	003a6106 	br	55e0 <___vfprintf_internal_r+0xb44>
    6c5c:	d9c02785 	stb	r7,158(sp)
    6c60:	003af806 	br	5844 <___vfprintf_internal_r+0xda8>
    6c64:	0005883a 	mov	r2,zero
    6c68:	003d7e06 	br	6264 <___vfprintf_internal_r+0x17c8>
    6c6c:	d8802344 	addi	r2,sp,141
    6c70:	003f1306 	br	68c0 <___vfprintf_internal_r+0x1e24>
    6c74:	d9c02785 	stb	r7,158(sp)
    6c78:	00392306 	br	5108 <___vfprintf_internal_r+0x66c>
    6c7c:	d9c02785 	stb	r7,158(sp)
    6c80:	003aa906 	br	5728 <___vfprintf_internal_r+0xc8c>
    6c84:	d9c02785 	stb	r7,158(sp)
    6c88:	003a3d06 	br	5580 <___vfprintf_internal_r+0xae4>
    6c8c:	d9c02785 	stb	r7,158(sp)
    6c90:	003aca06 	br	57bc <___vfprintf_internal_r+0xd20>

00006c94 <__vfprintf_internal>:
    6c94:	008000b4 	movhi	r2,2
    6c98:	1085ef04 	addi	r2,r2,6076
    6c9c:	300f883a 	mov	r7,r6
    6ca0:	280d883a 	mov	r6,r5
    6ca4:	200b883a 	mov	r5,r4
    6ca8:	11000017 	ldw	r4,0(r2)
    6cac:	0004a9c1 	jmpi	4a9c <___vfprintf_internal_r>

00006cb0 <__sbprintf>:
    6cb0:	2880030b 	ldhu	r2,12(r5)
    6cb4:	2ac01917 	ldw	r11,100(r5)
    6cb8:	2a80038b 	ldhu	r10,14(r5)
    6cbc:	2a400717 	ldw	r9,28(r5)
    6cc0:	2a000917 	ldw	r8,36(r5)
    6cc4:	defee204 	addi	sp,sp,-1144
    6cc8:	00c10004 	movi	r3,1024
    6ccc:	dc011a15 	stw	r16,1128(sp)
    6cd0:	10bfff4c 	andi	r2,r2,65533
    6cd4:	2821883a 	mov	r16,r5
    6cd8:	d8cb883a 	add	r5,sp,r3
    6cdc:	dc811c15 	stw	r18,1136(sp)
    6ce0:	dc411b15 	stw	r17,1132(sp)
    6ce4:	dfc11d15 	stw	ra,1140(sp)
    6ce8:	2025883a 	mov	r18,r4
    6cec:	d881030d 	sth	r2,1036(sp)
    6cf0:	dac11915 	stw	r11,1124(sp)
    6cf4:	da81038d 	sth	r10,1038(sp)
    6cf8:	da410715 	stw	r9,1052(sp)
    6cfc:	da010915 	stw	r8,1060(sp)
    6d00:	dec10015 	stw	sp,1024(sp)
    6d04:	dec10415 	stw	sp,1040(sp)
    6d08:	d8c10215 	stw	r3,1032(sp)
    6d0c:	d8c10515 	stw	r3,1044(sp)
    6d10:	d8010615 	stw	zero,1048(sp)
    6d14:	0004a9c0 	call	4a9c <___vfprintf_internal_r>
    6d18:	1023883a 	mov	r17,r2
    6d1c:	10000416 	blt	r2,zero,6d30 <__sbprintf+0x80>
    6d20:	d9410004 	addi	r5,sp,1024
    6d24:	9009883a 	mov	r4,r18
    6d28:	00089640 	call	8964 <_fflush_r>
    6d2c:	10000d1e 	bne	r2,zero,6d64 <__sbprintf+0xb4>
    6d30:	d881030b 	ldhu	r2,1036(sp)
    6d34:	1080100c 	andi	r2,r2,64
    6d38:	10000326 	beq	r2,zero,6d48 <__sbprintf+0x98>
    6d3c:	8080030b 	ldhu	r2,12(r16)
    6d40:	10801014 	ori	r2,r2,64
    6d44:	8080030d 	sth	r2,12(r16)
    6d48:	8805883a 	mov	r2,r17
    6d4c:	dfc11d17 	ldw	ra,1140(sp)
    6d50:	dc811c17 	ldw	r18,1136(sp)
    6d54:	dc411b17 	ldw	r17,1132(sp)
    6d58:	dc011a17 	ldw	r16,1128(sp)
    6d5c:	dec11e04 	addi	sp,sp,1144
    6d60:	f800283a 	ret
    6d64:	047fffc4 	movi	r17,-1
    6d68:	003ff106 	br	6d30 <__sbprintf+0x80>

00006d6c <__swsetup_r>:
    6d6c:	008000b4 	movhi	r2,2
    6d70:	defffd04 	addi	sp,sp,-12
    6d74:	1085ef04 	addi	r2,r2,6076
    6d78:	dc400115 	stw	r17,4(sp)
    6d7c:	2023883a 	mov	r17,r4
    6d80:	11000017 	ldw	r4,0(r2)
    6d84:	dc000015 	stw	r16,0(sp)
    6d88:	dfc00215 	stw	ra,8(sp)
    6d8c:	2821883a 	mov	r16,r5
    6d90:	20000226 	beq	r4,zero,6d9c <__swsetup_r+0x30>
    6d94:	20800e17 	ldw	r2,56(r4)
    6d98:	10003126 	beq	r2,zero,6e60 <__swsetup_r+0xf4>
    6d9c:	8080030b 	ldhu	r2,12(r16)
    6da0:	10c0020c 	andi	r3,r2,8
    6da4:	1009883a 	mov	r4,r2
    6da8:	18000f26 	beq	r3,zero,6de8 <__swsetup_r+0x7c>
    6dac:	80c00417 	ldw	r3,16(r16)
    6db0:	18001526 	beq	r3,zero,6e08 <__swsetup_r+0x9c>
    6db4:	1100004c 	andi	r4,r2,1
    6db8:	20001c1e 	bne	r4,zero,6e2c <__swsetup_r+0xc0>
    6dbc:	1080008c 	andi	r2,r2,2
    6dc0:	1000291e 	bne	r2,zero,6e68 <__swsetup_r+0xfc>
    6dc4:	80800517 	ldw	r2,20(r16)
    6dc8:	80800215 	stw	r2,8(r16)
    6dcc:	18001c26 	beq	r3,zero,6e40 <__swsetup_r+0xd4>
    6dd0:	0005883a 	mov	r2,zero
    6dd4:	dfc00217 	ldw	ra,8(sp)
    6dd8:	dc400117 	ldw	r17,4(sp)
    6ddc:	dc000017 	ldw	r16,0(sp)
    6de0:	dec00304 	addi	sp,sp,12
    6de4:	f800283a 	ret
    6de8:	2080040c 	andi	r2,r4,16
    6dec:	10002e26 	beq	r2,zero,6ea8 <__swsetup_r+0x13c>
    6df0:	2080010c 	andi	r2,r4,4
    6df4:	10001e1e 	bne	r2,zero,6e70 <__swsetup_r+0x104>
    6df8:	80c00417 	ldw	r3,16(r16)
    6dfc:	20800214 	ori	r2,r4,8
    6e00:	8080030d 	sth	r2,12(r16)
    6e04:	183feb1e 	bne	r3,zero,6db4 <__swsetup_r+0x48>
    6e08:	1100a00c 	andi	r4,r2,640
    6e0c:	01408004 	movi	r5,512
    6e10:	217fe826 	beq	r4,r5,6db4 <__swsetup_r+0x48>
    6e14:	800b883a 	mov	r5,r16
    6e18:	8809883a 	mov	r4,r17
    6e1c:	00094280 	call	9428 <__smakebuf_r>
    6e20:	8080030b 	ldhu	r2,12(r16)
    6e24:	80c00417 	ldw	r3,16(r16)
    6e28:	003fe206 	br	6db4 <__swsetup_r+0x48>
    6e2c:	80800517 	ldw	r2,20(r16)
    6e30:	80000215 	stw	zero,8(r16)
    6e34:	0085c83a 	sub	r2,zero,r2
    6e38:	80800615 	stw	r2,24(r16)
    6e3c:	183fe41e 	bne	r3,zero,6dd0 <__swsetup_r+0x64>
    6e40:	80c0030b 	ldhu	r3,12(r16)
    6e44:	0005883a 	mov	r2,zero
    6e48:	1900200c 	andi	r4,r3,128
    6e4c:	203fe126 	beq	r4,zero,6dd4 <__swsetup_r+0x68>
    6e50:	18c01014 	ori	r3,r3,64
    6e54:	80c0030d 	sth	r3,12(r16)
    6e58:	00bfffc4 	movi	r2,-1
    6e5c:	003fdd06 	br	6dd4 <__swsetup_r+0x68>
    6e60:	0008d400 	call	8d40 <__sinit>
    6e64:	003fcd06 	br	6d9c <__swsetup_r+0x30>
    6e68:	0005883a 	mov	r2,zero
    6e6c:	003fd606 	br	6dc8 <__swsetup_r+0x5c>
    6e70:	81400c17 	ldw	r5,48(r16)
    6e74:	28000626 	beq	r5,zero,6e90 <__swsetup_r+0x124>
    6e78:	80801004 	addi	r2,r16,64
    6e7c:	28800326 	beq	r5,r2,6e8c <__swsetup_r+0x120>
    6e80:	8809883a 	mov	r4,r17
    6e84:	0008eb40 	call	8eb4 <_free_r>
    6e88:	8100030b 	ldhu	r4,12(r16)
    6e8c:	80000c15 	stw	zero,48(r16)
    6e90:	80c00417 	ldw	r3,16(r16)
    6e94:	00bff6c4 	movi	r2,-37
    6e98:	1108703a 	and	r4,r2,r4
    6e9c:	80000115 	stw	zero,4(r16)
    6ea0:	80c00015 	stw	r3,0(r16)
    6ea4:	003fd506 	br	6dfc <__swsetup_r+0x90>
    6ea8:	00800244 	movi	r2,9
    6eac:	88800015 	stw	r2,0(r17)
    6eb0:	20801014 	ori	r2,r4,64
    6eb4:	8080030d 	sth	r2,12(r16)
    6eb8:	00bfffc4 	movi	r2,-1
    6ebc:	003fc506 	br	6dd4 <__swsetup_r+0x68>

00006ec0 <quorem>:
    6ec0:	defff704 	addi	sp,sp,-36
    6ec4:	dc800215 	stw	r18,8(sp)
    6ec8:	20800417 	ldw	r2,16(r4)
    6ecc:	2c800417 	ldw	r18,16(r5)
    6ed0:	dfc00815 	stw	ra,32(sp)
    6ed4:	ddc00715 	stw	r23,28(sp)
    6ed8:	dd800615 	stw	r22,24(sp)
    6edc:	dd400515 	stw	r21,20(sp)
    6ee0:	dd000415 	stw	r20,16(sp)
    6ee4:	dcc00315 	stw	r19,12(sp)
    6ee8:	dc400115 	stw	r17,4(sp)
    6eec:	dc000015 	stw	r16,0(sp)
    6ef0:	14807116 	blt	r2,r18,70b8 <quorem+0x1f8>
    6ef4:	94bfffc4 	addi	r18,r18,-1
    6ef8:	94ad883a 	add	r22,r18,r18
    6efc:	b5ad883a 	add	r22,r22,r22
    6f00:	2c400504 	addi	r17,r5,20
    6f04:	8da9883a 	add	r20,r17,r22
    6f08:	25400504 	addi	r21,r4,20
    6f0c:	282f883a 	mov	r23,r5
    6f10:	adad883a 	add	r22,r21,r22
    6f14:	a1400017 	ldw	r5,0(r20)
    6f18:	2021883a 	mov	r16,r4
    6f1c:	b1000017 	ldw	r4,0(r22)
    6f20:	29400044 	addi	r5,r5,1
    6f24:	000fe1c0 	call	fe1c <__udivsi3>
    6f28:	1027883a 	mov	r19,r2
    6f2c:	10002c26 	beq	r2,zero,6fe0 <quorem+0x120>
    6f30:	a813883a 	mov	r9,r21
    6f34:	880b883a 	mov	r5,r17
    6f38:	0009883a 	mov	r4,zero
    6f3c:	000d883a 	mov	r6,zero
    6f40:	2a000017 	ldw	r8,0(r5)
    6f44:	49c00017 	ldw	r7,0(r9)
    6f48:	29400104 	addi	r5,r5,4
    6f4c:	40bfffcc 	andi	r2,r8,65535
    6f50:	14c5383a 	mul	r2,r2,r19
    6f54:	4010d43a 	srli	r8,r8,16
    6f58:	38ffffcc 	andi	r3,r7,65535
    6f5c:	1105883a 	add	r2,r2,r4
    6f60:	1008d43a 	srli	r4,r2,16
    6f64:	44d1383a 	mul	r8,r8,r19
    6f68:	198d883a 	add	r6,r3,r6
    6f6c:	10ffffcc 	andi	r3,r2,65535
    6f70:	30c7c83a 	sub	r3,r6,r3
    6f74:	380ed43a 	srli	r7,r7,16
    6f78:	4105883a 	add	r2,r8,r4
    6f7c:	180dd43a 	srai	r6,r3,16
    6f80:	113fffcc 	andi	r4,r2,65535
    6f84:	390fc83a 	sub	r7,r7,r4
    6f88:	398d883a 	add	r6,r7,r6
    6f8c:	300e943a 	slli	r7,r6,16
    6f90:	18ffffcc 	andi	r3,r3,65535
    6f94:	1008d43a 	srli	r4,r2,16
    6f98:	38ceb03a 	or	r7,r7,r3
    6f9c:	49c00015 	stw	r7,0(r9)
    6fa0:	300dd43a 	srai	r6,r6,16
    6fa4:	4a400104 	addi	r9,r9,4
    6fa8:	a17fe52e 	bgeu	r20,r5,6f40 <quorem+0x80>
    6fac:	b0800017 	ldw	r2,0(r22)
    6fb0:	10000b1e 	bne	r2,zero,6fe0 <quorem+0x120>
    6fb4:	b0bfff04 	addi	r2,r22,-4
    6fb8:	a880082e 	bgeu	r21,r2,6fdc <quorem+0x11c>
    6fbc:	b0ffff17 	ldw	r3,-4(r22)
    6fc0:	18000326 	beq	r3,zero,6fd0 <quorem+0x110>
    6fc4:	00000506 	br	6fdc <quorem+0x11c>
    6fc8:	10c00017 	ldw	r3,0(r2)
    6fcc:	1800031e 	bne	r3,zero,6fdc <quorem+0x11c>
    6fd0:	10bfff04 	addi	r2,r2,-4
    6fd4:	94bfffc4 	addi	r18,r18,-1
    6fd8:	a8bffb36 	bltu	r21,r2,6fc8 <quorem+0x108>
    6fdc:	84800415 	stw	r18,16(r16)
    6fe0:	b80b883a 	mov	r5,r23
    6fe4:	8009883a 	mov	r4,r16
    6fe8:	000a8c40 	call	a8c4 <__mcmp>
    6fec:	10002616 	blt	r2,zero,7088 <quorem+0x1c8>
    6ff0:	9cc00044 	addi	r19,r19,1
    6ff4:	a805883a 	mov	r2,r21
    6ff8:	000b883a 	mov	r5,zero
    6ffc:	11000017 	ldw	r4,0(r2)
    7000:	89800017 	ldw	r6,0(r17)
    7004:	10800104 	addi	r2,r2,4
    7008:	20ffffcc 	andi	r3,r4,65535
    700c:	194b883a 	add	r5,r3,r5
    7010:	30ffffcc 	andi	r3,r6,65535
    7014:	28c7c83a 	sub	r3,r5,r3
    7018:	300cd43a 	srli	r6,r6,16
    701c:	2008d43a 	srli	r4,r4,16
    7020:	180bd43a 	srai	r5,r3,16
    7024:	18ffffcc 	andi	r3,r3,65535
    7028:	2189c83a 	sub	r4,r4,r6
    702c:	2149883a 	add	r4,r4,r5
    7030:	200c943a 	slli	r6,r4,16
    7034:	8c400104 	addi	r17,r17,4
    7038:	200bd43a 	srai	r5,r4,16
    703c:	30c6b03a 	or	r3,r6,r3
    7040:	10ffff15 	stw	r3,-4(r2)
    7044:	a47fed2e 	bgeu	r20,r17,6ffc <quorem+0x13c>
    7048:	9485883a 	add	r2,r18,r18
    704c:	1085883a 	add	r2,r2,r2
    7050:	a887883a 	add	r3,r21,r2
    7054:	18800017 	ldw	r2,0(r3)
    7058:	10000b1e 	bne	r2,zero,7088 <quorem+0x1c8>
    705c:	18bfff04 	addi	r2,r3,-4
    7060:	a880082e 	bgeu	r21,r2,7084 <quorem+0x1c4>
    7064:	18ffff17 	ldw	r3,-4(r3)
    7068:	18000326 	beq	r3,zero,7078 <quorem+0x1b8>
    706c:	00000506 	br	7084 <quorem+0x1c4>
    7070:	10c00017 	ldw	r3,0(r2)
    7074:	1800031e 	bne	r3,zero,7084 <quorem+0x1c4>
    7078:	10bfff04 	addi	r2,r2,-4
    707c:	94bfffc4 	addi	r18,r18,-1
    7080:	a8bffb36 	bltu	r21,r2,7070 <quorem+0x1b0>
    7084:	84800415 	stw	r18,16(r16)
    7088:	9805883a 	mov	r2,r19
    708c:	dfc00817 	ldw	ra,32(sp)
    7090:	ddc00717 	ldw	r23,28(sp)
    7094:	dd800617 	ldw	r22,24(sp)
    7098:	dd400517 	ldw	r21,20(sp)
    709c:	dd000417 	ldw	r20,16(sp)
    70a0:	dcc00317 	ldw	r19,12(sp)
    70a4:	dc800217 	ldw	r18,8(sp)
    70a8:	dc400117 	ldw	r17,4(sp)
    70ac:	dc000017 	ldw	r16,0(sp)
    70b0:	dec00904 	addi	sp,sp,36
    70b4:	f800283a 	ret
    70b8:	0005883a 	mov	r2,zero
    70bc:	003ff306 	br	708c <quorem+0x1cc>

000070c0 <_dtoa_r>:
    70c0:	20801017 	ldw	r2,64(r4)
    70c4:	deffde04 	addi	sp,sp,-136
    70c8:	df002015 	stw	fp,128(sp)
    70cc:	dcc01b15 	stw	r19,108(sp)
    70d0:	dc801a15 	stw	r18,104(sp)
    70d4:	dc401915 	stw	r17,100(sp)
    70d8:	dc001815 	stw	r16,96(sp)
    70dc:	dfc02115 	stw	ra,132(sp)
    70e0:	ddc01f15 	stw	r23,124(sp)
    70e4:	dd801e15 	stw	r22,120(sp)
    70e8:	dd401d15 	stw	r21,116(sp)
    70ec:	dd001c15 	stw	r20,112(sp)
    70f0:	d9c00315 	stw	r7,12(sp)
    70f4:	2039883a 	mov	fp,r4
    70f8:	3023883a 	mov	r17,r6
    70fc:	2825883a 	mov	r18,r5
    7100:	dc002417 	ldw	r16,144(sp)
    7104:	3027883a 	mov	r19,r6
    7108:	10000826 	beq	r2,zero,712c <_dtoa_r+0x6c>
    710c:	21801117 	ldw	r6,68(r4)
    7110:	00c00044 	movi	r3,1
    7114:	100b883a 	mov	r5,r2
    7118:	1986983a 	sll	r3,r3,r6
    711c:	11800115 	stw	r6,4(r2)
    7120:	10c00215 	stw	r3,8(r2)
    7124:	000a0a40 	call	a0a4 <_Bfree>
    7128:	e0001015 	stw	zero,64(fp)
    712c:	88002e16 	blt	r17,zero,71e8 <_dtoa_r+0x128>
    7130:	80000015 	stw	zero,0(r16)
    7134:	889ffc2c 	andhi	r2,r17,32752
    7138:	00dffc34 	movhi	r3,32752
    713c:	10c01c26 	beq	r2,r3,71b0 <_dtoa_r+0xf0>
    7140:	000d883a 	mov	r6,zero
    7144:	000f883a 	mov	r7,zero
    7148:	9009883a 	mov	r4,r18
    714c:	980b883a 	mov	r5,r19
    7150:	001106c0 	call	1106c <__eqdf2>
    7154:	10002b1e 	bne	r2,zero,7204 <_dtoa_r+0x144>
    7158:	d9c02317 	ldw	r7,140(sp)
    715c:	00800044 	movi	r2,1
    7160:	38800015 	stw	r2,0(r7)
    7164:	d8802517 	ldw	r2,148(sp)
    7168:	10019e26 	beq	r2,zero,77e4 <_dtoa_r+0x724>
    716c:	d8c02517 	ldw	r3,148(sp)
    7170:	008000b4 	movhi	r2,2
    7174:	10bd1144 	addi	r2,r2,-3003
    7178:	18800015 	stw	r2,0(r3)
    717c:	10bfffc4 	addi	r2,r2,-1
    7180:	dfc02117 	ldw	ra,132(sp)
    7184:	df002017 	ldw	fp,128(sp)
    7188:	ddc01f17 	ldw	r23,124(sp)
    718c:	dd801e17 	ldw	r22,120(sp)
    7190:	dd401d17 	ldw	r21,116(sp)
    7194:	dd001c17 	ldw	r20,112(sp)
    7198:	dcc01b17 	ldw	r19,108(sp)
    719c:	dc801a17 	ldw	r18,104(sp)
    71a0:	dc401917 	ldw	r17,100(sp)
    71a4:	dc001817 	ldw	r16,96(sp)
    71a8:	dec02204 	addi	sp,sp,136
    71ac:	f800283a 	ret
    71b0:	d8c02317 	ldw	r3,140(sp)
    71b4:	0089c3c4 	movi	r2,9999
    71b8:	18800015 	stw	r2,0(r3)
    71bc:	90017726 	beq	r18,zero,779c <_dtoa_r+0x6dc>
    71c0:	008000b4 	movhi	r2,2
    71c4:	10bd2504 	addi	r2,r2,-2924
    71c8:	d9002517 	ldw	r4,148(sp)
    71cc:	203fec26 	beq	r4,zero,7180 <_dtoa_r+0xc0>
    71d0:	10c000c7 	ldb	r3,3(r2)
    71d4:	1801781e 	bne	r3,zero,77b8 <_dtoa_r+0x6f8>
    71d8:	10c000c4 	addi	r3,r2,3
    71dc:	d9802517 	ldw	r6,148(sp)
    71e0:	30c00015 	stw	r3,0(r6)
    71e4:	003fe606 	br	7180 <_dtoa_r+0xc0>
    71e8:	04e00034 	movhi	r19,32768
    71ec:	9cffffc4 	addi	r19,r19,-1
    71f0:	00800044 	movi	r2,1
    71f4:	8ce6703a 	and	r19,r17,r19
    71f8:	80800015 	stw	r2,0(r16)
    71fc:	9823883a 	mov	r17,r19
    7200:	003fcc06 	br	7134 <_dtoa_r+0x74>
    7204:	d8800204 	addi	r2,sp,8
    7208:	d8800015 	stw	r2,0(sp)
    720c:	d9c00104 	addi	r7,sp,4
    7210:	900b883a 	mov	r5,r18
    7214:	980d883a 	mov	r6,r19
    7218:	e009883a 	mov	r4,fp
    721c:	8820d53a 	srli	r16,r17,20
    7220:	000ac900 	call	ac90 <__d2b>
    7224:	d8800915 	stw	r2,36(sp)
    7228:	8001651e 	bne	r16,zero,77c0 <_dtoa_r+0x700>
    722c:	dd800217 	ldw	r22,8(sp)
    7230:	dc000117 	ldw	r16,4(sp)
    7234:	00800804 	movi	r2,32
    7238:	b421883a 	add	r16,r22,r16
    723c:	80c10c84 	addi	r3,r16,1074
    7240:	10c2d10e 	bge	r2,r3,7d88 <_dtoa_r+0xcc8>
    7244:	00801004 	movi	r2,64
    7248:	81010484 	addi	r4,r16,1042
    724c:	10c7c83a 	sub	r3,r2,r3
    7250:	9108d83a 	srl	r4,r18,r4
    7254:	88e2983a 	sll	r17,r17,r3
    7258:	2448b03a 	or	r4,r4,r17
    725c:	00124340 	call	12434 <__floatunsidf>
    7260:	017f8434 	movhi	r5,65040
    7264:	01800044 	movi	r6,1
    7268:	1009883a 	mov	r4,r2
    726c:	194b883a 	add	r5,r3,r5
    7270:	843fffc4 	addi	r16,r16,-1
    7274:	d9801115 	stw	r6,68(sp)
    7278:	000d883a 	mov	r6,zero
    727c:	01cffe34 	movhi	r7,16376
    7280:	00119dc0 	call	119dc <__subdf3>
    7284:	0198dbf4 	movhi	r6,25455
    7288:	01cff4f4 	movhi	r7,16339
    728c:	3190d844 	addi	r6,r6,17249
    7290:	39e1e9c4 	addi	r7,r7,-30809
    7294:	1009883a 	mov	r4,r2
    7298:	180b883a 	mov	r5,r3
    729c:	00112c40 	call	112c4 <__muldf3>
    72a0:	01a2d874 	movhi	r6,35681
    72a4:	01cff1f4 	movhi	r7,16327
    72a8:	31b22cc4 	addi	r6,r6,-14157
    72ac:	39e28a04 	addi	r7,r7,-30168
    72b0:	180b883a 	mov	r5,r3
    72b4:	1009883a 	mov	r4,r2
    72b8:	000fed80 	call	fed8 <__adddf3>
    72bc:	8009883a 	mov	r4,r16
    72c0:	1029883a 	mov	r20,r2
    72c4:	1823883a 	mov	r17,r3
    72c8:	00123580 	call	12358 <__floatsidf>
    72cc:	019427f4 	movhi	r6,20639
    72d0:	01cff4f4 	movhi	r7,16339
    72d4:	319e7ec4 	addi	r6,r6,31227
    72d8:	39d104c4 	addi	r7,r7,17427
    72dc:	1009883a 	mov	r4,r2
    72e0:	180b883a 	mov	r5,r3
    72e4:	00112c40 	call	112c4 <__muldf3>
    72e8:	100d883a 	mov	r6,r2
    72ec:	180f883a 	mov	r7,r3
    72f0:	a009883a 	mov	r4,r20
    72f4:	880b883a 	mov	r5,r17
    72f8:	000fed80 	call	fed8 <__adddf3>
    72fc:	1009883a 	mov	r4,r2
    7300:	180b883a 	mov	r5,r3
    7304:	1029883a 	mov	r20,r2
    7308:	1823883a 	mov	r17,r3
    730c:	00122d80 	call	122d8 <__fixdfsi>
    7310:	000d883a 	mov	r6,zero
    7314:	000f883a 	mov	r7,zero
    7318:	a009883a 	mov	r4,r20
    731c:	880b883a 	mov	r5,r17
    7320:	d8800515 	stw	r2,20(sp)
    7324:	00111d00 	call	111d0 <__ledf2>
    7328:	10028716 	blt	r2,zero,7d48 <_dtoa_r+0xc88>
    732c:	d8c00517 	ldw	r3,20(sp)
    7330:	00800584 	movi	r2,22
    7334:	10c27536 	bltu	r2,r3,7d0c <_dtoa_r+0xc4c>
    7338:	180490fa 	slli	r2,r3,3
    733c:	00c000b4 	movhi	r3,2
    7340:	18fd4004 	addi	r3,r3,-2816
    7344:	1885883a 	add	r2,r3,r2
    7348:	11000017 	ldw	r4,0(r2)
    734c:	11400117 	ldw	r5,4(r2)
    7350:	900d883a 	mov	r6,r18
    7354:	980f883a 	mov	r7,r19
    7358:	00110f40 	call	110f4 <__gedf2>
    735c:	00828d0e 	bge	zero,r2,7d94 <_dtoa_r+0xcd4>
    7360:	d9000517 	ldw	r4,20(sp)
    7364:	d8000e15 	stw	zero,56(sp)
    7368:	213fffc4 	addi	r4,r4,-1
    736c:	d9000515 	stw	r4,20(sp)
    7370:	b42dc83a 	sub	r22,r22,r16
    7374:	b5bfffc4 	addi	r22,r22,-1
    7378:	b0026f16 	blt	r22,zero,7d38 <_dtoa_r+0xc78>
    737c:	d8000815 	stw	zero,32(sp)
    7380:	d9c00517 	ldw	r7,20(sp)
    7384:	38026416 	blt	r7,zero,7d18 <_dtoa_r+0xc58>
    7388:	b1ed883a 	add	r22,r22,r7
    738c:	d9c00d15 	stw	r7,52(sp)
    7390:	d8000a15 	stw	zero,40(sp)
    7394:	d9800317 	ldw	r6,12(sp)
    7398:	00800244 	movi	r2,9
    739c:	11811436 	bltu	r2,r6,77f0 <_dtoa_r+0x730>
    73a0:	00800144 	movi	r2,5
    73a4:	1184e10e 	bge	r2,r6,872c <_dtoa_r+0x166c>
    73a8:	31bfff04 	addi	r6,r6,-4
    73ac:	d9800315 	stw	r6,12(sp)
    73b0:	0023883a 	mov	r17,zero
    73b4:	d9800317 	ldw	r6,12(sp)
    73b8:	008000c4 	movi	r2,3
    73bc:	30836726 	beq	r6,r2,815c <_dtoa_r+0x109c>
    73c0:	1183410e 	bge	r2,r6,80c8 <_dtoa_r+0x1008>
    73c4:	d9c00317 	ldw	r7,12(sp)
    73c8:	00800104 	movi	r2,4
    73cc:	38827c26 	beq	r7,r2,7dc0 <_dtoa_r+0xd00>
    73d0:	00800144 	movi	r2,5
    73d4:	3884c41e 	bne	r7,r2,86e8 <_dtoa_r+0x1628>
    73d8:	00800044 	movi	r2,1
    73dc:	d8800b15 	stw	r2,44(sp)
    73e0:	d8c00517 	ldw	r3,20(sp)
    73e4:	d9002217 	ldw	r4,136(sp)
    73e8:	1907883a 	add	r3,r3,r4
    73ec:	19800044 	addi	r6,r3,1
    73f0:	d8c00c15 	stw	r3,48(sp)
    73f4:	d9800615 	stw	r6,24(sp)
    73f8:	0183a40e 	bge	zero,r6,828c <_dtoa_r+0x11cc>
    73fc:	d9800617 	ldw	r6,24(sp)
    7400:	3021883a 	mov	r16,r6
    7404:	e0001115 	stw	zero,68(fp)
    7408:	008005c4 	movi	r2,23
    740c:	1184c92e 	bgeu	r2,r6,8734 <_dtoa_r+0x1674>
    7410:	00c00044 	movi	r3,1
    7414:	00800104 	movi	r2,4
    7418:	1085883a 	add	r2,r2,r2
    741c:	11000504 	addi	r4,r2,20
    7420:	180b883a 	mov	r5,r3
    7424:	18c00044 	addi	r3,r3,1
    7428:	313ffb2e 	bgeu	r6,r4,7418 <_dtoa_r+0x358>
    742c:	e1401115 	stw	r5,68(fp)
    7430:	e009883a 	mov	r4,fp
    7434:	0009ffc0 	call	9ffc <_Balloc>
    7438:	d8800715 	stw	r2,28(sp)
    743c:	e0801015 	stw	r2,64(fp)
    7440:	00800384 	movi	r2,14
    7444:	1400f736 	bltu	r2,r16,7824 <_dtoa_r+0x764>
    7448:	8800f626 	beq	r17,zero,7824 <_dtoa_r+0x764>
    744c:	d9c00517 	ldw	r7,20(sp)
    7450:	01c39a0e 	bge	zero,r7,82bc <_dtoa_r+0x11fc>
    7454:	388003cc 	andi	r2,r7,15
    7458:	100490fa 	slli	r2,r2,3
    745c:	382bd13a 	srai	r21,r7,4
    7460:	00c000b4 	movhi	r3,2
    7464:	18fd4004 	addi	r3,r3,-2816
    7468:	1885883a 	add	r2,r3,r2
    746c:	a8c0040c 	andi	r3,r21,16
    7470:	12400017 	ldw	r9,0(r2)
    7474:	12000117 	ldw	r8,4(r2)
    7478:	18037926 	beq	r3,zero,8260 <_dtoa_r+0x11a0>
    747c:	008000b4 	movhi	r2,2
    7480:	10bd3604 	addi	r2,r2,-2856
    7484:	11800817 	ldw	r6,32(r2)
    7488:	11c00917 	ldw	r7,36(r2)
    748c:	9009883a 	mov	r4,r18
    7490:	980b883a 	mov	r5,r19
    7494:	da001715 	stw	r8,92(sp)
    7498:	da401615 	stw	r9,88(sp)
    749c:	00107840 	call	10784 <__divdf3>
    74a0:	da001717 	ldw	r8,92(sp)
    74a4:	da401617 	ldw	r9,88(sp)
    74a8:	ad4003cc 	andi	r21,r21,15
    74ac:	040000c4 	movi	r16,3
    74b0:	1023883a 	mov	r17,r2
    74b4:	1829883a 	mov	r20,r3
    74b8:	a8001126 	beq	r21,zero,7500 <_dtoa_r+0x440>
    74bc:	05c000b4 	movhi	r23,2
    74c0:	bdfd3604 	addi	r23,r23,-2856
    74c4:	4805883a 	mov	r2,r9
    74c8:	4007883a 	mov	r3,r8
    74cc:	a980004c 	andi	r6,r21,1
    74d0:	1009883a 	mov	r4,r2
    74d4:	a82bd07a 	srai	r21,r21,1
    74d8:	180b883a 	mov	r5,r3
    74dc:	30000426 	beq	r6,zero,74f0 <_dtoa_r+0x430>
    74e0:	b9800017 	ldw	r6,0(r23)
    74e4:	b9c00117 	ldw	r7,4(r23)
    74e8:	84000044 	addi	r16,r16,1
    74ec:	00112c40 	call	112c4 <__muldf3>
    74f0:	bdc00204 	addi	r23,r23,8
    74f4:	a83ff51e 	bne	r21,zero,74cc <_dtoa_r+0x40c>
    74f8:	1013883a 	mov	r9,r2
    74fc:	1811883a 	mov	r8,r3
    7500:	480d883a 	mov	r6,r9
    7504:	400f883a 	mov	r7,r8
    7508:	8809883a 	mov	r4,r17
    750c:	a00b883a 	mov	r5,r20
    7510:	00107840 	call	10784 <__divdf3>
    7514:	d8800f15 	stw	r2,60(sp)
    7518:	d8c01015 	stw	r3,64(sp)
    751c:	d8c00e17 	ldw	r3,56(sp)
    7520:	18000626 	beq	r3,zero,753c <_dtoa_r+0x47c>
    7524:	d9000f17 	ldw	r4,60(sp)
    7528:	d9401017 	ldw	r5,64(sp)
    752c:	000d883a 	mov	r6,zero
    7530:	01cffc34 	movhi	r7,16368
    7534:	00111d00 	call	111d0 <__ledf2>
    7538:	10040b16 	blt	r2,zero,8568 <_dtoa_r+0x14a8>
    753c:	8009883a 	mov	r4,r16
    7540:	00123580 	call	12358 <__floatsidf>
    7544:	d9800f17 	ldw	r6,60(sp)
    7548:	d9c01017 	ldw	r7,64(sp)
    754c:	1009883a 	mov	r4,r2
    7550:	180b883a 	mov	r5,r3
    7554:	00112c40 	call	112c4 <__muldf3>
    7558:	000d883a 	mov	r6,zero
    755c:	01d00734 	movhi	r7,16412
    7560:	1009883a 	mov	r4,r2
    7564:	180b883a 	mov	r5,r3
    7568:	000fed80 	call	fed8 <__adddf3>
    756c:	1021883a 	mov	r16,r2
    7570:	d8800617 	ldw	r2,24(sp)
    7574:	047f3034 	movhi	r17,64704
    7578:	1c63883a 	add	r17,r3,r17
    757c:	10031826 	beq	r2,zero,81e0 <_dtoa_r+0x1120>
    7580:	d8c00517 	ldw	r3,20(sp)
    7584:	db000617 	ldw	r12,24(sp)
    7588:	d8c01315 	stw	r3,76(sp)
    758c:	d9000b17 	ldw	r4,44(sp)
    7590:	20038f26 	beq	r4,zero,83d0 <_dtoa_r+0x1310>
    7594:	60bfffc4 	addi	r2,r12,-1
    7598:	100490fa 	slli	r2,r2,3
    759c:	00c000b4 	movhi	r3,2
    75a0:	18fd4004 	addi	r3,r3,-2816
    75a4:	1885883a 	add	r2,r3,r2
    75a8:	11800017 	ldw	r6,0(r2)
    75ac:	11c00117 	ldw	r7,4(r2)
    75b0:	d8800717 	ldw	r2,28(sp)
    75b4:	0009883a 	mov	r4,zero
    75b8:	014ff834 	movhi	r5,16352
    75bc:	db001615 	stw	r12,88(sp)
    75c0:	15c00044 	addi	r23,r2,1
    75c4:	00107840 	call	10784 <__divdf3>
    75c8:	800d883a 	mov	r6,r16
    75cc:	880f883a 	mov	r7,r17
    75d0:	1009883a 	mov	r4,r2
    75d4:	180b883a 	mov	r5,r3
    75d8:	00119dc0 	call	119dc <__subdf3>
    75dc:	d9401017 	ldw	r5,64(sp)
    75e0:	d9000f17 	ldw	r4,60(sp)
    75e4:	102b883a 	mov	r21,r2
    75e8:	d8c01215 	stw	r3,72(sp)
    75ec:	00122d80 	call	122d8 <__fixdfsi>
    75f0:	1009883a 	mov	r4,r2
    75f4:	1029883a 	mov	r20,r2
    75f8:	00123580 	call	12358 <__floatsidf>
    75fc:	d9000f17 	ldw	r4,60(sp)
    7600:	d9401017 	ldw	r5,64(sp)
    7604:	100d883a 	mov	r6,r2
    7608:	180f883a 	mov	r7,r3
    760c:	00119dc0 	call	119dc <__subdf3>
    7610:	1823883a 	mov	r17,r3
    7614:	d8c00717 	ldw	r3,28(sp)
    7618:	d9401217 	ldw	r5,72(sp)
    761c:	a2000c04 	addi	r8,r20,48
    7620:	1021883a 	mov	r16,r2
    7624:	1a000005 	stb	r8,0(r3)
    7628:	800d883a 	mov	r6,r16
    762c:	880f883a 	mov	r7,r17
    7630:	a809883a 	mov	r4,r21
    7634:	4029883a 	mov	r20,r8
    7638:	00110f40 	call	110f4 <__gedf2>
    763c:	00841d16 	blt	zero,r2,86b4 <_dtoa_r+0x15f4>
    7640:	800d883a 	mov	r6,r16
    7644:	880f883a 	mov	r7,r17
    7648:	0009883a 	mov	r4,zero
    764c:	014ffc34 	movhi	r5,16368
    7650:	00119dc0 	call	119dc <__subdf3>
    7654:	d9401217 	ldw	r5,72(sp)
    7658:	100d883a 	mov	r6,r2
    765c:	180f883a 	mov	r7,r3
    7660:	a809883a 	mov	r4,r21
    7664:	00110f40 	call	110f4 <__gedf2>
    7668:	db001617 	ldw	r12,88(sp)
    766c:	00840e16 	blt	zero,r2,86a8 <_dtoa_r+0x15e8>
    7670:	00800044 	movi	r2,1
    7674:	13006b0e 	bge	r2,r12,7824 <_dtoa_r+0x764>
    7678:	d9000717 	ldw	r4,28(sp)
    767c:	dd800f15 	stw	r22,60(sp)
    7680:	dcc01015 	stw	r19,64(sp)
    7684:	2319883a 	add	r12,r4,r12
    7688:	dcc01217 	ldw	r19,72(sp)
    768c:	602d883a 	mov	r22,r12
    7690:	dc801215 	stw	r18,72(sp)
    7694:	b825883a 	mov	r18,r23
    7698:	00000906 	br	76c0 <_dtoa_r+0x600>
    769c:	00119dc0 	call	119dc <__subdf3>
    76a0:	a80d883a 	mov	r6,r21
    76a4:	980f883a 	mov	r7,r19
    76a8:	1009883a 	mov	r4,r2
    76ac:	180b883a 	mov	r5,r3
    76b0:	00111d00 	call	111d0 <__ledf2>
    76b4:	1003e816 	blt	r2,zero,8658 <_dtoa_r+0x1598>
    76b8:	b825883a 	mov	r18,r23
    76bc:	bd83e926 	beq	r23,r22,8664 <_dtoa_r+0x15a4>
    76c0:	a809883a 	mov	r4,r21
    76c4:	980b883a 	mov	r5,r19
    76c8:	000d883a 	mov	r6,zero
    76cc:	01d00934 	movhi	r7,16420
    76d0:	00112c40 	call	112c4 <__muldf3>
    76d4:	000d883a 	mov	r6,zero
    76d8:	01d00934 	movhi	r7,16420
    76dc:	8009883a 	mov	r4,r16
    76e0:	880b883a 	mov	r5,r17
    76e4:	102b883a 	mov	r21,r2
    76e8:	1827883a 	mov	r19,r3
    76ec:	00112c40 	call	112c4 <__muldf3>
    76f0:	180b883a 	mov	r5,r3
    76f4:	1009883a 	mov	r4,r2
    76f8:	1821883a 	mov	r16,r3
    76fc:	1023883a 	mov	r17,r2
    7700:	00122d80 	call	122d8 <__fixdfsi>
    7704:	1009883a 	mov	r4,r2
    7708:	1029883a 	mov	r20,r2
    770c:	00123580 	call	12358 <__floatsidf>
    7710:	8809883a 	mov	r4,r17
    7714:	800b883a 	mov	r5,r16
    7718:	100d883a 	mov	r6,r2
    771c:	180f883a 	mov	r7,r3
    7720:	00119dc0 	call	119dc <__subdf3>
    7724:	a5000c04 	addi	r20,r20,48
    7728:	a80d883a 	mov	r6,r21
    772c:	980f883a 	mov	r7,r19
    7730:	1009883a 	mov	r4,r2
    7734:	180b883a 	mov	r5,r3
    7738:	95000005 	stb	r20,0(r18)
    773c:	1021883a 	mov	r16,r2
    7740:	1823883a 	mov	r17,r3
    7744:	00111d00 	call	111d0 <__ledf2>
    7748:	bdc00044 	addi	r23,r23,1
    774c:	800d883a 	mov	r6,r16
    7750:	880f883a 	mov	r7,r17
    7754:	0009883a 	mov	r4,zero
    7758:	014ffc34 	movhi	r5,16368
    775c:	103fcf0e 	bge	r2,zero,769c <_dtoa_r+0x5dc>
    7760:	d8c01317 	ldw	r3,76(sp)
    7764:	d8c00515 	stw	r3,20(sp)
    7768:	d9400917 	ldw	r5,36(sp)
    776c:	e009883a 	mov	r4,fp
    7770:	000a0a40 	call	a0a4 <_Bfree>
    7774:	d9000517 	ldw	r4,20(sp)
    7778:	d9802317 	ldw	r6,140(sp)
    777c:	d9c02517 	ldw	r7,148(sp)
    7780:	b8000005 	stb	zero,0(r23)
    7784:	20800044 	addi	r2,r4,1
    7788:	30800015 	stw	r2,0(r6)
    778c:	3802aa26 	beq	r7,zero,8238 <_dtoa_r+0x1178>
    7790:	3dc00015 	stw	r23,0(r7)
    7794:	d8800717 	ldw	r2,28(sp)
    7798:	003e7906 	br	7180 <_dtoa_r+0xc0>
    779c:	00800434 	movhi	r2,16
    77a0:	10bfffc4 	addi	r2,r2,-1
    77a4:	88a2703a 	and	r17,r17,r2
    77a8:	883e851e 	bne	r17,zero,71c0 <_dtoa_r+0x100>
    77ac:	008000b4 	movhi	r2,2
    77b0:	10bd2204 	addi	r2,r2,-2936
    77b4:	003e8406 	br	71c8 <_dtoa_r+0x108>
    77b8:	10c00204 	addi	r3,r2,8
    77bc:	003e8706 	br	71dc <_dtoa_r+0x11c>
    77c0:	01400434 	movhi	r5,16
    77c4:	297fffc4 	addi	r5,r5,-1
    77c8:	994a703a 	and	r5,r19,r5
    77cc:	9009883a 	mov	r4,r18
    77d0:	843f0044 	addi	r16,r16,-1023
    77d4:	294ffc34 	orhi	r5,r5,16368
    77d8:	dd800217 	ldw	r22,8(sp)
    77dc:	d8001115 	stw	zero,68(sp)
    77e0:	003ea506 	br	7278 <_dtoa_r+0x1b8>
    77e4:	008000b4 	movhi	r2,2
    77e8:	10bd1104 	addi	r2,r2,-3004
    77ec:	003e6406 	br	7180 <_dtoa_r+0xc0>
    77f0:	e0001115 	stw	zero,68(fp)
    77f4:	000b883a 	mov	r5,zero
    77f8:	e009883a 	mov	r4,fp
    77fc:	0009ffc0 	call	9ffc <_Balloc>
    7800:	01bfffc4 	movi	r6,-1
    7804:	01c00044 	movi	r7,1
    7808:	d8800715 	stw	r2,28(sp)
    780c:	d9800c15 	stw	r6,48(sp)
    7810:	e0801015 	stw	r2,64(fp)
    7814:	d8000315 	stw	zero,12(sp)
    7818:	d9c00b15 	stw	r7,44(sp)
    781c:	d9800615 	stw	r6,24(sp)
    7820:	d8002215 	stw	zero,136(sp)
    7824:	d8800117 	ldw	r2,4(sp)
    7828:	10008916 	blt	r2,zero,7a50 <_dtoa_r+0x990>
    782c:	d9000517 	ldw	r4,20(sp)
    7830:	00c00384 	movi	r3,14
    7834:	19008616 	blt	r3,r4,7a50 <_dtoa_r+0x990>
    7838:	200490fa 	slli	r2,r4,3
    783c:	00c000b4 	movhi	r3,2
    7840:	d9802217 	ldw	r6,136(sp)
    7844:	18fd4004 	addi	r3,r3,-2816
    7848:	1885883a 	add	r2,r3,r2
    784c:	14000017 	ldw	r16,0(r2)
    7850:	14400117 	ldw	r17,4(r2)
    7854:	30016316 	blt	r6,zero,7de4 <_dtoa_r+0xd24>
    7858:	800d883a 	mov	r6,r16
    785c:	880f883a 	mov	r7,r17
    7860:	9009883a 	mov	r4,r18
    7864:	980b883a 	mov	r5,r19
    7868:	00107840 	call	10784 <__divdf3>
    786c:	180b883a 	mov	r5,r3
    7870:	1009883a 	mov	r4,r2
    7874:	00122d80 	call	122d8 <__fixdfsi>
    7878:	1009883a 	mov	r4,r2
    787c:	102b883a 	mov	r21,r2
    7880:	00123580 	call	12358 <__floatsidf>
    7884:	800d883a 	mov	r6,r16
    7888:	880f883a 	mov	r7,r17
    788c:	1009883a 	mov	r4,r2
    7890:	180b883a 	mov	r5,r3
    7894:	00112c40 	call	112c4 <__muldf3>
    7898:	100d883a 	mov	r6,r2
    789c:	180f883a 	mov	r7,r3
    78a0:	9009883a 	mov	r4,r18
    78a4:	980b883a 	mov	r5,r19
    78a8:	00119dc0 	call	119dc <__subdf3>
    78ac:	d9c00717 	ldw	r7,28(sp)
    78b0:	1009883a 	mov	r4,r2
    78b4:	a8800c04 	addi	r2,r21,48
    78b8:	38800005 	stb	r2,0(r7)
    78bc:	3dc00044 	addi	r23,r7,1
    78c0:	d9c00617 	ldw	r7,24(sp)
    78c4:	01800044 	movi	r6,1
    78c8:	180b883a 	mov	r5,r3
    78cc:	2005883a 	mov	r2,r4
    78d0:	39803826 	beq	r7,r6,79b4 <_dtoa_r+0x8f4>
    78d4:	000d883a 	mov	r6,zero
    78d8:	01d00934 	movhi	r7,16420
    78dc:	00112c40 	call	112c4 <__muldf3>
    78e0:	000d883a 	mov	r6,zero
    78e4:	000f883a 	mov	r7,zero
    78e8:	1009883a 	mov	r4,r2
    78ec:	180b883a 	mov	r5,r3
    78f0:	1025883a 	mov	r18,r2
    78f4:	1827883a 	mov	r19,r3
    78f8:	001106c0 	call	1106c <__eqdf2>
    78fc:	103f9a26 	beq	r2,zero,7768 <_dtoa_r+0x6a8>
    7900:	d9c00617 	ldw	r7,24(sp)
    7904:	d8c00717 	ldw	r3,28(sp)
    7908:	b829883a 	mov	r20,r23
    790c:	38bfffc4 	addi	r2,r7,-1
    7910:	18ad883a 	add	r22,r3,r2
    7914:	00000a06 	br	7940 <_dtoa_r+0x880>
    7918:	00112c40 	call	112c4 <__muldf3>
    791c:	000d883a 	mov	r6,zero
    7920:	000f883a 	mov	r7,zero
    7924:	1009883a 	mov	r4,r2
    7928:	180b883a 	mov	r5,r3
    792c:	1025883a 	mov	r18,r2
    7930:	1827883a 	mov	r19,r3
    7934:	b829883a 	mov	r20,r23
    7938:	001106c0 	call	1106c <__eqdf2>
    793c:	103f8a26 	beq	r2,zero,7768 <_dtoa_r+0x6a8>
    7940:	800d883a 	mov	r6,r16
    7944:	880f883a 	mov	r7,r17
    7948:	9009883a 	mov	r4,r18
    794c:	980b883a 	mov	r5,r19
    7950:	00107840 	call	10784 <__divdf3>
    7954:	180b883a 	mov	r5,r3
    7958:	1009883a 	mov	r4,r2
    795c:	00122d80 	call	122d8 <__fixdfsi>
    7960:	1009883a 	mov	r4,r2
    7964:	102b883a 	mov	r21,r2
    7968:	00123580 	call	12358 <__floatsidf>
    796c:	800d883a 	mov	r6,r16
    7970:	880f883a 	mov	r7,r17
    7974:	1009883a 	mov	r4,r2
    7978:	180b883a 	mov	r5,r3
    797c:	00112c40 	call	112c4 <__muldf3>
    7980:	100d883a 	mov	r6,r2
    7984:	180f883a 	mov	r7,r3
    7988:	9009883a 	mov	r4,r18
    798c:	980b883a 	mov	r5,r19
    7990:	00119dc0 	call	119dc <__subdf3>
    7994:	aa000c04 	addi	r8,r21,48
    7998:	a2000005 	stb	r8,0(r20)
    799c:	000d883a 	mov	r6,zero
    79a0:	01d00934 	movhi	r7,16420
    79a4:	1009883a 	mov	r4,r2
    79a8:	180b883a 	mov	r5,r3
    79ac:	a5c00044 	addi	r23,r20,1
    79b0:	b53fd91e 	bne	r22,r20,7918 <_dtoa_r+0x858>
    79b4:	100d883a 	mov	r6,r2
    79b8:	180f883a 	mov	r7,r3
    79bc:	1009883a 	mov	r4,r2
    79c0:	180b883a 	mov	r5,r3
    79c4:	000fed80 	call	fed8 <__adddf3>
    79c8:	100d883a 	mov	r6,r2
    79cc:	180f883a 	mov	r7,r3
    79d0:	8009883a 	mov	r4,r16
    79d4:	880b883a 	mov	r5,r17
    79d8:	1027883a 	mov	r19,r2
    79dc:	1825883a 	mov	r18,r3
    79e0:	00111d00 	call	111d0 <__ledf2>
    79e4:	10000816 	blt	r2,zero,7a08 <_dtoa_r+0x948>
    79e8:	980d883a 	mov	r6,r19
    79ec:	900f883a 	mov	r7,r18
    79f0:	8009883a 	mov	r4,r16
    79f4:	880b883a 	mov	r5,r17
    79f8:	001106c0 	call	1106c <__eqdf2>
    79fc:	103f5a1e 	bne	r2,zero,7768 <_dtoa_r+0x6a8>
    7a00:	ad40004c 	andi	r21,r21,1
    7a04:	a83f5826 	beq	r21,zero,7768 <_dtoa_r+0x6a8>
    7a08:	bd3fffc3 	ldbu	r20,-1(r23)
    7a0c:	b8bfffc4 	addi	r2,r23,-1
    7a10:	1007883a 	mov	r3,r2
    7a14:	01400e44 	movi	r5,57
    7a18:	d9800717 	ldw	r6,28(sp)
    7a1c:	00000506 	br	7a34 <_dtoa_r+0x974>
    7a20:	18ffffc4 	addi	r3,r3,-1
    7a24:	11824726 	beq	r2,r6,8344 <_dtoa_r+0x1284>
    7a28:	1d000003 	ldbu	r20,0(r3)
    7a2c:	102f883a 	mov	r23,r2
    7a30:	10bfffc4 	addi	r2,r2,-1
    7a34:	a1003fcc 	andi	r4,r20,255
    7a38:	2100201c 	xori	r4,r4,128
    7a3c:	213fe004 	addi	r4,r4,-128
    7a40:	217ff726 	beq	r4,r5,7a20 <_dtoa_r+0x960>
    7a44:	a2000044 	addi	r8,r20,1
    7a48:	12000005 	stb	r8,0(r2)
    7a4c:	003f4606 	br	7768 <_dtoa_r+0x6a8>
    7a50:	d9000b17 	ldw	r4,44(sp)
    7a54:	2000c826 	beq	r4,zero,7d78 <_dtoa_r+0xcb8>
    7a58:	d9800317 	ldw	r6,12(sp)
    7a5c:	00c00044 	movi	r3,1
    7a60:	1980f90e 	bge	r3,r6,7e48 <_dtoa_r+0xd88>
    7a64:	d8800617 	ldw	r2,24(sp)
    7a68:	d8c00a17 	ldw	r3,40(sp)
    7a6c:	157fffc4 	addi	r21,r2,-1
    7a70:	1d41f316 	blt	r3,r21,8240 <_dtoa_r+0x1180>
    7a74:	1d6bc83a 	sub	r21,r3,r21
    7a78:	d9c00617 	ldw	r7,24(sp)
    7a7c:	3802aa16 	blt	r7,zero,8528 <_dtoa_r+0x1468>
    7a80:	dd000817 	ldw	r20,32(sp)
    7a84:	d8800617 	ldw	r2,24(sp)
    7a88:	d8c00817 	ldw	r3,32(sp)
    7a8c:	01400044 	movi	r5,1
    7a90:	e009883a 	mov	r4,fp
    7a94:	1887883a 	add	r3,r3,r2
    7a98:	d8c00815 	stw	r3,32(sp)
    7a9c:	b0ad883a 	add	r22,r22,r2
    7aa0:	000a4080 	call	a408 <__i2b>
    7aa4:	1023883a 	mov	r17,r2
    7aa8:	a0000826 	beq	r20,zero,7acc <_dtoa_r+0xa0c>
    7aac:	0580070e 	bge	zero,r22,7acc <_dtoa_r+0xa0c>
    7ab0:	a005883a 	mov	r2,r20
    7ab4:	b500b916 	blt	r22,r20,7d9c <_dtoa_r+0xcdc>
    7ab8:	d9000817 	ldw	r4,32(sp)
    7abc:	a0a9c83a 	sub	r20,r20,r2
    7ac0:	b0adc83a 	sub	r22,r22,r2
    7ac4:	2089c83a 	sub	r4,r4,r2
    7ac8:	d9000815 	stw	r4,32(sp)
    7acc:	d9800a17 	ldw	r6,40(sp)
    7ad0:	0181810e 	bge	zero,r6,80d8 <_dtoa_r+0x1018>
    7ad4:	d9c00b17 	ldw	r7,44(sp)
    7ad8:	3800b326 	beq	r7,zero,7da8 <_dtoa_r+0xce8>
    7adc:	a800b226 	beq	r21,zero,7da8 <_dtoa_r+0xce8>
    7ae0:	880b883a 	mov	r5,r17
    7ae4:	a80d883a 	mov	r6,r21
    7ae8:	e009883a 	mov	r4,fp
    7aec:	000a63c0 	call	a63c <__pow5mult>
    7af0:	d9800917 	ldw	r6,36(sp)
    7af4:	100b883a 	mov	r5,r2
    7af8:	e009883a 	mov	r4,fp
    7afc:	1023883a 	mov	r17,r2
    7b00:	000a4440 	call	a444 <__multiply>
    7b04:	1021883a 	mov	r16,r2
    7b08:	d8800a17 	ldw	r2,40(sp)
    7b0c:	d9400917 	ldw	r5,36(sp)
    7b10:	e009883a 	mov	r4,fp
    7b14:	1545c83a 	sub	r2,r2,r21
    7b18:	d8800a15 	stw	r2,40(sp)
    7b1c:	000a0a40 	call	a0a4 <_Bfree>
    7b20:	d8c00a17 	ldw	r3,40(sp)
    7b24:	18009f1e 	bne	r3,zero,7da4 <_dtoa_r+0xce4>
    7b28:	05c00044 	movi	r23,1
    7b2c:	e009883a 	mov	r4,fp
    7b30:	b80b883a 	mov	r5,r23
    7b34:	000a4080 	call	a408 <__i2b>
    7b38:	d9000d17 	ldw	r4,52(sp)
    7b3c:	102b883a 	mov	r21,r2
    7b40:	2000ce26 	beq	r4,zero,7e7c <_dtoa_r+0xdbc>
    7b44:	200d883a 	mov	r6,r4
    7b48:	100b883a 	mov	r5,r2
    7b4c:	e009883a 	mov	r4,fp
    7b50:	000a63c0 	call	a63c <__pow5mult>
    7b54:	d9800317 	ldw	r6,12(sp)
    7b58:	102b883a 	mov	r21,r2
    7b5c:	b981810e 	bge	r23,r6,8164 <_dtoa_r+0x10a4>
    7b60:	0027883a 	mov	r19,zero
    7b64:	a8800417 	ldw	r2,16(r21)
    7b68:	05c00804 	movi	r23,32
    7b6c:	10800104 	addi	r2,r2,4
    7b70:	1085883a 	add	r2,r2,r2
    7b74:	1085883a 	add	r2,r2,r2
    7b78:	a885883a 	add	r2,r21,r2
    7b7c:	11000017 	ldw	r4,0(r2)
    7b80:	000a2f00 	call	a2f0 <__hi0bits>
    7b84:	b885c83a 	sub	r2,r23,r2
    7b88:	1585883a 	add	r2,r2,r22
    7b8c:	108007cc 	andi	r2,r2,31
    7b90:	1000b326 	beq	r2,zero,7e60 <_dtoa_r+0xda0>
    7b94:	00c00804 	movi	r3,32
    7b98:	1887c83a 	sub	r3,r3,r2
    7b9c:	01000104 	movi	r4,4
    7ba0:	20c2cd0e 	bge	r4,r3,86d8 <_dtoa_r+0x1618>
    7ba4:	00c00704 	movi	r3,28
    7ba8:	1885c83a 	sub	r2,r3,r2
    7bac:	d8c00817 	ldw	r3,32(sp)
    7bb0:	a0a9883a 	add	r20,r20,r2
    7bb4:	b0ad883a 	add	r22,r22,r2
    7bb8:	1887883a 	add	r3,r3,r2
    7bbc:	d8c00815 	stw	r3,32(sp)
    7bc0:	d9800817 	ldw	r6,32(sp)
    7bc4:	0180040e 	bge	zero,r6,7bd8 <_dtoa_r+0xb18>
    7bc8:	800b883a 	mov	r5,r16
    7bcc:	e009883a 	mov	r4,fp
    7bd0:	000a77c0 	call	a77c <__lshift>
    7bd4:	1021883a 	mov	r16,r2
    7bd8:	0580050e 	bge	zero,r22,7bf0 <_dtoa_r+0xb30>
    7bdc:	a80b883a 	mov	r5,r21
    7be0:	b00d883a 	mov	r6,r22
    7be4:	e009883a 	mov	r4,fp
    7be8:	000a77c0 	call	a77c <__lshift>
    7bec:	102b883a 	mov	r21,r2
    7bf0:	d9c00e17 	ldw	r7,56(sp)
    7bf4:	3801211e 	bne	r7,zero,807c <_dtoa_r+0xfbc>
    7bf8:	d9800617 	ldw	r6,24(sp)
    7bfc:	0181380e 	bge	zero,r6,80e0 <_dtoa_r+0x1020>
    7c00:	d8c00b17 	ldw	r3,44(sp)
    7c04:	1800ab1e 	bne	r3,zero,7eb4 <_dtoa_r+0xdf4>
    7c08:	dc800717 	ldw	r18,28(sp)
    7c0c:	dcc00617 	ldw	r19,24(sp)
    7c10:	9029883a 	mov	r20,r18
    7c14:	00000206 	br	7c20 <_dtoa_r+0xb60>
    7c18:	000a0cc0 	call	a0cc <__multadd>
    7c1c:	1021883a 	mov	r16,r2
    7c20:	a80b883a 	mov	r5,r21
    7c24:	8009883a 	mov	r4,r16
    7c28:	0006ec00 	call	6ec0 <quorem>
    7c2c:	10800c04 	addi	r2,r2,48
    7c30:	90800005 	stb	r2,0(r18)
    7c34:	94800044 	addi	r18,r18,1
    7c38:	9507c83a 	sub	r3,r18,r20
    7c3c:	000f883a 	mov	r7,zero
    7c40:	01800284 	movi	r6,10
    7c44:	800b883a 	mov	r5,r16
    7c48:	e009883a 	mov	r4,fp
    7c4c:	1cfff216 	blt	r3,r19,7c18 <_dtoa_r+0xb58>
    7c50:	1011883a 	mov	r8,r2
    7c54:	d8800617 	ldw	r2,24(sp)
    7c58:	0082370e 	bge	zero,r2,8538 <_dtoa_r+0x1478>
    7c5c:	d9000717 	ldw	r4,28(sp)
    7c60:	0025883a 	mov	r18,zero
    7c64:	20af883a 	add	r23,r4,r2
    7c68:	01800044 	movi	r6,1
    7c6c:	800b883a 	mov	r5,r16
    7c70:	e009883a 	mov	r4,fp
    7c74:	da001715 	stw	r8,92(sp)
    7c78:	000a77c0 	call	a77c <__lshift>
    7c7c:	a80b883a 	mov	r5,r21
    7c80:	1009883a 	mov	r4,r2
    7c84:	d8800915 	stw	r2,36(sp)
    7c88:	000a8c40 	call	a8c4 <__mcmp>
    7c8c:	da001717 	ldw	r8,92(sp)
    7c90:	0081800e 	bge	zero,r2,8294 <_dtoa_r+0x11d4>
    7c94:	b93fffc3 	ldbu	r4,-1(r23)
    7c98:	b8bfffc4 	addi	r2,r23,-1
    7c9c:	1007883a 	mov	r3,r2
    7ca0:	01800e44 	movi	r6,57
    7ca4:	d9c00717 	ldw	r7,28(sp)
    7ca8:	00000506 	br	7cc0 <_dtoa_r+0xc00>
    7cac:	18ffffc4 	addi	r3,r3,-1
    7cb0:	11c12326 	beq	r2,r7,8140 <_dtoa_r+0x1080>
    7cb4:	19000003 	ldbu	r4,0(r3)
    7cb8:	102f883a 	mov	r23,r2
    7cbc:	10bfffc4 	addi	r2,r2,-1
    7cc0:	21403fcc 	andi	r5,r4,255
    7cc4:	2940201c 	xori	r5,r5,128
    7cc8:	297fe004 	addi	r5,r5,-128
    7ccc:	29bff726 	beq	r5,r6,7cac <_dtoa_r+0xbec>
    7cd0:	21000044 	addi	r4,r4,1
    7cd4:	11000005 	stb	r4,0(r2)
    7cd8:	a80b883a 	mov	r5,r21
    7cdc:	e009883a 	mov	r4,fp
    7ce0:	000a0a40 	call	a0a4 <_Bfree>
    7ce4:	883ea026 	beq	r17,zero,7768 <_dtoa_r+0x6a8>
    7ce8:	90000426 	beq	r18,zero,7cfc <_dtoa_r+0xc3c>
    7cec:	94400326 	beq	r18,r17,7cfc <_dtoa_r+0xc3c>
    7cf0:	900b883a 	mov	r5,r18
    7cf4:	e009883a 	mov	r4,fp
    7cf8:	000a0a40 	call	a0a4 <_Bfree>
    7cfc:	880b883a 	mov	r5,r17
    7d00:	e009883a 	mov	r4,fp
    7d04:	000a0a40 	call	a0a4 <_Bfree>
    7d08:	003e9706 	br	7768 <_dtoa_r+0x6a8>
    7d0c:	01800044 	movi	r6,1
    7d10:	d9800e15 	stw	r6,56(sp)
    7d14:	003d9606 	br	7370 <_dtoa_r+0x2b0>
    7d18:	d8800817 	ldw	r2,32(sp)
    7d1c:	d8c00517 	ldw	r3,20(sp)
    7d20:	d8000d15 	stw	zero,52(sp)
    7d24:	10c5c83a 	sub	r2,r2,r3
    7d28:	00c9c83a 	sub	r4,zero,r3
    7d2c:	d8800815 	stw	r2,32(sp)
    7d30:	d9000a15 	stw	r4,40(sp)
    7d34:	003d9706 	br	7394 <_dtoa_r+0x2d4>
    7d38:	05adc83a 	sub	r22,zero,r22
    7d3c:	dd800815 	stw	r22,32(sp)
    7d40:	002d883a 	mov	r22,zero
    7d44:	003d8e06 	br	7380 <_dtoa_r+0x2c0>
    7d48:	d9000517 	ldw	r4,20(sp)
    7d4c:	00123580 	call	12358 <__floatsidf>
    7d50:	100d883a 	mov	r6,r2
    7d54:	180f883a 	mov	r7,r3
    7d58:	a009883a 	mov	r4,r20
    7d5c:	880b883a 	mov	r5,r17
    7d60:	001106c0 	call	1106c <__eqdf2>
    7d64:	103d7126 	beq	r2,zero,732c <_dtoa_r+0x26c>
    7d68:	d9c00517 	ldw	r7,20(sp)
    7d6c:	39ffffc4 	addi	r7,r7,-1
    7d70:	d9c00515 	stw	r7,20(sp)
    7d74:	003d6d06 	br	732c <_dtoa_r+0x26c>
    7d78:	dd400a17 	ldw	r21,40(sp)
    7d7c:	dd000817 	ldw	r20,32(sp)
    7d80:	0023883a 	mov	r17,zero
    7d84:	003f4806 	br	7aa8 <_dtoa_r+0x9e8>
    7d88:	10e3c83a 	sub	r17,r2,r3
    7d8c:	9448983a 	sll	r4,r18,r17
    7d90:	003d3206 	br	725c <_dtoa_r+0x19c>
    7d94:	d8000e15 	stw	zero,56(sp)
    7d98:	003d7506 	br	7370 <_dtoa_r+0x2b0>
    7d9c:	b005883a 	mov	r2,r22
    7da0:	003f4506 	br	7ab8 <_dtoa_r+0x9f8>
    7da4:	dc000915 	stw	r16,36(sp)
    7da8:	d9800a17 	ldw	r6,40(sp)
    7dac:	d9400917 	ldw	r5,36(sp)
    7db0:	e009883a 	mov	r4,fp
    7db4:	000a63c0 	call	a63c <__pow5mult>
    7db8:	1021883a 	mov	r16,r2
    7dbc:	003f5a06 	br	7b28 <_dtoa_r+0xa68>
    7dc0:	01c00044 	movi	r7,1
    7dc4:	d9c00b15 	stw	r7,44(sp)
    7dc8:	d8802217 	ldw	r2,136(sp)
    7dcc:	0081280e 	bge	zero,r2,8270 <_dtoa_r+0x11b0>
    7dd0:	100d883a 	mov	r6,r2
    7dd4:	1021883a 	mov	r16,r2
    7dd8:	d8800c15 	stw	r2,48(sp)
    7ddc:	d8800615 	stw	r2,24(sp)
    7de0:	003d8806 	br	7404 <_dtoa_r+0x344>
    7de4:	d8800617 	ldw	r2,24(sp)
    7de8:	00be9b16 	blt	zero,r2,7858 <_dtoa_r+0x798>
    7dec:	10010f1e 	bne	r2,zero,822c <_dtoa_r+0x116c>
    7df0:	880b883a 	mov	r5,r17
    7df4:	000d883a 	mov	r6,zero
    7df8:	01d00534 	movhi	r7,16404
    7dfc:	8009883a 	mov	r4,r16
    7e00:	00112c40 	call	112c4 <__muldf3>
    7e04:	900d883a 	mov	r6,r18
    7e08:	980f883a 	mov	r7,r19
    7e0c:	1009883a 	mov	r4,r2
    7e10:	180b883a 	mov	r5,r3
    7e14:	00110f40 	call	110f4 <__gedf2>
    7e18:	002b883a 	mov	r21,zero
    7e1c:	0023883a 	mov	r17,zero
    7e20:	1000bf16 	blt	r2,zero,8120 <_dtoa_r+0x1060>
    7e24:	d9802217 	ldw	r6,136(sp)
    7e28:	ddc00717 	ldw	r23,28(sp)
    7e2c:	018c303a 	nor	r6,zero,r6
    7e30:	d9800515 	stw	r6,20(sp)
    7e34:	a80b883a 	mov	r5,r21
    7e38:	e009883a 	mov	r4,fp
    7e3c:	000a0a40 	call	a0a4 <_Bfree>
    7e40:	883e4926 	beq	r17,zero,7768 <_dtoa_r+0x6a8>
    7e44:	003fad06 	br	7cfc <_dtoa_r+0xc3c>
    7e48:	d9c01117 	ldw	r7,68(sp)
    7e4c:	3801bc26 	beq	r7,zero,8540 <_dtoa_r+0x1480>
    7e50:	10810cc4 	addi	r2,r2,1075
    7e54:	dd400a17 	ldw	r21,40(sp)
    7e58:	dd000817 	ldw	r20,32(sp)
    7e5c:	003f0a06 	br	7a88 <_dtoa_r+0x9c8>
    7e60:	00800704 	movi	r2,28
    7e64:	d9000817 	ldw	r4,32(sp)
    7e68:	a0a9883a 	add	r20,r20,r2
    7e6c:	b0ad883a 	add	r22,r22,r2
    7e70:	2089883a 	add	r4,r4,r2
    7e74:	d9000815 	stw	r4,32(sp)
    7e78:	003f5106 	br	7bc0 <_dtoa_r+0xb00>
    7e7c:	d8c00317 	ldw	r3,12(sp)
    7e80:	b8c1fc0e 	bge	r23,r3,8674 <_dtoa_r+0x15b4>
    7e84:	0027883a 	mov	r19,zero
    7e88:	b805883a 	mov	r2,r23
    7e8c:	003f3e06 	br	7b88 <_dtoa_r+0xac8>
    7e90:	880b883a 	mov	r5,r17
    7e94:	e009883a 	mov	r4,fp
    7e98:	000f883a 	mov	r7,zero
    7e9c:	01800284 	movi	r6,10
    7ea0:	000a0cc0 	call	a0cc <__multadd>
    7ea4:	d9000c17 	ldw	r4,48(sp)
    7ea8:	1023883a 	mov	r17,r2
    7eac:	0102040e 	bge	zero,r4,86c0 <_dtoa_r+0x1600>
    7eb0:	d9000615 	stw	r4,24(sp)
    7eb4:	0500050e 	bge	zero,r20,7ecc <_dtoa_r+0xe0c>
    7eb8:	880b883a 	mov	r5,r17
    7ebc:	a00d883a 	mov	r6,r20
    7ec0:	e009883a 	mov	r4,fp
    7ec4:	000a77c0 	call	a77c <__lshift>
    7ec8:	1023883a 	mov	r17,r2
    7ecc:	9801241e 	bne	r19,zero,8360 <_dtoa_r+0x12a0>
    7ed0:	8829883a 	mov	r20,r17
    7ed4:	d9000617 	ldw	r4,24(sp)
    7ed8:	dcc00717 	ldw	r19,28(sp)
    7edc:	9480004c 	andi	r18,r18,1
    7ee0:	20bfffc4 	addi	r2,r4,-1
    7ee4:	9885883a 	add	r2,r19,r2
    7ee8:	d8800415 	stw	r2,16(sp)
    7eec:	dc800615 	stw	r18,24(sp)
    7ef0:	a80b883a 	mov	r5,r21
    7ef4:	8009883a 	mov	r4,r16
    7ef8:	0006ec00 	call	6ec0 <quorem>
    7efc:	880b883a 	mov	r5,r17
    7f00:	8009883a 	mov	r4,r16
    7f04:	102f883a 	mov	r23,r2
    7f08:	000a8c40 	call	a8c4 <__mcmp>
    7f0c:	a80b883a 	mov	r5,r21
    7f10:	a00d883a 	mov	r6,r20
    7f14:	e009883a 	mov	r4,fp
    7f18:	102d883a 	mov	r22,r2
    7f1c:	000a9240 	call	a924 <__mdiff>
    7f20:	1007883a 	mov	r3,r2
    7f24:	10800317 	ldw	r2,12(r2)
    7f28:	bc800c04 	addi	r18,r23,48
    7f2c:	180b883a 	mov	r5,r3
    7f30:	10004e1e 	bne	r2,zero,806c <_dtoa_r+0xfac>
    7f34:	8009883a 	mov	r4,r16
    7f38:	d8c01615 	stw	r3,88(sp)
    7f3c:	000a8c40 	call	a8c4 <__mcmp>
    7f40:	d8c01617 	ldw	r3,88(sp)
    7f44:	e009883a 	mov	r4,fp
    7f48:	d8801615 	stw	r2,88(sp)
    7f4c:	180b883a 	mov	r5,r3
    7f50:	000a0a40 	call	a0a4 <_Bfree>
    7f54:	d8801617 	ldw	r2,88(sp)
    7f58:	1000041e 	bne	r2,zero,7f6c <_dtoa_r+0xeac>
    7f5c:	d9800317 	ldw	r6,12(sp)
    7f60:	3000021e 	bne	r6,zero,7f6c <_dtoa_r+0xeac>
    7f64:	d8c00617 	ldw	r3,24(sp)
    7f68:	18003726 	beq	r3,zero,8048 <_dtoa_r+0xf88>
    7f6c:	b0002016 	blt	r22,zero,7ff0 <_dtoa_r+0xf30>
    7f70:	b000041e 	bne	r22,zero,7f84 <_dtoa_r+0xec4>
    7f74:	d9000317 	ldw	r4,12(sp)
    7f78:	2000021e 	bne	r4,zero,7f84 <_dtoa_r+0xec4>
    7f7c:	d8c00617 	ldw	r3,24(sp)
    7f80:	18001b26 	beq	r3,zero,7ff0 <_dtoa_r+0xf30>
    7f84:	00810716 	blt	zero,r2,83a4 <_dtoa_r+0x12e4>
    7f88:	d8c00417 	ldw	r3,16(sp)
    7f8c:	9d800044 	addi	r22,r19,1
    7f90:	9c800005 	stb	r18,0(r19)
    7f94:	b02f883a 	mov	r23,r22
    7f98:	98c10626 	beq	r19,r3,83b4 <_dtoa_r+0x12f4>
    7f9c:	800b883a 	mov	r5,r16
    7fa0:	000f883a 	mov	r7,zero
    7fa4:	01800284 	movi	r6,10
    7fa8:	e009883a 	mov	r4,fp
    7fac:	000a0cc0 	call	a0cc <__multadd>
    7fb0:	1021883a 	mov	r16,r2
    7fb4:	000f883a 	mov	r7,zero
    7fb8:	01800284 	movi	r6,10
    7fbc:	880b883a 	mov	r5,r17
    7fc0:	e009883a 	mov	r4,fp
    7fc4:	8d002526 	beq	r17,r20,805c <_dtoa_r+0xf9c>
    7fc8:	000a0cc0 	call	a0cc <__multadd>
    7fcc:	a00b883a 	mov	r5,r20
    7fd0:	000f883a 	mov	r7,zero
    7fd4:	01800284 	movi	r6,10
    7fd8:	e009883a 	mov	r4,fp
    7fdc:	1023883a 	mov	r17,r2
    7fe0:	000a0cc0 	call	a0cc <__multadd>
    7fe4:	1029883a 	mov	r20,r2
    7fe8:	b027883a 	mov	r19,r22
    7fec:	003fc006 	br	7ef0 <_dtoa_r+0xe30>
    7ff0:	9011883a 	mov	r8,r18
    7ff4:	00800e0e 	bge	zero,r2,8030 <_dtoa_r+0xf70>
    7ff8:	800b883a 	mov	r5,r16
    7ffc:	01800044 	movi	r6,1
    8000:	e009883a 	mov	r4,fp
    8004:	da001715 	stw	r8,92(sp)
    8008:	000a77c0 	call	a77c <__lshift>
    800c:	a80b883a 	mov	r5,r21
    8010:	1009883a 	mov	r4,r2
    8014:	1021883a 	mov	r16,r2
    8018:	000a8c40 	call	a8c4 <__mcmp>
    801c:	da001717 	ldw	r8,92(sp)
    8020:	0081960e 	bge	zero,r2,867c <_dtoa_r+0x15bc>
    8024:	00800e44 	movi	r2,57
    8028:	40817026 	beq	r8,r2,85ec <_dtoa_r+0x152c>
    802c:	ba000c44 	addi	r8,r23,49
    8030:	8825883a 	mov	r18,r17
    8034:	9dc00044 	addi	r23,r19,1
    8038:	9a000005 	stb	r8,0(r19)
    803c:	a023883a 	mov	r17,r20
    8040:	dc000915 	stw	r16,36(sp)
    8044:	003f2406 	br	7cd8 <_dtoa_r+0xc18>
    8048:	00800e44 	movi	r2,57
    804c:	9011883a 	mov	r8,r18
    8050:	90816626 	beq	r18,r2,85ec <_dtoa_r+0x152c>
    8054:	05bff516 	blt	zero,r22,802c <_dtoa_r+0xf6c>
    8058:	003ff506 	br	8030 <_dtoa_r+0xf70>
    805c:	000a0cc0 	call	a0cc <__multadd>
    8060:	1023883a 	mov	r17,r2
    8064:	1029883a 	mov	r20,r2
    8068:	003fdf06 	br	7fe8 <_dtoa_r+0xf28>
    806c:	e009883a 	mov	r4,fp
    8070:	000a0a40 	call	a0a4 <_Bfree>
    8074:	00800044 	movi	r2,1
    8078:	003fbc06 	br	7f6c <_dtoa_r+0xeac>
    807c:	a80b883a 	mov	r5,r21
    8080:	8009883a 	mov	r4,r16
    8084:	000a8c40 	call	a8c4 <__mcmp>
    8088:	103edb0e 	bge	r2,zero,7bf8 <_dtoa_r+0xb38>
    808c:	800b883a 	mov	r5,r16
    8090:	000f883a 	mov	r7,zero
    8094:	01800284 	movi	r6,10
    8098:	e009883a 	mov	r4,fp
    809c:	000a0cc0 	call	a0cc <__multadd>
    80a0:	1021883a 	mov	r16,r2
    80a4:	d8800517 	ldw	r2,20(sp)
    80a8:	d8c00b17 	ldw	r3,44(sp)
    80ac:	10bfffc4 	addi	r2,r2,-1
    80b0:	d8800515 	stw	r2,20(sp)
    80b4:	183f761e 	bne	r3,zero,7e90 <_dtoa_r+0xdd0>
    80b8:	d9000c17 	ldw	r4,48(sp)
    80bc:	0101730e 	bge	zero,r4,868c <_dtoa_r+0x15cc>
    80c0:	d9000615 	stw	r4,24(sp)
    80c4:	003ed006 	br	7c08 <_dtoa_r+0xb48>
    80c8:	00800084 	movi	r2,2
    80cc:	3081861e 	bne	r6,r2,86e8 <_dtoa_r+0x1628>
    80d0:	d8000b15 	stw	zero,44(sp)
    80d4:	003f3c06 	br	7dc8 <_dtoa_r+0xd08>
    80d8:	dc000917 	ldw	r16,36(sp)
    80dc:	003e9206 	br	7b28 <_dtoa_r+0xa68>
    80e0:	d9c00317 	ldw	r7,12(sp)
    80e4:	00800084 	movi	r2,2
    80e8:	11fec50e 	bge	r2,r7,7c00 <_dtoa_r+0xb40>
    80ec:	d9000617 	ldw	r4,24(sp)
    80f0:	20013c1e 	bne	r4,zero,85e4 <_dtoa_r+0x1524>
    80f4:	a80b883a 	mov	r5,r21
    80f8:	000f883a 	mov	r7,zero
    80fc:	01800144 	movi	r6,5
    8100:	e009883a 	mov	r4,fp
    8104:	000a0cc0 	call	a0cc <__multadd>
    8108:	100b883a 	mov	r5,r2
    810c:	8009883a 	mov	r4,r16
    8110:	102b883a 	mov	r21,r2
    8114:	000a8c40 	call	a8c4 <__mcmp>
    8118:	dc000915 	stw	r16,36(sp)
    811c:	00bf410e 	bge	zero,r2,7e24 <_dtoa_r+0xd64>
    8120:	d9c00717 	ldw	r7,28(sp)
    8124:	00800c44 	movi	r2,49
    8128:	38800005 	stb	r2,0(r7)
    812c:	d8800517 	ldw	r2,20(sp)
    8130:	3dc00044 	addi	r23,r7,1
    8134:	10800044 	addi	r2,r2,1
    8138:	d8800515 	stw	r2,20(sp)
    813c:	003f3d06 	br	7e34 <_dtoa_r+0xd74>
    8140:	d9800517 	ldw	r6,20(sp)
    8144:	d9c00717 	ldw	r7,28(sp)
    8148:	00800c44 	movi	r2,49
    814c:	31800044 	addi	r6,r6,1
    8150:	d9800515 	stw	r6,20(sp)
    8154:	38800005 	stb	r2,0(r7)
    8158:	003edf06 	br	7cd8 <_dtoa_r+0xc18>
    815c:	d8000b15 	stw	zero,44(sp)
    8160:	003c9f06 	br	73e0 <_dtoa_r+0x320>
    8164:	903e7e1e 	bne	r18,zero,7b60 <_dtoa_r+0xaa0>
    8168:	00800434 	movhi	r2,16
    816c:	10bfffc4 	addi	r2,r2,-1
    8170:	9884703a 	and	r2,r19,r2
    8174:	1000ea1e 	bne	r2,zero,8520 <_dtoa_r+0x1460>
    8178:	9cdffc2c 	andhi	r19,r19,32752
    817c:	9800e826 	beq	r19,zero,8520 <_dtoa_r+0x1460>
    8180:	d9c00817 	ldw	r7,32(sp)
    8184:	b5800044 	addi	r22,r22,1
    8188:	04c00044 	movi	r19,1
    818c:	39c00044 	addi	r7,r7,1
    8190:	d9c00815 	stw	r7,32(sp)
    8194:	d8800d17 	ldw	r2,52(sp)
    8198:	103e721e 	bne	r2,zero,7b64 <_dtoa_r+0xaa4>
    819c:	00800044 	movi	r2,1
    81a0:	003e7906 	br	7b88 <_dtoa_r+0xac8>
    81a4:	8009883a 	mov	r4,r16
    81a8:	00123580 	call	12358 <__floatsidf>
    81ac:	d9800f17 	ldw	r6,60(sp)
    81b0:	d9c01017 	ldw	r7,64(sp)
    81b4:	1009883a 	mov	r4,r2
    81b8:	180b883a 	mov	r5,r3
    81bc:	00112c40 	call	112c4 <__muldf3>
    81c0:	000d883a 	mov	r6,zero
    81c4:	01d00734 	movhi	r7,16412
    81c8:	1009883a 	mov	r4,r2
    81cc:	180b883a 	mov	r5,r3
    81d0:	000fed80 	call	fed8 <__adddf3>
    81d4:	047f3034 	movhi	r17,64704
    81d8:	1021883a 	mov	r16,r2
    81dc:	1c63883a 	add	r17,r3,r17
    81e0:	d9000f17 	ldw	r4,60(sp)
    81e4:	d9401017 	ldw	r5,64(sp)
    81e8:	000d883a 	mov	r6,zero
    81ec:	01d00534 	movhi	r7,16404
    81f0:	00119dc0 	call	119dc <__subdf3>
    81f4:	800d883a 	mov	r6,r16
    81f8:	880f883a 	mov	r7,r17
    81fc:	1009883a 	mov	r4,r2
    8200:	180b883a 	mov	r5,r3
    8204:	102b883a 	mov	r21,r2
    8208:	1829883a 	mov	r20,r3
    820c:	00110f40 	call	110f4 <__gedf2>
    8210:	00806c16 	blt	zero,r2,83c4 <_dtoa_r+0x1304>
    8214:	89e0003c 	xorhi	r7,r17,32768
    8218:	800d883a 	mov	r6,r16
    821c:	a809883a 	mov	r4,r21
    8220:	a00b883a 	mov	r5,r20
    8224:	00111d00 	call	111d0 <__ledf2>
    8228:	103d7e0e 	bge	r2,zero,7824 <_dtoa_r+0x764>
    822c:	002b883a 	mov	r21,zero
    8230:	0023883a 	mov	r17,zero
    8234:	003efb06 	br	7e24 <_dtoa_r+0xd64>
    8238:	d8800717 	ldw	r2,28(sp)
    823c:	003bd006 	br	7180 <_dtoa_r+0xc0>
    8240:	d9000a17 	ldw	r4,40(sp)
    8244:	d9800d17 	ldw	r6,52(sp)
    8248:	dd400a15 	stw	r21,40(sp)
    824c:	a905c83a 	sub	r2,r21,r4
    8250:	308d883a 	add	r6,r6,r2
    8254:	d9800d15 	stw	r6,52(sp)
    8258:	002b883a 	mov	r21,zero
    825c:	003e0606 	br	7a78 <_dtoa_r+0x9b8>
    8260:	9023883a 	mov	r17,r18
    8264:	9829883a 	mov	r20,r19
    8268:	04000084 	movi	r16,2
    826c:	003c9206 	br	74b8 <_dtoa_r+0x3f8>
    8270:	04000044 	movi	r16,1
    8274:	dc000c15 	stw	r16,48(sp)
    8278:	dc000615 	stw	r16,24(sp)
    827c:	dc002215 	stw	r16,136(sp)
    8280:	e0001115 	stw	zero,68(fp)
    8284:	000b883a 	mov	r5,zero
    8288:	003c6906 	br	7430 <_dtoa_r+0x370>
    828c:	3021883a 	mov	r16,r6
    8290:	003ffb06 	br	8280 <_dtoa_r+0x11c0>
    8294:	1000021e 	bne	r2,zero,82a0 <_dtoa_r+0x11e0>
    8298:	4200004c 	andi	r8,r8,1
    829c:	403e7d1e 	bne	r8,zero,7c94 <_dtoa_r+0xbd4>
    82a0:	01000c04 	movi	r4,48
    82a4:	00000106 	br	82ac <_dtoa_r+0x11ec>
    82a8:	102f883a 	mov	r23,r2
    82ac:	b8bfffc4 	addi	r2,r23,-1
    82b0:	10c00007 	ldb	r3,0(r2)
    82b4:	193ffc26 	beq	r3,r4,82a8 <_dtoa_r+0x11e8>
    82b8:	003e8706 	br	7cd8 <_dtoa_r+0xc18>
    82bc:	d8800517 	ldw	r2,20(sp)
    82c0:	00a3c83a 	sub	r17,zero,r2
    82c4:	8800a426 	beq	r17,zero,8558 <_dtoa_r+0x1498>
    82c8:	888003cc 	andi	r2,r17,15
    82cc:	100490fa 	slli	r2,r2,3
    82d0:	00c000b4 	movhi	r3,2
    82d4:	18fd4004 	addi	r3,r3,-2816
    82d8:	1885883a 	add	r2,r3,r2
    82dc:	11800017 	ldw	r6,0(r2)
    82e0:	11c00117 	ldw	r7,4(r2)
    82e4:	9009883a 	mov	r4,r18
    82e8:	980b883a 	mov	r5,r19
    82ec:	8823d13a 	srai	r17,r17,4
    82f0:	00112c40 	call	112c4 <__muldf3>
    82f4:	d8800f15 	stw	r2,60(sp)
    82f8:	d8c01015 	stw	r3,64(sp)
    82fc:	8800e826 	beq	r17,zero,86a0 <_dtoa_r+0x15e0>
    8300:	050000b4 	movhi	r20,2
    8304:	a53d3604 	addi	r20,r20,-2856
    8308:	04000084 	movi	r16,2
    830c:	8980004c 	andi	r6,r17,1
    8310:	1009883a 	mov	r4,r2
    8314:	8823d07a 	srai	r17,r17,1
    8318:	180b883a 	mov	r5,r3
    831c:	30000426 	beq	r6,zero,8330 <_dtoa_r+0x1270>
    8320:	a1800017 	ldw	r6,0(r20)
    8324:	a1c00117 	ldw	r7,4(r20)
    8328:	84000044 	addi	r16,r16,1
    832c:	00112c40 	call	112c4 <__muldf3>
    8330:	a5000204 	addi	r20,r20,8
    8334:	883ff51e 	bne	r17,zero,830c <_dtoa_r+0x124c>
    8338:	d8800f15 	stw	r2,60(sp)
    833c:	d8c01015 	stw	r3,64(sp)
    8340:	003c7606 	br	751c <_dtoa_r+0x45c>
    8344:	00c00c04 	movi	r3,48
    8348:	10c00005 	stb	r3,0(r2)
    834c:	d8c00517 	ldw	r3,20(sp)
    8350:	bd3fffc3 	ldbu	r20,-1(r23)
    8354:	18c00044 	addi	r3,r3,1
    8358:	d8c00515 	stw	r3,20(sp)
    835c:	003db906 	br	7a44 <_dtoa_r+0x984>
    8360:	89400117 	ldw	r5,4(r17)
    8364:	e009883a 	mov	r4,fp
    8368:	0009ffc0 	call	9ffc <_Balloc>
    836c:	89800417 	ldw	r6,16(r17)
    8370:	89400304 	addi	r5,r17,12
    8374:	11000304 	addi	r4,r2,12
    8378:	31800084 	addi	r6,r6,2
    837c:	318d883a 	add	r6,r6,r6
    8380:	318d883a 	add	r6,r6,r6
    8384:	1027883a 	mov	r19,r2
    8388:	0001ec80 	call	1ec8 <memcpy>
    838c:	01800044 	movi	r6,1
    8390:	980b883a 	mov	r5,r19
    8394:	e009883a 	mov	r4,fp
    8398:	000a77c0 	call	a77c <__lshift>
    839c:	1029883a 	mov	r20,r2
    83a0:	003ecc06 	br	7ed4 <_dtoa_r+0xe14>
    83a4:	00800e44 	movi	r2,57
    83a8:	90809026 	beq	r18,r2,85ec <_dtoa_r+0x152c>
    83ac:	92000044 	addi	r8,r18,1
    83b0:	003f1f06 	br	8030 <_dtoa_r+0xf70>
    83b4:	9011883a 	mov	r8,r18
    83b8:	8825883a 	mov	r18,r17
    83bc:	a023883a 	mov	r17,r20
    83c0:	003e2906 	br	7c68 <_dtoa_r+0xba8>
    83c4:	002b883a 	mov	r21,zero
    83c8:	0023883a 	mov	r17,zero
    83cc:	003f5406 	br	8120 <_dtoa_r+0x1060>
    83d0:	61bfffc4 	addi	r6,r12,-1
    83d4:	300490fa 	slli	r2,r6,3
    83d8:	00c000b4 	movhi	r3,2
    83dc:	18fd4004 	addi	r3,r3,-2816
    83e0:	1885883a 	add	r2,r3,r2
    83e4:	11000017 	ldw	r4,0(r2)
    83e8:	11400117 	ldw	r5,4(r2)
    83ec:	d8800717 	ldw	r2,28(sp)
    83f0:	880f883a 	mov	r7,r17
    83f4:	d9801215 	stw	r6,72(sp)
    83f8:	800d883a 	mov	r6,r16
    83fc:	db001615 	stw	r12,88(sp)
    8400:	15c00044 	addi	r23,r2,1
    8404:	00112c40 	call	112c4 <__muldf3>
    8408:	d9401017 	ldw	r5,64(sp)
    840c:	d9000f17 	ldw	r4,60(sp)
    8410:	d8c01515 	stw	r3,84(sp)
    8414:	d8801415 	stw	r2,80(sp)
    8418:	00122d80 	call	122d8 <__fixdfsi>
    841c:	1009883a 	mov	r4,r2
    8420:	1021883a 	mov	r16,r2
    8424:	00123580 	call	12358 <__floatsidf>
    8428:	d9000f17 	ldw	r4,60(sp)
    842c:	d9401017 	ldw	r5,64(sp)
    8430:	100d883a 	mov	r6,r2
    8434:	180f883a 	mov	r7,r3
    8438:	00119dc0 	call	119dc <__subdf3>
    843c:	1829883a 	mov	r20,r3
    8440:	d8c00717 	ldw	r3,28(sp)
    8444:	84000c04 	addi	r16,r16,48
    8448:	1023883a 	mov	r17,r2
    844c:	1c000005 	stb	r16,0(r3)
    8450:	db001617 	ldw	r12,88(sp)
    8454:	00800044 	movi	r2,1
    8458:	60802226 	beq	r12,r2,84e4 <_dtoa_r+0x1424>
    845c:	d9c00717 	ldw	r7,28(sp)
    8460:	8805883a 	mov	r2,r17
    8464:	b82b883a 	mov	r21,r23
    8468:	3b19883a 	add	r12,r7,r12
    846c:	6023883a 	mov	r17,r12
    8470:	a007883a 	mov	r3,r20
    8474:	dc800f15 	stw	r18,60(sp)
    8478:	000d883a 	mov	r6,zero
    847c:	01d00934 	movhi	r7,16420
    8480:	1009883a 	mov	r4,r2
    8484:	180b883a 	mov	r5,r3
    8488:	00112c40 	call	112c4 <__muldf3>
    848c:	180b883a 	mov	r5,r3
    8490:	1009883a 	mov	r4,r2
    8494:	1829883a 	mov	r20,r3
    8498:	1025883a 	mov	r18,r2
    849c:	00122d80 	call	122d8 <__fixdfsi>
    84a0:	1009883a 	mov	r4,r2
    84a4:	1021883a 	mov	r16,r2
    84a8:	00123580 	call	12358 <__floatsidf>
    84ac:	100d883a 	mov	r6,r2
    84b0:	180f883a 	mov	r7,r3
    84b4:	9009883a 	mov	r4,r18
    84b8:	a00b883a 	mov	r5,r20
    84bc:	84000c04 	addi	r16,r16,48
    84c0:	00119dc0 	call	119dc <__subdf3>
    84c4:	ad400044 	addi	r21,r21,1
    84c8:	ac3fffc5 	stb	r16,-1(r21)
    84cc:	ac7fea1e 	bne	r21,r17,8478 <_dtoa_r+0x13b8>
    84d0:	1023883a 	mov	r17,r2
    84d4:	d8801217 	ldw	r2,72(sp)
    84d8:	dc800f17 	ldw	r18,60(sp)
    84dc:	1829883a 	mov	r20,r3
    84e0:	b8af883a 	add	r23,r23,r2
    84e4:	d9001417 	ldw	r4,80(sp)
    84e8:	d9401517 	ldw	r5,84(sp)
    84ec:	000d883a 	mov	r6,zero
    84f0:	01cff834 	movhi	r7,16352
    84f4:	000fed80 	call	fed8 <__adddf3>
    84f8:	880d883a 	mov	r6,r17
    84fc:	a00f883a 	mov	r7,r20
    8500:	1009883a 	mov	r4,r2
    8504:	180b883a 	mov	r5,r3
    8508:	00111d00 	call	111d0 <__ledf2>
    850c:	10003e0e 	bge	r2,zero,8608 <_dtoa_r+0x1548>
    8510:	d9001317 	ldw	r4,76(sp)
    8514:	bd3fffc3 	ldbu	r20,-1(r23)
    8518:	d9000515 	stw	r4,20(sp)
    851c:	003d3b06 	br	7a0c <_dtoa_r+0x94c>
    8520:	0027883a 	mov	r19,zero
    8524:	003f1b06 	br	8194 <_dtoa_r+0x10d4>
    8528:	d8800817 	ldw	r2,32(sp)
    852c:	11e9c83a 	sub	r20,r2,r7
    8530:	0005883a 	mov	r2,zero
    8534:	003d5406 	br	7a88 <_dtoa_r+0x9c8>
    8538:	00800044 	movi	r2,1
    853c:	003dc706 	br	7c5c <_dtoa_r+0xb9c>
    8540:	d8c00217 	ldw	r3,8(sp)
    8544:	00800d84 	movi	r2,54
    8548:	dd400a17 	ldw	r21,40(sp)
    854c:	10c5c83a 	sub	r2,r2,r3
    8550:	dd000817 	ldw	r20,32(sp)
    8554:	003d4c06 	br	7a88 <_dtoa_r+0x9c8>
    8558:	dc800f15 	stw	r18,60(sp)
    855c:	dcc01015 	stw	r19,64(sp)
    8560:	04000084 	movi	r16,2
    8564:	003bed06 	br	751c <_dtoa_r+0x45c>
    8568:	d9000617 	ldw	r4,24(sp)
    856c:	203f0d26 	beq	r4,zero,81a4 <_dtoa_r+0x10e4>
    8570:	d9800c17 	ldw	r6,48(sp)
    8574:	01bcab0e 	bge	zero,r6,7824 <_dtoa_r+0x764>
    8578:	d9401017 	ldw	r5,64(sp)
    857c:	d9000f17 	ldw	r4,60(sp)
    8580:	000d883a 	mov	r6,zero
    8584:	01d00934 	movhi	r7,16420
    8588:	00112c40 	call	112c4 <__muldf3>
    858c:	81000044 	addi	r4,r16,1
    8590:	d8800f15 	stw	r2,60(sp)
    8594:	d8c01015 	stw	r3,64(sp)
    8598:	00123580 	call	12358 <__floatsidf>
    859c:	d9800f17 	ldw	r6,60(sp)
    85a0:	d9c01017 	ldw	r7,64(sp)
    85a4:	1009883a 	mov	r4,r2
    85a8:	180b883a 	mov	r5,r3
    85ac:	00112c40 	call	112c4 <__muldf3>
    85b0:	01d00734 	movhi	r7,16412
    85b4:	000d883a 	mov	r6,zero
    85b8:	1009883a 	mov	r4,r2
    85bc:	180b883a 	mov	r5,r3
    85c0:	000fed80 	call	fed8 <__adddf3>
    85c4:	d9c00517 	ldw	r7,20(sp)
    85c8:	047f3034 	movhi	r17,64704
    85cc:	1021883a 	mov	r16,r2
    85d0:	39ffffc4 	addi	r7,r7,-1
    85d4:	d9c01315 	stw	r7,76(sp)
    85d8:	1c63883a 	add	r17,r3,r17
    85dc:	db000c17 	ldw	r12,48(sp)
    85e0:	003bea06 	br	758c <_dtoa_r+0x4cc>
    85e4:	dc000915 	stw	r16,36(sp)
    85e8:	003e0e06 	br	7e24 <_dtoa_r+0xd64>
    85ec:	01000e44 	movi	r4,57
    85f0:	8825883a 	mov	r18,r17
    85f4:	9dc00044 	addi	r23,r19,1
    85f8:	99000005 	stb	r4,0(r19)
    85fc:	a023883a 	mov	r17,r20
    8600:	dc000915 	stw	r16,36(sp)
    8604:	003da406 	br	7c98 <_dtoa_r+0xbd8>
    8608:	d9801417 	ldw	r6,80(sp)
    860c:	d9c01517 	ldw	r7,84(sp)
    8610:	0009883a 	mov	r4,zero
    8614:	014ff834 	movhi	r5,16352
    8618:	00119dc0 	call	119dc <__subdf3>
    861c:	880d883a 	mov	r6,r17
    8620:	a00f883a 	mov	r7,r20
    8624:	1009883a 	mov	r4,r2
    8628:	180b883a 	mov	r5,r3
    862c:	00110f40 	call	110f4 <__gedf2>
    8630:	00bc7c0e 	bge	zero,r2,7824 <_dtoa_r+0x764>
    8634:	01000c04 	movi	r4,48
    8638:	00000106 	br	8640 <_dtoa_r+0x1580>
    863c:	102f883a 	mov	r23,r2
    8640:	b8bfffc4 	addi	r2,r23,-1
    8644:	10c00007 	ldb	r3,0(r2)
    8648:	193ffc26 	beq	r3,r4,863c <_dtoa_r+0x157c>
    864c:	d9801317 	ldw	r6,76(sp)
    8650:	d9800515 	stw	r6,20(sp)
    8654:	003c4406 	br	7768 <_dtoa_r+0x6a8>
    8658:	d9801317 	ldw	r6,76(sp)
    865c:	d9800515 	stw	r6,20(sp)
    8660:	003cea06 	br	7a0c <_dtoa_r+0x94c>
    8664:	dd800f17 	ldw	r22,60(sp)
    8668:	dcc01017 	ldw	r19,64(sp)
    866c:	dc801217 	ldw	r18,72(sp)
    8670:	003c6c06 	br	7824 <_dtoa_r+0x764>
    8674:	903e031e 	bne	r18,zero,7e84 <_dtoa_r+0xdc4>
    8678:	003ebb06 	br	8168 <_dtoa_r+0x10a8>
    867c:	103e6c1e 	bne	r2,zero,8030 <_dtoa_r+0xf70>
    8680:	4080004c 	andi	r2,r8,1
    8684:	103e6a26 	beq	r2,zero,8030 <_dtoa_r+0xf70>
    8688:	003e6606 	br	8024 <_dtoa_r+0xf64>
    868c:	d8c00317 	ldw	r3,12(sp)
    8690:	00800084 	movi	r2,2
    8694:	10c02916 	blt	r2,r3,873c <_dtoa_r+0x167c>
    8698:	d9000c17 	ldw	r4,48(sp)
    869c:	003e8806 	br	80c0 <_dtoa_r+0x1000>
    86a0:	04000084 	movi	r16,2
    86a4:	003b9d06 	br	751c <_dtoa_r+0x45c>
    86a8:	d9001317 	ldw	r4,76(sp)
    86ac:	d9000515 	stw	r4,20(sp)
    86b0:	003cd606 	br	7a0c <_dtoa_r+0x94c>
    86b4:	d8801317 	ldw	r2,76(sp)
    86b8:	d8800515 	stw	r2,20(sp)
    86bc:	003c2a06 	br	7768 <_dtoa_r+0x6a8>
    86c0:	d9800317 	ldw	r6,12(sp)
    86c4:	00800084 	movi	r2,2
    86c8:	11801516 	blt	r2,r6,8720 <_dtoa_r+0x1660>
    86cc:	d9c00c17 	ldw	r7,48(sp)
    86d0:	d9c00615 	stw	r7,24(sp)
    86d4:	003df706 	br	7eb4 <_dtoa_r+0xdf4>
    86d8:	193d3926 	beq	r3,r4,7bc0 <_dtoa_r+0xb00>
    86dc:	00c00f04 	movi	r3,60
    86e0:	1885c83a 	sub	r2,r3,r2
    86e4:	003ddf06 	br	7e64 <_dtoa_r+0xda4>
    86e8:	e009883a 	mov	r4,fp
    86ec:	e0001115 	stw	zero,68(fp)
    86f0:	000b883a 	mov	r5,zero
    86f4:	0009ffc0 	call	9ffc <_Balloc>
    86f8:	d8800715 	stw	r2,28(sp)
    86fc:	d8c00717 	ldw	r3,28(sp)
    8700:	00bfffc4 	movi	r2,-1
    8704:	01000044 	movi	r4,1
    8708:	d8800c15 	stw	r2,48(sp)
    870c:	e0c01015 	stw	r3,64(fp)
    8710:	d9000b15 	stw	r4,44(sp)
    8714:	d8800615 	stw	r2,24(sp)
    8718:	d8002215 	stw	zero,136(sp)
    871c:	003c4106 	br	7824 <_dtoa_r+0x764>
    8720:	d8c00c17 	ldw	r3,48(sp)
    8724:	d8c00615 	stw	r3,24(sp)
    8728:	003e7006 	br	80ec <_dtoa_r+0x102c>
    872c:	04400044 	movi	r17,1
    8730:	003b2006 	br	73b4 <_dtoa_r+0x2f4>
    8734:	000b883a 	mov	r5,zero
    8738:	003b3d06 	br	7430 <_dtoa_r+0x370>
    873c:	d8800c17 	ldw	r2,48(sp)
    8740:	d8800615 	stw	r2,24(sp)
    8744:	003e6906 	br	80ec <_dtoa_r+0x102c>

00008748 <__sflush_r>:
    8748:	2880030b 	ldhu	r2,12(r5)
    874c:	defffb04 	addi	sp,sp,-20
    8750:	dcc00315 	stw	r19,12(sp)
    8754:	dc400115 	stw	r17,4(sp)
    8758:	dfc00415 	stw	ra,16(sp)
    875c:	dc800215 	stw	r18,8(sp)
    8760:	dc000015 	stw	r16,0(sp)
    8764:	10c0020c 	andi	r3,r2,8
    8768:	2823883a 	mov	r17,r5
    876c:	2027883a 	mov	r19,r4
    8770:	1800311e 	bne	r3,zero,8838 <__sflush_r+0xf0>
    8774:	28c00117 	ldw	r3,4(r5)
    8778:	10820014 	ori	r2,r2,2048
    877c:	2880030d 	sth	r2,12(r5)
    8780:	00c04b0e 	bge	zero,r3,88b0 <__sflush_r+0x168>
    8784:	8a000a17 	ldw	r8,40(r17)
    8788:	40002326 	beq	r8,zero,8818 <__sflush_r+0xd0>
    878c:	9c000017 	ldw	r16,0(r19)
    8790:	10c4000c 	andi	r3,r2,4096
    8794:	98000015 	stw	zero,0(r19)
    8798:	18004826 	beq	r3,zero,88bc <__sflush_r+0x174>
    879c:	89801417 	ldw	r6,80(r17)
    87a0:	10c0010c 	andi	r3,r2,4
    87a4:	18000626 	beq	r3,zero,87c0 <__sflush_r+0x78>
    87a8:	88c00117 	ldw	r3,4(r17)
    87ac:	88800c17 	ldw	r2,48(r17)
    87b0:	30cdc83a 	sub	r6,r6,r3
    87b4:	10000226 	beq	r2,zero,87c0 <__sflush_r+0x78>
    87b8:	88800f17 	ldw	r2,60(r17)
    87bc:	308dc83a 	sub	r6,r6,r2
    87c0:	89400717 	ldw	r5,28(r17)
    87c4:	000f883a 	mov	r7,zero
    87c8:	9809883a 	mov	r4,r19
    87cc:	403ee83a 	callr	r8
    87d0:	00ffffc4 	movi	r3,-1
    87d4:	10c04426 	beq	r2,r3,88e8 <__sflush_r+0x1a0>
    87d8:	88c0030b 	ldhu	r3,12(r17)
    87dc:	89000417 	ldw	r4,16(r17)
    87e0:	88000115 	stw	zero,4(r17)
    87e4:	197dffcc 	andi	r5,r3,63487
    87e8:	8940030d 	sth	r5,12(r17)
    87ec:	89000015 	stw	r4,0(r17)
    87f0:	18c4000c 	andi	r3,r3,4096
    87f4:	18002c1e 	bne	r3,zero,88a8 <__sflush_r+0x160>
    87f8:	89400c17 	ldw	r5,48(r17)
    87fc:	9c000015 	stw	r16,0(r19)
    8800:	28000526 	beq	r5,zero,8818 <__sflush_r+0xd0>
    8804:	88801004 	addi	r2,r17,64
    8808:	28800226 	beq	r5,r2,8814 <__sflush_r+0xcc>
    880c:	9809883a 	mov	r4,r19
    8810:	0008eb40 	call	8eb4 <_free_r>
    8814:	88000c15 	stw	zero,48(r17)
    8818:	0005883a 	mov	r2,zero
    881c:	dfc00417 	ldw	ra,16(sp)
    8820:	dcc00317 	ldw	r19,12(sp)
    8824:	dc800217 	ldw	r18,8(sp)
    8828:	dc400117 	ldw	r17,4(sp)
    882c:	dc000017 	ldw	r16,0(sp)
    8830:	dec00504 	addi	sp,sp,20
    8834:	f800283a 	ret
    8838:	2c800417 	ldw	r18,16(r5)
    883c:	903ff626 	beq	r18,zero,8818 <__sflush_r+0xd0>
    8840:	2c000017 	ldw	r16,0(r5)
    8844:	108000cc 	andi	r2,r2,3
    8848:	2c800015 	stw	r18,0(r5)
    884c:	84a1c83a 	sub	r16,r16,r18
    8850:	1000131e 	bne	r2,zero,88a0 <__sflush_r+0x158>
    8854:	28800517 	ldw	r2,20(r5)
    8858:	88800215 	stw	r2,8(r17)
    885c:	04000316 	blt	zero,r16,886c <__sflush_r+0x124>
    8860:	003fed06 	br	8818 <__sflush_r+0xd0>
    8864:	90a5883a 	add	r18,r18,r2
    8868:	043feb0e 	bge	zero,r16,8818 <__sflush_r+0xd0>
    886c:	88800917 	ldw	r2,36(r17)
    8870:	89400717 	ldw	r5,28(r17)
    8874:	800f883a 	mov	r7,r16
    8878:	900d883a 	mov	r6,r18
    887c:	9809883a 	mov	r4,r19
    8880:	103ee83a 	callr	r2
    8884:	80a1c83a 	sub	r16,r16,r2
    8888:	00bff616 	blt	zero,r2,8864 <__sflush_r+0x11c>
    888c:	88c0030b 	ldhu	r3,12(r17)
    8890:	00bfffc4 	movi	r2,-1
    8894:	18c01014 	ori	r3,r3,64
    8898:	88c0030d 	sth	r3,12(r17)
    889c:	003fdf06 	br	881c <__sflush_r+0xd4>
    88a0:	0005883a 	mov	r2,zero
    88a4:	003fec06 	br	8858 <__sflush_r+0x110>
    88a8:	88801415 	stw	r2,80(r17)
    88ac:	003fd206 	br	87f8 <__sflush_r+0xb0>
    88b0:	28c00f17 	ldw	r3,60(r5)
    88b4:	00ffb316 	blt	zero,r3,8784 <__sflush_r+0x3c>
    88b8:	003fd706 	br	8818 <__sflush_r+0xd0>
    88bc:	89400717 	ldw	r5,28(r17)
    88c0:	000d883a 	mov	r6,zero
    88c4:	01c00044 	movi	r7,1
    88c8:	9809883a 	mov	r4,r19
    88cc:	403ee83a 	callr	r8
    88d0:	100d883a 	mov	r6,r2
    88d4:	00bfffc4 	movi	r2,-1
    88d8:	30801426 	beq	r6,r2,892c <__sflush_r+0x1e4>
    88dc:	8880030b 	ldhu	r2,12(r17)
    88e0:	8a000a17 	ldw	r8,40(r17)
    88e4:	003fae06 	br	87a0 <__sflush_r+0x58>
    88e8:	98c00017 	ldw	r3,0(r19)
    88ec:	183fba26 	beq	r3,zero,87d8 <__sflush_r+0x90>
    88f0:	01000744 	movi	r4,29
    88f4:	19000626 	beq	r3,r4,8910 <__sflush_r+0x1c8>
    88f8:	01000584 	movi	r4,22
    88fc:	19000426 	beq	r3,r4,8910 <__sflush_r+0x1c8>
    8900:	88c0030b 	ldhu	r3,12(r17)
    8904:	18c01014 	ori	r3,r3,64
    8908:	88c0030d 	sth	r3,12(r17)
    890c:	003fc306 	br	881c <__sflush_r+0xd4>
    8910:	8880030b 	ldhu	r2,12(r17)
    8914:	88c00417 	ldw	r3,16(r17)
    8918:	88000115 	stw	zero,4(r17)
    891c:	10bdffcc 	andi	r2,r2,63487
    8920:	8880030d 	sth	r2,12(r17)
    8924:	88c00015 	stw	r3,0(r17)
    8928:	003fb306 	br	87f8 <__sflush_r+0xb0>
    892c:	98800017 	ldw	r2,0(r19)
    8930:	103fea26 	beq	r2,zero,88dc <__sflush_r+0x194>
    8934:	00c00744 	movi	r3,29
    8938:	10c00226 	beq	r2,r3,8944 <__sflush_r+0x1fc>
    893c:	00c00584 	movi	r3,22
    8940:	10c0031e 	bne	r2,r3,8950 <__sflush_r+0x208>
    8944:	9c000015 	stw	r16,0(r19)
    8948:	0005883a 	mov	r2,zero
    894c:	003fb306 	br	881c <__sflush_r+0xd4>
    8950:	88c0030b 	ldhu	r3,12(r17)
    8954:	3005883a 	mov	r2,r6
    8958:	18c01014 	ori	r3,r3,64
    895c:	88c0030d 	sth	r3,12(r17)
    8960:	003fae06 	br	881c <__sflush_r+0xd4>

00008964 <_fflush_r>:
    8964:	defffd04 	addi	sp,sp,-12
    8968:	dc000115 	stw	r16,4(sp)
    896c:	dfc00215 	stw	ra,8(sp)
    8970:	2021883a 	mov	r16,r4
    8974:	20000226 	beq	r4,zero,8980 <_fflush_r+0x1c>
    8978:	20800e17 	ldw	r2,56(r4)
    897c:	10000c26 	beq	r2,zero,89b0 <_fflush_r+0x4c>
    8980:	2880030f 	ldh	r2,12(r5)
    8984:	1000051e 	bne	r2,zero,899c <_fflush_r+0x38>
    8988:	0005883a 	mov	r2,zero
    898c:	dfc00217 	ldw	ra,8(sp)
    8990:	dc000117 	ldw	r16,4(sp)
    8994:	dec00304 	addi	sp,sp,12
    8998:	f800283a 	ret
    899c:	8009883a 	mov	r4,r16
    89a0:	dfc00217 	ldw	ra,8(sp)
    89a4:	dc000117 	ldw	r16,4(sp)
    89a8:	dec00304 	addi	sp,sp,12
    89ac:	00087481 	jmpi	8748 <__sflush_r>
    89b0:	d9400015 	stw	r5,0(sp)
    89b4:	0008d400 	call	8d40 <__sinit>
    89b8:	d9400017 	ldw	r5,0(sp)
    89bc:	003ff006 	br	8980 <_fflush_r+0x1c>

000089c0 <fflush>:
    89c0:	20000526 	beq	r4,zero,89d8 <fflush+0x18>
    89c4:	008000b4 	movhi	r2,2
    89c8:	1085ef04 	addi	r2,r2,6076
    89cc:	200b883a 	mov	r5,r4
    89d0:	11000017 	ldw	r4,0(r2)
    89d4:	00089641 	jmpi	8964 <_fflush_r>
    89d8:	008000b4 	movhi	r2,2
    89dc:	1085ee04 	addi	r2,r2,6072
    89e0:	11000017 	ldw	r4,0(r2)
    89e4:	01400074 	movhi	r5,1
    89e8:	29625904 	addi	r5,r5,-30364
    89ec:	00092881 	jmpi	9288 <_fwalk_reent>

000089f0 <__fp_unlock>:
    89f0:	0005883a 	mov	r2,zero
    89f4:	f800283a 	ret

000089f8 <_cleanup_r>:
    89f8:	01400074 	movhi	r5,1
    89fc:	2977cf04 	addi	r5,r5,-8388
    8a00:	00092881 	jmpi	9288 <_fwalk_reent>

00008a04 <__sinit.part.1>:
    8a04:	defff704 	addi	sp,sp,-36
    8a08:	00c00074 	movhi	r3,1
    8a0c:	dfc00815 	stw	ra,32(sp)
    8a10:	ddc00715 	stw	r23,28(sp)
    8a14:	dd800615 	stw	r22,24(sp)
    8a18:	dd400515 	stw	r21,20(sp)
    8a1c:	dd000415 	stw	r20,16(sp)
    8a20:	dcc00315 	stw	r19,12(sp)
    8a24:	dc800215 	stw	r18,8(sp)
    8a28:	dc400115 	stw	r17,4(sp)
    8a2c:	dc000015 	stw	r16,0(sp)
    8a30:	18e27e04 	addi	r3,r3,-30216
    8a34:	24000117 	ldw	r16,4(r4)
    8a38:	20c00f15 	stw	r3,60(r4)
    8a3c:	2080bb04 	addi	r2,r4,748
    8a40:	00c000c4 	movi	r3,3
    8a44:	20c0b915 	stw	r3,740(r4)
    8a48:	2080ba15 	stw	r2,744(r4)
    8a4c:	2000b815 	stw	zero,736(r4)
    8a50:	05c00204 	movi	r23,8
    8a54:	00800104 	movi	r2,4
    8a58:	2025883a 	mov	r18,r4
    8a5c:	b80d883a 	mov	r6,r23
    8a60:	81001704 	addi	r4,r16,92
    8a64:	000b883a 	mov	r5,zero
    8a68:	80000015 	stw	zero,0(r16)
    8a6c:	80000115 	stw	zero,4(r16)
    8a70:	80000215 	stw	zero,8(r16)
    8a74:	8080030d 	sth	r2,12(r16)
    8a78:	80001915 	stw	zero,100(r16)
    8a7c:	8000038d 	sth	zero,14(r16)
    8a80:	80000415 	stw	zero,16(r16)
    8a84:	80000515 	stw	zero,20(r16)
    8a88:	80000615 	stw	zero,24(r16)
    8a8c:	0009ed40 	call	9ed4 <memset>
    8a90:	05800074 	movhi	r22,1
    8a94:	94400217 	ldw	r17,8(r18)
    8a98:	05400074 	movhi	r21,1
    8a9c:	05000074 	movhi	r20,1
    8aa0:	04c00074 	movhi	r19,1
    8aa4:	b5ac3004 	addi	r22,r22,-20288
    8aa8:	ad6c4704 	addi	r21,r21,-20196
    8aac:	a52c6604 	addi	r20,r20,-20072
    8ab0:	9cec7d04 	addi	r19,r19,-19980
    8ab4:	85800815 	stw	r22,32(r16)
    8ab8:	85400915 	stw	r21,36(r16)
    8abc:	85000a15 	stw	r20,40(r16)
    8ac0:	84c00b15 	stw	r19,44(r16)
    8ac4:	84000715 	stw	r16,28(r16)
    8ac8:	00800284 	movi	r2,10
    8acc:	8880030d 	sth	r2,12(r17)
    8ad0:	00800044 	movi	r2,1
    8ad4:	b80d883a 	mov	r6,r23
    8ad8:	89001704 	addi	r4,r17,92
    8adc:	000b883a 	mov	r5,zero
    8ae0:	88000015 	stw	zero,0(r17)
    8ae4:	88000115 	stw	zero,4(r17)
    8ae8:	88000215 	stw	zero,8(r17)
    8aec:	88001915 	stw	zero,100(r17)
    8af0:	8880038d 	sth	r2,14(r17)
    8af4:	88000415 	stw	zero,16(r17)
    8af8:	88000515 	stw	zero,20(r17)
    8afc:	88000615 	stw	zero,24(r17)
    8b00:	0009ed40 	call	9ed4 <memset>
    8b04:	94000317 	ldw	r16,12(r18)
    8b08:	00800484 	movi	r2,18
    8b0c:	8c400715 	stw	r17,28(r17)
    8b10:	8d800815 	stw	r22,32(r17)
    8b14:	8d400915 	stw	r21,36(r17)
    8b18:	8d000a15 	stw	r20,40(r17)
    8b1c:	8cc00b15 	stw	r19,44(r17)
    8b20:	8080030d 	sth	r2,12(r16)
    8b24:	00800084 	movi	r2,2
    8b28:	80000015 	stw	zero,0(r16)
    8b2c:	80000115 	stw	zero,4(r16)
    8b30:	80000215 	stw	zero,8(r16)
    8b34:	80001915 	stw	zero,100(r16)
    8b38:	8080038d 	sth	r2,14(r16)
    8b3c:	80000415 	stw	zero,16(r16)
    8b40:	80000515 	stw	zero,20(r16)
    8b44:	80000615 	stw	zero,24(r16)
    8b48:	b80d883a 	mov	r6,r23
    8b4c:	000b883a 	mov	r5,zero
    8b50:	81001704 	addi	r4,r16,92
    8b54:	0009ed40 	call	9ed4 <memset>
    8b58:	00800044 	movi	r2,1
    8b5c:	84000715 	stw	r16,28(r16)
    8b60:	85800815 	stw	r22,32(r16)
    8b64:	85400915 	stw	r21,36(r16)
    8b68:	85000a15 	stw	r20,40(r16)
    8b6c:	84c00b15 	stw	r19,44(r16)
    8b70:	90800e15 	stw	r2,56(r18)
    8b74:	dfc00817 	ldw	ra,32(sp)
    8b78:	ddc00717 	ldw	r23,28(sp)
    8b7c:	dd800617 	ldw	r22,24(sp)
    8b80:	dd400517 	ldw	r21,20(sp)
    8b84:	dd000417 	ldw	r20,16(sp)
    8b88:	dcc00317 	ldw	r19,12(sp)
    8b8c:	dc800217 	ldw	r18,8(sp)
    8b90:	dc400117 	ldw	r17,4(sp)
    8b94:	dc000017 	ldw	r16,0(sp)
    8b98:	dec00904 	addi	sp,sp,36
    8b9c:	f800283a 	ret

00008ba0 <__fp_lock>:
    8ba0:	0005883a 	mov	r2,zero
    8ba4:	f800283a 	ret

00008ba8 <__sfmoreglue>:
    8ba8:	defffc04 	addi	sp,sp,-16
    8bac:	dc400115 	stw	r17,4(sp)
    8bb0:	2c7fffc4 	addi	r17,r5,-1
    8bb4:	8c401a24 	muli	r17,r17,104
    8bb8:	dc800215 	stw	r18,8(sp)
    8bbc:	2825883a 	mov	r18,r5
    8bc0:	89401d04 	addi	r5,r17,116
    8bc4:	dc000015 	stw	r16,0(sp)
    8bc8:	dfc00315 	stw	ra,12(sp)
    8bcc:	00095e40 	call	95e4 <_malloc_r>
    8bd0:	1021883a 	mov	r16,r2
    8bd4:	10000726 	beq	r2,zero,8bf4 <__sfmoreglue+0x4c>
    8bd8:	11000304 	addi	r4,r2,12
    8bdc:	10000015 	stw	zero,0(r2)
    8be0:	14800115 	stw	r18,4(r2)
    8be4:	11000215 	stw	r4,8(r2)
    8be8:	89801a04 	addi	r6,r17,104
    8bec:	000b883a 	mov	r5,zero
    8bf0:	0009ed40 	call	9ed4 <memset>
    8bf4:	8005883a 	mov	r2,r16
    8bf8:	dfc00317 	ldw	ra,12(sp)
    8bfc:	dc800217 	ldw	r18,8(sp)
    8c00:	dc400117 	ldw	r17,4(sp)
    8c04:	dc000017 	ldw	r16,0(sp)
    8c08:	dec00404 	addi	sp,sp,16
    8c0c:	f800283a 	ret

00008c10 <__sfp>:
    8c10:	defffb04 	addi	sp,sp,-20
    8c14:	dc000015 	stw	r16,0(sp)
    8c18:	040000b4 	movhi	r16,2
    8c1c:	8405ee04 	addi	r16,r16,6072
    8c20:	dcc00315 	stw	r19,12(sp)
    8c24:	2027883a 	mov	r19,r4
    8c28:	81000017 	ldw	r4,0(r16)
    8c2c:	dfc00415 	stw	ra,16(sp)
    8c30:	dc800215 	stw	r18,8(sp)
    8c34:	20800e17 	ldw	r2,56(r4)
    8c38:	dc400115 	stw	r17,4(sp)
    8c3c:	1000021e 	bne	r2,zero,8c48 <__sfp+0x38>
    8c40:	0008a040 	call	8a04 <__sinit.part.1>
    8c44:	81000017 	ldw	r4,0(r16)
    8c48:	2480b804 	addi	r18,r4,736
    8c4c:	047fffc4 	movi	r17,-1
    8c50:	91000117 	ldw	r4,4(r18)
    8c54:	94000217 	ldw	r16,8(r18)
    8c58:	213fffc4 	addi	r4,r4,-1
    8c5c:	20000a16 	blt	r4,zero,8c88 <__sfp+0x78>
    8c60:	8080030f 	ldh	r2,12(r16)
    8c64:	10000c26 	beq	r2,zero,8c98 <__sfp+0x88>
    8c68:	80c01d04 	addi	r3,r16,116
    8c6c:	00000206 	br	8c78 <__sfp+0x68>
    8c70:	18bfe60f 	ldh	r2,-104(r3)
    8c74:	10000826 	beq	r2,zero,8c98 <__sfp+0x88>
    8c78:	213fffc4 	addi	r4,r4,-1
    8c7c:	1c3ffd04 	addi	r16,r3,-12
    8c80:	18c01a04 	addi	r3,r3,104
    8c84:	247ffa1e 	bne	r4,r17,8c70 <__sfp+0x60>
    8c88:	90800017 	ldw	r2,0(r18)
    8c8c:	10001d26 	beq	r2,zero,8d04 <__sfp+0xf4>
    8c90:	1025883a 	mov	r18,r2
    8c94:	003fee06 	br	8c50 <__sfp+0x40>
    8c98:	00bfffc4 	movi	r2,-1
    8c9c:	8080038d 	sth	r2,14(r16)
    8ca0:	00800044 	movi	r2,1
    8ca4:	8080030d 	sth	r2,12(r16)
    8ca8:	80001915 	stw	zero,100(r16)
    8cac:	80000015 	stw	zero,0(r16)
    8cb0:	80000215 	stw	zero,8(r16)
    8cb4:	80000115 	stw	zero,4(r16)
    8cb8:	80000415 	stw	zero,16(r16)
    8cbc:	80000515 	stw	zero,20(r16)
    8cc0:	80000615 	stw	zero,24(r16)
    8cc4:	01800204 	movi	r6,8
    8cc8:	000b883a 	mov	r5,zero
    8ccc:	81001704 	addi	r4,r16,92
    8cd0:	0009ed40 	call	9ed4 <memset>
    8cd4:	8005883a 	mov	r2,r16
    8cd8:	80000c15 	stw	zero,48(r16)
    8cdc:	80000d15 	stw	zero,52(r16)
    8ce0:	80001115 	stw	zero,68(r16)
    8ce4:	80001215 	stw	zero,72(r16)
    8ce8:	dfc00417 	ldw	ra,16(sp)
    8cec:	dcc00317 	ldw	r19,12(sp)
    8cf0:	dc800217 	ldw	r18,8(sp)
    8cf4:	dc400117 	ldw	r17,4(sp)
    8cf8:	dc000017 	ldw	r16,0(sp)
    8cfc:	dec00504 	addi	sp,sp,20
    8d00:	f800283a 	ret
    8d04:	01400104 	movi	r5,4
    8d08:	9809883a 	mov	r4,r19
    8d0c:	0008ba80 	call	8ba8 <__sfmoreglue>
    8d10:	90800015 	stw	r2,0(r18)
    8d14:	103fde1e 	bne	r2,zero,8c90 <__sfp+0x80>
    8d18:	00800304 	movi	r2,12
    8d1c:	98800015 	stw	r2,0(r19)
    8d20:	0005883a 	mov	r2,zero
    8d24:	003ff006 	br	8ce8 <__sfp+0xd8>

00008d28 <_cleanup>:
    8d28:	008000b4 	movhi	r2,2
    8d2c:	1085ee04 	addi	r2,r2,6072
    8d30:	11000017 	ldw	r4,0(r2)
    8d34:	01400074 	movhi	r5,1
    8d38:	2977cf04 	addi	r5,r5,-8388
    8d3c:	00092881 	jmpi	9288 <_fwalk_reent>

00008d40 <__sinit>:
    8d40:	20800e17 	ldw	r2,56(r4)
    8d44:	10000126 	beq	r2,zero,8d4c <__sinit+0xc>
    8d48:	f800283a 	ret
    8d4c:	0008a041 	jmpi	8a04 <__sinit.part.1>

00008d50 <__sfp_lock_acquire>:
    8d50:	f800283a 	ret

00008d54 <__sfp_lock_release>:
    8d54:	f800283a 	ret

00008d58 <__sinit_lock_acquire>:
    8d58:	f800283a 	ret

00008d5c <__sinit_lock_release>:
    8d5c:	f800283a 	ret

00008d60 <__fp_lock_all>:
    8d60:	008000b4 	movhi	r2,2
    8d64:	1085ef04 	addi	r2,r2,6076
    8d68:	11000017 	ldw	r4,0(r2)
    8d6c:	01400074 	movhi	r5,1
    8d70:	2962e804 	addi	r5,r5,-29792
    8d74:	00091c41 	jmpi	91c4 <_fwalk>

00008d78 <__fp_unlock_all>:
    8d78:	008000b4 	movhi	r2,2
    8d7c:	1085ef04 	addi	r2,r2,6076
    8d80:	11000017 	ldw	r4,0(r2)
    8d84:	01400074 	movhi	r5,1
    8d88:	29627c04 	addi	r5,r5,-30224
    8d8c:	00091c41 	jmpi	91c4 <_fwalk>

00008d90 <_malloc_trim_r>:
    8d90:	defffb04 	addi	sp,sp,-20
    8d94:	dcc00315 	stw	r19,12(sp)
    8d98:	04c000b4 	movhi	r19,2
    8d9c:	dc800215 	stw	r18,8(sp)
    8da0:	dc400115 	stw	r17,4(sp)
    8da4:	dc000015 	stw	r16,0(sp)
    8da8:	dfc00415 	stw	ra,16(sp)
    8dac:	2821883a 	mov	r16,r5
    8db0:	9cffa204 	addi	r19,r19,-376
    8db4:	2025883a 	mov	r18,r4
    8db8:	0012fa00 	call	12fa0 <__malloc_lock>
    8dbc:	98800217 	ldw	r2,8(r19)
    8dc0:	14400117 	ldw	r17,4(r2)
    8dc4:	00bfff04 	movi	r2,-4
    8dc8:	88a2703a 	and	r17,r17,r2
    8dcc:	8c21c83a 	sub	r16,r17,r16
    8dd0:	8403fbc4 	addi	r16,r16,4079
    8dd4:	8020d33a 	srli	r16,r16,12
    8dd8:	0083ffc4 	movi	r2,4095
    8ddc:	843fffc4 	addi	r16,r16,-1
    8de0:	8020933a 	slli	r16,r16,12
    8de4:	1400060e 	bge	r2,r16,8e00 <_malloc_trim_r+0x70>
    8de8:	000b883a 	mov	r5,zero
    8dec:	9009883a 	mov	r4,r18
    8df0:	000b06c0 	call	b06c <_sbrk_r>
    8df4:	98c00217 	ldw	r3,8(r19)
    8df8:	1c47883a 	add	r3,r3,r17
    8dfc:	10c00a26 	beq	r2,r3,8e28 <_malloc_trim_r+0x98>
    8e00:	9009883a 	mov	r4,r18
    8e04:	00130c00 	call	130c0 <__malloc_unlock>
    8e08:	0005883a 	mov	r2,zero
    8e0c:	dfc00417 	ldw	ra,16(sp)
    8e10:	dcc00317 	ldw	r19,12(sp)
    8e14:	dc800217 	ldw	r18,8(sp)
    8e18:	dc400117 	ldw	r17,4(sp)
    8e1c:	dc000017 	ldw	r16,0(sp)
    8e20:	dec00504 	addi	sp,sp,20
    8e24:	f800283a 	ret
    8e28:	040bc83a 	sub	r5,zero,r16
    8e2c:	9009883a 	mov	r4,r18
    8e30:	000b06c0 	call	b06c <_sbrk_r>
    8e34:	00ffffc4 	movi	r3,-1
    8e38:	10c00d26 	beq	r2,r3,8e70 <_malloc_trim_r+0xe0>
    8e3c:	00c000b4 	movhi	r3,2
    8e40:	18ce1504 	addi	r3,r3,14420
    8e44:	18800017 	ldw	r2,0(r3)
    8e48:	99000217 	ldw	r4,8(r19)
    8e4c:	8c23c83a 	sub	r17,r17,r16
    8e50:	8c400054 	ori	r17,r17,1
    8e54:	1421c83a 	sub	r16,r2,r16
    8e58:	24400115 	stw	r17,4(r4)
    8e5c:	9009883a 	mov	r4,r18
    8e60:	1c000015 	stw	r16,0(r3)
    8e64:	00130c00 	call	130c0 <__malloc_unlock>
    8e68:	00800044 	movi	r2,1
    8e6c:	003fe706 	br	8e0c <_malloc_trim_r+0x7c>
    8e70:	000b883a 	mov	r5,zero
    8e74:	9009883a 	mov	r4,r18
    8e78:	000b06c0 	call	b06c <_sbrk_r>
    8e7c:	99000217 	ldw	r4,8(r19)
    8e80:	014003c4 	movi	r5,15
    8e84:	1107c83a 	sub	r3,r2,r4
    8e88:	28ffdd0e 	bge	r5,r3,8e00 <_malloc_trim_r+0x70>
    8e8c:	014000b4 	movhi	r5,2
    8e90:	2945f104 	addi	r5,r5,6084
    8e94:	29400017 	ldw	r5,0(r5)
    8e98:	18c00054 	ori	r3,r3,1
    8e9c:	20c00115 	stw	r3,4(r4)
    8ea0:	00c000b4 	movhi	r3,2
    8ea4:	1145c83a 	sub	r2,r2,r5
    8ea8:	18ce1504 	addi	r3,r3,14420
    8eac:	18800015 	stw	r2,0(r3)
    8eb0:	003fd306 	br	8e00 <_malloc_trim_r+0x70>

00008eb4 <_free_r>:
    8eb4:	28004126 	beq	r5,zero,8fbc <_free_r+0x108>
    8eb8:	defffd04 	addi	sp,sp,-12
    8ebc:	dc400115 	stw	r17,4(sp)
    8ec0:	dc000015 	stw	r16,0(sp)
    8ec4:	2023883a 	mov	r17,r4
    8ec8:	2821883a 	mov	r16,r5
    8ecc:	dfc00215 	stw	ra,8(sp)
    8ed0:	0012fa00 	call	12fa0 <__malloc_lock>
    8ed4:	81ffff17 	ldw	r7,-4(r16)
    8ed8:	00bfff84 	movi	r2,-2
    8edc:	010000b4 	movhi	r4,2
    8ee0:	81bffe04 	addi	r6,r16,-8
    8ee4:	3884703a 	and	r2,r7,r2
    8ee8:	213fa204 	addi	r4,r4,-376
    8eec:	308b883a 	add	r5,r6,r2
    8ef0:	2a400117 	ldw	r9,4(r5)
    8ef4:	22000217 	ldw	r8,8(r4)
    8ef8:	00ffff04 	movi	r3,-4
    8efc:	48c6703a 	and	r3,r9,r3
    8f00:	2a005726 	beq	r5,r8,9060 <_free_r+0x1ac>
    8f04:	28c00115 	stw	r3,4(r5)
    8f08:	39c0004c 	andi	r7,r7,1
    8f0c:	3800091e 	bne	r7,zero,8f34 <_free_r+0x80>
    8f10:	823ffe17 	ldw	r8,-8(r16)
    8f14:	22400204 	addi	r9,r4,8
    8f18:	320dc83a 	sub	r6,r6,r8
    8f1c:	31c00217 	ldw	r7,8(r6)
    8f20:	1205883a 	add	r2,r2,r8
    8f24:	3a406526 	beq	r7,r9,90bc <_free_r+0x208>
    8f28:	32000317 	ldw	r8,12(r6)
    8f2c:	3a000315 	stw	r8,12(r7)
    8f30:	41c00215 	stw	r7,8(r8)
    8f34:	28cf883a 	add	r7,r5,r3
    8f38:	39c00117 	ldw	r7,4(r7)
    8f3c:	39c0004c 	andi	r7,r7,1
    8f40:	38003a26 	beq	r7,zero,902c <_free_r+0x178>
    8f44:	10c00054 	ori	r3,r2,1
    8f48:	30c00115 	stw	r3,4(r6)
    8f4c:	3087883a 	add	r3,r6,r2
    8f50:	18800015 	stw	r2,0(r3)
    8f54:	00c07fc4 	movi	r3,511
    8f58:	18801936 	bltu	r3,r2,8fc0 <_free_r+0x10c>
    8f5c:	1004d0fa 	srli	r2,r2,3
    8f60:	01c00044 	movi	r7,1
    8f64:	21400117 	ldw	r5,4(r4)
    8f68:	10c00044 	addi	r3,r2,1
    8f6c:	18c7883a 	add	r3,r3,r3
    8f70:	1005d0ba 	srai	r2,r2,2
    8f74:	18c7883a 	add	r3,r3,r3
    8f78:	18c7883a 	add	r3,r3,r3
    8f7c:	1907883a 	add	r3,r3,r4
    8f80:	3884983a 	sll	r2,r7,r2
    8f84:	19c00017 	ldw	r7,0(r3)
    8f88:	1a3ffe04 	addi	r8,r3,-8
    8f8c:	1144b03a 	or	r2,r2,r5
    8f90:	32000315 	stw	r8,12(r6)
    8f94:	31c00215 	stw	r7,8(r6)
    8f98:	20800115 	stw	r2,4(r4)
    8f9c:	19800015 	stw	r6,0(r3)
    8fa0:	39800315 	stw	r6,12(r7)
    8fa4:	8809883a 	mov	r4,r17
    8fa8:	dfc00217 	ldw	ra,8(sp)
    8fac:	dc400117 	ldw	r17,4(sp)
    8fb0:	dc000017 	ldw	r16,0(sp)
    8fb4:	dec00304 	addi	sp,sp,12
    8fb8:	00130c01 	jmpi	130c0 <__malloc_unlock>
    8fbc:	f800283a 	ret
    8fc0:	100ad27a 	srli	r5,r2,9
    8fc4:	00c00104 	movi	r3,4
    8fc8:	19404a36 	bltu	r3,r5,90f4 <_free_r+0x240>
    8fcc:	100ad1ba 	srli	r5,r2,6
    8fd0:	28c00e44 	addi	r3,r5,57
    8fd4:	18c7883a 	add	r3,r3,r3
    8fd8:	29400e04 	addi	r5,r5,56
    8fdc:	18c7883a 	add	r3,r3,r3
    8fe0:	18c7883a 	add	r3,r3,r3
    8fe4:	1909883a 	add	r4,r3,r4
    8fe8:	20c00017 	ldw	r3,0(r4)
    8fec:	01c000b4 	movhi	r7,2
    8ff0:	213ffe04 	addi	r4,r4,-8
    8ff4:	39ffa204 	addi	r7,r7,-376
    8ff8:	20c04426 	beq	r4,r3,910c <_free_r+0x258>
    8ffc:	01ffff04 	movi	r7,-4
    9000:	19400117 	ldw	r5,4(r3)
    9004:	29ca703a 	and	r5,r5,r7
    9008:	1140022e 	bgeu	r2,r5,9014 <_free_r+0x160>
    900c:	18c00217 	ldw	r3,8(r3)
    9010:	20fffb1e 	bne	r4,r3,9000 <_free_r+0x14c>
    9014:	19000317 	ldw	r4,12(r3)
    9018:	31000315 	stw	r4,12(r6)
    901c:	30c00215 	stw	r3,8(r6)
    9020:	21800215 	stw	r6,8(r4)
    9024:	19800315 	stw	r6,12(r3)
    9028:	003fde06 	br	8fa4 <_free_r+0xf0>
    902c:	29c00217 	ldw	r7,8(r5)
    9030:	10c5883a 	add	r2,r2,r3
    9034:	00c000b4 	movhi	r3,2
    9038:	18ffa404 	addi	r3,r3,-368
    903c:	38c03b26 	beq	r7,r3,912c <_free_r+0x278>
    9040:	2a000317 	ldw	r8,12(r5)
    9044:	11400054 	ori	r5,r2,1
    9048:	3087883a 	add	r3,r6,r2
    904c:	3a000315 	stw	r8,12(r7)
    9050:	41c00215 	stw	r7,8(r8)
    9054:	31400115 	stw	r5,4(r6)
    9058:	18800015 	stw	r2,0(r3)
    905c:	003fbd06 	br	8f54 <_free_r+0xa0>
    9060:	39c0004c 	andi	r7,r7,1
    9064:	10c5883a 	add	r2,r2,r3
    9068:	3800071e 	bne	r7,zero,9088 <_free_r+0x1d4>
    906c:	81fffe17 	ldw	r7,-8(r16)
    9070:	31cdc83a 	sub	r6,r6,r7
    9074:	30c00317 	ldw	r3,12(r6)
    9078:	31400217 	ldw	r5,8(r6)
    907c:	11c5883a 	add	r2,r2,r7
    9080:	28c00315 	stw	r3,12(r5)
    9084:	19400215 	stw	r5,8(r3)
    9088:	10c00054 	ori	r3,r2,1
    908c:	30c00115 	stw	r3,4(r6)
    9090:	00c000b4 	movhi	r3,2
    9094:	18c5f204 	addi	r3,r3,6088
    9098:	18c00017 	ldw	r3,0(r3)
    909c:	21800215 	stw	r6,8(r4)
    90a0:	10ffc036 	bltu	r2,r3,8fa4 <_free_r+0xf0>
    90a4:	008000b4 	movhi	r2,2
    90a8:	108df304 	addi	r2,r2,14284
    90ac:	11400017 	ldw	r5,0(r2)
    90b0:	8809883a 	mov	r4,r17
    90b4:	0008d900 	call	8d90 <_malloc_trim_r>
    90b8:	003fba06 	br	8fa4 <_free_r+0xf0>
    90bc:	28c9883a 	add	r4,r5,r3
    90c0:	21000117 	ldw	r4,4(r4)
    90c4:	2100004c 	andi	r4,r4,1
    90c8:	2000391e 	bne	r4,zero,91b0 <_free_r+0x2fc>
    90cc:	29c00217 	ldw	r7,8(r5)
    90d0:	29000317 	ldw	r4,12(r5)
    90d4:	1885883a 	add	r2,r3,r2
    90d8:	10c00054 	ori	r3,r2,1
    90dc:	39000315 	stw	r4,12(r7)
    90e0:	21c00215 	stw	r7,8(r4)
    90e4:	30c00115 	stw	r3,4(r6)
    90e8:	308d883a 	add	r6,r6,r2
    90ec:	30800015 	stw	r2,0(r6)
    90f0:	003fac06 	br	8fa4 <_free_r+0xf0>
    90f4:	00c00504 	movi	r3,20
    90f8:	19401536 	bltu	r3,r5,9150 <_free_r+0x29c>
    90fc:	28c01704 	addi	r3,r5,92
    9100:	18c7883a 	add	r3,r3,r3
    9104:	294016c4 	addi	r5,r5,91
    9108:	003fb406 	br	8fdc <_free_r+0x128>
    910c:	280bd0ba 	srai	r5,r5,2
    9110:	00c00044 	movi	r3,1
    9114:	38800117 	ldw	r2,4(r7)
    9118:	194a983a 	sll	r5,r3,r5
    911c:	2007883a 	mov	r3,r4
    9120:	2884b03a 	or	r2,r5,r2
    9124:	38800115 	stw	r2,4(r7)
    9128:	003fbb06 	br	9018 <_free_r+0x164>
    912c:	21800515 	stw	r6,20(r4)
    9130:	21800415 	stw	r6,16(r4)
    9134:	10c00054 	ori	r3,r2,1
    9138:	31c00315 	stw	r7,12(r6)
    913c:	31c00215 	stw	r7,8(r6)
    9140:	30c00115 	stw	r3,4(r6)
    9144:	308d883a 	add	r6,r6,r2
    9148:	30800015 	stw	r2,0(r6)
    914c:	003f9506 	br	8fa4 <_free_r+0xf0>
    9150:	00c01504 	movi	r3,84
    9154:	19400536 	bltu	r3,r5,916c <_free_r+0x2b8>
    9158:	100ad33a 	srli	r5,r2,12
    915c:	28c01bc4 	addi	r3,r5,111
    9160:	18c7883a 	add	r3,r3,r3
    9164:	29401b84 	addi	r5,r5,110
    9168:	003f9c06 	br	8fdc <_free_r+0x128>
    916c:	00c05504 	movi	r3,340
    9170:	19400536 	bltu	r3,r5,9188 <_free_r+0x2d4>
    9174:	100ad3fa 	srli	r5,r2,15
    9178:	28c01e04 	addi	r3,r5,120
    917c:	18c7883a 	add	r3,r3,r3
    9180:	29401dc4 	addi	r5,r5,119
    9184:	003f9506 	br	8fdc <_free_r+0x128>
    9188:	00c15504 	movi	r3,1364
    918c:	19400536 	bltu	r3,r5,91a4 <_free_r+0x2f0>
    9190:	100ad4ba 	srli	r5,r2,18
    9194:	28c01f44 	addi	r3,r5,125
    9198:	18c7883a 	add	r3,r3,r3
    919c:	29401f04 	addi	r5,r5,124
    91a0:	003f8e06 	br	8fdc <_free_r+0x128>
    91a4:	00c03f84 	movi	r3,254
    91a8:	01401f84 	movi	r5,126
    91ac:	003f8b06 	br	8fdc <_free_r+0x128>
    91b0:	10c00054 	ori	r3,r2,1
    91b4:	30c00115 	stw	r3,4(r6)
    91b8:	308d883a 	add	r6,r6,r2
    91bc:	30800015 	stw	r2,0(r6)
    91c0:	003f7806 	br	8fa4 <_free_r+0xf0>

000091c4 <_fwalk>:
    91c4:	defff704 	addi	sp,sp,-36
    91c8:	dd000415 	stw	r20,16(sp)
    91cc:	dfc00815 	stw	ra,32(sp)
    91d0:	ddc00715 	stw	r23,28(sp)
    91d4:	dd800615 	stw	r22,24(sp)
    91d8:	dd400515 	stw	r21,20(sp)
    91dc:	dcc00315 	stw	r19,12(sp)
    91e0:	dc800215 	stw	r18,8(sp)
    91e4:	dc400115 	stw	r17,4(sp)
    91e8:	dc000015 	stw	r16,0(sp)
    91ec:	2500b804 	addi	r20,r4,736
    91f0:	a0002326 	beq	r20,zero,9280 <_fwalk+0xbc>
    91f4:	282b883a 	mov	r21,r5
    91f8:	002f883a 	mov	r23,zero
    91fc:	05800044 	movi	r22,1
    9200:	04ffffc4 	movi	r19,-1
    9204:	a4400117 	ldw	r17,4(r20)
    9208:	a4800217 	ldw	r18,8(r20)
    920c:	8c7fffc4 	addi	r17,r17,-1
    9210:	88000d16 	blt	r17,zero,9248 <_fwalk+0x84>
    9214:	94000304 	addi	r16,r18,12
    9218:	94800384 	addi	r18,r18,14
    921c:	8080000b 	ldhu	r2,0(r16)
    9220:	8c7fffc4 	addi	r17,r17,-1
    9224:	813ffd04 	addi	r4,r16,-12
    9228:	b080042e 	bgeu	r22,r2,923c <_fwalk+0x78>
    922c:	9080000f 	ldh	r2,0(r18)
    9230:	14c00226 	beq	r2,r19,923c <_fwalk+0x78>
    9234:	a83ee83a 	callr	r21
    9238:	b8aeb03a 	or	r23,r23,r2
    923c:	84001a04 	addi	r16,r16,104
    9240:	94801a04 	addi	r18,r18,104
    9244:	8cfff51e 	bne	r17,r19,921c <_fwalk+0x58>
    9248:	a5000017 	ldw	r20,0(r20)
    924c:	a03fed1e 	bne	r20,zero,9204 <_fwalk+0x40>
    9250:	b805883a 	mov	r2,r23
    9254:	dfc00817 	ldw	ra,32(sp)
    9258:	ddc00717 	ldw	r23,28(sp)
    925c:	dd800617 	ldw	r22,24(sp)
    9260:	dd400517 	ldw	r21,20(sp)
    9264:	dd000417 	ldw	r20,16(sp)
    9268:	dcc00317 	ldw	r19,12(sp)
    926c:	dc800217 	ldw	r18,8(sp)
    9270:	dc400117 	ldw	r17,4(sp)
    9274:	dc000017 	ldw	r16,0(sp)
    9278:	dec00904 	addi	sp,sp,36
    927c:	f800283a 	ret
    9280:	002f883a 	mov	r23,zero
    9284:	003ff206 	br	9250 <_fwalk+0x8c>

00009288 <_fwalk_reent>:
    9288:	defff704 	addi	sp,sp,-36
    928c:	dd000415 	stw	r20,16(sp)
    9290:	dfc00815 	stw	ra,32(sp)
    9294:	ddc00715 	stw	r23,28(sp)
    9298:	dd800615 	stw	r22,24(sp)
    929c:	dd400515 	stw	r21,20(sp)
    92a0:	dcc00315 	stw	r19,12(sp)
    92a4:	dc800215 	stw	r18,8(sp)
    92a8:	dc400115 	stw	r17,4(sp)
    92ac:	dc000015 	stw	r16,0(sp)
    92b0:	2500b804 	addi	r20,r4,736
    92b4:	a0002326 	beq	r20,zero,9344 <_fwalk_reent+0xbc>
    92b8:	282b883a 	mov	r21,r5
    92bc:	2027883a 	mov	r19,r4
    92c0:	002f883a 	mov	r23,zero
    92c4:	05800044 	movi	r22,1
    92c8:	04bfffc4 	movi	r18,-1
    92cc:	a4400117 	ldw	r17,4(r20)
    92d0:	a4000217 	ldw	r16,8(r20)
    92d4:	8c7fffc4 	addi	r17,r17,-1
    92d8:	88000c16 	blt	r17,zero,930c <_fwalk_reent+0x84>
    92dc:	84000304 	addi	r16,r16,12
    92e0:	8080000b 	ldhu	r2,0(r16)
    92e4:	8c7fffc4 	addi	r17,r17,-1
    92e8:	817ffd04 	addi	r5,r16,-12
    92ec:	b080052e 	bgeu	r22,r2,9304 <_fwalk_reent+0x7c>
    92f0:	8080008f 	ldh	r2,2(r16)
    92f4:	9809883a 	mov	r4,r19
    92f8:	14800226 	beq	r2,r18,9304 <_fwalk_reent+0x7c>
    92fc:	a83ee83a 	callr	r21
    9300:	b8aeb03a 	or	r23,r23,r2
    9304:	84001a04 	addi	r16,r16,104
    9308:	8cbff51e 	bne	r17,r18,92e0 <_fwalk_reent+0x58>
    930c:	a5000017 	ldw	r20,0(r20)
    9310:	a03fee1e 	bne	r20,zero,92cc <_fwalk_reent+0x44>
    9314:	b805883a 	mov	r2,r23
    9318:	dfc00817 	ldw	ra,32(sp)
    931c:	ddc00717 	ldw	r23,28(sp)
    9320:	dd800617 	ldw	r22,24(sp)
    9324:	dd400517 	ldw	r21,20(sp)
    9328:	dd000417 	ldw	r20,16(sp)
    932c:	dcc00317 	ldw	r19,12(sp)
    9330:	dc800217 	ldw	r18,8(sp)
    9334:	dc400117 	ldw	r17,4(sp)
    9338:	dc000017 	ldw	r16,0(sp)
    933c:	dec00904 	addi	sp,sp,36
    9340:	f800283a 	ret
    9344:	002f883a 	mov	r23,zero
    9348:	003ff206 	br	9314 <_fwalk_reent+0x8c>

0000934c <_setlocale_r>:
    934c:	30001b26 	beq	r6,zero,93bc <_setlocale_r+0x70>
    9350:	014000b4 	movhi	r5,2
    9354:	defffe04 	addi	sp,sp,-8
    9358:	297d2604 	addi	r5,r5,-2920
    935c:	3009883a 	mov	r4,r6
    9360:	dc000015 	stw	r16,0(sp)
    9364:	dfc00115 	stw	ra,4(sp)
    9368:	3021883a 	mov	r16,r6
    936c:	000b1fc0 	call	b1fc <strcmp>
    9370:	1000061e 	bne	r2,zero,938c <_setlocale_r+0x40>
    9374:	008000b4 	movhi	r2,2
    9378:	10bb4004 	addi	r2,r2,-4864
    937c:	dfc00117 	ldw	ra,4(sp)
    9380:	dc000017 	ldw	r16,0(sp)
    9384:	dec00204 	addi	sp,sp,8
    9388:	f800283a 	ret
    938c:	014000b4 	movhi	r5,2
    9390:	297b4004 	addi	r5,r5,-4864
    9394:	8009883a 	mov	r4,r16
    9398:	000b1fc0 	call	b1fc <strcmp>
    939c:	103ff526 	beq	r2,zero,9374 <_setlocale_r+0x28>
    93a0:	014000b4 	movhi	r5,2
    93a4:	297d0904 	addi	r5,r5,-3036
    93a8:	8009883a 	mov	r4,r16
    93ac:	000b1fc0 	call	b1fc <strcmp>
    93b0:	103ff026 	beq	r2,zero,9374 <_setlocale_r+0x28>
    93b4:	0005883a 	mov	r2,zero
    93b8:	003ff006 	br	937c <_setlocale_r+0x30>
    93bc:	008000b4 	movhi	r2,2
    93c0:	10bb4004 	addi	r2,r2,-4864
    93c4:	f800283a 	ret

000093c8 <__locale_charset>:
    93c8:	008000b4 	movhi	r2,2
    93cc:	10bf8c04 	addi	r2,r2,-464
    93d0:	f800283a 	ret

000093d4 <__locale_mb_cur_max>:
    93d4:	008000b4 	movhi	r2,2
    93d8:	1085f004 	addi	r2,r2,6080
    93dc:	10800017 	ldw	r2,0(r2)
    93e0:	f800283a 	ret

000093e4 <__locale_msgcharset>:
    93e4:	008000b4 	movhi	r2,2
    93e8:	10bf8404 	addi	r2,r2,-496
    93ec:	f800283a 	ret

000093f0 <__locale_cjk_lang>:
    93f0:	0005883a 	mov	r2,zero
    93f4:	f800283a 	ret

000093f8 <_localeconv_r>:
    93f8:	008000b4 	movhi	r2,2
    93fc:	10bf9404 	addi	r2,r2,-432
    9400:	f800283a 	ret

00009404 <setlocale>:
    9404:	008000b4 	movhi	r2,2
    9408:	1085ef04 	addi	r2,r2,6076
    940c:	280d883a 	mov	r6,r5
    9410:	200b883a 	mov	r5,r4
    9414:	11000017 	ldw	r4,0(r2)
    9418:	000934c1 	jmpi	934c <_setlocale_r>

0000941c <localeconv>:
    941c:	008000b4 	movhi	r2,2
    9420:	10bf9404 	addi	r2,r2,-432
    9424:	f800283a 	ret

00009428 <__smakebuf_r>:
    9428:	2880030b 	ldhu	r2,12(r5)
    942c:	10c0008c 	andi	r3,r2,2
    9430:	1800411e 	bne	r3,zero,9538 <__smakebuf_r+0x110>
    9434:	deffec04 	addi	sp,sp,-80
    9438:	dc000f15 	stw	r16,60(sp)
    943c:	2821883a 	mov	r16,r5
    9440:	2940038f 	ldh	r5,14(r5)
    9444:	dc401015 	stw	r17,64(sp)
    9448:	dfc01315 	stw	ra,76(sp)
    944c:	dcc01215 	stw	r19,72(sp)
    9450:	dc801115 	stw	r18,68(sp)
    9454:	2023883a 	mov	r17,r4
    9458:	28001c16 	blt	r5,zero,94cc <__smakebuf_r+0xa4>
    945c:	d80d883a 	mov	r6,sp
    9460:	000e2480 	call	e248 <_fstat_r>
    9464:	10001816 	blt	r2,zero,94c8 <__smakebuf_r+0xa0>
    9468:	d8800117 	ldw	r2,4(sp)
    946c:	00e00014 	movui	r3,32768
    9470:	10bc000c 	andi	r2,r2,61440
    9474:	14c80020 	cmpeqi	r19,r2,8192
    9478:	10c03726 	beq	r2,r3,9558 <__smakebuf_r+0x130>
    947c:	80c0030b 	ldhu	r3,12(r16)
    9480:	18c20014 	ori	r3,r3,2048
    9484:	80c0030d 	sth	r3,12(r16)
    9488:	00c80004 	movi	r3,8192
    948c:	10c0521e 	bne	r2,r3,95d8 <__smakebuf_r+0x1b0>
    9490:	8140038f 	ldh	r5,14(r16)
    9494:	8809883a 	mov	r4,r17
    9498:	000e7600 	call	e760 <_isatty_r>
    949c:	10004c26 	beq	r2,zero,95d0 <__smakebuf_r+0x1a8>
    94a0:	8080030b 	ldhu	r2,12(r16)
    94a4:	80c010c4 	addi	r3,r16,67
    94a8:	80c00015 	stw	r3,0(r16)
    94ac:	10800054 	ori	r2,r2,1
    94b0:	8080030d 	sth	r2,12(r16)
    94b4:	00800044 	movi	r2,1
    94b8:	80c00415 	stw	r3,16(r16)
    94bc:	80800515 	stw	r2,20(r16)
    94c0:	04810004 	movi	r18,1024
    94c4:	00000706 	br	94e4 <__smakebuf_r+0xbc>
    94c8:	8080030b 	ldhu	r2,12(r16)
    94cc:	10c0200c 	andi	r3,r2,128
    94d0:	18001f1e 	bne	r3,zero,9550 <__smakebuf_r+0x128>
    94d4:	04810004 	movi	r18,1024
    94d8:	10820014 	ori	r2,r2,2048
    94dc:	8080030d 	sth	r2,12(r16)
    94e0:	0027883a 	mov	r19,zero
    94e4:	900b883a 	mov	r5,r18
    94e8:	8809883a 	mov	r4,r17
    94ec:	00095e40 	call	95e4 <_malloc_r>
    94f0:	10002c26 	beq	r2,zero,95a4 <__smakebuf_r+0x17c>
    94f4:	80c0030b 	ldhu	r3,12(r16)
    94f8:	01000074 	movhi	r4,1
    94fc:	21227e04 	addi	r4,r4,-30216
    9500:	89000f15 	stw	r4,60(r17)
    9504:	18c02014 	ori	r3,r3,128
    9508:	80c0030d 	sth	r3,12(r16)
    950c:	80800015 	stw	r2,0(r16)
    9510:	80800415 	stw	r2,16(r16)
    9514:	84800515 	stw	r18,20(r16)
    9518:	98001a1e 	bne	r19,zero,9584 <__smakebuf_r+0x15c>
    951c:	dfc01317 	ldw	ra,76(sp)
    9520:	dcc01217 	ldw	r19,72(sp)
    9524:	dc801117 	ldw	r18,68(sp)
    9528:	dc401017 	ldw	r17,64(sp)
    952c:	dc000f17 	ldw	r16,60(sp)
    9530:	dec01404 	addi	sp,sp,80
    9534:	f800283a 	ret
    9538:	288010c4 	addi	r2,r5,67
    953c:	28800015 	stw	r2,0(r5)
    9540:	28800415 	stw	r2,16(r5)
    9544:	00800044 	movi	r2,1
    9548:	28800515 	stw	r2,20(r5)
    954c:	f800283a 	ret
    9550:	04801004 	movi	r18,64
    9554:	003fe006 	br	94d8 <__smakebuf_r+0xb0>
    9558:	81000a17 	ldw	r4,40(r16)
    955c:	00c00074 	movhi	r3,1
    9560:	18ec6604 	addi	r3,r3,-20072
    9564:	20ffc51e 	bne	r4,r3,947c <__smakebuf_r+0x54>
    9568:	8080030b 	ldhu	r2,12(r16)
    956c:	04810004 	movi	r18,1024
    9570:	84801315 	stw	r18,76(r16)
    9574:	1484b03a 	or	r2,r2,r18
    9578:	8080030d 	sth	r2,12(r16)
    957c:	0027883a 	mov	r19,zero
    9580:	003fd806 	br	94e4 <__smakebuf_r+0xbc>
    9584:	8140038f 	ldh	r5,14(r16)
    9588:	8809883a 	mov	r4,r17
    958c:	000e7600 	call	e760 <_isatty_r>
    9590:	103fe226 	beq	r2,zero,951c <__smakebuf_r+0xf4>
    9594:	8080030b 	ldhu	r2,12(r16)
    9598:	10800054 	ori	r2,r2,1
    959c:	8080030d 	sth	r2,12(r16)
    95a0:	003fde06 	br	951c <__smakebuf_r+0xf4>
    95a4:	8080030b 	ldhu	r2,12(r16)
    95a8:	10c0800c 	andi	r3,r2,512
    95ac:	183fdb1e 	bne	r3,zero,951c <__smakebuf_r+0xf4>
    95b0:	10800094 	ori	r2,r2,2
    95b4:	80c010c4 	addi	r3,r16,67
    95b8:	8080030d 	sth	r2,12(r16)
    95bc:	00800044 	movi	r2,1
    95c0:	80c00015 	stw	r3,0(r16)
    95c4:	80c00415 	stw	r3,16(r16)
    95c8:	80800515 	stw	r2,20(r16)
    95cc:	003fd306 	br	951c <__smakebuf_r+0xf4>
    95d0:	04810004 	movi	r18,1024
    95d4:	003fc306 	br	94e4 <__smakebuf_r+0xbc>
    95d8:	0027883a 	mov	r19,zero
    95dc:	04810004 	movi	r18,1024
    95e0:	003fc006 	br	94e4 <__smakebuf_r+0xbc>

000095e4 <_malloc_r>:
    95e4:	defff504 	addi	sp,sp,-44
    95e8:	dc800315 	stw	r18,12(sp)
    95ec:	dfc00a15 	stw	ra,40(sp)
    95f0:	df000915 	stw	fp,36(sp)
    95f4:	ddc00815 	stw	r23,32(sp)
    95f8:	dd800715 	stw	r22,28(sp)
    95fc:	dd400615 	stw	r21,24(sp)
    9600:	dd000515 	stw	r20,20(sp)
    9604:	dcc00415 	stw	r19,16(sp)
    9608:	dc400215 	stw	r17,8(sp)
    960c:	dc000115 	stw	r16,4(sp)
    9610:	288002c4 	addi	r2,r5,11
    9614:	00c00584 	movi	r3,22
    9618:	2025883a 	mov	r18,r4
    961c:	18807f2e 	bgeu	r3,r2,981c <_malloc_r+0x238>
    9620:	047ffe04 	movi	r17,-8
    9624:	1462703a 	and	r17,r2,r17
    9628:	8800a316 	blt	r17,zero,98b8 <_malloc_r+0x2d4>
    962c:	8940a236 	bltu	r17,r5,98b8 <_malloc_r+0x2d4>
    9630:	0012fa00 	call	12fa0 <__malloc_lock>
    9634:	00807dc4 	movi	r2,503
    9638:	1441e92e 	bgeu	r2,r17,9de0 <_malloc_r+0x7fc>
    963c:	8804d27a 	srli	r2,r17,9
    9640:	1000a126 	beq	r2,zero,98c8 <_malloc_r+0x2e4>
    9644:	00c00104 	movi	r3,4
    9648:	18811e36 	bltu	r3,r2,9ac4 <_malloc_r+0x4e0>
    964c:	8804d1ba 	srli	r2,r17,6
    9650:	12000e44 	addi	r8,r2,57
    9654:	11c00e04 	addi	r7,r2,56
    9658:	4209883a 	add	r4,r8,r8
    965c:	04c000b4 	movhi	r19,2
    9660:	2109883a 	add	r4,r4,r4
    9664:	9cffa204 	addi	r19,r19,-376
    9668:	2109883a 	add	r4,r4,r4
    966c:	9909883a 	add	r4,r19,r4
    9670:	24000117 	ldw	r16,4(r4)
    9674:	213ffe04 	addi	r4,r4,-8
    9678:	24009726 	beq	r4,r16,98d8 <_malloc_r+0x2f4>
    967c:	80800117 	ldw	r2,4(r16)
    9680:	01bfff04 	movi	r6,-4
    9684:	014003c4 	movi	r5,15
    9688:	1184703a 	and	r2,r2,r6
    968c:	1447c83a 	sub	r3,r2,r17
    9690:	28c00716 	blt	r5,r3,96b0 <_malloc_r+0xcc>
    9694:	1800920e 	bge	r3,zero,98e0 <_malloc_r+0x2fc>
    9698:	84000317 	ldw	r16,12(r16)
    969c:	24008e26 	beq	r4,r16,98d8 <_malloc_r+0x2f4>
    96a0:	80800117 	ldw	r2,4(r16)
    96a4:	1184703a 	and	r2,r2,r6
    96a8:	1447c83a 	sub	r3,r2,r17
    96ac:	28fff90e 	bge	r5,r3,9694 <_malloc_r+0xb0>
    96b0:	3809883a 	mov	r4,r7
    96b4:	018000b4 	movhi	r6,2
    96b8:	9c000417 	ldw	r16,16(r19)
    96bc:	31bfa204 	addi	r6,r6,-376
    96c0:	32000204 	addi	r8,r6,8
    96c4:	82013426 	beq	r16,r8,9b98 <_malloc_r+0x5b4>
    96c8:	80c00117 	ldw	r3,4(r16)
    96cc:	00bfff04 	movi	r2,-4
    96d0:	188e703a 	and	r7,r3,r2
    96d4:	3c45c83a 	sub	r2,r7,r17
    96d8:	00c003c4 	movi	r3,15
    96dc:	18811f16 	blt	r3,r2,9b5c <_malloc_r+0x578>
    96e0:	32000515 	stw	r8,20(r6)
    96e4:	32000415 	stw	r8,16(r6)
    96e8:	10007f0e 	bge	r2,zero,98e8 <_malloc_r+0x304>
    96ec:	00807fc4 	movi	r2,511
    96f0:	11c0fd36 	bltu	r2,r7,9ae8 <_malloc_r+0x504>
    96f4:	3806d0fa 	srli	r3,r7,3
    96f8:	01c00044 	movi	r7,1
    96fc:	30800117 	ldw	r2,4(r6)
    9700:	19400044 	addi	r5,r3,1
    9704:	294b883a 	add	r5,r5,r5
    9708:	1807d0ba 	srai	r3,r3,2
    970c:	294b883a 	add	r5,r5,r5
    9710:	294b883a 	add	r5,r5,r5
    9714:	298b883a 	add	r5,r5,r6
    9718:	38c6983a 	sll	r3,r7,r3
    971c:	29c00017 	ldw	r7,0(r5)
    9720:	2a7ffe04 	addi	r9,r5,-8
    9724:	1886b03a 	or	r3,r3,r2
    9728:	82400315 	stw	r9,12(r16)
    972c:	81c00215 	stw	r7,8(r16)
    9730:	30c00115 	stw	r3,4(r6)
    9734:	2c000015 	stw	r16,0(r5)
    9738:	3c000315 	stw	r16,12(r7)
    973c:	2005d0ba 	srai	r2,r4,2
    9740:	01400044 	movi	r5,1
    9744:	288a983a 	sll	r5,r5,r2
    9748:	19406f36 	bltu	r3,r5,9908 <_malloc_r+0x324>
    974c:	28c4703a 	and	r2,r5,r3
    9750:	10000a1e 	bne	r2,zero,977c <_malloc_r+0x198>
    9754:	00bfff04 	movi	r2,-4
    9758:	294b883a 	add	r5,r5,r5
    975c:	2088703a 	and	r4,r4,r2
    9760:	28c4703a 	and	r2,r5,r3
    9764:	21000104 	addi	r4,r4,4
    9768:	1000041e 	bne	r2,zero,977c <_malloc_r+0x198>
    976c:	294b883a 	add	r5,r5,r5
    9770:	28c4703a 	and	r2,r5,r3
    9774:	21000104 	addi	r4,r4,4
    9778:	103ffc26 	beq	r2,zero,976c <_malloc_r+0x188>
    977c:	02bfff04 	movi	r10,-4
    9780:	024003c4 	movi	r9,15
    9784:	21800044 	addi	r6,r4,1
    9788:	318d883a 	add	r6,r6,r6
    978c:	318d883a 	add	r6,r6,r6
    9790:	318d883a 	add	r6,r6,r6
    9794:	998d883a 	add	r6,r19,r6
    9798:	333ffe04 	addi	r12,r6,-8
    979c:	2017883a 	mov	r11,r4
    97a0:	31800104 	addi	r6,r6,4
    97a4:	34000017 	ldw	r16,0(r6)
    97a8:	31fffd04 	addi	r7,r6,-12
    97ac:	81c0041e 	bne	r16,r7,97c0 <_malloc_r+0x1dc>
    97b0:	0000fb06 	br	9ba0 <_malloc_r+0x5bc>
    97b4:	1801030e 	bge	r3,zero,9bc4 <_malloc_r+0x5e0>
    97b8:	84000317 	ldw	r16,12(r16)
    97bc:	81c0f826 	beq	r16,r7,9ba0 <_malloc_r+0x5bc>
    97c0:	80800117 	ldw	r2,4(r16)
    97c4:	1284703a 	and	r2,r2,r10
    97c8:	1447c83a 	sub	r3,r2,r17
    97cc:	48fff90e 	bge	r9,r3,97b4 <_malloc_r+0x1d0>
    97d0:	80800317 	ldw	r2,12(r16)
    97d4:	81000217 	ldw	r4,8(r16)
    97d8:	89400054 	ori	r5,r17,1
    97dc:	81400115 	stw	r5,4(r16)
    97e0:	20800315 	stw	r2,12(r4)
    97e4:	11000215 	stw	r4,8(r2)
    97e8:	8463883a 	add	r17,r16,r17
    97ec:	9c400515 	stw	r17,20(r19)
    97f0:	9c400415 	stw	r17,16(r19)
    97f4:	18800054 	ori	r2,r3,1
    97f8:	88800115 	stw	r2,4(r17)
    97fc:	8a000315 	stw	r8,12(r17)
    9800:	8a000215 	stw	r8,8(r17)
    9804:	88e3883a 	add	r17,r17,r3
    9808:	88c00015 	stw	r3,0(r17)
    980c:	9009883a 	mov	r4,r18
    9810:	00130c00 	call	130c0 <__malloc_unlock>
    9814:	80800204 	addi	r2,r16,8
    9818:	00001b06 	br	9888 <_malloc_r+0x2a4>
    981c:	04400404 	movi	r17,16
    9820:	89402536 	bltu	r17,r5,98b8 <_malloc_r+0x2d4>
    9824:	0012fa00 	call	12fa0 <__malloc_lock>
    9828:	00800184 	movi	r2,6
    982c:	01000084 	movi	r4,2
    9830:	04c000b4 	movhi	r19,2
    9834:	1085883a 	add	r2,r2,r2
    9838:	9cffa204 	addi	r19,r19,-376
    983c:	1085883a 	add	r2,r2,r2
    9840:	9885883a 	add	r2,r19,r2
    9844:	14000117 	ldw	r16,4(r2)
    9848:	10fffe04 	addi	r3,r2,-8
    984c:	80c0d926 	beq	r16,r3,9bb4 <_malloc_r+0x5d0>
    9850:	80c00117 	ldw	r3,4(r16)
    9854:	81000317 	ldw	r4,12(r16)
    9858:	00bfff04 	movi	r2,-4
    985c:	1884703a 	and	r2,r3,r2
    9860:	81400217 	ldw	r5,8(r16)
    9864:	8085883a 	add	r2,r16,r2
    9868:	10c00117 	ldw	r3,4(r2)
    986c:	29000315 	stw	r4,12(r5)
    9870:	21400215 	stw	r5,8(r4)
    9874:	18c00054 	ori	r3,r3,1
    9878:	10c00115 	stw	r3,4(r2)
    987c:	9009883a 	mov	r4,r18
    9880:	00130c00 	call	130c0 <__malloc_unlock>
    9884:	80800204 	addi	r2,r16,8
    9888:	dfc00a17 	ldw	ra,40(sp)
    988c:	df000917 	ldw	fp,36(sp)
    9890:	ddc00817 	ldw	r23,32(sp)
    9894:	dd800717 	ldw	r22,28(sp)
    9898:	dd400617 	ldw	r21,24(sp)
    989c:	dd000517 	ldw	r20,20(sp)
    98a0:	dcc00417 	ldw	r19,16(sp)
    98a4:	dc800317 	ldw	r18,12(sp)
    98a8:	dc400217 	ldw	r17,8(sp)
    98ac:	dc000117 	ldw	r16,4(sp)
    98b0:	dec00b04 	addi	sp,sp,44
    98b4:	f800283a 	ret
    98b8:	00800304 	movi	r2,12
    98bc:	90800015 	stw	r2,0(r18)
    98c0:	0005883a 	mov	r2,zero
    98c4:	003ff006 	br	9888 <_malloc_r+0x2a4>
    98c8:	01002004 	movi	r4,128
    98cc:	02001004 	movi	r8,64
    98d0:	01c00fc4 	movi	r7,63
    98d4:	003f6106 	br	965c <_malloc_r+0x78>
    98d8:	4009883a 	mov	r4,r8
    98dc:	003f7506 	br	96b4 <_malloc_r+0xd0>
    98e0:	81000317 	ldw	r4,12(r16)
    98e4:	003fde06 	br	9860 <_malloc_r+0x27c>
    98e8:	81c5883a 	add	r2,r16,r7
    98ec:	11400117 	ldw	r5,4(r2)
    98f0:	9009883a 	mov	r4,r18
    98f4:	29400054 	ori	r5,r5,1
    98f8:	11400115 	stw	r5,4(r2)
    98fc:	00130c00 	call	130c0 <__malloc_unlock>
    9900:	80800204 	addi	r2,r16,8
    9904:	003fe006 	br	9888 <_malloc_r+0x2a4>
    9908:	9c000217 	ldw	r16,8(r19)
    990c:	00bfff04 	movi	r2,-4
    9910:	85800117 	ldw	r22,4(r16)
    9914:	b0ac703a 	and	r22,r22,r2
    9918:	b4400336 	bltu	r22,r17,9928 <_malloc_r+0x344>
    991c:	b445c83a 	sub	r2,r22,r17
    9920:	00c003c4 	movi	r3,15
    9924:	18805d16 	blt	r3,r2,9a9c <_malloc_r+0x4b8>
    9928:	05c000b4 	movhi	r23,2
    992c:	008000b4 	movhi	r2,2
    9930:	108df304 	addi	r2,r2,14284
    9934:	bdc5f104 	addi	r23,r23,6084
    9938:	15400017 	ldw	r21,0(r2)
    993c:	b8c00017 	ldw	r3,0(r23)
    9940:	00bfffc4 	movi	r2,-1
    9944:	858d883a 	add	r6,r16,r22
    9948:	8d6b883a 	add	r21,r17,r21
    994c:	1880ea26 	beq	r3,r2,9cf8 <_malloc_r+0x714>
    9950:	ad4403c4 	addi	r21,r21,4111
    9954:	00bc0004 	movi	r2,-4096
    9958:	a8aa703a 	and	r21,r21,r2
    995c:	a80b883a 	mov	r5,r21
    9960:	9009883a 	mov	r4,r18
    9964:	d9800015 	stw	r6,0(sp)
    9968:	000b06c0 	call	b06c <_sbrk_r>
    996c:	1029883a 	mov	r20,r2
    9970:	00bfffc4 	movi	r2,-1
    9974:	d9800017 	ldw	r6,0(sp)
    9978:	a080e826 	beq	r20,r2,9d1c <_malloc_r+0x738>
    997c:	a180a636 	bltu	r20,r6,9c18 <_malloc_r+0x634>
    9980:	070000b4 	movhi	fp,2
    9984:	e70e1504 	addi	fp,fp,14420
    9988:	e0800017 	ldw	r2,0(fp)
    998c:	a887883a 	add	r3,r21,r2
    9990:	e0c00015 	stw	r3,0(fp)
    9994:	3500e626 	beq	r6,r20,9d30 <_malloc_r+0x74c>
    9998:	b9000017 	ldw	r4,0(r23)
    999c:	00bfffc4 	movi	r2,-1
    99a0:	2080ee26 	beq	r4,r2,9d5c <_malloc_r+0x778>
    99a4:	a185c83a 	sub	r2,r20,r6
    99a8:	10c5883a 	add	r2,r2,r3
    99ac:	e0800015 	stw	r2,0(fp)
    99b0:	a0c001cc 	andi	r3,r20,7
    99b4:	1800bc26 	beq	r3,zero,9ca8 <_malloc_r+0x6c4>
    99b8:	a0e9c83a 	sub	r20,r20,r3
    99bc:	00840204 	movi	r2,4104
    99c0:	a5000204 	addi	r20,r20,8
    99c4:	10c7c83a 	sub	r3,r2,r3
    99c8:	a545883a 	add	r2,r20,r21
    99cc:	1083ffcc 	andi	r2,r2,4095
    99d0:	18abc83a 	sub	r21,r3,r2
    99d4:	a80b883a 	mov	r5,r21
    99d8:	9009883a 	mov	r4,r18
    99dc:	000b06c0 	call	b06c <_sbrk_r>
    99e0:	00ffffc4 	movi	r3,-1
    99e4:	10c0e126 	beq	r2,r3,9d6c <_malloc_r+0x788>
    99e8:	1505c83a 	sub	r2,r2,r20
    99ec:	1545883a 	add	r2,r2,r21
    99f0:	10800054 	ori	r2,r2,1
    99f4:	e0c00017 	ldw	r3,0(fp)
    99f8:	9d000215 	stw	r20,8(r19)
    99fc:	a0800115 	stw	r2,4(r20)
    9a00:	a8c7883a 	add	r3,r21,r3
    9a04:	e0c00015 	stw	r3,0(fp)
    9a08:	84c00e26 	beq	r16,r19,9a44 <_malloc_r+0x460>
    9a0c:	018003c4 	movi	r6,15
    9a10:	3580a72e 	bgeu	r6,r22,9cb0 <_malloc_r+0x6cc>
    9a14:	81400117 	ldw	r5,4(r16)
    9a18:	013ffe04 	movi	r4,-8
    9a1c:	b0bffd04 	addi	r2,r22,-12
    9a20:	1104703a 	and	r2,r2,r4
    9a24:	2900004c 	andi	r4,r5,1
    9a28:	2088b03a 	or	r4,r4,r2
    9a2c:	81000115 	stw	r4,4(r16)
    9a30:	01400144 	movi	r5,5
    9a34:	8089883a 	add	r4,r16,r2
    9a38:	21400115 	stw	r5,4(r4)
    9a3c:	21400215 	stw	r5,8(r4)
    9a40:	3080cd36 	bltu	r6,r2,9d78 <_malloc_r+0x794>
    9a44:	008000b4 	movhi	r2,2
    9a48:	108df204 	addi	r2,r2,14280
    9a4c:	11000017 	ldw	r4,0(r2)
    9a50:	20c0012e 	bgeu	r4,r3,9a58 <_malloc_r+0x474>
    9a54:	10c00015 	stw	r3,0(r2)
    9a58:	008000b4 	movhi	r2,2
    9a5c:	108df104 	addi	r2,r2,14276
    9a60:	11000017 	ldw	r4,0(r2)
    9a64:	9c000217 	ldw	r16,8(r19)
    9a68:	20c0012e 	bgeu	r4,r3,9a70 <_malloc_r+0x48c>
    9a6c:	10c00015 	stw	r3,0(r2)
    9a70:	80c00117 	ldw	r3,4(r16)
    9a74:	00bfff04 	movi	r2,-4
    9a78:	1886703a 	and	r3,r3,r2
    9a7c:	1c45c83a 	sub	r2,r3,r17
    9a80:	1c400236 	bltu	r3,r17,9a8c <_malloc_r+0x4a8>
    9a84:	00c003c4 	movi	r3,15
    9a88:	18800416 	blt	r3,r2,9a9c <_malloc_r+0x4b8>
    9a8c:	9009883a 	mov	r4,r18
    9a90:	00130c00 	call	130c0 <__malloc_unlock>
    9a94:	0005883a 	mov	r2,zero
    9a98:	003f7b06 	br	9888 <_malloc_r+0x2a4>
    9a9c:	88c00054 	ori	r3,r17,1
    9aa0:	80c00115 	stw	r3,4(r16)
    9aa4:	8463883a 	add	r17,r16,r17
    9aa8:	10800054 	ori	r2,r2,1
    9aac:	9c400215 	stw	r17,8(r19)
    9ab0:	88800115 	stw	r2,4(r17)
    9ab4:	9009883a 	mov	r4,r18
    9ab8:	00130c00 	call	130c0 <__malloc_unlock>
    9abc:	80800204 	addi	r2,r16,8
    9ac0:	003f7106 	br	9888 <_malloc_r+0x2a4>
    9ac4:	00c00504 	movi	r3,20
    9ac8:	18804a2e 	bgeu	r3,r2,9bf4 <_malloc_r+0x610>
    9acc:	00c01504 	movi	r3,84
    9ad0:	18806e36 	bltu	r3,r2,9c8c <_malloc_r+0x6a8>
    9ad4:	8804d33a 	srli	r2,r17,12
    9ad8:	12001bc4 	addi	r8,r2,111
    9adc:	11c01b84 	addi	r7,r2,110
    9ae0:	4209883a 	add	r4,r8,r8
    9ae4:	003edd06 	br	965c <_malloc_r+0x78>
    9ae8:	3804d27a 	srli	r2,r7,9
    9aec:	00c00104 	movi	r3,4
    9af0:	1880442e 	bgeu	r3,r2,9c04 <_malloc_r+0x620>
    9af4:	00c00504 	movi	r3,20
    9af8:	18808136 	bltu	r3,r2,9d00 <_malloc_r+0x71c>
    9afc:	11401704 	addi	r5,r2,92
    9b00:	10c016c4 	addi	r3,r2,91
    9b04:	294b883a 	add	r5,r5,r5
    9b08:	294b883a 	add	r5,r5,r5
    9b0c:	294b883a 	add	r5,r5,r5
    9b10:	994b883a 	add	r5,r19,r5
    9b14:	28800017 	ldw	r2,0(r5)
    9b18:	018000b4 	movhi	r6,2
    9b1c:	297ffe04 	addi	r5,r5,-8
    9b20:	31bfa204 	addi	r6,r6,-376
    9b24:	28806526 	beq	r5,r2,9cbc <_malloc_r+0x6d8>
    9b28:	01bfff04 	movi	r6,-4
    9b2c:	10c00117 	ldw	r3,4(r2)
    9b30:	1986703a 	and	r3,r3,r6
    9b34:	38c0022e 	bgeu	r7,r3,9b40 <_malloc_r+0x55c>
    9b38:	10800217 	ldw	r2,8(r2)
    9b3c:	28bffb1e 	bne	r5,r2,9b2c <_malloc_r+0x548>
    9b40:	11400317 	ldw	r5,12(r2)
    9b44:	98c00117 	ldw	r3,4(r19)
    9b48:	81400315 	stw	r5,12(r16)
    9b4c:	80800215 	stw	r2,8(r16)
    9b50:	2c000215 	stw	r16,8(r5)
    9b54:	14000315 	stw	r16,12(r2)
    9b58:	003ef806 	br	973c <_malloc_r+0x158>
    9b5c:	88c00054 	ori	r3,r17,1
    9b60:	80c00115 	stw	r3,4(r16)
    9b64:	8463883a 	add	r17,r16,r17
    9b68:	34400515 	stw	r17,20(r6)
    9b6c:	34400415 	stw	r17,16(r6)
    9b70:	10c00054 	ori	r3,r2,1
    9b74:	8a000315 	stw	r8,12(r17)
    9b78:	8a000215 	stw	r8,8(r17)
    9b7c:	88c00115 	stw	r3,4(r17)
    9b80:	88a3883a 	add	r17,r17,r2
    9b84:	88800015 	stw	r2,0(r17)
    9b88:	9009883a 	mov	r4,r18
    9b8c:	00130c00 	call	130c0 <__malloc_unlock>
    9b90:	80800204 	addi	r2,r16,8
    9b94:	003f3c06 	br	9888 <_malloc_r+0x2a4>
    9b98:	30c00117 	ldw	r3,4(r6)
    9b9c:	003ee706 	br	973c <_malloc_r+0x158>
    9ba0:	5ac00044 	addi	r11,r11,1
    9ba4:	588000cc 	andi	r2,r11,3
    9ba8:	31800204 	addi	r6,r6,8
    9bac:	103efd1e 	bne	r2,zero,97a4 <_malloc_r+0x1c0>
    9bb0:	00002406 	br	9c44 <_malloc_r+0x660>
    9bb4:	14000317 	ldw	r16,12(r2)
    9bb8:	143f251e 	bne	r2,r16,9850 <_malloc_r+0x26c>
    9bbc:	21000084 	addi	r4,r4,2
    9bc0:	003ebc06 	br	96b4 <_malloc_r+0xd0>
    9bc4:	8085883a 	add	r2,r16,r2
    9bc8:	10c00117 	ldw	r3,4(r2)
    9bcc:	81000317 	ldw	r4,12(r16)
    9bd0:	81400217 	ldw	r5,8(r16)
    9bd4:	18c00054 	ori	r3,r3,1
    9bd8:	10c00115 	stw	r3,4(r2)
    9bdc:	29000315 	stw	r4,12(r5)
    9be0:	21400215 	stw	r5,8(r4)
    9be4:	9009883a 	mov	r4,r18
    9be8:	00130c00 	call	130c0 <__malloc_unlock>
    9bec:	80800204 	addi	r2,r16,8
    9bf0:	003f2506 	br	9888 <_malloc_r+0x2a4>
    9bf4:	12001704 	addi	r8,r2,92
    9bf8:	11c016c4 	addi	r7,r2,91
    9bfc:	4209883a 	add	r4,r8,r8
    9c00:	003e9606 	br	965c <_malloc_r+0x78>
    9c04:	3804d1ba 	srli	r2,r7,6
    9c08:	11400e44 	addi	r5,r2,57
    9c0c:	10c00e04 	addi	r3,r2,56
    9c10:	294b883a 	add	r5,r5,r5
    9c14:	003fbc06 	br	9b08 <_malloc_r+0x524>
    9c18:	84ff5926 	beq	r16,r19,9980 <_malloc_r+0x39c>
    9c1c:	008000b4 	movhi	r2,2
    9c20:	10bfa204 	addi	r2,r2,-376
    9c24:	14000217 	ldw	r16,8(r2)
    9c28:	00bfff04 	movi	r2,-4
    9c2c:	80c00117 	ldw	r3,4(r16)
    9c30:	1886703a 	and	r3,r3,r2
    9c34:	003f9106 	br	9a7c <_malloc_r+0x498>
    9c38:	60800217 	ldw	r2,8(r12)
    9c3c:	213fffc4 	addi	r4,r4,-1
    9c40:	1300651e 	bne	r2,r12,9dd8 <_malloc_r+0x7f4>
    9c44:	208000cc 	andi	r2,r4,3
    9c48:	633ffe04 	addi	r12,r12,-8
    9c4c:	103ffa1e 	bne	r2,zero,9c38 <_malloc_r+0x654>
    9c50:	98800117 	ldw	r2,4(r19)
    9c54:	0146303a 	nor	r3,zero,r5
    9c58:	1884703a 	and	r2,r3,r2
    9c5c:	98800115 	stw	r2,4(r19)
    9c60:	294b883a 	add	r5,r5,r5
    9c64:	117f2836 	bltu	r2,r5,9908 <_malloc_r+0x324>
    9c68:	283f2726 	beq	r5,zero,9908 <_malloc_r+0x324>
    9c6c:	2886703a 	and	r3,r5,r2
    9c70:	5809883a 	mov	r4,r11
    9c74:	183ec31e 	bne	r3,zero,9784 <_malloc_r+0x1a0>
    9c78:	294b883a 	add	r5,r5,r5
    9c7c:	2886703a 	and	r3,r5,r2
    9c80:	21000104 	addi	r4,r4,4
    9c84:	183ffc26 	beq	r3,zero,9c78 <_malloc_r+0x694>
    9c88:	003ebe06 	br	9784 <_malloc_r+0x1a0>
    9c8c:	00c05504 	movi	r3,340
    9c90:	18801236 	bltu	r3,r2,9cdc <_malloc_r+0x6f8>
    9c94:	8804d3fa 	srli	r2,r17,15
    9c98:	12001e04 	addi	r8,r2,120
    9c9c:	11c01dc4 	addi	r7,r2,119
    9ca0:	4209883a 	add	r4,r8,r8
    9ca4:	003e6d06 	br	965c <_malloc_r+0x78>
    9ca8:	00c40004 	movi	r3,4096
    9cac:	003f4606 	br	99c8 <_malloc_r+0x3e4>
    9cb0:	00800044 	movi	r2,1
    9cb4:	a0800115 	stw	r2,4(r20)
    9cb8:	003f7406 	br	9a8c <_malloc_r+0x4a8>
    9cbc:	1805d0ba 	srai	r2,r3,2
    9cc0:	01c00044 	movi	r7,1
    9cc4:	30c00117 	ldw	r3,4(r6)
    9cc8:	388e983a 	sll	r7,r7,r2
    9ccc:	2805883a 	mov	r2,r5
    9cd0:	38c6b03a 	or	r3,r7,r3
    9cd4:	30c00115 	stw	r3,4(r6)
    9cd8:	003f9b06 	br	9b48 <_malloc_r+0x564>
    9cdc:	00c15504 	movi	r3,1364
    9ce0:	18801a36 	bltu	r3,r2,9d4c <_malloc_r+0x768>
    9ce4:	8804d4ba 	srli	r2,r17,18
    9ce8:	12001f44 	addi	r8,r2,125
    9cec:	11c01f04 	addi	r7,r2,124
    9cf0:	4209883a 	add	r4,r8,r8
    9cf4:	003e5906 	br	965c <_malloc_r+0x78>
    9cf8:	ad400404 	addi	r21,r21,16
    9cfc:	003f1706 	br	995c <_malloc_r+0x378>
    9d00:	00c01504 	movi	r3,84
    9d04:	18802336 	bltu	r3,r2,9d94 <_malloc_r+0x7b0>
    9d08:	3804d33a 	srli	r2,r7,12
    9d0c:	11401bc4 	addi	r5,r2,111
    9d10:	10c01b84 	addi	r3,r2,110
    9d14:	294b883a 	add	r5,r5,r5
    9d18:	003f7b06 	br	9b08 <_malloc_r+0x524>
    9d1c:	9c000217 	ldw	r16,8(r19)
    9d20:	00bfff04 	movi	r2,-4
    9d24:	80c00117 	ldw	r3,4(r16)
    9d28:	1886703a 	and	r3,r3,r2
    9d2c:	003f5306 	br	9a7c <_malloc_r+0x498>
    9d30:	3083ffcc 	andi	r2,r6,4095
    9d34:	103f181e 	bne	r2,zero,9998 <_malloc_r+0x3b4>
    9d38:	99000217 	ldw	r4,8(r19)
    9d3c:	b545883a 	add	r2,r22,r21
    9d40:	10800054 	ori	r2,r2,1
    9d44:	20800115 	stw	r2,4(r4)
    9d48:	003f3e06 	br	9a44 <_malloc_r+0x460>
    9d4c:	01003f84 	movi	r4,254
    9d50:	02001fc4 	movi	r8,127
    9d54:	01c01f84 	movi	r7,126
    9d58:	003e4006 	br	965c <_malloc_r+0x78>
    9d5c:	008000b4 	movhi	r2,2
    9d60:	1085f104 	addi	r2,r2,6084
    9d64:	15000015 	stw	r20,0(r2)
    9d68:	003f1106 	br	99b0 <_malloc_r+0x3cc>
    9d6c:	00800044 	movi	r2,1
    9d70:	002b883a 	mov	r21,zero
    9d74:	003f1f06 	br	99f4 <_malloc_r+0x410>
    9d78:	81400204 	addi	r5,r16,8
    9d7c:	9009883a 	mov	r4,r18
    9d80:	0008eb40 	call	8eb4 <_free_r>
    9d84:	008000b4 	movhi	r2,2
    9d88:	108e1504 	addi	r2,r2,14420
    9d8c:	10c00017 	ldw	r3,0(r2)
    9d90:	003f2c06 	br	9a44 <_malloc_r+0x460>
    9d94:	00c05504 	movi	r3,340
    9d98:	18800536 	bltu	r3,r2,9db0 <_malloc_r+0x7cc>
    9d9c:	3804d3fa 	srli	r2,r7,15
    9da0:	11401e04 	addi	r5,r2,120
    9da4:	10c01dc4 	addi	r3,r2,119
    9da8:	294b883a 	add	r5,r5,r5
    9dac:	003f5606 	br	9b08 <_malloc_r+0x524>
    9db0:	00c15504 	movi	r3,1364
    9db4:	18800536 	bltu	r3,r2,9dcc <_malloc_r+0x7e8>
    9db8:	3804d4ba 	srli	r2,r7,18
    9dbc:	11401f44 	addi	r5,r2,125
    9dc0:	10c01f04 	addi	r3,r2,124
    9dc4:	294b883a 	add	r5,r5,r5
    9dc8:	003f4f06 	br	9b08 <_malloc_r+0x524>
    9dcc:	01403f84 	movi	r5,254
    9dd0:	00c01f84 	movi	r3,126
    9dd4:	003f4c06 	br	9b08 <_malloc_r+0x524>
    9dd8:	98800117 	ldw	r2,4(r19)
    9ddc:	003fa006 	br	9c60 <_malloc_r+0x67c>
    9de0:	8808d0fa 	srli	r4,r17,3
    9de4:	20800044 	addi	r2,r4,1
    9de8:	1085883a 	add	r2,r2,r2
    9dec:	003e9006 	br	9830 <_malloc_r+0x24c>

00009df0 <memchr>:
    9df0:	208000cc 	andi	r2,r4,3
    9df4:	280f883a 	mov	r7,r5
    9df8:	10003426 	beq	r2,zero,9ecc <memchr+0xdc>
    9dfc:	30bfffc4 	addi	r2,r6,-1
    9e00:	30001a26 	beq	r6,zero,9e6c <memchr+0x7c>
    9e04:	20c00003 	ldbu	r3,0(r4)
    9e08:	29803fcc 	andi	r6,r5,255
    9e0c:	30c0051e 	bne	r6,r3,9e24 <memchr+0x34>
    9e10:	00001806 	br	9e74 <memchr+0x84>
    9e14:	10001526 	beq	r2,zero,9e6c <memchr+0x7c>
    9e18:	20c00003 	ldbu	r3,0(r4)
    9e1c:	10bfffc4 	addi	r2,r2,-1
    9e20:	30c01426 	beq	r6,r3,9e74 <memchr+0x84>
    9e24:	21000044 	addi	r4,r4,1
    9e28:	20c000cc 	andi	r3,r4,3
    9e2c:	183ff91e 	bne	r3,zero,9e14 <memchr+0x24>
    9e30:	020000c4 	movi	r8,3
    9e34:	40801136 	bltu	r8,r2,9e7c <memchr+0x8c>
    9e38:	10000c26 	beq	r2,zero,9e6c <memchr+0x7c>
    9e3c:	20c00003 	ldbu	r3,0(r4)
    9e40:	29403fcc 	andi	r5,r5,255
    9e44:	28c00b26 	beq	r5,r3,9e74 <memchr+0x84>
    9e48:	20c00044 	addi	r3,r4,1
    9e4c:	39803fcc 	andi	r6,r7,255
    9e50:	2089883a 	add	r4,r4,r2
    9e54:	00000306 	br	9e64 <memchr+0x74>
    9e58:	18c00044 	addi	r3,r3,1
    9e5c:	197fffc3 	ldbu	r5,-1(r3)
    9e60:	31400526 	beq	r6,r5,9e78 <memchr+0x88>
    9e64:	1805883a 	mov	r2,r3
    9e68:	20fffb1e 	bne	r4,r3,9e58 <memchr+0x68>
    9e6c:	0005883a 	mov	r2,zero
    9e70:	f800283a 	ret
    9e74:	2005883a 	mov	r2,r4
    9e78:	f800283a 	ret
    9e7c:	28c03fcc 	andi	r3,r5,255
    9e80:	1812923a 	slli	r9,r3,8
    9e84:	02ffbff4 	movhi	r11,65279
    9e88:	02a02074 	movhi	r10,32897
    9e8c:	48d2b03a 	or	r9,r9,r3
    9e90:	4806943a 	slli	r3,r9,16
    9e94:	5affbfc4 	addi	r11,r11,-257
    9e98:	52a02004 	addi	r10,r10,-32640
    9e9c:	48d2b03a 	or	r9,r9,r3
    9ea0:	20c00017 	ldw	r3,0(r4)
    9ea4:	48c6f03a 	xor	r3,r9,r3
    9ea8:	1acd883a 	add	r6,r3,r11
    9eac:	00c6303a 	nor	r3,zero,r3
    9eb0:	30c6703a 	and	r3,r6,r3
    9eb4:	1a86703a 	and	r3,r3,r10
    9eb8:	183fe01e 	bne	r3,zero,9e3c <memchr+0x4c>
    9ebc:	10bfff04 	addi	r2,r2,-4
    9ec0:	21000104 	addi	r4,r4,4
    9ec4:	40bff636 	bltu	r8,r2,9ea0 <memchr+0xb0>
    9ec8:	003fdb06 	br	9e38 <memchr+0x48>
    9ecc:	3005883a 	mov	r2,r6
    9ed0:	003fd706 	br	9e30 <memchr+0x40>

00009ed4 <memset>:
    9ed4:	20c000cc 	andi	r3,r4,3
    9ed8:	2005883a 	mov	r2,r4
    9edc:	18004426 	beq	r3,zero,9ff0 <memset+0x11c>
    9ee0:	31ffffc4 	addi	r7,r6,-1
    9ee4:	30004026 	beq	r6,zero,9fe8 <memset+0x114>
    9ee8:	2813883a 	mov	r9,r5
    9eec:	200d883a 	mov	r6,r4
    9ef0:	2007883a 	mov	r3,r4
    9ef4:	00000406 	br	9f08 <memset+0x34>
    9ef8:	3a3fffc4 	addi	r8,r7,-1
    9efc:	31800044 	addi	r6,r6,1
    9f00:	38003926 	beq	r7,zero,9fe8 <memset+0x114>
    9f04:	400f883a 	mov	r7,r8
    9f08:	18c00044 	addi	r3,r3,1
    9f0c:	32400005 	stb	r9,0(r6)
    9f10:	1a0000cc 	andi	r8,r3,3
    9f14:	403ff81e 	bne	r8,zero,9ef8 <memset+0x24>
    9f18:	010000c4 	movi	r4,3
    9f1c:	21c02d2e 	bgeu	r4,r7,9fd4 <memset+0x100>
    9f20:	29003fcc 	andi	r4,r5,255
    9f24:	200c923a 	slli	r6,r4,8
    9f28:	3108b03a 	or	r4,r6,r4
    9f2c:	200c943a 	slli	r6,r4,16
    9f30:	218cb03a 	or	r6,r4,r6
    9f34:	010003c4 	movi	r4,15
    9f38:	21c0182e 	bgeu	r4,r7,9f9c <memset+0xc8>
    9f3c:	3b3ffc04 	addi	r12,r7,-16
    9f40:	6018d13a 	srli	r12,r12,4
    9f44:	1a000104 	addi	r8,r3,4
    9f48:	1ac00204 	addi	r11,r3,8
    9f4c:	6008913a 	slli	r4,r12,4
    9f50:	1a800304 	addi	r10,r3,12
    9f54:	1813883a 	mov	r9,r3
    9f58:	21000504 	addi	r4,r4,20
    9f5c:	1909883a 	add	r4,r3,r4
    9f60:	49800015 	stw	r6,0(r9)
    9f64:	41800015 	stw	r6,0(r8)
    9f68:	59800015 	stw	r6,0(r11)
    9f6c:	51800015 	stw	r6,0(r10)
    9f70:	42000404 	addi	r8,r8,16
    9f74:	4a400404 	addi	r9,r9,16
    9f78:	5ac00404 	addi	r11,r11,16
    9f7c:	52800404 	addi	r10,r10,16
    9f80:	413ff71e 	bne	r8,r4,9f60 <memset+0x8c>
    9f84:	63000044 	addi	r12,r12,1
    9f88:	6018913a 	slli	r12,r12,4
    9f8c:	39c003cc 	andi	r7,r7,15
    9f90:	010000c4 	movi	r4,3
    9f94:	1b07883a 	add	r3,r3,r12
    9f98:	21c00e2e 	bgeu	r4,r7,9fd4 <memset+0x100>
    9f9c:	1813883a 	mov	r9,r3
    9fa0:	3811883a 	mov	r8,r7
    9fa4:	010000c4 	movi	r4,3
    9fa8:	49800015 	stw	r6,0(r9)
    9fac:	423fff04 	addi	r8,r8,-4
    9fb0:	4a400104 	addi	r9,r9,4
    9fb4:	223ffc36 	bltu	r4,r8,9fa8 <memset+0xd4>
    9fb8:	393fff04 	addi	r4,r7,-4
    9fbc:	2008d0ba 	srli	r4,r4,2
    9fc0:	39c000cc 	andi	r7,r7,3
    9fc4:	21000044 	addi	r4,r4,1
    9fc8:	2109883a 	add	r4,r4,r4
    9fcc:	2109883a 	add	r4,r4,r4
    9fd0:	1907883a 	add	r3,r3,r4
    9fd4:	38000526 	beq	r7,zero,9fec <memset+0x118>
    9fd8:	19cf883a 	add	r7,r3,r7
    9fdc:	19400005 	stb	r5,0(r3)
    9fe0:	18c00044 	addi	r3,r3,1
    9fe4:	38fffd1e 	bne	r7,r3,9fdc <memset+0x108>
    9fe8:	f800283a 	ret
    9fec:	f800283a 	ret
    9ff0:	2007883a 	mov	r3,r4
    9ff4:	300f883a 	mov	r7,r6
    9ff8:	003fc706 	br	9f18 <memset+0x44>

00009ffc <_Balloc>:
    9ffc:	20801317 	ldw	r2,76(r4)
    a000:	defffc04 	addi	sp,sp,-16
    a004:	dc400115 	stw	r17,4(sp)
    a008:	dc000015 	stw	r16,0(sp)
    a00c:	dfc00315 	stw	ra,12(sp)
    a010:	dc800215 	stw	r18,8(sp)
    a014:	2023883a 	mov	r17,r4
    a018:	2821883a 	mov	r16,r5
    a01c:	10000f26 	beq	r2,zero,a05c <_Balloc+0x60>
    a020:	8407883a 	add	r3,r16,r16
    a024:	18c7883a 	add	r3,r3,r3
    a028:	10c7883a 	add	r3,r2,r3
    a02c:	18800017 	ldw	r2,0(r3)
    a030:	10001126 	beq	r2,zero,a078 <_Balloc+0x7c>
    a034:	11000017 	ldw	r4,0(r2)
    a038:	19000015 	stw	r4,0(r3)
    a03c:	10000415 	stw	zero,16(r2)
    a040:	10000315 	stw	zero,12(r2)
    a044:	dfc00317 	ldw	ra,12(sp)
    a048:	dc800217 	ldw	r18,8(sp)
    a04c:	dc400117 	ldw	r17,4(sp)
    a050:	dc000017 	ldw	r16,0(sp)
    a054:	dec00404 	addi	sp,sp,16
    a058:	f800283a 	ret
    a05c:	01800844 	movi	r6,33
    a060:	01400104 	movi	r5,4
    a064:	000de780 	call	de78 <_calloc_r>
    a068:	88801315 	stw	r2,76(r17)
    a06c:	103fec1e 	bne	r2,zero,a020 <_Balloc+0x24>
    a070:	0005883a 	mov	r2,zero
    a074:	003ff306 	br	a044 <_Balloc+0x48>
    a078:	01400044 	movi	r5,1
    a07c:	2c24983a 	sll	r18,r5,r16
    a080:	8809883a 	mov	r4,r17
    a084:	91800144 	addi	r6,r18,5
    a088:	318d883a 	add	r6,r6,r6
    a08c:	318d883a 	add	r6,r6,r6
    a090:	000de780 	call	de78 <_calloc_r>
    a094:	103ff626 	beq	r2,zero,a070 <_Balloc+0x74>
    a098:	14000115 	stw	r16,4(r2)
    a09c:	14800215 	stw	r18,8(r2)
    a0a0:	003fe606 	br	a03c <_Balloc+0x40>

0000a0a4 <_Bfree>:
    a0a4:	28000826 	beq	r5,zero,a0c8 <_Bfree+0x24>
    a0a8:	28c00117 	ldw	r3,4(r5)
    a0ac:	20801317 	ldw	r2,76(r4)
    a0b0:	18c7883a 	add	r3,r3,r3
    a0b4:	18c7883a 	add	r3,r3,r3
    a0b8:	10c5883a 	add	r2,r2,r3
    a0bc:	10c00017 	ldw	r3,0(r2)
    a0c0:	28c00015 	stw	r3,0(r5)
    a0c4:	11400015 	stw	r5,0(r2)
    a0c8:	f800283a 	ret

0000a0cc <__multadd>:
    a0cc:	defffa04 	addi	sp,sp,-24
    a0d0:	dc800315 	stw	r18,12(sp)
    a0d4:	dc400215 	stw	r17,8(sp)
    a0d8:	dc000115 	stw	r16,4(sp)
    a0dc:	2823883a 	mov	r17,r5
    a0e0:	2c000417 	ldw	r16,16(r5)
    a0e4:	dfc00515 	stw	ra,20(sp)
    a0e8:	dcc00415 	stw	r19,16(sp)
    a0ec:	2025883a 	mov	r18,r4
    a0f0:	29400504 	addi	r5,r5,20
    a0f4:	0011883a 	mov	r8,zero
    a0f8:	28c00017 	ldw	r3,0(r5)
    a0fc:	29400104 	addi	r5,r5,4
    a100:	42000044 	addi	r8,r8,1
    a104:	18bfffcc 	andi	r2,r3,65535
    a108:	1185383a 	mul	r2,r2,r6
    a10c:	1806d43a 	srli	r3,r3,16
    a110:	11cf883a 	add	r7,r2,r7
    a114:	3808d43a 	srli	r4,r7,16
    a118:	1987383a 	mul	r3,r3,r6
    a11c:	38bfffcc 	andi	r2,r7,65535
    a120:	1907883a 	add	r3,r3,r4
    a124:	1808943a 	slli	r4,r3,16
    a128:	180ed43a 	srli	r7,r3,16
    a12c:	2085883a 	add	r2,r4,r2
    a130:	28bfff15 	stw	r2,-4(r5)
    a134:	443ff016 	blt	r8,r16,a0f8 <__multadd+0x2c>
    a138:	38000926 	beq	r7,zero,a160 <__multadd+0x94>
    a13c:	88800217 	ldw	r2,8(r17)
    a140:	80800f0e 	bge	r16,r2,a180 <__multadd+0xb4>
    a144:	80800144 	addi	r2,r16,5
    a148:	1085883a 	add	r2,r2,r2
    a14c:	1085883a 	add	r2,r2,r2
    a150:	8885883a 	add	r2,r17,r2
    a154:	11c00015 	stw	r7,0(r2)
    a158:	84000044 	addi	r16,r16,1
    a15c:	8c000415 	stw	r16,16(r17)
    a160:	8805883a 	mov	r2,r17
    a164:	dfc00517 	ldw	ra,20(sp)
    a168:	dcc00417 	ldw	r19,16(sp)
    a16c:	dc800317 	ldw	r18,12(sp)
    a170:	dc400217 	ldw	r17,8(sp)
    a174:	dc000117 	ldw	r16,4(sp)
    a178:	dec00604 	addi	sp,sp,24
    a17c:	f800283a 	ret
    a180:	89400117 	ldw	r5,4(r17)
    a184:	9009883a 	mov	r4,r18
    a188:	d9c00015 	stw	r7,0(sp)
    a18c:	29400044 	addi	r5,r5,1
    a190:	0009ffc0 	call	9ffc <_Balloc>
    a194:	89800417 	ldw	r6,16(r17)
    a198:	89400304 	addi	r5,r17,12
    a19c:	11000304 	addi	r4,r2,12
    a1a0:	31800084 	addi	r6,r6,2
    a1a4:	318d883a 	add	r6,r6,r6
    a1a8:	318d883a 	add	r6,r6,r6
    a1ac:	1027883a 	mov	r19,r2
    a1b0:	0001ec80 	call	1ec8 <memcpy>
    a1b4:	d9c00017 	ldw	r7,0(sp)
    a1b8:	88000a26 	beq	r17,zero,a1e4 <__multadd+0x118>
    a1bc:	88c00117 	ldw	r3,4(r17)
    a1c0:	90801317 	ldw	r2,76(r18)
    a1c4:	18c7883a 	add	r3,r3,r3
    a1c8:	18c7883a 	add	r3,r3,r3
    a1cc:	10c5883a 	add	r2,r2,r3
    a1d0:	10c00017 	ldw	r3,0(r2)
    a1d4:	88c00015 	stw	r3,0(r17)
    a1d8:	14400015 	stw	r17,0(r2)
    a1dc:	9823883a 	mov	r17,r19
    a1e0:	003fd806 	br	a144 <__multadd+0x78>
    a1e4:	9823883a 	mov	r17,r19
    a1e8:	003fd606 	br	a144 <__multadd+0x78>

0000a1ec <__s2b>:
    a1ec:	defff904 	addi	sp,sp,-28
    a1f0:	dc400115 	stw	r17,4(sp)
    a1f4:	dc000015 	stw	r16,0(sp)
    a1f8:	2023883a 	mov	r17,r4
    a1fc:	2821883a 	mov	r16,r5
    a200:	39000204 	addi	r4,r7,8
    a204:	01400244 	movi	r5,9
    a208:	dcc00315 	stw	r19,12(sp)
    a20c:	dc800215 	stw	r18,8(sp)
    a210:	dfc00615 	stw	ra,24(sp)
    a214:	dd400515 	stw	r21,20(sp)
    a218:	dd000415 	stw	r20,16(sp)
    a21c:	3825883a 	mov	r18,r7
    a220:	3027883a 	mov	r19,r6
    a224:	000fd240 	call	fd24 <__divsi3>
    a228:	00c00044 	movi	r3,1
    a22c:	000b883a 	mov	r5,zero
    a230:	1880030e 	bge	r3,r2,a240 <__s2b+0x54>
    a234:	18c7883a 	add	r3,r3,r3
    a238:	29400044 	addi	r5,r5,1
    a23c:	18bffd16 	blt	r3,r2,a234 <__s2b+0x48>
    a240:	8809883a 	mov	r4,r17
    a244:	0009ffc0 	call	9ffc <_Balloc>
    a248:	d8c00717 	ldw	r3,28(sp)
    a24c:	10c00515 	stw	r3,20(r2)
    a250:	00c00044 	movi	r3,1
    a254:	10c00415 	stw	r3,16(r2)
    a258:	00c00244 	movi	r3,9
    a25c:	1cc0210e 	bge	r3,r19,a2e4 <__s2b+0xf8>
    a260:	80eb883a 	add	r21,r16,r3
    a264:	a829883a 	mov	r20,r21
    a268:	84e1883a 	add	r16,r16,r19
    a26c:	a1c00007 	ldb	r7,0(r20)
    a270:	01800284 	movi	r6,10
    a274:	a5000044 	addi	r20,r20,1
    a278:	100b883a 	mov	r5,r2
    a27c:	39fff404 	addi	r7,r7,-48
    a280:	8809883a 	mov	r4,r17
    a284:	000a0cc0 	call	a0cc <__multadd>
    a288:	a43ff81e 	bne	r20,r16,a26c <__s2b+0x80>
    a28c:	ace1883a 	add	r16,r21,r19
    a290:	843ffe04 	addi	r16,r16,-8
    a294:	9c800a0e 	bge	r19,r18,a2c0 <__s2b+0xd4>
    a298:	94e5c83a 	sub	r18,r18,r19
    a29c:	84a5883a 	add	r18,r16,r18
    a2a0:	81c00007 	ldb	r7,0(r16)
    a2a4:	01800284 	movi	r6,10
    a2a8:	84000044 	addi	r16,r16,1
    a2ac:	100b883a 	mov	r5,r2
    a2b0:	39fff404 	addi	r7,r7,-48
    a2b4:	8809883a 	mov	r4,r17
    a2b8:	000a0cc0 	call	a0cc <__multadd>
    a2bc:	84bff81e 	bne	r16,r18,a2a0 <__s2b+0xb4>
    a2c0:	dfc00617 	ldw	ra,24(sp)
    a2c4:	dd400517 	ldw	r21,20(sp)
    a2c8:	dd000417 	ldw	r20,16(sp)
    a2cc:	dcc00317 	ldw	r19,12(sp)
    a2d0:	dc800217 	ldw	r18,8(sp)
    a2d4:	dc400117 	ldw	r17,4(sp)
    a2d8:	dc000017 	ldw	r16,0(sp)
    a2dc:	dec00704 	addi	sp,sp,28
    a2e0:	f800283a 	ret
    a2e4:	84000284 	addi	r16,r16,10
    a2e8:	1827883a 	mov	r19,r3
    a2ec:	003fe906 	br	a294 <__s2b+0xa8>

0000a2f0 <__hi0bits>:
    a2f0:	20bfffec 	andhi	r2,r4,65535
    a2f4:	1000141e 	bne	r2,zero,a348 <__hi0bits+0x58>
    a2f8:	2008943a 	slli	r4,r4,16
    a2fc:	00800404 	movi	r2,16
    a300:	20ffc02c 	andhi	r3,r4,65280
    a304:	1800021e 	bne	r3,zero,a310 <__hi0bits+0x20>
    a308:	2008923a 	slli	r4,r4,8
    a30c:	10800204 	addi	r2,r2,8
    a310:	20fc002c 	andhi	r3,r4,61440
    a314:	1800021e 	bne	r3,zero,a320 <__hi0bits+0x30>
    a318:	2008913a 	slli	r4,r4,4
    a31c:	10800104 	addi	r2,r2,4
    a320:	20f0002c 	andhi	r3,r4,49152
    a324:	1800031e 	bne	r3,zero,a334 <__hi0bits+0x44>
    a328:	2109883a 	add	r4,r4,r4
    a32c:	10800084 	addi	r2,r2,2
    a330:	2109883a 	add	r4,r4,r4
    a334:	20000316 	blt	r4,zero,a344 <__hi0bits+0x54>
    a338:	2110002c 	andhi	r4,r4,16384
    a33c:	2000041e 	bne	r4,zero,a350 <__hi0bits+0x60>
    a340:	00800804 	movi	r2,32
    a344:	f800283a 	ret
    a348:	0005883a 	mov	r2,zero
    a34c:	003fec06 	br	a300 <__hi0bits+0x10>
    a350:	10800044 	addi	r2,r2,1
    a354:	f800283a 	ret

0000a358 <__lo0bits>:
    a358:	20c00017 	ldw	r3,0(r4)
    a35c:	188001cc 	andi	r2,r3,7
    a360:	10000826 	beq	r2,zero,a384 <__lo0bits+0x2c>
    a364:	1880004c 	andi	r2,r3,1
    a368:	1000211e 	bne	r2,zero,a3f0 <__lo0bits+0x98>
    a36c:	1880008c 	andi	r2,r3,2
    a370:	1000211e 	bne	r2,zero,a3f8 <__lo0bits+0xa0>
    a374:	1806d0ba 	srli	r3,r3,2
    a378:	00800084 	movi	r2,2
    a37c:	20c00015 	stw	r3,0(r4)
    a380:	f800283a 	ret
    a384:	18bfffcc 	andi	r2,r3,65535
    a388:	10001326 	beq	r2,zero,a3d8 <__lo0bits+0x80>
    a38c:	0005883a 	mov	r2,zero
    a390:	19403fcc 	andi	r5,r3,255
    a394:	2800021e 	bne	r5,zero,a3a0 <__lo0bits+0x48>
    a398:	1806d23a 	srli	r3,r3,8
    a39c:	10800204 	addi	r2,r2,8
    a3a0:	194003cc 	andi	r5,r3,15
    a3a4:	2800021e 	bne	r5,zero,a3b0 <__lo0bits+0x58>
    a3a8:	1806d13a 	srli	r3,r3,4
    a3ac:	10800104 	addi	r2,r2,4
    a3b0:	194000cc 	andi	r5,r3,3
    a3b4:	2800021e 	bne	r5,zero,a3c0 <__lo0bits+0x68>
    a3b8:	1806d0ba 	srli	r3,r3,2
    a3bc:	10800084 	addi	r2,r2,2
    a3c0:	1940004c 	andi	r5,r3,1
    a3c4:	2800081e 	bne	r5,zero,a3e8 <__lo0bits+0x90>
    a3c8:	1806d07a 	srli	r3,r3,1
    a3cc:	1800051e 	bne	r3,zero,a3e4 <__lo0bits+0x8c>
    a3d0:	00800804 	movi	r2,32
    a3d4:	f800283a 	ret
    a3d8:	1806d43a 	srli	r3,r3,16
    a3dc:	00800404 	movi	r2,16
    a3e0:	003feb06 	br	a390 <__lo0bits+0x38>
    a3e4:	10800044 	addi	r2,r2,1
    a3e8:	20c00015 	stw	r3,0(r4)
    a3ec:	f800283a 	ret
    a3f0:	0005883a 	mov	r2,zero
    a3f4:	f800283a 	ret
    a3f8:	1806d07a 	srli	r3,r3,1
    a3fc:	00800044 	movi	r2,1
    a400:	20c00015 	stw	r3,0(r4)
    a404:	f800283a 	ret

0000a408 <__i2b>:
    a408:	defffd04 	addi	sp,sp,-12
    a40c:	dc000015 	stw	r16,0(sp)
    a410:	04000044 	movi	r16,1
    a414:	dc400115 	stw	r17,4(sp)
    a418:	2823883a 	mov	r17,r5
    a41c:	800b883a 	mov	r5,r16
    a420:	dfc00215 	stw	ra,8(sp)
    a424:	0009ffc0 	call	9ffc <_Balloc>
    a428:	14400515 	stw	r17,20(r2)
    a42c:	14000415 	stw	r16,16(r2)
    a430:	dfc00217 	ldw	ra,8(sp)
    a434:	dc400117 	ldw	r17,4(sp)
    a438:	dc000017 	ldw	r16,0(sp)
    a43c:	dec00304 	addi	sp,sp,12
    a440:	f800283a 	ret

0000a444 <__multiply>:
    a444:	defffa04 	addi	sp,sp,-24
    a448:	dcc00315 	stw	r19,12(sp)
    a44c:	dc800215 	stw	r18,8(sp)
    a450:	34c00417 	ldw	r19,16(r6)
    a454:	2c800417 	ldw	r18,16(r5)
    a458:	dd000415 	stw	r20,16(sp)
    a45c:	dc400115 	stw	r17,4(sp)
    a460:	dfc00515 	stw	ra,20(sp)
    a464:	dc000015 	stw	r16,0(sp)
    a468:	2829883a 	mov	r20,r5
    a46c:	3023883a 	mov	r17,r6
    a470:	94c0050e 	bge	r18,r19,a488 <__multiply+0x44>
    a474:	9007883a 	mov	r3,r18
    a478:	3029883a 	mov	r20,r6
    a47c:	9825883a 	mov	r18,r19
    a480:	2823883a 	mov	r17,r5
    a484:	1827883a 	mov	r19,r3
    a488:	a0800217 	ldw	r2,8(r20)
    a48c:	94e1883a 	add	r16,r18,r19
    a490:	a1400117 	ldw	r5,4(r20)
    a494:	1400010e 	bge	r2,r16,a49c <__multiply+0x58>
    a498:	29400044 	addi	r5,r5,1
    a49c:	0009ffc0 	call	9ffc <_Balloc>
    a4a0:	8415883a 	add	r10,r16,r16
    a4a4:	12c00504 	addi	r11,r2,20
    a4a8:	5295883a 	add	r10,r10,r10
    a4ac:	5a95883a 	add	r10,r11,r10
    a4b0:	5807883a 	mov	r3,r11
    a4b4:	5a80032e 	bgeu	r11,r10,a4c4 <__multiply+0x80>
    a4b8:	18000015 	stw	zero,0(r3)
    a4bc:	18c00104 	addi	r3,r3,4
    a4c0:	1abffd36 	bltu	r3,r10,a4b8 <__multiply+0x74>
    a4c4:	9ce7883a 	add	r19,r19,r19
    a4c8:	94a5883a 	add	r18,r18,r18
    a4cc:	89800504 	addi	r6,r17,20
    a4d0:	9ce7883a 	add	r19,r19,r19
    a4d4:	a3400504 	addi	r13,r20,20
    a4d8:	94a5883a 	add	r18,r18,r18
    a4dc:	34d9883a 	add	r12,r6,r19
    a4e0:	6c93883a 	add	r9,r13,r18
    a4e4:	3300422e 	bgeu	r6,r12,a5f0 <__multiply+0x1ac>
    a4e8:	37c00017 	ldw	ra,0(r6)
    a4ec:	fbffffcc 	andi	r15,ra,65535
    a4f0:	78001b26 	beq	r15,zero,a560 <__multiply+0x11c>
    a4f4:	5811883a 	mov	r8,r11
    a4f8:	681d883a 	mov	r14,r13
    a4fc:	000f883a 	mov	r7,zero
    a500:	71000017 	ldw	r4,0(r14)
    a504:	40c00017 	ldw	r3,0(r8)
    a508:	73800104 	addi	r14,r14,4
    a50c:	217fffcc 	andi	r5,r4,65535
    a510:	2bcb383a 	mul	r5,r5,r15
    a514:	2008d43a 	srli	r4,r4,16
    a518:	1c7fffcc 	andi	r17,r3,65535
    a51c:	2c4b883a 	add	r5,r5,r17
    a520:	29cb883a 	add	r5,r5,r7
    a524:	23c9383a 	mul	r4,r4,r15
    a528:	1806d43a 	srli	r3,r3,16
    a52c:	280ed43a 	srli	r7,r5,16
    a530:	297fffcc 	andi	r5,r5,65535
    a534:	20c7883a 	add	r3,r4,r3
    a538:	19c7883a 	add	r3,r3,r7
    a53c:	1808943a 	slli	r4,r3,16
    a540:	4023883a 	mov	r17,r8
    a544:	180ed43a 	srli	r7,r3,16
    a548:	214ab03a 	or	r5,r4,r5
    a54c:	41400015 	stw	r5,0(r8)
    a550:	42000104 	addi	r8,r8,4
    a554:	727fea36 	bltu	r14,r9,a500 <__multiply+0xbc>
    a558:	89c00115 	stw	r7,4(r17)
    a55c:	37c00017 	ldw	ra,0(r6)
    a560:	f83ed43a 	srli	ra,ra,16
    a564:	f8001f26 	beq	ra,zero,a5e4 <__multiply+0x1a0>
    a568:	58c00017 	ldw	r3,0(r11)
    a56c:	681d883a 	mov	r14,r13
    a570:	581f883a 	mov	r15,r11
    a574:	1811883a 	mov	r8,r3
    a578:	5825883a 	mov	r18,r11
    a57c:	000f883a 	mov	r7,zero
    a580:	00000106 	br	a588 <__multiply+0x144>
    a584:	8825883a 	mov	r18,r17
    a588:	7140000b 	ldhu	r5,0(r14)
    a58c:	4010d43a 	srli	r8,r8,16
    a590:	193fffcc 	andi	r4,r3,65535
    a594:	2fcb383a 	mul	r5,r5,ra
    a598:	7bc00104 	addi	r15,r15,4
    a59c:	73800104 	addi	r14,r14,4
    a5a0:	2a0b883a 	add	r5,r5,r8
    a5a4:	29cb883a 	add	r5,r5,r7
    a5a8:	2806943a 	slli	r3,r5,16
    a5ac:	94400104 	addi	r17,r18,4
    a5b0:	280ad43a 	srli	r5,r5,16
    a5b4:	1908b03a 	or	r4,r3,r4
    a5b8:	793fff15 	stw	r4,-4(r15)
    a5bc:	70ffff17 	ldw	r3,-4(r14)
    a5c0:	8a000017 	ldw	r8,0(r17)
    a5c4:	1806d43a 	srli	r3,r3,16
    a5c8:	413fffcc 	andi	r4,r8,65535
    a5cc:	1fc7383a 	mul	r3,r3,ra
    a5d0:	1907883a 	add	r3,r3,r4
    a5d4:	1947883a 	add	r3,r3,r5
    a5d8:	180ed43a 	srli	r7,r3,16
    a5dc:	727fe936 	bltu	r14,r9,a584 <__multiply+0x140>
    a5e0:	90c00115 	stw	r3,4(r18)
    a5e4:	31800104 	addi	r6,r6,4
    a5e8:	5ac00104 	addi	r11,r11,4
    a5ec:	333fbe36 	bltu	r6,r12,a4e8 <__multiply+0xa4>
    a5f0:	0400090e 	bge	zero,r16,a618 <__multiply+0x1d4>
    a5f4:	50ffff17 	ldw	r3,-4(r10)
    a5f8:	52bfff04 	addi	r10,r10,-4
    a5fc:	18000326 	beq	r3,zero,a60c <__multiply+0x1c8>
    a600:	00000506 	br	a618 <__multiply+0x1d4>
    a604:	50c00017 	ldw	r3,0(r10)
    a608:	1800031e 	bne	r3,zero,a618 <__multiply+0x1d4>
    a60c:	843fffc4 	addi	r16,r16,-1
    a610:	52bfff04 	addi	r10,r10,-4
    a614:	803ffb1e 	bne	r16,zero,a604 <__multiply+0x1c0>
    a618:	14000415 	stw	r16,16(r2)
    a61c:	dfc00517 	ldw	ra,20(sp)
    a620:	dd000417 	ldw	r20,16(sp)
    a624:	dcc00317 	ldw	r19,12(sp)
    a628:	dc800217 	ldw	r18,8(sp)
    a62c:	dc400117 	ldw	r17,4(sp)
    a630:	dc000017 	ldw	r16,0(sp)
    a634:	dec00604 	addi	sp,sp,24
    a638:	f800283a 	ret

0000a63c <__pow5mult>:
    a63c:	defffa04 	addi	sp,sp,-24
    a640:	dcc00315 	stw	r19,12(sp)
    a644:	dc000015 	stw	r16,0(sp)
    a648:	dfc00515 	stw	ra,20(sp)
    a64c:	dd000415 	stw	r20,16(sp)
    a650:	dc800215 	stw	r18,8(sp)
    a654:	dc400115 	stw	r17,4(sp)
    a658:	308000cc 	andi	r2,r6,3
    a65c:	3021883a 	mov	r16,r6
    a660:	2027883a 	mov	r19,r4
    a664:	10002f1e 	bne	r2,zero,a724 <__pow5mult+0xe8>
    a668:	2825883a 	mov	r18,r5
    a66c:	8021d0ba 	srai	r16,r16,2
    a670:	80001a26 	beq	r16,zero,a6dc <__pow5mult+0xa0>
    a674:	9c401217 	ldw	r17,72(r19)
    a678:	8800061e 	bne	r17,zero,a694 <__pow5mult+0x58>
    a67c:	00003406 	br	a750 <__pow5mult+0x114>
    a680:	8021d07a 	srai	r16,r16,1
    a684:	80001526 	beq	r16,zero,a6dc <__pow5mult+0xa0>
    a688:	88800017 	ldw	r2,0(r17)
    a68c:	10001c26 	beq	r2,zero,a700 <__pow5mult+0xc4>
    a690:	1023883a 	mov	r17,r2
    a694:	8080004c 	andi	r2,r16,1
    a698:	103ff926 	beq	r2,zero,a680 <__pow5mult+0x44>
    a69c:	880d883a 	mov	r6,r17
    a6a0:	900b883a 	mov	r5,r18
    a6a4:	9809883a 	mov	r4,r19
    a6a8:	000a4440 	call	a444 <__multiply>
    a6ac:	90001b26 	beq	r18,zero,a71c <__pow5mult+0xe0>
    a6b0:	91000117 	ldw	r4,4(r18)
    a6b4:	98c01317 	ldw	r3,76(r19)
    a6b8:	8021d07a 	srai	r16,r16,1
    a6bc:	2109883a 	add	r4,r4,r4
    a6c0:	2109883a 	add	r4,r4,r4
    a6c4:	1907883a 	add	r3,r3,r4
    a6c8:	19000017 	ldw	r4,0(r3)
    a6cc:	91000015 	stw	r4,0(r18)
    a6d0:	1c800015 	stw	r18,0(r3)
    a6d4:	1025883a 	mov	r18,r2
    a6d8:	803feb1e 	bne	r16,zero,a688 <__pow5mult+0x4c>
    a6dc:	9005883a 	mov	r2,r18
    a6e0:	dfc00517 	ldw	ra,20(sp)
    a6e4:	dd000417 	ldw	r20,16(sp)
    a6e8:	dcc00317 	ldw	r19,12(sp)
    a6ec:	dc800217 	ldw	r18,8(sp)
    a6f0:	dc400117 	ldw	r17,4(sp)
    a6f4:	dc000017 	ldw	r16,0(sp)
    a6f8:	dec00604 	addi	sp,sp,24
    a6fc:	f800283a 	ret
    a700:	880d883a 	mov	r6,r17
    a704:	880b883a 	mov	r5,r17
    a708:	9809883a 	mov	r4,r19
    a70c:	000a4440 	call	a444 <__multiply>
    a710:	88800015 	stw	r2,0(r17)
    a714:	10000015 	stw	zero,0(r2)
    a718:	003fdd06 	br	a690 <__pow5mult+0x54>
    a71c:	1025883a 	mov	r18,r2
    a720:	003fd706 	br	a680 <__pow5mult+0x44>
    a724:	10bfffc4 	addi	r2,r2,-1
    a728:	1085883a 	add	r2,r2,r2
    a72c:	00c000b4 	movhi	r3,2
    a730:	18fd2904 	addi	r3,r3,-2908
    a734:	1085883a 	add	r2,r2,r2
    a738:	1885883a 	add	r2,r3,r2
    a73c:	11800017 	ldw	r6,0(r2)
    a740:	000f883a 	mov	r7,zero
    a744:	000a0cc0 	call	a0cc <__multadd>
    a748:	1025883a 	mov	r18,r2
    a74c:	003fc706 	br	a66c <__pow5mult+0x30>
    a750:	05000044 	movi	r20,1
    a754:	a00b883a 	mov	r5,r20
    a758:	9809883a 	mov	r4,r19
    a75c:	0009ffc0 	call	9ffc <_Balloc>
    a760:	1023883a 	mov	r17,r2
    a764:	00809c44 	movi	r2,625
    a768:	88800515 	stw	r2,20(r17)
    a76c:	8d000415 	stw	r20,16(r17)
    a770:	9c401215 	stw	r17,72(r19)
    a774:	88000015 	stw	zero,0(r17)
    a778:	003fc606 	br	a694 <__pow5mult+0x58>

0000a77c <__lshift>:
    a77c:	defff904 	addi	sp,sp,-28
    a780:	dd400515 	stw	r21,20(sp)
    a784:	dcc00315 	stw	r19,12(sp)
    a788:	302bd17a 	srai	r21,r6,5
    a78c:	2cc00417 	ldw	r19,16(r5)
    a790:	28800217 	ldw	r2,8(r5)
    a794:	dd000415 	stw	r20,16(sp)
    a798:	ace7883a 	add	r19,r21,r19
    a79c:	dc800215 	stw	r18,8(sp)
    a7a0:	dc400115 	stw	r17,4(sp)
    a7a4:	dc000015 	stw	r16,0(sp)
    a7a8:	dfc00615 	stw	ra,24(sp)
    a7ac:	9c000044 	addi	r16,r19,1
    a7b0:	2823883a 	mov	r17,r5
    a7b4:	3029883a 	mov	r20,r6
    a7b8:	2025883a 	mov	r18,r4
    a7bc:	29400117 	ldw	r5,4(r5)
    a7c0:	1400030e 	bge	r2,r16,a7d0 <__lshift+0x54>
    a7c4:	1085883a 	add	r2,r2,r2
    a7c8:	29400044 	addi	r5,r5,1
    a7cc:	143ffd16 	blt	r2,r16,a7c4 <__lshift+0x48>
    a7d0:	9009883a 	mov	r4,r18
    a7d4:	0009ffc0 	call	9ffc <_Balloc>
    a7d8:	10c00504 	addi	r3,r2,20
    a7dc:	0540070e 	bge	zero,r21,a7fc <__lshift+0x80>
    a7e0:	ad6b883a 	add	r21,r21,r21
    a7e4:	ad6b883a 	add	r21,r21,r21
    a7e8:	1809883a 	mov	r4,r3
    a7ec:	1d47883a 	add	r3,r3,r21
    a7f0:	20000015 	stw	zero,0(r4)
    a7f4:	21000104 	addi	r4,r4,4
    a7f8:	193ffd1e 	bne	r3,r4,a7f0 <__lshift+0x74>
    a7fc:	8a000417 	ldw	r8,16(r17)
    a800:	89000504 	addi	r4,r17,20
    a804:	a18007cc 	andi	r6,r20,31
    a808:	4211883a 	add	r8,r8,r8
    a80c:	4211883a 	add	r8,r8,r8
    a810:	2211883a 	add	r8,r4,r8
    a814:	30002326 	beq	r6,zero,a8a4 <__lshift+0x128>
    a818:	02400804 	movi	r9,32
    a81c:	4993c83a 	sub	r9,r9,r6
    a820:	000b883a 	mov	r5,zero
    a824:	21c00017 	ldw	r7,0(r4)
    a828:	1815883a 	mov	r10,r3
    a82c:	18c00104 	addi	r3,r3,4
    a830:	398e983a 	sll	r7,r7,r6
    a834:	21000104 	addi	r4,r4,4
    a838:	394ab03a 	or	r5,r7,r5
    a83c:	197fff15 	stw	r5,-4(r3)
    a840:	217fff17 	ldw	r5,-4(r4)
    a844:	2a4ad83a 	srl	r5,r5,r9
    a848:	223ff636 	bltu	r4,r8,a824 <__lshift+0xa8>
    a84c:	51400115 	stw	r5,4(r10)
    a850:	28001a1e 	bne	r5,zero,a8bc <__lshift+0x140>
    a854:	843fffc4 	addi	r16,r16,-1
    a858:	14000415 	stw	r16,16(r2)
    a85c:	88000826 	beq	r17,zero,a880 <__lshift+0x104>
    a860:	89000117 	ldw	r4,4(r17)
    a864:	90c01317 	ldw	r3,76(r18)
    a868:	2109883a 	add	r4,r4,r4
    a86c:	2109883a 	add	r4,r4,r4
    a870:	1907883a 	add	r3,r3,r4
    a874:	19000017 	ldw	r4,0(r3)
    a878:	89000015 	stw	r4,0(r17)
    a87c:	1c400015 	stw	r17,0(r3)
    a880:	dfc00617 	ldw	ra,24(sp)
    a884:	dd400517 	ldw	r21,20(sp)
    a888:	dd000417 	ldw	r20,16(sp)
    a88c:	dcc00317 	ldw	r19,12(sp)
    a890:	dc800217 	ldw	r18,8(sp)
    a894:	dc400117 	ldw	r17,4(sp)
    a898:	dc000017 	ldw	r16,0(sp)
    a89c:	dec00704 	addi	sp,sp,28
    a8a0:	f800283a 	ret
    a8a4:	21400017 	ldw	r5,0(r4)
    a8a8:	18c00104 	addi	r3,r3,4
    a8ac:	21000104 	addi	r4,r4,4
    a8b0:	197fff15 	stw	r5,-4(r3)
    a8b4:	223ffb36 	bltu	r4,r8,a8a4 <__lshift+0x128>
    a8b8:	003fe606 	br	a854 <__lshift+0xd8>
    a8bc:	9c000084 	addi	r16,r19,2
    a8c0:	003fe406 	br	a854 <__lshift+0xd8>

0000a8c4 <__mcmp>:
    a8c4:	20800417 	ldw	r2,16(r4)
    a8c8:	28c00417 	ldw	r3,16(r5)
    a8cc:	10c5c83a 	sub	r2,r2,r3
    a8d0:	1000111e 	bne	r2,zero,a918 <__mcmp+0x54>
    a8d4:	18c7883a 	add	r3,r3,r3
    a8d8:	18c7883a 	add	r3,r3,r3
    a8dc:	21000504 	addi	r4,r4,20
    a8e0:	29400504 	addi	r5,r5,20
    a8e4:	20c5883a 	add	r2,r4,r3
    a8e8:	28cb883a 	add	r5,r5,r3
    a8ec:	00000106 	br	a8f4 <__mcmp+0x30>
    a8f0:	20800a2e 	bgeu	r4,r2,a91c <__mcmp+0x58>
    a8f4:	10bfff04 	addi	r2,r2,-4
    a8f8:	297fff04 	addi	r5,r5,-4
    a8fc:	11800017 	ldw	r6,0(r2)
    a900:	28c00017 	ldw	r3,0(r5)
    a904:	30fffa26 	beq	r6,r3,a8f0 <__mcmp+0x2c>
    a908:	30c00236 	bltu	r6,r3,a914 <__mcmp+0x50>
    a90c:	00800044 	movi	r2,1
    a910:	f800283a 	ret
    a914:	00bfffc4 	movi	r2,-1
    a918:	f800283a 	ret
    a91c:	0005883a 	mov	r2,zero
    a920:	f800283a 	ret

0000a924 <__mdiff>:
    a924:	28c00417 	ldw	r3,16(r5)
    a928:	30800417 	ldw	r2,16(r6)
    a92c:	defffa04 	addi	sp,sp,-24
    a930:	dcc00315 	stw	r19,12(sp)
    a934:	dc800215 	stw	r18,8(sp)
    a938:	dfc00515 	stw	ra,20(sp)
    a93c:	dd000415 	stw	r20,16(sp)
    a940:	dc400115 	stw	r17,4(sp)
    a944:	dc000015 	stw	r16,0(sp)
    a948:	1887c83a 	sub	r3,r3,r2
    a94c:	2825883a 	mov	r18,r5
    a950:	3027883a 	mov	r19,r6
    a954:	1800141e 	bne	r3,zero,a9a8 <__mdiff+0x84>
    a958:	1085883a 	add	r2,r2,r2
    a95c:	1085883a 	add	r2,r2,r2
    a960:	2a000504 	addi	r8,r5,20
    a964:	34000504 	addi	r16,r6,20
    a968:	4087883a 	add	r3,r8,r2
    a96c:	8085883a 	add	r2,r16,r2
    a970:	00000106 	br	a978 <__mdiff+0x54>
    a974:	40c0592e 	bgeu	r8,r3,aadc <__mdiff+0x1b8>
    a978:	18ffff04 	addi	r3,r3,-4
    a97c:	10bfff04 	addi	r2,r2,-4
    a980:	19c00017 	ldw	r7,0(r3)
    a984:	11400017 	ldw	r5,0(r2)
    a988:	397ffa26 	beq	r7,r5,a974 <__mdiff+0x50>
    a98c:	3940592e 	bgeu	r7,r5,aaf4 <__mdiff+0x1d0>
    a990:	9005883a 	mov	r2,r18
    a994:	4023883a 	mov	r17,r8
    a998:	9825883a 	mov	r18,r19
    a99c:	05000044 	movi	r20,1
    a9a0:	1027883a 	mov	r19,r2
    a9a4:	00000406 	br	a9b8 <__mdiff+0x94>
    a9a8:	18005616 	blt	r3,zero,ab04 <__mdiff+0x1e0>
    a9ac:	34400504 	addi	r17,r6,20
    a9b0:	2c000504 	addi	r16,r5,20
    a9b4:	0029883a 	mov	r20,zero
    a9b8:	91400117 	ldw	r5,4(r18)
    a9bc:	0009ffc0 	call	9ffc <_Balloc>
    a9c0:	92400417 	ldw	r9,16(r18)
    a9c4:	9b000417 	ldw	r12,16(r19)
    a9c8:	12c00504 	addi	r11,r2,20
    a9cc:	4a51883a 	add	r8,r9,r9
    a9d0:	6319883a 	add	r12,r12,r12
    a9d4:	4211883a 	add	r8,r8,r8
    a9d8:	6319883a 	add	r12,r12,r12
    a9dc:	15000315 	stw	r20,12(r2)
    a9e0:	8211883a 	add	r8,r16,r8
    a9e4:	8b19883a 	add	r12,r17,r12
    a9e8:	0007883a 	mov	r3,zero
    a9ec:	81400017 	ldw	r5,0(r16)
    a9f0:	89c00017 	ldw	r7,0(r17)
    a9f4:	59800104 	addi	r6,r11,4
    a9f8:	293fffcc 	andi	r4,r5,65535
    a9fc:	20c7883a 	add	r3,r4,r3
    aa00:	393fffcc 	andi	r4,r7,65535
    aa04:	1909c83a 	sub	r4,r3,r4
    aa08:	280ad43a 	srli	r5,r5,16
    aa0c:	380ed43a 	srli	r7,r7,16
    aa10:	2007d43a 	srai	r3,r4,16
    aa14:	213fffcc 	andi	r4,r4,65535
    aa18:	29cbc83a 	sub	r5,r5,r7
    aa1c:	28c7883a 	add	r3,r5,r3
    aa20:	180a943a 	slli	r5,r3,16
    aa24:	8c400104 	addi	r17,r17,4
    aa28:	84000104 	addi	r16,r16,4
    aa2c:	2908b03a 	or	r4,r5,r4
    aa30:	59000015 	stw	r4,0(r11)
    aa34:	1807d43a 	srai	r3,r3,16
    aa38:	3015883a 	mov	r10,r6
    aa3c:	3017883a 	mov	r11,r6
    aa40:	8b3fea36 	bltu	r17,r12,a9ec <__mdiff+0xc8>
    aa44:	8200162e 	bgeu	r16,r8,aaa0 <__mdiff+0x17c>
    aa48:	8017883a 	mov	r11,r16
    aa4c:	59400017 	ldw	r5,0(r11)
    aa50:	31800104 	addi	r6,r6,4
    aa54:	5ac00104 	addi	r11,r11,4
    aa58:	293fffcc 	andi	r4,r5,65535
    aa5c:	20c7883a 	add	r3,r4,r3
    aa60:	280ed43a 	srli	r7,r5,16
    aa64:	180bd43a 	srai	r5,r3,16
    aa68:	193fffcc 	andi	r4,r3,65535
    aa6c:	3947883a 	add	r3,r7,r5
    aa70:	180a943a 	slli	r5,r3,16
    aa74:	1807d43a 	srai	r3,r3,16
    aa78:	2908b03a 	or	r4,r5,r4
    aa7c:	313fff15 	stw	r4,-4(r6)
    aa80:	5a3ff236 	bltu	r11,r8,aa4c <__mdiff+0x128>
    aa84:	0406303a 	nor	r3,zero,r16
    aa88:	1a07883a 	add	r3,r3,r8
    aa8c:	1806d0ba 	srli	r3,r3,2
    aa90:	18c00044 	addi	r3,r3,1
    aa94:	18c7883a 	add	r3,r3,r3
    aa98:	18c7883a 	add	r3,r3,r3
    aa9c:	50d5883a 	add	r10,r10,r3
    aaa0:	50ffff04 	addi	r3,r10,-4
    aaa4:	2000041e 	bne	r4,zero,aab8 <__mdiff+0x194>
    aaa8:	18ffff04 	addi	r3,r3,-4
    aaac:	19000017 	ldw	r4,0(r3)
    aab0:	4a7fffc4 	addi	r9,r9,-1
    aab4:	203ffc26 	beq	r4,zero,aaa8 <__mdiff+0x184>
    aab8:	12400415 	stw	r9,16(r2)
    aabc:	dfc00517 	ldw	ra,20(sp)
    aac0:	dd000417 	ldw	r20,16(sp)
    aac4:	dcc00317 	ldw	r19,12(sp)
    aac8:	dc800217 	ldw	r18,8(sp)
    aacc:	dc400117 	ldw	r17,4(sp)
    aad0:	dc000017 	ldw	r16,0(sp)
    aad4:	dec00604 	addi	sp,sp,24
    aad8:	f800283a 	ret
    aadc:	000b883a 	mov	r5,zero
    aae0:	0009ffc0 	call	9ffc <_Balloc>
    aae4:	00c00044 	movi	r3,1
    aae8:	10c00415 	stw	r3,16(r2)
    aaec:	10000515 	stw	zero,20(r2)
    aaf0:	003ff206 	br	aabc <__mdiff+0x198>
    aaf4:	8023883a 	mov	r17,r16
    aaf8:	0029883a 	mov	r20,zero
    aafc:	4021883a 	mov	r16,r8
    ab00:	003fad06 	br	a9b8 <__mdiff+0x94>
    ab04:	9005883a 	mov	r2,r18
    ab08:	94400504 	addi	r17,r18,20
    ab0c:	9c000504 	addi	r16,r19,20
    ab10:	9825883a 	mov	r18,r19
    ab14:	05000044 	movi	r20,1
    ab18:	1027883a 	mov	r19,r2
    ab1c:	003fa606 	br	a9b8 <__mdiff+0x94>

0000ab20 <__ulp>:
    ab20:	295ffc2c 	andhi	r5,r5,32752
    ab24:	00bf3034 	movhi	r2,64704
    ab28:	2887883a 	add	r3,r5,r2
    ab2c:	00c0020e 	bge	zero,r3,ab38 <__ulp+0x18>
    ab30:	0005883a 	mov	r2,zero
    ab34:	f800283a 	ret
    ab38:	00c7c83a 	sub	r3,zero,r3
    ab3c:	1807d53a 	srai	r3,r3,20
    ab40:	008004c4 	movi	r2,19
    ab44:	10c00b0e 	bge	r2,r3,ab74 <__ulp+0x54>
    ab48:	18bffb04 	addi	r2,r3,-20
    ab4c:	01000784 	movi	r4,30
    ab50:	0007883a 	mov	r3,zero
    ab54:	20800516 	blt	r4,r2,ab6c <__ulp+0x4c>
    ab58:	010007c4 	movi	r4,31
    ab5c:	2089c83a 	sub	r4,r4,r2
    ab60:	00800044 	movi	r2,1
    ab64:	1104983a 	sll	r2,r2,r4
    ab68:	f800283a 	ret
    ab6c:	00800044 	movi	r2,1
    ab70:	f800283a 	ret
    ab74:	01400234 	movhi	r5,8
    ab78:	28c7d83a 	sra	r3,r5,r3
    ab7c:	0005883a 	mov	r2,zero
    ab80:	f800283a 	ret

0000ab84 <__b2d>:
    ab84:	defffa04 	addi	sp,sp,-24
    ab88:	dc000015 	stw	r16,0(sp)
    ab8c:	24000417 	ldw	r16,16(r4)
    ab90:	dc400115 	stw	r17,4(sp)
    ab94:	24400504 	addi	r17,r4,20
    ab98:	8421883a 	add	r16,r16,r16
    ab9c:	8421883a 	add	r16,r16,r16
    aba0:	8c21883a 	add	r16,r17,r16
    aba4:	dc800215 	stw	r18,8(sp)
    aba8:	84bfff17 	ldw	r18,-4(r16)
    abac:	dd000415 	stw	r20,16(sp)
    abb0:	dcc00315 	stw	r19,12(sp)
    abb4:	9009883a 	mov	r4,r18
    abb8:	2829883a 	mov	r20,r5
    abbc:	dfc00515 	stw	ra,20(sp)
    abc0:	000a2f00 	call	a2f0 <__hi0bits>
    abc4:	00c00804 	movi	r3,32
    abc8:	1889c83a 	sub	r4,r3,r2
    abcc:	a1000015 	stw	r4,0(r20)
    abd0:	01000284 	movi	r4,10
    abd4:	84ffff04 	addi	r19,r16,-4
    abd8:	20801216 	blt	r4,r2,ac24 <__b2d+0xa0>
    abdc:	018002c4 	movi	r6,11
    abe0:	308dc83a 	sub	r6,r6,r2
    abe4:	9186d83a 	srl	r3,r18,r6
    abe8:	18cffc34 	orhi	r3,r3,16368
    abec:	8cc0212e 	bgeu	r17,r19,ac74 <__b2d+0xf0>
    abf0:	813ffe17 	ldw	r4,-8(r16)
    abf4:	218cd83a 	srl	r6,r4,r6
    abf8:	10800544 	addi	r2,r2,21
    abfc:	9084983a 	sll	r2,r18,r2
    ac00:	1184b03a 	or	r2,r2,r6
    ac04:	dfc00517 	ldw	ra,20(sp)
    ac08:	dd000417 	ldw	r20,16(sp)
    ac0c:	dcc00317 	ldw	r19,12(sp)
    ac10:	dc800217 	ldw	r18,8(sp)
    ac14:	dc400117 	ldw	r17,4(sp)
    ac18:	dc000017 	ldw	r16,0(sp)
    ac1c:	dec00604 	addi	sp,sp,24
    ac20:	f800283a 	ret
    ac24:	8cc00f2e 	bgeu	r17,r19,ac64 <__b2d+0xe0>
    ac28:	117ffd44 	addi	r5,r2,-11
    ac2c:	80bffe17 	ldw	r2,-8(r16)
    ac30:	28000e26 	beq	r5,zero,ac6c <__b2d+0xe8>
    ac34:	1949c83a 	sub	r4,r3,r5
    ac38:	9164983a 	sll	r18,r18,r5
    ac3c:	1106d83a 	srl	r3,r2,r4
    ac40:	81bffe04 	addi	r6,r16,-8
    ac44:	948ffc34 	orhi	r18,r18,16368
    ac48:	90c6b03a 	or	r3,r18,r3
    ac4c:	89800e2e 	bgeu	r17,r6,ac88 <__b2d+0x104>
    ac50:	81bffd17 	ldw	r6,-12(r16)
    ac54:	1144983a 	sll	r2,r2,r5
    ac58:	310ad83a 	srl	r5,r6,r4
    ac5c:	2884b03a 	or	r2,r5,r2
    ac60:	003fe806 	br	ac04 <__b2d+0x80>
    ac64:	10bffd44 	addi	r2,r2,-11
    ac68:	1000041e 	bne	r2,zero,ac7c <__b2d+0xf8>
    ac6c:	90cffc34 	orhi	r3,r18,16368
    ac70:	003fe406 	br	ac04 <__b2d+0x80>
    ac74:	000d883a 	mov	r6,zero
    ac78:	003fdf06 	br	abf8 <__b2d+0x74>
    ac7c:	90a4983a 	sll	r18,r18,r2
    ac80:	0005883a 	mov	r2,zero
    ac84:	003ff906 	br	ac6c <__b2d+0xe8>
    ac88:	1144983a 	sll	r2,r2,r5
    ac8c:	003fdd06 	br	ac04 <__b2d+0x80>

0000ac90 <__d2b>:
    ac90:	defff804 	addi	sp,sp,-32
    ac94:	dc000215 	stw	r16,8(sp)
    ac98:	3021883a 	mov	r16,r6
    ac9c:	dc400315 	stw	r17,12(sp)
    aca0:	8022907a 	slli	r17,r16,1
    aca4:	dd000615 	stw	r20,24(sp)
    aca8:	2829883a 	mov	r20,r5
    acac:	01400044 	movi	r5,1
    acb0:	dcc00515 	stw	r19,20(sp)
    acb4:	dc800415 	stw	r18,16(sp)
    acb8:	dfc00715 	stw	ra,28(sp)
    acbc:	3825883a 	mov	r18,r7
    acc0:	8822d57a 	srli	r17,r17,21
    acc4:	0009ffc0 	call	9ffc <_Balloc>
    acc8:	1027883a 	mov	r19,r2
    accc:	00800434 	movhi	r2,16
    acd0:	10bfffc4 	addi	r2,r2,-1
    acd4:	808c703a 	and	r6,r16,r2
    acd8:	88000126 	beq	r17,zero,ace0 <__d2b+0x50>
    acdc:	31800434 	orhi	r6,r6,16
    ace0:	d9800015 	stw	r6,0(sp)
    ace4:	a0002426 	beq	r20,zero,ad78 <__d2b+0xe8>
    ace8:	d9000104 	addi	r4,sp,4
    acec:	dd000115 	stw	r20,4(sp)
    acf0:	000a3580 	call	a358 <__lo0bits>
    acf4:	d8c00017 	ldw	r3,0(sp)
    acf8:	10002f1e 	bne	r2,zero,adb8 <__d2b+0x128>
    acfc:	d9000117 	ldw	r4,4(sp)
    ad00:	99000515 	stw	r4,20(r19)
    ad04:	1821003a 	cmpeq	r16,r3,zero
    ad08:	01000084 	movi	r4,2
    ad0c:	2421c83a 	sub	r16,r4,r16
    ad10:	98c00615 	stw	r3,24(r19)
    ad14:	9c000415 	stw	r16,16(r19)
    ad18:	88001f1e 	bne	r17,zero,ad98 <__d2b+0x108>
    ad1c:	10bef384 	addi	r2,r2,-1074
    ad20:	90800015 	stw	r2,0(r18)
    ad24:	00900034 	movhi	r2,16384
    ad28:	10bfffc4 	addi	r2,r2,-1
    ad2c:	8085883a 	add	r2,r16,r2
    ad30:	1085883a 	add	r2,r2,r2
    ad34:	1085883a 	add	r2,r2,r2
    ad38:	9885883a 	add	r2,r19,r2
    ad3c:	11000517 	ldw	r4,20(r2)
    ad40:	8020917a 	slli	r16,r16,5
    ad44:	000a2f00 	call	a2f0 <__hi0bits>
    ad48:	d8c00817 	ldw	r3,32(sp)
    ad4c:	8085c83a 	sub	r2,r16,r2
    ad50:	18800015 	stw	r2,0(r3)
    ad54:	9805883a 	mov	r2,r19
    ad58:	dfc00717 	ldw	ra,28(sp)
    ad5c:	dd000617 	ldw	r20,24(sp)
    ad60:	dcc00517 	ldw	r19,20(sp)
    ad64:	dc800417 	ldw	r18,16(sp)
    ad68:	dc400317 	ldw	r17,12(sp)
    ad6c:	dc000217 	ldw	r16,8(sp)
    ad70:	dec00804 	addi	sp,sp,32
    ad74:	f800283a 	ret
    ad78:	d809883a 	mov	r4,sp
    ad7c:	000a3580 	call	a358 <__lo0bits>
    ad80:	d8c00017 	ldw	r3,0(sp)
    ad84:	04000044 	movi	r16,1
    ad88:	9c000415 	stw	r16,16(r19)
    ad8c:	98c00515 	stw	r3,20(r19)
    ad90:	10800804 	addi	r2,r2,32
    ad94:	883fe126 	beq	r17,zero,ad1c <__d2b+0x8c>
    ad98:	00c00d44 	movi	r3,53
    ad9c:	8c7ef344 	addi	r17,r17,-1075
    ada0:	88a3883a 	add	r17,r17,r2
    ada4:	1885c83a 	sub	r2,r3,r2
    ada8:	d8c00817 	ldw	r3,32(sp)
    adac:	94400015 	stw	r17,0(r18)
    adb0:	18800015 	stw	r2,0(r3)
    adb4:	003fe706 	br	ad54 <__d2b+0xc4>
    adb8:	01000804 	movi	r4,32
    adbc:	2089c83a 	sub	r4,r4,r2
    adc0:	1908983a 	sll	r4,r3,r4
    adc4:	d9400117 	ldw	r5,4(sp)
    adc8:	1886d83a 	srl	r3,r3,r2
    adcc:	2148b03a 	or	r4,r4,r5
    add0:	99000515 	stw	r4,20(r19)
    add4:	d8c00015 	stw	r3,0(sp)
    add8:	003fca06 	br	ad04 <__d2b+0x74>

0000addc <__ratio>:
    addc:	defff904 	addi	sp,sp,-28
    ade0:	dc400315 	stw	r17,12(sp)
    ade4:	2823883a 	mov	r17,r5
    ade8:	d9400104 	addi	r5,sp,4
    adec:	dfc00615 	stw	ra,24(sp)
    adf0:	dcc00515 	stw	r19,20(sp)
    adf4:	dc800415 	stw	r18,16(sp)
    adf8:	2027883a 	mov	r19,r4
    adfc:	dc000215 	stw	r16,8(sp)
    ae00:	000ab840 	call	ab84 <__b2d>
    ae04:	d80b883a 	mov	r5,sp
    ae08:	8809883a 	mov	r4,r17
    ae0c:	1025883a 	mov	r18,r2
    ae10:	1821883a 	mov	r16,r3
    ae14:	000ab840 	call	ab84 <__b2d>
    ae18:	8a000417 	ldw	r8,16(r17)
    ae1c:	99000417 	ldw	r4,16(r19)
    ae20:	d9400117 	ldw	r5,4(sp)
    ae24:	2209c83a 	sub	r4,r4,r8
    ae28:	2010917a 	slli	r8,r4,5
    ae2c:	d9000017 	ldw	r4,0(sp)
    ae30:	2909c83a 	sub	r4,r5,r4
    ae34:	4109883a 	add	r4,r8,r4
    ae38:	01000e0e 	bge	zero,r4,ae74 <__ratio+0x98>
    ae3c:	2008953a 	slli	r4,r4,20
    ae40:	2421883a 	add	r16,r4,r16
    ae44:	100d883a 	mov	r6,r2
    ae48:	180f883a 	mov	r7,r3
    ae4c:	9009883a 	mov	r4,r18
    ae50:	800b883a 	mov	r5,r16
    ae54:	00107840 	call	10784 <__divdf3>
    ae58:	dfc00617 	ldw	ra,24(sp)
    ae5c:	dcc00517 	ldw	r19,20(sp)
    ae60:	dc800417 	ldw	r18,16(sp)
    ae64:	dc400317 	ldw	r17,12(sp)
    ae68:	dc000217 	ldw	r16,8(sp)
    ae6c:	dec00704 	addi	sp,sp,28
    ae70:	f800283a 	ret
    ae74:	2008953a 	slli	r4,r4,20
    ae78:	1907c83a 	sub	r3,r3,r4
    ae7c:	003ff106 	br	ae44 <__ratio+0x68>

0000ae80 <_mprec_log10>:
    ae80:	defffe04 	addi	sp,sp,-8
    ae84:	dc000015 	stw	r16,0(sp)
    ae88:	dfc00115 	stw	ra,4(sp)
    ae8c:	008005c4 	movi	r2,23
    ae90:	2021883a 	mov	r16,r4
    ae94:	11000d0e 	bge	r2,r4,aecc <_mprec_log10+0x4c>
    ae98:	0005883a 	mov	r2,zero
    ae9c:	00cffc34 	movhi	r3,16368
    aea0:	843fffc4 	addi	r16,r16,-1
    aea4:	000d883a 	mov	r6,zero
    aea8:	01d00934 	movhi	r7,16420
    aeac:	1009883a 	mov	r4,r2
    aeb0:	180b883a 	mov	r5,r3
    aeb4:	00112c40 	call	112c4 <__muldf3>
    aeb8:	803ff91e 	bne	r16,zero,aea0 <_mprec_log10+0x20>
    aebc:	dfc00117 	ldw	ra,4(sp)
    aec0:	dc000017 	ldw	r16,0(sp)
    aec4:	dec00204 	addi	sp,sp,8
    aec8:	f800283a 	ret
    aecc:	202090fa 	slli	r16,r4,3
    aed0:	008000b4 	movhi	r2,2
    aed4:	10bd4004 	addi	r2,r2,-2816
    aed8:	1421883a 	add	r16,r2,r16
    aedc:	80800017 	ldw	r2,0(r16)
    aee0:	80c00117 	ldw	r3,4(r16)
    aee4:	dfc00117 	ldw	ra,4(sp)
    aee8:	dc000017 	ldw	r16,0(sp)
    aeec:	dec00204 	addi	sp,sp,8
    aef0:	f800283a 	ret

0000aef4 <__copybits>:
    aef4:	297fffc4 	addi	r5,r5,-1
    aef8:	280fd17a 	srai	r7,r5,5
    aefc:	30c00417 	ldw	r3,16(r6)
    af00:	30800504 	addi	r2,r6,20
    af04:	39c00044 	addi	r7,r7,1
    af08:	18c7883a 	add	r3,r3,r3
    af0c:	39cf883a 	add	r7,r7,r7
    af10:	18c7883a 	add	r3,r3,r3
    af14:	39cf883a 	add	r7,r7,r7
    af18:	10c7883a 	add	r3,r2,r3
    af1c:	21cf883a 	add	r7,r4,r7
    af20:	10c00d2e 	bgeu	r2,r3,af58 <__copybits+0x64>
    af24:	200b883a 	mov	r5,r4
    af28:	12000017 	ldw	r8,0(r2)
    af2c:	29400104 	addi	r5,r5,4
    af30:	10800104 	addi	r2,r2,4
    af34:	2a3fff15 	stw	r8,-4(r5)
    af38:	10fffb36 	bltu	r2,r3,af28 <__copybits+0x34>
    af3c:	1985c83a 	sub	r2,r3,r6
    af40:	10bffac4 	addi	r2,r2,-21
    af44:	1004d0ba 	srli	r2,r2,2
    af48:	10800044 	addi	r2,r2,1
    af4c:	1085883a 	add	r2,r2,r2
    af50:	1085883a 	add	r2,r2,r2
    af54:	2089883a 	add	r4,r4,r2
    af58:	21c0032e 	bgeu	r4,r7,af68 <__copybits+0x74>
    af5c:	20000015 	stw	zero,0(r4)
    af60:	21000104 	addi	r4,r4,4
    af64:	21fffd36 	bltu	r4,r7,af5c <__copybits+0x68>
    af68:	f800283a 	ret

0000af6c <__any_on>:
    af6c:	20c00417 	ldw	r3,16(r4)
    af70:	2805d17a 	srai	r2,r5,5
    af74:	21000504 	addi	r4,r4,20
    af78:	18800d0e 	bge	r3,r2,afb0 <__any_on+0x44>
    af7c:	18c7883a 	add	r3,r3,r3
    af80:	18c7883a 	add	r3,r3,r3
    af84:	20c7883a 	add	r3,r4,r3
    af88:	20c0192e 	bgeu	r4,r3,aff0 <__any_on+0x84>
    af8c:	18bfff17 	ldw	r2,-4(r3)
    af90:	18ffff04 	addi	r3,r3,-4
    af94:	1000041e 	bne	r2,zero,afa8 <__any_on+0x3c>
    af98:	20c0142e 	bgeu	r4,r3,afec <__any_on+0x80>
    af9c:	18ffff04 	addi	r3,r3,-4
    afa0:	19400017 	ldw	r5,0(r3)
    afa4:	283ffc26 	beq	r5,zero,af98 <__any_on+0x2c>
    afa8:	00800044 	movi	r2,1
    afac:	f800283a 	ret
    afb0:	10c00a0e 	bge	r2,r3,afdc <__any_on+0x70>
    afb4:	1085883a 	add	r2,r2,r2
    afb8:	1085883a 	add	r2,r2,r2
    afbc:	294007cc 	andi	r5,r5,31
    afc0:	2087883a 	add	r3,r4,r2
    afc4:	283ff026 	beq	r5,zero,af88 <__any_on+0x1c>
    afc8:	19800017 	ldw	r6,0(r3)
    afcc:	3144d83a 	srl	r2,r6,r5
    afd0:	114a983a 	sll	r5,r2,r5
    afd4:	317ff41e 	bne	r6,r5,afa8 <__any_on+0x3c>
    afd8:	003feb06 	br	af88 <__any_on+0x1c>
    afdc:	1085883a 	add	r2,r2,r2
    afe0:	1085883a 	add	r2,r2,r2
    afe4:	2087883a 	add	r3,r4,r2
    afe8:	003fe706 	br	af88 <__any_on+0x1c>
    afec:	f800283a 	ret
    aff0:	0005883a 	mov	r2,zero
    aff4:	f800283a 	ret

0000aff8 <__fpclassifyd>:
    aff8:	00a00034 	movhi	r2,32768
    affc:	10bfffc4 	addi	r2,r2,-1
    b000:	2884703a 	and	r2,r5,r2
    b004:	10000726 	beq	r2,zero,b024 <__fpclassifyd+0x2c>
    b008:	00fffc34 	movhi	r3,65520
    b00c:	019ff834 	movhi	r6,32736
    b010:	28c7883a 	add	r3,r5,r3
    b014:	31bfffc4 	addi	r6,r6,-1
    b018:	30c00536 	bltu	r6,r3,b030 <__fpclassifyd+0x38>
    b01c:	00800104 	movi	r2,4
    b020:	f800283a 	ret
    b024:	2000021e 	bne	r4,zero,b030 <__fpclassifyd+0x38>
    b028:	00800084 	movi	r2,2
    b02c:	f800283a 	ret
    b030:	00dffc34 	movhi	r3,32752
    b034:	019ff834 	movhi	r6,32736
    b038:	28cb883a 	add	r5,r5,r3
    b03c:	31bfffc4 	addi	r6,r6,-1
    b040:	317ff62e 	bgeu	r6,r5,b01c <__fpclassifyd+0x24>
    b044:	01400434 	movhi	r5,16
    b048:	297fffc4 	addi	r5,r5,-1
    b04c:	28800236 	bltu	r5,r2,b058 <__fpclassifyd+0x60>
    b050:	008000c4 	movi	r2,3
    b054:	f800283a 	ret
    b058:	10c00226 	beq	r2,r3,b064 <__fpclassifyd+0x6c>
    b05c:	0005883a 	mov	r2,zero
    b060:	f800283a 	ret
    b064:	2005003a 	cmpeq	r2,r4,zero
    b068:	f800283a 	ret

0000b06c <_sbrk_r>:
    b06c:	defffd04 	addi	sp,sp,-12
    b070:	dc000015 	stw	r16,0(sp)
    b074:	040000b4 	movhi	r16,2
    b078:	dc400115 	stw	r17,4(sp)
    b07c:	840df404 	addi	r16,r16,14288
    b080:	2023883a 	mov	r17,r4
    b084:	2809883a 	mov	r4,r5
    b088:	dfc00215 	stw	ra,8(sp)
    b08c:	80000015 	stw	zero,0(r16)
    b090:	0012c980 	call	12c98 <sbrk>
    b094:	00ffffc4 	movi	r3,-1
    b098:	10c00526 	beq	r2,r3,b0b0 <_sbrk_r+0x44>
    b09c:	dfc00217 	ldw	ra,8(sp)
    b0a0:	dc400117 	ldw	r17,4(sp)
    b0a4:	dc000017 	ldw	r16,0(sp)
    b0a8:	dec00304 	addi	sp,sp,12
    b0ac:	f800283a 	ret
    b0b0:	80c00017 	ldw	r3,0(r16)
    b0b4:	183ff926 	beq	r3,zero,b09c <_sbrk_r+0x30>
    b0b8:	88c00015 	stw	r3,0(r17)
    b0bc:	003ff706 	br	b09c <_sbrk_r+0x30>

0000b0c0 <__sread>:
    b0c0:	defffe04 	addi	sp,sp,-8
    b0c4:	dc000015 	stw	r16,0(sp)
    b0c8:	2821883a 	mov	r16,r5
    b0cc:	2940038f 	ldh	r5,14(r5)
    b0d0:	dfc00115 	stw	ra,4(sp)
    b0d4:	000e9700 	call	e970 <_read_r>
    b0d8:	10000716 	blt	r2,zero,b0f8 <__sread+0x38>
    b0dc:	80c01417 	ldw	r3,80(r16)
    b0e0:	1887883a 	add	r3,r3,r2
    b0e4:	80c01415 	stw	r3,80(r16)
    b0e8:	dfc00117 	ldw	ra,4(sp)
    b0ec:	dc000017 	ldw	r16,0(sp)
    b0f0:	dec00204 	addi	sp,sp,8
    b0f4:	f800283a 	ret
    b0f8:	80c0030b 	ldhu	r3,12(r16)
    b0fc:	18fbffcc 	andi	r3,r3,61439
    b100:	80c0030d 	sth	r3,12(r16)
    b104:	dfc00117 	ldw	ra,4(sp)
    b108:	dc000017 	ldw	r16,0(sp)
    b10c:	dec00204 	addi	sp,sp,8
    b110:	f800283a 	ret

0000b114 <__seofread>:
    b114:	0005883a 	mov	r2,zero
    b118:	f800283a 	ret

0000b11c <__swrite>:
    b11c:	2880030b 	ldhu	r2,12(r5)
    b120:	defffb04 	addi	sp,sp,-20
    b124:	dcc00315 	stw	r19,12(sp)
    b128:	dc800215 	stw	r18,8(sp)
    b12c:	dc400115 	stw	r17,4(sp)
    b130:	dc000015 	stw	r16,0(sp)
    b134:	dfc00415 	stw	ra,16(sp)
    b138:	10c0400c 	andi	r3,r2,256
    b13c:	2821883a 	mov	r16,r5
    b140:	2023883a 	mov	r17,r4
    b144:	3025883a 	mov	r18,r6
    b148:	3827883a 	mov	r19,r7
    b14c:	18000526 	beq	r3,zero,b164 <__swrite+0x48>
    b150:	2940038f 	ldh	r5,14(r5)
    b154:	01c00084 	movi	r7,2
    b158:	000d883a 	mov	r6,zero
    b15c:	000e7b40 	call	e7b4 <_lseek_r>
    b160:	8080030b 	ldhu	r2,12(r16)
    b164:	8140038f 	ldh	r5,14(r16)
    b168:	10bbffcc 	andi	r2,r2,61439
    b16c:	980f883a 	mov	r7,r19
    b170:	900d883a 	mov	r6,r18
    b174:	8809883a 	mov	r4,r17
    b178:	8080030d 	sth	r2,12(r16)
    b17c:	dfc00417 	ldw	ra,16(sp)
    b180:	dcc00317 	ldw	r19,12(sp)
    b184:	dc800217 	ldw	r18,8(sp)
    b188:	dc400117 	ldw	r17,4(sp)
    b18c:	dc000017 	ldw	r16,0(sp)
    b190:	dec00504 	addi	sp,sp,20
    b194:	000ddc41 	jmpi	ddc4 <_write_r>

0000b198 <__sseek>:
    b198:	defffe04 	addi	sp,sp,-8
    b19c:	dc000015 	stw	r16,0(sp)
    b1a0:	2821883a 	mov	r16,r5
    b1a4:	2940038f 	ldh	r5,14(r5)
    b1a8:	dfc00115 	stw	ra,4(sp)
    b1ac:	000e7b40 	call	e7b4 <_lseek_r>
    b1b0:	00ffffc4 	movi	r3,-1
    b1b4:	10c00826 	beq	r2,r3,b1d8 <__sseek+0x40>
    b1b8:	80c0030b 	ldhu	r3,12(r16)
    b1bc:	80801415 	stw	r2,80(r16)
    b1c0:	18c40014 	ori	r3,r3,4096
    b1c4:	80c0030d 	sth	r3,12(r16)
    b1c8:	dfc00117 	ldw	ra,4(sp)
    b1cc:	dc000017 	ldw	r16,0(sp)
    b1d0:	dec00204 	addi	sp,sp,8
    b1d4:	f800283a 	ret
    b1d8:	80c0030b 	ldhu	r3,12(r16)
    b1dc:	18fbffcc 	andi	r3,r3,61439
    b1e0:	80c0030d 	sth	r3,12(r16)
    b1e4:	dfc00117 	ldw	ra,4(sp)
    b1e8:	dc000017 	ldw	r16,0(sp)
    b1ec:	dec00204 	addi	sp,sp,8
    b1f0:	f800283a 	ret

0000b1f4 <__sclose>:
    b1f4:	2940038f 	ldh	r5,14(r5)
    b1f8:	000de241 	jmpi	de24 <_close_r>

0000b1fc <strcmp>:
    b1fc:	2144b03a 	or	r2,r4,r5
    b200:	108000cc 	andi	r2,r2,3
    b204:	1000171e 	bne	r2,zero,b264 <strcmp+0x68>
    b208:	20800017 	ldw	r2,0(r4)
    b20c:	28c00017 	ldw	r3,0(r5)
    b210:	10c0141e 	bne	r2,r3,b264 <strcmp+0x68>
    b214:	027fbff4 	movhi	r9,65279
    b218:	4a7fbfc4 	addi	r9,r9,-257
    b21c:	0086303a 	nor	r3,zero,r2
    b220:	02202074 	movhi	r8,32897
    b224:	1245883a 	add	r2,r2,r9
    b228:	42202004 	addi	r8,r8,-32640
    b22c:	10c4703a 	and	r2,r2,r3
    b230:	1204703a 	and	r2,r2,r8
    b234:	10000226 	beq	r2,zero,b240 <strcmp+0x44>
    b238:	00002306 	br	b2c8 <strcmp+0xcc>
    b23c:	1000221e 	bne	r2,zero,b2c8 <strcmp+0xcc>
    b240:	21000104 	addi	r4,r4,4
    b244:	20c00017 	ldw	r3,0(r4)
    b248:	29400104 	addi	r5,r5,4
    b24c:	29800017 	ldw	r6,0(r5)
    b250:	1a4f883a 	add	r7,r3,r9
    b254:	00c4303a 	nor	r2,zero,r3
    b258:	3884703a 	and	r2,r7,r2
    b25c:	1204703a 	and	r2,r2,r8
    b260:	19bff626 	beq	r3,r6,b23c <strcmp+0x40>
    b264:	20800003 	ldbu	r2,0(r4)
    b268:	10c03fcc 	andi	r3,r2,255
    b26c:	18c0201c 	xori	r3,r3,128
    b270:	18ffe004 	addi	r3,r3,-128
    b274:	18000c26 	beq	r3,zero,b2a8 <strcmp+0xac>
    b278:	29800007 	ldb	r6,0(r5)
    b27c:	19800326 	beq	r3,r6,b28c <strcmp+0x90>
    b280:	00001306 	br	b2d0 <strcmp+0xd4>
    b284:	29800007 	ldb	r6,0(r5)
    b288:	11800b1e 	bne	r2,r6,b2b8 <strcmp+0xbc>
    b28c:	21000044 	addi	r4,r4,1
    b290:	20c00003 	ldbu	r3,0(r4)
    b294:	29400044 	addi	r5,r5,1
    b298:	18803fcc 	andi	r2,r3,255
    b29c:	1080201c 	xori	r2,r2,128
    b2a0:	10bfe004 	addi	r2,r2,-128
    b2a4:	103ff71e 	bne	r2,zero,b284 <strcmp+0x88>
    b2a8:	0007883a 	mov	r3,zero
    b2ac:	28800003 	ldbu	r2,0(r5)
    b2b0:	1885c83a 	sub	r2,r3,r2
    b2b4:	f800283a 	ret
    b2b8:	28800003 	ldbu	r2,0(r5)
    b2bc:	18c03fcc 	andi	r3,r3,255
    b2c0:	1885c83a 	sub	r2,r3,r2
    b2c4:	f800283a 	ret
    b2c8:	0005883a 	mov	r2,zero
    b2cc:	f800283a 	ret
    b2d0:	10c03fcc 	andi	r3,r2,255
    b2d4:	003ff506 	br	b2ac <strcmp+0xb0>

0000b2d8 <strlen>:
    b2d8:	208000cc 	andi	r2,r4,3
    b2dc:	10002026 	beq	r2,zero,b360 <strlen+0x88>
    b2e0:	20800007 	ldb	r2,0(r4)
    b2e4:	10002026 	beq	r2,zero,b368 <strlen+0x90>
    b2e8:	2005883a 	mov	r2,r4
    b2ec:	00000206 	br	b2f8 <strlen+0x20>
    b2f0:	10c00007 	ldb	r3,0(r2)
    b2f4:	18001826 	beq	r3,zero,b358 <strlen+0x80>
    b2f8:	10800044 	addi	r2,r2,1
    b2fc:	10c000cc 	andi	r3,r2,3
    b300:	183ffb1e 	bne	r3,zero,b2f0 <strlen+0x18>
    b304:	10c00017 	ldw	r3,0(r2)
    b308:	01ffbff4 	movhi	r7,65279
    b30c:	39ffbfc4 	addi	r7,r7,-257
    b310:	00ca303a 	nor	r5,zero,r3
    b314:	01a02074 	movhi	r6,32897
    b318:	19c7883a 	add	r3,r3,r7
    b31c:	31a02004 	addi	r6,r6,-32640
    b320:	1946703a 	and	r3,r3,r5
    b324:	1986703a 	and	r3,r3,r6
    b328:	1800091e 	bne	r3,zero,b350 <strlen+0x78>
    b32c:	10800104 	addi	r2,r2,4
    b330:	10c00017 	ldw	r3,0(r2)
    b334:	19cb883a 	add	r5,r3,r7
    b338:	00c6303a 	nor	r3,zero,r3
    b33c:	28c6703a 	and	r3,r5,r3
    b340:	1986703a 	and	r3,r3,r6
    b344:	183ff926 	beq	r3,zero,b32c <strlen+0x54>
    b348:	00000106 	br	b350 <strlen+0x78>
    b34c:	10800044 	addi	r2,r2,1
    b350:	10c00007 	ldb	r3,0(r2)
    b354:	183ffd1e 	bne	r3,zero,b34c <strlen+0x74>
    b358:	1105c83a 	sub	r2,r2,r4
    b35c:	f800283a 	ret
    b360:	2005883a 	mov	r2,r4
    b364:	003fe706 	br	b304 <strlen+0x2c>
    b368:	0005883a 	mov	r2,zero
    b36c:	f800283a 	ret

0000b370 <__ssprint_r>:
    b370:	30800217 	ldw	r2,8(r6)
    b374:	defff604 	addi	sp,sp,-40
    b378:	dc800215 	stw	r18,8(sp)
    b37c:	dfc00915 	stw	ra,36(sp)
    b380:	df000815 	stw	fp,32(sp)
    b384:	ddc00715 	stw	r23,28(sp)
    b388:	dd800615 	stw	r22,24(sp)
    b38c:	dd400515 	stw	r21,20(sp)
    b390:	dd000415 	stw	r20,16(sp)
    b394:	dcc00315 	stw	r19,12(sp)
    b398:	dc400115 	stw	r17,4(sp)
    b39c:	dc000015 	stw	r16,0(sp)
    b3a0:	3025883a 	mov	r18,r6
    b3a4:	10005826 	beq	r2,zero,b508 <__ssprint_r+0x198>
    b3a8:	2027883a 	mov	r19,r4
    b3ac:	35c00017 	ldw	r23,0(r6)
    b3b0:	29000017 	ldw	r4,0(r5)
    b3b4:	28800217 	ldw	r2,8(r5)
    b3b8:	2823883a 	mov	r17,r5
    b3bc:	0039883a 	mov	fp,zero
    b3c0:	0021883a 	mov	r16,zero
    b3c4:	80003926 	beq	r16,zero,b4ac <__ssprint_r+0x13c>
    b3c8:	102b883a 	mov	r21,r2
    b3cc:	102d883a 	mov	r22,r2
    b3d0:	80803a36 	bltu	r16,r2,b4bc <__ssprint_r+0x14c>
    b3d4:	88c0030b 	ldhu	r3,12(r17)
    b3d8:	1881200c 	andi	r2,r3,1152
    b3dc:	10002626 	beq	r2,zero,b478 <__ssprint_r+0x108>
    b3e0:	88800517 	ldw	r2,20(r17)
    b3e4:	89400417 	ldw	r5,16(r17)
    b3e8:	81800044 	addi	r6,r16,1
    b3ec:	108f883a 	add	r7,r2,r2
    b3f0:	3885883a 	add	r2,r7,r2
    b3f4:	100ed7fa 	srli	r7,r2,31
    b3f8:	216dc83a 	sub	r22,r4,r5
    b3fc:	3589883a 	add	r4,r6,r22
    b400:	3885883a 	add	r2,r7,r2
    b404:	102bd07a 	srai	r21,r2,1
    b408:	a80d883a 	mov	r6,r21
    b40c:	a900022e 	bgeu	r21,r4,b418 <__ssprint_r+0xa8>
    b410:	202b883a 	mov	r21,r4
    b414:	200d883a 	mov	r6,r4
    b418:	18c1000c 	andi	r3,r3,1024
    b41c:	18002a26 	beq	r3,zero,b4c8 <__ssprint_r+0x158>
    b420:	300b883a 	mov	r5,r6
    b424:	9809883a 	mov	r4,r19
    b428:	00095e40 	call	95e4 <_malloc_r>
    b42c:	1029883a 	mov	r20,r2
    b430:	10002c26 	beq	r2,zero,b4e4 <__ssprint_r+0x174>
    b434:	89400417 	ldw	r5,16(r17)
    b438:	b00d883a 	mov	r6,r22
    b43c:	1009883a 	mov	r4,r2
    b440:	0001ec80 	call	1ec8 <memcpy>
    b444:	8880030b 	ldhu	r2,12(r17)
    b448:	00fedfc4 	movi	r3,-1153
    b44c:	10c4703a 	and	r2,r2,r3
    b450:	10802014 	ori	r2,r2,128
    b454:	8880030d 	sth	r2,12(r17)
    b458:	a589883a 	add	r4,r20,r22
    b45c:	adadc83a 	sub	r22,r21,r22
    b460:	8d400515 	stw	r21,20(r17)
    b464:	8d800215 	stw	r22,8(r17)
    b468:	8d000415 	stw	r20,16(r17)
    b46c:	89000015 	stw	r4,0(r17)
    b470:	802b883a 	mov	r21,r16
    b474:	802d883a 	mov	r22,r16
    b478:	b00d883a 	mov	r6,r22
    b47c:	e00b883a 	mov	r5,fp
    b480:	000e8140 	call	e814 <memmove>
    b484:	88800217 	ldw	r2,8(r17)
    b488:	89000017 	ldw	r4,0(r17)
    b48c:	90c00217 	ldw	r3,8(r18)
    b490:	1545c83a 	sub	r2,r2,r21
    b494:	2589883a 	add	r4,r4,r22
    b498:	88800215 	stw	r2,8(r17)
    b49c:	89000015 	stw	r4,0(r17)
    b4a0:	1c21c83a 	sub	r16,r3,r16
    b4a4:	94000215 	stw	r16,8(r18)
    b4a8:	80001726 	beq	r16,zero,b508 <__ssprint_r+0x198>
    b4ac:	bf000017 	ldw	fp,0(r23)
    b4b0:	bc000117 	ldw	r16,4(r23)
    b4b4:	bdc00204 	addi	r23,r23,8
    b4b8:	003fc206 	br	b3c4 <__ssprint_r+0x54>
    b4bc:	802b883a 	mov	r21,r16
    b4c0:	802d883a 	mov	r22,r16
    b4c4:	003fec06 	br	b478 <__ssprint_r+0x108>
    b4c8:	9809883a 	mov	r4,r19
    b4cc:	000e9d00 	call	e9d0 <_realloc_r>
    b4d0:	1029883a 	mov	r20,r2
    b4d4:	103fe01e 	bne	r2,zero,b458 <__ssprint_r+0xe8>
    b4d8:	89400417 	ldw	r5,16(r17)
    b4dc:	9809883a 	mov	r4,r19
    b4e0:	0008eb40 	call	8eb4 <_free_r>
    b4e4:	88c0030b 	ldhu	r3,12(r17)
    b4e8:	00800304 	movi	r2,12
    b4ec:	98800015 	stw	r2,0(r19)
    b4f0:	18c01014 	ori	r3,r3,64
    b4f4:	88c0030d 	sth	r3,12(r17)
    b4f8:	00bfffc4 	movi	r2,-1
    b4fc:	90000215 	stw	zero,8(r18)
    b500:	90000115 	stw	zero,4(r18)
    b504:	00000206 	br	b510 <__ssprint_r+0x1a0>
    b508:	90000115 	stw	zero,4(r18)
    b50c:	0005883a 	mov	r2,zero
    b510:	dfc00917 	ldw	ra,36(sp)
    b514:	df000817 	ldw	fp,32(sp)
    b518:	ddc00717 	ldw	r23,28(sp)
    b51c:	dd800617 	ldw	r22,24(sp)
    b520:	dd400517 	ldw	r21,20(sp)
    b524:	dd000417 	ldw	r20,16(sp)
    b528:	dcc00317 	ldw	r19,12(sp)
    b52c:	dc800217 	ldw	r18,8(sp)
    b530:	dc400117 	ldw	r17,4(sp)
    b534:	dc000017 	ldw	r16,0(sp)
    b538:	dec00a04 	addi	sp,sp,40
    b53c:	f800283a 	ret

0000b540 <___svfiprintf_internal_r>:
    b540:	2880030b 	ldhu	r2,12(r5)
    b544:	deffc804 	addi	sp,sp,-224
    b548:	dcc03115 	stw	r19,196(sp)
    b54c:	dfc03715 	stw	ra,220(sp)
    b550:	df003615 	stw	fp,216(sp)
    b554:	ddc03515 	stw	r23,212(sp)
    b558:	dd803415 	stw	r22,208(sp)
    b55c:	dd403315 	stw	r21,204(sp)
    b560:	dd003215 	stw	r20,200(sp)
    b564:	dc803015 	stw	r18,192(sp)
    b568:	dc402f15 	stw	r17,188(sp)
    b56c:	dc002e15 	stw	r16,184(sp)
    b570:	d9402715 	stw	r5,156(sp)
    b574:	d9002a15 	stw	r4,168(sp)
    b578:	1080200c 	andi	r2,r2,128
    b57c:	d9c02315 	stw	r7,140(sp)
    b580:	3027883a 	mov	r19,r6
    b584:	10000226 	beq	r2,zero,b590 <___svfiprintf_internal_r+0x50>
    b588:	28800417 	ldw	r2,16(r5)
    b58c:	10041d26 	beq	r2,zero,c604 <___svfiprintf_internal_r+0x10c4>
    b590:	dac01a04 	addi	r11,sp,104
    b594:	dac01e15 	stw	r11,120(sp)
    b598:	d8801e17 	ldw	r2,120(sp)
    b59c:	dac019c4 	addi	r11,sp,103
    b5a0:	dd402a17 	ldw	r21,168(sp)
    b5a4:	ddc02717 	ldw	r23,156(sp)
    b5a8:	058000b4 	movhi	r22,2
    b5ac:	050000b4 	movhi	r20,2
    b5b0:	dac01f15 	stw	r11,124(sp)
    b5b4:	12d7c83a 	sub	r11,r2,r11
    b5b8:	b5bd7604 	addi	r22,r22,-2600
    b5bc:	a53d7204 	addi	r20,r20,-2616
    b5c0:	dec01a15 	stw	sp,104(sp)
    b5c4:	d8001c15 	stw	zero,112(sp)
    b5c8:	d8001b15 	stw	zero,108(sp)
    b5cc:	d811883a 	mov	r8,sp
    b5d0:	d8002915 	stw	zero,164(sp)
    b5d4:	d8002515 	stw	zero,148(sp)
    b5d8:	dac02b15 	stw	r11,172(sp)
    b5dc:	98800007 	ldb	r2,0(r19)
    b5e0:	1002dd26 	beq	r2,zero,c158 <___svfiprintf_internal_r+0xc18>
    b5e4:	00c00944 	movi	r3,37
    b5e8:	9823883a 	mov	r17,r19
    b5ec:	10c0021e 	bne	r2,r3,b5f8 <___svfiprintf_internal_r+0xb8>
    b5f0:	00001406 	br	b644 <___svfiprintf_internal_r+0x104>
    b5f4:	10c00326 	beq	r2,r3,b604 <___svfiprintf_internal_r+0xc4>
    b5f8:	8c400044 	addi	r17,r17,1
    b5fc:	88800007 	ldb	r2,0(r17)
    b600:	103ffc1e 	bne	r2,zero,b5f4 <___svfiprintf_internal_r+0xb4>
    b604:	8ce1c83a 	sub	r16,r17,r19
    b608:	80000e26 	beq	r16,zero,b644 <___svfiprintf_internal_r+0x104>
    b60c:	d8c01c17 	ldw	r3,112(sp)
    b610:	d8801b17 	ldw	r2,108(sp)
    b614:	44c00015 	stw	r19,0(r8)
    b618:	1c07883a 	add	r3,r3,r16
    b61c:	10800044 	addi	r2,r2,1
    b620:	d8c01c15 	stw	r3,112(sp)
    b624:	44000115 	stw	r16,4(r8)
    b628:	d8801b15 	stw	r2,108(sp)
    b62c:	00c001c4 	movi	r3,7
    b630:	18831e16 	blt	r3,r2,c2ac <___svfiprintf_internal_r+0xd6c>
    b634:	42000204 	addi	r8,r8,8
    b638:	dac02517 	ldw	r11,148(sp)
    b63c:	5c17883a 	add	r11,r11,r16
    b640:	dac02515 	stw	r11,148(sp)
    b644:	88800007 	ldb	r2,0(r17)
    b648:	1002c526 	beq	r2,zero,c160 <___svfiprintf_internal_r+0xc20>
    b64c:	88c00047 	ldb	r3,1(r17)
    b650:	8cc00044 	addi	r19,r17,1
    b654:	d8001d85 	stb	zero,118(sp)
    b658:	0009883a 	mov	r4,zero
    b65c:	000f883a 	mov	r7,zero
    b660:	043fffc4 	movi	r16,-1
    b664:	d8002415 	stw	zero,144(sp)
    b668:	0025883a 	mov	r18,zero
    b66c:	01401604 	movi	r5,88
    b670:	01800244 	movi	r6,9
    b674:	02800a84 	movi	r10,42
    b678:	02401b04 	movi	r9,108
    b67c:	9cc00044 	addi	r19,r19,1
    b680:	18bff804 	addi	r2,r3,-32
    b684:	2881dd36 	bltu	r5,r2,bdfc <___svfiprintf_internal_r+0x8bc>
    b688:	100490ba 	slli	r2,r2,2
    b68c:	02c00074 	movhi	r11,1
    b690:	5aeda804 	addi	r11,r11,-18784
    b694:	12c5883a 	add	r2,r2,r11
    b698:	10800017 	ldw	r2,0(r2)
    b69c:	1000683a 	jmp	r2
    b6a0:	0000b89c 	xori	zero,zero,738
    b6a4:	0000bdfc 	xorhi	zero,zero,759
    b6a8:	0000bdfc 	xorhi	zero,zero,759
    b6ac:	0000b890 	cmplti	zero,zero,738
    b6b0:	0000bdfc 	xorhi	zero,zero,759
    b6b4:	0000bdfc 	xorhi	zero,zero,759
    b6b8:	0000bdfc 	xorhi	zero,zero,759
    b6bc:	0000bdfc 	xorhi	zero,zero,759
    b6c0:	0000bdfc 	xorhi	zero,zero,759
    b6c4:	0000bdfc 	xorhi	zero,zero,759
    b6c8:	0000b804 	movi	zero,736
    b6cc:	0000b9e0 	cmpeqi	zero,zero,743
    b6d0:	0000bdfc 	xorhi	zero,zero,759
    b6d4:	0000b830 	cmpltui	zero,zero,736
    b6d8:	0000be30 	cmpltui	zero,zero,760
    b6dc:	0000bdfc 	xorhi	zero,zero,759
    b6e0:	0000be24 	muli	zero,zero,760
    b6e4:	0000bdc4 	movi	zero,759
    b6e8:	0000bdc4 	movi	zero,759
    b6ec:	0000bdc4 	movi	zero,759
    b6f0:	0000bdc4 	movi	zero,759
    b6f4:	0000bdc4 	movi	zero,759
    b6f8:	0000bdc4 	movi	zero,759
    b6fc:	0000bdc4 	movi	zero,759
    b700:	0000bdc4 	movi	zero,759
    b704:	0000bdc4 	movi	zero,759
    b708:	0000bdfc 	xorhi	zero,zero,759
    b70c:	0000bdfc 	xorhi	zero,zero,759
    b710:	0000bdfc 	xorhi	zero,zero,759
    b714:	0000bdfc 	xorhi	zero,zero,759
    b718:	0000bdfc 	xorhi	zero,zero,759
    b71c:	0000bdfc 	xorhi	zero,zero,759
    b720:	0000bdfc 	xorhi	zero,zero,759
    b724:	0000bdfc 	xorhi	zero,zero,759
    b728:	0000bdfc 	xorhi	zero,zero,759
    b72c:	0000bdfc 	xorhi	zero,zero,759
    b730:	0000bd60 	cmpeqi	zero,zero,757
    b734:	0000bdfc 	xorhi	zero,zero,759
    b738:	0000bdfc 	xorhi	zero,zero,759
    b73c:	0000bdfc 	xorhi	zero,zero,759
    b740:	0000bdfc 	xorhi	zero,zero,759
    b744:	0000bdfc 	xorhi	zero,zero,759
    b748:	0000bdfc 	xorhi	zero,zero,759
    b74c:	0000bdfc 	xorhi	zero,zero,759
    b750:	0000bdfc 	xorhi	zero,zero,759
    b754:	0000bdfc 	xorhi	zero,zero,759
    b758:	0000bdfc 	xorhi	zero,zero,759
    b75c:	0000bed8 	cmpnei	zero,zero,763
    b760:	0000bdfc 	xorhi	zero,zero,759
    b764:	0000bdfc 	xorhi	zero,zero,759
    b768:	0000bdfc 	xorhi	zero,zero,759
    b76c:	0000bdfc 	xorhi	zero,zero,759
    b770:	0000bdfc 	xorhi	zero,zero,759
    b774:	0000be70 	cmpltui	zero,zero,761
    b778:	0000bdfc 	xorhi	zero,zero,759
    b77c:	0000bdfc 	xorhi	zero,zero,759
    b780:	0000bba4 	muli	zero,zero,750
    b784:	0000bdfc 	xorhi	zero,zero,759
    b788:	0000bdfc 	xorhi	zero,zero,759
    b78c:	0000bdfc 	xorhi	zero,zero,759
    b790:	0000bdfc 	xorhi	zero,zero,759
    b794:	0000bdfc 	xorhi	zero,zero,759
    b798:	0000bdfc 	xorhi	zero,zero,759
    b79c:	0000bdfc 	xorhi	zero,zero,759
    b7a0:	0000bdfc 	xorhi	zero,zero,759
    b7a4:	0000bdfc 	xorhi	zero,zero,759
    b7a8:	0000bdfc 	xorhi	zero,zero,759
    b7ac:	0000ba94 	movui	zero,746
    b7b0:	0000bc40 	call	bc4 <VGA_text+0x2c>
    b7b4:	0000bdfc 	xorhi	zero,zero,759
    b7b8:	0000bdfc 	xorhi	zero,zero,759
    b7bc:	0000bdfc 	xorhi	zero,zero,759
    b7c0:	0000bc34 	movhi	zero,752
    b7c4:	0000bc40 	call	bc4 <VGA_text+0x2c>
    b7c8:	0000bdfc 	xorhi	zero,zero,759
    b7cc:	0000bdfc 	xorhi	zero,zero,759
    b7d0:	0000bc24 	muli	zero,zero,752
    b7d4:	0000bdfc 	xorhi	zero,zero,759
    b7d8:	0000bbe8 	cmpgeui	zero,zero,751
    b7dc:	0000b9f0 	cmpltui	zero,zero,743
    b7e0:	0000b83c 	xorhi	zero,zero,736
    b7e4:	0000bd54 	movui	zero,757
    b7e8:	0000bdfc 	xorhi	zero,zero,759
    b7ec:	0000bd08 	cmpgei	zero,zero,756
    b7f0:	0000bdfc 	xorhi	zero,zero,759
    b7f4:	0000b960 	cmpeqi	zero,zero,741
    b7f8:	0000bdfc 	xorhi	zero,zero,759
    b7fc:	0000bdfc 	xorhi	zero,zero,759
    b800:	0000b8bc 	xorhi	zero,zero,738
    b804:	dac02317 	ldw	r11,140(sp)
    b808:	5ac00017 	ldw	r11,0(r11)
    b80c:	dac02415 	stw	r11,144(sp)
    b810:	dac02317 	ldw	r11,140(sp)
    b814:	58800104 	addi	r2,r11,4
    b818:	dac02417 	ldw	r11,144(sp)
    b81c:	5802e90e 	bge	r11,zero,c3c4 <___svfiprintf_internal_r+0xe84>
    b820:	dac02417 	ldw	r11,144(sp)
    b824:	d8802315 	stw	r2,140(sp)
    b828:	02d7c83a 	sub	r11,zero,r11
    b82c:	dac02415 	stw	r11,144(sp)
    b830:	94800114 	ori	r18,r18,4
    b834:	98c00007 	ldb	r3,0(r19)
    b838:	003f9006 	br	b67c <___svfiprintf_internal_r+0x13c>
    b83c:	00800c04 	movi	r2,48
    b840:	dac02317 	ldw	r11,140(sp)
    b844:	d8801d05 	stb	r2,116(sp)
    b848:	00801e04 	movi	r2,120
    b84c:	d8801d45 	stb	r2,117(sp)
    b850:	d8001d85 	stb	zero,118(sp)
    b854:	58c00104 	addi	r3,r11,4
    b858:	5f000017 	ldw	fp,0(r11)
    b85c:	0013883a 	mov	r9,zero
    b860:	90800094 	ori	r2,r18,2
    b864:	80032b16 	blt	r16,zero,c514 <___svfiprintf_internal_r+0xfd4>
    b868:	00bfdfc4 	movi	r2,-129
    b86c:	90a4703a 	and	r18,r18,r2
    b870:	d8c02315 	stw	r3,140(sp)
    b874:	94800094 	ori	r18,r18,2
    b878:	e002dc26 	beq	fp,zero,c3ec <___svfiprintf_internal_r+0xeac>
    b87c:	010000b4 	movhi	r4,2
    b880:	213d0a04 	addi	r4,r4,-3032
    b884:	0015883a 	mov	r10,zero
    b888:	d9002915 	stw	r4,164(sp)
    b88c:	00002306 	br	b91c <___svfiprintf_internal_r+0x3dc>
    b890:	94800054 	ori	r18,r18,1
    b894:	98c00007 	ldb	r3,0(r19)
    b898:	003f7806 	br	b67c <___svfiprintf_internal_r+0x13c>
    b89c:	38803fcc 	andi	r2,r7,255
    b8a0:	1080201c 	xori	r2,r2,128
    b8a4:	10bfe004 	addi	r2,r2,-128
    b8a8:	1002f31e 	bne	r2,zero,c478 <___svfiprintf_internal_r+0xf38>
    b8ac:	01000044 	movi	r4,1
    b8b0:	01c00804 	movi	r7,32
    b8b4:	98c00007 	ldb	r3,0(r19)
    b8b8:	003f7006 	br	b67c <___svfiprintf_internal_r+0x13c>
    b8bc:	21003fcc 	andi	r4,r4,255
    b8c0:	2003aa1e 	bne	r4,zero,c76c <___svfiprintf_internal_r+0x122c>
    b8c4:	008000b4 	movhi	r2,2
    b8c8:	10bd0a04 	addi	r2,r2,-3032
    b8cc:	d8802915 	stw	r2,164(sp)
    b8d0:	9080080c 	andi	r2,r18,32
    b8d4:	1000ba26 	beq	r2,zero,bbc0 <___svfiprintf_internal_r+0x680>
    b8d8:	dac02317 	ldw	r11,140(sp)
    b8dc:	5f000017 	ldw	fp,0(r11)
    b8e0:	5a400117 	ldw	r9,4(r11)
    b8e4:	5ac00204 	addi	r11,r11,8
    b8e8:	dac02315 	stw	r11,140(sp)
    b8ec:	9080004c 	andi	r2,r18,1
    b8f0:	10029026 	beq	r2,zero,c334 <___svfiprintf_internal_r+0xdf4>
    b8f4:	e244b03a 	or	r2,fp,r9
    b8f8:	1002d41e 	bne	r2,zero,c44c <___svfiprintf_internal_r+0xf0c>
    b8fc:	d8001d85 	stb	zero,118(sp)
    b900:	80030b16 	blt	r16,zero,c530 <___svfiprintf_internal_r+0xff0>
    b904:	00bfdfc4 	movi	r2,-129
    b908:	90a4703a 	and	r18,r18,r2
    b90c:	0015883a 	mov	r10,zero
    b910:	80002426 	beq	r16,zero,b9a4 <___svfiprintf_internal_r+0x464>
    b914:	0039883a 	mov	fp,zero
    b918:	0013883a 	mov	r9,zero
    b91c:	d9002917 	ldw	r4,164(sp)
    b920:	dc401a04 	addi	r17,sp,104
    b924:	e08003cc 	andi	r2,fp,15
    b928:	4806973a 	slli	r3,r9,28
    b92c:	2085883a 	add	r2,r4,r2
    b930:	e038d13a 	srli	fp,fp,4
    b934:	10800003 	ldbu	r2,0(r2)
    b938:	4812d13a 	srli	r9,r9,4
    b93c:	8c7fffc4 	addi	r17,r17,-1
    b940:	1f38b03a 	or	fp,r3,fp
    b944:	88800005 	stb	r2,0(r17)
    b948:	e244b03a 	or	r2,fp,r9
    b94c:	103ff51e 	bne	r2,zero,b924 <___svfiprintf_internal_r+0x3e4>
    b950:	dac01e17 	ldw	r11,120(sp)
    b954:	5c57c83a 	sub	r11,r11,r17
    b958:	dac02115 	stw	r11,132(sp)
    b95c:	00001406 	br	b9b0 <___svfiprintf_internal_r+0x470>
    b960:	21003fcc 	andi	r4,r4,255
    b964:	2003741e 	bne	r4,zero,c738 <___svfiprintf_internal_r+0x11f8>
    b968:	9080080c 	andi	r2,r18,32
    b96c:	10014526 	beq	r2,zero,be84 <___svfiprintf_internal_r+0x944>
    b970:	dac02317 	ldw	r11,140(sp)
    b974:	d8001d85 	stb	zero,118(sp)
    b978:	58c00204 	addi	r3,r11,8
    b97c:	5f000017 	ldw	fp,0(r11)
    b980:	5a400117 	ldw	r9,4(r11)
    b984:	8002d916 	blt	r16,zero,c4ec <___svfiprintf_internal_r+0xfac>
    b988:	013fdfc4 	movi	r4,-129
    b98c:	e244b03a 	or	r2,fp,r9
    b990:	d8c02315 	stw	r3,140(sp)
    b994:	9124703a 	and	r18,r18,r4
    b998:	0015883a 	mov	r10,zero
    b99c:	1000b91e 	bne	r2,zero,bc84 <___svfiprintf_internal_r+0x744>
    b9a0:	8002e61e 	bne	r16,zero,c53c <___svfiprintf_internal_r+0xffc>
    b9a4:	0021883a 	mov	r16,zero
    b9a8:	d8002115 	stw	zero,132(sp)
    b9ac:	dc401a04 	addi	r17,sp,104
    b9b0:	d8c02117 	ldw	r3,132(sp)
    b9b4:	dc002015 	stw	r16,128(sp)
    b9b8:	80c0010e 	bge	r16,r3,b9c0 <___svfiprintf_internal_r+0x480>
    b9bc:	d8c02015 	stw	r3,128(sp)
    b9c0:	52803fcc 	andi	r10,r10,255
    b9c4:	5280201c 	xori	r10,r10,128
    b9c8:	52bfe004 	addi	r10,r10,-128
    b9cc:	50003c26 	beq	r10,zero,bac0 <___svfiprintf_internal_r+0x580>
    b9d0:	dac02017 	ldw	r11,128(sp)
    b9d4:	5ac00044 	addi	r11,r11,1
    b9d8:	dac02015 	stw	r11,128(sp)
    b9dc:	00003806 	br	bac0 <___svfiprintf_internal_r+0x580>
    b9e0:	01000044 	movi	r4,1
    b9e4:	01c00ac4 	movi	r7,43
    b9e8:	98c00007 	ldb	r3,0(r19)
    b9ec:	003f2306 	br	b67c <___svfiprintf_internal_r+0x13c>
    b9f0:	21003fcc 	andi	r4,r4,255
    b9f4:	2003481e 	bne	r4,zero,c718 <___svfiprintf_internal_r+0x11d8>
    b9f8:	9080080c 	andi	r2,r18,32
    b9fc:	10013b26 	beq	r2,zero,beec <___svfiprintf_internal_r+0x9ac>
    ba00:	dac02317 	ldw	r11,140(sp)
    ba04:	d8001d85 	stb	zero,118(sp)
    ba08:	58800204 	addi	r2,r11,8
    ba0c:	5f000017 	ldw	fp,0(r11)
    ba10:	5a400117 	ldw	r9,4(r11)
    ba14:	8002a816 	blt	r16,zero,c4b8 <___svfiprintf_internal_r+0xf78>
    ba18:	013fdfc4 	movi	r4,-129
    ba1c:	e246b03a 	or	r3,fp,r9
    ba20:	d8802315 	stw	r2,140(sp)
    ba24:	9124703a 	and	r18,r18,r4
    ba28:	18013c26 	beq	r3,zero,bf1c <___svfiprintf_internal_r+0x9dc>
    ba2c:	0015883a 	mov	r10,zero
    ba30:	dc401a04 	addi	r17,sp,104
    ba34:	e006d0fa 	srli	r3,fp,3
    ba38:	4808977a 	slli	r4,r9,29
    ba3c:	4812d0fa 	srli	r9,r9,3
    ba40:	e70001cc 	andi	fp,fp,7
    ba44:	e0800c04 	addi	r2,fp,48
    ba48:	8c7fffc4 	addi	r17,r17,-1
    ba4c:	20f8b03a 	or	fp,r4,r3
    ba50:	88800005 	stb	r2,0(r17)
    ba54:	e246b03a 	or	r3,fp,r9
    ba58:	183ff61e 	bne	r3,zero,ba34 <___svfiprintf_internal_r+0x4f4>
    ba5c:	90c0004c 	andi	r3,r18,1
    ba60:	1800a526 	beq	r3,zero,bcf8 <___svfiprintf_internal_r+0x7b8>
    ba64:	10803fcc 	andi	r2,r2,255
    ba68:	1080201c 	xori	r2,r2,128
    ba6c:	10bfe004 	addi	r2,r2,-128
    ba70:	00c00c04 	movi	r3,48
    ba74:	10ffb626 	beq	r2,r3,b950 <___svfiprintf_internal_r+0x410>
    ba78:	88ffffc5 	stb	r3,-1(r17)
    ba7c:	d8c01e17 	ldw	r3,120(sp)
    ba80:	88bfffc4 	addi	r2,r17,-1
    ba84:	1023883a 	mov	r17,r2
    ba88:	1887c83a 	sub	r3,r3,r2
    ba8c:	d8c02115 	stw	r3,132(sp)
    ba90:	003fc706 	br	b9b0 <___svfiprintf_internal_r+0x470>
    ba94:	dac02317 	ldw	r11,140(sp)
    ba98:	00c00044 	movi	r3,1
    ba9c:	d8c02015 	stw	r3,128(sp)
    baa0:	58800017 	ldw	r2,0(r11)
    baa4:	5ac00104 	addi	r11,r11,4
    baa8:	d8001d85 	stb	zero,118(sp)
    baac:	d8801005 	stb	r2,64(sp)
    bab0:	dac02315 	stw	r11,140(sp)
    bab4:	d8c02115 	stw	r3,132(sp)
    bab8:	dc401004 	addi	r17,sp,64
    babc:	0021883a 	mov	r16,zero
    bac0:	90c0008c 	andi	r3,r18,2
    bac4:	d8c02215 	stw	r3,136(sp)
    bac8:	18000326 	beq	r3,zero,bad8 <___svfiprintf_internal_r+0x598>
    bacc:	dac02017 	ldw	r11,128(sp)
    bad0:	5ac00084 	addi	r11,r11,2
    bad4:	dac02015 	stw	r11,128(sp)
    bad8:	90c0210c 	andi	r3,r18,132
    badc:	d8c02615 	stw	r3,152(sp)
    bae0:	1801131e 	bne	r3,zero,bf30 <___svfiprintf_internal_r+0x9f0>
    bae4:	dac02417 	ldw	r11,144(sp)
    bae8:	d8c02017 	ldw	r3,128(sp)
    baec:	58f9c83a 	sub	fp,r11,r3
    baf0:	07010f0e 	bge	zero,fp,bf30 <___svfiprintf_internal_r+0x9f0>
    baf4:	02400404 	movi	r9,16
    baf8:	d8c01c17 	ldw	r3,112(sp)
    bafc:	d8801b17 	ldw	r2,108(sp)
    bb00:	4f02d60e 	bge	r9,fp,c65c <___svfiprintf_internal_r+0x111c>
    bb04:	014000b4 	movhi	r5,2
    bb08:	297d7604 	addi	r5,r5,-2600
    bb0c:	d9402815 	stw	r5,160(sp)
    bb10:	028001c4 	movi	r10,7
    bb14:	00000306 	br	bb24 <___svfiprintf_internal_r+0x5e4>
    bb18:	e73ffc04 	addi	fp,fp,-16
    bb1c:	42000204 	addi	r8,r8,8
    bb20:	4f00150e 	bge	r9,fp,bb78 <___svfiprintf_internal_r+0x638>
    bb24:	18c00404 	addi	r3,r3,16
    bb28:	10800044 	addi	r2,r2,1
    bb2c:	45800015 	stw	r22,0(r8)
    bb30:	42400115 	stw	r9,4(r8)
    bb34:	d8c01c15 	stw	r3,112(sp)
    bb38:	d8801b15 	stw	r2,108(sp)
    bb3c:	50bff60e 	bge	r10,r2,bb18 <___svfiprintf_internal_r+0x5d8>
    bb40:	d9801a04 	addi	r6,sp,104
    bb44:	b80b883a 	mov	r5,r23
    bb48:	a809883a 	mov	r4,r21
    bb4c:	da402c15 	stw	r9,176(sp)
    bb50:	da802d15 	stw	r10,180(sp)
    bb54:	000b3700 	call	b370 <__ssprint_r>
    bb58:	da402c17 	ldw	r9,176(sp)
    bb5c:	da802d17 	ldw	r10,180(sp)
    bb60:	1001851e 	bne	r2,zero,c178 <___svfiprintf_internal_r+0xc38>
    bb64:	e73ffc04 	addi	fp,fp,-16
    bb68:	d8c01c17 	ldw	r3,112(sp)
    bb6c:	d8801b17 	ldw	r2,108(sp)
    bb70:	d811883a 	mov	r8,sp
    bb74:	4f3feb16 	blt	r9,fp,bb24 <___svfiprintf_internal_r+0x5e4>
    bb78:	dac02817 	ldw	r11,160(sp)
    bb7c:	e0c7883a 	add	r3,fp,r3
    bb80:	10800044 	addi	r2,r2,1
    bb84:	42c00015 	stw	r11,0(r8)
    bb88:	47000115 	stw	fp,4(r8)
    bb8c:	d8c01c15 	stw	r3,112(sp)
    bb90:	d8801b15 	stw	r2,108(sp)
    bb94:	010001c4 	movi	r4,7
    bb98:	2081ee16 	blt	r4,r2,c354 <___svfiprintf_internal_r+0xe14>
    bb9c:	42000204 	addi	r8,r8,8
    bba0:	0000e506 	br	bf38 <___svfiprintf_internal_r+0x9f8>
    bba4:	21003fcc 	andi	r4,r4,255
    bba8:	2002dd1e 	bne	r4,zero,c720 <___svfiprintf_internal_r+0x11e0>
    bbac:	008000b4 	movhi	r2,2
    bbb0:	10bd0504 	addi	r2,r2,-3052
    bbb4:	d8802915 	stw	r2,164(sp)
    bbb8:	9080080c 	andi	r2,r18,32
    bbbc:	103f461e 	bne	r2,zero,b8d8 <___svfiprintf_internal_r+0x398>
    bbc0:	9080040c 	andi	r2,r18,16
    bbc4:	10022e1e 	bne	r2,zero,c480 <___svfiprintf_internal_r+0xf40>
    bbc8:	9080100c 	andi	r2,r18,64
    bbcc:	dac02317 	ldw	r11,140(sp)
    bbd0:	10027326 	beq	r2,zero,c5a0 <___svfiprintf_internal_r+0x1060>
    bbd4:	5f00000b 	ldhu	fp,0(r11)
    bbd8:	5ac00104 	addi	r11,r11,4
    bbdc:	0013883a 	mov	r9,zero
    bbe0:	dac02315 	stw	r11,140(sp)
    bbe4:	003f4106 	br	b8ec <___svfiprintf_internal_r+0x3ac>
    bbe8:	21003fcc 	andi	r4,r4,255
    bbec:	2002e11e 	bne	r4,zero,c774 <___svfiprintf_internal_r+0x1234>
    bbf0:	9080080c 	andi	r2,r18,32
    bbf4:	1002011e 	bne	r2,zero,c3fc <___svfiprintf_internal_r+0xebc>
    bbf8:	9080040c 	andi	r2,r18,16
    bbfc:	10023e1e 	bne	r2,zero,c4f8 <___svfiprintf_internal_r+0xfb8>
    bc00:	9480100c 	andi	r18,r18,64
    bc04:	90023c26 	beq	r18,zero,c4f8 <___svfiprintf_internal_r+0xfb8>
    bc08:	dac02317 	ldw	r11,140(sp)
    bc0c:	58800017 	ldw	r2,0(r11)
    bc10:	5ac00104 	addi	r11,r11,4
    bc14:	dac02315 	stw	r11,140(sp)
    bc18:	dac02517 	ldw	r11,148(sp)
    bc1c:	12c0000d 	sth	r11,0(r2)
    bc20:	003e6e06 	br	b5dc <___svfiprintf_internal_r+0x9c>
    bc24:	98c00007 	ldb	r3,0(r19)
    bc28:	1a422926 	beq	r3,r9,c4d0 <___svfiprintf_internal_r+0xf90>
    bc2c:	94800414 	ori	r18,r18,16
    bc30:	003e9206 	br	b67c <___svfiprintf_internal_r+0x13c>
    bc34:	94801014 	ori	r18,r18,64
    bc38:	98c00007 	ldb	r3,0(r19)
    bc3c:	003e8f06 	br	b67c <___svfiprintf_internal_r+0x13c>
    bc40:	21003fcc 	andi	r4,r4,255
    bc44:	2002c71e 	bne	r4,zero,c764 <___svfiprintf_internal_r+0x1224>
    bc48:	9080080c 	andi	r2,r18,32
    bc4c:	10004926 	beq	r2,zero,bd74 <___svfiprintf_internal_r+0x834>
    bc50:	dac02317 	ldw	r11,140(sp)
    bc54:	58800117 	ldw	r2,4(r11)
    bc58:	5f000017 	ldw	fp,0(r11)
    bc5c:	5ac00204 	addi	r11,r11,8
    bc60:	dac02315 	stw	r11,140(sp)
    bc64:	1013883a 	mov	r9,r2
    bc68:	10004b16 	blt	r2,zero,bd98 <___svfiprintf_internal_r+0x858>
    bc6c:	da801d83 	ldbu	r10,118(sp)
    bc70:	8001cb16 	blt	r16,zero,c3a0 <___svfiprintf_internal_r+0xe60>
    bc74:	00ffdfc4 	movi	r3,-129
    bc78:	e244b03a 	or	r2,fp,r9
    bc7c:	90e4703a 	and	r18,r18,r3
    bc80:	103f4726 	beq	r2,zero,b9a0 <___svfiprintf_internal_r+0x460>
    bc84:	48008c26 	beq	r9,zero,beb8 <___svfiprintf_internal_r+0x978>
    bc88:	dc802015 	stw	r18,128(sp)
    bc8c:	dc002115 	stw	r16,132(sp)
    bc90:	dc401a04 	addi	r17,sp,104
    bc94:	e021883a 	mov	r16,fp
    bc98:	da002215 	stw	r8,136(sp)
    bc9c:	5039883a 	mov	fp,r10
    bca0:	4825883a 	mov	r18,r9
    bca4:	8009883a 	mov	r4,r16
    bca8:	900b883a 	mov	r5,r18
    bcac:	01800284 	movi	r6,10
    bcb0:	000f883a 	mov	r7,zero
    bcb4:	000f7ec0 	call	f7ec <__umoddi3>
    bcb8:	10800c04 	addi	r2,r2,48
    bcbc:	8c7fffc4 	addi	r17,r17,-1
    bcc0:	8009883a 	mov	r4,r16
    bcc4:	900b883a 	mov	r5,r18
    bcc8:	88800005 	stb	r2,0(r17)
    bccc:	01800284 	movi	r6,10
    bcd0:	000f883a 	mov	r7,zero
    bcd4:	000f2740 	call	f274 <__udivdi3>
    bcd8:	1021883a 	mov	r16,r2
    bcdc:	10c4b03a 	or	r2,r2,r3
    bce0:	1825883a 	mov	r18,r3
    bce4:	103fef1e 	bne	r2,zero,bca4 <___svfiprintf_internal_r+0x764>
    bce8:	dc802017 	ldw	r18,128(sp)
    bcec:	dc002117 	ldw	r16,132(sp)
    bcf0:	da002217 	ldw	r8,136(sp)
    bcf4:	e015883a 	mov	r10,fp
    bcf8:	d8c01e17 	ldw	r3,120(sp)
    bcfc:	1c47c83a 	sub	r3,r3,r17
    bd00:	d8c02115 	stw	r3,132(sp)
    bd04:	003f2a06 	br	b9b0 <___svfiprintf_internal_r+0x470>
    bd08:	dac02317 	ldw	r11,140(sp)
    bd0c:	d8001d85 	stb	zero,118(sp)
    bd10:	5c400017 	ldw	r17,0(r11)
    bd14:	5f000104 	addi	fp,r11,4
    bd18:	88022f26 	beq	r17,zero,c5d8 <___svfiprintf_internal_r+0x1098>
    bd1c:	80022516 	blt	r16,zero,c5b4 <___svfiprintf_internal_r+0x1074>
    bd20:	800d883a 	mov	r6,r16
    bd24:	000b883a 	mov	r5,zero
    bd28:	8809883a 	mov	r4,r17
    bd2c:	da002c15 	stw	r8,176(sp)
    bd30:	0009df00 	call	9df0 <memchr>
    bd34:	da002c17 	ldw	r8,176(sp)
    bd38:	10026426 	beq	r2,zero,c6cc <___svfiprintf_internal_r+0x118c>
    bd3c:	1445c83a 	sub	r2,r2,r17
    bd40:	d8802115 	stw	r2,132(sp)
    bd44:	da801d83 	ldbu	r10,118(sp)
    bd48:	df002315 	stw	fp,140(sp)
    bd4c:	0021883a 	mov	r16,zero
    bd50:	003f1706 	br	b9b0 <___svfiprintf_internal_r+0x470>
    bd54:	94800814 	ori	r18,r18,32
    bd58:	98c00007 	ldb	r3,0(r19)
    bd5c:	003e4706 	br	b67c <___svfiprintf_internal_r+0x13c>
    bd60:	21003fcc 	andi	r4,r4,255
    bd64:	2002701e 	bne	r4,zero,c728 <___svfiprintf_internal_r+0x11e8>
    bd68:	94800414 	ori	r18,r18,16
    bd6c:	9080080c 	andi	r2,r18,32
    bd70:	103fb71e 	bne	r2,zero,bc50 <___svfiprintf_internal_r+0x710>
    bd74:	9080040c 	andi	r2,r18,16
    bd78:	1001ab26 	beq	r2,zero,c428 <___svfiprintf_internal_r+0xee8>
    bd7c:	dac02317 	ldw	r11,140(sp)
    bd80:	5f000017 	ldw	fp,0(r11)
    bd84:	5ac00104 	addi	r11,r11,4
    bd88:	dac02315 	stw	r11,140(sp)
    bd8c:	e013d7fa 	srai	r9,fp,31
    bd90:	4805883a 	mov	r2,r9
    bd94:	103fb50e 	bge	r2,zero,bc6c <___svfiprintf_internal_r+0x72c>
    bd98:	0739c83a 	sub	fp,zero,fp
    bd9c:	02800b44 	movi	r10,45
    bda0:	e004c03a 	cmpne	r2,fp,zero
    bda4:	0253c83a 	sub	r9,zero,r9
    bda8:	da801d85 	stb	r10,118(sp)
    bdac:	4893c83a 	sub	r9,r9,r2
    bdb0:	80023016 	blt	r16,zero,c674 <___svfiprintf_internal_r+0x1134>
    bdb4:	00bfdfc4 	movi	r2,-129
    bdb8:	90a4703a 	and	r18,r18,r2
    bdbc:	483fb21e 	bne	r9,zero,bc88 <___svfiprintf_internal_r+0x748>
    bdc0:	00003d06 	br	beb8 <___svfiprintf_internal_r+0x978>
    bdc4:	9817883a 	mov	r11,r19
    bdc8:	d8002415 	stw	zero,144(sp)
    bdcc:	18bff404 	addi	r2,r3,-48
    bdd0:	0019883a 	mov	r12,zero
    bdd4:	58c00007 	ldb	r3,0(r11)
    bdd8:	630002a4 	muli	r12,r12,10
    bddc:	9cc00044 	addi	r19,r19,1
    bde0:	9817883a 	mov	r11,r19
    bde4:	1319883a 	add	r12,r2,r12
    bde8:	18bff404 	addi	r2,r3,-48
    bdec:	30bff92e 	bgeu	r6,r2,bdd4 <___svfiprintf_internal_r+0x894>
    bdf0:	db002415 	stw	r12,144(sp)
    bdf4:	18bff804 	addi	r2,r3,-32
    bdf8:	28be232e 	bgeu	r5,r2,b688 <___svfiprintf_internal_r+0x148>
    bdfc:	21003fcc 	andi	r4,r4,255
    be00:	20024b1e 	bne	r4,zero,c730 <___svfiprintf_internal_r+0x11f0>
    be04:	1800d626 	beq	r3,zero,c160 <___svfiprintf_internal_r+0xc20>
    be08:	02c00044 	movi	r11,1
    be0c:	dac02015 	stw	r11,128(sp)
    be10:	d8c01005 	stb	r3,64(sp)
    be14:	d8001d85 	stb	zero,118(sp)
    be18:	dac02115 	stw	r11,132(sp)
    be1c:	dc401004 	addi	r17,sp,64
    be20:	003f2606 	br	babc <___svfiprintf_internal_r+0x57c>
    be24:	94802014 	ori	r18,r18,128
    be28:	98c00007 	ldb	r3,0(r19)
    be2c:	003e1306 	br	b67c <___svfiprintf_internal_r+0x13c>
    be30:	98c00007 	ldb	r3,0(r19)
    be34:	9ac00044 	addi	r11,r19,1
    be38:	1a822b26 	beq	r3,r10,c6e8 <___svfiprintf_internal_r+0x11a8>
    be3c:	18bff404 	addi	r2,r3,-48
    be40:	0021883a 	mov	r16,zero
    be44:	30821e36 	bltu	r6,r2,c6c0 <___svfiprintf_internal_r+0x1180>
    be48:	58c00007 	ldb	r3,0(r11)
    be4c:	840002a4 	muli	r16,r16,10
    be50:	5cc00044 	addi	r19,r11,1
    be54:	9817883a 	mov	r11,r19
    be58:	80a1883a 	add	r16,r16,r2
    be5c:	18bff404 	addi	r2,r3,-48
    be60:	30bff92e 	bgeu	r6,r2,be48 <___svfiprintf_internal_r+0x908>
    be64:	803e060e 	bge	r16,zero,b680 <___svfiprintf_internal_r+0x140>
    be68:	043fffc4 	movi	r16,-1
    be6c:	003e0406 	br	b680 <___svfiprintf_internal_r+0x140>
    be70:	21003fcc 	andi	r4,r4,255
    be74:	2002371e 	bne	r4,zero,c754 <___svfiprintf_internal_r+0x1214>
    be78:	94800414 	ori	r18,r18,16
    be7c:	9080080c 	andi	r2,r18,32
    be80:	103ebb1e 	bne	r2,zero,b970 <___svfiprintf_internal_r+0x430>
    be84:	9080040c 	andi	r2,r18,16
    be88:	10013b26 	beq	r2,zero,c378 <___svfiprintf_internal_r+0xe38>
    be8c:	dac02317 	ldw	r11,140(sp)
    be90:	d8001d85 	stb	zero,118(sp)
    be94:	0013883a 	mov	r9,zero
    be98:	58800104 	addi	r2,r11,4
    be9c:	5f000017 	ldw	fp,0(r11)
    bea0:	80013d16 	blt	r16,zero,c398 <___svfiprintf_internal_r+0xe58>
    bea4:	00ffdfc4 	movi	r3,-129
    bea8:	d8802315 	stw	r2,140(sp)
    beac:	90e4703a 	and	r18,r18,r3
    beb0:	0015883a 	mov	r10,zero
    beb4:	e03eba26 	beq	fp,zero,b9a0 <___svfiprintf_internal_r+0x460>
    beb8:	00800244 	movi	r2,9
    bebc:	173f7236 	bltu	r2,fp,bc88 <___svfiprintf_internal_r+0x748>
    bec0:	dac02b17 	ldw	r11,172(sp)
    bec4:	e7000c04 	addi	fp,fp,48
    bec8:	df0019c5 	stb	fp,103(sp)
    becc:	dac02115 	stw	r11,132(sp)
    bed0:	dc4019c4 	addi	r17,sp,103
    bed4:	003eb606 	br	b9b0 <___svfiprintf_internal_r+0x470>
    bed8:	21003fcc 	andi	r4,r4,255
    bedc:	20021f1e 	bne	r4,zero,c75c <___svfiprintf_internal_r+0x121c>
    bee0:	94800414 	ori	r18,r18,16
    bee4:	9080080c 	andi	r2,r18,32
    bee8:	103ec51e 	bne	r2,zero,ba00 <___svfiprintf_internal_r+0x4c0>
    beec:	9080040c 	andi	r2,r18,16
    bef0:	10016926 	beq	r2,zero,c498 <___svfiprintf_internal_r+0xf58>
    bef4:	dac02317 	ldw	r11,140(sp)
    bef8:	d8001d85 	stb	zero,118(sp)
    befc:	0013883a 	mov	r9,zero
    bf00:	58800104 	addi	r2,r11,4
    bf04:	5f000017 	ldw	fp,0(r11)
    bf08:	80016b16 	blt	r16,zero,c4b8 <___svfiprintf_internal_r+0xf78>
    bf0c:	00ffdfc4 	movi	r3,-129
    bf10:	d8802315 	stw	r2,140(sp)
    bf14:	90e4703a 	and	r18,r18,r3
    bf18:	e03ec41e 	bne	fp,zero,ba2c <___svfiprintf_internal_r+0x4ec>
    bf1c:	0015883a 	mov	r10,zero
    bf20:	8001c226 	beq	r16,zero,c62c <___svfiprintf_internal_r+0x10ec>
    bf24:	0039883a 	mov	fp,zero
    bf28:	0013883a 	mov	r9,zero
    bf2c:	003ec006 	br	ba30 <___svfiprintf_internal_r+0x4f0>
    bf30:	d8c01c17 	ldw	r3,112(sp)
    bf34:	d8801b17 	ldw	r2,108(sp)
    bf38:	d9001d87 	ldb	r4,118(sp)
    bf3c:	20000b26 	beq	r4,zero,bf6c <___svfiprintf_internal_r+0xa2c>
    bf40:	d9001d84 	addi	r4,sp,118
    bf44:	18c00044 	addi	r3,r3,1
    bf48:	10800044 	addi	r2,r2,1
    bf4c:	41000015 	stw	r4,0(r8)
    bf50:	01000044 	movi	r4,1
    bf54:	41000115 	stw	r4,4(r8)
    bf58:	d8c01c15 	stw	r3,112(sp)
    bf5c:	d8801b15 	stw	r2,108(sp)
    bf60:	010001c4 	movi	r4,7
    bf64:	2080e116 	blt	r4,r2,c2ec <___svfiprintf_internal_r+0xdac>
    bf68:	42000204 	addi	r8,r8,8
    bf6c:	dac02217 	ldw	r11,136(sp)
    bf70:	58000b26 	beq	r11,zero,bfa0 <___svfiprintf_internal_r+0xa60>
    bf74:	d9001d04 	addi	r4,sp,116
    bf78:	18c00084 	addi	r3,r3,2
    bf7c:	10800044 	addi	r2,r2,1
    bf80:	41000015 	stw	r4,0(r8)
    bf84:	01000084 	movi	r4,2
    bf88:	41000115 	stw	r4,4(r8)
    bf8c:	d8c01c15 	stw	r3,112(sp)
    bf90:	d8801b15 	stw	r2,108(sp)
    bf94:	010001c4 	movi	r4,7
    bf98:	2080dd16 	blt	r4,r2,c310 <___svfiprintf_internal_r+0xdd0>
    bf9c:	42000204 	addi	r8,r8,8
    bfa0:	dac02617 	ldw	r11,152(sp)
    bfa4:	01002004 	movi	r4,128
    bfa8:	59008426 	beq	r11,r4,c1bc <___svfiprintf_internal_r+0xc7c>
    bfac:	dac02117 	ldw	r11,132(sp)
    bfb0:	82e1c83a 	sub	r16,r16,r11
    bfb4:	0400270e 	bge	zero,r16,c054 <___svfiprintf_internal_r+0xb14>
    bfb8:	01c00404 	movi	r7,16
    bfbc:	3c016a0e 	bge	r7,r16,c568 <___svfiprintf_internal_r+0x1028>
    bfc0:	014000b4 	movhi	r5,2
    bfc4:	297d7204 	addi	r5,r5,-2616
    bfc8:	d9402215 	stw	r5,136(sp)
    bfcc:	070001c4 	movi	fp,7
    bfd0:	00000306 	br	bfe0 <___svfiprintf_internal_r+0xaa0>
    bfd4:	843ffc04 	addi	r16,r16,-16
    bfd8:	42000204 	addi	r8,r8,8
    bfdc:	3c00130e 	bge	r7,r16,c02c <___svfiprintf_internal_r+0xaec>
    bfe0:	18c00404 	addi	r3,r3,16
    bfe4:	10800044 	addi	r2,r2,1
    bfe8:	45000015 	stw	r20,0(r8)
    bfec:	41c00115 	stw	r7,4(r8)
    bff0:	d8c01c15 	stw	r3,112(sp)
    bff4:	d8801b15 	stw	r2,108(sp)
    bff8:	e0bff60e 	bge	fp,r2,bfd4 <___svfiprintf_internal_r+0xa94>
    bffc:	d9801a04 	addi	r6,sp,104
    c000:	b80b883a 	mov	r5,r23
    c004:	a809883a 	mov	r4,r21
    c008:	d9c02c15 	stw	r7,176(sp)
    c00c:	000b3700 	call	b370 <__ssprint_r>
    c010:	d9c02c17 	ldw	r7,176(sp)
    c014:	1000581e 	bne	r2,zero,c178 <___svfiprintf_internal_r+0xc38>
    c018:	843ffc04 	addi	r16,r16,-16
    c01c:	d8c01c17 	ldw	r3,112(sp)
    c020:	d8801b17 	ldw	r2,108(sp)
    c024:	d811883a 	mov	r8,sp
    c028:	3c3fed16 	blt	r7,r16,bfe0 <___svfiprintf_internal_r+0xaa0>
    c02c:	dac02217 	ldw	r11,136(sp)
    c030:	1c07883a 	add	r3,r3,r16
    c034:	10800044 	addi	r2,r2,1
    c038:	42c00015 	stw	r11,0(r8)
    c03c:	44000115 	stw	r16,4(r8)
    c040:	d8c01c15 	stw	r3,112(sp)
    c044:	d8801b15 	stw	r2,108(sp)
    c048:	010001c4 	movi	r4,7
    c04c:	20809e16 	blt	r4,r2,c2c8 <___svfiprintf_internal_r+0xd88>
    c050:	42000204 	addi	r8,r8,8
    c054:	dac02117 	ldw	r11,132(sp)
    c058:	10800044 	addi	r2,r2,1
    c05c:	44400015 	stw	r17,0(r8)
    c060:	58c7883a 	add	r3,r11,r3
    c064:	42c00115 	stw	r11,4(r8)
    c068:	d8c01c15 	stw	r3,112(sp)
    c06c:	d8801b15 	stw	r2,108(sp)
    c070:	010001c4 	movi	r4,7
    c074:	20807f16 	blt	r4,r2,c274 <___svfiprintf_internal_r+0xd34>
    c078:	42000204 	addi	r8,r8,8
    c07c:	9480010c 	andi	r18,r18,4
    c080:	90002926 	beq	r18,zero,c128 <___svfiprintf_internal_r+0xbe8>
    c084:	dac02417 	ldw	r11,144(sp)
    c088:	d8802017 	ldw	r2,128(sp)
    c08c:	58a1c83a 	sub	r16,r11,r2
    c090:	0400250e 	bge	zero,r16,c128 <___svfiprintf_internal_r+0xbe8>
    c094:	04400404 	movi	r17,16
    c098:	d8801b17 	ldw	r2,108(sp)
    c09c:	8c017c0e 	bge	r17,r16,c690 <___svfiprintf_internal_r+0x1150>
    c0a0:	014000b4 	movhi	r5,2
    c0a4:	297d7604 	addi	r5,r5,-2600
    c0a8:	d9402815 	stw	r5,160(sp)
    c0ac:	048001c4 	movi	r18,7
    c0b0:	00000306 	br	c0c0 <___svfiprintf_internal_r+0xb80>
    c0b4:	843ffc04 	addi	r16,r16,-16
    c0b8:	42000204 	addi	r8,r8,8
    c0bc:	8c00110e 	bge	r17,r16,c104 <___svfiprintf_internal_r+0xbc4>
    c0c0:	18c00404 	addi	r3,r3,16
    c0c4:	10800044 	addi	r2,r2,1
    c0c8:	45800015 	stw	r22,0(r8)
    c0cc:	44400115 	stw	r17,4(r8)
    c0d0:	d8c01c15 	stw	r3,112(sp)
    c0d4:	d8801b15 	stw	r2,108(sp)
    c0d8:	90bff60e 	bge	r18,r2,c0b4 <___svfiprintf_internal_r+0xb74>
    c0dc:	d9801a04 	addi	r6,sp,104
    c0e0:	b80b883a 	mov	r5,r23
    c0e4:	a809883a 	mov	r4,r21
    c0e8:	000b3700 	call	b370 <__ssprint_r>
    c0ec:	1000221e 	bne	r2,zero,c178 <___svfiprintf_internal_r+0xc38>
    c0f0:	843ffc04 	addi	r16,r16,-16
    c0f4:	d8c01c17 	ldw	r3,112(sp)
    c0f8:	d8801b17 	ldw	r2,108(sp)
    c0fc:	d811883a 	mov	r8,sp
    c100:	8c3fef16 	blt	r17,r16,c0c0 <___svfiprintf_internal_r+0xb80>
    c104:	dac02817 	ldw	r11,160(sp)
    c108:	1c07883a 	add	r3,r3,r16
    c10c:	10800044 	addi	r2,r2,1
    c110:	42c00015 	stw	r11,0(r8)
    c114:	44000115 	stw	r16,4(r8)
    c118:	d8c01c15 	stw	r3,112(sp)
    c11c:	d8801b15 	stw	r2,108(sp)
    c120:	010001c4 	movi	r4,7
    c124:	2080aa16 	blt	r4,r2,c3d0 <___svfiprintf_internal_r+0xe90>
    c128:	d8802417 	ldw	r2,144(sp)
    c12c:	dac02017 	ldw	r11,128(sp)
    c130:	12c0010e 	bge	r2,r11,c138 <___svfiprintf_internal_r+0xbf8>
    c134:	5805883a 	mov	r2,r11
    c138:	dac02517 	ldw	r11,148(sp)
    c13c:	5897883a 	add	r11,r11,r2
    c140:	dac02515 	stw	r11,148(sp)
    c144:	1800531e 	bne	r3,zero,c294 <___svfiprintf_internal_r+0xd54>
    c148:	98800007 	ldb	r2,0(r19)
    c14c:	d8001b15 	stw	zero,108(sp)
    c150:	d811883a 	mov	r8,sp
    c154:	103d231e 	bne	r2,zero,b5e4 <___svfiprintf_internal_r+0xa4>
    c158:	9823883a 	mov	r17,r19
    c15c:	003d3906 	br	b644 <___svfiprintf_internal_r+0x104>
    c160:	d8801c17 	ldw	r2,112(sp)
    c164:	10000426 	beq	r2,zero,c178 <___svfiprintf_internal_r+0xc38>
    c168:	d9402717 	ldw	r5,156(sp)
    c16c:	d9002a17 	ldw	r4,168(sp)
    c170:	d9801a04 	addi	r6,sp,104
    c174:	000b3700 	call	b370 <__ssprint_r>
    c178:	dac02717 	ldw	r11,156(sp)
    c17c:	d8802517 	ldw	r2,148(sp)
    c180:	58c0030b 	ldhu	r3,12(r11)
    c184:	18c0100c 	andi	r3,r3,64
    c188:	1801381e 	bne	r3,zero,c66c <___svfiprintf_internal_r+0x112c>
    c18c:	dfc03717 	ldw	ra,220(sp)
    c190:	df003617 	ldw	fp,216(sp)
    c194:	ddc03517 	ldw	r23,212(sp)
    c198:	dd803417 	ldw	r22,208(sp)
    c19c:	dd403317 	ldw	r21,204(sp)
    c1a0:	dd003217 	ldw	r20,200(sp)
    c1a4:	dcc03117 	ldw	r19,196(sp)
    c1a8:	dc803017 	ldw	r18,192(sp)
    c1ac:	dc402f17 	ldw	r17,188(sp)
    c1b0:	dc002e17 	ldw	r16,184(sp)
    c1b4:	dec03804 	addi	sp,sp,224
    c1b8:	f800283a 	ret
    c1bc:	dac02417 	ldw	r11,144(sp)
    c1c0:	d9002017 	ldw	r4,128(sp)
    c1c4:	5939c83a 	sub	fp,r11,r4
    c1c8:	073f780e 	bge	zero,fp,bfac <___svfiprintf_internal_r+0xa6c>
    c1cc:	02400404 	movi	r9,16
    c1d0:	4f01370e 	bge	r9,fp,c6b0 <___svfiprintf_internal_r+0x1170>
    c1d4:	02c000b4 	movhi	r11,2
    c1d8:	5afd7204 	addi	r11,r11,-2616
    c1dc:	dac02215 	stw	r11,136(sp)
    c1e0:	028001c4 	movi	r10,7
    c1e4:	00000306 	br	c1f4 <___svfiprintf_internal_r+0xcb4>
    c1e8:	e73ffc04 	addi	fp,fp,-16
    c1ec:	42000204 	addi	r8,r8,8
    c1f0:	4f00150e 	bge	r9,fp,c248 <___svfiprintf_internal_r+0xd08>
    c1f4:	18c00404 	addi	r3,r3,16
    c1f8:	10800044 	addi	r2,r2,1
    c1fc:	45000015 	stw	r20,0(r8)
    c200:	42400115 	stw	r9,4(r8)
    c204:	d8c01c15 	stw	r3,112(sp)
    c208:	d8801b15 	stw	r2,108(sp)
    c20c:	50bff60e 	bge	r10,r2,c1e8 <___svfiprintf_internal_r+0xca8>
    c210:	d9801a04 	addi	r6,sp,104
    c214:	b80b883a 	mov	r5,r23
    c218:	a809883a 	mov	r4,r21
    c21c:	da402c15 	stw	r9,176(sp)
    c220:	da802d15 	stw	r10,180(sp)
    c224:	000b3700 	call	b370 <__ssprint_r>
    c228:	da402c17 	ldw	r9,176(sp)
    c22c:	da802d17 	ldw	r10,180(sp)
    c230:	103fd11e 	bne	r2,zero,c178 <___svfiprintf_internal_r+0xc38>
    c234:	e73ffc04 	addi	fp,fp,-16
    c238:	d8c01c17 	ldw	r3,112(sp)
    c23c:	d8801b17 	ldw	r2,108(sp)
    c240:	d811883a 	mov	r8,sp
    c244:	4f3feb16 	blt	r9,fp,c1f4 <___svfiprintf_internal_r+0xcb4>
    c248:	dac02217 	ldw	r11,136(sp)
    c24c:	1f07883a 	add	r3,r3,fp
    c250:	10800044 	addi	r2,r2,1
    c254:	42c00015 	stw	r11,0(r8)
    c258:	47000115 	stw	fp,4(r8)
    c25c:	d8c01c15 	stw	r3,112(sp)
    c260:	d8801b15 	stw	r2,108(sp)
    c264:	010001c4 	movi	r4,7
    c268:	2080b616 	blt	r4,r2,c544 <___svfiprintf_internal_r+0x1004>
    c26c:	42000204 	addi	r8,r8,8
    c270:	003f4e06 	br	bfac <___svfiprintf_internal_r+0xa6c>
    c274:	d9801a04 	addi	r6,sp,104
    c278:	b80b883a 	mov	r5,r23
    c27c:	a809883a 	mov	r4,r21
    c280:	000b3700 	call	b370 <__ssprint_r>
    c284:	103fbc1e 	bne	r2,zero,c178 <___svfiprintf_internal_r+0xc38>
    c288:	d8c01c17 	ldw	r3,112(sp)
    c28c:	d811883a 	mov	r8,sp
    c290:	003f7a06 	br	c07c <___svfiprintf_internal_r+0xb3c>
    c294:	d9801a04 	addi	r6,sp,104
    c298:	b80b883a 	mov	r5,r23
    c29c:	a809883a 	mov	r4,r21
    c2a0:	000b3700 	call	b370 <__ssprint_r>
    c2a4:	103fa826 	beq	r2,zero,c148 <___svfiprintf_internal_r+0xc08>
    c2a8:	003fb306 	br	c178 <___svfiprintf_internal_r+0xc38>
    c2ac:	d9801a04 	addi	r6,sp,104
    c2b0:	b80b883a 	mov	r5,r23
    c2b4:	a809883a 	mov	r4,r21
    c2b8:	000b3700 	call	b370 <__ssprint_r>
    c2bc:	103fae1e 	bne	r2,zero,c178 <___svfiprintf_internal_r+0xc38>
    c2c0:	d811883a 	mov	r8,sp
    c2c4:	003cdc06 	br	b638 <___svfiprintf_internal_r+0xf8>
    c2c8:	d9801a04 	addi	r6,sp,104
    c2cc:	b80b883a 	mov	r5,r23
    c2d0:	a809883a 	mov	r4,r21
    c2d4:	000b3700 	call	b370 <__ssprint_r>
    c2d8:	103fa71e 	bne	r2,zero,c178 <___svfiprintf_internal_r+0xc38>
    c2dc:	d8c01c17 	ldw	r3,112(sp)
    c2e0:	d8801b17 	ldw	r2,108(sp)
    c2e4:	d811883a 	mov	r8,sp
    c2e8:	003f5a06 	br	c054 <___svfiprintf_internal_r+0xb14>
    c2ec:	d9801a04 	addi	r6,sp,104
    c2f0:	b80b883a 	mov	r5,r23
    c2f4:	a809883a 	mov	r4,r21
    c2f8:	000b3700 	call	b370 <__ssprint_r>
    c2fc:	103f9e1e 	bne	r2,zero,c178 <___svfiprintf_internal_r+0xc38>
    c300:	d8c01c17 	ldw	r3,112(sp)
    c304:	d8801b17 	ldw	r2,108(sp)
    c308:	d811883a 	mov	r8,sp
    c30c:	003f1706 	br	bf6c <___svfiprintf_internal_r+0xa2c>
    c310:	d9801a04 	addi	r6,sp,104
    c314:	b80b883a 	mov	r5,r23
    c318:	a809883a 	mov	r4,r21
    c31c:	000b3700 	call	b370 <__ssprint_r>
    c320:	103f951e 	bne	r2,zero,c178 <___svfiprintf_internal_r+0xc38>
    c324:	d8c01c17 	ldw	r3,112(sp)
    c328:	d8801b17 	ldw	r2,108(sp)
    c32c:	d811883a 	mov	r8,sp
    c330:	003f1b06 	br	bfa0 <___svfiprintf_internal_r+0xa60>
    c334:	d8001d85 	stb	zero,118(sp)
    c338:	80007b16 	blt	r16,zero,c528 <___svfiprintf_internal_r+0xfe8>
    c33c:	00ffdfc4 	movi	r3,-129
    c340:	e244b03a 	or	r2,fp,r9
    c344:	90e4703a 	and	r18,r18,r3
    c348:	103d7026 	beq	r2,zero,b90c <___svfiprintf_internal_r+0x3cc>
    c34c:	0015883a 	mov	r10,zero
    c350:	003d7206 	br	b91c <___svfiprintf_internal_r+0x3dc>
    c354:	d9801a04 	addi	r6,sp,104
    c358:	b80b883a 	mov	r5,r23
    c35c:	a809883a 	mov	r4,r21
    c360:	000b3700 	call	b370 <__ssprint_r>
    c364:	103f841e 	bne	r2,zero,c178 <___svfiprintf_internal_r+0xc38>
    c368:	d8c01c17 	ldw	r3,112(sp)
    c36c:	d8801b17 	ldw	r2,108(sp)
    c370:	d811883a 	mov	r8,sp
    c374:	003ef006 	br	bf38 <___svfiprintf_internal_r+0x9f8>
    c378:	9080100c 	andi	r2,r18,64
    c37c:	d8001d85 	stb	zero,118(sp)
    c380:	dac02317 	ldw	r11,140(sp)
    c384:	10008126 	beq	r2,zero,c58c <___svfiprintf_internal_r+0x104c>
    c388:	58800104 	addi	r2,r11,4
    c38c:	5f00000b 	ldhu	fp,0(r11)
    c390:	0013883a 	mov	r9,zero
    c394:	803ec30e 	bge	r16,zero,bea4 <___svfiprintf_internal_r+0x964>
    c398:	d8802315 	stw	r2,140(sp)
    c39c:	0015883a 	mov	r10,zero
    c3a0:	e244b03a 	or	r2,fp,r9
    c3a4:	103e371e 	bne	r2,zero,bc84 <___svfiprintf_internal_r+0x744>
    c3a8:	00800044 	movi	r2,1
    c3ac:	10803fcc 	andi	r2,r2,255
    c3b0:	00c00044 	movi	r3,1
    c3b4:	10c06126 	beq	r2,r3,c53c <___svfiprintf_internal_r+0xffc>
    c3b8:	00c00084 	movi	r3,2
    c3bc:	10fd5526 	beq	r2,r3,b914 <___svfiprintf_internal_r+0x3d4>
    c3c0:	003ed806 	br	bf24 <___svfiprintf_internal_r+0x9e4>
    c3c4:	d8802315 	stw	r2,140(sp)
    c3c8:	98c00007 	ldb	r3,0(r19)
    c3cc:	003cab06 	br	b67c <___svfiprintf_internal_r+0x13c>
    c3d0:	d9801a04 	addi	r6,sp,104
    c3d4:	b80b883a 	mov	r5,r23
    c3d8:	a809883a 	mov	r4,r21
    c3dc:	000b3700 	call	b370 <__ssprint_r>
    c3e0:	103f651e 	bne	r2,zero,c178 <___svfiprintf_internal_r+0xc38>
    c3e4:	d8c01c17 	ldw	r3,112(sp)
    c3e8:	003f4f06 	br	c128 <___svfiprintf_internal_r+0xbe8>
    c3ec:	008000b4 	movhi	r2,2
    c3f0:	10bd0a04 	addi	r2,r2,-3032
    c3f4:	d8802915 	stw	r2,164(sp)
    c3f8:	003d4406 	br	b90c <___svfiprintf_internal_r+0x3cc>
    c3fc:	dac02317 	ldw	r11,140(sp)
    c400:	58800017 	ldw	r2,0(r11)
    c404:	dac02517 	ldw	r11,148(sp)
    c408:	5807d7fa 	srai	r3,r11,31
    c40c:	dac02317 	ldw	r11,140(sp)
    c410:	10c00115 	stw	r3,4(r2)
    c414:	5ac00104 	addi	r11,r11,4
    c418:	dac02315 	stw	r11,140(sp)
    c41c:	dac02517 	ldw	r11,148(sp)
    c420:	12c00015 	stw	r11,0(r2)
    c424:	003c6d06 	br	b5dc <___svfiprintf_internal_r+0x9c>
    c428:	9080100c 	andi	r2,r18,64
    c42c:	dac02317 	ldw	r11,140(sp)
    c430:	103e5326 	beq	r2,zero,bd80 <___svfiprintf_internal_r+0x840>
    c434:	5f00000f 	ldh	fp,0(r11)
    c438:	5ac00104 	addi	r11,r11,4
    c43c:	dac02315 	stw	r11,140(sp)
    c440:	e013d7fa 	srai	r9,fp,31
    c444:	4805883a 	mov	r2,r9
    c448:	003e0706 	br	bc68 <___svfiprintf_internal_r+0x728>
    c44c:	00800c04 	movi	r2,48
    c450:	d8801d05 	stb	r2,116(sp)
    c454:	d8c01d45 	stb	r3,117(sp)
    c458:	d8001d85 	stb	zero,118(sp)
    c45c:	90800094 	ori	r2,r18,2
    c460:	80008f16 	blt	r16,zero,c6a0 <___svfiprintf_internal_r+0x1160>
    c464:	00bfdfc4 	movi	r2,-129
    c468:	90a4703a 	and	r18,r18,r2
    c46c:	94800094 	ori	r18,r18,2
    c470:	0015883a 	mov	r10,zero
    c474:	003d2906 	br	b91c <___svfiprintf_internal_r+0x3dc>
    c478:	98c00007 	ldb	r3,0(r19)
    c47c:	003c7f06 	br	b67c <___svfiprintf_internal_r+0x13c>
    c480:	dac02317 	ldw	r11,140(sp)
    c484:	0013883a 	mov	r9,zero
    c488:	5f000017 	ldw	fp,0(r11)
    c48c:	5ac00104 	addi	r11,r11,4
    c490:	dac02315 	stw	r11,140(sp)
    c494:	003d1506 	br	b8ec <___svfiprintf_internal_r+0x3ac>
    c498:	9080100c 	andi	r2,r18,64
    c49c:	d8001d85 	stb	zero,118(sp)
    c4a0:	dac02317 	ldw	r11,140(sp)
    c4a4:	10003426 	beq	r2,zero,c578 <___svfiprintf_internal_r+0x1038>
    c4a8:	58800104 	addi	r2,r11,4
    c4ac:	5f00000b 	ldhu	fp,0(r11)
    c4b0:	0013883a 	mov	r9,zero
    c4b4:	803e950e 	bge	r16,zero,bf0c <___svfiprintf_internal_r+0x9cc>
    c4b8:	e246b03a 	or	r3,fp,r9
    c4bc:	d8802315 	stw	r2,140(sp)
    c4c0:	183d5a1e 	bne	r3,zero,ba2c <___svfiprintf_internal_r+0x4ec>
    c4c4:	0015883a 	mov	r10,zero
    c4c8:	0005883a 	mov	r2,zero
    c4cc:	003fb706 	br	c3ac <___svfiprintf_internal_r+0xe6c>
    c4d0:	98c00043 	ldbu	r3,1(r19)
    c4d4:	94800814 	ori	r18,r18,32
    c4d8:	9cc00044 	addi	r19,r19,1
    c4dc:	18c03fcc 	andi	r3,r3,255
    c4e0:	18c0201c 	xori	r3,r3,128
    c4e4:	18ffe004 	addi	r3,r3,-128
    c4e8:	003c6406 	br	b67c <___svfiprintf_internal_r+0x13c>
    c4ec:	d8c02315 	stw	r3,140(sp)
    c4f0:	0015883a 	mov	r10,zero
    c4f4:	003faa06 	br	c3a0 <___svfiprintf_internal_r+0xe60>
    c4f8:	dac02317 	ldw	r11,140(sp)
    c4fc:	58800017 	ldw	r2,0(r11)
    c500:	5ac00104 	addi	r11,r11,4
    c504:	dac02315 	stw	r11,140(sp)
    c508:	dac02517 	ldw	r11,148(sp)
    c50c:	12c00015 	stw	r11,0(r2)
    c510:	003c3206 	br	b5dc <___svfiprintf_internal_r+0x9c>
    c514:	010000b4 	movhi	r4,2
    c518:	213d0a04 	addi	r4,r4,-3032
    c51c:	d9002915 	stw	r4,164(sp)
    c520:	d8c02315 	stw	r3,140(sp)
    c524:	1025883a 	mov	r18,r2
    c528:	e244b03a 	or	r2,fp,r9
    c52c:	103f871e 	bne	r2,zero,c34c <___svfiprintf_internal_r+0xe0c>
    c530:	0015883a 	mov	r10,zero
    c534:	00800084 	movi	r2,2
    c538:	003f9c06 	br	c3ac <___svfiprintf_internal_r+0xe6c>
    c53c:	0039883a 	mov	fp,zero
    c540:	003e5f06 	br	bec0 <___svfiprintf_internal_r+0x980>
    c544:	d9801a04 	addi	r6,sp,104
    c548:	b80b883a 	mov	r5,r23
    c54c:	a809883a 	mov	r4,r21
    c550:	000b3700 	call	b370 <__ssprint_r>
    c554:	103f081e 	bne	r2,zero,c178 <___svfiprintf_internal_r+0xc38>
    c558:	d8c01c17 	ldw	r3,112(sp)
    c55c:	d8801b17 	ldw	r2,108(sp)
    c560:	d811883a 	mov	r8,sp
    c564:	003e9106 	br	bfac <___svfiprintf_internal_r+0xa6c>
    c568:	010000b4 	movhi	r4,2
    c56c:	213d7204 	addi	r4,r4,-2616
    c570:	d9002215 	stw	r4,136(sp)
    c574:	003ead06 	br	c02c <___svfiprintf_internal_r+0xaec>
    c578:	58800104 	addi	r2,r11,4
    c57c:	5f000017 	ldw	fp,0(r11)
    c580:	0013883a 	mov	r9,zero
    c584:	803e610e 	bge	r16,zero,bf0c <___svfiprintf_internal_r+0x9cc>
    c588:	003fcb06 	br	c4b8 <___svfiprintf_internal_r+0xf78>
    c58c:	58800104 	addi	r2,r11,4
    c590:	5f000017 	ldw	fp,0(r11)
    c594:	0013883a 	mov	r9,zero
    c598:	803e420e 	bge	r16,zero,bea4 <___svfiprintf_internal_r+0x964>
    c59c:	003f7e06 	br	c398 <___svfiprintf_internal_r+0xe58>
    c5a0:	5f000017 	ldw	fp,0(r11)
    c5a4:	5ac00104 	addi	r11,r11,4
    c5a8:	0013883a 	mov	r9,zero
    c5ac:	dac02315 	stw	r11,140(sp)
    c5b0:	003cce06 	br	b8ec <___svfiprintf_internal_r+0x3ac>
    c5b4:	8809883a 	mov	r4,r17
    c5b8:	da002c15 	stw	r8,176(sp)
    c5bc:	000b2d80 	call	b2d8 <strlen>
    c5c0:	d8802115 	stw	r2,132(sp)
    c5c4:	da801d83 	ldbu	r10,118(sp)
    c5c8:	df002315 	stw	fp,140(sp)
    c5cc:	0021883a 	mov	r16,zero
    c5d0:	da002c17 	ldw	r8,176(sp)
    c5d4:	003cf606 	br	b9b0 <___svfiprintf_internal_r+0x470>
    c5d8:	00800184 	movi	r2,6
    c5dc:	1400012e 	bgeu	r2,r16,c5e4 <___svfiprintf_internal_r+0x10a4>
    c5e0:	1021883a 	mov	r16,r2
    c5e4:	dc002115 	stw	r16,132(sp)
    c5e8:	8005883a 	mov	r2,r16
    c5ec:	80003c16 	blt	r16,zero,c6e0 <___svfiprintf_internal_r+0x11a0>
    c5f0:	044000b4 	movhi	r17,2
    c5f4:	d8802015 	stw	r2,128(sp)
    c5f8:	df002315 	stw	fp,140(sp)
    c5fc:	8c7d0f04 	addi	r17,r17,-3012
    c600:	003d2e06 	br	babc <___svfiprintf_internal_r+0x57c>
    c604:	04001004 	movi	r16,64
    c608:	800b883a 	mov	r5,r16
    c60c:	00095e40 	call	95e4 <_malloc_r>
    c610:	dac02717 	ldw	r11,156(sp)
    c614:	58800015 	stw	r2,0(r11)
    c618:	58800415 	stw	r2,16(r11)
    c61c:	10004826 	beq	r2,zero,c740 <___svfiprintf_internal_r+0x1200>
    c620:	dac02717 	ldw	r11,156(sp)
    c624:	5c000515 	stw	r16,20(r11)
    c628:	003bd906 	br	b590 <___svfiprintf_internal_r+0x50>
    c62c:	9080004c 	andi	r2,r18,1
    c630:	0015883a 	mov	r10,zero
    c634:	10000626 	beq	r2,zero,c650 <___svfiprintf_internal_r+0x1110>
    c638:	dac02b17 	ldw	r11,172(sp)
    c63c:	00800c04 	movi	r2,48
    c640:	d88019c5 	stb	r2,103(sp)
    c644:	dac02115 	stw	r11,132(sp)
    c648:	dc4019c4 	addi	r17,sp,103
    c64c:	003cd806 	br	b9b0 <___svfiprintf_internal_r+0x470>
    c650:	d8002115 	stw	zero,132(sp)
    c654:	dc401a04 	addi	r17,sp,104
    c658:	003cd506 	br	b9b0 <___svfiprintf_internal_r+0x470>
    c65c:	010000b4 	movhi	r4,2
    c660:	213d7604 	addi	r4,r4,-2600
    c664:	d9002815 	stw	r4,160(sp)
    c668:	003d4306 	br	bb78 <___svfiprintf_internal_r+0x638>
    c66c:	00bfffc4 	movi	r2,-1
    c670:	003ec606 	br	c18c <___svfiprintf_internal_r+0xc4c>
    c674:	00800044 	movi	r2,1
    c678:	10803fcc 	andi	r2,r2,255
    c67c:	00c00044 	movi	r3,1
    c680:	10fd8026 	beq	r2,r3,bc84 <___svfiprintf_internal_r+0x744>
    c684:	00c00084 	movi	r3,2
    c688:	10fca426 	beq	r2,r3,b91c <___svfiprintf_internal_r+0x3dc>
    c68c:	003ce806 	br	ba30 <___svfiprintf_internal_r+0x4f0>
    c690:	010000b4 	movhi	r4,2
    c694:	213d7604 	addi	r4,r4,-2600
    c698:	d9002815 	stw	r4,160(sp)
    c69c:	003e9906 	br	c104 <___svfiprintf_internal_r+0xbc4>
    c6a0:	1025883a 	mov	r18,r2
    c6a4:	0015883a 	mov	r10,zero
    c6a8:	00800084 	movi	r2,2
    c6ac:	003ff206 	br	c678 <___svfiprintf_internal_r+0x1138>
    c6b0:	014000b4 	movhi	r5,2
    c6b4:	297d7204 	addi	r5,r5,-2616
    c6b8:	d9402215 	stw	r5,136(sp)
    c6bc:	003ee206 	br	c248 <___svfiprintf_internal_r+0xd08>
    c6c0:	5827883a 	mov	r19,r11
    c6c4:	0021883a 	mov	r16,zero
    c6c8:	003bed06 	br	b680 <___svfiprintf_internal_r+0x140>
    c6cc:	dc002115 	stw	r16,132(sp)
    c6d0:	da801d83 	ldbu	r10,118(sp)
    c6d4:	df002315 	stw	fp,140(sp)
    c6d8:	0021883a 	mov	r16,zero
    c6dc:	003cb406 	br	b9b0 <___svfiprintf_internal_r+0x470>
    c6e0:	0005883a 	mov	r2,zero
    c6e4:	003fc206 	br	c5f0 <___svfiprintf_internal_r+0x10b0>
    c6e8:	d8802317 	ldw	r2,140(sp)
    c6ec:	98c00043 	ldbu	r3,1(r19)
    c6f0:	5827883a 	mov	r19,r11
    c6f4:	14000017 	ldw	r16,0(r2)
    c6f8:	10800104 	addi	r2,r2,4
    c6fc:	d8802315 	stw	r2,140(sp)
    c700:	803f760e 	bge	r16,zero,c4dc <___svfiprintf_internal_r+0xf9c>
    c704:	18c03fcc 	andi	r3,r3,255
    c708:	18c0201c 	xori	r3,r3,128
    c70c:	043fffc4 	movi	r16,-1
    c710:	18ffe004 	addi	r3,r3,-128
    c714:	003bd906 	br	b67c <___svfiprintf_internal_r+0x13c>
    c718:	d9c01d85 	stb	r7,118(sp)
    c71c:	003cb606 	br	b9f8 <___svfiprintf_internal_r+0x4b8>
    c720:	d9c01d85 	stb	r7,118(sp)
    c724:	003d2106 	br	bbac <___svfiprintf_internal_r+0x66c>
    c728:	d9c01d85 	stb	r7,118(sp)
    c72c:	003d8e06 	br	bd68 <___svfiprintf_internal_r+0x828>
    c730:	d9c01d85 	stb	r7,118(sp)
    c734:	003db306 	br	be04 <___svfiprintf_internal_r+0x8c4>
    c738:	d9c01d85 	stb	r7,118(sp)
    c73c:	003c8a06 	br	b968 <___svfiprintf_internal_r+0x428>
    c740:	dac02a17 	ldw	r11,168(sp)
    c744:	00800304 	movi	r2,12
    c748:	58800015 	stw	r2,0(r11)
    c74c:	00bfffc4 	movi	r2,-1
    c750:	003e8e06 	br	c18c <___svfiprintf_internal_r+0xc4c>
    c754:	d9c01d85 	stb	r7,118(sp)
    c758:	003dc706 	br	be78 <___svfiprintf_internal_r+0x938>
    c75c:	d9c01d85 	stb	r7,118(sp)
    c760:	003ddf06 	br	bee0 <___svfiprintf_internal_r+0x9a0>
    c764:	d9c01d85 	stb	r7,118(sp)
    c768:	003d3706 	br	bc48 <___svfiprintf_internal_r+0x708>
    c76c:	d9c01d85 	stb	r7,118(sp)
    c770:	003c5406 	br	b8c4 <___svfiprintf_internal_r+0x384>
    c774:	d9c01d85 	stb	r7,118(sp)
    c778:	003d1d06 	br	bbf0 <___svfiprintf_internal_r+0x6b0>

0000c77c <__sprint_r.part.0>:
    c77c:	28801917 	ldw	r2,100(r5)
    c780:	defff604 	addi	sp,sp,-40
    c784:	dd400515 	stw	r21,20(sp)
    c788:	dfc00915 	stw	ra,36(sp)
    c78c:	df000815 	stw	fp,32(sp)
    c790:	ddc00715 	stw	r23,28(sp)
    c794:	dd800615 	stw	r22,24(sp)
    c798:	dd000415 	stw	r20,16(sp)
    c79c:	dcc00315 	stw	r19,12(sp)
    c7a0:	dc800215 	stw	r18,8(sp)
    c7a4:	dc400115 	stw	r17,4(sp)
    c7a8:	dc000015 	stw	r16,0(sp)
    c7ac:	1088000c 	andi	r2,r2,8192
    c7b0:	302b883a 	mov	r21,r6
    c7b4:	10002e26 	beq	r2,zero,c870 <__sprint_r.part.0+0xf4>
    c7b8:	30800217 	ldw	r2,8(r6)
    c7bc:	35800017 	ldw	r22,0(r6)
    c7c0:	10002926 	beq	r2,zero,c868 <__sprint_r.part.0+0xec>
    c7c4:	2827883a 	mov	r19,r5
    c7c8:	2029883a 	mov	r20,r4
    c7cc:	b5c00104 	addi	r23,r22,4
    c7d0:	04bfffc4 	movi	r18,-1
    c7d4:	bc400017 	ldw	r17,0(r23)
    c7d8:	b4000017 	ldw	r16,0(r22)
    c7dc:	0039883a 	mov	fp,zero
    c7e0:	8822d0ba 	srli	r17,r17,2
    c7e4:	8800031e 	bne	r17,zero,c7f4 <__sprint_r.part.0+0x78>
    c7e8:	00001806 	br	c84c <__sprint_r.part.0+0xd0>
    c7ec:	84000104 	addi	r16,r16,4
    c7f0:	8f001526 	beq	r17,fp,c848 <__sprint_r.part.0+0xcc>
    c7f4:	81400017 	ldw	r5,0(r16)
    c7f8:	980d883a 	mov	r6,r19
    c7fc:	a009883a 	mov	r4,r20
    c800:	000e1a40 	call	e1a4 <_fputwc_r>
    c804:	e7000044 	addi	fp,fp,1
    c808:	14bff81e 	bne	r2,r18,c7ec <__sprint_r.part.0+0x70>
    c80c:	9005883a 	mov	r2,r18
    c810:	a8000215 	stw	zero,8(r21)
    c814:	a8000115 	stw	zero,4(r21)
    c818:	dfc00917 	ldw	ra,36(sp)
    c81c:	df000817 	ldw	fp,32(sp)
    c820:	ddc00717 	ldw	r23,28(sp)
    c824:	dd800617 	ldw	r22,24(sp)
    c828:	dd400517 	ldw	r21,20(sp)
    c82c:	dd000417 	ldw	r20,16(sp)
    c830:	dcc00317 	ldw	r19,12(sp)
    c834:	dc800217 	ldw	r18,8(sp)
    c838:	dc400117 	ldw	r17,4(sp)
    c83c:	dc000017 	ldw	r16,0(sp)
    c840:	dec00a04 	addi	sp,sp,40
    c844:	f800283a 	ret
    c848:	a8800217 	ldw	r2,8(r21)
    c84c:	8c63883a 	add	r17,r17,r17
    c850:	8c63883a 	add	r17,r17,r17
    c854:	1445c83a 	sub	r2,r2,r17
    c858:	a8800215 	stw	r2,8(r21)
    c85c:	b5800204 	addi	r22,r22,8
    c860:	bdc00204 	addi	r23,r23,8
    c864:	103fdb1e 	bne	r2,zero,c7d4 <__sprint_r.part.0+0x58>
    c868:	0005883a 	mov	r2,zero
    c86c:	003fe806 	br	c810 <__sprint_r.part.0+0x94>
    c870:	000e2a40 	call	e2a4 <__sfvwrite_r>
    c874:	003fe606 	br	c810 <__sprint_r.part.0+0x94>

0000c878 <__sprint_r>:
    c878:	30c00217 	ldw	r3,8(r6)
    c87c:	18000126 	beq	r3,zero,c884 <__sprint_r+0xc>
    c880:	000c77c1 	jmpi	c77c <__sprint_r.part.0>
    c884:	30000115 	stw	zero,4(r6)
    c888:	0005883a 	mov	r2,zero
    c88c:	f800283a 	ret

0000c890 <___vfiprintf_internal_r>:
    c890:	deffc904 	addi	sp,sp,-220
    c894:	df003515 	stw	fp,212(sp)
    c898:	dd003115 	stw	r20,196(sp)
    c89c:	dfc03615 	stw	ra,216(sp)
    c8a0:	ddc03415 	stw	r23,208(sp)
    c8a4:	dd803315 	stw	r22,204(sp)
    c8a8:	dd403215 	stw	r21,200(sp)
    c8ac:	dcc03015 	stw	r19,192(sp)
    c8b0:	dc802f15 	stw	r18,188(sp)
    c8b4:	dc402e15 	stw	r17,184(sp)
    c8b8:	dc002d15 	stw	r16,180(sp)
    c8bc:	d9002015 	stw	r4,128(sp)
    c8c0:	d9c02215 	stw	r7,136(sp)
    c8c4:	2829883a 	mov	r20,r5
    c8c8:	3039883a 	mov	fp,r6
    c8cc:	20000226 	beq	r4,zero,c8d8 <___vfiprintf_internal_r+0x48>
    c8d0:	20800e17 	ldw	r2,56(r4)
    c8d4:	1000cf26 	beq	r2,zero,cc14 <___vfiprintf_internal_r+0x384>
    c8d8:	a080030b 	ldhu	r2,12(r20)
    c8dc:	10c8000c 	andi	r3,r2,8192
    c8e0:	1800061e 	bne	r3,zero,c8fc <___vfiprintf_internal_r+0x6c>
    c8e4:	a1001917 	ldw	r4,100(r20)
    c8e8:	00f7ffc4 	movi	r3,-8193
    c8ec:	10880014 	ori	r2,r2,8192
    c8f0:	20c6703a 	and	r3,r4,r3
    c8f4:	a080030d 	sth	r2,12(r20)
    c8f8:	a0c01915 	stw	r3,100(r20)
    c8fc:	10c0020c 	andi	r3,r2,8
    c900:	1800a926 	beq	r3,zero,cba8 <___vfiprintf_internal_r+0x318>
    c904:	a0c00417 	ldw	r3,16(r20)
    c908:	1800a726 	beq	r3,zero,cba8 <___vfiprintf_internal_r+0x318>
    c90c:	1080068c 	andi	r2,r2,26
    c910:	00c00284 	movi	r3,10
    c914:	10c0ac26 	beq	r2,r3,cbc8 <___vfiprintf_internal_r+0x338>
    c918:	da801a04 	addi	r10,sp,104
    c91c:	da801e15 	stw	r10,120(sp)
    c920:	d8801e17 	ldw	r2,120(sp)
    c924:	da8019c4 	addi	r10,sp,103
    c928:	058000b4 	movhi	r22,2
    c92c:	05c000b4 	movhi	r23,2
    c930:	da801f15 	stw	r10,124(sp)
    c934:	1295c83a 	sub	r10,r2,r10
    c938:	b5bd7e04 	addi	r22,r22,-2568
    c93c:	bdfd7a04 	addi	r23,r23,-2584
    c940:	dec01a15 	stw	sp,104(sp)
    c944:	d8001c15 	stw	zero,112(sp)
    c948:	d8001b15 	stw	zero,108(sp)
    c94c:	d8002615 	stw	zero,152(sp)
    c950:	d8002315 	stw	zero,140(sp)
    c954:	da802715 	stw	r10,156(sp)
    c958:	d811883a 	mov	r8,sp
    c95c:	dd002115 	stw	r20,132(sp)
    c960:	e021883a 	mov	r16,fp
    c964:	80800007 	ldb	r2,0(r16)
    c968:	1003ea26 	beq	r2,zero,d914 <___vfiprintf_internal_r+0x1084>
    c96c:	00c00944 	movi	r3,37
    c970:	8025883a 	mov	r18,r16
    c974:	10c0021e 	bne	r2,r3,c980 <___vfiprintf_internal_r+0xf0>
    c978:	00001606 	br	c9d4 <___vfiprintf_internal_r+0x144>
    c97c:	10c00326 	beq	r2,r3,c98c <___vfiprintf_internal_r+0xfc>
    c980:	94800044 	addi	r18,r18,1
    c984:	90800007 	ldb	r2,0(r18)
    c988:	103ffc1e 	bne	r2,zero,c97c <___vfiprintf_internal_r+0xec>
    c98c:	9423c83a 	sub	r17,r18,r16
    c990:	88001026 	beq	r17,zero,c9d4 <___vfiprintf_internal_r+0x144>
    c994:	d8c01c17 	ldw	r3,112(sp)
    c998:	d8801b17 	ldw	r2,108(sp)
    c99c:	44000015 	stw	r16,0(r8)
    c9a0:	88c7883a 	add	r3,r17,r3
    c9a4:	10800044 	addi	r2,r2,1
    c9a8:	44400115 	stw	r17,4(r8)
    c9ac:	d8c01c15 	stw	r3,112(sp)
    c9b0:	d8801b15 	stw	r2,108(sp)
    c9b4:	010001c4 	movi	r4,7
    c9b8:	2080760e 	bge	r4,r2,cb94 <___vfiprintf_internal_r+0x304>
    c9bc:	1803821e 	bne	r3,zero,d7c8 <___vfiprintf_internal_r+0xf38>
    c9c0:	da802317 	ldw	r10,140(sp)
    c9c4:	d8001b15 	stw	zero,108(sp)
    c9c8:	d811883a 	mov	r8,sp
    c9cc:	5455883a 	add	r10,r10,r17
    c9d0:	da802315 	stw	r10,140(sp)
    c9d4:	90800007 	ldb	r2,0(r18)
    c9d8:	10044626 	beq	r2,zero,daf4 <___vfiprintf_internal_r+0x1264>
    c9dc:	90c00047 	ldb	r3,1(r18)
    c9e0:	94000044 	addi	r16,r18,1
    c9e4:	d8001d85 	stb	zero,118(sp)
    c9e8:	0009883a 	mov	r4,zero
    c9ec:	000f883a 	mov	r7,zero
    c9f0:	027fffc4 	movi	r9,-1
    c9f4:	0023883a 	mov	r17,zero
    c9f8:	0029883a 	mov	r20,zero
    c9fc:	01401604 	movi	r5,88
    ca00:	01800244 	movi	r6,9
    ca04:	03400a84 	movi	r13,42
    ca08:	03001b04 	movi	r12,108
    ca0c:	84000044 	addi	r16,r16,1
    ca10:	18bff804 	addi	r2,r3,-32
    ca14:	28827336 	bltu	r5,r2,d3e4 <___vfiprintf_internal_r+0xb54>
    ca18:	100490ba 	slli	r2,r2,2
    ca1c:	02800074 	movhi	r10,1
    ca20:	52b28c04 	addi	r10,r10,-13776
    ca24:	1285883a 	add	r2,r2,r10
    ca28:	10800017 	ldw	r2,0(r2)
    ca2c:	1000683a 	jmp	r2
    ca30:	0000d118 	cmpnei	zero,zero,836
    ca34:	0000d3e4 	muli	zero,zero,847
    ca38:	0000d3e4 	muli	zero,zero,847
    ca3c:	0000d138 	rdprs	zero,zero,836
    ca40:	0000d3e4 	muli	zero,zero,847
    ca44:	0000d3e4 	muli	zero,zero,847
    ca48:	0000d3e4 	muli	zero,zero,847
    ca4c:	0000d3e4 	muli	zero,zero,847
    ca50:	0000d3e4 	muli	zero,zero,847
    ca54:	0000d3e4 	muli	zero,zero,847
    ca58:	0000d320 	cmpeqi	zero,zero,844
    ca5c:	0000d33c 	xorhi	zero,zero,844
    ca60:	0000d3e4 	muli	zero,zero,847
    ca64:	0000cc24 	muli	zero,zero,816
    ca68:	0000d34c 	andi	zero,zero,845
    ca6c:	0000d3e4 	muli	zero,zero,847
    ca70:	0000d144 	movi	zero,837
    ca74:	0000d150 	cmplti	zero,zero,837
    ca78:	0000d150 	cmplti	zero,zero,837
    ca7c:	0000d150 	cmplti	zero,zero,837
    ca80:	0000d150 	cmplti	zero,zero,837
    ca84:	0000d150 	cmplti	zero,zero,837
    ca88:	0000d150 	cmplti	zero,zero,837
    ca8c:	0000d150 	cmplti	zero,zero,837
    ca90:	0000d150 	cmplti	zero,zero,837
    ca94:	0000d150 	cmplti	zero,zero,837
    ca98:	0000d3e4 	muli	zero,zero,847
    ca9c:	0000d3e4 	muli	zero,zero,847
    caa0:	0000d3e4 	muli	zero,zero,847
    caa4:	0000d3e4 	muli	zero,zero,847
    caa8:	0000d3e4 	muli	zero,zero,847
    caac:	0000d3e4 	muli	zero,zero,847
    cab0:	0000d3e4 	muli	zero,zero,847
    cab4:	0000d3e4 	muli	zero,zero,847
    cab8:	0000d3e4 	muli	zero,zero,847
    cabc:	0000d3e4 	muli	zero,zero,847
    cac0:	0000d17c 	xorhi	zero,zero,837
    cac4:	0000d3e4 	muli	zero,zero,847
    cac8:	0000d3e4 	muli	zero,zero,847
    cacc:	0000d3e4 	muli	zero,zero,847
    cad0:	0000d3e4 	muli	zero,zero,847
    cad4:	0000d3e4 	muli	zero,zero,847
    cad8:	0000d3e4 	muli	zero,zero,847
    cadc:	0000d3e4 	muli	zero,zero,847
    cae0:	0000d3e4 	muli	zero,zero,847
    cae4:	0000d3e4 	muli	zero,zero,847
    cae8:	0000d3e4 	muli	zero,zero,847
    caec:	0000d1b4 	movhi	zero,838
    caf0:	0000d3e4 	muli	zero,zero,847
    caf4:	0000d3e4 	muli	zero,zero,847
    caf8:	0000d3e4 	muli	zero,zero,847
    cafc:	0000d3e4 	muli	zero,zero,847
    cb00:	0000d3e4 	muli	zero,zero,847
    cb04:	0000d20c 	andi	zero,zero,840
    cb08:	0000d3e4 	muli	zero,zero,847
    cb0c:	0000d3e4 	muli	zero,zero,847
    cb10:	0000d27c 	xorhi	zero,zero,841
    cb14:	0000d3e4 	muli	zero,zero,847
    cb18:	0000d3e4 	muli	zero,zero,847
    cb1c:	0000d3e4 	muli	zero,zero,847
    cb20:	0000d3e4 	muli	zero,zero,847
    cb24:	0000d3e4 	muli	zero,zero,847
    cb28:	0000d3e4 	muli	zero,zero,847
    cb2c:	0000d3e4 	muli	zero,zero,847
    cb30:	0000d3e4 	muli	zero,zero,847
    cb34:	0000d3e4 	muli	zero,zero,847
    cb38:	0000d3e4 	muli	zero,zero,847
    cb3c:	0000d028 	cmpgeui	zero,zero,832
    cb40:	0000d054 	movui	zero,833
    cb44:	0000d3e4 	muli	zero,zero,847
    cb48:	0000d3e4 	muli	zero,zero,847
    cb4c:	0000d3e4 	muli	zero,zero,847
    cb50:	0000d38c 	andi	zero,zero,846
    cb54:	0000d054 	movui	zero,833
    cb58:	0000d3e4 	muli	zero,zero,847
    cb5c:	0000d3e4 	muli	zero,zero,847
    cb60:	0000cee8 	cmpgeui	zero,zero,827
    cb64:	0000d3e4 	muli	zero,zero,847
    cb68:	0000cef8 	rdprs	zero,zero,827
    cb6c:	0000cf34 	movhi	zero,828
    cb70:	0000cc30 	cmpltui	zero,zero,816
    cb74:	0000cedc 	xori	zero,zero,827
    cb78:	0000d3e4 	muli	zero,zero,847
    cb7c:	0000d2b8 	rdprs	zero,zero,842
    cb80:	0000d3e4 	muli	zero,zero,847
    cb84:	0000d310 	cmplti	zero,zero,844
    cb88:	0000d3e4 	muli	zero,zero,847
    cb8c:	0000d3e4 	muli	zero,zero,847
    cb90:	0000cfd4 	movui	zero,831
    cb94:	42000204 	addi	r8,r8,8
    cb98:	da802317 	ldw	r10,140(sp)
    cb9c:	5455883a 	add	r10,r10,r17
    cba0:	da802315 	stw	r10,140(sp)
    cba4:	003f8b06 	br	c9d4 <___vfiprintf_internal_r+0x144>
    cba8:	d9002017 	ldw	r4,128(sp)
    cbac:	a00b883a 	mov	r5,r20
    cbb0:	0006d6c0 	call	6d6c <__swsetup_r>
    cbb4:	1003b11e 	bne	r2,zero,da7c <___vfiprintf_internal_r+0x11ec>
    cbb8:	a080030b 	ldhu	r2,12(r20)
    cbbc:	00c00284 	movi	r3,10
    cbc0:	1080068c 	andi	r2,r2,26
    cbc4:	10ff541e 	bne	r2,r3,c918 <___vfiprintf_internal_r+0x88>
    cbc8:	a080038f 	ldh	r2,14(r20)
    cbcc:	103f5216 	blt	r2,zero,c918 <___vfiprintf_internal_r+0x88>
    cbd0:	d9c02217 	ldw	r7,136(sp)
    cbd4:	d9002017 	ldw	r4,128(sp)
    cbd8:	e00d883a 	mov	r6,fp
    cbdc:	a00b883a 	mov	r5,r20
    cbe0:	000dd080 	call	dd08 <__sbprintf>
    cbe4:	dfc03617 	ldw	ra,216(sp)
    cbe8:	df003517 	ldw	fp,212(sp)
    cbec:	ddc03417 	ldw	r23,208(sp)
    cbf0:	dd803317 	ldw	r22,204(sp)
    cbf4:	dd403217 	ldw	r21,200(sp)
    cbf8:	dd003117 	ldw	r20,196(sp)
    cbfc:	dcc03017 	ldw	r19,192(sp)
    cc00:	dc802f17 	ldw	r18,188(sp)
    cc04:	dc402e17 	ldw	r17,184(sp)
    cc08:	dc002d17 	ldw	r16,180(sp)
    cc0c:	dec03704 	addi	sp,sp,220
    cc10:	f800283a 	ret
    cc14:	0008d400 	call	8d40 <__sinit>
    cc18:	003f2f06 	br	c8d8 <___vfiprintf_internal_r+0x48>
    cc1c:	0463c83a 	sub	r17,zero,r17
    cc20:	d8802215 	stw	r2,136(sp)
    cc24:	a5000114 	ori	r20,r20,4
    cc28:	80c00007 	ldb	r3,0(r16)
    cc2c:	003f7706 	br	ca0c <___vfiprintf_internal_r+0x17c>
    cc30:	00800c04 	movi	r2,48
    cc34:	da802217 	ldw	r10,136(sp)
    cc38:	d8801d05 	stb	r2,116(sp)
    cc3c:	00801e04 	movi	r2,120
    cc40:	d8801d45 	stb	r2,117(sp)
    cc44:	d8001d85 	stb	zero,118(sp)
    cc48:	50c00104 	addi	r3,r10,4
    cc4c:	54800017 	ldw	r18,0(r10)
    cc50:	0027883a 	mov	r19,zero
    cc54:	a0800094 	ori	r2,r20,2
    cc58:	48030b16 	blt	r9,zero,d888 <___vfiprintf_internal_r+0xff8>
    cc5c:	00bfdfc4 	movi	r2,-129
    cc60:	a096703a 	and	r11,r20,r2
    cc64:	d8c02215 	stw	r3,136(sp)
    cc68:	5d000094 	ori	r20,r11,2
    cc6c:	90032b1e 	bne	r18,zero,d91c <___vfiprintf_internal_r+0x108c>
    cc70:	008000b4 	movhi	r2,2
    cc74:	10bd0a04 	addi	r2,r2,-3032
    cc78:	d8802615 	stw	r2,152(sp)
    cc7c:	0039883a 	mov	fp,zero
    cc80:	48017b1e 	bne	r9,zero,d270 <___vfiprintf_internal_r+0x9e0>
    cc84:	0013883a 	mov	r9,zero
    cc88:	0027883a 	mov	r19,zero
    cc8c:	dd401a04 	addi	r21,sp,104
    cc90:	4825883a 	mov	r18,r9
    cc94:	4cc0010e 	bge	r9,r19,cc9c <___vfiprintf_internal_r+0x40c>
    cc98:	9825883a 	mov	r18,r19
    cc9c:	e7003fcc 	andi	fp,fp,255
    cca0:	e700201c 	xori	fp,fp,128
    cca4:	e73fe004 	addi	fp,fp,-128
    cca8:	e0000126 	beq	fp,zero,ccb0 <___vfiprintf_internal_r+0x420>
    ccac:	94800044 	addi	r18,r18,1
    ccb0:	a380008c 	andi	r14,r20,2
    ccb4:	70000126 	beq	r14,zero,ccbc <___vfiprintf_internal_r+0x42c>
    ccb8:	94800084 	addi	r18,r18,2
    ccbc:	a700210c 	andi	fp,r20,132
    ccc0:	e001df1e 	bne	fp,zero,d440 <___vfiprintf_internal_r+0xbb0>
    ccc4:	8c87c83a 	sub	r3,r17,r18
    ccc8:	00c1dd0e 	bge	zero,r3,d440 <___vfiprintf_internal_r+0xbb0>
    cccc:	01c00404 	movi	r7,16
    ccd0:	d8801c17 	ldw	r2,112(sp)
    ccd4:	38c3ad0e 	bge	r7,r3,db8c <___vfiprintf_internal_r+0x12fc>
    ccd8:	028000b4 	movhi	r10,2
    ccdc:	52bd7e04 	addi	r10,r10,-2568
    cce0:	dc002915 	stw	r16,164(sp)
    cce4:	d9801b17 	ldw	r6,108(sp)
    cce8:	da802415 	stw	r10,144(sp)
    ccec:	03c001c4 	movi	r15,7
    ccf0:	da402515 	stw	r9,148(sp)
    ccf4:	db802815 	stw	r14,160(sp)
    ccf8:	1821883a 	mov	r16,r3
    ccfc:	00000506 	br	cd14 <___vfiprintf_internal_r+0x484>
    cd00:	31400084 	addi	r5,r6,2
    cd04:	42000204 	addi	r8,r8,8
    cd08:	200d883a 	mov	r6,r4
    cd0c:	843ffc04 	addi	r16,r16,-16
    cd10:	3c000d0e 	bge	r7,r16,cd48 <___vfiprintf_internal_r+0x4b8>
    cd14:	10800404 	addi	r2,r2,16
    cd18:	31000044 	addi	r4,r6,1
    cd1c:	45800015 	stw	r22,0(r8)
    cd20:	41c00115 	stw	r7,4(r8)
    cd24:	d8801c15 	stw	r2,112(sp)
    cd28:	d9001b15 	stw	r4,108(sp)
    cd2c:	793ff40e 	bge	r15,r4,cd00 <___vfiprintf_internal_r+0x470>
    cd30:	1001b51e 	bne	r2,zero,d408 <___vfiprintf_internal_r+0xb78>
    cd34:	843ffc04 	addi	r16,r16,-16
    cd38:	000d883a 	mov	r6,zero
    cd3c:	01400044 	movi	r5,1
    cd40:	d811883a 	mov	r8,sp
    cd44:	3c3ff316 	blt	r7,r16,cd14 <___vfiprintf_internal_r+0x484>
    cd48:	8007883a 	mov	r3,r16
    cd4c:	da402517 	ldw	r9,148(sp)
    cd50:	db802817 	ldw	r14,160(sp)
    cd54:	dc002917 	ldw	r16,164(sp)
    cd58:	da802417 	ldw	r10,144(sp)
    cd5c:	1885883a 	add	r2,r3,r2
    cd60:	40c00115 	stw	r3,4(r8)
    cd64:	42800015 	stw	r10,0(r8)
    cd68:	d8801c15 	stw	r2,112(sp)
    cd6c:	d9401b15 	stw	r5,108(sp)
    cd70:	00c001c4 	movi	r3,7
    cd74:	19426016 	blt	r3,r5,d6f8 <___vfiprintf_internal_r+0xe68>
    cd78:	d8c01d87 	ldb	r3,118(sp)
    cd7c:	42000204 	addi	r8,r8,8
    cd80:	29000044 	addi	r4,r5,1
    cd84:	1801b31e 	bne	r3,zero,d454 <___vfiprintf_internal_r+0xbc4>
    cd88:	7001c026 	beq	r14,zero,d48c <___vfiprintf_internal_r+0xbfc>
    cd8c:	d8c01d04 	addi	r3,sp,116
    cd90:	10800084 	addi	r2,r2,2
    cd94:	40c00015 	stw	r3,0(r8)
    cd98:	00c00084 	movi	r3,2
    cd9c:	40c00115 	stw	r3,4(r8)
    cda0:	d8801c15 	stw	r2,112(sp)
    cda4:	d9001b15 	stw	r4,108(sp)
    cda8:	00c001c4 	movi	r3,7
    cdac:	1902650e 	bge	r3,r4,d744 <___vfiprintf_internal_r+0xeb4>
    cdb0:	10029a1e 	bne	r2,zero,d81c <___vfiprintf_internal_r+0xf8c>
    cdb4:	00c02004 	movi	r3,128
    cdb8:	01000044 	movi	r4,1
    cdbc:	000b883a 	mov	r5,zero
    cdc0:	d811883a 	mov	r8,sp
    cdc4:	e0c1b31e 	bne	fp,r3,d494 <___vfiprintf_internal_r+0xc04>
    cdc8:	8cb9c83a 	sub	fp,r17,r18
    cdcc:	0701b10e 	bge	zero,fp,d494 <___vfiprintf_internal_r+0xc04>
    cdd0:	01c00404 	movi	r7,16
    cdd4:	3f03890e 	bge	r7,fp,dbfc <___vfiprintf_internal_r+0x136c>
    cdd8:	00c000b4 	movhi	r3,2
    cddc:	18fd7a04 	addi	r3,r3,-2584
    cde0:	d8c02415 	stw	r3,144(sp)
    cde4:	8007883a 	mov	r3,r16
    cde8:	034001c4 	movi	r13,7
    cdec:	e021883a 	mov	r16,fp
    cdf0:	da402515 	stw	r9,148(sp)
    cdf4:	1839883a 	mov	fp,r3
    cdf8:	00000506 	br	ce10 <___vfiprintf_internal_r+0x580>
    cdfc:	29800084 	addi	r6,r5,2
    ce00:	42000204 	addi	r8,r8,8
    ce04:	180b883a 	mov	r5,r3
    ce08:	843ffc04 	addi	r16,r16,-16
    ce0c:	3c000d0e 	bge	r7,r16,ce44 <___vfiprintf_internal_r+0x5b4>
    ce10:	10800404 	addi	r2,r2,16
    ce14:	28c00044 	addi	r3,r5,1
    ce18:	45c00015 	stw	r23,0(r8)
    ce1c:	41c00115 	stw	r7,4(r8)
    ce20:	d8801c15 	stw	r2,112(sp)
    ce24:	d8c01b15 	stw	r3,108(sp)
    ce28:	68fff40e 	bge	r13,r3,cdfc <___vfiprintf_internal_r+0x56c>
    ce2c:	1002241e 	bne	r2,zero,d6c0 <___vfiprintf_internal_r+0xe30>
    ce30:	843ffc04 	addi	r16,r16,-16
    ce34:	01800044 	movi	r6,1
    ce38:	000b883a 	mov	r5,zero
    ce3c:	d811883a 	mov	r8,sp
    ce40:	3c3ff316 	blt	r7,r16,ce10 <___vfiprintf_internal_r+0x580>
    ce44:	da402517 	ldw	r9,148(sp)
    ce48:	e007883a 	mov	r3,fp
    ce4c:	8039883a 	mov	fp,r16
    ce50:	1821883a 	mov	r16,r3
    ce54:	d8c02417 	ldw	r3,144(sp)
    ce58:	1705883a 	add	r2,r2,fp
    ce5c:	47000115 	stw	fp,4(r8)
    ce60:	40c00015 	stw	r3,0(r8)
    ce64:	d8801c15 	stw	r2,112(sp)
    ce68:	d9801b15 	stw	r6,108(sp)
    ce6c:	00c001c4 	movi	r3,7
    ce70:	19827616 	blt	r3,r6,d84c <___vfiprintf_internal_r+0xfbc>
    ce74:	4cf9c83a 	sub	fp,r9,r19
    ce78:	42000204 	addi	r8,r8,8
    ce7c:	31000044 	addi	r4,r6,1
    ce80:	300b883a 	mov	r5,r6
    ce84:	07018516 	blt	zero,fp,d49c <___vfiprintf_internal_r+0xc0c>
    ce88:	9885883a 	add	r2,r19,r2
    ce8c:	45400015 	stw	r21,0(r8)
    ce90:	44c00115 	stw	r19,4(r8)
    ce94:	d8801c15 	stw	r2,112(sp)
    ce98:	d9001b15 	stw	r4,108(sp)
    ce9c:	00c001c4 	movi	r3,7
    cea0:	1901dd0e 	bge	r3,r4,d618 <___vfiprintf_internal_r+0xd88>
    cea4:	1002401e 	bne	r2,zero,d7a8 <___vfiprintf_internal_r+0xf18>
    cea8:	d8001b15 	stw	zero,108(sp)
    ceac:	a2c0010c 	andi	r11,r20,4
    ceb0:	58000226 	beq	r11,zero,cebc <___vfiprintf_internal_r+0x62c>
    ceb4:	8ca7c83a 	sub	r19,r17,r18
    ceb8:	04c2f216 	blt	zero,r19,da84 <___vfiprintf_internal_r+0x11f4>
    cebc:	8c80010e 	bge	r17,r18,cec4 <___vfiprintf_internal_r+0x634>
    cec0:	9023883a 	mov	r17,r18
    cec4:	da802317 	ldw	r10,140(sp)
    cec8:	5455883a 	add	r10,r10,r17
    cecc:	da802315 	stw	r10,140(sp)
    ced0:	d8001b15 	stw	zero,108(sp)
    ced4:	d811883a 	mov	r8,sp
    ced8:	003ea206 	br	c964 <___vfiprintf_internal_r+0xd4>
    cedc:	a5000814 	ori	r20,r20,32
    cee0:	80c00007 	ldb	r3,0(r16)
    cee4:	003ec906 	br	ca0c <___vfiprintf_internal_r+0x17c>
    cee8:	80c00007 	ldb	r3,0(r16)
    ceec:	1b030926 	beq	r3,r12,db14 <___vfiprintf_internal_r+0x1284>
    cef0:	a5000414 	ori	r20,r20,16
    cef4:	003ec506 	br	ca0c <___vfiprintf_internal_r+0x17c>
    cef8:	21003fcc 	andi	r4,r4,255
    cefc:	20035e1e 	bne	r4,zero,dc78 <___vfiprintf_internal_r+0x13e8>
    cf00:	a080080c 	andi	r2,r20,32
    cf04:	1002a526 	beq	r2,zero,d99c <___vfiprintf_internal_r+0x110c>
    cf08:	da802217 	ldw	r10,136(sp)
    cf0c:	50800017 	ldw	r2,0(r10)
    cf10:	da802317 	ldw	r10,140(sp)
    cf14:	5007d7fa 	srai	r3,r10,31
    cf18:	da802217 	ldw	r10,136(sp)
    cf1c:	10c00115 	stw	r3,4(r2)
    cf20:	52800104 	addi	r10,r10,4
    cf24:	da802215 	stw	r10,136(sp)
    cf28:	da802317 	ldw	r10,140(sp)
    cf2c:	12800015 	stw	r10,0(r2)
    cf30:	003e8c06 	br	c964 <___vfiprintf_internal_r+0xd4>
    cf34:	21003fcc 	andi	r4,r4,255
    cf38:	2003511e 	bne	r4,zero,dc80 <___vfiprintf_internal_r+0x13f0>
    cf3c:	a080080c 	andi	r2,r20,32
    cf40:	1000a126 	beq	r2,zero,d1c8 <___vfiprintf_internal_r+0x938>
    cf44:	da802217 	ldw	r10,136(sp)
    cf48:	d8001d85 	stb	zero,118(sp)
    cf4c:	50800204 	addi	r2,r10,8
    cf50:	54800017 	ldw	r18,0(r10)
    cf54:	54c00117 	ldw	r19,4(r10)
    cf58:	4802b416 	blt	r9,zero,da2c <___vfiprintf_internal_r+0x119c>
    cf5c:	013fdfc4 	movi	r4,-129
    cf60:	94c6b03a 	or	r3,r18,r19
    cf64:	d8802215 	stw	r2,136(sp)
    cf68:	a128703a 	and	r20,r20,r4
    cf6c:	1800a226 	beq	r3,zero,d1f8 <___vfiprintf_internal_r+0x968>
    cf70:	0039883a 	mov	fp,zero
    cf74:	dd401a04 	addi	r21,sp,104
    cf78:	9006d0fa 	srli	r3,r18,3
    cf7c:	9808977a 	slli	r4,r19,29
    cf80:	9826d0fa 	srli	r19,r19,3
    cf84:	948001cc 	andi	r18,r18,7
    cf88:	90800c04 	addi	r2,r18,48
    cf8c:	ad7fffc4 	addi	r21,r21,-1
    cf90:	20e4b03a 	or	r18,r4,r3
    cf94:	a8800005 	stb	r2,0(r21)
    cf98:	94c6b03a 	or	r3,r18,r19
    cf9c:	183ff61e 	bne	r3,zero,cf78 <___vfiprintf_internal_r+0x6e8>
    cfa0:	a0c0004c 	andi	r3,r20,1
    cfa4:	18005926 	beq	r3,zero,d10c <___vfiprintf_internal_r+0x87c>
    cfa8:	10803fcc 	andi	r2,r2,255
    cfac:	1080201c 	xori	r2,r2,128
    cfb0:	10bfe004 	addi	r2,r2,-128
    cfb4:	00c00c04 	movi	r3,48
    cfb8:	10c05426 	beq	r2,r3,d10c <___vfiprintf_internal_r+0x87c>
    cfbc:	da801e17 	ldw	r10,120(sp)
    cfc0:	a8bfffc4 	addi	r2,r21,-1
    cfc4:	a8ffffc5 	stb	r3,-1(r21)
    cfc8:	50a7c83a 	sub	r19,r10,r2
    cfcc:	102b883a 	mov	r21,r2
    cfd0:	003f2f06 	br	cc90 <___vfiprintf_internal_r+0x400>
    cfd4:	21003fcc 	andi	r4,r4,255
    cfd8:	2003421e 	bne	r4,zero,dce4 <___vfiprintf_internal_r+0x1454>
    cfdc:	008000b4 	movhi	r2,2
    cfe0:	10bd0a04 	addi	r2,r2,-3032
    cfe4:	d8802615 	stw	r2,152(sp)
    cfe8:	a080080c 	andi	r2,r20,32
    cfec:	1000aa26 	beq	r2,zero,d298 <___vfiprintf_internal_r+0xa08>
    cff0:	da802217 	ldw	r10,136(sp)
    cff4:	54800017 	ldw	r18,0(r10)
    cff8:	54c00117 	ldw	r19,4(r10)
    cffc:	52800204 	addi	r10,r10,8
    d000:	da802215 	stw	r10,136(sp)
    d004:	a080004c 	andi	r2,r20,1
    d008:	1001d226 	beq	r2,zero,d754 <___vfiprintf_internal_r+0xec4>
    d00c:	94c4b03a 	or	r2,r18,r19
    d010:	1002351e 	bne	r2,zero,d8e8 <___vfiprintf_internal_r+0x1058>
    d014:	d8001d85 	stb	zero,118(sp)
    d018:	48022216 	blt	r9,zero,d8a4 <___vfiprintf_internal_r+0x1014>
    d01c:	00bfdfc4 	movi	r2,-129
    d020:	a0a8703a 	and	r20,r20,r2
    d024:	003f1506 	br	cc7c <___vfiprintf_internal_r+0x3ec>
    d028:	da802217 	ldw	r10,136(sp)
    d02c:	04800044 	movi	r18,1
    d030:	d8001d85 	stb	zero,118(sp)
    d034:	50800017 	ldw	r2,0(r10)
    d038:	52800104 	addi	r10,r10,4
    d03c:	da802215 	stw	r10,136(sp)
    d040:	d8801005 	stb	r2,64(sp)
    d044:	9027883a 	mov	r19,r18
    d048:	dd401004 	addi	r21,sp,64
    d04c:	0013883a 	mov	r9,zero
    d050:	003f1706 	br	ccb0 <___vfiprintf_internal_r+0x420>
    d054:	21003fcc 	andi	r4,r4,255
    d058:	2003201e 	bne	r4,zero,dcdc <___vfiprintf_internal_r+0x144c>
    d05c:	a080080c 	andi	r2,r20,32
    d060:	10004b26 	beq	r2,zero,d190 <___vfiprintf_internal_r+0x900>
    d064:	da802217 	ldw	r10,136(sp)
    d068:	50800117 	ldw	r2,4(r10)
    d06c:	54800017 	ldw	r18,0(r10)
    d070:	52800204 	addi	r10,r10,8
    d074:	da802215 	stw	r10,136(sp)
    d078:	1027883a 	mov	r19,r2
    d07c:	10022c16 	blt	r2,zero,d930 <___vfiprintf_internal_r+0x10a0>
    d080:	df001d83 	ldbu	fp,118(sp)
    d084:	48007216 	blt	r9,zero,d250 <___vfiprintf_internal_r+0x9c0>
    d088:	00ffdfc4 	movi	r3,-129
    d08c:	94c4b03a 	or	r2,r18,r19
    d090:	a0e8703a 	and	r20,r20,r3
    d094:	1000cc26 	beq	r2,zero,d3c8 <___vfiprintf_internal_r+0xb38>
    d098:	98021026 	beq	r19,zero,d8dc <___vfiprintf_internal_r+0x104c>
    d09c:	dc402415 	stw	r17,144(sp)
    d0a0:	dc002515 	stw	r16,148(sp)
    d0a4:	9823883a 	mov	r17,r19
    d0a8:	9021883a 	mov	r16,r18
    d0ac:	dd401a04 	addi	r21,sp,104
    d0b0:	4825883a 	mov	r18,r9
    d0b4:	4027883a 	mov	r19,r8
    d0b8:	8009883a 	mov	r4,r16
    d0bc:	880b883a 	mov	r5,r17
    d0c0:	01800284 	movi	r6,10
    d0c4:	000f883a 	mov	r7,zero
    d0c8:	000f7ec0 	call	f7ec <__umoddi3>
    d0cc:	10800c04 	addi	r2,r2,48
    d0d0:	ad7fffc4 	addi	r21,r21,-1
    d0d4:	8009883a 	mov	r4,r16
    d0d8:	880b883a 	mov	r5,r17
    d0dc:	a8800005 	stb	r2,0(r21)
    d0e0:	01800284 	movi	r6,10
    d0e4:	000f883a 	mov	r7,zero
    d0e8:	000f2740 	call	f274 <__udivdi3>
    d0ec:	1021883a 	mov	r16,r2
    d0f0:	10c4b03a 	or	r2,r2,r3
    d0f4:	1823883a 	mov	r17,r3
    d0f8:	103fef1e 	bne	r2,zero,d0b8 <___vfiprintf_internal_r+0x828>
    d0fc:	dc402417 	ldw	r17,144(sp)
    d100:	dc002517 	ldw	r16,148(sp)
    d104:	9013883a 	mov	r9,r18
    d108:	9811883a 	mov	r8,r19
    d10c:	da801e17 	ldw	r10,120(sp)
    d110:	5567c83a 	sub	r19,r10,r21
    d114:	003ede06 	br	cc90 <___vfiprintf_internal_r+0x400>
    d118:	38803fcc 	andi	r2,r7,255
    d11c:	1080201c 	xori	r2,r2,128
    d120:	10bfe004 	addi	r2,r2,-128
    d124:	1002371e 	bne	r2,zero,da04 <___vfiprintf_internal_r+0x1174>
    d128:	01000044 	movi	r4,1
    d12c:	01c00804 	movi	r7,32
    d130:	80c00007 	ldb	r3,0(r16)
    d134:	003e3506 	br	ca0c <___vfiprintf_internal_r+0x17c>
    d138:	a5000054 	ori	r20,r20,1
    d13c:	80c00007 	ldb	r3,0(r16)
    d140:	003e3206 	br	ca0c <___vfiprintf_internal_r+0x17c>
    d144:	a5002014 	ori	r20,r20,128
    d148:	80c00007 	ldb	r3,0(r16)
    d14c:	003e2f06 	br	ca0c <___vfiprintf_internal_r+0x17c>
    d150:	8015883a 	mov	r10,r16
    d154:	0023883a 	mov	r17,zero
    d158:	18bff404 	addi	r2,r3,-48
    d15c:	50c00007 	ldb	r3,0(r10)
    d160:	8c4002a4 	muli	r17,r17,10
    d164:	84000044 	addi	r16,r16,1
    d168:	8015883a 	mov	r10,r16
    d16c:	1463883a 	add	r17,r2,r17
    d170:	18bff404 	addi	r2,r3,-48
    d174:	30bff92e 	bgeu	r6,r2,d15c <___vfiprintf_internal_r+0x8cc>
    d178:	003e2506 	br	ca10 <___vfiprintf_internal_r+0x180>
    d17c:	21003fcc 	andi	r4,r4,255
    d180:	2002d41e 	bne	r4,zero,dcd4 <___vfiprintf_internal_r+0x1444>
    d184:	a5000414 	ori	r20,r20,16
    d188:	a080080c 	andi	r2,r20,32
    d18c:	103fb51e 	bne	r2,zero,d064 <___vfiprintf_internal_r+0x7d4>
    d190:	a080040c 	andi	r2,r20,16
    d194:	1001f826 	beq	r2,zero,d978 <___vfiprintf_internal_r+0x10e8>
    d198:	da802217 	ldw	r10,136(sp)
    d19c:	54800017 	ldw	r18,0(r10)
    d1a0:	52800104 	addi	r10,r10,4
    d1a4:	da802215 	stw	r10,136(sp)
    d1a8:	9027d7fa 	srai	r19,r18,31
    d1ac:	9805883a 	mov	r2,r19
    d1b0:	003fb206 	br	d07c <___vfiprintf_internal_r+0x7ec>
    d1b4:	21003fcc 	andi	r4,r4,255
    d1b8:	2002c41e 	bne	r4,zero,dccc <___vfiprintf_internal_r+0x143c>
    d1bc:	a5000414 	ori	r20,r20,16
    d1c0:	a080080c 	andi	r2,r20,32
    d1c4:	103f5f1e 	bne	r2,zero,cf44 <___vfiprintf_internal_r+0x6b4>
    d1c8:	a080040c 	andi	r2,r20,16
    d1cc:	10020f26 	beq	r2,zero,da0c <___vfiprintf_internal_r+0x117c>
    d1d0:	da802217 	ldw	r10,136(sp)
    d1d4:	d8001d85 	stb	zero,118(sp)
    d1d8:	0027883a 	mov	r19,zero
    d1dc:	50800104 	addi	r2,r10,4
    d1e0:	54800017 	ldw	r18,0(r10)
    d1e4:	48021116 	blt	r9,zero,da2c <___vfiprintf_internal_r+0x119c>
    d1e8:	00ffdfc4 	movi	r3,-129
    d1ec:	d8802215 	stw	r2,136(sp)
    d1f0:	a0e8703a 	and	r20,r20,r3
    d1f4:	903f5e1e 	bne	r18,zero,cf70 <___vfiprintf_internal_r+0x6e0>
    d1f8:	0039883a 	mov	fp,zero
    d1fc:	4802a626 	beq	r9,zero,dc98 <___vfiprintf_internal_r+0x1408>
    d200:	0025883a 	mov	r18,zero
    d204:	0027883a 	mov	r19,zero
    d208:	003f5a06 	br	cf74 <___vfiprintf_internal_r+0x6e4>
    d20c:	21003fcc 	andi	r4,r4,255
    d210:	20029f1e 	bne	r4,zero,dc90 <___vfiprintf_internal_r+0x1400>
    d214:	a5000414 	ori	r20,r20,16
    d218:	a080080c 	andi	r2,r20,32
    d21c:	10005e1e 	bne	r2,zero,d398 <___vfiprintf_internal_r+0xb08>
    d220:	a080040c 	andi	r2,r20,16
    d224:	1001a21e 	bne	r2,zero,d8b0 <___vfiprintf_internal_r+0x1020>
    d228:	a080100c 	andi	r2,r20,64
    d22c:	d8001d85 	stb	zero,118(sp)
    d230:	da802217 	ldw	r10,136(sp)
    d234:	1002231e 	bne	r2,zero,dac4 <___vfiprintf_internal_r+0x1234>
    d238:	50800104 	addi	r2,r10,4
    d23c:	54800017 	ldw	r18,0(r10)
    d240:	0027883a 	mov	r19,zero
    d244:	4801a00e 	bge	r9,zero,d8c8 <___vfiprintf_internal_r+0x1038>
    d248:	d8802215 	stw	r2,136(sp)
    d24c:	0039883a 	mov	fp,zero
    d250:	94c4b03a 	or	r2,r18,r19
    d254:	103f901e 	bne	r2,zero,d098 <___vfiprintf_internal_r+0x808>
    d258:	00800044 	movi	r2,1
    d25c:	10803fcc 	andi	r2,r2,255
    d260:	00c00044 	movi	r3,1
    d264:	10c05926 	beq	r2,r3,d3cc <___vfiprintf_internal_r+0xb3c>
    d268:	00c00084 	movi	r3,2
    d26c:	10ffe41e 	bne	r2,r3,d200 <___vfiprintf_internal_r+0x970>
    d270:	0025883a 	mov	r18,zero
    d274:	0027883a 	mov	r19,zero
    d278:	00013d06 	br	d770 <___vfiprintf_internal_r+0xee0>
    d27c:	21003fcc 	andi	r4,r4,255
    d280:	2002811e 	bne	r4,zero,dc88 <___vfiprintf_internal_r+0x13f8>
    d284:	008000b4 	movhi	r2,2
    d288:	10bd0504 	addi	r2,r2,-3052
    d28c:	d8802615 	stw	r2,152(sp)
    d290:	a080080c 	andi	r2,r20,32
    d294:	103f561e 	bne	r2,zero,cff0 <___vfiprintf_internal_r+0x760>
    d298:	a080040c 	andi	r2,r20,16
    d29c:	1001d126 	beq	r2,zero,d9e4 <___vfiprintf_internal_r+0x1154>
    d2a0:	da802217 	ldw	r10,136(sp)
    d2a4:	0027883a 	mov	r19,zero
    d2a8:	54800017 	ldw	r18,0(r10)
    d2ac:	52800104 	addi	r10,r10,4
    d2b0:	da802215 	stw	r10,136(sp)
    d2b4:	003f5306 	br	d004 <___vfiprintf_internal_r+0x774>
    d2b8:	da802217 	ldw	r10,136(sp)
    d2bc:	d8001d85 	stb	zero,118(sp)
    d2c0:	55400017 	ldw	r21,0(r10)
    d2c4:	50c00104 	addi	r3,r10,4
    d2c8:	a8024226 	beq	r21,zero,dbd4 <___vfiprintf_internal_r+0x1344>
    d2cc:	48021816 	blt	r9,zero,db30 <___vfiprintf_internal_r+0x12a0>
    d2d0:	480d883a 	mov	r6,r9
    d2d4:	000b883a 	mov	r5,zero
    d2d8:	a809883a 	mov	r4,r21
    d2dc:	d8c02a15 	stw	r3,168(sp)
    d2e0:	da002b15 	stw	r8,172(sp)
    d2e4:	da402c15 	stw	r9,176(sp)
    d2e8:	0009df00 	call	9df0 <memchr>
    d2ec:	d8c02a17 	ldw	r3,168(sp)
    d2f0:	da002b17 	ldw	r8,172(sp)
    d2f4:	da402c17 	ldw	r9,176(sp)
    d2f8:	10024826 	beq	r2,zero,dc1c <___vfiprintf_internal_r+0x138c>
    d2fc:	1567c83a 	sub	r19,r2,r21
    d300:	df001d83 	ldbu	fp,118(sp)
    d304:	d8c02215 	stw	r3,136(sp)
    d308:	0013883a 	mov	r9,zero
    d30c:	003e6006 	br	cc90 <___vfiprintf_internal_r+0x400>
    d310:	21003fcc 	andi	r4,r4,255
    d314:	203fc026 	beq	r4,zero,d218 <___vfiprintf_internal_r+0x988>
    d318:	d9c01d85 	stb	r7,118(sp)
    d31c:	003fbe06 	br	d218 <___vfiprintf_internal_r+0x988>
    d320:	da802217 	ldw	r10,136(sp)
    d324:	54400017 	ldw	r17,0(r10)
    d328:	50800104 	addi	r2,r10,4
    d32c:	883e3b16 	blt	r17,zero,cc1c <___vfiprintf_internal_r+0x38c>
    d330:	d8802215 	stw	r2,136(sp)
    d334:	80c00007 	ldb	r3,0(r16)
    d338:	003db406 	br	ca0c <___vfiprintf_internal_r+0x17c>
    d33c:	01000044 	movi	r4,1
    d340:	01c00ac4 	movi	r7,43
    d344:	80c00007 	ldb	r3,0(r16)
    d348:	003db006 	br	ca0c <___vfiprintf_internal_r+0x17c>
    d34c:	80c00007 	ldb	r3,0(r16)
    d350:	82800044 	addi	r10,r16,1
    d354:	1b423c26 	beq	r3,r13,dc48 <___vfiprintf_internal_r+0x13b8>
    d358:	18bff404 	addi	r2,r3,-48
    d35c:	0013883a 	mov	r9,zero
    d360:	30822b36 	bltu	r6,r2,dc10 <___vfiprintf_internal_r+0x1380>
    d364:	50c00007 	ldb	r3,0(r10)
    d368:	4a4002a4 	muli	r9,r9,10
    d36c:	54000044 	addi	r16,r10,1
    d370:	8015883a 	mov	r10,r16
    d374:	4893883a 	add	r9,r9,r2
    d378:	18bff404 	addi	r2,r3,-48
    d37c:	30bff92e 	bgeu	r6,r2,d364 <___vfiprintf_internal_r+0xad4>
    d380:	483da30e 	bge	r9,zero,ca10 <___vfiprintf_internal_r+0x180>
    d384:	027fffc4 	movi	r9,-1
    d388:	003da106 	br	ca10 <___vfiprintf_internal_r+0x180>
    d38c:	a5001014 	ori	r20,r20,64
    d390:	80c00007 	ldb	r3,0(r16)
    d394:	003d9d06 	br	ca0c <___vfiprintf_internal_r+0x17c>
    d398:	da802217 	ldw	r10,136(sp)
    d39c:	d8001d85 	stb	zero,118(sp)
    d3a0:	50c00204 	addi	r3,r10,8
    d3a4:	54800017 	ldw	r18,0(r10)
    d3a8:	54c00117 	ldw	r19,4(r10)
    d3ac:	4801ca16 	blt	r9,zero,dad8 <___vfiprintf_internal_r+0x1248>
    d3b0:	013fdfc4 	movi	r4,-129
    d3b4:	94c4b03a 	or	r2,r18,r19
    d3b8:	d8c02215 	stw	r3,136(sp)
    d3bc:	a128703a 	and	r20,r20,r4
    d3c0:	0039883a 	mov	fp,zero
    d3c4:	103f341e 	bne	r2,zero,d098 <___vfiprintf_internal_r+0x808>
    d3c8:	483e2e26 	beq	r9,zero,cc84 <___vfiprintf_internal_r+0x3f4>
    d3cc:	0025883a 	mov	r18,zero
    d3d0:	94800c04 	addi	r18,r18,48
    d3d4:	dc8019c5 	stb	r18,103(sp)
    d3d8:	dcc02717 	ldw	r19,156(sp)
    d3dc:	dd4019c4 	addi	r21,sp,103
    d3e0:	003e2b06 	br	cc90 <___vfiprintf_internal_r+0x400>
    d3e4:	21003fcc 	andi	r4,r4,255
    d3e8:	2002361e 	bne	r4,zero,dcc4 <___vfiprintf_internal_r+0x1434>
    d3ec:	1801c126 	beq	r3,zero,daf4 <___vfiprintf_internal_r+0x1264>
    d3f0:	04800044 	movi	r18,1
    d3f4:	d8c01005 	stb	r3,64(sp)
    d3f8:	d8001d85 	stb	zero,118(sp)
    d3fc:	9027883a 	mov	r19,r18
    d400:	dd401004 	addi	r21,sp,64
    d404:	003f1106 	br	d04c <___vfiprintf_internal_r+0x7bc>
    d408:	d9402117 	ldw	r5,132(sp)
    d40c:	d9002017 	ldw	r4,128(sp)
    d410:	d9801a04 	addi	r6,sp,104
    d414:	d9c02b15 	stw	r7,172(sp)
    d418:	dbc02a15 	stw	r15,168(sp)
    d41c:	000c77c0 	call	c77c <__sprint_r.part.0>
    d420:	d9c02b17 	ldw	r7,172(sp)
    d424:	dbc02a17 	ldw	r15,168(sp)
    d428:	10006d1e 	bne	r2,zero,d5e0 <___vfiprintf_internal_r+0xd50>
    d42c:	d9801b17 	ldw	r6,108(sp)
    d430:	d8801c17 	ldw	r2,112(sp)
    d434:	d811883a 	mov	r8,sp
    d438:	31400044 	addi	r5,r6,1
    d43c:	003e3306 	br	cd0c <___vfiprintf_internal_r+0x47c>
    d440:	d9401b17 	ldw	r5,108(sp)
    d444:	d8801c17 	ldw	r2,112(sp)
    d448:	29000044 	addi	r4,r5,1
    d44c:	d8c01d87 	ldb	r3,118(sp)
    d450:	183e4d26 	beq	r3,zero,cd88 <___vfiprintf_internal_r+0x4f8>
    d454:	00c00044 	movi	r3,1
    d458:	d9401d84 	addi	r5,sp,118
    d45c:	10c5883a 	add	r2,r2,r3
    d460:	41400015 	stw	r5,0(r8)
    d464:	40c00115 	stw	r3,4(r8)
    d468:	d8801c15 	stw	r2,112(sp)
    d46c:	d9001b15 	stw	r4,108(sp)
    d470:	014001c4 	movi	r5,7
    d474:	2900a90e 	bge	r5,r4,d71c <___vfiprintf_internal_r+0xe8c>
    d478:	1000da1e 	bne	r2,zero,d7e4 <___vfiprintf_internal_r+0xf54>
    d47c:	7000ab1e 	bne	r14,zero,d72c <___vfiprintf_internal_r+0xe9c>
    d480:	000b883a 	mov	r5,zero
    d484:	1809883a 	mov	r4,r3
    d488:	d811883a 	mov	r8,sp
    d48c:	00c02004 	movi	r3,128
    d490:	e0fe4d26 	beq	fp,r3,cdc8 <___vfiprintf_internal_r+0x538>
    d494:	4cf9c83a 	sub	fp,r9,r19
    d498:	073e7b0e 	bge	zero,fp,ce88 <___vfiprintf_internal_r+0x5f8>
    d49c:	01c00404 	movi	r7,16
    d4a0:	3f01900e 	bge	r7,fp,dae4 <___vfiprintf_internal_r+0x1254>
    d4a4:	00c000b4 	movhi	r3,2
    d4a8:	18fd7a04 	addi	r3,r3,-2584
    d4ac:	d8c02415 	stw	r3,144(sp)
    d4b0:	034001c4 	movi	r13,7
    d4b4:	00000506 	br	d4cc <___vfiprintf_internal_r+0xc3c>
    d4b8:	29000084 	addi	r4,r5,2
    d4bc:	42000204 	addi	r8,r8,8
    d4c0:	180b883a 	mov	r5,r3
    d4c4:	e73ffc04 	addi	fp,fp,-16
    d4c8:	3f000d0e 	bge	r7,fp,d500 <___vfiprintf_internal_r+0xc70>
    d4cc:	10800404 	addi	r2,r2,16
    d4d0:	28c00044 	addi	r3,r5,1
    d4d4:	45c00015 	stw	r23,0(r8)
    d4d8:	41c00115 	stw	r7,4(r8)
    d4dc:	d8801c15 	stw	r2,112(sp)
    d4e0:	d8c01b15 	stw	r3,108(sp)
    d4e4:	68fff40e 	bge	r13,r3,d4b8 <___vfiprintf_internal_r+0xc28>
    d4e8:	1000101e 	bne	r2,zero,d52c <___vfiprintf_internal_r+0xc9c>
    d4ec:	e73ffc04 	addi	fp,fp,-16
    d4f0:	01000044 	movi	r4,1
    d4f4:	000b883a 	mov	r5,zero
    d4f8:	d811883a 	mov	r8,sp
    d4fc:	3f3ff316 	blt	r7,fp,d4cc <___vfiprintf_internal_r+0xc3c>
    d500:	da802417 	ldw	r10,144(sp)
    d504:	1705883a 	add	r2,r2,fp
    d508:	47000115 	stw	fp,4(r8)
    d50c:	42800015 	stw	r10,0(r8)
    d510:	d8801c15 	stw	r2,112(sp)
    d514:	d9001b15 	stw	r4,108(sp)
    d518:	00c001c4 	movi	r3,7
    d51c:	19003616 	blt	r3,r4,d5f8 <___vfiprintf_internal_r+0xd68>
    d520:	42000204 	addi	r8,r8,8
    d524:	21000044 	addi	r4,r4,1
    d528:	003e5706 	br	ce88 <___vfiprintf_internal_r+0x5f8>
    d52c:	d9402117 	ldw	r5,132(sp)
    d530:	d9002017 	ldw	r4,128(sp)
    d534:	d9801a04 	addi	r6,sp,104
    d538:	d9c02b15 	stw	r7,172(sp)
    d53c:	db402a15 	stw	r13,168(sp)
    d540:	000c77c0 	call	c77c <__sprint_r.part.0>
    d544:	d9c02b17 	ldw	r7,172(sp)
    d548:	db402a17 	ldw	r13,168(sp)
    d54c:	1000241e 	bne	r2,zero,d5e0 <___vfiprintf_internal_r+0xd50>
    d550:	d9401b17 	ldw	r5,108(sp)
    d554:	d8801c17 	ldw	r2,112(sp)
    d558:	d811883a 	mov	r8,sp
    d55c:	29000044 	addi	r4,r5,1
    d560:	003fd806 	br	d4c4 <___vfiprintf_internal_r+0xc34>
    d564:	d9401b17 	ldw	r5,108(sp)
    d568:	00c000b4 	movhi	r3,2
    d56c:	18fd7e04 	addi	r3,r3,-2568
    d570:	d8c02415 	stw	r3,144(sp)
    d574:	29400044 	addi	r5,r5,1
    d578:	d8c02417 	ldw	r3,144(sp)
    d57c:	14c5883a 	add	r2,r2,r19
    d580:	44c00115 	stw	r19,4(r8)
    d584:	40c00015 	stw	r3,0(r8)
    d588:	d8801c15 	stw	r2,112(sp)
    d58c:	d9401b15 	stw	r5,108(sp)
    d590:	00c001c4 	movi	r3,7
    d594:	1940070e 	bge	r3,r5,d5b4 <___vfiprintf_internal_r+0xd24>
    d598:	103e4826 	beq	r2,zero,cebc <___vfiprintf_internal_r+0x62c>
    d59c:	d9402117 	ldw	r5,132(sp)
    d5a0:	d9002017 	ldw	r4,128(sp)
    d5a4:	d9801a04 	addi	r6,sp,104
    d5a8:	000c77c0 	call	c77c <__sprint_r.part.0>
    d5ac:	10000c1e 	bne	r2,zero,d5e0 <___vfiprintf_internal_r+0xd50>
    d5b0:	d8801c17 	ldw	r2,112(sp)
    d5b4:	8c80010e 	bge	r17,r18,d5bc <___vfiprintf_internal_r+0xd2c>
    d5b8:	9023883a 	mov	r17,r18
    d5bc:	da802317 	ldw	r10,140(sp)
    d5c0:	5455883a 	add	r10,r10,r17
    d5c4:	da802315 	stw	r10,140(sp)
    d5c8:	103e4126 	beq	r2,zero,ced0 <___vfiprintf_internal_r+0x640>
    d5cc:	d9402117 	ldw	r5,132(sp)
    d5d0:	d9002017 	ldw	r4,128(sp)
    d5d4:	d9801a04 	addi	r6,sp,104
    d5d8:	000c77c0 	call	c77c <__sprint_r.part.0>
    d5dc:	103e3c26 	beq	r2,zero,ced0 <___vfiprintf_internal_r+0x640>
    d5e0:	dd002117 	ldw	r20,132(sp)
    d5e4:	a080030b 	ldhu	r2,12(r20)
    d5e8:	1080100c 	andi	r2,r2,64
    d5ec:	1001231e 	bne	r2,zero,da7c <___vfiprintf_internal_r+0x11ec>
    d5f0:	d8802317 	ldw	r2,140(sp)
    d5f4:	003d7b06 	br	cbe4 <___vfiprintf_internal_r+0x354>
    d5f8:	1000991e 	bne	r2,zero,d860 <___vfiprintf_internal_r+0xfd0>
    d5fc:	00c00044 	movi	r3,1
    d600:	9805883a 	mov	r2,r19
    d604:	dd400015 	stw	r21,0(sp)
    d608:	dcc00115 	stw	r19,4(sp)
    d60c:	dcc01c15 	stw	r19,112(sp)
    d610:	d8c01b15 	stw	r3,108(sp)
    d614:	d811883a 	mov	r8,sp
    d618:	42000204 	addi	r8,r8,8
    d61c:	a2c0010c 	andi	r11,r20,4
    d620:	583fe426 	beq	r11,zero,d5b4 <___vfiprintf_internal_r+0xd24>
    d624:	8ca7c83a 	sub	r19,r17,r18
    d628:	04ffe20e 	bge	zero,r19,d5b4 <___vfiprintf_internal_r+0xd24>
    d62c:	01c00404 	movi	r7,16
    d630:	3cffcc0e 	bge	r7,r19,d564 <___vfiprintf_internal_r+0xcd4>
    d634:	028000b4 	movhi	r10,2
    d638:	52bd7e04 	addi	r10,r10,-2568
    d63c:	d9001b17 	ldw	r4,108(sp)
    d640:	da802415 	stw	r10,144(sp)
    d644:	382b883a 	mov	r21,r7
    d648:	050001c4 	movi	r20,7
    d64c:	df002017 	ldw	fp,128(sp)
    d650:	00000506 	br	d668 <___vfiprintf_internal_r+0xdd8>
    d654:	21400084 	addi	r5,r4,2
    d658:	42000204 	addi	r8,r8,8
    d65c:	1809883a 	mov	r4,r3
    d660:	9cfffc04 	addi	r19,r19,-16
    d664:	acffc40e 	bge	r21,r19,d578 <___vfiprintf_internal_r+0xce8>
    d668:	10800404 	addi	r2,r2,16
    d66c:	20c00044 	addi	r3,r4,1
    d670:	45800015 	stw	r22,0(r8)
    d674:	45400115 	stw	r21,4(r8)
    d678:	d8801c15 	stw	r2,112(sp)
    d67c:	d8c01b15 	stw	r3,108(sp)
    d680:	a0fff40e 	bge	r20,r3,d654 <___vfiprintf_internal_r+0xdc4>
    d684:	1000041e 	bne	r2,zero,d698 <___vfiprintf_internal_r+0xe08>
    d688:	01400044 	movi	r5,1
    d68c:	0009883a 	mov	r4,zero
    d690:	d811883a 	mov	r8,sp
    d694:	003ff206 	br	d660 <___vfiprintf_internal_r+0xdd0>
    d698:	d9402117 	ldw	r5,132(sp)
    d69c:	d9801a04 	addi	r6,sp,104
    d6a0:	e009883a 	mov	r4,fp
    d6a4:	000c77c0 	call	c77c <__sprint_r.part.0>
    d6a8:	103fcd1e 	bne	r2,zero,d5e0 <___vfiprintf_internal_r+0xd50>
    d6ac:	d9001b17 	ldw	r4,108(sp)
    d6b0:	d8801c17 	ldw	r2,112(sp)
    d6b4:	d811883a 	mov	r8,sp
    d6b8:	21400044 	addi	r5,r4,1
    d6bc:	003fe806 	br	d660 <___vfiprintf_internal_r+0xdd0>
    d6c0:	d9402117 	ldw	r5,132(sp)
    d6c4:	d9002017 	ldw	r4,128(sp)
    d6c8:	d9801a04 	addi	r6,sp,104
    d6cc:	d9c02b15 	stw	r7,172(sp)
    d6d0:	db402a15 	stw	r13,168(sp)
    d6d4:	000c77c0 	call	c77c <__sprint_r.part.0>
    d6d8:	d9c02b17 	ldw	r7,172(sp)
    d6dc:	db402a17 	ldw	r13,168(sp)
    d6e0:	103fbf1e 	bne	r2,zero,d5e0 <___vfiprintf_internal_r+0xd50>
    d6e4:	d9401b17 	ldw	r5,108(sp)
    d6e8:	d8801c17 	ldw	r2,112(sp)
    d6ec:	d811883a 	mov	r8,sp
    d6f0:	29800044 	addi	r6,r5,1
    d6f4:	003dc406 	br	ce08 <___vfiprintf_internal_r+0x578>
    d6f8:	1000d21e 	bne	r2,zero,da44 <___vfiprintf_internal_r+0x11b4>
    d6fc:	d8c01d87 	ldb	r3,118(sp)
    d700:	18009526 	beq	r3,zero,d958 <___vfiprintf_internal_r+0x10c8>
    d704:	00800044 	movi	r2,1
    d708:	d8c01d84 	addi	r3,sp,118
    d70c:	1009883a 	mov	r4,r2
    d710:	d8c00015 	stw	r3,0(sp)
    d714:	d8800115 	stw	r2,4(sp)
    d718:	d811883a 	mov	r8,sp
    d71c:	200b883a 	mov	r5,r4
    d720:	42000204 	addi	r8,r8,8
    d724:	21000044 	addi	r4,r4,1
    d728:	003d9706 	br	cd88 <___vfiprintf_internal_r+0x4f8>
    d72c:	d9001d04 	addi	r4,sp,116
    d730:	00800084 	movi	r2,2
    d734:	d9000015 	stw	r4,0(sp)
    d738:	d8800115 	stw	r2,4(sp)
    d73c:	1809883a 	mov	r4,r3
    d740:	d811883a 	mov	r8,sp
    d744:	200b883a 	mov	r5,r4
    d748:	42000204 	addi	r8,r8,8
    d74c:	21000044 	addi	r4,r4,1
    d750:	003f4e06 	br	d48c <___vfiprintf_internal_r+0xbfc>
    d754:	d8001d85 	stb	zero,118(sp)
    d758:	48005016 	blt	r9,zero,d89c <___vfiprintf_internal_r+0x100c>
    d75c:	00ffdfc4 	movi	r3,-129
    d760:	94c4b03a 	or	r2,r18,r19
    d764:	a0e8703a 	and	r20,r20,r3
    d768:	103d4426 	beq	r2,zero,cc7c <___vfiprintf_internal_r+0x3ec>
    d76c:	0039883a 	mov	fp,zero
    d770:	d9002617 	ldw	r4,152(sp)
    d774:	dd401a04 	addi	r21,sp,104
    d778:	908003cc 	andi	r2,r18,15
    d77c:	9806973a 	slli	r3,r19,28
    d780:	2085883a 	add	r2,r4,r2
    d784:	9024d13a 	srli	r18,r18,4
    d788:	10800003 	ldbu	r2,0(r2)
    d78c:	9826d13a 	srli	r19,r19,4
    d790:	ad7fffc4 	addi	r21,r21,-1
    d794:	1ca4b03a 	or	r18,r3,r18
    d798:	a8800005 	stb	r2,0(r21)
    d79c:	94c4b03a 	or	r2,r18,r19
    d7a0:	103ff51e 	bne	r2,zero,d778 <___vfiprintf_internal_r+0xee8>
    d7a4:	003e5906 	br	d10c <___vfiprintf_internal_r+0x87c>
    d7a8:	d9402117 	ldw	r5,132(sp)
    d7ac:	d9002017 	ldw	r4,128(sp)
    d7b0:	d9801a04 	addi	r6,sp,104
    d7b4:	000c77c0 	call	c77c <__sprint_r.part.0>
    d7b8:	103f891e 	bne	r2,zero,d5e0 <___vfiprintf_internal_r+0xd50>
    d7bc:	d8801c17 	ldw	r2,112(sp)
    d7c0:	d811883a 	mov	r8,sp
    d7c4:	003f9506 	br	d61c <___vfiprintf_internal_r+0xd8c>
    d7c8:	d9402117 	ldw	r5,132(sp)
    d7cc:	d9002017 	ldw	r4,128(sp)
    d7d0:	d9801a04 	addi	r6,sp,104
    d7d4:	000c77c0 	call	c77c <__sprint_r.part.0>
    d7d8:	103f811e 	bne	r2,zero,d5e0 <___vfiprintf_internal_r+0xd50>
    d7dc:	d811883a 	mov	r8,sp
    d7e0:	003ced06 	br	cb98 <___vfiprintf_internal_r+0x308>
    d7e4:	d9402117 	ldw	r5,132(sp)
    d7e8:	d9002017 	ldw	r4,128(sp)
    d7ec:	d9801a04 	addi	r6,sp,104
    d7f0:	da402c15 	stw	r9,176(sp)
    d7f4:	db802a15 	stw	r14,168(sp)
    d7f8:	000c77c0 	call	c77c <__sprint_r.part.0>
    d7fc:	da402c17 	ldw	r9,176(sp)
    d800:	db802a17 	ldw	r14,168(sp)
    d804:	103f761e 	bne	r2,zero,d5e0 <___vfiprintf_internal_r+0xd50>
    d808:	d9401b17 	ldw	r5,108(sp)
    d80c:	d8801c17 	ldw	r2,112(sp)
    d810:	d811883a 	mov	r8,sp
    d814:	29000044 	addi	r4,r5,1
    d818:	003d5b06 	br	cd88 <___vfiprintf_internal_r+0x4f8>
    d81c:	d9402117 	ldw	r5,132(sp)
    d820:	d9002017 	ldw	r4,128(sp)
    d824:	d9801a04 	addi	r6,sp,104
    d828:	da402c15 	stw	r9,176(sp)
    d82c:	000c77c0 	call	c77c <__sprint_r.part.0>
    d830:	da402c17 	ldw	r9,176(sp)
    d834:	103f6a1e 	bne	r2,zero,d5e0 <___vfiprintf_internal_r+0xd50>
    d838:	d9401b17 	ldw	r5,108(sp)
    d83c:	d8801c17 	ldw	r2,112(sp)
    d840:	d811883a 	mov	r8,sp
    d844:	29000044 	addi	r4,r5,1
    d848:	003f1006 	br	d48c <___vfiprintf_internal_r+0xbfc>
    d84c:	1000c31e 	bne	r2,zero,db5c <___vfiprintf_internal_r+0x12cc>
    d850:	01000044 	movi	r4,1
    d854:	000b883a 	mov	r5,zero
    d858:	d811883a 	mov	r8,sp
    d85c:	003f0d06 	br	d494 <___vfiprintf_internal_r+0xc04>
    d860:	d9402117 	ldw	r5,132(sp)
    d864:	d9002017 	ldw	r4,128(sp)
    d868:	d9801a04 	addi	r6,sp,104
    d86c:	000c77c0 	call	c77c <__sprint_r.part.0>
    d870:	103f5b1e 	bne	r2,zero,d5e0 <___vfiprintf_internal_r+0xd50>
    d874:	d9001b17 	ldw	r4,108(sp)
    d878:	d8801c17 	ldw	r2,112(sp)
    d87c:	d811883a 	mov	r8,sp
    d880:	21000044 	addi	r4,r4,1
    d884:	003d8006 	br	ce88 <___vfiprintf_internal_r+0x5f8>
    d888:	010000b4 	movhi	r4,2
    d88c:	213d0a04 	addi	r4,r4,-3032
    d890:	d9002615 	stw	r4,152(sp)
    d894:	d8c02215 	stw	r3,136(sp)
    d898:	1029883a 	mov	r20,r2
    d89c:	94c4b03a 	or	r2,r18,r19
    d8a0:	103fb21e 	bne	r2,zero,d76c <___vfiprintf_internal_r+0xedc>
    d8a4:	0039883a 	mov	fp,zero
    d8a8:	00800084 	movi	r2,2
    d8ac:	003e6b06 	br	d25c <___vfiprintf_internal_r+0x9cc>
    d8b0:	da802217 	ldw	r10,136(sp)
    d8b4:	d8001d85 	stb	zero,118(sp)
    d8b8:	0027883a 	mov	r19,zero
    d8bc:	50800104 	addi	r2,r10,4
    d8c0:	54800017 	ldw	r18,0(r10)
    d8c4:	483e6016 	blt	r9,zero,d248 <___vfiprintf_internal_r+0x9b8>
    d8c8:	00ffdfc4 	movi	r3,-129
    d8cc:	d8802215 	stw	r2,136(sp)
    d8d0:	a0e8703a 	and	r20,r20,r3
    d8d4:	0039883a 	mov	fp,zero
    d8d8:	903ebb26 	beq	r18,zero,d3c8 <___vfiprintf_internal_r+0xb38>
    d8dc:	00800244 	movi	r2,9
    d8e0:	14bdee36 	bltu	r2,r18,d09c <___vfiprintf_internal_r+0x80c>
    d8e4:	003eba06 	br	d3d0 <___vfiprintf_internal_r+0xb40>
    d8e8:	00800c04 	movi	r2,48
    d8ec:	d8c01d45 	stb	r3,117(sp)
    d8f0:	d8801d05 	stb	r2,116(sp)
    d8f4:	d8001d85 	stb	zero,118(sp)
    d8f8:	a0c00094 	ori	r3,r20,2
    d8fc:	4800a916 	blt	r9,zero,dba4 <___vfiprintf_internal_r+0x1314>
    d900:	00bfdfc4 	movi	r2,-129
    d904:	a096703a 	and	r11,r20,r2
    d908:	5d000094 	ori	r20,r11,2
    d90c:	0039883a 	mov	fp,zero
    d910:	003f9706 	br	d770 <___vfiprintf_internal_r+0xee0>
    d914:	8025883a 	mov	r18,r16
    d918:	003c2e06 	br	c9d4 <___vfiprintf_internal_r+0x144>
    d91c:	008000b4 	movhi	r2,2
    d920:	10bd0a04 	addi	r2,r2,-3032
    d924:	0039883a 	mov	fp,zero
    d928:	d8802615 	stw	r2,152(sp)
    d92c:	003f9006 	br	d770 <___vfiprintf_internal_r+0xee0>
    d930:	04a5c83a 	sub	r18,zero,r18
    d934:	07000b44 	movi	fp,45
    d938:	9004c03a 	cmpne	r2,r18,zero
    d93c:	04e7c83a 	sub	r19,zero,r19
    d940:	df001d85 	stb	fp,118(sp)
    d944:	98a7c83a 	sub	r19,r19,r2
    d948:	48009f16 	blt	r9,zero,dbc8 <___vfiprintf_internal_r+0x1338>
    d94c:	00bfdfc4 	movi	r2,-129
    d950:	a0a8703a 	and	r20,r20,r2
    d954:	003dd006 	br	d098 <___vfiprintf_internal_r+0x808>
    d958:	70004c26 	beq	r14,zero,da8c <___vfiprintf_internal_r+0x11fc>
    d95c:	00800084 	movi	r2,2
    d960:	d8c01d04 	addi	r3,sp,116
    d964:	d8c00015 	stw	r3,0(sp)
    d968:	d8800115 	stw	r2,4(sp)
    d96c:	01000044 	movi	r4,1
    d970:	d811883a 	mov	r8,sp
    d974:	003f7306 	br	d744 <___vfiprintf_internal_r+0xeb4>
    d978:	a080100c 	andi	r2,r20,64
    d97c:	da802217 	ldw	r10,136(sp)
    d980:	103e0626 	beq	r2,zero,d19c <___vfiprintf_internal_r+0x90c>
    d984:	5480000f 	ldh	r18,0(r10)
    d988:	52800104 	addi	r10,r10,4
    d98c:	da802215 	stw	r10,136(sp)
    d990:	9027d7fa 	srai	r19,r18,31
    d994:	9805883a 	mov	r2,r19
    d998:	003db806 	br	d07c <___vfiprintf_internal_r+0x7ec>
    d99c:	a080040c 	andi	r2,r20,16
    d9a0:	1000091e 	bne	r2,zero,d9c8 <___vfiprintf_internal_r+0x1138>
    d9a4:	a2c0100c 	andi	r11,r20,64
    d9a8:	58000726 	beq	r11,zero,d9c8 <___vfiprintf_internal_r+0x1138>
    d9ac:	da802217 	ldw	r10,136(sp)
    d9b0:	50800017 	ldw	r2,0(r10)
    d9b4:	52800104 	addi	r10,r10,4
    d9b8:	da802215 	stw	r10,136(sp)
    d9bc:	da802317 	ldw	r10,140(sp)
    d9c0:	1280000d 	sth	r10,0(r2)
    d9c4:	003be706 	br	c964 <___vfiprintf_internal_r+0xd4>
    d9c8:	da802217 	ldw	r10,136(sp)
    d9cc:	50800017 	ldw	r2,0(r10)
    d9d0:	52800104 	addi	r10,r10,4
    d9d4:	da802215 	stw	r10,136(sp)
    d9d8:	da802317 	ldw	r10,140(sp)
    d9dc:	12800015 	stw	r10,0(r2)
    d9e0:	003be006 	br	c964 <___vfiprintf_internal_r+0xd4>
    d9e4:	a080100c 	andi	r2,r20,64
    d9e8:	da802217 	ldw	r10,136(sp)
    d9ec:	10003026 	beq	r2,zero,dab0 <___vfiprintf_internal_r+0x1220>
    d9f0:	5480000b 	ldhu	r18,0(r10)
    d9f4:	52800104 	addi	r10,r10,4
    d9f8:	0027883a 	mov	r19,zero
    d9fc:	da802215 	stw	r10,136(sp)
    da00:	003d8006 	br	d004 <___vfiprintf_internal_r+0x774>
    da04:	80c00007 	ldb	r3,0(r16)
    da08:	003c0006 	br	ca0c <___vfiprintf_internal_r+0x17c>
    da0c:	a080100c 	andi	r2,r20,64
    da10:	d8001d85 	stb	zero,118(sp)
    da14:	da802217 	ldw	r10,136(sp)
    da18:	1000201e 	bne	r2,zero,da9c <___vfiprintf_internal_r+0x120c>
    da1c:	50800104 	addi	r2,r10,4
    da20:	54800017 	ldw	r18,0(r10)
    da24:	0027883a 	mov	r19,zero
    da28:	483def0e 	bge	r9,zero,d1e8 <___vfiprintf_internal_r+0x958>
    da2c:	94c6b03a 	or	r3,r18,r19
    da30:	d8802215 	stw	r2,136(sp)
    da34:	183d4e1e 	bne	r3,zero,cf70 <___vfiprintf_internal_r+0x6e0>
    da38:	0039883a 	mov	fp,zero
    da3c:	0005883a 	mov	r2,zero
    da40:	003e0606 	br	d25c <___vfiprintf_internal_r+0x9cc>
    da44:	d9402117 	ldw	r5,132(sp)
    da48:	d9002017 	ldw	r4,128(sp)
    da4c:	d9801a04 	addi	r6,sp,104
    da50:	da402c15 	stw	r9,176(sp)
    da54:	db802a15 	stw	r14,168(sp)
    da58:	000c77c0 	call	c77c <__sprint_r.part.0>
    da5c:	da402c17 	ldw	r9,176(sp)
    da60:	db802a17 	ldw	r14,168(sp)
    da64:	103ede1e 	bne	r2,zero,d5e0 <___vfiprintf_internal_r+0xd50>
    da68:	d9401b17 	ldw	r5,108(sp)
    da6c:	d8801c17 	ldw	r2,112(sp)
    da70:	d811883a 	mov	r8,sp
    da74:	29000044 	addi	r4,r5,1
    da78:	003e7406 	br	d44c <___vfiprintf_internal_r+0xbbc>
    da7c:	00bfffc4 	movi	r2,-1
    da80:	003c5806 	br	cbe4 <___vfiprintf_internal_r+0x354>
    da84:	d811883a 	mov	r8,sp
    da88:	003ee806 	br	d62c <___vfiprintf_internal_r+0xd9c>
    da8c:	000b883a 	mov	r5,zero
    da90:	01000044 	movi	r4,1
    da94:	d811883a 	mov	r8,sp
    da98:	003e7c06 	br	d48c <___vfiprintf_internal_r+0xbfc>
    da9c:	50800104 	addi	r2,r10,4
    daa0:	5480000b 	ldhu	r18,0(r10)
    daa4:	0027883a 	mov	r19,zero
    daa8:	483dcf0e 	bge	r9,zero,d1e8 <___vfiprintf_internal_r+0x958>
    daac:	003fdf06 	br	da2c <___vfiprintf_internal_r+0x119c>
    dab0:	54800017 	ldw	r18,0(r10)
    dab4:	52800104 	addi	r10,r10,4
    dab8:	0027883a 	mov	r19,zero
    dabc:	da802215 	stw	r10,136(sp)
    dac0:	003d5006 	br	d004 <___vfiprintf_internal_r+0x774>
    dac4:	50800104 	addi	r2,r10,4
    dac8:	5480000b 	ldhu	r18,0(r10)
    dacc:	0027883a 	mov	r19,zero
    dad0:	483f7d0e 	bge	r9,zero,d8c8 <___vfiprintf_internal_r+0x1038>
    dad4:	003ddc06 	br	d248 <___vfiprintf_internal_r+0x9b8>
    dad8:	d8c02215 	stw	r3,136(sp)
    dadc:	0039883a 	mov	fp,zero
    dae0:	003ddb06 	br	d250 <___vfiprintf_internal_r+0x9c0>
    dae4:	028000b4 	movhi	r10,2
    dae8:	52bd7a04 	addi	r10,r10,-2584
    daec:	da802415 	stw	r10,144(sp)
    daf0:	003e8306 	br	d500 <___vfiprintf_internal_r+0xc70>
    daf4:	d8801c17 	ldw	r2,112(sp)
    daf8:	dd002117 	ldw	r20,132(sp)
    dafc:	103eb926 	beq	r2,zero,d5e4 <___vfiprintf_internal_r+0xd54>
    db00:	d9002017 	ldw	r4,128(sp)
    db04:	d9801a04 	addi	r6,sp,104
    db08:	a00b883a 	mov	r5,r20
    db0c:	000c77c0 	call	c77c <__sprint_r.part.0>
    db10:	003eb406 	br	d5e4 <___vfiprintf_internal_r+0xd54>
    db14:	80c00043 	ldbu	r3,1(r16)
    db18:	a5000814 	ori	r20,r20,32
    db1c:	84000044 	addi	r16,r16,1
    db20:	18c03fcc 	andi	r3,r3,255
    db24:	18c0201c 	xori	r3,r3,128
    db28:	18ffe004 	addi	r3,r3,-128
    db2c:	003bb706 	br	ca0c <___vfiprintf_internal_r+0x17c>
    db30:	a809883a 	mov	r4,r21
    db34:	d8c02a15 	stw	r3,168(sp)
    db38:	da002b15 	stw	r8,172(sp)
    db3c:	000b2d80 	call	b2d8 <strlen>
    db40:	d8c02a17 	ldw	r3,168(sp)
    db44:	1027883a 	mov	r19,r2
    db48:	df001d83 	ldbu	fp,118(sp)
    db4c:	d8c02215 	stw	r3,136(sp)
    db50:	0013883a 	mov	r9,zero
    db54:	da002b17 	ldw	r8,172(sp)
    db58:	003c4d06 	br	cc90 <___vfiprintf_internal_r+0x400>
    db5c:	d9402117 	ldw	r5,132(sp)
    db60:	d9002017 	ldw	r4,128(sp)
    db64:	d9801a04 	addi	r6,sp,104
    db68:	da402c15 	stw	r9,176(sp)
    db6c:	000c77c0 	call	c77c <__sprint_r.part.0>
    db70:	da402c17 	ldw	r9,176(sp)
    db74:	103e9a1e 	bne	r2,zero,d5e0 <___vfiprintf_internal_r+0xd50>
    db78:	d9401b17 	ldw	r5,108(sp)
    db7c:	d8801c17 	ldw	r2,112(sp)
    db80:	d811883a 	mov	r8,sp
    db84:	29000044 	addi	r4,r5,1
    db88:	003e4206 	br	d494 <___vfiprintf_internal_r+0xc04>
    db8c:	d9401b17 	ldw	r5,108(sp)
    db90:	010000b4 	movhi	r4,2
    db94:	213d7e04 	addi	r4,r4,-2568
    db98:	d9002415 	stw	r4,144(sp)
    db9c:	29400044 	addi	r5,r5,1
    dba0:	003c6d06 	br	cd58 <___vfiprintf_internal_r+0x4c8>
    dba4:	0039883a 	mov	fp,zero
    dba8:	00800084 	movi	r2,2
    dbac:	10803fcc 	andi	r2,r2,255
    dbb0:	01000044 	movi	r4,1
    dbb4:	11001e26 	beq	r2,r4,dc30 <___vfiprintf_internal_r+0x13a0>
    dbb8:	01000084 	movi	r4,2
    dbbc:	11001e1e 	bne	r2,r4,dc38 <___vfiprintf_internal_r+0x13a8>
    dbc0:	1829883a 	mov	r20,r3
    dbc4:	003eea06 	br	d770 <___vfiprintf_internal_r+0xee0>
    dbc8:	a007883a 	mov	r3,r20
    dbcc:	00800044 	movi	r2,1
    dbd0:	003ff606 	br	dbac <___vfiprintf_internal_r+0x131c>
    dbd4:	00800184 	movi	r2,6
    dbd8:	1240012e 	bgeu	r2,r9,dbe0 <___vfiprintf_internal_r+0x1350>
    dbdc:	1013883a 	mov	r9,r2
    dbe0:	4827883a 	mov	r19,r9
    dbe4:	4825883a 	mov	r18,r9
    dbe8:	48001516 	blt	r9,zero,dc40 <___vfiprintf_internal_r+0x13b0>
    dbec:	054000b4 	movhi	r21,2
    dbf0:	d8c02215 	stw	r3,136(sp)
    dbf4:	ad7d0f04 	addi	r21,r21,-3012
    dbf8:	003d1406 	br	d04c <___vfiprintf_internal_r+0x7bc>
    dbfc:	028000b4 	movhi	r10,2
    dc00:	52bd7a04 	addi	r10,r10,-2584
    dc04:	da802415 	stw	r10,144(sp)
    dc08:	200d883a 	mov	r6,r4
    dc0c:	003c9106 	br	ce54 <___vfiprintf_internal_r+0x5c4>
    dc10:	5021883a 	mov	r16,r10
    dc14:	0013883a 	mov	r9,zero
    dc18:	003b7d06 	br	ca10 <___vfiprintf_internal_r+0x180>
    dc1c:	4827883a 	mov	r19,r9
    dc20:	df001d83 	ldbu	fp,118(sp)
    dc24:	d8c02215 	stw	r3,136(sp)
    dc28:	0013883a 	mov	r9,zero
    dc2c:	003c1806 	br	cc90 <___vfiprintf_internal_r+0x400>
    dc30:	1829883a 	mov	r20,r3
    dc34:	003d1806 	br	d098 <___vfiprintf_internal_r+0x808>
    dc38:	1829883a 	mov	r20,r3
    dc3c:	003ccd06 	br	cf74 <___vfiprintf_internal_r+0x6e4>
    dc40:	0025883a 	mov	r18,zero
    dc44:	003fe906 	br	dbec <___vfiprintf_internal_r+0x135c>
    dc48:	d8802217 	ldw	r2,136(sp)
    dc4c:	80c00043 	ldbu	r3,1(r16)
    dc50:	5021883a 	mov	r16,r10
    dc54:	12400017 	ldw	r9,0(r2)
    dc58:	10800104 	addi	r2,r2,4
    dc5c:	d8802215 	stw	r2,136(sp)
    dc60:	483faf0e 	bge	r9,zero,db20 <___vfiprintf_internal_r+0x1290>
    dc64:	18c03fcc 	andi	r3,r3,255
    dc68:	18c0201c 	xori	r3,r3,128
    dc6c:	027fffc4 	movi	r9,-1
    dc70:	18ffe004 	addi	r3,r3,-128
    dc74:	003b6506 	br	ca0c <___vfiprintf_internal_r+0x17c>
    dc78:	d9c01d85 	stb	r7,118(sp)
    dc7c:	003ca006 	br	cf00 <___vfiprintf_internal_r+0x670>
    dc80:	d9c01d85 	stb	r7,118(sp)
    dc84:	003cad06 	br	cf3c <___vfiprintf_internal_r+0x6ac>
    dc88:	d9c01d85 	stb	r7,118(sp)
    dc8c:	003d7d06 	br	d284 <___vfiprintf_internal_r+0x9f4>
    dc90:	d9c01d85 	stb	r7,118(sp)
    dc94:	003d5f06 	br	d214 <___vfiprintf_internal_r+0x984>
    dc98:	a080004c 	andi	r2,r20,1
    dc9c:	0039883a 	mov	fp,zero
    dca0:	10000526 	beq	r2,zero,dcb8 <___vfiprintf_internal_r+0x1428>
    dca4:	00800c04 	movi	r2,48
    dca8:	d88019c5 	stb	r2,103(sp)
    dcac:	dcc02717 	ldw	r19,156(sp)
    dcb0:	dd4019c4 	addi	r21,sp,103
    dcb4:	003bf606 	br	cc90 <___vfiprintf_internal_r+0x400>
    dcb8:	0027883a 	mov	r19,zero
    dcbc:	dd401a04 	addi	r21,sp,104
    dcc0:	003bf306 	br	cc90 <___vfiprintf_internal_r+0x400>
    dcc4:	d9c01d85 	stb	r7,118(sp)
    dcc8:	003dc806 	br	d3ec <___vfiprintf_internal_r+0xb5c>
    dccc:	d9c01d85 	stb	r7,118(sp)
    dcd0:	003d3a06 	br	d1bc <___vfiprintf_internal_r+0x92c>
    dcd4:	d9c01d85 	stb	r7,118(sp)
    dcd8:	003d2a06 	br	d184 <___vfiprintf_internal_r+0x8f4>
    dcdc:	d9c01d85 	stb	r7,118(sp)
    dce0:	003cde06 	br	d05c <___vfiprintf_internal_r+0x7cc>
    dce4:	d9c01d85 	stb	r7,118(sp)
    dce8:	003cbc06 	br	cfdc <___vfiprintf_internal_r+0x74c>

0000dcec <__vfiprintf_internal>:
    dcec:	008000b4 	movhi	r2,2
    dcf0:	1085ef04 	addi	r2,r2,6076
    dcf4:	300f883a 	mov	r7,r6
    dcf8:	280d883a 	mov	r6,r5
    dcfc:	200b883a 	mov	r5,r4
    dd00:	11000017 	ldw	r4,0(r2)
    dd04:	000c8901 	jmpi	c890 <___vfiprintf_internal_r>

0000dd08 <__sbprintf>:
    dd08:	2880030b 	ldhu	r2,12(r5)
    dd0c:	2ac01917 	ldw	r11,100(r5)
    dd10:	2a80038b 	ldhu	r10,14(r5)
    dd14:	2a400717 	ldw	r9,28(r5)
    dd18:	2a000917 	ldw	r8,36(r5)
    dd1c:	defee204 	addi	sp,sp,-1144
    dd20:	00c10004 	movi	r3,1024
    dd24:	dc011a15 	stw	r16,1128(sp)
    dd28:	10bfff4c 	andi	r2,r2,65533
    dd2c:	2821883a 	mov	r16,r5
    dd30:	d8cb883a 	add	r5,sp,r3
    dd34:	dc811c15 	stw	r18,1136(sp)
    dd38:	dc411b15 	stw	r17,1132(sp)
    dd3c:	dfc11d15 	stw	ra,1140(sp)
    dd40:	2025883a 	mov	r18,r4
    dd44:	d881030d 	sth	r2,1036(sp)
    dd48:	dac11915 	stw	r11,1124(sp)
    dd4c:	da81038d 	sth	r10,1038(sp)
    dd50:	da410715 	stw	r9,1052(sp)
    dd54:	da010915 	stw	r8,1060(sp)
    dd58:	dec10015 	stw	sp,1024(sp)
    dd5c:	dec10415 	stw	sp,1040(sp)
    dd60:	d8c10215 	stw	r3,1032(sp)
    dd64:	d8c10515 	stw	r3,1044(sp)
    dd68:	d8010615 	stw	zero,1048(sp)
    dd6c:	000c8900 	call	c890 <___vfiprintf_internal_r>
    dd70:	1023883a 	mov	r17,r2
    dd74:	10000416 	blt	r2,zero,dd88 <__sbprintf+0x80>
    dd78:	d9410004 	addi	r5,sp,1024
    dd7c:	9009883a 	mov	r4,r18
    dd80:	00089640 	call	8964 <_fflush_r>
    dd84:	10000d1e 	bne	r2,zero,ddbc <__sbprintf+0xb4>
    dd88:	d881030b 	ldhu	r2,1036(sp)
    dd8c:	1080100c 	andi	r2,r2,64
    dd90:	10000326 	beq	r2,zero,dda0 <__sbprintf+0x98>
    dd94:	8080030b 	ldhu	r2,12(r16)
    dd98:	10801014 	ori	r2,r2,64
    dd9c:	8080030d 	sth	r2,12(r16)
    dda0:	8805883a 	mov	r2,r17
    dda4:	dfc11d17 	ldw	ra,1140(sp)
    dda8:	dc811c17 	ldw	r18,1136(sp)
    ddac:	dc411b17 	ldw	r17,1132(sp)
    ddb0:	dc011a17 	ldw	r16,1128(sp)
    ddb4:	dec11e04 	addi	sp,sp,1144
    ddb8:	f800283a 	ret
    ddbc:	047fffc4 	movi	r17,-1
    ddc0:	003ff106 	br	dd88 <__sbprintf+0x80>

0000ddc4 <_write_r>:
    ddc4:	defffd04 	addi	sp,sp,-12
    ddc8:	2805883a 	mov	r2,r5
    ddcc:	dc000015 	stw	r16,0(sp)
    ddd0:	040000b4 	movhi	r16,2
    ddd4:	dc400115 	stw	r17,4(sp)
    ddd8:	300b883a 	mov	r5,r6
    dddc:	840df404 	addi	r16,r16,14288
    dde0:	2023883a 	mov	r17,r4
    dde4:	380d883a 	mov	r6,r7
    dde8:	1009883a 	mov	r4,r2
    ddec:	dfc00215 	stw	ra,8(sp)
    ddf0:	80000015 	stw	zero,0(r16)
    ddf4:	0012d840 	call	12d84 <write>
    ddf8:	00ffffc4 	movi	r3,-1
    ddfc:	10c00526 	beq	r2,r3,de14 <_write_r+0x50>
    de00:	dfc00217 	ldw	ra,8(sp)
    de04:	dc400117 	ldw	r17,4(sp)
    de08:	dc000017 	ldw	r16,0(sp)
    de0c:	dec00304 	addi	sp,sp,12
    de10:	f800283a 	ret
    de14:	80c00017 	ldw	r3,0(r16)
    de18:	183ff926 	beq	r3,zero,de00 <_write_r+0x3c>
    de1c:	88c00015 	stw	r3,0(r17)
    de20:	003ff706 	br	de00 <_write_r+0x3c>

0000de24 <_close_r>:
    de24:	defffd04 	addi	sp,sp,-12
    de28:	dc000015 	stw	r16,0(sp)
    de2c:	040000b4 	movhi	r16,2
    de30:	dc400115 	stw	r17,4(sp)
    de34:	840df404 	addi	r16,r16,14288
    de38:	2023883a 	mov	r17,r4
    de3c:	2809883a 	mov	r4,r5
    de40:	dfc00215 	stw	ra,8(sp)
    de44:	80000015 	stw	zero,0(r16)
    de48:	001257c0 	call	1257c <close>
    de4c:	00ffffc4 	movi	r3,-1
    de50:	10c00526 	beq	r2,r3,de68 <_close_r+0x44>
    de54:	dfc00217 	ldw	ra,8(sp)
    de58:	dc400117 	ldw	r17,4(sp)
    de5c:	dc000017 	ldw	r16,0(sp)
    de60:	dec00304 	addi	sp,sp,12
    de64:	f800283a 	ret
    de68:	80c00017 	ldw	r3,0(r16)
    de6c:	183ff926 	beq	r3,zero,de54 <_close_r+0x30>
    de70:	88c00015 	stw	r3,0(r17)
    de74:	003ff706 	br	de54 <_close_r+0x30>

0000de78 <_calloc_r>:
    de78:	298b383a 	mul	r5,r5,r6
    de7c:	defffe04 	addi	sp,sp,-8
    de80:	dfc00115 	stw	ra,4(sp)
    de84:	dc000015 	stw	r16,0(sp)
    de88:	00095e40 	call	95e4 <_malloc_r>
    de8c:	10002926 	beq	r2,zero,df34 <_calloc_r+0xbc>
    de90:	11bfff17 	ldw	r6,-4(r2)
    de94:	1021883a 	mov	r16,r2
    de98:	00bfff04 	movi	r2,-4
    de9c:	308c703a 	and	r6,r6,r2
    dea0:	00c00904 	movi	r3,36
    dea4:	308d883a 	add	r6,r6,r2
    dea8:	19801636 	bltu	r3,r6,df04 <_calloc_r+0x8c>
    deac:	008004c4 	movi	r2,19
    deb0:	11800b2e 	bgeu	r2,r6,dee0 <_calloc_r+0x68>
    deb4:	80000015 	stw	zero,0(r16)
    deb8:	80000115 	stw	zero,4(r16)
    debc:	008006c4 	movi	r2,27
    dec0:	11801a2e 	bgeu	r2,r6,df2c <_calloc_r+0xb4>
    dec4:	80000215 	stw	zero,8(r16)
    dec8:	80000315 	stw	zero,12(r16)
    decc:	30c0151e 	bne	r6,r3,df24 <_calloc_r+0xac>
    ded0:	80000415 	stw	zero,16(r16)
    ded4:	80800604 	addi	r2,r16,24
    ded8:	80000515 	stw	zero,20(r16)
    dedc:	00000106 	br	dee4 <_calloc_r+0x6c>
    dee0:	8005883a 	mov	r2,r16
    dee4:	10000015 	stw	zero,0(r2)
    dee8:	10000115 	stw	zero,4(r2)
    deec:	10000215 	stw	zero,8(r2)
    def0:	8005883a 	mov	r2,r16
    def4:	dfc00117 	ldw	ra,4(sp)
    def8:	dc000017 	ldw	r16,0(sp)
    defc:	dec00204 	addi	sp,sp,8
    df00:	f800283a 	ret
    df04:	000b883a 	mov	r5,zero
    df08:	8009883a 	mov	r4,r16
    df0c:	0009ed40 	call	9ed4 <memset>
    df10:	8005883a 	mov	r2,r16
    df14:	dfc00117 	ldw	ra,4(sp)
    df18:	dc000017 	ldw	r16,0(sp)
    df1c:	dec00204 	addi	sp,sp,8
    df20:	f800283a 	ret
    df24:	80800404 	addi	r2,r16,16
    df28:	003fee06 	br	dee4 <_calloc_r+0x6c>
    df2c:	80800204 	addi	r2,r16,8
    df30:	003fec06 	br	dee4 <_calloc_r+0x6c>
    df34:	0005883a 	mov	r2,zero
    df38:	003fee06 	br	def4 <_calloc_r+0x7c>

0000df3c <_fclose_r>:
    df3c:	28003926 	beq	r5,zero,e024 <_fclose_r+0xe8>
    df40:	defffc04 	addi	sp,sp,-16
    df44:	dc400115 	stw	r17,4(sp)
    df48:	dc000015 	stw	r16,0(sp)
    df4c:	dfc00315 	stw	ra,12(sp)
    df50:	dc800215 	stw	r18,8(sp)
    df54:	2023883a 	mov	r17,r4
    df58:	2821883a 	mov	r16,r5
    df5c:	20000226 	beq	r4,zero,df68 <_fclose_r+0x2c>
    df60:	20800e17 	ldw	r2,56(r4)
    df64:	10002726 	beq	r2,zero,e004 <_fclose_r+0xc8>
    df68:	8080030f 	ldh	r2,12(r16)
    df6c:	1000071e 	bne	r2,zero,df8c <_fclose_r+0x50>
    df70:	0005883a 	mov	r2,zero
    df74:	dfc00317 	ldw	ra,12(sp)
    df78:	dc800217 	ldw	r18,8(sp)
    df7c:	dc400117 	ldw	r17,4(sp)
    df80:	dc000017 	ldw	r16,0(sp)
    df84:	dec00404 	addi	sp,sp,16
    df88:	f800283a 	ret
    df8c:	800b883a 	mov	r5,r16
    df90:	8809883a 	mov	r4,r17
    df94:	00087480 	call	8748 <__sflush_r>
    df98:	1025883a 	mov	r18,r2
    df9c:	80800b17 	ldw	r2,44(r16)
    dfa0:	10000426 	beq	r2,zero,dfb4 <_fclose_r+0x78>
    dfa4:	81400717 	ldw	r5,28(r16)
    dfa8:	8809883a 	mov	r4,r17
    dfac:	103ee83a 	callr	r2
    dfb0:	10001616 	blt	r2,zero,e00c <_fclose_r+0xd0>
    dfb4:	8080030b 	ldhu	r2,12(r16)
    dfb8:	1080200c 	andi	r2,r2,128
    dfbc:	1000151e 	bne	r2,zero,e014 <_fclose_r+0xd8>
    dfc0:	81400c17 	ldw	r5,48(r16)
    dfc4:	28000526 	beq	r5,zero,dfdc <_fclose_r+0xa0>
    dfc8:	80801004 	addi	r2,r16,64
    dfcc:	28800226 	beq	r5,r2,dfd8 <_fclose_r+0x9c>
    dfd0:	8809883a 	mov	r4,r17
    dfd4:	0008eb40 	call	8eb4 <_free_r>
    dfd8:	80000c15 	stw	zero,48(r16)
    dfdc:	81401117 	ldw	r5,68(r16)
    dfe0:	28000326 	beq	r5,zero,dff0 <_fclose_r+0xb4>
    dfe4:	8809883a 	mov	r4,r17
    dfe8:	0008eb40 	call	8eb4 <_free_r>
    dfec:	80001115 	stw	zero,68(r16)
    dff0:	0008d500 	call	8d50 <__sfp_lock_acquire>
    dff4:	8000030d 	sth	zero,12(r16)
    dff8:	0008d540 	call	8d54 <__sfp_lock_release>
    dffc:	9005883a 	mov	r2,r18
    e000:	003fdc06 	br	df74 <_fclose_r+0x38>
    e004:	0008d400 	call	8d40 <__sinit>
    e008:	003fd706 	br	df68 <_fclose_r+0x2c>
    e00c:	04bfffc4 	movi	r18,-1
    e010:	003fe806 	br	dfb4 <_fclose_r+0x78>
    e014:	81400417 	ldw	r5,16(r16)
    e018:	8809883a 	mov	r4,r17
    e01c:	0008eb40 	call	8eb4 <_free_r>
    e020:	003fe706 	br	dfc0 <_fclose_r+0x84>
    e024:	0005883a 	mov	r2,zero
    e028:	f800283a 	ret

0000e02c <fclose>:
    e02c:	008000b4 	movhi	r2,2
    e030:	1085ef04 	addi	r2,r2,6076
    e034:	200b883a 	mov	r5,r4
    e038:	11000017 	ldw	r4,0(r2)
    e03c:	000df3c1 	jmpi	df3c <_fclose_r>

0000e040 <__fputwc>:
    e040:	defff804 	addi	sp,sp,-32
    e044:	dcc00415 	stw	r19,16(sp)
    e048:	dc800315 	stw	r18,12(sp)
    e04c:	dc000115 	stw	r16,4(sp)
    e050:	dfc00715 	stw	ra,28(sp)
    e054:	dd400615 	stw	r21,24(sp)
    e058:	dd000515 	stw	r20,20(sp)
    e05c:	dc400215 	stw	r17,8(sp)
    e060:	2027883a 	mov	r19,r4
    e064:	2825883a 	mov	r18,r5
    e068:	3021883a 	mov	r16,r6
    e06c:	00093d40 	call	93d4 <__locale_mb_cur_max>
    e070:	00c00044 	movi	r3,1
    e074:	10c03e26 	beq	r2,r3,e170 <__fputwc+0x130>
    e078:	81c01704 	addi	r7,r16,92
    e07c:	900d883a 	mov	r6,r18
    e080:	d80b883a 	mov	r5,sp
    e084:	9809883a 	mov	r4,r19
    e088:	000f08c0 	call	f08c <_wcrtomb_r>
    e08c:	1029883a 	mov	r20,r2
    e090:	00bfffc4 	movi	r2,-1
    e094:	a0802026 	beq	r20,r2,e118 <__fputwc+0xd8>
    e098:	d9400003 	ldbu	r5,0(sp)
    e09c:	a0001c26 	beq	r20,zero,e110 <__fputwc+0xd0>
    e0a0:	0023883a 	mov	r17,zero
    e0a4:	05400284 	movi	r21,10
    e0a8:	00000906 	br	e0d0 <__fputwc+0x90>
    e0ac:	80800017 	ldw	r2,0(r16)
    e0b0:	11400005 	stb	r5,0(r2)
    e0b4:	80c00017 	ldw	r3,0(r16)
    e0b8:	18c00044 	addi	r3,r3,1
    e0bc:	80c00015 	stw	r3,0(r16)
    e0c0:	8c400044 	addi	r17,r17,1
    e0c4:	dc45883a 	add	r2,sp,r17
    e0c8:	8d00112e 	bgeu	r17,r20,e110 <__fputwc+0xd0>
    e0cc:	11400003 	ldbu	r5,0(r2)
    e0d0:	80c00217 	ldw	r3,8(r16)
    e0d4:	18ffffc4 	addi	r3,r3,-1
    e0d8:	80c00215 	stw	r3,8(r16)
    e0dc:	183ff30e 	bge	r3,zero,e0ac <__fputwc+0x6c>
    e0e0:	80800617 	ldw	r2,24(r16)
    e0e4:	18801916 	blt	r3,r2,e14c <__fputwc+0x10c>
    e0e8:	80800017 	ldw	r2,0(r16)
    e0ec:	11400005 	stb	r5,0(r2)
    e0f0:	80800017 	ldw	r2,0(r16)
    e0f4:	10c00003 	ldbu	r3,0(r2)
    e0f8:	10800044 	addi	r2,r2,1
    e0fc:	1d402326 	beq	r3,r21,e18c <__fputwc+0x14c>
    e100:	80800015 	stw	r2,0(r16)
    e104:	8c400044 	addi	r17,r17,1
    e108:	dc45883a 	add	r2,sp,r17
    e10c:	8d3fef36 	bltu	r17,r20,e0cc <__fputwc+0x8c>
    e110:	9005883a 	mov	r2,r18
    e114:	00000406 	br	e128 <__fputwc+0xe8>
    e118:	80c0030b 	ldhu	r3,12(r16)
    e11c:	a005883a 	mov	r2,r20
    e120:	18c01014 	ori	r3,r3,64
    e124:	80c0030d 	sth	r3,12(r16)
    e128:	dfc00717 	ldw	ra,28(sp)
    e12c:	dd400617 	ldw	r21,24(sp)
    e130:	dd000517 	ldw	r20,20(sp)
    e134:	dcc00417 	ldw	r19,16(sp)
    e138:	dc800317 	ldw	r18,12(sp)
    e13c:	dc400217 	ldw	r17,8(sp)
    e140:	dc000117 	ldw	r16,4(sp)
    e144:	dec00804 	addi	sp,sp,32
    e148:	f800283a 	ret
    e14c:	800d883a 	mov	r6,r16
    e150:	29403fcc 	andi	r5,r5,255
    e154:	9809883a 	mov	r4,r19
    e158:	000ef340 	call	ef34 <__swbuf_r>
    e15c:	10bfffe0 	cmpeqi	r2,r2,-1
    e160:	10803fcc 	andi	r2,r2,255
    e164:	103fd626 	beq	r2,zero,e0c0 <__fputwc+0x80>
    e168:	00bfffc4 	movi	r2,-1
    e16c:	003fee06 	br	e128 <__fputwc+0xe8>
    e170:	90ffffc4 	addi	r3,r18,-1
    e174:	01003f84 	movi	r4,254
    e178:	20ffbf36 	bltu	r4,r3,e078 <__fputwc+0x38>
    e17c:	900b883a 	mov	r5,r18
    e180:	dc800005 	stb	r18,0(sp)
    e184:	1029883a 	mov	r20,r2
    e188:	003fc506 	br	e0a0 <__fputwc+0x60>
    e18c:	800d883a 	mov	r6,r16
    e190:	a80b883a 	mov	r5,r21
    e194:	9809883a 	mov	r4,r19
    e198:	000ef340 	call	ef34 <__swbuf_r>
    e19c:	10bfffe0 	cmpeqi	r2,r2,-1
    e1a0:	003fef06 	br	e160 <__fputwc+0x120>

0000e1a4 <_fputwc_r>:
    e1a4:	3080030b 	ldhu	r2,12(r6)
    e1a8:	10c8000c 	andi	r3,r2,8192
    e1ac:	1800051e 	bne	r3,zero,e1c4 <_fputwc_r+0x20>
    e1b0:	30c01917 	ldw	r3,100(r6)
    e1b4:	10880014 	ori	r2,r2,8192
    e1b8:	3080030d 	sth	r2,12(r6)
    e1bc:	18880014 	ori	r2,r3,8192
    e1c0:	30801915 	stw	r2,100(r6)
    e1c4:	000e0401 	jmpi	e040 <__fputwc>

0000e1c8 <fputwc>:
    e1c8:	008000b4 	movhi	r2,2
    e1cc:	defffc04 	addi	sp,sp,-16
    e1d0:	1085ef04 	addi	r2,r2,6076
    e1d4:	dc000115 	stw	r16,4(sp)
    e1d8:	14000017 	ldw	r16,0(r2)
    e1dc:	dc400215 	stw	r17,8(sp)
    e1e0:	dfc00315 	stw	ra,12(sp)
    e1e4:	2023883a 	mov	r17,r4
    e1e8:	80000226 	beq	r16,zero,e1f4 <fputwc+0x2c>
    e1ec:	80800e17 	ldw	r2,56(r16)
    e1f0:	10001026 	beq	r2,zero,e234 <fputwc+0x6c>
    e1f4:	2880030b 	ldhu	r2,12(r5)
    e1f8:	10c8000c 	andi	r3,r2,8192
    e1fc:	1800051e 	bne	r3,zero,e214 <fputwc+0x4c>
    e200:	28c01917 	ldw	r3,100(r5)
    e204:	10880014 	ori	r2,r2,8192
    e208:	2880030d 	sth	r2,12(r5)
    e20c:	18880014 	ori	r2,r3,8192
    e210:	28801915 	stw	r2,100(r5)
    e214:	280d883a 	mov	r6,r5
    e218:	8009883a 	mov	r4,r16
    e21c:	880b883a 	mov	r5,r17
    e220:	dfc00317 	ldw	ra,12(sp)
    e224:	dc400217 	ldw	r17,8(sp)
    e228:	dc000117 	ldw	r16,4(sp)
    e22c:	dec00404 	addi	sp,sp,16
    e230:	000e0401 	jmpi	e040 <__fputwc>
    e234:	8009883a 	mov	r4,r16
    e238:	d9400015 	stw	r5,0(sp)
    e23c:	0008d400 	call	8d40 <__sinit>
    e240:	d9400017 	ldw	r5,0(sp)
    e244:	003feb06 	br	e1f4 <fputwc+0x2c>

0000e248 <_fstat_r>:
    e248:	defffd04 	addi	sp,sp,-12
    e24c:	2805883a 	mov	r2,r5
    e250:	dc000015 	stw	r16,0(sp)
    e254:	040000b4 	movhi	r16,2
    e258:	dc400115 	stw	r17,4(sp)
    e25c:	840df404 	addi	r16,r16,14288
    e260:	2023883a 	mov	r17,r4
    e264:	300b883a 	mov	r5,r6
    e268:	1009883a 	mov	r4,r2
    e26c:	dfc00215 	stw	ra,8(sp)
    e270:	80000015 	stw	zero,0(r16)
    e274:	00126b40 	call	126b4 <fstat>
    e278:	00ffffc4 	movi	r3,-1
    e27c:	10c00526 	beq	r2,r3,e294 <_fstat_r+0x4c>
    e280:	dfc00217 	ldw	ra,8(sp)
    e284:	dc400117 	ldw	r17,4(sp)
    e288:	dc000017 	ldw	r16,0(sp)
    e28c:	dec00304 	addi	sp,sp,12
    e290:	f800283a 	ret
    e294:	80c00017 	ldw	r3,0(r16)
    e298:	183ff926 	beq	r3,zero,e280 <_fstat_r+0x38>
    e29c:	88c00015 	stw	r3,0(r17)
    e2a0:	003ff706 	br	e280 <_fstat_r+0x38>

0000e2a4 <__sfvwrite_r>:
    e2a4:	30800217 	ldw	r2,8(r6)
    e2a8:	10006726 	beq	r2,zero,e448 <__sfvwrite_r+0x1a4>
    e2ac:	28c0030b 	ldhu	r3,12(r5)
    e2b0:	defff404 	addi	sp,sp,-48
    e2b4:	dd400715 	stw	r21,28(sp)
    e2b8:	dd000615 	stw	r20,24(sp)
    e2bc:	dc000215 	stw	r16,8(sp)
    e2c0:	dfc00b15 	stw	ra,44(sp)
    e2c4:	df000a15 	stw	fp,40(sp)
    e2c8:	ddc00915 	stw	r23,36(sp)
    e2cc:	dd800815 	stw	r22,32(sp)
    e2d0:	dcc00515 	stw	r19,20(sp)
    e2d4:	dc800415 	stw	r18,16(sp)
    e2d8:	dc400315 	stw	r17,12(sp)
    e2dc:	1880020c 	andi	r2,r3,8
    e2e0:	2821883a 	mov	r16,r5
    e2e4:	202b883a 	mov	r21,r4
    e2e8:	3029883a 	mov	r20,r6
    e2ec:	10002726 	beq	r2,zero,e38c <__sfvwrite_r+0xe8>
    e2f0:	28800417 	ldw	r2,16(r5)
    e2f4:	10002526 	beq	r2,zero,e38c <__sfvwrite_r+0xe8>
    e2f8:	1880008c 	andi	r2,r3,2
    e2fc:	a4400017 	ldw	r17,0(r20)
    e300:	10002a26 	beq	r2,zero,e3ac <__sfvwrite_r+0x108>
    e304:	05a00034 	movhi	r22,32768
    e308:	0027883a 	mov	r19,zero
    e30c:	0025883a 	mov	r18,zero
    e310:	b5bf0004 	addi	r22,r22,-1024
    e314:	980d883a 	mov	r6,r19
    e318:	a809883a 	mov	r4,r21
    e31c:	90004626 	beq	r18,zero,e438 <__sfvwrite_r+0x194>
    e320:	900f883a 	mov	r7,r18
    e324:	b480022e 	bgeu	r22,r18,e330 <__sfvwrite_r+0x8c>
    e328:	01e00034 	movhi	r7,32768
    e32c:	39ff0004 	addi	r7,r7,-1024
    e330:	80800917 	ldw	r2,36(r16)
    e334:	81400717 	ldw	r5,28(r16)
    e338:	103ee83a 	callr	r2
    e33c:	0080570e 	bge	zero,r2,e49c <__sfvwrite_r+0x1f8>
    e340:	a0c00217 	ldw	r3,8(r20)
    e344:	98a7883a 	add	r19,r19,r2
    e348:	90a5c83a 	sub	r18,r18,r2
    e34c:	1885c83a 	sub	r2,r3,r2
    e350:	a0800215 	stw	r2,8(r20)
    e354:	103fef1e 	bne	r2,zero,e314 <__sfvwrite_r+0x70>
    e358:	0005883a 	mov	r2,zero
    e35c:	dfc00b17 	ldw	ra,44(sp)
    e360:	df000a17 	ldw	fp,40(sp)
    e364:	ddc00917 	ldw	r23,36(sp)
    e368:	dd800817 	ldw	r22,32(sp)
    e36c:	dd400717 	ldw	r21,28(sp)
    e370:	dd000617 	ldw	r20,24(sp)
    e374:	dcc00517 	ldw	r19,20(sp)
    e378:	dc800417 	ldw	r18,16(sp)
    e37c:	dc400317 	ldw	r17,12(sp)
    e380:	dc000217 	ldw	r16,8(sp)
    e384:	dec00c04 	addi	sp,sp,48
    e388:	f800283a 	ret
    e38c:	800b883a 	mov	r5,r16
    e390:	a809883a 	mov	r4,r21
    e394:	0006d6c0 	call	6d6c <__swsetup_r>
    e398:	1000eb1e 	bne	r2,zero,e748 <__sfvwrite_r+0x4a4>
    e39c:	80c0030b 	ldhu	r3,12(r16)
    e3a0:	a4400017 	ldw	r17,0(r20)
    e3a4:	1880008c 	andi	r2,r3,2
    e3a8:	103fd61e 	bne	r2,zero,e304 <__sfvwrite_r+0x60>
    e3ac:	1880004c 	andi	r2,r3,1
    e3b0:	10003f1e 	bne	r2,zero,e4b0 <__sfvwrite_r+0x20c>
    e3b4:	0039883a 	mov	fp,zero
    e3b8:	0025883a 	mov	r18,zero
    e3bc:	90001a26 	beq	r18,zero,e428 <__sfvwrite_r+0x184>
    e3c0:	1880800c 	andi	r2,r3,512
    e3c4:	84c00217 	ldw	r19,8(r16)
    e3c8:	10002126 	beq	r2,zero,e450 <__sfvwrite_r+0x1ac>
    e3cc:	982f883a 	mov	r23,r19
    e3d0:	94c09336 	bltu	r18,r19,e620 <__sfvwrite_r+0x37c>
    e3d4:	1881200c 	andi	r2,r3,1152
    e3d8:	10009e1e 	bne	r2,zero,e654 <__sfvwrite_r+0x3b0>
    e3dc:	81000017 	ldw	r4,0(r16)
    e3e0:	b80d883a 	mov	r6,r23
    e3e4:	e00b883a 	mov	r5,fp
    e3e8:	000e8140 	call	e814 <memmove>
    e3ec:	80c00217 	ldw	r3,8(r16)
    e3f0:	81000017 	ldw	r4,0(r16)
    e3f4:	9005883a 	mov	r2,r18
    e3f8:	1ce7c83a 	sub	r19,r3,r19
    e3fc:	25cf883a 	add	r7,r4,r23
    e400:	84c00215 	stw	r19,8(r16)
    e404:	81c00015 	stw	r7,0(r16)
    e408:	a0c00217 	ldw	r3,8(r20)
    e40c:	e0b9883a 	add	fp,fp,r2
    e410:	90a5c83a 	sub	r18,r18,r2
    e414:	18a7c83a 	sub	r19,r3,r2
    e418:	a4c00215 	stw	r19,8(r20)
    e41c:	983fce26 	beq	r19,zero,e358 <__sfvwrite_r+0xb4>
    e420:	80c0030b 	ldhu	r3,12(r16)
    e424:	903fe61e 	bne	r18,zero,e3c0 <__sfvwrite_r+0x11c>
    e428:	8f000017 	ldw	fp,0(r17)
    e42c:	8c800117 	ldw	r18,4(r17)
    e430:	8c400204 	addi	r17,r17,8
    e434:	003fe106 	br	e3bc <__sfvwrite_r+0x118>
    e438:	8cc00017 	ldw	r19,0(r17)
    e43c:	8c800117 	ldw	r18,4(r17)
    e440:	8c400204 	addi	r17,r17,8
    e444:	003fb306 	br	e314 <__sfvwrite_r+0x70>
    e448:	0005883a 	mov	r2,zero
    e44c:	f800283a 	ret
    e450:	81000017 	ldw	r4,0(r16)
    e454:	80800417 	ldw	r2,16(r16)
    e458:	11005736 	bltu	r2,r4,e5b8 <__sfvwrite_r+0x314>
    e45c:	85c00517 	ldw	r23,20(r16)
    e460:	95c05536 	bltu	r18,r23,e5b8 <__sfvwrite_r+0x314>
    e464:	00a00034 	movhi	r2,32768
    e468:	10bfffc4 	addi	r2,r2,-1
    e46c:	9009883a 	mov	r4,r18
    e470:	1480012e 	bgeu	r2,r18,e478 <__sfvwrite_r+0x1d4>
    e474:	1009883a 	mov	r4,r2
    e478:	b80b883a 	mov	r5,r23
    e47c:	000fd240 	call	fd24 <__divsi3>
    e480:	15cf383a 	mul	r7,r2,r23
    e484:	81400717 	ldw	r5,28(r16)
    e488:	80800917 	ldw	r2,36(r16)
    e48c:	e00d883a 	mov	r6,fp
    e490:	a809883a 	mov	r4,r21
    e494:	103ee83a 	callr	r2
    e498:	00bfdb16 	blt	zero,r2,e408 <__sfvwrite_r+0x164>
    e49c:	8080030b 	ldhu	r2,12(r16)
    e4a0:	10801014 	ori	r2,r2,64
    e4a4:	8080030d 	sth	r2,12(r16)
    e4a8:	00bfffc4 	movi	r2,-1
    e4ac:	003fab06 	br	e35c <__sfvwrite_r+0xb8>
    e4b0:	0027883a 	mov	r19,zero
    e4b4:	0011883a 	mov	r8,zero
    e4b8:	0039883a 	mov	fp,zero
    e4bc:	0025883a 	mov	r18,zero
    e4c0:	90001f26 	beq	r18,zero,e540 <__sfvwrite_r+0x29c>
    e4c4:	40005a26 	beq	r8,zero,e630 <__sfvwrite_r+0x38c>
    e4c8:	982d883a 	mov	r22,r19
    e4cc:	94c0012e 	bgeu	r18,r19,e4d4 <__sfvwrite_r+0x230>
    e4d0:	902d883a 	mov	r22,r18
    e4d4:	81000017 	ldw	r4,0(r16)
    e4d8:	80800417 	ldw	r2,16(r16)
    e4dc:	b02f883a 	mov	r23,r22
    e4e0:	81c00517 	ldw	r7,20(r16)
    e4e4:	1100032e 	bgeu	r2,r4,e4f4 <__sfvwrite_r+0x250>
    e4e8:	80c00217 	ldw	r3,8(r16)
    e4ec:	38c7883a 	add	r3,r7,r3
    e4f0:	1d801816 	blt	r3,r22,e554 <__sfvwrite_r+0x2b0>
    e4f4:	b1c03e16 	blt	r22,r7,e5f0 <__sfvwrite_r+0x34c>
    e4f8:	80800917 	ldw	r2,36(r16)
    e4fc:	81400717 	ldw	r5,28(r16)
    e500:	e00d883a 	mov	r6,fp
    e504:	da000115 	stw	r8,4(sp)
    e508:	a809883a 	mov	r4,r21
    e50c:	103ee83a 	callr	r2
    e510:	102f883a 	mov	r23,r2
    e514:	da000117 	ldw	r8,4(sp)
    e518:	00bfe00e 	bge	zero,r2,e49c <__sfvwrite_r+0x1f8>
    e51c:	9de7c83a 	sub	r19,r19,r23
    e520:	98001f26 	beq	r19,zero,e5a0 <__sfvwrite_r+0x2fc>
    e524:	a0800217 	ldw	r2,8(r20)
    e528:	e5f9883a 	add	fp,fp,r23
    e52c:	95e5c83a 	sub	r18,r18,r23
    e530:	15efc83a 	sub	r23,r2,r23
    e534:	a5c00215 	stw	r23,8(r20)
    e538:	b83f8726 	beq	r23,zero,e358 <__sfvwrite_r+0xb4>
    e53c:	903fe11e 	bne	r18,zero,e4c4 <__sfvwrite_r+0x220>
    e540:	8f000017 	ldw	fp,0(r17)
    e544:	8c800117 	ldw	r18,4(r17)
    e548:	0011883a 	mov	r8,zero
    e54c:	8c400204 	addi	r17,r17,8
    e550:	003fdb06 	br	e4c0 <__sfvwrite_r+0x21c>
    e554:	180d883a 	mov	r6,r3
    e558:	e00b883a 	mov	r5,fp
    e55c:	da000115 	stw	r8,4(sp)
    e560:	d8c00015 	stw	r3,0(sp)
    e564:	000e8140 	call	e814 <memmove>
    e568:	d8c00017 	ldw	r3,0(sp)
    e56c:	80800017 	ldw	r2,0(r16)
    e570:	800b883a 	mov	r5,r16
    e574:	a809883a 	mov	r4,r21
    e578:	10c5883a 	add	r2,r2,r3
    e57c:	80800015 	stw	r2,0(r16)
    e580:	d8c00015 	stw	r3,0(sp)
    e584:	00089640 	call	8964 <_fflush_r>
    e588:	d8c00017 	ldw	r3,0(sp)
    e58c:	da000117 	ldw	r8,4(sp)
    e590:	103fc21e 	bne	r2,zero,e49c <__sfvwrite_r+0x1f8>
    e594:	182f883a 	mov	r23,r3
    e598:	9de7c83a 	sub	r19,r19,r23
    e59c:	983fe11e 	bne	r19,zero,e524 <__sfvwrite_r+0x280>
    e5a0:	800b883a 	mov	r5,r16
    e5a4:	a809883a 	mov	r4,r21
    e5a8:	00089640 	call	8964 <_fflush_r>
    e5ac:	103fbb1e 	bne	r2,zero,e49c <__sfvwrite_r+0x1f8>
    e5b0:	0011883a 	mov	r8,zero
    e5b4:	003fdb06 	br	e524 <__sfvwrite_r+0x280>
    e5b8:	94c0012e 	bgeu	r18,r19,e5c0 <__sfvwrite_r+0x31c>
    e5bc:	9027883a 	mov	r19,r18
    e5c0:	980d883a 	mov	r6,r19
    e5c4:	e00b883a 	mov	r5,fp
    e5c8:	000e8140 	call	e814 <memmove>
    e5cc:	80800217 	ldw	r2,8(r16)
    e5d0:	80c00017 	ldw	r3,0(r16)
    e5d4:	14c5c83a 	sub	r2,r2,r19
    e5d8:	1cc7883a 	add	r3,r3,r19
    e5dc:	80800215 	stw	r2,8(r16)
    e5e0:	80c00015 	stw	r3,0(r16)
    e5e4:	10004326 	beq	r2,zero,e6f4 <__sfvwrite_r+0x450>
    e5e8:	9805883a 	mov	r2,r19
    e5ec:	003f8606 	br	e408 <__sfvwrite_r+0x164>
    e5f0:	b00d883a 	mov	r6,r22
    e5f4:	e00b883a 	mov	r5,fp
    e5f8:	da000115 	stw	r8,4(sp)
    e5fc:	000e8140 	call	e814 <memmove>
    e600:	80800217 	ldw	r2,8(r16)
    e604:	80c00017 	ldw	r3,0(r16)
    e608:	da000117 	ldw	r8,4(sp)
    e60c:	1585c83a 	sub	r2,r2,r22
    e610:	1dad883a 	add	r22,r3,r22
    e614:	80800215 	stw	r2,8(r16)
    e618:	85800015 	stw	r22,0(r16)
    e61c:	003fbf06 	br	e51c <__sfvwrite_r+0x278>
    e620:	81000017 	ldw	r4,0(r16)
    e624:	9027883a 	mov	r19,r18
    e628:	902f883a 	mov	r23,r18
    e62c:	003f6c06 	br	e3e0 <__sfvwrite_r+0x13c>
    e630:	900d883a 	mov	r6,r18
    e634:	01400284 	movi	r5,10
    e638:	e009883a 	mov	r4,fp
    e63c:	0009df00 	call	9df0 <memchr>
    e640:	10003e26 	beq	r2,zero,e73c <__sfvwrite_r+0x498>
    e644:	10800044 	addi	r2,r2,1
    e648:	1727c83a 	sub	r19,r2,fp
    e64c:	02000044 	movi	r8,1
    e650:	003f9d06 	br	e4c8 <__sfvwrite_r+0x224>
    e654:	80800517 	ldw	r2,20(r16)
    e658:	81400417 	ldw	r5,16(r16)
    e65c:	81c00017 	ldw	r7,0(r16)
    e660:	10a7883a 	add	r19,r2,r2
    e664:	9885883a 	add	r2,r19,r2
    e668:	1026d7fa 	srli	r19,r2,31
    e66c:	396dc83a 	sub	r22,r7,r5
    e670:	b1000044 	addi	r4,r22,1
    e674:	9885883a 	add	r2,r19,r2
    e678:	1027d07a 	srai	r19,r2,1
    e67c:	2485883a 	add	r2,r4,r18
    e680:	980d883a 	mov	r6,r19
    e684:	9880022e 	bgeu	r19,r2,e690 <__sfvwrite_r+0x3ec>
    e688:	1027883a 	mov	r19,r2
    e68c:	100d883a 	mov	r6,r2
    e690:	18c1000c 	andi	r3,r3,1024
    e694:	18001c26 	beq	r3,zero,e708 <__sfvwrite_r+0x464>
    e698:	300b883a 	mov	r5,r6
    e69c:	a809883a 	mov	r4,r21
    e6a0:	00095e40 	call	95e4 <_malloc_r>
    e6a4:	102f883a 	mov	r23,r2
    e6a8:	10002926 	beq	r2,zero,e750 <__sfvwrite_r+0x4ac>
    e6ac:	81400417 	ldw	r5,16(r16)
    e6b0:	b00d883a 	mov	r6,r22
    e6b4:	1009883a 	mov	r4,r2
    e6b8:	0001ec80 	call	1ec8 <memcpy>
    e6bc:	8080030b 	ldhu	r2,12(r16)
    e6c0:	00fedfc4 	movi	r3,-1153
    e6c4:	10c4703a 	and	r2,r2,r3
    e6c8:	10802014 	ori	r2,r2,128
    e6cc:	8080030d 	sth	r2,12(r16)
    e6d0:	bd89883a 	add	r4,r23,r22
    e6d4:	9d8fc83a 	sub	r7,r19,r22
    e6d8:	85c00415 	stw	r23,16(r16)
    e6dc:	84c00515 	stw	r19,20(r16)
    e6e0:	81000015 	stw	r4,0(r16)
    e6e4:	9027883a 	mov	r19,r18
    e6e8:	81c00215 	stw	r7,8(r16)
    e6ec:	902f883a 	mov	r23,r18
    e6f0:	003f3b06 	br	e3e0 <__sfvwrite_r+0x13c>
    e6f4:	800b883a 	mov	r5,r16
    e6f8:	a809883a 	mov	r4,r21
    e6fc:	00089640 	call	8964 <_fflush_r>
    e700:	103fb926 	beq	r2,zero,e5e8 <__sfvwrite_r+0x344>
    e704:	003f6506 	br	e49c <__sfvwrite_r+0x1f8>
    e708:	a809883a 	mov	r4,r21
    e70c:	000e9d00 	call	e9d0 <_realloc_r>
    e710:	102f883a 	mov	r23,r2
    e714:	103fee1e 	bne	r2,zero,e6d0 <__sfvwrite_r+0x42c>
    e718:	81400417 	ldw	r5,16(r16)
    e71c:	a809883a 	mov	r4,r21
    e720:	0008eb40 	call	8eb4 <_free_r>
    e724:	8080030b 	ldhu	r2,12(r16)
    e728:	00ffdfc4 	movi	r3,-129
    e72c:	1884703a 	and	r2,r3,r2
    e730:	00c00304 	movi	r3,12
    e734:	a8c00015 	stw	r3,0(r21)
    e738:	003f5906 	br	e4a0 <__sfvwrite_r+0x1fc>
    e73c:	94c00044 	addi	r19,r18,1
    e740:	02000044 	movi	r8,1
    e744:	003f6006 	br	e4c8 <__sfvwrite_r+0x224>
    e748:	00bfffc4 	movi	r2,-1
    e74c:	003f0306 	br	e35c <__sfvwrite_r+0xb8>
    e750:	00800304 	movi	r2,12
    e754:	a8800015 	stw	r2,0(r21)
    e758:	8080030b 	ldhu	r2,12(r16)
    e75c:	003f5006 	br	e4a0 <__sfvwrite_r+0x1fc>

0000e760 <_isatty_r>:
    e760:	defffd04 	addi	sp,sp,-12
    e764:	dc000015 	stw	r16,0(sp)
    e768:	040000b4 	movhi	r16,2
    e76c:	dc400115 	stw	r17,4(sp)
    e770:	840df404 	addi	r16,r16,14288
    e774:	2023883a 	mov	r17,r4
    e778:	2809883a 	mov	r4,r5
    e77c:	dfc00215 	stw	ra,8(sp)
    e780:	80000015 	stw	zero,0(r16)
    e784:	00127a00 	call	127a0 <isatty>
    e788:	00ffffc4 	movi	r3,-1
    e78c:	10c00526 	beq	r2,r3,e7a4 <_isatty_r+0x44>
    e790:	dfc00217 	ldw	ra,8(sp)
    e794:	dc400117 	ldw	r17,4(sp)
    e798:	dc000017 	ldw	r16,0(sp)
    e79c:	dec00304 	addi	sp,sp,12
    e7a0:	f800283a 	ret
    e7a4:	80c00017 	ldw	r3,0(r16)
    e7a8:	183ff926 	beq	r3,zero,e790 <_isatty_r+0x30>
    e7ac:	88c00015 	stw	r3,0(r17)
    e7b0:	003ff706 	br	e790 <_isatty_r+0x30>

0000e7b4 <_lseek_r>:
    e7b4:	defffd04 	addi	sp,sp,-12
    e7b8:	2805883a 	mov	r2,r5
    e7bc:	dc000015 	stw	r16,0(sp)
    e7c0:	040000b4 	movhi	r16,2
    e7c4:	dc400115 	stw	r17,4(sp)
    e7c8:	300b883a 	mov	r5,r6
    e7cc:	840df404 	addi	r16,r16,14288
    e7d0:	2023883a 	mov	r17,r4
    e7d4:	380d883a 	mov	r6,r7
    e7d8:	1009883a 	mov	r4,r2
    e7dc:	dfc00215 	stw	ra,8(sp)
    e7e0:	80000015 	stw	zero,0(r16)
    e7e4:	001296c0 	call	1296c <lseek>
    e7e8:	00ffffc4 	movi	r3,-1
    e7ec:	10c00526 	beq	r2,r3,e804 <_lseek_r+0x50>
    e7f0:	dfc00217 	ldw	ra,8(sp)
    e7f4:	dc400117 	ldw	r17,4(sp)
    e7f8:	dc000017 	ldw	r16,0(sp)
    e7fc:	dec00304 	addi	sp,sp,12
    e800:	f800283a 	ret
    e804:	80c00017 	ldw	r3,0(r16)
    e808:	183ff926 	beq	r3,zero,e7f0 <_lseek_r+0x3c>
    e80c:	88c00015 	stw	r3,0(r17)
    e810:	003ff706 	br	e7f0 <_lseek_r+0x3c>

0000e814 <memmove>:
    e814:	2005883a 	mov	r2,r4
    e818:	29000b2e 	bgeu	r5,r4,e848 <memmove+0x34>
    e81c:	298f883a 	add	r7,r5,r6
    e820:	21c0092e 	bgeu	r4,r7,e848 <memmove+0x34>
    e824:	2187883a 	add	r3,r4,r6
    e828:	198bc83a 	sub	r5,r3,r6
    e82c:	30004826 	beq	r6,zero,e950 <memmove+0x13c>
    e830:	39ffffc4 	addi	r7,r7,-1
    e834:	39000003 	ldbu	r4,0(r7)
    e838:	18ffffc4 	addi	r3,r3,-1
    e83c:	19000005 	stb	r4,0(r3)
    e840:	28fffb1e 	bne	r5,r3,e830 <memmove+0x1c>
    e844:	f800283a 	ret
    e848:	00c003c4 	movi	r3,15
    e84c:	1980412e 	bgeu	r3,r6,e954 <memmove+0x140>
    e850:	2886b03a 	or	r3,r5,r2
    e854:	18c000cc 	andi	r3,r3,3
    e858:	1800401e 	bne	r3,zero,e95c <memmove+0x148>
    e85c:	33fffc04 	addi	r15,r6,-16
    e860:	781ed13a 	srli	r15,r15,4
    e864:	28c00104 	addi	r3,r5,4
    e868:	13400104 	addi	r13,r2,4
    e86c:	781c913a 	slli	r14,r15,4
    e870:	2b000204 	addi	r12,r5,8
    e874:	12c00204 	addi	r11,r2,8
    e878:	73800504 	addi	r14,r14,20
    e87c:	2a800304 	addi	r10,r5,12
    e880:	12400304 	addi	r9,r2,12
    e884:	2b9d883a 	add	r14,r5,r14
    e888:	2811883a 	mov	r8,r5
    e88c:	100f883a 	mov	r7,r2
    e890:	41000017 	ldw	r4,0(r8)
    e894:	39c00404 	addi	r7,r7,16
    e898:	18c00404 	addi	r3,r3,16
    e89c:	393ffc15 	stw	r4,-16(r7)
    e8a0:	193ffc17 	ldw	r4,-16(r3)
    e8a4:	6b400404 	addi	r13,r13,16
    e8a8:	5ac00404 	addi	r11,r11,16
    e8ac:	693ffc15 	stw	r4,-16(r13)
    e8b0:	61000017 	ldw	r4,0(r12)
    e8b4:	4a400404 	addi	r9,r9,16
    e8b8:	42000404 	addi	r8,r8,16
    e8bc:	593ffc15 	stw	r4,-16(r11)
    e8c0:	51000017 	ldw	r4,0(r10)
    e8c4:	63000404 	addi	r12,r12,16
    e8c8:	52800404 	addi	r10,r10,16
    e8cc:	493ffc15 	stw	r4,-16(r9)
    e8d0:	1bbfef1e 	bne	r3,r14,e890 <memmove+0x7c>
    e8d4:	79000044 	addi	r4,r15,1
    e8d8:	2008913a 	slli	r4,r4,4
    e8dc:	328003cc 	andi	r10,r6,15
    e8e0:	02c000c4 	movi	r11,3
    e8e4:	1107883a 	add	r3,r2,r4
    e8e8:	290b883a 	add	r5,r5,r4
    e8ec:	5a801e2e 	bgeu	r11,r10,e968 <memmove+0x154>
    e8f0:	1813883a 	mov	r9,r3
    e8f4:	2811883a 	mov	r8,r5
    e8f8:	500f883a 	mov	r7,r10
    e8fc:	41000017 	ldw	r4,0(r8)
    e900:	4a400104 	addi	r9,r9,4
    e904:	39ffff04 	addi	r7,r7,-4
    e908:	493fff15 	stw	r4,-4(r9)
    e90c:	42000104 	addi	r8,r8,4
    e910:	59fffa36 	bltu	r11,r7,e8fc <memmove+0xe8>
    e914:	513fff04 	addi	r4,r10,-4
    e918:	2008d0ba 	srli	r4,r4,2
    e91c:	318000cc 	andi	r6,r6,3
    e920:	21000044 	addi	r4,r4,1
    e924:	2109883a 	add	r4,r4,r4
    e928:	2109883a 	add	r4,r4,r4
    e92c:	1907883a 	add	r3,r3,r4
    e930:	290b883a 	add	r5,r5,r4
    e934:	30000b26 	beq	r6,zero,e964 <memmove+0x150>
    e938:	198d883a 	add	r6,r3,r6
    e93c:	29c00003 	ldbu	r7,0(r5)
    e940:	18c00044 	addi	r3,r3,1
    e944:	29400044 	addi	r5,r5,1
    e948:	19ffffc5 	stb	r7,-1(r3)
    e94c:	19bffb1e 	bne	r3,r6,e93c <memmove+0x128>
    e950:	f800283a 	ret
    e954:	1007883a 	mov	r3,r2
    e958:	003ff606 	br	e934 <memmove+0x120>
    e95c:	1007883a 	mov	r3,r2
    e960:	003ff506 	br	e938 <memmove+0x124>
    e964:	f800283a 	ret
    e968:	500d883a 	mov	r6,r10
    e96c:	003ff106 	br	e934 <memmove+0x120>

0000e970 <_read_r>:
    e970:	defffd04 	addi	sp,sp,-12
    e974:	2805883a 	mov	r2,r5
    e978:	dc000015 	stw	r16,0(sp)
    e97c:	040000b4 	movhi	r16,2
    e980:	dc400115 	stw	r17,4(sp)
    e984:	300b883a 	mov	r5,r6
    e988:	840df404 	addi	r16,r16,14288
    e98c:	2023883a 	mov	r17,r4
    e990:	380d883a 	mov	r6,r7
    e994:	1009883a 	mov	r4,r2
    e998:	dfc00215 	stw	ra,8(sp)
    e99c:	80000015 	stw	zero,0(r16)
    e9a0:	0012b380 	call	12b38 <read>
    e9a4:	00ffffc4 	movi	r3,-1
    e9a8:	10c00526 	beq	r2,r3,e9c0 <_read_r+0x50>
    e9ac:	dfc00217 	ldw	ra,8(sp)
    e9b0:	dc400117 	ldw	r17,4(sp)
    e9b4:	dc000017 	ldw	r16,0(sp)
    e9b8:	dec00304 	addi	sp,sp,12
    e9bc:	f800283a 	ret
    e9c0:	80c00017 	ldw	r3,0(r16)
    e9c4:	183ff926 	beq	r3,zero,e9ac <_read_r+0x3c>
    e9c8:	88c00015 	stw	r3,0(r17)
    e9cc:	003ff706 	br	e9ac <_read_r+0x3c>

0000e9d0 <_realloc_r>:
    e9d0:	defff604 	addi	sp,sp,-40
    e9d4:	dc800215 	stw	r18,8(sp)
    e9d8:	dfc00915 	stw	ra,36(sp)
    e9dc:	df000815 	stw	fp,32(sp)
    e9e0:	ddc00715 	stw	r23,28(sp)
    e9e4:	dd800615 	stw	r22,24(sp)
    e9e8:	dd400515 	stw	r21,20(sp)
    e9ec:	dd000415 	stw	r20,16(sp)
    e9f0:	dcc00315 	stw	r19,12(sp)
    e9f4:	dc400115 	stw	r17,4(sp)
    e9f8:	dc000015 	stw	r16,0(sp)
    e9fc:	3025883a 	mov	r18,r6
    ea00:	2800b726 	beq	r5,zero,ece0 <_realloc_r+0x310>
    ea04:	282b883a 	mov	r21,r5
    ea08:	2029883a 	mov	r20,r4
    ea0c:	0012fa00 	call	12fa0 <__malloc_lock>
    ea10:	a8bfff17 	ldw	r2,-4(r21)
    ea14:	043fff04 	movi	r16,-4
    ea18:	90c002c4 	addi	r3,r18,11
    ea1c:	01000584 	movi	r4,22
    ea20:	acfffe04 	addi	r19,r21,-8
    ea24:	1420703a 	and	r16,r2,r16
    ea28:	20c0332e 	bgeu	r4,r3,eaf8 <_realloc_r+0x128>
    ea2c:	047ffe04 	movi	r17,-8
    ea30:	1c62703a 	and	r17,r3,r17
    ea34:	8807883a 	mov	r3,r17
    ea38:	88005816 	blt	r17,zero,eb9c <_realloc_r+0x1cc>
    ea3c:	8c805736 	bltu	r17,r18,eb9c <_realloc_r+0x1cc>
    ea40:	80c0300e 	bge	r16,r3,eb04 <_realloc_r+0x134>
    ea44:	070000b4 	movhi	fp,2
    ea48:	e73fa204 	addi	fp,fp,-376
    ea4c:	e1c00217 	ldw	r7,8(fp)
    ea50:	9c09883a 	add	r4,r19,r16
    ea54:	22000117 	ldw	r8,4(r4)
    ea58:	21c06326 	beq	r4,r7,ebe8 <_realloc_r+0x218>
    ea5c:	017fff84 	movi	r5,-2
    ea60:	414a703a 	and	r5,r8,r5
    ea64:	214b883a 	add	r5,r4,r5
    ea68:	29800117 	ldw	r6,4(r5)
    ea6c:	3180004c 	andi	r6,r6,1
    ea70:	30003f26 	beq	r6,zero,eb70 <_realloc_r+0x1a0>
    ea74:	1080004c 	andi	r2,r2,1
    ea78:	10008326 	beq	r2,zero,ec88 <_realloc_r+0x2b8>
    ea7c:	900b883a 	mov	r5,r18
    ea80:	a009883a 	mov	r4,r20
    ea84:	00095e40 	call	95e4 <_malloc_r>
    ea88:	1025883a 	mov	r18,r2
    ea8c:	10011e26 	beq	r2,zero,ef08 <_realloc_r+0x538>
    ea90:	a93fff17 	ldw	r4,-4(r21)
    ea94:	10fffe04 	addi	r3,r2,-8
    ea98:	00bfff84 	movi	r2,-2
    ea9c:	2084703a 	and	r2,r4,r2
    eaa0:	9885883a 	add	r2,r19,r2
    eaa4:	1880ee26 	beq	r3,r2,ee60 <_realloc_r+0x490>
    eaa8:	81bfff04 	addi	r6,r16,-4
    eaac:	00800904 	movi	r2,36
    eab0:	1180b836 	bltu	r2,r6,ed94 <_realloc_r+0x3c4>
    eab4:	00c004c4 	movi	r3,19
    eab8:	19809636 	bltu	r3,r6,ed14 <_realloc_r+0x344>
    eabc:	9005883a 	mov	r2,r18
    eac0:	a807883a 	mov	r3,r21
    eac4:	19000017 	ldw	r4,0(r3)
    eac8:	11000015 	stw	r4,0(r2)
    eacc:	19000117 	ldw	r4,4(r3)
    ead0:	11000115 	stw	r4,4(r2)
    ead4:	18c00217 	ldw	r3,8(r3)
    ead8:	10c00215 	stw	r3,8(r2)
    eadc:	a80b883a 	mov	r5,r21
    eae0:	a009883a 	mov	r4,r20
    eae4:	0008eb40 	call	8eb4 <_free_r>
    eae8:	a009883a 	mov	r4,r20
    eaec:	00130c00 	call	130c0 <__malloc_unlock>
    eaf0:	9005883a 	mov	r2,r18
    eaf4:	00001206 	br	eb40 <_realloc_r+0x170>
    eaf8:	00c00404 	movi	r3,16
    eafc:	1823883a 	mov	r17,r3
    eb00:	003fce06 	br	ea3c <_realloc_r+0x6c>
    eb04:	a825883a 	mov	r18,r21
    eb08:	8445c83a 	sub	r2,r16,r17
    eb0c:	00c003c4 	movi	r3,15
    eb10:	18802636 	bltu	r3,r2,ebac <_realloc_r+0x1dc>
    eb14:	99800117 	ldw	r6,4(r19)
    eb18:	9c07883a 	add	r3,r19,r16
    eb1c:	3180004c 	andi	r6,r6,1
    eb20:	3420b03a 	or	r16,r6,r16
    eb24:	9c000115 	stw	r16,4(r19)
    eb28:	18800117 	ldw	r2,4(r3)
    eb2c:	10800054 	ori	r2,r2,1
    eb30:	18800115 	stw	r2,4(r3)
    eb34:	a009883a 	mov	r4,r20
    eb38:	00130c00 	call	130c0 <__malloc_unlock>
    eb3c:	9005883a 	mov	r2,r18
    eb40:	dfc00917 	ldw	ra,36(sp)
    eb44:	df000817 	ldw	fp,32(sp)
    eb48:	ddc00717 	ldw	r23,28(sp)
    eb4c:	dd800617 	ldw	r22,24(sp)
    eb50:	dd400517 	ldw	r21,20(sp)
    eb54:	dd000417 	ldw	r20,16(sp)
    eb58:	dcc00317 	ldw	r19,12(sp)
    eb5c:	dc800217 	ldw	r18,8(sp)
    eb60:	dc400117 	ldw	r17,4(sp)
    eb64:	dc000017 	ldw	r16,0(sp)
    eb68:	dec00a04 	addi	sp,sp,40
    eb6c:	f800283a 	ret
    eb70:	017fff04 	movi	r5,-4
    eb74:	414a703a 	and	r5,r8,r5
    eb78:	814d883a 	add	r6,r16,r5
    eb7c:	30c01f16 	blt	r6,r3,ebfc <_realloc_r+0x22c>
    eb80:	20800317 	ldw	r2,12(r4)
    eb84:	20c00217 	ldw	r3,8(r4)
    eb88:	a825883a 	mov	r18,r21
    eb8c:	3021883a 	mov	r16,r6
    eb90:	18800315 	stw	r2,12(r3)
    eb94:	10c00215 	stw	r3,8(r2)
    eb98:	003fdb06 	br	eb08 <_realloc_r+0x138>
    eb9c:	00800304 	movi	r2,12
    eba0:	a0800015 	stw	r2,0(r20)
    eba4:	0005883a 	mov	r2,zero
    eba8:	003fe506 	br	eb40 <_realloc_r+0x170>
    ebac:	98c00117 	ldw	r3,4(r19)
    ebb0:	9c4b883a 	add	r5,r19,r17
    ebb4:	11000054 	ori	r4,r2,1
    ebb8:	18c0004c 	andi	r3,r3,1
    ebbc:	1c62b03a 	or	r17,r3,r17
    ebc0:	9c400115 	stw	r17,4(r19)
    ebc4:	29000115 	stw	r4,4(r5)
    ebc8:	2885883a 	add	r2,r5,r2
    ebcc:	10c00117 	ldw	r3,4(r2)
    ebd0:	29400204 	addi	r5,r5,8
    ebd4:	a009883a 	mov	r4,r20
    ebd8:	18c00054 	ori	r3,r3,1
    ebdc:	10c00115 	stw	r3,4(r2)
    ebe0:	0008eb40 	call	8eb4 <_free_r>
    ebe4:	003fd306 	br	eb34 <_realloc_r+0x164>
    ebe8:	017fff04 	movi	r5,-4
    ebec:	414a703a 	and	r5,r8,r5
    ebf0:	89800404 	addi	r6,r17,16
    ebf4:	8151883a 	add	r8,r16,r5
    ebf8:	4180590e 	bge	r8,r6,ed60 <_realloc_r+0x390>
    ebfc:	1080004c 	andi	r2,r2,1
    ec00:	103f9e1e 	bne	r2,zero,ea7c <_realloc_r+0xac>
    ec04:	adbffe17 	ldw	r22,-8(r21)
    ec08:	00bfff04 	movi	r2,-4
    ec0c:	9dadc83a 	sub	r22,r19,r22
    ec10:	b1800117 	ldw	r6,4(r22)
    ec14:	3084703a 	and	r2,r6,r2
    ec18:	20002026 	beq	r4,zero,ec9c <_realloc_r+0x2cc>
    ec1c:	80af883a 	add	r23,r16,r2
    ec20:	b96f883a 	add	r23,r23,r5
    ec24:	21c05f26 	beq	r4,r7,eda4 <_realloc_r+0x3d4>
    ec28:	b8c01c16 	blt	r23,r3,ec9c <_realloc_r+0x2cc>
    ec2c:	20800317 	ldw	r2,12(r4)
    ec30:	20c00217 	ldw	r3,8(r4)
    ec34:	81bfff04 	addi	r6,r16,-4
    ec38:	01000904 	movi	r4,36
    ec3c:	18800315 	stw	r2,12(r3)
    ec40:	10c00215 	stw	r3,8(r2)
    ec44:	b0c00217 	ldw	r3,8(r22)
    ec48:	b0800317 	ldw	r2,12(r22)
    ec4c:	b4800204 	addi	r18,r22,8
    ec50:	18800315 	stw	r2,12(r3)
    ec54:	10c00215 	stw	r3,8(r2)
    ec58:	21801b36 	bltu	r4,r6,ecc8 <_realloc_r+0x2f8>
    ec5c:	008004c4 	movi	r2,19
    ec60:	1180352e 	bgeu	r2,r6,ed38 <_realloc_r+0x368>
    ec64:	a8800017 	ldw	r2,0(r21)
    ec68:	b0800215 	stw	r2,8(r22)
    ec6c:	a8800117 	ldw	r2,4(r21)
    ec70:	b0800315 	stw	r2,12(r22)
    ec74:	008006c4 	movi	r2,27
    ec78:	11807f36 	bltu	r2,r6,ee78 <_realloc_r+0x4a8>
    ec7c:	b0800404 	addi	r2,r22,16
    ec80:	ad400204 	addi	r21,r21,8
    ec84:	00002d06 	br	ed3c <_realloc_r+0x36c>
    ec88:	adbffe17 	ldw	r22,-8(r21)
    ec8c:	00bfff04 	movi	r2,-4
    ec90:	9dadc83a 	sub	r22,r19,r22
    ec94:	b1000117 	ldw	r4,4(r22)
    ec98:	2084703a 	and	r2,r4,r2
    ec9c:	b03f7726 	beq	r22,zero,ea7c <_realloc_r+0xac>
    eca0:	80af883a 	add	r23,r16,r2
    eca4:	b8ff7516 	blt	r23,r3,ea7c <_realloc_r+0xac>
    eca8:	b0800317 	ldw	r2,12(r22)
    ecac:	b0c00217 	ldw	r3,8(r22)
    ecb0:	81bfff04 	addi	r6,r16,-4
    ecb4:	01000904 	movi	r4,36
    ecb8:	18800315 	stw	r2,12(r3)
    ecbc:	10c00215 	stw	r3,8(r2)
    ecc0:	b4800204 	addi	r18,r22,8
    ecc4:	21bfe52e 	bgeu	r4,r6,ec5c <_realloc_r+0x28c>
    ecc8:	a80b883a 	mov	r5,r21
    eccc:	9009883a 	mov	r4,r18
    ecd0:	000e8140 	call	e814 <memmove>
    ecd4:	b821883a 	mov	r16,r23
    ecd8:	b027883a 	mov	r19,r22
    ecdc:	003f8a06 	br	eb08 <_realloc_r+0x138>
    ece0:	300b883a 	mov	r5,r6
    ece4:	dfc00917 	ldw	ra,36(sp)
    ece8:	df000817 	ldw	fp,32(sp)
    ecec:	ddc00717 	ldw	r23,28(sp)
    ecf0:	dd800617 	ldw	r22,24(sp)
    ecf4:	dd400517 	ldw	r21,20(sp)
    ecf8:	dd000417 	ldw	r20,16(sp)
    ecfc:	dcc00317 	ldw	r19,12(sp)
    ed00:	dc800217 	ldw	r18,8(sp)
    ed04:	dc400117 	ldw	r17,4(sp)
    ed08:	dc000017 	ldw	r16,0(sp)
    ed0c:	dec00a04 	addi	sp,sp,40
    ed10:	00095e41 	jmpi	95e4 <_malloc_r>
    ed14:	a8c00017 	ldw	r3,0(r21)
    ed18:	90c00015 	stw	r3,0(r18)
    ed1c:	a8c00117 	ldw	r3,4(r21)
    ed20:	90c00115 	stw	r3,4(r18)
    ed24:	00c006c4 	movi	r3,27
    ed28:	19804536 	bltu	r3,r6,ee40 <_realloc_r+0x470>
    ed2c:	90800204 	addi	r2,r18,8
    ed30:	a8c00204 	addi	r3,r21,8
    ed34:	003f6306 	br	eac4 <_realloc_r+0xf4>
    ed38:	9005883a 	mov	r2,r18
    ed3c:	a8c00017 	ldw	r3,0(r21)
    ed40:	b821883a 	mov	r16,r23
    ed44:	b027883a 	mov	r19,r22
    ed48:	10c00015 	stw	r3,0(r2)
    ed4c:	a8c00117 	ldw	r3,4(r21)
    ed50:	10c00115 	stw	r3,4(r2)
    ed54:	a8c00217 	ldw	r3,8(r21)
    ed58:	10c00215 	stw	r3,8(r2)
    ed5c:	003f6a06 	br	eb08 <_realloc_r+0x138>
    ed60:	9c67883a 	add	r19,r19,r17
    ed64:	4445c83a 	sub	r2,r8,r17
    ed68:	e4c00215 	stw	r19,8(fp)
    ed6c:	10800054 	ori	r2,r2,1
    ed70:	98800115 	stw	r2,4(r19)
    ed74:	a8bfff17 	ldw	r2,-4(r21)
    ed78:	a009883a 	mov	r4,r20
    ed7c:	1080004c 	andi	r2,r2,1
    ed80:	1462b03a 	or	r17,r2,r17
    ed84:	ac7fff15 	stw	r17,-4(r21)
    ed88:	00130c00 	call	130c0 <__malloc_unlock>
    ed8c:	a805883a 	mov	r2,r21
    ed90:	003f6b06 	br	eb40 <_realloc_r+0x170>
    ed94:	a80b883a 	mov	r5,r21
    ed98:	9009883a 	mov	r4,r18
    ed9c:	000e8140 	call	e814 <memmove>
    eda0:	003f4e06 	br	eadc <_realloc_r+0x10c>
    eda4:	89000404 	addi	r4,r17,16
    eda8:	b93fbc16 	blt	r23,r4,ec9c <_realloc_r+0x2cc>
    edac:	b0800317 	ldw	r2,12(r22)
    edb0:	b0c00217 	ldw	r3,8(r22)
    edb4:	81bfff04 	addi	r6,r16,-4
    edb8:	01000904 	movi	r4,36
    edbc:	18800315 	stw	r2,12(r3)
    edc0:	10c00215 	stw	r3,8(r2)
    edc4:	b4800204 	addi	r18,r22,8
    edc8:	21804336 	bltu	r4,r6,eed8 <_realloc_r+0x508>
    edcc:	008004c4 	movi	r2,19
    edd0:	11803f2e 	bgeu	r2,r6,eed0 <_realloc_r+0x500>
    edd4:	a8800017 	ldw	r2,0(r21)
    edd8:	b0800215 	stw	r2,8(r22)
    eddc:	a8800117 	ldw	r2,4(r21)
    ede0:	b0800315 	stw	r2,12(r22)
    ede4:	008006c4 	movi	r2,27
    ede8:	11803f36 	bltu	r2,r6,eee8 <_realloc_r+0x518>
    edec:	b0800404 	addi	r2,r22,16
    edf0:	ad400204 	addi	r21,r21,8
    edf4:	a8c00017 	ldw	r3,0(r21)
    edf8:	10c00015 	stw	r3,0(r2)
    edfc:	a8c00117 	ldw	r3,4(r21)
    ee00:	10c00115 	stw	r3,4(r2)
    ee04:	a8c00217 	ldw	r3,8(r21)
    ee08:	10c00215 	stw	r3,8(r2)
    ee0c:	b447883a 	add	r3,r22,r17
    ee10:	bc45c83a 	sub	r2,r23,r17
    ee14:	e0c00215 	stw	r3,8(fp)
    ee18:	10800054 	ori	r2,r2,1
    ee1c:	18800115 	stw	r2,4(r3)
    ee20:	b0800117 	ldw	r2,4(r22)
    ee24:	a009883a 	mov	r4,r20
    ee28:	1080004c 	andi	r2,r2,1
    ee2c:	1462b03a 	or	r17,r2,r17
    ee30:	b4400115 	stw	r17,4(r22)
    ee34:	00130c00 	call	130c0 <__malloc_unlock>
    ee38:	9005883a 	mov	r2,r18
    ee3c:	003f4006 	br	eb40 <_realloc_r+0x170>
    ee40:	a8c00217 	ldw	r3,8(r21)
    ee44:	90c00215 	stw	r3,8(r18)
    ee48:	a8c00317 	ldw	r3,12(r21)
    ee4c:	90c00315 	stw	r3,12(r18)
    ee50:	30801126 	beq	r6,r2,ee98 <_realloc_r+0x4c8>
    ee54:	90800404 	addi	r2,r18,16
    ee58:	a8c00404 	addi	r3,r21,16
    ee5c:	003f1906 	br	eac4 <_realloc_r+0xf4>
    ee60:	90ffff17 	ldw	r3,-4(r18)
    ee64:	00bfff04 	movi	r2,-4
    ee68:	a825883a 	mov	r18,r21
    ee6c:	1884703a 	and	r2,r3,r2
    ee70:	80a1883a 	add	r16,r16,r2
    ee74:	003f2406 	br	eb08 <_realloc_r+0x138>
    ee78:	a8800217 	ldw	r2,8(r21)
    ee7c:	b0800415 	stw	r2,16(r22)
    ee80:	a8800317 	ldw	r2,12(r21)
    ee84:	b0800515 	stw	r2,20(r22)
    ee88:	31000a26 	beq	r6,r4,eeb4 <_realloc_r+0x4e4>
    ee8c:	b0800604 	addi	r2,r22,24
    ee90:	ad400404 	addi	r21,r21,16
    ee94:	003fa906 	br	ed3c <_realloc_r+0x36c>
    ee98:	a9000417 	ldw	r4,16(r21)
    ee9c:	90800604 	addi	r2,r18,24
    eea0:	a8c00604 	addi	r3,r21,24
    eea4:	91000415 	stw	r4,16(r18)
    eea8:	a9000517 	ldw	r4,20(r21)
    eeac:	91000515 	stw	r4,20(r18)
    eeb0:	003f0406 	br	eac4 <_realloc_r+0xf4>
    eeb4:	a8c00417 	ldw	r3,16(r21)
    eeb8:	ad400604 	addi	r21,r21,24
    eebc:	b0800804 	addi	r2,r22,32
    eec0:	b0c00615 	stw	r3,24(r22)
    eec4:	a8ffff17 	ldw	r3,-4(r21)
    eec8:	b0c00715 	stw	r3,28(r22)
    eecc:	003f9b06 	br	ed3c <_realloc_r+0x36c>
    eed0:	9005883a 	mov	r2,r18
    eed4:	003fc706 	br	edf4 <_realloc_r+0x424>
    eed8:	a80b883a 	mov	r5,r21
    eedc:	9009883a 	mov	r4,r18
    eee0:	000e8140 	call	e814 <memmove>
    eee4:	003fc906 	br	ee0c <_realloc_r+0x43c>
    eee8:	a8800217 	ldw	r2,8(r21)
    eeec:	b0800415 	stw	r2,16(r22)
    eef0:	a8800317 	ldw	r2,12(r21)
    eef4:	b0800515 	stw	r2,20(r22)
    eef8:	31000726 	beq	r6,r4,ef18 <_realloc_r+0x548>
    eefc:	b0800604 	addi	r2,r22,24
    ef00:	ad400404 	addi	r21,r21,16
    ef04:	003fbb06 	br	edf4 <_realloc_r+0x424>
    ef08:	a009883a 	mov	r4,r20
    ef0c:	00130c00 	call	130c0 <__malloc_unlock>
    ef10:	0005883a 	mov	r2,zero
    ef14:	003f0a06 	br	eb40 <_realloc_r+0x170>
    ef18:	a8c00417 	ldw	r3,16(r21)
    ef1c:	ad400604 	addi	r21,r21,24
    ef20:	b0800804 	addi	r2,r22,32
    ef24:	b0c00615 	stw	r3,24(r22)
    ef28:	a8ffff17 	ldw	r3,-4(r21)
    ef2c:	b0c00715 	stw	r3,28(r22)
    ef30:	003fb006 	br	edf4 <_realloc_r+0x424>

0000ef34 <__swbuf_r>:
    ef34:	defffb04 	addi	sp,sp,-20
    ef38:	dcc00315 	stw	r19,12(sp)
    ef3c:	dc800215 	stw	r18,8(sp)
    ef40:	dc000015 	stw	r16,0(sp)
    ef44:	dfc00415 	stw	ra,16(sp)
    ef48:	dc400115 	stw	r17,4(sp)
    ef4c:	2025883a 	mov	r18,r4
    ef50:	2827883a 	mov	r19,r5
    ef54:	3021883a 	mov	r16,r6
    ef58:	20000226 	beq	r4,zero,ef64 <__swbuf_r+0x30>
    ef5c:	20800e17 	ldw	r2,56(r4)
    ef60:	10004226 	beq	r2,zero,f06c <__swbuf_r+0x138>
    ef64:	80800617 	ldw	r2,24(r16)
    ef68:	8100030b 	ldhu	r4,12(r16)
    ef6c:	80800215 	stw	r2,8(r16)
    ef70:	2080020c 	andi	r2,r4,8
    ef74:	10003626 	beq	r2,zero,f050 <__swbuf_r+0x11c>
    ef78:	80c00417 	ldw	r3,16(r16)
    ef7c:	18003426 	beq	r3,zero,f050 <__swbuf_r+0x11c>
    ef80:	2088000c 	andi	r2,r4,8192
    ef84:	9c403fcc 	andi	r17,r19,255
    ef88:	10001a26 	beq	r2,zero,eff4 <__swbuf_r+0xc0>
    ef8c:	80800017 	ldw	r2,0(r16)
    ef90:	81000517 	ldw	r4,20(r16)
    ef94:	10c7c83a 	sub	r3,r2,r3
    ef98:	1900200e 	bge	r3,r4,f01c <__swbuf_r+0xe8>
    ef9c:	18c00044 	addi	r3,r3,1
    efa0:	81000217 	ldw	r4,8(r16)
    efa4:	11400044 	addi	r5,r2,1
    efa8:	81400015 	stw	r5,0(r16)
    efac:	213fffc4 	addi	r4,r4,-1
    efb0:	81000215 	stw	r4,8(r16)
    efb4:	14c00005 	stb	r19,0(r2)
    efb8:	80800517 	ldw	r2,20(r16)
    efbc:	10c01e26 	beq	r2,r3,f038 <__swbuf_r+0x104>
    efc0:	8080030b 	ldhu	r2,12(r16)
    efc4:	1080004c 	andi	r2,r2,1
    efc8:	10000226 	beq	r2,zero,efd4 <__swbuf_r+0xa0>
    efcc:	00800284 	movi	r2,10
    efd0:	88801926 	beq	r17,r2,f038 <__swbuf_r+0x104>
    efd4:	8805883a 	mov	r2,r17
    efd8:	dfc00417 	ldw	ra,16(sp)
    efdc:	dcc00317 	ldw	r19,12(sp)
    efe0:	dc800217 	ldw	r18,8(sp)
    efe4:	dc400117 	ldw	r17,4(sp)
    efe8:	dc000017 	ldw	r16,0(sp)
    efec:	dec00504 	addi	sp,sp,20
    eff0:	f800283a 	ret
    eff4:	81401917 	ldw	r5,100(r16)
    eff8:	00b7ffc4 	movi	r2,-8193
    effc:	21080014 	ori	r4,r4,8192
    f000:	2884703a 	and	r2,r5,r2
    f004:	80801915 	stw	r2,100(r16)
    f008:	80800017 	ldw	r2,0(r16)
    f00c:	8100030d 	sth	r4,12(r16)
    f010:	81000517 	ldw	r4,20(r16)
    f014:	10c7c83a 	sub	r3,r2,r3
    f018:	193fe016 	blt	r3,r4,ef9c <__swbuf_r+0x68>
    f01c:	800b883a 	mov	r5,r16
    f020:	9009883a 	mov	r4,r18
    f024:	00089640 	call	8964 <_fflush_r>
    f028:	1000071e 	bne	r2,zero,f048 <__swbuf_r+0x114>
    f02c:	80800017 	ldw	r2,0(r16)
    f030:	00c00044 	movi	r3,1
    f034:	003fda06 	br	efa0 <__swbuf_r+0x6c>
    f038:	800b883a 	mov	r5,r16
    f03c:	9009883a 	mov	r4,r18
    f040:	00089640 	call	8964 <_fflush_r>
    f044:	103fe326 	beq	r2,zero,efd4 <__swbuf_r+0xa0>
    f048:	00bfffc4 	movi	r2,-1
    f04c:	003fe206 	br	efd8 <__swbuf_r+0xa4>
    f050:	800b883a 	mov	r5,r16
    f054:	9009883a 	mov	r4,r18
    f058:	0006d6c0 	call	6d6c <__swsetup_r>
    f05c:	103ffa1e 	bne	r2,zero,f048 <__swbuf_r+0x114>
    f060:	8100030b 	ldhu	r4,12(r16)
    f064:	80c00417 	ldw	r3,16(r16)
    f068:	003fc506 	br	ef80 <__swbuf_r+0x4c>
    f06c:	0008d400 	call	8d40 <__sinit>
    f070:	003fbc06 	br	ef64 <__swbuf_r+0x30>

0000f074 <__swbuf>:
    f074:	008000b4 	movhi	r2,2
    f078:	1085ef04 	addi	r2,r2,6076
    f07c:	280d883a 	mov	r6,r5
    f080:	200b883a 	mov	r5,r4
    f084:	11000017 	ldw	r4,0(r2)
    f088:	000ef341 	jmpi	ef34 <__swbuf_r>

0000f08c <_wcrtomb_r>:
    f08c:	defff604 	addi	sp,sp,-40
    f090:	008000b4 	movhi	r2,2
    f094:	dc800815 	stw	r18,32(sp)
    f098:	dc400715 	stw	r17,28(sp)
    f09c:	dc000615 	stw	r16,24(sp)
    f0a0:	1085f304 	addi	r2,r2,6092
    f0a4:	dfc00915 	stw	ra,36(sp)
    f0a8:	2021883a 	mov	r16,r4
    f0ac:	3823883a 	mov	r17,r7
    f0b0:	14800017 	ldw	r18,0(r2)
    f0b4:	28001426 	beq	r5,zero,f108 <_wcrtomb_r+0x7c>
    f0b8:	d9400415 	stw	r5,16(sp)
    f0bc:	d9800515 	stw	r6,20(sp)
    f0c0:	00093c80 	call	93c8 <__locale_charset>
    f0c4:	d9800517 	ldw	r6,20(sp)
    f0c8:	d9400417 	ldw	r5,16(sp)
    f0cc:	100f883a 	mov	r7,r2
    f0d0:	dc400015 	stw	r17,0(sp)
    f0d4:	8009883a 	mov	r4,r16
    f0d8:	903ee83a 	callr	r18
    f0dc:	00ffffc4 	movi	r3,-1
    f0e0:	10c0031e 	bne	r2,r3,f0f0 <_wcrtomb_r+0x64>
    f0e4:	88000015 	stw	zero,0(r17)
    f0e8:	00c02284 	movi	r3,138
    f0ec:	80c00015 	stw	r3,0(r16)
    f0f0:	dfc00917 	ldw	ra,36(sp)
    f0f4:	dc800817 	ldw	r18,32(sp)
    f0f8:	dc400717 	ldw	r17,28(sp)
    f0fc:	dc000617 	ldw	r16,24(sp)
    f100:	dec00a04 	addi	sp,sp,40
    f104:	f800283a 	ret
    f108:	00093c80 	call	93c8 <__locale_charset>
    f10c:	100f883a 	mov	r7,r2
    f110:	dc400015 	stw	r17,0(sp)
    f114:	000d883a 	mov	r6,zero
    f118:	d9400104 	addi	r5,sp,4
    f11c:	8009883a 	mov	r4,r16
    f120:	903ee83a 	callr	r18
    f124:	003fed06 	br	f0dc <_wcrtomb_r+0x50>

0000f128 <wcrtomb>:
    f128:	defff604 	addi	sp,sp,-40
    f12c:	008000b4 	movhi	r2,2
    f130:	dc800615 	stw	r18,24(sp)
    f134:	dc400515 	stw	r17,20(sp)
    f138:	1085ef04 	addi	r2,r2,6076
    f13c:	dfc00915 	stw	ra,36(sp)
    f140:	dd000815 	stw	r20,32(sp)
    f144:	dcc00715 	stw	r19,28(sp)
    f148:	dc000415 	stw	r16,16(sp)
    f14c:	3025883a 	mov	r18,r6
    f150:	14400017 	ldw	r17,0(r2)
    f154:	20001926 	beq	r4,zero,f1bc <wcrtomb+0x94>
    f158:	008000b4 	movhi	r2,2
    f15c:	1085f304 	addi	r2,r2,6092
    f160:	15000017 	ldw	r20,0(r2)
    f164:	2021883a 	mov	r16,r4
    f168:	2827883a 	mov	r19,r5
    f16c:	00093c80 	call	93c8 <__locale_charset>
    f170:	100f883a 	mov	r7,r2
    f174:	dc800015 	stw	r18,0(sp)
    f178:	980d883a 	mov	r6,r19
    f17c:	800b883a 	mov	r5,r16
    f180:	8809883a 	mov	r4,r17
    f184:	a03ee83a 	callr	r20
    f188:	00ffffc4 	movi	r3,-1
    f18c:	10c0031e 	bne	r2,r3,f19c <wcrtomb+0x74>
    f190:	90000015 	stw	zero,0(r18)
    f194:	00c02284 	movi	r3,138
    f198:	88c00015 	stw	r3,0(r17)
    f19c:	dfc00917 	ldw	ra,36(sp)
    f1a0:	dd000817 	ldw	r20,32(sp)
    f1a4:	dcc00717 	ldw	r19,28(sp)
    f1a8:	dc800617 	ldw	r18,24(sp)
    f1ac:	dc400517 	ldw	r17,20(sp)
    f1b0:	dc000417 	ldw	r16,16(sp)
    f1b4:	dec00a04 	addi	sp,sp,40
    f1b8:	f800283a 	ret
    f1bc:	008000b4 	movhi	r2,2
    f1c0:	1085f304 	addi	r2,r2,6092
    f1c4:	14000017 	ldw	r16,0(r2)
    f1c8:	00093c80 	call	93c8 <__locale_charset>
    f1cc:	100f883a 	mov	r7,r2
    f1d0:	dc800015 	stw	r18,0(sp)
    f1d4:	000d883a 	mov	r6,zero
    f1d8:	d9400104 	addi	r5,sp,4
    f1dc:	8809883a 	mov	r4,r17
    f1e0:	803ee83a 	callr	r16
    f1e4:	003fe806 	br	f188 <wcrtomb+0x60>

0000f1e8 <__ascii_wctomb>:
    f1e8:	28000526 	beq	r5,zero,f200 <__ascii_wctomb+0x18>
    f1ec:	00803fc4 	movi	r2,255
    f1f0:	11800536 	bltu	r2,r6,f208 <__ascii_wctomb+0x20>
    f1f4:	29800005 	stb	r6,0(r5)
    f1f8:	00800044 	movi	r2,1
    f1fc:	f800283a 	ret
    f200:	0005883a 	mov	r2,zero
    f204:	f800283a 	ret
    f208:	00802284 	movi	r2,138
    f20c:	20800015 	stw	r2,0(r4)
    f210:	00bfffc4 	movi	r2,-1
    f214:	f800283a 	ret

0000f218 <_wctomb_r>:
    f218:	008000b4 	movhi	r2,2
    f21c:	defff904 	addi	sp,sp,-28
    f220:	1085f304 	addi	r2,r2,6092
    f224:	dfc00615 	stw	ra,24(sp)
    f228:	dc400515 	stw	r17,20(sp)
    f22c:	dc000415 	stw	r16,16(sp)
    f230:	3823883a 	mov	r17,r7
    f234:	14000017 	ldw	r16,0(r2)
    f238:	d9000115 	stw	r4,4(sp)
    f23c:	d9400215 	stw	r5,8(sp)
    f240:	d9800315 	stw	r6,12(sp)
    f244:	00093c80 	call	93c8 <__locale_charset>
    f248:	d9800317 	ldw	r6,12(sp)
    f24c:	d9400217 	ldw	r5,8(sp)
    f250:	d9000117 	ldw	r4,4(sp)
    f254:	100f883a 	mov	r7,r2
    f258:	dc400015 	stw	r17,0(sp)
    f25c:	803ee83a 	callr	r16
    f260:	dfc00617 	ldw	ra,24(sp)
    f264:	dc400517 	ldw	r17,20(sp)
    f268:	dc000417 	ldw	r16,16(sp)
    f26c:	dec00704 	addi	sp,sp,28
    f270:	f800283a 	ret

0000f274 <__udivdi3>:
    f274:	defff504 	addi	sp,sp,-44
    f278:	dcc00415 	stw	r19,16(sp)
    f27c:	dc000115 	stw	r16,4(sp)
    f280:	dfc00a15 	stw	ra,40(sp)
    f284:	df000915 	stw	fp,36(sp)
    f288:	ddc00815 	stw	r23,32(sp)
    f28c:	dd800715 	stw	r22,28(sp)
    f290:	dd400615 	stw	r21,24(sp)
    f294:	dd000515 	stw	r20,20(sp)
    f298:	dc800315 	stw	r18,12(sp)
    f29c:	dc400215 	stw	r17,8(sp)
    f2a0:	2027883a 	mov	r19,r4
    f2a4:	2821883a 	mov	r16,r5
    f2a8:	3800411e 	bne	r7,zero,f3b0 <__udivdi3+0x13c>
    f2ac:	3023883a 	mov	r17,r6
    f2b0:	2025883a 	mov	r18,r4
    f2b4:	2980522e 	bgeu	r5,r6,f400 <__udivdi3+0x18c>
    f2b8:	00bfffd4 	movui	r2,65535
    f2bc:	282d883a 	mov	r22,r5
    f2c0:	1180a836 	bltu	r2,r6,f564 <__udivdi3+0x2f0>
    f2c4:	00803fc4 	movi	r2,255
    f2c8:	1185803a 	cmpltu	r2,r2,r6
    f2cc:	100490fa 	slli	r2,r2,3
    f2d0:	3086d83a 	srl	r3,r6,r2
    f2d4:	010000b4 	movhi	r4,2
    f2d8:	213d8204 	addi	r4,r4,-2552
    f2dc:	20c7883a 	add	r3,r4,r3
    f2e0:	18c00003 	ldbu	r3,0(r3)
    f2e4:	1885883a 	add	r2,r3,r2
    f2e8:	00c00804 	movi	r3,32
    f2ec:	1887c83a 	sub	r3,r3,r2
    f2f0:	18000526 	beq	r3,zero,f308 <__udivdi3+0x94>
    f2f4:	80e0983a 	sll	r16,r16,r3
    f2f8:	9884d83a 	srl	r2,r19,r2
    f2fc:	30e2983a 	sll	r17,r6,r3
    f300:	98e4983a 	sll	r18,r19,r3
    f304:	142cb03a 	or	r22,r2,r16
    f308:	882ad43a 	srli	r21,r17,16
    f30c:	b009883a 	mov	r4,r22
    f310:	8d3fffcc 	andi	r20,r17,65535
    f314:	a80b883a 	mov	r5,r21
    f318:	000fe800 	call	fe80 <__umodsi3>
    f31c:	b009883a 	mov	r4,r22
    f320:	a80b883a 	mov	r5,r21
    f324:	1027883a 	mov	r19,r2
    f328:	000fe1c0 	call	fe1c <__udivsi3>
    f32c:	102d883a 	mov	r22,r2
    f330:	9826943a 	slli	r19,r19,16
    f334:	9004d43a 	srli	r2,r18,16
    f338:	a5a1383a 	mul	r16,r20,r22
    f33c:	14c4b03a 	or	r2,r2,r19
    f340:	1400052e 	bgeu	r2,r16,f358 <__udivdi3+0xe4>
    f344:	1445883a 	add	r2,r2,r17
    f348:	b0ffffc4 	addi	r3,r22,-1
    f34c:	14400136 	bltu	r2,r17,f354 <__udivdi3+0xe0>
    f350:	14012336 	bltu	r2,r16,f7e0 <__udivdi3+0x56c>
    f354:	182d883a 	mov	r22,r3
    f358:	1421c83a 	sub	r16,r2,r16
    f35c:	a80b883a 	mov	r5,r21
    f360:	8009883a 	mov	r4,r16
    f364:	000fe800 	call	fe80 <__umodsi3>
    f368:	1027883a 	mov	r19,r2
    f36c:	a80b883a 	mov	r5,r21
    f370:	8009883a 	mov	r4,r16
    f374:	000fe1c0 	call	fe1c <__udivsi3>
    f378:	9826943a 	slli	r19,r19,16
    f37c:	a0a9383a 	mul	r20,r20,r2
    f380:	94bfffcc 	andi	r18,r18,65535
    f384:	94e4b03a 	or	r18,r18,r19
    f388:	9500052e 	bgeu	r18,r20,f3a0 <__udivdi3+0x12c>
    f38c:	8ca5883a 	add	r18,r17,r18
    f390:	10ffffc4 	addi	r3,r2,-1
    f394:	9440f136 	bltu	r18,r17,f75c <__udivdi3+0x4e8>
    f398:	9500f02e 	bgeu	r18,r20,f75c <__udivdi3+0x4e8>
    f39c:	10bfff84 	addi	r2,r2,-2
    f3a0:	b00c943a 	slli	r6,r22,16
    f3a4:	0007883a 	mov	r3,zero
    f3a8:	3084b03a 	or	r2,r6,r2
    f3ac:	00005906 	br	f514 <__udivdi3+0x2a0>
    f3b0:	29c05636 	bltu	r5,r7,f50c <__udivdi3+0x298>
    f3b4:	00bfffd4 	movui	r2,65535
    f3b8:	11c0622e 	bgeu	r2,r7,f544 <__udivdi3+0x2d0>
    f3bc:	00804034 	movhi	r2,256
    f3c0:	10bfffc4 	addi	r2,r2,-1
    f3c4:	11c0ee36 	bltu	r2,r7,f780 <__udivdi3+0x50c>
    f3c8:	00800404 	movi	r2,16
    f3cc:	3886d83a 	srl	r3,r7,r2
    f3d0:	010000b4 	movhi	r4,2
    f3d4:	213d8204 	addi	r4,r4,-2552
    f3d8:	20c7883a 	add	r3,r4,r3
    f3dc:	18c00003 	ldbu	r3,0(r3)
    f3e0:	05400804 	movi	r21,32
    f3e4:	1885883a 	add	r2,r3,r2
    f3e8:	a8abc83a 	sub	r21,r21,r2
    f3ec:	a800621e 	bne	r21,zero,f578 <__udivdi3+0x304>
    f3f0:	3c00e936 	bltu	r7,r16,f798 <__udivdi3+0x524>
    f3f4:	9985403a 	cmpgeu	r2,r19,r6
    f3f8:	0007883a 	mov	r3,zero
    f3fc:	00004506 	br	f514 <__udivdi3+0x2a0>
    f400:	3000041e 	bne	r6,zero,f414 <__udivdi3+0x1a0>
    f404:	000b883a 	mov	r5,zero
    f408:	01000044 	movi	r4,1
    f40c:	000fe1c0 	call	fe1c <__udivsi3>
    f410:	1023883a 	mov	r17,r2
    f414:	00bfffd4 	movui	r2,65535
    f418:	14404e2e 	bgeu	r2,r17,f554 <__udivdi3+0x2e0>
    f41c:	00804034 	movhi	r2,256
    f420:	10bfffc4 	addi	r2,r2,-1
    f424:	1440d836 	bltu	r2,r17,f788 <__udivdi3+0x514>
    f428:	00800404 	movi	r2,16
    f42c:	8886d83a 	srl	r3,r17,r2
    f430:	010000b4 	movhi	r4,2
    f434:	213d8204 	addi	r4,r4,-2552
    f438:	20c7883a 	add	r3,r4,r3
    f43c:	18c00003 	ldbu	r3,0(r3)
    f440:	1885883a 	add	r2,r3,r2
    f444:	00c00804 	movi	r3,32
    f448:	1887c83a 	sub	r3,r3,r2
    f44c:	18008f1e 	bne	r3,zero,f68c <__udivdi3+0x418>
    f450:	882ad43a 	srli	r21,r17,16
    f454:	8461c83a 	sub	r16,r16,r17
    f458:	8d3fffcc 	andi	r20,r17,65535
    f45c:	00c00044 	movi	r3,1
    f460:	8009883a 	mov	r4,r16
    f464:	a80b883a 	mov	r5,r21
    f468:	d8c00015 	stw	r3,0(sp)
    f46c:	000fe800 	call	fe80 <__umodsi3>
    f470:	8009883a 	mov	r4,r16
    f474:	a80b883a 	mov	r5,r21
    f478:	1027883a 	mov	r19,r2
    f47c:	000fe1c0 	call	fe1c <__udivsi3>
    f480:	9826943a 	slli	r19,r19,16
    f484:	9008d43a 	srli	r4,r18,16
    f488:	1521383a 	mul	r16,r2,r20
    f48c:	102d883a 	mov	r22,r2
    f490:	24c8b03a 	or	r4,r4,r19
    f494:	d8c00017 	ldw	r3,0(sp)
    f498:	2400052e 	bgeu	r4,r16,f4b0 <__udivdi3+0x23c>
    f49c:	2449883a 	add	r4,r4,r17
    f4a0:	b0bfffc4 	addi	r2,r22,-1
    f4a4:	24400136 	bltu	r4,r17,f4ac <__udivdi3+0x238>
    f4a8:	2400ca36 	bltu	r4,r16,f7d4 <__udivdi3+0x560>
    f4ac:	102d883a 	mov	r22,r2
    f4b0:	2421c83a 	sub	r16,r4,r16
    f4b4:	a80b883a 	mov	r5,r21
    f4b8:	8009883a 	mov	r4,r16
    f4bc:	d8c00015 	stw	r3,0(sp)
    f4c0:	000fe800 	call	fe80 <__umodsi3>
    f4c4:	1027883a 	mov	r19,r2
    f4c8:	a80b883a 	mov	r5,r21
    f4cc:	8009883a 	mov	r4,r16
    f4d0:	000fe1c0 	call	fe1c <__udivsi3>
    f4d4:	9826943a 	slli	r19,r19,16
    f4d8:	1529383a 	mul	r20,r2,r20
    f4dc:	94bfffcc 	andi	r18,r18,65535
    f4e0:	94e4b03a 	or	r18,r18,r19
    f4e4:	d8c00017 	ldw	r3,0(sp)
    f4e8:	9500052e 	bgeu	r18,r20,f500 <__udivdi3+0x28c>
    f4ec:	8ca5883a 	add	r18,r17,r18
    f4f0:	113fffc4 	addi	r4,r2,-1
    f4f4:	94409736 	bltu	r18,r17,f754 <__udivdi3+0x4e0>
    f4f8:	9500962e 	bgeu	r18,r20,f754 <__udivdi3+0x4e0>
    f4fc:	10bfff84 	addi	r2,r2,-2
    f500:	b00c943a 	slli	r6,r22,16
    f504:	3084b03a 	or	r2,r6,r2
    f508:	00000206 	br	f514 <__udivdi3+0x2a0>
    f50c:	0007883a 	mov	r3,zero
    f510:	0005883a 	mov	r2,zero
    f514:	dfc00a17 	ldw	ra,40(sp)
    f518:	df000917 	ldw	fp,36(sp)
    f51c:	ddc00817 	ldw	r23,32(sp)
    f520:	dd800717 	ldw	r22,28(sp)
    f524:	dd400617 	ldw	r21,24(sp)
    f528:	dd000517 	ldw	r20,20(sp)
    f52c:	dcc00417 	ldw	r19,16(sp)
    f530:	dc800317 	ldw	r18,12(sp)
    f534:	dc400217 	ldw	r17,8(sp)
    f538:	dc000117 	ldw	r16,4(sp)
    f53c:	dec00b04 	addi	sp,sp,44
    f540:	f800283a 	ret
    f544:	00803fc4 	movi	r2,255
    f548:	11c5803a 	cmpltu	r2,r2,r7
    f54c:	100490fa 	slli	r2,r2,3
    f550:	003f9e06 	br	f3cc <__udivdi3+0x158>
    f554:	00803fc4 	movi	r2,255
    f558:	1445803a 	cmpltu	r2,r2,r17
    f55c:	100490fa 	slli	r2,r2,3
    f560:	003fb206 	br	f42c <__udivdi3+0x1b8>
    f564:	00804034 	movhi	r2,256
    f568:	10bfffc4 	addi	r2,r2,-1
    f56c:	11808836 	bltu	r2,r6,f790 <__udivdi3+0x51c>
    f570:	00800404 	movi	r2,16
    f574:	003f5606 	br	f2d0 <__udivdi3+0x5c>
    f578:	30aed83a 	srl	r23,r6,r2
    f57c:	3d4e983a 	sll	r7,r7,r21
    f580:	80acd83a 	srl	r22,r16,r2
    f584:	9884d83a 	srl	r2,r19,r2
    f588:	3deeb03a 	or	r23,r7,r23
    f58c:	b824d43a 	srli	r18,r23,16
    f590:	8560983a 	sll	r16,r16,r21
    f594:	b009883a 	mov	r4,r22
    f598:	900b883a 	mov	r5,r18
    f59c:	3568983a 	sll	r20,r6,r21
    f5a0:	1420b03a 	or	r16,r2,r16
    f5a4:	000fe800 	call	fe80 <__umodsi3>
    f5a8:	b009883a 	mov	r4,r22
    f5ac:	900b883a 	mov	r5,r18
    f5b0:	1023883a 	mov	r17,r2
    f5b4:	000fe1c0 	call	fe1c <__udivsi3>
    f5b8:	8808943a 	slli	r4,r17,16
    f5bc:	bf3fffcc 	andi	fp,r23,65535
    f5c0:	8006d43a 	srli	r3,r16,16
    f5c4:	e0a3383a 	mul	r17,fp,r2
    f5c8:	100d883a 	mov	r6,r2
    f5cc:	1906b03a 	or	r3,r3,r4
    f5d0:	1c40042e 	bgeu	r3,r17,f5e4 <__udivdi3+0x370>
    f5d4:	1dc7883a 	add	r3,r3,r23
    f5d8:	10bfffc4 	addi	r2,r2,-1
    f5dc:	1dc0752e 	bgeu	r3,r23,f7b4 <__udivdi3+0x540>
    f5e0:	100d883a 	mov	r6,r2
    f5e4:	1c63c83a 	sub	r17,r3,r17
    f5e8:	900b883a 	mov	r5,r18
    f5ec:	8809883a 	mov	r4,r17
    f5f0:	d9800015 	stw	r6,0(sp)
    f5f4:	000fe800 	call	fe80 <__umodsi3>
    f5f8:	102d883a 	mov	r22,r2
    f5fc:	8809883a 	mov	r4,r17
    f600:	900b883a 	mov	r5,r18
    f604:	000fe1c0 	call	fe1c <__udivsi3>
    f608:	b02c943a 	slli	r22,r22,16
    f60c:	e089383a 	mul	r4,fp,r2
    f610:	843fffcc 	andi	r16,r16,65535
    f614:	85a0b03a 	or	r16,r16,r22
    f618:	d9800017 	ldw	r6,0(sp)
    f61c:	8100042e 	bgeu	r16,r4,f630 <__udivdi3+0x3bc>
    f620:	85e1883a 	add	r16,r16,r23
    f624:	10ffffc4 	addi	r3,r2,-1
    f628:	85c05e2e 	bgeu	r16,r23,f7a4 <__udivdi3+0x530>
    f62c:	1805883a 	mov	r2,r3
    f630:	300c943a 	slli	r6,r6,16
    f634:	a17fffcc 	andi	r5,r20,65535
    f638:	a028d43a 	srli	r20,r20,16
    f63c:	3084b03a 	or	r2,r6,r2
    f640:	10ffffcc 	andi	r3,r2,65535
    f644:	100cd43a 	srli	r6,r2,16
    f648:	194f383a 	mul	r7,r3,r5
    f64c:	1d07383a 	mul	r3,r3,r20
    f650:	314b383a 	mul	r5,r6,r5
    f654:	3810d43a 	srli	r8,r7,16
    f658:	8121c83a 	sub	r16,r16,r4
    f65c:	1947883a 	add	r3,r3,r5
    f660:	40c7883a 	add	r3,r8,r3
    f664:	350d383a 	mul	r6,r6,r20
    f668:	1940022e 	bgeu	r3,r5,f674 <__udivdi3+0x400>
    f66c:	01000074 	movhi	r4,1
    f670:	310d883a 	add	r6,r6,r4
    f674:	1828d43a 	srli	r20,r3,16
    f678:	a18d883a 	add	r6,r20,r6
    f67c:	81803e36 	bltu	r16,r6,f778 <__udivdi3+0x504>
    f680:	81803826 	beq	r16,r6,f764 <__udivdi3+0x4f0>
    f684:	0007883a 	mov	r3,zero
    f688:	003fa206 	br	f514 <__udivdi3+0x2a0>
    f68c:	88e2983a 	sll	r17,r17,r3
    f690:	80a8d83a 	srl	r20,r16,r2
    f694:	80e0983a 	sll	r16,r16,r3
    f698:	882ad43a 	srli	r21,r17,16
    f69c:	9884d83a 	srl	r2,r19,r2
    f6a0:	a009883a 	mov	r4,r20
    f6a4:	a80b883a 	mov	r5,r21
    f6a8:	142eb03a 	or	r23,r2,r16
    f6ac:	98e4983a 	sll	r18,r19,r3
    f6b0:	000fe800 	call	fe80 <__umodsi3>
    f6b4:	a009883a 	mov	r4,r20
    f6b8:	a80b883a 	mov	r5,r21
    f6bc:	1021883a 	mov	r16,r2
    f6c0:	000fe1c0 	call	fe1c <__udivsi3>
    f6c4:	1039883a 	mov	fp,r2
    f6c8:	8d3fffcc 	andi	r20,r17,65535
    f6cc:	8020943a 	slli	r16,r16,16
    f6d0:	b804d43a 	srli	r2,r23,16
    f6d4:	a72d383a 	mul	r22,r20,fp
    f6d8:	1404b03a 	or	r2,r2,r16
    f6dc:	1580062e 	bgeu	r2,r22,f6f8 <__udivdi3+0x484>
    f6e0:	1445883a 	add	r2,r2,r17
    f6e4:	e0ffffc4 	addi	r3,fp,-1
    f6e8:	14403836 	bltu	r2,r17,f7cc <__udivdi3+0x558>
    f6ec:	1580372e 	bgeu	r2,r22,f7cc <__udivdi3+0x558>
    f6f0:	e73fff84 	addi	fp,fp,-2
    f6f4:	1445883a 	add	r2,r2,r17
    f6f8:	15adc83a 	sub	r22,r2,r22
    f6fc:	a80b883a 	mov	r5,r21
    f700:	b009883a 	mov	r4,r22
    f704:	000fe800 	call	fe80 <__umodsi3>
    f708:	1027883a 	mov	r19,r2
    f70c:	b009883a 	mov	r4,r22
    f710:	a80b883a 	mov	r5,r21
    f714:	000fe1c0 	call	fe1c <__udivsi3>
    f718:	9826943a 	slli	r19,r19,16
    f71c:	a0a1383a 	mul	r16,r20,r2
    f720:	b93fffcc 	andi	r4,r23,65535
    f724:	24c8b03a 	or	r4,r4,r19
    f728:	2400062e 	bgeu	r4,r16,f744 <__udivdi3+0x4d0>
    f72c:	2449883a 	add	r4,r4,r17
    f730:	10ffffc4 	addi	r3,r2,-1
    f734:	24402336 	bltu	r4,r17,f7c4 <__udivdi3+0x550>
    f738:	2400222e 	bgeu	r4,r16,f7c4 <__udivdi3+0x550>
    f73c:	10bfff84 	addi	r2,r2,-2
    f740:	2449883a 	add	r4,r4,r17
    f744:	e038943a 	slli	fp,fp,16
    f748:	2421c83a 	sub	r16,r4,r16
    f74c:	e086b03a 	or	r3,fp,r2
    f750:	003f4306 	br	f460 <__udivdi3+0x1ec>
    f754:	2005883a 	mov	r2,r4
    f758:	003f6906 	br	f500 <__udivdi3+0x28c>
    f75c:	1805883a 	mov	r2,r3
    f760:	003f0f06 	br	f3a0 <__udivdi3+0x12c>
    f764:	1806943a 	slli	r3,r3,16
    f768:	9d66983a 	sll	r19,r19,r21
    f76c:	39ffffcc 	andi	r7,r7,65535
    f770:	19c7883a 	add	r3,r3,r7
    f774:	98ffc32e 	bgeu	r19,r3,f684 <__udivdi3+0x410>
    f778:	10bfffc4 	addi	r2,r2,-1
    f77c:	003fc106 	br	f684 <__udivdi3+0x410>
    f780:	00800604 	movi	r2,24
    f784:	003f1106 	br	f3cc <__udivdi3+0x158>
    f788:	00800604 	movi	r2,24
    f78c:	003f2706 	br	f42c <__udivdi3+0x1b8>
    f790:	00800604 	movi	r2,24
    f794:	003ece06 	br	f2d0 <__udivdi3+0x5c>
    f798:	0007883a 	mov	r3,zero
    f79c:	00800044 	movi	r2,1
    f7a0:	003f5c06 	br	f514 <__udivdi3+0x2a0>
    f7a4:	813fa12e 	bgeu	r16,r4,f62c <__udivdi3+0x3b8>
    f7a8:	10bfff84 	addi	r2,r2,-2
    f7ac:	85e1883a 	add	r16,r16,r23
    f7b0:	003f9f06 	br	f630 <__udivdi3+0x3bc>
    f7b4:	1c7f8a2e 	bgeu	r3,r17,f5e0 <__udivdi3+0x36c>
    f7b8:	31bfff84 	addi	r6,r6,-2
    f7bc:	1dc7883a 	add	r3,r3,r23
    f7c0:	003f8806 	br	f5e4 <__udivdi3+0x370>
    f7c4:	1805883a 	mov	r2,r3
    f7c8:	003fde06 	br	f744 <__udivdi3+0x4d0>
    f7cc:	1839883a 	mov	fp,r3
    f7d0:	003fc906 	br	f6f8 <__udivdi3+0x484>
    f7d4:	b5bfff84 	addi	r22,r22,-2
    f7d8:	2449883a 	add	r4,r4,r17
    f7dc:	003f3406 	br	f4b0 <__udivdi3+0x23c>
    f7e0:	b5bfff84 	addi	r22,r22,-2
    f7e4:	1445883a 	add	r2,r2,r17
    f7e8:	003edb06 	br	f358 <__udivdi3+0xe4>

0000f7ec <__umoddi3>:
    f7ec:	defff404 	addi	sp,sp,-48
    f7f0:	df000a15 	stw	fp,40(sp)
    f7f4:	dc400315 	stw	r17,12(sp)
    f7f8:	dc000215 	stw	r16,8(sp)
    f7fc:	dfc00b15 	stw	ra,44(sp)
    f800:	ddc00915 	stw	r23,36(sp)
    f804:	dd800815 	stw	r22,32(sp)
    f808:	dd400715 	stw	r21,28(sp)
    f80c:	dd000615 	stw	r20,24(sp)
    f810:	dcc00515 	stw	r19,20(sp)
    f814:	dc800415 	stw	r18,16(sp)
    f818:	2021883a 	mov	r16,r4
    f81c:	2823883a 	mov	r17,r5
    f820:	2839883a 	mov	fp,r5
    f824:	38003c1e 	bne	r7,zero,f918 <__umoddi3+0x12c>
    f828:	3027883a 	mov	r19,r6
    f82c:	2029883a 	mov	r20,r4
    f830:	2980512e 	bgeu	r5,r6,f978 <__umoddi3+0x18c>
    f834:	00bfffd4 	movui	r2,65535
    f838:	11809a36 	bltu	r2,r6,faa4 <__umoddi3+0x2b8>
    f83c:	01003fc4 	movi	r4,255
    f840:	2189803a 	cmpltu	r4,r4,r6
    f844:	200890fa 	slli	r4,r4,3
    f848:	3104d83a 	srl	r2,r6,r4
    f84c:	00c000b4 	movhi	r3,2
    f850:	18fd8204 	addi	r3,r3,-2552
    f854:	1885883a 	add	r2,r3,r2
    f858:	10c00003 	ldbu	r3,0(r2)
    f85c:	00800804 	movi	r2,32
    f860:	1909883a 	add	r4,r3,r4
    f864:	1125c83a 	sub	r18,r2,r4
    f868:	90000526 	beq	r18,zero,f880 <__umoddi3+0x94>
    f86c:	8ca2983a 	sll	r17,r17,r18
    f870:	8108d83a 	srl	r4,r16,r4
    f874:	34a6983a 	sll	r19,r6,r18
    f878:	84a8983a 	sll	r20,r16,r18
    f87c:	2478b03a 	or	fp,r4,r17
    f880:	982ed43a 	srli	r23,r19,16
    f884:	e009883a 	mov	r4,fp
    f888:	9dbfffcc 	andi	r22,r19,65535
    f88c:	b80b883a 	mov	r5,r23
    f890:	000fe800 	call	fe80 <__umodsi3>
    f894:	e009883a 	mov	r4,fp
    f898:	b80b883a 	mov	r5,r23
    f89c:	102b883a 	mov	r21,r2
    f8a0:	000fe1c0 	call	fe1c <__udivsi3>
    f8a4:	a806943a 	slli	r3,r21,16
    f8a8:	a008d43a 	srli	r4,r20,16
    f8ac:	b085383a 	mul	r2,r22,r2
    f8b0:	20c8b03a 	or	r4,r4,r3
    f8b4:	2080032e 	bgeu	r4,r2,f8c4 <__umoddi3+0xd8>
    f8b8:	24c9883a 	add	r4,r4,r19
    f8bc:	24c00136 	bltu	r4,r19,f8c4 <__umoddi3+0xd8>
    f8c0:	20811036 	bltu	r4,r2,fd04 <__umoddi3+0x518>
    f8c4:	20abc83a 	sub	r21,r4,r2
    f8c8:	b80b883a 	mov	r5,r23
    f8cc:	a809883a 	mov	r4,r21
    f8d0:	000fe800 	call	fe80 <__umodsi3>
    f8d4:	1023883a 	mov	r17,r2
    f8d8:	b80b883a 	mov	r5,r23
    f8dc:	a809883a 	mov	r4,r21
    f8e0:	000fe1c0 	call	fe1c <__udivsi3>
    f8e4:	8822943a 	slli	r17,r17,16
    f8e8:	b085383a 	mul	r2,r22,r2
    f8ec:	a0ffffcc 	andi	r3,r20,65535
    f8f0:	1c46b03a 	or	r3,r3,r17
    f8f4:	1880042e 	bgeu	r3,r2,f908 <__umoddi3+0x11c>
    f8f8:	1cc7883a 	add	r3,r3,r19
    f8fc:	1cc00236 	bltu	r3,r19,f908 <__umoddi3+0x11c>
    f900:	1880012e 	bgeu	r3,r2,f908 <__umoddi3+0x11c>
    f904:	1cc7883a 	add	r3,r3,r19
    f908:	1885c83a 	sub	r2,r3,r2
    f90c:	1484d83a 	srl	r2,r2,r18
    f910:	0007883a 	mov	r3,zero
    f914:	00004f06 	br	fa54 <__umoddi3+0x268>
    f918:	29c04c36 	bltu	r5,r7,fa4c <__umoddi3+0x260>
    f91c:	00bfffd4 	movui	r2,65535
    f920:	11c0582e 	bgeu	r2,r7,fa84 <__umoddi3+0x298>
    f924:	00804034 	movhi	r2,256
    f928:	10bfffc4 	addi	r2,r2,-1
    f92c:	11c0e736 	bltu	r2,r7,fccc <__umoddi3+0x4e0>
    f930:	01000404 	movi	r4,16
    f934:	3904d83a 	srl	r2,r7,r4
    f938:	00c000b4 	movhi	r3,2
    f93c:	18fd8204 	addi	r3,r3,-2552
    f940:	1885883a 	add	r2,r3,r2
    f944:	14c00003 	ldbu	r19,0(r2)
    f948:	00c00804 	movi	r3,32
    f94c:	9927883a 	add	r19,r19,r4
    f950:	1ce9c83a 	sub	r20,r3,r19
    f954:	a000581e 	bne	r20,zero,fab8 <__umoddi3+0x2cc>
    f958:	3c400136 	bltu	r7,r17,f960 <__umoddi3+0x174>
    f95c:	8180eb36 	bltu	r16,r6,fd0c <__umoddi3+0x520>
    f960:	8185c83a 	sub	r2,r16,r6
    f964:	89e3c83a 	sub	r17,r17,r7
    f968:	8089803a 	cmpltu	r4,r16,r2
    f96c:	8939c83a 	sub	fp,r17,r4
    f970:	e007883a 	mov	r3,fp
    f974:	00003706 	br	fa54 <__umoddi3+0x268>
    f978:	3000041e 	bne	r6,zero,f98c <__umoddi3+0x1a0>
    f97c:	000b883a 	mov	r5,zero
    f980:	01000044 	movi	r4,1
    f984:	000fe1c0 	call	fe1c <__udivsi3>
    f988:	1027883a 	mov	r19,r2
    f98c:	00bfffd4 	movui	r2,65535
    f990:	14c0402e 	bgeu	r2,r19,fa94 <__umoddi3+0x2a8>
    f994:	00804034 	movhi	r2,256
    f998:	10bfffc4 	addi	r2,r2,-1
    f99c:	14c0cd36 	bltu	r2,r19,fcd4 <__umoddi3+0x4e8>
    f9a0:	00800404 	movi	r2,16
    f9a4:	9886d83a 	srl	r3,r19,r2
    f9a8:	010000b4 	movhi	r4,2
    f9ac:	213d8204 	addi	r4,r4,-2552
    f9b0:	20c7883a 	add	r3,r4,r3
    f9b4:	18c00003 	ldbu	r3,0(r3)
    f9b8:	1887883a 	add	r3,r3,r2
    f9bc:	00800804 	movi	r2,32
    f9c0:	10e5c83a 	sub	r18,r2,r3
    f9c4:	9000901e 	bne	r18,zero,fc08 <__umoddi3+0x41c>
    f9c8:	982cd43a 	srli	r22,r19,16
    f9cc:	8ce3c83a 	sub	r17,r17,r19
    f9d0:	9d7fffcc 	andi	r21,r19,65535
    f9d4:	b00b883a 	mov	r5,r22
    f9d8:	8809883a 	mov	r4,r17
    f9dc:	000fe800 	call	fe80 <__umodsi3>
    f9e0:	8809883a 	mov	r4,r17
    f9e4:	b00b883a 	mov	r5,r22
    f9e8:	1021883a 	mov	r16,r2
    f9ec:	000fe1c0 	call	fe1c <__udivsi3>
    f9f0:	8006943a 	slli	r3,r16,16
    f9f4:	a008d43a 	srli	r4,r20,16
    f9f8:	1545383a 	mul	r2,r2,r21
    f9fc:	20c8b03a 	or	r4,r4,r3
    fa00:	2080042e 	bgeu	r4,r2,fa14 <__umoddi3+0x228>
    fa04:	24c9883a 	add	r4,r4,r19
    fa08:	24c00236 	bltu	r4,r19,fa14 <__umoddi3+0x228>
    fa0c:	2080012e 	bgeu	r4,r2,fa14 <__umoddi3+0x228>
    fa10:	24c9883a 	add	r4,r4,r19
    fa14:	20a1c83a 	sub	r16,r4,r2
    fa18:	b00b883a 	mov	r5,r22
    fa1c:	8009883a 	mov	r4,r16
    fa20:	000fe800 	call	fe80 <__umodsi3>
    fa24:	1023883a 	mov	r17,r2
    fa28:	b00b883a 	mov	r5,r22
    fa2c:	8009883a 	mov	r4,r16
    fa30:	000fe1c0 	call	fe1c <__udivsi3>
    fa34:	8822943a 	slli	r17,r17,16
    fa38:	1545383a 	mul	r2,r2,r21
    fa3c:	a53fffcc 	andi	r20,r20,65535
    fa40:	a446b03a 	or	r3,r20,r17
    fa44:	18bfb02e 	bgeu	r3,r2,f908 <__umoddi3+0x11c>
    fa48:	003fab06 	br	f8f8 <__umoddi3+0x10c>
    fa4c:	2005883a 	mov	r2,r4
    fa50:	2807883a 	mov	r3,r5
    fa54:	dfc00b17 	ldw	ra,44(sp)
    fa58:	df000a17 	ldw	fp,40(sp)
    fa5c:	ddc00917 	ldw	r23,36(sp)
    fa60:	dd800817 	ldw	r22,32(sp)
    fa64:	dd400717 	ldw	r21,28(sp)
    fa68:	dd000617 	ldw	r20,24(sp)
    fa6c:	dcc00517 	ldw	r19,20(sp)
    fa70:	dc800417 	ldw	r18,16(sp)
    fa74:	dc400317 	ldw	r17,12(sp)
    fa78:	dc000217 	ldw	r16,8(sp)
    fa7c:	dec00c04 	addi	sp,sp,48
    fa80:	f800283a 	ret
    fa84:	04c03fc4 	movi	r19,255
    fa88:	99c9803a 	cmpltu	r4,r19,r7
    fa8c:	200890fa 	slli	r4,r4,3
    fa90:	003fa806 	br	f934 <__umoddi3+0x148>
    fa94:	00803fc4 	movi	r2,255
    fa98:	14c5803a 	cmpltu	r2,r2,r19
    fa9c:	100490fa 	slli	r2,r2,3
    faa0:	003fc006 	br	f9a4 <__umoddi3+0x1b8>
    faa4:	00804034 	movhi	r2,256
    faa8:	10bfffc4 	addi	r2,r2,-1
    faac:	11808b36 	bltu	r2,r6,fcdc <__umoddi3+0x4f0>
    fab0:	01000404 	movi	r4,16
    fab4:	003f6406 	br	f848 <__umoddi3+0x5c>
    fab8:	34c4d83a 	srl	r2,r6,r19
    fabc:	3d0e983a 	sll	r7,r7,r20
    fac0:	8cf8d83a 	srl	fp,r17,r19
    fac4:	8d10983a 	sll	r8,r17,r20
    fac8:	38aab03a 	or	r21,r7,r2
    facc:	a82cd43a 	srli	r22,r21,16
    fad0:	84e2d83a 	srl	r17,r16,r19
    fad4:	e009883a 	mov	r4,fp
    fad8:	b00b883a 	mov	r5,r22
    fadc:	8a22b03a 	or	r17,r17,r8
    fae0:	3524983a 	sll	r18,r6,r20
    fae4:	000fe800 	call	fe80 <__umodsi3>
    fae8:	e009883a 	mov	r4,fp
    faec:	b00b883a 	mov	r5,r22
    faf0:	102f883a 	mov	r23,r2
    faf4:	000fe1c0 	call	fe1c <__udivsi3>
    faf8:	100d883a 	mov	r6,r2
    fafc:	b808943a 	slli	r4,r23,16
    fb00:	aa3fffcc 	andi	r8,r21,65535
    fb04:	8804d43a 	srli	r2,r17,16
    fb08:	41af383a 	mul	r23,r8,r6
    fb0c:	8520983a 	sll	r16,r16,r20
    fb10:	1104b03a 	or	r2,r2,r4
    fb14:	15c0042e 	bgeu	r2,r23,fb28 <__umoddi3+0x33c>
    fb18:	1545883a 	add	r2,r2,r21
    fb1c:	30ffffc4 	addi	r3,r6,-1
    fb20:	1540742e 	bgeu	r2,r21,fcf4 <__umoddi3+0x508>
    fb24:	180d883a 	mov	r6,r3
    fb28:	15efc83a 	sub	r23,r2,r23
    fb2c:	b00b883a 	mov	r5,r22
    fb30:	b809883a 	mov	r4,r23
    fb34:	d9800115 	stw	r6,4(sp)
    fb38:	da000015 	stw	r8,0(sp)
    fb3c:	000fe800 	call	fe80 <__umodsi3>
    fb40:	b00b883a 	mov	r5,r22
    fb44:	b809883a 	mov	r4,r23
    fb48:	1039883a 	mov	fp,r2
    fb4c:	000fe1c0 	call	fe1c <__udivsi3>
    fb50:	da000017 	ldw	r8,0(sp)
    fb54:	e038943a 	slli	fp,fp,16
    fb58:	100b883a 	mov	r5,r2
    fb5c:	4089383a 	mul	r4,r8,r2
    fb60:	8a3fffcc 	andi	r8,r17,65535
    fb64:	4710b03a 	or	r8,r8,fp
    fb68:	d9800117 	ldw	r6,4(sp)
    fb6c:	4100042e 	bgeu	r8,r4,fb80 <__umoddi3+0x394>
    fb70:	4551883a 	add	r8,r8,r21
    fb74:	10bfffc4 	addi	r2,r2,-1
    fb78:	45405a2e 	bgeu	r8,r21,fce4 <__umoddi3+0x4f8>
    fb7c:	100b883a 	mov	r5,r2
    fb80:	300c943a 	slli	r6,r6,16
    fb84:	91ffffcc 	andi	r7,r18,65535
    fb88:	9004d43a 	srli	r2,r18,16
    fb8c:	314cb03a 	or	r6,r6,r5
    fb90:	317fffcc 	andi	r5,r6,65535
    fb94:	300cd43a 	srli	r6,r6,16
    fb98:	29d3383a 	mul	r9,r5,r7
    fb9c:	288b383a 	mul	r5,r5,r2
    fba0:	31cf383a 	mul	r7,r6,r7
    fba4:	4806d43a 	srli	r3,r9,16
    fba8:	4111c83a 	sub	r8,r8,r4
    fbac:	29cb883a 	add	r5,r5,r7
    fbb0:	194b883a 	add	r5,r3,r5
    fbb4:	3085383a 	mul	r2,r6,r2
    fbb8:	29c0022e 	bgeu	r5,r7,fbc4 <__umoddi3+0x3d8>
    fbbc:	00c00074 	movhi	r3,1
    fbc0:	10c5883a 	add	r2,r2,r3
    fbc4:	2808d43a 	srli	r4,r5,16
    fbc8:	280a943a 	slli	r5,r5,16
    fbcc:	4a7fffcc 	andi	r9,r9,65535
    fbd0:	2085883a 	add	r2,r4,r2
    fbd4:	2a4b883a 	add	r5,r5,r9
    fbd8:	40803636 	bltu	r8,r2,fcb4 <__umoddi3+0x4c8>
    fbdc:	40804d26 	beq	r8,r2,fd14 <__umoddi3+0x528>
    fbe0:	4089c83a 	sub	r4,r8,r2
    fbe4:	280f883a 	mov	r7,r5
    fbe8:	81cfc83a 	sub	r7,r16,r7
    fbec:	81c7803a 	cmpltu	r3,r16,r7
    fbf0:	20c7c83a 	sub	r3,r4,r3
    fbf4:	1cc4983a 	sll	r2,r3,r19
    fbf8:	3d0ed83a 	srl	r7,r7,r20
    fbfc:	1d06d83a 	srl	r3,r3,r20
    fc00:	11c4b03a 	or	r2,r2,r7
    fc04:	003f9306 	br	fa54 <__umoddi3+0x268>
    fc08:	9ca6983a 	sll	r19,r19,r18
    fc0c:	88e8d83a 	srl	r20,r17,r3
    fc10:	80c4d83a 	srl	r2,r16,r3
    fc14:	982cd43a 	srli	r22,r19,16
    fc18:	8ca2983a 	sll	r17,r17,r18
    fc1c:	a009883a 	mov	r4,r20
    fc20:	b00b883a 	mov	r5,r22
    fc24:	1478b03a 	or	fp,r2,r17
    fc28:	000fe800 	call	fe80 <__umodsi3>
    fc2c:	a009883a 	mov	r4,r20
    fc30:	b00b883a 	mov	r5,r22
    fc34:	1023883a 	mov	r17,r2
    fc38:	000fe1c0 	call	fe1c <__udivsi3>
    fc3c:	9d7fffcc 	andi	r21,r19,65535
    fc40:	880a943a 	slli	r5,r17,16
    fc44:	e008d43a 	srli	r4,fp,16
    fc48:	a885383a 	mul	r2,r21,r2
    fc4c:	84a8983a 	sll	r20,r16,r18
    fc50:	2148b03a 	or	r4,r4,r5
    fc54:	2080042e 	bgeu	r4,r2,fc68 <__umoddi3+0x47c>
    fc58:	24c9883a 	add	r4,r4,r19
    fc5c:	24c00236 	bltu	r4,r19,fc68 <__umoddi3+0x47c>
    fc60:	2080012e 	bgeu	r4,r2,fc68 <__umoddi3+0x47c>
    fc64:	24c9883a 	add	r4,r4,r19
    fc68:	20a3c83a 	sub	r17,r4,r2
    fc6c:	b00b883a 	mov	r5,r22
    fc70:	8809883a 	mov	r4,r17
    fc74:	000fe800 	call	fe80 <__umodsi3>
    fc78:	102f883a 	mov	r23,r2
    fc7c:	8809883a 	mov	r4,r17
    fc80:	b00b883a 	mov	r5,r22
    fc84:	000fe1c0 	call	fe1c <__udivsi3>
    fc88:	b82e943a 	slli	r23,r23,16
    fc8c:	a885383a 	mul	r2,r21,r2
    fc90:	e13fffcc 	andi	r4,fp,65535
    fc94:	25c8b03a 	or	r4,r4,r23
    fc98:	2080042e 	bgeu	r4,r2,fcac <__umoddi3+0x4c0>
    fc9c:	24c9883a 	add	r4,r4,r19
    fca0:	24c00236 	bltu	r4,r19,fcac <__umoddi3+0x4c0>
    fca4:	2080012e 	bgeu	r4,r2,fcac <__umoddi3+0x4c0>
    fca8:	24c9883a 	add	r4,r4,r19
    fcac:	20a3c83a 	sub	r17,r4,r2
    fcb0:	003f4806 	br	f9d4 <__umoddi3+0x1e8>
    fcb4:	2c8fc83a 	sub	r7,r5,r18
    fcb8:	1545c83a 	sub	r2,r2,r21
    fcbc:	29cb803a 	cmpltu	r5,r5,r7
    fcc0:	1145c83a 	sub	r2,r2,r5
    fcc4:	4089c83a 	sub	r4,r8,r2
    fcc8:	003fc706 	br	fbe8 <__umoddi3+0x3fc>
    fccc:	01000604 	movi	r4,24
    fcd0:	003f1806 	br	f934 <__umoddi3+0x148>
    fcd4:	00800604 	movi	r2,24
    fcd8:	003f3206 	br	f9a4 <__umoddi3+0x1b8>
    fcdc:	01000604 	movi	r4,24
    fce0:	003ed906 	br	f848 <__umoddi3+0x5c>
    fce4:	413fa52e 	bgeu	r8,r4,fb7c <__umoddi3+0x390>
    fce8:	297fff84 	addi	r5,r5,-2
    fcec:	4551883a 	add	r8,r8,r21
    fcf0:	003fa306 	br	fb80 <__umoddi3+0x394>
    fcf4:	15ff8b2e 	bgeu	r2,r23,fb24 <__umoddi3+0x338>
    fcf8:	31bfff84 	addi	r6,r6,-2
    fcfc:	1545883a 	add	r2,r2,r21
    fd00:	003f8906 	br	fb28 <__umoddi3+0x33c>
    fd04:	24c9883a 	add	r4,r4,r19
    fd08:	003eee06 	br	f8c4 <__umoddi3+0xd8>
    fd0c:	8005883a 	mov	r2,r16
    fd10:	003f1706 	br	f970 <__umoddi3+0x184>
    fd14:	817fe736 	bltu	r16,r5,fcb4 <__umoddi3+0x4c8>
    fd18:	280f883a 	mov	r7,r5
    fd1c:	0009883a 	mov	r4,zero
    fd20:	003fb106 	br	fbe8 <__umoddi3+0x3fc>

0000fd24 <__divsi3>:
    fd24:	20001b16 	blt	r4,zero,fd94 <__divsi3+0x70>
    fd28:	000f883a 	mov	r7,zero
    fd2c:	28001616 	blt	r5,zero,fd88 <__divsi3+0x64>
    fd30:	200d883a 	mov	r6,r4
    fd34:	29001a2e 	bgeu	r5,r4,fda0 <__divsi3+0x7c>
    fd38:	00800804 	movi	r2,32
    fd3c:	00c00044 	movi	r3,1
    fd40:	00000106 	br	fd48 <__divsi3+0x24>
    fd44:	10000d26 	beq	r2,zero,fd7c <__divsi3+0x58>
    fd48:	294b883a 	add	r5,r5,r5
    fd4c:	10bfffc4 	addi	r2,r2,-1
    fd50:	18c7883a 	add	r3,r3,r3
    fd54:	293ffb36 	bltu	r5,r4,fd44 <__divsi3+0x20>
    fd58:	0005883a 	mov	r2,zero
    fd5c:	18000726 	beq	r3,zero,fd7c <__divsi3+0x58>
    fd60:	0005883a 	mov	r2,zero
    fd64:	31400236 	bltu	r6,r5,fd70 <__divsi3+0x4c>
    fd68:	314dc83a 	sub	r6,r6,r5
    fd6c:	10c4b03a 	or	r2,r2,r3
    fd70:	1806d07a 	srli	r3,r3,1
    fd74:	280ad07a 	srli	r5,r5,1
    fd78:	183ffa1e 	bne	r3,zero,fd64 <__divsi3+0x40>
    fd7c:	38000126 	beq	r7,zero,fd84 <__divsi3+0x60>
    fd80:	0085c83a 	sub	r2,zero,r2
    fd84:	f800283a 	ret
    fd88:	014bc83a 	sub	r5,zero,r5
    fd8c:	39c0005c 	xori	r7,r7,1
    fd90:	003fe706 	br	fd30 <__divsi3+0xc>
    fd94:	0109c83a 	sub	r4,zero,r4
    fd98:	01c00044 	movi	r7,1
    fd9c:	003fe306 	br	fd2c <__divsi3+0x8>
    fda0:	00c00044 	movi	r3,1
    fda4:	003fee06 	br	fd60 <__divsi3+0x3c>

0000fda8 <__modsi3>:
    fda8:	20001716 	blt	r4,zero,fe08 <__modsi3+0x60>
    fdac:	000f883a 	mov	r7,zero
    fdb0:	2005883a 	mov	r2,r4
    fdb4:	28001216 	blt	r5,zero,fe00 <__modsi3+0x58>
    fdb8:	2900162e 	bgeu	r5,r4,fe14 <__modsi3+0x6c>
    fdbc:	01800804 	movi	r6,32
    fdc0:	00c00044 	movi	r3,1
    fdc4:	00000106 	br	fdcc <__modsi3+0x24>
    fdc8:	30000a26 	beq	r6,zero,fdf4 <__modsi3+0x4c>
    fdcc:	294b883a 	add	r5,r5,r5
    fdd0:	31bfffc4 	addi	r6,r6,-1
    fdd4:	18c7883a 	add	r3,r3,r3
    fdd8:	293ffb36 	bltu	r5,r4,fdc8 <__modsi3+0x20>
    fddc:	18000526 	beq	r3,zero,fdf4 <__modsi3+0x4c>
    fde0:	1806d07a 	srli	r3,r3,1
    fde4:	11400136 	bltu	r2,r5,fdec <__modsi3+0x44>
    fde8:	1145c83a 	sub	r2,r2,r5
    fdec:	280ad07a 	srli	r5,r5,1
    fdf0:	183ffb1e 	bne	r3,zero,fde0 <__modsi3+0x38>
    fdf4:	38000126 	beq	r7,zero,fdfc <__modsi3+0x54>
    fdf8:	0085c83a 	sub	r2,zero,r2
    fdfc:	f800283a 	ret
    fe00:	014bc83a 	sub	r5,zero,r5
    fe04:	003fec06 	br	fdb8 <__modsi3+0x10>
    fe08:	0109c83a 	sub	r4,zero,r4
    fe0c:	01c00044 	movi	r7,1
    fe10:	003fe706 	br	fdb0 <__modsi3+0x8>
    fe14:	00c00044 	movi	r3,1
    fe18:	003ff106 	br	fde0 <__modsi3+0x38>

0000fe1c <__udivsi3>:
    fe1c:	200d883a 	mov	r6,r4
    fe20:	2900152e 	bgeu	r5,r4,fe78 <__udivsi3+0x5c>
    fe24:	28001416 	blt	r5,zero,fe78 <__udivsi3+0x5c>
    fe28:	00800804 	movi	r2,32
    fe2c:	00c00044 	movi	r3,1
    fe30:	00000206 	br	fe3c <__udivsi3+0x20>
    fe34:	10000e26 	beq	r2,zero,fe70 <__udivsi3+0x54>
    fe38:	28000516 	blt	r5,zero,fe50 <__udivsi3+0x34>
    fe3c:	294b883a 	add	r5,r5,r5
    fe40:	10bfffc4 	addi	r2,r2,-1
    fe44:	18c7883a 	add	r3,r3,r3
    fe48:	293ffa36 	bltu	r5,r4,fe34 <__udivsi3+0x18>
    fe4c:	18000826 	beq	r3,zero,fe70 <__udivsi3+0x54>
    fe50:	0005883a 	mov	r2,zero
    fe54:	31400236 	bltu	r6,r5,fe60 <__udivsi3+0x44>
    fe58:	314dc83a 	sub	r6,r6,r5
    fe5c:	10c4b03a 	or	r2,r2,r3
    fe60:	1806d07a 	srli	r3,r3,1
    fe64:	280ad07a 	srli	r5,r5,1
    fe68:	183ffa1e 	bne	r3,zero,fe54 <__udivsi3+0x38>
    fe6c:	f800283a 	ret
    fe70:	0005883a 	mov	r2,zero
    fe74:	f800283a 	ret
    fe78:	00c00044 	movi	r3,1
    fe7c:	003ff406 	br	fe50 <__udivsi3+0x34>

0000fe80 <__umodsi3>:
    fe80:	2005883a 	mov	r2,r4
    fe84:	2900122e 	bgeu	r5,r4,fed0 <__umodsi3+0x50>
    fe88:	28001116 	blt	r5,zero,fed0 <__umodsi3+0x50>
    fe8c:	01800804 	movi	r6,32
    fe90:	00c00044 	movi	r3,1
    fe94:	00000206 	br	fea0 <__umodsi3+0x20>
    fe98:	30000c26 	beq	r6,zero,fecc <__umodsi3+0x4c>
    fe9c:	28000516 	blt	r5,zero,feb4 <__umodsi3+0x34>
    fea0:	294b883a 	add	r5,r5,r5
    fea4:	31bfffc4 	addi	r6,r6,-1
    fea8:	18c7883a 	add	r3,r3,r3
    feac:	293ffa36 	bltu	r5,r4,fe98 <__umodsi3+0x18>
    feb0:	18000626 	beq	r3,zero,fecc <__umodsi3+0x4c>
    feb4:	1806d07a 	srli	r3,r3,1
    feb8:	11400136 	bltu	r2,r5,fec0 <__umodsi3+0x40>
    febc:	1145c83a 	sub	r2,r2,r5
    fec0:	280ad07a 	srli	r5,r5,1
    fec4:	183ffb1e 	bne	r3,zero,feb4 <__umodsi3+0x34>
    fec8:	f800283a 	ret
    fecc:	f800283a 	ret
    fed0:	00c00044 	movi	r3,1
    fed4:	003ff706 	br	feb4 <__umodsi3+0x34>

0000fed8 <__adddf3>:
    fed8:	02c00434 	movhi	r11,16
    fedc:	5affffc4 	addi	r11,r11,-1
    fee0:	2806d7fa 	srli	r3,r5,31
    fee4:	2ad4703a 	and	r10,r5,r11
    fee8:	3ad2703a 	and	r9,r7,r11
    feec:	3804d53a 	srli	r2,r7,20
    fef0:	3018d77a 	srli	r12,r6,29
    fef4:	280ad53a 	srli	r5,r5,20
    fef8:	501490fa 	slli	r10,r10,3
    fefc:	2010d77a 	srli	r8,r4,29
    ff00:	481290fa 	slli	r9,r9,3
    ff04:	380ed7fa 	srli	r7,r7,31
    ff08:	defffb04 	addi	sp,sp,-20
    ff0c:	dc800215 	stw	r18,8(sp)
    ff10:	dc400115 	stw	r17,4(sp)
    ff14:	dc000015 	stw	r16,0(sp)
    ff18:	dfc00415 	stw	ra,16(sp)
    ff1c:	dcc00315 	stw	r19,12(sp)
    ff20:	1c803fcc 	andi	r18,r3,255
    ff24:	2c01ffcc 	andi	r16,r5,2047
    ff28:	5210b03a 	or	r8,r10,r8
    ff2c:	202290fa 	slli	r17,r4,3
    ff30:	1081ffcc 	andi	r2,r2,2047
    ff34:	4b12b03a 	or	r9,r9,r12
    ff38:	300c90fa 	slli	r6,r6,3
    ff3c:	91c07526 	beq	r18,r7,10114 <__adddf3+0x23c>
    ff40:	8087c83a 	sub	r3,r16,r2
    ff44:	00c0ab0e 	bge	zero,r3,101f4 <__adddf3+0x31c>
    ff48:	10002a1e 	bne	r2,zero,fff4 <__adddf3+0x11c>
    ff4c:	4984b03a 	or	r2,r9,r6
    ff50:	1000961e 	bne	r2,zero,101ac <__adddf3+0x2d4>
    ff54:	888001cc 	andi	r2,r17,7
    ff58:	10000726 	beq	r2,zero,ff78 <__adddf3+0xa0>
    ff5c:	888003cc 	andi	r2,r17,15
    ff60:	00c00104 	movi	r3,4
    ff64:	10c00426 	beq	r2,r3,ff78 <__adddf3+0xa0>
    ff68:	88c7883a 	add	r3,r17,r3
    ff6c:	1c63803a 	cmpltu	r17,r3,r17
    ff70:	4451883a 	add	r8,r8,r17
    ff74:	1823883a 	mov	r17,r3
    ff78:	4080202c 	andhi	r2,r8,128
    ff7c:	10005926 	beq	r2,zero,100e4 <__adddf3+0x20c>
    ff80:	84000044 	addi	r16,r16,1
    ff84:	0081ffc4 	movi	r2,2047
    ff88:	8080ba26 	beq	r16,r2,10274 <__adddf3+0x39c>
    ff8c:	00bfe034 	movhi	r2,65408
    ff90:	10bfffc4 	addi	r2,r2,-1
    ff94:	4090703a 	and	r8,r8,r2
    ff98:	4004977a 	slli	r2,r8,29
    ff9c:	4010927a 	slli	r8,r8,9
    ffa0:	8822d0fa 	srli	r17,r17,3
    ffa4:	8401ffcc 	andi	r16,r16,2047
    ffa8:	4010d33a 	srli	r8,r8,12
    ffac:	9007883a 	mov	r3,r18
    ffb0:	1444b03a 	or	r2,r2,r17
    ffb4:	8401ffcc 	andi	r16,r16,2047
    ffb8:	8020953a 	slli	r16,r16,20
    ffbc:	18c03fcc 	andi	r3,r3,255
    ffc0:	01000434 	movhi	r4,16
    ffc4:	213fffc4 	addi	r4,r4,-1
    ffc8:	180697fa 	slli	r3,r3,31
    ffcc:	4110703a 	and	r8,r8,r4
    ffd0:	4410b03a 	or	r8,r8,r16
    ffd4:	40c6b03a 	or	r3,r8,r3
    ffd8:	dfc00417 	ldw	ra,16(sp)
    ffdc:	dcc00317 	ldw	r19,12(sp)
    ffe0:	dc800217 	ldw	r18,8(sp)
    ffe4:	dc400117 	ldw	r17,4(sp)
    ffe8:	dc000017 	ldw	r16,0(sp)
    ffec:	dec00504 	addi	sp,sp,20
    fff0:	f800283a 	ret
    fff4:	0081ffc4 	movi	r2,2047
    fff8:	80bfd626 	beq	r16,r2,ff54 <__adddf3+0x7c>
    fffc:	4a402034 	orhi	r9,r9,128
   10000:	00800e04 	movi	r2,56
   10004:	10c09f16 	blt	r2,r3,10284 <__adddf3+0x3ac>
   10008:	008007c4 	movi	r2,31
   1000c:	10c0c216 	blt	r2,r3,10318 <__adddf3+0x440>
   10010:	00800804 	movi	r2,32
   10014:	10c5c83a 	sub	r2,r2,r3
   10018:	488a983a 	sll	r5,r9,r2
   1001c:	30c8d83a 	srl	r4,r6,r3
   10020:	3084983a 	sll	r2,r6,r2
   10024:	48c6d83a 	srl	r3,r9,r3
   10028:	290cb03a 	or	r6,r5,r4
   1002c:	1004c03a 	cmpne	r2,r2,zero
   10030:	308cb03a 	or	r6,r6,r2
   10034:	898dc83a 	sub	r6,r17,r6
   10038:	89a3803a 	cmpltu	r17,r17,r6
   1003c:	40d1c83a 	sub	r8,r8,r3
   10040:	4451c83a 	sub	r8,r8,r17
   10044:	3023883a 	mov	r17,r6
   10048:	4080202c 	andhi	r2,r8,128
   1004c:	10002326 	beq	r2,zero,100dc <__adddf3+0x204>
   10050:	04c02034 	movhi	r19,128
   10054:	9cffffc4 	addi	r19,r19,-1
   10058:	44e6703a 	and	r19,r8,r19
   1005c:	98007626 	beq	r19,zero,10238 <__adddf3+0x360>
   10060:	9809883a 	mov	r4,r19
   10064:	00124dc0 	call	124dc <__clzsi2>
   10068:	10fffe04 	addi	r3,r2,-8
   1006c:	010007c4 	movi	r4,31
   10070:	20c07716 	blt	r4,r3,10250 <__adddf3+0x378>
   10074:	00800804 	movi	r2,32
   10078:	10c5c83a 	sub	r2,r2,r3
   1007c:	8884d83a 	srl	r2,r17,r2
   10080:	98d0983a 	sll	r8,r19,r3
   10084:	88e2983a 	sll	r17,r17,r3
   10088:	1204b03a 	or	r2,r2,r8
   1008c:	1c007416 	blt	r3,r16,10260 <__adddf3+0x388>
   10090:	1c21c83a 	sub	r16,r3,r16
   10094:	82000044 	addi	r8,r16,1
   10098:	00c007c4 	movi	r3,31
   1009c:	1a009116 	blt	r3,r8,102e4 <__adddf3+0x40c>
   100a0:	00c00804 	movi	r3,32
   100a4:	1a07c83a 	sub	r3,r3,r8
   100a8:	8a08d83a 	srl	r4,r17,r8
   100ac:	88e2983a 	sll	r17,r17,r3
   100b0:	10c6983a 	sll	r3,r2,r3
   100b4:	1210d83a 	srl	r8,r2,r8
   100b8:	8804c03a 	cmpne	r2,r17,zero
   100bc:	1906b03a 	or	r3,r3,r4
   100c0:	18a2b03a 	or	r17,r3,r2
   100c4:	0021883a 	mov	r16,zero
   100c8:	003fa206 	br	ff54 <__adddf3+0x7c>
   100cc:	1890b03a 	or	r8,r3,r2
   100d0:	40017d26 	beq	r8,zero,106c8 <__adddf3+0x7f0>
   100d4:	1011883a 	mov	r8,r2
   100d8:	1823883a 	mov	r17,r3
   100dc:	888001cc 	andi	r2,r17,7
   100e0:	103f9e1e 	bne	r2,zero,ff5c <__adddf3+0x84>
   100e4:	4004977a 	slli	r2,r8,29
   100e8:	8822d0fa 	srli	r17,r17,3
   100ec:	4010d0fa 	srli	r8,r8,3
   100f0:	9007883a 	mov	r3,r18
   100f4:	1444b03a 	or	r2,r2,r17
   100f8:	0101ffc4 	movi	r4,2047
   100fc:	81002426 	beq	r16,r4,10190 <__adddf3+0x2b8>
   10100:	8120703a 	and	r16,r16,r4
   10104:	01000434 	movhi	r4,16
   10108:	213fffc4 	addi	r4,r4,-1
   1010c:	4110703a 	and	r8,r8,r4
   10110:	003fa806 	br	ffb4 <__adddf3+0xdc>
   10114:	8089c83a 	sub	r4,r16,r2
   10118:	01005e0e 	bge	zero,r4,10294 <__adddf3+0x3bc>
   1011c:	10002b26 	beq	r2,zero,101cc <__adddf3+0x2f4>
   10120:	0081ffc4 	movi	r2,2047
   10124:	80bf8b26 	beq	r16,r2,ff54 <__adddf3+0x7c>
   10128:	4a402034 	orhi	r9,r9,128
   1012c:	00800e04 	movi	r2,56
   10130:	1100a40e 	bge	r2,r4,103c4 <__adddf3+0x4ec>
   10134:	498cb03a 	or	r6,r9,r6
   10138:	300ac03a 	cmpne	r5,r6,zero
   1013c:	0013883a 	mov	r9,zero
   10140:	2c4b883a 	add	r5,r5,r17
   10144:	2c63803a 	cmpltu	r17,r5,r17
   10148:	4a11883a 	add	r8,r9,r8
   1014c:	8a11883a 	add	r8,r17,r8
   10150:	2823883a 	mov	r17,r5
   10154:	4080202c 	andhi	r2,r8,128
   10158:	103fe026 	beq	r2,zero,100dc <__adddf3+0x204>
   1015c:	84000044 	addi	r16,r16,1
   10160:	0081ffc4 	movi	r2,2047
   10164:	8080d226 	beq	r16,r2,104b0 <__adddf3+0x5d8>
   10168:	00bfe034 	movhi	r2,65408
   1016c:	10bfffc4 	addi	r2,r2,-1
   10170:	4090703a 	and	r8,r8,r2
   10174:	880ad07a 	srli	r5,r17,1
   10178:	400897fa 	slli	r4,r8,31
   1017c:	88c0004c 	andi	r3,r17,1
   10180:	28e2b03a 	or	r17,r5,r3
   10184:	4010d07a 	srli	r8,r8,1
   10188:	2462b03a 	or	r17,r4,r17
   1018c:	003f7106 	br	ff54 <__adddf3+0x7c>
   10190:	4088b03a 	or	r4,r8,r2
   10194:	20014526 	beq	r4,zero,106ac <__adddf3+0x7d4>
   10198:	01000434 	movhi	r4,16
   1019c:	42000234 	orhi	r8,r8,8
   101a0:	213fffc4 	addi	r4,r4,-1
   101a4:	4110703a 	and	r8,r8,r4
   101a8:	003f8206 	br	ffb4 <__adddf3+0xdc>
   101ac:	18ffffc4 	addi	r3,r3,-1
   101b0:	1800491e 	bne	r3,zero,102d8 <__adddf3+0x400>
   101b4:	898bc83a 	sub	r5,r17,r6
   101b8:	8963803a 	cmpltu	r17,r17,r5
   101bc:	4251c83a 	sub	r8,r8,r9
   101c0:	4451c83a 	sub	r8,r8,r17
   101c4:	2823883a 	mov	r17,r5
   101c8:	003f9f06 	br	10048 <__adddf3+0x170>
   101cc:	4984b03a 	or	r2,r9,r6
   101d0:	103f6026 	beq	r2,zero,ff54 <__adddf3+0x7c>
   101d4:	213fffc4 	addi	r4,r4,-1
   101d8:	2000931e 	bne	r4,zero,10428 <__adddf3+0x550>
   101dc:	898d883a 	add	r6,r17,r6
   101e0:	3463803a 	cmpltu	r17,r6,r17
   101e4:	4251883a 	add	r8,r8,r9
   101e8:	8a11883a 	add	r8,r17,r8
   101ec:	3023883a 	mov	r17,r6
   101f0:	003fd806 	br	10154 <__adddf3+0x27c>
   101f4:	1800541e 	bne	r3,zero,10348 <__adddf3+0x470>
   101f8:	80800044 	addi	r2,r16,1
   101fc:	1081ffcc 	andi	r2,r2,2047
   10200:	00c00044 	movi	r3,1
   10204:	1880a00e 	bge	r3,r2,10488 <__adddf3+0x5b0>
   10208:	8989c83a 	sub	r4,r17,r6
   1020c:	8905803a 	cmpltu	r2,r17,r4
   10210:	4267c83a 	sub	r19,r8,r9
   10214:	98a7c83a 	sub	r19,r19,r2
   10218:	9880202c 	andhi	r2,r19,128
   1021c:	10006326 	beq	r2,zero,103ac <__adddf3+0x4d4>
   10220:	3463c83a 	sub	r17,r6,r17
   10224:	4a07c83a 	sub	r3,r9,r8
   10228:	344d803a 	cmpltu	r6,r6,r17
   1022c:	19a7c83a 	sub	r19,r3,r6
   10230:	3825883a 	mov	r18,r7
   10234:	983f8a1e 	bne	r19,zero,10060 <__adddf3+0x188>
   10238:	8809883a 	mov	r4,r17
   1023c:	00124dc0 	call	124dc <__clzsi2>
   10240:	10800804 	addi	r2,r2,32
   10244:	10fffe04 	addi	r3,r2,-8
   10248:	010007c4 	movi	r4,31
   1024c:	20ff890e 	bge	r4,r3,10074 <__adddf3+0x19c>
   10250:	10bff604 	addi	r2,r2,-40
   10254:	8884983a 	sll	r2,r17,r2
   10258:	0023883a 	mov	r17,zero
   1025c:	1c3f8c0e 	bge	r3,r16,10090 <__adddf3+0x1b8>
   10260:	023fe034 	movhi	r8,65408
   10264:	423fffc4 	addi	r8,r8,-1
   10268:	80e1c83a 	sub	r16,r16,r3
   1026c:	1210703a 	and	r8,r2,r8
   10270:	003f3806 	br	ff54 <__adddf3+0x7c>
   10274:	9007883a 	mov	r3,r18
   10278:	0011883a 	mov	r8,zero
   1027c:	0005883a 	mov	r2,zero
   10280:	003f4c06 	br	ffb4 <__adddf3+0xdc>
   10284:	498cb03a 	or	r6,r9,r6
   10288:	300cc03a 	cmpne	r6,r6,zero
   1028c:	0007883a 	mov	r3,zero
   10290:	003f6806 	br	10034 <__adddf3+0x15c>
   10294:	20009c1e 	bne	r4,zero,10508 <__adddf3+0x630>
   10298:	80800044 	addi	r2,r16,1
   1029c:	1141ffcc 	andi	r5,r2,2047
   102a0:	01000044 	movi	r4,1
   102a4:	2140670e 	bge	r4,r5,10444 <__adddf3+0x56c>
   102a8:	0101ffc4 	movi	r4,2047
   102ac:	11007f26 	beq	r2,r4,104ac <__adddf3+0x5d4>
   102b0:	898d883a 	add	r6,r17,r6
   102b4:	4247883a 	add	r3,r8,r9
   102b8:	3451803a 	cmpltu	r8,r6,r17
   102bc:	40d1883a 	add	r8,r8,r3
   102c0:	402297fa 	slli	r17,r8,31
   102c4:	300cd07a 	srli	r6,r6,1
   102c8:	4010d07a 	srli	r8,r8,1
   102cc:	1021883a 	mov	r16,r2
   102d0:	89a2b03a 	or	r17,r17,r6
   102d4:	003f1f06 	br	ff54 <__adddf3+0x7c>
   102d8:	0081ffc4 	movi	r2,2047
   102dc:	80bf481e 	bne	r16,r2,10000 <__adddf3+0x128>
   102e0:	003f1c06 	br	ff54 <__adddf3+0x7c>
   102e4:	843ff844 	addi	r16,r16,-31
   102e8:	01000804 	movi	r4,32
   102ec:	1406d83a 	srl	r3,r2,r16
   102f0:	41005026 	beq	r8,r4,10434 <__adddf3+0x55c>
   102f4:	01001004 	movi	r4,64
   102f8:	2211c83a 	sub	r8,r4,r8
   102fc:	1204983a 	sll	r2,r2,r8
   10300:	88a2b03a 	or	r17,r17,r2
   10304:	8822c03a 	cmpne	r17,r17,zero
   10308:	1c62b03a 	or	r17,r3,r17
   1030c:	0011883a 	mov	r8,zero
   10310:	0021883a 	mov	r16,zero
   10314:	003f7106 	br	100dc <__adddf3+0x204>
   10318:	193ff804 	addi	r4,r3,-32
   1031c:	00800804 	movi	r2,32
   10320:	4908d83a 	srl	r4,r9,r4
   10324:	18804526 	beq	r3,r2,1043c <__adddf3+0x564>
   10328:	00801004 	movi	r2,64
   1032c:	10c5c83a 	sub	r2,r2,r3
   10330:	4886983a 	sll	r3,r9,r2
   10334:	198cb03a 	or	r6,r3,r6
   10338:	300cc03a 	cmpne	r6,r6,zero
   1033c:	218cb03a 	or	r6,r4,r6
   10340:	0007883a 	mov	r3,zero
   10344:	003f3b06 	br	10034 <__adddf3+0x15c>
   10348:	80002a26 	beq	r16,zero,103f4 <__adddf3+0x51c>
   1034c:	0101ffc4 	movi	r4,2047
   10350:	11006826 	beq	r2,r4,104f4 <__adddf3+0x61c>
   10354:	00c7c83a 	sub	r3,zero,r3
   10358:	42002034 	orhi	r8,r8,128
   1035c:	01000e04 	movi	r4,56
   10360:	20c07c16 	blt	r4,r3,10554 <__adddf3+0x67c>
   10364:	010007c4 	movi	r4,31
   10368:	20c0da16 	blt	r4,r3,106d4 <__adddf3+0x7fc>
   1036c:	01000804 	movi	r4,32
   10370:	20c9c83a 	sub	r4,r4,r3
   10374:	4114983a 	sll	r10,r8,r4
   10378:	88cad83a 	srl	r5,r17,r3
   1037c:	8908983a 	sll	r4,r17,r4
   10380:	40c6d83a 	srl	r3,r8,r3
   10384:	5162b03a 	or	r17,r10,r5
   10388:	2008c03a 	cmpne	r4,r4,zero
   1038c:	8922b03a 	or	r17,r17,r4
   10390:	3463c83a 	sub	r17,r6,r17
   10394:	48c7c83a 	sub	r3,r9,r3
   10398:	344d803a 	cmpltu	r6,r6,r17
   1039c:	1991c83a 	sub	r8,r3,r6
   103a0:	1021883a 	mov	r16,r2
   103a4:	3825883a 	mov	r18,r7
   103a8:	003f2706 	br	10048 <__adddf3+0x170>
   103ac:	24d0b03a 	or	r8,r4,r19
   103b0:	40001b1e 	bne	r8,zero,10420 <__adddf3+0x548>
   103b4:	0005883a 	mov	r2,zero
   103b8:	0007883a 	mov	r3,zero
   103bc:	0021883a 	mov	r16,zero
   103c0:	003f4d06 	br	100f8 <__adddf3+0x220>
   103c4:	008007c4 	movi	r2,31
   103c8:	11003c16 	blt	r2,r4,104bc <__adddf3+0x5e4>
   103cc:	00800804 	movi	r2,32
   103d0:	1105c83a 	sub	r2,r2,r4
   103d4:	488e983a 	sll	r7,r9,r2
   103d8:	310ad83a 	srl	r5,r6,r4
   103dc:	3084983a 	sll	r2,r6,r2
   103e0:	4912d83a 	srl	r9,r9,r4
   103e4:	394ab03a 	or	r5,r7,r5
   103e8:	1004c03a 	cmpne	r2,r2,zero
   103ec:	288ab03a 	or	r5,r5,r2
   103f0:	003f5306 	br	10140 <__adddf3+0x268>
   103f4:	4448b03a 	or	r4,r8,r17
   103f8:	20003e26 	beq	r4,zero,104f4 <__adddf3+0x61c>
   103fc:	00c6303a 	nor	r3,zero,r3
   10400:	18003a1e 	bne	r3,zero,104ec <__adddf3+0x614>
   10404:	3463c83a 	sub	r17,r6,r17
   10408:	4a07c83a 	sub	r3,r9,r8
   1040c:	344d803a 	cmpltu	r6,r6,r17
   10410:	1991c83a 	sub	r8,r3,r6
   10414:	1021883a 	mov	r16,r2
   10418:	3825883a 	mov	r18,r7
   1041c:	003f0a06 	br	10048 <__adddf3+0x170>
   10420:	2023883a 	mov	r17,r4
   10424:	003f0d06 	br	1005c <__adddf3+0x184>
   10428:	0081ffc4 	movi	r2,2047
   1042c:	80bf3f1e 	bne	r16,r2,1012c <__adddf3+0x254>
   10430:	003ec806 	br	ff54 <__adddf3+0x7c>
   10434:	0005883a 	mov	r2,zero
   10438:	003fb106 	br	10300 <__adddf3+0x428>
   1043c:	0007883a 	mov	r3,zero
   10440:	003fbc06 	br	10334 <__adddf3+0x45c>
   10444:	4444b03a 	or	r2,r8,r17
   10448:	8000871e 	bne	r16,zero,10668 <__adddf3+0x790>
   1044c:	1000ba26 	beq	r2,zero,10738 <__adddf3+0x860>
   10450:	4984b03a 	or	r2,r9,r6
   10454:	103ebf26 	beq	r2,zero,ff54 <__adddf3+0x7c>
   10458:	8985883a 	add	r2,r17,r6
   1045c:	4247883a 	add	r3,r8,r9
   10460:	1451803a 	cmpltu	r8,r2,r17
   10464:	40d1883a 	add	r8,r8,r3
   10468:	40c0202c 	andhi	r3,r8,128
   1046c:	1023883a 	mov	r17,r2
   10470:	183f1a26 	beq	r3,zero,100dc <__adddf3+0x204>
   10474:	00bfe034 	movhi	r2,65408
   10478:	10bfffc4 	addi	r2,r2,-1
   1047c:	2021883a 	mov	r16,r4
   10480:	4090703a 	and	r8,r8,r2
   10484:	003eb306 	br	ff54 <__adddf3+0x7c>
   10488:	4444b03a 	or	r2,r8,r17
   1048c:	8000291e 	bne	r16,zero,10534 <__adddf3+0x65c>
   10490:	10004b1e 	bne	r2,zero,105c0 <__adddf3+0x6e8>
   10494:	4990b03a 	or	r8,r9,r6
   10498:	40008b26 	beq	r8,zero,106c8 <__adddf3+0x7f0>
   1049c:	4811883a 	mov	r8,r9
   104a0:	3023883a 	mov	r17,r6
   104a4:	3825883a 	mov	r18,r7
   104a8:	003eaa06 	br	ff54 <__adddf3+0x7c>
   104ac:	1021883a 	mov	r16,r2
   104b0:	0011883a 	mov	r8,zero
   104b4:	0005883a 	mov	r2,zero
   104b8:	003f0f06 	br	100f8 <__adddf3+0x220>
   104bc:	217ff804 	addi	r5,r4,-32
   104c0:	00800804 	movi	r2,32
   104c4:	494ad83a 	srl	r5,r9,r5
   104c8:	20807d26 	beq	r4,r2,106c0 <__adddf3+0x7e8>
   104cc:	00801004 	movi	r2,64
   104d0:	1109c83a 	sub	r4,r2,r4
   104d4:	4912983a 	sll	r9,r9,r4
   104d8:	498cb03a 	or	r6,r9,r6
   104dc:	300cc03a 	cmpne	r6,r6,zero
   104e0:	298ab03a 	or	r5,r5,r6
   104e4:	0013883a 	mov	r9,zero
   104e8:	003f1506 	br	10140 <__adddf3+0x268>
   104ec:	0101ffc4 	movi	r4,2047
   104f0:	113f9a1e 	bne	r2,r4,1035c <__adddf3+0x484>
   104f4:	4811883a 	mov	r8,r9
   104f8:	3023883a 	mov	r17,r6
   104fc:	1021883a 	mov	r16,r2
   10500:	3825883a 	mov	r18,r7
   10504:	003e9306 	br	ff54 <__adddf3+0x7c>
   10508:	8000161e 	bne	r16,zero,10564 <__adddf3+0x68c>
   1050c:	444ab03a 	or	r5,r8,r17
   10510:	28005126 	beq	r5,zero,10658 <__adddf3+0x780>
   10514:	0108303a 	nor	r4,zero,r4
   10518:	20004d1e 	bne	r4,zero,10650 <__adddf3+0x778>
   1051c:	89a3883a 	add	r17,r17,r6
   10520:	4253883a 	add	r9,r8,r9
   10524:	898d803a 	cmpltu	r6,r17,r6
   10528:	3251883a 	add	r8,r6,r9
   1052c:	1021883a 	mov	r16,r2
   10530:	003f0806 	br	10154 <__adddf3+0x27c>
   10534:	1000301e 	bne	r2,zero,105f8 <__adddf3+0x720>
   10538:	4984b03a 	or	r2,r9,r6
   1053c:	10007126 	beq	r2,zero,10704 <__adddf3+0x82c>
   10540:	4811883a 	mov	r8,r9
   10544:	3023883a 	mov	r17,r6
   10548:	3825883a 	mov	r18,r7
   1054c:	0401ffc4 	movi	r16,2047
   10550:	003e8006 	br	ff54 <__adddf3+0x7c>
   10554:	4462b03a 	or	r17,r8,r17
   10558:	8822c03a 	cmpne	r17,r17,zero
   1055c:	0007883a 	mov	r3,zero
   10560:	003f8b06 	br	10390 <__adddf3+0x4b8>
   10564:	0141ffc4 	movi	r5,2047
   10568:	11403b26 	beq	r2,r5,10658 <__adddf3+0x780>
   1056c:	0109c83a 	sub	r4,zero,r4
   10570:	42002034 	orhi	r8,r8,128
   10574:	01400e04 	movi	r5,56
   10578:	29006716 	blt	r5,r4,10718 <__adddf3+0x840>
   1057c:	014007c4 	movi	r5,31
   10580:	29007016 	blt	r5,r4,10744 <__adddf3+0x86c>
   10584:	01400804 	movi	r5,32
   10588:	290bc83a 	sub	r5,r5,r4
   1058c:	4154983a 	sll	r10,r8,r5
   10590:	890ed83a 	srl	r7,r17,r4
   10594:	894a983a 	sll	r5,r17,r5
   10598:	4108d83a 	srl	r4,r8,r4
   1059c:	51e2b03a 	or	r17,r10,r7
   105a0:	280ac03a 	cmpne	r5,r5,zero
   105a4:	8962b03a 	or	r17,r17,r5
   105a8:	89a3883a 	add	r17,r17,r6
   105ac:	2253883a 	add	r9,r4,r9
   105b0:	898d803a 	cmpltu	r6,r17,r6
   105b4:	3251883a 	add	r8,r6,r9
   105b8:	1021883a 	mov	r16,r2
   105bc:	003ee506 	br	10154 <__adddf3+0x27c>
   105c0:	4984b03a 	or	r2,r9,r6
   105c4:	103e6326 	beq	r2,zero,ff54 <__adddf3+0x7c>
   105c8:	8987c83a 	sub	r3,r17,r6
   105cc:	88c9803a 	cmpltu	r4,r17,r3
   105d0:	4245c83a 	sub	r2,r8,r9
   105d4:	1105c83a 	sub	r2,r2,r4
   105d8:	1100202c 	andhi	r4,r2,128
   105dc:	203ebb26 	beq	r4,zero,100cc <__adddf3+0x1f4>
   105e0:	3463c83a 	sub	r17,r6,r17
   105e4:	4a07c83a 	sub	r3,r9,r8
   105e8:	344d803a 	cmpltu	r6,r6,r17
   105ec:	1991c83a 	sub	r8,r3,r6
   105f0:	3825883a 	mov	r18,r7
   105f4:	003e5706 	br	ff54 <__adddf3+0x7c>
   105f8:	4984b03a 	or	r2,r9,r6
   105fc:	10002e26 	beq	r2,zero,106b8 <__adddf3+0x7e0>
   10600:	4004d0fa 	srli	r2,r8,3
   10604:	8822d0fa 	srli	r17,r17,3
   10608:	4010977a 	slli	r8,r8,29
   1060c:	10c0022c 	andhi	r3,r2,8
   10610:	4462b03a 	or	r17,r8,r17
   10614:	18000826 	beq	r3,zero,10638 <__adddf3+0x760>
   10618:	4808d0fa 	srli	r4,r9,3
   1061c:	20c0022c 	andhi	r3,r4,8
   10620:	1800051e 	bne	r3,zero,10638 <__adddf3+0x760>
   10624:	300cd0fa 	srli	r6,r6,3
   10628:	4806977a 	slli	r3,r9,29
   1062c:	2005883a 	mov	r2,r4
   10630:	3825883a 	mov	r18,r7
   10634:	19a2b03a 	or	r17,r3,r6
   10638:	8810d77a 	srli	r8,r17,29
   1063c:	100490fa 	slli	r2,r2,3
   10640:	882290fa 	slli	r17,r17,3
   10644:	0401ffc4 	movi	r16,2047
   10648:	4090b03a 	or	r8,r8,r2
   1064c:	003e4106 	br	ff54 <__adddf3+0x7c>
   10650:	0141ffc4 	movi	r5,2047
   10654:	117fc71e 	bne	r2,r5,10574 <__adddf3+0x69c>
   10658:	4811883a 	mov	r8,r9
   1065c:	3023883a 	mov	r17,r6
   10660:	1021883a 	mov	r16,r2
   10664:	003e3b06 	br	ff54 <__adddf3+0x7c>
   10668:	10002f26 	beq	r2,zero,10728 <__adddf3+0x850>
   1066c:	4984b03a 	or	r2,r9,r6
   10670:	10001126 	beq	r2,zero,106b8 <__adddf3+0x7e0>
   10674:	4004d0fa 	srli	r2,r8,3
   10678:	8822d0fa 	srli	r17,r17,3
   1067c:	4010977a 	slli	r8,r8,29
   10680:	10c0022c 	andhi	r3,r2,8
   10684:	4462b03a 	or	r17,r8,r17
   10688:	183feb26 	beq	r3,zero,10638 <__adddf3+0x760>
   1068c:	4808d0fa 	srli	r4,r9,3
   10690:	20c0022c 	andhi	r3,r4,8
   10694:	183fe81e 	bne	r3,zero,10638 <__adddf3+0x760>
   10698:	300cd0fa 	srli	r6,r6,3
   1069c:	4806977a 	slli	r3,r9,29
   106a0:	2005883a 	mov	r2,r4
   106a4:	19a2b03a 	or	r17,r3,r6
   106a8:	003fe306 	br	10638 <__adddf3+0x760>
   106ac:	0011883a 	mov	r8,zero
   106b0:	0005883a 	mov	r2,zero
   106b4:	003e3f06 	br	ffb4 <__adddf3+0xdc>
   106b8:	0401ffc4 	movi	r16,2047
   106bc:	003e2506 	br	ff54 <__adddf3+0x7c>
   106c0:	0013883a 	mov	r9,zero
   106c4:	003f8406 	br	104d8 <__adddf3+0x600>
   106c8:	0005883a 	mov	r2,zero
   106cc:	0007883a 	mov	r3,zero
   106d0:	003e8906 	br	100f8 <__adddf3+0x220>
   106d4:	197ff804 	addi	r5,r3,-32
   106d8:	01000804 	movi	r4,32
   106dc:	414ad83a 	srl	r5,r8,r5
   106e0:	19002426 	beq	r3,r4,10774 <__adddf3+0x89c>
   106e4:	01001004 	movi	r4,64
   106e8:	20c7c83a 	sub	r3,r4,r3
   106ec:	40c6983a 	sll	r3,r8,r3
   106f0:	1c46b03a 	or	r3,r3,r17
   106f4:	1806c03a 	cmpne	r3,r3,zero
   106f8:	28e2b03a 	or	r17,r5,r3
   106fc:	0007883a 	mov	r3,zero
   10700:	003f2306 	br	10390 <__adddf3+0x4b8>
   10704:	0007883a 	mov	r3,zero
   10708:	5811883a 	mov	r8,r11
   1070c:	00bfffc4 	movi	r2,-1
   10710:	0401ffc4 	movi	r16,2047
   10714:	003e7806 	br	100f8 <__adddf3+0x220>
   10718:	4462b03a 	or	r17,r8,r17
   1071c:	8822c03a 	cmpne	r17,r17,zero
   10720:	0009883a 	mov	r4,zero
   10724:	003fa006 	br	105a8 <__adddf3+0x6d0>
   10728:	4811883a 	mov	r8,r9
   1072c:	3023883a 	mov	r17,r6
   10730:	0401ffc4 	movi	r16,2047
   10734:	003e0706 	br	ff54 <__adddf3+0x7c>
   10738:	4811883a 	mov	r8,r9
   1073c:	3023883a 	mov	r17,r6
   10740:	003e0406 	br	ff54 <__adddf3+0x7c>
   10744:	21fff804 	addi	r7,r4,-32
   10748:	01400804 	movi	r5,32
   1074c:	41ced83a 	srl	r7,r8,r7
   10750:	21400a26 	beq	r4,r5,1077c <__adddf3+0x8a4>
   10754:	01401004 	movi	r5,64
   10758:	2909c83a 	sub	r4,r5,r4
   1075c:	4108983a 	sll	r4,r8,r4
   10760:	2448b03a 	or	r4,r4,r17
   10764:	2008c03a 	cmpne	r4,r4,zero
   10768:	3922b03a 	or	r17,r7,r4
   1076c:	0009883a 	mov	r4,zero
   10770:	003f8d06 	br	105a8 <__adddf3+0x6d0>
   10774:	0007883a 	mov	r3,zero
   10778:	003fdd06 	br	106f0 <__adddf3+0x818>
   1077c:	0009883a 	mov	r4,zero
   10780:	003ff706 	br	10760 <__adddf3+0x888>

00010784 <__divdf3>:
   10784:	defff204 	addi	sp,sp,-56
   10788:	dd400915 	stw	r21,36(sp)
   1078c:	282ad53a 	srli	r21,r5,20
   10790:	dd000815 	stw	r20,32(sp)
   10794:	2828d7fa 	srli	r20,r5,31
   10798:	dc000415 	stw	r16,16(sp)
   1079c:	04000434 	movhi	r16,16
   107a0:	df000c15 	stw	fp,48(sp)
   107a4:	843fffc4 	addi	r16,r16,-1
   107a8:	dfc00d15 	stw	ra,52(sp)
   107ac:	ddc00b15 	stw	r23,44(sp)
   107b0:	dd800a15 	stw	r22,40(sp)
   107b4:	dcc00715 	stw	r19,28(sp)
   107b8:	dc800615 	stw	r18,24(sp)
   107bc:	dc400515 	stw	r17,20(sp)
   107c0:	ad41ffcc 	andi	r21,r21,2047
   107c4:	2c20703a 	and	r16,r5,r16
   107c8:	a7003fcc 	andi	fp,r20,255
   107cc:	a8006126 	beq	r21,zero,10954 <__divdf3+0x1d0>
   107d0:	0081ffc4 	movi	r2,2047
   107d4:	2025883a 	mov	r18,r4
   107d8:	a8803726 	beq	r21,r2,108b8 <__divdf3+0x134>
   107dc:	80800434 	orhi	r2,r16,16
   107e0:	100490fa 	slli	r2,r2,3
   107e4:	2020d77a 	srli	r16,r4,29
   107e8:	202490fa 	slli	r18,r4,3
   107ec:	ad7f0044 	addi	r21,r21,-1023
   107f0:	80a0b03a 	or	r16,r16,r2
   107f4:	0027883a 	mov	r19,zero
   107f8:	0013883a 	mov	r9,zero
   107fc:	3804d53a 	srli	r2,r7,20
   10800:	382cd7fa 	srli	r22,r7,31
   10804:	04400434 	movhi	r17,16
   10808:	8c7fffc4 	addi	r17,r17,-1
   1080c:	1081ffcc 	andi	r2,r2,2047
   10810:	3011883a 	mov	r8,r6
   10814:	3c62703a 	and	r17,r7,r17
   10818:	b5c03fcc 	andi	r23,r22,255
   1081c:	10006c26 	beq	r2,zero,109d0 <__divdf3+0x24c>
   10820:	00c1ffc4 	movi	r3,2047
   10824:	10c06426 	beq	r2,r3,109b8 <__divdf3+0x234>
   10828:	88c00434 	orhi	r3,r17,16
   1082c:	180690fa 	slli	r3,r3,3
   10830:	3022d77a 	srli	r17,r6,29
   10834:	301090fa 	slli	r8,r6,3
   10838:	10bf0044 	addi	r2,r2,-1023
   1083c:	88e2b03a 	or	r17,r17,r3
   10840:	000f883a 	mov	r7,zero
   10844:	a58cf03a 	xor	r6,r20,r22
   10848:	3cc8b03a 	or	r4,r7,r19
   1084c:	a8abc83a 	sub	r21,r21,r2
   10850:	008003c4 	movi	r2,15
   10854:	3007883a 	mov	r3,r6
   10858:	34c03fcc 	andi	r19,r6,255
   1085c:	11009036 	bltu	r2,r4,10aa0 <__divdf3+0x31c>
   10860:	200890ba 	slli	r4,r4,2
   10864:	00800074 	movhi	r2,1
   10868:	10821e04 	addi	r2,r2,2168
   1086c:	2089883a 	add	r4,r4,r2
   10870:	20800017 	ldw	r2,0(r4)
   10874:	1000683a 	jmp	r2
   10878:	00010aa0 	cmpeqi	zero,zero,1066
   1087c:	000108f0 	cmpltui	zero,zero,1059
   10880:	00010a90 	cmplti	zero,zero,1066
   10884:	000108e4 	muli	zero,zero,1059
   10888:	00010a90 	cmplti	zero,zero,1066
   1088c:	00010a64 	muli	zero,zero,1065
   10890:	00010a90 	cmplti	zero,zero,1066
   10894:	000108e4 	muli	zero,zero,1059
   10898:	000108f0 	cmpltui	zero,zero,1059
   1089c:	000108f0 	cmpltui	zero,zero,1059
   108a0:	00010a64 	muli	zero,zero,1065
   108a4:	000108e4 	muli	zero,zero,1059
   108a8:	000108d4 	movui	zero,1059
   108ac:	000108d4 	movui	zero,1059
   108b0:	000108d4 	movui	zero,1059
   108b4:	00010d84 	movi	zero,1078
   108b8:	2404b03a 	or	r2,r4,r16
   108bc:	1000661e 	bne	r2,zero,10a58 <__divdf3+0x2d4>
   108c0:	04c00204 	movi	r19,8
   108c4:	0021883a 	mov	r16,zero
   108c8:	0025883a 	mov	r18,zero
   108cc:	02400084 	movi	r9,2
   108d0:	003fca06 	br	107fc <__divdf3+0x78>
   108d4:	8023883a 	mov	r17,r16
   108d8:	9011883a 	mov	r8,r18
   108dc:	e02f883a 	mov	r23,fp
   108e0:	480f883a 	mov	r7,r9
   108e4:	00800084 	movi	r2,2
   108e8:	3881311e 	bne	r7,r2,10db0 <__divdf3+0x62c>
   108ec:	b827883a 	mov	r19,r23
   108f0:	98c0004c 	andi	r3,r19,1
   108f4:	0081ffc4 	movi	r2,2047
   108f8:	000b883a 	mov	r5,zero
   108fc:	0025883a 	mov	r18,zero
   10900:	1004953a 	slli	r2,r2,20
   10904:	18c03fcc 	andi	r3,r3,255
   10908:	04400434 	movhi	r17,16
   1090c:	8c7fffc4 	addi	r17,r17,-1
   10910:	180697fa 	slli	r3,r3,31
   10914:	2c4a703a 	and	r5,r5,r17
   10918:	288ab03a 	or	r5,r5,r2
   1091c:	28c6b03a 	or	r3,r5,r3
   10920:	9005883a 	mov	r2,r18
   10924:	dfc00d17 	ldw	ra,52(sp)
   10928:	df000c17 	ldw	fp,48(sp)
   1092c:	ddc00b17 	ldw	r23,44(sp)
   10930:	dd800a17 	ldw	r22,40(sp)
   10934:	dd400917 	ldw	r21,36(sp)
   10938:	dd000817 	ldw	r20,32(sp)
   1093c:	dcc00717 	ldw	r19,28(sp)
   10940:	dc800617 	ldw	r18,24(sp)
   10944:	dc400517 	ldw	r17,20(sp)
   10948:	dc000417 	ldw	r16,16(sp)
   1094c:	dec00e04 	addi	sp,sp,56
   10950:	f800283a 	ret
   10954:	2404b03a 	or	r2,r4,r16
   10958:	2027883a 	mov	r19,r4
   1095c:	10003926 	beq	r2,zero,10a44 <__divdf3+0x2c0>
   10960:	80012e26 	beq	r16,zero,10e1c <__divdf3+0x698>
   10964:	8009883a 	mov	r4,r16
   10968:	d9800315 	stw	r6,12(sp)
   1096c:	d9c00215 	stw	r7,8(sp)
   10970:	00124dc0 	call	124dc <__clzsi2>
   10974:	d9800317 	ldw	r6,12(sp)
   10978:	d9c00217 	ldw	r7,8(sp)
   1097c:	113ffd44 	addi	r4,r2,-11
   10980:	00c00704 	movi	r3,28
   10984:	19012116 	blt	r3,r4,10e0c <__divdf3+0x688>
   10988:	00c00744 	movi	r3,29
   1098c:	147ffe04 	addi	r17,r2,-8
   10990:	1907c83a 	sub	r3,r3,r4
   10994:	8460983a 	sll	r16,r16,r17
   10998:	98c6d83a 	srl	r3,r19,r3
   1099c:	9c64983a 	sll	r18,r19,r17
   109a0:	1c20b03a 	or	r16,r3,r16
   109a4:	1080fcc4 	addi	r2,r2,1011
   109a8:	00abc83a 	sub	r21,zero,r2
   109ac:	0027883a 	mov	r19,zero
   109b0:	0013883a 	mov	r9,zero
   109b4:	003f9106 	br	107fc <__divdf3+0x78>
   109b8:	3446b03a 	or	r3,r6,r17
   109bc:	18001f1e 	bne	r3,zero,10a3c <__divdf3+0x2b8>
   109c0:	0023883a 	mov	r17,zero
   109c4:	0011883a 	mov	r8,zero
   109c8:	01c00084 	movi	r7,2
   109cc:	003f9d06 	br	10844 <__divdf3+0xc0>
   109d0:	3446b03a 	or	r3,r6,r17
   109d4:	18001526 	beq	r3,zero,10a2c <__divdf3+0x2a8>
   109d8:	88011b26 	beq	r17,zero,10e48 <__divdf3+0x6c4>
   109dc:	8809883a 	mov	r4,r17
   109e0:	d9800315 	stw	r6,12(sp)
   109e4:	da400115 	stw	r9,4(sp)
   109e8:	00124dc0 	call	124dc <__clzsi2>
   109ec:	d9800317 	ldw	r6,12(sp)
   109f0:	da400117 	ldw	r9,4(sp)
   109f4:	113ffd44 	addi	r4,r2,-11
   109f8:	00c00704 	movi	r3,28
   109fc:	19010e16 	blt	r3,r4,10e38 <__divdf3+0x6b4>
   10a00:	00c00744 	movi	r3,29
   10a04:	123ffe04 	addi	r8,r2,-8
   10a08:	1907c83a 	sub	r3,r3,r4
   10a0c:	8a22983a 	sll	r17,r17,r8
   10a10:	30c6d83a 	srl	r3,r6,r3
   10a14:	3210983a 	sll	r8,r6,r8
   10a18:	1c62b03a 	or	r17,r3,r17
   10a1c:	1080fcc4 	addi	r2,r2,1011
   10a20:	0085c83a 	sub	r2,zero,r2
   10a24:	000f883a 	mov	r7,zero
   10a28:	003f8606 	br	10844 <__divdf3+0xc0>
   10a2c:	0023883a 	mov	r17,zero
   10a30:	0011883a 	mov	r8,zero
   10a34:	01c00044 	movi	r7,1
   10a38:	003f8206 	br	10844 <__divdf3+0xc0>
   10a3c:	01c000c4 	movi	r7,3
   10a40:	003f8006 	br	10844 <__divdf3+0xc0>
   10a44:	04c00104 	movi	r19,4
   10a48:	0021883a 	mov	r16,zero
   10a4c:	0025883a 	mov	r18,zero
   10a50:	02400044 	movi	r9,1
   10a54:	003f6906 	br	107fc <__divdf3+0x78>
   10a58:	04c00304 	movi	r19,12
   10a5c:	024000c4 	movi	r9,3
   10a60:	003f6606 	br	107fc <__divdf3+0x78>
   10a64:	01400434 	movhi	r5,16
   10a68:	0007883a 	mov	r3,zero
   10a6c:	297fffc4 	addi	r5,r5,-1
   10a70:	04bfffc4 	movi	r18,-1
   10a74:	0081ffc4 	movi	r2,2047
   10a78:	003fa106 	br	10900 <__divdf3+0x17c>
   10a7c:	00c00044 	movi	r3,1
   10a80:	1887c83a 	sub	r3,r3,r2
   10a84:	01000e04 	movi	r4,56
   10a88:	20c1210e 	bge	r4,r3,10f10 <__divdf3+0x78c>
   10a8c:	98c0004c 	andi	r3,r19,1
   10a90:	0005883a 	mov	r2,zero
   10a94:	000b883a 	mov	r5,zero
   10a98:	0025883a 	mov	r18,zero
   10a9c:	003f9806 	br	10900 <__divdf3+0x17c>
   10aa0:	8c00fd36 	bltu	r17,r16,10e98 <__divdf3+0x714>
   10aa4:	8440fb26 	beq	r16,r17,10e94 <__divdf3+0x710>
   10aa8:	8007883a 	mov	r3,r16
   10aac:	ad7fffc4 	addi	r21,r21,-1
   10ab0:	0021883a 	mov	r16,zero
   10ab4:	4004d63a 	srli	r2,r8,24
   10ab8:	8822923a 	slli	r17,r17,8
   10abc:	1809883a 	mov	r4,r3
   10ac0:	402c923a 	slli	r22,r8,8
   10ac4:	88b8b03a 	or	fp,r17,r2
   10ac8:	e028d43a 	srli	r20,fp,16
   10acc:	d8c00015 	stw	r3,0(sp)
   10ad0:	e5ffffcc 	andi	r23,fp,65535
   10ad4:	a00b883a 	mov	r5,r20
   10ad8:	000fe1c0 	call	fe1c <__udivsi3>
   10adc:	d8c00017 	ldw	r3,0(sp)
   10ae0:	a00b883a 	mov	r5,r20
   10ae4:	d8800315 	stw	r2,12(sp)
   10ae8:	1809883a 	mov	r4,r3
   10aec:	000fe800 	call	fe80 <__umodsi3>
   10af0:	d9800317 	ldw	r6,12(sp)
   10af4:	1006943a 	slli	r3,r2,16
   10af8:	9004d43a 	srli	r2,r18,16
   10afc:	b9a3383a 	mul	r17,r23,r6
   10b00:	10c4b03a 	or	r2,r2,r3
   10b04:	1440062e 	bgeu	r2,r17,10b20 <__divdf3+0x39c>
   10b08:	1705883a 	add	r2,r2,fp
   10b0c:	30ffffc4 	addi	r3,r6,-1
   10b10:	1700ee36 	bltu	r2,fp,10ecc <__divdf3+0x748>
   10b14:	1440ed2e 	bgeu	r2,r17,10ecc <__divdf3+0x748>
   10b18:	31bfff84 	addi	r6,r6,-2
   10b1c:	1705883a 	add	r2,r2,fp
   10b20:	1463c83a 	sub	r17,r2,r17
   10b24:	a00b883a 	mov	r5,r20
   10b28:	8809883a 	mov	r4,r17
   10b2c:	d9800315 	stw	r6,12(sp)
   10b30:	000fe1c0 	call	fe1c <__udivsi3>
   10b34:	a00b883a 	mov	r5,r20
   10b38:	8809883a 	mov	r4,r17
   10b3c:	d8800215 	stw	r2,8(sp)
   10b40:	000fe800 	call	fe80 <__umodsi3>
   10b44:	d9c00217 	ldw	r7,8(sp)
   10b48:	1004943a 	slli	r2,r2,16
   10b4c:	94bfffcc 	andi	r18,r18,65535
   10b50:	b9d1383a 	mul	r8,r23,r7
   10b54:	90a4b03a 	or	r18,r18,r2
   10b58:	d9800317 	ldw	r6,12(sp)
   10b5c:	9200062e 	bgeu	r18,r8,10b78 <__divdf3+0x3f4>
   10b60:	9725883a 	add	r18,r18,fp
   10b64:	38bfffc4 	addi	r2,r7,-1
   10b68:	9700d636 	bltu	r18,fp,10ec4 <__divdf3+0x740>
   10b6c:	9200d52e 	bgeu	r18,r8,10ec4 <__divdf3+0x740>
   10b70:	39ffff84 	addi	r7,r7,-2
   10b74:	9725883a 	add	r18,r18,fp
   10b78:	3004943a 	slli	r2,r6,16
   10b7c:	b012d43a 	srli	r9,r22,16
   10b80:	b1bfffcc 	andi	r6,r22,65535
   10b84:	11e2b03a 	or	r17,r2,r7
   10b88:	8806d43a 	srli	r3,r17,16
   10b8c:	893fffcc 	andi	r4,r17,65535
   10b90:	218b383a 	mul	r5,r4,r6
   10b94:	30c5383a 	mul	r2,r6,r3
   10b98:	2249383a 	mul	r4,r4,r9
   10b9c:	280ed43a 	srli	r7,r5,16
   10ba0:	9225c83a 	sub	r18,r18,r8
   10ba4:	2089883a 	add	r4,r4,r2
   10ba8:	3909883a 	add	r4,r7,r4
   10bac:	1a47383a 	mul	r3,r3,r9
   10bb0:	2080022e 	bgeu	r4,r2,10bbc <__divdf3+0x438>
   10bb4:	00800074 	movhi	r2,1
   10bb8:	1887883a 	add	r3,r3,r2
   10bbc:	2004d43a 	srli	r2,r4,16
   10bc0:	2008943a 	slli	r4,r4,16
   10bc4:	297fffcc 	andi	r5,r5,65535
   10bc8:	10c7883a 	add	r3,r2,r3
   10bcc:	2149883a 	add	r4,r4,r5
   10bd0:	90c0a536 	bltu	r18,r3,10e68 <__divdf3+0x6e4>
   10bd4:	90c0bf26 	beq	r18,r3,10ed4 <__divdf3+0x750>
   10bd8:	90c7c83a 	sub	r3,r18,r3
   10bdc:	810fc83a 	sub	r7,r16,r4
   10be0:	81e5803a 	cmpltu	r18,r16,r7
   10be4:	1ca5c83a 	sub	r18,r3,r18
   10be8:	e480c126 	beq	fp,r18,10ef0 <__divdf3+0x76c>
   10bec:	a00b883a 	mov	r5,r20
   10bf0:	9009883a 	mov	r4,r18
   10bf4:	d9800315 	stw	r6,12(sp)
   10bf8:	d9c00215 	stw	r7,8(sp)
   10bfc:	da400115 	stw	r9,4(sp)
   10c00:	000fe1c0 	call	fe1c <__udivsi3>
   10c04:	a00b883a 	mov	r5,r20
   10c08:	9009883a 	mov	r4,r18
   10c0c:	d8800015 	stw	r2,0(sp)
   10c10:	000fe800 	call	fe80 <__umodsi3>
   10c14:	d9c00217 	ldw	r7,8(sp)
   10c18:	da000017 	ldw	r8,0(sp)
   10c1c:	1006943a 	slli	r3,r2,16
   10c20:	3804d43a 	srli	r2,r7,16
   10c24:	ba21383a 	mul	r16,r23,r8
   10c28:	d9800317 	ldw	r6,12(sp)
   10c2c:	10c4b03a 	or	r2,r2,r3
   10c30:	da400117 	ldw	r9,4(sp)
   10c34:	1400062e 	bgeu	r2,r16,10c50 <__divdf3+0x4cc>
   10c38:	1705883a 	add	r2,r2,fp
   10c3c:	40ffffc4 	addi	r3,r8,-1
   10c40:	1700ad36 	bltu	r2,fp,10ef8 <__divdf3+0x774>
   10c44:	1400ac2e 	bgeu	r2,r16,10ef8 <__divdf3+0x774>
   10c48:	423fff84 	addi	r8,r8,-2
   10c4c:	1705883a 	add	r2,r2,fp
   10c50:	1421c83a 	sub	r16,r2,r16
   10c54:	a00b883a 	mov	r5,r20
   10c58:	8009883a 	mov	r4,r16
   10c5c:	d9800315 	stw	r6,12(sp)
   10c60:	d9c00215 	stw	r7,8(sp)
   10c64:	da000015 	stw	r8,0(sp)
   10c68:	da400115 	stw	r9,4(sp)
   10c6c:	000fe1c0 	call	fe1c <__udivsi3>
   10c70:	8009883a 	mov	r4,r16
   10c74:	a00b883a 	mov	r5,r20
   10c78:	1025883a 	mov	r18,r2
   10c7c:	000fe800 	call	fe80 <__umodsi3>
   10c80:	d9c00217 	ldw	r7,8(sp)
   10c84:	1004943a 	slli	r2,r2,16
   10c88:	bcaf383a 	mul	r23,r23,r18
   10c8c:	393fffcc 	andi	r4,r7,65535
   10c90:	2088b03a 	or	r4,r4,r2
   10c94:	d9800317 	ldw	r6,12(sp)
   10c98:	da000017 	ldw	r8,0(sp)
   10c9c:	da400117 	ldw	r9,4(sp)
   10ca0:	25c0062e 	bgeu	r4,r23,10cbc <__divdf3+0x538>
   10ca4:	2709883a 	add	r4,r4,fp
   10ca8:	90bfffc4 	addi	r2,r18,-1
   10cac:	27009436 	bltu	r4,fp,10f00 <__divdf3+0x77c>
   10cb0:	25c0932e 	bgeu	r4,r23,10f00 <__divdf3+0x77c>
   10cb4:	94bfff84 	addi	r18,r18,-2
   10cb8:	2709883a 	add	r4,r4,fp
   10cbc:	4004943a 	slli	r2,r8,16
   10cc0:	25efc83a 	sub	r23,r4,r23
   10cc4:	1490b03a 	or	r8,r2,r18
   10cc8:	4008d43a 	srli	r4,r8,16
   10ccc:	40ffffcc 	andi	r3,r8,65535
   10cd0:	30c5383a 	mul	r2,r6,r3
   10cd4:	1a47383a 	mul	r3,r3,r9
   10cd8:	310d383a 	mul	r6,r6,r4
   10cdc:	100ad43a 	srli	r5,r2,16
   10ce0:	4913383a 	mul	r9,r9,r4
   10ce4:	1987883a 	add	r3,r3,r6
   10ce8:	28c7883a 	add	r3,r5,r3
   10cec:	1980022e 	bgeu	r3,r6,10cf8 <__divdf3+0x574>
   10cf0:	01000074 	movhi	r4,1
   10cf4:	4913883a 	add	r9,r9,r4
   10cf8:	1808d43a 	srli	r4,r3,16
   10cfc:	1806943a 	slli	r3,r3,16
   10d00:	10bfffcc 	andi	r2,r2,65535
   10d04:	2253883a 	add	r9,r4,r9
   10d08:	1887883a 	add	r3,r3,r2
   10d0c:	ba403836 	bltu	r23,r9,10df0 <__divdf3+0x66c>
   10d10:	ba403626 	beq	r23,r9,10dec <__divdf3+0x668>
   10d14:	42000054 	ori	r8,r8,1
   10d18:	a880ffc4 	addi	r2,r21,1023
   10d1c:	00bf570e 	bge	zero,r2,10a7c <__divdf3+0x2f8>
   10d20:	40c001cc 	andi	r3,r8,7
   10d24:	18000726 	beq	r3,zero,10d44 <__divdf3+0x5c0>
   10d28:	40c003cc 	andi	r3,r8,15
   10d2c:	01000104 	movi	r4,4
   10d30:	19000426 	beq	r3,r4,10d44 <__divdf3+0x5c0>
   10d34:	4107883a 	add	r3,r8,r4
   10d38:	1a11803a 	cmpltu	r8,r3,r8
   10d3c:	8a23883a 	add	r17,r17,r8
   10d40:	1811883a 	mov	r8,r3
   10d44:	88c0402c 	andhi	r3,r17,256
   10d48:	18000426 	beq	r3,zero,10d5c <__divdf3+0x5d8>
   10d4c:	00ffc034 	movhi	r3,65280
   10d50:	18ffffc4 	addi	r3,r3,-1
   10d54:	a8810004 	addi	r2,r21,1024
   10d58:	88e2703a 	and	r17,r17,r3
   10d5c:	00c1ff84 	movi	r3,2046
   10d60:	18bee316 	blt	r3,r2,108f0 <__divdf3+0x16c>
   10d64:	8824977a 	slli	r18,r17,29
   10d68:	4010d0fa 	srli	r8,r8,3
   10d6c:	8822927a 	slli	r17,r17,9
   10d70:	1081ffcc 	andi	r2,r2,2047
   10d74:	9224b03a 	or	r18,r18,r8
   10d78:	880ad33a 	srli	r5,r17,12
   10d7c:	98c0004c 	andi	r3,r19,1
   10d80:	003edf06 	br	10900 <__divdf3+0x17c>
   10d84:	8080022c 	andhi	r2,r16,8
   10d88:	10001226 	beq	r2,zero,10dd4 <__divdf3+0x650>
   10d8c:	8880022c 	andhi	r2,r17,8
   10d90:	1000101e 	bne	r2,zero,10dd4 <__divdf3+0x650>
   10d94:	00800434 	movhi	r2,16
   10d98:	89400234 	orhi	r5,r17,8
   10d9c:	10bfffc4 	addi	r2,r2,-1
   10da0:	b007883a 	mov	r3,r22
   10da4:	288a703a 	and	r5,r5,r2
   10da8:	4025883a 	mov	r18,r8
   10dac:	003f3106 	br	10a74 <__divdf3+0x2f0>
   10db0:	008000c4 	movi	r2,3
   10db4:	3880a626 	beq	r7,r2,11050 <__divdf3+0x8cc>
   10db8:	00800044 	movi	r2,1
   10dbc:	3880521e 	bne	r7,r2,10f08 <__divdf3+0x784>
   10dc0:	b807883a 	mov	r3,r23
   10dc4:	0005883a 	mov	r2,zero
   10dc8:	000b883a 	mov	r5,zero
   10dcc:	0025883a 	mov	r18,zero
   10dd0:	003ecb06 	br	10900 <__divdf3+0x17c>
   10dd4:	00800434 	movhi	r2,16
   10dd8:	81400234 	orhi	r5,r16,8
   10ddc:	10bfffc4 	addi	r2,r2,-1
   10de0:	a007883a 	mov	r3,r20
   10de4:	288a703a 	and	r5,r5,r2
   10de8:	003f2206 	br	10a74 <__divdf3+0x2f0>
   10dec:	183fca26 	beq	r3,zero,10d18 <__divdf3+0x594>
   10df0:	e5ef883a 	add	r23,fp,r23
   10df4:	40bfffc4 	addi	r2,r8,-1
   10df8:	bf00392e 	bgeu	r23,fp,10ee0 <__divdf3+0x75c>
   10dfc:	1011883a 	mov	r8,r2
   10e00:	ba7fc41e 	bne	r23,r9,10d14 <__divdf3+0x590>
   10e04:	b0ffc31e 	bne	r22,r3,10d14 <__divdf3+0x590>
   10e08:	003fc306 	br	10d18 <__divdf3+0x594>
   10e0c:	143ff604 	addi	r16,r2,-40
   10e10:	9c20983a 	sll	r16,r19,r16
   10e14:	0025883a 	mov	r18,zero
   10e18:	003ee206 	br	109a4 <__divdf3+0x220>
   10e1c:	d9800315 	stw	r6,12(sp)
   10e20:	d9c00215 	stw	r7,8(sp)
   10e24:	00124dc0 	call	124dc <__clzsi2>
   10e28:	10800804 	addi	r2,r2,32
   10e2c:	d9c00217 	ldw	r7,8(sp)
   10e30:	d9800317 	ldw	r6,12(sp)
   10e34:	003ed106 	br	1097c <__divdf3+0x1f8>
   10e38:	147ff604 	addi	r17,r2,-40
   10e3c:	3462983a 	sll	r17,r6,r17
   10e40:	0011883a 	mov	r8,zero
   10e44:	003ef506 	br	10a1c <__divdf3+0x298>
   10e48:	3009883a 	mov	r4,r6
   10e4c:	d9800315 	stw	r6,12(sp)
   10e50:	da400115 	stw	r9,4(sp)
   10e54:	00124dc0 	call	124dc <__clzsi2>
   10e58:	10800804 	addi	r2,r2,32
   10e5c:	da400117 	ldw	r9,4(sp)
   10e60:	d9800317 	ldw	r6,12(sp)
   10e64:	003ee306 	br	109f4 <__divdf3+0x270>
   10e68:	85a1883a 	add	r16,r16,r22
   10e6c:	8585803a 	cmpltu	r2,r16,r22
   10e70:	1705883a 	add	r2,r2,fp
   10e74:	14a5883a 	add	r18,r2,r18
   10e78:	88bfffc4 	addi	r2,r17,-1
   10e7c:	e4800c2e 	bgeu	fp,r18,10eb0 <__divdf3+0x72c>
   10e80:	90c03e36 	bltu	r18,r3,10f7c <__divdf3+0x7f8>
   10e84:	1c806926 	beq	r3,r18,1102c <__divdf3+0x8a8>
   10e88:	90c7c83a 	sub	r3,r18,r3
   10e8c:	1023883a 	mov	r17,r2
   10e90:	003f5206 	br	10bdc <__divdf3+0x458>
   10e94:	923f0436 	bltu	r18,r8,10aa8 <__divdf3+0x324>
   10e98:	800897fa 	slli	r4,r16,31
   10e9c:	9004d07a 	srli	r2,r18,1
   10ea0:	8006d07a 	srli	r3,r16,1
   10ea4:	902097fa 	slli	r16,r18,31
   10ea8:	20a4b03a 	or	r18,r4,r2
   10eac:	003f0106 	br	10ab4 <__divdf3+0x330>
   10eb0:	e4bff51e 	bne	fp,r18,10e88 <__divdf3+0x704>
   10eb4:	85bff22e 	bgeu	r16,r22,10e80 <__divdf3+0x6fc>
   10eb8:	e0c7c83a 	sub	r3,fp,r3
   10ebc:	1023883a 	mov	r17,r2
   10ec0:	003f4606 	br	10bdc <__divdf3+0x458>
   10ec4:	100f883a 	mov	r7,r2
   10ec8:	003f2b06 	br	10b78 <__divdf3+0x3f4>
   10ecc:	180d883a 	mov	r6,r3
   10ed0:	003f1306 	br	10b20 <__divdf3+0x39c>
   10ed4:	813fe436 	bltu	r16,r4,10e68 <__divdf3+0x6e4>
   10ed8:	0007883a 	mov	r3,zero
   10edc:	003f3f06 	br	10bdc <__divdf3+0x458>
   10ee0:	ba402c36 	bltu	r23,r9,10f94 <__divdf3+0x810>
   10ee4:	4dc05426 	beq	r9,r23,11038 <__divdf3+0x8b4>
   10ee8:	1011883a 	mov	r8,r2
   10eec:	003f8906 	br	10d14 <__divdf3+0x590>
   10ef0:	023fffc4 	movi	r8,-1
   10ef4:	003f8806 	br	10d18 <__divdf3+0x594>
   10ef8:	1811883a 	mov	r8,r3
   10efc:	003f5406 	br	10c50 <__divdf3+0x4cc>
   10f00:	1025883a 	mov	r18,r2
   10f04:	003f6d06 	br	10cbc <__divdf3+0x538>
   10f08:	b827883a 	mov	r19,r23
   10f0c:	003f8206 	br	10d18 <__divdf3+0x594>
   10f10:	010007c4 	movi	r4,31
   10f14:	20c02616 	blt	r4,r3,10fb0 <__divdf3+0x82c>
   10f18:	00800804 	movi	r2,32
   10f1c:	10c5c83a 	sub	r2,r2,r3
   10f20:	888a983a 	sll	r5,r17,r2
   10f24:	40c8d83a 	srl	r4,r8,r3
   10f28:	4084983a 	sll	r2,r8,r2
   10f2c:	88e2d83a 	srl	r17,r17,r3
   10f30:	2906b03a 	or	r3,r5,r4
   10f34:	1004c03a 	cmpne	r2,r2,zero
   10f38:	1886b03a 	or	r3,r3,r2
   10f3c:	188001cc 	andi	r2,r3,7
   10f40:	10000726 	beq	r2,zero,10f60 <__divdf3+0x7dc>
   10f44:	188003cc 	andi	r2,r3,15
   10f48:	01000104 	movi	r4,4
   10f4c:	11000426 	beq	r2,r4,10f60 <__divdf3+0x7dc>
   10f50:	1805883a 	mov	r2,r3
   10f54:	10c00104 	addi	r3,r2,4
   10f58:	1885803a 	cmpltu	r2,r3,r2
   10f5c:	88a3883a 	add	r17,r17,r2
   10f60:	8880202c 	andhi	r2,r17,128
   10f64:	10002726 	beq	r2,zero,11004 <__divdf3+0x880>
   10f68:	98c0004c 	andi	r3,r19,1
   10f6c:	00800044 	movi	r2,1
   10f70:	000b883a 	mov	r5,zero
   10f74:	0025883a 	mov	r18,zero
   10f78:	003e6106 	br	10900 <__divdf3+0x17c>
   10f7c:	85a1883a 	add	r16,r16,r22
   10f80:	8585803a 	cmpltu	r2,r16,r22
   10f84:	1705883a 	add	r2,r2,fp
   10f88:	14a5883a 	add	r18,r2,r18
   10f8c:	8c7fff84 	addi	r17,r17,-2
   10f90:	003f1106 	br	10bd8 <__divdf3+0x454>
   10f94:	b589883a 	add	r4,r22,r22
   10f98:	25ad803a 	cmpltu	r22,r4,r22
   10f9c:	b739883a 	add	fp,r22,fp
   10fa0:	40bfff84 	addi	r2,r8,-2
   10fa4:	bf2f883a 	add	r23,r23,fp
   10fa8:	202d883a 	mov	r22,r4
   10fac:	003f9306 	br	10dfc <__divdf3+0x678>
   10fb0:	013ff844 	movi	r4,-31
   10fb4:	2085c83a 	sub	r2,r4,r2
   10fb8:	8888d83a 	srl	r4,r17,r2
   10fbc:	00800804 	movi	r2,32
   10fc0:	18802126 	beq	r3,r2,11048 <__divdf3+0x8c4>
   10fc4:	00801004 	movi	r2,64
   10fc8:	10c5c83a 	sub	r2,r2,r3
   10fcc:	8884983a 	sll	r2,r17,r2
   10fd0:	1204b03a 	or	r2,r2,r8
   10fd4:	1004c03a 	cmpne	r2,r2,zero
   10fd8:	2084b03a 	or	r2,r4,r2
   10fdc:	144001cc 	andi	r17,r2,7
   10fe0:	88000d1e 	bne	r17,zero,11018 <__divdf3+0x894>
   10fe4:	000b883a 	mov	r5,zero
   10fe8:	1024d0fa 	srli	r18,r2,3
   10fec:	98c0004c 	andi	r3,r19,1
   10ff0:	0005883a 	mov	r2,zero
   10ff4:	9464b03a 	or	r18,r18,r17
   10ff8:	003e4106 	br	10900 <__divdf3+0x17c>
   10ffc:	1007883a 	mov	r3,r2
   11000:	0023883a 	mov	r17,zero
   11004:	880a927a 	slli	r5,r17,9
   11008:	1805883a 	mov	r2,r3
   1100c:	8822977a 	slli	r17,r17,29
   11010:	280ad33a 	srli	r5,r5,12
   11014:	003ff406 	br	10fe8 <__divdf3+0x864>
   11018:	10c003cc 	andi	r3,r2,15
   1101c:	01000104 	movi	r4,4
   11020:	193ff626 	beq	r3,r4,10ffc <__divdf3+0x878>
   11024:	0023883a 	mov	r17,zero
   11028:	003fca06 	br	10f54 <__divdf3+0x7d0>
   1102c:	813fd336 	bltu	r16,r4,10f7c <__divdf3+0x7f8>
   11030:	1023883a 	mov	r17,r2
   11034:	003fa806 	br	10ed8 <__divdf3+0x754>
   11038:	b0ffd636 	bltu	r22,r3,10f94 <__divdf3+0x810>
   1103c:	1011883a 	mov	r8,r2
   11040:	b0ff341e 	bne	r22,r3,10d14 <__divdf3+0x590>
   11044:	003f3406 	br	10d18 <__divdf3+0x594>
   11048:	0005883a 	mov	r2,zero
   1104c:	003fe006 	br	10fd0 <__divdf3+0x84c>
   11050:	00800434 	movhi	r2,16
   11054:	89400234 	orhi	r5,r17,8
   11058:	10bfffc4 	addi	r2,r2,-1
   1105c:	b807883a 	mov	r3,r23
   11060:	288a703a 	and	r5,r5,r2
   11064:	4025883a 	mov	r18,r8
   11068:	003e8206 	br	10a74 <__divdf3+0x2f0>

0001106c <__eqdf2>:
   1106c:	2804d53a 	srli	r2,r5,20
   11070:	3806d53a 	srli	r3,r7,20
   11074:	02000434 	movhi	r8,16
   11078:	423fffc4 	addi	r8,r8,-1
   1107c:	1081ffcc 	andi	r2,r2,2047
   11080:	0281ffc4 	movi	r10,2047
   11084:	2a12703a 	and	r9,r5,r8
   11088:	18c1ffcc 	andi	r3,r3,2047
   1108c:	3a10703a 	and	r8,r7,r8
   11090:	280ad7fa 	srli	r5,r5,31
   11094:	380ed7fa 	srli	r7,r7,31
   11098:	12801026 	beq	r2,r10,110dc <__eqdf2+0x70>
   1109c:	0281ffc4 	movi	r10,2047
   110a0:	1a800a26 	beq	r3,r10,110cc <__eqdf2+0x60>
   110a4:	10c00226 	beq	r2,r3,110b0 <__eqdf2+0x44>
   110a8:	00800044 	movi	r2,1
   110ac:	f800283a 	ret
   110b0:	4a3ffd1e 	bne	r9,r8,110a8 <__eqdf2+0x3c>
   110b4:	21bffc1e 	bne	r4,r6,110a8 <__eqdf2+0x3c>
   110b8:	29c00c26 	beq	r5,r7,110ec <__eqdf2+0x80>
   110bc:	103ffa1e 	bne	r2,zero,110a8 <__eqdf2+0x3c>
   110c0:	2244b03a 	or	r2,r4,r9
   110c4:	1004c03a 	cmpne	r2,r2,zero
   110c8:	f800283a 	ret
   110cc:	3214b03a 	or	r10,r6,r8
   110d0:	503ff426 	beq	r10,zero,110a4 <__eqdf2+0x38>
   110d4:	00800044 	movi	r2,1
   110d8:	f800283a 	ret
   110dc:	2254b03a 	or	r10,r4,r9
   110e0:	503fee26 	beq	r10,zero,1109c <__eqdf2+0x30>
   110e4:	00800044 	movi	r2,1
   110e8:	f800283a 	ret
   110ec:	0005883a 	mov	r2,zero
   110f0:	f800283a 	ret

000110f4 <__gedf2>:
   110f4:	2804d53a 	srli	r2,r5,20
   110f8:	3806d53a 	srli	r3,r7,20
   110fc:	02000434 	movhi	r8,16
   11100:	423fffc4 	addi	r8,r8,-1
   11104:	1081ffcc 	andi	r2,r2,2047
   11108:	0241ffc4 	movi	r9,2047
   1110c:	2a14703a 	and	r10,r5,r8
   11110:	18c1ffcc 	andi	r3,r3,2047
   11114:	3a10703a 	and	r8,r7,r8
   11118:	280ad7fa 	srli	r5,r5,31
   1111c:	380ed7fa 	srli	r7,r7,31
   11120:	12401d26 	beq	r2,r9,11198 <__gedf2+0xa4>
   11124:	0241ffc4 	movi	r9,2047
   11128:	1a401226 	beq	r3,r9,11174 <__gedf2+0x80>
   1112c:	1000081e 	bne	r2,zero,11150 <__gedf2+0x5c>
   11130:	2296b03a 	or	r11,r4,r10
   11134:	5813003a 	cmpeq	r9,r11,zero
   11138:	1800091e 	bne	r3,zero,11160 <__gedf2+0x6c>
   1113c:	3218b03a 	or	r12,r6,r8
   11140:	6000071e 	bne	r12,zero,11160 <__gedf2+0x6c>
   11144:	0005883a 	mov	r2,zero
   11148:	5800101e 	bne	r11,zero,1118c <__gedf2+0x98>
   1114c:	f800283a 	ret
   11150:	18000c1e 	bne	r3,zero,11184 <__gedf2+0x90>
   11154:	3212b03a 	or	r9,r6,r8
   11158:	48000c26 	beq	r9,zero,1118c <__gedf2+0x98>
   1115c:	0013883a 	mov	r9,zero
   11160:	39c03fcc 	andi	r7,r7,255
   11164:	48000826 	beq	r9,zero,11188 <__gedf2+0x94>
   11168:	38000926 	beq	r7,zero,11190 <__gedf2+0x9c>
   1116c:	00800044 	movi	r2,1
   11170:	f800283a 	ret
   11174:	3212b03a 	or	r9,r6,r8
   11178:	483fec26 	beq	r9,zero,1112c <__gedf2+0x38>
   1117c:	00bfff84 	movi	r2,-2
   11180:	f800283a 	ret
   11184:	39c03fcc 	andi	r7,r7,255
   11188:	29c00626 	beq	r5,r7,111a4 <__gedf2+0xb0>
   1118c:	283ff726 	beq	r5,zero,1116c <__gedf2+0x78>
   11190:	00bfffc4 	movi	r2,-1
   11194:	f800283a 	ret
   11198:	2292b03a 	or	r9,r4,r10
   1119c:	483fe126 	beq	r9,zero,11124 <__gedf2+0x30>
   111a0:	003ff606 	br	1117c <__gedf2+0x88>
   111a4:	18bff916 	blt	r3,r2,1118c <__gedf2+0x98>
   111a8:	10c00316 	blt	r2,r3,111b8 <__gedf2+0xc4>
   111ac:	42bff736 	bltu	r8,r10,1118c <__gedf2+0x98>
   111b0:	52000326 	beq	r10,r8,111c0 <__gedf2+0xcc>
   111b4:	5200042e 	bgeu	r10,r8,111c8 <__gedf2+0xd4>
   111b8:	283fec1e 	bne	r5,zero,1116c <__gedf2+0x78>
   111bc:	003ff406 	br	11190 <__gedf2+0x9c>
   111c0:	313ff236 	bltu	r6,r4,1118c <__gedf2+0x98>
   111c4:	21bffc36 	bltu	r4,r6,111b8 <__gedf2+0xc4>
   111c8:	0005883a 	mov	r2,zero
   111cc:	f800283a 	ret

000111d0 <__ledf2>:
   111d0:	2804d53a 	srli	r2,r5,20
   111d4:	3810d53a 	srli	r8,r7,20
   111d8:	00c00434 	movhi	r3,16
   111dc:	18ffffc4 	addi	r3,r3,-1
   111e0:	1081ffcc 	andi	r2,r2,2047
   111e4:	0241ffc4 	movi	r9,2047
   111e8:	28d4703a 	and	r10,r5,r3
   111ec:	4201ffcc 	andi	r8,r8,2047
   111f0:	38c6703a 	and	r3,r7,r3
   111f4:	280ad7fa 	srli	r5,r5,31
   111f8:	380ed7fa 	srli	r7,r7,31
   111fc:	12401f26 	beq	r2,r9,1127c <__ledf2+0xac>
   11200:	0241ffc4 	movi	r9,2047
   11204:	42401426 	beq	r8,r9,11258 <__ledf2+0x88>
   11208:	1000091e 	bne	r2,zero,11230 <__ledf2+0x60>
   1120c:	2296b03a 	or	r11,r4,r10
   11210:	5813003a 	cmpeq	r9,r11,zero
   11214:	29403fcc 	andi	r5,r5,255
   11218:	40000a1e 	bne	r8,zero,11244 <__ledf2+0x74>
   1121c:	30d8b03a 	or	r12,r6,r3
   11220:	6000081e 	bne	r12,zero,11244 <__ledf2+0x74>
   11224:	0005883a 	mov	r2,zero
   11228:	5800111e 	bne	r11,zero,11270 <__ledf2+0xa0>
   1122c:	f800283a 	ret
   11230:	29403fcc 	andi	r5,r5,255
   11234:	40000c1e 	bne	r8,zero,11268 <__ledf2+0x98>
   11238:	30d2b03a 	or	r9,r6,r3
   1123c:	48000c26 	beq	r9,zero,11270 <__ledf2+0xa0>
   11240:	0013883a 	mov	r9,zero
   11244:	39c03fcc 	andi	r7,r7,255
   11248:	48000826 	beq	r9,zero,1126c <__ledf2+0x9c>
   1124c:	38001126 	beq	r7,zero,11294 <__ledf2+0xc4>
   11250:	00800044 	movi	r2,1
   11254:	f800283a 	ret
   11258:	30d2b03a 	or	r9,r6,r3
   1125c:	483fea26 	beq	r9,zero,11208 <__ledf2+0x38>
   11260:	00800084 	movi	r2,2
   11264:	f800283a 	ret
   11268:	39c03fcc 	andi	r7,r7,255
   1126c:	39400726 	beq	r7,r5,1128c <__ledf2+0xbc>
   11270:	2800081e 	bne	r5,zero,11294 <__ledf2+0xc4>
   11274:	00800044 	movi	r2,1
   11278:	f800283a 	ret
   1127c:	2292b03a 	or	r9,r4,r10
   11280:	483fdf26 	beq	r9,zero,11200 <__ledf2+0x30>
   11284:	00800084 	movi	r2,2
   11288:	f800283a 	ret
   1128c:	4080030e 	bge	r8,r2,1129c <__ledf2+0xcc>
   11290:	383fef26 	beq	r7,zero,11250 <__ledf2+0x80>
   11294:	00bfffc4 	movi	r2,-1
   11298:	f800283a 	ret
   1129c:	123feb16 	blt	r2,r8,1124c <__ledf2+0x7c>
   112a0:	1abff336 	bltu	r3,r10,11270 <__ledf2+0xa0>
   112a4:	50c00326 	beq	r10,r3,112b4 <__ledf2+0xe4>
   112a8:	50c0042e 	bgeu	r10,r3,112bc <__ledf2+0xec>
   112ac:	283fe81e 	bne	r5,zero,11250 <__ledf2+0x80>
   112b0:	003ff806 	br	11294 <__ledf2+0xc4>
   112b4:	313fee36 	bltu	r6,r4,11270 <__ledf2+0xa0>
   112b8:	21bffc36 	bltu	r4,r6,112ac <__ledf2+0xdc>
   112bc:	0005883a 	mov	r2,zero
   112c0:	f800283a 	ret

000112c4 <__muldf3>:
   112c4:	defff304 	addi	sp,sp,-52
   112c8:	2804d53a 	srli	r2,r5,20
   112cc:	dd800915 	stw	r22,36(sp)
   112d0:	282cd7fa 	srli	r22,r5,31
   112d4:	dc000315 	stw	r16,12(sp)
   112d8:	04000434 	movhi	r16,16
   112dc:	dd400815 	stw	r21,32(sp)
   112e0:	dc800515 	stw	r18,20(sp)
   112e4:	843fffc4 	addi	r16,r16,-1
   112e8:	dfc00c15 	stw	ra,48(sp)
   112ec:	df000b15 	stw	fp,44(sp)
   112f0:	ddc00a15 	stw	r23,40(sp)
   112f4:	dd000715 	stw	r20,28(sp)
   112f8:	dcc00615 	stw	r19,24(sp)
   112fc:	dc400415 	stw	r17,16(sp)
   11300:	1481ffcc 	andi	r18,r2,2047
   11304:	2c20703a 	and	r16,r5,r16
   11308:	b02b883a 	mov	r21,r22
   1130c:	b2403fcc 	andi	r9,r22,255
   11310:	90006026 	beq	r18,zero,11494 <__muldf3+0x1d0>
   11314:	0081ffc4 	movi	r2,2047
   11318:	2029883a 	mov	r20,r4
   1131c:	90803626 	beq	r18,r2,113f8 <__muldf3+0x134>
   11320:	80800434 	orhi	r2,r16,16
   11324:	100490fa 	slli	r2,r2,3
   11328:	2020d77a 	srli	r16,r4,29
   1132c:	202890fa 	slli	r20,r4,3
   11330:	94bf0044 	addi	r18,r18,-1023
   11334:	80a0b03a 	or	r16,r16,r2
   11338:	0027883a 	mov	r19,zero
   1133c:	0039883a 	mov	fp,zero
   11340:	3804d53a 	srli	r2,r7,20
   11344:	382ed7fa 	srli	r23,r7,31
   11348:	04400434 	movhi	r17,16
   1134c:	8c7fffc4 	addi	r17,r17,-1
   11350:	1081ffcc 	andi	r2,r2,2047
   11354:	3011883a 	mov	r8,r6
   11358:	3c62703a 	and	r17,r7,r17
   1135c:	ba803fcc 	andi	r10,r23,255
   11360:	10006d26 	beq	r2,zero,11518 <__muldf3+0x254>
   11364:	00c1ffc4 	movi	r3,2047
   11368:	10c06526 	beq	r2,r3,11500 <__muldf3+0x23c>
   1136c:	88c00434 	orhi	r3,r17,16
   11370:	180690fa 	slli	r3,r3,3
   11374:	3022d77a 	srli	r17,r6,29
   11378:	301090fa 	slli	r8,r6,3
   1137c:	10bf0044 	addi	r2,r2,-1023
   11380:	88e2b03a 	or	r17,r17,r3
   11384:	000b883a 	mov	r5,zero
   11388:	9085883a 	add	r2,r18,r2
   1138c:	2cc8b03a 	or	r4,r5,r19
   11390:	00c003c4 	movi	r3,15
   11394:	bdacf03a 	xor	r22,r23,r22
   11398:	12c00044 	addi	r11,r2,1
   1139c:	19009936 	bltu	r3,r4,11604 <__muldf3+0x340>
   113a0:	200890ba 	slli	r4,r4,2
   113a4:	00c00074 	movhi	r3,1
   113a8:	18c4ee04 	addi	r3,r3,5048
   113ac:	20c9883a 	add	r4,r4,r3
   113b0:	20c00017 	ldw	r3,0(r4)
   113b4:	1800683a 	jmp	r3
   113b8:	00011604 	movi	zero,1112
   113bc:	00011418 	cmpnei	zero,zero,1104
   113c0:	00011418 	cmpnei	zero,zero,1104
   113c4:	00011414 	movui	zero,1104
   113c8:	000115e0 	cmpeqi	zero,zero,1111
   113cc:	000115e0 	cmpeqi	zero,zero,1111
   113d0:	000115c8 	cmpgei	zero,zero,1111
   113d4:	00011414 	movui	zero,1104
   113d8:	000115e0 	cmpeqi	zero,zero,1111
   113dc:	000115c8 	cmpgei	zero,zero,1111
   113e0:	000115e0 	cmpeqi	zero,zero,1111
   113e4:	00011414 	movui	zero,1104
   113e8:	000115f0 	cmpltui	zero,zero,1111
   113ec:	000115f0 	cmpltui	zero,zero,1111
   113f0:	000115f0 	cmpltui	zero,zero,1111
   113f4:	0001180c 	andi	zero,zero,1120
   113f8:	2404b03a 	or	r2,r4,r16
   113fc:	10006f1e 	bne	r2,zero,115bc <__muldf3+0x2f8>
   11400:	04c00204 	movi	r19,8
   11404:	0021883a 	mov	r16,zero
   11408:	0029883a 	mov	r20,zero
   1140c:	07000084 	movi	fp,2
   11410:	003fcb06 	br	11340 <__muldf3+0x7c>
   11414:	502d883a 	mov	r22,r10
   11418:	00800084 	movi	r2,2
   1141c:	28805726 	beq	r5,r2,1157c <__muldf3+0x2b8>
   11420:	008000c4 	movi	r2,3
   11424:	28816626 	beq	r5,r2,119c0 <__muldf3+0x6fc>
   11428:	00800044 	movi	r2,1
   1142c:	2881411e 	bne	r5,r2,11934 <__muldf3+0x670>
   11430:	b02b883a 	mov	r21,r22
   11434:	0005883a 	mov	r2,zero
   11438:	000b883a 	mov	r5,zero
   1143c:	0029883a 	mov	r20,zero
   11440:	1004953a 	slli	r2,r2,20
   11444:	a8c03fcc 	andi	r3,r21,255
   11448:	04400434 	movhi	r17,16
   1144c:	8c7fffc4 	addi	r17,r17,-1
   11450:	180697fa 	slli	r3,r3,31
   11454:	2c4a703a 	and	r5,r5,r17
   11458:	288ab03a 	or	r5,r5,r2
   1145c:	28c6b03a 	or	r3,r5,r3
   11460:	a005883a 	mov	r2,r20
   11464:	dfc00c17 	ldw	ra,48(sp)
   11468:	df000b17 	ldw	fp,44(sp)
   1146c:	ddc00a17 	ldw	r23,40(sp)
   11470:	dd800917 	ldw	r22,36(sp)
   11474:	dd400817 	ldw	r21,32(sp)
   11478:	dd000717 	ldw	r20,28(sp)
   1147c:	dcc00617 	ldw	r19,24(sp)
   11480:	dc800517 	ldw	r18,20(sp)
   11484:	dc400417 	ldw	r17,16(sp)
   11488:	dc000317 	ldw	r16,12(sp)
   1148c:	dec00d04 	addi	sp,sp,52
   11490:	f800283a 	ret
   11494:	2404b03a 	or	r2,r4,r16
   11498:	2027883a 	mov	r19,r4
   1149c:	10004226 	beq	r2,zero,115a8 <__muldf3+0x2e4>
   114a0:	8000fc26 	beq	r16,zero,11894 <__muldf3+0x5d0>
   114a4:	8009883a 	mov	r4,r16
   114a8:	d9800215 	stw	r6,8(sp)
   114ac:	d9c00015 	stw	r7,0(sp)
   114b0:	da400115 	stw	r9,4(sp)
   114b4:	00124dc0 	call	124dc <__clzsi2>
   114b8:	d9800217 	ldw	r6,8(sp)
   114bc:	d9c00017 	ldw	r7,0(sp)
   114c0:	da400117 	ldw	r9,4(sp)
   114c4:	113ffd44 	addi	r4,r2,-11
   114c8:	00c00704 	movi	r3,28
   114cc:	1900ed16 	blt	r3,r4,11884 <__muldf3+0x5c0>
   114d0:	00c00744 	movi	r3,29
   114d4:	147ffe04 	addi	r17,r2,-8
   114d8:	1907c83a 	sub	r3,r3,r4
   114dc:	8460983a 	sll	r16,r16,r17
   114e0:	98c6d83a 	srl	r3,r19,r3
   114e4:	9c68983a 	sll	r20,r19,r17
   114e8:	1c20b03a 	or	r16,r3,r16
   114ec:	1080fcc4 	addi	r2,r2,1011
   114f0:	00a5c83a 	sub	r18,zero,r2
   114f4:	0027883a 	mov	r19,zero
   114f8:	0039883a 	mov	fp,zero
   114fc:	003f9006 	br	11340 <__muldf3+0x7c>
   11500:	3446b03a 	or	r3,r6,r17
   11504:	1800261e 	bne	r3,zero,115a0 <__muldf3+0x2dc>
   11508:	0023883a 	mov	r17,zero
   1150c:	0011883a 	mov	r8,zero
   11510:	01400084 	movi	r5,2
   11514:	003f9c06 	br	11388 <__muldf3+0xc4>
   11518:	3446b03a 	or	r3,r6,r17
   1151c:	18001c26 	beq	r3,zero,11590 <__muldf3+0x2cc>
   11520:	8800ce26 	beq	r17,zero,1185c <__muldf3+0x598>
   11524:	8809883a 	mov	r4,r17
   11528:	d9800215 	stw	r6,8(sp)
   1152c:	da400115 	stw	r9,4(sp)
   11530:	da800015 	stw	r10,0(sp)
   11534:	00124dc0 	call	124dc <__clzsi2>
   11538:	d9800217 	ldw	r6,8(sp)
   1153c:	da400117 	ldw	r9,4(sp)
   11540:	da800017 	ldw	r10,0(sp)
   11544:	113ffd44 	addi	r4,r2,-11
   11548:	00c00704 	movi	r3,28
   1154c:	1900bf16 	blt	r3,r4,1184c <__muldf3+0x588>
   11550:	00c00744 	movi	r3,29
   11554:	123ffe04 	addi	r8,r2,-8
   11558:	1907c83a 	sub	r3,r3,r4
   1155c:	8a22983a 	sll	r17,r17,r8
   11560:	30c6d83a 	srl	r3,r6,r3
   11564:	3210983a 	sll	r8,r6,r8
   11568:	1c62b03a 	or	r17,r3,r17
   1156c:	1080fcc4 	addi	r2,r2,1011
   11570:	0085c83a 	sub	r2,zero,r2
   11574:	000b883a 	mov	r5,zero
   11578:	003f8306 	br	11388 <__muldf3+0xc4>
   1157c:	b02b883a 	mov	r21,r22
   11580:	0081ffc4 	movi	r2,2047
   11584:	000b883a 	mov	r5,zero
   11588:	0029883a 	mov	r20,zero
   1158c:	003fac06 	br	11440 <__muldf3+0x17c>
   11590:	0023883a 	mov	r17,zero
   11594:	0011883a 	mov	r8,zero
   11598:	01400044 	movi	r5,1
   1159c:	003f7a06 	br	11388 <__muldf3+0xc4>
   115a0:	014000c4 	movi	r5,3
   115a4:	003f7806 	br	11388 <__muldf3+0xc4>
   115a8:	04c00104 	movi	r19,4
   115ac:	0021883a 	mov	r16,zero
   115b0:	0029883a 	mov	r20,zero
   115b4:	07000044 	movi	fp,1
   115b8:	003f6106 	br	11340 <__muldf3+0x7c>
   115bc:	04c00304 	movi	r19,12
   115c0:	070000c4 	movi	fp,3
   115c4:	003f5e06 	br	11340 <__muldf3+0x7c>
   115c8:	01400434 	movhi	r5,16
   115cc:	002b883a 	mov	r21,zero
   115d0:	297fffc4 	addi	r5,r5,-1
   115d4:	053fffc4 	movi	r20,-1
   115d8:	0081ffc4 	movi	r2,2047
   115dc:	003f9806 	br	11440 <__muldf3+0x17c>
   115e0:	8023883a 	mov	r17,r16
   115e4:	a011883a 	mov	r8,r20
   115e8:	e00b883a 	mov	r5,fp
   115ec:	003f8a06 	br	11418 <__muldf3+0x154>
   115f0:	8023883a 	mov	r17,r16
   115f4:	a011883a 	mov	r8,r20
   115f8:	482d883a 	mov	r22,r9
   115fc:	e00b883a 	mov	r5,fp
   11600:	003f8506 	br	11418 <__muldf3+0x154>
   11604:	a00ad43a 	srli	r5,r20,16
   11608:	401ad43a 	srli	r13,r8,16
   1160c:	a53fffcc 	andi	r20,r20,65535
   11610:	423fffcc 	andi	r8,r8,65535
   11614:	4519383a 	mul	r12,r8,r20
   11618:	4147383a 	mul	r3,r8,r5
   1161c:	6d09383a 	mul	r4,r13,r20
   11620:	600cd43a 	srli	r6,r12,16
   11624:	2b5d383a 	mul	r14,r5,r13
   11628:	20c9883a 	add	r4,r4,r3
   1162c:	310d883a 	add	r6,r6,r4
   11630:	30c0022e 	bgeu	r6,r3,1163c <__muldf3+0x378>
   11634:	00c00074 	movhi	r3,1
   11638:	70dd883a 	add	r14,r14,r3
   1163c:	8826d43a 	srli	r19,r17,16
   11640:	8bffffcc 	andi	r15,r17,65535
   11644:	7d23383a 	mul	r17,r15,r20
   11648:	7949383a 	mul	r4,r15,r5
   1164c:	9d29383a 	mul	r20,r19,r20
   11650:	8814d43a 	srli	r10,r17,16
   11654:	3012943a 	slli	r9,r6,16
   11658:	a129883a 	add	r20,r20,r4
   1165c:	633fffcc 	andi	r12,r12,65535
   11660:	5515883a 	add	r10,r10,r20
   11664:	3006d43a 	srli	r3,r6,16
   11668:	4b13883a 	add	r9,r9,r12
   1166c:	2ccb383a 	mul	r5,r5,r19
   11670:	5100022e 	bgeu	r10,r4,1167c <__muldf3+0x3b8>
   11674:	01000074 	movhi	r4,1
   11678:	290b883a 	add	r5,r5,r4
   1167c:	802ad43a 	srli	r21,r16,16
   11680:	843fffcc 	andi	r16,r16,65535
   11684:	440d383a 	mul	r6,r8,r16
   11688:	4565383a 	mul	r18,r8,r21
   1168c:	8349383a 	mul	r4,r16,r13
   11690:	500e943a 	slli	r7,r10,16
   11694:	3010d43a 	srli	r8,r6,16
   11698:	5028d43a 	srli	r20,r10,16
   1169c:	2489883a 	add	r4,r4,r18
   116a0:	8abfffcc 	andi	r10,r17,65535
   116a4:	3a95883a 	add	r10,r7,r10
   116a8:	4119883a 	add	r12,r8,r4
   116ac:	a169883a 	add	r20,r20,r5
   116b0:	1a87883a 	add	r3,r3,r10
   116b4:	6d5b383a 	mul	r13,r13,r21
   116b8:	6480022e 	bgeu	r12,r18,116c4 <__muldf3+0x400>
   116bc:	01000074 	movhi	r4,1
   116c0:	691b883a 	add	r13,r13,r4
   116c4:	7c25383a 	mul	r18,r15,r16
   116c8:	7d4b383a 	mul	r5,r15,r21
   116cc:	84cf383a 	mul	r7,r16,r19
   116d0:	901ed43a 	srli	r15,r18,16
   116d4:	6008d43a 	srli	r4,r12,16
   116d8:	6010943a 	slli	r8,r12,16
   116dc:	394f883a 	add	r7,r7,r5
   116e0:	333fffcc 	andi	r12,r6,65535
   116e4:	79df883a 	add	r15,r15,r7
   116e8:	235b883a 	add	r13,r4,r13
   116ec:	9d63383a 	mul	r17,r19,r21
   116f0:	4309883a 	add	r4,r8,r12
   116f4:	7940022e 	bgeu	r15,r5,11700 <__muldf3+0x43c>
   116f8:	01400074 	movhi	r5,1
   116fc:	8963883a 	add	r17,r17,r5
   11700:	780a943a 	slli	r5,r15,16
   11704:	91bfffcc 	andi	r6,r18,65535
   11708:	70c7883a 	add	r3,r14,r3
   1170c:	298d883a 	add	r6,r5,r6
   11710:	1a8f803a 	cmpltu	r7,r3,r10
   11714:	350b883a 	add	r5,r6,r20
   11718:	20c7883a 	add	r3,r4,r3
   1171c:	3955883a 	add	r10,r7,r5
   11720:	1909803a 	cmpltu	r4,r3,r4
   11724:	6a91883a 	add	r8,r13,r10
   11728:	780cd43a 	srli	r6,r15,16
   1172c:	2219883a 	add	r12,r4,r8
   11730:	2d0b803a 	cmpltu	r5,r5,r20
   11734:	51cf803a 	cmpltu	r7,r10,r7
   11738:	29ceb03a 	or	r7,r5,r7
   1173c:	4351803a 	cmpltu	r8,r8,r13
   11740:	610b803a 	cmpltu	r5,r12,r4
   11744:	4148b03a 	or	r4,r8,r5
   11748:	398f883a 	add	r7,r7,r6
   1174c:	3909883a 	add	r4,r7,r4
   11750:	1810927a 	slli	r8,r3,9
   11754:	2449883a 	add	r4,r4,r17
   11758:	2008927a 	slli	r4,r4,9
   1175c:	6022d5fa 	srli	r17,r12,23
   11760:	1806d5fa 	srli	r3,r3,23
   11764:	4252b03a 	or	r9,r8,r9
   11768:	600a927a 	slli	r5,r12,9
   1176c:	4810c03a 	cmpne	r8,r9,zero
   11770:	2462b03a 	or	r17,r4,r17
   11774:	40c6b03a 	or	r3,r8,r3
   11778:	8900402c 	andhi	r4,r17,256
   1177c:	1950b03a 	or	r8,r3,r5
   11780:	20000726 	beq	r4,zero,117a0 <__muldf3+0x4dc>
   11784:	4006d07a 	srli	r3,r8,1
   11788:	880497fa 	slli	r2,r17,31
   1178c:	4200004c 	andi	r8,r8,1
   11790:	8822d07a 	srli	r17,r17,1
   11794:	1a10b03a 	or	r8,r3,r8
   11798:	1210b03a 	or	r8,r2,r8
   1179c:	5805883a 	mov	r2,r11
   117a0:	1140ffc4 	addi	r5,r2,1023
   117a4:	0140440e 	bge	zero,r5,118b8 <__muldf3+0x5f4>
   117a8:	40c001cc 	andi	r3,r8,7
   117ac:	18000726 	beq	r3,zero,117cc <__muldf3+0x508>
   117b0:	40c003cc 	andi	r3,r8,15
   117b4:	01000104 	movi	r4,4
   117b8:	19000426 	beq	r3,r4,117cc <__muldf3+0x508>
   117bc:	4107883a 	add	r3,r8,r4
   117c0:	1a11803a 	cmpltu	r8,r3,r8
   117c4:	8a23883a 	add	r17,r17,r8
   117c8:	1811883a 	mov	r8,r3
   117cc:	88c0402c 	andhi	r3,r17,256
   117d0:	18000426 	beq	r3,zero,117e4 <__muldf3+0x520>
   117d4:	11410004 	addi	r5,r2,1024
   117d8:	00bfc034 	movhi	r2,65280
   117dc:	10bfffc4 	addi	r2,r2,-1
   117e0:	88a2703a 	and	r17,r17,r2
   117e4:	0081ff84 	movi	r2,2046
   117e8:	117f6416 	blt	r2,r5,1157c <__muldf3+0x2b8>
   117ec:	8828977a 	slli	r20,r17,29
   117f0:	4010d0fa 	srli	r8,r8,3
   117f4:	8822927a 	slli	r17,r17,9
   117f8:	2881ffcc 	andi	r2,r5,2047
   117fc:	a228b03a 	or	r20,r20,r8
   11800:	880ad33a 	srli	r5,r17,12
   11804:	b02b883a 	mov	r21,r22
   11808:	003f0d06 	br	11440 <__muldf3+0x17c>
   1180c:	8080022c 	andhi	r2,r16,8
   11810:	10000926 	beq	r2,zero,11838 <__muldf3+0x574>
   11814:	8880022c 	andhi	r2,r17,8
   11818:	1000071e 	bne	r2,zero,11838 <__muldf3+0x574>
   1181c:	00800434 	movhi	r2,16
   11820:	89400234 	orhi	r5,r17,8
   11824:	10bfffc4 	addi	r2,r2,-1
   11828:	b82b883a 	mov	r21,r23
   1182c:	288a703a 	and	r5,r5,r2
   11830:	4029883a 	mov	r20,r8
   11834:	003f6806 	br	115d8 <__muldf3+0x314>
   11838:	00800434 	movhi	r2,16
   1183c:	81400234 	orhi	r5,r16,8
   11840:	10bfffc4 	addi	r2,r2,-1
   11844:	288a703a 	and	r5,r5,r2
   11848:	003f6306 	br	115d8 <__muldf3+0x314>
   1184c:	147ff604 	addi	r17,r2,-40
   11850:	3462983a 	sll	r17,r6,r17
   11854:	0011883a 	mov	r8,zero
   11858:	003f4406 	br	1156c <__muldf3+0x2a8>
   1185c:	3009883a 	mov	r4,r6
   11860:	d9800215 	stw	r6,8(sp)
   11864:	da400115 	stw	r9,4(sp)
   11868:	da800015 	stw	r10,0(sp)
   1186c:	00124dc0 	call	124dc <__clzsi2>
   11870:	10800804 	addi	r2,r2,32
   11874:	da800017 	ldw	r10,0(sp)
   11878:	da400117 	ldw	r9,4(sp)
   1187c:	d9800217 	ldw	r6,8(sp)
   11880:	003f3006 	br	11544 <__muldf3+0x280>
   11884:	143ff604 	addi	r16,r2,-40
   11888:	9c20983a 	sll	r16,r19,r16
   1188c:	0029883a 	mov	r20,zero
   11890:	003f1606 	br	114ec <__muldf3+0x228>
   11894:	d9800215 	stw	r6,8(sp)
   11898:	d9c00015 	stw	r7,0(sp)
   1189c:	da400115 	stw	r9,4(sp)
   118a0:	00124dc0 	call	124dc <__clzsi2>
   118a4:	10800804 	addi	r2,r2,32
   118a8:	da400117 	ldw	r9,4(sp)
   118ac:	d9c00017 	ldw	r7,0(sp)
   118b0:	d9800217 	ldw	r6,8(sp)
   118b4:	003f0306 	br	114c4 <__muldf3+0x200>
   118b8:	00c00044 	movi	r3,1
   118bc:	1947c83a 	sub	r3,r3,r5
   118c0:	00800e04 	movi	r2,56
   118c4:	10feda16 	blt	r2,r3,11430 <__muldf3+0x16c>
   118c8:	008007c4 	movi	r2,31
   118cc:	10c01b16 	blt	r2,r3,1193c <__muldf3+0x678>
   118d0:	00800804 	movi	r2,32
   118d4:	10c5c83a 	sub	r2,r2,r3
   118d8:	888a983a 	sll	r5,r17,r2
   118dc:	40c8d83a 	srl	r4,r8,r3
   118e0:	4084983a 	sll	r2,r8,r2
   118e4:	88e2d83a 	srl	r17,r17,r3
   118e8:	2906b03a 	or	r3,r5,r4
   118ec:	1004c03a 	cmpne	r2,r2,zero
   118f0:	1886b03a 	or	r3,r3,r2
   118f4:	188001cc 	andi	r2,r3,7
   118f8:	10000726 	beq	r2,zero,11918 <__muldf3+0x654>
   118fc:	188003cc 	andi	r2,r3,15
   11900:	01000104 	movi	r4,4
   11904:	11000426 	beq	r2,r4,11918 <__muldf3+0x654>
   11908:	1805883a 	mov	r2,r3
   1190c:	10c00104 	addi	r3,r2,4
   11910:	1885803a 	cmpltu	r2,r3,r2
   11914:	88a3883a 	add	r17,r17,r2
   11918:	8880202c 	andhi	r2,r17,128
   1191c:	10001c26 	beq	r2,zero,11990 <__muldf3+0x6cc>
   11920:	b02b883a 	mov	r21,r22
   11924:	00800044 	movi	r2,1
   11928:	000b883a 	mov	r5,zero
   1192c:	0029883a 	mov	r20,zero
   11930:	003ec306 	br	11440 <__muldf3+0x17c>
   11934:	5805883a 	mov	r2,r11
   11938:	003f9906 	br	117a0 <__muldf3+0x4dc>
   1193c:	00bff844 	movi	r2,-31
   11940:	1145c83a 	sub	r2,r2,r5
   11944:	8888d83a 	srl	r4,r17,r2
   11948:	00800804 	movi	r2,32
   1194c:	18801a26 	beq	r3,r2,119b8 <__muldf3+0x6f4>
   11950:	00801004 	movi	r2,64
   11954:	10c5c83a 	sub	r2,r2,r3
   11958:	8884983a 	sll	r2,r17,r2
   1195c:	1204b03a 	or	r2,r2,r8
   11960:	1004c03a 	cmpne	r2,r2,zero
   11964:	2084b03a 	or	r2,r4,r2
   11968:	144001cc 	andi	r17,r2,7
   1196c:	88000d1e 	bne	r17,zero,119a4 <__muldf3+0x6e0>
   11970:	000b883a 	mov	r5,zero
   11974:	1028d0fa 	srli	r20,r2,3
   11978:	b02b883a 	mov	r21,r22
   1197c:	0005883a 	mov	r2,zero
   11980:	a468b03a 	or	r20,r20,r17
   11984:	003eae06 	br	11440 <__muldf3+0x17c>
   11988:	1007883a 	mov	r3,r2
   1198c:	0023883a 	mov	r17,zero
   11990:	880a927a 	slli	r5,r17,9
   11994:	1805883a 	mov	r2,r3
   11998:	8822977a 	slli	r17,r17,29
   1199c:	280ad33a 	srli	r5,r5,12
   119a0:	003ff406 	br	11974 <__muldf3+0x6b0>
   119a4:	10c003cc 	andi	r3,r2,15
   119a8:	01000104 	movi	r4,4
   119ac:	193ff626 	beq	r3,r4,11988 <__muldf3+0x6c4>
   119b0:	0023883a 	mov	r17,zero
   119b4:	003fd506 	br	1190c <__muldf3+0x648>
   119b8:	0005883a 	mov	r2,zero
   119bc:	003fe706 	br	1195c <__muldf3+0x698>
   119c0:	00800434 	movhi	r2,16
   119c4:	89400234 	orhi	r5,r17,8
   119c8:	10bfffc4 	addi	r2,r2,-1
   119cc:	b02b883a 	mov	r21,r22
   119d0:	288a703a 	and	r5,r5,r2
   119d4:	4029883a 	mov	r20,r8
   119d8:	003eff06 	br	115d8 <__muldf3+0x314>

000119dc <__subdf3>:
   119dc:	02000434 	movhi	r8,16
   119e0:	423fffc4 	addi	r8,r8,-1
   119e4:	defffb04 	addi	sp,sp,-20
   119e8:	2a14703a 	and	r10,r5,r8
   119ec:	3812d53a 	srli	r9,r7,20
   119f0:	3a10703a 	and	r8,r7,r8
   119f4:	2006d77a 	srli	r3,r4,29
   119f8:	3004d77a 	srli	r2,r6,29
   119fc:	dc000015 	stw	r16,0(sp)
   11a00:	501490fa 	slli	r10,r10,3
   11a04:	2820d53a 	srli	r16,r5,20
   11a08:	401090fa 	slli	r8,r8,3
   11a0c:	dc800215 	stw	r18,8(sp)
   11a10:	dc400115 	stw	r17,4(sp)
   11a14:	dfc00415 	stw	ra,16(sp)
   11a18:	202290fa 	slli	r17,r4,3
   11a1c:	dcc00315 	stw	r19,12(sp)
   11a20:	4a41ffcc 	andi	r9,r9,2047
   11a24:	0101ffc4 	movi	r4,2047
   11a28:	2824d7fa 	srli	r18,r5,31
   11a2c:	8401ffcc 	andi	r16,r16,2047
   11a30:	50c6b03a 	or	r3,r10,r3
   11a34:	380ed7fa 	srli	r7,r7,31
   11a38:	408ab03a 	or	r5,r8,r2
   11a3c:	300c90fa 	slli	r6,r6,3
   11a40:	49009626 	beq	r9,r4,11c9c <__subdf3+0x2c0>
   11a44:	39c0005c 	xori	r7,r7,1
   11a48:	8245c83a 	sub	r2,r16,r9
   11a4c:	3c807426 	beq	r7,r18,11c20 <__subdf3+0x244>
   11a50:	0080af0e 	bge	zero,r2,11d10 <__subdf3+0x334>
   11a54:	48002a1e 	bne	r9,zero,11b00 <__subdf3+0x124>
   11a58:	2988b03a 	or	r4,r5,r6
   11a5c:	20009a1e 	bne	r4,zero,11cc8 <__subdf3+0x2ec>
   11a60:	888001cc 	andi	r2,r17,7
   11a64:	10000726 	beq	r2,zero,11a84 <__subdf3+0xa8>
   11a68:	888003cc 	andi	r2,r17,15
   11a6c:	01000104 	movi	r4,4
   11a70:	11000426 	beq	r2,r4,11a84 <__subdf3+0xa8>
   11a74:	890b883a 	add	r5,r17,r4
   11a78:	2c63803a 	cmpltu	r17,r5,r17
   11a7c:	1c47883a 	add	r3,r3,r17
   11a80:	2823883a 	mov	r17,r5
   11a84:	1880202c 	andhi	r2,r3,128
   11a88:	10005926 	beq	r2,zero,11bf0 <__subdf3+0x214>
   11a8c:	84000044 	addi	r16,r16,1
   11a90:	0081ffc4 	movi	r2,2047
   11a94:	8080be26 	beq	r16,r2,11d90 <__subdf3+0x3b4>
   11a98:	017fe034 	movhi	r5,65408
   11a9c:	297fffc4 	addi	r5,r5,-1
   11aa0:	1946703a 	and	r3,r3,r5
   11aa4:	1804977a 	slli	r2,r3,29
   11aa8:	1806927a 	slli	r3,r3,9
   11aac:	8822d0fa 	srli	r17,r17,3
   11ab0:	8401ffcc 	andi	r16,r16,2047
   11ab4:	180ad33a 	srli	r5,r3,12
   11ab8:	9100004c 	andi	r4,r18,1
   11abc:	1444b03a 	or	r2,r2,r17
   11ac0:	80c1ffcc 	andi	r3,r16,2047
   11ac4:	1820953a 	slli	r16,r3,20
   11ac8:	20c03fcc 	andi	r3,r4,255
   11acc:	180897fa 	slli	r4,r3,31
   11ad0:	00c00434 	movhi	r3,16
   11ad4:	18ffffc4 	addi	r3,r3,-1
   11ad8:	28c6703a 	and	r3,r5,r3
   11adc:	1c06b03a 	or	r3,r3,r16
   11ae0:	1906b03a 	or	r3,r3,r4
   11ae4:	dfc00417 	ldw	ra,16(sp)
   11ae8:	dcc00317 	ldw	r19,12(sp)
   11aec:	dc800217 	ldw	r18,8(sp)
   11af0:	dc400117 	ldw	r17,4(sp)
   11af4:	dc000017 	ldw	r16,0(sp)
   11af8:	dec00504 	addi	sp,sp,20
   11afc:	f800283a 	ret
   11b00:	0101ffc4 	movi	r4,2047
   11b04:	813fd626 	beq	r16,r4,11a60 <__subdf3+0x84>
   11b08:	29402034 	orhi	r5,r5,128
   11b0c:	01000e04 	movi	r4,56
   11b10:	2080a316 	blt	r4,r2,11da0 <__subdf3+0x3c4>
   11b14:	010007c4 	movi	r4,31
   11b18:	2080c616 	blt	r4,r2,11e34 <__subdf3+0x458>
   11b1c:	01000804 	movi	r4,32
   11b20:	2089c83a 	sub	r4,r4,r2
   11b24:	2910983a 	sll	r8,r5,r4
   11b28:	308ed83a 	srl	r7,r6,r2
   11b2c:	3108983a 	sll	r4,r6,r4
   11b30:	2884d83a 	srl	r2,r5,r2
   11b34:	41ccb03a 	or	r6,r8,r7
   11b38:	2008c03a 	cmpne	r4,r4,zero
   11b3c:	310cb03a 	or	r6,r6,r4
   11b40:	898dc83a 	sub	r6,r17,r6
   11b44:	89a3803a 	cmpltu	r17,r17,r6
   11b48:	1887c83a 	sub	r3,r3,r2
   11b4c:	1c47c83a 	sub	r3,r3,r17
   11b50:	3023883a 	mov	r17,r6
   11b54:	1880202c 	andhi	r2,r3,128
   11b58:	10002326 	beq	r2,zero,11be8 <__subdf3+0x20c>
   11b5c:	04c02034 	movhi	r19,128
   11b60:	9cffffc4 	addi	r19,r19,-1
   11b64:	1ce6703a 	and	r19,r3,r19
   11b68:	98007a26 	beq	r19,zero,11d54 <__subdf3+0x378>
   11b6c:	9809883a 	mov	r4,r19
   11b70:	00124dc0 	call	124dc <__clzsi2>
   11b74:	113ffe04 	addi	r4,r2,-8
   11b78:	00c007c4 	movi	r3,31
   11b7c:	19007b16 	blt	r3,r4,11d6c <__subdf3+0x390>
   11b80:	00800804 	movi	r2,32
   11b84:	1105c83a 	sub	r2,r2,r4
   11b88:	8884d83a 	srl	r2,r17,r2
   11b8c:	9906983a 	sll	r3,r19,r4
   11b90:	8922983a 	sll	r17,r17,r4
   11b94:	10c4b03a 	or	r2,r2,r3
   11b98:	24007816 	blt	r4,r16,11d7c <__subdf3+0x3a0>
   11b9c:	2421c83a 	sub	r16,r4,r16
   11ba0:	80c00044 	addi	r3,r16,1
   11ba4:	010007c4 	movi	r4,31
   11ba8:	20c09516 	blt	r4,r3,11e00 <__subdf3+0x424>
   11bac:	01400804 	movi	r5,32
   11bb0:	28cbc83a 	sub	r5,r5,r3
   11bb4:	88c8d83a 	srl	r4,r17,r3
   11bb8:	8962983a 	sll	r17,r17,r5
   11bbc:	114a983a 	sll	r5,r2,r5
   11bc0:	10c6d83a 	srl	r3,r2,r3
   11bc4:	8804c03a 	cmpne	r2,r17,zero
   11bc8:	290ab03a 	or	r5,r5,r4
   11bcc:	28a2b03a 	or	r17,r5,r2
   11bd0:	0021883a 	mov	r16,zero
   11bd4:	003fa206 	br	11a60 <__subdf3+0x84>
   11bd8:	2090b03a 	or	r8,r4,r2
   11bdc:	40018e26 	beq	r8,zero,12218 <__subdf3+0x83c>
   11be0:	1007883a 	mov	r3,r2
   11be4:	2023883a 	mov	r17,r4
   11be8:	888001cc 	andi	r2,r17,7
   11bec:	103f9e1e 	bne	r2,zero,11a68 <__subdf3+0x8c>
   11bf0:	1804977a 	slli	r2,r3,29
   11bf4:	8822d0fa 	srli	r17,r17,3
   11bf8:	1810d0fa 	srli	r8,r3,3
   11bfc:	9100004c 	andi	r4,r18,1
   11c00:	1444b03a 	or	r2,r2,r17
   11c04:	00c1ffc4 	movi	r3,2047
   11c08:	80c02826 	beq	r16,r3,11cac <__subdf3+0x2d0>
   11c0c:	01400434 	movhi	r5,16
   11c10:	297fffc4 	addi	r5,r5,-1
   11c14:	80e0703a 	and	r16,r16,r3
   11c18:	414a703a 	and	r5,r8,r5
   11c1c:	003fa806 	br	11ac0 <__subdf3+0xe4>
   11c20:	0080630e 	bge	zero,r2,11db0 <__subdf3+0x3d4>
   11c24:	48003026 	beq	r9,zero,11ce8 <__subdf3+0x30c>
   11c28:	0101ffc4 	movi	r4,2047
   11c2c:	813f8c26 	beq	r16,r4,11a60 <__subdf3+0x84>
   11c30:	29402034 	orhi	r5,r5,128
   11c34:	01000e04 	movi	r4,56
   11c38:	2080a90e 	bge	r4,r2,11ee0 <__subdf3+0x504>
   11c3c:	298cb03a 	or	r6,r5,r6
   11c40:	3012c03a 	cmpne	r9,r6,zero
   11c44:	0005883a 	mov	r2,zero
   11c48:	4c53883a 	add	r9,r9,r17
   11c4c:	4c63803a 	cmpltu	r17,r9,r17
   11c50:	10c7883a 	add	r3,r2,r3
   11c54:	88c7883a 	add	r3,r17,r3
   11c58:	4823883a 	mov	r17,r9
   11c5c:	1880202c 	andhi	r2,r3,128
   11c60:	1000d026 	beq	r2,zero,11fa4 <__subdf3+0x5c8>
   11c64:	84000044 	addi	r16,r16,1
   11c68:	0081ffc4 	movi	r2,2047
   11c6c:	8080fe26 	beq	r16,r2,12068 <__subdf3+0x68c>
   11c70:	00bfe034 	movhi	r2,65408
   11c74:	10bfffc4 	addi	r2,r2,-1
   11c78:	1886703a 	and	r3,r3,r2
   11c7c:	880ad07a 	srli	r5,r17,1
   11c80:	180497fa 	slli	r2,r3,31
   11c84:	8900004c 	andi	r4,r17,1
   11c88:	2922b03a 	or	r17,r5,r4
   11c8c:	1806d07a 	srli	r3,r3,1
   11c90:	1462b03a 	or	r17,r2,r17
   11c94:	3825883a 	mov	r18,r7
   11c98:	003f7106 	br	11a60 <__subdf3+0x84>
   11c9c:	2984b03a 	or	r2,r5,r6
   11ca0:	103f6826 	beq	r2,zero,11a44 <__subdf3+0x68>
   11ca4:	39c03fcc 	andi	r7,r7,255
   11ca8:	003f6706 	br	11a48 <__subdf3+0x6c>
   11cac:	4086b03a 	or	r3,r8,r2
   11cb0:	18015226 	beq	r3,zero,121fc <__subdf3+0x820>
   11cb4:	00c00434 	movhi	r3,16
   11cb8:	41400234 	orhi	r5,r8,8
   11cbc:	18ffffc4 	addi	r3,r3,-1
   11cc0:	28ca703a 	and	r5,r5,r3
   11cc4:	003f7e06 	br	11ac0 <__subdf3+0xe4>
   11cc8:	10bfffc4 	addi	r2,r2,-1
   11ccc:	1000491e 	bne	r2,zero,11df4 <__subdf3+0x418>
   11cd0:	898fc83a 	sub	r7,r17,r6
   11cd4:	89e3803a 	cmpltu	r17,r17,r7
   11cd8:	1947c83a 	sub	r3,r3,r5
   11cdc:	1c47c83a 	sub	r3,r3,r17
   11ce0:	3823883a 	mov	r17,r7
   11ce4:	003f9b06 	br	11b54 <__subdf3+0x178>
   11ce8:	2988b03a 	or	r4,r5,r6
   11cec:	203f5c26 	beq	r4,zero,11a60 <__subdf3+0x84>
   11cf0:	10bfffc4 	addi	r2,r2,-1
   11cf4:	1000931e 	bne	r2,zero,11f44 <__subdf3+0x568>
   11cf8:	898d883a 	add	r6,r17,r6
   11cfc:	3463803a 	cmpltu	r17,r6,r17
   11d00:	1947883a 	add	r3,r3,r5
   11d04:	88c7883a 	add	r3,r17,r3
   11d08:	3023883a 	mov	r17,r6
   11d0c:	003fd306 	br	11c5c <__subdf3+0x280>
   11d10:	1000541e 	bne	r2,zero,11e64 <__subdf3+0x488>
   11d14:	80800044 	addi	r2,r16,1
   11d18:	1081ffcc 	andi	r2,r2,2047
   11d1c:	01000044 	movi	r4,1
   11d20:	2080a20e 	bge	r4,r2,11fac <__subdf3+0x5d0>
   11d24:	8989c83a 	sub	r4,r17,r6
   11d28:	8905803a 	cmpltu	r2,r17,r4
   11d2c:	1967c83a 	sub	r19,r3,r5
   11d30:	98a7c83a 	sub	r19,r19,r2
   11d34:	9880202c 	andhi	r2,r19,128
   11d38:	10006326 	beq	r2,zero,11ec8 <__subdf3+0x4ec>
   11d3c:	3463c83a 	sub	r17,r6,r17
   11d40:	28c7c83a 	sub	r3,r5,r3
   11d44:	344d803a 	cmpltu	r6,r6,r17
   11d48:	19a7c83a 	sub	r19,r3,r6
   11d4c:	3825883a 	mov	r18,r7
   11d50:	983f861e 	bne	r19,zero,11b6c <__subdf3+0x190>
   11d54:	8809883a 	mov	r4,r17
   11d58:	00124dc0 	call	124dc <__clzsi2>
   11d5c:	10800804 	addi	r2,r2,32
   11d60:	113ffe04 	addi	r4,r2,-8
   11d64:	00c007c4 	movi	r3,31
   11d68:	193f850e 	bge	r3,r4,11b80 <__subdf3+0x1a4>
   11d6c:	10bff604 	addi	r2,r2,-40
   11d70:	8884983a 	sll	r2,r17,r2
   11d74:	0023883a 	mov	r17,zero
   11d78:	243f880e 	bge	r4,r16,11b9c <__subdf3+0x1c0>
   11d7c:	00ffe034 	movhi	r3,65408
   11d80:	18ffffc4 	addi	r3,r3,-1
   11d84:	8121c83a 	sub	r16,r16,r4
   11d88:	10c6703a 	and	r3,r2,r3
   11d8c:	003f3406 	br	11a60 <__subdf3+0x84>
   11d90:	9100004c 	andi	r4,r18,1
   11d94:	000b883a 	mov	r5,zero
   11d98:	0005883a 	mov	r2,zero
   11d9c:	003f4806 	br	11ac0 <__subdf3+0xe4>
   11da0:	298cb03a 	or	r6,r5,r6
   11da4:	300cc03a 	cmpne	r6,r6,zero
   11da8:	0005883a 	mov	r2,zero
   11dac:	003f6406 	br	11b40 <__subdf3+0x164>
   11db0:	10009a1e 	bne	r2,zero,1201c <__subdf3+0x640>
   11db4:	82400044 	addi	r9,r16,1
   11db8:	4881ffcc 	andi	r2,r9,2047
   11dbc:	02800044 	movi	r10,1
   11dc0:	5080670e 	bge	r10,r2,11f60 <__subdf3+0x584>
   11dc4:	0081ffc4 	movi	r2,2047
   11dc8:	4880af26 	beq	r9,r2,12088 <__subdf3+0x6ac>
   11dcc:	898d883a 	add	r6,r17,r6
   11dd0:	1945883a 	add	r2,r3,r5
   11dd4:	3447803a 	cmpltu	r3,r6,r17
   11dd8:	1887883a 	add	r3,r3,r2
   11ddc:	182297fa 	slli	r17,r3,31
   11de0:	300cd07a 	srli	r6,r6,1
   11de4:	1806d07a 	srli	r3,r3,1
   11de8:	4821883a 	mov	r16,r9
   11dec:	89a2b03a 	or	r17,r17,r6
   11df0:	003f1b06 	br	11a60 <__subdf3+0x84>
   11df4:	0101ffc4 	movi	r4,2047
   11df8:	813f441e 	bne	r16,r4,11b0c <__subdf3+0x130>
   11dfc:	003f1806 	br	11a60 <__subdf3+0x84>
   11e00:	843ff844 	addi	r16,r16,-31
   11e04:	01400804 	movi	r5,32
   11e08:	1408d83a 	srl	r4,r2,r16
   11e0c:	19405026 	beq	r3,r5,11f50 <__subdf3+0x574>
   11e10:	01401004 	movi	r5,64
   11e14:	28c7c83a 	sub	r3,r5,r3
   11e18:	10c4983a 	sll	r2,r2,r3
   11e1c:	88a2b03a 	or	r17,r17,r2
   11e20:	8822c03a 	cmpne	r17,r17,zero
   11e24:	2462b03a 	or	r17,r4,r17
   11e28:	0007883a 	mov	r3,zero
   11e2c:	0021883a 	mov	r16,zero
   11e30:	003f6d06 	br	11be8 <__subdf3+0x20c>
   11e34:	11fff804 	addi	r7,r2,-32
   11e38:	01000804 	movi	r4,32
   11e3c:	29ced83a 	srl	r7,r5,r7
   11e40:	11004526 	beq	r2,r4,11f58 <__subdf3+0x57c>
   11e44:	01001004 	movi	r4,64
   11e48:	2089c83a 	sub	r4,r4,r2
   11e4c:	2904983a 	sll	r2,r5,r4
   11e50:	118cb03a 	or	r6,r2,r6
   11e54:	300cc03a 	cmpne	r6,r6,zero
   11e58:	398cb03a 	or	r6,r7,r6
   11e5c:	0005883a 	mov	r2,zero
   11e60:	003f3706 	br	11b40 <__subdf3+0x164>
   11e64:	80002a26 	beq	r16,zero,11f10 <__subdf3+0x534>
   11e68:	0101ffc4 	movi	r4,2047
   11e6c:	49006626 	beq	r9,r4,12008 <__subdf3+0x62c>
   11e70:	0085c83a 	sub	r2,zero,r2
   11e74:	18c02034 	orhi	r3,r3,128
   11e78:	01000e04 	movi	r4,56
   11e7c:	20807e16 	blt	r4,r2,12078 <__subdf3+0x69c>
   11e80:	010007c4 	movi	r4,31
   11e84:	2080e716 	blt	r4,r2,12224 <__subdf3+0x848>
   11e88:	01000804 	movi	r4,32
   11e8c:	2089c83a 	sub	r4,r4,r2
   11e90:	1914983a 	sll	r10,r3,r4
   11e94:	8890d83a 	srl	r8,r17,r2
   11e98:	8908983a 	sll	r4,r17,r4
   11e9c:	1884d83a 	srl	r2,r3,r2
   11ea0:	5222b03a 	or	r17,r10,r8
   11ea4:	2006c03a 	cmpne	r3,r4,zero
   11ea8:	88e2b03a 	or	r17,r17,r3
   11eac:	3463c83a 	sub	r17,r6,r17
   11eb0:	2885c83a 	sub	r2,r5,r2
   11eb4:	344d803a 	cmpltu	r6,r6,r17
   11eb8:	1187c83a 	sub	r3,r2,r6
   11ebc:	4821883a 	mov	r16,r9
   11ec0:	3825883a 	mov	r18,r7
   11ec4:	003f2306 	br	11b54 <__subdf3+0x178>
   11ec8:	24d0b03a 	or	r8,r4,r19
   11ecc:	40001b1e 	bne	r8,zero,11f3c <__subdf3+0x560>
   11ed0:	0005883a 	mov	r2,zero
   11ed4:	0009883a 	mov	r4,zero
   11ed8:	0021883a 	mov	r16,zero
   11edc:	003f4906 	br	11c04 <__subdf3+0x228>
   11ee0:	010007c4 	movi	r4,31
   11ee4:	20803a16 	blt	r4,r2,11fd0 <__subdf3+0x5f4>
   11ee8:	01000804 	movi	r4,32
   11eec:	2089c83a 	sub	r4,r4,r2
   11ef0:	2912983a 	sll	r9,r5,r4
   11ef4:	3090d83a 	srl	r8,r6,r2
   11ef8:	3108983a 	sll	r4,r6,r4
   11efc:	2884d83a 	srl	r2,r5,r2
   11f00:	4a12b03a 	or	r9,r9,r8
   11f04:	2008c03a 	cmpne	r4,r4,zero
   11f08:	4912b03a 	or	r9,r9,r4
   11f0c:	003f4e06 	br	11c48 <__subdf3+0x26c>
   11f10:	1c48b03a 	or	r4,r3,r17
   11f14:	20003c26 	beq	r4,zero,12008 <__subdf3+0x62c>
   11f18:	0084303a 	nor	r2,zero,r2
   11f1c:	1000381e 	bne	r2,zero,12000 <__subdf3+0x624>
   11f20:	3463c83a 	sub	r17,r6,r17
   11f24:	28c5c83a 	sub	r2,r5,r3
   11f28:	344d803a 	cmpltu	r6,r6,r17
   11f2c:	1187c83a 	sub	r3,r2,r6
   11f30:	4821883a 	mov	r16,r9
   11f34:	3825883a 	mov	r18,r7
   11f38:	003f0606 	br	11b54 <__subdf3+0x178>
   11f3c:	2023883a 	mov	r17,r4
   11f40:	003f0906 	br	11b68 <__subdf3+0x18c>
   11f44:	0101ffc4 	movi	r4,2047
   11f48:	813f3a1e 	bne	r16,r4,11c34 <__subdf3+0x258>
   11f4c:	003ec406 	br	11a60 <__subdf3+0x84>
   11f50:	0005883a 	mov	r2,zero
   11f54:	003fb106 	br	11e1c <__subdf3+0x440>
   11f58:	0005883a 	mov	r2,zero
   11f5c:	003fbc06 	br	11e50 <__subdf3+0x474>
   11f60:	1c44b03a 	or	r2,r3,r17
   11f64:	80008e1e 	bne	r16,zero,121a0 <__subdf3+0x7c4>
   11f68:	1000c826 	beq	r2,zero,1228c <__subdf3+0x8b0>
   11f6c:	2984b03a 	or	r2,r5,r6
   11f70:	103ebb26 	beq	r2,zero,11a60 <__subdf3+0x84>
   11f74:	8989883a 	add	r4,r17,r6
   11f78:	1945883a 	add	r2,r3,r5
   11f7c:	2447803a 	cmpltu	r3,r4,r17
   11f80:	1887883a 	add	r3,r3,r2
   11f84:	1880202c 	andhi	r2,r3,128
   11f88:	2023883a 	mov	r17,r4
   11f8c:	103f1626 	beq	r2,zero,11be8 <__subdf3+0x20c>
   11f90:	00bfe034 	movhi	r2,65408
   11f94:	10bfffc4 	addi	r2,r2,-1
   11f98:	5021883a 	mov	r16,r10
   11f9c:	1886703a 	and	r3,r3,r2
   11fa0:	003eaf06 	br	11a60 <__subdf3+0x84>
   11fa4:	3825883a 	mov	r18,r7
   11fa8:	003f0f06 	br	11be8 <__subdf3+0x20c>
   11fac:	1c44b03a 	or	r2,r3,r17
   11fb0:	8000251e 	bne	r16,zero,12048 <__subdf3+0x66c>
   11fb4:	1000661e 	bne	r2,zero,12150 <__subdf3+0x774>
   11fb8:	2990b03a 	or	r8,r5,r6
   11fbc:	40009626 	beq	r8,zero,12218 <__subdf3+0x83c>
   11fc0:	2807883a 	mov	r3,r5
   11fc4:	3023883a 	mov	r17,r6
   11fc8:	3825883a 	mov	r18,r7
   11fcc:	003ea406 	br	11a60 <__subdf3+0x84>
   11fd0:	127ff804 	addi	r9,r2,-32
   11fd4:	01000804 	movi	r4,32
   11fd8:	2a52d83a 	srl	r9,r5,r9
   11fdc:	11008c26 	beq	r2,r4,12210 <__subdf3+0x834>
   11fe0:	01001004 	movi	r4,64
   11fe4:	2085c83a 	sub	r2,r4,r2
   11fe8:	2884983a 	sll	r2,r5,r2
   11fec:	118cb03a 	or	r6,r2,r6
   11ff0:	300cc03a 	cmpne	r6,r6,zero
   11ff4:	4992b03a 	or	r9,r9,r6
   11ff8:	0005883a 	mov	r2,zero
   11ffc:	003f1206 	br	11c48 <__subdf3+0x26c>
   12000:	0101ffc4 	movi	r4,2047
   12004:	493f9c1e 	bne	r9,r4,11e78 <__subdf3+0x49c>
   12008:	2807883a 	mov	r3,r5
   1200c:	3023883a 	mov	r17,r6
   12010:	4821883a 	mov	r16,r9
   12014:	3825883a 	mov	r18,r7
   12018:	003e9106 	br	11a60 <__subdf3+0x84>
   1201c:	80001f1e 	bne	r16,zero,1209c <__subdf3+0x6c0>
   12020:	1c48b03a 	or	r4,r3,r17
   12024:	20005a26 	beq	r4,zero,12190 <__subdf3+0x7b4>
   12028:	0084303a 	nor	r2,zero,r2
   1202c:	1000561e 	bne	r2,zero,12188 <__subdf3+0x7ac>
   12030:	89a3883a 	add	r17,r17,r6
   12034:	1945883a 	add	r2,r3,r5
   12038:	898d803a 	cmpltu	r6,r17,r6
   1203c:	3087883a 	add	r3,r6,r2
   12040:	4821883a 	mov	r16,r9
   12044:	003f0506 	br	11c5c <__subdf3+0x280>
   12048:	10002b1e 	bne	r2,zero,120f8 <__subdf3+0x71c>
   1204c:	2984b03a 	or	r2,r5,r6
   12050:	10008026 	beq	r2,zero,12254 <__subdf3+0x878>
   12054:	2807883a 	mov	r3,r5
   12058:	3023883a 	mov	r17,r6
   1205c:	3825883a 	mov	r18,r7
   12060:	0401ffc4 	movi	r16,2047
   12064:	003e7e06 	br	11a60 <__subdf3+0x84>
   12068:	3809883a 	mov	r4,r7
   1206c:	0011883a 	mov	r8,zero
   12070:	0005883a 	mov	r2,zero
   12074:	003ee306 	br	11c04 <__subdf3+0x228>
   12078:	1c62b03a 	or	r17,r3,r17
   1207c:	8822c03a 	cmpne	r17,r17,zero
   12080:	0005883a 	mov	r2,zero
   12084:	003f8906 	br	11eac <__subdf3+0x4d0>
   12088:	3809883a 	mov	r4,r7
   1208c:	4821883a 	mov	r16,r9
   12090:	0011883a 	mov	r8,zero
   12094:	0005883a 	mov	r2,zero
   12098:	003eda06 	br	11c04 <__subdf3+0x228>
   1209c:	0101ffc4 	movi	r4,2047
   120a0:	49003b26 	beq	r9,r4,12190 <__subdf3+0x7b4>
   120a4:	0085c83a 	sub	r2,zero,r2
   120a8:	18c02034 	orhi	r3,r3,128
   120ac:	01000e04 	movi	r4,56
   120b0:	20806e16 	blt	r4,r2,1226c <__subdf3+0x890>
   120b4:	010007c4 	movi	r4,31
   120b8:	20807716 	blt	r4,r2,12298 <__subdf3+0x8bc>
   120bc:	01000804 	movi	r4,32
   120c0:	2089c83a 	sub	r4,r4,r2
   120c4:	1914983a 	sll	r10,r3,r4
   120c8:	8890d83a 	srl	r8,r17,r2
   120cc:	8908983a 	sll	r4,r17,r4
   120d0:	1884d83a 	srl	r2,r3,r2
   120d4:	5222b03a 	or	r17,r10,r8
   120d8:	2006c03a 	cmpne	r3,r4,zero
   120dc:	88e2b03a 	or	r17,r17,r3
   120e0:	89a3883a 	add	r17,r17,r6
   120e4:	1145883a 	add	r2,r2,r5
   120e8:	898d803a 	cmpltu	r6,r17,r6
   120ec:	3087883a 	add	r3,r6,r2
   120f0:	4821883a 	mov	r16,r9
   120f4:	003ed906 	br	11c5c <__subdf3+0x280>
   120f8:	2984b03a 	or	r2,r5,r6
   120fc:	10004226 	beq	r2,zero,12208 <__subdf3+0x82c>
   12100:	1808d0fa 	srli	r4,r3,3
   12104:	8822d0fa 	srli	r17,r17,3
   12108:	1806977a 	slli	r3,r3,29
   1210c:	2080022c 	andhi	r2,r4,8
   12110:	1c62b03a 	or	r17,r3,r17
   12114:	10000826 	beq	r2,zero,12138 <__subdf3+0x75c>
   12118:	2812d0fa 	srli	r9,r5,3
   1211c:	4880022c 	andhi	r2,r9,8
   12120:	1000051e 	bne	r2,zero,12138 <__subdf3+0x75c>
   12124:	300cd0fa 	srli	r6,r6,3
   12128:	2804977a 	slli	r2,r5,29
   1212c:	4809883a 	mov	r4,r9
   12130:	3825883a 	mov	r18,r7
   12134:	11a2b03a 	or	r17,r2,r6
   12138:	8806d77a 	srli	r3,r17,29
   1213c:	200890fa 	slli	r4,r4,3
   12140:	882290fa 	slli	r17,r17,3
   12144:	0401ffc4 	movi	r16,2047
   12148:	1906b03a 	or	r3,r3,r4
   1214c:	003e4406 	br	11a60 <__subdf3+0x84>
   12150:	2984b03a 	or	r2,r5,r6
   12154:	103e4226 	beq	r2,zero,11a60 <__subdf3+0x84>
   12158:	8989c83a 	sub	r4,r17,r6
   1215c:	8911803a 	cmpltu	r8,r17,r4
   12160:	1945c83a 	sub	r2,r3,r5
   12164:	1205c83a 	sub	r2,r2,r8
   12168:	1200202c 	andhi	r8,r2,128
   1216c:	403e9a26 	beq	r8,zero,11bd8 <__subdf3+0x1fc>
   12170:	3463c83a 	sub	r17,r6,r17
   12174:	28c5c83a 	sub	r2,r5,r3
   12178:	344d803a 	cmpltu	r6,r6,r17
   1217c:	1187c83a 	sub	r3,r2,r6
   12180:	3825883a 	mov	r18,r7
   12184:	003e3606 	br	11a60 <__subdf3+0x84>
   12188:	0101ffc4 	movi	r4,2047
   1218c:	493fc71e 	bne	r9,r4,120ac <__subdf3+0x6d0>
   12190:	2807883a 	mov	r3,r5
   12194:	3023883a 	mov	r17,r6
   12198:	4821883a 	mov	r16,r9
   1219c:	003e3006 	br	11a60 <__subdf3+0x84>
   121a0:	10003626 	beq	r2,zero,1227c <__subdf3+0x8a0>
   121a4:	2984b03a 	or	r2,r5,r6
   121a8:	10001726 	beq	r2,zero,12208 <__subdf3+0x82c>
   121ac:	1808d0fa 	srli	r4,r3,3
   121b0:	8822d0fa 	srli	r17,r17,3
   121b4:	1806977a 	slli	r3,r3,29
   121b8:	2080022c 	andhi	r2,r4,8
   121bc:	1c62b03a 	or	r17,r3,r17
   121c0:	10000726 	beq	r2,zero,121e0 <__subdf3+0x804>
   121c4:	2812d0fa 	srli	r9,r5,3
   121c8:	4880022c 	andhi	r2,r9,8
   121cc:	1000041e 	bne	r2,zero,121e0 <__subdf3+0x804>
   121d0:	300cd0fa 	srli	r6,r6,3
   121d4:	2804977a 	slli	r2,r5,29
   121d8:	4809883a 	mov	r4,r9
   121dc:	11a2b03a 	or	r17,r2,r6
   121e0:	8806d77a 	srli	r3,r17,29
   121e4:	200890fa 	slli	r4,r4,3
   121e8:	882290fa 	slli	r17,r17,3
   121ec:	3825883a 	mov	r18,r7
   121f0:	1906b03a 	or	r3,r3,r4
   121f4:	0401ffc4 	movi	r16,2047
   121f8:	003e1906 	br	11a60 <__subdf3+0x84>
   121fc:	000b883a 	mov	r5,zero
   12200:	0005883a 	mov	r2,zero
   12204:	003e2e06 	br	11ac0 <__subdf3+0xe4>
   12208:	0401ffc4 	movi	r16,2047
   1220c:	003e1406 	br	11a60 <__subdf3+0x84>
   12210:	0005883a 	mov	r2,zero
   12214:	003f7506 	br	11fec <__subdf3+0x610>
   12218:	0005883a 	mov	r2,zero
   1221c:	0009883a 	mov	r4,zero
   12220:	003e7806 	br	11c04 <__subdf3+0x228>
   12224:	123ff804 	addi	r8,r2,-32
   12228:	01000804 	movi	r4,32
   1222c:	1a10d83a 	srl	r8,r3,r8
   12230:	11002526 	beq	r2,r4,122c8 <__subdf3+0x8ec>
   12234:	01001004 	movi	r4,64
   12238:	2085c83a 	sub	r2,r4,r2
   1223c:	1884983a 	sll	r2,r3,r2
   12240:	1444b03a 	or	r2,r2,r17
   12244:	1004c03a 	cmpne	r2,r2,zero
   12248:	40a2b03a 	or	r17,r8,r2
   1224c:	0005883a 	mov	r2,zero
   12250:	003f1606 	br	11eac <__subdf3+0x4d0>
   12254:	02000434 	movhi	r8,16
   12258:	0009883a 	mov	r4,zero
   1225c:	423fffc4 	addi	r8,r8,-1
   12260:	00bfffc4 	movi	r2,-1
   12264:	0401ffc4 	movi	r16,2047
   12268:	003e6606 	br	11c04 <__subdf3+0x228>
   1226c:	1c62b03a 	or	r17,r3,r17
   12270:	8822c03a 	cmpne	r17,r17,zero
   12274:	0005883a 	mov	r2,zero
   12278:	003f9906 	br	120e0 <__subdf3+0x704>
   1227c:	2807883a 	mov	r3,r5
   12280:	3023883a 	mov	r17,r6
   12284:	0401ffc4 	movi	r16,2047
   12288:	003df506 	br	11a60 <__subdf3+0x84>
   1228c:	2807883a 	mov	r3,r5
   12290:	3023883a 	mov	r17,r6
   12294:	003df206 	br	11a60 <__subdf3+0x84>
   12298:	123ff804 	addi	r8,r2,-32
   1229c:	01000804 	movi	r4,32
   122a0:	1a10d83a 	srl	r8,r3,r8
   122a4:	11000a26 	beq	r2,r4,122d0 <__subdf3+0x8f4>
   122a8:	01001004 	movi	r4,64
   122ac:	2085c83a 	sub	r2,r4,r2
   122b0:	1884983a 	sll	r2,r3,r2
   122b4:	1444b03a 	or	r2,r2,r17
   122b8:	1004c03a 	cmpne	r2,r2,zero
   122bc:	40a2b03a 	or	r17,r8,r2
   122c0:	0005883a 	mov	r2,zero
   122c4:	003f8606 	br	120e0 <__subdf3+0x704>
   122c8:	0005883a 	mov	r2,zero
   122cc:	003fdc06 	br	12240 <__subdf3+0x864>
   122d0:	0005883a 	mov	r2,zero
   122d4:	003ff706 	br	122b4 <__subdf3+0x8d8>

000122d8 <__fixdfsi>:
   122d8:	280cd53a 	srli	r6,r5,20
   122dc:	00c00434 	movhi	r3,16
   122e0:	18ffffc4 	addi	r3,r3,-1
   122e4:	3181ffcc 	andi	r6,r6,2047
   122e8:	01c0ff84 	movi	r7,1022
   122ec:	28c6703a 	and	r3,r5,r3
   122f0:	280ad7fa 	srli	r5,r5,31
   122f4:	3980120e 	bge	r7,r6,12340 <__fixdfsi+0x68>
   122f8:	00810744 	movi	r2,1053
   122fc:	11800c16 	blt	r2,r6,12330 <__fixdfsi+0x58>
   12300:	00810cc4 	movi	r2,1075
   12304:	1185c83a 	sub	r2,r2,r6
   12308:	01c007c4 	movi	r7,31
   1230c:	18c00434 	orhi	r3,r3,16
   12310:	38800d16 	blt	r7,r2,12348 <__fixdfsi+0x70>
   12314:	31befb44 	addi	r6,r6,-1043
   12318:	2084d83a 	srl	r2,r4,r2
   1231c:	1986983a 	sll	r3,r3,r6
   12320:	1884b03a 	or	r2,r3,r2
   12324:	28000726 	beq	r5,zero,12344 <__fixdfsi+0x6c>
   12328:	0085c83a 	sub	r2,zero,r2
   1232c:	f800283a 	ret
   12330:	00a00034 	movhi	r2,32768
   12334:	10bfffc4 	addi	r2,r2,-1
   12338:	2885883a 	add	r2,r5,r2
   1233c:	f800283a 	ret
   12340:	0005883a 	mov	r2,zero
   12344:	f800283a 	ret
   12348:	008104c4 	movi	r2,1043
   1234c:	1185c83a 	sub	r2,r2,r6
   12350:	1884d83a 	srl	r2,r3,r2
   12354:	003ff306 	br	12324 <__fixdfsi+0x4c>

00012358 <__floatsidf>:
   12358:	defffd04 	addi	sp,sp,-12
   1235c:	dfc00215 	stw	ra,8(sp)
   12360:	dc400115 	stw	r17,4(sp)
   12364:	dc000015 	stw	r16,0(sp)
   12368:	20002b26 	beq	r4,zero,12418 <__floatsidf+0xc0>
   1236c:	2023883a 	mov	r17,r4
   12370:	2020d7fa 	srli	r16,r4,31
   12374:	20002d16 	blt	r4,zero,1242c <__floatsidf+0xd4>
   12378:	8809883a 	mov	r4,r17
   1237c:	00124dc0 	call	124dc <__clzsi2>
   12380:	01410784 	movi	r5,1054
   12384:	288bc83a 	sub	r5,r5,r2
   12388:	01010cc4 	movi	r4,1075
   1238c:	2149c83a 	sub	r4,r4,r5
   12390:	00c007c4 	movi	r3,31
   12394:	1900160e 	bge	r3,r4,123f0 <__floatsidf+0x98>
   12398:	00c104c4 	movi	r3,1043
   1239c:	1947c83a 	sub	r3,r3,r5
   123a0:	88c6983a 	sll	r3,r17,r3
   123a4:	00800434 	movhi	r2,16
   123a8:	10bfffc4 	addi	r2,r2,-1
   123ac:	1886703a 	and	r3,r3,r2
   123b0:	2941ffcc 	andi	r5,r5,2047
   123b4:	800d883a 	mov	r6,r16
   123b8:	0005883a 	mov	r2,zero
   123bc:	280a953a 	slli	r5,r5,20
   123c0:	31803fcc 	andi	r6,r6,255
   123c4:	01000434 	movhi	r4,16
   123c8:	300c97fa 	slli	r6,r6,31
   123cc:	213fffc4 	addi	r4,r4,-1
   123d0:	1906703a 	and	r3,r3,r4
   123d4:	1946b03a 	or	r3,r3,r5
   123d8:	1986b03a 	or	r3,r3,r6
   123dc:	dfc00217 	ldw	ra,8(sp)
   123e0:	dc400117 	ldw	r17,4(sp)
   123e4:	dc000017 	ldw	r16,0(sp)
   123e8:	dec00304 	addi	sp,sp,12
   123ec:	f800283a 	ret
   123f0:	00c002c4 	movi	r3,11
   123f4:	1887c83a 	sub	r3,r3,r2
   123f8:	88c6d83a 	srl	r3,r17,r3
   123fc:	8904983a 	sll	r2,r17,r4
   12400:	01000434 	movhi	r4,16
   12404:	213fffc4 	addi	r4,r4,-1
   12408:	2941ffcc 	andi	r5,r5,2047
   1240c:	1906703a 	and	r3,r3,r4
   12410:	800d883a 	mov	r6,r16
   12414:	003fe906 	br	123bc <__floatsidf+0x64>
   12418:	000d883a 	mov	r6,zero
   1241c:	000b883a 	mov	r5,zero
   12420:	0007883a 	mov	r3,zero
   12424:	0005883a 	mov	r2,zero
   12428:	003fe406 	br	123bc <__floatsidf+0x64>
   1242c:	0123c83a 	sub	r17,zero,r4
   12430:	003fd106 	br	12378 <__floatsidf+0x20>

00012434 <__floatunsidf>:
   12434:	defffe04 	addi	sp,sp,-8
   12438:	dc000015 	stw	r16,0(sp)
   1243c:	dfc00115 	stw	ra,4(sp)
   12440:	2021883a 	mov	r16,r4
   12444:	20002226 	beq	r4,zero,124d0 <__floatunsidf+0x9c>
   12448:	00124dc0 	call	124dc <__clzsi2>
   1244c:	01010784 	movi	r4,1054
   12450:	2089c83a 	sub	r4,r4,r2
   12454:	01810cc4 	movi	r6,1075
   12458:	310dc83a 	sub	r6,r6,r4
   1245c:	00c007c4 	movi	r3,31
   12460:	1980120e 	bge	r3,r6,124ac <__floatunsidf+0x78>
   12464:	00c104c4 	movi	r3,1043
   12468:	1907c83a 	sub	r3,r3,r4
   1246c:	80ca983a 	sll	r5,r16,r3
   12470:	00800434 	movhi	r2,16
   12474:	10bfffc4 	addi	r2,r2,-1
   12478:	2101ffcc 	andi	r4,r4,2047
   1247c:	0021883a 	mov	r16,zero
   12480:	288a703a 	and	r5,r5,r2
   12484:	2008953a 	slli	r4,r4,20
   12488:	00c00434 	movhi	r3,16
   1248c:	18ffffc4 	addi	r3,r3,-1
   12490:	28c6703a 	and	r3,r5,r3
   12494:	8005883a 	mov	r2,r16
   12498:	1906b03a 	or	r3,r3,r4
   1249c:	dfc00117 	ldw	ra,4(sp)
   124a0:	dc000017 	ldw	r16,0(sp)
   124a4:	dec00204 	addi	sp,sp,8
   124a8:	f800283a 	ret
   124ac:	00c002c4 	movi	r3,11
   124b0:	188bc83a 	sub	r5,r3,r2
   124b4:	814ad83a 	srl	r5,r16,r5
   124b8:	00c00434 	movhi	r3,16
   124bc:	18ffffc4 	addi	r3,r3,-1
   124c0:	81a0983a 	sll	r16,r16,r6
   124c4:	2101ffcc 	andi	r4,r4,2047
   124c8:	28ca703a 	and	r5,r5,r3
   124cc:	003fed06 	br	12484 <__floatunsidf+0x50>
   124d0:	0009883a 	mov	r4,zero
   124d4:	000b883a 	mov	r5,zero
   124d8:	003fea06 	br	12484 <__floatunsidf+0x50>

000124dc <__clzsi2>:
   124dc:	00bfffd4 	movui	r2,65535
   124e0:	11000536 	bltu	r2,r4,124f8 <__clzsi2+0x1c>
   124e4:	00803fc4 	movi	r2,255
   124e8:	11000f36 	bltu	r2,r4,12528 <__clzsi2+0x4c>
   124ec:	00800804 	movi	r2,32
   124f0:	0007883a 	mov	r3,zero
   124f4:	00000506 	br	1250c <__clzsi2+0x30>
   124f8:	00804034 	movhi	r2,256
   124fc:	10bfffc4 	addi	r2,r2,-1
   12500:	11000c2e 	bgeu	r2,r4,12534 <__clzsi2+0x58>
   12504:	00800204 	movi	r2,8
   12508:	00c00604 	movi	r3,24
   1250c:	20c8d83a 	srl	r4,r4,r3
   12510:	00c000b4 	movhi	r3,2
   12514:	18fd8204 	addi	r3,r3,-2552
   12518:	1909883a 	add	r4,r3,r4
   1251c:	20c00003 	ldbu	r3,0(r4)
   12520:	10c5c83a 	sub	r2,r2,r3
   12524:	f800283a 	ret
   12528:	00800604 	movi	r2,24
   1252c:	00c00204 	movi	r3,8
   12530:	003ff606 	br	1250c <__clzsi2+0x30>
   12534:	00800404 	movi	r2,16
   12538:	1007883a 	mov	r3,r2
   1253c:	003ff306 	br	1250c <__clzsi2+0x30>

00012540 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12540:	defffe04 	addi	sp,sp,-8
   12544:	dfc00115 	stw	ra,4(sp)
   12548:	df000015 	stw	fp,0(sp)
   1254c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12550:	d0a00d17 	ldw	r2,-32716(gp)
   12554:	10000326 	beq	r2,zero,12564 <alt_get_errno+0x24>
   12558:	d0a00d17 	ldw	r2,-32716(gp)
   1255c:	103ee83a 	callr	r2
   12560:	00000106 	br	12568 <alt_get_errno+0x28>
   12564:	d0a80804 	addi	r2,gp,-24544
}
   12568:	e037883a 	mov	sp,fp
   1256c:	dfc00117 	ldw	ra,4(sp)
   12570:	df000017 	ldw	fp,0(sp)
   12574:	dec00204 	addi	sp,sp,8
   12578:	f800283a 	ret

0001257c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1257c:	defffb04 	addi	sp,sp,-20
   12580:	dfc00415 	stw	ra,16(sp)
   12584:	df000315 	stw	fp,12(sp)
   12588:	df000304 	addi	fp,sp,12
   1258c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   12590:	e0bfff17 	ldw	r2,-4(fp)
   12594:	10000616 	blt	r2,zero,125b0 <close+0x34>
   12598:	e0bfff17 	ldw	r2,-4(fp)
   1259c:	10c00324 	muli	r3,r2,12
   125a0:	008000b4 	movhi	r2,2
   125a4:	1080ae04 	addi	r2,r2,696
   125a8:	1885883a 	add	r2,r3,r2
   125ac:	00000106 	br	125b4 <close+0x38>
   125b0:	0005883a 	mov	r2,zero
   125b4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   125b8:	e0bffd17 	ldw	r2,-12(fp)
   125bc:	10001926 	beq	r2,zero,12624 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   125c0:	e0bffd17 	ldw	r2,-12(fp)
   125c4:	10800017 	ldw	r2,0(r2)
   125c8:	10800417 	ldw	r2,16(r2)
   125cc:	10000626 	beq	r2,zero,125e8 <close+0x6c>
   125d0:	e0bffd17 	ldw	r2,-12(fp)
   125d4:	10800017 	ldw	r2,0(r2)
   125d8:	10800417 	ldw	r2,16(r2)
   125dc:	e13ffd17 	ldw	r4,-12(fp)
   125e0:	103ee83a 	callr	r2
   125e4:	00000106 	br	125ec <close+0x70>
   125e8:	0005883a 	mov	r2,zero
   125ec:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   125f0:	e13fff17 	ldw	r4,-4(fp)
   125f4:	0012c340 	call	12c34 <alt_release_fd>
    if (rval < 0)
   125f8:	e0bffe17 	ldw	r2,-8(fp)
   125fc:	1000070e 	bge	r2,zero,1261c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   12600:	00125400 	call	12540 <alt_get_errno>
   12604:	1007883a 	mov	r3,r2
   12608:	e0bffe17 	ldw	r2,-8(fp)
   1260c:	0085c83a 	sub	r2,zero,r2
   12610:	18800015 	stw	r2,0(r3)
      return -1;
   12614:	00bfffc4 	movi	r2,-1
   12618:	00000706 	br	12638 <close+0xbc>
    }
    return 0;
   1261c:	0005883a 	mov	r2,zero
   12620:	00000506 	br	12638 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12624:	00125400 	call	12540 <alt_get_errno>
   12628:	1007883a 	mov	r3,r2
   1262c:	00801444 	movi	r2,81
   12630:	18800015 	stw	r2,0(r3)
    return -1;
   12634:	00bfffc4 	movi	r2,-1
  }
}
   12638:	e037883a 	mov	sp,fp
   1263c:	dfc00117 	ldw	ra,4(sp)
   12640:	df000017 	ldw	fp,0(sp)
   12644:	dec00204 	addi	sp,sp,8
   12648:	f800283a 	ret

0001264c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   1264c:	defffc04 	addi	sp,sp,-16
   12650:	df000315 	stw	fp,12(sp)
   12654:	df000304 	addi	fp,sp,12
   12658:	e13ffd15 	stw	r4,-12(fp)
   1265c:	e17ffe15 	stw	r5,-8(fp)
   12660:	e1bfff15 	stw	r6,-4(fp)
  return len;
   12664:	e0bfff17 	ldw	r2,-4(fp)
}
   12668:	e037883a 	mov	sp,fp
   1266c:	df000017 	ldw	fp,0(sp)
   12670:	dec00104 	addi	sp,sp,4
   12674:	f800283a 	ret

00012678 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12678:	defffe04 	addi	sp,sp,-8
   1267c:	dfc00115 	stw	ra,4(sp)
   12680:	df000015 	stw	fp,0(sp)
   12684:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12688:	d0a00d17 	ldw	r2,-32716(gp)
   1268c:	10000326 	beq	r2,zero,1269c <alt_get_errno+0x24>
   12690:	d0a00d17 	ldw	r2,-32716(gp)
   12694:	103ee83a 	callr	r2
   12698:	00000106 	br	126a0 <alt_get_errno+0x28>
   1269c:	d0a80804 	addi	r2,gp,-24544
}
   126a0:	e037883a 	mov	sp,fp
   126a4:	dfc00117 	ldw	ra,4(sp)
   126a8:	df000017 	ldw	fp,0(sp)
   126ac:	dec00204 	addi	sp,sp,8
   126b0:	f800283a 	ret

000126b4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   126b4:	defffb04 	addi	sp,sp,-20
   126b8:	dfc00415 	stw	ra,16(sp)
   126bc:	df000315 	stw	fp,12(sp)
   126c0:	df000304 	addi	fp,sp,12
   126c4:	e13ffe15 	stw	r4,-8(fp)
   126c8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   126cc:	e0bffe17 	ldw	r2,-8(fp)
   126d0:	10000616 	blt	r2,zero,126ec <fstat+0x38>
   126d4:	e0bffe17 	ldw	r2,-8(fp)
   126d8:	10c00324 	muli	r3,r2,12
   126dc:	008000b4 	movhi	r2,2
   126e0:	1080ae04 	addi	r2,r2,696
   126e4:	1885883a 	add	r2,r3,r2
   126e8:	00000106 	br	126f0 <fstat+0x3c>
   126ec:	0005883a 	mov	r2,zero
   126f0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   126f4:	e0bffd17 	ldw	r2,-12(fp)
   126f8:	10001026 	beq	r2,zero,1273c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   126fc:	e0bffd17 	ldw	r2,-12(fp)
   12700:	10800017 	ldw	r2,0(r2)
   12704:	10800817 	ldw	r2,32(r2)
   12708:	10000726 	beq	r2,zero,12728 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   1270c:	e0bffd17 	ldw	r2,-12(fp)
   12710:	10800017 	ldw	r2,0(r2)
   12714:	10800817 	ldw	r2,32(r2)
   12718:	e17fff17 	ldw	r5,-4(fp)
   1271c:	e13ffd17 	ldw	r4,-12(fp)
   12720:	103ee83a 	callr	r2
   12724:	00000a06 	br	12750 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   12728:	e0bfff17 	ldw	r2,-4(fp)
   1272c:	00c80004 	movi	r3,8192
   12730:	10c00115 	stw	r3,4(r2)
      return 0;
   12734:	0005883a 	mov	r2,zero
   12738:	00000506 	br	12750 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1273c:	00126780 	call	12678 <alt_get_errno>
   12740:	1007883a 	mov	r3,r2
   12744:	00801444 	movi	r2,81
   12748:	18800015 	stw	r2,0(r3)
    return -1;
   1274c:	00bfffc4 	movi	r2,-1
  }
}
   12750:	e037883a 	mov	sp,fp
   12754:	dfc00117 	ldw	ra,4(sp)
   12758:	df000017 	ldw	fp,0(sp)
   1275c:	dec00204 	addi	sp,sp,8
   12760:	f800283a 	ret

00012764 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12764:	defffe04 	addi	sp,sp,-8
   12768:	dfc00115 	stw	ra,4(sp)
   1276c:	df000015 	stw	fp,0(sp)
   12770:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12774:	d0a00d17 	ldw	r2,-32716(gp)
   12778:	10000326 	beq	r2,zero,12788 <alt_get_errno+0x24>
   1277c:	d0a00d17 	ldw	r2,-32716(gp)
   12780:	103ee83a 	callr	r2
   12784:	00000106 	br	1278c <alt_get_errno+0x28>
   12788:	d0a80804 	addi	r2,gp,-24544
}
   1278c:	e037883a 	mov	sp,fp
   12790:	dfc00117 	ldw	ra,4(sp)
   12794:	df000017 	ldw	fp,0(sp)
   12798:	dec00204 	addi	sp,sp,8
   1279c:	f800283a 	ret

000127a0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   127a0:	deffed04 	addi	sp,sp,-76
   127a4:	dfc01215 	stw	ra,72(sp)
   127a8:	df001115 	stw	fp,68(sp)
   127ac:	df001104 	addi	fp,sp,68
   127b0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   127b4:	e0bfff17 	ldw	r2,-4(fp)
   127b8:	10000616 	blt	r2,zero,127d4 <isatty+0x34>
   127bc:	e0bfff17 	ldw	r2,-4(fp)
   127c0:	10c00324 	muli	r3,r2,12
   127c4:	008000b4 	movhi	r2,2
   127c8:	1080ae04 	addi	r2,r2,696
   127cc:	1885883a 	add	r2,r3,r2
   127d0:	00000106 	br	127d8 <isatty+0x38>
   127d4:	0005883a 	mov	r2,zero
   127d8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   127dc:	e0bfef17 	ldw	r2,-68(fp)
   127e0:	10000e26 	beq	r2,zero,1281c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   127e4:	e0bfef17 	ldw	r2,-68(fp)
   127e8:	10800017 	ldw	r2,0(r2)
   127ec:	10800817 	ldw	r2,32(r2)
   127f0:	1000021e 	bne	r2,zero,127fc <isatty+0x5c>
    {
      return 1;
   127f4:	00800044 	movi	r2,1
   127f8:	00000d06 	br	12830 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   127fc:	e0bff004 	addi	r2,fp,-64
   12800:	100b883a 	mov	r5,r2
   12804:	e13fff17 	ldw	r4,-4(fp)
   12808:	00126b40 	call	126b4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   1280c:	e0bff117 	ldw	r2,-60(fp)
   12810:	10880020 	cmpeqi	r2,r2,8192
   12814:	10803fcc 	andi	r2,r2,255
   12818:	00000506 	br	12830 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1281c:	00127640 	call	12764 <alt_get_errno>
   12820:	1007883a 	mov	r3,r2
   12824:	00801444 	movi	r2,81
   12828:	18800015 	stw	r2,0(r3)
    return 0;
   1282c:	0005883a 	mov	r2,zero
  }
}
   12830:	e037883a 	mov	sp,fp
   12834:	dfc00117 	ldw	ra,4(sp)
   12838:	df000017 	ldw	fp,0(sp)
   1283c:	dec00204 	addi	sp,sp,8
   12840:	f800283a 	ret

00012844 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   12844:	defffc04 	addi	sp,sp,-16
   12848:	df000315 	stw	fp,12(sp)
   1284c:	df000304 	addi	fp,sp,12
   12850:	e13ffd15 	stw	r4,-12(fp)
   12854:	e17ffe15 	stw	r5,-8(fp)
   12858:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   1285c:	e0fffe17 	ldw	r3,-8(fp)
   12860:	e0bffd17 	ldw	r2,-12(fp)
   12864:	18800c26 	beq	r3,r2,12898 <alt_load_section+0x54>
  {
    while( to != end )
   12868:	00000806 	br	1288c <alt_load_section+0x48>
    {
      *to++ = *from++;
   1286c:	e0bffe17 	ldw	r2,-8(fp)
   12870:	10c00104 	addi	r3,r2,4
   12874:	e0fffe15 	stw	r3,-8(fp)
   12878:	e0fffd17 	ldw	r3,-12(fp)
   1287c:	19000104 	addi	r4,r3,4
   12880:	e13ffd15 	stw	r4,-12(fp)
   12884:	18c00017 	ldw	r3,0(r3)
   12888:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   1288c:	e0fffe17 	ldw	r3,-8(fp)
   12890:	e0bfff17 	ldw	r2,-4(fp)
   12894:	18bff51e 	bne	r3,r2,1286c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   12898:	0001883a 	nop
   1289c:	e037883a 	mov	sp,fp
   128a0:	df000017 	ldw	fp,0(sp)
   128a4:	dec00104 	addi	sp,sp,4
   128a8:	f800283a 	ret

000128ac <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   128ac:	defffe04 	addi	sp,sp,-8
   128b0:	dfc00115 	stw	ra,4(sp)
   128b4:	df000015 	stw	fp,0(sp)
   128b8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   128bc:	018000b4 	movhi	r6,2
   128c0:	31861d04 	addi	r6,r6,6260
   128c4:	014000b4 	movhi	r5,2
   128c8:	297e6904 	addi	r5,r5,-1628
   128cc:	010000b4 	movhi	r4,2
   128d0:	21061d04 	addi	r4,r4,6260
   128d4:	00128440 	call	12844 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   128d8:	01800034 	movhi	r6,0
   128dc:	31809204 	addi	r6,r6,584
   128e0:	01400034 	movhi	r5,0
   128e4:	29400804 	addi	r5,r5,32
   128e8:	01000034 	movhi	r4,0
   128ec:	21000804 	addi	r4,r4,32
   128f0:	00128440 	call	12844 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   128f4:	018000b4 	movhi	r6,2
   128f8:	31be6904 	addi	r6,r6,-1628
   128fc:	014000b4 	movhi	r5,2
   12900:	297a2804 	addi	r5,r5,-5984
   12904:	010000b4 	movhi	r4,2
   12908:	213a2804 	addi	r4,r4,-5984
   1290c:	00128440 	call	12844 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   12910:	001d5440 	call	1d544 <alt_dcache_flush_all>
  alt_icache_flush_all();
   12914:	001d7940 	call	1d794 <alt_icache_flush_all>
}
   12918:	0001883a 	nop
   1291c:	e037883a 	mov	sp,fp
   12920:	dfc00117 	ldw	ra,4(sp)
   12924:	df000017 	ldw	fp,0(sp)
   12928:	dec00204 	addi	sp,sp,8
   1292c:	f800283a 	ret

00012930 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12930:	defffe04 	addi	sp,sp,-8
   12934:	dfc00115 	stw	ra,4(sp)
   12938:	df000015 	stw	fp,0(sp)
   1293c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12940:	d0a00d17 	ldw	r2,-32716(gp)
   12944:	10000326 	beq	r2,zero,12954 <alt_get_errno+0x24>
   12948:	d0a00d17 	ldw	r2,-32716(gp)
   1294c:	103ee83a 	callr	r2
   12950:	00000106 	br	12958 <alt_get_errno+0x28>
   12954:	d0a80804 	addi	r2,gp,-24544
}
   12958:	e037883a 	mov	sp,fp
   1295c:	dfc00117 	ldw	ra,4(sp)
   12960:	df000017 	ldw	fp,0(sp)
   12964:	dec00204 	addi	sp,sp,8
   12968:	f800283a 	ret

0001296c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   1296c:	defff904 	addi	sp,sp,-28
   12970:	dfc00615 	stw	ra,24(sp)
   12974:	df000515 	stw	fp,20(sp)
   12978:	df000504 	addi	fp,sp,20
   1297c:	e13ffd15 	stw	r4,-12(fp)
   12980:	e17ffe15 	stw	r5,-8(fp)
   12984:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   12988:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1298c:	e0bffd17 	ldw	r2,-12(fp)
   12990:	10000616 	blt	r2,zero,129ac <lseek+0x40>
   12994:	e0bffd17 	ldw	r2,-12(fp)
   12998:	10c00324 	muli	r3,r2,12
   1299c:	008000b4 	movhi	r2,2
   129a0:	1080ae04 	addi	r2,r2,696
   129a4:	1885883a 	add	r2,r3,r2
   129a8:	00000106 	br	129b0 <lseek+0x44>
   129ac:	0005883a 	mov	r2,zero
   129b0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   129b4:	e0bffc17 	ldw	r2,-16(fp)
   129b8:	10001026 	beq	r2,zero,129fc <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   129bc:	e0bffc17 	ldw	r2,-16(fp)
   129c0:	10800017 	ldw	r2,0(r2)
   129c4:	10800717 	ldw	r2,28(r2)
   129c8:	10000926 	beq	r2,zero,129f0 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   129cc:	e0bffc17 	ldw	r2,-16(fp)
   129d0:	10800017 	ldw	r2,0(r2)
   129d4:	10800717 	ldw	r2,28(r2)
   129d8:	e1bfff17 	ldw	r6,-4(fp)
   129dc:	e17ffe17 	ldw	r5,-8(fp)
   129e0:	e13ffc17 	ldw	r4,-16(fp)
   129e4:	103ee83a 	callr	r2
   129e8:	e0bffb15 	stw	r2,-20(fp)
   129ec:	00000506 	br	12a04 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   129f0:	00bfde84 	movi	r2,-134
   129f4:	e0bffb15 	stw	r2,-20(fp)
   129f8:	00000206 	br	12a04 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   129fc:	00bfebc4 	movi	r2,-81
   12a00:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   12a04:	e0bffb17 	ldw	r2,-20(fp)
   12a08:	1000070e 	bge	r2,zero,12a28 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   12a0c:	00129300 	call	12930 <alt_get_errno>
   12a10:	1007883a 	mov	r3,r2
   12a14:	e0bffb17 	ldw	r2,-20(fp)
   12a18:	0085c83a 	sub	r2,zero,r2
   12a1c:	18800015 	stw	r2,0(r3)
    rc = -1;
   12a20:	00bfffc4 	movi	r2,-1
   12a24:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   12a28:	e0bffb17 	ldw	r2,-20(fp)
}
   12a2c:	e037883a 	mov	sp,fp
   12a30:	dfc00117 	ldw	ra,4(sp)
   12a34:	df000017 	ldw	fp,0(sp)
   12a38:	dec00204 	addi	sp,sp,8
   12a3c:	f800283a 	ret

00012a40 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   12a40:	defff904 	addi	sp,sp,-28
   12a44:	dfc00615 	stw	ra,24(sp)
   12a48:	df000515 	stw	fp,20(sp)
   12a4c:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   12a50:	0009883a 	mov	r4,zero
   12a54:	001a9a00 	call	1a9a0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   12a58:	00139fc0 	call	139fc <OSInit>
   12a5c:	01000044 	movi	r4,1
   12a60:	001835c0 	call	1835c <OSSemCreate>
   12a64:	d0a80e15 	stw	r2,-24520(gp)
   12a68:	01000044 	movi	r4,1
   12a6c:	001835c0 	call	1835c <OSSemCreate>
   12a70:	d0a81015 	stw	r2,-24512(gp)
   12a74:	d0a80904 	addi	r2,gp,-24540
   12a78:	e0bffc15 	stw	r2,-16(fp)
   12a7c:	00800044 	movi	r2,1
   12a80:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   12a84:	e0bffd0b 	ldhu	r2,-12(fp)
   12a88:	1009883a 	mov	r4,r2
   12a8c:	001835c0 	call	1835c <OSSemCreate>
   12a90:	1007883a 	mov	r3,r2
   12a94:	e0bffc17 	ldw	r2,-16(fp)
   12a98:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   12a9c:	001a9d80 	call	1a9d8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   12aa0:	018000b4 	movhi	r6,2
   12aa4:	31bdc504 	addi	r6,r6,-2284
   12aa8:	014000b4 	movhi	r5,2
   12aac:	297dc504 	addi	r5,r5,-2284
   12ab0:	010000b4 	movhi	r4,2
   12ab4:	213dc504 	addi	r4,r4,-2284
   12ab8:	001d88c0 	call	1d88c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   12abc:	001d6440 	call	1d644 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   12ac0:	010000b4 	movhi	r4,2
   12ac4:	2135a904 	addi	r4,r4,-10588
   12ac8:	001e50c0 	call	1e50c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   12acc:	d0a80a17 	ldw	r2,-24536(gp)
   12ad0:	d0e80b17 	ldw	r3,-24532(gp)
   12ad4:	d1280c17 	ldw	r4,-24528(gp)
   12ad8:	200d883a 	mov	r6,r4
   12adc:	180b883a 	mov	r5,r3
   12ae0:	1009883a 	mov	r4,r2
   12ae4:	00007c40 	call	7c4 <main>
   12ae8:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   12aec:	01000044 	movi	r4,1
   12af0:	001257c0 	call	1257c <close>
  exit (result);
   12af4:	e13ffb17 	ldw	r4,-20(fp)
   12af8:	001e5200 	call	1e520 <exit>

00012afc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12afc:	defffe04 	addi	sp,sp,-8
   12b00:	dfc00115 	stw	ra,4(sp)
   12b04:	df000015 	stw	fp,0(sp)
   12b08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12b0c:	d0a00d17 	ldw	r2,-32716(gp)
   12b10:	10000326 	beq	r2,zero,12b20 <alt_get_errno+0x24>
   12b14:	d0a00d17 	ldw	r2,-32716(gp)
   12b18:	103ee83a 	callr	r2
   12b1c:	00000106 	br	12b24 <alt_get_errno+0x28>
   12b20:	d0a80804 	addi	r2,gp,-24544
}
   12b24:	e037883a 	mov	sp,fp
   12b28:	dfc00117 	ldw	ra,4(sp)
   12b2c:	df000017 	ldw	fp,0(sp)
   12b30:	dec00204 	addi	sp,sp,8
   12b34:	f800283a 	ret

00012b38 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   12b38:	defff904 	addi	sp,sp,-28
   12b3c:	dfc00615 	stw	ra,24(sp)
   12b40:	df000515 	stw	fp,20(sp)
   12b44:	df000504 	addi	fp,sp,20
   12b48:	e13ffd15 	stw	r4,-12(fp)
   12b4c:	e17ffe15 	stw	r5,-8(fp)
   12b50:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12b54:	e0bffd17 	ldw	r2,-12(fp)
   12b58:	10000616 	blt	r2,zero,12b74 <read+0x3c>
   12b5c:	e0bffd17 	ldw	r2,-12(fp)
   12b60:	10c00324 	muli	r3,r2,12
   12b64:	008000b4 	movhi	r2,2
   12b68:	1080ae04 	addi	r2,r2,696
   12b6c:	1885883a 	add	r2,r3,r2
   12b70:	00000106 	br	12b78 <read+0x40>
   12b74:	0005883a 	mov	r2,zero
   12b78:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   12b7c:	e0bffb17 	ldw	r2,-20(fp)
   12b80:	10002226 	beq	r2,zero,12c0c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   12b84:	e0bffb17 	ldw	r2,-20(fp)
   12b88:	10800217 	ldw	r2,8(r2)
   12b8c:	108000cc 	andi	r2,r2,3
   12b90:	10800060 	cmpeqi	r2,r2,1
   12b94:	1000181e 	bne	r2,zero,12bf8 <read+0xc0>
        (fd->dev->read))
   12b98:	e0bffb17 	ldw	r2,-20(fp)
   12b9c:	10800017 	ldw	r2,0(r2)
   12ba0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   12ba4:	10001426 	beq	r2,zero,12bf8 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   12ba8:	e0bffb17 	ldw	r2,-20(fp)
   12bac:	10800017 	ldw	r2,0(r2)
   12bb0:	10800517 	ldw	r2,20(r2)
   12bb4:	e0ffff17 	ldw	r3,-4(fp)
   12bb8:	180d883a 	mov	r6,r3
   12bbc:	e17ffe17 	ldw	r5,-8(fp)
   12bc0:	e13ffb17 	ldw	r4,-20(fp)
   12bc4:	103ee83a 	callr	r2
   12bc8:	e0bffc15 	stw	r2,-16(fp)
   12bcc:	e0bffc17 	ldw	r2,-16(fp)
   12bd0:	1000070e 	bge	r2,zero,12bf0 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   12bd4:	0012afc0 	call	12afc <alt_get_errno>
   12bd8:	1007883a 	mov	r3,r2
   12bdc:	e0bffc17 	ldw	r2,-16(fp)
   12be0:	0085c83a 	sub	r2,zero,r2
   12be4:	18800015 	stw	r2,0(r3)
          return -1;
   12be8:	00bfffc4 	movi	r2,-1
   12bec:	00000c06 	br	12c20 <read+0xe8>
        }
        return rval;
   12bf0:	e0bffc17 	ldw	r2,-16(fp)
   12bf4:	00000a06 	br	12c20 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   12bf8:	0012afc0 	call	12afc <alt_get_errno>
   12bfc:	1007883a 	mov	r3,r2
   12c00:	00800344 	movi	r2,13
   12c04:	18800015 	stw	r2,0(r3)
   12c08:	00000406 	br	12c1c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   12c0c:	0012afc0 	call	12afc <alt_get_errno>
   12c10:	1007883a 	mov	r3,r2
   12c14:	00801444 	movi	r2,81
   12c18:	18800015 	stw	r2,0(r3)
  }
  return -1;
   12c1c:	00bfffc4 	movi	r2,-1
}
   12c20:	e037883a 	mov	sp,fp
   12c24:	dfc00117 	ldw	ra,4(sp)
   12c28:	df000017 	ldw	fp,0(sp)
   12c2c:	dec00204 	addi	sp,sp,8
   12c30:	f800283a 	ret

00012c34 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   12c34:	defffe04 	addi	sp,sp,-8
   12c38:	df000115 	stw	fp,4(sp)
   12c3c:	df000104 	addi	fp,sp,4
   12c40:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   12c44:	e0bfff17 	ldw	r2,-4(fp)
   12c48:	108000d0 	cmplti	r2,r2,3
   12c4c:	10000d1e 	bne	r2,zero,12c84 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   12c50:	008000b4 	movhi	r2,2
   12c54:	1080ae04 	addi	r2,r2,696
   12c58:	e0ffff17 	ldw	r3,-4(fp)
   12c5c:	18c00324 	muli	r3,r3,12
   12c60:	10c5883a 	add	r2,r2,r3
   12c64:	10800204 	addi	r2,r2,8
   12c68:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   12c6c:	008000b4 	movhi	r2,2
   12c70:	1080ae04 	addi	r2,r2,696
   12c74:	e0ffff17 	ldw	r3,-4(fp)
   12c78:	18c00324 	muli	r3,r3,12
   12c7c:	10c5883a 	add	r2,r2,r3
   12c80:	10000015 	stw	zero,0(r2)
  }
}
   12c84:	0001883a 	nop
   12c88:	e037883a 	mov	sp,fp
   12c8c:	df000017 	ldw	fp,0(sp)
   12c90:	dec00104 	addi	sp,sp,4
   12c94:	f800283a 	ret

00012c98 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   12c98:	defff904 	addi	sp,sp,-28
   12c9c:	df000615 	stw	fp,24(sp)
   12ca0:	df000604 	addi	fp,sp,24
   12ca4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12ca8:	0005303a 	rdctl	r2,status
   12cac:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12cb0:	e0fffe17 	ldw	r3,-8(fp)
   12cb4:	00bfff84 	movi	r2,-2
   12cb8:	1884703a 	and	r2,r3,r2
   12cbc:	1001703a 	wrctl	status,r2
  
  return context;
   12cc0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   12cc4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   12cc8:	d0a00e17 	ldw	r2,-32712(gp)
   12ccc:	10c000c4 	addi	r3,r2,3
   12cd0:	00bfff04 	movi	r2,-4
   12cd4:	1884703a 	and	r2,r3,r2
   12cd8:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   12cdc:	d0e00e17 	ldw	r3,-32712(gp)
   12ce0:	e0bfff17 	ldw	r2,-4(fp)
   12ce4:	1887883a 	add	r3,r3,r2
   12ce8:	00810034 	movhi	r2,1024
   12cec:	10800004 	addi	r2,r2,0
   12cf0:	10c0062e 	bgeu	r2,r3,12d0c <sbrk+0x74>
   12cf4:	e0bffb17 	ldw	r2,-20(fp)
   12cf8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12cfc:	e0bffa17 	ldw	r2,-24(fp)
   12d00:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   12d04:	00bfffc4 	movi	r2,-1
   12d08:	00000b06 	br	12d38 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   12d0c:	d0a00e17 	ldw	r2,-32712(gp)
   12d10:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   12d14:	d0e00e17 	ldw	r3,-32712(gp)
   12d18:	e0bfff17 	ldw	r2,-4(fp)
   12d1c:	1885883a 	add	r2,r3,r2
   12d20:	d0a00e15 	stw	r2,-32712(gp)
   12d24:	e0bffb17 	ldw	r2,-20(fp)
   12d28:	e0bffc15 	stw	r2,-16(fp)
   12d2c:	e0bffc17 	ldw	r2,-16(fp)
   12d30:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   12d34:	e0bffd17 	ldw	r2,-12(fp)
} 
   12d38:	e037883a 	mov	sp,fp
   12d3c:	df000017 	ldw	fp,0(sp)
   12d40:	dec00104 	addi	sp,sp,4
   12d44:	f800283a 	ret

00012d48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12d48:	defffe04 	addi	sp,sp,-8
   12d4c:	dfc00115 	stw	ra,4(sp)
   12d50:	df000015 	stw	fp,0(sp)
   12d54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12d58:	d0a00d17 	ldw	r2,-32716(gp)
   12d5c:	10000326 	beq	r2,zero,12d6c <alt_get_errno+0x24>
   12d60:	d0a00d17 	ldw	r2,-32716(gp)
   12d64:	103ee83a 	callr	r2
   12d68:	00000106 	br	12d70 <alt_get_errno+0x28>
   12d6c:	d0a80804 	addi	r2,gp,-24544
}
   12d70:	e037883a 	mov	sp,fp
   12d74:	dfc00117 	ldw	ra,4(sp)
   12d78:	df000017 	ldw	fp,0(sp)
   12d7c:	dec00204 	addi	sp,sp,8
   12d80:	f800283a 	ret

00012d84 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   12d84:	defff904 	addi	sp,sp,-28
   12d88:	dfc00615 	stw	ra,24(sp)
   12d8c:	df000515 	stw	fp,20(sp)
   12d90:	df000504 	addi	fp,sp,20
   12d94:	e13ffd15 	stw	r4,-12(fp)
   12d98:	e17ffe15 	stw	r5,-8(fp)
   12d9c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12da0:	e0bffd17 	ldw	r2,-12(fp)
   12da4:	10000616 	blt	r2,zero,12dc0 <write+0x3c>
   12da8:	e0bffd17 	ldw	r2,-12(fp)
   12dac:	10c00324 	muli	r3,r2,12
   12db0:	008000b4 	movhi	r2,2
   12db4:	1080ae04 	addi	r2,r2,696
   12db8:	1885883a 	add	r2,r3,r2
   12dbc:	00000106 	br	12dc4 <write+0x40>
   12dc0:	0005883a 	mov	r2,zero
   12dc4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   12dc8:	e0bffb17 	ldw	r2,-20(fp)
   12dcc:	10002126 	beq	r2,zero,12e54 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   12dd0:	e0bffb17 	ldw	r2,-20(fp)
   12dd4:	10800217 	ldw	r2,8(r2)
   12dd8:	108000cc 	andi	r2,r2,3
   12ddc:	10001826 	beq	r2,zero,12e40 <write+0xbc>
   12de0:	e0bffb17 	ldw	r2,-20(fp)
   12de4:	10800017 	ldw	r2,0(r2)
   12de8:	10800617 	ldw	r2,24(r2)
   12dec:	10001426 	beq	r2,zero,12e40 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   12df0:	e0bffb17 	ldw	r2,-20(fp)
   12df4:	10800017 	ldw	r2,0(r2)
   12df8:	10800617 	ldw	r2,24(r2)
   12dfc:	e0ffff17 	ldw	r3,-4(fp)
   12e00:	180d883a 	mov	r6,r3
   12e04:	e17ffe17 	ldw	r5,-8(fp)
   12e08:	e13ffb17 	ldw	r4,-20(fp)
   12e0c:	103ee83a 	callr	r2
   12e10:	e0bffc15 	stw	r2,-16(fp)
   12e14:	e0bffc17 	ldw	r2,-16(fp)
   12e18:	1000070e 	bge	r2,zero,12e38 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   12e1c:	0012d480 	call	12d48 <alt_get_errno>
   12e20:	1007883a 	mov	r3,r2
   12e24:	e0bffc17 	ldw	r2,-16(fp)
   12e28:	0085c83a 	sub	r2,zero,r2
   12e2c:	18800015 	stw	r2,0(r3)
        return -1;
   12e30:	00bfffc4 	movi	r2,-1
   12e34:	00000c06 	br	12e68 <write+0xe4>
      }
      return rval;
   12e38:	e0bffc17 	ldw	r2,-16(fp)
   12e3c:	00000a06 	br	12e68 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   12e40:	0012d480 	call	12d48 <alt_get_errno>
   12e44:	1007883a 	mov	r3,r2
   12e48:	00800344 	movi	r2,13
   12e4c:	18800015 	stw	r2,0(r3)
   12e50:	00000406 	br	12e64 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   12e54:	0012d480 	call	12d48 <alt_get_errno>
   12e58:	1007883a 	mov	r3,r2
   12e5c:	00801444 	movi	r2,81
   12e60:	18800015 	stw	r2,0(r3)
  }
  return -1;
   12e64:	00bfffc4 	movi	r2,-1
}
   12e68:	e037883a 	mov	sp,fp
   12e6c:	dfc00117 	ldw	ra,4(sp)
   12e70:	df000017 	ldw	fp,0(sp)
   12e74:	dec00204 	addi	sp,sp,8
   12e78:	f800283a 	ret

00012e7c <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   12e7c:	deffdf04 	addi	sp,sp,-132
   12e80:	dfc02015 	stw	ra,128(sp)
   12e84:	df001f15 	stw	fp,124(sp)
   12e88:	df001f04 	addi	fp,sp,124
   12e8c:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   12e90:	e0bfe204 	addi	r2,fp,-120
   12e94:	100b883a 	mov	r5,r2
   12e98:	01003fc4 	movi	r4,255
   12e9c:	001a2e40 	call	1a2e4 <OSTaskQuery>
   12ea0:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   12ea4:	e0bffe83 	ldbu	r2,-6(fp)
   12ea8:	10803fcc 	andi	r2,r2,255
   12eac:	10001e1e 	bne	r2,zero,12f28 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
   12eb0:	e0bfee83 	ldbu	r2,-70(fp)
   12eb4:	10803fcc 	andi	r2,r2,255
   12eb8:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   12ebc:	d0a80e17 	ldw	r2,-24520(gp)
   12ec0:	e0fffd04 	addi	r3,fp,-12
   12ec4:	180b883a 	mov	r5,r3
   12ec8:	1009883a 	mov	r4,r2
   12ecc:	0018afc0 	call	18afc <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   12ed0:	e0bffe43 	ldbu	r2,-7(fp)
   12ed4:	10803fcc 	andi	r2,r2,255
   12ed8:	10000726 	beq	r2,zero,12ef8 <__env_lock+0x7c>
   12edc:	d0a00f17 	ldw	r2,-32708(gp)
   12ee0:	e0ffe117 	ldw	r3,-124(fp)
   12ee4:	1880041e 	bne	r3,r2,12ef8 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
   12ee8:	d0a80d17 	ldw	r2,-24524(gp)
   12eec:	10800044 	addi	r2,r2,1
   12ef0:	d0a80d15 	stw	r2,-24524(gp)
   12ef4:	00000a06 	br	12f20 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   12ef8:	d0a80e17 	ldw	r2,-24520(gp)
   12efc:	e0fffe84 	addi	r3,fp,-6
   12f00:	180d883a 	mov	r6,r3
   12f04:	000b883a 	mov	r5,zero
   12f08:	1009883a 	mov	r4,r2
   12f0c:	00186740 	call	18674 <OSSemPend>
    locks  = 1;
   12f10:	00800044 	movi	r2,1
   12f14:	d0a80d15 	stw	r2,-24524(gp)
    lockid = id;
   12f18:	e0bfe117 	ldw	r2,-124(fp)
   12f1c:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   12f20:	0001883a 	nop
   12f24:	00000106 	br	12f2c <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   12f28:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   12f2c:	e037883a 	mov	sp,fp
   12f30:	dfc00117 	ldw	ra,4(sp)
   12f34:	df000017 	ldw	fp,0(sp)
   12f38:	dec00204 	addi	sp,sp,8
   12f3c:	f800283a 	ret

00012f40 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   12f40:	defffd04 	addi	sp,sp,-12
   12f44:	dfc00215 	stw	ra,8(sp)
   12f48:	df000115 	stw	fp,4(sp)
   12f4c:	df000104 	addi	fp,sp,4
   12f50:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   12f54:	d0a80d17 	ldw	r2,-24524(gp)
   12f58:	10000b26 	beq	r2,zero,12f88 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   12f5c:	d0a80d17 	ldw	r2,-24524(gp)
   12f60:	10bfffc4 	addi	r2,r2,-1
   12f64:	d0a80d15 	stw	r2,-24524(gp)
   12f68:	d0a80d17 	ldw	r2,-24524(gp)
   12f6c:	1000071e 	bne	r2,zero,12f8c <__env_unlock+0x4c>
  {
    lockid = -1;
   12f70:	00bfffc4 	movi	r2,-1
   12f74:	d0a00f15 	stw	r2,-32708(gp)
    OSSemPost( alt_envsem );
   12f78:	d0a80e17 	ldw	r2,-24520(gp)
   12f7c:	1009883a 	mov	r4,r2
   12f80:	00189ec0 	call	189ec <OSSemPost>
   12f84:	00000106 	br	12f8c <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
   12f88:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   12f8c:	e037883a 	mov	sp,fp
   12f90:	dfc00117 	ldw	ra,4(sp)
   12f94:	df000017 	ldw	fp,0(sp)
   12f98:	dec00204 	addi	sp,sp,8
   12f9c:	f800283a 	ret

00012fa0 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   12fa0:	deffdb04 	addi	sp,sp,-148
   12fa4:	dfc02415 	stw	ra,144(sp)
   12fa8:	df002315 	stw	fp,140(sp)
   12fac:	df002304 	addi	fp,sp,140
   12fb0:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12fb4:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   12fb8:	d0a81143 	ldbu	r2,-24507(gp)
   12fbc:	10803fcc 	andi	r2,r2,255
   12fc0:	10800060 	cmpeqi	r2,r2,1
   12fc4:	10003626 	beq	r2,zero,130a0 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   12fc8:	e0bfe204 	addi	r2,fp,-120
   12fcc:	100b883a 	mov	r5,r2
   12fd0:	01003fc4 	movi	r4,255
   12fd4:	001a2e40 	call	1a2e4 <OSTaskQuery>
   12fd8:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   12fdc:	e0bffe83 	ldbu	r2,-6(fp)
   12fe0:	10803fcc 	andi	r2,r2,255
   12fe4:	1000301e 	bne	r2,zero,130a8 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
   12fe8:	e0bfee83 	ldbu	r2,-70(fp)
   12fec:	10803fcc 	andi	r2,r2,255
   12ff0:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   12ff4:	d0a81017 	ldw	r2,-24512(gp)
   12ff8:	e0fffd04 	addi	r3,fp,-12
   12ffc:	180b883a 	mov	r5,r3
   13000:	1009883a 	mov	r4,r2
   13004:	0018afc0 	call	18afc <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13008:	0005303a 	rdctl	r2,status
   1300c:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13010:	e0ffe117 	ldw	r3,-124(fp)
   13014:	00bfff84 	movi	r2,-2
   13018:	1884703a 	and	r2,r3,r2
   1301c:	1001703a 	wrctl	status,r2
  
  return context;
   13020:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
   13024:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   13028:	e0bffd0b 	ldhu	r2,-12(fp)
   1302c:	10bfffcc 	andi	r2,r2,65535
   13030:	10000b1e 	bne	r2,zero,13060 <__malloc_lock+0xc0>
   13034:	d0a01017 	ldw	r2,-32704(gp)
   13038:	e0ffde17 	ldw	r3,-136(fp)
   1303c:	1880081e 	bne	r3,r2,13060 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
   13040:	d0a80f17 	ldw	r2,-24516(gp)
   13044:	10800044 	addi	r2,r2,1
   13048:	d0a80f15 	stw	r2,-24516(gp)
   1304c:	e0bfdd17 	ldw	r2,-140(fp)
   13050:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13054:	e0bfdf17 	ldw	r2,-132(fp)
   13058:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   1305c:	00000e06 	br	13098 <__malloc_lock+0xf8>
   13060:	e0bfdd17 	ldw	r2,-140(fp)
   13064:	e0bfe015 	stw	r2,-128(fp)
   13068:	e0bfe017 	ldw	r2,-128(fp)
   1306c:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   13070:	d0a81017 	ldw	r2,-24512(gp)
   13074:	e0fffe84 	addi	r3,fp,-6
   13078:	180d883a 	mov	r6,r3
   1307c:	000b883a 	mov	r5,zero
   13080:	1009883a 	mov	r4,r2
   13084:	00186740 	call	18674 <OSSemPend>
    locks  = 1;
   13088:	00800044 	movi	r2,1
   1308c:	d0a80f15 	stw	r2,-24516(gp)
    lockid = id;
   13090:	e0bfde17 	ldw	r2,-136(fp)
   13094:	d0a01015 	stw	r2,-32704(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   13098:	0001883a 	nop
   1309c:	00000306 	br	130ac <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
   130a0:	0001883a 	nop
   130a4:	00000106 	br	130ac <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   130a8:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   130ac:	e037883a 	mov	sp,fp
   130b0:	dfc00117 	ldw	ra,4(sp)
   130b4:	df000017 	ldw	fp,0(sp)
   130b8:	dec00204 	addi	sp,sp,8
   130bc:	f800283a 	ret

000130c0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   130c0:	defff804 	addi	sp,sp,-32
   130c4:	dfc00715 	stw	ra,28(sp)
   130c8:	df000615 	stw	fp,24(sp)
   130cc:	df000604 	addi	fp,sp,24
   130d0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   130d4:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   130d8:	d0a81143 	ldbu	r2,-24507(gp)
   130dc:	10803fcc 	andi	r2,r2,255
   130e0:	10800060 	cmpeqi	r2,r2,1
   130e4:	10002326 	beq	r2,zero,13174 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   130e8:	0005303a 	rdctl	r2,status
   130ec:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   130f0:	e0fffe17 	ldw	r3,-8(fp)
   130f4:	00bfff84 	movi	r2,-2
   130f8:	1884703a 	and	r2,r3,r2
   130fc:	1001703a 	wrctl	status,r2
  
  return context;
   13100:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
   13104:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   13108:	d0a80f17 	ldw	r2,-24516(gp)
   1310c:	1000051e 	bne	r2,zero,13124 <__malloc_unlock+0x64>
   13110:	e0bffa17 	ldw	r2,-24(fp)
   13114:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13118:	e0bffb17 	ldw	r2,-20(fp)
   1311c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   13120:	00001506 	br	13178 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   13124:	d0a80f17 	ldw	r2,-24516(gp)
   13128:	10bfffc4 	addi	r2,r2,-1
   1312c:	d0a80f15 	stw	r2,-24516(gp)
   13130:	d0a80f17 	ldw	r2,-24516(gp)
   13134:	10000a1e 	bne	r2,zero,13160 <__malloc_unlock+0xa0>
  {
    lockid = -1;
   13138:	00bfffc4 	movi	r2,-1
   1313c:	d0a01015 	stw	r2,-32704(gp)
   13140:	e0bffa17 	ldw	r2,-24(fp)
   13144:	e0bffc15 	stw	r2,-16(fp)
   13148:	e0bffc17 	ldw	r2,-16(fp)
   1314c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   13150:	d0a81017 	ldw	r2,-24512(gp)
   13154:	1009883a 	mov	r4,r2
   13158:	00189ec0 	call	189ec <OSSemPost>
   1315c:	00000606 	br	13178 <__malloc_unlock+0xb8>
   13160:	e0bffa17 	ldw	r2,-24(fp)
   13164:	e0bffd15 	stw	r2,-12(fp)
   13168:	e0bffd17 	ldw	r2,-12(fp)
   1316c:	1001703a 	wrctl	status,r2
   13170:	00000106 	br	13178 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
   13174:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   13178:	e037883a 	mov	sp,fp
   1317c:	dfc00117 	ldw	ra,4(sp)
   13180:	df000017 	ldw	fp,0(sp)
   13184:	dec00204 	addi	sp,sp,8
   13188:	f800283a 	ret

0001318c <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   1318c:	defff704 	addi	sp,sp,-36
   13190:	dfc00815 	stw	ra,32(sp)
   13194:	df000715 	stw	fp,28(sp)
   13198:	df000704 	addi	fp,sp,28
   1319c:	e13ffd15 	stw	r4,-12(fp)
   131a0:	e17ffe15 	stw	r5,-8(fp)
   131a4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   131a8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   131ac:	e0bfff17 	ldw	r2,-4(fp)
   131b0:	1000021e 	bne	r2,zero,131bc <OSEventNameGet+0x30>
        return (0);
   131b4:	0005883a 	mov	r2,zero
   131b8:	00003706 	br	13298 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   131bc:	e0bffd17 	ldw	r2,-12(fp)
   131c0:	1000051e 	bne	r2,zero,131d8 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   131c4:	e0bfff17 	ldw	r2,-4(fp)
   131c8:	00c00104 	movi	r3,4
   131cc:	10c00005 	stb	r3,0(r2)
        return (0);
   131d0:	0005883a 	mov	r2,zero
   131d4:	00003006 	br	13298 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   131d8:	e0bffe17 	ldw	r2,-8(fp)
   131dc:	1000051e 	bne	r2,zero,131f4 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   131e0:	e0bfff17 	ldw	r2,-4(fp)
   131e4:	00c00304 	movi	r3,12
   131e8:	10c00005 	stb	r3,0(r2)
        return (0);
   131ec:	0005883a 	mov	r2,zero
   131f0:	00002906 	br	13298 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   131f4:	d0a81f03 	ldbu	r2,-24452(gp)
   131f8:	10803fcc 	andi	r2,r2,255
   131fc:	10000526 	beq	r2,zero,13214 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   13200:	e0bfff17 	ldw	r2,-4(fp)
   13204:	00c00444 	movi	r3,17
   13208:	10c00005 	stb	r3,0(r2)
        return (0);
   1320c:	0005883a 	mov	r2,zero
   13210:	00002106 	br	13298 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   13214:	e0bffd17 	ldw	r2,-12(fp)
   13218:	10800003 	ldbu	r2,0(r2)
   1321c:	10803fcc 	andi	r2,r2,255
   13220:	10bfffc4 	addi	r2,r2,-1
   13224:	10800128 	cmpgeui	r2,r2,4
   13228:	10000526 	beq	r2,zero,13240 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   1322c:	e0bfff17 	ldw	r2,-4(fp)
   13230:	00c00044 	movi	r3,1
   13234:	10c00005 	stb	r3,0(r2)
             return (0);
   13238:	0005883a 	mov	r2,zero
   1323c:	00001606 	br	13298 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   13240:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13244:	0005303a 	rdctl	r2,status
   13248:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1324c:	e0fffb17 	ldw	r3,-20(fp)
   13250:	00bfff84 	movi	r2,-2
   13254:	1884703a 	and	r2,r3,r2
   13258:	1001703a 	wrctl	status,r2
  
  return context;
   1325c:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   13260:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   13264:	e0bffd17 	ldw	r2,-12(fp)
   13268:	10800384 	addi	r2,r2,14
   1326c:	100b883a 	mov	r5,r2
   13270:	e13ffe17 	ldw	r4,-8(fp)
   13274:	0014c100 	call	14c10 <OS_StrCopy>
   13278:	e0bffa05 	stb	r2,-24(fp)
   1327c:	e0bff917 	ldw	r2,-28(fp)
   13280:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13284:	e0bffc17 	ldw	r2,-16(fp)
   13288:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1328c:	e0bfff17 	ldw	r2,-4(fp)
   13290:	10000005 	stb	zero,0(r2)
    return (len);
   13294:	e0bffa03 	ldbu	r2,-24(fp)
}
   13298:	e037883a 	mov	sp,fp
   1329c:	dfc00117 	ldw	ra,4(sp)
   132a0:	df000017 	ldw	fp,0(sp)
   132a4:	dec00204 	addi	sp,sp,8
   132a8:	f800283a 	ret

000132ac <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   132ac:	defff604 	addi	sp,sp,-40
   132b0:	dfc00915 	stw	ra,36(sp)
   132b4:	df000815 	stw	fp,32(sp)
   132b8:	df000804 	addi	fp,sp,32
   132bc:	e13ffd15 	stw	r4,-12(fp)
   132c0:	e17ffe15 	stw	r5,-8(fp)
   132c4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   132c8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   132cc:	e0bfff17 	ldw	r2,-4(fp)
   132d0:	10004026 	beq	r2,zero,133d4 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   132d4:	e0bffd17 	ldw	r2,-12(fp)
   132d8:	1000041e 	bne	r2,zero,132ec <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   132dc:	e0bfff17 	ldw	r2,-4(fp)
   132e0:	00c00104 	movi	r3,4
   132e4:	10c00005 	stb	r3,0(r2)
        return;
   132e8:	00003b06 	br	133d8 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   132ec:	e0bffe17 	ldw	r2,-8(fp)
   132f0:	1000041e 	bne	r2,zero,13304 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   132f4:	e0bfff17 	ldw	r2,-4(fp)
   132f8:	00c00304 	movi	r3,12
   132fc:	10c00005 	stb	r3,0(r2)
        return;
   13300:	00003506 	br	133d8 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   13304:	d0a81f03 	ldbu	r2,-24452(gp)
   13308:	10803fcc 	andi	r2,r2,255
   1330c:	10000426 	beq	r2,zero,13320 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   13310:	e0bfff17 	ldw	r2,-4(fp)
   13314:	00c00484 	movi	r3,18
   13318:	10c00005 	stb	r3,0(r2)
        return;
   1331c:	00002e06 	br	133d8 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
   13320:	e0bffd17 	ldw	r2,-12(fp)
   13324:	10800003 	ldbu	r2,0(r2)
   13328:	10803fcc 	andi	r2,r2,255
   1332c:	10bfffc4 	addi	r2,r2,-1
   13330:	10800128 	cmpgeui	r2,r2,4
   13334:	10000426 	beq	r2,zero,13348 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   13338:	e0bfff17 	ldw	r2,-4(fp)
   1333c:	00c00044 	movi	r3,1
   13340:	10c00005 	stb	r3,0(r2)
             return;
   13344:	00002406 	br	133d8 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   13348:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1334c:	0005303a 	rdctl	r2,status
   13350:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13354:	e0fffc17 	ldw	r3,-16(fp)
   13358:	00bfff84 	movi	r2,-2
   1335c:	1884703a 	and	r2,r3,r2
   13360:	1001703a 	wrctl	status,r2
  
  return context;
   13364:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   13368:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   1336c:	e13ffe17 	ldw	r4,-8(fp)
   13370:	0014c840 	call	14c84 <OS_StrLen>
   13374:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   13378:	e0bffa03 	ldbu	r2,-24(fp)
   1337c:	10800830 	cmpltui	r2,r2,32
   13380:	1000081e 	bne	r2,zero,133a4 <OSEventNameSet+0xf8>
   13384:	e0bff817 	ldw	r2,-32(fp)
   13388:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1338c:	e0bff917 	ldw	r2,-28(fp)
   13390:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   13394:	e0bfff17 	ldw	r2,-4(fp)
   13398:	00c002c4 	movi	r3,11
   1339c:	10c00005 	stb	r3,0(r2)
        return;
   133a0:	00000d06 	br	133d8 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   133a4:	e0bffd17 	ldw	r2,-12(fp)
   133a8:	10800384 	addi	r2,r2,14
   133ac:	e17ffe17 	ldw	r5,-8(fp)
   133b0:	1009883a 	mov	r4,r2
   133b4:	0014c100 	call	14c10 <OS_StrCopy>
   133b8:	e0bff817 	ldw	r2,-32(fp)
   133bc:	e0bffb15 	stw	r2,-20(fp)
   133c0:	e0bffb17 	ldw	r2,-20(fp)
   133c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   133c8:	e0bfff17 	ldw	r2,-4(fp)
   133cc:	10000005 	stb	zero,0(r2)
   133d0:	00000106 	br	133d8 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   133d4:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   133d8:	e037883a 	mov	sp,fp
   133dc:	dfc00117 	ldw	ra,4(sp)
   133e0:	df000017 	ldw	fp,0(sp)
   133e4:	dec00204 	addi	sp,sp,8
   133e8:	f800283a 	ret

000133ec <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   133ec:	deffed04 	addi	sp,sp,-76
   133f0:	dfc01215 	stw	ra,72(sp)
   133f4:	df001115 	stw	fp,68(sp)
   133f8:	df001104 	addi	fp,sp,68
   133fc:	e13ffc15 	stw	r4,-16(fp)
   13400:	e17ffd15 	stw	r5,-12(fp)
   13404:	e1bffe15 	stw	r6,-8(fp)
   13408:	3805883a 	mov	r2,r7
   1340c:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   13410:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   13414:	e0800217 	ldw	r2,8(fp)
   13418:	1000021e 	bne	r2,zero,13424 <OSEventPendMulti+0x38>
        return (0);
   1341c:	0005883a 	mov	r2,zero
   13420:	00017106 	br	139e8 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   13424:	e0bffc17 	ldw	r2,-16(fp)
   13428:	1000051e 	bne	r2,zero,13440 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   1342c:	e0800217 	ldw	r2,8(fp)
   13430:	00c00104 	movi	r3,4
   13434:	10c00005 	stb	r3,0(r2)
        return (0);
   13438:	0005883a 	mov	r2,zero
   1343c:	00016a06 	br	139e8 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   13440:	e0bffd17 	ldw	r2,-12(fp)
   13444:	1000051e 	bne	r2,zero,1345c <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   13448:	e0800217 	ldw	r2,8(fp)
   1344c:	00c00104 	movi	r3,4
   13450:	10c00005 	stb	r3,0(r2)
        return (0);
   13454:	0005883a 	mov	r2,zero
   13458:	00016306 	br	139e8 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   1345c:	e0bffe17 	ldw	r2,-8(fp)
   13460:	1000051e 	bne	r2,zero,13478 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   13464:	e0800217 	ldw	r2,8(fp)
   13468:	00c00104 	movi	r3,4
   1346c:	10c00005 	stb	r3,0(r2)
        return (0);
   13470:	0005883a 	mov	r2,zero
   13474:	00015c06 	br	139e8 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   13478:	e0bffd17 	ldw	r2,-12(fp)
   1347c:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   13480:	e0bffc17 	ldw	r2,-16(fp)
   13484:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   13488:	e0bfef17 	ldw	r2,-68(fp)
   1348c:	10800017 	ldw	r2,0(r2)
   13490:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   13494:	00001906 	br	134fc <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   13498:	e0bff017 	ldw	r2,-64(fp)
   1349c:	10800003 	ldbu	r2,0(r2)
   134a0:	10803fcc 	andi	r2,r2,255
   134a4:	10c000a0 	cmpeqi	r3,r2,2
   134a8:	1800091e 	bne	r3,zero,134d0 <OSEventPendMulti+0xe4>
   134ac:	10c000e0 	cmpeqi	r3,r2,3
   134b0:	1800091e 	bne	r3,zero,134d8 <OSEventPendMulti+0xec>
   134b4:	10800060 	cmpeqi	r2,r2,1
   134b8:	1000091e 	bne	r2,zero,134e0 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   134bc:	e0800217 	ldw	r2,8(fp)
   134c0:	00c00044 	movi	r3,1
   134c4:	10c00005 	stb	r3,0(r2)
                 return (0);
   134c8:	0005883a 	mov	r2,zero
   134cc:	00014606 	br	139e8 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   134d0:	0001883a 	nop
   134d4:	00000306 	br	134e4 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   134d8:	0001883a 	nop
   134dc:	00000106 	br	134e4 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   134e0:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   134e4:	e0bfef17 	ldw	r2,-68(fp)
   134e8:	10800104 	addi	r2,r2,4
   134ec:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   134f0:	e0bfef17 	ldw	r2,-68(fp)
   134f4:	10800017 	ldw	r2,0(r2)
   134f8:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   134fc:	e0bff017 	ldw	r2,-64(fp)
   13500:	103fe51e 	bne	r2,zero,13498 <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   13504:	d0a81f03 	ldbu	r2,-24452(gp)
   13508:	10803fcc 	andi	r2,r2,255
   1350c:	10000526 	beq	r2,zero,13524 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   13510:	e0800217 	ldw	r2,8(fp)
   13514:	00c00084 	movi	r3,2
   13518:	10c00005 	stb	r3,0(r2)
        return (0);
   1351c:	0005883a 	mov	r2,zero
   13520:	00013106 	br	139e8 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   13524:	d0a81103 	ldbu	r2,-24508(gp)
   13528:	10803fcc 	andi	r2,r2,255
   1352c:	10000526 	beq	r2,zero,13544 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   13530:	e0800217 	ldw	r2,8(fp)
   13534:	00c00344 	movi	r3,13
   13538:	10c00005 	stb	r3,0(r2)
        return (0);
   1353c:	0005883a 	mov	r2,zero
   13540:	00012906 	br	139e8 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13544:	0005303a 	rdctl	r2,status
   13548:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1354c:	e0fffb17 	ldw	r3,-20(fp)
   13550:	00bfff84 	movi	r2,-2
   13554:	1884703a 	and	r2,r3,r2
   13558:	1001703a 	wrctl	status,r2
  
  return context;
   1355c:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   13560:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   13564:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   13568:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   1356c:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   13570:	e0bffc17 	ldw	r2,-16(fp)
   13574:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   13578:	e0bfef17 	ldw	r2,-68(fp)
   1357c:	10800017 	ldw	r2,0(r2)
   13580:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   13584:	00008106 	br	1378c <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   13588:	e0bff017 	ldw	r2,-64(fp)
   1358c:	10800003 	ldbu	r2,0(r2)
   13590:	10803fcc 	andi	r2,r2,255
   13594:	10c000a0 	cmpeqi	r3,r2,2
   13598:	18003c1e 	bne	r3,zero,1368c <OSEventPendMulti+0x2a0>
   1359c:	10c000e0 	cmpeqi	r3,r2,3
   135a0:	1800031e 	bne	r3,zero,135b0 <OSEventPendMulti+0x1c4>
   135a4:	10800060 	cmpeqi	r2,r2,1
   135a8:	10001e1e 	bne	r2,zero,13624 <OSEventPendMulti+0x238>
   135ac:	00006606 	br	13748 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   135b0:	e0bff017 	ldw	r2,-64(fp)
   135b4:	1080020b 	ldhu	r2,8(r2)
   135b8:	10bfffcc 	andi	r2,r2,65535
   135bc:	10001526 	beq	r2,zero,13614 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   135c0:	e0bff017 	ldw	r2,-64(fp)
   135c4:	1080020b 	ldhu	r2,8(r2)
   135c8:	10bfffc4 	addi	r2,r2,-1
   135cc:	1007883a 	mov	r3,r2
   135d0:	e0bff017 	ldw	r2,-64(fp)
   135d4:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   135d8:	e0bffd17 	ldw	r2,-12(fp)
   135dc:	10c00104 	addi	r3,r2,4
   135e0:	e0fffd15 	stw	r3,-12(fp)
   135e4:	e0fff017 	ldw	r3,-64(fp)
   135e8:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   135ec:	00800044 	movi	r2,1
   135f0:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   135f4:	e0bffe17 	ldw	r2,-8(fp)
   135f8:	10c00104 	addi	r3,r2,4
   135fc:	e0fffe15 	stw	r3,-8(fp)
   13600:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   13604:	e0bff18b 	ldhu	r2,-58(fp)
   13608:	10800044 	addi	r2,r2,1
   1360c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   13610:	00005806 	br	13774 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   13614:	e0bff203 	ldbu	r2,-56(fp)
   13618:	10800054 	ori	r2,r2,1
   1361c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   13620:	00005406 	br	13774 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   13624:	e0bff017 	ldw	r2,-64(fp)
   13628:	10800117 	ldw	r2,4(r2)
   1362c:	10001326 	beq	r2,zero,1367c <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   13630:	e0bffe17 	ldw	r2,-8(fp)
   13634:	10c00104 	addi	r3,r2,4
   13638:	e0fffe15 	stw	r3,-8(fp)
   1363c:	e0fff017 	ldw	r3,-64(fp)
   13640:	18c00117 	ldw	r3,4(r3)
   13644:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   13648:	e0bff017 	ldw	r2,-64(fp)
   1364c:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   13650:	e0bffd17 	ldw	r2,-12(fp)
   13654:	10c00104 	addi	r3,r2,4
   13658:	e0fffd15 	stw	r3,-12(fp)
   1365c:	e0fff017 	ldw	r3,-64(fp)
   13660:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   13664:	00800044 	movi	r2,1
   13668:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   1366c:	e0bff18b 	ldhu	r2,-58(fp)
   13670:	10800044 	addi	r2,r2,1
   13674:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   13678:	00003e06 	br	13774 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   1367c:	e0bff203 	ldbu	r2,-56(fp)
   13680:	10800094 	ori	r2,r2,2
   13684:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   13688:	00003a06 	br	13774 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   1368c:	e0bff017 	ldw	r2,-64(fp)
   13690:	10800117 	ldw	r2,4(r2)
   13694:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   13698:	e0bff517 	ldw	r2,-44(fp)
   1369c:	1080058b 	ldhu	r2,22(r2)
   136a0:	10bfffcc 	andi	r2,r2,65535
   136a4:	10002426 	beq	r2,zero,13738 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   136a8:	e0bffe17 	ldw	r2,-8(fp)
   136ac:	10c00104 	addi	r3,r2,4
   136b0:	e0fffe15 	stw	r3,-8(fp)
   136b4:	e0fff517 	ldw	r3,-44(fp)
   136b8:	18c00417 	ldw	r3,16(r3)
   136bc:	19400104 	addi	r5,r3,4
   136c0:	e13ff517 	ldw	r4,-44(fp)
   136c4:	21400415 	stw	r5,16(r4)
   136c8:	18c00017 	ldw	r3,0(r3)
   136cc:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   136d0:	e0bff517 	ldw	r2,-44(fp)
   136d4:	10c00417 	ldw	r3,16(r2)
   136d8:	e0bff517 	ldw	r2,-44(fp)
   136dc:	10800217 	ldw	r2,8(r2)
   136e0:	1880041e 	bne	r3,r2,136f4 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   136e4:	e0bff517 	ldw	r2,-44(fp)
   136e8:	10c00117 	ldw	r3,4(r2)
   136ec:	e0bff517 	ldw	r2,-44(fp)
   136f0:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   136f4:	e0bff517 	ldw	r2,-44(fp)
   136f8:	1080058b 	ldhu	r2,22(r2)
   136fc:	10bfffc4 	addi	r2,r2,-1
   13700:	1007883a 	mov	r3,r2
   13704:	e0bff517 	ldw	r2,-44(fp)
   13708:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   1370c:	e0bffd17 	ldw	r2,-12(fp)
   13710:	10c00104 	addi	r3,r2,4
   13714:	e0fffd15 	stw	r3,-12(fp)
   13718:	e0fff017 	ldw	r3,-64(fp)
   1371c:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   13720:	00800044 	movi	r2,1
   13724:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   13728:	e0bff18b 	ldhu	r2,-58(fp)
   1372c:	10800044 	addi	r2,r2,1
   13730:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   13734:	00000f06 	br	13774 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   13738:	e0bff203 	ldbu	r2,-56(fp)
   1373c:	10800114 	ori	r2,r2,4
   13740:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   13744:	00000b06 	br	13774 <OSEventPendMulti+0x388>
   13748:	e0bff317 	ldw	r2,-52(fp)
   1374c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13750:	e0bff417 	ldw	r2,-48(fp)
   13754:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   13758:	e0bffd17 	ldw	r2,-12(fp)
   1375c:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   13760:	e0800217 	ldw	r2,8(fp)
   13764:	00c00044 	movi	r3,1
   13768:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   1376c:	e0bff18b 	ldhu	r2,-58(fp)
   13770:	00009d06 	br	139e8 <OSEventPendMulti+0x5fc>
        }
        pevents++;
   13774:	e0bfef17 	ldw	r2,-68(fp)
   13778:	10800104 	addi	r2,r2,4
   1377c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   13780:	e0bfef17 	ldw	r2,-68(fp)
   13784:	10800017 	ldw	r2,0(r2)
   13788:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   1378c:	e0bff017 	ldw	r2,-64(fp)
   13790:	103f7d1e 	bne	r2,zero,13588 <OSEventPendMulti+0x19c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   13794:	e0bff103 	ldbu	r2,-60(fp)
   13798:	10800058 	cmpnei	r2,r2,1
   1379c:	10000a1e 	bne	r2,zero,137c8 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   137a0:	e0bffd17 	ldw	r2,-12(fp)
   137a4:	10000015 	stw	zero,0(r2)
   137a8:	e0bff317 	ldw	r2,-52(fp)
   137ac:	e0bff615 	stw	r2,-40(fp)
   137b0:	e0bff617 	ldw	r2,-40(fp)
   137b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   137b8:	e0800217 	ldw	r2,8(fp)
   137bc:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   137c0:	e0bff18b 	ldhu	r2,-58(fp)
   137c4:	00008806 	br	139e8 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   137c8:	d0a82017 	ldw	r2,-24448(gp)
   137cc:	d0e82017 	ldw	r3,-24448(gp)
   137d0:	19000c03 	ldbu	r4,48(r3)
   137d4:	e0fff203 	ldbu	r3,-56(fp)
   137d8:	20c6b03a 	or	r3,r4,r3
   137dc:	1809883a 	mov	r4,r3
   137e0:	00ffe004 	movi	r3,-128
   137e4:	20c6b03a 	or	r3,r4,r3
   137e8:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   137ec:	d0a82017 	ldw	r2,-24448(gp)
   137f0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   137f4:	d0a82017 	ldw	r2,-24448(gp)
   137f8:	e0ffff0b 	ldhu	r3,-4(fp)
   137fc:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   13800:	e13ffc17 	ldw	r4,-16(fp)
   13804:	00143280 	call	14328 <OS_EventTaskWaitMulti>
   13808:	e0bff317 	ldw	r2,-52(fp)
   1380c:	e0bff915 	stw	r2,-28(fp)
   13810:	e0bff917 	ldw	r2,-28(fp)
   13814:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   13818:	0014acc0 	call	14acc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1381c:	0005303a 	rdctl	r2,status
   13820:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13824:	e0fff717 	ldw	r3,-36(fp)
   13828:	00bfff84 	movi	r2,-2
   1382c:	1884703a 	and	r2,r3,r2
   13830:	1001703a 	wrctl	status,r2
  
  return context;
   13834:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   13838:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   1383c:	d0a82017 	ldw	r2,-24448(gp)
   13840:	10800c43 	ldbu	r2,49(r2)
   13844:	10803fcc 	andi	r2,r2,255
   13848:	10000226 	beq	r2,zero,13854 <OSEventPendMulti+0x468>
   1384c:	108000a0 	cmpeqi	r2,r2,2
   13850:	10001826 	beq	r2,zero,138b4 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   13854:	d0a82017 	ldw	r2,-24448(gp)
   13858:	10800717 	ldw	r2,28(r2)
   1385c:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   13860:	e0bff017 	ldw	r2,-64(fp)
   13864:	10000b26 	beq	r2,zero,13894 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   13868:	e0bffd17 	ldw	r2,-12(fp)
   1386c:	10c00104 	addi	r3,r2,4
   13870:	e0fffd15 	stw	r3,-12(fp)
   13874:	e0fff017 	ldw	r3,-64(fp)
   13878:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   1387c:	e0bffd17 	ldw	r2,-12(fp)
   13880:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   13884:	e0bff18b 	ldhu	r2,-58(fp)
   13888:	10800044 	addi	r2,r2,1
   1388c:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   13890:	00000d06 	br	138c8 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   13894:	d0a82017 	ldw	r2,-24448(gp)
   13898:	00c00044 	movi	r3,1
   1389c:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   138a0:	d0a82017 	ldw	r2,-24448(gp)
   138a4:	e17ffc17 	ldw	r5,-16(fp)
   138a8:	1009883a 	mov	r4,r2
   138ac:	00145300 	call	14530 <OS_EventTaskRemoveMulti>
             }
			 break;
   138b0:	00000506 	br	138c8 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   138b4:	d0a82017 	ldw	r2,-24448(gp)
   138b8:	e17ffc17 	ldw	r5,-16(fp)
   138bc:	1009883a 	mov	r4,r2
   138c0:	00145300 	call	14530 <OS_EventTaskRemoveMulti>
             break;
   138c4:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   138c8:	d0a82017 	ldw	r2,-24448(gp)
   138cc:	10800c43 	ldbu	r2,49(r2)
   138d0:	10803fcc 	andi	r2,r2,255
   138d4:	10000326 	beq	r2,zero,138e4 <OSEventPendMulti+0x4f8>
   138d8:	108000a0 	cmpeqi	r2,r2,2
   138dc:	1000231e 	bne	r2,zero,1396c <OSEventPendMulti+0x580>
   138e0:	00002a06 	br	1398c <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   138e4:	e0bff017 	ldw	r2,-64(fp)
   138e8:	10800003 	ldbu	r2,0(r2)
   138ec:	10803fcc 	andi	r2,r2,255
   138f0:	0080100e 	bge	zero,r2,13934 <OSEventPendMulti+0x548>
   138f4:	10c000d0 	cmplti	r3,r2,3
   138f8:	1800071e 	bne	r3,zero,13918 <OSEventPendMulti+0x52c>
   138fc:	108000e0 	cmpeqi	r2,r2,3
   13900:	10000c26 	beq	r2,zero,13934 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   13904:	e0bffe17 	ldw	r2,-8(fp)
   13908:	10c00104 	addi	r3,r2,4
   1390c:	e0fffe15 	stw	r3,-8(fp)
   13910:	10000015 	stw	zero,0(r2)
                      break;
   13914:	00001206 	br	13960 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   13918:	e0bffe17 	ldw	r2,-8(fp)
   1391c:	10c00104 	addi	r3,r2,4
   13920:	e0fffe15 	stw	r3,-8(fp)
   13924:	d0e82017 	ldw	r3,-24448(gp)
   13928:	18c00917 	ldw	r3,36(r3)
   1392c:	10c00015 	stw	r3,0(r2)
                      break;
   13930:	00000b06 	br	13960 <OSEventPendMulti+0x574>
   13934:	e0bff317 	ldw	r2,-52(fp)
   13938:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1393c:	e0bff817 	ldw	r2,-32(fp)
   13940:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   13944:	e0bffd17 	ldw	r2,-12(fp)
   13948:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   1394c:	e0800217 	ldw	r2,8(fp)
   13950:	00c00044 	movi	r3,1
   13954:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   13958:	e0bff18b 	ldhu	r2,-58(fp)
   1395c:	00002206 	br	139e8 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   13960:	e0800217 	ldw	r2,8(fp)
   13964:	10000005 	stb	zero,0(r2)
             break;
   13968:	00001006 	br	139ac <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   1396c:	e0bffe17 	ldw	r2,-8(fp)
   13970:	10c00104 	addi	r3,r2,4
   13974:	e0fffe15 	stw	r3,-8(fp)
   13978:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   1397c:	e0800217 	ldw	r2,8(fp)
   13980:	00c00384 	movi	r3,14
   13984:	10c00005 	stb	r3,0(r2)
             break;
   13988:	00000806 	br	139ac <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   1398c:	e0bffe17 	ldw	r2,-8(fp)
   13990:	10c00104 	addi	r3,r2,4
   13994:	e0fffe15 	stw	r3,-8(fp)
   13998:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   1399c:	e0800217 	ldw	r2,8(fp)
   139a0:	00c00284 	movi	r3,10
   139a4:	10c00005 	stb	r3,0(r2)
             break;
   139a8:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   139ac:	d0a82017 	ldw	r2,-24448(gp)
   139b0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   139b4:	d0a82017 	ldw	r2,-24448(gp)
   139b8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   139bc:	d0a82017 	ldw	r2,-24448(gp)
   139c0:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   139c4:	d0a82017 	ldw	r2,-24448(gp)
   139c8:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   139cc:	d0a82017 	ldw	r2,-24448(gp)
   139d0:	10000915 	stw	zero,36(r2)
   139d4:	e0bff317 	ldw	r2,-52(fp)
   139d8:	e0bffa15 	stw	r2,-24(fp)
   139dc:	e0bffa17 	ldw	r2,-24(fp)
   139e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   139e4:	e0bff18b 	ldhu	r2,-58(fp)
}
   139e8:	e037883a 	mov	sp,fp
   139ec:	dfc00117 	ldw	ra,4(sp)
   139f0:	df000017 	ldw	fp,0(sp)
   139f4:	dec00204 	addi	sp,sp,8
   139f8:	f800283a 	ret

000139fc <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   139fc:	defffe04 	addi	sp,sp,-8
   13a00:	dfc00115 	stw	ra,4(sp)
   13a04:	df000015 	stw	fp,0(sp)
   13a08:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   13a0c:	001e1780 	call	1e178 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   13a10:	00147780 	call	14778 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   13a14:	00147c00 	call	147c0 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   13a18:	001492c0 	call	1492c <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   13a1c:	00146980 	call	14698 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   13a20:	00167dc0 	call	167dc <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   13a24:	00170dc0 	call	170dc <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   13a28:	00182040 	call	18204 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   13a2c:	001482c0 	call	1482c <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   13a30:	00148ac0 	call	148ac <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   13a34:	001e1980 	call	1e198 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   13a38:	00151b00 	call	151b0 <OSDebugInit>
#endif
}
   13a3c:	0001883a 	nop
   13a40:	e037883a 	mov	sp,fp
   13a44:	dfc00117 	ldw	ra,4(sp)
   13a48:	df000017 	ldw	fp,0(sp)
   13a4c:	dec00204 	addi	sp,sp,8
   13a50:	f800283a 	ret

00013a54 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   13a54:	deffff04 	addi	sp,sp,-4
   13a58:	df000015 	stw	fp,0(sp)
   13a5c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
   13a60:	d0a81143 	ldbu	r2,-24507(gp)
   13a64:	10803fcc 	andi	r2,r2,255
   13a68:	10800058 	cmpnei	r2,r2,1
   13a6c:	1000071e 	bne	r2,zero,13a8c <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
   13a70:	d0a81f03 	ldbu	r2,-24452(gp)
   13a74:	10803fcc 	andi	r2,r2,255
   13a78:	10803fe0 	cmpeqi	r2,r2,255
   13a7c:	1000031e 	bne	r2,zero,13a8c <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   13a80:	d0a81f03 	ldbu	r2,-24452(gp)
   13a84:	10800044 	addi	r2,r2,1
   13a88:	d0a81f05 	stb	r2,-24452(gp)
        }
    }
}
   13a8c:	0001883a 	nop
   13a90:	e037883a 	mov	sp,fp
   13a94:	df000017 	ldw	fp,0(sp)
   13a98:	dec00104 	addi	sp,sp,4
   13a9c:	f800283a 	ret

00013aa0 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   13aa0:	defffb04 	addi	sp,sp,-20
   13aa4:	dfc00415 	stw	ra,16(sp)
   13aa8:	df000315 	stw	fp,12(sp)
   13aac:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13ab0:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   13ab4:	d0a81143 	ldbu	r2,-24507(gp)
   13ab8:	10803fcc 	andi	r2,r2,255
   13abc:	10800058 	cmpnei	r2,r2,1
   13ac0:	10002f1e 	bne	r2,zero,13b80 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13ac4:	0005303a 	rdctl	r2,status
   13ac8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13acc:	e0ffff17 	ldw	r3,-4(fp)
   13ad0:	00bfff84 	movi	r2,-2
   13ad4:	1884703a 	and	r2,r3,r2
   13ad8:	1001703a 	wrctl	status,r2
  
  return context;
   13adc:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   13ae0:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   13ae4:	d0a81f03 	ldbu	r2,-24452(gp)
   13ae8:	10803fcc 	andi	r2,r2,255
   13aec:	10000326 	beq	r2,zero,13afc <OSIntExit+0x5c>
            OSIntNesting--;
   13af0:	d0a81f03 	ldbu	r2,-24452(gp)
   13af4:	10bfffc4 	addi	r2,r2,-1
   13af8:	d0a81f05 	stb	r2,-24452(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   13afc:	d0a81f03 	ldbu	r2,-24452(gp)
   13b00:	10803fcc 	andi	r2,r2,255
   13b04:	10001a1e 	bne	r2,zero,13b70 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   13b08:	d0a81103 	ldbu	r2,-24508(gp)
   13b0c:	10803fcc 	andi	r2,r2,255
   13b10:	1000171e 	bne	r2,zero,13b70 <OSIntExit+0xd0>
                OS_SchedNew();
   13b14:	0014b9c0 	call	14b9c <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   13b18:	d0e81303 	ldbu	r3,-24500(gp)
   13b1c:	d0a81343 	ldbu	r2,-24499(gp)
   13b20:	18c03fcc 	andi	r3,r3,255
   13b24:	10803fcc 	andi	r2,r2,255
   13b28:	18801126 	beq	r3,r2,13b70 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   13b2c:	d0a81303 	ldbu	r2,-24500(gp)
   13b30:	10c03fcc 	andi	r3,r2,255
   13b34:	008000f4 	movhi	r2,3
   13b38:	10829304 	addi	r2,r2,2636
   13b3c:	18c7883a 	add	r3,r3,r3
   13b40:	18c7883a 	add	r3,r3,r3
   13b44:	10c5883a 	add	r2,r2,r3
   13b48:	10800017 	ldw	r2,0(r2)
   13b4c:	d0a81b15 	stw	r2,-24468(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   13b50:	d0a81b17 	ldw	r2,-24468(gp)
   13b54:	10c00e17 	ldw	r3,56(r2)
   13b58:	18c00044 	addi	r3,r3,1
   13b5c:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   13b60:	d0a81617 	ldw	r2,-24488(gp)
   13b64:	10800044 	addi	r2,r2,1
   13b68:	d0a81615 	stw	r2,-24488(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   13b6c:	001dea40 	call	1dea4 <OSCtxSw>
   13b70:	e0bffd17 	ldw	r2,-12(fp)
   13b74:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13b78:	e0bffe17 	ldw	r2,-8(fp)
   13b7c:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   13b80:	0001883a 	nop
   13b84:	e037883a 	mov	sp,fp
   13b88:	dfc00117 	ldw	ra,4(sp)
   13b8c:	df000017 	ldw	fp,0(sp)
   13b90:	dec00204 	addi	sp,sp,8
   13b94:	f800283a 	ret

00013b98 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   13b98:	defffc04 	addi	sp,sp,-16
   13b9c:	df000315 	stw	fp,12(sp)
   13ba0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13ba4:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   13ba8:	d0a81143 	ldbu	r2,-24507(gp)
   13bac:	10803fcc 	andi	r2,r2,255
   13bb0:	10800058 	cmpnei	r2,r2,1
   13bb4:	1000161e 	bne	r2,zero,13c10 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13bb8:	0005303a 	rdctl	r2,status
   13bbc:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13bc0:	e0ffff17 	ldw	r3,-4(fp)
   13bc4:	00bfff84 	movi	r2,-2
   13bc8:	1884703a 	and	r2,r3,r2
   13bcc:	1001703a 	wrctl	status,r2
  
  return context;
   13bd0:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   13bd4:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   13bd8:	d0a81f03 	ldbu	r2,-24452(gp)
   13bdc:	10803fcc 	andi	r2,r2,255
   13be0:	1000071e 	bne	r2,zero,13c00 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   13be4:	d0a81103 	ldbu	r2,-24508(gp)
   13be8:	10803fcc 	andi	r2,r2,255
   13bec:	10803fe0 	cmpeqi	r2,r2,255
   13bf0:	1000031e 	bne	r2,zero,13c00 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   13bf4:	d0a81103 	ldbu	r2,-24508(gp)
   13bf8:	10800044 	addi	r2,r2,1
   13bfc:	d0a81105 	stb	r2,-24508(gp)
   13c00:	e0bffd17 	ldw	r2,-12(fp)
   13c04:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13c08:	e0bffe17 	ldw	r2,-8(fp)
   13c0c:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   13c10:	0001883a 	nop
   13c14:	e037883a 	mov	sp,fp
   13c18:	df000017 	ldw	fp,0(sp)
   13c1c:	dec00104 	addi	sp,sp,4
   13c20:	f800283a 	ret

00013c24 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   13c24:	defff804 	addi	sp,sp,-32
   13c28:	dfc00715 	stw	ra,28(sp)
   13c2c:	df000615 	stw	fp,24(sp)
   13c30:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13c34:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   13c38:	d0a81143 	ldbu	r2,-24507(gp)
   13c3c:	10803fcc 	andi	r2,r2,255
   13c40:	10800058 	cmpnei	r2,r2,1
   13c44:	1000281e 	bne	r2,zero,13ce8 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13c48:	0005303a 	rdctl	r2,status
   13c4c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13c50:	e0ffff17 	ldw	r3,-4(fp)
   13c54:	00bfff84 	movi	r2,-2
   13c58:	1884703a 	and	r2,r3,r2
   13c5c:	1001703a 	wrctl	status,r2
  
  return context;
   13c60:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   13c64:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   13c68:	d0a81103 	ldbu	r2,-24508(gp)
   13c6c:	10803fcc 	andi	r2,r2,255
   13c70:	10001926 	beq	r2,zero,13cd8 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   13c74:	d0a81103 	ldbu	r2,-24508(gp)
   13c78:	10bfffc4 	addi	r2,r2,-1
   13c7c:	d0a81105 	stb	r2,-24508(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   13c80:	d0a81103 	ldbu	r2,-24508(gp)
   13c84:	10803fcc 	andi	r2,r2,255
   13c88:	10000e1e 	bne	r2,zero,13cc4 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   13c8c:	d0a81f03 	ldbu	r2,-24452(gp)
   13c90:	10803fcc 	andi	r2,r2,255
   13c94:	1000061e 	bne	r2,zero,13cb0 <OSSchedUnlock+0x8c>
   13c98:	e0bffa17 	ldw	r2,-24(fp)
   13c9c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13ca0:	e0bffb17 	ldw	r2,-20(fp)
   13ca4:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   13ca8:	0014acc0 	call	14acc <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   13cac:	00000e06 	br	13ce8 <OSSchedUnlock+0xc4>
   13cb0:	e0bffa17 	ldw	r2,-24(fp)
   13cb4:	e0bffc15 	stw	r2,-16(fp)
   13cb8:	e0bffc17 	ldw	r2,-16(fp)
   13cbc:	1001703a 	wrctl	status,r2
   13cc0:	00000906 	br	13ce8 <OSSchedUnlock+0xc4>
   13cc4:	e0bffa17 	ldw	r2,-24(fp)
   13cc8:	e0bffd15 	stw	r2,-12(fp)
   13ccc:	e0bffd17 	ldw	r2,-12(fp)
   13cd0:	1001703a 	wrctl	status,r2
   13cd4:	00000406 	br	13ce8 <OSSchedUnlock+0xc4>
   13cd8:	e0bffa17 	ldw	r2,-24(fp)
   13cdc:	e0bffe15 	stw	r2,-8(fp)
   13ce0:	e0bffe17 	ldw	r2,-8(fp)
   13ce4:	1001703a 	wrctl	status,r2
   13ce8:	0001883a 	nop
   13cec:	e037883a 	mov	sp,fp
   13cf0:	dfc00117 	ldw	ra,4(sp)
   13cf4:	df000017 	ldw	fp,0(sp)
   13cf8:	dec00204 	addi	sp,sp,8
   13cfc:	f800283a 	ret

00013d00 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   13d00:	defffe04 	addi	sp,sp,-8
   13d04:	dfc00115 	stw	ra,4(sp)
   13d08:	df000015 	stw	fp,0(sp)
   13d0c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   13d10:	d0a81143 	ldbu	r2,-24507(gp)
   13d14:	10803fcc 	andi	r2,r2,255
   13d18:	10000f1e 	bne	r2,zero,13d58 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   13d1c:	0014b9c0 	call	14b9c <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   13d20:	d0a81303 	ldbu	r2,-24500(gp)
   13d24:	d0a81345 	stb	r2,-24499(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   13d28:	d0a81303 	ldbu	r2,-24500(gp)
   13d2c:	10c03fcc 	andi	r3,r2,255
   13d30:	008000f4 	movhi	r2,3
   13d34:	10829304 	addi	r2,r2,2636
   13d38:	18c7883a 	add	r3,r3,r3
   13d3c:	18c7883a 	add	r3,r3,r3
   13d40:	10c5883a 	add	r2,r2,r3
   13d44:	10800017 	ldw	r2,0(r2)
   13d48:	d0a81b15 	stw	r2,-24468(gp)
        OSTCBCur      = OSTCBHighRdy;
   13d4c:	d0a81b17 	ldw	r2,-24468(gp)
   13d50:	d0a82015 	stw	r2,-24448(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   13d54:	001df300 	call	1df30 <OSStartHighRdy>
    }
}
   13d58:	0001883a 	nop
   13d5c:	e037883a 	mov	sp,fp
   13d60:	dfc00117 	ldw	ra,4(sp)
   13d64:	df000017 	ldw	fp,0(sp)
   13d68:	dec00204 	addi	sp,sp,8
   13d6c:	f800283a 	ret

00013d70 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   13d70:	defff904 	addi	sp,sp,-28
   13d74:	dfc00615 	stw	ra,24(sp)
   13d78:	df000515 	stw	fp,20(sp)
   13d7c:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13d80:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   13d84:	01000084 	movi	r4,2
   13d88:	001a4780 	call	1a478 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13d8c:	0005303a 	rdctl	r2,status
   13d90:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13d94:	e0fffc17 	ldw	r3,-16(fp)
   13d98:	00bfff84 	movi	r2,-2
   13d9c:	1884703a 	and	r2,r3,r2
   13da0:	1001703a 	wrctl	status,r2
  
  return context;
   13da4:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   13da8:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   13dac:	d0281215 	stw	zero,-24504(gp)
   13db0:	e0bffb17 	ldw	r2,-20(fp)
   13db4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13db8:	e0bffd17 	ldw	r2,-12(fp)
   13dbc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   13dc0:	0009883a 	mov	r4,zero
   13dc4:	001a4780 	call	1a478 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13dc8:	0005303a 	rdctl	r2,status
   13dcc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13dd0:	e0fffe17 	ldw	r3,-8(fp)
   13dd4:	00bfff84 	movi	r2,-2
   13dd8:	1884703a 	and	r2,r3,r2
   13ddc:	1001703a 	wrctl	status,r2
  
  return context;
   13de0:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   13de4:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   13de8:	d0a81217 	ldw	r2,-24504(gp)
   13dec:	d0a81715 	stw	r2,-24484(gp)
    OSStatRdy    = OS_TRUE;
   13df0:	00800044 	movi	r2,1
   13df4:	d0a82305 	stb	r2,-24436(gp)
   13df8:	e0bffb17 	ldw	r2,-20(fp)
   13dfc:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13e00:	e0bfff17 	ldw	r2,-4(fp)
   13e04:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   13e08:	0001883a 	nop
   13e0c:	e037883a 	mov	sp,fp
   13e10:	dfc00117 	ldw	ra,4(sp)
   13e14:	df000017 	ldw	fp,0(sp)
   13e18:	dec00204 	addi	sp,sp,8
   13e1c:	f800283a 	ret

00013e20 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   13e20:	defff704 	addi	sp,sp,-36
   13e24:	dfc00815 	stw	ra,32(sp)
   13e28:	df000715 	stw	fp,28(sp)
   13e2c:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   13e30:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   13e34:	001e1580 	call	1e158 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13e38:	0005303a 	rdctl	r2,status
   13e3c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13e40:	e0fffd17 	ldw	r3,-12(fp)
   13e44:	00bfff84 	movi	r2,-2
   13e48:	1884703a 	and	r2,r3,r2
   13e4c:	1001703a 	wrctl	status,r2
  
  return context;
   13e50:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   13e54:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   13e58:	d0a82117 	ldw	r2,-24444(gp)
   13e5c:	10800044 	addi	r2,r2,1
   13e60:	d0a82115 	stw	r2,-24444(gp)
   13e64:	e0bffb17 	ldw	r2,-20(fp)
   13e68:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13e6c:	e0bfff17 	ldw	r2,-4(fp)
   13e70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   13e74:	d0a81143 	ldbu	r2,-24507(gp)
   13e78:	10803fcc 	andi	r2,r2,255
   13e7c:	10800058 	cmpnei	r2,r2,1
   13e80:	10006a1e 	bne	r2,zero,1402c <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   13e84:	d0a81503 	ldbu	r2,-24492(gp)
   13e88:	10803fcc 	andi	r2,r2,255
   13e8c:	10c00060 	cmpeqi	r3,r2,1
   13e90:	1800061e 	bne	r3,zero,13eac <OSTimeTick+0x8c>
   13e94:	10c000a0 	cmpeqi	r3,r2,2
   13e98:	1800061e 	bne	r3,zero,13eb4 <OSTimeTick+0x94>
   13e9c:	10000a1e 	bne	r2,zero,13ec8 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   13ea0:	00800044 	movi	r2,1
   13ea4:	e0bffa05 	stb	r2,-24(fp)
                 break;
   13ea8:	00000b06 	br	13ed8 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   13eac:	e03ffa05 	stb	zero,-24(fp)
                 break;
   13eb0:	00000906 	br	13ed8 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   13eb4:	00800044 	movi	r2,1
   13eb8:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   13ebc:	00800044 	movi	r2,1
   13ec0:	d0a81505 	stb	r2,-24492(gp)
                 break;
   13ec4:	00000406 	br	13ed8 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   13ec8:	00800044 	movi	r2,1
   13ecc:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   13ed0:	d0281505 	stb	zero,-24492(gp)
                 break;
   13ed4:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   13ed8:	e0bffa03 	ldbu	r2,-24(fp)
   13edc:	10005226 	beq	r2,zero,14028 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   13ee0:	d0a81417 	ldw	r2,-24496(gp)
   13ee4:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   13ee8:	00004906 	br	14010 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13eec:	0005303a 	rdctl	r2,status
   13ef0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13ef4:	e0fffc17 	ldw	r3,-16(fp)
   13ef8:	00bfff84 	movi	r2,-2
   13efc:	1884703a 	and	r2,r3,r2
   13f00:	1001703a 	wrctl	status,r2
  
  return context;
   13f04:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
   13f08:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   13f0c:	e0bff917 	ldw	r2,-28(fp)
   13f10:	10800b8b 	ldhu	r2,46(r2)
   13f14:	10bfffcc 	andi	r2,r2,65535
   13f18:	10003626 	beq	r2,zero,13ff4 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   13f1c:	e0bff917 	ldw	r2,-28(fp)
   13f20:	10800b8b 	ldhu	r2,46(r2)
   13f24:	10bfffc4 	addi	r2,r2,-1
   13f28:	1007883a 	mov	r3,r2
   13f2c:	e0bff917 	ldw	r2,-28(fp)
   13f30:	10c00b8d 	sth	r3,46(r2)
   13f34:	e0bff917 	ldw	r2,-28(fp)
   13f38:	10800b8b 	ldhu	r2,46(r2)
   13f3c:	10bfffcc 	andi	r2,r2,65535
   13f40:	10002c1e 	bne	r2,zero,13ff4 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   13f44:	e0bff917 	ldw	r2,-28(fp)
   13f48:	10800c03 	ldbu	r2,48(r2)
   13f4c:	10803fcc 	andi	r2,r2,255
   13f50:	10800dcc 	andi	r2,r2,55
   13f54:	10000b26 	beq	r2,zero,13f84 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   13f58:	e0bff917 	ldw	r2,-28(fp)
   13f5c:	10c00c03 	ldbu	r3,48(r2)
   13f60:	00bff204 	movi	r2,-56
   13f64:	1884703a 	and	r2,r3,r2
   13f68:	1007883a 	mov	r3,r2
   13f6c:	e0bff917 	ldw	r2,-28(fp)
   13f70:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   13f74:	e0bff917 	ldw	r2,-28(fp)
   13f78:	00c00044 	movi	r3,1
   13f7c:	10c00c45 	stb	r3,49(r2)
   13f80:	00000206 	br	13f8c <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   13f84:	e0bff917 	ldw	r2,-28(fp)
   13f88:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   13f8c:	e0bff917 	ldw	r2,-28(fp)
   13f90:	10800c03 	ldbu	r2,48(r2)
   13f94:	10803fcc 	andi	r2,r2,255
   13f98:	1080020c 	andi	r2,r2,8
   13f9c:	1000151e 	bne	r2,zero,13ff4 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   13fa0:	e0bff917 	ldw	r2,-28(fp)
   13fa4:	10c00d83 	ldbu	r3,54(r2)
   13fa8:	d0a81d03 	ldbu	r2,-24460(gp)
   13fac:	1884b03a 	or	r2,r3,r2
   13fb0:	d0a81d05 	stb	r2,-24460(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   13fb4:	e0bff917 	ldw	r2,-28(fp)
   13fb8:	10800d03 	ldbu	r2,52(r2)
   13fbc:	10c03fcc 	andi	r3,r2,255
   13fc0:	e0bff917 	ldw	r2,-28(fp)
   13fc4:	10800d03 	ldbu	r2,52(r2)
   13fc8:	11003fcc 	andi	r4,r2,255
   13fcc:	d0a81d44 	addi	r2,gp,-24459
   13fd0:	2085883a 	add	r2,r4,r2
   13fd4:	11000003 	ldbu	r4,0(r2)
   13fd8:	e0bff917 	ldw	r2,-28(fp)
   13fdc:	10800d43 	ldbu	r2,53(r2)
   13fe0:	2084b03a 	or	r2,r4,r2
   13fe4:	1009883a 	mov	r4,r2
   13fe8:	d0a81d44 	addi	r2,gp,-24459
   13fec:	1885883a 	add	r2,r3,r2
   13ff0:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   13ff4:	e0bff917 	ldw	r2,-28(fp)
   13ff8:	10800517 	ldw	r2,20(r2)
   13ffc:	e0bff915 	stw	r2,-28(fp)
   14000:	e0bffb17 	ldw	r2,-20(fp)
   14004:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14008:	e0bffe17 	ldw	r2,-8(fp)
   1400c:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   14010:	e0bff917 	ldw	r2,-28(fp)
   14014:	10800c83 	ldbu	r2,50(r2)
   14018:	10803fcc 	andi	r2,r2,255
   1401c:	10800518 	cmpnei	r2,r2,20
   14020:	103fb21e 	bne	r2,zero,13eec <OSTimeTick+0xcc>
   14024:	00000106 	br	1402c <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
   14028:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   1402c:	e037883a 	mov	sp,fp
   14030:	dfc00117 	ldw	ra,4(sp)
   14034:	df000017 	ldw	fp,0(sp)
   14038:	dec00204 	addi	sp,sp,8
   1403c:	f800283a 	ret

00014040 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   14040:	deffff04 	addi	sp,sp,-4
   14044:	df000015 	stw	fp,0(sp)
   14048:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   1404c:	00804784 	movi	r2,286
}
   14050:	e037883a 	mov	sp,fp
   14054:	df000017 	ldw	fp,0(sp)
   14058:	dec00104 	addi	sp,sp,4
   1405c:	f800283a 	ret

00014060 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   14060:	deffff04 	addi	sp,sp,-4
   14064:	df000015 	stw	fp,0(sp)
   14068:	d839883a 	mov	fp,sp
}
   1406c:	0001883a 	nop
   14070:	e037883a 	mov	sp,fp
   14074:	df000017 	ldw	fp,0(sp)
   14078:	dec00104 	addi	sp,sp,4
   1407c:	f800283a 	ret

00014080 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   14080:	defff804 	addi	sp,sp,-32
   14084:	dfc00715 	stw	ra,28(sp)
   14088:	df000615 	stw	fp,24(sp)
   1408c:	df000604 	addi	fp,sp,24
   14090:	e13ffc15 	stw	r4,-16(fp)
   14094:	e17ffd15 	stw	r5,-12(fp)
   14098:	3007883a 	mov	r3,r6
   1409c:	3805883a 	mov	r2,r7
   140a0:	e0fffe05 	stb	r3,-8(fp)
   140a4:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   140a8:	e0bffc17 	ldw	r2,-16(fp)
   140ac:	10800283 	ldbu	r2,10(r2)
   140b0:	10c03fcc 	andi	r3,r2,255
   140b4:	008000b4 	movhi	r2,2
   140b8:	10bdc904 	addi	r2,r2,-2268
   140bc:	10c5883a 	add	r2,r2,r3
   140c0:	10800003 	ldbu	r2,0(r2)
   140c4:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   140c8:	e0bffa03 	ldbu	r2,-24(fp)
   140cc:	e0fffc17 	ldw	r3,-16(fp)
   140d0:	1885883a 	add	r2,r3,r2
   140d4:	108002c4 	addi	r2,r2,11
   140d8:	10800003 	ldbu	r2,0(r2)
   140dc:	10c03fcc 	andi	r3,r2,255
   140e0:	008000b4 	movhi	r2,2
   140e4:	10bdc904 	addi	r2,r2,-2268
   140e8:	10c5883a 	add	r2,r2,r3
   140ec:	10800003 	ldbu	r2,0(r2)
   140f0:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   140f4:	e0bffa03 	ldbu	r2,-24(fp)
   140f8:	100490fa 	slli	r2,r2,3
   140fc:	1007883a 	mov	r3,r2
   14100:	e0bffa43 	ldbu	r2,-23(fp)
   14104:	1885883a 	add	r2,r3,r2
   14108:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   1410c:	e0fffa83 	ldbu	r3,-22(fp)
   14110:	008000f4 	movhi	r2,3
   14114:	10829304 	addi	r2,r2,2636
   14118:	18c7883a 	add	r3,r3,r3
   1411c:	18c7883a 	add	r3,r3,r3
   14120:	10c5883a 	add	r2,r2,r3
   14124:	10800017 	ldw	r2,0(r2)
   14128:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   1412c:	e0bffb17 	ldw	r2,-20(fp)
   14130:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   14134:	e0bffb17 	ldw	r2,-20(fp)
   14138:	e0fffd17 	ldw	r3,-12(fp)
   1413c:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   14140:	e0bffb17 	ldw	r2,-20(fp)
   14144:	10800c03 	ldbu	r2,48(r2)
   14148:	1007883a 	mov	r3,r2
   1414c:	e0bffe03 	ldbu	r2,-8(fp)
   14150:	0084303a 	nor	r2,zero,r2
   14154:	1884703a 	and	r2,r3,r2
   14158:	1007883a 	mov	r3,r2
   1415c:	e0bffb17 	ldw	r2,-20(fp)
   14160:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   14164:	e0bffb17 	ldw	r2,-20(fp)
   14168:	e0ffff03 	ldbu	r3,-4(fp)
   1416c:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   14170:	e0bffb17 	ldw	r2,-20(fp)
   14174:	10800c03 	ldbu	r2,48(r2)
   14178:	10803fcc 	andi	r2,r2,255
   1417c:	1080020c 	andi	r2,r2,8
   14180:	1000111e 	bne	r2,zero,141c8 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   14184:	e0bffb17 	ldw	r2,-20(fp)
   14188:	10c00d83 	ldbu	r3,54(r2)
   1418c:	d0a81d03 	ldbu	r2,-24460(gp)
   14190:	1884b03a 	or	r2,r3,r2
   14194:	d0a81d05 	stb	r2,-24460(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   14198:	e0fffa03 	ldbu	r3,-24(fp)
   1419c:	e13ffa03 	ldbu	r4,-24(fp)
   141a0:	d0a81d44 	addi	r2,gp,-24459
   141a4:	2085883a 	add	r2,r4,r2
   141a8:	11000003 	ldbu	r4,0(r2)
   141ac:	e0bffb17 	ldw	r2,-20(fp)
   141b0:	10800d43 	ldbu	r2,53(r2)
   141b4:	2084b03a 	or	r2,r4,r2
   141b8:	1009883a 	mov	r4,r2
   141bc:	d0a81d44 	addi	r2,gp,-24459
   141c0:	1885883a 	add	r2,r3,r2
   141c4:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   141c8:	e17ffc17 	ldw	r5,-16(fp)
   141cc:	e13ffb17 	ldw	r4,-20(fp)
   141d0:	00144780 	call	14478 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   141d4:	e0bffb17 	ldw	r2,-20(fp)
   141d8:	10800817 	ldw	r2,32(r2)
   141dc:	10000826 	beq	r2,zero,14200 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   141e0:	e0bffb17 	ldw	r2,-20(fp)
   141e4:	10800817 	ldw	r2,32(r2)
   141e8:	100b883a 	mov	r5,r2
   141ec:	e13ffb17 	ldw	r4,-20(fp)
   141f0:	00145300 	call	14530 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   141f4:	e0bffb17 	ldw	r2,-20(fp)
   141f8:	e0fffc17 	ldw	r3,-16(fp)
   141fc:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   14200:	e0bffa83 	ldbu	r2,-22(fp)
}
   14204:	e037883a 	mov	sp,fp
   14208:	dfc00117 	ldw	ra,4(sp)
   1420c:	df000017 	ldw	fp,0(sp)
   14210:	dec00204 	addi	sp,sp,8
   14214:	f800283a 	ret

00014218 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   14218:	defffd04 	addi	sp,sp,-12
   1421c:	df000215 	stw	fp,8(sp)
   14220:	df000204 	addi	fp,sp,8
   14224:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   14228:	d0a82017 	ldw	r2,-24448(gp)
   1422c:	e0ffff17 	ldw	r3,-4(fp)
   14230:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   14234:	d0a82017 	ldw	r2,-24448(gp)
   14238:	10800d03 	ldbu	r2,52(r2)
   1423c:	10803fcc 	andi	r2,r2,255
   14240:	d0e82017 	ldw	r3,-24448(gp)
   14244:	18c00d03 	ldbu	r3,52(r3)
   14248:	18c03fcc 	andi	r3,r3,255
   1424c:	e13fff17 	ldw	r4,-4(fp)
   14250:	20c7883a 	add	r3,r4,r3
   14254:	18c002c4 	addi	r3,r3,11
   14258:	19000003 	ldbu	r4,0(r3)
   1425c:	d0e82017 	ldw	r3,-24448(gp)
   14260:	18c00d43 	ldbu	r3,53(r3)
   14264:	20c6b03a 	or	r3,r4,r3
   14268:	1809883a 	mov	r4,r3
   1426c:	e0ffff17 	ldw	r3,-4(fp)
   14270:	1885883a 	add	r2,r3,r2
   14274:	108002c4 	addi	r2,r2,11
   14278:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   1427c:	e0bfff17 	ldw	r2,-4(fp)
   14280:	10c00283 	ldbu	r3,10(r2)
   14284:	d0a82017 	ldw	r2,-24448(gp)
   14288:	10800d83 	ldbu	r2,54(r2)
   1428c:	1884b03a 	or	r2,r3,r2
   14290:	1007883a 	mov	r3,r2
   14294:	e0bfff17 	ldw	r2,-4(fp)
   14298:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   1429c:	d0a82017 	ldw	r2,-24448(gp)
   142a0:	10800d03 	ldbu	r2,52(r2)
   142a4:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   142a8:	e0fffe03 	ldbu	r3,-8(fp)
   142ac:	e13ffe03 	ldbu	r4,-8(fp)
   142b0:	d0a81d44 	addi	r2,gp,-24459
   142b4:	2085883a 	add	r2,r4,r2
   142b8:	10800003 	ldbu	r2,0(r2)
   142bc:	1009883a 	mov	r4,r2
   142c0:	d0a82017 	ldw	r2,-24448(gp)
   142c4:	10800d43 	ldbu	r2,53(r2)
   142c8:	0084303a 	nor	r2,zero,r2
   142cc:	2084703a 	and	r2,r4,r2
   142d0:	1009883a 	mov	r4,r2
   142d4:	d0a81d44 	addi	r2,gp,-24459
   142d8:	1885883a 	add	r2,r3,r2
   142dc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   142e0:	e0fffe03 	ldbu	r3,-8(fp)
   142e4:	d0a81d44 	addi	r2,gp,-24459
   142e8:	1885883a 	add	r2,r3,r2
   142ec:	10800003 	ldbu	r2,0(r2)
   142f0:	10803fcc 	andi	r2,r2,255
   142f4:	1000071e 	bne	r2,zero,14314 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   142f8:	d0a82017 	ldw	r2,-24448(gp)
   142fc:	10800d83 	ldbu	r2,54(r2)
   14300:	0084303a 	nor	r2,zero,r2
   14304:	1007883a 	mov	r3,r2
   14308:	d0a81d03 	ldbu	r2,-24460(gp)
   1430c:	1884703a 	and	r2,r3,r2
   14310:	d0a81d05 	stb	r2,-24460(gp)
    }
}
   14314:	0001883a 	nop
   14318:	e037883a 	mov	sp,fp
   1431c:	df000017 	ldw	fp,0(sp)
   14320:	dec00104 	addi	sp,sp,4
   14324:	f800283a 	ret

00014328 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   14328:	defffb04 	addi	sp,sp,-20
   1432c:	df000415 	stw	fp,16(sp)
   14330:	df000404 	addi	fp,sp,16
   14334:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   14338:	d0a82017 	ldw	r2,-24448(gp)
   1433c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   14340:	d0a82017 	ldw	r2,-24448(gp)
   14344:	e0ffff17 	ldw	r3,-4(fp)
   14348:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   1434c:	e0bfff17 	ldw	r2,-4(fp)
   14350:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   14354:	e0bffc17 	ldw	r2,-16(fp)
   14358:	10800017 	ldw	r2,0(r2)
   1435c:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   14360:	00002006 	br	143e4 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   14364:	d0a82017 	ldw	r2,-24448(gp)
   14368:	10800d03 	ldbu	r2,52(r2)
   1436c:	10803fcc 	andi	r2,r2,255
   14370:	d0e82017 	ldw	r3,-24448(gp)
   14374:	18c00d03 	ldbu	r3,52(r3)
   14378:	18c03fcc 	andi	r3,r3,255
   1437c:	e13ffd17 	ldw	r4,-12(fp)
   14380:	20c7883a 	add	r3,r4,r3
   14384:	18c002c4 	addi	r3,r3,11
   14388:	19000003 	ldbu	r4,0(r3)
   1438c:	d0e82017 	ldw	r3,-24448(gp)
   14390:	18c00d43 	ldbu	r3,53(r3)
   14394:	20c6b03a 	or	r3,r4,r3
   14398:	1809883a 	mov	r4,r3
   1439c:	e0fffd17 	ldw	r3,-12(fp)
   143a0:	1885883a 	add	r2,r3,r2
   143a4:	108002c4 	addi	r2,r2,11
   143a8:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   143ac:	e0bffd17 	ldw	r2,-12(fp)
   143b0:	10c00283 	ldbu	r3,10(r2)
   143b4:	d0a82017 	ldw	r2,-24448(gp)
   143b8:	10800d83 	ldbu	r2,54(r2)
   143bc:	1884b03a 	or	r2,r3,r2
   143c0:	1007883a 	mov	r3,r2
   143c4:	e0bffd17 	ldw	r2,-12(fp)
   143c8:	10c00285 	stb	r3,10(r2)
        pevents++;
   143cc:	e0bffc17 	ldw	r2,-16(fp)
   143d0:	10800104 	addi	r2,r2,4
   143d4:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   143d8:	e0bffc17 	ldw	r2,-16(fp)
   143dc:	10800017 	ldw	r2,0(r2)
   143e0:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   143e4:	e0bffd17 	ldw	r2,-12(fp)
   143e8:	103fde1e 	bne	r2,zero,14364 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   143ec:	d0a82017 	ldw	r2,-24448(gp)
   143f0:	10800d03 	ldbu	r2,52(r2)
   143f4:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   143f8:	e0fffe03 	ldbu	r3,-8(fp)
   143fc:	e13ffe03 	ldbu	r4,-8(fp)
   14400:	d0a81d44 	addi	r2,gp,-24459
   14404:	2085883a 	add	r2,r4,r2
   14408:	10800003 	ldbu	r2,0(r2)
   1440c:	1009883a 	mov	r4,r2
   14410:	d0a82017 	ldw	r2,-24448(gp)
   14414:	10800d43 	ldbu	r2,53(r2)
   14418:	0084303a 	nor	r2,zero,r2
   1441c:	2084703a 	and	r2,r4,r2
   14420:	1009883a 	mov	r4,r2
   14424:	d0a81d44 	addi	r2,gp,-24459
   14428:	1885883a 	add	r2,r3,r2
   1442c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   14430:	e0fffe03 	ldbu	r3,-8(fp)
   14434:	d0a81d44 	addi	r2,gp,-24459
   14438:	1885883a 	add	r2,r3,r2
   1443c:	10800003 	ldbu	r2,0(r2)
   14440:	10803fcc 	andi	r2,r2,255
   14444:	1000071e 	bne	r2,zero,14464 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   14448:	d0a82017 	ldw	r2,-24448(gp)
   1444c:	10800d83 	ldbu	r2,54(r2)
   14450:	0084303a 	nor	r2,zero,r2
   14454:	1007883a 	mov	r3,r2
   14458:	d0a81d03 	ldbu	r2,-24460(gp)
   1445c:	1884703a 	and	r2,r3,r2
   14460:	d0a81d05 	stb	r2,-24460(gp)
    }
}
   14464:	0001883a 	nop
   14468:	e037883a 	mov	sp,fp
   1446c:	df000017 	ldw	fp,0(sp)
   14470:	dec00104 	addi	sp,sp,4
   14474:	f800283a 	ret

00014478 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   14478:	defffc04 	addi	sp,sp,-16
   1447c:	df000315 	stw	fp,12(sp)
   14480:	df000304 	addi	fp,sp,12
   14484:	e13ffe15 	stw	r4,-8(fp)
   14488:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   1448c:	e0bffe17 	ldw	r2,-8(fp)
   14490:	10800d03 	ldbu	r2,52(r2)
   14494:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   14498:	e0bffd03 	ldbu	r2,-12(fp)
   1449c:	e0fffd03 	ldbu	r3,-12(fp)
   144a0:	e13fff17 	ldw	r4,-4(fp)
   144a4:	20c7883a 	add	r3,r4,r3
   144a8:	18c002c4 	addi	r3,r3,11
   144ac:	18c00003 	ldbu	r3,0(r3)
   144b0:	1809883a 	mov	r4,r3
   144b4:	e0fffe17 	ldw	r3,-8(fp)
   144b8:	18c00d43 	ldbu	r3,53(r3)
   144bc:	00c6303a 	nor	r3,zero,r3
   144c0:	20c6703a 	and	r3,r4,r3
   144c4:	1809883a 	mov	r4,r3
   144c8:	e0ffff17 	ldw	r3,-4(fp)
   144cc:	1885883a 	add	r2,r3,r2
   144d0:	108002c4 	addi	r2,r2,11
   144d4:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
   144d8:	e0bffd03 	ldbu	r2,-12(fp)
   144dc:	e0ffff17 	ldw	r3,-4(fp)
   144e0:	1885883a 	add	r2,r3,r2
   144e4:	108002c4 	addi	r2,r2,11
   144e8:	10800003 	ldbu	r2,0(r2)
   144ec:	10803fcc 	andi	r2,r2,255
   144f0:	10000a1e 	bne	r2,zero,1451c <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   144f4:	e0bfff17 	ldw	r2,-4(fp)
   144f8:	10800283 	ldbu	r2,10(r2)
   144fc:	1007883a 	mov	r3,r2
   14500:	e0bffe17 	ldw	r2,-8(fp)
   14504:	10800d83 	ldbu	r2,54(r2)
   14508:	0084303a 	nor	r2,zero,r2
   1450c:	1884703a 	and	r2,r3,r2
   14510:	1007883a 	mov	r3,r2
   14514:	e0bfff17 	ldw	r2,-4(fp)
   14518:	10c00285 	stb	r3,10(r2)
    }
}
   1451c:	0001883a 	nop
   14520:	e037883a 	mov	sp,fp
   14524:	df000017 	ldw	fp,0(sp)
   14528:	dec00104 	addi	sp,sp,4
   1452c:	f800283a 	ret

00014530 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   14530:	defffa04 	addi	sp,sp,-24
   14534:	df000515 	stw	fp,20(sp)
   14538:	df000504 	addi	fp,sp,20
   1453c:	e13ffe15 	stw	r4,-8(fp)
   14540:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   14544:	e0bffe17 	ldw	r2,-8(fp)
   14548:	10800d03 	ldbu	r2,52(r2)
   1454c:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   14550:	e0bffe17 	ldw	r2,-8(fp)
   14554:	10800d83 	ldbu	r2,54(r2)
   14558:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   1455c:	e0bffe17 	ldw	r2,-8(fp)
   14560:	10800d43 	ldbu	r2,53(r2)
   14564:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   14568:	e0bfff17 	ldw	r2,-4(fp)
   1456c:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   14570:	e0bffb17 	ldw	r2,-20(fp)
   14574:	10800017 	ldw	r2,0(r2)
   14578:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   1457c:	00002506 	br	14614 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   14580:	e0bffd03 	ldbu	r2,-12(fp)
   14584:	e0fffd03 	ldbu	r3,-12(fp)
   14588:	e13ffc17 	ldw	r4,-16(fp)
   1458c:	20c7883a 	add	r3,r4,r3
   14590:	18c002c4 	addi	r3,r3,11
   14594:	18c00003 	ldbu	r3,0(r3)
   14598:	1809883a 	mov	r4,r3
   1459c:	e0fffd83 	ldbu	r3,-10(fp)
   145a0:	00c6303a 	nor	r3,zero,r3
   145a4:	20c6703a 	and	r3,r4,r3
   145a8:	1809883a 	mov	r4,r3
   145ac:	e0fffc17 	ldw	r3,-16(fp)
   145b0:	1885883a 	add	r2,r3,r2
   145b4:	108002c4 	addi	r2,r2,11
   145b8:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
   145bc:	e0bffd03 	ldbu	r2,-12(fp)
   145c0:	e0fffc17 	ldw	r3,-16(fp)
   145c4:	1885883a 	add	r2,r3,r2
   145c8:	108002c4 	addi	r2,r2,11
   145cc:	10800003 	ldbu	r2,0(r2)
   145d0:	10803fcc 	andi	r2,r2,255
   145d4:	1000091e 	bne	r2,zero,145fc <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   145d8:	e0bffc17 	ldw	r2,-16(fp)
   145dc:	10800283 	ldbu	r2,10(r2)
   145e0:	1007883a 	mov	r3,r2
   145e4:	e0bffd43 	ldbu	r2,-11(fp)
   145e8:	0084303a 	nor	r2,zero,r2
   145ec:	1884703a 	and	r2,r3,r2
   145f0:	1007883a 	mov	r3,r2
   145f4:	e0bffc17 	ldw	r2,-16(fp)
   145f8:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   145fc:	e0bffb17 	ldw	r2,-20(fp)
   14600:	10800104 	addi	r2,r2,4
   14604:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   14608:	e0bffb17 	ldw	r2,-20(fp)
   1460c:	10800017 	ldw	r2,0(r2)
   14610:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   14614:	e0bffc17 	ldw	r2,-16(fp)
   14618:	103fd91e 	bne	r2,zero,14580 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   1461c:	0001883a 	nop
   14620:	e037883a 	mov	sp,fp
   14624:	df000017 	ldw	fp,0(sp)
   14628:	dec00104 	addi	sp,sp,4
   1462c:	f800283a 	ret

00014630 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   14630:	defffc04 	addi	sp,sp,-16
   14634:	df000315 	stw	fp,12(sp)
   14638:	df000304 	addi	fp,sp,12
   1463c:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   14640:	e0bfff17 	ldw	r2,-4(fp)
   14644:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   14648:	e0bfff17 	ldw	r2,-4(fp)
   1464c:	108002c4 	addi	r2,r2,11
   14650:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   14654:	e03ffe05 	stb	zero,-8(fp)
   14658:	00000706 	br	14678 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   1465c:	e0bffd17 	ldw	r2,-12(fp)
   14660:	10c00044 	addi	r3,r2,1
   14664:	e0fffd15 	stw	r3,-12(fp)
   14668:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1466c:	e0bffe03 	ldbu	r2,-8(fp)
   14670:	10800044 	addi	r2,r2,1
   14674:	e0bffe05 	stb	r2,-8(fp)
   14678:	e0bffe03 	ldbu	r2,-8(fp)
   1467c:	108000f0 	cmpltui	r2,r2,3
   14680:	103ff61e 	bne	r2,zero,1465c <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
   14684:	0001883a 	nop
   14688:	e037883a 	mov	sp,fp
   1468c:	df000017 	ldw	fp,0(sp)
   14690:	dec00104 	addi	sp,sp,4
   14694:	f800283a 	ret

00014698 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   14698:	defffb04 	addi	sp,sp,-20
   1469c:	dfc00415 	stw	ra,16(sp)
   146a0:	df000315 	stw	fp,12(sp)
   146a4:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   146a8:	0142d004 	movi	r5,2880
   146ac:	010000f4 	movhi	r4,3
   146b0:	213e7f04 	addi	r4,r4,-1540
   146b4:	0014a100 	call	14a10 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   146b8:	008000f4 	movhi	r2,3
   146bc:	10be7f04 	addi	r2,r2,-1540
   146c0:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   146c4:	008000f4 	movhi	r2,3
   146c8:	10be8b04 	addi	r2,r2,-1492
   146cc:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   146d0:	e03ffd0d 	sth	zero,-12(fp)
   146d4:	00001306 	br	14724 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   146d8:	e0bffe17 	ldw	r2,-8(fp)
   146dc:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   146e0:	e0bffe17 	ldw	r2,-8(fp)
   146e4:	e0ffff17 	ldw	r3,-4(fp)
   146e8:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   146ec:	e0bffe17 	ldw	r2,-8(fp)
   146f0:	00c00fc4 	movi	r3,63
   146f4:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   146f8:	e0bffe17 	ldw	r2,-8(fp)
   146fc:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   14700:	e0bffe17 	ldw	r2,-8(fp)
   14704:	10800c04 	addi	r2,r2,48
   14708:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   1470c:	e0bfff17 	ldw	r2,-4(fp)
   14710:	10800c04 	addi	r2,r2,48
   14714:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   14718:	e0bffd0b 	ldhu	r2,-12(fp)
   1471c:	10800044 	addi	r2,r2,1
   14720:	e0bffd0d 	sth	r2,-12(fp)
   14724:	e0bffd0b 	ldhu	r2,-12(fp)
   14728:	10800ef0 	cmpltui	r2,r2,59
   1472c:	103fea1e 	bne	r2,zero,146d8 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   14730:	e0bffe17 	ldw	r2,-8(fp)
   14734:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   14738:	e0bffe17 	ldw	r2,-8(fp)
   1473c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   14740:	e0bffe17 	ldw	r2,-8(fp)
   14744:	00c00fc4 	movi	r3,63
   14748:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   1474c:	e0bffe17 	ldw	r2,-8(fp)
   14750:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   14754:	008000f4 	movhi	r2,3
   14758:	10be7f04 	addi	r2,r2,-1540
   1475c:	d0a81e15 	stw	r2,-24456(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   14760:	0001883a 	nop
   14764:	e037883a 	mov	sp,fp
   14768:	dfc00117 	ldw	ra,4(sp)
   1476c:	df000017 	ldw	fp,0(sp)
   14770:	dec00204 	addi	sp,sp,8
   14774:	f800283a 	ret

00014778 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   14778:	deffff04 	addi	sp,sp,-4
   1477c:	df000015 	stw	fp,0(sp)
   14780:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   14784:	d0282115 	stw	zero,-24444(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   14788:	d0281f05 	stb	zero,-24452(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   1478c:	d0281105 	stb	zero,-24508(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   14790:	d0281945 	stb	zero,-24475(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   14794:	d0281145 	stb	zero,-24507(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   14798:	d0281615 	stw	zero,-24488(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   1479c:	d0281215 	stw	zero,-24504(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   147a0:	d0282415 	stw	zero,-24432(gp)
    OSIdleCtrMax  = 0L;
   147a4:	d0281715 	stw	zero,-24484(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   147a8:	d0282305 	stb	zero,-24436(gp)
#endif
}
   147ac:	0001883a 	nop
   147b0:	e037883a 	mov	sp,fp
   147b4:	df000017 	ldw	fp,0(sp)
   147b8:	dec00104 	addi	sp,sp,4
   147bc:	f800283a 	ret

000147c0 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   147c0:	defffd04 	addi	sp,sp,-12
   147c4:	df000215 	stw	fp,8(sp)
   147c8:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   147cc:	d0281d05 	stb	zero,-24460(gp)
    prdytbl       = &OSRdyTbl[0];
   147d0:	d0a81d44 	addi	r2,gp,-24459
   147d4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   147d8:	e03ffe05 	stb	zero,-8(fp)
   147dc:	00000706 	br	147fc <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   147e0:	e0bfff17 	ldw	r2,-4(fp)
   147e4:	10c00044 	addi	r3,r2,1
   147e8:	e0ffff15 	stw	r3,-4(fp)
   147ec:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   147f0:	e0bffe03 	ldbu	r2,-8(fp)
   147f4:	10800044 	addi	r2,r2,1
   147f8:	e0bffe05 	stb	r2,-8(fp)
   147fc:	e0bffe03 	ldbu	r2,-8(fp)
   14800:	108000f0 	cmpltui	r2,r2,3
   14804:	103ff61e 	bne	r2,zero,147e0 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   14808:	d0281345 	stb	zero,-24499(gp)
    OSPrioHighRdy = 0;
   1480c:	d0281305 	stb	zero,-24500(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   14810:	d0281b15 	stw	zero,-24468(gp)
    OSTCBCur      = (OS_TCB *)0;
   14814:	d0282015 	stw	zero,-24448(gp)
}
   14818:	0001883a 	nop
   1481c:	e037883a 	mov	sp,fp
   14820:	df000017 	ldw	fp,0(sp)
   14824:	dec00104 	addi	sp,sp,4
   14828:	f800283a 	ret

0001482c <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   1482c:	defff804 	addi	sp,sp,-32
   14830:	dfc00715 	stw	ra,28(sp)
   14834:	df000615 	stw	fp,24(sp)
   14838:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   1483c:	008000c4 	movi	r2,3
   14840:	d8800415 	stw	r2,16(sp)
   14844:	d8000315 	stw	zero,12(sp)
   14848:	00808004 	movi	r2,512
   1484c:	d8800215 	stw	r2,8(sp)
   14850:	008000f4 	movhi	r2,3
   14854:	10bc7f04 	addi	r2,r2,-3588
   14858:	d8800115 	stw	r2,4(sp)
   1485c:	00bfffd4 	movui	r2,65535
   14860:	d8800015 	stw	r2,0(sp)
   14864:	01c00504 	movi	r7,20
   14868:	018000f4 	movhi	r6,3
   1486c:	31be7e04 	addi	r6,r6,-1544
   14870:	000b883a 	mov	r5,zero
   14874:	01000074 	movhi	r4,1
   14878:	21133604 	addi	r4,r4,19672
   1487c:	00193a80 	call	193a8 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   14880:	e1bfff04 	addi	r6,fp,-4
   14884:	014000b4 	movhi	r5,2
   14888:	297e0904 	addi	r5,r5,-2012
   1488c:	01000504 	movi	r4,20
   14890:	0019bb80 	call	19bb8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   14894:	0001883a 	nop
   14898:	e037883a 	mov	sp,fp
   1489c:	dfc00117 	ldw	ra,4(sp)
   148a0:	df000017 	ldw	fp,0(sp)
   148a4:	dec00204 	addi	sp,sp,8
   148a8:	f800283a 	ret

000148ac <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   148ac:	defff804 	addi	sp,sp,-32
   148b0:	dfc00715 	stw	ra,28(sp)
   148b4:	df000615 	stw	fp,24(sp)
   148b8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   148bc:	008000c4 	movi	r2,3
   148c0:	d8800415 	stw	r2,16(sp)
   148c4:	d8000315 	stw	zero,12(sp)
   148c8:	00808004 	movi	r2,512
   148cc:	d8800215 	stw	r2,8(sp)
   148d0:	008000f4 	movhi	r2,3
   148d4:	10ba0704 	addi	r2,r2,-6116
   148d8:	d8800115 	stw	r2,4(sp)
   148dc:	00bfff94 	movui	r2,65534
   148e0:	d8800015 	stw	r2,0(sp)
   148e4:	01c004c4 	movi	r7,19
   148e8:	018000f4 	movhi	r6,3
   148ec:	31bc0604 	addi	r6,r6,-4072
   148f0:	000b883a 	mov	r5,zero
   148f4:	01000074 	movhi	r4,1
   148f8:	21134d04 	addi	r4,r4,19764
   148fc:	00193a80 	call	193a8 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   14900:	e1bfff04 	addi	r6,fp,-4
   14904:	014000b4 	movhi	r5,2
   14908:	297e0d04 	addi	r5,r5,-1996
   1490c:	010004c4 	movi	r4,19
   14910:	0019bb80 	call	19bb8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   14914:	0001883a 	nop
   14918:	e037883a 	mov	sp,fp
   1491c:	dfc00117 	ldw	ra,4(sp)
   14920:	df000017 	ldw	fp,0(sp)
   14924:	dec00204 	addi	sp,sp,8
   14928:	f800283a 	ret

0001492c <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   1492c:	defffb04 	addi	sp,sp,-20
   14930:	dfc00415 	stw	ra,16(sp)
   14934:	df000315 	stw	fp,12(sp)
   14938:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   1493c:	01414404 	movi	r5,1296
   14940:	010000f4 	movhi	r4,3
   14944:	21014f04 	addi	r4,r4,1340
   14948:	0014a100 	call	14a10 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   1494c:	01401504 	movi	r5,84
   14950:	010000f4 	movhi	r4,3
   14954:	21029304 	addi	r4,r4,2636
   14958:	0014a100 	call	14a10 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   1495c:	008000f4 	movhi	r2,3
   14960:	10814f04 	addi	r2,r2,1340
   14964:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   14968:	008000f4 	movhi	r2,3
   1496c:	10816a04 	addi	r2,r2,1448
   14970:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   14974:	e03ffd05 	stb	zero,-12(fp)
   14978:	00001106 	br	149c0 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   1497c:	e0bffe17 	ldw	r2,-8(fp)
   14980:	e0ffff17 	ldw	r3,-4(fp)
   14984:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   14988:	e0bffe17 	ldw	r2,-8(fp)
   1498c:	00c00fc4 	movi	r3,63
   14990:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   14994:	e0bffe17 	ldw	r2,-8(fp)
   14998:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   1499c:	e0bffe17 	ldw	r2,-8(fp)
   149a0:	10801b04 	addi	r2,r2,108
   149a4:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   149a8:	e0bfff17 	ldw	r2,-4(fp)
   149ac:	10801b04 	addi	r2,r2,108
   149b0:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   149b4:	e0bffd03 	ldbu	r2,-12(fp)
   149b8:	10800044 	addi	r2,r2,1
   149bc:	e0bffd05 	stb	r2,-12(fp)
   149c0:	e0bffd03 	ldbu	r2,-12(fp)
   149c4:	108002f0 	cmpltui	r2,r2,11
   149c8:	103fec1e 	bne	r2,zero,1497c <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   149cc:	e0bffe17 	ldw	r2,-8(fp)
   149d0:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   149d4:	e0bffe17 	ldw	r2,-8(fp)
   149d8:	00c00fc4 	movi	r3,63
   149dc:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   149e0:	e0bffe17 	ldw	r2,-8(fp)
   149e4:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   149e8:	d0281415 	stw	zero,-24496(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   149ec:	008000f4 	movhi	r2,3
   149f0:	10814f04 	addi	r2,r2,1340
   149f4:	d0a81815 	stw	r2,-24480(gp)
}
   149f8:	0001883a 	nop
   149fc:	e037883a 	mov	sp,fp
   14a00:	dfc00117 	ldw	ra,4(sp)
   14a04:	df000017 	ldw	fp,0(sp)
   14a08:	dec00204 	addi	sp,sp,8
   14a0c:	f800283a 	ret

00014a10 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   14a10:	defffd04 	addi	sp,sp,-12
   14a14:	df000215 	stw	fp,8(sp)
   14a18:	df000204 	addi	fp,sp,8
   14a1c:	e13ffe15 	stw	r4,-8(fp)
   14a20:	2805883a 	mov	r2,r5
   14a24:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   14a28:	00000706 	br	14a48 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   14a2c:	e0bffe17 	ldw	r2,-8(fp)
   14a30:	10c00044 	addi	r3,r2,1
   14a34:	e0fffe15 	stw	r3,-8(fp)
   14a38:	10000005 	stb	zero,0(r2)
        size--;
   14a3c:	e0bfff0b 	ldhu	r2,-4(fp)
   14a40:	10bfffc4 	addi	r2,r2,-1
   14a44:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   14a48:	e0bfff0b 	ldhu	r2,-4(fp)
   14a4c:	103ff71e 	bne	r2,zero,14a2c <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   14a50:	0001883a 	nop
   14a54:	e037883a 	mov	sp,fp
   14a58:	df000017 	ldw	fp,0(sp)
   14a5c:	dec00104 	addi	sp,sp,4
   14a60:	f800283a 	ret

00014a64 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   14a64:	defffc04 	addi	sp,sp,-16
   14a68:	df000315 	stw	fp,12(sp)
   14a6c:	df000304 	addi	fp,sp,12
   14a70:	e13ffd15 	stw	r4,-12(fp)
   14a74:	e17ffe15 	stw	r5,-8(fp)
   14a78:	3005883a 	mov	r2,r6
   14a7c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   14a80:	00000b06 	br	14ab0 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   14a84:	e0bffd17 	ldw	r2,-12(fp)
   14a88:	10c00044 	addi	r3,r2,1
   14a8c:	e0fffd15 	stw	r3,-12(fp)
   14a90:	e0fffe17 	ldw	r3,-8(fp)
   14a94:	19000044 	addi	r4,r3,1
   14a98:	e13ffe15 	stw	r4,-8(fp)
   14a9c:	18c00003 	ldbu	r3,0(r3)
   14aa0:	10c00005 	stb	r3,0(r2)
        size--;
   14aa4:	e0bfff0b 	ldhu	r2,-4(fp)
   14aa8:	10bfffc4 	addi	r2,r2,-1
   14aac:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   14ab0:	e0bfff0b 	ldhu	r2,-4(fp)
   14ab4:	103ff31e 	bne	r2,zero,14a84 <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
   14ab8:	0001883a 	nop
   14abc:	e037883a 	mov	sp,fp
   14ac0:	df000017 	ldw	fp,0(sp)
   14ac4:	dec00104 	addi	sp,sp,4
   14ac8:	f800283a 	ret

00014acc <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   14acc:	defffb04 	addi	sp,sp,-20
   14ad0:	dfc00415 	stw	ra,16(sp)
   14ad4:	df000315 	stw	fp,12(sp)
   14ad8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   14adc:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14ae0:	0005303a 	rdctl	r2,status
   14ae4:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14ae8:	e0ffff17 	ldw	r3,-4(fp)
   14aec:	00bfff84 	movi	r2,-2
   14af0:	1884703a 	and	r2,r3,r2
   14af4:	1001703a 	wrctl	status,r2
  
  return context;
   14af8:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
   14afc:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   14b00:	d0a81f03 	ldbu	r2,-24452(gp)
   14b04:	10803fcc 	andi	r2,r2,255
   14b08:	10001a1e 	bne	r2,zero,14b74 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   14b0c:	d0a81103 	ldbu	r2,-24508(gp)
   14b10:	10803fcc 	andi	r2,r2,255
   14b14:	1000171e 	bne	r2,zero,14b74 <OS_Sched+0xa8>
            OS_SchedNew();
   14b18:	0014b9c0 	call	14b9c <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   14b1c:	d0e81303 	ldbu	r3,-24500(gp)
   14b20:	d0a81343 	ldbu	r2,-24499(gp)
   14b24:	18c03fcc 	andi	r3,r3,255
   14b28:	10803fcc 	andi	r2,r2,255
   14b2c:	18801126 	beq	r3,r2,14b74 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   14b30:	d0a81303 	ldbu	r2,-24500(gp)
   14b34:	10c03fcc 	andi	r3,r2,255
   14b38:	008000f4 	movhi	r2,3
   14b3c:	10829304 	addi	r2,r2,2636
   14b40:	18c7883a 	add	r3,r3,r3
   14b44:	18c7883a 	add	r3,r3,r3
   14b48:	10c5883a 	add	r2,r2,r3
   14b4c:	10800017 	ldw	r2,0(r2)
   14b50:	d0a81b15 	stw	r2,-24468(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   14b54:	d0a81b17 	ldw	r2,-24468(gp)
   14b58:	10c00e17 	ldw	r3,56(r2)
   14b5c:	18c00044 	addi	r3,r3,1
   14b60:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   14b64:	d0a81617 	ldw	r2,-24488(gp)
   14b68:	10800044 	addi	r2,r2,1
   14b6c:	d0a81615 	stw	r2,-24488(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   14b70:	001dea40 	call	1dea4 <OSCtxSw>
   14b74:	e0bffd17 	ldw	r2,-12(fp)
   14b78:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14b7c:	e0bffe17 	ldw	r2,-8(fp)
   14b80:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   14b84:	0001883a 	nop
   14b88:	e037883a 	mov	sp,fp
   14b8c:	dfc00117 	ldw	ra,4(sp)
   14b90:	df000017 	ldw	fp,0(sp)
   14b94:	dec00204 	addi	sp,sp,8
   14b98:	f800283a 	ret

00014b9c <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   14b9c:	defffe04 	addi	sp,sp,-8
   14ba0:	df000115 	stw	fp,4(sp)
   14ba4:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   14ba8:	d0a81d03 	ldbu	r2,-24460(gp)
   14bac:	10c03fcc 	andi	r3,r2,255
   14bb0:	008000b4 	movhi	r2,2
   14bb4:	10bdc904 	addi	r2,r2,-2268
   14bb8:	10c5883a 	add	r2,r2,r3
   14bbc:	10800003 	ldbu	r2,0(r2)
   14bc0:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   14bc4:	e0bfff03 	ldbu	r2,-4(fp)
   14bc8:	100490fa 	slli	r2,r2,3
   14bcc:	1009883a 	mov	r4,r2
   14bd0:	e0ffff03 	ldbu	r3,-4(fp)
   14bd4:	d0a81d44 	addi	r2,gp,-24459
   14bd8:	1885883a 	add	r2,r3,r2
   14bdc:	10800003 	ldbu	r2,0(r2)
   14be0:	10c03fcc 	andi	r3,r2,255
   14be4:	008000b4 	movhi	r2,2
   14be8:	10bdc904 	addi	r2,r2,-2268
   14bec:	10c5883a 	add	r2,r2,r3
   14bf0:	10800003 	ldbu	r2,0(r2)
   14bf4:	2085883a 	add	r2,r4,r2
   14bf8:	d0a81305 	stb	r2,-24500(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   14bfc:	0001883a 	nop
   14c00:	e037883a 	mov	sp,fp
   14c04:	df000017 	ldw	fp,0(sp)
   14c08:	dec00104 	addi	sp,sp,4
   14c0c:	f800283a 	ret

00014c10 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   14c10:	defffc04 	addi	sp,sp,-16
   14c14:	df000315 	stw	fp,12(sp)
   14c18:	df000304 	addi	fp,sp,12
   14c1c:	e13ffe15 	stw	r4,-8(fp)
   14c20:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   14c24:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   14c28:	00000b06 	br	14c58 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   14c2c:	e0bffe17 	ldw	r2,-8(fp)
   14c30:	10c00044 	addi	r3,r2,1
   14c34:	e0fffe15 	stw	r3,-8(fp)
   14c38:	e0ffff17 	ldw	r3,-4(fp)
   14c3c:	19000044 	addi	r4,r3,1
   14c40:	e13fff15 	stw	r4,-4(fp)
   14c44:	18c00003 	ldbu	r3,0(r3)
   14c48:	10c00005 	stb	r3,0(r2)
        len++;
   14c4c:	e0bffd03 	ldbu	r2,-12(fp)
   14c50:	10800044 	addi	r2,r2,1
   14c54:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   14c58:	e0bfff17 	ldw	r2,-4(fp)
   14c5c:	10800003 	ldbu	r2,0(r2)
   14c60:	10803fcc 	andi	r2,r2,255
   14c64:	103ff11e 	bne	r2,zero,14c2c <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   14c68:	e0bffe17 	ldw	r2,-8(fp)
   14c6c:	10000005 	stb	zero,0(r2)
    return (len);
   14c70:	e0bffd03 	ldbu	r2,-12(fp)
}
   14c74:	e037883a 	mov	sp,fp
   14c78:	df000017 	ldw	fp,0(sp)
   14c7c:	dec00104 	addi	sp,sp,4
   14c80:	f800283a 	ret

00014c84 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   14c84:	defffd04 	addi	sp,sp,-12
   14c88:	df000215 	stw	fp,8(sp)
   14c8c:	df000204 	addi	fp,sp,8
   14c90:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   14c94:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   14c98:	00000606 	br	14cb4 <OS_StrLen+0x30>
        psrc++;
   14c9c:	e0bfff17 	ldw	r2,-4(fp)
   14ca0:	10800044 	addi	r2,r2,1
   14ca4:	e0bfff15 	stw	r2,-4(fp)
        len++;
   14ca8:	e0bffe03 	ldbu	r2,-8(fp)
   14cac:	10800044 	addi	r2,r2,1
   14cb0:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   14cb4:	e0bfff17 	ldw	r2,-4(fp)
   14cb8:	10800003 	ldbu	r2,0(r2)
   14cbc:	10803fcc 	andi	r2,r2,255
   14cc0:	103ff61e 	bne	r2,zero,14c9c <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
   14cc4:	e0bffe03 	ldbu	r2,-8(fp)
}
   14cc8:	e037883a 	mov	sp,fp
   14ccc:	df000017 	ldw	fp,0(sp)
   14cd0:	dec00104 	addi	sp,sp,4
   14cd4:	f800283a 	ret

00014cd8 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   14cd8:	defffa04 	addi	sp,sp,-24
   14cdc:	dfc00515 	stw	ra,20(sp)
   14ce0:	df000415 	stw	fp,16(sp)
   14ce4:	df000404 	addi	fp,sp,16
   14ce8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14cec:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14cf0:	0005303a 	rdctl	r2,status
   14cf4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14cf8:	e0fffd17 	ldw	r3,-12(fp)
   14cfc:	00bfff84 	movi	r2,-2
   14d00:	1884703a 	and	r2,r3,r2
   14d04:	1001703a 	wrctl	status,r2
  
  return context;
   14d08:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   14d0c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   14d10:	d0a81217 	ldw	r2,-24504(gp)
   14d14:	10800044 	addi	r2,r2,1
   14d18:	d0a81215 	stw	r2,-24504(gp)
   14d1c:	e0bffc17 	ldw	r2,-16(fp)
   14d20:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14d24:	e0bffe17 	ldw	r2,-8(fp)
   14d28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   14d2c:	001e1b80 	call	1e1b8 <OSTaskIdleHook>
    }
   14d30:	003fef06 	br	14cf0 <OS_TaskIdle+0x18>

00014d34 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   14d34:	defff804 	addi	sp,sp,-32
   14d38:	dfc00715 	stw	ra,28(sp)
   14d3c:	df000615 	stw	fp,24(sp)
   14d40:	dc400515 	stw	r17,20(sp)
   14d44:	dc000415 	stw	r16,16(sp)
   14d48:	df000604 	addi	fp,sp,24
   14d4c:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14d50:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   14d54:	00000206 	br	14d60 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   14d58:	01000044 	movi	r4,1
   14d5c:	001a4780 	call	1a478 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   14d60:	d0a82303 	ldbu	r2,-24436(gp)
   14d64:	10803fcc 	andi	r2,r2,255
   14d68:	103ffb26 	beq	r2,zero,14d58 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   14d6c:	d0e81717 	ldw	r3,-24484(gp)
   14d70:	00947b34 	movhi	r2,20972
   14d74:	10a147c4 	addi	r2,r2,-31457
   14d78:	1888383a 	mulxuu	r4,r3,r2
   14d7c:	1885383a 	mul	r2,r3,r2
   14d80:	1021883a 	mov	r16,r2
   14d84:	2023883a 	mov	r17,r4
   14d88:	8804d17a 	srli	r2,r17,5
   14d8c:	d0a81715 	stw	r2,-24484(gp)
    if (OSIdleCtrMax == 0L) {
   14d90:	d0a81717 	ldw	r2,-24484(gp)
   14d94:	1000031e 	bne	r2,zero,14da4 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
   14d98:	d0281905 	stb	zero,-24476(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   14d9c:	01003fc4 	movi	r4,255
   14da0:	001a1000 	call	1a100 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14da4:	0005303a 	rdctl	r2,status
   14da8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14dac:	e0fffb17 	ldw	r3,-20(fp)
   14db0:	00bfff84 	movi	r2,-2
   14db4:	1884703a 	and	r2,r3,r2
   14db8:	1001703a 	wrctl	status,r2
  
  return context;
   14dbc:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   14dc0:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   14dc4:	d0a81217 	ldw	r2,-24504(gp)
   14dc8:	d0a82415 	stw	r2,-24432(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   14dcc:	d0281215 	stw	zero,-24504(gp)
   14dd0:	e0bffa17 	ldw	r2,-24(fp)
   14dd4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14dd8:	e0bffc17 	ldw	r2,-16(fp)
   14ddc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   14de0:	d0e82417 	ldw	r3,-24432(gp)
   14de4:	d0a81717 	ldw	r2,-24484(gp)
   14de8:	1885203a 	divu	r2,r3,r2
   14dec:	1007883a 	mov	r3,r2
   14df0:	00801904 	movi	r2,100
   14df4:	10c5c83a 	sub	r2,r2,r3
   14df8:	d0a81905 	stb	r2,-24476(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   14dfc:	001e1380 	call	1e138 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   14e00:	0014e100 	call	14e10 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   14e04:	0009883a 	mov	r4,zero
   14e08:	001a4780 	call	1a478 <OSTimeDly>
    }
   14e0c:	003fe506 	br	14da4 <OS_TaskStat+0x70>

00014e10 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   14e10:	defffa04 	addi	sp,sp,-24
   14e14:	dfc00515 	stw	ra,20(sp)
   14e18:	df000415 	stw	fp,16(sp)
   14e1c:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   14e20:	e03ffc05 	stb	zero,-16(fp)
   14e24:	00002406 	br	14eb8 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   14e28:	e0bffc03 	ldbu	r2,-16(fp)
   14e2c:	e0fffe04 	addi	r3,fp,-8
   14e30:	180b883a 	mov	r5,r3
   14e34:	1009883a 	mov	r4,r2
   14e38:	0019f400 	call	19f40 <OSTaskStkChk>
   14e3c:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   14e40:	e0bffc43 	ldbu	r2,-15(fp)
   14e44:	1000191e 	bne	r2,zero,14eac <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   14e48:	e0fffc03 	ldbu	r3,-16(fp)
   14e4c:	008000f4 	movhi	r2,3
   14e50:	10829304 	addi	r2,r2,2636
   14e54:	18c7883a 	add	r3,r3,r3
   14e58:	18c7883a 	add	r3,r3,r3
   14e5c:	10c5883a 	add	r2,r2,r3
   14e60:	10800017 	ldw	r2,0(r2)
   14e64:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   14e68:	e0bffd17 	ldw	r2,-12(fp)
   14e6c:	10000f26 	beq	r2,zero,14eac <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   14e70:	e0bffd17 	ldw	r2,-12(fp)
   14e74:	10800060 	cmpeqi	r2,r2,1
   14e78:	10000c1e 	bne	r2,zero,14eac <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   14e7c:	e0bffd17 	ldw	r2,-12(fp)
   14e80:	10c00217 	ldw	r3,8(r2)
   14e84:	e0bffd17 	ldw	r2,-12(fp)
   14e88:	10800317 	ldw	r2,12(r2)
   14e8c:	1085883a 	add	r2,r2,r2
   14e90:	1085883a 	add	r2,r2,r2
   14e94:	1887883a 	add	r3,r3,r2
   14e98:	e0bffd17 	ldw	r2,-12(fp)
   14e9c:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   14ea0:	e0ffff17 	ldw	r3,-4(fp)
   14ea4:	e0bffd17 	ldw	r2,-12(fp)
   14ea8:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   14eac:	e0bffc03 	ldbu	r2,-16(fp)
   14eb0:	10800044 	addi	r2,r2,1
   14eb4:	e0bffc05 	stb	r2,-16(fp)
   14eb8:	e0bffc03 	ldbu	r2,-16(fp)
   14ebc:	10800570 	cmpltui	r2,r2,21
   14ec0:	103fd91e 	bne	r2,zero,14e28 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
   14ec4:	0001883a 	nop
   14ec8:	e037883a 	mov	sp,fp
   14ecc:	dfc00117 	ldw	ra,4(sp)
   14ed0:	df000017 	ldw	fp,0(sp)
   14ed4:	dec00204 	addi	sp,sp,8
   14ed8:	f800283a 	ret

00014edc <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   14edc:	defff204 	addi	sp,sp,-56
   14ee0:	dfc00d15 	stw	ra,52(sp)
   14ee4:	df000c15 	stw	fp,48(sp)
   14ee8:	df000c04 	addi	fp,sp,48
   14eec:	e17ffc15 	stw	r5,-16(fp)
   14ef0:	e1bffd15 	stw	r6,-12(fp)
   14ef4:	3807883a 	mov	r3,r7
   14ef8:	e0800417 	ldw	r2,16(fp)
   14efc:	e13ffb05 	stb	r4,-20(fp)
   14f00:	e0fffe0d 	sth	r3,-8(fp)
   14f04:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   14f08:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14f0c:	0005303a 	rdctl	r2,status
   14f10:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14f14:	e0fffa17 	ldw	r3,-24(fp)
   14f18:	00bfff84 	movi	r2,-2
   14f1c:	1884703a 	and	r2,r3,r2
   14f20:	1001703a 	wrctl	status,r2
  
  return context;
   14f24:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
   14f28:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   14f2c:	d0a81817 	ldw	r2,-24480(gp)
   14f30:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
   14f34:	e0bff617 	ldw	r2,-40(fp)
   14f38:	10009326 	beq	r2,zero,15188 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   14f3c:	e0bff617 	ldw	r2,-40(fp)
   14f40:	10800517 	ldw	r2,20(r2)
   14f44:	d0a81815 	stw	r2,-24480(gp)
   14f48:	e0bff417 	ldw	r2,-48(fp)
   14f4c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14f50:	e0bff817 	ldw	r2,-32(fp)
   14f54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   14f58:	e0bff617 	ldw	r2,-40(fp)
   14f5c:	e0fffc17 	ldw	r3,-16(fp)
   14f60:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   14f64:	e0bff617 	ldw	r2,-40(fp)
   14f68:	e0fffb03 	ldbu	r3,-20(fp)
   14f6c:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   14f70:	e0bff617 	ldw	r2,-40(fp)
   14f74:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   14f78:	e0bff617 	ldw	r2,-40(fp)
   14f7c:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   14f80:	e0bff617 	ldw	r2,-40(fp)
   14f84:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   14f88:	e0bff617 	ldw	r2,-40(fp)
   14f8c:	e0c00317 	ldw	r3,12(fp)
   14f90:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   14f94:	e0bff617 	ldw	r2,-40(fp)
   14f98:	e0c00217 	ldw	r3,8(fp)
   14f9c:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   14fa0:	e0bff617 	ldw	r2,-40(fp)
   14fa4:	e0fffd17 	ldw	r3,-12(fp)
   14fa8:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   14fac:	e0bff617 	ldw	r2,-40(fp)
   14fb0:	e0ffff0b 	ldhu	r3,-4(fp)
   14fb4:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   14fb8:	e0bff617 	ldw	r2,-40(fp)
   14fbc:	e0fffe0b 	ldhu	r3,-8(fp)
   14fc0:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   14fc4:	e0bff617 	ldw	r2,-40(fp)
   14fc8:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   14fcc:	e0bffb03 	ldbu	r2,-20(fp)
   14fd0:	1004d0fa 	srli	r2,r2,3
   14fd4:	1007883a 	mov	r3,r2
   14fd8:	e0bff617 	ldw	r2,-40(fp)
   14fdc:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   14fe0:	e0bffb03 	ldbu	r2,-20(fp)
   14fe4:	108001cc 	andi	r2,r2,7
   14fe8:	1007883a 	mov	r3,r2
   14fec:	e0bff617 	ldw	r2,-40(fp)
   14ff0:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   14ff4:	e0bff617 	ldw	r2,-40(fp)
   14ff8:	10800d03 	ldbu	r2,52(r2)
   14ffc:	10803fcc 	andi	r2,r2,255
   15000:	00c00044 	movi	r3,1
   15004:	1884983a 	sll	r2,r3,r2
   15008:	1007883a 	mov	r3,r2
   1500c:	e0bff617 	ldw	r2,-40(fp)
   15010:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   15014:	e0bff617 	ldw	r2,-40(fp)
   15018:	10800cc3 	ldbu	r2,51(r2)
   1501c:	10803fcc 	andi	r2,r2,255
   15020:	00c00044 	movi	r3,1
   15024:	1884983a 	sll	r2,r3,r2
   15028:	1007883a 	mov	r3,r2
   1502c:	e0bff617 	ldw	r2,-40(fp)
   15030:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   15034:	e0bff617 	ldw	r2,-40(fp)
   15038:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   1503c:	e0bff617 	ldw	r2,-40(fp)
   15040:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   15044:	e0bff617 	ldw	r2,-40(fp)
   15048:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   1504c:	e0bff617 	ldw	r2,-40(fp)
   15050:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   15054:	e0bff617 	ldw	r2,-40(fp)
   15058:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   1505c:	e0bff617 	ldw	r2,-40(fp)
   15060:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   15064:	e0bff617 	ldw	r2,-40(fp)
   15068:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   1506c:	e0bff617 	ldw	r2,-40(fp)
   15070:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   15074:	e0bff617 	ldw	r2,-40(fp)
   15078:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   1507c:	e0bff617 	ldw	r2,-40(fp)
   15080:	00c00fc4 	movi	r3,63
   15084:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   15088:	e0bff617 	ldw	r2,-40(fp)
   1508c:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   15090:	e13ff617 	ldw	r4,-40(fp)
   15094:	001e1d80 	call	1e1d8 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   15098:	e13ff617 	ldw	r4,-40(fp)
   1509c:	001e0d00 	call	1e0d0 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   150a0:	0005303a 	rdctl	r2,status
   150a4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   150a8:	e0fff517 	ldw	r3,-44(fp)
   150ac:	00bfff84 	movi	r2,-2
   150b0:	1884703a 	and	r2,r3,r2
   150b4:	1001703a 	wrctl	status,r2
  
  return context;
   150b8:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
   150bc:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   150c0:	e0fffb03 	ldbu	r3,-20(fp)
   150c4:	008000f4 	movhi	r2,3
   150c8:	10829304 	addi	r2,r2,2636
   150cc:	18c7883a 	add	r3,r3,r3
   150d0:	18c7883a 	add	r3,r3,r3
   150d4:	10c5883a 	add	r2,r2,r3
   150d8:	e0fff617 	ldw	r3,-40(fp)
   150dc:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   150e0:	d0e81417 	ldw	r3,-24496(gp)
   150e4:	e0bff617 	ldw	r2,-40(fp)
   150e8:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   150ec:	e0bff617 	ldw	r2,-40(fp)
   150f0:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   150f4:	d0a81417 	ldw	r2,-24496(gp)
   150f8:	10000326 	beq	r2,zero,15108 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   150fc:	d0a81417 	ldw	r2,-24496(gp)
   15100:	e0fff617 	ldw	r3,-40(fp)
   15104:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   15108:	e0bff617 	ldw	r2,-40(fp)
   1510c:	d0a81415 	stw	r2,-24496(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   15110:	e0bff617 	ldw	r2,-40(fp)
   15114:	10c00d83 	ldbu	r3,54(r2)
   15118:	d0a81d03 	ldbu	r2,-24460(gp)
   1511c:	1884b03a 	or	r2,r3,r2
   15120:	d0a81d05 	stb	r2,-24460(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   15124:	e0bff617 	ldw	r2,-40(fp)
   15128:	10800d03 	ldbu	r2,52(r2)
   1512c:	10c03fcc 	andi	r3,r2,255
   15130:	e0bff617 	ldw	r2,-40(fp)
   15134:	10800d03 	ldbu	r2,52(r2)
   15138:	11003fcc 	andi	r4,r2,255
   1513c:	d0a81d44 	addi	r2,gp,-24459
   15140:	2085883a 	add	r2,r4,r2
   15144:	11000003 	ldbu	r4,0(r2)
   15148:	e0bff617 	ldw	r2,-40(fp)
   1514c:	10800d43 	ldbu	r2,53(r2)
   15150:	2084b03a 	or	r2,r4,r2
   15154:	1009883a 	mov	r4,r2
   15158:	d0a81d44 	addi	r2,gp,-24459
   1515c:	1885883a 	add	r2,r3,r2
   15160:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   15164:	d0a81943 	ldbu	r2,-24475(gp)
   15168:	10800044 	addi	r2,r2,1
   1516c:	d0a81945 	stb	r2,-24475(gp)
   15170:	e0bff417 	ldw	r2,-48(fp)
   15174:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15178:	e0bff717 	ldw	r2,-36(fp)
   1517c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   15180:	0005883a 	mov	r2,zero
   15184:	00000506 	br	1519c <OS_TCBInit+0x2c0>
   15188:	e0bff417 	ldw	r2,-48(fp)
   1518c:	e0bff915 	stw	r2,-28(fp)
   15190:	e0bff917 	ldw	r2,-28(fp)
   15194:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   15198:	00801084 	movi	r2,66
}
   1519c:	e037883a 	mov	sp,fp
   151a0:	dfc00117 	ldw	ra,4(sp)
   151a4:	df000017 	ldw	fp,0(sp)
   151a8:	dec00204 	addi	sp,sp,8
   151ac:	f800283a 	ret

000151b0 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   151b0:	defffe04 	addi	sp,sp,-8
   151b4:	df000115 	stw	fp,4(sp)
   151b8:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   151bc:	d0a01104 	addi	r2,gp,-32700
   151c0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   151c4:	d0a01204 	addi	r2,gp,-32696
   151c8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   151cc:	d0a01384 	addi	r2,gp,-32690
   151d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   151d4:	d0a01404 	addi	r2,gp,-32688
   151d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   151dc:	d0a01304 	addi	r2,gp,-32692
   151e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   151e4:	d0a01484 	addi	r2,gp,-32686
   151e8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   151ec:	d0a01504 	addi	r2,gp,-32684
   151f0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   151f4:	d0a01584 	addi	r2,gp,-32682
   151f8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   151fc:	d0a01604 	addi	r2,gp,-32680
   15200:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   15204:	d0a01684 	addi	r2,gp,-32678
   15208:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   1520c:	d0a01704 	addi	r2,gp,-32676
   15210:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   15214:	d0a01784 	addi	r2,gp,-32674
   15218:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   1521c:	d0a01804 	addi	r2,gp,-32672
   15220:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   15224:	d0a01884 	addi	r2,gp,-32670
   15228:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   1522c:	d0a01904 	addi	r2,gp,-32668
   15230:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   15234:	d0a01984 	addi	r2,gp,-32666
   15238:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   1523c:	d0a01a04 	addi	r2,gp,-32664
   15240:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   15244:	d0a01a84 	addi	r2,gp,-32662
   15248:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   1524c:	d0a01b04 	addi	r2,gp,-32660
   15250:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   15254:	d0a01b84 	addi	r2,gp,-32658
   15258:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   1525c:	d0a01c04 	addi	r2,gp,-32656
   15260:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   15264:	d0a01c84 	addi	r2,gp,-32654
   15268:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   1526c:	d0a01d04 	addi	r2,gp,-32652
   15270:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   15274:	d0a01d84 	addi	r2,gp,-32650
   15278:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   1527c:	d0a01e04 	addi	r2,gp,-32648
   15280:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   15284:	d0a01e84 	addi	r2,gp,-32646
   15288:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   1528c:	d0a01f04 	addi	r2,gp,-32644
   15290:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   15294:	d0a01f84 	addi	r2,gp,-32642
   15298:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   1529c:	d0a02004 	addi	r2,gp,-32640
   152a0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   152a4:	d0a02084 	addi	r2,gp,-32638
   152a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   152ac:	d0a02104 	addi	r2,gp,-32636
   152b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   152b4:	d0a02184 	addi	r2,gp,-32634
   152b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   152bc:	d0a02204 	addi	r2,gp,-32632
   152c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   152c4:	d0a02284 	addi	r2,gp,-32630
   152c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   152cc:	d0a02304 	addi	r2,gp,-32628
   152d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   152d4:	d0a02384 	addi	r2,gp,-32626
   152d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   152dc:	d0a02404 	addi	r2,gp,-32624
   152e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   152e4:	d0a02484 	addi	r2,gp,-32622
   152e8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   152ec:	d0a02504 	addi	r2,gp,-32620
   152f0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   152f4:	d0a02584 	addi	r2,gp,-32618
   152f8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   152fc:	d0a02604 	addi	r2,gp,-32616
   15300:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   15304:	d0a02684 	addi	r2,gp,-32614
   15308:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   1530c:	d0a02704 	addi	r2,gp,-32612
   15310:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   15314:	d0a02784 	addi	r2,gp,-32610
   15318:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   1531c:	d0a02804 	addi	r2,gp,-32608
   15320:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   15324:	d0a02d04 	addi	r2,gp,-32588
   15328:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   1532c:	0001883a 	nop
   15330:	e037883a 	mov	sp,fp
   15334:	df000017 	ldw	fp,0(sp)
   15338:	dec00104 	addi	sp,sp,4
   1533c:	f800283a 	ret

00015340 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   15340:	defff204 	addi	sp,sp,-56
   15344:	df000d15 	stw	fp,52(sp)
   15348:	df000d04 	addi	fp,sp,52
   1534c:	e13ffc15 	stw	r4,-16(fp)
   15350:	2807883a 	mov	r3,r5
   15354:	3005883a 	mov	r2,r6
   15358:	e1ffff15 	stw	r7,-4(fp)
   1535c:	e0fffd0d 	sth	r3,-12(fp)
   15360:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   15364:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   15368:	e0bfff17 	ldw	r2,-4(fp)
   1536c:	1000021e 	bne	r2,zero,15378 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   15370:	0005883a 	mov	r2,zero
   15374:	0000b006 	br	15638 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   15378:	e0bffc17 	ldw	r2,-16(fp)
   1537c:	1000051e 	bne	r2,zero,15394 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   15380:	e0bfff17 	ldw	r2,-4(fp)
   15384:	00c01b84 	movi	r3,110
   15388:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1538c:	0005883a 	mov	r2,zero
   15390:	0000a906 	br	15638 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   15394:	e0bffc17 	ldw	r2,-16(fp)
   15398:	10800003 	ldbu	r2,0(r2)
   1539c:	10803fcc 	andi	r2,r2,255
   153a0:	10800160 	cmpeqi	r2,r2,5
   153a4:	1000051e 	bne	r2,zero,153bc <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   153a8:	e0bfff17 	ldw	r2,-4(fp)
   153ac:	00c00044 	movi	r3,1
   153b0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   153b4:	0005883a 	mov	r2,zero
   153b8:	00009f06 	br	15638 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   153bc:	e0fffe03 	ldbu	r3,-8(fp)
   153c0:	00bfe004 	movi	r2,-128
   153c4:	1884703a 	and	r2,r3,r2
   153c8:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   153cc:	e0bff503 	ldbu	r2,-44(fp)
   153d0:	10000626 	beq	r2,zero,153ec <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   153d4:	e0bffe03 	ldbu	r2,-8(fp)
   153d8:	10801fcc 	andi	r2,r2,127
   153dc:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   153e0:	00800044 	movi	r2,1
   153e4:	e0bff385 	stb	r2,-50(fp)
   153e8:	00000106 	br	153f0 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   153ec:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   153f0:	e0bfff17 	ldw	r2,-4(fp)
   153f4:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   153f8:	0005303a 	rdctl	r2,status
   153fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15400:	e0fffb17 	ldw	r3,-20(fp)
   15404:	00bfff84 	movi	r2,-2
   15408:	1884703a 	and	r2,r3,r2
   1540c:	1001703a 	wrctl	status,r2
  
  return context;
   15410:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   15414:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   15418:	e0bffe03 	ldbu	r2,-8(fp)
   1541c:	10c00060 	cmpeqi	r3,r2,1
   15420:	18005f1e 	bne	r3,zero,155a0 <OSFlagAccept+0x260>
   15424:	10c00088 	cmpgei	r3,r2,2
   15428:	1800021e 	bne	r3,zero,15434 <OSFlagAccept+0xf4>
   1542c:	10003f26 	beq	r2,zero,1552c <OSFlagAccept+0x1ec>
   15430:	00007706 	br	15610 <OSFlagAccept+0x2d0>
   15434:	10c000a0 	cmpeqi	r3,r2,2
   15438:	1800031e 	bne	r3,zero,15448 <OSFlagAccept+0x108>
   1543c:	108000e0 	cmpeqi	r2,r2,3
   15440:	10001e1e 	bne	r2,zero,154bc <OSFlagAccept+0x17c>
   15444:	00007206 	br	15610 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   15448:	e0bffc17 	ldw	r2,-16(fp)
   1544c:	10c0020b 	ldhu	r3,8(r2)
   15450:	e0bffd0b 	ldhu	r2,-12(fp)
   15454:	1884703a 	and	r2,r3,r2
   15458:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1545c:	e0fff30b 	ldhu	r3,-52(fp)
   15460:	e0bffd0b 	ldhu	r2,-12(fp)
   15464:	18800d1e 	bne	r3,r2,1549c <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15468:	e0bff383 	ldbu	r2,-50(fp)
   1546c:	10800058 	cmpnei	r2,r2,1
   15470:	10000d1e 	bne	r2,zero,154a8 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   15474:	e0bffc17 	ldw	r2,-16(fp)
   15478:	1080020b 	ldhu	r2,8(r2)
   1547c:	1007883a 	mov	r3,r2
   15480:	e0bff30b 	ldhu	r2,-52(fp)
   15484:	0084303a 	nor	r2,zero,r2
   15488:	1884703a 	and	r2,r3,r2
   1548c:	1007883a 	mov	r3,r2
   15490:	e0bffc17 	ldw	r2,-16(fp)
   15494:	10c0020d 	sth	r3,8(r2)
   15498:	00000306 	br	154a8 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1549c:	e0bfff17 	ldw	r2,-4(fp)
   154a0:	00c01c04 	movi	r3,112
   154a4:	10c00005 	stb	r3,0(r2)
   154a8:	e0bff417 	ldw	r2,-48(fp)
   154ac:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   154b0:	e0bff617 	ldw	r2,-40(fp)
   154b4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   154b8:	00005e06 	br	15634 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   154bc:	e0bffc17 	ldw	r2,-16(fp)
   154c0:	10c0020b 	ldhu	r3,8(r2)
   154c4:	e0bffd0b 	ldhu	r2,-12(fp)
   154c8:	1884703a 	and	r2,r3,r2
   154cc:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   154d0:	e0bff30b 	ldhu	r2,-52(fp)
   154d4:	10000d26 	beq	r2,zero,1550c <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   154d8:	e0bff383 	ldbu	r2,-50(fp)
   154dc:	10800058 	cmpnei	r2,r2,1
   154e0:	10000d1e 	bne	r2,zero,15518 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   154e4:	e0bffc17 	ldw	r2,-16(fp)
   154e8:	1080020b 	ldhu	r2,8(r2)
   154ec:	1007883a 	mov	r3,r2
   154f0:	e0bff30b 	ldhu	r2,-52(fp)
   154f4:	0084303a 	nor	r2,zero,r2
   154f8:	1884703a 	and	r2,r3,r2
   154fc:	1007883a 	mov	r3,r2
   15500:	e0bffc17 	ldw	r2,-16(fp)
   15504:	10c0020d 	sth	r3,8(r2)
   15508:	00000306 	br	15518 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1550c:	e0bfff17 	ldw	r2,-4(fp)
   15510:	00c01c04 	movi	r3,112
   15514:	10c00005 	stb	r3,0(r2)
   15518:	e0bff417 	ldw	r2,-48(fp)
   1551c:	e0bff715 	stw	r2,-36(fp)
   15520:	e0bff717 	ldw	r2,-36(fp)
   15524:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   15528:	00004206 	br	15634 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   1552c:	e0bffc17 	ldw	r2,-16(fp)
   15530:	1080020b 	ldhu	r2,8(r2)
   15534:	0084303a 	nor	r2,zero,r2
   15538:	1007883a 	mov	r3,r2
   1553c:	e0bffd0b 	ldhu	r2,-12(fp)
   15540:	1884703a 	and	r2,r3,r2
   15544:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   15548:	e0fff30b 	ldhu	r3,-52(fp)
   1554c:	e0bffd0b 	ldhu	r2,-12(fp)
   15550:	18800b1e 	bne	r3,r2,15580 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15554:	e0bff383 	ldbu	r2,-50(fp)
   15558:	10800058 	cmpnei	r2,r2,1
   1555c:	10000b1e 	bne	r2,zero,1558c <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   15560:	e0bffc17 	ldw	r2,-16(fp)
   15564:	10c0020b 	ldhu	r3,8(r2)
   15568:	e0bff30b 	ldhu	r2,-52(fp)
   1556c:	1884b03a 	or	r2,r3,r2
   15570:	1007883a 	mov	r3,r2
   15574:	e0bffc17 	ldw	r2,-16(fp)
   15578:	10c0020d 	sth	r3,8(r2)
   1557c:	00000306 	br	1558c <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   15580:	e0bfff17 	ldw	r2,-4(fp)
   15584:	00c01c04 	movi	r3,112
   15588:	10c00005 	stb	r3,0(r2)
   1558c:	e0bff417 	ldw	r2,-48(fp)
   15590:	e0bff815 	stw	r2,-32(fp)
   15594:	e0bff817 	ldw	r2,-32(fp)
   15598:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1559c:	00002506 	br	15634 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   155a0:	e0bffc17 	ldw	r2,-16(fp)
   155a4:	1080020b 	ldhu	r2,8(r2)
   155a8:	0084303a 	nor	r2,zero,r2
   155ac:	1007883a 	mov	r3,r2
   155b0:	e0bffd0b 	ldhu	r2,-12(fp)
   155b4:	1884703a 	and	r2,r3,r2
   155b8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   155bc:	e0bff30b 	ldhu	r2,-52(fp)
   155c0:	10000b26 	beq	r2,zero,155f0 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   155c4:	e0bff383 	ldbu	r2,-50(fp)
   155c8:	10800058 	cmpnei	r2,r2,1
   155cc:	10000b1e 	bne	r2,zero,155fc <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   155d0:	e0bffc17 	ldw	r2,-16(fp)
   155d4:	10c0020b 	ldhu	r3,8(r2)
   155d8:	e0bff30b 	ldhu	r2,-52(fp)
   155dc:	1884b03a 	or	r2,r3,r2
   155e0:	1007883a 	mov	r3,r2
   155e4:	e0bffc17 	ldw	r2,-16(fp)
   155e8:	10c0020d 	sth	r3,8(r2)
   155ec:	00000306 	br	155fc <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   155f0:	e0bfff17 	ldw	r2,-4(fp)
   155f4:	00c01c04 	movi	r3,112
   155f8:	10c00005 	stb	r3,0(r2)
   155fc:	e0bff417 	ldw	r2,-48(fp)
   15600:	e0bff915 	stw	r2,-28(fp)
   15604:	e0bff917 	ldw	r2,-28(fp)
   15608:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1560c:	00000906 	br	15634 <OSFlagAccept+0x2f4>
   15610:	e0bff417 	ldw	r2,-48(fp)
   15614:	e0bffa15 	stw	r2,-24(fp)
   15618:	e0bffa17 	ldw	r2,-24(fp)
   1561c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   15620:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   15624:	e0bfff17 	ldw	r2,-4(fp)
   15628:	00c01bc4 	movi	r3,111
   1562c:	10c00005 	stb	r3,0(r2)
             break;
   15630:	0001883a 	nop
    }
    return (flags_rdy);
   15634:	e0bff30b 	ldhu	r2,-52(fp)
}
   15638:	e037883a 	mov	sp,fp
   1563c:	df000017 	ldw	fp,0(sp)
   15640:	dec00104 	addi	sp,sp,4
   15644:	f800283a 	ret

00015648 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   15648:	defff804 	addi	sp,sp,-32
   1564c:	df000715 	stw	fp,28(sp)
   15650:	df000704 	addi	fp,sp,28
   15654:	2005883a 	mov	r2,r4
   15658:	e17fff15 	stw	r5,-4(fp)
   1565c:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   15660:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   15664:	e0bfff17 	ldw	r2,-4(fp)
   15668:	1000021e 	bne	r2,zero,15674 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   1566c:	0005883a 	mov	r2,zero
   15670:	00003306 	br	15740 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   15674:	d0a81f03 	ldbu	r2,-24452(gp)
   15678:	10803fcc 	andi	r2,r2,255
   1567c:	10000526 	beq	r2,zero,15694 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   15680:	e0bfff17 	ldw	r2,-4(fp)
   15684:	00c00404 	movi	r3,16
   15688:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   1568c:	0005883a 	mov	r2,zero
   15690:	00002b06 	br	15740 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15694:	0005303a 	rdctl	r2,status
   15698:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1569c:	e0fffd17 	ldw	r3,-12(fp)
   156a0:	00bfff84 	movi	r2,-2
   156a4:	1884703a 	and	r2,r3,r2
   156a8:	1001703a 	wrctl	status,r2
  
  return context;
   156ac:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   156b0:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   156b4:	d0a82217 	ldw	r2,-24440(gp)
   156b8:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   156bc:	e0bffb17 	ldw	r2,-20(fp)
   156c0:	10001726 	beq	r2,zero,15720 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   156c4:	d0a82217 	ldw	r2,-24440(gp)
   156c8:	10800117 	ldw	r2,4(r2)
   156cc:	d0a82215 	stw	r2,-24440(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   156d0:	e0bffb17 	ldw	r2,-20(fp)
   156d4:	00c00144 	movi	r3,5
   156d8:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   156dc:	e0bffb17 	ldw	r2,-20(fp)
   156e0:	e0fffe0b 	ldhu	r3,-8(fp)
   156e4:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   156e8:	e0bffb17 	ldw	r2,-20(fp)
   156ec:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   156f0:	e0bffb17 	ldw	r2,-20(fp)
   156f4:	00c00fc4 	movi	r3,63
   156f8:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   156fc:	e0bffb17 	ldw	r2,-20(fp)
   15700:	100002c5 	stb	zero,11(r2)
   15704:	e0bff917 	ldw	r2,-28(fp)
   15708:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1570c:	e0bffa17 	ldw	r2,-24(fp)
   15710:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   15714:	e0bfff17 	ldw	r2,-4(fp)
   15718:	10000005 	stb	zero,0(r2)
   1571c:	00000706 	br	1573c <OSFlagCreate+0xf4>
   15720:	e0bff917 	ldw	r2,-28(fp)
   15724:	e0bffc15 	stw	r2,-16(fp)
   15728:	e0bffc17 	ldw	r2,-16(fp)
   1572c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   15730:	e0bfff17 	ldw	r2,-4(fp)
   15734:	00c01c84 	movi	r3,114
   15738:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   1573c:	e0bffb17 	ldw	r2,-20(fp)
}
   15740:	e037883a 	mov	sp,fp
   15744:	df000017 	ldw	fp,0(sp)
   15748:	dec00104 	addi	sp,sp,4
   1574c:	f800283a 	ret

00015750 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   15750:	defff204 	addi	sp,sp,-56
   15754:	dfc00d15 	stw	ra,52(sp)
   15758:	df000c15 	stw	fp,48(sp)
   1575c:	df000c04 	addi	fp,sp,48
   15760:	e13ffd15 	stw	r4,-12(fp)
   15764:	2805883a 	mov	r2,r5
   15768:	e1bfff15 	stw	r6,-4(fp)
   1576c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   15770:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   15774:	e0bfff17 	ldw	r2,-4(fp)
   15778:	1000021e 	bne	r2,zero,15784 <OSFlagDel+0x34>
        return (pgrp);
   1577c:	e0bffd17 	ldw	r2,-12(fp)
   15780:	00008006 	br	15984 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   15784:	e0bffd17 	ldw	r2,-12(fp)
   15788:	1000051e 	bne	r2,zero,157a0 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1578c:	e0bfff17 	ldw	r2,-4(fp)
   15790:	00c01b84 	movi	r3,110
   15794:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   15798:	e0bffd17 	ldw	r2,-12(fp)
   1579c:	00007906 	br	15984 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   157a0:	d0a81f03 	ldbu	r2,-24452(gp)
   157a4:	10803fcc 	andi	r2,r2,255
   157a8:	10000526 	beq	r2,zero,157c0 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   157ac:	e0bfff17 	ldw	r2,-4(fp)
   157b0:	00c003c4 	movi	r3,15
   157b4:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   157b8:	e0bffd17 	ldw	r2,-12(fp)
   157bc:	00007106 	br	15984 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   157c0:	e0bffd17 	ldw	r2,-12(fp)
   157c4:	10800003 	ldbu	r2,0(r2)
   157c8:	10803fcc 	andi	r2,r2,255
   157cc:	10800160 	cmpeqi	r2,r2,5
   157d0:	1000051e 	bne	r2,zero,157e8 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
   157d4:	e0bfff17 	ldw	r2,-4(fp)
   157d8:	00c00044 	movi	r3,1
   157dc:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   157e0:	e0bffd17 	ldw	r2,-12(fp)
   157e4:	00006706 	br	15984 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   157e8:	0005303a 	rdctl	r2,status
   157ec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   157f0:	e0fffc17 	ldw	r3,-16(fp)
   157f4:	00bfff84 	movi	r2,-2
   157f8:	1884703a 	and	r2,r3,r2
   157fc:	1001703a 	wrctl	status,r2
  
  return context;
   15800:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   15804:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   15808:	e0bffd17 	ldw	r2,-12(fp)
   1580c:	10800117 	ldw	r2,4(r2)
   15810:	10000326 	beq	r2,zero,15820 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   15814:	00800044 	movi	r2,1
   15818:	e0bff405 	stb	r2,-48(fp)
   1581c:	00000106 	br	15824 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   15820:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   15824:	e0bffe03 	ldbu	r2,-8(fp)
   15828:	10000326 	beq	r2,zero,15838 <OSFlagDel+0xe8>
   1582c:	10800060 	cmpeqi	r2,r2,1
   15830:	1000231e 	bne	r2,zero,158c0 <OSFlagDel+0x170>
   15834:	00004806 	br	15958 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   15838:	e0bff403 	ldbu	r2,-48(fp)
   1583c:	1000161e 	bne	r2,zero,15898 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   15840:	e0bffd17 	ldw	r2,-12(fp)
   15844:	00c00fc4 	movi	r3,63
   15848:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   1584c:	e0bffd17 	ldw	r2,-12(fp)
   15850:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   15854:	e0bffd17 	ldw	r2,-12(fp)
   15858:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   1585c:	d0e82217 	ldw	r3,-24440(gp)
   15860:	e0bffd17 	ldw	r2,-12(fp)
   15864:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   15868:	e0bffd17 	ldw	r2,-12(fp)
   1586c:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   15870:	e0bffd17 	ldw	r2,-12(fp)
   15874:	d0a82215 	stw	r2,-24440(gp)
   15878:	e0bff717 	ldw	r2,-36(fp)
   1587c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15880:	e0bff817 	ldw	r2,-32(fp)
   15884:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   15888:	e0bfff17 	ldw	r2,-4(fp)
   1588c:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   15890:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   15894:	00003a06 	br	15980 <OSFlagDel+0x230>
   15898:	e0bff717 	ldw	r2,-36(fp)
   1589c:	e0bff915 	stw	r2,-28(fp)
   158a0:	e0bff917 	ldw	r2,-28(fp)
   158a4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   158a8:	e0bfff17 	ldw	r2,-4(fp)
   158ac:	00c01244 	movi	r3,73
   158b0:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   158b4:	e0bffd17 	ldw	r2,-12(fp)
   158b8:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   158bc:	00003006 	br	15980 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   158c0:	e0bffd17 	ldw	r2,-12(fp)
   158c4:	10800117 	ldw	r2,4(r2)
   158c8:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   158cc:	00000606 	br	158e8 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   158d0:	000b883a 	mov	r5,zero
   158d4:	e13ff517 	ldw	r4,-44(fp)
   158d8:	00168bc0 	call	168bc <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   158dc:	e0bff517 	ldw	r2,-44(fp)
   158e0:	10800017 	ldw	r2,0(r2)
   158e4:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   158e8:	e0bff517 	ldw	r2,-44(fp)
   158ec:	103ff81e 	bne	r2,zero,158d0 <OSFlagDel+0x180>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   158f0:	e0bffd17 	ldw	r2,-12(fp)
   158f4:	00c00fc4 	movi	r3,63
   158f8:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   158fc:	e0bffd17 	ldw	r2,-12(fp)
   15900:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   15904:	e0bffd17 	ldw	r2,-12(fp)
   15908:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   1590c:	d0e82217 	ldw	r3,-24440(gp)
   15910:	e0bffd17 	ldw	r2,-12(fp)
   15914:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   15918:	e0bffd17 	ldw	r2,-12(fp)
   1591c:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   15920:	e0bffd17 	ldw	r2,-12(fp)
   15924:	d0a82215 	stw	r2,-24440(gp)
   15928:	e0bff717 	ldw	r2,-36(fp)
   1592c:	e0bffa15 	stw	r2,-24(fp)
   15930:	e0bffa17 	ldw	r2,-24(fp)
   15934:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   15938:	e0bff403 	ldbu	r2,-48(fp)
   1593c:	10800058 	cmpnei	r2,r2,1
   15940:	1000011e 	bne	r2,zero,15948 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   15944:	0014acc0 	call	14acc <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   15948:	e0bfff17 	ldw	r2,-4(fp)
   1594c:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   15950:	e03ff615 	stw	zero,-40(fp)
             break;
   15954:	00000a06 	br	15980 <OSFlagDel+0x230>
   15958:	e0bff717 	ldw	r2,-36(fp)
   1595c:	e0bffb15 	stw	r2,-20(fp)
   15960:	e0bffb17 	ldw	r2,-20(fp)
   15964:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   15968:	e0bfff17 	ldw	r2,-4(fp)
   1596c:	00c001c4 	movi	r3,7
   15970:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   15974:	e0bffd17 	ldw	r2,-12(fp)
   15978:	e0bff615 	stw	r2,-40(fp)
             break;
   1597c:	0001883a 	nop
    }
    return (pgrp_return);
   15980:	e0bff617 	ldw	r2,-40(fp)
}
   15984:	e037883a 	mov	sp,fp
   15988:	dfc00117 	ldw	ra,4(sp)
   1598c:	df000017 	ldw	fp,0(sp)
   15990:	dec00204 	addi	sp,sp,8
   15994:	f800283a 	ret

00015998 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   15998:	defff604 	addi	sp,sp,-40
   1599c:	dfc00915 	stw	ra,36(sp)
   159a0:	df000815 	stw	fp,32(sp)
   159a4:	df000804 	addi	fp,sp,32
   159a8:	e13ffd15 	stw	r4,-12(fp)
   159ac:	e17ffe15 	stw	r5,-8(fp)
   159b0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   159b4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   159b8:	e0bfff17 	ldw	r2,-4(fp)
   159bc:	1000021e 	bne	r2,zero,159c8 <OSFlagNameGet+0x30>
        return (0);
   159c0:	0005883a 	mov	r2,zero
   159c4:	00003906 	br	15aac <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   159c8:	e0bffd17 	ldw	r2,-12(fp)
   159cc:	1000051e 	bne	r2,zero,159e4 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   159d0:	e0bfff17 	ldw	r2,-4(fp)
   159d4:	00c01b84 	movi	r3,110
   159d8:	10c00005 	stb	r3,0(r2)
        return (0);
   159dc:	0005883a 	mov	r2,zero
   159e0:	00003206 	br	15aac <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   159e4:	e0bffe17 	ldw	r2,-8(fp)
   159e8:	1000051e 	bne	r2,zero,15a00 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   159ec:	e0bfff17 	ldw	r2,-4(fp)
   159f0:	00c00304 	movi	r3,12
   159f4:	10c00005 	stb	r3,0(r2)
        return (0);
   159f8:	0005883a 	mov	r2,zero
   159fc:	00002b06 	br	15aac <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   15a00:	d0a81f03 	ldbu	r2,-24452(gp)
   15a04:	10803fcc 	andi	r2,r2,255
   15a08:	10000526 	beq	r2,zero,15a20 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   15a0c:	e0bfff17 	ldw	r2,-4(fp)
   15a10:	00c00444 	movi	r3,17
   15a14:	10c00005 	stb	r3,0(r2)
        return (0);
   15a18:	0005883a 	mov	r2,zero
   15a1c:	00002306 	br	15aac <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15a20:	0005303a 	rdctl	r2,status
   15a24:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15a28:	e0fffc17 	ldw	r3,-16(fp)
   15a2c:	00bfff84 	movi	r2,-2
   15a30:	1884703a 	and	r2,r3,r2
   15a34:	1001703a 	wrctl	status,r2
  
  return context;
   15a38:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   15a3c:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   15a40:	e0bffd17 	ldw	r2,-12(fp)
   15a44:	10800003 	ldbu	r2,0(r2)
   15a48:	10803fcc 	andi	r2,r2,255
   15a4c:	10800160 	cmpeqi	r2,r2,5
   15a50:	1000091e 	bne	r2,zero,15a78 <OSFlagNameGet+0xe0>
   15a54:	e0bff817 	ldw	r2,-32(fp)
   15a58:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15a5c:	e0bff917 	ldw	r2,-28(fp)
   15a60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   15a64:	e0bfff17 	ldw	r2,-4(fp)
   15a68:	00c00044 	movi	r3,1
   15a6c:	10c00005 	stb	r3,0(r2)
        return (0);
   15a70:	0005883a 	mov	r2,zero
   15a74:	00000d06 	br	15aac <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   15a78:	e0bffd17 	ldw	r2,-12(fp)
   15a7c:	10800284 	addi	r2,r2,10
   15a80:	100b883a 	mov	r5,r2
   15a84:	e13ffe17 	ldw	r4,-8(fp)
   15a88:	0014c100 	call	14c10 <OS_StrCopy>
   15a8c:	e0bffb05 	stb	r2,-20(fp)
   15a90:	e0bff817 	ldw	r2,-32(fp)
   15a94:	e0bffa15 	stw	r2,-24(fp)
   15a98:	e0bffa17 	ldw	r2,-24(fp)
   15a9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   15aa0:	e0bfff17 	ldw	r2,-4(fp)
   15aa4:	10000005 	stb	zero,0(r2)
    return (len);
   15aa8:	e0bffb03 	ldbu	r2,-20(fp)
}
   15aac:	e037883a 	mov	sp,fp
   15ab0:	dfc00117 	ldw	ra,4(sp)
   15ab4:	df000017 	ldw	fp,0(sp)
   15ab8:	dec00204 	addi	sp,sp,8
   15abc:	f800283a 	ret

00015ac0 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   15ac0:	defff504 	addi	sp,sp,-44
   15ac4:	dfc00a15 	stw	ra,40(sp)
   15ac8:	df000915 	stw	fp,36(sp)
   15acc:	df000904 	addi	fp,sp,36
   15ad0:	e13ffd15 	stw	r4,-12(fp)
   15ad4:	e17ffe15 	stw	r5,-8(fp)
   15ad8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15adc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   15ae0:	e0bfff17 	ldw	r2,-4(fp)
   15ae4:	10004326 	beq	r2,zero,15bf4 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   15ae8:	e0bffd17 	ldw	r2,-12(fp)
   15aec:	1000041e 	bne	r2,zero,15b00 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   15af0:	e0bfff17 	ldw	r2,-4(fp)
   15af4:	00c01b84 	movi	r3,110
   15af8:	10c00005 	stb	r3,0(r2)
        return;
   15afc:	00003e06 	br	15bf8 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   15b00:	e0bffe17 	ldw	r2,-8(fp)
   15b04:	1000041e 	bne	r2,zero,15b18 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   15b08:	e0bfff17 	ldw	r2,-4(fp)
   15b0c:	00c00304 	movi	r3,12
   15b10:	10c00005 	stb	r3,0(r2)
        return;
   15b14:	00003806 	br	15bf8 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   15b18:	d0a81f03 	ldbu	r2,-24452(gp)
   15b1c:	10803fcc 	andi	r2,r2,255
   15b20:	10000426 	beq	r2,zero,15b34 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   15b24:	e0bfff17 	ldw	r2,-4(fp)
   15b28:	00c00484 	movi	r3,18
   15b2c:	10c00005 	stb	r3,0(r2)
        return;
   15b30:	00003106 	br	15bf8 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15b34:	0005303a 	rdctl	r2,status
   15b38:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15b3c:	e0fffc17 	ldw	r3,-16(fp)
   15b40:	00bfff84 	movi	r2,-2
   15b44:	1884703a 	and	r2,r3,r2
   15b48:	1001703a 	wrctl	status,r2
  
  return context;
   15b4c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   15b50:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   15b54:	e0bffd17 	ldw	r2,-12(fp)
   15b58:	10800003 	ldbu	r2,0(r2)
   15b5c:	10803fcc 	andi	r2,r2,255
   15b60:	10800160 	cmpeqi	r2,r2,5
   15b64:	1000081e 	bne	r2,zero,15b88 <OSFlagNameSet+0xc8>
   15b68:	e0bff717 	ldw	r2,-36(fp)
   15b6c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15b70:	e0bff817 	ldw	r2,-32(fp)
   15b74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   15b78:	e0bfff17 	ldw	r2,-4(fp)
   15b7c:	00c00044 	movi	r3,1
   15b80:	10c00005 	stb	r3,0(r2)
        return;
   15b84:	00001c06 	br	15bf8 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   15b88:	e13ffe17 	ldw	r4,-8(fp)
   15b8c:	0014c840 	call	14c84 <OS_StrLen>
   15b90:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   15b94:	e0bffa03 	ldbu	r2,-24(fp)
   15b98:	10800830 	cmpltui	r2,r2,32
   15b9c:	1000081e 	bne	r2,zero,15bc0 <OSFlagNameSet+0x100>
   15ba0:	e0bff717 	ldw	r2,-36(fp)
   15ba4:	e0bff915 	stw	r2,-28(fp)
   15ba8:	e0bff917 	ldw	r2,-28(fp)
   15bac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   15bb0:	e0bfff17 	ldw	r2,-4(fp)
   15bb4:	00c01cc4 	movi	r3,115
   15bb8:	10c00005 	stb	r3,0(r2)
        return;
   15bbc:	00000e06 	br	15bf8 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   15bc0:	e0bffd17 	ldw	r2,-12(fp)
   15bc4:	10800284 	addi	r2,r2,10
   15bc8:	e17ffe17 	ldw	r5,-8(fp)
   15bcc:	1009883a 	mov	r4,r2
   15bd0:	0014c100 	call	14c10 <OS_StrCopy>
   15bd4:	e0bff717 	ldw	r2,-36(fp)
   15bd8:	e0bffb15 	stw	r2,-20(fp)
   15bdc:	e0bffb17 	ldw	r2,-20(fp)
   15be0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   15be4:	e0bfff17 	ldw	r2,-4(fp)
   15be8:	10000005 	stb	zero,0(r2)
    return;
   15bec:	0001883a 	nop
   15bf0:	00000106 	br	15bf8 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   15bf4:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
   15bf8:	e037883a 	mov	sp,fp
   15bfc:	dfc00117 	ldw	ra,4(sp)
   15c00:	df000017 	ldw	fp,0(sp)
   15c04:	dec00204 	addi	sp,sp,8
   15c08:	f800283a 	ret

00015c0c <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   15c0c:	deffe104 	addi	sp,sp,-124
   15c10:	dfc01e15 	stw	ra,120(sp)
   15c14:	df001d15 	stw	fp,116(sp)
   15c18:	df001d04 	addi	fp,sp,116
   15c1c:	e13ffc15 	stw	r4,-16(fp)
   15c20:	2809883a 	mov	r4,r5
   15c24:	3007883a 	mov	r3,r6
   15c28:	3805883a 	mov	r2,r7
   15c2c:	e13ffd0d 	sth	r4,-12(fp)
   15c30:	e0fffe05 	stb	r3,-8(fp)
   15c34:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   15c38:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   15c3c:	e0800217 	ldw	r2,8(fp)
   15c40:	1000021e 	bne	r2,zero,15c4c <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   15c44:	0005883a 	mov	r2,zero
   15c48:	00015906 	br	161b0 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   15c4c:	e0bffc17 	ldw	r2,-16(fp)
   15c50:	1000051e 	bne	r2,zero,15c68 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   15c54:	e0800217 	ldw	r2,8(fp)
   15c58:	00c01b84 	movi	r3,110
   15c5c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15c60:	0005883a 	mov	r2,zero
   15c64:	00015206 	br	161b0 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   15c68:	d0a81f03 	ldbu	r2,-24452(gp)
   15c6c:	10803fcc 	andi	r2,r2,255
   15c70:	10000526 	beq	r2,zero,15c88 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   15c74:	e0800217 	ldw	r2,8(fp)
   15c78:	00c00084 	movi	r3,2
   15c7c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15c80:	0005883a 	mov	r2,zero
   15c84:	00014a06 	br	161b0 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   15c88:	d0a81103 	ldbu	r2,-24508(gp)
   15c8c:	10803fcc 	andi	r2,r2,255
   15c90:	10000526 	beq	r2,zero,15ca8 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   15c94:	e0800217 	ldw	r2,8(fp)
   15c98:	00c00344 	movi	r3,13
   15c9c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15ca0:	0005883a 	mov	r2,zero
   15ca4:	00014206 	br	161b0 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   15ca8:	e0bffc17 	ldw	r2,-16(fp)
   15cac:	10800003 	ldbu	r2,0(r2)
   15cb0:	10803fcc 	andi	r2,r2,255
   15cb4:	10800160 	cmpeqi	r2,r2,5
   15cb8:	1000051e 	bne	r2,zero,15cd0 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
   15cbc:	e0800217 	ldw	r2,8(fp)
   15cc0:	00c00044 	movi	r3,1
   15cc4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15cc8:	0005883a 	mov	r2,zero
   15ccc:	00013806 	br	161b0 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   15cd0:	e0fffe03 	ldbu	r3,-8(fp)
   15cd4:	00bfe004 	movi	r2,-128
   15cd8:	1884703a 	and	r2,r3,r2
   15cdc:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   15ce0:	e0bfe603 	ldbu	r2,-104(fp)
   15ce4:	10000626 	beq	r2,zero,15d00 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   15ce8:	e0bffe03 	ldbu	r2,-8(fp)
   15cec:	10801fcc 	andi	r2,r2,127
   15cf0:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   15cf4:	00800044 	movi	r2,1
   15cf8:	e0bfe405 	stb	r2,-112(fp)
   15cfc:	00000106 	br	15d04 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
   15d00:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15d04:	0005303a 	rdctl	r2,status
   15d08:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15d0c:	e0fff617 	ldw	r3,-40(fp)
   15d10:	00bfff84 	movi	r2,-2
   15d14:	1884703a 	and	r2,r3,r2
   15d18:	1001703a 	wrctl	status,r2
  
  return context;
   15d1c:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   15d20:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
   15d24:	e0bffe03 	ldbu	r2,-8(fp)
   15d28:	10c00060 	cmpeqi	r3,r2,1
   15d2c:	1800921e 	bne	r3,zero,15f78 <OSFlagPend+0x36c>
   15d30:	10c00088 	cmpgei	r3,r2,2
   15d34:	1800021e 	bne	r3,zero,15d40 <OSFlagPend+0x134>
   15d38:	10006126 	beq	r2,zero,15ec0 <OSFlagPend+0x2b4>
   15d3c:	0000bb06 	br	1602c <OSFlagPend+0x420>
   15d40:	10c000a0 	cmpeqi	r3,r2,2
   15d44:	1800031e 	bne	r3,zero,15d54 <OSFlagPend+0x148>
   15d48:	108000e0 	cmpeqi	r2,r2,3
   15d4c:	10002f1e 	bne	r2,zero,15e0c <OSFlagPend+0x200>
   15d50:	0000b606 	br	1602c <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   15d54:	e0bffc17 	ldw	r2,-16(fp)
   15d58:	10c0020b 	ldhu	r3,8(r2)
   15d5c:	e0bffd0b 	ldhu	r2,-12(fp)
   15d60:	1884703a 	and	r2,r3,r2
   15d64:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   15d68:	e0ffe80b 	ldhu	r3,-96(fp)
   15d6c:	e0bffd0b 	ldhu	r2,-12(fp)
   15d70:	1880171e 	bne	r3,r2,15dd0 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15d74:	e0bfe403 	ldbu	r2,-112(fp)
   15d78:	10800058 	cmpnei	r2,r2,1
   15d7c:	1000091e 	bne	r2,zero,15da4 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   15d80:	e0bffc17 	ldw	r2,-16(fp)
   15d84:	1080020b 	ldhu	r2,8(r2)
   15d88:	1007883a 	mov	r3,r2
   15d8c:	e0bfe80b 	ldhu	r2,-96(fp)
   15d90:	0084303a 	nor	r2,zero,r2
   15d94:	1884703a 	and	r2,r3,r2
   15d98:	1007883a 	mov	r3,r2
   15d9c:	e0bffc17 	ldw	r2,-16(fp)
   15da0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   15da4:	d0a82017 	ldw	r2,-24448(gp)
   15da8:	e0ffe80b 	ldhu	r3,-96(fp)
   15dac:	10c00b0d 	sth	r3,44(r2)
   15db0:	e0bfe517 	ldw	r2,-108(fp)
   15db4:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15db8:	e0bfe717 	ldw	r2,-100(fp)
   15dbc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   15dc0:	e0800217 	ldw	r2,8(fp)
   15dc4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   15dc8:	e0bfe80b 	ldhu	r2,-96(fp)
   15dcc:	0000f806 	br	161b0 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   15dd0:	e13ffd0b 	ldhu	r4,-12(fp)
   15dd4:	e17ffe03 	ldbu	r5,-8(fp)
   15dd8:	e0bfff0b 	ldhu	r2,-4(fp)
   15ddc:	e0fff704 	addi	r3,fp,-36
   15de0:	d8800015 	stw	r2,0(sp)
   15de4:	280f883a 	mov	r7,r5
   15de8:	200d883a 	mov	r6,r4
   15dec:	180b883a 	mov	r5,r3
   15df0:	e13ffc17 	ldw	r4,-16(fp)
   15df4:	001667c0 	call	1667c <OS_FlagBlock>
   15df8:	e0bfe517 	ldw	r2,-108(fp)
   15dfc:	e0bfe915 	stw	r2,-92(fp)
   15e00:	e0bfe917 	ldw	r2,-92(fp)
   15e04:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   15e08:	00009206 	br	16054 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   15e0c:	e0bffc17 	ldw	r2,-16(fp)
   15e10:	10c0020b 	ldhu	r3,8(r2)
   15e14:	e0bffd0b 	ldhu	r2,-12(fp)
   15e18:	1884703a 	and	r2,r3,r2
   15e1c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   15e20:	e0bfe80b 	ldhu	r2,-96(fp)
   15e24:	10001726 	beq	r2,zero,15e84 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15e28:	e0bfe403 	ldbu	r2,-112(fp)
   15e2c:	10800058 	cmpnei	r2,r2,1
   15e30:	1000091e 	bne	r2,zero,15e58 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   15e34:	e0bffc17 	ldw	r2,-16(fp)
   15e38:	1080020b 	ldhu	r2,8(r2)
   15e3c:	1007883a 	mov	r3,r2
   15e40:	e0bfe80b 	ldhu	r2,-96(fp)
   15e44:	0084303a 	nor	r2,zero,r2
   15e48:	1884703a 	and	r2,r3,r2
   15e4c:	1007883a 	mov	r3,r2
   15e50:	e0bffc17 	ldw	r2,-16(fp)
   15e54:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   15e58:	d0a82017 	ldw	r2,-24448(gp)
   15e5c:	e0ffe80b 	ldhu	r3,-96(fp)
   15e60:	10c00b0d 	sth	r3,44(r2)
   15e64:	e0bfe517 	ldw	r2,-108(fp)
   15e68:	e0bfea15 	stw	r2,-88(fp)
   15e6c:	e0bfea17 	ldw	r2,-88(fp)
   15e70:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   15e74:	e0800217 	ldw	r2,8(fp)
   15e78:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   15e7c:	e0bfe80b 	ldhu	r2,-96(fp)
   15e80:	0000cb06 	br	161b0 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   15e84:	e13ffd0b 	ldhu	r4,-12(fp)
   15e88:	e17ffe03 	ldbu	r5,-8(fp)
   15e8c:	e0bfff0b 	ldhu	r2,-4(fp)
   15e90:	e0fff704 	addi	r3,fp,-36
   15e94:	d8800015 	stw	r2,0(sp)
   15e98:	280f883a 	mov	r7,r5
   15e9c:	200d883a 	mov	r6,r4
   15ea0:	180b883a 	mov	r5,r3
   15ea4:	e13ffc17 	ldw	r4,-16(fp)
   15ea8:	001667c0 	call	1667c <OS_FlagBlock>
   15eac:	e0bfe517 	ldw	r2,-108(fp)
   15eb0:	e0bfeb15 	stw	r2,-84(fp)
   15eb4:	e0bfeb17 	ldw	r2,-84(fp)
   15eb8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   15ebc:	00006506 	br	16054 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   15ec0:	e0bffc17 	ldw	r2,-16(fp)
   15ec4:	1080020b 	ldhu	r2,8(r2)
   15ec8:	0084303a 	nor	r2,zero,r2
   15ecc:	1007883a 	mov	r3,r2
   15ed0:	e0bffd0b 	ldhu	r2,-12(fp)
   15ed4:	1884703a 	and	r2,r3,r2
   15ed8:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   15edc:	e0ffe80b 	ldhu	r3,-96(fp)
   15ee0:	e0bffd0b 	ldhu	r2,-12(fp)
   15ee4:	1880151e 	bne	r3,r2,15f3c <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15ee8:	e0bfe403 	ldbu	r2,-112(fp)
   15eec:	10800058 	cmpnei	r2,r2,1
   15ef0:	1000071e 	bne	r2,zero,15f10 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   15ef4:	e0bffc17 	ldw	r2,-16(fp)
   15ef8:	10c0020b 	ldhu	r3,8(r2)
   15efc:	e0bfe80b 	ldhu	r2,-96(fp)
   15f00:	1884b03a 	or	r2,r3,r2
   15f04:	1007883a 	mov	r3,r2
   15f08:	e0bffc17 	ldw	r2,-16(fp)
   15f0c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   15f10:	d0a82017 	ldw	r2,-24448(gp)
   15f14:	e0ffe80b 	ldhu	r3,-96(fp)
   15f18:	10c00b0d 	sth	r3,44(r2)
   15f1c:	e0bfe517 	ldw	r2,-108(fp)
   15f20:	e0bfec15 	stw	r2,-80(fp)
   15f24:	e0bfec17 	ldw	r2,-80(fp)
   15f28:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   15f2c:	e0800217 	ldw	r2,8(fp)
   15f30:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   15f34:	e0bfe80b 	ldhu	r2,-96(fp)
   15f38:	00009d06 	br	161b0 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   15f3c:	e13ffd0b 	ldhu	r4,-12(fp)
   15f40:	e17ffe03 	ldbu	r5,-8(fp)
   15f44:	e0bfff0b 	ldhu	r2,-4(fp)
   15f48:	e0fff704 	addi	r3,fp,-36
   15f4c:	d8800015 	stw	r2,0(sp)
   15f50:	280f883a 	mov	r7,r5
   15f54:	200d883a 	mov	r6,r4
   15f58:	180b883a 	mov	r5,r3
   15f5c:	e13ffc17 	ldw	r4,-16(fp)
   15f60:	001667c0 	call	1667c <OS_FlagBlock>
   15f64:	e0bfe517 	ldw	r2,-108(fp)
   15f68:	e0bfed15 	stw	r2,-76(fp)
   15f6c:	e0bfed17 	ldw	r2,-76(fp)
   15f70:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   15f74:	00003706 	br	16054 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   15f78:	e0bffc17 	ldw	r2,-16(fp)
   15f7c:	1080020b 	ldhu	r2,8(r2)
   15f80:	0084303a 	nor	r2,zero,r2
   15f84:	1007883a 	mov	r3,r2
   15f88:	e0bffd0b 	ldhu	r2,-12(fp)
   15f8c:	1884703a 	and	r2,r3,r2
   15f90:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   15f94:	e0bfe80b 	ldhu	r2,-96(fp)
   15f98:	10001526 	beq	r2,zero,15ff0 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15f9c:	e0bfe403 	ldbu	r2,-112(fp)
   15fa0:	10800058 	cmpnei	r2,r2,1
   15fa4:	1000071e 	bne	r2,zero,15fc4 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   15fa8:	e0bffc17 	ldw	r2,-16(fp)
   15fac:	10c0020b 	ldhu	r3,8(r2)
   15fb0:	e0bfe80b 	ldhu	r2,-96(fp)
   15fb4:	1884b03a 	or	r2,r3,r2
   15fb8:	1007883a 	mov	r3,r2
   15fbc:	e0bffc17 	ldw	r2,-16(fp)
   15fc0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   15fc4:	d0a82017 	ldw	r2,-24448(gp)
   15fc8:	e0ffe80b 	ldhu	r3,-96(fp)
   15fcc:	10c00b0d 	sth	r3,44(r2)
   15fd0:	e0bfe517 	ldw	r2,-108(fp)
   15fd4:	e0bfee15 	stw	r2,-72(fp)
   15fd8:	e0bfee17 	ldw	r2,-72(fp)
   15fdc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   15fe0:	e0800217 	ldw	r2,8(fp)
   15fe4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   15fe8:	e0bfe80b 	ldhu	r2,-96(fp)
   15fec:	00007006 	br	161b0 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   15ff0:	e13ffd0b 	ldhu	r4,-12(fp)
   15ff4:	e17ffe03 	ldbu	r5,-8(fp)
   15ff8:	e0bfff0b 	ldhu	r2,-4(fp)
   15ffc:	e0fff704 	addi	r3,fp,-36
   16000:	d8800015 	stw	r2,0(sp)
   16004:	280f883a 	mov	r7,r5
   16008:	200d883a 	mov	r6,r4
   1600c:	180b883a 	mov	r5,r3
   16010:	e13ffc17 	ldw	r4,-16(fp)
   16014:	001667c0 	call	1667c <OS_FlagBlock>
   16018:	e0bfe517 	ldw	r2,-108(fp)
   1601c:	e0bfef15 	stw	r2,-68(fp)
   16020:	e0bfef17 	ldw	r2,-68(fp)
   16024:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   16028:	00000a06 	br	16054 <OSFlagPend+0x448>
   1602c:	e0bfe517 	ldw	r2,-108(fp)
   16030:	e0bff015 	stw	r2,-64(fp)
   16034:	e0bff017 	ldw	r2,-64(fp)
   16038:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   1603c:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   16040:	e0800217 	ldw	r2,8(fp)
   16044:	00c01bc4 	movi	r3,111
   16048:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   1604c:	e0bfe80b 	ldhu	r2,-96(fp)
   16050:	00005706 	br	161b0 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   16054:	0014acc0 	call	14acc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16058:	0005303a 	rdctl	r2,status
   1605c:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16060:	e0fff117 	ldw	r3,-60(fp)
   16064:	00bfff84 	movi	r2,-2
   16068:	1884703a 	and	r2,r3,r2
   1606c:	1001703a 	wrctl	status,r2
  
  return context;
   16070:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
   16074:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   16078:	d0a82017 	ldw	r2,-24448(gp)
   1607c:	10800c43 	ldbu	r2,49(r2)
   16080:	10803fcc 	andi	r2,r2,255
   16084:	10001c26 	beq	r2,zero,160f8 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   16088:	d0a82017 	ldw	r2,-24448(gp)
   1608c:	10800c43 	ldbu	r2,49(r2)
   16090:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   16094:	d0a82017 	ldw	r2,-24448(gp)
   16098:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   1609c:	e0bff704 	addi	r2,fp,-36
   160a0:	1009883a 	mov	r4,r2
   160a4:	00169b00 	call	169b0 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   160a8:	d0a82017 	ldw	r2,-24448(gp)
   160ac:	10000c05 	stb	zero,48(r2)
   160b0:	e0bfe517 	ldw	r2,-108(fp)
   160b4:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   160b8:	e0bff217 	ldw	r2,-56(fp)
   160bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   160c0:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
   160c4:	e0bff303 	ldbu	r2,-52(fp)
   160c8:	108000a0 	cmpeqi	r2,r2,2
   160cc:	10000426 	beq	r2,zero,160e0 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   160d0:	e0800217 	ldw	r2,8(fp)
   160d4:	00c00384 	movi	r3,14
   160d8:	10c00005 	stb	r3,0(r2)
                 break;
   160dc:	00000406 	br	160f0 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   160e0:	e0800217 	ldw	r2,8(fp)
   160e4:	00c00284 	movi	r3,10
   160e8:	10c00005 	stb	r3,0(r2)
                 break;
   160ec:	0001883a 	nop
        }
        return (flags_rdy);
   160f0:	e0bfe80b 	ldhu	r2,-96(fp)
   160f4:	00002e06 	br	161b0 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   160f8:	d0a82017 	ldw	r2,-24448(gp)
   160fc:	10800b0b 	ldhu	r2,44(r2)
   16100:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   16104:	e0bfe403 	ldbu	r2,-112(fp)
   16108:	10800058 	cmpnei	r2,r2,1
   1610c:	1000211e 	bne	r2,zero,16194 <OSFlagPend+0x588>
        switch (wait_type) {
   16110:	e0bffe03 	ldbu	r2,-8(fp)
   16114:	10001616 	blt	r2,zero,16170 <OSFlagPend+0x564>
   16118:	10c00090 	cmplti	r3,r2,2
   1611c:	18000c1e 	bne	r3,zero,16150 <OSFlagPend+0x544>
   16120:	10800108 	cmpgei	r2,r2,4
   16124:	1000121e 	bne	r2,zero,16170 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   16128:	e0bffc17 	ldw	r2,-16(fp)
   1612c:	1080020b 	ldhu	r2,8(r2)
   16130:	1007883a 	mov	r3,r2
   16134:	e0bfe80b 	ldhu	r2,-96(fp)
   16138:	0084303a 	nor	r2,zero,r2
   1613c:	1884703a 	and	r2,r3,r2
   16140:	1007883a 	mov	r3,r2
   16144:	e0bffc17 	ldw	r2,-16(fp)
   16148:	10c0020d 	sth	r3,8(r2)
                 break;
   1614c:	00001106 	br	16194 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   16150:	e0bffc17 	ldw	r2,-16(fp)
   16154:	10c0020b 	ldhu	r3,8(r2)
   16158:	e0bfe80b 	ldhu	r2,-96(fp)
   1615c:	1884b03a 	or	r2,r3,r2
   16160:	1007883a 	mov	r3,r2
   16164:	e0bffc17 	ldw	r2,-16(fp)
   16168:	10c0020d 	sth	r3,8(r2)
                 break;
   1616c:	00000906 	br	16194 <OSFlagPend+0x588>
   16170:	e0bfe517 	ldw	r2,-108(fp)
   16174:	e0bff415 	stw	r2,-48(fp)
   16178:	e0bff417 	ldw	r2,-48(fp)
   1617c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   16180:	e0800217 	ldw	r2,8(fp)
   16184:	00c01bc4 	movi	r3,111
   16188:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   1618c:	0005883a 	mov	r2,zero
   16190:	00000706 	br	161b0 <OSFlagPend+0x5a4>
   16194:	e0bfe517 	ldw	r2,-108(fp)
   16198:	e0bff515 	stw	r2,-44(fp)
   1619c:	e0bff517 	ldw	r2,-44(fp)
   161a0:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   161a4:	e0800217 	ldw	r2,8(fp)
   161a8:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   161ac:	e0bfe80b 	ldhu	r2,-96(fp)
}
   161b0:	e037883a 	mov	sp,fp
   161b4:	dfc00117 	ldw	ra,4(sp)
   161b8:	df000017 	ldw	fp,0(sp)
   161bc:	dec00204 	addi	sp,sp,8
   161c0:	f800283a 	ret

000161c4 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   161c4:	defffb04 	addi	sp,sp,-20
   161c8:	df000415 	stw	fp,16(sp)
   161cc:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   161d0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   161d4:	0005303a 	rdctl	r2,status
   161d8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   161dc:	e0fffe17 	ldw	r3,-8(fp)
   161e0:	00bfff84 	movi	r2,-2
   161e4:	1884703a 	and	r2,r3,r2
   161e8:	1001703a 	wrctl	status,r2
  
  return context;
   161ec:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   161f0:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   161f4:	d0a82017 	ldw	r2,-24448(gp)
   161f8:	10800b0b 	ldhu	r2,44(r2)
   161fc:	e0bffd0d 	sth	r2,-12(fp)
   16200:	e0bffc17 	ldw	r2,-16(fp)
   16204:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16208:	e0bfff17 	ldw	r2,-4(fp)
   1620c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   16210:	e0bffd0b 	ldhu	r2,-12(fp)
}
   16214:	e037883a 	mov	sp,fp
   16218:	df000017 	ldw	fp,0(sp)
   1621c:	dec00104 	addi	sp,sp,4
   16220:	f800283a 	ret

00016224 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   16224:	deffef04 	addi	sp,sp,-68
   16228:	dfc01015 	stw	ra,64(sp)
   1622c:	df000f15 	stw	fp,60(sp)
   16230:	df000f04 	addi	fp,sp,60
   16234:	e13ffc15 	stw	r4,-16(fp)
   16238:	2807883a 	mov	r3,r5
   1623c:	3005883a 	mov	r2,r6
   16240:	e1ffff15 	stw	r7,-4(fp)
   16244:	e0fffd0d 	sth	r3,-12(fp)
   16248:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   1624c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   16250:	e0bfff17 	ldw	r2,-4(fp)
   16254:	1000021e 	bne	r2,zero,16260 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   16258:	0005883a 	mov	r2,zero
   1625c:	0000d106 	br	165a4 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   16260:	e0bffc17 	ldw	r2,-16(fp)
   16264:	1000051e 	bne	r2,zero,1627c <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   16268:	e0bfff17 	ldw	r2,-4(fp)
   1626c:	00c01b84 	movi	r3,110
   16270:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16274:	0005883a 	mov	r2,zero
   16278:	0000ca06 	br	165a4 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   1627c:	e0bffc17 	ldw	r2,-16(fp)
   16280:	10800003 	ldbu	r2,0(r2)
   16284:	10803fcc 	andi	r2,r2,255
   16288:	10800160 	cmpeqi	r2,r2,5
   1628c:	1000051e 	bne	r2,zero,162a4 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   16290:	e0bfff17 	ldw	r2,-4(fp)
   16294:	00c00044 	movi	r3,1
   16298:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1629c:	0005883a 	mov	r2,zero
   162a0:	0000c006 	br	165a4 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   162a4:	0005303a 	rdctl	r2,status
   162a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   162ac:	e0fffb17 	ldw	r3,-20(fp)
   162b0:	00bfff84 	movi	r2,-2
   162b4:	1884703a 	and	r2,r3,r2
   162b8:	1001703a 	wrctl	status,r2
  
  return context;
   162bc:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   162c0:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   162c4:	e0bffe03 	ldbu	r2,-8(fp)
   162c8:	10000326 	beq	r2,zero,162d8 <OSFlagPost+0xb4>
   162cc:	10800060 	cmpeqi	r2,r2,1
   162d0:	10000b1e 	bne	r2,zero,16300 <OSFlagPost+0xdc>
   162d4:	00001206 	br	16320 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   162d8:	e0bffc17 	ldw	r2,-16(fp)
   162dc:	1080020b 	ldhu	r2,8(r2)
   162e0:	1007883a 	mov	r3,r2
   162e4:	e0bffd0b 	ldhu	r2,-12(fp)
   162e8:	0084303a 	nor	r2,zero,r2
   162ec:	1884703a 	and	r2,r3,r2
   162f0:	1007883a 	mov	r3,r2
   162f4:	e0bffc17 	ldw	r2,-16(fp)
   162f8:	10c0020d 	sth	r3,8(r2)
             break;
   162fc:	00001106 	br	16344 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   16300:	e0bffc17 	ldw	r2,-16(fp)
   16304:	10c0020b 	ldhu	r3,8(r2)
   16308:	e0bffd0b 	ldhu	r2,-12(fp)
   1630c:	1884b03a 	or	r2,r3,r2
   16310:	1007883a 	mov	r3,r2
   16314:	e0bffc17 	ldw	r2,-16(fp)
   16318:	10c0020d 	sth	r3,8(r2)
             break;
   1631c:	00000906 	br	16344 <OSFlagPost+0x120>
   16320:	e0bff317 	ldw	r2,-52(fp)
   16324:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16328:	e0bff417 	ldw	r2,-48(fp)
   1632c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   16330:	e0bfff17 	ldw	r2,-4(fp)
   16334:	00c01c44 	movi	r3,113
   16338:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   1633c:	0005883a 	mov	r2,zero
   16340:	00009806 	br	165a4 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   16344:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   16348:	e0bffc17 	ldw	r2,-16(fp)
   1634c:	10800117 	ldw	r2,4(r2)
   16350:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   16354:	00007706 	br	16534 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
   16358:	e0bff117 	ldw	r2,-60(fp)
   1635c:	10800483 	ldbu	r2,18(r2)
   16360:	10803fcc 	andi	r2,r2,255
   16364:	10c00060 	cmpeqi	r3,r2,1
   16368:	18004a1e 	bne	r3,zero,16494 <OSFlagPost+0x270>
   1636c:	10c00088 	cmpgei	r3,r2,2
   16370:	1800021e 	bne	r3,zero,1637c <OSFlagPost+0x158>
   16374:	10002f26 	beq	r2,zero,16434 <OSFlagPost+0x210>
   16378:	00005b06 	br	164e8 <OSFlagPost+0x2c4>
   1637c:	10c000a0 	cmpeqi	r3,r2,2
   16380:	1800031e 	bne	r3,zero,16390 <OSFlagPost+0x16c>
   16384:	108000e0 	cmpeqi	r2,r2,3
   16388:	1000171e 	bne	r2,zero,163e8 <OSFlagPost+0x1c4>
   1638c:	00005606 	br	164e8 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   16390:	e0bffc17 	ldw	r2,-16(fp)
   16394:	10c0020b 	ldhu	r3,8(r2)
   16398:	e0bff117 	ldw	r2,-60(fp)
   1639c:	1080040b 	ldhu	r2,16(r2)
   163a0:	1884703a 	and	r2,r3,r2
   163a4:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   163a8:	e0bff117 	ldw	r2,-60(fp)
   163ac:	1080040b 	ldhu	r2,16(r2)
   163b0:	10ffffcc 	andi	r3,r2,65535
   163b4:	e0bff60b 	ldhu	r2,-40(fp)
   163b8:	1880541e 	bne	r3,r2,1650c <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   163bc:	e0bff60b 	ldhu	r2,-40(fp)
   163c0:	100b883a 	mov	r5,r2
   163c4:	e13ff117 	ldw	r4,-60(fp)
   163c8:	00168bc0 	call	168bc <OS_FlagTaskRdy>
   163cc:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   163d0:	e0bff683 	ldbu	r2,-38(fp)
   163d4:	10800058 	cmpnei	r2,r2,1
   163d8:	10004c1e 	bne	r2,zero,1650c <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   163dc:	00800044 	movi	r2,1
   163e0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   163e4:	00004906 	br	1650c <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   163e8:	e0bffc17 	ldw	r2,-16(fp)
   163ec:	10c0020b 	ldhu	r3,8(r2)
   163f0:	e0bff117 	ldw	r2,-60(fp)
   163f4:	1080040b 	ldhu	r2,16(r2)
   163f8:	1884703a 	and	r2,r3,r2
   163fc:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   16400:	e0bff60b 	ldhu	r2,-40(fp)
   16404:	10004326 	beq	r2,zero,16514 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   16408:	e0bff60b 	ldhu	r2,-40(fp)
   1640c:	100b883a 	mov	r5,r2
   16410:	e13ff117 	ldw	r4,-60(fp)
   16414:	00168bc0 	call	168bc <OS_FlagTaskRdy>
   16418:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   1641c:	e0bff683 	ldbu	r2,-38(fp)
   16420:	10800058 	cmpnei	r2,r2,1
   16424:	10003b1e 	bne	r2,zero,16514 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   16428:	00800044 	movi	r2,1
   1642c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   16430:	00003806 	br	16514 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   16434:	e0bffc17 	ldw	r2,-16(fp)
   16438:	1080020b 	ldhu	r2,8(r2)
   1643c:	0084303a 	nor	r2,zero,r2
   16440:	1007883a 	mov	r3,r2
   16444:	e0bff117 	ldw	r2,-60(fp)
   16448:	1080040b 	ldhu	r2,16(r2)
   1644c:	1884703a 	and	r2,r3,r2
   16450:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   16454:	e0bff117 	ldw	r2,-60(fp)
   16458:	1080040b 	ldhu	r2,16(r2)
   1645c:	10ffffcc 	andi	r3,r2,65535
   16460:	e0bff60b 	ldhu	r2,-40(fp)
   16464:	18802d1e 	bne	r3,r2,1651c <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   16468:	e0bff60b 	ldhu	r2,-40(fp)
   1646c:	100b883a 	mov	r5,r2
   16470:	e13ff117 	ldw	r4,-60(fp)
   16474:	00168bc0 	call	168bc <OS_FlagTaskRdy>
   16478:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   1647c:	e0bff683 	ldbu	r2,-38(fp)
   16480:	10800058 	cmpnei	r2,r2,1
   16484:	1000251e 	bne	r2,zero,1651c <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   16488:	00800044 	movi	r2,1
   1648c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   16490:	00002206 	br	1651c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   16494:	e0bffc17 	ldw	r2,-16(fp)
   16498:	1080020b 	ldhu	r2,8(r2)
   1649c:	0084303a 	nor	r2,zero,r2
   164a0:	1007883a 	mov	r3,r2
   164a4:	e0bff117 	ldw	r2,-60(fp)
   164a8:	1080040b 	ldhu	r2,16(r2)
   164ac:	1884703a 	and	r2,r3,r2
   164b0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   164b4:	e0bff60b 	ldhu	r2,-40(fp)
   164b8:	10001a26 	beq	r2,zero,16524 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   164bc:	e0bff60b 	ldhu	r2,-40(fp)
   164c0:	100b883a 	mov	r5,r2
   164c4:	e13ff117 	ldw	r4,-60(fp)
   164c8:	00168bc0 	call	168bc <OS_FlagTaskRdy>
   164cc:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   164d0:	e0bff683 	ldbu	r2,-38(fp)
   164d4:	10800058 	cmpnei	r2,r2,1
   164d8:	1000121e 	bne	r2,zero,16524 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   164dc:	00800044 	movi	r2,1
   164e0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   164e4:	00000f06 	br	16524 <OSFlagPost+0x300>
   164e8:	e0bff317 	ldw	r2,-52(fp)
   164ec:	e0bff515 	stw	r2,-44(fp)
   164f0:	e0bff517 	ldw	r2,-44(fp)
   164f4:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   164f8:	e0bfff17 	ldw	r2,-4(fp)
   164fc:	00c01bc4 	movi	r3,111
   16500:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   16504:	0005883a 	mov	r2,zero
   16508:	00002606 	br	165a4 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   1650c:	0001883a 	nop
   16510:	00000506 	br	16528 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   16514:	0001883a 	nop
   16518:	00000306 	br	16528 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   1651c:	0001883a 	nop
   16520:	00000106 	br	16528 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   16524:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   16528:	e0bff117 	ldw	r2,-60(fp)
   1652c:	10800017 	ldw	r2,0(r2)
   16530:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   16534:	e0bff117 	ldw	r2,-60(fp)
   16538:	103f871e 	bne	r2,zero,16358 <OSFlagPost+0x134>
   1653c:	e0bff317 	ldw	r2,-52(fp)
   16540:	e0bff715 	stw	r2,-36(fp)
   16544:	e0bff717 	ldw	r2,-36(fp)
   16548:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   1654c:	e0bff203 	ldbu	r2,-56(fp)
   16550:	10800058 	cmpnei	r2,r2,1
   16554:	1000011e 	bne	r2,zero,1655c <OSFlagPost+0x338>
        OS_Sched();
   16558:	0014acc0 	call	14acc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1655c:	0005303a 	rdctl	r2,status
   16560:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16564:	e0fffa17 	ldw	r3,-24(fp)
   16568:	00bfff84 	movi	r2,-2
   1656c:	1884703a 	and	r2,r3,r2
   16570:	1001703a 	wrctl	status,r2
  
  return context;
   16574:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   16578:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   1657c:	e0bffc17 	ldw	r2,-16(fp)
   16580:	1080020b 	ldhu	r2,8(r2)
   16584:	e0bff90d 	sth	r2,-28(fp)
   16588:	e0bff317 	ldw	r2,-52(fp)
   1658c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16590:	e0bff817 	ldw	r2,-32(fp)
   16594:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   16598:	e0bfff17 	ldw	r2,-4(fp)
   1659c:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   165a0:	e0bff90b 	ldhu	r2,-28(fp)
}
   165a4:	e037883a 	mov	sp,fp
   165a8:	dfc00117 	ldw	ra,4(sp)
   165ac:	df000017 	ldw	fp,0(sp)
   165b0:	dec00204 	addi	sp,sp,8
   165b4:	f800283a 	ret

000165b8 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   165b8:	defff904 	addi	sp,sp,-28
   165bc:	df000615 	stw	fp,24(sp)
   165c0:	df000604 	addi	fp,sp,24
   165c4:	e13ffe15 	stw	r4,-8(fp)
   165c8:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   165cc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   165d0:	e0bfff17 	ldw	r2,-4(fp)
   165d4:	1000021e 	bne	r2,zero,165e0 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   165d8:	0005883a 	mov	r2,zero
   165dc:	00002306 	br	1666c <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   165e0:	e0bffe17 	ldw	r2,-8(fp)
   165e4:	1000051e 	bne	r2,zero,165fc <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   165e8:	e0bfff17 	ldw	r2,-4(fp)
   165ec:	00c01b84 	movi	r3,110
   165f0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   165f4:	0005883a 	mov	r2,zero
   165f8:	00001c06 	br	1666c <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   165fc:	e0bffe17 	ldw	r2,-8(fp)
   16600:	10800003 	ldbu	r2,0(r2)
   16604:	10803fcc 	andi	r2,r2,255
   16608:	10800160 	cmpeqi	r2,r2,5
   1660c:	1000051e 	bne	r2,zero,16624 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   16610:	e0bfff17 	ldw	r2,-4(fp)
   16614:	00c00044 	movi	r3,1
   16618:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1661c:	0005883a 	mov	r2,zero
   16620:	00001206 	br	1666c <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16624:	0005303a 	rdctl	r2,status
   16628:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1662c:	e0fffc17 	ldw	r3,-16(fp)
   16630:	00bfff84 	movi	r2,-2
   16634:	1884703a 	and	r2,r3,r2
   16638:	1001703a 	wrctl	status,r2
  
  return context;
   1663c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   16640:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   16644:	e0bffe17 	ldw	r2,-8(fp)
   16648:	1080020b 	ldhu	r2,8(r2)
   1664c:	e0bffb0d 	sth	r2,-20(fp)
   16650:	e0bffa17 	ldw	r2,-24(fp)
   16654:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16658:	e0bffd17 	ldw	r2,-12(fp)
   1665c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   16660:	e0bfff17 	ldw	r2,-4(fp)
   16664:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   16668:	e0bffb0b 	ldhu	r2,-20(fp)
}
   1666c:	e037883a 	mov	sp,fp
   16670:	df000017 	ldw	fp,0(sp)
   16674:	dec00104 	addi	sp,sp,4
   16678:	f800283a 	ret

0001667c <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   1667c:	defff804 	addi	sp,sp,-32
   16680:	df000715 	stw	fp,28(sp)
   16684:	df000704 	addi	fp,sp,28
   16688:	e13ffb15 	stw	r4,-20(fp)
   1668c:	e17ffc15 	stw	r5,-16(fp)
   16690:	3009883a 	mov	r4,r6
   16694:	3807883a 	mov	r3,r7
   16698:	e0800117 	ldw	r2,4(fp)
   1669c:	e13ffd0d 	sth	r4,-12(fp)
   166a0:	e0fffe05 	stb	r3,-8(fp)
   166a4:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   166a8:	d0a82017 	ldw	r2,-24448(gp)
   166ac:	d0e82017 	ldw	r3,-24448(gp)
   166b0:	18c00c03 	ldbu	r3,48(r3)
   166b4:	18c00814 	ori	r3,r3,32
   166b8:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   166bc:	d0a82017 	ldw	r2,-24448(gp)
   166c0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   166c4:	d0a82017 	ldw	r2,-24448(gp)
   166c8:	e0ffff0b 	ldhu	r3,-4(fp)
   166cc:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   166d0:	d0a82017 	ldw	r2,-24448(gp)
   166d4:	e0fffc17 	ldw	r3,-16(fp)
   166d8:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   166dc:	e0bffc17 	ldw	r2,-16(fp)
   166e0:	e0fffd0b 	ldhu	r3,-12(fp)
   166e4:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   166e8:	e0bffc17 	ldw	r2,-16(fp)
   166ec:	e0fffe03 	ldbu	r3,-8(fp)
   166f0:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   166f4:	d0e82017 	ldw	r3,-24448(gp)
   166f8:	e0bffc17 	ldw	r2,-16(fp)
   166fc:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   16700:	e0bffb17 	ldw	r2,-20(fp)
   16704:	10c00117 	ldw	r3,4(r2)
   16708:	e0bffc17 	ldw	r2,-16(fp)
   1670c:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   16710:	e0bffc17 	ldw	r2,-16(fp)
   16714:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   16718:	e0bffc17 	ldw	r2,-16(fp)
   1671c:	e0fffb17 	ldw	r3,-20(fp)
   16720:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   16724:	e0bffb17 	ldw	r2,-20(fp)
   16728:	10800117 	ldw	r2,4(r2)
   1672c:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   16730:	e0bff917 	ldw	r2,-28(fp)
   16734:	10000326 	beq	r2,zero,16744 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   16738:	e0bff917 	ldw	r2,-28(fp)
   1673c:	e0fffc17 	ldw	r3,-16(fp)
   16740:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   16744:	e0bffb17 	ldw	r2,-20(fp)
   16748:	e0fffc17 	ldw	r3,-16(fp)
   1674c:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   16750:	d0a82017 	ldw	r2,-24448(gp)
   16754:	10800d03 	ldbu	r2,52(r2)
   16758:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   1675c:	e0fffa03 	ldbu	r3,-24(fp)
   16760:	e13ffa03 	ldbu	r4,-24(fp)
   16764:	d0a81d44 	addi	r2,gp,-24459
   16768:	2085883a 	add	r2,r4,r2
   1676c:	10800003 	ldbu	r2,0(r2)
   16770:	1009883a 	mov	r4,r2
   16774:	d0a82017 	ldw	r2,-24448(gp)
   16778:	10800d43 	ldbu	r2,53(r2)
   1677c:	0084303a 	nor	r2,zero,r2
   16780:	2084703a 	and	r2,r4,r2
   16784:	1009883a 	mov	r4,r2
   16788:	d0a81d44 	addi	r2,gp,-24459
   1678c:	1885883a 	add	r2,r3,r2
   16790:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   16794:	e0fffa03 	ldbu	r3,-24(fp)
   16798:	d0a81d44 	addi	r2,gp,-24459
   1679c:	1885883a 	add	r2,r3,r2
   167a0:	10800003 	ldbu	r2,0(r2)
   167a4:	10803fcc 	andi	r2,r2,255
   167a8:	1000071e 	bne	r2,zero,167c8 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   167ac:	d0a82017 	ldw	r2,-24448(gp)
   167b0:	10800d83 	ldbu	r2,54(r2)
   167b4:	0084303a 	nor	r2,zero,r2
   167b8:	1007883a 	mov	r3,r2
   167bc:	d0a81d03 	ldbu	r2,-24460(gp)
   167c0:	1884703a 	and	r2,r3,r2
   167c4:	d0a81d05 	stb	r2,-24460(gp)
    }
}
   167c8:	0001883a 	nop
   167cc:	e037883a 	mov	sp,fp
   167d0:	df000017 	ldw	fp,0(sp)
   167d4:	dec00104 	addi	sp,sp,4
   167d8:	f800283a 	ret

000167dc <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   167dc:	defffb04 	addi	sp,sp,-20
   167e0:	dfc00415 	stw	ra,16(sp)
   167e4:	df000315 	stw	fp,12(sp)
   167e8:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   167ec:	0140dc04 	movi	r5,880
   167f0:	010000f4 	movhi	r4,3
   167f4:	21361f04 	addi	r4,r4,-10116
   167f8:	0014a100 	call	14a10 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   167fc:	008000f4 	movhi	r2,3
   16800:	10b61f04 	addi	r2,r2,-10116
   16804:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   16808:	008000f4 	movhi	r2,3
   1680c:	10b62a04 	addi	r2,r2,-10072
   16810:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   16814:	e03ffd0d 	sth	zero,-12(fp)
   16818:	00001306 	br	16868 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1681c:	e0bffe17 	ldw	r2,-8(fp)
   16820:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   16824:	e0bffe17 	ldw	r2,-8(fp)
   16828:	e0ffff17 	ldw	r3,-4(fp)
   1682c:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   16830:	e0bffe17 	ldw	r2,-8(fp)
   16834:	00c00fc4 	movi	r3,63
   16838:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   1683c:	e0bffe17 	ldw	r2,-8(fp)
   16840:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   16844:	e0bffe17 	ldw	r2,-8(fp)
   16848:	10800b04 	addi	r2,r2,44
   1684c:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   16850:	e0bfff17 	ldw	r2,-4(fp)
   16854:	10800b04 	addi	r2,r2,44
   16858:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   1685c:	e0bffd0b 	ldhu	r2,-12(fp)
   16860:	10800044 	addi	r2,r2,1
   16864:	e0bffd0d 	sth	r2,-12(fp)
   16868:	e0bffd0b 	ldhu	r2,-12(fp)
   1686c:	108004f0 	cmpltui	r2,r2,19
   16870:	103fea1e 	bne	r2,zero,1681c <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   16874:	e0bffe17 	ldw	r2,-8(fp)
   16878:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   1687c:	e0bffe17 	ldw	r2,-8(fp)
   16880:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   16884:	e0bffe17 	ldw	r2,-8(fp)
   16888:	00c00fc4 	movi	r3,63
   1688c:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   16890:	e0bffe17 	ldw	r2,-8(fp)
   16894:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   16898:	008000f4 	movhi	r2,3
   1689c:	10b61f04 	addi	r2,r2,-10116
   168a0:	d0a82215 	stw	r2,-24440(gp)
#endif
}
   168a4:	0001883a 	nop
   168a8:	e037883a 	mov	sp,fp
   168ac:	dfc00117 	ldw	ra,4(sp)
   168b0:	df000017 	ldw	fp,0(sp)
   168b4:	dec00204 	addi	sp,sp,8
   168b8:	f800283a 	ret

000168bc <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   168bc:	defffa04 	addi	sp,sp,-24
   168c0:	dfc00515 	stw	ra,20(sp)
   168c4:	df000415 	stw	fp,16(sp)
   168c8:	df000404 	addi	fp,sp,16
   168cc:	e13ffe15 	stw	r4,-8(fp)
   168d0:	2805883a 	mov	r2,r5
   168d4:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   168d8:	e0bffe17 	ldw	r2,-8(fp)
   168dc:	10800217 	ldw	r2,8(r2)
   168e0:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   168e4:	e0bffd17 	ldw	r2,-12(fp)
   168e8:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   168ec:	e0bffd17 	ldw	r2,-12(fp)
   168f0:	e0ffff0b 	ldhu	r3,-4(fp)
   168f4:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   168f8:	e0bffd17 	ldw	r2,-12(fp)
   168fc:	10c00c03 	ldbu	r3,48(r2)
   16900:	00bff7c4 	movi	r2,-33
   16904:	1884703a 	and	r2,r3,r2
   16908:	1007883a 	mov	r3,r2
   1690c:	e0bffd17 	ldw	r2,-12(fp)
   16910:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   16914:	e0bffd17 	ldw	r2,-12(fp)
   16918:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   1691c:	e0bffd17 	ldw	r2,-12(fp)
   16920:	10800c03 	ldbu	r2,48(r2)
   16924:	10803fcc 	andi	r2,r2,255
   16928:	1000181e 	bne	r2,zero,1698c <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   1692c:	e0bffd17 	ldw	r2,-12(fp)
   16930:	10c00d83 	ldbu	r3,54(r2)
   16934:	d0a81d03 	ldbu	r2,-24460(gp)
   16938:	1884b03a 	or	r2,r3,r2
   1693c:	d0a81d05 	stb	r2,-24460(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   16940:	e0bffd17 	ldw	r2,-12(fp)
   16944:	10800d03 	ldbu	r2,52(r2)
   16948:	10c03fcc 	andi	r3,r2,255
   1694c:	e0bffd17 	ldw	r2,-12(fp)
   16950:	10800d03 	ldbu	r2,52(r2)
   16954:	11003fcc 	andi	r4,r2,255
   16958:	d0a81d44 	addi	r2,gp,-24459
   1695c:	2085883a 	add	r2,r4,r2
   16960:	11000003 	ldbu	r4,0(r2)
   16964:	e0bffd17 	ldw	r2,-12(fp)
   16968:	10800d43 	ldbu	r2,53(r2)
   1696c:	2084b03a 	or	r2,r4,r2
   16970:	1009883a 	mov	r4,r2
   16974:	d0a81d44 	addi	r2,gp,-24459
   16978:	1885883a 	add	r2,r3,r2
   1697c:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   16980:	00800044 	movi	r2,1
   16984:	e0bffc05 	stb	r2,-16(fp)
   16988:	00000106 	br	16990 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
   1698c:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   16990:	e13ffe17 	ldw	r4,-8(fp)
   16994:	00169b00 	call	169b0 <OS_FlagUnlink>
    return (sched);
   16998:	e0bffc03 	ldbu	r2,-16(fp)
}
   1699c:	e037883a 	mov	sp,fp
   169a0:	dfc00117 	ldw	ra,4(sp)
   169a4:	df000017 	ldw	fp,0(sp)
   169a8:	dec00204 	addi	sp,sp,8
   169ac:	f800283a 	ret

000169b0 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   169b0:	defffa04 	addi	sp,sp,-24
   169b4:	df000515 	stw	fp,20(sp)
   169b8:	df000504 	addi	fp,sp,20
   169bc:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   169c0:	e0bfff17 	ldw	r2,-4(fp)
   169c4:	10800117 	ldw	r2,4(r2)
   169c8:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   169cc:	e0bfff17 	ldw	r2,-4(fp)
   169d0:	10800017 	ldw	r2,0(r2)
   169d4:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   169d8:	e0bffb17 	ldw	r2,-20(fp)
   169dc:	10000b1e 	bne	r2,zero,16a0c <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   169e0:	e0bfff17 	ldw	r2,-4(fp)
   169e4:	10800317 	ldw	r2,12(r2)
   169e8:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   169ec:	e0bffd17 	ldw	r2,-12(fp)
   169f0:	e0fffc17 	ldw	r3,-16(fp)
   169f4:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   169f8:	e0bffc17 	ldw	r2,-16(fp)
   169fc:	10000b26 	beq	r2,zero,16a2c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   16a00:	e0bffc17 	ldw	r2,-16(fp)
   16a04:	10000115 	stw	zero,4(r2)
   16a08:	00000806 	br	16a2c <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   16a0c:	e0bffb17 	ldw	r2,-20(fp)
   16a10:	e0fffc17 	ldw	r3,-16(fp)
   16a14:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   16a18:	e0bffc17 	ldw	r2,-16(fp)
   16a1c:	10000326 	beq	r2,zero,16a2c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   16a20:	e0bffc17 	ldw	r2,-16(fp)
   16a24:	e0fffb17 	ldw	r3,-20(fp)
   16a28:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   16a2c:	e0bfff17 	ldw	r2,-4(fp)
   16a30:	10800217 	ldw	r2,8(r2)
   16a34:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   16a38:	e0bffe17 	ldw	r2,-8(fp)
   16a3c:	10000a15 	stw	zero,40(r2)
#endif
}
   16a40:	0001883a 	nop
   16a44:	e037883a 	mov	sp,fp
   16a48:	df000017 	ldw	fp,0(sp)
   16a4c:	dec00104 	addi	sp,sp,4
   16a50:	f800283a 	ret

00016a54 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   16a54:	defff404 	addi	sp,sp,-48
   16a58:	df000b15 	stw	fp,44(sp)
   16a5c:	df000b04 	addi	fp,sp,44
   16a60:	e13ffc15 	stw	r4,-16(fp)
   16a64:	e17ffd15 	stw	r5,-12(fp)
   16a68:	e1bffe15 	stw	r6,-8(fp)
   16a6c:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   16a70:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   16a74:	e0bfff17 	ldw	r2,-4(fp)
   16a78:	1000021e 	bne	r2,zero,16a84 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   16a7c:	0005883a 	mov	r2,zero
   16a80:	00006506 	br	16c18 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   16a84:	e0bffc17 	ldw	r2,-16(fp)
   16a88:	1000051e 	bne	r2,zero,16aa0 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   16a8c:	e0bfff17 	ldw	r2,-4(fp)
   16a90:	00c01884 	movi	r3,98
   16a94:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   16a98:	0005883a 	mov	r2,zero
   16a9c:	00005e06 	br	16c18 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   16aa0:	e0bffc17 	ldw	r2,-16(fp)
   16aa4:	108000cc 	andi	r2,r2,3
   16aa8:	10000526 	beq	r2,zero,16ac0 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   16aac:	e0bfff17 	ldw	r2,-4(fp)
   16ab0:	00c01884 	movi	r3,98
   16ab4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   16ab8:	0005883a 	mov	r2,zero
   16abc:	00005606 	br	16c18 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   16ac0:	e0bffd17 	ldw	r2,-12(fp)
   16ac4:	108000a8 	cmpgeui	r2,r2,2
   16ac8:	1000051e 	bne	r2,zero,16ae0 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   16acc:	e0bfff17 	ldw	r2,-4(fp)
   16ad0:	00c016c4 	movi	r3,91
   16ad4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   16ad8:	0005883a 	mov	r2,zero
   16adc:	00004e06 	br	16c18 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   16ae0:	e0bffe17 	ldw	r2,-8(fp)
   16ae4:	10800128 	cmpgeui	r2,r2,4
   16ae8:	1000051e 	bne	r2,zero,16b00 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   16aec:	e0bfff17 	ldw	r2,-4(fp)
   16af0:	00c01704 	movi	r3,92
   16af4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   16af8:	0005883a 	mov	r2,zero
   16afc:	00004606 	br	16c18 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16b00:	0005303a 	rdctl	r2,status
   16b04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16b08:	e0fffb17 	ldw	r3,-20(fp)
   16b0c:	00bfff84 	movi	r2,-2
   16b10:	1884703a 	and	r2,r3,r2
   16b14:	1001703a 	wrctl	status,r2
  
  return context;
   16b18:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   16b1c:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   16b20:	d0a81a17 	ldw	r2,-24472(gp)
   16b24:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   16b28:	d0a81a17 	ldw	r2,-24472(gp)
   16b2c:	10000326 	beq	r2,zero,16b3c <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   16b30:	d0a81a17 	ldw	r2,-24472(gp)
   16b34:	10800117 	ldw	r2,4(r2)
   16b38:	d0a81a15 	stw	r2,-24472(gp)
   16b3c:	e0bff817 	ldw	r2,-32(fp)
   16b40:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16b44:	e0bff917 	ldw	r2,-28(fp)
   16b48:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   16b4c:	e0bffa17 	ldw	r2,-24(fp)
   16b50:	1000051e 	bne	r2,zero,16b68 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
   16b54:	e0bfff17 	ldw	r2,-4(fp)
   16b58:	00c01684 	movi	r3,90
   16b5c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   16b60:	0005883a 	mov	r2,zero
   16b64:	00002c06 	br	16c18 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   16b68:	e0bffc17 	ldw	r2,-16(fp)
   16b6c:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   16b70:	e0fffc17 	ldw	r3,-16(fp)
   16b74:	e0bffe17 	ldw	r2,-8(fp)
   16b78:	1885883a 	add	r2,r3,r2
   16b7c:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   16b80:	e03ff715 	stw	zero,-36(fp)
   16b84:	00000c06 	br	16bb8 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   16b88:	e0bff617 	ldw	r2,-40(fp)
   16b8c:	e0fff517 	ldw	r3,-44(fp)
   16b90:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   16b94:	e0bff517 	ldw	r2,-44(fp)
   16b98:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   16b9c:	e0fff517 	ldw	r3,-44(fp)
   16ba0:	e0bffe17 	ldw	r2,-8(fp)
   16ba4:	1885883a 	add	r2,r3,r2
   16ba8:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   16bac:	e0bff717 	ldw	r2,-36(fp)
   16bb0:	10800044 	addi	r2,r2,1
   16bb4:	e0bff715 	stw	r2,-36(fp)
   16bb8:	e0bffd17 	ldw	r2,-12(fp)
   16bbc:	10bfffc4 	addi	r2,r2,-1
   16bc0:	e0fff717 	ldw	r3,-36(fp)
   16bc4:	18bff036 	bltu	r3,r2,16b88 <OSMemCreate+0x134>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   16bc8:	e0bff617 	ldw	r2,-40(fp)
   16bcc:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   16bd0:	e0bffa17 	ldw	r2,-24(fp)
   16bd4:	e0fffc17 	ldw	r3,-16(fp)
   16bd8:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   16bdc:	e0bffa17 	ldw	r2,-24(fp)
   16be0:	e0fffc17 	ldw	r3,-16(fp)
   16be4:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   16be8:	e0bffa17 	ldw	r2,-24(fp)
   16bec:	e0fffd17 	ldw	r3,-12(fp)
   16bf0:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   16bf4:	e0bffa17 	ldw	r2,-24(fp)
   16bf8:	e0fffd17 	ldw	r3,-12(fp)
   16bfc:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   16c00:	e0bffa17 	ldw	r2,-24(fp)
   16c04:	e0fffe17 	ldw	r3,-8(fp)
   16c08:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   16c0c:	e0bfff17 	ldw	r2,-4(fp)
   16c10:	10000005 	stb	zero,0(r2)
    return (pmem);
   16c14:	e0bffa17 	ldw	r2,-24(fp)
}
   16c18:	e037883a 	mov	sp,fp
   16c1c:	df000017 	ldw	fp,0(sp)
   16c20:	dec00104 	addi	sp,sp,4
   16c24:	f800283a 	ret

00016c28 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   16c28:	defff804 	addi	sp,sp,-32
   16c2c:	df000715 	stw	fp,28(sp)
   16c30:	df000704 	addi	fp,sp,28
   16c34:	e13ffe15 	stw	r4,-8(fp)
   16c38:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   16c3c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   16c40:	e0bfff17 	ldw	r2,-4(fp)
   16c44:	1000021e 	bne	r2,zero,16c50 <OSMemGet+0x28>
        return ((void *)0);
   16c48:	0005883a 	mov	r2,zero
   16c4c:	00002e06 	br	16d08 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   16c50:	e0bffe17 	ldw	r2,-8(fp)
   16c54:	1000051e 	bne	r2,zero,16c6c <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   16c58:	e0bfff17 	ldw	r2,-4(fp)
   16c5c:	00c01804 	movi	r3,96
   16c60:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   16c64:	0005883a 	mov	r2,zero
   16c68:	00002706 	br	16d08 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16c6c:	0005303a 	rdctl	r2,status
   16c70:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16c74:	e0fffd17 	ldw	r3,-12(fp)
   16c78:	00bfff84 	movi	r2,-2
   16c7c:	1884703a 	and	r2,r3,r2
   16c80:	1001703a 	wrctl	status,r2
  
  return context;
   16c84:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   16c88:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   16c8c:	e0bffe17 	ldw	r2,-8(fp)
   16c90:	10800417 	ldw	r2,16(r2)
   16c94:	10001426 	beq	r2,zero,16ce8 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   16c98:	e0bffe17 	ldw	r2,-8(fp)
   16c9c:	10800117 	ldw	r2,4(r2)
   16ca0:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   16ca4:	e0bffb17 	ldw	r2,-20(fp)
   16ca8:	10c00017 	ldw	r3,0(r2)
   16cac:	e0bffe17 	ldw	r2,-8(fp)
   16cb0:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   16cb4:	e0bffe17 	ldw	r2,-8(fp)
   16cb8:	10800417 	ldw	r2,16(r2)
   16cbc:	10ffffc4 	addi	r3,r2,-1
   16cc0:	e0bffe17 	ldw	r2,-8(fp)
   16cc4:	10c00415 	stw	r3,16(r2)
   16cc8:	e0bff917 	ldw	r2,-28(fp)
   16ccc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16cd0:	e0bffa17 	ldw	r2,-24(fp)
   16cd4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   16cd8:	e0bfff17 	ldw	r2,-4(fp)
   16cdc:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   16ce0:	e0bffb17 	ldw	r2,-20(fp)
   16ce4:	00000806 	br	16d08 <OSMemGet+0xe0>
   16ce8:	e0bff917 	ldw	r2,-28(fp)
   16cec:	e0bffc15 	stw	r2,-16(fp)
   16cf0:	e0bffc17 	ldw	r2,-16(fp)
   16cf4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   16cf8:	e0bfff17 	ldw	r2,-4(fp)
   16cfc:	00c01744 	movi	r3,93
   16d00:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   16d04:	0005883a 	mov	r2,zero
}
   16d08:	e037883a 	mov	sp,fp
   16d0c:	df000017 	ldw	fp,0(sp)
   16d10:	dec00104 	addi	sp,sp,4
   16d14:	f800283a 	ret

00016d18 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   16d18:	defff704 	addi	sp,sp,-36
   16d1c:	dfc00815 	stw	ra,32(sp)
   16d20:	df000715 	stw	fp,28(sp)
   16d24:	df000704 	addi	fp,sp,28
   16d28:	e13ffd15 	stw	r4,-12(fp)
   16d2c:	e17ffe15 	stw	r5,-8(fp)
   16d30:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16d34:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   16d38:	e0bfff17 	ldw	r2,-4(fp)
   16d3c:	1000021e 	bne	r2,zero,16d48 <OSMemNameGet+0x30>
        return (0);
   16d40:	0005883a 	mov	r2,zero
   16d44:	00002b06 	br	16df4 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   16d48:	e0bffd17 	ldw	r2,-12(fp)
   16d4c:	1000051e 	bne	r2,zero,16d64 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   16d50:	e0bfff17 	ldw	r2,-4(fp)
   16d54:	00c01804 	movi	r3,96
   16d58:	10c00005 	stb	r3,0(r2)
        return (0);
   16d5c:	0005883a 	mov	r2,zero
   16d60:	00002406 	br	16df4 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   16d64:	e0bffe17 	ldw	r2,-8(fp)
   16d68:	1000051e 	bne	r2,zero,16d80 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   16d6c:	e0bfff17 	ldw	r2,-4(fp)
   16d70:	00c00304 	movi	r3,12
   16d74:	10c00005 	stb	r3,0(r2)
        return (0);
   16d78:	0005883a 	mov	r2,zero
   16d7c:	00001d06 	br	16df4 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   16d80:	d0a81f03 	ldbu	r2,-24452(gp)
   16d84:	10803fcc 	andi	r2,r2,255
   16d88:	10000526 	beq	r2,zero,16da0 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   16d8c:	e0bfff17 	ldw	r2,-4(fp)
   16d90:	00c00444 	movi	r3,17
   16d94:	10c00005 	stb	r3,0(r2)
        return (0);
   16d98:	0005883a 	mov	r2,zero
   16d9c:	00001506 	br	16df4 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16da0:	0005303a 	rdctl	r2,status
   16da4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16da8:	e0fffb17 	ldw	r3,-20(fp)
   16dac:	00bfff84 	movi	r2,-2
   16db0:	1884703a 	and	r2,r3,r2
   16db4:	1001703a 	wrctl	status,r2
  
  return context;
   16db8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   16dbc:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   16dc0:	e0bffd17 	ldw	r2,-12(fp)
   16dc4:	10800504 	addi	r2,r2,20
   16dc8:	100b883a 	mov	r5,r2
   16dcc:	e13ffe17 	ldw	r4,-8(fp)
   16dd0:	0014c100 	call	14c10 <OS_StrCopy>
   16dd4:	e0bffa05 	stb	r2,-24(fp)
   16dd8:	e0bff917 	ldw	r2,-28(fp)
   16ddc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16de0:	e0bffc17 	ldw	r2,-16(fp)
   16de4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   16de8:	e0bfff17 	ldw	r2,-4(fp)
   16dec:	10000005 	stb	zero,0(r2)
    return (len);
   16df0:	e0bffa03 	ldbu	r2,-24(fp)
}
   16df4:	e037883a 	mov	sp,fp
   16df8:	dfc00117 	ldw	ra,4(sp)
   16dfc:	df000017 	ldw	fp,0(sp)
   16e00:	dec00204 	addi	sp,sp,8
   16e04:	f800283a 	ret

00016e08 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   16e08:	defff604 	addi	sp,sp,-40
   16e0c:	dfc00915 	stw	ra,36(sp)
   16e10:	df000815 	stw	fp,32(sp)
   16e14:	df000804 	addi	fp,sp,32
   16e18:	e13ffd15 	stw	r4,-12(fp)
   16e1c:	e17ffe15 	stw	r5,-8(fp)
   16e20:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16e24:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   16e28:	e0bfff17 	ldw	r2,-4(fp)
   16e2c:	10003526 	beq	r2,zero,16f04 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   16e30:	e0bffd17 	ldw	r2,-12(fp)
   16e34:	1000041e 	bne	r2,zero,16e48 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   16e38:	e0bfff17 	ldw	r2,-4(fp)
   16e3c:	00c01804 	movi	r3,96
   16e40:	10c00005 	stb	r3,0(r2)
        return;
   16e44:	00003006 	br	16f08 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   16e48:	e0bffe17 	ldw	r2,-8(fp)
   16e4c:	1000041e 	bne	r2,zero,16e60 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   16e50:	e0bfff17 	ldw	r2,-4(fp)
   16e54:	00c00304 	movi	r3,12
   16e58:	10c00005 	stb	r3,0(r2)
        return;
   16e5c:	00002a06 	br	16f08 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   16e60:	d0a81f03 	ldbu	r2,-24452(gp)
   16e64:	10803fcc 	andi	r2,r2,255
   16e68:	10000426 	beq	r2,zero,16e7c <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   16e6c:	e0bfff17 	ldw	r2,-4(fp)
   16e70:	00c00484 	movi	r3,18
   16e74:	10c00005 	stb	r3,0(r2)
        return;
   16e78:	00002306 	br	16f08 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16e7c:	0005303a 	rdctl	r2,status
   16e80:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16e84:	e0fffc17 	ldw	r3,-16(fp)
   16e88:	00bfff84 	movi	r2,-2
   16e8c:	1884703a 	and	r2,r3,r2
   16e90:	1001703a 	wrctl	status,r2
  
  return context;
   16e94:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   16e98:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   16e9c:	e13ffe17 	ldw	r4,-8(fp)
   16ea0:	0014c840 	call	14c84 <OS_StrLen>
   16ea4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   16ea8:	e0bffa03 	ldbu	r2,-24(fp)
   16eac:	10800830 	cmpltui	r2,r2,32
   16eb0:	1000081e 	bne	r2,zero,16ed4 <OSMemNameSet+0xcc>
   16eb4:	e0bff817 	ldw	r2,-32(fp)
   16eb8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16ebc:	e0bff917 	ldw	r2,-28(fp)
   16ec0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   16ec4:	e0bfff17 	ldw	r2,-4(fp)
   16ec8:	00c018c4 	movi	r3,99
   16ecc:	10c00005 	stb	r3,0(r2)
        return;
   16ed0:	00000d06 	br	16f08 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   16ed4:	e0bffd17 	ldw	r2,-12(fp)
   16ed8:	10800504 	addi	r2,r2,20
   16edc:	e17ffe17 	ldw	r5,-8(fp)
   16ee0:	1009883a 	mov	r4,r2
   16ee4:	0014c100 	call	14c10 <OS_StrCopy>
   16ee8:	e0bff817 	ldw	r2,-32(fp)
   16eec:	e0bffb15 	stw	r2,-20(fp)
   16ef0:	e0bffb17 	ldw	r2,-20(fp)
   16ef4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   16ef8:	e0bfff17 	ldw	r2,-4(fp)
   16efc:	10000005 	stb	zero,0(r2)
   16f00:	00000106 	br	16f08 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   16f04:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   16f08:	e037883a 	mov	sp,fp
   16f0c:	dfc00117 	ldw	ra,4(sp)
   16f10:	df000017 	ldw	fp,0(sp)
   16f14:	dec00204 	addi	sp,sp,8
   16f18:	f800283a 	ret

00016f1c <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   16f1c:	defff904 	addi	sp,sp,-28
   16f20:	df000615 	stw	fp,24(sp)
   16f24:	df000604 	addi	fp,sp,24
   16f28:	e13ffe15 	stw	r4,-8(fp)
   16f2c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16f30:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   16f34:	e0bffe17 	ldw	r2,-8(fp)
   16f38:	1000021e 	bne	r2,zero,16f44 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   16f3c:	00801804 	movi	r2,96
   16f40:	00002806 	br	16fe4 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   16f44:	e0bfff17 	ldw	r2,-4(fp)
   16f48:	1000021e 	bne	r2,zero,16f54 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   16f4c:	008017c4 	movi	r2,95
   16f50:	00002406 	br	16fe4 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16f54:	0005303a 	rdctl	r2,status
   16f58:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16f5c:	e0fffd17 	ldw	r3,-12(fp)
   16f60:	00bfff84 	movi	r2,-2
   16f64:	1884703a 	and	r2,r3,r2
   16f68:	1001703a 	wrctl	status,r2
  
  return context;
   16f6c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   16f70:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   16f74:	e0bffe17 	ldw	r2,-8(fp)
   16f78:	10c00417 	ldw	r3,16(r2)
   16f7c:	e0bffe17 	ldw	r2,-8(fp)
   16f80:	10800317 	ldw	r2,12(r2)
   16f84:	18800636 	bltu	r3,r2,16fa0 <OSMemPut+0x84>
   16f88:	e0bffa17 	ldw	r2,-24(fp)
   16f8c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16f90:	e0bffb17 	ldw	r2,-20(fp)
   16f94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   16f98:	00801784 	movi	r2,94
   16f9c:	00001106 	br	16fe4 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   16fa0:	e0bffe17 	ldw	r2,-8(fp)
   16fa4:	10c00117 	ldw	r3,4(r2)
   16fa8:	e0bfff17 	ldw	r2,-4(fp)
   16fac:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   16fb0:	e0bffe17 	ldw	r2,-8(fp)
   16fb4:	e0ffff17 	ldw	r3,-4(fp)
   16fb8:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   16fbc:	e0bffe17 	ldw	r2,-8(fp)
   16fc0:	10800417 	ldw	r2,16(r2)
   16fc4:	10c00044 	addi	r3,r2,1
   16fc8:	e0bffe17 	ldw	r2,-8(fp)
   16fcc:	10c00415 	stw	r3,16(r2)
   16fd0:	e0bffa17 	ldw	r2,-24(fp)
   16fd4:	e0bffc15 	stw	r2,-16(fp)
   16fd8:	e0bffc17 	ldw	r2,-16(fp)
   16fdc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   16fe0:	0005883a 	mov	r2,zero
}
   16fe4:	e037883a 	mov	sp,fp
   16fe8:	df000017 	ldw	fp,0(sp)
   16fec:	dec00104 	addi	sp,sp,4
   16ff0:	f800283a 	ret

00016ff4 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   16ff4:	defffa04 	addi	sp,sp,-24
   16ff8:	df000515 	stw	fp,20(sp)
   16ffc:	df000504 	addi	fp,sp,20
   17000:	e13ffe15 	stw	r4,-8(fp)
   17004:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17008:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   1700c:	e0bffe17 	ldw	r2,-8(fp)
   17010:	1000021e 	bne	r2,zero,1701c <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   17014:	00801804 	movi	r2,96
   17018:	00002c06 	br	170cc <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   1701c:	e0bfff17 	ldw	r2,-4(fp)
   17020:	1000021e 	bne	r2,zero,1702c <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   17024:	00801844 	movi	r2,97
   17028:	00002806 	br	170cc <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1702c:	0005303a 	rdctl	r2,status
   17030:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17034:	e0fffc17 	ldw	r3,-16(fp)
   17038:	00bfff84 	movi	r2,-2
   1703c:	1884703a 	and	r2,r3,r2
   17040:	1001703a 	wrctl	status,r2
  
  return context;
   17044:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   17048:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   1704c:	e0bffe17 	ldw	r2,-8(fp)
   17050:	10c00017 	ldw	r3,0(r2)
   17054:	e0bfff17 	ldw	r2,-4(fp)
   17058:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   1705c:	e0bffe17 	ldw	r2,-8(fp)
   17060:	10c00117 	ldw	r3,4(r2)
   17064:	e0bfff17 	ldw	r2,-4(fp)
   17068:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   1706c:	e0bffe17 	ldw	r2,-8(fp)
   17070:	10c00217 	ldw	r3,8(r2)
   17074:	e0bfff17 	ldw	r2,-4(fp)
   17078:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   1707c:	e0bffe17 	ldw	r2,-8(fp)
   17080:	10c00317 	ldw	r3,12(r2)
   17084:	e0bfff17 	ldw	r2,-4(fp)
   17088:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   1708c:	e0bffe17 	ldw	r2,-8(fp)
   17090:	10c00417 	ldw	r3,16(r2)
   17094:	e0bfff17 	ldw	r2,-4(fp)
   17098:	10c00415 	stw	r3,16(r2)
   1709c:	e0bffb17 	ldw	r2,-20(fp)
   170a0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   170a4:	e0bffd17 	ldw	r2,-12(fp)
   170a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   170ac:	e0bfff17 	ldw	r2,-4(fp)
   170b0:	10c00317 	ldw	r3,12(r2)
   170b4:	e0bfff17 	ldw	r2,-4(fp)
   170b8:	10800417 	ldw	r2,16(r2)
   170bc:	1887c83a 	sub	r3,r3,r2
   170c0:	e0bfff17 	ldw	r2,-4(fp)
   170c4:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   170c8:	0005883a 	mov	r2,zero
}
   170cc:	e037883a 	mov	sp,fp
   170d0:	df000017 	ldw	fp,0(sp)
   170d4:	dec00104 	addi	sp,sp,4
   170d8:	f800283a 	ret

000170dc <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   170dc:	defffc04 	addi	sp,sp,-16
   170e0:	dfc00315 	stw	ra,12(sp)
   170e4:	df000215 	stw	fp,8(sp)
   170e8:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   170ec:	01430c04 	movi	r5,3120
   170f0:	010000f4 	movhi	r4,3
   170f4:	2136fb04 	addi	r4,r4,-9236
   170f8:	0014a100 	call	14a10 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   170fc:	008000f4 	movhi	r2,3
   17100:	10b6fb04 	addi	r2,r2,-9236
   17104:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   17108:	e03fff0d 	sth	zero,-4(fp)
   1710c:	00001306 	br	1715c <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   17110:	e0bfff0b 	ldhu	r2,-4(fp)
   17114:	10800044 	addi	r2,r2,1
   17118:	10c00d24 	muli	r3,r2,52
   1711c:	008000f4 	movhi	r2,3
   17120:	10b6fb04 	addi	r2,r2,-9236
   17124:	1887883a 	add	r3,r3,r2
   17128:	e0bffe17 	ldw	r2,-8(fp)
   1712c:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   17130:	e0bffe17 	ldw	r2,-8(fp)
   17134:	00c00fc4 	movi	r3,63
   17138:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   1713c:	e0bffe17 	ldw	r2,-8(fp)
   17140:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   17144:	e0bffe17 	ldw	r2,-8(fp)
   17148:	10800d04 	addi	r2,r2,52
   1714c:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   17150:	e0bfff0b 	ldhu	r2,-4(fp)
   17154:	10800044 	addi	r2,r2,1
   17158:	e0bfff0d 	sth	r2,-4(fp)
   1715c:	e0bfff0b 	ldhu	r2,-4(fp)
   17160:	10800ef0 	cmpltui	r2,r2,59
   17164:	103fea1e 	bne	r2,zero,17110 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   17168:	e0bffe17 	ldw	r2,-8(fp)
   1716c:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   17170:	e0bffe17 	ldw	r2,-8(fp)
   17174:	00c00fc4 	movi	r3,63
   17178:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   1717c:	e0bffe17 	ldw	r2,-8(fp)
   17180:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   17184:	008000f4 	movhi	r2,3
   17188:	10b6fb04 	addi	r2,r2,-9236
   1718c:	d0a81a15 	stw	r2,-24472(gp)
#endif
}
   17190:	0001883a 	nop
   17194:	e037883a 	mov	sp,fp
   17198:	dfc00117 	ldw	ra,4(sp)
   1719c:	df000017 	ldw	fp,0(sp)
   171a0:	dec00204 	addi	sp,sp,8
   171a4:	f800283a 	ret

000171a8 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   171a8:	defff804 	addi	sp,sp,-32
   171ac:	df000715 	stw	fp,28(sp)
   171b0:	df000704 	addi	fp,sp,28
   171b4:	e13ffe15 	stw	r4,-8(fp)
   171b8:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   171bc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   171c0:	e0bfff17 	ldw	r2,-4(fp)
   171c4:	1000021e 	bne	r2,zero,171d0 <OSQAccept+0x28>
        return ((void *)0);
   171c8:	0005883a 	mov	r2,zero
   171cc:	00004206 	br	172d8 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   171d0:	e0bffe17 	ldw	r2,-8(fp)
   171d4:	1000051e 	bne	r2,zero,171ec <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   171d8:	e0bfff17 	ldw	r2,-4(fp)
   171dc:	00c00104 	movi	r3,4
   171e0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   171e4:	0005883a 	mov	r2,zero
   171e8:	00003b06 	br	172d8 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   171ec:	e0bffe17 	ldw	r2,-8(fp)
   171f0:	10800003 	ldbu	r2,0(r2)
   171f4:	10803fcc 	andi	r2,r2,255
   171f8:	108000a0 	cmpeqi	r2,r2,2
   171fc:	1000051e 	bne	r2,zero,17214 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   17200:	e0bfff17 	ldw	r2,-4(fp)
   17204:	00c00044 	movi	r3,1
   17208:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1720c:	0005883a 	mov	r2,zero
   17210:	00003106 	br	172d8 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17214:	0005303a 	rdctl	r2,status
   17218:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1721c:	e0fffd17 	ldw	r3,-12(fp)
   17220:	00bfff84 	movi	r2,-2
   17224:	1884703a 	and	r2,r3,r2
   17228:	1001703a 	wrctl	status,r2
  
  return context;
   1722c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   17230:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   17234:	e0bffe17 	ldw	r2,-8(fp)
   17238:	10800117 	ldw	r2,4(r2)
   1723c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   17240:	e0bffc17 	ldw	r2,-16(fp)
   17244:	1080058b 	ldhu	r2,22(r2)
   17248:	10bfffcc 	andi	r2,r2,65535
   1724c:	10001926 	beq	r2,zero,172b4 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   17250:	e0bffc17 	ldw	r2,-16(fp)
   17254:	10800417 	ldw	r2,16(r2)
   17258:	11000104 	addi	r4,r2,4
   1725c:	e0fffc17 	ldw	r3,-16(fp)
   17260:	19000415 	stw	r4,16(r3)
   17264:	10800017 	ldw	r2,0(r2)
   17268:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   1726c:	e0bffc17 	ldw	r2,-16(fp)
   17270:	1080058b 	ldhu	r2,22(r2)
   17274:	10bfffc4 	addi	r2,r2,-1
   17278:	1007883a 	mov	r3,r2
   1727c:	e0bffc17 	ldw	r2,-16(fp)
   17280:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   17284:	e0bffc17 	ldw	r2,-16(fp)
   17288:	10c00417 	ldw	r3,16(r2)
   1728c:	e0bffc17 	ldw	r2,-16(fp)
   17290:	10800217 	ldw	r2,8(r2)
   17294:	1880041e 	bne	r3,r2,172a8 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   17298:	e0bffc17 	ldw	r2,-16(fp)
   1729c:	10c00117 	ldw	r3,4(r2)
   172a0:	e0bffc17 	ldw	r2,-16(fp)
   172a4:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   172a8:	e0bfff17 	ldw	r2,-4(fp)
   172ac:	10000005 	stb	zero,0(r2)
   172b0:	00000406 	br	172c4 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   172b4:	e0bfff17 	ldw	r2,-4(fp)
   172b8:	00c007c4 	movi	r3,31
   172bc:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   172c0:	e03ff915 	stw	zero,-28(fp)
   172c4:	e0bffa17 	ldw	r2,-24(fp)
   172c8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   172cc:	e0bffb17 	ldw	r2,-20(fp)
   172d0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   172d4:	e0bff917 	ldw	r2,-28(fp)
}
   172d8:	e037883a 	mov	sp,fp
   172dc:	df000017 	ldw	fp,0(sp)
   172e0:	dec00104 	addi	sp,sp,4
   172e4:	f800283a 	ret

000172e8 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   172e8:	defff404 	addi	sp,sp,-48
   172ec:	dfc00b15 	stw	ra,44(sp)
   172f0:	df000a15 	stw	fp,40(sp)
   172f4:	df000a04 	addi	fp,sp,40
   172f8:	e13ffe15 	stw	r4,-8(fp)
   172fc:	2805883a 	mov	r2,r5
   17300:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17304:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   17308:	d0a81f03 	ldbu	r2,-24452(gp)
   1730c:	10803fcc 	andi	r2,r2,255
   17310:	10000226 	beq	r2,zero,1731c <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   17314:	0005883a 	mov	r2,zero
   17318:	00005906 	br	17480 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1731c:	0005303a 	rdctl	r2,status
   17320:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17324:	e0fffd17 	ldw	r3,-12(fp)
   17328:	00bfff84 	movi	r2,-2
   1732c:	1884703a 	and	r2,r3,r2
   17330:	1001703a 	wrctl	status,r2
  
  return context;
   17334:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   17338:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   1733c:	d0a81e17 	ldw	r2,-24456(gp)
   17340:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   17344:	d0a81e17 	ldw	r2,-24456(gp)
   17348:	10000326 	beq	r2,zero,17358 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   1734c:	d0a81e17 	ldw	r2,-24456(gp)
   17350:	10800117 	ldw	r2,4(r2)
   17354:	d0a81e15 	stw	r2,-24456(gp)
   17358:	e0bff717 	ldw	r2,-36(fp)
   1735c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17360:	e0bff817 	ldw	r2,-32(fp)
   17364:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   17368:	e0bff617 	ldw	r2,-40(fp)
   1736c:	10004326 	beq	r2,zero,1747c <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17370:	0005303a 	rdctl	r2,status
   17374:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17378:	e0fff917 	ldw	r3,-28(fp)
   1737c:	00bfff84 	movi	r2,-2
   17380:	1884703a 	and	r2,r3,r2
   17384:	1001703a 	wrctl	status,r2
  
  return context;
   17388:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
   1738c:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   17390:	d0a81c17 	ldw	r2,-24464(gp)
   17394:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   17398:	e0bffb17 	ldw	r2,-20(fp)
   1739c:	10002d26 	beq	r2,zero,17454 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   173a0:	d0a81c17 	ldw	r2,-24464(gp)
   173a4:	10800017 	ldw	r2,0(r2)
   173a8:	d0a81c15 	stw	r2,-24464(gp)
   173ac:	e0bff717 	ldw	r2,-36(fp)
   173b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   173b4:	e0bffa17 	ldw	r2,-24(fp)
   173b8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   173bc:	e0bffb17 	ldw	r2,-20(fp)
   173c0:	e0fffe17 	ldw	r3,-8(fp)
   173c4:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   173c8:	e0bfff0b 	ldhu	r2,-4(fp)
   173cc:	1085883a 	add	r2,r2,r2
   173d0:	1085883a 	add	r2,r2,r2
   173d4:	1007883a 	mov	r3,r2
   173d8:	e0bffe17 	ldw	r2,-8(fp)
   173dc:	10c7883a 	add	r3,r2,r3
   173e0:	e0bffb17 	ldw	r2,-20(fp)
   173e4:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   173e8:	e0bffb17 	ldw	r2,-20(fp)
   173ec:	e0fffe17 	ldw	r3,-8(fp)
   173f0:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   173f4:	e0bffb17 	ldw	r2,-20(fp)
   173f8:	e0fffe17 	ldw	r3,-8(fp)
   173fc:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   17400:	e0bffb17 	ldw	r2,-20(fp)
   17404:	e0ffff0b 	ldhu	r3,-4(fp)
   17408:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   1740c:	e0bffb17 	ldw	r2,-20(fp)
   17410:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   17414:	e0bff617 	ldw	r2,-40(fp)
   17418:	00c00084 	movi	r3,2
   1741c:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   17420:	e0bff617 	ldw	r2,-40(fp)
   17424:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   17428:	e0bff617 	ldw	r2,-40(fp)
   1742c:	e0fffb17 	ldw	r3,-20(fp)
   17430:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   17434:	e0bff617 	ldw	r2,-40(fp)
   17438:	00c00fc4 	movi	r3,63
   1743c:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   17440:	e0bff617 	ldw	r2,-40(fp)
   17444:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   17448:	e13ff617 	ldw	r4,-40(fp)
   1744c:	00146300 	call	14630 <OS_EventWaitListInit>
   17450:	00000a06 	br	1747c <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   17454:	d0e81e17 	ldw	r3,-24456(gp)
   17458:	e0bff617 	ldw	r2,-40(fp)
   1745c:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   17460:	e0bff617 	ldw	r2,-40(fp)
   17464:	d0a81e15 	stw	r2,-24456(gp)
   17468:	e0bff717 	ldw	r2,-36(fp)
   1746c:	e0bffc15 	stw	r2,-16(fp)
   17470:	e0bffc17 	ldw	r2,-16(fp)
   17474:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   17478:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   1747c:	e0bff617 	ldw	r2,-40(fp)
}
   17480:	e037883a 	mov	sp,fp
   17484:	dfc00117 	ldw	ra,4(sp)
   17488:	df000017 	ldw	fp,0(sp)
   1748c:	dec00204 	addi	sp,sp,8
   17490:	f800283a 	ret

00017494 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   17494:	defff204 	addi	sp,sp,-56
   17498:	dfc00d15 	stw	ra,52(sp)
   1749c:	df000c15 	stw	fp,48(sp)
   174a0:	df000c04 	addi	fp,sp,48
   174a4:	e13ffd15 	stw	r4,-12(fp)
   174a8:	2805883a 	mov	r2,r5
   174ac:	e1bfff15 	stw	r6,-4(fp)
   174b0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   174b4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   174b8:	e0bfff17 	ldw	r2,-4(fp)
   174bc:	1000021e 	bne	r2,zero,174c8 <OSQDel+0x34>
        return (pevent);
   174c0:	e0bffd17 	ldw	r2,-12(fp)
   174c4:	00008e06 	br	17700 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   174c8:	e0bffd17 	ldw	r2,-12(fp)
   174cc:	1000051e 	bne	r2,zero,174e4 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   174d0:	e0bfff17 	ldw	r2,-4(fp)
   174d4:	00c00104 	movi	r3,4
   174d8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   174dc:	e0bffd17 	ldw	r2,-12(fp)
   174e0:	00008706 	br	17700 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   174e4:	e0bffd17 	ldw	r2,-12(fp)
   174e8:	10800003 	ldbu	r2,0(r2)
   174ec:	10803fcc 	andi	r2,r2,255
   174f0:	108000a0 	cmpeqi	r2,r2,2
   174f4:	1000051e 	bne	r2,zero,1750c <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   174f8:	e0bfff17 	ldw	r2,-4(fp)
   174fc:	00c00044 	movi	r3,1
   17500:	10c00005 	stb	r3,0(r2)
        return (pevent);
   17504:	e0bffd17 	ldw	r2,-12(fp)
   17508:	00007d06 	br	17700 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1750c:	d0a81f03 	ldbu	r2,-24452(gp)
   17510:	10803fcc 	andi	r2,r2,255
   17514:	10000526 	beq	r2,zero,1752c <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   17518:	e0bfff17 	ldw	r2,-4(fp)
   1751c:	00c003c4 	movi	r3,15
   17520:	10c00005 	stb	r3,0(r2)
        return (pevent);
   17524:	e0bffd17 	ldw	r2,-12(fp)
   17528:	00007506 	br	17700 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1752c:	0005303a 	rdctl	r2,status
   17530:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17534:	e0fffc17 	ldw	r3,-16(fp)
   17538:	00bfff84 	movi	r2,-2
   1753c:	1884703a 	and	r2,r3,r2
   17540:	1001703a 	wrctl	status,r2
  
  return context;
   17544:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   17548:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   1754c:	e0bffd17 	ldw	r2,-12(fp)
   17550:	10800283 	ldbu	r2,10(r2)
   17554:	10803fcc 	andi	r2,r2,255
   17558:	10000326 	beq	r2,zero,17568 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1755c:	00800044 	movi	r2,1
   17560:	e0bff405 	stb	r2,-48(fp)
   17564:	00000106 	br	1756c <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   17568:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   1756c:	e0bffe03 	ldbu	r2,-8(fp)
   17570:	10000326 	beq	r2,zero,17580 <OSQDel+0xec>
   17574:	10800060 	cmpeqi	r2,r2,1
   17578:	1000301e 	bne	r2,zero,1763c <OSQDel+0x1a8>
   1757c:	00005506 	br	176d4 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   17580:	e0bff403 	ldbu	r2,-48(fp)
   17584:	10001e1e 	bne	r2,zero,17600 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   17588:	e0bffd17 	ldw	r2,-12(fp)
   1758c:	00c00fc4 	movi	r3,63
   17590:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   17594:	e0bffd17 	ldw	r2,-12(fp)
   17598:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   1759c:	e0bffd17 	ldw	r2,-12(fp)
   175a0:	10800117 	ldw	r2,4(r2)
   175a4:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   175a8:	d0e81c17 	ldw	r3,-24464(gp)
   175ac:	e0bff817 	ldw	r2,-32(fp)
   175b0:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   175b4:	e0bff817 	ldw	r2,-32(fp)
   175b8:	d0a81c15 	stw	r2,-24464(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   175bc:	e0bffd17 	ldw	r2,-12(fp)
   175c0:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   175c4:	d0e81e17 	ldw	r3,-24456(gp)
   175c8:	e0bffd17 	ldw	r2,-12(fp)
   175cc:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   175d0:	e0bffd17 	ldw	r2,-12(fp)
   175d4:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   175d8:	e0bffd17 	ldw	r2,-12(fp)
   175dc:	d0a81e15 	stw	r2,-24456(gp)
   175e0:	e0bff617 	ldw	r2,-40(fp)
   175e4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   175e8:	e0bff717 	ldw	r2,-36(fp)
   175ec:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   175f0:	e0bfff17 	ldw	r2,-4(fp)
   175f4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   175f8:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   175fc:	00003f06 	br	176fc <OSQDel+0x268>
   17600:	e0bff617 	ldw	r2,-40(fp)
   17604:	e0bff915 	stw	r2,-28(fp)
   17608:	e0bff917 	ldw	r2,-28(fp)
   1760c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   17610:	e0bfff17 	ldw	r2,-4(fp)
   17614:	00c01244 	movi	r3,73
   17618:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   1761c:	e0bffd17 	ldw	r2,-12(fp)
   17620:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   17624:	00003506 	br	176fc <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   17628:	000f883a 	mov	r7,zero
   1762c:	01800104 	movi	r6,4
   17630:	000b883a 	mov	r5,zero
   17634:	e13ffd17 	ldw	r4,-12(fp)
   17638:	00140800 	call	14080 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   1763c:	e0bffd17 	ldw	r2,-12(fp)
   17640:	10800283 	ldbu	r2,10(r2)
   17644:	10803fcc 	andi	r2,r2,255
   17648:	103ff71e 	bne	r2,zero,17628 <OSQDel+0x194>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   1764c:	e0bffd17 	ldw	r2,-12(fp)
   17650:	00c00fc4 	movi	r3,63
   17654:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   17658:	e0bffd17 	ldw	r2,-12(fp)
   1765c:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   17660:	e0bffd17 	ldw	r2,-12(fp)
   17664:	10800117 	ldw	r2,4(r2)
   17668:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   1766c:	d0e81c17 	ldw	r3,-24464(gp)
   17670:	e0bff817 	ldw	r2,-32(fp)
   17674:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   17678:	e0bff817 	ldw	r2,-32(fp)
   1767c:	d0a81c15 	stw	r2,-24464(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   17680:	e0bffd17 	ldw	r2,-12(fp)
   17684:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   17688:	d0e81e17 	ldw	r3,-24456(gp)
   1768c:	e0bffd17 	ldw	r2,-12(fp)
   17690:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   17694:	e0bffd17 	ldw	r2,-12(fp)
   17698:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   1769c:	e0bffd17 	ldw	r2,-12(fp)
   176a0:	d0a81e15 	stw	r2,-24456(gp)
   176a4:	e0bff617 	ldw	r2,-40(fp)
   176a8:	e0bffa15 	stw	r2,-24(fp)
   176ac:	e0bffa17 	ldw	r2,-24(fp)
   176b0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   176b4:	e0bff403 	ldbu	r2,-48(fp)
   176b8:	10800058 	cmpnei	r2,r2,1
   176bc:	1000011e 	bne	r2,zero,176c4 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   176c0:	0014acc0 	call	14acc <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   176c4:	e0bfff17 	ldw	r2,-4(fp)
   176c8:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   176cc:	e03ff515 	stw	zero,-44(fp)
             break;
   176d0:	00000a06 	br	176fc <OSQDel+0x268>
   176d4:	e0bff617 	ldw	r2,-40(fp)
   176d8:	e0bffb15 	stw	r2,-20(fp)
   176dc:	e0bffb17 	ldw	r2,-20(fp)
   176e0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   176e4:	e0bfff17 	ldw	r2,-4(fp)
   176e8:	00c001c4 	movi	r3,7
   176ec:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   176f0:	e0bffd17 	ldw	r2,-12(fp)
   176f4:	e0bff515 	stw	r2,-44(fp)
             break;
   176f8:	0001883a 	nop
    }
    return (pevent_return);
   176fc:	e0bff517 	ldw	r2,-44(fp)
}
   17700:	e037883a 	mov	sp,fp
   17704:	dfc00117 	ldw	ra,4(sp)
   17708:	df000017 	ldw	fp,0(sp)
   1770c:	dec00204 	addi	sp,sp,8
   17710:	f800283a 	ret

00017714 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   17714:	defffa04 	addi	sp,sp,-24
   17718:	df000515 	stw	fp,20(sp)
   1771c:	df000504 	addi	fp,sp,20
   17720:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17724:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   17728:	e0bfff17 	ldw	r2,-4(fp)
   1772c:	1000021e 	bne	r2,zero,17738 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   17730:	00800104 	movi	r2,4
   17734:	00002106 	br	177bc <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   17738:	e0bfff17 	ldw	r2,-4(fp)
   1773c:	10800003 	ldbu	r2,0(r2)
   17740:	10803fcc 	andi	r2,r2,255
   17744:	108000a0 	cmpeqi	r2,r2,2
   17748:	1000021e 	bne	r2,zero,17754 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   1774c:	00800044 	movi	r2,1
   17750:	00001a06 	br	177bc <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17754:	0005303a 	rdctl	r2,status
   17758:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1775c:	e0fffd17 	ldw	r3,-12(fp)
   17760:	00bfff84 	movi	r2,-2
   17764:	1884703a 	and	r2,r3,r2
   17768:	1001703a 	wrctl	status,r2
  
  return context;
   1776c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   17770:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   17774:	e0bfff17 	ldw	r2,-4(fp)
   17778:	10800117 	ldw	r2,4(r2)
   1777c:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   17780:	e0bffc17 	ldw	r2,-16(fp)
   17784:	10c00117 	ldw	r3,4(r2)
   17788:	e0bffc17 	ldw	r2,-16(fp)
   1778c:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   17790:	e0bffc17 	ldw	r2,-16(fp)
   17794:	10c00117 	ldw	r3,4(r2)
   17798:	e0bffc17 	ldw	r2,-16(fp)
   1779c:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   177a0:	e0bffc17 	ldw	r2,-16(fp)
   177a4:	1000058d 	sth	zero,22(r2)
   177a8:	e0bffb17 	ldw	r2,-20(fp)
   177ac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   177b0:	e0bffe17 	ldw	r2,-8(fp)
   177b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   177b8:	0005883a 	mov	r2,zero
}
   177bc:	e037883a 	mov	sp,fp
   177c0:	df000017 	ldw	fp,0(sp)
   177c4:	dec00104 	addi	sp,sp,4
   177c8:	f800283a 	ret

000177cc <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   177cc:	defff304 	addi	sp,sp,-52
   177d0:	dfc00c15 	stw	ra,48(sp)
   177d4:	df000b15 	stw	fp,44(sp)
   177d8:	df000b04 	addi	fp,sp,44
   177dc:	e13ffd15 	stw	r4,-12(fp)
   177e0:	2805883a 	mov	r2,r5
   177e4:	e1bfff15 	stw	r6,-4(fp)
   177e8:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   177ec:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   177f0:	e0bfff17 	ldw	r2,-4(fp)
   177f4:	1000021e 	bne	r2,zero,17800 <OSQPend+0x34>
        return ((void *)0);
   177f8:	0005883a 	mov	r2,zero
   177fc:	00009106 	br	17a44 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   17800:	e0bffd17 	ldw	r2,-12(fp)
   17804:	1000051e 	bne	r2,zero,1781c <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   17808:	e0bfff17 	ldw	r2,-4(fp)
   1780c:	00c00104 	movi	r3,4
   17810:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   17814:	0005883a 	mov	r2,zero
   17818:	00008a06 	br	17a44 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   1781c:	e0bffd17 	ldw	r2,-12(fp)
   17820:	10800003 	ldbu	r2,0(r2)
   17824:	10803fcc 	andi	r2,r2,255
   17828:	108000a0 	cmpeqi	r2,r2,2
   1782c:	1000051e 	bne	r2,zero,17844 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   17830:	e0bfff17 	ldw	r2,-4(fp)
   17834:	00c00044 	movi	r3,1
   17838:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1783c:	0005883a 	mov	r2,zero
   17840:	00008006 	br	17a44 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   17844:	d0a81f03 	ldbu	r2,-24452(gp)
   17848:	10803fcc 	andi	r2,r2,255
   1784c:	10000526 	beq	r2,zero,17864 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   17850:	e0bfff17 	ldw	r2,-4(fp)
   17854:	00c00084 	movi	r3,2
   17858:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1785c:	0005883a 	mov	r2,zero
   17860:	00007806 	br	17a44 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   17864:	d0a81103 	ldbu	r2,-24508(gp)
   17868:	10803fcc 	andi	r2,r2,255
   1786c:	10000526 	beq	r2,zero,17884 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   17870:	e0bfff17 	ldw	r2,-4(fp)
   17874:	00c00344 	movi	r3,13
   17878:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1787c:	0005883a 	mov	r2,zero
   17880:	00007006 	br	17a44 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17884:	0005303a 	rdctl	r2,status
   17888:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1788c:	e0fffc17 	ldw	r3,-16(fp)
   17890:	00bfff84 	movi	r2,-2
   17894:	1884703a 	and	r2,r3,r2
   17898:	1001703a 	wrctl	status,r2
  
  return context;
   1789c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   178a0:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   178a4:	e0bffd17 	ldw	r2,-12(fp)
   178a8:	10800117 	ldw	r2,4(r2)
   178ac:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   178b0:	e0bff817 	ldw	r2,-32(fp)
   178b4:	1080058b 	ldhu	r2,22(r2)
   178b8:	10bfffcc 	andi	r2,r2,65535
   178bc:	10001e26 	beq	r2,zero,17938 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   178c0:	e0bff817 	ldw	r2,-32(fp)
   178c4:	10800417 	ldw	r2,16(r2)
   178c8:	11000104 	addi	r4,r2,4
   178cc:	e0fff817 	ldw	r3,-32(fp)
   178d0:	19000415 	stw	r4,16(r3)
   178d4:	10800017 	ldw	r2,0(r2)
   178d8:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   178dc:	e0bff817 	ldw	r2,-32(fp)
   178e0:	1080058b 	ldhu	r2,22(r2)
   178e4:	10bfffc4 	addi	r2,r2,-1
   178e8:	1007883a 	mov	r3,r2
   178ec:	e0bff817 	ldw	r2,-32(fp)
   178f0:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   178f4:	e0bff817 	ldw	r2,-32(fp)
   178f8:	10c00417 	ldw	r3,16(r2)
   178fc:	e0bff817 	ldw	r2,-32(fp)
   17900:	10800217 	ldw	r2,8(r2)
   17904:	1880041e 	bne	r3,r2,17918 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
   17908:	e0bff817 	ldw	r2,-32(fp)
   1790c:	10c00117 	ldw	r3,4(r2)
   17910:	e0bff817 	ldw	r2,-32(fp)
   17914:	10c00415 	stw	r3,16(r2)
   17918:	e0bff617 	ldw	r2,-40(fp)
   1791c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17920:	e0bff717 	ldw	r2,-36(fp)
   17924:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   17928:	e0bfff17 	ldw	r2,-4(fp)
   1792c:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   17930:	e0bff517 	ldw	r2,-44(fp)
   17934:	00004306 	br	17a44 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   17938:	d0a82017 	ldw	r2,-24448(gp)
   1793c:	d0e82017 	ldw	r3,-24448(gp)
   17940:	18c00c03 	ldbu	r3,48(r3)
   17944:	18c00114 	ori	r3,r3,4
   17948:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1794c:	d0a82017 	ldw	r2,-24448(gp)
   17950:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   17954:	d0a82017 	ldw	r2,-24448(gp)
   17958:	e0fffe0b 	ldhu	r3,-8(fp)
   1795c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   17960:	e13ffd17 	ldw	r4,-12(fp)
   17964:	00142180 	call	14218 <OS_EventTaskWait>
   17968:	e0bff617 	ldw	r2,-40(fp)
   1796c:	e0bffb15 	stw	r2,-20(fp)
   17970:	e0bffb17 	ldw	r2,-20(fp)
   17974:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   17978:	0014acc0 	call	14acc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1797c:	0005303a 	rdctl	r2,status
   17980:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17984:	e0fff917 	ldw	r3,-28(fp)
   17988:	00bfff84 	movi	r2,-2
   1798c:	1884703a 	and	r2,r3,r2
   17990:	1001703a 	wrctl	status,r2
  
  return context;
   17994:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   17998:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   1799c:	d0a82017 	ldw	r2,-24448(gp)
   179a0:	10800c43 	ldbu	r2,49(r2)
   179a4:	10803fcc 	andi	r2,r2,255
   179a8:	10000326 	beq	r2,zero,179b8 <OSQPend+0x1ec>
   179ac:	108000a0 	cmpeqi	r2,r2,2
   179b0:	1000071e 	bne	r2,zero,179d0 <OSQPend+0x204>
   179b4:	00000b06 	br	179e4 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   179b8:	d0a82017 	ldw	r2,-24448(gp)
   179bc:	10800917 	ldw	r2,36(r2)
   179c0:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   179c4:	e0bfff17 	ldw	r2,-4(fp)
   179c8:	10000005 	stb	zero,0(r2)
             break;
   179cc:	00000e06 	br	17a08 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   179d0:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   179d4:	e0bfff17 	ldw	r2,-4(fp)
   179d8:	00c00384 	movi	r3,14
   179dc:	10c00005 	stb	r3,0(r2)
             break;
   179e0:	00000906 	br	17a08 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   179e4:	d0a82017 	ldw	r2,-24448(gp)
   179e8:	e17ffd17 	ldw	r5,-12(fp)
   179ec:	1009883a 	mov	r4,r2
   179f0:	00144780 	call	14478 <OS_EventTaskRemove>
             pmsg = (void *)0;
   179f4:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   179f8:	e0bfff17 	ldw	r2,-4(fp)
   179fc:	00c00284 	movi	r3,10
   17a00:	10c00005 	stb	r3,0(r2)
             break;
   17a04:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   17a08:	d0a82017 	ldw	r2,-24448(gp)
   17a0c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   17a10:	d0a82017 	ldw	r2,-24448(gp)
   17a14:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   17a18:	d0a82017 	ldw	r2,-24448(gp)
   17a1c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   17a20:	d0a82017 	ldw	r2,-24448(gp)
   17a24:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   17a28:	d0a82017 	ldw	r2,-24448(gp)
   17a2c:	10000915 	stw	zero,36(r2)
   17a30:	e0bff617 	ldw	r2,-40(fp)
   17a34:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17a38:	e0bffa17 	ldw	r2,-24(fp)
   17a3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   17a40:	e0bff517 	ldw	r2,-44(fp)
}
   17a44:	e037883a 	mov	sp,fp
   17a48:	dfc00117 	ldw	ra,4(sp)
   17a4c:	df000017 	ldw	fp,0(sp)
   17a50:	dec00204 	addi	sp,sp,8
   17a54:	f800283a 	ret

00017a58 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   17a58:	defff604 	addi	sp,sp,-40
   17a5c:	dfc00915 	stw	ra,36(sp)
   17a60:	df000815 	stw	fp,32(sp)
   17a64:	df000804 	addi	fp,sp,32
   17a68:	e13ffd15 	stw	r4,-12(fp)
   17a6c:	2805883a 	mov	r2,r5
   17a70:	e1bfff15 	stw	r6,-4(fp)
   17a74:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   17a78:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   17a7c:	e0bfff17 	ldw	r2,-4(fp)
   17a80:	1000021e 	bne	r2,zero,17a8c <OSQPendAbort+0x34>
        return (0);
   17a84:	0005883a 	mov	r2,zero
   17a88:	00004906 	br	17bb0 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   17a8c:	e0bffd17 	ldw	r2,-12(fp)
   17a90:	1000051e 	bne	r2,zero,17aa8 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   17a94:	e0bfff17 	ldw	r2,-4(fp)
   17a98:	00c00104 	movi	r3,4
   17a9c:	10c00005 	stb	r3,0(r2)
        return (0);
   17aa0:	0005883a 	mov	r2,zero
   17aa4:	00004206 	br	17bb0 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   17aa8:	e0bffd17 	ldw	r2,-12(fp)
   17aac:	10800003 	ldbu	r2,0(r2)
   17ab0:	10803fcc 	andi	r2,r2,255
   17ab4:	108000a0 	cmpeqi	r2,r2,2
   17ab8:	1000051e 	bne	r2,zero,17ad0 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   17abc:	e0bfff17 	ldw	r2,-4(fp)
   17ac0:	00c00044 	movi	r3,1
   17ac4:	10c00005 	stb	r3,0(r2)
        return (0);
   17ac8:	0005883a 	mov	r2,zero
   17acc:	00003806 	br	17bb0 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17ad0:	0005303a 	rdctl	r2,status
   17ad4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17ad8:	e0fffc17 	ldw	r3,-16(fp)
   17adc:	00bfff84 	movi	r2,-2
   17ae0:	1884703a 	and	r2,r3,r2
   17ae4:	1001703a 	wrctl	status,r2
  
  return context;
   17ae8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   17aec:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   17af0:	e0bffd17 	ldw	r2,-12(fp)
   17af4:	10800283 	ldbu	r2,10(r2)
   17af8:	10803fcc 	andi	r2,r2,255
   17afc:	10002526 	beq	r2,zero,17b94 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   17b00:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   17b04:	e0bffe03 	ldbu	r2,-8(fp)
   17b08:	10800060 	cmpeqi	r2,r2,1
   17b0c:	10000e26 	beq	r2,zero,17b48 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   17b10:	00000806 	br	17b34 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   17b14:	01c00084 	movi	r7,2
   17b18:	01800104 	movi	r6,4
   17b1c:	000b883a 	mov	r5,zero
   17b20:	e13ffd17 	ldw	r4,-12(fp)
   17b24:	00140800 	call	14080 <OS_EventTaskRdy>
                     nbr_tasks++;
   17b28:	e0bff803 	ldbu	r2,-32(fp)
   17b2c:	10800044 	addi	r2,r2,1
   17b30:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   17b34:	e0bffd17 	ldw	r2,-12(fp)
   17b38:	10800283 	ldbu	r2,10(r2)
   17b3c:	10803fcc 	andi	r2,r2,255
   17b40:	103ff41e 	bne	r2,zero,17b14 <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   17b44:	00000906 	br	17b6c <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   17b48:	01c00084 	movi	r7,2
   17b4c:	01800104 	movi	r6,4
   17b50:	000b883a 	mov	r5,zero
   17b54:	e13ffd17 	ldw	r4,-12(fp)
   17b58:	00140800 	call	14080 <OS_EventTaskRdy>
                 nbr_tasks++;
   17b5c:	e0bff803 	ldbu	r2,-32(fp)
   17b60:	10800044 	addi	r2,r2,1
   17b64:	e0bff805 	stb	r2,-32(fp)
                 break;
   17b68:	0001883a 	nop
   17b6c:	e0bff917 	ldw	r2,-28(fp)
   17b70:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17b74:	e0bffa17 	ldw	r2,-24(fp)
   17b78:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   17b7c:	0014acc0 	call	14acc <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   17b80:	e0bfff17 	ldw	r2,-4(fp)
   17b84:	00c00384 	movi	r3,14
   17b88:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   17b8c:	e0bff803 	ldbu	r2,-32(fp)
   17b90:	00000706 	br	17bb0 <OSQPendAbort+0x158>
   17b94:	e0bff917 	ldw	r2,-28(fp)
   17b98:	e0bffb15 	stw	r2,-20(fp)
   17b9c:	e0bffb17 	ldw	r2,-20(fp)
   17ba0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   17ba4:	e0bfff17 	ldw	r2,-4(fp)
   17ba8:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   17bac:	0005883a 	mov	r2,zero
}
   17bb0:	e037883a 	mov	sp,fp
   17bb4:	dfc00117 	ldw	ra,4(sp)
   17bb8:	df000017 	ldw	fp,0(sp)
   17bbc:	dec00204 	addi	sp,sp,8
   17bc0:	f800283a 	ret

00017bc4 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   17bc4:	defff604 	addi	sp,sp,-40
   17bc8:	dfc00915 	stw	ra,36(sp)
   17bcc:	df000815 	stw	fp,32(sp)
   17bd0:	df000804 	addi	fp,sp,32
   17bd4:	e13ffe15 	stw	r4,-8(fp)
   17bd8:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   17bdc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   17be0:	e0bffe17 	ldw	r2,-8(fp)
   17be4:	1000021e 	bne	r2,zero,17bf0 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   17be8:	00800104 	movi	r2,4
   17bec:	00004a06 	br	17d18 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   17bf0:	e0bffe17 	ldw	r2,-8(fp)
   17bf4:	10800003 	ldbu	r2,0(r2)
   17bf8:	10803fcc 	andi	r2,r2,255
   17bfc:	108000a0 	cmpeqi	r2,r2,2
   17c00:	1000021e 	bne	r2,zero,17c0c <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   17c04:	00800044 	movi	r2,1
   17c08:	00004306 	br	17d18 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17c0c:	0005303a 	rdctl	r2,status
   17c10:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17c14:	e0fffd17 	ldw	r3,-12(fp)
   17c18:	00bfff84 	movi	r2,-2
   17c1c:	1884703a 	and	r2,r3,r2
   17c20:	1001703a 	wrctl	status,r2
  
  return context;
   17c24:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   17c28:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   17c2c:	e0bffe17 	ldw	r2,-8(fp)
   17c30:	10800283 	ldbu	r2,10(r2)
   17c34:	10803fcc 	andi	r2,r2,255
   17c38:	10000c26 	beq	r2,zero,17c6c <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   17c3c:	000f883a 	mov	r7,zero
   17c40:	01800104 	movi	r6,4
   17c44:	e17fff17 	ldw	r5,-4(fp)
   17c48:	e13ffe17 	ldw	r4,-8(fp)
   17c4c:	00140800 	call	14080 <OS_EventTaskRdy>
   17c50:	e0bff817 	ldw	r2,-32(fp)
   17c54:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17c58:	e0bff917 	ldw	r2,-28(fp)
   17c5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   17c60:	0014acc0 	call	14acc <OS_Sched>
        return (OS_ERR_NONE);
   17c64:	0005883a 	mov	r2,zero
   17c68:	00002b06 	br	17d18 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   17c6c:	e0bffe17 	ldw	r2,-8(fp)
   17c70:	10800117 	ldw	r2,4(r2)
   17c74:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   17c78:	e0bffb17 	ldw	r2,-20(fp)
   17c7c:	10c0058b 	ldhu	r3,22(r2)
   17c80:	e0bffb17 	ldw	r2,-20(fp)
   17c84:	1080050b 	ldhu	r2,20(r2)
   17c88:	18ffffcc 	andi	r3,r3,65535
   17c8c:	10bfffcc 	andi	r2,r2,65535
   17c90:	18800636 	bltu	r3,r2,17cac <OSQPost+0xe8>
   17c94:	e0bff817 	ldw	r2,-32(fp)
   17c98:	e0bffa15 	stw	r2,-24(fp)
   17c9c:	e0bffa17 	ldw	r2,-24(fp)
   17ca0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   17ca4:	00800784 	movi	r2,30
   17ca8:	00001b06 	br	17d18 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   17cac:	e0bffb17 	ldw	r2,-20(fp)
   17cb0:	10800317 	ldw	r2,12(r2)
   17cb4:	11000104 	addi	r4,r2,4
   17cb8:	e0fffb17 	ldw	r3,-20(fp)
   17cbc:	19000315 	stw	r4,12(r3)
   17cc0:	e0ffff17 	ldw	r3,-4(fp)
   17cc4:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   17cc8:	e0bffb17 	ldw	r2,-20(fp)
   17ccc:	1080058b 	ldhu	r2,22(r2)
   17cd0:	10800044 	addi	r2,r2,1
   17cd4:	1007883a 	mov	r3,r2
   17cd8:	e0bffb17 	ldw	r2,-20(fp)
   17cdc:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   17ce0:	e0bffb17 	ldw	r2,-20(fp)
   17ce4:	10c00317 	ldw	r3,12(r2)
   17ce8:	e0bffb17 	ldw	r2,-20(fp)
   17cec:	10800217 	ldw	r2,8(r2)
   17cf0:	1880041e 	bne	r3,r2,17d04 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   17cf4:	e0bffb17 	ldw	r2,-20(fp)
   17cf8:	10c00117 	ldw	r3,4(r2)
   17cfc:	e0bffb17 	ldw	r2,-20(fp)
   17d00:	10c00315 	stw	r3,12(r2)
   17d04:	e0bff817 	ldw	r2,-32(fp)
   17d08:	e0bffc15 	stw	r2,-16(fp)
   17d0c:	e0bffc17 	ldw	r2,-16(fp)
   17d10:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   17d14:	0005883a 	mov	r2,zero
}
   17d18:	e037883a 	mov	sp,fp
   17d1c:	dfc00117 	ldw	ra,4(sp)
   17d20:	df000017 	ldw	fp,0(sp)
   17d24:	dec00204 	addi	sp,sp,8
   17d28:	f800283a 	ret

00017d2c <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   17d2c:	defff604 	addi	sp,sp,-40
   17d30:	dfc00915 	stw	ra,36(sp)
   17d34:	df000815 	stw	fp,32(sp)
   17d38:	df000804 	addi	fp,sp,32
   17d3c:	e13ffe15 	stw	r4,-8(fp)
   17d40:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17d44:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   17d48:	e0bffe17 	ldw	r2,-8(fp)
   17d4c:	1000021e 	bne	r2,zero,17d58 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   17d50:	00800104 	movi	r2,4
   17d54:	00004c06 	br	17e88 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   17d58:	e0bffe17 	ldw	r2,-8(fp)
   17d5c:	10800003 	ldbu	r2,0(r2)
   17d60:	10803fcc 	andi	r2,r2,255
   17d64:	108000a0 	cmpeqi	r2,r2,2
   17d68:	1000021e 	bne	r2,zero,17d74 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   17d6c:	00800044 	movi	r2,1
   17d70:	00004506 	br	17e88 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17d74:	0005303a 	rdctl	r2,status
   17d78:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17d7c:	e0fffd17 	ldw	r3,-12(fp)
   17d80:	00bfff84 	movi	r2,-2
   17d84:	1884703a 	and	r2,r3,r2
   17d88:	1001703a 	wrctl	status,r2
  
  return context;
   17d8c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   17d90:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   17d94:	e0bffe17 	ldw	r2,-8(fp)
   17d98:	10800283 	ldbu	r2,10(r2)
   17d9c:	10803fcc 	andi	r2,r2,255
   17da0:	10000c26 	beq	r2,zero,17dd4 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   17da4:	000f883a 	mov	r7,zero
   17da8:	01800104 	movi	r6,4
   17dac:	e17fff17 	ldw	r5,-4(fp)
   17db0:	e13ffe17 	ldw	r4,-8(fp)
   17db4:	00140800 	call	14080 <OS_EventTaskRdy>
   17db8:	e0bff817 	ldw	r2,-32(fp)
   17dbc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17dc0:	e0bff917 	ldw	r2,-28(fp)
   17dc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   17dc8:	0014acc0 	call	14acc <OS_Sched>
        return (OS_ERR_NONE);
   17dcc:	0005883a 	mov	r2,zero
   17dd0:	00002d06 	br	17e88 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   17dd4:	e0bffe17 	ldw	r2,-8(fp)
   17dd8:	10800117 	ldw	r2,4(r2)
   17ddc:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   17de0:	e0bffb17 	ldw	r2,-20(fp)
   17de4:	10c0058b 	ldhu	r3,22(r2)
   17de8:	e0bffb17 	ldw	r2,-20(fp)
   17dec:	1080050b 	ldhu	r2,20(r2)
   17df0:	18ffffcc 	andi	r3,r3,65535
   17df4:	10bfffcc 	andi	r2,r2,65535
   17df8:	18800636 	bltu	r3,r2,17e14 <OSQPostFront+0xe8>
   17dfc:	e0bff817 	ldw	r2,-32(fp)
   17e00:	e0bffa15 	stw	r2,-24(fp)
   17e04:	e0bffa17 	ldw	r2,-24(fp)
   17e08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   17e0c:	00800784 	movi	r2,30
   17e10:	00001d06 	br	17e88 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   17e14:	e0bffb17 	ldw	r2,-20(fp)
   17e18:	10c00417 	ldw	r3,16(r2)
   17e1c:	e0bffb17 	ldw	r2,-20(fp)
   17e20:	10800117 	ldw	r2,4(r2)
   17e24:	1880041e 	bne	r3,r2,17e38 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   17e28:	e0bffb17 	ldw	r2,-20(fp)
   17e2c:	10c00217 	ldw	r3,8(r2)
   17e30:	e0bffb17 	ldw	r2,-20(fp)
   17e34:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   17e38:	e0bffb17 	ldw	r2,-20(fp)
   17e3c:	10800417 	ldw	r2,16(r2)
   17e40:	10ffff04 	addi	r3,r2,-4
   17e44:	e0bffb17 	ldw	r2,-20(fp)
   17e48:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   17e4c:	e0bffb17 	ldw	r2,-20(fp)
   17e50:	10800417 	ldw	r2,16(r2)
   17e54:	e0ffff17 	ldw	r3,-4(fp)
   17e58:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   17e5c:	e0bffb17 	ldw	r2,-20(fp)
   17e60:	1080058b 	ldhu	r2,22(r2)
   17e64:	10800044 	addi	r2,r2,1
   17e68:	1007883a 	mov	r3,r2
   17e6c:	e0bffb17 	ldw	r2,-20(fp)
   17e70:	10c0058d 	sth	r3,22(r2)
   17e74:	e0bff817 	ldw	r2,-32(fp)
   17e78:	e0bffc15 	stw	r2,-16(fp)
   17e7c:	e0bffc17 	ldw	r2,-16(fp)
   17e80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   17e84:	0005883a 	mov	r2,zero
}
   17e88:	e037883a 	mov	sp,fp
   17e8c:	dfc00117 	ldw	ra,4(sp)
   17e90:	df000017 	ldw	fp,0(sp)
   17e94:	dec00204 	addi	sp,sp,8
   17e98:	f800283a 	ret

00017e9c <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   17e9c:	defff504 	addi	sp,sp,-44
   17ea0:	dfc00a15 	stw	ra,40(sp)
   17ea4:	df000915 	stw	fp,36(sp)
   17ea8:	df000904 	addi	fp,sp,36
   17eac:	e13ffd15 	stw	r4,-12(fp)
   17eb0:	e17ffe15 	stw	r5,-8(fp)
   17eb4:	3005883a 	mov	r2,r6
   17eb8:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17ebc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   17ec0:	e0bffd17 	ldw	r2,-12(fp)
   17ec4:	1000021e 	bne	r2,zero,17ed0 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   17ec8:	00800104 	movi	r2,4
   17ecc:	00007106 	br	18094 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   17ed0:	e0bffd17 	ldw	r2,-12(fp)
   17ed4:	10800003 	ldbu	r2,0(r2)
   17ed8:	10803fcc 	andi	r2,r2,255
   17edc:	108000a0 	cmpeqi	r2,r2,2
   17ee0:	1000021e 	bne	r2,zero,17eec <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   17ee4:	00800044 	movi	r2,1
   17ee8:	00006a06 	br	18094 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17eec:	0005303a 	rdctl	r2,status
   17ef0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17ef4:	e0fffc17 	ldw	r3,-16(fp)
   17ef8:	00bfff84 	movi	r2,-2
   17efc:	1884703a 	and	r2,r3,r2
   17f00:	1001703a 	wrctl	status,r2
  
  return context;
   17f04:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   17f08:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   17f0c:	e0bffd17 	ldw	r2,-12(fp)
   17f10:	10800283 	ldbu	r2,10(r2)
   17f14:	10803fcc 	andi	r2,r2,255
   17f18:	10001d26 	beq	r2,zero,17f90 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   17f1c:	e0bfff03 	ldbu	r2,-4(fp)
   17f20:	1080004c 	andi	r2,r2,1
   17f24:	10000b26 	beq	r2,zero,17f54 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   17f28:	00000506 	br	17f40 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   17f2c:	000f883a 	mov	r7,zero
   17f30:	01800104 	movi	r6,4
   17f34:	e17ffe17 	ldw	r5,-8(fp)
   17f38:	e13ffd17 	ldw	r4,-12(fp)
   17f3c:	00140800 	call	14080 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   17f40:	e0bffd17 	ldw	r2,-12(fp)
   17f44:	10800283 	ldbu	r2,10(r2)
   17f48:	10803fcc 	andi	r2,r2,255
   17f4c:	103ff71e 	bne	r2,zero,17f2c <OSQPostOpt+0x90>
   17f50:	00000506 	br	17f68 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   17f54:	000f883a 	mov	r7,zero
   17f58:	01800104 	movi	r6,4
   17f5c:	e17ffe17 	ldw	r5,-8(fp)
   17f60:	e13ffd17 	ldw	r4,-12(fp)
   17f64:	00140800 	call	14080 <OS_EventTaskRdy>
   17f68:	e0bff717 	ldw	r2,-36(fp)
   17f6c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17f70:	e0bff817 	ldw	r2,-32(fp)
   17f74:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   17f78:	e0bfff03 	ldbu	r2,-4(fp)
   17f7c:	1080010c 	andi	r2,r2,4
   17f80:	1000011e 	bne	r2,zero,17f88 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   17f84:	0014acc0 	call	14acc <OS_Sched>
        }
        return (OS_ERR_NONE);
   17f88:	0005883a 	mov	r2,zero
   17f8c:	00004106 	br	18094 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   17f90:	e0bffd17 	ldw	r2,-12(fp)
   17f94:	10800117 	ldw	r2,4(r2)
   17f98:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   17f9c:	e0bffa17 	ldw	r2,-24(fp)
   17fa0:	10c0058b 	ldhu	r3,22(r2)
   17fa4:	e0bffa17 	ldw	r2,-24(fp)
   17fa8:	1080050b 	ldhu	r2,20(r2)
   17fac:	18ffffcc 	andi	r3,r3,65535
   17fb0:	10bfffcc 	andi	r2,r2,65535
   17fb4:	18800636 	bltu	r3,r2,17fd0 <OSQPostOpt+0x134>
   17fb8:	e0bff717 	ldw	r2,-36(fp)
   17fbc:	e0bff915 	stw	r2,-28(fp)
   17fc0:	e0bff917 	ldw	r2,-28(fp)
   17fc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   17fc8:	00800784 	movi	r2,30
   17fcc:	00003106 	br	18094 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   17fd0:	e0bfff03 	ldbu	r2,-4(fp)
   17fd4:	1080008c 	andi	r2,r2,2
   17fd8:	10001326 	beq	r2,zero,18028 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   17fdc:	e0bffa17 	ldw	r2,-24(fp)
   17fe0:	10c00417 	ldw	r3,16(r2)
   17fe4:	e0bffa17 	ldw	r2,-24(fp)
   17fe8:	10800117 	ldw	r2,4(r2)
   17fec:	1880041e 	bne	r3,r2,18000 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   17ff0:	e0bffa17 	ldw	r2,-24(fp)
   17ff4:	10c00217 	ldw	r3,8(r2)
   17ff8:	e0bffa17 	ldw	r2,-24(fp)
   17ffc:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   18000:	e0bffa17 	ldw	r2,-24(fp)
   18004:	10800417 	ldw	r2,16(r2)
   18008:	10ffff04 	addi	r3,r2,-4
   1800c:	e0bffa17 	ldw	r2,-24(fp)
   18010:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   18014:	e0bffa17 	ldw	r2,-24(fp)
   18018:	10800417 	ldw	r2,16(r2)
   1801c:	e0fffe17 	ldw	r3,-8(fp)
   18020:	10c00015 	stw	r3,0(r2)
   18024:	00001006 	br	18068 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   18028:	e0bffa17 	ldw	r2,-24(fp)
   1802c:	10800317 	ldw	r2,12(r2)
   18030:	11000104 	addi	r4,r2,4
   18034:	e0fffa17 	ldw	r3,-24(fp)
   18038:	19000315 	stw	r4,12(r3)
   1803c:	e0fffe17 	ldw	r3,-8(fp)
   18040:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   18044:	e0bffa17 	ldw	r2,-24(fp)
   18048:	10c00317 	ldw	r3,12(r2)
   1804c:	e0bffa17 	ldw	r2,-24(fp)
   18050:	10800217 	ldw	r2,8(r2)
   18054:	1880041e 	bne	r3,r2,18068 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   18058:	e0bffa17 	ldw	r2,-24(fp)
   1805c:	10c00117 	ldw	r3,4(r2)
   18060:	e0bffa17 	ldw	r2,-24(fp)
   18064:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   18068:	e0bffa17 	ldw	r2,-24(fp)
   1806c:	1080058b 	ldhu	r2,22(r2)
   18070:	10800044 	addi	r2,r2,1
   18074:	1007883a 	mov	r3,r2
   18078:	e0bffa17 	ldw	r2,-24(fp)
   1807c:	10c0058d 	sth	r3,22(r2)
   18080:	e0bff717 	ldw	r2,-36(fp)
   18084:	e0bffb15 	stw	r2,-20(fp)
   18088:	e0bffb17 	ldw	r2,-20(fp)
   1808c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18090:	0005883a 	mov	r2,zero
}
   18094:	e037883a 	mov	sp,fp
   18098:	dfc00117 	ldw	ra,4(sp)
   1809c:	df000017 	ldw	fp,0(sp)
   180a0:	dec00204 	addi	sp,sp,8
   180a4:	f800283a 	ret

000180a8 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   180a8:	defff604 	addi	sp,sp,-40
   180ac:	df000915 	stw	fp,36(sp)
   180b0:	df000904 	addi	fp,sp,36
   180b4:	e13ffe15 	stw	r4,-8(fp)
   180b8:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   180bc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   180c0:	e0bffe17 	ldw	r2,-8(fp)
   180c4:	1000021e 	bne	r2,zero,180d0 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   180c8:	00800104 	movi	r2,4
   180cc:	00004906 	br	181f4 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   180d0:	e0bfff17 	ldw	r2,-4(fp)
   180d4:	1000021e 	bne	r2,zero,180e0 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   180d8:	00800244 	movi	r2,9
   180dc:	00004506 	br	181f4 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   180e0:	e0bffe17 	ldw	r2,-8(fp)
   180e4:	10800003 	ldbu	r2,0(r2)
   180e8:	10803fcc 	andi	r2,r2,255
   180ec:	108000a0 	cmpeqi	r2,r2,2
   180f0:	1000021e 	bne	r2,zero,180fc <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   180f4:	00800044 	movi	r2,1
   180f8:	00003e06 	br	181f4 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   180fc:	0005303a 	rdctl	r2,status
   18100:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18104:	e0fffd17 	ldw	r3,-12(fp)
   18108:	00bfff84 	movi	r2,-2
   1810c:	1884703a 	and	r2,r3,r2
   18110:	1001703a 	wrctl	status,r2
  
  return context;
   18114:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   18118:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   1811c:	e0bffe17 	ldw	r2,-8(fp)
   18120:	10c00283 	ldbu	r3,10(r2)
   18124:	e0bfff17 	ldw	r2,-4(fp)
   18128:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   1812c:	e0bffe17 	ldw	r2,-8(fp)
   18130:	108002c4 	addi	r2,r2,11
   18134:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   18138:	e0bfff17 	ldw	r2,-4(fp)
   1813c:	10800204 	addi	r2,r2,8
   18140:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   18144:	e03ff705 	stb	zero,-36(fp)
   18148:	00000b06 	br	18178 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   1814c:	e0bff917 	ldw	r2,-28(fp)
   18150:	10c00044 	addi	r3,r2,1
   18154:	e0fff915 	stw	r3,-28(fp)
   18158:	e0fff817 	ldw	r3,-32(fp)
   1815c:	19000044 	addi	r4,r3,1
   18160:	e13ff815 	stw	r4,-32(fp)
   18164:	18c00003 	ldbu	r3,0(r3)
   18168:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1816c:	e0bff703 	ldbu	r2,-36(fp)
   18170:	10800044 	addi	r2,r2,1
   18174:	e0bff705 	stb	r2,-36(fp)
   18178:	e0bff703 	ldbu	r2,-36(fp)
   1817c:	108000f0 	cmpltui	r2,r2,3
   18180:	103ff21e 	bne	r2,zero,1814c <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   18184:	e0bffe17 	ldw	r2,-8(fp)
   18188:	10800117 	ldw	r2,4(r2)
   1818c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   18190:	e0bffc17 	ldw	r2,-16(fp)
   18194:	1080058b 	ldhu	r2,22(r2)
   18198:	10bfffcc 	andi	r2,r2,65535
   1819c:	10000626 	beq	r2,zero,181b8 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   181a0:	e0bffc17 	ldw	r2,-16(fp)
   181a4:	10800417 	ldw	r2,16(r2)
   181a8:	10c00017 	ldw	r3,0(r2)
   181ac:	e0bfff17 	ldw	r2,-4(fp)
   181b0:	10c00015 	stw	r3,0(r2)
   181b4:	00000206 	br	181c0 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   181b8:	e0bfff17 	ldw	r2,-4(fp)
   181bc:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   181c0:	e0bffc17 	ldw	r2,-16(fp)
   181c4:	10c0058b 	ldhu	r3,22(r2)
   181c8:	e0bfff17 	ldw	r2,-4(fp)
   181cc:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   181d0:	e0bffc17 	ldw	r2,-16(fp)
   181d4:	10c0050b 	ldhu	r3,20(r2)
   181d8:	e0bfff17 	ldw	r2,-4(fp)
   181dc:	10c0018d 	sth	r3,6(r2)
   181e0:	e0bffa17 	ldw	r2,-24(fp)
   181e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   181e8:	e0bffb17 	ldw	r2,-20(fp)
   181ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   181f0:	0005883a 	mov	r2,zero
}
   181f4:	e037883a 	mov	sp,fp
   181f8:	df000017 	ldw	fp,0(sp)
   181fc:	dec00104 	addi	sp,sp,4
   18200:	f800283a 	ret

00018204 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   18204:	defffb04 	addi	sp,sp,-20
   18208:	dfc00415 	stw	ra,16(sp)
   1820c:	df000315 	stw	fp,12(sp)
   18210:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   18214:	01407804 	movi	r5,480
   18218:	010000f4 	movhi	r4,3
   1821c:	213c0704 	addi	r4,r4,-4068
   18220:	0014a100 	call	14a10 <OS_MemClr>
    pq1 = &OSQTbl[0];
   18224:	008000f4 	movhi	r2,3
   18228:	10bc0704 	addi	r2,r2,-4068
   1822c:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   18230:	008000f4 	movhi	r2,3
   18234:	10bc0d04 	addi	r2,r2,-4044
   18238:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   1823c:	e03ffd0d 	sth	zero,-12(fp)
   18240:	00000c06 	br	18274 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   18244:	e0bffe17 	ldw	r2,-8(fp)
   18248:	e0ffff17 	ldw	r3,-4(fp)
   1824c:	10c00015 	stw	r3,0(r2)
        pq1++;
   18250:	e0bffe17 	ldw	r2,-8(fp)
   18254:	10800604 	addi	r2,r2,24
   18258:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   1825c:	e0bfff17 	ldw	r2,-4(fp)
   18260:	10800604 	addi	r2,r2,24
   18264:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   18268:	e0bffd0b 	ldhu	r2,-12(fp)
   1826c:	10800044 	addi	r2,r2,1
   18270:	e0bffd0d 	sth	r2,-12(fp)
   18274:	e0bffd0b 	ldhu	r2,-12(fp)
   18278:	108004f0 	cmpltui	r2,r2,19
   1827c:	103ff11e 	bne	r2,zero,18244 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   18280:	e0bffe17 	ldw	r2,-8(fp)
   18284:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   18288:	008000f4 	movhi	r2,3
   1828c:	10bc0704 	addi	r2,r2,-4068
   18290:	d0a81c15 	stw	r2,-24464(gp)
#endif
}
   18294:	0001883a 	nop
   18298:	e037883a 	mov	sp,fp
   1829c:	dfc00117 	ldw	ra,4(sp)
   182a0:	df000017 	ldw	fp,0(sp)
   182a4:	dec00204 	addi	sp,sp,8
   182a8:	f800283a 	ret

000182ac <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   182ac:	defffa04 	addi	sp,sp,-24
   182b0:	df000515 	stw	fp,20(sp)
   182b4:	df000504 	addi	fp,sp,20
   182b8:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   182bc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   182c0:	e0bfff17 	ldw	r2,-4(fp)
   182c4:	1000021e 	bne	r2,zero,182d0 <OSSemAccept+0x24>
        return (0);
   182c8:	0005883a 	mov	r2,zero
   182cc:	00001f06 	br	1834c <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   182d0:	e0bfff17 	ldw	r2,-4(fp)
   182d4:	10800003 	ldbu	r2,0(r2)
   182d8:	10803fcc 	andi	r2,r2,255
   182dc:	108000e0 	cmpeqi	r2,r2,3
   182e0:	1000021e 	bne	r2,zero,182ec <OSSemAccept+0x40>
        return (0);
   182e4:	0005883a 	mov	r2,zero
   182e8:	00001806 	br	1834c <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   182ec:	0005303a 	rdctl	r2,status
   182f0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   182f4:	e0fffe17 	ldw	r3,-8(fp)
   182f8:	00bfff84 	movi	r2,-2
   182fc:	1884703a 	and	r2,r3,r2
   18300:	1001703a 	wrctl	status,r2
  
  return context;
   18304:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   18308:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   1830c:	e0bfff17 	ldw	r2,-4(fp)
   18310:	1080020b 	ldhu	r2,8(r2)
   18314:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   18318:	e0bffd0b 	ldhu	r2,-12(fp)
   1831c:	10000626 	beq	r2,zero,18338 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   18320:	e0bfff17 	ldw	r2,-4(fp)
   18324:	1080020b 	ldhu	r2,8(r2)
   18328:	10bfffc4 	addi	r2,r2,-1
   1832c:	1007883a 	mov	r3,r2
   18330:	e0bfff17 	ldw	r2,-4(fp)
   18334:	10c0020d 	sth	r3,8(r2)
   18338:	e0bffb17 	ldw	r2,-20(fp)
   1833c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18340:	e0bffc17 	ldw	r2,-16(fp)
   18344:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   18348:	e0bffd0b 	ldhu	r2,-12(fp)
}
   1834c:	e037883a 	mov	sp,fp
   18350:	df000017 	ldw	fp,0(sp)
   18354:	dec00104 	addi	sp,sp,4
   18358:	f800283a 	ret

0001835c <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   1835c:	defff904 	addi	sp,sp,-28
   18360:	dfc00615 	stw	ra,24(sp)
   18364:	df000515 	stw	fp,20(sp)
   18368:	df000504 	addi	fp,sp,20
   1836c:	2005883a 	mov	r2,r4
   18370:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   18374:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   18378:	d0a81f03 	ldbu	r2,-24452(gp)
   1837c:	10803fcc 	andi	r2,r2,255
   18380:	10000226 	beq	r2,zero,1838c <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   18384:	0005883a 	mov	r2,zero
   18388:	00002506 	br	18420 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1838c:	0005303a 	rdctl	r2,status
   18390:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18394:	e0fffe17 	ldw	r3,-8(fp)
   18398:	00bfff84 	movi	r2,-2
   1839c:	1884703a 	and	r2,r3,r2
   183a0:	1001703a 	wrctl	status,r2
  
  return context;
   183a4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   183a8:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   183ac:	d0a81e17 	ldw	r2,-24456(gp)
   183b0:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   183b4:	d0a81e17 	ldw	r2,-24456(gp)
   183b8:	10000326 	beq	r2,zero,183c8 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   183bc:	d0a81e17 	ldw	r2,-24456(gp)
   183c0:	10800117 	ldw	r2,4(r2)
   183c4:	d0a81e15 	stw	r2,-24456(gp)
   183c8:	e0bffb17 	ldw	r2,-20(fp)
   183cc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   183d0:	e0bffc17 	ldw	r2,-16(fp)
   183d4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   183d8:	e0bffd17 	ldw	r2,-12(fp)
   183dc:	10000f26 	beq	r2,zero,1841c <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   183e0:	e0bffd17 	ldw	r2,-12(fp)
   183e4:	00c000c4 	movi	r3,3
   183e8:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   183ec:	e0bffd17 	ldw	r2,-12(fp)
   183f0:	e0ffff0b 	ldhu	r3,-4(fp)
   183f4:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   183f8:	e0bffd17 	ldw	r2,-12(fp)
   183fc:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   18400:	e0bffd17 	ldw	r2,-12(fp)
   18404:	00c00fc4 	movi	r3,63
   18408:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   1840c:	e0bffd17 	ldw	r2,-12(fp)
   18410:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   18414:	e13ffd17 	ldw	r4,-12(fp)
   18418:	00146300 	call	14630 <OS_EventWaitListInit>
    }
    return (pevent);
   1841c:	e0bffd17 	ldw	r2,-12(fp)
}
   18420:	e037883a 	mov	sp,fp
   18424:	dfc00117 	ldw	ra,4(sp)
   18428:	df000017 	ldw	fp,0(sp)
   1842c:	dec00204 	addi	sp,sp,8
   18430:	f800283a 	ret

00018434 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   18434:	defff304 	addi	sp,sp,-52
   18438:	dfc00c15 	stw	ra,48(sp)
   1843c:	df000b15 	stw	fp,44(sp)
   18440:	df000b04 	addi	fp,sp,44
   18444:	e13ffd15 	stw	r4,-12(fp)
   18448:	2805883a 	mov	r2,r5
   1844c:	e1bfff15 	stw	r6,-4(fp)
   18450:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   18454:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   18458:	e0bfff17 	ldw	r2,-4(fp)
   1845c:	1000021e 	bne	r2,zero,18468 <OSSemDel+0x34>
        return (pevent);
   18460:	e0bffd17 	ldw	r2,-12(fp)
   18464:	00007e06 	br	18660 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   18468:	e0bffd17 	ldw	r2,-12(fp)
   1846c:	1000051e 	bne	r2,zero,18484 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   18470:	e0bfff17 	ldw	r2,-4(fp)
   18474:	00c00104 	movi	r3,4
   18478:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1847c:	e0bffd17 	ldw	r2,-12(fp)
   18480:	00007706 	br	18660 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   18484:	e0bffd17 	ldw	r2,-12(fp)
   18488:	10800003 	ldbu	r2,0(r2)
   1848c:	10803fcc 	andi	r2,r2,255
   18490:	108000e0 	cmpeqi	r2,r2,3
   18494:	1000051e 	bne	r2,zero,184ac <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   18498:	e0bfff17 	ldw	r2,-4(fp)
   1849c:	00c00044 	movi	r3,1
   184a0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   184a4:	e0bffd17 	ldw	r2,-12(fp)
   184a8:	00006d06 	br	18660 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   184ac:	d0a81f03 	ldbu	r2,-24452(gp)
   184b0:	10803fcc 	andi	r2,r2,255
   184b4:	10000526 	beq	r2,zero,184cc <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   184b8:	e0bfff17 	ldw	r2,-4(fp)
   184bc:	00c003c4 	movi	r3,15
   184c0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   184c4:	e0bffd17 	ldw	r2,-12(fp)
   184c8:	00006506 	br	18660 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   184cc:	0005303a 	rdctl	r2,status
   184d0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   184d4:	e0fffc17 	ldw	r3,-16(fp)
   184d8:	00bfff84 	movi	r2,-2
   184dc:	1884703a 	and	r2,r3,r2
   184e0:	1001703a 	wrctl	status,r2
  
  return context;
   184e4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   184e8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   184ec:	e0bffd17 	ldw	r2,-12(fp)
   184f0:	10800283 	ldbu	r2,10(r2)
   184f4:	10803fcc 	andi	r2,r2,255
   184f8:	10000326 	beq	r2,zero,18508 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   184fc:	00800044 	movi	r2,1
   18500:	e0bff505 	stb	r2,-44(fp)
   18504:	00000106 	br	1850c <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   18508:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   1850c:	e0bffe03 	ldbu	r2,-8(fp)
   18510:	10000326 	beq	r2,zero,18520 <OSSemDel+0xec>
   18514:	10800060 	cmpeqi	r2,r2,1
   18518:	1000281e 	bne	r2,zero,185bc <OSSemDel+0x188>
   1851c:	00004506 	br	18634 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   18520:	e0bff503 	ldbu	r2,-44(fp)
   18524:	1000161e 	bne	r2,zero,18580 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   18528:	e0bffd17 	ldw	r2,-12(fp)
   1852c:	00c00fc4 	movi	r3,63
   18530:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   18534:	e0bffd17 	ldw	r2,-12(fp)
   18538:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1853c:	e0bffd17 	ldw	r2,-12(fp)
   18540:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   18544:	d0e81e17 	ldw	r3,-24456(gp)
   18548:	e0bffd17 	ldw	r2,-12(fp)
   1854c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   18550:	e0bffd17 	ldw	r2,-12(fp)
   18554:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   18558:	e0bffd17 	ldw	r2,-12(fp)
   1855c:	d0a81e15 	stw	r2,-24456(gp)
   18560:	e0bff717 	ldw	r2,-36(fp)
   18564:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18568:	e0bff817 	ldw	r2,-32(fp)
   1856c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   18570:	e0bfff17 	ldw	r2,-4(fp)
   18574:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   18578:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   1857c:	00003706 	br	1865c <OSSemDel+0x228>
   18580:	e0bff717 	ldw	r2,-36(fp)
   18584:	e0bff915 	stw	r2,-28(fp)
   18588:	e0bff917 	ldw	r2,-28(fp)
   1858c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   18590:	e0bfff17 	ldw	r2,-4(fp)
   18594:	00c01244 	movi	r3,73
   18598:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   1859c:	e0bffd17 	ldw	r2,-12(fp)
   185a0:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   185a4:	00002d06 	br	1865c <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   185a8:	000f883a 	mov	r7,zero
   185ac:	01800044 	movi	r6,1
   185b0:	000b883a 	mov	r5,zero
   185b4:	e13ffd17 	ldw	r4,-12(fp)
   185b8:	00140800 	call	14080 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   185bc:	e0bffd17 	ldw	r2,-12(fp)
   185c0:	10800283 	ldbu	r2,10(r2)
   185c4:	10803fcc 	andi	r2,r2,255
   185c8:	103ff71e 	bne	r2,zero,185a8 <OSSemDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   185cc:	e0bffd17 	ldw	r2,-12(fp)
   185d0:	00c00fc4 	movi	r3,63
   185d4:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   185d8:	e0bffd17 	ldw	r2,-12(fp)
   185dc:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   185e0:	e0bffd17 	ldw	r2,-12(fp)
   185e4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   185e8:	d0e81e17 	ldw	r3,-24456(gp)
   185ec:	e0bffd17 	ldw	r2,-12(fp)
   185f0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   185f4:	e0bffd17 	ldw	r2,-12(fp)
   185f8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   185fc:	e0bffd17 	ldw	r2,-12(fp)
   18600:	d0a81e15 	stw	r2,-24456(gp)
   18604:	e0bff717 	ldw	r2,-36(fp)
   18608:	e0bffa15 	stw	r2,-24(fp)
   1860c:	e0bffa17 	ldw	r2,-24(fp)
   18610:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   18614:	e0bff503 	ldbu	r2,-44(fp)
   18618:	10800058 	cmpnei	r2,r2,1
   1861c:	1000011e 	bne	r2,zero,18624 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   18620:	0014acc0 	call	14acc <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   18624:	e0bfff17 	ldw	r2,-4(fp)
   18628:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   1862c:	e03ff615 	stw	zero,-40(fp)
             break;
   18630:	00000a06 	br	1865c <OSSemDel+0x228>
   18634:	e0bff717 	ldw	r2,-36(fp)
   18638:	e0bffb15 	stw	r2,-20(fp)
   1863c:	e0bffb17 	ldw	r2,-20(fp)
   18640:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   18644:	e0bfff17 	ldw	r2,-4(fp)
   18648:	00c001c4 	movi	r3,7
   1864c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   18650:	e0bffd17 	ldw	r2,-12(fp)
   18654:	e0bff615 	stw	r2,-40(fp)
             break;
   18658:	0001883a 	nop
    }
    return (pevent_return);
   1865c:	e0bff617 	ldw	r2,-40(fp)
}
   18660:	e037883a 	mov	sp,fp
   18664:	dfc00117 	ldw	ra,4(sp)
   18668:	df000017 	ldw	fp,0(sp)
   1866c:	dec00204 	addi	sp,sp,8
   18670:	f800283a 	ret

00018674 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   18674:	defff504 	addi	sp,sp,-44
   18678:	dfc00a15 	stw	ra,40(sp)
   1867c:	df000915 	stw	fp,36(sp)
   18680:	df000904 	addi	fp,sp,36
   18684:	e13ffd15 	stw	r4,-12(fp)
   18688:	2805883a 	mov	r2,r5
   1868c:	e1bfff15 	stw	r6,-4(fp)
   18690:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18694:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   18698:	e0bfff17 	ldw	r2,-4(fp)
   1869c:	10007226 	beq	r2,zero,18868 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   186a0:	e0bffd17 	ldw	r2,-12(fp)
   186a4:	1000041e 	bne	r2,zero,186b8 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   186a8:	e0bfff17 	ldw	r2,-4(fp)
   186ac:	00c00104 	movi	r3,4
   186b0:	10c00005 	stb	r3,0(r2)
        return;
   186b4:	00006d06 	br	1886c <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   186b8:	e0bffd17 	ldw	r2,-12(fp)
   186bc:	10800003 	ldbu	r2,0(r2)
   186c0:	10803fcc 	andi	r2,r2,255
   186c4:	108000e0 	cmpeqi	r2,r2,3
   186c8:	1000041e 	bne	r2,zero,186dc <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   186cc:	e0bfff17 	ldw	r2,-4(fp)
   186d0:	00c00044 	movi	r3,1
   186d4:	10c00005 	stb	r3,0(r2)
        return;
   186d8:	00006406 	br	1886c <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   186dc:	d0a81f03 	ldbu	r2,-24452(gp)
   186e0:	10803fcc 	andi	r2,r2,255
   186e4:	10000426 	beq	r2,zero,186f8 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   186e8:	e0bfff17 	ldw	r2,-4(fp)
   186ec:	00c00084 	movi	r3,2
   186f0:	10c00005 	stb	r3,0(r2)
        return;
   186f4:	00005d06 	br	1886c <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   186f8:	d0a81103 	ldbu	r2,-24508(gp)
   186fc:	10803fcc 	andi	r2,r2,255
   18700:	10000426 	beq	r2,zero,18714 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   18704:	e0bfff17 	ldw	r2,-4(fp)
   18708:	00c00344 	movi	r3,13
   1870c:	10c00005 	stb	r3,0(r2)
        return;
   18710:	00005606 	br	1886c <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18714:	0005303a 	rdctl	r2,status
   18718:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1871c:	e0fffc17 	ldw	r3,-16(fp)
   18720:	00bfff84 	movi	r2,-2
   18724:	1884703a 	and	r2,r3,r2
   18728:	1001703a 	wrctl	status,r2
  
  return context;
   1872c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   18730:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   18734:	e0bffd17 	ldw	r2,-12(fp)
   18738:	1080020b 	ldhu	r2,8(r2)
   1873c:	10bfffcc 	andi	r2,r2,65535
   18740:	10000d26 	beq	r2,zero,18778 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   18744:	e0bffd17 	ldw	r2,-12(fp)
   18748:	1080020b 	ldhu	r2,8(r2)
   1874c:	10bfffc4 	addi	r2,r2,-1
   18750:	1007883a 	mov	r3,r2
   18754:	e0bffd17 	ldw	r2,-12(fp)
   18758:	10c0020d 	sth	r3,8(r2)
   1875c:	e0bff717 	ldw	r2,-36(fp)
   18760:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18764:	e0bff817 	ldw	r2,-32(fp)
   18768:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   1876c:	e0bfff17 	ldw	r2,-4(fp)
   18770:	10000005 	stb	zero,0(r2)
        return;
   18774:	00003d06 	br	1886c <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   18778:	d0a82017 	ldw	r2,-24448(gp)
   1877c:	d0e82017 	ldw	r3,-24448(gp)
   18780:	18c00c03 	ldbu	r3,48(r3)
   18784:	18c00054 	ori	r3,r3,1
   18788:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1878c:	d0a82017 	ldw	r2,-24448(gp)
   18790:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   18794:	d0a82017 	ldw	r2,-24448(gp)
   18798:	e0fffe0b 	ldhu	r3,-8(fp)
   1879c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   187a0:	e13ffd17 	ldw	r4,-12(fp)
   187a4:	00142180 	call	14218 <OS_EventTaskWait>
   187a8:	e0bff717 	ldw	r2,-36(fp)
   187ac:	e0bffb15 	stw	r2,-20(fp)
   187b0:	e0bffb17 	ldw	r2,-20(fp)
   187b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   187b8:	0014acc0 	call	14acc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   187bc:	0005303a 	rdctl	r2,status
   187c0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   187c4:	e0fff917 	ldw	r3,-28(fp)
   187c8:	00bfff84 	movi	r2,-2
   187cc:	1884703a 	and	r2,r3,r2
   187d0:	1001703a 	wrctl	status,r2
  
  return context;
   187d4:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   187d8:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   187dc:	d0a82017 	ldw	r2,-24448(gp)
   187e0:	10800c43 	ldbu	r2,49(r2)
   187e4:	10803fcc 	andi	r2,r2,255
   187e8:	10000326 	beq	r2,zero,187f8 <OSSemPend+0x184>
   187ec:	108000a0 	cmpeqi	r2,r2,2
   187f0:	1000041e 	bne	r2,zero,18804 <OSSemPend+0x190>
   187f4:	00000706 	br	18814 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   187f8:	e0bfff17 	ldw	r2,-4(fp)
   187fc:	10000005 	stb	zero,0(r2)
             break;
   18800:	00000c06 	br	18834 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   18804:	e0bfff17 	ldw	r2,-4(fp)
   18808:	00c00384 	movi	r3,14
   1880c:	10c00005 	stb	r3,0(r2)
             break;
   18810:	00000806 	br	18834 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   18814:	d0a82017 	ldw	r2,-24448(gp)
   18818:	e17ffd17 	ldw	r5,-12(fp)
   1881c:	1009883a 	mov	r4,r2
   18820:	00144780 	call	14478 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   18824:	e0bfff17 	ldw	r2,-4(fp)
   18828:	00c00284 	movi	r3,10
   1882c:	10c00005 	stb	r3,0(r2)
             break;
   18830:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   18834:	d0a82017 	ldw	r2,-24448(gp)
   18838:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   1883c:	d0a82017 	ldw	r2,-24448(gp)
   18840:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   18844:	d0a82017 	ldw	r2,-24448(gp)
   18848:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   1884c:	d0a82017 	ldw	r2,-24448(gp)
   18850:	10000815 	stw	zero,32(r2)
   18854:	e0bff717 	ldw	r2,-36(fp)
   18858:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1885c:	e0bffa17 	ldw	r2,-24(fp)
   18860:	1001703a 	wrctl	status,r2
   18864:	00000106 	br	1886c <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   18868:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
   1886c:	e037883a 	mov	sp,fp
   18870:	dfc00117 	ldw	ra,4(sp)
   18874:	df000017 	ldw	fp,0(sp)
   18878:	dec00204 	addi	sp,sp,8
   1887c:	f800283a 	ret

00018880 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   18880:	defff604 	addi	sp,sp,-40
   18884:	dfc00915 	stw	ra,36(sp)
   18888:	df000815 	stw	fp,32(sp)
   1888c:	df000804 	addi	fp,sp,32
   18890:	e13ffd15 	stw	r4,-12(fp)
   18894:	2805883a 	mov	r2,r5
   18898:	e1bfff15 	stw	r6,-4(fp)
   1889c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   188a0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   188a4:	e0bfff17 	ldw	r2,-4(fp)
   188a8:	1000021e 	bne	r2,zero,188b4 <OSSemPendAbort+0x34>
        return (0);
   188ac:	0005883a 	mov	r2,zero
   188b0:	00004906 	br	189d8 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   188b4:	e0bffd17 	ldw	r2,-12(fp)
   188b8:	1000051e 	bne	r2,zero,188d0 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   188bc:	e0bfff17 	ldw	r2,-4(fp)
   188c0:	00c00104 	movi	r3,4
   188c4:	10c00005 	stb	r3,0(r2)
        return (0);
   188c8:	0005883a 	mov	r2,zero
   188cc:	00004206 	br	189d8 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   188d0:	e0bffd17 	ldw	r2,-12(fp)
   188d4:	10800003 	ldbu	r2,0(r2)
   188d8:	10803fcc 	andi	r2,r2,255
   188dc:	108000e0 	cmpeqi	r2,r2,3
   188e0:	1000051e 	bne	r2,zero,188f8 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   188e4:	e0bfff17 	ldw	r2,-4(fp)
   188e8:	00c00044 	movi	r3,1
   188ec:	10c00005 	stb	r3,0(r2)
        return (0);
   188f0:	0005883a 	mov	r2,zero
   188f4:	00003806 	br	189d8 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   188f8:	0005303a 	rdctl	r2,status
   188fc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18900:	e0fffc17 	ldw	r3,-16(fp)
   18904:	00bfff84 	movi	r2,-2
   18908:	1884703a 	and	r2,r3,r2
   1890c:	1001703a 	wrctl	status,r2
  
  return context;
   18910:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   18914:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   18918:	e0bffd17 	ldw	r2,-12(fp)
   1891c:	10800283 	ldbu	r2,10(r2)
   18920:	10803fcc 	andi	r2,r2,255
   18924:	10002526 	beq	r2,zero,189bc <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   18928:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   1892c:	e0bffe03 	ldbu	r2,-8(fp)
   18930:	10800060 	cmpeqi	r2,r2,1
   18934:	10000e26 	beq	r2,zero,18970 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   18938:	00000806 	br	1895c <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   1893c:	01c00084 	movi	r7,2
   18940:	01800044 	movi	r6,1
   18944:	000b883a 	mov	r5,zero
   18948:	e13ffd17 	ldw	r4,-12(fp)
   1894c:	00140800 	call	14080 <OS_EventTaskRdy>
                     nbr_tasks++;
   18950:	e0bff803 	ldbu	r2,-32(fp)
   18954:	10800044 	addi	r2,r2,1
   18958:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   1895c:	e0bffd17 	ldw	r2,-12(fp)
   18960:	10800283 	ldbu	r2,10(r2)
   18964:	10803fcc 	andi	r2,r2,255
   18968:	103ff41e 	bne	r2,zero,1893c <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   1896c:	00000906 	br	18994 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   18970:	01c00084 	movi	r7,2
   18974:	01800044 	movi	r6,1
   18978:	000b883a 	mov	r5,zero
   1897c:	e13ffd17 	ldw	r4,-12(fp)
   18980:	00140800 	call	14080 <OS_EventTaskRdy>
                 nbr_tasks++;
   18984:	e0bff803 	ldbu	r2,-32(fp)
   18988:	10800044 	addi	r2,r2,1
   1898c:	e0bff805 	stb	r2,-32(fp)
                 break;
   18990:	0001883a 	nop
   18994:	e0bff917 	ldw	r2,-28(fp)
   18998:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1899c:	e0bffa17 	ldw	r2,-24(fp)
   189a0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   189a4:	0014acc0 	call	14acc <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   189a8:	e0bfff17 	ldw	r2,-4(fp)
   189ac:	00c00384 	movi	r3,14
   189b0:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   189b4:	e0bff803 	ldbu	r2,-32(fp)
   189b8:	00000706 	br	189d8 <OSSemPendAbort+0x158>
   189bc:	e0bff917 	ldw	r2,-28(fp)
   189c0:	e0bffb15 	stw	r2,-20(fp)
   189c4:	e0bffb17 	ldw	r2,-20(fp)
   189c8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   189cc:	e0bfff17 	ldw	r2,-4(fp)
   189d0:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   189d4:	0005883a 	mov	r2,zero
}
   189d8:	e037883a 	mov	sp,fp
   189dc:	dfc00117 	ldw	ra,4(sp)
   189e0:	df000017 	ldw	fp,0(sp)
   189e4:	dec00204 	addi	sp,sp,8
   189e8:	f800283a 	ret

000189ec <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   189ec:	defff804 	addi	sp,sp,-32
   189f0:	dfc00715 	stw	ra,28(sp)
   189f4:	df000615 	stw	fp,24(sp)
   189f8:	df000604 	addi	fp,sp,24
   189fc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18a00:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   18a04:	e0bfff17 	ldw	r2,-4(fp)
   18a08:	1000021e 	bne	r2,zero,18a14 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   18a0c:	00800104 	movi	r2,4
   18a10:	00003506 	br	18ae8 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   18a14:	e0bfff17 	ldw	r2,-4(fp)
   18a18:	10800003 	ldbu	r2,0(r2)
   18a1c:	10803fcc 	andi	r2,r2,255
   18a20:	108000e0 	cmpeqi	r2,r2,3
   18a24:	1000021e 	bne	r2,zero,18a30 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   18a28:	00800044 	movi	r2,1
   18a2c:	00002e06 	br	18ae8 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18a30:	0005303a 	rdctl	r2,status
   18a34:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18a38:	e0fffe17 	ldw	r3,-8(fp)
   18a3c:	00bfff84 	movi	r2,-2
   18a40:	1884703a 	and	r2,r3,r2
   18a44:	1001703a 	wrctl	status,r2
  
  return context;
   18a48:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   18a4c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   18a50:	e0bfff17 	ldw	r2,-4(fp)
   18a54:	10800283 	ldbu	r2,10(r2)
   18a58:	10803fcc 	andi	r2,r2,255
   18a5c:	10000c26 	beq	r2,zero,18a90 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   18a60:	000f883a 	mov	r7,zero
   18a64:	01800044 	movi	r6,1
   18a68:	000b883a 	mov	r5,zero
   18a6c:	e13fff17 	ldw	r4,-4(fp)
   18a70:	00140800 	call	14080 <OS_EventTaskRdy>
   18a74:	e0bffa17 	ldw	r2,-24(fp)
   18a78:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18a7c:	e0bffb17 	ldw	r2,-20(fp)
   18a80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   18a84:	0014acc0 	call	14acc <OS_Sched>
        return (OS_ERR_NONE);
   18a88:	0005883a 	mov	r2,zero
   18a8c:	00001606 	br	18ae8 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   18a90:	e0bfff17 	ldw	r2,-4(fp)
   18a94:	1080020b 	ldhu	r2,8(r2)
   18a98:	10ffffcc 	andi	r3,r2,65535
   18a9c:	00bfffd4 	movui	r2,65535
   18aa0:	18800c26 	beq	r3,r2,18ad4 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   18aa4:	e0bfff17 	ldw	r2,-4(fp)
   18aa8:	1080020b 	ldhu	r2,8(r2)
   18aac:	10800044 	addi	r2,r2,1
   18ab0:	1007883a 	mov	r3,r2
   18ab4:	e0bfff17 	ldw	r2,-4(fp)
   18ab8:	10c0020d 	sth	r3,8(r2)
   18abc:	e0bffa17 	ldw	r2,-24(fp)
   18ac0:	e0bffc15 	stw	r2,-16(fp)
   18ac4:	e0bffc17 	ldw	r2,-16(fp)
   18ac8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   18acc:	0005883a 	mov	r2,zero
   18ad0:	00000506 	br	18ae8 <OSSemPost+0xfc>
   18ad4:	e0bffa17 	ldw	r2,-24(fp)
   18ad8:	e0bffd15 	stw	r2,-12(fp)
   18adc:	e0bffd17 	ldw	r2,-12(fp)
   18ae0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   18ae4:	00800c84 	movi	r2,50
}
   18ae8:	e037883a 	mov	sp,fp
   18aec:	dfc00117 	ldw	ra,4(sp)
   18af0:	df000017 	ldw	fp,0(sp)
   18af4:	dec00204 	addi	sp,sp,8
   18af8:	f800283a 	ret

00018afc <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   18afc:	defff704 	addi	sp,sp,-36
   18b00:	df000815 	stw	fp,32(sp)
   18b04:	df000804 	addi	fp,sp,32
   18b08:	e13ffe15 	stw	r4,-8(fp)
   18b0c:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   18b10:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   18b14:	e0bffe17 	ldw	r2,-8(fp)
   18b18:	1000021e 	bne	r2,zero,18b24 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   18b1c:	00800104 	movi	r2,4
   18b20:	00003606 	br	18bfc <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   18b24:	e0bfff17 	ldw	r2,-4(fp)
   18b28:	1000021e 	bne	r2,zero,18b34 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   18b2c:	00800244 	movi	r2,9
   18b30:	00003206 	br	18bfc <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   18b34:	e0bffe17 	ldw	r2,-8(fp)
   18b38:	10800003 	ldbu	r2,0(r2)
   18b3c:	10803fcc 	andi	r2,r2,255
   18b40:	108000e0 	cmpeqi	r2,r2,3
   18b44:	1000021e 	bne	r2,zero,18b50 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   18b48:	00800044 	movi	r2,1
   18b4c:	00002b06 	br	18bfc <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18b50:	0005303a 	rdctl	r2,status
   18b54:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18b58:	e0fffd17 	ldw	r3,-12(fp)
   18b5c:	00bfff84 	movi	r2,-2
   18b60:	1884703a 	and	r2,r3,r2
   18b64:	1001703a 	wrctl	status,r2
  
  return context;
   18b68:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   18b6c:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   18b70:	e0bffe17 	ldw	r2,-8(fp)
   18b74:	10c00283 	ldbu	r3,10(r2)
   18b78:	e0bfff17 	ldw	r2,-4(fp)
   18b7c:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   18b80:	e0bffe17 	ldw	r2,-8(fp)
   18b84:	108002c4 	addi	r2,r2,11
   18b88:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   18b8c:	e0bfff17 	ldw	r2,-4(fp)
   18b90:	10800084 	addi	r2,r2,2
   18b94:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   18b98:	e03ffa05 	stb	zero,-24(fp)
   18b9c:	00000b06 	br	18bcc <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   18ba0:	e0bff917 	ldw	r2,-28(fp)
   18ba4:	10c00044 	addi	r3,r2,1
   18ba8:	e0fff915 	stw	r3,-28(fp)
   18bac:	e0fff817 	ldw	r3,-32(fp)
   18bb0:	19000044 	addi	r4,r3,1
   18bb4:	e13ff815 	stw	r4,-32(fp)
   18bb8:	18c00003 	ldbu	r3,0(r3)
   18bbc:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   18bc0:	e0bffa03 	ldbu	r2,-24(fp)
   18bc4:	10800044 	addi	r2,r2,1
   18bc8:	e0bffa05 	stb	r2,-24(fp)
   18bcc:	e0bffa03 	ldbu	r2,-24(fp)
   18bd0:	108000f0 	cmpltui	r2,r2,3
   18bd4:	103ff21e 	bne	r2,zero,18ba0 <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   18bd8:	e0bffe17 	ldw	r2,-8(fp)
   18bdc:	10c0020b 	ldhu	r3,8(r2)
   18be0:	e0bfff17 	ldw	r2,-4(fp)
   18be4:	10c0000d 	sth	r3,0(r2)
   18be8:	e0bffb17 	ldw	r2,-20(fp)
   18bec:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18bf0:	e0bffc17 	ldw	r2,-16(fp)
   18bf4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18bf8:	0005883a 	mov	r2,zero
}
   18bfc:	e037883a 	mov	sp,fp
   18c00:	df000017 	ldw	fp,0(sp)
   18c04:	dec00104 	addi	sp,sp,4
   18c08:	f800283a 	ret

00018c0c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   18c0c:	defff904 	addi	sp,sp,-28
   18c10:	df000615 	stw	fp,24(sp)
   18c14:	df000604 	addi	fp,sp,24
   18c18:	e13ffd15 	stw	r4,-12(fp)
   18c1c:	2805883a 	mov	r2,r5
   18c20:	e1bfff15 	stw	r6,-4(fp)
   18c24:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18c28:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   18c2c:	e0bfff17 	ldw	r2,-4(fp)
   18c30:	10003126 	beq	r2,zero,18cf8 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   18c34:	e0bffd17 	ldw	r2,-12(fp)
   18c38:	1000041e 	bne	r2,zero,18c4c <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   18c3c:	e0bfff17 	ldw	r2,-4(fp)
   18c40:	00c00104 	movi	r3,4
   18c44:	10c00005 	stb	r3,0(r2)
        return;
   18c48:	00002c06 	br	18cfc <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   18c4c:	e0bffd17 	ldw	r2,-12(fp)
   18c50:	10800003 	ldbu	r2,0(r2)
   18c54:	10803fcc 	andi	r2,r2,255
   18c58:	108000e0 	cmpeqi	r2,r2,3
   18c5c:	1000041e 	bne	r2,zero,18c70 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
   18c60:	e0bfff17 	ldw	r2,-4(fp)
   18c64:	00c00044 	movi	r3,1
   18c68:	10c00005 	stb	r3,0(r2)
        return;
   18c6c:	00002306 	br	18cfc <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18c70:	0005303a 	rdctl	r2,status
   18c74:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18c78:	e0fffc17 	ldw	r3,-16(fp)
   18c7c:	00bfff84 	movi	r2,-2
   18c80:	1884703a 	and	r2,r3,r2
   18c84:	1001703a 	wrctl	status,r2
  
  return context;
   18c88:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   18c8c:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   18c90:	e0bfff17 	ldw	r2,-4(fp)
   18c94:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   18c98:	e0bffd17 	ldw	r2,-12(fp)
   18c9c:	1080020b 	ldhu	r2,8(r2)
   18ca0:	10bfffcc 	andi	r2,r2,65535
   18ca4:	10000426 	beq	r2,zero,18cb8 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   18ca8:	e0bffd17 	ldw	r2,-12(fp)
   18cac:	e0fffe0b 	ldhu	r3,-8(fp)
   18cb0:	10c0020d 	sth	r3,8(r2)
   18cb4:	00000b06 	br	18ce4 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   18cb8:	e0bffd17 	ldw	r2,-12(fp)
   18cbc:	10800283 	ldbu	r2,10(r2)
   18cc0:	10803fcc 	andi	r2,r2,255
   18cc4:	1000041e 	bne	r2,zero,18cd8 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   18cc8:	e0bffd17 	ldw	r2,-12(fp)
   18ccc:	e0fffe0b 	ldhu	r3,-8(fp)
   18cd0:	10c0020d 	sth	r3,8(r2)
   18cd4:	00000306 	br	18ce4 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   18cd8:	e0bfff17 	ldw	r2,-4(fp)
   18cdc:	00c01244 	movi	r3,73
   18ce0:	10c00005 	stb	r3,0(r2)
   18ce4:	e0bffa17 	ldw	r2,-24(fp)
   18ce8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18cec:	e0bffb17 	ldw	r2,-20(fp)
   18cf0:	1001703a 	wrctl	status,r2
   18cf4:	00000106 	br	18cfc <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   18cf8:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
   18cfc:	e037883a 	mov	sp,fp
   18d00:	df000017 	ldw	fp,0(sp)
   18d04:	dec00104 	addi	sp,sp,4
   18d08:	f800283a 	ret

00018d0c <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   18d0c:	defff104 	addi	sp,sp,-60
   18d10:	dfc00e15 	stw	ra,56(sp)
   18d14:	df000d15 	stw	fp,52(sp)
   18d18:	df000d04 	addi	fp,sp,52
   18d1c:	2007883a 	mov	r3,r4
   18d20:	2805883a 	mov	r2,r5
   18d24:	e0fffe05 	stb	r3,-8(fp)
   18d28:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   18d2c:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   18d30:	e0bffe03 	ldbu	r2,-8(fp)
   18d34:	10800530 	cmpltui	r2,r2,20
   18d38:	1000051e 	bne	r2,zero,18d50 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   18d3c:	e0bffe03 	ldbu	r2,-8(fp)
   18d40:	10803fe0 	cmpeqi	r2,r2,255
   18d44:	1000021e 	bne	r2,zero,18d50 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   18d48:	00800a84 	movi	r2,42
   18d4c:	00012606 	br	191e8 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   18d50:	e0bfff03 	ldbu	r2,-4(fp)
   18d54:	10800530 	cmpltui	r2,r2,20
   18d58:	1000021e 	bne	r2,zero,18d64 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   18d5c:	00800a84 	movi	r2,42
   18d60:	00012106 	br	191e8 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18d64:	0005303a 	rdctl	r2,status
   18d68:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18d6c:	e0fffd17 	ldw	r3,-12(fp)
   18d70:	00bfff84 	movi	r2,-2
   18d74:	1884703a 	and	r2,r3,r2
   18d78:	1001703a 	wrctl	status,r2
  
  return context;
   18d7c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   18d80:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   18d84:	e0ffff03 	ldbu	r3,-4(fp)
   18d88:	008000f4 	movhi	r2,3
   18d8c:	10829304 	addi	r2,r2,2636
   18d90:	18c7883a 	add	r3,r3,r3
   18d94:	18c7883a 	add	r3,r3,r3
   18d98:	10c5883a 	add	r2,r2,r3
   18d9c:	10800017 	ldw	r2,0(r2)
   18da0:	10000626 	beq	r2,zero,18dbc <OSTaskChangePrio+0xb0>
   18da4:	e0bff517 	ldw	r2,-44(fp)
   18da8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18dac:	e0bff617 	ldw	r2,-40(fp)
   18db0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   18db4:	00800a04 	movi	r2,40
   18db8:	00010b06 	br	191e8 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   18dbc:	e0bffe03 	ldbu	r2,-8(fp)
   18dc0:	10803fd8 	cmpnei	r2,r2,255
   18dc4:	1000031e 	bne	r2,zero,18dd4 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   18dc8:	d0a82017 	ldw	r2,-24448(gp)
   18dcc:	10800c83 	ldbu	r2,50(r2)
   18dd0:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   18dd4:	e0fffe03 	ldbu	r3,-8(fp)
   18dd8:	008000f4 	movhi	r2,3
   18ddc:	10829304 	addi	r2,r2,2636
   18de0:	18c7883a 	add	r3,r3,r3
   18de4:	18c7883a 	add	r3,r3,r3
   18de8:	10c5883a 	add	r2,r2,r3
   18dec:	10800017 	ldw	r2,0(r2)
   18df0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   18df4:	e0bff817 	ldw	r2,-32(fp)
   18df8:	1000061e 	bne	r2,zero,18e14 <OSTaskChangePrio+0x108>
   18dfc:	e0bff517 	ldw	r2,-44(fp)
   18e00:	e0bff715 	stw	r2,-36(fp)
   18e04:	e0bff717 	ldw	r2,-36(fp)
   18e08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   18e0c:	00800a44 	movi	r2,41
   18e10:	0000f506 	br	191e8 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   18e14:	e0bff817 	ldw	r2,-32(fp)
   18e18:	10800058 	cmpnei	r2,r2,1
   18e1c:	1000061e 	bne	r2,zero,18e38 <OSTaskChangePrio+0x12c>
   18e20:	e0bff517 	ldw	r2,-44(fp)
   18e24:	e0bff915 	stw	r2,-28(fp)
   18e28:	e0bff917 	ldw	r2,-28(fp)
   18e2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   18e30:	008010c4 	movi	r2,67
   18e34:	0000ec06 	br	191e8 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   18e38:	e0bfff03 	ldbu	r2,-4(fp)
   18e3c:	1004d0fa 	srli	r2,r2,3
   18e40:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   18e44:	e0bfff03 	ldbu	r2,-4(fp)
   18e48:	108001cc 	andi	r2,r2,7
   18e4c:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
   18e50:	e0bffb03 	ldbu	r2,-20(fp)
   18e54:	00c00044 	movi	r3,1
   18e58:	1884983a 	sll	r2,r3,r2
   18e5c:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
   18e60:	e0bffb43 	ldbu	r2,-19(fp)
   18e64:	00c00044 	movi	r3,1
   18e68:	1884983a 	sll	r2,r3,r2
   18e6c:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   18e70:	e0fffe03 	ldbu	r3,-8(fp)
   18e74:	008000f4 	movhi	r2,3
   18e78:	10829304 	addi	r2,r2,2636
   18e7c:	18c7883a 	add	r3,r3,r3
   18e80:	18c7883a 	add	r3,r3,r3
   18e84:	10c5883a 	add	r2,r2,r3
   18e88:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   18e8c:	e0ffff03 	ldbu	r3,-4(fp)
   18e90:	008000f4 	movhi	r2,3
   18e94:	10829304 	addi	r2,r2,2636
   18e98:	18c7883a 	add	r3,r3,r3
   18e9c:	18c7883a 	add	r3,r3,r3
   18ea0:	10c5883a 	add	r2,r2,r3
   18ea4:	e0fff817 	ldw	r3,-32(fp)
   18ea8:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   18eac:	e0bff817 	ldw	r2,-32(fp)
   18eb0:	10800d03 	ldbu	r2,52(r2)
   18eb4:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
   18eb8:	e0bff817 	ldw	r2,-32(fp)
   18ebc:	10800d83 	ldbu	r2,54(r2)
   18ec0:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   18ec4:	e0bff817 	ldw	r2,-32(fp)
   18ec8:	10800d43 	ldbu	r2,53(r2)
   18ecc:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   18ed0:	e0fffc03 	ldbu	r3,-16(fp)
   18ed4:	d0a81d44 	addi	r2,gp,-24459
   18ed8:	1885883a 	add	r2,r3,r2
   18edc:	10c00003 	ldbu	r3,0(r2)
   18ee0:	e0bffc83 	ldbu	r2,-14(fp)
   18ee4:	1884703a 	and	r2,r3,r2
   18ee8:	10803fcc 	andi	r2,r2,255
   18eec:	10002826 	beq	r2,zero,18f90 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
   18ef0:	e0fffc03 	ldbu	r3,-16(fp)
   18ef4:	e13ffc03 	ldbu	r4,-16(fp)
   18ef8:	d0a81d44 	addi	r2,gp,-24459
   18efc:	2085883a 	add	r2,r4,r2
   18f00:	10800003 	ldbu	r2,0(r2)
   18f04:	1009883a 	mov	r4,r2
   18f08:	e0bffc83 	ldbu	r2,-14(fp)
   18f0c:	0084303a 	nor	r2,zero,r2
   18f10:	2084703a 	and	r2,r4,r2
   18f14:	1009883a 	mov	r4,r2
   18f18:	d0a81d44 	addi	r2,gp,-24459
   18f1c:	1885883a 	add	r2,r3,r2
   18f20:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   18f24:	e0fffc03 	ldbu	r3,-16(fp)
   18f28:	d0a81d44 	addi	r2,gp,-24459
   18f2c:	1885883a 	add	r2,r3,r2
   18f30:	10800003 	ldbu	r2,0(r2)
   18f34:	10803fcc 	andi	r2,r2,255
   18f38:	1000061e 	bne	r2,zero,18f54 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
   18f3c:	e0bffc43 	ldbu	r2,-15(fp)
   18f40:	0084303a 	nor	r2,zero,r2
   18f44:	1007883a 	mov	r3,r2
   18f48:	d0a81d03 	ldbu	r2,-24460(gp)
   18f4c:	1884703a 	and	r2,r3,r2
   18f50:	d0a81d05 	stb	r2,-24460(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   18f54:	d0e81d03 	ldbu	r3,-24460(gp)
   18f58:	e0bffb83 	ldbu	r2,-18(fp)
   18f5c:	1884b03a 	or	r2,r3,r2
   18f60:	d0a81d05 	stb	r2,-24460(gp)
         OSRdyTbl[y_new] |= bitx_new;
   18f64:	e0fffb03 	ldbu	r3,-20(fp)
   18f68:	e13ffb03 	ldbu	r4,-20(fp)
   18f6c:	d0a81d44 	addi	r2,gp,-24459
   18f70:	2085883a 	add	r2,r4,r2
   18f74:	11000003 	ldbu	r4,0(r2)
   18f78:	e0bffbc3 	ldbu	r2,-17(fp)
   18f7c:	2084b03a 	or	r2,r4,r2
   18f80:	1009883a 	mov	r4,r2
   18f84:	d0a81d44 	addi	r2,gp,-24459
   18f88:	1885883a 	add	r2,r3,r2
   18f8c:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   18f90:	e0bff817 	ldw	r2,-32(fp)
   18f94:	10800717 	ldw	r2,28(r2)
   18f98:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   18f9c:	e0bff317 	ldw	r2,-52(fp)
   18fa0:	10003326 	beq	r2,zero,19070 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   18fa4:	e0bffc03 	ldbu	r2,-16(fp)
   18fa8:	e0fffc03 	ldbu	r3,-16(fp)
   18fac:	e13ff317 	ldw	r4,-52(fp)
   18fb0:	20c7883a 	add	r3,r4,r3
   18fb4:	18c002c4 	addi	r3,r3,11
   18fb8:	18c00003 	ldbu	r3,0(r3)
   18fbc:	1809883a 	mov	r4,r3
   18fc0:	e0fffc83 	ldbu	r3,-14(fp)
   18fc4:	00c6303a 	nor	r3,zero,r3
   18fc8:	20c6703a 	and	r3,r4,r3
   18fcc:	1809883a 	mov	r4,r3
   18fd0:	e0fff317 	ldw	r3,-52(fp)
   18fd4:	1885883a 	add	r2,r3,r2
   18fd8:	108002c4 	addi	r2,r2,11
   18fdc:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   18fe0:	e0bffc03 	ldbu	r2,-16(fp)
   18fe4:	e0fff317 	ldw	r3,-52(fp)
   18fe8:	1885883a 	add	r2,r3,r2
   18fec:	108002c4 	addi	r2,r2,11
   18ff0:	10800003 	ldbu	r2,0(r2)
   18ff4:	10803fcc 	andi	r2,r2,255
   18ff8:	1000091e 	bne	r2,zero,19020 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
   18ffc:	e0bff317 	ldw	r2,-52(fp)
   19000:	10800283 	ldbu	r2,10(r2)
   19004:	1007883a 	mov	r3,r2
   19008:	e0bffc43 	ldbu	r2,-15(fp)
   1900c:	0084303a 	nor	r2,zero,r2
   19010:	1884703a 	and	r2,r3,r2
   19014:	1007883a 	mov	r3,r2
   19018:	e0bff317 	ldw	r2,-52(fp)
   1901c:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   19020:	e0bff317 	ldw	r2,-52(fp)
   19024:	10c00283 	ldbu	r3,10(r2)
   19028:	e0bffb83 	ldbu	r2,-18(fp)
   1902c:	1884b03a 	or	r2,r3,r2
   19030:	1007883a 	mov	r3,r2
   19034:	e0bff317 	ldw	r2,-52(fp)
   19038:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   1903c:	e0bffb03 	ldbu	r2,-20(fp)
   19040:	e0fffb03 	ldbu	r3,-20(fp)
   19044:	e13ff317 	ldw	r4,-52(fp)
   19048:	20c7883a 	add	r3,r4,r3
   1904c:	18c002c4 	addi	r3,r3,11
   19050:	19000003 	ldbu	r4,0(r3)
   19054:	e0fffbc3 	ldbu	r3,-17(fp)
   19058:	20c6b03a 	or	r3,r4,r3
   1905c:	1809883a 	mov	r4,r3
   19060:	e0fff317 	ldw	r3,-52(fp)
   19064:	1885883a 	add	r2,r3,r2
   19068:	108002c4 	addi	r2,r2,11
   1906c:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   19070:	e0bff817 	ldw	r2,-32(fp)
   19074:	10800817 	ldw	r2,32(r2)
   19078:	10004226 	beq	r2,zero,19184 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
   1907c:	e0bff817 	ldw	r2,-32(fp)
   19080:	10800817 	ldw	r2,32(r2)
   19084:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   19088:	e0bff417 	ldw	r2,-48(fp)
   1908c:	10800017 	ldw	r2,0(r2)
   19090:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   19094:	00003906 	br	1917c <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   19098:	e0bffc03 	ldbu	r2,-16(fp)
   1909c:	e0fffc03 	ldbu	r3,-16(fp)
   190a0:	e13ff317 	ldw	r4,-52(fp)
   190a4:	20c7883a 	add	r3,r4,r3
   190a8:	18c002c4 	addi	r3,r3,11
   190ac:	18c00003 	ldbu	r3,0(r3)
   190b0:	1809883a 	mov	r4,r3
   190b4:	e0fffc83 	ldbu	r3,-14(fp)
   190b8:	00c6303a 	nor	r3,zero,r3
   190bc:	20c6703a 	and	r3,r4,r3
   190c0:	1809883a 	mov	r4,r3
   190c4:	e0fff317 	ldw	r3,-52(fp)
   190c8:	1885883a 	add	r2,r3,r2
   190cc:	108002c4 	addi	r2,r2,11
   190d0:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   190d4:	e0bffc03 	ldbu	r2,-16(fp)
   190d8:	e0fff317 	ldw	r3,-52(fp)
   190dc:	1885883a 	add	r2,r3,r2
   190e0:	108002c4 	addi	r2,r2,11
   190e4:	10800003 	ldbu	r2,0(r2)
   190e8:	10803fcc 	andi	r2,r2,255
   190ec:	1000091e 	bne	r2,zero,19114 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
   190f0:	e0bff317 	ldw	r2,-52(fp)
   190f4:	10800283 	ldbu	r2,10(r2)
   190f8:	1007883a 	mov	r3,r2
   190fc:	e0bffc43 	ldbu	r2,-15(fp)
   19100:	0084303a 	nor	r2,zero,r2
   19104:	1884703a 	and	r2,r3,r2
   19108:	1007883a 	mov	r3,r2
   1910c:	e0bff317 	ldw	r2,-52(fp)
   19110:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   19114:	e0bff317 	ldw	r2,-52(fp)
   19118:	10c00283 	ldbu	r3,10(r2)
   1911c:	e0bffb83 	ldbu	r2,-18(fp)
   19120:	1884b03a 	or	r2,r3,r2
   19124:	1007883a 	mov	r3,r2
   19128:	e0bff317 	ldw	r2,-52(fp)
   1912c:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   19130:	e0bffb03 	ldbu	r2,-20(fp)
   19134:	e0fffb03 	ldbu	r3,-20(fp)
   19138:	e13ff317 	ldw	r4,-52(fp)
   1913c:	20c7883a 	add	r3,r4,r3
   19140:	18c002c4 	addi	r3,r3,11
   19144:	19000003 	ldbu	r4,0(r3)
   19148:	e0fffbc3 	ldbu	r3,-17(fp)
   1914c:	20c6b03a 	or	r3,r4,r3
   19150:	1809883a 	mov	r4,r3
   19154:	e0fff317 	ldw	r3,-52(fp)
   19158:	1885883a 	add	r2,r3,r2
   1915c:	108002c4 	addi	r2,r2,11
   19160:	11000005 	stb	r4,0(r2)
            pevents++;
   19164:	e0bff417 	ldw	r2,-48(fp)
   19168:	10800104 	addi	r2,r2,4
   1916c:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   19170:	e0bff417 	ldw	r2,-48(fp)
   19174:	10800017 	ldw	r2,0(r2)
   19178:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   1917c:	e0bff317 	ldw	r2,-52(fp)
   19180:	103fc51e 	bne	r2,zero,19098 <OSTaskChangePrio+0x38c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   19184:	e0bff817 	ldw	r2,-32(fp)
   19188:	e0ffff03 	ldbu	r3,-4(fp)
   1918c:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   19190:	e0bff817 	ldw	r2,-32(fp)
   19194:	e0fffb03 	ldbu	r3,-20(fp)
   19198:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   1919c:	e0bff817 	ldw	r2,-32(fp)
   191a0:	e0fffb43 	ldbu	r3,-19(fp)
   191a4:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   191a8:	e0bff817 	ldw	r2,-32(fp)
   191ac:	e0fffb83 	ldbu	r3,-18(fp)
   191b0:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   191b4:	e0bff817 	ldw	r2,-32(fp)
   191b8:	e0fffbc3 	ldbu	r3,-17(fp)
   191bc:	10c00d45 	stb	r3,53(r2)
   191c0:	e0bff517 	ldw	r2,-44(fp)
   191c4:	e0bffa15 	stw	r2,-24(fp)
   191c8:	e0bffa17 	ldw	r2,-24(fp)
   191cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   191d0:	d0a81143 	ldbu	r2,-24507(gp)
   191d4:	10803fcc 	andi	r2,r2,255
   191d8:	10800058 	cmpnei	r2,r2,1
   191dc:	1000011e 	bne	r2,zero,191e4 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
   191e0:	0014acc0 	call	14acc <OS_Sched>
    }
    return (OS_ERR_NONE);
   191e4:	0005883a 	mov	r2,zero
}
   191e8:	e037883a 	mov	sp,fp
   191ec:	dfc00117 	ldw	ra,4(sp)
   191f0:	df000017 	ldw	fp,0(sp)
   191f4:	dec00204 	addi	sp,sp,8
   191f8:	f800283a 	ret

000191fc <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   191fc:	deffee04 	addi	sp,sp,-72
   19200:	dfc01115 	stw	ra,68(sp)
   19204:	df001015 	stw	fp,64(sp)
   19208:	df001004 	addi	fp,sp,64
   1920c:	e13ffc15 	stw	r4,-16(fp)
   19210:	e17ffd15 	stw	r5,-12(fp)
   19214:	e1bffe15 	stw	r6,-8(fp)
   19218:	3805883a 	mov	r2,r7
   1921c:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   19220:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   19224:	e0bfff03 	ldbu	r2,-4(fp)
   19228:	10800570 	cmpltui	r2,r2,21
   1922c:	1000021e 	bne	r2,zero,19238 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   19230:	00800a84 	movi	r2,42
   19234:	00005706 	br	19394 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19238:	0005303a 	rdctl	r2,status
   1923c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19240:	e0fffb17 	ldw	r3,-20(fp)
   19244:	00bfff84 	movi	r2,-2
   19248:	1884703a 	and	r2,r3,r2
   1924c:	1001703a 	wrctl	status,r2
  
  return context;
   19250:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   19254:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   19258:	d0a81f03 	ldbu	r2,-24452(gp)
   1925c:	10803fcc 	andi	r2,r2,255
   19260:	10000626 	beq	r2,zero,1927c <OSTaskCreate+0x80>
   19264:	e0bff317 	ldw	r2,-52(fp)
   19268:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1926c:	e0bff417 	ldw	r2,-48(fp)
   19270:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   19274:	00800f04 	movi	r2,60
   19278:	00004606 	br	19394 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   1927c:	e0ffff03 	ldbu	r3,-4(fp)
   19280:	008000f4 	movhi	r2,3
   19284:	10829304 	addi	r2,r2,2636
   19288:	18c7883a 	add	r3,r3,r3
   1928c:	18c7883a 	add	r3,r3,r3
   19290:	10c5883a 	add	r2,r2,r3
   19294:	10800017 	ldw	r2,0(r2)
   19298:	1000391e 	bne	r2,zero,19380 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   1929c:	e0ffff03 	ldbu	r3,-4(fp)
   192a0:	008000f4 	movhi	r2,3
   192a4:	10829304 	addi	r2,r2,2636
   192a8:	18c7883a 	add	r3,r3,r3
   192ac:	18c7883a 	add	r3,r3,r3
   192b0:	10c5883a 	add	r2,r2,r3
   192b4:	00c00044 	movi	r3,1
   192b8:	10c00015 	stw	r3,0(r2)
   192bc:	e0bff317 	ldw	r2,-52(fp)
   192c0:	e0bff515 	stw	r2,-44(fp)
   192c4:	e0bff517 	ldw	r2,-44(fp)
   192c8:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   192cc:	000f883a 	mov	r7,zero
   192d0:	e1bffe17 	ldw	r6,-8(fp)
   192d4:	e17ffd17 	ldw	r5,-12(fp)
   192d8:	e13ffc17 	ldw	r4,-16(fp)
   192dc:	001df740 	call	1df74 <OSTaskStkInit>
   192e0:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   192e4:	e0bfff03 	ldbu	r2,-4(fp)
   192e8:	d8000215 	stw	zero,8(sp)
   192ec:	d8000115 	stw	zero,4(sp)
   192f0:	d8000015 	stw	zero,0(sp)
   192f4:	000f883a 	mov	r7,zero
   192f8:	000d883a 	mov	r6,zero
   192fc:	e17ff717 	ldw	r5,-36(fp)
   19300:	1009883a 	mov	r4,r2
   19304:	0014edc0 	call	14edc <OS_TCBInit>
   19308:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
   1930c:	e0bff803 	ldbu	r2,-32(fp)
   19310:	1000061e 	bne	r2,zero,1932c <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   19314:	d0a81143 	ldbu	r2,-24507(gp)
   19318:	10803fcc 	andi	r2,r2,255
   1931c:	10800058 	cmpnei	r2,r2,1
   19320:	1000151e 	bne	r2,zero,19378 <OSTaskCreate+0x17c>
                OS_Sched();
   19324:	0014acc0 	call	14acc <OS_Sched>
   19328:	00001306 	br	19378 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1932c:	0005303a 	rdctl	r2,status
   19330:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19334:	e0fffa17 	ldw	r3,-24(fp)
   19338:	00bfff84 	movi	r2,-2
   1933c:	1884703a 	and	r2,r3,r2
   19340:	1001703a 	wrctl	status,r2
  
  return context;
   19344:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   19348:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   1934c:	e0ffff03 	ldbu	r3,-4(fp)
   19350:	008000f4 	movhi	r2,3
   19354:	10829304 	addi	r2,r2,2636
   19358:	18c7883a 	add	r3,r3,r3
   1935c:	18c7883a 	add	r3,r3,r3
   19360:	10c5883a 	add	r2,r2,r3
   19364:	10000015 	stw	zero,0(r2)
   19368:	e0bff317 	ldw	r2,-52(fp)
   1936c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19370:	e0bff617 	ldw	r2,-40(fp)
   19374:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   19378:	e0bff803 	ldbu	r2,-32(fp)
   1937c:	00000506 	br	19394 <OSTaskCreate+0x198>
   19380:	e0bff317 	ldw	r2,-52(fp)
   19384:	e0bff915 	stw	r2,-28(fp)
   19388:	e0bff917 	ldw	r2,-28(fp)
   1938c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   19390:	00800a04 	movi	r2,40
}
   19394:	e037883a 	mov	sp,fp
   19398:	dfc00117 	ldw	ra,4(sp)
   1939c:	df000017 	ldw	fp,0(sp)
   193a0:	dec00204 	addi	sp,sp,8
   193a4:	f800283a 	ret

000193a8 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   193a8:	deffec04 	addi	sp,sp,-80
   193ac:	dfc01315 	stw	ra,76(sp)
   193b0:	df001215 	stw	fp,72(sp)
   193b4:	df001204 	addi	fp,sp,72
   193b8:	e13ffa15 	stw	r4,-24(fp)
   193bc:	e17ffb15 	stw	r5,-20(fp)
   193c0:	e1bffc15 	stw	r6,-16(fp)
   193c4:	3809883a 	mov	r4,r7
   193c8:	e0c00217 	ldw	r3,8(fp)
   193cc:	e0800617 	ldw	r2,24(fp)
   193d0:	e13ffd05 	stb	r4,-12(fp)
   193d4:	e0fffe0d 	sth	r3,-8(fp)
   193d8:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   193dc:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   193e0:	e0bffd03 	ldbu	r2,-12(fp)
   193e4:	10800570 	cmpltui	r2,r2,21
   193e8:	1000021e 	bne	r2,zero,193f4 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   193ec:	00800a84 	movi	r2,42
   193f0:	00006106 	br	19578 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   193f4:	0005303a 	rdctl	r2,status
   193f8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   193fc:	e0fff917 	ldw	r3,-28(fp)
   19400:	00bfff84 	movi	r2,-2
   19404:	1884703a 	and	r2,r3,r2
   19408:	1001703a 	wrctl	status,r2
  
  return context;
   1940c:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   19410:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   19414:	d0a81f03 	ldbu	r2,-24452(gp)
   19418:	10803fcc 	andi	r2,r2,255
   1941c:	10000626 	beq	r2,zero,19438 <OSTaskCreateExt+0x90>
   19420:	e0bff117 	ldw	r2,-60(fp)
   19424:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19428:	e0bff217 	ldw	r2,-56(fp)
   1942c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   19430:	00800f04 	movi	r2,60
   19434:	00005006 	br	19578 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   19438:	e0fffd03 	ldbu	r3,-12(fp)
   1943c:	008000f4 	movhi	r2,3
   19440:	10829304 	addi	r2,r2,2636
   19444:	18c7883a 	add	r3,r3,r3
   19448:	18c7883a 	add	r3,r3,r3
   1944c:	10c5883a 	add	r2,r2,r3
   19450:	10800017 	ldw	r2,0(r2)
   19454:	1000431e 	bne	r2,zero,19564 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   19458:	e0fffd03 	ldbu	r3,-12(fp)
   1945c:	008000f4 	movhi	r2,3
   19460:	10829304 	addi	r2,r2,2636
   19464:	18c7883a 	add	r3,r3,r3
   19468:	18c7883a 	add	r3,r3,r3
   1946c:	10c5883a 	add	r2,r2,r3
   19470:	00c00044 	movi	r3,1
   19474:	10c00015 	stw	r3,0(r2)
   19478:	e0bff117 	ldw	r2,-60(fp)
   1947c:	e0bff315 	stw	r2,-52(fp)
   19480:	e0bff317 	ldw	r2,-52(fp)
   19484:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   19488:	e0bfff0b 	ldhu	r2,-4(fp)
   1948c:	100d883a 	mov	r6,r2
   19490:	e1400417 	ldw	r5,16(fp)
   19494:	e1000317 	ldw	r4,12(fp)
   19498:	001a4080 	call	1a408 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   1949c:	e0bfff0b 	ldhu	r2,-4(fp)
   194a0:	100f883a 	mov	r7,r2
   194a4:	e1bffc17 	ldw	r6,-16(fp)
   194a8:	e17ffb17 	ldw	r5,-20(fp)
   194ac:	e13ffa17 	ldw	r4,-24(fp)
   194b0:	001df740 	call	1df74 <OSTaskStkInit>
   194b4:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   194b8:	e0fffd03 	ldbu	r3,-12(fp)
   194bc:	e13ffe0b 	ldhu	r4,-8(fp)
   194c0:	e0bfff0b 	ldhu	r2,-4(fp)
   194c4:	d8800215 	stw	r2,8(sp)
   194c8:	e0800517 	ldw	r2,20(fp)
   194cc:	d8800115 	stw	r2,4(sp)
   194d0:	e0800417 	ldw	r2,16(fp)
   194d4:	d8800015 	stw	r2,0(sp)
   194d8:	200f883a 	mov	r7,r4
   194dc:	e1800317 	ldw	r6,12(fp)
   194e0:	e17ff517 	ldw	r5,-44(fp)
   194e4:	1809883a 	mov	r4,r3
   194e8:	0014edc0 	call	14edc <OS_TCBInit>
   194ec:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
   194f0:	e0bff603 	ldbu	r2,-40(fp)
   194f4:	1000061e 	bne	r2,zero,19510 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   194f8:	d0a81143 	ldbu	r2,-24507(gp)
   194fc:	10803fcc 	andi	r2,r2,255
   19500:	10800058 	cmpnei	r2,r2,1
   19504:	1000151e 	bne	r2,zero,1955c <OSTaskCreateExt+0x1b4>
                OS_Sched();
   19508:	0014acc0 	call	14acc <OS_Sched>
   1950c:	00001306 	br	1955c <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19510:	0005303a 	rdctl	r2,status
   19514:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19518:	e0fff817 	ldw	r3,-32(fp)
   1951c:	00bfff84 	movi	r2,-2
   19520:	1884703a 	and	r2,r3,r2
   19524:	1001703a 	wrctl	status,r2
  
  return context;
   19528:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   1952c:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   19530:	e0fffd03 	ldbu	r3,-12(fp)
   19534:	008000f4 	movhi	r2,3
   19538:	10829304 	addi	r2,r2,2636
   1953c:	18c7883a 	add	r3,r3,r3
   19540:	18c7883a 	add	r3,r3,r3
   19544:	10c5883a 	add	r2,r2,r3
   19548:	10000015 	stw	zero,0(r2)
   1954c:	e0bff117 	ldw	r2,-60(fp)
   19550:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19554:	e0bff417 	ldw	r2,-48(fp)
   19558:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   1955c:	e0bff603 	ldbu	r2,-40(fp)
   19560:	00000506 	br	19578 <OSTaskCreateExt+0x1d0>
   19564:	e0bff117 	ldw	r2,-60(fp)
   19568:	e0bff715 	stw	r2,-36(fp)
   1956c:	e0bff717 	ldw	r2,-36(fp)
   19570:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   19574:	00800a04 	movi	r2,40
}
   19578:	e037883a 	mov	sp,fp
   1957c:	dfc00117 	ldw	ra,4(sp)
   19580:	df000017 	ldw	fp,0(sp)
   19584:	dec00204 	addi	sp,sp,8
   19588:	f800283a 	ret

0001958c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   1958c:	defff404 	addi	sp,sp,-48
   19590:	dfc00b15 	stw	ra,44(sp)
   19594:	df000a15 	stw	fp,40(sp)
   19598:	df000a04 	addi	fp,sp,40
   1959c:	2005883a 	mov	r2,r4
   195a0:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   195a4:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   195a8:	d0a81f03 	ldbu	r2,-24452(gp)
   195ac:	10803fcc 	andi	r2,r2,255
   195b0:	10000226 	beq	r2,zero,195bc <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
   195b4:	00801004 	movi	r2,64
   195b8:	0000c006 	br	198bc <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   195bc:	e0bfff03 	ldbu	r2,-4(fp)
   195c0:	10800518 	cmpnei	r2,r2,20
   195c4:	1000021e 	bne	r2,zero,195d0 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
   195c8:	00800f84 	movi	r2,62
   195cc:	0000bb06 	br	198bc <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   195d0:	e0bfff03 	ldbu	r2,-4(fp)
   195d4:	10800530 	cmpltui	r2,r2,20
   195d8:	1000051e 	bne	r2,zero,195f0 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
   195dc:	e0bfff03 	ldbu	r2,-4(fp)
   195e0:	10803fe0 	cmpeqi	r2,r2,255
   195e4:	1000021e 	bne	r2,zero,195f0 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
   195e8:	00800a84 	movi	r2,42
   195ec:	0000b306 	br	198bc <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   195f0:	0005303a 	rdctl	r2,status
   195f4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   195f8:	e0fffe17 	ldw	r3,-8(fp)
   195fc:	00bfff84 	movi	r2,-2
   19600:	1884703a 	and	r2,r3,r2
   19604:	1001703a 	wrctl	status,r2
  
  return context;
   19608:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   1960c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   19610:	e0bfff03 	ldbu	r2,-4(fp)
   19614:	10803fd8 	cmpnei	r2,r2,255
   19618:	1000031e 	bne	r2,zero,19628 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   1961c:	d0a82017 	ldw	r2,-24448(gp)
   19620:	10800c83 	ldbu	r2,50(r2)
   19624:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   19628:	e0ffff03 	ldbu	r3,-4(fp)
   1962c:	008000f4 	movhi	r2,3
   19630:	10829304 	addi	r2,r2,2636
   19634:	18c7883a 	add	r3,r3,r3
   19638:	18c7883a 	add	r3,r3,r3
   1963c:	10c5883a 	add	r2,r2,r3
   19640:	10800017 	ldw	r2,0(r2)
   19644:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   19648:	e0bff817 	ldw	r2,-32(fp)
   1964c:	1000061e 	bne	r2,zero,19668 <OSTaskDel+0xdc>
   19650:	e0bff617 	ldw	r2,-40(fp)
   19654:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19658:	e0bff717 	ldw	r2,-36(fp)
   1965c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   19660:	008010c4 	movi	r2,67
   19664:	00009506 	br	198bc <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   19668:	e0bff817 	ldw	r2,-32(fp)
   1966c:	10800058 	cmpnei	r2,r2,1
   19670:	1000061e 	bne	r2,zero,1968c <OSTaskDel+0x100>
   19674:	e0bff617 	ldw	r2,-40(fp)
   19678:	e0bff915 	stw	r2,-28(fp)
   1967c:	e0bff917 	ldw	r2,-28(fp)
   19680:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   19684:	00800f44 	movi	r2,61
   19688:	00008c06 	br	198bc <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   1968c:	e0bff817 	ldw	r2,-32(fp)
   19690:	10800d03 	ldbu	r2,52(r2)
   19694:	10c03fcc 	andi	r3,r2,255
   19698:	e0bff817 	ldw	r2,-32(fp)
   1969c:	10800d03 	ldbu	r2,52(r2)
   196a0:	11003fcc 	andi	r4,r2,255
   196a4:	d0a81d44 	addi	r2,gp,-24459
   196a8:	2085883a 	add	r2,r4,r2
   196ac:	10800003 	ldbu	r2,0(r2)
   196b0:	1009883a 	mov	r4,r2
   196b4:	e0bff817 	ldw	r2,-32(fp)
   196b8:	10800d43 	ldbu	r2,53(r2)
   196bc:	0084303a 	nor	r2,zero,r2
   196c0:	2084703a 	and	r2,r4,r2
   196c4:	1009883a 	mov	r4,r2
   196c8:	d0a81d44 	addi	r2,gp,-24459
   196cc:	1885883a 	add	r2,r3,r2
   196d0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   196d4:	e0bff817 	ldw	r2,-32(fp)
   196d8:	10800d03 	ldbu	r2,52(r2)
   196dc:	10c03fcc 	andi	r3,r2,255
   196e0:	d0a81d44 	addi	r2,gp,-24459
   196e4:	1885883a 	add	r2,r3,r2
   196e8:	10800003 	ldbu	r2,0(r2)
   196ec:	10803fcc 	andi	r2,r2,255
   196f0:	1000071e 	bne	r2,zero,19710 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   196f4:	e0bff817 	ldw	r2,-32(fp)
   196f8:	10800d83 	ldbu	r2,54(r2)
   196fc:	0084303a 	nor	r2,zero,r2
   19700:	1007883a 	mov	r3,r2
   19704:	d0a81d03 	ldbu	r2,-24460(gp)
   19708:	1884703a 	and	r2,r3,r2
   1970c:	d0a81d05 	stb	r2,-24460(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   19710:	e0bff817 	ldw	r2,-32(fp)
   19714:	10800717 	ldw	r2,28(r2)
   19718:	10000526 	beq	r2,zero,19730 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   1971c:	e0bff817 	ldw	r2,-32(fp)
   19720:	10800717 	ldw	r2,28(r2)
   19724:	100b883a 	mov	r5,r2
   19728:	e13ff817 	ldw	r4,-32(fp)
   1972c:	00144780 	call	14478 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   19730:	e0bff817 	ldw	r2,-32(fp)
   19734:	10800817 	ldw	r2,32(r2)
   19738:	10000526 	beq	r2,zero,19750 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   1973c:	e0bff817 	ldw	r2,-32(fp)
   19740:	10800817 	ldw	r2,32(r2)
   19744:	100b883a 	mov	r5,r2
   19748:	e13ff817 	ldw	r4,-32(fp)
   1974c:	00145300 	call	14530 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   19750:	e0bff817 	ldw	r2,-32(fp)
   19754:	10800a17 	ldw	r2,40(r2)
   19758:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   1975c:	e0bffb17 	ldw	r2,-20(fp)
   19760:	10000226 	beq	r2,zero,1976c <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   19764:	e13ffb17 	ldw	r4,-20(fp)
   19768:	00169b00 	call	169b0 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   1976c:	e0bff817 	ldw	r2,-32(fp)
   19770:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   19774:	e0bff817 	ldw	r2,-32(fp)
   19778:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   1977c:	e0bff817 	ldw	r2,-32(fp)
   19780:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   19784:	d0a81103 	ldbu	r2,-24508(gp)
   19788:	10803fcc 	andi	r2,r2,255
   1978c:	10803fe0 	cmpeqi	r2,r2,255
   19790:	1000031e 	bne	r2,zero,197a0 <OSTaskDel+0x214>
        OSLockNesting++;
   19794:	d0a81103 	ldbu	r2,-24508(gp)
   19798:	10800044 	addi	r2,r2,1
   1979c:	d0a81105 	stb	r2,-24508(gp)
   197a0:	e0bff617 	ldw	r2,-40(fp)
   197a4:	e0bffd15 	stw	r2,-12(fp)
   197a8:	e0bffd17 	ldw	r2,-12(fp)
   197ac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   197b0:	00140600 	call	14060 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   197b4:	0005303a 	rdctl	r2,status
   197b8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   197bc:	e0fffa17 	ldw	r3,-24(fp)
   197c0:	00bfff84 	movi	r2,-2
   197c4:	1884703a 	and	r2,r3,r2
   197c8:	1001703a 	wrctl	status,r2
  
  return context;
   197cc:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   197d0:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   197d4:	d0a81103 	ldbu	r2,-24508(gp)
   197d8:	10803fcc 	andi	r2,r2,255
   197dc:	10000326 	beq	r2,zero,197ec <OSTaskDel+0x260>
        OSLockNesting--;
   197e0:	d0a81103 	ldbu	r2,-24508(gp)
   197e4:	10bfffc4 	addi	r2,r2,-1
   197e8:	d0a81105 	stb	r2,-24508(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   197ec:	e13ff817 	ldw	r4,-32(fp)
   197f0:	001e0f40 	call	1e0f4 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   197f4:	d0a81943 	ldbu	r2,-24475(gp)
   197f8:	10bfffc4 	addi	r2,r2,-1
   197fc:	d0a81945 	stb	r2,-24475(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   19800:	e0ffff03 	ldbu	r3,-4(fp)
   19804:	008000f4 	movhi	r2,3
   19808:	10829304 	addi	r2,r2,2636
   1980c:	18c7883a 	add	r3,r3,r3
   19810:	18c7883a 	add	r3,r3,r3
   19814:	10c5883a 	add	r2,r2,r3
   19818:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   1981c:	e0bff817 	ldw	r2,-32(fp)
   19820:	10800617 	ldw	r2,24(r2)
   19824:	1000071e 	bne	r2,zero,19844 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   19828:	e0bff817 	ldw	r2,-32(fp)
   1982c:	10800517 	ldw	r2,20(r2)
   19830:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   19834:	e0bff817 	ldw	r2,-32(fp)
   19838:	10800517 	ldw	r2,20(r2)
   1983c:	d0a81415 	stw	r2,-24496(gp)
   19840:	00000a06 	br	1986c <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   19844:	e0bff817 	ldw	r2,-32(fp)
   19848:	10800617 	ldw	r2,24(r2)
   1984c:	e0fff817 	ldw	r3,-32(fp)
   19850:	18c00517 	ldw	r3,20(r3)
   19854:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   19858:	e0bff817 	ldw	r2,-32(fp)
   1985c:	10800517 	ldw	r2,20(r2)
   19860:	e0fff817 	ldw	r3,-32(fp)
   19864:	18c00617 	ldw	r3,24(r3)
   19868:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   1986c:	d0e81817 	ldw	r3,-24480(gp)
   19870:	e0bff817 	ldw	r2,-32(fp)
   19874:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   19878:	e0bff817 	ldw	r2,-32(fp)
   1987c:	d0a81815 	stw	r2,-24480(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   19880:	e0bff817 	ldw	r2,-32(fp)
   19884:	00c00fc4 	movi	r3,63
   19888:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   1988c:	e0bff817 	ldw	r2,-32(fp)
   19890:	10001345 	stb	zero,77(r2)
   19894:	e0bff617 	ldw	r2,-40(fp)
   19898:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1989c:	e0bffc17 	ldw	r2,-16(fp)
   198a0:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   198a4:	d0a81143 	ldbu	r2,-24507(gp)
   198a8:	10803fcc 	andi	r2,r2,255
   198ac:	10800058 	cmpnei	r2,r2,1
   198b0:	1000011e 	bne	r2,zero,198b8 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
   198b4:	0014acc0 	call	14acc <OS_Sched>
    }
    return (OS_ERR_NONE);
   198b8:	0005883a 	mov	r2,zero
}
   198bc:	e037883a 	mov	sp,fp
   198c0:	dfc00117 	ldw	ra,4(sp)
   198c4:	df000017 	ldw	fp,0(sp)
   198c8:	dec00204 	addi	sp,sp,8
   198cc:	f800283a 	ret

000198d0 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   198d0:	defff504 	addi	sp,sp,-44
   198d4:	df000a15 	stw	fp,40(sp)
   198d8:	df000a04 	addi	fp,sp,40
   198dc:	2005883a 	mov	r2,r4
   198e0:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   198e4:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   198e8:	e0bfff03 	ldbu	r2,-4(fp)
   198ec:	10800518 	cmpnei	r2,r2,20
   198f0:	1000021e 	bne	r2,zero,198fc <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   198f4:	00800f84 	movi	r2,62
   198f8:	00004506 	br	19a10 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   198fc:	e0bfff03 	ldbu	r2,-4(fp)
   19900:	10800530 	cmpltui	r2,r2,20
   19904:	1000051e 	bne	r2,zero,1991c <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   19908:	e0bfff03 	ldbu	r2,-4(fp)
   1990c:	10803fe0 	cmpeqi	r2,r2,255
   19910:	1000021e 	bne	r2,zero,1991c <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   19914:	00800a84 	movi	r2,42
   19918:	00003d06 	br	19a10 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   1991c:	e0bfff03 	ldbu	r2,-4(fp)
   19920:	10803fd8 	cmpnei	r2,r2,255
   19924:	1000111e 	bne	r2,zero,1996c <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19928:	0005303a 	rdctl	r2,status
   1992c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19930:	e0fff917 	ldw	r3,-28(fp)
   19934:	00bfff84 	movi	r2,-2
   19938:	1884703a 	and	r2,r3,r2
   1993c:	1001703a 	wrctl	status,r2
  
  return context;
   19940:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   19944:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   19948:	d0a82017 	ldw	r2,-24448(gp)
   1994c:	10800dc3 	ldbu	r2,55(r2)
   19950:	e0bff805 	stb	r2,-32(fp)
   19954:	e0bff617 	ldw	r2,-40(fp)
   19958:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1995c:	e0bffe17 	ldw	r2,-8(fp)
   19960:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   19964:	e0bff803 	ldbu	r2,-32(fp)
   19968:	00002906 	br	19a10 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1996c:	0005303a 	rdctl	r2,status
   19970:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19974:	e0fff717 	ldw	r3,-36(fp)
   19978:	00bfff84 	movi	r2,-2
   1997c:	1884703a 	and	r2,r3,r2
   19980:	1001703a 	wrctl	status,r2
  
  return context;
   19984:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   19988:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   1998c:	e0ffff03 	ldbu	r3,-4(fp)
   19990:	008000f4 	movhi	r2,3
   19994:	10829304 	addi	r2,r2,2636
   19998:	18c7883a 	add	r3,r3,r3
   1999c:	18c7883a 	add	r3,r3,r3
   199a0:	10c5883a 	add	r2,r2,r3
   199a4:	10800017 	ldw	r2,0(r2)
   199a8:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   199ac:	e0bffb17 	ldw	r2,-20(fp)
   199b0:	1000061e 	bne	r2,zero,199cc <OSTaskDelReq+0xfc>
   199b4:	e0bff617 	ldw	r2,-40(fp)
   199b8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   199bc:	e0bffa17 	ldw	r2,-24(fp)
   199c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   199c4:	008010c4 	movi	r2,67
   199c8:	00001106 	br	19a10 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   199cc:	e0bffb17 	ldw	r2,-20(fp)
   199d0:	10800058 	cmpnei	r2,r2,1
   199d4:	1000061e 	bne	r2,zero,199f0 <OSTaskDelReq+0x120>
   199d8:	e0bff617 	ldw	r2,-40(fp)
   199dc:	e0bffc15 	stw	r2,-16(fp)
   199e0:	e0bffc17 	ldw	r2,-16(fp)
   199e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   199e8:	00800f44 	movi	r2,61
   199ec:	00000806 	br	19a10 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   199f0:	e0bffb17 	ldw	r2,-20(fp)
   199f4:	00c00fc4 	movi	r3,63
   199f8:	10c00dc5 	stb	r3,55(r2)
   199fc:	e0bff617 	ldw	r2,-40(fp)
   19a00:	e0bffd15 	stw	r2,-12(fp)
   19a04:	e0bffd17 	ldw	r2,-12(fp)
   19a08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   19a0c:	0005883a 	mov	r2,zero
}
   19a10:	e037883a 	mov	sp,fp
   19a14:	df000017 	ldw	fp,0(sp)
   19a18:	dec00104 	addi	sp,sp,4
   19a1c:	f800283a 	ret

00019a20 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   19a20:	defff404 	addi	sp,sp,-48
   19a24:	dfc00b15 	stw	ra,44(sp)
   19a28:	df000a15 	stw	fp,40(sp)
   19a2c:	df000a04 	addi	fp,sp,40
   19a30:	2005883a 	mov	r2,r4
   19a34:	e17ffe15 	stw	r5,-8(fp)
   19a38:	e1bfff15 	stw	r6,-4(fp)
   19a3c:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   19a40:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   19a44:	e0bfff17 	ldw	r2,-4(fp)
   19a48:	1000021e 	bne	r2,zero,19a54 <OSTaskNameGet+0x34>
        return (0);
   19a4c:	0005883a 	mov	r2,zero
   19a50:	00005406 	br	19ba4 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   19a54:	e0bffd03 	ldbu	r2,-12(fp)
   19a58:	10800570 	cmpltui	r2,r2,21
   19a5c:	1000081e 	bne	r2,zero,19a80 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   19a60:	e0bffd03 	ldbu	r2,-12(fp)
   19a64:	10803fe0 	cmpeqi	r2,r2,255
   19a68:	1000051e 	bne	r2,zero,19a80 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   19a6c:	e0bfff17 	ldw	r2,-4(fp)
   19a70:	00c00a84 	movi	r3,42
   19a74:	10c00005 	stb	r3,0(r2)
            return (0);
   19a78:	0005883a 	mov	r2,zero
   19a7c:	00004906 	br	19ba4 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   19a80:	e0bffe17 	ldw	r2,-8(fp)
   19a84:	1000051e 	bne	r2,zero,19a9c <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   19a88:	e0bfff17 	ldw	r2,-4(fp)
   19a8c:	00c00304 	movi	r3,12
   19a90:	10c00005 	stb	r3,0(r2)
        return (0);
   19a94:	0005883a 	mov	r2,zero
   19a98:	00004206 	br	19ba4 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   19a9c:	d0a81f03 	ldbu	r2,-24452(gp)
   19aa0:	10803fcc 	andi	r2,r2,255
   19aa4:	10000526 	beq	r2,zero,19abc <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
   19aa8:	e0bfff17 	ldw	r2,-4(fp)
   19aac:	00c00444 	movi	r3,17
   19ab0:	10c00005 	stb	r3,0(r2)
        return (0);
   19ab4:	0005883a 	mov	r2,zero
   19ab8:	00003a06 	br	19ba4 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19abc:	0005303a 	rdctl	r2,status
   19ac0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19ac4:	e0fffc17 	ldw	r3,-16(fp)
   19ac8:	00bfff84 	movi	r2,-2
   19acc:	1884703a 	and	r2,r3,r2
   19ad0:	1001703a 	wrctl	status,r2
  
  return context;
   19ad4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   19ad8:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   19adc:	e0bffd03 	ldbu	r2,-12(fp)
   19ae0:	10803fd8 	cmpnei	r2,r2,255
   19ae4:	1000031e 	bne	r2,zero,19af4 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   19ae8:	d0a82017 	ldw	r2,-24448(gp)
   19aec:	10800c83 	ldbu	r2,50(r2)
   19af0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   19af4:	e0fffd03 	ldbu	r3,-12(fp)
   19af8:	008000f4 	movhi	r2,3
   19afc:	10829304 	addi	r2,r2,2636
   19b00:	18c7883a 	add	r3,r3,r3
   19b04:	18c7883a 	add	r3,r3,r3
   19b08:	10c5883a 	add	r2,r2,r3
   19b0c:	10800017 	ldw	r2,0(r2)
   19b10:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   19b14:	e0bff817 	ldw	r2,-32(fp)
   19b18:	1000091e 	bne	r2,zero,19b40 <OSTaskNameGet+0x120>
   19b1c:	e0bff617 	ldw	r2,-40(fp)
   19b20:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19b24:	e0bff717 	ldw	r2,-36(fp)
   19b28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   19b2c:	e0bfff17 	ldw	r2,-4(fp)
   19b30:	00c010c4 	movi	r3,67
   19b34:	10c00005 	stb	r3,0(r2)
        return (0);
   19b38:	0005883a 	mov	r2,zero
   19b3c:	00001906 	br	19ba4 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   19b40:	e0bff817 	ldw	r2,-32(fp)
   19b44:	10800058 	cmpnei	r2,r2,1
   19b48:	1000091e 	bne	r2,zero,19b70 <OSTaskNameGet+0x150>
   19b4c:	e0bff617 	ldw	r2,-40(fp)
   19b50:	e0bff915 	stw	r2,-28(fp)
   19b54:	e0bff917 	ldw	r2,-28(fp)
   19b58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   19b5c:	e0bfff17 	ldw	r2,-4(fp)
   19b60:	00c010c4 	movi	r3,67
   19b64:	10c00005 	stb	r3,0(r2)
        return (0);
   19b68:	0005883a 	mov	r2,zero
   19b6c:	00000d06 	br	19ba4 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   19b70:	e0bff817 	ldw	r2,-32(fp)
   19b74:	10801304 	addi	r2,r2,76
   19b78:	100b883a 	mov	r5,r2
   19b7c:	e13ffe17 	ldw	r4,-8(fp)
   19b80:	0014c100 	call	14c10 <OS_StrCopy>
   19b84:	e0bffb05 	stb	r2,-20(fp)
   19b88:	e0bff617 	ldw	r2,-40(fp)
   19b8c:	e0bffa15 	stw	r2,-24(fp)
   19b90:	e0bffa17 	ldw	r2,-24(fp)
   19b94:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   19b98:	e0bfff17 	ldw	r2,-4(fp)
   19b9c:	10000005 	stb	zero,0(r2)
    return (len);
   19ba0:	e0bffb03 	ldbu	r2,-20(fp)
}
   19ba4:	e037883a 	mov	sp,fp
   19ba8:	dfc00117 	ldw	ra,4(sp)
   19bac:	df000017 	ldw	fp,0(sp)
   19bb0:	dec00204 	addi	sp,sp,8
   19bb4:	f800283a 	ret

00019bb8 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   19bb8:	defff304 	addi	sp,sp,-52
   19bbc:	dfc00c15 	stw	ra,48(sp)
   19bc0:	df000b15 	stw	fp,44(sp)
   19bc4:	df000b04 	addi	fp,sp,44
   19bc8:	2005883a 	mov	r2,r4
   19bcc:	e17ffe15 	stw	r5,-8(fp)
   19bd0:	e1bfff15 	stw	r6,-4(fp)
   19bd4:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   19bd8:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   19bdc:	e0bfff17 	ldw	r2,-4(fp)
   19be0:	10005c26 	beq	r2,zero,19d54 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   19be4:	e0bffd03 	ldbu	r2,-12(fp)
   19be8:	10800570 	cmpltui	r2,r2,21
   19bec:	1000071e 	bne	r2,zero,19c0c <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   19bf0:	e0bffd03 	ldbu	r2,-12(fp)
   19bf4:	10803fe0 	cmpeqi	r2,r2,255
   19bf8:	1000041e 	bne	r2,zero,19c0c <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   19bfc:	e0bfff17 	ldw	r2,-4(fp)
   19c00:	00c00a84 	movi	r3,42
   19c04:	10c00005 	stb	r3,0(r2)
            return;
   19c08:	00005306 	br	19d58 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   19c0c:	e0bffe17 	ldw	r2,-8(fp)
   19c10:	1000041e 	bne	r2,zero,19c24 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   19c14:	e0bfff17 	ldw	r2,-4(fp)
   19c18:	00c00304 	movi	r3,12
   19c1c:	10c00005 	stb	r3,0(r2)
        return;
   19c20:	00004d06 	br	19d58 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   19c24:	d0a81f03 	ldbu	r2,-24452(gp)
   19c28:	10803fcc 	andi	r2,r2,255
   19c2c:	10000426 	beq	r2,zero,19c40 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
   19c30:	e0bfff17 	ldw	r2,-4(fp)
   19c34:	00c00484 	movi	r3,18
   19c38:	10c00005 	stb	r3,0(r2)
        return;
   19c3c:	00004606 	br	19d58 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19c40:	0005303a 	rdctl	r2,status
   19c44:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19c48:	e0fffc17 	ldw	r3,-16(fp)
   19c4c:	00bfff84 	movi	r2,-2
   19c50:	1884703a 	and	r2,r3,r2
   19c54:	1001703a 	wrctl	status,r2
  
  return context;
   19c58:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   19c5c:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   19c60:	e0bffd03 	ldbu	r2,-12(fp)
   19c64:	10803fd8 	cmpnei	r2,r2,255
   19c68:	1000031e 	bne	r2,zero,19c78 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
   19c6c:	d0a82017 	ldw	r2,-24448(gp)
   19c70:	10800c83 	ldbu	r2,50(r2)
   19c74:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   19c78:	e0fffd03 	ldbu	r3,-12(fp)
   19c7c:	008000f4 	movhi	r2,3
   19c80:	10829304 	addi	r2,r2,2636
   19c84:	18c7883a 	add	r3,r3,r3
   19c88:	18c7883a 	add	r3,r3,r3
   19c8c:	10c5883a 	add	r2,r2,r3
   19c90:	10800017 	ldw	r2,0(r2)
   19c94:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   19c98:	e0bff717 	ldw	r2,-36(fp)
   19c9c:	1000081e 	bne	r2,zero,19cc0 <OSTaskNameSet+0x108>
   19ca0:	e0bff517 	ldw	r2,-44(fp)
   19ca4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19ca8:	e0bff617 	ldw	r2,-40(fp)
   19cac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   19cb0:	e0bfff17 	ldw	r2,-4(fp)
   19cb4:	00c010c4 	movi	r3,67
   19cb8:	10c00005 	stb	r3,0(r2)
        return;
   19cbc:	00002606 	br	19d58 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   19cc0:	e0bff717 	ldw	r2,-36(fp)
   19cc4:	10800058 	cmpnei	r2,r2,1
   19cc8:	1000081e 	bne	r2,zero,19cec <OSTaskNameSet+0x134>
   19ccc:	e0bff517 	ldw	r2,-44(fp)
   19cd0:	e0bff815 	stw	r2,-32(fp)
   19cd4:	e0bff817 	ldw	r2,-32(fp)
   19cd8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   19cdc:	e0bfff17 	ldw	r2,-4(fp)
   19ce0:	00c010c4 	movi	r3,67
   19ce4:	10c00005 	stb	r3,0(r2)
        return;
   19ce8:	00001b06 	br	19d58 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   19cec:	e13ffe17 	ldw	r4,-8(fp)
   19cf0:	0014c840 	call	14c84 <OS_StrLen>
   19cf4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   19cf8:	e0bffa03 	ldbu	r2,-24(fp)
   19cfc:	10800830 	cmpltui	r2,r2,32
   19d00:	1000081e 	bne	r2,zero,19d24 <OSTaskNameSet+0x16c>
   19d04:	e0bff517 	ldw	r2,-44(fp)
   19d08:	e0bff915 	stw	r2,-28(fp)
   19d0c:	e0bff917 	ldw	r2,-28(fp)
   19d10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   19d14:	e0bfff17 	ldw	r2,-4(fp)
   19d18:	00c01044 	movi	r3,65
   19d1c:	10c00005 	stb	r3,0(r2)
        return;
   19d20:	00000d06 	br	19d58 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   19d24:	e0bff717 	ldw	r2,-36(fp)
   19d28:	10801304 	addi	r2,r2,76
   19d2c:	e17ffe17 	ldw	r5,-8(fp)
   19d30:	1009883a 	mov	r4,r2
   19d34:	0014c100 	call	14c10 <OS_StrCopy>
   19d38:	e0bff517 	ldw	r2,-44(fp)
   19d3c:	e0bffb15 	stw	r2,-20(fp)
   19d40:	e0bffb17 	ldw	r2,-20(fp)
   19d44:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   19d48:	e0bfff17 	ldw	r2,-4(fp)
   19d4c:	10000005 	stb	zero,0(r2)
   19d50:	00000106 	br	19d58 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
   19d54:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   19d58:	e037883a 	mov	sp,fp
   19d5c:	dfc00117 	ldw	ra,4(sp)
   19d60:	df000017 	ldw	fp,0(sp)
   19d64:	dec00204 	addi	sp,sp,8
   19d68:	f800283a 	ret

00019d6c <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   19d6c:	defff404 	addi	sp,sp,-48
   19d70:	dfc00b15 	stw	ra,44(sp)
   19d74:	df000a15 	stw	fp,40(sp)
   19d78:	df000a04 	addi	fp,sp,40
   19d7c:	2005883a 	mov	r2,r4
   19d80:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   19d84:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   19d88:	e0bfff03 	ldbu	r2,-4(fp)
   19d8c:	10800530 	cmpltui	r2,r2,20
   19d90:	1000021e 	bne	r2,zero,19d9c <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   19d94:	00800a84 	movi	r2,42
   19d98:	00006406 	br	19f2c <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19d9c:	0005303a 	rdctl	r2,status
   19da0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19da4:	e0fffe17 	ldw	r3,-8(fp)
   19da8:	00bfff84 	movi	r2,-2
   19dac:	1884703a 	and	r2,r3,r2
   19db0:	1001703a 	wrctl	status,r2
  
  return context;
   19db4:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   19db8:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   19dbc:	e0ffff03 	ldbu	r3,-4(fp)
   19dc0:	008000f4 	movhi	r2,3
   19dc4:	10829304 	addi	r2,r2,2636
   19dc8:	18c7883a 	add	r3,r3,r3
   19dcc:	18c7883a 	add	r3,r3,r3
   19dd0:	10c5883a 	add	r2,r2,r3
   19dd4:	10800017 	ldw	r2,0(r2)
   19dd8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   19ddc:	e0bff817 	ldw	r2,-32(fp)
   19de0:	1000061e 	bne	r2,zero,19dfc <OSTaskResume+0x90>
   19de4:	e0bff617 	ldw	r2,-40(fp)
   19de8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19dec:	e0bff717 	ldw	r2,-36(fp)
   19df0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   19df4:	00801184 	movi	r2,70
   19df8:	00004c06 	br	19f2c <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   19dfc:	e0bff817 	ldw	r2,-32(fp)
   19e00:	10800058 	cmpnei	r2,r2,1
   19e04:	1000061e 	bne	r2,zero,19e20 <OSTaskResume+0xb4>
   19e08:	e0bff617 	ldw	r2,-40(fp)
   19e0c:	e0bff915 	stw	r2,-28(fp)
   19e10:	e0bff917 	ldw	r2,-28(fp)
   19e14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   19e18:	008010c4 	movi	r2,67
   19e1c:	00004306 	br	19f2c <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   19e20:	e0bff817 	ldw	r2,-32(fp)
   19e24:	10800c03 	ldbu	r2,48(r2)
   19e28:	10803fcc 	andi	r2,r2,255
   19e2c:	1080020c 	andi	r2,r2,8
   19e30:	10003926 	beq	r2,zero,19f18 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   19e34:	e0bff817 	ldw	r2,-32(fp)
   19e38:	10c00c03 	ldbu	r3,48(r2)
   19e3c:	00bffdc4 	movi	r2,-9
   19e40:	1884703a 	and	r2,r3,r2
   19e44:	1007883a 	mov	r3,r2
   19e48:	e0bff817 	ldw	r2,-32(fp)
   19e4c:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   19e50:	e0bff817 	ldw	r2,-32(fp)
   19e54:	10800c03 	ldbu	r2,48(r2)
   19e58:	10803fcc 	andi	r2,r2,255
   19e5c:	1000281e 	bne	r2,zero,19f00 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
   19e60:	e0bff817 	ldw	r2,-32(fp)
   19e64:	10800b8b 	ldhu	r2,46(r2)
   19e68:	10bfffcc 	andi	r2,r2,65535
   19e6c:	10001f1e 	bne	r2,zero,19eec <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   19e70:	e0bff817 	ldw	r2,-32(fp)
   19e74:	10c00d83 	ldbu	r3,54(r2)
   19e78:	d0a81d03 	ldbu	r2,-24460(gp)
   19e7c:	1884b03a 	or	r2,r3,r2
   19e80:	d0a81d05 	stb	r2,-24460(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   19e84:	e0bff817 	ldw	r2,-32(fp)
   19e88:	10800d03 	ldbu	r2,52(r2)
   19e8c:	10c03fcc 	andi	r3,r2,255
   19e90:	e0bff817 	ldw	r2,-32(fp)
   19e94:	10800d03 	ldbu	r2,52(r2)
   19e98:	11003fcc 	andi	r4,r2,255
   19e9c:	d0a81d44 	addi	r2,gp,-24459
   19ea0:	2085883a 	add	r2,r4,r2
   19ea4:	11000003 	ldbu	r4,0(r2)
   19ea8:	e0bff817 	ldw	r2,-32(fp)
   19eac:	10800d43 	ldbu	r2,53(r2)
   19eb0:	2084b03a 	or	r2,r4,r2
   19eb4:	1009883a 	mov	r4,r2
   19eb8:	d0a81d44 	addi	r2,gp,-24459
   19ebc:	1885883a 	add	r2,r3,r2
   19ec0:	11000005 	stb	r4,0(r2)
   19ec4:	e0bff617 	ldw	r2,-40(fp)
   19ec8:	e0bffa15 	stw	r2,-24(fp)
   19ecc:	e0bffa17 	ldw	r2,-24(fp)
   19ed0:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   19ed4:	d0a81143 	ldbu	r2,-24507(gp)
   19ed8:	10803fcc 	andi	r2,r2,255
   19edc:	10800058 	cmpnei	r2,r2,1
   19ee0:	10000b1e 	bne	r2,zero,19f10 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
   19ee4:	0014acc0 	call	14acc <OS_Sched>
   19ee8:	00000906 	br	19f10 <OSTaskResume+0x1a4>
   19eec:	e0bff617 	ldw	r2,-40(fp)
   19ef0:	e0bffb15 	stw	r2,-20(fp)
   19ef4:	e0bffb17 	ldw	r2,-20(fp)
   19ef8:	1001703a 	wrctl	status,r2
   19efc:	00000406 	br	19f10 <OSTaskResume+0x1a4>
   19f00:	e0bff617 	ldw	r2,-40(fp)
   19f04:	e0bffc15 	stw	r2,-16(fp)
   19f08:	e0bffc17 	ldw	r2,-16(fp)
   19f0c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   19f10:	0005883a 	mov	r2,zero
   19f14:	00000506 	br	19f2c <OSTaskResume+0x1c0>
   19f18:	e0bff617 	ldw	r2,-40(fp)
   19f1c:	e0bffd15 	stw	r2,-12(fp)
   19f20:	e0bffd17 	ldw	r2,-12(fp)
   19f24:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   19f28:	00801104 	movi	r2,68
}
   19f2c:	e037883a 	mov	sp,fp
   19f30:	dfc00117 	ldw	ra,4(sp)
   19f34:	df000017 	ldw	fp,0(sp)
   19f38:	dec00204 	addi	sp,sp,8
   19f3c:	f800283a 	ret

00019f40 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   19f40:	defff304 	addi	sp,sp,-52
   19f44:	df000c15 	stw	fp,48(sp)
   19f48:	df000c04 	addi	fp,sp,48
   19f4c:	2005883a 	mov	r2,r4
   19f50:	e17fff15 	stw	r5,-4(fp)
   19f54:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   19f58:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   19f5c:	e0bffe03 	ldbu	r2,-8(fp)
   19f60:	10800570 	cmpltui	r2,r2,21
   19f64:	1000051e 	bne	r2,zero,19f7c <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   19f68:	e0bffe03 	ldbu	r2,-8(fp)
   19f6c:	10803fe0 	cmpeqi	r2,r2,255
   19f70:	1000021e 	bne	r2,zero,19f7c <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   19f74:	00800a84 	movi	r2,42
   19f78:	00005d06 	br	1a0f0 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   19f7c:	e0bfff17 	ldw	r2,-4(fp)
   19f80:	1000021e 	bne	r2,zero,19f8c <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   19f84:	00800244 	movi	r2,9
   19f88:	00005906 	br	1a0f0 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   19f8c:	e0bfff17 	ldw	r2,-4(fp)
   19f90:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   19f94:	e0bfff17 	ldw	r2,-4(fp)
   19f98:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19f9c:	0005303a 	rdctl	r2,status
   19fa0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19fa4:	e0fffd17 	ldw	r3,-12(fp)
   19fa8:	00bfff84 	movi	r2,-2
   19fac:	1884703a 	and	r2,r3,r2
   19fb0:	1001703a 	wrctl	status,r2
  
  return context;
   19fb4:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
   19fb8:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   19fbc:	e0bffe03 	ldbu	r2,-8(fp)
   19fc0:	10803fd8 	cmpnei	r2,r2,255
   19fc4:	1000031e 	bne	r2,zero,19fd4 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
   19fc8:	d0a82017 	ldw	r2,-24448(gp)
   19fcc:	10800c83 	ldbu	r2,50(r2)
   19fd0:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   19fd4:	e0fffe03 	ldbu	r3,-8(fp)
   19fd8:	008000f4 	movhi	r2,3
   19fdc:	10829304 	addi	r2,r2,2636
   19fe0:	18c7883a 	add	r3,r3,r3
   19fe4:	18c7883a 	add	r3,r3,r3
   19fe8:	10c5883a 	add	r2,r2,r3
   19fec:	10800017 	ldw	r2,0(r2)
   19ff0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   19ff4:	e0bff817 	ldw	r2,-32(fp)
   19ff8:	1000061e 	bne	r2,zero,1a014 <OSTaskStkChk+0xd4>
   19ffc:	e0bff617 	ldw	r2,-40(fp)
   1a000:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a004:	e0bff717 	ldw	r2,-36(fp)
   1a008:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1a00c:	008010c4 	movi	r2,67
   1a010:	00003706 	br	1a0f0 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1a014:	e0bff817 	ldw	r2,-32(fp)
   1a018:	10800058 	cmpnei	r2,r2,1
   1a01c:	1000061e 	bne	r2,zero,1a038 <OSTaskStkChk+0xf8>
   1a020:	e0bff617 	ldw	r2,-40(fp)
   1a024:	e0bff915 	stw	r2,-28(fp)
   1a028:	e0bff917 	ldw	r2,-28(fp)
   1a02c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1a030:	008010c4 	movi	r2,67
   1a034:	00002e06 	br	1a0f0 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   1a038:	e0bff817 	ldw	r2,-32(fp)
   1a03c:	1080040b 	ldhu	r2,16(r2)
   1a040:	10bfffcc 	andi	r2,r2,65535
   1a044:	1080004c 	andi	r2,r2,1
   1a048:	1000061e 	bne	r2,zero,1a064 <OSTaskStkChk+0x124>
   1a04c:	e0bff617 	ldw	r2,-40(fp)
   1a050:	e0bffa15 	stw	r2,-24(fp)
   1a054:	e0bffa17 	ldw	r2,-24(fp)
   1a058:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   1a05c:	00801144 	movi	r2,69
   1a060:	00002306 	br	1a0f0 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
   1a064:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   1a068:	e0bff817 	ldw	r2,-32(fp)
   1a06c:	10800317 	ldw	r2,12(r2)
   1a070:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
   1a074:	e0bff817 	ldw	r2,-32(fp)
   1a078:	10800217 	ldw	r2,8(r2)
   1a07c:	e0bff415 	stw	r2,-48(fp)
   1a080:	e0bff617 	ldw	r2,-40(fp)
   1a084:	e0bffb15 	stw	r2,-20(fp)
   1a088:	e0bffb17 	ldw	r2,-20(fp)
   1a08c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1a090:	00000306 	br	1a0a0 <OSTaskStkChk+0x160>
        nfree++;
   1a094:	e0bff517 	ldw	r2,-44(fp)
   1a098:	10800044 	addi	r2,r2,1
   1a09c:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1a0a0:	e0bff417 	ldw	r2,-48(fp)
   1a0a4:	10c00104 	addi	r3,r2,4
   1a0a8:	e0fff415 	stw	r3,-48(fp)
   1a0ac:	10800017 	ldw	r2,0(r2)
   1a0b0:	103ff826 	beq	r2,zero,1a094 <OSTaskStkChk+0x154>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   1a0b4:	e0bff517 	ldw	r2,-44(fp)
   1a0b8:	1085883a 	add	r2,r2,r2
   1a0bc:	1085883a 	add	r2,r2,r2
   1a0c0:	1007883a 	mov	r3,r2
   1a0c4:	e0bfff17 	ldw	r2,-4(fp)
   1a0c8:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   1a0cc:	e0fffc17 	ldw	r3,-16(fp)
   1a0d0:	e0bff517 	ldw	r2,-44(fp)
   1a0d4:	1885c83a 	sub	r2,r3,r2
   1a0d8:	1085883a 	add	r2,r2,r2
   1a0dc:	1085883a 	add	r2,r2,r2
   1a0e0:	1007883a 	mov	r3,r2
   1a0e4:	e0bfff17 	ldw	r2,-4(fp)
   1a0e8:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   1a0ec:	0005883a 	mov	r2,zero
}
   1a0f0:	e037883a 	mov	sp,fp
   1a0f4:	df000017 	ldw	fp,0(sp)
   1a0f8:	dec00104 	addi	sp,sp,4
   1a0fc:	f800283a 	ret

0001a100 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   1a100:	defff504 	addi	sp,sp,-44
   1a104:	dfc00a15 	stw	ra,40(sp)
   1a108:	df000915 	stw	fp,36(sp)
   1a10c:	df000904 	addi	fp,sp,36
   1a110:	2005883a 	mov	r2,r4
   1a114:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1a118:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   1a11c:	e0bfff03 	ldbu	r2,-4(fp)
   1a120:	10800518 	cmpnei	r2,r2,20
   1a124:	1000021e 	bne	r2,zero,1a130 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   1a128:	008011c4 	movi	r2,71
   1a12c:	00006806 	br	1a2d0 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1a130:	e0bfff03 	ldbu	r2,-4(fp)
   1a134:	10800530 	cmpltui	r2,r2,20
   1a138:	1000051e 	bne	r2,zero,1a150 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   1a13c:	e0bfff03 	ldbu	r2,-4(fp)
   1a140:	10803fe0 	cmpeqi	r2,r2,255
   1a144:	1000021e 	bne	r2,zero,1a150 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   1a148:	00800a84 	movi	r2,42
   1a14c:	00006006 	br	1a2d0 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a150:	0005303a 	rdctl	r2,status
   1a154:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a158:	e0fffe17 	ldw	r3,-8(fp)
   1a15c:	00bfff84 	movi	r2,-2
   1a160:	1884703a 	and	r2,r3,r2
   1a164:	1001703a 	wrctl	status,r2
  
  return context;
   1a168:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   1a16c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   1a170:	e0bfff03 	ldbu	r2,-4(fp)
   1a174:	10803fd8 	cmpnei	r2,r2,255
   1a178:	1000061e 	bne	r2,zero,1a194 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
   1a17c:	d0a82017 	ldw	r2,-24448(gp)
   1a180:	10800c83 	ldbu	r2,50(r2)
   1a184:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   1a188:	00800044 	movi	r2,1
   1a18c:	e0bff705 	stb	r2,-36(fp)
   1a190:	00000906 	br	1a1b8 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   1a194:	d0a82017 	ldw	r2,-24448(gp)
   1a198:	10800c83 	ldbu	r2,50(r2)
   1a19c:	10c03fcc 	andi	r3,r2,255
   1a1a0:	e0bfff03 	ldbu	r2,-4(fp)
   1a1a4:	1880031e 	bne	r3,r2,1a1b4 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
   1a1a8:	00800044 	movi	r2,1
   1a1ac:	e0bff705 	stb	r2,-36(fp)
   1a1b0:	00000106 	br	1a1b8 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   1a1b4:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1a1b8:	e0ffff03 	ldbu	r3,-4(fp)
   1a1bc:	008000f4 	movhi	r2,3
   1a1c0:	10829304 	addi	r2,r2,2636
   1a1c4:	18c7883a 	add	r3,r3,r3
   1a1c8:	18c7883a 	add	r3,r3,r3
   1a1cc:	10c5883a 	add	r2,r2,r3
   1a1d0:	10800017 	ldw	r2,0(r2)
   1a1d4:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   1a1d8:	e0bffa17 	ldw	r2,-24(fp)
   1a1dc:	1000061e 	bne	r2,zero,1a1f8 <OSTaskSuspend+0xf8>
   1a1e0:	e0bff817 	ldw	r2,-32(fp)
   1a1e4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a1e8:	e0bff917 	ldw	r2,-28(fp)
   1a1ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   1a1f0:	00801204 	movi	r2,72
   1a1f4:	00003606 	br	1a2d0 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   1a1f8:	e0bffa17 	ldw	r2,-24(fp)
   1a1fc:	10800058 	cmpnei	r2,r2,1
   1a200:	1000061e 	bne	r2,zero,1a21c <OSTaskSuspend+0x11c>
   1a204:	e0bff817 	ldw	r2,-32(fp)
   1a208:	e0bffb15 	stw	r2,-20(fp)
   1a20c:	e0bffb17 	ldw	r2,-20(fp)
   1a210:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1a214:	008010c4 	movi	r2,67
   1a218:	00002d06 	br	1a2d0 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
   1a21c:	e0bffa17 	ldw	r2,-24(fp)
   1a220:	10800d03 	ldbu	r2,52(r2)
   1a224:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   1a228:	e0fffd03 	ldbu	r3,-12(fp)
   1a22c:	e13ffd03 	ldbu	r4,-12(fp)
   1a230:	d0a81d44 	addi	r2,gp,-24459
   1a234:	2085883a 	add	r2,r4,r2
   1a238:	10800003 	ldbu	r2,0(r2)
   1a23c:	1009883a 	mov	r4,r2
   1a240:	e0bffa17 	ldw	r2,-24(fp)
   1a244:	10800d43 	ldbu	r2,53(r2)
   1a248:	0084303a 	nor	r2,zero,r2
   1a24c:	2084703a 	and	r2,r4,r2
   1a250:	1009883a 	mov	r4,r2
   1a254:	d0a81d44 	addi	r2,gp,-24459
   1a258:	1885883a 	add	r2,r3,r2
   1a25c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   1a260:	e0fffd03 	ldbu	r3,-12(fp)
   1a264:	d0a81d44 	addi	r2,gp,-24459
   1a268:	1885883a 	add	r2,r3,r2
   1a26c:	10800003 	ldbu	r2,0(r2)
   1a270:	10803fcc 	andi	r2,r2,255
   1a274:	1000071e 	bne	r2,zero,1a294 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   1a278:	e0bffa17 	ldw	r2,-24(fp)
   1a27c:	10800d83 	ldbu	r2,54(r2)
   1a280:	0084303a 	nor	r2,zero,r2
   1a284:	1007883a 	mov	r3,r2
   1a288:	d0a81d03 	ldbu	r2,-24460(gp)
   1a28c:	1884703a 	and	r2,r3,r2
   1a290:	d0a81d05 	stb	r2,-24460(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   1a294:	e0bffa17 	ldw	r2,-24(fp)
   1a298:	10800c03 	ldbu	r2,48(r2)
   1a29c:	10800214 	ori	r2,r2,8
   1a2a0:	1007883a 	mov	r3,r2
   1a2a4:	e0bffa17 	ldw	r2,-24(fp)
   1a2a8:	10c00c05 	stb	r3,48(r2)
   1a2ac:	e0bff817 	ldw	r2,-32(fp)
   1a2b0:	e0bffc15 	stw	r2,-16(fp)
   1a2b4:	e0bffc17 	ldw	r2,-16(fp)
   1a2b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   1a2bc:	e0bff703 	ldbu	r2,-36(fp)
   1a2c0:	10800058 	cmpnei	r2,r2,1
   1a2c4:	1000011e 	bne	r2,zero,1a2cc <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
   1a2c8:	0014acc0 	call	14acc <OS_Sched>
    }
    return (OS_ERR_NONE);
   1a2cc:	0005883a 	mov	r2,zero
}
   1a2d0:	e037883a 	mov	sp,fp
   1a2d4:	dfc00117 	ldw	ra,4(sp)
   1a2d8:	df000017 	ldw	fp,0(sp)
   1a2dc:	dec00204 	addi	sp,sp,8
   1a2e0:	f800283a 	ret

0001a2e4 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   1a2e4:	defff604 	addi	sp,sp,-40
   1a2e8:	dfc00915 	stw	ra,36(sp)
   1a2ec:	df000815 	stw	fp,32(sp)
   1a2f0:	df000804 	addi	fp,sp,32
   1a2f4:	2005883a 	mov	r2,r4
   1a2f8:	e17fff15 	stw	r5,-4(fp)
   1a2fc:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1a300:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   1a304:	e0bffe03 	ldbu	r2,-8(fp)
   1a308:	10800570 	cmpltui	r2,r2,21
   1a30c:	1000051e 	bne	r2,zero,1a324 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   1a310:	e0bffe03 	ldbu	r2,-8(fp)
   1a314:	10803fe0 	cmpeqi	r2,r2,255
   1a318:	1000021e 	bne	r2,zero,1a324 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   1a31c:	00800a84 	movi	r2,42
   1a320:	00003406 	br	1a3f4 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   1a324:	e0bfff17 	ldw	r2,-4(fp)
   1a328:	1000021e 	bne	r2,zero,1a334 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   1a32c:	00800244 	movi	r2,9
   1a330:	00003006 	br	1a3f4 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a334:	0005303a 	rdctl	r2,status
   1a338:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a33c:	e0fffd17 	ldw	r3,-12(fp)
   1a340:	00bfff84 	movi	r2,-2
   1a344:	1884703a 	and	r2,r3,r2
   1a348:	1001703a 	wrctl	status,r2
  
  return context;
   1a34c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1a350:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   1a354:	e0bffe03 	ldbu	r2,-8(fp)
   1a358:	10803fd8 	cmpnei	r2,r2,255
   1a35c:	1000031e 	bne	r2,zero,1a36c <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
   1a360:	d0a82017 	ldw	r2,-24448(gp)
   1a364:	10800c83 	ldbu	r2,50(r2)
   1a368:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1a36c:	e0fffe03 	ldbu	r3,-8(fp)
   1a370:	008000f4 	movhi	r2,3
   1a374:	10829304 	addi	r2,r2,2636
   1a378:	18c7883a 	add	r3,r3,r3
   1a37c:	18c7883a 	add	r3,r3,r3
   1a380:	10c5883a 	add	r2,r2,r3
   1a384:	10800017 	ldw	r2,0(r2)
   1a388:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   1a38c:	e0bffa17 	ldw	r2,-24(fp)
   1a390:	1000061e 	bne	r2,zero,1a3ac <OSTaskQuery+0xc8>
   1a394:	e0bff817 	ldw	r2,-32(fp)
   1a398:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a39c:	e0bff917 	ldw	r2,-28(fp)
   1a3a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   1a3a4:	00800a44 	movi	r2,41
   1a3a8:	00001206 	br	1a3f4 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   1a3ac:	e0bffa17 	ldw	r2,-24(fp)
   1a3b0:	10800058 	cmpnei	r2,r2,1
   1a3b4:	1000061e 	bne	r2,zero,1a3d0 <OSTaskQuery+0xec>
   1a3b8:	e0bff817 	ldw	r2,-32(fp)
   1a3bc:	e0bffb15 	stw	r2,-20(fp)
   1a3c0:	e0bffb17 	ldw	r2,-20(fp)
   1a3c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1a3c8:	008010c4 	movi	r2,67
   1a3cc:	00000906 	br	1a3f4 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   1a3d0:	01801b04 	movi	r6,108
   1a3d4:	e17ffa17 	ldw	r5,-24(fp)
   1a3d8:	e13fff17 	ldw	r4,-4(fp)
   1a3dc:	0014a640 	call	14a64 <OS_MemCopy>
   1a3e0:	e0bff817 	ldw	r2,-32(fp)
   1a3e4:	e0bffc15 	stw	r2,-16(fp)
   1a3e8:	e0bffc17 	ldw	r2,-16(fp)
   1a3ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1a3f0:	0005883a 	mov	r2,zero
}
   1a3f4:	e037883a 	mov	sp,fp
   1a3f8:	dfc00117 	ldw	ra,4(sp)
   1a3fc:	df000017 	ldw	fp,0(sp)
   1a400:	dec00204 	addi	sp,sp,8
   1a404:	f800283a 	ret

0001a408 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   1a408:	defffc04 	addi	sp,sp,-16
   1a40c:	df000315 	stw	fp,12(sp)
   1a410:	df000304 	addi	fp,sp,12
   1a414:	e13ffd15 	stw	r4,-12(fp)
   1a418:	e17ffe15 	stw	r5,-8(fp)
   1a41c:	3005883a 	mov	r2,r6
   1a420:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   1a424:	e0bfff0b 	ldhu	r2,-4(fp)
   1a428:	1080004c 	andi	r2,r2,1
   1a42c:	10000d26 	beq	r2,zero,1a464 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   1a430:	e0bfff0b 	ldhu	r2,-4(fp)
   1a434:	1080008c 	andi	r2,r2,2
   1a438:	10000a26 	beq	r2,zero,1a464 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1a43c:	00000706 	br	1a45c <OS_TaskStkClr+0x54>
                size--;
   1a440:	e0bffe17 	ldw	r2,-8(fp)
   1a444:	10bfffc4 	addi	r2,r2,-1
   1a448:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   1a44c:	e0bffd17 	ldw	r2,-12(fp)
   1a450:	10c00104 	addi	r3,r2,4
   1a454:	e0fffd15 	stw	r3,-12(fp)
   1a458:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1a45c:	e0bffe17 	ldw	r2,-8(fp)
   1a460:	103ff71e 	bne	r2,zero,1a440 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   1a464:	0001883a 	nop
   1a468:	e037883a 	mov	sp,fp
   1a46c:	df000017 	ldw	fp,0(sp)
   1a470:	dec00104 	addi	sp,sp,4
   1a474:	f800283a 	ret

0001a478 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   1a478:	defff904 	addi	sp,sp,-28
   1a47c:	dfc00615 	stw	ra,24(sp)
   1a480:	df000515 	stw	fp,20(sp)
   1a484:	df000504 	addi	fp,sp,20
   1a488:	2005883a 	mov	r2,r4
   1a48c:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1a490:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1a494:	d0a81f03 	ldbu	r2,-24452(gp)
   1a498:	10803fcc 	andi	r2,r2,255
   1a49c:	1000311e 	bne	r2,zero,1a564 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   1a4a0:	e0bfff0b 	ldhu	r2,-4(fp)
   1a4a4:	10003026 	beq	r2,zero,1a568 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a4a8:	0005303a 	rdctl	r2,status
   1a4ac:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a4b0:	e0fffe17 	ldw	r3,-8(fp)
   1a4b4:	00bfff84 	movi	r2,-2
   1a4b8:	1884703a 	and	r2,r3,r2
   1a4bc:	1001703a 	wrctl	status,r2
  
  return context;
   1a4c0:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   1a4c4:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   1a4c8:	d0a82017 	ldw	r2,-24448(gp)
   1a4cc:	10800d03 	ldbu	r2,52(r2)
   1a4d0:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   1a4d4:	e0fffd03 	ldbu	r3,-12(fp)
   1a4d8:	e13ffd03 	ldbu	r4,-12(fp)
   1a4dc:	d0a81d44 	addi	r2,gp,-24459
   1a4e0:	2085883a 	add	r2,r4,r2
   1a4e4:	10800003 	ldbu	r2,0(r2)
   1a4e8:	1009883a 	mov	r4,r2
   1a4ec:	d0a82017 	ldw	r2,-24448(gp)
   1a4f0:	10800d43 	ldbu	r2,53(r2)
   1a4f4:	0084303a 	nor	r2,zero,r2
   1a4f8:	2084703a 	and	r2,r4,r2
   1a4fc:	1009883a 	mov	r4,r2
   1a500:	d0a81d44 	addi	r2,gp,-24459
   1a504:	1885883a 	add	r2,r3,r2
   1a508:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   1a50c:	e0fffd03 	ldbu	r3,-12(fp)
   1a510:	d0a81d44 	addi	r2,gp,-24459
   1a514:	1885883a 	add	r2,r3,r2
   1a518:	10800003 	ldbu	r2,0(r2)
   1a51c:	10803fcc 	andi	r2,r2,255
   1a520:	1000071e 	bne	r2,zero,1a540 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1a524:	d0a82017 	ldw	r2,-24448(gp)
   1a528:	10800d83 	ldbu	r2,54(r2)
   1a52c:	0084303a 	nor	r2,zero,r2
   1a530:	1007883a 	mov	r3,r2
   1a534:	d0a81d03 	ldbu	r2,-24460(gp)
   1a538:	1884703a 	and	r2,r3,r2
   1a53c:	d0a81d05 	stb	r2,-24460(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   1a540:	d0a82017 	ldw	r2,-24448(gp)
   1a544:	e0ffff0b 	ldhu	r3,-4(fp)
   1a548:	10c00b8d 	sth	r3,46(r2)
   1a54c:	e0bffb17 	ldw	r2,-20(fp)
   1a550:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a554:	e0bffc17 	ldw	r2,-16(fp)
   1a558:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   1a55c:	0014acc0 	call	14acc <OS_Sched>
   1a560:	00000106 	br	1a568 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
   1a564:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
   1a568:	e037883a 	mov	sp,fp
   1a56c:	dfc00117 	ldw	ra,4(sp)
   1a570:	df000017 	ldw	fp,0(sp)
   1a574:	dec00204 	addi	sp,sp,8
   1a578:	f800283a 	ret

0001a57c <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   1a57c:	defff804 	addi	sp,sp,-32
   1a580:	dfc00715 	stw	ra,28(sp)
   1a584:	df000615 	stw	fp,24(sp)
   1a588:	df000604 	addi	fp,sp,24
   1a58c:	2015883a 	mov	r10,r4
   1a590:	2809883a 	mov	r4,r5
   1a594:	3007883a 	mov	r3,r6
   1a598:	3805883a 	mov	r2,r7
   1a59c:	e2bffc05 	stb	r10,-16(fp)
   1a5a0:	e13ffd05 	stb	r4,-12(fp)
   1a5a4:	e0fffe05 	stb	r3,-8(fp)
   1a5a8:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1a5ac:	d0a81f03 	ldbu	r2,-24452(gp)
   1a5b0:	10803fcc 	andi	r2,r2,255
   1a5b4:	10000226 	beq	r2,zero,1a5c0 <OSTimeDlyHMSM+0x44>
        return (OS_ERR_TIME_DLY_ISR);
   1a5b8:	00801544 	movi	r2,85
   1a5bc:	00004206 	br	1a6c8 <OSTimeDlyHMSM+0x14c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   1a5c0:	e0bffc03 	ldbu	r2,-16(fp)
   1a5c4:	1000081e 	bne	r2,zero,1a5e8 <OSTimeDlyHMSM+0x6c>
        if (minutes == 0) {
   1a5c8:	e0bffd03 	ldbu	r2,-12(fp)
   1a5cc:	1000061e 	bne	r2,zero,1a5e8 <OSTimeDlyHMSM+0x6c>
            if (seconds == 0) {
   1a5d0:	e0bffe03 	ldbu	r2,-8(fp)
   1a5d4:	1000041e 	bne	r2,zero,1a5e8 <OSTimeDlyHMSM+0x6c>
                if (ms == 0) {
   1a5d8:	e0bfff0b 	ldhu	r2,-4(fp)
   1a5dc:	1000021e 	bne	r2,zero,1a5e8 <OSTimeDlyHMSM+0x6c>
                    return (OS_ERR_TIME_ZERO_DLY);
   1a5e0:	00801504 	movi	r2,84
   1a5e4:	00003806 	br	1a6c8 <OSTimeDlyHMSM+0x14c>
                }
            }
        }
    }
    if (minutes > 59) {
   1a5e8:	e0bffd03 	ldbu	r2,-12(fp)
   1a5ec:	10800f30 	cmpltui	r2,r2,60
   1a5f0:	1000021e 	bne	r2,zero,1a5fc <OSTimeDlyHMSM+0x80>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   1a5f4:	00801444 	movi	r2,81
   1a5f8:	00003306 	br	1a6c8 <OSTimeDlyHMSM+0x14c>
    }
    if (seconds > 59) {
   1a5fc:	e0bffe03 	ldbu	r2,-8(fp)
   1a600:	10800f30 	cmpltui	r2,r2,60
   1a604:	1000021e 	bne	r2,zero,1a610 <OSTimeDlyHMSM+0x94>
        return (OS_ERR_TIME_INVALID_SECONDS);
   1a608:	00801484 	movi	r2,82
   1a60c:	00002e06 	br	1a6c8 <OSTimeDlyHMSM+0x14c>
    }
    if (ms > 999) {
   1a610:	e0bfff0b 	ldhu	r2,-4(fp)
   1a614:	1080fa30 	cmpltui	r2,r2,1000
   1a618:	1000021e 	bne	r2,zero,1a624 <OSTimeDlyHMSM+0xa8>
        return (OS_ERR_TIME_INVALID_MS);
   1a61c:	008014c4 	movi	r2,83
   1a620:	00002906 	br	1a6c8 <OSTimeDlyHMSM+0x14c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1a624:	e0bffc03 	ldbu	r2,-16(fp)
   1a628:	10c38424 	muli	r3,r2,3600
   1a62c:	e0bffd03 	ldbu	r2,-12(fp)
   1a630:	10800f24 	muli	r2,r2,60
   1a634:	1887883a 	add	r3,r3,r2
   1a638:	e0bffe03 	ldbu	r2,-8(fp)
   1a63c:	1885883a 	add	r2,r3,r2
   1a640:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   1a644:	e0bfff0b 	ldhu	r2,-4(fp)
   1a648:	10800f84 	addi	r2,r2,62
   1a64c:	100690fa 	slli	r3,r2,3
   1a650:	008418b4 	movhi	r2,4194
   1a654:	109374c4 	addi	r2,r2,19923
   1a658:	188a383a 	mulxuu	r5,r3,r2
   1a65c:	1885383a 	mul	r2,r3,r2
   1a660:	1011883a 	mov	r8,r2
   1a664:	2813883a 	mov	r9,r5
   1a668:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1a66c:	2085883a 	add	r2,r4,r2
   1a670:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   1a674:	e0bffb17 	ldw	r2,-20(fp)
   1a678:	1004d43a 	srli	r2,r2,16
   1a67c:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   1a680:	e0bffb17 	ldw	r2,-20(fp)
   1a684:	10bfffcc 	andi	r2,r2,65535
   1a688:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   1a68c:	e0bffb17 	ldw	r2,-20(fp)
   1a690:	10bfffcc 	andi	r2,r2,65535
   1a694:	1009883a 	mov	r4,r2
   1a698:	001a4780 	call	1a478 <OSTimeDly>
    while (loops > 0) {
   1a69c:	00000706 	br	1a6bc <OSTimeDlyHMSM+0x140>
        OSTimeDly((INT16U)32768u);
   1a6a0:	01200014 	movui	r4,32768
   1a6a4:	001a4780 	call	1a478 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   1a6a8:	01200014 	movui	r4,32768
   1a6ac:	001a4780 	call	1a478 <OSTimeDly>
        loops--;
   1a6b0:	e0bffa0b 	ldhu	r2,-24(fp)
   1a6b4:	10bfffc4 	addi	r2,r2,-1
   1a6b8:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   1a6bc:	e0bffa0b 	ldhu	r2,-24(fp)
   1a6c0:	103ff71e 	bne	r2,zero,1a6a0 <OSTimeDlyHMSM+0x124>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   1a6c4:	0005883a 	mov	r2,zero
}
   1a6c8:	e037883a 	mov	sp,fp
   1a6cc:	dfc00117 	ldw	ra,4(sp)
   1a6d0:	df000017 	ldw	fp,0(sp)
   1a6d4:	dec00204 	addi	sp,sp,8
   1a6d8:	f800283a 	ret

0001a6dc <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   1a6dc:	defff504 	addi	sp,sp,-44
   1a6e0:	dfc00a15 	stw	ra,40(sp)
   1a6e4:	df000915 	stw	fp,36(sp)
   1a6e8:	df000904 	addi	fp,sp,36
   1a6ec:	2005883a 	mov	r2,r4
   1a6f0:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1a6f4:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   1a6f8:	e0bfff03 	ldbu	r2,-4(fp)
   1a6fc:	10800530 	cmpltui	r2,r2,20
   1a700:	1000021e 	bne	r2,zero,1a70c <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   1a704:	00800a84 	movi	r2,42
   1a708:	00006406 	br	1a89c <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a70c:	0005303a 	rdctl	r2,status
   1a710:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a714:	e0fffe17 	ldw	r3,-8(fp)
   1a718:	00bfff84 	movi	r2,-2
   1a71c:	1884703a 	and	r2,r3,r2
   1a720:	1001703a 	wrctl	status,r2
  
  return context;
   1a724:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   1a728:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   1a72c:	e0ffff03 	ldbu	r3,-4(fp)
   1a730:	008000f4 	movhi	r2,3
   1a734:	10829304 	addi	r2,r2,2636
   1a738:	18c7883a 	add	r3,r3,r3
   1a73c:	18c7883a 	add	r3,r3,r3
   1a740:	10c5883a 	add	r2,r2,r3
   1a744:	10800017 	ldw	r2,0(r2)
   1a748:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
   1a74c:	e0bff917 	ldw	r2,-28(fp)
   1a750:	1000061e 	bne	r2,zero,1a76c <OSTimeDlyResume+0x90>
   1a754:	e0bff717 	ldw	r2,-36(fp)
   1a758:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a75c:	e0bff817 	ldw	r2,-32(fp)
   1a760:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1a764:	008010c4 	movi	r2,67
   1a768:	00004c06 	br	1a89c <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1a76c:	e0bff917 	ldw	r2,-28(fp)
   1a770:	10800058 	cmpnei	r2,r2,1
   1a774:	1000061e 	bne	r2,zero,1a790 <OSTimeDlyResume+0xb4>
   1a778:	e0bff717 	ldw	r2,-36(fp)
   1a77c:	e0bffa15 	stw	r2,-24(fp)
   1a780:	e0bffa17 	ldw	r2,-24(fp)
   1a784:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1a788:	008010c4 	movi	r2,67
   1a78c:	00004306 	br	1a89c <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   1a790:	e0bff917 	ldw	r2,-28(fp)
   1a794:	10800b8b 	ldhu	r2,46(r2)
   1a798:	10bfffcc 	andi	r2,r2,65535
   1a79c:	1000061e 	bne	r2,zero,1a7b8 <OSTimeDlyResume+0xdc>
   1a7a0:	e0bff717 	ldw	r2,-36(fp)
   1a7a4:	e0bffb15 	stw	r2,-20(fp)
   1a7a8:	e0bffb17 	ldw	r2,-20(fp)
   1a7ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   1a7b0:	00801404 	movi	r2,80
   1a7b4:	00003906 	br	1a89c <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   1a7b8:	e0bff917 	ldw	r2,-28(fp)
   1a7bc:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   1a7c0:	e0bff917 	ldw	r2,-28(fp)
   1a7c4:	10800c03 	ldbu	r2,48(r2)
   1a7c8:	10803fcc 	andi	r2,r2,255
   1a7cc:	10800dcc 	andi	r2,r2,55
   1a7d0:	10000b26 	beq	r2,zero,1a800 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   1a7d4:	e0bff917 	ldw	r2,-28(fp)
   1a7d8:	10c00c03 	ldbu	r3,48(r2)
   1a7dc:	00bff204 	movi	r2,-56
   1a7e0:	1884703a 	and	r2,r3,r2
   1a7e4:	1007883a 	mov	r3,r2
   1a7e8:	e0bff917 	ldw	r2,-28(fp)
   1a7ec:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   1a7f0:	e0bff917 	ldw	r2,-28(fp)
   1a7f4:	00c00044 	movi	r3,1
   1a7f8:	10c00c45 	stb	r3,49(r2)
   1a7fc:	00000206 	br	1a808 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   1a800:	e0bff917 	ldw	r2,-28(fp)
   1a804:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   1a808:	e0bff917 	ldw	r2,-28(fp)
   1a80c:	10800c03 	ldbu	r2,48(r2)
   1a810:	10803fcc 	andi	r2,r2,255
   1a814:	1080020c 	andi	r2,r2,8
   1a818:	10001b1e 	bne	r2,zero,1a888 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   1a81c:	e0bff917 	ldw	r2,-28(fp)
   1a820:	10c00d83 	ldbu	r3,54(r2)
   1a824:	d0a81d03 	ldbu	r2,-24460(gp)
   1a828:	1884b03a 	or	r2,r3,r2
   1a82c:	d0a81d05 	stb	r2,-24460(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1a830:	e0bff917 	ldw	r2,-28(fp)
   1a834:	10800d03 	ldbu	r2,52(r2)
   1a838:	10c03fcc 	andi	r3,r2,255
   1a83c:	e0bff917 	ldw	r2,-28(fp)
   1a840:	10800d03 	ldbu	r2,52(r2)
   1a844:	11003fcc 	andi	r4,r2,255
   1a848:	d0a81d44 	addi	r2,gp,-24459
   1a84c:	2085883a 	add	r2,r4,r2
   1a850:	11000003 	ldbu	r4,0(r2)
   1a854:	e0bff917 	ldw	r2,-28(fp)
   1a858:	10800d43 	ldbu	r2,53(r2)
   1a85c:	2084b03a 	or	r2,r4,r2
   1a860:	1009883a 	mov	r4,r2
   1a864:	d0a81d44 	addi	r2,gp,-24459
   1a868:	1885883a 	add	r2,r3,r2
   1a86c:	11000005 	stb	r4,0(r2)
   1a870:	e0bff717 	ldw	r2,-36(fp)
   1a874:	e0bffc15 	stw	r2,-16(fp)
   1a878:	e0bffc17 	ldw	r2,-16(fp)
   1a87c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   1a880:	0014acc0 	call	14acc <OS_Sched>
   1a884:	00000406 	br	1a898 <OSTimeDlyResume+0x1bc>
   1a888:	e0bff717 	ldw	r2,-36(fp)
   1a88c:	e0bffd15 	stw	r2,-12(fp)
   1a890:	e0bffd17 	ldw	r2,-12(fp)
   1a894:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   1a898:	0005883a 	mov	r2,zero
}
   1a89c:	e037883a 	mov	sp,fp
   1a8a0:	dfc00117 	ldw	ra,4(sp)
   1a8a4:	df000017 	ldw	fp,0(sp)
   1a8a8:	dec00204 	addi	sp,sp,8
   1a8ac:	f800283a 	ret

0001a8b0 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   1a8b0:	defffb04 	addi	sp,sp,-20
   1a8b4:	df000415 	stw	fp,16(sp)
   1a8b8:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1a8bc:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a8c0:	0005303a 	rdctl	r2,status
   1a8c4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a8c8:	e0fffe17 	ldw	r3,-8(fp)
   1a8cc:	00bfff84 	movi	r2,-2
   1a8d0:	1884703a 	and	r2,r3,r2
   1a8d4:	1001703a 	wrctl	status,r2
  
  return context;
   1a8d8:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   1a8dc:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   1a8e0:	d0a82117 	ldw	r2,-24444(gp)
   1a8e4:	e0bffd15 	stw	r2,-12(fp)
   1a8e8:	e0bffc17 	ldw	r2,-16(fp)
   1a8ec:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a8f0:	e0bfff17 	ldw	r2,-4(fp)
   1a8f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   1a8f8:	e0bffd17 	ldw	r2,-12(fp)
}
   1a8fc:	e037883a 	mov	sp,fp
   1a900:	df000017 	ldw	fp,0(sp)
   1a904:	dec00104 	addi	sp,sp,4
   1a908:	f800283a 	ret

0001a90c <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   1a90c:	defffb04 	addi	sp,sp,-20
   1a910:	df000415 	stw	fp,16(sp)
   1a914:	df000404 	addi	fp,sp,16
   1a918:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1a91c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a920:	0005303a 	rdctl	r2,status
   1a924:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a928:	e0fffd17 	ldw	r3,-12(fp)
   1a92c:	00bfff84 	movi	r2,-2
   1a930:	1884703a 	and	r2,r3,r2
   1a934:	1001703a 	wrctl	status,r2
  
  return context;
   1a938:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   1a93c:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   1a940:	e0bfff17 	ldw	r2,-4(fp)
   1a944:	d0a82115 	stw	r2,-24444(gp)
   1a948:	e0bffc17 	ldw	r2,-16(fp)
   1a94c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a950:	e0bffe17 	ldw	r2,-8(fp)
   1a954:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   1a958:	0001883a 	nop
   1a95c:	e037883a 	mov	sp,fp
   1a960:	df000017 	ldw	fp,0(sp)
   1a964:	dec00104 	addi	sp,sp,4
   1a968:	f800283a 	ret

0001a96c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1a96c:	defffd04 	addi	sp,sp,-12
   1a970:	dfc00215 	stw	ra,8(sp)
   1a974:	df000115 	stw	fp,4(sp)
   1a978:	df000104 	addi	fp,sp,4
   1a97c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1a980:	d1600a04 	addi	r5,gp,-32728
   1a984:	e13fff17 	ldw	r4,-4(fp)
   1a988:	001d5a00 	call	1d5a0 <alt_dev_llist_insert>
}
   1a98c:	e037883a 	mov	sp,fp
   1a990:	dfc00117 	ldw	ra,4(sp)
   1a994:	df000017 	ldw	fp,0(sp)
   1a998:	dec00204 	addi	sp,sp,8
   1a99c:	f800283a 	ret

0001a9a0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1a9a0:	defffd04 	addi	sp,sp,-12
   1a9a4:	dfc00215 	stw	ra,8(sp)
   1a9a8:	df000115 	stw	fp,4(sp)
   1a9ac:	df000104 	addi	fp,sp,4
   1a9b0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   1a9b4:	001de800 	call	1de80 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1a9b8:	00800044 	movi	r2,1
   1a9bc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1a9c0:	0001883a 	nop
   1a9c4:	e037883a 	mov	sp,fp
   1a9c8:	dfc00117 	ldw	ra,4(sp)
   1a9cc:	df000017 	ldw	fp,0(sp)
   1a9d0:	dec00204 	addi	sp,sp,8
   1a9d4:	f800283a 	ret

0001a9d8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1a9d8:	defffb04 	addi	sp,sp,-20
   1a9dc:	dfc00415 	stw	ra,16(sp)
   1a9e0:	df000315 	stw	fp,12(sp)
   1a9e4:	df000304 	addi	fp,sp,12
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   1a9e8:	01c00204 	movi	r7,8
   1a9ec:	000d883a 	mov	r6,zero
   1a9f0:	000b883a 	mov	r5,zero
   1a9f4:	013fc834 	movhi	r4,65312
   1a9f8:	21080004 	addi	r4,r4,8192
   1a9fc:	001c0e40 	call	1c0e4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER_2, Interval_Timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   1aa00:	01800204 	movi	r6,8
   1aa04:	000b883a 	mov	r5,zero
   1aa08:	010000b4 	movhi	r4,2
   1aa0c:	21011804 	addi	r4,r4,1120
   1aa10:	001b4a80 	call	1b4a8 <altera_avalon_jtag_uart_init>
   1aa14:	010000b4 	movhi	r4,2
   1aa18:	21010e04 	addi	r4,r4,1080
   1aa1c:	001a96c0 	call	1a96c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   1aa20:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   1aa24:	010000b4 	movhi	r4,2
   1aa28:	21052904 	addi	r4,r4,5284
   1aa2c:	001a96c0 	call	1a96c <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   1aa30:	010000b4 	movhi	r4,2
   1aa34:	21053504 	addi	r4,r4,5332
   1aa38:	001a96c0 	call	1a96c <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   1aa3c:	010000b4 	movhi	r4,2
   1aa40:	21054104 	addi	r4,r4,5380
   1aa44:	001c20c0 	call	1c20c <alt_up_character_lcd_init>
   1aa48:	010000b4 	movhi	r4,2
   1aa4c:	21054104 	addi	r4,r4,5380
   1aa50:	001a96c0 	call	1a96c <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   1aa54:	010000b4 	movhi	r4,2
   1aa58:	21054c04 	addi	r4,r4,5424
   1aa5c:	001a96c0 	call	1a96c <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   1aa60:	010000b4 	movhi	r4,2
   1aa64:	21055704 	addi	r4,r4,5468
   1aa68:	001cb000 	call	1cb00 <alt_up_ps2_init>
   1aa6c:	010000b4 	movhi	r4,2
   1aa70:	21055704 	addi	r4,r4,5468
   1aa74:	001a96c0 	call	1a96c <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   1aa78:	010000b4 	movhi	r4,2
   1aa7c:	21056504 	addi	r4,r4,5524
   1aa80:	001cb000 	call	1cb00 <alt_up_ps2_init>
   1aa84:	010000b4 	movhi	r4,2
   1aa88:	21056504 	addi	r4,r4,5524
   1aa8c:	001a96c0 	call	1a96c <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   1aa90:	010000b4 	movhi	r4,2
   1aa94:	21057304 	addi	r4,r4,5580
   1aa98:	001a96c0 	call	1a96c <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   1aa9c:	010000b4 	movhi	r4,2
   1aaa0:	21057e04 	addi	r4,r4,5624
   1aaa4:	001a96c0 	call	1a96c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_CHAR_BUF_SUBSYSTEM_CHAR_BUF_DMA, VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA);
   1aaa8:	008000b4 	movhi	r2,2
   1aaac:	10858b04 	addi	r2,r2,5676
   1aab0:	10800a17 	ldw	r2,40(r2)
   1aab4:	10800017 	ldw	r2,0(r2)
   1aab8:	1007883a 	mov	r3,r2
   1aabc:	008000b4 	movhi	r2,2
   1aac0:	10858b04 	addi	r2,r2,5676
   1aac4:	10c00b15 	stw	r3,44(r2)
   1aac8:	008000b4 	movhi	r2,2
   1aacc:	10858b04 	addi	r2,r2,5676
   1aad0:	10800a17 	ldw	r2,40(r2)
   1aad4:	10800104 	addi	r2,r2,4
   1aad8:	10800017 	ldw	r2,0(r2)
   1aadc:	1007883a 	mov	r3,r2
   1aae0:	008000b4 	movhi	r2,2
   1aae4:	10858b04 	addi	r2,r2,5676
   1aae8:	10c00c15 	stw	r3,48(r2)
   1aaec:	008000b4 	movhi	r2,2
   1aaf0:	10858b04 	addi	r2,r2,5676
   1aaf4:	10800a17 	ldw	r2,40(r2)
   1aaf8:	10800204 	addi	r2,r2,8
   1aafc:	10800017 	ldw	r2,0(r2)
   1ab00:	10ffffcc 	andi	r3,r2,65535
   1ab04:	008000b4 	movhi	r2,2
   1ab08:	10858b04 	addi	r2,r2,5676
   1ab0c:	10c01115 	stw	r3,68(r2)
   1ab10:	008000b4 	movhi	r2,2
   1ab14:	10858b04 	addi	r2,r2,5676
   1ab18:	10800a17 	ldw	r2,40(r2)
   1ab1c:	10800204 	addi	r2,r2,8
   1ab20:	10800017 	ldw	r2,0(r2)
   1ab24:	1006d43a 	srli	r3,r2,16
   1ab28:	008000b4 	movhi	r2,2
   1ab2c:	10858b04 	addi	r2,r2,5676
   1ab30:	10c01215 	stw	r3,72(r2)
   1ab34:	008000b4 	movhi	r2,2
   1ab38:	10858b04 	addi	r2,r2,5676
   1ab3c:	10800a17 	ldw	r2,40(r2)
   1ab40:	10800304 	addi	r2,r2,12
   1ab44:	10800017 	ldw	r2,0(r2)
   1ab48:	1005d07a 	srai	r2,r2,1
   1ab4c:	10c0004c 	andi	r3,r2,1
   1ab50:	008000b4 	movhi	r2,2
   1ab54:	10858b04 	addi	r2,r2,5676
   1ab58:	10c00d15 	stw	r3,52(r2)
   1ab5c:	008000b4 	movhi	r2,2
   1ab60:	10858b04 	addi	r2,r2,5676
   1ab64:	10800a17 	ldw	r2,40(r2)
   1ab68:	10800304 	addi	r2,r2,12
   1ab6c:	10800017 	ldw	r2,0(r2)
   1ab70:	1005d23a 	srai	r2,r2,8
   1ab74:	108003cc 	andi	r2,r2,15
   1ab78:	10800044 	addi	r2,r2,1
   1ab7c:	1007883a 	mov	r3,r2
   1ab80:	008000b4 	movhi	r2,2
   1ab84:	10858b04 	addi	r2,r2,5676
   1ab88:	10c00e15 	stw	r3,56(r2)
   1ab8c:	008000b4 	movhi	r2,2
   1ab90:	10858b04 	addi	r2,r2,5676
   1ab94:	10800a17 	ldw	r2,40(r2)
   1ab98:	10800304 	addi	r2,r2,12
   1ab9c:	10800017 	ldw	r2,0(r2)
   1aba0:	1005d1ba 	srai	r2,r2,6
   1aba4:	108000cc 	andi	r2,r2,3
   1aba8:	10800044 	addi	r2,r2,1
   1abac:	1007883a 	mov	r3,r2
   1abb0:	008000b4 	movhi	r2,2
   1abb4:	10858b04 	addi	r2,r2,5676
   1abb8:	10c00f15 	stw	r3,60(r2)
   1abbc:	008000b4 	movhi	r2,2
   1abc0:	10858b04 	addi	r2,r2,5676
   1abc4:	10800e17 	ldw	r2,56(r2)
   1abc8:	1007883a 	mov	r3,r2
   1abcc:	008000b4 	movhi	r2,2
   1abd0:	10858b04 	addi	r2,r2,5676
   1abd4:	10800f17 	ldw	r2,60(r2)
   1abd8:	1885383a 	mul	r2,r3,r2
   1abdc:	e0bffd05 	stb	r2,-12(fp)
   1abe0:	e0bffd03 	ldbu	r2,-12(fp)
   1abe4:	10800268 	cmpgeui	r2,r2,9
   1abe8:	1000051e 	bne	r2,zero,1ac00 <alt_sys_init+0x228>
   1abec:	008000b4 	movhi	r2,2
   1abf0:	10858b04 	addi	r2,r2,5676
   1abf4:	00c00044 	movi	r3,1
   1abf8:	10c01015 	stw	r3,64(r2)
   1abfc:	00000c06 	br	1ac30 <alt_sys_init+0x258>
   1ac00:	e0bffd03 	ldbu	r2,-12(fp)
   1ac04:	10800468 	cmpgeui	r2,r2,17
   1ac08:	1000051e 	bne	r2,zero,1ac20 <alt_sys_init+0x248>
   1ac0c:	008000b4 	movhi	r2,2
   1ac10:	10858b04 	addi	r2,r2,5676
   1ac14:	00c00084 	movi	r3,2
   1ac18:	10c01015 	stw	r3,64(r2)
   1ac1c:	00000406 	br	1ac30 <alt_sys_init+0x258>
   1ac20:	008000b4 	movhi	r2,2
   1ac24:	10858b04 	addi	r2,r2,5676
   1ac28:	00c00104 	movi	r3,4
   1ac2c:	10c01015 	stw	r3,64(r2)
   1ac30:	008000b4 	movhi	r2,2
   1ac34:	10858b04 	addi	r2,r2,5676
   1ac38:	10800a17 	ldw	r2,40(r2)
   1ac3c:	10800304 	addi	r2,r2,12
   1ac40:	10800017 	ldw	r2,0(r2)
   1ac44:	1005d43a 	srai	r2,r2,16
   1ac48:	e0bffd45 	stb	r2,-11(fp)
   1ac4c:	008000b4 	movhi	r2,2
   1ac50:	10858b04 	addi	r2,r2,5676
   1ac54:	10800a17 	ldw	r2,40(r2)
   1ac58:	10800304 	addi	r2,r2,12
   1ac5c:	10800017 	ldw	r2,0(r2)
   1ac60:	1004d63a 	srli	r2,r2,24
   1ac64:	e0bffd85 	stb	r2,-10(fp)
   1ac68:	008000b4 	movhi	r2,2
   1ac6c:	10858b04 	addi	r2,r2,5676
   1ac70:	10801017 	ldw	r2,64(r2)
   1ac74:	10800058 	cmpnei	r2,r2,1
   1ac78:	1000041e 	bne	r2,zero,1ac8c <alt_sys_init+0x2b4>
   1ac7c:	008000b4 	movhi	r2,2
   1ac80:	10858b04 	addi	r2,r2,5676
   1ac84:	10001315 	stw	zero,76(r2)
   1ac88:	00000e06 	br	1acc4 <alt_sys_init+0x2ec>
   1ac8c:	008000b4 	movhi	r2,2
   1ac90:	10858b04 	addi	r2,r2,5676
   1ac94:	10801017 	ldw	r2,64(r2)
   1ac98:	10800098 	cmpnei	r2,r2,2
   1ac9c:	1000051e 	bne	r2,zero,1acb4 <alt_sys_init+0x2dc>
   1aca0:	008000b4 	movhi	r2,2
   1aca4:	10858b04 	addi	r2,r2,5676
   1aca8:	00c00044 	movi	r3,1
   1acac:	10c01315 	stw	r3,76(r2)
   1acb0:	00000406 	br	1acc4 <alt_sys_init+0x2ec>
   1acb4:	008000b4 	movhi	r2,2
   1acb8:	10858b04 	addi	r2,r2,5676
   1acbc:	00c00084 	movi	r3,2
   1acc0:	10c01315 	stw	r3,76(r2)
   1acc4:	e0bffd43 	ldbu	r2,-11(fp)
   1acc8:	00c00804 	movi	r3,32
   1accc:	1885c83a 	sub	r2,r3,r2
   1acd0:	00ffffc4 	movi	r3,-1
   1acd4:	1886d83a 	srl	r3,r3,r2
   1acd8:	008000b4 	movhi	r2,2
   1acdc:	10858b04 	addi	r2,r2,5676
   1ace0:	10c01415 	stw	r3,80(r2)
   1ace4:	e0fffd43 	ldbu	r3,-11(fp)
   1ace8:	008000b4 	movhi	r2,2
   1acec:	10858b04 	addi	r2,r2,5676
   1acf0:	10801317 	ldw	r2,76(r2)
   1acf4:	1887883a 	add	r3,r3,r2
   1acf8:	008000b4 	movhi	r2,2
   1acfc:	10858b04 	addi	r2,r2,5676
   1ad00:	10c01515 	stw	r3,84(r2)
   1ad04:	e0bffd83 	ldbu	r2,-10(fp)
   1ad08:	00c00804 	movi	r3,32
   1ad0c:	1885c83a 	sub	r2,r3,r2
   1ad10:	00ffffc4 	movi	r3,-1
   1ad14:	1886d83a 	srl	r3,r3,r2
   1ad18:	008000b4 	movhi	r2,2
   1ad1c:	10858b04 	addi	r2,r2,5676
   1ad20:	10c01615 	stw	r3,88(r2)
   1ad24:	010000b4 	movhi	r4,2
   1ad28:	21058b04 	addi	r4,r4,5676
   1ad2c:	001a96c0 	call	1a96c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   1ad30:	008000b4 	movhi	r2,2
   1ad34:	1085a204 	addi	r2,r2,5768
   1ad38:	10800a17 	ldw	r2,40(r2)
   1ad3c:	10800017 	ldw	r2,0(r2)
   1ad40:	1007883a 	mov	r3,r2
   1ad44:	008000b4 	movhi	r2,2
   1ad48:	1085a204 	addi	r2,r2,5768
   1ad4c:	10c00b15 	stw	r3,44(r2)
   1ad50:	008000b4 	movhi	r2,2
   1ad54:	1085a204 	addi	r2,r2,5768
   1ad58:	10800a17 	ldw	r2,40(r2)
   1ad5c:	10800104 	addi	r2,r2,4
   1ad60:	10800017 	ldw	r2,0(r2)
   1ad64:	1007883a 	mov	r3,r2
   1ad68:	008000b4 	movhi	r2,2
   1ad6c:	1085a204 	addi	r2,r2,5768
   1ad70:	10c00c15 	stw	r3,48(r2)
   1ad74:	008000b4 	movhi	r2,2
   1ad78:	1085a204 	addi	r2,r2,5768
   1ad7c:	10800a17 	ldw	r2,40(r2)
   1ad80:	10800204 	addi	r2,r2,8
   1ad84:	10800017 	ldw	r2,0(r2)
   1ad88:	10ffffcc 	andi	r3,r2,65535
   1ad8c:	008000b4 	movhi	r2,2
   1ad90:	1085a204 	addi	r2,r2,5768
   1ad94:	10c01115 	stw	r3,68(r2)
   1ad98:	008000b4 	movhi	r2,2
   1ad9c:	1085a204 	addi	r2,r2,5768
   1ada0:	10800a17 	ldw	r2,40(r2)
   1ada4:	10800204 	addi	r2,r2,8
   1ada8:	10800017 	ldw	r2,0(r2)
   1adac:	1006d43a 	srli	r3,r2,16
   1adb0:	008000b4 	movhi	r2,2
   1adb4:	1085a204 	addi	r2,r2,5768
   1adb8:	10c01215 	stw	r3,72(r2)
   1adbc:	008000b4 	movhi	r2,2
   1adc0:	1085a204 	addi	r2,r2,5768
   1adc4:	10800a17 	ldw	r2,40(r2)
   1adc8:	10800304 	addi	r2,r2,12
   1adcc:	10800017 	ldw	r2,0(r2)
   1add0:	1005d07a 	srai	r2,r2,1
   1add4:	10c0004c 	andi	r3,r2,1
   1add8:	008000b4 	movhi	r2,2
   1addc:	1085a204 	addi	r2,r2,5768
   1ade0:	10c00d15 	stw	r3,52(r2)
   1ade4:	008000b4 	movhi	r2,2
   1ade8:	1085a204 	addi	r2,r2,5768
   1adec:	10800a17 	ldw	r2,40(r2)
   1adf0:	10800304 	addi	r2,r2,12
   1adf4:	10800017 	ldw	r2,0(r2)
   1adf8:	1005d23a 	srai	r2,r2,8
   1adfc:	108003cc 	andi	r2,r2,15
   1ae00:	10800044 	addi	r2,r2,1
   1ae04:	1007883a 	mov	r3,r2
   1ae08:	008000b4 	movhi	r2,2
   1ae0c:	1085a204 	addi	r2,r2,5768
   1ae10:	10c00e15 	stw	r3,56(r2)
   1ae14:	008000b4 	movhi	r2,2
   1ae18:	1085a204 	addi	r2,r2,5768
   1ae1c:	10800a17 	ldw	r2,40(r2)
   1ae20:	10800304 	addi	r2,r2,12
   1ae24:	10800017 	ldw	r2,0(r2)
   1ae28:	1005d1ba 	srai	r2,r2,6
   1ae2c:	108000cc 	andi	r2,r2,3
   1ae30:	10800044 	addi	r2,r2,1
   1ae34:	1007883a 	mov	r3,r2
   1ae38:	008000b4 	movhi	r2,2
   1ae3c:	1085a204 	addi	r2,r2,5768
   1ae40:	10c00f15 	stw	r3,60(r2)
   1ae44:	008000b4 	movhi	r2,2
   1ae48:	1085a204 	addi	r2,r2,5768
   1ae4c:	10800e17 	ldw	r2,56(r2)
   1ae50:	1007883a 	mov	r3,r2
   1ae54:	008000b4 	movhi	r2,2
   1ae58:	1085a204 	addi	r2,r2,5768
   1ae5c:	10800f17 	ldw	r2,60(r2)
   1ae60:	1885383a 	mul	r2,r3,r2
   1ae64:	e0bffdc5 	stb	r2,-9(fp)
   1ae68:	e0bffdc3 	ldbu	r2,-9(fp)
   1ae6c:	10800268 	cmpgeui	r2,r2,9
   1ae70:	1000051e 	bne	r2,zero,1ae88 <alt_sys_init+0x4b0>
   1ae74:	008000b4 	movhi	r2,2
   1ae78:	1085a204 	addi	r2,r2,5768
   1ae7c:	00c00044 	movi	r3,1
   1ae80:	10c01015 	stw	r3,64(r2)
   1ae84:	00000c06 	br	1aeb8 <alt_sys_init+0x4e0>
   1ae88:	e0bffdc3 	ldbu	r2,-9(fp)
   1ae8c:	10800468 	cmpgeui	r2,r2,17
   1ae90:	1000051e 	bne	r2,zero,1aea8 <alt_sys_init+0x4d0>
   1ae94:	008000b4 	movhi	r2,2
   1ae98:	1085a204 	addi	r2,r2,5768
   1ae9c:	00c00084 	movi	r3,2
   1aea0:	10c01015 	stw	r3,64(r2)
   1aea4:	00000406 	br	1aeb8 <alt_sys_init+0x4e0>
   1aea8:	008000b4 	movhi	r2,2
   1aeac:	1085a204 	addi	r2,r2,5768
   1aeb0:	00c00104 	movi	r3,4
   1aeb4:	10c01015 	stw	r3,64(r2)
   1aeb8:	008000b4 	movhi	r2,2
   1aebc:	1085a204 	addi	r2,r2,5768
   1aec0:	10800a17 	ldw	r2,40(r2)
   1aec4:	10800304 	addi	r2,r2,12
   1aec8:	10800017 	ldw	r2,0(r2)
   1aecc:	1005d43a 	srai	r2,r2,16
   1aed0:	e0bffe05 	stb	r2,-8(fp)
   1aed4:	008000b4 	movhi	r2,2
   1aed8:	1085a204 	addi	r2,r2,5768
   1aedc:	10800a17 	ldw	r2,40(r2)
   1aee0:	10800304 	addi	r2,r2,12
   1aee4:	10800017 	ldw	r2,0(r2)
   1aee8:	1004d63a 	srli	r2,r2,24
   1aeec:	e0bffe45 	stb	r2,-7(fp)
   1aef0:	008000b4 	movhi	r2,2
   1aef4:	1085a204 	addi	r2,r2,5768
   1aef8:	10801017 	ldw	r2,64(r2)
   1aefc:	10800058 	cmpnei	r2,r2,1
   1af00:	1000041e 	bne	r2,zero,1af14 <alt_sys_init+0x53c>
   1af04:	008000b4 	movhi	r2,2
   1af08:	1085a204 	addi	r2,r2,5768
   1af0c:	10001315 	stw	zero,76(r2)
   1af10:	00000e06 	br	1af4c <alt_sys_init+0x574>
   1af14:	008000b4 	movhi	r2,2
   1af18:	1085a204 	addi	r2,r2,5768
   1af1c:	10801017 	ldw	r2,64(r2)
   1af20:	10800098 	cmpnei	r2,r2,2
   1af24:	1000051e 	bne	r2,zero,1af3c <alt_sys_init+0x564>
   1af28:	008000b4 	movhi	r2,2
   1af2c:	1085a204 	addi	r2,r2,5768
   1af30:	00c00044 	movi	r3,1
   1af34:	10c01315 	stw	r3,76(r2)
   1af38:	00000406 	br	1af4c <alt_sys_init+0x574>
   1af3c:	008000b4 	movhi	r2,2
   1af40:	1085a204 	addi	r2,r2,5768
   1af44:	00c00084 	movi	r3,2
   1af48:	10c01315 	stw	r3,76(r2)
   1af4c:	e0bffe03 	ldbu	r2,-8(fp)
   1af50:	00c00804 	movi	r3,32
   1af54:	1885c83a 	sub	r2,r3,r2
   1af58:	00ffffc4 	movi	r3,-1
   1af5c:	1886d83a 	srl	r3,r3,r2
   1af60:	008000b4 	movhi	r2,2
   1af64:	1085a204 	addi	r2,r2,5768
   1af68:	10c01415 	stw	r3,80(r2)
   1af6c:	e0fffe03 	ldbu	r3,-8(fp)
   1af70:	008000b4 	movhi	r2,2
   1af74:	1085a204 	addi	r2,r2,5768
   1af78:	10801317 	ldw	r2,76(r2)
   1af7c:	1887883a 	add	r3,r3,r2
   1af80:	008000b4 	movhi	r2,2
   1af84:	1085a204 	addi	r2,r2,5768
   1af88:	10c01515 	stw	r3,84(r2)
   1af8c:	e0bffe43 	ldbu	r2,-7(fp)
   1af90:	00c00804 	movi	r3,32
   1af94:	1885c83a 	sub	r2,r3,r2
   1af98:	00ffffc4 	movi	r3,-1
   1af9c:	1886d83a 	srl	r3,r3,r2
   1afa0:	008000b4 	movhi	r2,2
   1afa4:	1085a204 	addi	r2,r2,5768
   1afa8:	10c01615 	stw	r3,88(r2)
   1afac:	010000b4 	movhi	r4,2
   1afb0:	2105a204 	addi	r4,r4,5768
   1afb4:	001a96c0 	call	1a96c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VIDEO_IN_SUBSYSTEM_VIDEO_IN_DMA, Video_In_Subsystem_Video_In_DMA);
   1afb8:	008000b4 	movhi	r2,2
   1afbc:	1085b904 	addi	r2,r2,5860
   1afc0:	10800a17 	ldw	r2,40(r2)
   1afc4:	10800017 	ldw	r2,0(r2)
   1afc8:	1007883a 	mov	r3,r2
   1afcc:	008000b4 	movhi	r2,2
   1afd0:	1085b904 	addi	r2,r2,5860
   1afd4:	10c00b15 	stw	r3,44(r2)
   1afd8:	008000b4 	movhi	r2,2
   1afdc:	1085b904 	addi	r2,r2,5860
   1afe0:	10800a17 	ldw	r2,40(r2)
   1afe4:	10800104 	addi	r2,r2,4
   1afe8:	10800017 	ldw	r2,0(r2)
   1afec:	1007883a 	mov	r3,r2
   1aff0:	008000b4 	movhi	r2,2
   1aff4:	1085b904 	addi	r2,r2,5860
   1aff8:	10c00c15 	stw	r3,48(r2)
   1affc:	008000b4 	movhi	r2,2
   1b000:	1085b904 	addi	r2,r2,5860
   1b004:	10800a17 	ldw	r2,40(r2)
   1b008:	10800204 	addi	r2,r2,8
   1b00c:	10800017 	ldw	r2,0(r2)
   1b010:	10ffffcc 	andi	r3,r2,65535
   1b014:	008000b4 	movhi	r2,2
   1b018:	1085b904 	addi	r2,r2,5860
   1b01c:	10c01115 	stw	r3,68(r2)
   1b020:	008000b4 	movhi	r2,2
   1b024:	1085b904 	addi	r2,r2,5860
   1b028:	10800a17 	ldw	r2,40(r2)
   1b02c:	10800204 	addi	r2,r2,8
   1b030:	10800017 	ldw	r2,0(r2)
   1b034:	1006d43a 	srli	r3,r2,16
   1b038:	008000b4 	movhi	r2,2
   1b03c:	1085b904 	addi	r2,r2,5860
   1b040:	10c01215 	stw	r3,72(r2)
   1b044:	008000b4 	movhi	r2,2
   1b048:	1085b904 	addi	r2,r2,5860
   1b04c:	10800a17 	ldw	r2,40(r2)
   1b050:	10800304 	addi	r2,r2,12
   1b054:	10800017 	ldw	r2,0(r2)
   1b058:	1005d07a 	srai	r2,r2,1
   1b05c:	10c0004c 	andi	r3,r2,1
   1b060:	008000b4 	movhi	r2,2
   1b064:	1085b904 	addi	r2,r2,5860
   1b068:	10c00d15 	stw	r3,52(r2)
   1b06c:	008000b4 	movhi	r2,2
   1b070:	1085b904 	addi	r2,r2,5860
   1b074:	10800a17 	ldw	r2,40(r2)
   1b078:	10800304 	addi	r2,r2,12
   1b07c:	10800017 	ldw	r2,0(r2)
   1b080:	1005d23a 	srai	r2,r2,8
   1b084:	108003cc 	andi	r2,r2,15
   1b088:	10800044 	addi	r2,r2,1
   1b08c:	1007883a 	mov	r3,r2
   1b090:	008000b4 	movhi	r2,2
   1b094:	1085b904 	addi	r2,r2,5860
   1b098:	10c00e15 	stw	r3,56(r2)
   1b09c:	008000b4 	movhi	r2,2
   1b0a0:	1085b904 	addi	r2,r2,5860
   1b0a4:	10800a17 	ldw	r2,40(r2)
   1b0a8:	10800304 	addi	r2,r2,12
   1b0ac:	10800017 	ldw	r2,0(r2)
   1b0b0:	1005d1ba 	srai	r2,r2,6
   1b0b4:	108000cc 	andi	r2,r2,3
   1b0b8:	10800044 	addi	r2,r2,1
   1b0bc:	1007883a 	mov	r3,r2
   1b0c0:	008000b4 	movhi	r2,2
   1b0c4:	1085b904 	addi	r2,r2,5860
   1b0c8:	10c00f15 	stw	r3,60(r2)
   1b0cc:	008000b4 	movhi	r2,2
   1b0d0:	1085b904 	addi	r2,r2,5860
   1b0d4:	10800e17 	ldw	r2,56(r2)
   1b0d8:	1007883a 	mov	r3,r2
   1b0dc:	008000b4 	movhi	r2,2
   1b0e0:	1085b904 	addi	r2,r2,5860
   1b0e4:	10800f17 	ldw	r2,60(r2)
   1b0e8:	1885383a 	mul	r2,r3,r2
   1b0ec:	e0bffe85 	stb	r2,-6(fp)
   1b0f0:	e0bffe83 	ldbu	r2,-6(fp)
   1b0f4:	10800268 	cmpgeui	r2,r2,9
   1b0f8:	1000051e 	bne	r2,zero,1b110 <alt_sys_init+0x738>
   1b0fc:	008000b4 	movhi	r2,2
   1b100:	1085b904 	addi	r2,r2,5860
   1b104:	00c00044 	movi	r3,1
   1b108:	10c01015 	stw	r3,64(r2)
   1b10c:	00000c06 	br	1b140 <alt_sys_init+0x768>
   1b110:	e0bffe83 	ldbu	r2,-6(fp)
   1b114:	10800468 	cmpgeui	r2,r2,17
   1b118:	1000051e 	bne	r2,zero,1b130 <alt_sys_init+0x758>
   1b11c:	008000b4 	movhi	r2,2
   1b120:	1085b904 	addi	r2,r2,5860
   1b124:	00c00084 	movi	r3,2
   1b128:	10c01015 	stw	r3,64(r2)
   1b12c:	00000406 	br	1b140 <alt_sys_init+0x768>
   1b130:	008000b4 	movhi	r2,2
   1b134:	1085b904 	addi	r2,r2,5860
   1b138:	00c00104 	movi	r3,4
   1b13c:	10c01015 	stw	r3,64(r2)
   1b140:	008000b4 	movhi	r2,2
   1b144:	1085b904 	addi	r2,r2,5860
   1b148:	10800a17 	ldw	r2,40(r2)
   1b14c:	10800304 	addi	r2,r2,12
   1b150:	10800017 	ldw	r2,0(r2)
   1b154:	1005d43a 	srai	r2,r2,16
   1b158:	e0bffec5 	stb	r2,-5(fp)
   1b15c:	008000b4 	movhi	r2,2
   1b160:	1085b904 	addi	r2,r2,5860
   1b164:	10800a17 	ldw	r2,40(r2)
   1b168:	10800304 	addi	r2,r2,12
   1b16c:	10800017 	ldw	r2,0(r2)
   1b170:	1004d63a 	srli	r2,r2,24
   1b174:	e0bfff05 	stb	r2,-4(fp)
   1b178:	008000b4 	movhi	r2,2
   1b17c:	1085b904 	addi	r2,r2,5860
   1b180:	10801017 	ldw	r2,64(r2)
   1b184:	10800058 	cmpnei	r2,r2,1
   1b188:	1000041e 	bne	r2,zero,1b19c <alt_sys_init+0x7c4>
   1b18c:	008000b4 	movhi	r2,2
   1b190:	1085b904 	addi	r2,r2,5860
   1b194:	10001315 	stw	zero,76(r2)
   1b198:	00000e06 	br	1b1d4 <alt_sys_init+0x7fc>
   1b19c:	008000b4 	movhi	r2,2
   1b1a0:	1085b904 	addi	r2,r2,5860
   1b1a4:	10801017 	ldw	r2,64(r2)
   1b1a8:	10800098 	cmpnei	r2,r2,2
   1b1ac:	1000051e 	bne	r2,zero,1b1c4 <alt_sys_init+0x7ec>
   1b1b0:	008000b4 	movhi	r2,2
   1b1b4:	1085b904 	addi	r2,r2,5860
   1b1b8:	00c00044 	movi	r3,1
   1b1bc:	10c01315 	stw	r3,76(r2)
   1b1c0:	00000406 	br	1b1d4 <alt_sys_init+0x7fc>
   1b1c4:	008000b4 	movhi	r2,2
   1b1c8:	1085b904 	addi	r2,r2,5860
   1b1cc:	00c00084 	movi	r3,2
   1b1d0:	10c01315 	stw	r3,76(r2)
   1b1d4:	e0bffec3 	ldbu	r2,-5(fp)
   1b1d8:	00c00804 	movi	r3,32
   1b1dc:	1885c83a 	sub	r2,r3,r2
   1b1e0:	00ffffc4 	movi	r3,-1
   1b1e4:	1886d83a 	srl	r3,r3,r2
   1b1e8:	008000b4 	movhi	r2,2
   1b1ec:	1085b904 	addi	r2,r2,5860
   1b1f0:	10c01415 	stw	r3,80(r2)
   1b1f4:	e0fffec3 	ldbu	r3,-5(fp)
   1b1f8:	008000b4 	movhi	r2,2
   1b1fc:	1085b904 	addi	r2,r2,5860
   1b200:	10801317 	ldw	r2,76(r2)
   1b204:	1887883a 	add	r3,r3,r2
   1b208:	008000b4 	movhi	r2,2
   1b20c:	1085b904 	addi	r2,r2,5860
   1b210:	10c01515 	stw	r3,84(r2)
   1b214:	e0bfff03 	ldbu	r2,-4(fp)
   1b218:	00c00804 	movi	r3,32
   1b21c:	1885c83a 	sub	r2,r3,r2
   1b220:	00ffffc4 	movi	r3,-1
   1b224:	1886d83a 	srl	r3,r3,r2
   1b228:	008000b4 	movhi	r2,2
   1b22c:	1085b904 	addi	r2,r2,5860
   1b230:	10c01615 	stw	r3,88(r2)
   1b234:	010000b4 	movhi	r4,2
   1b238:	2105b904 	addi	r4,r4,5860
   1b23c:	001a96c0 	call	1a96c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_RGB_RESAMPLER, VGA_Subsystem_VGA_Pixel_RGB_Resampler);
   1b240:	008000b4 	movhi	r2,2
   1b244:	1085d004 	addi	r2,r2,5952
   1b248:	10800a17 	ldw	r2,40(r2)
   1b24c:	10800017 	ldw	r2,0(r2)
   1b250:	10c003cc 	andi	r3,r2,15
   1b254:	008000b4 	movhi	r2,2
   1b258:	1085d004 	addi	r2,r2,5952
   1b25c:	10c00b15 	stw	r3,44(r2)
   1b260:	008000b4 	movhi	r2,2
   1b264:	1085d004 	addi	r2,r2,5952
   1b268:	10800a17 	ldw	r2,40(r2)
   1b26c:	10800017 	ldw	r2,0(r2)
   1b270:	1005d13a 	srai	r2,r2,4
   1b274:	10c0004c 	andi	r3,r2,1
   1b278:	008000b4 	movhi	r2,2
   1b27c:	1085d004 	addi	r2,r2,5952
   1b280:	10c00c15 	stw	r3,48(r2)
   1b284:	008000b4 	movhi	r2,2
   1b288:	1085d004 	addi	r2,r2,5952
   1b28c:	10800a17 	ldw	r2,40(r2)
   1b290:	10800017 	ldw	r2,0(r2)
   1b294:	1005d17a 	srai	r2,r2,5
   1b298:	10c0004c 	andi	r3,r2,1
   1b29c:	008000b4 	movhi	r2,2
   1b2a0:	1085d004 	addi	r2,r2,5952
   1b2a4:	10c00d15 	stw	r3,52(r2)
   1b2a8:	008000b4 	movhi	r2,2
   1b2ac:	1085d004 	addi	r2,r2,5952
   1b2b0:	10800a17 	ldw	r2,40(r2)
   1b2b4:	10800017 	ldw	r2,0(r2)
   1b2b8:	1005d43a 	srai	r2,r2,16
   1b2bc:	10c003cc 	andi	r3,r2,15
   1b2c0:	008000b4 	movhi	r2,2
   1b2c4:	1085d004 	addi	r2,r2,5952
   1b2c8:	10c00e15 	stw	r3,56(r2)
   1b2cc:	008000b4 	movhi	r2,2
   1b2d0:	1085d004 	addi	r2,r2,5952
   1b2d4:	10800a17 	ldw	r2,40(r2)
   1b2d8:	10800017 	ldw	r2,0(r2)
   1b2dc:	1005d53a 	srai	r2,r2,20
   1b2e0:	10c0004c 	andi	r3,r2,1
   1b2e4:	008000b4 	movhi	r2,2
   1b2e8:	1085d004 	addi	r2,r2,5952
   1b2ec:	10c00f15 	stw	r3,60(r2)
   1b2f0:	008000b4 	movhi	r2,2
   1b2f4:	1085d004 	addi	r2,r2,5952
   1b2f8:	10800a17 	ldw	r2,40(r2)
   1b2fc:	10800017 	ldw	r2,0(r2)
   1b300:	1005d57a 	srai	r2,r2,21
   1b304:	10c0004c 	andi	r3,r2,1
   1b308:	008000b4 	movhi	r2,2
   1b30c:	1085d004 	addi	r2,r2,5952
   1b310:	10c01015 	stw	r3,64(r2)
   1b314:	010000b4 	movhi	r4,2
   1b318:	2105d004 	addi	r4,r4,5952
   1b31c:	001a96c0 	call	1a96c <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   1b320:	010000b4 	movhi	r4,2
   1b324:	2105e104 	addi	r4,r4,6020
   1b328:	001a96c0 	call	1a96c <alt_dev_reg>
}
   1b32c:	0001883a 	nop
   1b330:	e037883a 	mov	sp,fp
   1b334:	dfc00117 	ldw	ra,4(sp)
   1b338:	df000017 	ldw	fp,0(sp)
   1b33c:	dec00204 	addi	sp,sp,8
   1b340:	f800283a 	ret

0001b344 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1b344:	defffa04 	addi	sp,sp,-24
   1b348:	dfc00515 	stw	ra,20(sp)
   1b34c:	df000415 	stw	fp,16(sp)
   1b350:	df000404 	addi	fp,sp,16
   1b354:	e13ffd15 	stw	r4,-12(fp)
   1b358:	e17ffe15 	stw	r5,-8(fp)
   1b35c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1b360:	e0bffd17 	ldw	r2,-12(fp)
   1b364:	10800017 	ldw	r2,0(r2)
   1b368:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1b36c:	e0bffc17 	ldw	r2,-16(fp)
   1b370:	10c00a04 	addi	r3,r2,40
   1b374:	e0bffd17 	ldw	r2,-12(fp)
   1b378:	10800217 	ldw	r2,8(r2)
   1b37c:	100f883a 	mov	r7,r2
   1b380:	e1bfff17 	ldw	r6,-4(fp)
   1b384:	e17ffe17 	ldw	r5,-8(fp)
   1b388:	1809883a 	mov	r4,r3
   1b38c:	001bae80 	call	1bae8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1b390:	e037883a 	mov	sp,fp
   1b394:	dfc00117 	ldw	ra,4(sp)
   1b398:	df000017 	ldw	fp,0(sp)
   1b39c:	dec00204 	addi	sp,sp,8
   1b3a0:	f800283a 	ret

0001b3a4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1b3a4:	defffa04 	addi	sp,sp,-24
   1b3a8:	dfc00515 	stw	ra,20(sp)
   1b3ac:	df000415 	stw	fp,16(sp)
   1b3b0:	df000404 	addi	fp,sp,16
   1b3b4:	e13ffd15 	stw	r4,-12(fp)
   1b3b8:	e17ffe15 	stw	r5,-8(fp)
   1b3bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1b3c0:	e0bffd17 	ldw	r2,-12(fp)
   1b3c4:	10800017 	ldw	r2,0(r2)
   1b3c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1b3cc:	e0bffc17 	ldw	r2,-16(fp)
   1b3d0:	10c00a04 	addi	r3,r2,40
   1b3d4:	e0bffd17 	ldw	r2,-12(fp)
   1b3d8:	10800217 	ldw	r2,8(r2)
   1b3dc:	100f883a 	mov	r7,r2
   1b3e0:	e1bfff17 	ldw	r6,-4(fp)
   1b3e4:	e17ffe17 	ldw	r5,-8(fp)
   1b3e8:	1809883a 	mov	r4,r3
   1b3ec:	001bda40 	call	1bda4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1b3f0:	e037883a 	mov	sp,fp
   1b3f4:	dfc00117 	ldw	ra,4(sp)
   1b3f8:	df000017 	ldw	fp,0(sp)
   1b3fc:	dec00204 	addi	sp,sp,8
   1b400:	f800283a 	ret

0001b404 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1b404:	defffc04 	addi	sp,sp,-16
   1b408:	dfc00315 	stw	ra,12(sp)
   1b40c:	df000215 	stw	fp,8(sp)
   1b410:	df000204 	addi	fp,sp,8
   1b414:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1b418:	e0bfff17 	ldw	r2,-4(fp)
   1b41c:	10800017 	ldw	r2,0(r2)
   1b420:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1b424:	e0bffe17 	ldw	r2,-8(fp)
   1b428:	10c00a04 	addi	r3,r2,40
   1b42c:	e0bfff17 	ldw	r2,-4(fp)
   1b430:	10800217 	ldw	r2,8(r2)
   1b434:	100b883a 	mov	r5,r2
   1b438:	1809883a 	mov	r4,r3
   1b43c:	001b9900 	call	1b990 <altera_avalon_jtag_uart_close>
}
   1b440:	e037883a 	mov	sp,fp
   1b444:	dfc00117 	ldw	ra,4(sp)
   1b448:	df000017 	ldw	fp,0(sp)
   1b44c:	dec00204 	addi	sp,sp,8
   1b450:	f800283a 	ret

0001b454 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1b454:	defffa04 	addi	sp,sp,-24
   1b458:	dfc00515 	stw	ra,20(sp)
   1b45c:	df000415 	stw	fp,16(sp)
   1b460:	df000404 	addi	fp,sp,16
   1b464:	e13ffd15 	stw	r4,-12(fp)
   1b468:	e17ffe15 	stw	r5,-8(fp)
   1b46c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1b470:	e0bffd17 	ldw	r2,-12(fp)
   1b474:	10800017 	ldw	r2,0(r2)
   1b478:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1b47c:	e0bffc17 	ldw	r2,-16(fp)
   1b480:	10800a04 	addi	r2,r2,40
   1b484:	e1bfff17 	ldw	r6,-4(fp)
   1b488:	e17ffe17 	ldw	r5,-8(fp)
   1b48c:	1009883a 	mov	r4,r2
   1b490:	001b9f80 	call	1b9f8 <altera_avalon_jtag_uart_ioctl>
}
   1b494:	e037883a 	mov	sp,fp
   1b498:	dfc00117 	ldw	ra,4(sp)
   1b49c:	df000017 	ldw	fp,0(sp)
   1b4a0:	dec00204 	addi	sp,sp,8
   1b4a4:	f800283a 	ret

0001b4a8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1b4a8:	defff204 	addi	sp,sp,-56
   1b4ac:	dfc00d15 	stw	ra,52(sp)
   1b4b0:	df000c15 	stw	fp,48(sp)
   1b4b4:	df000c04 	addi	fp,sp,48
   1b4b8:	e13ff915 	stw	r4,-28(fp)
   1b4bc:	e17ffa15 	stw	r5,-24(fp)
   1b4c0:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   1b4c4:	e0bff917 	ldw	r2,-28(fp)
   1b4c8:	10800c04 	addi	r2,r2,48
   1b4cc:	e0bff415 	stw	r2,-48(fp)
   1b4d0:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   1b4d4:	e0bff80b 	ldhu	r2,-32(fp)
   1b4d8:	e0fff884 	addi	r3,fp,-30
   1b4dc:	180b883a 	mov	r5,r3
   1b4e0:	1009883a 	mov	r4,r2
   1b4e4:	00156480 	call	15648 <OSFlagCreate>
   1b4e8:	1007883a 	mov	r3,r2
   1b4ec:	e0bff417 	ldw	r2,-48(fp)
   1b4f0:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   1b4f4:	e0bff917 	ldw	r2,-28(fp)
   1b4f8:	10800a04 	addi	r2,r2,40
   1b4fc:	e0bff515 	stw	r2,-44(fp)
   1b500:	00800044 	movi	r2,1
   1b504:	e0bff78d 	sth	r2,-34(fp)
   1b508:	e0bff78b 	ldhu	r2,-34(fp)
   1b50c:	1009883a 	mov	r4,r2
   1b510:	001835c0 	call	1835c <OSSemCreate>
   1b514:	1007883a 	mov	r3,r2
   1b518:	e0bff517 	ldw	r2,-44(fp)
   1b51c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   1b520:	e0bff917 	ldw	r2,-28(fp)
   1b524:	10800b04 	addi	r2,r2,44
   1b528:	e0bff615 	stw	r2,-40(fp)
   1b52c:	00800044 	movi	r2,1
   1b530:	e0bff70d 	sth	r2,-36(fp)
   1b534:	e0bff70b 	ldhu	r2,-36(fp)
   1b538:	1009883a 	mov	r4,r2
   1b53c:	001835c0 	call	1835c <OSSemCreate>
   1b540:	1007883a 	mov	r3,r2
   1b544:	e0bff617 	ldw	r2,-40(fp)
   1b548:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1b54c:	e0bff917 	ldw	r2,-28(fp)
   1b550:	00c00044 	movi	r3,1
   1b554:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1b558:	e0bff917 	ldw	r2,-28(fp)
   1b55c:	10800017 	ldw	r2,0(r2)
   1b560:	10800104 	addi	r2,r2,4
   1b564:	1007883a 	mov	r3,r2
   1b568:	e0bff917 	ldw	r2,-28(fp)
   1b56c:	10800817 	ldw	r2,32(r2)
   1b570:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   1b574:	e0bffb17 	ldw	r2,-20(fp)
   1b578:	018000b4 	movhi	r6,2
   1b57c:	31ad7904 	addi	r6,r6,-18972
   1b580:	e17ff917 	ldw	r5,-28(fp)
   1b584:	1009883a 	mov	r4,r2
   1b588:	001d9080 	call	1d908 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1b58c:	e0bff917 	ldw	r2,-28(fp)
   1b590:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1b594:	e0bff917 	ldw	r2,-28(fp)
   1b598:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1b59c:	d0e82617 	ldw	r3,-24424(gp)
   1b5a0:	e1fff917 	ldw	r7,-28(fp)
   1b5a4:	018000b4 	movhi	r6,2
   1b5a8:	31ae2304 	addi	r6,r6,-18292
   1b5ac:	180b883a 	mov	r5,r3
   1b5b0:	1009883a 	mov	r4,r2
   1b5b4:	001d4180 	call	1d418 <alt_alarm_start>
   1b5b8:	1000040e 	bge	r2,zero,1b5cc <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1b5bc:	e0fff917 	ldw	r3,-28(fp)
   1b5c0:	00a00034 	movhi	r2,32768
   1b5c4:	10bfffc4 	addi	r2,r2,-1
   1b5c8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1b5cc:	0001883a 	nop
   1b5d0:	e037883a 	mov	sp,fp
   1b5d4:	dfc00117 	ldw	ra,4(sp)
   1b5d8:	df000017 	ldw	fp,0(sp)
   1b5dc:	dec00204 	addi	sp,sp,8
   1b5e0:	f800283a 	ret

0001b5e4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1b5e4:	defff104 	addi	sp,sp,-60
   1b5e8:	dfc00e15 	stw	ra,56(sp)
   1b5ec:	df000d15 	stw	fp,52(sp)
   1b5f0:	df000d04 	addi	fp,sp,52
   1b5f4:	e13ffe15 	stw	r4,-8(fp)
   1b5f8:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1b5fc:	e0bffe17 	ldw	r2,-8(fp)
   1b600:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   1b604:	e0bff517 	ldw	r2,-44(fp)
   1b608:	10800017 	ldw	r2,0(r2)
   1b60c:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1b610:	e0bff617 	ldw	r2,-40(fp)
   1b614:	10800104 	addi	r2,r2,4
   1b618:	10800037 	ldwio	r2,0(r2)
   1b61c:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1b620:	e0bff717 	ldw	r2,-36(fp)
   1b624:	1080c00c 	andi	r2,r2,768
   1b628:	10009126 	beq	r2,zero,1b870 <altera_avalon_jtag_uart_irq+0x28c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1b62c:	e0bff717 	ldw	r2,-36(fp)
   1b630:	1080400c 	andi	r2,r2,256
   1b634:	10004726 	beq	r2,zero,1b754 <altera_avalon_jtag_uart_irq+0x170>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1b638:	00800074 	movhi	r2,1
   1b63c:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1b640:	e0bff517 	ldw	r2,-44(fp)
   1b644:	10800d17 	ldw	r2,52(r2)
   1b648:	10800044 	addi	r2,r2,1
   1b64c:	1081ffcc 	andi	r2,r2,2047
   1b650:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   1b654:	e0bff517 	ldw	r2,-44(fp)
   1b658:	10c00e17 	ldw	r3,56(r2)
   1b65c:	e0bff817 	ldw	r2,-32(fp)
   1b660:	18802726 	beq	r3,r2,1b700 <altera_avalon_jtag_uart_irq+0x11c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1b664:	e0bff617 	ldw	r2,-40(fp)
   1b668:	10800037 	ldwio	r2,0(r2)
   1b66c:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1b670:	e0bff317 	ldw	r2,-52(fp)
   1b674:	10a0000c 	andi	r2,r2,32768
   1b678:	10002326 	beq	r2,zero,1b708 <altera_avalon_jtag_uart_irq+0x124>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1b67c:	e0bff517 	ldw	r2,-44(fp)
   1b680:	10800d17 	ldw	r2,52(r2)
   1b684:	e0fff317 	ldw	r3,-52(fp)
   1b688:	1809883a 	mov	r4,r3
   1b68c:	e0fff517 	ldw	r3,-44(fp)
   1b690:	1885883a 	add	r2,r3,r2
   1b694:	10801104 	addi	r2,r2,68
   1b698:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1b69c:	e0bff517 	ldw	r2,-44(fp)
   1b6a0:	10800d17 	ldw	r2,52(r2)
   1b6a4:	10800044 	addi	r2,r2,1
   1b6a8:	10c1ffcc 	andi	r3,r2,2047
   1b6ac:	e0bff517 	ldw	r2,-44(fp)
   1b6b0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   1b6b4:	e0bff517 	ldw	r2,-44(fp)
   1b6b8:	10800c17 	ldw	r2,48(r2)
   1b6bc:	e0bffa15 	stw	r2,-24(fp)
   1b6c0:	00800044 	movi	r2,1
   1b6c4:	e0bffb0d 	sth	r2,-20(fp)
   1b6c8:	00800044 	movi	r2,1
   1b6cc:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1b6d0:	d0a81143 	ldbu	r2,-24507(gp)
   1b6d4:	10803fcc 	andi	r2,r2,255
   1b6d8:	103fd926 	beq	r2,zero,1b640 <altera_avalon_jtag_uart_irq+0x5c>
  {
    OSFlagPost (group, flags, opt, &err);
   1b6dc:	e0bffb0b 	ldhu	r2,-20(fp)
   1b6e0:	e0fffb83 	ldbu	r3,-18(fp)
   1b6e4:	e13ffcc4 	addi	r4,fp,-13
   1b6e8:	200f883a 	mov	r7,r4
   1b6ec:	180d883a 	mov	r6,r3
   1b6f0:	100b883a 	mov	r5,r2
   1b6f4:	e13ffa17 	ldw	r4,-24(fp)
   1b6f8:	00162240 	call	16224 <OSFlagPost>
      }
   1b6fc:	003fd006 	br	1b640 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   1b700:	0001883a 	nop
   1b704:	00000106 	br	1b70c <altera_avalon_jtag_uart_irq+0x128>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   1b708:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1b70c:	e0bff317 	ldw	r2,-52(fp)
   1b710:	10bfffec 	andhi	r2,r2,65535
   1b714:	10000f26 	beq	r2,zero,1b754 <altera_avalon_jtag_uart_irq+0x170>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1b718:	e0bff517 	ldw	r2,-44(fp)
   1b71c:	10c00817 	ldw	r3,32(r2)
   1b720:	00bfff84 	movi	r2,-2
   1b724:	1886703a 	and	r3,r3,r2
   1b728:	e0bff517 	ldw	r2,-44(fp)
   1b72c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1b730:	e0bff617 	ldw	r2,-40(fp)
   1b734:	10800104 	addi	r2,r2,4
   1b738:	1007883a 	mov	r3,r2
   1b73c:	e0bff517 	ldw	r2,-44(fp)
   1b740:	10800817 	ldw	r2,32(r2)
   1b744:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1b748:	e0bff617 	ldw	r2,-40(fp)
   1b74c:	10800104 	addi	r2,r2,4
   1b750:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1b754:	e0bff717 	ldw	r2,-36(fp)
   1b758:	1080800c 	andi	r2,r2,512
   1b75c:	103fac26 	beq	r2,zero,1b610 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1b760:	e0bff717 	ldw	r2,-36(fp)
   1b764:	1004d43a 	srli	r2,r2,16
   1b768:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1b76c:	00002606 	br	1b808 <altera_avalon_jtag_uart_irq+0x224>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1b770:	e0bff617 	ldw	r2,-40(fp)
   1b774:	e0fff517 	ldw	r3,-44(fp)
   1b778:	18c01017 	ldw	r3,64(r3)
   1b77c:	e13ff517 	ldw	r4,-44(fp)
   1b780:	20c7883a 	add	r3,r4,r3
   1b784:	18c21104 	addi	r3,r3,2116
   1b788:	18c00003 	ldbu	r3,0(r3)
   1b78c:	18c03fcc 	andi	r3,r3,255
   1b790:	18c0201c 	xori	r3,r3,128
   1b794:	18ffe004 	addi	r3,r3,-128
   1b798:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1b79c:	e0bff517 	ldw	r2,-44(fp)
   1b7a0:	10801017 	ldw	r2,64(r2)
   1b7a4:	10800044 	addi	r2,r2,1
   1b7a8:	10c1ffcc 	andi	r3,r2,2047
   1b7ac:	e0bff517 	ldw	r2,-44(fp)
   1b7b0:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   1b7b4:	e0bff517 	ldw	r2,-44(fp)
   1b7b8:	10800c17 	ldw	r2,48(r2)
   1b7bc:	e0bff915 	stw	r2,-28(fp)
   1b7c0:	00800084 	movi	r2,2
   1b7c4:	e0bffc0d 	sth	r2,-16(fp)
   1b7c8:	00800044 	movi	r2,1
   1b7cc:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1b7d0:	d0a81143 	ldbu	r2,-24507(gp)
   1b7d4:	10803fcc 	andi	r2,r2,255
   1b7d8:	10000826 	beq	r2,zero,1b7fc <altera_avalon_jtag_uart_irq+0x218>
  {
    OSFlagPost (group, flags, opt, &err);
   1b7dc:	e0bffc0b 	ldhu	r2,-16(fp)
   1b7e0:	e0fffc83 	ldbu	r3,-14(fp)
   1b7e4:	e13ffd04 	addi	r4,fp,-12
   1b7e8:	200f883a 	mov	r7,r4
   1b7ec:	180d883a 	mov	r6,r3
   1b7f0:	100b883a 	mov	r5,r2
   1b7f4:	e13ff917 	ldw	r4,-28(fp)
   1b7f8:	00162240 	call	16224 <OSFlagPost>

        space--;
   1b7fc:	e0bff417 	ldw	r2,-48(fp)
   1b800:	10bfffc4 	addi	r2,r2,-1
   1b804:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1b808:	e0bff417 	ldw	r2,-48(fp)
   1b80c:	10000526 	beq	r2,zero,1b824 <altera_avalon_jtag_uart_irq+0x240>
   1b810:	e0bff517 	ldw	r2,-44(fp)
   1b814:	10c01017 	ldw	r3,64(r2)
   1b818:	e0bff517 	ldw	r2,-44(fp)
   1b81c:	10800f17 	ldw	r2,60(r2)
   1b820:	18bfd31e 	bne	r3,r2,1b770 <altera_avalon_jtag_uart_irq+0x18c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1b824:	e0bff417 	ldw	r2,-48(fp)
   1b828:	103f7926 	beq	r2,zero,1b610 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1b82c:	e0bff517 	ldw	r2,-44(fp)
   1b830:	10c00817 	ldw	r3,32(r2)
   1b834:	00bfff44 	movi	r2,-3
   1b838:	1886703a 	and	r3,r3,r2
   1b83c:	e0bff517 	ldw	r2,-44(fp)
   1b840:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1b844:	e0bff517 	ldw	r2,-44(fp)
   1b848:	10800017 	ldw	r2,0(r2)
   1b84c:	10800104 	addi	r2,r2,4
   1b850:	1007883a 	mov	r3,r2
   1b854:	e0bff517 	ldw	r2,-44(fp)
   1b858:	10800817 	ldw	r2,32(r2)
   1b85c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1b860:	e0bff617 	ldw	r2,-40(fp)
   1b864:	10800104 	addi	r2,r2,4
   1b868:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1b86c:	003f6806 	br	1b610 <altera_avalon_jtag_uart_irq+0x2c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   1b870:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   1b874:	0001883a 	nop
   1b878:	e037883a 	mov	sp,fp
   1b87c:	dfc00117 	ldw	ra,4(sp)
   1b880:	df000017 	ldw	fp,0(sp)
   1b884:	dec00204 	addi	sp,sp,8
   1b888:	f800283a 	ret

0001b88c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1b88c:	defff904 	addi	sp,sp,-28
   1b890:	dfc00615 	stw	ra,24(sp)
   1b894:	df000515 	stw	fp,20(sp)
   1b898:	df000504 	addi	fp,sp,20
   1b89c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1b8a0:	e0bfff17 	ldw	r2,-4(fp)
   1b8a4:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1b8a8:	e0bffb17 	ldw	r2,-20(fp)
   1b8ac:	10800017 	ldw	r2,0(r2)
   1b8b0:	10800104 	addi	r2,r2,4
   1b8b4:	10800037 	ldwio	r2,0(r2)
   1b8b8:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1b8bc:	e0bffc17 	ldw	r2,-16(fp)
   1b8c0:	1081000c 	andi	r2,r2,1024
   1b8c4:	10000b26 	beq	r2,zero,1b8f4 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1b8c8:	e0bffb17 	ldw	r2,-20(fp)
   1b8cc:	10800017 	ldw	r2,0(r2)
   1b8d0:	10800104 	addi	r2,r2,4
   1b8d4:	1007883a 	mov	r3,r2
   1b8d8:	e0bffb17 	ldw	r2,-20(fp)
   1b8dc:	10800817 	ldw	r2,32(r2)
   1b8e0:	10810014 	ori	r2,r2,1024
   1b8e4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   1b8e8:	e0bffb17 	ldw	r2,-20(fp)
   1b8ec:	10000915 	stw	zero,36(r2)
   1b8f0:	00002106 	br	1b978 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1b8f4:	e0bffb17 	ldw	r2,-20(fp)
   1b8f8:	10c00917 	ldw	r3,36(r2)
   1b8fc:	00a00034 	movhi	r2,32768
   1b900:	10bfff04 	addi	r2,r2,-4
   1b904:	10c01c36 	bltu	r2,r3,1b978 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
   1b908:	e0bffb17 	ldw	r2,-20(fp)
   1b90c:	10800917 	ldw	r2,36(r2)
   1b910:	10c00044 	addi	r3,r2,1
   1b914:	e0bffb17 	ldw	r2,-20(fp)
   1b918:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   1b91c:	e0bffb17 	ldw	r2,-20(fp)
   1b920:	10c00917 	ldw	r3,36(r2)
   1b924:	e0bffb17 	ldw	r2,-20(fp)
   1b928:	10800117 	ldw	r2,4(r2)
   1b92c:	18801236 	bltu	r3,r2,1b978 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   1b930:	e0bffb17 	ldw	r2,-20(fp)
   1b934:	10800c17 	ldw	r2,48(r2)
   1b938:	e0bffd15 	stw	r2,-12(fp)
   1b93c:	00800104 	movi	r2,4
   1b940:	e0bffe0d 	sth	r2,-8(fp)
   1b944:	00800044 	movi	r2,1
   1b948:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1b94c:	d0a81143 	ldbu	r2,-24507(gp)
   1b950:	10803fcc 	andi	r2,r2,255
   1b954:	10000826 	beq	r2,zero,1b978 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
   1b958:	e0bffe0b 	ldhu	r2,-8(fp)
   1b95c:	e0fffe83 	ldbu	r3,-6(fp)
   1b960:	e13ffec4 	addi	r4,fp,-5
   1b964:	200f883a 	mov	r7,r4
   1b968:	180d883a 	mov	r6,r3
   1b96c:	100b883a 	mov	r5,r2
   1b970:	e13ffd17 	ldw	r4,-12(fp)
   1b974:	00162240 	call	16224 <OSFlagPost>
   1b978:	d0a82617 	ldw	r2,-24424(gp)
    }
  }

  return alt_ticks_per_second();
}
   1b97c:	e037883a 	mov	sp,fp
   1b980:	dfc00117 	ldw	ra,4(sp)
   1b984:	df000017 	ldw	fp,0(sp)
   1b988:	dec00204 	addi	sp,sp,8
   1b98c:	f800283a 	ret

0001b990 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1b990:	defffd04 	addi	sp,sp,-12
   1b994:	df000215 	stw	fp,8(sp)
   1b998:	df000204 	addi	fp,sp,8
   1b99c:	e13ffe15 	stw	r4,-8(fp)
   1b9a0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1b9a4:	00000506 	br	1b9bc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1b9a8:	e0bfff17 	ldw	r2,-4(fp)
   1b9ac:	1090000c 	andi	r2,r2,16384
   1b9b0:	10000226 	beq	r2,zero,1b9bc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1b9b4:	00bffd44 	movi	r2,-11
   1b9b8:	00000b06 	br	1b9e8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1b9bc:	e0bffe17 	ldw	r2,-8(fp)
   1b9c0:	10c01017 	ldw	r3,64(r2)
   1b9c4:	e0bffe17 	ldw	r2,-8(fp)
   1b9c8:	10800f17 	ldw	r2,60(r2)
   1b9cc:	18800526 	beq	r3,r2,1b9e4 <altera_avalon_jtag_uart_close+0x54>
   1b9d0:	e0bffe17 	ldw	r2,-8(fp)
   1b9d4:	10c00917 	ldw	r3,36(r2)
   1b9d8:	e0bffe17 	ldw	r2,-8(fp)
   1b9dc:	10800117 	ldw	r2,4(r2)
   1b9e0:	18bff136 	bltu	r3,r2,1b9a8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1b9e4:	0005883a 	mov	r2,zero
}
   1b9e8:	e037883a 	mov	sp,fp
   1b9ec:	df000017 	ldw	fp,0(sp)
   1b9f0:	dec00104 	addi	sp,sp,4
   1b9f4:	f800283a 	ret

0001b9f8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1b9f8:	defffa04 	addi	sp,sp,-24
   1b9fc:	df000515 	stw	fp,20(sp)
   1ba00:	df000504 	addi	fp,sp,20
   1ba04:	e13ffd15 	stw	r4,-12(fp)
   1ba08:	e17ffe15 	stw	r5,-8(fp)
   1ba0c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   1ba10:	00bff9c4 	movi	r2,-25
   1ba14:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1ba18:	e0bffe17 	ldw	r2,-8(fp)
   1ba1c:	10da8060 	cmpeqi	r3,r2,27137
   1ba20:	1800031e 	bne	r3,zero,1ba30 <altera_avalon_jtag_uart_ioctl+0x38>
   1ba24:	109a80a0 	cmpeqi	r2,r2,27138
   1ba28:	1000181e 	bne	r2,zero,1ba8c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   1ba2c:	00002906 	br	1bad4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1ba30:	e0bffd17 	ldw	r2,-12(fp)
   1ba34:	10c00117 	ldw	r3,4(r2)
   1ba38:	00a00034 	movhi	r2,32768
   1ba3c:	10bfffc4 	addi	r2,r2,-1
   1ba40:	18802126 	beq	r3,r2,1bac8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   1ba44:	e0bfff17 	ldw	r2,-4(fp)
   1ba48:	10800017 	ldw	r2,0(r2)
   1ba4c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1ba50:	e0bffc17 	ldw	r2,-16(fp)
   1ba54:	10800090 	cmplti	r2,r2,2
   1ba58:	1000061e 	bne	r2,zero,1ba74 <altera_avalon_jtag_uart_ioctl+0x7c>
   1ba5c:	e0fffc17 	ldw	r3,-16(fp)
   1ba60:	00a00034 	movhi	r2,32768
   1ba64:	10bfffc4 	addi	r2,r2,-1
   1ba68:	18800226 	beq	r3,r2,1ba74 <altera_avalon_jtag_uart_ioctl+0x7c>
   1ba6c:	e0bffc17 	ldw	r2,-16(fp)
   1ba70:	00000206 	br	1ba7c <altera_avalon_jtag_uart_ioctl+0x84>
   1ba74:	00a00034 	movhi	r2,32768
   1ba78:	10bfff84 	addi	r2,r2,-2
   1ba7c:	e0fffd17 	ldw	r3,-12(fp)
   1ba80:	18800115 	stw	r2,4(r3)
      rc = 0;
   1ba84:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1ba88:	00000f06 	br	1bac8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1ba8c:	e0bffd17 	ldw	r2,-12(fp)
   1ba90:	10c00117 	ldw	r3,4(r2)
   1ba94:	00a00034 	movhi	r2,32768
   1ba98:	10bfffc4 	addi	r2,r2,-1
   1ba9c:	18800c26 	beq	r3,r2,1bad0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1baa0:	e0bffd17 	ldw	r2,-12(fp)
   1baa4:	10c00917 	ldw	r3,36(r2)
   1baa8:	e0bffd17 	ldw	r2,-12(fp)
   1baac:	10800117 	ldw	r2,4(r2)
   1bab0:	1885803a 	cmpltu	r2,r3,r2
   1bab4:	10c03fcc 	andi	r3,r2,255
   1bab8:	e0bfff17 	ldw	r2,-4(fp)
   1babc:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1bac0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1bac4:	00000206 	br	1bad0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   1bac8:	0001883a 	nop
   1bacc:	00000106 	br	1bad4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   1bad0:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1bad4:	e0bffb17 	ldw	r2,-20(fp)
}
   1bad8:	e037883a 	mov	sp,fp
   1badc:	df000017 	ldw	fp,0(sp)
   1bae0:	dec00104 	addi	sp,sp,4
   1bae4:	f800283a 	ret

0001bae8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1bae8:	deffed04 	addi	sp,sp,-76
   1baec:	dfc01215 	stw	ra,72(sp)
   1baf0:	df001115 	stw	fp,68(sp)
   1baf4:	df001104 	addi	fp,sp,68
   1baf8:	e13ffc15 	stw	r4,-16(fp)
   1bafc:	e17ffd15 	stw	r5,-12(fp)
   1bb00:	e1bffe15 	stw	r6,-8(fp)
   1bb04:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1bb08:	e0bffd17 	ldw	r2,-12(fp)
   1bb0c:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   1bb10:	e0bffc17 	ldw	r2,-16(fp)
   1bb14:	10800a17 	ldw	r2,40(r2)
   1bb18:	e0bff815 	stw	r2,-32(fp)
   1bb1c:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   1bb20:	e0bff90b 	ldhu	r2,-28(fp)
   1bb24:	e0fffb04 	addi	r3,fp,-20
   1bb28:	180d883a 	mov	r6,r3
   1bb2c:	100b883a 	mov	r5,r2
   1bb30:	e13ff817 	ldw	r4,-32(fp)
   1bb34:	00186740 	call	18674 <OSSemPend>

  while (space > 0)
   1bb38:	00006106 	br	1bcc0 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1bb3c:	e0bffc17 	ldw	r2,-16(fp)
   1bb40:	10800d17 	ldw	r2,52(r2)
   1bb44:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
   1bb48:	e0bffc17 	ldw	r2,-16(fp)
   1bb4c:	10800e17 	ldw	r2,56(r2)
   1bb50:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
   1bb54:	e0fff317 	ldw	r3,-52(fp)
   1bb58:	e0bff417 	ldw	r2,-48(fp)
   1bb5c:	18800536 	bltu	r3,r2,1bb74 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   1bb60:	e0fff317 	ldw	r3,-52(fp)
   1bb64:	e0bff417 	ldw	r2,-48(fp)
   1bb68:	1885c83a 	sub	r2,r3,r2
   1bb6c:	e0bff115 	stw	r2,-60(fp)
   1bb70:	00000406 	br	1bb84 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1bb74:	00c20004 	movi	r3,2048
   1bb78:	e0bff417 	ldw	r2,-48(fp)
   1bb7c:	1885c83a 	sub	r2,r3,r2
   1bb80:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   1bb84:	e0bff117 	ldw	r2,-60(fp)
   1bb88:	10001e26 	beq	r2,zero,1bc04 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   1bb8c:	e0fffe17 	ldw	r3,-8(fp)
   1bb90:	e0bff117 	ldw	r2,-60(fp)
   1bb94:	1880022e 	bgeu	r3,r2,1bba0 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
   1bb98:	e0bffe17 	ldw	r2,-8(fp)
   1bb9c:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1bba0:	e0bffc17 	ldw	r2,-16(fp)
   1bba4:	10c01104 	addi	r3,r2,68
   1bba8:	e0bff417 	ldw	r2,-48(fp)
   1bbac:	1885883a 	add	r2,r3,r2
   1bbb0:	e1bff117 	ldw	r6,-60(fp)
   1bbb4:	100b883a 	mov	r5,r2
   1bbb8:	e13ff017 	ldw	r4,-64(fp)
   1bbbc:	0001ec80 	call	1ec8 <memcpy>
      ptr   += n;
   1bbc0:	e0fff017 	ldw	r3,-64(fp)
   1bbc4:	e0bff117 	ldw	r2,-60(fp)
   1bbc8:	1885883a 	add	r2,r3,r2
   1bbcc:	e0bff015 	stw	r2,-64(fp)
      space -= n;
   1bbd0:	e0fffe17 	ldw	r3,-8(fp)
   1bbd4:	e0bff117 	ldw	r2,-60(fp)
   1bbd8:	1885c83a 	sub	r2,r3,r2
   1bbdc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1bbe0:	e0fff417 	ldw	r3,-48(fp)
   1bbe4:	e0bff117 	ldw	r2,-60(fp)
   1bbe8:	1885883a 	add	r2,r3,r2
   1bbec:	10c1ffcc 	andi	r3,r2,2047
   1bbf0:	e0bffc17 	ldw	r2,-16(fp)
   1bbf4:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   1bbf8:	e0bffe17 	ldw	r2,-8(fp)
   1bbfc:	00bfcf16 	blt	zero,r2,1bb3c <altera_avalon_jtag_uart_read+0x54>
   1bc00:	00000106 	br	1bc08 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   1bc04:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   1bc08:	e0fff017 	ldw	r3,-64(fp)
   1bc0c:	e0bffd17 	ldw	r2,-12(fp)
   1bc10:	18802e1e 	bne	r3,r2,1bccc <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1bc14:	e0bfff17 	ldw	r2,-4(fp)
   1bc18:	1090000c 	andi	r2,r2,16384
   1bc1c:	10002d1e 	bne	r2,zero,1bcd4 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   1bc20:	d0a81143 	ldbu	r2,-24507(gp)
   1bc24:	10803fcc 	andi	r2,r2,255
   1bc28:	10800058 	cmpnei	r2,r2,1
   1bc2c:	1000161e 	bne	r2,zero,1bc88 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   1bc30:	e0bffc17 	ldw	r2,-16(fp)
   1bc34:	10800c17 	ldw	r2,48(r2)
   1bc38:	e0bff215 	stw	r2,-56(fp)
   1bc3c:	00800144 	movi	r2,5
   1bc40:	e0bff98d 	sth	r2,-26(fp)
   1bc44:	00bfe0c4 	movi	r2,-125
   1bc48:	e0bffa05 	stb	r2,-24(fp)
   1bc4c:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1bc50:	d0a81143 	ldbu	r2,-24507(gp)
   1bc54:	10803fcc 	andi	r2,r2,255
   1bc58:	10001526 	beq	r2,zero,1bcb0 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1bc5c:	e0fff98b 	ldhu	r3,-26(fp)
   1bc60:	e13ffa03 	ldbu	r4,-24(fp)
   1bc64:	e17ffa8b 	ldhu	r5,-22(fp)
   1bc68:	e0bffb44 	addi	r2,fp,-19
   1bc6c:	d8800015 	stw	r2,0(sp)
   1bc70:	280f883a 	mov	r7,r5
   1bc74:	200d883a 	mov	r6,r4
   1bc78:	180b883a 	mov	r5,r3
   1bc7c:	e13ff217 	ldw	r4,-56(fp)
   1bc80:	0015c0c0 	call	15c0c <OSFlagPend>
   1bc84:	00000a06 	br	1bcb0 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1bc88:	0001883a 	nop
   1bc8c:	e0bffc17 	ldw	r2,-16(fp)
   1bc90:	10c00d17 	ldw	r3,52(r2)
   1bc94:	e0bff317 	ldw	r2,-52(fp)
   1bc98:	1880051e 	bne	r3,r2,1bcb0 <altera_avalon_jtag_uart_read+0x1c8>
   1bc9c:	e0bffc17 	ldw	r2,-16(fp)
   1bca0:	10c00917 	ldw	r3,36(r2)
   1bca4:	e0bffc17 	ldw	r2,-16(fp)
   1bca8:	10800117 	ldw	r2,4(r2)
   1bcac:	18bff736 	bltu	r3,r2,1bc8c <altera_avalon_jtag_uart_read+0x1a4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1bcb0:	e0bffc17 	ldw	r2,-16(fp)
   1bcb4:	10c00d17 	ldw	r3,52(r2)
   1bcb8:	e0bff317 	ldw	r2,-52(fp)
   1bcbc:	18800726 	beq	r3,r2,1bcdc <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1bcc0:	e0bffe17 	ldw	r2,-8(fp)
   1bcc4:	00bf9d16 	blt	zero,r2,1bb3c <altera_avalon_jtag_uart_read+0x54>
   1bcc8:	00000506 	br	1bce0 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   1bccc:	0001883a 	nop
   1bcd0:	00000306 	br	1bce0 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   1bcd4:	0001883a 	nop
   1bcd8:	00000106 	br	1bce0 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   1bcdc:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   1bce0:	e0bffc17 	ldw	r2,-16(fp)
   1bce4:	10800a17 	ldw	r2,40(r2)
   1bce8:	1009883a 	mov	r4,r2
   1bcec:	00189ec0 	call	189ec <OSSemPost>

  if (ptr != buffer)
   1bcf0:	e0fff017 	ldw	r3,-64(fp)
   1bcf4:	e0bffd17 	ldw	r2,-12(fp)
   1bcf8:	18801826 	beq	r3,r2,1bd5c <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bcfc:	0005303a 	rdctl	r2,status
   1bd00:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bd04:	e0fff717 	ldw	r3,-36(fp)
   1bd08:	00bfff84 	movi	r2,-2
   1bd0c:	1884703a 	and	r2,r3,r2
   1bd10:	1001703a 	wrctl	status,r2
  
  return context;
   1bd14:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1bd18:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1bd1c:	e0bffc17 	ldw	r2,-16(fp)
   1bd20:	10800817 	ldw	r2,32(r2)
   1bd24:	10c00054 	ori	r3,r2,1
   1bd28:	e0bffc17 	ldw	r2,-16(fp)
   1bd2c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1bd30:	e0bffc17 	ldw	r2,-16(fp)
   1bd34:	10800017 	ldw	r2,0(r2)
   1bd38:	10800104 	addi	r2,r2,4
   1bd3c:	1007883a 	mov	r3,r2
   1bd40:	e0bffc17 	ldw	r2,-16(fp)
   1bd44:	10800817 	ldw	r2,32(r2)
   1bd48:	18800035 	stwio	r2,0(r3)
   1bd4c:	e0bff617 	ldw	r2,-40(fp)
   1bd50:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bd54:	e0bff517 	ldw	r2,-44(fp)
   1bd58:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1bd5c:	e0fff017 	ldw	r3,-64(fp)
   1bd60:	e0bffd17 	ldw	r2,-12(fp)
   1bd64:	18800426 	beq	r3,r2,1bd78 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
   1bd68:	e0fff017 	ldw	r3,-64(fp)
   1bd6c:	e0bffd17 	ldw	r2,-12(fp)
   1bd70:	1885c83a 	sub	r2,r3,r2
   1bd74:	00000606 	br	1bd90 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   1bd78:	e0bfff17 	ldw	r2,-4(fp)
   1bd7c:	1090000c 	andi	r2,r2,16384
   1bd80:	10000226 	beq	r2,zero,1bd8c <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
   1bd84:	00bffd44 	movi	r2,-11
   1bd88:	00000106 	br	1bd90 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   1bd8c:	00bffec4 	movi	r2,-5
}
   1bd90:	e037883a 	mov	sp,fp
   1bd94:	dfc00117 	ldw	ra,4(sp)
   1bd98:	df000017 	ldw	fp,0(sp)
   1bd9c:	dec00204 	addi	sp,sp,8
   1bda0:	f800283a 	ret

0001bda4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1bda4:	deffed04 	addi	sp,sp,-76
   1bda8:	dfc01215 	stw	ra,72(sp)
   1bdac:	df001115 	stw	fp,68(sp)
   1bdb0:	df001104 	addi	fp,sp,68
   1bdb4:	e13ffc15 	stw	r4,-16(fp)
   1bdb8:	e17ffd15 	stw	r5,-12(fp)
   1bdbc:	e1bffe15 	stw	r6,-8(fp)
   1bdc0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1bdc4:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1bdc8:	e0bffd17 	ldw	r2,-12(fp)
   1bdcc:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   1bdd0:	e0bffc17 	ldw	r2,-16(fp)
   1bdd4:	10800b17 	ldw	r2,44(r2)
   1bdd8:	e0bff815 	stw	r2,-32(fp)
   1bddc:	e03ff90d 	sth	zero,-28(fp)
   1bde0:	e0bff90b 	ldhu	r2,-28(fp)
   1bde4:	e0fffb44 	addi	r3,fp,-19
   1bde8:	180d883a 	mov	r6,r3
   1bdec:	100b883a 	mov	r5,r2
   1bdf0:	e13ff817 	ldw	r4,-32(fp)
   1bdf4:	00186740 	call	18674 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1bdf8:	00003706 	br	1bed8 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1bdfc:	e0bffc17 	ldw	r2,-16(fp)
   1be00:	10800f17 	ldw	r2,60(r2)
   1be04:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
   1be08:	e0bffc17 	ldw	r2,-16(fp)
   1be0c:	10801017 	ldw	r2,64(r2)
   1be10:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   1be14:	e0fff417 	ldw	r3,-48(fp)
   1be18:	e0bff017 	ldw	r2,-64(fp)
   1be1c:	1880062e 	bgeu	r3,r2,1be38 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   1be20:	e0fff017 	ldw	r3,-64(fp)
   1be24:	e0bff417 	ldw	r2,-48(fp)
   1be28:	1885c83a 	sub	r2,r3,r2
   1be2c:	10bfffc4 	addi	r2,r2,-1
   1be30:	e0bff115 	stw	r2,-60(fp)
   1be34:	00000b06 	br	1be64 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   1be38:	e0bff017 	ldw	r2,-64(fp)
   1be3c:	10000526 	beq	r2,zero,1be54 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1be40:	00c20004 	movi	r3,2048
   1be44:	e0bff417 	ldw	r2,-48(fp)
   1be48:	1885c83a 	sub	r2,r3,r2
   1be4c:	e0bff115 	stw	r2,-60(fp)
   1be50:	00000406 	br	1be64 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1be54:	00c1ffc4 	movi	r3,2047
   1be58:	e0bff417 	ldw	r2,-48(fp)
   1be5c:	1885c83a 	sub	r2,r3,r2
   1be60:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   1be64:	e0bff117 	ldw	r2,-60(fp)
   1be68:	10001e26 	beq	r2,zero,1bee4 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
   1be6c:	e0fffe17 	ldw	r3,-8(fp)
   1be70:	e0bff117 	ldw	r2,-60(fp)
   1be74:	1880022e 	bgeu	r3,r2,1be80 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   1be78:	e0bffe17 	ldw	r2,-8(fp)
   1be7c:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1be80:	e0bffc17 	ldw	r2,-16(fp)
   1be84:	10c21104 	addi	r3,r2,2116
   1be88:	e0bff417 	ldw	r2,-48(fp)
   1be8c:	1885883a 	add	r2,r3,r2
   1be90:	e1bff117 	ldw	r6,-60(fp)
   1be94:	e17ffd17 	ldw	r5,-12(fp)
   1be98:	1009883a 	mov	r4,r2
   1be9c:	0001ec80 	call	1ec8 <memcpy>
      ptr   += n;
   1bea0:	e0fffd17 	ldw	r3,-12(fp)
   1bea4:	e0bff117 	ldw	r2,-60(fp)
   1bea8:	1885883a 	add	r2,r3,r2
   1beac:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1beb0:	e0fffe17 	ldw	r3,-8(fp)
   1beb4:	e0bff117 	ldw	r2,-60(fp)
   1beb8:	1885c83a 	sub	r2,r3,r2
   1bebc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1bec0:	e0fff417 	ldw	r3,-48(fp)
   1bec4:	e0bff117 	ldw	r2,-60(fp)
   1bec8:	1885883a 	add	r2,r3,r2
   1becc:	10c1ffcc 	andi	r3,r2,2047
   1bed0:	e0bffc17 	ldw	r2,-16(fp)
   1bed4:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1bed8:	e0bffe17 	ldw	r2,-8(fp)
   1bedc:	00bfc716 	blt	zero,r2,1bdfc <altera_avalon_jtag_uart_write+0x58>
   1bee0:	00000106 	br	1bee8 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   1bee4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bee8:	0005303a 	rdctl	r2,status
   1beec:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bef0:	e0fff717 	ldw	r3,-36(fp)
   1bef4:	00bfff84 	movi	r2,-2
   1bef8:	1884703a 	and	r2,r3,r2
   1befc:	1001703a 	wrctl	status,r2
  
  return context;
   1bf00:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1bf04:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1bf08:	e0bffc17 	ldw	r2,-16(fp)
   1bf0c:	10800817 	ldw	r2,32(r2)
   1bf10:	10c00094 	ori	r3,r2,2
   1bf14:	e0bffc17 	ldw	r2,-16(fp)
   1bf18:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1bf1c:	e0bffc17 	ldw	r2,-16(fp)
   1bf20:	10800017 	ldw	r2,0(r2)
   1bf24:	10800104 	addi	r2,r2,4
   1bf28:	1007883a 	mov	r3,r2
   1bf2c:	e0bffc17 	ldw	r2,-16(fp)
   1bf30:	10800817 	ldw	r2,32(r2)
   1bf34:	18800035 	stwio	r2,0(r3)
   1bf38:	e0bff617 	ldw	r2,-40(fp)
   1bf3c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bf40:	e0bff317 	ldw	r2,-52(fp)
   1bf44:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1bf48:	e0bffe17 	ldw	r2,-8(fp)
   1bf4c:	00802a0e 	bge	zero,r2,1bff8 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
   1bf50:	e0bfff17 	ldw	r2,-4(fp)
   1bf54:	1090000c 	andi	r2,r2,16384
   1bf58:	10002a1e 	bne	r2,zero,1c004 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   1bf5c:	d0a81143 	ldbu	r2,-24507(gp)
   1bf60:	10803fcc 	andi	r2,r2,255
   1bf64:	10800058 	cmpnei	r2,r2,1
   1bf68:	1000161e 	bne	r2,zero,1bfc4 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   1bf6c:	e0bffc17 	ldw	r2,-16(fp)
   1bf70:	10800c17 	ldw	r2,48(r2)
   1bf74:	e0bff515 	stw	r2,-44(fp)
   1bf78:	00800184 	movi	r2,6
   1bf7c:	e0bff98d 	sth	r2,-26(fp)
   1bf80:	00bfe0c4 	movi	r2,-125
   1bf84:	e0bffa05 	stb	r2,-24(fp)
   1bf88:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1bf8c:	d0a81143 	ldbu	r2,-24507(gp)
   1bf90:	10803fcc 	andi	r2,r2,255
   1bf94:	10001526 	beq	r2,zero,1bfec <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1bf98:	e0fff98b 	ldhu	r3,-26(fp)
   1bf9c:	e13ffa03 	ldbu	r4,-24(fp)
   1bfa0:	e17ffa8b 	ldhu	r5,-22(fp)
   1bfa4:	e0bffb04 	addi	r2,fp,-20
   1bfa8:	d8800015 	stw	r2,0(sp)
   1bfac:	280f883a 	mov	r7,r5
   1bfb0:	200d883a 	mov	r6,r4
   1bfb4:	180b883a 	mov	r5,r3
   1bfb8:	e13ff517 	ldw	r4,-44(fp)
   1bfbc:	0015c0c0 	call	15c0c <OSFlagPend>
   1bfc0:	00000a06 	br	1bfec <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1bfc4:	0001883a 	nop
   1bfc8:	e0bffc17 	ldw	r2,-16(fp)
   1bfcc:	10c01017 	ldw	r3,64(r2)
   1bfd0:	e0bff017 	ldw	r2,-64(fp)
   1bfd4:	1880051e 	bne	r3,r2,1bfec <altera_avalon_jtag_uart_write+0x248>
   1bfd8:	e0bffc17 	ldw	r2,-16(fp)
   1bfdc:	10c00917 	ldw	r3,36(r2)
   1bfe0:	e0bffc17 	ldw	r2,-16(fp)
   1bfe4:	10800117 	ldw	r2,4(r2)
   1bfe8:	18bff736 	bltu	r3,r2,1bfc8 <altera_avalon_jtag_uart_write+0x224>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1bfec:	e0bffc17 	ldw	r2,-16(fp)
   1bff0:	10800917 	ldw	r2,36(r2)
   1bff4:	1000051e 	bne	r2,zero,1c00c <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
   1bff8:	e0bffe17 	ldw	r2,-8(fp)
   1bffc:	00bfb616 	blt	zero,r2,1bed8 <altera_avalon_jtag_uart_write+0x134>
   1c000:	00000306 	br	1c010 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   1c004:	0001883a 	nop
   1c008:	00000106 	br	1c010 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   1c00c:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   1c010:	e0bffc17 	ldw	r2,-16(fp)
   1c014:	10800b17 	ldw	r2,44(r2)
   1c018:	1009883a 	mov	r4,r2
   1c01c:	00189ec0 	call	189ec <OSSemPost>

  if (ptr != start)
   1c020:	e0fffd17 	ldw	r3,-12(fp)
   1c024:	e0bff217 	ldw	r2,-56(fp)
   1c028:	18800426 	beq	r3,r2,1c03c <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
   1c02c:	e0fffd17 	ldw	r3,-12(fp)
   1c030:	e0bff217 	ldw	r2,-56(fp)
   1c034:	1885c83a 	sub	r2,r3,r2
   1c038:	00000606 	br	1c054 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
   1c03c:	e0bfff17 	ldw	r2,-4(fp)
   1c040:	1090000c 	andi	r2,r2,16384
   1c044:	10000226 	beq	r2,zero,1c050 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
   1c048:	00bffd44 	movi	r2,-11
   1c04c:	00000106 	br	1c054 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1c050:	00bffec4 	movi	r2,-5
}
   1c054:	e037883a 	mov	sp,fp
   1c058:	dfc00117 	ldw	ra,4(sp)
   1c05c:	df000017 	ldw	fp,0(sp)
   1c060:	dec00204 	addi	sp,sp,8
   1c064:	f800283a 	ret

0001c068 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1c068:	defff904 	addi	sp,sp,-28
   1c06c:	dfc00615 	stw	ra,24(sp)
   1c070:	df000515 	stw	fp,20(sp)
   1c074:	df000504 	addi	fp,sp,20
   1c078:	e13ffe15 	stw	r4,-8(fp)
   1c07c:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1c080:	0007883a 	mov	r3,zero
   1c084:	e0bffe17 	ldw	r2,-8(fp)
   1c088:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1c08c:	e0bffe17 	ldw	r2,-8(fp)
   1c090:	10800104 	addi	r2,r2,4
   1c094:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c098:	0005303a 	rdctl	r2,status
   1c09c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c0a0:	e0fffc17 	ldw	r3,-16(fp)
   1c0a4:	00bfff84 	movi	r2,-2
   1c0a8:	1884703a 	and	r2,r3,r2
   1c0ac:	1001703a 	wrctl	status,r2
  
  return context;
   1c0b0:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1c0b4:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   1c0b8:	001dd780 	call	1dd78 <alt_tick>
   1c0bc:	e0bffb17 	ldw	r2,-20(fp)
   1c0c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c0c4:	e0bffd17 	ldw	r2,-12(fp)
   1c0c8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1c0cc:	0001883a 	nop
   1c0d0:	e037883a 	mov	sp,fp
   1c0d4:	dfc00117 	ldw	ra,4(sp)
   1c0d8:	df000017 	ldw	fp,0(sp)
   1c0dc:	dec00204 	addi	sp,sp,8
   1c0e0:	f800283a 	ret

0001c0e4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1c0e4:	defff904 	addi	sp,sp,-28
   1c0e8:	dfc00615 	stw	ra,24(sp)
   1c0ec:	df000515 	stw	fp,20(sp)
   1c0f0:	df000504 	addi	fp,sp,20
   1c0f4:	e13ffc15 	stw	r4,-16(fp)
   1c0f8:	e17ffd15 	stw	r5,-12(fp)
   1c0fc:	e1bffe15 	stw	r6,-8(fp)
   1c100:	e1ffff15 	stw	r7,-4(fp)
   1c104:	e0bfff17 	ldw	r2,-4(fp)
   1c108:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1c10c:	d0a82617 	ldw	r2,-24424(gp)
   1c110:	1000021e 	bne	r2,zero,1c11c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   1c114:	e0bffb17 	ldw	r2,-20(fp)
   1c118:	d0a82615 	stw	r2,-24424(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1c11c:	e0bffc17 	ldw	r2,-16(fp)
   1c120:	10800104 	addi	r2,r2,4
   1c124:	00c001c4 	movi	r3,7
   1c128:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   1c12c:	018000b4 	movhi	r6,2
   1c130:	31b01a04 	addi	r6,r6,-16280
   1c134:	e17ffc17 	ldw	r5,-16(fp)
   1c138:	e13ffe17 	ldw	r4,-8(fp)
   1c13c:	001d9080 	call	1d908 <alt_irq_register>
#endif  
}
   1c140:	0001883a 	nop
   1c144:	e037883a 	mov	sp,fp
   1c148:	dfc00117 	ldw	ra,4(sp)
   1c14c:	df000017 	ldw	fp,0(sp)
   1c150:	dec00204 	addi	sp,sp,8
   1c154:	f800283a 	ret

0001c158 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   1c158:	defffc04 	addi	sp,sp,-16
   1c15c:	df000315 	stw	fp,12(sp)
   1c160:	df000304 	addi	fp,sp,12
   1c164:	e13ffe15 	stw	r4,-8(fp)
   1c168:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   1c16c:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   1c170:	e0bfff17 	ldw	r2,-4(fp)
   1c174:	1000061e 	bne	r2,zero,1c190 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   1c178:	e0bffe17 	ldw	r2,-8(fp)
   1c17c:	1007883a 	mov	r3,r2
   1c180:	e0bffd03 	ldbu	r2,-12(fp)
   1c184:	1884b03a 	or	r2,r3,r2
   1c188:	e0bffd05 	stb	r2,-12(fp)
   1c18c:	00000806 	br	1c1b0 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   1c190:	e0bffe17 	ldw	r2,-8(fp)
   1c194:	1007883a 	mov	r3,r2
   1c198:	e0bffd03 	ldbu	r2,-12(fp)
   1c19c:	1884b03a 	or	r2,r3,r2
   1c1a0:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   1c1a4:	e0bffd03 	ldbu	r2,-12(fp)
   1c1a8:	10801014 	ori	r2,r2,64
   1c1ac:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   1c1b0:	e0fffd03 	ldbu	r3,-12(fp)
   1c1b4:	00bfe004 	movi	r2,-128
   1c1b8:	1884b03a 	or	r2,r3,r2
}
   1c1bc:	e037883a 	mov	sp,fp
   1c1c0:	df000017 	ldw	fp,0(sp)
   1c1c4:	dec00104 	addi	sp,sp,4
   1c1c8:	f800283a 	ret

0001c1cc <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   1c1cc:	defffd04 	addi	sp,sp,-12
   1c1d0:	df000215 	stw	fp,8(sp)
   1c1d4:	df000204 	addi	fp,sp,8
   1c1d8:	e13ffe15 	stw	r4,-8(fp)
   1c1dc:	2805883a 	mov	r2,r5
   1c1e0:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   1c1e4:	e0bffe17 	ldw	r2,-8(fp)
   1c1e8:	10800a17 	ldw	r2,40(r2)
   1c1ec:	1007883a 	mov	r3,r2
   1c1f0:	e0bfff03 	ldbu	r2,-4(fp)
   1c1f4:	18800025 	stbio	r2,0(r3)
}
   1c1f8:	0001883a 	nop
   1c1fc:	e037883a 	mov	sp,fp
   1c200:	df000017 	ldw	fp,0(sp)
   1c204:	dec00104 	addi	sp,sp,4
   1c208:	f800283a 	ret

0001c20c <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   1c20c:	defffe04 	addi	sp,sp,-8
   1c210:	df000115 	stw	fp,4(sp)
   1c214:	df000104 	addi	fp,sp,4
   1c218:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   1c21c:	e0bfff17 	ldw	r2,-4(fp)
   1c220:	10800a17 	ldw	r2,40(r2)
   1c224:	1007883a 	mov	r3,r2
   1c228:	00800044 	movi	r2,1
   1c22c:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   1c230:	0001883a 	nop
   1c234:	e037883a 	mov	sp,fp
   1c238:	df000017 	ldw	fp,0(sp)
   1c23c:	dec00104 	addi	sp,sp,4
   1c240:	f800283a 	ret

0001c244 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   1c244:	defffc04 	addi	sp,sp,-16
   1c248:	dfc00315 	stw	ra,12(sp)
   1c24c:	df000215 	stw	fp,8(sp)
   1c250:	df000204 	addi	fp,sp,8
   1c254:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   1c258:	d1600a04 	addi	r5,gp,-32728
   1c25c:	e13fff17 	ldw	r4,-4(fp)
   1c260:	001d7040 	call	1d704 <alt_find_dev>
   1c264:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1c268:	e0bffe17 	ldw	r2,-8(fp)
}
   1c26c:	e037883a 	mov	sp,fp
   1c270:	dfc00117 	ldw	ra,4(sp)
   1c274:	df000017 	ldw	fp,0(sp)
   1c278:	dec00204 	addi	sp,sp,8
   1c27c:	f800283a 	ret

0001c280 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   1c280:	defffb04 	addi	sp,sp,-20
   1c284:	df000415 	stw	fp,16(sp)
   1c288:	df000404 	addi	fp,sp,16
   1c28c:	e13ffd15 	stw	r4,-12(fp)
   1c290:	e17ffe15 	stw	r5,-8(fp)
   1c294:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   1c298:	e03ffc15 	stw	zero,-16(fp)
   1c29c:	00000f06 	br	1c2dc <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   1c2a0:	e0bffd17 	ldw	r2,-12(fp)
   1c2a4:	10800a17 	ldw	r2,40(r2)
   1c2a8:	10800044 	addi	r2,r2,1
   1c2ac:	1009883a 	mov	r4,r2
   1c2b0:	e0fffe17 	ldw	r3,-8(fp)
   1c2b4:	e0bffc17 	ldw	r2,-16(fp)
   1c2b8:	1885883a 	add	r2,r3,r2
   1c2bc:	10800003 	ldbu	r2,0(r2)
   1c2c0:	10803fcc 	andi	r2,r2,255
   1c2c4:	1080201c 	xori	r2,r2,128
   1c2c8:	10bfe004 	addi	r2,r2,-128
   1c2cc:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   1c2d0:	e0bffc17 	ldw	r2,-16(fp)
   1c2d4:	10800044 	addi	r2,r2,1
   1c2d8:	e0bffc15 	stw	r2,-16(fp)
   1c2dc:	e0fffc17 	ldw	r3,-16(fp)
   1c2e0:	e0bfff17 	ldw	r2,-4(fp)
   1c2e4:	18bfee36 	bltu	r3,r2,1c2a0 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   1c2e8:	0001883a 	nop
   1c2ec:	e037883a 	mov	sp,fp
   1c2f0:	df000017 	ldw	fp,0(sp)
   1c2f4:	dec00104 	addi	sp,sp,4
   1c2f8:	f800283a 	ret

0001c2fc <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   1c2fc:	defffd04 	addi	sp,sp,-12
   1c300:	df000215 	stw	fp,8(sp)
   1c304:	df000204 	addi	fp,sp,8
   1c308:	e13ffe15 	stw	r4,-8(fp)
   1c30c:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   1c310:	00000d06 	br	1c348 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   1c314:	e0bffe17 	ldw	r2,-8(fp)
   1c318:	10800a17 	ldw	r2,40(r2)
   1c31c:	10800044 	addi	r2,r2,1
   1c320:	1007883a 	mov	r3,r2
   1c324:	e0bfff17 	ldw	r2,-4(fp)
   1c328:	10800003 	ldbu	r2,0(r2)
   1c32c:	10803fcc 	andi	r2,r2,255
   1c330:	1080201c 	xori	r2,r2,128
   1c334:	10bfe004 	addi	r2,r2,-128
   1c338:	18800025 	stbio	r2,0(r3)
		++ptr;
   1c33c:	e0bfff17 	ldw	r2,-4(fp)
   1c340:	10800044 	addi	r2,r2,1
   1c344:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   1c348:	e0bfff17 	ldw	r2,-4(fp)
   1c34c:	10800003 	ldbu	r2,0(r2)
   1c350:	10803fcc 	andi	r2,r2,255
   1c354:	1080201c 	xori	r2,r2,128
   1c358:	10bfe004 	addi	r2,r2,-128
   1c35c:	103fed1e 	bne	r2,zero,1c314 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   1c360:	0001883a 	nop
   1c364:	e037883a 	mov	sp,fp
   1c368:	df000017 	ldw	fp,0(sp)
   1c36c:	dec00104 	addi	sp,sp,4
   1c370:	f800283a 	ret

0001c374 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   1c374:	defffb04 	addi	sp,sp,-20
   1c378:	dfc00415 	stw	ra,16(sp)
   1c37c:	df000315 	stw	fp,12(sp)
   1c380:	df000304 	addi	fp,sp,12
   1c384:	e13ffd15 	stw	r4,-12(fp)
   1c388:	e17ffe15 	stw	r5,-8(fp)
   1c38c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   1c390:	e0bffd17 	ldw	r2,-12(fp)
   1c394:	10800017 	ldw	r2,0(r2)
   1c398:	e0ffff17 	ldw	r3,-4(fp)
   1c39c:	180d883a 	mov	r6,r3
   1c3a0:	e17ffe17 	ldw	r5,-8(fp)
   1c3a4:	1009883a 	mov	r4,r2
   1c3a8:	001c2800 	call	1c280 <alt_up_character_lcd_write>
	return 0;
   1c3ac:	0005883a 	mov	r2,zero
}
   1c3b0:	e037883a 	mov	sp,fp
   1c3b4:	dfc00117 	ldw	ra,4(sp)
   1c3b8:	df000017 	ldw	fp,0(sp)
   1c3bc:	dec00204 	addi	sp,sp,8
   1c3c0:	f800283a 	ret

0001c3c4 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   1c3c4:	defffa04 	addi	sp,sp,-24
   1c3c8:	dfc00515 	stw	ra,20(sp)
   1c3cc:	df000415 	stw	fp,16(sp)
   1c3d0:	df000404 	addi	fp,sp,16
   1c3d4:	e13ffd15 	stw	r4,-12(fp)
   1c3d8:	e17ffe15 	stw	r5,-8(fp)
   1c3dc:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   1c3e0:	e0bffe17 	ldw	r2,-8(fp)
   1c3e4:	10800a28 	cmpgeui	r2,r2,40
   1c3e8:	1000031e 	bne	r2,zero,1c3f8 <alt_up_character_lcd_set_cursor_pos+0x34>
   1c3ec:	e0bfff17 	ldw	r2,-4(fp)
   1c3f0:	108000b0 	cmpltui	r2,r2,2
   1c3f4:	1000021e 	bne	r2,zero,1c400 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   1c3f8:	00bfffc4 	movi	r2,-1
   1c3fc:	00000906 	br	1c424 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1c400:	e17fff17 	ldw	r5,-4(fp)
   1c404:	e13ffe17 	ldw	r4,-8(fp)
   1c408:	001c1580 	call	1c158 <get_DDRAM_addr>
   1c40c:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   1c410:	e0bffc03 	ldbu	r2,-16(fp)
   1c414:	100b883a 	mov	r5,r2
   1c418:	e13ffd17 	ldw	r4,-12(fp)
   1c41c:	001c1cc0 	call	1c1cc <alt_up_character_lcd_send_cmd>
	return 0;
   1c420:	0005883a 	mov	r2,zero
}
   1c424:	e037883a 	mov	sp,fp
   1c428:	dfc00117 	ldw	ra,4(sp)
   1c42c:	df000017 	ldw	fp,0(sp)
   1c430:	dec00204 	addi	sp,sp,8
   1c434:	f800283a 	ret

0001c438 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1c438:	defffb04 	addi	sp,sp,-20
   1c43c:	dfc00415 	stw	ra,16(sp)
   1c440:	df000315 	stw	fp,12(sp)
   1c444:	df000304 	addi	fp,sp,12
   1c448:	e13ffe15 	stw	r4,-8(fp)
   1c44c:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   1c450:	e0bfff17 	ldw	r2,-4(fp)
   1c454:	10001526 	beq	r2,zero,1c4ac <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1c458:	e0bfff17 	ldw	r2,-4(fp)
   1c45c:	0080020e 	bge	zero,r2,1c468 <alt_up_character_lcd_shift_cursor+0x30>
   1c460:	00800504 	movi	r2,20
   1c464:	00000106 	br	1c46c <alt_up_character_lcd_shift_cursor+0x34>
   1c468:	00800404 	movi	r2,16
   1c46c:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1c470:	e0bfff17 	ldw	r2,-4(fp)
   1c474:	1000010e 	bge	r2,zero,1c47c <alt_up_character_lcd_shift_cursor+0x44>
   1c478:	0085c83a 	sub	r2,zero,r2
   1c47c:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1c480:	00000406 	br	1c494 <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1c484:	e0bffd43 	ldbu	r2,-11(fp)
   1c488:	100b883a 	mov	r5,r2
   1c48c:	e13ffe17 	ldw	r4,-8(fp)
   1c490:	001c1cc0 	call	1c1cc <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1c494:	e0bffd03 	ldbu	r2,-12(fp)
   1c498:	10ffffc4 	addi	r3,r2,-1
   1c49c:	e0fffd05 	stb	r3,-12(fp)
   1c4a0:	10803fcc 	andi	r2,r2,255
   1c4a4:	103ff71e 	bne	r2,zero,1c484 <alt_up_character_lcd_shift_cursor+0x4c>
   1c4a8:	00000106 	br	1c4b0 <alt_up_character_lcd_shift_cursor+0x78>

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   1c4ac:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   1c4b0:	e037883a 	mov	sp,fp
   1c4b4:	dfc00117 	ldw	ra,4(sp)
   1c4b8:	df000017 	ldw	fp,0(sp)
   1c4bc:	dec00204 	addi	sp,sp,8
   1c4c0:	f800283a 	ret

0001c4c4 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1c4c4:	defffb04 	addi	sp,sp,-20
   1c4c8:	dfc00415 	stw	ra,16(sp)
   1c4cc:	df000315 	stw	fp,12(sp)
   1c4d0:	df000304 	addi	fp,sp,12
   1c4d4:	e13ffe15 	stw	r4,-8(fp)
   1c4d8:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   1c4dc:	e0bfff17 	ldw	r2,-4(fp)
   1c4e0:	10001526 	beq	r2,zero,1c538 <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1c4e4:	e0bfff17 	ldw	r2,-4(fp)
   1c4e8:	0080020e 	bge	zero,r2,1c4f4 <alt_up_character_lcd_shift_display+0x30>
   1c4ec:	00800704 	movi	r2,28
   1c4f0:	00000106 	br	1c4f8 <alt_up_character_lcd_shift_display+0x34>
   1c4f4:	00800604 	movi	r2,24
   1c4f8:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1c4fc:	e0bfff17 	ldw	r2,-4(fp)
   1c500:	1000010e 	bge	r2,zero,1c508 <alt_up_character_lcd_shift_display+0x44>
   1c504:	0085c83a 	sub	r2,zero,r2
   1c508:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1c50c:	00000406 	br	1c520 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1c510:	e0bffd43 	ldbu	r2,-11(fp)
   1c514:	100b883a 	mov	r5,r2
   1c518:	e13ffe17 	ldw	r4,-8(fp)
   1c51c:	001c1cc0 	call	1c1cc <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1c520:	e0bffd03 	ldbu	r2,-12(fp)
   1c524:	10ffffc4 	addi	r3,r2,-1
   1c528:	e0fffd05 	stb	r3,-12(fp)
   1c52c:	10803fcc 	andi	r2,r2,255
   1c530:	103ff71e 	bne	r2,zero,1c510 <alt_up_character_lcd_shift_display+0x4c>
   1c534:	00000106 	br	1c53c <alt_up_character_lcd_shift_display+0x78>

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   1c538:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   1c53c:	e037883a 	mov	sp,fp
   1c540:	dfc00117 	ldw	ra,4(sp)
   1c544:	df000017 	ldw	fp,0(sp)
   1c548:	dec00204 	addi	sp,sp,8
   1c54c:	f800283a 	ret

0001c550 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   1c550:	defffa04 	addi	sp,sp,-24
   1c554:	dfc00515 	stw	ra,20(sp)
   1c558:	df000415 	stw	fp,16(sp)
   1c55c:	df000404 	addi	fp,sp,16
   1c560:	e13ffd15 	stw	r4,-12(fp)
   1c564:	e17ffe15 	stw	r5,-8(fp)
   1c568:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   1c56c:	e0bffe17 	ldw	r2,-8(fp)
   1c570:	10800a28 	cmpgeui	r2,r2,40
   1c574:	1000031e 	bne	r2,zero,1c584 <alt_up_character_lcd_erase_pos+0x34>
   1c578:	e0bfff17 	ldw	r2,-4(fp)
   1c57c:	108000b0 	cmpltui	r2,r2,2
   1c580:	1000021e 	bne	r2,zero,1c58c <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   1c584:	00bfffc4 	movi	r2,-1
   1c588:	00000f06 	br	1c5c8 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1c58c:	e17fff17 	ldw	r5,-4(fp)
   1c590:	e13ffe17 	ldw	r4,-8(fp)
   1c594:	001c1580 	call	1c158 <get_DDRAM_addr>
   1c598:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   1c59c:	e0bffc03 	ldbu	r2,-16(fp)
   1c5a0:	100b883a 	mov	r5,r2
   1c5a4:	e13ffd17 	ldw	r4,-12(fp)
   1c5a8:	001c1cc0 	call	1c1cc <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   1c5ac:	e0bffd17 	ldw	r2,-12(fp)
   1c5b0:	10800a17 	ldw	r2,40(r2)
   1c5b4:	10800044 	addi	r2,r2,1
   1c5b8:	1007883a 	mov	r3,r2
   1c5bc:	00800084 	movi	r2,2
   1c5c0:	18800025 	stbio	r2,0(r3)
	return 0;
   1c5c4:	0005883a 	mov	r2,zero
}
   1c5c8:	e037883a 	mov	sp,fp
   1c5cc:	dfc00117 	ldw	ra,4(sp)
   1c5d0:	df000017 	ldw	fp,0(sp)
   1c5d4:	dec00204 	addi	sp,sp,8
   1c5d8:	f800283a 	ret

0001c5dc <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   1c5dc:	defffd04 	addi	sp,sp,-12
   1c5e0:	dfc00215 	stw	ra,8(sp)
   1c5e4:	df000115 	stw	fp,4(sp)
   1c5e8:	df000104 	addi	fp,sp,4
   1c5ec:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   1c5f0:	01400304 	movi	r5,12
   1c5f4:	e13fff17 	ldw	r4,-4(fp)
   1c5f8:	001c1cc0 	call	1c1cc <alt_up_character_lcd_send_cmd>
}
   1c5fc:	0001883a 	nop
   1c600:	e037883a 	mov	sp,fp
   1c604:	dfc00117 	ldw	ra,4(sp)
   1c608:	df000017 	ldw	fp,0(sp)
   1c60c:	dec00204 	addi	sp,sp,8
   1c610:	f800283a 	ret

0001c614 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   1c614:	defffd04 	addi	sp,sp,-12
   1c618:	dfc00215 	stw	ra,8(sp)
   1c61c:	df000115 	stw	fp,4(sp)
   1c620:	df000104 	addi	fp,sp,4
   1c624:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   1c628:	014003c4 	movi	r5,15
   1c62c:	e13fff17 	ldw	r4,-4(fp)
   1c630:	001c1cc0 	call	1c1cc <alt_up_character_lcd_send_cmd>
}
   1c634:	0001883a 	nop
   1c638:	e037883a 	mov	sp,fp
   1c63c:	dfc00117 	ldw	ra,4(sp)
   1c640:	df000017 	ldw	fp,0(sp)
   1c644:	dec00204 	addi	sp,sp,8
   1c648:	f800283a 	ret

0001c64c <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   1c64c:	defffd04 	addi	sp,sp,-12
   1c650:	df000215 	stw	fp,8(sp)
   1c654:	df000204 	addi	fp,sp,8
   1c658:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1c65c:	e0bfff17 	ldw	r2,-4(fp)
   1c660:	10800a17 	ldw	r2,40(r2)
   1c664:	10800104 	addi	r2,r2,4
   1c668:	10800037 	ldwio	r2,0(r2)
   1c66c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   1c670:	e0bffe17 	ldw	r2,-8(fp)
   1c674:	10800054 	ori	r2,r2,1
   1c678:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1c67c:	e0bfff17 	ldw	r2,-4(fp)
   1c680:	10800a17 	ldw	r2,40(r2)
   1c684:	10800104 	addi	r2,r2,4
   1c688:	1007883a 	mov	r3,r2
   1c68c:	e0bffe17 	ldw	r2,-8(fp)
   1c690:	18800035 	stwio	r2,0(r3)
}
   1c694:	0001883a 	nop
   1c698:	e037883a 	mov	sp,fp
   1c69c:	df000017 	ldw	fp,0(sp)
   1c6a0:	dec00104 	addi	sp,sp,4
   1c6a4:	f800283a 	ret

0001c6a8 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   1c6a8:	defffd04 	addi	sp,sp,-12
   1c6ac:	df000215 	stw	fp,8(sp)
   1c6b0:	df000204 	addi	fp,sp,8
   1c6b4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1c6b8:	e0bfff17 	ldw	r2,-4(fp)
   1c6bc:	10800a17 	ldw	r2,40(r2)
   1c6c0:	10800104 	addi	r2,r2,4
   1c6c4:	10800037 	ldwio	r2,0(r2)
   1c6c8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   1c6cc:	e0fffe17 	ldw	r3,-8(fp)
   1c6d0:	00bfff84 	movi	r2,-2
   1c6d4:	1884703a 	and	r2,r3,r2
   1c6d8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1c6dc:	e0bfff17 	ldw	r2,-4(fp)
   1c6e0:	10800a17 	ldw	r2,40(r2)
   1c6e4:	10800104 	addi	r2,r2,4
   1c6e8:	1007883a 	mov	r3,r2
   1c6ec:	e0bffe17 	ldw	r2,-8(fp)
   1c6f0:	18800035 	stwio	r2,0(r3)
}
   1c6f4:	0001883a 	nop
   1c6f8:	e037883a 	mov	sp,fp
   1c6fc:	df000017 	ldw	fp,0(sp)
   1c700:	dec00104 	addi	sp,sp,4
   1c704:	f800283a 	ret

0001c708 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   1c708:	defffd04 	addi	sp,sp,-12
   1c70c:	df000215 	stw	fp,8(sp)
   1c710:	df000204 	addi	fp,sp,8
   1c714:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1c718:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   1c71c:	e0bfff17 	ldw	r2,-4(fp)
   1c720:	10800a17 	ldw	r2,40(r2)
   1c724:	10800084 	addi	r2,r2,2
   1c728:	1080002b 	ldhuio	r2,0(r2)
   1c72c:	10bfffcc 	andi	r2,r2,65535
   1c730:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   1c734:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1c738:	e037883a 	mov	sp,fp
   1c73c:	df000017 	ldw	fp,0(sp)
   1c740:	dec00104 	addi	sp,sp,4
   1c744:	f800283a 	ret

0001c748 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   1c748:	defffd04 	addi	sp,sp,-12
   1c74c:	df000215 	stw	fp,8(sp)
   1c750:	df000204 	addi	fp,sp,8
   1c754:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1c758:	e0bfff17 	ldw	r2,-4(fp)
   1c75c:	10800a17 	ldw	r2,40(r2)
   1c760:	10800104 	addi	r2,r2,4
   1c764:	10800037 	ldwio	r2,0(r2)
   1c768:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   1c76c:	e0bffe17 	ldw	r2,-8(fp)
   1c770:	1004d43a 	srli	r2,r2,16
}
   1c774:	e037883a 	mov	sp,fp
   1c778:	df000017 	ldw	fp,0(sp)
   1c77c:	dec00104 	addi	sp,sp,4
   1c780:	f800283a 	ret

0001c784 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   1c784:	defffd04 	addi	sp,sp,-12
   1c788:	df000215 	stw	fp,8(sp)
   1c78c:	df000204 	addi	fp,sp,8
   1c790:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   1c794:	e0bfff17 	ldw	r2,-4(fp)
   1c798:	1080800c 	andi	r2,r2,512
   1c79c:	1004d27a 	srli	r2,r2,9
   1c7a0:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1c7a4:	e0bffe17 	ldw	r2,-8(fp)
   1c7a8:	10000226 	beq	r2,zero,1c7b4 <alt_up_irda_check_parity+0x30>
   1c7ac:	00bfffc4 	movi	r2,-1
   1c7b0:	00000106 	br	1c7b8 <alt_up_irda_check_parity+0x34>
   1c7b4:	0005883a 	mov	r2,zero
}
   1c7b8:	e037883a 	mov	sp,fp
   1c7bc:	df000017 	ldw	fp,0(sp)
   1c7c0:	dec00104 	addi	sp,sp,4
   1c7c4:	f800283a 	ret

0001c7c8 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   1c7c8:	defffd04 	addi	sp,sp,-12
   1c7cc:	df000215 	stw	fp,8(sp)
   1c7d0:	df000204 	addi	fp,sp,8
   1c7d4:	e13ffe15 	stw	r4,-8(fp)
   1c7d8:	2805883a 	mov	r2,r5
   1c7dc:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   1c7e0:	e0bffe17 	ldw	r2,-8(fp)
   1c7e4:	10800a17 	ldw	r2,40(r2)
   1c7e8:	1007883a 	mov	r3,r2
   1c7ec:	e0bfff03 	ldbu	r2,-4(fp)
   1c7f0:	18800035 	stwio	r2,0(r3)
	return 0;
   1c7f4:	0005883a 	mov	r2,zero
}
   1c7f8:	e037883a 	mov	sp,fp
   1c7fc:	df000017 	ldw	fp,0(sp)
   1c800:	dec00104 	addi	sp,sp,4
   1c804:	f800283a 	ret

0001c808 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   1c808:	defffa04 	addi	sp,sp,-24
   1c80c:	dfc00515 	stw	ra,20(sp)
   1c810:	df000415 	stw	fp,16(sp)
   1c814:	df000404 	addi	fp,sp,16
   1c818:	e13ffd15 	stw	r4,-12(fp)
   1c81c:	e17ffe15 	stw	r5,-8(fp)
   1c820:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   1c824:	e0bffd17 	ldw	r2,-12(fp)
   1c828:	10800a17 	ldw	r2,40(r2)
   1c82c:	10800037 	ldwio	r2,0(r2)
   1c830:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   1c834:	e0bffc17 	ldw	r2,-16(fp)
   1c838:	1007883a 	mov	r3,r2
   1c83c:	e0bffe17 	ldw	r2,-8(fp)
   1c840:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   1c844:	e13ffc17 	ldw	r4,-16(fp)
   1c848:	001c7840 	call	1c784 <alt_up_irda_check_parity>
   1c84c:	1007883a 	mov	r3,r2
   1c850:	e0bfff17 	ldw	r2,-4(fp)
   1c854:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   1c858:	e0bffc17 	ldw	r2,-16(fp)
   1c85c:	10a0000c 	andi	r2,r2,32768
   1c860:	1004d3fa 	srli	r2,r2,15
   1c864:	10bfffc4 	addi	r2,r2,-1
}
   1c868:	e037883a 	mov	sp,fp
   1c86c:	dfc00117 	ldw	ra,4(sp)
   1c870:	df000017 	ldw	fp,0(sp)
   1c874:	dec00204 	addi	sp,sp,8
   1c878:	f800283a 	ret

0001c87c <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   1c87c:	defff804 	addi	sp,sp,-32
   1c880:	dfc00715 	stw	ra,28(sp)
   1c884:	df000615 	stw	fp,24(sp)
   1c888:	df000604 	addi	fp,sp,24
   1c88c:	e13ffd15 	stw	r4,-12(fp)
   1c890:	e17ffe15 	stw	r5,-8(fp)
   1c894:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1c898:	e0bffd17 	ldw	r2,-12(fp)
   1c89c:	10800017 	ldw	r2,0(r2)
   1c8a0:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1c8a4:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1c8a8:	00000c06 	br	1c8dc <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   1c8ac:	e0bffe17 	ldw	r2,-8(fp)
   1c8b0:	10c00044 	addi	r3,r2,1
   1c8b4:	e0fffe15 	stw	r3,-8(fp)
   1c8b8:	e0fffc04 	addi	r3,fp,-16
   1c8bc:	180d883a 	mov	r6,r3
   1c8c0:	100b883a 	mov	r5,r2
   1c8c4:	e13ffb17 	ldw	r4,-20(fp)
   1c8c8:	001c8080 	call	1c808 <alt_up_irda_read_data>
   1c8cc:	1000081e 	bne	r2,zero,1c8f0 <alt_up_irda_read_fd+0x74>
			count++;
   1c8d0:	e0bffa17 	ldw	r2,-24(fp)
   1c8d4:	10800044 	addi	r2,r2,1
   1c8d8:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1c8dc:	e0bfff17 	ldw	r2,-4(fp)
   1c8e0:	10ffffc4 	addi	r3,r2,-1
   1c8e4:	e0ffff15 	stw	r3,-4(fp)
   1c8e8:	103ff01e 	bne	r2,zero,1c8ac <alt_up_irda_read_fd+0x30>
   1c8ec:	00000106 	br	1c8f4 <alt_up_irda_read_fd+0x78>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   1c8f0:	0001883a 	nop
	}
	return count;
   1c8f4:	e0bffa17 	ldw	r2,-24(fp)
}
   1c8f8:	e037883a 	mov	sp,fp
   1c8fc:	dfc00117 	ldw	ra,4(sp)
   1c900:	df000017 	ldw	fp,0(sp)
   1c904:	dec00204 	addi	sp,sp,8
   1c908:	f800283a 	ret

0001c90c <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1c90c:	defff904 	addi	sp,sp,-28
   1c910:	dfc00615 	stw	ra,24(sp)
   1c914:	df000515 	stw	fp,20(sp)
   1c918:	df000504 	addi	fp,sp,20
   1c91c:	e13ffd15 	stw	r4,-12(fp)
   1c920:	e17ffe15 	stw	r5,-8(fp)
   1c924:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1c928:	e0bffd17 	ldw	r2,-12(fp)
   1c92c:	10800017 	ldw	r2,0(r2)
   1c930:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1c934:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1c938:	00000c06 	br	1c96c <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   1c93c:	e0bffe17 	ldw	r2,-8(fp)
   1c940:	10c00044 	addi	r3,r2,1
   1c944:	e0fffe15 	stw	r3,-8(fp)
   1c948:	10800003 	ldbu	r2,0(r2)
   1c94c:	10803fcc 	andi	r2,r2,255
   1c950:	100b883a 	mov	r5,r2
   1c954:	e13ffc17 	ldw	r4,-16(fp)
   1c958:	001c7c80 	call	1c7c8 <alt_up_irda_write_data>
   1c95c:	1000081e 	bne	r2,zero,1c980 <alt_up_irda_write_fd+0x74>
			count++;
   1c960:	e0bffb17 	ldw	r2,-20(fp)
   1c964:	10800044 	addi	r2,r2,1
   1c968:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   1c96c:	e0bfff17 	ldw	r2,-4(fp)
   1c970:	10ffffc4 	addi	r3,r2,-1
   1c974:	e0ffff15 	stw	r3,-4(fp)
   1c978:	103ff01e 	bne	r2,zero,1c93c <alt_up_irda_write_fd+0x30>
   1c97c:	00000106 	br	1c984 <alt_up_irda_write_fd+0x78>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
   1c980:	0001883a 	nop
	}
	return count;
   1c984:	e0bffb17 	ldw	r2,-20(fp)
}
   1c988:	e037883a 	mov	sp,fp
   1c98c:	dfc00117 	ldw	ra,4(sp)
   1c990:	df000017 	ldw	fp,0(sp)
   1c994:	dec00204 	addi	sp,sp,8
   1c998:	f800283a 	ret

0001c99c <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   1c99c:	defffc04 	addi	sp,sp,-16
   1c9a0:	dfc00315 	stw	ra,12(sp)
   1c9a4:	df000215 	stw	fp,8(sp)
   1c9a8:	df000204 	addi	fp,sp,8
   1c9ac:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   1c9b0:	d1600a04 	addi	r5,gp,-32728
   1c9b4:	e13fff17 	ldw	r4,-4(fp)
   1c9b8:	001d7040 	call	1d704 <alt_find_dev>
   1c9bc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1c9c0:	e0bffe17 	ldw	r2,-8(fp)
}
   1c9c4:	e037883a 	mov	sp,fp
   1c9c8:	dfc00117 	ldw	ra,4(sp)
   1c9cc:	df000017 	ldw	fp,0(sp)
   1c9d0:	dec00204 	addi	sp,sp,8
   1c9d4:	f800283a 	ret

0001c9d8 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   1c9d8:	defffd04 	addi	sp,sp,-12
   1c9dc:	df000215 	stw	fp,8(sp)
   1c9e0:	df000204 	addi	fp,sp,8
   1c9e4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   1c9e8:	e0bfff17 	ldw	r2,-4(fp)
   1c9ec:	1080400c 	andi	r2,r2,256
   1c9f0:	1004d23a 	srli	r2,r2,8
   1c9f4:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   1c9f8:	e0bffe03 	ldbu	r2,-8(fp)
}
   1c9fc:	e037883a 	mov	sp,fp
   1ca00:	df000017 	ldw	fp,0(sp)
   1ca04:	dec00104 	addi	sp,sp,4
   1ca08:	f800283a 	ret

0001ca0c <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   1ca0c:	defffd04 	addi	sp,sp,-12
   1ca10:	df000215 	stw	fp,8(sp)
   1ca14:	df000204 	addi	fp,sp,8
   1ca18:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   1ca1c:	e0bfff17 	ldw	r2,-4(fp)
   1ca20:	1080004c 	andi	r2,r2,1
   1ca24:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1ca28:	e0bffe03 	ldbu	r2,-8(fp)
}
   1ca2c:	e037883a 	mov	sp,fp
   1ca30:	df000017 	ldw	fp,0(sp)
   1ca34:	dec00104 	addi	sp,sp,4
   1ca38:	f800283a 	ret

0001ca3c <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   1ca3c:	defffd04 	addi	sp,sp,-12
   1ca40:	df000215 	stw	fp,8(sp)
   1ca44:	df000204 	addi	fp,sp,8
   1ca48:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   1ca4c:	e0bfff17 	ldw	r2,-4(fp)
   1ca50:	1081000c 	andi	r2,r2,1024
   1ca54:	1004d2ba 	srli	r2,r2,10
   1ca58:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1ca5c:	e0bffe03 	ldbu	r2,-8(fp)
}
   1ca60:	e037883a 	mov	sp,fp
   1ca64:	df000017 	ldw	fp,0(sp)
   1ca68:	dec00104 	addi	sp,sp,4
   1ca6c:	f800283a 	ret

0001ca70 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   1ca70:	defffd04 	addi	sp,sp,-12
   1ca74:	df000215 	stw	fp,8(sp)
   1ca78:	df000204 	addi	fp,sp,8
   1ca7c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   1ca80:	e0bfff17 	ldw	r2,-4(fp)
   1ca84:	1004d43a 	srli	r2,r2,16
   1ca88:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   1ca8c:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1ca90:	e037883a 	mov	sp,fp
   1ca94:	df000017 	ldw	fp,0(sp)
   1ca98:	dec00104 	addi	sp,sp,4
   1ca9c:	f800283a 	ret

0001caa0 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   1caa0:	defffd04 	addi	sp,sp,-12
   1caa4:	df000215 	stw	fp,8(sp)
   1caa8:	df000204 	addi	fp,sp,8
   1caac:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   1cab0:	e0bfff17 	ldw	r2,-4(fp)
   1cab4:	10a0000c 	andi	r2,r2,32768
   1cab8:	1004d3fa 	srli	r2,r2,15
   1cabc:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   1cac0:	e0bffe03 	ldbu	r2,-8(fp)
}
   1cac4:	e037883a 	mov	sp,fp
   1cac8:	df000017 	ldw	fp,0(sp)
   1cacc:	dec00104 	addi	sp,sp,4
   1cad0:	f800283a 	ret

0001cad4 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   1cad4:	defffd04 	addi	sp,sp,-12
   1cad8:	df000215 	stw	fp,8(sp)
   1cadc:	df000204 	addi	fp,sp,8
   1cae0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   1cae4:	e0bfff17 	ldw	r2,-4(fp)
   1cae8:	e0bffe05 	stb	r2,-8(fp)
	return data;
   1caec:	e0bffe03 	ldbu	r2,-8(fp)
}
   1caf0:	e037883a 	mov	sp,fp
   1caf4:	df000017 	ldw	fp,0(sp)
   1caf8:	dec00104 	addi	sp,sp,4
   1cafc:	f800283a 	ret

0001cb00 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   1cb00:	defffb04 	addi	sp,sp,-20
   1cb04:	dfc00415 	stw	ra,16(sp)
   1cb08:	df000315 	stw	fp,12(sp)
   1cb0c:	df000304 	addi	fp,sp,12
   1cb10:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   1cb14:	01403fc4 	movi	r5,255
   1cb18:	e13fff17 	ldw	r4,-4(fp)
   1cb1c:	001cd600 	call	1cd60 <alt_up_ps2_write_data_byte_with_ack>
   1cb20:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   1cb24:	e0bffd17 	ldw	r2,-12(fp)
   1cb28:	1000211e 	bne	r2,zero,1cbb0 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1cb2c:	e0bffe04 	addi	r2,fp,-8
   1cb30:	100b883a 	mov	r5,r2
   1cb34:	e13fff17 	ldw	r4,-4(fp)
   1cb38:	001cdc40 	call	1cdc4 <alt_up_ps2_read_data_byte_timeout>
   1cb3c:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   1cb40:	e0bffd17 	ldw	r2,-12(fp)
   1cb44:	10001a1e 	bne	r2,zero,1cbb0 <alt_up_ps2_init+0xb0>
   1cb48:	e0bffe03 	ldbu	r2,-8(fp)
   1cb4c:	10803fcc 	andi	r2,r2,255
   1cb50:	10802a98 	cmpnei	r2,r2,170
   1cb54:	1000161e 	bne	r2,zero,1cbb0 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1cb58:	e0bffe04 	addi	r2,fp,-8
   1cb5c:	100b883a 	mov	r5,r2
   1cb60:	e13fff17 	ldw	r4,-4(fp)
   1cb64:	001cdc40 	call	1cdc4 <alt_up_ps2_read_data_byte_timeout>
   1cb68:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   1cb6c:	e0bffd17 	ldw	r2,-12(fp)
   1cb70:	10bfe318 	cmpnei	r2,r2,-116
   1cb74:	1000041e 	bne	r2,zero,1cb88 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   1cb78:	e0bfff17 	ldw	r2,-4(fp)
   1cb7c:	00c00044 	movi	r3,1
   1cb80:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
   1cb84:	00000a06 	br	1cbb0 <alt_up_ps2_init+0xb0>
			if (status == -ETIMEDOUT)
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
			}
			else if (status == 0 && byte == 0x00)
   1cb88:	e0bffd17 	ldw	r2,-12(fp)
   1cb8c:	1000081e 	bne	r2,zero,1cbb0 <alt_up_ps2_init+0xb0>
   1cb90:	e0bffe03 	ldbu	r2,-8(fp)
   1cb94:	10803fcc 	andi	r2,r2,255
   1cb98:	1000051e 	bne	r2,zero,1cbb0 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   1cb9c:	e0bfff17 	ldw	r2,-4(fp)
   1cba0:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   1cba4:	01403d04 	movi	r5,244
   1cba8:	e13fff17 	ldw	r4,-4(fp)
   1cbac:	001cc840 	call	1cc84 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   1cbb0:	0001883a 	nop
   1cbb4:	e037883a 	mov	sp,fp
   1cbb8:	dfc00117 	ldw	ra,4(sp)
   1cbbc:	df000017 	ldw	fp,0(sp)
   1cbc0:	dec00204 	addi	sp,sp,8
   1cbc4:	f800283a 	ret

0001cbc8 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1cbc8:	defffd04 	addi	sp,sp,-12
   1cbcc:	df000215 	stw	fp,8(sp)
   1cbd0:	df000204 	addi	fp,sp,8
   1cbd4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1cbd8:	e0bfff17 	ldw	r2,-4(fp)
   1cbdc:	10800a17 	ldw	r2,40(r2)
   1cbe0:	10800104 	addi	r2,r2,4
   1cbe4:	10800037 	ldwio	r2,0(r2)
   1cbe8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1cbec:	e0bffe17 	ldw	r2,-8(fp)
   1cbf0:	10800054 	ori	r2,r2,1
   1cbf4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1cbf8:	e0bfff17 	ldw	r2,-4(fp)
   1cbfc:	10800a17 	ldw	r2,40(r2)
   1cc00:	10800104 	addi	r2,r2,4
   1cc04:	1007883a 	mov	r3,r2
   1cc08:	e0bffe17 	ldw	r2,-8(fp)
   1cc0c:	18800035 	stwio	r2,0(r3)
}
   1cc10:	0001883a 	nop
   1cc14:	e037883a 	mov	sp,fp
   1cc18:	df000017 	ldw	fp,0(sp)
   1cc1c:	dec00104 	addi	sp,sp,4
   1cc20:	f800283a 	ret

0001cc24 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1cc24:	defffd04 	addi	sp,sp,-12
   1cc28:	df000215 	stw	fp,8(sp)
   1cc2c:	df000204 	addi	fp,sp,8
   1cc30:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1cc34:	e0bfff17 	ldw	r2,-4(fp)
   1cc38:	10800a17 	ldw	r2,40(r2)
   1cc3c:	10800104 	addi	r2,r2,4
   1cc40:	10800037 	ldwio	r2,0(r2)
   1cc44:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1cc48:	e0fffe17 	ldw	r3,-8(fp)
   1cc4c:	00bfff84 	movi	r2,-2
   1cc50:	1884703a 	and	r2,r3,r2
   1cc54:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1cc58:	e0bfff17 	ldw	r2,-4(fp)
   1cc5c:	10800a17 	ldw	r2,40(r2)
   1cc60:	10800104 	addi	r2,r2,4
   1cc64:	1007883a 	mov	r3,r2
   1cc68:	e0bffe17 	ldw	r2,-8(fp)
   1cc6c:	18800035 	stwio	r2,0(r3)
}
   1cc70:	0001883a 	nop
   1cc74:	e037883a 	mov	sp,fp
   1cc78:	df000017 	ldw	fp,0(sp)
   1cc7c:	dec00104 	addi	sp,sp,4
   1cc80:	f800283a 	ret

0001cc84 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1cc84:	defffb04 	addi	sp,sp,-20
   1cc88:	dfc00415 	stw	ra,16(sp)
   1cc8c:	df000315 	stw	fp,12(sp)
   1cc90:	df000304 	addi	fp,sp,12
   1cc94:	e13ffe15 	stw	r4,-8(fp)
   1cc98:	2805883a 	mov	r2,r5
   1cc9c:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   1cca0:	e0bffe17 	ldw	r2,-8(fp)
   1cca4:	10800a17 	ldw	r2,40(r2)
   1cca8:	1007883a 	mov	r3,r2
   1ccac:	e0bfff03 	ldbu	r2,-4(fp)
   1ccb0:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   1ccb4:	e0bffe17 	ldw	r2,-8(fp)
   1ccb8:	10800a17 	ldw	r2,40(r2)
   1ccbc:	10800104 	addi	r2,r2,4
   1ccc0:	10800037 	ldwio	r2,0(r2)
   1ccc4:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   1ccc8:	e13ffd17 	ldw	r4,-12(fp)
   1cccc:	001ca3c0 	call	1ca3c <read_CE_bit>
   1ccd0:	10803fcc 	andi	r2,r2,255
   1ccd4:	10000226 	beq	r2,zero,1cce0 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   1ccd8:	00bffec4 	movi	r2,-5
   1ccdc:	00000106 	br	1cce4 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   1cce0:	0005883a 	mov	r2,zero
}
   1cce4:	e037883a 	mov	sp,fp
   1cce8:	dfc00117 	ldw	ra,4(sp)
   1ccec:	df000017 	ldw	fp,0(sp)
   1ccf0:	dec00204 	addi	sp,sp,8
   1ccf4:	f800283a 	ret

0001ccf8 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   1ccf8:	defffc04 	addi	sp,sp,-16
   1ccfc:	dfc00315 	stw	ra,12(sp)
   1cd00:	df000215 	stw	fp,8(sp)
   1cd04:	df000204 	addi	fp,sp,8
   1cd08:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   1cd0c:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   1cd10:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   1cd14:	e0bffe44 	addi	r2,fp,-7
   1cd18:	100b883a 	mov	r5,r2
   1cd1c:	e13fff17 	ldw	r4,-4(fp)
   1cd20:	001cdc40 	call	1cdc4 <alt_up_ps2_read_data_byte_timeout>
   1cd24:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   1cd28:	e0bffe03 	ldbu	r2,-8(fp)
   1cd2c:	1000061e 	bne	r2,zero,1cd48 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   1cd30:	e0bffe43 	ldbu	r2,-7(fp)
   1cd34:	10803fcc 	andi	r2,r2,255
   1cd38:	10803e98 	cmpnei	r2,r2,250
   1cd3c:	103ff51e 	bne	r2,zero,1cd14 <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
   1cd40:	0005883a 	mov	r2,zero
   1cd44:	00000106 	br	1cd4c <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
   1cd48:	e0bffe03 	ldbu	r2,-8(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
   1cd4c:	e037883a 	mov	sp,fp
   1cd50:	dfc00117 	ldw	ra,4(sp)
   1cd54:	df000017 	ldw	fp,0(sp)
   1cd58:	dec00204 	addi	sp,sp,8
   1cd5c:	f800283a 	ret

0001cd60 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1cd60:	defffa04 	addi	sp,sp,-24
   1cd64:	dfc00515 	stw	ra,20(sp)
   1cd68:	df000415 	stw	fp,16(sp)
   1cd6c:	df000404 	addi	fp,sp,16
   1cd70:	e13ffe15 	stw	r4,-8(fp)
   1cd74:	2805883a 	mov	r2,r5
   1cd78:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   1cd7c:	e0bfff03 	ldbu	r2,-4(fp)
   1cd80:	100b883a 	mov	r5,r2
   1cd84:	e13ffe17 	ldw	r4,-8(fp)
   1cd88:	001cc840 	call	1cc84 <alt_up_ps2_write_data_byte>
   1cd8c:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   1cd90:	e0bffc17 	ldw	r2,-16(fp)
   1cd94:	10000226 	beq	r2,zero,1cda0 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   1cd98:	e0bffc17 	ldw	r2,-16(fp)
   1cd9c:	00000406 	br	1cdb0 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   1cda0:	e13ffe17 	ldw	r4,-8(fp)
   1cda4:	001ccf80 	call	1ccf8 <alt_up_ps2_wait_for_ack>
   1cda8:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   1cdac:	e0bffd17 	ldw	r2,-12(fp)
}
   1cdb0:	e037883a 	mov	sp,fp
   1cdb4:	dfc00117 	ldw	ra,4(sp)
   1cdb8:	df000017 	ldw	fp,0(sp)
   1cdbc:	dec00204 	addi	sp,sp,8
   1cdc0:	f800283a 	ret

0001cdc4 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1cdc4:	defffa04 	addi	sp,sp,-24
   1cdc8:	dfc00515 	stw	ra,20(sp)
   1cdcc:	df000415 	stw	fp,16(sp)
   1cdd0:	df000404 	addi	fp,sp,16
   1cdd4:	e13ffe15 	stw	r4,-8(fp)
   1cdd8:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1cddc:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   1cde0:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   1cde4:	e0bffc17 	ldw	r2,-16(fp)
   1cde8:	10800044 	addi	r2,r2,1
   1cdec:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1cdf0:	e0bffe17 	ldw	r2,-8(fp)
   1cdf4:	10800a17 	ldw	r2,40(r2)
   1cdf8:	10800037 	ldwio	r2,0(r2)
   1cdfc:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   1ce00:	e13ffd17 	ldw	r4,-12(fp)
   1ce04:	001caa00 	call	1caa0 <read_data_valid>
   1ce08:	10803fcc 	andi	r2,r2,255
   1ce0c:	10000726 	beq	r2,zero,1ce2c <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   1ce10:	e13ffd17 	ldw	r4,-12(fp)
   1ce14:	001cad40 	call	1cad4 <read_data_byte>
   1ce18:	1007883a 	mov	r3,r2
   1ce1c:	e0bfff17 	ldw	r2,-4(fp)
   1ce20:	10c00005 	stb	r3,0(r2)
			return 0;
   1ce24:	0005883a 	mov	r2,zero
   1ce28:	00000806 	br	1ce4c <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   1ce2c:	e0bffe17 	ldw	r2,-8(fp)
   1ce30:	10800c17 	ldw	r2,48(r2)
   1ce34:	103feb26 	beq	r2,zero,1cde4 <alt_up_ps2_read_data_byte_timeout+0x20>
   1ce38:	e0bffe17 	ldw	r2,-8(fp)
   1ce3c:	10c00c17 	ldw	r3,48(r2)
   1ce40:	e0bffc17 	ldw	r2,-16(fp)
   1ce44:	18bfe72e 	bgeu	r3,r2,1cde4 <alt_up_ps2_read_data_byte_timeout+0x20>
		{
			return -ETIMEDOUT;
   1ce48:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
   1ce4c:	e037883a 	mov	sp,fp
   1ce50:	dfc00117 	ldw	ra,4(sp)
   1ce54:	df000017 	ldw	fp,0(sp)
   1ce58:	dec00204 	addi	sp,sp,8
   1ce5c:	f800283a 	ret

0001ce60 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1ce60:	defffb04 	addi	sp,sp,-20
   1ce64:	dfc00415 	stw	ra,16(sp)
   1ce68:	df000315 	stw	fp,12(sp)
   1ce6c:	df000304 	addi	fp,sp,12
   1ce70:	e13ffe15 	stw	r4,-8(fp)
   1ce74:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1ce78:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1ce7c:	e0bffe17 	ldw	r2,-8(fp)
   1ce80:	10800a17 	ldw	r2,40(r2)
   1ce84:	10800037 	ldwio	r2,0(r2)
   1ce88:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   1ce8c:	e13ffd17 	ldw	r4,-12(fp)
   1ce90:	001caa00 	call	1caa0 <read_data_valid>
   1ce94:	10803fcc 	andi	r2,r2,255
   1ce98:	10000726 	beq	r2,zero,1ceb8 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   1ce9c:	e13ffd17 	ldw	r4,-12(fp)
   1cea0:	001cad40 	call	1cad4 <read_data_byte>
   1cea4:	1007883a 	mov	r3,r2
   1cea8:	e0bfff17 	ldw	r2,-4(fp)
   1ceac:	10c00005 	stb	r3,0(r2)
		return 0;
   1ceb0:	0005883a 	mov	r2,zero
   1ceb4:	00000106 	br	1cebc <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   1ceb8:	00bfffc4 	movi	r2,-1
}
   1cebc:	e037883a 	mov	sp,fp
   1cec0:	dfc00117 	ldw	ra,4(sp)
   1cec4:	df000017 	ldw	fp,0(sp)
   1cec8:	dec00204 	addi	sp,sp,8
   1cecc:	f800283a 	ret

0001ced0 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   1ced0:	defffb04 	addi	sp,sp,-20
   1ced4:	dfc00415 	stw	ra,16(sp)
   1ced8:	df000315 	stw	fp,12(sp)
   1cedc:	df000304 	addi	fp,sp,12
   1cee0:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   1cee4:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   1cee8:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1ceec:	e0bfff17 	ldw	r2,-4(fp)
   1cef0:	10800a17 	ldw	r2,40(r2)
   1cef4:	10800037 	ldwio	r2,0(r2)
   1cef8:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   1cefc:	e13ffe17 	ldw	r4,-8(fp)
   1cf00:	001ca700 	call	1ca70 <read_num_bytes_available>
   1cf04:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   1cf08:	e0bffd0b 	ldhu	r2,-12(fp)
   1cf0c:	103ff71e 	bne	r2,zero,1ceec <alt_up_ps2_clear_fifo+0x1c>
}
   1cf10:	0001883a 	nop
   1cf14:	e037883a 	mov	sp,fp
   1cf18:	dfc00117 	ldw	ra,4(sp)
   1cf1c:	df000017 	ldw	fp,0(sp)
   1cf20:	dec00204 	addi	sp,sp,8
   1cf24:	f800283a 	ret

0001cf28 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   1cf28:	defff804 	addi	sp,sp,-32
   1cf2c:	dfc00715 	stw	ra,28(sp)
   1cf30:	df000615 	stw	fp,24(sp)
   1cf34:	df000604 	addi	fp,sp,24
   1cf38:	e13ffd15 	stw	r4,-12(fp)
   1cf3c:	e17ffe15 	stw	r5,-8(fp)
   1cf40:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1cf44:	e0bffd17 	ldw	r2,-12(fp)
   1cf48:	10800017 	ldw	r2,0(r2)
   1cf4c:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   1cf50:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   1cf54:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   1cf58:	e0fffc17 	ldw	r3,-16(fp)
   1cf5c:	e0bfff17 	ldw	r2,-4(fp)
   1cf60:	18bffd16 	blt	r3,r2,1cf58 <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   1cf64:	e0bffe17 	ldw	r2,-8(fp)
   1cf68:	10c00044 	addi	r3,r2,1
   1cf6c:	e0fffe15 	stw	r3,-8(fp)
   1cf70:	100b883a 	mov	r5,r2
   1cf74:	e13ffa17 	ldw	r4,-24(fp)
   1cf78:	001cdc40 	call	1cdc4 <alt_up_ps2_read_data_byte_timeout>
   1cf7c:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   1cf80:	e0bffb17 	ldw	r2,-20(fp)
   1cf84:	10000226 	beq	r2,zero,1cf90 <alt_up_ps2_read_fd+0x68>
			return count;
   1cf88:	e0bffc17 	ldw	r2,-16(fp)
   1cf8c:	00000406 	br	1cfa0 <alt_up_ps2_read_fd+0x78>
		count++;
   1cf90:	e0bffc17 	ldw	r2,-16(fp)
   1cf94:	10800044 	addi	r2,r2,1
   1cf98:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   1cf9c:	e0bffc17 	ldw	r2,-16(fp)
}
   1cfa0:	e037883a 	mov	sp,fp
   1cfa4:	dfc00117 	ldw	ra,4(sp)
   1cfa8:	df000017 	ldw	fp,0(sp)
   1cfac:	dec00204 	addi	sp,sp,8
   1cfb0:	f800283a 	ret

0001cfb4 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1cfb4:	defff804 	addi	sp,sp,-32
   1cfb8:	dfc00715 	stw	ra,28(sp)
   1cfbc:	df000615 	stw	fp,24(sp)
   1cfc0:	df000604 	addi	fp,sp,24
   1cfc4:	e13ffd15 	stw	r4,-12(fp)
   1cfc8:	e17ffe15 	stw	r5,-8(fp)
   1cfcc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1cfd0:	e0bffd17 	ldw	r2,-12(fp)
   1cfd4:	10800017 	ldw	r2,0(r2)
   1cfd8:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   1cfdc:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   1cfe0:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   1cfe4:	00001006 	br	1d028 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   1cfe8:	e0bffe17 	ldw	r2,-8(fp)
   1cfec:	10c00044 	addi	r3,r2,1
   1cff0:	e0fffe15 	stw	r3,-8(fp)
   1cff4:	10800003 	ldbu	r2,0(r2)
   1cff8:	10803fcc 	andi	r2,r2,255
   1cffc:	100b883a 	mov	r5,r2
   1d000:	e13ffb17 	ldw	r4,-20(fp)
   1d004:	001cc840 	call	1cc84 <alt_up_ps2_write_data_byte>
   1d008:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   1d00c:	e0bffc17 	ldw	r2,-16(fp)
   1d010:	10000226 	beq	r2,zero,1d01c <alt_up_ps2_write_fd+0x68>
			return count;
   1d014:	e0bffa17 	ldw	r2,-24(fp)
   1d018:	00000706 	br	1d038 <alt_up_ps2_write_fd+0x84>
		count++;
   1d01c:	e0bffa17 	ldw	r2,-24(fp)
   1d020:	10800044 	addi	r2,r2,1
   1d024:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   1d028:	e0fffa17 	ldw	r3,-24(fp)
   1d02c:	e0bfff17 	ldw	r2,-4(fp)
   1d030:	18bfed16 	blt	r3,r2,1cfe8 <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   1d034:	e0bffa17 	ldw	r2,-24(fp)
}
   1d038:	e037883a 	mov	sp,fp
   1d03c:	dfc00117 	ldw	ra,4(sp)
   1d040:	df000017 	ldw	fp,0(sp)
   1d044:	dec00204 	addi	sp,sp,8
   1d048:	f800283a 	ret

0001d04c <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   1d04c:	defffc04 	addi	sp,sp,-16
   1d050:	dfc00315 	stw	ra,12(sp)
   1d054:	df000215 	stw	fp,8(sp)
   1d058:	df000204 	addi	fp,sp,8
   1d05c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   1d060:	d1600a04 	addi	r5,gp,-32728
   1d064:	e13fff17 	ldw	r4,-4(fp)
   1d068:	001d7040 	call	1d704 <alt_find_dev>
   1d06c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1d070:	e0bffe17 	ldw	r2,-8(fp)
}
   1d074:	e037883a 	mov	sp,fp
   1d078:	dfc00117 	ldw	ra,4(sp)
   1d07c:	df000017 	ldw	fp,0(sp)
   1d080:	dec00204 	addi	sp,sp,8
   1d084:	f800283a 	ret

0001d088 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1d088:	defffd04 	addi	sp,sp,-12
   1d08c:	df000215 	stw	fp,8(sp)
   1d090:	df000204 	addi	fp,sp,8
   1d094:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1d098:	e0bfff17 	ldw	r2,-4(fp)
   1d09c:	10800a17 	ldw	r2,40(r2)
   1d0a0:	10800104 	addi	r2,r2,4
   1d0a4:	10800037 	ldwio	r2,0(r2)
   1d0a8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   1d0ac:	e0bffe17 	ldw	r2,-8(fp)
   1d0b0:	10800054 	ori	r2,r2,1
   1d0b4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1d0b8:	e0bfff17 	ldw	r2,-4(fp)
   1d0bc:	10800a17 	ldw	r2,40(r2)
   1d0c0:	10800104 	addi	r2,r2,4
   1d0c4:	1007883a 	mov	r3,r2
   1d0c8:	e0bffe17 	ldw	r2,-8(fp)
   1d0cc:	18800035 	stwio	r2,0(r3)
}
   1d0d0:	0001883a 	nop
   1d0d4:	e037883a 	mov	sp,fp
   1d0d8:	df000017 	ldw	fp,0(sp)
   1d0dc:	dec00104 	addi	sp,sp,4
   1d0e0:	f800283a 	ret

0001d0e4 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1d0e4:	defffd04 	addi	sp,sp,-12
   1d0e8:	df000215 	stw	fp,8(sp)
   1d0ec:	df000204 	addi	fp,sp,8
   1d0f0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1d0f4:	e0bfff17 	ldw	r2,-4(fp)
   1d0f8:	10800a17 	ldw	r2,40(r2)
   1d0fc:	10800104 	addi	r2,r2,4
   1d100:	10800037 	ldwio	r2,0(r2)
   1d104:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   1d108:	e0fffe17 	ldw	r3,-8(fp)
   1d10c:	00bfff84 	movi	r2,-2
   1d110:	1884703a 	and	r2,r3,r2
   1d114:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1d118:	e0bfff17 	ldw	r2,-4(fp)
   1d11c:	10800a17 	ldw	r2,40(r2)
   1d120:	10800104 	addi	r2,r2,4
   1d124:	1007883a 	mov	r3,r2
   1d128:	e0bffe17 	ldw	r2,-8(fp)
   1d12c:	18800035 	stwio	r2,0(r3)
}
   1d130:	0001883a 	nop
   1d134:	e037883a 	mov	sp,fp
   1d138:	df000017 	ldw	fp,0(sp)
   1d13c:	dec00104 	addi	sp,sp,4
   1d140:	f800283a 	ret

0001d144 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   1d144:	defffd04 	addi	sp,sp,-12
   1d148:	df000215 	stw	fp,8(sp)
   1d14c:	df000204 	addi	fp,sp,8
   1d150:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1d154:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   1d158:	e0bfff17 	ldw	r2,-4(fp)
   1d15c:	10800a17 	ldw	r2,40(r2)
   1d160:	10800084 	addi	r2,r2,2
   1d164:	1080002b 	ldhuio	r2,0(r2)
   1d168:	10bfffcc 	andi	r2,r2,65535
   1d16c:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   1d170:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1d174:	e037883a 	mov	sp,fp
   1d178:	df000017 	ldw	fp,0(sp)
   1d17c:	dec00104 	addi	sp,sp,4
   1d180:	f800283a 	ret

0001d184 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   1d184:	defffd04 	addi	sp,sp,-12
   1d188:	df000215 	stw	fp,8(sp)
   1d18c:	df000204 	addi	fp,sp,8
   1d190:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1d194:	e0bfff17 	ldw	r2,-4(fp)
   1d198:	10800a17 	ldw	r2,40(r2)
   1d19c:	10800104 	addi	r2,r2,4
   1d1a0:	10800037 	ldwio	r2,0(r2)
   1d1a4:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   1d1a8:	e0bffe17 	ldw	r2,-8(fp)
   1d1ac:	1004d43a 	srli	r2,r2,16
}
   1d1b0:	e037883a 	mov	sp,fp
   1d1b4:	df000017 	ldw	fp,0(sp)
   1d1b8:	dec00104 	addi	sp,sp,4
   1d1bc:	f800283a 	ret

0001d1c0 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   1d1c0:	defffd04 	addi	sp,sp,-12
   1d1c4:	df000215 	stw	fp,8(sp)
   1d1c8:	df000204 	addi	fp,sp,8
   1d1cc:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   1d1d0:	e0bfff17 	ldw	r2,-4(fp)
   1d1d4:	1080800c 	andi	r2,r2,512
   1d1d8:	1004d27a 	srli	r2,r2,9
   1d1dc:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1d1e0:	e0bffe17 	ldw	r2,-8(fp)
   1d1e4:	10000226 	beq	r2,zero,1d1f0 <alt_up_rs232_check_parity+0x30>
   1d1e8:	00bfffc4 	movi	r2,-1
   1d1ec:	00000106 	br	1d1f4 <alt_up_rs232_check_parity+0x34>
   1d1f0:	0005883a 	mov	r2,zero
}
   1d1f4:	e037883a 	mov	sp,fp
   1d1f8:	df000017 	ldw	fp,0(sp)
   1d1fc:	dec00104 	addi	sp,sp,4
   1d200:	f800283a 	ret

0001d204 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   1d204:	defffd04 	addi	sp,sp,-12
   1d208:	df000215 	stw	fp,8(sp)
   1d20c:	df000204 	addi	fp,sp,8
   1d210:	e13ffe15 	stw	r4,-8(fp)
   1d214:	2805883a 	mov	r2,r5
   1d218:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   1d21c:	e0bffe17 	ldw	r2,-8(fp)
   1d220:	10800a17 	ldw	r2,40(r2)
   1d224:	1007883a 	mov	r3,r2
   1d228:	e0bfff03 	ldbu	r2,-4(fp)
   1d22c:	18800035 	stwio	r2,0(r3)
	return 0;
   1d230:	0005883a 	mov	r2,zero
}
   1d234:	e037883a 	mov	sp,fp
   1d238:	df000017 	ldw	fp,0(sp)
   1d23c:	dec00104 	addi	sp,sp,4
   1d240:	f800283a 	ret

0001d244 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   1d244:	defffa04 	addi	sp,sp,-24
   1d248:	dfc00515 	stw	ra,20(sp)
   1d24c:	df000415 	stw	fp,16(sp)
   1d250:	df000404 	addi	fp,sp,16
   1d254:	e13ffd15 	stw	r4,-12(fp)
   1d258:	e17ffe15 	stw	r5,-8(fp)
   1d25c:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   1d260:	e0bffd17 	ldw	r2,-12(fp)
   1d264:	10800a17 	ldw	r2,40(r2)
   1d268:	10800037 	ldwio	r2,0(r2)
   1d26c:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   1d270:	e0bffc17 	ldw	r2,-16(fp)
   1d274:	1007883a 	mov	r3,r2
   1d278:	e0bffe17 	ldw	r2,-8(fp)
   1d27c:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   1d280:	e13ffc17 	ldw	r4,-16(fp)
   1d284:	001d1c00 	call	1d1c0 <alt_up_rs232_check_parity>
   1d288:	1007883a 	mov	r3,r2
   1d28c:	e0bfff17 	ldw	r2,-4(fp)
   1d290:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   1d294:	e0bffc17 	ldw	r2,-16(fp)
   1d298:	10a0000c 	andi	r2,r2,32768
   1d29c:	1004d3fa 	srli	r2,r2,15
   1d2a0:	10bfffc4 	addi	r2,r2,-1
}
   1d2a4:	e037883a 	mov	sp,fp
   1d2a8:	dfc00117 	ldw	ra,4(sp)
   1d2ac:	df000017 	ldw	fp,0(sp)
   1d2b0:	dec00204 	addi	sp,sp,8
   1d2b4:	f800283a 	ret

0001d2b8 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   1d2b8:	defff804 	addi	sp,sp,-32
   1d2bc:	dfc00715 	stw	ra,28(sp)
   1d2c0:	df000615 	stw	fp,24(sp)
   1d2c4:	df000604 	addi	fp,sp,24
   1d2c8:	e13ffd15 	stw	r4,-12(fp)
   1d2cc:	e17ffe15 	stw	r5,-8(fp)
   1d2d0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1d2d4:	e0bffd17 	ldw	r2,-12(fp)
   1d2d8:	10800017 	ldw	r2,0(r2)
   1d2dc:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1d2e0:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1d2e4:	00000c06 	br	1d318 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   1d2e8:	e0bffe17 	ldw	r2,-8(fp)
   1d2ec:	10c00044 	addi	r3,r2,1
   1d2f0:	e0fffe15 	stw	r3,-8(fp)
   1d2f4:	e0fffc04 	addi	r3,fp,-16
   1d2f8:	180d883a 	mov	r6,r3
   1d2fc:	100b883a 	mov	r5,r2
   1d300:	e13ffb17 	ldw	r4,-20(fp)
   1d304:	001d2440 	call	1d244 <alt_up_rs232_read_data>
   1d308:	1000081e 	bne	r2,zero,1d32c <alt_up_rs232_read_fd+0x74>
			count++;
   1d30c:	e0bffa17 	ldw	r2,-24(fp)
   1d310:	10800044 	addi	r2,r2,1
   1d314:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1d318:	e0bfff17 	ldw	r2,-4(fp)
   1d31c:	10ffffc4 	addi	r3,r2,-1
   1d320:	e0ffff15 	stw	r3,-4(fp)
   1d324:	103ff01e 	bne	r2,zero,1d2e8 <alt_up_rs232_read_fd+0x30>
   1d328:	00000106 	br	1d330 <alt_up_rs232_read_fd+0x78>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   1d32c:	0001883a 	nop
	}
	return count;
   1d330:	e0bffa17 	ldw	r2,-24(fp)
}
   1d334:	e037883a 	mov	sp,fp
   1d338:	dfc00117 	ldw	ra,4(sp)
   1d33c:	df000017 	ldw	fp,0(sp)
   1d340:	dec00204 	addi	sp,sp,8
   1d344:	f800283a 	ret

0001d348 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1d348:	defff904 	addi	sp,sp,-28
   1d34c:	dfc00615 	stw	ra,24(sp)
   1d350:	df000515 	stw	fp,20(sp)
   1d354:	df000504 	addi	fp,sp,20
   1d358:	e13ffd15 	stw	r4,-12(fp)
   1d35c:	e17ffe15 	stw	r5,-8(fp)
   1d360:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1d364:	e0bffd17 	ldw	r2,-12(fp)
   1d368:	10800017 	ldw	r2,0(r2)
   1d36c:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1d370:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1d374:	00000d06 	br	1d3ac <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   1d378:	e0bffe17 	ldw	r2,-8(fp)
   1d37c:	10800003 	ldbu	r2,0(r2)
   1d380:	10803fcc 	andi	r2,r2,255
   1d384:	100b883a 	mov	r5,r2
   1d388:	e13ffc17 	ldw	r4,-16(fp)
   1d38c:	001d2040 	call	1d204 <alt_up_rs232_write_data>
   1d390:	10000b1e 	bne	r2,zero,1d3c0 <alt_up_rs232_write_fd+0x78>
		{
			count++;
   1d394:	e0bffb17 	ldw	r2,-20(fp)
   1d398:	10800044 	addi	r2,r2,1
   1d39c:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   1d3a0:	e0bffe17 	ldw	r2,-8(fp)
   1d3a4:	10800044 	addi	r2,r2,1
   1d3a8:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   1d3ac:	e0bfff17 	ldw	r2,-4(fp)
   1d3b0:	10ffffc4 	addi	r3,r2,-1
   1d3b4:	e0ffff15 	stw	r3,-4(fp)
   1d3b8:	103fef1e 	bne	r2,zero,1d378 <alt_up_rs232_write_fd+0x30>
   1d3bc:	00000106 	br	1d3c4 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
			ptr++;
		}
		else
			break;
   1d3c0:	0001883a 	nop
	}
	return count;
   1d3c4:	e0bffb17 	ldw	r2,-20(fp)
}
   1d3c8:	e037883a 	mov	sp,fp
   1d3cc:	dfc00117 	ldw	ra,4(sp)
   1d3d0:	df000017 	ldw	fp,0(sp)
   1d3d4:	dec00204 	addi	sp,sp,8
   1d3d8:	f800283a 	ret

0001d3dc <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   1d3dc:	defffc04 	addi	sp,sp,-16
   1d3e0:	dfc00315 	stw	ra,12(sp)
   1d3e4:	df000215 	stw	fp,8(sp)
   1d3e8:	df000204 	addi	fp,sp,8
   1d3ec:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   1d3f0:	d1600a04 	addi	r5,gp,-32728
   1d3f4:	e13fff17 	ldw	r4,-4(fp)
   1d3f8:	001d7040 	call	1d704 <alt_find_dev>
   1d3fc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1d400:	e0bffe17 	ldw	r2,-8(fp)
}
   1d404:	e037883a 	mov	sp,fp
   1d408:	dfc00117 	ldw	ra,4(sp)
   1d40c:	df000017 	ldw	fp,0(sp)
   1d410:	dec00204 	addi	sp,sp,8
   1d414:	f800283a 	ret

0001d418 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1d418:	defff504 	addi	sp,sp,-44
   1d41c:	df000a15 	stw	fp,40(sp)
   1d420:	df000a04 	addi	fp,sp,40
   1d424:	e13ffc15 	stw	r4,-16(fp)
   1d428:	e17ffd15 	stw	r5,-12(fp)
   1d42c:	e1bffe15 	stw	r6,-8(fp)
   1d430:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1d434:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1d438:	d0a82617 	ldw	r2,-24424(gp)
  
  if (alt_ticks_per_second ())
   1d43c:	10003c26 	beq	r2,zero,1d530 <alt_alarm_start+0x118>
  {
    if (alarm)
   1d440:	e0bffc17 	ldw	r2,-16(fp)
   1d444:	10003826 	beq	r2,zero,1d528 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   1d448:	e0bffc17 	ldw	r2,-16(fp)
   1d44c:	e0fffe17 	ldw	r3,-8(fp)
   1d450:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1d454:	e0bffc17 	ldw	r2,-16(fp)
   1d458:	e0ffff17 	ldw	r3,-4(fp)
   1d45c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d460:	0005303a 	rdctl	r2,status
   1d464:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d468:	e0fff917 	ldw	r3,-28(fp)
   1d46c:	00bfff84 	movi	r2,-2
   1d470:	1884703a 	and	r2,r3,r2
   1d474:	1001703a 	wrctl	status,r2
  
  return context;
   1d478:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   1d47c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1d480:	d0a82717 	ldw	r2,-24420(gp)
      
      current_nticks = alt_nticks();
   1d484:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1d488:	e0fffd17 	ldw	r3,-12(fp)
   1d48c:	e0bff617 	ldw	r2,-40(fp)
   1d490:	1885883a 	add	r2,r3,r2
   1d494:	10c00044 	addi	r3,r2,1
   1d498:	e0bffc17 	ldw	r2,-16(fp)
   1d49c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1d4a0:	e0bffc17 	ldw	r2,-16(fp)
   1d4a4:	10c00217 	ldw	r3,8(r2)
   1d4a8:	e0bff617 	ldw	r2,-40(fp)
   1d4ac:	1880042e 	bgeu	r3,r2,1d4c0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   1d4b0:	e0bffc17 	ldw	r2,-16(fp)
   1d4b4:	00c00044 	movi	r3,1
   1d4b8:	10c00405 	stb	r3,16(r2)
   1d4bc:	00000206 	br	1d4c8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   1d4c0:	e0bffc17 	ldw	r2,-16(fp)
   1d4c4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1d4c8:	e0bffc17 	ldw	r2,-16(fp)
   1d4cc:	d0e02f04 	addi	r3,gp,-32580
   1d4d0:	e0fffa15 	stw	r3,-24(fp)
   1d4d4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1d4d8:	e0bffb17 	ldw	r2,-20(fp)
   1d4dc:	e0fffa17 	ldw	r3,-24(fp)
   1d4e0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1d4e4:	e0bffa17 	ldw	r2,-24(fp)
   1d4e8:	10c00017 	ldw	r3,0(r2)
   1d4ec:	e0bffb17 	ldw	r2,-20(fp)
   1d4f0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1d4f4:	e0bffa17 	ldw	r2,-24(fp)
   1d4f8:	10800017 	ldw	r2,0(r2)
   1d4fc:	e0fffb17 	ldw	r3,-20(fp)
   1d500:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1d504:	e0bffa17 	ldw	r2,-24(fp)
   1d508:	e0fffb17 	ldw	r3,-20(fp)
   1d50c:	10c00015 	stw	r3,0(r2)
   1d510:	e0bff817 	ldw	r2,-32(fp)
   1d514:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d518:	e0bff717 	ldw	r2,-36(fp)
   1d51c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1d520:	0005883a 	mov	r2,zero
   1d524:	00000306 	br	1d534 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   1d528:	00bffa84 	movi	r2,-22
   1d52c:	00000106 	br	1d534 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   1d530:	00bfde84 	movi	r2,-134
  }
}
   1d534:	e037883a 	mov	sp,fp
   1d538:	df000017 	ldw	fp,0(sp)
   1d53c:	dec00104 	addi	sp,sp,4
   1d540:	f800283a 	ret

0001d544 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1d544:	deffff04 	addi	sp,sp,-4
   1d548:	df000015 	stw	fp,0(sp)
   1d54c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1d550:	0001883a 	nop
   1d554:	e037883a 	mov	sp,fp
   1d558:	df000017 	ldw	fp,0(sp)
   1d55c:	dec00104 	addi	sp,sp,4
   1d560:	f800283a 	ret

0001d564 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1d564:	defffe04 	addi	sp,sp,-8
   1d568:	dfc00115 	stw	ra,4(sp)
   1d56c:	df000015 	stw	fp,0(sp)
   1d570:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1d574:	d0a00d17 	ldw	r2,-32716(gp)
   1d578:	10000326 	beq	r2,zero,1d588 <alt_get_errno+0x24>
   1d57c:	d0a00d17 	ldw	r2,-32716(gp)
   1d580:	103ee83a 	callr	r2
   1d584:	00000106 	br	1d58c <alt_get_errno+0x28>
   1d588:	d0a80804 	addi	r2,gp,-24544
}
   1d58c:	e037883a 	mov	sp,fp
   1d590:	dfc00117 	ldw	ra,4(sp)
   1d594:	df000017 	ldw	fp,0(sp)
   1d598:	dec00204 	addi	sp,sp,8
   1d59c:	f800283a 	ret

0001d5a0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1d5a0:	defffa04 	addi	sp,sp,-24
   1d5a4:	dfc00515 	stw	ra,20(sp)
   1d5a8:	df000415 	stw	fp,16(sp)
   1d5ac:	df000404 	addi	fp,sp,16
   1d5b0:	e13ffe15 	stw	r4,-8(fp)
   1d5b4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1d5b8:	e0bffe17 	ldw	r2,-8(fp)
   1d5bc:	10000326 	beq	r2,zero,1d5cc <alt_dev_llist_insert+0x2c>
   1d5c0:	e0bffe17 	ldw	r2,-8(fp)
   1d5c4:	10800217 	ldw	r2,8(r2)
   1d5c8:	1000061e 	bne	r2,zero,1d5e4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1d5cc:	001d5640 	call	1d564 <alt_get_errno>
   1d5d0:	1007883a 	mov	r3,r2
   1d5d4:	00800584 	movi	r2,22
   1d5d8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1d5dc:	00bffa84 	movi	r2,-22
   1d5e0:	00001306 	br	1d630 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1d5e4:	e0bffe17 	ldw	r2,-8(fp)
   1d5e8:	e0ffff17 	ldw	r3,-4(fp)
   1d5ec:	e0fffc15 	stw	r3,-16(fp)
   1d5f0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1d5f4:	e0bffd17 	ldw	r2,-12(fp)
   1d5f8:	e0fffc17 	ldw	r3,-16(fp)
   1d5fc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1d600:	e0bffc17 	ldw	r2,-16(fp)
   1d604:	10c00017 	ldw	r3,0(r2)
   1d608:	e0bffd17 	ldw	r2,-12(fp)
   1d60c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1d610:	e0bffc17 	ldw	r2,-16(fp)
   1d614:	10800017 	ldw	r2,0(r2)
   1d618:	e0fffd17 	ldw	r3,-12(fp)
   1d61c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1d620:	e0bffc17 	ldw	r2,-16(fp)
   1d624:	e0fffd17 	ldw	r3,-12(fp)
   1d628:	10c00015 	stw	r3,0(r2)

  return 0;  
   1d62c:	0005883a 	mov	r2,zero
}
   1d630:	e037883a 	mov	sp,fp
   1d634:	dfc00117 	ldw	ra,4(sp)
   1d638:	df000017 	ldw	fp,0(sp)
   1d63c:	dec00204 	addi	sp,sp,8
   1d640:	f800283a 	ret

0001d644 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1d644:	defffd04 	addi	sp,sp,-12
   1d648:	dfc00215 	stw	ra,8(sp)
   1d64c:	df000115 	stw	fp,4(sp)
   1d650:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1d654:	008000b4 	movhi	r2,2
   1d658:	10ba2704 	addi	r2,r2,-5988
   1d65c:	e0bfff15 	stw	r2,-4(fp)
   1d660:	00000606 	br	1d67c <_do_ctors+0x38>
        (*ctor) (); 
   1d664:	e0bfff17 	ldw	r2,-4(fp)
   1d668:	10800017 	ldw	r2,0(r2)
   1d66c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1d670:	e0bfff17 	ldw	r2,-4(fp)
   1d674:	10bfff04 	addi	r2,r2,-4
   1d678:	e0bfff15 	stw	r2,-4(fp)
   1d67c:	e0ffff17 	ldw	r3,-4(fp)
   1d680:	008000b4 	movhi	r2,2
   1d684:	10ba2804 	addi	r2,r2,-5984
   1d688:	18bff62e 	bgeu	r3,r2,1d664 <_do_ctors+0x20>
        (*ctor) (); 
}
   1d68c:	0001883a 	nop
   1d690:	e037883a 	mov	sp,fp
   1d694:	dfc00117 	ldw	ra,4(sp)
   1d698:	df000017 	ldw	fp,0(sp)
   1d69c:	dec00204 	addi	sp,sp,8
   1d6a0:	f800283a 	ret

0001d6a4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1d6a4:	defffd04 	addi	sp,sp,-12
   1d6a8:	dfc00215 	stw	ra,8(sp)
   1d6ac:	df000115 	stw	fp,4(sp)
   1d6b0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1d6b4:	008000b4 	movhi	r2,2
   1d6b8:	10ba2704 	addi	r2,r2,-5988
   1d6bc:	e0bfff15 	stw	r2,-4(fp)
   1d6c0:	00000606 	br	1d6dc <_do_dtors+0x38>
        (*dtor) (); 
   1d6c4:	e0bfff17 	ldw	r2,-4(fp)
   1d6c8:	10800017 	ldw	r2,0(r2)
   1d6cc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1d6d0:	e0bfff17 	ldw	r2,-4(fp)
   1d6d4:	10bfff04 	addi	r2,r2,-4
   1d6d8:	e0bfff15 	stw	r2,-4(fp)
   1d6dc:	e0ffff17 	ldw	r3,-4(fp)
   1d6e0:	008000b4 	movhi	r2,2
   1d6e4:	10ba2804 	addi	r2,r2,-5984
   1d6e8:	18bff62e 	bgeu	r3,r2,1d6c4 <_do_dtors+0x20>
        (*dtor) (); 
}
   1d6ec:	0001883a 	nop
   1d6f0:	e037883a 	mov	sp,fp
   1d6f4:	dfc00117 	ldw	ra,4(sp)
   1d6f8:	df000017 	ldw	fp,0(sp)
   1d6fc:	dec00204 	addi	sp,sp,8
   1d700:	f800283a 	ret

0001d704 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1d704:	defffa04 	addi	sp,sp,-24
   1d708:	dfc00515 	stw	ra,20(sp)
   1d70c:	df000415 	stw	fp,16(sp)
   1d710:	df000404 	addi	fp,sp,16
   1d714:	e13ffe15 	stw	r4,-8(fp)
   1d718:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1d71c:	e0bfff17 	ldw	r2,-4(fp)
   1d720:	10800017 	ldw	r2,0(r2)
   1d724:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1d728:	e13ffe17 	ldw	r4,-8(fp)
   1d72c:	000b2d80 	call	b2d8 <strlen>
   1d730:	10800044 	addi	r2,r2,1
   1d734:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1d738:	00000d06 	br	1d770 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1d73c:	e0bffc17 	ldw	r2,-16(fp)
   1d740:	10800217 	ldw	r2,8(r2)
   1d744:	e0fffd17 	ldw	r3,-12(fp)
   1d748:	180d883a 	mov	r6,r3
   1d74c:	e17ffe17 	ldw	r5,-8(fp)
   1d750:	1009883a 	mov	r4,r2
   1d754:	001e5580 	call	1e558 <memcmp>
   1d758:	1000021e 	bne	r2,zero,1d764 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1d75c:	e0bffc17 	ldw	r2,-16(fp)
   1d760:	00000706 	br	1d780 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1d764:	e0bffc17 	ldw	r2,-16(fp)
   1d768:	10800017 	ldw	r2,0(r2)
   1d76c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1d770:	e0fffc17 	ldw	r3,-16(fp)
   1d774:	e0bfff17 	ldw	r2,-4(fp)
   1d778:	18bff01e 	bne	r3,r2,1d73c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1d77c:	0005883a 	mov	r2,zero
}
   1d780:	e037883a 	mov	sp,fp
   1d784:	dfc00117 	ldw	ra,4(sp)
   1d788:	df000017 	ldw	fp,0(sp)
   1d78c:	dec00204 	addi	sp,sp,8
   1d790:	f800283a 	ret

0001d794 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1d794:	defffe04 	addi	sp,sp,-8
   1d798:	dfc00115 	stw	ra,4(sp)
   1d79c:	df000015 	stw	fp,0(sp)
   1d7a0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1d7a4:	01440004 	movi	r5,4096
   1d7a8:	0009883a 	mov	r4,zero
   1d7ac:	001e3e00 	call	1e3e0 <alt_icache_flush>
#endif
}
   1d7b0:	0001883a 	nop
   1d7b4:	e037883a 	mov	sp,fp
   1d7b8:	dfc00117 	ldw	ra,4(sp)
   1d7bc:	df000017 	ldw	fp,0(sp)
   1d7c0:	dec00204 	addi	sp,sp,8
   1d7c4:	f800283a 	ret

0001d7c8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1d7c8:	defff904 	addi	sp,sp,-28
   1d7cc:	dfc00615 	stw	ra,24(sp)
   1d7d0:	df000515 	stw	fp,20(sp)
   1d7d4:	df000504 	addi	fp,sp,20
   1d7d8:	e13ffc15 	stw	r4,-16(fp)
   1d7dc:	e17ffd15 	stw	r5,-12(fp)
   1d7e0:	e1bffe15 	stw	r6,-8(fp)
   1d7e4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1d7e8:	e1bfff17 	ldw	r6,-4(fp)
   1d7ec:	e17ffe17 	ldw	r5,-8(fp)
   1d7f0:	e13ffd17 	ldw	r4,-12(fp)
   1d7f4:	001db880 	call	1db88 <open>
   1d7f8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1d7fc:	e0bffb17 	ldw	r2,-20(fp)
   1d800:	10001c16 	blt	r2,zero,1d874 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   1d804:	008000b4 	movhi	r2,2
   1d808:	1080ae04 	addi	r2,r2,696
   1d80c:	e0fffb17 	ldw	r3,-20(fp)
   1d810:	18c00324 	muli	r3,r3,12
   1d814:	10c5883a 	add	r2,r2,r3
   1d818:	10c00017 	ldw	r3,0(r2)
   1d81c:	e0bffc17 	ldw	r2,-16(fp)
   1d820:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1d824:	008000b4 	movhi	r2,2
   1d828:	1080ae04 	addi	r2,r2,696
   1d82c:	e0fffb17 	ldw	r3,-20(fp)
   1d830:	18c00324 	muli	r3,r3,12
   1d834:	10c5883a 	add	r2,r2,r3
   1d838:	10800104 	addi	r2,r2,4
   1d83c:	10c00017 	ldw	r3,0(r2)
   1d840:	e0bffc17 	ldw	r2,-16(fp)
   1d844:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1d848:	008000b4 	movhi	r2,2
   1d84c:	1080ae04 	addi	r2,r2,696
   1d850:	e0fffb17 	ldw	r3,-20(fp)
   1d854:	18c00324 	muli	r3,r3,12
   1d858:	10c5883a 	add	r2,r2,r3
   1d85c:	10800204 	addi	r2,r2,8
   1d860:	10c00017 	ldw	r3,0(r2)
   1d864:	e0bffc17 	ldw	r2,-16(fp)
   1d868:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1d86c:	e13ffb17 	ldw	r4,-20(fp)
   1d870:	0012c340 	call	12c34 <alt_release_fd>
  }
} 
   1d874:	0001883a 	nop
   1d878:	e037883a 	mov	sp,fp
   1d87c:	dfc00117 	ldw	ra,4(sp)
   1d880:	df000017 	ldw	fp,0(sp)
   1d884:	dec00204 	addi	sp,sp,8
   1d888:	f800283a 	ret

0001d88c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1d88c:	defffb04 	addi	sp,sp,-20
   1d890:	dfc00415 	stw	ra,16(sp)
   1d894:	df000315 	stw	fp,12(sp)
   1d898:	df000304 	addi	fp,sp,12
   1d89c:	e13ffd15 	stw	r4,-12(fp)
   1d8a0:	e17ffe15 	stw	r5,-8(fp)
   1d8a4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1d8a8:	01c07fc4 	movi	r7,511
   1d8ac:	01800044 	movi	r6,1
   1d8b0:	e17ffd17 	ldw	r5,-12(fp)
   1d8b4:	010000b4 	movhi	r4,2
   1d8b8:	2100b104 	addi	r4,r4,708
   1d8bc:	001d7c80 	call	1d7c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1d8c0:	01c07fc4 	movi	r7,511
   1d8c4:	000d883a 	mov	r6,zero
   1d8c8:	e17ffe17 	ldw	r5,-8(fp)
   1d8cc:	010000b4 	movhi	r4,2
   1d8d0:	2100ae04 	addi	r4,r4,696
   1d8d4:	001d7c80 	call	1d7c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1d8d8:	01c07fc4 	movi	r7,511
   1d8dc:	01800044 	movi	r6,1
   1d8e0:	e17fff17 	ldw	r5,-4(fp)
   1d8e4:	010000b4 	movhi	r4,2
   1d8e8:	2100b404 	addi	r4,r4,720
   1d8ec:	001d7c80 	call	1d7c8 <alt_open_fd>
}  
   1d8f0:	0001883a 	nop
   1d8f4:	e037883a 	mov	sp,fp
   1d8f8:	dfc00117 	ldw	ra,4(sp)
   1d8fc:	df000017 	ldw	fp,0(sp)
   1d900:	dec00204 	addi	sp,sp,8
   1d904:	f800283a 	ret

0001d908 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   1d908:	defff004 	addi	sp,sp,-64
   1d90c:	df000f15 	stw	fp,60(sp)
   1d910:	df000f04 	addi	fp,sp,60
   1d914:	e13ffd15 	stw	r4,-12(fp)
   1d918:	e17ffe15 	stw	r5,-8(fp)
   1d91c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   1d920:	00bffa84 	movi	r2,-22
   1d924:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1d928:	e0bffd17 	ldw	r2,-12(fp)
   1d92c:	10800828 	cmpgeui	r2,r2,32
   1d930:	1000501e 	bne	r2,zero,1da74 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d934:	0005303a 	rdctl	r2,status
   1d938:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d93c:	e0fff617 	ldw	r3,-40(fp)
   1d940:	00bfff84 	movi	r2,-2
   1d944:	1884703a 	and	r2,r3,r2
   1d948:	1001703a 	wrctl	status,r2
  
  return context;
   1d94c:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   1d950:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   1d954:	008000f4 	movhi	r2,3
   1d958:	1082a804 	addi	r2,r2,2720
   1d95c:	e0fffd17 	ldw	r3,-12(fp)
   1d960:	180690fa 	slli	r3,r3,3
   1d964:	10c5883a 	add	r2,r2,r3
   1d968:	e0ffff17 	ldw	r3,-4(fp)
   1d96c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   1d970:	008000f4 	movhi	r2,3
   1d974:	1082a804 	addi	r2,r2,2720
   1d978:	e0fffd17 	ldw	r3,-12(fp)
   1d97c:	180690fa 	slli	r3,r3,3
   1d980:	10c5883a 	add	r2,r2,r3
   1d984:	10800104 	addi	r2,r2,4
   1d988:	e0fffe17 	ldw	r3,-8(fp)
   1d98c:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   1d990:	e0bfff17 	ldw	r2,-4(fp)
   1d994:	10001926 	beq	r2,zero,1d9fc <alt_irq_register+0xf4>
   1d998:	e0bffd17 	ldw	r2,-12(fp)
   1d99c:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d9a0:	0005303a 	rdctl	r2,status
   1d9a4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d9a8:	e0fff717 	ldw	r3,-36(fp)
   1d9ac:	00bfff84 	movi	r2,-2
   1d9b0:	1884703a 	and	r2,r3,r2
   1d9b4:	1001703a 	wrctl	status,r2
  
  return context;
   1d9b8:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1d9bc:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   1d9c0:	00c00044 	movi	r3,1
   1d9c4:	e0bff217 	ldw	r2,-56(fp)
   1d9c8:	1884983a 	sll	r2,r3,r2
   1d9cc:	1007883a 	mov	r3,r2
   1d9d0:	d0a82517 	ldw	r2,-24428(gp)
   1d9d4:	1884b03a 	or	r2,r3,r2
   1d9d8:	d0a82515 	stw	r2,-24428(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1d9dc:	d0a82517 	ldw	r2,-24428(gp)
   1d9e0:	100170fa 	wrctl	ienable,r2
   1d9e4:	e0bff817 	ldw	r2,-32(fp)
   1d9e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d9ec:	e0bff917 	ldw	r2,-28(fp)
   1d9f0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1d9f4:	0005883a 	mov	r2,zero
   1d9f8:	00001906 	br	1da60 <alt_irq_register+0x158>
   1d9fc:	e0bffd17 	ldw	r2,-12(fp)
   1da00:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1da04:	0005303a 	rdctl	r2,status
   1da08:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1da0c:	e0fffa17 	ldw	r3,-24(fp)
   1da10:	00bfff84 	movi	r2,-2
   1da14:	1884703a 	and	r2,r3,r2
   1da18:	1001703a 	wrctl	status,r2
  
  return context;
   1da1c:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1da20:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   1da24:	00c00044 	movi	r3,1
   1da28:	e0bff417 	ldw	r2,-48(fp)
   1da2c:	1884983a 	sll	r2,r3,r2
   1da30:	0084303a 	nor	r2,zero,r2
   1da34:	1007883a 	mov	r3,r2
   1da38:	d0a82517 	ldw	r2,-24428(gp)
   1da3c:	1884703a 	and	r2,r3,r2
   1da40:	d0a82515 	stw	r2,-24428(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1da44:	d0a82517 	ldw	r2,-24428(gp)
   1da48:	100170fa 	wrctl	ienable,r2
   1da4c:	e0bffb17 	ldw	r2,-20(fp)
   1da50:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1da54:	e0bffc17 	ldw	r2,-16(fp)
   1da58:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1da5c:	0005883a 	mov	r2,zero
   1da60:	e0bff115 	stw	r2,-60(fp)
   1da64:	e0bff317 	ldw	r2,-52(fp)
   1da68:	e0bff515 	stw	r2,-44(fp)
   1da6c:	e0bff517 	ldw	r2,-44(fp)
   1da70:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   1da74:	e0bff117 	ldw	r2,-60(fp)
}
   1da78:	e037883a 	mov	sp,fp
   1da7c:	df000017 	ldw	fp,0(sp)
   1da80:	dec00104 	addi	sp,sp,4
   1da84:	f800283a 	ret

0001da88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1da88:	defffe04 	addi	sp,sp,-8
   1da8c:	dfc00115 	stw	ra,4(sp)
   1da90:	df000015 	stw	fp,0(sp)
   1da94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1da98:	d0a00d17 	ldw	r2,-32716(gp)
   1da9c:	10000326 	beq	r2,zero,1daac <alt_get_errno+0x24>
   1daa0:	d0a00d17 	ldw	r2,-32716(gp)
   1daa4:	103ee83a 	callr	r2
   1daa8:	00000106 	br	1dab0 <alt_get_errno+0x28>
   1daac:	d0a80804 	addi	r2,gp,-24544
}
   1dab0:	e037883a 	mov	sp,fp
   1dab4:	dfc00117 	ldw	ra,4(sp)
   1dab8:	df000017 	ldw	fp,0(sp)
   1dabc:	dec00204 	addi	sp,sp,8
   1dac0:	f800283a 	ret

0001dac4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1dac4:	defffd04 	addi	sp,sp,-12
   1dac8:	df000215 	stw	fp,8(sp)
   1dacc:	df000204 	addi	fp,sp,8
   1dad0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1dad4:	e0bfff17 	ldw	r2,-4(fp)
   1dad8:	10800217 	ldw	r2,8(r2)
   1dadc:	10d00034 	orhi	r3,r2,16384
   1dae0:	e0bfff17 	ldw	r2,-4(fp)
   1dae4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1dae8:	e03ffe15 	stw	zero,-8(fp)
   1daec:	00001d06 	br	1db64 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1daf0:	008000b4 	movhi	r2,2
   1daf4:	1080ae04 	addi	r2,r2,696
   1daf8:	e0fffe17 	ldw	r3,-8(fp)
   1dafc:	18c00324 	muli	r3,r3,12
   1db00:	10c5883a 	add	r2,r2,r3
   1db04:	10c00017 	ldw	r3,0(r2)
   1db08:	e0bfff17 	ldw	r2,-4(fp)
   1db0c:	10800017 	ldw	r2,0(r2)
   1db10:	1880111e 	bne	r3,r2,1db58 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1db14:	008000b4 	movhi	r2,2
   1db18:	1080ae04 	addi	r2,r2,696
   1db1c:	e0fffe17 	ldw	r3,-8(fp)
   1db20:	18c00324 	muli	r3,r3,12
   1db24:	10c5883a 	add	r2,r2,r3
   1db28:	10800204 	addi	r2,r2,8
   1db2c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1db30:	1000090e 	bge	r2,zero,1db58 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1db34:	e0bffe17 	ldw	r2,-8(fp)
   1db38:	10c00324 	muli	r3,r2,12
   1db3c:	008000b4 	movhi	r2,2
   1db40:	1080ae04 	addi	r2,r2,696
   1db44:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1db48:	e0bfff17 	ldw	r2,-4(fp)
   1db4c:	18800226 	beq	r3,r2,1db58 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1db50:	00bffcc4 	movi	r2,-13
   1db54:	00000806 	br	1db78 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1db58:	e0bffe17 	ldw	r2,-8(fp)
   1db5c:	10800044 	addi	r2,r2,1
   1db60:	e0bffe15 	stw	r2,-8(fp)
   1db64:	d0a00c17 	ldw	r2,-32720(gp)
   1db68:	1007883a 	mov	r3,r2
   1db6c:	e0bffe17 	ldw	r2,-8(fp)
   1db70:	18bfdf2e 	bgeu	r3,r2,1daf0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1db74:	0005883a 	mov	r2,zero
}
   1db78:	e037883a 	mov	sp,fp
   1db7c:	df000017 	ldw	fp,0(sp)
   1db80:	dec00104 	addi	sp,sp,4
   1db84:	f800283a 	ret

0001db88 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1db88:	defff604 	addi	sp,sp,-40
   1db8c:	dfc00915 	stw	ra,36(sp)
   1db90:	df000815 	stw	fp,32(sp)
   1db94:	df000804 	addi	fp,sp,32
   1db98:	e13ffd15 	stw	r4,-12(fp)
   1db9c:	e17ffe15 	stw	r5,-8(fp)
   1dba0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1dba4:	00bfffc4 	movi	r2,-1
   1dba8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1dbac:	00bffb44 	movi	r2,-19
   1dbb0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1dbb4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1dbb8:	d1600a04 	addi	r5,gp,-32728
   1dbbc:	e13ffd17 	ldw	r4,-12(fp)
   1dbc0:	001d7040 	call	1d704 <alt_find_dev>
   1dbc4:	e0bff815 	stw	r2,-32(fp)
   1dbc8:	e0bff817 	ldw	r2,-32(fp)
   1dbcc:	1000051e 	bne	r2,zero,1dbe4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1dbd0:	e13ffd17 	ldw	r4,-12(fp)
   1dbd4:	001e1fc0 	call	1e1fc <alt_find_file>
   1dbd8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1dbdc:	00800044 	movi	r2,1
   1dbe0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1dbe4:	e0bff817 	ldw	r2,-32(fp)
   1dbe8:	10002926 	beq	r2,zero,1dc90 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1dbec:	e13ff817 	ldw	r4,-32(fp)
   1dbf0:	001e3040 	call	1e304 <alt_get_fd>
   1dbf4:	e0bff915 	stw	r2,-28(fp)
   1dbf8:	e0bff917 	ldw	r2,-28(fp)
   1dbfc:	1000030e 	bge	r2,zero,1dc0c <open+0x84>
    {
      status = index;
   1dc00:	e0bff917 	ldw	r2,-28(fp)
   1dc04:	e0bffa15 	stw	r2,-24(fp)
   1dc08:	00002306 	br	1dc98 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   1dc0c:	e0bff917 	ldw	r2,-28(fp)
   1dc10:	10c00324 	muli	r3,r2,12
   1dc14:	008000b4 	movhi	r2,2
   1dc18:	1080ae04 	addi	r2,r2,696
   1dc1c:	1885883a 	add	r2,r3,r2
   1dc20:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1dc24:	e0fffe17 	ldw	r3,-8(fp)
   1dc28:	00900034 	movhi	r2,16384
   1dc2c:	10bfffc4 	addi	r2,r2,-1
   1dc30:	1886703a 	and	r3,r3,r2
   1dc34:	e0bffc17 	ldw	r2,-16(fp)
   1dc38:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1dc3c:	e0bffb17 	ldw	r2,-20(fp)
   1dc40:	1000051e 	bne	r2,zero,1dc58 <open+0xd0>
   1dc44:	e13ffc17 	ldw	r4,-16(fp)
   1dc48:	001dac40 	call	1dac4 <alt_file_locked>
   1dc4c:	e0bffa15 	stw	r2,-24(fp)
   1dc50:	e0bffa17 	ldw	r2,-24(fp)
   1dc54:	10001016 	blt	r2,zero,1dc98 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1dc58:	e0bff817 	ldw	r2,-32(fp)
   1dc5c:	10800317 	ldw	r2,12(r2)
   1dc60:	10000826 	beq	r2,zero,1dc84 <open+0xfc>
   1dc64:	e0bff817 	ldw	r2,-32(fp)
   1dc68:	10800317 	ldw	r2,12(r2)
   1dc6c:	e1ffff17 	ldw	r7,-4(fp)
   1dc70:	e1bffe17 	ldw	r6,-8(fp)
   1dc74:	e17ffd17 	ldw	r5,-12(fp)
   1dc78:	e13ffc17 	ldw	r4,-16(fp)
   1dc7c:	103ee83a 	callr	r2
   1dc80:	00000106 	br	1dc88 <open+0x100>
   1dc84:	0005883a 	mov	r2,zero
   1dc88:	e0bffa15 	stw	r2,-24(fp)
   1dc8c:	00000206 	br	1dc98 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1dc90:	00bffb44 	movi	r2,-19
   1dc94:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1dc98:	e0bffa17 	ldw	r2,-24(fp)
   1dc9c:	1000090e 	bge	r2,zero,1dcc4 <open+0x13c>
  {
    alt_release_fd (index);  
   1dca0:	e13ff917 	ldw	r4,-28(fp)
   1dca4:	0012c340 	call	12c34 <alt_release_fd>
    ALT_ERRNO = -status;
   1dca8:	001da880 	call	1da88 <alt_get_errno>
   1dcac:	1007883a 	mov	r3,r2
   1dcb0:	e0bffa17 	ldw	r2,-24(fp)
   1dcb4:	0085c83a 	sub	r2,zero,r2
   1dcb8:	18800015 	stw	r2,0(r3)
    return -1;
   1dcbc:	00bfffc4 	movi	r2,-1
   1dcc0:	00000106 	br	1dcc8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   1dcc4:	e0bff917 	ldw	r2,-28(fp)
}
   1dcc8:	e037883a 	mov	sp,fp
   1dccc:	dfc00117 	ldw	ra,4(sp)
   1dcd0:	df000017 	ldw	fp,0(sp)
   1dcd4:	dec00204 	addi	sp,sp,8
   1dcd8:	f800283a 	ret

0001dcdc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1dcdc:	defffa04 	addi	sp,sp,-24
   1dce0:	df000515 	stw	fp,20(sp)
   1dce4:	df000504 	addi	fp,sp,20
   1dce8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1dcec:	0005303a 	rdctl	r2,status
   1dcf0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1dcf4:	e0fffc17 	ldw	r3,-16(fp)
   1dcf8:	00bfff84 	movi	r2,-2
   1dcfc:	1884703a 	and	r2,r3,r2
   1dd00:	1001703a 	wrctl	status,r2
  
  return context;
   1dd04:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1dd08:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1dd0c:	e0bfff17 	ldw	r2,-4(fp)
   1dd10:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1dd14:	e0bffd17 	ldw	r2,-12(fp)
   1dd18:	10800017 	ldw	r2,0(r2)
   1dd1c:	e0fffd17 	ldw	r3,-12(fp)
   1dd20:	18c00117 	ldw	r3,4(r3)
   1dd24:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1dd28:	e0bffd17 	ldw	r2,-12(fp)
   1dd2c:	10800117 	ldw	r2,4(r2)
   1dd30:	e0fffd17 	ldw	r3,-12(fp)
   1dd34:	18c00017 	ldw	r3,0(r3)
   1dd38:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1dd3c:	e0bffd17 	ldw	r2,-12(fp)
   1dd40:	e0fffd17 	ldw	r3,-12(fp)
   1dd44:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1dd48:	e0bffd17 	ldw	r2,-12(fp)
   1dd4c:	e0fffd17 	ldw	r3,-12(fp)
   1dd50:	10c00015 	stw	r3,0(r2)
   1dd54:	e0bffb17 	ldw	r2,-20(fp)
   1dd58:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1dd5c:	e0bffe17 	ldw	r2,-8(fp)
   1dd60:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1dd64:	0001883a 	nop
   1dd68:	e037883a 	mov	sp,fp
   1dd6c:	df000017 	ldw	fp,0(sp)
   1dd70:	dec00104 	addi	sp,sp,4
   1dd74:	f800283a 	ret

0001dd78 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1dd78:	defffb04 	addi	sp,sp,-20
   1dd7c:	dfc00415 	stw	ra,16(sp)
   1dd80:	df000315 	stw	fp,12(sp)
   1dd84:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1dd88:	d0a02f17 	ldw	r2,-32580(gp)
   1dd8c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1dd90:	d0a82717 	ldw	r2,-24420(gp)
   1dd94:	10800044 	addi	r2,r2,1
   1dd98:	d0a82715 	stw	r2,-24420(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1dd9c:	00002e06 	br	1de58 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1dda0:	e0bffd17 	ldw	r2,-12(fp)
   1dda4:	10800017 	ldw	r2,0(r2)
   1dda8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1ddac:	e0bffd17 	ldw	r2,-12(fp)
   1ddb0:	10800403 	ldbu	r2,16(r2)
   1ddb4:	10803fcc 	andi	r2,r2,255
   1ddb8:	10000426 	beq	r2,zero,1ddcc <alt_tick+0x54>
   1ddbc:	d0a82717 	ldw	r2,-24420(gp)
   1ddc0:	1000021e 	bne	r2,zero,1ddcc <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1ddc4:	e0bffd17 	ldw	r2,-12(fp)
   1ddc8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1ddcc:	e0bffd17 	ldw	r2,-12(fp)
   1ddd0:	10800217 	ldw	r2,8(r2)
   1ddd4:	d0e82717 	ldw	r3,-24420(gp)
   1ddd8:	18801d36 	bltu	r3,r2,1de50 <alt_tick+0xd8>
   1dddc:	e0bffd17 	ldw	r2,-12(fp)
   1dde0:	10800403 	ldbu	r2,16(r2)
   1dde4:	10803fcc 	andi	r2,r2,255
   1dde8:	1000191e 	bne	r2,zero,1de50 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1ddec:	e0bffd17 	ldw	r2,-12(fp)
   1ddf0:	10800317 	ldw	r2,12(r2)
   1ddf4:	e0fffd17 	ldw	r3,-12(fp)
   1ddf8:	18c00517 	ldw	r3,20(r3)
   1ddfc:	1809883a 	mov	r4,r3
   1de00:	103ee83a 	callr	r2
   1de04:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1de08:	e0bfff17 	ldw	r2,-4(fp)
   1de0c:	1000031e 	bne	r2,zero,1de1c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1de10:	e13ffd17 	ldw	r4,-12(fp)
   1de14:	001dcdc0 	call	1dcdc <alt_alarm_stop>
   1de18:	00000d06 	br	1de50 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1de1c:	e0bffd17 	ldw	r2,-12(fp)
   1de20:	10c00217 	ldw	r3,8(r2)
   1de24:	e0bfff17 	ldw	r2,-4(fp)
   1de28:	1887883a 	add	r3,r3,r2
   1de2c:	e0bffd17 	ldw	r2,-12(fp)
   1de30:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1de34:	e0bffd17 	ldw	r2,-12(fp)
   1de38:	10c00217 	ldw	r3,8(r2)
   1de3c:	d0a82717 	ldw	r2,-24420(gp)
   1de40:	1880032e 	bgeu	r3,r2,1de50 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1de44:	e0bffd17 	ldw	r2,-12(fp)
   1de48:	00c00044 	movi	r3,1
   1de4c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1de50:	e0bffe17 	ldw	r2,-8(fp)
   1de54:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1de58:	e0fffd17 	ldw	r3,-12(fp)
   1de5c:	d0a02f04 	addi	r2,gp,-32580
   1de60:	18bfcf1e 	bne	r3,r2,1dda0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1de64:	0013e200 	call	13e20 <OSTimeTick>
}
   1de68:	0001883a 	nop
   1de6c:	e037883a 	mov	sp,fp
   1de70:	dfc00117 	ldw	ra,4(sp)
   1de74:	df000017 	ldw	fp,0(sp)
   1de78:	dec00204 	addi	sp,sp,8
   1de7c:	f800283a 	ret

0001de80 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1de80:	deffff04 	addi	sp,sp,-4
   1de84:	df000015 	stw	fp,0(sp)
   1de88:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1de8c:	000170fa 	wrctl	ienable,zero
}
   1de90:	0001883a 	nop
   1de94:	e037883a 	mov	sp,fp
   1de98:	df000017 	ldw	fp,0(sp)
   1de9c:	dec00104 	addi	sp,sp,4
   1dea0:	f800283a 	ret

0001dea4 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   1dea4:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   1dea8:	d0e00317 	ldw	r3,-32756(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   1deac:	d1282017 	ldw	r4,-24448(gp)

      stw ra,  0(sp)
   1deb0:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   1deb4:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   1deb8:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   1debc:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   1dec0:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   1dec4:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   1dec8:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   1decc:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   1ded0:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   1ded4:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   1ded8:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   1dedc:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1dee0:	001e1180 	call	1e118 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   1dee4:	d1281b17 	ldw	r4,-24468(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   1dee8:	d1681307 	ldb	r5,-24500(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   1deec:	d1282015 	stw	r4,-24448(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   1def0:	d1681345 	stb	r5,-24499(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   1def4:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   1def8:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   1defc:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   1df00:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   1df04:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   1df08:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   1df0c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   1df10:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   1df14:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   1df18:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   1df1c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   1df20:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   1df24:	d0e00315 	stw	r3,-32756(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   1df28:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   1df2c:	f800283a 	ret

0001df30 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   1df30:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   1df34:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   1df38:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   1df3c:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1df40:	001e1180 	call	1e118 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   1df44:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   1df48:	d4a81145 	stb	r18,-24507(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   1df4c:	003fe506 	br	1dee4 <OSCtxSw+0x40>

0001df50 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   1df50:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   1df54:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   1df58:	10800054 	ori	r2,r2,1
      wrctl status, r2
   1df5c:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   1df60:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   1df64:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   1df68:	dec00204 	addi	sp,sp,8

      callr r2
   1df6c:	103ee83a 	callr	r2

      nop
   1df70:	0001883a 	nop

0001df74 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   1df74:	defff704 	addi	sp,sp,-36
   1df78:	dfc00815 	stw	ra,32(sp)
   1df7c:	df000715 	stw	fp,28(sp)
   1df80:	df000704 	addi	fp,sp,28
   1df84:	e13ffc15 	stw	r4,-16(fp)
   1df88:	e17ffd15 	stw	r5,-12(fp)
   1df8c:	e1bffe15 	stw	r6,-8(fp)
   1df90:	3805883a 	mov	r2,r7
   1df94:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   1df98:	e0fffe17 	ldw	r3,-8(fp)
   1df9c:	00bfff04 	movi	r2,-4
   1dfa0:	1884703a 	and	r2,r3,r2
   1dfa4:	10bef704 	addi	r2,r2,-1060
   1dfa8:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   1dfac:	01810904 	movi	r6,1060
   1dfb0:	000b883a 	mov	r5,zero
   1dfb4:	e13ff917 	ldw	r4,-28(fp)
   1dfb8:	0009ed40 	call	9ed4 <memset>
   1dfbc:	e0bff917 	ldw	r2,-28(fp)
   1dfc0:	10c0bb04 	addi	r3,r2,748
   1dfc4:	e0bff917 	ldw	r2,-28(fp)
   1dfc8:	10c00115 	stw	r3,4(r2)
   1dfcc:	e0bff917 	ldw	r2,-28(fp)
   1dfd0:	10c0d504 	addi	r3,r2,852
   1dfd4:	e0bff917 	ldw	r2,-28(fp)
   1dfd8:	10c00215 	stw	r3,8(r2)
   1dfdc:	e0bff917 	ldw	r2,-28(fp)
   1dfe0:	10c0ef04 	addi	r3,r2,956
   1dfe4:	e0bff917 	ldw	r2,-28(fp)
   1dfe8:	10c00315 	stw	r3,12(r2)
   1dfec:	e0fff917 	ldw	r3,-28(fp)
   1dff0:	008000b4 	movhi	r2,2
   1dff4:	10be6804 	addi	r2,r2,-1632
   1dff8:	18800d15 	stw	r2,52(r3)
   1dffc:	e0bff917 	ldw	r2,-28(fp)
   1e000:	00c00044 	movi	r3,1
   1e004:	10c02915 	stw	r3,164(r2)
   1e008:	10002a15 	stw	zero,168(r2)
   1e00c:	e0bff917 	ldw	r2,-28(fp)
   1e010:	00ccc384 	movi	r3,13070
   1e014:	10c02b0d 	sth	r3,172(r2)
   1e018:	e0bff917 	ldw	r2,-28(fp)
   1e01c:	00eaf344 	movi	r3,-21555
   1e020:	10c02b8d 	sth	r3,174(r2)
   1e024:	e0bff917 	ldw	r2,-28(fp)
   1e028:	00c48d04 	movi	r3,4660
   1e02c:	10c02c0d 	sth	r3,176(r2)
   1e030:	e0bff917 	ldw	r2,-28(fp)
   1e034:	00f99b44 	movi	r3,-6547
   1e038:	10c02c8d 	sth	r3,178(r2)
   1e03c:	e0bff917 	ldw	r2,-28(fp)
   1e040:	00f7bb04 	movi	r3,-8468
   1e044:	10c02d0d 	sth	r3,180(r2)
   1e048:	e0bff917 	ldw	r2,-28(fp)
   1e04c:	00c00144 	movi	r3,5
   1e050:	10c02d8d 	sth	r3,182(r2)
   1e054:	e0bff917 	ldw	r2,-28(fp)
   1e058:	00c002c4 	movi	r3,11
   1e05c:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   1e060:	e0bff917 	ldw	r2,-28(fp)
   1e064:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   1e068:	e0bffa17 	ldw	r2,-24(fp)
   1e06c:	10bff304 	addi	r2,r2,-52
   1e070:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   1e074:	e0bffb17 	ldw	r2,-20(fp)
   1e078:	10800c04 	addi	r2,r2,48
   1e07c:	e0fffc17 	ldw	r3,-16(fp)
   1e080:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   1e084:	e0bffb17 	ldw	r2,-20(fp)
   1e088:	10800b04 	addi	r2,r2,44
   1e08c:	e0fffd17 	ldw	r3,-12(fp)
   1e090:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   1e094:	e0bffb17 	ldw	r2,-20(fp)
   1e098:	10800a04 	addi	r2,r2,40
   1e09c:	e0fff917 	ldw	r3,-28(fp)
   1e0a0:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   1e0a4:	008000b4 	movhi	r2,2
   1e0a8:	10b7d404 	addi	r2,r2,-8368
   1e0ac:	10c00104 	addi	r3,r2,4
   1e0b0:	e0bffb17 	ldw	r2,-20(fp)
   1e0b4:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   1e0b8:	e0bffb17 	ldw	r2,-20(fp)
}
   1e0bc:	e037883a 	mov	sp,fp
   1e0c0:	dfc00117 	ldw	ra,4(sp)
   1e0c4:	df000017 	ldw	fp,0(sp)
   1e0c8:	dec00204 	addi	sp,sp,8
   1e0cc:	f800283a 	ret

0001e0d0 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   1e0d0:	defffe04 	addi	sp,sp,-8
   1e0d4:	df000115 	stw	fp,4(sp)
   1e0d8:	df000104 	addi	fp,sp,4
   1e0dc:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   1e0e0:	0001883a 	nop
   1e0e4:	e037883a 	mov	sp,fp
   1e0e8:	df000017 	ldw	fp,0(sp)
   1e0ec:	dec00104 	addi	sp,sp,4
   1e0f0:	f800283a 	ret

0001e0f4 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   1e0f4:	defffe04 	addi	sp,sp,-8
   1e0f8:	df000115 	stw	fp,4(sp)
   1e0fc:	df000104 	addi	fp,sp,4
   1e100:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   1e104:	0001883a 	nop
   1e108:	e037883a 	mov	sp,fp
   1e10c:	df000017 	ldw	fp,0(sp)
   1e110:	dec00104 	addi	sp,sp,4
   1e114:	f800283a 	ret

0001e118 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   1e118:	deffff04 	addi	sp,sp,-4
   1e11c:	df000015 	stw	fp,0(sp)
   1e120:	d839883a 	mov	fp,sp
}
   1e124:	0001883a 	nop
   1e128:	e037883a 	mov	sp,fp
   1e12c:	df000017 	ldw	fp,0(sp)
   1e130:	dec00104 	addi	sp,sp,4
   1e134:	f800283a 	ret

0001e138 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   1e138:	deffff04 	addi	sp,sp,-4
   1e13c:	df000015 	stw	fp,0(sp)
   1e140:	d839883a 	mov	fp,sp
}
   1e144:	0001883a 	nop
   1e148:	e037883a 	mov	sp,fp
   1e14c:	df000017 	ldw	fp,0(sp)
   1e150:	dec00104 	addi	sp,sp,4
   1e154:	f800283a 	ret

0001e158 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   1e158:	deffff04 	addi	sp,sp,-4
   1e15c:	df000015 	stw	fp,0(sp)
   1e160:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   1e164:	0001883a 	nop
   1e168:	e037883a 	mov	sp,fp
   1e16c:	df000017 	ldw	fp,0(sp)
   1e170:	dec00104 	addi	sp,sp,4
   1e174:	f800283a 	ret

0001e178 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   1e178:	deffff04 	addi	sp,sp,-4
   1e17c:	df000015 	stw	fp,0(sp)
   1e180:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   1e184:	0001883a 	nop
   1e188:	e037883a 	mov	sp,fp
   1e18c:	df000017 	ldw	fp,0(sp)
   1e190:	dec00104 	addi	sp,sp,4
   1e194:	f800283a 	ret

0001e198 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   1e198:	deffff04 	addi	sp,sp,-4
   1e19c:	df000015 	stw	fp,0(sp)
   1e1a0:	d839883a 	mov	fp,sp
}
   1e1a4:	0001883a 	nop
   1e1a8:	e037883a 	mov	sp,fp
   1e1ac:	df000017 	ldw	fp,0(sp)
   1e1b0:	dec00104 	addi	sp,sp,4
   1e1b4:	f800283a 	ret

0001e1b8 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   1e1b8:	deffff04 	addi	sp,sp,-4
   1e1bc:	df000015 	stw	fp,0(sp)
   1e1c0:	d839883a 	mov	fp,sp
}
   1e1c4:	0001883a 	nop
   1e1c8:	e037883a 	mov	sp,fp
   1e1cc:	df000017 	ldw	fp,0(sp)
   1e1d0:	dec00104 	addi	sp,sp,4
   1e1d4:	f800283a 	ret

0001e1d8 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   1e1d8:	defffe04 	addi	sp,sp,-8
   1e1dc:	df000115 	stw	fp,4(sp)
   1e1e0:	df000104 	addi	fp,sp,4
   1e1e4:	e13fff15 	stw	r4,-4(fp)
}
   1e1e8:	0001883a 	nop
   1e1ec:	e037883a 	mov	sp,fp
   1e1f0:	df000017 	ldw	fp,0(sp)
   1e1f4:	dec00104 	addi	sp,sp,4
   1e1f8:	f800283a 	ret

0001e1fc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1e1fc:	defffb04 	addi	sp,sp,-20
   1e200:	dfc00415 	stw	ra,16(sp)
   1e204:	df000315 	stw	fp,12(sp)
   1e208:	df000304 	addi	fp,sp,12
   1e20c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1e210:	d0a00817 	ldw	r2,-32736(gp)
   1e214:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1e218:	00003106 	br	1e2e0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   1e21c:	e0bffd17 	ldw	r2,-12(fp)
   1e220:	10800217 	ldw	r2,8(r2)
   1e224:	1009883a 	mov	r4,r2
   1e228:	000b2d80 	call	b2d8 <strlen>
   1e22c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1e230:	e0bffd17 	ldw	r2,-12(fp)
   1e234:	10c00217 	ldw	r3,8(r2)
   1e238:	e0bffe17 	ldw	r2,-8(fp)
   1e23c:	10bfffc4 	addi	r2,r2,-1
   1e240:	1885883a 	add	r2,r3,r2
   1e244:	10800003 	ldbu	r2,0(r2)
   1e248:	10803fcc 	andi	r2,r2,255
   1e24c:	1080201c 	xori	r2,r2,128
   1e250:	10bfe004 	addi	r2,r2,-128
   1e254:	10800bd8 	cmpnei	r2,r2,47
   1e258:	1000031e 	bne	r2,zero,1e268 <alt_find_file+0x6c>
    {
      len -= 1;
   1e25c:	e0bffe17 	ldw	r2,-8(fp)
   1e260:	10bfffc4 	addi	r2,r2,-1
   1e264:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1e268:	e0bffe17 	ldw	r2,-8(fp)
   1e26c:	e0ffff17 	ldw	r3,-4(fp)
   1e270:	1885883a 	add	r2,r3,r2
   1e274:	10800003 	ldbu	r2,0(r2)
   1e278:	10803fcc 	andi	r2,r2,255
   1e27c:	1080201c 	xori	r2,r2,128
   1e280:	10bfe004 	addi	r2,r2,-128
   1e284:	10800be0 	cmpeqi	r2,r2,47
   1e288:	1000081e 	bne	r2,zero,1e2ac <alt_find_file+0xb0>
   1e28c:	e0bffe17 	ldw	r2,-8(fp)
   1e290:	e0ffff17 	ldw	r3,-4(fp)
   1e294:	1885883a 	add	r2,r3,r2
   1e298:	10800003 	ldbu	r2,0(r2)
   1e29c:	10803fcc 	andi	r2,r2,255
   1e2a0:	1080201c 	xori	r2,r2,128
   1e2a4:	10bfe004 	addi	r2,r2,-128
   1e2a8:	10000a1e 	bne	r2,zero,1e2d4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   1e2ac:	e0bffd17 	ldw	r2,-12(fp)
   1e2b0:	10800217 	ldw	r2,8(r2)
   1e2b4:	e0fffe17 	ldw	r3,-8(fp)
   1e2b8:	180d883a 	mov	r6,r3
   1e2bc:	e17fff17 	ldw	r5,-4(fp)
   1e2c0:	1009883a 	mov	r4,r2
   1e2c4:	001e5580 	call	1e558 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1e2c8:	1000021e 	bne	r2,zero,1e2d4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1e2cc:	e0bffd17 	ldw	r2,-12(fp)
   1e2d0:	00000706 	br	1e2f0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   1e2d4:	e0bffd17 	ldw	r2,-12(fp)
   1e2d8:	10800017 	ldw	r2,0(r2)
   1e2dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1e2e0:	e0fffd17 	ldw	r3,-12(fp)
   1e2e4:	d0a00804 	addi	r2,gp,-32736
   1e2e8:	18bfcc1e 	bne	r3,r2,1e21c <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1e2ec:	0005883a 	mov	r2,zero
}
   1e2f0:	e037883a 	mov	sp,fp
   1e2f4:	dfc00117 	ldw	ra,4(sp)
   1e2f8:	df000017 	ldw	fp,0(sp)
   1e2fc:	dec00204 	addi	sp,sp,8
   1e300:	f800283a 	ret

0001e304 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1e304:	defff904 	addi	sp,sp,-28
   1e308:	dfc00615 	stw	ra,24(sp)
   1e30c:	df000515 	stw	fp,20(sp)
   1e310:	df000504 	addi	fp,sp,20
   1e314:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1e318:	00bffa04 	movi	r2,-24
   1e31c:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   1e320:	d0a80917 	ldw	r2,-24540(gp)
   1e324:	e0bffd15 	stw	r2,-12(fp)
   1e328:	e03ffe0d 	sth	zero,-8(fp)
   1e32c:	e0bffe0b 	ldhu	r2,-8(fp)
   1e330:	e0fffe84 	addi	r3,fp,-6
   1e334:	180d883a 	mov	r6,r3
   1e338:	100b883a 	mov	r5,r2
   1e33c:	e13ffd17 	ldw	r4,-12(fp)
   1e340:	00186740 	call	18674 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1e344:	e03ffb15 	stw	zero,-20(fp)
   1e348:	00001906 	br	1e3b0 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   1e34c:	008000b4 	movhi	r2,2
   1e350:	1080ae04 	addi	r2,r2,696
   1e354:	e0fffb17 	ldw	r3,-20(fp)
   1e358:	18c00324 	muli	r3,r3,12
   1e35c:	10c5883a 	add	r2,r2,r3
   1e360:	10800017 	ldw	r2,0(r2)
   1e364:	10000f1e 	bne	r2,zero,1e3a4 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   1e368:	008000b4 	movhi	r2,2
   1e36c:	1080ae04 	addi	r2,r2,696
   1e370:	e0fffb17 	ldw	r3,-20(fp)
   1e374:	18c00324 	muli	r3,r3,12
   1e378:	10c5883a 	add	r2,r2,r3
   1e37c:	e0ffff17 	ldw	r3,-4(fp)
   1e380:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1e384:	d0e00c17 	ldw	r3,-32720(gp)
   1e388:	e0bffb17 	ldw	r2,-20(fp)
   1e38c:	1880020e 	bge	r3,r2,1e398 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   1e390:	e0bffb17 	ldw	r2,-20(fp)
   1e394:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
   1e398:	e0bffb17 	ldw	r2,-20(fp)
   1e39c:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   1e3a0:	00000606 	br	1e3bc <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1e3a4:	e0bffb17 	ldw	r2,-20(fp)
   1e3a8:	10800044 	addi	r2,r2,1
   1e3ac:	e0bffb15 	stw	r2,-20(fp)
   1e3b0:	e0bffb17 	ldw	r2,-20(fp)
   1e3b4:	10800810 	cmplti	r2,r2,32
   1e3b8:	103fe41e 	bne	r2,zero,1e34c <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   1e3bc:	d0a80917 	ldw	r2,-24540(gp)
   1e3c0:	1009883a 	mov	r4,r2
   1e3c4:	00189ec0 	call	189ec <OSSemPost>

  return rc;
   1e3c8:	e0bffc17 	ldw	r2,-16(fp)
}
   1e3cc:	e037883a 	mov	sp,fp
   1e3d0:	dfc00117 	ldw	ra,4(sp)
   1e3d4:	df000017 	ldw	fp,0(sp)
   1e3d8:	dec00204 	addi	sp,sp,8
   1e3dc:	f800283a 	ret

0001e3e0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1e3e0:	defffb04 	addi	sp,sp,-20
   1e3e4:	df000415 	stw	fp,16(sp)
   1e3e8:	df000404 	addi	fp,sp,16
   1e3ec:	e13ffe15 	stw	r4,-8(fp)
   1e3f0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1e3f4:	e0bfff17 	ldw	r2,-4(fp)
   1e3f8:	10840070 	cmpltui	r2,r2,4097
   1e3fc:	1000021e 	bne	r2,zero,1e408 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1e400:	00840004 	movi	r2,4096
   1e404:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1e408:	e0fffe17 	ldw	r3,-8(fp)
   1e40c:	e0bfff17 	ldw	r2,-4(fp)
   1e410:	1885883a 	add	r2,r3,r2
   1e414:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1e418:	e0bffe17 	ldw	r2,-8(fp)
   1e41c:	e0bffc15 	stw	r2,-16(fp)
   1e420:	00000506 	br	1e438 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1e424:	e0bffc17 	ldw	r2,-16(fp)
   1e428:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1e42c:	e0bffc17 	ldw	r2,-16(fp)
   1e430:	10800804 	addi	r2,r2,32
   1e434:	e0bffc15 	stw	r2,-16(fp)
   1e438:	e0fffc17 	ldw	r3,-16(fp)
   1e43c:	e0bffd17 	ldw	r2,-12(fp)
   1e440:	18bff836 	bltu	r3,r2,1e424 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1e444:	e0bffe17 	ldw	r2,-8(fp)
   1e448:	108007cc 	andi	r2,r2,31
   1e44c:	10000226 	beq	r2,zero,1e458 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1e450:	e0bffc17 	ldw	r2,-16(fp)
   1e454:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1e458:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1e45c:	0001883a 	nop
   1e460:	e037883a 	mov	sp,fp
   1e464:	df000017 	ldw	fp,0(sp)
   1e468:	dec00104 	addi	sp,sp,4
   1e46c:	f800283a 	ret

0001e470 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1e470:	defffe04 	addi	sp,sp,-8
   1e474:	df000115 	stw	fp,4(sp)
   1e478:	df000104 	addi	fp,sp,4
   1e47c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   1e480:	e0bfff17 	ldw	r2,-4(fp)
   1e484:	10bffe84 	addi	r2,r2,-6
   1e488:	10c00428 	cmpgeui	r3,r2,16
   1e48c:	18001a1e 	bne	r3,zero,1e4f8 <alt_exception_cause_generated_bad_addr+0x88>
   1e490:	100690ba 	slli	r3,r2,2
   1e494:	008000b4 	movhi	r2,2
   1e498:	10b92a04 	addi	r2,r2,-7000
   1e49c:	1885883a 	add	r2,r3,r2
   1e4a0:	10800017 	ldw	r2,0(r2)
   1e4a4:	1000683a 	jmp	r2
   1e4a8:	0001e4e8 	cmpgeui	zero,zero,1939
   1e4ac:	0001e4e8 	cmpgeui	zero,zero,1939
   1e4b0:	0001e4f8 	rdprs	zero,zero,1939
   1e4b4:	0001e4f8 	rdprs	zero,zero,1939
   1e4b8:	0001e4f8 	rdprs	zero,zero,1939
   1e4bc:	0001e4e8 	cmpgeui	zero,zero,1939
   1e4c0:	0001e4f0 	cmpltui	zero,zero,1939
   1e4c4:	0001e4f8 	rdprs	zero,zero,1939
   1e4c8:	0001e4e8 	cmpgeui	zero,zero,1939
   1e4cc:	0001e4e8 	cmpgeui	zero,zero,1939
   1e4d0:	0001e4f8 	rdprs	zero,zero,1939
   1e4d4:	0001e4e8 	cmpgeui	zero,zero,1939
   1e4d8:	0001e4f0 	cmpltui	zero,zero,1939
   1e4dc:	0001e4f8 	rdprs	zero,zero,1939
   1e4e0:	0001e4f8 	rdprs	zero,zero,1939
   1e4e4:	0001e4e8 	cmpgeui	zero,zero,1939
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1e4e8:	00800044 	movi	r2,1
   1e4ec:	00000306 	br	1e4fc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1e4f0:	0005883a 	mov	r2,zero
   1e4f4:	00000106 	br	1e4fc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1e4f8:	0005883a 	mov	r2,zero
  }
}
   1e4fc:	e037883a 	mov	sp,fp
   1e500:	df000017 	ldw	fp,0(sp)
   1e504:	dec00104 	addi	sp,sp,4
   1e508:	f800283a 	ret

0001e50c <atexit>:
   1e50c:	200b883a 	mov	r5,r4
   1e510:	000f883a 	mov	r7,zero
   1e514:	000d883a 	mov	r6,zero
   1e518:	0009883a 	mov	r4,zero
   1e51c:	001e5d41 	jmpi	1e5d4 <__register_exitproc>

0001e520 <exit>:
   1e520:	defffe04 	addi	sp,sp,-8
   1e524:	000b883a 	mov	r5,zero
   1e528:	dc000015 	stw	r16,0(sp)
   1e52c:	dfc00115 	stw	ra,4(sp)
   1e530:	2021883a 	mov	r16,r4
   1e534:	001e6ec0 	call	1e6ec <__call_exitprocs>
   1e538:	008000b4 	movhi	r2,2
   1e53c:	1085ee04 	addi	r2,r2,6072
   1e540:	11000017 	ldw	r4,0(r2)
   1e544:	20800f17 	ldw	r2,60(r4)
   1e548:	10000126 	beq	r2,zero,1e550 <exit+0x30>
   1e54c:	103ee83a 	callr	r2
   1e550:	8009883a 	mov	r4,r16
   1e554:	001e86c0 	call	1e86c <_exit>

0001e558 <memcmp>:
   1e558:	01c000c4 	movi	r7,3
   1e55c:	3980192e 	bgeu	r7,r6,1e5c4 <memcmp+0x6c>
   1e560:	2144b03a 	or	r2,r4,r5
   1e564:	11c4703a 	and	r2,r2,r7
   1e568:	10000f26 	beq	r2,zero,1e5a8 <memcmp+0x50>
   1e56c:	20800003 	ldbu	r2,0(r4)
   1e570:	28c00003 	ldbu	r3,0(r5)
   1e574:	10c0151e 	bne	r2,r3,1e5cc <memcmp+0x74>
   1e578:	31bfff84 	addi	r6,r6,-2
   1e57c:	01ffffc4 	movi	r7,-1
   1e580:	00000406 	br	1e594 <memcmp+0x3c>
   1e584:	20800003 	ldbu	r2,0(r4)
   1e588:	28c00003 	ldbu	r3,0(r5)
   1e58c:	31bfffc4 	addi	r6,r6,-1
   1e590:	10c00e1e 	bne	r2,r3,1e5cc <memcmp+0x74>
   1e594:	21000044 	addi	r4,r4,1
   1e598:	29400044 	addi	r5,r5,1
   1e59c:	31fff91e 	bne	r6,r7,1e584 <memcmp+0x2c>
   1e5a0:	0005883a 	mov	r2,zero
   1e5a4:	f800283a 	ret
   1e5a8:	20c00017 	ldw	r3,0(r4)
   1e5ac:	28800017 	ldw	r2,0(r5)
   1e5b0:	18bfee1e 	bne	r3,r2,1e56c <memcmp+0x14>
   1e5b4:	31bfff04 	addi	r6,r6,-4
   1e5b8:	21000104 	addi	r4,r4,4
   1e5bc:	29400104 	addi	r5,r5,4
   1e5c0:	39bff936 	bltu	r7,r6,1e5a8 <memcmp+0x50>
   1e5c4:	303fe91e 	bne	r6,zero,1e56c <memcmp+0x14>
   1e5c8:	003ff506 	br	1e5a0 <memcmp+0x48>
   1e5cc:	10c5c83a 	sub	r2,r2,r3
   1e5d0:	f800283a 	ret

0001e5d4 <__register_exitproc>:
   1e5d4:	defffa04 	addi	sp,sp,-24
   1e5d8:	dc000315 	stw	r16,12(sp)
   1e5dc:	040000b4 	movhi	r16,2
   1e5e0:	8405ee04 	addi	r16,r16,6072
   1e5e4:	80c00017 	ldw	r3,0(r16)
   1e5e8:	dc400415 	stw	r17,16(sp)
   1e5ec:	dfc00515 	stw	ra,20(sp)
   1e5f0:	18805217 	ldw	r2,328(r3)
   1e5f4:	2023883a 	mov	r17,r4
   1e5f8:	10003726 	beq	r2,zero,1e6d8 <__register_exitproc+0x104>
   1e5fc:	10c00117 	ldw	r3,4(r2)
   1e600:	010007c4 	movi	r4,31
   1e604:	20c00e16 	blt	r4,r3,1e640 <__register_exitproc+0x6c>
   1e608:	1a000044 	addi	r8,r3,1
   1e60c:	8800221e 	bne	r17,zero,1e698 <__register_exitproc+0xc4>
   1e610:	18c00084 	addi	r3,r3,2
   1e614:	18c7883a 	add	r3,r3,r3
   1e618:	18c7883a 	add	r3,r3,r3
   1e61c:	12000115 	stw	r8,4(r2)
   1e620:	10c7883a 	add	r3,r2,r3
   1e624:	19400015 	stw	r5,0(r3)
   1e628:	0005883a 	mov	r2,zero
   1e62c:	dfc00517 	ldw	ra,20(sp)
   1e630:	dc400417 	ldw	r17,16(sp)
   1e634:	dc000317 	ldw	r16,12(sp)
   1e638:	dec00604 	addi	sp,sp,24
   1e63c:	f800283a 	ret
   1e640:	00800034 	movhi	r2,0
   1e644:	10800004 	addi	r2,r2,0
   1e648:	10002626 	beq	r2,zero,1e6e4 <__register_exitproc+0x110>
   1e64c:	01006404 	movi	r4,400
   1e650:	d9400015 	stw	r5,0(sp)
   1e654:	d9800115 	stw	r6,4(sp)
   1e658:	d9c00215 	stw	r7,8(sp)
   1e65c:	00000000 	call	0 <__alt_mem_SDRAM>
   1e660:	d9400017 	ldw	r5,0(sp)
   1e664:	d9800117 	ldw	r6,4(sp)
   1e668:	d9c00217 	ldw	r7,8(sp)
   1e66c:	10001d26 	beq	r2,zero,1e6e4 <__register_exitproc+0x110>
   1e670:	81000017 	ldw	r4,0(r16)
   1e674:	10000115 	stw	zero,4(r2)
   1e678:	02000044 	movi	r8,1
   1e67c:	22405217 	ldw	r9,328(r4)
   1e680:	0007883a 	mov	r3,zero
   1e684:	12400015 	stw	r9,0(r2)
   1e688:	20805215 	stw	r2,328(r4)
   1e68c:	10006215 	stw	zero,392(r2)
   1e690:	10006315 	stw	zero,396(r2)
   1e694:	883fde26 	beq	r17,zero,1e610 <__register_exitproc+0x3c>
   1e698:	18c9883a 	add	r4,r3,r3
   1e69c:	2109883a 	add	r4,r4,r4
   1e6a0:	1109883a 	add	r4,r2,r4
   1e6a4:	21802215 	stw	r6,136(r4)
   1e6a8:	01800044 	movi	r6,1
   1e6ac:	12406217 	ldw	r9,392(r2)
   1e6b0:	30cc983a 	sll	r6,r6,r3
   1e6b4:	4992b03a 	or	r9,r9,r6
   1e6b8:	12406215 	stw	r9,392(r2)
   1e6bc:	21c04215 	stw	r7,264(r4)
   1e6c0:	01000084 	movi	r4,2
   1e6c4:	893fd21e 	bne	r17,r4,1e610 <__register_exitproc+0x3c>
   1e6c8:	11006317 	ldw	r4,396(r2)
   1e6cc:	218cb03a 	or	r6,r4,r6
   1e6d0:	11806315 	stw	r6,396(r2)
   1e6d4:	003fce06 	br	1e610 <__register_exitproc+0x3c>
   1e6d8:	18805304 	addi	r2,r3,332
   1e6dc:	18805215 	stw	r2,328(r3)
   1e6e0:	003fc606 	br	1e5fc <__register_exitproc+0x28>
   1e6e4:	00bfffc4 	movi	r2,-1
   1e6e8:	003fd006 	br	1e62c <__register_exitproc+0x58>

0001e6ec <__call_exitprocs>:
   1e6ec:	defff504 	addi	sp,sp,-44
   1e6f0:	df000915 	stw	fp,36(sp)
   1e6f4:	dd400615 	stw	r21,24(sp)
   1e6f8:	dc800315 	stw	r18,12(sp)
   1e6fc:	dfc00a15 	stw	ra,40(sp)
   1e700:	ddc00815 	stw	r23,32(sp)
   1e704:	dd800715 	stw	r22,28(sp)
   1e708:	dd000515 	stw	r20,20(sp)
   1e70c:	dcc00415 	stw	r19,16(sp)
   1e710:	dc400215 	stw	r17,8(sp)
   1e714:	dc000115 	stw	r16,4(sp)
   1e718:	d9000015 	stw	r4,0(sp)
   1e71c:	2839883a 	mov	fp,r5
   1e720:	04800044 	movi	r18,1
   1e724:	057fffc4 	movi	r21,-1
   1e728:	008000b4 	movhi	r2,2
   1e72c:	1085ee04 	addi	r2,r2,6072
   1e730:	12000017 	ldw	r8,0(r2)
   1e734:	45005217 	ldw	r20,328(r8)
   1e738:	44c05204 	addi	r19,r8,328
   1e73c:	a0001c26 	beq	r20,zero,1e7b0 <__call_exitprocs+0xc4>
   1e740:	a0800117 	ldw	r2,4(r20)
   1e744:	15ffffc4 	addi	r23,r2,-1
   1e748:	b8000d16 	blt	r23,zero,1e780 <__call_exitprocs+0x94>
   1e74c:	14000044 	addi	r16,r2,1
   1e750:	8421883a 	add	r16,r16,r16
   1e754:	8421883a 	add	r16,r16,r16
   1e758:	84402004 	addi	r17,r16,128
   1e75c:	a463883a 	add	r17,r20,r17
   1e760:	a421883a 	add	r16,r20,r16
   1e764:	e0001e26 	beq	fp,zero,1e7e0 <__call_exitprocs+0xf4>
   1e768:	80804017 	ldw	r2,256(r16)
   1e76c:	e0801c26 	beq	fp,r2,1e7e0 <__call_exitprocs+0xf4>
   1e770:	bdffffc4 	addi	r23,r23,-1
   1e774:	843fff04 	addi	r16,r16,-4
   1e778:	8c7fff04 	addi	r17,r17,-4
   1e77c:	bd7ff91e 	bne	r23,r21,1e764 <__call_exitprocs+0x78>
   1e780:	00800034 	movhi	r2,0
   1e784:	10800004 	addi	r2,r2,0
   1e788:	10000926 	beq	r2,zero,1e7b0 <__call_exitprocs+0xc4>
   1e78c:	a0800117 	ldw	r2,4(r20)
   1e790:	1000301e 	bne	r2,zero,1e854 <__call_exitprocs+0x168>
   1e794:	a0800017 	ldw	r2,0(r20)
   1e798:	10003226 	beq	r2,zero,1e864 <__call_exitprocs+0x178>
   1e79c:	a009883a 	mov	r4,r20
   1e7a0:	98800015 	stw	r2,0(r19)
   1e7a4:	00000000 	call	0 <__alt_mem_SDRAM>
   1e7a8:	9d000017 	ldw	r20,0(r19)
   1e7ac:	a03fe41e 	bne	r20,zero,1e740 <__call_exitprocs+0x54>
   1e7b0:	dfc00a17 	ldw	ra,40(sp)
   1e7b4:	df000917 	ldw	fp,36(sp)
   1e7b8:	ddc00817 	ldw	r23,32(sp)
   1e7bc:	dd800717 	ldw	r22,28(sp)
   1e7c0:	dd400617 	ldw	r21,24(sp)
   1e7c4:	dd000517 	ldw	r20,20(sp)
   1e7c8:	dcc00417 	ldw	r19,16(sp)
   1e7cc:	dc800317 	ldw	r18,12(sp)
   1e7d0:	dc400217 	ldw	r17,8(sp)
   1e7d4:	dc000117 	ldw	r16,4(sp)
   1e7d8:	dec00b04 	addi	sp,sp,44
   1e7dc:	f800283a 	ret
   1e7e0:	a0800117 	ldw	r2,4(r20)
   1e7e4:	80c00017 	ldw	r3,0(r16)
   1e7e8:	10bfffc4 	addi	r2,r2,-1
   1e7ec:	15c01426 	beq	r2,r23,1e840 <__call_exitprocs+0x154>
   1e7f0:	80000015 	stw	zero,0(r16)
   1e7f4:	183fde26 	beq	r3,zero,1e770 <__call_exitprocs+0x84>
   1e7f8:	95c8983a 	sll	r4,r18,r23
   1e7fc:	a0806217 	ldw	r2,392(r20)
   1e800:	a5800117 	ldw	r22,4(r20)
   1e804:	2084703a 	and	r2,r4,r2
   1e808:	10000b26 	beq	r2,zero,1e838 <__call_exitprocs+0x14c>
   1e80c:	a0806317 	ldw	r2,396(r20)
   1e810:	2088703a 	and	r4,r4,r2
   1e814:	20000c1e 	bne	r4,zero,1e848 <__call_exitprocs+0x15c>
   1e818:	89400017 	ldw	r5,0(r17)
   1e81c:	d9000017 	ldw	r4,0(sp)
   1e820:	183ee83a 	callr	r3
   1e824:	a0800117 	ldw	r2,4(r20)
   1e828:	15bfbf1e 	bne	r2,r22,1e728 <__call_exitprocs+0x3c>
   1e82c:	98800017 	ldw	r2,0(r19)
   1e830:	153fcf26 	beq	r2,r20,1e770 <__call_exitprocs+0x84>
   1e834:	003fbc06 	br	1e728 <__call_exitprocs+0x3c>
   1e838:	183ee83a 	callr	r3
   1e83c:	003ff906 	br	1e824 <__call_exitprocs+0x138>
   1e840:	a5c00115 	stw	r23,4(r20)
   1e844:	003feb06 	br	1e7f4 <__call_exitprocs+0x108>
   1e848:	89000017 	ldw	r4,0(r17)
   1e84c:	183ee83a 	callr	r3
   1e850:	003ff406 	br	1e824 <__call_exitprocs+0x138>
   1e854:	a0800017 	ldw	r2,0(r20)
   1e858:	a027883a 	mov	r19,r20
   1e85c:	1029883a 	mov	r20,r2
   1e860:	003fb606 	br	1e73c <__call_exitprocs+0x50>
   1e864:	0005883a 	mov	r2,zero
   1e868:	003ffb06 	br	1e858 <__call_exitprocs+0x16c>

0001e86c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1e86c:	defffd04 	addi	sp,sp,-12
   1e870:	df000215 	stw	fp,8(sp)
   1e874:	df000204 	addi	fp,sp,8
   1e878:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1e87c:	d0281145 	stb	zero,-24507(gp)
   1e880:	e0bfff17 	ldw	r2,-4(fp)
   1e884:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1e888:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1e88c:	10000226 	beq	r2,zero,1e898 <_exit+0x2c>
    ALT_SIM_FAIL();
   1e890:	002af070 	cmpltui	zero,zero,43969
   1e894:	00000106 	br	1e89c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   1e898:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1e89c:	003fff06 	br	1e89c <_exit+0x30>


ucos2nios2.elf:     file format elf32-littlenios2
ucos2nios2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001b378 memsz 0x0001b378 flags r-x
    LOAD off    0x0001c398 vaddr 0x0001b398 paddr 0x0001d328 align 2**12
         filesz 0x00001f90 memsz 0x00001f90 flags rw-
    LOAD off    0x0001f2b8 vaddr 0x0001f2b8 paddr 0x0001f2b8 align 2**12
         filesz 0x00000000 memsz 0x00013440 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001a45c  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000cf4  0001a6a4  0001a6a4  0001b6a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f90  0001b398  0001d328  0001c398  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00013440  0001f2b8  0001f2b8  0001f2b8  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  000326f8  000326f8  0001e328  2**0
                  CONTENTS
  7 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM 00000000  09000000  09000000  0001e328  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001e328  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001098  00000000  00000000  0001e350  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002fcfa  00000000  00000000  0001f3e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b20c  00000000  00000000  0004f0e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ea7d  00000000  00000000  0005a2ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000390c  00000000  00000000  00068d6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000056b2  00000000  00000000  0006c678  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000178aa  00000000  00000000  00071d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  000895d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018f0  00000000  00000000  000895f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  000907ad  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  000907b3  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000907b8  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000907b9  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000907ba  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000907be  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000907c2  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000907c6  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000907cf  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000907d8  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000f  00000000  00000000  000907e1  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000052  00000000  00000000  000907f0  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     001d2080  00000000  00000000  00090842  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
0001a6a4 l    d  .rodata	00000000 .rodata
0001b398 l    d  .rwdata	00000000 .rwdata
0001f2b8 l    d  .bss	00000000 .bss
000326f8 l    d  .SDRAM	00000000 .SDRAM
09000000 l    d  .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM	00000000 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ucos2nios2_bsp//obj/HAL/src/crt0.o
00000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 utils.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 impure.c
0001b4a8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001ae7a l     O .rodata	00000010 zeroes.4404
00003e10 l     F .text	000000bc __sbprintf
0001ae8a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00004020 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00005b50 l     F .text	00000008 __fp_unlock
00005b64 l     F .text	0000019c __sinit.part.1
00005d00 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
0001b8ec l     O .rwdata	00000020 lc_ctype_charset
0001b8cc l     O .rwdata	00000020 lc_message_charset
0001b90c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0001aeb8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
000090fc l     F .text	000000fc __sprint_r.part.0
0001afec l     O .rodata	00000010 blanks.4348
0001afdc l     O .rodata	00000010 zeroes.4349
0000a688 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000e344 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000e450 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000e47c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000e568 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000e648 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000e734 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0000e900 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001d29c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000eb4c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0001d2a0 l     O .rwdata	00000004 lockid
0001f33c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0001d2a4 l     O .rwdata	00000004 lockid
0001f344 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0001057c l     F .text	00000048 OS_InitMisc
000105c4 l     F .text	0000006c OS_InitRdyList
00010730 l     F .text	000000e4 OS_InitTCBList
0001049c l     F .text	000000e0 OS_InitEventList
00010630 l     F .text	00000080 OS_InitTaskIdle
000106b0 l     F .text	00000080 OS_InitTaskStat
000109a0 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
000126c0 l     F .text	000000f4 OS_FlagTaskRdy
00012480 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00016770 l     F .text	00000034 alt_dev_reg
0001bef4 l     O .rwdata	0000106c JTAG_UART
0001cf60 l     O .rwdata	00000030 AV_Config
0001cf90 l     O .rwdata	00000030 Audio_Subsystem_Audio
0001cfc0 l     O .rwdata	0000002c Char_LCD_16x2
0001cfec l     O .rwdata	0000002c IrDA
0001d018 l     O .rwdata	00000038 PS2_Port
0001d050 l     O .rwdata	00000038 PS2_Port_Dual
0001d088 l     O .rwdata	0000002c Serial_Port
0001d0b4 l     O .rwdata	00000034 USB
0001d0e8 l     O .rwdata	0000005c VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA
0001d144 l     O .rwdata	0000005c VGA_Subsystem_VGA_Pixel_DMA
0001d1a0 l     O .rwdata	0000005c Video_In_Subsystem_Video_In_DMA
0001d1fc l     O .rwdata	00000044 VGA_Subsystem_VGA_Pixel_RGB_Resampler
0001d240 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000173e8 l     F .text	000002a8 altera_avalon_jtag_uart_irq
00017690 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00017e6c l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00019368 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000195cc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001988c l     F .text	0000003c alt_get_errno
000198c8 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001f3a8 g     O .bss	00000004 alt_instruction_exception_handler
00008740 g     F .text	00000074 _mprec_log10
0001d2f2 g     O .rwdata	00000002 OSTaskNameSize
0000882c g     F .text	0000008c __any_on
0000ac24 g     F .text	00000054 _isatty_r
0001aec4 g     O .rodata	00000028 __mprec_tinytens
0000e844 g     F .text	000000bc alt_main
00001a90 g     F .text	000000c0 _puts_r
000325f8 g     O .bss	00000100 alt_irq
00018a28 g     F .text	00000060 alt_up_ps2_disable_read_interrupt
0000ac78 g     F .text	00000060 _lseek_r
00012ee0 g     F .text	000000cc OS_MemInit
0001d328 g       *ABS*	00000000 __flash_rwdata_start
00016710 g     F .text	00000060 OSTimeSet
00017fd0 g     F .text	00000040 alt_up_character_lcd_send_cmd
0000ce70 g     F .text	00000088 .hidden __eqdf2
0000f1f0 g     F .text	00000610 OSEventPendMulti
000326f8 g       *ABS*	00000000 __alt_heap_start
00019ed4 g     F .text	00000024 OSTaskCreateHook
0001d2ca g     O .rwdata	00000002 OSMboxEn
0000f858 g     F .text	0000004c OSIntEnter
0000ae90 g     F .text	0000009c _wcrtomb_r
00008fbc g     F .text	0000005c __sseek
00005ea0 g     F .text	00000010 __sinit
0000ad38 g     F .text	00000140 __swbuf_r
00018840 g     F .text	00000034 read_CE_bit
0001d2da g     O .rwdata	00000002 OSQEn
00006968 g     F .text	0000007c _setlocale_r
00005d08 g     F .text	00000068 __sfmoreglue
0000eec4 g     F .text	000000cc __malloc_unlock
0001f2b8 g     O .bss	00000004 PS2_num
00019f3c g     F .text	00000020 OSTaskStatHook
00018bc8 g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
000190bc g     F .text	00000090 alt_up_rs232_read_fd
0001f34c g     O .bss	00000001 OSLockNesting
0001d318 g     O .rwdata	00000002 OSDataSize
0001f34d g     O .bss	00000001 OSRunning
0001f3d4 g     O .bss	00002000 task_state_timer_stk
00007638 g     F .text	0000015c memmove
00019f7c g     F .text	00000020 OSInitHookBegin
0001d310 g     O .rwdata	00000002 OSTmrSize
00005e88 g     F .text	00000018 _cleanup
000078bc g     F .text	000000a8 _Balloc
0001f350 g     O .bss	00000004 OSIdleCtr
0000cef8 g     F .text	000000dc .hidden __gtdf2
00019c84 g     F .text	00000024 altera_nios2_gen2_irq_init
00019d54 g       .text	00000000 OSStartTsk
00017f5c g     F .text	00000074 get_DDRAM_addr
00010ce0 g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000001c __reset
0001d316 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001d2b6 g     O .rwdata	00000002 OSEventSize
0001f354 g     O .bss	00000001 OSPrioHighRdy
0000abc8 g     F .text	0000005c _fstat_r
00019ef8 g     F .text	00000024 OSTaskDelHook
0001f328 g     O .bss	00000004 errno
00008f38 g     F .text	00000008 __seofread
00019d34 g       .text	00000000 OSStartHighRdy
000151ac g     F .text	000001e4 OSTaskCreateExt
000018b8 g     F .text	000000e0 Get_state_name
00011fc8 g     F .text	00000060 OSFlagPendGetFlagsRdy
0001d2f6 g     O .rwdata	00000002 OSTaskStatStkSize
00011144 g     F .text	00000308 OSFlagAccept
00013518 g     F .text	000000b8 OSQFlush
00012fac g     F .text	00000140 OSQAccept
0001f334 g     O .bss	00000004 alt_argv
0002526c g       *ABS*	00000000 _gp
00015000 g     F .text	000001ac OSTaskCreate
00014b10 g     F .text	000004f0 OSTaskChangePrio
0001f348 g     O .bss	00000004 alt_heapsem
0001f2bc g     O .bss	00000004 prev_state
00010fb4 g     F .text	00000190 OSDebugInit
00015390 g     F .text	00000344 OSTaskDel
00000e58 g     F .text	000001e4 Task_state_timer
0001bd74 g     O .rwdata	00000180 alt_fd_list
0002f3d4 g     O .bss	00000370 OSFlagTbl
0001027c g     F .text	000000b8 OS_EventTaskRemove
00019508 g     F .text	00000090 alt_find_dev
000074f0 g     F .text	00000148 memcpy
0001d2e0 g     O .rwdata	00000002 OSRdyTblSize
00018178 g     F .text	00000050 alt_up_character_lcd_write_fd
00005b58 g     F .text	0000000c _cleanup_r
0000e15c g     F .text	000000dc .hidden __floatsidf
00019690 g     F .text	0000007c alt_io_redirect
0000cfd4 g     F .text	000000f4 .hidden __ltdf2
0001a6a4 g       *ABS*	00000000 __DTOR_END__
00018710 g     F .text	00000090 alt_up_irda_write_fd
00019048 g     F .text	00000074 alt_up_rs232_read_data
00001b50 g     F .text	00000014 puts
0001a274 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000ef90 g     F .text	00000120 OSEventNameGet
0001d2c4 g     O .rwdata	00000002 OSFlagMax
00008e1c g     F .text	00000074 __fpclassifyd
0000869c g     F .text	000000a4 __ratio
0000f8a4 g     F .text	000000f8 OSIntExit
0000a66c g     F .text	0000001c __vfiprintf_internal
0001d2fe g     O .rwdata	00000002 OSTCBSize
0001b3a8 g     O .rwdata	00000100 stored_codes
0001f355 g     O .bss	00000001 OSPrioCur
0001f2c0 g     O .bss	00000004 KEY2_flag
0001850c g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
000178ec g     F .text	000002bc altera_avalon_jtag_uart_read
0000bc20 g     F .text	00000064 .hidden __udivsi3
0000e5a4 g     F .text	000000a4 isatty
0001d2e4 g     O .rwdata	00000002 OSStkWidth
0001af14 g     O .rodata	000000c8 __mprec_tens
0001d2d8 g     O .rwdata	00000002 OSPtrSize
000069e4 g     F .text	0000000c __locale_charset
0001d2b8 g     O .rwdata	00000002 OSEventTblSize
000184ac g     F .text	00000060 alt_up_irda_disable_read_interrupt
00019ca8 g       .text	00000000 OSCtxSw
0001a1e4 g     F .text	00000090 alt_icache_flush
0001f324 g     O .bss	00000004 __malloc_top_pad
0001f2c4 g     O .bss	00000004 flag
000213d4 g     O .bss	00002000 task_add_code_stk
0001f358 g     O .bss	00000004 OSTCBList
0001f32c g     O .bss	00000004 alt_fd_list_lock
0001d274 g     O .rwdata	00000004 __mb_cur_max
00006a14 g     F .text	0000000c _localeconv_r
0001f2c8 g     O .bss	00000004 SEM_delete_code
00007cc8 g     F .text	0000003c __i2b
00006324 g     F .text	000004bc __sfvwrite_r
0002f744 g     O .bss	00000c30 OSMemTbl
0001f35c g     O .bss	00000001 OSTickStepState
00008e90 g     F .text	00000054 _sbrk_r
0001d2dc g     O .rwdata	00000002 OSQMax
00030374 g     O .bss	00000800 OSTaskStatStk
00012b1c g     F .text	000000f0 OSMemNameGet
0001d2bc g     O .rwdata	00000002 OSFlagEn
0000acd8 g     F .text	00000060 _read_r
0001d302 g     O .rwdata	00000002 OSTimeTickHookEn
000139c8 g     F .text	00000168 OSQPost
000127b4 g     F .text	000000a4 OS_FlagUnlink
0001d294 g     O .rwdata	00000004 alt_max_fd
00018fc4 g     F .text	00000044 alt_up_rs232_check_parity
00010868 g     F .text	00000068 OS_MemCopy
000108d0 g     F .text	000000d0 OS_Sched
0000a8bc g     F .text	000000f0 _fclose_r
00012a2c g     F .text	000000f0 OSMemGet
000233d4 g     O .bss	00002000 task_flash_fail_stk
000014f8 g     F .text	00000088 Task_delete_code
000159bc g     F .text	000001b4 OSTaskNameSet
00018874 g     F .text	00000030 read_num_bytes_available
0001f2cc g     O .bss	00000004 state_timer
00005b20 g     F .text	00000030 fflush
0001f320 g     O .bss	00000004 __malloc_max_sbrked_mem
0001f360 g     O .bss	00000004 OSCtxSwCtr
00019f5c g     F .text	00000020 OSTimeTickHook
0001970c g     F .text	00000180 alt_irq_register
0001d2c6 g     O .rwdata	00000002 OSFlagNameSize
000187dc g     F .text	00000034 read_RI_bit
00010334 g     F .text	00000100 OS_EventTaskRemoveMulti
0000bcdc g     F .text	000008ac .hidden __adddf3
0001012c g     F .text	00000150 OS_EventTaskWaitMulti
00008444 g     F .text	0000010c __b2d
0001d2de g     O .rwdata	00000002 OSQSize
0000b5f0 g     F .text	00000538 .hidden __umoddi3
0000e770 g     F .text	000000d4 lseek
00014478 g     F .text	0000020c OSSemPend
0001f2d0 g     O .bss	00000004 SEM_timer_start
0001d26c g     O .rwdata	00000004 _global_impure_ptr
000088b8 g     F .text	00000564 _realloc_r
0001d2c8 g     O .rwdata	00000002 OSLowestPrio
000326f8 g       *ABS*	00000000 __bss_end
00019fdc g     F .text	00000024 OSTCBInitHook
0001d30e g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00019b7c g     F .text	00000108 alt_tick
0000b078 g     F .text	00000578 .hidden __udivdi3
0000ab24 g     F .text	00000024 _fputwc_r
0001d2b0 g     O .rwdata	00000002 OSEventEn
0001aeec g     O .rodata	00000028 __mprec_bigtens
00007aac g     F .text	00000104 __s2b
0001d30a g     O .rwdata	00000002 OSTmrCfgNameSize
0000e238 g     F .text	000000a8 .hidden __floatunsidf
00008184 g     F .text	00000060 __mcmp
000188d8 g     F .text	0000002c read_data_byte
00005ec0 g     F .text	00000018 __fp_lock_all
000125e0 g     F .text	000000e0 OS_FlagInit
0001f2d4 g     O .bss	00000004 state
00019ae0 g     F .text	0000009c alt_alarm_stop
00018810 g     F .text	00000030 read_RE_bit
0001d2ec g     O .rwdata	00000002 OSTaskIdleStkSize
00001998 g     F .text	000000ac Check_KEYs
0001f39c g     O .bss	00000004 alt_irq_active
000140b0 g     F .text	000000b0 OSSemAccept
00012d20 g     F .text	000000d8 OSMemPut
0001f2d8 g     O .bss	00000004 SEM_read_PS2_done
00012858 g     F .text	000001d4 OSMemCreate
0001f364 g     O .bss	00000004 OSIdleCtrMax
00001124 g     F .text	000000c4 Task_flash_fail
0001854c g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d8 alt_irq_handler
0001bd4c g     O .rwdata	00000028 alt_dev_null
0001d300 g     O .rwdata	00000002 OSTicksPerSec
0001f2dc g     O .bss	00000004 KEY_val
00018418 g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
00019ca8 g       .text	00000000 OSIntCtxSw
00018a88 g     F .text	00000074 alt_up_ps2_write_data_byte
00019348 g     F .text	00000020 alt_dcache_flush_all
00007bb0 g     F .text	00000068 __hi0bits
000253d4 g     O .bss	00002000 task_flash_success_stk
0000e0dc g     F .text	00000080 .hidden __fixdfsi
0001b398 g     O .rwdata	00000010 cur_input_code
0001f368 g     O .bss	00000004 OSTCBFreeList
0001d328 g       *ABS*	00000000 __ram_rwdata_end
00014684 g     F .text	0000016c OSSemPendAbort
000273d4 g     O .bss	00002000 task_read_ps2_stk
0001d28c g     O .rwdata	00000008 alt_dev_list
0000eb88 g     F .text	000000f8 write
0001f2e0 g     O .bss	00000004 SEM_flash_success
0001d304 g     O .rwdata	00000002 OSVersionNbr
0001b398 g       *ABS*	00000000 __ram_rodata_end
0001f2e4 g     O .bss	00000004 SEM_add_code
0000e4b8 g     F .text	000000b0 fstat
00001a6c g     F .text	00000024 fprintf
0001914c g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000cfd4 g     F .text	000000f4 .hidden __ledf2
0001d2ac g     O .rwdata	00000004 OSEndiannessTest
00007efc g     F .text	00000140 __pow5mult
00009210 g     F .text	0000145c ___vfiprintf_internal_r
0001f318 g     O .bss	00000004 __nlocale_changed
0000bc84 g     F .text	00000058 .hidden __umodsi3
0001d2be g     O .rwdata	00000002 OSFlagGrpSize
000326f8 g       *ABS*	00000000 end
00018db8 g     F .text	00000098 alt_up_ps2_write_fd
00018588 g     F .text	00000044 alt_up_irda_check_parity
000172ac g     F .text	0000013c altera_avalon_jtag_uart_init
00010b38 g     F .text	000000dc OS_TaskStat
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
0001a6a4 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00017ee8 g     F .text	00000074 alt_avalon_timer_sc_init
0000e2e0 g     F .text	00000064 .hidden __clzsi2
00017ba8 g     F .text	000002c4 altera_avalon_jtag_uart_write
000002e8 g     F .text	00000628 Task_read_PS2
00005eb0 g     F .text	00000004 __sfp_lock_acquire
0000740c g     F .text	000000e4 memchr
00010814 g     F .text	00000054 OS_MemClr
00018084 g     F .text	0000007c alt_up_character_lcd_write
00001bfc g     F .text	000021f8 ___vfprintf_internal_r
00019d78 g     F .text	0000015c OSTaskStkInit
00006014 g     F .text	00000310 _free_r
000069f0 g     F .text	00000010 __locale_mb_cur_max
0000fe84 g     F .text	00000198 OS_EventTaskRdy
0001a4f0 g     F .text	00000180 __call_exitprocs
0001f36c g     O .bss	00000001 OSCPUUsage
0001f314 g     O .bss	00000004 __mlocale_changed
0001d278 g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	0000003c _start
0001f3a0 g     O .bss	00000004 _alt_tick_rate
000135d0 g     F .text	0000028c OSQPend
0001627c g     F .text	00000104 OSTimeDly
0000803c g     F .text	00000148 __lshift
00000284 g     F .text	00000064 reset_PS2_input
0001f3a4 g     O .bss	00000004 _alt_nticks
0000e93c g     F .text	000000fc read
000167dc g     F .text	0000096c alt_sys_init
000182c8 g     F .text	0000008c alt_up_character_lcd_shift_display
0001a3d8 g     F .text	00000118 __register_exitproc
0001f36d g     O .bss	00000001 OSTaskCtr
00018cd4 g     F .text	00000058 alt_up_ps2_clear_fifo
00018f88 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00016380 g     F .text	00000160 OSTimeDlyHMSM
00007d04 g     F .text	000001f8 __multiply
00018354 g     F .text	0000008c alt_up_character_lcd_erase_pos
00017794 g     F .text	00000068 altera_avalon_jtag_uart_close
0001b398 g       *ABS*	00000000 __ram_rwdata_start
0001a6a4 g       *ABS*	00000000 __ram_rodata_start
0001f3ac g     O .bss	00000028 __malloc_current_mallinfo
0001d2b2 g     O .rwdata	00000002 OSEventMax
00008550 g     F .text	0000014c __d2b
000147f0 g     F .text	00000110 OSSemPost
0000fa28 g     F .text	000000dc OSSchedUnlock
00017148 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001a108 g     F .text	000000dc alt_get_fd
0001f370 g     O .bss	00000004 OSMemFreeList
0000fb74 g     F .text	000000b0 OSStatInit
000123bc g     F .text	000000c4 OSFlagQuery
0001f2e8 g     O .bss	00000004 KEY1_flag
0001d2e8 g     O .rwdata	00000002 OSTaskCreateExtEn
0000a7a4 g     F .text	00000054 _close_r
0001a35c g     F .text	0000007c memcmp
0000fe64 g     F .text	00000020 OS_Dummy
00017208 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000326f8 g       *ABS*	00000000 __alt_stack_base
00017258 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00018450 g     F .text	0000005c alt_up_irda_enable_read_interrupt
00003ecc g     F .text	00000154 __swsetup_r
00030b74 g     O .bss	000001e0 OSQTbl
0000c588 g     F .text	000008e8 .hidden __divdf3
00005d70 g     F .text	00000118 __sfp
000087b4 g     F .text	00000078 __copybits
0001b944 g     O .rwdata	00000408 __malloc_av_
00005ebc g     F .text	00000004 __sinit_lock_release
0001f374 g     O .bss	00000004 OSTCBHighRdy
0000d0c8 g     F .text	00000718 .hidden __muldf3
00008ee4 g     F .text	00000054 __sread
0001f378 g     O .bss	00000004 OSQFreeList
00018ee8 g     F .text	00000060 alt_up_rs232_disable_read_interrupt
000293d4 g     O .bss	00002000 task_read_keys_stk
0001a000 g     F .text	00000108 alt_find_file
000193a4 g     F .text	000000a4 alt_dev_llist_insert
0000eda4 g     F .text	00000120 __malloc_lock
00001a44 g     F .text	00000028 _fprintf_r
0000ea9c g     F .text	000000b0 sbrk
0000f0b0 g     F .text	00000140 OSEventNameSet
00005ac4 g     F .text	0000005c _fflush_r
0000a7f8 g     F .text	000000c4 _calloc_r
0001f37c g     O .bss	00000001 OSRdyGrp
00000910 g     F .text	00000548 Task_read_KEYs
0001f2b8 g       *ABS*	00000000 __bss_start
00007794 g     F .text	00000128 memset
0001f2ec g     O .bss	00000001 err
00001580 g     F .text	00000338 main
0001f338 g     O .bss	00000004 alt_envp
0001f31c g     O .bss	00000004 __malloc_max_total_mem
000171a8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000ae78 g     F .text	00000018 __swbuf
0001b118 g     O .rodata	00000100 OSUnMapTbl
0001d2e2 g     O .rwdata	00000002 OSSemEn
0001823c g     F .text	0000008c alt_up_character_lcd_shift_cursor
00012028 g     F .text	00000394 OSFlagPost
0001f2f0 g     O .bss	00000004 SEM_state_change
00009018 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0000a9ac g     F .text	00000014 fclose
0001001c g     F .text	00000110 OS_EventTaskWait
00018c64 g     F .text	00000070 alt_up_ps2_read_data_byte
00010c14 g     F .text	000000cc OS_TaskStatStkChk
000156d4 g     F .text	00000150 OSTaskDelReq
00004220 g     F .text	00001688 _dtoa_r
00006c00 g     F .text	0000080c _malloc_r
0000afec g     F .text	00000030 __ascii_wctomb
0001d298 g     O .rwdata	00000004 alt_errno
0000fb04 g     F .text	00000070 OSStart
0000ed44 g     F .text	00000060 __env_unlock
0001f2f4 g     O .bss	00000004 cur_input_idx
000067e0 g     F .text	000000c4 _fwalk
00015b70 g     F .text	000001d4 OSTaskResume
00012df8 g     F .text	000000e8 OSMemQuery
0001d2f4 g     O .rwdata	00000002 OSTaskStatEn
000185cc g     F .text	00000040 alt_up_irda_write_data
0001d2ce g     O .rwdata	00000002 OSMemMax
00013b30 g     F .text	00000170 OSQPostFront
00018e50 g     F .text	0000003c alt_up_ps2_open_dev
0000bb28 g     F .text	00000084 .hidden __divsi3
0001f37d g     O .bss	00000003 OSRdyTbl
0001d2a8 g     O .rwdata	00000002 OSDebugEn
000011e8 g     F .text	00000310 Task_add_del_code
00018048 g     F .text	0000003c alt_up_character_lcd_open_dev
00005ef0 g     F .text	00000124 _malloc_trim_r
000189cc g     F .text	0000005c alt_up_ps2_enable_read_interrupt
0001a6a4 g       *ABS*	00000000 __CTOR_END__
0001d2c0 g     O .rwdata	00000002 OSFlagNodeSize
0001d308 g     O .rwdata	00000002 OSTmrCfgMax
00018010 g     F .text	00000038 alt_up_character_lcd_init
00009020 g     F .text	000000dc strcmp
000130ec g     F .text	000001ac OSQCreate
00015824 g     F .text	00000198 OSTaskNameGet
0001a6a4 g       *ABS*	00000000 __flash_rodata_start
00013ca0 g     F .text	0000020c OSQPostOpt
0000fc24 g     F .text	00000220 OSTimeTick
0001d2f0 g     O .rwdata	00000002 OSTaskMax
0001a6a4 g       *ABS*	00000000 __DTOR_LIST__
00014160 g     F .text	000000d8 OSSemCreate
0001d314 g     O .rwdata	00000002 OSTmrWheelSize
0001f2f8 g     O .bss	00000004 KEY3_flag
000191e0 g     F .text	0000003c alt_up_rs232_open_dev
0000ce70 g     F .text	00000088 .hidden __nedf2
0001d2ea g     O .rwdata	00000002 OSTaskDelEn
00014900 g     F .text	00000110 OSSemQuery
00013298 g     F .text	00000280 OSQDel
0001385c g     F .text	0000016c OSQPendAbort
000167a4 g     F .text	00000038 alt_irq_init
0000ea38 g     F .text	00000064 alt_release_fd
000188a4 g     F .text	00000034 read_data_valid
000183e0 g     F .text	00000038 alt_up_character_lcd_cursor_off
0001affc g     O .rodata	00000100 .hidden __clz_tab
0001f310 g     O .bss	00000004 _PathLocale
00018b64 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
0001a310 g     F .text	00000014 atexit
0000a744 g     F .text	00000060 _write_r
0000f99c g     F .text	0000008c OSSchedLock
00006a20 g     F .text	00000018 setlocale
0001144c g     F .text	00000108 OSFlagCreate
0001d270 g     O .rwdata	00000004 _impure_ptr
0001f330 g     O .bss	00000004 alt_argc
000058a8 g     F .text	0000021c __sflush_r
000194a8 g     F .text	00000060 _do_dtors
00006a0c g     F .text	00000008 __locale_cjk_lang
0001d2ba g     O .rwdata	00000002 OSEventMultiEn
09000000 g       *ABS*	00000000 __alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00011554 g     F .text	00000248 OSFlagDel
0001f380 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
000083e0 g     F .text	00000064 __ulp
00011a10 g     F .text	000005b8 OSFlagPend
0001d306 g     O .rwdata	00000002 OSTmrEn
00005ed8 g     F .text	00000018 __fp_unlock_all
0001d284 g     O .rwdata	00000008 alt_fs_list
00010a14 g     F .text	00000074 OS_StrCopy
00018e8c g     F .text	0000005c alt_up_rs232_enable_read_interrupt
00019008 g     F .text	00000040 alt_up_rs232_write_data
0001d2d0 g     O .rwdata	00000002 OSMemNameSize
00019f9c g     F .text	00000020 OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
0001d2fc g     O .rwdata	00000002 OSTCBPrioTblMax
00006a38 g     F .text	0000000c localeconv
0001d2f8 g     O .rwdata	00000002 OSTaskStatStkChkEn
0001d2cc g     O .rwdata	00000002 OSMemEn
0001d2d6 g     O .rwdata	00000002 OSMutexEn
0001d328 g       *ABS*	00000000 _edata
0001f2fc g     O .bss	00000004 KEY0_flag
000326f8 g       *ABS*	00000000 _end
0001f384 g     O .bss	00000001 OSIntNesting
0000a9c0 g     F .text	00000164 __fputwc
00000248 g       *ABS*	00000000 __ram_exceptions_end
000177fc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000164e0 g     F .text	000001d4 OSTimeDlyResume
0001f300 g     O .bss	00000004 SEM_flash_fail
0002b3d4 g     O .bss	00002000 task_verify_access_code
000118c4 g     F .text	0000014c OSFlagNameSet
00015d44 g     F .text	000001c0 OSTaskStkChk
0001d2d2 g     O .rwdata	00000002 OSMemSize
00008f40 g     F .text	0000007c __swrite
0001d27c g     O .rwdata	00000004 __malloc_trim_threshold
00006a00 g     F .text	0000000c __locale_msgcharset
0001f388 g     O .bss	00000004 OSTCBCur
0001f304 g     O .bss	00000004 timer_code
0001a324 g     F .text	00000038 exit
0001860c g     F .text	00000074 alt_up_irda_read_data
0001d2d4 g     O .rwdata	00000002 OSMemTblSize
000068a4 g     F .text	000000c4 _fwalk_reent
00018904 g     F .text	000000c8 alt_up_ps2_init
000081e4 g     F .text	000001fc __mdiff
0002d3d4 g     O .bss	00002000 task_delete_code_stk
0000bbac g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00005eb4 g     F .text	00000004 __sfp_lock_release
0000f800 g     F .text	00000058 OSInit
000160e8 g     F .text	00000124 OSTaskQuery
00018100 g     F .text	00000078 alt_up_character_lcd_string
0001f308 g     O .bss	00000004 SEM_read_PS2
00014008 g     F .text	000000a8 OS_QInit
00010a88 g     F .text	00000054 OS_StrLen
000187a0 g     F .text	0000003c alt_up_irda_open_dev
00012c0c g     F .text	00000114 OSMemNameSet
0001d2ee g     O .rwdata	00000002 OSTaskProfileEn
0001f38c g     O .bss	00000004 OSTime
00030d54 g     O .bss	00000800 OSTaskIdleStk
0001a670 g     F .text	00000034 _exit
0001921c g     F .text	0000012c alt_alarm_start
0001179c g     F .text	00000128 OSFlagNameGet
000166b4 g     F .text	0000005c OSTimeGet
00006a44 g     F .text	000001bc __smakebuf_r
00018afc g     F .text	00000068 alt_up_ps2_wait_for_ack
00001b64 g     F .text	00000098 strlen
00019f1c g     F .text	00000020 OSTaskSwHook
0001998c g     F .text	00000154 open
00031554 g     O .bss	00000b40 OSEventTbl
0000cef8 g     F .text	000000dc .hidden __gedf2
00032094 g     O .bss	00000510 OSTCBTbl
00014a10 g     F .text	00000100 OSSemSet
0001d280 g     O .rwdata	00000004 __wctomb
000091f8 g     F .text	00000018 __sprint_r
00019598 g     F .text	00000034 alt_icache_flush_all
0001f30c g     O .bss	00000004 SEM_read_KEYS
000181c8 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0001d31c g     O .rwdata	00000004 alt_priority_mask
00014238 g     F .text	00000240 OSSemDel
0001f390 g     O .bss	00000004 OSFlagFreeList
0001d2b4 g     O .rwdata	00000002 OSEventNameSize
00003df4 g     F .text	0000001c __vfprintf_internal
0001f394 g     O .bss	00000001 OSStatRdy
000325a4 g     O .bss	00000054 OSTCBPrioTbl
0000b01c g     F .text	0000005c _wctomb_r
0000ec80 g     F .text	000000c4 __env_lock
00018d2c g     F .text	0000008c alt_up_ps2_read_fd
0001d2fa g     O .rwdata	00000002 OSTaskSwHookEn
0000d7e0 g     F .text	000008fc .hidden __subdf3
00018680 g     F .text	00000090 alt_up_irda_read_fd
00007c18 g     F .text	000000b0 __lo0bits
0000103c g     F .text	000000e8 Task_flash_success
0001d320 g     O .rwdata	00000008 alt_alarm_list
0001d2c2 g     O .rwdata	00000002 OSFlagWidth
00019448 g     F .text	00000060 _do_ctors
00018f48 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000af2c g     F .text	000000c0 wcrtomb
0000e380 g     F .text	000000d0 close
0001f340 g     O .bss	00000004 alt_envsem
0001f398 g     O .bss	00000004 OSIdleCtrRun
0000fe44 g     F .text	00000020 OSVersion
0001d30c g     O .rwdata	00000002 OSTmrCfgWheelSize
0000e6b0 g     F .text	00000084 alt_load
0001620c g     F .text	00000070 OS_TaskStkClr
0001d2e6 g     O .rwdata	00000002 OSTaskCreateEn
00010434 g     F .text	00000068 OS_EventWaitListInit
0000ab48 g     F .text	00000080 fputwc
00019fbc g     F .text	00000020 OSTaskIdleHook
00005eb8 g     F .text	00000004 __sinit_lock_acquire
0000798c g     F .text	00000120 __multadd
00015f04 g     F .text	000001e4 OSTaskSuspend
00007964 g     F .text	00000028 _Bfree
00010adc g     F .text	0000005c OS_TaskIdle
0001d312 g     O .rwdata	00000002 OSTmrTblSize
00013eac g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	000f8580 	call	f858 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000f4 	movhi	r2,3
 140:	10897e04 	addi	r2,r2,9720
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000f4 	movhi	r2,3
 158:	10897e04 	addi	r2,r2,9720
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	000f8a40 	call	f8a4 <OSIntExit>
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a84f17 	ldw	r2,-24260(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a84f17 	ldw	r2,-24260(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     248:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     24c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     250:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     254:	d6949b14 	ori	gp,gp,21100
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     258:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     25c:	10bcae14 	ori	r2,r2,62136

    movhi r3, %hi(__bss_end)
     260:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
     264:	18c9be14 	ori	r3,r3,9976

    beq r2, r3, 1f
     268:	10c00326 	beq	r2,r3,278 <_start+0x30>

0:
    stw zero, (r2)
     26c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     274:	10fffd36 	bltu	r2,r3,26c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700026c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     278:	000e6b00 	call	e6b0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     27c:	000e8440 	call	e844 <alt_main>

00000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     280:	003fff06 	br	280 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000280>

00000284 <reset_PS2_input>:

// TODO: Implement Rendouvouz Synchnorization between Task_read_PS2 and
// a new Timer Task.

void reset_PS2_input()
{
     284:	defffe04 	addi	sp,sp,-8
     288:	df000115 	stw	fp,4(sp)
     28c:	df000104 	addi	fp,sp,4
  for (int i = 0; i < MAX_DIGITS; i++)
     290:	e03fff15 	stw	zero,-4(fp)
     294:	00000b06 	br	2c4 <reset_PS2_input+0x40>
    cur_input_code[i] = -1;
     298:	008000b4 	movhi	r2,2
     29c:	10ace604 	addi	r2,r2,-19560
     2a0:	e0ffff17 	ldw	r3,-4(fp)
     2a4:	18c7883a 	add	r3,r3,r3
     2a8:	18c7883a 	add	r3,r3,r3
     2ac:	10c5883a 	add	r2,r2,r3
     2b0:	00ffffc4 	movi	r3,-1
     2b4:	10c00015 	stw	r3,0(r2)
// TODO: Implement Rendouvouz Synchnorization between Task_read_PS2 and
// a new Timer Task.

void reset_PS2_input()
{
  for (int i = 0; i < MAX_DIGITS; i++)
     2b8:	e0bfff17 	ldw	r2,-4(fp)
     2bc:	10800044 	addi	r2,r2,1
     2c0:	e0bfff15 	stw	r2,-4(fp)
     2c4:	e0bfff17 	ldw	r2,-4(fp)
     2c8:	10800110 	cmplti	r2,r2,4
     2cc:	103ff21e 	bne	r2,zero,298 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000298>
    cur_input_code[i] = -1;

  cur_input_idx = 0;
     2d0:	d0282215 	stw	zero,-24440(gp)
}
     2d4:	0001883a 	nop
     2d8:	e037883a 	mov	sp,fp
     2dc:	df000017 	ldw	fp,0(sp)
     2e0:	dec00104 	addi	sp,sp,4
     2e4:	f800283a 	ret

000002e8 <Task_read_PS2>:

/* Tasks Implementation */
void Task_read_PS2(void *pdata)
{
     2e8:	defff604 	addi	sp,sp,-40
     2ec:	dfc00915 	stw	ra,36(sp)
     2f0:	df000815 	stw	fp,32(sp)
     2f4:	df000804 	addi	fp,sp,32
     2f8:	e13fff15 	stw	r4,-4(fp)

  debug("Started: Task_read_PS2");
     2fc:	d0a00117 	ldw	r2,-32764(gp)
     300:	10800317 	ldw	r2,12(r2)
     304:	01c01804 	movi	r7,96
     308:	018000b4 	movhi	r6,2
     30c:	31a9a904 	addi	r6,r6,-22876
     310:	014000b4 	movhi	r5,2
     314:	2969ad04 	addi	r5,r5,-22860
     318:	1009883a 	mov	r4,r2
     31c:	0001a6c0 	call	1a6c <fprintf>

  int PS2_data, RAVAIL;
  *(PS2_ptr) = 0xFF; // reset PS/2
     320:	00bfc834 	movhi	r2,65312
     324:	10804004 	addi	r2,r2,256
     328:	00c03fc4 	movi	r3,255
     32c:	10c00015 	stw	r3,0(r2)

  flag = 0;
     330:	d0281615 	stw	zero,-24488(gp)

  while (1)
  {
    debug("Executing Read PS2");
     334:	d0a00117 	ldw	r2,-32764(gp)
     338:	10800317 	ldw	r2,12(r2)
     33c:	01c01a44 	movi	r7,105
     340:	018000b4 	movhi	r6,2
     344:	31a9a904 	addi	r6,r6,-22876
     348:	014000b4 	movhi	r5,2
     34c:	2969b704 	addi	r5,r5,-22820
     350:	1009883a 	mov	r4,r2
     354:	0001a6c0 	call	1a6c <fprintf>

    PS2_data = *(PS2_ptr);                  /* read the Data register in the PS/2 port */
     358:	00bfc834 	movhi	r2,65312
     35c:	10804004 	addi	r2,r2,256
     360:	10800017 	ldw	r2,0(r2)
     364:	e0bffc15 	stw	r2,-16(fp)
    RAVAIL = (PS2_data & 0xFFFF0000) >> 16; /* extract the RAVAIL field */
     368:	e0bffc17 	ldw	r2,-16(fp)
     36c:	1004d43a 	srli	r2,r2,16
     370:	e0bffd15 	stw	r2,-12(fp)

    if (RAVAIL > 0)
     374:	e0bffd17 	ldw	r2,-12(fp)
     378:	0081000e 	bge	zero,r2,77c <Task_read_PS2+0x494>
    {
      char PS2_val = PS2_data & 0xFF;
     37c:	e0bffc17 	ldw	r2,-16(fp)
     380:	e0bffe05 	stb	r2,-8(fp)
      if (PS2_val == -16)
     384:	e0bffe07 	ldb	r2,-8(fp)
     388:	10bffc18 	cmpnei	r2,r2,-16
     38c:	1000051e 	bne	r2,zero,3a4 <Task_read_PS2+0xbc>
      {
        flag = 1;
     390:	00800044 	movi	r2,1
     394:	d0a81615 	stw	r2,-24488(gp)
        PS2_num = -1; /* resetting PS2 num press */
     398:	00bfffc4 	movi	r2,-1
     39c:	d0a81315 	stw	r2,-24500(gp)
     3a0:	0000f606 	br	77c <Task_read_PS2+0x494>
      }
      else if (flag == 1)
     3a4:	d0a81617 	ldw	r2,-24488(gp)
     3a8:	10800058 	cmpnei	r2,r2,1
     3ac:	1000f31e 	bne	r2,zero,77c <Task_read_PS2+0x494>
      {
        flag = 0;
     3b0:	d0281615 	stw	zero,-24488(gp)

        switch (PS2_val)
     3b4:	e0bffe07 	ldb	r2,-8(fp)
     3b8:	10bffa84 	addi	r2,r2,-22
     3bc:	10c01a28 	cmpgeui	r3,r2,104
     3c0:	1800e51e 	bne	r3,zero,758 <Task_read_PS2+0x470>
     3c4:	100690ba 	slli	r3,r2,2
     3c8:	00800034 	movhi	r2,0
     3cc:	1080f704 	addi	r2,r2,988
     3d0:	1885883a 	add	r2,r3,r2
     3d4:	10800017 	ldw	r2,0(r2)
     3d8:	1000683a 	jmp	r2
     3dc:	000005a8 	cmpgeui	zero,zero,22
     3e0:	00000758 	cmpnei	zero,zero,29
     3e4:	00000758 	cmpnei	zero,zero,29
     3e8:	00000758 	cmpnei	zero,zero,29
     3ec:	00000758 	cmpnei	zero,zero,29
     3f0:	00000758 	cmpnei	zero,zero,29
     3f4:	00000758 	cmpnei	zero,zero,29
     3f8:	00000758 	cmpnei	zero,zero,29
     3fc:	000005d8 	cmpnei	zero,zero,23
     400:	00000758 	cmpnei	zero,zero,29
     404:	00000758 	cmpnei	zero,zero,29
     408:	00000758 	cmpnei	zero,zero,29
     40c:	00000758 	cmpnei	zero,zero,29
     410:	00000758 	cmpnei	zero,zero,29
     414:	00000758 	cmpnei	zero,zero,29
     418:	00000638 	rdprs	zero,zero,24
     41c:	00000608 	cmpgei	zero,zero,24
     420:	00000758 	cmpnei	zero,zero,29
     424:	00000758 	cmpnei	zero,zero,29
     428:	00000758 	cmpnei	zero,zero,29
     42c:	00000758 	cmpnei	zero,zero,29
     430:	00000758 	cmpnei	zero,zero,29
     434:	00000758 	cmpnei	zero,zero,29
     438:	00000758 	cmpnei	zero,zero,29
     43c:	00000668 	cmpgeui	zero,zero,25
     440:	00000758 	cmpnei	zero,zero,29
     444:	00000758 	cmpnei	zero,zero,29
     448:	00000758 	cmpnei	zero,zero,29
     44c:	00000758 	cmpnei	zero,zero,29
     450:	00000758 	cmpnei	zero,zero,29
     454:	00000758 	cmpnei	zero,zero,29
     458:	00000758 	cmpnei	zero,zero,29
     45c:	00000698 	cmpnei	zero,zero,26
     460:	00000758 	cmpnei	zero,zero,29
     464:	00000758 	cmpnei	zero,zero,29
     468:	00000758 	cmpnei	zero,zero,29
     46c:	00000758 	cmpnei	zero,zero,29
     470:	00000758 	cmpnei	zero,zero,29
     474:	00000758 	cmpnei	zero,zero,29
     478:	000006c8 	cmpgei	zero,zero,27
     47c:	000006f8 	rdprs	zero,zero,27
     480:	00000758 	cmpnei	zero,zero,29
     484:	00000758 	cmpnei	zero,zero,29
     488:	00000758 	cmpnei	zero,zero,29
     48c:	00000758 	cmpnei	zero,zero,29
     490:	00000758 	cmpnei	zero,zero,29
     494:	00000758 	cmpnei	zero,zero,29
     498:	0000057c 	xorhi	zero,zero,21
     49c:	00000728 	cmpgeui	zero,zero,28
     4a0:	00000758 	cmpnei	zero,zero,29
     4a4:	00000758 	cmpnei	zero,zero,29
     4a8:	00000758 	cmpnei	zero,zero,29
     4ac:	00000758 	cmpnei	zero,zero,29
     4b0:	00000758 	cmpnei	zero,zero,29
     4b4:	00000758 	cmpnei	zero,zero,29
     4b8:	00000758 	cmpnei	zero,zero,29
     4bc:	00000758 	cmpnei	zero,zero,29
     4c0:	00000758 	cmpnei	zero,zero,29
     4c4:	00000758 	cmpnei	zero,zero,29
     4c8:	00000758 	cmpnei	zero,zero,29
     4cc:	00000758 	cmpnei	zero,zero,29
     4d0:	00000758 	cmpnei	zero,zero,29
     4d4:	00000758 	cmpnei	zero,zero,29
     4d8:	00000758 	cmpnei	zero,zero,29
     4dc:	00000758 	cmpnei	zero,zero,29
     4e0:	00000758 	cmpnei	zero,zero,29
     4e4:	00000758 	cmpnei	zero,zero,29
     4e8:	00000758 	cmpnei	zero,zero,29
     4ec:	00000758 	cmpnei	zero,zero,29
     4f0:	00000758 	cmpnei	zero,zero,29
     4f4:	00000758 	cmpnei	zero,zero,29
     4f8:	00000758 	cmpnei	zero,zero,29
     4fc:	00000758 	cmpnei	zero,zero,29
     500:	00000758 	cmpnei	zero,zero,29
     504:	00000758 	cmpnei	zero,zero,29
     508:	00000758 	cmpnei	zero,zero,29
     50c:	00000758 	cmpnei	zero,zero,29
     510:	00000758 	cmpnei	zero,zero,29
     514:	00000758 	cmpnei	zero,zero,29
     518:	00000758 	cmpnei	zero,zero,29
     51c:	00000758 	cmpnei	zero,zero,29
     520:	00000758 	cmpnei	zero,zero,29
     524:	00000758 	cmpnei	zero,zero,29
     528:	000005a8 	cmpgeui	zero,zero,22
     52c:	00000758 	cmpnei	zero,zero,29
     530:	00000638 	rdprs	zero,zero,24
     534:	000006c8 	cmpgei	zero,zero,27
     538:	00000758 	cmpnei	zero,zero,29
     53c:	00000758 	cmpnei	zero,zero,29
     540:	00000758 	cmpnei	zero,zero,29
     544:	0000057c 	xorhi	zero,zero,21
     548:	00000758 	cmpnei	zero,zero,29
     54c:	000005d8 	cmpnei	zero,zero,23
     550:	00000668 	cmpgeui	zero,zero,25
     554:	00000698 	cmpnei	zero,zero,26
     558:	000006f8 	rdprs	zero,zero,27
     55c:	00000758 	cmpnei	zero,zero,29
     560:	00000758 	cmpnei	zero,zero,29
     564:	00000758 	cmpnei	zero,zero,29
     568:	00000758 	cmpnei	zero,zero,29
     56c:	00000608 	cmpgei	zero,zero,24
     570:	00000758 	cmpnei	zero,zero,29
     574:	00000758 	cmpnei	zero,zero,29
     578:	00000728 	cmpgeui	zero,zero,28
        {
        case 69:
        case 112:
          PS2_num = 0;
     57c:	d0281315 	stw	zero,-24500(gp)
          debug("0 pressed");
     580:	d0a00117 	ldw	r2,-32764(gp)
     584:	10800317 	ldw	r2,12(r2)
     588:	01c01fc4 	movi	r7,127
     58c:	018000b4 	movhi	r6,2
     590:	31a9a904 	addi	r6,r6,-22876
     594:	014000b4 	movhi	r5,2
     598:	2969c004 	addi	r5,r5,-22784
     59c:	1009883a 	mov	r4,r2
     5a0:	0001a6c0 	call	1a6c <fprintf>
          break;
     5a4:	00007506 	br	77c <Task_read_PS2+0x494>
        case 22:
        case 105:
          PS2_num = 1;
     5a8:	00800044 	movi	r2,1
     5ac:	d0a81315 	stw	r2,-24500(gp)
          debug("1 pressed");
     5b0:	d0a00117 	ldw	r2,-32764(gp)
     5b4:	10800317 	ldw	r2,12(r2)
     5b8:	01c02104 	movi	r7,132
     5bc:	018000b4 	movhi	r6,2
     5c0:	31a9a904 	addi	r6,r6,-22876
     5c4:	014000b4 	movhi	r5,2
     5c8:	2969c604 	addi	r5,r5,-22760
     5cc:	1009883a 	mov	r4,r2
     5d0:	0001a6c0 	call	1a6c <fprintf>
          break;
     5d4:	00006906 	br	77c <Task_read_PS2+0x494>
        case 30:
        case 114:
          PS2_num = 2;
     5d8:	00800084 	movi	r2,2
     5dc:	d0a81315 	stw	r2,-24500(gp)
          debug("2 pressed");
     5e0:	d0a00117 	ldw	r2,-32764(gp)
     5e4:	10800317 	ldw	r2,12(r2)
     5e8:	01c02244 	movi	r7,137
     5ec:	018000b4 	movhi	r6,2
     5f0:	31a9a904 	addi	r6,r6,-22876
     5f4:	014000b4 	movhi	r5,2
     5f8:	2969cc04 	addi	r5,r5,-22736
     5fc:	1009883a 	mov	r4,r2
     600:	0001a6c0 	call	1a6c <fprintf>
          break;
     604:	00005d06 	br	77c <Task_read_PS2+0x494>
        case 38:
        case 122:
          PS2_num = 3;
     608:	008000c4 	movi	r2,3
     60c:	d0a81315 	stw	r2,-24500(gp)
          debug("3 pressed");
     610:	d0a00117 	ldw	r2,-32764(gp)
     614:	10800317 	ldw	r2,12(r2)
     618:	01c02384 	movi	r7,142
     61c:	018000b4 	movhi	r6,2
     620:	31a9a904 	addi	r6,r6,-22876
     624:	014000b4 	movhi	r5,2
     628:	2969d204 	addi	r5,r5,-22712
     62c:	1009883a 	mov	r4,r2
     630:	0001a6c0 	call	1a6c <fprintf>
          break;
     634:	00005106 	br	77c <Task_read_PS2+0x494>
        case 37:
        case 107:
          PS2_num = 4;
     638:	00800104 	movi	r2,4
     63c:	d0a81315 	stw	r2,-24500(gp)
          debug("4 pressed");
     640:	d0a00117 	ldw	r2,-32764(gp)
     644:	10800317 	ldw	r2,12(r2)
     648:	01c024c4 	movi	r7,147
     64c:	018000b4 	movhi	r6,2
     650:	31a9a904 	addi	r6,r6,-22876
     654:	014000b4 	movhi	r5,2
     658:	2969d804 	addi	r5,r5,-22688
     65c:	1009883a 	mov	r4,r2
     660:	0001a6c0 	call	1a6c <fprintf>
          break;
     664:	00004506 	br	77c <Task_read_PS2+0x494>
        case 46:
        case 115:
          PS2_num = 5;
     668:	00800144 	movi	r2,5
     66c:	d0a81315 	stw	r2,-24500(gp)
          debug("5 pressed");
     670:	d0a00117 	ldw	r2,-32764(gp)
     674:	10800317 	ldw	r2,12(r2)
     678:	01c02604 	movi	r7,152
     67c:	018000b4 	movhi	r6,2
     680:	31a9a904 	addi	r6,r6,-22876
     684:	014000b4 	movhi	r5,2
     688:	2969de04 	addi	r5,r5,-22664
     68c:	1009883a 	mov	r4,r2
     690:	0001a6c0 	call	1a6c <fprintf>
          break;
     694:	00003906 	br	77c <Task_read_PS2+0x494>
        case 54:
        case 116:
          PS2_num = 6;
     698:	00800184 	movi	r2,6
     69c:	d0a81315 	stw	r2,-24500(gp)
          debug("6 pressed");
     6a0:	d0a00117 	ldw	r2,-32764(gp)
     6a4:	10800317 	ldw	r2,12(r2)
     6a8:	01c02744 	movi	r7,157
     6ac:	018000b4 	movhi	r6,2
     6b0:	31a9a904 	addi	r6,r6,-22876
     6b4:	014000b4 	movhi	r5,2
     6b8:	2969e404 	addi	r5,r5,-22640
     6bc:	1009883a 	mov	r4,r2
     6c0:	0001a6c0 	call	1a6c <fprintf>
          break;
     6c4:	00002d06 	br	77c <Task_read_PS2+0x494>
        case 61:
        case 108:
          PS2_num = 7;
     6c8:	008001c4 	movi	r2,7
     6cc:	d0a81315 	stw	r2,-24500(gp)
          debug("7 pressed");
     6d0:	d0a00117 	ldw	r2,-32764(gp)
     6d4:	10800317 	ldw	r2,12(r2)
     6d8:	01c02884 	movi	r7,162
     6dc:	018000b4 	movhi	r6,2
     6e0:	31a9a904 	addi	r6,r6,-22876
     6e4:	014000b4 	movhi	r5,2
     6e8:	2969ea04 	addi	r5,r5,-22616
     6ec:	1009883a 	mov	r4,r2
     6f0:	0001a6c0 	call	1a6c <fprintf>
          break;
     6f4:	00002106 	br	77c <Task_read_PS2+0x494>
        case 62:
        case 117:
          PS2_num = 8;
     6f8:	00800204 	movi	r2,8
     6fc:	d0a81315 	stw	r2,-24500(gp)
          debug("8 pressed");
     700:	d0a00117 	ldw	r2,-32764(gp)
     704:	10800317 	ldw	r2,12(r2)
     708:	01c029c4 	movi	r7,167
     70c:	018000b4 	movhi	r6,2
     710:	31a9a904 	addi	r6,r6,-22876
     714:	014000b4 	movhi	r5,2
     718:	2969f004 	addi	r5,r5,-22592
     71c:	1009883a 	mov	r4,r2
     720:	0001a6c0 	call	1a6c <fprintf>
          break;
     724:	00001506 	br	77c <Task_read_PS2+0x494>
        case 70:
        case 125:
          PS2_num = 9;
     728:	00800244 	movi	r2,9
     72c:	d0a81315 	stw	r2,-24500(gp)
          debug("9 pressed");
     730:	d0a00117 	ldw	r2,-32764(gp)
     734:	10800317 	ldw	r2,12(r2)
     738:	01c02b04 	movi	r7,172
     73c:	018000b4 	movhi	r6,2
     740:	31a9a904 	addi	r6,r6,-22876
     744:	014000b4 	movhi	r5,2
     748:	2969f604 	addi	r5,r5,-22568
     74c:	1009883a 	mov	r4,r2
     750:	0001a6c0 	call	1a6c <fprintf>
          break;
     754:	00000906 	br	77c <Task_read_PS2+0x494>
        default:
          debug("Nothing Pressed");
     758:	d0a00117 	ldw	r2,-32764(gp)
     75c:	10800317 	ldw	r2,12(r2)
     760:	01c02bc4 	movi	r7,175
     764:	018000b4 	movhi	r6,2
     768:	31a9a904 	addi	r6,r6,-22876
     76c:	014000b4 	movhi	r5,2
     770:	2969fc04 	addi	r5,r5,-22544
     774:	1009883a 	mov	r4,r2
     778:	0001a6c0 	call	1a6c <fprintf>
        }
      }
    }

    debug("Timer Code: %d", timer_code);
     77c:	d0a00117 	ldw	r2,-32764(gp)
     780:	10c00317 	ldw	r3,12(r2)
     784:	d0a82617 	ldw	r2,-24424(gp)
     788:	d8800015 	stw	r2,0(sp)
     78c:	01c02d04 	movi	r7,180
     790:	018000b4 	movhi	r6,2
     794:	31a9a904 	addi	r6,r6,-22876
     798:	014000b4 	movhi	r5,2
     79c:	296a0404 	addi	r5,r5,-22512
     7a0:	1809883a 	mov	r4,r3
     7a4:	0001a6c0 	call	1a6c <fprintf>

    if ((state == CODE || state == PROG) && PS2_num != -1)
     7a8:	d0a81a17 	ldw	r2,-24472(gp)
     7ac:	10800120 	cmpeqi	r2,r2,4
     7b0:	1000031e 	bne	r2,zero,7c0 <Task_read_PS2+0x4d8>
     7b4:	d0a81a17 	ldw	r2,-24472(gp)
     7b8:	10800158 	cmpnei	r2,r2,5
     7bc:	1000241e 	bne	r2,zero,850 <Task_read_PS2+0x568>
     7c0:	d0a81317 	ldw	r2,-24500(gp)
     7c4:	10bfffe0 	cmpeqi	r2,r2,-1
     7c8:	1000211e 	bne	r2,zero,850 <Task_read_PS2+0x568>
    {
      if (cur_input_idx % 2 == 1)
     7cc:	d0e82217 	ldw	r3,-24440(gp)
     7d0:	00a00034 	movhi	r2,32768
     7d4:	10800044 	addi	r2,r2,1
     7d8:	1884703a 	and	r2,r3,r2
     7dc:	1000040e 	bge	r2,zero,7f0 <Task_read_PS2+0x508>
     7e0:	10bfffc4 	addi	r2,r2,-1
     7e4:	00ffff84 	movi	r3,-2
     7e8:	10c4b03a 	or	r2,r2,r3
     7ec:	10800044 	addi	r2,r2,1
     7f0:	10800058 	cmpnei	r2,r2,1
     7f4:	10000a1e 	bne	r2,zero,820 <Task_read_PS2+0x538>
        cur_input_code[cur_input_idx++] = timer_code;
     7f8:	d0e82217 	ldw	r3,-24440(gp)
     7fc:	18800044 	addi	r2,r3,1
     800:	d0a82215 	stw	r2,-24440(gp)
     804:	d1282617 	ldw	r4,-24424(gp)
     808:	008000b4 	movhi	r2,2
     80c:	10ace604 	addi	r2,r2,-19560
     810:	18c7883a 	add	r3,r3,r3
     814:	18c7883a 	add	r3,r3,r3
     818:	10c5883a 	add	r2,r2,r3
     81c:	11000015 	stw	r4,0(r2)

      cur_input_code[cur_input_idx++] = PS2_num;
     820:	d0e82217 	ldw	r3,-24440(gp)
     824:	18800044 	addi	r2,r3,1
     828:	d0a82215 	stw	r2,-24440(gp)
     82c:	d1281317 	ldw	r4,-24500(gp)
     830:	008000b4 	movhi	r2,2
     834:	10ace604 	addi	r2,r2,-19560
     838:	18c7883a 	add	r3,r3,r3
     83c:	18c7883a 	add	r3,r3,r3
     840:	10c5883a 	add	r2,r2,r3
     844:	11000015 	stw	r4,0(r2)
      PS2_num = -1; /* resetting PS2_num */
     848:	00bfffc4 	movi	r2,-1
     84c:	d0a81315 	stw	r2,-24500(gp)
    }

    if (cur_input_idx >= MAX_DIGITS)
     850:	d0a82217 	ldw	r2,-24440(gp)
     854:	10800110 	cmplti	r2,r2,4
     858:	1000011e 	bne	r2,zero,860 <Task_read_PS2+0x578>
      cur_input_idx = 0;
     85c:	d0282215 	stw	zero,-24440(gp)

    debug("Current Input Array: %d %d %d %d",
     860:	d0a00117 	ldw	r2,-32764(gp)
     864:	12000317 	ldw	r8,12(r2)
     868:	008000b4 	movhi	r2,2
     86c:	10ace604 	addi	r2,r2,-19560
     870:	10c00017 	ldw	r3,0(r2)
     874:	008000b4 	movhi	r2,2
     878:	10ace604 	addi	r2,r2,-19560
     87c:	11000117 	ldw	r4,4(r2)
     880:	008000b4 	movhi	r2,2
     884:	10ace604 	addi	r2,r2,-19560
     888:	11400217 	ldw	r5,8(r2)
     88c:	008000b4 	movhi	r2,2
     890:	10ace604 	addi	r2,r2,-19560
     894:	10800317 	ldw	r2,12(r2)
     898:	d8800315 	stw	r2,12(sp)
     89c:	d9400215 	stw	r5,8(sp)
     8a0:	d9000115 	stw	r4,4(sp)
     8a4:	d8c00015 	stw	r3,0(sp)
     8a8:	01c030c4 	movi	r7,195
     8ac:	018000b4 	movhi	r6,2
     8b0:	31a9a904 	addi	r6,r6,-22876
     8b4:	014000b4 	movhi	r5,2
     8b8:	296a0c04 	addi	r5,r5,-22480
     8bc:	4009883a 	mov	r4,r8
     8c0:	0001a6c0 	call	1a6c <fprintf>
          cur_input_code[0], cur_input_code[1], cur_input_code[2], cur_input_code[3]);

    if (state == PROG && KEY1_flag && cur_input_code[MIN_DIGITS - 1] != -1)
     8c4:	d0a81a17 	ldw	r2,-24472(gp)
     8c8:	10800158 	cmpnei	r2,r2,5
     8cc:	10000a1e 	bne	r2,zero,8f8 <Task_read_PS2+0x610>
     8d0:	d0a81f17 	ldw	r2,-24452(gp)
     8d4:	10000826 	beq	r2,zero,8f8 <Task_read_PS2+0x610>
     8d8:	008000b4 	movhi	r2,2
     8dc:	10ace604 	addi	r2,r2,-19560
     8e0:	10800317 	ldw	r2,12(r2)
     8e4:	10bfffe0 	cmpeqi	r2,r2,-1
     8e8:	1000031e 	bne	r2,zero,8f8 <Task_read_PS2+0x610>
      OSSemPost(SEM_read_PS2_done);
     8ec:	d0a81b17 	ldw	r2,-24468(gp)
     8f0:	1009883a 	mov	r4,r2
     8f4:	00147f00 	call	147f0 <OSSemPost>

    OSTimeDlyHMSM(0, 0, 0, 300);
     8f8:	01c04b04 	movi	r7,300
     8fc:	000d883a 	mov	r6,zero
     900:	000b883a 	mov	r5,zero
     904:	0009883a 	mov	r4,zero
     908:	00163800 	call	16380 <OSTimeDlyHMSM>
  }
     90c:	003e8906 	br	334 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000334>

00000910 <Task_read_KEYs>:
}

void Task_read_KEYs(void *pdata)
{
     910:	defff904 	addi	sp,sp,-28
     914:	dfc00615 	stw	ra,24(sp)
     918:	df000515 	stw	fp,20(sp)
     91c:	df000504 	addi	fp,sp,20
     920:	e13fff15 	stw	r4,-4(fp)
  debug("Started: Task_read_KEYs");
     924:	d0a00117 	ldw	r2,-32764(gp)
     928:	10800317 	ldw	r2,12(r2)
     92c:	01c03384 	movi	r7,206
     930:	018000b4 	movhi	r6,2
     934:	31a9a904 	addi	r6,r6,-22876
     938:	014000b4 	movhi	r5,2
     93c:	296a1804 	addi	r5,r5,-22432
     940:	1009883a 	mov	r4,r2
     944:	0001a6c0 	call	1a6c <fprintf>

  while (1)
  {
    OSSemPend(SEM_read_KEYS, 0, &err);
     948:	d0a82817 	ldw	r2,-24416(gp)
     94c:	d1a82004 	addi	r6,gp,-24448
     950:	000b883a 	mov	r5,zero
     954:	1009883a 	mov	r4,r2
     958:	00144780 	call	14478 <OSSemPend>
    // debug("%u: \tState: %s", OSTime, Get_state_name(state));
    /***************************************************/
    /* Signaling Semaphores used for Activity Control */
    /***************************************************/
    if (state == LOCK || state == CODE)
     95c:	d0a81a17 	ldw	r2,-24472(gp)
     960:	108000e0 	cmpeqi	r2,r2,3
     964:	1000031e 	bne	r2,zero,974 <Task_read_KEYs+0x64>
     968:	d0a81a17 	ldw	r2,-24472(gp)
     96c:	10800118 	cmpnei	r2,r2,4
     970:	1000031e 	bne	r2,zero,980 <Task_read_KEYs+0x70>
      OSSemPost(SEM_read_PS2);
     974:	d0a82717 	ldw	r2,-24420(gp)
     978:	1009883a 	mov	r4,r2
     97c:	00147f00 	call	147f0 <OSSemPost>

    if (state == CODE || state == PROG || state == CLOSE || state || VERIFIED)
      OSSemPost(SEM_timer_start);
     980:	d0a81917 	ldw	r2,-24476(gp)
     984:	1009883a 	mov	r4,r2
     988:	00147f00 	call	147f0 <OSSemPost>

    /* OPEN & CLOSE STATE LED */
    if (state == CLOSE)
     98c:	d0a81a17 	ldw	r2,-24472(gp)
     990:	10800098 	cmpnei	r2,r2,2
     994:	10000e1e 	bne	r2,zero,9d0 <Task_read_KEYs+0xc0>
    {
      *(LEDG_ptr) |= 0x01;
     998:	00bfc834 	movhi	r2,65312
     99c:	10800404 	addi	r2,r2,16
     9a0:	00ffc834 	movhi	r3,65312
     9a4:	18c00404 	addi	r3,r3,16
     9a8:	18c00017 	ldw	r3,0(r3)
     9ac:	18c00054 	ori	r3,r3,1
     9b0:	10c00015 	stw	r3,0(r2)
      *(LEDR_ptr) &= ~0x01;
     9b4:	00bfc834 	movhi	r2,65312
     9b8:	00ffc834 	movhi	r3,65312
     9bc:	19000017 	ldw	r4,0(r3)
     9c0:	00ffff84 	movi	r3,-2
     9c4:	20c6703a 	and	r3,r4,r3
     9c8:	10c00015 	stw	r3,0(r2)
     9cc:	00001006 	br	a10 <Task_read_KEYs+0x100>
    }
    else if (state == OPEN)
     9d0:	d0a81a17 	ldw	r2,-24472(gp)
     9d4:	10800058 	cmpnei	r2,r2,1
     9d8:	10000d1e 	bne	r2,zero,a10 <Task_read_KEYs+0x100>
    {
      *(LEDG_ptr) &= ~0x01;
     9dc:	00bfc834 	movhi	r2,65312
     9e0:	10800404 	addi	r2,r2,16
     9e4:	00ffc834 	movhi	r3,65312
     9e8:	18c00404 	addi	r3,r3,16
     9ec:	19000017 	ldw	r4,0(r3)
     9f0:	00ffff84 	movi	r3,-2
     9f4:	20c6703a 	and	r3,r4,r3
     9f8:	10c00015 	stw	r3,0(r2)
      *(LEDR_ptr) |= 0x01;
     9fc:	00bfc834 	movhi	r2,65312
     a00:	00ffc834 	movhi	r3,65312
     a04:	18c00017 	ldw	r3,0(r3)
     a08:	18c00054 	ori	r3,r3,1
     a0c:	10c00015 	stw	r3,0(r2)

    /**************************************************/
    /**************************************************/
    

    if (KEY1_flag)
     a10:	d0a81f17 	ldw	r2,-24452(gp)
     a14:	10000126 	beq	r2,zero,a1c <Task_read_KEYs+0x10c>
      KEY1_flag = 0;
     a18:	d0281f15 	stw	zero,-24452(gp)

    Check_KEYs(0, &KEY1_flag, 0, 0);
     a1c:	000f883a 	mov	r7,zero
     a20:	000d883a 	mov	r6,zero
     a24:	d1681f04 	addi	r5,gp,-24452
     a28:	0009883a 	mov	r4,zero
     a2c:	00019980 	call	1998 <Check_KEYs>

    if (KEY1_flag)
     a30:	d0a81f17 	ldw	r2,-24452(gp)
     a34:	10000b26 	beq	r2,zero,a64 <Task_read_KEYs+0x154>
      debug("KEY1_flag: %d", KEY1_flag);
     a38:	d0a00117 	ldw	r2,-32764(gp)
     a3c:	10c00317 	ldw	r3,12(r2)
     a40:	d0a81f17 	ldw	r2,-24452(gp)
     a44:	d8800015 	stw	r2,0(sp)
     a48:	01c03cc4 	movi	r7,243
     a4c:	018000b4 	movhi	r6,2
     a50:	31a9a904 	addi	r6,r6,-22876
     a54:	014000b4 	movhi	r5,2
     a58:	296a2204 	addi	r5,r5,-22392
     a5c:	1809883a 	mov	r4,r3
     a60:	0001a6c0 	call	1a6c <fprintf>

    /* Logic for getting to Open State */
    if ((state == INIT && SW0_VALUE == 1) ||
     a64:	d0a81a17 	ldw	r2,-24472(gp)
     a68:	1000051e 	bne	r2,zero,a80 <Task_read_KEYs+0x170>
     a6c:	00bfc834 	movhi	r2,65312
     a70:	10801004 	addi	r2,r2,64
     a74:	10800017 	ldw	r2,0(r2)
     a78:	1080004c 	andi	r2,r2,1
     a7c:	1000101e 	bne	r2,zero,ac0 <Task_read_KEYs+0x1b0>
        (state == ADD_CODE && KEY1_flag) ||
     a80:	d0a81a17 	ldw	r2,-24472(gp)

    if (KEY1_flag)
      debug("KEY1_flag: %d", KEY1_flag);

    /* Logic for getting to Open State */
    if ((state == INIT && SW0_VALUE == 1) ||
     a84:	108001d8 	cmpnei	r2,r2,7
     a88:	1000021e 	bne	r2,zero,a94 <Task_read_KEYs+0x184>
        (state == ADD_CODE && KEY1_flag) ||
     a8c:	d0a81f17 	ldw	r2,-24452(gp)
     a90:	10000b1e 	bne	r2,zero,ac0 <Task_read_KEYs+0x1b0>
        ((state == VERIFIED) && (state_timer < 10) && (SW0_VALUE == 1))
     a94:	d0a81a17 	ldw	r2,-24472(gp)
    if (KEY1_flag)
      debug("KEY1_flag: %d", KEY1_flag);

    /* Logic for getting to Open State */
    if ((state == INIT && SW0_VALUE == 1) ||
        (state == ADD_CODE && KEY1_flag) ||
     a98:	10800198 	cmpnei	r2,r2,6
     a9c:	1000131e 	bne	r2,zero,aec <Task_read_KEYs+0x1dc>
        ((state == VERIFIED) && (state_timer < 10) && (SW0_VALUE == 1))
     aa0:	d0a81817 	ldw	r2,-24480(gp)
     aa4:	10800288 	cmpgei	r2,r2,10
     aa8:	1000101e 	bne	r2,zero,aec <Task_read_KEYs+0x1dc>
     aac:	00bfc834 	movhi	r2,65312
     ab0:	10801004 	addi	r2,r2,64
     ab4:	10800017 	ldw	r2,0(r2)
     ab8:	1080004c 	andi	r2,r2,1
     abc:	10000b26 	beq	r2,zero,aec <Task_read_KEYs+0x1dc>
        // TODO: Need to add transition logic from PROG State
    )
    {
      OSSemPend(SEM_state_change, 0, &err);
     ac0:	d0a82117 	ldw	r2,-24444(gp)
     ac4:	d1a82004 	addi	r6,gp,-24448
     ac8:	000b883a 	mov	r5,zero
     acc:	1009883a 	mov	r4,r2
     ad0:	00144780 	call	14478 <OSSemPend>
      state = OPEN;
     ad4:	00800044 	movi	r2,1
     ad8:	d0a81a15 	stw	r2,-24472(gp)
      state_timer = 0;
     adc:	d0281815 	stw	zero,-24480(gp)
      OSSemPost(SEM_state_change);
     ae0:	d0a82117 	ldw	r2,-24444(gp)
     ae4:	1009883a 	mov	r4,r2
     ae8:	00147f00 	call	147f0 <OSSemPost>
    }

    /* Logic for moving to CLOSE State */
    if (state == INIT && SW0_VALUE == 0)
     aec:	d0a81a17 	ldw	r2,-24472(gp)
     af0:	1000101e 	bne	r2,zero,b34 <Task_read_KEYs+0x224>
     af4:	00bfc834 	movhi	r2,65312
     af8:	10801004 	addi	r2,r2,64
     afc:	10800017 	ldw	r2,0(r2)
     b00:	1080004c 	andi	r2,r2,1
     b04:	10000b1e 	bne	r2,zero,b34 <Task_read_KEYs+0x224>
    {
      OSSemPend(SEM_state_change, 0, &err);
     b08:	d0a82117 	ldw	r2,-24444(gp)
     b0c:	d1a82004 	addi	r6,gp,-24448
     b10:	000b883a 	mov	r5,zero
     b14:	1009883a 	mov	r4,r2
     b18:	00144780 	call	14478 <OSSemPend>
      state = CLOSE;
     b1c:	00800084 	movi	r2,2
     b20:	d0a81a15 	stw	r2,-24472(gp)
      state_timer = 0;
     b24:	d0281815 	stw	zero,-24480(gp)
      OSSemPost(SEM_state_change);
     b28:	d0a82117 	ldw	r2,-24444(gp)
     b2c:	1009883a 	mov	r4,r2
     b30:	00147f00 	call	147f0 <OSSemPost>
    }

    /* Logics for Transitioning to PROG STATE */
    if (state == OPEN && KEY1_flag)
     b34:	d0a81a17 	ldw	r2,-24472(gp)
     b38:	10800058 	cmpnei	r2,r2,1
     b3c:	10000d1e 	bne	r2,zero,b74 <Task_read_KEYs+0x264>
     b40:	d0a81f17 	ldw	r2,-24452(gp)
     b44:	10000b26 	beq	r2,zero,b74 <Task_read_KEYs+0x264>
    {
      OSSemPend(SEM_state_change, 0, &err);
     b48:	d0a82117 	ldw	r2,-24444(gp)
     b4c:	d1a82004 	addi	r6,gp,-24448
     b50:	000b883a 	mov	r5,zero
     b54:	1009883a 	mov	r4,r2
     b58:	00144780 	call	14478 <OSSemPend>
      state = PROG;
     b5c:	00800144 	movi	r2,5
     b60:	d0a81a15 	stw	r2,-24472(gp)
      state_timer = 0;
     b64:	d0281815 	stw	zero,-24480(gp)
      OSSemPost(SEM_state_change);
     b68:	d0a82117 	ldw	r2,-24444(gp)
     b6c:	1009883a 	mov	r4,r2
     b70:	00147f00 	call	147f0 <OSSemPost>
    }
    /* Signalling tasks associated with PROG State */
    if (state == PROG && KEY1_flag)
     b74:	d0a81a17 	ldw	r2,-24472(gp)
     b78:	10800158 	cmpnei	r2,r2,5
     b7c:	1000051e 	bne	r2,zero,b94 <Task_read_KEYs+0x284>
     b80:	d0a81f17 	ldw	r2,-24452(gp)
     b84:	10000326 	beq	r2,zero,b94 <Task_read_KEYs+0x284>
      OSSemPost(SEM_add_code);
     b88:	d0a81e17 	ldw	r2,-24456(gp)
     b8c:	1009883a 	mov	r4,r2
     b90:	00147f00 	call	147f0 <OSSemPost>

    /* Logics for Transitioning to PROG State */
    if (state == OPEN && SW0_VALUE == 1)
     b94:	d0a81a17 	ldw	r2,-24472(gp)
     b98:	10800058 	cmpnei	r2,r2,1
     b9c:	1000101e 	bne	r2,zero,be0 <Task_read_KEYs+0x2d0>
     ba0:	00bfc834 	movhi	r2,65312
     ba4:	10801004 	addi	r2,r2,64
     ba8:	10800017 	ldw	r2,0(r2)
     bac:	1080004c 	andi	r2,r2,1
     bb0:	10000b26 	beq	r2,zero,be0 <Task_read_KEYs+0x2d0>
    {
      OSSemPend(SEM_state_change, 0, &err);
     bb4:	d0a82117 	ldw	r2,-24444(gp)
     bb8:	d1a82004 	addi	r6,gp,-24448
     bbc:	000b883a 	mov	r5,zero
     bc0:	1009883a 	mov	r4,r2
     bc4:	00144780 	call	14478 <OSSemPend>
      state = PROG;
     bc8:	00800144 	movi	r2,5
     bcc:	d0a81a15 	stw	r2,-24472(gp)
      state_timer = 0;
     bd0:	d0281815 	stw	zero,-24480(gp)
      OSSemPost(SEM_state_change);
     bd4:	d0a82117 	ldw	r2,-24444(gp)
     bd8:	1009883a 	mov	r4,r2
     bdc:	00147f00 	call	147f0 <OSSemPost>
    }

    /* Logics for Transitioning to LOCK State */
    if (state == CLOSE && state_timer >= 5)
     be0:	d0a81a17 	ldw	r2,-24472(gp)
     be4:	10800098 	cmpnei	r2,r2,2
     be8:	1000131e 	bne	r2,zero,c38 <Task_read_KEYs+0x328>
     bec:	d0a81817 	ldw	r2,-24480(gp)
     bf0:	10800150 	cmplti	r2,r2,5
     bf4:	1000101e 	bne	r2,zero,c38 <Task_read_KEYs+0x328>
    {
      OSSemPend(SEM_state_change, 0, &err);
     bf8:	d0a82117 	ldw	r2,-24444(gp)
     bfc:	d1a82004 	addi	r6,gp,-24448
     c00:	000b883a 	mov	r5,zero
     c04:	1009883a 	mov	r4,r2
     c08:	00144780 	call	14478 <OSSemPend>
      state = LOCK;
     c0c:	008000c4 	movi	r2,3
     c10:	d0a81a15 	stw	r2,-24472(gp)
      state_timer = 0;
     c14:	d0281815 	stw	zero,-24480(gp)

      OSSemPend(SEM_timer_start, 0, &err); /* pausing state timer task here */
     c18:	d0a81917 	ldw	r2,-24476(gp)
     c1c:	d1a82004 	addi	r6,gp,-24448
     c20:	000b883a 	mov	r5,zero
     c24:	1009883a 	mov	r4,r2
     c28:	00144780 	call	14478 <OSSemPend>
      OSSemPost(SEM_state_change);
     c2c:	d0a82117 	ldw	r2,-24444(gp)
     c30:	1009883a 	mov	r4,r2
     c34:	00147f00 	call	147f0 <OSSemPost>
    }

    /* Logics for Transitioning to CODE State */
    if (state == LOCK && PS2_num != -1)
     c38:	d0a81a17 	ldw	r2,-24472(gp)
     c3c:	108000d8 	cmpnei	r2,r2,3
     c40:	10000e1e 	bne	r2,zero,c7c <Task_read_KEYs+0x36c>
     c44:	d0a81317 	ldw	r2,-24500(gp)
     c48:	10bfffe0 	cmpeqi	r2,r2,-1
     c4c:	10000b1e 	bne	r2,zero,c7c <Task_read_KEYs+0x36c>
    {
      OSSemPend(SEM_state_change, 0, &err);
     c50:	d0a82117 	ldw	r2,-24444(gp)
     c54:	d1a82004 	addi	r6,gp,-24448
     c58:	000b883a 	mov	r5,zero
     c5c:	1009883a 	mov	r4,r2
     c60:	00144780 	call	14478 <OSSemPend>
      state = CODE;
     c64:	00800104 	movi	r2,4
     c68:	d0a81a15 	stw	r2,-24472(gp)
      state_timer = 0;
     c6c:	d0281815 	stw	zero,-24480(gp)
      OSSemPost(SEM_state_change);
     c70:	d0a82117 	ldw	r2,-24444(gp)
     c74:	1009883a 	mov	r4,r2
     c78:	00147f00 	call	147f0 <OSSemPost>
    }

    /* Logics for transitioning to VERIFIED State */
    int matched = 0;
     c7c:	e03ffc15 	stw	zero,-16(fp)

    if (state == CODE && KEY1_flag)
     c80:	d0a81a17 	ldw	r2,-24472(gp)
     c84:	10800118 	cmpnei	r2,r2,4
     c88:	10006a1e 	bne	r2,zero,e34 <Task_read_KEYs+0x524>
     c8c:	d0a81f17 	ldw	r2,-24452(gp)
     c90:	10006826 	beq	r2,zero,e34 <Task_read_KEYs+0x524>
    {

      for (int i = 0; i < MAX_CODES; i++)
     c94:	e03ffd15 	stw	zero,-12(fp)
     c98:	00005906 	br	e00 <Task_read_KEYs+0x4f0>
      {
        for (int j = 0; j < MAX_DIGITS; j++)
     c9c:	e03ffe15 	stw	zero,-8(fp)
     ca0:	00004906 	br	dc8 <Task_read_KEYs+0x4b8>
        {
          if (stored_codes[i][j] != cur_input_code[j] && i >= MAX_CODES && j >= MAX_DIGITS - 1)
     ca4:	008000b4 	movhi	r2,2
     ca8:	10acea04 	addi	r2,r2,-19544
     cac:	e0fffd17 	ldw	r3,-12(fp)
     cb0:	18c7883a 	add	r3,r3,r3
     cb4:	18c9883a 	add	r4,r3,r3
     cb8:	e0fffe17 	ldw	r3,-8(fp)
     cbc:	20c7883a 	add	r3,r4,r3
     cc0:	18c7883a 	add	r3,r3,r3
     cc4:	18c7883a 	add	r3,r3,r3
     cc8:	10c5883a 	add	r2,r2,r3
     ccc:	11000017 	ldw	r4,0(r2)
     cd0:	008000b4 	movhi	r2,2
     cd4:	10ace604 	addi	r2,r2,-19560
     cd8:	e0fffe17 	ldw	r3,-8(fp)
     cdc:	18c7883a 	add	r3,r3,r3
     ce0:	18c7883a 	add	r3,r3,r3
     ce4:	10c5883a 	add	r2,r2,r3
     ce8:	10800017 	ldw	r2,0(r2)
     cec:	20800626 	beq	r4,r2,d08 <Task_read_KEYs+0x3f8>
     cf0:	e0bffd17 	ldw	r2,-12(fp)
     cf4:	10800410 	cmplti	r2,r2,16
     cf8:	1000031e 	bne	r2,zero,d08 <Task_read_KEYs+0x3f8>
     cfc:	e0bffe17 	ldw	r2,-8(fp)
     d00:	108000d0 	cmplti	r2,r2,3
     d04:	10004226 	beq	r2,zero,e10 <Task_read_KEYs+0x500>
            goto fail;

          if (stored_codes[i][j] != cur_input_code[j])
     d08:	008000b4 	movhi	r2,2
     d0c:	10acea04 	addi	r2,r2,-19544
     d10:	e0fffd17 	ldw	r3,-12(fp)
     d14:	18c7883a 	add	r3,r3,r3
     d18:	18c9883a 	add	r4,r3,r3
     d1c:	e0fffe17 	ldw	r3,-8(fp)
     d20:	20c7883a 	add	r3,r4,r3
     d24:	18c7883a 	add	r3,r3,r3
     d28:	18c7883a 	add	r3,r3,r3
     d2c:	10c5883a 	add	r2,r2,r3
     d30:	11000017 	ldw	r4,0(r2)
     d34:	008000b4 	movhi	r2,2
     d38:	10ace604 	addi	r2,r2,-19560
     d3c:	e0fffe17 	ldw	r3,-8(fp)
     d40:	18c7883a 	add	r3,r3,r3
     d44:	18c7883a 	add	r3,r3,r3
     d48:	10c5883a 	add	r2,r2,r3
     d4c:	10800017 	ldw	r2,0(r2)
     d50:	2080191e 	bne	r4,r2,db8 <Task_read_KEYs+0x4a8>
            continue;

          /* if we have reached the last element of the array */
          /* and and all digits matched */
          if (j >= MAX_DIGITS - 1)
     d54:	e0bffe17 	ldw	r2,-8(fp)
     d58:	108000d0 	cmplti	r2,r2,3
     d5c:	1000171e 	bne	r2,zero,dbc <Task_read_KEYs+0x4ac>
          {
            debug("ACCESS CODE MATCHED!!!");
     d60:	d0a00117 	ldw	r2,-32764(gp)
     d64:	10800317 	ldw	r2,12(r2)
     d68:	01c05204 	movi	r7,328
     d6c:	018000b4 	movhi	r6,2
     d70:	31a9a904 	addi	r6,r6,-22876
     d74:	014000b4 	movhi	r5,2
     d78:	296a2904 	addi	r5,r5,-22364
     d7c:	1009883a 	mov	r4,r2
     d80:	0001a6c0 	call	1a6c <fprintf>
            OSSemPend(SEM_state_change, 0, &err);
     d84:	d0a82117 	ldw	r2,-24444(gp)
     d88:	d1a82004 	addi	r6,gp,-24448
     d8c:	000b883a 	mov	r5,zero
     d90:	1009883a 	mov	r4,r2
     d94:	00144780 	call	14478 <OSSemPend>
            state = VERIFIED;
     d98:	00800184 	movi	r2,6
     d9c:	d0a81a15 	stw	r2,-24472(gp)
            OSSemPost(SEM_state_change);
     da0:	d0a82117 	ldw	r2,-24444(gp)
     da4:	1009883a 	mov	r4,r2
     da8:	00147f00 	call	147f0 <OSSemPost>
            matched = 1;
     dac:	00800044 	movi	r2,1
     db0:	e0bffc15 	stw	r2,-16(fp)
            break;
     db4:	00000706 	br	dd4 <Task_read_KEYs+0x4c4>
        {
          if (stored_codes[i][j] != cur_input_code[j] && i >= MAX_CODES && j >= MAX_DIGITS - 1)
            goto fail;

          if (stored_codes[i][j] != cur_input_code[j])
            continue;
     db8:	0001883a 	nop
    if (state == CODE && KEY1_flag)
    {

      for (int i = 0; i < MAX_CODES; i++)
      {
        for (int j = 0; j < MAX_DIGITS; j++)
     dbc:	e0bffe17 	ldw	r2,-8(fp)
     dc0:	10800044 	addi	r2,r2,1
     dc4:	e0bffe15 	stw	r2,-8(fp)
     dc8:	e0bffe17 	ldw	r2,-8(fp)
     dcc:	10800110 	cmplti	r2,r2,4
     dd0:	103fb41e 	bne	r2,zero,ca4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000ca4>
            matched = 1;
            break;
          }
        }

        if (matched == 1)
     dd4:	e0bffc17 	ldw	r2,-16(fp)
     dd8:	10800058 	cmpnei	r2,r2,1
     ddc:	1000051e 	bne	r2,zero,df4 <Task_read_KEYs+0x4e4>
        {
          OSSemPost(SEM_flash_success); /* Signal flash fail if not matched! */
     de0:	d0a81d17 	ldw	r2,-24460(gp)
     de4:	1009883a 	mov	r4,r2
     de8:	00147f00 	call	147f0 <OSSemPost>
          /* resetting input digits */
          reset_PS2_input();
     dec:	00002840 	call	284 <reset_PS2_input>
          break;
     df0:	00000806 	br	e14 <Task_read_KEYs+0x504>
    int matched = 0;

    if (state == CODE && KEY1_flag)
    {

      for (int i = 0; i < MAX_CODES; i++)
     df4:	e0bffd17 	ldw	r2,-12(fp)
     df8:	10800044 	addi	r2,r2,1
     dfc:	e0bffd15 	stw	r2,-12(fp)
     e00:	e0bffd17 	ldw	r2,-12(fp)
     e04:	10800410 	cmplti	r2,r2,16
     e08:	103fa41e 	bne	r2,zero,c9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000c9c>
     e0c:	00000106 	br	e14 <Task_read_KEYs+0x504>
      {
        for (int j = 0; j < MAX_DIGITS; j++)
        {
          if (stored_codes[i][j] != cur_input_code[j] && i >= MAX_CODES && j >= MAX_DIGITS - 1)
            goto fail;
     e10:	0001883a 	nop
          break;
        }
      }

    fail:
      if (matched == 0)
     e14:	e0bffc17 	ldw	r2,-16(fp)
     e18:	1000031e 	bne	r2,zero,e28 <Task_read_KEYs+0x518>
        OSSemPost(SEM_flash_fail); /* Signal flash fail if not matched! */
     e1c:	d0a82517 	ldw	r2,-24428(gp)
     e20:	1009883a 	mov	r4,r2
     e24:	00147f00 	call	147f0 <OSSemPost>

      matched = 1; /* Initializing rest of the array elements to -1 */
     e28:	00800044 	movi	r2,1
     e2c:	e0bffc15 	stw	r2,-16(fp)
      reset_PS2_input();
     e30:	00002840 	call	284 <reset_PS2_input>
    }

    OSSemPost(SEM_read_KEYS);
     e34:	d0a82817 	ldw	r2,-24416(gp)
     e38:	1009883a 	mov	r4,r2
     e3c:	00147f00 	call	147f0 <OSSemPost>
    OSTimeDlyHMSM(0, 0, 0, 300); /* Delay */
     e40:	01c04b04 	movi	r7,300
     e44:	000d883a 	mov	r6,zero
     e48:	000b883a 	mov	r5,zero
     e4c:	0009883a 	mov	r4,zero
     e50:	00163800 	call	16380 <OSTimeDlyHMSM>
  }
     e54:	003ebc06 	br	948 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000948>

00000e58 <Task_state_timer>:
}

void Task_state_timer(void *pdata)
{
     e58:	defff804 	addi	sp,sp,-32
     e5c:	dfc00715 	stw	ra,28(sp)
     e60:	df000615 	stw	fp,24(sp)
     e64:	dc400515 	stw	r17,20(sp)
     e68:	dc000415 	stw	r16,16(sp)
     e6c:	df000604 	addi	fp,sp,24
     e70:	e13ffd15 	stw	r4,-12(fp)
  debug("Started: Task_state_timer");
     e74:	d0a00117 	ldw	r2,-32764(gp)
     e78:	10800317 	ldw	r2,12(r2)
     e7c:	01c05a44 	movi	r7,361
     e80:	018000b4 	movhi	r6,2
     e84:	31a9a904 	addi	r6,r6,-22876
     e88:	014000b4 	movhi	r5,2
     e8c:	296a3304 	addi	r5,r5,-22324
     e90:	1009883a 	mov	r4,r2
     e94:	0001a6c0 	call	1a6c <fprintf>
  while (1)
  {
    log_info("%u: \tState: %s\t State Time: %ds", OSTime, Get_state_name(state), state_timer);
     e98:	d0a00117 	ldw	r2,-32764(gp)
     e9c:	14400317 	ldw	r17,12(r2)
     ea0:	d4284817 	ldw	r16,-24288(gp)
     ea4:	d0a81a17 	ldw	r2,-24472(gp)
     ea8:	1009883a 	mov	r4,r2
     eac:	00018b80 	call	18b8 <Get_state_name>
     eb0:	1007883a 	mov	r3,r2
     eb4:	d0a81817 	ldw	r2,-24480(gp)
     eb8:	d8800215 	stw	r2,8(sp)
     ebc:	d8c00115 	stw	r3,4(sp)
     ec0:	dc000015 	stw	r16,0(sp)
     ec4:	01c05b04 	movi	r7,364
     ec8:	018000b4 	movhi	r6,2
     ecc:	31a9a904 	addi	r6,r6,-22876
     ed0:	014000b4 	movhi	r5,2
     ed4:	296a3d04 	addi	r5,r5,-22284
     ed8:	8809883a 	mov	r4,r17
     edc:	0001a6c0 	call	1a6c <fprintf>
    if (prev_state != state)
     ee0:	d0e81417 	ldw	r3,-24496(gp)
     ee4:	d0a81a17 	ldw	r2,-24472(gp)
     ee8:	18800b26 	beq	r3,r2,f18 <Task_state_timer+0xc0>
    {
      OSSemPend(SEM_state_change, 0, &err);
     eec:	d0a82117 	ldw	r2,-24444(gp)
     ef0:	d1a82004 	addi	r6,gp,-24448
     ef4:	000b883a 	mov	r5,zero
     ef8:	1009883a 	mov	r4,r2
     efc:	00144780 	call	14478 <OSSemPend>
      prev_state = state;
     f00:	d0a81a17 	ldw	r2,-24472(gp)
     f04:	d0a81415 	stw	r2,-24496(gp)
      state_timer = 0;
     f08:	d0281815 	stw	zero,-24480(gp)
      OSSemPost(SEM_state_change);
     f0c:	d0a82117 	ldw	r2,-24444(gp)
     f10:	1009883a 	mov	r4,r2
     f14:	00147f00 	call	147f0 <OSSemPost>
    }

    state_timer++;
     f18:	d0a81817 	ldw	r2,-24480(gp)
     f1c:	10800044 	addi	r2,r2,1
     f20:	d0a81815 	stw	r2,-24480(gp)

    if (state == CODE && state_timer > 5)
     f24:	d0a81a17 	ldw	r2,-24472(gp)
     f28:	10800118 	cmpnei	r2,r2,4
     f2c:	1000121e 	bne	r2,zero,f78 <Task_state_timer+0x120>
     f30:	d0a81817 	ldw	r2,-24480(gp)
     f34:	10800190 	cmplti	r2,r2,6
     f38:	10000f1e 	bne	r2,zero,f78 <Task_state_timer+0x120>
    {
      log_info("Time Out!");
     f3c:	d0a00117 	ldw	r2,-32764(gp)
     f40:	10800317 	ldw	r2,12(r2)
     f44:	01c05e44 	movi	r7,377
     f48:	018000b4 	movhi	r6,2
     f4c:	31a9a904 	addi	r6,r6,-22876
     f50:	014000b4 	movhi	r5,2
     f54:	296a4904 	addi	r5,r5,-22236
     f58:	1009883a 	mov	r4,r2
     f5c:	0001a6c0 	call	1a6c <fprintf>
      reset_PS2_input();
     f60:	00002840 	call	284 <reset_PS2_input>
      OSSemPost(SEM_flash_fail);
     f64:	d0a82517 	ldw	r2,-24428(gp)
     f68:	1009883a 	mov	r4,r2
     f6c:	00147f00 	call	147f0 <OSSemPost>
      state == PROG;
      state_timer = 0;
     f70:	d0281815 	stw	zero,-24480(gp)
      timer_code = 0;
     f74:	d0282615 	stw	zero,-24424(gp)
    }

    if(flag == 1)
     f78:	d0a81617 	ldw	r2,-24488(gp)
     f7c:	10800058 	cmpnei	r2,r2,1
     f80:	1000021e 	bne	r2,zero,f8c <Task_state_timer+0x134>
      timer_code = 0;
     f84:	d0282615 	stw	zero,-24424(gp)
     f88:	00000e06 	br	fc4 <Task_state_timer+0x16c>
    else if ((state == CODE || state == PROG) && timer_code < 5)
     f8c:	d0a81a17 	ldw	r2,-24472(gp)
     f90:	10800120 	cmpeqi	r2,r2,4
     f94:	1000031e 	bne	r2,zero,fa4 <Task_state_timer+0x14c>
     f98:	d0a81a17 	ldw	r2,-24472(gp)
     f9c:	10800158 	cmpnei	r2,r2,5
     fa0:	1000071e 	bne	r2,zero,fc0 <Task_state_timer+0x168>
     fa4:	d0a82617 	ldw	r2,-24424(gp)
     fa8:	10800148 	cmpgei	r2,r2,5
     fac:	1000041e 	bne	r2,zero,fc0 <Task_state_timer+0x168>
      timer_code++;
     fb0:	d0a82617 	ldw	r2,-24424(gp)
     fb4:	10800044 	addi	r2,r2,1
     fb8:	d0a82615 	stw	r2,-24424(gp)
     fbc:	00000106 	br	fc4 <Task_state_timer+0x16c>
    else
      timer_code = 0;
     fc0:	d0282615 	stw	zero,-24424(gp)

    if (state == PROG && ((state_timer >= 30) || ((cur_input_code[0] == -1) && KEY1_flag)))
     fc4:	d0a81a17 	ldw	r2,-24472(gp)
     fc8:	10800158 	cmpnei	r2,r2,5
     fcc:	1000151e 	bne	r2,zero,1024 <Task_state_timer+0x1cc>
     fd0:	d0a81817 	ldw	r2,-24480(gp)
     fd4:	10800788 	cmpgei	r2,r2,30
     fd8:	1000071e 	bne	r2,zero,ff8 <Task_state_timer+0x1a0>
     fdc:	008000b4 	movhi	r2,2
     fe0:	10ace604 	addi	r2,r2,-19560
     fe4:	10800017 	ldw	r2,0(r2)
     fe8:	10bfffd8 	cmpnei	r2,r2,-1
     fec:	10000d1e 	bne	r2,zero,1024 <Task_state_timer+0x1cc>
     ff0:	d0a81f17 	ldw	r2,-24452(gp)
     ff4:	10000b26 	beq	r2,zero,1024 <Task_state_timer+0x1cc>
    {
      OSSemPend(SEM_state_change, 0, &err);
     ff8:	d0a82117 	ldw	r2,-24444(gp)
     ffc:	d1a82004 	addi	r6,gp,-24448
    1000:	000b883a 	mov	r5,zero
    1004:	1009883a 	mov	r4,r2
    1008:	00144780 	call	14478 <OSSemPend>
      state = OPEN;
    100c:	00800044 	movi	r2,1
    1010:	d0a81a15 	stw	r2,-24472(gp)
      state_timer = 0;
    1014:	d0281815 	stw	zero,-24480(gp)
      OSSemPost(SEM_state_change);
    1018:	d0a82117 	ldw	r2,-24444(gp)
    101c:	1009883a 	mov	r4,r2
    1020:	00147f00 	call	147f0 <OSSemPost>
    }

    OSTimeDlyHMSM(0, 0, 1, 0);
    1024:	000f883a 	mov	r7,zero
    1028:	01800044 	movi	r6,1
    102c:	000b883a 	mov	r5,zero
    1030:	0009883a 	mov	r4,zero
    1034:	00163800 	call	16380 <OSTimeDlyHMSM>
  }
    1038:	003f9706 	br	e98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000e98>

0000103c <Task_flash_success>:
}

void Task_flash_success(void *pdata)
{
    103c:	defffc04 	addi	sp,sp,-16
    1040:	dfc00315 	stw	ra,12(sp)
    1044:	df000215 	stw	fp,8(sp)
    1048:	df000204 	addi	fp,sp,8
    104c:	e13fff15 	stw	r4,-4(fp)
  debug("Started: Task_flash_success");
    1050:	d0a00117 	ldw	r2,-32764(gp)
    1054:	10800317 	ldw	r2,12(r2)
    1058:	01c06584 	movi	r7,406
    105c:	018000b4 	movhi	r6,2
    1060:	31a9a904 	addi	r6,r6,-22876
    1064:	014000b4 	movhi	r5,2
    1068:	296a5004 	addi	r5,r5,-22208
    106c:	1009883a 	mov	r4,r2
    1070:	0001a6c0 	call	1a6c <fprintf>

  while (1)
  {
    OSSemPend(SEM_flash_success, 0, &err);
    1074:	d0a81d17 	ldw	r2,-24460(gp)
    1078:	d1a82004 	addi	r6,gp,-24448
    107c:	000b883a 	mov	r5,zero
    1080:	1009883a 	mov	r4,r2
    1084:	00144780 	call	14478 <OSSemPend>
    int pattern = 0xE;
    1088:	00800384 	movi	r2,14
    108c:	e0bffe15 	stw	r2,-8(fp)
    debug("Flashing SUCCESS");
    1090:	d0a00117 	ldw	r2,-32764(gp)
    1094:	10800317 	ldw	r2,12(r2)
    1098:	01c06704 	movi	r7,412
    109c:	018000b4 	movhi	r6,2
    10a0:	31a9a904 	addi	r6,r6,-22876
    10a4:	014000b4 	movhi	r5,2
    10a8:	296a5b04 	addi	r5,r5,-22164
    10ac:	1009883a 	mov	r4,r2
    10b0:	0001a6c0 	call	1a6c <fprintf>

    *(LEDG_ptr) |= pattern;
    10b4:	00bfc834 	movhi	r2,65312
    10b8:	10800404 	addi	r2,r2,16
    10bc:	00ffc834 	movhi	r3,65312
    10c0:	18c00404 	addi	r3,r3,16
    10c4:	19000017 	ldw	r4,0(r3)
    10c8:	e0fffe17 	ldw	r3,-8(fp)
    10cc:	20c6b03a 	or	r3,r4,r3
    10d0:	10c00015 	stw	r3,0(r2)
    OSTimeDlyHMSM(0, 0, 1, 0);
    10d4:	000f883a 	mov	r7,zero
    10d8:	01800044 	movi	r6,1
    10dc:	000b883a 	mov	r5,zero
    10e0:	0009883a 	mov	r4,zero
    10e4:	00163800 	call	16380 <OSTimeDlyHMSM>
    *(LEDG_ptr) &= ~pattern;
    10e8:	00bfc834 	movhi	r2,65312
    10ec:	10800404 	addi	r2,r2,16
    10f0:	00ffc834 	movhi	r3,65312
    10f4:	18c00404 	addi	r3,r3,16
    10f8:	18c00017 	ldw	r3,0(r3)
    10fc:	e13ffe17 	ldw	r4,-8(fp)
    1100:	0108303a 	nor	r4,zero,r4
    1104:	1906703a 	and	r3,r3,r4
    1108:	10c00015 	stw	r3,0(r2)

    OSTimeDlyHMSM(0, 0, 1, 0);
    110c:	000f883a 	mov	r7,zero
    1110:	01800044 	movi	r6,1
    1114:	000b883a 	mov	r5,zero
    1118:	0009883a 	mov	r4,zero
    111c:	00163800 	call	16380 <OSTimeDlyHMSM>
  }
    1120:	003fd406 	br	1074 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001074>

00001124 <Task_flash_fail>:
}

void Task_flash_fail(void *pdata)
{
    1124:	defffc04 	addi	sp,sp,-16
    1128:	dfc00315 	stw	ra,12(sp)
    112c:	df000215 	stw	fp,8(sp)
    1130:	df000204 	addi	fp,sp,8
    1134:	e13fff15 	stw	r4,-4(fp)
  debug("Started: Task_flash_fail");
    1138:	d0a00117 	ldw	r2,-32764(gp)
    113c:	10800317 	ldw	r2,12(r2)
    1140:	01c06a04 	movi	r7,424
    1144:	018000b4 	movhi	r6,2
    1148:	31a9a904 	addi	r6,r6,-22876
    114c:	014000b4 	movhi	r5,2
    1150:	296a6304 	addi	r5,r5,-22132
    1154:	1009883a 	mov	r4,r2
    1158:	0001a6c0 	call	1a6c <fprintf>
  while (1)
  {
    int pattern = 0xE;
    115c:	00800384 	movi	r2,14
    1160:	e0bffe15 	stw	r2,-8(fp)
    OSSemPend(SEM_flash_fail, 0, &err);
    1164:	d0a82517 	ldw	r2,-24428(gp)
    1168:	d1a82004 	addi	r6,gp,-24448
    116c:	000b883a 	mov	r5,zero
    1170:	1009883a 	mov	r4,r2
    1174:	00144780 	call	14478 <OSSemPend>
    debug("Flashing FAIL");
    1178:	d0a00117 	ldw	r2,-32764(gp)
    117c:	10800317 	ldw	r2,12(r2)
    1180:	01c06b44 	movi	r7,429
    1184:	018000b4 	movhi	r6,2
    1188:	31a9a904 	addi	r6,r6,-22876
    118c:	014000b4 	movhi	r5,2
    1190:	296a6d04 	addi	r5,r5,-22092
    1194:	1009883a 	mov	r4,r2
    1198:	0001a6c0 	call	1a6c <fprintf>

    *(LEDR_ptr) |= pattern;
    119c:	00bfc834 	movhi	r2,65312
    11a0:	00ffc834 	movhi	r3,65312
    11a4:	19000017 	ldw	r4,0(r3)
    11a8:	e0fffe17 	ldw	r3,-8(fp)
    11ac:	20c6b03a 	or	r3,r4,r3
    11b0:	10c00015 	stw	r3,0(r2)
    OSTimeDlyHMSM(0, 0, 1, 0);
    11b4:	000f883a 	mov	r7,zero
    11b8:	01800044 	movi	r6,1
    11bc:	000b883a 	mov	r5,zero
    11c0:	0009883a 	mov	r4,zero
    11c4:	00163800 	call	16380 <OSTimeDlyHMSM>
    *(LEDR_ptr) &= ~pattern;
    11c8:	00bfc834 	movhi	r2,65312
    11cc:	00ffc834 	movhi	r3,65312
    11d0:	18c00017 	ldw	r3,0(r3)
    11d4:	e13ffe17 	ldw	r4,-8(fp)
    11d8:	0108303a 	nor	r4,zero,r4
    11dc:	1906703a 	and	r3,r3,r4
    11e0:	10c00015 	stw	r3,0(r2)
  }
    11e4:	003fdd06 	br	115c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700115c>

000011e8 <Task_add_del_code>:
}

void Task_add_del_code(void *pdata)
{
    11e8:	defff604 	addi	sp,sp,-40
    11ec:	dfc00915 	stw	ra,36(sp)
    11f0:	df000815 	stw	fp,32(sp)
    11f4:	df000804 	addi	fp,sp,32
    11f8:	e13fff15 	stw	r4,-4(fp)
  debug("Started: Task_add_del_code");
    11fc:	d0a00117 	ldw	r2,-32764(gp)
    1200:	10800317 	ldw	r2,12(r2)
    1204:	01c06dc4 	movi	r7,439
    1208:	018000b4 	movhi	r6,2
    120c:	31a9a904 	addi	r6,r6,-22876
    1210:	014000b4 	movhi	r5,2
    1214:	296a7404 	addi	r5,r5,-22064
    1218:	1009883a 	mov	r4,r2
    121c:	0001a6c0 	call	1a6c <fprintf>

  while (1)
  {

    OSSemPend(SEM_add_code, 0, &err);
    1220:	d0a81e17 	ldw	r2,-24456(gp)
    1224:	d1a82004 	addi	r6,gp,-24448
    1228:	000b883a 	mov	r5,zero
    122c:	1009883a 	mov	r4,r2
    1230:	00144780 	call	14478 <OSSemPend>
    debug("Running Task_add_del_code");
    1234:	d0a00117 	ldw	r2,-32764(gp)
    1238:	10800317 	ldw	r2,12(r2)
    123c:	01c06f44 	movi	r7,445
    1240:	018000b4 	movhi	r6,2
    1244:	31a9a904 	addi	r6,r6,-22876
    1248:	014000b4 	movhi	r5,2
    124c:	296a7f04 	addi	r5,r5,-22020
    1250:	1009883a 	mov	r4,r2
    1254:	0001a6c0 	call	1a6c <fprintf>

    /* signaling the read ps2 input into cur_input_code array */
    OSSemPost(SEM_timer_start);
    1258:	d0a81917 	ldw	r2,-24476(gp)
    125c:	1009883a 	mov	r4,r2
    1260:	00147f00 	call	147f0 <OSSemPost>

    /* signaling the read ps2 input into cur_input_code array */
    debug("Signalling read_PS2");
    1264:	d0a00117 	ldw	r2,-32764(gp)
    1268:	10800317 	ldw	r2,12(r2)
    126c:	01c070c4 	movi	r7,451
    1270:	018000b4 	movhi	r6,2
    1274:	31a9a904 	addi	r6,r6,-22876
    1278:	014000b4 	movhi	r5,2
    127c:	296a8904 	addi	r5,r5,-21980
    1280:	1009883a 	mov	r4,r2
    1284:	0001a6c0 	call	1a6c <fprintf>
    OSSemPost(SEM_read_PS2);
    1288:	d0a82717 	ldw	r2,-24420(gp)
    128c:	1009883a 	mov	r4,r2
    1290:	00147f00 	call	147f0 <OSSemPost>

    /* wait for Task read PS input to populate the global array */
    debug("Waiting for PS2 Key to read");
    1294:	d0a00117 	ldw	r2,-32764(gp)
    1298:	10800317 	ldw	r2,12(r2)
    129c:	01c071c4 	movi	r7,455
    12a0:	018000b4 	movhi	r6,2
    12a4:	31a9a904 	addi	r6,r6,-22876
    12a8:	014000b4 	movhi	r5,2
    12ac:	296a9204 	addi	r5,r5,-21944
    12b0:	1009883a 	mov	r4,r2
    12b4:	0001a6c0 	call	1a6c <fprintf>
    OSSemPend(SEM_read_PS2_done, 0, &err);
    12b8:	d0a81b17 	ldw	r2,-24468(gp)
    12bc:	d1a82004 	addi	r6,gp,-24448
    12c0:	000b883a 	mov	r5,zero
    12c4:	1009883a 	mov	r4,r2
    12c8:	00144780 	call	14478 <OSSemPend>

    debug("Add Delete Operation Invoked");
    12cc:	d0a00117 	ldw	r2,-32764(gp)
    12d0:	10800317 	ldw	r2,12(r2)
    12d4:	01c07284 	movi	r7,458
    12d8:	018000b4 	movhi	r6,2
    12dc:	31a9a904 	addi	r6,r6,-22876
    12e0:	014000b4 	movhi	r5,2
    12e4:	296a9d04 	addi	r5,r5,-21900
    12e8:	1009883a 	mov	r4,r2
    12ec:	0001a6c0 	call	1a6c <fprintf>
    int all_matched = 0;
    12f0:	e03ff815 	stw	zero,-32(fp)
    int add_new_code = 0;
    12f4:	e03ff915 	stw	zero,-28(fp)

    for (int i = 0; i < MAX_CODES; i++)
    12f8:	e03ffa15 	stw	zero,-24(fp)
    12fc:	00007406 	br	14d0 <Task_add_del_code+0x2e8>
    {
      /* When storage is full */
      if (stored_codes[MAX_CODES - 1][0] != -1)
    1300:	008000b4 	movhi	r2,2
    1304:	10acea04 	addi	r2,r2,-19544
    1308:	10803c17 	ldw	r2,240(r2)
    130c:	10bfffe0 	cmpeqi	r2,r2,-1
    1310:	1000041e 	bne	r2,zero,1324 <Task_add_del_code+0x13c>
      {
        OSSemPost(SEM_flash_fail);
    1314:	d0a82517 	ldw	r2,-24428(gp)
    1318:	1009883a 	mov	r4,r2
    131c:	00147f00 	call	147f0 <OSSemPost>
        break;
    1320:	00006e06 	br	14dc <Task_add_del_code+0x2f4>
      }

      int matched = 0;
    1324:	e03ffb15 	stw	zero,-20(fp)
      for (int j = 0; j < MAX_DIGITS; j++)
    1328:	e03ffc15 	stw	zero,-16(fp)
    132c:	00002a06 	br	13d8 <Task_add_del_code+0x1f0>
      {
        // Add the code and post Success
        if (stored_codes[i][0] == -1)
    1330:	008000b4 	movhi	r2,2
    1334:	10acea04 	addi	r2,r2,-19544
    1338:	e0fffa17 	ldw	r3,-24(fp)
    133c:	1806913a 	slli	r3,r3,4
    1340:	10c5883a 	add	r2,r2,r3
    1344:	10800017 	ldw	r2,0(r2)
    1348:	10bfffd8 	cmpnei	r2,r2,-1
    134c:	1000031e 	bne	r2,zero,135c <Task_add_del_code+0x174>
        {
          add_new_code = 1;
    1350:	00800044 	movi	r2,1
    1354:	e0bff915 	stw	r2,-28(fp)
          break;
    1358:	00002206 	br	13e4 <Task_add_del_code+0x1fc>
        }

        if (stored_codes[i][j] == cur_input_code[j])
    135c:	008000b4 	movhi	r2,2
    1360:	10acea04 	addi	r2,r2,-19544
    1364:	e0fffa17 	ldw	r3,-24(fp)
    1368:	18c7883a 	add	r3,r3,r3
    136c:	18c9883a 	add	r4,r3,r3
    1370:	e0fffc17 	ldw	r3,-16(fp)
    1374:	20c7883a 	add	r3,r4,r3
    1378:	18c7883a 	add	r3,r3,r3
    137c:	18c7883a 	add	r3,r3,r3
    1380:	10c5883a 	add	r2,r2,r3
    1384:	11000017 	ldw	r4,0(r2)
    1388:	008000b4 	movhi	r2,2
    138c:	10ace604 	addi	r2,r2,-19560
    1390:	e0fffc17 	ldw	r3,-16(fp)
    1394:	18c7883a 	add	r3,r3,r3
    1398:	18c7883a 	add	r3,r3,r3
    139c:	10c5883a 	add	r2,r2,r3
    13a0:	10800017 	ldw	r2,0(r2)
    13a4:	2080031e 	bne	r4,r2,13b4 <Task_add_del_code+0x1cc>
          matched++;
    13a8:	e0bffb17 	ldw	r2,-20(fp)
    13ac:	10800044 	addi	r2,r2,1
    13b0:	e0bffb15 	stw	r2,-20(fp)

        if (matched == MAX_DIGITS)
    13b4:	e0bffb17 	ldw	r2,-20(fp)
    13b8:	10800118 	cmpnei	r2,r2,4
    13bc:	1000031e 	bne	r2,zero,13cc <Task_add_del_code+0x1e4>
        {
          all_matched = 1;
    13c0:	00800044 	movi	r2,1
    13c4:	e0bff815 	stw	r2,-32(fp)
          break;
    13c8:	00000606 	br	13e4 <Task_add_del_code+0x1fc>
        OSSemPost(SEM_flash_fail);
        break;
      }

      int matched = 0;
      for (int j = 0; j < MAX_DIGITS; j++)
    13cc:	e0bffc17 	ldw	r2,-16(fp)
    13d0:	10800044 	addi	r2,r2,1
    13d4:	e0bffc15 	stw	r2,-16(fp)
    13d8:	e0bffc17 	ldw	r2,-16(fp)
    13dc:	10800110 	cmplti	r2,r2,4
    13e0:	103fd31e 	bne	r2,zero,1330 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001330>
          all_matched = 1;
          break;
        }
      }

      if (all_matched)
    13e4:	e0bff817 	ldw	r2,-32(fp)
    13e8:	10001826 	beq	r2,zero,144c <Task_add_del_code+0x264>
      {
        // delete code
        for (int k = 0; k < MAX_DIGITS; k++)
    13ec:	e03ffd15 	stw	zero,-12(fp)
    13f0:	00000e06 	br	142c <Task_add_del_code+0x244>
          stored_codes[i][k] = 0;
    13f4:	008000b4 	movhi	r2,2
    13f8:	10acea04 	addi	r2,r2,-19544
    13fc:	e0fffa17 	ldw	r3,-24(fp)
    1400:	18c7883a 	add	r3,r3,r3
    1404:	18c9883a 	add	r4,r3,r3
    1408:	e0fffd17 	ldw	r3,-12(fp)
    140c:	20c7883a 	add	r3,r4,r3
    1410:	18c7883a 	add	r3,r3,r3
    1414:	18c7883a 	add	r3,r3,r3
    1418:	10c5883a 	add	r2,r2,r3
    141c:	10000015 	stw	zero,0(r2)
      }

      if (all_matched)
      {
        // delete code
        for (int k = 0; k < MAX_DIGITS; k++)
    1420:	e0bffd17 	ldw	r2,-12(fp)
    1424:	10800044 	addi	r2,r2,1
    1428:	e0bffd15 	stw	r2,-12(fp)
    142c:	e0bffd17 	ldw	r2,-12(fp)
    1430:	10800110 	cmplti	r2,r2,4
    1434:	103fef1e 	bne	r2,zero,13f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70013f4>
          stored_codes[i][k] = 0;

        OSSemPost(SEM_flash_success);
    1438:	d0a81d17 	ldw	r2,-24460(gp)
    143c:	1009883a 	mov	r4,r2
    1440:	00147f00 	call	147f0 <OSSemPost>
        all_matched = 0;
    1444:	e03ff815 	stw	zero,-32(fp)
        break;
    1448:	00002406 	br	14dc <Task_add_del_code+0x2f4>
      }

      if (add_new_code)
    144c:	e0bff917 	ldw	r2,-28(fp)
    1450:	10001c26 	beq	r2,zero,14c4 <Task_add_del_code+0x2dc>
      {
        for (int j = 0; j < MAX_DIGITS; j++)
    1454:	e03ffe15 	stw	zero,-8(fp)
    1458:	00001206 	br	14a4 <Task_add_del_code+0x2bc>
        {
          stored_codes[1][j] = cur_input_code[j];
    145c:	008000b4 	movhi	r2,2
    1460:	10ace604 	addi	r2,r2,-19560
    1464:	e0fffe17 	ldw	r3,-8(fp)
    1468:	18c7883a 	add	r3,r3,r3
    146c:	18c7883a 	add	r3,r3,r3
    1470:	10c5883a 	add	r2,r2,r3
    1474:	11000017 	ldw	r4,0(r2)
    1478:	008000b4 	movhi	r2,2
    147c:	10acea04 	addi	r2,r2,-19544
    1480:	e0fffe17 	ldw	r3,-8(fp)
    1484:	18c00104 	addi	r3,r3,4
    1488:	18c7883a 	add	r3,r3,r3
    148c:	18c7883a 	add	r3,r3,r3
    1490:	10c5883a 	add	r2,r2,r3
    1494:	11000015 	stw	r4,0(r2)
        break;
      }

      if (add_new_code)
      {
        for (int j = 0; j < MAX_DIGITS; j++)
    1498:	e0bffe17 	ldw	r2,-8(fp)
    149c:	10800044 	addi	r2,r2,1
    14a0:	e0bffe15 	stw	r2,-8(fp)
    14a4:	e0bffe17 	ldw	r2,-8(fp)
    14a8:	10800110 	cmplti	r2,r2,4
    14ac:	103feb1e 	bne	r2,zero,145c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700145c>
        {
          stored_codes[1][j] = cur_input_code[j];
        }
        OSSemPost(SEM_flash_success);
    14b0:	d0a81d17 	ldw	r2,-24460(gp)
    14b4:	1009883a 	mov	r4,r2
    14b8:	00147f00 	call	147f0 <OSSemPost>
        add_new_code = 0;
    14bc:	e03ff915 	stw	zero,-28(fp)
        break;
    14c0:	00000606 	br	14dc <Task_add_del_code+0x2f4>

    debug("Add Delete Operation Invoked");
    int all_matched = 0;
    int add_new_code = 0;

    for (int i = 0; i < MAX_CODES; i++)
    14c4:	e0bffa17 	ldw	r2,-24(fp)
    14c8:	10800044 	addi	r2,r2,1
    14cc:	e0bffa15 	stw	r2,-24(fp)
    14d0:	e0bffa17 	ldw	r2,-24(fp)
    14d4:	10800410 	cmplti	r2,r2,16
    14d8:	103f891e 	bne	r2,zero,1300 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001300>
        add_new_code = 0;
        break;
      }
    }

    reset_PS2_input();
    14dc:	00002840 	call	284 <reset_PS2_input>
    OSTimeDlyHMSM(0, 0, 0, 300);
    14e0:	01c04b04 	movi	r7,300
    14e4:	000d883a 	mov	r6,zero
    14e8:	000b883a 	mov	r5,zero
    14ec:	0009883a 	mov	r4,zero
    14f0:	00163800 	call	16380 <OSTimeDlyHMSM>
  }
    14f4:	003f4a06 	br	1220 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001220>

000014f8 <Task_delete_code>:
}

void Task_delete_code(void *pdata)
{
    14f8:	defffd04 	addi	sp,sp,-12
    14fc:	dfc00215 	stw	ra,8(sp)
    1500:	df000115 	stw	fp,4(sp)
    1504:	df000104 	addi	fp,sp,4
    1508:	e13fff15 	stw	r4,-4(fp)
  debug("Started: Task_delete_code");
    150c:	d0a00117 	ldw	r2,-32764(gp)
    1510:	10800317 	ldw	r2,12(r2)
    1514:	01c08244 	movi	r7,521
    1518:	018000b4 	movhi	r6,2
    151c:	31a9a904 	addi	r6,r6,-22876
    1520:	014000b4 	movhi	r5,2
    1524:	296aa804 	addi	r5,r5,-21856
    1528:	1009883a 	mov	r4,r2
    152c:	0001a6c0 	call	1a6c <fprintf>

  while (1)
  {
    OSSemPend(SEM_delete_code, 0, &err);
    1530:	d0a81717 	ldw	r2,-24484(gp)
    1534:	d1a82004 	addi	r6,gp,-24448
    1538:	000b883a 	mov	r5,zero
    153c:	1009883a 	mov	r4,r2
    1540:	00144780 	call	14478 <OSSemPend>
    debug("Within Task Delete Code");
    1544:	d0a00117 	ldw	r2,-32764(gp)
    1548:	10800317 	ldw	r2,12(r2)
    154c:	01c08384 	movi	r7,526
    1550:	018000b4 	movhi	r6,2
    1554:	31a9a904 	addi	r6,r6,-22876
    1558:	014000b4 	movhi	r5,2
    155c:	296ab204 	addi	r5,r5,-21816
    1560:	1009883a 	mov	r4,r2
    1564:	0001a6c0 	call	1a6c <fprintf>
    OSTimeDlyHMSM(0, 0, 0, 300);
    1568:	01c04b04 	movi	r7,300
    156c:	000d883a 	mov	r6,zero
    1570:	000b883a 	mov	r5,zero
    1574:	0009883a 	mov	r4,zero
    1578:	00163800 	call	16380 <OSTimeDlyHMSM>
  }
    157c:	003fec06 	br	1530 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001530>

00001580 <main>:
}

/* The main function creates two task and starts multi-tasking */
int main(void)
{
    1580:	defff704 	addi	sp,sp,-36
    1584:	dfc00815 	stw	ra,32(sp)
    1588:	df000715 	stw	fp,28(sp)
    158c:	df000704 	addi	fp,sp,28
  printf("MicroC/OS-II Licensing Terms\n");
    1590:	010000b4 	movhi	r4,2
    1594:	212abc04 	addi	r4,r4,-21776
    1598:	0001b500 	call	1b50 <puts>
  printf("============================\n");
    159c:	010000b4 	movhi	r4,2
    15a0:	212ac404 	addi	r4,r4,-21744
    15a4:	0001b500 	call	1b50 <puts>
  printf("Micrium\'s uC/OS-II is a real-time operating system (RTOS) available in source code.\n");
    15a8:	010000b4 	movhi	r4,2
    15ac:	212acc04 	addi	r4,r4,-21712
    15b0:	0001b500 	call	1b50 <puts>
  printf("This is not open-source software.\n");
    15b4:	010000b4 	movhi	r4,2
    15b8:	212ae104 	addi	r4,r4,-21628
    15bc:	0001b500 	call	1b50 <puts>
  printf("This RTOS can be used free of charge only for non-commercial purposes and academic projects,\n");
    15c0:	010000b4 	movhi	r4,2
    15c4:	212aea04 	addi	r4,r4,-21592
    15c8:	0001b500 	call	1b50 <puts>
  printf("any other use of the code is subject to the terms of an end-user license agreement\n");
    15cc:	010000b4 	movhi	r4,2
    15d0:	212b0204 	addi	r4,r4,-21496
    15d4:	0001b500 	call	1b50 <puts>
  printf("for more information please see the license files included in the BSP project or contact Micrium.\n");
    15d8:	010000b4 	movhi	r4,2
    15dc:	212b1704 	addi	r4,r4,-21412
    15e0:	0001b500 	call	1b50 <puts>
  printf("Anyone planning to use a Micrium RTOS in a commercial product must purchase a commercial license\n");
    15e4:	010000b4 	movhi	r4,2
    15e8:	212b3004 	addi	r4,r4,-21312
    15ec:	0001b500 	call	1b50 <puts>
  printf("from the owner of the software, Silicon Laboratories Inc.\n");
    15f0:	010000b4 	movhi	r4,2
    15f4:	212b4904 	addi	r4,r4,-21212
    15f8:	0001b500 	call	1b50 <puts>
  printf("Licensing information is available at:\n");
    15fc:	010000b4 	movhi	r4,2
    1600:	212b5804 	addi	r4,r4,-21152
    1604:	0001b500 	call	1b50 <puts>
  printf("Phone: +1 954-217-2036\n");
    1608:	010000b4 	movhi	r4,2
    160c:	212b6204 	addi	r4,r4,-21112
    1610:	0001b500 	call	1b50 <puts>
  printf("Email: sales@micrium.com\n");
    1614:	010000b4 	movhi	r4,2
    1618:	212b6804 	addi	r4,r4,-21088
    161c:	0001b500 	call	1b50 <puts>
  printf("URL: www.micrium.com\n\n\n");
    1620:	010000b4 	movhi	r4,2
    1624:	212b6f04 	addi	r4,r4,-21060
    1628:	0001b500 	call	1b50 <puts>

  KEY0_flag, KEY1_flag, KEY2_flag, KEY3_flag = 0, 0, 0, 0;
    162c:	d0282315 	stw	zero,-24436(gp)
  PS2_num = -1;
    1630:	00bfffc4 	movi	r2,-1
    1634:	d0a81315 	stw	r2,-24500(gp)
  timer_code = 0;
    1638:	d0282615 	stw	zero,-24424(gp)
  cur_input_idx = 0;
    163c:	d0282215 	stw	zero,-24440(gp)
  state_timer = 0;
    1640:	d0281815 	stw	zero,-24480(gp)
  /* Initialization Code */
  // state = INIT;

  // TODO: Uncomment this code in Production
  /* For Debugging Purpose */
  state = INIT;
    1644:	d0281a15 	stw	zero,-24472(gp)
  /************************/

  /* Semaphore for activity/sequence control */
  SEM_read_PS2 = OSSemCreate(0);      /* Blocking initially */
    1648:	0009883a 	mov	r4,zero
    164c:	00141600 	call	14160 <OSSemCreate>
    1650:	d0a82715 	stw	r2,-24420(gp)
  SEM_read_PS2_done = OSSemCreate(0); /* Blocking initially */
    1654:	0009883a 	mov	r4,zero
    1658:	00141600 	call	14160 <OSSemCreate>
    165c:	d0a81b15 	stw	r2,-24468(gp)
  SEM_timer_start = OSSemCreate(0);   /* Blocking initially */
    1660:	0009883a 	mov	r4,zero
    1664:	00141600 	call	14160 <OSSemCreate>
    1668:	d0a81915 	stw	r2,-24476(gp)
  SEM_flash_success = OSSemCreate(0); /* Blocking initially */
    166c:	0009883a 	mov	r4,zero
    1670:	00141600 	call	14160 <OSSemCreate>
    1674:	d0a81d15 	stw	r2,-24460(gp)
  SEM_flash_fail = OSSemCreate(0);    /* Blocking initially */
    1678:	0009883a 	mov	r4,zero
    167c:	00141600 	call	14160 <OSSemCreate>
    1680:	d0a82515 	stw	r2,-24428(gp)
  SEM_add_code = OSSemCreate(0);      /* Blocking initially */
    1684:	0009883a 	mov	r4,zero
    1688:	00141600 	call	14160 <OSSemCreate>
    168c:	d0a81e15 	stw	r2,-24456(gp)

  SEM_read_KEYS = OSSemCreate(1);
    1690:	01000044 	movi	r4,1
    1694:	00141600 	call	14160 <OSSemCreate>
    1698:	d0a82815 	stw	r2,-24416(gp)
  SEM_state_change = OSSemCreate(1);
    169c:	01000044 	movi	r4,1
    16a0:	00141600 	call	14160 <OSSemCreate>
    16a4:	d0a82115 	stw	r2,-24444(gp)

  /* Initializing rest of the array elements to -1 */
  for (int i = 1; i < MAX_CODES; i++)
    16a8:	00800044 	movi	r2,1
    16ac:	e0bffe15 	stw	r2,-8(fp)
    16b0:	00001706 	br	1710 <main+0x190>
    for (int j = 0; j < MAX_DIGITS; j++)
    16b4:	e03fff15 	stw	zero,-4(fp)
    16b8:	00000f06 	br	16f8 <main+0x178>
      stored_codes[i][j] = -1;
    16bc:	008000b4 	movhi	r2,2
    16c0:	10acea04 	addi	r2,r2,-19544
    16c4:	e0fffe17 	ldw	r3,-8(fp)
    16c8:	18c7883a 	add	r3,r3,r3
    16cc:	18c9883a 	add	r4,r3,r3
    16d0:	e0ffff17 	ldw	r3,-4(fp)
    16d4:	20c7883a 	add	r3,r4,r3
    16d8:	18c7883a 	add	r3,r3,r3
    16dc:	18c7883a 	add	r3,r3,r3
    16e0:	10c5883a 	add	r2,r2,r3
    16e4:	00ffffc4 	movi	r3,-1
    16e8:	10c00015 	stw	r3,0(r2)
  SEM_read_KEYS = OSSemCreate(1);
  SEM_state_change = OSSemCreate(1);

  /* Initializing rest of the array elements to -1 */
  for (int i = 1; i < MAX_CODES; i++)
    for (int j = 0; j < MAX_DIGITS; j++)
    16ec:	e0bfff17 	ldw	r2,-4(fp)
    16f0:	10800044 	addi	r2,r2,1
    16f4:	e0bfff15 	stw	r2,-4(fp)
    16f8:	e0bfff17 	ldw	r2,-4(fp)
    16fc:	10800110 	cmplti	r2,r2,4
    1700:	103fee1e 	bne	r2,zero,16bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016bc>

  SEM_read_KEYS = OSSemCreate(1);
  SEM_state_change = OSSemCreate(1);

  /* Initializing rest of the array elements to -1 */
  for (int i = 1; i < MAX_CODES; i++)
    1704:	e0bffe17 	ldw	r2,-8(fp)
    1708:	10800044 	addi	r2,r2,1
    170c:	e0bffe15 	stw	r2,-8(fp)
    1710:	e0bffe17 	ldw	r2,-8(fp)
    1714:	10800410 	cmplti	r2,r2,16
    1718:	103fe61e 	bne	r2,zero,16b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016b4>
    for (int j = 0; j < MAX_DIGITS; j++)
      stored_codes[i][j] = -1;

  /* Task creation */
  OSTaskCreateExt(Task_read_KEYs,
    171c:	d8000415 	stw	zero,16(sp)
    1720:	d8000315 	stw	zero,12(sp)
    1724:	00820004 	movi	r2,2048
    1728:	d8800215 	stw	r2,8(sp)
    172c:	008000f4 	movhi	r2,3
    1730:	10a4f504 	addi	r2,r2,-27692
    1734:	d8800115 	stw	r2,4(sp)
    1738:	00800044 	movi	r2,1
    173c:	d8800015 	stw	r2,0(sp)
    1740:	01c00044 	movi	r7,1
    1744:	018000f4 	movhi	r6,3
    1748:	31acf404 	addi	r6,r6,-19504
    174c:	000b883a 	mov	r5,zero
    1750:	01000034 	movhi	r4,0
    1754:	21024404 	addi	r4,r4,2320
    1758:	00151ac0 	call	151ac <OSTaskCreateExt>
                  task_read_keys_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(Task_state_timer,
    175c:	d8000415 	stw	zero,16(sp)
    1760:	d8000315 	stw	zero,12(sp)
    1764:	00820004 	movi	r2,2048
    1768:	d8800215 	stw	r2,8(sp)
    176c:	008000b4 	movhi	r2,2
    1770:	10bcf504 	addi	r2,r2,-3116
    1774:	d8800115 	stw	r2,4(sp)
    1778:	00800084 	movi	r2,2
    177c:	d8800015 	stw	r2,0(sp)
    1780:	01c00084 	movi	r7,2
    1784:	018000b4 	movhi	r6,2
    1788:	3184f404 	addi	r6,r6,5072
    178c:	000b883a 	mov	r5,zero
    1790:	01000034 	movhi	r4,0
    1794:	21039604 	addi	r4,r4,3672
    1798:	00151ac0 	call	151ac <OSTaskCreateExt>
                  task_state_timer_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(Task_read_PS2,
    179c:	d8000415 	stw	zero,16(sp)
    17a0:	d8000315 	stw	zero,12(sp)
    17a4:	00820004 	movi	r2,2048
    17a8:	d8800215 	stw	r2,8(sp)
    17ac:	008000b4 	movhi	r2,2
    17b0:	109cf504 	addi	r2,r2,29652
    17b4:	d8800115 	stw	r2,4(sp)
    17b8:	008000c4 	movi	r2,3
    17bc:	d8800015 	stw	r2,0(sp)
    17c0:	01c000c4 	movi	r7,3
    17c4:	018000f4 	movhi	r6,3
    17c8:	31a4f404 	addi	r6,r6,-27696
    17cc:	000b883a 	mov	r5,zero
    17d0:	01000034 	movhi	r4,0
    17d4:	2100ba04 	addi	r4,r4,744
    17d8:	00151ac0 	call	151ac <OSTaskCreateExt>
                  task_read_ps2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(Task_flash_success,
    17dc:	d8000415 	stw	zero,16(sp)
    17e0:	d8000315 	stw	zero,12(sp)
    17e4:	00820004 	movi	r2,2048
    17e8:	d8800215 	stw	r2,8(sp)
    17ec:	008000b4 	movhi	r2,2
    17f0:	1094f504 	addi	r2,r2,21460
    17f4:	d8800115 	stw	r2,4(sp)
    17f8:	00800104 	movi	r2,4
    17fc:	d8800015 	stw	r2,0(sp)
    1800:	01c00104 	movi	r7,4
    1804:	018000b4 	movhi	r6,2
    1808:	319cf404 	addi	r6,r6,29648
    180c:	000b883a 	mov	r5,zero
    1810:	01000034 	movhi	r4,0
    1814:	21040f04 	addi	r4,r4,4156
    1818:	00151ac0 	call	151ac <OSTaskCreateExt>
                  task_flash_success_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(Task_flash_fail,
    181c:	d8000415 	stw	zero,16(sp)
    1820:	d8000315 	stw	zero,12(sp)
    1824:	00820004 	movi	r2,2048
    1828:	d8800215 	stw	r2,8(sp)
    182c:	008000b4 	movhi	r2,2
    1830:	108cf504 	addi	r2,r2,13268
    1834:	d8800115 	stw	r2,4(sp)
    1838:	00800144 	movi	r2,5
    183c:	d8800015 	stw	r2,0(sp)
    1840:	01c00144 	movi	r7,5
    1844:	018000b4 	movhi	r6,2
    1848:	3194f404 	addi	r6,r6,21456
    184c:	000b883a 	mov	r5,zero
    1850:	01000034 	movhi	r4,0
    1854:	21044904 	addi	r4,r4,4388
    1858:	00151ac0 	call	151ac <OSTaskCreateExt>
                  task_flash_fail_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(Task_add_del_code,
    185c:	d8000415 	stw	zero,16(sp)
    1860:	d8000315 	stw	zero,12(sp)
    1864:	00820004 	movi	r2,2048
    1868:	d8800215 	stw	r2,8(sp)
    186c:	008000b4 	movhi	r2,2
    1870:	1084f504 	addi	r2,r2,5076
    1874:	d8800115 	stw	r2,4(sp)
    1878:	00800184 	movi	r2,6
    187c:	d8800015 	stw	r2,0(sp)
    1880:	01c00184 	movi	r7,6
    1884:	018000b4 	movhi	r6,2
    1888:	318cf404 	addi	r6,r6,13264
    188c:	000b883a 	mov	r5,zero
    1890:	01000034 	movhi	r4,0
    1894:	21047a04 	addi	r4,r4,4584
    1898:	00151ac0 	call	151ac <OSTaskCreateExt>
                  task_add_code_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSStart();
    189c:	000fb040 	call	fb04 <OSStart>

  return 0;
    18a0:	0005883a 	mov	r2,zero
}
    18a4:	e037883a 	mov	sp,fp
    18a8:	dfc00117 	ldw	ra,4(sp)
    18ac:	df000017 	ldw	fp,0(sp)
    18b0:	dec00204 	addi	sp,sp,8
    18b4:	f800283a 	ret

000018b8 <Get_state_name>:

#include "globals.h"
#include "debug.h"

const char *Get_state_name(DoorState door_state)
{
    18b8:	defffe04 	addi	sp,sp,-8
    18bc:	df000115 	stw	fp,4(sp)
    18c0:	df000104 	addi	fp,sp,4
    18c4:	e13fff15 	stw	r4,-4(fp)
    switch (door_state)
    18c8:	e0bfff17 	ldw	r2,-4(fp)
    18cc:	10800268 	cmpgeui	r2,r2,9
    18d0:	10002b1e 	bne	r2,zero,1980 <Get_state_name+0xc8>
    18d4:	e0bfff17 	ldw	r2,-4(fp)
    18d8:	100690ba 	slli	r3,r2,2
    18dc:	00800034 	movhi	r2,0
    18e0:	10863c04 	addi	r2,r2,6384
    18e4:	1885883a 	add	r2,r3,r2
    18e8:	10800017 	ldw	r2,0(r2)
    18ec:	1000683a 	jmp	r2
    18f0:	00001914 	movui	zero,100
    18f4:	00001920 	cmpeqi	zero,zero,100
    18f8:	0000192c 	andhi	zero,zero,100
    18fc:	00001938 	rdprs	zero,zero,100
    1900:	00001944 	movi	zero,101
    1904:	00001950 	cmplti	zero,zero,101
    1908:	0000195c 	xori	zero,zero,101
    190c:	00001968 	cmpgeui	zero,zero,101
    1910:	00001974 	movhi	zero,101
    {
    case INIT:
        return "INIT";
    1914:	008000b4 	movhi	r2,2
    1918:	10ab7504 	addi	r2,r2,-21036
    191c:	00001a06 	br	1988 <Get_state_name+0xd0>
    case OPEN:
        return "OPEN";
    1920:	008000b4 	movhi	r2,2
    1924:	10ab7704 	addi	r2,r2,-21028
    1928:	00001706 	br	1988 <Get_state_name+0xd0>
    case CLOSE:
        return "CLOSE";
    192c:	008000b4 	movhi	r2,2
    1930:	10ab7904 	addi	r2,r2,-21020
    1934:	00001406 	br	1988 <Get_state_name+0xd0>
    case LOCK:
        return "LOCK";
    1938:	008000b4 	movhi	r2,2
    193c:	10ab7b04 	addi	r2,r2,-21012
    1940:	00001106 	br	1988 <Get_state_name+0xd0>
    case CODE:
        return "CODE";
    1944:	008000b4 	movhi	r2,2
    1948:	10ab7d04 	addi	r2,r2,-21004
    194c:	00000e06 	br	1988 <Get_state_name+0xd0>
    case PROG:
        return "PROG";
    1950:	008000b4 	movhi	r2,2
    1954:	10ab7f04 	addi	r2,r2,-20996
    1958:	00000b06 	br	1988 <Get_state_name+0xd0>
    case VERIFIED:
        return "VERIFIED";
    195c:	008000b4 	movhi	r2,2
    1960:	10ab8104 	addi	r2,r2,-20988
    1964:	00000806 	br	1988 <Get_state_name+0xd0>
    case ADD_CODE:
        return "ADD_CODE";
    1968:	008000b4 	movhi	r2,2
    196c:	10ab8404 	addi	r2,r2,-20976
    1970:	00000506 	br	1988 <Get_state_name+0xd0>
    case DELETE_CODE:
        return "DELETE_CODE";
    1974:	008000b4 	movhi	r2,2
    1978:	10ab8704 	addi	r2,r2,-20964
    197c:	00000206 	br	1988 <Get_state_name+0xd0>
    default:
        return "INVALID";
    1980:	008000b4 	movhi	r2,2
    1984:	10ab8a04 	addi	r2,r2,-20952
    }
}
    1988:	e037883a 	mov	sp,fp
    198c:	df000017 	ldw	fp,0(sp)
    1990:	dec00104 	addi	sp,sp,4
    1994:	f800283a 	ret

00001998 <Check_KEYs>:

void Check_KEYs(int *KEY0_ptr, int *KEY1_ptr, int *KEY2_ptr, int *KEY3_ptr)
{
    1998:	defffb04 	addi	sp,sp,-20
    199c:	df000415 	stw	fp,16(sp)
    19a0:	df000404 	addi	fp,sp,16
    19a4:	e13ffc15 	stw	r4,-16(fp)
    19a8:	e17ffd15 	stw	r5,-12(fp)
    19ac:	e1bffe15 	stw	r6,-8(fp)
    19b0:	e1ffff15 	stw	r7,-4(fp)

    KEY_val = *(KEY_ptr);
    19b4:	00bfc834 	movhi	r2,65312
    19b8:	10801404 	addi	r2,r2,80
    19bc:	10800017 	ldw	r2,0(r2)
    19c0:	d0a81c15 	stw	r2,-24464(gp)

    if (KEY_val == KEY0)
    19c4:	d0a81c17 	ldw	r2,-24464(gp)
    19c8:	10800058 	cmpnei	r2,r2,1
    19cc:	1000041e 	bne	r2,zero,19e0 <Check_KEYs+0x48>
    {
        debug("KEY0 Pressed!"); // check KEY0
        *KEY0_ptr = 1;
    19d0:	e0bffc17 	ldw	r2,-16(fp)
    19d4:	00c00044 	movi	r3,1
    19d8:	10c00015 	stw	r3,0(r2)
    19dc:	00001406 	br	1a30 <Check_KEYs+0x98>
    }
    else if (KEY_val == KEY1) // check KEY1
    19e0:	d0a81c17 	ldw	r2,-24464(gp)
    19e4:	10800098 	cmpnei	r2,r2,2
    19e8:	1000041e 	bne	r2,zero,19fc <Check_KEYs+0x64>
    {
        debug("KEY1 Pressed!");
        *KEY1_ptr = 1;
    19ec:	e0bffd17 	ldw	r2,-12(fp)
    19f0:	00c00044 	movi	r3,1
    19f4:	10c00015 	stw	r3,0(r2)
    19f8:	00000d06 	br	1a30 <Check_KEYs+0x98>
    }
    else if (KEY_val == KEY2) // check KEY2
    19fc:	d0a81c17 	ldw	r2,-24464(gp)
    1a00:	10800118 	cmpnei	r2,r2,4
    1a04:	1000041e 	bne	r2,zero,1a18 <Check_KEYs+0x80>
    {
        debug("KEY2 Pressed!");
        *KEY2_ptr = 1;
    1a08:	e0bffe17 	ldw	r2,-8(fp)
    1a0c:	00c00044 	movi	r3,1
    1a10:	10c00015 	stw	r3,0(r2)
    1a14:	00000606 	br	1a30 <Check_KEYs+0x98>
    }
    else if (KEY_val == KEY3) // check KEY3
    1a18:	d0a81c17 	ldw	r2,-24464(gp)
    1a1c:	10800218 	cmpnei	r2,r2,8
    1a20:	1000031e 	bne	r2,zero,1a30 <Check_KEYs+0x98>
    {
        debug("KEY3 Pressed!");
        *KEY3_ptr = 1;
    1a24:	e0bfff17 	ldw	r2,-4(fp)
    1a28:	00c00044 	movi	r3,1
    1a2c:	10c00015 	stw	r3,0(r2)
    }

    if (KEY_val)
        debug("KEY_value: %d", KEY_val);
    1a30:	0001883a 	nop
    1a34:	e037883a 	mov	sp,fp
    1a38:	df000017 	ldw	fp,0(sp)
    1a3c:	dec00104 	addi	sp,sp,4
    1a40:	f800283a 	ret

00001a44 <_fprintf_r>:
    1a44:	defffe04 	addi	sp,sp,-8
    1a48:	2809883a 	mov	r4,r5
    1a4c:	300b883a 	mov	r5,r6
    1a50:	dfc00015 	stw	ra,0(sp)
    1a54:	d9c00115 	stw	r7,4(sp)
    1a58:	d9800104 	addi	r6,sp,4
    1a5c:	0003df40 	call	3df4 <__vfprintf_internal>
    1a60:	dfc00017 	ldw	ra,0(sp)
    1a64:	dec00204 	addi	sp,sp,8
    1a68:	f800283a 	ret

00001a6c <fprintf>:
    1a6c:	defffd04 	addi	sp,sp,-12
    1a70:	dfc00015 	stw	ra,0(sp)
    1a74:	d9800115 	stw	r6,4(sp)
    1a78:	d9c00215 	stw	r7,8(sp)
    1a7c:	d9800104 	addi	r6,sp,4
    1a80:	0003df40 	call	3df4 <__vfprintf_internal>
    1a84:	dfc00017 	ldw	ra,0(sp)
    1a88:	dec00304 	addi	sp,sp,12
    1a8c:	f800283a 	ret

00001a90 <_puts_r>:
    1a90:	defff604 	addi	sp,sp,-40
    1a94:	dc000715 	stw	r16,28(sp)
    1a98:	2021883a 	mov	r16,r4
    1a9c:	2809883a 	mov	r4,r5
    1aa0:	dc400815 	stw	r17,32(sp)
    1aa4:	dfc00915 	stw	ra,36(sp)
    1aa8:	2823883a 	mov	r17,r5
    1aac:	0001b640 	call	1b64 <strlen>
    1ab0:	10c00044 	addi	r3,r2,1
    1ab4:	d8800115 	stw	r2,4(sp)
    1ab8:	008000b4 	movhi	r2,2
    1abc:	10ab8d04 	addi	r2,r2,-20940
    1ac0:	d8800215 	stw	r2,8(sp)
    1ac4:	00800044 	movi	r2,1
    1ac8:	d8800315 	stw	r2,12(sp)
    1acc:	00800084 	movi	r2,2
    1ad0:	dc400015 	stw	r17,0(sp)
    1ad4:	d8c00615 	stw	r3,24(sp)
    1ad8:	dec00415 	stw	sp,16(sp)
    1adc:	d8800515 	stw	r2,20(sp)
    1ae0:	80000226 	beq	r16,zero,1aec <_puts_r+0x5c>
    1ae4:	80800e17 	ldw	r2,56(r16)
    1ae8:	10001426 	beq	r2,zero,1b3c <_puts_r+0xac>
    1aec:	81400217 	ldw	r5,8(r16)
    1af0:	2880030b 	ldhu	r2,12(r5)
    1af4:	10c8000c 	andi	r3,r2,8192
    1af8:	1800061e 	bne	r3,zero,1b14 <_puts_r+0x84>
    1afc:	29001917 	ldw	r4,100(r5)
    1b00:	00f7ffc4 	movi	r3,-8193
    1b04:	10880014 	ori	r2,r2,8192
    1b08:	20c6703a 	and	r3,r4,r3
    1b0c:	2880030d 	sth	r2,12(r5)
    1b10:	28c01915 	stw	r3,100(r5)
    1b14:	d9800404 	addi	r6,sp,16
    1b18:	8009883a 	mov	r4,r16
    1b1c:	00063240 	call	6324 <__sfvwrite_r>
    1b20:	1000091e 	bne	r2,zero,1b48 <_puts_r+0xb8>
    1b24:	00800284 	movi	r2,10
    1b28:	dfc00917 	ldw	ra,36(sp)
    1b2c:	dc400817 	ldw	r17,32(sp)
    1b30:	dc000717 	ldw	r16,28(sp)
    1b34:	dec00a04 	addi	sp,sp,40
    1b38:	f800283a 	ret
    1b3c:	8009883a 	mov	r4,r16
    1b40:	0005ea00 	call	5ea0 <__sinit>
    1b44:	003fe906 	br	1aec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001aec>
    1b48:	00bfffc4 	movi	r2,-1
    1b4c:	003ff606 	br	1b28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b28>

00001b50 <puts>:
    1b50:	008000b4 	movhi	r2,2
    1b54:	10b49c04 	addi	r2,r2,-11664
    1b58:	200b883a 	mov	r5,r4
    1b5c:	11000017 	ldw	r4,0(r2)
    1b60:	0001a901 	jmpi	1a90 <_puts_r>

00001b64 <strlen>:
    1b64:	208000cc 	andi	r2,r4,3
    1b68:	10002026 	beq	r2,zero,1bec <strlen+0x88>
    1b6c:	20800007 	ldb	r2,0(r4)
    1b70:	10002026 	beq	r2,zero,1bf4 <strlen+0x90>
    1b74:	2005883a 	mov	r2,r4
    1b78:	00000206 	br	1b84 <strlen+0x20>
    1b7c:	10c00007 	ldb	r3,0(r2)
    1b80:	18001826 	beq	r3,zero,1be4 <strlen+0x80>
    1b84:	10800044 	addi	r2,r2,1
    1b88:	10c000cc 	andi	r3,r2,3
    1b8c:	183ffb1e 	bne	r3,zero,1b7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b7c>
    1b90:	10c00017 	ldw	r3,0(r2)
    1b94:	01ffbff4 	movhi	r7,65279
    1b98:	39ffbfc4 	addi	r7,r7,-257
    1b9c:	00ca303a 	nor	r5,zero,r3
    1ba0:	01a02074 	movhi	r6,32897
    1ba4:	19c7883a 	add	r3,r3,r7
    1ba8:	31a02004 	addi	r6,r6,-32640
    1bac:	1946703a 	and	r3,r3,r5
    1bb0:	1986703a 	and	r3,r3,r6
    1bb4:	1800091e 	bne	r3,zero,1bdc <strlen+0x78>
    1bb8:	10800104 	addi	r2,r2,4
    1bbc:	10c00017 	ldw	r3,0(r2)
    1bc0:	19cb883a 	add	r5,r3,r7
    1bc4:	00c6303a 	nor	r3,zero,r3
    1bc8:	28c6703a 	and	r3,r5,r3
    1bcc:	1986703a 	and	r3,r3,r6
    1bd0:	183ff926 	beq	r3,zero,1bb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001bb8>
    1bd4:	00000106 	br	1bdc <strlen+0x78>
    1bd8:	10800044 	addi	r2,r2,1
    1bdc:	10c00007 	ldb	r3,0(r2)
    1be0:	183ffd1e 	bne	r3,zero,1bd8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001bd8>
    1be4:	1105c83a 	sub	r2,r2,r4
    1be8:	f800283a 	ret
    1bec:	2005883a 	mov	r2,r4
    1bf0:	003fe706 	br	1b90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b90>
    1bf4:	0005883a 	mov	r2,zero
    1bf8:	f800283a 	ret

00001bfc <___vfprintf_internal_r>:
    1bfc:	deffb804 	addi	sp,sp,-288
    1c00:	dfc04715 	stw	ra,284(sp)
    1c04:	ddc04515 	stw	r23,276(sp)
    1c08:	dd404315 	stw	r21,268(sp)
    1c0c:	d9002c15 	stw	r4,176(sp)
    1c10:	282f883a 	mov	r23,r5
    1c14:	302b883a 	mov	r21,r6
    1c18:	d9c02d15 	stw	r7,180(sp)
    1c1c:	df004615 	stw	fp,280(sp)
    1c20:	dd804415 	stw	r22,272(sp)
    1c24:	dd004215 	stw	r20,264(sp)
    1c28:	dcc04115 	stw	r19,260(sp)
    1c2c:	dc804015 	stw	r18,256(sp)
    1c30:	dc403f15 	stw	r17,252(sp)
    1c34:	dc003e15 	stw	r16,248(sp)
    1c38:	0006a140 	call	6a14 <_localeconv_r>
    1c3c:	10800017 	ldw	r2,0(r2)
    1c40:	1009883a 	mov	r4,r2
    1c44:	d8803415 	stw	r2,208(sp)
    1c48:	0001b640 	call	1b64 <strlen>
    1c4c:	d8803715 	stw	r2,220(sp)
    1c50:	d8802c17 	ldw	r2,176(sp)
    1c54:	10000226 	beq	r2,zero,1c60 <___vfprintf_internal_r+0x64>
    1c58:	10800e17 	ldw	r2,56(r2)
    1c5c:	1000f926 	beq	r2,zero,2044 <___vfprintf_internal_r+0x448>
    1c60:	b880030b 	ldhu	r2,12(r23)
    1c64:	10c8000c 	andi	r3,r2,8192
    1c68:	1800061e 	bne	r3,zero,1c84 <___vfprintf_internal_r+0x88>
    1c6c:	b9001917 	ldw	r4,100(r23)
    1c70:	00f7ffc4 	movi	r3,-8193
    1c74:	10880014 	ori	r2,r2,8192
    1c78:	20c6703a 	and	r3,r4,r3
    1c7c:	b880030d 	sth	r2,12(r23)
    1c80:	b8c01915 	stw	r3,100(r23)
    1c84:	10c0020c 	andi	r3,r2,8
    1c88:	1800c126 	beq	r3,zero,1f90 <___vfprintf_internal_r+0x394>
    1c8c:	b8c00417 	ldw	r3,16(r23)
    1c90:	1800bf26 	beq	r3,zero,1f90 <___vfprintf_internal_r+0x394>
    1c94:	1080068c 	andi	r2,r2,26
    1c98:	00c00284 	movi	r3,10
    1c9c:	10c0c426 	beq	r2,r3,1fb0 <___vfprintf_internal_r+0x3b4>
    1ca0:	d8c00404 	addi	r3,sp,16
    1ca4:	050000b4 	movhi	r20,2
    1ca8:	d9001e04 	addi	r4,sp,120
    1cac:	a52b9e84 	addi	r20,r20,-20870
    1cb0:	d8c01e15 	stw	r3,120(sp)
    1cb4:	d8002015 	stw	zero,128(sp)
    1cb8:	d8001f15 	stw	zero,124(sp)
    1cbc:	d8003315 	stw	zero,204(sp)
    1cc0:	d8003615 	stw	zero,216(sp)
    1cc4:	d8003815 	stw	zero,224(sp)
    1cc8:	1811883a 	mov	r8,r3
    1ccc:	d8003915 	stw	zero,228(sp)
    1cd0:	d8003a15 	stw	zero,232(sp)
    1cd4:	d8002f15 	stw	zero,188(sp)
    1cd8:	d9002815 	stw	r4,160(sp)
    1cdc:	a8800007 	ldb	r2,0(r21)
    1ce0:	10027b26 	beq	r2,zero,26d0 <___vfprintf_internal_r+0xad4>
    1ce4:	00c00944 	movi	r3,37
    1ce8:	a821883a 	mov	r16,r21
    1cec:	10c0021e 	bne	r2,r3,1cf8 <___vfprintf_internal_r+0xfc>
    1cf0:	00001406 	br	1d44 <___vfprintf_internal_r+0x148>
    1cf4:	10c00326 	beq	r2,r3,1d04 <___vfprintf_internal_r+0x108>
    1cf8:	84000044 	addi	r16,r16,1
    1cfc:	80800007 	ldb	r2,0(r16)
    1d00:	103ffc1e 	bne	r2,zero,1cf4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001cf4>
    1d04:	8563c83a 	sub	r17,r16,r21
    1d08:	88000e26 	beq	r17,zero,1d44 <___vfprintf_internal_r+0x148>
    1d0c:	d8c02017 	ldw	r3,128(sp)
    1d10:	d8801f17 	ldw	r2,124(sp)
    1d14:	45400015 	stw	r21,0(r8)
    1d18:	1c47883a 	add	r3,r3,r17
    1d1c:	10800044 	addi	r2,r2,1
    1d20:	d8c02015 	stw	r3,128(sp)
    1d24:	44400115 	stw	r17,4(r8)
    1d28:	d8801f15 	stw	r2,124(sp)
    1d2c:	00c001c4 	movi	r3,7
    1d30:	1880a716 	blt	r3,r2,1fd0 <___vfprintf_internal_r+0x3d4>
    1d34:	42000204 	addi	r8,r8,8
    1d38:	d9402f17 	ldw	r5,188(sp)
    1d3c:	2c4b883a 	add	r5,r5,r17
    1d40:	d9402f15 	stw	r5,188(sp)
    1d44:	80800007 	ldb	r2,0(r16)
    1d48:	1000a826 	beq	r2,zero,1fec <___vfprintf_internal_r+0x3f0>
    1d4c:	84400047 	ldb	r17,1(r16)
    1d50:	00bfffc4 	movi	r2,-1
    1d54:	85400044 	addi	r21,r16,1
    1d58:	d8002785 	stb	zero,158(sp)
    1d5c:	0007883a 	mov	r3,zero
    1d60:	000f883a 	mov	r7,zero
    1d64:	d8802915 	stw	r2,164(sp)
    1d68:	d8003115 	stw	zero,196(sp)
    1d6c:	0025883a 	mov	r18,zero
    1d70:	01401604 	movi	r5,88
    1d74:	01800244 	movi	r6,9
    1d78:	02800a84 	movi	r10,42
    1d7c:	02401b04 	movi	r9,108
    1d80:	ad400044 	addi	r21,r21,1
    1d84:	88bff804 	addi	r2,r17,-32
    1d88:	28830436 	bltu	r5,r2,299c <___vfprintf_internal_r+0xda0>
    1d8c:	100490ba 	slli	r2,r2,2
    1d90:	01000034 	movhi	r4,0
    1d94:	21076904 	addi	r4,r4,7588
    1d98:	1105883a 	add	r2,r2,r4
    1d9c:	10800017 	ldw	r2,0(r2)
    1da0:	1000683a 	jmp	r2
    1da4:	000028bc 	xorhi	zero,zero,162
    1da8:	0000299c 	xori	zero,zero,166
    1dac:	0000299c 	xori	zero,zero,166
    1db0:	000028dc 	xori	zero,zero,163
    1db4:	0000299c 	xori	zero,zero,166
    1db8:	0000299c 	xori	zero,zero,166
    1dbc:	0000299c 	xori	zero,zero,166
    1dc0:	0000299c 	xori	zero,zero,166
    1dc4:	0000299c 	xori	zero,zero,166
    1dc8:	0000299c 	xori	zero,zero,166
    1dcc:	00002050 	cmplti	zero,zero,129
    1dd0:	000027f8 	rdprs	zero,zero,159
    1dd4:	0000299c 	xori	zero,zero,166
    1dd8:	00001f18 	cmpnei	zero,zero,124
    1ddc:	00002078 	rdprs	zero,zero,129
    1de0:	0000299c 	xori	zero,zero,166
    1de4:	000020b8 	rdprs	zero,zero,130
    1de8:	000020c4 	movi	zero,131
    1dec:	000020c4 	movi	zero,131
    1df0:	000020c4 	movi	zero,131
    1df4:	000020c4 	movi	zero,131
    1df8:	000020c4 	movi	zero,131
    1dfc:	000020c4 	movi	zero,131
    1e00:	000020c4 	movi	zero,131
    1e04:	000020c4 	movi	zero,131
    1e08:	000020c4 	movi	zero,131
    1e0c:	0000299c 	xori	zero,zero,166
    1e10:	0000299c 	xori	zero,zero,166
    1e14:	0000299c 	xori	zero,zero,166
    1e18:	0000299c 	xori	zero,zero,166
    1e1c:	0000299c 	xori	zero,zero,166
    1e20:	0000299c 	xori	zero,zero,166
    1e24:	0000299c 	xori	zero,zero,166
    1e28:	0000299c 	xori	zero,zero,166
    1e2c:	0000299c 	xori	zero,zero,166
    1e30:	0000299c 	xori	zero,zero,166
    1e34:	000020f8 	rdprs	zero,zero,131
    1e38:	000021b4 	movhi	zero,134
    1e3c:	0000299c 	xori	zero,zero,166
    1e40:	000021b4 	movhi	zero,134
    1e44:	0000299c 	xori	zero,zero,166
    1e48:	0000299c 	xori	zero,zero,166
    1e4c:	0000299c 	xori	zero,zero,166
    1e50:	0000299c 	xori	zero,zero,166
    1e54:	00002254 	movui	zero,137
    1e58:	0000299c 	xori	zero,zero,166
    1e5c:	0000299c 	xori	zero,zero,166
    1e60:	00002260 	cmpeqi	zero,zero,137
    1e64:	0000299c 	xori	zero,zero,166
    1e68:	0000299c 	xori	zero,zero,166
    1e6c:	0000299c 	xori	zero,zero,166
    1e70:	0000299c 	xori	zero,zero,166
    1e74:	0000299c 	xori	zero,zero,166
    1e78:	000026d8 	cmpnei	zero,zero,155
    1e7c:	0000299c 	xori	zero,zero,166
    1e80:	0000299c 	xori	zero,zero,166
    1e84:	00002738 	rdprs	zero,zero,156
    1e88:	0000299c 	xori	zero,zero,166
    1e8c:	0000299c 	xori	zero,zero,166
    1e90:	0000299c 	xori	zero,zero,166
    1e94:	0000299c 	xori	zero,zero,166
    1e98:	0000299c 	xori	zero,zero,166
    1e9c:	0000299c 	xori	zero,zero,166
    1ea0:	0000299c 	xori	zero,zero,166
    1ea4:	0000299c 	xori	zero,zero,166
    1ea8:	0000299c 	xori	zero,zero,166
    1eac:	0000299c 	xori	zero,zero,166
    1eb0:	00002948 	cmpgei	zero,zero,165
    1eb4:	000028e8 	cmpgeui	zero,zero,163
    1eb8:	000021b4 	movhi	zero,134
    1ebc:	000021b4 	movhi	zero,134
    1ec0:	000021b4 	movhi	zero,134
    1ec4:	000028f8 	rdprs	zero,zero,163
    1ec8:	000028e8 	cmpgeui	zero,zero,163
    1ecc:	0000299c 	xori	zero,zero,166
    1ed0:	0000299c 	xori	zero,zero,166
    1ed4:	00002904 	movi	zero,164
    1ed8:	0000299c 	xori	zero,zero,166
    1edc:	00002914 	movui	zero,164
    1ee0:	000027e8 	cmpgeui	zero,zero,159
    1ee4:	00001f24 	muli	zero,zero,124
    1ee8:	00002808 	cmpgei	zero,zero,160
    1eec:	0000299c 	xori	zero,zero,166
    1ef0:	00002814 	movui	zero,160
    1ef4:	0000299c 	xori	zero,zero,166
    1ef8:	00002870 	cmpltui	zero,zero,161
    1efc:	0000299c 	xori	zero,zero,166
    1f00:	0000299c 	xori	zero,zero,166
    1f04:	00002880 	call	288 <reset_PS2_input+0x4>
    1f08:	d9003117 	ldw	r4,196(sp)
    1f0c:	d8802d15 	stw	r2,180(sp)
    1f10:	0109c83a 	sub	r4,zero,r4
    1f14:	d9003115 	stw	r4,196(sp)
    1f18:	94800114 	ori	r18,r18,4
    1f1c:	ac400007 	ldb	r17,0(r21)
    1f20:	003f9706 	br	1d80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d80>
    1f24:	00800c04 	movi	r2,48
    1f28:	d9002d17 	ldw	r4,180(sp)
    1f2c:	d9402917 	ldw	r5,164(sp)
    1f30:	d8802705 	stb	r2,156(sp)
    1f34:	00801e04 	movi	r2,120
    1f38:	d8802745 	stb	r2,157(sp)
    1f3c:	d8002785 	stb	zero,158(sp)
    1f40:	20c00104 	addi	r3,r4,4
    1f44:	24c00017 	ldw	r19,0(r4)
    1f48:	002d883a 	mov	r22,zero
    1f4c:	90800094 	ori	r2,r18,2
    1f50:	28029a16 	blt	r5,zero,29bc <___vfprintf_internal_r+0xdc0>
    1f54:	00bfdfc4 	movi	r2,-129
    1f58:	90a4703a 	and	r18,r18,r2
    1f5c:	d8c02d15 	stw	r3,180(sp)
    1f60:	94800094 	ori	r18,r18,2
    1f64:	9802871e 	bne	r19,zero,2984 <___vfprintf_internal_r+0xd88>
    1f68:	008000b4 	movhi	r2,2
    1f6c:	10ab9704 	addi	r2,r2,-20900
    1f70:	d8803915 	stw	r2,228(sp)
    1f74:	04401e04 	movi	r17,120
    1f78:	d8802917 	ldw	r2,164(sp)
    1f7c:	0039883a 	mov	fp,zero
    1f80:	1001e926 	beq	r2,zero,2728 <___vfprintf_internal_r+0xb2c>
    1f84:	0027883a 	mov	r19,zero
    1f88:	002d883a 	mov	r22,zero
    1f8c:	00020506 	br	27a4 <___vfprintf_internal_r+0xba8>
    1f90:	d9002c17 	ldw	r4,176(sp)
    1f94:	b80b883a 	mov	r5,r23
    1f98:	0003ecc0 	call	3ecc <__swsetup_r>
    1f9c:	1005ac1e 	bne	r2,zero,3650 <___vfprintf_internal_r+0x1a54>
    1fa0:	b880030b 	ldhu	r2,12(r23)
    1fa4:	00c00284 	movi	r3,10
    1fa8:	1080068c 	andi	r2,r2,26
    1fac:	10ff3c1e 	bne	r2,r3,1ca0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ca0>
    1fb0:	b880038f 	ldh	r2,14(r23)
    1fb4:	103f3a16 	blt	r2,zero,1ca0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ca0>
    1fb8:	d9c02d17 	ldw	r7,180(sp)
    1fbc:	d9002c17 	ldw	r4,176(sp)
    1fc0:	a80d883a 	mov	r6,r21
    1fc4:	b80b883a 	mov	r5,r23
    1fc8:	0003e100 	call	3e10 <__sbprintf>
    1fcc:	00001106 	br	2014 <___vfprintf_internal_r+0x418>
    1fd0:	d9002c17 	ldw	r4,176(sp)
    1fd4:	d9801e04 	addi	r6,sp,120
    1fd8:	b80b883a 	mov	r5,r23
    1fdc:	00091f80 	call	91f8 <__sprint_r>
    1fe0:	1000081e 	bne	r2,zero,2004 <___vfprintf_internal_r+0x408>
    1fe4:	da000404 	addi	r8,sp,16
    1fe8:	003f5306 	br	1d38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d38>
    1fec:	d8802017 	ldw	r2,128(sp)
    1ff0:	10000426 	beq	r2,zero,2004 <___vfprintf_internal_r+0x408>
    1ff4:	d9002c17 	ldw	r4,176(sp)
    1ff8:	d9801e04 	addi	r6,sp,120
    1ffc:	b80b883a 	mov	r5,r23
    2000:	00091f80 	call	91f8 <__sprint_r>
    2004:	b880030b 	ldhu	r2,12(r23)
    2008:	1080100c 	andi	r2,r2,64
    200c:	1005901e 	bne	r2,zero,3650 <___vfprintf_internal_r+0x1a54>
    2010:	d8802f17 	ldw	r2,188(sp)
    2014:	dfc04717 	ldw	ra,284(sp)
    2018:	df004617 	ldw	fp,280(sp)
    201c:	ddc04517 	ldw	r23,276(sp)
    2020:	dd804417 	ldw	r22,272(sp)
    2024:	dd404317 	ldw	r21,268(sp)
    2028:	dd004217 	ldw	r20,264(sp)
    202c:	dcc04117 	ldw	r19,260(sp)
    2030:	dc804017 	ldw	r18,256(sp)
    2034:	dc403f17 	ldw	r17,252(sp)
    2038:	dc003e17 	ldw	r16,248(sp)
    203c:	dec04804 	addi	sp,sp,288
    2040:	f800283a 	ret
    2044:	d9002c17 	ldw	r4,176(sp)
    2048:	0005ea00 	call	5ea0 <__sinit>
    204c:	003f0406 	br	1c60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c60>
    2050:	d8802d17 	ldw	r2,180(sp)
    2054:	d9002d17 	ldw	r4,180(sp)
    2058:	10800017 	ldw	r2,0(r2)
    205c:	d8803115 	stw	r2,196(sp)
    2060:	20800104 	addi	r2,r4,4
    2064:	d9003117 	ldw	r4,196(sp)
    2068:	203fa716 	blt	r4,zero,1f08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001f08>
    206c:	d8802d15 	stw	r2,180(sp)
    2070:	ac400007 	ldb	r17,0(r21)
    2074:	003f4206 	br	1d80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d80>
    2078:	ac400007 	ldb	r17,0(r21)
    207c:	aac00044 	addi	r11,r21,1
    2080:	8a872826 	beq	r17,r10,3d24 <___vfprintf_internal_r+0x2128>
    2084:	88bff404 	addi	r2,r17,-48
    2088:	0009883a 	mov	r4,zero
    208c:	30867d36 	bltu	r6,r2,3a84 <___vfprintf_internal_r+0x1e88>
    2090:	5c400007 	ldb	r17,0(r11)
    2094:	210002a4 	muli	r4,r4,10
    2098:	5d400044 	addi	r21,r11,1
    209c:	a817883a 	mov	r11,r21
    20a0:	2089883a 	add	r4,r4,r2
    20a4:	88bff404 	addi	r2,r17,-48
    20a8:	30bff92e 	bgeu	r6,r2,2090 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002090>
    20ac:	2005c916 	blt	r4,zero,37d4 <___vfprintf_internal_r+0x1bd8>
    20b0:	d9002915 	stw	r4,164(sp)
    20b4:	003f3306 	br	1d84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d84>
    20b8:	94802014 	ori	r18,r18,128
    20bc:	ac400007 	ldb	r17,0(r21)
    20c0:	003f2f06 	br	1d80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d80>
    20c4:	a809883a 	mov	r4,r21
    20c8:	d8003115 	stw	zero,196(sp)
    20cc:	88bff404 	addi	r2,r17,-48
    20d0:	0017883a 	mov	r11,zero
    20d4:	24400007 	ldb	r17,0(r4)
    20d8:	5ac002a4 	muli	r11,r11,10
    20dc:	ad400044 	addi	r21,r21,1
    20e0:	a809883a 	mov	r4,r21
    20e4:	12d7883a 	add	r11,r2,r11
    20e8:	88bff404 	addi	r2,r17,-48
    20ec:	30bff92e 	bgeu	r6,r2,20d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70020d4>
    20f0:	dac03115 	stw	r11,196(sp)
    20f4:	003f2306 	br	1d84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d84>
    20f8:	18c03fcc 	andi	r3,r3,255
    20fc:	18072b1e 	bne	r3,zero,3dac <___vfprintf_internal_r+0x21b0>
    2100:	94800414 	ori	r18,r18,16
    2104:	9080080c 	andi	r2,r18,32
    2108:	10037b26 	beq	r2,zero,2ef8 <___vfprintf_internal_r+0x12fc>
    210c:	d9402d17 	ldw	r5,180(sp)
    2110:	28800117 	ldw	r2,4(r5)
    2114:	2cc00017 	ldw	r19,0(r5)
    2118:	29400204 	addi	r5,r5,8
    211c:	d9402d15 	stw	r5,180(sp)
    2120:	102d883a 	mov	r22,r2
    2124:	10044b16 	blt	r2,zero,3254 <___vfprintf_internal_r+0x1658>
    2128:	d9402917 	ldw	r5,164(sp)
    212c:	df002783 	ldbu	fp,158(sp)
    2130:	2803bc16 	blt	r5,zero,3024 <___vfprintf_internal_r+0x1428>
    2134:	00ffdfc4 	movi	r3,-129
    2138:	9d84b03a 	or	r2,r19,r22
    213c:	90e4703a 	and	r18,r18,r3
    2140:	10017726 	beq	r2,zero,2720 <___vfprintf_internal_r+0xb24>
    2144:	b0038326 	beq	r22,zero,2f54 <___vfprintf_internal_r+0x1358>
    2148:	dc402a15 	stw	r17,168(sp)
    214c:	dc001e04 	addi	r16,sp,120
    2150:	b023883a 	mov	r17,r22
    2154:	402d883a 	mov	r22,r8
    2158:	9809883a 	mov	r4,r19
    215c:	880b883a 	mov	r5,r17
    2160:	01800284 	movi	r6,10
    2164:	000f883a 	mov	r7,zero
    2168:	000b5f00 	call	b5f0 <__umoddi3>
    216c:	10800c04 	addi	r2,r2,48
    2170:	843fffc4 	addi	r16,r16,-1
    2174:	9809883a 	mov	r4,r19
    2178:	880b883a 	mov	r5,r17
    217c:	80800005 	stb	r2,0(r16)
    2180:	01800284 	movi	r6,10
    2184:	000f883a 	mov	r7,zero
    2188:	000b0780 	call	b078 <__udivdi3>
    218c:	1027883a 	mov	r19,r2
    2190:	10c4b03a 	or	r2,r2,r3
    2194:	1823883a 	mov	r17,r3
    2198:	103fef1e 	bne	r2,zero,2158 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002158>
    219c:	d8c02817 	ldw	r3,160(sp)
    21a0:	dc402a17 	ldw	r17,168(sp)
    21a4:	b011883a 	mov	r8,r22
    21a8:	1c07c83a 	sub	r3,r3,r16
    21ac:	d8c02e15 	stw	r3,184(sp)
    21b0:	00005906 	br	2318 <___vfprintf_internal_r+0x71c>
    21b4:	18c03fcc 	andi	r3,r3,255
    21b8:	1806fa1e 	bne	r3,zero,3da4 <___vfprintf_internal_r+0x21a8>
    21bc:	9080020c 	andi	r2,r18,8
    21c0:	10048a26 	beq	r2,zero,33ec <___vfprintf_internal_r+0x17f0>
    21c4:	d8c02d17 	ldw	r3,180(sp)
    21c8:	d9002d17 	ldw	r4,180(sp)
    21cc:	d9402d17 	ldw	r5,180(sp)
    21d0:	18c00017 	ldw	r3,0(r3)
    21d4:	21000117 	ldw	r4,4(r4)
    21d8:	29400204 	addi	r5,r5,8
    21dc:	d8c03615 	stw	r3,216(sp)
    21e0:	d9003815 	stw	r4,224(sp)
    21e4:	d9402d15 	stw	r5,180(sp)
    21e8:	d9003617 	ldw	r4,216(sp)
    21ec:	d9403817 	ldw	r5,224(sp)
    21f0:	da003d15 	stw	r8,244(sp)
    21f4:	04000044 	movi	r16,1
    21f8:	0008e1c0 	call	8e1c <__fpclassifyd>
    21fc:	da003d17 	ldw	r8,244(sp)
    2200:	14041f1e 	bne	r2,r16,3280 <___vfprintf_internal_r+0x1684>
    2204:	d9003617 	ldw	r4,216(sp)
    2208:	d9403817 	ldw	r5,224(sp)
    220c:	000d883a 	mov	r6,zero
    2210:	000f883a 	mov	r7,zero
    2214:	000cfd40 	call	cfd4 <__ledf2>
    2218:	da003d17 	ldw	r8,244(sp)
    221c:	1005be16 	blt	r2,zero,3918 <___vfprintf_internal_r+0x1d1c>
    2220:	df002783 	ldbu	fp,158(sp)
    2224:	008011c4 	movi	r2,71
    2228:	1445330e 	bge	r2,r17,36f8 <___vfprintf_internal_r+0x1afc>
    222c:	040000b4 	movhi	r16,2
    2230:	842b8f04 	addi	r16,r16,-20932
    2234:	00c000c4 	movi	r3,3
    2238:	00bfdfc4 	movi	r2,-129
    223c:	d8c02a15 	stw	r3,168(sp)
    2240:	90a4703a 	and	r18,r18,r2
    2244:	d8c02e15 	stw	r3,184(sp)
    2248:	d8002915 	stw	zero,164(sp)
    224c:	d8003215 	stw	zero,200(sp)
    2250:	00003706 	br	2330 <___vfprintf_internal_r+0x734>
    2254:	94800214 	ori	r18,r18,8
    2258:	ac400007 	ldb	r17,0(r21)
    225c:	003ec806 	br	1d80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d80>
    2260:	18c03fcc 	andi	r3,r3,255
    2264:	1806db1e 	bne	r3,zero,3dd4 <___vfprintf_internal_r+0x21d8>
    2268:	94800414 	ori	r18,r18,16
    226c:	9080080c 	andi	r2,r18,32
    2270:	1002d826 	beq	r2,zero,2dd4 <___vfprintf_internal_r+0x11d8>
    2274:	d9402d17 	ldw	r5,180(sp)
    2278:	d8c02917 	ldw	r3,164(sp)
    227c:	d8002785 	stb	zero,158(sp)
    2280:	28800204 	addi	r2,r5,8
    2284:	2cc00017 	ldw	r19,0(r5)
    2288:	2d800117 	ldw	r22,4(r5)
    228c:	18048f16 	blt	r3,zero,34cc <___vfprintf_internal_r+0x18d0>
    2290:	013fdfc4 	movi	r4,-129
    2294:	9d86b03a 	or	r3,r19,r22
    2298:	d8802d15 	stw	r2,180(sp)
    229c:	9124703a 	and	r18,r18,r4
    22a0:	1802d91e 	bne	r3,zero,2e08 <___vfprintf_internal_r+0x120c>
    22a4:	d8c02917 	ldw	r3,164(sp)
    22a8:	0039883a 	mov	fp,zero
    22ac:	1805c326 	beq	r3,zero,39bc <___vfprintf_internal_r+0x1dc0>
    22b0:	0027883a 	mov	r19,zero
    22b4:	002d883a 	mov	r22,zero
    22b8:	dc001e04 	addi	r16,sp,120
    22bc:	9806d0fa 	srli	r3,r19,3
    22c0:	b008977a 	slli	r4,r22,29
    22c4:	b02cd0fa 	srli	r22,r22,3
    22c8:	9cc001cc 	andi	r19,r19,7
    22cc:	98800c04 	addi	r2,r19,48
    22d0:	843fffc4 	addi	r16,r16,-1
    22d4:	20e6b03a 	or	r19,r4,r3
    22d8:	80800005 	stb	r2,0(r16)
    22dc:	9d86b03a 	or	r3,r19,r22
    22e0:	183ff61e 	bne	r3,zero,22bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70022bc>
    22e4:	90c0004c 	andi	r3,r18,1
    22e8:	18013b26 	beq	r3,zero,27d8 <___vfprintf_internal_r+0xbdc>
    22ec:	10803fcc 	andi	r2,r2,255
    22f0:	1080201c 	xori	r2,r2,128
    22f4:	10bfe004 	addi	r2,r2,-128
    22f8:	00c00c04 	movi	r3,48
    22fc:	10c13626 	beq	r2,r3,27d8 <___vfprintf_internal_r+0xbdc>
    2300:	80ffffc5 	stb	r3,-1(r16)
    2304:	d8c02817 	ldw	r3,160(sp)
    2308:	80bfffc4 	addi	r2,r16,-1
    230c:	1021883a 	mov	r16,r2
    2310:	1887c83a 	sub	r3,r3,r2
    2314:	d8c02e15 	stw	r3,184(sp)
    2318:	d8802e17 	ldw	r2,184(sp)
    231c:	d9002917 	ldw	r4,164(sp)
    2320:	1100010e 	bge	r2,r4,2328 <___vfprintf_internal_r+0x72c>
    2324:	2005883a 	mov	r2,r4
    2328:	d8802a15 	stw	r2,168(sp)
    232c:	d8003215 	stw	zero,200(sp)
    2330:	e7003fcc 	andi	fp,fp,255
    2334:	e700201c 	xori	fp,fp,128
    2338:	e73fe004 	addi	fp,fp,-128
    233c:	e0000326 	beq	fp,zero,234c <___vfprintf_internal_r+0x750>
    2340:	d8c02a17 	ldw	r3,168(sp)
    2344:	18c00044 	addi	r3,r3,1
    2348:	d8c02a15 	stw	r3,168(sp)
    234c:	90c0008c 	andi	r3,r18,2
    2350:	d8c02b15 	stw	r3,172(sp)
    2354:	18000326 	beq	r3,zero,2364 <___vfprintf_internal_r+0x768>
    2358:	d8c02a17 	ldw	r3,168(sp)
    235c:	18c00084 	addi	r3,r3,2
    2360:	d8c02a15 	stw	r3,168(sp)
    2364:	90c0210c 	andi	r3,r18,132
    2368:	d8c03015 	stw	r3,192(sp)
    236c:	1801a31e 	bne	r3,zero,29fc <___vfprintf_internal_r+0xe00>
    2370:	d9003117 	ldw	r4,196(sp)
    2374:	d8c02a17 	ldw	r3,168(sp)
    2378:	20e7c83a 	sub	r19,r4,r3
    237c:	04c19f0e 	bge	zero,r19,29fc <___vfprintf_internal_r+0xe00>
    2380:	02400404 	movi	r9,16
    2384:	d8c02017 	ldw	r3,128(sp)
    2388:	d8801f17 	ldw	r2,124(sp)
    238c:	4cc50d0e 	bge	r9,r19,37c4 <___vfprintf_internal_r+0x1bc8>
    2390:	014000b4 	movhi	r5,2
    2394:	296ba284 	addi	r5,r5,-20854
    2398:	dc403b15 	stw	r17,236(sp)
    239c:	d9403515 	stw	r5,212(sp)
    23a0:	9823883a 	mov	r17,r19
    23a4:	482d883a 	mov	r22,r9
    23a8:	9027883a 	mov	r19,r18
    23ac:	070001c4 	movi	fp,7
    23b0:	8025883a 	mov	r18,r16
    23b4:	dc002c17 	ldw	r16,176(sp)
    23b8:	00000306 	br	23c8 <___vfprintf_internal_r+0x7cc>
    23bc:	8c7ffc04 	addi	r17,r17,-16
    23c0:	42000204 	addi	r8,r8,8
    23c4:	b440130e 	bge	r22,r17,2414 <___vfprintf_internal_r+0x818>
    23c8:	010000b4 	movhi	r4,2
    23cc:	18c00404 	addi	r3,r3,16
    23d0:	10800044 	addi	r2,r2,1
    23d4:	212ba284 	addi	r4,r4,-20854
    23d8:	41000015 	stw	r4,0(r8)
    23dc:	45800115 	stw	r22,4(r8)
    23e0:	d8c02015 	stw	r3,128(sp)
    23e4:	d8801f15 	stw	r2,124(sp)
    23e8:	e0bff40e 	bge	fp,r2,23bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70023bc>
    23ec:	d9801e04 	addi	r6,sp,120
    23f0:	b80b883a 	mov	r5,r23
    23f4:	8009883a 	mov	r4,r16
    23f8:	00091f80 	call	91f8 <__sprint_r>
    23fc:	103f011e 	bne	r2,zero,2004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002004>
    2400:	8c7ffc04 	addi	r17,r17,-16
    2404:	d8c02017 	ldw	r3,128(sp)
    2408:	d8801f17 	ldw	r2,124(sp)
    240c:	da000404 	addi	r8,sp,16
    2410:	b47fed16 	blt	r22,r17,23c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70023c8>
    2414:	9021883a 	mov	r16,r18
    2418:	9825883a 	mov	r18,r19
    241c:	8827883a 	mov	r19,r17
    2420:	dc403b17 	ldw	r17,236(sp)
    2424:	d9403517 	ldw	r5,212(sp)
    2428:	98c7883a 	add	r3,r19,r3
    242c:	10800044 	addi	r2,r2,1
    2430:	41400015 	stw	r5,0(r8)
    2434:	44c00115 	stw	r19,4(r8)
    2438:	d8c02015 	stw	r3,128(sp)
    243c:	d8801f15 	stw	r2,124(sp)
    2440:	010001c4 	movi	r4,7
    2444:	2082a316 	blt	r4,r2,2ed4 <___vfprintf_internal_r+0x12d8>
    2448:	df002787 	ldb	fp,158(sp)
    244c:	42000204 	addi	r8,r8,8
    2450:	e0000c26 	beq	fp,zero,2484 <___vfprintf_internal_r+0x888>
    2454:	d8801f17 	ldw	r2,124(sp)
    2458:	d9002784 	addi	r4,sp,158
    245c:	18c00044 	addi	r3,r3,1
    2460:	10800044 	addi	r2,r2,1
    2464:	41000015 	stw	r4,0(r8)
    2468:	01000044 	movi	r4,1
    246c:	41000115 	stw	r4,4(r8)
    2470:	d8c02015 	stw	r3,128(sp)
    2474:	d8801f15 	stw	r2,124(sp)
    2478:	010001c4 	movi	r4,7
    247c:	20823c16 	blt	r4,r2,2d70 <___vfprintf_internal_r+0x1174>
    2480:	42000204 	addi	r8,r8,8
    2484:	d8802b17 	ldw	r2,172(sp)
    2488:	10000c26 	beq	r2,zero,24bc <___vfprintf_internal_r+0x8c0>
    248c:	d8801f17 	ldw	r2,124(sp)
    2490:	d9002704 	addi	r4,sp,156
    2494:	18c00084 	addi	r3,r3,2
    2498:	10800044 	addi	r2,r2,1
    249c:	41000015 	stw	r4,0(r8)
    24a0:	01000084 	movi	r4,2
    24a4:	41000115 	stw	r4,4(r8)
    24a8:	d8c02015 	stw	r3,128(sp)
    24ac:	d8801f15 	stw	r2,124(sp)
    24b0:	010001c4 	movi	r4,7
    24b4:	20823616 	blt	r4,r2,2d90 <___vfprintf_internal_r+0x1194>
    24b8:	42000204 	addi	r8,r8,8
    24bc:	d9003017 	ldw	r4,192(sp)
    24c0:	00802004 	movi	r2,128
    24c4:	20819926 	beq	r4,r2,2b2c <___vfprintf_internal_r+0xf30>
    24c8:	d9402917 	ldw	r5,164(sp)
    24cc:	d8802e17 	ldw	r2,184(sp)
    24d0:	28adc83a 	sub	r22,r5,r2
    24d4:	0580310e 	bge	zero,r22,259c <___vfprintf_internal_r+0x9a0>
    24d8:	07000404 	movi	fp,16
    24dc:	d8801f17 	ldw	r2,124(sp)
    24e0:	e584140e 	bge	fp,r22,3534 <___vfprintf_internal_r+0x1938>
    24e4:	014000b4 	movhi	r5,2
    24e8:	296b9e84 	addi	r5,r5,-20870
    24ec:	dc402915 	stw	r17,164(sp)
    24f0:	d9402b15 	stw	r5,172(sp)
    24f4:	b023883a 	mov	r17,r22
    24f8:	04c001c4 	movi	r19,7
    24fc:	a82d883a 	mov	r22,r21
    2500:	902b883a 	mov	r21,r18
    2504:	8025883a 	mov	r18,r16
    2508:	dc002c17 	ldw	r16,176(sp)
    250c:	00000306 	br	251c <___vfprintf_internal_r+0x920>
    2510:	8c7ffc04 	addi	r17,r17,-16
    2514:	42000204 	addi	r8,r8,8
    2518:	e440110e 	bge	fp,r17,2560 <___vfprintf_internal_r+0x964>
    251c:	18c00404 	addi	r3,r3,16
    2520:	10800044 	addi	r2,r2,1
    2524:	45000015 	stw	r20,0(r8)
    2528:	47000115 	stw	fp,4(r8)
    252c:	d8c02015 	stw	r3,128(sp)
    2530:	d8801f15 	stw	r2,124(sp)
    2534:	98bff60e 	bge	r19,r2,2510 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002510>
    2538:	d9801e04 	addi	r6,sp,120
    253c:	b80b883a 	mov	r5,r23
    2540:	8009883a 	mov	r4,r16
    2544:	00091f80 	call	91f8 <__sprint_r>
    2548:	103eae1e 	bne	r2,zero,2004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002004>
    254c:	8c7ffc04 	addi	r17,r17,-16
    2550:	d8c02017 	ldw	r3,128(sp)
    2554:	d8801f17 	ldw	r2,124(sp)
    2558:	da000404 	addi	r8,sp,16
    255c:	e47fef16 	blt	fp,r17,251c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700251c>
    2560:	9021883a 	mov	r16,r18
    2564:	a825883a 	mov	r18,r21
    2568:	b02b883a 	mov	r21,r22
    256c:	882d883a 	mov	r22,r17
    2570:	dc402917 	ldw	r17,164(sp)
    2574:	d9002b17 	ldw	r4,172(sp)
    2578:	1d87883a 	add	r3,r3,r22
    257c:	10800044 	addi	r2,r2,1
    2580:	41000015 	stw	r4,0(r8)
    2584:	45800115 	stw	r22,4(r8)
    2588:	d8c02015 	stw	r3,128(sp)
    258c:	d8801f15 	stw	r2,124(sp)
    2590:	010001c4 	movi	r4,7
    2594:	2081ee16 	blt	r4,r2,2d50 <___vfprintf_internal_r+0x1154>
    2598:	42000204 	addi	r8,r8,8
    259c:	9080400c 	andi	r2,r18,256
    25a0:	1001181e 	bne	r2,zero,2a04 <___vfprintf_internal_r+0xe08>
    25a4:	d9402e17 	ldw	r5,184(sp)
    25a8:	d8801f17 	ldw	r2,124(sp)
    25ac:	44000015 	stw	r16,0(r8)
    25b0:	1947883a 	add	r3,r3,r5
    25b4:	10800044 	addi	r2,r2,1
    25b8:	41400115 	stw	r5,4(r8)
    25bc:	d8c02015 	stw	r3,128(sp)
    25c0:	d8801f15 	stw	r2,124(sp)
    25c4:	010001c4 	movi	r4,7
    25c8:	2081d316 	blt	r4,r2,2d18 <___vfprintf_internal_r+0x111c>
    25cc:	42000204 	addi	r8,r8,8
    25d0:	9480010c 	andi	r18,r18,4
    25d4:	90003226 	beq	r18,zero,26a0 <___vfprintf_internal_r+0xaa4>
    25d8:	d9403117 	ldw	r5,196(sp)
    25dc:	d8802a17 	ldw	r2,168(sp)
    25e0:	28a1c83a 	sub	r16,r5,r2
    25e4:	04002e0e 	bge	zero,r16,26a0 <___vfprintf_internal_r+0xaa4>
    25e8:	04400404 	movi	r17,16
    25ec:	d8801f17 	ldw	r2,124(sp)
    25f0:	8c04a20e 	bge	r17,r16,387c <___vfprintf_internal_r+0x1c80>
    25f4:	014000b4 	movhi	r5,2
    25f8:	296ba284 	addi	r5,r5,-20854
    25fc:	d9403515 	stw	r5,212(sp)
    2600:	048001c4 	movi	r18,7
    2604:	dcc02c17 	ldw	r19,176(sp)
    2608:	00000306 	br	2618 <___vfprintf_internal_r+0xa1c>
    260c:	843ffc04 	addi	r16,r16,-16
    2610:	42000204 	addi	r8,r8,8
    2614:	8c00130e 	bge	r17,r16,2664 <___vfprintf_internal_r+0xa68>
    2618:	010000b4 	movhi	r4,2
    261c:	18c00404 	addi	r3,r3,16
    2620:	10800044 	addi	r2,r2,1
    2624:	212ba284 	addi	r4,r4,-20854
    2628:	41000015 	stw	r4,0(r8)
    262c:	44400115 	stw	r17,4(r8)
    2630:	d8c02015 	stw	r3,128(sp)
    2634:	d8801f15 	stw	r2,124(sp)
    2638:	90bff40e 	bge	r18,r2,260c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700260c>
    263c:	d9801e04 	addi	r6,sp,120
    2640:	b80b883a 	mov	r5,r23
    2644:	9809883a 	mov	r4,r19
    2648:	00091f80 	call	91f8 <__sprint_r>
    264c:	103e6d1e 	bne	r2,zero,2004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002004>
    2650:	843ffc04 	addi	r16,r16,-16
    2654:	d8c02017 	ldw	r3,128(sp)
    2658:	d8801f17 	ldw	r2,124(sp)
    265c:	da000404 	addi	r8,sp,16
    2660:	8c3fed16 	blt	r17,r16,2618 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002618>
    2664:	d9403517 	ldw	r5,212(sp)
    2668:	1c07883a 	add	r3,r3,r16
    266c:	10800044 	addi	r2,r2,1
    2670:	41400015 	stw	r5,0(r8)
    2674:	44000115 	stw	r16,4(r8)
    2678:	d8c02015 	stw	r3,128(sp)
    267c:	d8801f15 	stw	r2,124(sp)
    2680:	010001c4 	movi	r4,7
    2684:	2080060e 	bge	r4,r2,26a0 <___vfprintf_internal_r+0xaa4>
    2688:	d9002c17 	ldw	r4,176(sp)
    268c:	d9801e04 	addi	r6,sp,120
    2690:	b80b883a 	mov	r5,r23
    2694:	00091f80 	call	91f8 <__sprint_r>
    2698:	103e5a1e 	bne	r2,zero,2004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002004>
    269c:	d8c02017 	ldw	r3,128(sp)
    26a0:	d8803117 	ldw	r2,196(sp)
    26a4:	d9002a17 	ldw	r4,168(sp)
    26a8:	1100010e 	bge	r2,r4,26b0 <___vfprintf_internal_r+0xab4>
    26ac:	2005883a 	mov	r2,r4
    26b0:	d9402f17 	ldw	r5,188(sp)
    26b4:	288b883a 	add	r5,r5,r2
    26b8:	d9402f15 	stw	r5,188(sp)
    26bc:	18019e1e 	bne	r3,zero,2d38 <___vfprintf_internal_r+0x113c>
    26c0:	a8800007 	ldb	r2,0(r21)
    26c4:	d8001f15 	stw	zero,124(sp)
    26c8:	da000404 	addi	r8,sp,16
    26cc:	103d851e 	bne	r2,zero,1ce4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ce4>
    26d0:	a821883a 	mov	r16,r21
    26d4:	003d9b06 	br	1d44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d44>
    26d8:	18c03fcc 	andi	r3,r3,255
    26dc:	1805c11e 	bne	r3,zero,3de4 <___vfprintf_internal_r+0x21e8>
    26e0:	94800414 	ori	r18,r18,16
    26e4:	9080080c 	andi	r2,r18,32
    26e8:	10020c26 	beq	r2,zero,2f1c <___vfprintf_internal_r+0x1320>
    26ec:	d8802d17 	ldw	r2,180(sp)
    26f0:	d9002917 	ldw	r4,164(sp)
    26f4:	d8002785 	stb	zero,158(sp)
    26f8:	10c00204 	addi	r3,r2,8
    26fc:	14c00017 	ldw	r19,0(r2)
    2700:	15800117 	ldw	r22,4(r2)
    2704:	20040f16 	blt	r4,zero,3744 <___vfprintf_internal_r+0x1b48>
    2708:	013fdfc4 	movi	r4,-129
    270c:	9d84b03a 	or	r2,r19,r22
    2710:	d8c02d15 	stw	r3,180(sp)
    2714:	9124703a 	and	r18,r18,r4
    2718:	0039883a 	mov	fp,zero
    271c:	103e891e 	bne	r2,zero,2144 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002144>
    2720:	d9002917 	ldw	r4,164(sp)
    2724:	2002c11e 	bne	r4,zero,322c <___vfprintf_internal_r+0x1630>
    2728:	d8002915 	stw	zero,164(sp)
    272c:	d8002e15 	stw	zero,184(sp)
    2730:	dc001e04 	addi	r16,sp,120
    2734:	003ef806 	br	2318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002318>
    2738:	18c03fcc 	andi	r3,r3,255
    273c:	18059d1e 	bne	r3,zero,3db4 <___vfprintf_internal_r+0x21b8>
    2740:	014000b4 	movhi	r5,2
    2744:	296b9204 	addi	r5,r5,-20920
    2748:	d9403915 	stw	r5,228(sp)
    274c:	9080080c 	andi	r2,r18,32
    2750:	10005226 	beq	r2,zero,289c <___vfprintf_internal_r+0xca0>
    2754:	d8802d17 	ldw	r2,180(sp)
    2758:	14c00017 	ldw	r19,0(r2)
    275c:	15800117 	ldw	r22,4(r2)
    2760:	10800204 	addi	r2,r2,8
    2764:	d8802d15 	stw	r2,180(sp)
    2768:	9080004c 	andi	r2,r18,1
    276c:	10019026 	beq	r2,zero,2db0 <___vfprintf_internal_r+0x11b4>
    2770:	9d84b03a 	or	r2,r19,r22
    2774:	10036926 	beq	r2,zero,351c <___vfprintf_internal_r+0x1920>
    2778:	d8c02917 	ldw	r3,164(sp)
    277c:	00800c04 	movi	r2,48
    2780:	d8802705 	stb	r2,156(sp)
    2784:	dc402745 	stb	r17,157(sp)
    2788:	d8002785 	stb	zero,158(sp)
    278c:	90800094 	ori	r2,r18,2
    2790:	18045d16 	blt	r3,zero,3908 <___vfprintf_internal_r+0x1d0c>
    2794:	00bfdfc4 	movi	r2,-129
    2798:	90a4703a 	and	r18,r18,r2
    279c:	94800094 	ori	r18,r18,2
    27a0:	0039883a 	mov	fp,zero
    27a4:	d9003917 	ldw	r4,228(sp)
    27a8:	dc001e04 	addi	r16,sp,120
    27ac:	988003cc 	andi	r2,r19,15
    27b0:	b006973a 	slli	r3,r22,28
    27b4:	2085883a 	add	r2,r4,r2
    27b8:	9826d13a 	srli	r19,r19,4
    27bc:	10800003 	ldbu	r2,0(r2)
    27c0:	b02cd13a 	srli	r22,r22,4
    27c4:	843fffc4 	addi	r16,r16,-1
    27c8:	1ce6b03a 	or	r19,r3,r19
    27cc:	80800005 	stb	r2,0(r16)
    27d0:	9d84b03a 	or	r2,r19,r22
    27d4:	103ff51e 	bne	r2,zero,27ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70027ac>
    27d8:	d8c02817 	ldw	r3,160(sp)
    27dc:	1c07c83a 	sub	r3,r3,r16
    27e0:	d8c02e15 	stw	r3,184(sp)
    27e4:	003ecc06 	br	2318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002318>
    27e8:	18c03fcc 	andi	r3,r3,255
    27ec:	183e9f26 	beq	r3,zero,226c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700226c>
    27f0:	d9c02785 	stb	r7,158(sp)
    27f4:	003e9d06 	br	226c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700226c>
    27f8:	00c00044 	movi	r3,1
    27fc:	01c00ac4 	movi	r7,43
    2800:	ac400007 	ldb	r17,0(r21)
    2804:	003d5e06 	br	1d80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d80>
    2808:	94800814 	ori	r18,r18,32
    280c:	ac400007 	ldb	r17,0(r21)
    2810:	003d5b06 	br	1d80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d80>
    2814:	d8c02d17 	ldw	r3,180(sp)
    2818:	d8002785 	stb	zero,158(sp)
    281c:	1c000017 	ldw	r16,0(r3)
    2820:	1cc00104 	addi	r19,r3,4
    2824:	80041926 	beq	r16,zero,388c <___vfprintf_internal_r+0x1c90>
    2828:	d9002917 	ldw	r4,164(sp)
    282c:	2003d016 	blt	r4,zero,3770 <___vfprintf_internal_r+0x1b74>
    2830:	200d883a 	mov	r6,r4
    2834:	000b883a 	mov	r5,zero
    2838:	8009883a 	mov	r4,r16
    283c:	da003d15 	stw	r8,244(sp)
    2840:	000740c0 	call	740c <memchr>
    2844:	da003d17 	ldw	r8,244(sp)
    2848:	10045426 	beq	r2,zero,399c <___vfprintf_internal_r+0x1da0>
    284c:	1405c83a 	sub	r2,r2,r16
    2850:	d8802e15 	stw	r2,184(sp)
    2854:	1003cc16 	blt	r2,zero,3788 <___vfprintf_internal_r+0x1b8c>
    2858:	df002783 	ldbu	fp,158(sp)
    285c:	d8802a15 	stw	r2,168(sp)
    2860:	dcc02d15 	stw	r19,180(sp)
    2864:	d8002915 	stw	zero,164(sp)
    2868:	d8003215 	stw	zero,200(sp)
    286c:	003eb006 	br	2330 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002330>
    2870:	18c03fcc 	andi	r3,r3,255
    2874:	183f9b26 	beq	r3,zero,26e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70026e4>
    2878:	d9c02785 	stb	r7,158(sp)
    287c:	003f9906 	br	26e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70026e4>
    2880:	18c03fcc 	andi	r3,r3,255
    2884:	1805551e 	bne	r3,zero,3ddc <___vfprintf_internal_r+0x21e0>
    2888:	014000b4 	movhi	r5,2
    288c:	296b9704 	addi	r5,r5,-20900
    2890:	d9403915 	stw	r5,228(sp)
    2894:	9080080c 	andi	r2,r18,32
    2898:	103fae1e 	bne	r2,zero,2754 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002754>
    289c:	9080040c 	andi	r2,r18,16
    28a0:	1002de26 	beq	r2,zero,341c <___vfprintf_internal_r+0x1820>
    28a4:	d8c02d17 	ldw	r3,180(sp)
    28a8:	002d883a 	mov	r22,zero
    28ac:	1cc00017 	ldw	r19,0(r3)
    28b0:	18c00104 	addi	r3,r3,4
    28b4:	d8c02d15 	stw	r3,180(sp)
    28b8:	003fab06 	br	2768 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002768>
    28bc:	38803fcc 	andi	r2,r7,255
    28c0:	1080201c 	xori	r2,r2,128
    28c4:	10bfe004 	addi	r2,r2,-128
    28c8:	1002d21e 	bne	r2,zero,3414 <___vfprintf_internal_r+0x1818>
    28cc:	00c00044 	movi	r3,1
    28d0:	01c00804 	movi	r7,32
    28d4:	ac400007 	ldb	r17,0(r21)
    28d8:	003d2906 	br	1d80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d80>
    28dc:	94800054 	ori	r18,r18,1
    28e0:	ac400007 	ldb	r17,0(r21)
    28e4:	003d2606 	br	1d80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d80>
    28e8:	18c03fcc 	andi	r3,r3,255
    28ec:	183e0526 	beq	r3,zero,2104 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002104>
    28f0:	d9c02785 	stb	r7,158(sp)
    28f4:	003e0306 	br	2104 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002104>
    28f8:	94801014 	ori	r18,r18,64
    28fc:	ac400007 	ldb	r17,0(r21)
    2900:	003d1f06 	br	1d80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d80>
    2904:	ac400007 	ldb	r17,0(r21)
    2908:	8a438726 	beq	r17,r9,3728 <___vfprintf_internal_r+0x1b2c>
    290c:	94800414 	ori	r18,r18,16
    2910:	003d1b06 	br	1d80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d80>
    2914:	18c03fcc 	andi	r3,r3,255
    2918:	1805341e 	bne	r3,zero,3dec <___vfprintf_internal_r+0x21f0>
    291c:	9080080c 	andi	r2,r18,32
    2920:	1002cd26 	beq	r2,zero,3458 <___vfprintf_internal_r+0x185c>
    2924:	d9402d17 	ldw	r5,180(sp)
    2928:	d9002f17 	ldw	r4,188(sp)
    292c:	28800017 	ldw	r2,0(r5)
    2930:	2007d7fa 	srai	r3,r4,31
    2934:	29400104 	addi	r5,r5,4
    2938:	d9402d15 	stw	r5,180(sp)
    293c:	11000015 	stw	r4,0(r2)
    2940:	10c00115 	stw	r3,4(r2)
    2944:	003ce506 	br	1cdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001cdc>
    2948:	d8c02d17 	ldw	r3,180(sp)
    294c:	d9002d17 	ldw	r4,180(sp)
    2950:	d8002785 	stb	zero,158(sp)
    2954:	18800017 	ldw	r2,0(r3)
    2958:	21000104 	addi	r4,r4,4
    295c:	00c00044 	movi	r3,1
    2960:	d8c02a15 	stw	r3,168(sp)
    2964:	d8801405 	stb	r2,80(sp)
    2968:	d9002d15 	stw	r4,180(sp)
    296c:	d8c02e15 	stw	r3,184(sp)
    2970:	d8002915 	stw	zero,164(sp)
    2974:	d8003215 	stw	zero,200(sp)
    2978:	dc001404 	addi	r16,sp,80
    297c:	0039883a 	mov	fp,zero
    2980:	003e7206 	br	234c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700234c>
    2984:	010000b4 	movhi	r4,2
    2988:	212b9704 	addi	r4,r4,-20900
    298c:	0039883a 	mov	fp,zero
    2990:	d9003915 	stw	r4,228(sp)
    2994:	04401e04 	movi	r17,120
    2998:	003f8206 	br	27a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70027a4>
    299c:	18c03fcc 	andi	r3,r3,255
    29a0:	1805061e 	bne	r3,zero,3dbc <___vfprintf_internal_r+0x21c0>
    29a4:	883d9126 	beq	r17,zero,1fec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001fec>
    29a8:	00c00044 	movi	r3,1
    29ac:	d8c02a15 	stw	r3,168(sp)
    29b0:	dc401405 	stb	r17,80(sp)
    29b4:	d8002785 	stb	zero,158(sp)
    29b8:	003fec06 	br	296c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700296c>
    29bc:	014000b4 	movhi	r5,2
    29c0:	296b9704 	addi	r5,r5,-20900
    29c4:	d9403915 	stw	r5,228(sp)
    29c8:	d8c02d15 	stw	r3,180(sp)
    29cc:	1025883a 	mov	r18,r2
    29d0:	04401e04 	movi	r17,120
    29d4:	9d84b03a 	or	r2,r19,r22
    29d8:	1000fc1e 	bne	r2,zero,2dcc <___vfprintf_internal_r+0x11d0>
    29dc:	0039883a 	mov	fp,zero
    29e0:	00800084 	movi	r2,2
    29e4:	10803fcc 	andi	r2,r2,255
    29e8:	00c00044 	movi	r3,1
    29ec:	10c20f26 	beq	r2,r3,322c <___vfprintf_internal_r+0x1630>
    29f0:	00c00084 	movi	r3,2
    29f4:	10fd6326 	beq	r2,r3,1f84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001f84>
    29f8:	003e2d06 	br	22b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70022b0>
    29fc:	d8c02017 	ldw	r3,128(sp)
    2a00:	003e9306 	br	2450 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002450>
    2a04:	00801944 	movi	r2,101
    2a08:	14407e0e 	bge	r2,r17,2c04 <___vfprintf_internal_r+0x1008>
    2a0c:	d9003617 	ldw	r4,216(sp)
    2a10:	d9403817 	ldw	r5,224(sp)
    2a14:	000d883a 	mov	r6,zero
    2a18:	000f883a 	mov	r7,zero
    2a1c:	d8c03c15 	stw	r3,240(sp)
    2a20:	da003d15 	stw	r8,244(sp)
    2a24:	000ce700 	call	ce70 <__eqdf2>
    2a28:	d8c03c17 	ldw	r3,240(sp)
    2a2c:	da003d17 	ldw	r8,244(sp)
    2a30:	1000f71e 	bne	r2,zero,2e10 <___vfprintf_internal_r+0x1214>
    2a34:	d8801f17 	ldw	r2,124(sp)
    2a38:	010000b4 	movhi	r4,2
    2a3c:	212b9e04 	addi	r4,r4,-20872
    2a40:	18c00044 	addi	r3,r3,1
    2a44:	10800044 	addi	r2,r2,1
    2a48:	41000015 	stw	r4,0(r8)
    2a4c:	01000044 	movi	r4,1
    2a50:	41000115 	stw	r4,4(r8)
    2a54:	d8c02015 	stw	r3,128(sp)
    2a58:	d8801f15 	stw	r2,124(sp)
    2a5c:	010001c4 	movi	r4,7
    2a60:	2082b816 	blt	r4,r2,3544 <___vfprintf_internal_r+0x1948>
    2a64:	42000204 	addi	r8,r8,8
    2a68:	d8802617 	ldw	r2,152(sp)
    2a6c:	d9403317 	ldw	r5,204(sp)
    2a70:	11400216 	blt	r2,r5,2a7c <___vfprintf_internal_r+0xe80>
    2a74:	9080004c 	andi	r2,r18,1
    2a78:	103ed526 	beq	r2,zero,25d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70025d0>
    2a7c:	d8803717 	ldw	r2,220(sp)
    2a80:	d9003417 	ldw	r4,208(sp)
    2a84:	d9403717 	ldw	r5,220(sp)
    2a88:	1887883a 	add	r3,r3,r2
    2a8c:	d8801f17 	ldw	r2,124(sp)
    2a90:	41000015 	stw	r4,0(r8)
    2a94:	41400115 	stw	r5,4(r8)
    2a98:	10800044 	addi	r2,r2,1
    2a9c:	d8c02015 	stw	r3,128(sp)
    2aa0:	d8801f15 	stw	r2,124(sp)
    2aa4:	010001c4 	movi	r4,7
    2aa8:	20832916 	blt	r4,r2,3750 <___vfprintf_internal_r+0x1b54>
    2aac:	42000204 	addi	r8,r8,8
    2ab0:	d8803317 	ldw	r2,204(sp)
    2ab4:	143fffc4 	addi	r16,r2,-1
    2ab8:	043ec50e 	bge	zero,r16,25d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70025d0>
    2abc:	04400404 	movi	r17,16
    2ac0:	d8801f17 	ldw	r2,124(sp)
    2ac4:	8c00880e 	bge	r17,r16,2ce8 <___vfprintf_internal_r+0x10ec>
    2ac8:	014000b4 	movhi	r5,2
    2acc:	296b9e84 	addi	r5,r5,-20870
    2ad0:	d9402b15 	stw	r5,172(sp)
    2ad4:	058001c4 	movi	r22,7
    2ad8:	dcc02c17 	ldw	r19,176(sp)
    2adc:	00000306 	br	2aec <___vfprintf_internal_r+0xef0>
    2ae0:	42000204 	addi	r8,r8,8
    2ae4:	843ffc04 	addi	r16,r16,-16
    2ae8:	8c00820e 	bge	r17,r16,2cf4 <___vfprintf_internal_r+0x10f8>
    2aec:	18c00404 	addi	r3,r3,16
    2af0:	10800044 	addi	r2,r2,1
    2af4:	45000015 	stw	r20,0(r8)
    2af8:	44400115 	stw	r17,4(r8)
    2afc:	d8c02015 	stw	r3,128(sp)
    2b00:	d8801f15 	stw	r2,124(sp)
    2b04:	b0bff60e 	bge	r22,r2,2ae0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ae0>
    2b08:	d9801e04 	addi	r6,sp,120
    2b0c:	b80b883a 	mov	r5,r23
    2b10:	9809883a 	mov	r4,r19
    2b14:	00091f80 	call	91f8 <__sprint_r>
    2b18:	103d3a1e 	bne	r2,zero,2004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002004>
    2b1c:	d8c02017 	ldw	r3,128(sp)
    2b20:	d8801f17 	ldw	r2,124(sp)
    2b24:	da000404 	addi	r8,sp,16
    2b28:	003fee06 	br	2ae4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ae4>
    2b2c:	d9403117 	ldw	r5,196(sp)
    2b30:	d8802a17 	ldw	r2,168(sp)
    2b34:	28adc83a 	sub	r22,r5,r2
    2b38:	05be630e 	bge	zero,r22,24c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70024c8>
    2b3c:	07000404 	movi	fp,16
    2b40:	d8801f17 	ldw	r2,124(sp)
    2b44:	e5838f0e 	bge	fp,r22,3984 <___vfprintf_internal_r+0x1d88>
    2b48:	014000b4 	movhi	r5,2
    2b4c:	296b9e84 	addi	r5,r5,-20870
    2b50:	dc403015 	stw	r17,192(sp)
    2b54:	d9402b15 	stw	r5,172(sp)
    2b58:	b023883a 	mov	r17,r22
    2b5c:	04c001c4 	movi	r19,7
    2b60:	a82d883a 	mov	r22,r21
    2b64:	902b883a 	mov	r21,r18
    2b68:	8025883a 	mov	r18,r16
    2b6c:	dc002c17 	ldw	r16,176(sp)
    2b70:	00000306 	br	2b80 <___vfprintf_internal_r+0xf84>
    2b74:	8c7ffc04 	addi	r17,r17,-16
    2b78:	42000204 	addi	r8,r8,8
    2b7c:	e440110e 	bge	fp,r17,2bc4 <___vfprintf_internal_r+0xfc8>
    2b80:	18c00404 	addi	r3,r3,16
    2b84:	10800044 	addi	r2,r2,1
    2b88:	45000015 	stw	r20,0(r8)
    2b8c:	47000115 	stw	fp,4(r8)
    2b90:	d8c02015 	stw	r3,128(sp)
    2b94:	d8801f15 	stw	r2,124(sp)
    2b98:	98bff60e 	bge	r19,r2,2b74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b74>
    2b9c:	d9801e04 	addi	r6,sp,120
    2ba0:	b80b883a 	mov	r5,r23
    2ba4:	8009883a 	mov	r4,r16
    2ba8:	00091f80 	call	91f8 <__sprint_r>
    2bac:	103d151e 	bne	r2,zero,2004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002004>
    2bb0:	8c7ffc04 	addi	r17,r17,-16
    2bb4:	d8c02017 	ldw	r3,128(sp)
    2bb8:	d8801f17 	ldw	r2,124(sp)
    2bbc:	da000404 	addi	r8,sp,16
    2bc0:	e47fef16 	blt	fp,r17,2b80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b80>
    2bc4:	9021883a 	mov	r16,r18
    2bc8:	a825883a 	mov	r18,r21
    2bcc:	b02b883a 	mov	r21,r22
    2bd0:	882d883a 	mov	r22,r17
    2bd4:	dc403017 	ldw	r17,192(sp)
    2bd8:	d9002b17 	ldw	r4,172(sp)
    2bdc:	1d87883a 	add	r3,r3,r22
    2be0:	10800044 	addi	r2,r2,1
    2be4:	41000015 	stw	r4,0(r8)
    2be8:	45800115 	stw	r22,4(r8)
    2bec:	d8c02015 	stw	r3,128(sp)
    2bf0:	d8801f15 	stw	r2,124(sp)
    2bf4:	010001c4 	movi	r4,7
    2bf8:	20818e16 	blt	r4,r2,3234 <___vfprintf_internal_r+0x1638>
    2bfc:	42000204 	addi	r8,r8,8
    2c00:	003e3106 	br	24c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70024c8>
    2c04:	d9403317 	ldw	r5,204(sp)
    2c08:	00800044 	movi	r2,1
    2c0c:	18c00044 	addi	r3,r3,1
    2c10:	1141530e 	bge	r2,r5,3160 <___vfprintf_internal_r+0x1564>
    2c14:	dc401f17 	ldw	r17,124(sp)
    2c18:	00800044 	movi	r2,1
    2c1c:	40800115 	stw	r2,4(r8)
    2c20:	8c400044 	addi	r17,r17,1
    2c24:	44000015 	stw	r16,0(r8)
    2c28:	d8c02015 	stw	r3,128(sp)
    2c2c:	dc401f15 	stw	r17,124(sp)
    2c30:	008001c4 	movi	r2,7
    2c34:	14416b16 	blt	r2,r17,31e4 <___vfprintf_internal_r+0x15e8>
    2c38:	42000204 	addi	r8,r8,8
    2c3c:	d8803717 	ldw	r2,220(sp)
    2c40:	d9003417 	ldw	r4,208(sp)
    2c44:	8c400044 	addi	r17,r17,1
    2c48:	10c7883a 	add	r3,r2,r3
    2c4c:	40800115 	stw	r2,4(r8)
    2c50:	41000015 	stw	r4,0(r8)
    2c54:	d8c02015 	stw	r3,128(sp)
    2c58:	dc401f15 	stw	r17,124(sp)
    2c5c:	008001c4 	movi	r2,7
    2c60:	14416916 	blt	r2,r17,3208 <___vfprintf_internal_r+0x160c>
    2c64:	45800204 	addi	r22,r8,8
    2c68:	d9003617 	ldw	r4,216(sp)
    2c6c:	d9403817 	ldw	r5,224(sp)
    2c70:	000d883a 	mov	r6,zero
    2c74:	000f883a 	mov	r7,zero
    2c78:	d8c03c15 	stw	r3,240(sp)
    2c7c:	000ce700 	call	ce70 <__eqdf2>
    2c80:	d8c03c17 	ldw	r3,240(sp)
    2c84:	1000bc26 	beq	r2,zero,2f78 <___vfprintf_internal_r+0x137c>
    2c88:	d9403317 	ldw	r5,204(sp)
    2c8c:	84000044 	addi	r16,r16,1
    2c90:	8c400044 	addi	r17,r17,1
    2c94:	28bfffc4 	addi	r2,r5,-1
    2c98:	1887883a 	add	r3,r3,r2
    2c9c:	b0800115 	stw	r2,4(r22)
    2ca0:	b4000015 	stw	r16,0(r22)
    2ca4:	d8c02015 	stw	r3,128(sp)
    2ca8:	dc401f15 	stw	r17,124(sp)
    2cac:	008001c4 	movi	r2,7
    2cb0:	14414316 	blt	r2,r17,31c0 <___vfprintf_internal_r+0x15c4>
    2cb4:	b5800204 	addi	r22,r22,8
    2cb8:	d9003a17 	ldw	r4,232(sp)
    2cbc:	df0022c4 	addi	fp,sp,139
    2cc0:	8c400044 	addi	r17,r17,1
    2cc4:	20c7883a 	add	r3,r4,r3
    2cc8:	b7000015 	stw	fp,0(r22)
    2ccc:	b1000115 	stw	r4,4(r22)
    2cd0:	d8c02015 	stw	r3,128(sp)
    2cd4:	dc401f15 	stw	r17,124(sp)
    2cd8:	008001c4 	movi	r2,7
    2cdc:	14400e16 	blt	r2,r17,2d18 <___vfprintf_internal_r+0x111c>
    2ce0:	b2000204 	addi	r8,r22,8
    2ce4:	003e3a06 	br	25d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70025d0>
    2ce8:	010000b4 	movhi	r4,2
    2cec:	212b9e84 	addi	r4,r4,-20870
    2cf0:	d9002b15 	stw	r4,172(sp)
    2cf4:	d9002b17 	ldw	r4,172(sp)
    2cf8:	1c07883a 	add	r3,r3,r16
    2cfc:	44000115 	stw	r16,4(r8)
    2d00:	41000015 	stw	r4,0(r8)
    2d04:	10800044 	addi	r2,r2,1
    2d08:	d8c02015 	stw	r3,128(sp)
    2d0c:	d8801f15 	stw	r2,124(sp)
    2d10:	010001c4 	movi	r4,7
    2d14:	20be2d0e 	bge	r4,r2,25cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70025cc>
    2d18:	d9002c17 	ldw	r4,176(sp)
    2d1c:	d9801e04 	addi	r6,sp,120
    2d20:	b80b883a 	mov	r5,r23
    2d24:	00091f80 	call	91f8 <__sprint_r>
    2d28:	103cb61e 	bne	r2,zero,2004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002004>
    2d2c:	d8c02017 	ldw	r3,128(sp)
    2d30:	da000404 	addi	r8,sp,16
    2d34:	003e2606 	br	25d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70025d0>
    2d38:	d9002c17 	ldw	r4,176(sp)
    2d3c:	d9801e04 	addi	r6,sp,120
    2d40:	b80b883a 	mov	r5,r23
    2d44:	00091f80 	call	91f8 <__sprint_r>
    2d48:	103e5d26 	beq	r2,zero,26c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70026c0>
    2d4c:	003cad06 	br	2004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002004>
    2d50:	d9002c17 	ldw	r4,176(sp)
    2d54:	d9801e04 	addi	r6,sp,120
    2d58:	b80b883a 	mov	r5,r23
    2d5c:	00091f80 	call	91f8 <__sprint_r>
    2d60:	103ca81e 	bne	r2,zero,2004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002004>
    2d64:	d8c02017 	ldw	r3,128(sp)
    2d68:	da000404 	addi	r8,sp,16
    2d6c:	003e0b06 	br	259c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700259c>
    2d70:	d9002c17 	ldw	r4,176(sp)
    2d74:	d9801e04 	addi	r6,sp,120
    2d78:	b80b883a 	mov	r5,r23
    2d7c:	00091f80 	call	91f8 <__sprint_r>
    2d80:	103ca01e 	bne	r2,zero,2004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002004>
    2d84:	d8c02017 	ldw	r3,128(sp)
    2d88:	da000404 	addi	r8,sp,16
    2d8c:	003dbd06 	br	2484 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002484>
    2d90:	d9002c17 	ldw	r4,176(sp)
    2d94:	d9801e04 	addi	r6,sp,120
    2d98:	b80b883a 	mov	r5,r23
    2d9c:	00091f80 	call	91f8 <__sprint_r>
    2da0:	103c981e 	bne	r2,zero,2004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002004>
    2da4:	d8c02017 	ldw	r3,128(sp)
    2da8:	da000404 	addi	r8,sp,16
    2dac:	003dc306 	br	24bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70024bc>
    2db0:	d8802917 	ldw	r2,164(sp)
    2db4:	d8002785 	stb	zero,158(sp)
    2db8:	103f0616 	blt	r2,zero,29d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70029d4>
    2dbc:	00ffdfc4 	movi	r3,-129
    2dc0:	9d84b03a 	or	r2,r19,r22
    2dc4:	90e4703a 	and	r18,r18,r3
    2dc8:	103c6b26 	beq	r2,zero,1f78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001f78>
    2dcc:	0039883a 	mov	fp,zero
    2dd0:	003e7406 	br	27a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70027a4>
    2dd4:	9080040c 	andi	r2,r18,16
    2dd8:	1001b326 	beq	r2,zero,34a8 <___vfprintf_internal_r+0x18ac>
    2ddc:	d9002d17 	ldw	r4,180(sp)
    2de0:	d9402917 	ldw	r5,164(sp)
    2de4:	d8002785 	stb	zero,158(sp)
    2de8:	20800104 	addi	r2,r4,4
    2dec:	24c00017 	ldw	r19,0(r4)
    2df0:	002d883a 	mov	r22,zero
    2df4:	2801b516 	blt	r5,zero,34cc <___vfprintf_internal_r+0x18d0>
    2df8:	00ffdfc4 	movi	r3,-129
    2dfc:	d8802d15 	stw	r2,180(sp)
    2e00:	90e4703a 	and	r18,r18,r3
    2e04:	983d2726 	beq	r19,zero,22a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70022a4>
    2e08:	0039883a 	mov	fp,zero
    2e0c:	003d2a06 	br	22b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70022b8>
    2e10:	dc402617 	ldw	r17,152(sp)
    2e14:	0441d30e 	bge	zero,r17,3564 <___vfprintf_internal_r+0x1968>
    2e18:	dc403217 	ldw	r17,200(sp)
    2e1c:	d8803317 	ldw	r2,204(sp)
    2e20:	1440010e 	bge	r2,r17,2e28 <___vfprintf_internal_r+0x122c>
    2e24:	1023883a 	mov	r17,r2
    2e28:	04400a0e 	bge	zero,r17,2e54 <___vfprintf_internal_r+0x1258>
    2e2c:	d8801f17 	ldw	r2,124(sp)
    2e30:	1c47883a 	add	r3,r3,r17
    2e34:	44000015 	stw	r16,0(r8)
    2e38:	10800044 	addi	r2,r2,1
    2e3c:	44400115 	stw	r17,4(r8)
    2e40:	d8c02015 	stw	r3,128(sp)
    2e44:	d8801f15 	stw	r2,124(sp)
    2e48:	010001c4 	movi	r4,7
    2e4c:	20826516 	blt	r4,r2,37e4 <___vfprintf_internal_r+0x1be8>
    2e50:	42000204 	addi	r8,r8,8
    2e54:	88026116 	blt	r17,zero,37dc <___vfprintf_internal_r+0x1be0>
    2e58:	d9003217 	ldw	r4,200(sp)
    2e5c:	2463c83a 	sub	r17,r4,r17
    2e60:	04407b0e 	bge	zero,r17,3050 <___vfprintf_internal_r+0x1454>
    2e64:	05800404 	movi	r22,16
    2e68:	d8801f17 	ldw	r2,124(sp)
    2e6c:	b4419d0e 	bge	r22,r17,34e4 <___vfprintf_internal_r+0x18e8>
    2e70:	010000b4 	movhi	r4,2
    2e74:	212b9e84 	addi	r4,r4,-20870
    2e78:	d9002b15 	stw	r4,172(sp)
    2e7c:	070001c4 	movi	fp,7
    2e80:	dcc02c17 	ldw	r19,176(sp)
    2e84:	00000306 	br	2e94 <___vfprintf_internal_r+0x1298>
    2e88:	42000204 	addi	r8,r8,8
    2e8c:	8c7ffc04 	addi	r17,r17,-16
    2e90:	b441970e 	bge	r22,r17,34f0 <___vfprintf_internal_r+0x18f4>
    2e94:	18c00404 	addi	r3,r3,16
    2e98:	10800044 	addi	r2,r2,1
    2e9c:	45000015 	stw	r20,0(r8)
    2ea0:	45800115 	stw	r22,4(r8)
    2ea4:	d8c02015 	stw	r3,128(sp)
    2ea8:	d8801f15 	stw	r2,124(sp)
    2eac:	e0bff60e 	bge	fp,r2,2e88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002e88>
    2eb0:	d9801e04 	addi	r6,sp,120
    2eb4:	b80b883a 	mov	r5,r23
    2eb8:	9809883a 	mov	r4,r19
    2ebc:	00091f80 	call	91f8 <__sprint_r>
    2ec0:	103c501e 	bne	r2,zero,2004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002004>
    2ec4:	d8c02017 	ldw	r3,128(sp)
    2ec8:	d8801f17 	ldw	r2,124(sp)
    2ecc:	da000404 	addi	r8,sp,16
    2ed0:	003fee06 	br	2e8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002e8c>
    2ed4:	d9002c17 	ldw	r4,176(sp)
    2ed8:	d9801e04 	addi	r6,sp,120
    2edc:	b80b883a 	mov	r5,r23
    2ee0:	00091f80 	call	91f8 <__sprint_r>
    2ee4:	103c471e 	bne	r2,zero,2004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002004>
    2ee8:	d8c02017 	ldw	r3,128(sp)
    2eec:	df002787 	ldb	fp,158(sp)
    2ef0:	da000404 	addi	r8,sp,16
    2ef4:	003d5606 	br	2450 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002450>
    2ef8:	9080040c 	andi	r2,r18,16
    2efc:	10016126 	beq	r2,zero,3484 <___vfprintf_internal_r+0x1888>
    2f00:	d8802d17 	ldw	r2,180(sp)
    2f04:	14c00017 	ldw	r19,0(r2)
    2f08:	10800104 	addi	r2,r2,4
    2f0c:	d8802d15 	stw	r2,180(sp)
    2f10:	982dd7fa 	srai	r22,r19,31
    2f14:	b005883a 	mov	r2,r22
    2f18:	003c8206 	br	2124 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002124>
    2f1c:	9080040c 	andi	r2,r18,16
    2f20:	10003526 	beq	r2,zero,2ff8 <___vfprintf_internal_r+0x13fc>
    2f24:	d9402d17 	ldw	r5,180(sp)
    2f28:	d8c02917 	ldw	r3,164(sp)
    2f2c:	d8002785 	stb	zero,158(sp)
    2f30:	28800104 	addi	r2,r5,4
    2f34:	2cc00017 	ldw	r19,0(r5)
    2f38:	002d883a 	mov	r22,zero
    2f3c:	18003716 	blt	r3,zero,301c <___vfprintf_internal_r+0x1420>
    2f40:	00ffdfc4 	movi	r3,-129
    2f44:	d8802d15 	stw	r2,180(sp)
    2f48:	90e4703a 	and	r18,r18,r3
    2f4c:	0039883a 	mov	fp,zero
    2f50:	983df326 	beq	r19,zero,2720 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002720>
    2f54:	00800244 	movi	r2,9
    2f58:	14fc7b36 	bltu	r2,r19,2148 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002148>
    2f5c:	d8c02817 	ldw	r3,160(sp)
    2f60:	dc001dc4 	addi	r16,sp,119
    2f64:	9cc00c04 	addi	r19,r19,48
    2f68:	1c07c83a 	sub	r3,r3,r16
    2f6c:	dcc01dc5 	stb	r19,119(sp)
    2f70:	d8c02e15 	stw	r3,184(sp)
    2f74:	003ce806 	br	2318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002318>
    2f78:	d8803317 	ldw	r2,204(sp)
    2f7c:	143fffc4 	addi	r16,r2,-1
    2f80:	043f4d0e 	bge	zero,r16,2cb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cb8>
    2f84:	07000404 	movi	fp,16
    2f88:	e400810e 	bge	fp,r16,3190 <___vfprintf_internal_r+0x1594>
    2f8c:	014000b4 	movhi	r5,2
    2f90:	296b9e84 	addi	r5,r5,-20870
    2f94:	d9402b15 	stw	r5,172(sp)
    2f98:	01c001c4 	movi	r7,7
    2f9c:	dcc02c17 	ldw	r19,176(sp)
    2fa0:	00000306 	br	2fb0 <___vfprintf_internal_r+0x13b4>
    2fa4:	b5800204 	addi	r22,r22,8
    2fa8:	843ffc04 	addi	r16,r16,-16
    2fac:	e4007b0e 	bge	fp,r16,319c <___vfprintf_internal_r+0x15a0>
    2fb0:	18c00404 	addi	r3,r3,16
    2fb4:	8c400044 	addi	r17,r17,1
    2fb8:	b5000015 	stw	r20,0(r22)
    2fbc:	b7000115 	stw	fp,4(r22)
    2fc0:	d8c02015 	stw	r3,128(sp)
    2fc4:	dc401f15 	stw	r17,124(sp)
    2fc8:	3c7ff60e 	bge	r7,r17,2fa4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002fa4>
    2fcc:	d9801e04 	addi	r6,sp,120
    2fd0:	b80b883a 	mov	r5,r23
    2fd4:	9809883a 	mov	r4,r19
    2fd8:	d9c03c15 	stw	r7,240(sp)
    2fdc:	00091f80 	call	91f8 <__sprint_r>
    2fe0:	d9c03c17 	ldw	r7,240(sp)
    2fe4:	103c071e 	bne	r2,zero,2004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002004>
    2fe8:	d8c02017 	ldw	r3,128(sp)
    2fec:	dc401f17 	ldw	r17,124(sp)
    2ff0:	dd800404 	addi	r22,sp,16
    2ff4:	003fec06 	br	2fa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002fa8>
    2ff8:	9080100c 	andi	r2,r18,64
    2ffc:	d8002785 	stb	zero,158(sp)
    3000:	10010e26 	beq	r2,zero,343c <___vfprintf_internal_r+0x1840>
    3004:	d9002d17 	ldw	r4,180(sp)
    3008:	d9402917 	ldw	r5,164(sp)
    300c:	002d883a 	mov	r22,zero
    3010:	20800104 	addi	r2,r4,4
    3014:	24c0000b 	ldhu	r19,0(r4)
    3018:	283fc90e 	bge	r5,zero,2f40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002f40>
    301c:	d8802d15 	stw	r2,180(sp)
    3020:	0039883a 	mov	fp,zero
    3024:	9d84b03a 	or	r2,r19,r22
    3028:	103c461e 	bne	r2,zero,2144 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002144>
    302c:	00800044 	movi	r2,1
    3030:	003e6c06 	br	29e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70029e4>
    3034:	d9002c17 	ldw	r4,176(sp)
    3038:	d9801e04 	addi	r6,sp,120
    303c:	b80b883a 	mov	r5,r23
    3040:	00091f80 	call	91f8 <__sprint_r>
    3044:	103bef1e 	bne	r2,zero,2004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002004>
    3048:	d8c02017 	ldw	r3,128(sp)
    304c:	da000404 	addi	r8,sp,16
    3050:	d9003217 	ldw	r4,200(sp)
    3054:	d8802617 	ldw	r2,152(sp)
    3058:	d9403317 	ldw	r5,204(sp)
    305c:	8123883a 	add	r17,r16,r4
    3060:	11400216 	blt	r2,r5,306c <___vfprintf_internal_r+0x1470>
    3064:	9100004c 	andi	r4,r18,1
    3068:	20000d26 	beq	r4,zero,30a0 <___vfprintf_internal_r+0x14a4>
    306c:	d9003717 	ldw	r4,220(sp)
    3070:	d9403417 	ldw	r5,208(sp)
    3074:	1907883a 	add	r3,r3,r4
    3078:	d9001f17 	ldw	r4,124(sp)
    307c:	41400015 	stw	r5,0(r8)
    3080:	d9403717 	ldw	r5,220(sp)
    3084:	21000044 	addi	r4,r4,1
    3088:	d8c02015 	stw	r3,128(sp)
    308c:	41400115 	stw	r5,4(r8)
    3090:	d9001f15 	stw	r4,124(sp)
    3094:	014001c4 	movi	r5,7
    3098:	2901e816 	blt	r5,r4,383c <___vfprintf_internal_r+0x1c40>
    309c:	42000204 	addi	r8,r8,8
    30a0:	d9003317 	ldw	r4,204(sp)
    30a4:	8121883a 	add	r16,r16,r4
    30a8:	2085c83a 	sub	r2,r4,r2
    30ac:	8461c83a 	sub	r16,r16,r17
    30b0:	1400010e 	bge	r2,r16,30b8 <___vfprintf_internal_r+0x14bc>
    30b4:	1021883a 	mov	r16,r2
    30b8:	04000a0e 	bge	zero,r16,30e4 <___vfprintf_internal_r+0x14e8>
    30bc:	d9001f17 	ldw	r4,124(sp)
    30c0:	1c07883a 	add	r3,r3,r16
    30c4:	44400015 	stw	r17,0(r8)
    30c8:	21000044 	addi	r4,r4,1
    30cc:	44000115 	stw	r16,4(r8)
    30d0:	d8c02015 	stw	r3,128(sp)
    30d4:	d9001f15 	stw	r4,124(sp)
    30d8:	014001c4 	movi	r5,7
    30dc:	2901fb16 	blt	r5,r4,38cc <___vfprintf_internal_r+0x1cd0>
    30e0:	42000204 	addi	r8,r8,8
    30e4:	8001f716 	blt	r16,zero,38c4 <___vfprintf_internal_r+0x1cc8>
    30e8:	1421c83a 	sub	r16,r2,r16
    30ec:	043d380e 	bge	zero,r16,25d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70025d0>
    30f0:	04400404 	movi	r17,16
    30f4:	d8801f17 	ldw	r2,124(sp)
    30f8:	8c3efb0e 	bge	r17,r16,2ce8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ce8>
    30fc:	014000b4 	movhi	r5,2
    3100:	296b9e84 	addi	r5,r5,-20870
    3104:	d9402b15 	stw	r5,172(sp)
    3108:	058001c4 	movi	r22,7
    310c:	dcc02c17 	ldw	r19,176(sp)
    3110:	00000306 	br	3120 <___vfprintf_internal_r+0x1524>
    3114:	42000204 	addi	r8,r8,8
    3118:	843ffc04 	addi	r16,r16,-16
    311c:	8c3ef50e 	bge	r17,r16,2cf4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cf4>
    3120:	18c00404 	addi	r3,r3,16
    3124:	10800044 	addi	r2,r2,1
    3128:	45000015 	stw	r20,0(r8)
    312c:	44400115 	stw	r17,4(r8)
    3130:	d8c02015 	stw	r3,128(sp)
    3134:	d8801f15 	stw	r2,124(sp)
    3138:	b0bff60e 	bge	r22,r2,3114 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003114>
    313c:	d9801e04 	addi	r6,sp,120
    3140:	b80b883a 	mov	r5,r23
    3144:	9809883a 	mov	r4,r19
    3148:	00091f80 	call	91f8 <__sprint_r>
    314c:	103bad1e 	bne	r2,zero,2004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002004>
    3150:	d8c02017 	ldw	r3,128(sp)
    3154:	d8801f17 	ldw	r2,124(sp)
    3158:	da000404 	addi	r8,sp,16
    315c:	003fee06 	br	3118 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003118>
    3160:	9088703a 	and	r4,r18,r2
    3164:	203eab1e 	bne	r4,zero,2c14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002c14>
    3168:	dc401f17 	ldw	r17,124(sp)
    316c:	40800115 	stw	r2,4(r8)
    3170:	44000015 	stw	r16,0(r8)
    3174:	8c400044 	addi	r17,r17,1
    3178:	d8c02015 	stw	r3,128(sp)
    317c:	dc401f15 	stw	r17,124(sp)
    3180:	008001c4 	movi	r2,7
    3184:	14400e16 	blt	r2,r17,31c0 <___vfprintf_internal_r+0x15c4>
    3188:	45800204 	addi	r22,r8,8
    318c:	003eca06 	br	2cb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cb8>
    3190:	010000b4 	movhi	r4,2
    3194:	212b9e84 	addi	r4,r4,-20870
    3198:	d9002b15 	stw	r4,172(sp)
    319c:	d8802b17 	ldw	r2,172(sp)
    31a0:	1c07883a 	add	r3,r3,r16
    31a4:	8c400044 	addi	r17,r17,1
    31a8:	b0800015 	stw	r2,0(r22)
    31ac:	b4000115 	stw	r16,4(r22)
    31b0:	d8c02015 	stw	r3,128(sp)
    31b4:	dc401f15 	stw	r17,124(sp)
    31b8:	008001c4 	movi	r2,7
    31bc:	147ebd0e 	bge	r2,r17,2cb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cb4>
    31c0:	d9002c17 	ldw	r4,176(sp)
    31c4:	d9801e04 	addi	r6,sp,120
    31c8:	b80b883a 	mov	r5,r23
    31cc:	00091f80 	call	91f8 <__sprint_r>
    31d0:	103b8c1e 	bne	r2,zero,2004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002004>
    31d4:	d8c02017 	ldw	r3,128(sp)
    31d8:	dc401f17 	ldw	r17,124(sp)
    31dc:	dd800404 	addi	r22,sp,16
    31e0:	003eb506 	br	2cb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cb8>
    31e4:	d9002c17 	ldw	r4,176(sp)
    31e8:	d9801e04 	addi	r6,sp,120
    31ec:	b80b883a 	mov	r5,r23
    31f0:	00091f80 	call	91f8 <__sprint_r>
    31f4:	103b831e 	bne	r2,zero,2004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002004>
    31f8:	d8c02017 	ldw	r3,128(sp)
    31fc:	dc401f17 	ldw	r17,124(sp)
    3200:	da000404 	addi	r8,sp,16
    3204:	003e8d06 	br	2c3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002c3c>
    3208:	d9002c17 	ldw	r4,176(sp)
    320c:	d9801e04 	addi	r6,sp,120
    3210:	b80b883a 	mov	r5,r23
    3214:	00091f80 	call	91f8 <__sprint_r>
    3218:	103b7a1e 	bne	r2,zero,2004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002004>
    321c:	d8c02017 	ldw	r3,128(sp)
    3220:	dc401f17 	ldw	r17,124(sp)
    3224:	dd800404 	addi	r22,sp,16
    3228:	003e8f06 	br	2c68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002c68>
    322c:	0027883a 	mov	r19,zero
    3230:	003f4a06 	br	2f5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002f5c>
    3234:	d9002c17 	ldw	r4,176(sp)
    3238:	d9801e04 	addi	r6,sp,120
    323c:	b80b883a 	mov	r5,r23
    3240:	00091f80 	call	91f8 <__sprint_r>
    3244:	103b6f1e 	bne	r2,zero,2004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002004>
    3248:	d8c02017 	ldw	r3,128(sp)
    324c:	da000404 	addi	r8,sp,16
    3250:	003c9d06 	br	24c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70024c8>
    3254:	04e7c83a 	sub	r19,zero,r19
    3258:	9804c03a 	cmpne	r2,r19,zero
    325c:	05adc83a 	sub	r22,zero,r22
    3260:	b0adc83a 	sub	r22,r22,r2
    3264:	d8802917 	ldw	r2,164(sp)
    3268:	07000b44 	movi	fp,45
    326c:	df002785 	stb	fp,158(sp)
    3270:	10017b16 	blt	r2,zero,3860 <___vfprintf_internal_r+0x1c64>
    3274:	00bfdfc4 	movi	r2,-129
    3278:	90a4703a 	and	r18,r18,r2
    327c:	003bb106 	br	2144 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002144>
    3280:	d9003617 	ldw	r4,216(sp)
    3284:	d9403817 	ldw	r5,224(sp)
    3288:	da003d15 	stw	r8,244(sp)
    328c:	0008e1c0 	call	8e1c <__fpclassifyd>
    3290:	da003d17 	ldw	r8,244(sp)
    3294:	1000f026 	beq	r2,zero,3658 <___vfprintf_internal_r+0x1a5c>
    3298:	d9002917 	ldw	r4,164(sp)
    329c:	05bff7c4 	movi	r22,-33
    32a0:	00bfffc4 	movi	r2,-1
    32a4:	8dac703a 	and	r22,r17,r22
    32a8:	20820026 	beq	r4,r2,3aac <___vfprintf_internal_r+0x1eb0>
    32ac:	008011c4 	movi	r2,71
    32b0:	b081f726 	beq	r22,r2,3a90 <___vfprintf_internal_r+0x1e94>
    32b4:	d9003817 	ldw	r4,224(sp)
    32b8:	90c04014 	ori	r3,r18,256
    32bc:	d8c02b15 	stw	r3,172(sp)
    32c0:	20021516 	blt	r4,zero,3b18 <___vfprintf_internal_r+0x1f1c>
    32c4:	dcc03817 	ldw	r19,224(sp)
    32c8:	d8002a05 	stb	zero,168(sp)
    32cc:	00801984 	movi	r2,102
    32d0:	8881f926 	beq	r17,r2,3ab8 <___vfprintf_internal_r+0x1ebc>
    32d4:	00801184 	movi	r2,70
    32d8:	88821c26 	beq	r17,r2,3b4c <___vfprintf_internal_r+0x1f50>
    32dc:	00801144 	movi	r2,69
    32e0:	b081ef26 	beq	r22,r2,3aa0 <___vfprintf_internal_r+0x1ea4>
    32e4:	d8c02917 	ldw	r3,164(sp)
    32e8:	d8802104 	addi	r2,sp,132
    32ec:	d8800315 	stw	r2,12(sp)
    32f0:	d9403617 	ldw	r5,216(sp)
    32f4:	d8802504 	addi	r2,sp,148
    32f8:	d9002c17 	ldw	r4,176(sp)
    32fc:	d8800215 	stw	r2,8(sp)
    3300:	d8802604 	addi	r2,sp,152
    3304:	d8c00015 	stw	r3,0(sp)
    3308:	d8800115 	stw	r2,4(sp)
    330c:	01c00084 	movi	r7,2
    3310:	980d883a 	mov	r6,r19
    3314:	d8c03c15 	stw	r3,240(sp)
    3318:	da003d15 	stw	r8,244(sp)
    331c:	00042200 	call	4220 <_dtoa_r>
    3320:	1021883a 	mov	r16,r2
    3324:	008019c4 	movi	r2,103
    3328:	d8c03c17 	ldw	r3,240(sp)
    332c:	da003d17 	ldw	r8,244(sp)
    3330:	88817126 	beq	r17,r2,38f8 <___vfprintf_internal_r+0x1cfc>
    3334:	008011c4 	movi	r2,71
    3338:	88829226 	beq	r17,r2,3d84 <___vfprintf_internal_r+0x2188>
    333c:	80f9883a 	add	fp,r16,r3
    3340:	d9003617 	ldw	r4,216(sp)
    3344:	000d883a 	mov	r6,zero
    3348:	000f883a 	mov	r7,zero
    334c:	980b883a 	mov	r5,r19
    3350:	da003d15 	stw	r8,244(sp)
    3354:	000ce700 	call	ce70 <__eqdf2>
    3358:	da003d17 	ldw	r8,244(sp)
    335c:	10018d26 	beq	r2,zero,3994 <___vfprintf_internal_r+0x1d98>
    3360:	d8802117 	ldw	r2,132(sp)
    3364:	1700062e 	bgeu	r2,fp,3380 <___vfprintf_internal_r+0x1784>
    3368:	01000c04 	movi	r4,48
    336c:	10c00044 	addi	r3,r2,1
    3370:	d8c02115 	stw	r3,132(sp)
    3374:	11000005 	stb	r4,0(r2)
    3378:	d8802117 	ldw	r2,132(sp)
    337c:	173ffb36 	bltu	r2,fp,336c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700336c>
    3380:	1405c83a 	sub	r2,r2,r16
    3384:	d8803315 	stw	r2,204(sp)
    3388:	008011c4 	movi	r2,71
    338c:	b0817626 	beq	r22,r2,3968 <___vfprintf_internal_r+0x1d6c>
    3390:	00801944 	movi	r2,101
    3394:	1442810e 	bge	r2,r17,3d9c <___vfprintf_internal_r+0x21a0>
    3398:	d8c02617 	ldw	r3,152(sp)
    339c:	00801984 	movi	r2,102
    33a0:	d8c03215 	stw	r3,200(sp)
    33a4:	8881fe26 	beq	r17,r2,3ba0 <___vfprintf_internal_r+0x1fa4>
    33a8:	d8c03217 	ldw	r3,200(sp)
    33ac:	d9003317 	ldw	r4,204(sp)
    33b0:	1901dd16 	blt	r3,r4,3b28 <___vfprintf_internal_r+0x1f2c>
    33b4:	9480004c 	andi	r18,r18,1
    33b8:	90022b1e 	bne	r18,zero,3c68 <___vfprintf_internal_r+0x206c>
    33bc:	1805883a 	mov	r2,r3
    33c0:	18028016 	blt	r3,zero,3dc4 <___vfprintf_internal_r+0x21c8>
    33c4:	d8c03217 	ldw	r3,200(sp)
    33c8:	044019c4 	movi	r17,103
    33cc:	d8c02e15 	stw	r3,184(sp)
    33d0:	df002a07 	ldb	fp,168(sp)
    33d4:	e001531e 	bne	fp,zero,3924 <___vfprintf_internal_r+0x1d28>
    33d8:	df002783 	ldbu	fp,158(sp)
    33dc:	d8802a15 	stw	r2,168(sp)
    33e0:	dc802b17 	ldw	r18,172(sp)
    33e4:	d8002915 	stw	zero,164(sp)
    33e8:	003bd106 	br	2330 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002330>
    33ec:	d8802d17 	ldw	r2,180(sp)
    33f0:	d8c02d17 	ldw	r3,180(sp)
    33f4:	d9002d17 	ldw	r4,180(sp)
    33f8:	10800017 	ldw	r2,0(r2)
    33fc:	18c00117 	ldw	r3,4(r3)
    3400:	21000204 	addi	r4,r4,8
    3404:	d8803615 	stw	r2,216(sp)
    3408:	d8c03815 	stw	r3,224(sp)
    340c:	d9002d15 	stw	r4,180(sp)
    3410:	003b7506 	br	21e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70021e8>
    3414:	ac400007 	ldb	r17,0(r21)
    3418:	003a5906 	br	1d80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d80>
    341c:	9080100c 	andi	r2,r18,64
    3420:	1000a826 	beq	r2,zero,36c4 <___vfprintf_internal_r+0x1ac8>
    3424:	d9002d17 	ldw	r4,180(sp)
    3428:	002d883a 	mov	r22,zero
    342c:	24c0000b 	ldhu	r19,0(r4)
    3430:	21000104 	addi	r4,r4,4
    3434:	d9002d15 	stw	r4,180(sp)
    3438:	003ccb06 	br	2768 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002768>
    343c:	d8c02d17 	ldw	r3,180(sp)
    3440:	d9002917 	ldw	r4,164(sp)
    3444:	002d883a 	mov	r22,zero
    3448:	18800104 	addi	r2,r3,4
    344c:	1cc00017 	ldw	r19,0(r3)
    3450:	203ebb0e 	bge	r4,zero,2f40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002f40>
    3454:	003ef106 	br	301c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700301c>
    3458:	9080040c 	andi	r2,r18,16
    345c:	1000921e 	bne	r2,zero,36a8 <___vfprintf_internal_r+0x1aac>
    3460:	9480100c 	andi	r18,r18,64
    3464:	90013926 	beq	r18,zero,394c <___vfprintf_internal_r+0x1d50>
    3468:	d9002d17 	ldw	r4,180(sp)
    346c:	d9402f17 	ldw	r5,188(sp)
    3470:	20800017 	ldw	r2,0(r4)
    3474:	21000104 	addi	r4,r4,4
    3478:	d9002d15 	stw	r4,180(sp)
    347c:	1140000d 	sth	r5,0(r2)
    3480:	003a1606 	br	1cdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001cdc>
    3484:	9080100c 	andi	r2,r18,64
    3488:	10008026 	beq	r2,zero,368c <___vfprintf_internal_r+0x1a90>
    348c:	d8c02d17 	ldw	r3,180(sp)
    3490:	1cc0000f 	ldh	r19,0(r3)
    3494:	18c00104 	addi	r3,r3,4
    3498:	d8c02d15 	stw	r3,180(sp)
    349c:	982dd7fa 	srai	r22,r19,31
    34a0:	b005883a 	mov	r2,r22
    34a4:	003b1f06 	br	2124 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002124>
    34a8:	9080100c 	andi	r2,r18,64
    34ac:	d8002785 	stb	zero,158(sp)
    34b0:	10008a1e 	bne	r2,zero,36dc <___vfprintf_internal_r+0x1ae0>
    34b4:	d9402d17 	ldw	r5,180(sp)
    34b8:	d8c02917 	ldw	r3,164(sp)
    34bc:	002d883a 	mov	r22,zero
    34c0:	28800104 	addi	r2,r5,4
    34c4:	2cc00017 	ldw	r19,0(r5)
    34c8:	183e4b0e 	bge	r3,zero,2df8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002df8>
    34cc:	9d86b03a 	or	r3,r19,r22
    34d0:	d8802d15 	stw	r2,180(sp)
    34d4:	183e4c1e 	bne	r3,zero,2e08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002e08>
    34d8:	0039883a 	mov	fp,zero
    34dc:	0005883a 	mov	r2,zero
    34e0:	003d4006 	br	29e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70029e4>
    34e4:	014000b4 	movhi	r5,2
    34e8:	296b9e84 	addi	r5,r5,-20870
    34ec:	d9402b15 	stw	r5,172(sp)
    34f0:	d9402b17 	ldw	r5,172(sp)
    34f4:	1c47883a 	add	r3,r3,r17
    34f8:	10800044 	addi	r2,r2,1
    34fc:	41400015 	stw	r5,0(r8)
    3500:	44400115 	stw	r17,4(r8)
    3504:	d8c02015 	stw	r3,128(sp)
    3508:	d8801f15 	stw	r2,124(sp)
    350c:	010001c4 	movi	r4,7
    3510:	20bec816 	blt	r4,r2,3034 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003034>
    3514:	42000204 	addi	r8,r8,8
    3518:	003ecd06 	br	3050 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003050>
    351c:	d9002917 	ldw	r4,164(sp)
    3520:	d8002785 	stb	zero,158(sp)
    3524:	203d2d16 	blt	r4,zero,29dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70029dc>
    3528:	00bfdfc4 	movi	r2,-129
    352c:	90a4703a 	and	r18,r18,r2
    3530:	003a9106 	br	1f78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001f78>
    3534:	010000b4 	movhi	r4,2
    3538:	212b9e84 	addi	r4,r4,-20870
    353c:	d9002b15 	stw	r4,172(sp)
    3540:	003c0c06 	br	2574 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002574>
    3544:	d9002c17 	ldw	r4,176(sp)
    3548:	d9801e04 	addi	r6,sp,120
    354c:	b80b883a 	mov	r5,r23
    3550:	00091f80 	call	91f8 <__sprint_r>
    3554:	103aab1e 	bne	r2,zero,2004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002004>
    3558:	d8c02017 	ldw	r3,128(sp)
    355c:	da000404 	addi	r8,sp,16
    3560:	003d4106 	br	2a68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002a68>
    3564:	d8801f17 	ldw	r2,124(sp)
    3568:	014000b4 	movhi	r5,2
    356c:	01000044 	movi	r4,1
    3570:	18c00044 	addi	r3,r3,1
    3574:	10800044 	addi	r2,r2,1
    3578:	296b9e04 	addi	r5,r5,-20872
    357c:	41000115 	stw	r4,4(r8)
    3580:	41400015 	stw	r5,0(r8)
    3584:	d8c02015 	stw	r3,128(sp)
    3588:	d8801f15 	stw	r2,124(sp)
    358c:	010001c4 	movi	r4,7
    3590:	20805c16 	blt	r4,r2,3704 <___vfprintf_internal_r+0x1b08>
    3594:	42000204 	addi	r8,r8,8
    3598:	8800041e 	bne	r17,zero,35ac <___vfprintf_internal_r+0x19b0>
    359c:	d8803317 	ldw	r2,204(sp)
    35a0:	1000021e 	bne	r2,zero,35ac <___vfprintf_internal_r+0x19b0>
    35a4:	9080004c 	andi	r2,r18,1
    35a8:	103c0926 	beq	r2,zero,25d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70025d0>
    35ac:	d9003717 	ldw	r4,220(sp)
    35b0:	d8801f17 	ldw	r2,124(sp)
    35b4:	d9403417 	ldw	r5,208(sp)
    35b8:	20c7883a 	add	r3,r4,r3
    35bc:	10800044 	addi	r2,r2,1
    35c0:	41000115 	stw	r4,4(r8)
    35c4:	41400015 	stw	r5,0(r8)
    35c8:	d8c02015 	stw	r3,128(sp)
    35cc:	d8801f15 	stw	r2,124(sp)
    35d0:	010001c4 	movi	r4,7
    35d4:	20812116 	blt	r4,r2,3a5c <___vfprintf_internal_r+0x1e60>
    35d8:	42000204 	addi	r8,r8,8
    35dc:	0463c83a 	sub	r17,zero,r17
    35e0:	0440730e 	bge	zero,r17,37b0 <___vfprintf_internal_r+0x1bb4>
    35e4:	05800404 	movi	r22,16
    35e8:	b440860e 	bge	r22,r17,3804 <___vfprintf_internal_r+0x1c08>
    35ec:	014000b4 	movhi	r5,2
    35f0:	296b9e84 	addi	r5,r5,-20870
    35f4:	d9402b15 	stw	r5,172(sp)
    35f8:	070001c4 	movi	fp,7
    35fc:	dcc02c17 	ldw	r19,176(sp)
    3600:	00000306 	br	3610 <___vfprintf_internal_r+0x1a14>
    3604:	42000204 	addi	r8,r8,8
    3608:	8c7ffc04 	addi	r17,r17,-16
    360c:	b440800e 	bge	r22,r17,3810 <___vfprintf_internal_r+0x1c14>
    3610:	18c00404 	addi	r3,r3,16
    3614:	10800044 	addi	r2,r2,1
    3618:	45000015 	stw	r20,0(r8)
    361c:	45800115 	stw	r22,4(r8)
    3620:	d8c02015 	stw	r3,128(sp)
    3624:	d8801f15 	stw	r2,124(sp)
    3628:	e0bff60e 	bge	fp,r2,3604 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003604>
    362c:	d9801e04 	addi	r6,sp,120
    3630:	b80b883a 	mov	r5,r23
    3634:	9809883a 	mov	r4,r19
    3638:	00091f80 	call	91f8 <__sprint_r>
    363c:	103a711e 	bne	r2,zero,2004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002004>
    3640:	d8c02017 	ldw	r3,128(sp)
    3644:	d8801f17 	ldw	r2,124(sp)
    3648:	da000404 	addi	r8,sp,16
    364c:	003fee06 	br	3608 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003608>
    3650:	00bfffc4 	movi	r2,-1
    3654:	003a6f06 	br	2014 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002014>
    3658:	008011c4 	movi	r2,71
    365c:	1440b816 	blt	r2,r17,3940 <___vfprintf_internal_r+0x1d44>
    3660:	040000b4 	movhi	r16,2
    3664:	842b9004 	addi	r16,r16,-20928
    3668:	00c000c4 	movi	r3,3
    366c:	00bfdfc4 	movi	r2,-129
    3670:	d8c02a15 	stw	r3,168(sp)
    3674:	90a4703a 	and	r18,r18,r2
    3678:	df002783 	ldbu	fp,158(sp)
    367c:	d8c02e15 	stw	r3,184(sp)
    3680:	d8002915 	stw	zero,164(sp)
    3684:	d8003215 	stw	zero,200(sp)
    3688:	003b2906 	br	2330 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002330>
    368c:	d9002d17 	ldw	r4,180(sp)
    3690:	24c00017 	ldw	r19,0(r4)
    3694:	21000104 	addi	r4,r4,4
    3698:	d9002d15 	stw	r4,180(sp)
    369c:	982dd7fa 	srai	r22,r19,31
    36a0:	b005883a 	mov	r2,r22
    36a4:	003a9f06 	br	2124 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002124>
    36a8:	d9402d17 	ldw	r5,180(sp)
    36ac:	d8c02f17 	ldw	r3,188(sp)
    36b0:	28800017 	ldw	r2,0(r5)
    36b4:	29400104 	addi	r5,r5,4
    36b8:	d9402d15 	stw	r5,180(sp)
    36bc:	10c00015 	stw	r3,0(r2)
    36c0:	00398606 	br	1cdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001cdc>
    36c4:	d9402d17 	ldw	r5,180(sp)
    36c8:	002d883a 	mov	r22,zero
    36cc:	2cc00017 	ldw	r19,0(r5)
    36d0:	29400104 	addi	r5,r5,4
    36d4:	d9402d15 	stw	r5,180(sp)
    36d8:	003c2306 	br	2768 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002768>
    36dc:	d8c02d17 	ldw	r3,180(sp)
    36e0:	d9002917 	ldw	r4,164(sp)
    36e4:	002d883a 	mov	r22,zero
    36e8:	18800104 	addi	r2,r3,4
    36ec:	1cc0000b 	ldhu	r19,0(r3)
    36f0:	203dc10e 	bge	r4,zero,2df8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002df8>
    36f4:	003f7506 	br	34cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70034cc>
    36f8:	040000b4 	movhi	r16,2
    36fc:	842b8e04 	addi	r16,r16,-20936
    3700:	003acc06 	br	2234 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002234>
    3704:	d9002c17 	ldw	r4,176(sp)
    3708:	d9801e04 	addi	r6,sp,120
    370c:	b80b883a 	mov	r5,r23
    3710:	00091f80 	call	91f8 <__sprint_r>
    3714:	103a3b1e 	bne	r2,zero,2004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002004>
    3718:	dc402617 	ldw	r17,152(sp)
    371c:	d8c02017 	ldw	r3,128(sp)
    3720:	da000404 	addi	r8,sp,16
    3724:	003f9c06 	br	3598 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003598>
    3728:	ac400043 	ldbu	r17,1(r21)
    372c:	94800814 	ori	r18,r18,32
    3730:	ad400044 	addi	r21,r21,1
    3734:	8c403fcc 	andi	r17,r17,255
    3738:	8c40201c 	xori	r17,r17,128
    373c:	8c7fe004 	addi	r17,r17,-128
    3740:	00398f06 	br	1d80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d80>
    3744:	d8c02d15 	stw	r3,180(sp)
    3748:	0039883a 	mov	fp,zero
    374c:	003e3506 	br	3024 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003024>
    3750:	d9002c17 	ldw	r4,176(sp)
    3754:	d9801e04 	addi	r6,sp,120
    3758:	b80b883a 	mov	r5,r23
    375c:	00091f80 	call	91f8 <__sprint_r>
    3760:	103a281e 	bne	r2,zero,2004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002004>
    3764:	d8c02017 	ldw	r3,128(sp)
    3768:	da000404 	addi	r8,sp,16
    376c:	003cd006 	br	2ab0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ab0>
    3770:	8009883a 	mov	r4,r16
    3774:	da003d15 	stw	r8,244(sp)
    3778:	0001b640 	call	1b64 <strlen>
    377c:	d8802e15 	stw	r2,184(sp)
    3780:	da003d17 	ldw	r8,244(sp)
    3784:	103c340e 	bge	r2,zero,2858 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002858>
    3788:	0005883a 	mov	r2,zero
    378c:	003c3206 	br	2858 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002858>
    3790:	d9002c17 	ldw	r4,176(sp)
    3794:	d9801e04 	addi	r6,sp,120
    3798:	b80b883a 	mov	r5,r23
    379c:	00091f80 	call	91f8 <__sprint_r>
    37a0:	103a181e 	bne	r2,zero,2004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002004>
    37a4:	d8c02017 	ldw	r3,128(sp)
    37a8:	d8801f17 	ldw	r2,124(sp)
    37ac:	da000404 	addi	r8,sp,16
    37b0:	d9403317 	ldw	r5,204(sp)
    37b4:	10800044 	addi	r2,r2,1
    37b8:	44000015 	stw	r16,0(r8)
    37bc:	28c7883a 	add	r3,r5,r3
    37c0:	003b7d06 	br	25b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70025b8>
    37c4:	010000b4 	movhi	r4,2
    37c8:	212ba284 	addi	r4,r4,-20854
    37cc:	d9003515 	stw	r4,212(sp)
    37d0:	003b1406 	br	2424 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002424>
    37d4:	013fffc4 	movi	r4,-1
    37d8:	003a3506 	br	20b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70020b0>
    37dc:	0023883a 	mov	r17,zero
    37e0:	003d9d06 	br	2e58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002e58>
    37e4:	d9002c17 	ldw	r4,176(sp)
    37e8:	d9801e04 	addi	r6,sp,120
    37ec:	b80b883a 	mov	r5,r23
    37f0:	00091f80 	call	91f8 <__sprint_r>
    37f4:	103a031e 	bne	r2,zero,2004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002004>
    37f8:	d8c02017 	ldw	r3,128(sp)
    37fc:	da000404 	addi	r8,sp,16
    3800:	003d9406 	br	2e54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002e54>
    3804:	010000b4 	movhi	r4,2
    3808:	212b9e84 	addi	r4,r4,-20870
    380c:	d9002b15 	stw	r4,172(sp)
    3810:	d9002b17 	ldw	r4,172(sp)
    3814:	1c47883a 	add	r3,r3,r17
    3818:	10800044 	addi	r2,r2,1
    381c:	41000015 	stw	r4,0(r8)
    3820:	44400115 	stw	r17,4(r8)
    3824:	d8c02015 	stw	r3,128(sp)
    3828:	d8801f15 	stw	r2,124(sp)
    382c:	010001c4 	movi	r4,7
    3830:	20bfd716 	blt	r4,r2,3790 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003790>
    3834:	42000204 	addi	r8,r8,8
    3838:	003fdd06 	br	37b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70037b0>
    383c:	d9002c17 	ldw	r4,176(sp)
    3840:	d9801e04 	addi	r6,sp,120
    3844:	b80b883a 	mov	r5,r23
    3848:	00091f80 	call	91f8 <__sprint_r>
    384c:	1039ed1e 	bne	r2,zero,2004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002004>
    3850:	d8802617 	ldw	r2,152(sp)
    3854:	d8c02017 	ldw	r3,128(sp)
    3858:	da000404 	addi	r8,sp,16
    385c:	003e1006 	br	30a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70030a0>
    3860:	00800044 	movi	r2,1
    3864:	10803fcc 	andi	r2,r2,255
    3868:	00c00044 	movi	r3,1
    386c:	10fa3526 	beq	r2,r3,2144 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002144>
    3870:	00c00084 	movi	r3,2
    3874:	10fbcb26 	beq	r2,r3,27a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70027a4>
    3878:	003a8f06 	br	22b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70022b8>
    387c:	010000b4 	movhi	r4,2
    3880:	212ba284 	addi	r4,r4,-20854
    3884:	d9003515 	stw	r4,212(sp)
    3888:	003b7606 	br	2664 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002664>
    388c:	d8802917 	ldw	r2,164(sp)
    3890:	00c00184 	movi	r3,6
    3894:	1880012e 	bgeu	r3,r2,389c <___vfprintf_internal_r+0x1ca0>
    3898:	1805883a 	mov	r2,r3
    389c:	d8802e15 	stw	r2,184(sp)
    38a0:	1000ef16 	blt	r2,zero,3c60 <___vfprintf_internal_r+0x2064>
    38a4:	040000b4 	movhi	r16,2
    38a8:	d8802a15 	stw	r2,168(sp)
    38ac:	dcc02d15 	stw	r19,180(sp)
    38b0:	d8002915 	stw	zero,164(sp)
    38b4:	d8003215 	stw	zero,200(sp)
    38b8:	842b9c04 	addi	r16,r16,-20880
    38bc:	0039883a 	mov	fp,zero
    38c0:	003aa206 	br	234c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700234c>
    38c4:	0021883a 	mov	r16,zero
    38c8:	003e0706 	br	30e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70030e8>
    38cc:	d9002c17 	ldw	r4,176(sp)
    38d0:	d9801e04 	addi	r6,sp,120
    38d4:	b80b883a 	mov	r5,r23
    38d8:	00091f80 	call	91f8 <__sprint_r>
    38dc:	1039c91e 	bne	r2,zero,2004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002004>
    38e0:	d8802617 	ldw	r2,152(sp)
    38e4:	d9403317 	ldw	r5,204(sp)
    38e8:	d8c02017 	ldw	r3,128(sp)
    38ec:	da000404 	addi	r8,sp,16
    38f0:	2885c83a 	sub	r2,r5,r2
    38f4:	003dfb06 	br	30e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70030e4>
    38f8:	9080004c 	andi	r2,r18,1
    38fc:	103e8f1e 	bne	r2,zero,333c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700333c>
    3900:	d8802117 	ldw	r2,132(sp)
    3904:	003e9e06 	br	3380 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003380>
    3908:	1025883a 	mov	r18,r2
    390c:	0039883a 	mov	fp,zero
    3910:	00800084 	movi	r2,2
    3914:	003fd306 	br	3864 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003864>
    3918:	07000b44 	movi	fp,45
    391c:	df002785 	stb	fp,158(sp)
    3920:	003a4006 	br	2224 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002224>
    3924:	00c00b44 	movi	r3,45
    3928:	d8c02785 	stb	r3,158(sp)
    392c:	d8802a15 	stw	r2,168(sp)
    3930:	dc802b17 	ldw	r18,172(sp)
    3934:	d8002915 	stw	zero,164(sp)
    3938:	07000b44 	movi	fp,45
    393c:	003a8006 	br	2340 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002340>
    3940:	040000b4 	movhi	r16,2
    3944:	842b9104 	addi	r16,r16,-20924
    3948:	003f4706 	br	3668 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003668>
    394c:	d8c02d17 	ldw	r3,180(sp)
    3950:	d9002f17 	ldw	r4,188(sp)
    3954:	18800017 	ldw	r2,0(r3)
    3958:	18c00104 	addi	r3,r3,4
    395c:	d8c02d15 	stw	r3,180(sp)
    3960:	11000015 	stw	r4,0(r2)
    3964:	0038dd06 	br	1cdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001cdc>
    3968:	dd802617 	ldw	r22,152(sp)
    396c:	00bfff44 	movi	r2,-3
    3970:	b0801c16 	blt	r22,r2,39e4 <___vfprintf_internal_r+0x1de8>
    3974:	d9402917 	ldw	r5,164(sp)
    3978:	2d801a16 	blt	r5,r22,39e4 <___vfprintf_internal_r+0x1de8>
    397c:	dd803215 	stw	r22,200(sp)
    3980:	003e8906 	br	33a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70033a8>
    3984:	010000b4 	movhi	r4,2
    3988:	212b9e84 	addi	r4,r4,-20870
    398c:	d9002b15 	stw	r4,172(sp)
    3990:	003c9106 	br	2bd8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002bd8>
    3994:	e005883a 	mov	r2,fp
    3998:	003e7906 	br	3380 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003380>
    399c:	d9402917 	ldw	r5,164(sp)
    39a0:	df002783 	ldbu	fp,158(sp)
    39a4:	dcc02d15 	stw	r19,180(sp)
    39a8:	d9402a15 	stw	r5,168(sp)
    39ac:	d9402e15 	stw	r5,184(sp)
    39b0:	d8002915 	stw	zero,164(sp)
    39b4:	d8003215 	stw	zero,200(sp)
    39b8:	003a5d06 	br	2330 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002330>
    39bc:	9080004c 	andi	r2,r18,1
    39c0:	0039883a 	mov	fp,zero
    39c4:	10000426 	beq	r2,zero,39d8 <___vfprintf_internal_r+0x1ddc>
    39c8:	00800c04 	movi	r2,48
    39cc:	dc001dc4 	addi	r16,sp,119
    39d0:	d8801dc5 	stb	r2,119(sp)
    39d4:	003b8006 	br	27d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70027d8>
    39d8:	d8002e15 	stw	zero,184(sp)
    39dc:	dc001e04 	addi	r16,sp,120
    39e0:	003a4d06 	br	2318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002318>
    39e4:	8c7fff84 	addi	r17,r17,-2
    39e8:	b5bfffc4 	addi	r22,r22,-1
    39ec:	dd802615 	stw	r22,152(sp)
    39f0:	dc4022c5 	stb	r17,139(sp)
    39f4:	b000bf16 	blt	r22,zero,3cf4 <___vfprintf_internal_r+0x20f8>
    39f8:	00800ac4 	movi	r2,43
    39fc:	d8802305 	stb	r2,140(sp)
    3a00:	00800244 	movi	r2,9
    3a04:	15807016 	blt	r2,r22,3bc8 <___vfprintf_internal_r+0x1fcc>
    3a08:	00800c04 	movi	r2,48
    3a0c:	b5800c04 	addi	r22,r22,48
    3a10:	d8802345 	stb	r2,141(sp)
    3a14:	dd802385 	stb	r22,142(sp)
    3a18:	d88023c4 	addi	r2,sp,143
    3a1c:	df0022c4 	addi	fp,sp,139
    3a20:	d8c03317 	ldw	r3,204(sp)
    3a24:	1739c83a 	sub	fp,r2,fp
    3a28:	d9003317 	ldw	r4,204(sp)
    3a2c:	e0c7883a 	add	r3,fp,r3
    3a30:	df003a15 	stw	fp,232(sp)
    3a34:	d8c02e15 	stw	r3,184(sp)
    3a38:	00800044 	movi	r2,1
    3a3c:	1100b30e 	bge	r2,r4,3d0c <___vfprintf_internal_r+0x2110>
    3a40:	d8c02e17 	ldw	r3,184(sp)
    3a44:	18c00044 	addi	r3,r3,1
    3a48:	d8c02e15 	stw	r3,184(sp)
    3a4c:	1805883a 	mov	r2,r3
    3a50:	1800ac16 	blt	r3,zero,3d04 <___vfprintf_internal_r+0x2108>
    3a54:	d8003215 	stw	zero,200(sp)
    3a58:	003e5d06 	br	33d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70033d0>
    3a5c:	d9002c17 	ldw	r4,176(sp)
    3a60:	d9801e04 	addi	r6,sp,120
    3a64:	b80b883a 	mov	r5,r23
    3a68:	00091f80 	call	91f8 <__sprint_r>
    3a6c:	1039651e 	bne	r2,zero,2004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002004>
    3a70:	dc402617 	ldw	r17,152(sp)
    3a74:	d8c02017 	ldw	r3,128(sp)
    3a78:	d8801f17 	ldw	r2,124(sp)
    3a7c:	da000404 	addi	r8,sp,16
    3a80:	003ed606 	br	35dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70035dc>
    3a84:	582b883a 	mov	r21,r11
    3a88:	d8002915 	stw	zero,164(sp)
    3a8c:	0038bd06 	br	1d84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d84>
    3a90:	d8802917 	ldw	r2,164(sp)
    3a94:	103e071e 	bne	r2,zero,32b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70032b4>
    3a98:	dc002915 	stw	r16,164(sp)
    3a9c:	003e0506 	br	32b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70032b4>
    3aa0:	d9002917 	ldw	r4,164(sp)
    3aa4:	20c00044 	addi	r3,r4,1
    3aa8:	003e0f06 	br	32e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70032e8>
    3aac:	01400184 	movi	r5,6
    3ab0:	d9402915 	stw	r5,164(sp)
    3ab4:	003dff06 	br	32b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70032b4>
    3ab8:	d8802104 	addi	r2,sp,132
    3abc:	d8800315 	stw	r2,12(sp)
    3ac0:	d8802504 	addi	r2,sp,148
    3ac4:	d8800215 	stw	r2,8(sp)
    3ac8:	d8802604 	addi	r2,sp,152
    3acc:	d8800115 	stw	r2,4(sp)
    3ad0:	d8802917 	ldw	r2,164(sp)
    3ad4:	d9403617 	ldw	r5,216(sp)
    3ad8:	d9002c17 	ldw	r4,176(sp)
    3adc:	d8800015 	stw	r2,0(sp)
    3ae0:	01c000c4 	movi	r7,3
    3ae4:	980d883a 	mov	r6,r19
    3ae8:	da003d15 	stw	r8,244(sp)
    3aec:	00042200 	call	4220 <_dtoa_r>
    3af0:	d8c02917 	ldw	r3,164(sp)
    3af4:	da003d17 	ldw	r8,244(sp)
    3af8:	1021883a 	mov	r16,r2
    3afc:	10f9883a 	add	fp,r2,r3
    3b00:	81000007 	ldb	r4,0(r16)
    3b04:	00800c04 	movi	r2,48
    3b08:	20805e26 	beq	r4,r2,3c84 <___vfprintf_internal_r+0x2088>
    3b0c:	d8c02617 	ldw	r3,152(sp)
    3b10:	e0f9883a 	add	fp,fp,r3
    3b14:	003e0a06 	br	3340 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003340>
    3b18:	00c00b44 	movi	r3,45
    3b1c:	24e0003c 	xorhi	r19,r4,32768
    3b20:	d8c02a05 	stb	r3,168(sp)
    3b24:	003de906 	br	32cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70032cc>
    3b28:	d8c03217 	ldw	r3,200(sp)
    3b2c:	00c07a0e 	bge	zero,r3,3d18 <___vfprintf_internal_r+0x211c>
    3b30:	00800044 	movi	r2,1
    3b34:	d9003317 	ldw	r4,204(sp)
    3b38:	1105883a 	add	r2,r2,r4
    3b3c:	d8802e15 	stw	r2,184(sp)
    3b40:	10004e16 	blt	r2,zero,3c7c <___vfprintf_internal_r+0x2080>
    3b44:	044019c4 	movi	r17,103
    3b48:	003e2106 	br	33d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70033d0>
    3b4c:	d9002917 	ldw	r4,164(sp)
    3b50:	d8802104 	addi	r2,sp,132
    3b54:	d8800315 	stw	r2,12(sp)
    3b58:	d9000015 	stw	r4,0(sp)
    3b5c:	d8802504 	addi	r2,sp,148
    3b60:	d9403617 	ldw	r5,216(sp)
    3b64:	d9002c17 	ldw	r4,176(sp)
    3b68:	d8800215 	stw	r2,8(sp)
    3b6c:	d8802604 	addi	r2,sp,152
    3b70:	d8800115 	stw	r2,4(sp)
    3b74:	01c000c4 	movi	r7,3
    3b78:	980d883a 	mov	r6,r19
    3b7c:	da003d15 	stw	r8,244(sp)
    3b80:	00042200 	call	4220 <_dtoa_r>
    3b84:	d8c02917 	ldw	r3,164(sp)
    3b88:	da003d17 	ldw	r8,244(sp)
    3b8c:	1021883a 	mov	r16,r2
    3b90:	00801184 	movi	r2,70
    3b94:	80f9883a 	add	fp,r16,r3
    3b98:	88bfd926 	beq	r17,r2,3b00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003b00>
    3b9c:	003de806 	br	3340 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003340>
    3ba0:	d9002917 	ldw	r4,164(sp)
    3ba4:	00c04d0e 	bge	zero,r3,3cdc <___vfprintf_internal_r+0x20e0>
    3ba8:	2000441e 	bne	r4,zero,3cbc <___vfprintf_internal_r+0x20c0>
    3bac:	9480004c 	andi	r18,r18,1
    3bb0:	9000421e 	bne	r18,zero,3cbc <___vfprintf_internal_r+0x20c0>
    3bb4:	1805883a 	mov	r2,r3
    3bb8:	18007016 	blt	r3,zero,3d7c <___vfprintf_internal_r+0x2180>
    3bbc:	d8c03217 	ldw	r3,200(sp)
    3bc0:	d8c02e15 	stw	r3,184(sp)
    3bc4:	003e0206 	br	33d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70033d0>
    3bc8:	df0022c4 	addi	fp,sp,139
    3bcc:	dc002915 	stw	r16,164(sp)
    3bd0:	4027883a 	mov	r19,r8
    3bd4:	e021883a 	mov	r16,fp
    3bd8:	b009883a 	mov	r4,r22
    3bdc:	01400284 	movi	r5,10
    3be0:	000bbac0 	call	bbac <__modsi3>
    3be4:	10800c04 	addi	r2,r2,48
    3be8:	843fffc4 	addi	r16,r16,-1
    3bec:	b009883a 	mov	r4,r22
    3bf0:	01400284 	movi	r5,10
    3bf4:	80800005 	stb	r2,0(r16)
    3bf8:	000bb280 	call	bb28 <__divsi3>
    3bfc:	102d883a 	mov	r22,r2
    3c00:	00800244 	movi	r2,9
    3c04:	15bff416 	blt	r2,r22,3bd8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003bd8>
    3c08:	9811883a 	mov	r8,r19
    3c0c:	b0800c04 	addi	r2,r22,48
    3c10:	8027883a 	mov	r19,r16
    3c14:	997fffc4 	addi	r5,r19,-1
    3c18:	98bfffc5 	stb	r2,-1(r19)
    3c1c:	dc002917 	ldw	r16,164(sp)
    3c20:	2f006a2e 	bgeu	r5,fp,3dcc <___vfprintf_internal_r+0x21d0>
    3c24:	d9c02384 	addi	r7,sp,142
    3c28:	3ccfc83a 	sub	r7,r7,r19
    3c2c:	d9002344 	addi	r4,sp,141
    3c30:	e1cf883a 	add	r7,fp,r7
    3c34:	00000106 	br	3c3c <___vfprintf_internal_r+0x2040>
    3c38:	28800003 	ldbu	r2,0(r5)
    3c3c:	20800005 	stb	r2,0(r4)
    3c40:	21000044 	addi	r4,r4,1
    3c44:	29400044 	addi	r5,r5,1
    3c48:	393ffb1e 	bne	r7,r4,3c38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003c38>
    3c4c:	d8802304 	addi	r2,sp,140
    3c50:	14c5c83a 	sub	r2,r2,r19
    3c54:	d8c02344 	addi	r3,sp,141
    3c58:	1885883a 	add	r2,r3,r2
    3c5c:	003f7006 	br	3a20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003a20>
    3c60:	0005883a 	mov	r2,zero
    3c64:	003f0f06 	br	38a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70038a4>
    3c68:	d8c03217 	ldw	r3,200(sp)
    3c6c:	18c00044 	addi	r3,r3,1
    3c70:	d8c02e15 	stw	r3,184(sp)
    3c74:	1805883a 	mov	r2,r3
    3c78:	183fb20e 	bge	r3,zero,3b44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003b44>
    3c7c:	0005883a 	mov	r2,zero
    3c80:	003fb006 	br	3b44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003b44>
    3c84:	d9003617 	ldw	r4,216(sp)
    3c88:	000d883a 	mov	r6,zero
    3c8c:	000f883a 	mov	r7,zero
    3c90:	980b883a 	mov	r5,r19
    3c94:	d8c03c15 	stw	r3,240(sp)
    3c98:	da003d15 	stw	r8,244(sp)
    3c9c:	000ce700 	call	ce70 <__eqdf2>
    3ca0:	d8c03c17 	ldw	r3,240(sp)
    3ca4:	da003d17 	ldw	r8,244(sp)
    3ca8:	103f9826 	beq	r2,zero,3b0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003b0c>
    3cac:	00800044 	movi	r2,1
    3cb0:	10c7c83a 	sub	r3,r2,r3
    3cb4:	d8c02615 	stw	r3,152(sp)
    3cb8:	003f9506 	br	3b10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003b10>
    3cbc:	d9002917 	ldw	r4,164(sp)
    3cc0:	d8c03217 	ldw	r3,200(sp)
    3cc4:	20800044 	addi	r2,r4,1
    3cc8:	1885883a 	add	r2,r3,r2
    3ccc:	d8802e15 	stw	r2,184(sp)
    3cd0:	103dbf0e 	bge	r2,zero,33d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70033d0>
    3cd4:	0005883a 	mov	r2,zero
    3cd8:	003dbd06 	br	33d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70033d0>
    3cdc:	2000211e 	bne	r4,zero,3d64 <___vfprintf_internal_r+0x2168>
    3ce0:	9480004c 	andi	r18,r18,1
    3ce4:	90001f1e 	bne	r18,zero,3d64 <___vfprintf_internal_r+0x2168>
    3ce8:	00800044 	movi	r2,1
    3cec:	d8802e15 	stw	r2,184(sp)
    3cf0:	003db706 	br	33d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70033d0>
    3cf4:	00800b44 	movi	r2,45
    3cf8:	05adc83a 	sub	r22,zero,r22
    3cfc:	d8802305 	stb	r2,140(sp)
    3d00:	003f3f06 	br	3a00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003a00>
    3d04:	0005883a 	mov	r2,zero
    3d08:	003f5206 	br	3a54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003a54>
    3d0c:	90a4703a 	and	r18,r18,r2
    3d10:	903f4e26 	beq	r18,zero,3a4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003a4c>
    3d14:	003f4a06 	br	3a40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003a40>
    3d18:	00800084 	movi	r2,2
    3d1c:	10c5c83a 	sub	r2,r2,r3
    3d20:	003f8406 	br	3b34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003b34>
    3d24:	d8802d17 	ldw	r2,180(sp)
    3d28:	d9002d17 	ldw	r4,180(sp)
    3d2c:	ac400043 	ldbu	r17,1(r21)
    3d30:	10800017 	ldw	r2,0(r2)
    3d34:	582b883a 	mov	r21,r11
    3d38:	d8802915 	stw	r2,164(sp)
    3d3c:	20800104 	addi	r2,r4,4
    3d40:	d9002917 	ldw	r4,164(sp)
    3d44:	d8802d15 	stw	r2,180(sp)
    3d48:	203e7a0e 	bge	r4,zero,3734 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003734>
    3d4c:	8c403fcc 	andi	r17,r17,255
    3d50:	00bfffc4 	movi	r2,-1
    3d54:	8c40201c 	xori	r17,r17,128
    3d58:	d8802915 	stw	r2,164(sp)
    3d5c:	8c7fe004 	addi	r17,r17,-128
    3d60:	00380706 	br	1d80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d80>
    3d64:	d8c02917 	ldw	r3,164(sp)
    3d68:	18c00084 	addi	r3,r3,2
    3d6c:	d8c02e15 	stw	r3,184(sp)
    3d70:	1805883a 	mov	r2,r3
    3d74:	183d960e 	bge	r3,zero,33d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70033d0>
    3d78:	003fd606 	br	3cd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003cd4>
    3d7c:	0005883a 	mov	r2,zero
    3d80:	003f8e06 	br	3bbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003bbc>
    3d84:	9080004c 	andi	r2,r18,1
    3d88:	103f811e 	bne	r2,zero,3b90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003b90>
    3d8c:	d8802117 	ldw	r2,132(sp)
    3d90:	1405c83a 	sub	r2,r2,r16
    3d94:	d8803315 	stw	r2,204(sp)
    3d98:	b47ef326 	beq	r22,r17,3968 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003968>
    3d9c:	dd802617 	ldw	r22,152(sp)
    3da0:	003f1106 	br	39e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70039e8>
    3da4:	d9c02785 	stb	r7,158(sp)
    3da8:	00390406 	br	21bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70021bc>
    3dac:	d9c02785 	stb	r7,158(sp)
    3db0:	0038d306 	br	2100 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002100>
    3db4:	d9c02785 	stb	r7,158(sp)
    3db8:	003a6106 	br	2740 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002740>
    3dbc:	d9c02785 	stb	r7,158(sp)
    3dc0:	003af806 	br	29a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70029a4>
    3dc4:	0005883a 	mov	r2,zero
    3dc8:	003d7e06 	br	33c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70033c4>
    3dcc:	d8802344 	addi	r2,sp,141
    3dd0:	003f1306 	br	3a20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003a20>
    3dd4:	d9c02785 	stb	r7,158(sp)
    3dd8:	00392306 	br	2268 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002268>
    3ddc:	d9c02785 	stb	r7,158(sp)
    3de0:	003aa906 	br	2888 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002888>
    3de4:	d9c02785 	stb	r7,158(sp)
    3de8:	003a3d06 	br	26e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70026e0>
    3dec:	d9c02785 	stb	r7,158(sp)
    3df0:	003aca06 	br	291c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700291c>

00003df4 <__vfprintf_internal>:
    3df4:	008000b4 	movhi	r2,2
    3df8:	10b49c04 	addi	r2,r2,-11664
    3dfc:	300f883a 	mov	r7,r6
    3e00:	280d883a 	mov	r6,r5
    3e04:	200b883a 	mov	r5,r4
    3e08:	11000017 	ldw	r4,0(r2)
    3e0c:	0001bfc1 	jmpi	1bfc <___vfprintf_internal_r>

00003e10 <__sbprintf>:
    3e10:	2880030b 	ldhu	r2,12(r5)
    3e14:	2ac01917 	ldw	r11,100(r5)
    3e18:	2a80038b 	ldhu	r10,14(r5)
    3e1c:	2a400717 	ldw	r9,28(r5)
    3e20:	2a000917 	ldw	r8,36(r5)
    3e24:	defee204 	addi	sp,sp,-1144
    3e28:	00c10004 	movi	r3,1024
    3e2c:	dc011a15 	stw	r16,1128(sp)
    3e30:	10bfff4c 	andi	r2,r2,65533
    3e34:	2821883a 	mov	r16,r5
    3e38:	d8cb883a 	add	r5,sp,r3
    3e3c:	dc811c15 	stw	r18,1136(sp)
    3e40:	dc411b15 	stw	r17,1132(sp)
    3e44:	dfc11d15 	stw	ra,1140(sp)
    3e48:	2025883a 	mov	r18,r4
    3e4c:	d881030d 	sth	r2,1036(sp)
    3e50:	dac11915 	stw	r11,1124(sp)
    3e54:	da81038d 	sth	r10,1038(sp)
    3e58:	da410715 	stw	r9,1052(sp)
    3e5c:	da010915 	stw	r8,1060(sp)
    3e60:	dec10015 	stw	sp,1024(sp)
    3e64:	dec10415 	stw	sp,1040(sp)
    3e68:	d8c10215 	stw	r3,1032(sp)
    3e6c:	d8c10515 	stw	r3,1044(sp)
    3e70:	d8010615 	stw	zero,1048(sp)
    3e74:	0001bfc0 	call	1bfc <___vfprintf_internal_r>
    3e78:	1023883a 	mov	r17,r2
    3e7c:	10000416 	blt	r2,zero,3e90 <__sbprintf+0x80>
    3e80:	d9410004 	addi	r5,sp,1024
    3e84:	9009883a 	mov	r4,r18
    3e88:	0005ac40 	call	5ac4 <_fflush_r>
    3e8c:	10000d1e 	bne	r2,zero,3ec4 <__sbprintf+0xb4>
    3e90:	d881030b 	ldhu	r2,1036(sp)
    3e94:	1080100c 	andi	r2,r2,64
    3e98:	10000326 	beq	r2,zero,3ea8 <__sbprintf+0x98>
    3e9c:	8080030b 	ldhu	r2,12(r16)
    3ea0:	10801014 	ori	r2,r2,64
    3ea4:	8080030d 	sth	r2,12(r16)
    3ea8:	8805883a 	mov	r2,r17
    3eac:	dfc11d17 	ldw	ra,1140(sp)
    3eb0:	dc811c17 	ldw	r18,1136(sp)
    3eb4:	dc411b17 	ldw	r17,1132(sp)
    3eb8:	dc011a17 	ldw	r16,1128(sp)
    3ebc:	dec11e04 	addi	sp,sp,1144
    3ec0:	f800283a 	ret
    3ec4:	047fffc4 	movi	r17,-1
    3ec8:	003ff106 	br	3e90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003e90>

00003ecc <__swsetup_r>:
    3ecc:	008000b4 	movhi	r2,2
    3ed0:	defffd04 	addi	sp,sp,-12
    3ed4:	10b49c04 	addi	r2,r2,-11664
    3ed8:	dc400115 	stw	r17,4(sp)
    3edc:	2023883a 	mov	r17,r4
    3ee0:	11000017 	ldw	r4,0(r2)
    3ee4:	dc000015 	stw	r16,0(sp)
    3ee8:	dfc00215 	stw	ra,8(sp)
    3eec:	2821883a 	mov	r16,r5
    3ef0:	20000226 	beq	r4,zero,3efc <__swsetup_r+0x30>
    3ef4:	20800e17 	ldw	r2,56(r4)
    3ef8:	10003126 	beq	r2,zero,3fc0 <__swsetup_r+0xf4>
    3efc:	8080030b 	ldhu	r2,12(r16)
    3f00:	10c0020c 	andi	r3,r2,8
    3f04:	1009883a 	mov	r4,r2
    3f08:	18000f26 	beq	r3,zero,3f48 <__swsetup_r+0x7c>
    3f0c:	80c00417 	ldw	r3,16(r16)
    3f10:	18001526 	beq	r3,zero,3f68 <__swsetup_r+0x9c>
    3f14:	1100004c 	andi	r4,r2,1
    3f18:	20001c1e 	bne	r4,zero,3f8c <__swsetup_r+0xc0>
    3f1c:	1080008c 	andi	r2,r2,2
    3f20:	1000291e 	bne	r2,zero,3fc8 <__swsetup_r+0xfc>
    3f24:	80800517 	ldw	r2,20(r16)
    3f28:	80800215 	stw	r2,8(r16)
    3f2c:	18001c26 	beq	r3,zero,3fa0 <__swsetup_r+0xd4>
    3f30:	0005883a 	mov	r2,zero
    3f34:	dfc00217 	ldw	ra,8(sp)
    3f38:	dc400117 	ldw	r17,4(sp)
    3f3c:	dc000017 	ldw	r16,0(sp)
    3f40:	dec00304 	addi	sp,sp,12
    3f44:	f800283a 	ret
    3f48:	2080040c 	andi	r2,r4,16
    3f4c:	10002e26 	beq	r2,zero,4008 <__swsetup_r+0x13c>
    3f50:	2080010c 	andi	r2,r4,4
    3f54:	10001e1e 	bne	r2,zero,3fd0 <__swsetup_r+0x104>
    3f58:	80c00417 	ldw	r3,16(r16)
    3f5c:	20800214 	ori	r2,r4,8
    3f60:	8080030d 	sth	r2,12(r16)
    3f64:	183feb1e 	bne	r3,zero,3f14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f14>
    3f68:	1100a00c 	andi	r4,r2,640
    3f6c:	01408004 	movi	r5,512
    3f70:	217fe826 	beq	r4,r5,3f14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f14>
    3f74:	800b883a 	mov	r5,r16
    3f78:	8809883a 	mov	r4,r17
    3f7c:	0006a440 	call	6a44 <__smakebuf_r>
    3f80:	8080030b 	ldhu	r2,12(r16)
    3f84:	80c00417 	ldw	r3,16(r16)
    3f88:	003fe206 	br	3f14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f14>
    3f8c:	80800517 	ldw	r2,20(r16)
    3f90:	80000215 	stw	zero,8(r16)
    3f94:	0085c83a 	sub	r2,zero,r2
    3f98:	80800615 	stw	r2,24(r16)
    3f9c:	183fe41e 	bne	r3,zero,3f30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f30>
    3fa0:	80c0030b 	ldhu	r3,12(r16)
    3fa4:	0005883a 	mov	r2,zero
    3fa8:	1900200c 	andi	r4,r3,128
    3fac:	203fe126 	beq	r4,zero,3f34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f34>
    3fb0:	18c01014 	ori	r3,r3,64
    3fb4:	80c0030d 	sth	r3,12(r16)
    3fb8:	00bfffc4 	movi	r2,-1
    3fbc:	003fdd06 	br	3f34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f34>
    3fc0:	0005ea00 	call	5ea0 <__sinit>
    3fc4:	003fcd06 	br	3efc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003efc>
    3fc8:	0005883a 	mov	r2,zero
    3fcc:	003fd606 	br	3f28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f28>
    3fd0:	81400c17 	ldw	r5,48(r16)
    3fd4:	28000626 	beq	r5,zero,3ff0 <__swsetup_r+0x124>
    3fd8:	80801004 	addi	r2,r16,64
    3fdc:	28800326 	beq	r5,r2,3fec <__swsetup_r+0x120>
    3fe0:	8809883a 	mov	r4,r17
    3fe4:	00060140 	call	6014 <_free_r>
    3fe8:	8100030b 	ldhu	r4,12(r16)
    3fec:	80000c15 	stw	zero,48(r16)
    3ff0:	80c00417 	ldw	r3,16(r16)
    3ff4:	00bff6c4 	movi	r2,-37
    3ff8:	1108703a 	and	r4,r2,r4
    3ffc:	80000115 	stw	zero,4(r16)
    4000:	80c00015 	stw	r3,0(r16)
    4004:	003fd506 	br	3f5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f5c>
    4008:	00800244 	movi	r2,9
    400c:	88800015 	stw	r2,0(r17)
    4010:	20801014 	ori	r2,r4,64
    4014:	8080030d 	sth	r2,12(r16)
    4018:	00bfffc4 	movi	r2,-1
    401c:	003fc506 	br	3f34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f34>

00004020 <quorem>:
    4020:	defff704 	addi	sp,sp,-36
    4024:	dc800215 	stw	r18,8(sp)
    4028:	20800417 	ldw	r2,16(r4)
    402c:	2c800417 	ldw	r18,16(r5)
    4030:	dfc00815 	stw	ra,32(sp)
    4034:	ddc00715 	stw	r23,28(sp)
    4038:	dd800615 	stw	r22,24(sp)
    403c:	dd400515 	stw	r21,20(sp)
    4040:	dd000415 	stw	r20,16(sp)
    4044:	dcc00315 	stw	r19,12(sp)
    4048:	dc400115 	stw	r17,4(sp)
    404c:	dc000015 	stw	r16,0(sp)
    4050:	14807116 	blt	r2,r18,4218 <quorem+0x1f8>
    4054:	94bfffc4 	addi	r18,r18,-1
    4058:	94ad883a 	add	r22,r18,r18
    405c:	b5ad883a 	add	r22,r22,r22
    4060:	2c400504 	addi	r17,r5,20
    4064:	8da9883a 	add	r20,r17,r22
    4068:	25400504 	addi	r21,r4,20
    406c:	282f883a 	mov	r23,r5
    4070:	adad883a 	add	r22,r21,r22
    4074:	a1400017 	ldw	r5,0(r20)
    4078:	2021883a 	mov	r16,r4
    407c:	b1000017 	ldw	r4,0(r22)
    4080:	29400044 	addi	r5,r5,1
    4084:	000bc200 	call	bc20 <__udivsi3>
    4088:	1027883a 	mov	r19,r2
    408c:	10002c26 	beq	r2,zero,4140 <quorem+0x120>
    4090:	a813883a 	mov	r9,r21
    4094:	880b883a 	mov	r5,r17
    4098:	0009883a 	mov	r4,zero
    409c:	000d883a 	mov	r6,zero
    40a0:	2a000017 	ldw	r8,0(r5)
    40a4:	49c00017 	ldw	r7,0(r9)
    40a8:	29400104 	addi	r5,r5,4
    40ac:	40bfffcc 	andi	r2,r8,65535
    40b0:	14c5383a 	mul	r2,r2,r19
    40b4:	4010d43a 	srli	r8,r8,16
    40b8:	38ffffcc 	andi	r3,r7,65535
    40bc:	1105883a 	add	r2,r2,r4
    40c0:	1008d43a 	srli	r4,r2,16
    40c4:	44d1383a 	mul	r8,r8,r19
    40c8:	198d883a 	add	r6,r3,r6
    40cc:	10ffffcc 	andi	r3,r2,65535
    40d0:	30c7c83a 	sub	r3,r6,r3
    40d4:	380ed43a 	srli	r7,r7,16
    40d8:	4105883a 	add	r2,r8,r4
    40dc:	180dd43a 	srai	r6,r3,16
    40e0:	113fffcc 	andi	r4,r2,65535
    40e4:	390fc83a 	sub	r7,r7,r4
    40e8:	398d883a 	add	r6,r7,r6
    40ec:	300e943a 	slli	r7,r6,16
    40f0:	18ffffcc 	andi	r3,r3,65535
    40f4:	1008d43a 	srli	r4,r2,16
    40f8:	38ceb03a 	or	r7,r7,r3
    40fc:	49c00015 	stw	r7,0(r9)
    4100:	300dd43a 	srai	r6,r6,16
    4104:	4a400104 	addi	r9,r9,4
    4108:	a17fe52e 	bgeu	r20,r5,40a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70040a0>
    410c:	b0800017 	ldw	r2,0(r22)
    4110:	10000b1e 	bne	r2,zero,4140 <quorem+0x120>
    4114:	b0bfff04 	addi	r2,r22,-4
    4118:	a880082e 	bgeu	r21,r2,413c <quorem+0x11c>
    411c:	b0ffff17 	ldw	r3,-4(r22)
    4120:	18000326 	beq	r3,zero,4130 <quorem+0x110>
    4124:	00000506 	br	413c <quorem+0x11c>
    4128:	10c00017 	ldw	r3,0(r2)
    412c:	1800031e 	bne	r3,zero,413c <quorem+0x11c>
    4130:	10bfff04 	addi	r2,r2,-4
    4134:	94bfffc4 	addi	r18,r18,-1
    4138:	a8bffb36 	bltu	r21,r2,4128 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004128>
    413c:	84800415 	stw	r18,16(r16)
    4140:	b80b883a 	mov	r5,r23
    4144:	8009883a 	mov	r4,r16
    4148:	00081840 	call	8184 <__mcmp>
    414c:	10002616 	blt	r2,zero,41e8 <quorem+0x1c8>
    4150:	9cc00044 	addi	r19,r19,1
    4154:	a805883a 	mov	r2,r21
    4158:	000b883a 	mov	r5,zero
    415c:	11000017 	ldw	r4,0(r2)
    4160:	89800017 	ldw	r6,0(r17)
    4164:	10800104 	addi	r2,r2,4
    4168:	20ffffcc 	andi	r3,r4,65535
    416c:	194b883a 	add	r5,r3,r5
    4170:	30ffffcc 	andi	r3,r6,65535
    4174:	28c7c83a 	sub	r3,r5,r3
    4178:	300cd43a 	srli	r6,r6,16
    417c:	2008d43a 	srli	r4,r4,16
    4180:	180bd43a 	srai	r5,r3,16
    4184:	18ffffcc 	andi	r3,r3,65535
    4188:	2189c83a 	sub	r4,r4,r6
    418c:	2149883a 	add	r4,r4,r5
    4190:	200c943a 	slli	r6,r4,16
    4194:	8c400104 	addi	r17,r17,4
    4198:	200bd43a 	srai	r5,r4,16
    419c:	30c6b03a 	or	r3,r6,r3
    41a0:	10ffff15 	stw	r3,-4(r2)
    41a4:	a47fed2e 	bgeu	r20,r17,415c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700415c>
    41a8:	9485883a 	add	r2,r18,r18
    41ac:	1085883a 	add	r2,r2,r2
    41b0:	a887883a 	add	r3,r21,r2
    41b4:	18800017 	ldw	r2,0(r3)
    41b8:	10000b1e 	bne	r2,zero,41e8 <quorem+0x1c8>
    41bc:	18bfff04 	addi	r2,r3,-4
    41c0:	a880082e 	bgeu	r21,r2,41e4 <quorem+0x1c4>
    41c4:	18ffff17 	ldw	r3,-4(r3)
    41c8:	18000326 	beq	r3,zero,41d8 <quorem+0x1b8>
    41cc:	00000506 	br	41e4 <quorem+0x1c4>
    41d0:	10c00017 	ldw	r3,0(r2)
    41d4:	1800031e 	bne	r3,zero,41e4 <quorem+0x1c4>
    41d8:	10bfff04 	addi	r2,r2,-4
    41dc:	94bfffc4 	addi	r18,r18,-1
    41e0:	a8bffb36 	bltu	r21,r2,41d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70041d0>
    41e4:	84800415 	stw	r18,16(r16)
    41e8:	9805883a 	mov	r2,r19
    41ec:	dfc00817 	ldw	ra,32(sp)
    41f0:	ddc00717 	ldw	r23,28(sp)
    41f4:	dd800617 	ldw	r22,24(sp)
    41f8:	dd400517 	ldw	r21,20(sp)
    41fc:	dd000417 	ldw	r20,16(sp)
    4200:	dcc00317 	ldw	r19,12(sp)
    4204:	dc800217 	ldw	r18,8(sp)
    4208:	dc400117 	ldw	r17,4(sp)
    420c:	dc000017 	ldw	r16,0(sp)
    4210:	dec00904 	addi	sp,sp,36
    4214:	f800283a 	ret
    4218:	0005883a 	mov	r2,zero
    421c:	003ff306 	br	41ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70041ec>

00004220 <_dtoa_r>:
    4220:	20801017 	ldw	r2,64(r4)
    4224:	deffde04 	addi	sp,sp,-136
    4228:	df002015 	stw	fp,128(sp)
    422c:	dcc01b15 	stw	r19,108(sp)
    4230:	dc801a15 	stw	r18,104(sp)
    4234:	dc401915 	stw	r17,100(sp)
    4238:	dc001815 	stw	r16,96(sp)
    423c:	dfc02115 	stw	ra,132(sp)
    4240:	ddc01f15 	stw	r23,124(sp)
    4244:	dd801e15 	stw	r22,120(sp)
    4248:	dd401d15 	stw	r21,116(sp)
    424c:	dd001c15 	stw	r20,112(sp)
    4250:	d9c00315 	stw	r7,12(sp)
    4254:	2039883a 	mov	fp,r4
    4258:	3023883a 	mov	r17,r6
    425c:	2825883a 	mov	r18,r5
    4260:	dc002417 	ldw	r16,144(sp)
    4264:	3027883a 	mov	r19,r6
    4268:	10000826 	beq	r2,zero,428c <_dtoa_r+0x6c>
    426c:	21801117 	ldw	r6,68(r4)
    4270:	00c00044 	movi	r3,1
    4274:	100b883a 	mov	r5,r2
    4278:	1986983a 	sll	r3,r3,r6
    427c:	11800115 	stw	r6,4(r2)
    4280:	10c00215 	stw	r3,8(r2)
    4284:	00079640 	call	7964 <_Bfree>
    4288:	e0001015 	stw	zero,64(fp)
    428c:	88002e16 	blt	r17,zero,4348 <_dtoa_r+0x128>
    4290:	80000015 	stw	zero,0(r16)
    4294:	889ffc2c 	andhi	r2,r17,32752
    4298:	00dffc34 	movhi	r3,32752
    429c:	10c01c26 	beq	r2,r3,4310 <_dtoa_r+0xf0>
    42a0:	000d883a 	mov	r6,zero
    42a4:	000f883a 	mov	r7,zero
    42a8:	9009883a 	mov	r4,r18
    42ac:	980b883a 	mov	r5,r19
    42b0:	000ce700 	call	ce70 <__eqdf2>
    42b4:	10002b1e 	bne	r2,zero,4364 <_dtoa_r+0x144>
    42b8:	d9c02317 	ldw	r7,140(sp)
    42bc:	00800044 	movi	r2,1
    42c0:	38800015 	stw	r2,0(r7)
    42c4:	d8802517 	ldw	r2,148(sp)
    42c8:	10019e26 	beq	r2,zero,4944 <_dtoa_r+0x724>
    42cc:	d8c02517 	ldw	r3,148(sp)
    42d0:	008000b4 	movhi	r2,2
    42d4:	10ab9e44 	addi	r2,r2,-20871
    42d8:	18800015 	stw	r2,0(r3)
    42dc:	10bfffc4 	addi	r2,r2,-1
    42e0:	dfc02117 	ldw	ra,132(sp)
    42e4:	df002017 	ldw	fp,128(sp)
    42e8:	ddc01f17 	ldw	r23,124(sp)
    42ec:	dd801e17 	ldw	r22,120(sp)
    42f0:	dd401d17 	ldw	r21,116(sp)
    42f4:	dd001c17 	ldw	r20,112(sp)
    42f8:	dcc01b17 	ldw	r19,108(sp)
    42fc:	dc801a17 	ldw	r18,104(sp)
    4300:	dc401917 	ldw	r17,100(sp)
    4304:	dc001817 	ldw	r16,96(sp)
    4308:	dec02204 	addi	sp,sp,136
    430c:	f800283a 	ret
    4310:	d8c02317 	ldw	r3,140(sp)
    4314:	0089c3c4 	movi	r2,9999
    4318:	18800015 	stw	r2,0(r3)
    431c:	90017726 	beq	r18,zero,48fc <_dtoa_r+0x6dc>
    4320:	008000b4 	movhi	r2,2
    4324:	10abaa04 	addi	r2,r2,-20824
    4328:	d9002517 	ldw	r4,148(sp)
    432c:	203fec26 	beq	r4,zero,42e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70042e0>
    4330:	10c000c7 	ldb	r3,3(r2)
    4334:	1801781e 	bne	r3,zero,4918 <_dtoa_r+0x6f8>
    4338:	10c000c4 	addi	r3,r2,3
    433c:	d9802517 	ldw	r6,148(sp)
    4340:	30c00015 	stw	r3,0(r6)
    4344:	003fe606 	br	42e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70042e0>
    4348:	04e00034 	movhi	r19,32768
    434c:	9cffffc4 	addi	r19,r19,-1
    4350:	00800044 	movi	r2,1
    4354:	8ce6703a 	and	r19,r17,r19
    4358:	80800015 	stw	r2,0(r16)
    435c:	9823883a 	mov	r17,r19
    4360:	003fcc06 	br	4294 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004294>
    4364:	d8800204 	addi	r2,sp,8
    4368:	d8800015 	stw	r2,0(sp)
    436c:	d9c00104 	addi	r7,sp,4
    4370:	900b883a 	mov	r5,r18
    4374:	980d883a 	mov	r6,r19
    4378:	e009883a 	mov	r4,fp
    437c:	8820d53a 	srli	r16,r17,20
    4380:	00085500 	call	8550 <__d2b>
    4384:	d8800915 	stw	r2,36(sp)
    4388:	8001651e 	bne	r16,zero,4920 <_dtoa_r+0x700>
    438c:	dd800217 	ldw	r22,8(sp)
    4390:	dc000117 	ldw	r16,4(sp)
    4394:	00800804 	movi	r2,32
    4398:	b421883a 	add	r16,r22,r16
    439c:	80c10c84 	addi	r3,r16,1074
    43a0:	10c2d10e 	bge	r2,r3,4ee8 <_dtoa_r+0xcc8>
    43a4:	00801004 	movi	r2,64
    43a8:	81010484 	addi	r4,r16,1042
    43ac:	10c7c83a 	sub	r3,r2,r3
    43b0:	9108d83a 	srl	r4,r18,r4
    43b4:	88e2983a 	sll	r17,r17,r3
    43b8:	2448b03a 	or	r4,r4,r17
    43bc:	000e2380 	call	e238 <__floatunsidf>
    43c0:	017f8434 	movhi	r5,65040
    43c4:	01800044 	movi	r6,1
    43c8:	1009883a 	mov	r4,r2
    43cc:	194b883a 	add	r5,r3,r5
    43d0:	843fffc4 	addi	r16,r16,-1
    43d4:	d9801115 	stw	r6,68(sp)
    43d8:	000d883a 	mov	r6,zero
    43dc:	01cffe34 	movhi	r7,16376
    43e0:	000d7e00 	call	d7e0 <__subdf3>
    43e4:	0198dbf4 	movhi	r6,25455
    43e8:	01cff4f4 	movhi	r7,16339
    43ec:	3190d844 	addi	r6,r6,17249
    43f0:	39e1e9c4 	addi	r7,r7,-30809
    43f4:	1009883a 	mov	r4,r2
    43f8:	180b883a 	mov	r5,r3
    43fc:	000d0c80 	call	d0c8 <__muldf3>
    4400:	01a2d874 	movhi	r6,35681
    4404:	01cff1f4 	movhi	r7,16327
    4408:	31b22cc4 	addi	r6,r6,-14157
    440c:	39e28a04 	addi	r7,r7,-30168
    4410:	180b883a 	mov	r5,r3
    4414:	1009883a 	mov	r4,r2
    4418:	000bcdc0 	call	bcdc <__adddf3>
    441c:	8009883a 	mov	r4,r16
    4420:	1029883a 	mov	r20,r2
    4424:	1823883a 	mov	r17,r3
    4428:	000e15c0 	call	e15c <__floatsidf>
    442c:	019427f4 	movhi	r6,20639
    4430:	01cff4f4 	movhi	r7,16339
    4434:	319e7ec4 	addi	r6,r6,31227
    4438:	39d104c4 	addi	r7,r7,17427
    443c:	1009883a 	mov	r4,r2
    4440:	180b883a 	mov	r5,r3
    4444:	000d0c80 	call	d0c8 <__muldf3>
    4448:	100d883a 	mov	r6,r2
    444c:	180f883a 	mov	r7,r3
    4450:	a009883a 	mov	r4,r20
    4454:	880b883a 	mov	r5,r17
    4458:	000bcdc0 	call	bcdc <__adddf3>
    445c:	1009883a 	mov	r4,r2
    4460:	180b883a 	mov	r5,r3
    4464:	1029883a 	mov	r20,r2
    4468:	1823883a 	mov	r17,r3
    446c:	000e0dc0 	call	e0dc <__fixdfsi>
    4470:	000d883a 	mov	r6,zero
    4474:	000f883a 	mov	r7,zero
    4478:	a009883a 	mov	r4,r20
    447c:	880b883a 	mov	r5,r17
    4480:	d8800515 	stw	r2,20(sp)
    4484:	000cfd40 	call	cfd4 <__ledf2>
    4488:	10028716 	blt	r2,zero,4ea8 <_dtoa_r+0xc88>
    448c:	d8c00517 	ldw	r3,20(sp)
    4490:	00800584 	movi	r2,22
    4494:	10c27536 	bltu	r2,r3,4e6c <_dtoa_r+0xc4c>
    4498:	180490fa 	slli	r2,r3,3
    449c:	00c000b4 	movhi	r3,2
    44a0:	18ebc504 	addi	r3,r3,-20716
    44a4:	1885883a 	add	r2,r3,r2
    44a8:	11000017 	ldw	r4,0(r2)
    44ac:	11400117 	ldw	r5,4(r2)
    44b0:	900d883a 	mov	r6,r18
    44b4:	980f883a 	mov	r7,r19
    44b8:	000cef80 	call	cef8 <__gedf2>
    44bc:	00828d0e 	bge	zero,r2,4ef4 <_dtoa_r+0xcd4>
    44c0:	d9000517 	ldw	r4,20(sp)
    44c4:	d8000e15 	stw	zero,56(sp)
    44c8:	213fffc4 	addi	r4,r4,-1
    44cc:	d9000515 	stw	r4,20(sp)
    44d0:	b42dc83a 	sub	r22,r22,r16
    44d4:	b5bfffc4 	addi	r22,r22,-1
    44d8:	b0026f16 	blt	r22,zero,4e98 <_dtoa_r+0xc78>
    44dc:	d8000815 	stw	zero,32(sp)
    44e0:	d9c00517 	ldw	r7,20(sp)
    44e4:	38026416 	blt	r7,zero,4e78 <_dtoa_r+0xc58>
    44e8:	b1ed883a 	add	r22,r22,r7
    44ec:	d9c00d15 	stw	r7,52(sp)
    44f0:	d8000a15 	stw	zero,40(sp)
    44f4:	d9800317 	ldw	r6,12(sp)
    44f8:	00800244 	movi	r2,9
    44fc:	11811436 	bltu	r2,r6,4950 <_dtoa_r+0x730>
    4500:	00800144 	movi	r2,5
    4504:	1184e10e 	bge	r2,r6,588c <_dtoa_r+0x166c>
    4508:	31bfff04 	addi	r6,r6,-4
    450c:	d9800315 	stw	r6,12(sp)
    4510:	0023883a 	mov	r17,zero
    4514:	d9800317 	ldw	r6,12(sp)
    4518:	008000c4 	movi	r2,3
    451c:	30836726 	beq	r6,r2,52bc <_dtoa_r+0x109c>
    4520:	1183410e 	bge	r2,r6,5228 <_dtoa_r+0x1008>
    4524:	d9c00317 	ldw	r7,12(sp)
    4528:	00800104 	movi	r2,4
    452c:	38827c26 	beq	r7,r2,4f20 <_dtoa_r+0xd00>
    4530:	00800144 	movi	r2,5
    4534:	3884c41e 	bne	r7,r2,5848 <_dtoa_r+0x1628>
    4538:	00800044 	movi	r2,1
    453c:	d8800b15 	stw	r2,44(sp)
    4540:	d8c00517 	ldw	r3,20(sp)
    4544:	d9002217 	ldw	r4,136(sp)
    4548:	1907883a 	add	r3,r3,r4
    454c:	19800044 	addi	r6,r3,1
    4550:	d8c00c15 	stw	r3,48(sp)
    4554:	d9800615 	stw	r6,24(sp)
    4558:	0183a40e 	bge	zero,r6,53ec <_dtoa_r+0x11cc>
    455c:	d9800617 	ldw	r6,24(sp)
    4560:	3021883a 	mov	r16,r6
    4564:	e0001115 	stw	zero,68(fp)
    4568:	008005c4 	movi	r2,23
    456c:	1184c92e 	bgeu	r2,r6,5894 <_dtoa_r+0x1674>
    4570:	00c00044 	movi	r3,1
    4574:	00800104 	movi	r2,4
    4578:	1085883a 	add	r2,r2,r2
    457c:	11000504 	addi	r4,r2,20
    4580:	180b883a 	mov	r5,r3
    4584:	18c00044 	addi	r3,r3,1
    4588:	313ffb2e 	bgeu	r6,r4,4578 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004578>
    458c:	e1401115 	stw	r5,68(fp)
    4590:	e009883a 	mov	r4,fp
    4594:	00078bc0 	call	78bc <_Balloc>
    4598:	d8800715 	stw	r2,28(sp)
    459c:	e0801015 	stw	r2,64(fp)
    45a0:	00800384 	movi	r2,14
    45a4:	1400f736 	bltu	r2,r16,4984 <_dtoa_r+0x764>
    45a8:	8800f626 	beq	r17,zero,4984 <_dtoa_r+0x764>
    45ac:	d9c00517 	ldw	r7,20(sp)
    45b0:	01c39a0e 	bge	zero,r7,541c <_dtoa_r+0x11fc>
    45b4:	388003cc 	andi	r2,r7,15
    45b8:	100490fa 	slli	r2,r2,3
    45bc:	382bd13a 	srai	r21,r7,4
    45c0:	00c000b4 	movhi	r3,2
    45c4:	18ebc504 	addi	r3,r3,-20716
    45c8:	1885883a 	add	r2,r3,r2
    45cc:	a8c0040c 	andi	r3,r21,16
    45d0:	12400017 	ldw	r9,0(r2)
    45d4:	12000117 	ldw	r8,4(r2)
    45d8:	18037926 	beq	r3,zero,53c0 <_dtoa_r+0x11a0>
    45dc:	008000b4 	movhi	r2,2
    45e0:	10abbb04 	addi	r2,r2,-20756
    45e4:	11800817 	ldw	r6,32(r2)
    45e8:	11c00917 	ldw	r7,36(r2)
    45ec:	9009883a 	mov	r4,r18
    45f0:	980b883a 	mov	r5,r19
    45f4:	da001715 	stw	r8,92(sp)
    45f8:	da401615 	stw	r9,88(sp)
    45fc:	000c5880 	call	c588 <__divdf3>
    4600:	da001717 	ldw	r8,92(sp)
    4604:	da401617 	ldw	r9,88(sp)
    4608:	ad4003cc 	andi	r21,r21,15
    460c:	040000c4 	movi	r16,3
    4610:	1023883a 	mov	r17,r2
    4614:	1829883a 	mov	r20,r3
    4618:	a8001126 	beq	r21,zero,4660 <_dtoa_r+0x440>
    461c:	05c000b4 	movhi	r23,2
    4620:	bdebbb04 	addi	r23,r23,-20756
    4624:	4805883a 	mov	r2,r9
    4628:	4007883a 	mov	r3,r8
    462c:	a980004c 	andi	r6,r21,1
    4630:	1009883a 	mov	r4,r2
    4634:	a82bd07a 	srai	r21,r21,1
    4638:	180b883a 	mov	r5,r3
    463c:	30000426 	beq	r6,zero,4650 <_dtoa_r+0x430>
    4640:	b9800017 	ldw	r6,0(r23)
    4644:	b9c00117 	ldw	r7,4(r23)
    4648:	84000044 	addi	r16,r16,1
    464c:	000d0c80 	call	d0c8 <__muldf3>
    4650:	bdc00204 	addi	r23,r23,8
    4654:	a83ff51e 	bne	r21,zero,462c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700462c>
    4658:	1013883a 	mov	r9,r2
    465c:	1811883a 	mov	r8,r3
    4660:	480d883a 	mov	r6,r9
    4664:	400f883a 	mov	r7,r8
    4668:	8809883a 	mov	r4,r17
    466c:	a00b883a 	mov	r5,r20
    4670:	000c5880 	call	c588 <__divdf3>
    4674:	d8800f15 	stw	r2,60(sp)
    4678:	d8c01015 	stw	r3,64(sp)
    467c:	d8c00e17 	ldw	r3,56(sp)
    4680:	18000626 	beq	r3,zero,469c <_dtoa_r+0x47c>
    4684:	d9000f17 	ldw	r4,60(sp)
    4688:	d9401017 	ldw	r5,64(sp)
    468c:	000d883a 	mov	r6,zero
    4690:	01cffc34 	movhi	r7,16368
    4694:	000cfd40 	call	cfd4 <__ledf2>
    4698:	10040b16 	blt	r2,zero,56c8 <_dtoa_r+0x14a8>
    469c:	8009883a 	mov	r4,r16
    46a0:	000e15c0 	call	e15c <__floatsidf>
    46a4:	d9800f17 	ldw	r6,60(sp)
    46a8:	d9c01017 	ldw	r7,64(sp)
    46ac:	1009883a 	mov	r4,r2
    46b0:	180b883a 	mov	r5,r3
    46b4:	000d0c80 	call	d0c8 <__muldf3>
    46b8:	000d883a 	mov	r6,zero
    46bc:	01d00734 	movhi	r7,16412
    46c0:	1009883a 	mov	r4,r2
    46c4:	180b883a 	mov	r5,r3
    46c8:	000bcdc0 	call	bcdc <__adddf3>
    46cc:	1021883a 	mov	r16,r2
    46d0:	d8800617 	ldw	r2,24(sp)
    46d4:	047f3034 	movhi	r17,64704
    46d8:	1c63883a 	add	r17,r3,r17
    46dc:	10031826 	beq	r2,zero,5340 <_dtoa_r+0x1120>
    46e0:	d8c00517 	ldw	r3,20(sp)
    46e4:	db000617 	ldw	r12,24(sp)
    46e8:	d8c01315 	stw	r3,76(sp)
    46ec:	d9000b17 	ldw	r4,44(sp)
    46f0:	20038f26 	beq	r4,zero,5530 <_dtoa_r+0x1310>
    46f4:	60bfffc4 	addi	r2,r12,-1
    46f8:	100490fa 	slli	r2,r2,3
    46fc:	00c000b4 	movhi	r3,2
    4700:	18ebc504 	addi	r3,r3,-20716
    4704:	1885883a 	add	r2,r3,r2
    4708:	11800017 	ldw	r6,0(r2)
    470c:	11c00117 	ldw	r7,4(r2)
    4710:	d8800717 	ldw	r2,28(sp)
    4714:	0009883a 	mov	r4,zero
    4718:	014ff834 	movhi	r5,16352
    471c:	db001615 	stw	r12,88(sp)
    4720:	15c00044 	addi	r23,r2,1
    4724:	000c5880 	call	c588 <__divdf3>
    4728:	800d883a 	mov	r6,r16
    472c:	880f883a 	mov	r7,r17
    4730:	1009883a 	mov	r4,r2
    4734:	180b883a 	mov	r5,r3
    4738:	000d7e00 	call	d7e0 <__subdf3>
    473c:	d9401017 	ldw	r5,64(sp)
    4740:	d9000f17 	ldw	r4,60(sp)
    4744:	102b883a 	mov	r21,r2
    4748:	d8c01215 	stw	r3,72(sp)
    474c:	000e0dc0 	call	e0dc <__fixdfsi>
    4750:	1009883a 	mov	r4,r2
    4754:	1029883a 	mov	r20,r2
    4758:	000e15c0 	call	e15c <__floatsidf>
    475c:	d9000f17 	ldw	r4,60(sp)
    4760:	d9401017 	ldw	r5,64(sp)
    4764:	100d883a 	mov	r6,r2
    4768:	180f883a 	mov	r7,r3
    476c:	000d7e00 	call	d7e0 <__subdf3>
    4770:	1823883a 	mov	r17,r3
    4774:	d8c00717 	ldw	r3,28(sp)
    4778:	d9401217 	ldw	r5,72(sp)
    477c:	a2000c04 	addi	r8,r20,48
    4780:	1021883a 	mov	r16,r2
    4784:	1a000005 	stb	r8,0(r3)
    4788:	800d883a 	mov	r6,r16
    478c:	880f883a 	mov	r7,r17
    4790:	a809883a 	mov	r4,r21
    4794:	4029883a 	mov	r20,r8
    4798:	000cef80 	call	cef8 <__gedf2>
    479c:	00841d16 	blt	zero,r2,5814 <_dtoa_r+0x15f4>
    47a0:	800d883a 	mov	r6,r16
    47a4:	880f883a 	mov	r7,r17
    47a8:	0009883a 	mov	r4,zero
    47ac:	014ffc34 	movhi	r5,16368
    47b0:	000d7e00 	call	d7e0 <__subdf3>
    47b4:	d9401217 	ldw	r5,72(sp)
    47b8:	100d883a 	mov	r6,r2
    47bc:	180f883a 	mov	r7,r3
    47c0:	a809883a 	mov	r4,r21
    47c4:	000cef80 	call	cef8 <__gedf2>
    47c8:	db001617 	ldw	r12,88(sp)
    47cc:	00840e16 	blt	zero,r2,5808 <_dtoa_r+0x15e8>
    47d0:	00800044 	movi	r2,1
    47d4:	13006b0e 	bge	r2,r12,4984 <_dtoa_r+0x764>
    47d8:	d9000717 	ldw	r4,28(sp)
    47dc:	dd800f15 	stw	r22,60(sp)
    47e0:	dcc01015 	stw	r19,64(sp)
    47e4:	2319883a 	add	r12,r4,r12
    47e8:	dcc01217 	ldw	r19,72(sp)
    47ec:	602d883a 	mov	r22,r12
    47f0:	dc801215 	stw	r18,72(sp)
    47f4:	b825883a 	mov	r18,r23
    47f8:	00000906 	br	4820 <_dtoa_r+0x600>
    47fc:	000d7e00 	call	d7e0 <__subdf3>
    4800:	a80d883a 	mov	r6,r21
    4804:	980f883a 	mov	r7,r19
    4808:	1009883a 	mov	r4,r2
    480c:	180b883a 	mov	r5,r3
    4810:	000cfd40 	call	cfd4 <__ledf2>
    4814:	1003e816 	blt	r2,zero,57b8 <_dtoa_r+0x1598>
    4818:	b825883a 	mov	r18,r23
    481c:	bd83e926 	beq	r23,r22,57c4 <_dtoa_r+0x15a4>
    4820:	a809883a 	mov	r4,r21
    4824:	980b883a 	mov	r5,r19
    4828:	000d883a 	mov	r6,zero
    482c:	01d00934 	movhi	r7,16420
    4830:	000d0c80 	call	d0c8 <__muldf3>
    4834:	000d883a 	mov	r6,zero
    4838:	01d00934 	movhi	r7,16420
    483c:	8009883a 	mov	r4,r16
    4840:	880b883a 	mov	r5,r17
    4844:	102b883a 	mov	r21,r2
    4848:	1827883a 	mov	r19,r3
    484c:	000d0c80 	call	d0c8 <__muldf3>
    4850:	180b883a 	mov	r5,r3
    4854:	1009883a 	mov	r4,r2
    4858:	1821883a 	mov	r16,r3
    485c:	1023883a 	mov	r17,r2
    4860:	000e0dc0 	call	e0dc <__fixdfsi>
    4864:	1009883a 	mov	r4,r2
    4868:	1029883a 	mov	r20,r2
    486c:	000e15c0 	call	e15c <__floatsidf>
    4870:	8809883a 	mov	r4,r17
    4874:	800b883a 	mov	r5,r16
    4878:	100d883a 	mov	r6,r2
    487c:	180f883a 	mov	r7,r3
    4880:	000d7e00 	call	d7e0 <__subdf3>
    4884:	a5000c04 	addi	r20,r20,48
    4888:	a80d883a 	mov	r6,r21
    488c:	980f883a 	mov	r7,r19
    4890:	1009883a 	mov	r4,r2
    4894:	180b883a 	mov	r5,r3
    4898:	95000005 	stb	r20,0(r18)
    489c:	1021883a 	mov	r16,r2
    48a0:	1823883a 	mov	r17,r3
    48a4:	000cfd40 	call	cfd4 <__ledf2>
    48a8:	bdc00044 	addi	r23,r23,1
    48ac:	800d883a 	mov	r6,r16
    48b0:	880f883a 	mov	r7,r17
    48b4:	0009883a 	mov	r4,zero
    48b8:	014ffc34 	movhi	r5,16368
    48bc:	103fcf0e 	bge	r2,zero,47fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70047fc>
    48c0:	d8c01317 	ldw	r3,76(sp)
    48c4:	d8c00515 	stw	r3,20(sp)
    48c8:	d9400917 	ldw	r5,36(sp)
    48cc:	e009883a 	mov	r4,fp
    48d0:	00079640 	call	7964 <_Bfree>
    48d4:	d9000517 	ldw	r4,20(sp)
    48d8:	d9802317 	ldw	r6,140(sp)
    48dc:	d9c02517 	ldw	r7,148(sp)
    48e0:	b8000005 	stb	zero,0(r23)
    48e4:	20800044 	addi	r2,r4,1
    48e8:	30800015 	stw	r2,0(r6)
    48ec:	3802aa26 	beq	r7,zero,5398 <_dtoa_r+0x1178>
    48f0:	3dc00015 	stw	r23,0(r7)
    48f4:	d8800717 	ldw	r2,28(sp)
    48f8:	003e7906 	br	42e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70042e0>
    48fc:	00800434 	movhi	r2,16
    4900:	10bfffc4 	addi	r2,r2,-1
    4904:	88a2703a 	and	r17,r17,r2
    4908:	883e851e 	bne	r17,zero,4320 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004320>
    490c:	008000b4 	movhi	r2,2
    4910:	10aba704 	addi	r2,r2,-20836
    4914:	003e8406 	br	4328 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004328>
    4918:	10c00204 	addi	r3,r2,8
    491c:	003e8706 	br	433c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700433c>
    4920:	01400434 	movhi	r5,16
    4924:	297fffc4 	addi	r5,r5,-1
    4928:	994a703a 	and	r5,r19,r5
    492c:	9009883a 	mov	r4,r18
    4930:	843f0044 	addi	r16,r16,-1023
    4934:	294ffc34 	orhi	r5,r5,16368
    4938:	dd800217 	ldw	r22,8(sp)
    493c:	d8001115 	stw	zero,68(sp)
    4940:	003ea506 	br	43d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70043d8>
    4944:	008000b4 	movhi	r2,2
    4948:	10ab9e04 	addi	r2,r2,-20872
    494c:	003e6406 	br	42e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70042e0>
    4950:	e0001115 	stw	zero,68(fp)
    4954:	000b883a 	mov	r5,zero
    4958:	e009883a 	mov	r4,fp
    495c:	00078bc0 	call	78bc <_Balloc>
    4960:	01bfffc4 	movi	r6,-1
    4964:	01c00044 	movi	r7,1
    4968:	d8800715 	stw	r2,28(sp)
    496c:	d9800c15 	stw	r6,48(sp)
    4970:	e0801015 	stw	r2,64(fp)
    4974:	d8000315 	stw	zero,12(sp)
    4978:	d9c00b15 	stw	r7,44(sp)
    497c:	d9800615 	stw	r6,24(sp)
    4980:	d8002215 	stw	zero,136(sp)
    4984:	d8800117 	ldw	r2,4(sp)
    4988:	10008916 	blt	r2,zero,4bb0 <_dtoa_r+0x990>
    498c:	d9000517 	ldw	r4,20(sp)
    4990:	00c00384 	movi	r3,14
    4994:	19008616 	blt	r3,r4,4bb0 <_dtoa_r+0x990>
    4998:	200490fa 	slli	r2,r4,3
    499c:	00c000b4 	movhi	r3,2
    49a0:	d9802217 	ldw	r6,136(sp)
    49a4:	18ebc504 	addi	r3,r3,-20716
    49a8:	1885883a 	add	r2,r3,r2
    49ac:	14000017 	ldw	r16,0(r2)
    49b0:	14400117 	ldw	r17,4(r2)
    49b4:	30016316 	blt	r6,zero,4f44 <_dtoa_r+0xd24>
    49b8:	800d883a 	mov	r6,r16
    49bc:	880f883a 	mov	r7,r17
    49c0:	9009883a 	mov	r4,r18
    49c4:	980b883a 	mov	r5,r19
    49c8:	000c5880 	call	c588 <__divdf3>
    49cc:	180b883a 	mov	r5,r3
    49d0:	1009883a 	mov	r4,r2
    49d4:	000e0dc0 	call	e0dc <__fixdfsi>
    49d8:	1009883a 	mov	r4,r2
    49dc:	102b883a 	mov	r21,r2
    49e0:	000e15c0 	call	e15c <__floatsidf>
    49e4:	800d883a 	mov	r6,r16
    49e8:	880f883a 	mov	r7,r17
    49ec:	1009883a 	mov	r4,r2
    49f0:	180b883a 	mov	r5,r3
    49f4:	000d0c80 	call	d0c8 <__muldf3>
    49f8:	100d883a 	mov	r6,r2
    49fc:	180f883a 	mov	r7,r3
    4a00:	9009883a 	mov	r4,r18
    4a04:	980b883a 	mov	r5,r19
    4a08:	000d7e00 	call	d7e0 <__subdf3>
    4a0c:	d9c00717 	ldw	r7,28(sp)
    4a10:	1009883a 	mov	r4,r2
    4a14:	a8800c04 	addi	r2,r21,48
    4a18:	38800005 	stb	r2,0(r7)
    4a1c:	3dc00044 	addi	r23,r7,1
    4a20:	d9c00617 	ldw	r7,24(sp)
    4a24:	01800044 	movi	r6,1
    4a28:	180b883a 	mov	r5,r3
    4a2c:	2005883a 	mov	r2,r4
    4a30:	39803826 	beq	r7,r6,4b14 <_dtoa_r+0x8f4>
    4a34:	000d883a 	mov	r6,zero
    4a38:	01d00934 	movhi	r7,16420
    4a3c:	000d0c80 	call	d0c8 <__muldf3>
    4a40:	000d883a 	mov	r6,zero
    4a44:	000f883a 	mov	r7,zero
    4a48:	1009883a 	mov	r4,r2
    4a4c:	180b883a 	mov	r5,r3
    4a50:	1025883a 	mov	r18,r2
    4a54:	1827883a 	mov	r19,r3
    4a58:	000ce700 	call	ce70 <__eqdf2>
    4a5c:	103f9a26 	beq	r2,zero,48c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70048c8>
    4a60:	d9c00617 	ldw	r7,24(sp)
    4a64:	d8c00717 	ldw	r3,28(sp)
    4a68:	b829883a 	mov	r20,r23
    4a6c:	38bfffc4 	addi	r2,r7,-1
    4a70:	18ad883a 	add	r22,r3,r2
    4a74:	00000a06 	br	4aa0 <_dtoa_r+0x880>
    4a78:	000d0c80 	call	d0c8 <__muldf3>
    4a7c:	000d883a 	mov	r6,zero
    4a80:	000f883a 	mov	r7,zero
    4a84:	1009883a 	mov	r4,r2
    4a88:	180b883a 	mov	r5,r3
    4a8c:	1025883a 	mov	r18,r2
    4a90:	1827883a 	mov	r19,r3
    4a94:	b829883a 	mov	r20,r23
    4a98:	000ce700 	call	ce70 <__eqdf2>
    4a9c:	103f8a26 	beq	r2,zero,48c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70048c8>
    4aa0:	800d883a 	mov	r6,r16
    4aa4:	880f883a 	mov	r7,r17
    4aa8:	9009883a 	mov	r4,r18
    4aac:	980b883a 	mov	r5,r19
    4ab0:	000c5880 	call	c588 <__divdf3>
    4ab4:	180b883a 	mov	r5,r3
    4ab8:	1009883a 	mov	r4,r2
    4abc:	000e0dc0 	call	e0dc <__fixdfsi>
    4ac0:	1009883a 	mov	r4,r2
    4ac4:	102b883a 	mov	r21,r2
    4ac8:	000e15c0 	call	e15c <__floatsidf>
    4acc:	800d883a 	mov	r6,r16
    4ad0:	880f883a 	mov	r7,r17
    4ad4:	1009883a 	mov	r4,r2
    4ad8:	180b883a 	mov	r5,r3
    4adc:	000d0c80 	call	d0c8 <__muldf3>
    4ae0:	100d883a 	mov	r6,r2
    4ae4:	180f883a 	mov	r7,r3
    4ae8:	9009883a 	mov	r4,r18
    4aec:	980b883a 	mov	r5,r19
    4af0:	000d7e00 	call	d7e0 <__subdf3>
    4af4:	aa000c04 	addi	r8,r21,48
    4af8:	a2000005 	stb	r8,0(r20)
    4afc:	000d883a 	mov	r6,zero
    4b00:	01d00934 	movhi	r7,16420
    4b04:	1009883a 	mov	r4,r2
    4b08:	180b883a 	mov	r5,r3
    4b0c:	a5c00044 	addi	r23,r20,1
    4b10:	b53fd91e 	bne	r22,r20,4a78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004a78>
    4b14:	100d883a 	mov	r6,r2
    4b18:	180f883a 	mov	r7,r3
    4b1c:	1009883a 	mov	r4,r2
    4b20:	180b883a 	mov	r5,r3
    4b24:	000bcdc0 	call	bcdc <__adddf3>
    4b28:	100d883a 	mov	r6,r2
    4b2c:	180f883a 	mov	r7,r3
    4b30:	8009883a 	mov	r4,r16
    4b34:	880b883a 	mov	r5,r17
    4b38:	1027883a 	mov	r19,r2
    4b3c:	1825883a 	mov	r18,r3
    4b40:	000cfd40 	call	cfd4 <__ledf2>
    4b44:	10000816 	blt	r2,zero,4b68 <_dtoa_r+0x948>
    4b48:	980d883a 	mov	r6,r19
    4b4c:	900f883a 	mov	r7,r18
    4b50:	8009883a 	mov	r4,r16
    4b54:	880b883a 	mov	r5,r17
    4b58:	000ce700 	call	ce70 <__eqdf2>
    4b5c:	103f5a1e 	bne	r2,zero,48c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70048c8>
    4b60:	ad40004c 	andi	r21,r21,1
    4b64:	a83f5826 	beq	r21,zero,48c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70048c8>
    4b68:	bd3fffc3 	ldbu	r20,-1(r23)
    4b6c:	b8bfffc4 	addi	r2,r23,-1
    4b70:	1007883a 	mov	r3,r2
    4b74:	01400e44 	movi	r5,57
    4b78:	d9800717 	ldw	r6,28(sp)
    4b7c:	00000506 	br	4b94 <_dtoa_r+0x974>
    4b80:	18ffffc4 	addi	r3,r3,-1
    4b84:	11824726 	beq	r2,r6,54a4 <_dtoa_r+0x1284>
    4b88:	1d000003 	ldbu	r20,0(r3)
    4b8c:	102f883a 	mov	r23,r2
    4b90:	10bfffc4 	addi	r2,r2,-1
    4b94:	a1003fcc 	andi	r4,r20,255
    4b98:	2100201c 	xori	r4,r4,128
    4b9c:	213fe004 	addi	r4,r4,-128
    4ba0:	217ff726 	beq	r4,r5,4b80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004b80>
    4ba4:	a2000044 	addi	r8,r20,1
    4ba8:	12000005 	stb	r8,0(r2)
    4bac:	003f4606 	br	48c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70048c8>
    4bb0:	d9000b17 	ldw	r4,44(sp)
    4bb4:	2000c826 	beq	r4,zero,4ed8 <_dtoa_r+0xcb8>
    4bb8:	d9800317 	ldw	r6,12(sp)
    4bbc:	00c00044 	movi	r3,1
    4bc0:	1980f90e 	bge	r3,r6,4fa8 <_dtoa_r+0xd88>
    4bc4:	d8800617 	ldw	r2,24(sp)
    4bc8:	d8c00a17 	ldw	r3,40(sp)
    4bcc:	157fffc4 	addi	r21,r2,-1
    4bd0:	1d41f316 	blt	r3,r21,53a0 <_dtoa_r+0x1180>
    4bd4:	1d6bc83a 	sub	r21,r3,r21
    4bd8:	d9c00617 	ldw	r7,24(sp)
    4bdc:	3802aa16 	blt	r7,zero,5688 <_dtoa_r+0x1468>
    4be0:	dd000817 	ldw	r20,32(sp)
    4be4:	d8800617 	ldw	r2,24(sp)
    4be8:	d8c00817 	ldw	r3,32(sp)
    4bec:	01400044 	movi	r5,1
    4bf0:	e009883a 	mov	r4,fp
    4bf4:	1887883a 	add	r3,r3,r2
    4bf8:	d8c00815 	stw	r3,32(sp)
    4bfc:	b0ad883a 	add	r22,r22,r2
    4c00:	0007cc80 	call	7cc8 <__i2b>
    4c04:	1023883a 	mov	r17,r2
    4c08:	a0000826 	beq	r20,zero,4c2c <_dtoa_r+0xa0c>
    4c0c:	0580070e 	bge	zero,r22,4c2c <_dtoa_r+0xa0c>
    4c10:	a005883a 	mov	r2,r20
    4c14:	b500b916 	blt	r22,r20,4efc <_dtoa_r+0xcdc>
    4c18:	d9000817 	ldw	r4,32(sp)
    4c1c:	a0a9c83a 	sub	r20,r20,r2
    4c20:	b0adc83a 	sub	r22,r22,r2
    4c24:	2089c83a 	sub	r4,r4,r2
    4c28:	d9000815 	stw	r4,32(sp)
    4c2c:	d9800a17 	ldw	r6,40(sp)
    4c30:	0181810e 	bge	zero,r6,5238 <_dtoa_r+0x1018>
    4c34:	d9c00b17 	ldw	r7,44(sp)
    4c38:	3800b326 	beq	r7,zero,4f08 <_dtoa_r+0xce8>
    4c3c:	a800b226 	beq	r21,zero,4f08 <_dtoa_r+0xce8>
    4c40:	880b883a 	mov	r5,r17
    4c44:	a80d883a 	mov	r6,r21
    4c48:	e009883a 	mov	r4,fp
    4c4c:	0007efc0 	call	7efc <__pow5mult>
    4c50:	d9800917 	ldw	r6,36(sp)
    4c54:	100b883a 	mov	r5,r2
    4c58:	e009883a 	mov	r4,fp
    4c5c:	1023883a 	mov	r17,r2
    4c60:	0007d040 	call	7d04 <__multiply>
    4c64:	1021883a 	mov	r16,r2
    4c68:	d8800a17 	ldw	r2,40(sp)
    4c6c:	d9400917 	ldw	r5,36(sp)
    4c70:	e009883a 	mov	r4,fp
    4c74:	1545c83a 	sub	r2,r2,r21
    4c78:	d8800a15 	stw	r2,40(sp)
    4c7c:	00079640 	call	7964 <_Bfree>
    4c80:	d8c00a17 	ldw	r3,40(sp)
    4c84:	18009f1e 	bne	r3,zero,4f04 <_dtoa_r+0xce4>
    4c88:	05c00044 	movi	r23,1
    4c8c:	e009883a 	mov	r4,fp
    4c90:	b80b883a 	mov	r5,r23
    4c94:	0007cc80 	call	7cc8 <__i2b>
    4c98:	d9000d17 	ldw	r4,52(sp)
    4c9c:	102b883a 	mov	r21,r2
    4ca0:	2000ce26 	beq	r4,zero,4fdc <_dtoa_r+0xdbc>
    4ca4:	200d883a 	mov	r6,r4
    4ca8:	100b883a 	mov	r5,r2
    4cac:	e009883a 	mov	r4,fp
    4cb0:	0007efc0 	call	7efc <__pow5mult>
    4cb4:	d9800317 	ldw	r6,12(sp)
    4cb8:	102b883a 	mov	r21,r2
    4cbc:	b981810e 	bge	r23,r6,52c4 <_dtoa_r+0x10a4>
    4cc0:	0027883a 	mov	r19,zero
    4cc4:	a8800417 	ldw	r2,16(r21)
    4cc8:	05c00804 	movi	r23,32
    4ccc:	10800104 	addi	r2,r2,4
    4cd0:	1085883a 	add	r2,r2,r2
    4cd4:	1085883a 	add	r2,r2,r2
    4cd8:	a885883a 	add	r2,r21,r2
    4cdc:	11000017 	ldw	r4,0(r2)
    4ce0:	0007bb00 	call	7bb0 <__hi0bits>
    4ce4:	b885c83a 	sub	r2,r23,r2
    4ce8:	1585883a 	add	r2,r2,r22
    4cec:	108007cc 	andi	r2,r2,31
    4cf0:	1000b326 	beq	r2,zero,4fc0 <_dtoa_r+0xda0>
    4cf4:	00c00804 	movi	r3,32
    4cf8:	1887c83a 	sub	r3,r3,r2
    4cfc:	01000104 	movi	r4,4
    4d00:	20c2cd0e 	bge	r4,r3,5838 <_dtoa_r+0x1618>
    4d04:	00c00704 	movi	r3,28
    4d08:	1885c83a 	sub	r2,r3,r2
    4d0c:	d8c00817 	ldw	r3,32(sp)
    4d10:	a0a9883a 	add	r20,r20,r2
    4d14:	b0ad883a 	add	r22,r22,r2
    4d18:	1887883a 	add	r3,r3,r2
    4d1c:	d8c00815 	stw	r3,32(sp)
    4d20:	d9800817 	ldw	r6,32(sp)
    4d24:	0180040e 	bge	zero,r6,4d38 <_dtoa_r+0xb18>
    4d28:	800b883a 	mov	r5,r16
    4d2c:	e009883a 	mov	r4,fp
    4d30:	000803c0 	call	803c <__lshift>
    4d34:	1021883a 	mov	r16,r2
    4d38:	0580050e 	bge	zero,r22,4d50 <_dtoa_r+0xb30>
    4d3c:	a80b883a 	mov	r5,r21
    4d40:	b00d883a 	mov	r6,r22
    4d44:	e009883a 	mov	r4,fp
    4d48:	000803c0 	call	803c <__lshift>
    4d4c:	102b883a 	mov	r21,r2
    4d50:	d9c00e17 	ldw	r7,56(sp)
    4d54:	3801211e 	bne	r7,zero,51dc <_dtoa_r+0xfbc>
    4d58:	d9800617 	ldw	r6,24(sp)
    4d5c:	0181380e 	bge	zero,r6,5240 <_dtoa_r+0x1020>
    4d60:	d8c00b17 	ldw	r3,44(sp)
    4d64:	1800ab1e 	bne	r3,zero,5014 <_dtoa_r+0xdf4>
    4d68:	dc800717 	ldw	r18,28(sp)
    4d6c:	dcc00617 	ldw	r19,24(sp)
    4d70:	9029883a 	mov	r20,r18
    4d74:	00000206 	br	4d80 <_dtoa_r+0xb60>
    4d78:	000798c0 	call	798c <__multadd>
    4d7c:	1021883a 	mov	r16,r2
    4d80:	a80b883a 	mov	r5,r21
    4d84:	8009883a 	mov	r4,r16
    4d88:	00040200 	call	4020 <quorem>
    4d8c:	10800c04 	addi	r2,r2,48
    4d90:	90800005 	stb	r2,0(r18)
    4d94:	94800044 	addi	r18,r18,1
    4d98:	9507c83a 	sub	r3,r18,r20
    4d9c:	000f883a 	mov	r7,zero
    4da0:	01800284 	movi	r6,10
    4da4:	800b883a 	mov	r5,r16
    4da8:	e009883a 	mov	r4,fp
    4dac:	1cfff216 	blt	r3,r19,4d78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004d78>
    4db0:	1011883a 	mov	r8,r2
    4db4:	d8800617 	ldw	r2,24(sp)
    4db8:	0082370e 	bge	zero,r2,5698 <_dtoa_r+0x1478>
    4dbc:	d9000717 	ldw	r4,28(sp)
    4dc0:	0025883a 	mov	r18,zero
    4dc4:	20af883a 	add	r23,r4,r2
    4dc8:	01800044 	movi	r6,1
    4dcc:	800b883a 	mov	r5,r16
    4dd0:	e009883a 	mov	r4,fp
    4dd4:	da001715 	stw	r8,92(sp)
    4dd8:	000803c0 	call	803c <__lshift>
    4ddc:	a80b883a 	mov	r5,r21
    4de0:	1009883a 	mov	r4,r2
    4de4:	d8800915 	stw	r2,36(sp)
    4de8:	00081840 	call	8184 <__mcmp>
    4dec:	da001717 	ldw	r8,92(sp)
    4df0:	0081800e 	bge	zero,r2,53f4 <_dtoa_r+0x11d4>
    4df4:	b93fffc3 	ldbu	r4,-1(r23)
    4df8:	b8bfffc4 	addi	r2,r23,-1
    4dfc:	1007883a 	mov	r3,r2
    4e00:	01800e44 	movi	r6,57
    4e04:	d9c00717 	ldw	r7,28(sp)
    4e08:	00000506 	br	4e20 <_dtoa_r+0xc00>
    4e0c:	18ffffc4 	addi	r3,r3,-1
    4e10:	11c12326 	beq	r2,r7,52a0 <_dtoa_r+0x1080>
    4e14:	19000003 	ldbu	r4,0(r3)
    4e18:	102f883a 	mov	r23,r2
    4e1c:	10bfffc4 	addi	r2,r2,-1
    4e20:	21403fcc 	andi	r5,r4,255
    4e24:	2940201c 	xori	r5,r5,128
    4e28:	297fe004 	addi	r5,r5,-128
    4e2c:	29bff726 	beq	r5,r6,4e0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004e0c>
    4e30:	21000044 	addi	r4,r4,1
    4e34:	11000005 	stb	r4,0(r2)
    4e38:	a80b883a 	mov	r5,r21
    4e3c:	e009883a 	mov	r4,fp
    4e40:	00079640 	call	7964 <_Bfree>
    4e44:	883ea026 	beq	r17,zero,48c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70048c8>
    4e48:	90000426 	beq	r18,zero,4e5c <_dtoa_r+0xc3c>
    4e4c:	94400326 	beq	r18,r17,4e5c <_dtoa_r+0xc3c>
    4e50:	900b883a 	mov	r5,r18
    4e54:	e009883a 	mov	r4,fp
    4e58:	00079640 	call	7964 <_Bfree>
    4e5c:	880b883a 	mov	r5,r17
    4e60:	e009883a 	mov	r4,fp
    4e64:	00079640 	call	7964 <_Bfree>
    4e68:	003e9706 	br	48c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70048c8>
    4e6c:	01800044 	movi	r6,1
    4e70:	d9800e15 	stw	r6,56(sp)
    4e74:	003d9606 	br	44d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70044d0>
    4e78:	d8800817 	ldw	r2,32(sp)
    4e7c:	d8c00517 	ldw	r3,20(sp)
    4e80:	d8000d15 	stw	zero,52(sp)
    4e84:	10c5c83a 	sub	r2,r2,r3
    4e88:	00c9c83a 	sub	r4,zero,r3
    4e8c:	d8800815 	stw	r2,32(sp)
    4e90:	d9000a15 	stw	r4,40(sp)
    4e94:	003d9706 	br	44f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70044f4>
    4e98:	05adc83a 	sub	r22,zero,r22
    4e9c:	dd800815 	stw	r22,32(sp)
    4ea0:	002d883a 	mov	r22,zero
    4ea4:	003d8e06 	br	44e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70044e0>
    4ea8:	d9000517 	ldw	r4,20(sp)
    4eac:	000e15c0 	call	e15c <__floatsidf>
    4eb0:	100d883a 	mov	r6,r2
    4eb4:	180f883a 	mov	r7,r3
    4eb8:	a009883a 	mov	r4,r20
    4ebc:	880b883a 	mov	r5,r17
    4ec0:	000ce700 	call	ce70 <__eqdf2>
    4ec4:	103d7126 	beq	r2,zero,448c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700448c>
    4ec8:	d9c00517 	ldw	r7,20(sp)
    4ecc:	39ffffc4 	addi	r7,r7,-1
    4ed0:	d9c00515 	stw	r7,20(sp)
    4ed4:	003d6d06 	br	448c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700448c>
    4ed8:	dd400a17 	ldw	r21,40(sp)
    4edc:	dd000817 	ldw	r20,32(sp)
    4ee0:	0023883a 	mov	r17,zero
    4ee4:	003f4806 	br	4c08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004c08>
    4ee8:	10e3c83a 	sub	r17,r2,r3
    4eec:	9448983a 	sll	r4,r18,r17
    4ef0:	003d3206 	br	43bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70043bc>
    4ef4:	d8000e15 	stw	zero,56(sp)
    4ef8:	003d7506 	br	44d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70044d0>
    4efc:	b005883a 	mov	r2,r22
    4f00:	003f4506 	br	4c18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004c18>
    4f04:	dc000915 	stw	r16,36(sp)
    4f08:	d9800a17 	ldw	r6,40(sp)
    4f0c:	d9400917 	ldw	r5,36(sp)
    4f10:	e009883a 	mov	r4,fp
    4f14:	0007efc0 	call	7efc <__pow5mult>
    4f18:	1021883a 	mov	r16,r2
    4f1c:	003f5a06 	br	4c88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004c88>
    4f20:	01c00044 	movi	r7,1
    4f24:	d9c00b15 	stw	r7,44(sp)
    4f28:	d8802217 	ldw	r2,136(sp)
    4f2c:	0081280e 	bge	zero,r2,53d0 <_dtoa_r+0x11b0>
    4f30:	100d883a 	mov	r6,r2
    4f34:	1021883a 	mov	r16,r2
    4f38:	d8800c15 	stw	r2,48(sp)
    4f3c:	d8800615 	stw	r2,24(sp)
    4f40:	003d8806 	br	4564 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004564>
    4f44:	d8800617 	ldw	r2,24(sp)
    4f48:	00be9b16 	blt	zero,r2,49b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70049b8>
    4f4c:	10010f1e 	bne	r2,zero,538c <_dtoa_r+0x116c>
    4f50:	880b883a 	mov	r5,r17
    4f54:	000d883a 	mov	r6,zero
    4f58:	01d00534 	movhi	r7,16404
    4f5c:	8009883a 	mov	r4,r16
    4f60:	000d0c80 	call	d0c8 <__muldf3>
    4f64:	900d883a 	mov	r6,r18
    4f68:	980f883a 	mov	r7,r19
    4f6c:	1009883a 	mov	r4,r2
    4f70:	180b883a 	mov	r5,r3
    4f74:	000cef80 	call	cef8 <__gedf2>
    4f78:	002b883a 	mov	r21,zero
    4f7c:	0023883a 	mov	r17,zero
    4f80:	1000bf16 	blt	r2,zero,5280 <_dtoa_r+0x1060>
    4f84:	d9802217 	ldw	r6,136(sp)
    4f88:	ddc00717 	ldw	r23,28(sp)
    4f8c:	018c303a 	nor	r6,zero,r6
    4f90:	d9800515 	stw	r6,20(sp)
    4f94:	a80b883a 	mov	r5,r21
    4f98:	e009883a 	mov	r4,fp
    4f9c:	00079640 	call	7964 <_Bfree>
    4fa0:	883e4926 	beq	r17,zero,48c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70048c8>
    4fa4:	003fad06 	br	4e5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004e5c>
    4fa8:	d9c01117 	ldw	r7,68(sp)
    4fac:	3801bc26 	beq	r7,zero,56a0 <_dtoa_r+0x1480>
    4fb0:	10810cc4 	addi	r2,r2,1075
    4fb4:	dd400a17 	ldw	r21,40(sp)
    4fb8:	dd000817 	ldw	r20,32(sp)
    4fbc:	003f0a06 	br	4be8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004be8>
    4fc0:	00800704 	movi	r2,28
    4fc4:	d9000817 	ldw	r4,32(sp)
    4fc8:	a0a9883a 	add	r20,r20,r2
    4fcc:	b0ad883a 	add	r22,r22,r2
    4fd0:	2089883a 	add	r4,r4,r2
    4fd4:	d9000815 	stw	r4,32(sp)
    4fd8:	003f5106 	br	4d20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004d20>
    4fdc:	d8c00317 	ldw	r3,12(sp)
    4fe0:	b8c1fc0e 	bge	r23,r3,57d4 <_dtoa_r+0x15b4>
    4fe4:	0027883a 	mov	r19,zero
    4fe8:	b805883a 	mov	r2,r23
    4fec:	003f3e06 	br	4ce8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004ce8>
    4ff0:	880b883a 	mov	r5,r17
    4ff4:	e009883a 	mov	r4,fp
    4ff8:	000f883a 	mov	r7,zero
    4ffc:	01800284 	movi	r6,10
    5000:	000798c0 	call	798c <__multadd>
    5004:	d9000c17 	ldw	r4,48(sp)
    5008:	1023883a 	mov	r17,r2
    500c:	0102040e 	bge	zero,r4,5820 <_dtoa_r+0x1600>
    5010:	d9000615 	stw	r4,24(sp)
    5014:	0500050e 	bge	zero,r20,502c <_dtoa_r+0xe0c>
    5018:	880b883a 	mov	r5,r17
    501c:	a00d883a 	mov	r6,r20
    5020:	e009883a 	mov	r4,fp
    5024:	000803c0 	call	803c <__lshift>
    5028:	1023883a 	mov	r17,r2
    502c:	9801241e 	bne	r19,zero,54c0 <_dtoa_r+0x12a0>
    5030:	8829883a 	mov	r20,r17
    5034:	d9000617 	ldw	r4,24(sp)
    5038:	dcc00717 	ldw	r19,28(sp)
    503c:	9480004c 	andi	r18,r18,1
    5040:	20bfffc4 	addi	r2,r4,-1
    5044:	9885883a 	add	r2,r19,r2
    5048:	d8800415 	stw	r2,16(sp)
    504c:	dc800615 	stw	r18,24(sp)
    5050:	a80b883a 	mov	r5,r21
    5054:	8009883a 	mov	r4,r16
    5058:	00040200 	call	4020 <quorem>
    505c:	880b883a 	mov	r5,r17
    5060:	8009883a 	mov	r4,r16
    5064:	102f883a 	mov	r23,r2
    5068:	00081840 	call	8184 <__mcmp>
    506c:	a80b883a 	mov	r5,r21
    5070:	a00d883a 	mov	r6,r20
    5074:	e009883a 	mov	r4,fp
    5078:	102d883a 	mov	r22,r2
    507c:	00081e40 	call	81e4 <__mdiff>
    5080:	1007883a 	mov	r3,r2
    5084:	10800317 	ldw	r2,12(r2)
    5088:	bc800c04 	addi	r18,r23,48
    508c:	180b883a 	mov	r5,r3
    5090:	10004e1e 	bne	r2,zero,51cc <_dtoa_r+0xfac>
    5094:	8009883a 	mov	r4,r16
    5098:	d8c01615 	stw	r3,88(sp)
    509c:	00081840 	call	8184 <__mcmp>
    50a0:	d8c01617 	ldw	r3,88(sp)
    50a4:	e009883a 	mov	r4,fp
    50a8:	d8801615 	stw	r2,88(sp)
    50ac:	180b883a 	mov	r5,r3
    50b0:	00079640 	call	7964 <_Bfree>
    50b4:	d8801617 	ldw	r2,88(sp)
    50b8:	1000041e 	bne	r2,zero,50cc <_dtoa_r+0xeac>
    50bc:	d9800317 	ldw	r6,12(sp)
    50c0:	3000021e 	bne	r6,zero,50cc <_dtoa_r+0xeac>
    50c4:	d8c00617 	ldw	r3,24(sp)
    50c8:	18003726 	beq	r3,zero,51a8 <_dtoa_r+0xf88>
    50cc:	b0002016 	blt	r22,zero,5150 <_dtoa_r+0xf30>
    50d0:	b000041e 	bne	r22,zero,50e4 <_dtoa_r+0xec4>
    50d4:	d9000317 	ldw	r4,12(sp)
    50d8:	2000021e 	bne	r4,zero,50e4 <_dtoa_r+0xec4>
    50dc:	d8c00617 	ldw	r3,24(sp)
    50e0:	18001b26 	beq	r3,zero,5150 <_dtoa_r+0xf30>
    50e4:	00810716 	blt	zero,r2,5504 <_dtoa_r+0x12e4>
    50e8:	d8c00417 	ldw	r3,16(sp)
    50ec:	9d800044 	addi	r22,r19,1
    50f0:	9c800005 	stb	r18,0(r19)
    50f4:	b02f883a 	mov	r23,r22
    50f8:	98c10626 	beq	r19,r3,5514 <_dtoa_r+0x12f4>
    50fc:	800b883a 	mov	r5,r16
    5100:	000f883a 	mov	r7,zero
    5104:	01800284 	movi	r6,10
    5108:	e009883a 	mov	r4,fp
    510c:	000798c0 	call	798c <__multadd>
    5110:	1021883a 	mov	r16,r2
    5114:	000f883a 	mov	r7,zero
    5118:	01800284 	movi	r6,10
    511c:	880b883a 	mov	r5,r17
    5120:	e009883a 	mov	r4,fp
    5124:	8d002526 	beq	r17,r20,51bc <_dtoa_r+0xf9c>
    5128:	000798c0 	call	798c <__multadd>
    512c:	a00b883a 	mov	r5,r20
    5130:	000f883a 	mov	r7,zero
    5134:	01800284 	movi	r6,10
    5138:	e009883a 	mov	r4,fp
    513c:	1023883a 	mov	r17,r2
    5140:	000798c0 	call	798c <__multadd>
    5144:	1029883a 	mov	r20,r2
    5148:	b027883a 	mov	r19,r22
    514c:	003fc006 	br	5050 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005050>
    5150:	9011883a 	mov	r8,r18
    5154:	00800e0e 	bge	zero,r2,5190 <_dtoa_r+0xf70>
    5158:	800b883a 	mov	r5,r16
    515c:	01800044 	movi	r6,1
    5160:	e009883a 	mov	r4,fp
    5164:	da001715 	stw	r8,92(sp)
    5168:	000803c0 	call	803c <__lshift>
    516c:	a80b883a 	mov	r5,r21
    5170:	1009883a 	mov	r4,r2
    5174:	1021883a 	mov	r16,r2
    5178:	00081840 	call	8184 <__mcmp>
    517c:	da001717 	ldw	r8,92(sp)
    5180:	0081960e 	bge	zero,r2,57dc <_dtoa_r+0x15bc>
    5184:	00800e44 	movi	r2,57
    5188:	40817026 	beq	r8,r2,574c <_dtoa_r+0x152c>
    518c:	ba000c44 	addi	r8,r23,49
    5190:	8825883a 	mov	r18,r17
    5194:	9dc00044 	addi	r23,r19,1
    5198:	9a000005 	stb	r8,0(r19)
    519c:	a023883a 	mov	r17,r20
    51a0:	dc000915 	stw	r16,36(sp)
    51a4:	003f2406 	br	4e38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004e38>
    51a8:	00800e44 	movi	r2,57
    51ac:	9011883a 	mov	r8,r18
    51b0:	90816626 	beq	r18,r2,574c <_dtoa_r+0x152c>
    51b4:	05bff516 	blt	zero,r22,518c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700518c>
    51b8:	003ff506 	br	5190 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005190>
    51bc:	000798c0 	call	798c <__multadd>
    51c0:	1023883a 	mov	r17,r2
    51c4:	1029883a 	mov	r20,r2
    51c8:	003fdf06 	br	5148 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005148>
    51cc:	e009883a 	mov	r4,fp
    51d0:	00079640 	call	7964 <_Bfree>
    51d4:	00800044 	movi	r2,1
    51d8:	003fbc06 	br	50cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70050cc>
    51dc:	a80b883a 	mov	r5,r21
    51e0:	8009883a 	mov	r4,r16
    51e4:	00081840 	call	8184 <__mcmp>
    51e8:	103edb0e 	bge	r2,zero,4d58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004d58>
    51ec:	800b883a 	mov	r5,r16
    51f0:	000f883a 	mov	r7,zero
    51f4:	01800284 	movi	r6,10
    51f8:	e009883a 	mov	r4,fp
    51fc:	000798c0 	call	798c <__multadd>
    5200:	1021883a 	mov	r16,r2
    5204:	d8800517 	ldw	r2,20(sp)
    5208:	d8c00b17 	ldw	r3,44(sp)
    520c:	10bfffc4 	addi	r2,r2,-1
    5210:	d8800515 	stw	r2,20(sp)
    5214:	183f761e 	bne	r3,zero,4ff0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004ff0>
    5218:	d9000c17 	ldw	r4,48(sp)
    521c:	0101730e 	bge	zero,r4,57ec <_dtoa_r+0x15cc>
    5220:	d9000615 	stw	r4,24(sp)
    5224:	003ed006 	br	4d68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004d68>
    5228:	00800084 	movi	r2,2
    522c:	3081861e 	bne	r6,r2,5848 <_dtoa_r+0x1628>
    5230:	d8000b15 	stw	zero,44(sp)
    5234:	003f3c06 	br	4f28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004f28>
    5238:	dc000917 	ldw	r16,36(sp)
    523c:	003e9206 	br	4c88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004c88>
    5240:	d9c00317 	ldw	r7,12(sp)
    5244:	00800084 	movi	r2,2
    5248:	11fec50e 	bge	r2,r7,4d60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004d60>
    524c:	d9000617 	ldw	r4,24(sp)
    5250:	20013c1e 	bne	r4,zero,5744 <_dtoa_r+0x1524>
    5254:	a80b883a 	mov	r5,r21
    5258:	000f883a 	mov	r7,zero
    525c:	01800144 	movi	r6,5
    5260:	e009883a 	mov	r4,fp
    5264:	000798c0 	call	798c <__multadd>
    5268:	100b883a 	mov	r5,r2
    526c:	8009883a 	mov	r4,r16
    5270:	102b883a 	mov	r21,r2
    5274:	00081840 	call	8184 <__mcmp>
    5278:	dc000915 	stw	r16,36(sp)
    527c:	00bf410e 	bge	zero,r2,4f84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004f84>
    5280:	d9c00717 	ldw	r7,28(sp)
    5284:	00800c44 	movi	r2,49
    5288:	38800005 	stb	r2,0(r7)
    528c:	d8800517 	ldw	r2,20(sp)
    5290:	3dc00044 	addi	r23,r7,1
    5294:	10800044 	addi	r2,r2,1
    5298:	d8800515 	stw	r2,20(sp)
    529c:	003f3d06 	br	4f94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004f94>
    52a0:	d9800517 	ldw	r6,20(sp)
    52a4:	d9c00717 	ldw	r7,28(sp)
    52a8:	00800c44 	movi	r2,49
    52ac:	31800044 	addi	r6,r6,1
    52b0:	d9800515 	stw	r6,20(sp)
    52b4:	38800005 	stb	r2,0(r7)
    52b8:	003edf06 	br	4e38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004e38>
    52bc:	d8000b15 	stw	zero,44(sp)
    52c0:	003c9f06 	br	4540 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004540>
    52c4:	903e7e1e 	bne	r18,zero,4cc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004cc0>
    52c8:	00800434 	movhi	r2,16
    52cc:	10bfffc4 	addi	r2,r2,-1
    52d0:	9884703a 	and	r2,r19,r2
    52d4:	1000ea1e 	bne	r2,zero,5680 <_dtoa_r+0x1460>
    52d8:	9cdffc2c 	andhi	r19,r19,32752
    52dc:	9800e826 	beq	r19,zero,5680 <_dtoa_r+0x1460>
    52e0:	d9c00817 	ldw	r7,32(sp)
    52e4:	b5800044 	addi	r22,r22,1
    52e8:	04c00044 	movi	r19,1
    52ec:	39c00044 	addi	r7,r7,1
    52f0:	d9c00815 	stw	r7,32(sp)
    52f4:	d8800d17 	ldw	r2,52(sp)
    52f8:	103e721e 	bne	r2,zero,4cc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004cc4>
    52fc:	00800044 	movi	r2,1
    5300:	003e7906 	br	4ce8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004ce8>
    5304:	8009883a 	mov	r4,r16
    5308:	000e15c0 	call	e15c <__floatsidf>
    530c:	d9800f17 	ldw	r6,60(sp)
    5310:	d9c01017 	ldw	r7,64(sp)
    5314:	1009883a 	mov	r4,r2
    5318:	180b883a 	mov	r5,r3
    531c:	000d0c80 	call	d0c8 <__muldf3>
    5320:	000d883a 	mov	r6,zero
    5324:	01d00734 	movhi	r7,16412
    5328:	1009883a 	mov	r4,r2
    532c:	180b883a 	mov	r5,r3
    5330:	000bcdc0 	call	bcdc <__adddf3>
    5334:	047f3034 	movhi	r17,64704
    5338:	1021883a 	mov	r16,r2
    533c:	1c63883a 	add	r17,r3,r17
    5340:	d9000f17 	ldw	r4,60(sp)
    5344:	d9401017 	ldw	r5,64(sp)
    5348:	000d883a 	mov	r6,zero
    534c:	01d00534 	movhi	r7,16404
    5350:	000d7e00 	call	d7e0 <__subdf3>
    5354:	800d883a 	mov	r6,r16
    5358:	880f883a 	mov	r7,r17
    535c:	1009883a 	mov	r4,r2
    5360:	180b883a 	mov	r5,r3
    5364:	102b883a 	mov	r21,r2
    5368:	1829883a 	mov	r20,r3
    536c:	000cef80 	call	cef8 <__gedf2>
    5370:	00806c16 	blt	zero,r2,5524 <_dtoa_r+0x1304>
    5374:	89e0003c 	xorhi	r7,r17,32768
    5378:	800d883a 	mov	r6,r16
    537c:	a809883a 	mov	r4,r21
    5380:	a00b883a 	mov	r5,r20
    5384:	000cfd40 	call	cfd4 <__ledf2>
    5388:	103d7e0e 	bge	r2,zero,4984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004984>
    538c:	002b883a 	mov	r21,zero
    5390:	0023883a 	mov	r17,zero
    5394:	003efb06 	br	4f84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004f84>
    5398:	d8800717 	ldw	r2,28(sp)
    539c:	003bd006 	br	42e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70042e0>
    53a0:	d9000a17 	ldw	r4,40(sp)
    53a4:	d9800d17 	ldw	r6,52(sp)
    53a8:	dd400a15 	stw	r21,40(sp)
    53ac:	a905c83a 	sub	r2,r21,r4
    53b0:	308d883a 	add	r6,r6,r2
    53b4:	d9800d15 	stw	r6,52(sp)
    53b8:	002b883a 	mov	r21,zero
    53bc:	003e0606 	br	4bd8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004bd8>
    53c0:	9023883a 	mov	r17,r18
    53c4:	9829883a 	mov	r20,r19
    53c8:	04000084 	movi	r16,2
    53cc:	003c9206 	br	4618 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004618>
    53d0:	04000044 	movi	r16,1
    53d4:	dc000c15 	stw	r16,48(sp)
    53d8:	dc000615 	stw	r16,24(sp)
    53dc:	dc002215 	stw	r16,136(sp)
    53e0:	e0001115 	stw	zero,68(fp)
    53e4:	000b883a 	mov	r5,zero
    53e8:	003c6906 	br	4590 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004590>
    53ec:	3021883a 	mov	r16,r6
    53f0:	003ffb06 	br	53e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70053e0>
    53f4:	1000021e 	bne	r2,zero,5400 <_dtoa_r+0x11e0>
    53f8:	4200004c 	andi	r8,r8,1
    53fc:	403e7d1e 	bne	r8,zero,4df4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004df4>
    5400:	01000c04 	movi	r4,48
    5404:	00000106 	br	540c <_dtoa_r+0x11ec>
    5408:	102f883a 	mov	r23,r2
    540c:	b8bfffc4 	addi	r2,r23,-1
    5410:	10c00007 	ldb	r3,0(r2)
    5414:	193ffc26 	beq	r3,r4,5408 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005408>
    5418:	003e8706 	br	4e38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004e38>
    541c:	d8800517 	ldw	r2,20(sp)
    5420:	00a3c83a 	sub	r17,zero,r2
    5424:	8800a426 	beq	r17,zero,56b8 <_dtoa_r+0x1498>
    5428:	888003cc 	andi	r2,r17,15
    542c:	100490fa 	slli	r2,r2,3
    5430:	00c000b4 	movhi	r3,2
    5434:	18ebc504 	addi	r3,r3,-20716
    5438:	1885883a 	add	r2,r3,r2
    543c:	11800017 	ldw	r6,0(r2)
    5440:	11c00117 	ldw	r7,4(r2)
    5444:	9009883a 	mov	r4,r18
    5448:	980b883a 	mov	r5,r19
    544c:	8823d13a 	srai	r17,r17,4
    5450:	000d0c80 	call	d0c8 <__muldf3>
    5454:	d8800f15 	stw	r2,60(sp)
    5458:	d8c01015 	stw	r3,64(sp)
    545c:	8800e826 	beq	r17,zero,5800 <_dtoa_r+0x15e0>
    5460:	050000b4 	movhi	r20,2
    5464:	a52bbb04 	addi	r20,r20,-20756
    5468:	04000084 	movi	r16,2
    546c:	8980004c 	andi	r6,r17,1
    5470:	1009883a 	mov	r4,r2
    5474:	8823d07a 	srai	r17,r17,1
    5478:	180b883a 	mov	r5,r3
    547c:	30000426 	beq	r6,zero,5490 <_dtoa_r+0x1270>
    5480:	a1800017 	ldw	r6,0(r20)
    5484:	a1c00117 	ldw	r7,4(r20)
    5488:	84000044 	addi	r16,r16,1
    548c:	000d0c80 	call	d0c8 <__muldf3>
    5490:	a5000204 	addi	r20,r20,8
    5494:	883ff51e 	bne	r17,zero,546c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700546c>
    5498:	d8800f15 	stw	r2,60(sp)
    549c:	d8c01015 	stw	r3,64(sp)
    54a0:	003c7606 	br	467c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700467c>
    54a4:	00c00c04 	movi	r3,48
    54a8:	10c00005 	stb	r3,0(r2)
    54ac:	d8c00517 	ldw	r3,20(sp)
    54b0:	bd3fffc3 	ldbu	r20,-1(r23)
    54b4:	18c00044 	addi	r3,r3,1
    54b8:	d8c00515 	stw	r3,20(sp)
    54bc:	003db906 	br	4ba4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004ba4>
    54c0:	89400117 	ldw	r5,4(r17)
    54c4:	e009883a 	mov	r4,fp
    54c8:	00078bc0 	call	78bc <_Balloc>
    54cc:	89800417 	ldw	r6,16(r17)
    54d0:	89400304 	addi	r5,r17,12
    54d4:	11000304 	addi	r4,r2,12
    54d8:	31800084 	addi	r6,r6,2
    54dc:	318d883a 	add	r6,r6,r6
    54e0:	318d883a 	add	r6,r6,r6
    54e4:	1027883a 	mov	r19,r2
    54e8:	00074f00 	call	74f0 <memcpy>
    54ec:	01800044 	movi	r6,1
    54f0:	980b883a 	mov	r5,r19
    54f4:	e009883a 	mov	r4,fp
    54f8:	000803c0 	call	803c <__lshift>
    54fc:	1029883a 	mov	r20,r2
    5500:	003ecc06 	br	5034 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005034>
    5504:	00800e44 	movi	r2,57
    5508:	90809026 	beq	r18,r2,574c <_dtoa_r+0x152c>
    550c:	92000044 	addi	r8,r18,1
    5510:	003f1f06 	br	5190 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005190>
    5514:	9011883a 	mov	r8,r18
    5518:	8825883a 	mov	r18,r17
    551c:	a023883a 	mov	r17,r20
    5520:	003e2906 	br	4dc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004dc8>
    5524:	002b883a 	mov	r21,zero
    5528:	0023883a 	mov	r17,zero
    552c:	003f5406 	br	5280 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005280>
    5530:	61bfffc4 	addi	r6,r12,-1
    5534:	300490fa 	slli	r2,r6,3
    5538:	00c000b4 	movhi	r3,2
    553c:	18ebc504 	addi	r3,r3,-20716
    5540:	1885883a 	add	r2,r3,r2
    5544:	11000017 	ldw	r4,0(r2)
    5548:	11400117 	ldw	r5,4(r2)
    554c:	d8800717 	ldw	r2,28(sp)
    5550:	880f883a 	mov	r7,r17
    5554:	d9801215 	stw	r6,72(sp)
    5558:	800d883a 	mov	r6,r16
    555c:	db001615 	stw	r12,88(sp)
    5560:	15c00044 	addi	r23,r2,1
    5564:	000d0c80 	call	d0c8 <__muldf3>
    5568:	d9401017 	ldw	r5,64(sp)
    556c:	d9000f17 	ldw	r4,60(sp)
    5570:	d8c01515 	stw	r3,84(sp)
    5574:	d8801415 	stw	r2,80(sp)
    5578:	000e0dc0 	call	e0dc <__fixdfsi>
    557c:	1009883a 	mov	r4,r2
    5580:	1021883a 	mov	r16,r2
    5584:	000e15c0 	call	e15c <__floatsidf>
    5588:	d9000f17 	ldw	r4,60(sp)
    558c:	d9401017 	ldw	r5,64(sp)
    5590:	100d883a 	mov	r6,r2
    5594:	180f883a 	mov	r7,r3
    5598:	000d7e00 	call	d7e0 <__subdf3>
    559c:	1829883a 	mov	r20,r3
    55a0:	d8c00717 	ldw	r3,28(sp)
    55a4:	84000c04 	addi	r16,r16,48
    55a8:	1023883a 	mov	r17,r2
    55ac:	1c000005 	stb	r16,0(r3)
    55b0:	db001617 	ldw	r12,88(sp)
    55b4:	00800044 	movi	r2,1
    55b8:	60802226 	beq	r12,r2,5644 <_dtoa_r+0x1424>
    55bc:	d9c00717 	ldw	r7,28(sp)
    55c0:	8805883a 	mov	r2,r17
    55c4:	b82b883a 	mov	r21,r23
    55c8:	3b19883a 	add	r12,r7,r12
    55cc:	6023883a 	mov	r17,r12
    55d0:	a007883a 	mov	r3,r20
    55d4:	dc800f15 	stw	r18,60(sp)
    55d8:	000d883a 	mov	r6,zero
    55dc:	01d00934 	movhi	r7,16420
    55e0:	1009883a 	mov	r4,r2
    55e4:	180b883a 	mov	r5,r3
    55e8:	000d0c80 	call	d0c8 <__muldf3>
    55ec:	180b883a 	mov	r5,r3
    55f0:	1009883a 	mov	r4,r2
    55f4:	1829883a 	mov	r20,r3
    55f8:	1025883a 	mov	r18,r2
    55fc:	000e0dc0 	call	e0dc <__fixdfsi>
    5600:	1009883a 	mov	r4,r2
    5604:	1021883a 	mov	r16,r2
    5608:	000e15c0 	call	e15c <__floatsidf>
    560c:	100d883a 	mov	r6,r2
    5610:	180f883a 	mov	r7,r3
    5614:	9009883a 	mov	r4,r18
    5618:	a00b883a 	mov	r5,r20
    561c:	84000c04 	addi	r16,r16,48
    5620:	000d7e00 	call	d7e0 <__subdf3>
    5624:	ad400044 	addi	r21,r21,1
    5628:	ac3fffc5 	stb	r16,-1(r21)
    562c:	ac7fea1e 	bne	r21,r17,55d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70055d8>
    5630:	1023883a 	mov	r17,r2
    5634:	d8801217 	ldw	r2,72(sp)
    5638:	dc800f17 	ldw	r18,60(sp)
    563c:	1829883a 	mov	r20,r3
    5640:	b8af883a 	add	r23,r23,r2
    5644:	d9001417 	ldw	r4,80(sp)
    5648:	d9401517 	ldw	r5,84(sp)
    564c:	000d883a 	mov	r6,zero
    5650:	01cff834 	movhi	r7,16352
    5654:	000bcdc0 	call	bcdc <__adddf3>
    5658:	880d883a 	mov	r6,r17
    565c:	a00f883a 	mov	r7,r20
    5660:	1009883a 	mov	r4,r2
    5664:	180b883a 	mov	r5,r3
    5668:	000cfd40 	call	cfd4 <__ledf2>
    566c:	10003e0e 	bge	r2,zero,5768 <_dtoa_r+0x1548>
    5670:	d9001317 	ldw	r4,76(sp)
    5674:	bd3fffc3 	ldbu	r20,-1(r23)
    5678:	d9000515 	stw	r4,20(sp)
    567c:	003d3b06 	br	4b6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004b6c>
    5680:	0027883a 	mov	r19,zero
    5684:	003f1b06 	br	52f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70052f4>
    5688:	d8800817 	ldw	r2,32(sp)
    568c:	11e9c83a 	sub	r20,r2,r7
    5690:	0005883a 	mov	r2,zero
    5694:	003d5406 	br	4be8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004be8>
    5698:	00800044 	movi	r2,1
    569c:	003dc706 	br	4dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004dbc>
    56a0:	d8c00217 	ldw	r3,8(sp)
    56a4:	00800d84 	movi	r2,54
    56a8:	dd400a17 	ldw	r21,40(sp)
    56ac:	10c5c83a 	sub	r2,r2,r3
    56b0:	dd000817 	ldw	r20,32(sp)
    56b4:	003d4c06 	br	4be8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004be8>
    56b8:	dc800f15 	stw	r18,60(sp)
    56bc:	dcc01015 	stw	r19,64(sp)
    56c0:	04000084 	movi	r16,2
    56c4:	003bed06 	br	467c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700467c>
    56c8:	d9000617 	ldw	r4,24(sp)
    56cc:	203f0d26 	beq	r4,zero,5304 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005304>
    56d0:	d9800c17 	ldw	r6,48(sp)
    56d4:	01bcab0e 	bge	zero,r6,4984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004984>
    56d8:	d9401017 	ldw	r5,64(sp)
    56dc:	d9000f17 	ldw	r4,60(sp)
    56e0:	000d883a 	mov	r6,zero
    56e4:	01d00934 	movhi	r7,16420
    56e8:	000d0c80 	call	d0c8 <__muldf3>
    56ec:	81000044 	addi	r4,r16,1
    56f0:	d8800f15 	stw	r2,60(sp)
    56f4:	d8c01015 	stw	r3,64(sp)
    56f8:	000e15c0 	call	e15c <__floatsidf>
    56fc:	d9800f17 	ldw	r6,60(sp)
    5700:	d9c01017 	ldw	r7,64(sp)
    5704:	1009883a 	mov	r4,r2
    5708:	180b883a 	mov	r5,r3
    570c:	000d0c80 	call	d0c8 <__muldf3>
    5710:	01d00734 	movhi	r7,16412
    5714:	000d883a 	mov	r6,zero
    5718:	1009883a 	mov	r4,r2
    571c:	180b883a 	mov	r5,r3
    5720:	000bcdc0 	call	bcdc <__adddf3>
    5724:	d9c00517 	ldw	r7,20(sp)
    5728:	047f3034 	movhi	r17,64704
    572c:	1021883a 	mov	r16,r2
    5730:	39ffffc4 	addi	r7,r7,-1
    5734:	d9c01315 	stw	r7,76(sp)
    5738:	1c63883a 	add	r17,r3,r17
    573c:	db000c17 	ldw	r12,48(sp)
    5740:	003bea06 	br	46ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046ec>
    5744:	dc000915 	stw	r16,36(sp)
    5748:	003e0e06 	br	4f84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004f84>
    574c:	01000e44 	movi	r4,57
    5750:	8825883a 	mov	r18,r17
    5754:	9dc00044 	addi	r23,r19,1
    5758:	99000005 	stb	r4,0(r19)
    575c:	a023883a 	mov	r17,r20
    5760:	dc000915 	stw	r16,36(sp)
    5764:	003da406 	br	4df8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004df8>
    5768:	d9801417 	ldw	r6,80(sp)
    576c:	d9c01517 	ldw	r7,84(sp)
    5770:	0009883a 	mov	r4,zero
    5774:	014ff834 	movhi	r5,16352
    5778:	000d7e00 	call	d7e0 <__subdf3>
    577c:	880d883a 	mov	r6,r17
    5780:	a00f883a 	mov	r7,r20
    5784:	1009883a 	mov	r4,r2
    5788:	180b883a 	mov	r5,r3
    578c:	000cef80 	call	cef8 <__gedf2>
    5790:	00bc7c0e 	bge	zero,r2,4984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004984>
    5794:	01000c04 	movi	r4,48
    5798:	00000106 	br	57a0 <_dtoa_r+0x1580>
    579c:	102f883a 	mov	r23,r2
    57a0:	b8bfffc4 	addi	r2,r23,-1
    57a4:	10c00007 	ldb	r3,0(r2)
    57a8:	193ffc26 	beq	r3,r4,579c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700579c>
    57ac:	d9801317 	ldw	r6,76(sp)
    57b0:	d9800515 	stw	r6,20(sp)
    57b4:	003c4406 	br	48c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70048c8>
    57b8:	d9801317 	ldw	r6,76(sp)
    57bc:	d9800515 	stw	r6,20(sp)
    57c0:	003cea06 	br	4b6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004b6c>
    57c4:	dd800f17 	ldw	r22,60(sp)
    57c8:	dcc01017 	ldw	r19,64(sp)
    57cc:	dc801217 	ldw	r18,72(sp)
    57d0:	003c6c06 	br	4984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004984>
    57d4:	903e031e 	bne	r18,zero,4fe4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004fe4>
    57d8:	003ebb06 	br	52c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70052c8>
    57dc:	103e6c1e 	bne	r2,zero,5190 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005190>
    57e0:	4080004c 	andi	r2,r8,1
    57e4:	103e6a26 	beq	r2,zero,5190 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005190>
    57e8:	003e6606 	br	5184 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005184>
    57ec:	d8c00317 	ldw	r3,12(sp)
    57f0:	00800084 	movi	r2,2
    57f4:	10c02916 	blt	r2,r3,589c <_dtoa_r+0x167c>
    57f8:	d9000c17 	ldw	r4,48(sp)
    57fc:	003e8806 	br	5220 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005220>
    5800:	04000084 	movi	r16,2
    5804:	003b9d06 	br	467c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700467c>
    5808:	d9001317 	ldw	r4,76(sp)
    580c:	d9000515 	stw	r4,20(sp)
    5810:	003cd606 	br	4b6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004b6c>
    5814:	d8801317 	ldw	r2,76(sp)
    5818:	d8800515 	stw	r2,20(sp)
    581c:	003c2a06 	br	48c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70048c8>
    5820:	d9800317 	ldw	r6,12(sp)
    5824:	00800084 	movi	r2,2
    5828:	11801516 	blt	r2,r6,5880 <_dtoa_r+0x1660>
    582c:	d9c00c17 	ldw	r7,48(sp)
    5830:	d9c00615 	stw	r7,24(sp)
    5834:	003df706 	br	5014 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005014>
    5838:	193d3926 	beq	r3,r4,4d20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004d20>
    583c:	00c00f04 	movi	r3,60
    5840:	1885c83a 	sub	r2,r3,r2
    5844:	003ddf06 	br	4fc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004fc4>
    5848:	e009883a 	mov	r4,fp
    584c:	e0001115 	stw	zero,68(fp)
    5850:	000b883a 	mov	r5,zero
    5854:	00078bc0 	call	78bc <_Balloc>
    5858:	d8800715 	stw	r2,28(sp)
    585c:	d8c00717 	ldw	r3,28(sp)
    5860:	00bfffc4 	movi	r2,-1
    5864:	01000044 	movi	r4,1
    5868:	d8800c15 	stw	r2,48(sp)
    586c:	e0c01015 	stw	r3,64(fp)
    5870:	d9000b15 	stw	r4,44(sp)
    5874:	d8800615 	stw	r2,24(sp)
    5878:	d8002215 	stw	zero,136(sp)
    587c:	003c4106 	br	4984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004984>
    5880:	d8c00c17 	ldw	r3,48(sp)
    5884:	d8c00615 	stw	r3,24(sp)
    5888:	003e7006 	br	524c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700524c>
    588c:	04400044 	movi	r17,1
    5890:	003b2006 	br	4514 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004514>
    5894:	000b883a 	mov	r5,zero
    5898:	003b3d06 	br	4590 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004590>
    589c:	d8800c17 	ldw	r2,48(sp)
    58a0:	d8800615 	stw	r2,24(sp)
    58a4:	003e6906 	br	524c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700524c>

000058a8 <__sflush_r>:
    58a8:	2880030b 	ldhu	r2,12(r5)
    58ac:	defffb04 	addi	sp,sp,-20
    58b0:	dcc00315 	stw	r19,12(sp)
    58b4:	dc400115 	stw	r17,4(sp)
    58b8:	dfc00415 	stw	ra,16(sp)
    58bc:	dc800215 	stw	r18,8(sp)
    58c0:	dc000015 	stw	r16,0(sp)
    58c4:	10c0020c 	andi	r3,r2,8
    58c8:	2823883a 	mov	r17,r5
    58cc:	2027883a 	mov	r19,r4
    58d0:	1800311e 	bne	r3,zero,5998 <__sflush_r+0xf0>
    58d4:	28c00117 	ldw	r3,4(r5)
    58d8:	10820014 	ori	r2,r2,2048
    58dc:	2880030d 	sth	r2,12(r5)
    58e0:	00c04b0e 	bge	zero,r3,5a10 <__sflush_r+0x168>
    58e4:	8a000a17 	ldw	r8,40(r17)
    58e8:	40002326 	beq	r8,zero,5978 <__sflush_r+0xd0>
    58ec:	9c000017 	ldw	r16,0(r19)
    58f0:	10c4000c 	andi	r3,r2,4096
    58f4:	98000015 	stw	zero,0(r19)
    58f8:	18004826 	beq	r3,zero,5a1c <__sflush_r+0x174>
    58fc:	89801417 	ldw	r6,80(r17)
    5900:	10c0010c 	andi	r3,r2,4
    5904:	18000626 	beq	r3,zero,5920 <__sflush_r+0x78>
    5908:	88c00117 	ldw	r3,4(r17)
    590c:	88800c17 	ldw	r2,48(r17)
    5910:	30cdc83a 	sub	r6,r6,r3
    5914:	10000226 	beq	r2,zero,5920 <__sflush_r+0x78>
    5918:	88800f17 	ldw	r2,60(r17)
    591c:	308dc83a 	sub	r6,r6,r2
    5920:	89400717 	ldw	r5,28(r17)
    5924:	000f883a 	mov	r7,zero
    5928:	9809883a 	mov	r4,r19
    592c:	403ee83a 	callr	r8
    5930:	00ffffc4 	movi	r3,-1
    5934:	10c04426 	beq	r2,r3,5a48 <__sflush_r+0x1a0>
    5938:	88c0030b 	ldhu	r3,12(r17)
    593c:	89000417 	ldw	r4,16(r17)
    5940:	88000115 	stw	zero,4(r17)
    5944:	197dffcc 	andi	r5,r3,63487
    5948:	8940030d 	sth	r5,12(r17)
    594c:	89000015 	stw	r4,0(r17)
    5950:	18c4000c 	andi	r3,r3,4096
    5954:	18002c1e 	bne	r3,zero,5a08 <__sflush_r+0x160>
    5958:	89400c17 	ldw	r5,48(r17)
    595c:	9c000015 	stw	r16,0(r19)
    5960:	28000526 	beq	r5,zero,5978 <__sflush_r+0xd0>
    5964:	88801004 	addi	r2,r17,64
    5968:	28800226 	beq	r5,r2,5974 <__sflush_r+0xcc>
    596c:	9809883a 	mov	r4,r19
    5970:	00060140 	call	6014 <_free_r>
    5974:	88000c15 	stw	zero,48(r17)
    5978:	0005883a 	mov	r2,zero
    597c:	dfc00417 	ldw	ra,16(sp)
    5980:	dcc00317 	ldw	r19,12(sp)
    5984:	dc800217 	ldw	r18,8(sp)
    5988:	dc400117 	ldw	r17,4(sp)
    598c:	dc000017 	ldw	r16,0(sp)
    5990:	dec00504 	addi	sp,sp,20
    5994:	f800283a 	ret
    5998:	2c800417 	ldw	r18,16(r5)
    599c:	903ff626 	beq	r18,zero,5978 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005978>
    59a0:	2c000017 	ldw	r16,0(r5)
    59a4:	108000cc 	andi	r2,r2,3
    59a8:	2c800015 	stw	r18,0(r5)
    59ac:	84a1c83a 	sub	r16,r16,r18
    59b0:	1000131e 	bne	r2,zero,5a00 <__sflush_r+0x158>
    59b4:	28800517 	ldw	r2,20(r5)
    59b8:	88800215 	stw	r2,8(r17)
    59bc:	04000316 	blt	zero,r16,59cc <__sflush_r+0x124>
    59c0:	003fed06 	br	5978 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005978>
    59c4:	90a5883a 	add	r18,r18,r2
    59c8:	043feb0e 	bge	zero,r16,5978 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005978>
    59cc:	88800917 	ldw	r2,36(r17)
    59d0:	89400717 	ldw	r5,28(r17)
    59d4:	800f883a 	mov	r7,r16
    59d8:	900d883a 	mov	r6,r18
    59dc:	9809883a 	mov	r4,r19
    59e0:	103ee83a 	callr	r2
    59e4:	80a1c83a 	sub	r16,r16,r2
    59e8:	00bff616 	blt	zero,r2,59c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70059c4>
    59ec:	88c0030b 	ldhu	r3,12(r17)
    59f0:	00bfffc4 	movi	r2,-1
    59f4:	18c01014 	ori	r3,r3,64
    59f8:	88c0030d 	sth	r3,12(r17)
    59fc:	003fdf06 	br	597c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700597c>
    5a00:	0005883a 	mov	r2,zero
    5a04:	003fec06 	br	59b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70059b8>
    5a08:	88801415 	stw	r2,80(r17)
    5a0c:	003fd206 	br	5958 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005958>
    5a10:	28c00f17 	ldw	r3,60(r5)
    5a14:	00ffb316 	blt	zero,r3,58e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70058e4>
    5a18:	003fd706 	br	5978 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005978>
    5a1c:	89400717 	ldw	r5,28(r17)
    5a20:	000d883a 	mov	r6,zero
    5a24:	01c00044 	movi	r7,1
    5a28:	9809883a 	mov	r4,r19
    5a2c:	403ee83a 	callr	r8
    5a30:	100d883a 	mov	r6,r2
    5a34:	00bfffc4 	movi	r2,-1
    5a38:	30801426 	beq	r6,r2,5a8c <__sflush_r+0x1e4>
    5a3c:	8880030b 	ldhu	r2,12(r17)
    5a40:	8a000a17 	ldw	r8,40(r17)
    5a44:	003fae06 	br	5900 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005900>
    5a48:	98c00017 	ldw	r3,0(r19)
    5a4c:	183fba26 	beq	r3,zero,5938 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005938>
    5a50:	01000744 	movi	r4,29
    5a54:	19000626 	beq	r3,r4,5a70 <__sflush_r+0x1c8>
    5a58:	01000584 	movi	r4,22
    5a5c:	19000426 	beq	r3,r4,5a70 <__sflush_r+0x1c8>
    5a60:	88c0030b 	ldhu	r3,12(r17)
    5a64:	18c01014 	ori	r3,r3,64
    5a68:	88c0030d 	sth	r3,12(r17)
    5a6c:	003fc306 	br	597c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700597c>
    5a70:	8880030b 	ldhu	r2,12(r17)
    5a74:	88c00417 	ldw	r3,16(r17)
    5a78:	88000115 	stw	zero,4(r17)
    5a7c:	10bdffcc 	andi	r2,r2,63487
    5a80:	8880030d 	sth	r2,12(r17)
    5a84:	88c00015 	stw	r3,0(r17)
    5a88:	003fb306 	br	5958 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005958>
    5a8c:	98800017 	ldw	r2,0(r19)
    5a90:	103fea26 	beq	r2,zero,5a3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005a3c>
    5a94:	00c00744 	movi	r3,29
    5a98:	10c00226 	beq	r2,r3,5aa4 <__sflush_r+0x1fc>
    5a9c:	00c00584 	movi	r3,22
    5aa0:	10c0031e 	bne	r2,r3,5ab0 <__sflush_r+0x208>
    5aa4:	9c000015 	stw	r16,0(r19)
    5aa8:	0005883a 	mov	r2,zero
    5aac:	003fb306 	br	597c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700597c>
    5ab0:	88c0030b 	ldhu	r3,12(r17)
    5ab4:	3005883a 	mov	r2,r6
    5ab8:	18c01014 	ori	r3,r3,64
    5abc:	88c0030d 	sth	r3,12(r17)
    5ac0:	003fae06 	br	597c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700597c>

00005ac4 <_fflush_r>:
    5ac4:	defffd04 	addi	sp,sp,-12
    5ac8:	dc000115 	stw	r16,4(sp)
    5acc:	dfc00215 	stw	ra,8(sp)
    5ad0:	2021883a 	mov	r16,r4
    5ad4:	20000226 	beq	r4,zero,5ae0 <_fflush_r+0x1c>
    5ad8:	20800e17 	ldw	r2,56(r4)
    5adc:	10000c26 	beq	r2,zero,5b10 <_fflush_r+0x4c>
    5ae0:	2880030f 	ldh	r2,12(r5)
    5ae4:	1000051e 	bne	r2,zero,5afc <_fflush_r+0x38>
    5ae8:	0005883a 	mov	r2,zero
    5aec:	dfc00217 	ldw	ra,8(sp)
    5af0:	dc000117 	ldw	r16,4(sp)
    5af4:	dec00304 	addi	sp,sp,12
    5af8:	f800283a 	ret
    5afc:	8009883a 	mov	r4,r16
    5b00:	dfc00217 	ldw	ra,8(sp)
    5b04:	dc000117 	ldw	r16,4(sp)
    5b08:	dec00304 	addi	sp,sp,12
    5b0c:	00058a81 	jmpi	58a8 <__sflush_r>
    5b10:	d9400015 	stw	r5,0(sp)
    5b14:	0005ea00 	call	5ea0 <__sinit>
    5b18:	d9400017 	ldw	r5,0(sp)
    5b1c:	003ff006 	br	5ae0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005ae0>

00005b20 <fflush>:
    5b20:	20000526 	beq	r4,zero,5b38 <fflush+0x18>
    5b24:	008000b4 	movhi	r2,2
    5b28:	10b49c04 	addi	r2,r2,-11664
    5b2c:	200b883a 	mov	r5,r4
    5b30:	11000017 	ldw	r4,0(r2)
    5b34:	0005ac41 	jmpi	5ac4 <_fflush_r>
    5b38:	008000b4 	movhi	r2,2
    5b3c:	10b49b04 	addi	r2,r2,-11668
    5b40:	11000017 	ldw	r4,0(r2)
    5b44:	01400034 	movhi	r5,0
    5b48:	2956b104 	addi	r5,r5,23236
    5b4c:	00068a41 	jmpi	68a4 <_fwalk_reent>

00005b50 <__fp_unlock>:
    5b50:	0005883a 	mov	r2,zero
    5b54:	f800283a 	ret

00005b58 <_cleanup_r>:
    5b58:	01400074 	movhi	r5,1
    5b5c:	296a2f04 	addi	r5,r5,-22340
    5b60:	00068a41 	jmpi	68a4 <_fwalk_reent>

00005b64 <__sinit.part.1>:
    5b64:	defff704 	addi	sp,sp,-36
    5b68:	00c00034 	movhi	r3,0
    5b6c:	dfc00815 	stw	ra,32(sp)
    5b70:	ddc00715 	stw	r23,28(sp)
    5b74:	dd800615 	stw	r22,24(sp)
    5b78:	dd400515 	stw	r21,20(sp)
    5b7c:	dd000415 	stw	r20,16(sp)
    5b80:	dcc00315 	stw	r19,12(sp)
    5b84:	dc800215 	stw	r18,8(sp)
    5b88:	dc400115 	stw	r17,4(sp)
    5b8c:	dc000015 	stw	r16,0(sp)
    5b90:	18d6d604 	addi	r3,r3,23384
    5b94:	24000117 	ldw	r16,4(r4)
    5b98:	20c00f15 	stw	r3,60(r4)
    5b9c:	2080bb04 	addi	r2,r4,748
    5ba0:	00c000c4 	movi	r3,3
    5ba4:	20c0b915 	stw	r3,740(r4)
    5ba8:	2080ba15 	stw	r2,744(r4)
    5bac:	2000b815 	stw	zero,736(r4)
    5bb0:	05c00204 	movi	r23,8
    5bb4:	00800104 	movi	r2,4
    5bb8:	2025883a 	mov	r18,r4
    5bbc:	b80d883a 	mov	r6,r23
    5bc0:	81001704 	addi	r4,r16,92
    5bc4:	000b883a 	mov	r5,zero
    5bc8:	80000015 	stw	zero,0(r16)
    5bcc:	80000115 	stw	zero,4(r16)
    5bd0:	80000215 	stw	zero,8(r16)
    5bd4:	8080030d 	sth	r2,12(r16)
    5bd8:	80001915 	stw	zero,100(r16)
    5bdc:	8000038d 	sth	zero,14(r16)
    5be0:	80000415 	stw	zero,16(r16)
    5be4:	80000515 	stw	zero,20(r16)
    5be8:	80000615 	stw	zero,24(r16)
    5bec:	00077940 	call	7794 <memset>
    5bf0:	05800074 	movhi	r22,1
    5bf4:	94400217 	ldw	r17,8(r18)
    5bf8:	05400074 	movhi	r21,1
    5bfc:	05000074 	movhi	r20,1
    5c00:	04c00074 	movhi	r19,1
    5c04:	b5a3b904 	addi	r22,r22,-28956
    5c08:	ad63d004 	addi	r21,r21,-28864
    5c0c:	a523ef04 	addi	r20,r20,-28740
    5c10:	9ce40604 	addi	r19,r19,-28648
    5c14:	85800815 	stw	r22,32(r16)
    5c18:	85400915 	stw	r21,36(r16)
    5c1c:	85000a15 	stw	r20,40(r16)
    5c20:	84c00b15 	stw	r19,44(r16)
    5c24:	84000715 	stw	r16,28(r16)
    5c28:	00800284 	movi	r2,10
    5c2c:	8880030d 	sth	r2,12(r17)
    5c30:	00800044 	movi	r2,1
    5c34:	b80d883a 	mov	r6,r23
    5c38:	89001704 	addi	r4,r17,92
    5c3c:	000b883a 	mov	r5,zero
    5c40:	88000015 	stw	zero,0(r17)
    5c44:	88000115 	stw	zero,4(r17)
    5c48:	88000215 	stw	zero,8(r17)
    5c4c:	88001915 	stw	zero,100(r17)
    5c50:	8880038d 	sth	r2,14(r17)
    5c54:	88000415 	stw	zero,16(r17)
    5c58:	88000515 	stw	zero,20(r17)
    5c5c:	88000615 	stw	zero,24(r17)
    5c60:	00077940 	call	7794 <memset>
    5c64:	94000317 	ldw	r16,12(r18)
    5c68:	00800484 	movi	r2,18
    5c6c:	8c400715 	stw	r17,28(r17)
    5c70:	8d800815 	stw	r22,32(r17)
    5c74:	8d400915 	stw	r21,36(r17)
    5c78:	8d000a15 	stw	r20,40(r17)
    5c7c:	8cc00b15 	stw	r19,44(r17)
    5c80:	8080030d 	sth	r2,12(r16)
    5c84:	00800084 	movi	r2,2
    5c88:	80000015 	stw	zero,0(r16)
    5c8c:	80000115 	stw	zero,4(r16)
    5c90:	80000215 	stw	zero,8(r16)
    5c94:	80001915 	stw	zero,100(r16)
    5c98:	8080038d 	sth	r2,14(r16)
    5c9c:	80000415 	stw	zero,16(r16)
    5ca0:	80000515 	stw	zero,20(r16)
    5ca4:	80000615 	stw	zero,24(r16)
    5ca8:	b80d883a 	mov	r6,r23
    5cac:	000b883a 	mov	r5,zero
    5cb0:	81001704 	addi	r4,r16,92
    5cb4:	00077940 	call	7794 <memset>
    5cb8:	00800044 	movi	r2,1
    5cbc:	84000715 	stw	r16,28(r16)
    5cc0:	85800815 	stw	r22,32(r16)
    5cc4:	85400915 	stw	r21,36(r16)
    5cc8:	85000a15 	stw	r20,40(r16)
    5ccc:	84c00b15 	stw	r19,44(r16)
    5cd0:	90800e15 	stw	r2,56(r18)
    5cd4:	dfc00817 	ldw	ra,32(sp)
    5cd8:	ddc00717 	ldw	r23,28(sp)
    5cdc:	dd800617 	ldw	r22,24(sp)
    5ce0:	dd400517 	ldw	r21,20(sp)
    5ce4:	dd000417 	ldw	r20,16(sp)
    5ce8:	dcc00317 	ldw	r19,12(sp)
    5cec:	dc800217 	ldw	r18,8(sp)
    5cf0:	dc400117 	ldw	r17,4(sp)
    5cf4:	dc000017 	ldw	r16,0(sp)
    5cf8:	dec00904 	addi	sp,sp,36
    5cfc:	f800283a 	ret

00005d00 <__fp_lock>:
    5d00:	0005883a 	mov	r2,zero
    5d04:	f800283a 	ret

00005d08 <__sfmoreglue>:
    5d08:	defffc04 	addi	sp,sp,-16
    5d0c:	dc400115 	stw	r17,4(sp)
    5d10:	2c7fffc4 	addi	r17,r5,-1
    5d14:	8c401a24 	muli	r17,r17,104
    5d18:	dc800215 	stw	r18,8(sp)
    5d1c:	2825883a 	mov	r18,r5
    5d20:	89401d04 	addi	r5,r17,116
    5d24:	dc000015 	stw	r16,0(sp)
    5d28:	dfc00315 	stw	ra,12(sp)
    5d2c:	0006c000 	call	6c00 <_malloc_r>
    5d30:	1021883a 	mov	r16,r2
    5d34:	10000726 	beq	r2,zero,5d54 <__sfmoreglue+0x4c>
    5d38:	11000304 	addi	r4,r2,12
    5d3c:	10000015 	stw	zero,0(r2)
    5d40:	14800115 	stw	r18,4(r2)
    5d44:	11000215 	stw	r4,8(r2)
    5d48:	89801a04 	addi	r6,r17,104
    5d4c:	000b883a 	mov	r5,zero
    5d50:	00077940 	call	7794 <memset>
    5d54:	8005883a 	mov	r2,r16
    5d58:	dfc00317 	ldw	ra,12(sp)
    5d5c:	dc800217 	ldw	r18,8(sp)
    5d60:	dc400117 	ldw	r17,4(sp)
    5d64:	dc000017 	ldw	r16,0(sp)
    5d68:	dec00404 	addi	sp,sp,16
    5d6c:	f800283a 	ret

00005d70 <__sfp>:
    5d70:	defffb04 	addi	sp,sp,-20
    5d74:	dc000015 	stw	r16,0(sp)
    5d78:	040000b4 	movhi	r16,2
    5d7c:	84349b04 	addi	r16,r16,-11668
    5d80:	dcc00315 	stw	r19,12(sp)
    5d84:	2027883a 	mov	r19,r4
    5d88:	81000017 	ldw	r4,0(r16)
    5d8c:	dfc00415 	stw	ra,16(sp)
    5d90:	dc800215 	stw	r18,8(sp)
    5d94:	20800e17 	ldw	r2,56(r4)
    5d98:	dc400115 	stw	r17,4(sp)
    5d9c:	1000021e 	bne	r2,zero,5da8 <__sfp+0x38>
    5da0:	0005b640 	call	5b64 <__sinit.part.1>
    5da4:	81000017 	ldw	r4,0(r16)
    5da8:	2480b804 	addi	r18,r4,736
    5dac:	047fffc4 	movi	r17,-1
    5db0:	91000117 	ldw	r4,4(r18)
    5db4:	94000217 	ldw	r16,8(r18)
    5db8:	213fffc4 	addi	r4,r4,-1
    5dbc:	20000a16 	blt	r4,zero,5de8 <__sfp+0x78>
    5dc0:	8080030f 	ldh	r2,12(r16)
    5dc4:	10000c26 	beq	r2,zero,5df8 <__sfp+0x88>
    5dc8:	80c01d04 	addi	r3,r16,116
    5dcc:	00000206 	br	5dd8 <__sfp+0x68>
    5dd0:	18bfe60f 	ldh	r2,-104(r3)
    5dd4:	10000826 	beq	r2,zero,5df8 <__sfp+0x88>
    5dd8:	213fffc4 	addi	r4,r4,-1
    5ddc:	1c3ffd04 	addi	r16,r3,-12
    5de0:	18c01a04 	addi	r3,r3,104
    5de4:	247ffa1e 	bne	r4,r17,5dd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005dd0>
    5de8:	90800017 	ldw	r2,0(r18)
    5dec:	10001d26 	beq	r2,zero,5e64 <__sfp+0xf4>
    5df0:	1025883a 	mov	r18,r2
    5df4:	003fee06 	br	5db0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005db0>
    5df8:	00bfffc4 	movi	r2,-1
    5dfc:	8080038d 	sth	r2,14(r16)
    5e00:	00800044 	movi	r2,1
    5e04:	8080030d 	sth	r2,12(r16)
    5e08:	80001915 	stw	zero,100(r16)
    5e0c:	80000015 	stw	zero,0(r16)
    5e10:	80000215 	stw	zero,8(r16)
    5e14:	80000115 	stw	zero,4(r16)
    5e18:	80000415 	stw	zero,16(r16)
    5e1c:	80000515 	stw	zero,20(r16)
    5e20:	80000615 	stw	zero,24(r16)
    5e24:	01800204 	movi	r6,8
    5e28:	000b883a 	mov	r5,zero
    5e2c:	81001704 	addi	r4,r16,92
    5e30:	00077940 	call	7794 <memset>
    5e34:	8005883a 	mov	r2,r16
    5e38:	80000c15 	stw	zero,48(r16)
    5e3c:	80000d15 	stw	zero,52(r16)
    5e40:	80001115 	stw	zero,68(r16)
    5e44:	80001215 	stw	zero,72(r16)
    5e48:	dfc00417 	ldw	ra,16(sp)
    5e4c:	dcc00317 	ldw	r19,12(sp)
    5e50:	dc800217 	ldw	r18,8(sp)
    5e54:	dc400117 	ldw	r17,4(sp)
    5e58:	dc000017 	ldw	r16,0(sp)
    5e5c:	dec00504 	addi	sp,sp,20
    5e60:	f800283a 	ret
    5e64:	01400104 	movi	r5,4
    5e68:	9809883a 	mov	r4,r19
    5e6c:	0005d080 	call	5d08 <__sfmoreglue>
    5e70:	90800015 	stw	r2,0(r18)
    5e74:	103fde1e 	bne	r2,zero,5df0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005df0>
    5e78:	00800304 	movi	r2,12
    5e7c:	98800015 	stw	r2,0(r19)
    5e80:	0005883a 	mov	r2,zero
    5e84:	003ff006 	br	5e48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005e48>

00005e88 <_cleanup>:
    5e88:	008000b4 	movhi	r2,2
    5e8c:	10b49b04 	addi	r2,r2,-11668
    5e90:	11000017 	ldw	r4,0(r2)
    5e94:	01400074 	movhi	r5,1
    5e98:	296a2f04 	addi	r5,r5,-22340
    5e9c:	00068a41 	jmpi	68a4 <_fwalk_reent>

00005ea0 <__sinit>:
    5ea0:	20800e17 	ldw	r2,56(r4)
    5ea4:	10000126 	beq	r2,zero,5eac <__sinit+0xc>
    5ea8:	f800283a 	ret
    5eac:	0005b641 	jmpi	5b64 <__sinit.part.1>

00005eb0 <__sfp_lock_acquire>:
    5eb0:	f800283a 	ret

00005eb4 <__sfp_lock_release>:
    5eb4:	f800283a 	ret

00005eb8 <__sinit_lock_acquire>:
    5eb8:	f800283a 	ret

00005ebc <__sinit_lock_release>:
    5ebc:	f800283a 	ret

00005ec0 <__fp_lock_all>:
    5ec0:	008000b4 	movhi	r2,2
    5ec4:	10b49c04 	addi	r2,r2,-11664
    5ec8:	11000017 	ldw	r4,0(r2)
    5ecc:	01400034 	movhi	r5,0
    5ed0:	29574004 	addi	r5,r5,23808
    5ed4:	00067e01 	jmpi	67e0 <_fwalk>

00005ed8 <__fp_unlock_all>:
    5ed8:	008000b4 	movhi	r2,2
    5edc:	10b49c04 	addi	r2,r2,-11664
    5ee0:	11000017 	ldw	r4,0(r2)
    5ee4:	01400034 	movhi	r5,0
    5ee8:	2956d404 	addi	r5,r5,23376
    5eec:	00067e01 	jmpi	67e0 <_fwalk>

00005ef0 <_malloc_trim_r>:
    5ef0:	defffb04 	addi	sp,sp,-20
    5ef4:	dcc00315 	stw	r19,12(sp)
    5ef8:	04c000b4 	movhi	r19,2
    5efc:	dc800215 	stw	r18,8(sp)
    5f00:	dc400115 	stw	r17,4(sp)
    5f04:	dc000015 	stw	r16,0(sp)
    5f08:	dfc00415 	stw	ra,16(sp)
    5f0c:	2821883a 	mov	r16,r5
    5f10:	9cee5104 	addi	r19,r19,-18108
    5f14:	2025883a 	mov	r18,r4
    5f18:	000eda40 	call	eda4 <__malloc_lock>
    5f1c:	98800217 	ldw	r2,8(r19)
    5f20:	14400117 	ldw	r17,4(r2)
    5f24:	00bfff04 	movi	r2,-4
    5f28:	88a2703a 	and	r17,r17,r2
    5f2c:	8c21c83a 	sub	r16,r17,r16
    5f30:	8403fbc4 	addi	r16,r16,4079
    5f34:	8020d33a 	srli	r16,r16,12
    5f38:	0083ffc4 	movi	r2,4095
    5f3c:	843fffc4 	addi	r16,r16,-1
    5f40:	8020933a 	slli	r16,r16,12
    5f44:	1400060e 	bge	r2,r16,5f60 <_malloc_trim_r+0x70>
    5f48:	000b883a 	mov	r5,zero
    5f4c:	9009883a 	mov	r4,r18
    5f50:	0008e900 	call	8e90 <_sbrk_r>
    5f54:	98c00217 	ldw	r3,8(r19)
    5f58:	1c47883a 	add	r3,r3,r17
    5f5c:	10c00a26 	beq	r2,r3,5f88 <_malloc_trim_r+0x98>
    5f60:	9009883a 	mov	r4,r18
    5f64:	000eec40 	call	eec4 <__malloc_unlock>
    5f68:	0005883a 	mov	r2,zero
    5f6c:	dfc00417 	ldw	ra,16(sp)
    5f70:	dcc00317 	ldw	r19,12(sp)
    5f74:	dc800217 	ldw	r18,8(sp)
    5f78:	dc400117 	ldw	r17,4(sp)
    5f7c:	dc000017 	ldw	r16,0(sp)
    5f80:	dec00504 	addi	sp,sp,20
    5f84:	f800283a 	ret
    5f88:	040bc83a 	sub	r5,zero,r16
    5f8c:	9009883a 	mov	r4,r18
    5f90:	0008e900 	call	8e90 <_sbrk_r>
    5f94:	00ffffc4 	movi	r3,-1
    5f98:	10c00d26 	beq	r2,r3,5fd0 <_malloc_trim_r+0xe0>
    5f9c:	00c000b4 	movhi	r3,2
    5fa0:	18fceb04 	addi	r3,r3,-3156
    5fa4:	18800017 	ldw	r2,0(r3)
    5fa8:	99000217 	ldw	r4,8(r19)
    5fac:	8c23c83a 	sub	r17,r17,r16
    5fb0:	8c400054 	ori	r17,r17,1
    5fb4:	1421c83a 	sub	r16,r2,r16
    5fb8:	24400115 	stw	r17,4(r4)
    5fbc:	9009883a 	mov	r4,r18
    5fc0:	1c000015 	stw	r16,0(r3)
    5fc4:	000eec40 	call	eec4 <__malloc_unlock>
    5fc8:	00800044 	movi	r2,1
    5fcc:	003fe706 	br	5f6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005f6c>
    5fd0:	000b883a 	mov	r5,zero
    5fd4:	9009883a 	mov	r4,r18
    5fd8:	0008e900 	call	8e90 <_sbrk_r>
    5fdc:	99000217 	ldw	r4,8(r19)
    5fe0:	014003c4 	movi	r5,15
    5fe4:	1107c83a 	sub	r3,r2,r4
    5fe8:	28ffdd0e 	bge	r5,r3,5f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005f60>
    5fec:	014000b4 	movhi	r5,2
    5ff0:	29749e04 	addi	r5,r5,-11656
    5ff4:	29400017 	ldw	r5,0(r5)
    5ff8:	18c00054 	ori	r3,r3,1
    5ffc:	20c00115 	stw	r3,4(r4)
    6000:	00c000b4 	movhi	r3,2
    6004:	1145c83a 	sub	r2,r2,r5
    6008:	18fceb04 	addi	r3,r3,-3156
    600c:	18800015 	stw	r2,0(r3)
    6010:	003fd306 	br	5f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005f60>

00006014 <_free_r>:
    6014:	28004126 	beq	r5,zero,611c <_free_r+0x108>
    6018:	defffd04 	addi	sp,sp,-12
    601c:	dc400115 	stw	r17,4(sp)
    6020:	dc000015 	stw	r16,0(sp)
    6024:	2023883a 	mov	r17,r4
    6028:	2821883a 	mov	r16,r5
    602c:	dfc00215 	stw	ra,8(sp)
    6030:	000eda40 	call	eda4 <__malloc_lock>
    6034:	81ffff17 	ldw	r7,-4(r16)
    6038:	00bfff84 	movi	r2,-2
    603c:	010000b4 	movhi	r4,2
    6040:	81bffe04 	addi	r6,r16,-8
    6044:	3884703a 	and	r2,r7,r2
    6048:	212e5104 	addi	r4,r4,-18108
    604c:	308b883a 	add	r5,r6,r2
    6050:	2a400117 	ldw	r9,4(r5)
    6054:	22000217 	ldw	r8,8(r4)
    6058:	00ffff04 	movi	r3,-4
    605c:	48c6703a 	and	r3,r9,r3
    6060:	2a005726 	beq	r5,r8,61c0 <_free_r+0x1ac>
    6064:	28c00115 	stw	r3,4(r5)
    6068:	39c0004c 	andi	r7,r7,1
    606c:	3800091e 	bne	r7,zero,6094 <_free_r+0x80>
    6070:	823ffe17 	ldw	r8,-8(r16)
    6074:	22400204 	addi	r9,r4,8
    6078:	320dc83a 	sub	r6,r6,r8
    607c:	31c00217 	ldw	r7,8(r6)
    6080:	1205883a 	add	r2,r2,r8
    6084:	3a406526 	beq	r7,r9,621c <_free_r+0x208>
    6088:	32000317 	ldw	r8,12(r6)
    608c:	3a000315 	stw	r8,12(r7)
    6090:	41c00215 	stw	r7,8(r8)
    6094:	28cf883a 	add	r7,r5,r3
    6098:	39c00117 	ldw	r7,4(r7)
    609c:	39c0004c 	andi	r7,r7,1
    60a0:	38003a26 	beq	r7,zero,618c <_free_r+0x178>
    60a4:	10c00054 	ori	r3,r2,1
    60a8:	30c00115 	stw	r3,4(r6)
    60ac:	3087883a 	add	r3,r6,r2
    60b0:	18800015 	stw	r2,0(r3)
    60b4:	00c07fc4 	movi	r3,511
    60b8:	18801936 	bltu	r3,r2,6120 <_free_r+0x10c>
    60bc:	1004d0fa 	srli	r2,r2,3
    60c0:	01c00044 	movi	r7,1
    60c4:	21400117 	ldw	r5,4(r4)
    60c8:	10c00044 	addi	r3,r2,1
    60cc:	18c7883a 	add	r3,r3,r3
    60d0:	1005d0ba 	srai	r2,r2,2
    60d4:	18c7883a 	add	r3,r3,r3
    60d8:	18c7883a 	add	r3,r3,r3
    60dc:	1907883a 	add	r3,r3,r4
    60e0:	3884983a 	sll	r2,r7,r2
    60e4:	19c00017 	ldw	r7,0(r3)
    60e8:	1a3ffe04 	addi	r8,r3,-8
    60ec:	1144b03a 	or	r2,r2,r5
    60f0:	32000315 	stw	r8,12(r6)
    60f4:	31c00215 	stw	r7,8(r6)
    60f8:	20800115 	stw	r2,4(r4)
    60fc:	19800015 	stw	r6,0(r3)
    6100:	39800315 	stw	r6,12(r7)
    6104:	8809883a 	mov	r4,r17
    6108:	dfc00217 	ldw	ra,8(sp)
    610c:	dc400117 	ldw	r17,4(sp)
    6110:	dc000017 	ldw	r16,0(sp)
    6114:	dec00304 	addi	sp,sp,12
    6118:	000eec41 	jmpi	eec4 <__malloc_unlock>
    611c:	f800283a 	ret
    6120:	100ad27a 	srli	r5,r2,9
    6124:	00c00104 	movi	r3,4
    6128:	19404a36 	bltu	r3,r5,6254 <_free_r+0x240>
    612c:	100ad1ba 	srli	r5,r2,6
    6130:	28c00e44 	addi	r3,r5,57
    6134:	18c7883a 	add	r3,r3,r3
    6138:	29400e04 	addi	r5,r5,56
    613c:	18c7883a 	add	r3,r3,r3
    6140:	18c7883a 	add	r3,r3,r3
    6144:	1909883a 	add	r4,r3,r4
    6148:	20c00017 	ldw	r3,0(r4)
    614c:	01c000b4 	movhi	r7,2
    6150:	213ffe04 	addi	r4,r4,-8
    6154:	39ee5104 	addi	r7,r7,-18108
    6158:	20c04426 	beq	r4,r3,626c <_free_r+0x258>
    615c:	01ffff04 	movi	r7,-4
    6160:	19400117 	ldw	r5,4(r3)
    6164:	29ca703a 	and	r5,r5,r7
    6168:	1140022e 	bgeu	r2,r5,6174 <_free_r+0x160>
    616c:	18c00217 	ldw	r3,8(r3)
    6170:	20fffb1e 	bne	r4,r3,6160 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006160>
    6174:	19000317 	ldw	r4,12(r3)
    6178:	31000315 	stw	r4,12(r6)
    617c:	30c00215 	stw	r3,8(r6)
    6180:	21800215 	stw	r6,8(r4)
    6184:	19800315 	stw	r6,12(r3)
    6188:	003fde06 	br	6104 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006104>
    618c:	29c00217 	ldw	r7,8(r5)
    6190:	10c5883a 	add	r2,r2,r3
    6194:	00c000b4 	movhi	r3,2
    6198:	18ee5304 	addi	r3,r3,-18100
    619c:	38c03b26 	beq	r7,r3,628c <_free_r+0x278>
    61a0:	2a000317 	ldw	r8,12(r5)
    61a4:	11400054 	ori	r5,r2,1
    61a8:	3087883a 	add	r3,r6,r2
    61ac:	3a000315 	stw	r8,12(r7)
    61b0:	41c00215 	stw	r7,8(r8)
    61b4:	31400115 	stw	r5,4(r6)
    61b8:	18800015 	stw	r2,0(r3)
    61bc:	003fbd06 	br	60b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70060b4>
    61c0:	39c0004c 	andi	r7,r7,1
    61c4:	10c5883a 	add	r2,r2,r3
    61c8:	3800071e 	bne	r7,zero,61e8 <_free_r+0x1d4>
    61cc:	81fffe17 	ldw	r7,-8(r16)
    61d0:	31cdc83a 	sub	r6,r6,r7
    61d4:	30c00317 	ldw	r3,12(r6)
    61d8:	31400217 	ldw	r5,8(r6)
    61dc:	11c5883a 	add	r2,r2,r7
    61e0:	28c00315 	stw	r3,12(r5)
    61e4:	19400215 	stw	r5,8(r3)
    61e8:	10c00054 	ori	r3,r2,1
    61ec:	30c00115 	stw	r3,4(r6)
    61f0:	00c000b4 	movhi	r3,2
    61f4:	18f49f04 	addi	r3,r3,-11652
    61f8:	18c00017 	ldw	r3,0(r3)
    61fc:	21800215 	stw	r6,8(r4)
    6200:	10ffc036 	bltu	r2,r3,6104 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006104>
    6204:	008000b4 	movhi	r2,2
    6208:	10bcc904 	addi	r2,r2,-3292
    620c:	11400017 	ldw	r5,0(r2)
    6210:	8809883a 	mov	r4,r17
    6214:	0005ef00 	call	5ef0 <_malloc_trim_r>
    6218:	003fba06 	br	6104 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006104>
    621c:	28c9883a 	add	r4,r5,r3
    6220:	21000117 	ldw	r4,4(r4)
    6224:	2100004c 	andi	r4,r4,1
    6228:	2000391e 	bne	r4,zero,6310 <_free_r+0x2fc>
    622c:	29c00217 	ldw	r7,8(r5)
    6230:	29000317 	ldw	r4,12(r5)
    6234:	1885883a 	add	r2,r3,r2
    6238:	10c00054 	ori	r3,r2,1
    623c:	39000315 	stw	r4,12(r7)
    6240:	21c00215 	stw	r7,8(r4)
    6244:	30c00115 	stw	r3,4(r6)
    6248:	308d883a 	add	r6,r6,r2
    624c:	30800015 	stw	r2,0(r6)
    6250:	003fac06 	br	6104 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006104>
    6254:	00c00504 	movi	r3,20
    6258:	19401536 	bltu	r3,r5,62b0 <_free_r+0x29c>
    625c:	28c01704 	addi	r3,r5,92
    6260:	18c7883a 	add	r3,r3,r3
    6264:	294016c4 	addi	r5,r5,91
    6268:	003fb406 	br	613c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700613c>
    626c:	280bd0ba 	srai	r5,r5,2
    6270:	00c00044 	movi	r3,1
    6274:	38800117 	ldw	r2,4(r7)
    6278:	194a983a 	sll	r5,r3,r5
    627c:	2007883a 	mov	r3,r4
    6280:	2884b03a 	or	r2,r5,r2
    6284:	38800115 	stw	r2,4(r7)
    6288:	003fbb06 	br	6178 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006178>
    628c:	21800515 	stw	r6,20(r4)
    6290:	21800415 	stw	r6,16(r4)
    6294:	10c00054 	ori	r3,r2,1
    6298:	31c00315 	stw	r7,12(r6)
    629c:	31c00215 	stw	r7,8(r6)
    62a0:	30c00115 	stw	r3,4(r6)
    62a4:	308d883a 	add	r6,r6,r2
    62a8:	30800015 	stw	r2,0(r6)
    62ac:	003f9506 	br	6104 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006104>
    62b0:	00c01504 	movi	r3,84
    62b4:	19400536 	bltu	r3,r5,62cc <_free_r+0x2b8>
    62b8:	100ad33a 	srli	r5,r2,12
    62bc:	28c01bc4 	addi	r3,r5,111
    62c0:	18c7883a 	add	r3,r3,r3
    62c4:	29401b84 	addi	r5,r5,110
    62c8:	003f9c06 	br	613c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700613c>
    62cc:	00c05504 	movi	r3,340
    62d0:	19400536 	bltu	r3,r5,62e8 <_free_r+0x2d4>
    62d4:	100ad3fa 	srli	r5,r2,15
    62d8:	28c01e04 	addi	r3,r5,120
    62dc:	18c7883a 	add	r3,r3,r3
    62e0:	29401dc4 	addi	r5,r5,119
    62e4:	003f9506 	br	613c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700613c>
    62e8:	00c15504 	movi	r3,1364
    62ec:	19400536 	bltu	r3,r5,6304 <_free_r+0x2f0>
    62f0:	100ad4ba 	srli	r5,r2,18
    62f4:	28c01f44 	addi	r3,r5,125
    62f8:	18c7883a 	add	r3,r3,r3
    62fc:	29401f04 	addi	r5,r5,124
    6300:	003f8e06 	br	613c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700613c>
    6304:	00c03f84 	movi	r3,254
    6308:	01401f84 	movi	r5,126
    630c:	003f8b06 	br	613c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700613c>
    6310:	10c00054 	ori	r3,r2,1
    6314:	30c00115 	stw	r3,4(r6)
    6318:	308d883a 	add	r6,r6,r2
    631c:	30800015 	stw	r2,0(r6)
    6320:	003f7806 	br	6104 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006104>

00006324 <__sfvwrite_r>:
    6324:	30800217 	ldw	r2,8(r6)
    6328:	10006726 	beq	r2,zero,64c8 <__sfvwrite_r+0x1a4>
    632c:	28c0030b 	ldhu	r3,12(r5)
    6330:	defff404 	addi	sp,sp,-48
    6334:	dd400715 	stw	r21,28(sp)
    6338:	dd000615 	stw	r20,24(sp)
    633c:	dc000215 	stw	r16,8(sp)
    6340:	dfc00b15 	stw	ra,44(sp)
    6344:	df000a15 	stw	fp,40(sp)
    6348:	ddc00915 	stw	r23,36(sp)
    634c:	dd800815 	stw	r22,32(sp)
    6350:	dcc00515 	stw	r19,20(sp)
    6354:	dc800415 	stw	r18,16(sp)
    6358:	dc400315 	stw	r17,12(sp)
    635c:	1880020c 	andi	r2,r3,8
    6360:	2821883a 	mov	r16,r5
    6364:	202b883a 	mov	r21,r4
    6368:	3029883a 	mov	r20,r6
    636c:	10002726 	beq	r2,zero,640c <__sfvwrite_r+0xe8>
    6370:	28800417 	ldw	r2,16(r5)
    6374:	10002526 	beq	r2,zero,640c <__sfvwrite_r+0xe8>
    6378:	1880008c 	andi	r2,r3,2
    637c:	a4400017 	ldw	r17,0(r20)
    6380:	10002a26 	beq	r2,zero,642c <__sfvwrite_r+0x108>
    6384:	05a00034 	movhi	r22,32768
    6388:	0027883a 	mov	r19,zero
    638c:	0025883a 	mov	r18,zero
    6390:	b5bf0004 	addi	r22,r22,-1024
    6394:	980d883a 	mov	r6,r19
    6398:	a809883a 	mov	r4,r21
    639c:	90004626 	beq	r18,zero,64b8 <__sfvwrite_r+0x194>
    63a0:	900f883a 	mov	r7,r18
    63a4:	b480022e 	bgeu	r22,r18,63b0 <__sfvwrite_r+0x8c>
    63a8:	01e00034 	movhi	r7,32768
    63ac:	39ff0004 	addi	r7,r7,-1024
    63b0:	80800917 	ldw	r2,36(r16)
    63b4:	81400717 	ldw	r5,28(r16)
    63b8:	103ee83a 	callr	r2
    63bc:	0080570e 	bge	zero,r2,651c <__sfvwrite_r+0x1f8>
    63c0:	a0c00217 	ldw	r3,8(r20)
    63c4:	98a7883a 	add	r19,r19,r2
    63c8:	90a5c83a 	sub	r18,r18,r2
    63cc:	1885c83a 	sub	r2,r3,r2
    63d0:	a0800215 	stw	r2,8(r20)
    63d4:	103fef1e 	bne	r2,zero,6394 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006394>
    63d8:	0005883a 	mov	r2,zero
    63dc:	dfc00b17 	ldw	ra,44(sp)
    63e0:	df000a17 	ldw	fp,40(sp)
    63e4:	ddc00917 	ldw	r23,36(sp)
    63e8:	dd800817 	ldw	r22,32(sp)
    63ec:	dd400717 	ldw	r21,28(sp)
    63f0:	dd000617 	ldw	r20,24(sp)
    63f4:	dcc00517 	ldw	r19,20(sp)
    63f8:	dc800417 	ldw	r18,16(sp)
    63fc:	dc400317 	ldw	r17,12(sp)
    6400:	dc000217 	ldw	r16,8(sp)
    6404:	dec00c04 	addi	sp,sp,48
    6408:	f800283a 	ret
    640c:	800b883a 	mov	r5,r16
    6410:	a809883a 	mov	r4,r21
    6414:	0003ecc0 	call	3ecc <__swsetup_r>
    6418:	1000eb1e 	bne	r2,zero,67c8 <__sfvwrite_r+0x4a4>
    641c:	80c0030b 	ldhu	r3,12(r16)
    6420:	a4400017 	ldw	r17,0(r20)
    6424:	1880008c 	andi	r2,r3,2
    6428:	103fd61e 	bne	r2,zero,6384 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006384>
    642c:	1880004c 	andi	r2,r3,1
    6430:	10003f1e 	bne	r2,zero,6530 <__sfvwrite_r+0x20c>
    6434:	0039883a 	mov	fp,zero
    6438:	0025883a 	mov	r18,zero
    643c:	90001a26 	beq	r18,zero,64a8 <__sfvwrite_r+0x184>
    6440:	1880800c 	andi	r2,r3,512
    6444:	84c00217 	ldw	r19,8(r16)
    6448:	10002126 	beq	r2,zero,64d0 <__sfvwrite_r+0x1ac>
    644c:	982f883a 	mov	r23,r19
    6450:	94c09336 	bltu	r18,r19,66a0 <__sfvwrite_r+0x37c>
    6454:	1881200c 	andi	r2,r3,1152
    6458:	10009e1e 	bne	r2,zero,66d4 <__sfvwrite_r+0x3b0>
    645c:	81000017 	ldw	r4,0(r16)
    6460:	b80d883a 	mov	r6,r23
    6464:	e00b883a 	mov	r5,fp
    6468:	00076380 	call	7638 <memmove>
    646c:	80c00217 	ldw	r3,8(r16)
    6470:	81000017 	ldw	r4,0(r16)
    6474:	9005883a 	mov	r2,r18
    6478:	1ce7c83a 	sub	r19,r3,r19
    647c:	25cf883a 	add	r7,r4,r23
    6480:	84c00215 	stw	r19,8(r16)
    6484:	81c00015 	stw	r7,0(r16)
    6488:	a0c00217 	ldw	r3,8(r20)
    648c:	e0b9883a 	add	fp,fp,r2
    6490:	90a5c83a 	sub	r18,r18,r2
    6494:	18a7c83a 	sub	r19,r3,r2
    6498:	a4c00215 	stw	r19,8(r20)
    649c:	983fce26 	beq	r19,zero,63d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70063d8>
    64a0:	80c0030b 	ldhu	r3,12(r16)
    64a4:	903fe61e 	bne	r18,zero,6440 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006440>
    64a8:	8f000017 	ldw	fp,0(r17)
    64ac:	8c800117 	ldw	r18,4(r17)
    64b0:	8c400204 	addi	r17,r17,8
    64b4:	003fe106 	br	643c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700643c>
    64b8:	8cc00017 	ldw	r19,0(r17)
    64bc:	8c800117 	ldw	r18,4(r17)
    64c0:	8c400204 	addi	r17,r17,8
    64c4:	003fb306 	br	6394 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006394>
    64c8:	0005883a 	mov	r2,zero
    64cc:	f800283a 	ret
    64d0:	81000017 	ldw	r4,0(r16)
    64d4:	80800417 	ldw	r2,16(r16)
    64d8:	11005736 	bltu	r2,r4,6638 <__sfvwrite_r+0x314>
    64dc:	85c00517 	ldw	r23,20(r16)
    64e0:	95c05536 	bltu	r18,r23,6638 <__sfvwrite_r+0x314>
    64e4:	00a00034 	movhi	r2,32768
    64e8:	10bfffc4 	addi	r2,r2,-1
    64ec:	9009883a 	mov	r4,r18
    64f0:	1480012e 	bgeu	r2,r18,64f8 <__sfvwrite_r+0x1d4>
    64f4:	1009883a 	mov	r4,r2
    64f8:	b80b883a 	mov	r5,r23
    64fc:	000bb280 	call	bb28 <__divsi3>
    6500:	15cf383a 	mul	r7,r2,r23
    6504:	81400717 	ldw	r5,28(r16)
    6508:	80800917 	ldw	r2,36(r16)
    650c:	e00d883a 	mov	r6,fp
    6510:	a809883a 	mov	r4,r21
    6514:	103ee83a 	callr	r2
    6518:	00bfdb16 	blt	zero,r2,6488 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006488>
    651c:	8080030b 	ldhu	r2,12(r16)
    6520:	10801014 	ori	r2,r2,64
    6524:	8080030d 	sth	r2,12(r16)
    6528:	00bfffc4 	movi	r2,-1
    652c:	003fab06 	br	63dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70063dc>
    6530:	0027883a 	mov	r19,zero
    6534:	0011883a 	mov	r8,zero
    6538:	0039883a 	mov	fp,zero
    653c:	0025883a 	mov	r18,zero
    6540:	90001f26 	beq	r18,zero,65c0 <__sfvwrite_r+0x29c>
    6544:	40005a26 	beq	r8,zero,66b0 <__sfvwrite_r+0x38c>
    6548:	982d883a 	mov	r22,r19
    654c:	94c0012e 	bgeu	r18,r19,6554 <__sfvwrite_r+0x230>
    6550:	902d883a 	mov	r22,r18
    6554:	81000017 	ldw	r4,0(r16)
    6558:	80800417 	ldw	r2,16(r16)
    655c:	b02f883a 	mov	r23,r22
    6560:	81c00517 	ldw	r7,20(r16)
    6564:	1100032e 	bgeu	r2,r4,6574 <__sfvwrite_r+0x250>
    6568:	80c00217 	ldw	r3,8(r16)
    656c:	38c7883a 	add	r3,r7,r3
    6570:	1d801816 	blt	r3,r22,65d4 <__sfvwrite_r+0x2b0>
    6574:	b1c03e16 	blt	r22,r7,6670 <__sfvwrite_r+0x34c>
    6578:	80800917 	ldw	r2,36(r16)
    657c:	81400717 	ldw	r5,28(r16)
    6580:	e00d883a 	mov	r6,fp
    6584:	da000115 	stw	r8,4(sp)
    6588:	a809883a 	mov	r4,r21
    658c:	103ee83a 	callr	r2
    6590:	102f883a 	mov	r23,r2
    6594:	da000117 	ldw	r8,4(sp)
    6598:	00bfe00e 	bge	zero,r2,651c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700651c>
    659c:	9de7c83a 	sub	r19,r19,r23
    65a0:	98001f26 	beq	r19,zero,6620 <__sfvwrite_r+0x2fc>
    65a4:	a0800217 	ldw	r2,8(r20)
    65a8:	e5f9883a 	add	fp,fp,r23
    65ac:	95e5c83a 	sub	r18,r18,r23
    65b0:	15efc83a 	sub	r23,r2,r23
    65b4:	a5c00215 	stw	r23,8(r20)
    65b8:	b83f8726 	beq	r23,zero,63d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70063d8>
    65bc:	903fe11e 	bne	r18,zero,6544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006544>
    65c0:	8f000017 	ldw	fp,0(r17)
    65c4:	8c800117 	ldw	r18,4(r17)
    65c8:	0011883a 	mov	r8,zero
    65cc:	8c400204 	addi	r17,r17,8
    65d0:	003fdb06 	br	6540 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006540>
    65d4:	180d883a 	mov	r6,r3
    65d8:	e00b883a 	mov	r5,fp
    65dc:	da000115 	stw	r8,4(sp)
    65e0:	d8c00015 	stw	r3,0(sp)
    65e4:	00076380 	call	7638 <memmove>
    65e8:	d8c00017 	ldw	r3,0(sp)
    65ec:	80800017 	ldw	r2,0(r16)
    65f0:	800b883a 	mov	r5,r16
    65f4:	a809883a 	mov	r4,r21
    65f8:	10c5883a 	add	r2,r2,r3
    65fc:	80800015 	stw	r2,0(r16)
    6600:	d8c00015 	stw	r3,0(sp)
    6604:	0005ac40 	call	5ac4 <_fflush_r>
    6608:	d8c00017 	ldw	r3,0(sp)
    660c:	da000117 	ldw	r8,4(sp)
    6610:	103fc21e 	bne	r2,zero,651c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700651c>
    6614:	182f883a 	mov	r23,r3
    6618:	9de7c83a 	sub	r19,r19,r23
    661c:	983fe11e 	bne	r19,zero,65a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70065a4>
    6620:	800b883a 	mov	r5,r16
    6624:	a809883a 	mov	r4,r21
    6628:	0005ac40 	call	5ac4 <_fflush_r>
    662c:	103fbb1e 	bne	r2,zero,651c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700651c>
    6630:	0011883a 	mov	r8,zero
    6634:	003fdb06 	br	65a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70065a4>
    6638:	94c0012e 	bgeu	r18,r19,6640 <__sfvwrite_r+0x31c>
    663c:	9027883a 	mov	r19,r18
    6640:	980d883a 	mov	r6,r19
    6644:	e00b883a 	mov	r5,fp
    6648:	00076380 	call	7638 <memmove>
    664c:	80800217 	ldw	r2,8(r16)
    6650:	80c00017 	ldw	r3,0(r16)
    6654:	14c5c83a 	sub	r2,r2,r19
    6658:	1cc7883a 	add	r3,r3,r19
    665c:	80800215 	stw	r2,8(r16)
    6660:	80c00015 	stw	r3,0(r16)
    6664:	10004326 	beq	r2,zero,6774 <__sfvwrite_r+0x450>
    6668:	9805883a 	mov	r2,r19
    666c:	003f8606 	br	6488 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006488>
    6670:	b00d883a 	mov	r6,r22
    6674:	e00b883a 	mov	r5,fp
    6678:	da000115 	stw	r8,4(sp)
    667c:	00076380 	call	7638 <memmove>
    6680:	80800217 	ldw	r2,8(r16)
    6684:	80c00017 	ldw	r3,0(r16)
    6688:	da000117 	ldw	r8,4(sp)
    668c:	1585c83a 	sub	r2,r2,r22
    6690:	1dad883a 	add	r22,r3,r22
    6694:	80800215 	stw	r2,8(r16)
    6698:	85800015 	stw	r22,0(r16)
    669c:	003fbf06 	br	659c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700659c>
    66a0:	81000017 	ldw	r4,0(r16)
    66a4:	9027883a 	mov	r19,r18
    66a8:	902f883a 	mov	r23,r18
    66ac:	003f6c06 	br	6460 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006460>
    66b0:	900d883a 	mov	r6,r18
    66b4:	01400284 	movi	r5,10
    66b8:	e009883a 	mov	r4,fp
    66bc:	000740c0 	call	740c <memchr>
    66c0:	10003e26 	beq	r2,zero,67bc <__sfvwrite_r+0x498>
    66c4:	10800044 	addi	r2,r2,1
    66c8:	1727c83a 	sub	r19,r2,fp
    66cc:	02000044 	movi	r8,1
    66d0:	003f9d06 	br	6548 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006548>
    66d4:	80800517 	ldw	r2,20(r16)
    66d8:	81400417 	ldw	r5,16(r16)
    66dc:	81c00017 	ldw	r7,0(r16)
    66e0:	10a7883a 	add	r19,r2,r2
    66e4:	9885883a 	add	r2,r19,r2
    66e8:	1026d7fa 	srli	r19,r2,31
    66ec:	396dc83a 	sub	r22,r7,r5
    66f0:	b1000044 	addi	r4,r22,1
    66f4:	9885883a 	add	r2,r19,r2
    66f8:	1027d07a 	srai	r19,r2,1
    66fc:	2485883a 	add	r2,r4,r18
    6700:	980d883a 	mov	r6,r19
    6704:	9880022e 	bgeu	r19,r2,6710 <__sfvwrite_r+0x3ec>
    6708:	1027883a 	mov	r19,r2
    670c:	100d883a 	mov	r6,r2
    6710:	18c1000c 	andi	r3,r3,1024
    6714:	18001c26 	beq	r3,zero,6788 <__sfvwrite_r+0x464>
    6718:	300b883a 	mov	r5,r6
    671c:	a809883a 	mov	r4,r21
    6720:	0006c000 	call	6c00 <_malloc_r>
    6724:	102f883a 	mov	r23,r2
    6728:	10002926 	beq	r2,zero,67d0 <__sfvwrite_r+0x4ac>
    672c:	81400417 	ldw	r5,16(r16)
    6730:	b00d883a 	mov	r6,r22
    6734:	1009883a 	mov	r4,r2
    6738:	00074f00 	call	74f0 <memcpy>
    673c:	8080030b 	ldhu	r2,12(r16)
    6740:	00fedfc4 	movi	r3,-1153
    6744:	10c4703a 	and	r2,r2,r3
    6748:	10802014 	ori	r2,r2,128
    674c:	8080030d 	sth	r2,12(r16)
    6750:	bd89883a 	add	r4,r23,r22
    6754:	9d8fc83a 	sub	r7,r19,r22
    6758:	85c00415 	stw	r23,16(r16)
    675c:	84c00515 	stw	r19,20(r16)
    6760:	81000015 	stw	r4,0(r16)
    6764:	9027883a 	mov	r19,r18
    6768:	81c00215 	stw	r7,8(r16)
    676c:	902f883a 	mov	r23,r18
    6770:	003f3b06 	br	6460 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006460>
    6774:	800b883a 	mov	r5,r16
    6778:	a809883a 	mov	r4,r21
    677c:	0005ac40 	call	5ac4 <_fflush_r>
    6780:	103fb926 	beq	r2,zero,6668 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006668>
    6784:	003f6506 	br	651c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700651c>
    6788:	a809883a 	mov	r4,r21
    678c:	00088b80 	call	88b8 <_realloc_r>
    6790:	102f883a 	mov	r23,r2
    6794:	103fee1e 	bne	r2,zero,6750 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006750>
    6798:	81400417 	ldw	r5,16(r16)
    679c:	a809883a 	mov	r4,r21
    67a0:	00060140 	call	6014 <_free_r>
    67a4:	8080030b 	ldhu	r2,12(r16)
    67a8:	00ffdfc4 	movi	r3,-129
    67ac:	1884703a 	and	r2,r3,r2
    67b0:	00c00304 	movi	r3,12
    67b4:	a8c00015 	stw	r3,0(r21)
    67b8:	003f5906 	br	6520 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006520>
    67bc:	94c00044 	addi	r19,r18,1
    67c0:	02000044 	movi	r8,1
    67c4:	003f6006 	br	6548 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006548>
    67c8:	00bfffc4 	movi	r2,-1
    67cc:	003f0306 	br	63dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70063dc>
    67d0:	00800304 	movi	r2,12
    67d4:	a8800015 	stw	r2,0(r21)
    67d8:	8080030b 	ldhu	r2,12(r16)
    67dc:	003f5006 	br	6520 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006520>

000067e0 <_fwalk>:
    67e0:	defff704 	addi	sp,sp,-36
    67e4:	dd000415 	stw	r20,16(sp)
    67e8:	dfc00815 	stw	ra,32(sp)
    67ec:	ddc00715 	stw	r23,28(sp)
    67f0:	dd800615 	stw	r22,24(sp)
    67f4:	dd400515 	stw	r21,20(sp)
    67f8:	dcc00315 	stw	r19,12(sp)
    67fc:	dc800215 	stw	r18,8(sp)
    6800:	dc400115 	stw	r17,4(sp)
    6804:	dc000015 	stw	r16,0(sp)
    6808:	2500b804 	addi	r20,r4,736
    680c:	a0002326 	beq	r20,zero,689c <_fwalk+0xbc>
    6810:	282b883a 	mov	r21,r5
    6814:	002f883a 	mov	r23,zero
    6818:	05800044 	movi	r22,1
    681c:	04ffffc4 	movi	r19,-1
    6820:	a4400117 	ldw	r17,4(r20)
    6824:	a4800217 	ldw	r18,8(r20)
    6828:	8c7fffc4 	addi	r17,r17,-1
    682c:	88000d16 	blt	r17,zero,6864 <_fwalk+0x84>
    6830:	94000304 	addi	r16,r18,12
    6834:	94800384 	addi	r18,r18,14
    6838:	8080000b 	ldhu	r2,0(r16)
    683c:	8c7fffc4 	addi	r17,r17,-1
    6840:	813ffd04 	addi	r4,r16,-12
    6844:	b080042e 	bgeu	r22,r2,6858 <_fwalk+0x78>
    6848:	9080000f 	ldh	r2,0(r18)
    684c:	14c00226 	beq	r2,r19,6858 <_fwalk+0x78>
    6850:	a83ee83a 	callr	r21
    6854:	b8aeb03a 	or	r23,r23,r2
    6858:	84001a04 	addi	r16,r16,104
    685c:	94801a04 	addi	r18,r18,104
    6860:	8cfff51e 	bne	r17,r19,6838 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006838>
    6864:	a5000017 	ldw	r20,0(r20)
    6868:	a03fed1e 	bne	r20,zero,6820 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006820>
    686c:	b805883a 	mov	r2,r23
    6870:	dfc00817 	ldw	ra,32(sp)
    6874:	ddc00717 	ldw	r23,28(sp)
    6878:	dd800617 	ldw	r22,24(sp)
    687c:	dd400517 	ldw	r21,20(sp)
    6880:	dd000417 	ldw	r20,16(sp)
    6884:	dcc00317 	ldw	r19,12(sp)
    6888:	dc800217 	ldw	r18,8(sp)
    688c:	dc400117 	ldw	r17,4(sp)
    6890:	dc000017 	ldw	r16,0(sp)
    6894:	dec00904 	addi	sp,sp,36
    6898:	f800283a 	ret
    689c:	002f883a 	mov	r23,zero
    68a0:	003ff206 	br	686c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700686c>

000068a4 <_fwalk_reent>:
    68a4:	defff704 	addi	sp,sp,-36
    68a8:	dd000415 	stw	r20,16(sp)
    68ac:	dfc00815 	stw	ra,32(sp)
    68b0:	ddc00715 	stw	r23,28(sp)
    68b4:	dd800615 	stw	r22,24(sp)
    68b8:	dd400515 	stw	r21,20(sp)
    68bc:	dcc00315 	stw	r19,12(sp)
    68c0:	dc800215 	stw	r18,8(sp)
    68c4:	dc400115 	stw	r17,4(sp)
    68c8:	dc000015 	stw	r16,0(sp)
    68cc:	2500b804 	addi	r20,r4,736
    68d0:	a0002326 	beq	r20,zero,6960 <_fwalk_reent+0xbc>
    68d4:	282b883a 	mov	r21,r5
    68d8:	2027883a 	mov	r19,r4
    68dc:	002f883a 	mov	r23,zero
    68e0:	05800044 	movi	r22,1
    68e4:	04bfffc4 	movi	r18,-1
    68e8:	a4400117 	ldw	r17,4(r20)
    68ec:	a4000217 	ldw	r16,8(r20)
    68f0:	8c7fffc4 	addi	r17,r17,-1
    68f4:	88000c16 	blt	r17,zero,6928 <_fwalk_reent+0x84>
    68f8:	84000304 	addi	r16,r16,12
    68fc:	8080000b 	ldhu	r2,0(r16)
    6900:	8c7fffc4 	addi	r17,r17,-1
    6904:	817ffd04 	addi	r5,r16,-12
    6908:	b080052e 	bgeu	r22,r2,6920 <_fwalk_reent+0x7c>
    690c:	8080008f 	ldh	r2,2(r16)
    6910:	9809883a 	mov	r4,r19
    6914:	14800226 	beq	r2,r18,6920 <_fwalk_reent+0x7c>
    6918:	a83ee83a 	callr	r21
    691c:	b8aeb03a 	or	r23,r23,r2
    6920:	84001a04 	addi	r16,r16,104
    6924:	8cbff51e 	bne	r17,r18,68fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70068fc>
    6928:	a5000017 	ldw	r20,0(r20)
    692c:	a03fee1e 	bne	r20,zero,68e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70068e8>
    6930:	b805883a 	mov	r2,r23
    6934:	dfc00817 	ldw	ra,32(sp)
    6938:	ddc00717 	ldw	r23,28(sp)
    693c:	dd800617 	ldw	r22,24(sp)
    6940:	dd400517 	ldw	r21,20(sp)
    6944:	dd000417 	ldw	r20,16(sp)
    6948:	dcc00317 	ldw	r19,12(sp)
    694c:	dc800217 	ldw	r18,8(sp)
    6950:	dc400117 	ldw	r17,4(sp)
    6954:	dc000017 	ldw	r16,0(sp)
    6958:	dec00904 	addi	sp,sp,36
    695c:	f800283a 	ret
    6960:	002f883a 	mov	r23,zero
    6964:	003ff206 	br	6930 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006930>

00006968 <_setlocale_r>:
    6968:	30001b26 	beq	r6,zero,69d8 <_setlocale_r+0x70>
    696c:	014000b4 	movhi	r5,2
    6970:	defffe04 	addi	sp,sp,-8
    6974:	296bab04 	addi	r5,r5,-20820
    6978:	3009883a 	mov	r4,r6
    697c:	dc000015 	stw	r16,0(sp)
    6980:	dfc00115 	stw	ra,4(sp)
    6984:	3021883a 	mov	r16,r6
    6988:	00090200 	call	9020 <strcmp>
    698c:	1000061e 	bne	r2,zero,69a8 <_setlocale_r+0x40>
    6990:	008000b4 	movhi	r2,2
    6994:	10ab8c04 	addi	r2,r2,-20944
    6998:	dfc00117 	ldw	ra,4(sp)
    699c:	dc000017 	ldw	r16,0(sp)
    69a0:	dec00204 	addi	sp,sp,8
    69a4:	f800283a 	ret
    69a8:	014000b4 	movhi	r5,2
    69ac:	296b8c04 	addi	r5,r5,-20944
    69b0:	8009883a 	mov	r4,r16
    69b4:	00090200 	call	9020 <strcmp>
    69b8:	103ff526 	beq	r2,zero,6990 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006990>
    69bc:	014000b4 	movhi	r5,2
    69c0:	296b9604 	addi	r5,r5,-20904
    69c4:	8009883a 	mov	r4,r16
    69c8:	00090200 	call	9020 <strcmp>
    69cc:	103ff026 	beq	r2,zero,6990 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006990>
    69d0:	0005883a 	mov	r2,zero
    69d4:	003ff006 	br	6998 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006998>
    69d8:	008000b4 	movhi	r2,2
    69dc:	10ab8c04 	addi	r2,r2,-20944
    69e0:	f800283a 	ret

000069e4 <__locale_charset>:
    69e4:	008000b4 	movhi	r2,2
    69e8:	10ae3b04 	addi	r2,r2,-18196
    69ec:	f800283a 	ret

000069f0 <__locale_mb_cur_max>:
    69f0:	008000b4 	movhi	r2,2
    69f4:	10b49d04 	addi	r2,r2,-11660
    69f8:	10800017 	ldw	r2,0(r2)
    69fc:	f800283a 	ret

00006a00 <__locale_msgcharset>:
    6a00:	008000b4 	movhi	r2,2
    6a04:	10ae3304 	addi	r2,r2,-18228
    6a08:	f800283a 	ret

00006a0c <__locale_cjk_lang>:
    6a0c:	0005883a 	mov	r2,zero
    6a10:	f800283a 	ret

00006a14 <_localeconv_r>:
    6a14:	008000b4 	movhi	r2,2
    6a18:	10ae4304 	addi	r2,r2,-18164
    6a1c:	f800283a 	ret

00006a20 <setlocale>:
    6a20:	008000b4 	movhi	r2,2
    6a24:	10b49c04 	addi	r2,r2,-11664
    6a28:	280d883a 	mov	r6,r5
    6a2c:	200b883a 	mov	r5,r4
    6a30:	11000017 	ldw	r4,0(r2)
    6a34:	00069681 	jmpi	6968 <_setlocale_r>

00006a38 <localeconv>:
    6a38:	008000b4 	movhi	r2,2
    6a3c:	10ae4304 	addi	r2,r2,-18164
    6a40:	f800283a 	ret

00006a44 <__smakebuf_r>:
    6a44:	2880030b 	ldhu	r2,12(r5)
    6a48:	10c0008c 	andi	r3,r2,2
    6a4c:	1800411e 	bne	r3,zero,6b54 <__smakebuf_r+0x110>
    6a50:	deffec04 	addi	sp,sp,-80
    6a54:	dc000f15 	stw	r16,60(sp)
    6a58:	2821883a 	mov	r16,r5
    6a5c:	2940038f 	ldh	r5,14(r5)
    6a60:	dc401015 	stw	r17,64(sp)
    6a64:	dfc01315 	stw	ra,76(sp)
    6a68:	dcc01215 	stw	r19,72(sp)
    6a6c:	dc801115 	stw	r18,68(sp)
    6a70:	2023883a 	mov	r17,r4
    6a74:	28001c16 	blt	r5,zero,6ae8 <__smakebuf_r+0xa4>
    6a78:	d80d883a 	mov	r6,sp
    6a7c:	000abc80 	call	abc8 <_fstat_r>
    6a80:	10001816 	blt	r2,zero,6ae4 <__smakebuf_r+0xa0>
    6a84:	d8800117 	ldw	r2,4(sp)
    6a88:	00e00014 	movui	r3,32768
    6a8c:	10bc000c 	andi	r2,r2,61440
    6a90:	14c80020 	cmpeqi	r19,r2,8192
    6a94:	10c03726 	beq	r2,r3,6b74 <__smakebuf_r+0x130>
    6a98:	80c0030b 	ldhu	r3,12(r16)
    6a9c:	18c20014 	ori	r3,r3,2048
    6aa0:	80c0030d 	sth	r3,12(r16)
    6aa4:	00c80004 	movi	r3,8192
    6aa8:	10c0521e 	bne	r2,r3,6bf4 <__smakebuf_r+0x1b0>
    6aac:	8140038f 	ldh	r5,14(r16)
    6ab0:	8809883a 	mov	r4,r17
    6ab4:	000ac240 	call	ac24 <_isatty_r>
    6ab8:	10004c26 	beq	r2,zero,6bec <__smakebuf_r+0x1a8>
    6abc:	8080030b 	ldhu	r2,12(r16)
    6ac0:	80c010c4 	addi	r3,r16,67
    6ac4:	80c00015 	stw	r3,0(r16)
    6ac8:	10800054 	ori	r2,r2,1
    6acc:	8080030d 	sth	r2,12(r16)
    6ad0:	00800044 	movi	r2,1
    6ad4:	80c00415 	stw	r3,16(r16)
    6ad8:	80800515 	stw	r2,20(r16)
    6adc:	04810004 	movi	r18,1024
    6ae0:	00000706 	br	6b00 <__smakebuf_r+0xbc>
    6ae4:	8080030b 	ldhu	r2,12(r16)
    6ae8:	10c0200c 	andi	r3,r2,128
    6aec:	18001f1e 	bne	r3,zero,6b6c <__smakebuf_r+0x128>
    6af0:	04810004 	movi	r18,1024
    6af4:	10820014 	ori	r2,r2,2048
    6af8:	8080030d 	sth	r2,12(r16)
    6afc:	0027883a 	mov	r19,zero
    6b00:	900b883a 	mov	r5,r18
    6b04:	8809883a 	mov	r4,r17
    6b08:	0006c000 	call	6c00 <_malloc_r>
    6b0c:	10002c26 	beq	r2,zero,6bc0 <__smakebuf_r+0x17c>
    6b10:	80c0030b 	ldhu	r3,12(r16)
    6b14:	01000034 	movhi	r4,0
    6b18:	2116d604 	addi	r4,r4,23384
    6b1c:	89000f15 	stw	r4,60(r17)
    6b20:	18c02014 	ori	r3,r3,128
    6b24:	80c0030d 	sth	r3,12(r16)
    6b28:	80800015 	stw	r2,0(r16)
    6b2c:	80800415 	stw	r2,16(r16)
    6b30:	84800515 	stw	r18,20(r16)
    6b34:	98001a1e 	bne	r19,zero,6ba0 <__smakebuf_r+0x15c>
    6b38:	dfc01317 	ldw	ra,76(sp)
    6b3c:	dcc01217 	ldw	r19,72(sp)
    6b40:	dc801117 	ldw	r18,68(sp)
    6b44:	dc401017 	ldw	r17,64(sp)
    6b48:	dc000f17 	ldw	r16,60(sp)
    6b4c:	dec01404 	addi	sp,sp,80
    6b50:	f800283a 	ret
    6b54:	288010c4 	addi	r2,r5,67
    6b58:	28800015 	stw	r2,0(r5)
    6b5c:	28800415 	stw	r2,16(r5)
    6b60:	00800044 	movi	r2,1
    6b64:	28800515 	stw	r2,20(r5)
    6b68:	f800283a 	ret
    6b6c:	04801004 	movi	r18,64
    6b70:	003fe006 	br	6af4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006af4>
    6b74:	81000a17 	ldw	r4,40(r16)
    6b78:	00c00074 	movhi	r3,1
    6b7c:	18e3ef04 	addi	r3,r3,-28740
    6b80:	20ffc51e 	bne	r4,r3,6a98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a98>
    6b84:	8080030b 	ldhu	r2,12(r16)
    6b88:	04810004 	movi	r18,1024
    6b8c:	84801315 	stw	r18,76(r16)
    6b90:	1484b03a 	or	r2,r2,r18
    6b94:	8080030d 	sth	r2,12(r16)
    6b98:	0027883a 	mov	r19,zero
    6b9c:	003fd806 	br	6b00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006b00>
    6ba0:	8140038f 	ldh	r5,14(r16)
    6ba4:	8809883a 	mov	r4,r17
    6ba8:	000ac240 	call	ac24 <_isatty_r>
    6bac:	103fe226 	beq	r2,zero,6b38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006b38>
    6bb0:	8080030b 	ldhu	r2,12(r16)
    6bb4:	10800054 	ori	r2,r2,1
    6bb8:	8080030d 	sth	r2,12(r16)
    6bbc:	003fde06 	br	6b38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006b38>
    6bc0:	8080030b 	ldhu	r2,12(r16)
    6bc4:	10c0800c 	andi	r3,r2,512
    6bc8:	183fdb1e 	bne	r3,zero,6b38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006b38>
    6bcc:	10800094 	ori	r2,r2,2
    6bd0:	80c010c4 	addi	r3,r16,67
    6bd4:	8080030d 	sth	r2,12(r16)
    6bd8:	00800044 	movi	r2,1
    6bdc:	80c00015 	stw	r3,0(r16)
    6be0:	80c00415 	stw	r3,16(r16)
    6be4:	80800515 	stw	r2,20(r16)
    6be8:	003fd306 	br	6b38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006b38>
    6bec:	04810004 	movi	r18,1024
    6bf0:	003fc306 	br	6b00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006b00>
    6bf4:	0027883a 	mov	r19,zero
    6bf8:	04810004 	movi	r18,1024
    6bfc:	003fc006 	br	6b00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006b00>

00006c00 <_malloc_r>:
    6c00:	defff504 	addi	sp,sp,-44
    6c04:	dc800315 	stw	r18,12(sp)
    6c08:	dfc00a15 	stw	ra,40(sp)
    6c0c:	df000915 	stw	fp,36(sp)
    6c10:	ddc00815 	stw	r23,32(sp)
    6c14:	dd800715 	stw	r22,28(sp)
    6c18:	dd400615 	stw	r21,24(sp)
    6c1c:	dd000515 	stw	r20,20(sp)
    6c20:	dcc00415 	stw	r19,16(sp)
    6c24:	dc400215 	stw	r17,8(sp)
    6c28:	dc000115 	stw	r16,4(sp)
    6c2c:	288002c4 	addi	r2,r5,11
    6c30:	00c00584 	movi	r3,22
    6c34:	2025883a 	mov	r18,r4
    6c38:	18807f2e 	bgeu	r3,r2,6e38 <_malloc_r+0x238>
    6c3c:	047ffe04 	movi	r17,-8
    6c40:	1462703a 	and	r17,r2,r17
    6c44:	8800a316 	blt	r17,zero,6ed4 <_malloc_r+0x2d4>
    6c48:	8940a236 	bltu	r17,r5,6ed4 <_malloc_r+0x2d4>
    6c4c:	000eda40 	call	eda4 <__malloc_lock>
    6c50:	00807dc4 	movi	r2,503
    6c54:	1441e92e 	bgeu	r2,r17,73fc <_malloc_r+0x7fc>
    6c58:	8804d27a 	srli	r2,r17,9
    6c5c:	1000a126 	beq	r2,zero,6ee4 <_malloc_r+0x2e4>
    6c60:	00c00104 	movi	r3,4
    6c64:	18811e36 	bltu	r3,r2,70e0 <_malloc_r+0x4e0>
    6c68:	8804d1ba 	srli	r2,r17,6
    6c6c:	12000e44 	addi	r8,r2,57
    6c70:	11c00e04 	addi	r7,r2,56
    6c74:	4209883a 	add	r4,r8,r8
    6c78:	04c000b4 	movhi	r19,2
    6c7c:	2109883a 	add	r4,r4,r4
    6c80:	9cee5104 	addi	r19,r19,-18108
    6c84:	2109883a 	add	r4,r4,r4
    6c88:	9909883a 	add	r4,r19,r4
    6c8c:	24000117 	ldw	r16,4(r4)
    6c90:	213ffe04 	addi	r4,r4,-8
    6c94:	24009726 	beq	r4,r16,6ef4 <_malloc_r+0x2f4>
    6c98:	80800117 	ldw	r2,4(r16)
    6c9c:	01bfff04 	movi	r6,-4
    6ca0:	014003c4 	movi	r5,15
    6ca4:	1184703a 	and	r2,r2,r6
    6ca8:	1447c83a 	sub	r3,r2,r17
    6cac:	28c00716 	blt	r5,r3,6ccc <_malloc_r+0xcc>
    6cb0:	1800920e 	bge	r3,zero,6efc <_malloc_r+0x2fc>
    6cb4:	84000317 	ldw	r16,12(r16)
    6cb8:	24008e26 	beq	r4,r16,6ef4 <_malloc_r+0x2f4>
    6cbc:	80800117 	ldw	r2,4(r16)
    6cc0:	1184703a 	and	r2,r2,r6
    6cc4:	1447c83a 	sub	r3,r2,r17
    6cc8:	28fff90e 	bge	r5,r3,6cb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006cb0>
    6ccc:	3809883a 	mov	r4,r7
    6cd0:	018000b4 	movhi	r6,2
    6cd4:	9c000417 	ldw	r16,16(r19)
    6cd8:	31ae5104 	addi	r6,r6,-18108
    6cdc:	32000204 	addi	r8,r6,8
    6ce0:	82013426 	beq	r16,r8,71b4 <_malloc_r+0x5b4>
    6ce4:	80c00117 	ldw	r3,4(r16)
    6ce8:	00bfff04 	movi	r2,-4
    6cec:	188e703a 	and	r7,r3,r2
    6cf0:	3c45c83a 	sub	r2,r7,r17
    6cf4:	00c003c4 	movi	r3,15
    6cf8:	18811f16 	blt	r3,r2,7178 <_malloc_r+0x578>
    6cfc:	32000515 	stw	r8,20(r6)
    6d00:	32000415 	stw	r8,16(r6)
    6d04:	10007f0e 	bge	r2,zero,6f04 <_malloc_r+0x304>
    6d08:	00807fc4 	movi	r2,511
    6d0c:	11c0fd36 	bltu	r2,r7,7104 <_malloc_r+0x504>
    6d10:	3806d0fa 	srli	r3,r7,3
    6d14:	01c00044 	movi	r7,1
    6d18:	30800117 	ldw	r2,4(r6)
    6d1c:	19400044 	addi	r5,r3,1
    6d20:	294b883a 	add	r5,r5,r5
    6d24:	1807d0ba 	srai	r3,r3,2
    6d28:	294b883a 	add	r5,r5,r5
    6d2c:	294b883a 	add	r5,r5,r5
    6d30:	298b883a 	add	r5,r5,r6
    6d34:	38c6983a 	sll	r3,r7,r3
    6d38:	29c00017 	ldw	r7,0(r5)
    6d3c:	2a7ffe04 	addi	r9,r5,-8
    6d40:	1886b03a 	or	r3,r3,r2
    6d44:	82400315 	stw	r9,12(r16)
    6d48:	81c00215 	stw	r7,8(r16)
    6d4c:	30c00115 	stw	r3,4(r6)
    6d50:	2c000015 	stw	r16,0(r5)
    6d54:	3c000315 	stw	r16,12(r7)
    6d58:	2005d0ba 	srai	r2,r4,2
    6d5c:	01400044 	movi	r5,1
    6d60:	288a983a 	sll	r5,r5,r2
    6d64:	19406f36 	bltu	r3,r5,6f24 <_malloc_r+0x324>
    6d68:	28c4703a 	and	r2,r5,r3
    6d6c:	10000a1e 	bne	r2,zero,6d98 <_malloc_r+0x198>
    6d70:	00bfff04 	movi	r2,-4
    6d74:	294b883a 	add	r5,r5,r5
    6d78:	2088703a 	and	r4,r4,r2
    6d7c:	28c4703a 	and	r2,r5,r3
    6d80:	21000104 	addi	r4,r4,4
    6d84:	1000041e 	bne	r2,zero,6d98 <_malloc_r+0x198>
    6d88:	294b883a 	add	r5,r5,r5
    6d8c:	28c4703a 	and	r2,r5,r3
    6d90:	21000104 	addi	r4,r4,4
    6d94:	103ffc26 	beq	r2,zero,6d88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006d88>
    6d98:	02bfff04 	movi	r10,-4
    6d9c:	024003c4 	movi	r9,15
    6da0:	21800044 	addi	r6,r4,1
    6da4:	318d883a 	add	r6,r6,r6
    6da8:	318d883a 	add	r6,r6,r6
    6dac:	318d883a 	add	r6,r6,r6
    6db0:	998d883a 	add	r6,r19,r6
    6db4:	333ffe04 	addi	r12,r6,-8
    6db8:	2017883a 	mov	r11,r4
    6dbc:	31800104 	addi	r6,r6,4
    6dc0:	34000017 	ldw	r16,0(r6)
    6dc4:	31fffd04 	addi	r7,r6,-12
    6dc8:	81c0041e 	bne	r16,r7,6ddc <_malloc_r+0x1dc>
    6dcc:	0000fb06 	br	71bc <_malloc_r+0x5bc>
    6dd0:	1801030e 	bge	r3,zero,71e0 <_malloc_r+0x5e0>
    6dd4:	84000317 	ldw	r16,12(r16)
    6dd8:	81c0f826 	beq	r16,r7,71bc <_malloc_r+0x5bc>
    6ddc:	80800117 	ldw	r2,4(r16)
    6de0:	1284703a 	and	r2,r2,r10
    6de4:	1447c83a 	sub	r3,r2,r17
    6de8:	48fff90e 	bge	r9,r3,6dd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006dd0>
    6dec:	80800317 	ldw	r2,12(r16)
    6df0:	81000217 	ldw	r4,8(r16)
    6df4:	89400054 	ori	r5,r17,1
    6df8:	81400115 	stw	r5,4(r16)
    6dfc:	20800315 	stw	r2,12(r4)
    6e00:	11000215 	stw	r4,8(r2)
    6e04:	8463883a 	add	r17,r16,r17
    6e08:	9c400515 	stw	r17,20(r19)
    6e0c:	9c400415 	stw	r17,16(r19)
    6e10:	18800054 	ori	r2,r3,1
    6e14:	88800115 	stw	r2,4(r17)
    6e18:	8a000315 	stw	r8,12(r17)
    6e1c:	8a000215 	stw	r8,8(r17)
    6e20:	88e3883a 	add	r17,r17,r3
    6e24:	88c00015 	stw	r3,0(r17)
    6e28:	9009883a 	mov	r4,r18
    6e2c:	000eec40 	call	eec4 <__malloc_unlock>
    6e30:	80800204 	addi	r2,r16,8
    6e34:	00001b06 	br	6ea4 <_malloc_r+0x2a4>
    6e38:	04400404 	movi	r17,16
    6e3c:	89402536 	bltu	r17,r5,6ed4 <_malloc_r+0x2d4>
    6e40:	000eda40 	call	eda4 <__malloc_lock>
    6e44:	00800184 	movi	r2,6
    6e48:	01000084 	movi	r4,2
    6e4c:	04c000b4 	movhi	r19,2
    6e50:	1085883a 	add	r2,r2,r2
    6e54:	9cee5104 	addi	r19,r19,-18108
    6e58:	1085883a 	add	r2,r2,r2
    6e5c:	9885883a 	add	r2,r19,r2
    6e60:	14000117 	ldw	r16,4(r2)
    6e64:	10fffe04 	addi	r3,r2,-8
    6e68:	80c0d926 	beq	r16,r3,71d0 <_malloc_r+0x5d0>
    6e6c:	80c00117 	ldw	r3,4(r16)
    6e70:	81000317 	ldw	r4,12(r16)
    6e74:	00bfff04 	movi	r2,-4
    6e78:	1884703a 	and	r2,r3,r2
    6e7c:	81400217 	ldw	r5,8(r16)
    6e80:	8085883a 	add	r2,r16,r2
    6e84:	10c00117 	ldw	r3,4(r2)
    6e88:	29000315 	stw	r4,12(r5)
    6e8c:	21400215 	stw	r5,8(r4)
    6e90:	18c00054 	ori	r3,r3,1
    6e94:	10c00115 	stw	r3,4(r2)
    6e98:	9009883a 	mov	r4,r18
    6e9c:	000eec40 	call	eec4 <__malloc_unlock>
    6ea0:	80800204 	addi	r2,r16,8
    6ea4:	dfc00a17 	ldw	ra,40(sp)
    6ea8:	df000917 	ldw	fp,36(sp)
    6eac:	ddc00817 	ldw	r23,32(sp)
    6eb0:	dd800717 	ldw	r22,28(sp)
    6eb4:	dd400617 	ldw	r21,24(sp)
    6eb8:	dd000517 	ldw	r20,20(sp)
    6ebc:	dcc00417 	ldw	r19,16(sp)
    6ec0:	dc800317 	ldw	r18,12(sp)
    6ec4:	dc400217 	ldw	r17,8(sp)
    6ec8:	dc000117 	ldw	r16,4(sp)
    6ecc:	dec00b04 	addi	sp,sp,44
    6ed0:	f800283a 	ret
    6ed4:	00800304 	movi	r2,12
    6ed8:	90800015 	stw	r2,0(r18)
    6edc:	0005883a 	mov	r2,zero
    6ee0:	003ff006 	br	6ea4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006ea4>
    6ee4:	01002004 	movi	r4,128
    6ee8:	02001004 	movi	r8,64
    6eec:	01c00fc4 	movi	r7,63
    6ef0:	003f6106 	br	6c78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006c78>
    6ef4:	4009883a 	mov	r4,r8
    6ef8:	003f7506 	br	6cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006cd0>
    6efc:	81000317 	ldw	r4,12(r16)
    6f00:	003fde06 	br	6e7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006e7c>
    6f04:	81c5883a 	add	r2,r16,r7
    6f08:	11400117 	ldw	r5,4(r2)
    6f0c:	9009883a 	mov	r4,r18
    6f10:	29400054 	ori	r5,r5,1
    6f14:	11400115 	stw	r5,4(r2)
    6f18:	000eec40 	call	eec4 <__malloc_unlock>
    6f1c:	80800204 	addi	r2,r16,8
    6f20:	003fe006 	br	6ea4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006ea4>
    6f24:	9c000217 	ldw	r16,8(r19)
    6f28:	00bfff04 	movi	r2,-4
    6f2c:	85800117 	ldw	r22,4(r16)
    6f30:	b0ac703a 	and	r22,r22,r2
    6f34:	b4400336 	bltu	r22,r17,6f44 <_malloc_r+0x344>
    6f38:	b445c83a 	sub	r2,r22,r17
    6f3c:	00c003c4 	movi	r3,15
    6f40:	18805d16 	blt	r3,r2,70b8 <_malloc_r+0x4b8>
    6f44:	05c000b4 	movhi	r23,2
    6f48:	008000b4 	movhi	r2,2
    6f4c:	10bcc904 	addi	r2,r2,-3292
    6f50:	bdf49e04 	addi	r23,r23,-11656
    6f54:	15400017 	ldw	r21,0(r2)
    6f58:	b8c00017 	ldw	r3,0(r23)
    6f5c:	00bfffc4 	movi	r2,-1
    6f60:	858d883a 	add	r6,r16,r22
    6f64:	8d6b883a 	add	r21,r17,r21
    6f68:	1880ea26 	beq	r3,r2,7314 <_malloc_r+0x714>
    6f6c:	ad4403c4 	addi	r21,r21,4111
    6f70:	00bc0004 	movi	r2,-4096
    6f74:	a8aa703a 	and	r21,r21,r2
    6f78:	a80b883a 	mov	r5,r21
    6f7c:	9009883a 	mov	r4,r18
    6f80:	d9800015 	stw	r6,0(sp)
    6f84:	0008e900 	call	8e90 <_sbrk_r>
    6f88:	1029883a 	mov	r20,r2
    6f8c:	00bfffc4 	movi	r2,-1
    6f90:	d9800017 	ldw	r6,0(sp)
    6f94:	a080e826 	beq	r20,r2,7338 <_malloc_r+0x738>
    6f98:	a180a636 	bltu	r20,r6,7234 <_malloc_r+0x634>
    6f9c:	070000b4 	movhi	fp,2
    6fa0:	e73ceb04 	addi	fp,fp,-3156
    6fa4:	e0800017 	ldw	r2,0(fp)
    6fa8:	a887883a 	add	r3,r21,r2
    6fac:	e0c00015 	stw	r3,0(fp)
    6fb0:	3500e626 	beq	r6,r20,734c <_malloc_r+0x74c>
    6fb4:	b9000017 	ldw	r4,0(r23)
    6fb8:	00bfffc4 	movi	r2,-1
    6fbc:	2080ee26 	beq	r4,r2,7378 <_malloc_r+0x778>
    6fc0:	a185c83a 	sub	r2,r20,r6
    6fc4:	10c5883a 	add	r2,r2,r3
    6fc8:	e0800015 	stw	r2,0(fp)
    6fcc:	a0c001cc 	andi	r3,r20,7
    6fd0:	1800bc26 	beq	r3,zero,72c4 <_malloc_r+0x6c4>
    6fd4:	a0e9c83a 	sub	r20,r20,r3
    6fd8:	00840204 	movi	r2,4104
    6fdc:	a5000204 	addi	r20,r20,8
    6fe0:	10c7c83a 	sub	r3,r2,r3
    6fe4:	a545883a 	add	r2,r20,r21
    6fe8:	1083ffcc 	andi	r2,r2,4095
    6fec:	18abc83a 	sub	r21,r3,r2
    6ff0:	a80b883a 	mov	r5,r21
    6ff4:	9009883a 	mov	r4,r18
    6ff8:	0008e900 	call	8e90 <_sbrk_r>
    6ffc:	00ffffc4 	movi	r3,-1
    7000:	10c0e126 	beq	r2,r3,7388 <_malloc_r+0x788>
    7004:	1505c83a 	sub	r2,r2,r20
    7008:	1545883a 	add	r2,r2,r21
    700c:	10800054 	ori	r2,r2,1
    7010:	e0c00017 	ldw	r3,0(fp)
    7014:	9d000215 	stw	r20,8(r19)
    7018:	a0800115 	stw	r2,4(r20)
    701c:	a8c7883a 	add	r3,r21,r3
    7020:	e0c00015 	stw	r3,0(fp)
    7024:	84c00e26 	beq	r16,r19,7060 <_malloc_r+0x460>
    7028:	018003c4 	movi	r6,15
    702c:	3580a72e 	bgeu	r6,r22,72cc <_malloc_r+0x6cc>
    7030:	81400117 	ldw	r5,4(r16)
    7034:	013ffe04 	movi	r4,-8
    7038:	b0bffd04 	addi	r2,r22,-12
    703c:	1104703a 	and	r2,r2,r4
    7040:	2900004c 	andi	r4,r5,1
    7044:	2088b03a 	or	r4,r4,r2
    7048:	81000115 	stw	r4,4(r16)
    704c:	01400144 	movi	r5,5
    7050:	8089883a 	add	r4,r16,r2
    7054:	21400115 	stw	r5,4(r4)
    7058:	21400215 	stw	r5,8(r4)
    705c:	3080cd36 	bltu	r6,r2,7394 <_malloc_r+0x794>
    7060:	008000b4 	movhi	r2,2
    7064:	10bcc804 	addi	r2,r2,-3296
    7068:	11000017 	ldw	r4,0(r2)
    706c:	20c0012e 	bgeu	r4,r3,7074 <_malloc_r+0x474>
    7070:	10c00015 	stw	r3,0(r2)
    7074:	008000b4 	movhi	r2,2
    7078:	10bcc704 	addi	r2,r2,-3300
    707c:	11000017 	ldw	r4,0(r2)
    7080:	9c000217 	ldw	r16,8(r19)
    7084:	20c0012e 	bgeu	r4,r3,708c <_malloc_r+0x48c>
    7088:	10c00015 	stw	r3,0(r2)
    708c:	80c00117 	ldw	r3,4(r16)
    7090:	00bfff04 	movi	r2,-4
    7094:	1886703a 	and	r3,r3,r2
    7098:	1c45c83a 	sub	r2,r3,r17
    709c:	1c400236 	bltu	r3,r17,70a8 <_malloc_r+0x4a8>
    70a0:	00c003c4 	movi	r3,15
    70a4:	18800416 	blt	r3,r2,70b8 <_malloc_r+0x4b8>
    70a8:	9009883a 	mov	r4,r18
    70ac:	000eec40 	call	eec4 <__malloc_unlock>
    70b0:	0005883a 	mov	r2,zero
    70b4:	003f7b06 	br	6ea4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006ea4>
    70b8:	88c00054 	ori	r3,r17,1
    70bc:	80c00115 	stw	r3,4(r16)
    70c0:	8463883a 	add	r17,r16,r17
    70c4:	10800054 	ori	r2,r2,1
    70c8:	9c400215 	stw	r17,8(r19)
    70cc:	88800115 	stw	r2,4(r17)
    70d0:	9009883a 	mov	r4,r18
    70d4:	000eec40 	call	eec4 <__malloc_unlock>
    70d8:	80800204 	addi	r2,r16,8
    70dc:	003f7106 	br	6ea4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006ea4>
    70e0:	00c00504 	movi	r3,20
    70e4:	18804a2e 	bgeu	r3,r2,7210 <_malloc_r+0x610>
    70e8:	00c01504 	movi	r3,84
    70ec:	18806e36 	bltu	r3,r2,72a8 <_malloc_r+0x6a8>
    70f0:	8804d33a 	srli	r2,r17,12
    70f4:	12001bc4 	addi	r8,r2,111
    70f8:	11c01b84 	addi	r7,r2,110
    70fc:	4209883a 	add	r4,r8,r8
    7100:	003edd06 	br	6c78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006c78>
    7104:	3804d27a 	srli	r2,r7,9
    7108:	00c00104 	movi	r3,4
    710c:	1880442e 	bgeu	r3,r2,7220 <_malloc_r+0x620>
    7110:	00c00504 	movi	r3,20
    7114:	18808136 	bltu	r3,r2,731c <_malloc_r+0x71c>
    7118:	11401704 	addi	r5,r2,92
    711c:	10c016c4 	addi	r3,r2,91
    7120:	294b883a 	add	r5,r5,r5
    7124:	294b883a 	add	r5,r5,r5
    7128:	294b883a 	add	r5,r5,r5
    712c:	994b883a 	add	r5,r19,r5
    7130:	28800017 	ldw	r2,0(r5)
    7134:	018000b4 	movhi	r6,2
    7138:	297ffe04 	addi	r5,r5,-8
    713c:	31ae5104 	addi	r6,r6,-18108
    7140:	28806526 	beq	r5,r2,72d8 <_malloc_r+0x6d8>
    7144:	01bfff04 	movi	r6,-4
    7148:	10c00117 	ldw	r3,4(r2)
    714c:	1986703a 	and	r3,r3,r6
    7150:	38c0022e 	bgeu	r7,r3,715c <_malloc_r+0x55c>
    7154:	10800217 	ldw	r2,8(r2)
    7158:	28bffb1e 	bne	r5,r2,7148 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007148>
    715c:	11400317 	ldw	r5,12(r2)
    7160:	98c00117 	ldw	r3,4(r19)
    7164:	81400315 	stw	r5,12(r16)
    7168:	80800215 	stw	r2,8(r16)
    716c:	2c000215 	stw	r16,8(r5)
    7170:	14000315 	stw	r16,12(r2)
    7174:	003ef806 	br	6d58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006d58>
    7178:	88c00054 	ori	r3,r17,1
    717c:	80c00115 	stw	r3,4(r16)
    7180:	8463883a 	add	r17,r16,r17
    7184:	34400515 	stw	r17,20(r6)
    7188:	34400415 	stw	r17,16(r6)
    718c:	10c00054 	ori	r3,r2,1
    7190:	8a000315 	stw	r8,12(r17)
    7194:	8a000215 	stw	r8,8(r17)
    7198:	88c00115 	stw	r3,4(r17)
    719c:	88a3883a 	add	r17,r17,r2
    71a0:	88800015 	stw	r2,0(r17)
    71a4:	9009883a 	mov	r4,r18
    71a8:	000eec40 	call	eec4 <__malloc_unlock>
    71ac:	80800204 	addi	r2,r16,8
    71b0:	003f3c06 	br	6ea4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006ea4>
    71b4:	30c00117 	ldw	r3,4(r6)
    71b8:	003ee706 	br	6d58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006d58>
    71bc:	5ac00044 	addi	r11,r11,1
    71c0:	588000cc 	andi	r2,r11,3
    71c4:	31800204 	addi	r6,r6,8
    71c8:	103efd1e 	bne	r2,zero,6dc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006dc0>
    71cc:	00002406 	br	7260 <_malloc_r+0x660>
    71d0:	14000317 	ldw	r16,12(r2)
    71d4:	143f251e 	bne	r2,r16,6e6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006e6c>
    71d8:	21000084 	addi	r4,r4,2
    71dc:	003ebc06 	br	6cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006cd0>
    71e0:	8085883a 	add	r2,r16,r2
    71e4:	10c00117 	ldw	r3,4(r2)
    71e8:	81000317 	ldw	r4,12(r16)
    71ec:	81400217 	ldw	r5,8(r16)
    71f0:	18c00054 	ori	r3,r3,1
    71f4:	10c00115 	stw	r3,4(r2)
    71f8:	29000315 	stw	r4,12(r5)
    71fc:	21400215 	stw	r5,8(r4)
    7200:	9009883a 	mov	r4,r18
    7204:	000eec40 	call	eec4 <__malloc_unlock>
    7208:	80800204 	addi	r2,r16,8
    720c:	003f2506 	br	6ea4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006ea4>
    7210:	12001704 	addi	r8,r2,92
    7214:	11c016c4 	addi	r7,r2,91
    7218:	4209883a 	add	r4,r8,r8
    721c:	003e9606 	br	6c78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006c78>
    7220:	3804d1ba 	srli	r2,r7,6
    7224:	11400e44 	addi	r5,r2,57
    7228:	10c00e04 	addi	r3,r2,56
    722c:	294b883a 	add	r5,r5,r5
    7230:	003fbc06 	br	7124 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007124>
    7234:	84ff5926 	beq	r16,r19,6f9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006f9c>
    7238:	008000b4 	movhi	r2,2
    723c:	10ae5104 	addi	r2,r2,-18108
    7240:	14000217 	ldw	r16,8(r2)
    7244:	00bfff04 	movi	r2,-4
    7248:	80c00117 	ldw	r3,4(r16)
    724c:	1886703a 	and	r3,r3,r2
    7250:	003f9106 	br	7098 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007098>
    7254:	60800217 	ldw	r2,8(r12)
    7258:	213fffc4 	addi	r4,r4,-1
    725c:	1300651e 	bne	r2,r12,73f4 <_malloc_r+0x7f4>
    7260:	208000cc 	andi	r2,r4,3
    7264:	633ffe04 	addi	r12,r12,-8
    7268:	103ffa1e 	bne	r2,zero,7254 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007254>
    726c:	98800117 	ldw	r2,4(r19)
    7270:	0146303a 	nor	r3,zero,r5
    7274:	1884703a 	and	r2,r3,r2
    7278:	98800115 	stw	r2,4(r19)
    727c:	294b883a 	add	r5,r5,r5
    7280:	117f2836 	bltu	r2,r5,6f24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006f24>
    7284:	283f2726 	beq	r5,zero,6f24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006f24>
    7288:	2886703a 	and	r3,r5,r2
    728c:	5809883a 	mov	r4,r11
    7290:	183ec31e 	bne	r3,zero,6da0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006da0>
    7294:	294b883a 	add	r5,r5,r5
    7298:	2886703a 	and	r3,r5,r2
    729c:	21000104 	addi	r4,r4,4
    72a0:	183ffc26 	beq	r3,zero,7294 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007294>
    72a4:	003ebe06 	br	6da0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006da0>
    72a8:	00c05504 	movi	r3,340
    72ac:	18801236 	bltu	r3,r2,72f8 <_malloc_r+0x6f8>
    72b0:	8804d3fa 	srli	r2,r17,15
    72b4:	12001e04 	addi	r8,r2,120
    72b8:	11c01dc4 	addi	r7,r2,119
    72bc:	4209883a 	add	r4,r8,r8
    72c0:	003e6d06 	br	6c78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006c78>
    72c4:	00c40004 	movi	r3,4096
    72c8:	003f4606 	br	6fe4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006fe4>
    72cc:	00800044 	movi	r2,1
    72d0:	a0800115 	stw	r2,4(r20)
    72d4:	003f7406 	br	70a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70070a8>
    72d8:	1805d0ba 	srai	r2,r3,2
    72dc:	01c00044 	movi	r7,1
    72e0:	30c00117 	ldw	r3,4(r6)
    72e4:	388e983a 	sll	r7,r7,r2
    72e8:	2805883a 	mov	r2,r5
    72ec:	38c6b03a 	or	r3,r7,r3
    72f0:	30c00115 	stw	r3,4(r6)
    72f4:	003f9b06 	br	7164 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007164>
    72f8:	00c15504 	movi	r3,1364
    72fc:	18801a36 	bltu	r3,r2,7368 <_malloc_r+0x768>
    7300:	8804d4ba 	srli	r2,r17,18
    7304:	12001f44 	addi	r8,r2,125
    7308:	11c01f04 	addi	r7,r2,124
    730c:	4209883a 	add	r4,r8,r8
    7310:	003e5906 	br	6c78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006c78>
    7314:	ad400404 	addi	r21,r21,16
    7318:	003f1706 	br	6f78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006f78>
    731c:	00c01504 	movi	r3,84
    7320:	18802336 	bltu	r3,r2,73b0 <_malloc_r+0x7b0>
    7324:	3804d33a 	srli	r2,r7,12
    7328:	11401bc4 	addi	r5,r2,111
    732c:	10c01b84 	addi	r3,r2,110
    7330:	294b883a 	add	r5,r5,r5
    7334:	003f7b06 	br	7124 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007124>
    7338:	9c000217 	ldw	r16,8(r19)
    733c:	00bfff04 	movi	r2,-4
    7340:	80c00117 	ldw	r3,4(r16)
    7344:	1886703a 	and	r3,r3,r2
    7348:	003f5306 	br	7098 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007098>
    734c:	3083ffcc 	andi	r2,r6,4095
    7350:	103f181e 	bne	r2,zero,6fb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006fb4>
    7354:	99000217 	ldw	r4,8(r19)
    7358:	b545883a 	add	r2,r22,r21
    735c:	10800054 	ori	r2,r2,1
    7360:	20800115 	stw	r2,4(r4)
    7364:	003f3e06 	br	7060 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007060>
    7368:	01003f84 	movi	r4,254
    736c:	02001fc4 	movi	r8,127
    7370:	01c01f84 	movi	r7,126
    7374:	003e4006 	br	6c78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006c78>
    7378:	008000b4 	movhi	r2,2
    737c:	10b49e04 	addi	r2,r2,-11656
    7380:	15000015 	stw	r20,0(r2)
    7384:	003f1106 	br	6fcc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006fcc>
    7388:	00800044 	movi	r2,1
    738c:	002b883a 	mov	r21,zero
    7390:	003f1f06 	br	7010 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007010>
    7394:	81400204 	addi	r5,r16,8
    7398:	9009883a 	mov	r4,r18
    739c:	00060140 	call	6014 <_free_r>
    73a0:	008000b4 	movhi	r2,2
    73a4:	10bceb04 	addi	r2,r2,-3156
    73a8:	10c00017 	ldw	r3,0(r2)
    73ac:	003f2c06 	br	7060 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007060>
    73b0:	00c05504 	movi	r3,340
    73b4:	18800536 	bltu	r3,r2,73cc <_malloc_r+0x7cc>
    73b8:	3804d3fa 	srli	r2,r7,15
    73bc:	11401e04 	addi	r5,r2,120
    73c0:	10c01dc4 	addi	r3,r2,119
    73c4:	294b883a 	add	r5,r5,r5
    73c8:	003f5606 	br	7124 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007124>
    73cc:	00c15504 	movi	r3,1364
    73d0:	18800536 	bltu	r3,r2,73e8 <_malloc_r+0x7e8>
    73d4:	3804d4ba 	srli	r2,r7,18
    73d8:	11401f44 	addi	r5,r2,125
    73dc:	10c01f04 	addi	r3,r2,124
    73e0:	294b883a 	add	r5,r5,r5
    73e4:	003f4f06 	br	7124 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007124>
    73e8:	01403f84 	movi	r5,254
    73ec:	00c01f84 	movi	r3,126
    73f0:	003f4c06 	br	7124 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007124>
    73f4:	98800117 	ldw	r2,4(r19)
    73f8:	003fa006 	br	727c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700727c>
    73fc:	8808d0fa 	srli	r4,r17,3
    7400:	20800044 	addi	r2,r4,1
    7404:	1085883a 	add	r2,r2,r2
    7408:	003e9006 	br	6e4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006e4c>

0000740c <memchr>:
    740c:	208000cc 	andi	r2,r4,3
    7410:	280f883a 	mov	r7,r5
    7414:	10003426 	beq	r2,zero,74e8 <memchr+0xdc>
    7418:	30bfffc4 	addi	r2,r6,-1
    741c:	30001a26 	beq	r6,zero,7488 <memchr+0x7c>
    7420:	20c00003 	ldbu	r3,0(r4)
    7424:	29803fcc 	andi	r6,r5,255
    7428:	30c0051e 	bne	r6,r3,7440 <memchr+0x34>
    742c:	00001806 	br	7490 <memchr+0x84>
    7430:	10001526 	beq	r2,zero,7488 <memchr+0x7c>
    7434:	20c00003 	ldbu	r3,0(r4)
    7438:	10bfffc4 	addi	r2,r2,-1
    743c:	30c01426 	beq	r6,r3,7490 <memchr+0x84>
    7440:	21000044 	addi	r4,r4,1
    7444:	20c000cc 	andi	r3,r4,3
    7448:	183ff91e 	bne	r3,zero,7430 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007430>
    744c:	020000c4 	movi	r8,3
    7450:	40801136 	bltu	r8,r2,7498 <memchr+0x8c>
    7454:	10000c26 	beq	r2,zero,7488 <memchr+0x7c>
    7458:	20c00003 	ldbu	r3,0(r4)
    745c:	29403fcc 	andi	r5,r5,255
    7460:	28c00b26 	beq	r5,r3,7490 <memchr+0x84>
    7464:	20c00044 	addi	r3,r4,1
    7468:	39803fcc 	andi	r6,r7,255
    746c:	2089883a 	add	r4,r4,r2
    7470:	00000306 	br	7480 <memchr+0x74>
    7474:	18c00044 	addi	r3,r3,1
    7478:	197fffc3 	ldbu	r5,-1(r3)
    747c:	31400526 	beq	r6,r5,7494 <memchr+0x88>
    7480:	1805883a 	mov	r2,r3
    7484:	20fffb1e 	bne	r4,r3,7474 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007474>
    7488:	0005883a 	mov	r2,zero
    748c:	f800283a 	ret
    7490:	2005883a 	mov	r2,r4
    7494:	f800283a 	ret
    7498:	28c03fcc 	andi	r3,r5,255
    749c:	1812923a 	slli	r9,r3,8
    74a0:	02ffbff4 	movhi	r11,65279
    74a4:	02a02074 	movhi	r10,32897
    74a8:	48d2b03a 	or	r9,r9,r3
    74ac:	4806943a 	slli	r3,r9,16
    74b0:	5affbfc4 	addi	r11,r11,-257
    74b4:	52a02004 	addi	r10,r10,-32640
    74b8:	48d2b03a 	or	r9,r9,r3
    74bc:	20c00017 	ldw	r3,0(r4)
    74c0:	48c6f03a 	xor	r3,r9,r3
    74c4:	1acd883a 	add	r6,r3,r11
    74c8:	00c6303a 	nor	r3,zero,r3
    74cc:	30c6703a 	and	r3,r6,r3
    74d0:	1a86703a 	and	r3,r3,r10
    74d4:	183fe01e 	bne	r3,zero,7458 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007458>
    74d8:	10bfff04 	addi	r2,r2,-4
    74dc:	21000104 	addi	r4,r4,4
    74e0:	40bff636 	bltu	r8,r2,74bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70074bc>
    74e4:	003fdb06 	br	7454 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007454>
    74e8:	3005883a 	mov	r2,r6
    74ec:	003fd706 	br	744c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700744c>

000074f0 <memcpy>:
    74f0:	defffd04 	addi	sp,sp,-12
    74f4:	dfc00215 	stw	ra,8(sp)
    74f8:	dc400115 	stw	r17,4(sp)
    74fc:	dc000015 	stw	r16,0(sp)
    7500:	00c003c4 	movi	r3,15
    7504:	2005883a 	mov	r2,r4
    7508:	1980452e 	bgeu	r3,r6,7620 <memcpy+0x130>
    750c:	2906b03a 	or	r3,r5,r4
    7510:	18c000cc 	andi	r3,r3,3
    7514:	1800441e 	bne	r3,zero,7628 <memcpy+0x138>
    7518:	347ffc04 	addi	r17,r6,-16
    751c:	8822d13a 	srli	r17,r17,4
    7520:	28c00104 	addi	r3,r5,4
    7524:	23400104 	addi	r13,r4,4
    7528:	8820913a 	slli	r16,r17,4
    752c:	2b000204 	addi	r12,r5,8
    7530:	22c00204 	addi	r11,r4,8
    7534:	84000504 	addi	r16,r16,20
    7538:	2a800304 	addi	r10,r5,12
    753c:	22400304 	addi	r9,r4,12
    7540:	2c21883a 	add	r16,r5,r16
    7544:	2811883a 	mov	r8,r5
    7548:	200f883a 	mov	r7,r4
    754c:	41000017 	ldw	r4,0(r8)
    7550:	1fc00017 	ldw	ra,0(r3)
    7554:	63c00017 	ldw	r15,0(r12)
    7558:	39000015 	stw	r4,0(r7)
    755c:	53800017 	ldw	r14,0(r10)
    7560:	6fc00015 	stw	ra,0(r13)
    7564:	5bc00015 	stw	r15,0(r11)
    7568:	4b800015 	stw	r14,0(r9)
    756c:	18c00404 	addi	r3,r3,16
    7570:	39c00404 	addi	r7,r7,16
    7574:	42000404 	addi	r8,r8,16
    7578:	6b400404 	addi	r13,r13,16
    757c:	63000404 	addi	r12,r12,16
    7580:	5ac00404 	addi	r11,r11,16
    7584:	52800404 	addi	r10,r10,16
    7588:	4a400404 	addi	r9,r9,16
    758c:	1c3fef1e 	bne	r3,r16,754c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700754c>
    7590:	89c00044 	addi	r7,r17,1
    7594:	380e913a 	slli	r7,r7,4
    7598:	310003cc 	andi	r4,r6,15
    759c:	02c000c4 	movi	r11,3
    75a0:	11c7883a 	add	r3,r2,r7
    75a4:	29cb883a 	add	r5,r5,r7
    75a8:	5900212e 	bgeu	r11,r4,7630 <memcpy+0x140>
    75ac:	1813883a 	mov	r9,r3
    75b0:	2811883a 	mov	r8,r5
    75b4:	200f883a 	mov	r7,r4
    75b8:	42800017 	ldw	r10,0(r8)
    75bc:	4a400104 	addi	r9,r9,4
    75c0:	39ffff04 	addi	r7,r7,-4
    75c4:	4abfff15 	stw	r10,-4(r9)
    75c8:	42000104 	addi	r8,r8,4
    75cc:	59fffa36 	bltu	r11,r7,75b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70075b8>
    75d0:	213fff04 	addi	r4,r4,-4
    75d4:	2008d0ba 	srli	r4,r4,2
    75d8:	318000cc 	andi	r6,r6,3
    75dc:	21000044 	addi	r4,r4,1
    75e0:	2109883a 	add	r4,r4,r4
    75e4:	2109883a 	add	r4,r4,r4
    75e8:	1907883a 	add	r3,r3,r4
    75ec:	290b883a 	add	r5,r5,r4
    75f0:	30000626 	beq	r6,zero,760c <memcpy+0x11c>
    75f4:	198d883a 	add	r6,r3,r6
    75f8:	29c00003 	ldbu	r7,0(r5)
    75fc:	18c00044 	addi	r3,r3,1
    7600:	29400044 	addi	r5,r5,1
    7604:	19ffffc5 	stb	r7,-1(r3)
    7608:	19bffb1e 	bne	r3,r6,75f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70075f8>
    760c:	dfc00217 	ldw	ra,8(sp)
    7610:	dc400117 	ldw	r17,4(sp)
    7614:	dc000017 	ldw	r16,0(sp)
    7618:	dec00304 	addi	sp,sp,12
    761c:	f800283a 	ret
    7620:	2007883a 	mov	r3,r4
    7624:	003ff206 	br	75f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70075f0>
    7628:	2007883a 	mov	r3,r4
    762c:	003ff106 	br	75f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70075f4>
    7630:	200d883a 	mov	r6,r4
    7634:	003fee06 	br	75f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70075f0>

00007638 <memmove>:
    7638:	2005883a 	mov	r2,r4
    763c:	29000b2e 	bgeu	r5,r4,766c <memmove+0x34>
    7640:	298f883a 	add	r7,r5,r6
    7644:	21c0092e 	bgeu	r4,r7,766c <memmove+0x34>
    7648:	2187883a 	add	r3,r4,r6
    764c:	198bc83a 	sub	r5,r3,r6
    7650:	30004826 	beq	r6,zero,7774 <memmove+0x13c>
    7654:	39ffffc4 	addi	r7,r7,-1
    7658:	39000003 	ldbu	r4,0(r7)
    765c:	18ffffc4 	addi	r3,r3,-1
    7660:	19000005 	stb	r4,0(r3)
    7664:	28fffb1e 	bne	r5,r3,7654 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007654>
    7668:	f800283a 	ret
    766c:	00c003c4 	movi	r3,15
    7670:	1980412e 	bgeu	r3,r6,7778 <memmove+0x140>
    7674:	2886b03a 	or	r3,r5,r2
    7678:	18c000cc 	andi	r3,r3,3
    767c:	1800401e 	bne	r3,zero,7780 <memmove+0x148>
    7680:	33fffc04 	addi	r15,r6,-16
    7684:	781ed13a 	srli	r15,r15,4
    7688:	28c00104 	addi	r3,r5,4
    768c:	13400104 	addi	r13,r2,4
    7690:	781c913a 	slli	r14,r15,4
    7694:	2b000204 	addi	r12,r5,8
    7698:	12c00204 	addi	r11,r2,8
    769c:	73800504 	addi	r14,r14,20
    76a0:	2a800304 	addi	r10,r5,12
    76a4:	12400304 	addi	r9,r2,12
    76a8:	2b9d883a 	add	r14,r5,r14
    76ac:	2811883a 	mov	r8,r5
    76b0:	100f883a 	mov	r7,r2
    76b4:	41000017 	ldw	r4,0(r8)
    76b8:	39c00404 	addi	r7,r7,16
    76bc:	18c00404 	addi	r3,r3,16
    76c0:	393ffc15 	stw	r4,-16(r7)
    76c4:	193ffc17 	ldw	r4,-16(r3)
    76c8:	6b400404 	addi	r13,r13,16
    76cc:	5ac00404 	addi	r11,r11,16
    76d0:	693ffc15 	stw	r4,-16(r13)
    76d4:	61000017 	ldw	r4,0(r12)
    76d8:	4a400404 	addi	r9,r9,16
    76dc:	42000404 	addi	r8,r8,16
    76e0:	593ffc15 	stw	r4,-16(r11)
    76e4:	51000017 	ldw	r4,0(r10)
    76e8:	63000404 	addi	r12,r12,16
    76ec:	52800404 	addi	r10,r10,16
    76f0:	493ffc15 	stw	r4,-16(r9)
    76f4:	1bbfef1e 	bne	r3,r14,76b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70076b4>
    76f8:	79000044 	addi	r4,r15,1
    76fc:	2008913a 	slli	r4,r4,4
    7700:	328003cc 	andi	r10,r6,15
    7704:	02c000c4 	movi	r11,3
    7708:	1107883a 	add	r3,r2,r4
    770c:	290b883a 	add	r5,r5,r4
    7710:	5a801e2e 	bgeu	r11,r10,778c <memmove+0x154>
    7714:	1813883a 	mov	r9,r3
    7718:	2811883a 	mov	r8,r5
    771c:	500f883a 	mov	r7,r10
    7720:	41000017 	ldw	r4,0(r8)
    7724:	4a400104 	addi	r9,r9,4
    7728:	39ffff04 	addi	r7,r7,-4
    772c:	493fff15 	stw	r4,-4(r9)
    7730:	42000104 	addi	r8,r8,4
    7734:	59fffa36 	bltu	r11,r7,7720 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007720>
    7738:	513fff04 	addi	r4,r10,-4
    773c:	2008d0ba 	srli	r4,r4,2
    7740:	318000cc 	andi	r6,r6,3
    7744:	21000044 	addi	r4,r4,1
    7748:	2109883a 	add	r4,r4,r4
    774c:	2109883a 	add	r4,r4,r4
    7750:	1907883a 	add	r3,r3,r4
    7754:	290b883a 	add	r5,r5,r4
    7758:	30000b26 	beq	r6,zero,7788 <memmove+0x150>
    775c:	198d883a 	add	r6,r3,r6
    7760:	29c00003 	ldbu	r7,0(r5)
    7764:	18c00044 	addi	r3,r3,1
    7768:	29400044 	addi	r5,r5,1
    776c:	19ffffc5 	stb	r7,-1(r3)
    7770:	19bffb1e 	bne	r3,r6,7760 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007760>
    7774:	f800283a 	ret
    7778:	1007883a 	mov	r3,r2
    777c:	003ff606 	br	7758 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007758>
    7780:	1007883a 	mov	r3,r2
    7784:	003ff506 	br	775c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700775c>
    7788:	f800283a 	ret
    778c:	500d883a 	mov	r6,r10
    7790:	003ff106 	br	7758 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007758>

00007794 <memset>:
    7794:	20c000cc 	andi	r3,r4,3
    7798:	2005883a 	mov	r2,r4
    779c:	18004426 	beq	r3,zero,78b0 <memset+0x11c>
    77a0:	31ffffc4 	addi	r7,r6,-1
    77a4:	30004026 	beq	r6,zero,78a8 <memset+0x114>
    77a8:	2813883a 	mov	r9,r5
    77ac:	200d883a 	mov	r6,r4
    77b0:	2007883a 	mov	r3,r4
    77b4:	00000406 	br	77c8 <memset+0x34>
    77b8:	3a3fffc4 	addi	r8,r7,-1
    77bc:	31800044 	addi	r6,r6,1
    77c0:	38003926 	beq	r7,zero,78a8 <memset+0x114>
    77c4:	400f883a 	mov	r7,r8
    77c8:	18c00044 	addi	r3,r3,1
    77cc:	32400005 	stb	r9,0(r6)
    77d0:	1a0000cc 	andi	r8,r3,3
    77d4:	403ff81e 	bne	r8,zero,77b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70077b8>
    77d8:	010000c4 	movi	r4,3
    77dc:	21c02d2e 	bgeu	r4,r7,7894 <memset+0x100>
    77e0:	29003fcc 	andi	r4,r5,255
    77e4:	200c923a 	slli	r6,r4,8
    77e8:	3108b03a 	or	r4,r6,r4
    77ec:	200c943a 	slli	r6,r4,16
    77f0:	218cb03a 	or	r6,r4,r6
    77f4:	010003c4 	movi	r4,15
    77f8:	21c0182e 	bgeu	r4,r7,785c <memset+0xc8>
    77fc:	3b3ffc04 	addi	r12,r7,-16
    7800:	6018d13a 	srli	r12,r12,4
    7804:	1a000104 	addi	r8,r3,4
    7808:	1ac00204 	addi	r11,r3,8
    780c:	6008913a 	slli	r4,r12,4
    7810:	1a800304 	addi	r10,r3,12
    7814:	1813883a 	mov	r9,r3
    7818:	21000504 	addi	r4,r4,20
    781c:	1909883a 	add	r4,r3,r4
    7820:	49800015 	stw	r6,0(r9)
    7824:	41800015 	stw	r6,0(r8)
    7828:	59800015 	stw	r6,0(r11)
    782c:	51800015 	stw	r6,0(r10)
    7830:	42000404 	addi	r8,r8,16
    7834:	4a400404 	addi	r9,r9,16
    7838:	5ac00404 	addi	r11,r11,16
    783c:	52800404 	addi	r10,r10,16
    7840:	413ff71e 	bne	r8,r4,7820 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007820>
    7844:	63000044 	addi	r12,r12,1
    7848:	6018913a 	slli	r12,r12,4
    784c:	39c003cc 	andi	r7,r7,15
    7850:	010000c4 	movi	r4,3
    7854:	1b07883a 	add	r3,r3,r12
    7858:	21c00e2e 	bgeu	r4,r7,7894 <memset+0x100>
    785c:	1813883a 	mov	r9,r3
    7860:	3811883a 	mov	r8,r7
    7864:	010000c4 	movi	r4,3
    7868:	49800015 	stw	r6,0(r9)
    786c:	423fff04 	addi	r8,r8,-4
    7870:	4a400104 	addi	r9,r9,4
    7874:	223ffc36 	bltu	r4,r8,7868 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007868>
    7878:	393fff04 	addi	r4,r7,-4
    787c:	2008d0ba 	srli	r4,r4,2
    7880:	39c000cc 	andi	r7,r7,3
    7884:	21000044 	addi	r4,r4,1
    7888:	2109883a 	add	r4,r4,r4
    788c:	2109883a 	add	r4,r4,r4
    7890:	1907883a 	add	r3,r3,r4
    7894:	38000526 	beq	r7,zero,78ac <memset+0x118>
    7898:	19cf883a 	add	r7,r3,r7
    789c:	19400005 	stb	r5,0(r3)
    78a0:	18c00044 	addi	r3,r3,1
    78a4:	38fffd1e 	bne	r7,r3,789c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700789c>
    78a8:	f800283a 	ret
    78ac:	f800283a 	ret
    78b0:	2007883a 	mov	r3,r4
    78b4:	300f883a 	mov	r7,r6
    78b8:	003fc706 	br	77d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70077d8>

000078bc <_Balloc>:
    78bc:	20801317 	ldw	r2,76(r4)
    78c0:	defffc04 	addi	sp,sp,-16
    78c4:	dc400115 	stw	r17,4(sp)
    78c8:	dc000015 	stw	r16,0(sp)
    78cc:	dfc00315 	stw	ra,12(sp)
    78d0:	dc800215 	stw	r18,8(sp)
    78d4:	2023883a 	mov	r17,r4
    78d8:	2821883a 	mov	r16,r5
    78dc:	10000f26 	beq	r2,zero,791c <_Balloc+0x60>
    78e0:	8407883a 	add	r3,r16,r16
    78e4:	18c7883a 	add	r3,r3,r3
    78e8:	10c7883a 	add	r3,r2,r3
    78ec:	18800017 	ldw	r2,0(r3)
    78f0:	10001126 	beq	r2,zero,7938 <_Balloc+0x7c>
    78f4:	11000017 	ldw	r4,0(r2)
    78f8:	19000015 	stw	r4,0(r3)
    78fc:	10000415 	stw	zero,16(r2)
    7900:	10000315 	stw	zero,12(r2)
    7904:	dfc00317 	ldw	ra,12(sp)
    7908:	dc800217 	ldw	r18,8(sp)
    790c:	dc400117 	ldw	r17,4(sp)
    7910:	dc000017 	ldw	r16,0(sp)
    7914:	dec00404 	addi	sp,sp,16
    7918:	f800283a 	ret
    791c:	01800844 	movi	r6,33
    7920:	01400104 	movi	r5,4
    7924:	000a7f80 	call	a7f8 <_calloc_r>
    7928:	88801315 	stw	r2,76(r17)
    792c:	103fec1e 	bne	r2,zero,78e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70078e0>
    7930:	0005883a 	mov	r2,zero
    7934:	003ff306 	br	7904 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007904>
    7938:	01400044 	movi	r5,1
    793c:	2c24983a 	sll	r18,r5,r16
    7940:	8809883a 	mov	r4,r17
    7944:	91800144 	addi	r6,r18,5
    7948:	318d883a 	add	r6,r6,r6
    794c:	318d883a 	add	r6,r6,r6
    7950:	000a7f80 	call	a7f8 <_calloc_r>
    7954:	103ff626 	beq	r2,zero,7930 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007930>
    7958:	14000115 	stw	r16,4(r2)
    795c:	14800215 	stw	r18,8(r2)
    7960:	003fe606 	br	78fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70078fc>

00007964 <_Bfree>:
    7964:	28000826 	beq	r5,zero,7988 <_Bfree+0x24>
    7968:	28c00117 	ldw	r3,4(r5)
    796c:	20801317 	ldw	r2,76(r4)
    7970:	18c7883a 	add	r3,r3,r3
    7974:	18c7883a 	add	r3,r3,r3
    7978:	10c5883a 	add	r2,r2,r3
    797c:	10c00017 	ldw	r3,0(r2)
    7980:	28c00015 	stw	r3,0(r5)
    7984:	11400015 	stw	r5,0(r2)
    7988:	f800283a 	ret

0000798c <__multadd>:
    798c:	defffa04 	addi	sp,sp,-24
    7990:	dc800315 	stw	r18,12(sp)
    7994:	dc400215 	stw	r17,8(sp)
    7998:	dc000115 	stw	r16,4(sp)
    799c:	2823883a 	mov	r17,r5
    79a0:	2c000417 	ldw	r16,16(r5)
    79a4:	dfc00515 	stw	ra,20(sp)
    79a8:	dcc00415 	stw	r19,16(sp)
    79ac:	2025883a 	mov	r18,r4
    79b0:	29400504 	addi	r5,r5,20
    79b4:	0011883a 	mov	r8,zero
    79b8:	28c00017 	ldw	r3,0(r5)
    79bc:	29400104 	addi	r5,r5,4
    79c0:	42000044 	addi	r8,r8,1
    79c4:	18bfffcc 	andi	r2,r3,65535
    79c8:	1185383a 	mul	r2,r2,r6
    79cc:	1806d43a 	srli	r3,r3,16
    79d0:	11cf883a 	add	r7,r2,r7
    79d4:	3808d43a 	srli	r4,r7,16
    79d8:	1987383a 	mul	r3,r3,r6
    79dc:	38bfffcc 	andi	r2,r7,65535
    79e0:	1907883a 	add	r3,r3,r4
    79e4:	1808943a 	slli	r4,r3,16
    79e8:	180ed43a 	srli	r7,r3,16
    79ec:	2085883a 	add	r2,r4,r2
    79f0:	28bfff15 	stw	r2,-4(r5)
    79f4:	443ff016 	blt	r8,r16,79b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70079b8>
    79f8:	38000926 	beq	r7,zero,7a20 <__multadd+0x94>
    79fc:	88800217 	ldw	r2,8(r17)
    7a00:	80800f0e 	bge	r16,r2,7a40 <__multadd+0xb4>
    7a04:	80800144 	addi	r2,r16,5
    7a08:	1085883a 	add	r2,r2,r2
    7a0c:	1085883a 	add	r2,r2,r2
    7a10:	8885883a 	add	r2,r17,r2
    7a14:	11c00015 	stw	r7,0(r2)
    7a18:	84000044 	addi	r16,r16,1
    7a1c:	8c000415 	stw	r16,16(r17)
    7a20:	8805883a 	mov	r2,r17
    7a24:	dfc00517 	ldw	ra,20(sp)
    7a28:	dcc00417 	ldw	r19,16(sp)
    7a2c:	dc800317 	ldw	r18,12(sp)
    7a30:	dc400217 	ldw	r17,8(sp)
    7a34:	dc000117 	ldw	r16,4(sp)
    7a38:	dec00604 	addi	sp,sp,24
    7a3c:	f800283a 	ret
    7a40:	89400117 	ldw	r5,4(r17)
    7a44:	9009883a 	mov	r4,r18
    7a48:	d9c00015 	stw	r7,0(sp)
    7a4c:	29400044 	addi	r5,r5,1
    7a50:	00078bc0 	call	78bc <_Balloc>
    7a54:	89800417 	ldw	r6,16(r17)
    7a58:	89400304 	addi	r5,r17,12
    7a5c:	11000304 	addi	r4,r2,12
    7a60:	31800084 	addi	r6,r6,2
    7a64:	318d883a 	add	r6,r6,r6
    7a68:	318d883a 	add	r6,r6,r6
    7a6c:	1027883a 	mov	r19,r2
    7a70:	00074f00 	call	74f0 <memcpy>
    7a74:	d9c00017 	ldw	r7,0(sp)
    7a78:	88000a26 	beq	r17,zero,7aa4 <__multadd+0x118>
    7a7c:	88c00117 	ldw	r3,4(r17)
    7a80:	90801317 	ldw	r2,76(r18)
    7a84:	18c7883a 	add	r3,r3,r3
    7a88:	18c7883a 	add	r3,r3,r3
    7a8c:	10c5883a 	add	r2,r2,r3
    7a90:	10c00017 	ldw	r3,0(r2)
    7a94:	88c00015 	stw	r3,0(r17)
    7a98:	14400015 	stw	r17,0(r2)
    7a9c:	9823883a 	mov	r17,r19
    7aa0:	003fd806 	br	7a04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007a04>
    7aa4:	9823883a 	mov	r17,r19
    7aa8:	003fd606 	br	7a04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007a04>

00007aac <__s2b>:
    7aac:	defff904 	addi	sp,sp,-28
    7ab0:	dc400115 	stw	r17,4(sp)
    7ab4:	dc000015 	stw	r16,0(sp)
    7ab8:	2023883a 	mov	r17,r4
    7abc:	2821883a 	mov	r16,r5
    7ac0:	39000204 	addi	r4,r7,8
    7ac4:	01400244 	movi	r5,9
    7ac8:	dcc00315 	stw	r19,12(sp)
    7acc:	dc800215 	stw	r18,8(sp)
    7ad0:	dfc00615 	stw	ra,24(sp)
    7ad4:	dd400515 	stw	r21,20(sp)
    7ad8:	dd000415 	stw	r20,16(sp)
    7adc:	3825883a 	mov	r18,r7
    7ae0:	3027883a 	mov	r19,r6
    7ae4:	000bb280 	call	bb28 <__divsi3>
    7ae8:	00c00044 	movi	r3,1
    7aec:	000b883a 	mov	r5,zero
    7af0:	1880030e 	bge	r3,r2,7b00 <__s2b+0x54>
    7af4:	18c7883a 	add	r3,r3,r3
    7af8:	29400044 	addi	r5,r5,1
    7afc:	18bffd16 	blt	r3,r2,7af4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007af4>
    7b00:	8809883a 	mov	r4,r17
    7b04:	00078bc0 	call	78bc <_Balloc>
    7b08:	d8c00717 	ldw	r3,28(sp)
    7b0c:	10c00515 	stw	r3,20(r2)
    7b10:	00c00044 	movi	r3,1
    7b14:	10c00415 	stw	r3,16(r2)
    7b18:	00c00244 	movi	r3,9
    7b1c:	1cc0210e 	bge	r3,r19,7ba4 <__s2b+0xf8>
    7b20:	80eb883a 	add	r21,r16,r3
    7b24:	a829883a 	mov	r20,r21
    7b28:	84e1883a 	add	r16,r16,r19
    7b2c:	a1c00007 	ldb	r7,0(r20)
    7b30:	01800284 	movi	r6,10
    7b34:	a5000044 	addi	r20,r20,1
    7b38:	100b883a 	mov	r5,r2
    7b3c:	39fff404 	addi	r7,r7,-48
    7b40:	8809883a 	mov	r4,r17
    7b44:	000798c0 	call	798c <__multadd>
    7b48:	a43ff81e 	bne	r20,r16,7b2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007b2c>
    7b4c:	ace1883a 	add	r16,r21,r19
    7b50:	843ffe04 	addi	r16,r16,-8
    7b54:	9c800a0e 	bge	r19,r18,7b80 <__s2b+0xd4>
    7b58:	94e5c83a 	sub	r18,r18,r19
    7b5c:	84a5883a 	add	r18,r16,r18
    7b60:	81c00007 	ldb	r7,0(r16)
    7b64:	01800284 	movi	r6,10
    7b68:	84000044 	addi	r16,r16,1
    7b6c:	100b883a 	mov	r5,r2
    7b70:	39fff404 	addi	r7,r7,-48
    7b74:	8809883a 	mov	r4,r17
    7b78:	000798c0 	call	798c <__multadd>
    7b7c:	84bff81e 	bne	r16,r18,7b60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007b60>
    7b80:	dfc00617 	ldw	ra,24(sp)
    7b84:	dd400517 	ldw	r21,20(sp)
    7b88:	dd000417 	ldw	r20,16(sp)
    7b8c:	dcc00317 	ldw	r19,12(sp)
    7b90:	dc800217 	ldw	r18,8(sp)
    7b94:	dc400117 	ldw	r17,4(sp)
    7b98:	dc000017 	ldw	r16,0(sp)
    7b9c:	dec00704 	addi	sp,sp,28
    7ba0:	f800283a 	ret
    7ba4:	84000284 	addi	r16,r16,10
    7ba8:	1827883a 	mov	r19,r3
    7bac:	003fe906 	br	7b54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007b54>

00007bb0 <__hi0bits>:
    7bb0:	20bfffec 	andhi	r2,r4,65535
    7bb4:	1000141e 	bne	r2,zero,7c08 <__hi0bits+0x58>
    7bb8:	2008943a 	slli	r4,r4,16
    7bbc:	00800404 	movi	r2,16
    7bc0:	20ffc02c 	andhi	r3,r4,65280
    7bc4:	1800021e 	bne	r3,zero,7bd0 <__hi0bits+0x20>
    7bc8:	2008923a 	slli	r4,r4,8
    7bcc:	10800204 	addi	r2,r2,8
    7bd0:	20fc002c 	andhi	r3,r4,61440
    7bd4:	1800021e 	bne	r3,zero,7be0 <__hi0bits+0x30>
    7bd8:	2008913a 	slli	r4,r4,4
    7bdc:	10800104 	addi	r2,r2,4
    7be0:	20f0002c 	andhi	r3,r4,49152
    7be4:	1800031e 	bne	r3,zero,7bf4 <__hi0bits+0x44>
    7be8:	2109883a 	add	r4,r4,r4
    7bec:	10800084 	addi	r2,r2,2
    7bf0:	2109883a 	add	r4,r4,r4
    7bf4:	20000316 	blt	r4,zero,7c04 <__hi0bits+0x54>
    7bf8:	2110002c 	andhi	r4,r4,16384
    7bfc:	2000041e 	bne	r4,zero,7c10 <__hi0bits+0x60>
    7c00:	00800804 	movi	r2,32
    7c04:	f800283a 	ret
    7c08:	0005883a 	mov	r2,zero
    7c0c:	003fec06 	br	7bc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007bc0>
    7c10:	10800044 	addi	r2,r2,1
    7c14:	f800283a 	ret

00007c18 <__lo0bits>:
    7c18:	20c00017 	ldw	r3,0(r4)
    7c1c:	188001cc 	andi	r2,r3,7
    7c20:	10000826 	beq	r2,zero,7c44 <__lo0bits+0x2c>
    7c24:	1880004c 	andi	r2,r3,1
    7c28:	1000211e 	bne	r2,zero,7cb0 <__lo0bits+0x98>
    7c2c:	1880008c 	andi	r2,r3,2
    7c30:	1000211e 	bne	r2,zero,7cb8 <__lo0bits+0xa0>
    7c34:	1806d0ba 	srli	r3,r3,2
    7c38:	00800084 	movi	r2,2
    7c3c:	20c00015 	stw	r3,0(r4)
    7c40:	f800283a 	ret
    7c44:	18bfffcc 	andi	r2,r3,65535
    7c48:	10001326 	beq	r2,zero,7c98 <__lo0bits+0x80>
    7c4c:	0005883a 	mov	r2,zero
    7c50:	19403fcc 	andi	r5,r3,255
    7c54:	2800021e 	bne	r5,zero,7c60 <__lo0bits+0x48>
    7c58:	1806d23a 	srli	r3,r3,8
    7c5c:	10800204 	addi	r2,r2,8
    7c60:	194003cc 	andi	r5,r3,15
    7c64:	2800021e 	bne	r5,zero,7c70 <__lo0bits+0x58>
    7c68:	1806d13a 	srli	r3,r3,4
    7c6c:	10800104 	addi	r2,r2,4
    7c70:	194000cc 	andi	r5,r3,3
    7c74:	2800021e 	bne	r5,zero,7c80 <__lo0bits+0x68>
    7c78:	1806d0ba 	srli	r3,r3,2
    7c7c:	10800084 	addi	r2,r2,2
    7c80:	1940004c 	andi	r5,r3,1
    7c84:	2800081e 	bne	r5,zero,7ca8 <__lo0bits+0x90>
    7c88:	1806d07a 	srli	r3,r3,1
    7c8c:	1800051e 	bne	r3,zero,7ca4 <__lo0bits+0x8c>
    7c90:	00800804 	movi	r2,32
    7c94:	f800283a 	ret
    7c98:	1806d43a 	srli	r3,r3,16
    7c9c:	00800404 	movi	r2,16
    7ca0:	003feb06 	br	7c50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007c50>
    7ca4:	10800044 	addi	r2,r2,1
    7ca8:	20c00015 	stw	r3,0(r4)
    7cac:	f800283a 	ret
    7cb0:	0005883a 	mov	r2,zero
    7cb4:	f800283a 	ret
    7cb8:	1806d07a 	srli	r3,r3,1
    7cbc:	00800044 	movi	r2,1
    7cc0:	20c00015 	stw	r3,0(r4)
    7cc4:	f800283a 	ret

00007cc8 <__i2b>:
    7cc8:	defffd04 	addi	sp,sp,-12
    7ccc:	dc000015 	stw	r16,0(sp)
    7cd0:	04000044 	movi	r16,1
    7cd4:	dc400115 	stw	r17,4(sp)
    7cd8:	2823883a 	mov	r17,r5
    7cdc:	800b883a 	mov	r5,r16
    7ce0:	dfc00215 	stw	ra,8(sp)
    7ce4:	00078bc0 	call	78bc <_Balloc>
    7ce8:	14400515 	stw	r17,20(r2)
    7cec:	14000415 	stw	r16,16(r2)
    7cf0:	dfc00217 	ldw	ra,8(sp)
    7cf4:	dc400117 	ldw	r17,4(sp)
    7cf8:	dc000017 	ldw	r16,0(sp)
    7cfc:	dec00304 	addi	sp,sp,12
    7d00:	f800283a 	ret

00007d04 <__multiply>:
    7d04:	defffa04 	addi	sp,sp,-24
    7d08:	dcc00315 	stw	r19,12(sp)
    7d0c:	dc800215 	stw	r18,8(sp)
    7d10:	34c00417 	ldw	r19,16(r6)
    7d14:	2c800417 	ldw	r18,16(r5)
    7d18:	dd000415 	stw	r20,16(sp)
    7d1c:	dc400115 	stw	r17,4(sp)
    7d20:	dfc00515 	stw	ra,20(sp)
    7d24:	dc000015 	stw	r16,0(sp)
    7d28:	2829883a 	mov	r20,r5
    7d2c:	3023883a 	mov	r17,r6
    7d30:	94c0050e 	bge	r18,r19,7d48 <__multiply+0x44>
    7d34:	9007883a 	mov	r3,r18
    7d38:	3029883a 	mov	r20,r6
    7d3c:	9825883a 	mov	r18,r19
    7d40:	2823883a 	mov	r17,r5
    7d44:	1827883a 	mov	r19,r3
    7d48:	a0800217 	ldw	r2,8(r20)
    7d4c:	94e1883a 	add	r16,r18,r19
    7d50:	a1400117 	ldw	r5,4(r20)
    7d54:	1400010e 	bge	r2,r16,7d5c <__multiply+0x58>
    7d58:	29400044 	addi	r5,r5,1
    7d5c:	00078bc0 	call	78bc <_Balloc>
    7d60:	8415883a 	add	r10,r16,r16
    7d64:	12c00504 	addi	r11,r2,20
    7d68:	5295883a 	add	r10,r10,r10
    7d6c:	5a95883a 	add	r10,r11,r10
    7d70:	5807883a 	mov	r3,r11
    7d74:	5a80032e 	bgeu	r11,r10,7d84 <__multiply+0x80>
    7d78:	18000015 	stw	zero,0(r3)
    7d7c:	18c00104 	addi	r3,r3,4
    7d80:	1abffd36 	bltu	r3,r10,7d78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007d78>
    7d84:	9ce7883a 	add	r19,r19,r19
    7d88:	94a5883a 	add	r18,r18,r18
    7d8c:	89800504 	addi	r6,r17,20
    7d90:	9ce7883a 	add	r19,r19,r19
    7d94:	a3400504 	addi	r13,r20,20
    7d98:	94a5883a 	add	r18,r18,r18
    7d9c:	34d9883a 	add	r12,r6,r19
    7da0:	6c93883a 	add	r9,r13,r18
    7da4:	3300422e 	bgeu	r6,r12,7eb0 <__multiply+0x1ac>
    7da8:	37c00017 	ldw	ra,0(r6)
    7dac:	fbffffcc 	andi	r15,ra,65535
    7db0:	78001b26 	beq	r15,zero,7e20 <__multiply+0x11c>
    7db4:	5811883a 	mov	r8,r11
    7db8:	681d883a 	mov	r14,r13
    7dbc:	000f883a 	mov	r7,zero
    7dc0:	71000017 	ldw	r4,0(r14)
    7dc4:	40c00017 	ldw	r3,0(r8)
    7dc8:	73800104 	addi	r14,r14,4
    7dcc:	217fffcc 	andi	r5,r4,65535
    7dd0:	2bcb383a 	mul	r5,r5,r15
    7dd4:	2008d43a 	srli	r4,r4,16
    7dd8:	1c7fffcc 	andi	r17,r3,65535
    7ddc:	2c4b883a 	add	r5,r5,r17
    7de0:	29cb883a 	add	r5,r5,r7
    7de4:	23c9383a 	mul	r4,r4,r15
    7de8:	1806d43a 	srli	r3,r3,16
    7dec:	280ed43a 	srli	r7,r5,16
    7df0:	297fffcc 	andi	r5,r5,65535
    7df4:	20c7883a 	add	r3,r4,r3
    7df8:	19c7883a 	add	r3,r3,r7
    7dfc:	1808943a 	slli	r4,r3,16
    7e00:	4023883a 	mov	r17,r8
    7e04:	180ed43a 	srli	r7,r3,16
    7e08:	214ab03a 	or	r5,r4,r5
    7e0c:	41400015 	stw	r5,0(r8)
    7e10:	42000104 	addi	r8,r8,4
    7e14:	727fea36 	bltu	r14,r9,7dc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007dc0>
    7e18:	89c00115 	stw	r7,4(r17)
    7e1c:	37c00017 	ldw	ra,0(r6)
    7e20:	f83ed43a 	srli	ra,ra,16
    7e24:	f8001f26 	beq	ra,zero,7ea4 <__multiply+0x1a0>
    7e28:	58c00017 	ldw	r3,0(r11)
    7e2c:	681d883a 	mov	r14,r13
    7e30:	581f883a 	mov	r15,r11
    7e34:	1811883a 	mov	r8,r3
    7e38:	5825883a 	mov	r18,r11
    7e3c:	000f883a 	mov	r7,zero
    7e40:	00000106 	br	7e48 <__multiply+0x144>
    7e44:	8825883a 	mov	r18,r17
    7e48:	7140000b 	ldhu	r5,0(r14)
    7e4c:	4010d43a 	srli	r8,r8,16
    7e50:	193fffcc 	andi	r4,r3,65535
    7e54:	2fcb383a 	mul	r5,r5,ra
    7e58:	7bc00104 	addi	r15,r15,4
    7e5c:	73800104 	addi	r14,r14,4
    7e60:	2a0b883a 	add	r5,r5,r8
    7e64:	29cb883a 	add	r5,r5,r7
    7e68:	2806943a 	slli	r3,r5,16
    7e6c:	94400104 	addi	r17,r18,4
    7e70:	280ad43a 	srli	r5,r5,16
    7e74:	1908b03a 	or	r4,r3,r4
    7e78:	793fff15 	stw	r4,-4(r15)
    7e7c:	70ffff17 	ldw	r3,-4(r14)
    7e80:	8a000017 	ldw	r8,0(r17)
    7e84:	1806d43a 	srli	r3,r3,16
    7e88:	413fffcc 	andi	r4,r8,65535
    7e8c:	1fc7383a 	mul	r3,r3,ra
    7e90:	1907883a 	add	r3,r3,r4
    7e94:	1947883a 	add	r3,r3,r5
    7e98:	180ed43a 	srli	r7,r3,16
    7e9c:	727fe936 	bltu	r14,r9,7e44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007e44>
    7ea0:	90c00115 	stw	r3,4(r18)
    7ea4:	31800104 	addi	r6,r6,4
    7ea8:	5ac00104 	addi	r11,r11,4
    7eac:	333fbe36 	bltu	r6,r12,7da8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007da8>
    7eb0:	0400090e 	bge	zero,r16,7ed8 <__multiply+0x1d4>
    7eb4:	50ffff17 	ldw	r3,-4(r10)
    7eb8:	52bfff04 	addi	r10,r10,-4
    7ebc:	18000326 	beq	r3,zero,7ecc <__multiply+0x1c8>
    7ec0:	00000506 	br	7ed8 <__multiply+0x1d4>
    7ec4:	50c00017 	ldw	r3,0(r10)
    7ec8:	1800031e 	bne	r3,zero,7ed8 <__multiply+0x1d4>
    7ecc:	843fffc4 	addi	r16,r16,-1
    7ed0:	52bfff04 	addi	r10,r10,-4
    7ed4:	803ffb1e 	bne	r16,zero,7ec4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007ec4>
    7ed8:	14000415 	stw	r16,16(r2)
    7edc:	dfc00517 	ldw	ra,20(sp)
    7ee0:	dd000417 	ldw	r20,16(sp)
    7ee4:	dcc00317 	ldw	r19,12(sp)
    7ee8:	dc800217 	ldw	r18,8(sp)
    7eec:	dc400117 	ldw	r17,4(sp)
    7ef0:	dc000017 	ldw	r16,0(sp)
    7ef4:	dec00604 	addi	sp,sp,24
    7ef8:	f800283a 	ret

00007efc <__pow5mult>:
    7efc:	defffa04 	addi	sp,sp,-24
    7f00:	dcc00315 	stw	r19,12(sp)
    7f04:	dc000015 	stw	r16,0(sp)
    7f08:	dfc00515 	stw	ra,20(sp)
    7f0c:	dd000415 	stw	r20,16(sp)
    7f10:	dc800215 	stw	r18,8(sp)
    7f14:	dc400115 	stw	r17,4(sp)
    7f18:	308000cc 	andi	r2,r6,3
    7f1c:	3021883a 	mov	r16,r6
    7f20:	2027883a 	mov	r19,r4
    7f24:	10002f1e 	bne	r2,zero,7fe4 <__pow5mult+0xe8>
    7f28:	2825883a 	mov	r18,r5
    7f2c:	8021d0ba 	srai	r16,r16,2
    7f30:	80001a26 	beq	r16,zero,7f9c <__pow5mult+0xa0>
    7f34:	9c401217 	ldw	r17,72(r19)
    7f38:	8800061e 	bne	r17,zero,7f54 <__pow5mult+0x58>
    7f3c:	00003406 	br	8010 <__pow5mult+0x114>
    7f40:	8021d07a 	srai	r16,r16,1
    7f44:	80001526 	beq	r16,zero,7f9c <__pow5mult+0xa0>
    7f48:	88800017 	ldw	r2,0(r17)
    7f4c:	10001c26 	beq	r2,zero,7fc0 <__pow5mult+0xc4>
    7f50:	1023883a 	mov	r17,r2
    7f54:	8080004c 	andi	r2,r16,1
    7f58:	103ff926 	beq	r2,zero,7f40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f40>
    7f5c:	880d883a 	mov	r6,r17
    7f60:	900b883a 	mov	r5,r18
    7f64:	9809883a 	mov	r4,r19
    7f68:	0007d040 	call	7d04 <__multiply>
    7f6c:	90001b26 	beq	r18,zero,7fdc <__pow5mult+0xe0>
    7f70:	91000117 	ldw	r4,4(r18)
    7f74:	98c01317 	ldw	r3,76(r19)
    7f78:	8021d07a 	srai	r16,r16,1
    7f7c:	2109883a 	add	r4,r4,r4
    7f80:	2109883a 	add	r4,r4,r4
    7f84:	1907883a 	add	r3,r3,r4
    7f88:	19000017 	ldw	r4,0(r3)
    7f8c:	91000015 	stw	r4,0(r18)
    7f90:	1c800015 	stw	r18,0(r3)
    7f94:	1025883a 	mov	r18,r2
    7f98:	803feb1e 	bne	r16,zero,7f48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f48>
    7f9c:	9005883a 	mov	r2,r18
    7fa0:	dfc00517 	ldw	ra,20(sp)
    7fa4:	dd000417 	ldw	r20,16(sp)
    7fa8:	dcc00317 	ldw	r19,12(sp)
    7fac:	dc800217 	ldw	r18,8(sp)
    7fb0:	dc400117 	ldw	r17,4(sp)
    7fb4:	dc000017 	ldw	r16,0(sp)
    7fb8:	dec00604 	addi	sp,sp,24
    7fbc:	f800283a 	ret
    7fc0:	880d883a 	mov	r6,r17
    7fc4:	880b883a 	mov	r5,r17
    7fc8:	9809883a 	mov	r4,r19
    7fcc:	0007d040 	call	7d04 <__multiply>
    7fd0:	88800015 	stw	r2,0(r17)
    7fd4:	10000015 	stw	zero,0(r2)
    7fd8:	003fdd06 	br	7f50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f50>
    7fdc:	1025883a 	mov	r18,r2
    7fe0:	003fd706 	br	7f40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f40>
    7fe4:	10bfffc4 	addi	r2,r2,-1
    7fe8:	1085883a 	add	r2,r2,r2
    7fec:	00c000b4 	movhi	r3,2
    7ff0:	18ebae04 	addi	r3,r3,-20808
    7ff4:	1085883a 	add	r2,r2,r2
    7ff8:	1885883a 	add	r2,r3,r2
    7ffc:	11800017 	ldw	r6,0(r2)
    8000:	000f883a 	mov	r7,zero
    8004:	000798c0 	call	798c <__multadd>
    8008:	1025883a 	mov	r18,r2
    800c:	003fc706 	br	7f2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f2c>
    8010:	05000044 	movi	r20,1
    8014:	a00b883a 	mov	r5,r20
    8018:	9809883a 	mov	r4,r19
    801c:	00078bc0 	call	78bc <_Balloc>
    8020:	1023883a 	mov	r17,r2
    8024:	00809c44 	movi	r2,625
    8028:	88800515 	stw	r2,20(r17)
    802c:	8d000415 	stw	r20,16(r17)
    8030:	9c401215 	stw	r17,72(r19)
    8034:	88000015 	stw	zero,0(r17)
    8038:	003fc606 	br	7f54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f54>

0000803c <__lshift>:
    803c:	defff904 	addi	sp,sp,-28
    8040:	dd400515 	stw	r21,20(sp)
    8044:	dcc00315 	stw	r19,12(sp)
    8048:	302bd17a 	srai	r21,r6,5
    804c:	2cc00417 	ldw	r19,16(r5)
    8050:	28800217 	ldw	r2,8(r5)
    8054:	dd000415 	stw	r20,16(sp)
    8058:	ace7883a 	add	r19,r21,r19
    805c:	dc800215 	stw	r18,8(sp)
    8060:	dc400115 	stw	r17,4(sp)
    8064:	dc000015 	stw	r16,0(sp)
    8068:	dfc00615 	stw	ra,24(sp)
    806c:	9c000044 	addi	r16,r19,1
    8070:	2823883a 	mov	r17,r5
    8074:	3029883a 	mov	r20,r6
    8078:	2025883a 	mov	r18,r4
    807c:	29400117 	ldw	r5,4(r5)
    8080:	1400030e 	bge	r2,r16,8090 <__lshift+0x54>
    8084:	1085883a 	add	r2,r2,r2
    8088:	29400044 	addi	r5,r5,1
    808c:	143ffd16 	blt	r2,r16,8084 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008084>
    8090:	9009883a 	mov	r4,r18
    8094:	00078bc0 	call	78bc <_Balloc>
    8098:	10c00504 	addi	r3,r2,20
    809c:	0540070e 	bge	zero,r21,80bc <__lshift+0x80>
    80a0:	ad6b883a 	add	r21,r21,r21
    80a4:	ad6b883a 	add	r21,r21,r21
    80a8:	1809883a 	mov	r4,r3
    80ac:	1d47883a 	add	r3,r3,r21
    80b0:	20000015 	stw	zero,0(r4)
    80b4:	21000104 	addi	r4,r4,4
    80b8:	193ffd1e 	bne	r3,r4,80b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70080b0>
    80bc:	8a000417 	ldw	r8,16(r17)
    80c0:	89000504 	addi	r4,r17,20
    80c4:	a18007cc 	andi	r6,r20,31
    80c8:	4211883a 	add	r8,r8,r8
    80cc:	4211883a 	add	r8,r8,r8
    80d0:	2211883a 	add	r8,r4,r8
    80d4:	30002326 	beq	r6,zero,8164 <__lshift+0x128>
    80d8:	02400804 	movi	r9,32
    80dc:	4993c83a 	sub	r9,r9,r6
    80e0:	000b883a 	mov	r5,zero
    80e4:	21c00017 	ldw	r7,0(r4)
    80e8:	1815883a 	mov	r10,r3
    80ec:	18c00104 	addi	r3,r3,4
    80f0:	398e983a 	sll	r7,r7,r6
    80f4:	21000104 	addi	r4,r4,4
    80f8:	394ab03a 	or	r5,r7,r5
    80fc:	197fff15 	stw	r5,-4(r3)
    8100:	217fff17 	ldw	r5,-4(r4)
    8104:	2a4ad83a 	srl	r5,r5,r9
    8108:	223ff636 	bltu	r4,r8,80e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70080e4>
    810c:	51400115 	stw	r5,4(r10)
    8110:	28001a1e 	bne	r5,zero,817c <__lshift+0x140>
    8114:	843fffc4 	addi	r16,r16,-1
    8118:	14000415 	stw	r16,16(r2)
    811c:	88000826 	beq	r17,zero,8140 <__lshift+0x104>
    8120:	89000117 	ldw	r4,4(r17)
    8124:	90c01317 	ldw	r3,76(r18)
    8128:	2109883a 	add	r4,r4,r4
    812c:	2109883a 	add	r4,r4,r4
    8130:	1907883a 	add	r3,r3,r4
    8134:	19000017 	ldw	r4,0(r3)
    8138:	89000015 	stw	r4,0(r17)
    813c:	1c400015 	stw	r17,0(r3)
    8140:	dfc00617 	ldw	ra,24(sp)
    8144:	dd400517 	ldw	r21,20(sp)
    8148:	dd000417 	ldw	r20,16(sp)
    814c:	dcc00317 	ldw	r19,12(sp)
    8150:	dc800217 	ldw	r18,8(sp)
    8154:	dc400117 	ldw	r17,4(sp)
    8158:	dc000017 	ldw	r16,0(sp)
    815c:	dec00704 	addi	sp,sp,28
    8160:	f800283a 	ret
    8164:	21400017 	ldw	r5,0(r4)
    8168:	18c00104 	addi	r3,r3,4
    816c:	21000104 	addi	r4,r4,4
    8170:	197fff15 	stw	r5,-4(r3)
    8174:	223ffb36 	bltu	r4,r8,8164 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008164>
    8178:	003fe606 	br	8114 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008114>
    817c:	9c000084 	addi	r16,r19,2
    8180:	003fe406 	br	8114 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008114>

00008184 <__mcmp>:
    8184:	20800417 	ldw	r2,16(r4)
    8188:	28c00417 	ldw	r3,16(r5)
    818c:	10c5c83a 	sub	r2,r2,r3
    8190:	1000111e 	bne	r2,zero,81d8 <__mcmp+0x54>
    8194:	18c7883a 	add	r3,r3,r3
    8198:	18c7883a 	add	r3,r3,r3
    819c:	21000504 	addi	r4,r4,20
    81a0:	29400504 	addi	r5,r5,20
    81a4:	20c5883a 	add	r2,r4,r3
    81a8:	28cb883a 	add	r5,r5,r3
    81ac:	00000106 	br	81b4 <__mcmp+0x30>
    81b0:	20800a2e 	bgeu	r4,r2,81dc <__mcmp+0x58>
    81b4:	10bfff04 	addi	r2,r2,-4
    81b8:	297fff04 	addi	r5,r5,-4
    81bc:	11800017 	ldw	r6,0(r2)
    81c0:	28c00017 	ldw	r3,0(r5)
    81c4:	30fffa26 	beq	r6,r3,81b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70081b0>
    81c8:	30c00236 	bltu	r6,r3,81d4 <__mcmp+0x50>
    81cc:	00800044 	movi	r2,1
    81d0:	f800283a 	ret
    81d4:	00bfffc4 	movi	r2,-1
    81d8:	f800283a 	ret
    81dc:	0005883a 	mov	r2,zero
    81e0:	f800283a 	ret

000081e4 <__mdiff>:
    81e4:	28c00417 	ldw	r3,16(r5)
    81e8:	30800417 	ldw	r2,16(r6)
    81ec:	defffa04 	addi	sp,sp,-24
    81f0:	dcc00315 	stw	r19,12(sp)
    81f4:	dc800215 	stw	r18,8(sp)
    81f8:	dfc00515 	stw	ra,20(sp)
    81fc:	dd000415 	stw	r20,16(sp)
    8200:	dc400115 	stw	r17,4(sp)
    8204:	dc000015 	stw	r16,0(sp)
    8208:	1887c83a 	sub	r3,r3,r2
    820c:	2825883a 	mov	r18,r5
    8210:	3027883a 	mov	r19,r6
    8214:	1800141e 	bne	r3,zero,8268 <__mdiff+0x84>
    8218:	1085883a 	add	r2,r2,r2
    821c:	1085883a 	add	r2,r2,r2
    8220:	2a000504 	addi	r8,r5,20
    8224:	34000504 	addi	r16,r6,20
    8228:	4087883a 	add	r3,r8,r2
    822c:	8085883a 	add	r2,r16,r2
    8230:	00000106 	br	8238 <__mdiff+0x54>
    8234:	40c0592e 	bgeu	r8,r3,839c <__mdiff+0x1b8>
    8238:	18ffff04 	addi	r3,r3,-4
    823c:	10bfff04 	addi	r2,r2,-4
    8240:	19c00017 	ldw	r7,0(r3)
    8244:	11400017 	ldw	r5,0(r2)
    8248:	397ffa26 	beq	r7,r5,8234 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008234>
    824c:	3940592e 	bgeu	r7,r5,83b4 <__mdiff+0x1d0>
    8250:	9005883a 	mov	r2,r18
    8254:	4023883a 	mov	r17,r8
    8258:	9825883a 	mov	r18,r19
    825c:	05000044 	movi	r20,1
    8260:	1027883a 	mov	r19,r2
    8264:	00000406 	br	8278 <__mdiff+0x94>
    8268:	18005616 	blt	r3,zero,83c4 <__mdiff+0x1e0>
    826c:	34400504 	addi	r17,r6,20
    8270:	2c000504 	addi	r16,r5,20
    8274:	0029883a 	mov	r20,zero
    8278:	91400117 	ldw	r5,4(r18)
    827c:	00078bc0 	call	78bc <_Balloc>
    8280:	92400417 	ldw	r9,16(r18)
    8284:	9b000417 	ldw	r12,16(r19)
    8288:	12c00504 	addi	r11,r2,20
    828c:	4a51883a 	add	r8,r9,r9
    8290:	6319883a 	add	r12,r12,r12
    8294:	4211883a 	add	r8,r8,r8
    8298:	6319883a 	add	r12,r12,r12
    829c:	15000315 	stw	r20,12(r2)
    82a0:	8211883a 	add	r8,r16,r8
    82a4:	8b19883a 	add	r12,r17,r12
    82a8:	0007883a 	mov	r3,zero
    82ac:	81400017 	ldw	r5,0(r16)
    82b0:	89c00017 	ldw	r7,0(r17)
    82b4:	59800104 	addi	r6,r11,4
    82b8:	293fffcc 	andi	r4,r5,65535
    82bc:	20c7883a 	add	r3,r4,r3
    82c0:	393fffcc 	andi	r4,r7,65535
    82c4:	1909c83a 	sub	r4,r3,r4
    82c8:	280ad43a 	srli	r5,r5,16
    82cc:	380ed43a 	srli	r7,r7,16
    82d0:	2007d43a 	srai	r3,r4,16
    82d4:	213fffcc 	andi	r4,r4,65535
    82d8:	29cbc83a 	sub	r5,r5,r7
    82dc:	28c7883a 	add	r3,r5,r3
    82e0:	180a943a 	slli	r5,r3,16
    82e4:	8c400104 	addi	r17,r17,4
    82e8:	84000104 	addi	r16,r16,4
    82ec:	2908b03a 	or	r4,r5,r4
    82f0:	59000015 	stw	r4,0(r11)
    82f4:	1807d43a 	srai	r3,r3,16
    82f8:	3015883a 	mov	r10,r6
    82fc:	3017883a 	mov	r11,r6
    8300:	8b3fea36 	bltu	r17,r12,82ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70082ac>
    8304:	8200162e 	bgeu	r16,r8,8360 <__mdiff+0x17c>
    8308:	8017883a 	mov	r11,r16
    830c:	59400017 	ldw	r5,0(r11)
    8310:	31800104 	addi	r6,r6,4
    8314:	5ac00104 	addi	r11,r11,4
    8318:	293fffcc 	andi	r4,r5,65535
    831c:	20c7883a 	add	r3,r4,r3
    8320:	280ed43a 	srli	r7,r5,16
    8324:	180bd43a 	srai	r5,r3,16
    8328:	193fffcc 	andi	r4,r3,65535
    832c:	3947883a 	add	r3,r7,r5
    8330:	180a943a 	slli	r5,r3,16
    8334:	1807d43a 	srai	r3,r3,16
    8338:	2908b03a 	or	r4,r5,r4
    833c:	313fff15 	stw	r4,-4(r6)
    8340:	5a3ff236 	bltu	r11,r8,830c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700830c>
    8344:	0406303a 	nor	r3,zero,r16
    8348:	1a07883a 	add	r3,r3,r8
    834c:	1806d0ba 	srli	r3,r3,2
    8350:	18c00044 	addi	r3,r3,1
    8354:	18c7883a 	add	r3,r3,r3
    8358:	18c7883a 	add	r3,r3,r3
    835c:	50d5883a 	add	r10,r10,r3
    8360:	50ffff04 	addi	r3,r10,-4
    8364:	2000041e 	bne	r4,zero,8378 <__mdiff+0x194>
    8368:	18ffff04 	addi	r3,r3,-4
    836c:	19000017 	ldw	r4,0(r3)
    8370:	4a7fffc4 	addi	r9,r9,-1
    8374:	203ffc26 	beq	r4,zero,8368 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008368>
    8378:	12400415 	stw	r9,16(r2)
    837c:	dfc00517 	ldw	ra,20(sp)
    8380:	dd000417 	ldw	r20,16(sp)
    8384:	dcc00317 	ldw	r19,12(sp)
    8388:	dc800217 	ldw	r18,8(sp)
    838c:	dc400117 	ldw	r17,4(sp)
    8390:	dc000017 	ldw	r16,0(sp)
    8394:	dec00604 	addi	sp,sp,24
    8398:	f800283a 	ret
    839c:	000b883a 	mov	r5,zero
    83a0:	00078bc0 	call	78bc <_Balloc>
    83a4:	00c00044 	movi	r3,1
    83a8:	10c00415 	stw	r3,16(r2)
    83ac:	10000515 	stw	zero,20(r2)
    83b0:	003ff206 	br	837c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700837c>
    83b4:	8023883a 	mov	r17,r16
    83b8:	0029883a 	mov	r20,zero
    83bc:	4021883a 	mov	r16,r8
    83c0:	003fad06 	br	8278 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008278>
    83c4:	9005883a 	mov	r2,r18
    83c8:	94400504 	addi	r17,r18,20
    83cc:	9c000504 	addi	r16,r19,20
    83d0:	9825883a 	mov	r18,r19
    83d4:	05000044 	movi	r20,1
    83d8:	1027883a 	mov	r19,r2
    83dc:	003fa606 	br	8278 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008278>

000083e0 <__ulp>:
    83e0:	295ffc2c 	andhi	r5,r5,32752
    83e4:	00bf3034 	movhi	r2,64704
    83e8:	2887883a 	add	r3,r5,r2
    83ec:	00c0020e 	bge	zero,r3,83f8 <__ulp+0x18>
    83f0:	0005883a 	mov	r2,zero
    83f4:	f800283a 	ret
    83f8:	00c7c83a 	sub	r3,zero,r3
    83fc:	1807d53a 	srai	r3,r3,20
    8400:	008004c4 	movi	r2,19
    8404:	10c00b0e 	bge	r2,r3,8434 <__ulp+0x54>
    8408:	18bffb04 	addi	r2,r3,-20
    840c:	01000784 	movi	r4,30
    8410:	0007883a 	mov	r3,zero
    8414:	20800516 	blt	r4,r2,842c <__ulp+0x4c>
    8418:	010007c4 	movi	r4,31
    841c:	2089c83a 	sub	r4,r4,r2
    8420:	00800044 	movi	r2,1
    8424:	1104983a 	sll	r2,r2,r4
    8428:	f800283a 	ret
    842c:	00800044 	movi	r2,1
    8430:	f800283a 	ret
    8434:	01400234 	movhi	r5,8
    8438:	28c7d83a 	sra	r3,r5,r3
    843c:	0005883a 	mov	r2,zero
    8440:	f800283a 	ret

00008444 <__b2d>:
    8444:	defffa04 	addi	sp,sp,-24
    8448:	dc000015 	stw	r16,0(sp)
    844c:	24000417 	ldw	r16,16(r4)
    8450:	dc400115 	stw	r17,4(sp)
    8454:	24400504 	addi	r17,r4,20
    8458:	8421883a 	add	r16,r16,r16
    845c:	8421883a 	add	r16,r16,r16
    8460:	8c21883a 	add	r16,r17,r16
    8464:	dc800215 	stw	r18,8(sp)
    8468:	84bfff17 	ldw	r18,-4(r16)
    846c:	dd000415 	stw	r20,16(sp)
    8470:	dcc00315 	stw	r19,12(sp)
    8474:	9009883a 	mov	r4,r18
    8478:	2829883a 	mov	r20,r5
    847c:	dfc00515 	stw	ra,20(sp)
    8480:	0007bb00 	call	7bb0 <__hi0bits>
    8484:	00c00804 	movi	r3,32
    8488:	1889c83a 	sub	r4,r3,r2
    848c:	a1000015 	stw	r4,0(r20)
    8490:	01000284 	movi	r4,10
    8494:	84ffff04 	addi	r19,r16,-4
    8498:	20801216 	blt	r4,r2,84e4 <__b2d+0xa0>
    849c:	018002c4 	movi	r6,11
    84a0:	308dc83a 	sub	r6,r6,r2
    84a4:	9186d83a 	srl	r3,r18,r6
    84a8:	18cffc34 	orhi	r3,r3,16368
    84ac:	8cc0212e 	bgeu	r17,r19,8534 <__b2d+0xf0>
    84b0:	813ffe17 	ldw	r4,-8(r16)
    84b4:	218cd83a 	srl	r6,r4,r6
    84b8:	10800544 	addi	r2,r2,21
    84bc:	9084983a 	sll	r2,r18,r2
    84c0:	1184b03a 	or	r2,r2,r6
    84c4:	dfc00517 	ldw	ra,20(sp)
    84c8:	dd000417 	ldw	r20,16(sp)
    84cc:	dcc00317 	ldw	r19,12(sp)
    84d0:	dc800217 	ldw	r18,8(sp)
    84d4:	dc400117 	ldw	r17,4(sp)
    84d8:	dc000017 	ldw	r16,0(sp)
    84dc:	dec00604 	addi	sp,sp,24
    84e0:	f800283a 	ret
    84e4:	8cc00f2e 	bgeu	r17,r19,8524 <__b2d+0xe0>
    84e8:	117ffd44 	addi	r5,r2,-11
    84ec:	80bffe17 	ldw	r2,-8(r16)
    84f0:	28000e26 	beq	r5,zero,852c <__b2d+0xe8>
    84f4:	1949c83a 	sub	r4,r3,r5
    84f8:	9164983a 	sll	r18,r18,r5
    84fc:	1106d83a 	srl	r3,r2,r4
    8500:	81bffe04 	addi	r6,r16,-8
    8504:	948ffc34 	orhi	r18,r18,16368
    8508:	90c6b03a 	or	r3,r18,r3
    850c:	89800e2e 	bgeu	r17,r6,8548 <__b2d+0x104>
    8510:	81bffd17 	ldw	r6,-12(r16)
    8514:	1144983a 	sll	r2,r2,r5
    8518:	310ad83a 	srl	r5,r6,r4
    851c:	2884b03a 	or	r2,r5,r2
    8520:	003fe806 	br	84c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70084c4>
    8524:	10bffd44 	addi	r2,r2,-11
    8528:	1000041e 	bne	r2,zero,853c <__b2d+0xf8>
    852c:	90cffc34 	orhi	r3,r18,16368
    8530:	003fe406 	br	84c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70084c4>
    8534:	000d883a 	mov	r6,zero
    8538:	003fdf06 	br	84b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70084b8>
    853c:	90a4983a 	sll	r18,r18,r2
    8540:	0005883a 	mov	r2,zero
    8544:	003ff906 	br	852c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700852c>
    8548:	1144983a 	sll	r2,r2,r5
    854c:	003fdd06 	br	84c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70084c4>

00008550 <__d2b>:
    8550:	defff804 	addi	sp,sp,-32
    8554:	dc000215 	stw	r16,8(sp)
    8558:	3021883a 	mov	r16,r6
    855c:	dc400315 	stw	r17,12(sp)
    8560:	8022907a 	slli	r17,r16,1
    8564:	dd000615 	stw	r20,24(sp)
    8568:	2829883a 	mov	r20,r5
    856c:	01400044 	movi	r5,1
    8570:	dcc00515 	stw	r19,20(sp)
    8574:	dc800415 	stw	r18,16(sp)
    8578:	dfc00715 	stw	ra,28(sp)
    857c:	3825883a 	mov	r18,r7
    8580:	8822d57a 	srli	r17,r17,21
    8584:	00078bc0 	call	78bc <_Balloc>
    8588:	1027883a 	mov	r19,r2
    858c:	00800434 	movhi	r2,16
    8590:	10bfffc4 	addi	r2,r2,-1
    8594:	808c703a 	and	r6,r16,r2
    8598:	88000126 	beq	r17,zero,85a0 <__d2b+0x50>
    859c:	31800434 	orhi	r6,r6,16
    85a0:	d9800015 	stw	r6,0(sp)
    85a4:	a0002426 	beq	r20,zero,8638 <__d2b+0xe8>
    85a8:	d9000104 	addi	r4,sp,4
    85ac:	dd000115 	stw	r20,4(sp)
    85b0:	0007c180 	call	7c18 <__lo0bits>
    85b4:	d8c00017 	ldw	r3,0(sp)
    85b8:	10002f1e 	bne	r2,zero,8678 <__d2b+0x128>
    85bc:	d9000117 	ldw	r4,4(sp)
    85c0:	99000515 	stw	r4,20(r19)
    85c4:	1821003a 	cmpeq	r16,r3,zero
    85c8:	01000084 	movi	r4,2
    85cc:	2421c83a 	sub	r16,r4,r16
    85d0:	98c00615 	stw	r3,24(r19)
    85d4:	9c000415 	stw	r16,16(r19)
    85d8:	88001f1e 	bne	r17,zero,8658 <__d2b+0x108>
    85dc:	10bef384 	addi	r2,r2,-1074
    85e0:	90800015 	stw	r2,0(r18)
    85e4:	00900034 	movhi	r2,16384
    85e8:	10bfffc4 	addi	r2,r2,-1
    85ec:	8085883a 	add	r2,r16,r2
    85f0:	1085883a 	add	r2,r2,r2
    85f4:	1085883a 	add	r2,r2,r2
    85f8:	9885883a 	add	r2,r19,r2
    85fc:	11000517 	ldw	r4,20(r2)
    8600:	8020917a 	slli	r16,r16,5
    8604:	0007bb00 	call	7bb0 <__hi0bits>
    8608:	d8c00817 	ldw	r3,32(sp)
    860c:	8085c83a 	sub	r2,r16,r2
    8610:	18800015 	stw	r2,0(r3)
    8614:	9805883a 	mov	r2,r19
    8618:	dfc00717 	ldw	ra,28(sp)
    861c:	dd000617 	ldw	r20,24(sp)
    8620:	dcc00517 	ldw	r19,20(sp)
    8624:	dc800417 	ldw	r18,16(sp)
    8628:	dc400317 	ldw	r17,12(sp)
    862c:	dc000217 	ldw	r16,8(sp)
    8630:	dec00804 	addi	sp,sp,32
    8634:	f800283a 	ret
    8638:	d809883a 	mov	r4,sp
    863c:	0007c180 	call	7c18 <__lo0bits>
    8640:	d8c00017 	ldw	r3,0(sp)
    8644:	04000044 	movi	r16,1
    8648:	9c000415 	stw	r16,16(r19)
    864c:	98c00515 	stw	r3,20(r19)
    8650:	10800804 	addi	r2,r2,32
    8654:	883fe126 	beq	r17,zero,85dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70085dc>
    8658:	00c00d44 	movi	r3,53
    865c:	8c7ef344 	addi	r17,r17,-1075
    8660:	88a3883a 	add	r17,r17,r2
    8664:	1885c83a 	sub	r2,r3,r2
    8668:	d8c00817 	ldw	r3,32(sp)
    866c:	94400015 	stw	r17,0(r18)
    8670:	18800015 	stw	r2,0(r3)
    8674:	003fe706 	br	8614 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008614>
    8678:	01000804 	movi	r4,32
    867c:	2089c83a 	sub	r4,r4,r2
    8680:	1908983a 	sll	r4,r3,r4
    8684:	d9400117 	ldw	r5,4(sp)
    8688:	1886d83a 	srl	r3,r3,r2
    868c:	2148b03a 	or	r4,r4,r5
    8690:	99000515 	stw	r4,20(r19)
    8694:	d8c00015 	stw	r3,0(sp)
    8698:	003fca06 	br	85c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70085c4>

0000869c <__ratio>:
    869c:	defff904 	addi	sp,sp,-28
    86a0:	dc400315 	stw	r17,12(sp)
    86a4:	2823883a 	mov	r17,r5
    86a8:	d9400104 	addi	r5,sp,4
    86ac:	dfc00615 	stw	ra,24(sp)
    86b0:	dcc00515 	stw	r19,20(sp)
    86b4:	dc800415 	stw	r18,16(sp)
    86b8:	2027883a 	mov	r19,r4
    86bc:	dc000215 	stw	r16,8(sp)
    86c0:	00084440 	call	8444 <__b2d>
    86c4:	d80b883a 	mov	r5,sp
    86c8:	8809883a 	mov	r4,r17
    86cc:	1025883a 	mov	r18,r2
    86d0:	1821883a 	mov	r16,r3
    86d4:	00084440 	call	8444 <__b2d>
    86d8:	8a000417 	ldw	r8,16(r17)
    86dc:	99000417 	ldw	r4,16(r19)
    86e0:	d9400117 	ldw	r5,4(sp)
    86e4:	2209c83a 	sub	r4,r4,r8
    86e8:	2010917a 	slli	r8,r4,5
    86ec:	d9000017 	ldw	r4,0(sp)
    86f0:	2909c83a 	sub	r4,r5,r4
    86f4:	4109883a 	add	r4,r8,r4
    86f8:	01000e0e 	bge	zero,r4,8734 <__ratio+0x98>
    86fc:	2008953a 	slli	r4,r4,20
    8700:	2421883a 	add	r16,r4,r16
    8704:	100d883a 	mov	r6,r2
    8708:	180f883a 	mov	r7,r3
    870c:	9009883a 	mov	r4,r18
    8710:	800b883a 	mov	r5,r16
    8714:	000c5880 	call	c588 <__divdf3>
    8718:	dfc00617 	ldw	ra,24(sp)
    871c:	dcc00517 	ldw	r19,20(sp)
    8720:	dc800417 	ldw	r18,16(sp)
    8724:	dc400317 	ldw	r17,12(sp)
    8728:	dc000217 	ldw	r16,8(sp)
    872c:	dec00704 	addi	sp,sp,28
    8730:	f800283a 	ret
    8734:	2008953a 	slli	r4,r4,20
    8738:	1907c83a 	sub	r3,r3,r4
    873c:	003ff106 	br	8704 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008704>

00008740 <_mprec_log10>:
    8740:	defffe04 	addi	sp,sp,-8
    8744:	dc000015 	stw	r16,0(sp)
    8748:	dfc00115 	stw	ra,4(sp)
    874c:	008005c4 	movi	r2,23
    8750:	2021883a 	mov	r16,r4
    8754:	11000d0e 	bge	r2,r4,878c <_mprec_log10+0x4c>
    8758:	0005883a 	mov	r2,zero
    875c:	00cffc34 	movhi	r3,16368
    8760:	843fffc4 	addi	r16,r16,-1
    8764:	000d883a 	mov	r6,zero
    8768:	01d00934 	movhi	r7,16420
    876c:	1009883a 	mov	r4,r2
    8770:	180b883a 	mov	r5,r3
    8774:	000d0c80 	call	d0c8 <__muldf3>
    8778:	803ff91e 	bne	r16,zero,8760 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008760>
    877c:	dfc00117 	ldw	ra,4(sp)
    8780:	dc000017 	ldw	r16,0(sp)
    8784:	dec00204 	addi	sp,sp,8
    8788:	f800283a 	ret
    878c:	202090fa 	slli	r16,r4,3
    8790:	008000b4 	movhi	r2,2
    8794:	10abc504 	addi	r2,r2,-20716
    8798:	1421883a 	add	r16,r2,r16
    879c:	80800017 	ldw	r2,0(r16)
    87a0:	80c00117 	ldw	r3,4(r16)
    87a4:	dfc00117 	ldw	ra,4(sp)
    87a8:	dc000017 	ldw	r16,0(sp)
    87ac:	dec00204 	addi	sp,sp,8
    87b0:	f800283a 	ret

000087b4 <__copybits>:
    87b4:	297fffc4 	addi	r5,r5,-1
    87b8:	280fd17a 	srai	r7,r5,5
    87bc:	30c00417 	ldw	r3,16(r6)
    87c0:	30800504 	addi	r2,r6,20
    87c4:	39c00044 	addi	r7,r7,1
    87c8:	18c7883a 	add	r3,r3,r3
    87cc:	39cf883a 	add	r7,r7,r7
    87d0:	18c7883a 	add	r3,r3,r3
    87d4:	39cf883a 	add	r7,r7,r7
    87d8:	10c7883a 	add	r3,r2,r3
    87dc:	21cf883a 	add	r7,r4,r7
    87e0:	10c00d2e 	bgeu	r2,r3,8818 <__copybits+0x64>
    87e4:	200b883a 	mov	r5,r4
    87e8:	12000017 	ldw	r8,0(r2)
    87ec:	29400104 	addi	r5,r5,4
    87f0:	10800104 	addi	r2,r2,4
    87f4:	2a3fff15 	stw	r8,-4(r5)
    87f8:	10fffb36 	bltu	r2,r3,87e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70087e8>
    87fc:	1985c83a 	sub	r2,r3,r6
    8800:	10bffac4 	addi	r2,r2,-21
    8804:	1004d0ba 	srli	r2,r2,2
    8808:	10800044 	addi	r2,r2,1
    880c:	1085883a 	add	r2,r2,r2
    8810:	1085883a 	add	r2,r2,r2
    8814:	2089883a 	add	r4,r4,r2
    8818:	21c0032e 	bgeu	r4,r7,8828 <__copybits+0x74>
    881c:	20000015 	stw	zero,0(r4)
    8820:	21000104 	addi	r4,r4,4
    8824:	21fffd36 	bltu	r4,r7,881c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700881c>
    8828:	f800283a 	ret

0000882c <__any_on>:
    882c:	20c00417 	ldw	r3,16(r4)
    8830:	2805d17a 	srai	r2,r5,5
    8834:	21000504 	addi	r4,r4,20
    8838:	18800d0e 	bge	r3,r2,8870 <__any_on+0x44>
    883c:	18c7883a 	add	r3,r3,r3
    8840:	18c7883a 	add	r3,r3,r3
    8844:	20c7883a 	add	r3,r4,r3
    8848:	20c0192e 	bgeu	r4,r3,88b0 <__any_on+0x84>
    884c:	18bfff17 	ldw	r2,-4(r3)
    8850:	18ffff04 	addi	r3,r3,-4
    8854:	1000041e 	bne	r2,zero,8868 <__any_on+0x3c>
    8858:	20c0142e 	bgeu	r4,r3,88ac <__any_on+0x80>
    885c:	18ffff04 	addi	r3,r3,-4
    8860:	19400017 	ldw	r5,0(r3)
    8864:	283ffc26 	beq	r5,zero,8858 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008858>
    8868:	00800044 	movi	r2,1
    886c:	f800283a 	ret
    8870:	10c00a0e 	bge	r2,r3,889c <__any_on+0x70>
    8874:	1085883a 	add	r2,r2,r2
    8878:	1085883a 	add	r2,r2,r2
    887c:	294007cc 	andi	r5,r5,31
    8880:	2087883a 	add	r3,r4,r2
    8884:	283ff026 	beq	r5,zero,8848 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008848>
    8888:	19800017 	ldw	r6,0(r3)
    888c:	3144d83a 	srl	r2,r6,r5
    8890:	114a983a 	sll	r5,r2,r5
    8894:	317ff41e 	bne	r6,r5,8868 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008868>
    8898:	003feb06 	br	8848 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008848>
    889c:	1085883a 	add	r2,r2,r2
    88a0:	1085883a 	add	r2,r2,r2
    88a4:	2087883a 	add	r3,r4,r2
    88a8:	003fe706 	br	8848 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008848>
    88ac:	f800283a 	ret
    88b0:	0005883a 	mov	r2,zero
    88b4:	f800283a 	ret

000088b8 <_realloc_r>:
    88b8:	defff604 	addi	sp,sp,-40
    88bc:	dc800215 	stw	r18,8(sp)
    88c0:	dfc00915 	stw	ra,36(sp)
    88c4:	df000815 	stw	fp,32(sp)
    88c8:	ddc00715 	stw	r23,28(sp)
    88cc:	dd800615 	stw	r22,24(sp)
    88d0:	dd400515 	stw	r21,20(sp)
    88d4:	dd000415 	stw	r20,16(sp)
    88d8:	dcc00315 	stw	r19,12(sp)
    88dc:	dc400115 	stw	r17,4(sp)
    88e0:	dc000015 	stw	r16,0(sp)
    88e4:	3025883a 	mov	r18,r6
    88e8:	2800b726 	beq	r5,zero,8bc8 <_realloc_r+0x310>
    88ec:	282b883a 	mov	r21,r5
    88f0:	2029883a 	mov	r20,r4
    88f4:	000eda40 	call	eda4 <__malloc_lock>
    88f8:	a8bfff17 	ldw	r2,-4(r21)
    88fc:	043fff04 	movi	r16,-4
    8900:	90c002c4 	addi	r3,r18,11
    8904:	01000584 	movi	r4,22
    8908:	acfffe04 	addi	r19,r21,-8
    890c:	1420703a 	and	r16,r2,r16
    8910:	20c0332e 	bgeu	r4,r3,89e0 <_realloc_r+0x128>
    8914:	047ffe04 	movi	r17,-8
    8918:	1c62703a 	and	r17,r3,r17
    891c:	8807883a 	mov	r3,r17
    8920:	88005816 	blt	r17,zero,8a84 <_realloc_r+0x1cc>
    8924:	8c805736 	bltu	r17,r18,8a84 <_realloc_r+0x1cc>
    8928:	80c0300e 	bge	r16,r3,89ec <_realloc_r+0x134>
    892c:	070000b4 	movhi	fp,2
    8930:	e72e5104 	addi	fp,fp,-18108
    8934:	e1c00217 	ldw	r7,8(fp)
    8938:	9c09883a 	add	r4,r19,r16
    893c:	22000117 	ldw	r8,4(r4)
    8940:	21c06326 	beq	r4,r7,8ad0 <_realloc_r+0x218>
    8944:	017fff84 	movi	r5,-2
    8948:	414a703a 	and	r5,r8,r5
    894c:	214b883a 	add	r5,r4,r5
    8950:	29800117 	ldw	r6,4(r5)
    8954:	3180004c 	andi	r6,r6,1
    8958:	30003f26 	beq	r6,zero,8a58 <_realloc_r+0x1a0>
    895c:	1080004c 	andi	r2,r2,1
    8960:	10008326 	beq	r2,zero,8b70 <_realloc_r+0x2b8>
    8964:	900b883a 	mov	r5,r18
    8968:	a009883a 	mov	r4,r20
    896c:	0006c000 	call	6c00 <_malloc_r>
    8970:	1025883a 	mov	r18,r2
    8974:	10011e26 	beq	r2,zero,8df0 <_realloc_r+0x538>
    8978:	a93fff17 	ldw	r4,-4(r21)
    897c:	10fffe04 	addi	r3,r2,-8
    8980:	00bfff84 	movi	r2,-2
    8984:	2084703a 	and	r2,r4,r2
    8988:	9885883a 	add	r2,r19,r2
    898c:	1880ee26 	beq	r3,r2,8d48 <_realloc_r+0x490>
    8990:	81bfff04 	addi	r6,r16,-4
    8994:	00800904 	movi	r2,36
    8998:	1180b836 	bltu	r2,r6,8c7c <_realloc_r+0x3c4>
    899c:	00c004c4 	movi	r3,19
    89a0:	19809636 	bltu	r3,r6,8bfc <_realloc_r+0x344>
    89a4:	9005883a 	mov	r2,r18
    89a8:	a807883a 	mov	r3,r21
    89ac:	19000017 	ldw	r4,0(r3)
    89b0:	11000015 	stw	r4,0(r2)
    89b4:	19000117 	ldw	r4,4(r3)
    89b8:	11000115 	stw	r4,4(r2)
    89bc:	18c00217 	ldw	r3,8(r3)
    89c0:	10c00215 	stw	r3,8(r2)
    89c4:	a80b883a 	mov	r5,r21
    89c8:	a009883a 	mov	r4,r20
    89cc:	00060140 	call	6014 <_free_r>
    89d0:	a009883a 	mov	r4,r20
    89d4:	000eec40 	call	eec4 <__malloc_unlock>
    89d8:	9005883a 	mov	r2,r18
    89dc:	00001206 	br	8a28 <_realloc_r+0x170>
    89e0:	00c00404 	movi	r3,16
    89e4:	1823883a 	mov	r17,r3
    89e8:	003fce06 	br	8924 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008924>
    89ec:	a825883a 	mov	r18,r21
    89f0:	8445c83a 	sub	r2,r16,r17
    89f4:	00c003c4 	movi	r3,15
    89f8:	18802636 	bltu	r3,r2,8a94 <_realloc_r+0x1dc>
    89fc:	99800117 	ldw	r6,4(r19)
    8a00:	9c07883a 	add	r3,r19,r16
    8a04:	3180004c 	andi	r6,r6,1
    8a08:	3420b03a 	or	r16,r6,r16
    8a0c:	9c000115 	stw	r16,4(r19)
    8a10:	18800117 	ldw	r2,4(r3)
    8a14:	10800054 	ori	r2,r2,1
    8a18:	18800115 	stw	r2,4(r3)
    8a1c:	a009883a 	mov	r4,r20
    8a20:	000eec40 	call	eec4 <__malloc_unlock>
    8a24:	9005883a 	mov	r2,r18
    8a28:	dfc00917 	ldw	ra,36(sp)
    8a2c:	df000817 	ldw	fp,32(sp)
    8a30:	ddc00717 	ldw	r23,28(sp)
    8a34:	dd800617 	ldw	r22,24(sp)
    8a38:	dd400517 	ldw	r21,20(sp)
    8a3c:	dd000417 	ldw	r20,16(sp)
    8a40:	dcc00317 	ldw	r19,12(sp)
    8a44:	dc800217 	ldw	r18,8(sp)
    8a48:	dc400117 	ldw	r17,4(sp)
    8a4c:	dc000017 	ldw	r16,0(sp)
    8a50:	dec00a04 	addi	sp,sp,40
    8a54:	f800283a 	ret
    8a58:	017fff04 	movi	r5,-4
    8a5c:	414a703a 	and	r5,r8,r5
    8a60:	814d883a 	add	r6,r16,r5
    8a64:	30c01f16 	blt	r6,r3,8ae4 <_realloc_r+0x22c>
    8a68:	20800317 	ldw	r2,12(r4)
    8a6c:	20c00217 	ldw	r3,8(r4)
    8a70:	a825883a 	mov	r18,r21
    8a74:	3021883a 	mov	r16,r6
    8a78:	18800315 	stw	r2,12(r3)
    8a7c:	10c00215 	stw	r3,8(r2)
    8a80:	003fdb06 	br	89f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70089f0>
    8a84:	00800304 	movi	r2,12
    8a88:	a0800015 	stw	r2,0(r20)
    8a8c:	0005883a 	mov	r2,zero
    8a90:	003fe506 	br	8a28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a28>
    8a94:	98c00117 	ldw	r3,4(r19)
    8a98:	9c4b883a 	add	r5,r19,r17
    8a9c:	11000054 	ori	r4,r2,1
    8aa0:	18c0004c 	andi	r3,r3,1
    8aa4:	1c62b03a 	or	r17,r3,r17
    8aa8:	9c400115 	stw	r17,4(r19)
    8aac:	29000115 	stw	r4,4(r5)
    8ab0:	2885883a 	add	r2,r5,r2
    8ab4:	10c00117 	ldw	r3,4(r2)
    8ab8:	29400204 	addi	r5,r5,8
    8abc:	a009883a 	mov	r4,r20
    8ac0:	18c00054 	ori	r3,r3,1
    8ac4:	10c00115 	stw	r3,4(r2)
    8ac8:	00060140 	call	6014 <_free_r>
    8acc:	003fd306 	br	8a1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a1c>
    8ad0:	017fff04 	movi	r5,-4
    8ad4:	414a703a 	and	r5,r8,r5
    8ad8:	89800404 	addi	r6,r17,16
    8adc:	8151883a 	add	r8,r16,r5
    8ae0:	4180590e 	bge	r8,r6,8c48 <_realloc_r+0x390>
    8ae4:	1080004c 	andi	r2,r2,1
    8ae8:	103f9e1e 	bne	r2,zero,8964 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008964>
    8aec:	adbffe17 	ldw	r22,-8(r21)
    8af0:	00bfff04 	movi	r2,-4
    8af4:	9dadc83a 	sub	r22,r19,r22
    8af8:	b1800117 	ldw	r6,4(r22)
    8afc:	3084703a 	and	r2,r6,r2
    8b00:	20002026 	beq	r4,zero,8b84 <_realloc_r+0x2cc>
    8b04:	80af883a 	add	r23,r16,r2
    8b08:	b96f883a 	add	r23,r23,r5
    8b0c:	21c05f26 	beq	r4,r7,8c8c <_realloc_r+0x3d4>
    8b10:	b8c01c16 	blt	r23,r3,8b84 <_realloc_r+0x2cc>
    8b14:	20800317 	ldw	r2,12(r4)
    8b18:	20c00217 	ldw	r3,8(r4)
    8b1c:	81bfff04 	addi	r6,r16,-4
    8b20:	01000904 	movi	r4,36
    8b24:	18800315 	stw	r2,12(r3)
    8b28:	10c00215 	stw	r3,8(r2)
    8b2c:	b0c00217 	ldw	r3,8(r22)
    8b30:	b0800317 	ldw	r2,12(r22)
    8b34:	b4800204 	addi	r18,r22,8
    8b38:	18800315 	stw	r2,12(r3)
    8b3c:	10c00215 	stw	r3,8(r2)
    8b40:	21801b36 	bltu	r4,r6,8bb0 <_realloc_r+0x2f8>
    8b44:	008004c4 	movi	r2,19
    8b48:	1180352e 	bgeu	r2,r6,8c20 <_realloc_r+0x368>
    8b4c:	a8800017 	ldw	r2,0(r21)
    8b50:	b0800215 	stw	r2,8(r22)
    8b54:	a8800117 	ldw	r2,4(r21)
    8b58:	b0800315 	stw	r2,12(r22)
    8b5c:	008006c4 	movi	r2,27
    8b60:	11807f36 	bltu	r2,r6,8d60 <_realloc_r+0x4a8>
    8b64:	b0800404 	addi	r2,r22,16
    8b68:	ad400204 	addi	r21,r21,8
    8b6c:	00002d06 	br	8c24 <_realloc_r+0x36c>
    8b70:	adbffe17 	ldw	r22,-8(r21)
    8b74:	00bfff04 	movi	r2,-4
    8b78:	9dadc83a 	sub	r22,r19,r22
    8b7c:	b1000117 	ldw	r4,4(r22)
    8b80:	2084703a 	and	r2,r4,r2
    8b84:	b03f7726 	beq	r22,zero,8964 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008964>
    8b88:	80af883a 	add	r23,r16,r2
    8b8c:	b8ff7516 	blt	r23,r3,8964 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008964>
    8b90:	b0800317 	ldw	r2,12(r22)
    8b94:	b0c00217 	ldw	r3,8(r22)
    8b98:	81bfff04 	addi	r6,r16,-4
    8b9c:	01000904 	movi	r4,36
    8ba0:	18800315 	stw	r2,12(r3)
    8ba4:	10c00215 	stw	r3,8(r2)
    8ba8:	b4800204 	addi	r18,r22,8
    8bac:	21bfe52e 	bgeu	r4,r6,8b44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008b44>
    8bb0:	a80b883a 	mov	r5,r21
    8bb4:	9009883a 	mov	r4,r18
    8bb8:	00076380 	call	7638 <memmove>
    8bbc:	b821883a 	mov	r16,r23
    8bc0:	b027883a 	mov	r19,r22
    8bc4:	003f8a06 	br	89f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70089f0>
    8bc8:	300b883a 	mov	r5,r6
    8bcc:	dfc00917 	ldw	ra,36(sp)
    8bd0:	df000817 	ldw	fp,32(sp)
    8bd4:	ddc00717 	ldw	r23,28(sp)
    8bd8:	dd800617 	ldw	r22,24(sp)
    8bdc:	dd400517 	ldw	r21,20(sp)
    8be0:	dd000417 	ldw	r20,16(sp)
    8be4:	dcc00317 	ldw	r19,12(sp)
    8be8:	dc800217 	ldw	r18,8(sp)
    8bec:	dc400117 	ldw	r17,4(sp)
    8bf0:	dc000017 	ldw	r16,0(sp)
    8bf4:	dec00a04 	addi	sp,sp,40
    8bf8:	0006c001 	jmpi	6c00 <_malloc_r>
    8bfc:	a8c00017 	ldw	r3,0(r21)
    8c00:	90c00015 	stw	r3,0(r18)
    8c04:	a8c00117 	ldw	r3,4(r21)
    8c08:	90c00115 	stw	r3,4(r18)
    8c0c:	00c006c4 	movi	r3,27
    8c10:	19804536 	bltu	r3,r6,8d28 <_realloc_r+0x470>
    8c14:	90800204 	addi	r2,r18,8
    8c18:	a8c00204 	addi	r3,r21,8
    8c1c:	003f6306 	br	89ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70089ac>
    8c20:	9005883a 	mov	r2,r18
    8c24:	a8c00017 	ldw	r3,0(r21)
    8c28:	b821883a 	mov	r16,r23
    8c2c:	b027883a 	mov	r19,r22
    8c30:	10c00015 	stw	r3,0(r2)
    8c34:	a8c00117 	ldw	r3,4(r21)
    8c38:	10c00115 	stw	r3,4(r2)
    8c3c:	a8c00217 	ldw	r3,8(r21)
    8c40:	10c00215 	stw	r3,8(r2)
    8c44:	003f6a06 	br	89f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70089f0>
    8c48:	9c67883a 	add	r19,r19,r17
    8c4c:	4445c83a 	sub	r2,r8,r17
    8c50:	e4c00215 	stw	r19,8(fp)
    8c54:	10800054 	ori	r2,r2,1
    8c58:	98800115 	stw	r2,4(r19)
    8c5c:	a8bfff17 	ldw	r2,-4(r21)
    8c60:	a009883a 	mov	r4,r20
    8c64:	1080004c 	andi	r2,r2,1
    8c68:	1462b03a 	or	r17,r2,r17
    8c6c:	ac7fff15 	stw	r17,-4(r21)
    8c70:	000eec40 	call	eec4 <__malloc_unlock>
    8c74:	a805883a 	mov	r2,r21
    8c78:	003f6b06 	br	8a28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a28>
    8c7c:	a80b883a 	mov	r5,r21
    8c80:	9009883a 	mov	r4,r18
    8c84:	00076380 	call	7638 <memmove>
    8c88:	003f4e06 	br	89c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70089c4>
    8c8c:	89000404 	addi	r4,r17,16
    8c90:	b93fbc16 	blt	r23,r4,8b84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008b84>
    8c94:	b0800317 	ldw	r2,12(r22)
    8c98:	b0c00217 	ldw	r3,8(r22)
    8c9c:	81bfff04 	addi	r6,r16,-4
    8ca0:	01000904 	movi	r4,36
    8ca4:	18800315 	stw	r2,12(r3)
    8ca8:	10c00215 	stw	r3,8(r2)
    8cac:	b4800204 	addi	r18,r22,8
    8cb0:	21804336 	bltu	r4,r6,8dc0 <_realloc_r+0x508>
    8cb4:	008004c4 	movi	r2,19
    8cb8:	11803f2e 	bgeu	r2,r6,8db8 <_realloc_r+0x500>
    8cbc:	a8800017 	ldw	r2,0(r21)
    8cc0:	b0800215 	stw	r2,8(r22)
    8cc4:	a8800117 	ldw	r2,4(r21)
    8cc8:	b0800315 	stw	r2,12(r22)
    8ccc:	008006c4 	movi	r2,27
    8cd0:	11803f36 	bltu	r2,r6,8dd0 <_realloc_r+0x518>
    8cd4:	b0800404 	addi	r2,r22,16
    8cd8:	ad400204 	addi	r21,r21,8
    8cdc:	a8c00017 	ldw	r3,0(r21)
    8ce0:	10c00015 	stw	r3,0(r2)
    8ce4:	a8c00117 	ldw	r3,4(r21)
    8ce8:	10c00115 	stw	r3,4(r2)
    8cec:	a8c00217 	ldw	r3,8(r21)
    8cf0:	10c00215 	stw	r3,8(r2)
    8cf4:	b447883a 	add	r3,r22,r17
    8cf8:	bc45c83a 	sub	r2,r23,r17
    8cfc:	e0c00215 	stw	r3,8(fp)
    8d00:	10800054 	ori	r2,r2,1
    8d04:	18800115 	stw	r2,4(r3)
    8d08:	b0800117 	ldw	r2,4(r22)
    8d0c:	a009883a 	mov	r4,r20
    8d10:	1080004c 	andi	r2,r2,1
    8d14:	1462b03a 	or	r17,r2,r17
    8d18:	b4400115 	stw	r17,4(r22)
    8d1c:	000eec40 	call	eec4 <__malloc_unlock>
    8d20:	9005883a 	mov	r2,r18
    8d24:	003f4006 	br	8a28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a28>
    8d28:	a8c00217 	ldw	r3,8(r21)
    8d2c:	90c00215 	stw	r3,8(r18)
    8d30:	a8c00317 	ldw	r3,12(r21)
    8d34:	90c00315 	stw	r3,12(r18)
    8d38:	30801126 	beq	r6,r2,8d80 <_realloc_r+0x4c8>
    8d3c:	90800404 	addi	r2,r18,16
    8d40:	a8c00404 	addi	r3,r21,16
    8d44:	003f1906 	br	89ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70089ac>
    8d48:	90ffff17 	ldw	r3,-4(r18)
    8d4c:	00bfff04 	movi	r2,-4
    8d50:	a825883a 	mov	r18,r21
    8d54:	1884703a 	and	r2,r3,r2
    8d58:	80a1883a 	add	r16,r16,r2
    8d5c:	003f2406 	br	89f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70089f0>
    8d60:	a8800217 	ldw	r2,8(r21)
    8d64:	b0800415 	stw	r2,16(r22)
    8d68:	a8800317 	ldw	r2,12(r21)
    8d6c:	b0800515 	stw	r2,20(r22)
    8d70:	31000a26 	beq	r6,r4,8d9c <_realloc_r+0x4e4>
    8d74:	b0800604 	addi	r2,r22,24
    8d78:	ad400404 	addi	r21,r21,16
    8d7c:	003fa906 	br	8c24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008c24>
    8d80:	a9000417 	ldw	r4,16(r21)
    8d84:	90800604 	addi	r2,r18,24
    8d88:	a8c00604 	addi	r3,r21,24
    8d8c:	91000415 	stw	r4,16(r18)
    8d90:	a9000517 	ldw	r4,20(r21)
    8d94:	91000515 	stw	r4,20(r18)
    8d98:	003f0406 	br	89ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70089ac>
    8d9c:	a8c00417 	ldw	r3,16(r21)
    8da0:	ad400604 	addi	r21,r21,24
    8da4:	b0800804 	addi	r2,r22,32
    8da8:	b0c00615 	stw	r3,24(r22)
    8dac:	a8ffff17 	ldw	r3,-4(r21)
    8db0:	b0c00715 	stw	r3,28(r22)
    8db4:	003f9b06 	br	8c24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008c24>
    8db8:	9005883a 	mov	r2,r18
    8dbc:	003fc706 	br	8cdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008cdc>
    8dc0:	a80b883a 	mov	r5,r21
    8dc4:	9009883a 	mov	r4,r18
    8dc8:	00076380 	call	7638 <memmove>
    8dcc:	003fc906 	br	8cf4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008cf4>
    8dd0:	a8800217 	ldw	r2,8(r21)
    8dd4:	b0800415 	stw	r2,16(r22)
    8dd8:	a8800317 	ldw	r2,12(r21)
    8ddc:	b0800515 	stw	r2,20(r22)
    8de0:	31000726 	beq	r6,r4,8e00 <_realloc_r+0x548>
    8de4:	b0800604 	addi	r2,r22,24
    8de8:	ad400404 	addi	r21,r21,16
    8dec:	003fbb06 	br	8cdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008cdc>
    8df0:	a009883a 	mov	r4,r20
    8df4:	000eec40 	call	eec4 <__malloc_unlock>
    8df8:	0005883a 	mov	r2,zero
    8dfc:	003f0a06 	br	8a28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a28>
    8e00:	a8c00417 	ldw	r3,16(r21)
    8e04:	ad400604 	addi	r21,r21,24
    8e08:	b0800804 	addi	r2,r22,32
    8e0c:	b0c00615 	stw	r3,24(r22)
    8e10:	a8ffff17 	ldw	r3,-4(r21)
    8e14:	b0c00715 	stw	r3,28(r22)
    8e18:	003fb006 	br	8cdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008cdc>

00008e1c <__fpclassifyd>:
    8e1c:	00a00034 	movhi	r2,32768
    8e20:	10bfffc4 	addi	r2,r2,-1
    8e24:	2884703a 	and	r2,r5,r2
    8e28:	10000726 	beq	r2,zero,8e48 <__fpclassifyd+0x2c>
    8e2c:	00fffc34 	movhi	r3,65520
    8e30:	019ff834 	movhi	r6,32736
    8e34:	28c7883a 	add	r3,r5,r3
    8e38:	31bfffc4 	addi	r6,r6,-1
    8e3c:	30c00536 	bltu	r6,r3,8e54 <__fpclassifyd+0x38>
    8e40:	00800104 	movi	r2,4
    8e44:	f800283a 	ret
    8e48:	2000021e 	bne	r4,zero,8e54 <__fpclassifyd+0x38>
    8e4c:	00800084 	movi	r2,2
    8e50:	f800283a 	ret
    8e54:	00dffc34 	movhi	r3,32752
    8e58:	019ff834 	movhi	r6,32736
    8e5c:	28cb883a 	add	r5,r5,r3
    8e60:	31bfffc4 	addi	r6,r6,-1
    8e64:	317ff62e 	bgeu	r6,r5,8e40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008e40>
    8e68:	01400434 	movhi	r5,16
    8e6c:	297fffc4 	addi	r5,r5,-1
    8e70:	28800236 	bltu	r5,r2,8e7c <__fpclassifyd+0x60>
    8e74:	008000c4 	movi	r2,3
    8e78:	f800283a 	ret
    8e7c:	10c00226 	beq	r2,r3,8e88 <__fpclassifyd+0x6c>
    8e80:	0005883a 	mov	r2,zero
    8e84:	f800283a 	ret
    8e88:	2005003a 	cmpeq	r2,r4,zero
    8e8c:	f800283a 	ret

00008e90 <_sbrk_r>:
    8e90:	defffd04 	addi	sp,sp,-12
    8e94:	dc000015 	stw	r16,0(sp)
    8e98:	040000b4 	movhi	r16,2
    8e9c:	dc400115 	stw	r17,4(sp)
    8ea0:	843cca04 	addi	r16,r16,-3288
    8ea4:	2023883a 	mov	r17,r4
    8ea8:	2809883a 	mov	r4,r5
    8eac:	dfc00215 	stw	ra,8(sp)
    8eb0:	80000015 	stw	zero,0(r16)
    8eb4:	000ea9c0 	call	ea9c <sbrk>
    8eb8:	00ffffc4 	movi	r3,-1
    8ebc:	10c00526 	beq	r2,r3,8ed4 <_sbrk_r+0x44>
    8ec0:	dfc00217 	ldw	ra,8(sp)
    8ec4:	dc400117 	ldw	r17,4(sp)
    8ec8:	dc000017 	ldw	r16,0(sp)
    8ecc:	dec00304 	addi	sp,sp,12
    8ed0:	f800283a 	ret
    8ed4:	80c00017 	ldw	r3,0(r16)
    8ed8:	183ff926 	beq	r3,zero,8ec0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008ec0>
    8edc:	88c00015 	stw	r3,0(r17)
    8ee0:	003ff706 	br	8ec0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008ec0>

00008ee4 <__sread>:
    8ee4:	defffe04 	addi	sp,sp,-8
    8ee8:	dc000015 	stw	r16,0(sp)
    8eec:	2821883a 	mov	r16,r5
    8ef0:	2940038f 	ldh	r5,14(r5)
    8ef4:	dfc00115 	stw	ra,4(sp)
    8ef8:	000acd80 	call	acd8 <_read_r>
    8efc:	10000716 	blt	r2,zero,8f1c <__sread+0x38>
    8f00:	80c01417 	ldw	r3,80(r16)
    8f04:	1887883a 	add	r3,r3,r2
    8f08:	80c01415 	stw	r3,80(r16)
    8f0c:	dfc00117 	ldw	ra,4(sp)
    8f10:	dc000017 	ldw	r16,0(sp)
    8f14:	dec00204 	addi	sp,sp,8
    8f18:	f800283a 	ret
    8f1c:	80c0030b 	ldhu	r3,12(r16)
    8f20:	18fbffcc 	andi	r3,r3,61439
    8f24:	80c0030d 	sth	r3,12(r16)
    8f28:	dfc00117 	ldw	ra,4(sp)
    8f2c:	dc000017 	ldw	r16,0(sp)
    8f30:	dec00204 	addi	sp,sp,8
    8f34:	f800283a 	ret

00008f38 <__seofread>:
    8f38:	0005883a 	mov	r2,zero
    8f3c:	f800283a 	ret

00008f40 <__swrite>:
    8f40:	2880030b 	ldhu	r2,12(r5)
    8f44:	defffb04 	addi	sp,sp,-20
    8f48:	dcc00315 	stw	r19,12(sp)
    8f4c:	dc800215 	stw	r18,8(sp)
    8f50:	dc400115 	stw	r17,4(sp)
    8f54:	dc000015 	stw	r16,0(sp)
    8f58:	dfc00415 	stw	ra,16(sp)
    8f5c:	10c0400c 	andi	r3,r2,256
    8f60:	2821883a 	mov	r16,r5
    8f64:	2023883a 	mov	r17,r4
    8f68:	3025883a 	mov	r18,r6
    8f6c:	3827883a 	mov	r19,r7
    8f70:	18000526 	beq	r3,zero,8f88 <__swrite+0x48>
    8f74:	2940038f 	ldh	r5,14(r5)
    8f78:	01c00084 	movi	r7,2
    8f7c:	000d883a 	mov	r6,zero
    8f80:	000ac780 	call	ac78 <_lseek_r>
    8f84:	8080030b 	ldhu	r2,12(r16)
    8f88:	8140038f 	ldh	r5,14(r16)
    8f8c:	10bbffcc 	andi	r2,r2,61439
    8f90:	980f883a 	mov	r7,r19
    8f94:	900d883a 	mov	r6,r18
    8f98:	8809883a 	mov	r4,r17
    8f9c:	8080030d 	sth	r2,12(r16)
    8fa0:	dfc00417 	ldw	ra,16(sp)
    8fa4:	dcc00317 	ldw	r19,12(sp)
    8fa8:	dc800217 	ldw	r18,8(sp)
    8fac:	dc400117 	ldw	r17,4(sp)
    8fb0:	dc000017 	ldw	r16,0(sp)
    8fb4:	dec00504 	addi	sp,sp,20
    8fb8:	000a7441 	jmpi	a744 <_write_r>

00008fbc <__sseek>:
    8fbc:	defffe04 	addi	sp,sp,-8
    8fc0:	dc000015 	stw	r16,0(sp)
    8fc4:	2821883a 	mov	r16,r5
    8fc8:	2940038f 	ldh	r5,14(r5)
    8fcc:	dfc00115 	stw	ra,4(sp)
    8fd0:	000ac780 	call	ac78 <_lseek_r>
    8fd4:	00ffffc4 	movi	r3,-1
    8fd8:	10c00826 	beq	r2,r3,8ffc <__sseek+0x40>
    8fdc:	80c0030b 	ldhu	r3,12(r16)
    8fe0:	80801415 	stw	r2,80(r16)
    8fe4:	18c40014 	ori	r3,r3,4096
    8fe8:	80c0030d 	sth	r3,12(r16)
    8fec:	dfc00117 	ldw	ra,4(sp)
    8ff0:	dc000017 	ldw	r16,0(sp)
    8ff4:	dec00204 	addi	sp,sp,8
    8ff8:	f800283a 	ret
    8ffc:	80c0030b 	ldhu	r3,12(r16)
    9000:	18fbffcc 	andi	r3,r3,61439
    9004:	80c0030d 	sth	r3,12(r16)
    9008:	dfc00117 	ldw	ra,4(sp)
    900c:	dc000017 	ldw	r16,0(sp)
    9010:	dec00204 	addi	sp,sp,8
    9014:	f800283a 	ret

00009018 <__sclose>:
    9018:	2940038f 	ldh	r5,14(r5)
    901c:	000a7a41 	jmpi	a7a4 <_close_r>

00009020 <strcmp>:
    9020:	2144b03a 	or	r2,r4,r5
    9024:	108000cc 	andi	r2,r2,3
    9028:	1000171e 	bne	r2,zero,9088 <strcmp+0x68>
    902c:	20800017 	ldw	r2,0(r4)
    9030:	28c00017 	ldw	r3,0(r5)
    9034:	10c0141e 	bne	r2,r3,9088 <strcmp+0x68>
    9038:	027fbff4 	movhi	r9,65279
    903c:	4a7fbfc4 	addi	r9,r9,-257
    9040:	0086303a 	nor	r3,zero,r2
    9044:	02202074 	movhi	r8,32897
    9048:	1245883a 	add	r2,r2,r9
    904c:	42202004 	addi	r8,r8,-32640
    9050:	10c4703a 	and	r2,r2,r3
    9054:	1204703a 	and	r2,r2,r8
    9058:	10000226 	beq	r2,zero,9064 <strcmp+0x44>
    905c:	00002306 	br	90ec <strcmp+0xcc>
    9060:	1000221e 	bne	r2,zero,90ec <strcmp+0xcc>
    9064:	21000104 	addi	r4,r4,4
    9068:	20c00017 	ldw	r3,0(r4)
    906c:	29400104 	addi	r5,r5,4
    9070:	29800017 	ldw	r6,0(r5)
    9074:	1a4f883a 	add	r7,r3,r9
    9078:	00c4303a 	nor	r2,zero,r3
    907c:	3884703a 	and	r2,r7,r2
    9080:	1204703a 	and	r2,r2,r8
    9084:	19bff626 	beq	r3,r6,9060 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009060>
    9088:	20800003 	ldbu	r2,0(r4)
    908c:	10c03fcc 	andi	r3,r2,255
    9090:	18c0201c 	xori	r3,r3,128
    9094:	18ffe004 	addi	r3,r3,-128
    9098:	18000c26 	beq	r3,zero,90cc <strcmp+0xac>
    909c:	29800007 	ldb	r6,0(r5)
    90a0:	19800326 	beq	r3,r6,90b0 <strcmp+0x90>
    90a4:	00001306 	br	90f4 <strcmp+0xd4>
    90a8:	29800007 	ldb	r6,0(r5)
    90ac:	11800b1e 	bne	r2,r6,90dc <strcmp+0xbc>
    90b0:	21000044 	addi	r4,r4,1
    90b4:	20c00003 	ldbu	r3,0(r4)
    90b8:	29400044 	addi	r5,r5,1
    90bc:	18803fcc 	andi	r2,r3,255
    90c0:	1080201c 	xori	r2,r2,128
    90c4:	10bfe004 	addi	r2,r2,-128
    90c8:	103ff71e 	bne	r2,zero,90a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090a8>
    90cc:	0007883a 	mov	r3,zero
    90d0:	28800003 	ldbu	r2,0(r5)
    90d4:	1885c83a 	sub	r2,r3,r2
    90d8:	f800283a 	ret
    90dc:	28800003 	ldbu	r2,0(r5)
    90e0:	18c03fcc 	andi	r3,r3,255
    90e4:	1885c83a 	sub	r2,r3,r2
    90e8:	f800283a 	ret
    90ec:	0005883a 	mov	r2,zero
    90f0:	f800283a 	ret
    90f4:	10c03fcc 	andi	r3,r2,255
    90f8:	003ff506 	br	90d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090d0>

000090fc <__sprint_r.part.0>:
    90fc:	28801917 	ldw	r2,100(r5)
    9100:	defff604 	addi	sp,sp,-40
    9104:	dd400515 	stw	r21,20(sp)
    9108:	dfc00915 	stw	ra,36(sp)
    910c:	df000815 	stw	fp,32(sp)
    9110:	ddc00715 	stw	r23,28(sp)
    9114:	dd800615 	stw	r22,24(sp)
    9118:	dd000415 	stw	r20,16(sp)
    911c:	dcc00315 	stw	r19,12(sp)
    9120:	dc800215 	stw	r18,8(sp)
    9124:	dc400115 	stw	r17,4(sp)
    9128:	dc000015 	stw	r16,0(sp)
    912c:	1088000c 	andi	r2,r2,8192
    9130:	302b883a 	mov	r21,r6
    9134:	10002e26 	beq	r2,zero,91f0 <__sprint_r.part.0+0xf4>
    9138:	30800217 	ldw	r2,8(r6)
    913c:	35800017 	ldw	r22,0(r6)
    9140:	10002926 	beq	r2,zero,91e8 <__sprint_r.part.0+0xec>
    9144:	2827883a 	mov	r19,r5
    9148:	2029883a 	mov	r20,r4
    914c:	b5c00104 	addi	r23,r22,4
    9150:	04bfffc4 	movi	r18,-1
    9154:	bc400017 	ldw	r17,0(r23)
    9158:	b4000017 	ldw	r16,0(r22)
    915c:	0039883a 	mov	fp,zero
    9160:	8822d0ba 	srli	r17,r17,2
    9164:	8800031e 	bne	r17,zero,9174 <__sprint_r.part.0+0x78>
    9168:	00001806 	br	91cc <__sprint_r.part.0+0xd0>
    916c:	84000104 	addi	r16,r16,4
    9170:	8f001526 	beq	r17,fp,91c8 <__sprint_r.part.0+0xcc>
    9174:	81400017 	ldw	r5,0(r16)
    9178:	980d883a 	mov	r6,r19
    917c:	a009883a 	mov	r4,r20
    9180:	000ab240 	call	ab24 <_fputwc_r>
    9184:	e7000044 	addi	fp,fp,1
    9188:	14bff81e 	bne	r2,r18,916c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700916c>
    918c:	9005883a 	mov	r2,r18
    9190:	a8000215 	stw	zero,8(r21)
    9194:	a8000115 	stw	zero,4(r21)
    9198:	dfc00917 	ldw	ra,36(sp)
    919c:	df000817 	ldw	fp,32(sp)
    91a0:	ddc00717 	ldw	r23,28(sp)
    91a4:	dd800617 	ldw	r22,24(sp)
    91a8:	dd400517 	ldw	r21,20(sp)
    91ac:	dd000417 	ldw	r20,16(sp)
    91b0:	dcc00317 	ldw	r19,12(sp)
    91b4:	dc800217 	ldw	r18,8(sp)
    91b8:	dc400117 	ldw	r17,4(sp)
    91bc:	dc000017 	ldw	r16,0(sp)
    91c0:	dec00a04 	addi	sp,sp,40
    91c4:	f800283a 	ret
    91c8:	a8800217 	ldw	r2,8(r21)
    91cc:	8c63883a 	add	r17,r17,r17
    91d0:	8c63883a 	add	r17,r17,r17
    91d4:	1445c83a 	sub	r2,r2,r17
    91d8:	a8800215 	stw	r2,8(r21)
    91dc:	b5800204 	addi	r22,r22,8
    91e0:	bdc00204 	addi	r23,r23,8
    91e4:	103fdb1e 	bne	r2,zero,9154 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009154>
    91e8:	0005883a 	mov	r2,zero
    91ec:	003fe806 	br	9190 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009190>
    91f0:	00063240 	call	6324 <__sfvwrite_r>
    91f4:	003fe606 	br	9190 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009190>

000091f8 <__sprint_r>:
    91f8:	30c00217 	ldw	r3,8(r6)
    91fc:	18000126 	beq	r3,zero,9204 <__sprint_r+0xc>
    9200:	00090fc1 	jmpi	90fc <__sprint_r.part.0>
    9204:	30000115 	stw	zero,4(r6)
    9208:	0005883a 	mov	r2,zero
    920c:	f800283a 	ret

00009210 <___vfiprintf_internal_r>:
    9210:	deffc904 	addi	sp,sp,-220
    9214:	df003515 	stw	fp,212(sp)
    9218:	dd003115 	stw	r20,196(sp)
    921c:	dfc03615 	stw	ra,216(sp)
    9220:	ddc03415 	stw	r23,208(sp)
    9224:	dd803315 	stw	r22,204(sp)
    9228:	dd403215 	stw	r21,200(sp)
    922c:	dcc03015 	stw	r19,192(sp)
    9230:	dc802f15 	stw	r18,188(sp)
    9234:	dc402e15 	stw	r17,184(sp)
    9238:	dc002d15 	stw	r16,180(sp)
    923c:	d9002015 	stw	r4,128(sp)
    9240:	d9c02215 	stw	r7,136(sp)
    9244:	2829883a 	mov	r20,r5
    9248:	3039883a 	mov	fp,r6
    924c:	20000226 	beq	r4,zero,9258 <___vfiprintf_internal_r+0x48>
    9250:	20800e17 	ldw	r2,56(r4)
    9254:	1000cf26 	beq	r2,zero,9594 <___vfiprintf_internal_r+0x384>
    9258:	a080030b 	ldhu	r2,12(r20)
    925c:	10c8000c 	andi	r3,r2,8192
    9260:	1800061e 	bne	r3,zero,927c <___vfiprintf_internal_r+0x6c>
    9264:	a1001917 	ldw	r4,100(r20)
    9268:	00f7ffc4 	movi	r3,-8193
    926c:	10880014 	ori	r2,r2,8192
    9270:	20c6703a 	and	r3,r4,r3
    9274:	a080030d 	sth	r2,12(r20)
    9278:	a0c01915 	stw	r3,100(r20)
    927c:	10c0020c 	andi	r3,r2,8
    9280:	1800a926 	beq	r3,zero,9528 <___vfiprintf_internal_r+0x318>
    9284:	a0c00417 	ldw	r3,16(r20)
    9288:	1800a726 	beq	r3,zero,9528 <___vfiprintf_internal_r+0x318>
    928c:	1080068c 	andi	r2,r2,26
    9290:	00c00284 	movi	r3,10
    9294:	10c0ac26 	beq	r2,r3,9548 <___vfiprintf_internal_r+0x338>
    9298:	da801a04 	addi	r10,sp,104
    929c:	da801e15 	stw	r10,120(sp)
    92a0:	d8801e17 	ldw	r2,120(sp)
    92a4:	da8019c4 	addi	r10,sp,103
    92a8:	058000b4 	movhi	r22,2
    92ac:	05c000b4 	movhi	r23,2
    92b0:	da801f15 	stw	r10,124(sp)
    92b4:	1295c83a 	sub	r10,r2,r10
    92b8:	b5abfb04 	addi	r22,r22,-20500
    92bc:	bdebf704 	addi	r23,r23,-20516
    92c0:	dec01a15 	stw	sp,104(sp)
    92c4:	d8001c15 	stw	zero,112(sp)
    92c8:	d8001b15 	stw	zero,108(sp)
    92cc:	d8002615 	stw	zero,152(sp)
    92d0:	d8002315 	stw	zero,140(sp)
    92d4:	da802715 	stw	r10,156(sp)
    92d8:	d811883a 	mov	r8,sp
    92dc:	dd002115 	stw	r20,132(sp)
    92e0:	e021883a 	mov	r16,fp
    92e4:	80800007 	ldb	r2,0(r16)
    92e8:	1003ea26 	beq	r2,zero,a294 <___vfiprintf_internal_r+0x1084>
    92ec:	00c00944 	movi	r3,37
    92f0:	8025883a 	mov	r18,r16
    92f4:	10c0021e 	bne	r2,r3,9300 <___vfiprintf_internal_r+0xf0>
    92f8:	00001606 	br	9354 <___vfiprintf_internal_r+0x144>
    92fc:	10c00326 	beq	r2,r3,930c <___vfiprintf_internal_r+0xfc>
    9300:	94800044 	addi	r18,r18,1
    9304:	90800007 	ldb	r2,0(r18)
    9308:	103ffc1e 	bne	r2,zero,92fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70092fc>
    930c:	9423c83a 	sub	r17,r18,r16
    9310:	88001026 	beq	r17,zero,9354 <___vfiprintf_internal_r+0x144>
    9314:	d8c01c17 	ldw	r3,112(sp)
    9318:	d8801b17 	ldw	r2,108(sp)
    931c:	44000015 	stw	r16,0(r8)
    9320:	88c7883a 	add	r3,r17,r3
    9324:	10800044 	addi	r2,r2,1
    9328:	44400115 	stw	r17,4(r8)
    932c:	d8c01c15 	stw	r3,112(sp)
    9330:	d8801b15 	stw	r2,108(sp)
    9334:	010001c4 	movi	r4,7
    9338:	2080760e 	bge	r4,r2,9514 <___vfiprintf_internal_r+0x304>
    933c:	1803821e 	bne	r3,zero,a148 <___vfiprintf_internal_r+0xf38>
    9340:	da802317 	ldw	r10,140(sp)
    9344:	d8001b15 	stw	zero,108(sp)
    9348:	d811883a 	mov	r8,sp
    934c:	5455883a 	add	r10,r10,r17
    9350:	da802315 	stw	r10,140(sp)
    9354:	90800007 	ldb	r2,0(r18)
    9358:	10044626 	beq	r2,zero,a474 <___vfiprintf_internal_r+0x1264>
    935c:	90c00047 	ldb	r3,1(r18)
    9360:	94000044 	addi	r16,r18,1
    9364:	d8001d85 	stb	zero,118(sp)
    9368:	0009883a 	mov	r4,zero
    936c:	000f883a 	mov	r7,zero
    9370:	027fffc4 	movi	r9,-1
    9374:	0023883a 	mov	r17,zero
    9378:	0029883a 	mov	r20,zero
    937c:	01401604 	movi	r5,88
    9380:	01800244 	movi	r6,9
    9384:	03400a84 	movi	r13,42
    9388:	03001b04 	movi	r12,108
    938c:	84000044 	addi	r16,r16,1
    9390:	18bff804 	addi	r2,r3,-32
    9394:	28827336 	bltu	r5,r2,9d64 <___vfiprintf_internal_r+0xb54>
    9398:	100490ba 	slli	r2,r2,2
    939c:	02800074 	movhi	r10,1
    93a0:	52a4ec04 	addi	r10,r10,-27728
    93a4:	1285883a 	add	r2,r2,r10
    93a8:	10800017 	ldw	r2,0(r2)
    93ac:	1000683a 	jmp	r2
    93b0:	00009a98 	cmpnei	zero,zero,618
    93b4:	00009d64 	muli	zero,zero,629
    93b8:	00009d64 	muli	zero,zero,629
    93bc:	00009ab8 	rdprs	zero,zero,618
    93c0:	00009d64 	muli	zero,zero,629
    93c4:	00009d64 	muli	zero,zero,629
    93c8:	00009d64 	muli	zero,zero,629
    93cc:	00009d64 	muli	zero,zero,629
    93d0:	00009d64 	muli	zero,zero,629
    93d4:	00009d64 	muli	zero,zero,629
    93d8:	00009ca0 	cmpeqi	zero,zero,626
    93dc:	00009cbc 	xorhi	zero,zero,626
    93e0:	00009d64 	muli	zero,zero,629
    93e4:	000095a4 	muli	zero,zero,598
    93e8:	00009ccc 	andi	zero,zero,627
    93ec:	00009d64 	muli	zero,zero,629
    93f0:	00009ac4 	movi	zero,619
    93f4:	00009ad0 	cmplti	zero,zero,619
    93f8:	00009ad0 	cmplti	zero,zero,619
    93fc:	00009ad0 	cmplti	zero,zero,619
    9400:	00009ad0 	cmplti	zero,zero,619
    9404:	00009ad0 	cmplti	zero,zero,619
    9408:	00009ad0 	cmplti	zero,zero,619
    940c:	00009ad0 	cmplti	zero,zero,619
    9410:	00009ad0 	cmplti	zero,zero,619
    9414:	00009ad0 	cmplti	zero,zero,619
    9418:	00009d64 	muli	zero,zero,629
    941c:	00009d64 	muli	zero,zero,629
    9420:	00009d64 	muli	zero,zero,629
    9424:	00009d64 	muli	zero,zero,629
    9428:	00009d64 	muli	zero,zero,629
    942c:	00009d64 	muli	zero,zero,629
    9430:	00009d64 	muli	zero,zero,629
    9434:	00009d64 	muli	zero,zero,629
    9438:	00009d64 	muli	zero,zero,629
    943c:	00009d64 	muli	zero,zero,629
    9440:	00009afc 	xorhi	zero,zero,619
    9444:	00009d64 	muli	zero,zero,629
    9448:	00009d64 	muli	zero,zero,629
    944c:	00009d64 	muli	zero,zero,629
    9450:	00009d64 	muli	zero,zero,629
    9454:	00009d64 	muli	zero,zero,629
    9458:	00009d64 	muli	zero,zero,629
    945c:	00009d64 	muli	zero,zero,629
    9460:	00009d64 	muli	zero,zero,629
    9464:	00009d64 	muli	zero,zero,629
    9468:	00009d64 	muli	zero,zero,629
    946c:	00009b34 	movhi	zero,620
    9470:	00009d64 	muli	zero,zero,629
    9474:	00009d64 	muli	zero,zero,629
    9478:	00009d64 	muli	zero,zero,629
    947c:	00009d64 	muli	zero,zero,629
    9480:	00009d64 	muli	zero,zero,629
    9484:	00009b8c 	andi	zero,zero,622
    9488:	00009d64 	muli	zero,zero,629
    948c:	00009d64 	muli	zero,zero,629
    9490:	00009bfc 	xorhi	zero,zero,623
    9494:	00009d64 	muli	zero,zero,629
    9498:	00009d64 	muli	zero,zero,629
    949c:	00009d64 	muli	zero,zero,629
    94a0:	00009d64 	muli	zero,zero,629
    94a4:	00009d64 	muli	zero,zero,629
    94a8:	00009d64 	muli	zero,zero,629
    94ac:	00009d64 	muli	zero,zero,629
    94b0:	00009d64 	muli	zero,zero,629
    94b4:	00009d64 	muli	zero,zero,629
    94b8:	00009d64 	muli	zero,zero,629
    94bc:	000099a8 	cmpgeui	zero,zero,614
    94c0:	000099d4 	movui	zero,615
    94c4:	00009d64 	muli	zero,zero,629
    94c8:	00009d64 	muli	zero,zero,629
    94cc:	00009d64 	muli	zero,zero,629
    94d0:	00009d0c 	andi	zero,zero,628
    94d4:	000099d4 	movui	zero,615
    94d8:	00009d64 	muli	zero,zero,629
    94dc:	00009d64 	muli	zero,zero,629
    94e0:	00009868 	cmpgeui	zero,zero,609
    94e4:	00009d64 	muli	zero,zero,629
    94e8:	00009878 	rdprs	zero,zero,609
    94ec:	000098b4 	movhi	zero,610
    94f0:	000095b0 	cmpltui	zero,zero,598
    94f4:	0000985c 	xori	zero,zero,609
    94f8:	00009d64 	muli	zero,zero,629
    94fc:	00009c38 	rdprs	zero,zero,624
    9500:	00009d64 	muli	zero,zero,629
    9504:	00009c90 	cmplti	zero,zero,626
    9508:	00009d64 	muli	zero,zero,629
    950c:	00009d64 	muli	zero,zero,629
    9510:	00009954 	movui	zero,613
    9514:	42000204 	addi	r8,r8,8
    9518:	da802317 	ldw	r10,140(sp)
    951c:	5455883a 	add	r10,r10,r17
    9520:	da802315 	stw	r10,140(sp)
    9524:	003f8b06 	br	9354 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009354>
    9528:	d9002017 	ldw	r4,128(sp)
    952c:	a00b883a 	mov	r5,r20
    9530:	0003ecc0 	call	3ecc <__swsetup_r>
    9534:	1003b11e 	bne	r2,zero,a3fc <___vfiprintf_internal_r+0x11ec>
    9538:	a080030b 	ldhu	r2,12(r20)
    953c:	00c00284 	movi	r3,10
    9540:	1080068c 	andi	r2,r2,26
    9544:	10ff541e 	bne	r2,r3,9298 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009298>
    9548:	a080038f 	ldh	r2,14(r20)
    954c:	103f5216 	blt	r2,zero,9298 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009298>
    9550:	d9c02217 	ldw	r7,136(sp)
    9554:	d9002017 	ldw	r4,128(sp)
    9558:	e00d883a 	mov	r6,fp
    955c:	a00b883a 	mov	r5,r20
    9560:	000a6880 	call	a688 <__sbprintf>
    9564:	dfc03617 	ldw	ra,216(sp)
    9568:	df003517 	ldw	fp,212(sp)
    956c:	ddc03417 	ldw	r23,208(sp)
    9570:	dd803317 	ldw	r22,204(sp)
    9574:	dd403217 	ldw	r21,200(sp)
    9578:	dd003117 	ldw	r20,196(sp)
    957c:	dcc03017 	ldw	r19,192(sp)
    9580:	dc802f17 	ldw	r18,188(sp)
    9584:	dc402e17 	ldw	r17,184(sp)
    9588:	dc002d17 	ldw	r16,180(sp)
    958c:	dec03704 	addi	sp,sp,220
    9590:	f800283a 	ret
    9594:	0005ea00 	call	5ea0 <__sinit>
    9598:	003f2f06 	br	9258 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009258>
    959c:	0463c83a 	sub	r17,zero,r17
    95a0:	d8802215 	stw	r2,136(sp)
    95a4:	a5000114 	ori	r20,r20,4
    95a8:	80c00007 	ldb	r3,0(r16)
    95ac:	003f7706 	br	938c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700938c>
    95b0:	00800c04 	movi	r2,48
    95b4:	da802217 	ldw	r10,136(sp)
    95b8:	d8801d05 	stb	r2,116(sp)
    95bc:	00801e04 	movi	r2,120
    95c0:	d8801d45 	stb	r2,117(sp)
    95c4:	d8001d85 	stb	zero,118(sp)
    95c8:	50c00104 	addi	r3,r10,4
    95cc:	54800017 	ldw	r18,0(r10)
    95d0:	0027883a 	mov	r19,zero
    95d4:	a0800094 	ori	r2,r20,2
    95d8:	48030b16 	blt	r9,zero,a208 <___vfiprintf_internal_r+0xff8>
    95dc:	00bfdfc4 	movi	r2,-129
    95e0:	a096703a 	and	r11,r20,r2
    95e4:	d8c02215 	stw	r3,136(sp)
    95e8:	5d000094 	ori	r20,r11,2
    95ec:	90032b1e 	bne	r18,zero,a29c <___vfiprintf_internal_r+0x108c>
    95f0:	008000b4 	movhi	r2,2
    95f4:	10ab9704 	addi	r2,r2,-20900
    95f8:	d8802615 	stw	r2,152(sp)
    95fc:	0039883a 	mov	fp,zero
    9600:	48017b1e 	bne	r9,zero,9bf0 <___vfiprintf_internal_r+0x9e0>
    9604:	0013883a 	mov	r9,zero
    9608:	0027883a 	mov	r19,zero
    960c:	dd401a04 	addi	r21,sp,104
    9610:	4825883a 	mov	r18,r9
    9614:	4cc0010e 	bge	r9,r19,961c <___vfiprintf_internal_r+0x40c>
    9618:	9825883a 	mov	r18,r19
    961c:	e7003fcc 	andi	fp,fp,255
    9620:	e700201c 	xori	fp,fp,128
    9624:	e73fe004 	addi	fp,fp,-128
    9628:	e0000126 	beq	fp,zero,9630 <___vfiprintf_internal_r+0x420>
    962c:	94800044 	addi	r18,r18,1
    9630:	a380008c 	andi	r14,r20,2
    9634:	70000126 	beq	r14,zero,963c <___vfiprintf_internal_r+0x42c>
    9638:	94800084 	addi	r18,r18,2
    963c:	a700210c 	andi	fp,r20,132
    9640:	e001df1e 	bne	fp,zero,9dc0 <___vfiprintf_internal_r+0xbb0>
    9644:	8c87c83a 	sub	r3,r17,r18
    9648:	00c1dd0e 	bge	zero,r3,9dc0 <___vfiprintf_internal_r+0xbb0>
    964c:	01c00404 	movi	r7,16
    9650:	d8801c17 	ldw	r2,112(sp)
    9654:	38c3ad0e 	bge	r7,r3,a50c <___vfiprintf_internal_r+0x12fc>
    9658:	028000b4 	movhi	r10,2
    965c:	52abfb04 	addi	r10,r10,-20500
    9660:	dc002915 	stw	r16,164(sp)
    9664:	d9801b17 	ldw	r6,108(sp)
    9668:	da802415 	stw	r10,144(sp)
    966c:	03c001c4 	movi	r15,7
    9670:	da402515 	stw	r9,148(sp)
    9674:	db802815 	stw	r14,160(sp)
    9678:	1821883a 	mov	r16,r3
    967c:	00000506 	br	9694 <___vfiprintf_internal_r+0x484>
    9680:	31400084 	addi	r5,r6,2
    9684:	42000204 	addi	r8,r8,8
    9688:	200d883a 	mov	r6,r4
    968c:	843ffc04 	addi	r16,r16,-16
    9690:	3c000d0e 	bge	r7,r16,96c8 <___vfiprintf_internal_r+0x4b8>
    9694:	10800404 	addi	r2,r2,16
    9698:	31000044 	addi	r4,r6,1
    969c:	45800015 	stw	r22,0(r8)
    96a0:	41c00115 	stw	r7,4(r8)
    96a4:	d8801c15 	stw	r2,112(sp)
    96a8:	d9001b15 	stw	r4,108(sp)
    96ac:	793ff40e 	bge	r15,r4,9680 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009680>
    96b0:	1001b51e 	bne	r2,zero,9d88 <___vfiprintf_internal_r+0xb78>
    96b4:	843ffc04 	addi	r16,r16,-16
    96b8:	000d883a 	mov	r6,zero
    96bc:	01400044 	movi	r5,1
    96c0:	d811883a 	mov	r8,sp
    96c4:	3c3ff316 	blt	r7,r16,9694 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009694>
    96c8:	8007883a 	mov	r3,r16
    96cc:	da402517 	ldw	r9,148(sp)
    96d0:	db802817 	ldw	r14,160(sp)
    96d4:	dc002917 	ldw	r16,164(sp)
    96d8:	da802417 	ldw	r10,144(sp)
    96dc:	1885883a 	add	r2,r3,r2
    96e0:	40c00115 	stw	r3,4(r8)
    96e4:	42800015 	stw	r10,0(r8)
    96e8:	d8801c15 	stw	r2,112(sp)
    96ec:	d9401b15 	stw	r5,108(sp)
    96f0:	00c001c4 	movi	r3,7
    96f4:	19426016 	blt	r3,r5,a078 <___vfiprintf_internal_r+0xe68>
    96f8:	d8c01d87 	ldb	r3,118(sp)
    96fc:	42000204 	addi	r8,r8,8
    9700:	29000044 	addi	r4,r5,1
    9704:	1801b31e 	bne	r3,zero,9dd4 <___vfiprintf_internal_r+0xbc4>
    9708:	7001c026 	beq	r14,zero,9e0c <___vfiprintf_internal_r+0xbfc>
    970c:	d8c01d04 	addi	r3,sp,116
    9710:	10800084 	addi	r2,r2,2
    9714:	40c00015 	stw	r3,0(r8)
    9718:	00c00084 	movi	r3,2
    971c:	40c00115 	stw	r3,4(r8)
    9720:	d8801c15 	stw	r2,112(sp)
    9724:	d9001b15 	stw	r4,108(sp)
    9728:	00c001c4 	movi	r3,7
    972c:	1902650e 	bge	r3,r4,a0c4 <___vfiprintf_internal_r+0xeb4>
    9730:	10029a1e 	bne	r2,zero,a19c <___vfiprintf_internal_r+0xf8c>
    9734:	00c02004 	movi	r3,128
    9738:	01000044 	movi	r4,1
    973c:	000b883a 	mov	r5,zero
    9740:	d811883a 	mov	r8,sp
    9744:	e0c1b31e 	bne	fp,r3,9e14 <___vfiprintf_internal_r+0xc04>
    9748:	8cb9c83a 	sub	fp,r17,r18
    974c:	0701b10e 	bge	zero,fp,9e14 <___vfiprintf_internal_r+0xc04>
    9750:	01c00404 	movi	r7,16
    9754:	3f03890e 	bge	r7,fp,a57c <___vfiprintf_internal_r+0x136c>
    9758:	00c000b4 	movhi	r3,2
    975c:	18ebf704 	addi	r3,r3,-20516
    9760:	d8c02415 	stw	r3,144(sp)
    9764:	8007883a 	mov	r3,r16
    9768:	034001c4 	movi	r13,7
    976c:	e021883a 	mov	r16,fp
    9770:	da402515 	stw	r9,148(sp)
    9774:	1839883a 	mov	fp,r3
    9778:	00000506 	br	9790 <___vfiprintf_internal_r+0x580>
    977c:	29800084 	addi	r6,r5,2
    9780:	42000204 	addi	r8,r8,8
    9784:	180b883a 	mov	r5,r3
    9788:	843ffc04 	addi	r16,r16,-16
    978c:	3c000d0e 	bge	r7,r16,97c4 <___vfiprintf_internal_r+0x5b4>
    9790:	10800404 	addi	r2,r2,16
    9794:	28c00044 	addi	r3,r5,1
    9798:	45c00015 	stw	r23,0(r8)
    979c:	41c00115 	stw	r7,4(r8)
    97a0:	d8801c15 	stw	r2,112(sp)
    97a4:	d8c01b15 	stw	r3,108(sp)
    97a8:	68fff40e 	bge	r13,r3,977c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700977c>
    97ac:	1002241e 	bne	r2,zero,a040 <___vfiprintf_internal_r+0xe30>
    97b0:	843ffc04 	addi	r16,r16,-16
    97b4:	01800044 	movi	r6,1
    97b8:	000b883a 	mov	r5,zero
    97bc:	d811883a 	mov	r8,sp
    97c0:	3c3ff316 	blt	r7,r16,9790 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009790>
    97c4:	da402517 	ldw	r9,148(sp)
    97c8:	e007883a 	mov	r3,fp
    97cc:	8039883a 	mov	fp,r16
    97d0:	1821883a 	mov	r16,r3
    97d4:	d8c02417 	ldw	r3,144(sp)
    97d8:	1705883a 	add	r2,r2,fp
    97dc:	47000115 	stw	fp,4(r8)
    97e0:	40c00015 	stw	r3,0(r8)
    97e4:	d8801c15 	stw	r2,112(sp)
    97e8:	d9801b15 	stw	r6,108(sp)
    97ec:	00c001c4 	movi	r3,7
    97f0:	19827616 	blt	r3,r6,a1cc <___vfiprintf_internal_r+0xfbc>
    97f4:	4cf9c83a 	sub	fp,r9,r19
    97f8:	42000204 	addi	r8,r8,8
    97fc:	31000044 	addi	r4,r6,1
    9800:	300b883a 	mov	r5,r6
    9804:	07018516 	blt	zero,fp,9e1c <___vfiprintf_internal_r+0xc0c>
    9808:	9885883a 	add	r2,r19,r2
    980c:	45400015 	stw	r21,0(r8)
    9810:	44c00115 	stw	r19,4(r8)
    9814:	d8801c15 	stw	r2,112(sp)
    9818:	d9001b15 	stw	r4,108(sp)
    981c:	00c001c4 	movi	r3,7
    9820:	1901dd0e 	bge	r3,r4,9f98 <___vfiprintf_internal_r+0xd88>
    9824:	1002401e 	bne	r2,zero,a128 <___vfiprintf_internal_r+0xf18>
    9828:	d8001b15 	stw	zero,108(sp)
    982c:	a2c0010c 	andi	r11,r20,4
    9830:	58000226 	beq	r11,zero,983c <___vfiprintf_internal_r+0x62c>
    9834:	8ca7c83a 	sub	r19,r17,r18
    9838:	04c2f216 	blt	zero,r19,a404 <___vfiprintf_internal_r+0x11f4>
    983c:	8c80010e 	bge	r17,r18,9844 <___vfiprintf_internal_r+0x634>
    9840:	9023883a 	mov	r17,r18
    9844:	da802317 	ldw	r10,140(sp)
    9848:	5455883a 	add	r10,r10,r17
    984c:	da802315 	stw	r10,140(sp)
    9850:	d8001b15 	stw	zero,108(sp)
    9854:	d811883a 	mov	r8,sp
    9858:	003ea206 	br	92e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70092e4>
    985c:	a5000814 	ori	r20,r20,32
    9860:	80c00007 	ldb	r3,0(r16)
    9864:	003ec906 	br	938c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700938c>
    9868:	80c00007 	ldb	r3,0(r16)
    986c:	1b030926 	beq	r3,r12,a494 <___vfiprintf_internal_r+0x1284>
    9870:	a5000414 	ori	r20,r20,16
    9874:	003ec506 	br	938c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700938c>
    9878:	21003fcc 	andi	r4,r4,255
    987c:	20035e1e 	bne	r4,zero,a5f8 <___vfiprintf_internal_r+0x13e8>
    9880:	a080080c 	andi	r2,r20,32
    9884:	1002a526 	beq	r2,zero,a31c <___vfiprintf_internal_r+0x110c>
    9888:	da802217 	ldw	r10,136(sp)
    988c:	50800017 	ldw	r2,0(r10)
    9890:	da802317 	ldw	r10,140(sp)
    9894:	5007d7fa 	srai	r3,r10,31
    9898:	da802217 	ldw	r10,136(sp)
    989c:	10c00115 	stw	r3,4(r2)
    98a0:	52800104 	addi	r10,r10,4
    98a4:	da802215 	stw	r10,136(sp)
    98a8:	da802317 	ldw	r10,140(sp)
    98ac:	12800015 	stw	r10,0(r2)
    98b0:	003e8c06 	br	92e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70092e4>
    98b4:	21003fcc 	andi	r4,r4,255
    98b8:	2003511e 	bne	r4,zero,a600 <___vfiprintf_internal_r+0x13f0>
    98bc:	a080080c 	andi	r2,r20,32
    98c0:	1000a126 	beq	r2,zero,9b48 <___vfiprintf_internal_r+0x938>
    98c4:	da802217 	ldw	r10,136(sp)
    98c8:	d8001d85 	stb	zero,118(sp)
    98cc:	50800204 	addi	r2,r10,8
    98d0:	54800017 	ldw	r18,0(r10)
    98d4:	54c00117 	ldw	r19,4(r10)
    98d8:	4802b416 	blt	r9,zero,a3ac <___vfiprintf_internal_r+0x119c>
    98dc:	013fdfc4 	movi	r4,-129
    98e0:	94c6b03a 	or	r3,r18,r19
    98e4:	d8802215 	stw	r2,136(sp)
    98e8:	a128703a 	and	r20,r20,r4
    98ec:	1800a226 	beq	r3,zero,9b78 <___vfiprintf_internal_r+0x968>
    98f0:	0039883a 	mov	fp,zero
    98f4:	dd401a04 	addi	r21,sp,104
    98f8:	9006d0fa 	srli	r3,r18,3
    98fc:	9808977a 	slli	r4,r19,29
    9900:	9826d0fa 	srli	r19,r19,3
    9904:	948001cc 	andi	r18,r18,7
    9908:	90800c04 	addi	r2,r18,48
    990c:	ad7fffc4 	addi	r21,r21,-1
    9910:	20e4b03a 	or	r18,r4,r3
    9914:	a8800005 	stb	r2,0(r21)
    9918:	94c6b03a 	or	r3,r18,r19
    991c:	183ff61e 	bne	r3,zero,98f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70098f8>
    9920:	a0c0004c 	andi	r3,r20,1
    9924:	18005926 	beq	r3,zero,9a8c <___vfiprintf_internal_r+0x87c>
    9928:	10803fcc 	andi	r2,r2,255
    992c:	1080201c 	xori	r2,r2,128
    9930:	10bfe004 	addi	r2,r2,-128
    9934:	00c00c04 	movi	r3,48
    9938:	10c05426 	beq	r2,r3,9a8c <___vfiprintf_internal_r+0x87c>
    993c:	da801e17 	ldw	r10,120(sp)
    9940:	a8bfffc4 	addi	r2,r21,-1
    9944:	a8ffffc5 	stb	r3,-1(r21)
    9948:	50a7c83a 	sub	r19,r10,r2
    994c:	102b883a 	mov	r21,r2
    9950:	003f2f06 	br	9610 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009610>
    9954:	21003fcc 	andi	r4,r4,255
    9958:	2003421e 	bne	r4,zero,a664 <___vfiprintf_internal_r+0x1454>
    995c:	008000b4 	movhi	r2,2
    9960:	10ab9704 	addi	r2,r2,-20900
    9964:	d8802615 	stw	r2,152(sp)
    9968:	a080080c 	andi	r2,r20,32
    996c:	1000aa26 	beq	r2,zero,9c18 <___vfiprintf_internal_r+0xa08>
    9970:	da802217 	ldw	r10,136(sp)
    9974:	54800017 	ldw	r18,0(r10)
    9978:	54c00117 	ldw	r19,4(r10)
    997c:	52800204 	addi	r10,r10,8
    9980:	da802215 	stw	r10,136(sp)
    9984:	a080004c 	andi	r2,r20,1
    9988:	1001d226 	beq	r2,zero,a0d4 <___vfiprintf_internal_r+0xec4>
    998c:	94c4b03a 	or	r2,r18,r19
    9990:	1002351e 	bne	r2,zero,a268 <___vfiprintf_internal_r+0x1058>
    9994:	d8001d85 	stb	zero,118(sp)
    9998:	48022216 	blt	r9,zero,a224 <___vfiprintf_internal_r+0x1014>
    999c:	00bfdfc4 	movi	r2,-129
    99a0:	a0a8703a 	and	r20,r20,r2
    99a4:	003f1506 	br	95fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70095fc>
    99a8:	da802217 	ldw	r10,136(sp)
    99ac:	04800044 	movi	r18,1
    99b0:	d8001d85 	stb	zero,118(sp)
    99b4:	50800017 	ldw	r2,0(r10)
    99b8:	52800104 	addi	r10,r10,4
    99bc:	da802215 	stw	r10,136(sp)
    99c0:	d8801005 	stb	r2,64(sp)
    99c4:	9027883a 	mov	r19,r18
    99c8:	dd401004 	addi	r21,sp,64
    99cc:	0013883a 	mov	r9,zero
    99d0:	003f1706 	br	9630 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009630>
    99d4:	21003fcc 	andi	r4,r4,255
    99d8:	2003201e 	bne	r4,zero,a65c <___vfiprintf_internal_r+0x144c>
    99dc:	a080080c 	andi	r2,r20,32
    99e0:	10004b26 	beq	r2,zero,9b10 <___vfiprintf_internal_r+0x900>
    99e4:	da802217 	ldw	r10,136(sp)
    99e8:	50800117 	ldw	r2,4(r10)
    99ec:	54800017 	ldw	r18,0(r10)
    99f0:	52800204 	addi	r10,r10,8
    99f4:	da802215 	stw	r10,136(sp)
    99f8:	1027883a 	mov	r19,r2
    99fc:	10022c16 	blt	r2,zero,a2b0 <___vfiprintf_internal_r+0x10a0>
    9a00:	df001d83 	ldbu	fp,118(sp)
    9a04:	48007216 	blt	r9,zero,9bd0 <___vfiprintf_internal_r+0x9c0>
    9a08:	00ffdfc4 	movi	r3,-129
    9a0c:	94c4b03a 	or	r2,r18,r19
    9a10:	a0e8703a 	and	r20,r20,r3
    9a14:	1000cc26 	beq	r2,zero,9d48 <___vfiprintf_internal_r+0xb38>
    9a18:	98021026 	beq	r19,zero,a25c <___vfiprintf_internal_r+0x104c>
    9a1c:	dc402415 	stw	r17,144(sp)
    9a20:	dc002515 	stw	r16,148(sp)
    9a24:	9823883a 	mov	r17,r19
    9a28:	9021883a 	mov	r16,r18
    9a2c:	dd401a04 	addi	r21,sp,104
    9a30:	4825883a 	mov	r18,r9
    9a34:	4027883a 	mov	r19,r8
    9a38:	8009883a 	mov	r4,r16
    9a3c:	880b883a 	mov	r5,r17
    9a40:	01800284 	movi	r6,10
    9a44:	000f883a 	mov	r7,zero
    9a48:	000b5f00 	call	b5f0 <__umoddi3>
    9a4c:	10800c04 	addi	r2,r2,48
    9a50:	ad7fffc4 	addi	r21,r21,-1
    9a54:	8009883a 	mov	r4,r16
    9a58:	880b883a 	mov	r5,r17
    9a5c:	a8800005 	stb	r2,0(r21)
    9a60:	01800284 	movi	r6,10
    9a64:	000f883a 	mov	r7,zero
    9a68:	000b0780 	call	b078 <__udivdi3>
    9a6c:	1021883a 	mov	r16,r2
    9a70:	10c4b03a 	or	r2,r2,r3
    9a74:	1823883a 	mov	r17,r3
    9a78:	103fef1e 	bne	r2,zero,9a38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009a38>
    9a7c:	dc402417 	ldw	r17,144(sp)
    9a80:	dc002517 	ldw	r16,148(sp)
    9a84:	9013883a 	mov	r9,r18
    9a88:	9811883a 	mov	r8,r19
    9a8c:	da801e17 	ldw	r10,120(sp)
    9a90:	5567c83a 	sub	r19,r10,r21
    9a94:	003ede06 	br	9610 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009610>
    9a98:	38803fcc 	andi	r2,r7,255
    9a9c:	1080201c 	xori	r2,r2,128
    9aa0:	10bfe004 	addi	r2,r2,-128
    9aa4:	1002371e 	bne	r2,zero,a384 <___vfiprintf_internal_r+0x1174>
    9aa8:	01000044 	movi	r4,1
    9aac:	01c00804 	movi	r7,32
    9ab0:	80c00007 	ldb	r3,0(r16)
    9ab4:	003e3506 	br	938c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700938c>
    9ab8:	a5000054 	ori	r20,r20,1
    9abc:	80c00007 	ldb	r3,0(r16)
    9ac0:	003e3206 	br	938c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700938c>
    9ac4:	a5002014 	ori	r20,r20,128
    9ac8:	80c00007 	ldb	r3,0(r16)
    9acc:	003e2f06 	br	938c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700938c>
    9ad0:	8015883a 	mov	r10,r16
    9ad4:	0023883a 	mov	r17,zero
    9ad8:	18bff404 	addi	r2,r3,-48
    9adc:	50c00007 	ldb	r3,0(r10)
    9ae0:	8c4002a4 	muli	r17,r17,10
    9ae4:	84000044 	addi	r16,r16,1
    9ae8:	8015883a 	mov	r10,r16
    9aec:	1463883a 	add	r17,r2,r17
    9af0:	18bff404 	addi	r2,r3,-48
    9af4:	30bff92e 	bgeu	r6,r2,9adc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009adc>
    9af8:	003e2506 	br	9390 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009390>
    9afc:	21003fcc 	andi	r4,r4,255
    9b00:	2002d41e 	bne	r4,zero,a654 <___vfiprintf_internal_r+0x1444>
    9b04:	a5000414 	ori	r20,r20,16
    9b08:	a080080c 	andi	r2,r20,32
    9b0c:	103fb51e 	bne	r2,zero,99e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70099e4>
    9b10:	a080040c 	andi	r2,r20,16
    9b14:	1001f826 	beq	r2,zero,a2f8 <___vfiprintf_internal_r+0x10e8>
    9b18:	da802217 	ldw	r10,136(sp)
    9b1c:	54800017 	ldw	r18,0(r10)
    9b20:	52800104 	addi	r10,r10,4
    9b24:	da802215 	stw	r10,136(sp)
    9b28:	9027d7fa 	srai	r19,r18,31
    9b2c:	9805883a 	mov	r2,r19
    9b30:	003fb206 	br	99fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70099fc>
    9b34:	21003fcc 	andi	r4,r4,255
    9b38:	2002c41e 	bne	r4,zero,a64c <___vfiprintf_internal_r+0x143c>
    9b3c:	a5000414 	ori	r20,r20,16
    9b40:	a080080c 	andi	r2,r20,32
    9b44:	103f5f1e 	bne	r2,zero,98c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70098c4>
    9b48:	a080040c 	andi	r2,r20,16
    9b4c:	10020f26 	beq	r2,zero,a38c <___vfiprintf_internal_r+0x117c>
    9b50:	da802217 	ldw	r10,136(sp)
    9b54:	d8001d85 	stb	zero,118(sp)
    9b58:	0027883a 	mov	r19,zero
    9b5c:	50800104 	addi	r2,r10,4
    9b60:	54800017 	ldw	r18,0(r10)
    9b64:	48021116 	blt	r9,zero,a3ac <___vfiprintf_internal_r+0x119c>
    9b68:	00ffdfc4 	movi	r3,-129
    9b6c:	d8802215 	stw	r2,136(sp)
    9b70:	a0e8703a 	and	r20,r20,r3
    9b74:	903f5e1e 	bne	r18,zero,98f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70098f0>
    9b78:	0039883a 	mov	fp,zero
    9b7c:	4802a626 	beq	r9,zero,a618 <___vfiprintf_internal_r+0x1408>
    9b80:	0025883a 	mov	r18,zero
    9b84:	0027883a 	mov	r19,zero
    9b88:	003f5a06 	br	98f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70098f4>
    9b8c:	21003fcc 	andi	r4,r4,255
    9b90:	20029f1e 	bne	r4,zero,a610 <___vfiprintf_internal_r+0x1400>
    9b94:	a5000414 	ori	r20,r20,16
    9b98:	a080080c 	andi	r2,r20,32
    9b9c:	10005e1e 	bne	r2,zero,9d18 <___vfiprintf_internal_r+0xb08>
    9ba0:	a080040c 	andi	r2,r20,16
    9ba4:	1001a21e 	bne	r2,zero,a230 <___vfiprintf_internal_r+0x1020>
    9ba8:	a080100c 	andi	r2,r20,64
    9bac:	d8001d85 	stb	zero,118(sp)
    9bb0:	da802217 	ldw	r10,136(sp)
    9bb4:	1002231e 	bne	r2,zero,a444 <___vfiprintf_internal_r+0x1234>
    9bb8:	50800104 	addi	r2,r10,4
    9bbc:	54800017 	ldw	r18,0(r10)
    9bc0:	0027883a 	mov	r19,zero
    9bc4:	4801a00e 	bge	r9,zero,a248 <___vfiprintf_internal_r+0x1038>
    9bc8:	d8802215 	stw	r2,136(sp)
    9bcc:	0039883a 	mov	fp,zero
    9bd0:	94c4b03a 	or	r2,r18,r19
    9bd4:	103f901e 	bne	r2,zero,9a18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009a18>
    9bd8:	00800044 	movi	r2,1
    9bdc:	10803fcc 	andi	r2,r2,255
    9be0:	00c00044 	movi	r3,1
    9be4:	10c05926 	beq	r2,r3,9d4c <___vfiprintf_internal_r+0xb3c>
    9be8:	00c00084 	movi	r3,2
    9bec:	10ffe41e 	bne	r2,r3,9b80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009b80>
    9bf0:	0025883a 	mov	r18,zero
    9bf4:	0027883a 	mov	r19,zero
    9bf8:	00013d06 	br	a0f0 <___vfiprintf_internal_r+0xee0>
    9bfc:	21003fcc 	andi	r4,r4,255
    9c00:	2002811e 	bne	r4,zero,a608 <___vfiprintf_internal_r+0x13f8>
    9c04:	008000b4 	movhi	r2,2
    9c08:	10ab9204 	addi	r2,r2,-20920
    9c0c:	d8802615 	stw	r2,152(sp)
    9c10:	a080080c 	andi	r2,r20,32
    9c14:	103f561e 	bne	r2,zero,9970 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009970>
    9c18:	a080040c 	andi	r2,r20,16
    9c1c:	1001d126 	beq	r2,zero,a364 <___vfiprintf_internal_r+0x1154>
    9c20:	da802217 	ldw	r10,136(sp)
    9c24:	0027883a 	mov	r19,zero
    9c28:	54800017 	ldw	r18,0(r10)
    9c2c:	52800104 	addi	r10,r10,4
    9c30:	da802215 	stw	r10,136(sp)
    9c34:	003f5306 	br	9984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009984>
    9c38:	da802217 	ldw	r10,136(sp)
    9c3c:	d8001d85 	stb	zero,118(sp)
    9c40:	55400017 	ldw	r21,0(r10)
    9c44:	50c00104 	addi	r3,r10,4
    9c48:	a8024226 	beq	r21,zero,a554 <___vfiprintf_internal_r+0x1344>
    9c4c:	48021816 	blt	r9,zero,a4b0 <___vfiprintf_internal_r+0x12a0>
    9c50:	480d883a 	mov	r6,r9
    9c54:	000b883a 	mov	r5,zero
    9c58:	a809883a 	mov	r4,r21
    9c5c:	d8c02a15 	stw	r3,168(sp)
    9c60:	da002b15 	stw	r8,172(sp)
    9c64:	da402c15 	stw	r9,176(sp)
    9c68:	000740c0 	call	740c <memchr>
    9c6c:	d8c02a17 	ldw	r3,168(sp)
    9c70:	da002b17 	ldw	r8,172(sp)
    9c74:	da402c17 	ldw	r9,176(sp)
    9c78:	10024826 	beq	r2,zero,a59c <___vfiprintf_internal_r+0x138c>
    9c7c:	1567c83a 	sub	r19,r2,r21
    9c80:	df001d83 	ldbu	fp,118(sp)
    9c84:	d8c02215 	stw	r3,136(sp)
    9c88:	0013883a 	mov	r9,zero
    9c8c:	003e6006 	br	9610 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009610>
    9c90:	21003fcc 	andi	r4,r4,255
    9c94:	203fc026 	beq	r4,zero,9b98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009b98>
    9c98:	d9c01d85 	stb	r7,118(sp)
    9c9c:	003fbe06 	br	9b98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009b98>
    9ca0:	da802217 	ldw	r10,136(sp)
    9ca4:	54400017 	ldw	r17,0(r10)
    9ca8:	50800104 	addi	r2,r10,4
    9cac:	883e3b16 	blt	r17,zero,959c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700959c>
    9cb0:	d8802215 	stw	r2,136(sp)
    9cb4:	80c00007 	ldb	r3,0(r16)
    9cb8:	003db406 	br	938c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700938c>
    9cbc:	01000044 	movi	r4,1
    9cc0:	01c00ac4 	movi	r7,43
    9cc4:	80c00007 	ldb	r3,0(r16)
    9cc8:	003db006 	br	938c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700938c>
    9ccc:	80c00007 	ldb	r3,0(r16)
    9cd0:	82800044 	addi	r10,r16,1
    9cd4:	1b423c26 	beq	r3,r13,a5c8 <___vfiprintf_internal_r+0x13b8>
    9cd8:	18bff404 	addi	r2,r3,-48
    9cdc:	0013883a 	mov	r9,zero
    9ce0:	30822b36 	bltu	r6,r2,a590 <___vfiprintf_internal_r+0x1380>
    9ce4:	50c00007 	ldb	r3,0(r10)
    9ce8:	4a4002a4 	muli	r9,r9,10
    9cec:	54000044 	addi	r16,r10,1
    9cf0:	8015883a 	mov	r10,r16
    9cf4:	4893883a 	add	r9,r9,r2
    9cf8:	18bff404 	addi	r2,r3,-48
    9cfc:	30bff92e 	bgeu	r6,r2,9ce4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ce4>
    9d00:	483da30e 	bge	r9,zero,9390 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009390>
    9d04:	027fffc4 	movi	r9,-1
    9d08:	003da106 	br	9390 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009390>
    9d0c:	a5001014 	ori	r20,r20,64
    9d10:	80c00007 	ldb	r3,0(r16)
    9d14:	003d9d06 	br	938c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700938c>
    9d18:	da802217 	ldw	r10,136(sp)
    9d1c:	d8001d85 	stb	zero,118(sp)
    9d20:	50c00204 	addi	r3,r10,8
    9d24:	54800017 	ldw	r18,0(r10)
    9d28:	54c00117 	ldw	r19,4(r10)
    9d2c:	4801ca16 	blt	r9,zero,a458 <___vfiprintf_internal_r+0x1248>
    9d30:	013fdfc4 	movi	r4,-129
    9d34:	94c4b03a 	or	r2,r18,r19
    9d38:	d8c02215 	stw	r3,136(sp)
    9d3c:	a128703a 	and	r20,r20,r4
    9d40:	0039883a 	mov	fp,zero
    9d44:	103f341e 	bne	r2,zero,9a18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009a18>
    9d48:	483e2e26 	beq	r9,zero,9604 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009604>
    9d4c:	0025883a 	mov	r18,zero
    9d50:	94800c04 	addi	r18,r18,48
    9d54:	dc8019c5 	stb	r18,103(sp)
    9d58:	dcc02717 	ldw	r19,156(sp)
    9d5c:	dd4019c4 	addi	r21,sp,103
    9d60:	003e2b06 	br	9610 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009610>
    9d64:	21003fcc 	andi	r4,r4,255
    9d68:	2002361e 	bne	r4,zero,a644 <___vfiprintf_internal_r+0x1434>
    9d6c:	1801c126 	beq	r3,zero,a474 <___vfiprintf_internal_r+0x1264>
    9d70:	04800044 	movi	r18,1
    9d74:	d8c01005 	stb	r3,64(sp)
    9d78:	d8001d85 	stb	zero,118(sp)
    9d7c:	9027883a 	mov	r19,r18
    9d80:	dd401004 	addi	r21,sp,64
    9d84:	003f1106 	br	99cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70099cc>
    9d88:	d9402117 	ldw	r5,132(sp)
    9d8c:	d9002017 	ldw	r4,128(sp)
    9d90:	d9801a04 	addi	r6,sp,104
    9d94:	d9c02b15 	stw	r7,172(sp)
    9d98:	dbc02a15 	stw	r15,168(sp)
    9d9c:	00090fc0 	call	90fc <__sprint_r.part.0>
    9da0:	d9c02b17 	ldw	r7,172(sp)
    9da4:	dbc02a17 	ldw	r15,168(sp)
    9da8:	10006d1e 	bne	r2,zero,9f60 <___vfiprintf_internal_r+0xd50>
    9dac:	d9801b17 	ldw	r6,108(sp)
    9db0:	d8801c17 	ldw	r2,112(sp)
    9db4:	d811883a 	mov	r8,sp
    9db8:	31400044 	addi	r5,r6,1
    9dbc:	003e3306 	br	968c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700968c>
    9dc0:	d9401b17 	ldw	r5,108(sp)
    9dc4:	d8801c17 	ldw	r2,112(sp)
    9dc8:	29000044 	addi	r4,r5,1
    9dcc:	d8c01d87 	ldb	r3,118(sp)
    9dd0:	183e4d26 	beq	r3,zero,9708 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009708>
    9dd4:	00c00044 	movi	r3,1
    9dd8:	d9401d84 	addi	r5,sp,118
    9ddc:	10c5883a 	add	r2,r2,r3
    9de0:	41400015 	stw	r5,0(r8)
    9de4:	40c00115 	stw	r3,4(r8)
    9de8:	d8801c15 	stw	r2,112(sp)
    9dec:	d9001b15 	stw	r4,108(sp)
    9df0:	014001c4 	movi	r5,7
    9df4:	2900a90e 	bge	r5,r4,a09c <___vfiprintf_internal_r+0xe8c>
    9df8:	1000da1e 	bne	r2,zero,a164 <___vfiprintf_internal_r+0xf54>
    9dfc:	7000ab1e 	bne	r14,zero,a0ac <___vfiprintf_internal_r+0xe9c>
    9e00:	000b883a 	mov	r5,zero
    9e04:	1809883a 	mov	r4,r3
    9e08:	d811883a 	mov	r8,sp
    9e0c:	00c02004 	movi	r3,128
    9e10:	e0fe4d26 	beq	fp,r3,9748 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009748>
    9e14:	4cf9c83a 	sub	fp,r9,r19
    9e18:	073e7b0e 	bge	zero,fp,9808 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009808>
    9e1c:	01c00404 	movi	r7,16
    9e20:	3f01900e 	bge	r7,fp,a464 <___vfiprintf_internal_r+0x1254>
    9e24:	00c000b4 	movhi	r3,2
    9e28:	18ebf704 	addi	r3,r3,-20516
    9e2c:	d8c02415 	stw	r3,144(sp)
    9e30:	034001c4 	movi	r13,7
    9e34:	00000506 	br	9e4c <___vfiprintf_internal_r+0xc3c>
    9e38:	29000084 	addi	r4,r5,2
    9e3c:	42000204 	addi	r8,r8,8
    9e40:	180b883a 	mov	r5,r3
    9e44:	e73ffc04 	addi	fp,fp,-16
    9e48:	3f000d0e 	bge	r7,fp,9e80 <___vfiprintf_internal_r+0xc70>
    9e4c:	10800404 	addi	r2,r2,16
    9e50:	28c00044 	addi	r3,r5,1
    9e54:	45c00015 	stw	r23,0(r8)
    9e58:	41c00115 	stw	r7,4(r8)
    9e5c:	d8801c15 	stw	r2,112(sp)
    9e60:	d8c01b15 	stw	r3,108(sp)
    9e64:	68fff40e 	bge	r13,r3,9e38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009e38>
    9e68:	1000101e 	bne	r2,zero,9eac <___vfiprintf_internal_r+0xc9c>
    9e6c:	e73ffc04 	addi	fp,fp,-16
    9e70:	01000044 	movi	r4,1
    9e74:	000b883a 	mov	r5,zero
    9e78:	d811883a 	mov	r8,sp
    9e7c:	3f3ff316 	blt	r7,fp,9e4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009e4c>
    9e80:	da802417 	ldw	r10,144(sp)
    9e84:	1705883a 	add	r2,r2,fp
    9e88:	47000115 	stw	fp,4(r8)
    9e8c:	42800015 	stw	r10,0(r8)
    9e90:	d8801c15 	stw	r2,112(sp)
    9e94:	d9001b15 	stw	r4,108(sp)
    9e98:	00c001c4 	movi	r3,7
    9e9c:	19003616 	blt	r3,r4,9f78 <___vfiprintf_internal_r+0xd68>
    9ea0:	42000204 	addi	r8,r8,8
    9ea4:	21000044 	addi	r4,r4,1
    9ea8:	003e5706 	br	9808 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009808>
    9eac:	d9402117 	ldw	r5,132(sp)
    9eb0:	d9002017 	ldw	r4,128(sp)
    9eb4:	d9801a04 	addi	r6,sp,104
    9eb8:	d9c02b15 	stw	r7,172(sp)
    9ebc:	db402a15 	stw	r13,168(sp)
    9ec0:	00090fc0 	call	90fc <__sprint_r.part.0>
    9ec4:	d9c02b17 	ldw	r7,172(sp)
    9ec8:	db402a17 	ldw	r13,168(sp)
    9ecc:	1000241e 	bne	r2,zero,9f60 <___vfiprintf_internal_r+0xd50>
    9ed0:	d9401b17 	ldw	r5,108(sp)
    9ed4:	d8801c17 	ldw	r2,112(sp)
    9ed8:	d811883a 	mov	r8,sp
    9edc:	29000044 	addi	r4,r5,1
    9ee0:	003fd806 	br	9e44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009e44>
    9ee4:	d9401b17 	ldw	r5,108(sp)
    9ee8:	00c000b4 	movhi	r3,2
    9eec:	18ebfb04 	addi	r3,r3,-20500
    9ef0:	d8c02415 	stw	r3,144(sp)
    9ef4:	29400044 	addi	r5,r5,1
    9ef8:	d8c02417 	ldw	r3,144(sp)
    9efc:	14c5883a 	add	r2,r2,r19
    9f00:	44c00115 	stw	r19,4(r8)
    9f04:	40c00015 	stw	r3,0(r8)
    9f08:	d8801c15 	stw	r2,112(sp)
    9f0c:	d9401b15 	stw	r5,108(sp)
    9f10:	00c001c4 	movi	r3,7
    9f14:	1940070e 	bge	r3,r5,9f34 <___vfiprintf_internal_r+0xd24>
    9f18:	103e4826 	beq	r2,zero,983c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700983c>
    9f1c:	d9402117 	ldw	r5,132(sp)
    9f20:	d9002017 	ldw	r4,128(sp)
    9f24:	d9801a04 	addi	r6,sp,104
    9f28:	00090fc0 	call	90fc <__sprint_r.part.0>
    9f2c:	10000c1e 	bne	r2,zero,9f60 <___vfiprintf_internal_r+0xd50>
    9f30:	d8801c17 	ldw	r2,112(sp)
    9f34:	8c80010e 	bge	r17,r18,9f3c <___vfiprintf_internal_r+0xd2c>
    9f38:	9023883a 	mov	r17,r18
    9f3c:	da802317 	ldw	r10,140(sp)
    9f40:	5455883a 	add	r10,r10,r17
    9f44:	da802315 	stw	r10,140(sp)
    9f48:	103e4126 	beq	r2,zero,9850 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009850>
    9f4c:	d9402117 	ldw	r5,132(sp)
    9f50:	d9002017 	ldw	r4,128(sp)
    9f54:	d9801a04 	addi	r6,sp,104
    9f58:	00090fc0 	call	90fc <__sprint_r.part.0>
    9f5c:	103e3c26 	beq	r2,zero,9850 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009850>
    9f60:	dd002117 	ldw	r20,132(sp)
    9f64:	a080030b 	ldhu	r2,12(r20)
    9f68:	1080100c 	andi	r2,r2,64
    9f6c:	1001231e 	bne	r2,zero,a3fc <___vfiprintf_internal_r+0x11ec>
    9f70:	d8802317 	ldw	r2,140(sp)
    9f74:	003d7b06 	br	9564 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009564>
    9f78:	1000991e 	bne	r2,zero,a1e0 <___vfiprintf_internal_r+0xfd0>
    9f7c:	00c00044 	movi	r3,1
    9f80:	9805883a 	mov	r2,r19
    9f84:	dd400015 	stw	r21,0(sp)
    9f88:	dcc00115 	stw	r19,4(sp)
    9f8c:	dcc01c15 	stw	r19,112(sp)
    9f90:	d8c01b15 	stw	r3,108(sp)
    9f94:	d811883a 	mov	r8,sp
    9f98:	42000204 	addi	r8,r8,8
    9f9c:	a2c0010c 	andi	r11,r20,4
    9fa0:	583fe426 	beq	r11,zero,9f34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f34>
    9fa4:	8ca7c83a 	sub	r19,r17,r18
    9fa8:	04ffe20e 	bge	zero,r19,9f34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f34>
    9fac:	01c00404 	movi	r7,16
    9fb0:	3cffcc0e 	bge	r7,r19,9ee4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ee4>
    9fb4:	028000b4 	movhi	r10,2
    9fb8:	52abfb04 	addi	r10,r10,-20500
    9fbc:	d9001b17 	ldw	r4,108(sp)
    9fc0:	da802415 	stw	r10,144(sp)
    9fc4:	382b883a 	mov	r21,r7
    9fc8:	050001c4 	movi	r20,7
    9fcc:	df002017 	ldw	fp,128(sp)
    9fd0:	00000506 	br	9fe8 <___vfiprintf_internal_r+0xdd8>
    9fd4:	21400084 	addi	r5,r4,2
    9fd8:	42000204 	addi	r8,r8,8
    9fdc:	1809883a 	mov	r4,r3
    9fe0:	9cfffc04 	addi	r19,r19,-16
    9fe4:	acffc40e 	bge	r21,r19,9ef8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ef8>
    9fe8:	10800404 	addi	r2,r2,16
    9fec:	20c00044 	addi	r3,r4,1
    9ff0:	45800015 	stw	r22,0(r8)
    9ff4:	45400115 	stw	r21,4(r8)
    9ff8:	d8801c15 	stw	r2,112(sp)
    9ffc:	d8c01b15 	stw	r3,108(sp)
    a000:	a0fff40e 	bge	r20,r3,9fd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009fd4>
    a004:	1000041e 	bne	r2,zero,a018 <___vfiprintf_internal_r+0xe08>
    a008:	01400044 	movi	r5,1
    a00c:	0009883a 	mov	r4,zero
    a010:	d811883a 	mov	r8,sp
    a014:	003ff206 	br	9fe0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009fe0>
    a018:	d9402117 	ldw	r5,132(sp)
    a01c:	d9801a04 	addi	r6,sp,104
    a020:	e009883a 	mov	r4,fp
    a024:	00090fc0 	call	90fc <__sprint_r.part.0>
    a028:	103fcd1e 	bne	r2,zero,9f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f60>
    a02c:	d9001b17 	ldw	r4,108(sp)
    a030:	d8801c17 	ldw	r2,112(sp)
    a034:	d811883a 	mov	r8,sp
    a038:	21400044 	addi	r5,r4,1
    a03c:	003fe806 	br	9fe0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009fe0>
    a040:	d9402117 	ldw	r5,132(sp)
    a044:	d9002017 	ldw	r4,128(sp)
    a048:	d9801a04 	addi	r6,sp,104
    a04c:	d9c02b15 	stw	r7,172(sp)
    a050:	db402a15 	stw	r13,168(sp)
    a054:	00090fc0 	call	90fc <__sprint_r.part.0>
    a058:	d9c02b17 	ldw	r7,172(sp)
    a05c:	db402a17 	ldw	r13,168(sp)
    a060:	103fbf1e 	bne	r2,zero,9f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f60>
    a064:	d9401b17 	ldw	r5,108(sp)
    a068:	d8801c17 	ldw	r2,112(sp)
    a06c:	d811883a 	mov	r8,sp
    a070:	29800044 	addi	r6,r5,1
    a074:	003dc406 	br	9788 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009788>
    a078:	1000d21e 	bne	r2,zero,a3c4 <___vfiprintf_internal_r+0x11b4>
    a07c:	d8c01d87 	ldb	r3,118(sp)
    a080:	18009526 	beq	r3,zero,a2d8 <___vfiprintf_internal_r+0x10c8>
    a084:	00800044 	movi	r2,1
    a088:	d8c01d84 	addi	r3,sp,118
    a08c:	1009883a 	mov	r4,r2
    a090:	d8c00015 	stw	r3,0(sp)
    a094:	d8800115 	stw	r2,4(sp)
    a098:	d811883a 	mov	r8,sp
    a09c:	200b883a 	mov	r5,r4
    a0a0:	42000204 	addi	r8,r8,8
    a0a4:	21000044 	addi	r4,r4,1
    a0a8:	003d9706 	br	9708 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009708>
    a0ac:	d9001d04 	addi	r4,sp,116
    a0b0:	00800084 	movi	r2,2
    a0b4:	d9000015 	stw	r4,0(sp)
    a0b8:	d8800115 	stw	r2,4(sp)
    a0bc:	1809883a 	mov	r4,r3
    a0c0:	d811883a 	mov	r8,sp
    a0c4:	200b883a 	mov	r5,r4
    a0c8:	42000204 	addi	r8,r8,8
    a0cc:	21000044 	addi	r4,r4,1
    a0d0:	003f4e06 	br	9e0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009e0c>
    a0d4:	d8001d85 	stb	zero,118(sp)
    a0d8:	48005016 	blt	r9,zero,a21c <___vfiprintf_internal_r+0x100c>
    a0dc:	00ffdfc4 	movi	r3,-129
    a0e0:	94c4b03a 	or	r2,r18,r19
    a0e4:	a0e8703a 	and	r20,r20,r3
    a0e8:	103d4426 	beq	r2,zero,95fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70095fc>
    a0ec:	0039883a 	mov	fp,zero
    a0f0:	d9002617 	ldw	r4,152(sp)
    a0f4:	dd401a04 	addi	r21,sp,104
    a0f8:	908003cc 	andi	r2,r18,15
    a0fc:	9806973a 	slli	r3,r19,28
    a100:	2085883a 	add	r2,r4,r2
    a104:	9024d13a 	srli	r18,r18,4
    a108:	10800003 	ldbu	r2,0(r2)
    a10c:	9826d13a 	srli	r19,r19,4
    a110:	ad7fffc4 	addi	r21,r21,-1
    a114:	1ca4b03a 	or	r18,r3,r18
    a118:	a8800005 	stb	r2,0(r21)
    a11c:	94c4b03a 	or	r2,r18,r19
    a120:	103ff51e 	bne	r2,zero,a0f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a0f8>
    a124:	003e5906 	br	9a8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009a8c>
    a128:	d9402117 	ldw	r5,132(sp)
    a12c:	d9002017 	ldw	r4,128(sp)
    a130:	d9801a04 	addi	r6,sp,104
    a134:	00090fc0 	call	90fc <__sprint_r.part.0>
    a138:	103f891e 	bne	r2,zero,9f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f60>
    a13c:	d8801c17 	ldw	r2,112(sp)
    a140:	d811883a 	mov	r8,sp
    a144:	003f9506 	br	9f9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f9c>
    a148:	d9402117 	ldw	r5,132(sp)
    a14c:	d9002017 	ldw	r4,128(sp)
    a150:	d9801a04 	addi	r6,sp,104
    a154:	00090fc0 	call	90fc <__sprint_r.part.0>
    a158:	103f811e 	bne	r2,zero,9f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f60>
    a15c:	d811883a 	mov	r8,sp
    a160:	003ced06 	br	9518 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009518>
    a164:	d9402117 	ldw	r5,132(sp)
    a168:	d9002017 	ldw	r4,128(sp)
    a16c:	d9801a04 	addi	r6,sp,104
    a170:	da402c15 	stw	r9,176(sp)
    a174:	db802a15 	stw	r14,168(sp)
    a178:	00090fc0 	call	90fc <__sprint_r.part.0>
    a17c:	da402c17 	ldw	r9,176(sp)
    a180:	db802a17 	ldw	r14,168(sp)
    a184:	103f761e 	bne	r2,zero,9f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f60>
    a188:	d9401b17 	ldw	r5,108(sp)
    a18c:	d8801c17 	ldw	r2,112(sp)
    a190:	d811883a 	mov	r8,sp
    a194:	29000044 	addi	r4,r5,1
    a198:	003d5b06 	br	9708 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009708>
    a19c:	d9402117 	ldw	r5,132(sp)
    a1a0:	d9002017 	ldw	r4,128(sp)
    a1a4:	d9801a04 	addi	r6,sp,104
    a1a8:	da402c15 	stw	r9,176(sp)
    a1ac:	00090fc0 	call	90fc <__sprint_r.part.0>
    a1b0:	da402c17 	ldw	r9,176(sp)
    a1b4:	103f6a1e 	bne	r2,zero,9f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f60>
    a1b8:	d9401b17 	ldw	r5,108(sp)
    a1bc:	d8801c17 	ldw	r2,112(sp)
    a1c0:	d811883a 	mov	r8,sp
    a1c4:	29000044 	addi	r4,r5,1
    a1c8:	003f1006 	br	9e0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009e0c>
    a1cc:	1000c31e 	bne	r2,zero,a4dc <___vfiprintf_internal_r+0x12cc>
    a1d0:	01000044 	movi	r4,1
    a1d4:	000b883a 	mov	r5,zero
    a1d8:	d811883a 	mov	r8,sp
    a1dc:	003f0d06 	br	9e14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009e14>
    a1e0:	d9402117 	ldw	r5,132(sp)
    a1e4:	d9002017 	ldw	r4,128(sp)
    a1e8:	d9801a04 	addi	r6,sp,104
    a1ec:	00090fc0 	call	90fc <__sprint_r.part.0>
    a1f0:	103f5b1e 	bne	r2,zero,9f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f60>
    a1f4:	d9001b17 	ldw	r4,108(sp)
    a1f8:	d8801c17 	ldw	r2,112(sp)
    a1fc:	d811883a 	mov	r8,sp
    a200:	21000044 	addi	r4,r4,1
    a204:	003d8006 	br	9808 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009808>
    a208:	010000b4 	movhi	r4,2
    a20c:	212b9704 	addi	r4,r4,-20900
    a210:	d9002615 	stw	r4,152(sp)
    a214:	d8c02215 	stw	r3,136(sp)
    a218:	1029883a 	mov	r20,r2
    a21c:	94c4b03a 	or	r2,r18,r19
    a220:	103fb21e 	bne	r2,zero,a0ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a0ec>
    a224:	0039883a 	mov	fp,zero
    a228:	00800084 	movi	r2,2
    a22c:	003e6b06 	br	9bdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009bdc>
    a230:	da802217 	ldw	r10,136(sp)
    a234:	d8001d85 	stb	zero,118(sp)
    a238:	0027883a 	mov	r19,zero
    a23c:	50800104 	addi	r2,r10,4
    a240:	54800017 	ldw	r18,0(r10)
    a244:	483e6016 	blt	r9,zero,9bc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009bc8>
    a248:	00ffdfc4 	movi	r3,-129
    a24c:	d8802215 	stw	r2,136(sp)
    a250:	a0e8703a 	and	r20,r20,r3
    a254:	0039883a 	mov	fp,zero
    a258:	903ebb26 	beq	r18,zero,9d48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009d48>
    a25c:	00800244 	movi	r2,9
    a260:	14bdee36 	bltu	r2,r18,9a1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009a1c>
    a264:	003eba06 	br	9d50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009d50>
    a268:	00800c04 	movi	r2,48
    a26c:	d8c01d45 	stb	r3,117(sp)
    a270:	d8801d05 	stb	r2,116(sp)
    a274:	d8001d85 	stb	zero,118(sp)
    a278:	a0c00094 	ori	r3,r20,2
    a27c:	4800a916 	blt	r9,zero,a524 <___vfiprintf_internal_r+0x1314>
    a280:	00bfdfc4 	movi	r2,-129
    a284:	a096703a 	and	r11,r20,r2
    a288:	5d000094 	ori	r20,r11,2
    a28c:	0039883a 	mov	fp,zero
    a290:	003f9706 	br	a0f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a0f0>
    a294:	8025883a 	mov	r18,r16
    a298:	003c2e06 	br	9354 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009354>
    a29c:	008000b4 	movhi	r2,2
    a2a0:	10ab9704 	addi	r2,r2,-20900
    a2a4:	0039883a 	mov	fp,zero
    a2a8:	d8802615 	stw	r2,152(sp)
    a2ac:	003f9006 	br	a0f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a0f0>
    a2b0:	04a5c83a 	sub	r18,zero,r18
    a2b4:	07000b44 	movi	fp,45
    a2b8:	9004c03a 	cmpne	r2,r18,zero
    a2bc:	04e7c83a 	sub	r19,zero,r19
    a2c0:	df001d85 	stb	fp,118(sp)
    a2c4:	98a7c83a 	sub	r19,r19,r2
    a2c8:	48009f16 	blt	r9,zero,a548 <___vfiprintf_internal_r+0x1338>
    a2cc:	00bfdfc4 	movi	r2,-129
    a2d0:	a0a8703a 	and	r20,r20,r2
    a2d4:	003dd006 	br	9a18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009a18>
    a2d8:	70004c26 	beq	r14,zero,a40c <___vfiprintf_internal_r+0x11fc>
    a2dc:	00800084 	movi	r2,2
    a2e0:	d8c01d04 	addi	r3,sp,116
    a2e4:	d8c00015 	stw	r3,0(sp)
    a2e8:	d8800115 	stw	r2,4(sp)
    a2ec:	01000044 	movi	r4,1
    a2f0:	d811883a 	mov	r8,sp
    a2f4:	003f7306 	br	a0c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a0c4>
    a2f8:	a080100c 	andi	r2,r20,64
    a2fc:	da802217 	ldw	r10,136(sp)
    a300:	103e0626 	beq	r2,zero,9b1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009b1c>
    a304:	5480000f 	ldh	r18,0(r10)
    a308:	52800104 	addi	r10,r10,4
    a30c:	da802215 	stw	r10,136(sp)
    a310:	9027d7fa 	srai	r19,r18,31
    a314:	9805883a 	mov	r2,r19
    a318:	003db806 	br	99fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70099fc>
    a31c:	a080040c 	andi	r2,r20,16
    a320:	1000091e 	bne	r2,zero,a348 <___vfiprintf_internal_r+0x1138>
    a324:	a2c0100c 	andi	r11,r20,64
    a328:	58000726 	beq	r11,zero,a348 <___vfiprintf_internal_r+0x1138>
    a32c:	da802217 	ldw	r10,136(sp)
    a330:	50800017 	ldw	r2,0(r10)
    a334:	52800104 	addi	r10,r10,4
    a338:	da802215 	stw	r10,136(sp)
    a33c:	da802317 	ldw	r10,140(sp)
    a340:	1280000d 	sth	r10,0(r2)
    a344:	003be706 	br	92e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70092e4>
    a348:	da802217 	ldw	r10,136(sp)
    a34c:	50800017 	ldw	r2,0(r10)
    a350:	52800104 	addi	r10,r10,4
    a354:	da802215 	stw	r10,136(sp)
    a358:	da802317 	ldw	r10,140(sp)
    a35c:	12800015 	stw	r10,0(r2)
    a360:	003be006 	br	92e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70092e4>
    a364:	a080100c 	andi	r2,r20,64
    a368:	da802217 	ldw	r10,136(sp)
    a36c:	10003026 	beq	r2,zero,a430 <___vfiprintf_internal_r+0x1220>
    a370:	5480000b 	ldhu	r18,0(r10)
    a374:	52800104 	addi	r10,r10,4
    a378:	0027883a 	mov	r19,zero
    a37c:	da802215 	stw	r10,136(sp)
    a380:	003d8006 	br	9984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009984>
    a384:	80c00007 	ldb	r3,0(r16)
    a388:	003c0006 	br	938c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700938c>
    a38c:	a080100c 	andi	r2,r20,64
    a390:	d8001d85 	stb	zero,118(sp)
    a394:	da802217 	ldw	r10,136(sp)
    a398:	1000201e 	bne	r2,zero,a41c <___vfiprintf_internal_r+0x120c>
    a39c:	50800104 	addi	r2,r10,4
    a3a0:	54800017 	ldw	r18,0(r10)
    a3a4:	0027883a 	mov	r19,zero
    a3a8:	483def0e 	bge	r9,zero,9b68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009b68>
    a3ac:	94c6b03a 	or	r3,r18,r19
    a3b0:	d8802215 	stw	r2,136(sp)
    a3b4:	183d4e1e 	bne	r3,zero,98f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70098f0>
    a3b8:	0039883a 	mov	fp,zero
    a3bc:	0005883a 	mov	r2,zero
    a3c0:	003e0606 	br	9bdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009bdc>
    a3c4:	d9402117 	ldw	r5,132(sp)
    a3c8:	d9002017 	ldw	r4,128(sp)
    a3cc:	d9801a04 	addi	r6,sp,104
    a3d0:	da402c15 	stw	r9,176(sp)
    a3d4:	db802a15 	stw	r14,168(sp)
    a3d8:	00090fc0 	call	90fc <__sprint_r.part.0>
    a3dc:	da402c17 	ldw	r9,176(sp)
    a3e0:	db802a17 	ldw	r14,168(sp)
    a3e4:	103ede1e 	bne	r2,zero,9f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f60>
    a3e8:	d9401b17 	ldw	r5,108(sp)
    a3ec:	d8801c17 	ldw	r2,112(sp)
    a3f0:	d811883a 	mov	r8,sp
    a3f4:	29000044 	addi	r4,r5,1
    a3f8:	003e7406 	br	9dcc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009dcc>
    a3fc:	00bfffc4 	movi	r2,-1
    a400:	003c5806 	br	9564 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009564>
    a404:	d811883a 	mov	r8,sp
    a408:	003ee806 	br	9fac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009fac>
    a40c:	000b883a 	mov	r5,zero
    a410:	01000044 	movi	r4,1
    a414:	d811883a 	mov	r8,sp
    a418:	003e7c06 	br	9e0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009e0c>
    a41c:	50800104 	addi	r2,r10,4
    a420:	5480000b 	ldhu	r18,0(r10)
    a424:	0027883a 	mov	r19,zero
    a428:	483dcf0e 	bge	r9,zero,9b68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009b68>
    a42c:	003fdf06 	br	a3ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a3ac>
    a430:	54800017 	ldw	r18,0(r10)
    a434:	52800104 	addi	r10,r10,4
    a438:	0027883a 	mov	r19,zero
    a43c:	da802215 	stw	r10,136(sp)
    a440:	003d5006 	br	9984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009984>
    a444:	50800104 	addi	r2,r10,4
    a448:	5480000b 	ldhu	r18,0(r10)
    a44c:	0027883a 	mov	r19,zero
    a450:	483f7d0e 	bge	r9,zero,a248 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a248>
    a454:	003ddc06 	br	9bc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009bc8>
    a458:	d8c02215 	stw	r3,136(sp)
    a45c:	0039883a 	mov	fp,zero
    a460:	003ddb06 	br	9bd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009bd0>
    a464:	028000b4 	movhi	r10,2
    a468:	52abf704 	addi	r10,r10,-20516
    a46c:	da802415 	stw	r10,144(sp)
    a470:	003e8306 	br	9e80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009e80>
    a474:	d8801c17 	ldw	r2,112(sp)
    a478:	dd002117 	ldw	r20,132(sp)
    a47c:	103eb926 	beq	r2,zero,9f64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f64>
    a480:	d9002017 	ldw	r4,128(sp)
    a484:	d9801a04 	addi	r6,sp,104
    a488:	a00b883a 	mov	r5,r20
    a48c:	00090fc0 	call	90fc <__sprint_r.part.0>
    a490:	003eb406 	br	9f64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f64>
    a494:	80c00043 	ldbu	r3,1(r16)
    a498:	a5000814 	ori	r20,r20,32
    a49c:	84000044 	addi	r16,r16,1
    a4a0:	18c03fcc 	andi	r3,r3,255
    a4a4:	18c0201c 	xori	r3,r3,128
    a4a8:	18ffe004 	addi	r3,r3,-128
    a4ac:	003bb706 	br	938c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700938c>
    a4b0:	a809883a 	mov	r4,r21
    a4b4:	d8c02a15 	stw	r3,168(sp)
    a4b8:	da002b15 	stw	r8,172(sp)
    a4bc:	0001b640 	call	1b64 <strlen>
    a4c0:	d8c02a17 	ldw	r3,168(sp)
    a4c4:	1027883a 	mov	r19,r2
    a4c8:	df001d83 	ldbu	fp,118(sp)
    a4cc:	d8c02215 	stw	r3,136(sp)
    a4d0:	0013883a 	mov	r9,zero
    a4d4:	da002b17 	ldw	r8,172(sp)
    a4d8:	003c4d06 	br	9610 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009610>
    a4dc:	d9402117 	ldw	r5,132(sp)
    a4e0:	d9002017 	ldw	r4,128(sp)
    a4e4:	d9801a04 	addi	r6,sp,104
    a4e8:	da402c15 	stw	r9,176(sp)
    a4ec:	00090fc0 	call	90fc <__sprint_r.part.0>
    a4f0:	da402c17 	ldw	r9,176(sp)
    a4f4:	103e9a1e 	bne	r2,zero,9f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f60>
    a4f8:	d9401b17 	ldw	r5,108(sp)
    a4fc:	d8801c17 	ldw	r2,112(sp)
    a500:	d811883a 	mov	r8,sp
    a504:	29000044 	addi	r4,r5,1
    a508:	003e4206 	br	9e14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009e14>
    a50c:	d9401b17 	ldw	r5,108(sp)
    a510:	010000b4 	movhi	r4,2
    a514:	212bfb04 	addi	r4,r4,-20500
    a518:	d9002415 	stw	r4,144(sp)
    a51c:	29400044 	addi	r5,r5,1
    a520:	003c6d06 	br	96d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70096d8>
    a524:	0039883a 	mov	fp,zero
    a528:	00800084 	movi	r2,2
    a52c:	10803fcc 	andi	r2,r2,255
    a530:	01000044 	movi	r4,1
    a534:	11001e26 	beq	r2,r4,a5b0 <___vfiprintf_internal_r+0x13a0>
    a538:	01000084 	movi	r4,2
    a53c:	11001e1e 	bne	r2,r4,a5b8 <___vfiprintf_internal_r+0x13a8>
    a540:	1829883a 	mov	r20,r3
    a544:	003eea06 	br	a0f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a0f0>
    a548:	a007883a 	mov	r3,r20
    a54c:	00800044 	movi	r2,1
    a550:	003ff606 	br	a52c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a52c>
    a554:	00800184 	movi	r2,6
    a558:	1240012e 	bgeu	r2,r9,a560 <___vfiprintf_internal_r+0x1350>
    a55c:	1013883a 	mov	r9,r2
    a560:	4827883a 	mov	r19,r9
    a564:	4825883a 	mov	r18,r9
    a568:	48001516 	blt	r9,zero,a5c0 <___vfiprintf_internal_r+0x13b0>
    a56c:	054000b4 	movhi	r21,2
    a570:	d8c02215 	stw	r3,136(sp)
    a574:	ad6b9c04 	addi	r21,r21,-20880
    a578:	003d1406 	br	99cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70099cc>
    a57c:	028000b4 	movhi	r10,2
    a580:	52abf704 	addi	r10,r10,-20516
    a584:	da802415 	stw	r10,144(sp)
    a588:	200d883a 	mov	r6,r4
    a58c:	003c9106 	br	97d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70097d4>
    a590:	5021883a 	mov	r16,r10
    a594:	0013883a 	mov	r9,zero
    a598:	003b7d06 	br	9390 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009390>
    a59c:	4827883a 	mov	r19,r9
    a5a0:	df001d83 	ldbu	fp,118(sp)
    a5a4:	d8c02215 	stw	r3,136(sp)
    a5a8:	0013883a 	mov	r9,zero
    a5ac:	003c1806 	br	9610 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009610>
    a5b0:	1829883a 	mov	r20,r3
    a5b4:	003d1806 	br	9a18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009a18>
    a5b8:	1829883a 	mov	r20,r3
    a5bc:	003ccd06 	br	98f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70098f4>
    a5c0:	0025883a 	mov	r18,zero
    a5c4:	003fe906 	br	a56c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a56c>
    a5c8:	d8802217 	ldw	r2,136(sp)
    a5cc:	80c00043 	ldbu	r3,1(r16)
    a5d0:	5021883a 	mov	r16,r10
    a5d4:	12400017 	ldw	r9,0(r2)
    a5d8:	10800104 	addi	r2,r2,4
    a5dc:	d8802215 	stw	r2,136(sp)
    a5e0:	483faf0e 	bge	r9,zero,a4a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a4a0>
    a5e4:	18c03fcc 	andi	r3,r3,255
    a5e8:	18c0201c 	xori	r3,r3,128
    a5ec:	027fffc4 	movi	r9,-1
    a5f0:	18ffe004 	addi	r3,r3,-128
    a5f4:	003b6506 	br	938c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700938c>
    a5f8:	d9c01d85 	stb	r7,118(sp)
    a5fc:	003ca006 	br	9880 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009880>
    a600:	d9c01d85 	stb	r7,118(sp)
    a604:	003cad06 	br	98bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70098bc>
    a608:	d9c01d85 	stb	r7,118(sp)
    a60c:	003d7d06 	br	9c04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009c04>
    a610:	d9c01d85 	stb	r7,118(sp)
    a614:	003d5f06 	br	9b94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009b94>
    a618:	a080004c 	andi	r2,r20,1
    a61c:	0039883a 	mov	fp,zero
    a620:	10000526 	beq	r2,zero,a638 <___vfiprintf_internal_r+0x1428>
    a624:	00800c04 	movi	r2,48
    a628:	d88019c5 	stb	r2,103(sp)
    a62c:	dcc02717 	ldw	r19,156(sp)
    a630:	dd4019c4 	addi	r21,sp,103
    a634:	003bf606 	br	9610 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009610>
    a638:	0027883a 	mov	r19,zero
    a63c:	dd401a04 	addi	r21,sp,104
    a640:	003bf306 	br	9610 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009610>
    a644:	d9c01d85 	stb	r7,118(sp)
    a648:	003dc806 	br	9d6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009d6c>
    a64c:	d9c01d85 	stb	r7,118(sp)
    a650:	003d3a06 	br	9b3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009b3c>
    a654:	d9c01d85 	stb	r7,118(sp)
    a658:	003d2a06 	br	9b04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009b04>
    a65c:	d9c01d85 	stb	r7,118(sp)
    a660:	003cde06 	br	99dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70099dc>
    a664:	d9c01d85 	stb	r7,118(sp)
    a668:	003cbc06 	br	995c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700995c>

0000a66c <__vfiprintf_internal>:
    a66c:	008000b4 	movhi	r2,2
    a670:	10b49c04 	addi	r2,r2,-11664
    a674:	300f883a 	mov	r7,r6
    a678:	280d883a 	mov	r6,r5
    a67c:	200b883a 	mov	r5,r4
    a680:	11000017 	ldw	r4,0(r2)
    a684:	00092101 	jmpi	9210 <___vfiprintf_internal_r>

0000a688 <__sbprintf>:
    a688:	2880030b 	ldhu	r2,12(r5)
    a68c:	2ac01917 	ldw	r11,100(r5)
    a690:	2a80038b 	ldhu	r10,14(r5)
    a694:	2a400717 	ldw	r9,28(r5)
    a698:	2a000917 	ldw	r8,36(r5)
    a69c:	defee204 	addi	sp,sp,-1144
    a6a0:	00c10004 	movi	r3,1024
    a6a4:	dc011a15 	stw	r16,1128(sp)
    a6a8:	10bfff4c 	andi	r2,r2,65533
    a6ac:	2821883a 	mov	r16,r5
    a6b0:	d8cb883a 	add	r5,sp,r3
    a6b4:	dc811c15 	stw	r18,1136(sp)
    a6b8:	dc411b15 	stw	r17,1132(sp)
    a6bc:	dfc11d15 	stw	ra,1140(sp)
    a6c0:	2025883a 	mov	r18,r4
    a6c4:	d881030d 	sth	r2,1036(sp)
    a6c8:	dac11915 	stw	r11,1124(sp)
    a6cc:	da81038d 	sth	r10,1038(sp)
    a6d0:	da410715 	stw	r9,1052(sp)
    a6d4:	da010915 	stw	r8,1060(sp)
    a6d8:	dec10015 	stw	sp,1024(sp)
    a6dc:	dec10415 	stw	sp,1040(sp)
    a6e0:	d8c10215 	stw	r3,1032(sp)
    a6e4:	d8c10515 	stw	r3,1044(sp)
    a6e8:	d8010615 	stw	zero,1048(sp)
    a6ec:	00092100 	call	9210 <___vfiprintf_internal_r>
    a6f0:	1023883a 	mov	r17,r2
    a6f4:	10000416 	blt	r2,zero,a708 <__sbprintf+0x80>
    a6f8:	d9410004 	addi	r5,sp,1024
    a6fc:	9009883a 	mov	r4,r18
    a700:	0005ac40 	call	5ac4 <_fflush_r>
    a704:	10000d1e 	bne	r2,zero,a73c <__sbprintf+0xb4>
    a708:	d881030b 	ldhu	r2,1036(sp)
    a70c:	1080100c 	andi	r2,r2,64
    a710:	10000326 	beq	r2,zero,a720 <__sbprintf+0x98>
    a714:	8080030b 	ldhu	r2,12(r16)
    a718:	10801014 	ori	r2,r2,64
    a71c:	8080030d 	sth	r2,12(r16)
    a720:	8805883a 	mov	r2,r17
    a724:	dfc11d17 	ldw	ra,1140(sp)
    a728:	dc811c17 	ldw	r18,1136(sp)
    a72c:	dc411b17 	ldw	r17,1132(sp)
    a730:	dc011a17 	ldw	r16,1128(sp)
    a734:	dec11e04 	addi	sp,sp,1144
    a738:	f800283a 	ret
    a73c:	047fffc4 	movi	r17,-1
    a740:	003ff106 	br	a708 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a708>

0000a744 <_write_r>:
    a744:	defffd04 	addi	sp,sp,-12
    a748:	2805883a 	mov	r2,r5
    a74c:	dc000015 	stw	r16,0(sp)
    a750:	040000b4 	movhi	r16,2
    a754:	dc400115 	stw	r17,4(sp)
    a758:	300b883a 	mov	r5,r6
    a75c:	843cca04 	addi	r16,r16,-3288
    a760:	2023883a 	mov	r17,r4
    a764:	380d883a 	mov	r6,r7
    a768:	1009883a 	mov	r4,r2
    a76c:	dfc00215 	stw	ra,8(sp)
    a770:	80000015 	stw	zero,0(r16)
    a774:	000eb880 	call	eb88 <write>
    a778:	00ffffc4 	movi	r3,-1
    a77c:	10c00526 	beq	r2,r3,a794 <_write_r+0x50>
    a780:	dfc00217 	ldw	ra,8(sp)
    a784:	dc400117 	ldw	r17,4(sp)
    a788:	dc000017 	ldw	r16,0(sp)
    a78c:	dec00304 	addi	sp,sp,12
    a790:	f800283a 	ret
    a794:	80c00017 	ldw	r3,0(r16)
    a798:	183ff926 	beq	r3,zero,a780 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a780>
    a79c:	88c00015 	stw	r3,0(r17)
    a7a0:	003ff706 	br	a780 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a780>

0000a7a4 <_close_r>:
    a7a4:	defffd04 	addi	sp,sp,-12
    a7a8:	dc000015 	stw	r16,0(sp)
    a7ac:	040000b4 	movhi	r16,2
    a7b0:	dc400115 	stw	r17,4(sp)
    a7b4:	843cca04 	addi	r16,r16,-3288
    a7b8:	2023883a 	mov	r17,r4
    a7bc:	2809883a 	mov	r4,r5
    a7c0:	dfc00215 	stw	ra,8(sp)
    a7c4:	80000015 	stw	zero,0(r16)
    a7c8:	000e3800 	call	e380 <close>
    a7cc:	00ffffc4 	movi	r3,-1
    a7d0:	10c00526 	beq	r2,r3,a7e8 <_close_r+0x44>
    a7d4:	dfc00217 	ldw	ra,8(sp)
    a7d8:	dc400117 	ldw	r17,4(sp)
    a7dc:	dc000017 	ldw	r16,0(sp)
    a7e0:	dec00304 	addi	sp,sp,12
    a7e4:	f800283a 	ret
    a7e8:	80c00017 	ldw	r3,0(r16)
    a7ec:	183ff926 	beq	r3,zero,a7d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a7d4>
    a7f0:	88c00015 	stw	r3,0(r17)
    a7f4:	003ff706 	br	a7d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a7d4>

0000a7f8 <_calloc_r>:
    a7f8:	298b383a 	mul	r5,r5,r6
    a7fc:	defffe04 	addi	sp,sp,-8
    a800:	dfc00115 	stw	ra,4(sp)
    a804:	dc000015 	stw	r16,0(sp)
    a808:	0006c000 	call	6c00 <_malloc_r>
    a80c:	10002926 	beq	r2,zero,a8b4 <_calloc_r+0xbc>
    a810:	11bfff17 	ldw	r6,-4(r2)
    a814:	1021883a 	mov	r16,r2
    a818:	00bfff04 	movi	r2,-4
    a81c:	308c703a 	and	r6,r6,r2
    a820:	00c00904 	movi	r3,36
    a824:	308d883a 	add	r6,r6,r2
    a828:	19801636 	bltu	r3,r6,a884 <_calloc_r+0x8c>
    a82c:	008004c4 	movi	r2,19
    a830:	11800b2e 	bgeu	r2,r6,a860 <_calloc_r+0x68>
    a834:	80000015 	stw	zero,0(r16)
    a838:	80000115 	stw	zero,4(r16)
    a83c:	008006c4 	movi	r2,27
    a840:	11801a2e 	bgeu	r2,r6,a8ac <_calloc_r+0xb4>
    a844:	80000215 	stw	zero,8(r16)
    a848:	80000315 	stw	zero,12(r16)
    a84c:	30c0151e 	bne	r6,r3,a8a4 <_calloc_r+0xac>
    a850:	80000415 	stw	zero,16(r16)
    a854:	80800604 	addi	r2,r16,24
    a858:	80000515 	stw	zero,20(r16)
    a85c:	00000106 	br	a864 <_calloc_r+0x6c>
    a860:	8005883a 	mov	r2,r16
    a864:	10000015 	stw	zero,0(r2)
    a868:	10000115 	stw	zero,4(r2)
    a86c:	10000215 	stw	zero,8(r2)
    a870:	8005883a 	mov	r2,r16
    a874:	dfc00117 	ldw	ra,4(sp)
    a878:	dc000017 	ldw	r16,0(sp)
    a87c:	dec00204 	addi	sp,sp,8
    a880:	f800283a 	ret
    a884:	000b883a 	mov	r5,zero
    a888:	8009883a 	mov	r4,r16
    a88c:	00077940 	call	7794 <memset>
    a890:	8005883a 	mov	r2,r16
    a894:	dfc00117 	ldw	ra,4(sp)
    a898:	dc000017 	ldw	r16,0(sp)
    a89c:	dec00204 	addi	sp,sp,8
    a8a0:	f800283a 	ret
    a8a4:	80800404 	addi	r2,r16,16
    a8a8:	003fee06 	br	a864 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a864>
    a8ac:	80800204 	addi	r2,r16,8
    a8b0:	003fec06 	br	a864 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a864>
    a8b4:	0005883a 	mov	r2,zero
    a8b8:	003fee06 	br	a874 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a874>

0000a8bc <_fclose_r>:
    a8bc:	28003926 	beq	r5,zero,a9a4 <_fclose_r+0xe8>
    a8c0:	defffc04 	addi	sp,sp,-16
    a8c4:	dc400115 	stw	r17,4(sp)
    a8c8:	dc000015 	stw	r16,0(sp)
    a8cc:	dfc00315 	stw	ra,12(sp)
    a8d0:	dc800215 	stw	r18,8(sp)
    a8d4:	2023883a 	mov	r17,r4
    a8d8:	2821883a 	mov	r16,r5
    a8dc:	20000226 	beq	r4,zero,a8e8 <_fclose_r+0x2c>
    a8e0:	20800e17 	ldw	r2,56(r4)
    a8e4:	10002726 	beq	r2,zero,a984 <_fclose_r+0xc8>
    a8e8:	8080030f 	ldh	r2,12(r16)
    a8ec:	1000071e 	bne	r2,zero,a90c <_fclose_r+0x50>
    a8f0:	0005883a 	mov	r2,zero
    a8f4:	dfc00317 	ldw	ra,12(sp)
    a8f8:	dc800217 	ldw	r18,8(sp)
    a8fc:	dc400117 	ldw	r17,4(sp)
    a900:	dc000017 	ldw	r16,0(sp)
    a904:	dec00404 	addi	sp,sp,16
    a908:	f800283a 	ret
    a90c:	800b883a 	mov	r5,r16
    a910:	8809883a 	mov	r4,r17
    a914:	00058a80 	call	58a8 <__sflush_r>
    a918:	1025883a 	mov	r18,r2
    a91c:	80800b17 	ldw	r2,44(r16)
    a920:	10000426 	beq	r2,zero,a934 <_fclose_r+0x78>
    a924:	81400717 	ldw	r5,28(r16)
    a928:	8809883a 	mov	r4,r17
    a92c:	103ee83a 	callr	r2
    a930:	10001616 	blt	r2,zero,a98c <_fclose_r+0xd0>
    a934:	8080030b 	ldhu	r2,12(r16)
    a938:	1080200c 	andi	r2,r2,128
    a93c:	1000151e 	bne	r2,zero,a994 <_fclose_r+0xd8>
    a940:	81400c17 	ldw	r5,48(r16)
    a944:	28000526 	beq	r5,zero,a95c <_fclose_r+0xa0>
    a948:	80801004 	addi	r2,r16,64
    a94c:	28800226 	beq	r5,r2,a958 <_fclose_r+0x9c>
    a950:	8809883a 	mov	r4,r17
    a954:	00060140 	call	6014 <_free_r>
    a958:	80000c15 	stw	zero,48(r16)
    a95c:	81401117 	ldw	r5,68(r16)
    a960:	28000326 	beq	r5,zero,a970 <_fclose_r+0xb4>
    a964:	8809883a 	mov	r4,r17
    a968:	00060140 	call	6014 <_free_r>
    a96c:	80001115 	stw	zero,68(r16)
    a970:	0005eb00 	call	5eb0 <__sfp_lock_acquire>
    a974:	8000030d 	sth	zero,12(r16)
    a978:	0005eb40 	call	5eb4 <__sfp_lock_release>
    a97c:	9005883a 	mov	r2,r18
    a980:	003fdc06 	br	a8f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a8f4>
    a984:	0005ea00 	call	5ea0 <__sinit>
    a988:	003fd706 	br	a8e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a8e8>
    a98c:	04bfffc4 	movi	r18,-1
    a990:	003fe806 	br	a934 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a934>
    a994:	81400417 	ldw	r5,16(r16)
    a998:	8809883a 	mov	r4,r17
    a99c:	00060140 	call	6014 <_free_r>
    a9a0:	003fe706 	br	a940 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a940>
    a9a4:	0005883a 	mov	r2,zero
    a9a8:	f800283a 	ret

0000a9ac <fclose>:
    a9ac:	008000b4 	movhi	r2,2
    a9b0:	10b49c04 	addi	r2,r2,-11664
    a9b4:	200b883a 	mov	r5,r4
    a9b8:	11000017 	ldw	r4,0(r2)
    a9bc:	000a8bc1 	jmpi	a8bc <_fclose_r>

0000a9c0 <__fputwc>:
    a9c0:	defff804 	addi	sp,sp,-32
    a9c4:	dcc00415 	stw	r19,16(sp)
    a9c8:	dc800315 	stw	r18,12(sp)
    a9cc:	dc000115 	stw	r16,4(sp)
    a9d0:	dfc00715 	stw	ra,28(sp)
    a9d4:	dd400615 	stw	r21,24(sp)
    a9d8:	dd000515 	stw	r20,20(sp)
    a9dc:	dc400215 	stw	r17,8(sp)
    a9e0:	2027883a 	mov	r19,r4
    a9e4:	2825883a 	mov	r18,r5
    a9e8:	3021883a 	mov	r16,r6
    a9ec:	00069f00 	call	69f0 <__locale_mb_cur_max>
    a9f0:	00c00044 	movi	r3,1
    a9f4:	10c03e26 	beq	r2,r3,aaf0 <__fputwc+0x130>
    a9f8:	81c01704 	addi	r7,r16,92
    a9fc:	900d883a 	mov	r6,r18
    aa00:	d80b883a 	mov	r5,sp
    aa04:	9809883a 	mov	r4,r19
    aa08:	000ae900 	call	ae90 <_wcrtomb_r>
    aa0c:	1029883a 	mov	r20,r2
    aa10:	00bfffc4 	movi	r2,-1
    aa14:	a0802026 	beq	r20,r2,aa98 <__fputwc+0xd8>
    aa18:	d9400003 	ldbu	r5,0(sp)
    aa1c:	a0001c26 	beq	r20,zero,aa90 <__fputwc+0xd0>
    aa20:	0023883a 	mov	r17,zero
    aa24:	05400284 	movi	r21,10
    aa28:	00000906 	br	aa50 <__fputwc+0x90>
    aa2c:	80800017 	ldw	r2,0(r16)
    aa30:	11400005 	stb	r5,0(r2)
    aa34:	80c00017 	ldw	r3,0(r16)
    aa38:	18c00044 	addi	r3,r3,1
    aa3c:	80c00015 	stw	r3,0(r16)
    aa40:	8c400044 	addi	r17,r17,1
    aa44:	dc45883a 	add	r2,sp,r17
    aa48:	8d00112e 	bgeu	r17,r20,aa90 <__fputwc+0xd0>
    aa4c:	11400003 	ldbu	r5,0(r2)
    aa50:	80c00217 	ldw	r3,8(r16)
    aa54:	18ffffc4 	addi	r3,r3,-1
    aa58:	80c00215 	stw	r3,8(r16)
    aa5c:	183ff30e 	bge	r3,zero,aa2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aa2c>
    aa60:	80800617 	ldw	r2,24(r16)
    aa64:	18801916 	blt	r3,r2,aacc <__fputwc+0x10c>
    aa68:	80800017 	ldw	r2,0(r16)
    aa6c:	11400005 	stb	r5,0(r2)
    aa70:	80800017 	ldw	r2,0(r16)
    aa74:	10c00003 	ldbu	r3,0(r2)
    aa78:	10800044 	addi	r2,r2,1
    aa7c:	1d402326 	beq	r3,r21,ab0c <__fputwc+0x14c>
    aa80:	80800015 	stw	r2,0(r16)
    aa84:	8c400044 	addi	r17,r17,1
    aa88:	dc45883a 	add	r2,sp,r17
    aa8c:	8d3fef36 	bltu	r17,r20,aa4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aa4c>
    aa90:	9005883a 	mov	r2,r18
    aa94:	00000406 	br	aaa8 <__fputwc+0xe8>
    aa98:	80c0030b 	ldhu	r3,12(r16)
    aa9c:	a005883a 	mov	r2,r20
    aaa0:	18c01014 	ori	r3,r3,64
    aaa4:	80c0030d 	sth	r3,12(r16)
    aaa8:	dfc00717 	ldw	ra,28(sp)
    aaac:	dd400617 	ldw	r21,24(sp)
    aab0:	dd000517 	ldw	r20,20(sp)
    aab4:	dcc00417 	ldw	r19,16(sp)
    aab8:	dc800317 	ldw	r18,12(sp)
    aabc:	dc400217 	ldw	r17,8(sp)
    aac0:	dc000117 	ldw	r16,4(sp)
    aac4:	dec00804 	addi	sp,sp,32
    aac8:	f800283a 	ret
    aacc:	800d883a 	mov	r6,r16
    aad0:	29403fcc 	andi	r5,r5,255
    aad4:	9809883a 	mov	r4,r19
    aad8:	000ad380 	call	ad38 <__swbuf_r>
    aadc:	10bfffe0 	cmpeqi	r2,r2,-1
    aae0:	10803fcc 	andi	r2,r2,255
    aae4:	103fd626 	beq	r2,zero,aa40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aa40>
    aae8:	00bfffc4 	movi	r2,-1
    aaec:	003fee06 	br	aaa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aaa8>
    aaf0:	90ffffc4 	addi	r3,r18,-1
    aaf4:	01003f84 	movi	r4,254
    aaf8:	20ffbf36 	bltu	r4,r3,a9f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a9f8>
    aafc:	900b883a 	mov	r5,r18
    ab00:	dc800005 	stb	r18,0(sp)
    ab04:	1029883a 	mov	r20,r2
    ab08:	003fc506 	br	aa20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aa20>
    ab0c:	800d883a 	mov	r6,r16
    ab10:	a80b883a 	mov	r5,r21
    ab14:	9809883a 	mov	r4,r19
    ab18:	000ad380 	call	ad38 <__swbuf_r>
    ab1c:	10bfffe0 	cmpeqi	r2,r2,-1
    ab20:	003fef06 	br	aae0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aae0>

0000ab24 <_fputwc_r>:
    ab24:	3080030b 	ldhu	r2,12(r6)
    ab28:	10c8000c 	andi	r3,r2,8192
    ab2c:	1800051e 	bne	r3,zero,ab44 <_fputwc_r+0x20>
    ab30:	30c01917 	ldw	r3,100(r6)
    ab34:	10880014 	ori	r2,r2,8192
    ab38:	3080030d 	sth	r2,12(r6)
    ab3c:	18880014 	ori	r2,r3,8192
    ab40:	30801915 	stw	r2,100(r6)
    ab44:	000a9c01 	jmpi	a9c0 <__fputwc>

0000ab48 <fputwc>:
    ab48:	008000b4 	movhi	r2,2
    ab4c:	defffc04 	addi	sp,sp,-16
    ab50:	10b49c04 	addi	r2,r2,-11664
    ab54:	dc000115 	stw	r16,4(sp)
    ab58:	14000017 	ldw	r16,0(r2)
    ab5c:	dc400215 	stw	r17,8(sp)
    ab60:	dfc00315 	stw	ra,12(sp)
    ab64:	2023883a 	mov	r17,r4
    ab68:	80000226 	beq	r16,zero,ab74 <fputwc+0x2c>
    ab6c:	80800e17 	ldw	r2,56(r16)
    ab70:	10001026 	beq	r2,zero,abb4 <fputwc+0x6c>
    ab74:	2880030b 	ldhu	r2,12(r5)
    ab78:	10c8000c 	andi	r3,r2,8192
    ab7c:	1800051e 	bne	r3,zero,ab94 <fputwc+0x4c>
    ab80:	28c01917 	ldw	r3,100(r5)
    ab84:	10880014 	ori	r2,r2,8192
    ab88:	2880030d 	sth	r2,12(r5)
    ab8c:	18880014 	ori	r2,r3,8192
    ab90:	28801915 	stw	r2,100(r5)
    ab94:	280d883a 	mov	r6,r5
    ab98:	8009883a 	mov	r4,r16
    ab9c:	880b883a 	mov	r5,r17
    aba0:	dfc00317 	ldw	ra,12(sp)
    aba4:	dc400217 	ldw	r17,8(sp)
    aba8:	dc000117 	ldw	r16,4(sp)
    abac:	dec00404 	addi	sp,sp,16
    abb0:	000a9c01 	jmpi	a9c0 <__fputwc>
    abb4:	8009883a 	mov	r4,r16
    abb8:	d9400015 	stw	r5,0(sp)
    abbc:	0005ea00 	call	5ea0 <__sinit>
    abc0:	d9400017 	ldw	r5,0(sp)
    abc4:	003feb06 	br	ab74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ab74>

0000abc8 <_fstat_r>:
    abc8:	defffd04 	addi	sp,sp,-12
    abcc:	2805883a 	mov	r2,r5
    abd0:	dc000015 	stw	r16,0(sp)
    abd4:	040000b4 	movhi	r16,2
    abd8:	dc400115 	stw	r17,4(sp)
    abdc:	843cca04 	addi	r16,r16,-3288
    abe0:	2023883a 	mov	r17,r4
    abe4:	300b883a 	mov	r5,r6
    abe8:	1009883a 	mov	r4,r2
    abec:	dfc00215 	stw	ra,8(sp)
    abf0:	80000015 	stw	zero,0(r16)
    abf4:	000e4b80 	call	e4b8 <fstat>
    abf8:	00ffffc4 	movi	r3,-1
    abfc:	10c00526 	beq	r2,r3,ac14 <_fstat_r+0x4c>
    ac00:	dfc00217 	ldw	ra,8(sp)
    ac04:	dc400117 	ldw	r17,4(sp)
    ac08:	dc000017 	ldw	r16,0(sp)
    ac0c:	dec00304 	addi	sp,sp,12
    ac10:	f800283a 	ret
    ac14:	80c00017 	ldw	r3,0(r16)
    ac18:	183ff926 	beq	r3,zero,ac00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ac00>
    ac1c:	88c00015 	stw	r3,0(r17)
    ac20:	003ff706 	br	ac00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ac00>

0000ac24 <_isatty_r>:
    ac24:	defffd04 	addi	sp,sp,-12
    ac28:	dc000015 	stw	r16,0(sp)
    ac2c:	040000b4 	movhi	r16,2
    ac30:	dc400115 	stw	r17,4(sp)
    ac34:	843cca04 	addi	r16,r16,-3288
    ac38:	2023883a 	mov	r17,r4
    ac3c:	2809883a 	mov	r4,r5
    ac40:	dfc00215 	stw	ra,8(sp)
    ac44:	80000015 	stw	zero,0(r16)
    ac48:	000e5a40 	call	e5a4 <isatty>
    ac4c:	00ffffc4 	movi	r3,-1
    ac50:	10c00526 	beq	r2,r3,ac68 <_isatty_r+0x44>
    ac54:	dfc00217 	ldw	ra,8(sp)
    ac58:	dc400117 	ldw	r17,4(sp)
    ac5c:	dc000017 	ldw	r16,0(sp)
    ac60:	dec00304 	addi	sp,sp,12
    ac64:	f800283a 	ret
    ac68:	80c00017 	ldw	r3,0(r16)
    ac6c:	183ff926 	beq	r3,zero,ac54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ac54>
    ac70:	88c00015 	stw	r3,0(r17)
    ac74:	003ff706 	br	ac54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ac54>

0000ac78 <_lseek_r>:
    ac78:	defffd04 	addi	sp,sp,-12
    ac7c:	2805883a 	mov	r2,r5
    ac80:	dc000015 	stw	r16,0(sp)
    ac84:	040000b4 	movhi	r16,2
    ac88:	dc400115 	stw	r17,4(sp)
    ac8c:	300b883a 	mov	r5,r6
    ac90:	843cca04 	addi	r16,r16,-3288
    ac94:	2023883a 	mov	r17,r4
    ac98:	380d883a 	mov	r6,r7
    ac9c:	1009883a 	mov	r4,r2
    aca0:	dfc00215 	stw	ra,8(sp)
    aca4:	80000015 	stw	zero,0(r16)
    aca8:	000e7700 	call	e770 <lseek>
    acac:	00ffffc4 	movi	r3,-1
    acb0:	10c00526 	beq	r2,r3,acc8 <_lseek_r+0x50>
    acb4:	dfc00217 	ldw	ra,8(sp)
    acb8:	dc400117 	ldw	r17,4(sp)
    acbc:	dc000017 	ldw	r16,0(sp)
    acc0:	dec00304 	addi	sp,sp,12
    acc4:	f800283a 	ret
    acc8:	80c00017 	ldw	r3,0(r16)
    accc:	183ff926 	beq	r3,zero,acb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700acb4>
    acd0:	88c00015 	stw	r3,0(r17)
    acd4:	003ff706 	br	acb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700acb4>

0000acd8 <_read_r>:
    acd8:	defffd04 	addi	sp,sp,-12
    acdc:	2805883a 	mov	r2,r5
    ace0:	dc000015 	stw	r16,0(sp)
    ace4:	040000b4 	movhi	r16,2
    ace8:	dc400115 	stw	r17,4(sp)
    acec:	300b883a 	mov	r5,r6
    acf0:	843cca04 	addi	r16,r16,-3288
    acf4:	2023883a 	mov	r17,r4
    acf8:	380d883a 	mov	r6,r7
    acfc:	1009883a 	mov	r4,r2
    ad00:	dfc00215 	stw	ra,8(sp)
    ad04:	80000015 	stw	zero,0(r16)
    ad08:	000e93c0 	call	e93c <read>
    ad0c:	00ffffc4 	movi	r3,-1
    ad10:	10c00526 	beq	r2,r3,ad28 <_read_r+0x50>
    ad14:	dfc00217 	ldw	ra,8(sp)
    ad18:	dc400117 	ldw	r17,4(sp)
    ad1c:	dc000017 	ldw	r16,0(sp)
    ad20:	dec00304 	addi	sp,sp,12
    ad24:	f800283a 	ret
    ad28:	80c00017 	ldw	r3,0(r16)
    ad2c:	183ff926 	beq	r3,zero,ad14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad14>
    ad30:	88c00015 	stw	r3,0(r17)
    ad34:	003ff706 	br	ad14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad14>

0000ad38 <__swbuf_r>:
    ad38:	defffb04 	addi	sp,sp,-20
    ad3c:	dcc00315 	stw	r19,12(sp)
    ad40:	dc800215 	stw	r18,8(sp)
    ad44:	dc000015 	stw	r16,0(sp)
    ad48:	dfc00415 	stw	ra,16(sp)
    ad4c:	dc400115 	stw	r17,4(sp)
    ad50:	2025883a 	mov	r18,r4
    ad54:	2827883a 	mov	r19,r5
    ad58:	3021883a 	mov	r16,r6
    ad5c:	20000226 	beq	r4,zero,ad68 <__swbuf_r+0x30>
    ad60:	20800e17 	ldw	r2,56(r4)
    ad64:	10004226 	beq	r2,zero,ae70 <__swbuf_r+0x138>
    ad68:	80800617 	ldw	r2,24(r16)
    ad6c:	8100030b 	ldhu	r4,12(r16)
    ad70:	80800215 	stw	r2,8(r16)
    ad74:	2080020c 	andi	r2,r4,8
    ad78:	10003626 	beq	r2,zero,ae54 <__swbuf_r+0x11c>
    ad7c:	80c00417 	ldw	r3,16(r16)
    ad80:	18003426 	beq	r3,zero,ae54 <__swbuf_r+0x11c>
    ad84:	2088000c 	andi	r2,r4,8192
    ad88:	9c403fcc 	andi	r17,r19,255
    ad8c:	10001a26 	beq	r2,zero,adf8 <__swbuf_r+0xc0>
    ad90:	80800017 	ldw	r2,0(r16)
    ad94:	81000517 	ldw	r4,20(r16)
    ad98:	10c7c83a 	sub	r3,r2,r3
    ad9c:	1900200e 	bge	r3,r4,ae20 <__swbuf_r+0xe8>
    ada0:	18c00044 	addi	r3,r3,1
    ada4:	81000217 	ldw	r4,8(r16)
    ada8:	11400044 	addi	r5,r2,1
    adac:	81400015 	stw	r5,0(r16)
    adb0:	213fffc4 	addi	r4,r4,-1
    adb4:	81000215 	stw	r4,8(r16)
    adb8:	14c00005 	stb	r19,0(r2)
    adbc:	80800517 	ldw	r2,20(r16)
    adc0:	10c01e26 	beq	r2,r3,ae3c <__swbuf_r+0x104>
    adc4:	8080030b 	ldhu	r2,12(r16)
    adc8:	1080004c 	andi	r2,r2,1
    adcc:	10000226 	beq	r2,zero,add8 <__swbuf_r+0xa0>
    add0:	00800284 	movi	r2,10
    add4:	88801926 	beq	r17,r2,ae3c <__swbuf_r+0x104>
    add8:	8805883a 	mov	r2,r17
    addc:	dfc00417 	ldw	ra,16(sp)
    ade0:	dcc00317 	ldw	r19,12(sp)
    ade4:	dc800217 	ldw	r18,8(sp)
    ade8:	dc400117 	ldw	r17,4(sp)
    adec:	dc000017 	ldw	r16,0(sp)
    adf0:	dec00504 	addi	sp,sp,20
    adf4:	f800283a 	ret
    adf8:	81401917 	ldw	r5,100(r16)
    adfc:	00b7ffc4 	movi	r2,-8193
    ae00:	21080014 	ori	r4,r4,8192
    ae04:	2884703a 	and	r2,r5,r2
    ae08:	80801915 	stw	r2,100(r16)
    ae0c:	80800017 	ldw	r2,0(r16)
    ae10:	8100030d 	sth	r4,12(r16)
    ae14:	81000517 	ldw	r4,20(r16)
    ae18:	10c7c83a 	sub	r3,r2,r3
    ae1c:	193fe016 	blt	r3,r4,ada0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ada0>
    ae20:	800b883a 	mov	r5,r16
    ae24:	9009883a 	mov	r4,r18
    ae28:	0005ac40 	call	5ac4 <_fflush_r>
    ae2c:	1000071e 	bne	r2,zero,ae4c <__swbuf_r+0x114>
    ae30:	80800017 	ldw	r2,0(r16)
    ae34:	00c00044 	movi	r3,1
    ae38:	003fda06 	br	ada4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ada4>
    ae3c:	800b883a 	mov	r5,r16
    ae40:	9009883a 	mov	r4,r18
    ae44:	0005ac40 	call	5ac4 <_fflush_r>
    ae48:	103fe326 	beq	r2,zero,add8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700add8>
    ae4c:	00bfffc4 	movi	r2,-1
    ae50:	003fe206 	br	addc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700addc>
    ae54:	800b883a 	mov	r5,r16
    ae58:	9009883a 	mov	r4,r18
    ae5c:	0003ecc0 	call	3ecc <__swsetup_r>
    ae60:	103ffa1e 	bne	r2,zero,ae4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ae4c>
    ae64:	8100030b 	ldhu	r4,12(r16)
    ae68:	80c00417 	ldw	r3,16(r16)
    ae6c:	003fc506 	br	ad84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad84>
    ae70:	0005ea00 	call	5ea0 <__sinit>
    ae74:	003fbc06 	br	ad68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad68>

0000ae78 <__swbuf>:
    ae78:	008000b4 	movhi	r2,2
    ae7c:	10b49c04 	addi	r2,r2,-11664
    ae80:	280d883a 	mov	r6,r5
    ae84:	200b883a 	mov	r5,r4
    ae88:	11000017 	ldw	r4,0(r2)
    ae8c:	000ad381 	jmpi	ad38 <__swbuf_r>

0000ae90 <_wcrtomb_r>:
    ae90:	defff604 	addi	sp,sp,-40
    ae94:	008000b4 	movhi	r2,2
    ae98:	dc800815 	stw	r18,32(sp)
    ae9c:	dc400715 	stw	r17,28(sp)
    aea0:	dc000615 	stw	r16,24(sp)
    aea4:	10b4a004 	addi	r2,r2,-11648
    aea8:	dfc00915 	stw	ra,36(sp)
    aeac:	2021883a 	mov	r16,r4
    aeb0:	3823883a 	mov	r17,r7
    aeb4:	14800017 	ldw	r18,0(r2)
    aeb8:	28001426 	beq	r5,zero,af0c <_wcrtomb_r+0x7c>
    aebc:	d9400415 	stw	r5,16(sp)
    aec0:	d9800515 	stw	r6,20(sp)
    aec4:	00069e40 	call	69e4 <__locale_charset>
    aec8:	d9800517 	ldw	r6,20(sp)
    aecc:	d9400417 	ldw	r5,16(sp)
    aed0:	100f883a 	mov	r7,r2
    aed4:	dc400015 	stw	r17,0(sp)
    aed8:	8009883a 	mov	r4,r16
    aedc:	903ee83a 	callr	r18
    aee0:	00ffffc4 	movi	r3,-1
    aee4:	10c0031e 	bne	r2,r3,aef4 <_wcrtomb_r+0x64>
    aee8:	88000015 	stw	zero,0(r17)
    aeec:	00c02284 	movi	r3,138
    aef0:	80c00015 	stw	r3,0(r16)
    aef4:	dfc00917 	ldw	ra,36(sp)
    aef8:	dc800817 	ldw	r18,32(sp)
    aefc:	dc400717 	ldw	r17,28(sp)
    af00:	dc000617 	ldw	r16,24(sp)
    af04:	dec00a04 	addi	sp,sp,40
    af08:	f800283a 	ret
    af0c:	00069e40 	call	69e4 <__locale_charset>
    af10:	100f883a 	mov	r7,r2
    af14:	dc400015 	stw	r17,0(sp)
    af18:	000d883a 	mov	r6,zero
    af1c:	d9400104 	addi	r5,sp,4
    af20:	8009883a 	mov	r4,r16
    af24:	903ee83a 	callr	r18
    af28:	003fed06 	br	aee0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aee0>

0000af2c <wcrtomb>:
    af2c:	defff604 	addi	sp,sp,-40
    af30:	008000b4 	movhi	r2,2
    af34:	dc800615 	stw	r18,24(sp)
    af38:	dc400515 	stw	r17,20(sp)
    af3c:	10b49c04 	addi	r2,r2,-11664
    af40:	dfc00915 	stw	ra,36(sp)
    af44:	dd000815 	stw	r20,32(sp)
    af48:	dcc00715 	stw	r19,28(sp)
    af4c:	dc000415 	stw	r16,16(sp)
    af50:	3025883a 	mov	r18,r6
    af54:	14400017 	ldw	r17,0(r2)
    af58:	20001926 	beq	r4,zero,afc0 <wcrtomb+0x94>
    af5c:	008000b4 	movhi	r2,2
    af60:	10b4a004 	addi	r2,r2,-11648
    af64:	15000017 	ldw	r20,0(r2)
    af68:	2021883a 	mov	r16,r4
    af6c:	2827883a 	mov	r19,r5
    af70:	00069e40 	call	69e4 <__locale_charset>
    af74:	100f883a 	mov	r7,r2
    af78:	dc800015 	stw	r18,0(sp)
    af7c:	980d883a 	mov	r6,r19
    af80:	800b883a 	mov	r5,r16
    af84:	8809883a 	mov	r4,r17
    af88:	a03ee83a 	callr	r20
    af8c:	00ffffc4 	movi	r3,-1
    af90:	10c0031e 	bne	r2,r3,afa0 <wcrtomb+0x74>
    af94:	90000015 	stw	zero,0(r18)
    af98:	00c02284 	movi	r3,138
    af9c:	88c00015 	stw	r3,0(r17)
    afa0:	dfc00917 	ldw	ra,36(sp)
    afa4:	dd000817 	ldw	r20,32(sp)
    afa8:	dcc00717 	ldw	r19,28(sp)
    afac:	dc800617 	ldw	r18,24(sp)
    afb0:	dc400517 	ldw	r17,20(sp)
    afb4:	dc000417 	ldw	r16,16(sp)
    afb8:	dec00a04 	addi	sp,sp,40
    afbc:	f800283a 	ret
    afc0:	008000b4 	movhi	r2,2
    afc4:	10b4a004 	addi	r2,r2,-11648
    afc8:	14000017 	ldw	r16,0(r2)
    afcc:	00069e40 	call	69e4 <__locale_charset>
    afd0:	100f883a 	mov	r7,r2
    afd4:	dc800015 	stw	r18,0(sp)
    afd8:	000d883a 	mov	r6,zero
    afdc:	d9400104 	addi	r5,sp,4
    afe0:	8809883a 	mov	r4,r17
    afe4:	803ee83a 	callr	r16
    afe8:	003fe806 	br	af8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af8c>

0000afec <__ascii_wctomb>:
    afec:	28000526 	beq	r5,zero,b004 <__ascii_wctomb+0x18>
    aff0:	00803fc4 	movi	r2,255
    aff4:	11800536 	bltu	r2,r6,b00c <__ascii_wctomb+0x20>
    aff8:	29800005 	stb	r6,0(r5)
    affc:	00800044 	movi	r2,1
    b000:	f800283a 	ret
    b004:	0005883a 	mov	r2,zero
    b008:	f800283a 	ret
    b00c:	00802284 	movi	r2,138
    b010:	20800015 	stw	r2,0(r4)
    b014:	00bfffc4 	movi	r2,-1
    b018:	f800283a 	ret

0000b01c <_wctomb_r>:
    b01c:	008000b4 	movhi	r2,2
    b020:	defff904 	addi	sp,sp,-28
    b024:	10b4a004 	addi	r2,r2,-11648
    b028:	dfc00615 	stw	ra,24(sp)
    b02c:	dc400515 	stw	r17,20(sp)
    b030:	dc000415 	stw	r16,16(sp)
    b034:	3823883a 	mov	r17,r7
    b038:	14000017 	ldw	r16,0(r2)
    b03c:	d9000115 	stw	r4,4(sp)
    b040:	d9400215 	stw	r5,8(sp)
    b044:	d9800315 	stw	r6,12(sp)
    b048:	00069e40 	call	69e4 <__locale_charset>
    b04c:	d9800317 	ldw	r6,12(sp)
    b050:	d9400217 	ldw	r5,8(sp)
    b054:	d9000117 	ldw	r4,4(sp)
    b058:	100f883a 	mov	r7,r2
    b05c:	dc400015 	stw	r17,0(sp)
    b060:	803ee83a 	callr	r16
    b064:	dfc00617 	ldw	ra,24(sp)
    b068:	dc400517 	ldw	r17,20(sp)
    b06c:	dc000417 	ldw	r16,16(sp)
    b070:	dec00704 	addi	sp,sp,28
    b074:	f800283a 	ret

0000b078 <__udivdi3>:
    b078:	defff504 	addi	sp,sp,-44
    b07c:	dcc00415 	stw	r19,16(sp)
    b080:	dc000115 	stw	r16,4(sp)
    b084:	dfc00a15 	stw	ra,40(sp)
    b088:	df000915 	stw	fp,36(sp)
    b08c:	ddc00815 	stw	r23,32(sp)
    b090:	dd800715 	stw	r22,28(sp)
    b094:	dd400615 	stw	r21,24(sp)
    b098:	dd000515 	stw	r20,20(sp)
    b09c:	dc800315 	stw	r18,12(sp)
    b0a0:	dc400215 	stw	r17,8(sp)
    b0a4:	2027883a 	mov	r19,r4
    b0a8:	2821883a 	mov	r16,r5
    b0ac:	3800411e 	bne	r7,zero,b1b4 <__udivdi3+0x13c>
    b0b0:	3023883a 	mov	r17,r6
    b0b4:	2025883a 	mov	r18,r4
    b0b8:	2980522e 	bgeu	r5,r6,b204 <__udivdi3+0x18c>
    b0bc:	00bfffd4 	movui	r2,65535
    b0c0:	282d883a 	mov	r22,r5
    b0c4:	1180a836 	bltu	r2,r6,b368 <__udivdi3+0x2f0>
    b0c8:	00803fc4 	movi	r2,255
    b0cc:	1185803a 	cmpltu	r2,r2,r6
    b0d0:	100490fa 	slli	r2,r2,3
    b0d4:	3086d83a 	srl	r3,r6,r2
    b0d8:	010000b4 	movhi	r4,2
    b0dc:	212bff04 	addi	r4,r4,-20484
    b0e0:	20c7883a 	add	r3,r4,r3
    b0e4:	18c00003 	ldbu	r3,0(r3)
    b0e8:	1885883a 	add	r2,r3,r2
    b0ec:	00c00804 	movi	r3,32
    b0f0:	1887c83a 	sub	r3,r3,r2
    b0f4:	18000526 	beq	r3,zero,b10c <__udivdi3+0x94>
    b0f8:	80e0983a 	sll	r16,r16,r3
    b0fc:	9884d83a 	srl	r2,r19,r2
    b100:	30e2983a 	sll	r17,r6,r3
    b104:	98e4983a 	sll	r18,r19,r3
    b108:	142cb03a 	or	r22,r2,r16
    b10c:	882ad43a 	srli	r21,r17,16
    b110:	b009883a 	mov	r4,r22
    b114:	8d3fffcc 	andi	r20,r17,65535
    b118:	a80b883a 	mov	r5,r21
    b11c:	000bc840 	call	bc84 <__umodsi3>
    b120:	b009883a 	mov	r4,r22
    b124:	a80b883a 	mov	r5,r21
    b128:	1027883a 	mov	r19,r2
    b12c:	000bc200 	call	bc20 <__udivsi3>
    b130:	102d883a 	mov	r22,r2
    b134:	9826943a 	slli	r19,r19,16
    b138:	9004d43a 	srli	r2,r18,16
    b13c:	a5a1383a 	mul	r16,r20,r22
    b140:	14c4b03a 	or	r2,r2,r19
    b144:	1400052e 	bgeu	r2,r16,b15c <__udivdi3+0xe4>
    b148:	1445883a 	add	r2,r2,r17
    b14c:	b0ffffc4 	addi	r3,r22,-1
    b150:	14400136 	bltu	r2,r17,b158 <__udivdi3+0xe0>
    b154:	14012336 	bltu	r2,r16,b5e4 <__udivdi3+0x56c>
    b158:	182d883a 	mov	r22,r3
    b15c:	1421c83a 	sub	r16,r2,r16
    b160:	a80b883a 	mov	r5,r21
    b164:	8009883a 	mov	r4,r16
    b168:	000bc840 	call	bc84 <__umodsi3>
    b16c:	1027883a 	mov	r19,r2
    b170:	a80b883a 	mov	r5,r21
    b174:	8009883a 	mov	r4,r16
    b178:	000bc200 	call	bc20 <__udivsi3>
    b17c:	9826943a 	slli	r19,r19,16
    b180:	a0a9383a 	mul	r20,r20,r2
    b184:	94bfffcc 	andi	r18,r18,65535
    b188:	94e4b03a 	or	r18,r18,r19
    b18c:	9500052e 	bgeu	r18,r20,b1a4 <__udivdi3+0x12c>
    b190:	8ca5883a 	add	r18,r17,r18
    b194:	10ffffc4 	addi	r3,r2,-1
    b198:	9440f136 	bltu	r18,r17,b560 <__udivdi3+0x4e8>
    b19c:	9500f02e 	bgeu	r18,r20,b560 <__udivdi3+0x4e8>
    b1a0:	10bfff84 	addi	r2,r2,-2
    b1a4:	b00c943a 	slli	r6,r22,16
    b1a8:	0007883a 	mov	r3,zero
    b1ac:	3084b03a 	or	r2,r6,r2
    b1b0:	00005906 	br	b318 <__udivdi3+0x2a0>
    b1b4:	29c05636 	bltu	r5,r7,b310 <__udivdi3+0x298>
    b1b8:	00bfffd4 	movui	r2,65535
    b1bc:	11c0622e 	bgeu	r2,r7,b348 <__udivdi3+0x2d0>
    b1c0:	00804034 	movhi	r2,256
    b1c4:	10bfffc4 	addi	r2,r2,-1
    b1c8:	11c0ee36 	bltu	r2,r7,b584 <__udivdi3+0x50c>
    b1cc:	00800404 	movi	r2,16
    b1d0:	3886d83a 	srl	r3,r7,r2
    b1d4:	010000b4 	movhi	r4,2
    b1d8:	212bff04 	addi	r4,r4,-20484
    b1dc:	20c7883a 	add	r3,r4,r3
    b1e0:	18c00003 	ldbu	r3,0(r3)
    b1e4:	05400804 	movi	r21,32
    b1e8:	1885883a 	add	r2,r3,r2
    b1ec:	a8abc83a 	sub	r21,r21,r2
    b1f0:	a800621e 	bne	r21,zero,b37c <__udivdi3+0x304>
    b1f4:	3c00e936 	bltu	r7,r16,b59c <__udivdi3+0x524>
    b1f8:	9985403a 	cmpgeu	r2,r19,r6
    b1fc:	0007883a 	mov	r3,zero
    b200:	00004506 	br	b318 <__udivdi3+0x2a0>
    b204:	3000041e 	bne	r6,zero,b218 <__udivdi3+0x1a0>
    b208:	000b883a 	mov	r5,zero
    b20c:	01000044 	movi	r4,1
    b210:	000bc200 	call	bc20 <__udivsi3>
    b214:	1023883a 	mov	r17,r2
    b218:	00bfffd4 	movui	r2,65535
    b21c:	14404e2e 	bgeu	r2,r17,b358 <__udivdi3+0x2e0>
    b220:	00804034 	movhi	r2,256
    b224:	10bfffc4 	addi	r2,r2,-1
    b228:	1440d836 	bltu	r2,r17,b58c <__udivdi3+0x514>
    b22c:	00800404 	movi	r2,16
    b230:	8886d83a 	srl	r3,r17,r2
    b234:	010000b4 	movhi	r4,2
    b238:	212bff04 	addi	r4,r4,-20484
    b23c:	20c7883a 	add	r3,r4,r3
    b240:	18c00003 	ldbu	r3,0(r3)
    b244:	1885883a 	add	r2,r3,r2
    b248:	00c00804 	movi	r3,32
    b24c:	1887c83a 	sub	r3,r3,r2
    b250:	18008f1e 	bne	r3,zero,b490 <__udivdi3+0x418>
    b254:	882ad43a 	srli	r21,r17,16
    b258:	8461c83a 	sub	r16,r16,r17
    b25c:	8d3fffcc 	andi	r20,r17,65535
    b260:	00c00044 	movi	r3,1
    b264:	8009883a 	mov	r4,r16
    b268:	a80b883a 	mov	r5,r21
    b26c:	d8c00015 	stw	r3,0(sp)
    b270:	000bc840 	call	bc84 <__umodsi3>
    b274:	8009883a 	mov	r4,r16
    b278:	a80b883a 	mov	r5,r21
    b27c:	1027883a 	mov	r19,r2
    b280:	000bc200 	call	bc20 <__udivsi3>
    b284:	9826943a 	slli	r19,r19,16
    b288:	9008d43a 	srli	r4,r18,16
    b28c:	1521383a 	mul	r16,r2,r20
    b290:	102d883a 	mov	r22,r2
    b294:	24c8b03a 	or	r4,r4,r19
    b298:	d8c00017 	ldw	r3,0(sp)
    b29c:	2400052e 	bgeu	r4,r16,b2b4 <__udivdi3+0x23c>
    b2a0:	2449883a 	add	r4,r4,r17
    b2a4:	b0bfffc4 	addi	r2,r22,-1
    b2a8:	24400136 	bltu	r4,r17,b2b0 <__udivdi3+0x238>
    b2ac:	2400ca36 	bltu	r4,r16,b5d8 <__udivdi3+0x560>
    b2b0:	102d883a 	mov	r22,r2
    b2b4:	2421c83a 	sub	r16,r4,r16
    b2b8:	a80b883a 	mov	r5,r21
    b2bc:	8009883a 	mov	r4,r16
    b2c0:	d8c00015 	stw	r3,0(sp)
    b2c4:	000bc840 	call	bc84 <__umodsi3>
    b2c8:	1027883a 	mov	r19,r2
    b2cc:	a80b883a 	mov	r5,r21
    b2d0:	8009883a 	mov	r4,r16
    b2d4:	000bc200 	call	bc20 <__udivsi3>
    b2d8:	9826943a 	slli	r19,r19,16
    b2dc:	1529383a 	mul	r20,r2,r20
    b2e0:	94bfffcc 	andi	r18,r18,65535
    b2e4:	94e4b03a 	or	r18,r18,r19
    b2e8:	d8c00017 	ldw	r3,0(sp)
    b2ec:	9500052e 	bgeu	r18,r20,b304 <__udivdi3+0x28c>
    b2f0:	8ca5883a 	add	r18,r17,r18
    b2f4:	113fffc4 	addi	r4,r2,-1
    b2f8:	94409736 	bltu	r18,r17,b558 <__udivdi3+0x4e0>
    b2fc:	9500962e 	bgeu	r18,r20,b558 <__udivdi3+0x4e0>
    b300:	10bfff84 	addi	r2,r2,-2
    b304:	b00c943a 	slli	r6,r22,16
    b308:	3084b03a 	or	r2,r6,r2
    b30c:	00000206 	br	b318 <__udivdi3+0x2a0>
    b310:	0007883a 	mov	r3,zero
    b314:	0005883a 	mov	r2,zero
    b318:	dfc00a17 	ldw	ra,40(sp)
    b31c:	df000917 	ldw	fp,36(sp)
    b320:	ddc00817 	ldw	r23,32(sp)
    b324:	dd800717 	ldw	r22,28(sp)
    b328:	dd400617 	ldw	r21,24(sp)
    b32c:	dd000517 	ldw	r20,20(sp)
    b330:	dcc00417 	ldw	r19,16(sp)
    b334:	dc800317 	ldw	r18,12(sp)
    b338:	dc400217 	ldw	r17,8(sp)
    b33c:	dc000117 	ldw	r16,4(sp)
    b340:	dec00b04 	addi	sp,sp,44
    b344:	f800283a 	ret
    b348:	00803fc4 	movi	r2,255
    b34c:	11c5803a 	cmpltu	r2,r2,r7
    b350:	100490fa 	slli	r2,r2,3
    b354:	003f9e06 	br	b1d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b1d0>
    b358:	00803fc4 	movi	r2,255
    b35c:	1445803a 	cmpltu	r2,r2,r17
    b360:	100490fa 	slli	r2,r2,3
    b364:	003fb206 	br	b230 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b230>
    b368:	00804034 	movhi	r2,256
    b36c:	10bfffc4 	addi	r2,r2,-1
    b370:	11808836 	bltu	r2,r6,b594 <__udivdi3+0x51c>
    b374:	00800404 	movi	r2,16
    b378:	003f5606 	br	b0d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b0d4>
    b37c:	30aed83a 	srl	r23,r6,r2
    b380:	3d4e983a 	sll	r7,r7,r21
    b384:	80acd83a 	srl	r22,r16,r2
    b388:	9884d83a 	srl	r2,r19,r2
    b38c:	3deeb03a 	or	r23,r7,r23
    b390:	b824d43a 	srli	r18,r23,16
    b394:	8560983a 	sll	r16,r16,r21
    b398:	b009883a 	mov	r4,r22
    b39c:	900b883a 	mov	r5,r18
    b3a0:	3568983a 	sll	r20,r6,r21
    b3a4:	1420b03a 	or	r16,r2,r16
    b3a8:	000bc840 	call	bc84 <__umodsi3>
    b3ac:	b009883a 	mov	r4,r22
    b3b0:	900b883a 	mov	r5,r18
    b3b4:	1023883a 	mov	r17,r2
    b3b8:	000bc200 	call	bc20 <__udivsi3>
    b3bc:	8808943a 	slli	r4,r17,16
    b3c0:	bf3fffcc 	andi	fp,r23,65535
    b3c4:	8006d43a 	srli	r3,r16,16
    b3c8:	e0a3383a 	mul	r17,fp,r2
    b3cc:	100d883a 	mov	r6,r2
    b3d0:	1906b03a 	or	r3,r3,r4
    b3d4:	1c40042e 	bgeu	r3,r17,b3e8 <__udivdi3+0x370>
    b3d8:	1dc7883a 	add	r3,r3,r23
    b3dc:	10bfffc4 	addi	r2,r2,-1
    b3e0:	1dc0752e 	bgeu	r3,r23,b5b8 <__udivdi3+0x540>
    b3e4:	100d883a 	mov	r6,r2
    b3e8:	1c63c83a 	sub	r17,r3,r17
    b3ec:	900b883a 	mov	r5,r18
    b3f0:	8809883a 	mov	r4,r17
    b3f4:	d9800015 	stw	r6,0(sp)
    b3f8:	000bc840 	call	bc84 <__umodsi3>
    b3fc:	102d883a 	mov	r22,r2
    b400:	8809883a 	mov	r4,r17
    b404:	900b883a 	mov	r5,r18
    b408:	000bc200 	call	bc20 <__udivsi3>
    b40c:	b02c943a 	slli	r22,r22,16
    b410:	e089383a 	mul	r4,fp,r2
    b414:	843fffcc 	andi	r16,r16,65535
    b418:	85a0b03a 	or	r16,r16,r22
    b41c:	d9800017 	ldw	r6,0(sp)
    b420:	8100042e 	bgeu	r16,r4,b434 <__udivdi3+0x3bc>
    b424:	85e1883a 	add	r16,r16,r23
    b428:	10ffffc4 	addi	r3,r2,-1
    b42c:	85c05e2e 	bgeu	r16,r23,b5a8 <__udivdi3+0x530>
    b430:	1805883a 	mov	r2,r3
    b434:	300c943a 	slli	r6,r6,16
    b438:	a17fffcc 	andi	r5,r20,65535
    b43c:	a028d43a 	srli	r20,r20,16
    b440:	3084b03a 	or	r2,r6,r2
    b444:	10ffffcc 	andi	r3,r2,65535
    b448:	100cd43a 	srli	r6,r2,16
    b44c:	194f383a 	mul	r7,r3,r5
    b450:	1d07383a 	mul	r3,r3,r20
    b454:	314b383a 	mul	r5,r6,r5
    b458:	3810d43a 	srli	r8,r7,16
    b45c:	8121c83a 	sub	r16,r16,r4
    b460:	1947883a 	add	r3,r3,r5
    b464:	40c7883a 	add	r3,r8,r3
    b468:	350d383a 	mul	r6,r6,r20
    b46c:	1940022e 	bgeu	r3,r5,b478 <__udivdi3+0x400>
    b470:	01000074 	movhi	r4,1
    b474:	310d883a 	add	r6,r6,r4
    b478:	1828d43a 	srli	r20,r3,16
    b47c:	a18d883a 	add	r6,r20,r6
    b480:	81803e36 	bltu	r16,r6,b57c <__udivdi3+0x504>
    b484:	81803826 	beq	r16,r6,b568 <__udivdi3+0x4f0>
    b488:	0007883a 	mov	r3,zero
    b48c:	003fa206 	br	b318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b318>
    b490:	88e2983a 	sll	r17,r17,r3
    b494:	80a8d83a 	srl	r20,r16,r2
    b498:	80e0983a 	sll	r16,r16,r3
    b49c:	882ad43a 	srli	r21,r17,16
    b4a0:	9884d83a 	srl	r2,r19,r2
    b4a4:	a009883a 	mov	r4,r20
    b4a8:	a80b883a 	mov	r5,r21
    b4ac:	142eb03a 	or	r23,r2,r16
    b4b0:	98e4983a 	sll	r18,r19,r3
    b4b4:	000bc840 	call	bc84 <__umodsi3>
    b4b8:	a009883a 	mov	r4,r20
    b4bc:	a80b883a 	mov	r5,r21
    b4c0:	1021883a 	mov	r16,r2
    b4c4:	000bc200 	call	bc20 <__udivsi3>
    b4c8:	1039883a 	mov	fp,r2
    b4cc:	8d3fffcc 	andi	r20,r17,65535
    b4d0:	8020943a 	slli	r16,r16,16
    b4d4:	b804d43a 	srli	r2,r23,16
    b4d8:	a72d383a 	mul	r22,r20,fp
    b4dc:	1404b03a 	or	r2,r2,r16
    b4e0:	1580062e 	bgeu	r2,r22,b4fc <__udivdi3+0x484>
    b4e4:	1445883a 	add	r2,r2,r17
    b4e8:	e0ffffc4 	addi	r3,fp,-1
    b4ec:	14403836 	bltu	r2,r17,b5d0 <__udivdi3+0x558>
    b4f0:	1580372e 	bgeu	r2,r22,b5d0 <__udivdi3+0x558>
    b4f4:	e73fff84 	addi	fp,fp,-2
    b4f8:	1445883a 	add	r2,r2,r17
    b4fc:	15adc83a 	sub	r22,r2,r22
    b500:	a80b883a 	mov	r5,r21
    b504:	b009883a 	mov	r4,r22
    b508:	000bc840 	call	bc84 <__umodsi3>
    b50c:	1027883a 	mov	r19,r2
    b510:	b009883a 	mov	r4,r22
    b514:	a80b883a 	mov	r5,r21
    b518:	000bc200 	call	bc20 <__udivsi3>
    b51c:	9826943a 	slli	r19,r19,16
    b520:	a0a1383a 	mul	r16,r20,r2
    b524:	b93fffcc 	andi	r4,r23,65535
    b528:	24c8b03a 	or	r4,r4,r19
    b52c:	2400062e 	bgeu	r4,r16,b548 <__udivdi3+0x4d0>
    b530:	2449883a 	add	r4,r4,r17
    b534:	10ffffc4 	addi	r3,r2,-1
    b538:	24402336 	bltu	r4,r17,b5c8 <__udivdi3+0x550>
    b53c:	2400222e 	bgeu	r4,r16,b5c8 <__udivdi3+0x550>
    b540:	10bfff84 	addi	r2,r2,-2
    b544:	2449883a 	add	r4,r4,r17
    b548:	e038943a 	slli	fp,fp,16
    b54c:	2421c83a 	sub	r16,r4,r16
    b550:	e086b03a 	or	r3,fp,r2
    b554:	003f4306 	br	b264 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b264>
    b558:	2005883a 	mov	r2,r4
    b55c:	003f6906 	br	b304 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b304>
    b560:	1805883a 	mov	r2,r3
    b564:	003f0f06 	br	b1a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b1a4>
    b568:	1806943a 	slli	r3,r3,16
    b56c:	9d66983a 	sll	r19,r19,r21
    b570:	39ffffcc 	andi	r7,r7,65535
    b574:	19c7883a 	add	r3,r3,r7
    b578:	98ffc32e 	bgeu	r19,r3,b488 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b488>
    b57c:	10bfffc4 	addi	r2,r2,-1
    b580:	003fc106 	br	b488 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b488>
    b584:	00800604 	movi	r2,24
    b588:	003f1106 	br	b1d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b1d0>
    b58c:	00800604 	movi	r2,24
    b590:	003f2706 	br	b230 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b230>
    b594:	00800604 	movi	r2,24
    b598:	003ece06 	br	b0d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b0d4>
    b59c:	0007883a 	mov	r3,zero
    b5a0:	00800044 	movi	r2,1
    b5a4:	003f5c06 	br	b318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b318>
    b5a8:	813fa12e 	bgeu	r16,r4,b430 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b430>
    b5ac:	10bfff84 	addi	r2,r2,-2
    b5b0:	85e1883a 	add	r16,r16,r23
    b5b4:	003f9f06 	br	b434 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b434>
    b5b8:	1c7f8a2e 	bgeu	r3,r17,b3e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b3e4>
    b5bc:	31bfff84 	addi	r6,r6,-2
    b5c0:	1dc7883a 	add	r3,r3,r23
    b5c4:	003f8806 	br	b3e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b3e8>
    b5c8:	1805883a 	mov	r2,r3
    b5cc:	003fde06 	br	b548 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b548>
    b5d0:	1839883a 	mov	fp,r3
    b5d4:	003fc906 	br	b4fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b4fc>
    b5d8:	b5bfff84 	addi	r22,r22,-2
    b5dc:	2449883a 	add	r4,r4,r17
    b5e0:	003f3406 	br	b2b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b2b4>
    b5e4:	b5bfff84 	addi	r22,r22,-2
    b5e8:	1445883a 	add	r2,r2,r17
    b5ec:	003edb06 	br	b15c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b15c>

0000b5f0 <__umoddi3>:
    b5f0:	defff404 	addi	sp,sp,-48
    b5f4:	df000a15 	stw	fp,40(sp)
    b5f8:	dc400315 	stw	r17,12(sp)
    b5fc:	dc000215 	stw	r16,8(sp)
    b600:	dfc00b15 	stw	ra,44(sp)
    b604:	ddc00915 	stw	r23,36(sp)
    b608:	dd800815 	stw	r22,32(sp)
    b60c:	dd400715 	stw	r21,28(sp)
    b610:	dd000615 	stw	r20,24(sp)
    b614:	dcc00515 	stw	r19,20(sp)
    b618:	dc800415 	stw	r18,16(sp)
    b61c:	2021883a 	mov	r16,r4
    b620:	2823883a 	mov	r17,r5
    b624:	2839883a 	mov	fp,r5
    b628:	38003c1e 	bne	r7,zero,b71c <__umoddi3+0x12c>
    b62c:	3027883a 	mov	r19,r6
    b630:	2029883a 	mov	r20,r4
    b634:	2980512e 	bgeu	r5,r6,b77c <__umoddi3+0x18c>
    b638:	00bfffd4 	movui	r2,65535
    b63c:	11809a36 	bltu	r2,r6,b8a8 <__umoddi3+0x2b8>
    b640:	01003fc4 	movi	r4,255
    b644:	2189803a 	cmpltu	r4,r4,r6
    b648:	200890fa 	slli	r4,r4,3
    b64c:	3104d83a 	srl	r2,r6,r4
    b650:	00c000b4 	movhi	r3,2
    b654:	18ebff04 	addi	r3,r3,-20484
    b658:	1885883a 	add	r2,r3,r2
    b65c:	10c00003 	ldbu	r3,0(r2)
    b660:	00800804 	movi	r2,32
    b664:	1909883a 	add	r4,r3,r4
    b668:	1125c83a 	sub	r18,r2,r4
    b66c:	90000526 	beq	r18,zero,b684 <__umoddi3+0x94>
    b670:	8ca2983a 	sll	r17,r17,r18
    b674:	8108d83a 	srl	r4,r16,r4
    b678:	34a6983a 	sll	r19,r6,r18
    b67c:	84a8983a 	sll	r20,r16,r18
    b680:	2478b03a 	or	fp,r4,r17
    b684:	982ed43a 	srli	r23,r19,16
    b688:	e009883a 	mov	r4,fp
    b68c:	9dbfffcc 	andi	r22,r19,65535
    b690:	b80b883a 	mov	r5,r23
    b694:	000bc840 	call	bc84 <__umodsi3>
    b698:	e009883a 	mov	r4,fp
    b69c:	b80b883a 	mov	r5,r23
    b6a0:	102b883a 	mov	r21,r2
    b6a4:	000bc200 	call	bc20 <__udivsi3>
    b6a8:	a806943a 	slli	r3,r21,16
    b6ac:	a008d43a 	srli	r4,r20,16
    b6b0:	b085383a 	mul	r2,r22,r2
    b6b4:	20c8b03a 	or	r4,r4,r3
    b6b8:	2080032e 	bgeu	r4,r2,b6c8 <__umoddi3+0xd8>
    b6bc:	24c9883a 	add	r4,r4,r19
    b6c0:	24c00136 	bltu	r4,r19,b6c8 <__umoddi3+0xd8>
    b6c4:	20811036 	bltu	r4,r2,bb08 <__umoddi3+0x518>
    b6c8:	20abc83a 	sub	r21,r4,r2
    b6cc:	b80b883a 	mov	r5,r23
    b6d0:	a809883a 	mov	r4,r21
    b6d4:	000bc840 	call	bc84 <__umodsi3>
    b6d8:	1023883a 	mov	r17,r2
    b6dc:	b80b883a 	mov	r5,r23
    b6e0:	a809883a 	mov	r4,r21
    b6e4:	000bc200 	call	bc20 <__udivsi3>
    b6e8:	8822943a 	slli	r17,r17,16
    b6ec:	b085383a 	mul	r2,r22,r2
    b6f0:	a0ffffcc 	andi	r3,r20,65535
    b6f4:	1c46b03a 	or	r3,r3,r17
    b6f8:	1880042e 	bgeu	r3,r2,b70c <__umoddi3+0x11c>
    b6fc:	1cc7883a 	add	r3,r3,r19
    b700:	1cc00236 	bltu	r3,r19,b70c <__umoddi3+0x11c>
    b704:	1880012e 	bgeu	r3,r2,b70c <__umoddi3+0x11c>
    b708:	1cc7883a 	add	r3,r3,r19
    b70c:	1885c83a 	sub	r2,r3,r2
    b710:	1484d83a 	srl	r2,r2,r18
    b714:	0007883a 	mov	r3,zero
    b718:	00004f06 	br	b858 <__umoddi3+0x268>
    b71c:	29c04c36 	bltu	r5,r7,b850 <__umoddi3+0x260>
    b720:	00bfffd4 	movui	r2,65535
    b724:	11c0582e 	bgeu	r2,r7,b888 <__umoddi3+0x298>
    b728:	00804034 	movhi	r2,256
    b72c:	10bfffc4 	addi	r2,r2,-1
    b730:	11c0e736 	bltu	r2,r7,bad0 <__umoddi3+0x4e0>
    b734:	01000404 	movi	r4,16
    b738:	3904d83a 	srl	r2,r7,r4
    b73c:	00c000b4 	movhi	r3,2
    b740:	18ebff04 	addi	r3,r3,-20484
    b744:	1885883a 	add	r2,r3,r2
    b748:	14c00003 	ldbu	r19,0(r2)
    b74c:	00c00804 	movi	r3,32
    b750:	9927883a 	add	r19,r19,r4
    b754:	1ce9c83a 	sub	r20,r3,r19
    b758:	a000581e 	bne	r20,zero,b8bc <__umoddi3+0x2cc>
    b75c:	3c400136 	bltu	r7,r17,b764 <__umoddi3+0x174>
    b760:	8180eb36 	bltu	r16,r6,bb10 <__umoddi3+0x520>
    b764:	8185c83a 	sub	r2,r16,r6
    b768:	89e3c83a 	sub	r17,r17,r7
    b76c:	8089803a 	cmpltu	r4,r16,r2
    b770:	8939c83a 	sub	fp,r17,r4
    b774:	e007883a 	mov	r3,fp
    b778:	00003706 	br	b858 <__umoddi3+0x268>
    b77c:	3000041e 	bne	r6,zero,b790 <__umoddi3+0x1a0>
    b780:	000b883a 	mov	r5,zero
    b784:	01000044 	movi	r4,1
    b788:	000bc200 	call	bc20 <__udivsi3>
    b78c:	1027883a 	mov	r19,r2
    b790:	00bfffd4 	movui	r2,65535
    b794:	14c0402e 	bgeu	r2,r19,b898 <__umoddi3+0x2a8>
    b798:	00804034 	movhi	r2,256
    b79c:	10bfffc4 	addi	r2,r2,-1
    b7a0:	14c0cd36 	bltu	r2,r19,bad8 <__umoddi3+0x4e8>
    b7a4:	00800404 	movi	r2,16
    b7a8:	9886d83a 	srl	r3,r19,r2
    b7ac:	010000b4 	movhi	r4,2
    b7b0:	212bff04 	addi	r4,r4,-20484
    b7b4:	20c7883a 	add	r3,r4,r3
    b7b8:	18c00003 	ldbu	r3,0(r3)
    b7bc:	1887883a 	add	r3,r3,r2
    b7c0:	00800804 	movi	r2,32
    b7c4:	10e5c83a 	sub	r18,r2,r3
    b7c8:	9000901e 	bne	r18,zero,ba0c <__umoddi3+0x41c>
    b7cc:	982cd43a 	srli	r22,r19,16
    b7d0:	8ce3c83a 	sub	r17,r17,r19
    b7d4:	9d7fffcc 	andi	r21,r19,65535
    b7d8:	b00b883a 	mov	r5,r22
    b7dc:	8809883a 	mov	r4,r17
    b7e0:	000bc840 	call	bc84 <__umodsi3>
    b7e4:	8809883a 	mov	r4,r17
    b7e8:	b00b883a 	mov	r5,r22
    b7ec:	1021883a 	mov	r16,r2
    b7f0:	000bc200 	call	bc20 <__udivsi3>
    b7f4:	8006943a 	slli	r3,r16,16
    b7f8:	a008d43a 	srli	r4,r20,16
    b7fc:	1545383a 	mul	r2,r2,r21
    b800:	20c8b03a 	or	r4,r4,r3
    b804:	2080042e 	bgeu	r4,r2,b818 <__umoddi3+0x228>
    b808:	24c9883a 	add	r4,r4,r19
    b80c:	24c00236 	bltu	r4,r19,b818 <__umoddi3+0x228>
    b810:	2080012e 	bgeu	r4,r2,b818 <__umoddi3+0x228>
    b814:	24c9883a 	add	r4,r4,r19
    b818:	20a1c83a 	sub	r16,r4,r2
    b81c:	b00b883a 	mov	r5,r22
    b820:	8009883a 	mov	r4,r16
    b824:	000bc840 	call	bc84 <__umodsi3>
    b828:	1023883a 	mov	r17,r2
    b82c:	b00b883a 	mov	r5,r22
    b830:	8009883a 	mov	r4,r16
    b834:	000bc200 	call	bc20 <__udivsi3>
    b838:	8822943a 	slli	r17,r17,16
    b83c:	1545383a 	mul	r2,r2,r21
    b840:	a53fffcc 	andi	r20,r20,65535
    b844:	a446b03a 	or	r3,r20,r17
    b848:	18bfb02e 	bgeu	r3,r2,b70c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b70c>
    b84c:	003fab06 	br	b6fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b6fc>
    b850:	2005883a 	mov	r2,r4
    b854:	2807883a 	mov	r3,r5
    b858:	dfc00b17 	ldw	ra,44(sp)
    b85c:	df000a17 	ldw	fp,40(sp)
    b860:	ddc00917 	ldw	r23,36(sp)
    b864:	dd800817 	ldw	r22,32(sp)
    b868:	dd400717 	ldw	r21,28(sp)
    b86c:	dd000617 	ldw	r20,24(sp)
    b870:	dcc00517 	ldw	r19,20(sp)
    b874:	dc800417 	ldw	r18,16(sp)
    b878:	dc400317 	ldw	r17,12(sp)
    b87c:	dc000217 	ldw	r16,8(sp)
    b880:	dec00c04 	addi	sp,sp,48
    b884:	f800283a 	ret
    b888:	04c03fc4 	movi	r19,255
    b88c:	99c9803a 	cmpltu	r4,r19,r7
    b890:	200890fa 	slli	r4,r4,3
    b894:	003fa806 	br	b738 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b738>
    b898:	00803fc4 	movi	r2,255
    b89c:	14c5803a 	cmpltu	r2,r2,r19
    b8a0:	100490fa 	slli	r2,r2,3
    b8a4:	003fc006 	br	b7a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b7a8>
    b8a8:	00804034 	movhi	r2,256
    b8ac:	10bfffc4 	addi	r2,r2,-1
    b8b0:	11808b36 	bltu	r2,r6,bae0 <__umoddi3+0x4f0>
    b8b4:	01000404 	movi	r4,16
    b8b8:	003f6406 	br	b64c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b64c>
    b8bc:	34c4d83a 	srl	r2,r6,r19
    b8c0:	3d0e983a 	sll	r7,r7,r20
    b8c4:	8cf8d83a 	srl	fp,r17,r19
    b8c8:	8d10983a 	sll	r8,r17,r20
    b8cc:	38aab03a 	or	r21,r7,r2
    b8d0:	a82cd43a 	srli	r22,r21,16
    b8d4:	84e2d83a 	srl	r17,r16,r19
    b8d8:	e009883a 	mov	r4,fp
    b8dc:	b00b883a 	mov	r5,r22
    b8e0:	8a22b03a 	or	r17,r17,r8
    b8e4:	3524983a 	sll	r18,r6,r20
    b8e8:	000bc840 	call	bc84 <__umodsi3>
    b8ec:	e009883a 	mov	r4,fp
    b8f0:	b00b883a 	mov	r5,r22
    b8f4:	102f883a 	mov	r23,r2
    b8f8:	000bc200 	call	bc20 <__udivsi3>
    b8fc:	100d883a 	mov	r6,r2
    b900:	b808943a 	slli	r4,r23,16
    b904:	aa3fffcc 	andi	r8,r21,65535
    b908:	8804d43a 	srli	r2,r17,16
    b90c:	41af383a 	mul	r23,r8,r6
    b910:	8520983a 	sll	r16,r16,r20
    b914:	1104b03a 	or	r2,r2,r4
    b918:	15c0042e 	bgeu	r2,r23,b92c <__umoddi3+0x33c>
    b91c:	1545883a 	add	r2,r2,r21
    b920:	30ffffc4 	addi	r3,r6,-1
    b924:	1540742e 	bgeu	r2,r21,baf8 <__umoddi3+0x508>
    b928:	180d883a 	mov	r6,r3
    b92c:	15efc83a 	sub	r23,r2,r23
    b930:	b00b883a 	mov	r5,r22
    b934:	b809883a 	mov	r4,r23
    b938:	d9800115 	stw	r6,4(sp)
    b93c:	da000015 	stw	r8,0(sp)
    b940:	000bc840 	call	bc84 <__umodsi3>
    b944:	b00b883a 	mov	r5,r22
    b948:	b809883a 	mov	r4,r23
    b94c:	1039883a 	mov	fp,r2
    b950:	000bc200 	call	bc20 <__udivsi3>
    b954:	da000017 	ldw	r8,0(sp)
    b958:	e038943a 	slli	fp,fp,16
    b95c:	100b883a 	mov	r5,r2
    b960:	4089383a 	mul	r4,r8,r2
    b964:	8a3fffcc 	andi	r8,r17,65535
    b968:	4710b03a 	or	r8,r8,fp
    b96c:	d9800117 	ldw	r6,4(sp)
    b970:	4100042e 	bgeu	r8,r4,b984 <__umoddi3+0x394>
    b974:	4551883a 	add	r8,r8,r21
    b978:	10bfffc4 	addi	r2,r2,-1
    b97c:	45405a2e 	bgeu	r8,r21,bae8 <__umoddi3+0x4f8>
    b980:	100b883a 	mov	r5,r2
    b984:	300c943a 	slli	r6,r6,16
    b988:	91ffffcc 	andi	r7,r18,65535
    b98c:	9004d43a 	srli	r2,r18,16
    b990:	314cb03a 	or	r6,r6,r5
    b994:	317fffcc 	andi	r5,r6,65535
    b998:	300cd43a 	srli	r6,r6,16
    b99c:	29d3383a 	mul	r9,r5,r7
    b9a0:	288b383a 	mul	r5,r5,r2
    b9a4:	31cf383a 	mul	r7,r6,r7
    b9a8:	4806d43a 	srli	r3,r9,16
    b9ac:	4111c83a 	sub	r8,r8,r4
    b9b0:	29cb883a 	add	r5,r5,r7
    b9b4:	194b883a 	add	r5,r3,r5
    b9b8:	3085383a 	mul	r2,r6,r2
    b9bc:	29c0022e 	bgeu	r5,r7,b9c8 <__umoddi3+0x3d8>
    b9c0:	00c00074 	movhi	r3,1
    b9c4:	10c5883a 	add	r2,r2,r3
    b9c8:	2808d43a 	srli	r4,r5,16
    b9cc:	280a943a 	slli	r5,r5,16
    b9d0:	4a7fffcc 	andi	r9,r9,65535
    b9d4:	2085883a 	add	r2,r4,r2
    b9d8:	2a4b883a 	add	r5,r5,r9
    b9dc:	40803636 	bltu	r8,r2,bab8 <__umoddi3+0x4c8>
    b9e0:	40804d26 	beq	r8,r2,bb18 <__umoddi3+0x528>
    b9e4:	4089c83a 	sub	r4,r8,r2
    b9e8:	280f883a 	mov	r7,r5
    b9ec:	81cfc83a 	sub	r7,r16,r7
    b9f0:	81c7803a 	cmpltu	r3,r16,r7
    b9f4:	20c7c83a 	sub	r3,r4,r3
    b9f8:	1cc4983a 	sll	r2,r3,r19
    b9fc:	3d0ed83a 	srl	r7,r7,r20
    ba00:	1d06d83a 	srl	r3,r3,r20
    ba04:	11c4b03a 	or	r2,r2,r7
    ba08:	003f9306 	br	b858 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b858>
    ba0c:	9ca6983a 	sll	r19,r19,r18
    ba10:	88e8d83a 	srl	r20,r17,r3
    ba14:	80c4d83a 	srl	r2,r16,r3
    ba18:	982cd43a 	srli	r22,r19,16
    ba1c:	8ca2983a 	sll	r17,r17,r18
    ba20:	a009883a 	mov	r4,r20
    ba24:	b00b883a 	mov	r5,r22
    ba28:	1478b03a 	or	fp,r2,r17
    ba2c:	000bc840 	call	bc84 <__umodsi3>
    ba30:	a009883a 	mov	r4,r20
    ba34:	b00b883a 	mov	r5,r22
    ba38:	1023883a 	mov	r17,r2
    ba3c:	000bc200 	call	bc20 <__udivsi3>
    ba40:	9d7fffcc 	andi	r21,r19,65535
    ba44:	880a943a 	slli	r5,r17,16
    ba48:	e008d43a 	srli	r4,fp,16
    ba4c:	a885383a 	mul	r2,r21,r2
    ba50:	84a8983a 	sll	r20,r16,r18
    ba54:	2148b03a 	or	r4,r4,r5
    ba58:	2080042e 	bgeu	r4,r2,ba6c <__umoddi3+0x47c>
    ba5c:	24c9883a 	add	r4,r4,r19
    ba60:	24c00236 	bltu	r4,r19,ba6c <__umoddi3+0x47c>
    ba64:	2080012e 	bgeu	r4,r2,ba6c <__umoddi3+0x47c>
    ba68:	24c9883a 	add	r4,r4,r19
    ba6c:	20a3c83a 	sub	r17,r4,r2
    ba70:	b00b883a 	mov	r5,r22
    ba74:	8809883a 	mov	r4,r17
    ba78:	000bc840 	call	bc84 <__umodsi3>
    ba7c:	102f883a 	mov	r23,r2
    ba80:	8809883a 	mov	r4,r17
    ba84:	b00b883a 	mov	r5,r22
    ba88:	000bc200 	call	bc20 <__udivsi3>
    ba8c:	b82e943a 	slli	r23,r23,16
    ba90:	a885383a 	mul	r2,r21,r2
    ba94:	e13fffcc 	andi	r4,fp,65535
    ba98:	25c8b03a 	or	r4,r4,r23
    ba9c:	2080042e 	bgeu	r4,r2,bab0 <__umoddi3+0x4c0>
    baa0:	24c9883a 	add	r4,r4,r19
    baa4:	24c00236 	bltu	r4,r19,bab0 <__umoddi3+0x4c0>
    baa8:	2080012e 	bgeu	r4,r2,bab0 <__umoddi3+0x4c0>
    baac:	24c9883a 	add	r4,r4,r19
    bab0:	20a3c83a 	sub	r17,r4,r2
    bab4:	003f4806 	br	b7d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b7d8>
    bab8:	2c8fc83a 	sub	r7,r5,r18
    babc:	1545c83a 	sub	r2,r2,r21
    bac0:	29cb803a 	cmpltu	r5,r5,r7
    bac4:	1145c83a 	sub	r2,r2,r5
    bac8:	4089c83a 	sub	r4,r8,r2
    bacc:	003fc706 	br	b9ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b9ec>
    bad0:	01000604 	movi	r4,24
    bad4:	003f1806 	br	b738 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b738>
    bad8:	00800604 	movi	r2,24
    badc:	003f3206 	br	b7a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b7a8>
    bae0:	01000604 	movi	r4,24
    bae4:	003ed906 	br	b64c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b64c>
    bae8:	413fa52e 	bgeu	r8,r4,b980 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b980>
    baec:	297fff84 	addi	r5,r5,-2
    baf0:	4551883a 	add	r8,r8,r21
    baf4:	003fa306 	br	b984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b984>
    baf8:	15ff8b2e 	bgeu	r2,r23,b928 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b928>
    bafc:	31bfff84 	addi	r6,r6,-2
    bb00:	1545883a 	add	r2,r2,r21
    bb04:	003f8906 	br	b92c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b92c>
    bb08:	24c9883a 	add	r4,r4,r19
    bb0c:	003eee06 	br	b6c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b6c8>
    bb10:	8005883a 	mov	r2,r16
    bb14:	003f1706 	br	b774 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b774>
    bb18:	817fe736 	bltu	r16,r5,bab8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bab8>
    bb1c:	280f883a 	mov	r7,r5
    bb20:	0009883a 	mov	r4,zero
    bb24:	003fb106 	br	b9ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b9ec>

0000bb28 <__divsi3>:
    bb28:	20001b16 	blt	r4,zero,bb98 <__divsi3+0x70>
    bb2c:	000f883a 	mov	r7,zero
    bb30:	28001616 	blt	r5,zero,bb8c <__divsi3+0x64>
    bb34:	200d883a 	mov	r6,r4
    bb38:	29001a2e 	bgeu	r5,r4,bba4 <__divsi3+0x7c>
    bb3c:	00800804 	movi	r2,32
    bb40:	00c00044 	movi	r3,1
    bb44:	00000106 	br	bb4c <__divsi3+0x24>
    bb48:	10000d26 	beq	r2,zero,bb80 <__divsi3+0x58>
    bb4c:	294b883a 	add	r5,r5,r5
    bb50:	10bfffc4 	addi	r2,r2,-1
    bb54:	18c7883a 	add	r3,r3,r3
    bb58:	293ffb36 	bltu	r5,r4,bb48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bb48>
    bb5c:	0005883a 	mov	r2,zero
    bb60:	18000726 	beq	r3,zero,bb80 <__divsi3+0x58>
    bb64:	0005883a 	mov	r2,zero
    bb68:	31400236 	bltu	r6,r5,bb74 <__divsi3+0x4c>
    bb6c:	314dc83a 	sub	r6,r6,r5
    bb70:	10c4b03a 	or	r2,r2,r3
    bb74:	1806d07a 	srli	r3,r3,1
    bb78:	280ad07a 	srli	r5,r5,1
    bb7c:	183ffa1e 	bne	r3,zero,bb68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bb68>
    bb80:	38000126 	beq	r7,zero,bb88 <__divsi3+0x60>
    bb84:	0085c83a 	sub	r2,zero,r2
    bb88:	f800283a 	ret
    bb8c:	014bc83a 	sub	r5,zero,r5
    bb90:	39c0005c 	xori	r7,r7,1
    bb94:	003fe706 	br	bb34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bb34>
    bb98:	0109c83a 	sub	r4,zero,r4
    bb9c:	01c00044 	movi	r7,1
    bba0:	003fe306 	br	bb30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bb30>
    bba4:	00c00044 	movi	r3,1
    bba8:	003fee06 	br	bb64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bb64>

0000bbac <__modsi3>:
    bbac:	20001716 	blt	r4,zero,bc0c <__modsi3+0x60>
    bbb0:	000f883a 	mov	r7,zero
    bbb4:	2005883a 	mov	r2,r4
    bbb8:	28001216 	blt	r5,zero,bc04 <__modsi3+0x58>
    bbbc:	2900162e 	bgeu	r5,r4,bc18 <__modsi3+0x6c>
    bbc0:	01800804 	movi	r6,32
    bbc4:	00c00044 	movi	r3,1
    bbc8:	00000106 	br	bbd0 <__modsi3+0x24>
    bbcc:	30000a26 	beq	r6,zero,bbf8 <__modsi3+0x4c>
    bbd0:	294b883a 	add	r5,r5,r5
    bbd4:	31bfffc4 	addi	r6,r6,-1
    bbd8:	18c7883a 	add	r3,r3,r3
    bbdc:	293ffb36 	bltu	r5,r4,bbcc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bbcc>
    bbe0:	18000526 	beq	r3,zero,bbf8 <__modsi3+0x4c>
    bbe4:	1806d07a 	srli	r3,r3,1
    bbe8:	11400136 	bltu	r2,r5,bbf0 <__modsi3+0x44>
    bbec:	1145c83a 	sub	r2,r2,r5
    bbf0:	280ad07a 	srli	r5,r5,1
    bbf4:	183ffb1e 	bne	r3,zero,bbe4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bbe4>
    bbf8:	38000126 	beq	r7,zero,bc00 <__modsi3+0x54>
    bbfc:	0085c83a 	sub	r2,zero,r2
    bc00:	f800283a 	ret
    bc04:	014bc83a 	sub	r5,zero,r5
    bc08:	003fec06 	br	bbbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bbbc>
    bc0c:	0109c83a 	sub	r4,zero,r4
    bc10:	01c00044 	movi	r7,1
    bc14:	003fe706 	br	bbb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bbb4>
    bc18:	00c00044 	movi	r3,1
    bc1c:	003ff106 	br	bbe4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bbe4>

0000bc20 <__udivsi3>:
    bc20:	200d883a 	mov	r6,r4
    bc24:	2900152e 	bgeu	r5,r4,bc7c <__udivsi3+0x5c>
    bc28:	28001416 	blt	r5,zero,bc7c <__udivsi3+0x5c>
    bc2c:	00800804 	movi	r2,32
    bc30:	00c00044 	movi	r3,1
    bc34:	00000206 	br	bc40 <__udivsi3+0x20>
    bc38:	10000e26 	beq	r2,zero,bc74 <__udivsi3+0x54>
    bc3c:	28000516 	blt	r5,zero,bc54 <__udivsi3+0x34>
    bc40:	294b883a 	add	r5,r5,r5
    bc44:	10bfffc4 	addi	r2,r2,-1
    bc48:	18c7883a 	add	r3,r3,r3
    bc4c:	293ffa36 	bltu	r5,r4,bc38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bc38>
    bc50:	18000826 	beq	r3,zero,bc74 <__udivsi3+0x54>
    bc54:	0005883a 	mov	r2,zero
    bc58:	31400236 	bltu	r6,r5,bc64 <__udivsi3+0x44>
    bc5c:	314dc83a 	sub	r6,r6,r5
    bc60:	10c4b03a 	or	r2,r2,r3
    bc64:	1806d07a 	srli	r3,r3,1
    bc68:	280ad07a 	srli	r5,r5,1
    bc6c:	183ffa1e 	bne	r3,zero,bc58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bc58>
    bc70:	f800283a 	ret
    bc74:	0005883a 	mov	r2,zero
    bc78:	f800283a 	ret
    bc7c:	00c00044 	movi	r3,1
    bc80:	003ff406 	br	bc54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bc54>

0000bc84 <__umodsi3>:
    bc84:	2005883a 	mov	r2,r4
    bc88:	2900122e 	bgeu	r5,r4,bcd4 <__umodsi3+0x50>
    bc8c:	28001116 	blt	r5,zero,bcd4 <__umodsi3+0x50>
    bc90:	01800804 	movi	r6,32
    bc94:	00c00044 	movi	r3,1
    bc98:	00000206 	br	bca4 <__umodsi3+0x20>
    bc9c:	30000c26 	beq	r6,zero,bcd0 <__umodsi3+0x4c>
    bca0:	28000516 	blt	r5,zero,bcb8 <__umodsi3+0x34>
    bca4:	294b883a 	add	r5,r5,r5
    bca8:	31bfffc4 	addi	r6,r6,-1
    bcac:	18c7883a 	add	r3,r3,r3
    bcb0:	293ffa36 	bltu	r5,r4,bc9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bc9c>
    bcb4:	18000626 	beq	r3,zero,bcd0 <__umodsi3+0x4c>
    bcb8:	1806d07a 	srli	r3,r3,1
    bcbc:	11400136 	bltu	r2,r5,bcc4 <__umodsi3+0x40>
    bcc0:	1145c83a 	sub	r2,r2,r5
    bcc4:	280ad07a 	srli	r5,r5,1
    bcc8:	183ffb1e 	bne	r3,zero,bcb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bcb8>
    bccc:	f800283a 	ret
    bcd0:	f800283a 	ret
    bcd4:	00c00044 	movi	r3,1
    bcd8:	003ff706 	br	bcb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bcb8>

0000bcdc <__adddf3>:
    bcdc:	02c00434 	movhi	r11,16
    bce0:	5affffc4 	addi	r11,r11,-1
    bce4:	2806d7fa 	srli	r3,r5,31
    bce8:	2ad4703a 	and	r10,r5,r11
    bcec:	3ad2703a 	and	r9,r7,r11
    bcf0:	3804d53a 	srli	r2,r7,20
    bcf4:	3018d77a 	srli	r12,r6,29
    bcf8:	280ad53a 	srli	r5,r5,20
    bcfc:	501490fa 	slli	r10,r10,3
    bd00:	2010d77a 	srli	r8,r4,29
    bd04:	481290fa 	slli	r9,r9,3
    bd08:	380ed7fa 	srli	r7,r7,31
    bd0c:	defffb04 	addi	sp,sp,-20
    bd10:	dc800215 	stw	r18,8(sp)
    bd14:	dc400115 	stw	r17,4(sp)
    bd18:	dc000015 	stw	r16,0(sp)
    bd1c:	dfc00415 	stw	ra,16(sp)
    bd20:	dcc00315 	stw	r19,12(sp)
    bd24:	1c803fcc 	andi	r18,r3,255
    bd28:	2c01ffcc 	andi	r16,r5,2047
    bd2c:	5210b03a 	or	r8,r10,r8
    bd30:	202290fa 	slli	r17,r4,3
    bd34:	1081ffcc 	andi	r2,r2,2047
    bd38:	4b12b03a 	or	r9,r9,r12
    bd3c:	300c90fa 	slli	r6,r6,3
    bd40:	91c07526 	beq	r18,r7,bf18 <__adddf3+0x23c>
    bd44:	8087c83a 	sub	r3,r16,r2
    bd48:	00c0ab0e 	bge	zero,r3,bff8 <__adddf3+0x31c>
    bd4c:	10002a1e 	bne	r2,zero,bdf8 <__adddf3+0x11c>
    bd50:	4984b03a 	or	r2,r9,r6
    bd54:	1000961e 	bne	r2,zero,bfb0 <__adddf3+0x2d4>
    bd58:	888001cc 	andi	r2,r17,7
    bd5c:	10000726 	beq	r2,zero,bd7c <__adddf3+0xa0>
    bd60:	888003cc 	andi	r2,r17,15
    bd64:	00c00104 	movi	r3,4
    bd68:	10c00426 	beq	r2,r3,bd7c <__adddf3+0xa0>
    bd6c:	88c7883a 	add	r3,r17,r3
    bd70:	1c63803a 	cmpltu	r17,r3,r17
    bd74:	4451883a 	add	r8,r8,r17
    bd78:	1823883a 	mov	r17,r3
    bd7c:	4080202c 	andhi	r2,r8,128
    bd80:	10005926 	beq	r2,zero,bee8 <__adddf3+0x20c>
    bd84:	84000044 	addi	r16,r16,1
    bd88:	0081ffc4 	movi	r2,2047
    bd8c:	8080ba26 	beq	r16,r2,c078 <__adddf3+0x39c>
    bd90:	00bfe034 	movhi	r2,65408
    bd94:	10bfffc4 	addi	r2,r2,-1
    bd98:	4090703a 	and	r8,r8,r2
    bd9c:	4004977a 	slli	r2,r8,29
    bda0:	4010927a 	slli	r8,r8,9
    bda4:	8822d0fa 	srli	r17,r17,3
    bda8:	8401ffcc 	andi	r16,r16,2047
    bdac:	4010d33a 	srli	r8,r8,12
    bdb0:	9007883a 	mov	r3,r18
    bdb4:	1444b03a 	or	r2,r2,r17
    bdb8:	8401ffcc 	andi	r16,r16,2047
    bdbc:	8020953a 	slli	r16,r16,20
    bdc0:	18c03fcc 	andi	r3,r3,255
    bdc4:	01000434 	movhi	r4,16
    bdc8:	213fffc4 	addi	r4,r4,-1
    bdcc:	180697fa 	slli	r3,r3,31
    bdd0:	4110703a 	and	r8,r8,r4
    bdd4:	4410b03a 	or	r8,r8,r16
    bdd8:	40c6b03a 	or	r3,r8,r3
    bddc:	dfc00417 	ldw	ra,16(sp)
    bde0:	dcc00317 	ldw	r19,12(sp)
    bde4:	dc800217 	ldw	r18,8(sp)
    bde8:	dc400117 	ldw	r17,4(sp)
    bdec:	dc000017 	ldw	r16,0(sp)
    bdf0:	dec00504 	addi	sp,sp,20
    bdf4:	f800283a 	ret
    bdf8:	0081ffc4 	movi	r2,2047
    bdfc:	80bfd626 	beq	r16,r2,bd58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd58>
    be00:	4a402034 	orhi	r9,r9,128
    be04:	00800e04 	movi	r2,56
    be08:	10c09f16 	blt	r2,r3,c088 <__adddf3+0x3ac>
    be0c:	008007c4 	movi	r2,31
    be10:	10c0c216 	blt	r2,r3,c11c <__adddf3+0x440>
    be14:	00800804 	movi	r2,32
    be18:	10c5c83a 	sub	r2,r2,r3
    be1c:	488a983a 	sll	r5,r9,r2
    be20:	30c8d83a 	srl	r4,r6,r3
    be24:	3084983a 	sll	r2,r6,r2
    be28:	48c6d83a 	srl	r3,r9,r3
    be2c:	290cb03a 	or	r6,r5,r4
    be30:	1004c03a 	cmpne	r2,r2,zero
    be34:	308cb03a 	or	r6,r6,r2
    be38:	898dc83a 	sub	r6,r17,r6
    be3c:	89a3803a 	cmpltu	r17,r17,r6
    be40:	40d1c83a 	sub	r8,r8,r3
    be44:	4451c83a 	sub	r8,r8,r17
    be48:	3023883a 	mov	r17,r6
    be4c:	4080202c 	andhi	r2,r8,128
    be50:	10002326 	beq	r2,zero,bee0 <__adddf3+0x204>
    be54:	04c02034 	movhi	r19,128
    be58:	9cffffc4 	addi	r19,r19,-1
    be5c:	44e6703a 	and	r19,r8,r19
    be60:	98007626 	beq	r19,zero,c03c <__adddf3+0x360>
    be64:	9809883a 	mov	r4,r19
    be68:	000e2e00 	call	e2e0 <__clzsi2>
    be6c:	10fffe04 	addi	r3,r2,-8
    be70:	010007c4 	movi	r4,31
    be74:	20c07716 	blt	r4,r3,c054 <__adddf3+0x378>
    be78:	00800804 	movi	r2,32
    be7c:	10c5c83a 	sub	r2,r2,r3
    be80:	8884d83a 	srl	r2,r17,r2
    be84:	98d0983a 	sll	r8,r19,r3
    be88:	88e2983a 	sll	r17,r17,r3
    be8c:	1204b03a 	or	r2,r2,r8
    be90:	1c007416 	blt	r3,r16,c064 <__adddf3+0x388>
    be94:	1c21c83a 	sub	r16,r3,r16
    be98:	82000044 	addi	r8,r16,1
    be9c:	00c007c4 	movi	r3,31
    bea0:	1a009116 	blt	r3,r8,c0e8 <__adddf3+0x40c>
    bea4:	00c00804 	movi	r3,32
    bea8:	1a07c83a 	sub	r3,r3,r8
    beac:	8a08d83a 	srl	r4,r17,r8
    beb0:	88e2983a 	sll	r17,r17,r3
    beb4:	10c6983a 	sll	r3,r2,r3
    beb8:	1210d83a 	srl	r8,r2,r8
    bebc:	8804c03a 	cmpne	r2,r17,zero
    bec0:	1906b03a 	or	r3,r3,r4
    bec4:	18a2b03a 	or	r17,r3,r2
    bec8:	0021883a 	mov	r16,zero
    becc:	003fa206 	br	bd58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd58>
    bed0:	1890b03a 	or	r8,r3,r2
    bed4:	40017d26 	beq	r8,zero,c4cc <__adddf3+0x7f0>
    bed8:	1011883a 	mov	r8,r2
    bedc:	1823883a 	mov	r17,r3
    bee0:	888001cc 	andi	r2,r17,7
    bee4:	103f9e1e 	bne	r2,zero,bd60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd60>
    bee8:	4004977a 	slli	r2,r8,29
    beec:	8822d0fa 	srli	r17,r17,3
    bef0:	4010d0fa 	srli	r8,r8,3
    bef4:	9007883a 	mov	r3,r18
    bef8:	1444b03a 	or	r2,r2,r17
    befc:	0101ffc4 	movi	r4,2047
    bf00:	81002426 	beq	r16,r4,bf94 <__adddf3+0x2b8>
    bf04:	8120703a 	and	r16,r16,r4
    bf08:	01000434 	movhi	r4,16
    bf0c:	213fffc4 	addi	r4,r4,-1
    bf10:	4110703a 	and	r8,r8,r4
    bf14:	003fa806 	br	bdb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bdb8>
    bf18:	8089c83a 	sub	r4,r16,r2
    bf1c:	01005e0e 	bge	zero,r4,c098 <__adddf3+0x3bc>
    bf20:	10002b26 	beq	r2,zero,bfd0 <__adddf3+0x2f4>
    bf24:	0081ffc4 	movi	r2,2047
    bf28:	80bf8b26 	beq	r16,r2,bd58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd58>
    bf2c:	4a402034 	orhi	r9,r9,128
    bf30:	00800e04 	movi	r2,56
    bf34:	1100a40e 	bge	r2,r4,c1c8 <__adddf3+0x4ec>
    bf38:	498cb03a 	or	r6,r9,r6
    bf3c:	300ac03a 	cmpne	r5,r6,zero
    bf40:	0013883a 	mov	r9,zero
    bf44:	2c4b883a 	add	r5,r5,r17
    bf48:	2c63803a 	cmpltu	r17,r5,r17
    bf4c:	4a11883a 	add	r8,r9,r8
    bf50:	8a11883a 	add	r8,r17,r8
    bf54:	2823883a 	mov	r17,r5
    bf58:	4080202c 	andhi	r2,r8,128
    bf5c:	103fe026 	beq	r2,zero,bee0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bee0>
    bf60:	84000044 	addi	r16,r16,1
    bf64:	0081ffc4 	movi	r2,2047
    bf68:	8080d226 	beq	r16,r2,c2b4 <__adddf3+0x5d8>
    bf6c:	00bfe034 	movhi	r2,65408
    bf70:	10bfffc4 	addi	r2,r2,-1
    bf74:	4090703a 	and	r8,r8,r2
    bf78:	880ad07a 	srli	r5,r17,1
    bf7c:	400897fa 	slli	r4,r8,31
    bf80:	88c0004c 	andi	r3,r17,1
    bf84:	28e2b03a 	or	r17,r5,r3
    bf88:	4010d07a 	srli	r8,r8,1
    bf8c:	2462b03a 	or	r17,r4,r17
    bf90:	003f7106 	br	bd58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd58>
    bf94:	4088b03a 	or	r4,r8,r2
    bf98:	20014526 	beq	r4,zero,c4b0 <__adddf3+0x7d4>
    bf9c:	01000434 	movhi	r4,16
    bfa0:	42000234 	orhi	r8,r8,8
    bfa4:	213fffc4 	addi	r4,r4,-1
    bfa8:	4110703a 	and	r8,r8,r4
    bfac:	003f8206 	br	bdb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bdb8>
    bfb0:	18ffffc4 	addi	r3,r3,-1
    bfb4:	1800491e 	bne	r3,zero,c0dc <__adddf3+0x400>
    bfb8:	898bc83a 	sub	r5,r17,r6
    bfbc:	8963803a 	cmpltu	r17,r17,r5
    bfc0:	4251c83a 	sub	r8,r8,r9
    bfc4:	4451c83a 	sub	r8,r8,r17
    bfc8:	2823883a 	mov	r17,r5
    bfcc:	003f9f06 	br	be4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700be4c>
    bfd0:	4984b03a 	or	r2,r9,r6
    bfd4:	103f6026 	beq	r2,zero,bd58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd58>
    bfd8:	213fffc4 	addi	r4,r4,-1
    bfdc:	2000931e 	bne	r4,zero,c22c <__adddf3+0x550>
    bfe0:	898d883a 	add	r6,r17,r6
    bfe4:	3463803a 	cmpltu	r17,r6,r17
    bfe8:	4251883a 	add	r8,r8,r9
    bfec:	8a11883a 	add	r8,r17,r8
    bff0:	3023883a 	mov	r17,r6
    bff4:	003fd806 	br	bf58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf58>
    bff8:	1800541e 	bne	r3,zero,c14c <__adddf3+0x470>
    bffc:	80800044 	addi	r2,r16,1
    c000:	1081ffcc 	andi	r2,r2,2047
    c004:	00c00044 	movi	r3,1
    c008:	1880a00e 	bge	r3,r2,c28c <__adddf3+0x5b0>
    c00c:	8989c83a 	sub	r4,r17,r6
    c010:	8905803a 	cmpltu	r2,r17,r4
    c014:	4267c83a 	sub	r19,r8,r9
    c018:	98a7c83a 	sub	r19,r19,r2
    c01c:	9880202c 	andhi	r2,r19,128
    c020:	10006326 	beq	r2,zero,c1b0 <__adddf3+0x4d4>
    c024:	3463c83a 	sub	r17,r6,r17
    c028:	4a07c83a 	sub	r3,r9,r8
    c02c:	344d803a 	cmpltu	r6,r6,r17
    c030:	19a7c83a 	sub	r19,r3,r6
    c034:	3825883a 	mov	r18,r7
    c038:	983f8a1e 	bne	r19,zero,be64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700be64>
    c03c:	8809883a 	mov	r4,r17
    c040:	000e2e00 	call	e2e0 <__clzsi2>
    c044:	10800804 	addi	r2,r2,32
    c048:	10fffe04 	addi	r3,r2,-8
    c04c:	010007c4 	movi	r4,31
    c050:	20ff890e 	bge	r4,r3,be78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700be78>
    c054:	10bff604 	addi	r2,r2,-40
    c058:	8884983a 	sll	r2,r17,r2
    c05c:	0023883a 	mov	r17,zero
    c060:	1c3f8c0e 	bge	r3,r16,be94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700be94>
    c064:	023fe034 	movhi	r8,65408
    c068:	423fffc4 	addi	r8,r8,-1
    c06c:	80e1c83a 	sub	r16,r16,r3
    c070:	1210703a 	and	r8,r2,r8
    c074:	003f3806 	br	bd58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd58>
    c078:	9007883a 	mov	r3,r18
    c07c:	0011883a 	mov	r8,zero
    c080:	0005883a 	mov	r2,zero
    c084:	003f4c06 	br	bdb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bdb8>
    c088:	498cb03a 	or	r6,r9,r6
    c08c:	300cc03a 	cmpne	r6,r6,zero
    c090:	0007883a 	mov	r3,zero
    c094:	003f6806 	br	be38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700be38>
    c098:	20009c1e 	bne	r4,zero,c30c <__adddf3+0x630>
    c09c:	80800044 	addi	r2,r16,1
    c0a0:	1141ffcc 	andi	r5,r2,2047
    c0a4:	01000044 	movi	r4,1
    c0a8:	2140670e 	bge	r4,r5,c248 <__adddf3+0x56c>
    c0ac:	0101ffc4 	movi	r4,2047
    c0b0:	11007f26 	beq	r2,r4,c2b0 <__adddf3+0x5d4>
    c0b4:	898d883a 	add	r6,r17,r6
    c0b8:	4247883a 	add	r3,r8,r9
    c0bc:	3451803a 	cmpltu	r8,r6,r17
    c0c0:	40d1883a 	add	r8,r8,r3
    c0c4:	402297fa 	slli	r17,r8,31
    c0c8:	300cd07a 	srli	r6,r6,1
    c0cc:	4010d07a 	srli	r8,r8,1
    c0d0:	1021883a 	mov	r16,r2
    c0d4:	89a2b03a 	or	r17,r17,r6
    c0d8:	003f1f06 	br	bd58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd58>
    c0dc:	0081ffc4 	movi	r2,2047
    c0e0:	80bf481e 	bne	r16,r2,be04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700be04>
    c0e4:	003f1c06 	br	bd58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd58>
    c0e8:	843ff844 	addi	r16,r16,-31
    c0ec:	01000804 	movi	r4,32
    c0f0:	1406d83a 	srl	r3,r2,r16
    c0f4:	41005026 	beq	r8,r4,c238 <__adddf3+0x55c>
    c0f8:	01001004 	movi	r4,64
    c0fc:	2211c83a 	sub	r8,r4,r8
    c100:	1204983a 	sll	r2,r2,r8
    c104:	88a2b03a 	or	r17,r17,r2
    c108:	8822c03a 	cmpne	r17,r17,zero
    c10c:	1c62b03a 	or	r17,r3,r17
    c110:	0011883a 	mov	r8,zero
    c114:	0021883a 	mov	r16,zero
    c118:	003f7106 	br	bee0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bee0>
    c11c:	193ff804 	addi	r4,r3,-32
    c120:	00800804 	movi	r2,32
    c124:	4908d83a 	srl	r4,r9,r4
    c128:	18804526 	beq	r3,r2,c240 <__adddf3+0x564>
    c12c:	00801004 	movi	r2,64
    c130:	10c5c83a 	sub	r2,r2,r3
    c134:	4886983a 	sll	r3,r9,r2
    c138:	198cb03a 	or	r6,r3,r6
    c13c:	300cc03a 	cmpne	r6,r6,zero
    c140:	218cb03a 	or	r6,r4,r6
    c144:	0007883a 	mov	r3,zero
    c148:	003f3b06 	br	be38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700be38>
    c14c:	80002a26 	beq	r16,zero,c1f8 <__adddf3+0x51c>
    c150:	0101ffc4 	movi	r4,2047
    c154:	11006826 	beq	r2,r4,c2f8 <__adddf3+0x61c>
    c158:	00c7c83a 	sub	r3,zero,r3
    c15c:	42002034 	orhi	r8,r8,128
    c160:	01000e04 	movi	r4,56
    c164:	20c07c16 	blt	r4,r3,c358 <__adddf3+0x67c>
    c168:	010007c4 	movi	r4,31
    c16c:	20c0da16 	blt	r4,r3,c4d8 <__adddf3+0x7fc>
    c170:	01000804 	movi	r4,32
    c174:	20c9c83a 	sub	r4,r4,r3
    c178:	4114983a 	sll	r10,r8,r4
    c17c:	88cad83a 	srl	r5,r17,r3
    c180:	8908983a 	sll	r4,r17,r4
    c184:	40c6d83a 	srl	r3,r8,r3
    c188:	5162b03a 	or	r17,r10,r5
    c18c:	2008c03a 	cmpne	r4,r4,zero
    c190:	8922b03a 	or	r17,r17,r4
    c194:	3463c83a 	sub	r17,r6,r17
    c198:	48c7c83a 	sub	r3,r9,r3
    c19c:	344d803a 	cmpltu	r6,r6,r17
    c1a0:	1991c83a 	sub	r8,r3,r6
    c1a4:	1021883a 	mov	r16,r2
    c1a8:	3825883a 	mov	r18,r7
    c1ac:	003f2706 	br	be4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700be4c>
    c1b0:	24d0b03a 	or	r8,r4,r19
    c1b4:	40001b1e 	bne	r8,zero,c224 <__adddf3+0x548>
    c1b8:	0005883a 	mov	r2,zero
    c1bc:	0007883a 	mov	r3,zero
    c1c0:	0021883a 	mov	r16,zero
    c1c4:	003f4d06 	br	befc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700befc>
    c1c8:	008007c4 	movi	r2,31
    c1cc:	11003c16 	blt	r2,r4,c2c0 <__adddf3+0x5e4>
    c1d0:	00800804 	movi	r2,32
    c1d4:	1105c83a 	sub	r2,r2,r4
    c1d8:	488e983a 	sll	r7,r9,r2
    c1dc:	310ad83a 	srl	r5,r6,r4
    c1e0:	3084983a 	sll	r2,r6,r2
    c1e4:	4912d83a 	srl	r9,r9,r4
    c1e8:	394ab03a 	or	r5,r7,r5
    c1ec:	1004c03a 	cmpne	r2,r2,zero
    c1f0:	288ab03a 	or	r5,r5,r2
    c1f4:	003f5306 	br	bf44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf44>
    c1f8:	4448b03a 	or	r4,r8,r17
    c1fc:	20003e26 	beq	r4,zero,c2f8 <__adddf3+0x61c>
    c200:	00c6303a 	nor	r3,zero,r3
    c204:	18003a1e 	bne	r3,zero,c2f0 <__adddf3+0x614>
    c208:	3463c83a 	sub	r17,r6,r17
    c20c:	4a07c83a 	sub	r3,r9,r8
    c210:	344d803a 	cmpltu	r6,r6,r17
    c214:	1991c83a 	sub	r8,r3,r6
    c218:	1021883a 	mov	r16,r2
    c21c:	3825883a 	mov	r18,r7
    c220:	003f0a06 	br	be4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700be4c>
    c224:	2023883a 	mov	r17,r4
    c228:	003f0d06 	br	be60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700be60>
    c22c:	0081ffc4 	movi	r2,2047
    c230:	80bf3f1e 	bne	r16,r2,bf30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf30>
    c234:	003ec806 	br	bd58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd58>
    c238:	0005883a 	mov	r2,zero
    c23c:	003fb106 	br	c104 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c104>
    c240:	0007883a 	mov	r3,zero
    c244:	003fbc06 	br	c138 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c138>
    c248:	4444b03a 	or	r2,r8,r17
    c24c:	8000871e 	bne	r16,zero,c46c <__adddf3+0x790>
    c250:	1000ba26 	beq	r2,zero,c53c <__adddf3+0x860>
    c254:	4984b03a 	or	r2,r9,r6
    c258:	103ebf26 	beq	r2,zero,bd58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd58>
    c25c:	8985883a 	add	r2,r17,r6
    c260:	4247883a 	add	r3,r8,r9
    c264:	1451803a 	cmpltu	r8,r2,r17
    c268:	40d1883a 	add	r8,r8,r3
    c26c:	40c0202c 	andhi	r3,r8,128
    c270:	1023883a 	mov	r17,r2
    c274:	183f1a26 	beq	r3,zero,bee0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bee0>
    c278:	00bfe034 	movhi	r2,65408
    c27c:	10bfffc4 	addi	r2,r2,-1
    c280:	2021883a 	mov	r16,r4
    c284:	4090703a 	and	r8,r8,r2
    c288:	003eb306 	br	bd58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd58>
    c28c:	4444b03a 	or	r2,r8,r17
    c290:	8000291e 	bne	r16,zero,c338 <__adddf3+0x65c>
    c294:	10004b1e 	bne	r2,zero,c3c4 <__adddf3+0x6e8>
    c298:	4990b03a 	or	r8,r9,r6
    c29c:	40008b26 	beq	r8,zero,c4cc <__adddf3+0x7f0>
    c2a0:	4811883a 	mov	r8,r9
    c2a4:	3023883a 	mov	r17,r6
    c2a8:	3825883a 	mov	r18,r7
    c2ac:	003eaa06 	br	bd58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd58>
    c2b0:	1021883a 	mov	r16,r2
    c2b4:	0011883a 	mov	r8,zero
    c2b8:	0005883a 	mov	r2,zero
    c2bc:	003f0f06 	br	befc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700befc>
    c2c0:	217ff804 	addi	r5,r4,-32
    c2c4:	00800804 	movi	r2,32
    c2c8:	494ad83a 	srl	r5,r9,r5
    c2cc:	20807d26 	beq	r4,r2,c4c4 <__adddf3+0x7e8>
    c2d0:	00801004 	movi	r2,64
    c2d4:	1109c83a 	sub	r4,r2,r4
    c2d8:	4912983a 	sll	r9,r9,r4
    c2dc:	498cb03a 	or	r6,r9,r6
    c2e0:	300cc03a 	cmpne	r6,r6,zero
    c2e4:	298ab03a 	or	r5,r5,r6
    c2e8:	0013883a 	mov	r9,zero
    c2ec:	003f1506 	br	bf44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf44>
    c2f0:	0101ffc4 	movi	r4,2047
    c2f4:	113f9a1e 	bne	r2,r4,c160 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c160>
    c2f8:	4811883a 	mov	r8,r9
    c2fc:	3023883a 	mov	r17,r6
    c300:	1021883a 	mov	r16,r2
    c304:	3825883a 	mov	r18,r7
    c308:	003e9306 	br	bd58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd58>
    c30c:	8000161e 	bne	r16,zero,c368 <__adddf3+0x68c>
    c310:	444ab03a 	or	r5,r8,r17
    c314:	28005126 	beq	r5,zero,c45c <__adddf3+0x780>
    c318:	0108303a 	nor	r4,zero,r4
    c31c:	20004d1e 	bne	r4,zero,c454 <__adddf3+0x778>
    c320:	89a3883a 	add	r17,r17,r6
    c324:	4253883a 	add	r9,r8,r9
    c328:	898d803a 	cmpltu	r6,r17,r6
    c32c:	3251883a 	add	r8,r6,r9
    c330:	1021883a 	mov	r16,r2
    c334:	003f0806 	br	bf58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf58>
    c338:	1000301e 	bne	r2,zero,c3fc <__adddf3+0x720>
    c33c:	4984b03a 	or	r2,r9,r6
    c340:	10007126 	beq	r2,zero,c508 <__adddf3+0x82c>
    c344:	4811883a 	mov	r8,r9
    c348:	3023883a 	mov	r17,r6
    c34c:	3825883a 	mov	r18,r7
    c350:	0401ffc4 	movi	r16,2047
    c354:	003e8006 	br	bd58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd58>
    c358:	4462b03a 	or	r17,r8,r17
    c35c:	8822c03a 	cmpne	r17,r17,zero
    c360:	0007883a 	mov	r3,zero
    c364:	003f8b06 	br	c194 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c194>
    c368:	0141ffc4 	movi	r5,2047
    c36c:	11403b26 	beq	r2,r5,c45c <__adddf3+0x780>
    c370:	0109c83a 	sub	r4,zero,r4
    c374:	42002034 	orhi	r8,r8,128
    c378:	01400e04 	movi	r5,56
    c37c:	29006716 	blt	r5,r4,c51c <__adddf3+0x840>
    c380:	014007c4 	movi	r5,31
    c384:	29007016 	blt	r5,r4,c548 <__adddf3+0x86c>
    c388:	01400804 	movi	r5,32
    c38c:	290bc83a 	sub	r5,r5,r4
    c390:	4154983a 	sll	r10,r8,r5
    c394:	890ed83a 	srl	r7,r17,r4
    c398:	894a983a 	sll	r5,r17,r5
    c39c:	4108d83a 	srl	r4,r8,r4
    c3a0:	51e2b03a 	or	r17,r10,r7
    c3a4:	280ac03a 	cmpne	r5,r5,zero
    c3a8:	8962b03a 	or	r17,r17,r5
    c3ac:	89a3883a 	add	r17,r17,r6
    c3b0:	2253883a 	add	r9,r4,r9
    c3b4:	898d803a 	cmpltu	r6,r17,r6
    c3b8:	3251883a 	add	r8,r6,r9
    c3bc:	1021883a 	mov	r16,r2
    c3c0:	003ee506 	br	bf58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf58>
    c3c4:	4984b03a 	or	r2,r9,r6
    c3c8:	103e6326 	beq	r2,zero,bd58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd58>
    c3cc:	8987c83a 	sub	r3,r17,r6
    c3d0:	88c9803a 	cmpltu	r4,r17,r3
    c3d4:	4245c83a 	sub	r2,r8,r9
    c3d8:	1105c83a 	sub	r2,r2,r4
    c3dc:	1100202c 	andhi	r4,r2,128
    c3e0:	203ebb26 	beq	r4,zero,bed0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bed0>
    c3e4:	3463c83a 	sub	r17,r6,r17
    c3e8:	4a07c83a 	sub	r3,r9,r8
    c3ec:	344d803a 	cmpltu	r6,r6,r17
    c3f0:	1991c83a 	sub	r8,r3,r6
    c3f4:	3825883a 	mov	r18,r7
    c3f8:	003e5706 	br	bd58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd58>
    c3fc:	4984b03a 	or	r2,r9,r6
    c400:	10002e26 	beq	r2,zero,c4bc <__adddf3+0x7e0>
    c404:	4004d0fa 	srli	r2,r8,3
    c408:	8822d0fa 	srli	r17,r17,3
    c40c:	4010977a 	slli	r8,r8,29
    c410:	10c0022c 	andhi	r3,r2,8
    c414:	4462b03a 	or	r17,r8,r17
    c418:	18000826 	beq	r3,zero,c43c <__adddf3+0x760>
    c41c:	4808d0fa 	srli	r4,r9,3
    c420:	20c0022c 	andhi	r3,r4,8
    c424:	1800051e 	bne	r3,zero,c43c <__adddf3+0x760>
    c428:	300cd0fa 	srli	r6,r6,3
    c42c:	4806977a 	slli	r3,r9,29
    c430:	2005883a 	mov	r2,r4
    c434:	3825883a 	mov	r18,r7
    c438:	19a2b03a 	or	r17,r3,r6
    c43c:	8810d77a 	srli	r8,r17,29
    c440:	100490fa 	slli	r2,r2,3
    c444:	882290fa 	slli	r17,r17,3
    c448:	0401ffc4 	movi	r16,2047
    c44c:	4090b03a 	or	r8,r8,r2
    c450:	003e4106 	br	bd58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd58>
    c454:	0141ffc4 	movi	r5,2047
    c458:	117fc71e 	bne	r2,r5,c378 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c378>
    c45c:	4811883a 	mov	r8,r9
    c460:	3023883a 	mov	r17,r6
    c464:	1021883a 	mov	r16,r2
    c468:	003e3b06 	br	bd58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd58>
    c46c:	10002f26 	beq	r2,zero,c52c <__adddf3+0x850>
    c470:	4984b03a 	or	r2,r9,r6
    c474:	10001126 	beq	r2,zero,c4bc <__adddf3+0x7e0>
    c478:	4004d0fa 	srli	r2,r8,3
    c47c:	8822d0fa 	srli	r17,r17,3
    c480:	4010977a 	slli	r8,r8,29
    c484:	10c0022c 	andhi	r3,r2,8
    c488:	4462b03a 	or	r17,r8,r17
    c48c:	183feb26 	beq	r3,zero,c43c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c43c>
    c490:	4808d0fa 	srli	r4,r9,3
    c494:	20c0022c 	andhi	r3,r4,8
    c498:	183fe81e 	bne	r3,zero,c43c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c43c>
    c49c:	300cd0fa 	srli	r6,r6,3
    c4a0:	4806977a 	slli	r3,r9,29
    c4a4:	2005883a 	mov	r2,r4
    c4a8:	19a2b03a 	or	r17,r3,r6
    c4ac:	003fe306 	br	c43c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c43c>
    c4b0:	0011883a 	mov	r8,zero
    c4b4:	0005883a 	mov	r2,zero
    c4b8:	003e3f06 	br	bdb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bdb8>
    c4bc:	0401ffc4 	movi	r16,2047
    c4c0:	003e2506 	br	bd58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd58>
    c4c4:	0013883a 	mov	r9,zero
    c4c8:	003f8406 	br	c2dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c2dc>
    c4cc:	0005883a 	mov	r2,zero
    c4d0:	0007883a 	mov	r3,zero
    c4d4:	003e8906 	br	befc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700befc>
    c4d8:	197ff804 	addi	r5,r3,-32
    c4dc:	01000804 	movi	r4,32
    c4e0:	414ad83a 	srl	r5,r8,r5
    c4e4:	19002426 	beq	r3,r4,c578 <__adddf3+0x89c>
    c4e8:	01001004 	movi	r4,64
    c4ec:	20c7c83a 	sub	r3,r4,r3
    c4f0:	40c6983a 	sll	r3,r8,r3
    c4f4:	1c46b03a 	or	r3,r3,r17
    c4f8:	1806c03a 	cmpne	r3,r3,zero
    c4fc:	28e2b03a 	or	r17,r5,r3
    c500:	0007883a 	mov	r3,zero
    c504:	003f2306 	br	c194 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c194>
    c508:	0007883a 	mov	r3,zero
    c50c:	5811883a 	mov	r8,r11
    c510:	00bfffc4 	movi	r2,-1
    c514:	0401ffc4 	movi	r16,2047
    c518:	003e7806 	br	befc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700befc>
    c51c:	4462b03a 	or	r17,r8,r17
    c520:	8822c03a 	cmpne	r17,r17,zero
    c524:	0009883a 	mov	r4,zero
    c528:	003fa006 	br	c3ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c3ac>
    c52c:	4811883a 	mov	r8,r9
    c530:	3023883a 	mov	r17,r6
    c534:	0401ffc4 	movi	r16,2047
    c538:	003e0706 	br	bd58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd58>
    c53c:	4811883a 	mov	r8,r9
    c540:	3023883a 	mov	r17,r6
    c544:	003e0406 	br	bd58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd58>
    c548:	21fff804 	addi	r7,r4,-32
    c54c:	01400804 	movi	r5,32
    c550:	41ced83a 	srl	r7,r8,r7
    c554:	21400a26 	beq	r4,r5,c580 <__adddf3+0x8a4>
    c558:	01401004 	movi	r5,64
    c55c:	2909c83a 	sub	r4,r5,r4
    c560:	4108983a 	sll	r4,r8,r4
    c564:	2448b03a 	or	r4,r4,r17
    c568:	2008c03a 	cmpne	r4,r4,zero
    c56c:	3922b03a 	or	r17,r7,r4
    c570:	0009883a 	mov	r4,zero
    c574:	003f8d06 	br	c3ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c3ac>
    c578:	0007883a 	mov	r3,zero
    c57c:	003fdd06 	br	c4f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c4f4>
    c580:	0009883a 	mov	r4,zero
    c584:	003ff706 	br	c564 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c564>

0000c588 <__divdf3>:
    c588:	defff204 	addi	sp,sp,-56
    c58c:	dd400915 	stw	r21,36(sp)
    c590:	282ad53a 	srli	r21,r5,20
    c594:	dd000815 	stw	r20,32(sp)
    c598:	2828d7fa 	srli	r20,r5,31
    c59c:	dc000415 	stw	r16,16(sp)
    c5a0:	04000434 	movhi	r16,16
    c5a4:	df000c15 	stw	fp,48(sp)
    c5a8:	843fffc4 	addi	r16,r16,-1
    c5ac:	dfc00d15 	stw	ra,52(sp)
    c5b0:	ddc00b15 	stw	r23,44(sp)
    c5b4:	dd800a15 	stw	r22,40(sp)
    c5b8:	dcc00715 	stw	r19,28(sp)
    c5bc:	dc800615 	stw	r18,24(sp)
    c5c0:	dc400515 	stw	r17,20(sp)
    c5c4:	ad41ffcc 	andi	r21,r21,2047
    c5c8:	2c20703a 	and	r16,r5,r16
    c5cc:	a7003fcc 	andi	fp,r20,255
    c5d0:	a8006126 	beq	r21,zero,c758 <__divdf3+0x1d0>
    c5d4:	0081ffc4 	movi	r2,2047
    c5d8:	2025883a 	mov	r18,r4
    c5dc:	a8803726 	beq	r21,r2,c6bc <__divdf3+0x134>
    c5e0:	80800434 	orhi	r2,r16,16
    c5e4:	100490fa 	slli	r2,r2,3
    c5e8:	2020d77a 	srli	r16,r4,29
    c5ec:	202490fa 	slli	r18,r4,3
    c5f0:	ad7f0044 	addi	r21,r21,-1023
    c5f4:	80a0b03a 	or	r16,r16,r2
    c5f8:	0027883a 	mov	r19,zero
    c5fc:	0013883a 	mov	r9,zero
    c600:	3804d53a 	srli	r2,r7,20
    c604:	382cd7fa 	srli	r22,r7,31
    c608:	04400434 	movhi	r17,16
    c60c:	8c7fffc4 	addi	r17,r17,-1
    c610:	1081ffcc 	andi	r2,r2,2047
    c614:	3011883a 	mov	r8,r6
    c618:	3c62703a 	and	r17,r7,r17
    c61c:	b5c03fcc 	andi	r23,r22,255
    c620:	10006c26 	beq	r2,zero,c7d4 <__divdf3+0x24c>
    c624:	00c1ffc4 	movi	r3,2047
    c628:	10c06426 	beq	r2,r3,c7bc <__divdf3+0x234>
    c62c:	88c00434 	orhi	r3,r17,16
    c630:	180690fa 	slli	r3,r3,3
    c634:	3022d77a 	srli	r17,r6,29
    c638:	301090fa 	slli	r8,r6,3
    c63c:	10bf0044 	addi	r2,r2,-1023
    c640:	88e2b03a 	or	r17,r17,r3
    c644:	000f883a 	mov	r7,zero
    c648:	a58cf03a 	xor	r6,r20,r22
    c64c:	3cc8b03a 	or	r4,r7,r19
    c650:	a8abc83a 	sub	r21,r21,r2
    c654:	008003c4 	movi	r2,15
    c658:	3007883a 	mov	r3,r6
    c65c:	34c03fcc 	andi	r19,r6,255
    c660:	11009036 	bltu	r2,r4,c8a4 <__divdf3+0x31c>
    c664:	200890ba 	slli	r4,r4,2
    c668:	00800074 	movhi	r2,1
    c66c:	10b19f04 	addi	r2,r2,-14724
    c670:	2089883a 	add	r4,r4,r2
    c674:	20800017 	ldw	r2,0(r4)
    c678:	1000683a 	jmp	r2
    c67c:	0000c8a4 	muli	zero,zero,802
    c680:	0000c6f4 	movhi	zero,795
    c684:	0000c894 	movui	zero,802
    c688:	0000c6e8 	cmpgeui	zero,zero,795
    c68c:	0000c894 	movui	zero,802
    c690:	0000c868 	cmpgeui	zero,zero,801
    c694:	0000c894 	movui	zero,802
    c698:	0000c6e8 	cmpgeui	zero,zero,795
    c69c:	0000c6f4 	movhi	zero,795
    c6a0:	0000c6f4 	movhi	zero,795
    c6a4:	0000c868 	cmpgeui	zero,zero,801
    c6a8:	0000c6e8 	cmpgeui	zero,zero,795
    c6ac:	0000c6d8 	cmpnei	zero,zero,795
    c6b0:	0000c6d8 	cmpnei	zero,zero,795
    c6b4:	0000c6d8 	cmpnei	zero,zero,795
    c6b8:	0000cb88 	cmpgei	zero,zero,814
    c6bc:	2404b03a 	or	r2,r4,r16
    c6c0:	1000661e 	bne	r2,zero,c85c <__divdf3+0x2d4>
    c6c4:	04c00204 	movi	r19,8
    c6c8:	0021883a 	mov	r16,zero
    c6cc:	0025883a 	mov	r18,zero
    c6d0:	02400084 	movi	r9,2
    c6d4:	003fca06 	br	c600 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c600>
    c6d8:	8023883a 	mov	r17,r16
    c6dc:	9011883a 	mov	r8,r18
    c6e0:	e02f883a 	mov	r23,fp
    c6e4:	480f883a 	mov	r7,r9
    c6e8:	00800084 	movi	r2,2
    c6ec:	3881311e 	bne	r7,r2,cbb4 <__divdf3+0x62c>
    c6f0:	b827883a 	mov	r19,r23
    c6f4:	98c0004c 	andi	r3,r19,1
    c6f8:	0081ffc4 	movi	r2,2047
    c6fc:	000b883a 	mov	r5,zero
    c700:	0025883a 	mov	r18,zero
    c704:	1004953a 	slli	r2,r2,20
    c708:	18c03fcc 	andi	r3,r3,255
    c70c:	04400434 	movhi	r17,16
    c710:	8c7fffc4 	addi	r17,r17,-1
    c714:	180697fa 	slli	r3,r3,31
    c718:	2c4a703a 	and	r5,r5,r17
    c71c:	288ab03a 	or	r5,r5,r2
    c720:	28c6b03a 	or	r3,r5,r3
    c724:	9005883a 	mov	r2,r18
    c728:	dfc00d17 	ldw	ra,52(sp)
    c72c:	df000c17 	ldw	fp,48(sp)
    c730:	ddc00b17 	ldw	r23,44(sp)
    c734:	dd800a17 	ldw	r22,40(sp)
    c738:	dd400917 	ldw	r21,36(sp)
    c73c:	dd000817 	ldw	r20,32(sp)
    c740:	dcc00717 	ldw	r19,28(sp)
    c744:	dc800617 	ldw	r18,24(sp)
    c748:	dc400517 	ldw	r17,20(sp)
    c74c:	dc000417 	ldw	r16,16(sp)
    c750:	dec00e04 	addi	sp,sp,56
    c754:	f800283a 	ret
    c758:	2404b03a 	or	r2,r4,r16
    c75c:	2027883a 	mov	r19,r4
    c760:	10003926 	beq	r2,zero,c848 <__divdf3+0x2c0>
    c764:	80012e26 	beq	r16,zero,cc20 <__divdf3+0x698>
    c768:	8009883a 	mov	r4,r16
    c76c:	d9800315 	stw	r6,12(sp)
    c770:	d9c00215 	stw	r7,8(sp)
    c774:	000e2e00 	call	e2e0 <__clzsi2>
    c778:	d9800317 	ldw	r6,12(sp)
    c77c:	d9c00217 	ldw	r7,8(sp)
    c780:	113ffd44 	addi	r4,r2,-11
    c784:	00c00704 	movi	r3,28
    c788:	19012116 	blt	r3,r4,cc10 <__divdf3+0x688>
    c78c:	00c00744 	movi	r3,29
    c790:	147ffe04 	addi	r17,r2,-8
    c794:	1907c83a 	sub	r3,r3,r4
    c798:	8460983a 	sll	r16,r16,r17
    c79c:	98c6d83a 	srl	r3,r19,r3
    c7a0:	9c64983a 	sll	r18,r19,r17
    c7a4:	1c20b03a 	or	r16,r3,r16
    c7a8:	1080fcc4 	addi	r2,r2,1011
    c7ac:	00abc83a 	sub	r21,zero,r2
    c7b0:	0027883a 	mov	r19,zero
    c7b4:	0013883a 	mov	r9,zero
    c7b8:	003f9106 	br	c600 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c600>
    c7bc:	3446b03a 	or	r3,r6,r17
    c7c0:	18001f1e 	bne	r3,zero,c840 <__divdf3+0x2b8>
    c7c4:	0023883a 	mov	r17,zero
    c7c8:	0011883a 	mov	r8,zero
    c7cc:	01c00084 	movi	r7,2
    c7d0:	003f9d06 	br	c648 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c648>
    c7d4:	3446b03a 	or	r3,r6,r17
    c7d8:	18001526 	beq	r3,zero,c830 <__divdf3+0x2a8>
    c7dc:	88011b26 	beq	r17,zero,cc4c <__divdf3+0x6c4>
    c7e0:	8809883a 	mov	r4,r17
    c7e4:	d9800315 	stw	r6,12(sp)
    c7e8:	da400115 	stw	r9,4(sp)
    c7ec:	000e2e00 	call	e2e0 <__clzsi2>
    c7f0:	d9800317 	ldw	r6,12(sp)
    c7f4:	da400117 	ldw	r9,4(sp)
    c7f8:	113ffd44 	addi	r4,r2,-11
    c7fc:	00c00704 	movi	r3,28
    c800:	19010e16 	blt	r3,r4,cc3c <__divdf3+0x6b4>
    c804:	00c00744 	movi	r3,29
    c808:	123ffe04 	addi	r8,r2,-8
    c80c:	1907c83a 	sub	r3,r3,r4
    c810:	8a22983a 	sll	r17,r17,r8
    c814:	30c6d83a 	srl	r3,r6,r3
    c818:	3210983a 	sll	r8,r6,r8
    c81c:	1c62b03a 	or	r17,r3,r17
    c820:	1080fcc4 	addi	r2,r2,1011
    c824:	0085c83a 	sub	r2,zero,r2
    c828:	000f883a 	mov	r7,zero
    c82c:	003f8606 	br	c648 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c648>
    c830:	0023883a 	mov	r17,zero
    c834:	0011883a 	mov	r8,zero
    c838:	01c00044 	movi	r7,1
    c83c:	003f8206 	br	c648 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c648>
    c840:	01c000c4 	movi	r7,3
    c844:	003f8006 	br	c648 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c648>
    c848:	04c00104 	movi	r19,4
    c84c:	0021883a 	mov	r16,zero
    c850:	0025883a 	mov	r18,zero
    c854:	02400044 	movi	r9,1
    c858:	003f6906 	br	c600 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c600>
    c85c:	04c00304 	movi	r19,12
    c860:	024000c4 	movi	r9,3
    c864:	003f6606 	br	c600 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c600>
    c868:	01400434 	movhi	r5,16
    c86c:	0007883a 	mov	r3,zero
    c870:	297fffc4 	addi	r5,r5,-1
    c874:	04bfffc4 	movi	r18,-1
    c878:	0081ffc4 	movi	r2,2047
    c87c:	003fa106 	br	c704 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c704>
    c880:	00c00044 	movi	r3,1
    c884:	1887c83a 	sub	r3,r3,r2
    c888:	01000e04 	movi	r4,56
    c88c:	20c1210e 	bge	r4,r3,cd14 <__divdf3+0x78c>
    c890:	98c0004c 	andi	r3,r19,1
    c894:	0005883a 	mov	r2,zero
    c898:	000b883a 	mov	r5,zero
    c89c:	0025883a 	mov	r18,zero
    c8a0:	003f9806 	br	c704 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c704>
    c8a4:	8c00fd36 	bltu	r17,r16,cc9c <__divdf3+0x714>
    c8a8:	8440fb26 	beq	r16,r17,cc98 <__divdf3+0x710>
    c8ac:	8007883a 	mov	r3,r16
    c8b0:	ad7fffc4 	addi	r21,r21,-1
    c8b4:	0021883a 	mov	r16,zero
    c8b8:	4004d63a 	srli	r2,r8,24
    c8bc:	8822923a 	slli	r17,r17,8
    c8c0:	1809883a 	mov	r4,r3
    c8c4:	402c923a 	slli	r22,r8,8
    c8c8:	88b8b03a 	or	fp,r17,r2
    c8cc:	e028d43a 	srli	r20,fp,16
    c8d0:	d8c00015 	stw	r3,0(sp)
    c8d4:	e5ffffcc 	andi	r23,fp,65535
    c8d8:	a00b883a 	mov	r5,r20
    c8dc:	000bc200 	call	bc20 <__udivsi3>
    c8e0:	d8c00017 	ldw	r3,0(sp)
    c8e4:	a00b883a 	mov	r5,r20
    c8e8:	d8800315 	stw	r2,12(sp)
    c8ec:	1809883a 	mov	r4,r3
    c8f0:	000bc840 	call	bc84 <__umodsi3>
    c8f4:	d9800317 	ldw	r6,12(sp)
    c8f8:	1006943a 	slli	r3,r2,16
    c8fc:	9004d43a 	srli	r2,r18,16
    c900:	b9a3383a 	mul	r17,r23,r6
    c904:	10c4b03a 	or	r2,r2,r3
    c908:	1440062e 	bgeu	r2,r17,c924 <__divdf3+0x39c>
    c90c:	1705883a 	add	r2,r2,fp
    c910:	30ffffc4 	addi	r3,r6,-1
    c914:	1700ee36 	bltu	r2,fp,ccd0 <__divdf3+0x748>
    c918:	1440ed2e 	bgeu	r2,r17,ccd0 <__divdf3+0x748>
    c91c:	31bfff84 	addi	r6,r6,-2
    c920:	1705883a 	add	r2,r2,fp
    c924:	1463c83a 	sub	r17,r2,r17
    c928:	a00b883a 	mov	r5,r20
    c92c:	8809883a 	mov	r4,r17
    c930:	d9800315 	stw	r6,12(sp)
    c934:	000bc200 	call	bc20 <__udivsi3>
    c938:	a00b883a 	mov	r5,r20
    c93c:	8809883a 	mov	r4,r17
    c940:	d8800215 	stw	r2,8(sp)
    c944:	000bc840 	call	bc84 <__umodsi3>
    c948:	d9c00217 	ldw	r7,8(sp)
    c94c:	1004943a 	slli	r2,r2,16
    c950:	94bfffcc 	andi	r18,r18,65535
    c954:	b9d1383a 	mul	r8,r23,r7
    c958:	90a4b03a 	or	r18,r18,r2
    c95c:	d9800317 	ldw	r6,12(sp)
    c960:	9200062e 	bgeu	r18,r8,c97c <__divdf3+0x3f4>
    c964:	9725883a 	add	r18,r18,fp
    c968:	38bfffc4 	addi	r2,r7,-1
    c96c:	9700d636 	bltu	r18,fp,ccc8 <__divdf3+0x740>
    c970:	9200d52e 	bgeu	r18,r8,ccc8 <__divdf3+0x740>
    c974:	39ffff84 	addi	r7,r7,-2
    c978:	9725883a 	add	r18,r18,fp
    c97c:	3004943a 	slli	r2,r6,16
    c980:	b012d43a 	srli	r9,r22,16
    c984:	b1bfffcc 	andi	r6,r22,65535
    c988:	11e2b03a 	or	r17,r2,r7
    c98c:	8806d43a 	srli	r3,r17,16
    c990:	893fffcc 	andi	r4,r17,65535
    c994:	218b383a 	mul	r5,r4,r6
    c998:	30c5383a 	mul	r2,r6,r3
    c99c:	2249383a 	mul	r4,r4,r9
    c9a0:	280ed43a 	srli	r7,r5,16
    c9a4:	9225c83a 	sub	r18,r18,r8
    c9a8:	2089883a 	add	r4,r4,r2
    c9ac:	3909883a 	add	r4,r7,r4
    c9b0:	1a47383a 	mul	r3,r3,r9
    c9b4:	2080022e 	bgeu	r4,r2,c9c0 <__divdf3+0x438>
    c9b8:	00800074 	movhi	r2,1
    c9bc:	1887883a 	add	r3,r3,r2
    c9c0:	2004d43a 	srli	r2,r4,16
    c9c4:	2008943a 	slli	r4,r4,16
    c9c8:	297fffcc 	andi	r5,r5,65535
    c9cc:	10c7883a 	add	r3,r2,r3
    c9d0:	2149883a 	add	r4,r4,r5
    c9d4:	90c0a536 	bltu	r18,r3,cc6c <__divdf3+0x6e4>
    c9d8:	90c0bf26 	beq	r18,r3,ccd8 <__divdf3+0x750>
    c9dc:	90c7c83a 	sub	r3,r18,r3
    c9e0:	810fc83a 	sub	r7,r16,r4
    c9e4:	81e5803a 	cmpltu	r18,r16,r7
    c9e8:	1ca5c83a 	sub	r18,r3,r18
    c9ec:	e480c126 	beq	fp,r18,ccf4 <__divdf3+0x76c>
    c9f0:	a00b883a 	mov	r5,r20
    c9f4:	9009883a 	mov	r4,r18
    c9f8:	d9800315 	stw	r6,12(sp)
    c9fc:	d9c00215 	stw	r7,8(sp)
    ca00:	da400115 	stw	r9,4(sp)
    ca04:	000bc200 	call	bc20 <__udivsi3>
    ca08:	a00b883a 	mov	r5,r20
    ca0c:	9009883a 	mov	r4,r18
    ca10:	d8800015 	stw	r2,0(sp)
    ca14:	000bc840 	call	bc84 <__umodsi3>
    ca18:	d9c00217 	ldw	r7,8(sp)
    ca1c:	da000017 	ldw	r8,0(sp)
    ca20:	1006943a 	slli	r3,r2,16
    ca24:	3804d43a 	srli	r2,r7,16
    ca28:	ba21383a 	mul	r16,r23,r8
    ca2c:	d9800317 	ldw	r6,12(sp)
    ca30:	10c4b03a 	or	r2,r2,r3
    ca34:	da400117 	ldw	r9,4(sp)
    ca38:	1400062e 	bgeu	r2,r16,ca54 <__divdf3+0x4cc>
    ca3c:	1705883a 	add	r2,r2,fp
    ca40:	40ffffc4 	addi	r3,r8,-1
    ca44:	1700ad36 	bltu	r2,fp,ccfc <__divdf3+0x774>
    ca48:	1400ac2e 	bgeu	r2,r16,ccfc <__divdf3+0x774>
    ca4c:	423fff84 	addi	r8,r8,-2
    ca50:	1705883a 	add	r2,r2,fp
    ca54:	1421c83a 	sub	r16,r2,r16
    ca58:	a00b883a 	mov	r5,r20
    ca5c:	8009883a 	mov	r4,r16
    ca60:	d9800315 	stw	r6,12(sp)
    ca64:	d9c00215 	stw	r7,8(sp)
    ca68:	da000015 	stw	r8,0(sp)
    ca6c:	da400115 	stw	r9,4(sp)
    ca70:	000bc200 	call	bc20 <__udivsi3>
    ca74:	8009883a 	mov	r4,r16
    ca78:	a00b883a 	mov	r5,r20
    ca7c:	1025883a 	mov	r18,r2
    ca80:	000bc840 	call	bc84 <__umodsi3>
    ca84:	d9c00217 	ldw	r7,8(sp)
    ca88:	1004943a 	slli	r2,r2,16
    ca8c:	bcaf383a 	mul	r23,r23,r18
    ca90:	393fffcc 	andi	r4,r7,65535
    ca94:	2088b03a 	or	r4,r4,r2
    ca98:	d9800317 	ldw	r6,12(sp)
    ca9c:	da000017 	ldw	r8,0(sp)
    caa0:	da400117 	ldw	r9,4(sp)
    caa4:	25c0062e 	bgeu	r4,r23,cac0 <__divdf3+0x538>
    caa8:	2709883a 	add	r4,r4,fp
    caac:	90bfffc4 	addi	r2,r18,-1
    cab0:	27009436 	bltu	r4,fp,cd04 <__divdf3+0x77c>
    cab4:	25c0932e 	bgeu	r4,r23,cd04 <__divdf3+0x77c>
    cab8:	94bfff84 	addi	r18,r18,-2
    cabc:	2709883a 	add	r4,r4,fp
    cac0:	4004943a 	slli	r2,r8,16
    cac4:	25efc83a 	sub	r23,r4,r23
    cac8:	1490b03a 	or	r8,r2,r18
    cacc:	4008d43a 	srli	r4,r8,16
    cad0:	40ffffcc 	andi	r3,r8,65535
    cad4:	30c5383a 	mul	r2,r6,r3
    cad8:	1a47383a 	mul	r3,r3,r9
    cadc:	310d383a 	mul	r6,r6,r4
    cae0:	100ad43a 	srli	r5,r2,16
    cae4:	4913383a 	mul	r9,r9,r4
    cae8:	1987883a 	add	r3,r3,r6
    caec:	28c7883a 	add	r3,r5,r3
    caf0:	1980022e 	bgeu	r3,r6,cafc <__divdf3+0x574>
    caf4:	01000074 	movhi	r4,1
    caf8:	4913883a 	add	r9,r9,r4
    cafc:	1808d43a 	srli	r4,r3,16
    cb00:	1806943a 	slli	r3,r3,16
    cb04:	10bfffcc 	andi	r2,r2,65535
    cb08:	2253883a 	add	r9,r4,r9
    cb0c:	1887883a 	add	r3,r3,r2
    cb10:	ba403836 	bltu	r23,r9,cbf4 <__divdf3+0x66c>
    cb14:	ba403626 	beq	r23,r9,cbf0 <__divdf3+0x668>
    cb18:	42000054 	ori	r8,r8,1
    cb1c:	a880ffc4 	addi	r2,r21,1023
    cb20:	00bf570e 	bge	zero,r2,c880 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c880>
    cb24:	40c001cc 	andi	r3,r8,7
    cb28:	18000726 	beq	r3,zero,cb48 <__divdf3+0x5c0>
    cb2c:	40c003cc 	andi	r3,r8,15
    cb30:	01000104 	movi	r4,4
    cb34:	19000426 	beq	r3,r4,cb48 <__divdf3+0x5c0>
    cb38:	4107883a 	add	r3,r8,r4
    cb3c:	1a11803a 	cmpltu	r8,r3,r8
    cb40:	8a23883a 	add	r17,r17,r8
    cb44:	1811883a 	mov	r8,r3
    cb48:	88c0402c 	andhi	r3,r17,256
    cb4c:	18000426 	beq	r3,zero,cb60 <__divdf3+0x5d8>
    cb50:	00ffc034 	movhi	r3,65280
    cb54:	18ffffc4 	addi	r3,r3,-1
    cb58:	a8810004 	addi	r2,r21,1024
    cb5c:	88e2703a 	and	r17,r17,r3
    cb60:	00c1ff84 	movi	r3,2046
    cb64:	18bee316 	blt	r3,r2,c6f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c6f4>
    cb68:	8824977a 	slli	r18,r17,29
    cb6c:	4010d0fa 	srli	r8,r8,3
    cb70:	8822927a 	slli	r17,r17,9
    cb74:	1081ffcc 	andi	r2,r2,2047
    cb78:	9224b03a 	or	r18,r18,r8
    cb7c:	880ad33a 	srli	r5,r17,12
    cb80:	98c0004c 	andi	r3,r19,1
    cb84:	003edf06 	br	c704 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c704>
    cb88:	8080022c 	andhi	r2,r16,8
    cb8c:	10001226 	beq	r2,zero,cbd8 <__divdf3+0x650>
    cb90:	8880022c 	andhi	r2,r17,8
    cb94:	1000101e 	bne	r2,zero,cbd8 <__divdf3+0x650>
    cb98:	00800434 	movhi	r2,16
    cb9c:	89400234 	orhi	r5,r17,8
    cba0:	10bfffc4 	addi	r2,r2,-1
    cba4:	b007883a 	mov	r3,r22
    cba8:	288a703a 	and	r5,r5,r2
    cbac:	4025883a 	mov	r18,r8
    cbb0:	003f3106 	br	c878 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c878>
    cbb4:	008000c4 	movi	r2,3
    cbb8:	3880a626 	beq	r7,r2,ce54 <__divdf3+0x8cc>
    cbbc:	00800044 	movi	r2,1
    cbc0:	3880521e 	bne	r7,r2,cd0c <__divdf3+0x784>
    cbc4:	b807883a 	mov	r3,r23
    cbc8:	0005883a 	mov	r2,zero
    cbcc:	000b883a 	mov	r5,zero
    cbd0:	0025883a 	mov	r18,zero
    cbd4:	003ecb06 	br	c704 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c704>
    cbd8:	00800434 	movhi	r2,16
    cbdc:	81400234 	orhi	r5,r16,8
    cbe0:	10bfffc4 	addi	r2,r2,-1
    cbe4:	a007883a 	mov	r3,r20
    cbe8:	288a703a 	and	r5,r5,r2
    cbec:	003f2206 	br	c878 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c878>
    cbf0:	183fca26 	beq	r3,zero,cb1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb1c>
    cbf4:	e5ef883a 	add	r23,fp,r23
    cbf8:	40bfffc4 	addi	r2,r8,-1
    cbfc:	bf00392e 	bgeu	r23,fp,cce4 <__divdf3+0x75c>
    cc00:	1011883a 	mov	r8,r2
    cc04:	ba7fc41e 	bne	r23,r9,cb18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb18>
    cc08:	b0ffc31e 	bne	r22,r3,cb18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb18>
    cc0c:	003fc306 	br	cb1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb1c>
    cc10:	143ff604 	addi	r16,r2,-40
    cc14:	9c20983a 	sll	r16,r19,r16
    cc18:	0025883a 	mov	r18,zero
    cc1c:	003ee206 	br	c7a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c7a8>
    cc20:	d9800315 	stw	r6,12(sp)
    cc24:	d9c00215 	stw	r7,8(sp)
    cc28:	000e2e00 	call	e2e0 <__clzsi2>
    cc2c:	10800804 	addi	r2,r2,32
    cc30:	d9c00217 	ldw	r7,8(sp)
    cc34:	d9800317 	ldw	r6,12(sp)
    cc38:	003ed106 	br	c780 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c780>
    cc3c:	147ff604 	addi	r17,r2,-40
    cc40:	3462983a 	sll	r17,r6,r17
    cc44:	0011883a 	mov	r8,zero
    cc48:	003ef506 	br	c820 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c820>
    cc4c:	3009883a 	mov	r4,r6
    cc50:	d9800315 	stw	r6,12(sp)
    cc54:	da400115 	stw	r9,4(sp)
    cc58:	000e2e00 	call	e2e0 <__clzsi2>
    cc5c:	10800804 	addi	r2,r2,32
    cc60:	da400117 	ldw	r9,4(sp)
    cc64:	d9800317 	ldw	r6,12(sp)
    cc68:	003ee306 	br	c7f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c7f8>
    cc6c:	85a1883a 	add	r16,r16,r22
    cc70:	8585803a 	cmpltu	r2,r16,r22
    cc74:	1705883a 	add	r2,r2,fp
    cc78:	14a5883a 	add	r18,r2,r18
    cc7c:	88bfffc4 	addi	r2,r17,-1
    cc80:	e4800c2e 	bgeu	fp,r18,ccb4 <__divdf3+0x72c>
    cc84:	90c03e36 	bltu	r18,r3,cd80 <__divdf3+0x7f8>
    cc88:	1c806926 	beq	r3,r18,ce30 <__divdf3+0x8a8>
    cc8c:	90c7c83a 	sub	r3,r18,r3
    cc90:	1023883a 	mov	r17,r2
    cc94:	003f5206 	br	c9e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c9e0>
    cc98:	923f0436 	bltu	r18,r8,c8ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c8ac>
    cc9c:	800897fa 	slli	r4,r16,31
    cca0:	9004d07a 	srli	r2,r18,1
    cca4:	8006d07a 	srli	r3,r16,1
    cca8:	902097fa 	slli	r16,r18,31
    ccac:	20a4b03a 	or	r18,r4,r2
    ccb0:	003f0106 	br	c8b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c8b8>
    ccb4:	e4bff51e 	bne	fp,r18,cc8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cc8c>
    ccb8:	85bff22e 	bgeu	r16,r22,cc84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cc84>
    ccbc:	e0c7c83a 	sub	r3,fp,r3
    ccc0:	1023883a 	mov	r17,r2
    ccc4:	003f4606 	br	c9e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c9e0>
    ccc8:	100f883a 	mov	r7,r2
    cccc:	003f2b06 	br	c97c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c97c>
    ccd0:	180d883a 	mov	r6,r3
    ccd4:	003f1306 	br	c924 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c924>
    ccd8:	813fe436 	bltu	r16,r4,cc6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cc6c>
    ccdc:	0007883a 	mov	r3,zero
    cce0:	003f3f06 	br	c9e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c9e0>
    cce4:	ba402c36 	bltu	r23,r9,cd98 <__divdf3+0x810>
    cce8:	4dc05426 	beq	r9,r23,ce3c <__divdf3+0x8b4>
    ccec:	1011883a 	mov	r8,r2
    ccf0:	003f8906 	br	cb18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb18>
    ccf4:	023fffc4 	movi	r8,-1
    ccf8:	003f8806 	br	cb1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb1c>
    ccfc:	1811883a 	mov	r8,r3
    cd00:	003f5406 	br	ca54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca54>
    cd04:	1025883a 	mov	r18,r2
    cd08:	003f6d06 	br	cac0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cac0>
    cd0c:	b827883a 	mov	r19,r23
    cd10:	003f8206 	br	cb1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb1c>
    cd14:	010007c4 	movi	r4,31
    cd18:	20c02616 	blt	r4,r3,cdb4 <__divdf3+0x82c>
    cd1c:	00800804 	movi	r2,32
    cd20:	10c5c83a 	sub	r2,r2,r3
    cd24:	888a983a 	sll	r5,r17,r2
    cd28:	40c8d83a 	srl	r4,r8,r3
    cd2c:	4084983a 	sll	r2,r8,r2
    cd30:	88e2d83a 	srl	r17,r17,r3
    cd34:	2906b03a 	or	r3,r5,r4
    cd38:	1004c03a 	cmpne	r2,r2,zero
    cd3c:	1886b03a 	or	r3,r3,r2
    cd40:	188001cc 	andi	r2,r3,7
    cd44:	10000726 	beq	r2,zero,cd64 <__divdf3+0x7dc>
    cd48:	188003cc 	andi	r2,r3,15
    cd4c:	01000104 	movi	r4,4
    cd50:	11000426 	beq	r2,r4,cd64 <__divdf3+0x7dc>
    cd54:	1805883a 	mov	r2,r3
    cd58:	10c00104 	addi	r3,r2,4
    cd5c:	1885803a 	cmpltu	r2,r3,r2
    cd60:	88a3883a 	add	r17,r17,r2
    cd64:	8880202c 	andhi	r2,r17,128
    cd68:	10002726 	beq	r2,zero,ce08 <__divdf3+0x880>
    cd6c:	98c0004c 	andi	r3,r19,1
    cd70:	00800044 	movi	r2,1
    cd74:	000b883a 	mov	r5,zero
    cd78:	0025883a 	mov	r18,zero
    cd7c:	003e6106 	br	c704 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c704>
    cd80:	85a1883a 	add	r16,r16,r22
    cd84:	8585803a 	cmpltu	r2,r16,r22
    cd88:	1705883a 	add	r2,r2,fp
    cd8c:	14a5883a 	add	r18,r2,r18
    cd90:	8c7fff84 	addi	r17,r17,-2
    cd94:	003f1106 	br	c9dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c9dc>
    cd98:	b589883a 	add	r4,r22,r22
    cd9c:	25ad803a 	cmpltu	r22,r4,r22
    cda0:	b739883a 	add	fp,r22,fp
    cda4:	40bfff84 	addi	r2,r8,-2
    cda8:	bf2f883a 	add	r23,r23,fp
    cdac:	202d883a 	mov	r22,r4
    cdb0:	003f9306 	br	cc00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cc00>
    cdb4:	013ff844 	movi	r4,-31
    cdb8:	2085c83a 	sub	r2,r4,r2
    cdbc:	8888d83a 	srl	r4,r17,r2
    cdc0:	00800804 	movi	r2,32
    cdc4:	18802126 	beq	r3,r2,ce4c <__divdf3+0x8c4>
    cdc8:	00801004 	movi	r2,64
    cdcc:	10c5c83a 	sub	r2,r2,r3
    cdd0:	8884983a 	sll	r2,r17,r2
    cdd4:	1204b03a 	or	r2,r2,r8
    cdd8:	1004c03a 	cmpne	r2,r2,zero
    cddc:	2084b03a 	or	r2,r4,r2
    cde0:	144001cc 	andi	r17,r2,7
    cde4:	88000d1e 	bne	r17,zero,ce1c <__divdf3+0x894>
    cde8:	000b883a 	mov	r5,zero
    cdec:	1024d0fa 	srli	r18,r2,3
    cdf0:	98c0004c 	andi	r3,r19,1
    cdf4:	0005883a 	mov	r2,zero
    cdf8:	9464b03a 	or	r18,r18,r17
    cdfc:	003e4106 	br	c704 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c704>
    ce00:	1007883a 	mov	r3,r2
    ce04:	0023883a 	mov	r17,zero
    ce08:	880a927a 	slli	r5,r17,9
    ce0c:	1805883a 	mov	r2,r3
    ce10:	8822977a 	slli	r17,r17,29
    ce14:	280ad33a 	srli	r5,r5,12
    ce18:	003ff406 	br	cdec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cdec>
    ce1c:	10c003cc 	andi	r3,r2,15
    ce20:	01000104 	movi	r4,4
    ce24:	193ff626 	beq	r3,r4,ce00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ce00>
    ce28:	0023883a 	mov	r17,zero
    ce2c:	003fca06 	br	cd58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cd58>
    ce30:	813fd336 	bltu	r16,r4,cd80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cd80>
    ce34:	1023883a 	mov	r17,r2
    ce38:	003fa806 	br	ccdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ccdc>
    ce3c:	b0ffd636 	bltu	r22,r3,cd98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cd98>
    ce40:	1011883a 	mov	r8,r2
    ce44:	b0ff341e 	bne	r22,r3,cb18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb18>
    ce48:	003f3406 	br	cb1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb1c>
    ce4c:	0005883a 	mov	r2,zero
    ce50:	003fe006 	br	cdd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cdd4>
    ce54:	00800434 	movhi	r2,16
    ce58:	89400234 	orhi	r5,r17,8
    ce5c:	10bfffc4 	addi	r2,r2,-1
    ce60:	b807883a 	mov	r3,r23
    ce64:	288a703a 	and	r5,r5,r2
    ce68:	4025883a 	mov	r18,r8
    ce6c:	003e8206 	br	c878 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c878>

0000ce70 <__eqdf2>:
    ce70:	2804d53a 	srli	r2,r5,20
    ce74:	3806d53a 	srli	r3,r7,20
    ce78:	02000434 	movhi	r8,16
    ce7c:	423fffc4 	addi	r8,r8,-1
    ce80:	1081ffcc 	andi	r2,r2,2047
    ce84:	0281ffc4 	movi	r10,2047
    ce88:	2a12703a 	and	r9,r5,r8
    ce8c:	18c1ffcc 	andi	r3,r3,2047
    ce90:	3a10703a 	and	r8,r7,r8
    ce94:	280ad7fa 	srli	r5,r5,31
    ce98:	380ed7fa 	srli	r7,r7,31
    ce9c:	12801026 	beq	r2,r10,cee0 <__eqdf2+0x70>
    cea0:	0281ffc4 	movi	r10,2047
    cea4:	1a800a26 	beq	r3,r10,ced0 <__eqdf2+0x60>
    cea8:	10c00226 	beq	r2,r3,ceb4 <__eqdf2+0x44>
    ceac:	00800044 	movi	r2,1
    ceb0:	f800283a 	ret
    ceb4:	4a3ffd1e 	bne	r9,r8,ceac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ceac>
    ceb8:	21bffc1e 	bne	r4,r6,ceac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ceac>
    cebc:	29c00c26 	beq	r5,r7,cef0 <__eqdf2+0x80>
    cec0:	103ffa1e 	bne	r2,zero,ceac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ceac>
    cec4:	2244b03a 	or	r2,r4,r9
    cec8:	1004c03a 	cmpne	r2,r2,zero
    cecc:	f800283a 	ret
    ced0:	3214b03a 	or	r10,r6,r8
    ced4:	503ff426 	beq	r10,zero,cea8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cea8>
    ced8:	00800044 	movi	r2,1
    cedc:	f800283a 	ret
    cee0:	2254b03a 	or	r10,r4,r9
    cee4:	503fee26 	beq	r10,zero,cea0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cea0>
    cee8:	00800044 	movi	r2,1
    ceec:	f800283a 	ret
    cef0:	0005883a 	mov	r2,zero
    cef4:	f800283a 	ret

0000cef8 <__gedf2>:
    cef8:	2804d53a 	srli	r2,r5,20
    cefc:	3806d53a 	srli	r3,r7,20
    cf00:	02000434 	movhi	r8,16
    cf04:	423fffc4 	addi	r8,r8,-1
    cf08:	1081ffcc 	andi	r2,r2,2047
    cf0c:	0241ffc4 	movi	r9,2047
    cf10:	2a14703a 	and	r10,r5,r8
    cf14:	18c1ffcc 	andi	r3,r3,2047
    cf18:	3a10703a 	and	r8,r7,r8
    cf1c:	280ad7fa 	srli	r5,r5,31
    cf20:	380ed7fa 	srli	r7,r7,31
    cf24:	12401d26 	beq	r2,r9,cf9c <__gedf2+0xa4>
    cf28:	0241ffc4 	movi	r9,2047
    cf2c:	1a401226 	beq	r3,r9,cf78 <__gedf2+0x80>
    cf30:	1000081e 	bne	r2,zero,cf54 <__gedf2+0x5c>
    cf34:	2296b03a 	or	r11,r4,r10
    cf38:	5813003a 	cmpeq	r9,r11,zero
    cf3c:	1800091e 	bne	r3,zero,cf64 <__gedf2+0x6c>
    cf40:	3218b03a 	or	r12,r6,r8
    cf44:	6000071e 	bne	r12,zero,cf64 <__gedf2+0x6c>
    cf48:	0005883a 	mov	r2,zero
    cf4c:	5800101e 	bne	r11,zero,cf90 <__gedf2+0x98>
    cf50:	f800283a 	ret
    cf54:	18000c1e 	bne	r3,zero,cf88 <__gedf2+0x90>
    cf58:	3212b03a 	or	r9,r6,r8
    cf5c:	48000c26 	beq	r9,zero,cf90 <__gedf2+0x98>
    cf60:	0013883a 	mov	r9,zero
    cf64:	39c03fcc 	andi	r7,r7,255
    cf68:	48000826 	beq	r9,zero,cf8c <__gedf2+0x94>
    cf6c:	38000926 	beq	r7,zero,cf94 <__gedf2+0x9c>
    cf70:	00800044 	movi	r2,1
    cf74:	f800283a 	ret
    cf78:	3212b03a 	or	r9,r6,r8
    cf7c:	483fec26 	beq	r9,zero,cf30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf30>
    cf80:	00bfff84 	movi	r2,-2
    cf84:	f800283a 	ret
    cf88:	39c03fcc 	andi	r7,r7,255
    cf8c:	29c00626 	beq	r5,r7,cfa8 <__gedf2+0xb0>
    cf90:	283ff726 	beq	r5,zero,cf70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf70>
    cf94:	00bfffc4 	movi	r2,-1
    cf98:	f800283a 	ret
    cf9c:	2292b03a 	or	r9,r4,r10
    cfa0:	483fe126 	beq	r9,zero,cf28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf28>
    cfa4:	003ff606 	br	cf80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf80>
    cfa8:	18bff916 	blt	r3,r2,cf90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf90>
    cfac:	10c00316 	blt	r2,r3,cfbc <__gedf2+0xc4>
    cfb0:	42bff736 	bltu	r8,r10,cf90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf90>
    cfb4:	52000326 	beq	r10,r8,cfc4 <__gedf2+0xcc>
    cfb8:	5200042e 	bgeu	r10,r8,cfcc <__gedf2+0xd4>
    cfbc:	283fec1e 	bne	r5,zero,cf70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf70>
    cfc0:	003ff406 	br	cf94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf94>
    cfc4:	313ff236 	bltu	r6,r4,cf90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf90>
    cfc8:	21bffc36 	bltu	r4,r6,cfbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cfbc>
    cfcc:	0005883a 	mov	r2,zero
    cfd0:	f800283a 	ret

0000cfd4 <__ledf2>:
    cfd4:	2804d53a 	srli	r2,r5,20
    cfd8:	3810d53a 	srli	r8,r7,20
    cfdc:	00c00434 	movhi	r3,16
    cfe0:	18ffffc4 	addi	r3,r3,-1
    cfe4:	1081ffcc 	andi	r2,r2,2047
    cfe8:	0241ffc4 	movi	r9,2047
    cfec:	28d4703a 	and	r10,r5,r3
    cff0:	4201ffcc 	andi	r8,r8,2047
    cff4:	38c6703a 	and	r3,r7,r3
    cff8:	280ad7fa 	srli	r5,r5,31
    cffc:	380ed7fa 	srli	r7,r7,31
    d000:	12401f26 	beq	r2,r9,d080 <__ledf2+0xac>
    d004:	0241ffc4 	movi	r9,2047
    d008:	42401426 	beq	r8,r9,d05c <__ledf2+0x88>
    d00c:	1000091e 	bne	r2,zero,d034 <__ledf2+0x60>
    d010:	2296b03a 	or	r11,r4,r10
    d014:	5813003a 	cmpeq	r9,r11,zero
    d018:	29403fcc 	andi	r5,r5,255
    d01c:	40000a1e 	bne	r8,zero,d048 <__ledf2+0x74>
    d020:	30d8b03a 	or	r12,r6,r3
    d024:	6000081e 	bne	r12,zero,d048 <__ledf2+0x74>
    d028:	0005883a 	mov	r2,zero
    d02c:	5800111e 	bne	r11,zero,d074 <__ledf2+0xa0>
    d030:	f800283a 	ret
    d034:	29403fcc 	andi	r5,r5,255
    d038:	40000c1e 	bne	r8,zero,d06c <__ledf2+0x98>
    d03c:	30d2b03a 	or	r9,r6,r3
    d040:	48000c26 	beq	r9,zero,d074 <__ledf2+0xa0>
    d044:	0013883a 	mov	r9,zero
    d048:	39c03fcc 	andi	r7,r7,255
    d04c:	48000826 	beq	r9,zero,d070 <__ledf2+0x9c>
    d050:	38001126 	beq	r7,zero,d098 <__ledf2+0xc4>
    d054:	00800044 	movi	r2,1
    d058:	f800283a 	ret
    d05c:	30d2b03a 	or	r9,r6,r3
    d060:	483fea26 	beq	r9,zero,d00c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d00c>
    d064:	00800084 	movi	r2,2
    d068:	f800283a 	ret
    d06c:	39c03fcc 	andi	r7,r7,255
    d070:	39400726 	beq	r7,r5,d090 <__ledf2+0xbc>
    d074:	2800081e 	bne	r5,zero,d098 <__ledf2+0xc4>
    d078:	00800044 	movi	r2,1
    d07c:	f800283a 	ret
    d080:	2292b03a 	or	r9,r4,r10
    d084:	483fdf26 	beq	r9,zero,d004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d004>
    d088:	00800084 	movi	r2,2
    d08c:	f800283a 	ret
    d090:	4080030e 	bge	r8,r2,d0a0 <__ledf2+0xcc>
    d094:	383fef26 	beq	r7,zero,d054 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d054>
    d098:	00bfffc4 	movi	r2,-1
    d09c:	f800283a 	ret
    d0a0:	123feb16 	blt	r2,r8,d050 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d050>
    d0a4:	1abff336 	bltu	r3,r10,d074 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d074>
    d0a8:	50c00326 	beq	r10,r3,d0b8 <__ledf2+0xe4>
    d0ac:	50c0042e 	bgeu	r10,r3,d0c0 <__ledf2+0xec>
    d0b0:	283fe81e 	bne	r5,zero,d054 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d054>
    d0b4:	003ff806 	br	d098 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d098>
    d0b8:	313fee36 	bltu	r6,r4,d074 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d074>
    d0bc:	21bffc36 	bltu	r4,r6,d0b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d0b0>
    d0c0:	0005883a 	mov	r2,zero
    d0c4:	f800283a 	ret

0000d0c8 <__muldf3>:
    d0c8:	defff304 	addi	sp,sp,-52
    d0cc:	2804d53a 	srli	r2,r5,20
    d0d0:	dd800915 	stw	r22,36(sp)
    d0d4:	282cd7fa 	srli	r22,r5,31
    d0d8:	dc000315 	stw	r16,12(sp)
    d0dc:	04000434 	movhi	r16,16
    d0e0:	dd400815 	stw	r21,32(sp)
    d0e4:	dc800515 	stw	r18,20(sp)
    d0e8:	843fffc4 	addi	r16,r16,-1
    d0ec:	dfc00c15 	stw	ra,48(sp)
    d0f0:	df000b15 	stw	fp,44(sp)
    d0f4:	ddc00a15 	stw	r23,40(sp)
    d0f8:	dd000715 	stw	r20,28(sp)
    d0fc:	dcc00615 	stw	r19,24(sp)
    d100:	dc400415 	stw	r17,16(sp)
    d104:	1481ffcc 	andi	r18,r2,2047
    d108:	2c20703a 	and	r16,r5,r16
    d10c:	b02b883a 	mov	r21,r22
    d110:	b2403fcc 	andi	r9,r22,255
    d114:	90006026 	beq	r18,zero,d298 <__muldf3+0x1d0>
    d118:	0081ffc4 	movi	r2,2047
    d11c:	2029883a 	mov	r20,r4
    d120:	90803626 	beq	r18,r2,d1fc <__muldf3+0x134>
    d124:	80800434 	orhi	r2,r16,16
    d128:	100490fa 	slli	r2,r2,3
    d12c:	2020d77a 	srli	r16,r4,29
    d130:	202890fa 	slli	r20,r4,3
    d134:	94bf0044 	addi	r18,r18,-1023
    d138:	80a0b03a 	or	r16,r16,r2
    d13c:	0027883a 	mov	r19,zero
    d140:	0039883a 	mov	fp,zero
    d144:	3804d53a 	srli	r2,r7,20
    d148:	382ed7fa 	srli	r23,r7,31
    d14c:	04400434 	movhi	r17,16
    d150:	8c7fffc4 	addi	r17,r17,-1
    d154:	1081ffcc 	andi	r2,r2,2047
    d158:	3011883a 	mov	r8,r6
    d15c:	3c62703a 	and	r17,r7,r17
    d160:	ba803fcc 	andi	r10,r23,255
    d164:	10006d26 	beq	r2,zero,d31c <__muldf3+0x254>
    d168:	00c1ffc4 	movi	r3,2047
    d16c:	10c06526 	beq	r2,r3,d304 <__muldf3+0x23c>
    d170:	88c00434 	orhi	r3,r17,16
    d174:	180690fa 	slli	r3,r3,3
    d178:	3022d77a 	srli	r17,r6,29
    d17c:	301090fa 	slli	r8,r6,3
    d180:	10bf0044 	addi	r2,r2,-1023
    d184:	88e2b03a 	or	r17,r17,r3
    d188:	000b883a 	mov	r5,zero
    d18c:	9085883a 	add	r2,r18,r2
    d190:	2cc8b03a 	or	r4,r5,r19
    d194:	00c003c4 	movi	r3,15
    d198:	bdacf03a 	xor	r22,r23,r22
    d19c:	12c00044 	addi	r11,r2,1
    d1a0:	19009936 	bltu	r3,r4,d408 <__muldf3+0x340>
    d1a4:	200890ba 	slli	r4,r4,2
    d1a8:	00c00074 	movhi	r3,1
    d1ac:	18f46f04 	addi	r3,r3,-11844
    d1b0:	20c9883a 	add	r4,r4,r3
    d1b4:	20c00017 	ldw	r3,0(r4)
    d1b8:	1800683a 	jmp	r3
    d1bc:	0000d408 	cmpgei	zero,zero,848
    d1c0:	0000d21c 	xori	zero,zero,840
    d1c4:	0000d21c 	xori	zero,zero,840
    d1c8:	0000d218 	cmpnei	zero,zero,840
    d1cc:	0000d3e4 	muli	zero,zero,847
    d1d0:	0000d3e4 	muli	zero,zero,847
    d1d4:	0000d3cc 	andi	zero,zero,847
    d1d8:	0000d218 	cmpnei	zero,zero,840
    d1dc:	0000d3e4 	muli	zero,zero,847
    d1e0:	0000d3cc 	andi	zero,zero,847
    d1e4:	0000d3e4 	muli	zero,zero,847
    d1e8:	0000d218 	cmpnei	zero,zero,840
    d1ec:	0000d3f4 	movhi	zero,847
    d1f0:	0000d3f4 	movhi	zero,847
    d1f4:	0000d3f4 	movhi	zero,847
    d1f8:	0000d610 	cmplti	zero,zero,856
    d1fc:	2404b03a 	or	r2,r4,r16
    d200:	10006f1e 	bne	r2,zero,d3c0 <__muldf3+0x2f8>
    d204:	04c00204 	movi	r19,8
    d208:	0021883a 	mov	r16,zero
    d20c:	0029883a 	mov	r20,zero
    d210:	07000084 	movi	fp,2
    d214:	003fcb06 	br	d144 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d144>
    d218:	502d883a 	mov	r22,r10
    d21c:	00800084 	movi	r2,2
    d220:	28805726 	beq	r5,r2,d380 <__muldf3+0x2b8>
    d224:	008000c4 	movi	r2,3
    d228:	28816626 	beq	r5,r2,d7c4 <__muldf3+0x6fc>
    d22c:	00800044 	movi	r2,1
    d230:	2881411e 	bne	r5,r2,d738 <__muldf3+0x670>
    d234:	b02b883a 	mov	r21,r22
    d238:	0005883a 	mov	r2,zero
    d23c:	000b883a 	mov	r5,zero
    d240:	0029883a 	mov	r20,zero
    d244:	1004953a 	slli	r2,r2,20
    d248:	a8c03fcc 	andi	r3,r21,255
    d24c:	04400434 	movhi	r17,16
    d250:	8c7fffc4 	addi	r17,r17,-1
    d254:	180697fa 	slli	r3,r3,31
    d258:	2c4a703a 	and	r5,r5,r17
    d25c:	288ab03a 	or	r5,r5,r2
    d260:	28c6b03a 	or	r3,r5,r3
    d264:	a005883a 	mov	r2,r20
    d268:	dfc00c17 	ldw	ra,48(sp)
    d26c:	df000b17 	ldw	fp,44(sp)
    d270:	ddc00a17 	ldw	r23,40(sp)
    d274:	dd800917 	ldw	r22,36(sp)
    d278:	dd400817 	ldw	r21,32(sp)
    d27c:	dd000717 	ldw	r20,28(sp)
    d280:	dcc00617 	ldw	r19,24(sp)
    d284:	dc800517 	ldw	r18,20(sp)
    d288:	dc400417 	ldw	r17,16(sp)
    d28c:	dc000317 	ldw	r16,12(sp)
    d290:	dec00d04 	addi	sp,sp,52
    d294:	f800283a 	ret
    d298:	2404b03a 	or	r2,r4,r16
    d29c:	2027883a 	mov	r19,r4
    d2a0:	10004226 	beq	r2,zero,d3ac <__muldf3+0x2e4>
    d2a4:	8000fc26 	beq	r16,zero,d698 <__muldf3+0x5d0>
    d2a8:	8009883a 	mov	r4,r16
    d2ac:	d9800215 	stw	r6,8(sp)
    d2b0:	d9c00015 	stw	r7,0(sp)
    d2b4:	da400115 	stw	r9,4(sp)
    d2b8:	000e2e00 	call	e2e0 <__clzsi2>
    d2bc:	d9800217 	ldw	r6,8(sp)
    d2c0:	d9c00017 	ldw	r7,0(sp)
    d2c4:	da400117 	ldw	r9,4(sp)
    d2c8:	113ffd44 	addi	r4,r2,-11
    d2cc:	00c00704 	movi	r3,28
    d2d0:	1900ed16 	blt	r3,r4,d688 <__muldf3+0x5c0>
    d2d4:	00c00744 	movi	r3,29
    d2d8:	147ffe04 	addi	r17,r2,-8
    d2dc:	1907c83a 	sub	r3,r3,r4
    d2e0:	8460983a 	sll	r16,r16,r17
    d2e4:	98c6d83a 	srl	r3,r19,r3
    d2e8:	9c68983a 	sll	r20,r19,r17
    d2ec:	1c20b03a 	or	r16,r3,r16
    d2f0:	1080fcc4 	addi	r2,r2,1011
    d2f4:	00a5c83a 	sub	r18,zero,r2
    d2f8:	0027883a 	mov	r19,zero
    d2fc:	0039883a 	mov	fp,zero
    d300:	003f9006 	br	d144 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d144>
    d304:	3446b03a 	or	r3,r6,r17
    d308:	1800261e 	bne	r3,zero,d3a4 <__muldf3+0x2dc>
    d30c:	0023883a 	mov	r17,zero
    d310:	0011883a 	mov	r8,zero
    d314:	01400084 	movi	r5,2
    d318:	003f9c06 	br	d18c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d18c>
    d31c:	3446b03a 	or	r3,r6,r17
    d320:	18001c26 	beq	r3,zero,d394 <__muldf3+0x2cc>
    d324:	8800ce26 	beq	r17,zero,d660 <__muldf3+0x598>
    d328:	8809883a 	mov	r4,r17
    d32c:	d9800215 	stw	r6,8(sp)
    d330:	da400115 	stw	r9,4(sp)
    d334:	da800015 	stw	r10,0(sp)
    d338:	000e2e00 	call	e2e0 <__clzsi2>
    d33c:	d9800217 	ldw	r6,8(sp)
    d340:	da400117 	ldw	r9,4(sp)
    d344:	da800017 	ldw	r10,0(sp)
    d348:	113ffd44 	addi	r4,r2,-11
    d34c:	00c00704 	movi	r3,28
    d350:	1900bf16 	blt	r3,r4,d650 <__muldf3+0x588>
    d354:	00c00744 	movi	r3,29
    d358:	123ffe04 	addi	r8,r2,-8
    d35c:	1907c83a 	sub	r3,r3,r4
    d360:	8a22983a 	sll	r17,r17,r8
    d364:	30c6d83a 	srl	r3,r6,r3
    d368:	3210983a 	sll	r8,r6,r8
    d36c:	1c62b03a 	or	r17,r3,r17
    d370:	1080fcc4 	addi	r2,r2,1011
    d374:	0085c83a 	sub	r2,zero,r2
    d378:	000b883a 	mov	r5,zero
    d37c:	003f8306 	br	d18c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d18c>
    d380:	b02b883a 	mov	r21,r22
    d384:	0081ffc4 	movi	r2,2047
    d388:	000b883a 	mov	r5,zero
    d38c:	0029883a 	mov	r20,zero
    d390:	003fac06 	br	d244 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d244>
    d394:	0023883a 	mov	r17,zero
    d398:	0011883a 	mov	r8,zero
    d39c:	01400044 	movi	r5,1
    d3a0:	003f7a06 	br	d18c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d18c>
    d3a4:	014000c4 	movi	r5,3
    d3a8:	003f7806 	br	d18c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d18c>
    d3ac:	04c00104 	movi	r19,4
    d3b0:	0021883a 	mov	r16,zero
    d3b4:	0029883a 	mov	r20,zero
    d3b8:	07000044 	movi	fp,1
    d3bc:	003f6106 	br	d144 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d144>
    d3c0:	04c00304 	movi	r19,12
    d3c4:	070000c4 	movi	fp,3
    d3c8:	003f5e06 	br	d144 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d144>
    d3cc:	01400434 	movhi	r5,16
    d3d0:	002b883a 	mov	r21,zero
    d3d4:	297fffc4 	addi	r5,r5,-1
    d3d8:	053fffc4 	movi	r20,-1
    d3dc:	0081ffc4 	movi	r2,2047
    d3e0:	003f9806 	br	d244 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d244>
    d3e4:	8023883a 	mov	r17,r16
    d3e8:	a011883a 	mov	r8,r20
    d3ec:	e00b883a 	mov	r5,fp
    d3f0:	003f8a06 	br	d21c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d21c>
    d3f4:	8023883a 	mov	r17,r16
    d3f8:	a011883a 	mov	r8,r20
    d3fc:	482d883a 	mov	r22,r9
    d400:	e00b883a 	mov	r5,fp
    d404:	003f8506 	br	d21c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d21c>
    d408:	a00ad43a 	srli	r5,r20,16
    d40c:	401ad43a 	srli	r13,r8,16
    d410:	a53fffcc 	andi	r20,r20,65535
    d414:	423fffcc 	andi	r8,r8,65535
    d418:	4519383a 	mul	r12,r8,r20
    d41c:	4147383a 	mul	r3,r8,r5
    d420:	6d09383a 	mul	r4,r13,r20
    d424:	600cd43a 	srli	r6,r12,16
    d428:	2b5d383a 	mul	r14,r5,r13
    d42c:	20c9883a 	add	r4,r4,r3
    d430:	310d883a 	add	r6,r6,r4
    d434:	30c0022e 	bgeu	r6,r3,d440 <__muldf3+0x378>
    d438:	00c00074 	movhi	r3,1
    d43c:	70dd883a 	add	r14,r14,r3
    d440:	8826d43a 	srli	r19,r17,16
    d444:	8bffffcc 	andi	r15,r17,65535
    d448:	7d23383a 	mul	r17,r15,r20
    d44c:	7949383a 	mul	r4,r15,r5
    d450:	9d29383a 	mul	r20,r19,r20
    d454:	8814d43a 	srli	r10,r17,16
    d458:	3012943a 	slli	r9,r6,16
    d45c:	a129883a 	add	r20,r20,r4
    d460:	633fffcc 	andi	r12,r12,65535
    d464:	5515883a 	add	r10,r10,r20
    d468:	3006d43a 	srli	r3,r6,16
    d46c:	4b13883a 	add	r9,r9,r12
    d470:	2ccb383a 	mul	r5,r5,r19
    d474:	5100022e 	bgeu	r10,r4,d480 <__muldf3+0x3b8>
    d478:	01000074 	movhi	r4,1
    d47c:	290b883a 	add	r5,r5,r4
    d480:	802ad43a 	srli	r21,r16,16
    d484:	843fffcc 	andi	r16,r16,65535
    d488:	440d383a 	mul	r6,r8,r16
    d48c:	4565383a 	mul	r18,r8,r21
    d490:	8349383a 	mul	r4,r16,r13
    d494:	500e943a 	slli	r7,r10,16
    d498:	3010d43a 	srli	r8,r6,16
    d49c:	5028d43a 	srli	r20,r10,16
    d4a0:	2489883a 	add	r4,r4,r18
    d4a4:	8abfffcc 	andi	r10,r17,65535
    d4a8:	3a95883a 	add	r10,r7,r10
    d4ac:	4119883a 	add	r12,r8,r4
    d4b0:	a169883a 	add	r20,r20,r5
    d4b4:	1a87883a 	add	r3,r3,r10
    d4b8:	6d5b383a 	mul	r13,r13,r21
    d4bc:	6480022e 	bgeu	r12,r18,d4c8 <__muldf3+0x400>
    d4c0:	01000074 	movhi	r4,1
    d4c4:	691b883a 	add	r13,r13,r4
    d4c8:	7c25383a 	mul	r18,r15,r16
    d4cc:	7d4b383a 	mul	r5,r15,r21
    d4d0:	84cf383a 	mul	r7,r16,r19
    d4d4:	901ed43a 	srli	r15,r18,16
    d4d8:	6008d43a 	srli	r4,r12,16
    d4dc:	6010943a 	slli	r8,r12,16
    d4e0:	394f883a 	add	r7,r7,r5
    d4e4:	333fffcc 	andi	r12,r6,65535
    d4e8:	79df883a 	add	r15,r15,r7
    d4ec:	235b883a 	add	r13,r4,r13
    d4f0:	9d63383a 	mul	r17,r19,r21
    d4f4:	4309883a 	add	r4,r8,r12
    d4f8:	7940022e 	bgeu	r15,r5,d504 <__muldf3+0x43c>
    d4fc:	01400074 	movhi	r5,1
    d500:	8963883a 	add	r17,r17,r5
    d504:	780a943a 	slli	r5,r15,16
    d508:	91bfffcc 	andi	r6,r18,65535
    d50c:	70c7883a 	add	r3,r14,r3
    d510:	298d883a 	add	r6,r5,r6
    d514:	1a8f803a 	cmpltu	r7,r3,r10
    d518:	350b883a 	add	r5,r6,r20
    d51c:	20c7883a 	add	r3,r4,r3
    d520:	3955883a 	add	r10,r7,r5
    d524:	1909803a 	cmpltu	r4,r3,r4
    d528:	6a91883a 	add	r8,r13,r10
    d52c:	780cd43a 	srli	r6,r15,16
    d530:	2219883a 	add	r12,r4,r8
    d534:	2d0b803a 	cmpltu	r5,r5,r20
    d538:	51cf803a 	cmpltu	r7,r10,r7
    d53c:	29ceb03a 	or	r7,r5,r7
    d540:	4351803a 	cmpltu	r8,r8,r13
    d544:	610b803a 	cmpltu	r5,r12,r4
    d548:	4148b03a 	or	r4,r8,r5
    d54c:	398f883a 	add	r7,r7,r6
    d550:	3909883a 	add	r4,r7,r4
    d554:	1810927a 	slli	r8,r3,9
    d558:	2449883a 	add	r4,r4,r17
    d55c:	2008927a 	slli	r4,r4,9
    d560:	6022d5fa 	srli	r17,r12,23
    d564:	1806d5fa 	srli	r3,r3,23
    d568:	4252b03a 	or	r9,r8,r9
    d56c:	600a927a 	slli	r5,r12,9
    d570:	4810c03a 	cmpne	r8,r9,zero
    d574:	2462b03a 	or	r17,r4,r17
    d578:	40c6b03a 	or	r3,r8,r3
    d57c:	8900402c 	andhi	r4,r17,256
    d580:	1950b03a 	or	r8,r3,r5
    d584:	20000726 	beq	r4,zero,d5a4 <__muldf3+0x4dc>
    d588:	4006d07a 	srli	r3,r8,1
    d58c:	880497fa 	slli	r2,r17,31
    d590:	4200004c 	andi	r8,r8,1
    d594:	8822d07a 	srli	r17,r17,1
    d598:	1a10b03a 	or	r8,r3,r8
    d59c:	1210b03a 	or	r8,r2,r8
    d5a0:	5805883a 	mov	r2,r11
    d5a4:	1140ffc4 	addi	r5,r2,1023
    d5a8:	0140440e 	bge	zero,r5,d6bc <__muldf3+0x5f4>
    d5ac:	40c001cc 	andi	r3,r8,7
    d5b0:	18000726 	beq	r3,zero,d5d0 <__muldf3+0x508>
    d5b4:	40c003cc 	andi	r3,r8,15
    d5b8:	01000104 	movi	r4,4
    d5bc:	19000426 	beq	r3,r4,d5d0 <__muldf3+0x508>
    d5c0:	4107883a 	add	r3,r8,r4
    d5c4:	1a11803a 	cmpltu	r8,r3,r8
    d5c8:	8a23883a 	add	r17,r17,r8
    d5cc:	1811883a 	mov	r8,r3
    d5d0:	88c0402c 	andhi	r3,r17,256
    d5d4:	18000426 	beq	r3,zero,d5e8 <__muldf3+0x520>
    d5d8:	11410004 	addi	r5,r2,1024
    d5dc:	00bfc034 	movhi	r2,65280
    d5e0:	10bfffc4 	addi	r2,r2,-1
    d5e4:	88a2703a 	and	r17,r17,r2
    d5e8:	0081ff84 	movi	r2,2046
    d5ec:	117f6416 	blt	r2,r5,d380 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d380>
    d5f0:	8828977a 	slli	r20,r17,29
    d5f4:	4010d0fa 	srli	r8,r8,3
    d5f8:	8822927a 	slli	r17,r17,9
    d5fc:	2881ffcc 	andi	r2,r5,2047
    d600:	a228b03a 	or	r20,r20,r8
    d604:	880ad33a 	srli	r5,r17,12
    d608:	b02b883a 	mov	r21,r22
    d60c:	003f0d06 	br	d244 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d244>
    d610:	8080022c 	andhi	r2,r16,8
    d614:	10000926 	beq	r2,zero,d63c <__muldf3+0x574>
    d618:	8880022c 	andhi	r2,r17,8
    d61c:	1000071e 	bne	r2,zero,d63c <__muldf3+0x574>
    d620:	00800434 	movhi	r2,16
    d624:	89400234 	orhi	r5,r17,8
    d628:	10bfffc4 	addi	r2,r2,-1
    d62c:	b82b883a 	mov	r21,r23
    d630:	288a703a 	and	r5,r5,r2
    d634:	4029883a 	mov	r20,r8
    d638:	003f6806 	br	d3dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d3dc>
    d63c:	00800434 	movhi	r2,16
    d640:	81400234 	orhi	r5,r16,8
    d644:	10bfffc4 	addi	r2,r2,-1
    d648:	288a703a 	and	r5,r5,r2
    d64c:	003f6306 	br	d3dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d3dc>
    d650:	147ff604 	addi	r17,r2,-40
    d654:	3462983a 	sll	r17,r6,r17
    d658:	0011883a 	mov	r8,zero
    d65c:	003f4406 	br	d370 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d370>
    d660:	3009883a 	mov	r4,r6
    d664:	d9800215 	stw	r6,8(sp)
    d668:	da400115 	stw	r9,4(sp)
    d66c:	da800015 	stw	r10,0(sp)
    d670:	000e2e00 	call	e2e0 <__clzsi2>
    d674:	10800804 	addi	r2,r2,32
    d678:	da800017 	ldw	r10,0(sp)
    d67c:	da400117 	ldw	r9,4(sp)
    d680:	d9800217 	ldw	r6,8(sp)
    d684:	003f3006 	br	d348 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d348>
    d688:	143ff604 	addi	r16,r2,-40
    d68c:	9c20983a 	sll	r16,r19,r16
    d690:	0029883a 	mov	r20,zero
    d694:	003f1606 	br	d2f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d2f0>
    d698:	d9800215 	stw	r6,8(sp)
    d69c:	d9c00015 	stw	r7,0(sp)
    d6a0:	da400115 	stw	r9,4(sp)
    d6a4:	000e2e00 	call	e2e0 <__clzsi2>
    d6a8:	10800804 	addi	r2,r2,32
    d6ac:	da400117 	ldw	r9,4(sp)
    d6b0:	d9c00017 	ldw	r7,0(sp)
    d6b4:	d9800217 	ldw	r6,8(sp)
    d6b8:	003f0306 	br	d2c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d2c8>
    d6bc:	00c00044 	movi	r3,1
    d6c0:	1947c83a 	sub	r3,r3,r5
    d6c4:	00800e04 	movi	r2,56
    d6c8:	10feda16 	blt	r2,r3,d234 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d234>
    d6cc:	008007c4 	movi	r2,31
    d6d0:	10c01b16 	blt	r2,r3,d740 <__muldf3+0x678>
    d6d4:	00800804 	movi	r2,32
    d6d8:	10c5c83a 	sub	r2,r2,r3
    d6dc:	888a983a 	sll	r5,r17,r2
    d6e0:	40c8d83a 	srl	r4,r8,r3
    d6e4:	4084983a 	sll	r2,r8,r2
    d6e8:	88e2d83a 	srl	r17,r17,r3
    d6ec:	2906b03a 	or	r3,r5,r4
    d6f0:	1004c03a 	cmpne	r2,r2,zero
    d6f4:	1886b03a 	or	r3,r3,r2
    d6f8:	188001cc 	andi	r2,r3,7
    d6fc:	10000726 	beq	r2,zero,d71c <__muldf3+0x654>
    d700:	188003cc 	andi	r2,r3,15
    d704:	01000104 	movi	r4,4
    d708:	11000426 	beq	r2,r4,d71c <__muldf3+0x654>
    d70c:	1805883a 	mov	r2,r3
    d710:	10c00104 	addi	r3,r2,4
    d714:	1885803a 	cmpltu	r2,r3,r2
    d718:	88a3883a 	add	r17,r17,r2
    d71c:	8880202c 	andhi	r2,r17,128
    d720:	10001c26 	beq	r2,zero,d794 <__muldf3+0x6cc>
    d724:	b02b883a 	mov	r21,r22
    d728:	00800044 	movi	r2,1
    d72c:	000b883a 	mov	r5,zero
    d730:	0029883a 	mov	r20,zero
    d734:	003ec306 	br	d244 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d244>
    d738:	5805883a 	mov	r2,r11
    d73c:	003f9906 	br	d5a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d5a4>
    d740:	00bff844 	movi	r2,-31
    d744:	1145c83a 	sub	r2,r2,r5
    d748:	8888d83a 	srl	r4,r17,r2
    d74c:	00800804 	movi	r2,32
    d750:	18801a26 	beq	r3,r2,d7bc <__muldf3+0x6f4>
    d754:	00801004 	movi	r2,64
    d758:	10c5c83a 	sub	r2,r2,r3
    d75c:	8884983a 	sll	r2,r17,r2
    d760:	1204b03a 	or	r2,r2,r8
    d764:	1004c03a 	cmpne	r2,r2,zero
    d768:	2084b03a 	or	r2,r4,r2
    d76c:	144001cc 	andi	r17,r2,7
    d770:	88000d1e 	bne	r17,zero,d7a8 <__muldf3+0x6e0>
    d774:	000b883a 	mov	r5,zero
    d778:	1028d0fa 	srli	r20,r2,3
    d77c:	b02b883a 	mov	r21,r22
    d780:	0005883a 	mov	r2,zero
    d784:	a468b03a 	or	r20,r20,r17
    d788:	003eae06 	br	d244 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d244>
    d78c:	1007883a 	mov	r3,r2
    d790:	0023883a 	mov	r17,zero
    d794:	880a927a 	slli	r5,r17,9
    d798:	1805883a 	mov	r2,r3
    d79c:	8822977a 	slli	r17,r17,29
    d7a0:	280ad33a 	srli	r5,r5,12
    d7a4:	003ff406 	br	d778 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d778>
    d7a8:	10c003cc 	andi	r3,r2,15
    d7ac:	01000104 	movi	r4,4
    d7b0:	193ff626 	beq	r3,r4,d78c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d78c>
    d7b4:	0023883a 	mov	r17,zero
    d7b8:	003fd506 	br	d710 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d710>
    d7bc:	0005883a 	mov	r2,zero
    d7c0:	003fe706 	br	d760 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d760>
    d7c4:	00800434 	movhi	r2,16
    d7c8:	89400234 	orhi	r5,r17,8
    d7cc:	10bfffc4 	addi	r2,r2,-1
    d7d0:	b02b883a 	mov	r21,r22
    d7d4:	288a703a 	and	r5,r5,r2
    d7d8:	4029883a 	mov	r20,r8
    d7dc:	003eff06 	br	d3dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d3dc>

0000d7e0 <__subdf3>:
    d7e0:	02000434 	movhi	r8,16
    d7e4:	423fffc4 	addi	r8,r8,-1
    d7e8:	defffb04 	addi	sp,sp,-20
    d7ec:	2a14703a 	and	r10,r5,r8
    d7f0:	3812d53a 	srli	r9,r7,20
    d7f4:	3a10703a 	and	r8,r7,r8
    d7f8:	2006d77a 	srli	r3,r4,29
    d7fc:	3004d77a 	srli	r2,r6,29
    d800:	dc000015 	stw	r16,0(sp)
    d804:	501490fa 	slli	r10,r10,3
    d808:	2820d53a 	srli	r16,r5,20
    d80c:	401090fa 	slli	r8,r8,3
    d810:	dc800215 	stw	r18,8(sp)
    d814:	dc400115 	stw	r17,4(sp)
    d818:	dfc00415 	stw	ra,16(sp)
    d81c:	202290fa 	slli	r17,r4,3
    d820:	dcc00315 	stw	r19,12(sp)
    d824:	4a41ffcc 	andi	r9,r9,2047
    d828:	0101ffc4 	movi	r4,2047
    d82c:	2824d7fa 	srli	r18,r5,31
    d830:	8401ffcc 	andi	r16,r16,2047
    d834:	50c6b03a 	or	r3,r10,r3
    d838:	380ed7fa 	srli	r7,r7,31
    d83c:	408ab03a 	or	r5,r8,r2
    d840:	300c90fa 	slli	r6,r6,3
    d844:	49009626 	beq	r9,r4,daa0 <__subdf3+0x2c0>
    d848:	39c0005c 	xori	r7,r7,1
    d84c:	8245c83a 	sub	r2,r16,r9
    d850:	3c807426 	beq	r7,r18,da24 <__subdf3+0x244>
    d854:	0080af0e 	bge	zero,r2,db14 <__subdf3+0x334>
    d858:	48002a1e 	bne	r9,zero,d904 <__subdf3+0x124>
    d85c:	2988b03a 	or	r4,r5,r6
    d860:	20009a1e 	bne	r4,zero,dacc <__subdf3+0x2ec>
    d864:	888001cc 	andi	r2,r17,7
    d868:	10000726 	beq	r2,zero,d888 <__subdf3+0xa8>
    d86c:	888003cc 	andi	r2,r17,15
    d870:	01000104 	movi	r4,4
    d874:	11000426 	beq	r2,r4,d888 <__subdf3+0xa8>
    d878:	890b883a 	add	r5,r17,r4
    d87c:	2c63803a 	cmpltu	r17,r5,r17
    d880:	1c47883a 	add	r3,r3,r17
    d884:	2823883a 	mov	r17,r5
    d888:	1880202c 	andhi	r2,r3,128
    d88c:	10005926 	beq	r2,zero,d9f4 <__subdf3+0x214>
    d890:	84000044 	addi	r16,r16,1
    d894:	0081ffc4 	movi	r2,2047
    d898:	8080be26 	beq	r16,r2,db94 <__subdf3+0x3b4>
    d89c:	017fe034 	movhi	r5,65408
    d8a0:	297fffc4 	addi	r5,r5,-1
    d8a4:	1946703a 	and	r3,r3,r5
    d8a8:	1804977a 	slli	r2,r3,29
    d8ac:	1806927a 	slli	r3,r3,9
    d8b0:	8822d0fa 	srli	r17,r17,3
    d8b4:	8401ffcc 	andi	r16,r16,2047
    d8b8:	180ad33a 	srli	r5,r3,12
    d8bc:	9100004c 	andi	r4,r18,1
    d8c0:	1444b03a 	or	r2,r2,r17
    d8c4:	80c1ffcc 	andi	r3,r16,2047
    d8c8:	1820953a 	slli	r16,r3,20
    d8cc:	20c03fcc 	andi	r3,r4,255
    d8d0:	180897fa 	slli	r4,r3,31
    d8d4:	00c00434 	movhi	r3,16
    d8d8:	18ffffc4 	addi	r3,r3,-1
    d8dc:	28c6703a 	and	r3,r5,r3
    d8e0:	1c06b03a 	or	r3,r3,r16
    d8e4:	1906b03a 	or	r3,r3,r4
    d8e8:	dfc00417 	ldw	ra,16(sp)
    d8ec:	dcc00317 	ldw	r19,12(sp)
    d8f0:	dc800217 	ldw	r18,8(sp)
    d8f4:	dc400117 	ldw	r17,4(sp)
    d8f8:	dc000017 	ldw	r16,0(sp)
    d8fc:	dec00504 	addi	sp,sp,20
    d900:	f800283a 	ret
    d904:	0101ffc4 	movi	r4,2047
    d908:	813fd626 	beq	r16,r4,d864 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d864>
    d90c:	29402034 	orhi	r5,r5,128
    d910:	01000e04 	movi	r4,56
    d914:	2080a316 	blt	r4,r2,dba4 <__subdf3+0x3c4>
    d918:	010007c4 	movi	r4,31
    d91c:	2080c616 	blt	r4,r2,dc38 <__subdf3+0x458>
    d920:	01000804 	movi	r4,32
    d924:	2089c83a 	sub	r4,r4,r2
    d928:	2910983a 	sll	r8,r5,r4
    d92c:	308ed83a 	srl	r7,r6,r2
    d930:	3108983a 	sll	r4,r6,r4
    d934:	2884d83a 	srl	r2,r5,r2
    d938:	41ccb03a 	or	r6,r8,r7
    d93c:	2008c03a 	cmpne	r4,r4,zero
    d940:	310cb03a 	or	r6,r6,r4
    d944:	898dc83a 	sub	r6,r17,r6
    d948:	89a3803a 	cmpltu	r17,r17,r6
    d94c:	1887c83a 	sub	r3,r3,r2
    d950:	1c47c83a 	sub	r3,r3,r17
    d954:	3023883a 	mov	r17,r6
    d958:	1880202c 	andhi	r2,r3,128
    d95c:	10002326 	beq	r2,zero,d9ec <__subdf3+0x20c>
    d960:	04c02034 	movhi	r19,128
    d964:	9cffffc4 	addi	r19,r19,-1
    d968:	1ce6703a 	and	r19,r3,r19
    d96c:	98007a26 	beq	r19,zero,db58 <__subdf3+0x378>
    d970:	9809883a 	mov	r4,r19
    d974:	000e2e00 	call	e2e0 <__clzsi2>
    d978:	113ffe04 	addi	r4,r2,-8
    d97c:	00c007c4 	movi	r3,31
    d980:	19007b16 	blt	r3,r4,db70 <__subdf3+0x390>
    d984:	00800804 	movi	r2,32
    d988:	1105c83a 	sub	r2,r2,r4
    d98c:	8884d83a 	srl	r2,r17,r2
    d990:	9906983a 	sll	r3,r19,r4
    d994:	8922983a 	sll	r17,r17,r4
    d998:	10c4b03a 	or	r2,r2,r3
    d99c:	24007816 	blt	r4,r16,db80 <__subdf3+0x3a0>
    d9a0:	2421c83a 	sub	r16,r4,r16
    d9a4:	80c00044 	addi	r3,r16,1
    d9a8:	010007c4 	movi	r4,31
    d9ac:	20c09516 	blt	r4,r3,dc04 <__subdf3+0x424>
    d9b0:	01400804 	movi	r5,32
    d9b4:	28cbc83a 	sub	r5,r5,r3
    d9b8:	88c8d83a 	srl	r4,r17,r3
    d9bc:	8962983a 	sll	r17,r17,r5
    d9c0:	114a983a 	sll	r5,r2,r5
    d9c4:	10c6d83a 	srl	r3,r2,r3
    d9c8:	8804c03a 	cmpne	r2,r17,zero
    d9cc:	290ab03a 	or	r5,r5,r4
    d9d0:	28a2b03a 	or	r17,r5,r2
    d9d4:	0021883a 	mov	r16,zero
    d9d8:	003fa206 	br	d864 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d864>
    d9dc:	2090b03a 	or	r8,r4,r2
    d9e0:	40018e26 	beq	r8,zero,e01c <__subdf3+0x83c>
    d9e4:	1007883a 	mov	r3,r2
    d9e8:	2023883a 	mov	r17,r4
    d9ec:	888001cc 	andi	r2,r17,7
    d9f0:	103f9e1e 	bne	r2,zero,d86c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d86c>
    d9f4:	1804977a 	slli	r2,r3,29
    d9f8:	8822d0fa 	srli	r17,r17,3
    d9fc:	1810d0fa 	srli	r8,r3,3
    da00:	9100004c 	andi	r4,r18,1
    da04:	1444b03a 	or	r2,r2,r17
    da08:	00c1ffc4 	movi	r3,2047
    da0c:	80c02826 	beq	r16,r3,dab0 <__subdf3+0x2d0>
    da10:	01400434 	movhi	r5,16
    da14:	297fffc4 	addi	r5,r5,-1
    da18:	80e0703a 	and	r16,r16,r3
    da1c:	414a703a 	and	r5,r8,r5
    da20:	003fa806 	br	d8c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d8c4>
    da24:	0080630e 	bge	zero,r2,dbb4 <__subdf3+0x3d4>
    da28:	48003026 	beq	r9,zero,daec <__subdf3+0x30c>
    da2c:	0101ffc4 	movi	r4,2047
    da30:	813f8c26 	beq	r16,r4,d864 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d864>
    da34:	29402034 	orhi	r5,r5,128
    da38:	01000e04 	movi	r4,56
    da3c:	2080a90e 	bge	r4,r2,dce4 <__subdf3+0x504>
    da40:	298cb03a 	or	r6,r5,r6
    da44:	3012c03a 	cmpne	r9,r6,zero
    da48:	0005883a 	mov	r2,zero
    da4c:	4c53883a 	add	r9,r9,r17
    da50:	4c63803a 	cmpltu	r17,r9,r17
    da54:	10c7883a 	add	r3,r2,r3
    da58:	88c7883a 	add	r3,r17,r3
    da5c:	4823883a 	mov	r17,r9
    da60:	1880202c 	andhi	r2,r3,128
    da64:	1000d026 	beq	r2,zero,dda8 <__subdf3+0x5c8>
    da68:	84000044 	addi	r16,r16,1
    da6c:	0081ffc4 	movi	r2,2047
    da70:	8080fe26 	beq	r16,r2,de6c <__subdf3+0x68c>
    da74:	00bfe034 	movhi	r2,65408
    da78:	10bfffc4 	addi	r2,r2,-1
    da7c:	1886703a 	and	r3,r3,r2
    da80:	880ad07a 	srli	r5,r17,1
    da84:	180497fa 	slli	r2,r3,31
    da88:	8900004c 	andi	r4,r17,1
    da8c:	2922b03a 	or	r17,r5,r4
    da90:	1806d07a 	srli	r3,r3,1
    da94:	1462b03a 	or	r17,r2,r17
    da98:	3825883a 	mov	r18,r7
    da9c:	003f7106 	br	d864 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d864>
    daa0:	2984b03a 	or	r2,r5,r6
    daa4:	103f6826 	beq	r2,zero,d848 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d848>
    daa8:	39c03fcc 	andi	r7,r7,255
    daac:	003f6706 	br	d84c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d84c>
    dab0:	4086b03a 	or	r3,r8,r2
    dab4:	18015226 	beq	r3,zero,e000 <__subdf3+0x820>
    dab8:	00c00434 	movhi	r3,16
    dabc:	41400234 	orhi	r5,r8,8
    dac0:	18ffffc4 	addi	r3,r3,-1
    dac4:	28ca703a 	and	r5,r5,r3
    dac8:	003f7e06 	br	d8c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d8c4>
    dacc:	10bfffc4 	addi	r2,r2,-1
    dad0:	1000491e 	bne	r2,zero,dbf8 <__subdf3+0x418>
    dad4:	898fc83a 	sub	r7,r17,r6
    dad8:	89e3803a 	cmpltu	r17,r17,r7
    dadc:	1947c83a 	sub	r3,r3,r5
    dae0:	1c47c83a 	sub	r3,r3,r17
    dae4:	3823883a 	mov	r17,r7
    dae8:	003f9b06 	br	d958 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d958>
    daec:	2988b03a 	or	r4,r5,r6
    daf0:	203f5c26 	beq	r4,zero,d864 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d864>
    daf4:	10bfffc4 	addi	r2,r2,-1
    daf8:	1000931e 	bne	r2,zero,dd48 <__subdf3+0x568>
    dafc:	898d883a 	add	r6,r17,r6
    db00:	3463803a 	cmpltu	r17,r6,r17
    db04:	1947883a 	add	r3,r3,r5
    db08:	88c7883a 	add	r3,r17,r3
    db0c:	3023883a 	mov	r17,r6
    db10:	003fd306 	br	da60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da60>
    db14:	1000541e 	bne	r2,zero,dc68 <__subdf3+0x488>
    db18:	80800044 	addi	r2,r16,1
    db1c:	1081ffcc 	andi	r2,r2,2047
    db20:	01000044 	movi	r4,1
    db24:	2080a20e 	bge	r4,r2,ddb0 <__subdf3+0x5d0>
    db28:	8989c83a 	sub	r4,r17,r6
    db2c:	8905803a 	cmpltu	r2,r17,r4
    db30:	1967c83a 	sub	r19,r3,r5
    db34:	98a7c83a 	sub	r19,r19,r2
    db38:	9880202c 	andhi	r2,r19,128
    db3c:	10006326 	beq	r2,zero,dccc <__subdf3+0x4ec>
    db40:	3463c83a 	sub	r17,r6,r17
    db44:	28c7c83a 	sub	r3,r5,r3
    db48:	344d803a 	cmpltu	r6,r6,r17
    db4c:	19a7c83a 	sub	r19,r3,r6
    db50:	3825883a 	mov	r18,r7
    db54:	983f861e 	bne	r19,zero,d970 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d970>
    db58:	8809883a 	mov	r4,r17
    db5c:	000e2e00 	call	e2e0 <__clzsi2>
    db60:	10800804 	addi	r2,r2,32
    db64:	113ffe04 	addi	r4,r2,-8
    db68:	00c007c4 	movi	r3,31
    db6c:	193f850e 	bge	r3,r4,d984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d984>
    db70:	10bff604 	addi	r2,r2,-40
    db74:	8884983a 	sll	r2,r17,r2
    db78:	0023883a 	mov	r17,zero
    db7c:	243f880e 	bge	r4,r16,d9a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d9a0>
    db80:	00ffe034 	movhi	r3,65408
    db84:	18ffffc4 	addi	r3,r3,-1
    db88:	8121c83a 	sub	r16,r16,r4
    db8c:	10c6703a 	and	r3,r2,r3
    db90:	003f3406 	br	d864 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d864>
    db94:	9100004c 	andi	r4,r18,1
    db98:	000b883a 	mov	r5,zero
    db9c:	0005883a 	mov	r2,zero
    dba0:	003f4806 	br	d8c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d8c4>
    dba4:	298cb03a 	or	r6,r5,r6
    dba8:	300cc03a 	cmpne	r6,r6,zero
    dbac:	0005883a 	mov	r2,zero
    dbb0:	003f6406 	br	d944 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d944>
    dbb4:	10009a1e 	bne	r2,zero,de20 <__subdf3+0x640>
    dbb8:	82400044 	addi	r9,r16,1
    dbbc:	4881ffcc 	andi	r2,r9,2047
    dbc0:	02800044 	movi	r10,1
    dbc4:	5080670e 	bge	r10,r2,dd64 <__subdf3+0x584>
    dbc8:	0081ffc4 	movi	r2,2047
    dbcc:	4880af26 	beq	r9,r2,de8c <__subdf3+0x6ac>
    dbd0:	898d883a 	add	r6,r17,r6
    dbd4:	1945883a 	add	r2,r3,r5
    dbd8:	3447803a 	cmpltu	r3,r6,r17
    dbdc:	1887883a 	add	r3,r3,r2
    dbe0:	182297fa 	slli	r17,r3,31
    dbe4:	300cd07a 	srli	r6,r6,1
    dbe8:	1806d07a 	srli	r3,r3,1
    dbec:	4821883a 	mov	r16,r9
    dbf0:	89a2b03a 	or	r17,r17,r6
    dbf4:	003f1b06 	br	d864 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d864>
    dbf8:	0101ffc4 	movi	r4,2047
    dbfc:	813f441e 	bne	r16,r4,d910 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d910>
    dc00:	003f1806 	br	d864 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d864>
    dc04:	843ff844 	addi	r16,r16,-31
    dc08:	01400804 	movi	r5,32
    dc0c:	1408d83a 	srl	r4,r2,r16
    dc10:	19405026 	beq	r3,r5,dd54 <__subdf3+0x574>
    dc14:	01401004 	movi	r5,64
    dc18:	28c7c83a 	sub	r3,r5,r3
    dc1c:	10c4983a 	sll	r2,r2,r3
    dc20:	88a2b03a 	or	r17,r17,r2
    dc24:	8822c03a 	cmpne	r17,r17,zero
    dc28:	2462b03a 	or	r17,r4,r17
    dc2c:	0007883a 	mov	r3,zero
    dc30:	0021883a 	mov	r16,zero
    dc34:	003f6d06 	br	d9ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d9ec>
    dc38:	11fff804 	addi	r7,r2,-32
    dc3c:	01000804 	movi	r4,32
    dc40:	29ced83a 	srl	r7,r5,r7
    dc44:	11004526 	beq	r2,r4,dd5c <__subdf3+0x57c>
    dc48:	01001004 	movi	r4,64
    dc4c:	2089c83a 	sub	r4,r4,r2
    dc50:	2904983a 	sll	r2,r5,r4
    dc54:	118cb03a 	or	r6,r2,r6
    dc58:	300cc03a 	cmpne	r6,r6,zero
    dc5c:	398cb03a 	or	r6,r7,r6
    dc60:	0005883a 	mov	r2,zero
    dc64:	003f3706 	br	d944 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d944>
    dc68:	80002a26 	beq	r16,zero,dd14 <__subdf3+0x534>
    dc6c:	0101ffc4 	movi	r4,2047
    dc70:	49006626 	beq	r9,r4,de0c <__subdf3+0x62c>
    dc74:	0085c83a 	sub	r2,zero,r2
    dc78:	18c02034 	orhi	r3,r3,128
    dc7c:	01000e04 	movi	r4,56
    dc80:	20807e16 	blt	r4,r2,de7c <__subdf3+0x69c>
    dc84:	010007c4 	movi	r4,31
    dc88:	2080e716 	blt	r4,r2,e028 <__subdf3+0x848>
    dc8c:	01000804 	movi	r4,32
    dc90:	2089c83a 	sub	r4,r4,r2
    dc94:	1914983a 	sll	r10,r3,r4
    dc98:	8890d83a 	srl	r8,r17,r2
    dc9c:	8908983a 	sll	r4,r17,r4
    dca0:	1884d83a 	srl	r2,r3,r2
    dca4:	5222b03a 	or	r17,r10,r8
    dca8:	2006c03a 	cmpne	r3,r4,zero
    dcac:	88e2b03a 	or	r17,r17,r3
    dcb0:	3463c83a 	sub	r17,r6,r17
    dcb4:	2885c83a 	sub	r2,r5,r2
    dcb8:	344d803a 	cmpltu	r6,r6,r17
    dcbc:	1187c83a 	sub	r3,r2,r6
    dcc0:	4821883a 	mov	r16,r9
    dcc4:	3825883a 	mov	r18,r7
    dcc8:	003f2306 	br	d958 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d958>
    dccc:	24d0b03a 	or	r8,r4,r19
    dcd0:	40001b1e 	bne	r8,zero,dd40 <__subdf3+0x560>
    dcd4:	0005883a 	mov	r2,zero
    dcd8:	0009883a 	mov	r4,zero
    dcdc:	0021883a 	mov	r16,zero
    dce0:	003f4906 	br	da08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da08>
    dce4:	010007c4 	movi	r4,31
    dce8:	20803a16 	blt	r4,r2,ddd4 <__subdf3+0x5f4>
    dcec:	01000804 	movi	r4,32
    dcf0:	2089c83a 	sub	r4,r4,r2
    dcf4:	2912983a 	sll	r9,r5,r4
    dcf8:	3090d83a 	srl	r8,r6,r2
    dcfc:	3108983a 	sll	r4,r6,r4
    dd00:	2884d83a 	srl	r2,r5,r2
    dd04:	4a12b03a 	or	r9,r9,r8
    dd08:	2008c03a 	cmpne	r4,r4,zero
    dd0c:	4912b03a 	or	r9,r9,r4
    dd10:	003f4e06 	br	da4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da4c>
    dd14:	1c48b03a 	or	r4,r3,r17
    dd18:	20003c26 	beq	r4,zero,de0c <__subdf3+0x62c>
    dd1c:	0084303a 	nor	r2,zero,r2
    dd20:	1000381e 	bne	r2,zero,de04 <__subdf3+0x624>
    dd24:	3463c83a 	sub	r17,r6,r17
    dd28:	28c5c83a 	sub	r2,r5,r3
    dd2c:	344d803a 	cmpltu	r6,r6,r17
    dd30:	1187c83a 	sub	r3,r2,r6
    dd34:	4821883a 	mov	r16,r9
    dd38:	3825883a 	mov	r18,r7
    dd3c:	003f0606 	br	d958 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d958>
    dd40:	2023883a 	mov	r17,r4
    dd44:	003f0906 	br	d96c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d96c>
    dd48:	0101ffc4 	movi	r4,2047
    dd4c:	813f3a1e 	bne	r16,r4,da38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da38>
    dd50:	003ec406 	br	d864 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d864>
    dd54:	0005883a 	mov	r2,zero
    dd58:	003fb106 	br	dc20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dc20>
    dd5c:	0005883a 	mov	r2,zero
    dd60:	003fbc06 	br	dc54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dc54>
    dd64:	1c44b03a 	or	r2,r3,r17
    dd68:	80008e1e 	bne	r16,zero,dfa4 <__subdf3+0x7c4>
    dd6c:	1000c826 	beq	r2,zero,e090 <__subdf3+0x8b0>
    dd70:	2984b03a 	or	r2,r5,r6
    dd74:	103ebb26 	beq	r2,zero,d864 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d864>
    dd78:	8989883a 	add	r4,r17,r6
    dd7c:	1945883a 	add	r2,r3,r5
    dd80:	2447803a 	cmpltu	r3,r4,r17
    dd84:	1887883a 	add	r3,r3,r2
    dd88:	1880202c 	andhi	r2,r3,128
    dd8c:	2023883a 	mov	r17,r4
    dd90:	103f1626 	beq	r2,zero,d9ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d9ec>
    dd94:	00bfe034 	movhi	r2,65408
    dd98:	10bfffc4 	addi	r2,r2,-1
    dd9c:	5021883a 	mov	r16,r10
    dda0:	1886703a 	and	r3,r3,r2
    dda4:	003eaf06 	br	d864 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d864>
    dda8:	3825883a 	mov	r18,r7
    ddac:	003f0f06 	br	d9ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d9ec>
    ddb0:	1c44b03a 	or	r2,r3,r17
    ddb4:	8000251e 	bne	r16,zero,de4c <__subdf3+0x66c>
    ddb8:	1000661e 	bne	r2,zero,df54 <__subdf3+0x774>
    ddbc:	2990b03a 	or	r8,r5,r6
    ddc0:	40009626 	beq	r8,zero,e01c <__subdf3+0x83c>
    ddc4:	2807883a 	mov	r3,r5
    ddc8:	3023883a 	mov	r17,r6
    ddcc:	3825883a 	mov	r18,r7
    ddd0:	003ea406 	br	d864 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d864>
    ddd4:	127ff804 	addi	r9,r2,-32
    ddd8:	01000804 	movi	r4,32
    dddc:	2a52d83a 	srl	r9,r5,r9
    dde0:	11008c26 	beq	r2,r4,e014 <__subdf3+0x834>
    dde4:	01001004 	movi	r4,64
    dde8:	2085c83a 	sub	r2,r4,r2
    ddec:	2884983a 	sll	r2,r5,r2
    ddf0:	118cb03a 	or	r6,r2,r6
    ddf4:	300cc03a 	cmpne	r6,r6,zero
    ddf8:	4992b03a 	or	r9,r9,r6
    ddfc:	0005883a 	mov	r2,zero
    de00:	003f1206 	br	da4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da4c>
    de04:	0101ffc4 	movi	r4,2047
    de08:	493f9c1e 	bne	r9,r4,dc7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dc7c>
    de0c:	2807883a 	mov	r3,r5
    de10:	3023883a 	mov	r17,r6
    de14:	4821883a 	mov	r16,r9
    de18:	3825883a 	mov	r18,r7
    de1c:	003e9106 	br	d864 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d864>
    de20:	80001f1e 	bne	r16,zero,dea0 <__subdf3+0x6c0>
    de24:	1c48b03a 	or	r4,r3,r17
    de28:	20005a26 	beq	r4,zero,df94 <__subdf3+0x7b4>
    de2c:	0084303a 	nor	r2,zero,r2
    de30:	1000561e 	bne	r2,zero,df8c <__subdf3+0x7ac>
    de34:	89a3883a 	add	r17,r17,r6
    de38:	1945883a 	add	r2,r3,r5
    de3c:	898d803a 	cmpltu	r6,r17,r6
    de40:	3087883a 	add	r3,r6,r2
    de44:	4821883a 	mov	r16,r9
    de48:	003f0506 	br	da60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da60>
    de4c:	10002b1e 	bne	r2,zero,defc <__subdf3+0x71c>
    de50:	2984b03a 	or	r2,r5,r6
    de54:	10008026 	beq	r2,zero,e058 <__subdf3+0x878>
    de58:	2807883a 	mov	r3,r5
    de5c:	3023883a 	mov	r17,r6
    de60:	3825883a 	mov	r18,r7
    de64:	0401ffc4 	movi	r16,2047
    de68:	003e7e06 	br	d864 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d864>
    de6c:	3809883a 	mov	r4,r7
    de70:	0011883a 	mov	r8,zero
    de74:	0005883a 	mov	r2,zero
    de78:	003ee306 	br	da08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da08>
    de7c:	1c62b03a 	or	r17,r3,r17
    de80:	8822c03a 	cmpne	r17,r17,zero
    de84:	0005883a 	mov	r2,zero
    de88:	003f8906 	br	dcb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dcb0>
    de8c:	3809883a 	mov	r4,r7
    de90:	4821883a 	mov	r16,r9
    de94:	0011883a 	mov	r8,zero
    de98:	0005883a 	mov	r2,zero
    de9c:	003eda06 	br	da08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da08>
    dea0:	0101ffc4 	movi	r4,2047
    dea4:	49003b26 	beq	r9,r4,df94 <__subdf3+0x7b4>
    dea8:	0085c83a 	sub	r2,zero,r2
    deac:	18c02034 	orhi	r3,r3,128
    deb0:	01000e04 	movi	r4,56
    deb4:	20806e16 	blt	r4,r2,e070 <__subdf3+0x890>
    deb8:	010007c4 	movi	r4,31
    debc:	20807716 	blt	r4,r2,e09c <__subdf3+0x8bc>
    dec0:	01000804 	movi	r4,32
    dec4:	2089c83a 	sub	r4,r4,r2
    dec8:	1914983a 	sll	r10,r3,r4
    decc:	8890d83a 	srl	r8,r17,r2
    ded0:	8908983a 	sll	r4,r17,r4
    ded4:	1884d83a 	srl	r2,r3,r2
    ded8:	5222b03a 	or	r17,r10,r8
    dedc:	2006c03a 	cmpne	r3,r4,zero
    dee0:	88e2b03a 	or	r17,r17,r3
    dee4:	89a3883a 	add	r17,r17,r6
    dee8:	1145883a 	add	r2,r2,r5
    deec:	898d803a 	cmpltu	r6,r17,r6
    def0:	3087883a 	add	r3,r6,r2
    def4:	4821883a 	mov	r16,r9
    def8:	003ed906 	br	da60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da60>
    defc:	2984b03a 	or	r2,r5,r6
    df00:	10004226 	beq	r2,zero,e00c <__subdf3+0x82c>
    df04:	1808d0fa 	srli	r4,r3,3
    df08:	8822d0fa 	srli	r17,r17,3
    df0c:	1806977a 	slli	r3,r3,29
    df10:	2080022c 	andhi	r2,r4,8
    df14:	1c62b03a 	or	r17,r3,r17
    df18:	10000826 	beq	r2,zero,df3c <__subdf3+0x75c>
    df1c:	2812d0fa 	srli	r9,r5,3
    df20:	4880022c 	andhi	r2,r9,8
    df24:	1000051e 	bne	r2,zero,df3c <__subdf3+0x75c>
    df28:	300cd0fa 	srli	r6,r6,3
    df2c:	2804977a 	slli	r2,r5,29
    df30:	4809883a 	mov	r4,r9
    df34:	3825883a 	mov	r18,r7
    df38:	11a2b03a 	or	r17,r2,r6
    df3c:	8806d77a 	srli	r3,r17,29
    df40:	200890fa 	slli	r4,r4,3
    df44:	882290fa 	slli	r17,r17,3
    df48:	0401ffc4 	movi	r16,2047
    df4c:	1906b03a 	or	r3,r3,r4
    df50:	003e4406 	br	d864 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d864>
    df54:	2984b03a 	or	r2,r5,r6
    df58:	103e4226 	beq	r2,zero,d864 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d864>
    df5c:	8989c83a 	sub	r4,r17,r6
    df60:	8911803a 	cmpltu	r8,r17,r4
    df64:	1945c83a 	sub	r2,r3,r5
    df68:	1205c83a 	sub	r2,r2,r8
    df6c:	1200202c 	andhi	r8,r2,128
    df70:	403e9a26 	beq	r8,zero,d9dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d9dc>
    df74:	3463c83a 	sub	r17,r6,r17
    df78:	28c5c83a 	sub	r2,r5,r3
    df7c:	344d803a 	cmpltu	r6,r6,r17
    df80:	1187c83a 	sub	r3,r2,r6
    df84:	3825883a 	mov	r18,r7
    df88:	003e3606 	br	d864 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d864>
    df8c:	0101ffc4 	movi	r4,2047
    df90:	493fc71e 	bne	r9,r4,deb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700deb0>
    df94:	2807883a 	mov	r3,r5
    df98:	3023883a 	mov	r17,r6
    df9c:	4821883a 	mov	r16,r9
    dfa0:	003e3006 	br	d864 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d864>
    dfa4:	10003626 	beq	r2,zero,e080 <__subdf3+0x8a0>
    dfa8:	2984b03a 	or	r2,r5,r6
    dfac:	10001726 	beq	r2,zero,e00c <__subdf3+0x82c>
    dfb0:	1808d0fa 	srli	r4,r3,3
    dfb4:	8822d0fa 	srli	r17,r17,3
    dfb8:	1806977a 	slli	r3,r3,29
    dfbc:	2080022c 	andhi	r2,r4,8
    dfc0:	1c62b03a 	or	r17,r3,r17
    dfc4:	10000726 	beq	r2,zero,dfe4 <__subdf3+0x804>
    dfc8:	2812d0fa 	srli	r9,r5,3
    dfcc:	4880022c 	andhi	r2,r9,8
    dfd0:	1000041e 	bne	r2,zero,dfe4 <__subdf3+0x804>
    dfd4:	300cd0fa 	srli	r6,r6,3
    dfd8:	2804977a 	slli	r2,r5,29
    dfdc:	4809883a 	mov	r4,r9
    dfe0:	11a2b03a 	or	r17,r2,r6
    dfe4:	8806d77a 	srli	r3,r17,29
    dfe8:	200890fa 	slli	r4,r4,3
    dfec:	882290fa 	slli	r17,r17,3
    dff0:	3825883a 	mov	r18,r7
    dff4:	1906b03a 	or	r3,r3,r4
    dff8:	0401ffc4 	movi	r16,2047
    dffc:	003e1906 	br	d864 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d864>
    e000:	000b883a 	mov	r5,zero
    e004:	0005883a 	mov	r2,zero
    e008:	003e2e06 	br	d8c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d8c4>
    e00c:	0401ffc4 	movi	r16,2047
    e010:	003e1406 	br	d864 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d864>
    e014:	0005883a 	mov	r2,zero
    e018:	003f7506 	br	ddf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ddf0>
    e01c:	0005883a 	mov	r2,zero
    e020:	0009883a 	mov	r4,zero
    e024:	003e7806 	br	da08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da08>
    e028:	123ff804 	addi	r8,r2,-32
    e02c:	01000804 	movi	r4,32
    e030:	1a10d83a 	srl	r8,r3,r8
    e034:	11002526 	beq	r2,r4,e0cc <__subdf3+0x8ec>
    e038:	01001004 	movi	r4,64
    e03c:	2085c83a 	sub	r2,r4,r2
    e040:	1884983a 	sll	r2,r3,r2
    e044:	1444b03a 	or	r2,r2,r17
    e048:	1004c03a 	cmpne	r2,r2,zero
    e04c:	40a2b03a 	or	r17,r8,r2
    e050:	0005883a 	mov	r2,zero
    e054:	003f1606 	br	dcb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dcb0>
    e058:	02000434 	movhi	r8,16
    e05c:	0009883a 	mov	r4,zero
    e060:	423fffc4 	addi	r8,r8,-1
    e064:	00bfffc4 	movi	r2,-1
    e068:	0401ffc4 	movi	r16,2047
    e06c:	003e6606 	br	da08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da08>
    e070:	1c62b03a 	or	r17,r3,r17
    e074:	8822c03a 	cmpne	r17,r17,zero
    e078:	0005883a 	mov	r2,zero
    e07c:	003f9906 	br	dee4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dee4>
    e080:	2807883a 	mov	r3,r5
    e084:	3023883a 	mov	r17,r6
    e088:	0401ffc4 	movi	r16,2047
    e08c:	003df506 	br	d864 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d864>
    e090:	2807883a 	mov	r3,r5
    e094:	3023883a 	mov	r17,r6
    e098:	003df206 	br	d864 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d864>
    e09c:	123ff804 	addi	r8,r2,-32
    e0a0:	01000804 	movi	r4,32
    e0a4:	1a10d83a 	srl	r8,r3,r8
    e0a8:	11000a26 	beq	r2,r4,e0d4 <__subdf3+0x8f4>
    e0ac:	01001004 	movi	r4,64
    e0b0:	2085c83a 	sub	r2,r4,r2
    e0b4:	1884983a 	sll	r2,r3,r2
    e0b8:	1444b03a 	or	r2,r2,r17
    e0bc:	1004c03a 	cmpne	r2,r2,zero
    e0c0:	40a2b03a 	or	r17,r8,r2
    e0c4:	0005883a 	mov	r2,zero
    e0c8:	003f8606 	br	dee4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dee4>
    e0cc:	0005883a 	mov	r2,zero
    e0d0:	003fdc06 	br	e044 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e044>
    e0d4:	0005883a 	mov	r2,zero
    e0d8:	003ff706 	br	e0b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0b8>

0000e0dc <__fixdfsi>:
    e0dc:	280cd53a 	srli	r6,r5,20
    e0e0:	00c00434 	movhi	r3,16
    e0e4:	18ffffc4 	addi	r3,r3,-1
    e0e8:	3181ffcc 	andi	r6,r6,2047
    e0ec:	01c0ff84 	movi	r7,1022
    e0f0:	28c6703a 	and	r3,r5,r3
    e0f4:	280ad7fa 	srli	r5,r5,31
    e0f8:	3980120e 	bge	r7,r6,e144 <__fixdfsi+0x68>
    e0fc:	00810744 	movi	r2,1053
    e100:	11800c16 	blt	r2,r6,e134 <__fixdfsi+0x58>
    e104:	00810cc4 	movi	r2,1075
    e108:	1185c83a 	sub	r2,r2,r6
    e10c:	01c007c4 	movi	r7,31
    e110:	18c00434 	orhi	r3,r3,16
    e114:	38800d16 	blt	r7,r2,e14c <__fixdfsi+0x70>
    e118:	31befb44 	addi	r6,r6,-1043
    e11c:	2084d83a 	srl	r2,r4,r2
    e120:	1986983a 	sll	r3,r3,r6
    e124:	1884b03a 	or	r2,r3,r2
    e128:	28000726 	beq	r5,zero,e148 <__fixdfsi+0x6c>
    e12c:	0085c83a 	sub	r2,zero,r2
    e130:	f800283a 	ret
    e134:	00a00034 	movhi	r2,32768
    e138:	10bfffc4 	addi	r2,r2,-1
    e13c:	2885883a 	add	r2,r5,r2
    e140:	f800283a 	ret
    e144:	0005883a 	mov	r2,zero
    e148:	f800283a 	ret
    e14c:	008104c4 	movi	r2,1043
    e150:	1185c83a 	sub	r2,r2,r6
    e154:	1884d83a 	srl	r2,r3,r2
    e158:	003ff306 	br	e128 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e128>

0000e15c <__floatsidf>:
    e15c:	defffd04 	addi	sp,sp,-12
    e160:	dfc00215 	stw	ra,8(sp)
    e164:	dc400115 	stw	r17,4(sp)
    e168:	dc000015 	stw	r16,0(sp)
    e16c:	20002b26 	beq	r4,zero,e21c <__floatsidf+0xc0>
    e170:	2023883a 	mov	r17,r4
    e174:	2020d7fa 	srli	r16,r4,31
    e178:	20002d16 	blt	r4,zero,e230 <__floatsidf+0xd4>
    e17c:	8809883a 	mov	r4,r17
    e180:	000e2e00 	call	e2e0 <__clzsi2>
    e184:	01410784 	movi	r5,1054
    e188:	288bc83a 	sub	r5,r5,r2
    e18c:	01010cc4 	movi	r4,1075
    e190:	2149c83a 	sub	r4,r4,r5
    e194:	00c007c4 	movi	r3,31
    e198:	1900160e 	bge	r3,r4,e1f4 <__floatsidf+0x98>
    e19c:	00c104c4 	movi	r3,1043
    e1a0:	1947c83a 	sub	r3,r3,r5
    e1a4:	88c6983a 	sll	r3,r17,r3
    e1a8:	00800434 	movhi	r2,16
    e1ac:	10bfffc4 	addi	r2,r2,-1
    e1b0:	1886703a 	and	r3,r3,r2
    e1b4:	2941ffcc 	andi	r5,r5,2047
    e1b8:	800d883a 	mov	r6,r16
    e1bc:	0005883a 	mov	r2,zero
    e1c0:	280a953a 	slli	r5,r5,20
    e1c4:	31803fcc 	andi	r6,r6,255
    e1c8:	01000434 	movhi	r4,16
    e1cc:	300c97fa 	slli	r6,r6,31
    e1d0:	213fffc4 	addi	r4,r4,-1
    e1d4:	1906703a 	and	r3,r3,r4
    e1d8:	1946b03a 	or	r3,r3,r5
    e1dc:	1986b03a 	or	r3,r3,r6
    e1e0:	dfc00217 	ldw	ra,8(sp)
    e1e4:	dc400117 	ldw	r17,4(sp)
    e1e8:	dc000017 	ldw	r16,0(sp)
    e1ec:	dec00304 	addi	sp,sp,12
    e1f0:	f800283a 	ret
    e1f4:	00c002c4 	movi	r3,11
    e1f8:	1887c83a 	sub	r3,r3,r2
    e1fc:	88c6d83a 	srl	r3,r17,r3
    e200:	8904983a 	sll	r2,r17,r4
    e204:	01000434 	movhi	r4,16
    e208:	213fffc4 	addi	r4,r4,-1
    e20c:	2941ffcc 	andi	r5,r5,2047
    e210:	1906703a 	and	r3,r3,r4
    e214:	800d883a 	mov	r6,r16
    e218:	003fe906 	br	e1c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e1c0>
    e21c:	000d883a 	mov	r6,zero
    e220:	000b883a 	mov	r5,zero
    e224:	0007883a 	mov	r3,zero
    e228:	0005883a 	mov	r2,zero
    e22c:	003fe406 	br	e1c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e1c0>
    e230:	0123c83a 	sub	r17,zero,r4
    e234:	003fd106 	br	e17c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e17c>

0000e238 <__floatunsidf>:
    e238:	defffe04 	addi	sp,sp,-8
    e23c:	dc000015 	stw	r16,0(sp)
    e240:	dfc00115 	stw	ra,4(sp)
    e244:	2021883a 	mov	r16,r4
    e248:	20002226 	beq	r4,zero,e2d4 <__floatunsidf+0x9c>
    e24c:	000e2e00 	call	e2e0 <__clzsi2>
    e250:	01010784 	movi	r4,1054
    e254:	2089c83a 	sub	r4,r4,r2
    e258:	01810cc4 	movi	r6,1075
    e25c:	310dc83a 	sub	r6,r6,r4
    e260:	00c007c4 	movi	r3,31
    e264:	1980120e 	bge	r3,r6,e2b0 <__floatunsidf+0x78>
    e268:	00c104c4 	movi	r3,1043
    e26c:	1907c83a 	sub	r3,r3,r4
    e270:	80ca983a 	sll	r5,r16,r3
    e274:	00800434 	movhi	r2,16
    e278:	10bfffc4 	addi	r2,r2,-1
    e27c:	2101ffcc 	andi	r4,r4,2047
    e280:	0021883a 	mov	r16,zero
    e284:	288a703a 	and	r5,r5,r2
    e288:	2008953a 	slli	r4,r4,20
    e28c:	00c00434 	movhi	r3,16
    e290:	18ffffc4 	addi	r3,r3,-1
    e294:	28c6703a 	and	r3,r5,r3
    e298:	8005883a 	mov	r2,r16
    e29c:	1906b03a 	or	r3,r3,r4
    e2a0:	dfc00117 	ldw	ra,4(sp)
    e2a4:	dc000017 	ldw	r16,0(sp)
    e2a8:	dec00204 	addi	sp,sp,8
    e2ac:	f800283a 	ret
    e2b0:	00c002c4 	movi	r3,11
    e2b4:	188bc83a 	sub	r5,r3,r2
    e2b8:	814ad83a 	srl	r5,r16,r5
    e2bc:	00c00434 	movhi	r3,16
    e2c0:	18ffffc4 	addi	r3,r3,-1
    e2c4:	81a0983a 	sll	r16,r16,r6
    e2c8:	2101ffcc 	andi	r4,r4,2047
    e2cc:	28ca703a 	and	r5,r5,r3
    e2d0:	003fed06 	br	e288 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e288>
    e2d4:	0009883a 	mov	r4,zero
    e2d8:	000b883a 	mov	r5,zero
    e2dc:	003fea06 	br	e288 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e288>

0000e2e0 <__clzsi2>:
    e2e0:	00bfffd4 	movui	r2,65535
    e2e4:	11000536 	bltu	r2,r4,e2fc <__clzsi2+0x1c>
    e2e8:	00803fc4 	movi	r2,255
    e2ec:	11000f36 	bltu	r2,r4,e32c <__clzsi2+0x4c>
    e2f0:	00800804 	movi	r2,32
    e2f4:	0007883a 	mov	r3,zero
    e2f8:	00000506 	br	e310 <__clzsi2+0x30>
    e2fc:	00804034 	movhi	r2,256
    e300:	10bfffc4 	addi	r2,r2,-1
    e304:	11000c2e 	bgeu	r2,r4,e338 <__clzsi2+0x58>
    e308:	00800204 	movi	r2,8
    e30c:	00c00604 	movi	r3,24
    e310:	20c8d83a 	srl	r4,r4,r3
    e314:	00c000b4 	movhi	r3,2
    e318:	18ebff04 	addi	r3,r3,-20484
    e31c:	1909883a 	add	r4,r3,r4
    e320:	20c00003 	ldbu	r3,0(r4)
    e324:	10c5c83a 	sub	r2,r2,r3
    e328:	f800283a 	ret
    e32c:	00800604 	movi	r2,24
    e330:	00c00204 	movi	r3,8
    e334:	003ff606 	br	e310 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e310>
    e338:	00800404 	movi	r2,16
    e33c:	1007883a 	mov	r3,r2
    e340:	003ff306 	br	e310 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e310>

0000e344 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e344:	defffe04 	addi	sp,sp,-8
    e348:	dfc00115 	stw	ra,4(sp)
    e34c:	df000015 	stw	fp,0(sp)
    e350:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e354:	d0a00b17 	ldw	r2,-32724(gp)
    e358:	10000326 	beq	r2,zero,e368 <alt_get_errno+0x24>
    e35c:	d0a00b17 	ldw	r2,-32724(gp)
    e360:	103ee83a 	callr	r2
    e364:	00000106 	br	e36c <alt_get_errno+0x28>
    e368:	d0a82f04 	addi	r2,gp,-24388
}
    e36c:	e037883a 	mov	sp,fp
    e370:	dfc00117 	ldw	ra,4(sp)
    e374:	df000017 	ldw	fp,0(sp)
    e378:	dec00204 	addi	sp,sp,8
    e37c:	f800283a 	ret

0000e380 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    e380:	defffb04 	addi	sp,sp,-20
    e384:	dfc00415 	stw	ra,16(sp)
    e388:	df000315 	stw	fp,12(sp)
    e38c:	df000304 	addi	fp,sp,12
    e390:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    e394:	e0bfff17 	ldw	r2,-4(fp)
    e398:	10000616 	blt	r2,zero,e3b4 <close+0x34>
    e39c:	e0bfff17 	ldw	r2,-4(fp)
    e3a0:	10c00324 	muli	r3,r2,12
    e3a4:	008000b4 	movhi	r2,2
    e3a8:	10af5d04 	addi	r2,r2,-17036
    e3ac:	1885883a 	add	r2,r3,r2
    e3b0:	00000106 	br	e3b8 <close+0x38>
    e3b4:	0005883a 	mov	r2,zero
    e3b8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    e3bc:	e0bffd17 	ldw	r2,-12(fp)
    e3c0:	10001926 	beq	r2,zero,e428 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e3c4:	e0bffd17 	ldw	r2,-12(fp)
    e3c8:	10800017 	ldw	r2,0(r2)
    e3cc:	10800417 	ldw	r2,16(r2)
    e3d0:	10000626 	beq	r2,zero,e3ec <close+0x6c>
    e3d4:	e0bffd17 	ldw	r2,-12(fp)
    e3d8:	10800017 	ldw	r2,0(r2)
    e3dc:	10800417 	ldw	r2,16(r2)
    e3e0:	e13ffd17 	ldw	r4,-12(fp)
    e3e4:	103ee83a 	callr	r2
    e3e8:	00000106 	br	e3f0 <close+0x70>
    e3ec:	0005883a 	mov	r2,zero
    e3f0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e3f4:	e13fff17 	ldw	r4,-4(fp)
    e3f8:	000ea380 	call	ea38 <alt_release_fd>
    if (rval < 0)
    e3fc:	e0bffe17 	ldw	r2,-8(fp)
    e400:	1000070e 	bge	r2,zero,e420 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    e404:	000e3440 	call	e344 <alt_get_errno>
    e408:	1007883a 	mov	r3,r2
    e40c:	e0bffe17 	ldw	r2,-8(fp)
    e410:	0085c83a 	sub	r2,zero,r2
    e414:	18800015 	stw	r2,0(r3)
      return -1;
    e418:	00bfffc4 	movi	r2,-1
    e41c:	00000706 	br	e43c <close+0xbc>
    }
    return 0;
    e420:	0005883a 	mov	r2,zero
    e424:	00000506 	br	e43c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e428:	000e3440 	call	e344 <alt_get_errno>
    e42c:	1007883a 	mov	r3,r2
    e430:	00801444 	movi	r2,81
    e434:	18800015 	stw	r2,0(r3)
    return -1;
    e438:	00bfffc4 	movi	r2,-1
  }
}
    e43c:	e037883a 	mov	sp,fp
    e440:	dfc00117 	ldw	ra,4(sp)
    e444:	df000017 	ldw	fp,0(sp)
    e448:	dec00204 	addi	sp,sp,8
    e44c:	f800283a 	ret

0000e450 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    e450:	defffc04 	addi	sp,sp,-16
    e454:	df000315 	stw	fp,12(sp)
    e458:	df000304 	addi	fp,sp,12
    e45c:	e13ffd15 	stw	r4,-12(fp)
    e460:	e17ffe15 	stw	r5,-8(fp)
    e464:	e1bfff15 	stw	r6,-4(fp)
  return len;
    e468:	e0bfff17 	ldw	r2,-4(fp)
}
    e46c:	e037883a 	mov	sp,fp
    e470:	df000017 	ldw	fp,0(sp)
    e474:	dec00104 	addi	sp,sp,4
    e478:	f800283a 	ret

0000e47c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e47c:	defffe04 	addi	sp,sp,-8
    e480:	dfc00115 	stw	ra,4(sp)
    e484:	df000015 	stw	fp,0(sp)
    e488:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e48c:	d0a00b17 	ldw	r2,-32724(gp)
    e490:	10000326 	beq	r2,zero,e4a0 <alt_get_errno+0x24>
    e494:	d0a00b17 	ldw	r2,-32724(gp)
    e498:	103ee83a 	callr	r2
    e49c:	00000106 	br	e4a4 <alt_get_errno+0x28>
    e4a0:	d0a82f04 	addi	r2,gp,-24388
}
    e4a4:	e037883a 	mov	sp,fp
    e4a8:	dfc00117 	ldw	ra,4(sp)
    e4ac:	df000017 	ldw	fp,0(sp)
    e4b0:	dec00204 	addi	sp,sp,8
    e4b4:	f800283a 	ret

0000e4b8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    e4b8:	defffb04 	addi	sp,sp,-20
    e4bc:	dfc00415 	stw	ra,16(sp)
    e4c0:	df000315 	stw	fp,12(sp)
    e4c4:	df000304 	addi	fp,sp,12
    e4c8:	e13ffe15 	stw	r4,-8(fp)
    e4cc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e4d0:	e0bffe17 	ldw	r2,-8(fp)
    e4d4:	10000616 	blt	r2,zero,e4f0 <fstat+0x38>
    e4d8:	e0bffe17 	ldw	r2,-8(fp)
    e4dc:	10c00324 	muli	r3,r2,12
    e4e0:	008000b4 	movhi	r2,2
    e4e4:	10af5d04 	addi	r2,r2,-17036
    e4e8:	1885883a 	add	r2,r3,r2
    e4ec:	00000106 	br	e4f4 <fstat+0x3c>
    e4f0:	0005883a 	mov	r2,zero
    e4f4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    e4f8:	e0bffd17 	ldw	r2,-12(fp)
    e4fc:	10001026 	beq	r2,zero,e540 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    e500:	e0bffd17 	ldw	r2,-12(fp)
    e504:	10800017 	ldw	r2,0(r2)
    e508:	10800817 	ldw	r2,32(r2)
    e50c:	10000726 	beq	r2,zero,e52c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    e510:	e0bffd17 	ldw	r2,-12(fp)
    e514:	10800017 	ldw	r2,0(r2)
    e518:	10800817 	ldw	r2,32(r2)
    e51c:	e17fff17 	ldw	r5,-4(fp)
    e520:	e13ffd17 	ldw	r4,-12(fp)
    e524:	103ee83a 	callr	r2
    e528:	00000a06 	br	e554 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    e52c:	e0bfff17 	ldw	r2,-4(fp)
    e530:	00c80004 	movi	r3,8192
    e534:	10c00115 	stw	r3,4(r2)
      return 0;
    e538:	0005883a 	mov	r2,zero
    e53c:	00000506 	br	e554 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e540:	000e47c0 	call	e47c <alt_get_errno>
    e544:	1007883a 	mov	r3,r2
    e548:	00801444 	movi	r2,81
    e54c:	18800015 	stw	r2,0(r3)
    return -1;
    e550:	00bfffc4 	movi	r2,-1
  }
}
    e554:	e037883a 	mov	sp,fp
    e558:	dfc00117 	ldw	ra,4(sp)
    e55c:	df000017 	ldw	fp,0(sp)
    e560:	dec00204 	addi	sp,sp,8
    e564:	f800283a 	ret

0000e568 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e568:	defffe04 	addi	sp,sp,-8
    e56c:	dfc00115 	stw	ra,4(sp)
    e570:	df000015 	stw	fp,0(sp)
    e574:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e578:	d0a00b17 	ldw	r2,-32724(gp)
    e57c:	10000326 	beq	r2,zero,e58c <alt_get_errno+0x24>
    e580:	d0a00b17 	ldw	r2,-32724(gp)
    e584:	103ee83a 	callr	r2
    e588:	00000106 	br	e590 <alt_get_errno+0x28>
    e58c:	d0a82f04 	addi	r2,gp,-24388
}
    e590:	e037883a 	mov	sp,fp
    e594:	dfc00117 	ldw	ra,4(sp)
    e598:	df000017 	ldw	fp,0(sp)
    e59c:	dec00204 	addi	sp,sp,8
    e5a0:	f800283a 	ret

0000e5a4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    e5a4:	deffed04 	addi	sp,sp,-76
    e5a8:	dfc01215 	stw	ra,72(sp)
    e5ac:	df001115 	stw	fp,68(sp)
    e5b0:	df001104 	addi	fp,sp,68
    e5b4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e5b8:	e0bfff17 	ldw	r2,-4(fp)
    e5bc:	10000616 	blt	r2,zero,e5d8 <isatty+0x34>
    e5c0:	e0bfff17 	ldw	r2,-4(fp)
    e5c4:	10c00324 	muli	r3,r2,12
    e5c8:	008000b4 	movhi	r2,2
    e5cc:	10af5d04 	addi	r2,r2,-17036
    e5d0:	1885883a 	add	r2,r3,r2
    e5d4:	00000106 	br	e5dc <isatty+0x38>
    e5d8:	0005883a 	mov	r2,zero
    e5dc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    e5e0:	e0bfef17 	ldw	r2,-68(fp)
    e5e4:	10000e26 	beq	r2,zero,e620 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    e5e8:	e0bfef17 	ldw	r2,-68(fp)
    e5ec:	10800017 	ldw	r2,0(r2)
    e5f0:	10800817 	ldw	r2,32(r2)
    e5f4:	1000021e 	bne	r2,zero,e600 <isatty+0x5c>
    {
      return 1;
    e5f8:	00800044 	movi	r2,1
    e5fc:	00000d06 	br	e634 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    e600:	e0bff004 	addi	r2,fp,-64
    e604:	100b883a 	mov	r5,r2
    e608:	e13fff17 	ldw	r4,-4(fp)
    e60c:	000e4b80 	call	e4b8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    e610:	e0bff117 	ldw	r2,-60(fp)
    e614:	10880020 	cmpeqi	r2,r2,8192
    e618:	10803fcc 	andi	r2,r2,255
    e61c:	00000506 	br	e634 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e620:	000e5680 	call	e568 <alt_get_errno>
    e624:	1007883a 	mov	r3,r2
    e628:	00801444 	movi	r2,81
    e62c:	18800015 	stw	r2,0(r3)
    return 0;
    e630:	0005883a 	mov	r2,zero
  }
}
    e634:	e037883a 	mov	sp,fp
    e638:	dfc00117 	ldw	ra,4(sp)
    e63c:	df000017 	ldw	fp,0(sp)
    e640:	dec00204 	addi	sp,sp,8
    e644:	f800283a 	ret

0000e648 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    e648:	defffc04 	addi	sp,sp,-16
    e64c:	df000315 	stw	fp,12(sp)
    e650:	df000304 	addi	fp,sp,12
    e654:	e13ffd15 	stw	r4,-12(fp)
    e658:	e17ffe15 	stw	r5,-8(fp)
    e65c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    e660:	e0fffe17 	ldw	r3,-8(fp)
    e664:	e0bffd17 	ldw	r2,-12(fp)
    e668:	18800c26 	beq	r3,r2,e69c <alt_load_section+0x54>
  {
    while( to != end )
    e66c:	00000806 	br	e690 <alt_load_section+0x48>
    {
      *to++ = *from++;
    e670:	e0bffe17 	ldw	r2,-8(fp)
    e674:	10c00104 	addi	r3,r2,4
    e678:	e0fffe15 	stw	r3,-8(fp)
    e67c:	e0fffd17 	ldw	r3,-12(fp)
    e680:	19000104 	addi	r4,r3,4
    e684:	e13ffd15 	stw	r4,-12(fp)
    e688:	18c00017 	ldw	r3,0(r3)
    e68c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    e690:	e0fffe17 	ldw	r3,-8(fp)
    e694:	e0bfff17 	ldw	r2,-4(fp)
    e698:	18bff51e 	bne	r3,r2,e670 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e670>
    {
      *to++ = *from++;
    }
  }
}
    e69c:	0001883a 	nop
    e6a0:	e037883a 	mov	sp,fp
    e6a4:	df000017 	ldw	fp,0(sp)
    e6a8:	dec00104 	addi	sp,sp,4
    e6ac:	f800283a 	ret

0000e6b0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    e6b0:	defffe04 	addi	sp,sp,-8
    e6b4:	dfc00115 	stw	ra,4(sp)
    e6b8:	df000015 	stw	fp,0(sp)
    e6bc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    e6c0:	018000b4 	movhi	r6,2
    e6c4:	31b4ca04 	addi	r6,r6,-11480
    e6c8:	014000b4 	movhi	r5,2
    e6cc:	296ce604 	addi	r5,r5,-19560
    e6d0:	010000b4 	movhi	r4,2
    e6d4:	2134ca04 	addi	r4,r4,-11480
    e6d8:	000e6480 	call	e648 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    e6dc:	01800034 	movhi	r6,0
    e6e0:	31809204 	addi	r6,r6,584
    e6e4:	01400034 	movhi	r5,0
    e6e8:	29400804 	addi	r5,r5,32
    e6ec:	01000034 	movhi	r4,0
    e6f0:	21000804 	addi	r4,r4,32
    e6f4:	000e6480 	call	e648 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    e6f8:	018000b4 	movhi	r6,2
    e6fc:	31ace604 	addi	r6,r6,-19560
    e700:	014000b4 	movhi	r5,2
    e704:	2969a904 	addi	r5,r5,-22876
    e708:	010000b4 	movhi	r4,2
    e70c:	2129a904 	addi	r4,r4,-22876
    e710:	000e6480 	call	e648 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    e714:	00193480 	call	19348 <alt_dcache_flush_all>
  alt_icache_flush_all();
    e718:	00195980 	call	19598 <alt_icache_flush_all>
}
    e71c:	0001883a 	nop
    e720:	e037883a 	mov	sp,fp
    e724:	dfc00117 	ldw	ra,4(sp)
    e728:	df000017 	ldw	fp,0(sp)
    e72c:	dec00204 	addi	sp,sp,8
    e730:	f800283a 	ret

0000e734 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e734:	defffe04 	addi	sp,sp,-8
    e738:	dfc00115 	stw	ra,4(sp)
    e73c:	df000015 	stw	fp,0(sp)
    e740:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e744:	d0a00b17 	ldw	r2,-32724(gp)
    e748:	10000326 	beq	r2,zero,e758 <alt_get_errno+0x24>
    e74c:	d0a00b17 	ldw	r2,-32724(gp)
    e750:	103ee83a 	callr	r2
    e754:	00000106 	br	e75c <alt_get_errno+0x28>
    e758:	d0a82f04 	addi	r2,gp,-24388
}
    e75c:	e037883a 	mov	sp,fp
    e760:	dfc00117 	ldw	ra,4(sp)
    e764:	df000017 	ldw	fp,0(sp)
    e768:	dec00204 	addi	sp,sp,8
    e76c:	f800283a 	ret

0000e770 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    e770:	defff904 	addi	sp,sp,-28
    e774:	dfc00615 	stw	ra,24(sp)
    e778:	df000515 	stw	fp,20(sp)
    e77c:	df000504 	addi	fp,sp,20
    e780:	e13ffd15 	stw	r4,-12(fp)
    e784:	e17ffe15 	stw	r5,-8(fp)
    e788:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    e78c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e790:	e0bffd17 	ldw	r2,-12(fp)
    e794:	10000616 	blt	r2,zero,e7b0 <lseek+0x40>
    e798:	e0bffd17 	ldw	r2,-12(fp)
    e79c:	10c00324 	muli	r3,r2,12
    e7a0:	008000b4 	movhi	r2,2
    e7a4:	10af5d04 	addi	r2,r2,-17036
    e7a8:	1885883a 	add	r2,r3,r2
    e7ac:	00000106 	br	e7b4 <lseek+0x44>
    e7b0:	0005883a 	mov	r2,zero
    e7b4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    e7b8:	e0bffc17 	ldw	r2,-16(fp)
    e7bc:	10001026 	beq	r2,zero,e800 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    e7c0:	e0bffc17 	ldw	r2,-16(fp)
    e7c4:	10800017 	ldw	r2,0(r2)
    e7c8:	10800717 	ldw	r2,28(r2)
    e7cc:	10000926 	beq	r2,zero,e7f4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    e7d0:	e0bffc17 	ldw	r2,-16(fp)
    e7d4:	10800017 	ldw	r2,0(r2)
    e7d8:	10800717 	ldw	r2,28(r2)
    e7dc:	e1bfff17 	ldw	r6,-4(fp)
    e7e0:	e17ffe17 	ldw	r5,-8(fp)
    e7e4:	e13ffc17 	ldw	r4,-16(fp)
    e7e8:	103ee83a 	callr	r2
    e7ec:	e0bffb15 	stw	r2,-20(fp)
    e7f0:	00000506 	br	e808 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    e7f4:	00bfde84 	movi	r2,-134
    e7f8:	e0bffb15 	stw	r2,-20(fp)
    e7fc:	00000206 	br	e808 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    e800:	00bfebc4 	movi	r2,-81
    e804:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    e808:	e0bffb17 	ldw	r2,-20(fp)
    e80c:	1000070e 	bge	r2,zero,e82c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    e810:	000e7340 	call	e734 <alt_get_errno>
    e814:	1007883a 	mov	r3,r2
    e818:	e0bffb17 	ldw	r2,-20(fp)
    e81c:	0085c83a 	sub	r2,zero,r2
    e820:	18800015 	stw	r2,0(r3)
    rc = -1;
    e824:	00bfffc4 	movi	r2,-1
    e828:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    e82c:	e0bffb17 	ldw	r2,-20(fp)
}
    e830:	e037883a 	mov	sp,fp
    e834:	dfc00117 	ldw	ra,4(sp)
    e838:	df000017 	ldw	fp,0(sp)
    e83c:	dec00204 	addi	sp,sp,8
    e840:	f800283a 	ret

0000e844 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    e844:	defff904 	addi	sp,sp,-28
    e848:	dfc00615 	stw	ra,24(sp)
    e84c:	df000515 	stw	fp,20(sp)
    e850:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    e854:	0009883a 	mov	r4,zero
    e858:	00167a40 	call	167a4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    e85c:	000f8000 	call	f800 <OSInit>
    e860:	01000044 	movi	r4,1
    e864:	00141600 	call	14160 <OSSemCreate>
    e868:	d0a83515 	stw	r2,-24364(gp)
    e86c:	01000044 	movi	r4,1
    e870:	00141600 	call	14160 <OSSemCreate>
    e874:	d0a83715 	stw	r2,-24356(gp)
    e878:	d0a83004 	addi	r2,gp,-24384
    e87c:	e0bffc15 	stw	r2,-16(fp)
    e880:	00800044 	movi	r2,1
    e884:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    e888:	e0bffd0b 	ldhu	r2,-12(fp)
    e88c:	1009883a 	mov	r4,r2
    e890:	00141600 	call	14160 <OSSemCreate>
    e894:	1007883a 	mov	r3,r2
    e898:	e0bffc17 	ldw	r2,-16(fp)
    e89c:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    e8a0:	00167dc0 	call	167dc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    e8a4:	018000b4 	movhi	r6,2
    e8a8:	31ac4204 	addi	r6,r6,-20216
    e8ac:	014000b4 	movhi	r5,2
    e8b0:	296c4204 	addi	r5,r5,-20216
    e8b4:	010000b4 	movhi	r4,2
    e8b8:	212c4204 	addi	r4,r4,-20216
    e8bc:	00196900 	call	19690 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    e8c0:	00194480 	call	19448 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    e8c4:	010000b4 	movhi	r4,2
    e8c8:	21252a04 	addi	r4,r4,-27480
    e8cc:	001a3100 	call	1a310 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    e8d0:	d0a83117 	ldw	r2,-24380(gp)
    e8d4:	d0e83217 	ldw	r3,-24376(gp)
    e8d8:	d1283317 	ldw	r4,-24372(gp)
    e8dc:	200d883a 	mov	r6,r4
    e8e0:	180b883a 	mov	r5,r3
    e8e4:	1009883a 	mov	r4,r2
    e8e8:	00015800 	call	1580 <main>
    e8ec:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    e8f0:	01000044 	movi	r4,1
    e8f4:	000e3800 	call	e380 <close>
  exit (result);
    e8f8:	e13ffb17 	ldw	r4,-20(fp)
    e8fc:	001a3240 	call	1a324 <exit>

0000e900 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e900:	defffe04 	addi	sp,sp,-8
    e904:	dfc00115 	stw	ra,4(sp)
    e908:	df000015 	stw	fp,0(sp)
    e90c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e910:	d0a00b17 	ldw	r2,-32724(gp)
    e914:	10000326 	beq	r2,zero,e924 <alt_get_errno+0x24>
    e918:	d0a00b17 	ldw	r2,-32724(gp)
    e91c:	103ee83a 	callr	r2
    e920:	00000106 	br	e928 <alt_get_errno+0x28>
    e924:	d0a82f04 	addi	r2,gp,-24388
}
    e928:	e037883a 	mov	sp,fp
    e92c:	dfc00117 	ldw	ra,4(sp)
    e930:	df000017 	ldw	fp,0(sp)
    e934:	dec00204 	addi	sp,sp,8
    e938:	f800283a 	ret

0000e93c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    e93c:	defff904 	addi	sp,sp,-28
    e940:	dfc00615 	stw	ra,24(sp)
    e944:	df000515 	stw	fp,20(sp)
    e948:	df000504 	addi	fp,sp,20
    e94c:	e13ffd15 	stw	r4,-12(fp)
    e950:	e17ffe15 	stw	r5,-8(fp)
    e954:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e958:	e0bffd17 	ldw	r2,-12(fp)
    e95c:	10000616 	blt	r2,zero,e978 <read+0x3c>
    e960:	e0bffd17 	ldw	r2,-12(fp)
    e964:	10c00324 	muli	r3,r2,12
    e968:	008000b4 	movhi	r2,2
    e96c:	10af5d04 	addi	r2,r2,-17036
    e970:	1885883a 	add	r2,r3,r2
    e974:	00000106 	br	e97c <read+0x40>
    e978:	0005883a 	mov	r2,zero
    e97c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    e980:	e0bffb17 	ldw	r2,-20(fp)
    e984:	10002226 	beq	r2,zero,ea10 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e988:	e0bffb17 	ldw	r2,-20(fp)
    e98c:	10800217 	ldw	r2,8(r2)
    e990:	108000cc 	andi	r2,r2,3
    e994:	10800060 	cmpeqi	r2,r2,1
    e998:	1000181e 	bne	r2,zero,e9fc <read+0xc0>
        (fd->dev->read))
    e99c:	e0bffb17 	ldw	r2,-20(fp)
    e9a0:	10800017 	ldw	r2,0(r2)
    e9a4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e9a8:	10001426 	beq	r2,zero,e9fc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    e9ac:	e0bffb17 	ldw	r2,-20(fp)
    e9b0:	10800017 	ldw	r2,0(r2)
    e9b4:	10800517 	ldw	r2,20(r2)
    e9b8:	e0ffff17 	ldw	r3,-4(fp)
    e9bc:	180d883a 	mov	r6,r3
    e9c0:	e17ffe17 	ldw	r5,-8(fp)
    e9c4:	e13ffb17 	ldw	r4,-20(fp)
    e9c8:	103ee83a 	callr	r2
    e9cc:	e0bffc15 	stw	r2,-16(fp)
    e9d0:	e0bffc17 	ldw	r2,-16(fp)
    e9d4:	1000070e 	bge	r2,zero,e9f4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    e9d8:	000e9000 	call	e900 <alt_get_errno>
    e9dc:	1007883a 	mov	r3,r2
    e9e0:	e0bffc17 	ldw	r2,-16(fp)
    e9e4:	0085c83a 	sub	r2,zero,r2
    e9e8:	18800015 	stw	r2,0(r3)
          return -1;
    e9ec:	00bfffc4 	movi	r2,-1
    e9f0:	00000c06 	br	ea24 <read+0xe8>
        }
        return rval;
    e9f4:	e0bffc17 	ldw	r2,-16(fp)
    e9f8:	00000a06 	br	ea24 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    e9fc:	000e9000 	call	e900 <alt_get_errno>
    ea00:	1007883a 	mov	r3,r2
    ea04:	00800344 	movi	r2,13
    ea08:	18800015 	stw	r2,0(r3)
    ea0c:	00000406 	br	ea20 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    ea10:	000e9000 	call	e900 <alt_get_errno>
    ea14:	1007883a 	mov	r3,r2
    ea18:	00801444 	movi	r2,81
    ea1c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    ea20:	00bfffc4 	movi	r2,-1
}
    ea24:	e037883a 	mov	sp,fp
    ea28:	dfc00117 	ldw	ra,4(sp)
    ea2c:	df000017 	ldw	fp,0(sp)
    ea30:	dec00204 	addi	sp,sp,8
    ea34:	f800283a 	ret

0000ea38 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    ea38:	defffe04 	addi	sp,sp,-8
    ea3c:	df000115 	stw	fp,4(sp)
    ea40:	df000104 	addi	fp,sp,4
    ea44:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    ea48:	e0bfff17 	ldw	r2,-4(fp)
    ea4c:	108000d0 	cmplti	r2,r2,3
    ea50:	10000d1e 	bne	r2,zero,ea88 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    ea54:	008000b4 	movhi	r2,2
    ea58:	10af5d04 	addi	r2,r2,-17036
    ea5c:	e0ffff17 	ldw	r3,-4(fp)
    ea60:	18c00324 	muli	r3,r3,12
    ea64:	10c5883a 	add	r2,r2,r3
    ea68:	10800204 	addi	r2,r2,8
    ea6c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    ea70:	008000b4 	movhi	r2,2
    ea74:	10af5d04 	addi	r2,r2,-17036
    ea78:	e0ffff17 	ldw	r3,-4(fp)
    ea7c:	18c00324 	muli	r3,r3,12
    ea80:	10c5883a 	add	r2,r2,r3
    ea84:	10000015 	stw	zero,0(r2)
  }
}
    ea88:	0001883a 	nop
    ea8c:	e037883a 	mov	sp,fp
    ea90:	df000017 	ldw	fp,0(sp)
    ea94:	dec00104 	addi	sp,sp,4
    ea98:	f800283a 	ret

0000ea9c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    ea9c:	defff904 	addi	sp,sp,-28
    eaa0:	df000615 	stw	fp,24(sp)
    eaa4:	df000604 	addi	fp,sp,24
    eaa8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eaac:	0005303a 	rdctl	r2,status
    eab0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eab4:	e0fffe17 	ldw	r3,-8(fp)
    eab8:	00bfff84 	movi	r2,-2
    eabc:	1884703a 	and	r2,r3,r2
    eac0:	1001703a 	wrctl	status,r2
  
  return context;
    eac4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    eac8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    eacc:	d0a00c17 	ldw	r2,-32720(gp)
    ead0:	10c000c4 	addi	r3,r2,3
    ead4:	00bfff04 	movi	r2,-4
    ead8:	1884703a 	and	r2,r3,r2
    eadc:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    eae0:	d0e00c17 	ldw	r3,-32720(gp)
    eae4:	e0bfff17 	ldw	r2,-4(fp)
    eae8:	1887883a 	add	r3,r3,r2
    eaec:	00810034 	movhi	r2,1024
    eaf0:	10800004 	addi	r2,r2,0
    eaf4:	10c0062e 	bgeu	r2,r3,eb10 <sbrk+0x74>
    eaf8:	e0bffb17 	ldw	r2,-20(fp)
    eafc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eb00:	e0bffa17 	ldw	r2,-24(fp)
    eb04:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    eb08:	00bfffc4 	movi	r2,-1
    eb0c:	00000b06 	br	eb3c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    eb10:	d0a00c17 	ldw	r2,-32720(gp)
    eb14:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    eb18:	d0e00c17 	ldw	r3,-32720(gp)
    eb1c:	e0bfff17 	ldw	r2,-4(fp)
    eb20:	1885883a 	add	r2,r3,r2
    eb24:	d0a00c15 	stw	r2,-32720(gp)
    eb28:	e0bffb17 	ldw	r2,-20(fp)
    eb2c:	e0bffc15 	stw	r2,-16(fp)
    eb30:	e0bffc17 	ldw	r2,-16(fp)
    eb34:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    eb38:	e0bffd17 	ldw	r2,-12(fp)
} 
    eb3c:	e037883a 	mov	sp,fp
    eb40:	df000017 	ldw	fp,0(sp)
    eb44:	dec00104 	addi	sp,sp,4
    eb48:	f800283a 	ret

0000eb4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    eb4c:	defffe04 	addi	sp,sp,-8
    eb50:	dfc00115 	stw	ra,4(sp)
    eb54:	df000015 	stw	fp,0(sp)
    eb58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    eb5c:	d0a00b17 	ldw	r2,-32724(gp)
    eb60:	10000326 	beq	r2,zero,eb70 <alt_get_errno+0x24>
    eb64:	d0a00b17 	ldw	r2,-32724(gp)
    eb68:	103ee83a 	callr	r2
    eb6c:	00000106 	br	eb74 <alt_get_errno+0x28>
    eb70:	d0a82f04 	addi	r2,gp,-24388
}
    eb74:	e037883a 	mov	sp,fp
    eb78:	dfc00117 	ldw	ra,4(sp)
    eb7c:	df000017 	ldw	fp,0(sp)
    eb80:	dec00204 	addi	sp,sp,8
    eb84:	f800283a 	ret

0000eb88 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    eb88:	defff904 	addi	sp,sp,-28
    eb8c:	dfc00615 	stw	ra,24(sp)
    eb90:	df000515 	stw	fp,20(sp)
    eb94:	df000504 	addi	fp,sp,20
    eb98:	e13ffd15 	stw	r4,-12(fp)
    eb9c:	e17ffe15 	stw	r5,-8(fp)
    eba0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    eba4:	e0bffd17 	ldw	r2,-12(fp)
    eba8:	10000616 	blt	r2,zero,ebc4 <write+0x3c>
    ebac:	e0bffd17 	ldw	r2,-12(fp)
    ebb0:	10c00324 	muli	r3,r2,12
    ebb4:	008000b4 	movhi	r2,2
    ebb8:	10af5d04 	addi	r2,r2,-17036
    ebbc:	1885883a 	add	r2,r3,r2
    ebc0:	00000106 	br	ebc8 <write+0x40>
    ebc4:	0005883a 	mov	r2,zero
    ebc8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    ebcc:	e0bffb17 	ldw	r2,-20(fp)
    ebd0:	10002126 	beq	r2,zero,ec58 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    ebd4:	e0bffb17 	ldw	r2,-20(fp)
    ebd8:	10800217 	ldw	r2,8(r2)
    ebdc:	108000cc 	andi	r2,r2,3
    ebe0:	10001826 	beq	r2,zero,ec44 <write+0xbc>
    ebe4:	e0bffb17 	ldw	r2,-20(fp)
    ebe8:	10800017 	ldw	r2,0(r2)
    ebec:	10800617 	ldw	r2,24(r2)
    ebf0:	10001426 	beq	r2,zero,ec44 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    ebf4:	e0bffb17 	ldw	r2,-20(fp)
    ebf8:	10800017 	ldw	r2,0(r2)
    ebfc:	10800617 	ldw	r2,24(r2)
    ec00:	e0ffff17 	ldw	r3,-4(fp)
    ec04:	180d883a 	mov	r6,r3
    ec08:	e17ffe17 	ldw	r5,-8(fp)
    ec0c:	e13ffb17 	ldw	r4,-20(fp)
    ec10:	103ee83a 	callr	r2
    ec14:	e0bffc15 	stw	r2,-16(fp)
    ec18:	e0bffc17 	ldw	r2,-16(fp)
    ec1c:	1000070e 	bge	r2,zero,ec3c <write+0xb4>
      {
        ALT_ERRNO = -rval;
    ec20:	000eb4c0 	call	eb4c <alt_get_errno>
    ec24:	1007883a 	mov	r3,r2
    ec28:	e0bffc17 	ldw	r2,-16(fp)
    ec2c:	0085c83a 	sub	r2,zero,r2
    ec30:	18800015 	stw	r2,0(r3)
        return -1;
    ec34:	00bfffc4 	movi	r2,-1
    ec38:	00000c06 	br	ec6c <write+0xe4>
      }
      return rval;
    ec3c:	e0bffc17 	ldw	r2,-16(fp)
    ec40:	00000a06 	br	ec6c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    ec44:	000eb4c0 	call	eb4c <alt_get_errno>
    ec48:	1007883a 	mov	r3,r2
    ec4c:	00800344 	movi	r2,13
    ec50:	18800015 	stw	r2,0(r3)
    ec54:	00000406 	br	ec68 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    ec58:	000eb4c0 	call	eb4c <alt_get_errno>
    ec5c:	1007883a 	mov	r3,r2
    ec60:	00801444 	movi	r2,81
    ec64:	18800015 	stw	r2,0(r3)
  }
  return -1;
    ec68:	00bfffc4 	movi	r2,-1
}
    ec6c:	e037883a 	mov	sp,fp
    ec70:	dfc00117 	ldw	ra,4(sp)
    ec74:	df000017 	ldw	fp,0(sp)
    ec78:	dec00204 	addi	sp,sp,8
    ec7c:	f800283a 	ret

0000ec80 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    ec80:	deffdf04 	addi	sp,sp,-132
    ec84:	dfc02015 	stw	ra,128(sp)
    ec88:	df001f15 	stw	fp,124(sp)
    ec8c:	df001f04 	addi	fp,sp,124
    ec90:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    ec94:	e0bfe204 	addi	r2,fp,-120
    ec98:	100b883a 	mov	r5,r2
    ec9c:	01003fc4 	movi	r4,255
    eca0:	00160e80 	call	160e8 <OSTaskQuery>
    eca4:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    eca8:	e0bffe83 	ldbu	r2,-6(fp)
    ecac:	10803fcc 	andi	r2,r2,255
    ecb0:	10001e1e 	bne	r2,zero,ed2c <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
    ecb4:	e0bfee83 	ldbu	r2,-70(fp)
    ecb8:	10803fcc 	andi	r2,r2,255
    ecbc:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    ecc0:	d0a83517 	ldw	r2,-24364(gp)
    ecc4:	e0fffd04 	addi	r3,fp,-12
    ecc8:	180b883a 	mov	r5,r3
    eccc:	1009883a 	mov	r4,r2
    ecd0:	00149000 	call	14900 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    ecd4:	e0bffe43 	ldbu	r2,-7(fp)
    ecd8:	10803fcc 	andi	r2,r2,255
    ecdc:	10000726 	beq	r2,zero,ecfc <__env_lock+0x7c>
    ece0:	d0a00d17 	ldw	r2,-32716(gp)
    ece4:	e0ffe117 	ldw	r3,-124(fp)
    ece8:	1880041e 	bne	r3,r2,ecfc <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
    ecec:	d0a83417 	ldw	r2,-24368(gp)
    ecf0:	10800044 	addi	r2,r2,1
    ecf4:	d0a83415 	stw	r2,-24368(gp)
    ecf8:	00000a06 	br	ed24 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    ecfc:	d0a83517 	ldw	r2,-24364(gp)
    ed00:	e0fffe84 	addi	r3,fp,-6
    ed04:	180d883a 	mov	r6,r3
    ed08:	000b883a 	mov	r5,zero
    ed0c:	1009883a 	mov	r4,r2
    ed10:	00144780 	call	14478 <OSSemPend>
    locks  = 1;
    ed14:	00800044 	movi	r2,1
    ed18:	d0a83415 	stw	r2,-24368(gp)
    lockid = id;
    ed1c:	e0bfe117 	ldw	r2,-124(fp)
    ed20:	d0a00d15 	stw	r2,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    ed24:	0001883a 	nop
    ed28:	00000106 	br	ed30 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    ed2c:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    ed30:	e037883a 	mov	sp,fp
    ed34:	dfc00117 	ldw	ra,4(sp)
    ed38:	df000017 	ldw	fp,0(sp)
    ed3c:	dec00204 	addi	sp,sp,8
    ed40:	f800283a 	ret

0000ed44 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    ed44:	defffd04 	addi	sp,sp,-12
    ed48:	dfc00215 	stw	ra,8(sp)
    ed4c:	df000115 	stw	fp,4(sp)
    ed50:	df000104 	addi	fp,sp,4
    ed54:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    ed58:	d0a83417 	ldw	r2,-24368(gp)
    ed5c:	10000b26 	beq	r2,zero,ed8c <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    ed60:	d0a83417 	ldw	r2,-24368(gp)
    ed64:	10bfffc4 	addi	r2,r2,-1
    ed68:	d0a83415 	stw	r2,-24368(gp)
    ed6c:	d0a83417 	ldw	r2,-24368(gp)
    ed70:	1000071e 	bne	r2,zero,ed90 <__env_unlock+0x4c>
  {
    lockid = -1;
    ed74:	00bfffc4 	movi	r2,-1
    ed78:	d0a00d15 	stw	r2,-32716(gp)
    OSSemPost( alt_envsem );
    ed7c:	d0a83517 	ldw	r2,-24364(gp)
    ed80:	1009883a 	mov	r4,r2
    ed84:	00147f00 	call	147f0 <OSSemPost>
    ed88:	00000106 	br	ed90 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
    ed8c:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    ed90:	e037883a 	mov	sp,fp
    ed94:	dfc00117 	ldw	ra,4(sp)
    ed98:	df000017 	ldw	fp,0(sp)
    ed9c:	dec00204 	addi	sp,sp,8
    eda0:	f800283a 	ret

0000eda4 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    eda4:	deffdb04 	addi	sp,sp,-148
    eda8:	dfc02415 	stw	ra,144(sp)
    edac:	df002315 	stw	fp,140(sp)
    edb0:	df002304 	addi	fp,sp,140
    edb4:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    edb8:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    edbc:	d0a83843 	ldbu	r2,-24351(gp)
    edc0:	10803fcc 	andi	r2,r2,255
    edc4:	10800060 	cmpeqi	r2,r2,1
    edc8:	10003626 	beq	r2,zero,eea4 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    edcc:	e0bfe204 	addi	r2,fp,-120
    edd0:	100b883a 	mov	r5,r2
    edd4:	01003fc4 	movi	r4,255
    edd8:	00160e80 	call	160e8 <OSTaskQuery>
    eddc:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    ede0:	e0bffe83 	ldbu	r2,-6(fp)
    ede4:	10803fcc 	andi	r2,r2,255
    ede8:	1000301e 	bne	r2,zero,eeac <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
    edec:	e0bfee83 	ldbu	r2,-70(fp)
    edf0:	10803fcc 	andi	r2,r2,255
    edf4:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    edf8:	d0a83717 	ldw	r2,-24356(gp)
    edfc:	e0fffd04 	addi	r3,fp,-12
    ee00:	180b883a 	mov	r5,r3
    ee04:	1009883a 	mov	r4,r2
    ee08:	00149000 	call	14900 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ee0c:	0005303a 	rdctl	r2,status
    ee10:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ee14:	e0ffe117 	ldw	r3,-124(fp)
    ee18:	00bfff84 	movi	r2,-2
    ee1c:	1884703a 	and	r2,r3,r2
    ee20:	1001703a 	wrctl	status,r2
  
  return context;
    ee24:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
    ee28:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    ee2c:	e0bffd0b 	ldhu	r2,-12(fp)
    ee30:	10bfffcc 	andi	r2,r2,65535
    ee34:	10000b1e 	bne	r2,zero,ee64 <__malloc_lock+0xc0>
    ee38:	d0a00e17 	ldw	r2,-32712(gp)
    ee3c:	e0ffde17 	ldw	r3,-136(fp)
    ee40:	1880081e 	bne	r3,r2,ee64 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
    ee44:	d0a83617 	ldw	r2,-24360(gp)
    ee48:	10800044 	addi	r2,r2,1
    ee4c:	d0a83615 	stw	r2,-24360(gp)
    ee50:	e0bfdd17 	ldw	r2,-140(fp)
    ee54:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ee58:	e0bfdf17 	ldw	r2,-132(fp)
    ee5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    ee60:	00000e06 	br	ee9c <__malloc_lock+0xf8>
    ee64:	e0bfdd17 	ldw	r2,-140(fp)
    ee68:	e0bfe015 	stw	r2,-128(fp)
    ee6c:	e0bfe017 	ldw	r2,-128(fp)
    ee70:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    ee74:	d0a83717 	ldw	r2,-24356(gp)
    ee78:	e0fffe84 	addi	r3,fp,-6
    ee7c:	180d883a 	mov	r6,r3
    ee80:	000b883a 	mov	r5,zero
    ee84:	1009883a 	mov	r4,r2
    ee88:	00144780 	call	14478 <OSSemPend>
    locks  = 1;
    ee8c:	00800044 	movi	r2,1
    ee90:	d0a83615 	stw	r2,-24360(gp)
    lockid = id;
    ee94:	e0bfde17 	ldw	r2,-136(fp)
    ee98:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    ee9c:	0001883a 	nop
    eea0:	00000306 	br	eeb0 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
    eea4:	0001883a 	nop
    eea8:	00000106 	br	eeb0 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    eeac:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    eeb0:	e037883a 	mov	sp,fp
    eeb4:	dfc00117 	ldw	ra,4(sp)
    eeb8:	df000017 	ldw	fp,0(sp)
    eebc:	dec00204 	addi	sp,sp,8
    eec0:	f800283a 	ret

0000eec4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    eec4:	defff804 	addi	sp,sp,-32
    eec8:	dfc00715 	stw	ra,28(sp)
    eecc:	df000615 	stw	fp,24(sp)
    eed0:	df000604 	addi	fp,sp,24
    eed4:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    eed8:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    eedc:	d0a83843 	ldbu	r2,-24351(gp)
    eee0:	10803fcc 	andi	r2,r2,255
    eee4:	10800060 	cmpeqi	r2,r2,1
    eee8:	10002326 	beq	r2,zero,ef78 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eeec:	0005303a 	rdctl	r2,status
    eef0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eef4:	e0fffe17 	ldw	r3,-8(fp)
    eef8:	00bfff84 	movi	r2,-2
    eefc:	1884703a 	and	r2,r3,r2
    ef00:	1001703a 	wrctl	status,r2
  
  return context;
    ef04:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
    ef08:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    ef0c:	d0a83617 	ldw	r2,-24360(gp)
    ef10:	1000051e 	bne	r2,zero,ef28 <__malloc_unlock+0x64>
    ef14:	e0bffa17 	ldw	r2,-24(fp)
    ef18:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ef1c:	e0bffb17 	ldw	r2,-20(fp)
    ef20:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    ef24:	00001506 	br	ef7c <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    ef28:	d0a83617 	ldw	r2,-24360(gp)
    ef2c:	10bfffc4 	addi	r2,r2,-1
    ef30:	d0a83615 	stw	r2,-24360(gp)
    ef34:	d0a83617 	ldw	r2,-24360(gp)
    ef38:	10000a1e 	bne	r2,zero,ef64 <__malloc_unlock+0xa0>
  {
    lockid = -1;
    ef3c:	00bfffc4 	movi	r2,-1
    ef40:	d0a00e15 	stw	r2,-32712(gp)
    ef44:	e0bffa17 	ldw	r2,-24(fp)
    ef48:	e0bffc15 	stw	r2,-16(fp)
    ef4c:	e0bffc17 	ldw	r2,-16(fp)
    ef50:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    ef54:	d0a83717 	ldw	r2,-24356(gp)
    ef58:	1009883a 	mov	r4,r2
    ef5c:	00147f00 	call	147f0 <OSSemPost>
    ef60:	00000606 	br	ef7c <__malloc_unlock+0xb8>
    ef64:	e0bffa17 	ldw	r2,-24(fp)
    ef68:	e0bffd15 	stw	r2,-12(fp)
    ef6c:	e0bffd17 	ldw	r2,-12(fp)
    ef70:	1001703a 	wrctl	status,r2
    ef74:	00000106 	br	ef7c <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
    ef78:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    ef7c:	e037883a 	mov	sp,fp
    ef80:	dfc00117 	ldw	ra,4(sp)
    ef84:	df000017 	ldw	fp,0(sp)
    ef88:	dec00204 	addi	sp,sp,8
    ef8c:	f800283a 	ret

0000ef90 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    ef90:	defff704 	addi	sp,sp,-36
    ef94:	dfc00815 	stw	ra,32(sp)
    ef98:	df000715 	stw	fp,28(sp)
    ef9c:	df000704 	addi	fp,sp,28
    efa0:	e13ffd15 	stw	r4,-12(fp)
    efa4:	e17ffe15 	stw	r5,-8(fp)
    efa8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    efac:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    efb0:	e0bfff17 	ldw	r2,-4(fp)
    efb4:	1000021e 	bne	r2,zero,efc0 <OSEventNameGet+0x30>
        return (0);
    efb8:	0005883a 	mov	r2,zero
    efbc:	00003706 	br	f09c <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    efc0:	e0bffd17 	ldw	r2,-12(fp)
    efc4:	1000051e 	bne	r2,zero,efdc <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    efc8:	e0bfff17 	ldw	r2,-4(fp)
    efcc:	00c00104 	movi	r3,4
    efd0:	10c00005 	stb	r3,0(r2)
        return (0);
    efd4:	0005883a 	mov	r2,zero
    efd8:	00003006 	br	f09c <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    efdc:	e0bffe17 	ldw	r2,-8(fp)
    efe0:	1000051e 	bne	r2,zero,eff8 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    efe4:	e0bfff17 	ldw	r2,-4(fp)
    efe8:	00c00304 	movi	r3,12
    efec:	10c00005 	stb	r3,0(r2)
        return (0);
    eff0:	0005883a 	mov	r2,zero
    eff4:	00002906 	br	f09c <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    eff8:	d0a84603 	ldbu	r2,-24296(gp)
    effc:	10803fcc 	andi	r2,r2,255
    f000:	10000526 	beq	r2,zero,f018 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    f004:	e0bfff17 	ldw	r2,-4(fp)
    f008:	00c00444 	movi	r3,17
    f00c:	10c00005 	stb	r3,0(r2)
        return (0);
    f010:	0005883a 	mov	r2,zero
    f014:	00002106 	br	f09c <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
    f018:	e0bffd17 	ldw	r2,-12(fp)
    f01c:	10800003 	ldbu	r2,0(r2)
    f020:	10803fcc 	andi	r2,r2,255
    f024:	10bfffc4 	addi	r2,r2,-1
    f028:	10800128 	cmpgeui	r2,r2,4
    f02c:	10000526 	beq	r2,zero,f044 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    f030:	e0bfff17 	ldw	r2,-4(fp)
    f034:	00c00044 	movi	r3,1
    f038:	10c00005 	stb	r3,0(r2)
             return (0);
    f03c:	0005883a 	mov	r2,zero
    f040:	00001606 	br	f09c <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    f044:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f048:	0005303a 	rdctl	r2,status
    f04c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f050:	e0fffb17 	ldw	r3,-20(fp)
    f054:	00bfff84 	movi	r2,-2
    f058:	1884703a 	and	r2,r3,r2
    f05c:	1001703a 	wrctl	status,r2
  
  return context;
    f060:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    f064:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    f068:	e0bffd17 	ldw	r2,-12(fp)
    f06c:	10800384 	addi	r2,r2,14
    f070:	100b883a 	mov	r5,r2
    f074:	e13ffe17 	ldw	r4,-8(fp)
    f078:	0010a140 	call	10a14 <OS_StrCopy>
    f07c:	e0bffa05 	stb	r2,-24(fp)
    f080:	e0bff917 	ldw	r2,-28(fp)
    f084:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f088:	e0bffc17 	ldw	r2,-16(fp)
    f08c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    f090:	e0bfff17 	ldw	r2,-4(fp)
    f094:	10000005 	stb	zero,0(r2)
    return (len);
    f098:	e0bffa03 	ldbu	r2,-24(fp)
}
    f09c:	e037883a 	mov	sp,fp
    f0a0:	dfc00117 	ldw	ra,4(sp)
    f0a4:	df000017 	ldw	fp,0(sp)
    f0a8:	dec00204 	addi	sp,sp,8
    f0ac:	f800283a 	ret

0000f0b0 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    f0b0:	defff604 	addi	sp,sp,-40
    f0b4:	dfc00915 	stw	ra,36(sp)
    f0b8:	df000815 	stw	fp,32(sp)
    f0bc:	df000804 	addi	fp,sp,32
    f0c0:	e13ffd15 	stw	r4,-12(fp)
    f0c4:	e17ffe15 	stw	r5,-8(fp)
    f0c8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    f0cc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    f0d0:	e0bfff17 	ldw	r2,-4(fp)
    f0d4:	10004026 	beq	r2,zero,f1d8 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    f0d8:	e0bffd17 	ldw	r2,-12(fp)
    f0dc:	1000041e 	bne	r2,zero,f0f0 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    f0e0:	e0bfff17 	ldw	r2,-4(fp)
    f0e4:	00c00104 	movi	r3,4
    f0e8:	10c00005 	stb	r3,0(r2)
        return;
    f0ec:	00003b06 	br	f1dc <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    f0f0:	e0bffe17 	ldw	r2,-8(fp)
    f0f4:	1000041e 	bne	r2,zero,f108 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    f0f8:	e0bfff17 	ldw	r2,-4(fp)
    f0fc:	00c00304 	movi	r3,12
    f100:	10c00005 	stb	r3,0(r2)
        return;
    f104:	00003506 	br	f1dc <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    f108:	d0a84603 	ldbu	r2,-24296(gp)
    f10c:	10803fcc 	andi	r2,r2,255
    f110:	10000426 	beq	r2,zero,f124 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    f114:	e0bfff17 	ldw	r2,-4(fp)
    f118:	00c00484 	movi	r3,18
    f11c:	10c00005 	stb	r3,0(r2)
        return;
    f120:	00002e06 	br	f1dc <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
    f124:	e0bffd17 	ldw	r2,-12(fp)
    f128:	10800003 	ldbu	r2,0(r2)
    f12c:	10803fcc 	andi	r2,r2,255
    f130:	10bfffc4 	addi	r2,r2,-1
    f134:	10800128 	cmpgeui	r2,r2,4
    f138:	10000426 	beq	r2,zero,f14c <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    f13c:	e0bfff17 	ldw	r2,-4(fp)
    f140:	00c00044 	movi	r3,1
    f144:	10c00005 	stb	r3,0(r2)
             return;
    f148:	00002406 	br	f1dc <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    f14c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f150:	0005303a 	rdctl	r2,status
    f154:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f158:	e0fffc17 	ldw	r3,-16(fp)
    f15c:	00bfff84 	movi	r2,-2
    f160:	1884703a 	and	r2,r3,r2
    f164:	1001703a 	wrctl	status,r2
  
  return context;
    f168:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    f16c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    f170:	e13ffe17 	ldw	r4,-8(fp)
    f174:	0010a880 	call	10a88 <OS_StrLen>
    f178:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    f17c:	e0bffa03 	ldbu	r2,-24(fp)
    f180:	10800830 	cmpltui	r2,r2,32
    f184:	1000081e 	bne	r2,zero,f1a8 <OSEventNameSet+0xf8>
    f188:	e0bff817 	ldw	r2,-32(fp)
    f18c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f190:	e0bff917 	ldw	r2,-28(fp)
    f194:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    f198:	e0bfff17 	ldw	r2,-4(fp)
    f19c:	00c002c4 	movi	r3,11
    f1a0:	10c00005 	stb	r3,0(r2)
        return;
    f1a4:	00000d06 	br	f1dc <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    f1a8:	e0bffd17 	ldw	r2,-12(fp)
    f1ac:	10800384 	addi	r2,r2,14
    f1b0:	e17ffe17 	ldw	r5,-8(fp)
    f1b4:	1009883a 	mov	r4,r2
    f1b8:	0010a140 	call	10a14 <OS_StrCopy>
    f1bc:	e0bff817 	ldw	r2,-32(fp)
    f1c0:	e0bffb15 	stw	r2,-20(fp)
    f1c4:	e0bffb17 	ldw	r2,-20(fp)
    f1c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    f1cc:	e0bfff17 	ldw	r2,-4(fp)
    f1d0:	10000005 	stb	zero,0(r2)
    f1d4:	00000106 	br	f1dc <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    f1d8:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    f1dc:	e037883a 	mov	sp,fp
    f1e0:	dfc00117 	ldw	ra,4(sp)
    f1e4:	df000017 	ldw	fp,0(sp)
    f1e8:	dec00204 	addi	sp,sp,8
    f1ec:	f800283a 	ret

0000f1f0 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    f1f0:	deffed04 	addi	sp,sp,-76
    f1f4:	dfc01215 	stw	ra,72(sp)
    f1f8:	df001115 	stw	fp,68(sp)
    f1fc:	df001104 	addi	fp,sp,68
    f200:	e13ffc15 	stw	r4,-16(fp)
    f204:	e17ffd15 	stw	r5,-12(fp)
    f208:	e1bffe15 	stw	r6,-8(fp)
    f20c:	3805883a 	mov	r2,r7
    f210:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    f214:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    f218:	e0800217 	ldw	r2,8(fp)
    f21c:	1000021e 	bne	r2,zero,f228 <OSEventPendMulti+0x38>
        return (0);
    f220:	0005883a 	mov	r2,zero
    f224:	00017106 	br	f7ec <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    f228:	e0bffc17 	ldw	r2,-16(fp)
    f22c:	1000051e 	bne	r2,zero,f244 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    f230:	e0800217 	ldw	r2,8(fp)
    f234:	00c00104 	movi	r3,4
    f238:	10c00005 	stb	r3,0(r2)
        return (0);
    f23c:	0005883a 	mov	r2,zero
    f240:	00016a06 	br	f7ec <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    f244:	e0bffd17 	ldw	r2,-12(fp)
    f248:	1000051e 	bne	r2,zero,f260 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    f24c:	e0800217 	ldw	r2,8(fp)
    f250:	00c00104 	movi	r3,4
    f254:	10c00005 	stb	r3,0(r2)
        return (0);
    f258:	0005883a 	mov	r2,zero
    f25c:	00016306 	br	f7ec <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    f260:	e0bffe17 	ldw	r2,-8(fp)
    f264:	1000051e 	bne	r2,zero,f27c <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    f268:	e0800217 	ldw	r2,8(fp)
    f26c:	00c00104 	movi	r3,4
    f270:	10c00005 	stb	r3,0(r2)
        return (0);
    f274:	0005883a 	mov	r2,zero
    f278:	00015c06 	br	f7ec <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    f27c:	e0bffd17 	ldw	r2,-12(fp)
    f280:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    f284:	e0bffc17 	ldw	r2,-16(fp)
    f288:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    f28c:	e0bfef17 	ldw	r2,-68(fp)
    f290:	10800017 	ldw	r2,0(r2)
    f294:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    f298:	00001906 	br	f300 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    f29c:	e0bff017 	ldw	r2,-64(fp)
    f2a0:	10800003 	ldbu	r2,0(r2)
    f2a4:	10803fcc 	andi	r2,r2,255
    f2a8:	10c000a0 	cmpeqi	r3,r2,2
    f2ac:	1800091e 	bne	r3,zero,f2d4 <OSEventPendMulti+0xe4>
    f2b0:	10c000e0 	cmpeqi	r3,r2,3
    f2b4:	1800091e 	bne	r3,zero,f2dc <OSEventPendMulti+0xec>
    f2b8:	10800060 	cmpeqi	r2,r2,1
    f2bc:	1000091e 	bne	r2,zero,f2e4 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    f2c0:	e0800217 	ldw	r2,8(fp)
    f2c4:	00c00044 	movi	r3,1
    f2c8:	10c00005 	stb	r3,0(r2)
                 return (0);
    f2cc:	0005883a 	mov	r2,zero
    f2d0:	00014606 	br	f7ec <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    f2d4:	0001883a 	nop
    f2d8:	00000306 	br	f2e8 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    f2dc:	0001883a 	nop
    f2e0:	00000106 	br	f2e8 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    f2e4:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    f2e8:	e0bfef17 	ldw	r2,-68(fp)
    f2ec:	10800104 	addi	r2,r2,4
    f2f0:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    f2f4:	e0bfef17 	ldw	r2,-68(fp)
    f2f8:	10800017 	ldw	r2,0(r2)
    f2fc:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    f300:	e0bff017 	ldw	r2,-64(fp)
    f304:	103fe51e 	bne	r2,zero,f29c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f29c>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    f308:	d0a84603 	ldbu	r2,-24296(gp)
    f30c:	10803fcc 	andi	r2,r2,255
    f310:	10000526 	beq	r2,zero,f328 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    f314:	e0800217 	ldw	r2,8(fp)
    f318:	00c00084 	movi	r3,2
    f31c:	10c00005 	stb	r3,0(r2)
        return (0);
    f320:	0005883a 	mov	r2,zero
    f324:	00013106 	br	f7ec <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    f328:	d0a83803 	ldbu	r2,-24352(gp)
    f32c:	10803fcc 	andi	r2,r2,255
    f330:	10000526 	beq	r2,zero,f348 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    f334:	e0800217 	ldw	r2,8(fp)
    f338:	00c00344 	movi	r3,13
    f33c:	10c00005 	stb	r3,0(r2)
        return (0);
    f340:	0005883a 	mov	r2,zero
    f344:	00012906 	br	f7ec <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f348:	0005303a 	rdctl	r2,status
    f34c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f350:	e0fffb17 	ldw	r3,-20(fp)
    f354:	00bfff84 	movi	r2,-2
    f358:	1884703a 	and	r2,r3,r2
    f35c:	1001703a 	wrctl	status,r2
  
  return context;
    f360:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    f364:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    f368:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    f36c:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    f370:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    f374:	e0bffc17 	ldw	r2,-16(fp)
    f378:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    f37c:	e0bfef17 	ldw	r2,-68(fp)
    f380:	10800017 	ldw	r2,0(r2)
    f384:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    f388:	00008106 	br	f590 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
    f38c:	e0bff017 	ldw	r2,-64(fp)
    f390:	10800003 	ldbu	r2,0(r2)
    f394:	10803fcc 	andi	r2,r2,255
    f398:	10c000a0 	cmpeqi	r3,r2,2
    f39c:	18003c1e 	bne	r3,zero,f490 <OSEventPendMulti+0x2a0>
    f3a0:	10c000e0 	cmpeqi	r3,r2,3
    f3a4:	1800031e 	bne	r3,zero,f3b4 <OSEventPendMulti+0x1c4>
    f3a8:	10800060 	cmpeqi	r2,r2,1
    f3ac:	10001e1e 	bne	r2,zero,f428 <OSEventPendMulti+0x238>
    f3b0:	00006606 	br	f54c <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    f3b4:	e0bff017 	ldw	r2,-64(fp)
    f3b8:	1080020b 	ldhu	r2,8(r2)
    f3bc:	10bfffcc 	andi	r2,r2,65535
    f3c0:	10001526 	beq	r2,zero,f418 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    f3c4:	e0bff017 	ldw	r2,-64(fp)
    f3c8:	1080020b 	ldhu	r2,8(r2)
    f3cc:	10bfffc4 	addi	r2,r2,-1
    f3d0:	1007883a 	mov	r3,r2
    f3d4:	e0bff017 	ldw	r2,-64(fp)
    f3d8:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    f3dc:	e0bffd17 	ldw	r2,-12(fp)
    f3e0:	10c00104 	addi	r3,r2,4
    f3e4:	e0fffd15 	stw	r3,-12(fp)
    f3e8:	e0fff017 	ldw	r3,-64(fp)
    f3ec:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    f3f0:	00800044 	movi	r2,1
    f3f4:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    f3f8:	e0bffe17 	ldw	r2,-8(fp)
    f3fc:	10c00104 	addi	r3,r2,4
    f400:	e0fffe15 	stw	r3,-8(fp)
    f404:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    f408:	e0bff18b 	ldhu	r2,-58(fp)
    f40c:	10800044 	addi	r2,r2,1
    f410:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    f414:	00005806 	br	f578 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    f418:	e0bff203 	ldbu	r2,-56(fp)
    f41c:	10800054 	ori	r2,r2,1
    f420:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    f424:	00005406 	br	f578 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    f428:	e0bff017 	ldw	r2,-64(fp)
    f42c:	10800117 	ldw	r2,4(r2)
    f430:	10001326 	beq	r2,zero,f480 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    f434:	e0bffe17 	ldw	r2,-8(fp)
    f438:	10c00104 	addi	r3,r2,4
    f43c:	e0fffe15 	stw	r3,-8(fp)
    f440:	e0fff017 	ldw	r3,-64(fp)
    f444:	18c00117 	ldw	r3,4(r3)
    f448:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    f44c:	e0bff017 	ldw	r2,-64(fp)
    f450:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    f454:	e0bffd17 	ldw	r2,-12(fp)
    f458:	10c00104 	addi	r3,r2,4
    f45c:	e0fffd15 	stw	r3,-12(fp)
    f460:	e0fff017 	ldw	r3,-64(fp)
    f464:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    f468:	00800044 	movi	r2,1
    f46c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    f470:	e0bff18b 	ldhu	r2,-58(fp)
    f474:	10800044 	addi	r2,r2,1
    f478:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    f47c:	00003e06 	br	f578 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    f480:	e0bff203 	ldbu	r2,-56(fp)
    f484:	10800094 	ori	r2,r2,2
    f488:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    f48c:	00003a06 	br	f578 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    f490:	e0bff017 	ldw	r2,-64(fp)
    f494:	10800117 	ldw	r2,4(r2)
    f498:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    f49c:	e0bff517 	ldw	r2,-44(fp)
    f4a0:	1080058b 	ldhu	r2,22(r2)
    f4a4:	10bfffcc 	andi	r2,r2,65535
    f4a8:	10002426 	beq	r2,zero,f53c <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    f4ac:	e0bffe17 	ldw	r2,-8(fp)
    f4b0:	10c00104 	addi	r3,r2,4
    f4b4:	e0fffe15 	stw	r3,-8(fp)
    f4b8:	e0fff517 	ldw	r3,-44(fp)
    f4bc:	18c00417 	ldw	r3,16(r3)
    f4c0:	19400104 	addi	r5,r3,4
    f4c4:	e13ff517 	ldw	r4,-44(fp)
    f4c8:	21400415 	stw	r5,16(r4)
    f4cc:	18c00017 	ldw	r3,0(r3)
    f4d0:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    f4d4:	e0bff517 	ldw	r2,-44(fp)
    f4d8:	10c00417 	ldw	r3,16(r2)
    f4dc:	e0bff517 	ldw	r2,-44(fp)
    f4e0:	10800217 	ldw	r2,8(r2)
    f4e4:	1880041e 	bne	r3,r2,f4f8 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    f4e8:	e0bff517 	ldw	r2,-44(fp)
    f4ec:	10c00117 	ldw	r3,4(r2)
    f4f0:	e0bff517 	ldw	r2,-44(fp)
    f4f4:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    f4f8:	e0bff517 	ldw	r2,-44(fp)
    f4fc:	1080058b 	ldhu	r2,22(r2)
    f500:	10bfffc4 	addi	r2,r2,-1
    f504:	1007883a 	mov	r3,r2
    f508:	e0bff517 	ldw	r2,-44(fp)
    f50c:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    f510:	e0bffd17 	ldw	r2,-12(fp)
    f514:	10c00104 	addi	r3,r2,4
    f518:	e0fffd15 	stw	r3,-12(fp)
    f51c:	e0fff017 	ldw	r3,-64(fp)
    f520:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    f524:	00800044 	movi	r2,1
    f528:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    f52c:	e0bff18b 	ldhu	r2,-58(fp)
    f530:	10800044 	addi	r2,r2,1
    f534:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    f538:	00000f06 	br	f578 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    f53c:	e0bff203 	ldbu	r2,-56(fp)
    f540:	10800114 	ori	r2,r2,4
    f544:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    f548:	00000b06 	br	f578 <OSEventPendMulti+0x388>
    f54c:	e0bff317 	ldw	r2,-52(fp)
    f550:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f554:	e0bff417 	ldw	r2,-48(fp)
    f558:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    f55c:	e0bffd17 	ldw	r2,-12(fp)
    f560:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    f564:	e0800217 	ldw	r2,8(fp)
    f568:	00c00044 	movi	r3,1
    f56c:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    f570:	e0bff18b 	ldhu	r2,-58(fp)
    f574:	00009d06 	br	f7ec <OSEventPendMulti+0x5fc>
        }
        pevents++;
    f578:	e0bfef17 	ldw	r2,-68(fp)
    f57c:	10800104 	addi	r2,r2,4
    f580:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    f584:	e0bfef17 	ldw	r2,-68(fp)
    f588:	10800017 	ldw	r2,0(r2)
    f58c:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    f590:	e0bff017 	ldw	r2,-64(fp)
    f594:	103f7d1e 	bne	r2,zero,f38c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f38c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    f598:	e0bff103 	ldbu	r2,-60(fp)
    f59c:	10800058 	cmpnei	r2,r2,1
    f5a0:	10000a1e 	bne	r2,zero,f5cc <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    f5a4:	e0bffd17 	ldw	r2,-12(fp)
    f5a8:	10000015 	stw	zero,0(r2)
    f5ac:	e0bff317 	ldw	r2,-52(fp)
    f5b0:	e0bff615 	stw	r2,-40(fp)
    f5b4:	e0bff617 	ldw	r2,-40(fp)
    f5b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    f5bc:	e0800217 	ldw	r2,8(fp)
    f5c0:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    f5c4:	e0bff18b 	ldhu	r2,-58(fp)
    f5c8:	00008806 	br	f7ec <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    f5cc:	d0a84717 	ldw	r2,-24292(gp)
    f5d0:	d0e84717 	ldw	r3,-24292(gp)
    f5d4:	19000c03 	ldbu	r4,48(r3)
    f5d8:	e0fff203 	ldbu	r3,-56(fp)
    f5dc:	20c6b03a 	or	r3,r4,r3
    f5e0:	1809883a 	mov	r4,r3
    f5e4:	00ffe004 	movi	r3,-128
    f5e8:	20c6b03a 	or	r3,r4,r3
    f5ec:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    f5f0:	d0a84717 	ldw	r2,-24292(gp)
    f5f4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    f5f8:	d0a84717 	ldw	r2,-24292(gp)
    f5fc:	e0ffff0b 	ldhu	r3,-4(fp)
    f600:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    f604:	e13ffc17 	ldw	r4,-16(fp)
    f608:	001012c0 	call	1012c <OS_EventTaskWaitMulti>
    f60c:	e0bff317 	ldw	r2,-52(fp)
    f610:	e0bff915 	stw	r2,-28(fp)
    f614:	e0bff917 	ldw	r2,-28(fp)
    f618:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    f61c:	00108d00 	call	108d0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f620:	0005303a 	rdctl	r2,status
    f624:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f628:	e0fff717 	ldw	r3,-36(fp)
    f62c:	00bfff84 	movi	r2,-2
    f630:	1884703a 	and	r2,r3,r2
    f634:	1001703a 	wrctl	status,r2
  
  return context;
    f638:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
    f63c:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    f640:	d0a84717 	ldw	r2,-24292(gp)
    f644:	10800c43 	ldbu	r2,49(r2)
    f648:	10803fcc 	andi	r2,r2,255
    f64c:	10000226 	beq	r2,zero,f658 <OSEventPendMulti+0x468>
    f650:	108000a0 	cmpeqi	r2,r2,2
    f654:	10001826 	beq	r2,zero,f6b8 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    f658:	d0a84717 	ldw	r2,-24292(gp)
    f65c:	10800717 	ldw	r2,28(r2)
    f660:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    f664:	e0bff017 	ldw	r2,-64(fp)
    f668:	10000b26 	beq	r2,zero,f698 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    f66c:	e0bffd17 	ldw	r2,-12(fp)
    f670:	10c00104 	addi	r3,r2,4
    f674:	e0fffd15 	stw	r3,-12(fp)
    f678:	e0fff017 	ldw	r3,-64(fp)
    f67c:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    f680:	e0bffd17 	ldw	r2,-12(fp)
    f684:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    f688:	e0bff18b 	ldhu	r2,-58(fp)
    f68c:	10800044 	addi	r2,r2,1
    f690:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    f694:	00000d06 	br	f6cc <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    f698:	d0a84717 	ldw	r2,-24292(gp)
    f69c:	00c00044 	movi	r3,1
    f6a0:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    f6a4:	d0a84717 	ldw	r2,-24292(gp)
    f6a8:	e17ffc17 	ldw	r5,-16(fp)
    f6ac:	1009883a 	mov	r4,r2
    f6b0:	00103340 	call	10334 <OS_EventTaskRemoveMulti>
             }
			 break;
    f6b4:	00000506 	br	f6cc <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    f6b8:	d0a84717 	ldw	r2,-24292(gp)
    f6bc:	e17ffc17 	ldw	r5,-16(fp)
    f6c0:	1009883a 	mov	r4,r2
    f6c4:	00103340 	call	10334 <OS_EventTaskRemoveMulti>
             break;
    f6c8:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    f6cc:	d0a84717 	ldw	r2,-24292(gp)
    f6d0:	10800c43 	ldbu	r2,49(r2)
    f6d4:	10803fcc 	andi	r2,r2,255
    f6d8:	10000326 	beq	r2,zero,f6e8 <OSEventPendMulti+0x4f8>
    f6dc:	108000a0 	cmpeqi	r2,r2,2
    f6e0:	1000231e 	bne	r2,zero,f770 <OSEventPendMulti+0x580>
    f6e4:	00002a06 	br	f790 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    f6e8:	e0bff017 	ldw	r2,-64(fp)
    f6ec:	10800003 	ldbu	r2,0(r2)
    f6f0:	10803fcc 	andi	r2,r2,255
    f6f4:	0080100e 	bge	zero,r2,f738 <OSEventPendMulti+0x548>
    f6f8:	10c000d0 	cmplti	r3,r2,3
    f6fc:	1800071e 	bne	r3,zero,f71c <OSEventPendMulti+0x52c>
    f700:	108000e0 	cmpeqi	r2,r2,3
    f704:	10000c26 	beq	r2,zero,f738 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    f708:	e0bffe17 	ldw	r2,-8(fp)
    f70c:	10c00104 	addi	r3,r2,4
    f710:	e0fffe15 	stw	r3,-8(fp)
    f714:	10000015 	stw	zero,0(r2)
                      break;
    f718:	00001206 	br	f764 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    f71c:	e0bffe17 	ldw	r2,-8(fp)
    f720:	10c00104 	addi	r3,r2,4
    f724:	e0fffe15 	stw	r3,-8(fp)
    f728:	d0e84717 	ldw	r3,-24292(gp)
    f72c:	18c00917 	ldw	r3,36(r3)
    f730:	10c00015 	stw	r3,0(r2)
                      break;
    f734:	00000b06 	br	f764 <OSEventPendMulti+0x574>
    f738:	e0bff317 	ldw	r2,-52(fp)
    f73c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f740:	e0bff817 	ldw	r2,-32(fp)
    f744:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    f748:	e0bffd17 	ldw	r2,-12(fp)
    f74c:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    f750:	e0800217 	ldw	r2,8(fp)
    f754:	00c00044 	movi	r3,1
    f758:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    f75c:	e0bff18b 	ldhu	r2,-58(fp)
    f760:	00002206 	br	f7ec <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
    f764:	e0800217 	ldw	r2,8(fp)
    f768:	10000005 	stb	zero,0(r2)
             break;
    f76c:	00001006 	br	f7b0 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    f770:	e0bffe17 	ldw	r2,-8(fp)
    f774:	10c00104 	addi	r3,r2,4
    f778:	e0fffe15 	stw	r3,-8(fp)
    f77c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    f780:	e0800217 	ldw	r2,8(fp)
    f784:	00c00384 	movi	r3,14
    f788:	10c00005 	stb	r3,0(r2)
             break;
    f78c:	00000806 	br	f7b0 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    f790:	e0bffe17 	ldw	r2,-8(fp)
    f794:	10c00104 	addi	r3,r2,4
    f798:	e0fffe15 	stw	r3,-8(fp)
    f79c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    f7a0:	e0800217 	ldw	r2,8(fp)
    f7a4:	00c00284 	movi	r3,10
    f7a8:	10c00005 	stb	r3,0(r2)
             break;
    f7ac:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    f7b0:	d0a84717 	ldw	r2,-24292(gp)
    f7b4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    f7b8:	d0a84717 	ldw	r2,-24292(gp)
    f7bc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    f7c0:	d0a84717 	ldw	r2,-24292(gp)
    f7c4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    f7c8:	d0a84717 	ldw	r2,-24292(gp)
    f7cc:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    f7d0:	d0a84717 	ldw	r2,-24292(gp)
    f7d4:	10000915 	stw	zero,36(r2)
    f7d8:	e0bff317 	ldw	r2,-52(fp)
    f7dc:	e0bffa15 	stw	r2,-24(fp)
    f7e0:	e0bffa17 	ldw	r2,-24(fp)
    f7e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    f7e8:	e0bff18b 	ldhu	r2,-58(fp)
}
    f7ec:	e037883a 	mov	sp,fp
    f7f0:	dfc00117 	ldw	ra,4(sp)
    f7f4:	df000017 	ldw	fp,0(sp)
    f7f8:	dec00204 	addi	sp,sp,8
    f7fc:	f800283a 	ret

0000f800 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    f800:	defffe04 	addi	sp,sp,-8
    f804:	dfc00115 	stw	ra,4(sp)
    f808:	df000015 	stw	fp,0(sp)
    f80c:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    f810:	0019f7c0 	call	19f7c <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    f814:	001057c0 	call	1057c <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    f818:	00105c40 	call	105c4 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    f81c:	00107300 	call	10730 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    f820:	001049c0 	call	1049c <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    f824:	00125e00 	call	125e0 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    f828:	0012ee00 	call	12ee0 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    f82c:	00140080 	call	14008 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    f830:	00106300 	call	10630 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    f834:	00106b00 	call	106b0 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    f838:	0019f9c0 	call	19f9c <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    f83c:	0010fb40 	call	10fb4 <OSDebugInit>
#endif
}
    f840:	0001883a 	nop
    f844:	e037883a 	mov	sp,fp
    f848:	dfc00117 	ldw	ra,4(sp)
    f84c:	df000017 	ldw	fp,0(sp)
    f850:	dec00204 	addi	sp,sp,8
    f854:	f800283a 	ret

0000f858 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    f858:	deffff04 	addi	sp,sp,-4
    f85c:	df000015 	stw	fp,0(sp)
    f860:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
    f864:	d0a83843 	ldbu	r2,-24351(gp)
    f868:	10803fcc 	andi	r2,r2,255
    f86c:	10800058 	cmpnei	r2,r2,1
    f870:	1000071e 	bne	r2,zero,f890 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
    f874:	d0a84603 	ldbu	r2,-24296(gp)
    f878:	10803fcc 	andi	r2,r2,255
    f87c:	10803fe0 	cmpeqi	r2,r2,255
    f880:	1000031e 	bne	r2,zero,f890 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    f884:	d0a84603 	ldbu	r2,-24296(gp)
    f888:	10800044 	addi	r2,r2,1
    f88c:	d0a84605 	stb	r2,-24296(gp)
        }
    }
}
    f890:	0001883a 	nop
    f894:	e037883a 	mov	sp,fp
    f898:	df000017 	ldw	fp,0(sp)
    f89c:	dec00104 	addi	sp,sp,4
    f8a0:	f800283a 	ret

0000f8a4 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    f8a4:	defffb04 	addi	sp,sp,-20
    f8a8:	dfc00415 	stw	ra,16(sp)
    f8ac:	df000315 	stw	fp,12(sp)
    f8b0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    f8b4:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    f8b8:	d0a83843 	ldbu	r2,-24351(gp)
    f8bc:	10803fcc 	andi	r2,r2,255
    f8c0:	10800058 	cmpnei	r2,r2,1
    f8c4:	10002f1e 	bne	r2,zero,f984 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f8c8:	0005303a 	rdctl	r2,status
    f8cc:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f8d0:	e0ffff17 	ldw	r3,-4(fp)
    f8d4:	00bfff84 	movi	r2,-2
    f8d8:	1884703a 	and	r2,r3,r2
    f8dc:	1001703a 	wrctl	status,r2
  
  return context;
    f8e0:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    f8e4:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    f8e8:	d0a84603 	ldbu	r2,-24296(gp)
    f8ec:	10803fcc 	andi	r2,r2,255
    f8f0:	10000326 	beq	r2,zero,f900 <OSIntExit+0x5c>
            OSIntNesting--;
    f8f4:	d0a84603 	ldbu	r2,-24296(gp)
    f8f8:	10bfffc4 	addi	r2,r2,-1
    f8fc:	d0a84605 	stb	r2,-24296(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    f900:	d0a84603 	ldbu	r2,-24296(gp)
    f904:	10803fcc 	andi	r2,r2,255
    f908:	10001a1e 	bne	r2,zero,f974 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    f90c:	d0a83803 	ldbu	r2,-24352(gp)
    f910:	10803fcc 	andi	r2,r2,255
    f914:	1000171e 	bne	r2,zero,f974 <OSIntExit+0xd0>
                OS_SchedNew();
    f918:	00109a00 	call	109a0 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    f91c:	d0e83a03 	ldbu	r3,-24344(gp)
    f920:	d0a83a43 	ldbu	r2,-24343(gp)
    f924:	18c03fcc 	andi	r3,r3,255
    f928:	10803fcc 	andi	r2,r2,255
    f92c:	18801126 	beq	r3,r2,f974 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    f930:	d0a83a03 	ldbu	r2,-24344(gp)
    f934:	10c03fcc 	andi	r3,r2,255
    f938:	008000f4 	movhi	r2,3
    f93c:	10896904 	addi	r2,r2,9636
    f940:	18c7883a 	add	r3,r3,r3
    f944:	18c7883a 	add	r3,r3,r3
    f948:	10c5883a 	add	r2,r2,r3
    f94c:	10800017 	ldw	r2,0(r2)
    f950:	d0a84215 	stw	r2,-24312(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    f954:	d0a84217 	ldw	r2,-24312(gp)
    f958:	10c00e17 	ldw	r3,56(r2)
    f95c:	18c00044 	addi	r3,r3,1
    f960:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    f964:	d0a83d17 	ldw	r2,-24332(gp)
    f968:	10800044 	addi	r2,r2,1
    f96c:	d0a83d15 	stw	r2,-24332(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    f970:	0019ca80 	call	19ca8 <OSCtxSw>
    f974:	e0bffd17 	ldw	r2,-12(fp)
    f978:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f97c:	e0bffe17 	ldw	r2,-8(fp)
    f980:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    f984:	0001883a 	nop
    f988:	e037883a 	mov	sp,fp
    f98c:	dfc00117 	ldw	ra,4(sp)
    f990:	df000017 	ldw	fp,0(sp)
    f994:	dec00204 	addi	sp,sp,8
    f998:	f800283a 	ret

0000f99c <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    f99c:	defffc04 	addi	sp,sp,-16
    f9a0:	df000315 	stw	fp,12(sp)
    f9a4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    f9a8:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    f9ac:	d0a83843 	ldbu	r2,-24351(gp)
    f9b0:	10803fcc 	andi	r2,r2,255
    f9b4:	10800058 	cmpnei	r2,r2,1
    f9b8:	1000161e 	bne	r2,zero,fa14 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f9bc:	0005303a 	rdctl	r2,status
    f9c0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f9c4:	e0ffff17 	ldw	r3,-4(fp)
    f9c8:	00bfff84 	movi	r2,-2
    f9cc:	1884703a 	and	r2,r3,r2
    f9d0:	1001703a 	wrctl	status,r2
  
  return context;
    f9d4:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    f9d8:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    f9dc:	d0a84603 	ldbu	r2,-24296(gp)
    f9e0:	10803fcc 	andi	r2,r2,255
    f9e4:	1000071e 	bne	r2,zero,fa04 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    f9e8:	d0a83803 	ldbu	r2,-24352(gp)
    f9ec:	10803fcc 	andi	r2,r2,255
    f9f0:	10803fe0 	cmpeqi	r2,r2,255
    f9f4:	1000031e 	bne	r2,zero,fa04 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    f9f8:	d0a83803 	ldbu	r2,-24352(gp)
    f9fc:	10800044 	addi	r2,r2,1
    fa00:	d0a83805 	stb	r2,-24352(gp)
    fa04:	e0bffd17 	ldw	r2,-12(fp)
    fa08:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fa0c:	e0bffe17 	ldw	r2,-8(fp)
    fa10:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    fa14:	0001883a 	nop
    fa18:	e037883a 	mov	sp,fp
    fa1c:	df000017 	ldw	fp,0(sp)
    fa20:	dec00104 	addi	sp,sp,4
    fa24:	f800283a 	ret

0000fa28 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    fa28:	defff804 	addi	sp,sp,-32
    fa2c:	dfc00715 	stw	ra,28(sp)
    fa30:	df000615 	stw	fp,24(sp)
    fa34:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    fa38:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    fa3c:	d0a83843 	ldbu	r2,-24351(gp)
    fa40:	10803fcc 	andi	r2,r2,255
    fa44:	10800058 	cmpnei	r2,r2,1
    fa48:	1000281e 	bne	r2,zero,faec <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fa4c:	0005303a 	rdctl	r2,status
    fa50:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fa54:	e0ffff17 	ldw	r3,-4(fp)
    fa58:	00bfff84 	movi	r2,-2
    fa5c:	1884703a 	and	r2,r3,r2
    fa60:	1001703a 	wrctl	status,r2
  
  return context;
    fa64:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    fa68:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    fa6c:	d0a83803 	ldbu	r2,-24352(gp)
    fa70:	10803fcc 	andi	r2,r2,255
    fa74:	10001926 	beq	r2,zero,fadc <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    fa78:	d0a83803 	ldbu	r2,-24352(gp)
    fa7c:	10bfffc4 	addi	r2,r2,-1
    fa80:	d0a83805 	stb	r2,-24352(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    fa84:	d0a83803 	ldbu	r2,-24352(gp)
    fa88:	10803fcc 	andi	r2,r2,255
    fa8c:	10000e1e 	bne	r2,zero,fac8 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    fa90:	d0a84603 	ldbu	r2,-24296(gp)
    fa94:	10803fcc 	andi	r2,r2,255
    fa98:	1000061e 	bne	r2,zero,fab4 <OSSchedUnlock+0x8c>
    fa9c:	e0bffa17 	ldw	r2,-24(fp)
    faa0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    faa4:	e0bffb17 	ldw	r2,-20(fp)
    faa8:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    faac:	00108d00 	call	108d0 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    fab0:	00000e06 	br	faec <OSSchedUnlock+0xc4>
    fab4:	e0bffa17 	ldw	r2,-24(fp)
    fab8:	e0bffc15 	stw	r2,-16(fp)
    fabc:	e0bffc17 	ldw	r2,-16(fp)
    fac0:	1001703a 	wrctl	status,r2
    fac4:	00000906 	br	faec <OSSchedUnlock+0xc4>
    fac8:	e0bffa17 	ldw	r2,-24(fp)
    facc:	e0bffd15 	stw	r2,-12(fp)
    fad0:	e0bffd17 	ldw	r2,-12(fp)
    fad4:	1001703a 	wrctl	status,r2
    fad8:	00000406 	br	faec <OSSchedUnlock+0xc4>
    fadc:	e0bffa17 	ldw	r2,-24(fp)
    fae0:	e0bffe15 	stw	r2,-8(fp)
    fae4:	e0bffe17 	ldw	r2,-8(fp)
    fae8:	1001703a 	wrctl	status,r2
    faec:	0001883a 	nop
    faf0:	e037883a 	mov	sp,fp
    faf4:	dfc00117 	ldw	ra,4(sp)
    faf8:	df000017 	ldw	fp,0(sp)
    fafc:	dec00204 	addi	sp,sp,8
    fb00:	f800283a 	ret

0000fb04 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    fb04:	defffe04 	addi	sp,sp,-8
    fb08:	dfc00115 	stw	ra,4(sp)
    fb0c:	df000015 	stw	fp,0(sp)
    fb10:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    fb14:	d0a83843 	ldbu	r2,-24351(gp)
    fb18:	10803fcc 	andi	r2,r2,255
    fb1c:	10000f1e 	bne	r2,zero,fb5c <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    fb20:	00109a00 	call	109a0 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    fb24:	d0a83a03 	ldbu	r2,-24344(gp)
    fb28:	d0a83a45 	stb	r2,-24343(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    fb2c:	d0a83a03 	ldbu	r2,-24344(gp)
    fb30:	10c03fcc 	andi	r3,r2,255
    fb34:	008000f4 	movhi	r2,3
    fb38:	10896904 	addi	r2,r2,9636
    fb3c:	18c7883a 	add	r3,r3,r3
    fb40:	18c7883a 	add	r3,r3,r3
    fb44:	10c5883a 	add	r2,r2,r3
    fb48:	10800017 	ldw	r2,0(r2)
    fb4c:	d0a84215 	stw	r2,-24312(gp)
        OSTCBCur      = OSTCBHighRdy;
    fb50:	d0a84217 	ldw	r2,-24312(gp)
    fb54:	d0a84715 	stw	r2,-24292(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    fb58:	0019d340 	call	19d34 <OSStartHighRdy>
    }
}
    fb5c:	0001883a 	nop
    fb60:	e037883a 	mov	sp,fp
    fb64:	dfc00117 	ldw	ra,4(sp)
    fb68:	df000017 	ldw	fp,0(sp)
    fb6c:	dec00204 	addi	sp,sp,8
    fb70:	f800283a 	ret

0000fb74 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    fb74:	defff904 	addi	sp,sp,-28
    fb78:	dfc00615 	stw	ra,24(sp)
    fb7c:	df000515 	stw	fp,20(sp)
    fb80:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    fb84:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    fb88:	01000084 	movi	r4,2
    fb8c:	001627c0 	call	1627c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fb90:	0005303a 	rdctl	r2,status
    fb94:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fb98:	e0fffc17 	ldw	r3,-16(fp)
    fb9c:	00bfff84 	movi	r2,-2
    fba0:	1884703a 	and	r2,r3,r2
    fba4:	1001703a 	wrctl	status,r2
  
  return context;
    fba8:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    fbac:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    fbb0:	d0283915 	stw	zero,-24348(gp)
    fbb4:	e0bffb17 	ldw	r2,-20(fp)
    fbb8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fbbc:	e0bffd17 	ldw	r2,-12(fp)
    fbc0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    fbc4:	0009883a 	mov	r4,zero
    fbc8:	001627c0 	call	1627c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fbcc:	0005303a 	rdctl	r2,status
    fbd0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fbd4:	e0fffe17 	ldw	r3,-8(fp)
    fbd8:	00bfff84 	movi	r2,-2
    fbdc:	1884703a 	and	r2,r3,r2
    fbe0:	1001703a 	wrctl	status,r2
  
  return context;
    fbe4:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    fbe8:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    fbec:	d0a83917 	ldw	r2,-24348(gp)
    fbf0:	d0a83e15 	stw	r2,-24328(gp)
    OSStatRdy    = OS_TRUE;
    fbf4:	00800044 	movi	r2,1
    fbf8:	d0a84a05 	stb	r2,-24280(gp)
    fbfc:	e0bffb17 	ldw	r2,-20(fp)
    fc00:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fc04:	e0bfff17 	ldw	r2,-4(fp)
    fc08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    fc0c:	0001883a 	nop
    fc10:	e037883a 	mov	sp,fp
    fc14:	dfc00117 	ldw	ra,4(sp)
    fc18:	df000017 	ldw	fp,0(sp)
    fc1c:	dec00204 	addi	sp,sp,8
    fc20:	f800283a 	ret

0000fc24 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    fc24:	defff704 	addi	sp,sp,-36
    fc28:	dfc00815 	stw	ra,32(sp)
    fc2c:	df000715 	stw	fp,28(sp)
    fc30:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    fc34:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    fc38:	0019f5c0 	call	19f5c <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fc3c:	0005303a 	rdctl	r2,status
    fc40:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fc44:	e0fffd17 	ldw	r3,-12(fp)
    fc48:	00bfff84 	movi	r2,-2
    fc4c:	1884703a 	and	r2,r3,r2
    fc50:	1001703a 	wrctl	status,r2
  
  return context;
    fc54:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    fc58:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    fc5c:	d0a84817 	ldw	r2,-24288(gp)
    fc60:	10800044 	addi	r2,r2,1
    fc64:	d0a84815 	stw	r2,-24288(gp)
    fc68:	e0bffb17 	ldw	r2,-20(fp)
    fc6c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fc70:	e0bfff17 	ldw	r2,-4(fp)
    fc74:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    fc78:	d0a83843 	ldbu	r2,-24351(gp)
    fc7c:	10803fcc 	andi	r2,r2,255
    fc80:	10800058 	cmpnei	r2,r2,1
    fc84:	10006a1e 	bne	r2,zero,fe30 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    fc88:	d0a83c03 	ldbu	r2,-24336(gp)
    fc8c:	10803fcc 	andi	r2,r2,255
    fc90:	10c00060 	cmpeqi	r3,r2,1
    fc94:	1800061e 	bne	r3,zero,fcb0 <OSTimeTick+0x8c>
    fc98:	10c000a0 	cmpeqi	r3,r2,2
    fc9c:	1800061e 	bne	r3,zero,fcb8 <OSTimeTick+0x94>
    fca0:	10000a1e 	bne	r2,zero,fccc <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    fca4:	00800044 	movi	r2,1
    fca8:	e0bffa05 	stb	r2,-24(fp)
                 break;
    fcac:	00000b06 	br	fcdc <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    fcb0:	e03ffa05 	stb	zero,-24(fp)
                 break;
    fcb4:	00000906 	br	fcdc <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    fcb8:	00800044 	movi	r2,1
    fcbc:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    fcc0:	00800044 	movi	r2,1
    fcc4:	d0a83c05 	stb	r2,-24336(gp)
                 break;
    fcc8:	00000406 	br	fcdc <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    fccc:	00800044 	movi	r2,1
    fcd0:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    fcd4:	d0283c05 	stb	zero,-24336(gp)
                 break;
    fcd8:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    fcdc:	e0bffa03 	ldbu	r2,-24(fp)
    fce0:	10005226 	beq	r2,zero,fe2c <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    fce4:	d0a83b17 	ldw	r2,-24340(gp)
    fce8:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    fcec:	00004906 	br	fe14 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fcf0:	0005303a 	rdctl	r2,status
    fcf4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fcf8:	e0fffc17 	ldw	r3,-16(fp)
    fcfc:	00bfff84 	movi	r2,-2
    fd00:	1884703a 	and	r2,r3,r2
    fd04:	1001703a 	wrctl	status,r2
  
  return context;
    fd08:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
    fd0c:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    fd10:	e0bff917 	ldw	r2,-28(fp)
    fd14:	10800b8b 	ldhu	r2,46(r2)
    fd18:	10bfffcc 	andi	r2,r2,65535
    fd1c:	10003626 	beq	r2,zero,fdf8 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    fd20:	e0bff917 	ldw	r2,-28(fp)
    fd24:	10800b8b 	ldhu	r2,46(r2)
    fd28:	10bfffc4 	addi	r2,r2,-1
    fd2c:	1007883a 	mov	r3,r2
    fd30:	e0bff917 	ldw	r2,-28(fp)
    fd34:	10c00b8d 	sth	r3,46(r2)
    fd38:	e0bff917 	ldw	r2,-28(fp)
    fd3c:	10800b8b 	ldhu	r2,46(r2)
    fd40:	10bfffcc 	andi	r2,r2,65535
    fd44:	10002c1e 	bne	r2,zero,fdf8 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    fd48:	e0bff917 	ldw	r2,-28(fp)
    fd4c:	10800c03 	ldbu	r2,48(r2)
    fd50:	10803fcc 	andi	r2,r2,255
    fd54:	10800dcc 	andi	r2,r2,55
    fd58:	10000b26 	beq	r2,zero,fd88 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    fd5c:	e0bff917 	ldw	r2,-28(fp)
    fd60:	10c00c03 	ldbu	r3,48(r2)
    fd64:	00bff204 	movi	r2,-56
    fd68:	1884703a 	and	r2,r3,r2
    fd6c:	1007883a 	mov	r3,r2
    fd70:	e0bff917 	ldw	r2,-28(fp)
    fd74:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    fd78:	e0bff917 	ldw	r2,-28(fp)
    fd7c:	00c00044 	movi	r3,1
    fd80:	10c00c45 	stb	r3,49(r2)
    fd84:	00000206 	br	fd90 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    fd88:	e0bff917 	ldw	r2,-28(fp)
    fd8c:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    fd90:	e0bff917 	ldw	r2,-28(fp)
    fd94:	10800c03 	ldbu	r2,48(r2)
    fd98:	10803fcc 	andi	r2,r2,255
    fd9c:	1080020c 	andi	r2,r2,8
    fda0:	1000151e 	bne	r2,zero,fdf8 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    fda4:	e0bff917 	ldw	r2,-28(fp)
    fda8:	10c00d83 	ldbu	r3,54(r2)
    fdac:	d0a84403 	ldbu	r2,-24304(gp)
    fdb0:	1884b03a 	or	r2,r3,r2
    fdb4:	d0a84405 	stb	r2,-24304(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    fdb8:	e0bff917 	ldw	r2,-28(fp)
    fdbc:	10800d03 	ldbu	r2,52(r2)
    fdc0:	10c03fcc 	andi	r3,r2,255
    fdc4:	e0bff917 	ldw	r2,-28(fp)
    fdc8:	10800d03 	ldbu	r2,52(r2)
    fdcc:	11003fcc 	andi	r4,r2,255
    fdd0:	d0a84444 	addi	r2,gp,-24303
    fdd4:	2085883a 	add	r2,r4,r2
    fdd8:	11000003 	ldbu	r4,0(r2)
    fddc:	e0bff917 	ldw	r2,-28(fp)
    fde0:	10800d43 	ldbu	r2,53(r2)
    fde4:	2084b03a 	or	r2,r4,r2
    fde8:	1009883a 	mov	r4,r2
    fdec:	d0a84444 	addi	r2,gp,-24303
    fdf0:	1885883a 	add	r2,r3,r2
    fdf4:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    fdf8:	e0bff917 	ldw	r2,-28(fp)
    fdfc:	10800517 	ldw	r2,20(r2)
    fe00:	e0bff915 	stw	r2,-28(fp)
    fe04:	e0bffb17 	ldw	r2,-20(fp)
    fe08:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fe0c:	e0bffe17 	ldw	r2,-8(fp)
    fe10:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    fe14:	e0bff917 	ldw	r2,-28(fp)
    fe18:	10800c83 	ldbu	r2,50(r2)
    fe1c:	10803fcc 	andi	r2,r2,255
    fe20:	10800518 	cmpnei	r2,r2,20
    fe24:	103fb21e 	bne	r2,zero,fcf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fcf0>
    fe28:	00000106 	br	fe30 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
    fe2c:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    fe30:	e037883a 	mov	sp,fp
    fe34:	dfc00117 	ldw	ra,4(sp)
    fe38:	df000017 	ldw	fp,0(sp)
    fe3c:	dec00204 	addi	sp,sp,8
    fe40:	f800283a 	ret

0000fe44 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    fe44:	deffff04 	addi	sp,sp,-4
    fe48:	df000015 	stw	fp,0(sp)
    fe4c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    fe50:	00804784 	movi	r2,286
}
    fe54:	e037883a 	mov	sp,fp
    fe58:	df000017 	ldw	fp,0(sp)
    fe5c:	dec00104 	addi	sp,sp,4
    fe60:	f800283a 	ret

0000fe64 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    fe64:	deffff04 	addi	sp,sp,-4
    fe68:	df000015 	stw	fp,0(sp)
    fe6c:	d839883a 	mov	fp,sp
}
    fe70:	0001883a 	nop
    fe74:	e037883a 	mov	sp,fp
    fe78:	df000017 	ldw	fp,0(sp)
    fe7c:	dec00104 	addi	sp,sp,4
    fe80:	f800283a 	ret

0000fe84 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    fe84:	defff804 	addi	sp,sp,-32
    fe88:	dfc00715 	stw	ra,28(sp)
    fe8c:	df000615 	stw	fp,24(sp)
    fe90:	df000604 	addi	fp,sp,24
    fe94:	e13ffc15 	stw	r4,-16(fp)
    fe98:	e17ffd15 	stw	r5,-12(fp)
    fe9c:	3007883a 	mov	r3,r6
    fea0:	3805883a 	mov	r2,r7
    fea4:	e0fffe05 	stb	r3,-8(fp)
    fea8:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    feac:	e0bffc17 	ldw	r2,-16(fp)
    feb0:	10800283 	ldbu	r2,10(r2)
    feb4:	10c03fcc 	andi	r3,r2,255
    feb8:	008000b4 	movhi	r2,2
    febc:	10ac4604 	addi	r2,r2,-20200
    fec0:	10c5883a 	add	r2,r2,r3
    fec4:	10800003 	ldbu	r2,0(r2)
    fec8:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    fecc:	e0bffa03 	ldbu	r2,-24(fp)
    fed0:	e0fffc17 	ldw	r3,-16(fp)
    fed4:	1885883a 	add	r2,r3,r2
    fed8:	108002c4 	addi	r2,r2,11
    fedc:	10800003 	ldbu	r2,0(r2)
    fee0:	10c03fcc 	andi	r3,r2,255
    fee4:	008000b4 	movhi	r2,2
    fee8:	10ac4604 	addi	r2,r2,-20200
    feec:	10c5883a 	add	r2,r2,r3
    fef0:	10800003 	ldbu	r2,0(r2)
    fef4:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    fef8:	e0bffa03 	ldbu	r2,-24(fp)
    fefc:	100490fa 	slli	r2,r2,3
    ff00:	1007883a 	mov	r3,r2
    ff04:	e0bffa43 	ldbu	r2,-23(fp)
    ff08:	1885883a 	add	r2,r3,r2
    ff0c:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    ff10:	e0fffa83 	ldbu	r3,-22(fp)
    ff14:	008000f4 	movhi	r2,3
    ff18:	10896904 	addi	r2,r2,9636
    ff1c:	18c7883a 	add	r3,r3,r3
    ff20:	18c7883a 	add	r3,r3,r3
    ff24:	10c5883a 	add	r2,r2,r3
    ff28:	10800017 	ldw	r2,0(r2)
    ff2c:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    ff30:	e0bffb17 	ldw	r2,-20(fp)
    ff34:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    ff38:	e0bffb17 	ldw	r2,-20(fp)
    ff3c:	e0fffd17 	ldw	r3,-12(fp)
    ff40:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    ff44:	e0bffb17 	ldw	r2,-20(fp)
    ff48:	10800c03 	ldbu	r2,48(r2)
    ff4c:	1007883a 	mov	r3,r2
    ff50:	e0bffe03 	ldbu	r2,-8(fp)
    ff54:	0084303a 	nor	r2,zero,r2
    ff58:	1884703a 	and	r2,r3,r2
    ff5c:	1007883a 	mov	r3,r2
    ff60:	e0bffb17 	ldw	r2,-20(fp)
    ff64:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    ff68:	e0bffb17 	ldw	r2,-20(fp)
    ff6c:	e0ffff03 	ldbu	r3,-4(fp)
    ff70:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    ff74:	e0bffb17 	ldw	r2,-20(fp)
    ff78:	10800c03 	ldbu	r2,48(r2)
    ff7c:	10803fcc 	andi	r2,r2,255
    ff80:	1080020c 	andi	r2,r2,8
    ff84:	1000111e 	bne	r2,zero,ffcc <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    ff88:	e0bffb17 	ldw	r2,-20(fp)
    ff8c:	10c00d83 	ldbu	r3,54(r2)
    ff90:	d0a84403 	ldbu	r2,-24304(gp)
    ff94:	1884b03a 	or	r2,r3,r2
    ff98:	d0a84405 	stb	r2,-24304(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    ff9c:	e0fffa03 	ldbu	r3,-24(fp)
    ffa0:	e13ffa03 	ldbu	r4,-24(fp)
    ffa4:	d0a84444 	addi	r2,gp,-24303
    ffa8:	2085883a 	add	r2,r4,r2
    ffac:	11000003 	ldbu	r4,0(r2)
    ffb0:	e0bffb17 	ldw	r2,-20(fp)
    ffb4:	10800d43 	ldbu	r2,53(r2)
    ffb8:	2084b03a 	or	r2,r4,r2
    ffbc:	1009883a 	mov	r4,r2
    ffc0:	d0a84444 	addi	r2,gp,-24303
    ffc4:	1885883a 	add	r2,r3,r2
    ffc8:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    ffcc:	e17ffc17 	ldw	r5,-16(fp)
    ffd0:	e13ffb17 	ldw	r4,-20(fp)
    ffd4:	001027c0 	call	1027c <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    ffd8:	e0bffb17 	ldw	r2,-20(fp)
    ffdc:	10800817 	ldw	r2,32(r2)
    ffe0:	10000826 	beq	r2,zero,10004 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    ffe4:	e0bffb17 	ldw	r2,-20(fp)
    ffe8:	10800817 	ldw	r2,32(r2)
    ffec:	100b883a 	mov	r5,r2
    fff0:	e13ffb17 	ldw	r4,-20(fp)
    fff4:	00103340 	call	10334 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    fff8:	e0bffb17 	ldw	r2,-20(fp)
    fffc:	e0fffc17 	ldw	r3,-16(fp)
   10000:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   10004:	e0bffa83 	ldbu	r2,-22(fp)
}
   10008:	e037883a 	mov	sp,fp
   1000c:	dfc00117 	ldw	ra,4(sp)
   10010:	df000017 	ldw	fp,0(sp)
   10014:	dec00204 	addi	sp,sp,8
   10018:	f800283a 	ret

0001001c <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   1001c:	defffd04 	addi	sp,sp,-12
   10020:	df000215 	stw	fp,8(sp)
   10024:	df000204 	addi	fp,sp,8
   10028:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   1002c:	d0a84717 	ldw	r2,-24292(gp)
   10030:	e0ffff17 	ldw	r3,-4(fp)
   10034:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   10038:	d0a84717 	ldw	r2,-24292(gp)
   1003c:	10800d03 	ldbu	r2,52(r2)
   10040:	10803fcc 	andi	r2,r2,255
   10044:	d0e84717 	ldw	r3,-24292(gp)
   10048:	18c00d03 	ldbu	r3,52(r3)
   1004c:	18c03fcc 	andi	r3,r3,255
   10050:	e13fff17 	ldw	r4,-4(fp)
   10054:	20c7883a 	add	r3,r4,r3
   10058:	18c002c4 	addi	r3,r3,11
   1005c:	19000003 	ldbu	r4,0(r3)
   10060:	d0e84717 	ldw	r3,-24292(gp)
   10064:	18c00d43 	ldbu	r3,53(r3)
   10068:	20c6b03a 	or	r3,r4,r3
   1006c:	1809883a 	mov	r4,r3
   10070:	e0ffff17 	ldw	r3,-4(fp)
   10074:	1885883a 	add	r2,r3,r2
   10078:	108002c4 	addi	r2,r2,11
   1007c:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   10080:	e0bfff17 	ldw	r2,-4(fp)
   10084:	10c00283 	ldbu	r3,10(r2)
   10088:	d0a84717 	ldw	r2,-24292(gp)
   1008c:	10800d83 	ldbu	r2,54(r2)
   10090:	1884b03a 	or	r2,r3,r2
   10094:	1007883a 	mov	r3,r2
   10098:	e0bfff17 	ldw	r2,-4(fp)
   1009c:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   100a0:	d0a84717 	ldw	r2,-24292(gp)
   100a4:	10800d03 	ldbu	r2,52(r2)
   100a8:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   100ac:	e0fffe03 	ldbu	r3,-8(fp)
   100b0:	e13ffe03 	ldbu	r4,-8(fp)
   100b4:	d0a84444 	addi	r2,gp,-24303
   100b8:	2085883a 	add	r2,r4,r2
   100bc:	10800003 	ldbu	r2,0(r2)
   100c0:	1009883a 	mov	r4,r2
   100c4:	d0a84717 	ldw	r2,-24292(gp)
   100c8:	10800d43 	ldbu	r2,53(r2)
   100cc:	0084303a 	nor	r2,zero,r2
   100d0:	2084703a 	and	r2,r4,r2
   100d4:	1009883a 	mov	r4,r2
   100d8:	d0a84444 	addi	r2,gp,-24303
   100dc:	1885883a 	add	r2,r3,r2
   100e0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   100e4:	e0fffe03 	ldbu	r3,-8(fp)
   100e8:	d0a84444 	addi	r2,gp,-24303
   100ec:	1885883a 	add	r2,r3,r2
   100f0:	10800003 	ldbu	r2,0(r2)
   100f4:	10803fcc 	andi	r2,r2,255
   100f8:	1000071e 	bne	r2,zero,10118 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   100fc:	d0a84717 	ldw	r2,-24292(gp)
   10100:	10800d83 	ldbu	r2,54(r2)
   10104:	0084303a 	nor	r2,zero,r2
   10108:	1007883a 	mov	r3,r2
   1010c:	d0a84403 	ldbu	r2,-24304(gp)
   10110:	1884703a 	and	r2,r3,r2
   10114:	d0a84405 	stb	r2,-24304(gp)
    }
}
   10118:	0001883a 	nop
   1011c:	e037883a 	mov	sp,fp
   10120:	df000017 	ldw	fp,0(sp)
   10124:	dec00104 	addi	sp,sp,4
   10128:	f800283a 	ret

0001012c <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   1012c:	defffb04 	addi	sp,sp,-20
   10130:	df000415 	stw	fp,16(sp)
   10134:	df000404 	addi	fp,sp,16
   10138:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   1013c:	d0a84717 	ldw	r2,-24292(gp)
   10140:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   10144:	d0a84717 	ldw	r2,-24292(gp)
   10148:	e0ffff17 	ldw	r3,-4(fp)
   1014c:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   10150:	e0bfff17 	ldw	r2,-4(fp)
   10154:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   10158:	e0bffc17 	ldw	r2,-16(fp)
   1015c:	10800017 	ldw	r2,0(r2)
   10160:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   10164:	00002006 	br	101e8 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   10168:	d0a84717 	ldw	r2,-24292(gp)
   1016c:	10800d03 	ldbu	r2,52(r2)
   10170:	10803fcc 	andi	r2,r2,255
   10174:	d0e84717 	ldw	r3,-24292(gp)
   10178:	18c00d03 	ldbu	r3,52(r3)
   1017c:	18c03fcc 	andi	r3,r3,255
   10180:	e13ffd17 	ldw	r4,-12(fp)
   10184:	20c7883a 	add	r3,r4,r3
   10188:	18c002c4 	addi	r3,r3,11
   1018c:	19000003 	ldbu	r4,0(r3)
   10190:	d0e84717 	ldw	r3,-24292(gp)
   10194:	18c00d43 	ldbu	r3,53(r3)
   10198:	20c6b03a 	or	r3,r4,r3
   1019c:	1809883a 	mov	r4,r3
   101a0:	e0fffd17 	ldw	r3,-12(fp)
   101a4:	1885883a 	add	r2,r3,r2
   101a8:	108002c4 	addi	r2,r2,11
   101ac:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   101b0:	e0bffd17 	ldw	r2,-12(fp)
   101b4:	10c00283 	ldbu	r3,10(r2)
   101b8:	d0a84717 	ldw	r2,-24292(gp)
   101bc:	10800d83 	ldbu	r2,54(r2)
   101c0:	1884b03a 	or	r2,r3,r2
   101c4:	1007883a 	mov	r3,r2
   101c8:	e0bffd17 	ldw	r2,-12(fp)
   101cc:	10c00285 	stb	r3,10(r2)
        pevents++;
   101d0:	e0bffc17 	ldw	r2,-16(fp)
   101d4:	10800104 	addi	r2,r2,4
   101d8:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   101dc:	e0bffc17 	ldw	r2,-16(fp)
   101e0:	10800017 	ldw	r2,0(r2)
   101e4:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   101e8:	e0bffd17 	ldw	r2,-12(fp)
   101ec:	103fde1e 	bne	r2,zero,10168 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010168>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   101f0:	d0a84717 	ldw	r2,-24292(gp)
   101f4:	10800d03 	ldbu	r2,52(r2)
   101f8:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   101fc:	e0fffe03 	ldbu	r3,-8(fp)
   10200:	e13ffe03 	ldbu	r4,-8(fp)
   10204:	d0a84444 	addi	r2,gp,-24303
   10208:	2085883a 	add	r2,r4,r2
   1020c:	10800003 	ldbu	r2,0(r2)
   10210:	1009883a 	mov	r4,r2
   10214:	d0a84717 	ldw	r2,-24292(gp)
   10218:	10800d43 	ldbu	r2,53(r2)
   1021c:	0084303a 	nor	r2,zero,r2
   10220:	2084703a 	and	r2,r4,r2
   10224:	1009883a 	mov	r4,r2
   10228:	d0a84444 	addi	r2,gp,-24303
   1022c:	1885883a 	add	r2,r3,r2
   10230:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   10234:	e0fffe03 	ldbu	r3,-8(fp)
   10238:	d0a84444 	addi	r2,gp,-24303
   1023c:	1885883a 	add	r2,r3,r2
   10240:	10800003 	ldbu	r2,0(r2)
   10244:	10803fcc 	andi	r2,r2,255
   10248:	1000071e 	bne	r2,zero,10268 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   1024c:	d0a84717 	ldw	r2,-24292(gp)
   10250:	10800d83 	ldbu	r2,54(r2)
   10254:	0084303a 	nor	r2,zero,r2
   10258:	1007883a 	mov	r3,r2
   1025c:	d0a84403 	ldbu	r2,-24304(gp)
   10260:	1884703a 	and	r2,r3,r2
   10264:	d0a84405 	stb	r2,-24304(gp)
    }
}
   10268:	0001883a 	nop
   1026c:	e037883a 	mov	sp,fp
   10270:	df000017 	ldw	fp,0(sp)
   10274:	dec00104 	addi	sp,sp,4
   10278:	f800283a 	ret

0001027c <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   1027c:	defffc04 	addi	sp,sp,-16
   10280:	df000315 	stw	fp,12(sp)
   10284:	df000304 	addi	fp,sp,12
   10288:	e13ffe15 	stw	r4,-8(fp)
   1028c:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   10290:	e0bffe17 	ldw	r2,-8(fp)
   10294:	10800d03 	ldbu	r2,52(r2)
   10298:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   1029c:	e0bffd03 	ldbu	r2,-12(fp)
   102a0:	e0fffd03 	ldbu	r3,-12(fp)
   102a4:	e13fff17 	ldw	r4,-4(fp)
   102a8:	20c7883a 	add	r3,r4,r3
   102ac:	18c002c4 	addi	r3,r3,11
   102b0:	18c00003 	ldbu	r3,0(r3)
   102b4:	1809883a 	mov	r4,r3
   102b8:	e0fffe17 	ldw	r3,-8(fp)
   102bc:	18c00d43 	ldbu	r3,53(r3)
   102c0:	00c6303a 	nor	r3,zero,r3
   102c4:	20c6703a 	and	r3,r4,r3
   102c8:	1809883a 	mov	r4,r3
   102cc:	e0ffff17 	ldw	r3,-4(fp)
   102d0:	1885883a 	add	r2,r3,r2
   102d4:	108002c4 	addi	r2,r2,11
   102d8:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
   102dc:	e0bffd03 	ldbu	r2,-12(fp)
   102e0:	e0ffff17 	ldw	r3,-4(fp)
   102e4:	1885883a 	add	r2,r3,r2
   102e8:	108002c4 	addi	r2,r2,11
   102ec:	10800003 	ldbu	r2,0(r2)
   102f0:	10803fcc 	andi	r2,r2,255
   102f4:	10000a1e 	bne	r2,zero,10320 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   102f8:	e0bfff17 	ldw	r2,-4(fp)
   102fc:	10800283 	ldbu	r2,10(r2)
   10300:	1007883a 	mov	r3,r2
   10304:	e0bffe17 	ldw	r2,-8(fp)
   10308:	10800d83 	ldbu	r2,54(r2)
   1030c:	0084303a 	nor	r2,zero,r2
   10310:	1884703a 	and	r2,r3,r2
   10314:	1007883a 	mov	r3,r2
   10318:	e0bfff17 	ldw	r2,-4(fp)
   1031c:	10c00285 	stb	r3,10(r2)
    }
}
   10320:	0001883a 	nop
   10324:	e037883a 	mov	sp,fp
   10328:	df000017 	ldw	fp,0(sp)
   1032c:	dec00104 	addi	sp,sp,4
   10330:	f800283a 	ret

00010334 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   10334:	defffa04 	addi	sp,sp,-24
   10338:	df000515 	stw	fp,20(sp)
   1033c:	df000504 	addi	fp,sp,20
   10340:	e13ffe15 	stw	r4,-8(fp)
   10344:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   10348:	e0bffe17 	ldw	r2,-8(fp)
   1034c:	10800d03 	ldbu	r2,52(r2)
   10350:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   10354:	e0bffe17 	ldw	r2,-8(fp)
   10358:	10800d83 	ldbu	r2,54(r2)
   1035c:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   10360:	e0bffe17 	ldw	r2,-8(fp)
   10364:	10800d43 	ldbu	r2,53(r2)
   10368:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   1036c:	e0bfff17 	ldw	r2,-4(fp)
   10370:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   10374:	e0bffb17 	ldw	r2,-20(fp)
   10378:	10800017 	ldw	r2,0(r2)
   1037c:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   10380:	00002506 	br	10418 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   10384:	e0bffd03 	ldbu	r2,-12(fp)
   10388:	e0fffd03 	ldbu	r3,-12(fp)
   1038c:	e13ffc17 	ldw	r4,-16(fp)
   10390:	20c7883a 	add	r3,r4,r3
   10394:	18c002c4 	addi	r3,r3,11
   10398:	18c00003 	ldbu	r3,0(r3)
   1039c:	1809883a 	mov	r4,r3
   103a0:	e0fffd83 	ldbu	r3,-10(fp)
   103a4:	00c6303a 	nor	r3,zero,r3
   103a8:	20c6703a 	and	r3,r4,r3
   103ac:	1809883a 	mov	r4,r3
   103b0:	e0fffc17 	ldw	r3,-16(fp)
   103b4:	1885883a 	add	r2,r3,r2
   103b8:	108002c4 	addi	r2,r2,11
   103bc:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
   103c0:	e0bffd03 	ldbu	r2,-12(fp)
   103c4:	e0fffc17 	ldw	r3,-16(fp)
   103c8:	1885883a 	add	r2,r3,r2
   103cc:	108002c4 	addi	r2,r2,11
   103d0:	10800003 	ldbu	r2,0(r2)
   103d4:	10803fcc 	andi	r2,r2,255
   103d8:	1000091e 	bne	r2,zero,10400 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   103dc:	e0bffc17 	ldw	r2,-16(fp)
   103e0:	10800283 	ldbu	r2,10(r2)
   103e4:	1007883a 	mov	r3,r2
   103e8:	e0bffd43 	ldbu	r2,-11(fp)
   103ec:	0084303a 	nor	r2,zero,r2
   103f0:	1884703a 	and	r2,r3,r2
   103f4:	1007883a 	mov	r3,r2
   103f8:	e0bffc17 	ldw	r2,-16(fp)
   103fc:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   10400:	e0bffb17 	ldw	r2,-20(fp)
   10404:	10800104 	addi	r2,r2,4
   10408:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   1040c:	e0bffb17 	ldw	r2,-20(fp)
   10410:	10800017 	ldw	r2,0(r2)
   10414:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   10418:	e0bffc17 	ldw	r2,-16(fp)
   1041c:	103fd91e 	bne	r2,zero,10384 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010384>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   10420:	0001883a 	nop
   10424:	e037883a 	mov	sp,fp
   10428:	df000017 	ldw	fp,0(sp)
   1042c:	dec00104 	addi	sp,sp,4
   10430:	f800283a 	ret

00010434 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   10434:	defffc04 	addi	sp,sp,-16
   10438:	df000315 	stw	fp,12(sp)
   1043c:	df000304 	addi	fp,sp,12
   10440:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   10444:	e0bfff17 	ldw	r2,-4(fp)
   10448:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   1044c:	e0bfff17 	ldw	r2,-4(fp)
   10450:	108002c4 	addi	r2,r2,11
   10454:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   10458:	e03ffe05 	stb	zero,-8(fp)
   1045c:	00000706 	br	1047c <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   10460:	e0bffd17 	ldw	r2,-12(fp)
   10464:	10c00044 	addi	r3,r2,1
   10468:	e0fffd15 	stw	r3,-12(fp)
   1046c:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   10470:	e0bffe03 	ldbu	r2,-8(fp)
   10474:	10800044 	addi	r2,r2,1
   10478:	e0bffe05 	stb	r2,-8(fp)
   1047c:	e0bffe03 	ldbu	r2,-8(fp)
   10480:	108000f0 	cmpltui	r2,r2,3
   10484:	103ff61e 	bne	r2,zero,10460 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010460>
        *ptbl++ = 0;
    }
}
   10488:	0001883a 	nop
   1048c:	e037883a 	mov	sp,fp
   10490:	df000017 	ldw	fp,0(sp)
   10494:	dec00104 	addi	sp,sp,4
   10498:	f800283a 	ret

0001049c <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   1049c:	defffb04 	addi	sp,sp,-20
   104a0:	dfc00415 	stw	ra,16(sp)
   104a4:	df000315 	stw	fp,12(sp)
   104a8:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   104ac:	0142d004 	movi	r5,2880
   104b0:	010000f4 	movhi	r4,3
   104b4:	21055504 	addi	r4,r4,5460
   104b8:	00108140 	call	10814 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   104bc:	008000f4 	movhi	r2,3
   104c0:	10855504 	addi	r2,r2,5460
   104c4:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   104c8:	008000f4 	movhi	r2,3
   104cc:	10856104 	addi	r2,r2,5508
   104d0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   104d4:	e03ffd0d 	sth	zero,-12(fp)
   104d8:	00001306 	br	10528 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   104dc:	e0bffe17 	ldw	r2,-8(fp)
   104e0:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   104e4:	e0bffe17 	ldw	r2,-8(fp)
   104e8:	e0ffff17 	ldw	r3,-4(fp)
   104ec:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   104f0:	e0bffe17 	ldw	r2,-8(fp)
   104f4:	00c00fc4 	movi	r3,63
   104f8:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   104fc:	e0bffe17 	ldw	r2,-8(fp)
   10500:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   10504:	e0bffe17 	ldw	r2,-8(fp)
   10508:	10800c04 	addi	r2,r2,48
   1050c:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   10510:	e0bfff17 	ldw	r2,-4(fp)
   10514:	10800c04 	addi	r2,r2,48
   10518:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   1051c:	e0bffd0b 	ldhu	r2,-12(fp)
   10520:	10800044 	addi	r2,r2,1
   10524:	e0bffd0d 	sth	r2,-12(fp)
   10528:	e0bffd0b 	ldhu	r2,-12(fp)
   1052c:	10800ef0 	cmpltui	r2,r2,59
   10530:	103fea1e 	bne	r2,zero,104dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70104dc>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   10534:	e0bffe17 	ldw	r2,-8(fp)
   10538:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   1053c:	e0bffe17 	ldw	r2,-8(fp)
   10540:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   10544:	e0bffe17 	ldw	r2,-8(fp)
   10548:	00c00fc4 	movi	r3,63
   1054c:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   10550:	e0bffe17 	ldw	r2,-8(fp)
   10554:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   10558:	008000f4 	movhi	r2,3
   1055c:	10855504 	addi	r2,r2,5460
   10560:	d0a84515 	stw	r2,-24300(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   10564:	0001883a 	nop
   10568:	e037883a 	mov	sp,fp
   1056c:	dfc00117 	ldw	ra,4(sp)
   10570:	df000017 	ldw	fp,0(sp)
   10574:	dec00204 	addi	sp,sp,8
   10578:	f800283a 	ret

0001057c <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   1057c:	deffff04 	addi	sp,sp,-4
   10580:	df000015 	stw	fp,0(sp)
   10584:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   10588:	d0284815 	stw	zero,-24288(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   1058c:	d0284605 	stb	zero,-24296(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   10590:	d0283805 	stb	zero,-24352(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   10594:	d0284045 	stb	zero,-24319(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   10598:	d0283845 	stb	zero,-24351(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   1059c:	d0283d15 	stw	zero,-24332(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   105a0:	d0283915 	stw	zero,-24348(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   105a4:	d0284b15 	stw	zero,-24276(gp)
    OSIdleCtrMax  = 0L;
   105a8:	d0283e15 	stw	zero,-24328(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   105ac:	d0284a05 	stb	zero,-24280(gp)
#endif
}
   105b0:	0001883a 	nop
   105b4:	e037883a 	mov	sp,fp
   105b8:	df000017 	ldw	fp,0(sp)
   105bc:	dec00104 	addi	sp,sp,4
   105c0:	f800283a 	ret

000105c4 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   105c4:	defffd04 	addi	sp,sp,-12
   105c8:	df000215 	stw	fp,8(sp)
   105cc:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   105d0:	d0284405 	stb	zero,-24304(gp)
    prdytbl       = &OSRdyTbl[0];
   105d4:	d0a84444 	addi	r2,gp,-24303
   105d8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   105dc:	e03ffe05 	stb	zero,-8(fp)
   105e0:	00000706 	br	10600 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   105e4:	e0bfff17 	ldw	r2,-4(fp)
   105e8:	10c00044 	addi	r3,r2,1
   105ec:	e0ffff15 	stw	r3,-4(fp)
   105f0:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   105f4:	e0bffe03 	ldbu	r2,-8(fp)
   105f8:	10800044 	addi	r2,r2,1
   105fc:	e0bffe05 	stb	r2,-8(fp)
   10600:	e0bffe03 	ldbu	r2,-8(fp)
   10604:	108000f0 	cmpltui	r2,r2,3
   10608:	103ff61e 	bne	r2,zero,105e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70105e4>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   1060c:	d0283a45 	stb	zero,-24343(gp)
    OSPrioHighRdy = 0;
   10610:	d0283a05 	stb	zero,-24344(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   10614:	d0284215 	stw	zero,-24312(gp)
    OSTCBCur      = (OS_TCB *)0;
   10618:	d0284715 	stw	zero,-24292(gp)
}
   1061c:	0001883a 	nop
   10620:	e037883a 	mov	sp,fp
   10624:	df000017 	ldw	fp,0(sp)
   10628:	dec00104 	addi	sp,sp,4
   1062c:	f800283a 	ret

00010630 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   10630:	defff804 	addi	sp,sp,-32
   10634:	dfc00715 	stw	ra,28(sp)
   10638:	df000615 	stw	fp,24(sp)
   1063c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   10640:	008000c4 	movi	r2,3
   10644:	d8800415 	stw	r2,16(sp)
   10648:	d8000315 	stw	zero,12(sp)
   1064c:	00808004 	movi	r2,512
   10650:	d8800215 	stw	r2,8(sp)
   10654:	008000f4 	movhi	r2,3
   10658:	10835504 	addi	r2,r2,3412
   1065c:	d8800115 	stw	r2,4(sp)
   10660:	00bfffd4 	movui	r2,65535
   10664:	d8800015 	stw	r2,0(sp)
   10668:	01c00504 	movi	r7,20
   1066c:	018000f4 	movhi	r6,3
   10670:	31855404 	addi	r6,r6,5456
   10674:	000b883a 	mov	r5,zero
   10678:	01000074 	movhi	r4,1
   1067c:	2102b704 	addi	r4,r4,2780
   10680:	00151ac0 	call	151ac <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   10684:	e1bfff04 	addi	r6,fp,-4
   10688:	014000b4 	movhi	r5,2
   1068c:	296c8604 	addi	r5,r5,-19944
   10690:	01000504 	movi	r4,20
   10694:	00159bc0 	call	159bc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   10698:	0001883a 	nop
   1069c:	e037883a 	mov	sp,fp
   106a0:	dfc00117 	ldw	ra,4(sp)
   106a4:	df000017 	ldw	fp,0(sp)
   106a8:	dec00204 	addi	sp,sp,8
   106ac:	f800283a 	ret

000106b0 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   106b0:	defff804 	addi	sp,sp,-32
   106b4:	dfc00715 	stw	ra,28(sp)
   106b8:	df000615 	stw	fp,24(sp)
   106bc:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   106c0:	008000c4 	movi	r2,3
   106c4:	d8800415 	stw	r2,16(sp)
   106c8:	d8000315 	stw	zero,12(sp)
   106cc:	00808004 	movi	r2,512
   106d0:	d8800215 	stw	r2,8(sp)
   106d4:	008000f4 	movhi	r2,3
   106d8:	1080dd04 	addi	r2,r2,884
   106dc:	d8800115 	stw	r2,4(sp)
   106e0:	00bfff94 	movui	r2,65534
   106e4:	d8800015 	stw	r2,0(sp)
   106e8:	01c004c4 	movi	r7,19
   106ec:	018000f4 	movhi	r6,3
   106f0:	3182dc04 	addi	r6,r6,2928
   106f4:	000b883a 	mov	r5,zero
   106f8:	01000074 	movhi	r4,1
   106fc:	2102ce04 	addi	r4,r4,2872
   10700:	00151ac0 	call	151ac <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   10704:	e1bfff04 	addi	r6,fp,-4
   10708:	014000b4 	movhi	r5,2
   1070c:	296c8a04 	addi	r5,r5,-19928
   10710:	010004c4 	movi	r4,19
   10714:	00159bc0 	call	159bc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   10718:	0001883a 	nop
   1071c:	e037883a 	mov	sp,fp
   10720:	dfc00117 	ldw	ra,4(sp)
   10724:	df000017 	ldw	fp,0(sp)
   10728:	dec00204 	addi	sp,sp,8
   1072c:	f800283a 	ret

00010730 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   10730:	defffb04 	addi	sp,sp,-20
   10734:	dfc00415 	stw	ra,16(sp)
   10738:	df000315 	stw	fp,12(sp)
   1073c:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   10740:	01414404 	movi	r5,1296
   10744:	010000f4 	movhi	r4,3
   10748:	21082504 	addi	r4,r4,8340
   1074c:	00108140 	call	10814 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   10750:	01401504 	movi	r5,84
   10754:	010000f4 	movhi	r4,3
   10758:	21096904 	addi	r4,r4,9636
   1075c:	00108140 	call	10814 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   10760:	008000f4 	movhi	r2,3
   10764:	10882504 	addi	r2,r2,8340
   10768:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   1076c:	008000f4 	movhi	r2,3
   10770:	10884004 	addi	r2,r2,8448
   10774:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   10778:	e03ffd05 	stb	zero,-12(fp)
   1077c:	00001106 	br	107c4 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   10780:	e0bffe17 	ldw	r2,-8(fp)
   10784:	e0ffff17 	ldw	r3,-4(fp)
   10788:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   1078c:	e0bffe17 	ldw	r2,-8(fp)
   10790:	00c00fc4 	movi	r3,63
   10794:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   10798:	e0bffe17 	ldw	r2,-8(fp)
   1079c:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   107a0:	e0bffe17 	ldw	r2,-8(fp)
   107a4:	10801b04 	addi	r2,r2,108
   107a8:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   107ac:	e0bfff17 	ldw	r2,-4(fp)
   107b0:	10801b04 	addi	r2,r2,108
   107b4:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   107b8:	e0bffd03 	ldbu	r2,-12(fp)
   107bc:	10800044 	addi	r2,r2,1
   107c0:	e0bffd05 	stb	r2,-12(fp)
   107c4:	e0bffd03 	ldbu	r2,-12(fp)
   107c8:	108002f0 	cmpltui	r2,r2,11
   107cc:	103fec1e 	bne	r2,zero,10780 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010780>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   107d0:	e0bffe17 	ldw	r2,-8(fp)
   107d4:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   107d8:	e0bffe17 	ldw	r2,-8(fp)
   107dc:	00c00fc4 	movi	r3,63
   107e0:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   107e4:	e0bffe17 	ldw	r2,-8(fp)
   107e8:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   107ec:	d0283b15 	stw	zero,-24340(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   107f0:	008000f4 	movhi	r2,3
   107f4:	10882504 	addi	r2,r2,8340
   107f8:	d0a83f15 	stw	r2,-24324(gp)
}
   107fc:	0001883a 	nop
   10800:	e037883a 	mov	sp,fp
   10804:	dfc00117 	ldw	ra,4(sp)
   10808:	df000017 	ldw	fp,0(sp)
   1080c:	dec00204 	addi	sp,sp,8
   10810:	f800283a 	ret

00010814 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   10814:	defffd04 	addi	sp,sp,-12
   10818:	df000215 	stw	fp,8(sp)
   1081c:	df000204 	addi	fp,sp,8
   10820:	e13ffe15 	stw	r4,-8(fp)
   10824:	2805883a 	mov	r2,r5
   10828:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   1082c:	00000706 	br	1084c <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   10830:	e0bffe17 	ldw	r2,-8(fp)
   10834:	10c00044 	addi	r3,r2,1
   10838:	e0fffe15 	stw	r3,-8(fp)
   1083c:	10000005 	stb	zero,0(r2)
        size--;
   10840:	e0bfff0b 	ldhu	r2,-4(fp)
   10844:	10bfffc4 	addi	r2,r2,-1
   10848:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   1084c:	e0bfff0b 	ldhu	r2,-4(fp)
   10850:	103ff71e 	bne	r2,zero,10830 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010830>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   10854:	0001883a 	nop
   10858:	e037883a 	mov	sp,fp
   1085c:	df000017 	ldw	fp,0(sp)
   10860:	dec00104 	addi	sp,sp,4
   10864:	f800283a 	ret

00010868 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   10868:	defffc04 	addi	sp,sp,-16
   1086c:	df000315 	stw	fp,12(sp)
   10870:	df000304 	addi	fp,sp,12
   10874:	e13ffd15 	stw	r4,-12(fp)
   10878:	e17ffe15 	stw	r5,-8(fp)
   1087c:	3005883a 	mov	r2,r6
   10880:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   10884:	00000b06 	br	108b4 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   10888:	e0bffd17 	ldw	r2,-12(fp)
   1088c:	10c00044 	addi	r3,r2,1
   10890:	e0fffd15 	stw	r3,-12(fp)
   10894:	e0fffe17 	ldw	r3,-8(fp)
   10898:	19000044 	addi	r4,r3,1
   1089c:	e13ffe15 	stw	r4,-8(fp)
   108a0:	18c00003 	ldbu	r3,0(r3)
   108a4:	10c00005 	stb	r3,0(r2)
        size--;
   108a8:	e0bfff0b 	ldhu	r2,-4(fp)
   108ac:	10bfffc4 	addi	r2,r2,-1
   108b0:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   108b4:	e0bfff0b 	ldhu	r2,-4(fp)
   108b8:	103ff31e 	bne	r2,zero,10888 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010888>
        *pdest++ = *psrc++;
        size--;
    }
}
   108bc:	0001883a 	nop
   108c0:	e037883a 	mov	sp,fp
   108c4:	df000017 	ldw	fp,0(sp)
   108c8:	dec00104 	addi	sp,sp,4
   108cc:	f800283a 	ret

000108d0 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   108d0:	defffb04 	addi	sp,sp,-20
   108d4:	dfc00415 	stw	ra,16(sp)
   108d8:	df000315 	stw	fp,12(sp)
   108dc:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   108e0:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   108e4:	0005303a 	rdctl	r2,status
   108e8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   108ec:	e0ffff17 	ldw	r3,-4(fp)
   108f0:	00bfff84 	movi	r2,-2
   108f4:	1884703a 	and	r2,r3,r2
   108f8:	1001703a 	wrctl	status,r2
  
  return context;
   108fc:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
   10900:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   10904:	d0a84603 	ldbu	r2,-24296(gp)
   10908:	10803fcc 	andi	r2,r2,255
   1090c:	10001a1e 	bne	r2,zero,10978 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   10910:	d0a83803 	ldbu	r2,-24352(gp)
   10914:	10803fcc 	andi	r2,r2,255
   10918:	1000171e 	bne	r2,zero,10978 <OS_Sched+0xa8>
            OS_SchedNew();
   1091c:	00109a00 	call	109a0 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   10920:	d0e83a03 	ldbu	r3,-24344(gp)
   10924:	d0a83a43 	ldbu	r2,-24343(gp)
   10928:	18c03fcc 	andi	r3,r3,255
   1092c:	10803fcc 	andi	r2,r2,255
   10930:	18801126 	beq	r3,r2,10978 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   10934:	d0a83a03 	ldbu	r2,-24344(gp)
   10938:	10c03fcc 	andi	r3,r2,255
   1093c:	008000f4 	movhi	r2,3
   10940:	10896904 	addi	r2,r2,9636
   10944:	18c7883a 	add	r3,r3,r3
   10948:	18c7883a 	add	r3,r3,r3
   1094c:	10c5883a 	add	r2,r2,r3
   10950:	10800017 	ldw	r2,0(r2)
   10954:	d0a84215 	stw	r2,-24312(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   10958:	d0a84217 	ldw	r2,-24312(gp)
   1095c:	10c00e17 	ldw	r3,56(r2)
   10960:	18c00044 	addi	r3,r3,1
   10964:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   10968:	d0a83d17 	ldw	r2,-24332(gp)
   1096c:	10800044 	addi	r2,r2,1
   10970:	d0a83d15 	stw	r2,-24332(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   10974:	0019ca80 	call	19ca8 <OSCtxSw>
   10978:	e0bffd17 	ldw	r2,-12(fp)
   1097c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10980:	e0bffe17 	ldw	r2,-8(fp)
   10984:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   10988:	0001883a 	nop
   1098c:	e037883a 	mov	sp,fp
   10990:	dfc00117 	ldw	ra,4(sp)
   10994:	df000017 	ldw	fp,0(sp)
   10998:	dec00204 	addi	sp,sp,8
   1099c:	f800283a 	ret

000109a0 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   109a0:	defffe04 	addi	sp,sp,-8
   109a4:	df000115 	stw	fp,4(sp)
   109a8:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   109ac:	d0a84403 	ldbu	r2,-24304(gp)
   109b0:	10c03fcc 	andi	r3,r2,255
   109b4:	008000b4 	movhi	r2,2
   109b8:	10ac4604 	addi	r2,r2,-20200
   109bc:	10c5883a 	add	r2,r2,r3
   109c0:	10800003 	ldbu	r2,0(r2)
   109c4:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   109c8:	e0bfff03 	ldbu	r2,-4(fp)
   109cc:	100490fa 	slli	r2,r2,3
   109d0:	1009883a 	mov	r4,r2
   109d4:	e0ffff03 	ldbu	r3,-4(fp)
   109d8:	d0a84444 	addi	r2,gp,-24303
   109dc:	1885883a 	add	r2,r3,r2
   109e0:	10800003 	ldbu	r2,0(r2)
   109e4:	10c03fcc 	andi	r3,r2,255
   109e8:	008000b4 	movhi	r2,2
   109ec:	10ac4604 	addi	r2,r2,-20200
   109f0:	10c5883a 	add	r2,r2,r3
   109f4:	10800003 	ldbu	r2,0(r2)
   109f8:	2085883a 	add	r2,r4,r2
   109fc:	d0a83a05 	stb	r2,-24344(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   10a00:	0001883a 	nop
   10a04:	e037883a 	mov	sp,fp
   10a08:	df000017 	ldw	fp,0(sp)
   10a0c:	dec00104 	addi	sp,sp,4
   10a10:	f800283a 	ret

00010a14 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   10a14:	defffc04 	addi	sp,sp,-16
   10a18:	df000315 	stw	fp,12(sp)
   10a1c:	df000304 	addi	fp,sp,12
   10a20:	e13ffe15 	stw	r4,-8(fp)
   10a24:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   10a28:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   10a2c:	00000b06 	br	10a5c <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   10a30:	e0bffe17 	ldw	r2,-8(fp)
   10a34:	10c00044 	addi	r3,r2,1
   10a38:	e0fffe15 	stw	r3,-8(fp)
   10a3c:	e0ffff17 	ldw	r3,-4(fp)
   10a40:	19000044 	addi	r4,r3,1
   10a44:	e13fff15 	stw	r4,-4(fp)
   10a48:	18c00003 	ldbu	r3,0(r3)
   10a4c:	10c00005 	stb	r3,0(r2)
        len++;
   10a50:	e0bffd03 	ldbu	r2,-12(fp)
   10a54:	10800044 	addi	r2,r2,1
   10a58:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   10a5c:	e0bfff17 	ldw	r2,-4(fp)
   10a60:	10800003 	ldbu	r2,0(r2)
   10a64:	10803fcc 	andi	r2,r2,255
   10a68:	103ff11e 	bne	r2,zero,10a30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010a30>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   10a6c:	e0bffe17 	ldw	r2,-8(fp)
   10a70:	10000005 	stb	zero,0(r2)
    return (len);
   10a74:	e0bffd03 	ldbu	r2,-12(fp)
}
   10a78:	e037883a 	mov	sp,fp
   10a7c:	df000017 	ldw	fp,0(sp)
   10a80:	dec00104 	addi	sp,sp,4
   10a84:	f800283a 	ret

00010a88 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   10a88:	defffd04 	addi	sp,sp,-12
   10a8c:	df000215 	stw	fp,8(sp)
   10a90:	df000204 	addi	fp,sp,8
   10a94:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   10a98:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   10a9c:	00000606 	br	10ab8 <OS_StrLen+0x30>
        psrc++;
   10aa0:	e0bfff17 	ldw	r2,-4(fp)
   10aa4:	10800044 	addi	r2,r2,1
   10aa8:	e0bfff15 	stw	r2,-4(fp)
        len++;
   10aac:	e0bffe03 	ldbu	r2,-8(fp)
   10ab0:	10800044 	addi	r2,r2,1
   10ab4:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   10ab8:	e0bfff17 	ldw	r2,-4(fp)
   10abc:	10800003 	ldbu	r2,0(r2)
   10ac0:	10803fcc 	andi	r2,r2,255
   10ac4:	103ff61e 	bne	r2,zero,10aa0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010aa0>
        psrc++;
        len++;
    }
    return (len);
   10ac8:	e0bffe03 	ldbu	r2,-8(fp)
}
   10acc:	e037883a 	mov	sp,fp
   10ad0:	df000017 	ldw	fp,0(sp)
   10ad4:	dec00104 	addi	sp,sp,4
   10ad8:	f800283a 	ret

00010adc <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   10adc:	defffa04 	addi	sp,sp,-24
   10ae0:	dfc00515 	stw	ra,20(sp)
   10ae4:	df000415 	stw	fp,16(sp)
   10ae8:	df000404 	addi	fp,sp,16
   10aec:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10af0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10af4:	0005303a 	rdctl	r2,status
   10af8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10afc:	e0fffd17 	ldw	r3,-12(fp)
   10b00:	00bfff84 	movi	r2,-2
   10b04:	1884703a 	and	r2,r3,r2
   10b08:	1001703a 	wrctl	status,r2
  
  return context;
   10b0c:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   10b10:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   10b14:	d0a83917 	ldw	r2,-24348(gp)
   10b18:	10800044 	addi	r2,r2,1
   10b1c:	d0a83915 	stw	r2,-24348(gp)
   10b20:	e0bffc17 	ldw	r2,-16(fp)
   10b24:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10b28:	e0bffe17 	ldw	r2,-8(fp)
   10b2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   10b30:	0019fbc0 	call	19fbc <OSTaskIdleHook>
    }
   10b34:	003fef06 	br	10af4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010af4>

00010b38 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   10b38:	defff804 	addi	sp,sp,-32
   10b3c:	dfc00715 	stw	ra,28(sp)
   10b40:	df000615 	stw	fp,24(sp)
   10b44:	dc400515 	stw	r17,20(sp)
   10b48:	dc000415 	stw	r16,16(sp)
   10b4c:	df000604 	addi	fp,sp,24
   10b50:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10b54:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   10b58:	00000206 	br	10b64 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   10b5c:	01000044 	movi	r4,1
   10b60:	001627c0 	call	1627c <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   10b64:	d0a84a03 	ldbu	r2,-24280(gp)
   10b68:	10803fcc 	andi	r2,r2,255
   10b6c:	103ffb26 	beq	r2,zero,10b5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010b5c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   10b70:	d0e83e17 	ldw	r3,-24328(gp)
   10b74:	00947b34 	movhi	r2,20972
   10b78:	10a147c4 	addi	r2,r2,-31457
   10b7c:	1888383a 	mulxuu	r4,r3,r2
   10b80:	1885383a 	mul	r2,r3,r2
   10b84:	1021883a 	mov	r16,r2
   10b88:	2023883a 	mov	r17,r4
   10b8c:	8804d17a 	srli	r2,r17,5
   10b90:	d0a83e15 	stw	r2,-24328(gp)
    if (OSIdleCtrMax == 0L) {
   10b94:	d0a83e17 	ldw	r2,-24328(gp)
   10b98:	1000031e 	bne	r2,zero,10ba8 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
   10b9c:	d0284005 	stb	zero,-24320(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   10ba0:	01003fc4 	movi	r4,255
   10ba4:	0015f040 	call	15f04 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10ba8:	0005303a 	rdctl	r2,status
   10bac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10bb0:	e0fffb17 	ldw	r3,-20(fp)
   10bb4:	00bfff84 	movi	r2,-2
   10bb8:	1884703a 	and	r2,r3,r2
   10bbc:	1001703a 	wrctl	status,r2
  
  return context;
   10bc0:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   10bc4:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   10bc8:	d0a83917 	ldw	r2,-24348(gp)
   10bcc:	d0a84b15 	stw	r2,-24276(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   10bd0:	d0283915 	stw	zero,-24348(gp)
   10bd4:	e0bffa17 	ldw	r2,-24(fp)
   10bd8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10bdc:	e0bffc17 	ldw	r2,-16(fp)
   10be0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   10be4:	d0e84b17 	ldw	r3,-24276(gp)
   10be8:	d0a83e17 	ldw	r2,-24328(gp)
   10bec:	1885203a 	divu	r2,r3,r2
   10bf0:	1007883a 	mov	r3,r2
   10bf4:	00801904 	movi	r2,100
   10bf8:	10c5c83a 	sub	r2,r2,r3
   10bfc:	d0a84005 	stb	r2,-24320(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   10c00:	0019f3c0 	call	19f3c <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   10c04:	0010c140 	call	10c14 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   10c08:	0009883a 	mov	r4,zero
   10c0c:	001627c0 	call	1627c <OSTimeDly>
    }
   10c10:	003fe506 	br	10ba8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010ba8>

00010c14 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   10c14:	defffa04 	addi	sp,sp,-24
   10c18:	dfc00515 	stw	ra,20(sp)
   10c1c:	df000415 	stw	fp,16(sp)
   10c20:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   10c24:	e03ffc05 	stb	zero,-16(fp)
   10c28:	00002406 	br	10cbc <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   10c2c:	e0bffc03 	ldbu	r2,-16(fp)
   10c30:	e0fffe04 	addi	r3,fp,-8
   10c34:	180b883a 	mov	r5,r3
   10c38:	1009883a 	mov	r4,r2
   10c3c:	0015d440 	call	15d44 <OSTaskStkChk>
   10c40:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   10c44:	e0bffc43 	ldbu	r2,-15(fp)
   10c48:	1000191e 	bne	r2,zero,10cb0 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   10c4c:	e0fffc03 	ldbu	r3,-16(fp)
   10c50:	008000f4 	movhi	r2,3
   10c54:	10896904 	addi	r2,r2,9636
   10c58:	18c7883a 	add	r3,r3,r3
   10c5c:	18c7883a 	add	r3,r3,r3
   10c60:	10c5883a 	add	r2,r2,r3
   10c64:	10800017 	ldw	r2,0(r2)
   10c68:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   10c6c:	e0bffd17 	ldw	r2,-12(fp)
   10c70:	10000f26 	beq	r2,zero,10cb0 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   10c74:	e0bffd17 	ldw	r2,-12(fp)
   10c78:	10800060 	cmpeqi	r2,r2,1
   10c7c:	10000c1e 	bne	r2,zero,10cb0 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   10c80:	e0bffd17 	ldw	r2,-12(fp)
   10c84:	10c00217 	ldw	r3,8(r2)
   10c88:	e0bffd17 	ldw	r2,-12(fp)
   10c8c:	10800317 	ldw	r2,12(r2)
   10c90:	1085883a 	add	r2,r2,r2
   10c94:	1085883a 	add	r2,r2,r2
   10c98:	1887883a 	add	r3,r3,r2
   10c9c:	e0bffd17 	ldw	r2,-12(fp)
   10ca0:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   10ca4:	e0ffff17 	ldw	r3,-4(fp)
   10ca8:	e0bffd17 	ldw	r2,-12(fp)
   10cac:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   10cb0:	e0bffc03 	ldbu	r2,-16(fp)
   10cb4:	10800044 	addi	r2,r2,1
   10cb8:	e0bffc05 	stb	r2,-16(fp)
   10cbc:	e0bffc03 	ldbu	r2,-16(fp)
   10cc0:	10800570 	cmpltui	r2,r2,21
   10cc4:	103fd91e 	bne	r2,zero,10c2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010c2c>
#endif
                }
            }
        }
    }
}
   10cc8:	0001883a 	nop
   10ccc:	e037883a 	mov	sp,fp
   10cd0:	dfc00117 	ldw	ra,4(sp)
   10cd4:	df000017 	ldw	fp,0(sp)
   10cd8:	dec00204 	addi	sp,sp,8
   10cdc:	f800283a 	ret

00010ce0 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   10ce0:	defff204 	addi	sp,sp,-56
   10ce4:	dfc00d15 	stw	ra,52(sp)
   10ce8:	df000c15 	stw	fp,48(sp)
   10cec:	df000c04 	addi	fp,sp,48
   10cf0:	e17ffc15 	stw	r5,-16(fp)
   10cf4:	e1bffd15 	stw	r6,-12(fp)
   10cf8:	3807883a 	mov	r3,r7
   10cfc:	e0800417 	ldw	r2,16(fp)
   10d00:	e13ffb05 	stb	r4,-20(fp)
   10d04:	e0fffe0d 	sth	r3,-8(fp)
   10d08:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   10d0c:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d10:	0005303a 	rdctl	r2,status
   10d14:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d18:	e0fffa17 	ldw	r3,-24(fp)
   10d1c:	00bfff84 	movi	r2,-2
   10d20:	1884703a 	and	r2,r3,r2
   10d24:	1001703a 	wrctl	status,r2
  
  return context;
   10d28:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
   10d2c:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   10d30:	d0a83f17 	ldw	r2,-24324(gp)
   10d34:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
   10d38:	e0bff617 	ldw	r2,-40(fp)
   10d3c:	10009326 	beq	r2,zero,10f8c <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   10d40:	e0bff617 	ldw	r2,-40(fp)
   10d44:	10800517 	ldw	r2,20(r2)
   10d48:	d0a83f15 	stw	r2,-24324(gp)
   10d4c:	e0bff417 	ldw	r2,-48(fp)
   10d50:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10d54:	e0bff817 	ldw	r2,-32(fp)
   10d58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   10d5c:	e0bff617 	ldw	r2,-40(fp)
   10d60:	e0fffc17 	ldw	r3,-16(fp)
   10d64:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   10d68:	e0bff617 	ldw	r2,-40(fp)
   10d6c:	e0fffb03 	ldbu	r3,-20(fp)
   10d70:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   10d74:	e0bff617 	ldw	r2,-40(fp)
   10d78:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   10d7c:	e0bff617 	ldw	r2,-40(fp)
   10d80:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   10d84:	e0bff617 	ldw	r2,-40(fp)
   10d88:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   10d8c:	e0bff617 	ldw	r2,-40(fp)
   10d90:	e0c00317 	ldw	r3,12(fp)
   10d94:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   10d98:	e0bff617 	ldw	r2,-40(fp)
   10d9c:	e0c00217 	ldw	r3,8(fp)
   10da0:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   10da4:	e0bff617 	ldw	r2,-40(fp)
   10da8:	e0fffd17 	ldw	r3,-12(fp)
   10dac:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   10db0:	e0bff617 	ldw	r2,-40(fp)
   10db4:	e0ffff0b 	ldhu	r3,-4(fp)
   10db8:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   10dbc:	e0bff617 	ldw	r2,-40(fp)
   10dc0:	e0fffe0b 	ldhu	r3,-8(fp)
   10dc4:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   10dc8:	e0bff617 	ldw	r2,-40(fp)
   10dcc:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   10dd0:	e0bffb03 	ldbu	r2,-20(fp)
   10dd4:	1004d0fa 	srli	r2,r2,3
   10dd8:	1007883a 	mov	r3,r2
   10ddc:	e0bff617 	ldw	r2,-40(fp)
   10de0:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   10de4:	e0bffb03 	ldbu	r2,-20(fp)
   10de8:	108001cc 	andi	r2,r2,7
   10dec:	1007883a 	mov	r3,r2
   10df0:	e0bff617 	ldw	r2,-40(fp)
   10df4:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   10df8:	e0bff617 	ldw	r2,-40(fp)
   10dfc:	10800d03 	ldbu	r2,52(r2)
   10e00:	10803fcc 	andi	r2,r2,255
   10e04:	00c00044 	movi	r3,1
   10e08:	1884983a 	sll	r2,r3,r2
   10e0c:	1007883a 	mov	r3,r2
   10e10:	e0bff617 	ldw	r2,-40(fp)
   10e14:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   10e18:	e0bff617 	ldw	r2,-40(fp)
   10e1c:	10800cc3 	ldbu	r2,51(r2)
   10e20:	10803fcc 	andi	r2,r2,255
   10e24:	00c00044 	movi	r3,1
   10e28:	1884983a 	sll	r2,r3,r2
   10e2c:	1007883a 	mov	r3,r2
   10e30:	e0bff617 	ldw	r2,-40(fp)
   10e34:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   10e38:	e0bff617 	ldw	r2,-40(fp)
   10e3c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   10e40:	e0bff617 	ldw	r2,-40(fp)
   10e44:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   10e48:	e0bff617 	ldw	r2,-40(fp)
   10e4c:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   10e50:	e0bff617 	ldw	r2,-40(fp)
   10e54:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   10e58:	e0bff617 	ldw	r2,-40(fp)
   10e5c:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   10e60:	e0bff617 	ldw	r2,-40(fp)
   10e64:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   10e68:	e0bff617 	ldw	r2,-40(fp)
   10e6c:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   10e70:	e0bff617 	ldw	r2,-40(fp)
   10e74:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   10e78:	e0bff617 	ldw	r2,-40(fp)
   10e7c:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   10e80:	e0bff617 	ldw	r2,-40(fp)
   10e84:	00c00fc4 	movi	r3,63
   10e88:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   10e8c:	e0bff617 	ldw	r2,-40(fp)
   10e90:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   10e94:	e13ff617 	ldw	r4,-40(fp)
   10e98:	0019fdc0 	call	19fdc <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   10e9c:	e13ff617 	ldw	r4,-40(fp)
   10ea0:	0019ed40 	call	19ed4 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10ea4:	0005303a 	rdctl	r2,status
   10ea8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10eac:	e0fff517 	ldw	r3,-44(fp)
   10eb0:	00bfff84 	movi	r2,-2
   10eb4:	1884703a 	and	r2,r3,r2
   10eb8:	1001703a 	wrctl	status,r2
  
  return context;
   10ebc:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
   10ec0:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   10ec4:	e0fffb03 	ldbu	r3,-20(fp)
   10ec8:	008000f4 	movhi	r2,3
   10ecc:	10896904 	addi	r2,r2,9636
   10ed0:	18c7883a 	add	r3,r3,r3
   10ed4:	18c7883a 	add	r3,r3,r3
   10ed8:	10c5883a 	add	r2,r2,r3
   10edc:	e0fff617 	ldw	r3,-40(fp)
   10ee0:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   10ee4:	d0e83b17 	ldw	r3,-24340(gp)
   10ee8:	e0bff617 	ldw	r2,-40(fp)
   10eec:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   10ef0:	e0bff617 	ldw	r2,-40(fp)
   10ef4:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   10ef8:	d0a83b17 	ldw	r2,-24340(gp)
   10efc:	10000326 	beq	r2,zero,10f0c <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   10f00:	d0a83b17 	ldw	r2,-24340(gp)
   10f04:	e0fff617 	ldw	r3,-40(fp)
   10f08:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   10f0c:	e0bff617 	ldw	r2,-40(fp)
   10f10:	d0a83b15 	stw	r2,-24340(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   10f14:	e0bff617 	ldw	r2,-40(fp)
   10f18:	10c00d83 	ldbu	r3,54(r2)
   10f1c:	d0a84403 	ldbu	r2,-24304(gp)
   10f20:	1884b03a 	or	r2,r3,r2
   10f24:	d0a84405 	stb	r2,-24304(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   10f28:	e0bff617 	ldw	r2,-40(fp)
   10f2c:	10800d03 	ldbu	r2,52(r2)
   10f30:	10c03fcc 	andi	r3,r2,255
   10f34:	e0bff617 	ldw	r2,-40(fp)
   10f38:	10800d03 	ldbu	r2,52(r2)
   10f3c:	11003fcc 	andi	r4,r2,255
   10f40:	d0a84444 	addi	r2,gp,-24303
   10f44:	2085883a 	add	r2,r4,r2
   10f48:	11000003 	ldbu	r4,0(r2)
   10f4c:	e0bff617 	ldw	r2,-40(fp)
   10f50:	10800d43 	ldbu	r2,53(r2)
   10f54:	2084b03a 	or	r2,r4,r2
   10f58:	1009883a 	mov	r4,r2
   10f5c:	d0a84444 	addi	r2,gp,-24303
   10f60:	1885883a 	add	r2,r3,r2
   10f64:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   10f68:	d0a84043 	ldbu	r2,-24319(gp)
   10f6c:	10800044 	addi	r2,r2,1
   10f70:	d0a84045 	stb	r2,-24319(gp)
   10f74:	e0bff417 	ldw	r2,-48(fp)
   10f78:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10f7c:	e0bff717 	ldw	r2,-36(fp)
   10f80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   10f84:	0005883a 	mov	r2,zero
   10f88:	00000506 	br	10fa0 <OS_TCBInit+0x2c0>
   10f8c:	e0bff417 	ldw	r2,-48(fp)
   10f90:	e0bff915 	stw	r2,-28(fp)
   10f94:	e0bff917 	ldw	r2,-28(fp)
   10f98:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   10f9c:	00801084 	movi	r2,66
}
   10fa0:	e037883a 	mov	sp,fp
   10fa4:	dfc00117 	ldw	ra,4(sp)
   10fa8:	df000017 	ldw	fp,0(sp)
   10fac:	dec00204 	addi	sp,sp,8
   10fb0:	f800283a 	ret

00010fb4 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   10fb4:	defffe04 	addi	sp,sp,-8
   10fb8:	df000115 	stw	fp,4(sp)
   10fbc:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   10fc0:	d0a00f04 	addi	r2,gp,-32708
   10fc4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   10fc8:	d0a01004 	addi	r2,gp,-32704
   10fcc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   10fd0:	d0a01184 	addi	r2,gp,-32698
   10fd4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   10fd8:	d0a01204 	addi	r2,gp,-32696
   10fdc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   10fe0:	d0a01104 	addi	r2,gp,-32700
   10fe4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   10fe8:	d0a01284 	addi	r2,gp,-32694
   10fec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   10ff0:	d0a01304 	addi	r2,gp,-32692
   10ff4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   10ff8:	d0a01384 	addi	r2,gp,-32690
   10ffc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   11000:	d0a01404 	addi	r2,gp,-32688
   11004:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   11008:	d0a01484 	addi	r2,gp,-32686
   1100c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   11010:	d0a01504 	addi	r2,gp,-32684
   11014:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   11018:	d0a01584 	addi	r2,gp,-32682
   1101c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   11020:	d0a01604 	addi	r2,gp,-32680
   11024:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   11028:	d0a01684 	addi	r2,gp,-32678
   1102c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   11030:	d0a01704 	addi	r2,gp,-32676
   11034:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   11038:	d0a01784 	addi	r2,gp,-32674
   1103c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   11040:	d0a01804 	addi	r2,gp,-32672
   11044:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   11048:	d0a01884 	addi	r2,gp,-32670
   1104c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   11050:	d0a01904 	addi	r2,gp,-32668
   11054:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   11058:	d0a01984 	addi	r2,gp,-32666
   1105c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   11060:	d0a01a04 	addi	r2,gp,-32664
   11064:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   11068:	d0a01a84 	addi	r2,gp,-32662
   1106c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   11070:	d0a01b04 	addi	r2,gp,-32660
   11074:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   11078:	d0a01b84 	addi	r2,gp,-32658
   1107c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   11080:	d0a01c04 	addi	r2,gp,-32656
   11084:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   11088:	d0a01c84 	addi	r2,gp,-32654
   1108c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   11090:	d0a01d04 	addi	r2,gp,-32652
   11094:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   11098:	d0a01d84 	addi	r2,gp,-32650
   1109c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   110a0:	d0a01e04 	addi	r2,gp,-32648
   110a4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   110a8:	d0a01e84 	addi	r2,gp,-32646
   110ac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   110b0:	d0a01f04 	addi	r2,gp,-32644
   110b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   110b8:	d0a01f84 	addi	r2,gp,-32642
   110bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   110c0:	d0a02004 	addi	r2,gp,-32640
   110c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   110c8:	d0a02084 	addi	r2,gp,-32638
   110cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   110d0:	d0a02104 	addi	r2,gp,-32636
   110d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   110d8:	d0a02184 	addi	r2,gp,-32634
   110dc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   110e0:	d0a02204 	addi	r2,gp,-32632
   110e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   110e8:	d0a02284 	addi	r2,gp,-32630
   110ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   110f0:	d0a02304 	addi	r2,gp,-32628
   110f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   110f8:	d0a02384 	addi	r2,gp,-32626
   110fc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   11100:	d0a02404 	addi	r2,gp,-32624
   11104:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   11108:	d0a02484 	addi	r2,gp,-32622
   1110c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   11110:	d0a02504 	addi	r2,gp,-32620
   11114:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   11118:	d0a02584 	addi	r2,gp,-32618
   1111c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   11120:	d0a02604 	addi	r2,gp,-32616
   11124:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   11128:	d0a02b04 	addi	r2,gp,-32596
   1112c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   11130:	0001883a 	nop
   11134:	e037883a 	mov	sp,fp
   11138:	df000017 	ldw	fp,0(sp)
   1113c:	dec00104 	addi	sp,sp,4
   11140:	f800283a 	ret

00011144 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   11144:	defff204 	addi	sp,sp,-56
   11148:	df000d15 	stw	fp,52(sp)
   1114c:	df000d04 	addi	fp,sp,52
   11150:	e13ffc15 	stw	r4,-16(fp)
   11154:	2807883a 	mov	r3,r5
   11158:	3005883a 	mov	r2,r6
   1115c:	e1ffff15 	stw	r7,-4(fp)
   11160:	e0fffd0d 	sth	r3,-12(fp)
   11164:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   11168:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1116c:	e0bfff17 	ldw	r2,-4(fp)
   11170:	1000021e 	bne	r2,zero,1117c <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   11174:	0005883a 	mov	r2,zero
   11178:	0000b006 	br	1143c <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   1117c:	e0bffc17 	ldw	r2,-16(fp)
   11180:	1000051e 	bne	r2,zero,11198 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   11184:	e0bfff17 	ldw	r2,-4(fp)
   11188:	00c01b84 	movi	r3,110
   1118c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11190:	0005883a 	mov	r2,zero
   11194:	0000a906 	br	1143c <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   11198:	e0bffc17 	ldw	r2,-16(fp)
   1119c:	10800003 	ldbu	r2,0(r2)
   111a0:	10803fcc 	andi	r2,r2,255
   111a4:	10800160 	cmpeqi	r2,r2,5
   111a8:	1000051e 	bne	r2,zero,111c0 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   111ac:	e0bfff17 	ldw	r2,-4(fp)
   111b0:	00c00044 	movi	r3,1
   111b4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   111b8:	0005883a 	mov	r2,zero
   111bc:	00009f06 	br	1143c <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   111c0:	e0fffe03 	ldbu	r3,-8(fp)
   111c4:	00bfe004 	movi	r2,-128
   111c8:	1884703a 	and	r2,r3,r2
   111cc:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   111d0:	e0bff503 	ldbu	r2,-44(fp)
   111d4:	10000626 	beq	r2,zero,111f0 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   111d8:	e0bffe03 	ldbu	r2,-8(fp)
   111dc:	10801fcc 	andi	r2,r2,127
   111e0:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   111e4:	00800044 	movi	r2,1
   111e8:	e0bff385 	stb	r2,-50(fp)
   111ec:	00000106 	br	111f4 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   111f0:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   111f4:	e0bfff17 	ldw	r2,-4(fp)
   111f8:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   111fc:	0005303a 	rdctl	r2,status
   11200:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11204:	e0fffb17 	ldw	r3,-20(fp)
   11208:	00bfff84 	movi	r2,-2
   1120c:	1884703a 	and	r2,r3,r2
   11210:	1001703a 	wrctl	status,r2
  
  return context;
   11214:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   11218:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   1121c:	e0bffe03 	ldbu	r2,-8(fp)
   11220:	10c00060 	cmpeqi	r3,r2,1
   11224:	18005f1e 	bne	r3,zero,113a4 <OSFlagAccept+0x260>
   11228:	10c00088 	cmpgei	r3,r2,2
   1122c:	1800021e 	bne	r3,zero,11238 <OSFlagAccept+0xf4>
   11230:	10003f26 	beq	r2,zero,11330 <OSFlagAccept+0x1ec>
   11234:	00007706 	br	11414 <OSFlagAccept+0x2d0>
   11238:	10c000a0 	cmpeqi	r3,r2,2
   1123c:	1800031e 	bne	r3,zero,1124c <OSFlagAccept+0x108>
   11240:	108000e0 	cmpeqi	r2,r2,3
   11244:	10001e1e 	bne	r2,zero,112c0 <OSFlagAccept+0x17c>
   11248:	00007206 	br	11414 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   1124c:	e0bffc17 	ldw	r2,-16(fp)
   11250:	10c0020b 	ldhu	r3,8(r2)
   11254:	e0bffd0b 	ldhu	r2,-12(fp)
   11258:	1884703a 	and	r2,r3,r2
   1125c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   11260:	e0fff30b 	ldhu	r3,-52(fp)
   11264:	e0bffd0b 	ldhu	r2,-12(fp)
   11268:	18800d1e 	bne	r3,r2,112a0 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1126c:	e0bff383 	ldbu	r2,-50(fp)
   11270:	10800058 	cmpnei	r2,r2,1
   11274:	10000d1e 	bne	r2,zero,112ac <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   11278:	e0bffc17 	ldw	r2,-16(fp)
   1127c:	1080020b 	ldhu	r2,8(r2)
   11280:	1007883a 	mov	r3,r2
   11284:	e0bff30b 	ldhu	r2,-52(fp)
   11288:	0084303a 	nor	r2,zero,r2
   1128c:	1884703a 	and	r2,r3,r2
   11290:	1007883a 	mov	r3,r2
   11294:	e0bffc17 	ldw	r2,-16(fp)
   11298:	10c0020d 	sth	r3,8(r2)
   1129c:	00000306 	br	112ac <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   112a0:	e0bfff17 	ldw	r2,-4(fp)
   112a4:	00c01c04 	movi	r3,112
   112a8:	10c00005 	stb	r3,0(r2)
   112ac:	e0bff417 	ldw	r2,-48(fp)
   112b0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   112b4:	e0bff617 	ldw	r2,-40(fp)
   112b8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   112bc:	00005e06 	br	11438 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   112c0:	e0bffc17 	ldw	r2,-16(fp)
   112c4:	10c0020b 	ldhu	r3,8(r2)
   112c8:	e0bffd0b 	ldhu	r2,-12(fp)
   112cc:	1884703a 	and	r2,r3,r2
   112d0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   112d4:	e0bff30b 	ldhu	r2,-52(fp)
   112d8:	10000d26 	beq	r2,zero,11310 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   112dc:	e0bff383 	ldbu	r2,-50(fp)
   112e0:	10800058 	cmpnei	r2,r2,1
   112e4:	10000d1e 	bne	r2,zero,1131c <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   112e8:	e0bffc17 	ldw	r2,-16(fp)
   112ec:	1080020b 	ldhu	r2,8(r2)
   112f0:	1007883a 	mov	r3,r2
   112f4:	e0bff30b 	ldhu	r2,-52(fp)
   112f8:	0084303a 	nor	r2,zero,r2
   112fc:	1884703a 	and	r2,r3,r2
   11300:	1007883a 	mov	r3,r2
   11304:	e0bffc17 	ldw	r2,-16(fp)
   11308:	10c0020d 	sth	r3,8(r2)
   1130c:	00000306 	br	1131c <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   11310:	e0bfff17 	ldw	r2,-4(fp)
   11314:	00c01c04 	movi	r3,112
   11318:	10c00005 	stb	r3,0(r2)
   1131c:	e0bff417 	ldw	r2,-48(fp)
   11320:	e0bff715 	stw	r2,-36(fp)
   11324:	e0bff717 	ldw	r2,-36(fp)
   11328:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1132c:	00004206 	br	11438 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   11330:	e0bffc17 	ldw	r2,-16(fp)
   11334:	1080020b 	ldhu	r2,8(r2)
   11338:	0084303a 	nor	r2,zero,r2
   1133c:	1007883a 	mov	r3,r2
   11340:	e0bffd0b 	ldhu	r2,-12(fp)
   11344:	1884703a 	and	r2,r3,r2
   11348:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1134c:	e0fff30b 	ldhu	r3,-52(fp)
   11350:	e0bffd0b 	ldhu	r2,-12(fp)
   11354:	18800b1e 	bne	r3,r2,11384 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   11358:	e0bff383 	ldbu	r2,-50(fp)
   1135c:	10800058 	cmpnei	r2,r2,1
   11360:	10000b1e 	bne	r2,zero,11390 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   11364:	e0bffc17 	ldw	r2,-16(fp)
   11368:	10c0020b 	ldhu	r3,8(r2)
   1136c:	e0bff30b 	ldhu	r2,-52(fp)
   11370:	1884b03a 	or	r2,r3,r2
   11374:	1007883a 	mov	r3,r2
   11378:	e0bffc17 	ldw	r2,-16(fp)
   1137c:	10c0020d 	sth	r3,8(r2)
   11380:	00000306 	br	11390 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   11384:	e0bfff17 	ldw	r2,-4(fp)
   11388:	00c01c04 	movi	r3,112
   1138c:	10c00005 	stb	r3,0(r2)
   11390:	e0bff417 	ldw	r2,-48(fp)
   11394:	e0bff815 	stw	r2,-32(fp)
   11398:	e0bff817 	ldw	r2,-32(fp)
   1139c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   113a0:	00002506 	br	11438 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   113a4:	e0bffc17 	ldw	r2,-16(fp)
   113a8:	1080020b 	ldhu	r2,8(r2)
   113ac:	0084303a 	nor	r2,zero,r2
   113b0:	1007883a 	mov	r3,r2
   113b4:	e0bffd0b 	ldhu	r2,-12(fp)
   113b8:	1884703a 	and	r2,r3,r2
   113bc:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   113c0:	e0bff30b 	ldhu	r2,-52(fp)
   113c4:	10000b26 	beq	r2,zero,113f4 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   113c8:	e0bff383 	ldbu	r2,-50(fp)
   113cc:	10800058 	cmpnei	r2,r2,1
   113d0:	10000b1e 	bne	r2,zero,11400 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   113d4:	e0bffc17 	ldw	r2,-16(fp)
   113d8:	10c0020b 	ldhu	r3,8(r2)
   113dc:	e0bff30b 	ldhu	r2,-52(fp)
   113e0:	1884b03a 	or	r2,r3,r2
   113e4:	1007883a 	mov	r3,r2
   113e8:	e0bffc17 	ldw	r2,-16(fp)
   113ec:	10c0020d 	sth	r3,8(r2)
   113f0:	00000306 	br	11400 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   113f4:	e0bfff17 	ldw	r2,-4(fp)
   113f8:	00c01c04 	movi	r3,112
   113fc:	10c00005 	stb	r3,0(r2)
   11400:	e0bff417 	ldw	r2,-48(fp)
   11404:	e0bff915 	stw	r2,-28(fp)
   11408:	e0bff917 	ldw	r2,-28(fp)
   1140c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   11410:	00000906 	br	11438 <OSFlagAccept+0x2f4>
   11414:	e0bff417 	ldw	r2,-48(fp)
   11418:	e0bffa15 	stw	r2,-24(fp)
   1141c:	e0bffa17 	ldw	r2,-24(fp)
   11420:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   11424:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   11428:	e0bfff17 	ldw	r2,-4(fp)
   1142c:	00c01bc4 	movi	r3,111
   11430:	10c00005 	stb	r3,0(r2)
             break;
   11434:	0001883a 	nop
    }
    return (flags_rdy);
   11438:	e0bff30b 	ldhu	r2,-52(fp)
}
   1143c:	e037883a 	mov	sp,fp
   11440:	df000017 	ldw	fp,0(sp)
   11444:	dec00104 	addi	sp,sp,4
   11448:	f800283a 	ret

0001144c <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   1144c:	defff804 	addi	sp,sp,-32
   11450:	df000715 	stw	fp,28(sp)
   11454:	df000704 	addi	fp,sp,28
   11458:	2005883a 	mov	r2,r4
   1145c:	e17fff15 	stw	r5,-4(fp)
   11460:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   11464:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   11468:	e0bfff17 	ldw	r2,-4(fp)
   1146c:	1000021e 	bne	r2,zero,11478 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   11470:	0005883a 	mov	r2,zero
   11474:	00003306 	br	11544 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   11478:	d0a84603 	ldbu	r2,-24296(gp)
   1147c:	10803fcc 	andi	r2,r2,255
   11480:	10000526 	beq	r2,zero,11498 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   11484:	e0bfff17 	ldw	r2,-4(fp)
   11488:	00c00404 	movi	r3,16
   1148c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   11490:	0005883a 	mov	r2,zero
   11494:	00002b06 	br	11544 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11498:	0005303a 	rdctl	r2,status
   1149c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   114a0:	e0fffd17 	ldw	r3,-12(fp)
   114a4:	00bfff84 	movi	r2,-2
   114a8:	1884703a 	and	r2,r3,r2
   114ac:	1001703a 	wrctl	status,r2
  
  return context;
   114b0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   114b4:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   114b8:	d0a84917 	ldw	r2,-24284(gp)
   114bc:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   114c0:	e0bffb17 	ldw	r2,-20(fp)
   114c4:	10001726 	beq	r2,zero,11524 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   114c8:	d0a84917 	ldw	r2,-24284(gp)
   114cc:	10800117 	ldw	r2,4(r2)
   114d0:	d0a84915 	stw	r2,-24284(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   114d4:	e0bffb17 	ldw	r2,-20(fp)
   114d8:	00c00144 	movi	r3,5
   114dc:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   114e0:	e0bffb17 	ldw	r2,-20(fp)
   114e4:	e0fffe0b 	ldhu	r3,-8(fp)
   114e8:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   114ec:	e0bffb17 	ldw	r2,-20(fp)
   114f0:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   114f4:	e0bffb17 	ldw	r2,-20(fp)
   114f8:	00c00fc4 	movi	r3,63
   114fc:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   11500:	e0bffb17 	ldw	r2,-20(fp)
   11504:	100002c5 	stb	zero,11(r2)
   11508:	e0bff917 	ldw	r2,-28(fp)
   1150c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11510:	e0bffa17 	ldw	r2,-24(fp)
   11514:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   11518:	e0bfff17 	ldw	r2,-4(fp)
   1151c:	10000005 	stb	zero,0(r2)
   11520:	00000706 	br	11540 <OSFlagCreate+0xf4>
   11524:	e0bff917 	ldw	r2,-28(fp)
   11528:	e0bffc15 	stw	r2,-16(fp)
   1152c:	e0bffc17 	ldw	r2,-16(fp)
   11530:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   11534:	e0bfff17 	ldw	r2,-4(fp)
   11538:	00c01c84 	movi	r3,114
   1153c:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   11540:	e0bffb17 	ldw	r2,-20(fp)
}
   11544:	e037883a 	mov	sp,fp
   11548:	df000017 	ldw	fp,0(sp)
   1154c:	dec00104 	addi	sp,sp,4
   11550:	f800283a 	ret

00011554 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   11554:	defff204 	addi	sp,sp,-56
   11558:	dfc00d15 	stw	ra,52(sp)
   1155c:	df000c15 	stw	fp,48(sp)
   11560:	df000c04 	addi	fp,sp,48
   11564:	e13ffd15 	stw	r4,-12(fp)
   11568:	2805883a 	mov	r2,r5
   1156c:	e1bfff15 	stw	r6,-4(fp)
   11570:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   11574:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   11578:	e0bfff17 	ldw	r2,-4(fp)
   1157c:	1000021e 	bne	r2,zero,11588 <OSFlagDel+0x34>
        return (pgrp);
   11580:	e0bffd17 	ldw	r2,-12(fp)
   11584:	00008006 	br	11788 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   11588:	e0bffd17 	ldw	r2,-12(fp)
   1158c:	1000051e 	bne	r2,zero,115a4 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   11590:	e0bfff17 	ldw	r2,-4(fp)
   11594:	00c01b84 	movi	r3,110
   11598:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   1159c:	e0bffd17 	ldw	r2,-12(fp)
   115a0:	00007906 	br	11788 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   115a4:	d0a84603 	ldbu	r2,-24296(gp)
   115a8:	10803fcc 	andi	r2,r2,255
   115ac:	10000526 	beq	r2,zero,115c4 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   115b0:	e0bfff17 	ldw	r2,-4(fp)
   115b4:	00c003c4 	movi	r3,15
   115b8:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   115bc:	e0bffd17 	ldw	r2,-12(fp)
   115c0:	00007106 	br	11788 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   115c4:	e0bffd17 	ldw	r2,-12(fp)
   115c8:	10800003 	ldbu	r2,0(r2)
   115cc:	10803fcc 	andi	r2,r2,255
   115d0:	10800160 	cmpeqi	r2,r2,5
   115d4:	1000051e 	bne	r2,zero,115ec <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
   115d8:	e0bfff17 	ldw	r2,-4(fp)
   115dc:	00c00044 	movi	r3,1
   115e0:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   115e4:	e0bffd17 	ldw	r2,-12(fp)
   115e8:	00006706 	br	11788 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   115ec:	0005303a 	rdctl	r2,status
   115f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   115f4:	e0fffc17 	ldw	r3,-16(fp)
   115f8:	00bfff84 	movi	r2,-2
   115fc:	1884703a 	and	r2,r3,r2
   11600:	1001703a 	wrctl	status,r2
  
  return context;
   11604:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   11608:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   1160c:	e0bffd17 	ldw	r2,-12(fp)
   11610:	10800117 	ldw	r2,4(r2)
   11614:	10000326 	beq	r2,zero,11624 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   11618:	00800044 	movi	r2,1
   1161c:	e0bff405 	stb	r2,-48(fp)
   11620:	00000106 	br	11628 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   11624:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   11628:	e0bffe03 	ldbu	r2,-8(fp)
   1162c:	10000326 	beq	r2,zero,1163c <OSFlagDel+0xe8>
   11630:	10800060 	cmpeqi	r2,r2,1
   11634:	1000231e 	bne	r2,zero,116c4 <OSFlagDel+0x170>
   11638:	00004806 	br	1175c <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   1163c:	e0bff403 	ldbu	r2,-48(fp)
   11640:	1000161e 	bne	r2,zero,1169c <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   11644:	e0bffd17 	ldw	r2,-12(fp)
   11648:	00c00fc4 	movi	r3,63
   1164c:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   11650:	e0bffd17 	ldw	r2,-12(fp)
   11654:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   11658:	e0bffd17 	ldw	r2,-12(fp)
   1165c:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   11660:	d0e84917 	ldw	r3,-24284(gp)
   11664:	e0bffd17 	ldw	r2,-12(fp)
   11668:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   1166c:	e0bffd17 	ldw	r2,-12(fp)
   11670:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   11674:	e0bffd17 	ldw	r2,-12(fp)
   11678:	d0a84915 	stw	r2,-24284(gp)
   1167c:	e0bff717 	ldw	r2,-36(fp)
   11680:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11684:	e0bff817 	ldw	r2,-32(fp)
   11688:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   1168c:	e0bfff17 	ldw	r2,-4(fp)
   11690:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   11694:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   11698:	00003a06 	br	11784 <OSFlagDel+0x230>
   1169c:	e0bff717 	ldw	r2,-36(fp)
   116a0:	e0bff915 	stw	r2,-28(fp)
   116a4:	e0bff917 	ldw	r2,-28(fp)
   116a8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   116ac:	e0bfff17 	ldw	r2,-4(fp)
   116b0:	00c01244 	movi	r3,73
   116b4:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   116b8:	e0bffd17 	ldw	r2,-12(fp)
   116bc:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   116c0:	00003006 	br	11784 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   116c4:	e0bffd17 	ldw	r2,-12(fp)
   116c8:	10800117 	ldw	r2,4(r2)
   116cc:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   116d0:	00000606 	br	116ec <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   116d4:	000b883a 	mov	r5,zero
   116d8:	e13ff517 	ldw	r4,-44(fp)
   116dc:	00126c00 	call	126c0 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   116e0:	e0bff517 	ldw	r2,-44(fp)
   116e4:	10800017 	ldw	r2,0(r2)
   116e8:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   116ec:	e0bff517 	ldw	r2,-44(fp)
   116f0:	103ff81e 	bne	r2,zero,116d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70116d4>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   116f4:	e0bffd17 	ldw	r2,-12(fp)
   116f8:	00c00fc4 	movi	r3,63
   116fc:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   11700:	e0bffd17 	ldw	r2,-12(fp)
   11704:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   11708:	e0bffd17 	ldw	r2,-12(fp)
   1170c:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   11710:	d0e84917 	ldw	r3,-24284(gp)
   11714:	e0bffd17 	ldw	r2,-12(fp)
   11718:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   1171c:	e0bffd17 	ldw	r2,-12(fp)
   11720:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   11724:	e0bffd17 	ldw	r2,-12(fp)
   11728:	d0a84915 	stw	r2,-24284(gp)
   1172c:	e0bff717 	ldw	r2,-36(fp)
   11730:	e0bffa15 	stw	r2,-24(fp)
   11734:	e0bffa17 	ldw	r2,-24(fp)
   11738:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1173c:	e0bff403 	ldbu	r2,-48(fp)
   11740:	10800058 	cmpnei	r2,r2,1
   11744:	1000011e 	bne	r2,zero,1174c <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   11748:	00108d00 	call	108d0 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   1174c:	e0bfff17 	ldw	r2,-4(fp)
   11750:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   11754:	e03ff615 	stw	zero,-40(fp)
             break;
   11758:	00000a06 	br	11784 <OSFlagDel+0x230>
   1175c:	e0bff717 	ldw	r2,-36(fp)
   11760:	e0bffb15 	stw	r2,-20(fp)
   11764:	e0bffb17 	ldw	r2,-20(fp)
   11768:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   1176c:	e0bfff17 	ldw	r2,-4(fp)
   11770:	00c001c4 	movi	r3,7
   11774:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   11778:	e0bffd17 	ldw	r2,-12(fp)
   1177c:	e0bff615 	stw	r2,-40(fp)
             break;
   11780:	0001883a 	nop
    }
    return (pgrp_return);
   11784:	e0bff617 	ldw	r2,-40(fp)
}
   11788:	e037883a 	mov	sp,fp
   1178c:	dfc00117 	ldw	ra,4(sp)
   11790:	df000017 	ldw	fp,0(sp)
   11794:	dec00204 	addi	sp,sp,8
   11798:	f800283a 	ret

0001179c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   1179c:	defff604 	addi	sp,sp,-40
   117a0:	dfc00915 	stw	ra,36(sp)
   117a4:	df000815 	stw	fp,32(sp)
   117a8:	df000804 	addi	fp,sp,32
   117ac:	e13ffd15 	stw	r4,-12(fp)
   117b0:	e17ffe15 	stw	r5,-8(fp)
   117b4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   117b8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   117bc:	e0bfff17 	ldw	r2,-4(fp)
   117c0:	1000021e 	bne	r2,zero,117cc <OSFlagNameGet+0x30>
        return (0);
   117c4:	0005883a 	mov	r2,zero
   117c8:	00003906 	br	118b0 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   117cc:	e0bffd17 	ldw	r2,-12(fp)
   117d0:	1000051e 	bne	r2,zero,117e8 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   117d4:	e0bfff17 	ldw	r2,-4(fp)
   117d8:	00c01b84 	movi	r3,110
   117dc:	10c00005 	stb	r3,0(r2)
        return (0);
   117e0:	0005883a 	mov	r2,zero
   117e4:	00003206 	br	118b0 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   117e8:	e0bffe17 	ldw	r2,-8(fp)
   117ec:	1000051e 	bne	r2,zero,11804 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   117f0:	e0bfff17 	ldw	r2,-4(fp)
   117f4:	00c00304 	movi	r3,12
   117f8:	10c00005 	stb	r3,0(r2)
        return (0);
   117fc:	0005883a 	mov	r2,zero
   11800:	00002b06 	br	118b0 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   11804:	d0a84603 	ldbu	r2,-24296(gp)
   11808:	10803fcc 	andi	r2,r2,255
   1180c:	10000526 	beq	r2,zero,11824 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   11810:	e0bfff17 	ldw	r2,-4(fp)
   11814:	00c00444 	movi	r3,17
   11818:	10c00005 	stb	r3,0(r2)
        return (0);
   1181c:	0005883a 	mov	r2,zero
   11820:	00002306 	br	118b0 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11824:	0005303a 	rdctl	r2,status
   11828:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1182c:	e0fffc17 	ldw	r3,-16(fp)
   11830:	00bfff84 	movi	r2,-2
   11834:	1884703a 	and	r2,r3,r2
   11838:	1001703a 	wrctl	status,r2
  
  return context;
   1183c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   11840:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   11844:	e0bffd17 	ldw	r2,-12(fp)
   11848:	10800003 	ldbu	r2,0(r2)
   1184c:	10803fcc 	andi	r2,r2,255
   11850:	10800160 	cmpeqi	r2,r2,5
   11854:	1000091e 	bne	r2,zero,1187c <OSFlagNameGet+0xe0>
   11858:	e0bff817 	ldw	r2,-32(fp)
   1185c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11860:	e0bff917 	ldw	r2,-28(fp)
   11864:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   11868:	e0bfff17 	ldw	r2,-4(fp)
   1186c:	00c00044 	movi	r3,1
   11870:	10c00005 	stb	r3,0(r2)
        return (0);
   11874:	0005883a 	mov	r2,zero
   11878:	00000d06 	br	118b0 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   1187c:	e0bffd17 	ldw	r2,-12(fp)
   11880:	10800284 	addi	r2,r2,10
   11884:	100b883a 	mov	r5,r2
   11888:	e13ffe17 	ldw	r4,-8(fp)
   1188c:	0010a140 	call	10a14 <OS_StrCopy>
   11890:	e0bffb05 	stb	r2,-20(fp)
   11894:	e0bff817 	ldw	r2,-32(fp)
   11898:	e0bffa15 	stw	r2,-24(fp)
   1189c:	e0bffa17 	ldw	r2,-24(fp)
   118a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   118a4:	e0bfff17 	ldw	r2,-4(fp)
   118a8:	10000005 	stb	zero,0(r2)
    return (len);
   118ac:	e0bffb03 	ldbu	r2,-20(fp)
}
   118b0:	e037883a 	mov	sp,fp
   118b4:	dfc00117 	ldw	ra,4(sp)
   118b8:	df000017 	ldw	fp,0(sp)
   118bc:	dec00204 	addi	sp,sp,8
   118c0:	f800283a 	ret

000118c4 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   118c4:	defff504 	addi	sp,sp,-44
   118c8:	dfc00a15 	stw	ra,40(sp)
   118cc:	df000915 	stw	fp,36(sp)
   118d0:	df000904 	addi	fp,sp,36
   118d4:	e13ffd15 	stw	r4,-12(fp)
   118d8:	e17ffe15 	stw	r5,-8(fp)
   118dc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   118e0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   118e4:	e0bfff17 	ldw	r2,-4(fp)
   118e8:	10004326 	beq	r2,zero,119f8 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   118ec:	e0bffd17 	ldw	r2,-12(fp)
   118f0:	1000041e 	bne	r2,zero,11904 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   118f4:	e0bfff17 	ldw	r2,-4(fp)
   118f8:	00c01b84 	movi	r3,110
   118fc:	10c00005 	stb	r3,0(r2)
        return;
   11900:	00003e06 	br	119fc <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   11904:	e0bffe17 	ldw	r2,-8(fp)
   11908:	1000041e 	bne	r2,zero,1191c <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   1190c:	e0bfff17 	ldw	r2,-4(fp)
   11910:	00c00304 	movi	r3,12
   11914:	10c00005 	stb	r3,0(r2)
        return;
   11918:	00003806 	br	119fc <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1191c:	d0a84603 	ldbu	r2,-24296(gp)
   11920:	10803fcc 	andi	r2,r2,255
   11924:	10000426 	beq	r2,zero,11938 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   11928:	e0bfff17 	ldw	r2,-4(fp)
   1192c:	00c00484 	movi	r3,18
   11930:	10c00005 	stb	r3,0(r2)
        return;
   11934:	00003106 	br	119fc <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11938:	0005303a 	rdctl	r2,status
   1193c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11940:	e0fffc17 	ldw	r3,-16(fp)
   11944:	00bfff84 	movi	r2,-2
   11948:	1884703a 	and	r2,r3,r2
   1194c:	1001703a 	wrctl	status,r2
  
  return context;
   11950:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   11954:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   11958:	e0bffd17 	ldw	r2,-12(fp)
   1195c:	10800003 	ldbu	r2,0(r2)
   11960:	10803fcc 	andi	r2,r2,255
   11964:	10800160 	cmpeqi	r2,r2,5
   11968:	1000081e 	bne	r2,zero,1198c <OSFlagNameSet+0xc8>
   1196c:	e0bff717 	ldw	r2,-36(fp)
   11970:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11974:	e0bff817 	ldw	r2,-32(fp)
   11978:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   1197c:	e0bfff17 	ldw	r2,-4(fp)
   11980:	00c00044 	movi	r3,1
   11984:	10c00005 	stb	r3,0(r2)
        return;
   11988:	00001c06 	br	119fc <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   1198c:	e13ffe17 	ldw	r4,-8(fp)
   11990:	0010a880 	call	10a88 <OS_StrLen>
   11994:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   11998:	e0bffa03 	ldbu	r2,-24(fp)
   1199c:	10800830 	cmpltui	r2,r2,32
   119a0:	1000081e 	bne	r2,zero,119c4 <OSFlagNameSet+0x100>
   119a4:	e0bff717 	ldw	r2,-36(fp)
   119a8:	e0bff915 	stw	r2,-28(fp)
   119ac:	e0bff917 	ldw	r2,-28(fp)
   119b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   119b4:	e0bfff17 	ldw	r2,-4(fp)
   119b8:	00c01cc4 	movi	r3,115
   119bc:	10c00005 	stb	r3,0(r2)
        return;
   119c0:	00000e06 	br	119fc <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   119c4:	e0bffd17 	ldw	r2,-12(fp)
   119c8:	10800284 	addi	r2,r2,10
   119cc:	e17ffe17 	ldw	r5,-8(fp)
   119d0:	1009883a 	mov	r4,r2
   119d4:	0010a140 	call	10a14 <OS_StrCopy>
   119d8:	e0bff717 	ldw	r2,-36(fp)
   119dc:	e0bffb15 	stw	r2,-20(fp)
   119e0:	e0bffb17 	ldw	r2,-20(fp)
   119e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   119e8:	e0bfff17 	ldw	r2,-4(fp)
   119ec:	10000005 	stb	zero,0(r2)
    return;
   119f0:	0001883a 	nop
   119f4:	00000106 	br	119fc <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   119f8:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
   119fc:	e037883a 	mov	sp,fp
   11a00:	dfc00117 	ldw	ra,4(sp)
   11a04:	df000017 	ldw	fp,0(sp)
   11a08:	dec00204 	addi	sp,sp,8
   11a0c:	f800283a 	ret

00011a10 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   11a10:	deffe104 	addi	sp,sp,-124
   11a14:	dfc01e15 	stw	ra,120(sp)
   11a18:	df001d15 	stw	fp,116(sp)
   11a1c:	df001d04 	addi	fp,sp,116
   11a20:	e13ffc15 	stw	r4,-16(fp)
   11a24:	2809883a 	mov	r4,r5
   11a28:	3007883a 	mov	r3,r6
   11a2c:	3805883a 	mov	r2,r7
   11a30:	e13ffd0d 	sth	r4,-12(fp)
   11a34:	e0fffe05 	stb	r3,-8(fp)
   11a38:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   11a3c:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   11a40:	e0800217 	ldw	r2,8(fp)
   11a44:	1000021e 	bne	r2,zero,11a50 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   11a48:	0005883a 	mov	r2,zero
   11a4c:	00015906 	br	11fb4 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   11a50:	e0bffc17 	ldw	r2,-16(fp)
   11a54:	1000051e 	bne	r2,zero,11a6c <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   11a58:	e0800217 	ldw	r2,8(fp)
   11a5c:	00c01b84 	movi	r3,110
   11a60:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11a64:	0005883a 	mov	r2,zero
   11a68:	00015206 	br	11fb4 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   11a6c:	d0a84603 	ldbu	r2,-24296(gp)
   11a70:	10803fcc 	andi	r2,r2,255
   11a74:	10000526 	beq	r2,zero,11a8c <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   11a78:	e0800217 	ldw	r2,8(fp)
   11a7c:	00c00084 	movi	r3,2
   11a80:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11a84:	0005883a 	mov	r2,zero
   11a88:	00014a06 	br	11fb4 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   11a8c:	d0a83803 	ldbu	r2,-24352(gp)
   11a90:	10803fcc 	andi	r2,r2,255
   11a94:	10000526 	beq	r2,zero,11aac <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   11a98:	e0800217 	ldw	r2,8(fp)
   11a9c:	00c00344 	movi	r3,13
   11aa0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11aa4:	0005883a 	mov	r2,zero
   11aa8:	00014206 	br	11fb4 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   11aac:	e0bffc17 	ldw	r2,-16(fp)
   11ab0:	10800003 	ldbu	r2,0(r2)
   11ab4:	10803fcc 	andi	r2,r2,255
   11ab8:	10800160 	cmpeqi	r2,r2,5
   11abc:	1000051e 	bne	r2,zero,11ad4 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
   11ac0:	e0800217 	ldw	r2,8(fp)
   11ac4:	00c00044 	movi	r3,1
   11ac8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11acc:	0005883a 	mov	r2,zero
   11ad0:	00013806 	br	11fb4 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   11ad4:	e0fffe03 	ldbu	r3,-8(fp)
   11ad8:	00bfe004 	movi	r2,-128
   11adc:	1884703a 	and	r2,r3,r2
   11ae0:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   11ae4:	e0bfe603 	ldbu	r2,-104(fp)
   11ae8:	10000626 	beq	r2,zero,11b04 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   11aec:	e0bffe03 	ldbu	r2,-8(fp)
   11af0:	10801fcc 	andi	r2,r2,127
   11af4:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   11af8:	00800044 	movi	r2,1
   11afc:	e0bfe405 	stb	r2,-112(fp)
   11b00:	00000106 	br	11b08 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
   11b04:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11b08:	0005303a 	rdctl	r2,status
   11b0c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11b10:	e0fff617 	ldw	r3,-40(fp)
   11b14:	00bfff84 	movi	r2,-2
   11b18:	1884703a 	and	r2,r3,r2
   11b1c:	1001703a 	wrctl	status,r2
  
  return context;
   11b20:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   11b24:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
   11b28:	e0bffe03 	ldbu	r2,-8(fp)
   11b2c:	10c00060 	cmpeqi	r3,r2,1
   11b30:	1800921e 	bne	r3,zero,11d7c <OSFlagPend+0x36c>
   11b34:	10c00088 	cmpgei	r3,r2,2
   11b38:	1800021e 	bne	r3,zero,11b44 <OSFlagPend+0x134>
   11b3c:	10006126 	beq	r2,zero,11cc4 <OSFlagPend+0x2b4>
   11b40:	0000bb06 	br	11e30 <OSFlagPend+0x420>
   11b44:	10c000a0 	cmpeqi	r3,r2,2
   11b48:	1800031e 	bne	r3,zero,11b58 <OSFlagPend+0x148>
   11b4c:	108000e0 	cmpeqi	r2,r2,3
   11b50:	10002f1e 	bne	r2,zero,11c10 <OSFlagPend+0x200>
   11b54:	0000b606 	br	11e30 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   11b58:	e0bffc17 	ldw	r2,-16(fp)
   11b5c:	10c0020b 	ldhu	r3,8(r2)
   11b60:	e0bffd0b 	ldhu	r2,-12(fp)
   11b64:	1884703a 	and	r2,r3,r2
   11b68:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   11b6c:	e0ffe80b 	ldhu	r3,-96(fp)
   11b70:	e0bffd0b 	ldhu	r2,-12(fp)
   11b74:	1880171e 	bne	r3,r2,11bd4 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   11b78:	e0bfe403 	ldbu	r2,-112(fp)
   11b7c:	10800058 	cmpnei	r2,r2,1
   11b80:	1000091e 	bne	r2,zero,11ba8 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   11b84:	e0bffc17 	ldw	r2,-16(fp)
   11b88:	1080020b 	ldhu	r2,8(r2)
   11b8c:	1007883a 	mov	r3,r2
   11b90:	e0bfe80b 	ldhu	r2,-96(fp)
   11b94:	0084303a 	nor	r2,zero,r2
   11b98:	1884703a 	and	r2,r3,r2
   11b9c:	1007883a 	mov	r3,r2
   11ba0:	e0bffc17 	ldw	r2,-16(fp)
   11ba4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   11ba8:	d0a84717 	ldw	r2,-24292(gp)
   11bac:	e0ffe80b 	ldhu	r3,-96(fp)
   11bb0:	10c00b0d 	sth	r3,44(r2)
   11bb4:	e0bfe517 	ldw	r2,-108(fp)
   11bb8:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11bbc:	e0bfe717 	ldw	r2,-100(fp)
   11bc0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   11bc4:	e0800217 	ldw	r2,8(fp)
   11bc8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   11bcc:	e0bfe80b 	ldhu	r2,-96(fp)
   11bd0:	0000f806 	br	11fb4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   11bd4:	e13ffd0b 	ldhu	r4,-12(fp)
   11bd8:	e17ffe03 	ldbu	r5,-8(fp)
   11bdc:	e0bfff0b 	ldhu	r2,-4(fp)
   11be0:	e0fff704 	addi	r3,fp,-36
   11be4:	d8800015 	stw	r2,0(sp)
   11be8:	280f883a 	mov	r7,r5
   11bec:	200d883a 	mov	r6,r4
   11bf0:	180b883a 	mov	r5,r3
   11bf4:	e13ffc17 	ldw	r4,-16(fp)
   11bf8:	00124800 	call	12480 <OS_FlagBlock>
   11bfc:	e0bfe517 	ldw	r2,-108(fp)
   11c00:	e0bfe915 	stw	r2,-92(fp)
   11c04:	e0bfe917 	ldw	r2,-92(fp)
   11c08:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   11c0c:	00009206 	br	11e58 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   11c10:	e0bffc17 	ldw	r2,-16(fp)
   11c14:	10c0020b 	ldhu	r3,8(r2)
   11c18:	e0bffd0b 	ldhu	r2,-12(fp)
   11c1c:	1884703a 	and	r2,r3,r2
   11c20:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   11c24:	e0bfe80b 	ldhu	r2,-96(fp)
   11c28:	10001726 	beq	r2,zero,11c88 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   11c2c:	e0bfe403 	ldbu	r2,-112(fp)
   11c30:	10800058 	cmpnei	r2,r2,1
   11c34:	1000091e 	bne	r2,zero,11c5c <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   11c38:	e0bffc17 	ldw	r2,-16(fp)
   11c3c:	1080020b 	ldhu	r2,8(r2)
   11c40:	1007883a 	mov	r3,r2
   11c44:	e0bfe80b 	ldhu	r2,-96(fp)
   11c48:	0084303a 	nor	r2,zero,r2
   11c4c:	1884703a 	and	r2,r3,r2
   11c50:	1007883a 	mov	r3,r2
   11c54:	e0bffc17 	ldw	r2,-16(fp)
   11c58:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   11c5c:	d0a84717 	ldw	r2,-24292(gp)
   11c60:	e0ffe80b 	ldhu	r3,-96(fp)
   11c64:	10c00b0d 	sth	r3,44(r2)
   11c68:	e0bfe517 	ldw	r2,-108(fp)
   11c6c:	e0bfea15 	stw	r2,-88(fp)
   11c70:	e0bfea17 	ldw	r2,-88(fp)
   11c74:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   11c78:	e0800217 	ldw	r2,8(fp)
   11c7c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   11c80:	e0bfe80b 	ldhu	r2,-96(fp)
   11c84:	0000cb06 	br	11fb4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   11c88:	e13ffd0b 	ldhu	r4,-12(fp)
   11c8c:	e17ffe03 	ldbu	r5,-8(fp)
   11c90:	e0bfff0b 	ldhu	r2,-4(fp)
   11c94:	e0fff704 	addi	r3,fp,-36
   11c98:	d8800015 	stw	r2,0(sp)
   11c9c:	280f883a 	mov	r7,r5
   11ca0:	200d883a 	mov	r6,r4
   11ca4:	180b883a 	mov	r5,r3
   11ca8:	e13ffc17 	ldw	r4,-16(fp)
   11cac:	00124800 	call	12480 <OS_FlagBlock>
   11cb0:	e0bfe517 	ldw	r2,-108(fp)
   11cb4:	e0bfeb15 	stw	r2,-84(fp)
   11cb8:	e0bfeb17 	ldw	r2,-84(fp)
   11cbc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   11cc0:	00006506 	br	11e58 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   11cc4:	e0bffc17 	ldw	r2,-16(fp)
   11cc8:	1080020b 	ldhu	r2,8(r2)
   11ccc:	0084303a 	nor	r2,zero,r2
   11cd0:	1007883a 	mov	r3,r2
   11cd4:	e0bffd0b 	ldhu	r2,-12(fp)
   11cd8:	1884703a 	and	r2,r3,r2
   11cdc:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   11ce0:	e0ffe80b 	ldhu	r3,-96(fp)
   11ce4:	e0bffd0b 	ldhu	r2,-12(fp)
   11ce8:	1880151e 	bne	r3,r2,11d40 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   11cec:	e0bfe403 	ldbu	r2,-112(fp)
   11cf0:	10800058 	cmpnei	r2,r2,1
   11cf4:	1000071e 	bne	r2,zero,11d14 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   11cf8:	e0bffc17 	ldw	r2,-16(fp)
   11cfc:	10c0020b 	ldhu	r3,8(r2)
   11d00:	e0bfe80b 	ldhu	r2,-96(fp)
   11d04:	1884b03a 	or	r2,r3,r2
   11d08:	1007883a 	mov	r3,r2
   11d0c:	e0bffc17 	ldw	r2,-16(fp)
   11d10:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   11d14:	d0a84717 	ldw	r2,-24292(gp)
   11d18:	e0ffe80b 	ldhu	r3,-96(fp)
   11d1c:	10c00b0d 	sth	r3,44(r2)
   11d20:	e0bfe517 	ldw	r2,-108(fp)
   11d24:	e0bfec15 	stw	r2,-80(fp)
   11d28:	e0bfec17 	ldw	r2,-80(fp)
   11d2c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   11d30:	e0800217 	ldw	r2,8(fp)
   11d34:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   11d38:	e0bfe80b 	ldhu	r2,-96(fp)
   11d3c:	00009d06 	br	11fb4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   11d40:	e13ffd0b 	ldhu	r4,-12(fp)
   11d44:	e17ffe03 	ldbu	r5,-8(fp)
   11d48:	e0bfff0b 	ldhu	r2,-4(fp)
   11d4c:	e0fff704 	addi	r3,fp,-36
   11d50:	d8800015 	stw	r2,0(sp)
   11d54:	280f883a 	mov	r7,r5
   11d58:	200d883a 	mov	r6,r4
   11d5c:	180b883a 	mov	r5,r3
   11d60:	e13ffc17 	ldw	r4,-16(fp)
   11d64:	00124800 	call	12480 <OS_FlagBlock>
   11d68:	e0bfe517 	ldw	r2,-108(fp)
   11d6c:	e0bfed15 	stw	r2,-76(fp)
   11d70:	e0bfed17 	ldw	r2,-76(fp)
   11d74:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   11d78:	00003706 	br	11e58 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   11d7c:	e0bffc17 	ldw	r2,-16(fp)
   11d80:	1080020b 	ldhu	r2,8(r2)
   11d84:	0084303a 	nor	r2,zero,r2
   11d88:	1007883a 	mov	r3,r2
   11d8c:	e0bffd0b 	ldhu	r2,-12(fp)
   11d90:	1884703a 	and	r2,r3,r2
   11d94:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   11d98:	e0bfe80b 	ldhu	r2,-96(fp)
   11d9c:	10001526 	beq	r2,zero,11df4 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   11da0:	e0bfe403 	ldbu	r2,-112(fp)
   11da4:	10800058 	cmpnei	r2,r2,1
   11da8:	1000071e 	bne	r2,zero,11dc8 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   11dac:	e0bffc17 	ldw	r2,-16(fp)
   11db0:	10c0020b 	ldhu	r3,8(r2)
   11db4:	e0bfe80b 	ldhu	r2,-96(fp)
   11db8:	1884b03a 	or	r2,r3,r2
   11dbc:	1007883a 	mov	r3,r2
   11dc0:	e0bffc17 	ldw	r2,-16(fp)
   11dc4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   11dc8:	d0a84717 	ldw	r2,-24292(gp)
   11dcc:	e0ffe80b 	ldhu	r3,-96(fp)
   11dd0:	10c00b0d 	sth	r3,44(r2)
   11dd4:	e0bfe517 	ldw	r2,-108(fp)
   11dd8:	e0bfee15 	stw	r2,-72(fp)
   11ddc:	e0bfee17 	ldw	r2,-72(fp)
   11de0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   11de4:	e0800217 	ldw	r2,8(fp)
   11de8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   11dec:	e0bfe80b 	ldhu	r2,-96(fp)
   11df0:	00007006 	br	11fb4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   11df4:	e13ffd0b 	ldhu	r4,-12(fp)
   11df8:	e17ffe03 	ldbu	r5,-8(fp)
   11dfc:	e0bfff0b 	ldhu	r2,-4(fp)
   11e00:	e0fff704 	addi	r3,fp,-36
   11e04:	d8800015 	stw	r2,0(sp)
   11e08:	280f883a 	mov	r7,r5
   11e0c:	200d883a 	mov	r6,r4
   11e10:	180b883a 	mov	r5,r3
   11e14:	e13ffc17 	ldw	r4,-16(fp)
   11e18:	00124800 	call	12480 <OS_FlagBlock>
   11e1c:	e0bfe517 	ldw	r2,-108(fp)
   11e20:	e0bfef15 	stw	r2,-68(fp)
   11e24:	e0bfef17 	ldw	r2,-68(fp)
   11e28:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   11e2c:	00000a06 	br	11e58 <OSFlagPend+0x448>
   11e30:	e0bfe517 	ldw	r2,-108(fp)
   11e34:	e0bff015 	stw	r2,-64(fp)
   11e38:	e0bff017 	ldw	r2,-64(fp)
   11e3c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   11e40:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   11e44:	e0800217 	ldw	r2,8(fp)
   11e48:	00c01bc4 	movi	r3,111
   11e4c:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   11e50:	e0bfe80b 	ldhu	r2,-96(fp)
   11e54:	00005706 	br	11fb4 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   11e58:	00108d00 	call	108d0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11e5c:	0005303a 	rdctl	r2,status
   11e60:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11e64:	e0fff117 	ldw	r3,-60(fp)
   11e68:	00bfff84 	movi	r2,-2
   11e6c:	1884703a 	and	r2,r3,r2
   11e70:	1001703a 	wrctl	status,r2
  
  return context;
   11e74:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
   11e78:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   11e7c:	d0a84717 	ldw	r2,-24292(gp)
   11e80:	10800c43 	ldbu	r2,49(r2)
   11e84:	10803fcc 	andi	r2,r2,255
   11e88:	10001c26 	beq	r2,zero,11efc <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   11e8c:	d0a84717 	ldw	r2,-24292(gp)
   11e90:	10800c43 	ldbu	r2,49(r2)
   11e94:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   11e98:	d0a84717 	ldw	r2,-24292(gp)
   11e9c:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   11ea0:	e0bff704 	addi	r2,fp,-36
   11ea4:	1009883a 	mov	r4,r2
   11ea8:	00127b40 	call	127b4 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   11eac:	d0a84717 	ldw	r2,-24292(gp)
   11eb0:	10000c05 	stb	zero,48(r2)
   11eb4:	e0bfe517 	ldw	r2,-108(fp)
   11eb8:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11ebc:	e0bff217 	ldw	r2,-56(fp)
   11ec0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   11ec4:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
   11ec8:	e0bff303 	ldbu	r2,-52(fp)
   11ecc:	108000a0 	cmpeqi	r2,r2,2
   11ed0:	10000426 	beq	r2,zero,11ee4 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   11ed4:	e0800217 	ldw	r2,8(fp)
   11ed8:	00c00384 	movi	r3,14
   11edc:	10c00005 	stb	r3,0(r2)
                 break;
   11ee0:	00000406 	br	11ef4 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   11ee4:	e0800217 	ldw	r2,8(fp)
   11ee8:	00c00284 	movi	r3,10
   11eec:	10c00005 	stb	r3,0(r2)
                 break;
   11ef0:	0001883a 	nop
        }
        return (flags_rdy);
   11ef4:	e0bfe80b 	ldhu	r2,-96(fp)
   11ef8:	00002e06 	br	11fb4 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   11efc:	d0a84717 	ldw	r2,-24292(gp)
   11f00:	10800b0b 	ldhu	r2,44(r2)
   11f04:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   11f08:	e0bfe403 	ldbu	r2,-112(fp)
   11f0c:	10800058 	cmpnei	r2,r2,1
   11f10:	1000211e 	bne	r2,zero,11f98 <OSFlagPend+0x588>
        switch (wait_type) {
   11f14:	e0bffe03 	ldbu	r2,-8(fp)
   11f18:	10001616 	blt	r2,zero,11f74 <OSFlagPend+0x564>
   11f1c:	10c00090 	cmplti	r3,r2,2
   11f20:	18000c1e 	bne	r3,zero,11f54 <OSFlagPend+0x544>
   11f24:	10800108 	cmpgei	r2,r2,4
   11f28:	1000121e 	bne	r2,zero,11f74 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   11f2c:	e0bffc17 	ldw	r2,-16(fp)
   11f30:	1080020b 	ldhu	r2,8(r2)
   11f34:	1007883a 	mov	r3,r2
   11f38:	e0bfe80b 	ldhu	r2,-96(fp)
   11f3c:	0084303a 	nor	r2,zero,r2
   11f40:	1884703a 	and	r2,r3,r2
   11f44:	1007883a 	mov	r3,r2
   11f48:	e0bffc17 	ldw	r2,-16(fp)
   11f4c:	10c0020d 	sth	r3,8(r2)
                 break;
   11f50:	00001106 	br	11f98 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   11f54:	e0bffc17 	ldw	r2,-16(fp)
   11f58:	10c0020b 	ldhu	r3,8(r2)
   11f5c:	e0bfe80b 	ldhu	r2,-96(fp)
   11f60:	1884b03a 	or	r2,r3,r2
   11f64:	1007883a 	mov	r3,r2
   11f68:	e0bffc17 	ldw	r2,-16(fp)
   11f6c:	10c0020d 	sth	r3,8(r2)
                 break;
   11f70:	00000906 	br	11f98 <OSFlagPend+0x588>
   11f74:	e0bfe517 	ldw	r2,-108(fp)
   11f78:	e0bff415 	stw	r2,-48(fp)
   11f7c:	e0bff417 	ldw	r2,-48(fp)
   11f80:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   11f84:	e0800217 	ldw	r2,8(fp)
   11f88:	00c01bc4 	movi	r3,111
   11f8c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   11f90:	0005883a 	mov	r2,zero
   11f94:	00000706 	br	11fb4 <OSFlagPend+0x5a4>
   11f98:	e0bfe517 	ldw	r2,-108(fp)
   11f9c:	e0bff515 	stw	r2,-44(fp)
   11fa0:	e0bff517 	ldw	r2,-44(fp)
   11fa4:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   11fa8:	e0800217 	ldw	r2,8(fp)
   11fac:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   11fb0:	e0bfe80b 	ldhu	r2,-96(fp)
}
   11fb4:	e037883a 	mov	sp,fp
   11fb8:	dfc00117 	ldw	ra,4(sp)
   11fbc:	df000017 	ldw	fp,0(sp)
   11fc0:	dec00204 	addi	sp,sp,8
   11fc4:	f800283a 	ret

00011fc8 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   11fc8:	defffb04 	addi	sp,sp,-20
   11fcc:	df000415 	stw	fp,16(sp)
   11fd0:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   11fd4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11fd8:	0005303a 	rdctl	r2,status
   11fdc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11fe0:	e0fffe17 	ldw	r3,-8(fp)
   11fe4:	00bfff84 	movi	r2,-2
   11fe8:	1884703a 	and	r2,r3,r2
   11fec:	1001703a 	wrctl	status,r2
  
  return context;
   11ff0:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   11ff4:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   11ff8:	d0a84717 	ldw	r2,-24292(gp)
   11ffc:	10800b0b 	ldhu	r2,44(r2)
   12000:	e0bffd0d 	sth	r2,-12(fp)
   12004:	e0bffc17 	ldw	r2,-16(fp)
   12008:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1200c:	e0bfff17 	ldw	r2,-4(fp)
   12010:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   12014:	e0bffd0b 	ldhu	r2,-12(fp)
}
   12018:	e037883a 	mov	sp,fp
   1201c:	df000017 	ldw	fp,0(sp)
   12020:	dec00104 	addi	sp,sp,4
   12024:	f800283a 	ret

00012028 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   12028:	deffef04 	addi	sp,sp,-68
   1202c:	dfc01015 	stw	ra,64(sp)
   12030:	df000f15 	stw	fp,60(sp)
   12034:	df000f04 	addi	fp,sp,60
   12038:	e13ffc15 	stw	r4,-16(fp)
   1203c:	2807883a 	mov	r3,r5
   12040:	3005883a 	mov	r2,r6
   12044:	e1ffff15 	stw	r7,-4(fp)
   12048:	e0fffd0d 	sth	r3,-12(fp)
   1204c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   12050:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   12054:	e0bfff17 	ldw	r2,-4(fp)
   12058:	1000021e 	bne	r2,zero,12064 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   1205c:	0005883a 	mov	r2,zero
   12060:	0000d106 	br	123a8 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   12064:	e0bffc17 	ldw	r2,-16(fp)
   12068:	1000051e 	bne	r2,zero,12080 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1206c:	e0bfff17 	ldw	r2,-4(fp)
   12070:	00c01b84 	movi	r3,110
   12074:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12078:	0005883a 	mov	r2,zero
   1207c:	0000ca06 	br	123a8 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   12080:	e0bffc17 	ldw	r2,-16(fp)
   12084:	10800003 	ldbu	r2,0(r2)
   12088:	10803fcc 	andi	r2,r2,255
   1208c:	10800160 	cmpeqi	r2,r2,5
   12090:	1000051e 	bne	r2,zero,120a8 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   12094:	e0bfff17 	ldw	r2,-4(fp)
   12098:	00c00044 	movi	r3,1
   1209c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   120a0:	0005883a 	mov	r2,zero
   120a4:	0000c006 	br	123a8 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   120a8:	0005303a 	rdctl	r2,status
   120ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   120b0:	e0fffb17 	ldw	r3,-20(fp)
   120b4:	00bfff84 	movi	r2,-2
   120b8:	1884703a 	and	r2,r3,r2
   120bc:	1001703a 	wrctl	status,r2
  
  return context;
   120c0:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   120c4:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   120c8:	e0bffe03 	ldbu	r2,-8(fp)
   120cc:	10000326 	beq	r2,zero,120dc <OSFlagPost+0xb4>
   120d0:	10800060 	cmpeqi	r2,r2,1
   120d4:	10000b1e 	bne	r2,zero,12104 <OSFlagPost+0xdc>
   120d8:	00001206 	br	12124 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   120dc:	e0bffc17 	ldw	r2,-16(fp)
   120e0:	1080020b 	ldhu	r2,8(r2)
   120e4:	1007883a 	mov	r3,r2
   120e8:	e0bffd0b 	ldhu	r2,-12(fp)
   120ec:	0084303a 	nor	r2,zero,r2
   120f0:	1884703a 	and	r2,r3,r2
   120f4:	1007883a 	mov	r3,r2
   120f8:	e0bffc17 	ldw	r2,-16(fp)
   120fc:	10c0020d 	sth	r3,8(r2)
             break;
   12100:	00001106 	br	12148 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   12104:	e0bffc17 	ldw	r2,-16(fp)
   12108:	10c0020b 	ldhu	r3,8(r2)
   1210c:	e0bffd0b 	ldhu	r2,-12(fp)
   12110:	1884b03a 	or	r2,r3,r2
   12114:	1007883a 	mov	r3,r2
   12118:	e0bffc17 	ldw	r2,-16(fp)
   1211c:	10c0020d 	sth	r3,8(r2)
             break;
   12120:	00000906 	br	12148 <OSFlagPost+0x120>
   12124:	e0bff317 	ldw	r2,-52(fp)
   12128:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1212c:	e0bff417 	ldw	r2,-48(fp)
   12130:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   12134:	e0bfff17 	ldw	r2,-4(fp)
   12138:	00c01c44 	movi	r3,113
   1213c:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   12140:	0005883a 	mov	r2,zero
   12144:	00009806 	br	123a8 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   12148:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   1214c:	e0bffc17 	ldw	r2,-16(fp)
   12150:	10800117 	ldw	r2,4(r2)
   12154:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   12158:	00007706 	br	12338 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
   1215c:	e0bff117 	ldw	r2,-60(fp)
   12160:	10800483 	ldbu	r2,18(r2)
   12164:	10803fcc 	andi	r2,r2,255
   12168:	10c00060 	cmpeqi	r3,r2,1
   1216c:	18004a1e 	bne	r3,zero,12298 <OSFlagPost+0x270>
   12170:	10c00088 	cmpgei	r3,r2,2
   12174:	1800021e 	bne	r3,zero,12180 <OSFlagPost+0x158>
   12178:	10002f26 	beq	r2,zero,12238 <OSFlagPost+0x210>
   1217c:	00005b06 	br	122ec <OSFlagPost+0x2c4>
   12180:	10c000a0 	cmpeqi	r3,r2,2
   12184:	1800031e 	bne	r3,zero,12194 <OSFlagPost+0x16c>
   12188:	108000e0 	cmpeqi	r2,r2,3
   1218c:	1000171e 	bne	r2,zero,121ec <OSFlagPost+0x1c4>
   12190:	00005606 	br	122ec <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   12194:	e0bffc17 	ldw	r2,-16(fp)
   12198:	10c0020b 	ldhu	r3,8(r2)
   1219c:	e0bff117 	ldw	r2,-60(fp)
   121a0:	1080040b 	ldhu	r2,16(r2)
   121a4:	1884703a 	and	r2,r3,r2
   121a8:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   121ac:	e0bff117 	ldw	r2,-60(fp)
   121b0:	1080040b 	ldhu	r2,16(r2)
   121b4:	10ffffcc 	andi	r3,r2,65535
   121b8:	e0bff60b 	ldhu	r2,-40(fp)
   121bc:	1880541e 	bne	r3,r2,12310 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   121c0:	e0bff60b 	ldhu	r2,-40(fp)
   121c4:	100b883a 	mov	r5,r2
   121c8:	e13ff117 	ldw	r4,-60(fp)
   121cc:	00126c00 	call	126c0 <OS_FlagTaskRdy>
   121d0:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   121d4:	e0bff683 	ldbu	r2,-38(fp)
   121d8:	10800058 	cmpnei	r2,r2,1
   121dc:	10004c1e 	bne	r2,zero,12310 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   121e0:	00800044 	movi	r2,1
   121e4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   121e8:	00004906 	br	12310 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   121ec:	e0bffc17 	ldw	r2,-16(fp)
   121f0:	10c0020b 	ldhu	r3,8(r2)
   121f4:	e0bff117 	ldw	r2,-60(fp)
   121f8:	1080040b 	ldhu	r2,16(r2)
   121fc:	1884703a 	and	r2,r3,r2
   12200:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   12204:	e0bff60b 	ldhu	r2,-40(fp)
   12208:	10004326 	beq	r2,zero,12318 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1220c:	e0bff60b 	ldhu	r2,-40(fp)
   12210:	100b883a 	mov	r5,r2
   12214:	e13ff117 	ldw	r4,-60(fp)
   12218:	00126c00 	call	126c0 <OS_FlagTaskRdy>
   1221c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   12220:	e0bff683 	ldbu	r2,-38(fp)
   12224:	10800058 	cmpnei	r2,r2,1
   12228:	10003b1e 	bne	r2,zero,12318 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1222c:	00800044 	movi	r2,1
   12230:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   12234:	00003806 	br	12318 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   12238:	e0bffc17 	ldw	r2,-16(fp)
   1223c:	1080020b 	ldhu	r2,8(r2)
   12240:	0084303a 	nor	r2,zero,r2
   12244:	1007883a 	mov	r3,r2
   12248:	e0bff117 	ldw	r2,-60(fp)
   1224c:	1080040b 	ldhu	r2,16(r2)
   12250:	1884703a 	and	r2,r3,r2
   12254:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   12258:	e0bff117 	ldw	r2,-60(fp)
   1225c:	1080040b 	ldhu	r2,16(r2)
   12260:	10ffffcc 	andi	r3,r2,65535
   12264:	e0bff60b 	ldhu	r2,-40(fp)
   12268:	18802d1e 	bne	r3,r2,12320 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1226c:	e0bff60b 	ldhu	r2,-40(fp)
   12270:	100b883a 	mov	r5,r2
   12274:	e13ff117 	ldw	r4,-60(fp)
   12278:	00126c00 	call	126c0 <OS_FlagTaskRdy>
   1227c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   12280:	e0bff683 	ldbu	r2,-38(fp)
   12284:	10800058 	cmpnei	r2,r2,1
   12288:	1000251e 	bne	r2,zero,12320 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1228c:	00800044 	movi	r2,1
   12290:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   12294:	00002206 	br	12320 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   12298:	e0bffc17 	ldw	r2,-16(fp)
   1229c:	1080020b 	ldhu	r2,8(r2)
   122a0:	0084303a 	nor	r2,zero,r2
   122a4:	1007883a 	mov	r3,r2
   122a8:	e0bff117 	ldw	r2,-60(fp)
   122ac:	1080040b 	ldhu	r2,16(r2)
   122b0:	1884703a 	and	r2,r3,r2
   122b4:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   122b8:	e0bff60b 	ldhu	r2,-40(fp)
   122bc:	10001a26 	beq	r2,zero,12328 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   122c0:	e0bff60b 	ldhu	r2,-40(fp)
   122c4:	100b883a 	mov	r5,r2
   122c8:	e13ff117 	ldw	r4,-60(fp)
   122cc:	00126c00 	call	126c0 <OS_FlagTaskRdy>
   122d0:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   122d4:	e0bff683 	ldbu	r2,-38(fp)
   122d8:	10800058 	cmpnei	r2,r2,1
   122dc:	1000121e 	bne	r2,zero,12328 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   122e0:	00800044 	movi	r2,1
   122e4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   122e8:	00000f06 	br	12328 <OSFlagPost+0x300>
   122ec:	e0bff317 	ldw	r2,-52(fp)
   122f0:	e0bff515 	stw	r2,-44(fp)
   122f4:	e0bff517 	ldw	r2,-44(fp)
   122f8:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   122fc:	e0bfff17 	ldw	r2,-4(fp)
   12300:	00c01bc4 	movi	r3,111
   12304:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   12308:	0005883a 	mov	r2,zero
   1230c:	00002606 	br	123a8 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   12310:	0001883a 	nop
   12314:	00000506 	br	1232c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   12318:	0001883a 	nop
   1231c:	00000306 	br	1232c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   12320:	0001883a 	nop
   12324:	00000106 	br	1232c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   12328:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   1232c:	e0bff117 	ldw	r2,-60(fp)
   12330:	10800017 	ldw	r2,0(r2)
   12334:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   12338:	e0bff117 	ldw	r2,-60(fp)
   1233c:	103f871e 	bne	r2,zero,1215c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701215c>
   12340:	e0bff317 	ldw	r2,-52(fp)
   12344:	e0bff715 	stw	r2,-36(fp)
   12348:	e0bff717 	ldw	r2,-36(fp)
   1234c:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   12350:	e0bff203 	ldbu	r2,-56(fp)
   12354:	10800058 	cmpnei	r2,r2,1
   12358:	1000011e 	bne	r2,zero,12360 <OSFlagPost+0x338>
        OS_Sched();
   1235c:	00108d00 	call	108d0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12360:	0005303a 	rdctl	r2,status
   12364:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12368:	e0fffa17 	ldw	r3,-24(fp)
   1236c:	00bfff84 	movi	r2,-2
   12370:	1884703a 	and	r2,r3,r2
   12374:	1001703a 	wrctl	status,r2
  
  return context;
   12378:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1237c:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   12380:	e0bffc17 	ldw	r2,-16(fp)
   12384:	1080020b 	ldhu	r2,8(r2)
   12388:	e0bff90d 	sth	r2,-28(fp)
   1238c:	e0bff317 	ldw	r2,-52(fp)
   12390:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12394:	e0bff817 	ldw	r2,-32(fp)
   12398:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   1239c:	e0bfff17 	ldw	r2,-4(fp)
   123a0:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   123a4:	e0bff90b 	ldhu	r2,-28(fp)
}
   123a8:	e037883a 	mov	sp,fp
   123ac:	dfc00117 	ldw	ra,4(sp)
   123b0:	df000017 	ldw	fp,0(sp)
   123b4:	dec00204 	addi	sp,sp,8
   123b8:	f800283a 	ret

000123bc <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   123bc:	defff904 	addi	sp,sp,-28
   123c0:	df000615 	stw	fp,24(sp)
   123c4:	df000604 	addi	fp,sp,24
   123c8:	e13ffe15 	stw	r4,-8(fp)
   123cc:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   123d0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   123d4:	e0bfff17 	ldw	r2,-4(fp)
   123d8:	1000021e 	bne	r2,zero,123e4 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   123dc:	0005883a 	mov	r2,zero
   123e0:	00002306 	br	12470 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   123e4:	e0bffe17 	ldw	r2,-8(fp)
   123e8:	1000051e 	bne	r2,zero,12400 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   123ec:	e0bfff17 	ldw	r2,-4(fp)
   123f0:	00c01b84 	movi	r3,110
   123f4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   123f8:	0005883a 	mov	r2,zero
   123fc:	00001c06 	br	12470 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   12400:	e0bffe17 	ldw	r2,-8(fp)
   12404:	10800003 	ldbu	r2,0(r2)
   12408:	10803fcc 	andi	r2,r2,255
   1240c:	10800160 	cmpeqi	r2,r2,5
   12410:	1000051e 	bne	r2,zero,12428 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   12414:	e0bfff17 	ldw	r2,-4(fp)
   12418:	00c00044 	movi	r3,1
   1241c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12420:	0005883a 	mov	r2,zero
   12424:	00001206 	br	12470 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12428:	0005303a 	rdctl	r2,status
   1242c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12430:	e0fffc17 	ldw	r3,-16(fp)
   12434:	00bfff84 	movi	r2,-2
   12438:	1884703a 	and	r2,r3,r2
   1243c:	1001703a 	wrctl	status,r2
  
  return context;
   12440:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12444:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   12448:	e0bffe17 	ldw	r2,-8(fp)
   1244c:	1080020b 	ldhu	r2,8(r2)
   12450:	e0bffb0d 	sth	r2,-20(fp)
   12454:	e0bffa17 	ldw	r2,-24(fp)
   12458:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1245c:	e0bffd17 	ldw	r2,-12(fp)
   12460:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   12464:	e0bfff17 	ldw	r2,-4(fp)
   12468:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   1246c:	e0bffb0b 	ldhu	r2,-20(fp)
}
   12470:	e037883a 	mov	sp,fp
   12474:	df000017 	ldw	fp,0(sp)
   12478:	dec00104 	addi	sp,sp,4
   1247c:	f800283a 	ret

00012480 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   12480:	defff804 	addi	sp,sp,-32
   12484:	df000715 	stw	fp,28(sp)
   12488:	df000704 	addi	fp,sp,28
   1248c:	e13ffb15 	stw	r4,-20(fp)
   12490:	e17ffc15 	stw	r5,-16(fp)
   12494:	3009883a 	mov	r4,r6
   12498:	3807883a 	mov	r3,r7
   1249c:	e0800117 	ldw	r2,4(fp)
   124a0:	e13ffd0d 	sth	r4,-12(fp)
   124a4:	e0fffe05 	stb	r3,-8(fp)
   124a8:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   124ac:	d0a84717 	ldw	r2,-24292(gp)
   124b0:	d0e84717 	ldw	r3,-24292(gp)
   124b4:	18c00c03 	ldbu	r3,48(r3)
   124b8:	18c00814 	ori	r3,r3,32
   124bc:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   124c0:	d0a84717 	ldw	r2,-24292(gp)
   124c4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   124c8:	d0a84717 	ldw	r2,-24292(gp)
   124cc:	e0ffff0b 	ldhu	r3,-4(fp)
   124d0:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   124d4:	d0a84717 	ldw	r2,-24292(gp)
   124d8:	e0fffc17 	ldw	r3,-16(fp)
   124dc:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   124e0:	e0bffc17 	ldw	r2,-16(fp)
   124e4:	e0fffd0b 	ldhu	r3,-12(fp)
   124e8:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   124ec:	e0bffc17 	ldw	r2,-16(fp)
   124f0:	e0fffe03 	ldbu	r3,-8(fp)
   124f4:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   124f8:	d0e84717 	ldw	r3,-24292(gp)
   124fc:	e0bffc17 	ldw	r2,-16(fp)
   12500:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   12504:	e0bffb17 	ldw	r2,-20(fp)
   12508:	10c00117 	ldw	r3,4(r2)
   1250c:	e0bffc17 	ldw	r2,-16(fp)
   12510:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   12514:	e0bffc17 	ldw	r2,-16(fp)
   12518:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   1251c:	e0bffc17 	ldw	r2,-16(fp)
   12520:	e0fffb17 	ldw	r3,-20(fp)
   12524:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   12528:	e0bffb17 	ldw	r2,-20(fp)
   1252c:	10800117 	ldw	r2,4(r2)
   12530:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   12534:	e0bff917 	ldw	r2,-28(fp)
   12538:	10000326 	beq	r2,zero,12548 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   1253c:	e0bff917 	ldw	r2,-28(fp)
   12540:	e0fffc17 	ldw	r3,-16(fp)
   12544:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   12548:	e0bffb17 	ldw	r2,-20(fp)
   1254c:	e0fffc17 	ldw	r3,-16(fp)
   12550:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   12554:	d0a84717 	ldw	r2,-24292(gp)
   12558:	10800d03 	ldbu	r2,52(r2)
   1255c:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   12560:	e0fffa03 	ldbu	r3,-24(fp)
   12564:	e13ffa03 	ldbu	r4,-24(fp)
   12568:	d0a84444 	addi	r2,gp,-24303
   1256c:	2085883a 	add	r2,r4,r2
   12570:	10800003 	ldbu	r2,0(r2)
   12574:	1009883a 	mov	r4,r2
   12578:	d0a84717 	ldw	r2,-24292(gp)
   1257c:	10800d43 	ldbu	r2,53(r2)
   12580:	0084303a 	nor	r2,zero,r2
   12584:	2084703a 	and	r2,r4,r2
   12588:	1009883a 	mov	r4,r2
   1258c:	d0a84444 	addi	r2,gp,-24303
   12590:	1885883a 	add	r2,r3,r2
   12594:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   12598:	e0fffa03 	ldbu	r3,-24(fp)
   1259c:	d0a84444 	addi	r2,gp,-24303
   125a0:	1885883a 	add	r2,r3,r2
   125a4:	10800003 	ldbu	r2,0(r2)
   125a8:	10803fcc 	andi	r2,r2,255
   125ac:	1000071e 	bne	r2,zero,125cc <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   125b0:	d0a84717 	ldw	r2,-24292(gp)
   125b4:	10800d83 	ldbu	r2,54(r2)
   125b8:	0084303a 	nor	r2,zero,r2
   125bc:	1007883a 	mov	r3,r2
   125c0:	d0a84403 	ldbu	r2,-24304(gp)
   125c4:	1884703a 	and	r2,r3,r2
   125c8:	d0a84405 	stb	r2,-24304(gp)
    }
}
   125cc:	0001883a 	nop
   125d0:	e037883a 	mov	sp,fp
   125d4:	df000017 	ldw	fp,0(sp)
   125d8:	dec00104 	addi	sp,sp,4
   125dc:	f800283a 	ret

000125e0 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   125e0:	defffb04 	addi	sp,sp,-20
   125e4:	dfc00415 	stw	ra,16(sp)
   125e8:	df000315 	stw	fp,12(sp)
   125ec:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   125f0:	0140dc04 	movi	r5,880
   125f4:	010000f4 	movhi	r4,3
   125f8:	213cf504 	addi	r4,r4,-3116
   125fc:	00108140 	call	10814 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   12600:	008000f4 	movhi	r2,3
   12604:	10bcf504 	addi	r2,r2,-3116
   12608:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   1260c:	008000f4 	movhi	r2,3
   12610:	10bd0004 	addi	r2,r2,-3072
   12614:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   12618:	e03ffd0d 	sth	zero,-12(fp)
   1261c:	00001306 	br	1266c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   12620:	e0bffe17 	ldw	r2,-8(fp)
   12624:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   12628:	e0bffe17 	ldw	r2,-8(fp)
   1262c:	e0ffff17 	ldw	r3,-4(fp)
   12630:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   12634:	e0bffe17 	ldw	r2,-8(fp)
   12638:	00c00fc4 	movi	r3,63
   1263c:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   12640:	e0bffe17 	ldw	r2,-8(fp)
   12644:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   12648:	e0bffe17 	ldw	r2,-8(fp)
   1264c:	10800b04 	addi	r2,r2,44
   12650:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   12654:	e0bfff17 	ldw	r2,-4(fp)
   12658:	10800b04 	addi	r2,r2,44
   1265c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   12660:	e0bffd0b 	ldhu	r2,-12(fp)
   12664:	10800044 	addi	r2,r2,1
   12668:	e0bffd0d 	sth	r2,-12(fp)
   1266c:	e0bffd0b 	ldhu	r2,-12(fp)
   12670:	108004f0 	cmpltui	r2,r2,19
   12674:	103fea1e 	bne	r2,zero,12620 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012620>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   12678:	e0bffe17 	ldw	r2,-8(fp)
   1267c:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   12680:	e0bffe17 	ldw	r2,-8(fp)
   12684:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   12688:	e0bffe17 	ldw	r2,-8(fp)
   1268c:	00c00fc4 	movi	r3,63
   12690:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   12694:	e0bffe17 	ldw	r2,-8(fp)
   12698:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   1269c:	008000f4 	movhi	r2,3
   126a0:	10bcf504 	addi	r2,r2,-3116
   126a4:	d0a84915 	stw	r2,-24284(gp)
#endif
}
   126a8:	0001883a 	nop
   126ac:	e037883a 	mov	sp,fp
   126b0:	dfc00117 	ldw	ra,4(sp)
   126b4:	df000017 	ldw	fp,0(sp)
   126b8:	dec00204 	addi	sp,sp,8
   126bc:	f800283a 	ret

000126c0 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   126c0:	defffa04 	addi	sp,sp,-24
   126c4:	dfc00515 	stw	ra,20(sp)
   126c8:	df000415 	stw	fp,16(sp)
   126cc:	df000404 	addi	fp,sp,16
   126d0:	e13ffe15 	stw	r4,-8(fp)
   126d4:	2805883a 	mov	r2,r5
   126d8:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   126dc:	e0bffe17 	ldw	r2,-8(fp)
   126e0:	10800217 	ldw	r2,8(r2)
   126e4:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   126e8:	e0bffd17 	ldw	r2,-12(fp)
   126ec:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   126f0:	e0bffd17 	ldw	r2,-12(fp)
   126f4:	e0ffff0b 	ldhu	r3,-4(fp)
   126f8:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   126fc:	e0bffd17 	ldw	r2,-12(fp)
   12700:	10c00c03 	ldbu	r3,48(r2)
   12704:	00bff7c4 	movi	r2,-33
   12708:	1884703a 	and	r2,r3,r2
   1270c:	1007883a 	mov	r3,r2
   12710:	e0bffd17 	ldw	r2,-12(fp)
   12714:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   12718:	e0bffd17 	ldw	r2,-12(fp)
   1271c:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   12720:	e0bffd17 	ldw	r2,-12(fp)
   12724:	10800c03 	ldbu	r2,48(r2)
   12728:	10803fcc 	andi	r2,r2,255
   1272c:	1000181e 	bne	r2,zero,12790 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   12730:	e0bffd17 	ldw	r2,-12(fp)
   12734:	10c00d83 	ldbu	r3,54(r2)
   12738:	d0a84403 	ldbu	r2,-24304(gp)
   1273c:	1884b03a 	or	r2,r3,r2
   12740:	d0a84405 	stb	r2,-24304(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   12744:	e0bffd17 	ldw	r2,-12(fp)
   12748:	10800d03 	ldbu	r2,52(r2)
   1274c:	10c03fcc 	andi	r3,r2,255
   12750:	e0bffd17 	ldw	r2,-12(fp)
   12754:	10800d03 	ldbu	r2,52(r2)
   12758:	11003fcc 	andi	r4,r2,255
   1275c:	d0a84444 	addi	r2,gp,-24303
   12760:	2085883a 	add	r2,r4,r2
   12764:	11000003 	ldbu	r4,0(r2)
   12768:	e0bffd17 	ldw	r2,-12(fp)
   1276c:	10800d43 	ldbu	r2,53(r2)
   12770:	2084b03a 	or	r2,r4,r2
   12774:	1009883a 	mov	r4,r2
   12778:	d0a84444 	addi	r2,gp,-24303
   1277c:	1885883a 	add	r2,r3,r2
   12780:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   12784:	00800044 	movi	r2,1
   12788:	e0bffc05 	stb	r2,-16(fp)
   1278c:	00000106 	br	12794 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
   12790:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   12794:	e13ffe17 	ldw	r4,-8(fp)
   12798:	00127b40 	call	127b4 <OS_FlagUnlink>
    return (sched);
   1279c:	e0bffc03 	ldbu	r2,-16(fp)
}
   127a0:	e037883a 	mov	sp,fp
   127a4:	dfc00117 	ldw	ra,4(sp)
   127a8:	df000017 	ldw	fp,0(sp)
   127ac:	dec00204 	addi	sp,sp,8
   127b0:	f800283a 	ret

000127b4 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   127b4:	defffa04 	addi	sp,sp,-24
   127b8:	df000515 	stw	fp,20(sp)
   127bc:	df000504 	addi	fp,sp,20
   127c0:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   127c4:	e0bfff17 	ldw	r2,-4(fp)
   127c8:	10800117 	ldw	r2,4(r2)
   127cc:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   127d0:	e0bfff17 	ldw	r2,-4(fp)
   127d4:	10800017 	ldw	r2,0(r2)
   127d8:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   127dc:	e0bffb17 	ldw	r2,-20(fp)
   127e0:	10000b1e 	bne	r2,zero,12810 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   127e4:	e0bfff17 	ldw	r2,-4(fp)
   127e8:	10800317 	ldw	r2,12(r2)
   127ec:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   127f0:	e0bffd17 	ldw	r2,-12(fp)
   127f4:	e0fffc17 	ldw	r3,-16(fp)
   127f8:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   127fc:	e0bffc17 	ldw	r2,-16(fp)
   12800:	10000b26 	beq	r2,zero,12830 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   12804:	e0bffc17 	ldw	r2,-16(fp)
   12808:	10000115 	stw	zero,4(r2)
   1280c:	00000806 	br	12830 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   12810:	e0bffb17 	ldw	r2,-20(fp)
   12814:	e0fffc17 	ldw	r3,-16(fp)
   12818:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   1281c:	e0bffc17 	ldw	r2,-16(fp)
   12820:	10000326 	beq	r2,zero,12830 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   12824:	e0bffc17 	ldw	r2,-16(fp)
   12828:	e0fffb17 	ldw	r3,-20(fp)
   1282c:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   12830:	e0bfff17 	ldw	r2,-4(fp)
   12834:	10800217 	ldw	r2,8(r2)
   12838:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   1283c:	e0bffe17 	ldw	r2,-8(fp)
   12840:	10000a15 	stw	zero,40(r2)
#endif
}
   12844:	0001883a 	nop
   12848:	e037883a 	mov	sp,fp
   1284c:	df000017 	ldw	fp,0(sp)
   12850:	dec00104 	addi	sp,sp,4
   12854:	f800283a 	ret

00012858 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   12858:	defff404 	addi	sp,sp,-48
   1285c:	df000b15 	stw	fp,44(sp)
   12860:	df000b04 	addi	fp,sp,44
   12864:	e13ffc15 	stw	r4,-16(fp)
   12868:	e17ffd15 	stw	r5,-12(fp)
   1286c:	e1bffe15 	stw	r6,-8(fp)
   12870:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12874:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   12878:	e0bfff17 	ldw	r2,-4(fp)
   1287c:	1000021e 	bne	r2,zero,12888 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   12880:	0005883a 	mov	r2,zero
   12884:	00006506 	br	12a1c <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   12888:	e0bffc17 	ldw	r2,-16(fp)
   1288c:	1000051e 	bne	r2,zero,128a4 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   12890:	e0bfff17 	ldw	r2,-4(fp)
   12894:	00c01884 	movi	r3,98
   12898:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1289c:	0005883a 	mov	r2,zero
   128a0:	00005e06 	br	12a1c <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   128a4:	e0bffc17 	ldw	r2,-16(fp)
   128a8:	108000cc 	andi	r2,r2,3
   128ac:	10000526 	beq	r2,zero,128c4 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   128b0:	e0bfff17 	ldw	r2,-4(fp)
   128b4:	00c01884 	movi	r3,98
   128b8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   128bc:	0005883a 	mov	r2,zero
   128c0:	00005606 	br	12a1c <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   128c4:	e0bffd17 	ldw	r2,-12(fp)
   128c8:	108000a8 	cmpgeui	r2,r2,2
   128cc:	1000051e 	bne	r2,zero,128e4 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   128d0:	e0bfff17 	ldw	r2,-4(fp)
   128d4:	00c016c4 	movi	r3,91
   128d8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   128dc:	0005883a 	mov	r2,zero
   128e0:	00004e06 	br	12a1c <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   128e4:	e0bffe17 	ldw	r2,-8(fp)
   128e8:	10800128 	cmpgeui	r2,r2,4
   128ec:	1000051e 	bne	r2,zero,12904 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   128f0:	e0bfff17 	ldw	r2,-4(fp)
   128f4:	00c01704 	movi	r3,92
   128f8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   128fc:	0005883a 	mov	r2,zero
   12900:	00004606 	br	12a1c <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12904:	0005303a 	rdctl	r2,status
   12908:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1290c:	e0fffb17 	ldw	r3,-20(fp)
   12910:	00bfff84 	movi	r2,-2
   12914:	1884703a 	and	r2,r3,r2
   12918:	1001703a 	wrctl	status,r2
  
  return context;
   1291c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   12920:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   12924:	d0a84117 	ldw	r2,-24316(gp)
   12928:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   1292c:	d0a84117 	ldw	r2,-24316(gp)
   12930:	10000326 	beq	r2,zero,12940 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   12934:	d0a84117 	ldw	r2,-24316(gp)
   12938:	10800117 	ldw	r2,4(r2)
   1293c:	d0a84115 	stw	r2,-24316(gp)
   12940:	e0bff817 	ldw	r2,-32(fp)
   12944:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12948:	e0bff917 	ldw	r2,-28(fp)
   1294c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   12950:	e0bffa17 	ldw	r2,-24(fp)
   12954:	1000051e 	bne	r2,zero,1296c <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
   12958:	e0bfff17 	ldw	r2,-4(fp)
   1295c:	00c01684 	movi	r3,90
   12960:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   12964:	0005883a 	mov	r2,zero
   12968:	00002c06 	br	12a1c <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   1296c:	e0bffc17 	ldw	r2,-16(fp)
   12970:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   12974:	e0fffc17 	ldw	r3,-16(fp)
   12978:	e0bffe17 	ldw	r2,-8(fp)
   1297c:	1885883a 	add	r2,r3,r2
   12980:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   12984:	e03ff715 	stw	zero,-36(fp)
   12988:	00000c06 	br	129bc <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   1298c:	e0bff617 	ldw	r2,-40(fp)
   12990:	e0fff517 	ldw	r3,-44(fp)
   12994:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   12998:	e0bff517 	ldw	r2,-44(fp)
   1299c:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   129a0:	e0fff517 	ldw	r3,-44(fp)
   129a4:	e0bffe17 	ldw	r2,-8(fp)
   129a8:	1885883a 	add	r2,r3,r2
   129ac:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   129b0:	e0bff717 	ldw	r2,-36(fp)
   129b4:	10800044 	addi	r2,r2,1
   129b8:	e0bff715 	stw	r2,-36(fp)
   129bc:	e0bffd17 	ldw	r2,-12(fp)
   129c0:	10bfffc4 	addi	r2,r2,-1
   129c4:	e0fff717 	ldw	r3,-36(fp)
   129c8:	18bff036 	bltu	r3,r2,1298c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701298c>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   129cc:	e0bff617 	ldw	r2,-40(fp)
   129d0:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   129d4:	e0bffa17 	ldw	r2,-24(fp)
   129d8:	e0fffc17 	ldw	r3,-16(fp)
   129dc:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   129e0:	e0bffa17 	ldw	r2,-24(fp)
   129e4:	e0fffc17 	ldw	r3,-16(fp)
   129e8:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   129ec:	e0bffa17 	ldw	r2,-24(fp)
   129f0:	e0fffd17 	ldw	r3,-12(fp)
   129f4:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   129f8:	e0bffa17 	ldw	r2,-24(fp)
   129fc:	e0fffd17 	ldw	r3,-12(fp)
   12a00:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   12a04:	e0bffa17 	ldw	r2,-24(fp)
   12a08:	e0fffe17 	ldw	r3,-8(fp)
   12a0c:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   12a10:	e0bfff17 	ldw	r2,-4(fp)
   12a14:	10000005 	stb	zero,0(r2)
    return (pmem);
   12a18:	e0bffa17 	ldw	r2,-24(fp)
}
   12a1c:	e037883a 	mov	sp,fp
   12a20:	df000017 	ldw	fp,0(sp)
   12a24:	dec00104 	addi	sp,sp,4
   12a28:	f800283a 	ret

00012a2c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   12a2c:	defff804 	addi	sp,sp,-32
   12a30:	df000715 	stw	fp,28(sp)
   12a34:	df000704 	addi	fp,sp,28
   12a38:	e13ffe15 	stw	r4,-8(fp)
   12a3c:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12a40:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   12a44:	e0bfff17 	ldw	r2,-4(fp)
   12a48:	1000021e 	bne	r2,zero,12a54 <OSMemGet+0x28>
        return ((void *)0);
   12a4c:	0005883a 	mov	r2,zero
   12a50:	00002e06 	br	12b0c <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   12a54:	e0bffe17 	ldw	r2,-8(fp)
   12a58:	1000051e 	bne	r2,zero,12a70 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   12a5c:	e0bfff17 	ldw	r2,-4(fp)
   12a60:	00c01804 	movi	r3,96
   12a64:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12a68:	0005883a 	mov	r2,zero
   12a6c:	00002706 	br	12b0c <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12a70:	0005303a 	rdctl	r2,status
   12a74:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12a78:	e0fffd17 	ldw	r3,-12(fp)
   12a7c:	00bfff84 	movi	r2,-2
   12a80:	1884703a 	and	r2,r3,r2
   12a84:	1001703a 	wrctl	status,r2
  
  return context;
   12a88:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   12a8c:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   12a90:	e0bffe17 	ldw	r2,-8(fp)
   12a94:	10800417 	ldw	r2,16(r2)
   12a98:	10001426 	beq	r2,zero,12aec <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   12a9c:	e0bffe17 	ldw	r2,-8(fp)
   12aa0:	10800117 	ldw	r2,4(r2)
   12aa4:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   12aa8:	e0bffb17 	ldw	r2,-20(fp)
   12aac:	10c00017 	ldw	r3,0(r2)
   12ab0:	e0bffe17 	ldw	r2,-8(fp)
   12ab4:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   12ab8:	e0bffe17 	ldw	r2,-8(fp)
   12abc:	10800417 	ldw	r2,16(r2)
   12ac0:	10ffffc4 	addi	r3,r2,-1
   12ac4:	e0bffe17 	ldw	r2,-8(fp)
   12ac8:	10c00415 	stw	r3,16(r2)
   12acc:	e0bff917 	ldw	r2,-28(fp)
   12ad0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12ad4:	e0bffa17 	ldw	r2,-24(fp)
   12ad8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   12adc:	e0bfff17 	ldw	r2,-4(fp)
   12ae0:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   12ae4:	e0bffb17 	ldw	r2,-20(fp)
   12ae8:	00000806 	br	12b0c <OSMemGet+0xe0>
   12aec:	e0bff917 	ldw	r2,-28(fp)
   12af0:	e0bffc15 	stw	r2,-16(fp)
   12af4:	e0bffc17 	ldw	r2,-16(fp)
   12af8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   12afc:	e0bfff17 	ldw	r2,-4(fp)
   12b00:	00c01744 	movi	r3,93
   12b04:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   12b08:	0005883a 	mov	r2,zero
}
   12b0c:	e037883a 	mov	sp,fp
   12b10:	df000017 	ldw	fp,0(sp)
   12b14:	dec00104 	addi	sp,sp,4
   12b18:	f800283a 	ret

00012b1c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   12b1c:	defff704 	addi	sp,sp,-36
   12b20:	dfc00815 	stw	ra,32(sp)
   12b24:	df000715 	stw	fp,28(sp)
   12b28:	df000704 	addi	fp,sp,28
   12b2c:	e13ffd15 	stw	r4,-12(fp)
   12b30:	e17ffe15 	stw	r5,-8(fp)
   12b34:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12b38:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   12b3c:	e0bfff17 	ldw	r2,-4(fp)
   12b40:	1000021e 	bne	r2,zero,12b4c <OSMemNameGet+0x30>
        return (0);
   12b44:	0005883a 	mov	r2,zero
   12b48:	00002b06 	br	12bf8 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   12b4c:	e0bffd17 	ldw	r2,-12(fp)
   12b50:	1000051e 	bne	r2,zero,12b68 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   12b54:	e0bfff17 	ldw	r2,-4(fp)
   12b58:	00c01804 	movi	r3,96
   12b5c:	10c00005 	stb	r3,0(r2)
        return (0);
   12b60:	0005883a 	mov	r2,zero
   12b64:	00002406 	br	12bf8 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   12b68:	e0bffe17 	ldw	r2,-8(fp)
   12b6c:	1000051e 	bne	r2,zero,12b84 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   12b70:	e0bfff17 	ldw	r2,-4(fp)
   12b74:	00c00304 	movi	r3,12
   12b78:	10c00005 	stb	r3,0(r2)
        return (0);
   12b7c:	0005883a 	mov	r2,zero
   12b80:	00001d06 	br	12bf8 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   12b84:	d0a84603 	ldbu	r2,-24296(gp)
   12b88:	10803fcc 	andi	r2,r2,255
   12b8c:	10000526 	beq	r2,zero,12ba4 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   12b90:	e0bfff17 	ldw	r2,-4(fp)
   12b94:	00c00444 	movi	r3,17
   12b98:	10c00005 	stb	r3,0(r2)
        return (0);
   12b9c:	0005883a 	mov	r2,zero
   12ba0:	00001506 	br	12bf8 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12ba4:	0005303a 	rdctl	r2,status
   12ba8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12bac:	e0fffb17 	ldw	r3,-20(fp)
   12bb0:	00bfff84 	movi	r2,-2
   12bb4:	1884703a 	and	r2,r3,r2
   12bb8:	1001703a 	wrctl	status,r2
  
  return context;
   12bbc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   12bc0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   12bc4:	e0bffd17 	ldw	r2,-12(fp)
   12bc8:	10800504 	addi	r2,r2,20
   12bcc:	100b883a 	mov	r5,r2
   12bd0:	e13ffe17 	ldw	r4,-8(fp)
   12bd4:	0010a140 	call	10a14 <OS_StrCopy>
   12bd8:	e0bffa05 	stb	r2,-24(fp)
   12bdc:	e0bff917 	ldw	r2,-28(fp)
   12be0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12be4:	e0bffc17 	ldw	r2,-16(fp)
   12be8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   12bec:	e0bfff17 	ldw	r2,-4(fp)
   12bf0:	10000005 	stb	zero,0(r2)
    return (len);
   12bf4:	e0bffa03 	ldbu	r2,-24(fp)
}
   12bf8:	e037883a 	mov	sp,fp
   12bfc:	dfc00117 	ldw	ra,4(sp)
   12c00:	df000017 	ldw	fp,0(sp)
   12c04:	dec00204 	addi	sp,sp,8
   12c08:	f800283a 	ret

00012c0c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   12c0c:	defff604 	addi	sp,sp,-40
   12c10:	dfc00915 	stw	ra,36(sp)
   12c14:	df000815 	stw	fp,32(sp)
   12c18:	df000804 	addi	fp,sp,32
   12c1c:	e13ffd15 	stw	r4,-12(fp)
   12c20:	e17ffe15 	stw	r5,-8(fp)
   12c24:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12c28:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   12c2c:	e0bfff17 	ldw	r2,-4(fp)
   12c30:	10003526 	beq	r2,zero,12d08 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   12c34:	e0bffd17 	ldw	r2,-12(fp)
   12c38:	1000041e 	bne	r2,zero,12c4c <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   12c3c:	e0bfff17 	ldw	r2,-4(fp)
   12c40:	00c01804 	movi	r3,96
   12c44:	10c00005 	stb	r3,0(r2)
        return;
   12c48:	00003006 	br	12d0c <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   12c4c:	e0bffe17 	ldw	r2,-8(fp)
   12c50:	1000041e 	bne	r2,zero,12c64 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   12c54:	e0bfff17 	ldw	r2,-4(fp)
   12c58:	00c00304 	movi	r3,12
   12c5c:	10c00005 	stb	r3,0(r2)
        return;
   12c60:	00002a06 	br	12d0c <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   12c64:	d0a84603 	ldbu	r2,-24296(gp)
   12c68:	10803fcc 	andi	r2,r2,255
   12c6c:	10000426 	beq	r2,zero,12c80 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   12c70:	e0bfff17 	ldw	r2,-4(fp)
   12c74:	00c00484 	movi	r3,18
   12c78:	10c00005 	stb	r3,0(r2)
        return;
   12c7c:	00002306 	br	12d0c <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12c80:	0005303a 	rdctl	r2,status
   12c84:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12c88:	e0fffc17 	ldw	r3,-16(fp)
   12c8c:	00bfff84 	movi	r2,-2
   12c90:	1884703a 	and	r2,r3,r2
   12c94:	1001703a 	wrctl	status,r2
  
  return context;
   12c98:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12c9c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   12ca0:	e13ffe17 	ldw	r4,-8(fp)
   12ca4:	0010a880 	call	10a88 <OS_StrLen>
   12ca8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   12cac:	e0bffa03 	ldbu	r2,-24(fp)
   12cb0:	10800830 	cmpltui	r2,r2,32
   12cb4:	1000081e 	bne	r2,zero,12cd8 <OSMemNameSet+0xcc>
   12cb8:	e0bff817 	ldw	r2,-32(fp)
   12cbc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12cc0:	e0bff917 	ldw	r2,-28(fp)
   12cc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   12cc8:	e0bfff17 	ldw	r2,-4(fp)
   12ccc:	00c018c4 	movi	r3,99
   12cd0:	10c00005 	stb	r3,0(r2)
        return;
   12cd4:	00000d06 	br	12d0c <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   12cd8:	e0bffd17 	ldw	r2,-12(fp)
   12cdc:	10800504 	addi	r2,r2,20
   12ce0:	e17ffe17 	ldw	r5,-8(fp)
   12ce4:	1009883a 	mov	r4,r2
   12ce8:	0010a140 	call	10a14 <OS_StrCopy>
   12cec:	e0bff817 	ldw	r2,-32(fp)
   12cf0:	e0bffb15 	stw	r2,-20(fp)
   12cf4:	e0bffb17 	ldw	r2,-20(fp)
   12cf8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   12cfc:	e0bfff17 	ldw	r2,-4(fp)
   12d00:	10000005 	stb	zero,0(r2)
   12d04:	00000106 	br	12d0c <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   12d08:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   12d0c:	e037883a 	mov	sp,fp
   12d10:	dfc00117 	ldw	ra,4(sp)
   12d14:	df000017 	ldw	fp,0(sp)
   12d18:	dec00204 	addi	sp,sp,8
   12d1c:	f800283a 	ret

00012d20 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   12d20:	defff904 	addi	sp,sp,-28
   12d24:	df000615 	stw	fp,24(sp)
   12d28:	df000604 	addi	fp,sp,24
   12d2c:	e13ffe15 	stw	r4,-8(fp)
   12d30:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12d34:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   12d38:	e0bffe17 	ldw	r2,-8(fp)
   12d3c:	1000021e 	bne	r2,zero,12d48 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   12d40:	00801804 	movi	r2,96
   12d44:	00002806 	br	12de8 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   12d48:	e0bfff17 	ldw	r2,-4(fp)
   12d4c:	1000021e 	bne	r2,zero,12d58 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   12d50:	008017c4 	movi	r2,95
   12d54:	00002406 	br	12de8 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12d58:	0005303a 	rdctl	r2,status
   12d5c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12d60:	e0fffd17 	ldw	r3,-12(fp)
   12d64:	00bfff84 	movi	r2,-2
   12d68:	1884703a 	and	r2,r3,r2
   12d6c:	1001703a 	wrctl	status,r2
  
  return context;
   12d70:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   12d74:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   12d78:	e0bffe17 	ldw	r2,-8(fp)
   12d7c:	10c00417 	ldw	r3,16(r2)
   12d80:	e0bffe17 	ldw	r2,-8(fp)
   12d84:	10800317 	ldw	r2,12(r2)
   12d88:	18800636 	bltu	r3,r2,12da4 <OSMemPut+0x84>
   12d8c:	e0bffa17 	ldw	r2,-24(fp)
   12d90:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12d94:	e0bffb17 	ldw	r2,-20(fp)
   12d98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   12d9c:	00801784 	movi	r2,94
   12da0:	00001106 	br	12de8 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   12da4:	e0bffe17 	ldw	r2,-8(fp)
   12da8:	10c00117 	ldw	r3,4(r2)
   12dac:	e0bfff17 	ldw	r2,-4(fp)
   12db0:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   12db4:	e0bffe17 	ldw	r2,-8(fp)
   12db8:	e0ffff17 	ldw	r3,-4(fp)
   12dbc:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   12dc0:	e0bffe17 	ldw	r2,-8(fp)
   12dc4:	10800417 	ldw	r2,16(r2)
   12dc8:	10c00044 	addi	r3,r2,1
   12dcc:	e0bffe17 	ldw	r2,-8(fp)
   12dd0:	10c00415 	stw	r3,16(r2)
   12dd4:	e0bffa17 	ldw	r2,-24(fp)
   12dd8:	e0bffc15 	stw	r2,-16(fp)
   12ddc:	e0bffc17 	ldw	r2,-16(fp)
   12de0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   12de4:	0005883a 	mov	r2,zero
}
   12de8:	e037883a 	mov	sp,fp
   12dec:	df000017 	ldw	fp,0(sp)
   12df0:	dec00104 	addi	sp,sp,4
   12df4:	f800283a 	ret

00012df8 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   12df8:	defffa04 	addi	sp,sp,-24
   12dfc:	df000515 	stw	fp,20(sp)
   12e00:	df000504 	addi	fp,sp,20
   12e04:	e13ffe15 	stw	r4,-8(fp)
   12e08:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12e0c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   12e10:	e0bffe17 	ldw	r2,-8(fp)
   12e14:	1000021e 	bne	r2,zero,12e20 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   12e18:	00801804 	movi	r2,96
   12e1c:	00002c06 	br	12ed0 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   12e20:	e0bfff17 	ldw	r2,-4(fp)
   12e24:	1000021e 	bne	r2,zero,12e30 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   12e28:	00801844 	movi	r2,97
   12e2c:	00002806 	br	12ed0 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12e30:	0005303a 	rdctl	r2,status
   12e34:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12e38:	e0fffc17 	ldw	r3,-16(fp)
   12e3c:	00bfff84 	movi	r2,-2
   12e40:	1884703a 	and	r2,r3,r2
   12e44:	1001703a 	wrctl	status,r2
  
  return context;
   12e48:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   12e4c:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   12e50:	e0bffe17 	ldw	r2,-8(fp)
   12e54:	10c00017 	ldw	r3,0(r2)
   12e58:	e0bfff17 	ldw	r2,-4(fp)
   12e5c:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   12e60:	e0bffe17 	ldw	r2,-8(fp)
   12e64:	10c00117 	ldw	r3,4(r2)
   12e68:	e0bfff17 	ldw	r2,-4(fp)
   12e6c:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   12e70:	e0bffe17 	ldw	r2,-8(fp)
   12e74:	10c00217 	ldw	r3,8(r2)
   12e78:	e0bfff17 	ldw	r2,-4(fp)
   12e7c:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   12e80:	e0bffe17 	ldw	r2,-8(fp)
   12e84:	10c00317 	ldw	r3,12(r2)
   12e88:	e0bfff17 	ldw	r2,-4(fp)
   12e8c:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   12e90:	e0bffe17 	ldw	r2,-8(fp)
   12e94:	10c00417 	ldw	r3,16(r2)
   12e98:	e0bfff17 	ldw	r2,-4(fp)
   12e9c:	10c00415 	stw	r3,16(r2)
   12ea0:	e0bffb17 	ldw	r2,-20(fp)
   12ea4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12ea8:	e0bffd17 	ldw	r2,-12(fp)
   12eac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   12eb0:	e0bfff17 	ldw	r2,-4(fp)
   12eb4:	10c00317 	ldw	r3,12(r2)
   12eb8:	e0bfff17 	ldw	r2,-4(fp)
   12ebc:	10800417 	ldw	r2,16(r2)
   12ec0:	1887c83a 	sub	r3,r3,r2
   12ec4:	e0bfff17 	ldw	r2,-4(fp)
   12ec8:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   12ecc:	0005883a 	mov	r2,zero
}
   12ed0:	e037883a 	mov	sp,fp
   12ed4:	df000017 	ldw	fp,0(sp)
   12ed8:	dec00104 	addi	sp,sp,4
   12edc:	f800283a 	ret

00012ee0 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   12ee0:	defffc04 	addi	sp,sp,-16
   12ee4:	dfc00315 	stw	ra,12(sp)
   12ee8:	df000215 	stw	fp,8(sp)
   12eec:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   12ef0:	01430c04 	movi	r5,3120
   12ef4:	010000f4 	movhi	r4,3
   12ef8:	213dd104 	addi	r4,r4,-2236
   12efc:	00108140 	call	10814 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   12f00:	008000f4 	movhi	r2,3
   12f04:	10bdd104 	addi	r2,r2,-2236
   12f08:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   12f0c:	e03fff0d 	sth	zero,-4(fp)
   12f10:	00001306 	br	12f60 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   12f14:	e0bfff0b 	ldhu	r2,-4(fp)
   12f18:	10800044 	addi	r2,r2,1
   12f1c:	10c00d24 	muli	r3,r2,52
   12f20:	008000f4 	movhi	r2,3
   12f24:	10bdd104 	addi	r2,r2,-2236
   12f28:	1887883a 	add	r3,r3,r2
   12f2c:	e0bffe17 	ldw	r2,-8(fp)
   12f30:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   12f34:	e0bffe17 	ldw	r2,-8(fp)
   12f38:	00c00fc4 	movi	r3,63
   12f3c:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   12f40:	e0bffe17 	ldw	r2,-8(fp)
   12f44:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   12f48:	e0bffe17 	ldw	r2,-8(fp)
   12f4c:	10800d04 	addi	r2,r2,52
   12f50:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   12f54:	e0bfff0b 	ldhu	r2,-4(fp)
   12f58:	10800044 	addi	r2,r2,1
   12f5c:	e0bfff0d 	sth	r2,-4(fp)
   12f60:	e0bfff0b 	ldhu	r2,-4(fp)
   12f64:	10800ef0 	cmpltui	r2,r2,59
   12f68:	103fea1e 	bne	r2,zero,12f14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012f14>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   12f6c:	e0bffe17 	ldw	r2,-8(fp)
   12f70:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   12f74:	e0bffe17 	ldw	r2,-8(fp)
   12f78:	00c00fc4 	movi	r3,63
   12f7c:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   12f80:	e0bffe17 	ldw	r2,-8(fp)
   12f84:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   12f88:	008000f4 	movhi	r2,3
   12f8c:	10bdd104 	addi	r2,r2,-2236
   12f90:	d0a84115 	stw	r2,-24316(gp)
#endif
}
   12f94:	0001883a 	nop
   12f98:	e037883a 	mov	sp,fp
   12f9c:	dfc00117 	ldw	ra,4(sp)
   12fa0:	df000017 	ldw	fp,0(sp)
   12fa4:	dec00204 	addi	sp,sp,8
   12fa8:	f800283a 	ret

00012fac <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   12fac:	defff804 	addi	sp,sp,-32
   12fb0:	df000715 	stw	fp,28(sp)
   12fb4:	df000704 	addi	fp,sp,28
   12fb8:	e13ffe15 	stw	r4,-8(fp)
   12fbc:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12fc0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   12fc4:	e0bfff17 	ldw	r2,-4(fp)
   12fc8:	1000021e 	bne	r2,zero,12fd4 <OSQAccept+0x28>
        return ((void *)0);
   12fcc:	0005883a 	mov	r2,zero
   12fd0:	00004206 	br	130dc <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   12fd4:	e0bffe17 	ldw	r2,-8(fp)
   12fd8:	1000051e 	bne	r2,zero,12ff0 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   12fdc:	e0bfff17 	ldw	r2,-4(fp)
   12fe0:	00c00104 	movi	r3,4
   12fe4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12fe8:	0005883a 	mov	r2,zero
   12fec:	00003b06 	br	130dc <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   12ff0:	e0bffe17 	ldw	r2,-8(fp)
   12ff4:	10800003 	ldbu	r2,0(r2)
   12ff8:	10803fcc 	andi	r2,r2,255
   12ffc:	108000a0 	cmpeqi	r2,r2,2
   13000:	1000051e 	bne	r2,zero,13018 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   13004:	e0bfff17 	ldw	r2,-4(fp)
   13008:	00c00044 	movi	r3,1
   1300c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   13010:	0005883a 	mov	r2,zero
   13014:	00003106 	br	130dc <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13018:	0005303a 	rdctl	r2,status
   1301c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13020:	e0fffd17 	ldw	r3,-12(fp)
   13024:	00bfff84 	movi	r2,-2
   13028:	1884703a 	and	r2,r3,r2
   1302c:	1001703a 	wrctl	status,r2
  
  return context;
   13030:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   13034:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   13038:	e0bffe17 	ldw	r2,-8(fp)
   1303c:	10800117 	ldw	r2,4(r2)
   13040:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   13044:	e0bffc17 	ldw	r2,-16(fp)
   13048:	1080058b 	ldhu	r2,22(r2)
   1304c:	10bfffcc 	andi	r2,r2,65535
   13050:	10001926 	beq	r2,zero,130b8 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   13054:	e0bffc17 	ldw	r2,-16(fp)
   13058:	10800417 	ldw	r2,16(r2)
   1305c:	11000104 	addi	r4,r2,4
   13060:	e0fffc17 	ldw	r3,-16(fp)
   13064:	19000415 	stw	r4,16(r3)
   13068:	10800017 	ldw	r2,0(r2)
   1306c:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   13070:	e0bffc17 	ldw	r2,-16(fp)
   13074:	1080058b 	ldhu	r2,22(r2)
   13078:	10bfffc4 	addi	r2,r2,-1
   1307c:	1007883a 	mov	r3,r2
   13080:	e0bffc17 	ldw	r2,-16(fp)
   13084:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   13088:	e0bffc17 	ldw	r2,-16(fp)
   1308c:	10c00417 	ldw	r3,16(r2)
   13090:	e0bffc17 	ldw	r2,-16(fp)
   13094:	10800217 	ldw	r2,8(r2)
   13098:	1880041e 	bne	r3,r2,130ac <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   1309c:	e0bffc17 	ldw	r2,-16(fp)
   130a0:	10c00117 	ldw	r3,4(r2)
   130a4:	e0bffc17 	ldw	r2,-16(fp)
   130a8:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   130ac:	e0bfff17 	ldw	r2,-4(fp)
   130b0:	10000005 	stb	zero,0(r2)
   130b4:	00000406 	br	130c8 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   130b8:	e0bfff17 	ldw	r2,-4(fp)
   130bc:	00c007c4 	movi	r3,31
   130c0:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   130c4:	e03ff915 	stw	zero,-28(fp)
   130c8:	e0bffa17 	ldw	r2,-24(fp)
   130cc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   130d0:	e0bffb17 	ldw	r2,-20(fp)
   130d4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   130d8:	e0bff917 	ldw	r2,-28(fp)
}
   130dc:	e037883a 	mov	sp,fp
   130e0:	df000017 	ldw	fp,0(sp)
   130e4:	dec00104 	addi	sp,sp,4
   130e8:	f800283a 	ret

000130ec <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   130ec:	defff404 	addi	sp,sp,-48
   130f0:	dfc00b15 	stw	ra,44(sp)
   130f4:	df000a15 	stw	fp,40(sp)
   130f8:	df000a04 	addi	fp,sp,40
   130fc:	e13ffe15 	stw	r4,-8(fp)
   13100:	2805883a 	mov	r2,r5
   13104:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13108:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   1310c:	d0a84603 	ldbu	r2,-24296(gp)
   13110:	10803fcc 	andi	r2,r2,255
   13114:	10000226 	beq	r2,zero,13120 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   13118:	0005883a 	mov	r2,zero
   1311c:	00005906 	br	13284 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13120:	0005303a 	rdctl	r2,status
   13124:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13128:	e0fffd17 	ldw	r3,-12(fp)
   1312c:	00bfff84 	movi	r2,-2
   13130:	1884703a 	and	r2,r3,r2
   13134:	1001703a 	wrctl	status,r2
  
  return context;
   13138:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1313c:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   13140:	d0a84517 	ldw	r2,-24300(gp)
   13144:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   13148:	d0a84517 	ldw	r2,-24300(gp)
   1314c:	10000326 	beq	r2,zero,1315c <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   13150:	d0a84517 	ldw	r2,-24300(gp)
   13154:	10800117 	ldw	r2,4(r2)
   13158:	d0a84515 	stw	r2,-24300(gp)
   1315c:	e0bff717 	ldw	r2,-36(fp)
   13160:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13164:	e0bff817 	ldw	r2,-32(fp)
   13168:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   1316c:	e0bff617 	ldw	r2,-40(fp)
   13170:	10004326 	beq	r2,zero,13280 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13174:	0005303a 	rdctl	r2,status
   13178:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1317c:	e0fff917 	ldw	r3,-28(fp)
   13180:	00bfff84 	movi	r2,-2
   13184:	1884703a 	and	r2,r3,r2
   13188:	1001703a 	wrctl	status,r2
  
  return context;
   1318c:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
   13190:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   13194:	d0a84317 	ldw	r2,-24308(gp)
   13198:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   1319c:	e0bffb17 	ldw	r2,-20(fp)
   131a0:	10002d26 	beq	r2,zero,13258 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   131a4:	d0a84317 	ldw	r2,-24308(gp)
   131a8:	10800017 	ldw	r2,0(r2)
   131ac:	d0a84315 	stw	r2,-24308(gp)
   131b0:	e0bff717 	ldw	r2,-36(fp)
   131b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   131b8:	e0bffa17 	ldw	r2,-24(fp)
   131bc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   131c0:	e0bffb17 	ldw	r2,-20(fp)
   131c4:	e0fffe17 	ldw	r3,-8(fp)
   131c8:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   131cc:	e0bfff0b 	ldhu	r2,-4(fp)
   131d0:	1085883a 	add	r2,r2,r2
   131d4:	1085883a 	add	r2,r2,r2
   131d8:	1007883a 	mov	r3,r2
   131dc:	e0bffe17 	ldw	r2,-8(fp)
   131e0:	10c7883a 	add	r3,r2,r3
   131e4:	e0bffb17 	ldw	r2,-20(fp)
   131e8:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   131ec:	e0bffb17 	ldw	r2,-20(fp)
   131f0:	e0fffe17 	ldw	r3,-8(fp)
   131f4:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   131f8:	e0bffb17 	ldw	r2,-20(fp)
   131fc:	e0fffe17 	ldw	r3,-8(fp)
   13200:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   13204:	e0bffb17 	ldw	r2,-20(fp)
   13208:	e0ffff0b 	ldhu	r3,-4(fp)
   1320c:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   13210:	e0bffb17 	ldw	r2,-20(fp)
   13214:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   13218:	e0bff617 	ldw	r2,-40(fp)
   1321c:	00c00084 	movi	r3,2
   13220:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   13224:	e0bff617 	ldw	r2,-40(fp)
   13228:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   1322c:	e0bff617 	ldw	r2,-40(fp)
   13230:	e0fffb17 	ldw	r3,-20(fp)
   13234:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   13238:	e0bff617 	ldw	r2,-40(fp)
   1323c:	00c00fc4 	movi	r3,63
   13240:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   13244:	e0bff617 	ldw	r2,-40(fp)
   13248:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   1324c:	e13ff617 	ldw	r4,-40(fp)
   13250:	00104340 	call	10434 <OS_EventWaitListInit>
   13254:	00000a06 	br	13280 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   13258:	d0e84517 	ldw	r3,-24300(gp)
   1325c:	e0bff617 	ldw	r2,-40(fp)
   13260:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   13264:	e0bff617 	ldw	r2,-40(fp)
   13268:	d0a84515 	stw	r2,-24300(gp)
   1326c:	e0bff717 	ldw	r2,-36(fp)
   13270:	e0bffc15 	stw	r2,-16(fp)
   13274:	e0bffc17 	ldw	r2,-16(fp)
   13278:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   1327c:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   13280:	e0bff617 	ldw	r2,-40(fp)
}
   13284:	e037883a 	mov	sp,fp
   13288:	dfc00117 	ldw	ra,4(sp)
   1328c:	df000017 	ldw	fp,0(sp)
   13290:	dec00204 	addi	sp,sp,8
   13294:	f800283a 	ret

00013298 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   13298:	defff204 	addi	sp,sp,-56
   1329c:	dfc00d15 	stw	ra,52(sp)
   132a0:	df000c15 	stw	fp,48(sp)
   132a4:	df000c04 	addi	fp,sp,48
   132a8:	e13ffd15 	stw	r4,-12(fp)
   132ac:	2805883a 	mov	r2,r5
   132b0:	e1bfff15 	stw	r6,-4(fp)
   132b4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   132b8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   132bc:	e0bfff17 	ldw	r2,-4(fp)
   132c0:	1000021e 	bne	r2,zero,132cc <OSQDel+0x34>
        return (pevent);
   132c4:	e0bffd17 	ldw	r2,-12(fp)
   132c8:	00008e06 	br	13504 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   132cc:	e0bffd17 	ldw	r2,-12(fp)
   132d0:	1000051e 	bne	r2,zero,132e8 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   132d4:	e0bfff17 	ldw	r2,-4(fp)
   132d8:	00c00104 	movi	r3,4
   132dc:	10c00005 	stb	r3,0(r2)
        return (pevent);
   132e0:	e0bffd17 	ldw	r2,-12(fp)
   132e4:	00008706 	br	13504 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   132e8:	e0bffd17 	ldw	r2,-12(fp)
   132ec:	10800003 	ldbu	r2,0(r2)
   132f0:	10803fcc 	andi	r2,r2,255
   132f4:	108000a0 	cmpeqi	r2,r2,2
   132f8:	1000051e 	bne	r2,zero,13310 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   132fc:	e0bfff17 	ldw	r2,-4(fp)
   13300:	00c00044 	movi	r3,1
   13304:	10c00005 	stb	r3,0(r2)
        return (pevent);
   13308:	e0bffd17 	ldw	r2,-12(fp)
   1330c:	00007d06 	br	13504 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   13310:	d0a84603 	ldbu	r2,-24296(gp)
   13314:	10803fcc 	andi	r2,r2,255
   13318:	10000526 	beq	r2,zero,13330 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   1331c:	e0bfff17 	ldw	r2,-4(fp)
   13320:	00c003c4 	movi	r3,15
   13324:	10c00005 	stb	r3,0(r2)
        return (pevent);
   13328:	e0bffd17 	ldw	r2,-12(fp)
   1332c:	00007506 	br	13504 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13330:	0005303a 	rdctl	r2,status
   13334:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13338:	e0fffc17 	ldw	r3,-16(fp)
   1333c:	00bfff84 	movi	r2,-2
   13340:	1884703a 	and	r2,r3,r2
   13344:	1001703a 	wrctl	status,r2
  
  return context;
   13348:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1334c:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   13350:	e0bffd17 	ldw	r2,-12(fp)
   13354:	10800283 	ldbu	r2,10(r2)
   13358:	10803fcc 	andi	r2,r2,255
   1335c:	10000326 	beq	r2,zero,1336c <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   13360:	00800044 	movi	r2,1
   13364:	e0bff405 	stb	r2,-48(fp)
   13368:	00000106 	br	13370 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   1336c:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   13370:	e0bffe03 	ldbu	r2,-8(fp)
   13374:	10000326 	beq	r2,zero,13384 <OSQDel+0xec>
   13378:	10800060 	cmpeqi	r2,r2,1
   1337c:	1000301e 	bne	r2,zero,13440 <OSQDel+0x1a8>
   13380:	00005506 	br	134d8 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   13384:	e0bff403 	ldbu	r2,-48(fp)
   13388:	10001e1e 	bne	r2,zero,13404 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   1338c:	e0bffd17 	ldw	r2,-12(fp)
   13390:	00c00fc4 	movi	r3,63
   13394:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   13398:	e0bffd17 	ldw	r2,-12(fp)
   1339c:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   133a0:	e0bffd17 	ldw	r2,-12(fp)
   133a4:	10800117 	ldw	r2,4(r2)
   133a8:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   133ac:	d0e84317 	ldw	r3,-24308(gp)
   133b0:	e0bff817 	ldw	r2,-32(fp)
   133b4:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   133b8:	e0bff817 	ldw	r2,-32(fp)
   133bc:	d0a84315 	stw	r2,-24308(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   133c0:	e0bffd17 	ldw	r2,-12(fp)
   133c4:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   133c8:	d0e84517 	ldw	r3,-24300(gp)
   133cc:	e0bffd17 	ldw	r2,-12(fp)
   133d0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   133d4:	e0bffd17 	ldw	r2,-12(fp)
   133d8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   133dc:	e0bffd17 	ldw	r2,-12(fp)
   133e0:	d0a84515 	stw	r2,-24300(gp)
   133e4:	e0bff617 	ldw	r2,-40(fp)
   133e8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   133ec:	e0bff717 	ldw	r2,-36(fp)
   133f0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   133f4:	e0bfff17 	ldw	r2,-4(fp)
   133f8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   133fc:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   13400:	00003f06 	br	13500 <OSQDel+0x268>
   13404:	e0bff617 	ldw	r2,-40(fp)
   13408:	e0bff915 	stw	r2,-28(fp)
   1340c:	e0bff917 	ldw	r2,-28(fp)
   13410:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   13414:	e0bfff17 	ldw	r2,-4(fp)
   13418:	00c01244 	movi	r3,73
   1341c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   13420:	e0bffd17 	ldw	r2,-12(fp)
   13424:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   13428:	00003506 	br	13500 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   1342c:	000f883a 	mov	r7,zero
   13430:	01800104 	movi	r6,4
   13434:	000b883a 	mov	r5,zero
   13438:	e13ffd17 	ldw	r4,-12(fp)
   1343c:	000fe840 	call	fe84 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   13440:	e0bffd17 	ldw	r2,-12(fp)
   13444:	10800283 	ldbu	r2,10(r2)
   13448:	10803fcc 	andi	r2,r2,255
   1344c:	103ff71e 	bne	r2,zero,1342c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701342c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   13450:	e0bffd17 	ldw	r2,-12(fp)
   13454:	00c00fc4 	movi	r3,63
   13458:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   1345c:	e0bffd17 	ldw	r2,-12(fp)
   13460:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   13464:	e0bffd17 	ldw	r2,-12(fp)
   13468:	10800117 	ldw	r2,4(r2)
   1346c:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   13470:	d0e84317 	ldw	r3,-24308(gp)
   13474:	e0bff817 	ldw	r2,-32(fp)
   13478:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   1347c:	e0bff817 	ldw	r2,-32(fp)
   13480:	d0a84315 	stw	r2,-24308(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   13484:	e0bffd17 	ldw	r2,-12(fp)
   13488:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   1348c:	d0e84517 	ldw	r3,-24300(gp)
   13490:	e0bffd17 	ldw	r2,-12(fp)
   13494:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   13498:	e0bffd17 	ldw	r2,-12(fp)
   1349c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   134a0:	e0bffd17 	ldw	r2,-12(fp)
   134a4:	d0a84515 	stw	r2,-24300(gp)
   134a8:	e0bff617 	ldw	r2,-40(fp)
   134ac:	e0bffa15 	stw	r2,-24(fp)
   134b0:	e0bffa17 	ldw	r2,-24(fp)
   134b4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   134b8:	e0bff403 	ldbu	r2,-48(fp)
   134bc:	10800058 	cmpnei	r2,r2,1
   134c0:	1000011e 	bne	r2,zero,134c8 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   134c4:	00108d00 	call	108d0 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   134c8:	e0bfff17 	ldw	r2,-4(fp)
   134cc:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   134d0:	e03ff515 	stw	zero,-44(fp)
             break;
   134d4:	00000a06 	br	13500 <OSQDel+0x268>
   134d8:	e0bff617 	ldw	r2,-40(fp)
   134dc:	e0bffb15 	stw	r2,-20(fp)
   134e0:	e0bffb17 	ldw	r2,-20(fp)
   134e4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   134e8:	e0bfff17 	ldw	r2,-4(fp)
   134ec:	00c001c4 	movi	r3,7
   134f0:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   134f4:	e0bffd17 	ldw	r2,-12(fp)
   134f8:	e0bff515 	stw	r2,-44(fp)
             break;
   134fc:	0001883a 	nop
    }
    return (pevent_return);
   13500:	e0bff517 	ldw	r2,-44(fp)
}
   13504:	e037883a 	mov	sp,fp
   13508:	dfc00117 	ldw	ra,4(sp)
   1350c:	df000017 	ldw	fp,0(sp)
   13510:	dec00204 	addi	sp,sp,8
   13514:	f800283a 	ret

00013518 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   13518:	defffa04 	addi	sp,sp,-24
   1351c:	df000515 	stw	fp,20(sp)
   13520:	df000504 	addi	fp,sp,20
   13524:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13528:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1352c:	e0bfff17 	ldw	r2,-4(fp)
   13530:	1000021e 	bne	r2,zero,1353c <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   13534:	00800104 	movi	r2,4
   13538:	00002106 	br	135c0 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   1353c:	e0bfff17 	ldw	r2,-4(fp)
   13540:	10800003 	ldbu	r2,0(r2)
   13544:	10803fcc 	andi	r2,r2,255
   13548:	108000a0 	cmpeqi	r2,r2,2
   1354c:	1000021e 	bne	r2,zero,13558 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   13550:	00800044 	movi	r2,1
   13554:	00001a06 	br	135c0 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13558:	0005303a 	rdctl	r2,status
   1355c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13560:	e0fffd17 	ldw	r3,-12(fp)
   13564:	00bfff84 	movi	r2,-2
   13568:	1884703a 	and	r2,r3,r2
   1356c:	1001703a 	wrctl	status,r2
  
  return context;
   13570:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13574:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   13578:	e0bfff17 	ldw	r2,-4(fp)
   1357c:	10800117 	ldw	r2,4(r2)
   13580:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   13584:	e0bffc17 	ldw	r2,-16(fp)
   13588:	10c00117 	ldw	r3,4(r2)
   1358c:	e0bffc17 	ldw	r2,-16(fp)
   13590:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   13594:	e0bffc17 	ldw	r2,-16(fp)
   13598:	10c00117 	ldw	r3,4(r2)
   1359c:	e0bffc17 	ldw	r2,-16(fp)
   135a0:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   135a4:	e0bffc17 	ldw	r2,-16(fp)
   135a8:	1000058d 	sth	zero,22(r2)
   135ac:	e0bffb17 	ldw	r2,-20(fp)
   135b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   135b4:	e0bffe17 	ldw	r2,-8(fp)
   135b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   135bc:	0005883a 	mov	r2,zero
}
   135c0:	e037883a 	mov	sp,fp
   135c4:	df000017 	ldw	fp,0(sp)
   135c8:	dec00104 	addi	sp,sp,4
   135cc:	f800283a 	ret

000135d0 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   135d0:	defff304 	addi	sp,sp,-52
   135d4:	dfc00c15 	stw	ra,48(sp)
   135d8:	df000b15 	stw	fp,44(sp)
   135dc:	df000b04 	addi	fp,sp,44
   135e0:	e13ffd15 	stw	r4,-12(fp)
   135e4:	2805883a 	mov	r2,r5
   135e8:	e1bfff15 	stw	r6,-4(fp)
   135ec:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   135f0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   135f4:	e0bfff17 	ldw	r2,-4(fp)
   135f8:	1000021e 	bne	r2,zero,13604 <OSQPend+0x34>
        return ((void *)0);
   135fc:	0005883a 	mov	r2,zero
   13600:	00009106 	br	13848 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   13604:	e0bffd17 	ldw	r2,-12(fp)
   13608:	1000051e 	bne	r2,zero,13620 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1360c:	e0bfff17 	ldw	r2,-4(fp)
   13610:	00c00104 	movi	r3,4
   13614:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   13618:	0005883a 	mov	r2,zero
   1361c:	00008a06 	br	13848 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   13620:	e0bffd17 	ldw	r2,-12(fp)
   13624:	10800003 	ldbu	r2,0(r2)
   13628:	10803fcc 	andi	r2,r2,255
   1362c:	108000a0 	cmpeqi	r2,r2,2
   13630:	1000051e 	bne	r2,zero,13648 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   13634:	e0bfff17 	ldw	r2,-4(fp)
   13638:	00c00044 	movi	r3,1
   1363c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   13640:	0005883a 	mov	r2,zero
   13644:	00008006 	br	13848 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   13648:	d0a84603 	ldbu	r2,-24296(gp)
   1364c:	10803fcc 	andi	r2,r2,255
   13650:	10000526 	beq	r2,zero,13668 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   13654:	e0bfff17 	ldw	r2,-4(fp)
   13658:	00c00084 	movi	r3,2
   1365c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   13660:	0005883a 	mov	r2,zero
   13664:	00007806 	br	13848 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   13668:	d0a83803 	ldbu	r2,-24352(gp)
   1366c:	10803fcc 	andi	r2,r2,255
   13670:	10000526 	beq	r2,zero,13688 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   13674:	e0bfff17 	ldw	r2,-4(fp)
   13678:	00c00344 	movi	r3,13
   1367c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   13680:	0005883a 	mov	r2,zero
   13684:	00007006 	br	13848 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13688:	0005303a 	rdctl	r2,status
   1368c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13690:	e0fffc17 	ldw	r3,-16(fp)
   13694:	00bfff84 	movi	r2,-2
   13698:	1884703a 	and	r2,r3,r2
   1369c:	1001703a 	wrctl	status,r2
  
  return context;
   136a0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   136a4:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   136a8:	e0bffd17 	ldw	r2,-12(fp)
   136ac:	10800117 	ldw	r2,4(r2)
   136b0:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   136b4:	e0bff817 	ldw	r2,-32(fp)
   136b8:	1080058b 	ldhu	r2,22(r2)
   136bc:	10bfffcc 	andi	r2,r2,65535
   136c0:	10001e26 	beq	r2,zero,1373c <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   136c4:	e0bff817 	ldw	r2,-32(fp)
   136c8:	10800417 	ldw	r2,16(r2)
   136cc:	11000104 	addi	r4,r2,4
   136d0:	e0fff817 	ldw	r3,-32(fp)
   136d4:	19000415 	stw	r4,16(r3)
   136d8:	10800017 	ldw	r2,0(r2)
   136dc:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   136e0:	e0bff817 	ldw	r2,-32(fp)
   136e4:	1080058b 	ldhu	r2,22(r2)
   136e8:	10bfffc4 	addi	r2,r2,-1
   136ec:	1007883a 	mov	r3,r2
   136f0:	e0bff817 	ldw	r2,-32(fp)
   136f4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   136f8:	e0bff817 	ldw	r2,-32(fp)
   136fc:	10c00417 	ldw	r3,16(r2)
   13700:	e0bff817 	ldw	r2,-32(fp)
   13704:	10800217 	ldw	r2,8(r2)
   13708:	1880041e 	bne	r3,r2,1371c <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
   1370c:	e0bff817 	ldw	r2,-32(fp)
   13710:	10c00117 	ldw	r3,4(r2)
   13714:	e0bff817 	ldw	r2,-32(fp)
   13718:	10c00415 	stw	r3,16(r2)
   1371c:	e0bff617 	ldw	r2,-40(fp)
   13720:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13724:	e0bff717 	ldw	r2,-36(fp)
   13728:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   1372c:	e0bfff17 	ldw	r2,-4(fp)
   13730:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   13734:	e0bff517 	ldw	r2,-44(fp)
   13738:	00004306 	br	13848 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   1373c:	d0a84717 	ldw	r2,-24292(gp)
   13740:	d0e84717 	ldw	r3,-24292(gp)
   13744:	18c00c03 	ldbu	r3,48(r3)
   13748:	18c00114 	ori	r3,r3,4
   1374c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   13750:	d0a84717 	ldw	r2,-24292(gp)
   13754:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   13758:	d0a84717 	ldw	r2,-24292(gp)
   1375c:	e0fffe0b 	ldhu	r3,-8(fp)
   13760:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   13764:	e13ffd17 	ldw	r4,-12(fp)
   13768:	001001c0 	call	1001c <OS_EventTaskWait>
   1376c:	e0bff617 	ldw	r2,-40(fp)
   13770:	e0bffb15 	stw	r2,-20(fp)
   13774:	e0bffb17 	ldw	r2,-20(fp)
   13778:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   1377c:	00108d00 	call	108d0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13780:	0005303a 	rdctl	r2,status
   13784:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13788:	e0fff917 	ldw	r3,-28(fp)
   1378c:	00bfff84 	movi	r2,-2
   13790:	1884703a 	and	r2,r3,r2
   13794:	1001703a 	wrctl	status,r2
  
  return context;
   13798:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   1379c:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   137a0:	d0a84717 	ldw	r2,-24292(gp)
   137a4:	10800c43 	ldbu	r2,49(r2)
   137a8:	10803fcc 	andi	r2,r2,255
   137ac:	10000326 	beq	r2,zero,137bc <OSQPend+0x1ec>
   137b0:	108000a0 	cmpeqi	r2,r2,2
   137b4:	1000071e 	bne	r2,zero,137d4 <OSQPend+0x204>
   137b8:	00000b06 	br	137e8 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   137bc:	d0a84717 	ldw	r2,-24292(gp)
   137c0:	10800917 	ldw	r2,36(r2)
   137c4:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   137c8:	e0bfff17 	ldw	r2,-4(fp)
   137cc:	10000005 	stb	zero,0(r2)
             break;
   137d0:	00000e06 	br	1380c <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   137d4:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   137d8:	e0bfff17 	ldw	r2,-4(fp)
   137dc:	00c00384 	movi	r3,14
   137e0:	10c00005 	stb	r3,0(r2)
             break;
   137e4:	00000906 	br	1380c <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   137e8:	d0a84717 	ldw	r2,-24292(gp)
   137ec:	e17ffd17 	ldw	r5,-12(fp)
   137f0:	1009883a 	mov	r4,r2
   137f4:	001027c0 	call	1027c <OS_EventTaskRemove>
             pmsg = (void *)0;
   137f8:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   137fc:	e0bfff17 	ldw	r2,-4(fp)
   13800:	00c00284 	movi	r3,10
   13804:	10c00005 	stb	r3,0(r2)
             break;
   13808:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   1380c:	d0a84717 	ldw	r2,-24292(gp)
   13810:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   13814:	d0a84717 	ldw	r2,-24292(gp)
   13818:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   1381c:	d0a84717 	ldw	r2,-24292(gp)
   13820:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   13824:	d0a84717 	ldw	r2,-24292(gp)
   13828:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   1382c:	d0a84717 	ldw	r2,-24292(gp)
   13830:	10000915 	stw	zero,36(r2)
   13834:	e0bff617 	ldw	r2,-40(fp)
   13838:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1383c:	e0bffa17 	ldw	r2,-24(fp)
   13840:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   13844:	e0bff517 	ldw	r2,-44(fp)
}
   13848:	e037883a 	mov	sp,fp
   1384c:	dfc00117 	ldw	ra,4(sp)
   13850:	df000017 	ldw	fp,0(sp)
   13854:	dec00204 	addi	sp,sp,8
   13858:	f800283a 	ret

0001385c <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1385c:	defff604 	addi	sp,sp,-40
   13860:	dfc00915 	stw	ra,36(sp)
   13864:	df000815 	stw	fp,32(sp)
   13868:	df000804 	addi	fp,sp,32
   1386c:	e13ffd15 	stw	r4,-12(fp)
   13870:	2805883a 	mov	r2,r5
   13874:	e1bfff15 	stw	r6,-4(fp)
   13878:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1387c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   13880:	e0bfff17 	ldw	r2,-4(fp)
   13884:	1000021e 	bne	r2,zero,13890 <OSQPendAbort+0x34>
        return (0);
   13888:	0005883a 	mov	r2,zero
   1388c:	00004906 	br	139b4 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   13890:	e0bffd17 	ldw	r2,-12(fp)
   13894:	1000051e 	bne	r2,zero,138ac <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   13898:	e0bfff17 	ldw	r2,-4(fp)
   1389c:	00c00104 	movi	r3,4
   138a0:	10c00005 	stb	r3,0(r2)
        return (0);
   138a4:	0005883a 	mov	r2,zero
   138a8:	00004206 	br	139b4 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   138ac:	e0bffd17 	ldw	r2,-12(fp)
   138b0:	10800003 	ldbu	r2,0(r2)
   138b4:	10803fcc 	andi	r2,r2,255
   138b8:	108000a0 	cmpeqi	r2,r2,2
   138bc:	1000051e 	bne	r2,zero,138d4 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   138c0:	e0bfff17 	ldw	r2,-4(fp)
   138c4:	00c00044 	movi	r3,1
   138c8:	10c00005 	stb	r3,0(r2)
        return (0);
   138cc:	0005883a 	mov	r2,zero
   138d0:	00003806 	br	139b4 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   138d4:	0005303a 	rdctl	r2,status
   138d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   138dc:	e0fffc17 	ldw	r3,-16(fp)
   138e0:	00bfff84 	movi	r2,-2
   138e4:	1884703a 	and	r2,r3,r2
   138e8:	1001703a 	wrctl	status,r2
  
  return context;
   138ec:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   138f0:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   138f4:	e0bffd17 	ldw	r2,-12(fp)
   138f8:	10800283 	ldbu	r2,10(r2)
   138fc:	10803fcc 	andi	r2,r2,255
   13900:	10002526 	beq	r2,zero,13998 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   13904:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   13908:	e0bffe03 	ldbu	r2,-8(fp)
   1390c:	10800060 	cmpeqi	r2,r2,1
   13910:	10000e26 	beq	r2,zero,1394c <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   13914:	00000806 	br	13938 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   13918:	01c00084 	movi	r7,2
   1391c:	01800104 	movi	r6,4
   13920:	000b883a 	mov	r5,zero
   13924:	e13ffd17 	ldw	r4,-12(fp)
   13928:	000fe840 	call	fe84 <OS_EventTaskRdy>
                     nbr_tasks++;
   1392c:	e0bff803 	ldbu	r2,-32(fp)
   13930:	10800044 	addi	r2,r2,1
   13934:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   13938:	e0bffd17 	ldw	r2,-12(fp)
   1393c:	10800283 	ldbu	r2,10(r2)
   13940:	10803fcc 	andi	r2,r2,255
   13944:	103ff41e 	bne	r2,zero,13918 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013918>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   13948:	00000906 	br	13970 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   1394c:	01c00084 	movi	r7,2
   13950:	01800104 	movi	r6,4
   13954:	000b883a 	mov	r5,zero
   13958:	e13ffd17 	ldw	r4,-12(fp)
   1395c:	000fe840 	call	fe84 <OS_EventTaskRdy>
                 nbr_tasks++;
   13960:	e0bff803 	ldbu	r2,-32(fp)
   13964:	10800044 	addi	r2,r2,1
   13968:	e0bff805 	stb	r2,-32(fp)
                 break;
   1396c:	0001883a 	nop
   13970:	e0bff917 	ldw	r2,-28(fp)
   13974:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13978:	e0bffa17 	ldw	r2,-24(fp)
   1397c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   13980:	00108d00 	call	108d0 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   13984:	e0bfff17 	ldw	r2,-4(fp)
   13988:	00c00384 	movi	r3,14
   1398c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   13990:	e0bff803 	ldbu	r2,-32(fp)
   13994:	00000706 	br	139b4 <OSQPendAbort+0x158>
   13998:	e0bff917 	ldw	r2,-28(fp)
   1399c:	e0bffb15 	stw	r2,-20(fp)
   139a0:	e0bffb17 	ldw	r2,-20(fp)
   139a4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   139a8:	e0bfff17 	ldw	r2,-4(fp)
   139ac:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   139b0:	0005883a 	mov	r2,zero
}
   139b4:	e037883a 	mov	sp,fp
   139b8:	dfc00117 	ldw	ra,4(sp)
   139bc:	df000017 	ldw	fp,0(sp)
   139c0:	dec00204 	addi	sp,sp,8
   139c4:	f800283a 	ret

000139c8 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   139c8:	defff604 	addi	sp,sp,-40
   139cc:	dfc00915 	stw	ra,36(sp)
   139d0:	df000815 	stw	fp,32(sp)
   139d4:	df000804 	addi	fp,sp,32
   139d8:	e13ffe15 	stw	r4,-8(fp)
   139dc:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   139e0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   139e4:	e0bffe17 	ldw	r2,-8(fp)
   139e8:	1000021e 	bne	r2,zero,139f4 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   139ec:	00800104 	movi	r2,4
   139f0:	00004a06 	br	13b1c <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   139f4:	e0bffe17 	ldw	r2,-8(fp)
   139f8:	10800003 	ldbu	r2,0(r2)
   139fc:	10803fcc 	andi	r2,r2,255
   13a00:	108000a0 	cmpeqi	r2,r2,2
   13a04:	1000021e 	bne	r2,zero,13a10 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   13a08:	00800044 	movi	r2,1
   13a0c:	00004306 	br	13b1c <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13a10:	0005303a 	rdctl	r2,status
   13a14:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13a18:	e0fffd17 	ldw	r3,-12(fp)
   13a1c:	00bfff84 	movi	r2,-2
   13a20:	1884703a 	and	r2,r3,r2
   13a24:	1001703a 	wrctl	status,r2
  
  return context;
   13a28:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   13a2c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   13a30:	e0bffe17 	ldw	r2,-8(fp)
   13a34:	10800283 	ldbu	r2,10(r2)
   13a38:	10803fcc 	andi	r2,r2,255
   13a3c:	10000c26 	beq	r2,zero,13a70 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   13a40:	000f883a 	mov	r7,zero
   13a44:	01800104 	movi	r6,4
   13a48:	e17fff17 	ldw	r5,-4(fp)
   13a4c:	e13ffe17 	ldw	r4,-8(fp)
   13a50:	000fe840 	call	fe84 <OS_EventTaskRdy>
   13a54:	e0bff817 	ldw	r2,-32(fp)
   13a58:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13a5c:	e0bff917 	ldw	r2,-28(fp)
   13a60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   13a64:	00108d00 	call	108d0 <OS_Sched>
        return (OS_ERR_NONE);
   13a68:	0005883a 	mov	r2,zero
   13a6c:	00002b06 	br	13b1c <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   13a70:	e0bffe17 	ldw	r2,-8(fp)
   13a74:	10800117 	ldw	r2,4(r2)
   13a78:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   13a7c:	e0bffb17 	ldw	r2,-20(fp)
   13a80:	10c0058b 	ldhu	r3,22(r2)
   13a84:	e0bffb17 	ldw	r2,-20(fp)
   13a88:	1080050b 	ldhu	r2,20(r2)
   13a8c:	18ffffcc 	andi	r3,r3,65535
   13a90:	10bfffcc 	andi	r2,r2,65535
   13a94:	18800636 	bltu	r3,r2,13ab0 <OSQPost+0xe8>
   13a98:	e0bff817 	ldw	r2,-32(fp)
   13a9c:	e0bffa15 	stw	r2,-24(fp)
   13aa0:	e0bffa17 	ldw	r2,-24(fp)
   13aa4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   13aa8:	00800784 	movi	r2,30
   13aac:	00001b06 	br	13b1c <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   13ab0:	e0bffb17 	ldw	r2,-20(fp)
   13ab4:	10800317 	ldw	r2,12(r2)
   13ab8:	11000104 	addi	r4,r2,4
   13abc:	e0fffb17 	ldw	r3,-20(fp)
   13ac0:	19000315 	stw	r4,12(r3)
   13ac4:	e0ffff17 	ldw	r3,-4(fp)
   13ac8:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   13acc:	e0bffb17 	ldw	r2,-20(fp)
   13ad0:	1080058b 	ldhu	r2,22(r2)
   13ad4:	10800044 	addi	r2,r2,1
   13ad8:	1007883a 	mov	r3,r2
   13adc:	e0bffb17 	ldw	r2,-20(fp)
   13ae0:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   13ae4:	e0bffb17 	ldw	r2,-20(fp)
   13ae8:	10c00317 	ldw	r3,12(r2)
   13aec:	e0bffb17 	ldw	r2,-20(fp)
   13af0:	10800217 	ldw	r2,8(r2)
   13af4:	1880041e 	bne	r3,r2,13b08 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   13af8:	e0bffb17 	ldw	r2,-20(fp)
   13afc:	10c00117 	ldw	r3,4(r2)
   13b00:	e0bffb17 	ldw	r2,-20(fp)
   13b04:	10c00315 	stw	r3,12(r2)
   13b08:	e0bff817 	ldw	r2,-32(fp)
   13b0c:	e0bffc15 	stw	r2,-16(fp)
   13b10:	e0bffc17 	ldw	r2,-16(fp)
   13b14:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   13b18:	0005883a 	mov	r2,zero
}
   13b1c:	e037883a 	mov	sp,fp
   13b20:	dfc00117 	ldw	ra,4(sp)
   13b24:	df000017 	ldw	fp,0(sp)
   13b28:	dec00204 	addi	sp,sp,8
   13b2c:	f800283a 	ret

00013b30 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   13b30:	defff604 	addi	sp,sp,-40
   13b34:	dfc00915 	stw	ra,36(sp)
   13b38:	df000815 	stw	fp,32(sp)
   13b3c:	df000804 	addi	fp,sp,32
   13b40:	e13ffe15 	stw	r4,-8(fp)
   13b44:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13b48:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13b4c:	e0bffe17 	ldw	r2,-8(fp)
   13b50:	1000021e 	bne	r2,zero,13b5c <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   13b54:	00800104 	movi	r2,4
   13b58:	00004c06 	br	13c8c <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   13b5c:	e0bffe17 	ldw	r2,-8(fp)
   13b60:	10800003 	ldbu	r2,0(r2)
   13b64:	10803fcc 	andi	r2,r2,255
   13b68:	108000a0 	cmpeqi	r2,r2,2
   13b6c:	1000021e 	bne	r2,zero,13b78 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   13b70:	00800044 	movi	r2,1
   13b74:	00004506 	br	13c8c <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13b78:	0005303a 	rdctl	r2,status
   13b7c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13b80:	e0fffd17 	ldw	r3,-12(fp)
   13b84:	00bfff84 	movi	r2,-2
   13b88:	1884703a 	and	r2,r3,r2
   13b8c:	1001703a 	wrctl	status,r2
  
  return context;
   13b90:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   13b94:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   13b98:	e0bffe17 	ldw	r2,-8(fp)
   13b9c:	10800283 	ldbu	r2,10(r2)
   13ba0:	10803fcc 	andi	r2,r2,255
   13ba4:	10000c26 	beq	r2,zero,13bd8 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   13ba8:	000f883a 	mov	r7,zero
   13bac:	01800104 	movi	r6,4
   13bb0:	e17fff17 	ldw	r5,-4(fp)
   13bb4:	e13ffe17 	ldw	r4,-8(fp)
   13bb8:	000fe840 	call	fe84 <OS_EventTaskRdy>
   13bbc:	e0bff817 	ldw	r2,-32(fp)
   13bc0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13bc4:	e0bff917 	ldw	r2,-28(fp)
   13bc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   13bcc:	00108d00 	call	108d0 <OS_Sched>
        return (OS_ERR_NONE);
   13bd0:	0005883a 	mov	r2,zero
   13bd4:	00002d06 	br	13c8c <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   13bd8:	e0bffe17 	ldw	r2,-8(fp)
   13bdc:	10800117 	ldw	r2,4(r2)
   13be0:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   13be4:	e0bffb17 	ldw	r2,-20(fp)
   13be8:	10c0058b 	ldhu	r3,22(r2)
   13bec:	e0bffb17 	ldw	r2,-20(fp)
   13bf0:	1080050b 	ldhu	r2,20(r2)
   13bf4:	18ffffcc 	andi	r3,r3,65535
   13bf8:	10bfffcc 	andi	r2,r2,65535
   13bfc:	18800636 	bltu	r3,r2,13c18 <OSQPostFront+0xe8>
   13c00:	e0bff817 	ldw	r2,-32(fp)
   13c04:	e0bffa15 	stw	r2,-24(fp)
   13c08:	e0bffa17 	ldw	r2,-24(fp)
   13c0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   13c10:	00800784 	movi	r2,30
   13c14:	00001d06 	br	13c8c <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   13c18:	e0bffb17 	ldw	r2,-20(fp)
   13c1c:	10c00417 	ldw	r3,16(r2)
   13c20:	e0bffb17 	ldw	r2,-20(fp)
   13c24:	10800117 	ldw	r2,4(r2)
   13c28:	1880041e 	bne	r3,r2,13c3c <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   13c2c:	e0bffb17 	ldw	r2,-20(fp)
   13c30:	10c00217 	ldw	r3,8(r2)
   13c34:	e0bffb17 	ldw	r2,-20(fp)
   13c38:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   13c3c:	e0bffb17 	ldw	r2,-20(fp)
   13c40:	10800417 	ldw	r2,16(r2)
   13c44:	10ffff04 	addi	r3,r2,-4
   13c48:	e0bffb17 	ldw	r2,-20(fp)
   13c4c:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   13c50:	e0bffb17 	ldw	r2,-20(fp)
   13c54:	10800417 	ldw	r2,16(r2)
   13c58:	e0ffff17 	ldw	r3,-4(fp)
   13c5c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   13c60:	e0bffb17 	ldw	r2,-20(fp)
   13c64:	1080058b 	ldhu	r2,22(r2)
   13c68:	10800044 	addi	r2,r2,1
   13c6c:	1007883a 	mov	r3,r2
   13c70:	e0bffb17 	ldw	r2,-20(fp)
   13c74:	10c0058d 	sth	r3,22(r2)
   13c78:	e0bff817 	ldw	r2,-32(fp)
   13c7c:	e0bffc15 	stw	r2,-16(fp)
   13c80:	e0bffc17 	ldw	r2,-16(fp)
   13c84:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   13c88:	0005883a 	mov	r2,zero
}
   13c8c:	e037883a 	mov	sp,fp
   13c90:	dfc00117 	ldw	ra,4(sp)
   13c94:	df000017 	ldw	fp,0(sp)
   13c98:	dec00204 	addi	sp,sp,8
   13c9c:	f800283a 	ret

00013ca0 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   13ca0:	defff504 	addi	sp,sp,-44
   13ca4:	dfc00a15 	stw	ra,40(sp)
   13ca8:	df000915 	stw	fp,36(sp)
   13cac:	df000904 	addi	fp,sp,36
   13cb0:	e13ffd15 	stw	r4,-12(fp)
   13cb4:	e17ffe15 	stw	r5,-8(fp)
   13cb8:	3005883a 	mov	r2,r6
   13cbc:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13cc0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13cc4:	e0bffd17 	ldw	r2,-12(fp)
   13cc8:	1000021e 	bne	r2,zero,13cd4 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   13ccc:	00800104 	movi	r2,4
   13cd0:	00007106 	br	13e98 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   13cd4:	e0bffd17 	ldw	r2,-12(fp)
   13cd8:	10800003 	ldbu	r2,0(r2)
   13cdc:	10803fcc 	andi	r2,r2,255
   13ce0:	108000a0 	cmpeqi	r2,r2,2
   13ce4:	1000021e 	bne	r2,zero,13cf0 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   13ce8:	00800044 	movi	r2,1
   13cec:	00006a06 	br	13e98 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13cf0:	0005303a 	rdctl	r2,status
   13cf4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13cf8:	e0fffc17 	ldw	r3,-16(fp)
   13cfc:	00bfff84 	movi	r2,-2
   13d00:	1884703a 	and	r2,r3,r2
   13d04:	1001703a 	wrctl	status,r2
  
  return context;
   13d08:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13d0c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   13d10:	e0bffd17 	ldw	r2,-12(fp)
   13d14:	10800283 	ldbu	r2,10(r2)
   13d18:	10803fcc 	andi	r2,r2,255
   13d1c:	10001d26 	beq	r2,zero,13d94 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   13d20:	e0bfff03 	ldbu	r2,-4(fp)
   13d24:	1080004c 	andi	r2,r2,1
   13d28:	10000b26 	beq	r2,zero,13d58 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   13d2c:	00000506 	br	13d44 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   13d30:	000f883a 	mov	r7,zero
   13d34:	01800104 	movi	r6,4
   13d38:	e17ffe17 	ldw	r5,-8(fp)
   13d3c:	e13ffd17 	ldw	r4,-12(fp)
   13d40:	000fe840 	call	fe84 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   13d44:	e0bffd17 	ldw	r2,-12(fp)
   13d48:	10800283 	ldbu	r2,10(r2)
   13d4c:	10803fcc 	andi	r2,r2,255
   13d50:	103ff71e 	bne	r2,zero,13d30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013d30>
   13d54:	00000506 	br	13d6c <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   13d58:	000f883a 	mov	r7,zero
   13d5c:	01800104 	movi	r6,4
   13d60:	e17ffe17 	ldw	r5,-8(fp)
   13d64:	e13ffd17 	ldw	r4,-12(fp)
   13d68:	000fe840 	call	fe84 <OS_EventTaskRdy>
   13d6c:	e0bff717 	ldw	r2,-36(fp)
   13d70:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13d74:	e0bff817 	ldw	r2,-32(fp)
   13d78:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   13d7c:	e0bfff03 	ldbu	r2,-4(fp)
   13d80:	1080010c 	andi	r2,r2,4
   13d84:	1000011e 	bne	r2,zero,13d8c <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   13d88:	00108d00 	call	108d0 <OS_Sched>
        }
        return (OS_ERR_NONE);
   13d8c:	0005883a 	mov	r2,zero
   13d90:	00004106 	br	13e98 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   13d94:	e0bffd17 	ldw	r2,-12(fp)
   13d98:	10800117 	ldw	r2,4(r2)
   13d9c:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   13da0:	e0bffa17 	ldw	r2,-24(fp)
   13da4:	10c0058b 	ldhu	r3,22(r2)
   13da8:	e0bffa17 	ldw	r2,-24(fp)
   13dac:	1080050b 	ldhu	r2,20(r2)
   13db0:	18ffffcc 	andi	r3,r3,65535
   13db4:	10bfffcc 	andi	r2,r2,65535
   13db8:	18800636 	bltu	r3,r2,13dd4 <OSQPostOpt+0x134>
   13dbc:	e0bff717 	ldw	r2,-36(fp)
   13dc0:	e0bff915 	stw	r2,-28(fp)
   13dc4:	e0bff917 	ldw	r2,-28(fp)
   13dc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   13dcc:	00800784 	movi	r2,30
   13dd0:	00003106 	br	13e98 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   13dd4:	e0bfff03 	ldbu	r2,-4(fp)
   13dd8:	1080008c 	andi	r2,r2,2
   13ddc:	10001326 	beq	r2,zero,13e2c <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   13de0:	e0bffa17 	ldw	r2,-24(fp)
   13de4:	10c00417 	ldw	r3,16(r2)
   13de8:	e0bffa17 	ldw	r2,-24(fp)
   13dec:	10800117 	ldw	r2,4(r2)
   13df0:	1880041e 	bne	r3,r2,13e04 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   13df4:	e0bffa17 	ldw	r2,-24(fp)
   13df8:	10c00217 	ldw	r3,8(r2)
   13dfc:	e0bffa17 	ldw	r2,-24(fp)
   13e00:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   13e04:	e0bffa17 	ldw	r2,-24(fp)
   13e08:	10800417 	ldw	r2,16(r2)
   13e0c:	10ffff04 	addi	r3,r2,-4
   13e10:	e0bffa17 	ldw	r2,-24(fp)
   13e14:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   13e18:	e0bffa17 	ldw	r2,-24(fp)
   13e1c:	10800417 	ldw	r2,16(r2)
   13e20:	e0fffe17 	ldw	r3,-8(fp)
   13e24:	10c00015 	stw	r3,0(r2)
   13e28:	00001006 	br	13e6c <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   13e2c:	e0bffa17 	ldw	r2,-24(fp)
   13e30:	10800317 	ldw	r2,12(r2)
   13e34:	11000104 	addi	r4,r2,4
   13e38:	e0fffa17 	ldw	r3,-24(fp)
   13e3c:	19000315 	stw	r4,12(r3)
   13e40:	e0fffe17 	ldw	r3,-8(fp)
   13e44:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   13e48:	e0bffa17 	ldw	r2,-24(fp)
   13e4c:	10c00317 	ldw	r3,12(r2)
   13e50:	e0bffa17 	ldw	r2,-24(fp)
   13e54:	10800217 	ldw	r2,8(r2)
   13e58:	1880041e 	bne	r3,r2,13e6c <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   13e5c:	e0bffa17 	ldw	r2,-24(fp)
   13e60:	10c00117 	ldw	r3,4(r2)
   13e64:	e0bffa17 	ldw	r2,-24(fp)
   13e68:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   13e6c:	e0bffa17 	ldw	r2,-24(fp)
   13e70:	1080058b 	ldhu	r2,22(r2)
   13e74:	10800044 	addi	r2,r2,1
   13e78:	1007883a 	mov	r3,r2
   13e7c:	e0bffa17 	ldw	r2,-24(fp)
   13e80:	10c0058d 	sth	r3,22(r2)
   13e84:	e0bff717 	ldw	r2,-36(fp)
   13e88:	e0bffb15 	stw	r2,-20(fp)
   13e8c:	e0bffb17 	ldw	r2,-20(fp)
   13e90:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   13e94:	0005883a 	mov	r2,zero
}
   13e98:	e037883a 	mov	sp,fp
   13e9c:	dfc00117 	ldw	ra,4(sp)
   13ea0:	df000017 	ldw	fp,0(sp)
   13ea4:	dec00204 	addi	sp,sp,8
   13ea8:	f800283a 	ret

00013eac <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   13eac:	defff604 	addi	sp,sp,-40
   13eb0:	df000915 	stw	fp,36(sp)
   13eb4:	df000904 	addi	fp,sp,36
   13eb8:	e13ffe15 	stw	r4,-8(fp)
   13ebc:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   13ec0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   13ec4:	e0bffe17 	ldw	r2,-8(fp)
   13ec8:	1000021e 	bne	r2,zero,13ed4 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   13ecc:	00800104 	movi	r2,4
   13ed0:	00004906 	br	13ff8 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   13ed4:	e0bfff17 	ldw	r2,-4(fp)
   13ed8:	1000021e 	bne	r2,zero,13ee4 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   13edc:	00800244 	movi	r2,9
   13ee0:	00004506 	br	13ff8 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   13ee4:	e0bffe17 	ldw	r2,-8(fp)
   13ee8:	10800003 	ldbu	r2,0(r2)
   13eec:	10803fcc 	andi	r2,r2,255
   13ef0:	108000a0 	cmpeqi	r2,r2,2
   13ef4:	1000021e 	bne	r2,zero,13f00 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   13ef8:	00800044 	movi	r2,1
   13efc:	00003e06 	br	13ff8 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13f00:	0005303a 	rdctl	r2,status
   13f04:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13f08:	e0fffd17 	ldw	r3,-12(fp)
   13f0c:	00bfff84 	movi	r2,-2
   13f10:	1884703a 	and	r2,r3,r2
   13f14:	1001703a 	wrctl	status,r2
  
  return context;
   13f18:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   13f1c:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   13f20:	e0bffe17 	ldw	r2,-8(fp)
   13f24:	10c00283 	ldbu	r3,10(r2)
   13f28:	e0bfff17 	ldw	r2,-4(fp)
   13f2c:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   13f30:	e0bffe17 	ldw	r2,-8(fp)
   13f34:	108002c4 	addi	r2,r2,11
   13f38:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   13f3c:	e0bfff17 	ldw	r2,-4(fp)
   13f40:	10800204 	addi	r2,r2,8
   13f44:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13f48:	e03ff705 	stb	zero,-36(fp)
   13f4c:	00000b06 	br	13f7c <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   13f50:	e0bff917 	ldw	r2,-28(fp)
   13f54:	10c00044 	addi	r3,r2,1
   13f58:	e0fff915 	stw	r3,-28(fp)
   13f5c:	e0fff817 	ldw	r3,-32(fp)
   13f60:	19000044 	addi	r4,r3,1
   13f64:	e13ff815 	stw	r4,-32(fp)
   13f68:	18c00003 	ldbu	r3,0(r3)
   13f6c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13f70:	e0bff703 	ldbu	r2,-36(fp)
   13f74:	10800044 	addi	r2,r2,1
   13f78:	e0bff705 	stb	r2,-36(fp)
   13f7c:	e0bff703 	ldbu	r2,-36(fp)
   13f80:	108000f0 	cmpltui	r2,r2,3
   13f84:	103ff21e 	bne	r2,zero,13f50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013f50>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   13f88:	e0bffe17 	ldw	r2,-8(fp)
   13f8c:	10800117 	ldw	r2,4(r2)
   13f90:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   13f94:	e0bffc17 	ldw	r2,-16(fp)
   13f98:	1080058b 	ldhu	r2,22(r2)
   13f9c:	10bfffcc 	andi	r2,r2,65535
   13fa0:	10000626 	beq	r2,zero,13fbc <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   13fa4:	e0bffc17 	ldw	r2,-16(fp)
   13fa8:	10800417 	ldw	r2,16(r2)
   13fac:	10c00017 	ldw	r3,0(r2)
   13fb0:	e0bfff17 	ldw	r2,-4(fp)
   13fb4:	10c00015 	stw	r3,0(r2)
   13fb8:	00000206 	br	13fc4 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   13fbc:	e0bfff17 	ldw	r2,-4(fp)
   13fc0:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   13fc4:	e0bffc17 	ldw	r2,-16(fp)
   13fc8:	10c0058b 	ldhu	r3,22(r2)
   13fcc:	e0bfff17 	ldw	r2,-4(fp)
   13fd0:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   13fd4:	e0bffc17 	ldw	r2,-16(fp)
   13fd8:	10c0050b 	ldhu	r3,20(r2)
   13fdc:	e0bfff17 	ldw	r2,-4(fp)
   13fe0:	10c0018d 	sth	r3,6(r2)
   13fe4:	e0bffa17 	ldw	r2,-24(fp)
   13fe8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13fec:	e0bffb17 	ldw	r2,-20(fp)
   13ff0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   13ff4:	0005883a 	mov	r2,zero
}
   13ff8:	e037883a 	mov	sp,fp
   13ffc:	df000017 	ldw	fp,0(sp)
   14000:	dec00104 	addi	sp,sp,4
   14004:	f800283a 	ret

00014008 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   14008:	defffb04 	addi	sp,sp,-20
   1400c:	dfc00415 	stw	ra,16(sp)
   14010:	df000315 	stw	fp,12(sp)
   14014:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   14018:	01407804 	movi	r5,480
   1401c:	010000f4 	movhi	r4,3
   14020:	2102dd04 	addi	r4,r4,2932
   14024:	00108140 	call	10814 <OS_MemClr>
    pq1 = &OSQTbl[0];
   14028:	008000f4 	movhi	r2,3
   1402c:	1082dd04 	addi	r2,r2,2932
   14030:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   14034:	008000f4 	movhi	r2,3
   14038:	1082e304 	addi	r2,r2,2956
   1403c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   14040:	e03ffd0d 	sth	zero,-12(fp)
   14044:	00000c06 	br	14078 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   14048:	e0bffe17 	ldw	r2,-8(fp)
   1404c:	e0ffff17 	ldw	r3,-4(fp)
   14050:	10c00015 	stw	r3,0(r2)
        pq1++;
   14054:	e0bffe17 	ldw	r2,-8(fp)
   14058:	10800604 	addi	r2,r2,24
   1405c:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   14060:	e0bfff17 	ldw	r2,-4(fp)
   14064:	10800604 	addi	r2,r2,24
   14068:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   1406c:	e0bffd0b 	ldhu	r2,-12(fp)
   14070:	10800044 	addi	r2,r2,1
   14074:	e0bffd0d 	sth	r2,-12(fp)
   14078:	e0bffd0b 	ldhu	r2,-12(fp)
   1407c:	108004f0 	cmpltui	r2,r2,19
   14080:	103ff11e 	bne	r2,zero,14048 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014048>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   14084:	e0bffe17 	ldw	r2,-8(fp)
   14088:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   1408c:	008000f4 	movhi	r2,3
   14090:	1082dd04 	addi	r2,r2,2932
   14094:	d0a84315 	stw	r2,-24308(gp)
#endif
}
   14098:	0001883a 	nop
   1409c:	e037883a 	mov	sp,fp
   140a0:	dfc00117 	ldw	ra,4(sp)
   140a4:	df000017 	ldw	fp,0(sp)
   140a8:	dec00204 	addi	sp,sp,8
   140ac:	f800283a 	ret

000140b0 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   140b0:	defffa04 	addi	sp,sp,-24
   140b4:	df000515 	stw	fp,20(sp)
   140b8:	df000504 	addi	fp,sp,20
   140bc:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   140c0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   140c4:	e0bfff17 	ldw	r2,-4(fp)
   140c8:	1000021e 	bne	r2,zero,140d4 <OSSemAccept+0x24>
        return (0);
   140cc:	0005883a 	mov	r2,zero
   140d0:	00001f06 	br	14150 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   140d4:	e0bfff17 	ldw	r2,-4(fp)
   140d8:	10800003 	ldbu	r2,0(r2)
   140dc:	10803fcc 	andi	r2,r2,255
   140e0:	108000e0 	cmpeqi	r2,r2,3
   140e4:	1000021e 	bne	r2,zero,140f0 <OSSemAccept+0x40>
        return (0);
   140e8:	0005883a 	mov	r2,zero
   140ec:	00001806 	br	14150 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   140f0:	0005303a 	rdctl	r2,status
   140f4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   140f8:	e0fffe17 	ldw	r3,-8(fp)
   140fc:	00bfff84 	movi	r2,-2
   14100:	1884703a 	and	r2,r3,r2
   14104:	1001703a 	wrctl	status,r2
  
  return context;
   14108:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   1410c:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   14110:	e0bfff17 	ldw	r2,-4(fp)
   14114:	1080020b 	ldhu	r2,8(r2)
   14118:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   1411c:	e0bffd0b 	ldhu	r2,-12(fp)
   14120:	10000626 	beq	r2,zero,1413c <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   14124:	e0bfff17 	ldw	r2,-4(fp)
   14128:	1080020b 	ldhu	r2,8(r2)
   1412c:	10bfffc4 	addi	r2,r2,-1
   14130:	1007883a 	mov	r3,r2
   14134:	e0bfff17 	ldw	r2,-4(fp)
   14138:	10c0020d 	sth	r3,8(r2)
   1413c:	e0bffb17 	ldw	r2,-20(fp)
   14140:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14144:	e0bffc17 	ldw	r2,-16(fp)
   14148:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   1414c:	e0bffd0b 	ldhu	r2,-12(fp)
}
   14150:	e037883a 	mov	sp,fp
   14154:	df000017 	ldw	fp,0(sp)
   14158:	dec00104 	addi	sp,sp,4
   1415c:	f800283a 	ret

00014160 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   14160:	defff904 	addi	sp,sp,-28
   14164:	dfc00615 	stw	ra,24(sp)
   14168:	df000515 	stw	fp,20(sp)
   1416c:	df000504 	addi	fp,sp,20
   14170:	2005883a 	mov	r2,r4
   14174:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   14178:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1417c:	d0a84603 	ldbu	r2,-24296(gp)
   14180:	10803fcc 	andi	r2,r2,255
   14184:	10000226 	beq	r2,zero,14190 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   14188:	0005883a 	mov	r2,zero
   1418c:	00002506 	br	14224 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14190:	0005303a 	rdctl	r2,status
   14194:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14198:	e0fffe17 	ldw	r3,-8(fp)
   1419c:	00bfff84 	movi	r2,-2
   141a0:	1884703a 	and	r2,r3,r2
   141a4:	1001703a 	wrctl	status,r2
  
  return context;
   141a8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   141ac:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   141b0:	d0a84517 	ldw	r2,-24300(gp)
   141b4:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   141b8:	d0a84517 	ldw	r2,-24300(gp)
   141bc:	10000326 	beq	r2,zero,141cc <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   141c0:	d0a84517 	ldw	r2,-24300(gp)
   141c4:	10800117 	ldw	r2,4(r2)
   141c8:	d0a84515 	stw	r2,-24300(gp)
   141cc:	e0bffb17 	ldw	r2,-20(fp)
   141d0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   141d4:	e0bffc17 	ldw	r2,-16(fp)
   141d8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   141dc:	e0bffd17 	ldw	r2,-12(fp)
   141e0:	10000f26 	beq	r2,zero,14220 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   141e4:	e0bffd17 	ldw	r2,-12(fp)
   141e8:	00c000c4 	movi	r3,3
   141ec:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   141f0:	e0bffd17 	ldw	r2,-12(fp)
   141f4:	e0ffff0b 	ldhu	r3,-4(fp)
   141f8:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   141fc:	e0bffd17 	ldw	r2,-12(fp)
   14200:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   14204:	e0bffd17 	ldw	r2,-12(fp)
   14208:	00c00fc4 	movi	r3,63
   1420c:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   14210:	e0bffd17 	ldw	r2,-12(fp)
   14214:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   14218:	e13ffd17 	ldw	r4,-12(fp)
   1421c:	00104340 	call	10434 <OS_EventWaitListInit>
    }
    return (pevent);
   14220:	e0bffd17 	ldw	r2,-12(fp)
}
   14224:	e037883a 	mov	sp,fp
   14228:	dfc00117 	ldw	ra,4(sp)
   1422c:	df000017 	ldw	fp,0(sp)
   14230:	dec00204 	addi	sp,sp,8
   14234:	f800283a 	ret

00014238 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   14238:	defff304 	addi	sp,sp,-52
   1423c:	dfc00c15 	stw	ra,48(sp)
   14240:	df000b15 	stw	fp,44(sp)
   14244:	df000b04 	addi	fp,sp,44
   14248:	e13ffd15 	stw	r4,-12(fp)
   1424c:	2805883a 	mov	r2,r5
   14250:	e1bfff15 	stw	r6,-4(fp)
   14254:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   14258:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1425c:	e0bfff17 	ldw	r2,-4(fp)
   14260:	1000021e 	bne	r2,zero,1426c <OSSemDel+0x34>
        return (pevent);
   14264:	e0bffd17 	ldw	r2,-12(fp)
   14268:	00007e06 	br	14464 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1426c:	e0bffd17 	ldw	r2,-12(fp)
   14270:	1000051e 	bne	r2,zero,14288 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   14274:	e0bfff17 	ldw	r2,-4(fp)
   14278:	00c00104 	movi	r3,4
   1427c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   14280:	e0bffd17 	ldw	r2,-12(fp)
   14284:	00007706 	br	14464 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   14288:	e0bffd17 	ldw	r2,-12(fp)
   1428c:	10800003 	ldbu	r2,0(r2)
   14290:	10803fcc 	andi	r2,r2,255
   14294:	108000e0 	cmpeqi	r2,r2,3
   14298:	1000051e 	bne	r2,zero,142b0 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1429c:	e0bfff17 	ldw	r2,-4(fp)
   142a0:	00c00044 	movi	r3,1
   142a4:	10c00005 	stb	r3,0(r2)
        return (pevent);
   142a8:	e0bffd17 	ldw	r2,-12(fp)
   142ac:	00006d06 	br	14464 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   142b0:	d0a84603 	ldbu	r2,-24296(gp)
   142b4:	10803fcc 	andi	r2,r2,255
   142b8:	10000526 	beq	r2,zero,142d0 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   142bc:	e0bfff17 	ldw	r2,-4(fp)
   142c0:	00c003c4 	movi	r3,15
   142c4:	10c00005 	stb	r3,0(r2)
        return (pevent);
   142c8:	e0bffd17 	ldw	r2,-12(fp)
   142cc:	00006506 	br	14464 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   142d0:	0005303a 	rdctl	r2,status
   142d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   142d8:	e0fffc17 	ldw	r3,-16(fp)
   142dc:	00bfff84 	movi	r2,-2
   142e0:	1884703a 	and	r2,r3,r2
   142e4:	1001703a 	wrctl	status,r2
  
  return context;
   142e8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   142ec:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   142f0:	e0bffd17 	ldw	r2,-12(fp)
   142f4:	10800283 	ldbu	r2,10(r2)
   142f8:	10803fcc 	andi	r2,r2,255
   142fc:	10000326 	beq	r2,zero,1430c <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   14300:	00800044 	movi	r2,1
   14304:	e0bff505 	stb	r2,-44(fp)
   14308:	00000106 	br	14310 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   1430c:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   14310:	e0bffe03 	ldbu	r2,-8(fp)
   14314:	10000326 	beq	r2,zero,14324 <OSSemDel+0xec>
   14318:	10800060 	cmpeqi	r2,r2,1
   1431c:	1000281e 	bne	r2,zero,143c0 <OSSemDel+0x188>
   14320:	00004506 	br	14438 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   14324:	e0bff503 	ldbu	r2,-44(fp)
   14328:	1000161e 	bne	r2,zero,14384 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   1432c:	e0bffd17 	ldw	r2,-12(fp)
   14330:	00c00fc4 	movi	r3,63
   14334:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   14338:	e0bffd17 	ldw	r2,-12(fp)
   1433c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   14340:	e0bffd17 	ldw	r2,-12(fp)
   14344:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   14348:	d0e84517 	ldw	r3,-24300(gp)
   1434c:	e0bffd17 	ldw	r2,-12(fp)
   14350:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   14354:	e0bffd17 	ldw	r2,-12(fp)
   14358:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   1435c:	e0bffd17 	ldw	r2,-12(fp)
   14360:	d0a84515 	stw	r2,-24300(gp)
   14364:	e0bff717 	ldw	r2,-36(fp)
   14368:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1436c:	e0bff817 	ldw	r2,-32(fp)
   14370:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   14374:	e0bfff17 	ldw	r2,-4(fp)
   14378:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   1437c:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   14380:	00003706 	br	14460 <OSSemDel+0x228>
   14384:	e0bff717 	ldw	r2,-36(fp)
   14388:	e0bff915 	stw	r2,-28(fp)
   1438c:	e0bff917 	ldw	r2,-28(fp)
   14390:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   14394:	e0bfff17 	ldw	r2,-4(fp)
   14398:	00c01244 	movi	r3,73
   1439c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   143a0:	e0bffd17 	ldw	r2,-12(fp)
   143a4:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   143a8:	00002d06 	br	14460 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   143ac:	000f883a 	mov	r7,zero
   143b0:	01800044 	movi	r6,1
   143b4:	000b883a 	mov	r5,zero
   143b8:	e13ffd17 	ldw	r4,-12(fp)
   143bc:	000fe840 	call	fe84 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   143c0:	e0bffd17 	ldw	r2,-12(fp)
   143c4:	10800283 	ldbu	r2,10(r2)
   143c8:	10803fcc 	andi	r2,r2,255
   143cc:	103ff71e 	bne	r2,zero,143ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70143ac>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   143d0:	e0bffd17 	ldw	r2,-12(fp)
   143d4:	00c00fc4 	movi	r3,63
   143d8:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   143dc:	e0bffd17 	ldw	r2,-12(fp)
   143e0:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   143e4:	e0bffd17 	ldw	r2,-12(fp)
   143e8:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   143ec:	d0e84517 	ldw	r3,-24300(gp)
   143f0:	e0bffd17 	ldw	r2,-12(fp)
   143f4:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   143f8:	e0bffd17 	ldw	r2,-12(fp)
   143fc:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   14400:	e0bffd17 	ldw	r2,-12(fp)
   14404:	d0a84515 	stw	r2,-24300(gp)
   14408:	e0bff717 	ldw	r2,-36(fp)
   1440c:	e0bffa15 	stw	r2,-24(fp)
   14410:	e0bffa17 	ldw	r2,-24(fp)
   14414:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   14418:	e0bff503 	ldbu	r2,-44(fp)
   1441c:	10800058 	cmpnei	r2,r2,1
   14420:	1000011e 	bne	r2,zero,14428 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   14424:	00108d00 	call	108d0 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   14428:	e0bfff17 	ldw	r2,-4(fp)
   1442c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   14430:	e03ff615 	stw	zero,-40(fp)
             break;
   14434:	00000a06 	br	14460 <OSSemDel+0x228>
   14438:	e0bff717 	ldw	r2,-36(fp)
   1443c:	e0bffb15 	stw	r2,-20(fp)
   14440:	e0bffb17 	ldw	r2,-20(fp)
   14444:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   14448:	e0bfff17 	ldw	r2,-4(fp)
   1444c:	00c001c4 	movi	r3,7
   14450:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   14454:	e0bffd17 	ldw	r2,-12(fp)
   14458:	e0bff615 	stw	r2,-40(fp)
             break;
   1445c:	0001883a 	nop
    }
    return (pevent_return);
   14460:	e0bff617 	ldw	r2,-40(fp)
}
   14464:	e037883a 	mov	sp,fp
   14468:	dfc00117 	ldw	ra,4(sp)
   1446c:	df000017 	ldw	fp,0(sp)
   14470:	dec00204 	addi	sp,sp,8
   14474:	f800283a 	ret

00014478 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   14478:	defff504 	addi	sp,sp,-44
   1447c:	dfc00a15 	stw	ra,40(sp)
   14480:	df000915 	stw	fp,36(sp)
   14484:	df000904 	addi	fp,sp,36
   14488:	e13ffd15 	stw	r4,-12(fp)
   1448c:	2805883a 	mov	r2,r5
   14490:	e1bfff15 	stw	r6,-4(fp)
   14494:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   14498:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1449c:	e0bfff17 	ldw	r2,-4(fp)
   144a0:	10007226 	beq	r2,zero,1466c <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   144a4:	e0bffd17 	ldw	r2,-12(fp)
   144a8:	1000041e 	bne	r2,zero,144bc <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   144ac:	e0bfff17 	ldw	r2,-4(fp)
   144b0:	00c00104 	movi	r3,4
   144b4:	10c00005 	stb	r3,0(r2)
        return;
   144b8:	00006d06 	br	14670 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   144bc:	e0bffd17 	ldw	r2,-12(fp)
   144c0:	10800003 	ldbu	r2,0(r2)
   144c4:	10803fcc 	andi	r2,r2,255
   144c8:	108000e0 	cmpeqi	r2,r2,3
   144cc:	1000041e 	bne	r2,zero,144e0 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   144d0:	e0bfff17 	ldw	r2,-4(fp)
   144d4:	00c00044 	movi	r3,1
   144d8:	10c00005 	stb	r3,0(r2)
        return;
   144dc:	00006406 	br	14670 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   144e0:	d0a84603 	ldbu	r2,-24296(gp)
   144e4:	10803fcc 	andi	r2,r2,255
   144e8:	10000426 	beq	r2,zero,144fc <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   144ec:	e0bfff17 	ldw	r2,-4(fp)
   144f0:	00c00084 	movi	r3,2
   144f4:	10c00005 	stb	r3,0(r2)
        return;
   144f8:	00005d06 	br	14670 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   144fc:	d0a83803 	ldbu	r2,-24352(gp)
   14500:	10803fcc 	andi	r2,r2,255
   14504:	10000426 	beq	r2,zero,14518 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   14508:	e0bfff17 	ldw	r2,-4(fp)
   1450c:	00c00344 	movi	r3,13
   14510:	10c00005 	stb	r3,0(r2)
        return;
   14514:	00005606 	br	14670 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14518:	0005303a 	rdctl	r2,status
   1451c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14520:	e0fffc17 	ldw	r3,-16(fp)
   14524:	00bfff84 	movi	r2,-2
   14528:	1884703a 	and	r2,r3,r2
   1452c:	1001703a 	wrctl	status,r2
  
  return context;
   14530:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14534:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   14538:	e0bffd17 	ldw	r2,-12(fp)
   1453c:	1080020b 	ldhu	r2,8(r2)
   14540:	10bfffcc 	andi	r2,r2,65535
   14544:	10000d26 	beq	r2,zero,1457c <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   14548:	e0bffd17 	ldw	r2,-12(fp)
   1454c:	1080020b 	ldhu	r2,8(r2)
   14550:	10bfffc4 	addi	r2,r2,-1
   14554:	1007883a 	mov	r3,r2
   14558:	e0bffd17 	ldw	r2,-12(fp)
   1455c:	10c0020d 	sth	r3,8(r2)
   14560:	e0bff717 	ldw	r2,-36(fp)
   14564:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14568:	e0bff817 	ldw	r2,-32(fp)
   1456c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   14570:	e0bfff17 	ldw	r2,-4(fp)
   14574:	10000005 	stb	zero,0(r2)
        return;
   14578:	00003d06 	br	14670 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   1457c:	d0a84717 	ldw	r2,-24292(gp)
   14580:	d0e84717 	ldw	r3,-24292(gp)
   14584:	18c00c03 	ldbu	r3,48(r3)
   14588:	18c00054 	ori	r3,r3,1
   1458c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   14590:	d0a84717 	ldw	r2,-24292(gp)
   14594:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   14598:	d0a84717 	ldw	r2,-24292(gp)
   1459c:	e0fffe0b 	ldhu	r3,-8(fp)
   145a0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   145a4:	e13ffd17 	ldw	r4,-12(fp)
   145a8:	001001c0 	call	1001c <OS_EventTaskWait>
   145ac:	e0bff717 	ldw	r2,-36(fp)
   145b0:	e0bffb15 	stw	r2,-20(fp)
   145b4:	e0bffb17 	ldw	r2,-20(fp)
   145b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   145bc:	00108d00 	call	108d0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   145c0:	0005303a 	rdctl	r2,status
   145c4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   145c8:	e0fff917 	ldw	r3,-28(fp)
   145cc:	00bfff84 	movi	r2,-2
   145d0:	1884703a 	and	r2,r3,r2
   145d4:	1001703a 	wrctl	status,r2
  
  return context;
   145d8:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   145dc:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   145e0:	d0a84717 	ldw	r2,-24292(gp)
   145e4:	10800c43 	ldbu	r2,49(r2)
   145e8:	10803fcc 	andi	r2,r2,255
   145ec:	10000326 	beq	r2,zero,145fc <OSSemPend+0x184>
   145f0:	108000a0 	cmpeqi	r2,r2,2
   145f4:	1000041e 	bne	r2,zero,14608 <OSSemPend+0x190>
   145f8:	00000706 	br	14618 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   145fc:	e0bfff17 	ldw	r2,-4(fp)
   14600:	10000005 	stb	zero,0(r2)
             break;
   14604:	00000c06 	br	14638 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   14608:	e0bfff17 	ldw	r2,-4(fp)
   1460c:	00c00384 	movi	r3,14
   14610:	10c00005 	stb	r3,0(r2)
             break;
   14614:	00000806 	br	14638 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   14618:	d0a84717 	ldw	r2,-24292(gp)
   1461c:	e17ffd17 	ldw	r5,-12(fp)
   14620:	1009883a 	mov	r4,r2
   14624:	001027c0 	call	1027c <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   14628:	e0bfff17 	ldw	r2,-4(fp)
   1462c:	00c00284 	movi	r3,10
   14630:	10c00005 	stb	r3,0(r2)
             break;
   14634:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   14638:	d0a84717 	ldw	r2,-24292(gp)
   1463c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   14640:	d0a84717 	ldw	r2,-24292(gp)
   14644:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   14648:	d0a84717 	ldw	r2,-24292(gp)
   1464c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   14650:	d0a84717 	ldw	r2,-24292(gp)
   14654:	10000815 	stw	zero,32(r2)
   14658:	e0bff717 	ldw	r2,-36(fp)
   1465c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14660:	e0bffa17 	ldw	r2,-24(fp)
   14664:	1001703a 	wrctl	status,r2
   14668:	00000106 	br	14670 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   1466c:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
   14670:	e037883a 	mov	sp,fp
   14674:	dfc00117 	ldw	ra,4(sp)
   14678:	df000017 	ldw	fp,0(sp)
   1467c:	dec00204 	addi	sp,sp,8
   14680:	f800283a 	ret

00014684 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   14684:	defff604 	addi	sp,sp,-40
   14688:	dfc00915 	stw	ra,36(sp)
   1468c:	df000815 	stw	fp,32(sp)
   14690:	df000804 	addi	fp,sp,32
   14694:	e13ffd15 	stw	r4,-12(fp)
   14698:	2805883a 	mov	r2,r5
   1469c:	e1bfff15 	stw	r6,-4(fp)
   146a0:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   146a4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   146a8:	e0bfff17 	ldw	r2,-4(fp)
   146ac:	1000021e 	bne	r2,zero,146b8 <OSSemPendAbort+0x34>
        return (0);
   146b0:	0005883a 	mov	r2,zero
   146b4:	00004906 	br	147dc <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   146b8:	e0bffd17 	ldw	r2,-12(fp)
   146bc:	1000051e 	bne	r2,zero,146d4 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   146c0:	e0bfff17 	ldw	r2,-4(fp)
   146c4:	00c00104 	movi	r3,4
   146c8:	10c00005 	stb	r3,0(r2)
        return (0);
   146cc:	0005883a 	mov	r2,zero
   146d0:	00004206 	br	147dc <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   146d4:	e0bffd17 	ldw	r2,-12(fp)
   146d8:	10800003 	ldbu	r2,0(r2)
   146dc:	10803fcc 	andi	r2,r2,255
   146e0:	108000e0 	cmpeqi	r2,r2,3
   146e4:	1000051e 	bne	r2,zero,146fc <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   146e8:	e0bfff17 	ldw	r2,-4(fp)
   146ec:	00c00044 	movi	r3,1
   146f0:	10c00005 	stb	r3,0(r2)
        return (0);
   146f4:	0005883a 	mov	r2,zero
   146f8:	00003806 	br	147dc <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   146fc:	0005303a 	rdctl	r2,status
   14700:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14704:	e0fffc17 	ldw	r3,-16(fp)
   14708:	00bfff84 	movi	r2,-2
   1470c:	1884703a 	and	r2,r3,r2
   14710:	1001703a 	wrctl	status,r2
  
  return context;
   14714:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14718:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   1471c:	e0bffd17 	ldw	r2,-12(fp)
   14720:	10800283 	ldbu	r2,10(r2)
   14724:	10803fcc 	andi	r2,r2,255
   14728:	10002526 	beq	r2,zero,147c0 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   1472c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   14730:	e0bffe03 	ldbu	r2,-8(fp)
   14734:	10800060 	cmpeqi	r2,r2,1
   14738:	10000e26 	beq	r2,zero,14774 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   1473c:	00000806 	br	14760 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   14740:	01c00084 	movi	r7,2
   14744:	01800044 	movi	r6,1
   14748:	000b883a 	mov	r5,zero
   1474c:	e13ffd17 	ldw	r4,-12(fp)
   14750:	000fe840 	call	fe84 <OS_EventTaskRdy>
                     nbr_tasks++;
   14754:	e0bff803 	ldbu	r2,-32(fp)
   14758:	10800044 	addi	r2,r2,1
   1475c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   14760:	e0bffd17 	ldw	r2,-12(fp)
   14764:	10800283 	ldbu	r2,10(r2)
   14768:	10803fcc 	andi	r2,r2,255
   1476c:	103ff41e 	bne	r2,zero,14740 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014740>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   14770:	00000906 	br	14798 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   14774:	01c00084 	movi	r7,2
   14778:	01800044 	movi	r6,1
   1477c:	000b883a 	mov	r5,zero
   14780:	e13ffd17 	ldw	r4,-12(fp)
   14784:	000fe840 	call	fe84 <OS_EventTaskRdy>
                 nbr_tasks++;
   14788:	e0bff803 	ldbu	r2,-32(fp)
   1478c:	10800044 	addi	r2,r2,1
   14790:	e0bff805 	stb	r2,-32(fp)
                 break;
   14794:	0001883a 	nop
   14798:	e0bff917 	ldw	r2,-28(fp)
   1479c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   147a0:	e0bffa17 	ldw	r2,-24(fp)
   147a4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   147a8:	00108d00 	call	108d0 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   147ac:	e0bfff17 	ldw	r2,-4(fp)
   147b0:	00c00384 	movi	r3,14
   147b4:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   147b8:	e0bff803 	ldbu	r2,-32(fp)
   147bc:	00000706 	br	147dc <OSSemPendAbort+0x158>
   147c0:	e0bff917 	ldw	r2,-28(fp)
   147c4:	e0bffb15 	stw	r2,-20(fp)
   147c8:	e0bffb17 	ldw	r2,-20(fp)
   147cc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   147d0:	e0bfff17 	ldw	r2,-4(fp)
   147d4:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   147d8:	0005883a 	mov	r2,zero
}
   147dc:	e037883a 	mov	sp,fp
   147e0:	dfc00117 	ldw	ra,4(sp)
   147e4:	df000017 	ldw	fp,0(sp)
   147e8:	dec00204 	addi	sp,sp,8
   147ec:	f800283a 	ret

000147f0 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   147f0:	defff804 	addi	sp,sp,-32
   147f4:	dfc00715 	stw	ra,28(sp)
   147f8:	df000615 	stw	fp,24(sp)
   147fc:	df000604 	addi	fp,sp,24
   14800:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   14804:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   14808:	e0bfff17 	ldw	r2,-4(fp)
   1480c:	1000021e 	bne	r2,zero,14818 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   14810:	00800104 	movi	r2,4
   14814:	00003506 	br	148ec <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   14818:	e0bfff17 	ldw	r2,-4(fp)
   1481c:	10800003 	ldbu	r2,0(r2)
   14820:	10803fcc 	andi	r2,r2,255
   14824:	108000e0 	cmpeqi	r2,r2,3
   14828:	1000021e 	bne	r2,zero,14834 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   1482c:	00800044 	movi	r2,1
   14830:	00002e06 	br	148ec <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14834:	0005303a 	rdctl	r2,status
   14838:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1483c:	e0fffe17 	ldw	r3,-8(fp)
   14840:	00bfff84 	movi	r2,-2
   14844:	1884703a 	and	r2,r3,r2
   14848:	1001703a 	wrctl	status,r2
  
  return context;
   1484c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   14850:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   14854:	e0bfff17 	ldw	r2,-4(fp)
   14858:	10800283 	ldbu	r2,10(r2)
   1485c:	10803fcc 	andi	r2,r2,255
   14860:	10000c26 	beq	r2,zero,14894 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   14864:	000f883a 	mov	r7,zero
   14868:	01800044 	movi	r6,1
   1486c:	000b883a 	mov	r5,zero
   14870:	e13fff17 	ldw	r4,-4(fp)
   14874:	000fe840 	call	fe84 <OS_EventTaskRdy>
   14878:	e0bffa17 	ldw	r2,-24(fp)
   1487c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14880:	e0bffb17 	ldw	r2,-20(fp)
   14884:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   14888:	00108d00 	call	108d0 <OS_Sched>
        return (OS_ERR_NONE);
   1488c:	0005883a 	mov	r2,zero
   14890:	00001606 	br	148ec <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   14894:	e0bfff17 	ldw	r2,-4(fp)
   14898:	1080020b 	ldhu	r2,8(r2)
   1489c:	10ffffcc 	andi	r3,r2,65535
   148a0:	00bfffd4 	movui	r2,65535
   148a4:	18800c26 	beq	r3,r2,148d8 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   148a8:	e0bfff17 	ldw	r2,-4(fp)
   148ac:	1080020b 	ldhu	r2,8(r2)
   148b0:	10800044 	addi	r2,r2,1
   148b4:	1007883a 	mov	r3,r2
   148b8:	e0bfff17 	ldw	r2,-4(fp)
   148bc:	10c0020d 	sth	r3,8(r2)
   148c0:	e0bffa17 	ldw	r2,-24(fp)
   148c4:	e0bffc15 	stw	r2,-16(fp)
   148c8:	e0bffc17 	ldw	r2,-16(fp)
   148cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   148d0:	0005883a 	mov	r2,zero
   148d4:	00000506 	br	148ec <OSSemPost+0xfc>
   148d8:	e0bffa17 	ldw	r2,-24(fp)
   148dc:	e0bffd15 	stw	r2,-12(fp)
   148e0:	e0bffd17 	ldw	r2,-12(fp)
   148e4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   148e8:	00800c84 	movi	r2,50
}
   148ec:	e037883a 	mov	sp,fp
   148f0:	dfc00117 	ldw	ra,4(sp)
   148f4:	df000017 	ldw	fp,0(sp)
   148f8:	dec00204 	addi	sp,sp,8
   148fc:	f800283a 	ret

00014900 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   14900:	defff704 	addi	sp,sp,-36
   14904:	df000815 	stw	fp,32(sp)
   14908:	df000804 	addi	fp,sp,32
   1490c:	e13ffe15 	stw	r4,-8(fp)
   14910:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   14914:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   14918:	e0bffe17 	ldw	r2,-8(fp)
   1491c:	1000021e 	bne	r2,zero,14928 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   14920:	00800104 	movi	r2,4
   14924:	00003606 	br	14a00 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   14928:	e0bfff17 	ldw	r2,-4(fp)
   1492c:	1000021e 	bne	r2,zero,14938 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   14930:	00800244 	movi	r2,9
   14934:	00003206 	br	14a00 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   14938:	e0bffe17 	ldw	r2,-8(fp)
   1493c:	10800003 	ldbu	r2,0(r2)
   14940:	10803fcc 	andi	r2,r2,255
   14944:	108000e0 	cmpeqi	r2,r2,3
   14948:	1000021e 	bne	r2,zero,14954 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   1494c:	00800044 	movi	r2,1
   14950:	00002b06 	br	14a00 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14954:	0005303a 	rdctl	r2,status
   14958:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1495c:	e0fffd17 	ldw	r3,-12(fp)
   14960:	00bfff84 	movi	r2,-2
   14964:	1884703a 	and	r2,r3,r2
   14968:	1001703a 	wrctl	status,r2
  
  return context;
   1496c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   14970:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   14974:	e0bffe17 	ldw	r2,-8(fp)
   14978:	10c00283 	ldbu	r3,10(r2)
   1497c:	e0bfff17 	ldw	r2,-4(fp)
   14980:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   14984:	e0bffe17 	ldw	r2,-8(fp)
   14988:	108002c4 	addi	r2,r2,11
   1498c:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   14990:	e0bfff17 	ldw	r2,-4(fp)
   14994:	10800084 	addi	r2,r2,2
   14998:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1499c:	e03ffa05 	stb	zero,-24(fp)
   149a0:	00000b06 	br	149d0 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   149a4:	e0bff917 	ldw	r2,-28(fp)
   149a8:	10c00044 	addi	r3,r2,1
   149ac:	e0fff915 	stw	r3,-28(fp)
   149b0:	e0fff817 	ldw	r3,-32(fp)
   149b4:	19000044 	addi	r4,r3,1
   149b8:	e13ff815 	stw	r4,-32(fp)
   149bc:	18c00003 	ldbu	r3,0(r3)
   149c0:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   149c4:	e0bffa03 	ldbu	r2,-24(fp)
   149c8:	10800044 	addi	r2,r2,1
   149cc:	e0bffa05 	stb	r2,-24(fp)
   149d0:	e0bffa03 	ldbu	r2,-24(fp)
   149d4:	108000f0 	cmpltui	r2,r2,3
   149d8:	103ff21e 	bne	r2,zero,149a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70149a4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   149dc:	e0bffe17 	ldw	r2,-8(fp)
   149e0:	10c0020b 	ldhu	r3,8(r2)
   149e4:	e0bfff17 	ldw	r2,-4(fp)
   149e8:	10c0000d 	sth	r3,0(r2)
   149ec:	e0bffb17 	ldw	r2,-20(fp)
   149f0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   149f4:	e0bffc17 	ldw	r2,-16(fp)
   149f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   149fc:	0005883a 	mov	r2,zero
}
   14a00:	e037883a 	mov	sp,fp
   14a04:	df000017 	ldw	fp,0(sp)
   14a08:	dec00104 	addi	sp,sp,4
   14a0c:	f800283a 	ret

00014a10 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   14a10:	defff904 	addi	sp,sp,-28
   14a14:	df000615 	stw	fp,24(sp)
   14a18:	df000604 	addi	fp,sp,24
   14a1c:	e13ffd15 	stw	r4,-12(fp)
   14a20:	2805883a 	mov	r2,r5
   14a24:	e1bfff15 	stw	r6,-4(fp)
   14a28:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   14a2c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   14a30:	e0bfff17 	ldw	r2,-4(fp)
   14a34:	10003126 	beq	r2,zero,14afc <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   14a38:	e0bffd17 	ldw	r2,-12(fp)
   14a3c:	1000041e 	bne	r2,zero,14a50 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   14a40:	e0bfff17 	ldw	r2,-4(fp)
   14a44:	00c00104 	movi	r3,4
   14a48:	10c00005 	stb	r3,0(r2)
        return;
   14a4c:	00002c06 	br	14b00 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   14a50:	e0bffd17 	ldw	r2,-12(fp)
   14a54:	10800003 	ldbu	r2,0(r2)
   14a58:	10803fcc 	andi	r2,r2,255
   14a5c:	108000e0 	cmpeqi	r2,r2,3
   14a60:	1000041e 	bne	r2,zero,14a74 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
   14a64:	e0bfff17 	ldw	r2,-4(fp)
   14a68:	00c00044 	movi	r3,1
   14a6c:	10c00005 	stb	r3,0(r2)
        return;
   14a70:	00002306 	br	14b00 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14a74:	0005303a 	rdctl	r2,status
   14a78:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14a7c:	e0fffc17 	ldw	r3,-16(fp)
   14a80:	00bfff84 	movi	r2,-2
   14a84:	1884703a 	and	r2,r3,r2
   14a88:	1001703a 	wrctl	status,r2
  
  return context;
   14a8c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14a90:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   14a94:	e0bfff17 	ldw	r2,-4(fp)
   14a98:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   14a9c:	e0bffd17 	ldw	r2,-12(fp)
   14aa0:	1080020b 	ldhu	r2,8(r2)
   14aa4:	10bfffcc 	andi	r2,r2,65535
   14aa8:	10000426 	beq	r2,zero,14abc <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   14aac:	e0bffd17 	ldw	r2,-12(fp)
   14ab0:	e0fffe0b 	ldhu	r3,-8(fp)
   14ab4:	10c0020d 	sth	r3,8(r2)
   14ab8:	00000b06 	br	14ae8 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   14abc:	e0bffd17 	ldw	r2,-12(fp)
   14ac0:	10800283 	ldbu	r2,10(r2)
   14ac4:	10803fcc 	andi	r2,r2,255
   14ac8:	1000041e 	bne	r2,zero,14adc <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   14acc:	e0bffd17 	ldw	r2,-12(fp)
   14ad0:	e0fffe0b 	ldhu	r3,-8(fp)
   14ad4:	10c0020d 	sth	r3,8(r2)
   14ad8:	00000306 	br	14ae8 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   14adc:	e0bfff17 	ldw	r2,-4(fp)
   14ae0:	00c01244 	movi	r3,73
   14ae4:	10c00005 	stb	r3,0(r2)
   14ae8:	e0bffa17 	ldw	r2,-24(fp)
   14aec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14af0:	e0bffb17 	ldw	r2,-20(fp)
   14af4:	1001703a 	wrctl	status,r2
   14af8:	00000106 	br	14b00 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   14afc:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
   14b00:	e037883a 	mov	sp,fp
   14b04:	df000017 	ldw	fp,0(sp)
   14b08:	dec00104 	addi	sp,sp,4
   14b0c:	f800283a 	ret

00014b10 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   14b10:	defff104 	addi	sp,sp,-60
   14b14:	dfc00e15 	stw	ra,56(sp)
   14b18:	df000d15 	stw	fp,52(sp)
   14b1c:	df000d04 	addi	fp,sp,52
   14b20:	2007883a 	mov	r3,r4
   14b24:	2805883a 	mov	r2,r5
   14b28:	e0fffe05 	stb	r3,-8(fp)
   14b2c:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   14b30:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   14b34:	e0bffe03 	ldbu	r2,-8(fp)
   14b38:	10800530 	cmpltui	r2,r2,20
   14b3c:	1000051e 	bne	r2,zero,14b54 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   14b40:	e0bffe03 	ldbu	r2,-8(fp)
   14b44:	10803fe0 	cmpeqi	r2,r2,255
   14b48:	1000021e 	bne	r2,zero,14b54 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   14b4c:	00800a84 	movi	r2,42
   14b50:	00012606 	br	14fec <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   14b54:	e0bfff03 	ldbu	r2,-4(fp)
   14b58:	10800530 	cmpltui	r2,r2,20
   14b5c:	1000021e 	bne	r2,zero,14b68 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   14b60:	00800a84 	movi	r2,42
   14b64:	00012106 	br	14fec <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14b68:	0005303a 	rdctl	r2,status
   14b6c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14b70:	e0fffd17 	ldw	r3,-12(fp)
   14b74:	00bfff84 	movi	r2,-2
   14b78:	1884703a 	and	r2,r3,r2
   14b7c:	1001703a 	wrctl	status,r2
  
  return context;
   14b80:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14b84:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   14b88:	e0ffff03 	ldbu	r3,-4(fp)
   14b8c:	008000f4 	movhi	r2,3
   14b90:	10896904 	addi	r2,r2,9636
   14b94:	18c7883a 	add	r3,r3,r3
   14b98:	18c7883a 	add	r3,r3,r3
   14b9c:	10c5883a 	add	r2,r2,r3
   14ba0:	10800017 	ldw	r2,0(r2)
   14ba4:	10000626 	beq	r2,zero,14bc0 <OSTaskChangePrio+0xb0>
   14ba8:	e0bff517 	ldw	r2,-44(fp)
   14bac:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14bb0:	e0bff617 	ldw	r2,-40(fp)
   14bb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   14bb8:	00800a04 	movi	r2,40
   14bbc:	00010b06 	br	14fec <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   14bc0:	e0bffe03 	ldbu	r2,-8(fp)
   14bc4:	10803fd8 	cmpnei	r2,r2,255
   14bc8:	1000031e 	bne	r2,zero,14bd8 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   14bcc:	d0a84717 	ldw	r2,-24292(gp)
   14bd0:	10800c83 	ldbu	r2,50(r2)
   14bd4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   14bd8:	e0fffe03 	ldbu	r3,-8(fp)
   14bdc:	008000f4 	movhi	r2,3
   14be0:	10896904 	addi	r2,r2,9636
   14be4:	18c7883a 	add	r3,r3,r3
   14be8:	18c7883a 	add	r3,r3,r3
   14bec:	10c5883a 	add	r2,r2,r3
   14bf0:	10800017 	ldw	r2,0(r2)
   14bf4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   14bf8:	e0bff817 	ldw	r2,-32(fp)
   14bfc:	1000061e 	bne	r2,zero,14c18 <OSTaskChangePrio+0x108>
   14c00:	e0bff517 	ldw	r2,-44(fp)
   14c04:	e0bff715 	stw	r2,-36(fp)
   14c08:	e0bff717 	ldw	r2,-36(fp)
   14c0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   14c10:	00800a44 	movi	r2,41
   14c14:	0000f506 	br	14fec <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   14c18:	e0bff817 	ldw	r2,-32(fp)
   14c1c:	10800058 	cmpnei	r2,r2,1
   14c20:	1000061e 	bne	r2,zero,14c3c <OSTaskChangePrio+0x12c>
   14c24:	e0bff517 	ldw	r2,-44(fp)
   14c28:	e0bff915 	stw	r2,-28(fp)
   14c2c:	e0bff917 	ldw	r2,-28(fp)
   14c30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   14c34:	008010c4 	movi	r2,67
   14c38:	0000ec06 	br	14fec <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   14c3c:	e0bfff03 	ldbu	r2,-4(fp)
   14c40:	1004d0fa 	srli	r2,r2,3
   14c44:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   14c48:	e0bfff03 	ldbu	r2,-4(fp)
   14c4c:	108001cc 	andi	r2,r2,7
   14c50:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
   14c54:	e0bffb03 	ldbu	r2,-20(fp)
   14c58:	00c00044 	movi	r3,1
   14c5c:	1884983a 	sll	r2,r3,r2
   14c60:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
   14c64:	e0bffb43 	ldbu	r2,-19(fp)
   14c68:	00c00044 	movi	r3,1
   14c6c:	1884983a 	sll	r2,r3,r2
   14c70:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   14c74:	e0fffe03 	ldbu	r3,-8(fp)
   14c78:	008000f4 	movhi	r2,3
   14c7c:	10896904 	addi	r2,r2,9636
   14c80:	18c7883a 	add	r3,r3,r3
   14c84:	18c7883a 	add	r3,r3,r3
   14c88:	10c5883a 	add	r2,r2,r3
   14c8c:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   14c90:	e0ffff03 	ldbu	r3,-4(fp)
   14c94:	008000f4 	movhi	r2,3
   14c98:	10896904 	addi	r2,r2,9636
   14c9c:	18c7883a 	add	r3,r3,r3
   14ca0:	18c7883a 	add	r3,r3,r3
   14ca4:	10c5883a 	add	r2,r2,r3
   14ca8:	e0fff817 	ldw	r3,-32(fp)
   14cac:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   14cb0:	e0bff817 	ldw	r2,-32(fp)
   14cb4:	10800d03 	ldbu	r2,52(r2)
   14cb8:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
   14cbc:	e0bff817 	ldw	r2,-32(fp)
   14cc0:	10800d83 	ldbu	r2,54(r2)
   14cc4:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   14cc8:	e0bff817 	ldw	r2,-32(fp)
   14ccc:	10800d43 	ldbu	r2,53(r2)
   14cd0:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   14cd4:	e0fffc03 	ldbu	r3,-16(fp)
   14cd8:	d0a84444 	addi	r2,gp,-24303
   14cdc:	1885883a 	add	r2,r3,r2
   14ce0:	10c00003 	ldbu	r3,0(r2)
   14ce4:	e0bffc83 	ldbu	r2,-14(fp)
   14ce8:	1884703a 	and	r2,r3,r2
   14cec:	10803fcc 	andi	r2,r2,255
   14cf0:	10002826 	beq	r2,zero,14d94 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
   14cf4:	e0fffc03 	ldbu	r3,-16(fp)
   14cf8:	e13ffc03 	ldbu	r4,-16(fp)
   14cfc:	d0a84444 	addi	r2,gp,-24303
   14d00:	2085883a 	add	r2,r4,r2
   14d04:	10800003 	ldbu	r2,0(r2)
   14d08:	1009883a 	mov	r4,r2
   14d0c:	e0bffc83 	ldbu	r2,-14(fp)
   14d10:	0084303a 	nor	r2,zero,r2
   14d14:	2084703a 	and	r2,r4,r2
   14d18:	1009883a 	mov	r4,r2
   14d1c:	d0a84444 	addi	r2,gp,-24303
   14d20:	1885883a 	add	r2,r3,r2
   14d24:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   14d28:	e0fffc03 	ldbu	r3,-16(fp)
   14d2c:	d0a84444 	addi	r2,gp,-24303
   14d30:	1885883a 	add	r2,r3,r2
   14d34:	10800003 	ldbu	r2,0(r2)
   14d38:	10803fcc 	andi	r2,r2,255
   14d3c:	1000061e 	bne	r2,zero,14d58 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
   14d40:	e0bffc43 	ldbu	r2,-15(fp)
   14d44:	0084303a 	nor	r2,zero,r2
   14d48:	1007883a 	mov	r3,r2
   14d4c:	d0a84403 	ldbu	r2,-24304(gp)
   14d50:	1884703a 	and	r2,r3,r2
   14d54:	d0a84405 	stb	r2,-24304(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   14d58:	d0e84403 	ldbu	r3,-24304(gp)
   14d5c:	e0bffb83 	ldbu	r2,-18(fp)
   14d60:	1884b03a 	or	r2,r3,r2
   14d64:	d0a84405 	stb	r2,-24304(gp)
         OSRdyTbl[y_new] |= bitx_new;
   14d68:	e0fffb03 	ldbu	r3,-20(fp)
   14d6c:	e13ffb03 	ldbu	r4,-20(fp)
   14d70:	d0a84444 	addi	r2,gp,-24303
   14d74:	2085883a 	add	r2,r4,r2
   14d78:	11000003 	ldbu	r4,0(r2)
   14d7c:	e0bffbc3 	ldbu	r2,-17(fp)
   14d80:	2084b03a 	or	r2,r4,r2
   14d84:	1009883a 	mov	r4,r2
   14d88:	d0a84444 	addi	r2,gp,-24303
   14d8c:	1885883a 	add	r2,r3,r2
   14d90:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   14d94:	e0bff817 	ldw	r2,-32(fp)
   14d98:	10800717 	ldw	r2,28(r2)
   14d9c:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   14da0:	e0bff317 	ldw	r2,-52(fp)
   14da4:	10003326 	beq	r2,zero,14e74 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   14da8:	e0bffc03 	ldbu	r2,-16(fp)
   14dac:	e0fffc03 	ldbu	r3,-16(fp)
   14db0:	e13ff317 	ldw	r4,-52(fp)
   14db4:	20c7883a 	add	r3,r4,r3
   14db8:	18c002c4 	addi	r3,r3,11
   14dbc:	18c00003 	ldbu	r3,0(r3)
   14dc0:	1809883a 	mov	r4,r3
   14dc4:	e0fffc83 	ldbu	r3,-14(fp)
   14dc8:	00c6303a 	nor	r3,zero,r3
   14dcc:	20c6703a 	and	r3,r4,r3
   14dd0:	1809883a 	mov	r4,r3
   14dd4:	e0fff317 	ldw	r3,-52(fp)
   14dd8:	1885883a 	add	r2,r3,r2
   14ddc:	108002c4 	addi	r2,r2,11
   14de0:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   14de4:	e0bffc03 	ldbu	r2,-16(fp)
   14de8:	e0fff317 	ldw	r3,-52(fp)
   14dec:	1885883a 	add	r2,r3,r2
   14df0:	108002c4 	addi	r2,r2,11
   14df4:	10800003 	ldbu	r2,0(r2)
   14df8:	10803fcc 	andi	r2,r2,255
   14dfc:	1000091e 	bne	r2,zero,14e24 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
   14e00:	e0bff317 	ldw	r2,-52(fp)
   14e04:	10800283 	ldbu	r2,10(r2)
   14e08:	1007883a 	mov	r3,r2
   14e0c:	e0bffc43 	ldbu	r2,-15(fp)
   14e10:	0084303a 	nor	r2,zero,r2
   14e14:	1884703a 	and	r2,r3,r2
   14e18:	1007883a 	mov	r3,r2
   14e1c:	e0bff317 	ldw	r2,-52(fp)
   14e20:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   14e24:	e0bff317 	ldw	r2,-52(fp)
   14e28:	10c00283 	ldbu	r3,10(r2)
   14e2c:	e0bffb83 	ldbu	r2,-18(fp)
   14e30:	1884b03a 	or	r2,r3,r2
   14e34:	1007883a 	mov	r3,r2
   14e38:	e0bff317 	ldw	r2,-52(fp)
   14e3c:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   14e40:	e0bffb03 	ldbu	r2,-20(fp)
   14e44:	e0fffb03 	ldbu	r3,-20(fp)
   14e48:	e13ff317 	ldw	r4,-52(fp)
   14e4c:	20c7883a 	add	r3,r4,r3
   14e50:	18c002c4 	addi	r3,r3,11
   14e54:	19000003 	ldbu	r4,0(r3)
   14e58:	e0fffbc3 	ldbu	r3,-17(fp)
   14e5c:	20c6b03a 	or	r3,r4,r3
   14e60:	1809883a 	mov	r4,r3
   14e64:	e0fff317 	ldw	r3,-52(fp)
   14e68:	1885883a 	add	r2,r3,r2
   14e6c:	108002c4 	addi	r2,r2,11
   14e70:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   14e74:	e0bff817 	ldw	r2,-32(fp)
   14e78:	10800817 	ldw	r2,32(r2)
   14e7c:	10004226 	beq	r2,zero,14f88 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
   14e80:	e0bff817 	ldw	r2,-32(fp)
   14e84:	10800817 	ldw	r2,32(r2)
   14e88:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   14e8c:	e0bff417 	ldw	r2,-48(fp)
   14e90:	10800017 	ldw	r2,0(r2)
   14e94:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   14e98:	00003906 	br	14f80 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   14e9c:	e0bffc03 	ldbu	r2,-16(fp)
   14ea0:	e0fffc03 	ldbu	r3,-16(fp)
   14ea4:	e13ff317 	ldw	r4,-52(fp)
   14ea8:	20c7883a 	add	r3,r4,r3
   14eac:	18c002c4 	addi	r3,r3,11
   14eb0:	18c00003 	ldbu	r3,0(r3)
   14eb4:	1809883a 	mov	r4,r3
   14eb8:	e0fffc83 	ldbu	r3,-14(fp)
   14ebc:	00c6303a 	nor	r3,zero,r3
   14ec0:	20c6703a 	and	r3,r4,r3
   14ec4:	1809883a 	mov	r4,r3
   14ec8:	e0fff317 	ldw	r3,-52(fp)
   14ecc:	1885883a 	add	r2,r3,r2
   14ed0:	108002c4 	addi	r2,r2,11
   14ed4:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   14ed8:	e0bffc03 	ldbu	r2,-16(fp)
   14edc:	e0fff317 	ldw	r3,-52(fp)
   14ee0:	1885883a 	add	r2,r3,r2
   14ee4:	108002c4 	addi	r2,r2,11
   14ee8:	10800003 	ldbu	r2,0(r2)
   14eec:	10803fcc 	andi	r2,r2,255
   14ef0:	1000091e 	bne	r2,zero,14f18 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
   14ef4:	e0bff317 	ldw	r2,-52(fp)
   14ef8:	10800283 	ldbu	r2,10(r2)
   14efc:	1007883a 	mov	r3,r2
   14f00:	e0bffc43 	ldbu	r2,-15(fp)
   14f04:	0084303a 	nor	r2,zero,r2
   14f08:	1884703a 	and	r2,r3,r2
   14f0c:	1007883a 	mov	r3,r2
   14f10:	e0bff317 	ldw	r2,-52(fp)
   14f14:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   14f18:	e0bff317 	ldw	r2,-52(fp)
   14f1c:	10c00283 	ldbu	r3,10(r2)
   14f20:	e0bffb83 	ldbu	r2,-18(fp)
   14f24:	1884b03a 	or	r2,r3,r2
   14f28:	1007883a 	mov	r3,r2
   14f2c:	e0bff317 	ldw	r2,-52(fp)
   14f30:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   14f34:	e0bffb03 	ldbu	r2,-20(fp)
   14f38:	e0fffb03 	ldbu	r3,-20(fp)
   14f3c:	e13ff317 	ldw	r4,-52(fp)
   14f40:	20c7883a 	add	r3,r4,r3
   14f44:	18c002c4 	addi	r3,r3,11
   14f48:	19000003 	ldbu	r4,0(r3)
   14f4c:	e0fffbc3 	ldbu	r3,-17(fp)
   14f50:	20c6b03a 	or	r3,r4,r3
   14f54:	1809883a 	mov	r4,r3
   14f58:	e0fff317 	ldw	r3,-52(fp)
   14f5c:	1885883a 	add	r2,r3,r2
   14f60:	108002c4 	addi	r2,r2,11
   14f64:	11000005 	stb	r4,0(r2)
            pevents++;
   14f68:	e0bff417 	ldw	r2,-48(fp)
   14f6c:	10800104 	addi	r2,r2,4
   14f70:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   14f74:	e0bff417 	ldw	r2,-48(fp)
   14f78:	10800017 	ldw	r2,0(r2)
   14f7c:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   14f80:	e0bff317 	ldw	r2,-52(fp)
   14f84:	103fc51e 	bne	r2,zero,14e9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014e9c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   14f88:	e0bff817 	ldw	r2,-32(fp)
   14f8c:	e0ffff03 	ldbu	r3,-4(fp)
   14f90:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   14f94:	e0bff817 	ldw	r2,-32(fp)
   14f98:	e0fffb03 	ldbu	r3,-20(fp)
   14f9c:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   14fa0:	e0bff817 	ldw	r2,-32(fp)
   14fa4:	e0fffb43 	ldbu	r3,-19(fp)
   14fa8:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   14fac:	e0bff817 	ldw	r2,-32(fp)
   14fb0:	e0fffb83 	ldbu	r3,-18(fp)
   14fb4:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   14fb8:	e0bff817 	ldw	r2,-32(fp)
   14fbc:	e0fffbc3 	ldbu	r3,-17(fp)
   14fc0:	10c00d45 	stb	r3,53(r2)
   14fc4:	e0bff517 	ldw	r2,-44(fp)
   14fc8:	e0bffa15 	stw	r2,-24(fp)
   14fcc:	e0bffa17 	ldw	r2,-24(fp)
   14fd0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   14fd4:	d0a83843 	ldbu	r2,-24351(gp)
   14fd8:	10803fcc 	andi	r2,r2,255
   14fdc:	10800058 	cmpnei	r2,r2,1
   14fe0:	1000011e 	bne	r2,zero,14fe8 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
   14fe4:	00108d00 	call	108d0 <OS_Sched>
    }
    return (OS_ERR_NONE);
   14fe8:	0005883a 	mov	r2,zero
}
   14fec:	e037883a 	mov	sp,fp
   14ff0:	dfc00117 	ldw	ra,4(sp)
   14ff4:	df000017 	ldw	fp,0(sp)
   14ff8:	dec00204 	addi	sp,sp,8
   14ffc:	f800283a 	ret

00015000 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   15000:	deffee04 	addi	sp,sp,-72
   15004:	dfc01115 	stw	ra,68(sp)
   15008:	df001015 	stw	fp,64(sp)
   1500c:	df001004 	addi	fp,sp,64
   15010:	e13ffc15 	stw	r4,-16(fp)
   15014:	e17ffd15 	stw	r5,-12(fp)
   15018:	e1bffe15 	stw	r6,-8(fp)
   1501c:	3805883a 	mov	r2,r7
   15020:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   15024:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   15028:	e0bfff03 	ldbu	r2,-4(fp)
   1502c:	10800570 	cmpltui	r2,r2,21
   15030:	1000021e 	bne	r2,zero,1503c <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   15034:	00800a84 	movi	r2,42
   15038:	00005706 	br	15198 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1503c:	0005303a 	rdctl	r2,status
   15040:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15044:	e0fffb17 	ldw	r3,-20(fp)
   15048:	00bfff84 	movi	r2,-2
   1504c:	1884703a 	and	r2,r3,r2
   15050:	1001703a 	wrctl	status,r2
  
  return context;
   15054:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   15058:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   1505c:	d0a84603 	ldbu	r2,-24296(gp)
   15060:	10803fcc 	andi	r2,r2,255
   15064:	10000626 	beq	r2,zero,15080 <OSTaskCreate+0x80>
   15068:	e0bff317 	ldw	r2,-52(fp)
   1506c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15070:	e0bff417 	ldw	r2,-48(fp)
   15074:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   15078:	00800f04 	movi	r2,60
   1507c:	00004606 	br	15198 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   15080:	e0ffff03 	ldbu	r3,-4(fp)
   15084:	008000f4 	movhi	r2,3
   15088:	10896904 	addi	r2,r2,9636
   1508c:	18c7883a 	add	r3,r3,r3
   15090:	18c7883a 	add	r3,r3,r3
   15094:	10c5883a 	add	r2,r2,r3
   15098:	10800017 	ldw	r2,0(r2)
   1509c:	1000391e 	bne	r2,zero,15184 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   150a0:	e0ffff03 	ldbu	r3,-4(fp)
   150a4:	008000f4 	movhi	r2,3
   150a8:	10896904 	addi	r2,r2,9636
   150ac:	18c7883a 	add	r3,r3,r3
   150b0:	18c7883a 	add	r3,r3,r3
   150b4:	10c5883a 	add	r2,r2,r3
   150b8:	00c00044 	movi	r3,1
   150bc:	10c00015 	stw	r3,0(r2)
   150c0:	e0bff317 	ldw	r2,-52(fp)
   150c4:	e0bff515 	stw	r2,-44(fp)
   150c8:	e0bff517 	ldw	r2,-44(fp)
   150cc:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   150d0:	000f883a 	mov	r7,zero
   150d4:	e1bffe17 	ldw	r6,-8(fp)
   150d8:	e17ffd17 	ldw	r5,-12(fp)
   150dc:	e13ffc17 	ldw	r4,-16(fp)
   150e0:	0019d780 	call	19d78 <OSTaskStkInit>
   150e4:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   150e8:	e0bfff03 	ldbu	r2,-4(fp)
   150ec:	d8000215 	stw	zero,8(sp)
   150f0:	d8000115 	stw	zero,4(sp)
   150f4:	d8000015 	stw	zero,0(sp)
   150f8:	000f883a 	mov	r7,zero
   150fc:	000d883a 	mov	r6,zero
   15100:	e17ff717 	ldw	r5,-36(fp)
   15104:	1009883a 	mov	r4,r2
   15108:	0010ce00 	call	10ce0 <OS_TCBInit>
   1510c:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
   15110:	e0bff803 	ldbu	r2,-32(fp)
   15114:	1000061e 	bne	r2,zero,15130 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   15118:	d0a83843 	ldbu	r2,-24351(gp)
   1511c:	10803fcc 	andi	r2,r2,255
   15120:	10800058 	cmpnei	r2,r2,1
   15124:	1000151e 	bne	r2,zero,1517c <OSTaskCreate+0x17c>
                OS_Sched();
   15128:	00108d00 	call	108d0 <OS_Sched>
   1512c:	00001306 	br	1517c <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15130:	0005303a 	rdctl	r2,status
   15134:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15138:	e0fffa17 	ldw	r3,-24(fp)
   1513c:	00bfff84 	movi	r2,-2
   15140:	1884703a 	and	r2,r3,r2
   15144:	1001703a 	wrctl	status,r2
  
  return context;
   15148:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   1514c:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   15150:	e0ffff03 	ldbu	r3,-4(fp)
   15154:	008000f4 	movhi	r2,3
   15158:	10896904 	addi	r2,r2,9636
   1515c:	18c7883a 	add	r3,r3,r3
   15160:	18c7883a 	add	r3,r3,r3
   15164:	10c5883a 	add	r2,r2,r3
   15168:	10000015 	stw	zero,0(r2)
   1516c:	e0bff317 	ldw	r2,-52(fp)
   15170:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15174:	e0bff617 	ldw	r2,-40(fp)
   15178:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   1517c:	e0bff803 	ldbu	r2,-32(fp)
   15180:	00000506 	br	15198 <OSTaskCreate+0x198>
   15184:	e0bff317 	ldw	r2,-52(fp)
   15188:	e0bff915 	stw	r2,-28(fp)
   1518c:	e0bff917 	ldw	r2,-28(fp)
   15190:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   15194:	00800a04 	movi	r2,40
}
   15198:	e037883a 	mov	sp,fp
   1519c:	dfc00117 	ldw	ra,4(sp)
   151a0:	df000017 	ldw	fp,0(sp)
   151a4:	dec00204 	addi	sp,sp,8
   151a8:	f800283a 	ret

000151ac <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   151ac:	deffec04 	addi	sp,sp,-80
   151b0:	dfc01315 	stw	ra,76(sp)
   151b4:	df001215 	stw	fp,72(sp)
   151b8:	df001204 	addi	fp,sp,72
   151bc:	e13ffa15 	stw	r4,-24(fp)
   151c0:	e17ffb15 	stw	r5,-20(fp)
   151c4:	e1bffc15 	stw	r6,-16(fp)
   151c8:	3809883a 	mov	r4,r7
   151cc:	e0c00217 	ldw	r3,8(fp)
   151d0:	e0800617 	ldw	r2,24(fp)
   151d4:	e13ffd05 	stb	r4,-12(fp)
   151d8:	e0fffe0d 	sth	r3,-8(fp)
   151dc:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   151e0:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   151e4:	e0bffd03 	ldbu	r2,-12(fp)
   151e8:	10800570 	cmpltui	r2,r2,21
   151ec:	1000021e 	bne	r2,zero,151f8 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   151f0:	00800a84 	movi	r2,42
   151f4:	00006106 	br	1537c <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   151f8:	0005303a 	rdctl	r2,status
   151fc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15200:	e0fff917 	ldw	r3,-28(fp)
   15204:	00bfff84 	movi	r2,-2
   15208:	1884703a 	and	r2,r3,r2
   1520c:	1001703a 	wrctl	status,r2
  
  return context;
   15210:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   15214:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   15218:	d0a84603 	ldbu	r2,-24296(gp)
   1521c:	10803fcc 	andi	r2,r2,255
   15220:	10000626 	beq	r2,zero,1523c <OSTaskCreateExt+0x90>
   15224:	e0bff117 	ldw	r2,-60(fp)
   15228:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1522c:	e0bff217 	ldw	r2,-56(fp)
   15230:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   15234:	00800f04 	movi	r2,60
   15238:	00005006 	br	1537c <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   1523c:	e0fffd03 	ldbu	r3,-12(fp)
   15240:	008000f4 	movhi	r2,3
   15244:	10896904 	addi	r2,r2,9636
   15248:	18c7883a 	add	r3,r3,r3
   1524c:	18c7883a 	add	r3,r3,r3
   15250:	10c5883a 	add	r2,r2,r3
   15254:	10800017 	ldw	r2,0(r2)
   15258:	1000431e 	bne	r2,zero,15368 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   1525c:	e0fffd03 	ldbu	r3,-12(fp)
   15260:	008000f4 	movhi	r2,3
   15264:	10896904 	addi	r2,r2,9636
   15268:	18c7883a 	add	r3,r3,r3
   1526c:	18c7883a 	add	r3,r3,r3
   15270:	10c5883a 	add	r2,r2,r3
   15274:	00c00044 	movi	r3,1
   15278:	10c00015 	stw	r3,0(r2)
   1527c:	e0bff117 	ldw	r2,-60(fp)
   15280:	e0bff315 	stw	r2,-52(fp)
   15284:	e0bff317 	ldw	r2,-52(fp)
   15288:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   1528c:	e0bfff0b 	ldhu	r2,-4(fp)
   15290:	100d883a 	mov	r6,r2
   15294:	e1400417 	ldw	r5,16(fp)
   15298:	e1000317 	ldw	r4,12(fp)
   1529c:	001620c0 	call	1620c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   152a0:	e0bfff0b 	ldhu	r2,-4(fp)
   152a4:	100f883a 	mov	r7,r2
   152a8:	e1bffc17 	ldw	r6,-16(fp)
   152ac:	e17ffb17 	ldw	r5,-20(fp)
   152b0:	e13ffa17 	ldw	r4,-24(fp)
   152b4:	0019d780 	call	19d78 <OSTaskStkInit>
   152b8:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   152bc:	e0fffd03 	ldbu	r3,-12(fp)
   152c0:	e13ffe0b 	ldhu	r4,-8(fp)
   152c4:	e0bfff0b 	ldhu	r2,-4(fp)
   152c8:	d8800215 	stw	r2,8(sp)
   152cc:	e0800517 	ldw	r2,20(fp)
   152d0:	d8800115 	stw	r2,4(sp)
   152d4:	e0800417 	ldw	r2,16(fp)
   152d8:	d8800015 	stw	r2,0(sp)
   152dc:	200f883a 	mov	r7,r4
   152e0:	e1800317 	ldw	r6,12(fp)
   152e4:	e17ff517 	ldw	r5,-44(fp)
   152e8:	1809883a 	mov	r4,r3
   152ec:	0010ce00 	call	10ce0 <OS_TCBInit>
   152f0:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
   152f4:	e0bff603 	ldbu	r2,-40(fp)
   152f8:	1000061e 	bne	r2,zero,15314 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   152fc:	d0a83843 	ldbu	r2,-24351(gp)
   15300:	10803fcc 	andi	r2,r2,255
   15304:	10800058 	cmpnei	r2,r2,1
   15308:	1000151e 	bne	r2,zero,15360 <OSTaskCreateExt+0x1b4>
                OS_Sched();
   1530c:	00108d00 	call	108d0 <OS_Sched>
   15310:	00001306 	br	15360 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15314:	0005303a 	rdctl	r2,status
   15318:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1531c:	e0fff817 	ldw	r3,-32(fp)
   15320:	00bfff84 	movi	r2,-2
   15324:	1884703a 	and	r2,r3,r2
   15328:	1001703a 	wrctl	status,r2
  
  return context;
   1532c:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   15330:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   15334:	e0fffd03 	ldbu	r3,-12(fp)
   15338:	008000f4 	movhi	r2,3
   1533c:	10896904 	addi	r2,r2,9636
   15340:	18c7883a 	add	r3,r3,r3
   15344:	18c7883a 	add	r3,r3,r3
   15348:	10c5883a 	add	r2,r2,r3
   1534c:	10000015 	stw	zero,0(r2)
   15350:	e0bff117 	ldw	r2,-60(fp)
   15354:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15358:	e0bff417 	ldw	r2,-48(fp)
   1535c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   15360:	e0bff603 	ldbu	r2,-40(fp)
   15364:	00000506 	br	1537c <OSTaskCreateExt+0x1d0>
   15368:	e0bff117 	ldw	r2,-60(fp)
   1536c:	e0bff715 	stw	r2,-36(fp)
   15370:	e0bff717 	ldw	r2,-36(fp)
   15374:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   15378:	00800a04 	movi	r2,40
}
   1537c:	e037883a 	mov	sp,fp
   15380:	dfc00117 	ldw	ra,4(sp)
   15384:	df000017 	ldw	fp,0(sp)
   15388:	dec00204 	addi	sp,sp,8
   1538c:	f800283a 	ret

00015390 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   15390:	defff404 	addi	sp,sp,-48
   15394:	dfc00b15 	stw	ra,44(sp)
   15398:	df000a15 	stw	fp,40(sp)
   1539c:	df000a04 	addi	fp,sp,40
   153a0:	2005883a 	mov	r2,r4
   153a4:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   153a8:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   153ac:	d0a84603 	ldbu	r2,-24296(gp)
   153b0:	10803fcc 	andi	r2,r2,255
   153b4:	10000226 	beq	r2,zero,153c0 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
   153b8:	00801004 	movi	r2,64
   153bc:	0000c006 	br	156c0 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   153c0:	e0bfff03 	ldbu	r2,-4(fp)
   153c4:	10800518 	cmpnei	r2,r2,20
   153c8:	1000021e 	bne	r2,zero,153d4 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
   153cc:	00800f84 	movi	r2,62
   153d0:	0000bb06 	br	156c0 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   153d4:	e0bfff03 	ldbu	r2,-4(fp)
   153d8:	10800530 	cmpltui	r2,r2,20
   153dc:	1000051e 	bne	r2,zero,153f4 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
   153e0:	e0bfff03 	ldbu	r2,-4(fp)
   153e4:	10803fe0 	cmpeqi	r2,r2,255
   153e8:	1000021e 	bne	r2,zero,153f4 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
   153ec:	00800a84 	movi	r2,42
   153f0:	0000b306 	br	156c0 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   153f4:	0005303a 	rdctl	r2,status
   153f8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   153fc:	e0fffe17 	ldw	r3,-8(fp)
   15400:	00bfff84 	movi	r2,-2
   15404:	1884703a 	and	r2,r3,r2
   15408:	1001703a 	wrctl	status,r2
  
  return context;
   1540c:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   15410:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   15414:	e0bfff03 	ldbu	r2,-4(fp)
   15418:	10803fd8 	cmpnei	r2,r2,255
   1541c:	1000031e 	bne	r2,zero,1542c <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   15420:	d0a84717 	ldw	r2,-24292(gp)
   15424:	10800c83 	ldbu	r2,50(r2)
   15428:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1542c:	e0ffff03 	ldbu	r3,-4(fp)
   15430:	008000f4 	movhi	r2,3
   15434:	10896904 	addi	r2,r2,9636
   15438:	18c7883a 	add	r3,r3,r3
   1543c:	18c7883a 	add	r3,r3,r3
   15440:	10c5883a 	add	r2,r2,r3
   15444:	10800017 	ldw	r2,0(r2)
   15448:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   1544c:	e0bff817 	ldw	r2,-32(fp)
   15450:	1000061e 	bne	r2,zero,1546c <OSTaskDel+0xdc>
   15454:	e0bff617 	ldw	r2,-40(fp)
   15458:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1545c:	e0bff717 	ldw	r2,-36(fp)
   15460:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   15464:	008010c4 	movi	r2,67
   15468:	00009506 	br	156c0 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   1546c:	e0bff817 	ldw	r2,-32(fp)
   15470:	10800058 	cmpnei	r2,r2,1
   15474:	1000061e 	bne	r2,zero,15490 <OSTaskDel+0x100>
   15478:	e0bff617 	ldw	r2,-40(fp)
   1547c:	e0bff915 	stw	r2,-28(fp)
   15480:	e0bff917 	ldw	r2,-28(fp)
   15484:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   15488:	00800f44 	movi	r2,61
   1548c:	00008c06 	br	156c0 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   15490:	e0bff817 	ldw	r2,-32(fp)
   15494:	10800d03 	ldbu	r2,52(r2)
   15498:	10c03fcc 	andi	r3,r2,255
   1549c:	e0bff817 	ldw	r2,-32(fp)
   154a0:	10800d03 	ldbu	r2,52(r2)
   154a4:	11003fcc 	andi	r4,r2,255
   154a8:	d0a84444 	addi	r2,gp,-24303
   154ac:	2085883a 	add	r2,r4,r2
   154b0:	10800003 	ldbu	r2,0(r2)
   154b4:	1009883a 	mov	r4,r2
   154b8:	e0bff817 	ldw	r2,-32(fp)
   154bc:	10800d43 	ldbu	r2,53(r2)
   154c0:	0084303a 	nor	r2,zero,r2
   154c4:	2084703a 	and	r2,r4,r2
   154c8:	1009883a 	mov	r4,r2
   154cc:	d0a84444 	addi	r2,gp,-24303
   154d0:	1885883a 	add	r2,r3,r2
   154d4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   154d8:	e0bff817 	ldw	r2,-32(fp)
   154dc:	10800d03 	ldbu	r2,52(r2)
   154e0:	10c03fcc 	andi	r3,r2,255
   154e4:	d0a84444 	addi	r2,gp,-24303
   154e8:	1885883a 	add	r2,r3,r2
   154ec:	10800003 	ldbu	r2,0(r2)
   154f0:	10803fcc 	andi	r2,r2,255
   154f4:	1000071e 	bne	r2,zero,15514 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   154f8:	e0bff817 	ldw	r2,-32(fp)
   154fc:	10800d83 	ldbu	r2,54(r2)
   15500:	0084303a 	nor	r2,zero,r2
   15504:	1007883a 	mov	r3,r2
   15508:	d0a84403 	ldbu	r2,-24304(gp)
   1550c:	1884703a 	and	r2,r3,r2
   15510:	d0a84405 	stb	r2,-24304(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   15514:	e0bff817 	ldw	r2,-32(fp)
   15518:	10800717 	ldw	r2,28(r2)
   1551c:	10000526 	beq	r2,zero,15534 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   15520:	e0bff817 	ldw	r2,-32(fp)
   15524:	10800717 	ldw	r2,28(r2)
   15528:	100b883a 	mov	r5,r2
   1552c:	e13ff817 	ldw	r4,-32(fp)
   15530:	001027c0 	call	1027c <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   15534:	e0bff817 	ldw	r2,-32(fp)
   15538:	10800817 	ldw	r2,32(r2)
   1553c:	10000526 	beq	r2,zero,15554 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   15540:	e0bff817 	ldw	r2,-32(fp)
   15544:	10800817 	ldw	r2,32(r2)
   15548:	100b883a 	mov	r5,r2
   1554c:	e13ff817 	ldw	r4,-32(fp)
   15550:	00103340 	call	10334 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   15554:	e0bff817 	ldw	r2,-32(fp)
   15558:	10800a17 	ldw	r2,40(r2)
   1555c:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   15560:	e0bffb17 	ldw	r2,-20(fp)
   15564:	10000226 	beq	r2,zero,15570 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   15568:	e13ffb17 	ldw	r4,-20(fp)
   1556c:	00127b40 	call	127b4 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   15570:	e0bff817 	ldw	r2,-32(fp)
   15574:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   15578:	e0bff817 	ldw	r2,-32(fp)
   1557c:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   15580:	e0bff817 	ldw	r2,-32(fp)
   15584:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   15588:	d0a83803 	ldbu	r2,-24352(gp)
   1558c:	10803fcc 	andi	r2,r2,255
   15590:	10803fe0 	cmpeqi	r2,r2,255
   15594:	1000031e 	bne	r2,zero,155a4 <OSTaskDel+0x214>
        OSLockNesting++;
   15598:	d0a83803 	ldbu	r2,-24352(gp)
   1559c:	10800044 	addi	r2,r2,1
   155a0:	d0a83805 	stb	r2,-24352(gp)
   155a4:	e0bff617 	ldw	r2,-40(fp)
   155a8:	e0bffd15 	stw	r2,-12(fp)
   155ac:	e0bffd17 	ldw	r2,-12(fp)
   155b0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   155b4:	000fe640 	call	fe64 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   155b8:	0005303a 	rdctl	r2,status
   155bc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   155c0:	e0fffa17 	ldw	r3,-24(fp)
   155c4:	00bfff84 	movi	r2,-2
   155c8:	1884703a 	and	r2,r3,r2
   155cc:	1001703a 	wrctl	status,r2
  
  return context;
   155d0:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   155d4:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   155d8:	d0a83803 	ldbu	r2,-24352(gp)
   155dc:	10803fcc 	andi	r2,r2,255
   155e0:	10000326 	beq	r2,zero,155f0 <OSTaskDel+0x260>
        OSLockNesting--;
   155e4:	d0a83803 	ldbu	r2,-24352(gp)
   155e8:	10bfffc4 	addi	r2,r2,-1
   155ec:	d0a83805 	stb	r2,-24352(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   155f0:	e13ff817 	ldw	r4,-32(fp)
   155f4:	0019ef80 	call	19ef8 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   155f8:	d0a84043 	ldbu	r2,-24319(gp)
   155fc:	10bfffc4 	addi	r2,r2,-1
   15600:	d0a84045 	stb	r2,-24319(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   15604:	e0ffff03 	ldbu	r3,-4(fp)
   15608:	008000f4 	movhi	r2,3
   1560c:	10896904 	addi	r2,r2,9636
   15610:	18c7883a 	add	r3,r3,r3
   15614:	18c7883a 	add	r3,r3,r3
   15618:	10c5883a 	add	r2,r2,r3
   1561c:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   15620:	e0bff817 	ldw	r2,-32(fp)
   15624:	10800617 	ldw	r2,24(r2)
   15628:	1000071e 	bne	r2,zero,15648 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   1562c:	e0bff817 	ldw	r2,-32(fp)
   15630:	10800517 	ldw	r2,20(r2)
   15634:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   15638:	e0bff817 	ldw	r2,-32(fp)
   1563c:	10800517 	ldw	r2,20(r2)
   15640:	d0a83b15 	stw	r2,-24340(gp)
   15644:	00000a06 	br	15670 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   15648:	e0bff817 	ldw	r2,-32(fp)
   1564c:	10800617 	ldw	r2,24(r2)
   15650:	e0fff817 	ldw	r3,-32(fp)
   15654:	18c00517 	ldw	r3,20(r3)
   15658:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   1565c:	e0bff817 	ldw	r2,-32(fp)
   15660:	10800517 	ldw	r2,20(r2)
   15664:	e0fff817 	ldw	r3,-32(fp)
   15668:	18c00617 	ldw	r3,24(r3)
   1566c:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   15670:	d0e83f17 	ldw	r3,-24324(gp)
   15674:	e0bff817 	ldw	r2,-32(fp)
   15678:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   1567c:	e0bff817 	ldw	r2,-32(fp)
   15680:	d0a83f15 	stw	r2,-24324(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   15684:	e0bff817 	ldw	r2,-32(fp)
   15688:	00c00fc4 	movi	r3,63
   1568c:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   15690:	e0bff817 	ldw	r2,-32(fp)
   15694:	10001345 	stb	zero,77(r2)
   15698:	e0bff617 	ldw	r2,-40(fp)
   1569c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   156a0:	e0bffc17 	ldw	r2,-16(fp)
   156a4:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   156a8:	d0a83843 	ldbu	r2,-24351(gp)
   156ac:	10803fcc 	andi	r2,r2,255
   156b0:	10800058 	cmpnei	r2,r2,1
   156b4:	1000011e 	bne	r2,zero,156bc <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
   156b8:	00108d00 	call	108d0 <OS_Sched>
    }
    return (OS_ERR_NONE);
   156bc:	0005883a 	mov	r2,zero
}
   156c0:	e037883a 	mov	sp,fp
   156c4:	dfc00117 	ldw	ra,4(sp)
   156c8:	df000017 	ldw	fp,0(sp)
   156cc:	dec00204 	addi	sp,sp,8
   156d0:	f800283a 	ret

000156d4 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   156d4:	defff504 	addi	sp,sp,-44
   156d8:	df000a15 	stw	fp,40(sp)
   156dc:	df000a04 	addi	fp,sp,40
   156e0:	2005883a 	mov	r2,r4
   156e4:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   156e8:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   156ec:	e0bfff03 	ldbu	r2,-4(fp)
   156f0:	10800518 	cmpnei	r2,r2,20
   156f4:	1000021e 	bne	r2,zero,15700 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   156f8:	00800f84 	movi	r2,62
   156fc:	00004506 	br	15814 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   15700:	e0bfff03 	ldbu	r2,-4(fp)
   15704:	10800530 	cmpltui	r2,r2,20
   15708:	1000051e 	bne	r2,zero,15720 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   1570c:	e0bfff03 	ldbu	r2,-4(fp)
   15710:	10803fe0 	cmpeqi	r2,r2,255
   15714:	1000021e 	bne	r2,zero,15720 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   15718:	00800a84 	movi	r2,42
   1571c:	00003d06 	br	15814 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   15720:	e0bfff03 	ldbu	r2,-4(fp)
   15724:	10803fd8 	cmpnei	r2,r2,255
   15728:	1000111e 	bne	r2,zero,15770 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1572c:	0005303a 	rdctl	r2,status
   15730:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15734:	e0fff917 	ldw	r3,-28(fp)
   15738:	00bfff84 	movi	r2,-2
   1573c:	1884703a 	and	r2,r3,r2
   15740:	1001703a 	wrctl	status,r2
  
  return context;
   15744:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   15748:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   1574c:	d0a84717 	ldw	r2,-24292(gp)
   15750:	10800dc3 	ldbu	r2,55(r2)
   15754:	e0bff805 	stb	r2,-32(fp)
   15758:	e0bff617 	ldw	r2,-40(fp)
   1575c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15760:	e0bffe17 	ldw	r2,-8(fp)
   15764:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   15768:	e0bff803 	ldbu	r2,-32(fp)
   1576c:	00002906 	br	15814 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15770:	0005303a 	rdctl	r2,status
   15774:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15778:	e0fff717 	ldw	r3,-36(fp)
   1577c:	00bfff84 	movi	r2,-2
   15780:	1884703a 	and	r2,r3,r2
   15784:	1001703a 	wrctl	status,r2
  
  return context;
   15788:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   1578c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   15790:	e0ffff03 	ldbu	r3,-4(fp)
   15794:	008000f4 	movhi	r2,3
   15798:	10896904 	addi	r2,r2,9636
   1579c:	18c7883a 	add	r3,r3,r3
   157a0:	18c7883a 	add	r3,r3,r3
   157a4:	10c5883a 	add	r2,r2,r3
   157a8:	10800017 	ldw	r2,0(r2)
   157ac:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   157b0:	e0bffb17 	ldw	r2,-20(fp)
   157b4:	1000061e 	bne	r2,zero,157d0 <OSTaskDelReq+0xfc>
   157b8:	e0bff617 	ldw	r2,-40(fp)
   157bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   157c0:	e0bffa17 	ldw	r2,-24(fp)
   157c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   157c8:	008010c4 	movi	r2,67
   157cc:	00001106 	br	15814 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   157d0:	e0bffb17 	ldw	r2,-20(fp)
   157d4:	10800058 	cmpnei	r2,r2,1
   157d8:	1000061e 	bne	r2,zero,157f4 <OSTaskDelReq+0x120>
   157dc:	e0bff617 	ldw	r2,-40(fp)
   157e0:	e0bffc15 	stw	r2,-16(fp)
   157e4:	e0bffc17 	ldw	r2,-16(fp)
   157e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   157ec:	00800f44 	movi	r2,61
   157f0:	00000806 	br	15814 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   157f4:	e0bffb17 	ldw	r2,-20(fp)
   157f8:	00c00fc4 	movi	r3,63
   157fc:	10c00dc5 	stb	r3,55(r2)
   15800:	e0bff617 	ldw	r2,-40(fp)
   15804:	e0bffd15 	stw	r2,-12(fp)
   15808:	e0bffd17 	ldw	r2,-12(fp)
   1580c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15810:	0005883a 	mov	r2,zero
}
   15814:	e037883a 	mov	sp,fp
   15818:	df000017 	ldw	fp,0(sp)
   1581c:	dec00104 	addi	sp,sp,4
   15820:	f800283a 	ret

00015824 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   15824:	defff404 	addi	sp,sp,-48
   15828:	dfc00b15 	stw	ra,44(sp)
   1582c:	df000a15 	stw	fp,40(sp)
   15830:	df000a04 	addi	fp,sp,40
   15834:	2005883a 	mov	r2,r4
   15838:	e17ffe15 	stw	r5,-8(fp)
   1583c:	e1bfff15 	stw	r6,-4(fp)
   15840:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   15844:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   15848:	e0bfff17 	ldw	r2,-4(fp)
   1584c:	1000021e 	bne	r2,zero,15858 <OSTaskNameGet+0x34>
        return (0);
   15850:	0005883a 	mov	r2,zero
   15854:	00005406 	br	159a8 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   15858:	e0bffd03 	ldbu	r2,-12(fp)
   1585c:	10800570 	cmpltui	r2,r2,21
   15860:	1000081e 	bne	r2,zero,15884 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   15864:	e0bffd03 	ldbu	r2,-12(fp)
   15868:	10803fe0 	cmpeqi	r2,r2,255
   1586c:	1000051e 	bne	r2,zero,15884 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   15870:	e0bfff17 	ldw	r2,-4(fp)
   15874:	00c00a84 	movi	r3,42
   15878:	10c00005 	stb	r3,0(r2)
            return (0);
   1587c:	0005883a 	mov	r2,zero
   15880:	00004906 	br	159a8 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   15884:	e0bffe17 	ldw	r2,-8(fp)
   15888:	1000051e 	bne	r2,zero,158a0 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   1588c:	e0bfff17 	ldw	r2,-4(fp)
   15890:	00c00304 	movi	r3,12
   15894:	10c00005 	stb	r3,0(r2)
        return (0);
   15898:	0005883a 	mov	r2,zero
   1589c:	00004206 	br	159a8 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   158a0:	d0a84603 	ldbu	r2,-24296(gp)
   158a4:	10803fcc 	andi	r2,r2,255
   158a8:	10000526 	beq	r2,zero,158c0 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
   158ac:	e0bfff17 	ldw	r2,-4(fp)
   158b0:	00c00444 	movi	r3,17
   158b4:	10c00005 	stb	r3,0(r2)
        return (0);
   158b8:	0005883a 	mov	r2,zero
   158bc:	00003a06 	br	159a8 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   158c0:	0005303a 	rdctl	r2,status
   158c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   158c8:	e0fffc17 	ldw	r3,-16(fp)
   158cc:	00bfff84 	movi	r2,-2
   158d0:	1884703a 	and	r2,r3,r2
   158d4:	1001703a 	wrctl	status,r2
  
  return context;
   158d8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   158dc:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   158e0:	e0bffd03 	ldbu	r2,-12(fp)
   158e4:	10803fd8 	cmpnei	r2,r2,255
   158e8:	1000031e 	bne	r2,zero,158f8 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   158ec:	d0a84717 	ldw	r2,-24292(gp)
   158f0:	10800c83 	ldbu	r2,50(r2)
   158f4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   158f8:	e0fffd03 	ldbu	r3,-12(fp)
   158fc:	008000f4 	movhi	r2,3
   15900:	10896904 	addi	r2,r2,9636
   15904:	18c7883a 	add	r3,r3,r3
   15908:	18c7883a 	add	r3,r3,r3
   1590c:	10c5883a 	add	r2,r2,r3
   15910:	10800017 	ldw	r2,0(r2)
   15914:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   15918:	e0bff817 	ldw	r2,-32(fp)
   1591c:	1000091e 	bne	r2,zero,15944 <OSTaskNameGet+0x120>
   15920:	e0bff617 	ldw	r2,-40(fp)
   15924:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15928:	e0bff717 	ldw	r2,-36(fp)
   1592c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   15930:	e0bfff17 	ldw	r2,-4(fp)
   15934:	00c010c4 	movi	r3,67
   15938:	10c00005 	stb	r3,0(r2)
        return (0);
   1593c:	0005883a 	mov	r2,zero
   15940:	00001906 	br	159a8 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   15944:	e0bff817 	ldw	r2,-32(fp)
   15948:	10800058 	cmpnei	r2,r2,1
   1594c:	1000091e 	bne	r2,zero,15974 <OSTaskNameGet+0x150>
   15950:	e0bff617 	ldw	r2,-40(fp)
   15954:	e0bff915 	stw	r2,-28(fp)
   15958:	e0bff917 	ldw	r2,-28(fp)
   1595c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   15960:	e0bfff17 	ldw	r2,-4(fp)
   15964:	00c010c4 	movi	r3,67
   15968:	10c00005 	stb	r3,0(r2)
        return (0);
   1596c:	0005883a 	mov	r2,zero
   15970:	00000d06 	br	159a8 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   15974:	e0bff817 	ldw	r2,-32(fp)
   15978:	10801304 	addi	r2,r2,76
   1597c:	100b883a 	mov	r5,r2
   15980:	e13ffe17 	ldw	r4,-8(fp)
   15984:	0010a140 	call	10a14 <OS_StrCopy>
   15988:	e0bffb05 	stb	r2,-20(fp)
   1598c:	e0bff617 	ldw	r2,-40(fp)
   15990:	e0bffa15 	stw	r2,-24(fp)
   15994:	e0bffa17 	ldw	r2,-24(fp)
   15998:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1599c:	e0bfff17 	ldw	r2,-4(fp)
   159a0:	10000005 	stb	zero,0(r2)
    return (len);
   159a4:	e0bffb03 	ldbu	r2,-20(fp)
}
   159a8:	e037883a 	mov	sp,fp
   159ac:	dfc00117 	ldw	ra,4(sp)
   159b0:	df000017 	ldw	fp,0(sp)
   159b4:	dec00204 	addi	sp,sp,8
   159b8:	f800283a 	ret

000159bc <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   159bc:	defff304 	addi	sp,sp,-52
   159c0:	dfc00c15 	stw	ra,48(sp)
   159c4:	df000b15 	stw	fp,44(sp)
   159c8:	df000b04 	addi	fp,sp,44
   159cc:	2005883a 	mov	r2,r4
   159d0:	e17ffe15 	stw	r5,-8(fp)
   159d4:	e1bfff15 	stw	r6,-4(fp)
   159d8:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   159dc:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   159e0:	e0bfff17 	ldw	r2,-4(fp)
   159e4:	10005c26 	beq	r2,zero,15b58 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   159e8:	e0bffd03 	ldbu	r2,-12(fp)
   159ec:	10800570 	cmpltui	r2,r2,21
   159f0:	1000071e 	bne	r2,zero,15a10 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   159f4:	e0bffd03 	ldbu	r2,-12(fp)
   159f8:	10803fe0 	cmpeqi	r2,r2,255
   159fc:	1000041e 	bne	r2,zero,15a10 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   15a00:	e0bfff17 	ldw	r2,-4(fp)
   15a04:	00c00a84 	movi	r3,42
   15a08:	10c00005 	stb	r3,0(r2)
            return;
   15a0c:	00005306 	br	15b5c <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   15a10:	e0bffe17 	ldw	r2,-8(fp)
   15a14:	1000041e 	bne	r2,zero,15a28 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   15a18:	e0bfff17 	ldw	r2,-4(fp)
   15a1c:	00c00304 	movi	r3,12
   15a20:	10c00005 	stb	r3,0(r2)
        return;
   15a24:	00004d06 	br	15b5c <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   15a28:	d0a84603 	ldbu	r2,-24296(gp)
   15a2c:	10803fcc 	andi	r2,r2,255
   15a30:	10000426 	beq	r2,zero,15a44 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
   15a34:	e0bfff17 	ldw	r2,-4(fp)
   15a38:	00c00484 	movi	r3,18
   15a3c:	10c00005 	stb	r3,0(r2)
        return;
   15a40:	00004606 	br	15b5c <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15a44:	0005303a 	rdctl	r2,status
   15a48:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15a4c:	e0fffc17 	ldw	r3,-16(fp)
   15a50:	00bfff84 	movi	r2,-2
   15a54:	1884703a 	and	r2,r3,r2
   15a58:	1001703a 	wrctl	status,r2
  
  return context;
   15a5c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   15a60:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   15a64:	e0bffd03 	ldbu	r2,-12(fp)
   15a68:	10803fd8 	cmpnei	r2,r2,255
   15a6c:	1000031e 	bne	r2,zero,15a7c <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
   15a70:	d0a84717 	ldw	r2,-24292(gp)
   15a74:	10800c83 	ldbu	r2,50(r2)
   15a78:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   15a7c:	e0fffd03 	ldbu	r3,-12(fp)
   15a80:	008000f4 	movhi	r2,3
   15a84:	10896904 	addi	r2,r2,9636
   15a88:	18c7883a 	add	r3,r3,r3
   15a8c:	18c7883a 	add	r3,r3,r3
   15a90:	10c5883a 	add	r2,r2,r3
   15a94:	10800017 	ldw	r2,0(r2)
   15a98:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   15a9c:	e0bff717 	ldw	r2,-36(fp)
   15aa0:	1000081e 	bne	r2,zero,15ac4 <OSTaskNameSet+0x108>
   15aa4:	e0bff517 	ldw	r2,-44(fp)
   15aa8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15aac:	e0bff617 	ldw	r2,-40(fp)
   15ab0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   15ab4:	e0bfff17 	ldw	r2,-4(fp)
   15ab8:	00c010c4 	movi	r3,67
   15abc:	10c00005 	stb	r3,0(r2)
        return;
   15ac0:	00002606 	br	15b5c <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   15ac4:	e0bff717 	ldw	r2,-36(fp)
   15ac8:	10800058 	cmpnei	r2,r2,1
   15acc:	1000081e 	bne	r2,zero,15af0 <OSTaskNameSet+0x134>
   15ad0:	e0bff517 	ldw	r2,-44(fp)
   15ad4:	e0bff815 	stw	r2,-32(fp)
   15ad8:	e0bff817 	ldw	r2,-32(fp)
   15adc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   15ae0:	e0bfff17 	ldw	r2,-4(fp)
   15ae4:	00c010c4 	movi	r3,67
   15ae8:	10c00005 	stb	r3,0(r2)
        return;
   15aec:	00001b06 	br	15b5c <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   15af0:	e13ffe17 	ldw	r4,-8(fp)
   15af4:	0010a880 	call	10a88 <OS_StrLen>
   15af8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   15afc:	e0bffa03 	ldbu	r2,-24(fp)
   15b00:	10800830 	cmpltui	r2,r2,32
   15b04:	1000081e 	bne	r2,zero,15b28 <OSTaskNameSet+0x16c>
   15b08:	e0bff517 	ldw	r2,-44(fp)
   15b0c:	e0bff915 	stw	r2,-28(fp)
   15b10:	e0bff917 	ldw	r2,-28(fp)
   15b14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   15b18:	e0bfff17 	ldw	r2,-4(fp)
   15b1c:	00c01044 	movi	r3,65
   15b20:	10c00005 	stb	r3,0(r2)
        return;
   15b24:	00000d06 	br	15b5c <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   15b28:	e0bff717 	ldw	r2,-36(fp)
   15b2c:	10801304 	addi	r2,r2,76
   15b30:	e17ffe17 	ldw	r5,-8(fp)
   15b34:	1009883a 	mov	r4,r2
   15b38:	0010a140 	call	10a14 <OS_StrCopy>
   15b3c:	e0bff517 	ldw	r2,-44(fp)
   15b40:	e0bffb15 	stw	r2,-20(fp)
   15b44:	e0bffb17 	ldw	r2,-20(fp)
   15b48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   15b4c:	e0bfff17 	ldw	r2,-4(fp)
   15b50:	10000005 	stb	zero,0(r2)
   15b54:	00000106 	br	15b5c <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
   15b58:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   15b5c:	e037883a 	mov	sp,fp
   15b60:	dfc00117 	ldw	ra,4(sp)
   15b64:	df000017 	ldw	fp,0(sp)
   15b68:	dec00204 	addi	sp,sp,8
   15b6c:	f800283a 	ret

00015b70 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   15b70:	defff404 	addi	sp,sp,-48
   15b74:	dfc00b15 	stw	ra,44(sp)
   15b78:	df000a15 	stw	fp,40(sp)
   15b7c:	df000a04 	addi	fp,sp,40
   15b80:	2005883a 	mov	r2,r4
   15b84:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   15b88:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   15b8c:	e0bfff03 	ldbu	r2,-4(fp)
   15b90:	10800530 	cmpltui	r2,r2,20
   15b94:	1000021e 	bne	r2,zero,15ba0 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   15b98:	00800a84 	movi	r2,42
   15b9c:	00006406 	br	15d30 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15ba0:	0005303a 	rdctl	r2,status
   15ba4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15ba8:	e0fffe17 	ldw	r3,-8(fp)
   15bac:	00bfff84 	movi	r2,-2
   15bb0:	1884703a 	and	r2,r3,r2
   15bb4:	1001703a 	wrctl	status,r2
  
  return context;
   15bb8:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   15bbc:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   15bc0:	e0ffff03 	ldbu	r3,-4(fp)
   15bc4:	008000f4 	movhi	r2,3
   15bc8:	10896904 	addi	r2,r2,9636
   15bcc:	18c7883a 	add	r3,r3,r3
   15bd0:	18c7883a 	add	r3,r3,r3
   15bd4:	10c5883a 	add	r2,r2,r3
   15bd8:	10800017 	ldw	r2,0(r2)
   15bdc:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   15be0:	e0bff817 	ldw	r2,-32(fp)
   15be4:	1000061e 	bne	r2,zero,15c00 <OSTaskResume+0x90>
   15be8:	e0bff617 	ldw	r2,-40(fp)
   15bec:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15bf0:	e0bff717 	ldw	r2,-36(fp)
   15bf4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   15bf8:	00801184 	movi	r2,70
   15bfc:	00004c06 	br	15d30 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   15c00:	e0bff817 	ldw	r2,-32(fp)
   15c04:	10800058 	cmpnei	r2,r2,1
   15c08:	1000061e 	bne	r2,zero,15c24 <OSTaskResume+0xb4>
   15c0c:	e0bff617 	ldw	r2,-40(fp)
   15c10:	e0bff915 	stw	r2,-28(fp)
   15c14:	e0bff917 	ldw	r2,-28(fp)
   15c18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   15c1c:	008010c4 	movi	r2,67
   15c20:	00004306 	br	15d30 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   15c24:	e0bff817 	ldw	r2,-32(fp)
   15c28:	10800c03 	ldbu	r2,48(r2)
   15c2c:	10803fcc 	andi	r2,r2,255
   15c30:	1080020c 	andi	r2,r2,8
   15c34:	10003926 	beq	r2,zero,15d1c <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   15c38:	e0bff817 	ldw	r2,-32(fp)
   15c3c:	10c00c03 	ldbu	r3,48(r2)
   15c40:	00bffdc4 	movi	r2,-9
   15c44:	1884703a 	and	r2,r3,r2
   15c48:	1007883a 	mov	r3,r2
   15c4c:	e0bff817 	ldw	r2,-32(fp)
   15c50:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   15c54:	e0bff817 	ldw	r2,-32(fp)
   15c58:	10800c03 	ldbu	r2,48(r2)
   15c5c:	10803fcc 	andi	r2,r2,255
   15c60:	1000281e 	bne	r2,zero,15d04 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
   15c64:	e0bff817 	ldw	r2,-32(fp)
   15c68:	10800b8b 	ldhu	r2,46(r2)
   15c6c:	10bfffcc 	andi	r2,r2,65535
   15c70:	10001f1e 	bne	r2,zero,15cf0 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   15c74:	e0bff817 	ldw	r2,-32(fp)
   15c78:	10c00d83 	ldbu	r3,54(r2)
   15c7c:	d0a84403 	ldbu	r2,-24304(gp)
   15c80:	1884b03a 	or	r2,r3,r2
   15c84:	d0a84405 	stb	r2,-24304(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   15c88:	e0bff817 	ldw	r2,-32(fp)
   15c8c:	10800d03 	ldbu	r2,52(r2)
   15c90:	10c03fcc 	andi	r3,r2,255
   15c94:	e0bff817 	ldw	r2,-32(fp)
   15c98:	10800d03 	ldbu	r2,52(r2)
   15c9c:	11003fcc 	andi	r4,r2,255
   15ca0:	d0a84444 	addi	r2,gp,-24303
   15ca4:	2085883a 	add	r2,r4,r2
   15ca8:	11000003 	ldbu	r4,0(r2)
   15cac:	e0bff817 	ldw	r2,-32(fp)
   15cb0:	10800d43 	ldbu	r2,53(r2)
   15cb4:	2084b03a 	or	r2,r4,r2
   15cb8:	1009883a 	mov	r4,r2
   15cbc:	d0a84444 	addi	r2,gp,-24303
   15cc0:	1885883a 	add	r2,r3,r2
   15cc4:	11000005 	stb	r4,0(r2)
   15cc8:	e0bff617 	ldw	r2,-40(fp)
   15ccc:	e0bffa15 	stw	r2,-24(fp)
   15cd0:	e0bffa17 	ldw	r2,-24(fp)
   15cd4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   15cd8:	d0a83843 	ldbu	r2,-24351(gp)
   15cdc:	10803fcc 	andi	r2,r2,255
   15ce0:	10800058 	cmpnei	r2,r2,1
   15ce4:	10000b1e 	bne	r2,zero,15d14 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
   15ce8:	00108d00 	call	108d0 <OS_Sched>
   15cec:	00000906 	br	15d14 <OSTaskResume+0x1a4>
   15cf0:	e0bff617 	ldw	r2,-40(fp)
   15cf4:	e0bffb15 	stw	r2,-20(fp)
   15cf8:	e0bffb17 	ldw	r2,-20(fp)
   15cfc:	1001703a 	wrctl	status,r2
   15d00:	00000406 	br	15d14 <OSTaskResume+0x1a4>
   15d04:	e0bff617 	ldw	r2,-40(fp)
   15d08:	e0bffc15 	stw	r2,-16(fp)
   15d0c:	e0bffc17 	ldw	r2,-16(fp)
   15d10:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   15d14:	0005883a 	mov	r2,zero
   15d18:	00000506 	br	15d30 <OSTaskResume+0x1c0>
   15d1c:	e0bff617 	ldw	r2,-40(fp)
   15d20:	e0bffd15 	stw	r2,-12(fp)
   15d24:	e0bffd17 	ldw	r2,-12(fp)
   15d28:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   15d2c:	00801104 	movi	r2,68
}
   15d30:	e037883a 	mov	sp,fp
   15d34:	dfc00117 	ldw	ra,4(sp)
   15d38:	df000017 	ldw	fp,0(sp)
   15d3c:	dec00204 	addi	sp,sp,8
   15d40:	f800283a 	ret

00015d44 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   15d44:	defff304 	addi	sp,sp,-52
   15d48:	df000c15 	stw	fp,48(sp)
   15d4c:	df000c04 	addi	fp,sp,48
   15d50:	2005883a 	mov	r2,r4
   15d54:	e17fff15 	stw	r5,-4(fp)
   15d58:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   15d5c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   15d60:	e0bffe03 	ldbu	r2,-8(fp)
   15d64:	10800570 	cmpltui	r2,r2,21
   15d68:	1000051e 	bne	r2,zero,15d80 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   15d6c:	e0bffe03 	ldbu	r2,-8(fp)
   15d70:	10803fe0 	cmpeqi	r2,r2,255
   15d74:	1000021e 	bne	r2,zero,15d80 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   15d78:	00800a84 	movi	r2,42
   15d7c:	00005d06 	br	15ef4 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   15d80:	e0bfff17 	ldw	r2,-4(fp)
   15d84:	1000021e 	bne	r2,zero,15d90 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   15d88:	00800244 	movi	r2,9
   15d8c:	00005906 	br	15ef4 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   15d90:	e0bfff17 	ldw	r2,-4(fp)
   15d94:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   15d98:	e0bfff17 	ldw	r2,-4(fp)
   15d9c:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15da0:	0005303a 	rdctl	r2,status
   15da4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15da8:	e0fffd17 	ldw	r3,-12(fp)
   15dac:	00bfff84 	movi	r2,-2
   15db0:	1884703a 	and	r2,r3,r2
   15db4:	1001703a 	wrctl	status,r2
  
  return context;
   15db8:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
   15dbc:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   15dc0:	e0bffe03 	ldbu	r2,-8(fp)
   15dc4:	10803fd8 	cmpnei	r2,r2,255
   15dc8:	1000031e 	bne	r2,zero,15dd8 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
   15dcc:	d0a84717 	ldw	r2,-24292(gp)
   15dd0:	10800c83 	ldbu	r2,50(r2)
   15dd4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   15dd8:	e0fffe03 	ldbu	r3,-8(fp)
   15ddc:	008000f4 	movhi	r2,3
   15de0:	10896904 	addi	r2,r2,9636
   15de4:	18c7883a 	add	r3,r3,r3
   15de8:	18c7883a 	add	r3,r3,r3
   15dec:	10c5883a 	add	r2,r2,r3
   15df0:	10800017 	ldw	r2,0(r2)
   15df4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   15df8:	e0bff817 	ldw	r2,-32(fp)
   15dfc:	1000061e 	bne	r2,zero,15e18 <OSTaskStkChk+0xd4>
   15e00:	e0bff617 	ldw	r2,-40(fp)
   15e04:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15e08:	e0bff717 	ldw	r2,-36(fp)
   15e0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   15e10:	008010c4 	movi	r2,67
   15e14:	00003706 	br	15ef4 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   15e18:	e0bff817 	ldw	r2,-32(fp)
   15e1c:	10800058 	cmpnei	r2,r2,1
   15e20:	1000061e 	bne	r2,zero,15e3c <OSTaskStkChk+0xf8>
   15e24:	e0bff617 	ldw	r2,-40(fp)
   15e28:	e0bff915 	stw	r2,-28(fp)
   15e2c:	e0bff917 	ldw	r2,-28(fp)
   15e30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   15e34:	008010c4 	movi	r2,67
   15e38:	00002e06 	br	15ef4 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   15e3c:	e0bff817 	ldw	r2,-32(fp)
   15e40:	1080040b 	ldhu	r2,16(r2)
   15e44:	10bfffcc 	andi	r2,r2,65535
   15e48:	1080004c 	andi	r2,r2,1
   15e4c:	1000061e 	bne	r2,zero,15e68 <OSTaskStkChk+0x124>
   15e50:	e0bff617 	ldw	r2,-40(fp)
   15e54:	e0bffa15 	stw	r2,-24(fp)
   15e58:	e0bffa17 	ldw	r2,-24(fp)
   15e5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   15e60:	00801144 	movi	r2,69
   15e64:	00002306 	br	15ef4 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
   15e68:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   15e6c:	e0bff817 	ldw	r2,-32(fp)
   15e70:	10800317 	ldw	r2,12(r2)
   15e74:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
   15e78:	e0bff817 	ldw	r2,-32(fp)
   15e7c:	10800217 	ldw	r2,8(r2)
   15e80:	e0bff415 	stw	r2,-48(fp)
   15e84:	e0bff617 	ldw	r2,-40(fp)
   15e88:	e0bffb15 	stw	r2,-20(fp)
   15e8c:	e0bffb17 	ldw	r2,-20(fp)
   15e90:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   15e94:	00000306 	br	15ea4 <OSTaskStkChk+0x160>
        nfree++;
   15e98:	e0bff517 	ldw	r2,-44(fp)
   15e9c:	10800044 	addi	r2,r2,1
   15ea0:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   15ea4:	e0bff417 	ldw	r2,-48(fp)
   15ea8:	10c00104 	addi	r3,r2,4
   15eac:	e0fff415 	stw	r3,-48(fp)
   15eb0:	10800017 	ldw	r2,0(r2)
   15eb4:	103ff826 	beq	r2,zero,15e98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015e98>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   15eb8:	e0bff517 	ldw	r2,-44(fp)
   15ebc:	1085883a 	add	r2,r2,r2
   15ec0:	1085883a 	add	r2,r2,r2
   15ec4:	1007883a 	mov	r3,r2
   15ec8:	e0bfff17 	ldw	r2,-4(fp)
   15ecc:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   15ed0:	e0fffc17 	ldw	r3,-16(fp)
   15ed4:	e0bff517 	ldw	r2,-44(fp)
   15ed8:	1885c83a 	sub	r2,r3,r2
   15edc:	1085883a 	add	r2,r2,r2
   15ee0:	1085883a 	add	r2,r2,r2
   15ee4:	1007883a 	mov	r3,r2
   15ee8:	e0bfff17 	ldw	r2,-4(fp)
   15eec:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   15ef0:	0005883a 	mov	r2,zero
}
   15ef4:	e037883a 	mov	sp,fp
   15ef8:	df000017 	ldw	fp,0(sp)
   15efc:	dec00104 	addi	sp,sp,4
   15f00:	f800283a 	ret

00015f04 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   15f04:	defff504 	addi	sp,sp,-44
   15f08:	dfc00a15 	stw	ra,40(sp)
   15f0c:	df000915 	stw	fp,36(sp)
   15f10:	df000904 	addi	fp,sp,36
   15f14:	2005883a 	mov	r2,r4
   15f18:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15f1c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   15f20:	e0bfff03 	ldbu	r2,-4(fp)
   15f24:	10800518 	cmpnei	r2,r2,20
   15f28:	1000021e 	bne	r2,zero,15f34 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   15f2c:	008011c4 	movi	r2,71
   15f30:	00006806 	br	160d4 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   15f34:	e0bfff03 	ldbu	r2,-4(fp)
   15f38:	10800530 	cmpltui	r2,r2,20
   15f3c:	1000051e 	bne	r2,zero,15f54 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   15f40:	e0bfff03 	ldbu	r2,-4(fp)
   15f44:	10803fe0 	cmpeqi	r2,r2,255
   15f48:	1000021e 	bne	r2,zero,15f54 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   15f4c:	00800a84 	movi	r2,42
   15f50:	00006006 	br	160d4 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15f54:	0005303a 	rdctl	r2,status
   15f58:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15f5c:	e0fffe17 	ldw	r3,-8(fp)
   15f60:	00bfff84 	movi	r2,-2
   15f64:	1884703a 	and	r2,r3,r2
   15f68:	1001703a 	wrctl	status,r2
  
  return context;
   15f6c:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   15f70:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   15f74:	e0bfff03 	ldbu	r2,-4(fp)
   15f78:	10803fd8 	cmpnei	r2,r2,255
   15f7c:	1000061e 	bne	r2,zero,15f98 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
   15f80:	d0a84717 	ldw	r2,-24292(gp)
   15f84:	10800c83 	ldbu	r2,50(r2)
   15f88:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   15f8c:	00800044 	movi	r2,1
   15f90:	e0bff705 	stb	r2,-36(fp)
   15f94:	00000906 	br	15fbc <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   15f98:	d0a84717 	ldw	r2,-24292(gp)
   15f9c:	10800c83 	ldbu	r2,50(r2)
   15fa0:	10c03fcc 	andi	r3,r2,255
   15fa4:	e0bfff03 	ldbu	r2,-4(fp)
   15fa8:	1880031e 	bne	r3,r2,15fb8 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
   15fac:	00800044 	movi	r2,1
   15fb0:	e0bff705 	stb	r2,-36(fp)
   15fb4:	00000106 	br	15fbc <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   15fb8:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   15fbc:	e0ffff03 	ldbu	r3,-4(fp)
   15fc0:	008000f4 	movhi	r2,3
   15fc4:	10896904 	addi	r2,r2,9636
   15fc8:	18c7883a 	add	r3,r3,r3
   15fcc:	18c7883a 	add	r3,r3,r3
   15fd0:	10c5883a 	add	r2,r2,r3
   15fd4:	10800017 	ldw	r2,0(r2)
   15fd8:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   15fdc:	e0bffa17 	ldw	r2,-24(fp)
   15fe0:	1000061e 	bne	r2,zero,15ffc <OSTaskSuspend+0xf8>
   15fe4:	e0bff817 	ldw	r2,-32(fp)
   15fe8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15fec:	e0bff917 	ldw	r2,-28(fp)
   15ff0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   15ff4:	00801204 	movi	r2,72
   15ff8:	00003606 	br	160d4 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   15ffc:	e0bffa17 	ldw	r2,-24(fp)
   16000:	10800058 	cmpnei	r2,r2,1
   16004:	1000061e 	bne	r2,zero,16020 <OSTaskSuspend+0x11c>
   16008:	e0bff817 	ldw	r2,-32(fp)
   1600c:	e0bffb15 	stw	r2,-20(fp)
   16010:	e0bffb17 	ldw	r2,-20(fp)
   16014:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   16018:	008010c4 	movi	r2,67
   1601c:	00002d06 	br	160d4 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
   16020:	e0bffa17 	ldw	r2,-24(fp)
   16024:	10800d03 	ldbu	r2,52(r2)
   16028:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   1602c:	e0fffd03 	ldbu	r3,-12(fp)
   16030:	e13ffd03 	ldbu	r4,-12(fp)
   16034:	d0a84444 	addi	r2,gp,-24303
   16038:	2085883a 	add	r2,r4,r2
   1603c:	10800003 	ldbu	r2,0(r2)
   16040:	1009883a 	mov	r4,r2
   16044:	e0bffa17 	ldw	r2,-24(fp)
   16048:	10800d43 	ldbu	r2,53(r2)
   1604c:	0084303a 	nor	r2,zero,r2
   16050:	2084703a 	and	r2,r4,r2
   16054:	1009883a 	mov	r4,r2
   16058:	d0a84444 	addi	r2,gp,-24303
   1605c:	1885883a 	add	r2,r3,r2
   16060:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   16064:	e0fffd03 	ldbu	r3,-12(fp)
   16068:	d0a84444 	addi	r2,gp,-24303
   1606c:	1885883a 	add	r2,r3,r2
   16070:	10800003 	ldbu	r2,0(r2)
   16074:	10803fcc 	andi	r2,r2,255
   16078:	1000071e 	bne	r2,zero,16098 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   1607c:	e0bffa17 	ldw	r2,-24(fp)
   16080:	10800d83 	ldbu	r2,54(r2)
   16084:	0084303a 	nor	r2,zero,r2
   16088:	1007883a 	mov	r3,r2
   1608c:	d0a84403 	ldbu	r2,-24304(gp)
   16090:	1884703a 	and	r2,r3,r2
   16094:	d0a84405 	stb	r2,-24304(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   16098:	e0bffa17 	ldw	r2,-24(fp)
   1609c:	10800c03 	ldbu	r2,48(r2)
   160a0:	10800214 	ori	r2,r2,8
   160a4:	1007883a 	mov	r3,r2
   160a8:	e0bffa17 	ldw	r2,-24(fp)
   160ac:	10c00c05 	stb	r3,48(r2)
   160b0:	e0bff817 	ldw	r2,-32(fp)
   160b4:	e0bffc15 	stw	r2,-16(fp)
   160b8:	e0bffc17 	ldw	r2,-16(fp)
   160bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   160c0:	e0bff703 	ldbu	r2,-36(fp)
   160c4:	10800058 	cmpnei	r2,r2,1
   160c8:	1000011e 	bne	r2,zero,160d0 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
   160cc:	00108d00 	call	108d0 <OS_Sched>
    }
    return (OS_ERR_NONE);
   160d0:	0005883a 	mov	r2,zero
}
   160d4:	e037883a 	mov	sp,fp
   160d8:	dfc00117 	ldw	ra,4(sp)
   160dc:	df000017 	ldw	fp,0(sp)
   160e0:	dec00204 	addi	sp,sp,8
   160e4:	f800283a 	ret

000160e8 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   160e8:	defff604 	addi	sp,sp,-40
   160ec:	dfc00915 	stw	ra,36(sp)
   160f0:	df000815 	stw	fp,32(sp)
   160f4:	df000804 	addi	fp,sp,32
   160f8:	2005883a 	mov	r2,r4
   160fc:	e17fff15 	stw	r5,-4(fp)
   16100:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16104:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   16108:	e0bffe03 	ldbu	r2,-8(fp)
   1610c:	10800570 	cmpltui	r2,r2,21
   16110:	1000051e 	bne	r2,zero,16128 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   16114:	e0bffe03 	ldbu	r2,-8(fp)
   16118:	10803fe0 	cmpeqi	r2,r2,255
   1611c:	1000021e 	bne	r2,zero,16128 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   16120:	00800a84 	movi	r2,42
   16124:	00003406 	br	161f8 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   16128:	e0bfff17 	ldw	r2,-4(fp)
   1612c:	1000021e 	bne	r2,zero,16138 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   16130:	00800244 	movi	r2,9
   16134:	00003006 	br	161f8 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16138:	0005303a 	rdctl	r2,status
   1613c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16140:	e0fffd17 	ldw	r3,-12(fp)
   16144:	00bfff84 	movi	r2,-2
   16148:	1884703a 	and	r2,r3,r2
   1614c:	1001703a 	wrctl	status,r2
  
  return context;
   16150:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   16154:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   16158:	e0bffe03 	ldbu	r2,-8(fp)
   1615c:	10803fd8 	cmpnei	r2,r2,255
   16160:	1000031e 	bne	r2,zero,16170 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
   16164:	d0a84717 	ldw	r2,-24292(gp)
   16168:	10800c83 	ldbu	r2,50(r2)
   1616c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   16170:	e0fffe03 	ldbu	r3,-8(fp)
   16174:	008000f4 	movhi	r2,3
   16178:	10896904 	addi	r2,r2,9636
   1617c:	18c7883a 	add	r3,r3,r3
   16180:	18c7883a 	add	r3,r3,r3
   16184:	10c5883a 	add	r2,r2,r3
   16188:	10800017 	ldw	r2,0(r2)
   1618c:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   16190:	e0bffa17 	ldw	r2,-24(fp)
   16194:	1000061e 	bne	r2,zero,161b0 <OSTaskQuery+0xc8>
   16198:	e0bff817 	ldw	r2,-32(fp)
   1619c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   161a0:	e0bff917 	ldw	r2,-28(fp)
   161a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   161a8:	00800a44 	movi	r2,41
   161ac:	00001206 	br	161f8 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   161b0:	e0bffa17 	ldw	r2,-24(fp)
   161b4:	10800058 	cmpnei	r2,r2,1
   161b8:	1000061e 	bne	r2,zero,161d4 <OSTaskQuery+0xec>
   161bc:	e0bff817 	ldw	r2,-32(fp)
   161c0:	e0bffb15 	stw	r2,-20(fp)
   161c4:	e0bffb17 	ldw	r2,-20(fp)
   161c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   161cc:	008010c4 	movi	r2,67
   161d0:	00000906 	br	161f8 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   161d4:	01801b04 	movi	r6,108
   161d8:	e17ffa17 	ldw	r5,-24(fp)
   161dc:	e13fff17 	ldw	r4,-4(fp)
   161e0:	00108680 	call	10868 <OS_MemCopy>
   161e4:	e0bff817 	ldw	r2,-32(fp)
   161e8:	e0bffc15 	stw	r2,-16(fp)
   161ec:	e0bffc17 	ldw	r2,-16(fp)
   161f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   161f4:	0005883a 	mov	r2,zero
}
   161f8:	e037883a 	mov	sp,fp
   161fc:	dfc00117 	ldw	ra,4(sp)
   16200:	df000017 	ldw	fp,0(sp)
   16204:	dec00204 	addi	sp,sp,8
   16208:	f800283a 	ret

0001620c <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   1620c:	defffc04 	addi	sp,sp,-16
   16210:	df000315 	stw	fp,12(sp)
   16214:	df000304 	addi	fp,sp,12
   16218:	e13ffd15 	stw	r4,-12(fp)
   1621c:	e17ffe15 	stw	r5,-8(fp)
   16220:	3005883a 	mov	r2,r6
   16224:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   16228:	e0bfff0b 	ldhu	r2,-4(fp)
   1622c:	1080004c 	andi	r2,r2,1
   16230:	10000d26 	beq	r2,zero,16268 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   16234:	e0bfff0b 	ldhu	r2,-4(fp)
   16238:	1080008c 	andi	r2,r2,2
   1623c:	10000a26 	beq	r2,zero,16268 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   16240:	00000706 	br	16260 <OS_TaskStkClr+0x54>
                size--;
   16244:	e0bffe17 	ldw	r2,-8(fp)
   16248:	10bfffc4 	addi	r2,r2,-1
   1624c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   16250:	e0bffd17 	ldw	r2,-12(fp)
   16254:	10c00104 	addi	r3,r2,4
   16258:	e0fffd15 	stw	r3,-12(fp)
   1625c:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   16260:	e0bffe17 	ldw	r2,-8(fp)
   16264:	103ff71e 	bne	r2,zero,16244 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016244>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   16268:	0001883a 	nop
   1626c:	e037883a 	mov	sp,fp
   16270:	df000017 	ldw	fp,0(sp)
   16274:	dec00104 	addi	sp,sp,4
   16278:	f800283a 	ret

0001627c <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   1627c:	defff904 	addi	sp,sp,-28
   16280:	dfc00615 	stw	ra,24(sp)
   16284:	df000515 	stw	fp,20(sp)
   16288:	df000504 	addi	fp,sp,20
   1628c:	2005883a 	mov	r2,r4
   16290:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16294:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   16298:	d0a84603 	ldbu	r2,-24296(gp)
   1629c:	10803fcc 	andi	r2,r2,255
   162a0:	1000311e 	bne	r2,zero,16368 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   162a4:	e0bfff0b 	ldhu	r2,-4(fp)
   162a8:	10003026 	beq	r2,zero,1636c <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   162ac:	0005303a 	rdctl	r2,status
   162b0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   162b4:	e0fffe17 	ldw	r3,-8(fp)
   162b8:	00bfff84 	movi	r2,-2
   162bc:	1884703a 	and	r2,r3,r2
   162c0:	1001703a 	wrctl	status,r2
  
  return context;
   162c4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   162c8:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   162cc:	d0a84717 	ldw	r2,-24292(gp)
   162d0:	10800d03 	ldbu	r2,52(r2)
   162d4:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   162d8:	e0fffd03 	ldbu	r3,-12(fp)
   162dc:	e13ffd03 	ldbu	r4,-12(fp)
   162e0:	d0a84444 	addi	r2,gp,-24303
   162e4:	2085883a 	add	r2,r4,r2
   162e8:	10800003 	ldbu	r2,0(r2)
   162ec:	1009883a 	mov	r4,r2
   162f0:	d0a84717 	ldw	r2,-24292(gp)
   162f4:	10800d43 	ldbu	r2,53(r2)
   162f8:	0084303a 	nor	r2,zero,r2
   162fc:	2084703a 	and	r2,r4,r2
   16300:	1009883a 	mov	r4,r2
   16304:	d0a84444 	addi	r2,gp,-24303
   16308:	1885883a 	add	r2,r3,r2
   1630c:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   16310:	e0fffd03 	ldbu	r3,-12(fp)
   16314:	d0a84444 	addi	r2,gp,-24303
   16318:	1885883a 	add	r2,r3,r2
   1631c:	10800003 	ldbu	r2,0(r2)
   16320:	10803fcc 	andi	r2,r2,255
   16324:	1000071e 	bne	r2,zero,16344 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   16328:	d0a84717 	ldw	r2,-24292(gp)
   1632c:	10800d83 	ldbu	r2,54(r2)
   16330:	0084303a 	nor	r2,zero,r2
   16334:	1007883a 	mov	r3,r2
   16338:	d0a84403 	ldbu	r2,-24304(gp)
   1633c:	1884703a 	and	r2,r3,r2
   16340:	d0a84405 	stb	r2,-24304(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   16344:	d0a84717 	ldw	r2,-24292(gp)
   16348:	e0ffff0b 	ldhu	r3,-4(fp)
   1634c:	10c00b8d 	sth	r3,46(r2)
   16350:	e0bffb17 	ldw	r2,-20(fp)
   16354:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16358:	e0bffc17 	ldw	r2,-16(fp)
   1635c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   16360:	00108d00 	call	108d0 <OS_Sched>
   16364:	00000106 	br	1636c <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
   16368:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
   1636c:	e037883a 	mov	sp,fp
   16370:	dfc00117 	ldw	ra,4(sp)
   16374:	df000017 	ldw	fp,0(sp)
   16378:	dec00204 	addi	sp,sp,8
   1637c:	f800283a 	ret

00016380 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   16380:	defff804 	addi	sp,sp,-32
   16384:	dfc00715 	stw	ra,28(sp)
   16388:	df000615 	stw	fp,24(sp)
   1638c:	df000604 	addi	fp,sp,24
   16390:	2015883a 	mov	r10,r4
   16394:	2809883a 	mov	r4,r5
   16398:	3007883a 	mov	r3,r6
   1639c:	3805883a 	mov	r2,r7
   163a0:	e2bffc05 	stb	r10,-16(fp)
   163a4:	e13ffd05 	stb	r4,-12(fp)
   163a8:	e0fffe05 	stb	r3,-8(fp)
   163ac:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   163b0:	d0a84603 	ldbu	r2,-24296(gp)
   163b4:	10803fcc 	andi	r2,r2,255
   163b8:	10000226 	beq	r2,zero,163c4 <OSTimeDlyHMSM+0x44>
        return (OS_ERR_TIME_DLY_ISR);
   163bc:	00801544 	movi	r2,85
   163c0:	00004206 	br	164cc <OSTimeDlyHMSM+0x14c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   163c4:	e0bffc03 	ldbu	r2,-16(fp)
   163c8:	1000081e 	bne	r2,zero,163ec <OSTimeDlyHMSM+0x6c>
        if (minutes == 0) {
   163cc:	e0bffd03 	ldbu	r2,-12(fp)
   163d0:	1000061e 	bne	r2,zero,163ec <OSTimeDlyHMSM+0x6c>
            if (seconds == 0) {
   163d4:	e0bffe03 	ldbu	r2,-8(fp)
   163d8:	1000041e 	bne	r2,zero,163ec <OSTimeDlyHMSM+0x6c>
                if (ms == 0) {
   163dc:	e0bfff0b 	ldhu	r2,-4(fp)
   163e0:	1000021e 	bne	r2,zero,163ec <OSTimeDlyHMSM+0x6c>
                    return (OS_ERR_TIME_ZERO_DLY);
   163e4:	00801504 	movi	r2,84
   163e8:	00003806 	br	164cc <OSTimeDlyHMSM+0x14c>
                }
            }
        }
    }
    if (minutes > 59) {
   163ec:	e0bffd03 	ldbu	r2,-12(fp)
   163f0:	10800f30 	cmpltui	r2,r2,60
   163f4:	1000021e 	bne	r2,zero,16400 <OSTimeDlyHMSM+0x80>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   163f8:	00801444 	movi	r2,81
   163fc:	00003306 	br	164cc <OSTimeDlyHMSM+0x14c>
    }
    if (seconds > 59) {
   16400:	e0bffe03 	ldbu	r2,-8(fp)
   16404:	10800f30 	cmpltui	r2,r2,60
   16408:	1000021e 	bne	r2,zero,16414 <OSTimeDlyHMSM+0x94>
        return (OS_ERR_TIME_INVALID_SECONDS);
   1640c:	00801484 	movi	r2,82
   16410:	00002e06 	br	164cc <OSTimeDlyHMSM+0x14c>
    }
    if (ms > 999) {
   16414:	e0bfff0b 	ldhu	r2,-4(fp)
   16418:	1080fa30 	cmpltui	r2,r2,1000
   1641c:	1000021e 	bne	r2,zero,16428 <OSTimeDlyHMSM+0xa8>
        return (OS_ERR_TIME_INVALID_MS);
   16420:	008014c4 	movi	r2,83
   16424:	00002906 	br	164cc <OSTimeDlyHMSM+0x14c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   16428:	e0bffc03 	ldbu	r2,-16(fp)
   1642c:	10c38424 	muli	r3,r2,3600
   16430:	e0bffd03 	ldbu	r2,-12(fp)
   16434:	10800f24 	muli	r2,r2,60
   16438:	1887883a 	add	r3,r3,r2
   1643c:	e0bffe03 	ldbu	r2,-8(fp)
   16440:	1885883a 	add	r2,r3,r2
   16444:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   16448:	e0bfff0b 	ldhu	r2,-4(fp)
   1644c:	10800f84 	addi	r2,r2,62
   16450:	100690fa 	slli	r3,r2,3
   16454:	008418b4 	movhi	r2,4194
   16458:	109374c4 	addi	r2,r2,19923
   1645c:	188a383a 	mulxuu	r5,r3,r2
   16460:	1885383a 	mul	r2,r3,r2
   16464:	1011883a 	mov	r8,r2
   16468:	2813883a 	mov	r9,r5
   1646c:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   16470:	2085883a 	add	r2,r4,r2
   16474:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   16478:	e0bffb17 	ldw	r2,-20(fp)
   1647c:	1004d43a 	srli	r2,r2,16
   16480:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   16484:	e0bffb17 	ldw	r2,-20(fp)
   16488:	10bfffcc 	andi	r2,r2,65535
   1648c:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   16490:	e0bffb17 	ldw	r2,-20(fp)
   16494:	10bfffcc 	andi	r2,r2,65535
   16498:	1009883a 	mov	r4,r2
   1649c:	001627c0 	call	1627c <OSTimeDly>
    while (loops > 0) {
   164a0:	00000706 	br	164c0 <OSTimeDlyHMSM+0x140>
        OSTimeDly((INT16U)32768u);
   164a4:	01200014 	movui	r4,32768
   164a8:	001627c0 	call	1627c <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   164ac:	01200014 	movui	r4,32768
   164b0:	001627c0 	call	1627c <OSTimeDly>
        loops--;
   164b4:	e0bffa0b 	ldhu	r2,-24(fp)
   164b8:	10bfffc4 	addi	r2,r2,-1
   164bc:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   164c0:	e0bffa0b 	ldhu	r2,-24(fp)
   164c4:	103ff71e 	bne	r2,zero,164a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70164a4>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   164c8:	0005883a 	mov	r2,zero
}
   164cc:	e037883a 	mov	sp,fp
   164d0:	dfc00117 	ldw	ra,4(sp)
   164d4:	df000017 	ldw	fp,0(sp)
   164d8:	dec00204 	addi	sp,sp,8
   164dc:	f800283a 	ret

000164e0 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   164e0:	defff504 	addi	sp,sp,-44
   164e4:	dfc00a15 	stw	ra,40(sp)
   164e8:	df000915 	stw	fp,36(sp)
   164ec:	df000904 	addi	fp,sp,36
   164f0:	2005883a 	mov	r2,r4
   164f4:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   164f8:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   164fc:	e0bfff03 	ldbu	r2,-4(fp)
   16500:	10800530 	cmpltui	r2,r2,20
   16504:	1000021e 	bne	r2,zero,16510 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   16508:	00800a84 	movi	r2,42
   1650c:	00006406 	br	166a0 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16510:	0005303a 	rdctl	r2,status
   16514:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16518:	e0fffe17 	ldw	r3,-8(fp)
   1651c:	00bfff84 	movi	r2,-2
   16520:	1884703a 	and	r2,r3,r2
   16524:	1001703a 	wrctl	status,r2
  
  return context;
   16528:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   1652c:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   16530:	e0ffff03 	ldbu	r3,-4(fp)
   16534:	008000f4 	movhi	r2,3
   16538:	10896904 	addi	r2,r2,9636
   1653c:	18c7883a 	add	r3,r3,r3
   16540:	18c7883a 	add	r3,r3,r3
   16544:	10c5883a 	add	r2,r2,r3
   16548:	10800017 	ldw	r2,0(r2)
   1654c:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
   16550:	e0bff917 	ldw	r2,-28(fp)
   16554:	1000061e 	bne	r2,zero,16570 <OSTimeDlyResume+0x90>
   16558:	e0bff717 	ldw	r2,-36(fp)
   1655c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16560:	e0bff817 	ldw	r2,-32(fp)
   16564:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   16568:	008010c4 	movi	r2,67
   1656c:	00004c06 	br	166a0 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   16570:	e0bff917 	ldw	r2,-28(fp)
   16574:	10800058 	cmpnei	r2,r2,1
   16578:	1000061e 	bne	r2,zero,16594 <OSTimeDlyResume+0xb4>
   1657c:	e0bff717 	ldw	r2,-36(fp)
   16580:	e0bffa15 	stw	r2,-24(fp)
   16584:	e0bffa17 	ldw	r2,-24(fp)
   16588:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1658c:	008010c4 	movi	r2,67
   16590:	00004306 	br	166a0 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   16594:	e0bff917 	ldw	r2,-28(fp)
   16598:	10800b8b 	ldhu	r2,46(r2)
   1659c:	10bfffcc 	andi	r2,r2,65535
   165a0:	1000061e 	bne	r2,zero,165bc <OSTimeDlyResume+0xdc>
   165a4:	e0bff717 	ldw	r2,-36(fp)
   165a8:	e0bffb15 	stw	r2,-20(fp)
   165ac:	e0bffb17 	ldw	r2,-20(fp)
   165b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   165b4:	00801404 	movi	r2,80
   165b8:	00003906 	br	166a0 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   165bc:	e0bff917 	ldw	r2,-28(fp)
   165c0:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   165c4:	e0bff917 	ldw	r2,-28(fp)
   165c8:	10800c03 	ldbu	r2,48(r2)
   165cc:	10803fcc 	andi	r2,r2,255
   165d0:	10800dcc 	andi	r2,r2,55
   165d4:	10000b26 	beq	r2,zero,16604 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   165d8:	e0bff917 	ldw	r2,-28(fp)
   165dc:	10c00c03 	ldbu	r3,48(r2)
   165e0:	00bff204 	movi	r2,-56
   165e4:	1884703a 	and	r2,r3,r2
   165e8:	1007883a 	mov	r3,r2
   165ec:	e0bff917 	ldw	r2,-28(fp)
   165f0:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   165f4:	e0bff917 	ldw	r2,-28(fp)
   165f8:	00c00044 	movi	r3,1
   165fc:	10c00c45 	stb	r3,49(r2)
   16600:	00000206 	br	1660c <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   16604:	e0bff917 	ldw	r2,-28(fp)
   16608:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   1660c:	e0bff917 	ldw	r2,-28(fp)
   16610:	10800c03 	ldbu	r2,48(r2)
   16614:	10803fcc 	andi	r2,r2,255
   16618:	1080020c 	andi	r2,r2,8
   1661c:	10001b1e 	bne	r2,zero,1668c <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   16620:	e0bff917 	ldw	r2,-28(fp)
   16624:	10c00d83 	ldbu	r3,54(r2)
   16628:	d0a84403 	ldbu	r2,-24304(gp)
   1662c:	1884b03a 	or	r2,r3,r2
   16630:	d0a84405 	stb	r2,-24304(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   16634:	e0bff917 	ldw	r2,-28(fp)
   16638:	10800d03 	ldbu	r2,52(r2)
   1663c:	10c03fcc 	andi	r3,r2,255
   16640:	e0bff917 	ldw	r2,-28(fp)
   16644:	10800d03 	ldbu	r2,52(r2)
   16648:	11003fcc 	andi	r4,r2,255
   1664c:	d0a84444 	addi	r2,gp,-24303
   16650:	2085883a 	add	r2,r4,r2
   16654:	11000003 	ldbu	r4,0(r2)
   16658:	e0bff917 	ldw	r2,-28(fp)
   1665c:	10800d43 	ldbu	r2,53(r2)
   16660:	2084b03a 	or	r2,r4,r2
   16664:	1009883a 	mov	r4,r2
   16668:	d0a84444 	addi	r2,gp,-24303
   1666c:	1885883a 	add	r2,r3,r2
   16670:	11000005 	stb	r4,0(r2)
   16674:	e0bff717 	ldw	r2,-36(fp)
   16678:	e0bffc15 	stw	r2,-16(fp)
   1667c:	e0bffc17 	ldw	r2,-16(fp)
   16680:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   16684:	00108d00 	call	108d0 <OS_Sched>
   16688:	00000406 	br	1669c <OSTimeDlyResume+0x1bc>
   1668c:	e0bff717 	ldw	r2,-36(fp)
   16690:	e0bffd15 	stw	r2,-12(fp)
   16694:	e0bffd17 	ldw	r2,-12(fp)
   16698:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   1669c:	0005883a 	mov	r2,zero
}
   166a0:	e037883a 	mov	sp,fp
   166a4:	dfc00117 	ldw	ra,4(sp)
   166a8:	df000017 	ldw	fp,0(sp)
   166ac:	dec00204 	addi	sp,sp,8
   166b0:	f800283a 	ret

000166b4 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   166b4:	defffb04 	addi	sp,sp,-20
   166b8:	df000415 	stw	fp,16(sp)
   166bc:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   166c0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   166c4:	0005303a 	rdctl	r2,status
   166c8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   166cc:	e0fffe17 	ldw	r3,-8(fp)
   166d0:	00bfff84 	movi	r2,-2
   166d4:	1884703a 	and	r2,r3,r2
   166d8:	1001703a 	wrctl	status,r2
  
  return context;
   166dc:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   166e0:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   166e4:	d0a84817 	ldw	r2,-24288(gp)
   166e8:	e0bffd15 	stw	r2,-12(fp)
   166ec:	e0bffc17 	ldw	r2,-16(fp)
   166f0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   166f4:	e0bfff17 	ldw	r2,-4(fp)
   166f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   166fc:	e0bffd17 	ldw	r2,-12(fp)
}
   16700:	e037883a 	mov	sp,fp
   16704:	df000017 	ldw	fp,0(sp)
   16708:	dec00104 	addi	sp,sp,4
   1670c:	f800283a 	ret

00016710 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   16710:	defffb04 	addi	sp,sp,-20
   16714:	df000415 	stw	fp,16(sp)
   16718:	df000404 	addi	fp,sp,16
   1671c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16720:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16724:	0005303a 	rdctl	r2,status
   16728:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1672c:	e0fffd17 	ldw	r3,-12(fp)
   16730:	00bfff84 	movi	r2,-2
   16734:	1884703a 	and	r2,r3,r2
   16738:	1001703a 	wrctl	status,r2
  
  return context;
   1673c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   16740:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   16744:	e0bfff17 	ldw	r2,-4(fp)
   16748:	d0a84815 	stw	r2,-24288(gp)
   1674c:	e0bffc17 	ldw	r2,-16(fp)
   16750:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16754:	e0bffe17 	ldw	r2,-8(fp)
   16758:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   1675c:	0001883a 	nop
   16760:	e037883a 	mov	sp,fp
   16764:	df000017 	ldw	fp,0(sp)
   16768:	dec00104 	addi	sp,sp,4
   1676c:	f800283a 	ret

00016770 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   16770:	defffd04 	addi	sp,sp,-12
   16774:	dfc00215 	stw	ra,8(sp)
   16778:	df000115 	stw	fp,4(sp)
   1677c:	df000104 	addi	fp,sp,4
   16780:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   16784:	d1600804 	addi	r5,gp,-32736
   16788:	e13fff17 	ldw	r4,-4(fp)
   1678c:	00193a40 	call	193a4 <alt_dev_llist_insert>
}
   16790:	e037883a 	mov	sp,fp
   16794:	dfc00117 	ldw	ra,4(sp)
   16798:	df000017 	ldw	fp,0(sp)
   1679c:	dec00204 	addi	sp,sp,8
   167a0:	f800283a 	ret

000167a4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   167a4:	defffd04 	addi	sp,sp,-12
   167a8:	dfc00215 	stw	ra,8(sp)
   167ac:	df000115 	stw	fp,4(sp)
   167b0:	df000104 	addi	fp,sp,4
   167b4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   167b8:	0019c840 	call	19c84 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   167bc:	00800044 	movi	r2,1
   167c0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   167c4:	0001883a 	nop
   167c8:	e037883a 	mov	sp,fp
   167cc:	dfc00117 	ldw	ra,4(sp)
   167d0:	df000017 	ldw	fp,0(sp)
   167d4:	dec00204 	addi	sp,sp,8
   167d8:	f800283a 	ret

000167dc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   167dc:	defffb04 	addi	sp,sp,-20
   167e0:	dfc00415 	stw	ra,16(sp)
   167e4:	df000315 	stw	fp,12(sp)
   167e8:	df000304 	addi	fp,sp,12
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   167ec:	01c00204 	movi	r7,8
   167f0:	000d883a 	mov	r6,zero
   167f4:	000b883a 	mov	r5,zero
   167f8:	013fc834 	movhi	r4,65312
   167fc:	21080004 	addi	r4,r4,8192
   16800:	0017ee80 	call	17ee8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER_2, Interval_Timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   16804:	01800204 	movi	r6,8
   16808:	000b883a 	mov	r5,zero
   1680c:	010000b4 	movhi	r4,2
   16810:	212fc704 	addi	r4,r4,-16612
   16814:	00172ac0 	call	172ac <altera_avalon_jtag_uart_init>
   16818:	010000b4 	movhi	r4,2
   1681c:	212fbd04 	addi	r4,r4,-16652
   16820:	00167700 	call	16770 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   16824:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   16828:	010000b4 	movhi	r4,2
   1682c:	2133d804 	addi	r4,r4,-12448
   16830:	00167700 	call	16770 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   16834:	010000b4 	movhi	r4,2
   16838:	2133e404 	addi	r4,r4,-12400
   1683c:	00167700 	call	16770 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   16840:	010000b4 	movhi	r4,2
   16844:	2133f004 	addi	r4,r4,-12352
   16848:	00180100 	call	18010 <alt_up_character_lcd_init>
   1684c:	010000b4 	movhi	r4,2
   16850:	2133f004 	addi	r4,r4,-12352
   16854:	00167700 	call	16770 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   16858:	010000b4 	movhi	r4,2
   1685c:	2133fb04 	addi	r4,r4,-12308
   16860:	00167700 	call	16770 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   16864:	010000b4 	movhi	r4,2
   16868:	21340604 	addi	r4,r4,-12264
   1686c:	00189040 	call	18904 <alt_up_ps2_init>
   16870:	010000b4 	movhi	r4,2
   16874:	21340604 	addi	r4,r4,-12264
   16878:	00167700 	call	16770 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   1687c:	010000b4 	movhi	r4,2
   16880:	21341404 	addi	r4,r4,-12208
   16884:	00189040 	call	18904 <alt_up_ps2_init>
   16888:	010000b4 	movhi	r4,2
   1688c:	21341404 	addi	r4,r4,-12208
   16890:	00167700 	call	16770 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   16894:	010000b4 	movhi	r4,2
   16898:	21342204 	addi	r4,r4,-12152
   1689c:	00167700 	call	16770 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   168a0:	010000b4 	movhi	r4,2
   168a4:	21342d04 	addi	r4,r4,-12108
   168a8:	00167700 	call	16770 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_CHAR_BUF_SUBSYSTEM_CHAR_BUF_DMA, VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA);
   168ac:	008000b4 	movhi	r2,2
   168b0:	10b43a04 	addi	r2,r2,-12056
   168b4:	10800a17 	ldw	r2,40(r2)
   168b8:	10800017 	ldw	r2,0(r2)
   168bc:	1007883a 	mov	r3,r2
   168c0:	008000b4 	movhi	r2,2
   168c4:	10b43a04 	addi	r2,r2,-12056
   168c8:	10c00b15 	stw	r3,44(r2)
   168cc:	008000b4 	movhi	r2,2
   168d0:	10b43a04 	addi	r2,r2,-12056
   168d4:	10800a17 	ldw	r2,40(r2)
   168d8:	10800104 	addi	r2,r2,4
   168dc:	10800017 	ldw	r2,0(r2)
   168e0:	1007883a 	mov	r3,r2
   168e4:	008000b4 	movhi	r2,2
   168e8:	10b43a04 	addi	r2,r2,-12056
   168ec:	10c00c15 	stw	r3,48(r2)
   168f0:	008000b4 	movhi	r2,2
   168f4:	10b43a04 	addi	r2,r2,-12056
   168f8:	10800a17 	ldw	r2,40(r2)
   168fc:	10800204 	addi	r2,r2,8
   16900:	10800017 	ldw	r2,0(r2)
   16904:	10ffffcc 	andi	r3,r2,65535
   16908:	008000b4 	movhi	r2,2
   1690c:	10b43a04 	addi	r2,r2,-12056
   16910:	10c01115 	stw	r3,68(r2)
   16914:	008000b4 	movhi	r2,2
   16918:	10b43a04 	addi	r2,r2,-12056
   1691c:	10800a17 	ldw	r2,40(r2)
   16920:	10800204 	addi	r2,r2,8
   16924:	10800017 	ldw	r2,0(r2)
   16928:	1006d43a 	srli	r3,r2,16
   1692c:	008000b4 	movhi	r2,2
   16930:	10b43a04 	addi	r2,r2,-12056
   16934:	10c01215 	stw	r3,72(r2)
   16938:	008000b4 	movhi	r2,2
   1693c:	10b43a04 	addi	r2,r2,-12056
   16940:	10800a17 	ldw	r2,40(r2)
   16944:	10800304 	addi	r2,r2,12
   16948:	10800017 	ldw	r2,0(r2)
   1694c:	1005d07a 	srai	r2,r2,1
   16950:	10c0004c 	andi	r3,r2,1
   16954:	008000b4 	movhi	r2,2
   16958:	10b43a04 	addi	r2,r2,-12056
   1695c:	10c00d15 	stw	r3,52(r2)
   16960:	008000b4 	movhi	r2,2
   16964:	10b43a04 	addi	r2,r2,-12056
   16968:	10800a17 	ldw	r2,40(r2)
   1696c:	10800304 	addi	r2,r2,12
   16970:	10800017 	ldw	r2,0(r2)
   16974:	1005d23a 	srai	r2,r2,8
   16978:	108003cc 	andi	r2,r2,15
   1697c:	10800044 	addi	r2,r2,1
   16980:	1007883a 	mov	r3,r2
   16984:	008000b4 	movhi	r2,2
   16988:	10b43a04 	addi	r2,r2,-12056
   1698c:	10c00e15 	stw	r3,56(r2)
   16990:	008000b4 	movhi	r2,2
   16994:	10b43a04 	addi	r2,r2,-12056
   16998:	10800a17 	ldw	r2,40(r2)
   1699c:	10800304 	addi	r2,r2,12
   169a0:	10800017 	ldw	r2,0(r2)
   169a4:	1005d1ba 	srai	r2,r2,6
   169a8:	108000cc 	andi	r2,r2,3
   169ac:	10800044 	addi	r2,r2,1
   169b0:	1007883a 	mov	r3,r2
   169b4:	008000b4 	movhi	r2,2
   169b8:	10b43a04 	addi	r2,r2,-12056
   169bc:	10c00f15 	stw	r3,60(r2)
   169c0:	008000b4 	movhi	r2,2
   169c4:	10b43a04 	addi	r2,r2,-12056
   169c8:	10800e17 	ldw	r2,56(r2)
   169cc:	1007883a 	mov	r3,r2
   169d0:	008000b4 	movhi	r2,2
   169d4:	10b43a04 	addi	r2,r2,-12056
   169d8:	10800f17 	ldw	r2,60(r2)
   169dc:	1885383a 	mul	r2,r3,r2
   169e0:	e0bffd05 	stb	r2,-12(fp)
   169e4:	e0bffd03 	ldbu	r2,-12(fp)
   169e8:	10800268 	cmpgeui	r2,r2,9
   169ec:	1000051e 	bne	r2,zero,16a04 <alt_sys_init+0x228>
   169f0:	008000b4 	movhi	r2,2
   169f4:	10b43a04 	addi	r2,r2,-12056
   169f8:	00c00044 	movi	r3,1
   169fc:	10c01015 	stw	r3,64(r2)
   16a00:	00000c06 	br	16a34 <alt_sys_init+0x258>
   16a04:	e0bffd03 	ldbu	r2,-12(fp)
   16a08:	10800468 	cmpgeui	r2,r2,17
   16a0c:	1000051e 	bne	r2,zero,16a24 <alt_sys_init+0x248>
   16a10:	008000b4 	movhi	r2,2
   16a14:	10b43a04 	addi	r2,r2,-12056
   16a18:	00c00084 	movi	r3,2
   16a1c:	10c01015 	stw	r3,64(r2)
   16a20:	00000406 	br	16a34 <alt_sys_init+0x258>
   16a24:	008000b4 	movhi	r2,2
   16a28:	10b43a04 	addi	r2,r2,-12056
   16a2c:	00c00104 	movi	r3,4
   16a30:	10c01015 	stw	r3,64(r2)
   16a34:	008000b4 	movhi	r2,2
   16a38:	10b43a04 	addi	r2,r2,-12056
   16a3c:	10800a17 	ldw	r2,40(r2)
   16a40:	10800304 	addi	r2,r2,12
   16a44:	10800017 	ldw	r2,0(r2)
   16a48:	1005d43a 	srai	r2,r2,16
   16a4c:	e0bffd45 	stb	r2,-11(fp)
   16a50:	008000b4 	movhi	r2,2
   16a54:	10b43a04 	addi	r2,r2,-12056
   16a58:	10800a17 	ldw	r2,40(r2)
   16a5c:	10800304 	addi	r2,r2,12
   16a60:	10800017 	ldw	r2,0(r2)
   16a64:	1004d63a 	srli	r2,r2,24
   16a68:	e0bffd85 	stb	r2,-10(fp)
   16a6c:	008000b4 	movhi	r2,2
   16a70:	10b43a04 	addi	r2,r2,-12056
   16a74:	10801017 	ldw	r2,64(r2)
   16a78:	10800058 	cmpnei	r2,r2,1
   16a7c:	1000041e 	bne	r2,zero,16a90 <alt_sys_init+0x2b4>
   16a80:	008000b4 	movhi	r2,2
   16a84:	10b43a04 	addi	r2,r2,-12056
   16a88:	10001315 	stw	zero,76(r2)
   16a8c:	00000e06 	br	16ac8 <alt_sys_init+0x2ec>
   16a90:	008000b4 	movhi	r2,2
   16a94:	10b43a04 	addi	r2,r2,-12056
   16a98:	10801017 	ldw	r2,64(r2)
   16a9c:	10800098 	cmpnei	r2,r2,2
   16aa0:	1000051e 	bne	r2,zero,16ab8 <alt_sys_init+0x2dc>
   16aa4:	008000b4 	movhi	r2,2
   16aa8:	10b43a04 	addi	r2,r2,-12056
   16aac:	00c00044 	movi	r3,1
   16ab0:	10c01315 	stw	r3,76(r2)
   16ab4:	00000406 	br	16ac8 <alt_sys_init+0x2ec>
   16ab8:	008000b4 	movhi	r2,2
   16abc:	10b43a04 	addi	r2,r2,-12056
   16ac0:	00c00084 	movi	r3,2
   16ac4:	10c01315 	stw	r3,76(r2)
   16ac8:	e0bffd43 	ldbu	r2,-11(fp)
   16acc:	00c00804 	movi	r3,32
   16ad0:	1885c83a 	sub	r2,r3,r2
   16ad4:	00ffffc4 	movi	r3,-1
   16ad8:	1886d83a 	srl	r3,r3,r2
   16adc:	008000b4 	movhi	r2,2
   16ae0:	10b43a04 	addi	r2,r2,-12056
   16ae4:	10c01415 	stw	r3,80(r2)
   16ae8:	e0fffd43 	ldbu	r3,-11(fp)
   16aec:	008000b4 	movhi	r2,2
   16af0:	10b43a04 	addi	r2,r2,-12056
   16af4:	10801317 	ldw	r2,76(r2)
   16af8:	1887883a 	add	r3,r3,r2
   16afc:	008000b4 	movhi	r2,2
   16b00:	10b43a04 	addi	r2,r2,-12056
   16b04:	10c01515 	stw	r3,84(r2)
   16b08:	e0bffd83 	ldbu	r2,-10(fp)
   16b0c:	00c00804 	movi	r3,32
   16b10:	1885c83a 	sub	r2,r3,r2
   16b14:	00ffffc4 	movi	r3,-1
   16b18:	1886d83a 	srl	r3,r3,r2
   16b1c:	008000b4 	movhi	r2,2
   16b20:	10b43a04 	addi	r2,r2,-12056
   16b24:	10c01615 	stw	r3,88(r2)
   16b28:	010000b4 	movhi	r4,2
   16b2c:	21343a04 	addi	r4,r4,-12056
   16b30:	00167700 	call	16770 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   16b34:	008000b4 	movhi	r2,2
   16b38:	10b45104 	addi	r2,r2,-11964
   16b3c:	10800a17 	ldw	r2,40(r2)
   16b40:	10800017 	ldw	r2,0(r2)
   16b44:	1007883a 	mov	r3,r2
   16b48:	008000b4 	movhi	r2,2
   16b4c:	10b45104 	addi	r2,r2,-11964
   16b50:	10c00b15 	stw	r3,44(r2)
   16b54:	008000b4 	movhi	r2,2
   16b58:	10b45104 	addi	r2,r2,-11964
   16b5c:	10800a17 	ldw	r2,40(r2)
   16b60:	10800104 	addi	r2,r2,4
   16b64:	10800017 	ldw	r2,0(r2)
   16b68:	1007883a 	mov	r3,r2
   16b6c:	008000b4 	movhi	r2,2
   16b70:	10b45104 	addi	r2,r2,-11964
   16b74:	10c00c15 	stw	r3,48(r2)
   16b78:	008000b4 	movhi	r2,2
   16b7c:	10b45104 	addi	r2,r2,-11964
   16b80:	10800a17 	ldw	r2,40(r2)
   16b84:	10800204 	addi	r2,r2,8
   16b88:	10800017 	ldw	r2,0(r2)
   16b8c:	10ffffcc 	andi	r3,r2,65535
   16b90:	008000b4 	movhi	r2,2
   16b94:	10b45104 	addi	r2,r2,-11964
   16b98:	10c01115 	stw	r3,68(r2)
   16b9c:	008000b4 	movhi	r2,2
   16ba0:	10b45104 	addi	r2,r2,-11964
   16ba4:	10800a17 	ldw	r2,40(r2)
   16ba8:	10800204 	addi	r2,r2,8
   16bac:	10800017 	ldw	r2,0(r2)
   16bb0:	1006d43a 	srli	r3,r2,16
   16bb4:	008000b4 	movhi	r2,2
   16bb8:	10b45104 	addi	r2,r2,-11964
   16bbc:	10c01215 	stw	r3,72(r2)
   16bc0:	008000b4 	movhi	r2,2
   16bc4:	10b45104 	addi	r2,r2,-11964
   16bc8:	10800a17 	ldw	r2,40(r2)
   16bcc:	10800304 	addi	r2,r2,12
   16bd0:	10800017 	ldw	r2,0(r2)
   16bd4:	1005d07a 	srai	r2,r2,1
   16bd8:	10c0004c 	andi	r3,r2,1
   16bdc:	008000b4 	movhi	r2,2
   16be0:	10b45104 	addi	r2,r2,-11964
   16be4:	10c00d15 	stw	r3,52(r2)
   16be8:	008000b4 	movhi	r2,2
   16bec:	10b45104 	addi	r2,r2,-11964
   16bf0:	10800a17 	ldw	r2,40(r2)
   16bf4:	10800304 	addi	r2,r2,12
   16bf8:	10800017 	ldw	r2,0(r2)
   16bfc:	1005d23a 	srai	r2,r2,8
   16c00:	108003cc 	andi	r2,r2,15
   16c04:	10800044 	addi	r2,r2,1
   16c08:	1007883a 	mov	r3,r2
   16c0c:	008000b4 	movhi	r2,2
   16c10:	10b45104 	addi	r2,r2,-11964
   16c14:	10c00e15 	stw	r3,56(r2)
   16c18:	008000b4 	movhi	r2,2
   16c1c:	10b45104 	addi	r2,r2,-11964
   16c20:	10800a17 	ldw	r2,40(r2)
   16c24:	10800304 	addi	r2,r2,12
   16c28:	10800017 	ldw	r2,0(r2)
   16c2c:	1005d1ba 	srai	r2,r2,6
   16c30:	108000cc 	andi	r2,r2,3
   16c34:	10800044 	addi	r2,r2,1
   16c38:	1007883a 	mov	r3,r2
   16c3c:	008000b4 	movhi	r2,2
   16c40:	10b45104 	addi	r2,r2,-11964
   16c44:	10c00f15 	stw	r3,60(r2)
   16c48:	008000b4 	movhi	r2,2
   16c4c:	10b45104 	addi	r2,r2,-11964
   16c50:	10800e17 	ldw	r2,56(r2)
   16c54:	1007883a 	mov	r3,r2
   16c58:	008000b4 	movhi	r2,2
   16c5c:	10b45104 	addi	r2,r2,-11964
   16c60:	10800f17 	ldw	r2,60(r2)
   16c64:	1885383a 	mul	r2,r3,r2
   16c68:	e0bffdc5 	stb	r2,-9(fp)
   16c6c:	e0bffdc3 	ldbu	r2,-9(fp)
   16c70:	10800268 	cmpgeui	r2,r2,9
   16c74:	1000051e 	bne	r2,zero,16c8c <alt_sys_init+0x4b0>
   16c78:	008000b4 	movhi	r2,2
   16c7c:	10b45104 	addi	r2,r2,-11964
   16c80:	00c00044 	movi	r3,1
   16c84:	10c01015 	stw	r3,64(r2)
   16c88:	00000c06 	br	16cbc <alt_sys_init+0x4e0>
   16c8c:	e0bffdc3 	ldbu	r2,-9(fp)
   16c90:	10800468 	cmpgeui	r2,r2,17
   16c94:	1000051e 	bne	r2,zero,16cac <alt_sys_init+0x4d0>
   16c98:	008000b4 	movhi	r2,2
   16c9c:	10b45104 	addi	r2,r2,-11964
   16ca0:	00c00084 	movi	r3,2
   16ca4:	10c01015 	stw	r3,64(r2)
   16ca8:	00000406 	br	16cbc <alt_sys_init+0x4e0>
   16cac:	008000b4 	movhi	r2,2
   16cb0:	10b45104 	addi	r2,r2,-11964
   16cb4:	00c00104 	movi	r3,4
   16cb8:	10c01015 	stw	r3,64(r2)
   16cbc:	008000b4 	movhi	r2,2
   16cc0:	10b45104 	addi	r2,r2,-11964
   16cc4:	10800a17 	ldw	r2,40(r2)
   16cc8:	10800304 	addi	r2,r2,12
   16ccc:	10800017 	ldw	r2,0(r2)
   16cd0:	1005d43a 	srai	r2,r2,16
   16cd4:	e0bffe05 	stb	r2,-8(fp)
   16cd8:	008000b4 	movhi	r2,2
   16cdc:	10b45104 	addi	r2,r2,-11964
   16ce0:	10800a17 	ldw	r2,40(r2)
   16ce4:	10800304 	addi	r2,r2,12
   16ce8:	10800017 	ldw	r2,0(r2)
   16cec:	1004d63a 	srli	r2,r2,24
   16cf0:	e0bffe45 	stb	r2,-7(fp)
   16cf4:	008000b4 	movhi	r2,2
   16cf8:	10b45104 	addi	r2,r2,-11964
   16cfc:	10801017 	ldw	r2,64(r2)
   16d00:	10800058 	cmpnei	r2,r2,1
   16d04:	1000041e 	bne	r2,zero,16d18 <alt_sys_init+0x53c>
   16d08:	008000b4 	movhi	r2,2
   16d0c:	10b45104 	addi	r2,r2,-11964
   16d10:	10001315 	stw	zero,76(r2)
   16d14:	00000e06 	br	16d50 <alt_sys_init+0x574>
   16d18:	008000b4 	movhi	r2,2
   16d1c:	10b45104 	addi	r2,r2,-11964
   16d20:	10801017 	ldw	r2,64(r2)
   16d24:	10800098 	cmpnei	r2,r2,2
   16d28:	1000051e 	bne	r2,zero,16d40 <alt_sys_init+0x564>
   16d2c:	008000b4 	movhi	r2,2
   16d30:	10b45104 	addi	r2,r2,-11964
   16d34:	00c00044 	movi	r3,1
   16d38:	10c01315 	stw	r3,76(r2)
   16d3c:	00000406 	br	16d50 <alt_sys_init+0x574>
   16d40:	008000b4 	movhi	r2,2
   16d44:	10b45104 	addi	r2,r2,-11964
   16d48:	00c00084 	movi	r3,2
   16d4c:	10c01315 	stw	r3,76(r2)
   16d50:	e0bffe03 	ldbu	r2,-8(fp)
   16d54:	00c00804 	movi	r3,32
   16d58:	1885c83a 	sub	r2,r3,r2
   16d5c:	00ffffc4 	movi	r3,-1
   16d60:	1886d83a 	srl	r3,r3,r2
   16d64:	008000b4 	movhi	r2,2
   16d68:	10b45104 	addi	r2,r2,-11964
   16d6c:	10c01415 	stw	r3,80(r2)
   16d70:	e0fffe03 	ldbu	r3,-8(fp)
   16d74:	008000b4 	movhi	r2,2
   16d78:	10b45104 	addi	r2,r2,-11964
   16d7c:	10801317 	ldw	r2,76(r2)
   16d80:	1887883a 	add	r3,r3,r2
   16d84:	008000b4 	movhi	r2,2
   16d88:	10b45104 	addi	r2,r2,-11964
   16d8c:	10c01515 	stw	r3,84(r2)
   16d90:	e0bffe43 	ldbu	r2,-7(fp)
   16d94:	00c00804 	movi	r3,32
   16d98:	1885c83a 	sub	r2,r3,r2
   16d9c:	00ffffc4 	movi	r3,-1
   16da0:	1886d83a 	srl	r3,r3,r2
   16da4:	008000b4 	movhi	r2,2
   16da8:	10b45104 	addi	r2,r2,-11964
   16dac:	10c01615 	stw	r3,88(r2)
   16db0:	010000b4 	movhi	r4,2
   16db4:	21345104 	addi	r4,r4,-11964
   16db8:	00167700 	call	16770 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VIDEO_IN_SUBSYSTEM_VIDEO_IN_DMA, Video_In_Subsystem_Video_In_DMA);
   16dbc:	008000b4 	movhi	r2,2
   16dc0:	10b46804 	addi	r2,r2,-11872
   16dc4:	10800a17 	ldw	r2,40(r2)
   16dc8:	10800017 	ldw	r2,0(r2)
   16dcc:	1007883a 	mov	r3,r2
   16dd0:	008000b4 	movhi	r2,2
   16dd4:	10b46804 	addi	r2,r2,-11872
   16dd8:	10c00b15 	stw	r3,44(r2)
   16ddc:	008000b4 	movhi	r2,2
   16de0:	10b46804 	addi	r2,r2,-11872
   16de4:	10800a17 	ldw	r2,40(r2)
   16de8:	10800104 	addi	r2,r2,4
   16dec:	10800017 	ldw	r2,0(r2)
   16df0:	1007883a 	mov	r3,r2
   16df4:	008000b4 	movhi	r2,2
   16df8:	10b46804 	addi	r2,r2,-11872
   16dfc:	10c00c15 	stw	r3,48(r2)
   16e00:	008000b4 	movhi	r2,2
   16e04:	10b46804 	addi	r2,r2,-11872
   16e08:	10800a17 	ldw	r2,40(r2)
   16e0c:	10800204 	addi	r2,r2,8
   16e10:	10800017 	ldw	r2,0(r2)
   16e14:	10ffffcc 	andi	r3,r2,65535
   16e18:	008000b4 	movhi	r2,2
   16e1c:	10b46804 	addi	r2,r2,-11872
   16e20:	10c01115 	stw	r3,68(r2)
   16e24:	008000b4 	movhi	r2,2
   16e28:	10b46804 	addi	r2,r2,-11872
   16e2c:	10800a17 	ldw	r2,40(r2)
   16e30:	10800204 	addi	r2,r2,8
   16e34:	10800017 	ldw	r2,0(r2)
   16e38:	1006d43a 	srli	r3,r2,16
   16e3c:	008000b4 	movhi	r2,2
   16e40:	10b46804 	addi	r2,r2,-11872
   16e44:	10c01215 	stw	r3,72(r2)
   16e48:	008000b4 	movhi	r2,2
   16e4c:	10b46804 	addi	r2,r2,-11872
   16e50:	10800a17 	ldw	r2,40(r2)
   16e54:	10800304 	addi	r2,r2,12
   16e58:	10800017 	ldw	r2,0(r2)
   16e5c:	1005d07a 	srai	r2,r2,1
   16e60:	10c0004c 	andi	r3,r2,1
   16e64:	008000b4 	movhi	r2,2
   16e68:	10b46804 	addi	r2,r2,-11872
   16e6c:	10c00d15 	stw	r3,52(r2)
   16e70:	008000b4 	movhi	r2,2
   16e74:	10b46804 	addi	r2,r2,-11872
   16e78:	10800a17 	ldw	r2,40(r2)
   16e7c:	10800304 	addi	r2,r2,12
   16e80:	10800017 	ldw	r2,0(r2)
   16e84:	1005d23a 	srai	r2,r2,8
   16e88:	108003cc 	andi	r2,r2,15
   16e8c:	10800044 	addi	r2,r2,1
   16e90:	1007883a 	mov	r3,r2
   16e94:	008000b4 	movhi	r2,2
   16e98:	10b46804 	addi	r2,r2,-11872
   16e9c:	10c00e15 	stw	r3,56(r2)
   16ea0:	008000b4 	movhi	r2,2
   16ea4:	10b46804 	addi	r2,r2,-11872
   16ea8:	10800a17 	ldw	r2,40(r2)
   16eac:	10800304 	addi	r2,r2,12
   16eb0:	10800017 	ldw	r2,0(r2)
   16eb4:	1005d1ba 	srai	r2,r2,6
   16eb8:	108000cc 	andi	r2,r2,3
   16ebc:	10800044 	addi	r2,r2,1
   16ec0:	1007883a 	mov	r3,r2
   16ec4:	008000b4 	movhi	r2,2
   16ec8:	10b46804 	addi	r2,r2,-11872
   16ecc:	10c00f15 	stw	r3,60(r2)
   16ed0:	008000b4 	movhi	r2,2
   16ed4:	10b46804 	addi	r2,r2,-11872
   16ed8:	10800e17 	ldw	r2,56(r2)
   16edc:	1007883a 	mov	r3,r2
   16ee0:	008000b4 	movhi	r2,2
   16ee4:	10b46804 	addi	r2,r2,-11872
   16ee8:	10800f17 	ldw	r2,60(r2)
   16eec:	1885383a 	mul	r2,r3,r2
   16ef0:	e0bffe85 	stb	r2,-6(fp)
   16ef4:	e0bffe83 	ldbu	r2,-6(fp)
   16ef8:	10800268 	cmpgeui	r2,r2,9
   16efc:	1000051e 	bne	r2,zero,16f14 <alt_sys_init+0x738>
   16f00:	008000b4 	movhi	r2,2
   16f04:	10b46804 	addi	r2,r2,-11872
   16f08:	00c00044 	movi	r3,1
   16f0c:	10c01015 	stw	r3,64(r2)
   16f10:	00000c06 	br	16f44 <alt_sys_init+0x768>
   16f14:	e0bffe83 	ldbu	r2,-6(fp)
   16f18:	10800468 	cmpgeui	r2,r2,17
   16f1c:	1000051e 	bne	r2,zero,16f34 <alt_sys_init+0x758>
   16f20:	008000b4 	movhi	r2,2
   16f24:	10b46804 	addi	r2,r2,-11872
   16f28:	00c00084 	movi	r3,2
   16f2c:	10c01015 	stw	r3,64(r2)
   16f30:	00000406 	br	16f44 <alt_sys_init+0x768>
   16f34:	008000b4 	movhi	r2,2
   16f38:	10b46804 	addi	r2,r2,-11872
   16f3c:	00c00104 	movi	r3,4
   16f40:	10c01015 	stw	r3,64(r2)
   16f44:	008000b4 	movhi	r2,2
   16f48:	10b46804 	addi	r2,r2,-11872
   16f4c:	10800a17 	ldw	r2,40(r2)
   16f50:	10800304 	addi	r2,r2,12
   16f54:	10800017 	ldw	r2,0(r2)
   16f58:	1005d43a 	srai	r2,r2,16
   16f5c:	e0bffec5 	stb	r2,-5(fp)
   16f60:	008000b4 	movhi	r2,2
   16f64:	10b46804 	addi	r2,r2,-11872
   16f68:	10800a17 	ldw	r2,40(r2)
   16f6c:	10800304 	addi	r2,r2,12
   16f70:	10800017 	ldw	r2,0(r2)
   16f74:	1004d63a 	srli	r2,r2,24
   16f78:	e0bfff05 	stb	r2,-4(fp)
   16f7c:	008000b4 	movhi	r2,2
   16f80:	10b46804 	addi	r2,r2,-11872
   16f84:	10801017 	ldw	r2,64(r2)
   16f88:	10800058 	cmpnei	r2,r2,1
   16f8c:	1000041e 	bne	r2,zero,16fa0 <alt_sys_init+0x7c4>
   16f90:	008000b4 	movhi	r2,2
   16f94:	10b46804 	addi	r2,r2,-11872
   16f98:	10001315 	stw	zero,76(r2)
   16f9c:	00000e06 	br	16fd8 <alt_sys_init+0x7fc>
   16fa0:	008000b4 	movhi	r2,2
   16fa4:	10b46804 	addi	r2,r2,-11872
   16fa8:	10801017 	ldw	r2,64(r2)
   16fac:	10800098 	cmpnei	r2,r2,2
   16fb0:	1000051e 	bne	r2,zero,16fc8 <alt_sys_init+0x7ec>
   16fb4:	008000b4 	movhi	r2,2
   16fb8:	10b46804 	addi	r2,r2,-11872
   16fbc:	00c00044 	movi	r3,1
   16fc0:	10c01315 	stw	r3,76(r2)
   16fc4:	00000406 	br	16fd8 <alt_sys_init+0x7fc>
   16fc8:	008000b4 	movhi	r2,2
   16fcc:	10b46804 	addi	r2,r2,-11872
   16fd0:	00c00084 	movi	r3,2
   16fd4:	10c01315 	stw	r3,76(r2)
   16fd8:	e0bffec3 	ldbu	r2,-5(fp)
   16fdc:	00c00804 	movi	r3,32
   16fe0:	1885c83a 	sub	r2,r3,r2
   16fe4:	00ffffc4 	movi	r3,-1
   16fe8:	1886d83a 	srl	r3,r3,r2
   16fec:	008000b4 	movhi	r2,2
   16ff0:	10b46804 	addi	r2,r2,-11872
   16ff4:	10c01415 	stw	r3,80(r2)
   16ff8:	e0fffec3 	ldbu	r3,-5(fp)
   16ffc:	008000b4 	movhi	r2,2
   17000:	10b46804 	addi	r2,r2,-11872
   17004:	10801317 	ldw	r2,76(r2)
   17008:	1887883a 	add	r3,r3,r2
   1700c:	008000b4 	movhi	r2,2
   17010:	10b46804 	addi	r2,r2,-11872
   17014:	10c01515 	stw	r3,84(r2)
   17018:	e0bfff03 	ldbu	r2,-4(fp)
   1701c:	00c00804 	movi	r3,32
   17020:	1885c83a 	sub	r2,r3,r2
   17024:	00ffffc4 	movi	r3,-1
   17028:	1886d83a 	srl	r3,r3,r2
   1702c:	008000b4 	movhi	r2,2
   17030:	10b46804 	addi	r2,r2,-11872
   17034:	10c01615 	stw	r3,88(r2)
   17038:	010000b4 	movhi	r4,2
   1703c:	21346804 	addi	r4,r4,-11872
   17040:	00167700 	call	16770 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_RGB_RESAMPLER, VGA_Subsystem_VGA_Pixel_RGB_Resampler);
   17044:	008000b4 	movhi	r2,2
   17048:	10b47f04 	addi	r2,r2,-11780
   1704c:	10800a17 	ldw	r2,40(r2)
   17050:	10800017 	ldw	r2,0(r2)
   17054:	10c003cc 	andi	r3,r2,15
   17058:	008000b4 	movhi	r2,2
   1705c:	10b47f04 	addi	r2,r2,-11780
   17060:	10c00b15 	stw	r3,44(r2)
   17064:	008000b4 	movhi	r2,2
   17068:	10b47f04 	addi	r2,r2,-11780
   1706c:	10800a17 	ldw	r2,40(r2)
   17070:	10800017 	ldw	r2,0(r2)
   17074:	1005d13a 	srai	r2,r2,4
   17078:	10c0004c 	andi	r3,r2,1
   1707c:	008000b4 	movhi	r2,2
   17080:	10b47f04 	addi	r2,r2,-11780
   17084:	10c00c15 	stw	r3,48(r2)
   17088:	008000b4 	movhi	r2,2
   1708c:	10b47f04 	addi	r2,r2,-11780
   17090:	10800a17 	ldw	r2,40(r2)
   17094:	10800017 	ldw	r2,0(r2)
   17098:	1005d17a 	srai	r2,r2,5
   1709c:	10c0004c 	andi	r3,r2,1
   170a0:	008000b4 	movhi	r2,2
   170a4:	10b47f04 	addi	r2,r2,-11780
   170a8:	10c00d15 	stw	r3,52(r2)
   170ac:	008000b4 	movhi	r2,2
   170b0:	10b47f04 	addi	r2,r2,-11780
   170b4:	10800a17 	ldw	r2,40(r2)
   170b8:	10800017 	ldw	r2,0(r2)
   170bc:	1005d43a 	srai	r2,r2,16
   170c0:	10c003cc 	andi	r3,r2,15
   170c4:	008000b4 	movhi	r2,2
   170c8:	10b47f04 	addi	r2,r2,-11780
   170cc:	10c00e15 	stw	r3,56(r2)
   170d0:	008000b4 	movhi	r2,2
   170d4:	10b47f04 	addi	r2,r2,-11780
   170d8:	10800a17 	ldw	r2,40(r2)
   170dc:	10800017 	ldw	r2,0(r2)
   170e0:	1005d53a 	srai	r2,r2,20
   170e4:	10c0004c 	andi	r3,r2,1
   170e8:	008000b4 	movhi	r2,2
   170ec:	10b47f04 	addi	r2,r2,-11780
   170f0:	10c00f15 	stw	r3,60(r2)
   170f4:	008000b4 	movhi	r2,2
   170f8:	10b47f04 	addi	r2,r2,-11780
   170fc:	10800a17 	ldw	r2,40(r2)
   17100:	10800017 	ldw	r2,0(r2)
   17104:	1005d57a 	srai	r2,r2,21
   17108:	10c0004c 	andi	r3,r2,1
   1710c:	008000b4 	movhi	r2,2
   17110:	10b47f04 	addi	r2,r2,-11780
   17114:	10c01015 	stw	r3,64(r2)
   17118:	010000b4 	movhi	r4,2
   1711c:	21347f04 	addi	r4,r4,-11780
   17120:	00167700 	call	16770 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   17124:	010000b4 	movhi	r4,2
   17128:	21349004 	addi	r4,r4,-11712
   1712c:	00167700 	call	16770 <alt_dev_reg>
}
   17130:	0001883a 	nop
   17134:	e037883a 	mov	sp,fp
   17138:	dfc00117 	ldw	ra,4(sp)
   1713c:	df000017 	ldw	fp,0(sp)
   17140:	dec00204 	addi	sp,sp,8
   17144:	f800283a 	ret

00017148 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   17148:	defffa04 	addi	sp,sp,-24
   1714c:	dfc00515 	stw	ra,20(sp)
   17150:	df000415 	stw	fp,16(sp)
   17154:	df000404 	addi	fp,sp,16
   17158:	e13ffd15 	stw	r4,-12(fp)
   1715c:	e17ffe15 	stw	r5,-8(fp)
   17160:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   17164:	e0bffd17 	ldw	r2,-12(fp)
   17168:	10800017 	ldw	r2,0(r2)
   1716c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   17170:	e0bffc17 	ldw	r2,-16(fp)
   17174:	10c00a04 	addi	r3,r2,40
   17178:	e0bffd17 	ldw	r2,-12(fp)
   1717c:	10800217 	ldw	r2,8(r2)
   17180:	100f883a 	mov	r7,r2
   17184:	e1bfff17 	ldw	r6,-4(fp)
   17188:	e17ffe17 	ldw	r5,-8(fp)
   1718c:	1809883a 	mov	r4,r3
   17190:	00178ec0 	call	178ec <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   17194:	e037883a 	mov	sp,fp
   17198:	dfc00117 	ldw	ra,4(sp)
   1719c:	df000017 	ldw	fp,0(sp)
   171a0:	dec00204 	addi	sp,sp,8
   171a4:	f800283a 	ret

000171a8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   171a8:	defffa04 	addi	sp,sp,-24
   171ac:	dfc00515 	stw	ra,20(sp)
   171b0:	df000415 	stw	fp,16(sp)
   171b4:	df000404 	addi	fp,sp,16
   171b8:	e13ffd15 	stw	r4,-12(fp)
   171bc:	e17ffe15 	stw	r5,-8(fp)
   171c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   171c4:	e0bffd17 	ldw	r2,-12(fp)
   171c8:	10800017 	ldw	r2,0(r2)
   171cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   171d0:	e0bffc17 	ldw	r2,-16(fp)
   171d4:	10c00a04 	addi	r3,r2,40
   171d8:	e0bffd17 	ldw	r2,-12(fp)
   171dc:	10800217 	ldw	r2,8(r2)
   171e0:	100f883a 	mov	r7,r2
   171e4:	e1bfff17 	ldw	r6,-4(fp)
   171e8:	e17ffe17 	ldw	r5,-8(fp)
   171ec:	1809883a 	mov	r4,r3
   171f0:	0017ba80 	call	17ba8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   171f4:	e037883a 	mov	sp,fp
   171f8:	dfc00117 	ldw	ra,4(sp)
   171fc:	df000017 	ldw	fp,0(sp)
   17200:	dec00204 	addi	sp,sp,8
   17204:	f800283a 	ret

00017208 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   17208:	defffc04 	addi	sp,sp,-16
   1720c:	dfc00315 	stw	ra,12(sp)
   17210:	df000215 	stw	fp,8(sp)
   17214:	df000204 	addi	fp,sp,8
   17218:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1721c:	e0bfff17 	ldw	r2,-4(fp)
   17220:	10800017 	ldw	r2,0(r2)
   17224:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   17228:	e0bffe17 	ldw	r2,-8(fp)
   1722c:	10c00a04 	addi	r3,r2,40
   17230:	e0bfff17 	ldw	r2,-4(fp)
   17234:	10800217 	ldw	r2,8(r2)
   17238:	100b883a 	mov	r5,r2
   1723c:	1809883a 	mov	r4,r3
   17240:	00177940 	call	17794 <altera_avalon_jtag_uart_close>
}
   17244:	e037883a 	mov	sp,fp
   17248:	dfc00117 	ldw	ra,4(sp)
   1724c:	df000017 	ldw	fp,0(sp)
   17250:	dec00204 	addi	sp,sp,8
   17254:	f800283a 	ret

00017258 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   17258:	defffa04 	addi	sp,sp,-24
   1725c:	dfc00515 	stw	ra,20(sp)
   17260:	df000415 	stw	fp,16(sp)
   17264:	df000404 	addi	fp,sp,16
   17268:	e13ffd15 	stw	r4,-12(fp)
   1726c:	e17ffe15 	stw	r5,-8(fp)
   17270:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   17274:	e0bffd17 	ldw	r2,-12(fp)
   17278:	10800017 	ldw	r2,0(r2)
   1727c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   17280:	e0bffc17 	ldw	r2,-16(fp)
   17284:	10800a04 	addi	r2,r2,40
   17288:	e1bfff17 	ldw	r6,-4(fp)
   1728c:	e17ffe17 	ldw	r5,-8(fp)
   17290:	1009883a 	mov	r4,r2
   17294:	00177fc0 	call	177fc <altera_avalon_jtag_uart_ioctl>
}
   17298:	e037883a 	mov	sp,fp
   1729c:	dfc00117 	ldw	ra,4(sp)
   172a0:	df000017 	ldw	fp,0(sp)
   172a4:	dec00204 	addi	sp,sp,8
   172a8:	f800283a 	ret

000172ac <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   172ac:	defff204 	addi	sp,sp,-56
   172b0:	dfc00d15 	stw	ra,52(sp)
   172b4:	df000c15 	stw	fp,48(sp)
   172b8:	df000c04 	addi	fp,sp,48
   172bc:	e13ff915 	stw	r4,-28(fp)
   172c0:	e17ffa15 	stw	r5,-24(fp)
   172c4:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   172c8:	e0bff917 	ldw	r2,-28(fp)
   172cc:	10800c04 	addi	r2,r2,48
   172d0:	e0bff415 	stw	r2,-48(fp)
   172d4:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   172d8:	e0bff80b 	ldhu	r2,-32(fp)
   172dc:	e0fff884 	addi	r3,fp,-30
   172e0:	180b883a 	mov	r5,r3
   172e4:	1009883a 	mov	r4,r2
   172e8:	001144c0 	call	1144c <OSFlagCreate>
   172ec:	1007883a 	mov	r3,r2
   172f0:	e0bff417 	ldw	r2,-48(fp)
   172f4:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   172f8:	e0bff917 	ldw	r2,-28(fp)
   172fc:	10800a04 	addi	r2,r2,40
   17300:	e0bff515 	stw	r2,-44(fp)
   17304:	00800044 	movi	r2,1
   17308:	e0bff78d 	sth	r2,-34(fp)
   1730c:	e0bff78b 	ldhu	r2,-34(fp)
   17310:	1009883a 	mov	r4,r2
   17314:	00141600 	call	14160 <OSSemCreate>
   17318:	1007883a 	mov	r3,r2
   1731c:	e0bff517 	ldw	r2,-44(fp)
   17320:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   17324:	e0bff917 	ldw	r2,-28(fp)
   17328:	10800b04 	addi	r2,r2,44
   1732c:	e0bff615 	stw	r2,-40(fp)
   17330:	00800044 	movi	r2,1
   17334:	e0bff70d 	sth	r2,-36(fp)
   17338:	e0bff70b 	ldhu	r2,-36(fp)
   1733c:	1009883a 	mov	r4,r2
   17340:	00141600 	call	14160 <OSSemCreate>
   17344:	1007883a 	mov	r3,r2
   17348:	e0bff617 	ldw	r2,-40(fp)
   1734c:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   17350:	e0bff917 	ldw	r2,-28(fp)
   17354:	00c00044 	movi	r3,1
   17358:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1735c:	e0bff917 	ldw	r2,-28(fp)
   17360:	10800017 	ldw	r2,0(r2)
   17364:	10800104 	addi	r2,r2,4
   17368:	1007883a 	mov	r3,r2
   1736c:	e0bff917 	ldw	r2,-28(fp)
   17370:	10800817 	ldw	r2,32(r2)
   17374:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   17378:	e0bffb17 	ldw	r2,-20(fp)
   1737c:	01800074 	movhi	r6,1
   17380:	319cfa04 	addi	r6,r6,29672
   17384:	e17ff917 	ldw	r5,-28(fp)
   17388:	1009883a 	mov	r4,r2
   1738c:	001970c0 	call	1970c <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   17390:	e0bff917 	ldw	r2,-28(fp)
   17394:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   17398:	e0bff917 	ldw	r2,-28(fp)
   1739c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   173a0:	d0e84d17 	ldw	r3,-24268(gp)
   173a4:	e1fff917 	ldw	r7,-28(fp)
   173a8:	01800074 	movhi	r6,1
   173ac:	319da404 	addi	r6,r6,30352
   173b0:	180b883a 	mov	r5,r3
   173b4:	1009883a 	mov	r4,r2
   173b8:	001921c0 	call	1921c <alt_alarm_start>
   173bc:	1000040e 	bge	r2,zero,173d0 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   173c0:	e0fff917 	ldw	r3,-28(fp)
   173c4:	00a00034 	movhi	r2,32768
   173c8:	10bfffc4 	addi	r2,r2,-1
   173cc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   173d0:	0001883a 	nop
   173d4:	e037883a 	mov	sp,fp
   173d8:	dfc00117 	ldw	ra,4(sp)
   173dc:	df000017 	ldw	fp,0(sp)
   173e0:	dec00204 	addi	sp,sp,8
   173e4:	f800283a 	ret

000173e8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   173e8:	defff104 	addi	sp,sp,-60
   173ec:	dfc00e15 	stw	ra,56(sp)
   173f0:	df000d15 	stw	fp,52(sp)
   173f4:	df000d04 	addi	fp,sp,52
   173f8:	e13ffe15 	stw	r4,-8(fp)
   173fc:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   17400:	e0bffe17 	ldw	r2,-8(fp)
   17404:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   17408:	e0bff517 	ldw	r2,-44(fp)
   1740c:	10800017 	ldw	r2,0(r2)
   17410:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   17414:	e0bff617 	ldw	r2,-40(fp)
   17418:	10800104 	addi	r2,r2,4
   1741c:	10800037 	ldwio	r2,0(r2)
   17420:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   17424:	e0bff717 	ldw	r2,-36(fp)
   17428:	1080c00c 	andi	r2,r2,768
   1742c:	10009126 	beq	r2,zero,17674 <altera_avalon_jtag_uart_irq+0x28c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   17430:	e0bff717 	ldw	r2,-36(fp)
   17434:	1080400c 	andi	r2,r2,256
   17438:	10004726 	beq	r2,zero,17558 <altera_avalon_jtag_uart_irq+0x170>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1743c:	00800074 	movhi	r2,1
   17440:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   17444:	e0bff517 	ldw	r2,-44(fp)
   17448:	10800d17 	ldw	r2,52(r2)
   1744c:	10800044 	addi	r2,r2,1
   17450:	1081ffcc 	andi	r2,r2,2047
   17454:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   17458:	e0bff517 	ldw	r2,-44(fp)
   1745c:	10c00e17 	ldw	r3,56(r2)
   17460:	e0bff817 	ldw	r2,-32(fp)
   17464:	18802726 	beq	r3,r2,17504 <altera_avalon_jtag_uart_irq+0x11c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   17468:	e0bff617 	ldw	r2,-40(fp)
   1746c:	10800037 	ldwio	r2,0(r2)
   17470:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   17474:	e0bff317 	ldw	r2,-52(fp)
   17478:	10a0000c 	andi	r2,r2,32768
   1747c:	10002326 	beq	r2,zero,1750c <altera_avalon_jtag_uart_irq+0x124>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   17480:	e0bff517 	ldw	r2,-44(fp)
   17484:	10800d17 	ldw	r2,52(r2)
   17488:	e0fff317 	ldw	r3,-52(fp)
   1748c:	1809883a 	mov	r4,r3
   17490:	e0fff517 	ldw	r3,-44(fp)
   17494:	1885883a 	add	r2,r3,r2
   17498:	10801104 	addi	r2,r2,68
   1749c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   174a0:	e0bff517 	ldw	r2,-44(fp)
   174a4:	10800d17 	ldw	r2,52(r2)
   174a8:	10800044 	addi	r2,r2,1
   174ac:	10c1ffcc 	andi	r3,r2,2047
   174b0:	e0bff517 	ldw	r2,-44(fp)
   174b4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   174b8:	e0bff517 	ldw	r2,-44(fp)
   174bc:	10800c17 	ldw	r2,48(r2)
   174c0:	e0bffa15 	stw	r2,-24(fp)
   174c4:	00800044 	movi	r2,1
   174c8:	e0bffb0d 	sth	r2,-20(fp)
   174cc:	00800044 	movi	r2,1
   174d0:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   174d4:	d0a83843 	ldbu	r2,-24351(gp)
   174d8:	10803fcc 	andi	r2,r2,255
   174dc:	103fd926 	beq	r2,zero,17444 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017444>
  {
    OSFlagPost (group, flags, opt, &err);
   174e0:	e0bffb0b 	ldhu	r2,-20(fp)
   174e4:	e0fffb83 	ldbu	r3,-18(fp)
   174e8:	e13ffcc4 	addi	r4,fp,-13
   174ec:	200f883a 	mov	r7,r4
   174f0:	180d883a 	mov	r6,r3
   174f4:	100b883a 	mov	r5,r2
   174f8:	e13ffa17 	ldw	r4,-24(fp)
   174fc:	00120280 	call	12028 <OSFlagPost>
      }
   17500:	003fd006 	br	17444 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017444>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   17504:	0001883a 	nop
   17508:	00000106 	br	17510 <altera_avalon_jtag_uart_irq+0x128>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   1750c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   17510:	e0bff317 	ldw	r2,-52(fp)
   17514:	10bfffec 	andhi	r2,r2,65535
   17518:	10000f26 	beq	r2,zero,17558 <altera_avalon_jtag_uart_irq+0x170>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1751c:	e0bff517 	ldw	r2,-44(fp)
   17520:	10c00817 	ldw	r3,32(r2)
   17524:	00bfff84 	movi	r2,-2
   17528:	1886703a 	and	r3,r3,r2
   1752c:	e0bff517 	ldw	r2,-44(fp)
   17530:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   17534:	e0bff617 	ldw	r2,-40(fp)
   17538:	10800104 	addi	r2,r2,4
   1753c:	1007883a 	mov	r3,r2
   17540:	e0bff517 	ldw	r2,-44(fp)
   17544:	10800817 	ldw	r2,32(r2)
   17548:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1754c:	e0bff617 	ldw	r2,-40(fp)
   17550:	10800104 	addi	r2,r2,4
   17554:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   17558:	e0bff717 	ldw	r2,-36(fp)
   1755c:	1080800c 	andi	r2,r2,512
   17560:	103fac26 	beq	r2,zero,17414 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017414>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   17564:	e0bff717 	ldw	r2,-36(fp)
   17568:	1004d43a 	srli	r2,r2,16
   1756c:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   17570:	00002606 	br	1760c <altera_avalon_jtag_uart_irq+0x224>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   17574:	e0bff617 	ldw	r2,-40(fp)
   17578:	e0fff517 	ldw	r3,-44(fp)
   1757c:	18c01017 	ldw	r3,64(r3)
   17580:	e13ff517 	ldw	r4,-44(fp)
   17584:	20c7883a 	add	r3,r4,r3
   17588:	18c21104 	addi	r3,r3,2116
   1758c:	18c00003 	ldbu	r3,0(r3)
   17590:	18c03fcc 	andi	r3,r3,255
   17594:	18c0201c 	xori	r3,r3,128
   17598:	18ffe004 	addi	r3,r3,-128
   1759c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   175a0:	e0bff517 	ldw	r2,-44(fp)
   175a4:	10801017 	ldw	r2,64(r2)
   175a8:	10800044 	addi	r2,r2,1
   175ac:	10c1ffcc 	andi	r3,r2,2047
   175b0:	e0bff517 	ldw	r2,-44(fp)
   175b4:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   175b8:	e0bff517 	ldw	r2,-44(fp)
   175bc:	10800c17 	ldw	r2,48(r2)
   175c0:	e0bff915 	stw	r2,-28(fp)
   175c4:	00800084 	movi	r2,2
   175c8:	e0bffc0d 	sth	r2,-16(fp)
   175cc:	00800044 	movi	r2,1
   175d0:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   175d4:	d0a83843 	ldbu	r2,-24351(gp)
   175d8:	10803fcc 	andi	r2,r2,255
   175dc:	10000826 	beq	r2,zero,17600 <altera_avalon_jtag_uart_irq+0x218>
  {
    OSFlagPost (group, flags, opt, &err);
   175e0:	e0bffc0b 	ldhu	r2,-16(fp)
   175e4:	e0fffc83 	ldbu	r3,-14(fp)
   175e8:	e13ffd04 	addi	r4,fp,-12
   175ec:	200f883a 	mov	r7,r4
   175f0:	180d883a 	mov	r6,r3
   175f4:	100b883a 	mov	r5,r2
   175f8:	e13ff917 	ldw	r4,-28(fp)
   175fc:	00120280 	call	12028 <OSFlagPost>

        space--;
   17600:	e0bff417 	ldw	r2,-48(fp)
   17604:	10bfffc4 	addi	r2,r2,-1
   17608:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1760c:	e0bff417 	ldw	r2,-48(fp)
   17610:	10000526 	beq	r2,zero,17628 <altera_avalon_jtag_uart_irq+0x240>
   17614:	e0bff517 	ldw	r2,-44(fp)
   17618:	10c01017 	ldw	r3,64(r2)
   1761c:	e0bff517 	ldw	r2,-44(fp)
   17620:	10800f17 	ldw	r2,60(r2)
   17624:	18bfd31e 	bne	r3,r2,17574 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017574>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   17628:	e0bff417 	ldw	r2,-48(fp)
   1762c:	103f7926 	beq	r2,zero,17414 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017414>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   17630:	e0bff517 	ldw	r2,-44(fp)
   17634:	10c00817 	ldw	r3,32(r2)
   17638:	00bfff44 	movi	r2,-3
   1763c:	1886703a 	and	r3,r3,r2
   17640:	e0bff517 	ldw	r2,-44(fp)
   17644:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   17648:	e0bff517 	ldw	r2,-44(fp)
   1764c:	10800017 	ldw	r2,0(r2)
   17650:	10800104 	addi	r2,r2,4
   17654:	1007883a 	mov	r3,r2
   17658:	e0bff517 	ldw	r2,-44(fp)
   1765c:	10800817 	ldw	r2,32(r2)
   17660:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   17664:	e0bff617 	ldw	r2,-40(fp)
   17668:	10800104 	addi	r2,r2,4
   1766c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   17670:	003f6806 	br	17414 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017414>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   17674:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   17678:	0001883a 	nop
   1767c:	e037883a 	mov	sp,fp
   17680:	dfc00117 	ldw	ra,4(sp)
   17684:	df000017 	ldw	fp,0(sp)
   17688:	dec00204 	addi	sp,sp,8
   1768c:	f800283a 	ret

00017690 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   17690:	defff904 	addi	sp,sp,-28
   17694:	dfc00615 	stw	ra,24(sp)
   17698:	df000515 	stw	fp,20(sp)
   1769c:	df000504 	addi	fp,sp,20
   176a0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   176a4:	e0bfff17 	ldw	r2,-4(fp)
   176a8:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   176ac:	e0bffb17 	ldw	r2,-20(fp)
   176b0:	10800017 	ldw	r2,0(r2)
   176b4:	10800104 	addi	r2,r2,4
   176b8:	10800037 	ldwio	r2,0(r2)
   176bc:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   176c0:	e0bffc17 	ldw	r2,-16(fp)
   176c4:	1081000c 	andi	r2,r2,1024
   176c8:	10000b26 	beq	r2,zero,176f8 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   176cc:	e0bffb17 	ldw	r2,-20(fp)
   176d0:	10800017 	ldw	r2,0(r2)
   176d4:	10800104 	addi	r2,r2,4
   176d8:	1007883a 	mov	r3,r2
   176dc:	e0bffb17 	ldw	r2,-20(fp)
   176e0:	10800817 	ldw	r2,32(r2)
   176e4:	10810014 	ori	r2,r2,1024
   176e8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   176ec:	e0bffb17 	ldw	r2,-20(fp)
   176f0:	10000915 	stw	zero,36(r2)
   176f4:	00002106 	br	1777c <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   176f8:	e0bffb17 	ldw	r2,-20(fp)
   176fc:	10c00917 	ldw	r3,36(r2)
   17700:	00a00034 	movhi	r2,32768
   17704:	10bfff04 	addi	r2,r2,-4
   17708:	10c01c36 	bltu	r2,r3,1777c <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
   1770c:	e0bffb17 	ldw	r2,-20(fp)
   17710:	10800917 	ldw	r2,36(r2)
   17714:	10c00044 	addi	r3,r2,1
   17718:	e0bffb17 	ldw	r2,-20(fp)
   1771c:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   17720:	e0bffb17 	ldw	r2,-20(fp)
   17724:	10c00917 	ldw	r3,36(r2)
   17728:	e0bffb17 	ldw	r2,-20(fp)
   1772c:	10800117 	ldw	r2,4(r2)
   17730:	18801236 	bltu	r3,r2,1777c <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   17734:	e0bffb17 	ldw	r2,-20(fp)
   17738:	10800c17 	ldw	r2,48(r2)
   1773c:	e0bffd15 	stw	r2,-12(fp)
   17740:	00800104 	movi	r2,4
   17744:	e0bffe0d 	sth	r2,-8(fp)
   17748:	00800044 	movi	r2,1
   1774c:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   17750:	d0a83843 	ldbu	r2,-24351(gp)
   17754:	10803fcc 	andi	r2,r2,255
   17758:	10000826 	beq	r2,zero,1777c <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
   1775c:	e0bffe0b 	ldhu	r2,-8(fp)
   17760:	e0fffe83 	ldbu	r3,-6(fp)
   17764:	e13ffec4 	addi	r4,fp,-5
   17768:	200f883a 	mov	r7,r4
   1776c:	180d883a 	mov	r6,r3
   17770:	100b883a 	mov	r5,r2
   17774:	e13ffd17 	ldw	r4,-12(fp)
   17778:	00120280 	call	12028 <OSFlagPost>
   1777c:	d0a84d17 	ldw	r2,-24268(gp)
    }
  }

  return alt_ticks_per_second();
}
   17780:	e037883a 	mov	sp,fp
   17784:	dfc00117 	ldw	ra,4(sp)
   17788:	df000017 	ldw	fp,0(sp)
   1778c:	dec00204 	addi	sp,sp,8
   17790:	f800283a 	ret

00017794 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   17794:	defffd04 	addi	sp,sp,-12
   17798:	df000215 	stw	fp,8(sp)
   1779c:	df000204 	addi	fp,sp,8
   177a0:	e13ffe15 	stw	r4,-8(fp)
   177a4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   177a8:	00000506 	br	177c0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   177ac:	e0bfff17 	ldw	r2,-4(fp)
   177b0:	1090000c 	andi	r2,r2,16384
   177b4:	10000226 	beq	r2,zero,177c0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   177b8:	00bffd44 	movi	r2,-11
   177bc:	00000b06 	br	177ec <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   177c0:	e0bffe17 	ldw	r2,-8(fp)
   177c4:	10c01017 	ldw	r3,64(r2)
   177c8:	e0bffe17 	ldw	r2,-8(fp)
   177cc:	10800f17 	ldw	r2,60(r2)
   177d0:	18800526 	beq	r3,r2,177e8 <altera_avalon_jtag_uart_close+0x54>
   177d4:	e0bffe17 	ldw	r2,-8(fp)
   177d8:	10c00917 	ldw	r3,36(r2)
   177dc:	e0bffe17 	ldw	r2,-8(fp)
   177e0:	10800117 	ldw	r2,4(r2)
   177e4:	18bff136 	bltu	r3,r2,177ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70177ac>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   177e8:	0005883a 	mov	r2,zero
}
   177ec:	e037883a 	mov	sp,fp
   177f0:	df000017 	ldw	fp,0(sp)
   177f4:	dec00104 	addi	sp,sp,4
   177f8:	f800283a 	ret

000177fc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   177fc:	defffa04 	addi	sp,sp,-24
   17800:	df000515 	stw	fp,20(sp)
   17804:	df000504 	addi	fp,sp,20
   17808:	e13ffd15 	stw	r4,-12(fp)
   1780c:	e17ffe15 	stw	r5,-8(fp)
   17810:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   17814:	00bff9c4 	movi	r2,-25
   17818:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1781c:	e0bffe17 	ldw	r2,-8(fp)
   17820:	10da8060 	cmpeqi	r3,r2,27137
   17824:	1800031e 	bne	r3,zero,17834 <altera_avalon_jtag_uart_ioctl+0x38>
   17828:	109a80a0 	cmpeqi	r2,r2,27138
   1782c:	1000181e 	bne	r2,zero,17890 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   17830:	00002906 	br	178d8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   17834:	e0bffd17 	ldw	r2,-12(fp)
   17838:	10c00117 	ldw	r3,4(r2)
   1783c:	00a00034 	movhi	r2,32768
   17840:	10bfffc4 	addi	r2,r2,-1
   17844:	18802126 	beq	r3,r2,178cc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   17848:	e0bfff17 	ldw	r2,-4(fp)
   1784c:	10800017 	ldw	r2,0(r2)
   17850:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   17854:	e0bffc17 	ldw	r2,-16(fp)
   17858:	10800090 	cmplti	r2,r2,2
   1785c:	1000061e 	bne	r2,zero,17878 <altera_avalon_jtag_uart_ioctl+0x7c>
   17860:	e0fffc17 	ldw	r3,-16(fp)
   17864:	00a00034 	movhi	r2,32768
   17868:	10bfffc4 	addi	r2,r2,-1
   1786c:	18800226 	beq	r3,r2,17878 <altera_avalon_jtag_uart_ioctl+0x7c>
   17870:	e0bffc17 	ldw	r2,-16(fp)
   17874:	00000206 	br	17880 <altera_avalon_jtag_uart_ioctl+0x84>
   17878:	00a00034 	movhi	r2,32768
   1787c:	10bfff84 	addi	r2,r2,-2
   17880:	e0fffd17 	ldw	r3,-12(fp)
   17884:	18800115 	stw	r2,4(r3)
      rc = 0;
   17888:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1788c:	00000f06 	br	178cc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   17890:	e0bffd17 	ldw	r2,-12(fp)
   17894:	10c00117 	ldw	r3,4(r2)
   17898:	00a00034 	movhi	r2,32768
   1789c:	10bfffc4 	addi	r2,r2,-1
   178a0:	18800c26 	beq	r3,r2,178d4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   178a4:	e0bffd17 	ldw	r2,-12(fp)
   178a8:	10c00917 	ldw	r3,36(r2)
   178ac:	e0bffd17 	ldw	r2,-12(fp)
   178b0:	10800117 	ldw	r2,4(r2)
   178b4:	1885803a 	cmpltu	r2,r3,r2
   178b8:	10c03fcc 	andi	r3,r2,255
   178bc:	e0bfff17 	ldw	r2,-4(fp)
   178c0:	10c00015 	stw	r3,0(r2)
      rc = 0;
   178c4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   178c8:	00000206 	br	178d4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   178cc:	0001883a 	nop
   178d0:	00000106 	br	178d8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   178d4:	0001883a 	nop

  default:
    break;
  }

  return rc;
   178d8:	e0bffb17 	ldw	r2,-20(fp)
}
   178dc:	e037883a 	mov	sp,fp
   178e0:	df000017 	ldw	fp,0(sp)
   178e4:	dec00104 	addi	sp,sp,4
   178e8:	f800283a 	ret

000178ec <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   178ec:	deffed04 	addi	sp,sp,-76
   178f0:	dfc01215 	stw	ra,72(sp)
   178f4:	df001115 	stw	fp,68(sp)
   178f8:	df001104 	addi	fp,sp,68
   178fc:	e13ffc15 	stw	r4,-16(fp)
   17900:	e17ffd15 	stw	r5,-12(fp)
   17904:	e1bffe15 	stw	r6,-8(fp)
   17908:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1790c:	e0bffd17 	ldw	r2,-12(fp)
   17910:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   17914:	e0bffc17 	ldw	r2,-16(fp)
   17918:	10800a17 	ldw	r2,40(r2)
   1791c:	e0bff815 	stw	r2,-32(fp)
   17920:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   17924:	e0bff90b 	ldhu	r2,-28(fp)
   17928:	e0fffb04 	addi	r3,fp,-20
   1792c:	180d883a 	mov	r6,r3
   17930:	100b883a 	mov	r5,r2
   17934:	e13ff817 	ldw	r4,-32(fp)
   17938:	00144780 	call	14478 <OSSemPend>

  while (space > 0)
   1793c:	00006106 	br	17ac4 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   17940:	e0bffc17 	ldw	r2,-16(fp)
   17944:	10800d17 	ldw	r2,52(r2)
   17948:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
   1794c:	e0bffc17 	ldw	r2,-16(fp)
   17950:	10800e17 	ldw	r2,56(r2)
   17954:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
   17958:	e0fff317 	ldw	r3,-52(fp)
   1795c:	e0bff417 	ldw	r2,-48(fp)
   17960:	18800536 	bltu	r3,r2,17978 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   17964:	e0fff317 	ldw	r3,-52(fp)
   17968:	e0bff417 	ldw	r2,-48(fp)
   1796c:	1885c83a 	sub	r2,r3,r2
   17970:	e0bff115 	stw	r2,-60(fp)
   17974:	00000406 	br	17988 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   17978:	00c20004 	movi	r3,2048
   1797c:	e0bff417 	ldw	r2,-48(fp)
   17980:	1885c83a 	sub	r2,r3,r2
   17984:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   17988:	e0bff117 	ldw	r2,-60(fp)
   1798c:	10001e26 	beq	r2,zero,17a08 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   17990:	e0fffe17 	ldw	r3,-8(fp)
   17994:	e0bff117 	ldw	r2,-60(fp)
   17998:	1880022e 	bgeu	r3,r2,179a4 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
   1799c:	e0bffe17 	ldw	r2,-8(fp)
   179a0:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   179a4:	e0bffc17 	ldw	r2,-16(fp)
   179a8:	10c01104 	addi	r3,r2,68
   179ac:	e0bff417 	ldw	r2,-48(fp)
   179b0:	1885883a 	add	r2,r3,r2
   179b4:	e1bff117 	ldw	r6,-60(fp)
   179b8:	100b883a 	mov	r5,r2
   179bc:	e13ff017 	ldw	r4,-64(fp)
   179c0:	00074f00 	call	74f0 <memcpy>
      ptr   += n;
   179c4:	e0fff017 	ldw	r3,-64(fp)
   179c8:	e0bff117 	ldw	r2,-60(fp)
   179cc:	1885883a 	add	r2,r3,r2
   179d0:	e0bff015 	stw	r2,-64(fp)
      space -= n;
   179d4:	e0fffe17 	ldw	r3,-8(fp)
   179d8:	e0bff117 	ldw	r2,-60(fp)
   179dc:	1885c83a 	sub	r2,r3,r2
   179e0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   179e4:	e0fff417 	ldw	r3,-48(fp)
   179e8:	e0bff117 	ldw	r2,-60(fp)
   179ec:	1885883a 	add	r2,r3,r2
   179f0:	10c1ffcc 	andi	r3,r2,2047
   179f4:	e0bffc17 	ldw	r2,-16(fp)
   179f8:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   179fc:	e0bffe17 	ldw	r2,-8(fp)
   17a00:	00bfcf16 	blt	zero,r2,17940 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017940>
   17a04:	00000106 	br	17a0c <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   17a08:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   17a0c:	e0fff017 	ldw	r3,-64(fp)
   17a10:	e0bffd17 	ldw	r2,-12(fp)
   17a14:	18802e1e 	bne	r3,r2,17ad0 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   17a18:	e0bfff17 	ldw	r2,-4(fp)
   17a1c:	1090000c 	andi	r2,r2,16384
   17a20:	10002d1e 	bne	r2,zero,17ad8 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   17a24:	d0a83843 	ldbu	r2,-24351(gp)
   17a28:	10803fcc 	andi	r2,r2,255
   17a2c:	10800058 	cmpnei	r2,r2,1
   17a30:	1000161e 	bne	r2,zero,17a8c <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   17a34:	e0bffc17 	ldw	r2,-16(fp)
   17a38:	10800c17 	ldw	r2,48(r2)
   17a3c:	e0bff215 	stw	r2,-56(fp)
   17a40:	00800144 	movi	r2,5
   17a44:	e0bff98d 	sth	r2,-26(fp)
   17a48:	00bfe0c4 	movi	r2,-125
   17a4c:	e0bffa05 	stb	r2,-24(fp)
   17a50:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   17a54:	d0a83843 	ldbu	r2,-24351(gp)
   17a58:	10803fcc 	andi	r2,r2,255
   17a5c:	10001526 	beq	r2,zero,17ab4 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   17a60:	e0fff98b 	ldhu	r3,-26(fp)
   17a64:	e13ffa03 	ldbu	r4,-24(fp)
   17a68:	e17ffa8b 	ldhu	r5,-22(fp)
   17a6c:	e0bffb44 	addi	r2,fp,-19
   17a70:	d8800015 	stw	r2,0(sp)
   17a74:	280f883a 	mov	r7,r5
   17a78:	200d883a 	mov	r6,r4
   17a7c:	180b883a 	mov	r5,r3
   17a80:	e13ff217 	ldw	r4,-56(fp)
   17a84:	0011a100 	call	11a10 <OSFlagPend>
   17a88:	00000a06 	br	17ab4 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   17a8c:	0001883a 	nop
   17a90:	e0bffc17 	ldw	r2,-16(fp)
   17a94:	10c00d17 	ldw	r3,52(r2)
   17a98:	e0bff317 	ldw	r2,-52(fp)
   17a9c:	1880051e 	bne	r3,r2,17ab4 <altera_avalon_jtag_uart_read+0x1c8>
   17aa0:	e0bffc17 	ldw	r2,-16(fp)
   17aa4:	10c00917 	ldw	r3,36(r2)
   17aa8:	e0bffc17 	ldw	r2,-16(fp)
   17aac:	10800117 	ldw	r2,4(r2)
   17ab0:	18bff736 	bltu	r3,r2,17a90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017a90>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   17ab4:	e0bffc17 	ldw	r2,-16(fp)
   17ab8:	10c00d17 	ldw	r3,52(r2)
   17abc:	e0bff317 	ldw	r2,-52(fp)
   17ac0:	18800726 	beq	r3,r2,17ae0 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   17ac4:	e0bffe17 	ldw	r2,-8(fp)
   17ac8:	00bf9d16 	blt	zero,r2,17940 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017940>
   17acc:	00000506 	br	17ae4 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   17ad0:	0001883a 	nop
   17ad4:	00000306 	br	17ae4 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   17ad8:	0001883a 	nop
   17adc:	00000106 	br	17ae4 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   17ae0:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   17ae4:	e0bffc17 	ldw	r2,-16(fp)
   17ae8:	10800a17 	ldw	r2,40(r2)
   17aec:	1009883a 	mov	r4,r2
   17af0:	00147f00 	call	147f0 <OSSemPost>

  if (ptr != buffer)
   17af4:	e0fff017 	ldw	r3,-64(fp)
   17af8:	e0bffd17 	ldw	r2,-12(fp)
   17afc:	18801826 	beq	r3,r2,17b60 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17b00:	0005303a 	rdctl	r2,status
   17b04:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17b08:	e0fff717 	ldw	r3,-36(fp)
   17b0c:	00bfff84 	movi	r2,-2
   17b10:	1884703a 	and	r2,r3,r2
   17b14:	1001703a 	wrctl	status,r2
  
  return context;
   17b18:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   17b1c:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   17b20:	e0bffc17 	ldw	r2,-16(fp)
   17b24:	10800817 	ldw	r2,32(r2)
   17b28:	10c00054 	ori	r3,r2,1
   17b2c:	e0bffc17 	ldw	r2,-16(fp)
   17b30:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   17b34:	e0bffc17 	ldw	r2,-16(fp)
   17b38:	10800017 	ldw	r2,0(r2)
   17b3c:	10800104 	addi	r2,r2,4
   17b40:	1007883a 	mov	r3,r2
   17b44:	e0bffc17 	ldw	r2,-16(fp)
   17b48:	10800817 	ldw	r2,32(r2)
   17b4c:	18800035 	stwio	r2,0(r3)
   17b50:	e0bff617 	ldw	r2,-40(fp)
   17b54:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17b58:	e0bff517 	ldw	r2,-44(fp)
   17b5c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   17b60:	e0fff017 	ldw	r3,-64(fp)
   17b64:	e0bffd17 	ldw	r2,-12(fp)
   17b68:	18800426 	beq	r3,r2,17b7c <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
   17b6c:	e0fff017 	ldw	r3,-64(fp)
   17b70:	e0bffd17 	ldw	r2,-12(fp)
   17b74:	1885c83a 	sub	r2,r3,r2
   17b78:	00000606 	br	17b94 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   17b7c:	e0bfff17 	ldw	r2,-4(fp)
   17b80:	1090000c 	andi	r2,r2,16384
   17b84:	10000226 	beq	r2,zero,17b90 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
   17b88:	00bffd44 	movi	r2,-11
   17b8c:	00000106 	br	17b94 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   17b90:	00bffec4 	movi	r2,-5
}
   17b94:	e037883a 	mov	sp,fp
   17b98:	dfc00117 	ldw	ra,4(sp)
   17b9c:	df000017 	ldw	fp,0(sp)
   17ba0:	dec00204 	addi	sp,sp,8
   17ba4:	f800283a 	ret

00017ba8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   17ba8:	deffed04 	addi	sp,sp,-76
   17bac:	dfc01215 	stw	ra,72(sp)
   17bb0:	df001115 	stw	fp,68(sp)
   17bb4:	df001104 	addi	fp,sp,68
   17bb8:	e13ffc15 	stw	r4,-16(fp)
   17bbc:	e17ffd15 	stw	r5,-12(fp)
   17bc0:	e1bffe15 	stw	r6,-8(fp)
   17bc4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   17bc8:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   17bcc:	e0bffd17 	ldw	r2,-12(fp)
   17bd0:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   17bd4:	e0bffc17 	ldw	r2,-16(fp)
   17bd8:	10800b17 	ldw	r2,44(r2)
   17bdc:	e0bff815 	stw	r2,-32(fp)
   17be0:	e03ff90d 	sth	zero,-28(fp)
   17be4:	e0bff90b 	ldhu	r2,-28(fp)
   17be8:	e0fffb44 	addi	r3,fp,-19
   17bec:	180d883a 	mov	r6,r3
   17bf0:	100b883a 	mov	r5,r2
   17bf4:	e13ff817 	ldw	r4,-32(fp)
   17bf8:	00144780 	call	14478 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   17bfc:	00003706 	br	17cdc <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   17c00:	e0bffc17 	ldw	r2,-16(fp)
   17c04:	10800f17 	ldw	r2,60(r2)
   17c08:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
   17c0c:	e0bffc17 	ldw	r2,-16(fp)
   17c10:	10801017 	ldw	r2,64(r2)
   17c14:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   17c18:	e0fff417 	ldw	r3,-48(fp)
   17c1c:	e0bff017 	ldw	r2,-64(fp)
   17c20:	1880062e 	bgeu	r3,r2,17c3c <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   17c24:	e0fff017 	ldw	r3,-64(fp)
   17c28:	e0bff417 	ldw	r2,-48(fp)
   17c2c:	1885c83a 	sub	r2,r3,r2
   17c30:	10bfffc4 	addi	r2,r2,-1
   17c34:	e0bff115 	stw	r2,-60(fp)
   17c38:	00000b06 	br	17c68 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   17c3c:	e0bff017 	ldw	r2,-64(fp)
   17c40:	10000526 	beq	r2,zero,17c58 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   17c44:	00c20004 	movi	r3,2048
   17c48:	e0bff417 	ldw	r2,-48(fp)
   17c4c:	1885c83a 	sub	r2,r3,r2
   17c50:	e0bff115 	stw	r2,-60(fp)
   17c54:	00000406 	br	17c68 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   17c58:	00c1ffc4 	movi	r3,2047
   17c5c:	e0bff417 	ldw	r2,-48(fp)
   17c60:	1885c83a 	sub	r2,r3,r2
   17c64:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   17c68:	e0bff117 	ldw	r2,-60(fp)
   17c6c:	10001e26 	beq	r2,zero,17ce8 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
   17c70:	e0fffe17 	ldw	r3,-8(fp)
   17c74:	e0bff117 	ldw	r2,-60(fp)
   17c78:	1880022e 	bgeu	r3,r2,17c84 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   17c7c:	e0bffe17 	ldw	r2,-8(fp)
   17c80:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   17c84:	e0bffc17 	ldw	r2,-16(fp)
   17c88:	10c21104 	addi	r3,r2,2116
   17c8c:	e0bff417 	ldw	r2,-48(fp)
   17c90:	1885883a 	add	r2,r3,r2
   17c94:	e1bff117 	ldw	r6,-60(fp)
   17c98:	e17ffd17 	ldw	r5,-12(fp)
   17c9c:	1009883a 	mov	r4,r2
   17ca0:	00074f00 	call	74f0 <memcpy>
      ptr   += n;
   17ca4:	e0fffd17 	ldw	r3,-12(fp)
   17ca8:	e0bff117 	ldw	r2,-60(fp)
   17cac:	1885883a 	add	r2,r3,r2
   17cb0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   17cb4:	e0fffe17 	ldw	r3,-8(fp)
   17cb8:	e0bff117 	ldw	r2,-60(fp)
   17cbc:	1885c83a 	sub	r2,r3,r2
   17cc0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   17cc4:	e0fff417 	ldw	r3,-48(fp)
   17cc8:	e0bff117 	ldw	r2,-60(fp)
   17ccc:	1885883a 	add	r2,r3,r2
   17cd0:	10c1ffcc 	andi	r3,r2,2047
   17cd4:	e0bffc17 	ldw	r2,-16(fp)
   17cd8:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   17cdc:	e0bffe17 	ldw	r2,-8(fp)
   17ce0:	00bfc716 	blt	zero,r2,17c00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017c00>
   17ce4:	00000106 	br	17cec <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   17ce8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17cec:	0005303a 	rdctl	r2,status
   17cf0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17cf4:	e0fff717 	ldw	r3,-36(fp)
   17cf8:	00bfff84 	movi	r2,-2
   17cfc:	1884703a 	and	r2,r3,r2
   17d00:	1001703a 	wrctl	status,r2
  
  return context;
   17d04:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   17d08:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   17d0c:	e0bffc17 	ldw	r2,-16(fp)
   17d10:	10800817 	ldw	r2,32(r2)
   17d14:	10c00094 	ori	r3,r2,2
   17d18:	e0bffc17 	ldw	r2,-16(fp)
   17d1c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   17d20:	e0bffc17 	ldw	r2,-16(fp)
   17d24:	10800017 	ldw	r2,0(r2)
   17d28:	10800104 	addi	r2,r2,4
   17d2c:	1007883a 	mov	r3,r2
   17d30:	e0bffc17 	ldw	r2,-16(fp)
   17d34:	10800817 	ldw	r2,32(r2)
   17d38:	18800035 	stwio	r2,0(r3)
   17d3c:	e0bff617 	ldw	r2,-40(fp)
   17d40:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17d44:	e0bff317 	ldw	r2,-52(fp)
   17d48:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   17d4c:	e0bffe17 	ldw	r2,-8(fp)
   17d50:	00802a0e 	bge	zero,r2,17dfc <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
   17d54:	e0bfff17 	ldw	r2,-4(fp)
   17d58:	1090000c 	andi	r2,r2,16384
   17d5c:	10002a1e 	bne	r2,zero,17e08 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   17d60:	d0a83843 	ldbu	r2,-24351(gp)
   17d64:	10803fcc 	andi	r2,r2,255
   17d68:	10800058 	cmpnei	r2,r2,1
   17d6c:	1000161e 	bne	r2,zero,17dc8 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   17d70:	e0bffc17 	ldw	r2,-16(fp)
   17d74:	10800c17 	ldw	r2,48(r2)
   17d78:	e0bff515 	stw	r2,-44(fp)
   17d7c:	00800184 	movi	r2,6
   17d80:	e0bff98d 	sth	r2,-26(fp)
   17d84:	00bfe0c4 	movi	r2,-125
   17d88:	e0bffa05 	stb	r2,-24(fp)
   17d8c:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   17d90:	d0a83843 	ldbu	r2,-24351(gp)
   17d94:	10803fcc 	andi	r2,r2,255
   17d98:	10001526 	beq	r2,zero,17df0 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   17d9c:	e0fff98b 	ldhu	r3,-26(fp)
   17da0:	e13ffa03 	ldbu	r4,-24(fp)
   17da4:	e17ffa8b 	ldhu	r5,-22(fp)
   17da8:	e0bffb04 	addi	r2,fp,-20
   17dac:	d8800015 	stw	r2,0(sp)
   17db0:	280f883a 	mov	r7,r5
   17db4:	200d883a 	mov	r6,r4
   17db8:	180b883a 	mov	r5,r3
   17dbc:	e13ff517 	ldw	r4,-44(fp)
   17dc0:	0011a100 	call	11a10 <OSFlagPend>
   17dc4:	00000a06 	br	17df0 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   17dc8:	0001883a 	nop
   17dcc:	e0bffc17 	ldw	r2,-16(fp)
   17dd0:	10c01017 	ldw	r3,64(r2)
   17dd4:	e0bff017 	ldw	r2,-64(fp)
   17dd8:	1880051e 	bne	r3,r2,17df0 <altera_avalon_jtag_uart_write+0x248>
   17ddc:	e0bffc17 	ldw	r2,-16(fp)
   17de0:	10c00917 	ldw	r3,36(r2)
   17de4:	e0bffc17 	ldw	r2,-16(fp)
   17de8:	10800117 	ldw	r2,4(r2)
   17dec:	18bff736 	bltu	r3,r2,17dcc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017dcc>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   17df0:	e0bffc17 	ldw	r2,-16(fp)
   17df4:	10800917 	ldw	r2,36(r2)
   17df8:	1000051e 	bne	r2,zero,17e10 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
   17dfc:	e0bffe17 	ldw	r2,-8(fp)
   17e00:	00bfb616 	blt	zero,r2,17cdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017cdc>
   17e04:	00000306 	br	17e14 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   17e08:	0001883a 	nop
   17e0c:	00000106 	br	17e14 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   17e10:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   17e14:	e0bffc17 	ldw	r2,-16(fp)
   17e18:	10800b17 	ldw	r2,44(r2)
   17e1c:	1009883a 	mov	r4,r2
   17e20:	00147f00 	call	147f0 <OSSemPost>

  if (ptr != start)
   17e24:	e0fffd17 	ldw	r3,-12(fp)
   17e28:	e0bff217 	ldw	r2,-56(fp)
   17e2c:	18800426 	beq	r3,r2,17e40 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
   17e30:	e0fffd17 	ldw	r3,-12(fp)
   17e34:	e0bff217 	ldw	r2,-56(fp)
   17e38:	1885c83a 	sub	r2,r3,r2
   17e3c:	00000606 	br	17e58 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
   17e40:	e0bfff17 	ldw	r2,-4(fp)
   17e44:	1090000c 	andi	r2,r2,16384
   17e48:	10000226 	beq	r2,zero,17e54 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
   17e4c:	00bffd44 	movi	r2,-11
   17e50:	00000106 	br	17e58 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   17e54:	00bffec4 	movi	r2,-5
}
   17e58:	e037883a 	mov	sp,fp
   17e5c:	dfc00117 	ldw	ra,4(sp)
   17e60:	df000017 	ldw	fp,0(sp)
   17e64:	dec00204 	addi	sp,sp,8
   17e68:	f800283a 	ret

00017e6c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   17e6c:	defff904 	addi	sp,sp,-28
   17e70:	dfc00615 	stw	ra,24(sp)
   17e74:	df000515 	stw	fp,20(sp)
   17e78:	df000504 	addi	fp,sp,20
   17e7c:	e13ffe15 	stw	r4,-8(fp)
   17e80:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   17e84:	0007883a 	mov	r3,zero
   17e88:	e0bffe17 	ldw	r2,-8(fp)
   17e8c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   17e90:	e0bffe17 	ldw	r2,-8(fp)
   17e94:	10800104 	addi	r2,r2,4
   17e98:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17e9c:	0005303a 	rdctl	r2,status
   17ea0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17ea4:	e0fffc17 	ldw	r3,-16(fp)
   17ea8:	00bfff84 	movi	r2,-2
   17eac:	1884703a 	and	r2,r3,r2
   17eb0:	1001703a 	wrctl	status,r2
  
  return context;
   17eb4:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   17eb8:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   17ebc:	0019b7c0 	call	19b7c <alt_tick>
   17ec0:	e0bffb17 	ldw	r2,-20(fp)
   17ec4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17ec8:	e0bffd17 	ldw	r2,-12(fp)
   17ecc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   17ed0:	0001883a 	nop
   17ed4:	e037883a 	mov	sp,fp
   17ed8:	dfc00117 	ldw	ra,4(sp)
   17edc:	df000017 	ldw	fp,0(sp)
   17ee0:	dec00204 	addi	sp,sp,8
   17ee4:	f800283a 	ret

00017ee8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   17ee8:	defff904 	addi	sp,sp,-28
   17eec:	dfc00615 	stw	ra,24(sp)
   17ef0:	df000515 	stw	fp,20(sp)
   17ef4:	df000504 	addi	fp,sp,20
   17ef8:	e13ffc15 	stw	r4,-16(fp)
   17efc:	e17ffd15 	stw	r5,-12(fp)
   17f00:	e1bffe15 	stw	r6,-8(fp)
   17f04:	e1ffff15 	stw	r7,-4(fp)
   17f08:	e0bfff17 	ldw	r2,-4(fp)
   17f0c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   17f10:	d0a84d17 	ldw	r2,-24268(gp)
   17f14:	1000021e 	bne	r2,zero,17f20 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   17f18:	e0bffb17 	ldw	r2,-20(fp)
   17f1c:	d0a84d15 	stw	r2,-24268(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   17f20:	e0bffc17 	ldw	r2,-16(fp)
   17f24:	10800104 	addi	r2,r2,4
   17f28:	00c001c4 	movi	r3,7
   17f2c:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   17f30:	01800074 	movhi	r6,1
   17f34:	319f9b04 	addi	r6,r6,32364
   17f38:	e17ffc17 	ldw	r5,-16(fp)
   17f3c:	e13ffe17 	ldw	r4,-8(fp)
   17f40:	001970c0 	call	1970c <alt_irq_register>
#endif  
}
   17f44:	0001883a 	nop
   17f48:	e037883a 	mov	sp,fp
   17f4c:	dfc00117 	ldw	ra,4(sp)
   17f50:	df000017 	ldw	fp,0(sp)
   17f54:	dec00204 	addi	sp,sp,8
   17f58:	f800283a 	ret

00017f5c <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   17f5c:	defffc04 	addi	sp,sp,-16
   17f60:	df000315 	stw	fp,12(sp)
   17f64:	df000304 	addi	fp,sp,12
   17f68:	e13ffe15 	stw	r4,-8(fp)
   17f6c:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   17f70:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   17f74:	e0bfff17 	ldw	r2,-4(fp)
   17f78:	1000061e 	bne	r2,zero,17f94 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   17f7c:	e0bffe17 	ldw	r2,-8(fp)
   17f80:	1007883a 	mov	r3,r2
   17f84:	e0bffd03 	ldbu	r2,-12(fp)
   17f88:	1884b03a 	or	r2,r3,r2
   17f8c:	e0bffd05 	stb	r2,-12(fp)
   17f90:	00000806 	br	17fb4 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   17f94:	e0bffe17 	ldw	r2,-8(fp)
   17f98:	1007883a 	mov	r3,r2
   17f9c:	e0bffd03 	ldbu	r2,-12(fp)
   17fa0:	1884b03a 	or	r2,r3,r2
   17fa4:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   17fa8:	e0bffd03 	ldbu	r2,-12(fp)
   17fac:	10801014 	ori	r2,r2,64
   17fb0:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   17fb4:	e0fffd03 	ldbu	r3,-12(fp)
   17fb8:	00bfe004 	movi	r2,-128
   17fbc:	1884b03a 	or	r2,r3,r2
}
   17fc0:	e037883a 	mov	sp,fp
   17fc4:	df000017 	ldw	fp,0(sp)
   17fc8:	dec00104 	addi	sp,sp,4
   17fcc:	f800283a 	ret

00017fd0 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   17fd0:	defffd04 	addi	sp,sp,-12
   17fd4:	df000215 	stw	fp,8(sp)
   17fd8:	df000204 	addi	fp,sp,8
   17fdc:	e13ffe15 	stw	r4,-8(fp)
   17fe0:	2805883a 	mov	r2,r5
   17fe4:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   17fe8:	e0bffe17 	ldw	r2,-8(fp)
   17fec:	10800a17 	ldw	r2,40(r2)
   17ff0:	1007883a 	mov	r3,r2
   17ff4:	e0bfff03 	ldbu	r2,-4(fp)
   17ff8:	18800025 	stbio	r2,0(r3)
}
   17ffc:	0001883a 	nop
   18000:	e037883a 	mov	sp,fp
   18004:	df000017 	ldw	fp,0(sp)
   18008:	dec00104 	addi	sp,sp,4
   1800c:	f800283a 	ret

00018010 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   18010:	defffe04 	addi	sp,sp,-8
   18014:	df000115 	stw	fp,4(sp)
   18018:	df000104 	addi	fp,sp,4
   1801c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   18020:	e0bfff17 	ldw	r2,-4(fp)
   18024:	10800a17 	ldw	r2,40(r2)
   18028:	1007883a 	mov	r3,r2
   1802c:	00800044 	movi	r2,1
   18030:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   18034:	0001883a 	nop
   18038:	e037883a 	mov	sp,fp
   1803c:	df000017 	ldw	fp,0(sp)
   18040:	dec00104 	addi	sp,sp,4
   18044:	f800283a 	ret

00018048 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   18048:	defffc04 	addi	sp,sp,-16
   1804c:	dfc00315 	stw	ra,12(sp)
   18050:	df000215 	stw	fp,8(sp)
   18054:	df000204 	addi	fp,sp,8
   18058:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   1805c:	d1600804 	addi	r5,gp,-32736
   18060:	e13fff17 	ldw	r4,-4(fp)
   18064:	00195080 	call	19508 <alt_find_dev>
   18068:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1806c:	e0bffe17 	ldw	r2,-8(fp)
}
   18070:	e037883a 	mov	sp,fp
   18074:	dfc00117 	ldw	ra,4(sp)
   18078:	df000017 	ldw	fp,0(sp)
   1807c:	dec00204 	addi	sp,sp,8
   18080:	f800283a 	ret

00018084 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   18084:	defffb04 	addi	sp,sp,-20
   18088:	df000415 	stw	fp,16(sp)
   1808c:	df000404 	addi	fp,sp,16
   18090:	e13ffd15 	stw	r4,-12(fp)
   18094:	e17ffe15 	stw	r5,-8(fp)
   18098:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   1809c:	e03ffc15 	stw	zero,-16(fp)
   180a0:	00000f06 	br	180e0 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   180a4:	e0bffd17 	ldw	r2,-12(fp)
   180a8:	10800a17 	ldw	r2,40(r2)
   180ac:	10800044 	addi	r2,r2,1
   180b0:	1009883a 	mov	r4,r2
   180b4:	e0fffe17 	ldw	r3,-8(fp)
   180b8:	e0bffc17 	ldw	r2,-16(fp)
   180bc:	1885883a 	add	r2,r3,r2
   180c0:	10800003 	ldbu	r2,0(r2)
   180c4:	10803fcc 	andi	r2,r2,255
   180c8:	1080201c 	xori	r2,r2,128
   180cc:	10bfe004 	addi	r2,r2,-128
   180d0:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   180d4:	e0bffc17 	ldw	r2,-16(fp)
   180d8:	10800044 	addi	r2,r2,1
   180dc:	e0bffc15 	stw	r2,-16(fp)
   180e0:	e0fffc17 	ldw	r3,-16(fp)
   180e4:	e0bfff17 	ldw	r2,-4(fp)
   180e8:	18bfee36 	bltu	r3,r2,180a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70180a4>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   180ec:	0001883a 	nop
   180f0:	e037883a 	mov	sp,fp
   180f4:	df000017 	ldw	fp,0(sp)
   180f8:	dec00104 	addi	sp,sp,4
   180fc:	f800283a 	ret

00018100 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   18100:	defffd04 	addi	sp,sp,-12
   18104:	df000215 	stw	fp,8(sp)
   18108:	df000204 	addi	fp,sp,8
   1810c:	e13ffe15 	stw	r4,-8(fp)
   18110:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   18114:	00000d06 	br	1814c <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   18118:	e0bffe17 	ldw	r2,-8(fp)
   1811c:	10800a17 	ldw	r2,40(r2)
   18120:	10800044 	addi	r2,r2,1
   18124:	1007883a 	mov	r3,r2
   18128:	e0bfff17 	ldw	r2,-4(fp)
   1812c:	10800003 	ldbu	r2,0(r2)
   18130:	10803fcc 	andi	r2,r2,255
   18134:	1080201c 	xori	r2,r2,128
   18138:	10bfe004 	addi	r2,r2,-128
   1813c:	18800025 	stbio	r2,0(r3)
		++ptr;
   18140:	e0bfff17 	ldw	r2,-4(fp)
   18144:	10800044 	addi	r2,r2,1
   18148:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   1814c:	e0bfff17 	ldw	r2,-4(fp)
   18150:	10800003 	ldbu	r2,0(r2)
   18154:	10803fcc 	andi	r2,r2,255
   18158:	1080201c 	xori	r2,r2,128
   1815c:	10bfe004 	addi	r2,r2,-128
   18160:	103fed1e 	bne	r2,zero,18118 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018118>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   18164:	0001883a 	nop
   18168:	e037883a 	mov	sp,fp
   1816c:	df000017 	ldw	fp,0(sp)
   18170:	dec00104 	addi	sp,sp,4
   18174:	f800283a 	ret

00018178 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   18178:	defffb04 	addi	sp,sp,-20
   1817c:	dfc00415 	stw	ra,16(sp)
   18180:	df000315 	stw	fp,12(sp)
   18184:	df000304 	addi	fp,sp,12
   18188:	e13ffd15 	stw	r4,-12(fp)
   1818c:	e17ffe15 	stw	r5,-8(fp)
   18190:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   18194:	e0bffd17 	ldw	r2,-12(fp)
   18198:	10800017 	ldw	r2,0(r2)
   1819c:	e0ffff17 	ldw	r3,-4(fp)
   181a0:	180d883a 	mov	r6,r3
   181a4:	e17ffe17 	ldw	r5,-8(fp)
   181a8:	1009883a 	mov	r4,r2
   181ac:	00180840 	call	18084 <alt_up_character_lcd_write>
	return 0;
   181b0:	0005883a 	mov	r2,zero
}
   181b4:	e037883a 	mov	sp,fp
   181b8:	dfc00117 	ldw	ra,4(sp)
   181bc:	df000017 	ldw	fp,0(sp)
   181c0:	dec00204 	addi	sp,sp,8
   181c4:	f800283a 	ret

000181c8 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   181c8:	defffa04 	addi	sp,sp,-24
   181cc:	dfc00515 	stw	ra,20(sp)
   181d0:	df000415 	stw	fp,16(sp)
   181d4:	df000404 	addi	fp,sp,16
   181d8:	e13ffd15 	stw	r4,-12(fp)
   181dc:	e17ffe15 	stw	r5,-8(fp)
   181e0:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   181e4:	e0bffe17 	ldw	r2,-8(fp)
   181e8:	10800a28 	cmpgeui	r2,r2,40
   181ec:	1000031e 	bne	r2,zero,181fc <alt_up_character_lcd_set_cursor_pos+0x34>
   181f0:	e0bfff17 	ldw	r2,-4(fp)
   181f4:	108000b0 	cmpltui	r2,r2,2
   181f8:	1000021e 	bne	r2,zero,18204 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   181fc:	00bfffc4 	movi	r2,-1
   18200:	00000906 	br	18228 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   18204:	e17fff17 	ldw	r5,-4(fp)
   18208:	e13ffe17 	ldw	r4,-8(fp)
   1820c:	0017f5c0 	call	17f5c <get_DDRAM_addr>
   18210:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   18214:	e0bffc03 	ldbu	r2,-16(fp)
   18218:	100b883a 	mov	r5,r2
   1821c:	e13ffd17 	ldw	r4,-12(fp)
   18220:	0017fd00 	call	17fd0 <alt_up_character_lcd_send_cmd>
	return 0;
   18224:	0005883a 	mov	r2,zero
}
   18228:	e037883a 	mov	sp,fp
   1822c:	dfc00117 	ldw	ra,4(sp)
   18230:	df000017 	ldw	fp,0(sp)
   18234:	dec00204 	addi	sp,sp,8
   18238:	f800283a 	ret

0001823c <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1823c:	defffb04 	addi	sp,sp,-20
   18240:	dfc00415 	stw	ra,16(sp)
   18244:	df000315 	stw	fp,12(sp)
   18248:	df000304 	addi	fp,sp,12
   1824c:	e13ffe15 	stw	r4,-8(fp)
   18250:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   18254:	e0bfff17 	ldw	r2,-4(fp)
   18258:	10001526 	beq	r2,zero,182b0 <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1825c:	e0bfff17 	ldw	r2,-4(fp)
   18260:	0080020e 	bge	zero,r2,1826c <alt_up_character_lcd_shift_cursor+0x30>
   18264:	00800504 	movi	r2,20
   18268:	00000106 	br	18270 <alt_up_character_lcd_shift_cursor+0x34>
   1826c:	00800404 	movi	r2,16
   18270:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   18274:	e0bfff17 	ldw	r2,-4(fp)
   18278:	1000010e 	bge	r2,zero,18280 <alt_up_character_lcd_shift_cursor+0x44>
   1827c:	0085c83a 	sub	r2,zero,r2
   18280:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   18284:	00000406 	br	18298 <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   18288:	e0bffd43 	ldbu	r2,-11(fp)
   1828c:	100b883a 	mov	r5,r2
   18290:	e13ffe17 	ldw	r4,-8(fp)
   18294:	0017fd00 	call	17fd0 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   18298:	e0bffd03 	ldbu	r2,-12(fp)
   1829c:	10ffffc4 	addi	r3,r2,-1
   182a0:	e0fffd05 	stb	r3,-12(fp)
   182a4:	10803fcc 	andi	r2,r2,255
   182a8:	103ff71e 	bne	r2,zero,18288 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018288>
   182ac:	00000106 	br	182b4 <alt_up_character_lcd_shift_cursor+0x78>

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   182b0:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   182b4:	e037883a 	mov	sp,fp
   182b8:	dfc00117 	ldw	ra,4(sp)
   182bc:	df000017 	ldw	fp,0(sp)
   182c0:	dec00204 	addi	sp,sp,8
   182c4:	f800283a 	ret

000182c8 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   182c8:	defffb04 	addi	sp,sp,-20
   182cc:	dfc00415 	stw	ra,16(sp)
   182d0:	df000315 	stw	fp,12(sp)
   182d4:	df000304 	addi	fp,sp,12
   182d8:	e13ffe15 	stw	r4,-8(fp)
   182dc:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   182e0:	e0bfff17 	ldw	r2,-4(fp)
   182e4:	10001526 	beq	r2,zero,1833c <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   182e8:	e0bfff17 	ldw	r2,-4(fp)
   182ec:	0080020e 	bge	zero,r2,182f8 <alt_up_character_lcd_shift_display+0x30>
   182f0:	00800704 	movi	r2,28
   182f4:	00000106 	br	182fc <alt_up_character_lcd_shift_display+0x34>
   182f8:	00800604 	movi	r2,24
   182fc:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   18300:	e0bfff17 	ldw	r2,-4(fp)
   18304:	1000010e 	bge	r2,zero,1830c <alt_up_character_lcd_shift_display+0x44>
   18308:	0085c83a 	sub	r2,zero,r2
   1830c:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   18310:	00000406 	br	18324 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   18314:	e0bffd43 	ldbu	r2,-11(fp)
   18318:	100b883a 	mov	r5,r2
   1831c:	e13ffe17 	ldw	r4,-8(fp)
   18320:	0017fd00 	call	17fd0 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   18324:	e0bffd03 	ldbu	r2,-12(fp)
   18328:	10ffffc4 	addi	r3,r2,-1
   1832c:	e0fffd05 	stb	r3,-12(fp)
   18330:	10803fcc 	andi	r2,r2,255
   18334:	103ff71e 	bne	r2,zero,18314 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018314>
   18338:	00000106 	br	18340 <alt_up_character_lcd_shift_display+0x78>

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   1833c:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   18340:	e037883a 	mov	sp,fp
   18344:	dfc00117 	ldw	ra,4(sp)
   18348:	df000017 	ldw	fp,0(sp)
   1834c:	dec00204 	addi	sp,sp,8
   18350:	f800283a 	ret

00018354 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   18354:	defffa04 	addi	sp,sp,-24
   18358:	dfc00515 	stw	ra,20(sp)
   1835c:	df000415 	stw	fp,16(sp)
   18360:	df000404 	addi	fp,sp,16
   18364:	e13ffd15 	stw	r4,-12(fp)
   18368:	e17ffe15 	stw	r5,-8(fp)
   1836c:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   18370:	e0bffe17 	ldw	r2,-8(fp)
   18374:	10800a28 	cmpgeui	r2,r2,40
   18378:	1000031e 	bne	r2,zero,18388 <alt_up_character_lcd_erase_pos+0x34>
   1837c:	e0bfff17 	ldw	r2,-4(fp)
   18380:	108000b0 	cmpltui	r2,r2,2
   18384:	1000021e 	bne	r2,zero,18390 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   18388:	00bfffc4 	movi	r2,-1
   1838c:	00000f06 	br	183cc <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   18390:	e17fff17 	ldw	r5,-4(fp)
   18394:	e13ffe17 	ldw	r4,-8(fp)
   18398:	0017f5c0 	call	17f5c <get_DDRAM_addr>
   1839c:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   183a0:	e0bffc03 	ldbu	r2,-16(fp)
   183a4:	100b883a 	mov	r5,r2
   183a8:	e13ffd17 	ldw	r4,-12(fp)
   183ac:	0017fd00 	call	17fd0 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   183b0:	e0bffd17 	ldw	r2,-12(fp)
   183b4:	10800a17 	ldw	r2,40(r2)
   183b8:	10800044 	addi	r2,r2,1
   183bc:	1007883a 	mov	r3,r2
   183c0:	00800084 	movi	r2,2
   183c4:	18800025 	stbio	r2,0(r3)
	return 0;
   183c8:	0005883a 	mov	r2,zero
}
   183cc:	e037883a 	mov	sp,fp
   183d0:	dfc00117 	ldw	ra,4(sp)
   183d4:	df000017 	ldw	fp,0(sp)
   183d8:	dec00204 	addi	sp,sp,8
   183dc:	f800283a 	ret

000183e0 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   183e0:	defffd04 	addi	sp,sp,-12
   183e4:	dfc00215 	stw	ra,8(sp)
   183e8:	df000115 	stw	fp,4(sp)
   183ec:	df000104 	addi	fp,sp,4
   183f0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   183f4:	01400304 	movi	r5,12
   183f8:	e13fff17 	ldw	r4,-4(fp)
   183fc:	0017fd00 	call	17fd0 <alt_up_character_lcd_send_cmd>
}
   18400:	0001883a 	nop
   18404:	e037883a 	mov	sp,fp
   18408:	dfc00117 	ldw	ra,4(sp)
   1840c:	df000017 	ldw	fp,0(sp)
   18410:	dec00204 	addi	sp,sp,8
   18414:	f800283a 	ret

00018418 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   18418:	defffd04 	addi	sp,sp,-12
   1841c:	dfc00215 	stw	ra,8(sp)
   18420:	df000115 	stw	fp,4(sp)
   18424:	df000104 	addi	fp,sp,4
   18428:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   1842c:	014003c4 	movi	r5,15
   18430:	e13fff17 	ldw	r4,-4(fp)
   18434:	0017fd00 	call	17fd0 <alt_up_character_lcd_send_cmd>
}
   18438:	0001883a 	nop
   1843c:	e037883a 	mov	sp,fp
   18440:	dfc00117 	ldw	ra,4(sp)
   18444:	df000017 	ldw	fp,0(sp)
   18448:	dec00204 	addi	sp,sp,8
   1844c:	f800283a 	ret

00018450 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   18450:	defffd04 	addi	sp,sp,-12
   18454:	df000215 	stw	fp,8(sp)
   18458:	df000204 	addi	fp,sp,8
   1845c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   18460:	e0bfff17 	ldw	r2,-4(fp)
   18464:	10800a17 	ldw	r2,40(r2)
   18468:	10800104 	addi	r2,r2,4
   1846c:	10800037 	ldwio	r2,0(r2)
   18470:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   18474:	e0bffe17 	ldw	r2,-8(fp)
   18478:	10800054 	ori	r2,r2,1
   1847c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   18480:	e0bfff17 	ldw	r2,-4(fp)
   18484:	10800a17 	ldw	r2,40(r2)
   18488:	10800104 	addi	r2,r2,4
   1848c:	1007883a 	mov	r3,r2
   18490:	e0bffe17 	ldw	r2,-8(fp)
   18494:	18800035 	stwio	r2,0(r3)
}
   18498:	0001883a 	nop
   1849c:	e037883a 	mov	sp,fp
   184a0:	df000017 	ldw	fp,0(sp)
   184a4:	dec00104 	addi	sp,sp,4
   184a8:	f800283a 	ret

000184ac <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   184ac:	defffd04 	addi	sp,sp,-12
   184b0:	df000215 	stw	fp,8(sp)
   184b4:	df000204 	addi	fp,sp,8
   184b8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   184bc:	e0bfff17 	ldw	r2,-4(fp)
   184c0:	10800a17 	ldw	r2,40(r2)
   184c4:	10800104 	addi	r2,r2,4
   184c8:	10800037 	ldwio	r2,0(r2)
   184cc:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   184d0:	e0fffe17 	ldw	r3,-8(fp)
   184d4:	00bfff84 	movi	r2,-2
   184d8:	1884703a 	and	r2,r3,r2
   184dc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   184e0:	e0bfff17 	ldw	r2,-4(fp)
   184e4:	10800a17 	ldw	r2,40(r2)
   184e8:	10800104 	addi	r2,r2,4
   184ec:	1007883a 	mov	r3,r2
   184f0:	e0bffe17 	ldw	r2,-8(fp)
   184f4:	18800035 	stwio	r2,0(r3)
}
   184f8:	0001883a 	nop
   184fc:	e037883a 	mov	sp,fp
   18500:	df000017 	ldw	fp,0(sp)
   18504:	dec00104 	addi	sp,sp,4
   18508:	f800283a 	ret

0001850c <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   1850c:	defffd04 	addi	sp,sp,-12
   18510:	df000215 	stw	fp,8(sp)
   18514:	df000204 	addi	fp,sp,8
   18518:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1851c:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   18520:	e0bfff17 	ldw	r2,-4(fp)
   18524:	10800a17 	ldw	r2,40(r2)
   18528:	10800084 	addi	r2,r2,2
   1852c:	1080002b 	ldhuio	r2,0(r2)
   18530:	10bfffcc 	andi	r2,r2,65535
   18534:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   18538:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1853c:	e037883a 	mov	sp,fp
   18540:	df000017 	ldw	fp,0(sp)
   18544:	dec00104 	addi	sp,sp,4
   18548:	f800283a 	ret

0001854c <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   1854c:	defffd04 	addi	sp,sp,-12
   18550:	df000215 	stw	fp,8(sp)
   18554:	df000204 	addi	fp,sp,8
   18558:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1855c:	e0bfff17 	ldw	r2,-4(fp)
   18560:	10800a17 	ldw	r2,40(r2)
   18564:	10800104 	addi	r2,r2,4
   18568:	10800037 	ldwio	r2,0(r2)
   1856c:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   18570:	e0bffe17 	ldw	r2,-8(fp)
   18574:	1004d43a 	srli	r2,r2,16
}
   18578:	e037883a 	mov	sp,fp
   1857c:	df000017 	ldw	fp,0(sp)
   18580:	dec00104 	addi	sp,sp,4
   18584:	f800283a 	ret

00018588 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   18588:	defffd04 	addi	sp,sp,-12
   1858c:	df000215 	stw	fp,8(sp)
   18590:	df000204 	addi	fp,sp,8
   18594:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   18598:	e0bfff17 	ldw	r2,-4(fp)
   1859c:	1080800c 	andi	r2,r2,512
   185a0:	1004d27a 	srli	r2,r2,9
   185a4:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   185a8:	e0bffe17 	ldw	r2,-8(fp)
   185ac:	10000226 	beq	r2,zero,185b8 <alt_up_irda_check_parity+0x30>
   185b0:	00bfffc4 	movi	r2,-1
   185b4:	00000106 	br	185bc <alt_up_irda_check_parity+0x34>
   185b8:	0005883a 	mov	r2,zero
}
   185bc:	e037883a 	mov	sp,fp
   185c0:	df000017 	ldw	fp,0(sp)
   185c4:	dec00104 	addi	sp,sp,4
   185c8:	f800283a 	ret

000185cc <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   185cc:	defffd04 	addi	sp,sp,-12
   185d0:	df000215 	stw	fp,8(sp)
   185d4:	df000204 	addi	fp,sp,8
   185d8:	e13ffe15 	stw	r4,-8(fp)
   185dc:	2805883a 	mov	r2,r5
   185e0:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   185e4:	e0bffe17 	ldw	r2,-8(fp)
   185e8:	10800a17 	ldw	r2,40(r2)
   185ec:	1007883a 	mov	r3,r2
   185f0:	e0bfff03 	ldbu	r2,-4(fp)
   185f4:	18800035 	stwio	r2,0(r3)
	return 0;
   185f8:	0005883a 	mov	r2,zero
}
   185fc:	e037883a 	mov	sp,fp
   18600:	df000017 	ldw	fp,0(sp)
   18604:	dec00104 	addi	sp,sp,4
   18608:	f800283a 	ret

0001860c <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   1860c:	defffa04 	addi	sp,sp,-24
   18610:	dfc00515 	stw	ra,20(sp)
   18614:	df000415 	stw	fp,16(sp)
   18618:	df000404 	addi	fp,sp,16
   1861c:	e13ffd15 	stw	r4,-12(fp)
   18620:	e17ffe15 	stw	r5,-8(fp)
   18624:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   18628:	e0bffd17 	ldw	r2,-12(fp)
   1862c:	10800a17 	ldw	r2,40(r2)
   18630:	10800037 	ldwio	r2,0(r2)
   18634:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   18638:	e0bffc17 	ldw	r2,-16(fp)
   1863c:	1007883a 	mov	r3,r2
   18640:	e0bffe17 	ldw	r2,-8(fp)
   18644:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   18648:	e13ffc17 	ldw	r4,-16(fp)
   1864c:	00185880 	call	18588 <alt_up_irda_check_parity>
   18650:	1007883a 	mov	r3,r2
   18654:	e0bfff17 	ldw	r2,-4(fp)
   18658:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   1865c:	e0bffc17 	ldw	r2,-16(fp)
   18660:	10a0000c 	andi	r2,r2,32768
   18664:	1004d3fa 	srli	r2,r2,15
   18668:	10bfffc4 	addi	r2,r2,-1
}
   1866c:	e037883a 	mov	sp,fp
   18670:	dfc00117 	ldw	ra,4(sp)
   18674:	df000017 	ldw	fp,0(sp)
   18678:	dec00204 	addi	sp,sp,8
   1867c:	f800283a 	ret

00018680 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   18680:	defff804 	addi	sp,sp,-32
   18684:	dfc00715 	stw	ra,28(sp)
   18688:	df000615 	stw	fp,24(sp)
   1868c:	df000604 	addi	fp,sp,24
   18690:	e13ffd15 	stw	r4,-12(fp)
   18694:	e17ffe15 	stw	r5,-8(fp)
   18698:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1869c:	e0bffd17 	ldw	r2,-12(fp)
   186a0:	10800017 	ldw	r2,0(r2)
   186a4:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   186a8:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   186ac:	00000c06 	br	186e0 <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   186b0:	e0bffe17 	ldw	r2,-8(fp)
   186b4:	10c00044 	addi	r3,r2,1
   186b8:	e0fffe15 	stw	r3,-8(fp)
   186bc:	e0fffc04 	addi	r3,fp,-16
   186c0:	180d883a 	mov	r6,r3
   186c4:	100b883a 	mov	r5,r2
   186c8:	e13ffb17 	ldw	r4,-20(fp)
   186cc:	001860c0 	call	1860c <alt_up_irda_read_data>
   186d0:	1000081e 	bne	r2,zero,186f4 <alt_up_irda_read_fd+0x74>
			count++;
   186d4:	e0bffa17 	ldw	r2,-24(fp)
   186d8:	10800044 	addi	r2,r2,1
   186dc:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   186e0:	e0bfff17 	ldw	r2,-4(fp)
   186e4:	10ffffc4 	addi	r3,r2,-1
   186e8:	e0ffff15 	stw	r3,-4(fp)
   186ec:	103ff01e 	bne	r2,zero,186b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70186b0>
   186f0:	00000106 	br	186f8 <alt_up_irda_read_fd+0x78>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   186f4:	0001883a 	nop
	}
	return count;
   186f8:	e0bffa17 	ldw	r2,-24(fp)
}
   186fc:	e037883a 	mov	sp,fp
   18700:	dfc00117 	ldw	ra,4(sp)
   18704:	df000017 	ldw	fp,0(sp)
   18708:	dec00204 	addi	sp,sp,8
   1870c:	f800283a 	ret

00018710 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   18710:	defff904 	addi	sp,sp,-28
   18714:	dfc00615 	stw	ra,24(sp)
   18718:	df000515 	stw	fp,20(sp)
   1871c:	df000504 	addi	fp,sp,20
   18720:	e13ffd15 	stw	r4,-12(fp)
   18724:	e17ffe15 	stw	r5,-8(fp)
   18728:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1872c:	e0bffd17 	ldw	r2,-12(fp)
   18730:	10800017 	ldw	r2,0(r2)
   18734:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   18738:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1873c:	00000c06 	br	18770 <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   18740:	e0bffe17 	ldw	r2,-8(fp)
   18744:	10c00044 	addi	r3,r2,1
   18748:	e0fffe15 	stw	r3,-8(fp)
   1874c:	10800003 	ldbu	r2,0(r2)
   18750:	10803fcc 	andi	r2,r2,255
   18754:	100b883a 	mov	r5,r2
   18758:	e13ffc17 	ldw	r4,-16(fp)
   1875c:	00185cc0 	call	185cc <alt_up_irda_write_data>
   18760:	1000081e 	bne	r2,zero,18784 <alt_up_irda_write_fd+0x74>
			count++;
   18764:	e0bffb17 	ldw	r2,-20(fp)
   18768:	10800044 	addi	r2,r2,1
   1876c:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   18770:	e0bfff17 	ldw	r2,-4(fp)
   18774:	10ffffc4 	addi	r3,r2,-1
   18778:	e0ffff15 	stw	r3,-4(fp)
   1877c:	103ff01e 	bne	r2,zero,18740 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018740>
   18780:	00000106 	br	18788 <alt_up_irda_write_fd+0x78>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
   18784:	0001883a 	nop
	}
	return count;
   18788:	e0bffb17 	ldw	r2,-20(fp)
}
   1878c:	e037883a 	mov	sp,fp
   18790:	dfc00117 	ldw	ra,4(sp)
   18794:	df000017 	ldw	fp,0(sp)
   18798:	dec00204 	addi	sp,sp,8
   1879c:	f800283a 	ret

000187a0 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   187a0:	defffc04 	addi	sp,sp,-16
   187a4:	dfc00315 	stw	ra,12(sp)
   187a8:	df000215 	stw	fp,8(sp)
   187ac:	df000204 	addi	fp,sp,8
   187b0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   187b4:	d1600804 	addi	r5,gp,-32736
   187b8:	e13fff17 	ldw	r4,-4(fp)
   187bc:	00195080 	call	19508 <alt_find_dev>
   187c0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   187c4:	e0bffe17 	ldw	r2,-8(fp)
}
   187c8:	e037883a 	mov	sp,fp
   187cc:	dfc00117 	ldw	ra,4(sp)
   187d0:	df000017 	ldw	fp,0(sp)
   187d4:	dec00204 	addi	sp,sp,8
   187d8:	f800283a 	ret

000187dc <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   187dc:	defffd04 	addi	sp,sp,-12
   187e0:	df000215 	stw	fp,8(sp)
   187e4:	df000204 	addi	fp,sp,8
   187e8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   187ec:	e0bfff17 	ldw	r2,-4(fp)
   187f0:	1080400c 	andi	r2,r2,256
   187f4:	1004d23a 	srli	r2,r2,8
   187f8:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   187fc:	e0bffe03 	ldbu	r2,-8(fp)
}
   18800:	e037883a 	mov	sp,fp
   18804:	df000017 	ldw	fp,0(sp)
   18808:	dec00104 	addi	sp,sp,4
   1880c:	f800283a 	ret

00018810 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   18810:	defffd04 	addi	sp,sp,-12
   18814:	df000215 	stw	fp,8(sp)
   18818:	df000204 	addi	fp,sp,8
   1881c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   18820:	e0bfff17 	ldw	r2,-4(fp)
   18824:	1080004c 	andi	r2,r2,1
   18828:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1882c:	e0bffe03 	ldbu	r2,-8(fp)
}
   18830:	e037883a 	mov	sp,fp
   18834:	df000017 	ldw	fp,0(sp)
   18838:	dec00104 	addi	sp,sp,4
   1883c:	f800283a 	ret

00018840 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   18840:	defffd04 	addi	sp,sp,-12
   18844:	df000215 	stw	fp,8(sp)
   18848:	df000204 	addi	fp,sp,8
   1884c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   18850:	e0bfff17 	ldw	r2,-4(fp)
   18854:	1081000c 	andi	r2,r2,1024
   18858:	1004d2ba 	srli	r2,r2,10
   1885c:	e0bffe05 	stb	r2,-8(fp)
	return re;
   18860:	e0bffe03 	ldbu	r2,-8(fp)
}
   18864:	e037883a 	mov	sp,fp
   18868:	df000017 	ldw	fp,0(sp)
   1886c:	dec00104 	addi	sp,sp,4
   18870:	f800283a 	ret

00018874 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   18874:	defffd04 	addi	sp,sp,-12
   18878:	df000215 	stw	fp,8(sp)
   1887c:	df000204 	addi	fp,sp,8
   18880:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   18884:	e0bfff17 	ldw	r2,-4(fp)
   18888:	1004d43a 	srli	r2,r2,16
   1888c:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   18890:	e0bffe0b 	ldhu	r2,-8(fp)
}
   18894:	e037883a 	mov	sp,fp
   18898:	df000017 	ldw	fp,0(sp)
   1889c:	dec00104 	addi	sp,sp,4
   188a0:	f800283a 	ret

000188a4 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   188a4:	defffd04 	addi	sp,sp,-12
   188a8:	df000215 	stw	fp,8(sp)
   188ac:	df000204 	addi	fp,sp,8
   188b0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   188b4:	e0bfff17 	ldw	r2,-4(fp)
   188b8:	10a0000c 	andi	r2,r2,32768
   188bc:	1004d3fa 	srli	r2,r2,15
   188c0:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   188c4:	e0bffe03 	ldbu	r2,-8(fp)
}
   188c8:	e037883a 	mov	sp,fp
   188cc:	df000017 	ldw	fp,0(sp)
   188d0:	dec00104 	addi	sp,sp,4
   188d4:	f800283a 	ret

000188d8 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   188d8:	defffd04 	addi	sp,sp,-12
   188dc:	df000215 	stw	fp,8(sp)
   188e0:	df000204 	addi	fp,sp,8
   188e4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   188e8:	e0bfff17 	ldw	r2,-4(fp)
   188ec:	e0bffe05 	stb	r2,-8(fp)
	return data;
   188f0:	e0bffe03 	ldbu	r2,-8(fp)
}
   188f4:	e037883a 	mov	sp,fp
   188f8:	df000017 	ldw	fp,0(sp)
   188fc:	dec00104 	addi	sp,sp,4
   18900:	f800283a 	ret

00018904 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   18904:	defffb04 	addi	sp,sp,-20
   18908:	dfc00415 	stw	ra,16(sp)
   1890c:	df000315 	stw	fp,12(sp)
   18910:	df000304 	addi	fp,sp,12
   18914:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   18918:	01403fc4 	movi	r5,255
   1891c:	e13fff17 	ldw	r4,-4(fp)
   18920:	0018b640 	call	18b64 <alt_up_ps2_write_data_byte_with_ack>
   18924:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   18928:	e0bffd17 	ldw	r2,-12(fp)
   1892c:	1000211e 	bne	r2,zero,189b4 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   18930:	e0bffe04 	addi	r2,fp,-8
   18934:	100b883a 	mov	r5,r2
   18938:	e13fff17 	ldw	r4,-4(fp)
   1893c:	0018bc80 	call	18bc8 <alt_up_ps2_read_data_byte_timeout>
   18940:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   18944:	e0bffd17 	ldw	r2,-12(fp)
   18948:	10001a1e 	bne	r2,zero,189b4 <alt_up_ps2_init+0xb0>
   1894c:	e0bffe03 	ldbu	r2,-8(fp)
   18950:	10803fcc 	andi	r2,r2,255
   18954:	10802a98 	cmpnei	r2,r2,170
   18958:	1000161e 	bne	r2,zero,189b4 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1895c:	e0bffe04 	addi	r2,fp,-8
   18960:	100b883a 	mov	r5,r2
   18964:	e13fff17 	ldw	r4,-4(fp)
   18968:	0018bc80 	call	18bc8 <alt_up_ps2_read_data_byte_timeout>
   1896c:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   18970:	e0bffd17 	ldw	r2,-12(fp)
   18974:	10bfe318 	cmpnei	r2,r2,-116
   18978:	1000041e 	bne	r2,zero,1898c <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   1897c:	e0bfff17 	ldw	r2,-4(fp)
   18980:	00c00044 	movi	r3,1
   18984:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
   18988:	00000a06 	br	189b4 <alt_up_ps2_init+0xb0>
			if (status == -ETIMEDOUT)
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
			}
			else if (status == 0 && byte == 0x00)
   1898c:	e0bffd17 	ldw	r2,-12(fp)
   18990:	1000081e 	bne	r2,zero,189b4 <alt_up_ps2_init+0xb0>
   18994:	e0bffe03 	ldbu	r2,-8(fp)
   18998:	10803fcc 	andi	r2,r2,255
   1899c:	1000051e 	bne	r2,zero,189b4 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   189a0:	e0bfff17 	ldw	r2,-4(fp)
   189a4:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   189a8:	01403d04 	movi	r5,244
   189ac:	e13fff17 	ldw	r4,-4(fp)
   189b0:	0018a880 	call	18a88 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   189b4:	0001883a 	nop
   189b8:	e037883a 	mov	sp,fp
   189bc:	dfc00117 	ldw	ra,4(sp)
   189c0:	df000017 	ldw	fp,0(sp)
   189c4:	dec00204 	addi	sp,sp,8
   189c8:	f800283a 	ret

000189cc <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   189cc:	defffd04 	addi	sp,sp,-12
   189d0:	df000215 	stw	fp,8(sp)
   189d4:	df000204 	addi	fp,sp,8
   189d8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   189dc:	e0bfff17 	ldw	r2,-4(fp)
   189e0:	10800a17 	ldw	r2,40(r2)
   189e4:	10800104 	addi	r2,r2,4
   189e8:	10800037 	ldwio	r2,0(r2)
   189ec:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   189f0:	e0bffe17 	ldw	r2,-8(fp)
   189f4:	10800054 	ori	r2,r2,1
   189f8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   189fc:	e0bfff17 	ldw	r2,-4(fp)
   18a00:	10800a17 	ldw	r2,40(r2)
   18a04:	10800104 	addi	r2,r2,4
   18a08:	1007883a 	mov	r3,r2
   18a0c:	e0bffe17 	ldw	r2,-8(fp)
   18a10:	18800035 	stwio	r2,0(r3)
}
   18a14:	0001883a 	nop
   18a18:	e037883a 	mov	sp,fp
   18a1c:	df000017 	ldw	fp,0(sp)
   18a20:	dec00104 	addi	sp,sp,4
   18a24:	f800283a 	ret

00018a28 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   18a28:	defffd04 	addi	sp,sp,-12
   18a2c:	df000215 	stw	fp,8(sp)
   18a30:	df000204 	addi	fp,sp,8
   18a34:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   18a38:	e0bfff17 	ldw	r2,-4(fp)
   18a3c:	10800a17 	ldw	r2,40(r2)
   18a40:	10800104 	addi	r2,r2,4
   18a44:	10800037 	ldwio	r2,0(r2)
   18a48:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   18a4c:	e0fffe17 	ldw	r3,-8(fp)
   18a50:	00bfff84 	movi	r2,-2
   18a54:	1884703a 	and	r2,r3,r2
   18a58:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   18a5c:	e0bfff17 	ldw	r2,-4(fp)
   18a60:	10800a17 	ldw	r2,40(r2)
   18a64:	10800104 	addi	r2,r2,4
   18a68:	1007883a 	mov	r3,r2
   18a6c:	e0bffe17 	ldw	r2,-8(fp)
   18a70:	18800035 	stwio	r2,0(r3)
}
   18a74:	0001883a 	nop
   18a78:	e037883a 	mov	sp,fp
   18a7c:	df000017 	ldw	fp,0(sp)
   18a80:	dec00104 	addi	sp,sp,4
   18a84:	f800283a 	ret

00018a88 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   18a88:	defffb04 	addi	sp,sp,-20
   18a8c:	dfc00415 	stw	ra,16(sp)
   18a90:	df000315 	stw	fp,12(sp)
   18a94:	df000304 	addi	fp,sp,12
   18a98:	e13ffe15 	stw	r4,-8(fp)
   18a9c:	2805883a 	mov	r2,r5
   18aa0:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   18aa4:	e0bffe17 	ldw	r2,-8(fp)
   18aa8:	10800a17 	ldw	r2,40(r2)
   18aac:	1007883a 	mov	r3,r2
   18ab0:	e0bfff03 	ldbu	r2,-4(fp)
   18ab4:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   18ab8:	e0bffe17 	ldw	r2,-8(fp)
   18abc:	10800a17 	ldw	r2,40(r2)
   18ac0:	10800104 	addi	r2,r2,4
   18ac4:	10800037 	ldwio	r2,0(r2)
   18ac8:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   18acc:	e13ffd17 	ldw	r4,-12(fp)
   18ad0:	00188400 	call	18840 <read_CE_bit>
   18ad4:	10803fcc 	andi	r2,r2,255
   18ad8:	10000226 	beq	r2,zero,18ae4 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   18adc:	00bffec4 	movi	r2,-5
   18ae0:	00000106 	br	18ae8 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   18ae4:	0005883a 	mov	r2,zero
}
   18ae8:	e037883a 	mov	sp,fp
   18aec:	dfc00117 	ldw	ra,4(sp)
   18af0:	df000017 	ldw	fp,0(sp)
   18af4:	dec00204 	addi	sp,sp,8
   18af8:	f800283a 	ret

00018afc <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   18afc:	defffc04 	addi	sp,sp,-16
   18b00:	dfc00315 	stw	ra,12(sp)
   18b04:	df000215 	stw	fp,8(sp)
   18b08:	df000204 	addi	fp,sp,8
   18b0c:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   18b10:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   18b14:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   18b18:	e0bffe44 	addi	r2,fp,-7
   18b1c:	100b883a 	mov	r5,r2
   18b20:	e13fff17 	ldw	r4,-4(fp)
   18b24:	0018bc80 	call	18bc8 <alt_up_ps2_read_data_byte_timeout>
   18b28:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   18b2c:	e0bffe03 	ldbu	r2,-8(fp)
   18b30:	1000061e 	bne	r2,zero,18b4c <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   18b34:	e0bffe43 	ldbu	r2,-7(fp)
   18b38:	10803fcc 	andi	r2,r2,255
   18b3c:	10803e98 	cmpnei	r2,r2,250
   18b40:	103ff51e 	bne	r2,zero,18b18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018b18>
				return 0;
   18b44:	0005883a 	mov	r2,zero
   18b48:	00000106 	br	18b50 <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
   18b4c:	e0bffe03 	ldbu	r2,-8(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
   18b50:	e037883a 	mov	sp,fp
   18b54:	dfc00117 	ldw	ra,4(sp)
   18b58:	df000017 	ldw	fp,0(sp)
   18b5c:	dec00204 	addi	sp,sp,8
   18b60:	f800283a 	ret

00018b64 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   18b64:	defffa04 	addi	sp,sp,-24
   18b68:	dfc00515 	stw	ra,20(sp)
   18b6c:	df000415 	stw	fp,16(sp)
   18b70:	df000404 	addi	fp,sp,16
   18b74:	e13ffe15 	stw	r4,-8(fp)
   18b78:	2805883a 	mov	r2,r5
   18b7c:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   18b80:	e0bfff03 	ldbu	r2,-4(fp)
   18b84:	100b883a 	mov	r5,r2
   18b88:	e13ffe17 	ldw	r4,-8(fp)
   18b8c:	0018a880 	call	18a88 <alt_up_ps2_write_data_byte>
   18b90:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   18b94:	e0bffc17 	ldw	r2,-16(fp)
   18b98:	10000226 	beq	r2,zero,18ba4 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   18b9c:	e0bffc17 	ldw	r2,-16(fp)
   18ba0:	00000406 	br	18bb4 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   18ba4:	e13ffe17 	ldw	r4,-8(fp)
   18ba8:	0018afc0 	call	18afc <alt_up_ps2_wait_for_ack>
   18bac:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   18bb0:	e0bffd17 	ldw	r2,-12(fp)
}
   18bb4:	e037883a 	mov	sp,fp
   18bb8:	dfc00117 	ldw	ra,4(sp)
   18bbc:	df000017 	ldw	fp,0(sp)
   18bc0:	dec00204 	addi	sp,sp,8
   18bc4:	f800283a 	ret

00018bc8 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   18bc8:	defffa04 	addi	sp,sp,-24
   18bcc:	dfc00515 	stw	ra,20(sp)
   18bd0:	df000415 	stw	fp,16(sp)
   18bd4:	df000404 	addi	fp,sp,16
   18bd8:	e13ffe15 	stw	r4,-8(fp)
   18bdc:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   18be0:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   18be4:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   18be8:	e0bffc17 	ldw	r2,-16(fp)
   18bec:	10800044 	addi	r2,r2,1
   18bf0:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   18bf4:	e0bffe17 	ldw	r2,-8(fp)
   18bf8:	10800a17 	ldw	r2,40(r2)
   18bfc:	10800037 	ldwio	r2,0(r2)
   18c00:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   18c04:	e13ffd17 	ldw	r4,-12(fp)
   18c08:	00188a40 	call	188a4 <read_data_valid>
   18c0c:	10803fcc 	andi	r2,r2,255
   18c10:	10000726 	beq	r2,zero,18c30 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   18c14:	e13ffd17 	ldw	r4,-12(fp)
   18c18:	00188d80 	call	188d8 <read_data_byte>
   18c1c:	1007883a 	mov	r3,r2
   18c20:	e0bfff17 	ldw	r2,-4(fp)
   18c24:	10c00005 	stb	r3,0(r2)
			return 0;
   18c28:	0005883a 	mov	r2,zero
   18c2c:	00000806 	br	18c50 <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   18c30:	e0bffe17 	ldw	r2,-8(fp)
   18c34:	10800c17 	ldw	r2,48(r2)
   18c38:	103feb26 	beq	r2,zero,18be8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018be8>
   18c3c:	e0bffe17 	ldw	r2,-8(fp)
   18c40:	10c00c17 	ldw	r3,48(r2)
   18c44:	e0bffc17 	ldw	r2,-16(fp)
   18c48:	18bfe72e 	bgeu	r3,r2,18be8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018be8>
		{
			return -ETIMEDOUT;
   18c4c:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
   18c50:	e037883a 	mov	sp,fp
   18c54:	dfc00117 	ldw	ra,4(sp)
   18c58:	df000017 	ldw	fp,0(sp)
   18c5c:	dec00204 	addi	sp,sp,8
   18c60:	f800283a 	ret

00018c64 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   18c64:	defffb04 	addi	sp,sp,-20
   18c68:	dfc00415 	stw	ra,16(sp)
   18c6c:	df000315 	stw	fp,12(sp)
   18c70:	df000304 	addi	fp,sp,12
   18c74:	e13ffe15 	stw	r4,-8(fp)
   18c78:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   18c7c:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   18c80:	e0bffe17 	ldw	r2,-8(fp)
   18c84:	10800a17 	ldw	r2,40(r2)
   18c88:	10800037 	ldwio	r2,0(r2)
   18c8c:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   18c90:	e13ffd17 	ldw	r4,-12(fp)
   18c94:	00188a40 	call	188a4 <read_data_valid>
   18c98:	10803fcc 	andi	r2,r2,255
   18c9c:	10000726 	beq	r2,zero,18cbc <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   18ca0:	e13ffd17 	ldw	r4,-12(fp)
   18ca4:	00188d80 	call	188d8 <read_data_byte>
   18ca8:	1007883a 	mov	r3,r2
   18cac:	e0bfff17 	ldw	r2,-4(fp)
   18cb0:	10c00005 	stb	r3,0(r2)
		return 0;
   18cb4:	0005883a 	mov	r2,zero
   18cb8:	00000106 	br	18cc0 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   18cbc:	00bfffc4 	movi	r2,-1
}
   18cc0:	e037883a 	mov	sp,fp
   18cc4:	dfc00117 	ldw	ra,4(sp)
   18cc8:	df000017 	ldw	fp,0(sp)
   18ccc:	dec00204 	addi	sp,sp,8
   18cd0:	f800283a 	ret

00018cd4 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   18cd4:	defffb04 	addi	sp,sp,-20
   18cd8:	dfc00415 	stw	ra,16(sp)
   18cdc:	df000315 	stw	fp,12(sp)
   18ce0:	df000304 	addi	fp,sp,12
   18ce4:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   18ce8:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   18cec:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   18cf0:	e0bfff17 	ldw	r2,-4(fp)
   18cf4:	10800a17 	ldw	r2,40(r2)
   18cf8:	10800037 	ldwio	r2,0(r2)
   18cfc:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   18d00:	e13ffe17 	ldw	r4,-8(fp)
   18d04:	00188740 	call	18874 <read_num_bytes_available>
   18d08:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   18d0c:	e0bffd0b 	ldhu	r2,-12(fp)
   18d10:	103ff71e 	bne	r2,zero,18cf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018cf0>
}
   18d14:	0001883a 	nop
   18d18:	e037883a 	mov	sp,fp
   18d1c:	dfc00117 	ldw	ra,4(sp)
   18d20:	df000017 	ldw	fp,0(sp)
   18d24:	dec00204 	addi	sp,sp,8
   18d28:	f800283a 	ret

00018d2c <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   18d2c:	defff804 	addi	sp,sp,-32
   18d30:	dfc00715 	stw	ra,28(sp)
   18d34:	df000615 	stw	fp,24(sp)
   18d38:	df000604 	addi	fp,sp,24
   18d3c:	e13ffd15 	stw	r4,-12(fp)
   18d40:	e17ffe15 	stw	r5,-8(fp)
   18d44:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   18d48:	e0bffd17 	ldw	r2,-12(fp)
   18d4c:	10800017 	ldw	r2,0(r2)
   18d50:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   18d54:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   18d58:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   18d5c:	e0fffc17 	ldw	r3,-16(fp)
   18d60:	e0bfff17 	ldw	r2,-4(fp)
   18d64:	18bffd16 	blt	r3,r2,18d5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018d5c>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   18d68:	e0bffe17 	ldw	r2,-8(fp)
   18d6c:	10c00044 	addi	r3,r2,1
   18d70:	e0fffe15 	stw	r3,-8(fp)
   18d74:	100b883a 	mov	r5,r2
   18d78:	e13ffa17 	ldw	r4,-24(fp)
   18d7c:	0018bc80 	call	18bc8 <alt_up_ps2_read_data_byte_timeout>
   18d80:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   18d84:	e0bffb17 	ldw	r2,-20(fp)
   18d88:	10000226 	beq	r2,zero,18d94 <alt_up_ps2_read_fd+0x68>
			return count;
   18d8c:	e0bffc17 	ldw	r2,-16(fp)
   18d90:	00000406 	br	18da4 <alt_up_ps2_read_fd+0x78>
		count++;
   18d94:	e0bffc17 	ldw	r2,-16(fp)
   18d98:	10800044 	addi	r2,r2,1
   18d9c:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   18da0:	e0bffc17 	ldw	r2,-16(fp)
}
   18da4:	e037883a 	mov	sp,fp
   18da8:	dfc00117 	ldw	ra,4(sp)
   18dac:	df000017 	ldw	fp,0(sp)
   18db0:	dec00204 	addi	sp,sp,8
   18db4:	f800283a 	ret

00018db8 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   18db8:	defff804 	addi	sp,sp,-32
   18dbc:	dfc00715 	stw	ra,28(sp)
   18dc0:	df000615 	stw	fp,24(sp)
   18dc4:	df000604 	addi	fp,sp,24
   18dc8:	e13ffd15 	stw	r4,-12(fp)
   18dcc:	e17ffe15 	stw	r5,-8(fp)
   18dd0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   18dd4:	e0bffd17 	ldw	r2,-12(fp)
   18dd8:	10800017 	ldw	r2,0(r2)
   18ddc:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   18de0:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   18de4:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   18de8:	00001006 	br	18e2c <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   18dec:	e0bffe17 	ldw	r2,-8(fp)
   18df0:	10c00044 	addi	r3,r2,1
   18df4:	e0fffe15 	stw	r3,-8(fp)
   18df8:	10800003 	ldbu	r2,0(r2)
   18dfc:	10803fcc 	andi	r2,r2,255
   18e00:	100b883a 	mov	r5,r2
   18e04:	e13ffb17 	ldw	r4,-20(fp)
   18e08:	0018a880 	call	18a88 <alt_up_ps2_write_data_byte>
   18e0c:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   18e10:	e0bffc17 	ldw	r2,-16(fp)
   18e14:	10000226 	beq	r2,zero,18e20 <alt_up_ps2_write_fd+0x68>
			return count;
   18e18:	e0bffa17 	ldw	r2,-24(fp)
   18e1c:	00000706 	br	18e3c <alt_up_ps2_write_fd+0x84>
		count++;
   18e20:	e0bffa17 	ldw	r2,-24(fp)
   18e24:	10800044 	addi	r2,r2,1
   18e28:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   18e2c:	e0fffa17 	ldw	r3,-24(fp)
   18e30:	e0bfff17 	ldw	r2,-4(fp)
   18e34:	18bfed16 	blt	r3,r2,18dec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018dec>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   18e38:	e0bffa17 	ldw	r2,-24(fp)
}
   18e3c:	e037883a 	mov	sp,fp
   18e40:	dfc00117 	ldw	ra,4(sp)
   18e44:	df000017 	ldw	fp,0(sp)
   18e48:	dec00204 	addi	sp,sp,8
   18e4c:	f800283a 	ret

00018e50 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   18e50:	defffc04 	addi	sp,sp,-16
   18e54:	dfc00315 	stw	ra,12(sp)
   18e58:	df000215 	stw	fp,8(sp)
   18e5c:	df000204 	addi	fp,sp,8
   18e60:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   18e64:	d1600804 	addi	r5,gp,-32736
   18e68:	e13fff17 	ldw	r4,-4(fp)
   18e6c:	00195080 	call	19508 <alt_find_dev>
   18e70:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   18e74:	e0bffe17 	ldw	r2,-8(fp)
}
   18e78:	e037883a 	mov	sp,fp
   18e7c:	dfc00117 	ldw	ra,4(sp)
   18e80:	df000017 	ldw	fp,0(sp)
   18e84:	dec00204 	addi	sp,sp,8
   18e88:	f800283a 	ret

00018e8c <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   18e8c:	defffd04 	addi	sp,sp,-12
   18e90:	df000215 	stw	fp,8(sp)
   18e94:	df000204 	addi	fp,sp,8
   18e98:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   18e9c:	e0bfff17 	ldw	r2,-4(fp)
   18ea0:	10800a17 	ldw	r2,40(r2)
   18ea4:	10800104 	addi	r2,r2,4
   18ea8:	10800037 	ldwio	r2,0(r2)
   18eac:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   18eb0:	e0bffe17 	ldw	r2,-8(fp)
   18eb4:	10800054 	ori	r2,r2,1
   18eb8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   18ebc:	e0bfff17 	ldw	r2,-4(fp)
   18ec0:	10800a17 	ldw	r2,40(r2)
   18ec4:	10800104 	addi	r2,r2,4
   18ec8:	1007883a 	mov	r3,r2
   18ecc:	e0bffe17 	ldw	r2,-8(fp)
   18ed0:	18800035 	stwio	r2,0(r3)
}
   18ed4:	0001883a 	nop
   18ed8:	e037883a 	mov	sp,fp
   18edc:	df000017 	ldw	fp,0(sp)
   18ee0:	dec00104 	addi	sp,sp,4
   18ee4:	f800283a 	ret

00018ee8 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   18ee8:	defffd04 	addi	sp,sp,-12
   18eec:	df000215 	stw	fp,8(sp)
   18ef0:	df000204 	addi	fp,sp,8
   18ef4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   18ef8:	e0bfff17 	ldw	r2,-4(fp)
   18efc:	10800a17 	ldw	r2,40(r2)
   18f00:	10800104 	addi	r2,r2,4
   18f04:	10800037 	ldwio	r2,0(r2)
   18f08:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   18f0c:	e0fffe17 	ldw	r3,-8(fp)
   18f10:	00bfff84 	movi	r2,-2
   18f14:	1884703a 	and	r2,r3,r2
   18f18:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   18f1c:	e0bfff17 	ldw	r2,-4(fp)
   18f20:	10800a17 	ldw	r2,40(r2)
   18f24:	10800104 	addi	r2,r2,4
   18f28:	1007883a 	mov	r3,r2
   18f2c:	e0bffe17 	ldw	r2,-8(fp)
   18f30:	18800035 	stwio	r2,0(r3)
}
   18f34:	0001883a 	nop
   18f38:	e037883a 	mov	sp,fp
   18f3c:	df000017 	ldw	fp,0(sp)
   18f40:	dec00104 	addi	sp,sp,4
   18f44:	f800283a 	ret

00018f48 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   18f48:	defffd04 	addi	sp,sp,-12
   18f4c:	df000215 	stw	fp,8(sp)
   18f50:	df000204 	addi	fp,sp,8
   18f54:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   18f58:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   18f5c:	e0bfff17 	ldw	r2,-4(fp)
   18f60:	10800a17 	ldw	r2,40(r2)
   18f64:	10800084 	addi	r2,r2,2
   18f68:	1080002b 	ldhuio	r2,0(r2)
   18f6c:	10bfffcc 	andi	r2,r2,65535
   18f70:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   18f74:	e0bffe0b 	ldhu	r2,-8(fp)
}
   18f78:	e037883a 	mov	sp,fp
   18f7c:	df000017 	ldw	fp,0(sp)
   18f80:	dec00104 	addi	sp,sp,4
   18f84:	f800283a 	ret

00018f88 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   18f88:	defffd04 	addi	sp,sp,-12
   18f8c:	df000215 	stw	fp,8(sp)
   18f90:	df000204 	addi	fp,sp,8
   18f94:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   18f98:	e0bfff17 	ldw	r2,-4(fp)
   18f9c:	10800a17 	ldw	r2,40(r2)
   18fa0:	10800104 	addi	r2,r2,4
   18fa4:	10800037 	ldwio	r2,0(r2)
   18fa8:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   18fac:	e0bffe17 	ldw	r2,-8(fp)
   18fb0:	1004d43a 	srli	r2,r2,16
}
   18fb4:	e037883a 	mov	sp,fp
   18fb8:	df000017 	ldw	fp,0(sp)
   18fbc:	dec00104 	addi	sp,sp,4
   18fc0:	f800283a 	ret

00018fc4 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   18fc4:	defffd04 	addi	sp,sp,-12
   18fc8:	df000215 	stw	fp,8(sp)
   18fcc:	df000204 	addi	fp,sp,8
   18fd0:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   18fd4:	e0bfff17 	ldw	r2,-4(fp)
   18fd8:	1080800c 	andi	r2,r2,512
   18fdc:	1004d27a 	srli	r2,r2,9
   18fe0:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   18fe4:	e0bffe17 	ldw	r2,-8(fp)
   18fe8:	10000226 	beq	r2,zero,18ff4 <alt_up_rs232_check_parity+0x30>
   18fec:	00bfffc4 	movi	r2,-1
   18ff0:	00000106 	br	18ff8 <alt_up_rs232_check_parity+0x34>
   18ff4:	0005883a 	mov	r2,zero
}
   18ff8:	e037883a 	mov	sp,fp
   18ffc:	df000017 	ldw	fp,0(sp)
   19000:	dec00104 	addi	sp,sp,4
   19004:	f800283a 	ret

00019008 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   19008:	defffd04 	addi	sp,sp,-12
   1900c:	df000215 	stw	fp,8(sp)
   19010:	df000204 	addi	fp,sp,8
   19014:	e13ffe15 	stw	r4,-8(fp)
   19018:	2805883a 	mov	r2,r5
   1901c:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   19020:	e0bffe17 	ldw	r2,-8(fp)
   19024:	10800a17 	ldw	r2,40(r2)
   19028:	1007883a 	mov	r3,r2
   1902c:	e0bfff03 	ldbu	r2,-4(fp)
   19030:	18800035 	stwio	r2,0(r3)
	return 0;
   19034:	0005883a 	mov	r2,zero
}
   19038:	e037883a 	mov	sp,fp
   1903c:	df000017 	ldw	fp,0(sp)
   19040:	dec00104 	addi	sp,sp,4
   19044:	f800283a 	ret

00019048 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   19048:	defffa04 	addi	sp,sp,-24
   1904c:	dfc00515 	stw	ra,20(sp)
   19050:	df000415 	stw	fp,16(sp)
   19054:	df000404 	addi	fp,sp,16
   19058:	e13ffd15 	stw	r4,-12(fp)
   1905c:	e17ffe15 	stw	r5,-8(fp)
   19060:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   19064:	e0bffd17 	ldw	r2,-12(fp)
   19068:	10800a17 	ldw	r2,40(r2)
   1906c:	10800037 	ldwio	r2,0(r2)
   19070:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   19074:	e0bffc17 	ldw	r2,-16(fp)
   19078:	1007883a 	mov	r3,r2
   1907c:	e0bffe17 	ldw	r2,-8(fp)
   19080:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   19084:	e13ffc17 	ldw	r4,-16(fp)
   19088:	0018fc40 	call	18fc4 <alt_up_rs232_check_parity>
   1908c:	1007883a 	mov	r3,r2
   19090:	e0bfff17 	ldw	r2,-4(fp)
   19094:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   19098:	e0bffc17 	ldw	r2,-16(fp)
   1909c:	10a0000c 	andi	r2,r2,32768
   190a0:	1004d3fa 	srli	r2,r2,15
   190a4:	10bfffc4 	addi	r2,r2,-1
}
   190a8:	e037883a 	mov	sp,fp
   190ac:	dfc00117 	ldw	ra,4(sp)
   190b0:	df000017 	ldw	fp,0(sp)
   190b4:	dec00204 	addi	sp,sp,8
   190b8:	f800283a 	ret

000190bc <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   190bc:	defff804 	addi	sp,sp,-32
   190c0:	dfc00715 	stw	ra,28(sp)
   190c4:	df000615 	stw	fp,24(sp)
   190c8:	df000604 	addi	fp,sp,24
   190cc:	e13ffd15 	stw	r4,-12(fp)
   190d0:	e17ffe15 	stw	r5,-8(fp)
   190d4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   190d8:	e0bffd17 	ldw	r2,-12(fp)
   190dc:	10800017 	ldw	r2,0(r2)
   190e0:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   190e4:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   190e8:	00000c06 	br	1911c <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   190ec:	e0bffe17 	ldw	r2,-8(fp)
   190f0:	10c00044 	addi	r3,r2,1
   190f4:	e0fffe15 	stw	r3,-8(fp)
   190f8:	e0fffc04 	addi	r3,fp,-16
   190fc:	180d883a 	mov	r6,r3
   19100:	100b883a 	mov	r5,r2
   19104:	e13ffb17 	ldw	r4,-20(fp)
   19108:	00190480 	call	19048 <alt_up_rs232_read_data>
   1910c:	1000081e 	bne	r2,zero,19130 <alt_up_rs232_read_fd+0x74>
			count++;
   19110:	e0bffa17 	ldw	r2,-24(fp)
   19114:	10800044 	addi	r2,r2,1
   19118:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1911c:	e0bfff17 	ldw	r2,-4(fp)
   19120:	10ffffc4 	addi	r3,r2,-1
   19124:	e0ffff15 	stw	r3,-4(fp)
   19128:	103ff01e 	bne	r2,zero,190ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70190ec>
   1912c:	00000106 	br	19134 <alt_up_rs232_read_fd+0x78>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   19130:	0001883a 	nop
	}
	return count;
   19134:	e0bffa17 	ldw	r2,-24(fp)
}
   19138:	e037883a 	mov	sp,fp
   1913c:	dfc00117 	ldw	ra,4(sp)
   19140:	df000017 	ldw	fp,0(sp)
   19144:	dec00204 	addi	sp,sp,8
   19148:	f800283a 	ret

0001914c <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1914c:	defff904 	addi	sp,sp,-28
   19150:	dfc00615 	stw	ra,24(sp)
   19154:	df000515 	stw	fp,20(sp)
   19158:	df000504 	addi	fp,sp,20
   1915c:	e13ffd15 	stw	r4,-12(fp)
   19160:	e17ffe15 	stw	r5,-8(fp)
   19164:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   19168:	e0bffd17 	ldw	r2,-12(fp)
   1916c:	10800017 	ldw	r2,0(r2)
   19170:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   19174:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   19178:	00000d06 	br	191b0 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   1917c:	e0bffe17 	ldw	r2,-8(fp)
   19180:	10800003 	ldbu	r2,0(r2)
   19184:	10803fcc 	andi	r2,r2,255
   19188:	100b883a 	mov	r5,r2
   1918c:	e13ffc17 	ldw	r4,-16(fp)
   19190:	00190080 	call	19008 <alt_up_rs232_write_data>
   19194:	10000b1e 	bne	r2,zero,191c4 <alt_up_rs232_write_fd+0x78>
		{
			count++;
   19198:	e0bffb17 	ldw	r2,-20(fp)
   1919c:	10800044 	addi	r2,r2,1
   191a0:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   191a4:	e0bffe17 	ldw	r2,-8(fp)
   191a8:	10800044 	addi	r2,r2,1
   191ac:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   191b0:	e0bfff17 	ldw	r2,-4(fp)
   191b4:	10ffffc4 	addi	r3,r2,-1
   191b8:	e0ffff15 	stw	r3,-4(fp)
   191bc:	103fef1e 	bne	r2,zero,1917c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701917c>
   191c0:	00000106 	br	191c8 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
			ptr++;
		}
		else
			break;
   191c4:	0001883a 	nop
	}
	return count;
   191c8:	e0bffb17 	ldw	r2,-20(fp)
}
   191cc:	e037883a 	mov	sp,fp
   191d0:	dfc00117 	ldw	ra,4(sp)
   191d4:	df000017 	ldw	fp,0(sp)
   191d8:	dec00204 	addi	sp,sp,8
   191dc:	f800283a 	ret

000191e0 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   191e0:	defffc04 	addi	sp,sp,-16
   191e4:	dfc00315 	stw	ra,12(sp)
   191e8:	df000215 	stw	fp,8(sp)
   191ec:	df000204 	addi	fp,sp,8
   191f0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   191f4:	d1600804 	addi	r5,gp,-32736
   191f8:	e13fff17 	ldw	r4,-4(fp)
   191fc:	00195080 	call	19508 <alt_find_dev>
   19200:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   19204:	e0bffe17 	ldw	r2,-8(fp)
}
   19208:	e037883a 	mov	sp,fp
   1920c:	dfc00117 	ldw	ra,4(sp)
   19210:	df000017 	ldw	fp,0(sp)
   19214:	dec00204 	addi	sp,sp,8
   19218:	f800283a 	ret

0001921c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1921c:	defff504 	addi	sp,sp,-44
   19220:	df000a15 	stw	fp,40(sp)
   19224:	df000a04 	addi	fp,sp,40
   19228:	e13ffc15 	stw	r4,-16(fp)
   1922c:	e17ffd15 	stw	r5,-12(fp)
   19230:	e1bffe15 	stw	r6,-8(fp)
   19234:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   19238:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1923c:	d0a84d17 	ldw	r2,-24268(gp)
  
  if (alt_ticks_per_second ())
   19240:	10003c26 	beq	r2,zero,19334 <alt_alarm_start+0x118>
  {
    if (alarm)
   19244:	e0bffc17 	ldw	r2,-16(fp)
   19248:	10003826 	beq	r2,zero,1932c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   1924c:	e0bffc17 	ldw	r2,-16(fp)
   19250:	e0fffe17 	ldw	r3,-8(fp)
   19254:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   19258:	e0bffc17 	ldw	r2,-16(fp)
   1925c:	e0ffff17 	ldw	r3,-4(fp)
   19260:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19264:	0005303a 	rdctl	r2,status
   19268:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1926c:	e0fff917 	ldw	r3,-28(fp)
   19270:	00bfff84 	movi	r2,-2
   19274:	1884703a 	and	r2,r3,r2
   19278:	1001703a 	wrctl	status,r2
  
  return context;
   1927c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   19280:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   19284:	d0a84e17 	ldw	r2,-24264(gp)
      
      current_nticks = alt_nticks();
   19288:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1928c:	e0fffd17 	ldw	r3,-12(fp)
   19290:	e0bff617 	ldw	r2,-40(fp)
   19294:	1885883a 	add	r2,r3,r2
   19298:	10c00044 	addi	r3,r2,1
   1929c:	e0bffc17 	ldw	r2,-16(fp)
   192a0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   192a4:	e0bffc17 	ldw	r2,-16(fp)
   192a8:	10c00217 	ldw	r3,8(r2)
   192ac:	e0bff617 	ldw	r2,-40(fp)
   192b0:	1880042e 	bgeu	r3,r2,192c4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   192b4:	e0bffc17 	ldw	r2,-16(fp)
   192b8:	00c00044 	movi	r3,1
   192bc:	10c00405 	stb	r3,16(r2)
   192c0:	00000206 	br	192cc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   192c4:	e0bffc17 	ldw	r2,-16(fp)
   192c8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   192cc:	e0bffc17 	ldw	r2,-16(fp)
   192d0:	d0e02d04 	addi	r3,gp,-32588
   192d4:	e0fffa15 	stw	r3,-24(fp)
   192d8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   192dc:	e0bffb17 	ldw	r2,-20(fp)
   192e0:	e0fffa17 	ldw	r3,-24(fp)
   192e4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   192e8:	e0bffa17 	ldw	r2,-24(fp)
   192ec:	10c00017 	ldw	r3,0(r2)
   192f0:	e0bffb17 	ldw	r2,-20(fp)
   192f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   192f8:	e0bffa17 	ldw	r2,-24(fp)
   192fc:	10800017 	ldw	r2,0(r2)
   19300:	e0fffb17 	ldw	r3,-20(fp)
   19304:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   19308:	e0bffa17 	ldw	r2,-24(fp)
   1930c:	e0fffb17 	ldw	r3,-20(fp)
   19310:	10c00015 	stw	r3,0(r2)
   19314:	e0bff817 	ldw	r2,-32(fp)
   19318:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1931c:	e0bff717 	ldw	r2,-36(fp)
   19320:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   19324:	0005883a 	mov	r2,zero
   19328:	00000306 	br	19338 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   1932c:	00bffa84 	movi	r2,-22
   19330:	00000106 	br	19338 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   19334:	00bfde84 	movi	r2,-134
  }
}
   19338:	e037883a 	mov	sp,fp
   1933c:	df000017 	ldw	fp,0(sp)
   19340:	dec00104 	addi	sp,sp,4
   19344:	f800283a 	ret

00019348 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   19348:	deffff04 	addi	sp,sp,-4
   1934c:	df000015 	stw	fp,0(sp)
   19350:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   19354:	0001883a 	nop
   19358:	e037883a 	mov	sp,fp
   1935c:	df000017 	ldw	fp,0(sp)
   19360:	dec00104 	addi	sp,sp,4
   19364:	f800283a 	ret

00019368 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   19368:	defffe04 	addi	sp,sp,-8
   1936c:	dfc00115 	stw	ra,4(sp)
   19370:	df000015 	stw	fp,0(sp)
   19374:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   19378:	d0a00b17 	ldw	r2,-32724(gp)
   1937c:	10000326 	beq	r2,zero,1938c <alt_get_errno+0x24>
   19380:	d0a00b17 	ldw	r2,-32724(gp)
   19384:	103ee83a 	callr	r2
   19388:	00000106 	br	19390 <alt_get_errno+0x28>
   1938c:	d0a82f04 	addi	r2,gp,-24388
}
   19390:	e037883a 	mov	sp,fp
   19394:	dfc00117 	ldw	ra,4(sp)
   19398:	df000017 	ldw	fp,0(sp)
   1939c:	dec00204 	addi	sp,sp,8
   193a0:	f800283a 	ret

000193a4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   193a4:	defffa04 	addi	sp,sp,-24
   193a8:	dfc00515 	stw	ra,20(sp)
   193ac:	df000415 	stw	fp,16(sp)
   193b0:	df000404 	addi	fp,sp,16
   193b4:	e13ffe15 	stw	r4,-8(fp)
   193b8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   193bc:	e0bffe17 	ldw	r2,-8(fp)
   193c0:	10000326 	beq	r2,zero,193d0 <alt_dev_llist_insert+0x2c>
   193c4:	e0bffe17 	ldw	r2,-8(fp)
   193c8:	10800217 	ldw	r2,8(r2)
   193cc:	1000061e 	bne	r2,zero,193e8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   193d0:	00193680 	call	19368 <alt_get_errno>
   193d4:	1007883a 	mov	r3,r2
   193d8:	00800584 	movi	r2,22
   193dc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   193e0:	00bffa84 	movi	r2,-22
   193e4:	00001306 	br	19434 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   193e8:	e0bffe17 	ldw	r2,-8(fp)
   193ec:	e0ffff17 	ldw	r3,-4(fp)
   193f0:	e0fffc15 	stw	r3,-16(fp)
   193f4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   193f8:	e0bffd17 	ldw	r2,-12(fp)
   193fc:	e0fffc17 	ldw	r3,-16(fp)
   19400:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   19404:	e0bffc17 	ldw	r2,-16(fp)
   19408:	10c00017 	ldw	r3,0(r2)
   1940c:	e0bffd17 	ldw	r2,-12(fp)
   19410:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   19414:	e0bffc17 	ldw	r2,-16(fp)
   19418:	10800017 	ldw	r2,0(r2)
   1941c:	e0fffd17 	ldw	r3,-12(fp)
   19420:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   19424:	e0bffc17 	ldw	r2,-16(fp)
   19428:	e0fffd17 	ldw	r3,-12(fp)
   1942c:	10c00015 	stw	r3,0(r2)

  return 0;  
   19430:	0005883a 	mov	r2,zero
}
   19434:	e037883a 	mov	sp,fp
   19438:	dfc00117 	ldw	ra,4(sp)
   1943c:	df000017 	ldw	fp,0(sp)
   19440:	dec00204 	addi	sp,sp,8
   19444:	f800283a 	ret

00019448 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   19448:	defffd04 	addi	sp,sp,-12
   1944c:	dfc00215 	stw	ra,8(sp)
   19450:	df000115 	stw	fp,4(sp)
   19454:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   19458:	008000b4 	movhi	r2,2
   1945c:	10a9a804 	addi	r2,r2,-22880
   19460:	e0bfff15 	stw	r2,-4(fp)
   19464:	00000606 	br	19480 <_do_ctors+0x38>
        (*ctor) (); 
   19468:	e0bfff17 	ldw	r2,-4(fp)
   1946c:	10800017 	ldw	r2,0(r2)
   19470:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   19474:	e0bfff17 	ldw	r2,-4(fp)
   19478:	10bfff04 	addi	r2,r2,-4
   1947c:	e0bfff15 	stw	r2,-4(fp)
   19480:	e0ffff17 	ldw	r3,-4(fp)
   19484:	008000b4 	movhi	r2,2
   19488:	10a9a904 	addi	r2,r2,-22876
   1948c:	18bff62e 	bgeu	r3,r2,19468 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019468>
        (*ctor) (); 
}
   19490:	0001883a 	nop
   19494:	e037883a 	mov	sp,fp
   19498:	dfc00117 	ldw	ra,4(sp)
   1949c:	df000017 	ldw	fp,0(sp)
   194a0:	dec00204 	addi	sp,sp,8
   194a4:	f800283a 	ret

000194a8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   194a8:	defffd04 	addi	sp,sp,-12
   194ac:	dfc00215 	stw	ra,8(sp)
   194b0:	df000115 	stw	fp,4(sp)
   194b4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   194b8:	008000b4 	movhi	r2,2
   194bc:	10a9a804 	addi	r2,r2,-22880
   194c0:	e0bfff15 	stw	r2,-4(fp)
   194c4:	00000606 	br	194e0 <_do_dtors+0x38>
        (*dtor) (); 
   194c8:	e0bfff17 	ldw	r2,-4(fp)
   194cc:	10800017 	ldw	r2,0(r2)
   194d0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   194d4:	e0bfff17 	ldw	r2,-4(fp)
   194d8:	10bfff04 	addi	r2,r2,-4
   194dc:	e0bfff15 	stw	r2,-4(fp)
   194e0:	e0ffff17 	ldw	r3,-4(fp)
   194e4:	008000b4 	movhi	r2,2
   194e8:	10a9a904 	addi	r2,r2,-22876
   194ec:	18bff62e 	bgeu	r3,r2,194c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70194c8>
        (*dtor) (); 
}
   194f0:	0001883a 	nop
   194f4:	e037883a 	mov	sp,fp
   194f8:	dfc00117 	ldw	ra,4(sp)
   194fc:	df000017 	ldw	fp,0(sp)
   19500:	dec00204 	addi	sp,sp,8
   19504:	f800283a 	ret

00019508 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   19508:	defffa04 	addi	sp,sp,-24
   1950c:	dfc00515 	stw	ra,20(sp)
   19510:	df000415 	stw	fp,16(sp)
   19514:	df000404 	addi	fp,sp,16
   19518:	e13ffe15 	stw	r4,-8(fp)
   1951c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   19520:	e0bfff17 	ldw	r2,-4(fp)
   19524:	10800017 	ldw	r2,0(r2)
   19528:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1952c:	e13ffe17 	ldw	r4,-8(fp)
   19530:	0001b640 	call	1b64 <strlen>
   19534:	10800044 	addi	r2,r2,1
   19538:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1953c:	00000d06 	br	19574 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   19540:	e0bffc17 	ldw	r2,-16(fp)
   19544:	10800217 	ldw	r2,8(r2)
   19548:	e0fffd17 	ldw	r3,-12(fp)
   1954c:	180d883a 	mov	r6,r3
   19550:	e17ffe17 	ldw	r5,-8(fp)
   19554:	1009883a 	mov	r4,r2
   19558:	001a35c0 	call	1a35c <memcmp>
   1955c:	1000021e 	bne	r2,zero,19568 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   19560:	e0bffc17 	ldw	r2,-16(fp)
   19564:	00000706 	br	19584 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   19568:	e0bffc17 	ldw	r2,-16(fp)
   1956c:	10800017 	ldw	r2,0(r2)
   19570:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   19574:	e0fffc17 	ldw	r3,-16(fp)
   19578:	e0bfff17 	ldw	r2,-4(fp)
   1957c:	18bff01e 	bne	r3,r2,19540 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019540>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   19580:	0005883a 	mov	r2,zero
}
   19584:	e037883a 	mov	sp,fp
   19588:	dfc00117 	ldw	ra,4(sp)
   1958c:	df000017 	ldw	fp,0(sp)
   19590:	dec00204 	addi	sp,sp,8
   19594:	f800283a 	ret

00019598 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   19598:	defffe04 	addi	sp,sp,-8
   1959c:	dfc00115 	stw	ra,4(sp)
   195a0:	df000015 	stw	fp,0(sp)
   195a4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   195a8:	01440004 	movi	r5,4096
   195ac:	0009883a 	mov	r4,zero
   195b0:	001a1e40 	call	1a1e4 <alt_icache_flush>
#endif
}
   195b4:	0001883a 	nop
   195b8:	e037883a 	mov	sp,fp
   195bc:	dfc00117 	ldw	ra,4(sp)
   195c0:	df000017 	ldw	fp,0(sp)
   195c4:	dec00204 	addi	sp,sp,8
   195c8:	f800283a 	ret

000195cc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   195cc:	defff904 	addi	sp,sp,-28
   195d0:	dfc00615 	stw	ra,24(sp)
   195d4:	df000515 	stw	fp,20(sp)
   195d8:	df000504 	addi	fp,sp,20
   195dc:	e13ffc15 	stw	r4,-16(fp)
   195e0:	e17ffd15 	stw	r5,-12(fp)
   195e4:	e1bffe15 	stw	r6,-8(fp)
   195e8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   195ec:	e1bfff17 	ldw	r6,-4(fp)
   195f0:	e17ffe17 	ldw	r5,-8(fp)
   195f4:	e13ffd17 	ldw	r4,-12(fp)
   195f8:	001998c0 	call	1998c <open>
   195fc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   19600:	e0bffb17 	ldw	r2,-20(fp)
   19604:	10001c16 	blt	r2,zero,19678 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   19608:	008000b4 	movhi	r2,2
   1960c:	10af5d04 	addi	r2,r2,-17036
   19610:	e0fffb17 	ldw	r3,-20(fp)
   19614:	18c00324 	muli	r3,r3,12
   19618:	10c5883a 	add	r2,r2,r3
   1961c:	10c00017 	ldw	r3,0(r2)
   19620:	e0bffc17 	ldw	r2,-16(fp)
   19624:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   19628:	008000b4 	movhi	r2,2
   1962c:	10af5d04 	addi	r2,r2,-17036
   19630:	e0fffb17 	ldw	r3,-20(fp)
   19634:	18c00324 	muli	r3,r3,12
   19638:	10c5883a 	add	r2,r2,r3
   1963c:	10800104 	addi	r2,r2,4
   19640:	10c00017 	ldw	r3,0(r2)
   19644:	e0bffc17 	ldw	r2,-16(fp)
   19648:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1964c:	008000b4 	movhi	r2,2
   19650:	10af5d04 	addi	r2,r2,-17036
   19654:	e0fffb17 	ldw	r3,-20(fp)
   19658:	18c00324 	muli	r3,r3,12
   1965c:	10c5883a 	add	r2,r2,r3
   19660:	10800204 	addi	r2,r2,8
   19664:	10c00017 	ldw	r3,0(r2)
   19668:	e0bffc17 	ldw	r2,-16(fp)
   1966c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   19670:	e13ffb17 	ldw	r4,-20(fp)
   19674:	000ea380 	call	ea38 <alt_release_fd>
  }
} 
   19678:	0001883a 	nop
   1967c:	e037883a 	mov	sp,fp
   19680:	dfc00117 	ldw	ra,4(sp)
   19684:	df000017 	ldw	fp,0(sp)
   19688:	dec00204 	addi	sp,sp,8
   1968c:	f800283a 	ret

00019690 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   19690:	defffb04 	addi	sp,sp,-20
   19694:	dfc00415 	stw	ra,16(sp)
   19698:	df000315 	stw	fp,12(sp)
   1969c:	df000304 	addi	fp,sp,12
   196a0:	e13ffd15 	stw	r4,-12(fp)
   196a4:	e17ffe15 	stw	r5,-8(fp)
   196a8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   196ac:	01c07fc4 	movi	r7,511
   196b0:	01800044 	movi	r6,1
   196b4:	e17ffd17 	ldw	r5,-12(fp)
   196b8:	010000b4 	movhi	r4,2
   196bc:	212f6004 	addi	r4,r4,-17024
   196c0:	00195cc0 	call	195cc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   196c4:	01c07fc4 	movi	r7,511
   196c8:	000d883a 	mov	r6,zero
   196cc:	e17ffe17 	ldw	r5,-8(fp)
   196d0:	010000b4 	movhi	r4,2
   196d4:	212f5d04 	addi	r4,r4,-17036
   196d8:	00195cc0 	call	195cc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   196dc:	01c07fc4 	movi	r7,511
   196e0:	01800044 	movi	r6,1
   196e4:	e17fff17 	ldw	r5,-4(fp)
   196e8:	010000b4 	movhi	r4,2
   196ec:	212f6304 	addi	r4,r4,-17012
   196f0:	00195cc0 	call	195cc <alt_open_fd>
}  
   196f4:	0001883a 	nop
   196f8:	e037883a 	mov	sp,fp
   196fc:	dfc00117 	ldw	ra,4(sp)
   19700:	df000017 	ldw	fp,0(sp)
   19704:	dec00204 	addi	sp,sp,8
   19708:	f800283a 	ret

0001970c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   1970c:	defff004 	addi	sp,sp,-64
   19710:	df000f15 	stw	fp,60(sp)
   19714:	df000f04 	addi	fp,sp,60
   19718:	e13ffd15 	stw	r4,-12(fp)
   1971c:	e17ffe15 	stw	r5,-8(fp)
   19720:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   19724:	00bffa84 	movi	r2,-22
   19728:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1972c:	e0bffd17 	ldw	r2,-12(fp)
   19730:	10800828 	cmpgeui	r2,r2,32
   19734:	1000501e 	bne	r2,zero,19878 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19738:	0005303a 	rdctl	r2,status
   1973c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19740:	e0fff617 	ldw	r3,-40(fp)
   19744:	00bfff84 	movi	r2,-2
   19748:	1884703a 	and	r2,r3,r2
   1974c:	1001703a 	wrctl	status,r2
  
  return context;
   19750:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   19754:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   19758:	008000f4 	movhi	r2,3
   1975c:	10897e04 	addi	r2,r2,9720
   19760:	e0fffd17 	ldw	r3,-12(fp)
   19764:	180690fa 	slli	r3,r3,3
   19768:	10c5883a 	add	r2,r2,r3
   1976c:	e0ffff17 	ldw	r3,-4(fp)
   19770:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   19774:	008000f4 	movhi	r2,3
   19778:	10897e04 	addi	r2,r2,9720
   1977c:	e0fffd17 	ldw	r3,-12(fp)
   19780:	180690fa 	slli	r3,r3,3
   19784:	10c5883a 	add	r2,r2,r3
   19788:	10800104 	addi	r2,r2,4
   1978c:	e0fffe17 	ldw	r3,-8(fp)
   19790:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   19794:	e0bfff17 	ldw	r2,-4(fp)
   19798:	10001926 	beq	r2,zero,19800 <alt_irq_register+0xf4>
   1979c:	e0bffd17 	ldw	r2,-12(fp)
   197a0:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   197a4:	0005303a 	rdctl	r2,status
   197a8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   197ac:	e0fff717 	ldw	r3,-36(fp)
   197b0:	00bfff84 	movi	r2,-2
   197b4:	1884703a 	and	r2,r3,r2
   197b8:	1001703a 	wrctl	status,r2
  
  return context;
   197bc:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   197c0:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   197c4:	00c00044 	movi	r3,1
   197c8:	e0bff217 	ldw	r2,-56(fp)
   197cc:	1884983a 	sll	r2,r3,r2
   197d0:	1007883a 	mov	r3,r2
   197d4:	d0a84c17 	ldw	r2,-24272(gp)
   197d8:	1884b03a 	or	r2,r3,r2
   197dc:	d0a84c15 	stw	r2,-24272(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   197e0:	d0a84c17 	ldw	r2,-24272(gp)
   197e4:	100170fa 	wrctl	ienable,r2
   197e8:	e0bff817 	ldw	r2,-32(fp)
   197ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   197f0:	e0bff917 	ldw	r2,-28(fp)
   197f4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   197f8:	0005883a 	mov	r2,zero
   197fc:	00001906 	br	19864 <alt_irq_register+0x158>
   19800:	e0bffd17 	ldw	r2,-12(fp)
   19804:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19808:	0005303a 	rdctl	r2,status
   1980c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19810:	e0fffa17 	ldw	r3,-24(fp)
   19814:	00bfff84 	movi	r2,-2
   19818:	1884703a 	and	r2,r3,r2
   1981c:	1001703a 	wrctl	status,r2
  
  return context;
   19820:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   19824:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   19828:	00c00044 	movi	r3,1
   1982c:	e0bff417 	ldw	r2,-48(fp)
   19830:	1884983a 	sll	r2,r3,r2
   19834:	0084303a 	nor	r2,zero,r2
   19838:	1007883a 	mov	r3,r2
   1983c:	d0a84c17 	ldw	r2,-24272(gp)
   19840:	1884703a 	and	r2,r3,r2
   19844:	d0a84c15 	stw	r2,-24272(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   19848:	d0a84c17 	ldw	r2,-24272(gp)
   1984c:	100170fa 	wrctl	ienable,r2
   19850:	e0bffb17 	ldw	r2,-20(fp)
   19854:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19858:	e0bffc17 	ldw	r2,-16(fp)
   1985c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   19860:	0005883a 	mov	r2,zero
   19864:	e0bff115 	stw	r2,-60(fp)
   19868:	e0bff317 	ldw	r2,-52(fp)
   1986c:	e0bff515 	stw	r2,-44(fp)
   19870:	e0bff517 	ldw	r2,-44(fp)
   19874:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   19878:	e0bff117 	ldw	r2,-60(fp)
}
   1987c:	e037883a 	mov	sp,fp
   19880:	df000017 	ldw	fp,0(sp)
   19884:	dec00104 	addi	sp,sp,4
   19888:	f800283a 	ret

0001988c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1988c:	defffe04 	addi	sp,sp,-8
   19890:	dfc00115 	stw	ra,4(sp)
   19894:	df000015 	stw	fp,0(sp)
   19898:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1989c:	d0a00b17 	ldw	r2,-32724(gp)
   198a0:	10000326 	beq	r2,zero,198b0 <alt_get_errno+0x24>
   198a4:	d0a00b17 	ldw	r2,-32724(gp)
   198a8:	103ee83a 	callr	r2
   198ac:	00000106 	br	198b4 <alt_get_errno+0x28>
   198b0:	d0a82f04 	addi	r2,gp,-24388
}
   198b4:	e037883a 	mov	sp,fp
   198b8:	dfc00117 	ldw	ra,4(sp)
   198bc:	df000017 	ldw	fp,0(sp)
   198c0:	dec00204 	addi	sp,sp,8
   198c4:	f800283a 	ret

000198c8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   198c8:	defffd04 	addi	sp,sp,-12
   198cc:	df000215 	stw	fp,8(sp)
   198d0:	df000204 	addi	fp,sp,8
   198d4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   198d8:	e0bfff17 	ldw	r2,-4(fp)
   198dc:	10800217 	ldw	r2,8(r2)
   198e0:	10d00034 	orhi	r3,r2,16384
   198e4:	e0bfff17 	ldw	r2,-4(fp)
   198e8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   198ec:	e03ffe15 	stw	zero,-8(fp)
   198f0:	00001d06 	br	19968 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   198f4:	008000b4 	movhi	r2,2
   198f8:	10af5d04 	addi	r2,r2,-17036
   198fc:	e0fffe17 	ldw	r3,-8(fp)
   19900:	18c00324 	muli	r3,r3,12
   19904:	10c5883a 	add	r2,r2,r3
   19908:	10c00017 	ldw	r3,0(r2)
   1990c:	e0bfff17 	ldw	r2,-4(fp)
   19910:	10800017 	ldw	r2,0(r2)
   19914:	1880111e 	bne	r3,r2,1995c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   19918:	008000b4 	movhi	r2,2
   1991c:	10af5d04 	addi	r2,r2,-17036
   19920:	e0fffe17 	ldw	r3,-8(fp)
   19924:	18c00324 	muli	r3,r3,12
   19928:	10c5883a 	add	r2,r2,r3
   1992c:	10800204 	addi	r2,r2,8
   19930:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   19934:	1000090e 	bge	r2,zero,1995c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   19938:	e0bffe17 	ldw	r2,-8(fp)
   1993c:	10c00324 	muli	r3,r2,12
   19940:	008000b4 	movhi	r2,2
   19944:	10af5d04 	addi	r2,r2,-17036
   19948:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1994c:	e0bfff17 	ldw	r2,-4(fp)
   19950:	18800226 	beq	r3,r2,1995c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   19954:	00bffcc4 	movi	r2,-13
   19958:	00000806 	br	1997c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1995c:	e0bffe17 	ldw	r2,-8(fp)
   19960:	10800044 	addi	r2,r2,1
   19964:	e0bffe15 	stw	r2,-8(fp)
   19968:	d0a00a17 	ldw	r2,-32728(gp)
   1996c:	1007883a 	mov	r3,r2
   19970:	e0bffe17 	ldw	r2,-8(fp)
   19974:	18bfdf2e 	bgeu	r3,r2,198f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70198f4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   19978:	0005883a 	mov	r2,zero
}
   1997c:	e037883a 	mov	sp,fp
   19980:	df000017 	ldw	fp,0(sp)
   19984:	dec00104 	addi	sp,sp,4
   19988:	f800283a 	ret

0001998c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1998c:	defff604 	addi	sp,sp,-40
   19990:	dfc00915 	stw	ra,36(sp)
   19994:	df000815 	stw	fp,32(sp)
   19998:	df000804 	addi	fp,sp,32
   1999c:	e13ffd15 	stw	r4,-12(fp)
   199a0:	e17ffe15 	stw	r5,-8(fp)
   199a4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   199a8:	00bfffc4 	movi	r2,-1
   199ac:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   199b0:	00bffb44 	movi	r2,-19
   199b4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   199b8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   199bc:	d1600804 	addi	r5,gp,-32736
   199c0:	e13ffd17 	ldw	r4,-12(fp)
   199c4:	00195080 	call	19508 <alt_find_dev>
   199c8:	e0bff815 	stw	r2,-32(fp)
   199cc:	e0bff817 	ldw	r2,-32(fp)
   199d0:	1000051e 	bne	r2,zero,199e8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   199d4:	e13ffd17 	ldw	r4,-12(fp)
   199d8:	001a0000 	call	1a000 <alt_find_file>
   199dc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   199e0:	00800044 	movi	r2,1
   199e4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   199e8:	e0bff817 	ldw	r2,-32(fp)
   199ec:	10002926 	beq	r2,zero,19a94 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   199f0:	e13ff817 	ldw	r4,-32(fp)
   199f4:	001a1080 	call	1a108 <alt_get_fd>
   199f8:	e0bff915 	stw	r2,-28(fp)
   199fc:	e0bff917 	ldw	r2,-28(fp)
   19a00:	1000030e 	bge	r2,zero,19a10 <open+0x84>
    {
      status = index;
   19a04:	e0bff917 	ldw	r2,-28(fp)
   19a08:	e0bffa15 	stw	r2,-24(fp)
   19a0c:	00002306 	br	19a9c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   19a10:	e0bff917 	ldw	r2,-28(fp)
   19a14:	10c00324 	muli	r3,r2,12
   19a18:	008000b4 	movhi	r2,2
   19a1c:	10af5d04 	addi	r2,r2,-17036
   19a20:	1885883a 	add	r2,r3,r2
   19a24:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   19a28:	e0fffe17 	ldw	r3,-8(fp)
   19a2c:	00900034 	movhi	r2,16384
   19a30:	10bfffc4 	addi	r2,r2,-1
   19a34:	1886703a 	and	r3,r3,r2
   19a38:	e0bffc17 	ldw	r2,-16(fp)
   19a3c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   19a40:	e0bffb17 	ldw	r2,-20(fp)
   19a44:	1000051e 	bne	r2,zero,19a5c <open+0xd0>
   19a48:	e13ffc17 	ldw	r4,-16(fp)
   19a4c:	00198c80 	call	198c8 <alt_file_locked>
   19a50:	e0bffa15 	stw	r2,-24(fp)
   19a54:	e0bffa17 	ldw	r2,-24(fp)
   19a58:	10001016 	blt	r2,zero,19a9c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   19a5c:	e0bff817 	ldw	r2,-32(fp)
   19a60:	10800317 	ldw	r2,12(r2)
   19a64:	10000826 	beq	r2,zero,19a88 <open+0xfc>
   19a68:	e0bff817 	ldw	r2,-32(fp)
   19a6c:	10800317 	ldw	r2,12(r2)
   19a70:	e1ffff17 	ldw	r7,-4(fp)
   19a74:	e1bffe17 	ldw	r6,-8(fp)
   19a78:	e17ffd17 	ldw	r5,-12(fp)
   19a7c:	e13ffc17 	ldw	r4,-16(fp)
   19a80:	103ee83a 	callr	r2
   19a84:	00000106 	br	19a8c <open+0x100>
   19a88:	0005883a 	mov	r2,zero
   19a8c:	e0bffa15 	stw	r2,-24(fp)
   19a90:	00000206 	br	19a9c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   19a94:	00bffb44 	movi	r2,-19
   19a98:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   19a9c:	e0bffa17 	ldw	r2,-24(fp)
   19aa0:	1000090e 	bge	r2,zero,19ac8 <open+0x13c>
  {
    alt_release_fd (index);  
   19aa4:	e13ff917 	ldw	r4,-28(fp)
   19aa8:	000ea380 	call	ea38 <alt_release_fd>
    ALT_ERRNO = -status;
   19aac:	001988c0 	call	1988c <alt_get_errno>
   19ab0:	1007883a 	mov	r3,r2
   19ab4:	e0bffa17 	ldw	r2,-24(fp)
   19ab8:	0085c83a 	sub	r2,zero,r2
   19abc:	18800015 	stw	r2,0(r3)
    return -1;
   19ac0:	00bfffc4 	movi	r2,-1
   19ac4:	00000106 	br	19acc <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   19ac8:	e0bff917 	ldw	r2,-28(fp)
}
   19acc:	e037883a 	mov	sp,fp
   19ad0:	dfc00117 	ldw	ra,4(sp)
   19ad4:	df000017 	ldw	fp,0(sp)
   19ad8:	dec00204 	addi	sp,sp,8
   19adc:	f800283a 	ret

00019ae0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   19ae0:	defffa04 	addi	sp,sp,-24
   19ae4:	df000515 	stw	fp,20(sp)
   19ae8:	df000504 	addi	fp,sp,20
   19aec:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19af0:	0005303a 	rdctl	r2,status
   19af4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19af8:	e0fffc17 	ldw	r3,-16(fp)
   19afc:	00bfff84 	movi	r2,-2
   19b00:	1884703a 	and	r2,r3,r2
   19b04:	1001703a 	wrctl	status,r2
  
  return context;
   19b08:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   19b0c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   19b10:	e0bfff17 	ldw	r2,-4(fp)
   19b14:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   19b18:	e0bffd17 	ldw	r2,-12(fp)
   19b1c:	10800017 	ldw	r2,0(r2)
   19b20:	e0fffd17 	ldw	r3,-12(fp)
   19b24:	18c00117 	ldw	r3,4(r3)
   19b28:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   19b2c:	e0bffd17 	ldw	r2,-12(fp)
   19b30:	10800117 	ldw	r2,4(r2)
   19b34:	e0fffd17 	ldw	r3,-12(fp)
   19b38:	18c00017 	ldw	r3,0(r3)
   19b3c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   19b40:	e0bffd17 	ldw	r2,-12(fp)
   19b44:	e0fffd17 	ldw	r3,-12(fp)
   19b48:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   19b4c:	e0bffd17 	ldw	r2,-12(fp)
   19b50:	e0fffd17 	ldw	r3,-12(fp)
   19b54:	10c00015 	stw	r3,0(r2)
   19b58:	e0bffb17 	ldw	r2,-20(fp)
   19b5c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19b60:	e0bffe17 	ldw	r2,-8(fp)
   19b64:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   19b68:	0001883a 	nop
   19b6c:	e037883a 	mov	sp,fp
   19b70:	df000017 	ldw	fp,0(sp)
   19b74:	dec00104 	addi	sp,sp,4
   19b78:	f800283a 	ret

00019b7c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   19b7c:	defffb04 	addi	sp,sp,-20
   19b80:	dfc00415 	stw	ra,16(sp)
   19b84:	df000315 	stw	fp,12(sp)
   19b88:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   19b8c:	d0a02d17 	ldw	r2,-32588(gp)
   19b90:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   19b94:	d0a84e17 	ldw	r2,-24264(gp)
   19b98:	10800044 	addi	r2,r2,1
   19b9c:	d0a84e15 	stw	r2,-24264(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   19ba0:	00002e06 	br	19c5c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   19ba4:	e0bffd17 	ldw	r2,-12(fp)
   19ba8:	10800017 	ldw	r2,0(r2)
   19bac:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   19bb0:	e0bffd17 	ldw	r2,-12(fp)
   19bb4:	10800403 	ldbu	r2,16(r2)
   19bb8:	10803fcc 	andi	r2,r2,255
   19bbc:	10000426 	beq	r2,zero,19bd0 <alt_tick+0x54>
   19bc0:	d0a84e17 	ldw	r2,-24264(gp)
   19bc4:	1000021e 	bne	r2,zero,19bd0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   19bc8:	e0bffd17 	ldw	r2,-12(fp)
   19bcc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   19bd0:	e0bffd17 	ldw	r2,-12(fp)
   19bd4:	10800217 	ldw	r2,8(r2)
   19bd8:	d0e84e17 	ldw	r3,-24264(gp)
   19bdc:	18801d36 	bltu	r3,r2,19c54 <alt_tick+0xd8>
   19be0:	e0bffd17 	ldw	r2,-12(fp)
   19be4:	10800403 	ldbu	r2,16(r2)
   19be8:	10803fcc 	andi	r2,r2,255
   19bec:	1000191e 	bne	r2,zero,19c54 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   19bf0:	e0bffd17 	ldw	r2,-12(fp)
   19bf4:	10800317 	ldw	r2,12(r2)
   19bf8:	e0fffd17 	ldw	r3,-12(fp)
   19bfc:	18c00517 	ldw	r3,20(r3)
   19c00:	1809883a 	mov	r4,r3
   19c04:	103ee83a 	callr	r2
   19c08:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   19c0c:	e0bfff17 	ldw	r2,-4(fp)
   19c10:	1000031e 	bne	r2,zero,19c20 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   19c14:	e13ffd17 	ldw	r4,-12(fp)
   19c18:	0019ae00 	call	19ae0 <alt_alarm_stop>
   19c1c:	00000d06 	br	19c54 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   19c20:	e0bffd17 	ldw	r2,-12(fp)
   19c24:	10c00217 	ldw	r3,8(r2)
   19c28:	e0bfff17 	ldw	r2,-4(fp)
   19c2c:	1887883a 	add	r3,r3,r2
   19c30:	e0bffd17 	ldw	r2,-12(fp)
   19c34:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   19c38:	e0bffd17 	ldw	r2,-12(fp)
   19c3c:	10c00217 	ldw	r3,8(r2)
   19c40:	d0a84e17 	ldw	r2,-24264(gp)
   19c44:	1880032e 	bgeu	r3,r2,19c54 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   19c48:	e0bffd17 	ldw	r2,-12(fp)
   19c4c:	00c00044 	movi	r3,1
   19c50:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   19c54:	e0bffe17 	ldw	r2,-8(fp)
   19c58:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   19c5c:	e0fffd17 	ldw	r3,-12(fp)
   19c60:	d0a02d04 	addi	r2,gp,-32588
   19c64:	18bfcf1e 	bne	r3,r2,19ba4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019ba4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   19c68:	000fc240 	call	fc24 <OSTimeTick>
}
   19c6c:	0001883a 	nop
   19c70:	e037883a 	mov	sp,fp
   19c74:	dfc00117 	ldw	ra,4(sp)
   19c78:	df000017 	ldw	fp,0(sp)
   19c7c:	dec00204 	addi	sp,sp,8
   19c80:	f800283a 	ret

00019c84 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   19c84:	deffff04 	addi	sp,sp,-4
   19c88:	df000015 	stw	fp,0(sp)
   19c8c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   19c90:	000170fa 	wrctl	ienable,zero
}
   19c94:	0001883a 	nop
   19c98:	e037883a 	mov	sp,fp
   19c9c:	df000017 	ldw	fp,0(sp)
   19ca0:	dec00104 	addi	sp,sp,4
   19ca4:	f800283a 	ret

00019ca8 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   19ca8:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   19cac:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   19cb0:	d1284717 	ldw	r4,-24292(gp)

      stw ra,  0(sp)
   19cb4:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   19cb8:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   19cbc:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   19cc0:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   19cc4:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   19cc8:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   19ccc:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   19cd0:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   19cd4:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   19cd8:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   19cdc:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   19ce0:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   19ce4:	0019f1c0 	call	19f1c <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   19ce8:	d1284217 	ldw	r4,-24312(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   19cec:	d1683a07 	ldb	r5,-24344(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   19cf0:	d1284715 	stw	r4,-24292(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   19cf4:	d1683a45 	stb	r5,-24343(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   19cf8:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   19cfc:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   19d00:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   19d04:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   19d08:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   19d0c:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   19d10:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   19d14:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   19d18:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   19d1c:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   19d20:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   19d24:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   19d28:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   19d2c:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   19d30:	f800283a 	ret

00019d34 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   19d34:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   19d38:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   19d3c:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   19d40:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   19d44:	0019f1c0 	call	19f1c <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   19d48:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   19d4c:	d4a83845 	stb	r18,-24351(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   19d50:	003fe506 	br	19ce8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019ce8>

00019d54 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   19d54:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   19d58:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   19d5c:	10800054 	ori	r2,r2,1
      wrctl status, r2
   19d60:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   19d64:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   19d68:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   19d6c:	dec00204 	addi	sp,sp,8

      callr r2
   19d70:	103ee83a 	callr	r2

      nop
   19d74:	0001883a 	nop

00019d78 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   19d78:	defff704 	addi	sp,sp,-36
   19d7c:	dfc00815 	stw	ra,32(sp)
   19d80:	df000715 	stw	fp,28(sp)
   19d84:	df000704 	addi	fp,sp,28
   19d88:	e13ffc15 	stw	r4,-16(fp)
   19d8c:	e17ffd15 	stw	r5,-12(fp)
   19d90:	e1bffe15 	stw	r6,-8(fp)
   19d94:	3805883a 	mov	r2,r7
   19d98:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   19d9c:	e0fffe17 	ldw	r3,-8(fp)
   19da0:	00bfff04 	movi	r2,-4
   19da4:	1884703a 	and	r2,r3,r2
   19da8:	10bef704 	addi	r2,r2,-1060
   19dac:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   19db0:	01810904 	movi	r6,1060
   19db4:	000b883a 	mov	r5,zero
   19db8:	e13ff917 	ldw	r4,-28(fp)
   19dbc:	00077940 	call	7794 <memset>
   19dc0:	e0bff917 	ldw	r2,-28(fp)
   19dc4:	10c0bb04 	addi	r3,r2,748
   19dc8:	e0bff917 	ldw	r2,-28(fp)
   19dcc:	10c00115 	stw	r3,4(r2)
   19dd0:	e0bff917 	ldw	r2,-28(fp)
   19dd4:	10c0d504 	addi	r3,r2,852
   19dd8:	e0bff917 	ldw	r2,-28(fp)
   19ddc:	10c00215 	stw	r3,8(r2)
   19de0:	e0bff917 	ldw	r2,-28(fp)
   19de4:	10c0ef04 	addi	r3,r2,956
   19de8:	e0bff917 	ldw	r2,-28(fp)
   19dec:	10c00315 	stw	r3,12(r2)
   19df0:	e0fff917 	ldw	r3,-28(fp)
   19df4:	008000b4 	movhi	r2,2
   19df8:	10ace504 	addi	r2,r2,-19564
   19dfc:	18800d15 	stw	r2,52(r3)
   19e00:	e0bff917 	ldw	r2,-28(fp)
   19e04:	00c00044 	movi	r3,1
   19e08:	10c02915 	stw	r3,164(r2)
   19e0c:	10002a15 	stw	zero,168(r2)
   19e10:	e0bff917 	ldw	r2,-28(fp)
   19e14:	00ccc384 	movi	r3,13070
   19e18:	10c02b0d 	sth	r3,172(r2)
   19e1c:	e0bff917 	ldw	r2,-28(fp)
   19e20:	00eaf344 	movi	r3,-21555
   19e24:	10c02b8d 	sth	r3,174(r2)
   19e28:	e0bff917 	ldw	r2,-28(fp)
   19e2c:	00c48d04 	movi	r3,4660
   19e30:	10c02c0d 	sth	r3,176(r2)
   19e34:	e0bff917 	ldw	r2,-28(fp)
   19e38:	00f99b44 	movi	r3,-6547
   19e3c:	10c02c8d 	sth	r3,178(r2)
   19e40:	e0bff917 	ldw	r2,-28(fp)
   19e44:	00f7bb04 	movi	r3,-8468
   19e48:	10c02d0d 	sth	r3,180(r2)
   19e4c:	e0bff917 	ldw	r2,-28(fp)
   19e50:	00c00144 	movi	r3,5
   19e54:	10c02d8d 	sth	r3,182(r2)
   19e58:	e0bff917 	ldw	r2,-28(fp)
   19e5c:	00c002c4 	movi	r3,11
   19e60:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   19e64:	e0bff917 	ldw	r2,-28(fp)
   19e68:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   19e6c:	e0bffa17 	ldw	r2,-24(fp)
   19e70:	10bff304 	addi	r2,r2,-52
   19e74:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   19e78:	e0bffb17 	ldw	r2,-20(fp)
   19e7c:	10800c04 	addi	r2,r2,48
   19e80:	e0fffc17 	ldw	r3,-16(fp)
   19e84:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   19e88:	e0bffb17 	ldw	r2,-20(fp)
   19e8c:	10800b04 	addi	r2,r2,44
   19e90:	e0fffd17 	ldw	r3,-12(fp)
   19e94:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   19e98:	e0bffb17 	ldw	r2,-20(fp)
   19e9c:	10800a04 	addi	r2,r2,40
   19ea0:	e0fff917 	ldw	r3,-28(fp)
   19ea4:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   19ea8:	008000b4 	movhi	r2,2
   19eac:	10a75504 	addi	r2,r2,-25260
   19eb0:	10c00104 	addi	r3,r2,4
   19eb4:	e0bffb17 	ldw	r2,-20(fp)
   19eb8:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   19ebc:	e0bffb17 	ldw	r2,-20(fp)
}
   19ec0:	e037883a 	mov	sp,fp
   19ec4:	dfc00117 	ldw	ra,4(sp)
   19ec8:	df000017 	ldw	fp,0(sp)
   19ecc:	dec00204 	addi	sp,sp,8
   19ed0:	f800283a 	ret

00019ed4 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   19ed4:	defffe04 	addi	sp,sp,-8
   19ed8:	df000115 	stw	fp,4(sp)
   19edc:	df000104 	addi	fp,sp,4
   19ee0:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   19ee4:	0001883a 	nop
   19ee8:	e037883a 	mov	sp,fp
   19eec:	df000017 	ldw	fp,0(sp)
   19ef0:	dec00104 	addi	sp,sp,4
   19ef4:	f800283a 	ret

00019ef8 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   19ef8:	defffe04 	addi	sp,sp,-8
   19efc:	df000115 	stw	fp,4(sp)
   19f00:	df000104 	addi	fp,sp,4
   19f04:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   19f08:	0001883a 	nop
   19f0c:	e037883a 	mov	sp,fp
   19f10:	df000017 	ldw	fp,0(sp)
   19f14:	dec00104 	addi	sp,sp,4
   19f18:	f800283a 	ret

00019f1c <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   19f1c:	deffff04 	addi	sp,sp,-4
   19f20:	df000015 	stw	fp,0(sp)
   19f24:	d839883a 	mov	fp,sp
}
   19f28:	0001883a 	nop
   19f2c:	e037883a 	mov	sp,fp
   19f30:	df000017 	ldw	fp,0(sp)
   19f34:	dec00104 	addi	sp,sp,4
   19f38:	f800283a 	ret

00019f3c <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   19f3c:	deffff04 	addi	sp,sp,-4
   19f40:	df000015 	stw	fp,0(sp)
   19f44:	d839883a 	mov	fp,sp
}
   19f48:	0001883a 	nop
   19f4c:	e037883a 	mov	sp,fp
   19f50:	df000017 	ldw	fp,0(sp)
   19f54:	dec00104 	addi	sp,sp,4
   19f58:	f800283a 	ret

00019f5c <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   19f5c:	deffff04 	addi	sp,sp,-4
   19f60:	df000015 	stw	fp,0(sp)
   19f64:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   19f68:	0001883a 	nop
   19f6c:	e037883a 	mov	sp,fp
   19f70:	df000017 	ldw	fp,0(sp)
   19f74:	dec00104 	addi	sp,sp,4
   19f78:	f800283a 	ret

00019f7c <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   19f7c:	deffff04 	addi	sp,sp,-4
   19f80:	df000015 	stw	fp,0(sp)
   19f84:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   19f88:	0001883a 	nop
   19f8c:	e037883a 	mov	sp,fp
   19f90:	df000017 	ldw	fp,0(sp)
   19f94:	dec00104 	addi	sp,sp,4
   19f98:	f800283a 	ret

00019f9c <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   19f9c:	deffff04 	addi	sp,sp,-4
   19fa0:	df000015 	stw	fp,0(sp)
   19fa4:	d839883a 	mov	fp,sp
}
   19fa8:	0001883a 	nop
   19fac:	e037883a 	mov	sp,fp
   19fb0:	df000017 	ldw	fp,0(sp)
   19fb4:	dec00104 	addi	sp,sp,4
   19fb8:	f800283a 	ret

00019fbc <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   19fbc:	deffff04 	addi	sp,sp,-4
   19fc0:	df000015 	stw	fp,0(sp)
   19fc4:	d839883a 	mov	fp,sp
}
   19fc8:	0001883a 	nop
   19fcc:	e037883a 	mov	sp,fp
   19fd0:	df000017 	ldw	fp,0(sp)
   19fd4:	dec00104 	addi	sp,sp,4
   19fd8:	f800283a 	ret

00019fdc <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   19fdc:	defffe04 	addi	sp,sp,-8
   19fe0:	df000115 	stw	fp,4(sp)
   19fe4:	df000104 	addi	fp,sp,4
   19fe8:	e13fff15 	stw	r4,-4(fp)
}
   19fec:	0001883a 	nop
   19ff0:	e037883a 	mov	sp,fp
   19ff4:	df000017 	ldw	fp,0(sp)
   19ff8:	dec00104 	addi	sp,sp,4
   19ffc:	f800283a 	ret

0001a000 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1a000:	defffb04 	addi	sp,sp,-20
   1a004:	dfc00415 	stw	ra,16(sp)
   1a008:	df000315 	stw	fp,12(sp)
   1a00c:	df000304 	addi	fp,sp,12
   1a010:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1a014:	d0a00617 	ldw	r2,-32744(gp)
   1a018:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1a01c:	00003106 	br	1a0e4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   1a020:	e0bffd17 	ldw	r2,-12(fp)
   1a024:	10800217 	ldw	r2,8(r2)
   1a028:	1009883a 	mov	r4,r2
   1a02c:	0001b640 	call	1b64 <strlen>
   1a030:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1a034:	e0bffd17 	ldw	r2,-12(fp)
   1a038:	10c00217 	ldw	r3,8(r2)
   1a03c:	e0bffe17 	ldw	r2,-8(fp)
   1a040:	10bfffc4 	addi	r2,r2,-1
   1a044:	1885883a 	add	r2,r3,r2
   1a048:	10800003 	ldbu	r2,0(r2)
   1a04c:	10803fcc 	andi	r2,r2,255
   1a050:	1080201c 	xori	r2,r2,128
   1a054:	10bfe004 	addi	r2,r2,-128
   1a058:	10800bd8 	cmpnei	r2,r2,47
   1a05c:	1000031e 	bne	r2,zero,1a06c <alt_find_file+0x6c>
    {
      len -= 1;
   1a060:	e0bffe17 	ldw	r2,-8(fp)
   1a064:	10bfffc4 	addi	r2,r2,-1
   1a068:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1a06c:	e0bffe17 	ldw	r2,-8(fp)
   1a070:	e0ffff17 	ldw	r3,-4(fp)
   1a074:	1885883a 	add	r2,r3,r2
   1a078:	10800003 	ldbu	r2,0(r2)
   1a07c:	10803fcc 	andi	r2,r2,255
   1a080:	1080201c 	xori	r2,r2,128
   1a084:	10bfe004 	addi	r2,r2,-128
   1a088:	10800be0 	cmpeqi	r2,r2,47
   1a08c:	1000081e 	bne	r2,zero,1a0b0 <alt_find_file+0xb0>
   1a090:	e0bffe17 	ldw	r2,-8(fp)
   1a094:	e0ffff17 	ldw	r3,-4(fp)
   1a098:	1885883a 	add	r2,r3,r2
   1a09c:	10800003 	ldbu	r2,0(r2)
   1a0a0:	10803fcc 	andi	r2,r2,255
   1a0a4:	1080201c 	xori	r2,r2,128
   1a0a8:	10bfe004 	addi	r2,r2,-128
   1a0ac:	10000a1e 	bne	r2,zero,1a0d8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   1a0b0:	e0bffd17 	ldw	r2,-12(fp)
   1a0b4:	10800217 	ldw	r2,8(r2)
   1a0b8:	e0fffe17 	ldw	r3,-8(fp)
   1a0bc:	180d883a 	mov	r6,r3
   1a0c0:	e17fff17 	ldw	r5,-4(fp)
   1a0c4:	1009883a 	mov	r4,r2
   1a0c8:	001a35c0 	call	1a35c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1a0cc:	1000021e 	bne	r2,zero,1a0d8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1a0d0:	e0bffd17 	ldw	r2,-12(fp)
   1a0d4:	00000706 	br	1a0f4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   1a0d8:	e0bffd17 	ldw	r2,-12(fp)
   1a0dc:	10800017 	ldw	r2,0(r2)
   1a0e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1a0e4:	e0fffd17 	ldw	r3,-12(fp)
   1a0e8:	d0a00604 	addi	r2,gp,-32744
   1a0ec:	18bfcc1e 	bne	r3,r2,1a020 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a020>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1a0f0:	0005883a 	mov	r2,zero
}
   1a0f4:	e037883a 	mov	sp,fp
   1a0f8:	dfc00117 	ldw	ra,4(sp)
   1a0fc:	df000017 	ldw	fp,0(sp)
   1a100:	dec00204 	addi	sp,sp,8
   1a104:	f800283a 	ret

0001a108 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1a108:	defff904 	addi	sp,sp,-28
   1a10c:	dfc00615 	stw	ra,24(sp)
   1a110:	df000515 	stw	fp,20(sp)
   1a114:	df000504 	addi	fp,sp,20
   1a118:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1a11c:	00bffa04 	movi	r2,-24
   1a120:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   1a124:	d0a83017 	ldw	r2,-24384(gp)
   1a128:	e0bffd15 	stw	r2,-12(fp)
   1a12c:	e03ffe0d 	sth	zero,-8(fp)
   1a130:	e0bffe0b 	ldhu	r2,-8(fp)
   1a134:	e0fffe84 	addi	r3,fp,-6
   1a138:	180d883a 	mov	r6,r3
   1a13c:	100b883a 	mov	r5,r2
   1a140:	e13ffd17 	ldw	r4,-12(fp)
   1a144:	00144780 	call	14478 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1a148:	e03ffb15 	stw	zero,-20(fp)
   1a14c:	00001906 	br	1a1b4 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   1a150:	008000b4 	movhi	r2,2
   1a154:	10af5d04 	addi	r2,r2,-17036
   1a158:	e0fffb17 	ldw	r3,-20(fp)
   1a15c:	18c00324 	muli	r3,r3,12
   1a160:	10c5883a 	add	r2,r2,r3
   1a164:	10800017 	ldw	r2,0(r2)
   1a168:	10000f1e 	bne	r2,zero,1a1a8 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   1a16c:	008000b4 	movhi	r2,2
   1a170:	10af5d04 	addi	r2,r2,-17036
   1a174:	e0fffb17 	ldw	r3,-20(fp)
   1a178:	18c00324 	muli	r3,r3,12
   1a17c:	10c5883a 	add	r2,r2,r3
   1a180:	e0ffff17 	ldw	r3,-4(fp)
   1a184:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1a188:	d0e00a17 	ldw	r3,-32728(gp)
   1a18c:	e0bffb17 	ldw	r2,-20(fp)
   1a190:	1880020e 	bge	r3,r2,1a19c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   1a194:	e0bffb17 	ldw	r2,-20(fp)
   1a198:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   1a19c:	e0bffb17 	ldw	r2,-20(fp)
   1a1a0:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   1a1a4:	00000606 	br	1a1c0 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1a1a8:	e0bffb17 	ldw	r2,-20(fp)
   1a1ac:	10800044 	addi	r2,r2,1
   1a1b0:	e0bffb15 	stw	r2,-20(fp)
   1a1b4:	e0bffb17 	ldw	r2,-20(fp)
   1a1b8:	10800810 	cmplti	r2,r2,32
   1a1bc:	103fe41e 	bne	r2,zero,1a150 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a150>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   1a1c0:	d0a83017 	ldw	r2,-24384(gp)
   1a1c4:	1009883a 	mov	r4,r2
   1a1c8:	00147f00 	call	147f0 <OSSemPost>

  return rc;
   1a1cc:	e0bffc17 	ldw	r2,-16(fp)
}
   1a1d0:	e037883a 	mov	sp,fp
   1a1d4:	dfc00117 	ldw	ra,4(sp)
   1a1d8:	df000017 	ldw	fp,0(sp)
   1a1dc:	dec00204 	addi	sp,sp,8
   1a1e0:	f800283a 	ret

0001a1e4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1a1e4:	defffb04 	addi	sp,sp,-20
   1a1e8:	df000415 	stw	fp,16(sp)
   1a1ec:	df000404 	addi	fp,sp,16
   1a1f0:	e13ffe15 	stw	r4,-8(fp)
   1a1f4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1a1f8:	e0bfff17 	ldw	r2,-4(fp)
   1a1fc:	10840070 	cmpltui	r2,r2,4097
   1a200:	1000021e 	bne	r2,zero,1a20c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1a204:	00840004 	movi	r2,4096
   1a208:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1a20c:	e0fffe17 	ldw	r3,-8(fp)
   1a210:	e0bfff17 	ldw	r2,-4(fp)
   1a214:	1885883a 	add	r2,r3,r2
   1a218:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1a21c:	e0bffe17 	ldw	r2,-8(fp)
   1a220:	e0bffc15 	stw	r2,-16(fp)
   1a224:	00000506 	br	1a23c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1a228:	e0bffc17 	ldw	r2,-16(fp)
   1a22c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1a230:	e0bffc17 	ldw	r2,-16(fp)
   1a234:	10800804 	addi	r2,r2,32
   1a238:	e0bffc15 	stw	r2,-16(fp)
   1a23c:	e0fffc17 	ldw	r3,-16(fp)
   1a240:	e0bffd17 	ldw	r2,-12(fp)
   1a244:	18bff836 	bltu	r3,r2,1a228 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a228>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1a248:	e0bffe17 	ldw	r2,-8(fp)
   1a24c:	108007cc 	andi	r2,r2,31
   1a250:	10000226 	beq	r2,zero,1a25c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1a254:	e0bffc17 	ldw	r2,-16(fp)
   1a258:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1a25c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1a260:	0001883a 	nop
   1a264:	e037883a 	mov	sp,fp
   1a268:	df000017 	ldw	fp,0(sp)
   1a26c:	dec00104 	addi	sp,sp,4
   1a270:	f800283a 	ret

0001a274 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1a274:	defffe04 	addi	sp,sp,-8
   1a278:	df000115 	stw	fp,4(sp)
   1a27c:	df000104 	addi	fp,sp,4
   1a280:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   1a284:	e0bfff17 	ldw	r2,-4(fp)
   1a288:	10bffe84 	addi	r2,r2,-6
   1a28c:	10c00428 	cmpgeui	r3,r2,16
   1a290:	18001a1e 	bne	r3,zero,1a2fc <alt_exception_cause_generated_bad_addr+0x88>
   1a294:	100690ba 	slli	r3,r2,2
   1a298:	008000b4 	movhi	r2,2
   1a29c:	10a8ab04 	addi	r2,r2,-23892
   1a2a0:	1885883a 	add	r2,r3,r2
   1a2a4:	10800017 	ldw	r2,0(r2)
   1a2a8:	1000683a 	jmp	r2
   1a2ac:	0001a2ec 	andhi	zero,zero,1675
   1a2b0:	0001a2ec 	andhi	zero,zero,1675
   1a2b4:	0001a2fc 	xorhi	zero,zero,1675
   1a2b8:	0001a2fc 	xorhi	zero,zero,1675
   1a2bc:	0001a2fc 	xorhi	zero,zero,1675
   1a2c0:	0001a2ec 	andhi	zero,zero,1675
   1a2c4:	0001a2f4 	movhi	zero,1675
   1a2c8:	0001a2fc 	xorhi	zero,zero,1675
   1a2cc:	0001a2ec 	andhi	zero,zero,1675
   1a2d0:	0001a2ec 	andhi	zero,zero,1675
   1a2d4:	0001a2fc 	xorhi	zero,zero,1675
   1a2d8:	0001a2ec 	andhi	zero,zero,1675
   1a2dc:	0001a2f4 	movhi	zero,1675
   1a2e0:	0001a2fc 	xorhi	zero,zero,1675
   1a2e4:	0001a2fc 	xorhi	zero,zero,1675
   1a2e8:	0001a2ec 	andhi	zero,zero,1675
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1a2ec:	00800044 	movi	r2,1
   1a2f0:	00000306 	br	1a300 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1a2f4:	0005883a 	mov	r2,zero
   1a2f8:	00000106 	br	1a300 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1a2fc:	0005883a 	mov	r2,zero
  }
}
   1a300:	e037883a 	mov	sp,fp
   1a304:	df000017 	ldw	fp,0(sp)
   1a308:	dec00104 	addi	sp,sp,4
   1a30c:	f800283a 	ret

0001a310 <atexit>:
   1a310:	200b883a 	mov	r5,r4
   1a314:	000f883a 	mov	r7,zero
   1a318:	000d883a 	mov	r6,zero
   1a31c:	0009883a 	mov	r4,zero
   1a320:	001a3d81 	jmpi	1a3d8 <__register_exitproc>

0001a324 <exit>:
   1a324:	defffe04 	addi	sp,sp,-8
   1a328:	000b883a 	mov	r5,zero
   1a32c:	dc000015 	stw	r16,0(sp)
   1a330:	dfc00115 	stw	ra,4(sp)
   1a334:	2021883a 	mov	r16,r4
   1a338:	001a4f00 	call	1a4f0 <__call_exitprocs>
   1a33c:	008000b4 	movhi	r2,2
   1a340:	10b49b04 	addi	r2,r2,-11668
   1a344:	11000017 	ldw	r4,0(r2)
   1a348:	20800f17 	ldw	r2,60(r4)
   1a34c:	10000126 	beq	r2,zero,1a354 <exit+0x30>
   1a350:	103ee83a 	callr	r2
   1a354:	8009883a 	mov	r4,r16
   1a358:	001a6700 	call	1a670 <_exit>

0001a35c <memcmp>:
   1a35c:	01c000c4 	movi	r7,3
   1a360:	3980192e 	bgeu	r7,r6,1a3c8 <memcmp+0x6c>
   1a364:	2144b03a 	or	r2,r4,r5
   1a368:	11c4703a 	and	r2,r2,r7
   1a36c:	10000f26 	beq	r2,zero,1a3ac <memcmp+0x50>
   1a370:	20800003 	ldbu	r2,0(r4)
   1a374:	28c00003 	ldbu	r3,0(r5)
   1a378:	10c0151e 	bne	r2,r3,1a3d0 <memcmp+0x74>
   1a37c:	31bfff84 	addi	r6,r6,-2
   1a380:	01ffffc4 	movi	r7,-1
   1a384:	00000406 	br	1a398 <memcmp+0x3c>
   1a388:	20800003 	ldbu	r2,0(r4)
   1a38c:	28c00003 	ldbu	r3,0(r5)
   1a390:	31bfffc4 	addi	r6,r6,-1
   1a394:	10c00e1e 	bne	r2,r3,1a3d0 <memcmp+0x74>
   1a398:	21000044 	addi	r4,r4,1
   1a39c:	29400044 	addi	r5,r5,1
   1a3a0:	31fff91e 	bne	r6,r7,1a388 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a388>
   1a3a4:	0005883a 	mov	r2,zero
   1a3a8:	f800283a 	ret
   1a3ac:	20c00017 	ldw	r3,0(r4)
   1a3b0:	28800017 	ldw	r2,0(r5)
   1a3b4:	18bfee1e 	bne	r3,r2,1a370 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a370>
   1a3b8:	31bfff04 	addi	r6,r6,-4
   1a3bc:	21000104 	addi	r4,r4,4
   1a3c0:	29400104 	addi	r5,r5,4
   1a3c4:	39bff936 	bltu	r7,r6,1a3ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a3ac>
   1a3c8:	303fe91e 	bne	r6,zero,1a370 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a370>
   1a3cc:	003ff506 	br	1a3a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a3a4>
   1a3d0:	10c5c83a 	sub	r2,r2,r3
   1a3d4:	f800283a 	ret

0001a3d8 <__register_exitproc>:
   1a3d8:	defffa04 	addi	sp,sp,-24
   1a3dc:	dc000315 	stw	r16,12(sp)
   1a3e0:	040000b4 	movhi	r16,2
   1a3e4:	84349b04 	addi	r16,r16,-11668
   1a3e8:	80c00017 	ldw	r3,0(r16)
   1a3ec:	dc400415 	stw	r17,16(sp)
   1a3f0:	dfc00515 	stw	ra,20(sp)
   1a3f4:	18805217 	ldw	r2,328(r3)
   1a3f8:	2023883a 	mov	r17,r4
   1a3fc:	10003726 	beq	r2,zero,1a4dc <__register_exitproc+0x104>
   1a400:	10c00117 	ldw	r3,4(r2)
   1a404:	010007c4 	movi	r4,31
   1a408:	20c00e16 	blt	r4,r3,1a444 <__register_exitproc+0x6c>
   1a40c:	1a000044 	addi	r8,r3,1
   1a410:	8800221e 	bne	r17,zero,1a49c <__register_exitproc+0xc4>
   1a414:	18c00084 	addi	r3,r3,2
   1a418:	18c7883a 	add	r3,r3,r3
   1a41c:	18c7883a 	add	r3,r3,r3
   1a420:	12000115 	stw	r8,4(r2)
   1a424:	10c7883a 	add	r3,r2,r3
   1a428:	19400015 	stw	r5,0(r3)
   1a42c:	0005883a 	mov	r2,zero
   1a430:	dfc00517 	ldw	ra,20(sp)
   1a434:	dc400417 	ldw	r17,16(sp)
   1a438:	dc000317 	ldw	r16,12(sp)
   1a43c:	dec00604 	addi	sp,sp,24
   1a440:	f800283a 	ret
   1a444:	00800034 	movhi	r2,0
   1a448:	10800004 	addi	r2,r2,0
   1a44c:	10002626 	beq	r2,zero,1a4e8 <__register_exitproc+0x110>
   1a450:	01006404 	movi	r4,400
   1a454:	d9400015 	stw	r5,0(sp)
   1a458:	d9800115 	stw	r6,4(sp)
   1a45c:	d9c00215 	stw	r7,8(sp)
   1a460:	00000000 	call	0 <__reset>
   1a464:	d9400017 	ldw	r5,0(sp)
   1a468:	d9800117 	ldw	r6,4(sp)
   1a46c:	d9c00217 	ldw	r7,8(sp)
   1a470:	10001d26 	beq	r2,zero,1a4e8 <__register_exitproc+0x110>
   1a474:	81000017 	ldw	r4,0(r16)
   1a478:	10000115 	stw	zero,4(r2)
   1a47c:	02000044 	movi	r8,1
   1a480:	22405217 	ldw	r9,328(r4)
   1a484:	0007883a 	mov	r3,zero
   1a488:	12400015 	stw	r9,0(r2)
   1a48c:	20805215 	stw	r2,328(r4)
   1a490:	10006215 	stw	zero,392(r2)
   1a494:	10006315 	stw	zero,396(r2)
   1a498:	883fde26 	beq	r17,zero,1a414 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a414>
   1a49c:	18c9883a 	add	r4,r3,r3
   1a4a0:	2109883a 	add	r4,r4,r4
   1a4a4:	1109883a 	add	r4,r2,r4
   1a4a8:	21802215 	stw	r6,136(r4)
   1a4ac:	01800044 	movi	r6,1
   1a4b0:	12406217 	ldw	r9,392(r2)
   1a4b4:	30cc983a 	sll	r6,r6,r3
   1a4b8:	4992b03a 	or	r9,r9,r6
   1a4bc:	12406215 	stw	r9,392(r2)
   1a4c0:	21c04215 	stw	r7,264(r4)
   1a4c4:	01000084 	movi	r4,2
   1a4c8:	893fd21e 	bne	r17,r4,1a414 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a414>
   1a4cc:	11006317 	ldw	r4,396(r2)
   1a4d0:	218cb03a 	or	r6,r4,r6
   1a4d4:	11806315 	stw	r6,396(r2)
   1a4d8:	003fce06 	br	1a414 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a414>
   1a4dc:	18805304 	addi	r2,r3,332
   1a4e0:	18805215 	stw	r2,328(r3)
   1a4e4:	003fc606 	br	1a400 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a400>
   1a4e8:	00bfffc4 	movi	r2,-1
   1a4ec:	003fd006 	br	1a430 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a430>

0001a4f0 <__call_exitprocs>:
   1a4f0:	defff504 	addi	sp,sp,-44
   1a4f4:	df000915 	stw	fp,36(sp)
   1a4f8:	dd400615 	stw	r21,24(sp)
   1a4fc:	dc800315 	stw	r18,12(sp)
   1a500:	dfc00a15 	stw	ra,40(sp)
   1a504:	ddc00815 	stw	r23,32(sp)
   1a508:	dd800715 	stw	r22,28(sp)
   1a50c:	dd000515 	stw	r20,20(sp)
   1a510:	dcc00415 	stw	r19,16(sp)
   1a514:	dc400215 	stw	r17,8(sp)
   1a518:	dc000115 	stw	r16,4(sp)
   1a51c:	d9000015 	stw	r4,0(sp)
   1a520:	2839883a 	mov	fp,r5
   1a524:	04800044 	movi	r18,1
   1a528:	057fffc4 	movi	r21,-1
   1a52c:	008000b4 	movhi	r2,2
   1a530:	10b49b04 	addi	r2,r2,-11668
   1a534:	12000017 	ldw	r8,0(r2)
   1a538:	45005217 	ldw	r20,328(r8)
   1a53c:	44c05204 	addi	r19,r8,328
   1a540:	a0001c26 	beq	r20,zero,1a5b4 <__call_exitprocs+0xc4>
   1a544:	a0800117 	ldw	r2,4(r20)
   1a548:	15ffffc4 	addi	r23,r2,-1
   1a54c:	b8000d16 	blt	r23,zero,1a584 <__call_exitprocs+0x94>
   1a550:	14000044 	addi	r16,r2,1
   1a554:	8421883a 	add	r16,r16,r16
   1a558:	8421883a 	add	r16,r16,r16
   1a55c:	84402004 	addi	r17,r16,128
   1a560:	a463883a 	add	r17,r20,r17
   1a564:	a421883a 	add	r16,r20,r16
   1a568:	e0001e26 	beq	fp,zero,1a5e4 <__call_exitprocs+0xf4>
   1a56c:	80804017 	ldw	r2,256(r16)
   1a570:	e0801c26 	beq	fp,r2,1a5e4 <__call_exitprocs+0xf4>
   1a574:	bdffffc4 	addi	r23,r23,-1
   1a578:	843fff04 	addi	r16,r16,-4
   1a57c:	8c7fff04 	addi	r17,r17,-4
   1a580:	bd7ff91e 	bne	r23,r21,1a568 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a568>
   1a584:	00800034 	movhi	r2,0
   1a588:	10800004 	addi	r2,r2,0
   1a58c:	10000926 	beq	r2,zero,1a5b4 <__call_exitprocs+0xc4>
   1a590:	a0800117 	ldw	r2,4(r20)
   1a594:	1000301e 	bne	r2,zero,1a658 <__call_exitprocs+0x168>
   1a598:	a0800017 	ldw	r2,0(r20)
   1a59c:	10003226 	beq	r2,zero,1a668 <__call_exitprocs+0x178>
   1a5a0:	a009883a 	mov	r4,r20
   1a5a4:	98800015 	stw	r2,0(r19)
   1a5a8:	00000000 	call	0 <__reset>
   1a5ac:	9d000017 	ldw	r20,0(r19)
   1a5b0:	a03fe41e 	bne	r20,zero,1a544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a544>
   1a5b4:	dfc00a17 	ldw	ra,40(sp)
   1a5b8:	df000917 	ldw	fp,36(sp)
   1a5bc:	ddc00817 	ldw	r23,32(sp)
   1a5c0:	dd800717 	ldw	r22,28(sp)
   1a5c4:	dd400617 	ldw	r21,24(sp)
   1a5c8:	dd000517 	ldw	r20,20(sp)
   1a5cc:	dcc00417 	ldw	r19,16(sp)
   1a5d0:	dc800317 	ldw	r18,12(sp)
   1a5d4:	dc400217 	ldw	r17,8(sp)
   1a5d8:	dc000117 	ldw	r16,4(sp)
   1a5dc:	dec00b04 	addi	sp,sp,44
   1a5e0:	f800283a 	ret
   1a5e4:	a0800117 	ldw	r2,4(r20)
   1a5e8:	80c00017 	ldw	r3,0(r16)
   1a5ec:	10bfffc4 	addi	r2,r2,-1
   1a5f0:	15c01426 	beq	r2,r23,1a644 <__call_exitprocs+0x154>
   1a5f4:	80000015 	stw	zero,0(r16)
   1a5f8:	183fde26 	beq	r3,zero,1a574 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a574>
   1a5fc:	95c8983a 	sll	r4,r18,r23
   1a600:	a0806217 	ldw	r2,392(r20)
   1a604:	a5800117 	ldw	r22,4(r20)
   1a608:	2084703a 	and	r2,r4,r2
   1a60c:	10000b26 	beq	r2,zero,1a63c <__call_exitprocs+0x14c>
   1a610:	a0806317 	ldw	r2,396(r20)
   1a614:	2088703a 	and	r4,r4,r2
   1a618:	20000c1e 	bne	r4,zero,1a64c <__call_exitprocs+0x15c>
   1a61c:	89400017 	ldw	r5,0(r17)
   1a620:	d9000017 	ldw	r4,0(sp)
   1a624:	183ee83a 	callr	r3
   1a628:	a0800117 	ldw	r2,4(r20)
   1a62c:	15bfbf1e 	bne	r2,r22,1a52c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a52c>
   1a630:	98800017 	ldw	r2,0(r19)
   1a634:	153fcf26 	beq	r2,r20,1a574 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a574>
   1a638:	003fbc06 	br	1a52c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a52c>
   1a63c:	183ee83a 	callr	r3
   1a640:	003ff906 	br	1a628 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a628>
   1a644:	a5c00115 	stw	r23,4(r20)
   1a648:	003feb06 	br	1a5f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a5f8>
   1a64c:	89000017 	ldw	r4,0(r17)
   1a650:	183ee83a 	callr	r3
   1a654:	003ff406 	br	1a628 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a628>
   1a658:	a0800017 	ldw	r2,0(r20)
   1a65c:	a027883a 	mov	r19,r20
   1a660:	1029883a 	mov	r20,r2
   1a664:	003fb606 	br	1a540 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a540>
   1a668:	0005883a 	mov	r2,zero
   1a66c:	003ffb06 	br	1a65c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a65c>

0001a670 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1a670:	defffd04 	addi	sp,sp,-12
   1a674:	df000215 	stw	fp,8(sp)
   1a678:	df000204 	addi	fp,sp,8
   1a67c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1a680:	d0283845 	stb	zero,-24351(gp)
   1a684:	e0bfff17 	ldw	r2,-4(fp)
   1a688:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1a68c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1a690:	10000226 	beq	r2,zero,1a69c <_exit+0x2c>
    ALT_SIM_FAIL();
   1a694:	002af070 	cmpltui	zero,zero,43969
   1a698:	00000106 	br	1a6a0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   1a69c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1a6a0:	003fff06 	br	1a6a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a6a0>
